

#Область ОбработчикиСобытий

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ПоВсемОрганизациям = Истина;
	УстановитьНастройкиПоОрганизации();
	
	Если Параметры.Свойство("СчетЗамены") И НЕ Параметры.СчетЗамены = Неопределено Тогда
		СтрокаСчетаЗамены = ТаблицаОбновляемыеСчета.Добавить();
		СтрокаСчетаЗамены.ИсходныйСчет = Параметры.СчетЗамены;
		СтрокаСчетаЗамены.НаименованиеИсходногоСчета = ПолучитьЗначениеРеквизита(Параметры.СчетЗамены, "Наименование");
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
	СобытиеЖурналаРегистрацииЗаменаСчетов = ПланыСчетов.Типовой.СобытиеЖурналаРегистрацииЗаменаСчетов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновляемыеСчетаИсходныйСчетПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ТаблицаОбновляемыеСчета.ТекущиеДанные;
	ТекущаяСтрока.НаименованиеИсходногоСчета = ПолучитьЗначениеРеквизита(ТекущаяСтрока.ИсходныйСчет, "Наименование");
	
	ЗафиксироватьОшибкиПоСтроке(ТекущаяСтрока);
	
	ПоляОбъекта = Новый Структура;
	ПоляОбъекта.Вставить("Субконто1", "Субконто1");
	ПоляОбъекта.Вставить("Субконто2", "Субконто2");
	ПоляОбъекта.Вставить("Субконто3", "Субконто3");
	
	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриИзмененииСчета(ТекущаяСтрока.ИсходныйСчет, ТекущаяСтрока, ПоляОбъекта, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновляемыеСчетаНовыйСчетПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ТаблицаОбновляемыеСчета.ТекущиеДанные;
	ТекущаяСтрока.НаименованиеНовогоСчета = ПолучитьЗначениеРеквизита(ТекущаяСтрока.НовыйСчет, "Наименование");
		
	ЗафиксироватьОшибкиПоСтроке(ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияРезервнаяКопияНажатие(Элемент)
	
	ОткрытьФорму("Обработка.РезервноеКопированиеИБ.Форма", Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияЖурналРегистрацииНажатие(Элемент)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СобытиеЖурналаРегистрации", СобытиеЖурналаРегистрацииЗаменаСчетов);
	ПараметрыФормы.Вставить("ДатаНачала", ВремяНачалаЗаменыСчетов);
	Если ВремяОкончанияЗаменыСчетов <> Неопределено Тогда
		ПараметрыФормы.Вставить("ДатаОкончания", ВремяОкончанияЗаменыСчетов);
	КонецЕсли;

	ОткрытьФорму("Обработка.ЖурналРегистрации.Форма.ЖурналРегистрации", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура КнопкаНазад(Команда)
	
	Элементы.ГруппаСтраницы.ТекущаяСтраница 	= Элементы.ГруппаСтраницы.ПодчиненныеЭлементы.СтраницаНастройкаЗамены;
	Элементы.СтраницыКомандыНиз.ТекущаяСтраница = Элементы.СтраницыКомандыНиз.ПодчиненныеЭлементы.СтраницаКомандыНизШаг1;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоВсемОрганизациямПриИзменении(Элемент)
	
	УстановитьНастройкиПоОрганизации();
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоАналитикеИсходногоСчетаПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);	
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОбновляемыеСчетаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если ТаблицаОбновляемыеСчета.Количество() > 0 И ПоАналитикеИсходногоСчета Тогда
		ТекстСообщения = НСтр("ru='При установленном признаке ""С отбором по аналитике исходного счета"" в табличную часть может быть введено не более одного счета'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "ТаблицаОбновляемыеСчета", "Объект", Отказ);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКоманд

&НаКлиенте
Процедура ЗаменитьСчета(Команда)
	
	ОшибкиНастройкиЗаменыСсылок = ПроверитьНастройкиСчетов();
	Если ОшибкиНастройкиЗаменыСсылок.Свойство("ОшибкиПоСчетам") Тогда
		Возврат;
	ИначеЕсли ОшибкиНастройкиЗаменыСсылок.Свойство("ОшибкиПоАналитике") Тогда
		ТекстВопроса = НСтр("ru = 'Счета замены ссылок различаются по видам аналитики, часть данных может быть утеряна необратимо. Продолжить?'");
	Иначе
		ТекстВопроса = НСтр("ru = 'Операция замены счетов в объектах информационной базы необратима. Продолжить?'");
	КонецЕсли;
		
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеЗакрытияВопросаЗаменыСчетов", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьАнализСчета(Команда)
	
	ТекущаяСтрока = Элементы.ТаблицаОбновляемыеСчета.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		СчетДляАнализа = ПредопределенноеЗначение("ПланСчетов.Налоговый.ПустаяСсылка");
	Иначе
		СчетДляАнализа = ТекущаяСтрока.ИсходныйСчет;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СчетДляАнализа) Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru='Не выбран счет для анализа'"));
		Возврат;
	КонецЕсли;
		
	ПараметрыАнализаСчета = ОпределитьПараметрыАнализаСчета(СчетДляАнализа);
		
	ОткрытьФорму("Отчет.АнализСчетаНалоговый.Форма.ФормаОтчета", ПараметрыАнализаСчета,, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьМестаИспользования(Команда)
	
	МассивСсылок = Новый Массив;
	ТекущаяСтрока = Элементы.ТаблицаОбновляемыеСчета.ТекущиеДанные;
	
	Если ТекущаяСтрока = Неопределено Тогда
		СчетДляАнализа = ПредопределенноеЗначение("ПланСчетов.Налоговый.ПустаяСсылка");
	Иначе
		СчетДляАнализа = ТекущаяСтрока.ИсходныйСчет;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СчетДляАнализа) Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru='Не выбран счет для анализа'"));
		Возврат;
	КонецЕсли;

	МассивСсылок.Добавить(СчетДляАнализа);
	
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("Отбор", Новый Структура("НаборСсылок", МассивСсылок));
	ОткрытьФорму("Отчет.МестаИспользованияСсылок.Форма", ПараметрыОтчета, ЭтотОбъект);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыиФункции

&НаСервереБезКонтекста
Функция ПолучитьЗначениеРеквизита(Объект, Реквизит)
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект, Реквизит);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ЗафиксироватьОшибкиПоСтроке(ТекущаяСтрока)
	
	ОшибкиПоСоответствиюАналитикСчетов = ПоискОшибокПоАналитикеСчетов(ТекущаяСтрока.ИсходныйСчет, ТекущаяСтрока.НовыйСчет);
	
	Если ЗначениеЗаполнено(ОшибкиПоСоответствиюАналитикСчетов) Тогда
		ТекущаяСтрока.ВыявленыОшибки = Истина;
		ТекстОшибки = НСтр("ru = 'Отсутствует аналитика: %1'");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, ОшибкиПоСоответствиюАналитикСчетов);

		ТекущаяСтрока.Комментарий = ТекстОшибки;
	Иначе
		ТекущаяСтрока.ВыявленыОшибки = Ложь;
		ТекущаяСтрока.Комментарий = "";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьНастройкиПоОрганизации()
	
	Если ПоВсемОрганизациям Тогда
		Организация = Справочники.Организации.ПустаяСсылка();
	Иначе
		Организация = Справочники.Организации.ОрганизацияПоУмолчанию();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОпределитьПараметрыАнализаСчета(СчетДляАнализа)
	
	// Подготавливаем структуру для отбора необходимых параметров.
    ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
    ПользовательскиеОтборы = ПользовательскиеНастройки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
    ПользовательскиеОтборы.ИдентификаторПользовательскойНастройки = "Отбор";
	
	ОтборПоУмолчанию = Истина;
	Если ПоАналитикеИсходногоСчета И ТаблицаОбновляемыеСчета.Количество() <> 0 Тогда
		ТекущаяСтрока = ТаблицаОбновляемыеСчета[0];
		Если ТекущаяСтрока.ИсходныйСчет = СчетДляАнализа Тогда
			Если ЗначениеЗаполнено(ТекущаяСтрока.Субконто1) Тогда
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "Субконто1", ТекущаяСтрока.Субконто1);
				ОтборПоУмолчанию = Ложь;
			КонецЕсли;
			Если ЗначениеЗаполнено(ТекущаяСтрока.Субконто2) Тогда
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "Субконто2", ТекущаяСтрока.Субконто2);
				ОтборПоУмолчанию = Ложь;
			КонецЕсли;
			Если ЗначениеЗаполнено(ТекущаяСтрока.Субконто3) Тогда
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "Субконто3", ТекущаяСтрока.Субконто3);
				ОтборПоУмолчанию = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
    
    ДополнительныеСвойства = ПользовательскиеНастройки.ДополнительныеСвойства;
	Если ЗначениеЗаполнено(Организация) Тогда
		СписокСтруктурныхЕдиниц = Новый СписокЗначений;
		СписокСтруктурныхЕдиниц.Добавить(Организация);
		ДополнительныеСвойства.Вставить("СписокСтруктурныхЕдиниц", СписокСтруктурныхЕдиниц);
	КонецЕсли;
    ДополнительныеСвойства.Вставить("Счет",                     СчетДляАнализа);
    ДополнительныеСвойства.Вставить("ПоСубсчетамКорСчетов",     Истина);
	
	ЗаполняемыеНастройки = Новый Структура("Показатели, Группировка, Отбор, ВыводимыеДанные");
	ЗаполняемыеНастройки.Вставить("Показатели",			        Истина);
	ЗаполняемыеНастройки.Вставить("Группировка",		        Истина);
	ЗаполняемыеНастройки.Вставить("Отбор",				        ОтборПоУмолчанию);
	ЗаполняемыеНастройки.Вставить("ВыводимыеДанные",	        Истина);
	
	ПараметрыАнализаСчета = Новый Структура();
	ПараметрыАнализаСчета.Вставить("РежимРасшифровки",          Истина);
	ПараметрыАнализаСчета.Вставить("ВидРасшифровки",			2);
	ПараметрыАнализаСчета.Вставить("ПользовательскиеНастройки",	ПользовательскиеНастройки);
	ПараметрыАнализаСчета.Вставить("СформироватьПриОткрытии",	Истина);
	ПараметрыАнализаСчета.Вставить("ЗаполняемыеНастройки",		ЗаполняемыеНастройки);
	
	Возврат ПараметрыАнализаСчета;
	
КонецФункции

&НаСервере
Функция ПоискДублейИсходныхСчетов()
	
	ТаблицаСчетов = ДанныеФормыВЗначение(ТаблицаОбновляемыеСчета,Тип("ТаблицаЗначений"));
	ТаблицаСчетов.Колонки.Добавить("КоличествоСчетов");
	ТаблицаСчетов.ЗаполнитьЗначения(1, "КоличествоСчетов");
	ТаблицаСчетов.Свернуть("ИсходныйСчет", "КоличествоСчетов");
	
	МассивДублейПоСчетам = Новый Массив;
	Для каждого ТекСтрока Из ТаблицаСчетов Цикл
		Если ТекСтрока.КоличествоСчетов > 1 Тогда
			МассивДублейПоСчетам.Добавить(ТекСтрока.ИсходныйСчет);
		КонецЕсли;
	КонецЦикла; 
	
	Возврат МассивДублейПоСчетам;
		
КонецФункции

&НаКлиенте
Процедура ПослеЗакрытияВопросаЗаменыСчетов(Результат, Параметры) Экспорт 
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ОбработчикОжиданияЗамены();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОжиданияЗамены()
	
	Результат = ЗаменитьНаСервереВФоне();
	ПроверитьВыполнениеФоновогоЗадания(Результат);
	
КонецПроцедуры

&НаСервере
Функция ЗаменитьНаСервереВФоне()
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(Новый УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Замена ссылок на счета регламентированного учета в данных'");
	ВремяНачалаЗаменыСчетов = ТекущаяДатаСеанса();
	ВремяОкончанияЗаменыСчетов = Неопределено;
	
	ТаблицаСчетов = ДанныеФормыВЗначение(ТаблицаОбновляемыеСчета,Тип("ТаблицаЗначений"));
	СписокЗаменяемыхОбъектов = Новый СписокЗначений;
	СписокНовыхОбъектов      = Новый СписокЗначений;
	СписокАналитики          = Новый СписокЗначений;
	
	Для Каждого ТекСтрока Из ТаблицаСчетов Цикл
		СписокЗаменяемыхОбъектов.Добавить(ТекСтрока.ИсходныйСчет);
		СписокНовыхОбъектов.Добавить(ТекСтрока.НовыйСчет);
		
		Если ПоАналитикеИсходногоСчета Тогда	
			ДанныеСчета = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(ТекСтрока.ИсходныйСчет);
			СтруктураАналитики = Новый Структура;
			Для НомерСубконто = 1 По ТекСтрока.ИсходныйСчет.ВидыСубконто.Количество() Цикл
				Если ЗначениеЗаполнено(ТекСтрока["ВидСубконто" + НомерСубконто]) И ЗначениеЗаполнено(ТекСтрока["Субконто" + НомерСубконто]) Тогда
					СтруктураАналитики.Вставить("ВидСубконто" + НомерСубконто, ДанныеСчета["ВидСубконто" + НомерСубконто]);
					СтруктураАналитики.Вставить("Субконто"    + НомерСубконто, ТекСтрока["Субконто"    + НомерСубконто]);
				КонецЕсли;
			КонецЦикла;
			СписокАналитики.Добавить(СтруктураАналитики);			
		КонецЕсли;
	КонецЦикла;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("СписокЗаменяемыхОбъектов", СписокЗаменяемыхОбъектов);
	СтруктураПараметров.Вставить("СписокНовыхОбъектов", СписокНовыхОбъектов); 
	СтруктураПараметров.Вставить("СписокАналитики", СписокАналитики);  
	СтруктураПараметров.Вставить("ПоАналитикеИсходногоСчета", ПоАналитикеИсходногоСчета);
	СтруктураПараметров.Вставить("Организация", Организация);
	
	ИмяПроцедуры = "ПланыСчетов.Налоговый.ЗаменитьСчетаПриОбновленииПланаСчетов";

	Результат = ДлительныеОперации.ВыполнитьВФоне(ИмяПроцедуры, СтруктураПараметров ,ПараметрыВыполнения);
	
	МетодПродолжения = "ОбработкаПослеВыполненияФоновогоЗамены";
	Результат.Вставить("МетодПродолжения",МетодПродолжения); 
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОбработкаПослеВыполненияФоновогоЗамены(РезультатРаботыЗадания, Параметры) Экспорт
	
	Элементы.ГруппаСтраницы.ТекущаяСтраница 	= Элементы.ГруппаСтраницы.ПодчиненныеЭлементы.СтраницаРезультатЗаменыДанных;
	Элементы.СтраницыКомандыНиз.ТекущаяСтраница = Элементы.СтраницыКомандыНиз.ПодчиненныеЭлементы.СтраницаКомандыНизШаг2;
		
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыполнениеФоновогоЗадания(ФоновоеЗадание) Экспорт

	Если ФоновоеЗадание = Неопределено
		ИЛИ НЕ ТипЗнч(ФоновоеЗадание) = Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	РезультатРаботыЗадания = ФоновоеЗадание;
	
	МетодПродолжения = ?(ФоновоеЗадание.Свойство("МетодПродолжения"), ФоновоеЗадание.МетодПродолжения, Неопределено);
	Если МетодПродолжения <> Неопределено Тогда
		ОповещениеПродолжения = Новый ОписаниеОповещения(МетодПродолжения, ЭтаФорма);
	КонецЕсли;	
	
	Если РезультатРаботыЗадания.Статус = "Выполнено" Тогда
		
		ЗафиксироватьВремяЗавершенияФоновогоЗадания();
		Если ОповещениеПродолжения <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ОповещениеПродолжения, ФоновоеЗадание);
		КонецЕсли;		
		
	Иначе
	
		ПараметрыДлительнойОперации = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтаФорма);
		ПараметрыДлительнойОперации.ТекстСообщения = НСтр("ru = 'Выполняется замена счетов в информационной базе'");
		ПараметрыДлительнойОперации.ВыводитьПрогрессВыполнения = Истина;
		ПараметрыДлительнойОперации.ВыводитьСообщения = Истина;
		
		ДлительныеОперацииКлиент.ОжидатьЗавершение(РезультатРаботыЗадания, ОповещениеПродолжения, ПараметрыДлительнойОперации);
				
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗафиксироватьВремяЗавершенияФоновогоЗадания()
	
	ВремяОкончанияЗаменыСчетов = ТекущаяДатаСеанса();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПоискОшибокПоАналитикеСчетов(ИсходныйСчет, НовыйСчет)
	
	СтрокаОшибокСоответствияАналитики = "";
	
	Если НЕ ЗначениеЗаполнено(ИсходныйСчет) ИЛИ НЕ ЗначениеЗаполнено(НовыйСчет) Тогда
		Возврат СтрокаОшибокСоответствияАналитики;	
	КонецЕсли;
	
	ВидыСубконтоИсходные = ИсходныйСчет.ВидыСубконто;
	ВидыСубконтоНовые    = НовыйСчет.ВидыСубконто;
	
	Для каждого ИсходныйВидСубконто Из ВидыСубконтоИсходные Цикл
	
		Если ВидыСубконтоНовые.Найти(ИсходныйВидСубконто.ВидСубконто) = Неопределено Тогда
			Если ЗначениеЗаполнено(СтрокаОшибокСоответствияАналитики) Тогда
				СтрокаОшибокСоответствияАналитики = СтрокаОшибокСоответствияАналитики + ", ";
			КонецЕсли;
			СтрокаОшибокСоответствияАналитики = СтрокаОшибокСоответствияАналитики + СокрЛП(ИсходныйВидСубконто.ВидСубконто.Наименование);
		КонецЕсли;
	
	КонецЦикла; 
	
	Возврат СтрокаОшибокСоответствияАналитики;
	
КонецФункции	

&НаКлиенте
Функция ПроверитьНастройкиСчетов()
	
	СписокОшибок = Неопределено;
	СписокОшибокПоАналитике = Неопределено;
	
	СтруктураОшибок = Новый Структура;
	
	НомерСтрокиНастройкиСчетов = 1;
	Для Каждого СтрокаТаблицы Из ТаблицаОбновляемыеСчета Цикл
		Если ЗначениеЗаполнено(СтрокаТаблицы.ИсходныйСчет) И НЕ ЗначениеЗаполнено(СтрокаТаблицы.НовыйСчет) Тогда
			ТекстОшибки = НСтр("ru = 'Для исходного счета %1 не указан новый, на который будет произведена замена данных.'");
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, СокрЛП(СтрокаТаблицы.ИсходныйСчет));
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СписокОшибок, Неопределено, ТекстОшибки, Неопределено);
		ИначеЕсли НЕ ЗначениеЗаполнено(СтрокаТаблицы.ИсходныйСчет) И ЗначениеЗаполнено(СтрокаТаблицы.НовыйСчет) Тогда
			ТекстОшибки = НСтр("ru = 'Не заполнен исходный счет для нового счета замены данных %1.'");
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, СокрЛП(СтрокаТаблицы.НовыйСчет));
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СписокОшибок, Неопределено, ТекстОшибки, Неопределено);
		ИначеЕсли НЕ ЗначениеЗаполнено(СтрокаТаблицы.ИсходныйСчет) И НЕ ЗначениеЗаполнено(СтрокаТаблицы.НовыйСчет) Тогда
			ТекстОшибки = НСтр("ru = 'Для строки %1 не определены счета замены данных'");
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, НомерСтрокиНастройкиСчетов);
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СписокОшибок, Неопределено, ТекстОшибки, Неопределено);
		КонецЕсли;
		Если СтрокаТаблицы.ВыявленыОшибки Тогда
			ТекстОшибки = СтрокаТаблицы.Комментарий;
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СписокОшибокПоАналитике, Неопределено, ТекстОшибки, Неопределено);
		КонецЕсли;
		НомерСтрокиНастройкиСчетов = НомерСтрокиНастройкиСчетов + 1;
	КонецЦикла;
	
	ДублиИсходныхСчетов = ПоискДублейИсходныхСчетов();
	Для каждого ТекЭлемент Из ДублиИсходныхСчетов Цикл
	    ТекстОшибки = НСтр("ru = 'Для исходного счета %1 настройки определены несколько раз, необходимо оставить только одну строку с новым счетом'");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, ТекЭлемент);
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СписокОшибок, Неопределено, ТекстОшибки, Неопределено);
	КонецЦикла; 
	
	Если ТаблицаОбновляемыеСчета.Количество() = 0 Тогда
		ТекстОшибки = НСтр("ru = 'Не определены настройки для замены счетов'");
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СписокОшибок, Неопределено, ТекстОшибки, Неопределено);
	КонецЕсли;
	
	Если НЕ СписокОшибок = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(СписокОшибок);
		СтруктураОшибок.Вставить("ОшибкиПоСчетам", СписокОшибок);
	КонецЕсли;
	
	Если НЕ СписокОшибокПоАналитике = Неопределено Тогда
		СтруктураОшибок.Вставить("ОшибкиПоАналитике", СписокОшибокПоАналитике);
	КонецЕсли;

	Возврат СтруктураОшибок;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	Элементы.Организация.Видимость = НЕ Форма.ПоВсемОрганизациям; 
	Элементы.ТаблицаОбновляемыеСчетаАналитика.Видимость = Форма.ПоАналитикеИсходногоСчета;
	
КонецПроцедуры

#КонецОбласти