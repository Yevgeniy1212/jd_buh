#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Расходный кассовый ордер
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Описание";
	КомандаПечати.Представление = НСтр("ru = 'План счетов налогового учета (по налогу на прибыль)'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.Порядок = 50;
		
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	// Печать расходной накладной
	НужноПечататьМакет = УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Описание");
	Если НужноПечататьМакет Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"Описание",
			НСтр("ru = 'План счетов налогового учета (по налогу на прибыль)'"),
			ПечатьОписание(МассивОбъектов, ОбъектыПечати),
			,
			"ПланСчетов.Налоговый.ПФ_MXL_Описание");
	КонецЕсли;

КонецПроцедуры

Функция ПечатьОписание(МассивОбъектов, ОбъектыПечати)Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	ТабДокумент = Новый ТабличныйДокумент;

	ТабДокумент.КлючПараметровПечати = "Описание";
	Макет = УправлениеПечатью.МакетПечатнойФормы("ПланСчетов.Налоговый.ПФ_MXL_Описание");
	
	Шапка            = Макет.ПолучитьОбласть("Шапка");
	ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	
	// Зададим параметры макета по умолчанию
	ТабДокумент.ПолеСверху                   = 10;
	ТабДокумент.ПолеСлева                    = 10;
	ТабДокумент.ПолеСнизу                    = 10;
	ТабДокумент.ПолеСправа                   = 10;
	ТабДокумент.РазмерКолонтитулаСверху      = 10;
	ТабДокумент.ВерхнийКолонтитул.ТекстСлева = НСтр("ru='План счетов налогового учета (по налогу на прибыль)'");
	ТабДокумент.ВерхнийКолонтитул.Выводить   = Истина;
	ТабДокумент.ОриентацияСтраницы           = ОриентацияСтраницы.Портрет;
	
	// Выведем шапку
	Шапка.Параметры.Заголовок = НСтр("ru='План счетов налогового учета (по налогу на прибыль)'");
	ТабДокумент.Вывести(Шапка);
	
	// Выведем заголовок таблицы
	ТабДокумент.Вывести(ЗаголовокТаблицы);
		
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПланСчетов.Ссылка КАК Ссылка,
	|	ПланСчетов.ЭтоГруппа КАК ЭтоГруппа,
	|	ПланСчетов.Ссылка.Код КАК Код,
	|	ПланСчетов.Ссылка.Наименование КАК Наименование,
	|	ПланСчетов.Ссылка.Количественный КАК Количественный,
	|	ПланСчетов.Ссылка.Вид КАК Вид,
	|	ПланСчетов.Ссылка.ВидыСубконто.(
	|		НомерСтроки КАК НомерСтроки,
	|		ВидСубконто.Наименование КАК Наименование,
	|		ТолькоОбороты КАК ТолькоОбороты
	|	) КАК ВидыСубконто
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПланСчетов1.Ссылка КАК Ссылка,
	|		ВЫБОР
	|			КОГДА КОЛИЧЕСТВО(ПланСчетов2.Ссылка) > 0
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ЭтоГруппа
	|	ИЗ
	|		ПланСчетов.Налоговый КАК ПланСчетов1
	|			ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Налоговый КАК ПланСчетов2
	|			ПО ПланСчетов1.Ссылка = ПланСчетов2.Родитель
	|	ГДЕ
	|		ПланСчетов1.ПометкаУдаления = ЛОЖЬ
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ПланСчетов1.Ссылка) КАК ПланСчетов
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПланСчетов.Ссылка.Порядок";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ЭтоГруппа Тогда
			Строка = Макет.ПолучитьОбласть("Группа");
		Иначе
			Строка = Макет.ПолучитьОбласть("Строка");
		КонецЕсли;
			
		Строка.Параметры.Заполнить(Выборка);
			
		Если Выборка.Вид = ВидСчета.Активный Тогда
			Строка.Параметры.Активность = НСтр("ru='А'");
		ИначеЕсли Выборка.Вид = ВидСчета.Пассивный Тогда
			Строка.Параметры.Активность = НСтр("ru='П'");
		Иначе
			Строка.Параметры.Активность = НСтр("ru='АП'");
		КонецЕсли;
		
		ВидыСубконто = Выборка.ВидыСубконто.Выбрать();
		Пока ВидыСубконто.Следующий() Цикл    
			Если ВидыСубконто.ТолькоОбороты Тогда
				СтрокаСубконто = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='(об) %1'"),ВидыСубконто.Наименование);
			Иначе
				СтрокаСубконто = ВидыСубконто.Наименование;
			КонецЕсли;   						
			Строка.Параметры["Субконто" + ВидыСубконто.НомерСтроки] = СтрокаСубконто;
		КонецЦикла;
		
		Если Не ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабДокумент, Строка) Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ТабДокумент.Вывести(ЗаголовокТаблицы);
		КонецЕсли;
		
		ТабДокумент.Вывести(Строка);
		Попытка
			Описание = Макет.ПолучитьОбласть(ПланыСчетов[Выборка.Ссылка.Метаданные().Имя].ПолучитьИмяПредопределенного(Выборка.Ссылка));
			ТабДокумент.Вывести(Описание);
		Исключение
		КонецПопытки;
		
	КонецЦикла;
	
	ТабДокумент.ФиксацияСверху = 2;
	
	Возврат ТабДокумент;
	
КонецФункции

Процедура ПолучениеСсылокНаНовыйОбъект(СписокЗаменяемыхОбъектов, СписокНовыхОбъектов, СписокАналитики, Ссылка, ТипСсылки, НоваяСсылка, АналитикаСчета)
	
	// Получение ссылки на новый объект
	ТипСсылки = ТипЗнч(Ссылка.Ссылка);
	ИсходныйОбъект = СписокЗаменяемыхОбъектов.НайтиПоЗначению(Ссылка.Ссылка);
	ИндексОбъектаВСписке = СписокЗаменяемыхОбъектов.Индекс(ИсходныйОбъект);
	НоваяСсылка = СписокНовыхОбъектов[ИндексОбъектаВСписке].Значение;
	АналитикаСчета = ?(СписокАналитики.Количество() > 0, СписокАналитики[ИндексОбъектаВСписке].Значение, Неопределено);
	
КонецПроцедуры

Процедура ОчиститьНеиспользуемыеСубконто(Объект, Субконто, ЗаменяемаяСсылка, НоваяСсылка, ОбъектИзменен, ЗаписьИзменена)
	
	Если ЗаписьИзменена = Истина Тогда
	
		ВидыСубконтоДоИзменения = ЗаменяемаяСсылка.ВидыСубконто;
		ВидыСубконтоНовые       = НоваяСсылка.ВидыСубконто;
		
		Для каждого ВидСубконтоИсходный Из ВидыСубконтоДоИзменения Цикл
		
			Если ВидыСубконтоНовые.Найти(ВидСубконтоИсходный.ВидСубконто) = Неопределено Тогда
				Объект[Субконто][ВидСубконтоИсходный.ВидСубконто] = Неопределено;
				ОбъектИзменен = Истина;
			КонецЕсли;
		
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаменаСсылкиНаОбъект(Объект, ИмяСвойства, ТипСсылки, ЗаменяемаяСсылка, НоваяСсылка, ОбъектИзменен, ОбъектыПоиска = Неопределено, АналитикаСчета = Неопределено, ЗаписьИзменена = Ложь)
	
	Если ТипЗнч(Объект[ИмяСвойства]) = ТипСсылки Тогда
		Если Объект[ИмяСвойства] = ЗаменяемаяСсылка Тогда
			Если ОбъектыПоиска <> Неопределено И (Найти(ИмяСвойства, "Счет") <> Неопределено) Тогда
				НаименованиеСубконтоБУСПрефиксом = СтрЗаменить(ИмяСвойства,"Счет","Субконто");
				НаименованиеСубконто_БезПрефикса = "Субконто"; 
				НаименованиеСубконтоБУ_БезПрефикса = "СубконтоБУ"; 
				НаименованиеСубконтоБУДт_БезПрефикса = "СубконтоДтБУ"; 
				НаименованиеСубконтоБУКт_БезПрефикса = "СубконтоКтБУ"; 
				
				ВидыСубконтоДоИзменения = ЗаменяемаяСсылка.ВидыСубконто;
				ВидыСубконтоНовые       = НоваяСсылка.ВидыСубконто;
				
				КоличествоСубконтоБУ_Старых = ЗаменяемаяСсылка.ВидыСубконто.Количество();
				КоличествоСубконтоБУ_Новых = НоваяСсылка.ВидыСубконто.Количество();
				МассивУжеЗаполненныхСубконто = Новый Массив;				
				
				//проверим, есть ли субконто с таким именем
				Если ОбъектыПоиска.Найти(НаименованиеСубконтоБУ_БезПрефикса + 1) <> Неопределено Тогда
					НаименованиеСубконтоБУ = НаименованиеСубконтоБУ_БезПрефикса;
				ИначеЕсли ОбъектыПоиска.Найти(НаименованиеСубконто_БезПрефикса + 1) <> Неопределено Тогда
					НаименованиеСубконтоБУ = НаименованиеСубконто_БезПрефикса;
				ИначеЕсли ОбъектыПоиска.Найти(НаименованиеСубконтоБУДт_БезПрефикса + 1) <> Неопределено Тогда
					НаименованиеСубконтоБУ = НаименованиеСубконтоБУДт_БезПрефикса;
				ИначеЕсли ОбъектыПоиска.Найти(НаименованиеСубконтоБУКт_БезПрефикса + 1) <> Неопределено Тогда
					НаименованиеСубконтоБУ = НаименованиеСубконтоБУКт_БезПрефикса;
				ИначеЕсли ОбъектыПоиска.Найти(НаименованиеСубконтоБУСПрефиксом + 1) <> Неопределено Тогда
					НаименованиеСубконтоБУ = НаименованиеСубконтоБУСПрефиксом;
				Иначе //если не подошел не один вариант субконто, то их
					НаименованиеСубконтоБУ = "";
					Если ЗначениеЗаполнено(АналитикаСчета) Тогда
						// отмена замены счета, т.к. задан отбор по аналитике, но невозможно его отбработать
						Возврат;
					КонецЕсли;
				КонецЕсли;
				
				Если Не ПустаяСтрока(НаименованиеСубконтоБУ) Тогда 
					
					Если ЗначениеЗаполнено(АналитикаСчета) Тогда
						// обработка отбора по аналитике
						Для Ном = 1 По КоличествоСубконтоБУ_Старых Цикл
							Если ОбъектыПоиска.Найти(НаименованиеСубконтоБУ + Ном) <> Неопределено И АналитикаСчета.Свойство("Субконто" + Ном) И АналитикаСчета["Субконто" + Ном] <> Объект[НаименованиеСубконтоБУ + Ном] Тогда
								// значение субконто не соответствует отбору
								Возврат;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
							
					Для Ном = 1 По КоличествоСубконтоБУ_Новых Цикл
						СтрокаПоискаНовогоСубконто = ВидыСубконтоДоИзменения.Найти(ВидыСубконтоНовые[Ном-1].ВидСубконто);
						ЗначениеСубконто = Неопределено;
						Если НЕ СтрокаПоискаНовогоСубконто = Неопределено Тогда
							//очистим ранее заполненные субконто
							Если НЕ ОбъектыПоиска.Найти(НаименованиеСубконтоБУ + СтрокаПоискаНовогоСубконто.НомерСтроки) = Неопределено Тогда
								ЗначениеСубконто = Объект[НаименованиеСубконтоБУ + СтрокаПоискаНовогоСубконто.НомерСтроки];
							КонецЕсли;
						КонецЕсли; 
						МассивУжеЗаполненныхСубконто.Добавить(ЗначениеСубконто);
					КонецЦикла;   
					
					МаксКоличествоСубконто = Макс(КоличествоСубконтоБУ_Старых, КоличествоСубконтоБУ_Новых);
					Пока МассивУжеЗаполненныхСубконто.Количество() < МаксКоличествоСубконто Цикл
						 МассивУжеЗаполненныхСубконто.Добавить(Неопределено);
					 КонецЦикла;
					 
					//Теперь очистим субконто, значения которых не соответсвуют значениям субконто нового счета
					Если ЗначениеЗаполнено(НаименованиеСубконтоБУ) Тогда
						Для Ном = 1 По МаксКоличествоСубконто Цикл
							Объект[НаименованиеСубконтоБУ + Ном] = МассивУжеЗаполненныхСубконто[Ном-1];
						КонецЦикла; 			
					КонецЕсли; 
				
				КонецЕсли; 
				
			ИначеЕсли ТипЗнч(Объект) = Тип("РегистрБухгалтерииЗапись.Налоговый") И ЗначениеЗаполнено(АналитикаСчета) Тогда
				
				ЗаписьИзменена = Ложь;
				
				Для Ном = 1 По ЗаменяемаяСсылка.ВидыСубконто.Количество() Цикл
					Если АналитикаСчета.Свойство("ВидСубконто" + Ном) Тогда
						ВидСубконто = АналитикаСчета["ВидСубконто" + Ном];
						ЗнчСубконто = АналитикаСчета["Субконто" + Ном];
						Если ИмяСвойства = "СчетДт" И Объект.СубконтоДт[ВидСубконто] <> ЗнчСубконто
						 Или ИмяСвойства = "СчетКт" И Объект.СубконтоКт[ВидСубконто] <> ЗнчСубконто Тогда
							// значение субконто не соответствует отбору
							Возврат
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;	
				
				ЗаписьИзменена = Истина;
			
			КонецЕсли;
			
			Объект[ИмяСвойства] = НоваяСсылка;
			ОбъектИзменен = Истина;

		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ЗаменаСсылкиНаОбъект()

Функция СобытиеЖурналаРегистрацииЗаменаСчетов(ОбновлениеИнформационнойБазы = Ложь) Экспорт
	
	Если НЕ ОбновлениеИнформационнойБазы Тогда
		СобытиеЖурналаРегистрации = НСтр("ru = 'Замена ссылок на счета регламентированного учета в данных'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	Иначе
		СобытиеЖурналаРегистрации = НСтр("ru = 'Обновление информационной базы. Замена ссылок на счета'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	КонецЕсли;
	 
	Возврат СобытиеЖурналаРегистрации; 
	
КонецФункции

Процедура ОпределитьЗаменуДанныхПоОрганизацииВСтрокеОбъекта(СтрокаДанных, Организация)
	
	ПолноеИмяОбъектаМД = СтрокаДанных.Метаданные.ПолноеИмя();
	ПозицияТочки = СтрНайти(ПолноеИмяОбъектаМД, ".");
	ИмяКоллекцииОбъектовМД = Лев(ПолноеИмяОбъектаМД, ПозицияТочки - 1);
	ДанныеОбъекта 	  = СтрокаДанных.Данные;
	МетаданныеОбъекта = СтрокаДанных.Метаданные;
	
	Если ИмяКоллекцииОбъектовМД = "Справочник" Тогда
		Если НЕ ДанныеОбъекта.Владелец = Неопределено И ТипЗнч(ДанныеОбъекта.Владелец) = Тип("СправочникСсылка.Организации")
			И ДанныеОбъекта.Владелец = Организация Тогда
			СтрокаДанных.ЗаменаПоОрганизации = Истина;
		ИначеЕсли НЕ МетаданныеОбъекта.Реквизиты.Найти("Организация") = Неопределено
			И ДанныеОбъекта.Организация = Организация Тогда
			СтрокаДанных.ЗаменаПоОрганизации = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяКоллекцииОбъектовМД = "РегистрСведений" Тогда
		Если НЕ МетаданныеОбъекта.Измерения.Найти("Организация") = Неопределено
			И ДанныеОбъекта.Организация = Организация Тогда
			СтрокаДанных.ЗаменаПоОрганизации = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяКоллекцииОбъектовМД = "Документ" Тогда
		Если НЕ МетаданныеОбъекта.Реквизиты.Найти("Организация") = Неопределено
			И ДанныеОбъекта.Организация = Организация Тогда
			СтрокаДанных.ЗаменаПоОрганизации = Истина;
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаменитьСчетаПриОбновленииПланаСчетов(СтруктураСчетовДляЗамены, АдресРезультата = Неопределено) Экспорт
	
	Если СтруктураСчетовДляЗамены.Свойство("Параметры") Тогда
		Параметры = СтруктураСчетовДляЗамены.Параметры;
		СобытиеЖурналаРегистрации = СобытиеЖурналаРегистрацииЗаменаСчетов(Истина);
	Иначе
		Параметры = Новый Структура;
		Параметры.Вставить("ОбработкаЗавершена", Ложь);
		СобытиеЖурналаРегистрации = СобытиеЖурналаРегистрацииЗаменаСчетов();
	КонецЕсли;
	
	СписокЗаменяемыхОбъектов = СтруктураСчетовДляЗамены.СписокЗаменяемыхОбъектов;
	СписокНовыхОбъектов		 = СтруктураСчетовДляЗамены.СписокНовыхОбъектов;
	СписокАналитики          = СтруктураСчетовДляЗамены.СписокАналитики;
	Если СтруктураСчетовДляЗамены.Свойство("Организация") Тогда
		Организация = СтруктураСчетовДляЗамены.Организация;
	Иначе
		Организация = Справочники.Организации.ПустаяСсылка();
	КонецЕсли;
	
	ВалютаРегл = Константы.ВалютаРегламентированногоУчета.Получить();
	МассивИсходныхОбъектов = СписокЗаменяемыхОбъектов.ВыгрузитьЗначения();
	Ссылки = НайтиПоСсылкам(МассивИсходныхОбъектов);
	
	Если Ссылки.Количество() = 0 Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	
	Ссылки.Сортировать("Данные Возр");

	ТаблицаОбъектов = Ссылки.СкопироватьКолонки();
	ТаблицаОбъектов.Колонки.Добавить("ЗаменаПоОрганизации", Новый ОписаниеТипов("Булево"));
	
	ТекущийОбъект = Неопределено;
	НовыйОбъект   = Неопределено;
	
	ТребуетсяОбработка = Ложь;

	Для Каждого Ссылка из Ссылки Цикл
		
		// Получение имени коллекции объектов метаданных
		ПолноеИмяОбъектаМД = Ссылка.Метаданные.ПолноеИмя();
		ПозицияТочки = СтрНайти(ПолноеИмяОбъектаМД, ".");
		ИмяКоллекцииОбъектовМД = Лев(ПолноеИмяОбъектаМД, ПозицияТочки - 1);
		
		Если ИмяКоллекцииОбъектовМД <> "Справочник"
			И ИмяКоллекцииОбъектовМД <> "Документ"
			И ИмяКоллекцииОбъектовМД <> "РегистрСведений" Тогда
			Продолжить;
		КонецЕсли;
		
		НовыйОбъект = Ссылка.Данные;
		Если НовыйОбъект <> ТекущийОбъект Тогда
			НоваяСтрока = ТаблицаОбъектов.Добавить();
			НоваяСтрока.Данные = Ссылка.Данные;
			НоваяСтрока.Метаданные = Ссылка.Метаданные;
			СписокСсылокНаСчет = Новый СписокЗначений;
			СписокСсылокНаСчет.Добавить(Ссылка.Ссылка);			
			НоваяСтрока.Ссылка = СписокСсылокНаСчет;
			//заполняем организацию в таблице
			Если ЗначениеЗаполнено(Организация) Тогда
				ОпределитьЗаменуДанныхПоОрганизацииВСтрокеОбъекта(НоваяСтрока, Организация);
			КонецЕсли;
		Иначе // добавляем в список счетов наш счет
			СписокСсылокНаСчет = НоваяСтрока.Ссылка;
			СписокСсылокНаСчет.Добавить(Ссылка.Ссылка);			
		КонецЕсли;
		 	
		ТекущийОбъект = Ссылка.Данные;
		ТребуетсяОбработка = Истина;
		
	КонецЦикла;

	Если НЕ ТребуетсяОбработка Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	
	Параметры.ОбработкаЗавершена = Ложь;
	
	КоличествоДокументовВОднойИтерации = 1000;
	
	Счетчик = 0;
	
	УдаляемыеЗаписи = Новый Массив;
	
	Для Каждого Ссылка Из ТаблицаОбъектов Цикл
		
		//Отберем объекты по организации в случае его использования
		Если ЗначениеЗаполнено(Организация) И НЕ Ссылка.ЗаменаПоОрганизации Тогда
			Продолжить;
		КонецЕсли;
		
		// Получение имени коллекции объектов метаданных
		ПолноеИмяОбъектаМД = Ссылка.Метаданные.ПолноеИмя();
		ПозицияТочки = СтрНайти(ПолноеИмяОбъектаМД, ".");
		ИмяКоллекцииОбъектовМД = Лев(ПолноеИмяОбъектаМД, ПозицияТочки - 1);
		
		Если ИмяКоллекцииОбъектовМД <> "Справочник"
			И ИмяКоллекцииОбъектовМД <> "Документ"
			И ИмяКоллекцииОбъектовМД <> "РегистрСведений" Тогда
			Продолжить;
		КонецЕсли;
		
		Если Счетчик >= КоличествоДокументовВОднойИтерации Тогда
			Если ТранзакцияАктивна() Тогда
				Попытка
					ЗафиксироватьТранзакцию();
				Исключение
					ОтменитьТранзакцию();
					Инфо = ИнформацияОбОшибке();
					ЗаписьЖурналаРегистрации(
						СобытиеЖурналаРегистрации,
						УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(Инфо));				
				КонецПопытки;
			КонецЕсли;
			Счетчик = 0;			
		КонецЕсли;
		
		НачатьТранзакцию();
		Счетчик = Счетчик + 1;
		
		// Получение ссылки на новый объект
		ТипСсылки   = Неопределено;
		НоваяСсылка = Неопределено; 
		АналитикаСчета = Неопределено;
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъектаМД);
		
		// Обработка независимых регистров сведений
		Если ИмяКоллекцииОбъектовМД = "РегистрСведений" Тогда
			
			Измерения = Ссылка.Метаданные["Измерения"];
			Реквизиты = Ссылка.Метаданные["Реквизиты"];
			Ресурсы   = Ссылка.Метаданные["Ресурсы"];
			
			ОбъектИзмененияВИзмерении = Ложь;
			Для Каждого СсылкаНаСчет Из Ссылка.Ссылка Цикл
				Для Каждого Измерение из Измерения Цикл
					Если Ссылка.Данные[Измерение.Имя] = СсылкаНаСчет.Значение Тогда 
						//отбор по изменяемым полям не построим
						ОбъектИзмененияВИзмерении = Истина;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			
			Если НЕ ОбъектИзмененияВИзмерении Тогда 
				
				НаборЗаписей = РегистрыСведений[Ссылка.Метаданные.Имя].СоздатьНаборЗаписей(); 
				ОбъектИзменен = Ложь;
				
				Для каждого Измерение из Измерения Цикл
					НаборЗаписей.Отбор[Измерение.Имя].Значение 		= Ссылка.Данные[Измерение.Имя];
					НаборЗаписей.Отбор[Измерение.Имя].Использование = Истина;
					НаборЗаписей.Отбор[Измерение.Имя].ВидСравнения  = ВидСравнения.Равно;
					
					ЭлементБлокировки.УстановитьЗначение(Измерение.Имя, Ссылка.Данные[Измерение.Имя]);
				КонецЦикла;
				
				Если НаборЗаписей.Отбор.Найти("Период") <> Неопределено Тогда 
					НаборЗаписей.Отбор.Период.Значение 		= Ссылка.Данные.Период;
					НаборЗаписей.Отбор.Период.Использование = Истина;
					НаборЗаписей.Отбор.Период.ВидСравнения  = ВидСравнения.Равно;
					
					ЭлементБлокировки.УстановитьЗначение("Период", Ссылка.Данные.Период);
				КонецЕсли;	
	
				НаборЗаписей.Прочитать();
				Если НаборЗаписей.Выбран() Тогда
					
					Блокировка.Заблокировать();
					
					Для каждого ЗаписьРегистра Из НаборЗаписей Цикл
						
						Для Каждого СсылкаНаСчет Из Ссылка.Ссылка Цикл
							ПолучениеСсылокНаНовыйОбъект(СписокЗаменяемыхОбъектов, СписокНовыхОбъектов, СписокАналитики, СсылкаНаСчет.Значение, ТипСсылки, НоваяСсылка, АналитикаСчета);
							Для каждого Реквизит из Реквизиты Цикл
								ЗаменаСсылкиНаОбъект(ЗаписьРегистра, Реквизит.Имя, ТипСсылки, СсылкаНаСчет.Значение, НоваяСсылка, ОбъектИзменен, Реквизиты, АналитикаСчета);
							КонецЦикла;
						КонецЦикла;
						
						Для Каждого СсылкаНаСчет Из Ссылка.Ссылка Цикл
							ПолучениеСсылокНаНовыйОбъект(СписокЗаменяемыхОбъектов, СписокНовыхОбъектов, СписокАналитики, СсылкаНаСчет.Значение, ТипСсылки, НоваяСсылка, АналитикаСчета);
							Для каждого Ресурс из Ресурсы Цикл
								ЗаменаСсылкиНаОбъект(ЗаписьРегистра, Ресурс.Имя, ТипСсылки, СсылкаНаСчет.Значение, НоваяСсылка, ОбъектИзменен, Ресурсы, АналитикаСчета);
							КонецЦикла;
						КонецЦикла;
						
					КонецЦикла;
					
					Попытка
						НаборЗаписей.ОбменДанными.Загрузка = Истина;
						НаборЗаписей.Записать();
						
						ЗафиксироватьТранзакцию();
						
						Комментарий = НСтр("ru = 'Обработан объект <%1>.'");
						Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Комментарий, Ссылка.Данные);
						
						ЗаписьЖурналаРегистрации(
							СобытиеЖурналаРегистрации,
							УровеньЖурналаРегистрации.Информация,,, Комментарий);				
					Исключение
						ОтменитьТранзакцию();
						
						Комментарий = НСтр("ru = 'Объект не обработан автоматически: %1 <%2> <%3>.
						                         |	Необходимо вручную заменить значение <%4> на <%5>.'");
						Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							Комментарий, ИмяКоллекцииОбъектовМД, Ссылка.Метаданные.Синоним, Ссылка.Данные, Ссылка.Ссылка, НоваяСсылка);
							
						ЗаписьЖурналаРегистрации(
							СобытиеЖурналаРегистрации,
							УровеньЖурналаРегистрации.Ошибка,,, Комментарий + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));				
					КонецПопытки;
					
				КонецЕсли;
				
			Иначе  // если ОбъектИзмененияВИзмерении 
				
				Объект = РегистрыСведений[Ссылка.Метаданные.Имя].СоздатьМенеджерЗаписи();
				ОбъектИзменен = Ложь;
				
				Объект.Период = Ссылка.Данные.Период;
				
				Для каждого Измерение из Измерения Цикл
					Объект[Измерение.Имя] = Ссылка.Данные[Измерение.Имя];
					
					ЭлементБлокировки.УстановитьЗначение(Измерение.Имя, Ссылка.Данные[Измерение.Имя]);
				КонецЦикла;
				
				Объект.Прочитать();
				
				Если Объект.Выбран() Тогда
					
					Блокировка.Заблокировать();
					
					Для Каждого СсылкаНаСчет Из Ссылка.Ссылка Цикл
						ПолучениеСсылокНаНовыйОбъект(СписокЗаменяемыхОбъектов, СписокНовыхОбъектов, СписокАналитики, СсылкаНаСчет.Значение, ТипСсылки, НоваяСсылка, АналитикаСчета);
						Для каждого Измерение из Измерения Цикл
							ЗаменаСсылкиНаОбъект(Объект, Измерение.Имя, ТипСсылки, СсылкаНаСчет.Значение, НоваяСсылка, ОбъектИзменен, Измерения, АналитикаСчета);
						КонецЦикла;
					КонецЦикла;
					
					Для Каждого СсылкаНаСчет Из Ссылка.Ссылка Цикл
						ПолучениеСсылокНаНовыйОбъект(СписокЗаменяемыхОбъектов, СписокНовыхОбъектов, СписокАналитики, СсылкаНаСчет.Значение, ТипСсылки, НоваяСсылка, АналитикаСчета);
						Для каждого Реквизит из Реквизиты Цикл
							ЗаменаСсылкиНаОбъект(Объект, Реквизит.Имя, ТипСсылки, СсылкаНаСчет.Значение, НоваяСсылка, ОбъектИзменен, Реквизиты, АналитикаСчета);
						КонецЦикла;
					КонецЦикла;
					
					Для Каждого СсылкаНаСчет Из Ссылка.Ссылка Цикл
						ПолучениеСсылокНаНовыйОбъект(СписокЗаменяемыхОбъектов, СписокНовыхОбъектов, СписокАналитики, СсылкаНаСчет.Значение, ТипСсылки, НоваяСсылка, АналитикаСчета);
						Для каждого Ресурс из Ресурсы Цикл
							ЗаменаСсылкиНаОбъект(Объект, Ресурс.Имя, ТипСсылки, СсылкаНаСчет.Значение, НоваяСсылка, ОбъектИзменен, Ресурсы, АналитикаСчета);
						КонецЦикла;
					КонецЦикла;
					
					Попытка
						Объект.Записать();
						
						ЗафиксироватьТранзакцию();
						
						Комментарий = НСтр("ru = 'Обработан объект <%1>.'");
						Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Комментарий, Ссылка.Данные);
						
						ЗаписьЖурналаРегистрации(
							СобытиеЖурналаРегистрации,
							УровеньЖурналаРегистрации.Информация,,, Комментарий);				
					Исключение
						
						ОтменитьТранзакцию();
						
						Комментарий = НСтр("ru = 'Объект не обработан автоматически: %1 <%2> <%3>.
						                         |	Необходимо вручную перевыбрать значение <%4>.'");
						Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							Комментарий, ИмяКоллекцииОбъектовМД, Ссылка.Метаданные.Синоним, Ссылка.Данные, "1422/1422Н");
							
						ЗаписьЖурналаРегистрации(
							СобытиеЖурналаРегистрации,
							УровеньЖурналаРегистрации.Ошибка,,, Комментарий + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));				
					КонецПопытки;
				КонецЕсли;
				
			КонецЕсли;
			
			Продолжить;
		КонецЕсли;
		
		Объект = Ссылка.Данные.ПолучитьОбъект();
		ОбъектИзменен = Ложь;
		
		ЭлементБлокировки.УстановитьЗначение("Ссылка", Ссылка.Данные);
		Блокировка.Заблокировать();
		
		СубконтоРеквизит = Ложь;
		ПровестиДокумент = Ложь;

		Если ИмяКоллекцииОбъектовМД = "Справочник" Тогда
			
			Реквизиты = Ссылка.Метаданные["Реквизиты"];
			
			Для Каждого СсылкаНаСчет Из Ссылка.Ссылка Цикл
				ПолучениеСсылокНаНовыйОбъект(СписокЗаменяемыхОбъектов, СписокНовыхОбъектов, СписокАналитики, СсылкаНаСчет.Значение, ТипСсылки, НоваяСсылка, АналитикаСчета);
				Для каждого Реквизит из Реквизиты Цикл
					ЗаменаСсылкиНаОбъект(Объект, Реквизит.Имя, ТипСсылки, СсылкаНаСчет.Значение, НоваяСсылка, ОбъектИзменен, Реквизиты, АналитикаСчета);
				КонецЦикла;
			КонецЦикла;
			
			// Обработка табличных частей
			ТабличныеЧасти = Ссылка.Метаданные["ТабличныеЧасти"];
			Для Каждого СсылкаНаСчет Из Ссылка.Ссылка Цикл
				ПолучениеСсылокНаНовыйОбъект(СписокЗаменяемыхОбъектов, СписокНовыхОбъектов, СписокАналитики, СсылкаНаСчет.Значение, ТипСсылки, НоваяСсылка, АналитикаСчета);
				Для каждого ТабличнаяЧасть из ТабличныеЧасти Цикл
					Реквизиты = ТабличнаяЧасть["Реквизиты"];
					
					ТЧ = Объект[ТабличнаяЧасть.Имя];
					Для каждого СтрокаТЧ из ТЧ Цикл
						Для каждого Реквизит из Реквизиты Цикл
							ЗаменаСсылкиНаОбъект(СтрокаТЧ, Реквизит.Имя, ТипСсылки, СсылкаНаСчет.Значение, НоваяСсылка, ОбъектИзменен, Реквизиты, АналитикаСчета);
						КонецЦикла;
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
			
		КонецЕсли;
		
		Если ИмяКоллекцииОбъектовМД = "Документ" Тогда

			Реквизиты = Ссылка.Метаданные["Реквизиты"];
			Для Каждого СсылкаНаСчет Из Ссылка.Ссылка Цикл
				ПолучениеСсылокНаНовыйОбъект(СписокЗаменяемыхОбъектов, СписокНовыхОбъектов, СписокАналитики, СсылкаНаСчет.Значение, ТипСсылки, НоваяСсылка, АналитикаСчета);
				Для каждого Реквизит из Реквизиты Цикл
					ЗаменаСсылкиНаОбъект(Объект, Реквизит.Имя, ТипСсылки, СсылкаНаСчет.Значение, НоваяСсылка, ОбъектИзменен, Реквизиты, АналитикаСчета);
				КонецЦикла;
			КонецЦикла;
			
			// Обработка табличных частей
			ТабличныеЧасти = Ссылка.Метаданные["ТабличныеЧасти"];
			Для Каждого СсылкаНаСчет Из Ссылка.Ссылка Цикл
				ПолучениеСсылокНаНовыйОбъект(СписокЗаменяемыхОбъектов, СписокНовыхОбъектов, СписокАналитики, СсылкаНаСчет.Значение, ТипСсылки, НоваяСсылка, АналитикаСчета);
				Для каждого ТабличнаяЧасть из ТабличныеЧасти Цикл
					Реквизиты = ТабличнаяЧасть["Реквизиты"];
					ТЧ = Объект[ТабличнаяЧасть.Имя];
					Для каждого СтрокаТЧ из ТЧ Цикл
						Для каждого Реквизит из Реквизиты Цикл
							ЗаменаСсылкиНаОбъект(СтрокаТЧ, Реквизит.Имя, ТипСсылки, СсылкаНаСчет.Значение, НоваяСсылка, ОбъектИзменен, Реквизиты, АналитикаСчета);
						КонецЦикла;
					КонецЦикла;
					Если Ссылка.Метаданные.Имя = "УстановкаСоответствияСчетовБУиНУ" Тогда
						СтрокаРеквизитов = "";
						Для Каждого Реквизит Из Реквизиты Цикл
							Если НЕ СтрокаРеквизитов = "" Тогда
								СтрокаРеквизитов = СтрокаРеквизитов + ", ";
							КонецЕсли;
							СтрокаРеквизитов = СтрокаРеквизитов + Реквизит.Имя;
						КонецЦикла;
						ТЧ.Свернуть(СтрокаРеквизитов);
						ПровестиДокумент = Истина;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			
		КонецЕсли;
		
		// Обработка движений документов
		
		ДвиженияИзменены = Ложь;
		
		Если ИмяКоллекцииОбъектовМД = "Документ" И НЕ ПровестиДокумент Тогда
			
			Реквизиты = Ссылка.Метаданные["Реквизиты"];

			Для Каждого Регистр из Ссылка.Метаданные.Движения Цикл
				
				// Получение имени коллекции объектов метаданных
				ПолноеИмяРегистра = Регистр.ПолноеИмя();
				ПозицияТочки = Найти(ПолноеИмяРегистра, ".");
				ИмяКоллекцииРегистров = Лев(ПолноеИмяРегистра, ПозицияТочки - 1);
				
				Если ИмяКоллекцииРегистров = "РегистрНакопления" Тогда
					Менеджер = РегистрыНакопления[Регистр.Имя];
					
				ИначеЕсли ИмяКоллекцииРегистров = "РегистрСведений" Тогда
					Менеджер = РегистрыСведений[Регистр.Имя];
					
				ИначеЕсли ИмяКоллекцииРегистров = "РегистрБухгалтерии" Тогда
					Менеджер = РегистрыБухгалтерии[Регистр.Имя];
					
				Иначе
					Продолжить;
				КонецЕсли;
				
				Измерения = Регистр["Измерения"];
				Реквизиты = Регистр["Реквизиты"];
				Ресурсы   = Регистр["Ресурсы"];
				
				НаборЗаписей = Менеджер.СоздатьНаборЗаписей();
				
				Регистратор = Ссылка.Данные;
				НаборЗаписей.Отбор.Регистратор.Установить(Регистратор);
				НаборЗаписей.Прочитать();
				
				Если НаборЗаписей.Количество() > 0 Тогда
					БлокировкаЗаписей = Новый БлокировкаДанных;
					ЭлементБлокировки = БлокировкаЗаписей.Добавить(ПолноеИмяРегистра + ".НаборЗаписей");
					ЭлементБлокировки.УстановитьЗначение("Регистратор", Ссылка.Данные);
					БлокировкаЗаписей.Заблокировать();
				КонецЕсли;
				
				НаборЗаписейИзменен = Ложь;
				
				Для Каждого СсылкаНаСчет Из Ссылка.Ссылка Цикл
					ПолучениеСсылокНаНовыйОбъект(СписокЗаменяемыхОбъектов, СписокНовыхОбъектов, СписокАналитики, СсылкаНаСчет.Значение, ТипСсылки, НоваяСсылка, АналитикаСчета);
					
					Для каждого Запись из НаборЗаписей Цикл
						
						Если ИмяКоллекцииРегистров = "РегистрБухгалтерии" И ЗначениеЗаполнено(Организация) И НЕ Запись.Организация = Организация Тогда
							Продолжить;
						КонецЕсли; 
						
						ЗаписьИзменена = Ложь;
						
						Для каждого Измерение из Измерения Цикл
							Если ИмяКоллекцииРегистров = "РегистрБухгалтерии" Тогда
								Балансовый = Измерение.Балансовый;
							Иначе
								Балансовый = Истина;
							КонецЕсли;
							
							Если Балансовый Тогда
								ЗаменаСсылкиНаОбъект(Запись, Измерение.Имя, ТипСсылки, СсылкаНаСчет.Значение, НоваяСсылка, НаборЗаписейИзменен, Измерения, АналитикаСчета);
							Иначе
								ЗаменаСсылкиНаОбъект(Запись, Измерение.Имя+"Дт", ТипСсылки, СсылкаНаСчет.Значение, НоваяСсылка, НаборЗаписейИзменен,, АналитикаСчета);
								ЗаменаСсылкиНаОбъект(Запись, Измерение.Имя+"Кт", ТипСсылки, СсылкаНаСчет.Значение, НоваяСсылка, НаборЗаписейИзменен,, АналитикаСчета);
							КонецЕсли;
						КонецЦикла;
						
						Для каждого Реквизит из Реквизиты Цикл
							ЗаменаСсылкиНаОбъект(Запись, Реквизит.Имя, ТипСсылки, СсылкаНаСчет.Значение, НоваяСсылка, НаборЗаписейИзменен,, АналитикаСчета);
						КонецЦикла;
						
						Для каждого Ресурс из Ресурсы Цикл
							Если ИмяКоллекцииРегистров = "РегистрБухгалтерии" Тогда
								Балансовый = Ресурс.Балансовый;
							Иначе
								Балансовый = Истина;
							КонецЕсли;
							
							Если Балансовый Тогда
								ЗаменаСсылкиНаОбъект(Запись, Ресурс.Имя, ТипСсылки, СсылкаНаСчет.Значение, НоваяСсылка, НаборЗаписейИзменен,, АналитикаСчета);
							Иначе
								ЗаменаСсылкиНаОбъект(Запись, Ресурс.Имя+"Дт", ТипСсылки, СсылкаНаСчет.Значение, НоваяСсылка, НаборЗаписейИзменен,, АналитикаСчета);
								ЗаменаСсылкиНаОбъект(Запись, Ресурс.Имя+"Кт", ТипСсылки, СсылкаНаСчет.Значение, НоваяСсылка, НаборЗаписейИзменен,, АналитикаСчета);
							КонецЕсли;
						КонецЦикла;
						
						Если ИмяКоллекцииРегистров = "РегистрБухгалтерии" Тогда
							Если Регистр.Корреспонденция Тогда
								
								ЗаменаСсылкиНаОбъект(Запись, "СчетДт", ТипСсылки, СсылкаНаСчет.Значение, НоваяСсылка, НаборЗаписейИзменен,, АналитикаСчета, ЗаписьИзменена);
								ОчиститьНеиспользуемыеСубконто(Запись, "СубконтоДт", СсылкаНаСчет.Значение, НоваяСсылка, НаборЗаписейИзменен, ЗаписьИзменена);
								ЗаменаСсылкиНаОбъект(Запись, "СчетКт", ТипСсылки, СсылкаНаСчет.Значение, НоваяСсылка, НаборЗаписейИзменен,, АналитикаСчета, ЗаписьИзменена);
								ОчиститьНеиспользуемыеСубконто(Запись, "СубконтоКт", СсылкаНаСчет.Значение, НоваяСсылка, НаборЗаписейИзменен, ЗаписьИзменена);
								
							Иначе
								ЗаменаСсылкиНаОбъект(Запись, "Счет", ТипСсылки, СсылкаНаСчет.Значение, НоваяСсылка, НаборЗаписейИзменен,, АналитикаСчета, ЗаписьИзменена);
								ОчиститьНеиспользуемыеСубконто(Запись, "Субконто", СсылкаНаСчет.Значение, НоваяСсылка, НаборЗаписейИзменен, ЗаписьИзменена);
							КонецЕсли;
							
						КонецЕсли;
					КонецЦикла; // Для каждого Запись из НаборЗаписей Цикл
					
				КонецЦикла; // Для Каждого СсылкаНаСчет Из Ссылка.Ссылка Цикл
				
				Если НаборЗаписейИзменен Тогда
							
					Попытка
						НаборЗаписей.ОбменДанными.Загрузка = Истина;
						НаборЗаписей.ДополнительныеСвойства.Вставить("ОбработкаДанных", Истина);
						НаборЗаписей.Записать();
						
						ДвиженияИзменены = Истина;
						
						Комментарий = НСтр("ru = 'Обработаны движения документа <%1> по <%2>'");
						Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Комментарий, Ссылка.Данные, ПолноеИмяРегистра);
						
						ЗаписьЖурналаРегистрации(
							СобытиеЖурналаРегистрации,
							УровеньЖурналаРегистрации.Информация,Ссылка.Метаданные,Ссылка.Данные, Комментарий);				
					Исключение
					
						Комментарий = НСтр("ru = 'Движения документа <%1> по <%2> не обработаны.
						                         |	Необходимо заменить значение <%3> на <%4>.'");
						Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							Комментарий, Ссылка.Данные, ПолноеИмяРегистра, Ссылка.Ссылка, НоваяСсылка);
							
						ЗаписьЖурналаРегистрации(
							СобытиеЖурналаРегистрации,
							УровеньЖурналаРегистрации.Ошибка,Ссылка.Метаданные,Ссылка.Данные, Комментарий + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));				
					КонецПопытки;
							
				КонецЕсли;
				
			КонецЦикла; // Для Каждого Регистр из Ссылка.Метаданные.Движения Цикл
			
		КонецЕсли;
			
		Если ОбъектИзменен Тогда
			Попытка
				Если ПровестиДокумент И Объект.Проведен Тогда
					Объект.Записать(РежимЗаписиДокумента.Проведение);
				Иначе	
					Объект.ОбменДанными.Загрузка = Истина;
					Объект.Записать();
				КонецЕсли;
				
				Комментарий = НСтр("ru = 'Обработан объект <%1>'");
				Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Комментарий, Ссылка.Данные);
				
				ЗаписьЖурналаРегистрации(
					СобытиеЖурналаРегистрации,
					УровеньЖурналаРегистрации.Информация,Ссылка.Метаданные,Ссылка.Данные, Комментарий);				
				
				ЗафиксироватьТранзакцию();
			Исключение
				ОтменитьТранзакцию();
				
				Комментарий = НСтр("ru = 'Объект не обработан автоматически: %1 <%2> <%3>.
				                         |	Необходимо вручную перевыбрать счет <%4>.'");
				Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					Комментарий, ИмяКоллекцииОбъектовМД, Ссылка.Метаданные.Синоним, Ссылка.Данные, НоваяСсылка);

				ЗаписьЖурналаРегистрации(
					СобытиеЖурналаРегистрации,
					УровеньЖурналаРегистрации.Ошибка,Ссылка.Метаданные,Ссылка.Данные, Комментарий + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));				
				
			КонецПопытки;
			
		ИначеЕсли ДвиженияИзменены И ТранзакцияАктивна() Тогда
			Попытка
				ЗафиксироватьТранзакцию();
			Исключение
				Инфо = ИнформацияОбОшибке();
				ЗаписьЖурналаРегистрации(
					СобытиеЖурналаРегистрации,
					УровеньЖурналаРегистрации.Ошибка,Ссылка.Метаданные,Ссылка.Данные, ПодробноеПредставлениеОшибки(Инфо));				
				ОтменитьТранзакцию();
			КонецПопытки; 
			
		Иначе
			ОтменитьТранзакцию();
			
		КонецЕсли;
		
	КонецЦикла; // Для Каждого Ссылка Из ТаблицаОбъектов Цикл	
	
КонецПроцедуры

#КонецЕсли


#Область ОбновлениеИнформационнойБазы

#Область ОбработчикиОбновления_3_0_24 

Процедура ОбработкаНастроекПланаСчетовНалоговый2019() Экспорт
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда // В подчиненных узлах РИБ не выполняется
		Возврат;
	КонецЕсли;
	
	МакетОбновленияПС = ПланыСчетов.Налоговый.ПолучитьМакет("ПФ_MXL_ИзменяемыеСчетаДо2019");
	ОбластьИзмененныхСчетов = МакетОбновленияПС.Области.Найти("СписокИзмененныхСчетов");
		
	СписокИзмененныхКодов = Новый Массив;
	
	Для Ном = ОбластьИзмененныхСчетов.Верх По ОбластьИзмененныхСчетов.Низ Цикл				
		СписокИзмененныхКодов.Добавить(СокрЛП(МакетОбновленияПС.Область(Ном, 2).Текст));
	КонецЦикла;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокИзмененныхКодов",СписокИзмененныхКодов);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	Налоговый.Код КАК Код,
	               |	Налоговый.Наименование КАК Наименование,
	               |	Налоговый.Ссылка КАК Ссылка,
	               |	Налоговый.ИмяПредопределенныхДанных КАК ИмяПредопределенныхДанных
	               |ИЗ
	               |	ПланСчетов.Налоговый КАК Налоговый
	               |ГДЕ
	               |	Налоговый.ИмяПредопределенныхДанных В(&СписокИзмененныхКодов)";
				 	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий()Цикл
		ОбъектИзменен = Ложь;
		ОбластьИзмененногоСчета = МакетОбновленияПС.НайтиТекст(Выборка.ИмяПредопределенныхДанных, , ОбластьИзмененныхСчетов, , Истина);
		Если НЕ ОбластьИзмененногоСчета = Неопределено Тогда
			КодСчета = СокрЛП(МакетОбновленияПС.Область(ОбластьИзмененногоСчета.Верх, 3).Текст);
			Объект = Выборка.Ссылка.ПолучитьОбъект(); 
			Объект.Код = КодСчета;
			Объект.Порядок = Объект.ПолучитьПорядокКода();
			ОбъектИзменен = Истина;		
		КонецЕсли;
		
		Если НЕ ОбъектИзменен Тогда
			Продолжить;
		КонецЕсли;
		
		Попытка
			Объект.ОбменДанными.Загрузка = Истина;
			Объект.Записать();
		Исключение
			ТекстСообщения = НСтр("ru='Операция не выполнена'");
			ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;	    
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

		
