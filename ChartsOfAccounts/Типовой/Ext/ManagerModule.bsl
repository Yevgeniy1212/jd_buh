#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Описывает простой рабочий план счетов
//
Функция ОсновнойСчет(Назначение) Экспорт
	
	Если Назначение = "Затраты" Тогда
		
		Возврат АдминистративныеРасходы;
		
	ИначеЕсли Назначение = "Запасы" Тогда
		
		Возврат Товары;
		
	ИначеЕсли Назначение = "ЗапасыВЦенахПродажи" Тогда
		
		Возврат Товары;
		
	ИначеЕсли Назначение = "МатериалыПринятыеВПереработку" Тогда
		
		Возврат МатериалыПринятыеВПереработку;
		
	ИначеЕсли Назначение = "МатериалыПринятыеВПереработкуВПроизводстве" Тогда
		
		Возврат МатериалыПринятыеВПереработкуВПроизводстве;
		
	ИначеЕсли Назначение = "МатериалыПереданныеВПереработку" Тогда
		
		Возврат МатериалыПереданныеВПереработку;
		
	ИначеЕсли Назначение = "ПредъявленныйНДС_Запасы" Тогда
		
		Возврат НалогНаДобавленнуюСтоимостьКВозмещению;
		
	ИначеЕсли Назначение = "ПредъявленныйНДС_Расходы" Тогда
		
		Возврат НалогНаДобавленнуюСтоимостьКВозмещению;
		
	ИначеЕсли Назначение = "ПредъявленныйНДС_ОсновныеСредства" Тогда
		
		Возврат НалогНаДобавленнуюСтоимостьКВозмещению;
		
	ИначеЕсли Назначение = "ПредъявленныйНДС_НематериальныеАктивы" Тогда
		
		Возврат НалогНаДобавленнуюСтоимостьКВозмещению;
		
	ИначеЕсли Назначение = "ПоступлениеНДС" Тогда
		
		Возврат НалогНаДобавленнуюСтоимостьКВозмещению;
		
	ИначеЕсли Назначение = "РеализацияНДС" Тогда
		
		Возврат НалогНаДобавленнуюСтоимость;
		
	ИначеЕсли Назначение = "ОтложенныйНДС" Тогда
		
		Возврат НДСНачисленныйПриПокупке;
		
	ИначеЕсли Назначение = "ОтложенныйНДСНУ" Тогда
		
		Возврат НДСНачисленныйПриПокупке;
		
	ИначеЕсли Назначение = "СчетУчетаНДСПоПриобретению" Тогда
		
		Возврат НалогНаДобавленнуюСтоимость;
		
	ИначеЕсли Назначение = "НаличныеДеньги" Тогда
		
		Возврат ДенежныеСредстваВКассе;
		
	ИначеЕсли Назначение = "БезналичныеДеньги" Тогда
		
		Возврат ДенежныеСредстваНаТекущихБанковскихСчетах;
		
	ИначеЕсли Назначение = "СчетКорпоративныхРасчетов" Тогда
		
		Возврат ДенежныеСредстваНаТекущихБанковскихСчетах;
		
	ИначеЕсли Назначение = "Инкассация" Тогда
		
		Возврат ДенежныеСредстваВПути;
		
	ИначеЕсли Назначение = "ИнкассацияНУ" Тогда
		
		Возврат ДенежныеСредстваВПути;
		
	ИначеЕсли Назначение = "ПереводыВПути" Тогда
		
		Возврат ДенежныеСредстваВПути;
		
	ИначеЕсли Назначение = "ПереводыВПутиНУ" Тогда
		
		Возврат ДенежныеСредстваВПути;
		
	ИначеЕсли Назначение = "НаличныеДеньгиВВалюте" Тогда
		
		Возврат ДенежныеСредстваВКассе;
		
	ИначеЕсли Назначение = "БезналичныеДеньгиВВалюте" Тогда
		
		Возврат ДенежныеСредстваНаТекущихБанковскихСчетах;
		
	ИначеЕсли Назначение = "СчетКорпоративныхРасчетовВВалюте" Тогда
		
		Возврат ДенежныеСредстваНаТекущихБанковскихСчетах;
		
	ИначеЕсли Назначение = "ИнкассацияВВалюте" Тогда
		
		Возврат ДенежныеСредстваВПути;
		
	ИначеЕсли Назначение = "ПереводыВПутиВВалюте" Тогда
		
		Возврат ДенежныеСредстваВПути;
		
	ИначеЕсли Назначение = "Выручка" Тогда
		
		Возврат ДоходОтРеализацииПродукцииИОказанияУслуг;
		
	ИначеЕсли Назначение = "ВыручкаНУ" Тогда
		
		Возврат ДоходОтРеализацииПродукцииИОказанияУслуг;
		
	ИначеЕсли Назначение = "ВыручкаВозврат" Тогда
		
		Возврат ВозвратПроданнойПродукции;
		
	ИначеЕсли Назначение = "ВыручкаВозвратНУ" Тогда
		
		Возврат ВозвратПроданнойПродукции;
		
	ИначеЕсли Назначение = "ПрочиеДоходы" Тогда
		
		Возврат ПрочиеДоходы;
		
	ИначеЕсли Назначение = "ПрочиеРасходы" Тогда
		
		Возврат ПрочиеРасходы;
	
	ИначеЕсли Назначение = "РасходыУслугиБанка" Тогда
		
		Возврат АдминистративныеРасходы;
		
	ИначеЕсли Назначение = "ОсновныеСредства" Тогда
		
		Возврат ОсновныеСредства;
		
	ИначеЕсли Назначение = "ОсновныеСредстваАмортизация" Тогда
		
		Возврат АмортизацияОсновныхСредств;
		
	ИначеЕсли Назначение = "НематериальныеАктивы" Тогда
		
		Возврат ПрочиеНематериальныеАктивы;
		
	ИначеЕсли Назначение = "НематериальныеАктивыАмортизация" Тогда
		
		Возврат АмортизацияПрочихНематериальныхАктивов;
		
	ИначеЕсли Назначение = "Налоги" Тогда
		
		Возврат ПрочиеНалоги;
		
	ИначеЕсли Назначение = "Зарплата" Тогда
		
		Возврат КраткосрочнаяЗадолженностьПоОплатеТруда;
		
	ИначеЕсли Назначение = "ЗарплатаНУ" Тогда
		
		Возврат КраткосрочнаяЗадолженностьПоОплатеТруда;
		
	ИначеЕсли Назначение = "Подотчет" Тогда
		
		Возврат КраткосрочнаяЗадолженностьПодотчетныхЛиц;
		
	ИначеЕсли Назначение = "ПодотчетВВалюте" Тогда
		
		Возврат КраткосрочнаяЗадолженностьПодотчетныхЛиц;
		
	ИначеЕсли Назначение = "СебестоимостьРеализации" Тогда
		
		Возврат СебестоимостьРеализованнойПродукцииИОказанныхУслуг;
		
	ИначеЕсли Назначение = "Акциз" Тогда
		
		Возврат Акцизы;
		
	ИначеЕсли Назначение = "СчетУчетаАкцизаПоРеализации" Тогда
		
		Возврат Акцизы;
		
	ИначеЕсли Назначение = "ЗаймыКредитыКПолучению" Тогда
		
		Возврат КраткосрочныеФинансовыеАктивыОцениваемыеПоАмортизированнойСтоимости;  // 1110
		
	ИначеЕсли Назначение = "ЗаймыКредитыКПолучениюНУ" Тогда
		
		Возврат КраткосрочныеФинансовыеАктивыОцениваемыеПоАмортизированнойСтоимости;  // 1110
		
	ИначеЕсли Назначение = "ЗаймыКредитыКВыплате" Тогда
		
		Возврат КраткосрочныеФинансовыеОбязательстваОцениваемыеПоАмортизированнойСтоимости;  // 3010
		
	ИначеЕсли Назначение = "ЗаймыКредитыКВыплатеНУ" Тогда
		
		Возврат КраткосрочныеФинансовыеОбязательстваОцениваемыеПоАмортизированнойСтоимости;  // 3010
		
	ИначеЕсли Назначение = "КонвертацияВалюты" Тогда
		
		Возврат ДенежныеСредстваВПутиКонвертацияВалюты;  // 1022
		
	ИначеЕсли Назначение = "КонвертацияВалютыНУ" Тогда
		
		Возврат ДенежныеСредстваВПутиКонвертацияВалюты;  // 1022
		
	ИначеЕсли Назначение = "РасчетыСПокупателемПрочие" Тогда
		
		Возврат ПрочаяКраткосрочнаяДебиторскаяЗадолженность;  // 1274
		
	ИначеЕсли Назначение = "РасчетыСПокупателемПрочиеНУ" Тогда
		
		Возврат ПрочаяКраткосрочнаяДебиторскаяЗадолженность;  // 1274
		
	ИначеЕсли Назначение = "РасчетыСПоставщикомПрочие" Тогда
		
		Возврат ПрочаяКраткосрочнаяКредиторскаяЗадолженность;  // 3387
		
	ИначеЕсли Назначение = "РасчетыСПоставщикомПрочиеНУ" Тогда
		
		Возврат ПрочаяКраткосрочнаяКредиторскаяЗадолженность;  // 3387
		
	ИначеЕсли Назначение = "ПрочиеОбязательстваПоПлатежам" Тогда
		
		Возврат ПрочиеОбязательстваПоДругимОбязательнымПлатежам;  // 3230
		
	ИначеЕсли Назначение = "ПрочиеКраткосрочныеАктивы" Тогда
		
		Возврат ПрочиеКраткосрочныеАктивы;  // 1750
		
	ИначеЕсли Назначение = "ПрочиеКраткосрочныеАктивыНУ" Тогда
		
		Возврат ПрочиеКраткосрочныеАктивы;  // 1750
		
	Иначе
		
		Возврат ПустаяСсылка();
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Расходный кассовый ордер
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Описание";
	КомандаПечати.Представление = НСтр("ru = 'План счетов бухгалтерского учета'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.Порядок = 50;
		
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	// Печать расходной накладной
	НужноПечататьМакет = УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Описание");
	Если НужноПечататьМакет Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"Описание",
			НСтр("ru = 'План счетов бухгалтерского учета'"),
			ПечатьОписание(МассивОбъектов, ОбъектыПечати),
			,
			"ПланСчетов.Типовой.ПФ_MXL_Описание");
	КонецЕсли;
		
КонецПроцедуры

Функция ПечатьОписание(МассивОбъектов, ОбъектыПечати)Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	ТабДокумент = Новый ТабличныйДокумент;

	ТабДокумент.КлючПараметровПечати = "Описание";
	Макет = УправлениеПечатью.МакетПечатнойФормы("ПланСчетов.Типовой.ПФ_MXL_Описание");
	Шапка  = Макет.ПолучитьОбласть("Шапка");
	
	ТабДокумент = Новый ТабличныйДокумент;
	Шапка.Параметры.Заголовок = НСтр("ru = 'План счетов бухгалтерского учета'");
	ТабДокумент.Вывести(Шапка);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПланСчетов.Ссылка КАК Ссылка,
	|	ПланСчетов.ЭтоГруппа КАК ЭтоГруппа,
	|	ПланСчетов.Ссылка.Код КАК Код,
	|	ПланСчетов.Ссылка.Наименование КАК Наименование,
	|	ПланСчетов.Ссылка.Валютный КАК Валютный,
	|	ПланСчетов.Ссылка.Количественный КАК Количественный,
	|	ПланСчетов.Ссылка.Забалансовый КАК Забалансовый,
	|	ПланСчетов.Ссылка.Вид КАК Вид,
	|	ПланСчетов.Ссылка.ВидыСубконто.(
	|		НомерСтроки КАК НомерСтроки,
	|		ВидСубконто.Наименование КАК Наименование,
	|		ТолькоОбороты КАК ТолькоОбороты
	|	) КАК ВидыСубконто
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПланСчетов1.Ссылка КАК Ссылка,
	|		ВЫБОР
	|			КОГДА КОЛИЧЕСТВО(ПланСчетов2.Ссылка) > 0
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ЭтоГруппа
	|	ИЗ
	|		ПланСчетов.Типовой КАК ПланСчетов1
	|			ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Типовой КАК ПланСчетов2
	|			ПО ПланСчетов1.Ссылка = ПланСчетов2.Родитель
	|	ГДЕ
	|		ПланСчетов1.ПометкаУдаления = ЛОЖЬ
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ПланСчетов1.Ссылка) КАК ПланСчетов
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПланСчетов.Ссылка.Порядок";
	
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ЭтоГруппа Тогда
			Строка = Макет.ПолучитьОбласть("Группа");
		Иначе
			Строка = Макет.ПолучитьОбласть("Строка");
		КонецЕсли;
			
		Строка.Параметры.Заполнить(Выборка);
			
		Если Выборка.Вид = ВидСчета.Активный Тогда
			Строка.Параметры.Активность = "А";
		ИначеЕсли Выборка.Вид = ВидСчета.Пассивный Тогда
			Строка.Параметры.Активность = "П";
		Иначе
			Строка.Параметры.Активность = "АП";
		КонецЕсли;
		
		ВидыСубконто = Выборка.ВидыСубконто.Выбрать();
		Пока ВидыСубконто.Следующий() Цикл
			
			Если ВидыСубконто.ТолькоОбороты Тогда
				СтрокаСубконто = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='(об) %1'"),ВидыСубконто.Наименование);
			Иначе
				СтрокаСубконто = ВидыСубконто.Наименование;
			КонецЕсли; 
			
			Строка.Параметры["Субконто" + ВидыСубконто.НомерСтроки] = СтрокаСубконто;
		КонецЦикла;
	
		Если Не ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабДокумент, Строка) Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ТабДокумент.Вывести(Шапка);
		КонецЕсли;

		ТабДокумент.Вывести(Строка);
			
	КонецЦикла;
	
	ТабДокумент.ФиксацияСверху = 2;
	
	Возврат ТабДокумент;
	
КонецФункции

Процедура ПолучениеСсылокНаНовыйОбъект(СписокЗаменяемыхОбъектов, СписокНовыхОбъектов, СписокАналитики, Ссылка, ТипСсылки, НоваяСсылка, АналитикаСчета)
	
	// Получение ссылки на новый объект
	ТипСсылки = ТипЗнч(Ссылка.Ссылка);
	ИсходныйОбъект = СписокЗаменяемыхОбъектов.НайтиПоЗначению(Ссылка.Ссылка);
	ИндексОбъектаВСписке = СписокЗаменяемыхОбъектов.Индекс(ИсходныйОбъект);
	НоваяСсылка = СписокНовыхОбъектов[ИндексОбъектаВСписке].Значение;
	АналитикаСчета = ?(СписокАналитики.Количество() > 0, СписокАналитики[ИндексОбъектаВСписке].Значение, Неопределено);
	
КонецПроцедуры

Процедура ОчиститьНеиспользуемыеСубконто(Объект, Субконто, ЗаменяемаяСсылка, НоваяСсылка, ОбъектИзменен, ЗаписьИзменена)
	
	Если ЗаписьИзменена = Истина Тогда
	
		ВидыСубконтоДоИзменения = ЗаменяемаяСсылка.ВидыСубконто;
		ВидыСубконтоНовые       = НоваяСсылка.ВидыСубконто;
		
		Для каждого ВидСубконтоИсходный Из ВидыСубконтоДоИзменения Цикл
		
			Если ВидыСубконтоНовые.Найти(ВидСубконтоИсходный.ВидСубконто) = Неопределено Тогда
				Объект[Субконто][ВидСубконтоИсходный.ВидСубконто] = Неопределено;
				ОбъектИзменен = Истина;
			КонецЕсли;
		
		КонецЦикла; 
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаменаСсылкиНаОбъект(Объект, ИмяСвойства, ТипСсылки, ЗаменяемаяСсылка, НоваяСсылка, ОбъектИзменен, ОбъектыПоиска = Неопределено, АналитикаСчета = Неопределено, ЗаписьИзменена = Ложь)
		
	Если ТипЗнч(Объект[ИмяСвойства]) = ТипСсылки Тогда
		Если Объект[ИмяСвойства] = ЗаменяемаяСсылка Тогда
			Если ОбъектыПоиска <> Неопределено И (Найти(ИмяСвойства, "Счет") <> Неопределено) Тогда
				НаименованиеСубконтоБУСПрефиксом = СтрЗаменить(ИмяСвойства,"Счет","Субконто");
				НаименованиеСубконто_БезПрефикса = "Субконто"; 
				НаименованиеСубконтоБУ_БезПрефикса = "СубконтоБУ"; 
				НаименованиеСубконтоБУДт_БезПрефикса = "СубконтоДтБУ"; 
				НаименованиеСубконтоБУКт_БезПрефикса = "СубконтоКтБУ"; 
				
				ВидыСубконтоДоИзменения = ЗаменяемаяСсылка.ВидыСубконто;
				ВидыСубконтоНовые       = НоваяСсылка.ВидыСубконто;
				
				КоличествоСубконтоБУ_Старых = ЗаменяемаяСсылка.ВидыСубконто.Количество();
				КоличествоСубконтоБУ_Новых = НоваяСсылка.ВидыСубконто.Количество();
				МассивУжеЗаполненныхСубконто = Новый Массив;				
				
				//проверим, есть ли субконто с таким именем
				Если ОбъектыПоиска.Найти(НаименованиеСубконтоБУ_БезПрефикса + 1) <> Неопределено Тогда
					НаименованиеСубконтоБУ = НаименованиеСубконтоБУ_БезПрефикса;
				ИначеЕсли ОбъектыПоиска.Найти(НаименованиеСубконто_БезПрефикса + 1) <> Неопределено Тогда
					НаименованиеСубконтоБУ = НаименованиеСубконто_БезПрефикса;
				ИначеЕсли ОбъектыПоиска.Найти(НаименованиеСубконтоБУДт_БезПрефикса + 1) <> Неопределено Тогда
					НаименованиеСубконтоБУ = НаименованиеСубконтоБУДт_БезПрефикса;
				ИначеЕсли ОбъектыПоиска.Найти(НаименованиеСубконтоБУКт_БезПрефикса + 1) <> Неопределено Тогда
					НаименованиеСубконтоБУ = НаименованиеСубконтоБУКт_БезПрефикса;
				ИначеЕсли ОбъектыПоиска.Найти(НаименованиеСубконтоБУСПрефиксом + 1) <> Неопределено Тогда
					НаименованиеСубконтоБУ = НаименованиеСубконтоБУСПрефиксом;
				Иначе //если не подошел не один вариант субконто, то их
					НаименованиеСубконтоБУ = "";
					Если ЗначениеЗаполнено(АналитикаСчета) Тогда
						// отмена замены счета, т.к. задан отбор по аналитике, но невозможно его отбработать
						Возврат;
					КонецЕсли;
				КонецЕсли;
				
				Если Не ПустаяСтрока(НаименованиеСубконтоБУ) Тогда 
					
					Если ЗначениеЗаполнено(АналитикаСчета) Тогда
						// обработка отбора по аналитике
						Для Ном = 1 По КоличествоСубконтоБУ_Старых Цикл
							Если ОбъектыПоиска.Найти(НаименованиеСубконтоБУ + Ном) <> Неопределено И АналитикаСчета.Свойство("Субконто" + Ном) И АналитикаСчета["Субконто" + Ном] <> Объект[НаименованиеСубконтоБУ + Ном] Тогда
								// значение субконто не соответствует отбору
								Возврат;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
							
					Для Ном = 1 По КоличествоСубконтоБУ_Новых Цикл
						СтрокаПоискаНовогоСубконто = ВидыСубконтоДоИзменения.Найти(ВидыСубконтоНовые[Ном-1].ВидСубконто);
						ЗначениеСубконто = Неопределено;
						Если НЕ СтрокаПоискаНовогоСубконто = Неопределено Тогда
							//очистим ранее заполненные субконто
							Если НЕ ОбъектыПоиска.Найти(НаименованиеСубконтоБУ + СтрокаПоискаНовогоСубконто.НомерСтроки) = Неопределено Тогда
								ЗначениеСубконто = Объект[НаименованиеСубконтоБУ + СтрокаПоискаНовогоСубконто.НомерСтроки];
							КонецЕсли;
						КонецЕсли; 
						МассивУжеЗаполненныхСубконто.Добавить(ЗначениеСубконто);
					КонецЦикла;   
					
					МаксКоличествоСубконто = Макс(КоличествоСубконтоБУ_Старых, КоличествоСубконтоБУ_Новых);
					Пока МассивУжеЗаполненныхСубконто.Количество() < МаксКоличествоСубконто Цикл
						 МассивУжеЗаполненныхСубконто.Добавить(Неопределено);
					 КонецЦикла;
					 
					//Теперь очистим субконто, значения которых не соответсвуют значениям субконто нового счета
					Если ЗначениеЗаполнено(НаименованиеСубконтоБУ) Тогда
						Для Ном = 1 По МаксКоличествоСубконто Цикл
							Объект[НаименованиеСубконтоБУ + Ном] = МассивУжеЗаполненныхСубконто[Ном-1];
						КонецЦикла; 			
					КонецЕсли; 
				
				КонецЕсли; 
				
			ИначеЕсли ТипЗнч(Объект) = Тип("РегистрБухгалтерииЗапись.Типовой") И ЗначениеЗаполнено(АналитикаСчета) Тогда
				
				ЗаписьИзменена = Ложь;
				
				Для Ном = 1 По ЗаменяемаяСсылка.ВидыСубконто.Количество() Цикл
					Если АналитикаСчета.Свойство("ВидСубконто" + Ном) Тогда
						ВидСубконто = АналитикаСчета["ВидСубконто" + Ном];
						ЗнчСубконто = АналитикаСчета["Субконто" + Ном];
						Если ИмяСвойства = "СчетДт" И Объект.СубконтоДт[ВидСубконто] <> ЗнчСубконто
						 Или ИмяСвойства = "СчетКт" И Объект.СубконтоКт[ВидСубконто] <> ЗнчСубконто Тогда
							// значение субконто не соответствует отбору
							Возврат
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
				ЗаписьИзменена = Истина;
			
			КонецЕсли;
			
			Объект[ИмяСвойства] = НоваяСсылка;
			ОбъектИзменен = Истина;

		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ЗаменаСсылкиНаОбъект()

Функция СобытиеЖурналаРегистрацииЗаменаСчетов(ОбновлениеИнформационнойБазы = Ложь) Экспорт
	
	Если НЕ ОбновлениеИнформационнойБазы Тогда
		СобытиеЖурналаРегистрации = НСтр("ru = 'Замена ссылок на счета регламентированного учета в данных'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	Иначе
		СобытиеЖурналаРегистрации = НСтр("ru = 'Обновление информационной базы. Замена ссылок на счета'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	КонецЕсли;
	 
	Возврат СобытиеЖурналаРегистрации; 
	
КонецФункции

Процедура ОпределитьЗаменуДанныхПоОрганизацииВСтрокеОбъекта(СтрокаДанных, Организация)
	
	ПолноеИмяОбъектаМД = СтрокаДанных.Метаданные.ПолноеИмя();
	ПозицияТочки = СтрНайти(ПолноеИмяОбъектаМД, ".");
	ИмяКоллекцииОбъектовМД = Лев(ПолноеИмяОбъектаМД, ПозицияТочки - 1);
	ДанныеОбъекта 	  = СтрокаДанных.Данные;
	МетаданныеОбъекта = СтрокаДанных.Метаданные;
	
	Если ИмяКоллекцииОбъектовМД = "Справочник" Тогда
		Если НЕ ДанныеОбъекта.Владелец = Неопределено И ТипЗнч(ДанныеОбъекта.Владелец) = Тип("СправочникСсылка.Организации")
			И ДанныеОбъекта.Владелец = Организация Тогда
			СтрокаДанных.ЗаменаПоОрганизации = Истина;
		ИначеЕсли НЕ МетаданныеОбъекта.Реквизиты.Найти("Организация") = Неопределено
			И ДанныеОбъекта.Организация = Организация Тогда
			СтрокаДанных.ЗаменаПоОрганизации = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяКоллекцииОбъектовМД = "РегистрСведений" Тогда
		Если НЕ МетаданныеОбъекта.Измерения.Найти("Организация") = Неопределено
			И ДанныеОбъекта.Организация = Организация Тогда
			СтрокаДанных.ЗаменаПоОрганизации = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяКоллекцииОбъектовМД = "Документ" Тогда
		Если НЕ МетаданныеОбъекта.Реквизиты.Найти("Организация") = Неопределено
			И ДанныеОбъекта.Организация = Организация Тогда
			СтрокаДанных.ЗаменаПоОрганизации = Истина;
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаменитьСчетаПриОбновленииПланаСчетов(СтруктураСчетовДляЗамены, АдресРезультата = Неопределено) Экспорт
	
	Если СтруктураСчетовДляЗамены.Свойство("Параметры") Тогда
		Параметры = СтруктураСчетовДляЗамены.Параметры;
		СобытиеЖурналаРегистрации = СобытиеЖурналаРегистрацииЗаменаСчетов(Истина);
	Иначе
		Параметры = Новый Структура;
		Параметры.Вставить("ОбработкаЗавершена", Ложь);
		СобытиеЖурналаРегистрации = СобытиеЖурналаРегистрацииЗаменаСчетов();
	КонецЕсли;
	
	СписокЗаменяемыхОбъектов = СтруктураСчетовДляЗамены.СписокЗаменяемыхОбъектов;
	СписокНовыхОбъектов		 = СтруктураСчетовДляЗамены.СписокНовыхОбъектов;
	СписокАналитики          = СтруктураСчетовДляЗамены.СписокАналитики;
	Если СтруктураСчетовДляЗамены.Свойство("Организация") Тогда
		Организация = СтруктураСчетовДляЗамены.Организация;
	Иначе
		Организация = Справочники.Организации.ПустаяСсылка();
	КонецЕсли;
	
	ВалютаРегл = Константы.ВалютаРегламентированногоУчета.Получить();
	МассивИсходныхОбъектов = СписокЗаменяемыхОбъектов.ВыгрузитьЗначения();
	Ссылки = НайтиПоСсылкам(МассивИсходныхОбъектов);
	
	Если Ссылки.Количество() = 0 Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	
	Ссылки.Сортировать("Данные Возр");

	ТаблицаОбъектов = Ссылки.СкопироватьКолонки();
	ТаблицаОбъектов.Колонки.Добавить("ЗаменаПоОрганизации", Новый ОписаниеТипов("Булево"));
	
	ТекущийОбъект = Неопределено;
	НовыйОбъект   = Неопределено;
	
	ТребуетсяОбработка = Ложь;

	Для Каждого Ссылка из Ссылки Цикл
		
		// Получение имени коллекции объектов метаданных
		ПолноеИмяОбъектаМД = Ссылка.Метаданные.ПолноеИмя();
		ПозицияТочки = СтрНайти(ПолноеИмяОбъектаМД, ".");
		ИмяКоллекцииОбъектовМД = Лев(ПолноеИмяОбъектаМД, ПозицияТочки - 1);
		
		Если ИмяКоллекцииОбъектовМД <> "Справочник"
			И ИмяКоллекцииОбъектовМД <> "Документ"
			И ИмяКоллекцииОбъектовМД <> "РегистрСведений" Тогда
			Продолжить;
		КонецЕсли;
		
		НовыйОбъект = Ссылка.Данные;
		Если НовыйОбъект <> ТекущийОбъект Тогда
			НоваяСтрока = ТаблицаОбъектов.Добавить();
			НоваяСтрока.Данные = Ссылка.Данные;
			НоваяСтрока.Метаданные = Ссылка.Метаданные;
			СписокСсылокНаСчет = Новый СписокЗначений;
			СписокСсылокНаСчет.Добавить(Ссылка.Ссылка);			
			НоваяСтрока.Ссылка = СписокСсылокНаСчет;
			//заполняем организацию в таблице
			Если ЗначениеЗаполнено(Организация) Тогда
				ОпределитьЗаменуДанныхПоОрганизацииВСтрокеОбъекта(НоваяСтрока, Организация);
			КонецЕсли;
		Иначе // добавляем в список счетов наш счет
			СписокСсылокНаСчет = НоваяСтрока.Ссылка;
			СписокСсылокНаСчет.Добавить(Ссылка.Ссылка);			
		КонецЕсли;
		 	
		ТекущийОбъект = Ссылка.Данные;
		ТребуетсяОбработка = Истина;
		
	КонецЦикла;

	Если НЕ ТребуетсяОбработка Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	
	Параметры.ОбработкаЗавершена = Ложь;
	
	КоличествоДокументовВОднойИтерации = 1000;
	
	Счетчик = 0;
	
	УдаляемыеЗаписи = Новый Массив;
	
	Для Каждого Ссылка Из ТаблицаОбъектов Цикл
		
		//Отберем объекты по организации в случае его использования
		Если ЗначениеЗаполнено(Организация) И НЕ Ссылка.ЗаменаПоОрганизации Тогда
			Продолжить;
		КонецЕсли;
		
		// Получение имени коллекции объектов метаданных
		ПолноеИмяОбъектаМД = Ссылка.Метаданные.ПолноеИмя();
		ПозицияТочки = СтрНайти(ПолноеИмяОбъектаМД, ".");
		ИмяКоллекцииОбъектовМД = Лев(ПолноеИмяОбъектаМД, ПозицияТочки - 1);
		
		Если ИмяКоллекцииОбъектовМД <> "Справочник"
			И ИмяКоллекцииОбъектовМД <> "Документ"
			И ИмяКоллекцииОбъектовМД <> "РегистрСведений" Тогда
			Продолжить;
		КонецЕсли;
		
		Если Счетчик >= КоличествоДокументовВОднойИтерации Тогда
			Если ТранзакцияАктивна() Тогда
				Попытка
					ЗафиксироватьТранзакцию();
				Исключение
					ОтменитьТранзакцию();
					Инфо = ИнформацияОбОшибке();
					ЗаписьЖурналаРегистрации(
						СобытиеЖурналаРегистрации,
						УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(Инфо));				
				КонецПопытки;
			КонецЕсли;
			Счетчик = 0;			
		КонецЕсли;
		
		НачатьТранзакцию();
		Счетчик = Счетчик + 1;
		
		// Получение ссылки на новый объект
		ТипСсылки   = Неопределено;
		НоваяСсылка = Неопределено; 
		АналитикаСчета = Неопределено;
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъектаМД);
		
		// Обработка независимых регистров сведений
		Если ИмяКоллекцииОбъектовМД = "РегистрСведений" Тогда
			
			Измерения = Ссылка.Метаданные["Измерения"];
			Реквизиты = Ссылка.Метаданные["Реквизиты"];
			Ресурсы   = Ссылка.Метаданные["Ресурсы"];
			
			ОбъектИзмененияВИзмерении = Ложь;
			Для Каждого СсылкаНаСчет Из Ссылка.Ссылка Цикл
				Для Каждого Измерение из Измерения Цикл
					Если Ссылка.Данные[Измерение.Имя] = СсылкаНаСчет.Значение Тогда 
						//отбор по изменяемым полям не построим
						ОбъектИзмененияВИзмерении = Истина;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			
			Если НЕ ОбъектИзмененияВИзмерении Тогда 
				
				НаборЗаписей = РегистрыСведений[Ссылка.Метаданные.Имя].СоздатьНаборЗаписей(); 
				ОбъектИзменен = Ложь;
				
				Для каждого Измерение из Измерения Цикл
					НаборЗаписей.Отбор[Измерение.Имя].Значение 		= Ссылка.Данные[Измерение.Имя];
					НаборЗаписей.Отбор[Измерение.Имя].Использование = Истина;
					НаборЗаписей.Отбор[Измерение.Имя].ВидСравнения  = ВидСравнения.Равно;
					
					ЭлементБлокировки.УстановитьЗначение(Измерение.Имя, Ссылка.Данные[Измерение.Имя]);
				КонецЦикла;
				
				Если НаборЗаписей.Отбор.Найти("Период") <> Неопределено Тогда 
					НаборЗаписей.Отбор.Период.Значение 		= Ссылка.Данные.Период;
					НаборЗаписей.Отбор.Период.Использование = Истина;
					НаборЗаписей.Отбор.Период.ВидСравнения  = ВидСравнения.Равно;
					
					ЭлементБлокировки.УстановитьЗначение("Период", Ссылка.Данные.Период);
				КонецЕсли;	
	
				НаборЗаписей.Прочитать();
				Если НаборЗаписей.Выбран() Тогда
					
					Блокировка.Заблокировать();
					
					Для каждого ЗаписьРегистра Из НаборЗаписей Цикл
						
						Для Каждого СсылкаНаСчет Из Ссылка.Ссылка Цикл
							ПолучениеСсылокНаНовыйОбъект(СписокЗаменяемыхОбъектов, СписокНовыхОбъектов, СписокАналитики, СсылкаНаСчет.Значение, ТипСсылки, НоваяСсылка, АналитикаСчета);
							Для каждого Реквизит из Реквизиты Цикл
								ЗаменаСсылкиНаОбъект(ЗаписьРегистра, Реквизит.Имя, ТипСсылки, СсылкаНаСчет.Значение, НоваяСсылка, ОбъектИзменен, Реквизиты, АналитикаСчета);
							КонецЦикла;
						КонецЦикла;
						
						Для Каждого СсылкаНаСчет Из Ссылка.Ссылка Цикл
							ПолучениеСсылокНаНовыйОбъект(СписокЗаменяемыхОбъектов, СписокНовыхОбъектов, СписокАналитики, СсылкаНаСчет.Значение, ТипСсылки, НоваяСсылка, АналитикаСчета);
							Для каждого Ресурс из Ресурсы Цикл
								ЗаменаСсылкиНаОбъект(ЗаписьРегистра, Ресурс.Имя, ТипСсылки, СсылкаНаСчет.Значение, НоваяСсылка, ОбъектИзменен, Ресурсы, АналитикаСчета);
							КонецЦикла;
						КонецЦикла;
						
					КонецЦикла;
					
					Попытка
						НаборЗаписей.ОбменДанными.Загрузка = Истина;
						НаборЗаписей.Записать();
						
						ЗафиксироватьТранзакцию();
						
						Комментарий = НСтр("ru = 'Обработан объект <%1>.'");
						Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Комментарий, Ссылка.Данные);
						
						ЗаписьЖурналаРегистрации(
							СобытиеЖурналаРегистрации,
							УровеньЖурналаРегистрации.Информация,,, Комментарий);				
					Исключение
						ОтменитьТранзакцию();
						
						Комментарий = НСтр("ru = 'Объект не обработан автоматически: %1 <%2> <%3>.
						                         |	Необходимо вручную заменить значение <%4> на <%5>.'");
						Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							Комментарий, ИмяКоллекцииОбъектовМД, Ссылка.Метаданные.Синоним, Ссылка.Данные, Ссылка.Ссылка, НоваяСсылка);
							
						ЗаписьЖурналаРегистрации(
							СобытиеЖурналаРегистрации,
							УровеньЖурналаРегистрации.Ошибка,,, Комментарий + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));				
					КонецПопытки;
					
				КонецЕсли;
				
			Иначе  // если ОбъектИзмененияВИзмерении 
				
				Объект = РегистрыСведений[Ссылка.Метаданные.Имя].СоздатьМенеджерЗаписи();
				ОбъектИзменен = Ложь;
				
				Объект.Период = Ссылка.Данные.Период;
				
				Для каждого Измерение из Измерения Цикл
					Объект[Измерение.Имя] = Ссылка.Данные[Измерение.Имя];
					
					ЭлементБлокировки.УстановитьЗначение(Измерение.Имя, Ссылка.Данные[Измерение.Имя]);
				КонецЦикла;
				
				Объект.Прочитать();
				
				Если Объект.Выбран() Тогда
					
					Блокировка.Заблокировать();
					
					Для Каждого СсылкаНаСчет Из Ссылка.Ссылка Цикл
						ПолучениеСсылокНаНовыйОбъект(СписокЗаменяемыхОбъектов, СписокНовыхОбъектов, СписокАналитики, СсылкаНаСчет.Значение, ТипСсылки, НоваяСсылка, АналитикаСчета);
						Для каждого Измерение из Измерения Цикл
							ЗаменаСсылкиНаОбъект(Объект, Измерение.Имя, ТипСсылки, СсылкаНаСчет.Значение, НоваяСсылка, ОбъектИзменен, Измерения, АналитикаСчета);
						КонецЦикла;
					КонецЦикла;
					
					Для Каждого СсылкаНаСчет Из Ссылка.Ссылка Цикл
						ПолучениеСсылокНаНовыйОбъект(СписокЗаменяемыхОбъектов, СписокНовыхОбъектов, СписокАналитики, СсылкаНаСчет.Значение, ТипСсылки, НоваяСсылка, АналитикаСчета);
						Для каждого Реквизит из Реквизиты Цикл
							ЗаменаСсылкиНаОбъект(Объект, Реквизит.Имя, ТипСсылки, СсылкаНаСчет.Значение, НоваяСсылка, ОбъектИзменен, Реквизиты, АналитикаСчета);
						КонецЦикла;
					КонецЦикла;
					
					Для Каждого СсылкаНаСчет Из Ссылка.Ссылка Цикл
						ПолучениеСсылокНаНовыйОбъект(СписокЗаменяемыхОбъектов, СписокНовыхОбъектов, СписокАналитики, СсылкаНаСчет.Значение, ТипСсылки, НоваяСсылка, АналитикаСчета);
						Для каждого Ресурс из Ресурсы Цикл
							ЗаменаСсылкиНаОбъект(Объект, Ресурс.Имя, ТипСсылки, СсылкаНаСчет.Значение, НоваяСсылка, ОбъектИзменен, Ресурсы, АналитикаСчета);
						КонецЦикла;
					КонецЦикла;
					
					Попытка
						Объект.Записать();
						
						ЗафиксироватьТранзакцию();
						
						Комментарий = НСтр("ru = 'Обработан объект <%1>.'");
						Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Комментарий, Ссылка.Данные);
						
						ЗаписьЖурналаРегистрации(
							СобытиеЖурналаРегистрации,
							УровеньЖурналаРегистрации.Информация,,, Комментарий);				
					Исключение
						
						ОтменитьТранзакцию();
						
						Комментарий = НСтр("ru = 'Объект не обработан автоматически: %1 <%2> <%3>.
						                         |	Необходимо вручную перевыбрать значение <%4>.'");
						Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							Комментарий, ИмяКоллекцииОбъектовМД, Ссылка.Метаданные.Синоним, Ссылка.Данные, "1422/1422Н");
							
						ЗаписьЖурналаРегистрации(
							СобытиеЖурналаРегистрации,
							УровеньЖурналаРегистрации.Ошибка,,, Комментарий + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));				
					КонецПопытки;
				КонецЕсли;
				
			КонецЕсли;
			
			Продолжить;
		КонецЕсли;
		
		Объект = Ссылка.Данные.ПолучитьОбъект();
		ОбъектИзменен = Ложь;
		
		ЭлементБлокировки.УстановитьЗначение("Ссылка", Ссылка.Данные);
		Блокировка.Заблокировать();
		
		СубконтоРеквизит = Ложь;
		ПровестиДокумент = Ложь;

		Если ИмяКоллекцииОбъектовМД = "Справочник" Тогда
			
			Реквизиты = Ссылка.Метаданные["Реквизиты"];
			
			Для Каждого СсылкаНаСчет Из Ссылка.Ссылка Цикл
				ПолучениеСсылокНаНовыйОбъект(СписокЗаменяемыхОбъектов, СписокНовыхОбъектов, СписокАналитики, СсылкаНаСчет.Значение, ТипСсылки, НоваяСсылка, АналитикаСчета);
				Для каждого Реквизит из Реквизиты Цикл
					ЗаменаСсылкиНаОбъект(Объект, Реквизит.Имя, ТипСсылки, СсылкаНаСчет.Значение, НоваяСсылка, ОбъектИзменен, Реквизиты, АналитикаСчета);
				КонецЦикла;
			КонецЦикла;
			
			// Обработка табличных частей
			ТабличныеЧасти = Ссылка.Метаданные["ТабличныеЧасти"];
			Для Каждого СсылкаНаСчет Из Ссылка.Ссылка Цикл
				ПолучениеСсылокНаНовыйОбъект(СписокЗаменяемыхОбъектов, СписокНовыхОбъектов, СписокАналитики, СсылкаНаСчет.Значение, ТипСсылки, НоваяСсылка, АналитикаСчета);
				Для каждого ТабличнаяЧасть из ТабличныеЧасти Цикл
					Реквизиты = ТабличнаяЧасть["Реквизиты"];
					
					ТЧ = Объект[ТабличнаяЧасть.Имя];
					Для каждого СтрокаТЧ из ТЧ Цикл
						Для каждого Реквизит из Реквизиты Цикл
							ЗаменаСсылкиНаОбъект(СтрокаТЧ, Реквизит.Имя, ТипСсылки, СсылкаНаСчет.Значение, НоваяСсылка, ОбъектИзменен, Реквизиты, АналитикаСчета);
						КонецЦикла;
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
			
		КонецЕсли;
		
		Если ИмяКоллекцииОбъектовМД = "Документ" Тогда

			Реквизиты = Ссылка.Метаданные["Реквизиты"];
			Для Каждого СсылкаНаСчет Из Ссылка.Ссылка Цикл
				ПолучениеСсылокНаНовыйОбъект(СписокЗаменяемыхОбъектов, СписокНовыхОбъектов, СписокАналитики, СсылкаНаСчет.Значение, ТипСсылки, НоваяСсылка, АналитикаСчета);
				Для каждого Реквизит из Реквизиты Цикл
					ЗаменаСсылкиНаОбъект(Объект, Реквизит.Имя, ТипСсылки, СсылкаНаСчет.Значение, НоваяСсылка, ОбъектИзменен, Реквизиты, АналитикаСчета);
				КонецЦикла;
			КонецЦикла;
			
			// Обработка табличных частей
			ТабличныеЧасти = Ссылка.Метаданные["ТабличныеЧасти"];
			Для Каждого СсылкаНаСчет Из Ссылка.Ссылка Цикл
				ПолучениеСсылокНаНовыйОбъект(СписокЗаменяемыхОбъектов, СписокНовыхОбъектов, СписокАналитики, СсылкаНаСчет.Значение, ТипСсылки, НоваяСсылка, АналитикаСчета);
				Для каждого ТабличнаяЧасть из ТабличныеЧасти Цикл
					Реквизиты = ТабличнаяЧасть["Реквизиты"];
					ТЧ = Объект[ТабличнаяЧасть.Имя];
					Для каждого СтрокаТЧ из ТЧ Цикл
						Для каждого Реквизит из Реквизиты Цикл
							ЗаменаСсылкиНаОбъект(СтрокаТЧ, Реквизит.Имя, ТипСсылки, СсылкаНаСчет.Значение, НоваяСсылка, ОбъектИзменен, Реквизиты, АналитикаСчета);
						КонецЦикла;
					КонецЦикла;
					Если Ссылка.Метаданные.Имя = "УстановкаСоответствияСчетовБУиНУ" Тогда
						СтрокаРеквизитов = "";
						Для Каждого Реквизит Из Реквизиты Цикл
							Если НЕ СтрокаРеквизитов = "" Тогда
								СтрокаРеквизитов = СтрокаРеквизитов + ", ";
							КонецЕсли;
							СтрокаРеквизитов = СтрокаРеквизитов + Реквизит.Имя;
						КонецЦикла;
						ТЧ.Свернуть(СтрокаРеквизитов);
						ПровестиДокумент = Истина;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			
		КонецЕсли;
		
		// Обработка движений документов
		
		ДвиженияИзменены = Ложь;
		
		Если ИмяКоллекцииОбъектовМД = "Документ" И НЕ ПровестиДокумент Тогда
			
			Реквизиты = Ссылка.Метаданные["Реквизиты"];

			Для Каждого Регистр из Ссылка.Метаданные.Движения Цикл
				
				// Получение имени коллекции объектов метаданных
				ПолноеИмяРегистра = Регистр.ПолноеИмя();
				ПозицияТочки = Найти(ПолноеИмяРегистра, ".");
				ИмяКоллекцииРегистров = Лев(ПолноеИмяРегистра, ПозицияТочки - 1);
				
				Если ИмяКоллекцииРегистров = "РегистрНакопления" Тогда
					Менеджер = РегистрыНакопления[Регистр.Имя];
					
				ИначеЕсли ИмяКоллекцииРегистров = "РегистрСведений" Тогда
					Менеджер = РегистрыСведений[Регистр.Имя];
					
				ИначеЕсли ИмяКоллекцииРегистров = "РегистрБухгалтерии" Тогда
					Менеджер = РегистрыБухгалтерии[Регистр.Имя];
					
				Иначе
					Продолжить;
				КонецЕсли;
				
				Измерения = Регистр["Измерения"];
				Реквизиты = Регистр["Реквизиты"];
				Ресурсы   = Регистр["Ресурсы"];
				
				НаборЗаписей = Менеджер.СоздатьНаборЗаписей();
				
				Регистратор = Ссылка.Данные;
				НаборЗаписей.Отбор.Регистратор.Установить(Регистратор);
				НаборЗаписей.Прочитать();
				
				Если НаборЗаписей.Количество() > 0 Тогда
					БлокировкаЗаписей = Новый БлокировкаДанных;
					ЭлементБлокировки = БлокировкаЗаписей.Добавить(ПолноеИмяРегистра + ".НаборЗаписей");
					ЭлементБлокировки.УстановитьЗначение("Регистратор", Ссылка.Данные);
					БлокировкаЗаписей.Заблокировать();
				КонецЕсли;
				
				НаборЗаписейИзменен = Ложь;
				
				Для Каждого СсылкаНаСчет Из Ссылка.Ссылка Цикл
					ПолучениеСсылокНаНовыйОбъект(СписокЗаменяемыхОбъектов, СписокНовыхОбъектов, СписокАналитики, СсылкаНаСчет.Значение, ТипСсылки, НоваяСсылка, АналитикаСчета);
					
					Для каждого Запись из НаборЗаписей Цикл
						
						Если ИмяКоллекцииРегистров = "РегистрБухгалтерии" И ЗначениеЗаполнено(Организация) И НЕ Запись.Организация = Организация Тогда
							Продолжить;
						КонецЕсли; 
						
						ЗаписьИзменена = Ложь;
						
						Для каждого Измерение из Измерения Цикл
							Если ИмяКоллекцииРегистров = "РегистрБухгалтерии" Тогда
								Балансовый = Измерение.Балансовый;
							Иначе
								Балансовый = Истина;
							КонецЕсли;
							
							Если Балансовый Тогда
								ЗаменаСсылкиНаОбъект(Запись, Измерение.Имя, ТипСсылки, СсылкаНаСчет.Значение, НоваяСсылка, НаборЗаписейИзменен, Измерения, АналитикаСчета);
							Иначе
								ЗаменаСсылкиНаОбъект(Запись, Измерение.Имя+"Дт", ТипСсылки, СсылкаНаСчет.Значение, НоваяСсылка, НаборЗаписейИзменен,, АналитикаСчета);
								ЗаменаСсылкиНаОбъект(Запись, Измерение.Имя+"Кт", ТипСсылки, СсылкаНаСчет.Значение, НоваяСсылка, НаборЗаписейИзменен,, АналитикаСчета);
							КонецЕсли;
						КонецЦикла;
						
						Для каждого Реквизит из Реквизиты Цикл
							ЗаменаСсылкиНаОбъект(Запись, Реквизит.Имя, ТипСсылки, СсылкаНаСчет.Значение, НоваяСсылка, НаборЗаписейИзменен,, АналитикаСчета);
						КонецЦикла;
						
						Для каждого Ресурс из Ресурсы Цикл
							Если ИмяКоллекцииРегистров = "РегистрБухгалтерии" Тогда
								Балансовый = Ресурс.Балансовый;
							Иначе
								Балансовый = Истина;
							КонецЕсли;
							
							Если Балансовый Тогда
								ЗаменаСсылкиНаОбъект(Запись, Ресурс.Имя, ТипСсылки, СсылкаНаСчет.Значение, НоваяСсылка, НаборЗаписейИзменен,, АналитикаСчета);
							Иначе
								ЗаменаСсылкиНаОбъект(Запись, Ресурс.Имя+"Дт", ТипСсылки, СсылкаНаСчет.Значение, НоваяСсылка, НаборЗаписейИзменен,, АналитикаСчета);
								ЗаменаСсылкиНаОбъект(Запись, Ресурс.Имя+"Кт", ТипСсылки, СсылкаНаСчет.Значение, НоваяСсылка, НаборЗаписейИзменен,, АналитикаСчета);
							КонецЕсли;
						КонецЦикла;
						
						Если ИмяКоллекцииРегистров = "РегистрБухгалтерии" Тогда
							Если Регистр.Корреспонденция Тогда
								
								ЗаменаСсылкиНаОбъект(Запись, "СчетДт", ТипСсылки, СсылкаНаСчет.Значение, НоваяСсылка, НаборЗаписейИзменен,, АналитикаСчета, ЗаписьИзменена);
								ОчиститьНеиспользуемыеСубконто(Запись, "СубконтоДт", СсылкаНаСчет.Значение, НоваяСсылка, НаборЗаписейИзменен, ЗаписьИзменена);
								ЗаменаСсылкиНаОбъект(Запись, "СчетКт", ТипСсылки, СсылкаНаСчет.Значение, НоваяСсылка, НаборЗаписейИзменен,, АналитикаСчета, ЗаписьИзменена);
								ОчиститьНеиспользуемыеСубконто(Запись, "СубконтоКт", СсылкаНаСчет.Значение, НоваяСсылка, НаборЗаписейИзменен, ЗаписьИзменена);
								
							Иначе
								ЗаменаСсылкиНаОбъект(Запись, "Счет", ТипСсылки, СсылкаНаСчет.Значение, НоваяСсылка, НаборЗаписейИзменен,, АналитикаСчета, ЗаписьИзменена);
								ОчиститьНеиспользуемыеСубконто(Запись, "Субконто", СсылкаНаСчет.Значение, НоваяСсылка, НаборЗаписейИзменен, ЗаписьИзменена);
							КонецЕсли;
							
							Если НаборЗаписейИзменен Тогда
								Если Регистр.Корреспонденция И Запись.СчетДт = НоваяСсылка И Запись.СчетДт.Валютный 
									И НЕ ЗначениеЗаполнено(Запись.ВалютаДт) Тогда
									Запись.ВалютнаяСуммаДт  = Запись.Сумма;
									Запись.ВалютаДт 		= ВалютаРегл;
								ИначеЕсли Регистр.Корреспонденция И Запись.СчетКт = НоваяСсылка И Запись.СчетКт.Валютный 
									И НЕ ЗначениеЗаполнено(Запись.ВалютаКт) Тогда	
									Запись.ВалютнаяСуммаКт  = Запись.Сумма;
									Запись.ВалютаКт 		= ВалютаРегл;
								ИначеЕсли Регистр.Корреспонденция И Запись.СчетДт = НоваяСсылка И НЕ Запись.СчетДт.Валютный 
									И ЗначениеЗаполнено(Запись.ВалютаДт) Тогда
									Запись.ВалютнаяСуммаДт  = 0;
									Запись.ВалютаДт 		= Справочники.Валюты.ПустаяСсылка();
								ИначеЕсли Регистр.Корреспонденция И Запись.СчетКт = НоваяСсылка И НЕ Запись.СчетКт.Валютный 
									И ЗначениеЗаполнено(Запись.ВалютаКт) Тогда	
									Запись.ВалютнаяСуммаКт  = 0;
									Запись.ВалютаКт 		= Справочники.Валюты.ПустаяСсылка();	
								ИначеЕсли НЕ Регистр.Корреспонденция И Запись.Счет = НоваяСсылка И Запись.Счет.Валютный 
									И НЕ ЗначениеЗаполнено(Запись.Валюта) Тогда	
									Запись.ВалютнаяСумма  = Запись.Сумма;
									Запись.Валюта   	  = ВалютаРегл;
								ИначеЕсли НЕ Регистр.Корреспонденция И Запись.Счет = НоваяСсылка И НЕ Запись.Счет.Валютный 
									И ЗначениеЗаполнено(Запись.Валюта) Тогда	
									Запись.ВалютнаяСумма  = 0;
									Запись.Валюта   	  = Справочники.Валюты.ПустаяСсылка();
								КонецЕсли;
							КонецЕсли;

						КонецЕсли;
					КонецЦикла; // Для каждого Запись из НаборЗаписей Цикл
					
				КонецЦикла; // Для Каждого СсылкаНаСчет Из Ссылка.Ссылка Цикл
				
				Если НаборЗаписейИзменен Тогда
							
					Попытка
						НаборЗаписей.ОбменДанными.Загрузка = Истина;
						НаборЗаписей.ДополнительныеСвойства.Вставить("ОбработкаДанных", Истина);
						НаборЗаписей.Записать();
						
						ДвиженияИзменены = Истина;
						
						Комментарий = НСтр("ru = 'Обработаны движения документа <%1> по <%2>'");
						Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Комментарий, Ссылка.Данные, ПолноеИмяРегистра);
						
						ЗаписьЖурналаРегистрации(
							СобытиеЖурналаРегистрации,
							УровеньЖурналаРегистрации.Информация,Ссылка.Метаданные,Ссылка.Данные, Комментарий);				
					Исключение
					
						Комментарий = НСтр("ru = 'Движения документа <%1> по <%2> не обработаны.
						                         |	Необходимо заменить значение <%3> на <%4>.'");
						Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							Комментарий, Ссылка.Данные, ПолноеИмяРегистра, Ссылка.Ссылка, НоваяСсылка);
							
						ЗаписьЖурналаРегистрации(
							СобытиеЖурналаРегистрации,
							УровеньЖурналаРегистрации.Ошибка,Ссылка.Метаданные,Ссылка.Данные, Комментарий + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));				
					КонецПопытки;
							
				КонецЕсли;
				
			КонецЦикла; // Для Каждого Регистр из Ссылка.Метаданные.Движения Цикл
			
		КонецЕсли;
			
		Если ОбъектИзменен Тогда
			Попытка
				Если ПровестиДокумент И Объект.Проведен Тогда
					Объект.Записать(РежимЗаписиДокумента.Проведение);
				Иначе	
					Объект.ОбменДанными.Загрузка = Истина;
					Объект.Записать();
				КонецЕсли;
				
				Комментарий = НСтр("ru = 'Обработан объект <%1>'");
				Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Комментарий, Ссылка.Данные);
				
				ЗаписьЖурналаРегистрации(
					СобытиеЖурналаРегистрации,
					УровеньЖурналаРегистрации.Информация,Ссылка.Метаданные,Ссылка.Данные, Комментарий);				
				
				ЗафиксироватьТранзакцию();
			Исключение
				ОтменитьТранзакцию();
				
				Комментарий = НСтр("ru = 'Объект не обработан автоматически: %1 <%2> <%3>.
				                         |	Необходимо вручную перевыбрать счет <%4>.'");
				Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					Комментарий, ИмяКоллекцииОбъектовМД, Ссылка.Метаданные.Синоним, Ссылка.Данные, НоваяСсылка);

				ЗаписьЖурналаРегистрации(
					СобытиеЖурналаРегистрации,
					УровеньЖурналаРегистрации.Ошибка,Ссылка.Метаданные,Ссылка.Данные, Комментарий + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));				
				
			КонецПопытки;
			
		ИначеЕсли ДвиженияИзменены И ТранзакцияАктивна() Тогда
			Попытка
				ЗафиксироватьТранзакцию();
			Исключение
				Инфо = ИнформацияОбОшибке();
				ЗаписьЖурналаРегистрации(
					СобытиеЖурналаРегистрации,
					УровеньЖурналаРегистрации.Ошибка,Ссылка.Метаданные,Ссылка.Данные, ПодробноеПредставлениеОшибки(Инфо));				
				ОтменитьТранзакцию();
			КонецПопытки;
			
		Иначе
			ОтменитьТранзакцию();
			
		КонецЕсли;
		
	КонецЦикла; // Для Каждого Ссылка Из ТаблицаОбъектов Цикл	
	
КонецПроцедуры

#Область ОбновлениеИнформационнойБазы

#Область ОбработчикиОбновления_3_0_24

Процедура ОбработкаНастроекПланаСчетовТиповой2019() Экспорт

	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда // В подчиненных узлах РИБ не выполняется
		Возврат;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст =  "ВЫБРАТЬ
	|	Типовой.Ссылка КАК Счет
	|ИЗ
	|	ПланСчетов.Типовой КАК Типовой
	|ГДЕ
	|	НЕ Типовой.ЗапретитьИспользоватьВПроводках
	|	И ПОДСТРОКА(Типовой.Код, 1, 1) = ""Я""
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Типовой.Ссылка
	|ИЗ
	|	ПланСчетов.Типовой КАК Типовой
	|ГДЕ
	|	Типовой.Ссылка В (ЗНАЧЕНИЕ(ПланСчетов.Типовой.ДополнительноОплаченныйКапитал),
	|					  ЗНАЧЕНИЕ(ПланСчетов.Типовой.КраткосрочныеБиологическиеАктивы),
	|					  &МассивИзмененныхСчетов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Типовой.Ссылка
	|ИЗ
	|	ПланСчетов.Типовой КАК Типовой
	|ГДЕ
	|	НЕ Типовой.Код = Типовой.Порядок";
	
	МассивИзмененныхСчетов = Новый Массив;
	МакетОбновленияПС = ПланыСчетов.Типовой.ПолучитьМакет("ПФ_MXL_ИзменяемыеСчета2019");
	СчетаДляОбновления = МакетОбновленияПС.Области.Найти("СписокИзмененныхСчетов");
	
	Если НЕ СчетаДляОбновления = Неопределено Тогда
		
		Для НомерСтр = СчетаДляОбновления.Верх По СчетаДляОбновления.Низ Цикл
			
			ИмяСчета = СокрП(МакетОбновленияПС.Область(НомерСтр, 2).Текст);
			ИзмененныйСчет = ПланыСчетов.Типовой[ИмяСчета];
			
			МассивИзмененныхСчетов.Добавить(ИзмененныйСчет);
		КонецЦикла;
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("МассивИзмененныхСчетов", МассивИзмененныхСчетов);
	
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		ОбъектСчет = Выборка.Счет.ПолучитьОбъект();
		Если ОбъектСчет = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ОбъектИзменен = Ложь;
		
		Если Лев(ОбъектСчет.Код, 1) = "Я" Тогда
			ОбъектСчет.ЗапретитьИспользоватьВПроводках = Истина;
			ОбъектИзменен = Истина;
		КонецЕсли;
		
		Если Выборка.Счет = ПланыСчетов.Типовой.КраткосрочныеБиологическиеАктивы
			ИЛИ Выборка.Счет = ПланыСчетов.Типовой.ДополнительноОплаченныйКапитал Тогда
			ОбъектСчет.ЗапретитьИспользоватьВПроводках = Истина;
			ОбъектИзменен = Истина;
		КонецЕсли;
		
		Если НЕ ОбъектСчет.Порядок = ОбъектСчет.ПолучитьПорядокКода() Тогда
			ОбъектСчет.Порядок = ОбъектСчет.ПолучитьПорядокКода();
			ОбъектИзменен = Истина;                           
		КонецЕсли;
		
		ОбластьИзмененногоСчета = МакетОбновленияПС.НайтиТекст(ОбъектСчет.ИмяПредопределенныхДанных, , СчетаДляОбновления, , Истина);
		Если НЕ ОбластьИзмененногоСчета = Неопределено Тогда
			КодСчета = СокрЛП(МакетОбновленияПС.Область(ОбластьИзмененногоСчета.Верх, 3).Текст);
			ОбъектСчет.Код = КодСчета;
			ОбъектСчет.Порядок = ОбъектСчет.ПолучитьПорядокКода();
			ОбъектСчет.Наименование = СокрЛП(МакетОбновленияПС.Область(ОбластьИзмененногоСчета.Верх, 4).Текст);
			ОбъектИзменен = Истина;
		КонецЕсли;
			
		Если НЕ ОбъектИзменен Тогда
			Продолжить;
		КонецЕсли;
		
		Попытка
			ОбъектСчет.Записать();
		Исключение
			ТекстСообщения = НСтр("ru='Операция не выполнена'");
			ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;	    
	КонецЦикла; 
	
	УстановитьПодключаемуюАналитику();
	
	ЗаполнитьСоответствиеСчетовБУиНУ();
	
КонецПроцедуры

Процедура УстановитьПодключаемуюАналитику()

	ВестиРасчетыПоДокументам         = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.НаСчетеВедетсяУчетПоДокументамРасчетов(ПланыСчетов.Типовой.КраткосрочнаяДебиторскаяЗадолженностьПокупателейИЗаказчиков);
	ВестиУчетОСВРазрезеПодразделений = ЗначениеЗаполнено(Константы.ДатаНачалаВеденияВБУУчетаОСВРазрезеПодразделений.Получить());
	ВестиУчетОСВРазрезеМОЛ           = ЗначениеЗаполнено(Константы.ДатаНачалаВеденияВБУУчетаОСВРазрезеМОЛ.Получить());
	ВестиУчетПоПодразделениям        = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.НаСчетеВедетсяУчетПоПодразделениям(ПланыСчетов.Типовой.ДоходОтРеализацииПродукцииИОказанияУслуг_);
	
	Если НЕ (ВестиРасчетыПоДокументам ИЛИ ВестиУчетОСВРазрезеПодразделений
				ИЛИ ВестиУчетОСВРазрезеМОЛ ИЛИ ВестиУчетПоПодразделениям) Тогда
		Возврат;
	КонецЕсли;
	
	ШаблонСообщения = НСтр("ru = 'План счетов ""Типовой"", счет ""%1"": %2'");
	
	МакетОбновленияПС = ПланыСчетов.Типовой.ПолучитьМакет("ПФ_MXL_ИзменяемыеСчета2019");
	ОбластьНовыеСчета = МакетОбновленияПС.Области.Найти("НовыеСчета");
	
	НовыеСчета = Новый Массив;
	
	Если НЕ ОбластьНовыеСчета = Неопределено Тогда
		
		Для НомерСтр = ОбластьНовыеСчета.Верх По ОбластьНовыеСчета.Низ Цикл
			НовыеСчета.Добавить(СокрЛП(МакетОбновленияПС.Область(НомерСтр, 2).Текст));
		КонецЦикла;
		
	КонецЕсли;
	
	Если НовыеСчета.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ВидСубконтоДокументыРасчетов    = ПланыВидовХарактеристик.ВидыСубконтоТиповые.ДокументыРасчетовСКонтрагентами;
	ВидСубконтоОсновныеСредства     = ПланыВидовХарактеристик.ВидыСубконтоТиповые.ОсновныеСредства;
	ВидСубконтоПодразделения        = ПланыВидовХарактеристик.ВидыСубконтоТиповые.Подразделения;
	ВидСубконтоРаботникиОрганизаций = ПланыВидовХарактеристик.ВидыСубконтоТиповые.РаботникиОрганизаций;
	
	ЗапросОбщий = Новый Запрос("ВЫБРАТЬ
	|	Типовой.Ссылка КАК Ссылка
	|ИЗ
	|	ПланСчетов.Типовой КАК Типовой
	|ГДЕ
	|	Типовой.ВидыСубконто.ВидСубконто = &ВидСубконтоКонтрагенты
	|	И Типовой.ВидыСубконто.ВидСубконто = &ВидСубконтоДоговоры
	|	И Типовой.ИмяПредопределенныхДанных В(&НовыеСчета)
	|	И &ВестиРасчетыПоДокументам
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Типовой.Ссылка КАК Ссылка
	|ИЗ
	|	ПланСчетов.Типовой КАК Типовой
	|ГДЕ
	|	Типовой.ВидыСубконто.ВидСубконто = &ВидСубконтоКонтрагенты
	|	И Типовой.ВидыСубконто.ВидСубконто = &ВидСубконтоДоговоры
	|	И Типовой.ВидыСубконто.ВидСубконто = &ВидСубконтоДокументыРасчетов
	|	И Типовой.ИмяПредопределенныхДанных В(&НовыеСчета)
	|	И &ВестиРасчетыПоДокументам
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Типовой.Ссылка КАК Ссылка
	|ИЗ
	|	ПланСчетов.Типовой КАК Типовой
	|ГДЕ
	|	Типовой.ВидыСубконто.ВидСубконто = &ВидСубконтоОсновныеСредства
	|	И Типовой.ИмяПредопределенныхДанных В(&НовыеСчета)
	|	И (&ВестиУчетОСВРазрезеПодразделений
	|			ИЛИ &ВестиУчетОСВРазрезеМОЛ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Типовой.Ссылка КАК Ссылка
	|ИЗ
	|	ПланСчетов.Типовой КАК Типовой
	|ГДЕ
	|	Типовой.ВидыСубконто.ВидСубконто = &ВидСубконтоОсновныеСредства
	|	И Типовой.ВидыСубконто.ВидСубконто = &ВидСубконтоПодразделения
	|	И Типовой.ИмяПредопределенныхДанных В(&НовыеСчета)
	|	И &ВестиУчетОСВРазрезеПодразделений
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Типовой.Ссылка КАК Ссылка
	|ИЗ
	|	ПланСчетов.Типовой КАК Типовой
	|ГДЕ
	|	Типовой.ВидыСубконто.ВидСубконто = &ВидСубконтоОсновныеСредства
	|	И Типовой.ВидыСубконто.ВидСубконто = &ВидСубконтоРаботникиОрганизаций
	|	И Типовой.ИмяПредопределенныхДанных В(&НовыеСчета)
	|	И &ВестиУчетОСВРазрезеМОЛ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Типовой.Ссылка КАК Ссылка
	|ИЗ
	|	ПланСчетов.Типовой КАК Типовой
	|ГДЕ
	|	(Типовой.ВидыСубконто.ВидСубконто = &ВидСубконтоДоходы
	|			ИЛИ Типовой.ВидыСубконто.ВидСубконто = &ВидСубконтоСтатьиЗатрат)
	|	И Типовой.ИмяПредопределенныхДанных В(&НовыеСчета)
	|	И &ВестиУчетПоПодразделениям
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Типовой.Ссылка КАК Ссылка
	|ИЗ
	|	ПланСчетов.Типовой КАК Типовой
	|ГДЕ
	|	(Типовой.ВидыСубконто.ВидСубконто = &ВидСубконтоДоходы
	|			ИЛИ Типовой.ВидыСубконто.ВидСубконто = &ВидСубконтоСтатьиЗатрат)
	|	И Типовой.ВидыСубконто.ВидСубконто = &ВидСубконтоПодразделения
	|	И Типовой.ИмяПредопределенныхДанных В(&НовыеСчета)
	|	И &ВестиУчетПоПодразделениям");
	
	ЗапросОбщий.УстановитьПараметр("ВидСубконтоКонтрагенты"          , ПланыВидовХарактеристик.ВидыСубконтоТиповые.Контрагенты);
	ЗапросОбщий.УстановитьПараметр("ВидСубконтоДоговоры"             , ПланыВидовХарактеристик.ВидыСубконтоТиповые.Договоры);
	ЗапросОбщий.УстановитьПараметр("ВидСубконтоДокументыРасчетов"    , ВидСубконтоДокументыРасчетов);
	ЗапросОбщий.УстановитьПараметр("ВидСубконтоОсновныеСредства"     , ВидСубконтоОсновныеСредства);
	ЗапросОбщий.УстановитьПараметр("ВидСубконтоПодразделения"        , ВидСубконтоПодразделения);
	ЗапросОбщий.УстановитьПараметр("ВидСубконтоРаботникиОрганизаций" , ВидСубконтоРаботникиОрганизаций);
	ЗапросОбщий.УстановитьПараметр("ВидСубконтоДоходы"               , ПланыВидовХарактеристик.ВидыСубконтоТиповые.Доходы);
	ЗапросОбщий.УстановитьПараметр("ВидСубконтоСтатьиЗатрат"         , ПланыВидовХарактеристик.ВидыСубконтоТиповые.СтатьиЗатрат);
	
	ЗапросОбщий.УстановитьПараметр("ВестиРасчетыПоДокументам"        , ВестиРасчетыПоДокументам);
	ЗапросОбщий.УстановитьПараметр("ВестиУчетОСВРазрезеПодразделений", ВестиУчетОСВРазрезеПодразделений);
	ЗапросОбщий.УстановитьПараметр("ВестиУчетОСВРазрезеМОЛ"          , ВестиУчетОСВРазрезеМОЛ);
	ЗапросОбщий.УстановитьПараметр("ВестиУчетПоПодразделениям"       , ВестиУчетПоПодразделениям);
	
	ЗапросОбщий.УстановитьПараметр("НовыеСчета"                      , НовыеСчета);
	                                                             
	Результат = ЗапросОбщий.ВыполнитьПакет();
	
	Если ВестиРасчетыПоДокументам Тогда
		
		СчетаВзаиморасчетов                     = Результат[0].Выгрузить().ВыгрузитьКолонку("Ссылка");
		СчетаВзаиморасчетовСДокументамиРасчетов = Результат[1].Выгрузить().ВыгрузитьКолонку("Ссылка");
		
		Для Каждого Счет Из СчетаВзаиморасчетов Цикл
			
			Если СчетаВзаиморасчетовСДокументамиРасчетов.Найти(Счет) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
				
			Попытка

				ОбъектСчет   = Счет.ПолучитьОбъект();
				КодСчета = ОбъектСчет.Код;

				Если ОбъектСчет.ВидыСубконто.Количество() > 2 Тогда
					// для Счета уже установлено три Субконто
					Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						ШаблонСообщения, Строка(КодСчета), НСтр("ru = 'не удалось установить субконто ""Расчетные документы"". Проверьте состав субконто у счета!'"));

					ЗаписьЖурналаРегистрации(
						ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
						УровеньЖурналаРегистрации.Ошибка,
						,
						,
						Сообщение);
						
					Продолжить;
					
				КонецЕсли;

				НовыйВид = ОбъектСчет.ВидыСубконто.Добавить();

				НовыйВид.ВидСубконто = ВидСубконтоДокументыРасчетов;
				НовыйВид.Суммовой    = Истина;

				Если ОбъектСчет.Количественный Тогда
					НовыйВид.Количественный = Истина;
				КонецЕсли;

				Если ОбъектСчет.Валютный Тогда
					НовыйВид.Валютный = Истина;
				КонецЕсли;

				Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ШаблонСообщения, Строка(КодСчета), НСтр("ru = 'установлено субконто ""Расчетные документы""'"));

				Если Прав(Сообщение, 1) = "," Тогда
					Сообщение = Лев(Сообщение, СтрДлина(Сообщение)-1);
				КонецЕсли;

				ОбъектСчет.Записать();

				ЗаписьЖурналаРегистрации(
					ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
					УровеньЖурналаРегистрации.Информация,
					,
					,
					Сообщение);
					
			Исключение

				Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ШаблонСообщения, Строка(КодСчета), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
				ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,, Сообщение);
				
			КонецПопытки;

		КонецЦикла;
		
	КонецЕсли;
	
	Если ВестиУчетОСВРазрезеПодразделений ИЛИ ВестиУчетОСВРазрезеМОЛ Тогда
		
		СчетаУчетаОС                 = Результат[2].Выгрузить().ВыгрузитьКолонку("Ссылка");
		СчетаУчетаОССПодразделениями = Результат[3].Выгрузить().ВыгрузитьКолонку("Ссылка");
		СчетаУчетаОССМОЛ             = Результат[4].Выгрузить().ВыгрузитьКолонку("Ссылка");
		
		Для Каждого Счет Из СчетаУчетаОС Цикл
			
			Отказ = Ложь;
			
			Если ВестиУчетОСВРазрезеПодразделений И СчетаУчетаОССПодразделениями.Найти(Счет) <> Неопределено Тогда
				Отказ = Истина;
			КонецЕсли;
			
			Если ВестиУчетОСВРазрезеМОЛ И СчетаУчетаОССМОЛ.Найти(Счет) <> Неопределено Тогда
				Отказ = Истина;
			Иначе
				Отказ = Ложь;
			КонецЕсли;
			
			Если Отказ Тогда
				Продолжить;
			КонецЕсли;
			
			Попытка

				СообщениеПодразделение = "";
				СообщениеМОЛ           = "";
				
				ОбъектСчет   = Счет.ПолучитьОбъект();
				КодСчета = ОбъектСчет.Код;

				Если ВестиУчетОСВРазрезеПодразделений Тогда
					
					Если ОбъектСчет.ВидыСубконто.Количество() > 2 Тогда
						// для Счета уже установлено три Субконто
						Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							ШаблонСообщения, Строка(КодСчета), НСтр("ru = 'не удалось установить субконто ""Подразделения"". Проверьте состав субконто у счета!'"));

						ЗаписьЖурналаРегистрации(
							ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
							УровеньЖурналаРегистрации.Ошибка,
							,
							,
							Сообщение);

					Иначе

						НовыйВид = ОбъектСчет.ВидыСубконто.Добавить();
						НовыйВид.ВидСубконто = ВидСубконтоПодразделения;
						НовыйВид.Количественный = Истина;
						НовыйВид.Суммовой = Истина;
						НовыйВид.Валютный = Истина;
						НовыйВид.ТолькоОбороты = Ложь;
						
						СообщениеПодразделение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							ШаблонСообщения, Строка(КодСчета), НСтр("ru = 'установлено субконто ""Подразделения""'"));

					КонецЕсли;
					
				КонецЕсли;

				Если ВестиУчетОСВРазрезеМОЛ Тогда
					
					Если ОбъектСчет.ВидыСубконто.Количество() > 2 Тогда
						// для Счета уже установлено три Субконто
						Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							ШаблонСообщения, Строка(КодСчета), НСтр("ru = 'не удалось установить субконто ""Работники организации"". Проверьте состав субконто у счета!'"));

						ЗаписьЖурналаРегистрации(
							ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
							УровеньЖурналаРегистрации.Ошибка,
							,
							,
							Сообщение);

					Иначе

						НовыйВид = ОбъектСчет.ВидыСубконто.Добавить();
						НовыйВид.ВидСубконто = ВидСубконтоРаботникиОрганизаций;
						НовыйВид.Количественный = Истина;
						НовыйВид.Суммовой = Истина;
						НовыйВид.Валютный = Истина;
						НовыйВид.ТолькоОбороты = Ложь;
						
						СообщениеМОЛ = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							ШаблонСообщения, Строка(КодСчета), НСтр("ru = 'установлено субконто ""Работники организации""'"));

					КонецЕсли;
					
				КонецЕсли;
				
				ОбъектСчет.Записать();

				Если СообщениеПодразделение <> "" Тогда
					ЗаписьЖурналаРегистрации(
						ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
						УровеньЖурналаРегистрации.Информация,
						,
						,
						СообщениеПодразделение);
				КонецЕсли;
					
				Если СообщениеМОЛ <> "" Тогда
					ЗаписьЖурналаРегистрации(
						ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
						УровеньЖурналаРегистрации.Информация,
						,
						,
						СообщениеМОЛ);
				КонецЕсли;
					
			Исключение

				Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ШаблонСообщения, Строка(КодСчета), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
				ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,, Сообщение);
				
			КонецПопытки;

		КонецЦикла;
		
	КонецЕсли;
	
	Если ВестиУчетПоПодразделениям Тогда
		
		СчетаДоходовЗатрат                 = Результат[5].Выгрузить().ВыгрузитьКолонку("Ссылка");
		СчетаДоходовЗатратСПодразделениями = Результат[6].Выгрузить().ВыгрузитьКолонку("Ссылка");
		
		Для Каждого Счет Из СчетаДоходовЗатрат Цикл
			
			Если СчетаДоходовЗатратСПодразделениями.Найти(Счет) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
				
			Попытка

				ОбъектСчет   = Счет.ПолучитьОбъект();
				КодСчета = ОбъектСчет.Код;

				Если ОбъектСчет.ВидыСубконто.Количество() > 2 Тогда
					// для Счета уже установлено три Субконто
					Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						ШаблонСообщения, Строка(КодСчета), НСтр("ru = 'не удалось установить субконто ""Подразделения"". Проверьте состав субконто у счета!'"));

					ЗаписьЖурналаРегистрации(
						ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
						УровеньЖурналаРегистрации.Ошибка,
						,
						,
						Сообщение);
						
					Продолжить;
					
				КонецЕсли;

				НовыйВид = ОбъектСчет.ВидыСубконто.Добавить();

				НовыйВид.ВидСубконто = ВидСубконтоПодразделения;
				НовыйВид.Суммовой    = Истина;
				НовыйВид.Количественный = Истина;
				НовыйВид.Суммовой = Истина;
				НовыйВид.Валютный = Истина;
				НовыйВид.ТолькоОбороты = Истина;
						
				Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ШаблонСообщения, Строка(КодСчета), НСтр("ru = 'установлено субконто ""Подразделения""'"));

				Если Прав(Сообщение, 1) = "," Тогда
					Сообщение = Лев(Сообщение, СтрДлина(Сообщение)-1);
				КонецЕсли;

				ОбъектСчет.Записать();

				ЗаписьЖурналаРегистрации(
					ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
					УровеньЖурналаРегистрации.Информация,
					,
					,
					Сообщение);
					
			Исключение

				Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ШаблонСообщения, Строка(КодСчета), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
				ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,, Сообщение);
				
			КонецПопытки;

		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьСоответствиеСчетовБУиНУ()
	
	ШаблонСообщенияОшибкаСчета = НСтр("ru = 'Макет ""СоответствияСчетовБУиНУ"": некорректное имя счета ""%1""'");
	ШаблонСообщенияОперация    = НСтр("ru = 'установленно соответствие со счетом ""%1""'");
	ШаблонСообщения            = НСтр("ru = 'План счетов ""Типовой"", счет ""%1"": %2'");
	
	ИменаПредопределенныхТиповой   = Метаданные.ПланыСчетов.Типовой.ПолучитьИменаПредопределенных();
	ИменаПредопределенныхНалоговый = Метаданные.ПланыСчетов.Налоговый.ПолучитьИменаПредопределенных();
	
	МакетОбновленияПС = ПланыСчетов.Типовой.ПолучитьМакет("ПФ_MXL_ИзменяемыеСчета2019");
	ОбластьНовыеСчета = МакетОбновленияПС.Области.Найти("НовыеСчета");
	
	НовыеСчета = Новый Массив;
	
	Если НЕ ОбластьНовыеСчета = Неопределено Тогда
		
		Для НомерСтр = ОбластьНовыеСчета.Верх По ОбластьНовыеСчета.Низ Цикл
			НовыеСчета.Добавить(СокрЛП(МакетОбновленияПС.Область(НомерСтр, 2).Текст));
		КонецЦикла;
		
	КонецЕсли;
	
	Если НовыеСчета.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаСоответствия = Новый ТаблицаЗначений;
	ТаблицаСоответствия.Колонки.Добавить("СчетБУ", Новый ОписаниеТипов("ПланСчетовСсылка.Типовой"));
	ТаблицаСоответствия.Колонки.Добавить("СчетНУ", Новый ОписаниеТипов("ПланСчетовСсылка.Налоговый"));
		
	Макет = Документы.УстановкаСоответствияСчетовБУиНУ.ПолучитьМакет("СоответствияСчетовБУиНУ");
	
	Для Индекс = 2 По Макет.ВысотаТаблицы Цикл

		ИмяСчетаБУ = СокрЛП(Макет.Область(Индекс, 1, Индекс, 1).Текст);
		ИмяСчетаНУ = СокрЛП(Макет.Область(Индекс, 3, Индекс, 3).Текст);

		Если (НовыеСчета.Найти(ИмяСчетаБУ) = Неопределено) ИЛИ (ИмяСчетаНУ = "") Тогда
			Продолжить;
		КонецЕсли;
	
		Если ИменаПредопределенныхТиповой.Найти(ИмяСчетаБУ) = Неопределено Тогда
			// некорректное имя счета БУ
			Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонСообщенияОшибкаСчета, ИмяСчетаБУ);
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,, Сообщение);
			Продолжить;
		КонецЕсли;

		Если ИменаПредопределенныхНалоговый.Найти(ИмяСчетаНУ) = Неопределено Тогда
			// некорректное имя счета НУ
			Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонСообщенияОшибкаСчета, ИмяСчетаНУ);
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,, Сообщение);
			Продолжить;
		КонецЕсли;
	
		НовоеСоответствие = ТаблицаСоответствия.Добавить();
		НовоеСоответствие.СчетБУ = ПланыСчетов.Типовой[ИмяСчетаБУ];
		НовоеСоответствие.СчетНУ = ПланыСчетов.Налоговый[ИмяСчетаНУ];
		
	КонецЦикла;
	
	Если ТаблицаСоответствия.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Для Каждого СтрокаСоответствия Из ТаблицаСоответствия Цикл
		
		СчетБУ = СтрокаСоответствия.СчетБУ;
		СчетНУ = СтрокаСоответствия.СчетНУ;

		ОбъектСчетБУ = СчетБУ.ПолучитьОбъект();
		ОбъектСчетБУ.СчетНУ = СчетНУ;
		
		Попытка
			
			ОбъектСчетБУ.Записать();
					
			СообщениеОперация = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонСообщенияОперация, СокрЛП(СчетНУ.Код));

			Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонСообщения, СокрЛП(СчетБУ.Код), СообщениеОперация);

			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Информация,,, Сообщение);
				
		Исключение

			Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонСообщения, СокрЛП(СчетБУ.Код), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,, Сообщение);
			
		КонецПопытки;	        			
		
	КонецЦикла;
	
	КорректировкаУстановкиСоответствияСчетовБУиНУ(ТаблицаСоответствия);
	
КонецПроцедуры // ЗаполнитьСоответствиеСчетовБУиНУ()

Процедура КорректировкаУстановкиСоответствияСчетовБУиНУ(ТаблицаСоответствия)
	
	Если ТаблицаСоответствия.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаСоответствия.СчетБУ КАК СчетБУ,
		|	ТаблицаСоответствия.СчетНУ КАК СчетНУ
		|ПОМЕСТИТЬ ВТ_ТаблицаСоответствия
		|ИЗ
		|	&ТаблицаСоответствия КАК ТаблицаСоответствия
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	УстановкаСоответствияСчетовБУиНУСоответствиеСчетовБУиНУ.Ссылка КАК Ссылка,
		|	ЕСТЬNULL(ТаблицаСоответствия.СчетБУ, &ПустойТиповой) КАК СчетБУ
		|ПОМЕСТИТЬ ВТ_ДокументыСНовымиСчетами
		|ИЗ
		|	Документ.УстановкаСоответствияСчетовБУиНУ.СоответствиеСчетовБУиНУ КАК УстановкаСоответствияСчетовБУиНУСоответствиеСчетовБУиНУ
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ТаблицаСоответствия КАК ТаблицаСоответствия
		|		ПО УстановкаСоответствияСчетовБУиНУСоответствиеСчетовБУиНУ.СчетБУ = ТаблицаСоответствия.СчетБУ
		|ГДЕ
		|	ЕСТЬNULL(ТаблицаСоответствия.СчетБУ, &ПустойТиповой) <> &ПустойТиповой
		|	И УстановкаСоответствияСчетовБУиНУСоответствиеСчетовБУиНУ.Ссылка.Проведен
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТ_ДокументыСНовымиСчетами.Ссылка КАК Ссылка
		|ИЗ
		|	ВТ_ДокументыСНовымиСчетами КАК ВТ_ДокументыСНовымиСчетами
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	УстановкаСоответствияСчетовБУиНУ.Ссылка КАК Ссылка,
		|	УстановкаСоответствияСчетовБУиНУ.Организация КАК Организация,
		|	УстановкаСоответствияСчетовБУиНУ.СтруктурноеПодразделение КАК СтруктурноеПодразделение
		|ИЗ
		|	Документ.УстановкаСоответствияСчетовБУиНУ КАК УстановкаСоответствияСчетовБУиНУ
		|ГДЕ
		|	НЕ УстановкаСоответствияСчетовБУиНУ.Ссылка В
		|				(ВЫБРАТЬ
		|					ВТ_ДокументыСНовымиСчетами.Ссылка
		|				ИЗ
		|					ВТ_ДокументыСНовымиСчетами)
		|	И УстановкаСоответствияСчетовБУиНУ.Проведен
		|ИТОГИ ПО
		|	Организация, СтруктурноеПодразделение";
	
	Запрос.УстановитьПараметр("ТаблицаСоответствия", ТаблицаСоответствия);
	Запрос.УстановитьПараметр("ПустойТиповой"      , ПланыСчетов.Типовой.ПустаяСсылка());
	
	ВыборкаСоответствий = Запрос.Выполнить().Выгрузить();
	                                                             
	Результат = Запрос.ВыполнитьПакет();
	
	Если НЕ Результат[2].Пустой() Тогда
		// Уже существуют документы, в которых используются новые счета
		Возврат;
	КонецЕсли;
	
	ШаблонСообщения = НСтр("ru = 'Перезаполнен и проведен документ: %1'");
	
	ОрганизацииДляОбработки = Результат[3].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ОрганизацииДляОбработки.Следующий() Цикл
		СтруктурныеПодразделенияДляОбработки = ОрганизацииДляОбработки.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока СтруктурныеПодразделенияДляОбработки.Следующий() Цикл
			ДокументыДляОбработки = СтруктурныеПодразделенияДляОбработки.Выбрать();
			// Обновляется только один документ для каждой организации
			Если ДокументыДляОбработки.Следующий() Тогда
				ДокументОбъект = ДокументыДляОбработки.Ссылка.ПолучитьОбъект();
				Документы.УстановкаСоответствияСчетовБУиНУ.ЗаполнитьСоответствиеСчетовБУиНУПоУмолчанию(ДокументОбъект);
				Попытка
					ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
					Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ДокументыДляОбработки.Ссылка);
					ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Информация,,, Сообщение);
				Исключение
					Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='Документ ""%1"": %2'"), ДокументыДляОбработки.Ссылка, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,, Сообщение);
				КонецПопытки;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли