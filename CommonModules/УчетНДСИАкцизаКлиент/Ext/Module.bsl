////////////////////////////////////////////////////////////////////////////////
// УчетНДСИАкцизаКлиент: 
//  
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

Процедура ОбработатьДействиеПоВводуСчетаФактуры(Форма, ВыполняемоеДействие, ВидСчетаФактуры, ДанныеСчетаФактуры = Неопределено) Экспорт
	
	Объект = Форма.Объект;

	// Проверка формы
	ЕстьОшибки = Ложь;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, "ОтложитьНачислениеНДС")
		И Объект.ОтложитьНачислениеНДС Тогда
		
		ТекстСообщения = НСтр("ru = 'При отложенном начислении НДС счет-фактура вводится из документа регистрации НДС.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		ЕстьОшибки = Истина;
		
	КонецЕсли;
	
	Если ВыполняемоеДействие = "СоздатьСчетФактуру" И ВидСчетаФактуры = "СчетФактураПолученный" И ДанныеСчетаФактуры <> Неопределено Тогда
		
		Если ДанныеСчетаФактуры.Свойство("ДатаВходящего") И НЕ ЗначениеЗаполнено(ДанныеСчетаФактуры.ДатаВходящего) Тогда
			ТекстСообщения = НСтр("ru = 'Не заполнена дата входящего счета-фактуры.'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "ДатаСчетаФактурыПолученного");
			ЕстьОшибки = Истина;
		КонецЕсли;
		
		Если ДанныеСчетаФактуры.Свойство("НомерВходящего") И НЕ ЗначениеЗаполнено(ДанныеСчетаФактуры.НомерВходящего) Тогда
			ТекстСообщения = НСтр("ru = 'Не заполнен номер входящего счета-фактуры.'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "НомерСчетаФактурыПолученного");
			ЕстьОшибки = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Объект.ПометкаУдаления Тогда
		ТекстСообщения = НСтр("ru = 'Счет-фактуру нельзя зарегистрировать на основании документа, помеченного на удаление.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		ЕстьОшибки = Истина;
	КонецЕсли;
	
	Если ЕстьОшибки Тогда
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = "";
	
	//++ Кибернетика Кубасов Е I-18624 Пункт 2 (Добавлено условие не проверять документ Поступление ТМЗ услуг)  
	Если Строка(ТипЗнч(Объект.ссылка)) = "Поступление ТМЗ и услуг" Тогда //когда истина тогда почемуто проходит а когда ложь
		Иначе
		Если НЕ ЗначениеЗаполнено(Форма.Параметры.Ключ) ИЛИ Форма.Модифицированность Тогда
			ТекстВопроса = НСтр("ru = 'Счет-фактуру нельзя вводить на основании не записанного и не проведенного документа. Записать и провести документ?'");
		ИначеЕсли НЕ Объект.Проведен И НЕ Объект.ПометкаУдаления Тогда
			ТекстВопроса = НСтр("ru = 'Счет-фактуру нельзя вводить на основании не проведенного документа. Провести документ?'");
		КонецЕсли;
	КонецЕсли;
	//-- Кибернетика Кубасов Е I-18624 Пункт 2 (Добавлено условие не проверять документ Поступление ТМЗ услуг) 
	
	Если ЗначениеЗаполнено(ТекстВопроса) Тогда
		ДополнительныеПараметры = Новый Структура("Форма, ВыполняемоеДействие, ВидСчетаФактуры", Форма, ВыполняемоеДействие, ВидСчетаФактуры);
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение   = Новый ОписаниеОповещения("ПослеЗакрытияВопросаЗаписьПриСозданииСчетаФактуры", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
	Иначе
		СоздатьДополнитьСчетФактуру(Форма, ВыполняемоеДействие, ВидСчетаФактуры);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеЗакрытияВопросаЗаписьПриСозданииСчетаФактуры(Результат, Параметры) Экспорт

	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Форма = Параметры.Форма;
	
	Попытка
		// выполняем проведение документа
		ПараметрыЗаписи = Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение);
		Если Форма.Записать(ПараметрыЗаписи) Тогда
			СоздатьДополнитьСчетФактуру(Форма, Параметры.ВыполняемоеДействие, Параметры.ВидСчетаФактуры);
			УчетНДСиАкцизаКлиентСервер.УправлениеГруппойСчетаФактуры(Форма);
		КонецЕсли;
	Исключение
		Информация = ИнформацияОбОшибке();
		ТекстСообщения = НСтр("ru='Не удалось записать и провести документ по причине: %1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, КраткоеПредставлениеОшибки(Информация));
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , , "Форма.Объект");
	КонецПопытки;

КонецПроцедуры

Процедура ПослеВыбораСчетаФактуры(Результат, Параметры) Экспорт

	Форма           = Параметры.Форма;
	ВидСчетаФактуры = Параметры.ВидСчетаФактуры;
	
	Если ЗначениеЗаполнено(Результат) И ТипЗнч(Результат) = Тип("ДокументСсылка." + ВидСчетаФактуры) Тогда
		
		ДанныеФормы = Новый Структура("СчетФактура, ДанныеСчетаФактуры");
		ДанныеФормы.Вставить("ТребуетсяСчетФактура", Истина);
		ЗаполнитьЗначенияСвойств(ДанныеФормы, Форма);

		УчетНДСиАкцизаВызовСервера.ДополнитьСчетФактуруПоОснованию(Результат, Форма.Объект.Ссылка, ВидСчетаФактуры, ДанныеФормы);
		Если ЗначениеЗаполнено(ДанныеФормы.СчетФактура) Тогда
			Форма.СчетФактура = ДанныеФормы.СчетФактура;
			Форма.ДанныеСчетаФактуры = ДанныеФормы.ДанныеСчетаФактуры;
			УчетНДСИАкцизаКлиентСервер.ЗаполнитьТекстПроСчетФактуру(Форма, Форма.ДанныеСчетаФактуры, "НадписьСчетФактура", ДанныеФормы.ТребуетсяСчетФактура);
		КонецЕсли;
		УчетНДСиАкцизаКлиентСервер.УправлениеГруппойСчетаФактуры(Форма);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОткрытьСчетФактуру(Форма, СчетФактура, ВидСчетаФактуры) Экспорт

	СтандартнаяОбработка = Ложь;

	Если ЗначениеЗаполнено(СчетФактура) Тогда
		
		СписокДействийВводСФ = Новый СписокЗначений();
		СписокДействийВводСФ.Добавить("ОткрытьСуществующийДокумент"    , НСтр("ru = 'Открыть документ'"));
		СписокДействийВводСФ.Добавить("ВыписатьИсправленныйСчетФактуру", НСтр("ru = 'Выписать исправленный счет-фактуру'"));
		
		//Если ТипЗнч(Форма.Параметры.Ключ) = Тип("ДокументСсылка.ОтчетОРозничныхПродажах") Тогда
		//	СписокДействийВводСФ.Добавить("ВыписатьНовыйСчетФактуруВозврат", "Выписать новый счет-фактуру возврат");
		//КонецЕсли;
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("СчетФактура", СчетФактура);
		ДополнительныеПараметры.Вставить("ВидСчетаФактуры", ВидСчетаФактуры);
		ДополнительныеПараметры.Вставить("Основание", Форма.Параметры.Ключ);
		ДополнительныеПараметры.Вставить("Владелец", Форма);
		
		Оповещение = Новый ОписаниеОповещения("ПослеВыбораИзМенюПриОткрытииСчетаФактуры", ЭтотОбъект, ДополнительныеПараметры);
		Форма.ПоказатьВыборИзМеню(Оповещение, СписокДействийВводСФ);
		
	Иначе
		
		ПараметрыФормы = Новый Структура("Основание", Форма.Параметры.Ключ);
		ОткрытьФорму("Документ." + ВидСчетаФактуры + ".ФормаОбъекта", ПараметрыФормы, Форма);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеВыбораИзМенюПриОткрытииСчетаФактуры(Результат, Параметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	Если Результат.Значение = "ОткрытьСуществующийДокумент" Тогда
		
		ПоказатьЗначение(,Параметры.СчетФактура);
		
	ИначеЕсли Результат.Значение = "ВыписатьИсправленныйСчетФактуру" Тогда
		
		ПараметрыФормы = Новый Структура("Основание", Параметры.Основание);
		Форма = ПолучитьФорму("Документ." + Параметры.ВидСчетаФактуры + ".ФормаОбъекта", ПараметрыФормы, Параметры.Владелец);
		Форма.Объект.ВидСчетаФактуры = ПредопределенноеЗначение("Перечисление.ВидыСчетовФактур.Исправленный");
		Форма.Объект.ОсновнойСчетФактура = Параметры.СчетФактура;
		Форма.Открыть();
		
	Иначе
		
		Объект = Параметры.Владелец.Объект;
		
		ПараметрыОтбора = Новый Структура;
		Если ЗначениеЗаполнено(Объект.Организация) Тогда
			ПараметрыОтбора.Вставить("Организация", Объект.Организация);
		КонецЕсли;
		Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
			ПараметрыОтбора.Вставить("Контрагент", Объект.Контрагент);
		КонецЕсли;
		Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
			ПараметрыОтбора.Вставить("ДоговорКонтрагента", Объект.ДоговорКонтрагента);
		КонецЕсли;
		
		ПараметрыВыбора = Новый Структура("Отбор", ПараметрыОтбора);
		Если ПараметрыВыбора <> Неопределено Тогда
			ДополнительныеПараметры = Новый Структура("Форма, ВидСчетаФактуры, Основание", Параметры.Владелец, Параметры.ВидСчетаФактуры, Параметры.Основание);
			Оповещение = Новый ОписаниеОповещения("ПослеВыбораСчетаФактурыВозвратОтчетОРозничныхПродажах", ЭтотОбъект, ДополнительныеПараметры);
			ОткрытьФорму("Документ." + Параметры.ВидСчетаФактуры + ".ФормаВыбора", ПараметрыВыбора,,,,, Оповещение);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеВыбораСчетаФактурыВозвратОтчетОРозничныхПродажах(Результат, Параметры) Экспорт

	Форма           = Параметры.Форма;
	ВидСчетаФактуры = Параметры.ВидСчетаФактуры;
	
	Если ЗначениеЗаполнено(Результат) И ТипЗнч(Результат) = Тип("ДокументСсылка." + ВидСчетаФактуры) Тогда
		
		ПараметрыЗаполнения = Новый Структура("Основание, ВозвратТоваровПоОтчету", Параметры.Основание, Истина);
 		ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", ПараметрыЗаполнения);
		
		Форма = ПолучитьФорму("Документ." + ВидСчетаФактуры + ".ФормаОбъекта", ПараметрыФормы, Форма);
		Форма.Объект.ВидСчетаФактуры = ПредопределенноеЗначение("Перечисление.ВидыСчетовФактур.Дополнительный");
		Форма.Объект.ОсновнойСчетФактура = Результат;
		Форма.Открыть();
		
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура ВыбратьСчетФактуру(Форма, ВидСчетаФактуры)
	
	Объект = Форма.Объект;
	
	ПараметрыОтбора = Новый Структура;
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ПараметрыОтбора.Вставить("Организация", Объект.Организация);
	КонецЕсли;
	//Если ЗначениеЗаполнено(Объект.СтруктурноеПодразделение) Тогда
	//	ПараметрыОтбора.Вставить("СтруктурноеПодразделение", Объект.СтруктурноеПодразделение);
	//КонецЕсли;
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ПараметрыОтбора.Вставить("Контрагент", Объект.Контрагент);
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		ПараметрыОтбора.Вставить("ДоговорКонтрагента", Объект.ДоговорКонтрагента);
	КонецЕсли;
	
	ПараметрыВыбора = Новый Структура("Отбор", ПараметрыОтбора);   // ("Отбор", ПараметрыОтбора)
	Если ПараметрыВыбора <> Неопределено Тогда
		ДополнительныеПараметры = Новый Структура("Форма, ВидСчетаФактуры", Форма, ВидСчетаФактуры);
		Оповещение = Новый ОписаниеОповещения("ПослеВыбораСчетаФактуры", ЭтотОбъект, ДополнительныеПараметры);
		ОткрытьФорму("Документ." + ВидСчетаФактуры + ".ФормаВыбора", ПараметрыВыбора,,,,, Оповещение);
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьДополнитьСчетФактуру(Форма, ВыполняемоеДействие, ВидСчетаФактуры)
	
	Если ВыполняемоеДействие = "СоздатьСчетФактуру" Тогда
		ДанныеФормы = Новый Структура("СчетФактура, ДанныеСчетаФактуры");
		ДанныеФормы.Вставить("ТребуетсяСчетФактура", Истина);
		Если ВидСчетаФактуры = "СчетФактураПолученный" Тогда
			ДанныеФормы.Вставить("НомерСчетаФактурыПолученного", "");
			ДанныеФормы.Вставить("ДатаСчетаФактурыПолученного", '00010101');
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(ДанныеФормы, Форма);
		УчетНДСиАкцизаВызовСервера.СоздатьСчетФактуруПоОснованию(ВидСчетаФактуры, Форма.Объект.Ссылка, ДанныеФормы); 
		Если ЗначениеЗаполнено(ДанныеФормы.СчетФактура) Тогда
			Форма.СчетФактура        = ДанныеФормы.СчетФактура;
			Форма.ДанныеСчетаФактуры = ДанныеФормы.ДанныеСчетаФактуры;
			УчетНДСИАкцизаКлиентСервер.ЗаполнитьТекстПроСчетФактуру(Форма, Форма.ДанныеСчетаФактуры, "НадписьСчетФактура", ДанныеФормы.ТребуетсяСчетФактура);
		КонецЕсли;
		
	ИначеЕсли ВыполняемоеДействие = "ДополнитьСчетФактуру" Тогда
		ВыбратьСчетФактуру(Форма, ВидСчетаФактуры);
		
	КонецЕсли;
	
КонецПроцедуры

