////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Открывает форму нового, не записанного, элемента справочника "Контрагенты", 
//  заполненного данными из параметра ДанныеЗаполнения.
// Форма должна открываться в модальном режиме или в режиме блокирования окна владельца,
//  так как в форме ЭСФ может быть изменена текущая строка таблицы "Поставщики".
// В качестве владельца формы должно быть указано значение параметра ВладелецФормы.
//
// Параметры:
//  ДанныеЗаполнения - Структура - Данные для заполнения новой формы.
//  ВладелецФормы - Объект, который нужно указать владельцем открываемой формы.
//
Процедура ОткрытьЗаполненнуюФормуНовогоКонтрагента(Знач ДанныеЗаполнения, Знач ВладелецФормы) Экспорт
	
	Форма = ПолучитьФорму("Справочник.Контрагенты.ФормаОбъекта", , ВладелецФормы);
	Объект = ?(ЭСФКлиентСервер.ЭтоОбычнаяФорма(Форма), Форма, Форма.Объект);
		
	Объект.ИдентификационныйКодЛичности = ДанныеЗаполнения.Идентификатор;
	Объект.Наименование = ДанныеЗаполнения.Наименование;	
	Объект.НаименованиеПолное = ДанныеЗаполнения.Наименование;
	Объект.СерияСвидетельстваПоНДС = ДанныеЗаполнения.СерияСвидетельстваПоНДС;
	Объект.НомерСвидетельстваПоНДС = ДанныеЗаполнения.НомерСвидетельстваПоНДС;
	Объект.КБЕ = ДанныеЗаполнения.КБе;
	Объект.Комментарий = ДанныеЗаполнения.Комментарий;
	
	Форма.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
	Форма.Открыть();
	
КонецПроцедуры

// Открывает форму нового, не записанного, элемента справочника "ДоговорыКонтрагентов".
// Элемент должен быть заполнен по данным параметра ФормаЭСФ.
// В качестве владельца открываемой формы должен быть указан параметр ФормаЭСФ.
//
// Параметры:
//  ФормаЭСФ - УправляемаяФорма - Форма по которой необходимо заполнить новый элемент.
//   Таблица ИмяТаблицыКонтрагентов обязательно содержит хотя бы одну строку.
//   Все поля в колонке ИмяРеквизитаКонтрагента обязательно заполнены.
//  ИмяТаблицыКонтрагентов - Стркоа - Имя таблицы, в которой содержатся контрагенты для создания догвора.
//  ИмяРеквизитаКонтрагента - Стркоа - Имя реквизита, в которой содержатся ссылка на контрагента.
//
Процедура ОткрытьЗаполненнуюФормуНовогоДоговора(Знач ФормаЭСФ, Знач ИмяТаблицыКонтрагентов, Знач ИмяРеквизитаКонтрагента, ДополнительныеПараметры = Неопределено) Экспорт
	
	ФормаДоговора = ПолучитьФорму("Справочник.ДоговорыКонтрагентов.ФормаОбъекта", , ФормаЭСФ); 
	
	ЗаполнитьФормуДоговора(ФормаЭСФ, ИмяТаблицыКонтрагентов, ИмяРеквизитаКонтрагента, ФормаДоговора, ДополнительныеПараметры);

	ФормаДоговора.Открыть();
	
КонецПроцедуры

// Открывает форму существующего элемента справочника "ДоговорыКонтрагентов".
// Элемент должен быть заполнен по данным параметра ФормаЭСФ.
// В качестве владельца открываемой формы должен быть указан параметр ФормаЭСФ.
//
// Параметры:
//  ФормаЭСФ - УправляемаяФорма - Форма по которой необходимо перезаполнить существующий элемент.
//   Таблица ИмяТаблицыКонтрагентов обязательно содержит хотя бы одну строку.
//   Все поля в колонке ИмяРеквизитаКонтрагента обязательно заполнены.
//  ИмяТаблицыКонтрагентов - Стркоа - Имя таблицы, в которой содержатся контрагенты для создания догвора.
//  ИмяРеквизитаКонтрагента - Стркоа - Имя реквизита, в которой содержатся ссылка на контрагента.
//
Процедура ОткрытьЗаполненнуюФормуСтарогоДоговора(Знач ФормаЭСФ, Знач ИмяТаблицыКонтрагентов, Знач ИмяРеквизитаКонтрагента, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ", ФормаЭСФ.Объект.ДоговорПоставки);
	ФормаДоговора = ПолучитьФорму("Справочник.ДоговорыКонтрагентов.ФормаОбъекта", ПараметрыФормы, ФормаЭСФ); 
	
	ЗаполнитьФормуДоговора(ФормаЭСФ, ИмяТаблицыКонтрагентов, ИмяРеквизитаКонтрагента, ФормаДоговора, ДополнительныеПараметры);
		
	ФормаДоговора.Открыть();
	ФормаДоговора.Модифицированность = Истина;
	
КонецПроцедуры

// Открывает форму нового, не записанного, товара, 
//  заполненного данными из СтрокаТовары.
// Форма должна открываться в модальном режиме или в режиме блокирования окна владельца,
//  так как в форме ЭСФ может быть изменена текущая строка таблицы "Товары".
// В качестве владельца формы должно быть указано значение параметра ФормаЭСФ.
//
// Параметры:
//  ФормаЭСФ - УправляемаяФорма - Форма по которой необходимо создать товар.
//  СтрокаТовары - ДанныеФормыЭлементКоллекции - Строка таблицы товары,
//   по данным которой необходимо создать новый товар.
//
Процедура ОткрытьЗаполненнуюФормуНовогоТовара(Знач ФормаЭСФ, Знач СтрокаТовары) Экспорт
	
	//////////////////////////////////////////////////////////////////////////////
	// Открыть форму выбора типа товара.
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Заголовок", НСтр("ru = 'Выберите тип создаваемого товара'"));
	
	МассивЗначений = Новый Массив;
	
	ТипТовар = НСтр("ru = 'Товар'");
	МассивЗначений.Добавить(ТипТовар);
	
	ТипУслуга = НСтр("ru = 'Услуга'");
	МассивЗначений.Добавить(ТипУслуга);
	
	ТипОС = НСтр("ru = 'Основное средство'");
	МассивЗначений.Добавить(ТипОС);
	
	ТипНМА = НСтр("ru = 'Нематериальный актив'");
	МассивЗначений.Добавить(ТипНМА);
	
	ПараметрыФормы.Вставить("МассивЗначений", МассивЗначений);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ФормаЭСФ", ФормаЭСФ); 
	ДополнительныеПараметры.Вставить("СтрокаТовары", СтрокаТовары);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьЗаполненнуюФормуНовогоТовараЗавершение", ЭСФКлиентПереопределяемый, ДополнительныеПараметры);
	
	//Открыть форму выбора нового товара.	
	ОткрытьФорму("Обработка.ОбменЭСФ.Форма.ВыборИзСписка", ПараметрыФормы,,,,, ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
			
КонецПроцедуры

Процедура ОткрытьЗаполненнуюФормуНовогоТовараЗавершение(ВыбранныйТипТовара, ДополнительныеПараметры) Экспорт
	
	ТекстКомментария = ЭСФКлиентСервер.ТекстКомментарияСозданПоДаннымЭСФ(ДополнительныеПараметры.ФормаЭСФ.Объект.Ссылка);
	
	ТипТовар = НСтр("ru = 'Товар'");
	ТипУслуга = НСтр("ru = 'Услуга'");
	ТипОС = НСтр("ru = 'Основное средство'");	
	ТипНМА = НСтр("ru = 'Нематериальный актив'");
	
	СтрокаТовары = ДополнительныеПараметры.СтрокаТовары;
		
	Если ВыбранныйТипТовара = ТипТовар ИЛИ ВыбранныйТипТовара = ТипУслуга Тогда
	
		ФормаТовара = ПолучитьФорму("Справочник.Номенклатура.ФормаОбъекта", , ДополнительныеПараметры.ФормаЭСФ);
		Объект = ?(ЭСФКлиентСервер.ЭтоОбычнаяФорма(ФормаТовара), ФормаТовара, ФормаТовара.Объект);
		Если Не ПустаяСтрока(СтрокаТовары.ТоварНаименование) Тогда
			Объект.Наименование = СтрокаТовары.ТоварНаименование;
		Иначе
			Объект.Наименование = СтрокаТовары.ТоварНаименованиеВРамкахТС;
		КонецЕсли;
		Объект.БазоваяЕдиницаИзмерения = СтрокаТовары.ЕдиницаИзмерения;
		Объект.Комментарий = ТекстКомментария;
		Объект.НаименованиеПолное = СтрокаТовары.ТоварНаименование;
		Объект.СтавкаНДС = СтрокаТовары.СтавкаНДС;
		Объект.СтавкаАкциза = СтрокаТовары.СтавкаАкциза;
		Объект.КодТНВЭД = СтрокаТовары.КодТНВЭД;
		Объект.Услуга = ?(ВыбранныйТипТовара = ТипУслуга, Истина, Ложь);
		
		Если ВыбранныйТипТовара = ТипТовар И ТипЗнч(ДополнительныеПараметры.ФормаЭСФ.Объект.Ссылка) = Тип("ДокументСсылка.СНТ") И СтрокаТовары.ВесНетто <> 0 Тогда
			Объект.ВесНетто = ?(СтрокаТовары.Количество <> 0, Окр(СтрокаТовары.ВесНетто / СтрокаТовары.Количество, 3), 0);	
		КонецЕсли; 
		
		ФормаТовара.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;	
		ФормаТовара.Открыть();		
		
	ИначеЕсли ВыбранныйТипТовара = ТипОС Тогда 
		
		ФормаТовара = ПолучитьФорму("Справочник.ОсновныеСредства.ФормаОбъекта", , ДополнительныеПараметры.ФормаЭСФ);
		Объект = ?(ЭСФКлиентСервер.ЭтоОбычнаяФорма(ФормаТовара), ФормаТовара, ФормаТовара.Объект);
		
		Объект.Наименование = СтрокаТовары.ТоварНаименование;
		Объект.НаименованиеПолное = СтрокаТовары.ТоварНаименование;
		Объект.Комментарий = ТекстКомментария;
		
		ФормаТовара.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
		ФормаТовара.Открыть();		
		
	ИначеЕсли ВыбранныйТипТовара = ТипНМА Тогда 
		
		ФормаТовара = ПолучитьФорму("Справочник.НематериальныеАктивы.ФормаОбъекта", , ДополнительныеПараметры.ФормаЭСФ);
		Объект = ?(ЭСФКлиентСервер.ЭтоОбычнаяФорма(ФормаТовара), ФормаТовара, ФормаТовара.Объект);
		
		Объект.Наименование = СтрокаТовары.ТоварНаименование;
		Объект.НаименованиеПолное = СтрокаТовары.ТоварНаименование;
		Объект.ПрочиеСведения = ТекстКомментария;
		
		ФормаТовара.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
		ФормаТовара.Открыть();
		
	КонецЕсли;
	
КонецПроцедуры		

Процедура ЗаполнитьФормуДоговора(Знач ФормаЭСФ, Знач ИмяТаблицыКонтрагентов, Знач ИмяРеквизитаКонтрагента, ФормаДоговора, ДополнительныеПараметры = Неопределено)
	
	Объект = ?(ЭСФКлиентСервер.ЭтоОбычнаяФорма(ФормаДоговора), ФормаДоговора, ФормаДоговора.Объект);

	Объект.Наименование = ЭСФКлиентСервер.НаименованиеДоговора(ФормаЭСФ.Объект);
	Объект.Владелец = ФормаЭСФ.Объект[ИмяТаблицыКонтрагентов][0][ИмяРеквизитаКонтрагента];	
	Объект.ВалютаВзаиморасчетов = ФормаЭСФ.Объект.Валюта;
	Объект.ВедениеВзаиморасчетов = ПредопределенноеЗначение("Перечисление.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом");
	
	ТекстКомментария = ЭСФКлиентСервер.ТекстКомментарияСозданПоДаннымЭСФ(ФормаЭСФ.Объект.Ссылка);	
	Объект.Комментарий = ТекстКомментария;
	
	Объект.Организация = ФормаЭСФ.Объект.Организация;
	
	Если ФормаЭСФ.Объект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияЭСФ.Входящий") Тогда
		Объект.ВидДоговора = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком");
	Иначе
		Объект.ВидДоговора = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПокупателем");
	КонецЕсли;
	
	Объект.НомерДоговора = ФормаЭСФ.Объект.ДоговорПоставкиНомер;	
	Объект.ДатаДоговора = ФормаЭСФ.Объект.ДоговорПоставкиДата;
	Объект.УникальныйНомерВалютногоКонтроля = ФормаЭСФ.Объект.УникальныйНомерВалютногоКонтроля;
	
	ДоговорСовместнойДеятельности = ФормаЭСФ.Объект[ИмяТаблицыКонтрагентов][0].УчастникСовместнойДеятельности;
	УчастникСРП = ФормаЭСФ.Объект[ИмяТаблицыКонтрагентов][0].УчастникСРП;
	
	Если ДоговорСовместнойДеятельности ИЛИ УчастникСРП Тогда
		
		Объект.ДоговорСовместнойДеятельности = ДоговорСовместнойДеятельности;
		
		//++ НЕ ЭСФ	
		Объект.УчастникСРП = УчастникСРП;
		//-- НЕ ЭСФ	
		
		Объект.УчастникиСовместнойДеятельности.Очистить();
		Для Каждого СтрокаКонтрагент Из ФормаЭСФ.Объект[ИмяТаблицыКонтрагентов] Цикл
			
			СтрокаУчастникиСД = Объект.УчастникиСовместнойДеятельности.Добавить();
			СтрокаУчастникиСД.УчастникСовместнойДеятельности = СтрокаКонтрагент[ИмяРеквизитаКонтрагента];
			
		КонецЦикла;
		
	КонецЕсли;
	
	//++ НЕ ЭСФ	
	
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") 
		И ДополнительныеПараметры.Свойство("ПоверенныйОператор") Тогда
		
		Если ЗначениеЗаполнено(ДополнительныеПараметры.ПоверенныйОператор) Тогда
			Объект.ПоверенныйОператор = ДополнительныеПараметры.ПоверенныйОператор;	
		КонецЕсли;
		
	КонецЕсли;
	
	//-- НЕ ЭСФ	
	
КонецПроцедуры

Процедура ОткрытьФормуПечати(ТабличныйДокумент, МассивДокументов) Экспорт
	
	// Данная процедура не используется, т.к. в БК 3.0 она не нужна.
	
КонецПроцедуры

// Создает новый сторнирующий документ,
// заполняет его на основании счета-фактуры,
// открывает форму созданного сторнирующего документа.
//
// Параметры:
//  СчетФактура - ДокументОбъект.СчетФактураВыданный, ДокументОбъект.СчетФактураПолученный -
//   Счет-фактура, для которого необходимо создать сторнирующий документ.
//
Процедура ОткрытьФормуНовогоСторнирующегоДокумента(Знач СчетФактура) Экспорт
    
    ПараметрыФормы = Новый Структура("Основание", СчетФактура);
    ОткрытьФорму("Документ.Сторнирование.ФормаОбъекта", ПараметрыФормы);
    
КонецПроцедуры

// Открывает форму выбора выданного или полученного счета-фактуры.
// Используется в команде "Выбрать счет-фактуру", подменю "Отражение в учете".
// Обработка выбора выполняется в форме ЭСФ и не требует переопределения.
//
// Параметры:
//  ФормаЭСФ - УправляемаяФорма - Форма документа ЭСФ, 
//   из которой открывается форма выбора счета-фактуры.
//  ТипСчетаФактуры - Тип - Используется для определения того,
//   какую форму открыть: полученных или выданных счетов-фактур.
//
Процедура ОткрытьФормуВыбораСчетаФактуры(Знач ФормаЭСФ, Знач ТипСчетаФактуры) Экспорт
	
	// Сформировать отбор формы выбора.
	Отбор = Новый Структура;
	
	Отбор.Вставить("Организация", ФормаЭСФ.Объект.Организация);
	Если ЭСФКлиентСерверПереопределяемый.ИспользуютсяСтруктурныеПодразделения() Тогда
		Отбор.Вставить("СтруктурноеПодразделение", ФормаЭСФ.Объект.СтруктурноеПодразделение);
	КонецЕсли;
	
	Если ТипСчетаФактуры = ЭСФКлиентСерверПереопределяемый.ТипДокументСсылкаСчетФактураПолученный() Тогда
		Отбор.Вставить("ДатаВходящегоДокумента", ФормаЭСФ.Объект.Дата);
		Отбор.Вставить("НомерВходящегоДокумента", ФормаЭСФ.Объект.Номер);
	КонецЕсли;
	
	ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
	
	//Устанавливаем отбор по контрагенту
	Если ТипСчетаФактуры = ЭСФКлиентСерверПереопределяемый.ТипДокументСсылкаСчетФактураПолученный() Тогда
		Если ЗначениеЗаполнено(ФормаЭСФ.Объект.Поставщики) И ЗначениеЗаполнено(ФормаЭСФ.Объект.Поставщики[0].Поставщик) Тогда
			ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("Поставщик", ФормаЭСФ.Объект.Поставщики[0].Поставщик);
		КонецЕсли;	
	Иначе
		Если ЗначениеЗаполнено(ФормаЭСФ.Объект.Получатели) И ЗначениеЗаполнено(ФормаЭСФ.Объект.Получатели[0].Получатель)Тогда
			ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("Покупатель", ФормаЭСФ.Объект.Получатели[0].Получатель);
		КонецЕсли;
	КонецЕсли;
		
	// Получить имя формы выбора.
	Если ТипСчетаФактуры = ЭСФКлиентСерверПереопределяемый.ТипДокументСсылкаСчетФактураВыданный() Тогда
		ИмяФормыВыбора = "Документ.СчетФактураВыданный.ФормаВыбора";
	Иначе
		ИмяФормыВыбора = "Документ.СчетФактураПолученный.ФормаВыбора";
	КонецЕсли;
	
	// Открыть форму выбора с отбором.
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		Форма = ПолучитьФорму(ИмяФормыВыбора, , ФормаЭСФ);
		Для Каждого ЭлементОтбора Из Отбор Цикл
			Форма.ДокументСписок.Отбор[ЭлементОтбора.Ключ].Установить(ЭлементОтбора.Значение);
		КонецЦикла;
		//доп. настройки
		Для Каждого ЭлементОтбора Из ПользовательскиеНастройки.ДополнительныеСвойства Цикл
			Форма.ДокументСписок.Отбор[ЭлементОтбора.Ключ].Установить(ЭлементОтбора.Значение);
		КонецЦикла;
		Форма.Открыть();
	#Иначе
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Отбор", Отбор);
		ПараметрыФормы.Вставить("ПользовательскиеНастройки", ПользовательскиеНастройки);
		ОткрытьФорму(ИмяФормыВыбора, ПараметрыФормы, ФормаЭСФ);		
	#КонецЕсли
	
КонецПроцедуры

// Открывает форму выбора номера ГТД при нажатии на кнопку выбора
// в поле "Номер ГТД", таблицы "Товары", документа "ЭСФ".
Процедура ТоварыНомерГТДНачалоВыбора(Форма, Элемент, ДанныеВыбора, СтандартнаяОбработка) Экспорт
	
	ПараметрыВыбораНомераГТД = НомераГТДКлиент.ПараметрыВыбораНомераГТД(Форма.Объект, Форма.Элементы.Товары.ТекущиеДанные, "Товар");
	НомераГТДКлиент.ТоварыНомерГТДНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка, ПараметрыВыбораНомераГТД);
	
КонецПроцедуры

Процедура ОбработкаОповещенияЭСФ_ПроверятьОповещенияФоновогоЗадания(ЭтаФорма, Параметр) Экспорт

	Если Параметр = Неопределено
		ИЛИ НЕ ТипЗнч(Параметр) = Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	РезультатРаботыЗадания = Параметр;
	
	Если РезультатРаботыЗадания.ЗаданиеВыполнено Тогда
		
		АдресСообщенияПользователю = ЭСФВызовСервера.СообщенияФоновогоЗадания(РезультатРаботыЗадания.ИдентификаторЗадания);
		СообщенияПользователю = ПолучитьИзВременногоХранилища(АдресСообщенияПользователю);
		Если СообщенияПользователю <> Неопределено Тогда
			Для каждого СообщениеФоновогоЗадания Из СообщенияПользователю Цикл
				СообщениеФоновогоЗадания.Сообщить();
			КонецЦикла;
		КонецЕсли;
		
		ЭСФКлиент.ОповеститьФормы(ЭСФКлиентСервер.ИмяСобытияЗаписьЭСФ(), Параметр, ЭтаФорма);
		ДополнительныеОповещения = ?(Параметр.Свойство("ДополнительныеОповещения"), Параметр.ДополнительныеОповещения, Новый Структура);
		Для Каждого ДополнительноеОповещение Из ДополнительныеОповещения Цикл
			ЭСФКлиент.ОповеститьФормы(ДополнительноеОповещение.Ключ, Параметр, ЭтаФорма);
		КонецЦикла;			
	Иначе
	
		ПараметрыДлительнойОперации = Новый Структура;
		ПараметрыДлительнойОперации.Вставить("ИдентификаторЗадания");
		ПараметрыДлительнойОперации.Вставить("ВыводитьОкноОжидания", Истина);
		//ПараметрыДлительнойОперации.Вставить("ВыводитьПрогрессВыполнения", Истина);
		ПараметрыДлительнойОперации.Вставить("АдресРезультата", РезультатРаботыЗадания.АдресХранилища);
		ПараметрыДлительнойОперации.Вставить("ВыводитьСообщения", Истина);
		
		Если РезультатРаботыЗадания.Свойство("ТекстСообщения") Тогда
			ПараметрыДлительнойОперации.Вставить("ТекстСообщения", РезультатРаботыЗадания.ТекстСообщения);
		КонецЕсли;
		
		ПараметрыДлительнойОперации.ИдентификаторЗадания = РезультатРаботыЗадания.ИдентификаторЗадания;
		
		ДополнительныеОповещения = ?(Параметр.Свойство("ДополнительныеОповещения"), Параметр.ДополнительныеОповещения, Новый Структура);
		ПараметрыОповещения = Новый Структура();
		ПараметрыОповещения.Вставить("Источник", ЭтаФорма);
		ПараметрыОповещения.Вставить("ДополнительныеОповещения", ДополнительныеОповещения);
		ОписаниеОповещения = Новый ОписаниеОповещения("ОповеститьОЗавершениияДлительнойОперацииЭСФ", ЭСФКлиентПереопределяемый, ПараметрыОповещения);
		
		ОткрытьФорму("Обработка.ОбменЭСФ.Форма.ДлительнаяОперация", ПараметрыДлительнойОперации, ЭтаФорма,,,, ОписаниеОповещения);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОповеститьОЗавершениияДлительнойОперацииЭСФ(Результат, ДополнительныеПараметры) Экспорт
	
	Оповестить(ЭСФКлиентСервер.ИмяСобытияЗаписьЭСФ(), Результат, ДополнительныеПараметры.Источник);
	
	Для Каждого ДополнительноеОповещение Из ДополнительныеПараметры.ДополнительныеОповещения Цикл
		Оповестить(ДополнительноеОповещение.Ключ, Результат, ДополнительныеПараметры.Источник);
	КонецЦикла;
	
КонецПроцедуры

// Открывает форму обновления компоненты при обновлении на релиз типового решения
Процедура ОткрытьФормуОбновленияКриптобиблиотеки() Экспорт
	
	ОткрытьФорму("Обработка.ОбменЭСФ.Форма.ОбновлениеКомпонентыКриптографии");
	
КонецПроцедуры

Процедура ОткрытьФормуВыбораКлассификатора(СтруктураПараметров, Элемент, УдалятьПрефиксМакета = Истина) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора"		  , Истина);
	ПараметрыФормы.Вставить("ИмяМакета"			  , ?(УдалятьПрефиксМакета,(СтрЗаменить(СтруктураПараметров.ИмяМакета, "ПФ_MXL_", "")), СтруктураПараметров.ИмяМакета));
	ПараметрыФормы.Вставить("ИмяСекции"			  ,	СтруктураПараметров.ИмяСекции);
	ПараметрыФормы.Вставить("ПолучатьПолныеДанные", СтруктураПараметров.ПолучатьПолныеДанные);
	ПараметрыФормы.Вставить("ТекущийКодСтроки"	  , ?(НЕ ЗначениеЗаполнено(СтруктураПараметров.ТекущийКодСтроки), Неопределено, СокрЛП(СтруктураПараметров.ТекущийКодСтроки)));
	
	ОткрытьФорму("ОбщаяФорма.ФормаВыбораИзКлассификатора", ПараметрыФормы, Элемент, Истина,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

Процедура УстановитьПредставлениеСпособаОбменаПриПолученииДанных(Знач ЭтоСчетФактураВыданный, Знач СписокСчетовФактур, ОформленияСтрок) Экспорт
	
	ИмяКолонкиСпособОбмена = ?(ЭтоСчетФактураВыданный, "СпособВыставления", "СпособПолучения");
	ВидимостьКолонкиСпособОбмена = СписокСчетовФактур.Колонки[ИмяКолонкиСпособОбмена].Видимость;
	
	Если ВидимостьКолонкиСпособОбмена Тогда	
		
		Для Каждого Строка Из ОформленияСтрок Цикл
			
			Если Строка.ДанныеСтроки[ИмяКолонкиСпособОбмена] = ПредопределенноеЗначение("Перечисление.СпособыОбменаДокументами.Бумажно") Тогда
				Строка.Ячейки[ИмяКолонкиСпособОбмена].Текст = НСтр("ru = 'Бумажно'");
			ИначеЕсли Строка.ДанныеСтроки[ИмяКолонкиСпособОбмена] = ПредопределенноеЗначение("Перечисление.СпособыОбменаДокументами.Электронно") Тогда 
				Строка.Ячейки[ИмяКолонкиСпособОбмена].Текст = НСтр("ru = 'Электронно'");
			Иначе
				Строка.Ячейки[ИмяКолонкиСпособОбмена].Текст = НСтр("ru = ''");
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры	

Функция ИмяДокументаПоступленияТоваровУслуг() Экспорт 
	Возврат "Поступление товаров и услуг";
КонецФункции	

Процедура УстановитьОграничениеТипаЕдиницыИзмерения(Форма, СтрокаТабличнойЧасти) Экспорт
	
КонецПроцедуры

Функция ПолучитьТипФормаКлиентскогоПриложения() Экспорт
	Возврат Тип("УправляемаяФорма");
КонецФункции