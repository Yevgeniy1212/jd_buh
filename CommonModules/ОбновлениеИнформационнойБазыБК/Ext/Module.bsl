////////////////////////////////////////////////////////////////////////////////
// Обновление информационной базы конфигурации БухгалтерияДляКазахстана.
//  
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

////////////////////////////////////////////////////////////////////////////////
// Сведения о библиотеке (или конфигурации).

// См. описание в общем модуле ОбновлениеИнформационнойБазыБСП.
Процедура ПриДобавленииПодсистемы(Описание) Экспорт
	
	Описание.Имя = Метаданные.Имя;
	Описание.Версия = Метаданные.Версия;
	Описание.ИдентификаторИнтернетПоддержки = ИнтернетПоддержкаПользователейБК.ИмяПрограммыДляИдентификацииВСервисахИнтернетПоддержки();
	
	Описание.ТребуемыеПодсистемы.Добавить("СтандартныеПодсистемы");
	Описание.ТребуемыеПодсистемы.Добавить("БиблиотекаТехнологииСервиса");
	Описание.ТребуемыеПодсистемы.Добавить("БиблиотекаЭлектронныхДокументов");
	Описание.ТребуемыеПодсистемы.Добавить("БиблиотекаПодключаемогоОборудования");

	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики обновления информационной базы.

// См. описание в общем модуле ОбновлениеИнформационнойБазыБСП.
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
		
		// Код обработчика обновления должен быть рассчитан на неоднократное выполнение,
	// чтобы его повторное выполнение не приводило, например, к дублированию данных
	// в информационной базе.
	
	// Порядок вызова обработчиков обновления в пределах одной версии является случайным, 
	// т. е. нельзя ставить в зависимость работоспособность одного обработчика обновления 
	// от выполнения другого обработчика. Если подобные зависимости появляются, 
	// то такие обработчики необходимо объединять в один.
	
	Обработчик = Обработчики.Добавить();
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.ОбщиеДанные = Истина;
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБК.ПервыйЗапускОбщиеДанные";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБК.ПервыйЗапускРазделенныеДанные";
	
	// Обработчики, выполняемые при каждом обновлении ИБ.
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "*";
	Обработчик.НачальноеЗаполнение = Истина; // В противном случае процедура не запустится при переходе с 2БК на 3БК
	Обработчик.РежимВыполнения = "Оперативно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБК.ДобавитьРучныеОбработчикиОбновленияИБ";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "*";
	Обработчик.НачальноеЗаполнение = Истина; // В противном случае процедура не запустится при переходе с 2БК на 3БК
	Обработчик.РежимВыполнения = "Оперативно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБК.ОбновитьРегламентированныеОтчеты";
	Обработчик.ОбщиеДанные = Истина;
	
	// Обработчики, выполняемые при переходе на версию 3.0.1.1
		
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.1.1";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБК.УстановитьСвязьМеждуПользователемИПользователемИБ";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.1.1";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБК.ДобавитьРольАдминистраторСистемы";
	
	Обработчик = Обработчики.Добавить();

	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура = "ПланыВидовХарактеристик.НастройкиПользователей.ЗаполнитьИдентификаторыНастроекПользователя";

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.1.1";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБК.ПеренестиФайлыИзХранилищаДополнительнойИнформации";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.1.1";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура = "Справочники.Организации.ПеренестиФайлЛоготипаВПрисоединенныеФайлы";
	Обработчик.РежимВыполнения = "Отложенно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.1.1";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБК.ЗаполнитьДанныеППВиПОПДС";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.1.1";
	Обработчик.Процедура = "ОбменДаннымиОбновлениеСПредыдущейРедакции.ВыполнитьПереносПлановОбменаБСП";
	Обработчик.НачальноеЗаполнение = Истина; // В противном случае процедура не запустится при переходе с 2БК на 3БК
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.1.1";
	Обработчик.Процедура = "ОбменДаннымиОбновлениеСПредыдущейРедакции.ВыполнитьПереносПлановОбменаУниверсальногоОбмена";
	Обработчик.НачальноеЗаполнение = Истина; // В противном случае процедура не запустится при переходе с 2БК на 3БК
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия    = "3.0.1.1";
	Обработчик.Процедура = "ОбновлениеСПредыдущейРедакции.ОбновитьРИБПриПереходе20На30";
	Обработчик.НачальноеЗаполнение = Истина; // В противном случае процедура не запустится при переходе с 2БК на 3БК
	
	// Обработчики, выполняемые при переходе на версию 3.0.1.2
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия    = "3.0.1.2";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБК.ВыполнитьНачальнуюНастройкуКлиентскогоПриложения";
	Обработчик.НачальноеЗаполнение = Истина; // В противном случае процедура не запустится при переходе с 2БК на 3БК

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия    = "3.0.1.2";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБК.ОбновитьРолиПользователей_3_0_1_2";
	Обработчик.НачальноеЗаполнение = Истина; // В противном случае процедура не запустится при переходе с 2БК на 3БК
	
	// Обработчики, выполняемые при переходе на версию 3.0.1.3
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.1.3";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБК.УстановитьВозможностьВызоваОнлайнПоддержки";
	Обработчик.НачальноеЗаполнение = Истина; // В противном случае процедура не запустится при переходе с 2БК на 3БК
	
	// Обработчики, выполняемые при переходе на версию 3.0.1.4
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.1.4";
	Обработчик.ОбщиеДанные = Истина;	
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБК.УстановитьМЗПМРП2015Год";
	Обработчик.НачальноеЗаполнение = Истина; // В противном случае процедура не запустится при переходе с 2БК на 3БК
	Обработчик.ОбщиеДанные         = Истина;

	
	// Обработчики, выполняемые при переходе на версию 3.0.2.1
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.2.1";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБК.ПереименоватьРегламентированныйОтчетФорма1ТМесячная";
	Обработчик.НачальноеЗаполнение = Истина; // В противном случае процедура не запустится при переходе с 2БК на 3БК
	Обработчик.ОбщиеДанные = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.2.7";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБК.ЗаполнитьРеквизитЗагружатьКурсИзИнтернетаСправочникаВалюты";
	Обработчик.НачальноеЗаполнение = Истина; // В противном случае процедура не запустится при переходе с 2БК на 3БК
	
	// Обработчики, выполняемые при переходе на версию 3.0.4.4
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.4.4";
	Обработчик.Процедура = "РегистрыСведений.ПрефиксыИнформационныхБаз.ДобавитьЗначениеКонстантыПрефиксУзлаРаспределеннойИнформационнойБазы";
	Обработчик.НачальноеЗаполнение = Истина; // В противном случае процедура не запустится при переходе с 2БК на 3БК
	
	// Обработчики, выполняемые при переходе на версию 3.0.5.1
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.5.1";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБК.ЗаполнитьРеквизитыПредопределенногоЭлементаКлиентБанк";
	Обработчик.НачальноеЗаполнение = Истина; // В противном случае процедура не запустится при переходе с 2БК на 3БК
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.5.1";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБК.ЗаполнитьРеквизитыПредопределенногоЭлементаВыгрузкаДанныхМТ102";
	Обработчик.НачальноеЗаполнение = Истина; // В противном случае процедура не запустится при переходе с 2БК на 3БК
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.5.1";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБК.ЗаполнитьСправочникКорреспонденций";
	Обработчик.НачальноеЗаполнение = Истина; // В противном случае процедура не запустится при переходе с 2БК на 3БК
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.5.1";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБК.ЗаполнитьРеквизитыПредопределенногоВидаРасчетаИЛКоэффициентомПоМРП";
	Обработчик.НачальноеЗаполнение = Истина; // В противном случае процедура не запустится при переходе с 2БК на 3БК
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.5.7";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБК.ЗаполнитьРеквизитыЭлементаСлужебныйТелефонПользователяСправочникаВидыКонтактнойИнформации";
	Обработчик.НачальноеЗаполнение = Истина; // В противном случае процедура не запустится при переходе с 2БК на 3БК
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.6.2";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБК.ЗаполнитьПериодВРегистреСведенийОКорректировкиСтоимостиТоваров";
	Обработчик.НачальноеЗаполнение = Истина;

	// В 3.0.7.4 изменился синоним документа "ОперацияБух",
	// он использовался в справочнике КорреспонденцииСчетов,
	// поэтому необходимо обновить данный справочник.
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.7.4";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБК.ЗаполнитьСправочникКорреспонденций";
	Обработчик.НачальноеЗаполнение = Истина; // В противном случае процедура не запустится при переходе с 2БК на 3БК
	
	//Заполнения нового реквизита "СпособЗаполнения", значением "Вручную".
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.7.4";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБК.ЗаполнитьСпособЗаполненияОперацииБух";
	Обработчик.НачальноеЗаполнение = Истина; 

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.7.8";
	Обработчик.ОбщиеДанные = Истина;
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБК.УстановитьМЗПМРП2016Год";
	Обработчик.НачальноеЗаполнение = Истина; // В противном случае процедура не запустится при переходе с 2БК на 3БК
	Обработчик.ОбщиеДанные         = Истина;

	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.8.3";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБК.ЗаполнитьСтатьюДДСДляПлатежныхОрдеров";
	Обработчик.НачальноеЗаполнение = Истина; // В противном случае процедура не запустится при переходе с 2БК на 3БК 
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.8.6";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБК.ЗаполнитьЕдиницуИзмеренияНалоговойБазыПараметровРасчетаТранспортногоНалога";
	Обработчик.НачальноеЗаполнение = Истина; // В противном случае процедура не запустится при переходе с 2БК на 3БК
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.9.2";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБК.ЗаполнитьПериодВРегистреСчетаФактурыПрекратившиеДействие";
	Обработчик.НачальноеЗаполнение = Истина; // В противном случае процедура не запустится при переходе с 2БК на 3БК

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.9.7";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБК.ОбновитьДокументыГТДИмпорт";
	Обработчик.НачальноеЗаполнение = Истина; // В противном случае процедура не запустится при переходе с 2БК на 3БК
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.9.13";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБК.ЗаполнитьНаименованиеСправочникНомераГТД";
	Обработчик.НачальноеЗаполнение = Истина; // В противном случае процедура не запустится при переходе с 2БК на 3БК
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.10.5";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБК.ДобавитьПользователямРолиДляРаботыСИнтернетПоддержкой";
	Обработчик.НачальноеЗаполнение = Истина; // В противном случае процедура не запустится при переходе с 2БК на 3БК
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.10.5";
	Обработчик.Процедура = "Документы.ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов.ЗаполнитьСтрануПроисхожденияВТоварахЗаявленияОВвозе";
	Обработчик.НачальноеЗаполнение = Истина; // В противном случае процедура не запустится при переходе с 2БК на 3БК

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.10.10";
	Обработчик.Процедура = "МенеджерОборудованияВызовСервераПереопределяемый.ОбновитьПоставляемыеДрайвера";
	Обработчик.Комментарий = НСтр("ru = 'Выполняет обновление поставляемых драйверов.'");

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.10.10";
	Обработчик.Процедура = "Справочники.БанковскиеСчета.ВключитьИспользованиеОбменаСБанком";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.НачальноеЗаполнение = Истина; // В противном случае процедура не запустится при переходе с 2БК на 3БК
	
	//Обработчик = Обработчики.Добавить();
	//Обработчик.Версия = "3.0.11.1";
	//Обработчик.Процедура = "ОбновлениеИнформационнойБазыБК.ЗаполнитьСоответствиеСчетаБУ1422";
	//Обработчик.НачальноеЗаполнение = Истина; // В противном случае процедура не запустится при переходе с 2БК на 3БК
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.11.1";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБК.УстановитьПараметрыДляГруппыСчетовНДСБУ";
	Обработчик.НачальноеЗаполнение = Истина; // В противном случае процедура не запустится при переходе с 2БК на 3БК

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.11.1";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБК.УстановитьПараметрыДляГруппыСчетовНДСНУ";
	Обработчик.НачальноеЗаполнение = Истина; // В противном случае процедура не запустится при переходе с 2БК на 3БК
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.11.1";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБК.УстановитьМЗПМРП2017Год";
	Обработчик.НачальноеЗаполнение = Истина; // В противном случае процедура не запустится при переходе с 2БК на 3БК
	Обработчик.ОбщиеДанные         = Истина;

	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.11.12";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБК.ОтключитьИспользованиеВнешнегоКлассификатораКодаТНВЭД";
	Обработчик.НачальноеЗаполнение = Истина; // В противном случае процедура не запустится при переходе с 2БК на 3БК
  		
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.12.3";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБК.УстановитьПараметрыДляГруппыСчетовКраткосрочныеВознагражденияБУ";
	Обработчик.НачальноеЗаполнение = Истина; // В противном случае процедура не запустится при переходе с 2БК на 3БК
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.12.3";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБК.ПрименитьПараметрыСубконтоРаботникиОрганизацииДляКраткосрочныеВознагражденияБУ";
	Обработчик.НачальноеЗаполнение = Истина; // В противном случае процедура не запустится при переходе с 2БК на 3БК
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.12.3";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБК.ЗаполнитьСоответствиеСчетаБУ1272";
	Обработчик.НачальноеЗаполнение = Истина; // В противном случае процедура не запустится при переходе с 2БК на 3БК
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.12.15";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБК.ДобавитьСведенияОСтавкеРефинансированияНБ20170401";
	Обработчик.НачальноеЗаполнение = Истина; 
	Обработчик.ОбщиеДанные         = Истина;

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.13.1";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБК.ПеренестиСвойстваИКатегорииОбъектов";
	Обработчик.НачальноеЗаполнение = Истина; // В противном случае процедура не запусти   	
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.13.2";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБК.ПереносПризводственногоРеглКалендаряВКалендарныеГрафики";
	Обработчик.НачальноеЗаполнение = Истина; // В противном случае процедура не запусти 
	                      	
		
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.13.2";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБК.ДобавитьПользователямРолиДляРаботыСПроизводственнымиКалендарями";
	Обработчик.НачальноеЗаполнение = Истина; // В противном случае процедура не запусти  	
	
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.13.7";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБК.ЗаполнитьСоответствиеСчетаБУ1423";
	Обработчик.НачальноеЗаполнение = Истина; // В противном случае процедура не запустится при переходе с 2БК на 3БК
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.13.7";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБК.ОбновитьКодыСправочников";
	Обработчик.НачальноеЗаполнение = Истина; // В противном случае процедура не запустится при переходе с 2БК на 3БК

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.13.7";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБК.ОбновитьКодыПланаВидовХарактеристик";
	Обработчик.НачальноеЗаполнение = Истина; // В противном случае процедура не запустится при переходе с 2БК на 3БК
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.13.7";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБК.ЗаполнитьРеквизитыНалогНаДобавленнуюСтоимостьЗаНерезидента";
	Обработчик.НачальноеЗаполнение = Истина; // В противном случае процедура не запустится при переходе с 2БК на 3БК
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.13.7";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБК.ЗаполнитьВидОперацииПоступленияНМА";
	Обработчик.НачальноеЗаполнение = Истина; // В противном случае процедура не запустится при переходе с 2БК на 3БК
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.13.11";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБК.СкорректироватьДвиженияРазовыеУдержания";
	Обработчик.НачальноеЗаполнение = Ложь; // Не требуется запуск при переходе с 2БК на 3БК
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.13.21";
	Обработчик.Процедура           = "ПланыОбмена.Полный.ЗарегистрироватьОбъектыПодсистемыСвойства";
	Обработчик.НачальноеЗаполнение = Ложь; // Не требуется запуск при переходе с 2БК на 3БК
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.13.21";
	Обработчик.Процедура           = "ПланыОбмена.ПоОрганизации.ЗарегистрироватьОбъектыПодсистемыСвойства";
	Обработчик.НачальноеЗаполнение = Ложь; // Не требуется запуск при переходе с 2БК на 3БК
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.13.21";
	Обработчик.Процедура           = "ОбновлениеИнформационнойБазыБК.ИзменитьОбъектыСвойствВУзлеРИБ";
	Обработчик.НачальноеЗаполнение = Ложь; // Не требуется запуск при переходе с 2БК на 3БК
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.14.1";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБК.ВыполнитьНастройкиПоСоциальномуМедицинскомуСтрахованию";
	Обработчик.НачальноеЗаполнение = Истина; // Не требуется запуск при переходе с 2БК на 3БК

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.14.1";
	Обработчик.Процедура = "Документы.СОПеречислениеВФонды.ЗаполнитьВидОперацииПриОбновлении";
	Обработчик.НачальноеЗаполнение = Истина; // Не требуется запуск при переходе с 2БК на 3БК
	Обработчик.РежимВыполнения = "Отложенно";

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.14.1";
	Обработчик.Процедура = "Документы.СОВозвратОтчислений.ЗаполнитьВидОперацииПриОбновлении";
	Обработчик.НачальноеЗаполнение = Истина; // Не требуется запуск при переходе с 2БК на 3БК
	Обработчик.РежимВыполнения = "Отложенно";

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.14.1";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБК.ЗаполнитьСоответствиеСчетаБУ1422";
	Обработчик.НачальноеЗаполнение = Истина; // В противном случае процедура не запустится при переходе с 2БК на 3БК
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.14.6";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБК.ДобавитьСведенияОСтавкеРефинансированияНБ20170606";
	Обработчик.НачальноеЗаполнение = Истина; 
	Обработчик.ОбщиеДанные         = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия    = "3.0.14.6";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБК.ЗаменаСсылокНаНовыеСчета1422";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.РежимВыполнения     = "Отложенно";
	Обработчик.Идентификатор       = Новый УникальныйИдентификатор("539bd090-f0c4-4195-85f8-170f4d934da0");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия    = "3.0.14.16";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБК.УдалениеРегламентированнойФормы210";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.ОбщиеДанные         = Истина;

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.14.21";
	Обработчик.Процедура = "Справочники.КорреспонденцииСчетов.ОбновитьОперацииКорреспонденцииСчетов";
	Обработчик.НачальноеЗаполнение = Истина; // В противном случае процедура не запустится при переходе с 2БК на 3БК
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.14.22";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБК.ЗаменитьВнешнююОбработкуВыгрузкаДанныхМТ102НаВстроенную";
	Обработчик.НачальноеЗаполнение = Истина; // В противном случае процедура не запустится при переходе с 2БК на 3БК
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.15.9";
	Обработчик.Процедура           = "Справочники.НомераГТД.ЗаполнитьПризнакПроисхождения";
	Обработчик.НачальноеЗаполнение = Ложь; // Не требуется запуск при переходе с 2БК на 3БК
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.15.9";
	Обработчик.Процедура           = "Справочники.НомераГТД.ЗаполнитьНомерСтрокиГТД";
	Обработчик.НачальноеЗаполнение = Ложь; // Не требуется запуск при переходе с 2БК на 3БК
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.15.9";
	Обработчик.Процедура           = "РегистрыСведений.ТоварыСПониженнойСтавкойПошлин.ОбновитьРегистрТоварыСПониженнойСтавкойПошлин";
	Обработчик.НачальноеЗаполнение = Ложь; // Не требуется запуск при переходе с 2БК на 3БК
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.15.11";
	Обработчик.Процедура           = "ОбновлениеИнформационнойБазыБК.УстановитьКонстантыОграниченийДоступНаУровнеЗаписей";
	Обработчик.НачальноеЗаполнение = Истина; // Не требуется запуск при переходе с 2БК на 3БК
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.15.11";
	Обработчик.Процедура           = "ОбновлениеИнформационнойБазыБК.ЗаменаРолиДоступаПользователь";
	Обработчик.НачальноеЗаполнение = Истина; // Не требуется запуск при переходе с 2БК на 3БК
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.15.11";
	Обработчик.Процедура           = "ОбновлениеИнформационнойБазыБК.ЗаполнениеТабличнойЧастиФизическиеЛица";
	Обработчик.НачальноеЗаполнение = Истина; // Не требуется запуск при переходе с 2БК на 3БК
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.15.11";
	Обработчик.Процедура           = "ОбновлениеИнформационнойБазыБК.ЗаполнитьПрофилиИГруппыДоступаПоУмолчанию";
	Обработчик.НачальноеЗаполнение = Истина; // Не требуется запуск при переходе с 2БК на 3БК
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.15.11";
	Обработчик.Процедура           = "ОбновлениеИнформационнойБазыБК.ПереносОграничейДоступа";
	Обработчик.НачальноеЗаполнение = Истина; // Не требуется запуск при переходе с 2БК на 3БК
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.15.11";
	Обработчик.Процедура           = "ОбновлениеИнформационнойБазыБК.ОчиститьРС_ОбъектыДоступаДокументов";
	Обработчик.НачальноеЗаполнение = Истина; // Не требуется запуск при переходе с 2БК на 3БК
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.15.11";
	Обработчик.Процедура           = "ОбновлениеИнформационнойБазыБК.ОбновитьПорядокСчетна3210H";
	Обработчик.НачальноеЗаполнение = Ложь; // Не требуется запуск при переходе с 2БК на 3БК
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.15.15";
	Обработчик.Процедура           = "ОбновлениеИнформационнойБазыБК.ДобавитьСведенияОСтавкеРефинансированияНБ20170822";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.ОбщиеДанные         = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.15.22";
	Обработчик.Процедура           = "ОбновлениеИнформационнойБазыБК.ОбновитьПрофилиДоступаПоУмолчанию";
	Обработчик.НачальноеЗаполнение = Истина; //в БК профили заполняться при обновлении на релиз 3.0.15.21
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.15.22";
	Обработчик.Процедура           = "ОбновлениеИнформационнойБазыБК.ЗаменитьВнешнююОбработкуОбменЭСФНаВстроенную";
	Обработчик.НачальноеЗаполнение = Истина; // В противном случае процедура не запустится при переходе с 2БК на 3БК
	Обработчик.ОбщиеДанные     	   = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.15.22";
	Обработчик.Процедура           = "ЭСФСервер.ЗаполнитьДатыНачалаСинхронизации";
	Обработчик.НачальноеЗаполнение = Истина; //в БК профили заполняться при обновлении на релиз 3.0.15.21
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.16.1";
	Обработчик.Процедура           = "ОбновлениеИнформационнойБазыБК.ЗаполнениеРегистраСведенийЗначениеГруппДоступаПоУмолчанию";
	Обработчик.НачальноеЗаполнение = Истина; //в БК профили заполняться при обновлении на релиз 3.0.15.21
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.17.1";
	Обработчик.Процедура           = "ОбновлениеИнформационнойБазыБК.ЗаменитьВнешнююОбработкуОбменЭСФНаВстроенную";
	Обработчик.НачальноеЗаполнение = Истина; // В противном случае процедура не запустится при переходе с 2БК на 3БК
	Обработчик.ОбщиеДанные     	   = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.17.2";
	Обработчик.Процедура           = "ОбновлениеИнформационнойБазыБК.ОбновитьНастройкуКлиентскогоПриложения";
	Обработчик.НачальноеЗаполнение = Истина; 
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.17.6";
	Обработчик.Процедура           = "ОбновлениеИнформационнойБазыБК.ОбновитьПрофилиДоступаПоУмолчанию";
	Обработчик.НачальноеЗаполнение = Ложь; //в БК профили заполняться при обновлении на релиз 3.0.15.21
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.17.6";
	Обработчик.Процедура           = "ЭСФСерверПереопределяемый.ЗаполнитьКодыЭСФЕдиницИзмерения";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.18.1";
	Обработчик.Процедура           = "ОбновлениеИнформационнойБазыБК.ДобавитьСведенияОСтавкеРефинансированияНБДляРасчетаПени";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.ОбщиеДанные         = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.18.1";
	Обработчик.Процедура           = "ОбновлениеИнформационнойБазыБК.ДобавитьСведенияОСтавокНалоговВзносовОтчислений";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия 			   = "3.0.18.1";
	Обработчик.Процедура 		   = "ОбновлениеИнформационнойБазыБК.УстановитьМЗПМРП2018Год";
	Обработчик.НачальноеЗаполнение = Истина; // В противном случае процедура не запустится при переходе с 2БК на 3БК
	Обработчик.ОбщиеДанные         = Истина;


	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.18.5";
	Обработчик.Процедура           = "Справочники.ВычетыИПН.ЗаполнитьПредопределенныеЭлементы";
	Обработчик.НачальноеЗаполнение = Истина; // В противном случае процедура не запустится при переходе с 2БК на 3БК
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.18.5";
	Обработчик.Процедура           = "ОбновлениеИнформационнойБазыБК.ОбновитьИспользованиеНаборовСвойствВычетыИПН";
	Обработчик.НачальноеЗаполнение = Ложь; //в БК 2.0 обновяться в релизе 3.0.13
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия 			   = "3.0.18.5";
	Обработчик.Процедура 		   = "ОбновлениеИнформационнойБазыБК.ОбновитьНастройкиОтчетовЗП";
	Обработчик.НачальноеЗаполнение = Ложь; 	
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.18.5";
	Обработчик.Процедура           = "ОбновлениеИнформационнойБазыБК.ОбработкаНастроекОтчетов3018";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.18.6";
	Обработчик.Процедура           = "РегистрыСведений.СведенияОСтавкахОСМС.ЗаполнитьСведенияОСтавкахОСМС";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.18.6";
	Обработчик.Процедура           = "ОбновлениеИнформационнойБазыБК.ОбновитьКалендарныеГрафики2018";
	Обработчик.РежимВыполнения     = "Монопольно";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.18.12";
	Обработчик.Процедура           = "ОбновлениеИнформационнойБазыБК.ДобавитьСведенияОСтавкеРефинансированияНБ20180116";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.ОбщиеДанные         = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.19.1";
	Обработчик.Процедура           = "МенеджерОборудованияВызовСервераПереопределяемый.ОбновлениеБиблиотеки";
	Обработчик.НачальноеЗаполнение = Истина;// В противном случае процедура не запустится при переходе с 2БК на 3БК
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия 			   = "3.0.19.1";
	Обработчик.Процедура 			= "ОбновлениеИнформационнойБазыБК.ЗаполнитьШаблоныШтрихкодов";
	Обработчик.НачальноеЗаполнение = Истина;// В противном случае процедура не запустится при переходе с 2БК на 3БК
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия 			   = "3.0.19.1";
	Обработчик.Процедура 			= "ОбновлениеИнформационнойБазыБК.ШтрихкодУстанавливаетсяВГлавномУзлеРИБ";
	Обработчик.НачальноеЗаполнение = Истина;// В противном случае процедура не запустится при переходе с 2БК на 3БК
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия 			   = "3.0.19.1";
	Обработчик.Процедура 			= "ПланыВидовХарактеристик.НастройкиПользователей.ЗаполнитьИдентификаторыНастроекПользователя";
	Обработчик.НачальноеЗаполнение = Истина;// В противном случае процедура не запустится при переходе с 2БК на 3БК
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия 			   = "3.0.19.1";
	Обработчик.Процедура 			= "ОбновлениеИнформационнойБазыБК.ЗаполнитьОсновнойШтрихкодВНастройкахПользователей";
	Обработчик.НачальноеЗаполнение = Истина;// В противном случае процедура не запустится при переходе с 2БК на 3БК
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.19.1";
	Обработчик.Процедура           = "ОбновлениеИнформационнойБазыБК.ОбновитьПрофилиДоступаПоУмолчанию";
	Обработчик.НачальноеЗаполнение = Ложь; //в БК профили заполняться при обновлении на релиз 3.0.15
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.19.1";
	Обработчик.Процедура           = "ОбновлениеИнформационнойБазыБК.ОбновитьНастройкиОтчетаРегистрНалоговогоУчетаПоИПНиСН";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.20.1";
	Обработчик.Процедура           = "ОбновлениеИнформационнойБазыБК.ЗаменитьВнешнююОбработкуОбменЭСФНаВстроенную";
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.ОбщиеДанные     	   = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.20.1";
	Обработчик.Процедура           = "ОбновлениеИнформационнойБазыБК.ДобавитьСведенияОСтавкеРефинансированияНБ20180306";
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.ОбщиеДанные         = Истина;

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.20.2";
	Обработчик.Процедура           = "ОбновлениеИнформационнойБазыБК.ОбновитьПрофилиДоступаПоУмолчанию";
	Обработчик.НачальноеЗаполнение = Ложь; //в БК профили заполняться при обновлении на релиз 3.0.15
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.20.3";
	Обработчик.Процедура           = "ОбновлениеИнформационнойБазыБК.ОтключитьИспользованиеВнешнегоКлассификатораКодыСтрокНалоговыхДеклараций";
	Обработчик.НачальноеЗаполнение = Истина; // В противном случае процедура не запустится при переходе с 2БК на 3БК
  		
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.20.3";
	Обработчик.Процедура           = "ОбновлениеИнформационнойБазыБК.ОбновитьКодыСтрокДекларацииПоНДС";
	Обработчик.НачальноеЗаполнение = Истина; // В противном случае процедура не запустится при переходе с 2БК на 3БК 
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.21.1";
	Обработчик.Процедура           = "ОбновлениеИнформационнойБазыБК.ОбновитьДокументыЭСФОтложенно";
	Обработчик.НачальноеЗаполнение = Истина; // В противном случае процедура не запустится при переходе с 2БК на 3БК 
	Обработчик.Комментарий = 
		НСтр("ru = 'Для документов электронных-счетов фактур, не помеченных на удаление,  устанавливается признак ""Проведен"".'");
		
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("255fa8b2-259f-4dad-8ebe-98a2a073c949");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.21.2";
	Обработчик.Процедура           = "ОбновлениеИнформационнойБазыБК.ДобавитьСведенияОСтавкеРефинансированияНБ20180605";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.ОбщиеДанные         = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.22.1";
	Обработчик.Процедура           = "ОбновлениеИнформационнойБазыБК.ЗаполнитьСписокРегламентированныхОтчетов";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.ОбщиеДанные         = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.23.2";
	Обработчик.Процедура           = "ОбновлениеИнформационнойБазыБК.УстановитьПометкуУдаленияПредопределенногоЭлементаОбменЭСФ";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.23.2";
	Обработчик.Процедура           = "ОбновлениеИнформационнойБазыБК.ДобавитьСведенияОСтавкеРефинансированияНБ20181016";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.ОбщиеДанные         = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия 			   = "3.0.24.1";
	Обработчик.Процедура 		   = "ОбновлениеИнформационнойБазыБК.УстановитьМЗПМРП2019Год";
	Обработчик.ОбщиеДанные         = Истина;
	Обработчик.НачальноеЗаполнение = Истина; // В противном случае процедура не запустится при переходе с 2БК на 3БК
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.24.1";
	Обработчик.Процедура           = "ПланыСчетов.Типовой.ОбработкаНастроекПланаСчетовТиповой2019";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Комментарий = 
		НСтр("ru = 'Заполняет настройки новых счетов в плане счетов бухгалтерского учета'");

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.24.1";
	Обработчик.Процедура           = "ПланыСчетов.Налоговый.ОбработкаНастроекПланаСчетовНалоговый2019";
	Обработчик.НачальноеЗаполнение = Истина;	
	Обработчик.Комментарий = 
		НСтр("ru = 'Заполняет настройки новых счетов в плане счетов налогового учета'");
		
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия			   = "3.0.25.1";
	Обработчик.Процедура 		   = "РегистрыСведений.РазмерыВычетовИПН.НачальноеЗаполнение";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия			   = "3.0.25.1";
	Обработчик.Процедура 		   = "Справочники.ВычетыИПН.ОбновитьСправочникВычетыИПНИПН2019";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия			   = "3.0.25.1";
	Обработчик.Процедура 		   = "ОбновлениеИнформационнойБазыБК.ЗаменитьВнешнююОбработкуОбменЭСФНаВстроенную";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.25.1";
	Обработчик.Процедура           = "ОбновлениеИнформационнойБазыБК.КорректировкаСтавокБезНДСнеРК";
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.Комментарий         = СтрШаблон(НСтр("ru = 'В справочнике ""%1"" для ставок с признаком ""без НДС - не РК"" убирает установленный признак ""%2""'"),
		Метаданные.Справочники.СтавкиНДС.Представление(),
		Метаданные.Справочники.СтавкиНДС.Реквизиты.ДляОсвобожденногоОборота.Представление());

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.26.1";
	Обработчик.Процедура           = "ОбновлениеИнформационнойБазыБК.ОбновитьКалендарныеГрафики2019";
	Обработчик.РежимВыполнения     = "Монопольно";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.26.1";
	Обработчик.Процедура           = "ОбновлениеИнформационнойБазыБК.РегламентированныйОтчет300ФормаИзмененитьИмяСохраненногоОтчета";
	Обработчик.РежимВыполнения     = "Монопольно";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.27.1";
	Обработчик.Процедура           = "ОбновлениеИнформационнойБазыБК.ЗаполнитьРеквизитыКлючевыхОпераций";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.27.1";
	Обработчик.Процедура           = "Справочники.НематериальныеАктивы.ВключитьИспользованиеДополнительныхРеквизитовИСведений";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.27.1";
	Обработчик.Процедура           = "Справочники.ОбъектыСтроительства.ВключитьИспользованиеДополнительныхРеквизитовИСведений";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.27.1";
	Обработчик.Процедура           = "ОбновлениеИнформационнойБазыБК.ДобавитьСведенияОСтавкеРефинансированияНБ20190416";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.ОбщиеДанные         = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.27.1";
	Обработчик.Процедура           = "ОбновлениеИнформационнойБазыБК.ОбновитьПодключаемоеОборудованиеWebkassa";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия			   = "3.0.29.1";
	Обработчик.Процедура 		   = "ОбновлениеИнформационнойБазыБК.ЗаменитьВнешнююОбработкуОбменЭСФНаВстроенную";
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.ОбщиеДанные     	   = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.29.1";
	Обработчик.Процедура           = "Документы.ГТДИмпорт.ЗаполнитьТаможенныйСборТаможеннуюСтоимостьПриОбновлении";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.РежимВыполнения     = "Отложенно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия			   = "3.0.30.1";
	Обработчик.Процедура 		   = "ОбновлениеИнформационнойБазыБК.ЗаменитьВнешнююОбработкуОбменЭСФНаВстроенную";
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.ОбщиеДанные     	   = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия			   = "3.0.31.2";
	Обработчик.Процедура 		   = "ОбновлениеИнформационнойБазыБК.ЗаполнитьПредопределенныйЭлементСправочникаНоменклатура";
	Обработчик.НачальноеЗаполнение = Истина;

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия			   = "3.0.31.2";
	Обработчик.Процедура 		   = "Документы.ОтражениеЗарплатыВБухучете.ЗаполнитьВидОперацииПриОбновлении";
	Обработчик.НачальноеЗаполнение = Истина; // Не требуется запуск при переходе с 2БК на 3БК
	Обработчик.РежимВыполнения 	   = "Отложенно";

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия			   = "3.0.31.2";
	Обработчик.Процедура 		   = "ОбновлениеИнформационнойБазыБК.ЗаменитьВнешнююОбработкуОбменЭСФНаВстроенную";
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.ОбщиеДанные     	   = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.32.1";
	Обработчик.Процедура           = "ОбновлениеИнформационнойБазыБК.ПереносНастроекWebkassa";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Комментарий         = НСтр("ru = 'Интеграция 1С:Webkassa: Перенос настроек в новый справочник.'");
		
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.32.1";
	Обработчик.Процедура           = "ОбновлениеИнформационнойБазыБК.ДобавитьВПрофилиРолиWebkassa";
	Обработчик.Комментарий         = НСтр("ru = 'Интеграция 1С:Webkassa: Добавление ролей в текущие профили.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.32.1";
	Обработчик.Процедура           = "ОбновлениеИнформационнойБазыБК.ДобавитьСведенияОСтавкеРефинансированияНБ20190910";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.ОбщиеДанные         = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия			   = "3.0.33.1";
	Обработчик.Процедура 		   = "УправлениеДоступомСлужебный.ЗаполнениеДанныхДляОграниченияДоступа";

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия			   = "3.0.33.1";
	Обработчик.Процедура 		   = "ОбновлениеИнформационнойБазыБК.ДобавитьВПрофилиРолиПланыСчетов";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.33.1";
	Обработчик.Процедура           = "Справочники.ВычетыИПН.ЗаполнитьВычетВОСМС";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Комментарий         = СтрШаблон(НСтр("ru = 'Обновление справочника ""%1"".'"),
		Метаданные.Справочники.ВычетыИПН.Представление());
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.33.1";
	Обработчик.Процедура           = "ОбновлениеИнформационнойБазыБК.ЗаполнитьРесурсыУчетнаяПолитикаНалоговыйУчет";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Комментарий         = СтрШаблон(НСтр("ru = 'Заполнение ресурсов регистра ""%1"".'"),
		Метаданные.РегистрыСведений.УчетнаяПолитикаНалоговыйУчет.Представление());
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.33.1";
	Обработчик.Процедура           = "ОбновлениеИнформационнойБазыБК.ОбновитьСведенияОСтавкахОСМС";
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.Комментарий         = СтрШаблон(НСтр("ru = 'Обновление ставок ОСМС в регистре ""%1"".'"),
		Метаданные.РегистрыСведений.СведенияОСтавкахОСМС.Представление());
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.33.1";
	Обработчик.Процедура 		   = "ОбновлениеИнформационнойБазыБК.УстановитьМЗПМРП2020Год";
	Обработчик.ОбщиеДанные         = Истина;
	Обработчик.НачальноеЗаполнение = Истина; // В противном случае процедура не запустится при переходе с 2БК на 3БК

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.33.1";
	Обработчик.Процедура           = "ОбновлениеИнформационнойБазыБК.ОбновитьКалендарныеГрафики2020";
	Обработчик.РежимВыполнения     = "Монопольно";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.33.4";
	Обработчик.Процедура           = "ОбновлениеИнформационнойБазыБК.УдалитьРасширениеОшибкиВОСМС";
	Обработчик.РежимВыполнения     = "Монопольно";
	Обработчик.НачальноеЗаполнение = Ложь;

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.33.4";
	Обработчик.Процедура           = "ОбновлениеИнформационнойБазыБК.ОбновитьНастройкиОтчетовСтруктураЗадолженности";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.33.5";
	Обработчик.Процедура           = "Документы.АктОбОказанииПроизводственныхУслуг.ЗаполнитьДатуПодписанияГЗПриОбновлении";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.РежимВыполнения     = "Отложенно";
	Обработчик.Комментарий         = СтрШаблон(НСтр("ru = 'Обновление ИБ. Документ ""%1"". Заполнение даты подписания ГЗ.'"),
		Метаданные.Документы.АктОбОказанииПроизводственныхУслуг.Представление());
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.33.5";
	Обработчик.Процедура           = "Документы.РеализацияУслугПоПереработке.ЗаполнитьДатуПодписанияГЗПриОбновлении";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.РежимВыполнения     = "Отложенно";
	Обработчик.Комментарий         = СтрШаблон(НСтр("ru = 'Обновление ИБ. Документ ""%1"". Заполнение даты подписания ГЗ.'"),
		Метаданные.Документы.РеализацияУслугПоПереработке.Представление());;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.33.5";
	Обработчик.Процедура           = "Документы.РеализацияТоваровУслуг.ЗаполнитьДатуПодписанияГЗПриОбновлении";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.РежимВыполнения     = "Отложенно";
	Обработчик.Комментарий         = СтрШаблон(НСтр("ru = 'Обновление ИБ. Документ ""%1"". Заполнение даты подписания ГЗ.'"),
		Метаданные.Документы.РеализацияТоваровУслуг.Представление());
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.33.5";
	Обработчик.Процедура           = "ОбновлениеИнформационнойБазыБК.ОтключитьИспользованиеВнешнегоКлассификатораКодыСтрокНалоговыхДеклараций";
	Обработчик.НачальноеЗаполнение = Истина; // В противном случае процедура не запустится при переходе с 2БК на 3БК
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.33.5";
	Обработчик.Процедура           = "ОбновлениеИнформационнойБазыБК.ДобавитьСведенияОСтавкеРефинансированияНБ20200310_20200406";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.ОбщиеДанные         = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.33.5";
	Обработчик.Процедура           = "ОбновлениеИнформационнойБазыБК.ОбновитьТочностьОкругленияВОСМС";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.33.6";
	Обработчик.Процедура 		   = "ОбновлениеИнформационнойБазыБК.УстановитьМРПАпрель2020Год";
	Обработчик.ОбщиеДанные         = Истина;
	Обработчик.НачальноеЗаполнение = Истина; // В противном случае процедура не запустится при переходе с 2БК на 3БК
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.33.6";
	Обработчик.Процедура           = "ОбновлениеИнформационнойБазыБК.ЗаполнитьРесурсыУчетнаяПолитикаНалоговыйУчетСОиОПВ";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Комментарий         = СтрШаблон(НСтр("ru = 'Заполнение ресурсов регистра  ""%1"".'"),
		Метаданные.РегистрыСведений.УчетнаяПолитикаНалоговыйУчет.Представление());
		
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.33.7";
	Обработчик.Процедура           = "ОбновлениеИнформационнойБазыБК.СкорректироватьДвиженияРасчетУдержанийРаботниковОрганизаций";
	Обработчик.НачальноеЗаполнение = Ложь; // Не требуется запуск при переходе с 2БК на 3БК

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия			   = "3.0.33.7";
	Обработчик.Процедура 		   = "ОбновлениеИнформационнойБазыБК.ЗаменитьВнешнююОбработкуОбменЭСФНаВстроенную";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.ОбщиеДанные     	   = Истина;
	
#Область Функциональность_3_0_35
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия			   = "3.0.35.1";
	Обработчик.Процедура 		   = "Обработки.ФункциональностьПрограммы.УстановитьФункциональностьПриОбновлении";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия			   = "3.0.35.1";
	Обработчик.Процедура 		   = "МенеджерОборудованияВызовСервераПереопределяемый.ОбновитьПоставляемыеДрайвера";
	Обработчик.Комментарий		   = НСтр("ru = 'Выполняет обновление поставляемых драйверов.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия			   = "3.0.35.1";
	Обработчик.Процедура 		   = "Справочники.Склады.ПерезаполнитьКонстантуИспользоватьНесколькоСкладов";
	Обработчик.НачальноеЗаполнение = Истина;
	
		
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.35.1";
	Обработчик.Процедура           = "РегистрыСведений.ИспользоватьНесколькоБанковскихСчетовОрганизации.УстановитьЗначенияФО";
	Обработчик.НачальноеЗаполнение = Ложь; 
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия			   = "3.0.35.1";
	Обработчик.Процедура 		   = "ОбновлениеИнформационнойБазыБК.ПерезаполнитьКонстантуИспользоватьНесколькоОрганизаций";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия			   = "3.0.35.1";
	Обработчик.Процедура 		   = "РегистрыСведений.ИспользоватьНесколькоКассОрганизации.УстановитьЗначенияФО";
	Обработчик.НачальноеЗаполнение = Ложь; 
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.35.1";
	Обработчик.Процедура           = "ОбновлениеИнформационнойБазыБК.УстановитьКонстантуИспользоватьВалютныйУчетОтложенно";
	Обработчик.НачальноеЗаполнение = Истина; // Надо выполнять при обновлении с 2БК на 3БК
	Обработчик.РежимВыполнения     = "Отложенно";
	Обработчик.Идентификатор       = Новый УникальныйИдентификатор("f73eb774-a1b1-4720-ab8b-14df6cb98bde");
	Обработчик.Комментарий         = НСтр("ru = 'Удаляет лишние данные, если в базе не используется валютный учет.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия			   = "3.0.35.1";
	Обработчик.Процедура 		   = "ОбновлениеИнформационнойБазыБК.СбросИспользованияРегламентногоЗаданияЗагрузкаВалют";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия			   = "3.0.35.1";
	Обработчик.Процедура 		   = "Справочники.НоменклатурныеГруппы.СоздатьОсновнуюНоменклатурнуюГруппу";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия			   = "3.0.35.1";
	Обработчик.Процедура 		   = "Справочники.НоменклатурныеГруппы.ПерезаполнитьКонстантуИспользоватьНесколькоНоменклатурныхГрупп";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия			   = "3.0.35.1";
	Обработчик.Процедура 		   = "ОбновлениеИнформационнойБазыБК.УстановитьНастройкиПоказыватьСчетаУчета";
	Обработчик.НачальноеЗаполнение = Истина;

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия			   = "3.0.35.1";
	Обработчик.Процедура 		   = "Справочники.ТипыЦенНоменклатуры.ЗаполнитьКонстантуИспользоватьТипыЦенНоменклатуры";
	Обработчик.НачальноеЗаполнение = Истина;

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия			   = "3.0.35.1";
	Обработчик.Процедура 		   = "ОбновлениеИнформационнойБазыБК.УстановитьКонстантуНастройкаЗаполненияЦеныПродажи";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.35.1";
	Обработчик.Процедура           = "ОбновлениеИнформационнойБазыБК.ДобавитьОбъектыРозничнойТорговли";
	Обработчик.НачальноеЗаполнение = Истина; // Надо выполнять при обновлении с 2БК на 3БК
	Обработчик.Комментарий         = НСтр("ru = 'Добавляем розничного покупателя и договор.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия			   = "3.0.35.1";
	Обработчик.Процедура 		   = "Справочники.НаборыДополнительныхРеквизитовИСведений.ЗаполнитьНаборОтчетОРозничныхПродажах";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.35.1";
	Обработчик.Процедура           = "ОбновлениеИнформационнойБазыБК.ЗаполнитьТипШаблонаШтрихкода";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.35.1";
	Обработчик.Процедура           = "ОбновлениеИнформационнойБазыБК.ЗаполнитьПредопределенныйШаблонШтрихкодовНоменклатуры";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.35.1";
	Обработчик.Процедура           = "ОбновлениеИнформационнойБазыБК.ЗаполнитьРежимНалогообложенияВРегистреУчетнаяПолитикаНалоговыйУчет";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.35.1";
	Обработчик.Процедура           = "ОбновлениеИнформационнойБазыБК.ЗаполнитьВидОперацииВозвратТоваровОтПокупателя";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.35.1";
	Обработчик.Процедура           = "ОбновлениеИнформационнойБазыБК.ЗаполнитьПредопределенныеЭлементыСправочников3032";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия			   = "3.0.35.1";
	Обработчик.Процедура 		   = "ОбновлениеИнформационнойБазыБК.УстановитьКонстантуИспользоватьОбъектыПростойБухгалтерии";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия			   = "3.0.35.1";
	Обработчик.Процедура 		   = "ОбновлениеИнформационнойБазыБК.ПереименоватьРольДобавлениеИзменениеШаблоновШтрихкодов";
	Обработчик.НачальноеЗаполнение = Ложь;

	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия			   = "3.0.35.1";
	Обработчик.Процедура 		   = "ОбновлениеИнформационнойБазыБК.УстановитьКонстантуОсновнойЯзык";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.ОбщиеДанные         = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия			   = "3.0.35.2";
	Обработчик.Процедура 		   = "ОбновлениеИнформационнойБазыБК.УдалитьРольЧтениеЭД";
	Обработчик.НачальноеЗаполнение = Ложь;	
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия			   = "3.0.35.2";
	Обработчик.Процедура 		   = "ОбновлениеИнформационнойБазыБК.УдалитьРольПравоИнтерактивногоУдаленияПомеченныхОбъектов";
	Обработчик.НачальноеЗаполнение = Ложь;	

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия			   = "3.0.35.2";
	Обработчик.Процедура 		   = "ОбновлениеИнформационнойБазыБК.УдалитьРольНастройкаПараметровЭД";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия			   = "3.0.35.2";
	Обработчик.Процедура 		   = "ОбновлениеИнформационнойБазыБК.УдалитьРольВыполнениеОбменаЭД";
	Обработчик.НачальноеЗаполнение = Ложь;

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия			   = "3.0.35.4";
	Обработчик.Процедура 		   = "ОбновлениеИнформационнойБазыБК.ПерезаполнитьНастройкиПользователейУчетПоВсемОрганизациям";
	Обработчик.НачальноеЗаполнение = Истина;

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия			   = "3.0.35.5";
	Обработчик.Процедура 		   = "ОбновлениеИнформационнойБазыБК.УстановитьКонстантуАвтозаполнятьСчетаВзаиморасчетов";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.35.5";
	Обработчик.Процедура           = "ОбновлениеИнформационнойБазыБК.ДобавитьСведенияОСтавкеРефинансированияНБ20200721";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.ОбщиеДанные         = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.35.7";
	Обработчик.Процедура           = "ОбновлениеИнформационнойБазыБК.ЗаполнитьКонстантуНачалоРаботы";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия			   = "3.0.35.7";
	Обработчик.Процедура 		   = "Справочники.НаборыДополнительныхРеквизитовИСведений.ЗаполнитьНаборЧекККМ";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия			   = "3.0.35.9";
	Обработчик.Процедура 		   = "ОбновлениеИнформационнойБазыБК.ЗаменитьНаименованиеДокументовУдостоверяющихЛичность";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.35.9";
	Обработчик.Процедура           = "ОбновлениеИнформационнойБазыБК.УдалитьРасширениеДиректБанкКорректировка";
	Обработчик.РежимВыполнения     = "Монопольно";
	Обработчик.НачальноеЗаполнение = Ложь;
	
#КонецОбласти

#Область Функциональность_3_0_37
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия			   = "3.0.37.2";
	Обработчик.Процедура 		   = "ОбновлениеИнформационнойБазыБК.УстановитьКонстантуИспользоватьЭлектронныеСНТ";
	Обработчик.НачальноеЗаполнение = Истина;

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.37.2";
	Обработчик.Процедура           = "ОбновлениеИнформационнойБазыБК.ОбновитьСведенияОСтавкахОПВ2021";
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.Комментарий         = СтрШаблон(НСтр("ru = 'Обновление ставок ОПВ в регистре ""%1"".'"),
		Метаданные.РегистрыСведений.СведенияОСтавкахНалоговСборовОтчислений.Представление());
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.37.2";
	Обработчик.Процедура 		   = "ОбновлениеИнформационнойБазыБК.УстановитьМЗПМРП2021Год";
	Обработчик.ОбщиеДанные         = Истина;
	Обработчик.НачальноеЗаполнение = Истина; // В противном случае процедура не запустится при переходе с 2БК на 3БК

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.37.2";
	Обработчик.Процедура           = "ОбновлениеИнформационнойБазыБК.ОбновитьСведенияОСтавкахОСМС2021";
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.Комментарий         = СтрШаблон(НСтр("ru = 'Обновление ставок ОСМС в регистре ""%1"".'"),
		Метаданные.РегистрыСведений.СведенияОСтавкахОСМС.Представление());

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.37.2";
	Обработчик.Процедура           = "ОбновлениеИнформационнойБазыБК.ОбновитьКалендарныеГрафики2021";
	Обработчик.РежимВыполнения     = "Монопольно";
	Обработчик.НачальноеЗаполнение = Истина;

#КонецОбласти

#Область Функциональность_3_0_39

    Обработчик = Обработчики.Добавить();
    Обработчик.Версия              = "3.0.39.1";
    Обработчик.Процедура           = "ОбновлениеИнформационнойБазыБК.ЗаполнитьРесурсыУчетнаяПолитикаНалоговыйУчет2020";
   	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.Комментарий         = СтрШаблон(НСтр("ru = 'Обновление регистра сведений ""%1"".'"),
		Метаданные.РегистрыСведений.УчетнаяПолитикаНалоговыйУчет.Представление());

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия			   = "3.0.39.5";
	Обработчик.Процедура 		   = "ОбновлениеИнформационнойБазыБК.ЗаменитьВнешнююОбработкуОбменЭСФНаВстроенную";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.ОбщиеДанные     	   = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия			   = "3.0.39.5";
	Обработчик.Процедура 		   = "ОбновлениеИнформационнойБазыБК.ЗаменитьВнешнююОбработкуОбменСНТНаВстроенную";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.ОбщиеДанные     	   = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия			   = "3.0.39.8";
	Обработчик.Процедура           = "ОбновлениеИнформационнойБазыБК.ОтключитьИспользованиеВнешнегоКлассификатораКодыСтрокНалоговыхДеклараций";
	Обработчик.НачальноеЗаполнение = Истина; // В противном случае процедура не запустится при переходе с 2БК на 3БК
	
#КонецОбласти

#Область Функциональность_3_0_40

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.40.2";
	Обработчик.Процедура           = "ОбновлениеИнформационнойБазыБК.ЗаполнитьПредопределенныеЭлементыСправочников3040";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.40.2";
	Обработчик.Процедура           = "ОбновлениеИнформационнойБазыБК.ДобавитьСведенияОСтавкеРефинансированияНБ20210914";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.ОбщиеДанные         = Истина;
	
#КонецОбласти

#Область Функциональность_3_0_41

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия 				= "3.0.41.1";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБК.ЗаполнитьСоответствиеСчетаБУ1424";
	Обработчик.НачальноеЗаполнение = Истина; // В противном случае процедура не запустится при переходе с 2БК на 3БК
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.41.1";
	Обработчик.Процедура           = "ОбновлениеИнформационнойБазыБК.ДобавитьСведенияОСтавкеРефинансированияНБ20211026";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.ОбщиеДанные         = Истина;
    
    Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.41.2";
	Обработчик.Процедура 		   = "ОбновлениеИнформационнойБазыБК.УстановитьМЗПМРП2022Год";
	Обработчик.ОбщиеДанные         = Истина;
	Обработчик.НачальноеЗаполнение = Истина; // В противном случае процедура не запустится при переходе с 2БК на 3БК

   	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.41.2";
	Обработчик.Процедура           = "ОбновлениеИнформационнойБазыБК.ОбновитьСведенияОСтавкахОСМС2022";
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.Комментарий         = СтрШаблон(НСтр("ru = 'Обновление ставки ООСМС в регистре ""%1"".'"),
		Метаданные.РегистрыСведений.СведенияОСтавкахОСМС.Представление());

   	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.41.2";
	Обработчик.Процедура           = "ОбновлениеИнформационнойБазыБК.ОбновитьКалендарныеГрафики2022";
	Обработчик.РежимВыполнения     = "Монопольно";
	Обработчик.НачальноеЗаполнение = Истина;

   	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.41.2";
	Обработчик.Процедура           = "ОбновлениеИнформационнойБазыБК.ЗаполнитьРегистрСведенияОФизическихЛицахУчастникахВОВ";

    Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.41.2";
	Обработчик.Процедура           = "РегистрыСведений.РазмерыВычетовИПН.ОбновитьРазмерыВычетовИПН2022";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.41.3";
	Обработчик.Процедура           = "ОбновлениеИнформационнойБазыБК.ЗаполнениеДокументаПартииВИсточникахПроисхожденияФОтложенно";
	Обработчик.НачальноеЗаполнение = Истина; // В противном случае процедура не запустится при переходе с 2БК на 3БК 
	Обработчик.Комментарий         = СтрШаблон(НСтр("ru = 'заполнение реквизита ""%1"" в элементах справочника ""%2"", в записях регистра ""%3"", для которых ранее была сформирована некорректная ссылка ""<Объект не найден>"".'"),
		Метаданные.Справочники.ИсточникиПроисхождения.Реквизиты.ДокументПартии.Представление(),
		Метаданные.Справочники.ИсточникиПроисхождения.Представление(),
		Метаданные.РегистрыНакопления.ТоварыНаВиртуальныхСкладах.Представление());
		
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("917f7bdd-0668-45fa-9217-e102da12fdd4");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.41.3";
	Обработчик.Процедура           = "ОбновлениеИнформационнойБазыБК.ДобавитьСведенияОСтавкеРефинансированияНБ20220125";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.ОбщиеДанные         = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.41.3";
	Обработчик.Процедура           = "ОбновлениеИнформационнойБазыБК.ДобавитьСведенияОСтавкеРефинансированияНБ20220224";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.ОбщиеДанные         = Истина;
	
#КонецОбласти

#Область Функциональность_3_0_42
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.42.1";
	Обработчик.Процедура           = "ОбновлениеИнформационнойБазыБК.ДобавитьСведенияОСтавкеРефинансированияНБ20220426";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.ОбщиеДанные         = Истина;

#КонецОбласти

#Область Функциональность_3_0_43

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.43.1";
	Обработчик.Процедура 		   = "ОбновлениеИнформационнойБазыБК.УстановитьМРПАпрель2022Год";
	Обработчик.ОбщиеДанные         = Истина;
	Обработчик.НачальноеЗаполнение = Истина; // В противном случае процедура не запустится при переходе с 2БК на 3БК
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.43.3";
	Обработчик.Процедура           = "ОбновлениеИнформационнойБазыБК.ДобавитьСведенияОСтавкеРефинансированияНБ20220726";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.ОбщиеДанные         = Истина;

#КонецОбласти

#Область Функциональность_3_0_44

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.44.1";
	Обработчик.Процедура 		   = "ОбновлениеИнформационнойБазыБК.ЗаполнитьНаименованиеПолноеВГруппахФАНУ";
	Обработчик.ОбщиеДанные         = Истина;
	Обработчик.НачальноеЗаполнение = Истина; // В противном случае процедура не запустится при переходе с 2БК на 3БК
		
#КонецОбласти

#Область Функциональность_3_0_45

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.45.1";
	Обработчик.Процедура           = "ОбновлениеИнформационнойБазыБК.ДобавитьСведенияОСтавкеРефинансированияНБ20221027";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.ОбщиеДанные         = Истина;

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия			   = "3.0.45.1";
	Обработчик.Процедура 		   = "Справочники.ВычетыИПН.ОбновитьСправочникВычетыИПНИПН2022";
	Обработчик.НачальноеЗаполнение = Истина;

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия			   = "3.0.45.2";
	Обработчик.Процедура 		   = "РегистрыСведений.АдресныйКлассификатор.ОбновитьЗагруженныеОбластиРКПоКлассификатору";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.ОбщиеДанные         = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия			   = "3.0.45.2";
	Обработчик.Процедура 		   = "ОбновлениеИнформационнойБазыБК.УдалениеОтчетовСправокПоЗаработнойПлате";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.ОбщиеДанные         = Истина;

#КонецОбласти

#Область Функциональность_3_0_46

    Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.46.1";
	Обработчик.Процедура 		   = "ОбновлениеИнформационнойБазыБК.УстановитьМЗПМРП2023Год";
	Обработчик.ОбщиеДанные         = Истина;
	Обработчик.НачальноеЗаполнение = Истина; // В противном случае процедура не запустится при переходе с 2БК на 3БК

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.46.1";
	Обработчик.Процедура           = "ОбновлениеИнформационнойБазыБК.ДобавитьСведенияОСтавкеРефинансированияНБ20221206";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.ОбщиеДанные         = Истина;
	
#КонецОбласти

#Область Функциональность_3_0_47

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.47.1";
	Обработчик.Процедура           = "ОбновлениеИнформационнойБазыБК.ЗаписатьСклоненияФизическихЛицОтложенно";
	Обработчик.НачальноеЗаполнение = Истина; // В противном случае процедура не запустится при переходе с 2БК на 3БК 
	Обработчик.Комментарий         = НСтр("ru = 'Записывает склонения фамилий, имен, отчеств физических лиц по падежам.'");
		
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("b44bd468-7e15-41ea-a7b6-35bad631bc08"); 

    // ЕП
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.47.1";
	Обработчик.Процедура           = "ОбновлениеИнформационнойБазыБК.ВыполнитьНастройкиПоЕдиномуПлатежу";
	Обработчик.НачальноеЗаполнение = Истина;

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.47.1";
	Обработчик.Процедура           = "ОбновлениеИнформационнойБазыБК.ОбновитьИспользованиеНаборовСвойствЕП";

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.47.1";
    Обработчик.НачальноеЗаполнение = Истина; // В противном случае процедура не запустится при переходе с 2БК на 3БК
	Обработчик.Процедура           = "ОбновлениеИнформационнойБазыБК.ЗаполнитьРесурсыУчетнаяПолитикаНалоговыйУчет2023";

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.47.1";
    Обработчик.НачальноеЗаполнение = Истина; // В противном случае процедура не запустится при переходе с 2БК на 3БК
	Обработчик.Процедура           = "ОбновлениеИнформационнойБазыБК.ОбновитьНастройкиОтчетовЕП";
	Обработчик.РежимВыполнения     = "Отложенно";
	Обработчик.Идентификатор       = Новый УникальныйИдентификатор("0b9f8253-9bff-4f2e-81e2-1e7daa9da8a8");
 	Обработчик.Комментарий         = НСтр("ru = 'Обновление настроек отчетов.'");

#КонецОбласти

#Область Функциональность_3_0_48

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.48.1";
	Обработчик.Процедура           = "ОбновлениеИнформационнойБазыБК.ЗаполнитьНастройкиВидовНалоговВНалоговомУчете";
	Обработчик.НачальноеЗаполнение = Истина;  
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.48.1";
	Обработчик.Процедура           = "РегистрыСведений.УчетнаяПолитикаНалоговыйУчет.ЗаполнитьПорядокОбложенияДоходовРаботниковФилиалов";
	Обработчик.НачальноеЗаполнение = Ложь;  
	
#КонецОбласти

#Область Функциональность_3_0_49

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.49.1";
	Обработчик.Процедура           = "ОбновлениеИнформационнойБазыБК.ЗаполнитьРесурсыУчетнаяПолитикаНалоговыйУчетЗаявленныйДоходИП";
	Обработчик.НачальноеЗаполнение = Истина;  
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.49.2";
	Обработчик.Процедура           = "ОбновлениеИнформационнойБазыБК.ОбновитьНастройкиОтчетов3049";
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.РежимВыполнения     = "Отложенно";
	Обработчик.Идентификатор       = Новый УникальныйИдентификатор("2b4b1643-b8d3-47c2-a2da-7ba7f193f4b5");
 	Обработчик.Комментарий         = НСтр("ru = 'Обновление настроек отчетов.'");

#КонецОбласти

#Область Функциональность_3_0_50

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.50.1";
	Обработчик.Процедура           = "ОбновлениеИнформационнойБазыБК.ДобавитьСведенияОСтавкеРефинансированияНБ20230828";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.ОбщиеДанные         = Истина;
	
#КонецОбласти

#Область Функциональность_3_0_51

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.51.1";
	Обработчик.Процедура           = "ОбновлениеИнформационнойБазыБК.ДобавитьСтавкиРозничногоНалога";
	Обработчик.НачальноеЗаполнение = Истина; // В противном случае процедура не запустится при переходе с 2БК на 3БК
	
#КонецОбласти

#Область Функциональность_3_0_52

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.52.1";
	Обработчик.Процедура           = "ОбновлениеИнформационнойБазыБК.ДобавитьСведенияОСтавкеРефинансированияНБ20231009";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.ОбщиеДанные         = Истина;
	
#КонецОбласти

#Область Функциональность_НГ

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.53.1";
	Обработчик.Процедура           = "ОбновлениеИнформационнойБазыБК.ДобавитьСведенияОСтавкеРефинансированияНБДляРасчетаПени2024";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.53.1";
	Обработчик.Процедура           = "ОбновлениеИнформационнойБазыБК.ВыполнитьНастройкиПоОПВР";
	Обработчик.НачальноеЗаполнение = Истина;

    Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.53.1";
	Обработчик.Процедура 		   = "ОбновлениеИнформационнойБазыБК.УстановитьМЗПМРП2024Год";
	Обработчик.ОбщиеДанные         = Истина;
	Обработчик.НачальноеЗаполнение = Истина; // В противном случае процедура не запустится при переходе с 2БК на 3БК

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.53.1";
	Обработчик.Процедура           = "ОбновлениеИнформационнойБазыБК.ДобавитьСведенияОСтавкеРефинансированияНБ20231127";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.ОбщиеДанные         = Истина;
	
	 // ЕП
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.53.2";
	Обработчик.Процедура           = "ОбновлениеИнформационнойБазыБК.ОбновитьСведенияОСтавкахИДоляхЕП2024";
	Обработчик.НачальноеЗаполнение = Истина;
	
#КонецОбласти

#Область Функциональность_3_0_54
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.54.1";
	Обработчик.Процедура           = "ОбновлениеИнформационнойБазыБК.ПроверитьУстановитьСтавкуОПВР";
	Обработчик.НачальноеЗаполнение = Истина;

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.54.1";
	Обработчик.Процедура           = "ОбновлениеИнформационнойБазыБК.ДобавитьСведенияОСтавкеРефинансированияНБ20240122";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.ОбщиеДанные         = Истина;
	
#КонецОбласти

#Область Функциональность_3_0_55

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.55.1";
	Обработчик.Процедура           = "ОбновлениеИнформационнойБазыБК.ОбновитьКодыПланаВидовХарактеристик";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.55.1";
	Обработчик.Процедура           = "ОбновлениеИнформационнойБазыБК.ЗаполнитьСоответствиеНовыхСчетовНДСВБУ";
	Обработчик.НачальноеЗаполнение = Истина; // В противном случае процедура не запустится при переходе с 2БК на 3БК
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.55.1";
	Обработчик.Процедура           = "РегистрыСведений.СведенияПоАктамВыполненныхРабот.ЗаполнитьСведенияПоАктамВыполненныхРаботОтложенно";
	Обработчик.НачальноеЗаполнение = Истина; // Не требуется запуск при переходе с 2БК на 3БК
	Обработчик.РежимВыполнения     = "Отложенно";
	Обработчик.Идентификатор       = Новый УникальныйИдентификатор("ed7360d7-f0c6-4600-a154-f4bcc2f07cda");

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.55.1";
	Обработчик.Процедура           = "ОбновлениеИнформационнойБазыБК.ДобавитьСведенияОСтавкеРефинансированияНБ20240226";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.ОбщиеДанные         = Истина;
					
#КонецОбласти 

#Область Функциональность_3_0_56

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.56.1";
	Обработчик.Процедура           = "ОбновлениеИнформационнойБазыБК.ОбновитьКодыПланаВидовХарактеристик";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.56.1";
	Обработчик.Процедура           = "ОбновлениеИнформационнойБазыБК.ЗаполнениеСправочникаВидыПрочихВыплатПоУмолчанию";
	Обработчик.НачальноеЗаполнение = Истина; 
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.56.1";
	Обработчик.Процедура           = "ОбновлениеИнформационнойБазыБК.ЗаполнитьСоответствиеНовыхСчетовПрочихВыплатВБУ";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.56.1";
	Обработчик.Процедура           = "ОбновлениеИнформационнойБазыБК.ОбновитьДополнительныйПрофильДоступа";
	Обработчик.НачальноеЗаполнение = Истина;   
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.56.1";
	Обработчик.Процедура           = "ОбновлениеИнформационнойБазыБК.ОбновитьПараметрыНаборовСвойствПрочиеВыплатыЕП";
	Обработчик.НачальноеЗаполнение = Истина; 
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.56.1";
	Обработчик.Процедура           = "РегистрыСведений.СведенияОДоляхЕП.ЗаполнитьСведенияОДоляхЕП";
	Обработчик.НачальноеЗаполнение = Ложь;  // При переходе с 2БК или в новой ИБ выполняется обработчик для версии 3.0.53.2 
	
#КонецОбласти

#Область Функциональность_3_0_57

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.57.1";
	Обработчик.Процедура           = "РегистрыСведений.СтатусыДокументов.ЗаполнитьСтатусыОплатыСчетов";
	Обработчик.НачальноеЗаполнение = Истина;

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.57.1";
	Обработчик.Процедура           = "РегистрыСведений.СтатусыДокументов.ЗаполнитьДополнительныеСтатусыСчетовНаОплату";
	Обработчик.НачальноеЗаполнение = Истина; 
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.57.1";
	Обработчик.Процедура           = "РегистрыСведений.СтатусыДокументов.ЗаполнитьДополнительныеСтатусыСчетовОтПоставщиков";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.РежимВыполнения     = "Отложенно";
	Обработчик.Идентификатор       = Новый УникальныйИдентификатор("2ac7a7e4-98a1-4d8e-82ad-d53075d532db");
	Обработчик.Комментарий         = НСтр("ru = 'Заполняет статусы поступления для списка счетов на оплату поставщика.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия 			   = "3.0.57.1";
	Обработчик.Процедура           = "ОбновлениеИнформационнойБазыБК.УстановитьОтображениеДополнительныхКолонокВСписках";
	Обработчик.НачальноеЗаполнение = Истина; 
		
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.57.1";
	Обработчик.Процедура           = "Документы.ПриходныйКассовыйОрдер.ЗаполнитьСчетНаОплатуВРасшифровкеПлатежаПриОбновлении";
	Обработчик.НачальноеЗаполнение = Истина;  
	Обработчик.РежимВыполнения     = "Отложенно";  
	Обработчик.Идентификатор       = Новый УникальныйИдентификатор("9f77ab67-29a7-4c63-b2ac-3a1ec9b4a593");
	Обработчик.Комментарий         = СтрШаблон(НСтр("ru = 'Обновление ИБ. Документ ""%1"". Заполнение счета на оплату в таблице расшифровки платежа.'"),
		Метаданные.Документы.ПриходныйКассовыйОрдер.Представление());
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.57.1";
	Обработчик.Процедура           = "Документы.ПлатежноеПоручениеВходящее.ЗаполнитьСчетНаОплатуВРасшифровкеПлатежаПриОбновлении";
	Обработчик.НачальноеЗаполнение = Истина;  
	Обработчик.РежимВыполнения     = "Отложенно";
	Обработчик.Идентификатор       = Новый УникальныйИдентификатор("b2bc60b6-9bdc-4206-aca6-e31d469a9fe3");
	Обработчик.Комментарий         = СтрШаблон(НСтр("ru = 'Обновление ИБ. Документ ""%1"". Заполнение счета на оплату в таблице расшифровки платежа.'"),
		Метаданные.Документы.ПлатежноеПоручениеВходящее.Представление());

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.57.1";
	Обработчик.Процедура           = "Документы.ПлатежныйОрдерПоступлениеДенежныхСредств.ЗаполнитьСчетНаОплатуВРасшифровкеПлатежаПриОбновлении";
	Обработчик.НачальноеЗаполнение = Истина;  
	Обработчик.РежимВыполнения     = "Отложенно";
	Обработчик.Идентификатор       = Новый УникальныйИдентификатор("58c7cf3b-da92-4765-8c82-585f616ac91d");
	Обработчик.Комментарий         = СтрШаблон(НСтр("ru = 'Обновление ИБ. Документ ""%1"". Заполнение счета на оплату в таблице расшифровки платежа.'"),
		Метаданные.Документы.ПлатежныйОрдерПоступлениеДенежныхСредств.Представление());

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.57.1";
	Обработчик.Процедура           = "Документы.ОплатаОтПокупателяПлатежнойКартой.ЗаполнитьСчетНаОплатуВРасшифровкеПлатежаПриОбновлении";
	Обработчик.НачальноеЗаполнение = Истина;  
	Обработчик.РежимВыполнения     = "Отложенно"; 
	Обработчик.Идентификатор       = Новый УникальныйИдентификатор("156cecb8-db0a-49b7-a578-828b5b788f8d");
	Обработчик.Комментарий         = СтрШаблон(НСтр("ru = 'Обновление ИБ. Документ ""%1"". Заполнение счета на оплату в таблице расшифровки платежа.'"),
		Метаданные.Документы.ОплатаОтПокупателяПлатежнойКартой.Представление());
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.57.1";
	Обработчик.Процедура           = "ОбновлениеИнформационнойБазыБК.ОбновитьПараметрыНаборовСвойствСчетНаОплатуПоставщика";
	Обработчик.НачальноеЗаполнение = Истина; 
	
#КонецОбласти
	
#Область Функциональность_3_0_58
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.58.1";
	Обработчик.Процедура           = "Справочники.КартСчета.ЗаполнитьФизЛицоВладелецСчета";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.РежимВыполнения     = "Отложенно";
	Обработчик.Идентификатор       = Новый УникальныйИдентификатор("7108d271-5d0d-4467-ac56-e4fa873f7a23");
	Обработчик.Комментарий         = СтрШаблон(НСтр("ru = 'Заполнение поля ""%1"" в справочнике ""%2"".'"),
		Метаданные.Справочники.КартСчета.Реквизиты.ФизЛицоВладелецСчета.Представление(),
		Метаданные.Справочники.КартСчета.Представление());

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.58.1";
	Обработчик.Процедура           = "ОбновлениеИнформационнойБазыБК.ДобавитьСведенияОСтавкеРефинансированияНБ20240603";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.ОбщиеДанные         = Истина; 
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.58.1";
	Обработчик.Процедура           = "Документы.ПоступлениеТоваровУслуг.ЗаполнитьРеквизитСчетНаОплатуПоставщикаПоступлениеТоваровУслуг";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.РежимВыполнения     = "Отложенно";
	Обработчик.Идентификатор       = Новый УникальныйИдентификатор("2845cca3-8ceb-4d16-9b9a-db61519d3ed8");
	Обработчик.Комментарий         = СтрШаблон(НСтр("ru = 'Заполнение реквизита ""%1"" в документах ""%2"".'"),
		Метаданные.Документы.ПоступлениеТоваровУслуг.Реквизиты.СчетНаОплатуПоставщика.Представление(),
		Метаданные.Документы.ПоступлениеТоваровУслуг.Представление());

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.58.2";
	Обработчик.Процедура           = "ОбновлениеИнформационнойБазыБК.ДобавитьСведенияОСтавкеРефинансированияНБ20240715";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.ОбщиеДанные         = Истина; 
	
#КонецОбласти

#Область Функциональность_3_0_60

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.60.1";
	Обработчик.Процедура           = "ОбновлениеИнформационнойБазыБК.ОбновитьПараметрыНаборовСвойствВедомостьПрочихДоходов";
	Обработчик.НачальноеЗаполнение = Истина;  
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.60.1";
    Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура           = "ОбновлениеИнформационнойБазыБК.ОбновитьКодыКатегорийЗемель";
	Обработчик.РежимВыполнения     = "Отложенно";
	//Обработчик.Идентификатор       = Новый УникальныйИдентификатор("961e6587-a6e5-4371-bf48-dc041a55cf54");
 	Обработчик.Комментарий         = НСтр("ru = 'Обновление кодов категорий земель в справочнике ""Категории земель"".'");  
	
#КонецОбласти

#Область Функциональность_3_0_61

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.61.1";
	Обработчик.Процедура           = "ОбновлениеИнформационнойБазыБК.ОчиститьНастройкиСверткиИнформационнойБазы";
	Обработчик.НачальноеЗаполнение = Ложь;

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.61.1";
	Обработчик.Процедура           = "ОбновлениеИнформационнойБазыБК.ОчиститьУдаляемыеРегистрыСведений";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.РежимВыполнения     = "Отложенно";
	
#КонецОбласти

#Область Функциональность_3_0_62

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.62.1";
	Обработчик.Процедура           = "ОбновлениеИнформационнойБазыБК.ДобавитьСведенияОСтавкеРефинансированияНБ20241202";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.ОбщиеДанные         = Истина; 

    Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.62.1";
	Обработчик.Процедура 		   = "ОбновлениеИнформационнойБазыБК.УстановитьМЗПМРП2025Год";
	Обработчик.ОбщиеДанные         = Истина;
	Обработчик.НачальноеЗаполнение = Истина; // В противном случае процедура не запустится при переходе с 2БК на 3БК
	
	 // ЕП
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.62.1";
	Обработчик.Процедура           = "ОбновлениеИнформационнойБазыБК.ОбновитьСведенияОСтавкахЕП2025";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.62.1";
	Обработчик.Процедура           = "РегистрыСведений.СведенияОДоляхЕП.ЗаполнитьСведенияОДоляхЕП";
	Обработчик.НачальноеЗаполнение = Ложь;  // При переходе с 2БК или в новой ИБ доли ЕП заполняет обработчик для версии 3.0.53.2 
	
	 // Изменение ставок налогов
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.62.1";
	Обработчик.Процедура           = "ОбновлениеИнформационнойБазыБК.ДобавитьСведенияОСтавкахНалоговВзносовОтчислений2025";
	Обработчик.НачальноеЗаполнение = Истина;
	
#КонецОбласти

#Область Функциональность_3_0_63
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.63.1";
	Обработчик.Процедура           = "ОбновлениеИнформационнойБазыБК.ЗаполнитьСоответствиеНовыхСчетовОПВР";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.63.1";
	Обработчик.Процедура           = "ОбновлениеИнформационнойБазыБК.ОбновитьНалогиСборыОтчисленияОПВРСчетаУчета";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.63.1";
	Обработчик.Процедура           = "ОбновлениеИнформационнойБазыБК.ПрименитьПараметрыСубконтоРаботникиОрганизацииДляНовыхСчетовОПВР";
	Обработчик.НачальноеЗаполнение = Истина;
	
	 // Изменение ставок налогов
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.63.1";
	Обработчик.Процедура           = "ОбновлениеИнформационнойБазыБК.ДобавитьСведенияОСтавкахСоциальныхОтчислений2025";
	Обработчик.НачальноеЗаполнение = Истина;       
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.63.1";
	Обработчик.Процедура           = "Справочники.ВычетыИПН.ЗаполнитьПредопределенныеЭлементы";
	Обработчик.НачальноеЗаполнение = Истина;     
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.63.1";
	Обработчик.Процедура           = "РегистрыСведений.РазмерыВычетовИПН.ОбновитьРазмерыВычетовИПН2025"; 
	Обработчик.НачальноеЗаполнение = Истина; 

	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия			   = "3.0.63.1";
	Обработчик.Процедура 		   = "Справочники.ВычетыИПН.ЗаполнитьПриоритетыИКодыНеПредопределенныхВычетов"; 
	Обработчик.НачальноеЗаполнение = Истина;
	        	
#КонецОбласти

КонецПроцедуры

// См. описание в общем модуле ОбновлениеИнформационнойБазыБСП.
Процедура ПередОбновлениемИнформационнойБазы() Экспорт
	
	ОбновлениеСПредыдущейРедакции.ОчиститьВерсиюПодсистемыБСППриПереходеСБК20();
	
	ОбновлениеСПредыдущейРедакции.УстановитьПоследнююВерсиюОтображенияИзмененийСистемыПриПереходеС20();
	
КонецПроцедуры

// См. описание в общем модуле ОбновлениеИнформационнойБазыБСП.
Процедура ПослеОбновленияИнформационнойБазы(Знач ПредыдущаяВерсия, Знач ТекущаяВерсия,
		Знач ВыполненныеОбработчики, ВыводитьОписаниеОбновлений, МонопольныйРежим) Экспорт
	
	
КонецПроцедуры

// См. описание в общем модуле ОбновлениеИнформационнойБазыБСП.
Процедура ПриПодготовкеМакетаОписанияОбновлений(Знач Макет) Экспорт
	
	
КонецПроцедуры

// Добавляет в список процедуры-обработчики перехода с другой программы (с другим именем конфигурации).
// Например, для перехода между разными, но родственными конфигурациями: базовая -> проф -> корп.
// Вызывается перед началом обновления данных ИБ.
//
// Параметры:
//  Обработчики - ТаблицаЗначений - с колонками:
//    * ПредыдущееИмяКонфигурации - Строка - имя конфигурации, с которой выполняется переход;
//    * Процедура                 - Строка - полное имя процедуры-обработчика перехода с программы ПредыдущееИмяКонфигурации. 
//                                  Например, "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику"
//                                  Обязательно должна быть экспортной.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.ПредыдущееИмяКонфигурации  = "УправлениеТорговлей";
//  Обработчик.Процедура                  = "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику";
//
Процедура ПриДобавленииОбработчиковПереходаСДругойПрограммы(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.ПредыдущееИмяКонфигурации = "БухгалтерияДляКазахстанаБазовая";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБК.ПерейтиСБазовойВерсииНаПРОФ";
	
КонецПроцедуры

// Позволяет переопределить режим обновления данных информационной базы.
// Для использования в редких (нештатных) случаях перехода, не предусмотренных в
// стандартной процедуре определения режима обновления.
//
// Параметры:
//   РежимОбновленияДанных - Строка - в обработчике можно присвоить одно из значений:
//              "НачальноеЗаполнение"     - если это первый запуск пустой базы (области данных);
//              "ОбновлениеВерсии"        - если выполняется первый запуск после обновление конфигурации базы данных;
//              "ПереходСДругойПрограммы" - если выполняется первый запуск после обновление конфигурации базы данных, 
//                                          в которой изменилось имя основной конфигурации.
//
//   СтандартнаяОбработка  - Булево - если присвоить Ложь, то стандартная процедура
//                                    определения режима обновления не выполняется, 
//                                    а используется значение РежимОбновленияДанных.
//
Процедура ПриОпределенииРежимаОбновленияДанных(РежимОбновленияДанных, СтандартнаяОбработка) Экспорт
	
	Если ОбновлениеСПредыдущейРедакции.ЭтоПереходСРедакции20() Тогда 
		
		РежимОбновленияДанных = "ОбновлениеВерсии";
		СтандартнаяОбработка = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

// Вызывается после выполнения всех процедур-обработчиков перехода с другой программы (с другим именем конфигурации),
// и до начала выполнения обновления данных ИБ.
//
// Параметры:
//  ПредыдущееИмяКонфигурации    - Строка - имя конфигурации до перехода.
//  ПредыдущаяВерсияКонфигурации - Строка - имя предыдущей конфигурации (до перехода).
//  Параметры                    - Структура - 
//    * ВыполнитьОбновлениеСВерсии   - Булево - по умолчанию Истина. Если установить Ложь, 
//        то будут выполнена только обязательные обработчики обновления (с версией "*").
//    * ВерсияКонфигурации           - Строка - номер версии после перехода. 
//        По умолчанию, равен значению версии конфигурации в свойствах метаданных.
//        Для того чтобы выполнить, например, все обработчики обновления с версии ПредыдущаяВерсияКонфигурации, 
//        следует установить значение параметра в ПредыдущаяВерсияКонфигурации.
//        Для того чтобы выполнить вообще все обработчики обновления, установить значение "0.0.0.1".
//    * ОчиститьСведенияОПредыдущейКонфигурации - Булево - по умолчанию Истина. 
//        Для случаев когда предыдущая конфигурация совпадает по имени с подсистемой текущей конфигурации, следует
//        указать Ложь.
//
Процедура ПриЗавершенииПереходаСДругойПрограммы(Знач ПредыдущееИмяКонфигурации, 
	Знач ПредыдущаяВерсияКонфигурации, Параметры) Экспорт
	
КонецПроцедуры

Процедура ПервыйЗапускОбщиеДанные() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЗначениеЗаполнено(Константы.УдалитьНомерВерсииКонфигурации.Получить()) Тогда 
		Возврат; // Переход с версии 2.0
	КонецЕсли;
	
	// Обязательное начальное заполнение информационной базы.
			
	// Заполнение сведений по заработной плате и учету персонала
	ЗаполнитьСведенияОСтавкахИПНиСН2005();
	ЗаполнитьСведенияОСтавкахИПНиСН2006();
	ЗаполнитьСведенияОСтавкахИПНиСН2007();
	ЗаполнитьСведенияОСтавкахИПНиСН2008();
	ЗаполнитьСведенияОРегламентированныхРасчетныхПоказателях();
	ЗаполнитьСведенияОСтавкеРефинансированияНБ();
		
	УстановитьНовыеКодыНеПредопределеннымЭлементамСправочника("ДвиженияДенежныхСредств");	
	
	КодЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	
	// Заполнение справочника "СтавкиНДС"
	НайтиСоздатьСтавкуНДС("12%", 12);
	НайтиСоздатьСтавкуНДС("0%" , 0);
	НайтиСоздатьСтавкуНДС(НСтр("ru = 'без НДС'", КодЯзыка), 0, Истина);
	НайтиСоздатьСтавкуНДС(НСтр("ru = 'без НДС - не РК'", КодЯзыка), 0, Ложь, Истина);
		
	// Заполнение групп налогового учета
	ЗаполнитьСведенияОГруппахФАНУ();
	
	Если ПланыОбмена.ГлавныйУзел() = Неопределено Тогда // В подчиненных узлах РИБ не выполняется
		// Заполнение реквизитов предопределенных элементов в справочнике СтраныУчастникиТС
		СтранаТС = Справочники.СтраныУчастникиТаможенногоСоюза.Россия.ПолучитьОбъект();
		СтранаТС.ВидНДСПриИмпорте = Справочники.НалогиСборыОтчисления.НалогНаДобавленнуюСтоимостьИмпортРФ;
		СтранаТС.Записать();
		
		СтранаТС = Справочники.СтраныУчастникиТаможенногоСоюза.Беларусь.ПолучитьОбъект();
		СтранаТС.ВидНДСПриИмпорте = Справочники.НалогиСборыОтчисления.НалогНаДобавленнуюСтоимостьИмпортРБ;
		СтранаТС.Записать();
		
		Попытка
			Константы.МестоВыполненияКриптографическихОпераций.Установить(Перечисления.МестаВыполненияКриптографическихОпераций.НаСервере);
		Исключение
			ТекстСообщения = НСтр("ru='Операция не выполнена'", КодЯзыка);
			ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	КонецЕсли;
	
	ЭСФСервер.СохранитьПараметрыПодключенияКСерверуИСЭСФ(ЭСФСервер.ПустыеПараметрыПодключенияКСерверуИСЭСФ());
	
	ОбновитьПовторноИспользуемыеЗначения();
	
	ЗаполнитьСписокРегламентированныхОтчетов();
	
	// Создадим профили по умолчанию
	ЗаполнитьПрофилиИГруппыДоступаПоУмолчанию();
	

КонецПроцедуры

Процедура ПервыйЗапускРазделенныеДанные() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
		
	Если ЗначениеЗаполнено(Константы.УдалитьНомерВерсииКонфигурации.Получить()) Тогда 
		Обработки.ФункциональностьПрограммы.УстановитьФункциональностьПриОбновлении();
		Возврат; // Переход с версии 2.0
	КонецЕсли;
	
	КодЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	
	// Обязательное начальное заполнение информационной базы.
	
	// Заполнение данных для механизма контактной информации
	ЗаполнитьШаблоныТелефонныхНомеровПоУмолчанию();
	ЗаполнитьСправочникВидыКонтактнойИнформации();
	
	// Заполнение справочника "Валюты"
	ВалютаРегламентированногоУчета = НайтиСоздатьВалюту("398", "KZT", "Казахстанский тенге", "тенге, тенге, тенге, м, тиын, тиын, тиын, м, 2");
	Константы.ВалютаРегламентированногоУчета.Установить(ВалютаРегламентированногоУчета);
	
	// Заполнение сведений бухгалтерского и налогового учета.
	ЗаполнитьРегистрыСчетовУчета();
	УставновитьПараметрыСчетовБУиНУ();
		
	// Заполнение справочника НалогиСборыОтчисления и регистра ставок
	ЗаполнитьНалогиСборыОтчисления();
	ЗаполнитьКоэффициентыСтавкиРефинансированияНБДляРасчетаПени();
	ЗаполнитьСрокиПеречисленияНалоговСборовОтчислений();
		
	ЗаполнитьОснованияУвольнения();
	ЗаполнитьПланыВидовРасчетаОрганизации();
	
	// Обязательное начальное заполнение информационной базы для торгового учета.
	
	//заполним признак "Учет ВР" в плане счетов "Налоговый" по умолчанию для
	//счетов, в которых автоматизирована "замкнутая" схема
	ЗаполнитьПризнакУчетВРВПланеСчетовНалоговый();
	
	//Заполним реквизит "Счет НУ"  плана счетов "Типовой" соответсвием из макета 
	//документа "Установка соответсвия счетов БУ и НУ"
	ЗаполнитьСоответствиеСчетовБУиНУпоУмолчанию();
	
	// Производственный учет
	ЗаполнитьСоответствиеСчетовПроизводстваСчетамНезавершенногоПроизводства();
	
	// Заполнение реквизитов справочника "ВидыРеализации"
	ВидРеализации = Справочники.ВидыРеализации.ВозвратТМЗ.ПолучитьОбъект();
	ВидРеализации.ПолноеНаименование   = ВидРеализации.Наименование;
	ВидРеализации.ПризнакКорректировки = Истина;
	ВидРеализации.Записать();
	
	ВидРеализации = Справочники.ВидыРеализации.РеализацияТМЗ.ПолучитьОбъект();
	ВидРеализации.ПолноеНаименование   = ВидРеализации.Наименование;
	ВидРеализации.ПризнакКорректировки = Ложь;
	ВидРеализации.Записать();
	
	// Заполнение реквизитов справочника "ВидыПоступления"
	ВидПоступления = Справочники.ВидыПоступления.ВозвратТМЗ.ПолучитьОбъект();
	ВидПоступления.ПолноеНаименование   = ВидПоступления.Наименование;
	ВидПоступления.ПризнакКорректировки = Истина;
	ВидПоступления.Записать();
	
	ВидПоступления = Справочники.ВидыПоступления.ПриобретениеТМЗ.ПолучитьОбъект();
	ВидПоступления.ПолноеНаименование   = ВидПоступления.Наименование;
	ВидПоступления.ПризнакКорректировки = Ложь;
	ВидПоступления.Записать();
	
	// Заполнение реквизитов справочника "СтатьиЗатрат"
	СтатьяЗатрат = Справочники.СтатьиЗатрат.КурсовыеРазницы.ПолучитьОбъект();
	СтатьяЗатрат.КатегорияЗатрат   		  =	Перечисления.КатегорииЗатрат.ПрочиеРасходы;
	СтатьяЗатрат.ПринятиеКНалоговомуУчету =	Истина;
	СтатьяЗатрат.ВидРасходовНУ			  =	Справочники.ВидыРасходовНУ.ПрочиеРасходыНаВычет;
	СтатьяЗатрат.Записать();
	
	СтатьяЗатрат = Справочники.СтатьиЗатрат.НДСНеПринятыйКЗачету.ПолучитьОбъект();
	СтатьяЗатрат.КатегорияЗатрат   		  = Перечисления.КатегорииЗатрат.ПрочиеРасходы;
	СтатьяЗатрат.ПринятиеКНалоговомуУчету =	Истина;
	СтатьяЗатрат.ВидРасходовНУ			  =	Справочники.ВидыРасходовНУ.ПрочиеРасходыНаВычет;
	СтатьяЗатрат.Записать();
	
	СтатьяЗатрат = Справочники.СтатьиЗатрат.ПеняПоОПВ.ПолучитьОбъект();
	СтатьяЗатрат.КатегорияЗатрат   		  = Перечисления.КатегорииЗатрат.ПрочиеРасходы;
	СтатьяЗатрат.ПринятиеКНалоговомуУчету =	Истина;
	СтатьяЗатрат.ВидРасходовНУ			  =	Справочники.ВидыРасходовНУ.ПрочиеРасходыНаВычет;
	СтатьяЗатрат.Записать();
	
	СтатьяЗатрат = Справочники.СтатьиЗатрат.ПеняПоСО.ПолучитьОбъект();
	СтатьяЗатрат.КатегорияЗатрат   		  = Перечисления.КатегорииЗатрат.ПрочиеРасходы;
	СтатьяЗатрат.ПринятиеКНалоговомуУчету =	Истина;
	СтатьяЗатрат.ВидРасходовНУ			  =	Справочники.ВидыРасходовНУ.ПрочиеРасходыНаВычет;
	СтатьяЗатрат.Записать();
	
	СтатьяЗатрат = Справочники.СтатьиЗатрат.ПеняПоОППВ.ПолучитьОбъект();
	СтатьяЗатрат.КатегорияЗатрат   		  = Перечисления.КатегорииЗатрат.ПрочиеРасходы;
	СтатьяЗатрат.ПринятиеКНалоговомуУчету =	Истина;
	СтатьяЗатрат.ВидРасходовНУ			  =	Справочники.ВидыРасходовНУ.ПрочиеРасходыНаВычет;
	СтатьяЗатрат.Записать();
	
	СтатьяЗатрат = Справочники.СтатьиЗатрат.ПеняПоОПВР.ПолучитьОбъект();
	СтатьяЗатрат.КатегорияЗатрат   		  = Перечисления.КатегорииЗатрат.ПрочиеРасходы;
	СтатьяЗатрат.ПринятиеКНалоговомуУчету =	Истина;
	СтатьяЗатрат.ВидРасходовНУ			  =	Справочники.ВидыРасходовНУ.ПрочиеРасходыНаВычет;
	СтатьяЗатрат.Записать();
	
	СтатьяЗатрат = Справочники.СтатьиЗатрат.ПеняПоВОСМС.ПолучитьОбъект();
	СтатьяЗатрат.КатегорияЗатрат   		  = Перечисления.КатегорииЗатрат.ПрочиеРасходы;
	СтатьяЗатрат.ПринятиеКНалоговомуУчету =	Истина;
	СтатьяЗатрат.ВидРасходовНУ			  =	Справочники.ВидыРасходовНУ.ПрочиеРасходыНаВычет;
	СтатьяЗатрат.Записать();
	
	СтатьяЗатрат = Справочники.СтатьиЗатрат.ПеняПоООСМС.ПолучитьОбъект();
	СтатьяЗатрат.КатегорияЗатрат   		  = Перечисления.КатегорииЗатрат.ПрочиеРасходы;
	СтатьяЗатрат.ПринятиеКНалоговомуУчету =	Истина;
	СтатьяЗатрат.ВидРасходовНУ			  =	Справочники.ВидыРасходовНУ.ПрочиеРасходыНаВычет;
	СтатьяЗатрат.Записать();
	
	СтатьяЗатрат = Справочники.СтатьиЗатрат.ПеняПоЕП.ПолучитьОбъект();
	СтатьяЗатрат.КатегорияЗатрат   		  = Перечисления.КатегорииЗатрат.ПрочиеРасходы;
	СтатьяЗатрат.ПринятиеКНалоговомуУчету =	Истина;
	СтатьяЗатрат.ВидРасходовНУ			  =	Справочники.ВидыРасходовНУ.ПрочиеРасходыНаВычет;
	СтатьяЗатрат.Записать();
	
	СтатьяЗатрат = Справочники.СтатьиЗатрат.РасходыПриОбменеВалюты.ПолучитьОбъект();
	СтатьяЗатрат.КатегорияЗатрат   		  = Перечисления.КатегорииЗатрат.ПрочиеРасходы;
	СтатьяЗатрат.ПринятиеКНалоговомуУчету =	Истина;
	СтатьяЗатрат.ВидРасходовНУ			  =	Справочники.ВидыРасходовНУ.ПрочиеРасходыНаВычет;
	СтатьяЗатрат.Записать();
	
	СтатьяЗатрат = Справочники.СтатьиЗатрат.СоциальныеОтчисления.ПолучитьОбъект();
	СтатьяЗатрат.КатегорияЗатрат   		  = Перечисления.КатегорииЗатрат.ПрочиеРасходы;
	СтатьяЗатрат.ПринятиеКНалоговомуУчету = Истина;
	СтатьяЗатрат.ВидРасходовНУ			  = Справочники.ВидыРасходовНУ.ПрочиеРасходыНаВычет;
	СтатьяЗатрат.Записать();
	
	СтатьяЗатрат = Справочники.СтатьиЗатрат.СоциальныйНалог.ПолучитьОбъект();
	СтатьяЗатрат.КатегорияЗатрат   		  = Перечисления.КатегорииЗатрат.ПрочиеРасходы;
	СтатьяЗатрат.ПринятиеКНалоговомуУчету =	Истина;
	СтатьяЗатрат.ВидРасходовНУ			  =	Справочники.ВидыРасходовНУ.НалогиВГосБюджет;
	СтатьяЗатрат.Записать();
	
	СтатьяЗатрат = Справочники.СтатьиЗатрат.ОбязательныеПрофессиональныеПенсионныеВзносы.ПолучитьОбъект();
	СтатьяЗатрат.КатегорияЗатрат   		  = Перечисления.КатегорииЗатрат.ПрочиеРасходы;
	СтатьяЗатрат.ПринятиеКНалоговомуУчету =	Истина;
	СтатьяЗатрат.ВидРасходовНУ			  =	Справочники.ВидыРасходовНУ.ПрочиеРасходыНаВычет;
	СтатьяЗатрат.Записать();
	
	СтатьяЗатрат = Справочники.СтатьиЗатрат.ОбязательныеПенсионныеВзносыРаботодателя.ПолучитьОбъект();
	СтатьяЗатрат.КатегорияЗатрат   		  = Перечисления.КатегорииЗатрат.ПрочиеРасходы;
	СтатьяЗатрат.ПринятиеКНалоговомуУчету =	Истина;
	СтатьяЗатрат.ВидРасходовНУ			  =	Справочники.ВидыРасходовНУ.ПрочиеРасходыНаВычет;
	СтатьяЗатрат.Записать();
	
	СтатьяЗатрат = Справочники.СтатьиЗатрат.ОтчисленияОСМС.ПолучитьОбъект();
	СтатьяЗатрат.КатегорияЗатрат   		  = Перечисления.КатегорииЗатрат.ПрочиеРасходы;
	СтатьяЗатрат.ПринятиеКНалоговомуУчету =	Истина;
	СтатьяЗатрат.ВидРасходовНУ			  =	Справочники.ВидыРасходовНУ.ПрочиеРасходыНаВычет;
	СтатьяЗатрат.Записать();
	
	СтатьяЗатрат = Справочники.СтатьиЗатрат.АмортизацияФА.ПолучитьОбъект();
	СтатьяЗатрат.ПринятиеКНалоговомуУчету = Истина;
	СтатьяЗатрат.КатегорияЗатрат		  = Перечисления.КатегорииЗатрат.ПрочиеРасходы;
	СтатьяЗатрат.ВидРасходовНУ			  = Справочники.ВидыРасходовНУ.Амортизация; 
	СтатьяЗатрат.Записать();
	
	СтатьяЗатрат = Справочники.СтатьиЗатрат.СписаниеПриВыбытииВсехФАГруппы.ПолучитьОбъект();
	СтатьяЗатрат.ПринятиеКНалоговомуУчету = Истина;
	СтатьяЗатрат.КатегорияЗатрат		  = Перечисления.КатегорииЗатрат.ПрочиеРасходы;
	СтатьяЗатрат.ВидРасходовНУ			  = Справочники.ВидыРасходовНУ.ПрочиеРасходыНаВычет; 
	СтатьяЗатрат.Записать();
	
	СтатьяЗатрат = Справочники.СтатьиЗатрат.СписаниеСтоимостногоБалансаГруппыМенееМинимума.ПолучитьОбъект();
	СтатьяЗатрат.ПринятиеКНалоговомуУчету = Истина;
	СтатьяЗатрат.КатегорияЗатрат		  = Перечисления.КатегорииЗатрат.ПрочиеРасходы;
	СтатьяЗатрат.ВидРасходовНУ			  = Справочники.ВидыРасходовНУ.ПрочиеРасходыНаВычет; 
	СтатьяЗатрат.Записать();
	
	СтатьяЗатрат = Справочники.СтатьиЗатрат.РасходыПоПереоценкеВнеоборотныхАктивов.ПолучитьОбъект();
	СтатьяЗатрат.ПринятиеКНалоговомуУчету = Ложь;
	СтатьяЗатрат.КатегорияЗатрат		  = Перечисления.КатегорииЗатрат.ПрочиеРасходы;		
	СтатьяЗатрат.Записать();
	
	СтатьяЗатрат = Справочники.СтатьиЗатрат.РасходыПоНалогуНаПрибыль.ПолучитьОбъект();
	СтатьяЗатрат.ПринятиеКНалоговомуУчету = Ложь;
	СтатьяЗатрат.КатегорияЗатрат		  = Перечисления.КатегорииЗатрат.ПрочиеРасходы;		
	СтатьяЗатрат.Записать();
	
	СтатьяЗатрат = Справочники.СтатьиЗатрат.УсловныеРасходыПоНалогуНаПрибыль.ПолучитьОбъект();
	СтатьяЗатрат.ПринятиеКНалоговомуУчету = Ложь;
	СтатьяЗатрат.КатегорияЗатрат		  = Перечисления.КатегорииЗатрат.ПрочиеРасходы;		
	СтатьяЗатрат.Записать();
	  	
	СтатьяЗатрат = Справочники.СтатьиЗатрат.СписаниеСтоимостиОбъектаПреференций.ПолучитьОбъект();
	СтатьяЗатрат.КатегорияЗатрат		  = Перечисления.КатегорииЗатрат.ПрочиеРасходы;
	СтатьяЗатрат.ПринятиеКНалоговомуУчету = Истина;
	СтатьяЗатрат.ВидРасходовНУ			  = Справочники.ВидыРасходовНУ.ПрочиеРасходыНаВычет;
	СтатьяЗатрат.Записать();
	
	СтатьяЗатрат = Справочники.СтатьиЗатрат.УменьшениеВычетаПоПР.ПолучитьОбъект();
	СтатьяЗатрат.КатегорияЗатрат		  = Перечисления.КатегорииЗатрат.ПрочиеРасходы;
	СтатьяЗатрат.ПринятиеКНалоговомуУчету = Истина;
	СтатьяЗатрат.ВидРасходовНУ			  = Справочники.ВидыРасходовНУ.ПрочиеРасходыНаВычет;
	СтатьяЗатрат.Записать();
	
	СтатьяЗатрат = Справочники.СтатьиЗатрат.ПрочиеРасходы.ПолучитьОбъект();
	СтатьяЗатрат.КатегорияЗатрат   		  =	Перечисления.КатегорииЗатрат.ПрочиеРасходы;
	СтатьяЗатрат.ПринятиеКНалоговомуУчету =	Истина;
	СтатьяЗатрат.ВидРасходовНУ			  =	Справочники.ВидыРасходовНУ.ПрочиеРасходыНаВычет;
	СтатьяЗатрат.Записать();
	
	// Заполнение справочника "КлассификаторЕдиницИзмерения"
	ЕдиницаИзмеренияВеса = НайтиСоздатьЕдиницу("166", НСтр("ru = 'кг'", КодЯзыка), НСтр("ru = 'Килограмм'", КодЯзыка));
	ЕдиницаПоУмолчанию   = НайтиСоздатьЕдиницу("796", НСтр("ru = 'шт'", КодЯзыка), НСтр("ru = 'Штука'", КодЯзыка));
	
	ЭСФСерверПереопределяемый.ЗаполнитьКодыЭСФЕдиницИзмерения();
		
	ЗаполнитьСправочникНоменклатура();
		
	// Установим тип материала в справочнике ВидыНоменклатуры
	ВидНоменклатуры 		  = Справочники.ВидыНоменклатуры.ГотоваяПродукция.ПолучитьОбъект();
	ВидНоменклатуры.ГруппаТМЗ = Перечисления.ГруппыТМЗ.ГотоваяПродукция;	
	ВидНоменклатуры.Записать();
	
	ВидНоменклатуры 		  = Справочники.ВидыНоменклатуры.Прочее.ПолучитьОбъект();
	ВидНоменклатуры.ГруппаТМЗ = Перечисления.ГруппыТМЗ.Прочее;	
	ВидНоменклатуры.Записать();
	
	ВидНоменклатуры 		  = Справочники.ВидыНоменклатуры.ПрочиеТовары.ПолучитьОбъект();
	ВидНоменклатуры.ГруппаТМЗ = Перечисления.ГруппыТМЗ.ПрочиеТовары;	
	ВидНоменклатуры.Записать();

	ВидНоменклатуры 		  = Справочники.ВидыНоменклатуры.СырьеИМатериалы.ПолучитьОбъект();
	ВидНоменклатуры.ГруппаТМЗ = Перечисления.ГруппыТМЗ.СырьеИМатериалы;	
	ВидНоменклатуры.Записать();
	
	ВидНоменклатуры 		  = Справочники.ВидыНоменклатуры.ТоварыПриобретенные.ПолучитьОбъект();
	ВидНоменклатуры.ГруппаТМЗ = Перечисления.ГруппыТМЗ.ТоварыПриобретенные;	
	ВидНоменклатуры.Записать();
	
	ВидНоменклатуры 		  = Справочники.ВидыНоменклатуры.Топливо.ПолучитьОбъект();
	ВидНоменклатуры.ГруппаТМЗ = Перечисления.ГруппыТМЗ.Топливо;	
	ВидНоменклатуры.Записать();
			
	ЗаполнениеОтраженияНачисленийПоУмолчанию();	
	
	// Заполнение справочника "Классификатор стран мира"
	НачальноеЗаполнениеСправочникаКлассификаторСтранМира();
	
	// Заполнение справочника Корреспонденций
	ЗаполнитьСправочникКорреспонденций();     
	
	// Заполнение реквизитов справочника "ВидыПрочихВыплат"
	ЗаполнениеСправочникаВидыПрочихВыплатПоУмолчанию(); 	
	
	// Заполнение данных о способах отражения курсовой разницы
	Набор = РегистрыСведений.СпособыОтраженияКурсовойРазницы.СоздатьНаборЗаписей();		
	Набор.Отбор.Организация.Значение      = Справочники.Организации.ПустаяСсылка();
	Набор.Отбор.Организация.Использование = Истина;
	Набор.Отбор.Счет.Значение      		  = ПланыСчетов.Типовой.ПустаяСсылка();
	Набор.Отбор.Счет.Использование 		  = Истина;
	
	Запись = Набор.Добавить();
	Запись.СчетДоходовБУ  	  = ПланыСчетов.Типовой.ДоходыОтКурсовойРазницы;
	Запись.СубконтоДоходовБУ1 = Справочники.Доходы.КурсовыеРазницы;
	Запись.СчетДоходовНУ  	  = ПланыСчетов.Налоговый.ДоходОтКурсовойРазницы;
	Запись.СубконтоДоходовНУ1 = Справочники.Доходы.КурсовыеРазницы;
	
	Запись.СчетРасходовБУ 	   = ПланыСчетов.Типовой.РасходыПоКурсовойРазнице;
	Запись.СубконтоРасходовБУ1 = Справочники.СтатьиЗатрат.КурсовыеРазницы;
	Запись.СчетРасходовНУ 	   = ПланыСчетов.НАлоговый.РасходыПоКурсовойРазнице;
	Запись.СубконтоРасходовНУ1 = Справочники.СтатьиЗатрат.КурсовыеРазницы;
	Набор.Записать();
	
	ЗаполнениеСправочникаВидыПервичныхДокументовНачальнымиДанными();	    
		
	ВестиУчетПоСотрудникам = Истина;
	
	// инициализация списка счетов, на которых можно устанавливать дополнительную аналитику "Работники организации"
	СчетаЗП = Новый СписокЗначений;
	// счета кредиторской задолженности
	СчетаЗП.Добавить(ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПоОплатеТруда); //3350
	СчетаЗП.Добавить(ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПоДепонированнойЗаработнойПлате); //3394
	СчетаЗП.Добавить(ПланыСчетов.Типовой.ОбязательстваПоСоциальномуСтрахованию); //3211
	СчетаЗП.Добавить(ПланыСчетов.Типовой.ОбязательстваПоВзносамОСМС); //3212
	СчетаЗП.Добавить(ПланыСчетов.Типовой.ОбязательстваПоОтчислениямОСМС); //3213
	СчетаЗП.Добавить(ПланыСчетов.Типовой.ОбязательстваПоПенсионнымОтчислениям); //3220
	СчетаЗП.Добавить(ПланыСчетов.Типовой.ОбязательстваПоЕдиномуПлатежу); //3231 
	СчетаЗП.Добавить(ПланыСчетов.Типовой.КраткосрочныеОценочныеОбязательстваПоВознаграждениямРаботникам); //3430
	СчетаЗП.Добавить(ПланыСчетов.Налоговый.КраткосрочныеОценочныеОбязательстваПоВознаграждениямРаботникам); //3430Н
	СчетаЗП.Добавить(ПланыСчетов.Типовой.ДолгосрочнаяЗадолженностьПоДепонированнойЗаработнойПлате); //4174
	СчетаЗП.Добавить(ПланыСчетов.Типовой.ДолгосрочныеОценочныеОбязательстваПоВознаграждениямРаботникам); //4230
	// счета дебиторской задолженности
	СчетаЗП.Добавить(ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПоВыплаченнойЗаработнойПлате); //1252
	СчетаЗП.Добавить(ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПоПредоставленнымРаботникамЗаймам); //1253
	СчетаЗП.Добавить(ПланыСчетов.Типовой.ПрочаяКраткосрочнаяЗадолженностьРаботников); //1254
	СчетаЗП.Добавить(ПланыСчетов.Типовой.КраткосрочныеВознагражденияКПолучениюРаботникам); //1272
	СчетаЗП.Добавить(ПланыСчетов.Типовой.ДолгосрочнаяЗадолженностьПоВыплаченнойЗаработнойПлате); //2152
	СчетаЗП.Добавить(ПланыСчетов.Налоговый.ВзаиморасчетыСРаботниками); //3350Н (Н460)
	СчетаЗП.Добавить(ПланыСчетов.Налоговый.ОбязательстваПоСоциальномуСтрахованию); // 3211Н
	СчетаЗП.Добавить(ПланыСчетов.Налоговый.ОбязательстваПоВзносамОСМС); // 3212Н
	СчетаЗП.Добавить(ПланыСчетов.Налоговый.ОбязательстваПоОтчислениямОСМС); // 3213Н
	СчетаЗП.Добавить(ПланыСчетов.Налоговый.ОбязательстваПоПенсионнымОтчислениям);  // 3220Н
	СчетаЗП.Добавить(ПланыСчетов.Налоговый.ОбязательстваПоЕдиномуПлатежу); //3231Н
	
	Для каждого Счет Из СчетаЗП Цикл
		Если ТипЗнч(Счет.Значение) = Тип("ПланСчетовСсылка.Налоговый") Тогда
			ИмяПланаСчетов = "Налоговый";
		Иначе
			ИмяПланаСчетов = "Типовой";
		КонецЕсли;
		ПрименитьПараметрыСубконтоРаботникиОрганизации(Счет.Значение, ИмяПланаСчетов, ВестиУчетПоСотрудникам, Ложь);
	КонецЦикла;
		
	// Заполнение справочника "СтавкиРозничногоНалога"
	НайтиСоздатьСтавкуРозничногоНалога("4%", 4);
	НайтиСоздатьСтавкуРозничногоНалога("8%", 8);
		
	// Заполнение регистра сведений "СведенияОСтавкахРозничногоНалога"
	СтавкаПоУмолчанию = 8; // 8%
	ДобавитьСведенияОСтавкеРозничногоНалога(СтавкаПоУмолчанию);
	
	Константы.ДатаПрекращенияВыводаРННВПервичныхДокументах.Установить("20130101");
	
	Константы.НачалоРаботы.Установить(Истина);
		
КонецПроцедуры

// Заполнение реквизитов справочника "Виды контактной информации"
//
Процедура ЗаполнитьСправочникВидыКонтактнойИнформации()

	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда // В подчиненных узлах РИБ не выполняется
		Возврат;
	КонецЕсли;

	// Физ.лица
	ОбъектВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ЮрАдресФизЛица.ПолучитьОбъект();
	ОбъектВидКонтактнойИнформации.Тип							 = Перечисления.ТипыКонтактнойИнформации.Адрес;
	ОбъектВидКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = Перечисления.ВидыОбъектовКонтактнойИнформации.ФизическиеЛица;
	ОбъектВидКонтактнойИнформации.Записать();

	ОбъектВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ФактАдресФизЛица.ПолучитьОбъект();
	ОбъектВидКонтактнойИнформации.Тип 							 = Перечисления.ТипыКонтактнойИнформации.Адрес;
	ОбъектВидКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = Перечисления.ВидыОбъектовКонтактнойИнформации.ФизическиеЛица;
	ОбъектВидКонтактнойИнформации.Записать();

	ОбъектВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ТелефонФизЛица.ПолучитьОбъект();
	ОбъектВидКонтактнойИнформации.Тип							 = Перечисления.ТипыКонтактнойИнформации.Телефон;
	ОбъектВидКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = Перечисления.ВидыОбъектовКонтактнойИнформации.ФизическиеЛица;
	ОбъектВидКонтактнойИнформации.Записать();
	
	ОбъектВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ТелефонСлужебный.ПолучитьОбъект();
	ОбъектВидКонтактнойИнформации.Тип							 = Перечисления.ТипыКонтактнойИнформации.Телефон;
	ОбъектВидКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = Перечисления.ВидыОбъектовКонтактнойИнформации.ФизическиеЛица;
	ОбъектВидКонтактнойИнформации.Записать();

	ОбъектВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ИнформАдресФизЛица.ПолучитьОбъект();
	ОбъектВидКонтактнойИнформации.Тип							 = Перечисления.ТипыКонтактнойИнформации.Адрес;
	ОбъектВидКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = Перечисления.ВидыОбъектовКонтактнойИнформации.ФизическиеЛица;
	ОбъектВидКонтактнойИнформации.Записать();

	ОбъектВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ИнострАдресФизЛица.ПолучитьОбъект();
	ОбъектВидКонтактнойИнформации.Тип							 = Перечисления.ТипыКонтактнойИнформации.Адрес;
	ОбъектВидКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = Перечисления.ВидыОбъектовКонтактнойИнформации.ФизическиеЛица;
	ОбъектВидКонтактнойИнформации.Записать();

	// Контрагенты
	ОбъектВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента.ПолучитьОбъект();
	ОбъектВидКонтактнойИнформации.Тип							 = Перечисления.ТипыКонтактнойИнформации.Адрес;
	ОбъектВидКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = Перечисления.ВидыОбъектовКонтактнойИнформации.Контрагенты;
	ОбъектВидКонтактнойИнформации.Записать();

	ОбъектВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента.ПолучитьОбъект();
	ОбъектВидКонтактнойИнформации.Тип							 = Перечисления.ТипыКонтактнойИнформации.Адрес;
	ОбъектВидКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = Перечисления.ВидыОбъектовКонтактнойИнформации.Контрагенты;
	ОбъектВидКонтактнойИнформации.Записать();

	ОбъектВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента.ПолучитьОбъект();
	ОбъектВидКонтактнойИнформации.Тип							 = Перечисления.ТипыКонтактнойИнформации.Телефон;
	ОбъектВидКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = Перечисления.ВидыОбъектовКонтактнойИнформации.Контрагенты;
	ОбъектВидКонтактнойИнформации.Записать();

	// Организации
	ОбъектВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации.ПолучитьОбъект();
	ОбъектВидКонтактнойИнформации.Тип							 = Перечисления.ТипыКонтактнойИнформации.Адрес;
	ОбъектВидКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = Перечисления.ВидыОбъектовКонтактнойИнформации.Организации;
	ОбъектВидКонтактнойИнформации.Записать();

	ОбъектВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации.ПолучитьОбъект();
	ОбъектВидКонтактнойИнформации.Тип							 = Перечисления.ТипыКонтактнойИнформации.Адрес;
	ОбъектВидКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = Перечисления.ВидыОбъектовКонтактнойИнформации.Организации;
	ОбъектВидКонтактнойИнформации.Записать();

	ОбъектВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации.ПолучитьОбъект();
	ОбъектВидКонтактнойИнформации.Тип							 = Перечисления.ТипыКонтактнойИнформации.Телефон;
	ОбъектВидКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = Перечисления.ВидыОбъектовКонтактнойИнформации.Организации;
	ОбъектВидКонтактнойИнформации.Записать();
	
	ОбъектВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ФаксОрганизации.ПолучитьОбъект();
	ОбъектВидКонтактнойИнформации.Тип							 = Перечисления.ТипыКонтактнойИнформации.Телефон;
	ОбъектВидКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = Перечисления.ВидыОбъектовКонтактнойИнформации.Организации;
	ОбъектВидКонтактнойИнформации.Записать();
	
	ОбъектВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ТелефонПоЮрАдресуОрганизации.ПолучитьОбъект();
	ОбъектВидКонтактнойИнформации.Тип							 = Перечисления.ТипыКонтактнойИнформации.Телефон;
	ОбъектВидКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = Перечисления.ВидыОбъектовКонтактнойИнформации.Организации;
	ОбъектВидКонтактнойИнформации.Записать();
	
	ОбъектВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.АдресОрганизацииПочтовый.ПолучитьОбъект();
	ОбъектВидКонтактнойИнформации.Тип							 = Перечисления.ТипыКонтактнойИнформации.Адрес;
	ОбъектВидКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = Перечисления.ВидыОбъектовКонтактнойИнформации.Организации;
	ОбъектВидКонтактнойИнформации.Записать();
	
	ОбъектВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.АдресИнострОрганизацииУчред.ПолучитьОбъект();
	ОбъектВидКонтактнойИнформации.Тип 							 = Перечисления.ТипыКонтактнойИнформации.Адрес;
	ОбъектВидКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = Перечисления.ВидыОбъектовКонтактнойИнформации.Организации;
	ОбъектВидКонтактнойИнформации.Записать();
	
	СписокПредопределенныхЭлементов = Новый СписокЗначений;
	СписокПредопределенныхЭлементов.Добавить(Справочники.ВидыКонтактнойИнформации.ФаксОрганизации);
	СписокПредопределенныхЭлементов.Добавить(Справочники.ВидыКонтактнойИнформации.ТелефонПоЮрАдресуОрганизации);
	СписокПредопределенныхЭлементов.Добавить(Справочники.ВидыКонтактнойИнформации.АдресОрганизацииПочтовый);
	СписокПредопределенныхЭлементов.Добавить(Справочники.ВидыКонтактнойИнформации.АдресИнострОрганизацииУчред);
	СписокПредопределенныхЭлементов.Добавить(Справочники.ВидыКонтактнойИнформации.ТелефонСлужебный);
	УстановитьЗначениеКодаПредопределенныхЭлементов(СписокПредопределенныхЭлементов);
	
	// Пользователи
	ОбъектВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.СлужебныйАдресЭлектроннойПочтыПользователя.ПолучитьОбъект();
	ОбъектВидКонтактнойИнформации.Тип 							 = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
	ОбъектВидКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = Перечисления.ВидыОбъектовКонтактнойИнформации.Пользователи;
	ОбъектВидКонтактнойИнформации.Записать();

	//Контактные лица.
	ОбъектВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ИнформАдресКонтактногоЛица.ПолучитьОбъект();
	ОбъектВидКонтактнойИнформации.Тип							 = Перечисления.ТипыКонтактнойИнформации.Адрес;
	ОбъектВидКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = Перечисления.ВидыОбъектовКонтактнойИнформации.КонтактныеЛица;
	ОбъектВидКонтактнойИнформации.Записать();

	ОбъектВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица.ПолучитьОбъект();
	ОбъектВидКонтактнойИнформации.Тип 							 = Перечисления.ТипыКонтактнойИнформации.Телефон;
	ОбъектВидКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = Перечисления.ВидыОбъектовКонтактнойИнформации.КонтактныеЛица;
	ОбъектВидКонтактнойИнформации.Записать();

	ОбъектВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ТелефонМобильный.ПолучитьОбъект();
	ОбъектВидКонтактнойИнформации.Тип 							 = Перечисления.ТипыКонтактнойИнформации.Телефон;
	ОбъектВидКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = Перечисления.ВидыОбъектовКонтактнойИнформации.КонтактныеЛица;
	ОбъектВидКонтактнойИнформации.Записать();

КонецПроцедуры // ЗаполнитьСправочникВидыКонтактнойИнформации()

// Процедура заполняет константу шаблонов телефонов.
// 
Процедура ЗаполнитьШаблоныТелефонныхНомеровПоУмолчанию()

	ТаблицаСоответствий = Новый Соответствие;
	ТаблицаСоответствий.Вставить(7,"999-99-99");
	ТаблицаСоответствий.Вставить(6,"99-99-99");
	ТаблицаСоответствий.Вставить(5,"9-99-99");
	ТаблицаСоответствий.Вставить(4,"99-99");

	ХранилищеШаблоновТелефонов = Новый ХранилищеЗначения(ТаблицаСоответствий);

	Константы.ШаблоныТелефонныхНомеров.Установить(ХранилищеШаблоновТелефонов);

КонецПроцедуры // укЗаполнитьДанныеПоУмолчаниюДляКонтактнойИнформации()

// Процедура изменяет ставшие неуникальными коды предопределенных элементов
//
Процедура УстановитьЗначениеКодаПредопределенныхЭлементов(СписокПредопределенныхЭлементов)
	
	МассивЭлементов = Новый Массив;
	
	Пока СписокПредопределенныхЭлементов.Количество()>0 Цикл
		
		МассивЭлементов.Очистить();
		КолвоЭлементовВСписке = СписокПредопределенныхЭлементов.Количество();
		ТекушийТипЗначения = ТипЗнч(СписокПредопределенныхЭлементов [КолвоЭлементовВСписке-1].Значение);
		
		МетаданныеТипа = Метаданные.НайтиПоТипу(ТекушийТипЗначения);
		ЕСли МетаданныеТипа.ДлинаКода = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Для ОбратныйИндекс = 1 По КолвоЭлементовВСписке Цикл
			ЭлементСписка = СписокПредопределенныхЭлементов [КолвоЭлементовВСписке - ОбратныйИндекс];
			
			Если ТипЗнч(ЭлементСписка.Значение) = ТекушийТипЗначения Тогда
				МассивЭлементов.Добавить(ЭлементСписка.Значение);
				СписокПредопределенныхЭлементов.Удалить(ЭлементСписка);
			КонецЕсли;			
		КонецЦикла;
		
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	Предопределенные.Ссылка
		|ИЗ
		|	" + МетаданныеТипа.ПолноеИмя() + " КАК Предопределенные
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ " + МетаданныеТипа.ПолноеИмя() + " КАК Пользовательские
		|		ПО Предопределенные.Код = Пользовательские.Код
		|
		|ГДЕ
		|	Предопределенные.Ссылка В(&СписокЭлементов)
		|    И Пользовательские.Ссылка НЕ В(&СписокЭлементов)";
		
		Запрос.УстановитьПараметр("СписокЭлементов", МассивЭлементов);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Объект = Выборка.Ссылка.ПолучитьОбъект();
			Объект.УстановитьНовыйКод();
			Объект.Записать();
		КонецЦикла;	
		
	КонецЦикла;

КонецПроцедуры

// Процедура изменяет ставшие неуникальными коды непредопределенных элементов
//
Процедура УстановитьНовыеКодыНеПредопределеннымЭлементамСправочника(ИмяСправочника)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Пользовательские.Ссылка,
	|	Представление(Пользовательские.Ссылка) КАК ПредставлениеЭлемента
	|ИЗ
	|	Справочник." + ИмяСправочника + " КАК Предопределенные
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник." + ИмяСправочника + " КАК Пользовательские
	|		ПО Предопределенные.Код = Пользовательские.Код
	|
	|ГДЕ
	|	Предопределенные.Предопределенный И
	|   Не Пользовательские.Предопределенный";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		Объект.УстановитьНовыйКод();
		Попытка
			Объект.Записать();
		Исключение
			ТекстСообщения = НСтр("ru='Операция не выполнена'", ОбщегоНазначения.КодОсновногоЯзыка());
			ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
	КонецЦикла;	 
	
КонецПроцедуры

// Функция создает элемент справочника Валюты, если такого нет.
//
// Параметры:
//  Код -                     - значение соответствующего реквизита справочника,
//  Наименование              - значение соответствующего реквизита справочника,
//  НаименованиеПолное        - значение соответствующего реквизита справочника,
//  ПараметрыПрописиНаРусском - значение соответствующего реквизита справочника.
//
// Возвращаемое значение:
//  Ссылка на добавленный или существующий элемент.
//
Функция НайтиСоздатьВалюту(Код, Наименование, НаименованиеПолное, ПараметрыПрописиНаРусском) Экспорт

	Ссылка = Справочники.Валюты.НайтиПоКоду(Код);

	Если Ссылка.Пустая() Тогда

		СправочникОбъект = Справочники.Валюты.СоздатьЭлемент();

		СправочникОбъект.Код                       = Код;
		СправочникОбъект.БуквенныйКод              = Наименование;
		СправочникОбъект.Наименование              = Наименование;
		СправочникОбъект.НаименованиеПолное        = НаименованиеПолное;
		СправочникОбъект.ПараметрыПрописиНаРусском = ПараметрыПрописиНаРусском;

		ЗаписатьСправочникОбъект(СправочникОбъект);

		Ссылка = СправочникОбъект.Ссылка;

		// установим курс и кратность = 1 на 1 января 1980
		ОбщегоНазначенияБК.ПроверитьКорректностьКурсаНа01_01_1980(Ссылка);

	КонецЕсли;

	Возврат Ссылка;

КонецФункции // НайтиСоздатьВалюту()

// Процедура записывает переданный справочник объект.
// Предназначена для вызова из процедур заполнения и обработки справочников информационной базы.
//
// Параметры:
//  СправочникОбъект - объект, который требуется записать.
//
Процедура ЗаписатьСправочникОбъект(СправочникОбъект) Экспорт

	Если НЕ СправочникОбъект.Модифицированность() Тогда
		Возврат;
	КонецЕсли;

	Попытка
		СправочникОбъект.Записать();
	Исключение
		ТекстСообщения = НСтр("ru='Операция не выполнена'", ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;

КонецПроцедуры

// Заполняет регистры сведения бухгалтерии связанных со счетами учета
//
Процедура ЗаполнитьРегистрыСчетовУчета()

	НачатьТранзакцию();

	Набор  = РегистрыСведений.СчетаУчетаРасчетовСКонтрагентами.СоздатьНаборЗаписей();
	//Запись с пустым измерением ВидРасчетовПоДоговору  - подставляется пока не выбран договор.
	Запись = Набор.Добавить();
	Запись.Организация                         		= Справочники.Организации.ПустаяСсылка();
	Запись.Контрагент                          		= Справочники.Контрагенты.ПустаяСсылка();
	Запись.Договор                             		= Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	Запись.ВидРасчетовПоДоговору               		= Перечисления.ВидыРасчетовПоДоговорам.ПустаяСсылка();
	Запись.СчетУчетаРасчетовСПоставщиком       		= ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПоставщикамИПодрядчикам;
	Запись.СчетУчетаАвансовВыданных            		= ПланыСчетов.Типовой.КраткосрочныеАвансыВыданные;
	Запись.СчетУчетаРасчетовСПокупателем       		= ПланыСчетов.Типовой.КраткосрочнаяДебиторскаяЗадолженностьПокупателейИЗаказчиков;
	Запись.СчетУчетаАвансовПолученных          		= ПланыСчетов.Типовой.КраткосрочныеАвансыПолученные;
	Запись.СчетУчетаРасчетовСПоставщикомПоВозвратам = ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПоВозвратамТМЗПоставщикам;
	Запись.СчетРасчетовСПокупателемПоВозвратам 		= ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПоВозвратамРеализованныхГотовойПродукцииТоваровРаботУслуг;
	//Запись с измерением ВидРасчетовПоДоговору  - РасчетыВВалютеРегламентированногоУчета.
	Запись = Набор.Добавить();
	Запись.Организация                         		= Справочники.Организации.ПустаяСсылка();
	Запись.Контрагент                          		= Справочники.Контрагенты.ПустаяСсылка();
	Запись.Договор                             		= Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	Запись.ВидРасчетовПоДоговору               		= Перечисления.ВидыРасчетовПоДоговорам.РасчетыВВалютеРегламентированногоУчета;
	Запись.СчетУчетаРасчетовСПоставщиком       		= ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПоставщикамИПодрядчикам;
	Запись.СчетУчетаАвансовВыданных            		= ПланыСчетов.Типовой.КраткосрочныеАвансыВыданные;
	Запись.СчетУчетаРасчетовСПокупателем       		= ПланыСчетов.Типовой.КраткосрочнаяДебиторскаяЗадолженностьПокупателейИЗаказчиков;
	Запись.СчетУчетаАвансовПолученных          		= ПланыСчетов.Типовой.КраткосрочныеАвансыПолученные;
	Запись.СчетУчетаРасчетовСПоставщикомПоВозвратам = ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПоВозвратамТМЗПоставщикам;
	Запись.СчетРасчетовСПокупателемПоВозвратам 		= ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПоВозвратамРеализованныхГотовойПродукцииТоваровРаботУслуг;
	//Запись с измерением ВидРасчетовПоДоговору  - РасчетыВИностраннойВалюте.
	Запись = Набор.Добавить();
	Запись.Организация                         		= Справочники.Организации.ПустаяСсылка();
	Запись.Контрагент                          		= Справочники.Контрагенты.ПустаяСсылка();
	Запись.Договор                             		= Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	Запись.ВидРасчетовПоДоговору               		= Перечисления.ВидыРасчетовПоДоговорам.РасчетыВИностраннойВалюте;
	Запись.СчетУчетаРасчетовСПоставщиком       		= ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПоставщикамИПодрядчикам;
	Запись.СчетУчетаАвансовВыданных            		= ПланыСчетов.Типовой.КраткосрочныеАвансыВыданные;
	Запись.СчетУчетаРасчетовСПокупателем       		= ПланыСчетов.Типовой.КраткосрочнаяДебиторскаяЗадолженностьПокупателейИЗаказчиков;
	Запись.СчетУчетаАвансовПолученных          		= ПланыСчетов.Типовой.КраткосрочныеАвансыПолученные;
	Запись.СчетУчетаРасчетовСПоставщикомПоВозвратам = ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПоВозвратамТМЗПоставщикам;
	Запись.СчетРасчетовСПокупателемПоВозвратам 		= ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПоВозвратамРеализованныхГотовойПродукцииТоваровРаботУслуг;
	
	Набор.Записать();

	ЗафиксироватьТранзакцию();

КонецПроцедуры //ЗаполнитьРегистрыСчетовУчета()

// Устанавливает флаг "Запретить использовать в проводках"
//
Процедура УставновитьПараметрыСчетовБУиНУ()

	НачатьТранзакцию();
	
	ВыборкаСчетов = ПланыСчетов.Типовой.ВыбратьИерархически();
	Пока ВыборкаСчетов.Следующий() Цикл

		Если НЕ ЗначениеЗаполнено(ВыборкаСчетов.Ссылка.Родитель) Тогда			
			Продолжить;
		КонецЕсли;

		Объект = ВыборкаСчетов.Ссылка.Родитель.ПолучитьОбъект();
		Если Объект.ЗапретитьИспользоватьВПроводках Тогда
			Продолжить;
		КонецЕсли;

		Объект.ЗапретитьИспользоватьВПроводках = Истина;
		Объект.Записать();

	КонецЦикла;

	ВыборкаСчетов = ПланыСчетов.Налоговый.ВыбратьИерархически();
	Пока ВыборкаСчетов.Следующий() Цикл

		Если НЕ ЗначениеЗаполнено(ВыборкаСчетов.Ссылка.Родитель) Тогда
			Продолжить;
		КонецЕсли;

		Объект = ВыборкаСчетов.Ссылка.Родитель.ПолучитьОбъект();
		Если Объект.ЗапретитьИспользоватьВПроводках Тогда
			Продолжить;
		КонецЕсли;

		Объект.ОбменДанными.Загрузка		   = Истина;
		Объект.ЗапретитьИспользоватьВПроводках = Истина;
		Объект.Записать();

	КонецЦикла;
	
	ЗафиксироватьТранзакцию();

КонецПроцедуры

// Заполняет доп. реквизиты справочника НалогиСборыОтчисления и регистр
// сведений СведенияОСтавкахНалоговСборовОтчислений
//
Процедура ЗаполнитьНалогиСборыОтчисления()

	Типовой   = ПланыСчетов.Типовой;
	Налоговый = ПланыСчетов.Налоговый;
	
	КодЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	// установка счета учета для предопределенных элементов справочника
	СправочникОбъект = Справочники.НалогиСборыОтчисления.ИндивидуальныйПодоходныйНалог.ПолучитьОбъект();
	СправочникОбъект.КодБК 							  = "101201";
	СправочникОбъект.КодНазначенияПлатежа 			  = "911";
	СправочникОбъект.СчетУчетаРасчетовСКонтрагентомБУ = Типовой.ИндивидуальныйПодоходныйНалог;
	СправочникОбъект.СчетУчетаРасчетовСКонтрагентомНУ = Налоговый.ИндивидуальныйПодоходныйНалог;
	СправочникОбъект.НазначениеПлатежа 				  = НСтр("ru = 'Индивидуальный подоходный налог за '", КодЯзыка);
	СправочникОбъект.Записать();

	СправочникОбъект = Справочники.НалогиСборыОтчисления.ИндивидуальныйПодоходныйНалогИностранныеГраждане.ПолучитьОбъект();
	СправочникОбъект.КодБК 							  = "101204";
	СправочникОбъект.КодНазначенияПлатежа 			  = "911";
	СправочникОбъект.СчетУчетаРасчетовСКонтрагентомБУ = Типовой.ИндивидуальныйПодоходныйНалог;
	СправочникОбъект.СчетУчетаРасчетовСКонтрагентомНУ = Налоговый.ИндивидуальныйПодоходныйНалог;
	СправочникОбъект.НазначениеПлатежа 				  = НСтр("ru = 'Индивидуальный подоходный налог за иностранных граждан за '", КодЯзыка);
	СправочникОбъект.Записать();
	
	СправочникОбъект = Справочники.НалогиСборыОтчисления.СоциальныйНалог.ПолучитьОбъект();
	СправочникОбъект.КодБК 							  = "103101";
	СправочникОбъект.КодНазначенияПлатежа 			  = "911";
	СправочникОбъект.СчетУчетаРасчетовСКонтрагентомБУ = Типовой.СоциальныйНалог;
	СправочникОбъект.СчетУчетаРасчетовСКонтрагентомНУ = Налоговый.ПрочиеНалоги;
	СправочникОбъект.НазначениеПлатежа 				  = НСтр("ru = 'Социальный налог за '", КодЯзыка);
	СправочникОбъект.Записать();

	СправочникОбъект = Справочники.НалогиСборыОтчисления.СоциальныйНалогИностранныеСпециалисты.ПолучитьОбъект();
	СправочникОбъект.КодБК 							  = "103101";
	СправочникОбъект.КодНазначенияПлатежа 			  = "911";
	СправочникОбъект.СчетУчетаРасчетовСКонтрагентомБУ = Типовой.СоциальныйНалог;
	СправочникОбъект.СчетУчетаРасчетовСКонтрагентомНУ = Налоговый.ПрочиеНалоги;
	СправочникОбъект.НазначениеПлатежа 				  = НСтр("ru = 'Социальный налог за '", КодЯзыка);
	СправочникОбъект.Записать();

	СправочникОбъект = Справочники.НалогиСборыОтчисления.СоциальныйНалогИнвалиды.ПолучитьОбъект();
	СправочникОбъект.КодБК 							  = "103101";
	СправочникОбъект.КодНазначенияПлатежа 			  = "911";
	СправочникОбъект.СчетУчетаРасчетовСКонтрагентомБУ = Типовой.СоциальныйНалог;
	СправочникОбъект.СчетУчетаРасчетовСКонтрагентомНУ = Налоговый.ПрочиеНалоги;
	СправочникОбъект.НазначениеПлатежа 				  = НСтр("ru = 'Социальный налог за '", КодЯзыка);
	СправочникОбъект.Записать();
	
	СправочникОбъект = Справочники.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносы.ПолучитьОбъект();
	СправочникОбъект.КодБК 							  = "";
	СправочникОбъект.КодНазначенияПлатежа 			  = "010";
	СправочникОбъект.СчетУчетаРасчетовСКонтрагентомБУ = Типовой.ОбязательстваПоПенсионнымОтчислениям;
	СправочникОбъект.СчетУчетаРасчетовСКонтрагентомНУ = Налоговый.ОбязательстваПоПенсионнымОтчислениям;
	СправочникОбъект.НазначениеПлатежа 				  = НСтр("ru = 'Обязательные пенсионные взносы за '", КодЯзыка);
	СправочникОбъект.Записать();
	
	СправочникОбъект = Справочники.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносыРаботодателя.ПолучитьОбъект();
	СправочникОбъект.КодБК 							  = "";
	СправочникОбъект.КодНазначенияПлатежа 			  = "089";
	СправочникОбъект.СчетУчетаРасчетовСКонтрагентомБУ = Типовой.ОбязательстваПоОбязательнымПенсионнымВзносамРаботодателя;
	СправочникОбъект.СчетУчетаРасчетовСКонтрагентомНУ = Налоговый.ОбязательстваПоОбязательнымПенсионнымВзносамРаботодателя;
	СправочникОбъект.НазначениеПлатежа 				  = НСтр("ru = 'Обязательные пенсионные взносы работодателя за '", КодЯзыка);
	СправочникОбъект.Записать();
	
 	СправочникОбъект = Справочники.НалогиСборыОтчисления.ОбязательныеПрофессиональныеПенсионныеВзносы.ПолучитьОбъект();
	СправочникОбъект.КодБК 							  = "";
	СправочникОбъект.КодНазначенияПлатежа 			  = "015";
	СправочникОбъект.СчетУчетаРасчетовСКонтрагентомБУ = Типовой.ОбязательстваПоПенсионнымОтчислениям;
	СправочникОбъект.СчетУчетаРасчетовСКонтрагентомНУ = Налоговый.ОбязательстваПоПенсионнымОтчислениям;
	СправочникОбъект.НазначениеПлатежа 				  = НСтр("ru = 'Обязательные профессиональные пенсионные взносы за '", КодЯзыка);
	СправочникОбъект.Записать();
	
	СправочникОбъект = Справочники.НалогиСборыОтчисления.ОбязательныеСоциальныеОтчисления.ПолучитьОбъект();
	СправочникОбъект.КодБК 							  = "";
	СправочникОбъект.КодНазначенияПлатежа 			  = "012";
	СправочникОбъект.СчетУчетаРасчетовСКонтрагентомБУ = Типовой.ОбязательстваПоСоциальномуСтрахованию;
	СправочникОбъект.СчетУчетаРасчетовСКонтрагентомНУ = Налоговый.ОбязательстваПоСоциальномуСтрахованию;
	СправочникОбъект.НазначениеПлатежа 				  = НСтр("ru = 'Обязательные социальные отчисления за '", КодЯзыка);
	СправочникОбъект.Записать();
	
	СправочникОбъект = Справочники.НалогиСборыОтчисления.НалогНаПрибыль.ПолучитьОбъект();
	СправочникОбъект.КодБК 							  = "101101";
	СправочникОбъект.КодНазначенияПлатежа 			  = "911";
	СправочникОбъект.СчетУчетаРасчетовСКонтрагентомБУ = Типовой.КорпоративныйПодоходныйНалогПодлежащийУплате;
	СправочникОбъект.СчетУчетаРасчетовСКонтрагентомНУ = Налоговый.КорпоративныйПодоходныйНалог;
	СправочникОбъект.НазначениеПлатежа 				  = НСтр("ru = 'Корпоративный подоходный налог подлежащий уплате за '", КодЯзыка);
	СправочникОбъект.Записать();
	
	СправочникОбъект = Справочники.НалогиСборыОтчисления.НалогНаИмущество.ПолучитьОбъект();
	СправочникОбъект.КодБК 							  = "104101";
	СправочникОбъект.КодНазначенияПлатежа 			  = "911";
	СправочникОбъект.СчетУчетаРасчетовСКонтрагентомБУ = Типовой.НалогНаИмущество;
	СправочникОбъект.СчетУчетаРасчетовСКонтрагентомНУ = Налоговый.ПрочиеНалоги;
	СправочникОбъект.НазначениеПлатежа 				  = НСтр("ru = 'Налог на имущество подлежащий уплате за '", КодЯзыка);
	СправочникОбъект.Записать();
	
	СправочникОбъект = Справочники.НалогиСборыОтчисления.НалогНаТранспорт.ПолучитьОбъект();
	СправочникОбъект.КодБК 							  = "104401";
	СправочникОбъект.КодНазначенияПлатежа 			  = "911";
	СправочникОбъект.СчетУчетаРасчетовСКонтрагентомБУ = Типовой.НалогНаТранспортныеСредства;
	СправочникОбъект.СчетУчетаРасчетовСКонтрагентомНУ = Налоговый.ПрочиеНалоги;
	СправочникОбъект.НазначениеПлатежа 				  = НСтр("ru = 'Налог на транспорт подлежащий уплате за '", КодЯзыка);
	СправочникОбъект.Записать();
	
	СправочникОбъект = Справочники.НалогиСборыОтчисления.НалогНаДобавленнуюСтоимостьИмпортРФ.ПолучитьОбъект();
	СправочникОбъект.КодБК 							  = "105109";
	СправочникОбъект.КодНазначенияПлатежа 			  = "911";
	СправочникОбъект.СчетУчетаРасчетовСКонтрагентомБУ = Типовой.НалогНаДобавленнуюСтоимость;
	СправочникОбъект.СчетУчетаРасчетовСКонтрагентомНУ = Налоговый.НалогНаДобавленнуюСтоимость;
	СправочникОбъект.НазначениеПлатежа 				  = НСтр("ru = 'НДС на товары таможенного союза, ввозимые с территории РФ, подлежащий уплате за '", КодЯзыка);
	СправочникОбъект.Записать();
	
	СправочникОбъект = Справочники.НалогиСборыОтчисления.НалогНаДобавленнуюСтоимостьИмпортРБ.ПолучитьОбъект();
	СправочникОбъект.КодБК 							  = "105110";
	СправочникОбъект.КодНазначенияПлатежа 			  = "911";
	СправочникОбъект.СчетУчетаРасчетовСКонтрагентомБУ = Типовой.НалогНаДобавленнуюСтоимость;
	СправочникОбъект.СчетУчетаРасчетовСКонтрагентомНУ = Налоговый.НалогНаДобавленнуюСтоимость;
	СправочникОбъект.НазначениеПлатежа 				  = НСтр("ru = 'НДС на товары таможенного союза, ввозимые с территории РБ, подлежащий уплате за '", КодЯзыка);
	СправочникОбъект.Записать();
	
	СправочникОбъект = Справочники.НалогиСборыОтчисления.ОтчисленияОбязательноеСоциальноеМедицинскоеСтрахование.ПолучитьОбъект();
	СправочникОбъект.КодБК 							  = "";
	СправочникОбъект.КодНазначенияПлатежа 			  = "121";
	СправочникОбъект.СчетУчетаРасчетовСКонтрагентомБУ = Типовой.ОбязательстваПоОтчислениямОСМС;
	СправочникОбъект.СчетУчетаРасчетовСКонтрагентомНУ = Налоговый.ОбязательстваПоОтчислениямОСМС;
	СправочникОбъект.НазначениеПлатежа 				  = НСтр("ru = 'Отчисления на обязательное социальное медицинское страхование за '", КодЯзыка);
	СправочникОбъект.Записать();
	
	СправочникОбъект = Справочники.НалогиСборыОтчисления.ВзносыОбязательноеСоциальноеМедицинскоеСтрахование.ПолучитьОбъект();
	СправочникОбъект.КодБК 							  = "";
	СправочникОбъект.КодНазначенияПлатежа 			  = "122";
	СправочникОбъект.СчетУчетаРасчетовСКонтрагентомБУ = Типовой.ОбязательстваПоВзносамОСМС;
	СправочникОбъект.СчетУчетаРасчетовСКонтрагентомНУ = Налоговый.ОбязательстваПоВзносамОСМС;
	СправочникОбъект.НазначениеПлатежа 				  = НСтр("ru = 'Взносы на обязательное социальное медицинское страхование за '", КодЯзыка);
	СправочникОбъект.Записать();
	
	СправочникОбъект = Справочники.НалогиСборыОтчисления.ЕдиныйПлатеж.ПолучитьОбъект();
	СправочникОбъект.КодБК 							  = "";
	СправочникОбъект.КодНазначенияПлатежа 			  = "185";
	СправочникОбъект.СчетУчетаРасчетовСКонтрагентомБУ = Типовой.ОбязательстваПоЕдиномуПлатежу;
	СправочникОбъект.СчетУчетаРасчетовСКонтрагентомНУ = Налоговый.ОбязательстваПоЕдиномуПлатежу;
	СправочникОбъект.НазначениеПлатежа 				  = НСтр("ru = 'Единый платеж за '", КодЯзыка);
	СправочникОбъект.Записать();
	
	// ставки 
    НаборЗаписей = РегистрыСведений.СведенияОСтавкахНалоговСборовОтчислений.СоздатьНаборЗаписей();
	НаборЗаписей.ОбменДанными.Загрузка = Истина;
    ПустаяОрганизация = Справочники.Организации.ПустаяСсылка();
    
    // ОПВ
    ВидОПВ = Справочники.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносы;
    ДобавитьЗначенияСтавокНалоговВзносовОтчислений(НаборЗаписей, '19980101', ПустаяОрганизация, ВидОПВ, 10);
    ДобавитьЗначенияСтавокНалоговВзносовОтчислений(НаборЗаписей, '20200601', ПустаяОрганизация, ВидОПВ, 10, Перечисления.ЮрФизЛицо.ФизЛицо);
    ДобавитьЗначенияСтавокНалоговВзносовОтчислений(НаборЗаписей, '20200601', ПустаяОрганизация, ВидОПВ, 5, Перечисления.ЮрФизЛицо.ЮрЛицо);
    ДобавитьЗначенияСтавокНалоговВзносовОтчислений(НаборЗаписей, '20210101', ПустаяОрганизация, ВидОПВ, 10);
	
    // ОППВ
    ВидОППВ = Справочники.НалогиСборыОтчисления.ОбязательныеПрофессиональныеПенсионныеВзносы;
    ДобавитьЗначенияСтавокНалоговВзносовОтчислений(НаборЗаписей, '20140101', ПустаяОрганизация, ВидОППВ, 5);
	
	// ОПВР
    ВидОПВР = Справочники.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносыРаботодателя;
    ДобавитьЗначенияСтавокНалоговВзносовОтчислений(НаборЗаписей, '20240101', ПустаяОрганизация, ВидОПВР, 1.5);
    ДобавитьЗначенияСтавокНалоговВзносовОтчислений(НаборЗаписей, '20250101', ПустаяОрганизация, ВидОПВР, 2.5);

    // СО
    ВидСО = Справочники.НалогиСборыОтчисления.ОбязательныеСоциальныеОтчисления;
    ДобавитьЗначенияСтавокНалоговВзносовОтчислений(НаборЗаписей, '20050101', ПустаяОрганизация, ВидСО, 1.5);
    ДобавитьЗначенияСтавокНалоговВзносовОтчислений(НаборЗаписей, '20060101', ПустаяОрганизация, ВидСО, 2);
    ДобавитьЗначенияСтавокНалоговВзносовОтчислений(НаборЗаписей, '20070101', ПустаяОрганизация, ВидСО, 3);
    ДобавитьЗначенияСтавокНалоговВзносовОтчислений(НаборЗаписей, '20090101', ПустаяОрганизация, ВидСО, 4);
    ДобавитьЗначенияСтавокНалоговВзносовОтчислений(НаборЗаписей, '20100101', ПустаяОрганизация, ВидСО, 5);
	ДобавитьЗначенияСтавокНалоговВзносовОтчислений(НаборЗаписей, '20180101', ПустаяОрганизация, ВидСО, 3.5);
	ДобавитьЗначенияСтавокНалоговВзносовОтчислений(НаборЗаписей, '20250101', ПустаяОрганизация, ВидСО, 5);

    // КПН
    ВидКПН = Справочники.НалогиСборыОтчисления.НалогНаПрибыль;
    ДобавитьЗначенияСтавокНалоговВзносовОтчислений(НаборЗаписей, '20060101', ПустаяОрганизация, ВидКПН, 30);
	
	// Налог на имущество	
    ВидИмущественногоНалога = Справочники.НалогиСборыОтчисления.НалогНаИмущество;
    ДобавитьЗначенияСтавокНалоговВзносовОтчислений(НаборЗаписей, '20060101', ПустаяОрганизация, ВидИмущественногоНалога, 1);
	ДобавитьЗначенияСтавокНалоговВзносовОтчислений(НаборЗаписей, '20090101', ПустаяОрганизация, ВидИмущественногоНалога, 1.5);
	
    // ИПН с 2009 года
    ВидИПН = Справочники.НалогиСборыОтчисления.ИндивидуальныйПодоходныйНалог;
    ДобавитьЗначенияСтавокНалоговВзносовОтчислений(НаборЗаписей, '20090101', ПустаяОрганизация, ВидИПН, 10);

    // СН с 2009 года
    ВидСН = Справочники.НалогиСборыОтчисления.СоциальныйНалог;
    ДобавитьЗначенияСтавокНалоговВзносовОтчислений(НаборЗаписей, '20090101', ПустаяОрганизация, ВидСН, 11);
	ДобавитьЗначенияСтавокНалоговВзносовОтчислений(НаборЗаписей, '20180101', ПустаяОрганизация, ВидСН, 9.5);
	ДобавитьЗначенияСтавокНалоговВзносовОтчислений(НаборЗаписей, '20250101', ПустаяОрганизация, ВидСН, 11);

    // ЕП
    ВидЕП = Справочники.НалогиСборыОтчисления.ЕдиныйПлатеж;
    ДобавитьЗначенияСтавокНалоговВзносовОтчислений(НаборЗаписей, '20230101', ПустаяОрганизация, ВидЕП, 20);
	ДобавитьЗначенияСтавокНалоговВзносовОтчислений(НаборЗаписей, '20240101', ПустаяОрганизация, ВидЕП, 21.5);

    НаборЗаписей.Записать();

	// Ставки ОСМС
	РегистрыСведений.СведенияОСтавкахОСМС.НачальноеЗаполнение();

КонецПроцедуры // ЗаполнитьНалогиСборыОтчисления

// Добавляет в регистр СведенияОСтавкахНалоговВзносовОтчислений новую строку
//
Процедура ДобавитьЗначенияСтавокНалоговВзносовОтчислений(НаборЗаписей, 
														 Период, 
														 Налогоплательщик,
														 Вид,
														 Ставка,
														 ВидДохода = Неопределено)
	НоваяЗапись = НаборЗаписей.Добавить();
	// Свойства
	НоваяЗапись.Период 			 = Период;
	// Измерения
	НоваяЗапись.Налогоплательщик = Налогоплательщик;
	
	Если ЗначениеЗаполнено(ВидДохода) Тогда
		НоваяЗапись.ВидДохода = ВидДохода;
	КонецЕсли;
	
	НоваяЗапись.ВидНалога		 = Вид;
	// Ресурсы
	НоваяЗапись.Ставка			 = Ставка;

КонецПроцедуры // ДобавитьЗначенияСтавокНалоговВзносовОтчислений

// Процедура заполняет регистр сведений КоэффициентыСтавкиРефинансированияНБДляРасчетаПени
// данными для расчета пени
//
Процедура ЗаполнитьКоэффициентыСтавкиРефинансированияНБДляРасчетаПени()

	НаборЗаписей = РегистрыСведений.КоэффициентыСтавкиРефинансированияНБДляРасчетаПени.СоздатьНаборЗаписей();
	
	НаборЗаписей.Отбор.Организация.Использование = Истина;
	НаборЗаписей.Отбор.Организация.ВидСравнения	 = ВидСравнения.Равно;
	НаборЗаписей.Отбор.Организация.Значение	 	 = Справочники.Организации.ПустаяСсылка();
	
	// ОПВ
	НаборЗаписей.Отбор.ВидНалога.Использование = Истина;
	НаборЗаписей.Отбор.ВидНалога.ВидСравнения  = ВидСравнения.Равно;
	НаборЗаписей.Отбор.ВидНалога.Значение	   = Справочники.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносы;

	Движение 			 = НаборЗаписей.Добавить();
	// Свойства
	Движение.Период 	 = '19990315'; // Постановление Правительства РК от 15.03.1999 № 245
	// Измерения
	Движение.Организация = Справочники.Организации.ПустаяСсылка();
	Движение.ВидНалога	 = Справочники.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносы;
	// Ресурсы
	Движение.Коэффициент = 1.5;
	
	Движение 			 = НаборЗаписей.Добавить();
	// Свойства
	Движение.Период 	 = '20050706'; // первое официальное опубликование Постановления Правительства РК от 30.06.2005 № 659
	// Измерения
	Движение.Организация = Справочники.Организации.ПустаяСсылка();
	Движение.ВидНалога	 = Справочники.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносы;
	// Ресурсы
	Движение.Коэффициент = 2.5;
	
	Движение 			 = НаборЗаписей.Добавить();
	// Свойства
	Движение.Период 	 = '20180101'; // 01.01.2018
	// Измерения
	Движение.Организация = Справочники.Организации.ПустаяСсылка();
	Движение.ВидНалога	 = Справочники.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносы;
	// Ресурсы
	Движение.Коэффициент = 1.25;

	НаборЗаписей.Записать();
    НаборЗаписей.Очистить();

	// СО
 	НаборЗаписей.Отбор.ВидНалога.Использование = Истина;
	НаборЗаписей.Отбор.ВидНалога.ВидСравнения  = ВидСравнения.Равно;
	НаборЗаписей.Отбор.ВидНалога.Значение	   = Справочники.НалогиСборыОтчисления.ОбязательныеСоциальныеОтчисления;

	Движение 			 = НаборЗаписей.Добавить();
	// Свойства
	Движение.Период 	 = '20050101'; // 01.01.2005 Закон РК об обяз социальном страховании
	// Измерения
	Движение.Организация = Справочники.Организации.ПустаяСсылка();
	Движение.ВидНалога	 = Справочники.НалогиСборыОтчисления.ОбязательныеСоциальныеОтчисления;
	// Ресурсы
	Движение.Коэффициент = 2.5;
	
	Движение 			 = НаборЗаписей.Добавить();
	// Свойства
	Движение.Период 	 = '20180101'; // 01.01.2018 
	// Измерения
	Движение.Организация = Справочники.Организации.ПустаяСсылка();
	Движение.ВидНалога	 = Справочники.НалогиСборыОтчисления.ОбязательныеСоциальныеОтчисления;
	// Ресурсы
	Движение.Коэффициент = 1.25;

	НаборЗаписей.Записать();
    НаборЗаписей.Очистить();

	// ОППВ
 	НаборЗаписей.Отбор.ВидНалога.Использование = Истина;
	НаборЗаписей.Отбор.ВидНалога.ВидСравнения  = ВидСравнения.Равно;
	НаборЗаписей.Отбор.ВидНалога.Значение	   = Справочники.НалогиСборыОтчисления.ОбязательныеПрофессиональныеПенсионныеВзносы;

	Движение 			 = НаборЗаписей.Добавить();
	// Свойства
	Движение.Период 	 = '20140101'; // 01.01.2014 Закон "О пенсионном обеспечении в РК"
	// Измерения
	Движение.Организация = Справочники.Организации.ПустаяСсылка();
	Движение.ВидНалога	 = Справочники.НалогиСборыОтчисления.ОбязательныеПрофессиональныеПенсионныеВзносы;
	// Ресурсы
	Движение.Коэффициент = 2.5;
	
	Движение 			 = НаборЗаписей.Добавить();
	// Свойства
	Движение.Период 	 = '20180101'; // 01.01.2018
	// Измерения
	Движение.Организация = Справочники.Организации.ПустаяСсылка();
	Движение.ВидНалога	 = Справочники.НалогиСборыОтчисления.ОбязательныеПрофессиональныеПенсионныеВзносы;
	// Ресурсы
	Движение.Коэффициент = 1.25;

	НаборЗаписей.Записать();
    НаборЗаписей.Очистить();
	
	// Взносы ОСМС
	НаборЗаписей.Отбор.ВидНалога.Использование = Истина;
	НаборЗаписей.Отбор.ВидНалога.ВидСравнения  = ВидСравнения.Равно;
	НаборЗаписей.Отбор.ВидНалога.Значение	   = Справочники.НалогиСборыОтчисления.ВзносыОбязательноеСоциальноеМедицинскоеСтрахование;

	Движение = НаборЗаписей.Добавить();
	// Свойства
	Движение.Период = '20170701';
	// Измерения
	Движение.Организация = Справочники.Организации.ПустаяСсылка();
	Движение.ВидНалога = Справочники.НалогиСборыОтчисления.ВзносыОбязательноеСоциальноеМедицинскоеСтрахование;
	// Ресурсы
	Движение.Коэффициент = 2.5;

	Движение = НаборЗаписей.Добавить();
	// Свойства
	Движение.Период = '20180101';
	// Измерения
	Движение.Организация = Справочники.Организации.ПустаяСсылка();
	Движение.ВидНалога = Справочники.НалогиСборыОтчисления.ВзносыОбязательноеСоциальноеМедицинскоеСтрахование;
	// Ресурсы
	Движение.Коэффициент = 1.25;

	НаборЗаписей.Записать();
	НаборЗаписей.Очистить();
	
	// Отчисления ОСМС
	НаборЗаписей.Отбор.ВидНалога.Использование = Истина;
	НаборЗаписей.Отбор.ВидНалога.ВидСравнения  = ВидСравнения.Равно;
	НаборЗаписей.Отбор.ВидНалога.Значение	   = Справочники.НалогиСборыОтчисления.ОтчисленияОбязательноеСоциальноеМедицинскоеСтрахование;
	
	Движение = НаборЗаписей.Добавить();
	// Свойства
	Движение.Период = '20170701';
	// Измерения
	Движение.Организация = Справочники.Организации.ПустаяСсылка();
	Движение.ВидНалога = Справочники.НалогиСборыОтчисления.ОтчисленияОбязательноеСоциальноеМедицинскоеСтрахование;
	// Ресурсы
	Движение.Коэффициент = 2.5;
	
	Движение = НаборЗаписей.Добавить();
	// Свойства
	Движение.Период = '20180101';
	// Измерения
	Движение.Организация = Справочники.Организации.ПустаяСсылка();
	Движение.ВидНалога = Справочники.НалогиСборыОтчисления.ОтчисленияОбязательноеСоциальноеМедицинскоеСтрахование;
	// Ресурсы
	Движение.Коэффициент = 1.25;

	НаборЗаписей.Записать();
	НаборЗаписей.Очистить();

	// ЕП
	НаборЗаписей.Отбор.ВидНалога.Использование = Истина;
	НаборЗаписей.Отбор.ВидНалога.ВидСравнения  = ВидСравнения.Равно;
	НаборЗаписей.Отбор.ВидНалога.Значение	   = Справочники.НалогиСборыОтчисления.ЕдиныйПлатеж;

	Движение = НаборЗаписей.Добавить();
	// Свойства
	Движение.Период = '20230101';
	// Измерения
	Движение.Организация = Справочники.Организации.ПустаяСсылка();
	Движение.ВидНалога = Справочники.НалогиСборыОтчисления.ЕдиныйПлатеж;
	// Ресурсы
	Движение.Коэффициент = 1.25;

	НаборЗаписей.Записать();
	НаборЗаписей.Очистить();

	// ОПВР
	НаборЗаписей.Отбор.ВидНалога.Использование = Истина;
	НаборЗаписей.Отбор.ВидНалога.ВидСравнения  = ВидСравнения.Равно;
	НаборЗаписей.Отбор.ВидНалога.Значение	   = Справочники.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносыРаботодателя;
	
	Движение = НаборЗаписей.Добавить();
	// Свойства
	Движение.Период = '20240101';
	// Измерения
	Движение.Организация = Справочники.Организации.ПустаяСсылка();
	Движение.ВидНалога = Справочники.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносыРаботодателя;
	// Ресурсы
	Движение.Коэффициент = 1.25;
	НаборЗаписей.Записать();    
	
КонецПроцедуры // ЗаполнитьКоэффициентыСтавкиРефинансированияНБДляРасчетаПени

// Процедура заполняет регистр сведений СрокиПеречисленияНалоговСборовОтчислений
// данными для расчета пени
//
Процедура ЗаполнитьСрокиПеречисленияНалоговСборовОтчислений()

	НаборЗаписей = РегистрыСведений.СрокиПеречисленияНалоговСборовОтчислений.СоздатьНаборЗаписей();
	
	НаборЗаписей.Отбор.Организация.Использование = Истина;
	НаборЗаписей.Отбор.Организация.ВидСравнения	 = ВидСравнения.Равно;
	НаборЗаписей.Отбор.Организация.Значение	 	 = Справочники.Организации.ПустаяСсылка();

	ДлинаСуток = 86400;
	ТекМесяц = '20030701';	
	ДатаОкончания = НачалоМесяца(КонецГода(ОбщегоНазначенияБК.ПолучитьРабочуюДату()));
	
	Пока ТекМесяц <= ДатаОкончания Цикл
		
		// ОПВ
		Если ТекМесяц < '20050701' Тогда // до первого официального опубликования Постановления Правительства РК от 30.06.2005 № 659
			// до 5 числа месяца, следующего за месяцем выплаты доходов
			Движение = НаборЗаписей.Добавить();
			// Измерения
			Движение.Месяц 		 = ТекМесяц;
			Движение.Организация = Справочники.Организации.ПустаяСсылка();
			Движение.ВидНалога	 = Справочники.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносы;
			// Ресурсы
			Движение.ПорядокОпределенияСрокаПеречисления = Перечисления.ПорядокОпределенияСрокаПеречисления.ПоМесяцуВыплатыДоходов;
			Движение.СрокПеречисления					 = ДобавитьМесяц(ТекМесяц, 1) + (5-1) * ДлинаСуток;
		ИначеЕсли ТекМесяц < '20070701' Тогда // до изменения сроков постановлением от 20.07.2007
			// до 15 числа месяца, следующего за месяцем выплаты доходов
			Движение = НаборЗаписей.Добавить();
			// Измерения
			Движение.Месяц 		 = ТекМесяц;
			Движение.Организация = Справочники.Организации.ПустаяСсылка();
			Движение.ВидНалога	 = Справочники.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносы;
			// Ресурсы
			Движение.ПорядокОпределенияСрокаПеречисления = Перечисления.ПорядокОпределенияСрокаПеречисления.ПоМесяцуВыплатыДоходов;
			Движение.СрокПеречисления					 = ДобавитьМесяц(ТекМесяц, 1) + (15-1) * ДлинаСуток;
		Иначе // с июля 2007 года - до 20 числа месяца, следующего за месяцем выплаты доходов
			Движение = НаборЗаписей.Добавить();
			// Измерения
			Движение.Месяц 		 = ТекМесяц;
			Движение.Организация = Справочники.Организации.ПустаяСсылка();
			Движение.ВидНалога	 = Справочники.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносы;
			// Ресурсы
			Движение.ПорядокОпределенияСрокаПеречисления = Перечисления.ПорядокОпределенияСрокаПеречисления.ПоМесяцуВыплатыДоходов;
			Движение.СрокПеречисления					 = ДобавитьМесяц(ТекМесяц, 1) + (20-1) * ДлинаСуток;
		КонецЕсли;

		// СО
		Если ТекМесяц >= '20050101' Тогда
			// до 15 числа месяца, следующего за месяцем исчисления
			Движение = НаборЗаписей.Добавить();
			// Измерения
			Движение.Месяц 		 = ТекМесяц;
			Движение.Организация = Справочники.Организации.ПустаяСсылка();
			Движение.ВидНалога	 = Справочники.НалогиСборыОтчисления.ОбязательныеСоциальныеОтчисления;
			// Ресурсы
			Движение.ПорядокОпределенияСрокаПеречисления = Перечисления.ПорядокОпределенияСрокаПеречисления.ПоМесяцуНалоговогоПериода;
			Движение.СрокПеречисления					 = ДобавитьМесяц(ТекМесяц, 1) + (15-1) * ДлинаСуток;
		//Иначе - до января 2005 СО вообще не исчислялись
		КонецЕсли;		
		
		// ОППВ
		Если ТекМесяц >= '20140101' Тогда
			// до 25 числа месяца, следующего за месяцем исчисления
			Движение = НаборЗаписей.Добавить();
			// Измерения
			Движение.Месяц 		 = ТекМесяц;
			Движение.Организация = Справочники.Организации.ПустаяСсылка();
			Движение.ВидНалога	 = Справочники.НалогиСборыОтчисления.ОбязательныеПрофессиональныеПенсионныеВзносы;
			// Ресурсы
			Движение.ПорядокОпределенияСрокаПеречисления = Перечисления.ПорядокОпределенияСрокаПеречисления.ПоМесяцуНалоговогоПериода;
			Движение.СрокПеречисления					 = ДобавитьМесяц(ТекМесяц, 1) + (25-1) * ДлинаСуток;
		//Иначе - до января 2014 ОППВ вообще не исчислялись
		КонецЕсли;		
		
		// ОПВР
		Если ТекМесяц >= '20240101' Тогда
			// до 25 числа месяца, следующего за месяцем исчисления
			Движение = НаборЗаписей.Добавить();
			// Измерения
			Движение.Месяц 		 = ТекМесяц;
			Движение.Организация = Справочники.Организации.ПустаяСсылка();
			Движение.ВидНалога	 = Справочники.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносыРаботодателя;
			// Ресурсы
			Движение.ПорядокОпределенияСрокаПеречисления = Перечисления.ПорядокОпределенияСрокаПеречисления.ПоМесяцуНалоговогоПериода;
			Движение.СрокПеречисления					 = ДобавитьМесяц(ТекМесяц, 1) + (25-1) * ДлинаСуток;
		//Иначе - до января 2024 ОПВР вообще не исчислялись
		КонецЕсли;		
		
		ТекМесяц = ДобавитьМесяц(ТекМесяц, 1);
	КонецЦикла;

	НаборЗаписей.Записать();

КонецПроцедуры // ЗаполнитьСрокиПеречисленияНалоговСборовОтчислений

// Добавляет запись в набор записей регистра "СведенияОСтавкахИПНиСН" 
//
Процедура ДобавитьЗначенияСтавокИПНиСН(НаборЗаписей, Период, ВидСтавокИПНиСН, НомерСтрокиСтавок, СуммаДоходаС, СуммаДоходаПо, 
	                                Ставка = 0)

	НоваяЗапись = НаборЗаписей.Добавить();

	НоваяЗапись.Период			  = Период;
	НоваяЗапись.ВидСтавокИПНиСН   = ВидСтавокИПНиСН;
	НоваяЗапись.НомерСтрокиСтавок = НомерСтрокиСтавок;
	НоваяЗапись.СуммаДоходаС      = СуммаДоходаС;
	НоваяЗапись.СуммаДоходаПо     = СуммаДоходаПо;
	НоваяЗапись.Ставка 		   	  = Ставка;

КонецПроцедуры

// Выполняет заполнение регистра сведений "СведенияОСтавкахИПНиСН" на 2005
//
Процедура ЗаполнитьСведенияОСтавкахИПНиСН2005() 
	
	// ----------------------------------------------------------------------------
	// 2005 год

	НаборЗаписей = РегистрыСведений.СведенияОСтавкахИПНиСН.СоздатьНаборЗаписей();
	НаборЗаписей.ОбменДанными.Загрузка 				 = Истина;
	НаборЗаписей.Отбор.ВидСтавокИПНиСН.Использование = Истина;
	НаборЗаписей.Отбор.Период.Использование 		 = Истина;
	
	Период = Дата(2005, 1, 1);
	НаборЗаписей.Отбор.Период.Значение = Период;
	
	// ИПН
	НаборЗаписей.Отбор.ВидСтавокИПНиСН.Значение = Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюИПН;
	
	// до 174780
	ДобавитьЗначенияСтавокИПНиСН(НаборЗаписей, Период, Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюИПН, 1, 
														0,	174780, 5);

	// до 466080
	ДобавитьЗначенияСтавокИПНиСН(НаборЗаписей, Период, Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюИПН, 2, 
														174780, 466080,  8);

	// до 2330400
	ДобавитьЗначенияСтавокИПНиСН(НаборЗаписей, Период, Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюИПН, 3, 
														466080, 2330400,  13);
														
	// до 6991200
	ДобавитьЗначенияСтавокИПНиСН(НаборЗаписей, Период, Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюИПН, 4, 
														2330400, 6991200,  15);
														
	// свыше 6991200
	ДобавитьЗначенияСтавокИПНиСН(НаборЗаписей, Период, Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюИПН, 5, 
														6991200, 9999999999,  20);

	НаборЗаписей.Записать();

	// СН за работников
	НаборЗаписей.Отбор.ВидСтавокИПНиСН.Значение = Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюСНДляГражданРК;
	НаборЗаписей.Очистить();
	
	// до 174780
	ДобавитьЗначенияСтавокИПНиСН(НаборЗаписей, Период, Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюСНДляГражданРК, 1, 
														0,	174780, 20);

	// до 466080
	ДобавитьЗначенияСтавокИПНиСН(НаборЗаписей, Период, Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюСНДляГражданРК, 2, 
														174780, 466080,  15);

	// до 2330400
	ДобавитьЗначенияСтавокИПНиСН(НаборЗаписей, Период, Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюСНДляГражданРК, 3, 
														466080, 2330400,  12);
														
	// до 6991200
	ДобавитьЗначенияСтавокИПНиСН(НаборЗаписей, Период, Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюСНДляГражданРК, 4, 
														2330400, 6991200,  9);
														
	// свыше 6991200
	ДобавитьЗначенияСтавокИПНиСН(НаборЗаписей, Период, Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюСНДляГражданРК, 5, 
														6991200, 9999999999,  7);

	НаборЗаписей.Записать();

	// СН за иностранных специалистов
	НаборЗаписей.Отбор.ВидСтавокИПНиСН.Значение = Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюСНДляИностранныхСпециалистов;
	НаборЗаписей.Очистить();
	
	// до 466080
	ДобавитьЗначенияСтавокИПНиСН(НаборЗаписей, Период, Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюСНДляИностранныхСпециалистов, 1, 
														0, 466080,  11);

	// до 2330400
	ДобавитьЗначенияСтавокИПНиСН(НаборЗаписей, Период, Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюСНДляИностранныхСпециалистов, 2, 
														466080, 2330400,  9);
														
	// до 6991200
	ДобавитьЗначенияСтавокИПНиСН(НаборЗаписей, Период, Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюСНДляИностранныхСпециалистов, 3, 
														2330400, 6991200,  7);
														
	// свыше 6991200
	ДобавитьЗначенияСтавокИПНиСН(НаборЗаписей, Период, Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюСНДляИностранныхСпециалистов, 4, 
														6991200, 9999999999,  5);

	НаборЗаписей.Записать();
	
КонецПроцедуры // ЗаполнитьСведенияОСтавкахИПНиСН

// Выполняет заполнение регистра сведений "СведенияОСтавкахИПНиСН" на 2006 год
//
Процедура ЗаполнитьСведенияОСтавкахИПНиСН2006() 
	
	// ----------------------------------------------------------------------------
	// 2006 год

	НаборЗаписей = РегистрыСведений.СведенияОСтавкахИПНиСН.СоздатьНаборЗаписей();
	НаборЗаписей.ОбменДанными.Загрузка 				 = Истина;
	НаборЗаписей.Отбор.ВидСтавокИПНиСН.Использование = Истина;
	НаборЗаписей.Отбор.Период.Использование 		 = Истина;
	
	Период = Дата(2006, 1, 1);
	НаборЗаписей.Отбор.Период.Значение = Период;
	
	// ИПН
	НаборЗаписей.Отбор.ВидСтавокИПНиСН.Значение = Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюИПН;
	
	// до 185400
	ДобавитьЗначенияСтавокИПНиСН(НаборЗаписей, Период, Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюИПН, 1, 
														0,	185400, 5);

	// до 494400
	ДобавитьЗначенияСтавокИПНиСН(НаборЗаписей, Период, Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюИПН, 2, 
														185400, 494400,  8);

	// до 2472000
	ДобавитьЗначенияСтавокИПНиСН(НаборЗаписей, Период, Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюИПН, 3, 
														494400, 2472000,  13);
														
	// до 7416000
	ДобавитьЗначенияСтавокИПНиСН(НаборЗаписей, Период, Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюИПН, 4, 
														2472000, 7416000,  15);
														
	// свыше 6991200
	ДобавитьЗначенияСтавокИПНиСН(НаборЗаписей, Период, Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюИПН, 5, 
														7416000, 9999999999,  20);

	НаборЗаписей.Записать();

	// СН за работников
	НаборЗаписей.Отбор.ВидСтавокИПНиСН.Значение = Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюСНДляГражданРК;
	НаборЗаписей.Очистить();
	
	// до 185400
	ДобавитьЗначенияСтавокИПНиСН(НаборЗаписей, Период, Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюСНДляГражданРК, 1, 
														0,	185400, 20);

	// до 494400
	ДобавитьЗначенияСтавокИПНиСН(НаборЗаписей, Период, Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюСНДляГражданРК, 2, 
														185400, 494400,  15);

	// до 2472000
	ДобавитьЗначенияСтавокИПНиСН(НаборЗаписей, Период, Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюСНДляГражданРК, 3, 
														494400, 2472000,  12);
														
	// до 7416000
	ДобавитьЗначенияСтавокИПНиСН(НаборЗаписей, Период, Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюСНДляГражданРК, 4, 
														2472000, 7416000,  9);
														
	// свыше 6991200
	ДобавитьЗначенияСтавокИПНиСН(НаборЗаписей, Период, Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюСНДляГражданРК, 5, 
														7416000, 9999999999,  7);

	НаборЗаписей.Записать();

	// СН за иностранных специалистов
	НаборЗаписей.Отбор.ВидСтавокИПНиСН.Значение = Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюСНДляИностранныхСпециалистов;
	НаборЗаписей.Очистить();
	
	// до 494400
	ДобавитьЗначенияСтавокИПНиСН(НаборЗаписей, Период, Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюСНДляИностранныхСпециалистов, 1, 
														0, 494400,  11);

	// до 2330400
	ДобавитьЗначенияСтавокИПНиСН(НаборЗаписей, Период, Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюСНДляИностранныхСпециалистов, 2, 
														494400, 2472000,  9);
														
	// до 6991200
	ДобавитьЗначенияСтавокИПНиСН(НаборЗаписей, Период, Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюСНДляИностранныхСпециалистов, 3, 
														2472000, 7416000,  7);
														
	// свыше 6991200
	ДобавитьЗначенияСтавокИПНиСН(НаборЗаписей, Период, Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюСНДляИностранныхСпециалистов, 4, 
														7416000, 9999999999,  5);

	НаборЗаписей.Записать();
	
КонецПроцедуры 

// Выполняет заполнение регистра сведений "СведенияОСтавкахИПНиСН" на 2007 год
//
Процедура ЗаполнитьСведенияОСтавкахИПНиСН2007() 
	
	// ----------------------------------------------------------------------------
	// 2007 год

	НаборЗаписей = РегистрыСведений.СведенияОСтавкахИПНиСН.СоздатьНаборЗаписей();
	НаборЗаписей.ОбменДанными.Загрузка 				 = Истина;
	НаборЗаписей.Отбор.ВидСтавокИПНиСН.Использование = Истина;
	НаборЗаписей.Отбор.Период.Использование			 = Истина;
	
	Период = Дата(2007, 1, 1);
	НаборЗаписей.Отбор.Период.Значение = Период;
	
	// ИПН
	НаборЗаписей.Отбор.ВидСтавокИПНиСН.Значение = Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюИПН;
	
	// 10% все
	ДобавитьЗначенияСтавокИПНиСН(НаборЗаписей, Период, Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюИПН, 1, 
														0,	9999999999, 10);

	НаборЗаписей.Записать();

	// СН за работников
	НаборЗаписей.Отбор.ВидСтавокИПНиСН.Значение = Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюСНДляГражданРК;
	НаборЗаписей.Очистить();
	
	// до 196560
	ДобавитьЗначенияСтавокИПНиСН(НаборЗаписей, Период, Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюСНДляГражданРК, 1, 
														0,	196560, 20);

	// до 524160
	ДобавитьЗначенияСтавокИПНиСН(НаборЗаписей, Период, Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюСНДляГражданРК, 2, 
														196560, 524160,  15);

	// до 2620800
	ДобавитьЗначенияСтавокИПНиСН(НаборЗаписей, Период, Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюСНДляГражданРК, 3, 
														524160, 2620800,  12);
														
	// до 7862400
	ДобавитьЗначенияСтавокИПНиСН(НаборЗаписей, Период, Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюСНДляГражданРК, 4, 
														2620800, 7862400,  9);
														
	// свыше 7862400
	ДобавитьЗначенияСтавокИПНиСН(НаборЗаписей, Период, Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюСНДляГражданРК, 5, 
														7862400, 9999999999,  7);

	НаборЗаписей.Записать();

	// СН за иностранных специалистов
	НаборЗаписей.Отбор.ВидСтавокИПНиСН.Значение = Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюСНДляИностранныхСпециалистов;
	НаборЗаписей.Очистить();
	
	// до 524160
	ДобавитьЗначенияСтавокИПНиСН(НаборЗаписей, Период, Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюСНДляИностранныхСпециалистов, 1, 
														0, 524160,  11);

	// до 2620800
	ДобавитьЗначенияСтавокИПНиСН(НаборЗаписей, Период, Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюСНДляИностранныхСпециалистов, 2, 
														524160, 2620800,  9);
														
	// до 7862400
	ДобавитьЗначенияСтавокИПНиСН(НаборЗаписей, Период, Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюСНДляИностранныхСпециалистов, 3, 
														2620800, 7862400,  7);
														
	// свыше 7862400
	ДобавитьЗначенияСтавокИПНиСН(НаборЗаписей, Период, Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюСНДляИностранныхСпециалистов, 4, 
														7862400, 9999999999,  5);
	
	НаборЗаписей.Записать();														
														
КонецПроцедуры 

// Выполняет заполнение регистра сведений "СведенияОСтавкахИПНиСН" на 2008 год
//
Процедура ЗаполнитьСведенияОСтавкахИПНиСН2008() 
	
	// ----------------------------------------------------------------------------
	// 2008 год

	НаборЗаписей = РегистрыСведений.СведенияОСтавкахИПНиСН.СоздатьНаборЗаписей();
	НаборЗаписей.ОбменДанными.Загрузка 				 = Истина;
	НаборЗаписей.Отбор.ВидСтавокИПНиСН.Использование = Истина;
	НаборЗаписей.Отбор.Период.Использование 		 = Истина;
	
	Период = Дата(2008, 1, 1);
	НаборЗаписей.Отбор.Период.Значение = Период;

	// ИПН - 10% не менялся с 2007


	// СН за работников и иностранных специалистов с 2008 года одинаковая шкала
	НаборЗаписей.Отбор.ВидСтавокИПНиСН.Значение = Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюСНДляГражданРК;
	НаборЗаписей.Очистить();
	
	// до 210240
	ДобавитьЗначенияСтавокИПНиСН(НаборЗаписей, Период, Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюСНДляГражданРК, 1, 
														0,	210240, 13);

	// до 560640
	ДобавитьЗначенияСтавокИПНиСН(НаборЗаписей, Период, Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюСНДляГражданРК, 2, 
														210240, 560640,  11);

	// до 2803200
	ДобавитьЗначенияСтавокИПНиСН(НаборЗаписей, Период, Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюСНДляГражданРК, 3, 
														560640, 2803200,  9);
														
	// до 8409600
	ДобавитьЗначенияСтавокИПНиСН(НаборЗаписей, Период, Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюСНДляГражданРК, 4, 
														2803200, 8409600,  7);
														
	// свыше 8409600
	ДобавитьЗначенияСтавокИПНиСН(НаборЗаписей, Период, Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюСНДляГражданРК, 5, 
														8409600, 9999999999,  5);

	НаборЗаписей.Записать();

	// СН за иностранных специалистов
	НаборЗаписей.Отбор.ВидСтавокИПНиСН.Значение = Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюСНДляИностранныхСпециалистов;
	НаборЗаписей.Очистить();

	// до 210240
	ДобавитьЗначенияСтавокИПНиСН(НаборЗаписей, Период, Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюСНДляИностранныхСпециалистов, 1, 
														0,	210240, 13);

	// до 560640
	ДобавитьЗначенияСтавокИПНиСН(НаборЗаписей, Период, Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюСНДляИностранныхСпециалистов, 2, 
														210240, 560640,  11);

	// до 2803200
	ДобавитьЗначенияСтавокИПНиСН(НаборЗаписей, Период, Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюСНДляИностранныхСпециалистов, 3, 
														560640, 2803200,  9);
														
	// до 8409600
	ДобавитьЗначенияСтавокИПНиСН(НаборЗаписей, Период, Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюСНДляИностранныхСпециалистов, 4, 
														2803200, 8409600,  7);
														
	// свыше 8409600
	ДобавитьЗначенияСтавокИПНиСН(НаборЗаписей, Период, Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюСНДляИностранныхСпециалистов, 5, 
														8409600, 9999999999,  5);
	
	НаборЗаписей.Записать();														
														
КонецПроцедуры 

// Выполняет заполнение регистра сведений "РегламентированныеРасчетныеПоказатели"
//
Процедура ЗаполнитьСведенияОРегламентированныхРасчетныхПоказателях() 

	НаборЗаписей = РегистрыСведений.РегламентированныеРасчетныеПоказатели.СоздатьНаборЗаписей();

	// До 2007 года у инвалидов 3-ей группы необлагаемый ИПН доход составлял 240 МРП, 
	// после 2007 года - 27 МЗП.
	// Для инвалидов I или II группы - до 2005 года 480 МРП, с 2005 по 2008 - без ограничения,
	// с 2009 года - 45 МЗП
	// Для инвалидов I, II, III группы установлен единый предел с 2010 года - 55 МЗП
	ДобавитьЗначенияРасчетныхПоказателей(НаборЗаписей, Дата("20020101"), 4181, 823, 823*480, 823*240);
	ДобавитьЗначенияРасчетныхПоказателей(НаборЗаписей, Дата("20030101"), 5000, 872, 872*480, 872*240);
	ДобавитьЗначенияРасчетныхПоказателей(НаборЗаписей, Дата("20040101"), 6600, 919, 919*480, 919*240);
	ДобавитьЗначенияРасчетныхПоказателей(НаборЗаписей, Дата("20050101"), 7000, 971, 999999999999.99, 971*240);
	ДобавитьЗначенияРасчетныхПоказателей(НаборЗаписей, Дата("20050701"), 9200, 971, 999999999999.99, 971*240);
	ДобавитьЗначенияРасчетныхПоказателей(НаборЗаписей, Дата("20060101"), 9200, 1030, 999999999999.99, 1030*240);
	ДобавитьЗначенияРасчетныхПоказателей(НаборЗаписей, Дата("20070101"), 9752, 1092, 999999999999.99, 9752*27);
	ДобавитьЗначенияРасчетныхПоказателей(НаборЗаписей, Дата("20080101"), 10515, 1168, 999999999999.99, 10515*27);
	ДобавитьЗначенияРасчетныхПоказателей(НаборЗаписей, Дата("20080701"), 12025, 1168, 999999999999.99, 12025*27);
	ДобавитьЗначенияРасчетныхПоказателей(НаборЗаписей, Дата("20090101"), 13470, 1273, 45*13470, 27*13470);
	ДобавитьЗначенияРасчетныхПоказателей(НаборЗаписей, Дата("20090701"), 13717, 1296, 45*13717, 27*13717);
	ДобавитьЗначенияРасчетныхПоказателей(НаборЗаписей, Дата("20090801"), 13717, 1296, 45*13470, 27*13470, 13470, 1273);	
	ДобавитьЗначенияРасчетныхПоказателей(НаборЗаписей, Дата("20100101"), 14952, 1413, 55*14952, 55*14952, 14952, 1413);
   	ДобавитьЗначенияРасчетныхПоказателей(НаборЗаписей, Дата("20110101"), 15999, 1512, 55*15999, 55*15999, 15999, 1512);	
   	ДобавитьЗначенияРасчетныхПоказателей(НаборЗаписей, Дата("20120101"), 17439, 1618, 55*17439, 55*17439, 17439, 1618);	
    ДобавитьЗначенияРасчетныхПоказателей(НаборЗаписей, Дата("20130101"), 18660, 1731, 55*18660, 55*18660, 18660, 1731);	
	ДобавитьЗначенияРасчетныхПоказателей(НаборЗаписей, Дата("20140101"), 19966, 1852, 55*19966, 55*19966, 19966, 1852);
	ДобавитьЗначенияРасчетныхПоказателей(НаборЗаписей, Дата("20150101"), 21364, 1982, 55*21364, 55*21364, 21364, 1982);	
	ДобавитьЗначенияРасчетныхПоказателей(НаборЗаписей, Дата("20160101"), 22859, 2121, 55*22859, 55*22859, 22859, 2121);
	ДобавитьЗначенияРасчетныхПоказателей(НаборЗаписей, Дата("20170101"), 24459, 2269, 75*24459, 75*24459, 24459, 2269);
	ДобавитьЗначенияРасчетныхПоказателей(НаборЗаписей, Дата("20180101"), 28284, 2405, 75*28284, 75*28284, 28284, 2405);
	ДобавитьЗначенияРасчетныхПоказателей(НаборЗаписей, Дата("20190101"), 42500, 2525, 882*2525, 882*2525, 42500, 2525);
	ДобавитьЗначенияРасчетныхПоказателей(НаборЗаписей, Дата("20200101"), 42500, 2651, 882*2651, 882*2651, 42500, 2651);
	ДобавитьЗначенияРасчетныхПоказателей(НаборЗаписей, Дата("20200401"), 42500, 2778, 882*2651, 882*2651, 42500, 2778);
	ДобавитьЗначенияРасчетныхПоказателей(НаборЗаписей, Дата("20210101"), 42500, 2917, 882*2917, 882*2917, 42500, 2917);
	ДобавитьЗначенияРасчетныхПоказателей(НаборЗаписей, Дата("20220101"), 60000, 3063, 882*3063, 882*3063, 60000, 3063);
	ДобавитьЗначенияРасчетныхПоказателей(НаборЗаписей, Дата("20220401"), 60000, 3063, 882*3063, 882*3063, 60000, 3063, 3180);
	ДобавитьЗначенияРасчетныхПоказателей(НаборЗаписей, Дата("20230101"), 70000, 3450, 882*3450, 882*3450, 70000, 3450, 3450);
	ДобавитьЗначенияРасчетныхПоказателей(НаборЗаписей, Дата("20240101"), 85000, 3692, 882*3692, 882*3692, 85000, 3692, 3692);
	ДобавитьЗначенияРасчетныхПоказателей(НаборЗаписей, Дата("20250101"), 85000, 3932, 882*3932, 882*3932, 85000, 3932, 3932);
	
    НаборЗаписей.Записать();

КонецПроцедуры

// Добавляет запись в набор записей регистра "РегламентированныеРасчетныеПоказатели"
//
Процедура ДобавитьЗначенияРасчетныхПоказателей(НаборЗаписей, ДатаСведений, РазмерМЗП, РазмерМРП, 
														РазмерНеоблагаемогоИПНДоходаИнвалидов1_2Группы = 0,
														РазмерНеоблагаемогоИПНДоходаИнвалидов3Группы = 0, 
														РазмерМЗПДляЦелейНалогообложения = 0, 
														РазмерМРПДляЦелейНалогообложения = 0,
														РазмерМРПДляПособийИныхСоциальныхВыплат = 0)

	НоваяЗапись = НаборЗаписей.Добавить();

	НоваяЗапись.Период   									   = ДатаСведений;
	НоваяЗапись.РазмерМЗП									   = РазмерМЗП;
	НоваяЗапись.РазмерМРП									   = РазмерМРП;
	НоваяЗапись.РазмерНеоблагаемогоИПНДоходаИнвалидов1_2Группы = РазмерНеоблагаемогоИПНДоходаИнвалидов1_2Группы;
	НоваяЗапись.РазмерНеоблагаемогоИПНДоходаИнвалидов3Группы   = РазмерНеоблагаемогоИПНДоходаИнвалидов3Группы;
	НоваяЗапись.РазмерМЗПДляЦелейНалогообложения 			   = ?(РазмерМЗПДляЦелейНалогообложения = 0, РазмерМЗП, РазмерМЗПДляЦелейНалогообложения);
	НоваяЗапись.РазмерМРПДляЦелейНалогообложения 			   = ?(РазмерМРПДляЦелейНалогообложения = 0, РазмерМРП, РазмерМРПДляЦелейНалогообложения);
	НоваяЗапись.РазмерМРПДляПособийИныхСоциальныхВыплат        = РазмерМРПДляПособийИныхСоциальныхВыплат;
	
КонецПроцедуры

// Выполняет заполнение регистра сведений "СтавкаРефинансированияНБ"
//
Процедура ЗаполнитьСведенияОСтавкеРефинансированияНБ() 

 	СтавкаНБ = РегистрыСведений.СтавкаРефинансированияНБ.СоздатьНаборЗаписей();

 	СтрокаНабора = СтавкаНБ.Добавить();
 	СтрокаНабора.Период = '20030707';
 	СтрокаНабора.Размер = 7;

 	СтрокаНабора = СтавкаНБ.Добавить();
 	СтрокаНабора.Период = '20050201';
 	СтрокаНабора.Размер = 7.5;

 	СтрокаНабора = СтавкаНБ.Добавить();
 	СтрокаНабора.Период = '20050711';
 	СтрокаНабора.Размер = 8;

 	СтрокаНабора = СтавкаНБ.Добавить();
 	СтрокаНабора.Период = '20060401';
 	СтрокаНабора.Размер = 8.5;
 	
 	СтрокаНабора = СтавкаНБ.Добавить();
 	СтрокаНабора.Период = '20060701';
 	СтрокаНабора.Размер = 9;

 	СтрокаНабора = СтавкаНБ.Добавить();
 	СтрокаНабора.Период = '20071201';
 	СтрокаНабора.Размер = 11;
 	
 	СтрокаНабора = СтавкаНБ.Добавить();
 	СтрокаНабора.Период = '20080701';
 	СтрокаНабора.Размер = 10.5;

 	СтрокаНабора = СтавкаНБ.Добавить();
 	СтрокаНабора.Период = '20090101';
 	СтрокаНабора.Размер = 10;

 	СтрокаНабора = СтавкаНБ.Добавить();
 	СтрокаНабора.Период = '20090205';
 	СтрокаНабора.Размер = 9.5;
	
 	СтрокаНабора = СтавкаНБ.Добавить();
 	СтрокаНабора.Период = '20090512';
 	СтрокаНабора.Размер = 9;
	
	СтрокаНабора = СтавкаНБ.Добавить();
 	СтрокаНабора.Период = '20090610';
 	СтрокаНабора.Размер = 8.5;

	СтрокаНабора = СтавкаНБ.Добавить();
 	СтрокаНабора.Период = '20090710';
 	СтрокаНабора.Размер = 8;

	СтрокаНабора = СтавкаНБ.Добавить();
 	СтрокаНабора.Период = '20090810';
 	СтрокаНабора.Размер = 7.5;
	
	СтрокаНабора = СтавкаНБ.Добавить();
 	СтрокаНабора.Период = '20090904';
 	СтрокаНабора.Размер = 7;
	
	СтрокаНабора = СтавкаНБ.Добавить();
 	СтрокаНабора.Период = '20110309';
 	СтрокаНабора.Размер = 7.5;
	
	СтрокаНабора = СтавкаНБ.Добавить();
 	СтрокаНабора.Период = '20120214';
 	СтрокаНабора.Размер = 7;
	
	СтрокаНабора = СтавкаНБ.Добавить();
 	СтрокаНабора.Период = '20120402';
 	СтрокаНабора.Размер = 6.5;
	
	СтрокаНабора = СтавкаНБ.Добавить();
 	СтрокаНабора.Период = '20120604';
 	СтрокаНабора.Размер = 6;
	
	СтрокаНабора = СтавкаНБ.Добавить();
 	СтрокаНабора.Период = '20120806';
 	СтрокаНабора.Размер = 5.5;
	
	СтрокаНабора = СтавкаНБ.Добавить();
 	СтрокаНабора.Период = '20170401';
 	СтрокаНабора.Размер = 11;
	
	СтрокаНабора = СтавкаНБ.Добавить();
 	СтрокаНабора.Период = '20170606';
 	СтрокаНабора.Размер = 10.5;
	
	СтрокаНабора = СтавкаНБ.Добавить();
 	СтрокаНабора.Период = '20170822';
 	СтрокаНабора.Размер = 10.25;
	
	СтрокаНабора = СтавкаНБ.Добавить();
 	СтрокаНабора.Период = '20180116';
 	СтрокаНабора.Размер = 9.75;
	
	СтрокаНабора = СтавкаНБ.Добавить();
 	СтрокаНабора.Период = '20180306';
 	СтрокаНабора.Размер = 9.5;    
	
	СтрокаНабора = СтавкаНБ.Добавить();
 	СтрокаНабора.Период = '20180417';
 	СтрокаНабора.Размер = 9.25;    
	
	СтрокаНабора = СтавкаНБ.Добавить();
 	СтрокаНабора.Период = '20180605';
 	СтрокаНабора.Размер = 9;  
	
	СтрокаНабора = СтавкаНБ.Добавить();
 	СтрокаНабора.Период = '20181016';
 	СтрокаНабора.Размер = 9.25;  
	
	СтрокаНабора = СтавкаНБ.Добавить();
 	СтрокаНабора.Период = '20190416';
 	СтрокаНабора.Размер = 9;  
	
	СтрокаНабора = СтавкаНБ.Добавить();
 	СтрокаНабора.Период = '20190910';
 	СтрокаНабора.Размер = 9.25;  
	
	СтрокаНабора = СтавкаНБ.Добавить();
 	СтрокаНабора.Период = '20200310';
 	СтрокаНабора.Размер = 12;  
	
	СтрокаНабора = СтавкаНБ.Добавить();
 	СтрокаНабора.Период = '20200406';
 	СтрокаНабора.Размер = 9.5;  
	
	СтрокаНабора = СтавкаНБ.Добавить();
 	СтрокаНабора.Период = '20200721';
 	СтрокаНабора.Размер = 9;  
	
	СтрокаНабора = СтавкаНБ.Добавить();
 	СтрокаНабора.Период = '20210727';
 	СтрокаНабора.Размер = 9.25;  
	
	СтрокаНабора = СтавкаНБ.Добавить();
 	СтрокаНабора.Период = '20210914';
 	СтрокаНабора.Размер = 9.5;  
	
	СтрокаНабора = СтавкаНБ.Добавить();
 	СтрокаНабора.Период = '20211026';
 	СтрокаНабора.Размер = 9.75;  
	
	СтрокаНабора = СтавкаНБ.Добавить();
 	СтрокаНабора.Период = '20220125';
 	СтрокаНабора.Размер = 10.25;  
	
	СтрокаНабора = СтавкаНБ.Добавить();
 	СтрокаНабора.Период = '20220224';
 	СтрокаНабора.Размер = 13.5;  
	
	СтрокаНабора = СтавкаНБ.Добавить();
 	СтрокаНабора.Период = '20220426';
 	СтрокаНабора.Размер = 14;  
	
	СтрокаНабора = СтавкаНБ.Добавить();
 	СтрокаНабора.Период = '20220726';
 	СтрокаНабора.Размер = 14.5;  
	
	СтрокаНабора = СтавкаНБ.Добавить();
 	СтрокаНабора.Период = '20221027';
 	СтрокаНабора.Размер = 16;  
	
	СтрокаНабора = СтавкаНБ.Добавить();
 	СтрокаНабора.Период = '20221206';
 	СтрокаНабора.Размер = 16.75;  
	
	СтрокаНабора = СтавкаНБ.Добавить();
 	СтрокаНабора.Период = '20230828';
 	СтрокаНабора.Размер = 16.5;  
	
	СтрокаНабора = СтавкаНБ.Добавить();
 	СтрокаНабора.Период = '20231009';
 	СтрокаНабора.Размер = 16;  
	
	СтрокаНабора = СтавкаНБ.Добавить();
 	СтрокаНабора.Период = '20231127';
 	СтрокаНабора.Размер = 15.75;  
	
	СтрокаНабора = СтавкаНБ.Добавить();
 	СтрокаНабора.Период = '20240122';
 	СтрокаНабора.Размер = 15.25;  
	
	СтрокаНабора = СтавкаНБ.Добавить();
 	СтрокаНабора.Период = '20240226';
 	СтрокаНабора.Размер = 14.75;  
	
	СтрокаНабора = СтавкаНБ.Добавить();
 	СтрокаНабора.Период = '20240603';
 	СтрокаНабора.Размер = 14.5;  
	
	СтрокаНабора = СтавкаНБ.Добавить();
 	СтрокаНабора.Период = '20240715';
 	СтрокаНабора.Размер = 14.25;  
	
	СтрокаНабора = СтавкаНБ.Добавить();
 	СтрокаНабора.Период = '20241202';
 	СтрокаНабора.Размер = 15.25;  
	
 	СтавкаНБ.Записать();

КонецПроцедуры

// Выполняет начальное заполнение справочника "ОснованияУвольнения"
// данными по умолчанию
Процедура ЗаполнитьОснованияУвольнения()
	
	ОснованияУвольнения = Справочники.ОснованияУвольненияИзОрганизации;
	ЭлементСпр = ОснованияУвольнения.НайтиПоКоду("000000001");
	КодЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	
	Если ЭлементСпр.Пустая() Тогда
		ЭлементСпр = ОснованияУвольнения.СоздатьЭлемент();
		ЭлементСпр.Код 							  = "000000001";
		ЭлементСпр.Наименование 				  = НСтр("ru = 'п. 1) ст. 51 Трудового Кодекса РК. Расторжение трудового договора по соглашению сторон.'",КодЯзыка);
		ЭлементСпр.ПричинаУвольненияИзОрганизации = Перечисления.ПричиныУвольненияИзОрганизации.ПоПричинамТекучести;
		ЭлементСпр.Записать();
	КонецЕсли;
	ЭлементСпр = ОснованияУвольнения.НайтиПоКоду("000000002");
	Если ЭлементСпр.Пустая() Тогда
		ЭлементСпр = ОснованияУвольнения.СоздатьЭлемент();
		ЭлементСпр.Код 							  = "000000002";
		ЭлементСпр.Наименование					  = НСтр("ru = 'п. 2) ст. 51 Трудового Кодекса РК. Истечение срока трудового договора.'", КодЯзыка);
		ЭлементСпр.ПричинаУвольненияИзОрганизации = Перечисления.ПричиныУвольненияИзОрганизации.ПоПричинамТекучести;
		ЭлементСпр.Записать();
	КонецЕсли;
	ЭлементСпр = ОснованияУвольнения.НайтиПоКоду("000000023");
	Если ЭлементСпр.Пустая() Тогда
		ЭлементСпр = ОснованияУвольнения.СоздатьЭлемент();
		ЭлементСпр.Код							  = "000000023";
		ЭлементСпр.Наименование 				  = НСтр("ru = 'п. 1 ст. 57 Трудового Кодекса РК. По инициативе работника.'", КодЯзыка);
		ЭлементСпр.ПричинаУвольненияИзОрганизации = Перечисления.ПричиныУвольненияИзОрганизации.ПоПричинамТекучести;
		ЭлементСпр.Записать();
	КонецЕсли;
	
КонецПроцедуры

// Выполняет заполнение реквизитов планов видов расчета
//
Процедура ЗаполнитьПланыВидовРасчетаОрганизации() 

	// заполним реквизиты ПВР "Основные начисления организаций"
	ПВР 				   = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций;
	СпРасчета  			   = Перечисления.СпособыРасчетаОплатыТруда;
	СпособыНалогообложения = Справочники.СпособыНалогообложенияДоходов;
	Облагается			   = СпособыНалогообложения.ОблагаетсяЦеликом;
	НеОблагается		   = СпособыНалогообложения.НеОблагаетсяЦеликом;
	НеОтражатьВБухучете	   = Справочники.СпособыОтраженияЗарплатыВРеглУчете.НеОтражатьВБухучете;
	НеПремия			   = Перечисления.ВидыПремии.НеПремия;
	ИндексируемыйЗаработок = Перечисления.СоставныеЧастиЗаработкаДляРасчетаСреднего.ИндексируемыйЗаработок;
	
	УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВР.ОкладПоДням, СпРасчета.ПоМесячнойТарифнойСтавкеПоДням, Истина, Облагается, Облагается, Облагается, Облагается, Облагается, Облагается, Облагается, Облагается, , НеПремия, ИндексируемыйЗаработок);
	УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВР.ОкладПоЧасам, СпРасчета.ПоМесячнойТарифнойСтавкеПоЧасам, Истина, Облагается, Облагается, Облагается, Облагается, Облагается, Облагается, Облагается, Облагается, , НеПремия, ИндексируемыйЗаработок);
	УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВР.ОкладОтОбратного, СпРасчета.ПоМесячнойТарифнойСтавкеОтОбратного, Истина, Облагается, Облагается, Облагается, Облагается, Облагается, Облагается, Облагается, Облагается, , НеПремия, ИндексируемыйЗаработок);
	УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВР.ОкладОтОбратногоПоДням, СпРасчета.ПоМесячнойТарифнойСтавкеОтОбратногоПоДням, Истина, Облагается, Облагается, Облагается, Облагается, Облагается, Облагается, Облагается, Облагается, , НеПремия, ИндексируемыйЗаработок);
	УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВР.ОкладОтОбратногоПоЧасам, СпРасчета.ПоМесячнойТарифнойСтавкеОтОбратногоПоЧасам, Истина, Облагается, Облагается, Облагается, Облагается, Облагается, Облагается, Облагается, Облагается, , НеПремия, ИндексируемыйЗаработок);
	УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВР.ТарифЧасовой, СпРасчета.ПоЧасовойТарифнойСтавке, Истина, Облагается, Облагается, Облагается, Облагается, Облагается, Облагается, Облагается, Облагается, , НеПремия, ИндексируемыйЗаработок);
	УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВР.ОплатаПоСреднемуБЛ, СпРасчета.ПоСреднемуЗаработкуДляБольничных, Ложь, Облагается, Облагается, Облагается, Облагается, Облагается, Облагается, Облагается, , НеПремия, ИндексируемыйЗаработок);
	УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВР.ОплатаПоСреднемуОтп, СпРасчета.ПоСреднемуЗаработкуДляОтпуска, Ложь, Облагается, Облагается, Облагается, Облагается, Облагается, Облагается, Облагается, Облагается, , НеПремия, ИндексируемыйЗаработок);
	// компенсация отпуска при увольнении
	УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВР.КомпенсацияОтпуска, СпРасчета.ПоСреднемуЗаработкуДляОтпуска, Ложь, Облагается, Облагается, Облагается, Облагается, Облагается, Облагается, Облагается, Облагается, , НеПремия, ИндексируемыйЗаработок, Истина);
	// компенсация отпуска (без увольнения)
	УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВР.КомпенсацияОтпускаБезУвольнения, СпРасчета.ПоСреднемуЗаработкуДляОтпуска, Ложь, Облагается, Облагается, Облагается, Облагается, Облагается, Облагается, Облагается, Облагается, НеПремия, ИндексируемыйЗаработок, Истина);
	
	// виды расчета для регистрации прочих доходов 
	УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВР.КомпенсационныеВыплатыПриСлужебныхКомандировках, СпРасчета.ФиксированнойСуммой, Ложь, Облагается, Облагается, Облагается, Облагается, НеОблагается,НеОблагается, НеОблагается, НеОблагается, НеОтражатьВБухучете, НеПремия, ИндексируемыйЗаработок);
	УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВР.ПрочиеДоходыОблагаемыеУИсточника, СпРасчета.ФиксированнойСуммой, Ложь, Облагается, НеОблагается, НеОблагается, НеОблагается, НеОблагается, НеОблагается, НеОблагается, НеОблагается, НеОтражатьВБухучете, НеПремия, ИндексируемыйЗаработок);
	УстановитьРеквизитыОсновногоНачисленияОрганизации(ПВР.ДоходыНеОблагаемыеУИсточникаВыплаты, СпРасчета.ФиксированнойСуммой, Ложь, НеОблагается, НеОблагается, НеОблагается, НеОблагается, НеОблагается, НеОблагается, НеОблагается, НеОблагается, НеОтражатьВБухучете, НеПремия, ИндексируемыйЗаработок);
	
	ПВРОсн  = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций;
	
	СпНачисленийЗаОтработанноеВремя = Новый СписокЗначений;
	СпНачисленийЗаОтработанноеВремя.Добавить(ПВРОсн.ОкладПоДням);
	СпНачисленийЗаОтработанноеВремя.Добавить(ПВРОсн.ОкладПоЧасам);
	СпНачисленийЗаОтработанноеВремя.Добавить(ПВРОсн.ОкладОтОбратного);
	СпНачисленийЗаОтработанноеВремя.Добавить(ПВРОсн.ОкладОтОбратногоПоДням);
	СпНачисленийЗаОтработанноеВремя.Добавить(ПВРОсн.ОкладОтОбратногоПоЧасам);
	СпНачисленийЗаОтработанноеВремя.Добавить(ПВРОсн.ТарифЧасовой);
	
	// База основных начислений организации
	
	// доплата до среднего заработка имеет базу
	УстановитьБазовыеИВедущиеРасчеты(ПВРОсн.ОплатаПоСреднемуОтп, СпНачисленийЗаОтработанноеВремя);
	УстановитьБазовыеИВедущиеРасчеты(ПВРОсн.ОплатаПоСреднемуБЛ, СпНачисленийЗаОтработанноеВремя);
	УстановитьБазовыеИВедущиеРасчеты(ПВРОсн.КомпенсацияОтпуска, СпНачисленийЗаОтработанноеВремя);
	УстановитьБазовыеИВедущиеРасчеты(ПВРОсн.КомпенсацияОтпускаБезУвольнения, СпНачисленийЗаОтработанноеВремя);
	
	// Заполним реквизиты ПВР "Удержания организаций"

	ПВР = ПланыВидовРасчета.УдержанияОрганизаций;
	ПланСчетов = ПланыСчетов.Типовой;
	СпособУчетаИЛ = ДобавитьСпособУчетаРегЗарплаты(НСтр("ru = 'Удержания по исполнительным документам'", ОбщегоНазначения.КодОсновногоЯзыка()), ПланСчетов.КраткосрочнаяЗадолженностьПоОплатеТруда, Справочники.ФизическиеЛица.ПустаяСсылка(),,, ПланСчетов.КраткосрочнаяЗадолженностьПоИсполнительнымЛистам, Справочники.Контрагенты.ПустаяСсылка(),,);	
	
	СпБазовыхРасчетов = Новый СписокЗначений;
	СпБазовыхРасчетов.Добавить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОкладПоДням);
	СпБазовыхРасчетов.Добавить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОкладПоЧасам);
	СпБазовыхРасчетов.Добавить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОкладОтОбратного);
	СпБазовыхРасчетов.Добавить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОкладОтОбратногоПоДням);
	СпБазовыхРасчетов.Добавить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОкладОтОбратногоПоЧасам);
	СпБазовыхРасчетов.Добавить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ТарифЧасовой);
	СпБазовыхРасчетов.Добавить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаПоСреднемуБЛ);
	СпБазовыхРасчетов.Добавить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаПоСреднемуОтп);
	
	УстановитьРеквизитыУдержанияОрганизации(ПВР.ИЛПроцентом			 , СпРасчета.ИсполнительныйЛистПроцентом    , СпособУчетаИЛ, СпБазовыхРасчетов, Истина, Истина);
	УстановитьРеквизитыУдержанияОрганизации(ПВР.ИЛФиксированнойСуммой, СпРасчета.УдержаниеФиксированнойСуммой   , СпособУчетаИЛ);
	УстановитьРеквизитыУдержанияОрганизации(ПВР.ИЛКоэффициентомПоМРП , СпРасчета.ПоМесячномуРасчетномуПоказателю, СпособУчетаИЛ);
	УстановитьРеквизитыУдержанияОрганизации(ПВР.ПочтовыйСборПоИЛ	 , СпРасчета.ПочтовыйСбор				    , СпособУчетаИЛ);
	
	// Включаемые в расчет от обратного виды начислений и компенсируемые виды удержаний
	СписокКомпенсируемыхУдержаний = Новый СписокЗначений;
	СписокКомпенсируемыхУдержаний.Добавить(Справочники.НалогиСборыОтчисления.ИндивидуальныйПодоходныйНалог);
	СписокКомпенсируемыхУдержаний.Добавить(Справочники.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносы);

	УстановитьВключаемыеИКомпенсируемыеРасчеты(ПВРОсн.ОкладОтОбратного, Неопределено, СписокКомпенсируемыхУдержаний);
	УстановитьВключаемыеИКомпенсируемыеРасчеты(ПВРОсн.ОкладОтОбратногоПоДням, Неопределено, СписокКомпенсируемыхУдержаний);
	УстановитьВключаемыеИКомпенсируемыеРасчеты(ПВРОсн.ОкладОтОбратногоПоЧасам, Неопределено, СписокКомпенсируемыхУдержаний);
	
КонецПроцедуры

// Устанавливает реквизиты элемента плана видов расчета "ОсновныеНачисленияОрганизаций" 
//
Процедура УстановитьРеквизитыОсновногоНачисленияОрганизации(ВидРасчета, СпособРасчета, ЗачетОтработанногоВремени, ОблагаетсяИПН = Неопределено, ОблагаетсяОПВ = Неопределено, ОблагаетсяСН = Неопределено, ОблагаетсяСО = Неопределено, ОблагаетсяОППВ = Неопределено, ОблагаетсяВОСМС = Неопределено, ОблагаетсяООСМС = Неопределено, ОблагаетсяОПВР = Неопределено, ОблагаетсяЕП = Неопределено, СпособОтраженияВБухучете = Неопределено, ВидПремии = Неопределено, УчетЗаработкаПриРасчетеСреднего = Неопределено, ЯвляетсяКомпенсациейЗаНеиспользованныйОтпуск = Ложь)

	ОбъектВР = ВидРасчета.ПолучитьОбъект();

	ОбъектВР.СпособРасчета                          	  = СпособРасчета;
	ОбъектВР.ЗачетОтработанногоВремени              	  = ЗачетОтработанногоВремени;
	ОбъектВР.ОблагаетсяИПН                          	  = ОблагаетсяИПН;
	ОбъектВР.ОблагаетсяОПВ                          	  = ОблагаетсяОПВ;
	ОбъектВР.ОблагаетсяСН                           	  = ОблагаетсяСН;
	ОбъектВР.ОблагаетсяСО                           	  = ОблагаетсяСО;
	ОбъектВР.ОблагаетсяОППВ                         	  = ОблагаетсяОППВ;	
	ОбъектВР.ОблагаетсяООСМС                         	  = ОблагаетсяООСМС;	
	ОбъектВР.ОблагаетсяВОСМС                         	  = ОблагаетсяВОСМС;	
	ОбъектВР.ОблагаетсяОПВР                               = ОблагаетсяОПВР;
	ОбъектВР.ОблагаетсяЕП                                 = ОблагаетсяЕП;
	ОбъектВР.СпособОтраженияВБухучете               	  = СпособОтраженияВБухучете;
	ОбъектВР.ВидПремии				               		  = ВидПремии;
	ОбъектВР.УчетЗаработкаПриРасчетеСреднего       		  = УчетЗаработкаПриРасчетеСреднего;
	ОбъектВР.ЯвляетсяКомпенсациейЗаНеиспользованныйОтпуск = ЯвляетсяКомпенсациейЗаНеиспользованныйОтпуск;
	ОбъектВР.Записать();

КонецПроцедуры // УстановитьРеквизитыОсновногоНачисленияОрганизации()

// Устанавливает список базовых расчетов для элемента плана видов расчета
//
// Параметры
//  ВидРасчета  – вид расчетов (ссылка)
//  БазовыеВидыРасчетов - список базовых видов расчетов
Процедура УстановитьБазовыеИВедущиеРасчеты(ВидРасчета, БазовыеВидыРасчетов, ВедущиеВидыРасчета = Неопределено)

	ВР = ВидРасчета.ПолучитьОбъект();

	// обходим с последней строки табличной части и удаляем не предопределенные строки
	Индекс = ВР.БазовыеВидыРасчета.Количество();
	Пока Индекс > 0 Цикл
		Индекс = Индекс - 1;
		Если ВР.БазовыеВидыРасчета[Индекс].Предопределенный Тогда
			Продолжить;
		КонецЕсли;
		ВР.БазовыеВидыРасчета.Удалить(Индекс);
	КонецЦикла;
	Если БазовыеВидыРасчетов <> Неопределено Тогда
		Для каждого Элемент Из БазовыеВидыРасчетов Цикл
			НоваяСтрока            = ВР.БазовыеВидыРасчета.Добавить();
			НоваяСтрока.ВидРасчета = Элемент.Значение;
		КонецЦикла;
	КонецЕсли;

	// обходим с последней строки табличной части и удаляем не предопределенные строки
	Индекс = ВР.ВедущиеВидыРасчета.Количество();
	Пока Индекс > 0 Цикл
		Индекс = Индекс - 1;
		Если ВР.ВедущиеВидыРасчета[Индекс].Предопределенный Тогда
			Продолжить;
		КонецЕсли;
		ВР.ВедущиеВидыРасчета.Удалить(Индекс);
	КонецЦикла;
	Если ВедущиеВидыРасчета <> Неопределено Тогда
		Для каждого Элемент Из ВедущиеВидыРасчета Цикл
			НоваяСтрока            = ВР.ВедущиеВидыРасчета.Добавить();
			НоваяСтрока.ВидРасчета = Элемент.Значение;
		КонецЦикла;
	КонецЕсли;

	ВР.Записать();

КонецПроцедуры

// Добавляет в справочник "СпособыОтраженияЗарплатыВРеглУчете" новый элемент
//
Функция ДобавитьСпособУчетаРегЗарплаты(Наименование, СчетДт, СубконтоДт1 = Неопределено, СубконтоДт2 = Неопределено, СубконтоДт3 = Неопределено, СчетКт, СубконтоКт1 = Неопределено, СубконтоКт2 = Неопределено, СубконтоКт3 = Неопределено)

	Элемент = Справочники.СпособыОтраженияЗарплатыВРеглУчете.НайтиПоНаименованию(Наименование);
	Если Элемент.Пустая() Тогда
		Элемент     		 = Справочники.СпособыОтраженияЗарплатыВРеглУчете.СоздатьЭлемент();
		Элемент.Наименование = Наименование;
	Иначе
		Элемент = Элемент.ПолучитьОбъект();	
	КонецЕсли;
	
	Элемент.СчетДт 		= СчетДт;
	Элемент.СубконтоДт1 = СубконтоДт1;
	Элемент.СубконтоДт2 = СубконтоДт2;
	Элемент.СубконтоДт3 = СубконтоДт3;
	
	Элемент.СчетКт 		= СчетКт;
	Элемент.СубконтоКт1 = СубконтоКт1;
	Элемент.СубконтоКт2 = СубконтоКт2;
	Элемент.СубконтоКт3 = СубконтоКт3;		
	
	Элемент.Записать();
	
	Возврат Элемент.Ссылка

КонецФункции

// Заполнение реквизитов у предопределенного элемента ОтражениеНачисленийПоУмолчанию \
//
Процедура ЗаполнениеОтраженияНачисленийПоУмолчанию()
	
	ПланСчетов = ПланыСчетов.Типовой;
	СпособУчетПоУмолчанию = Справочники.СпособыОтраженияЗарплатыВРеглУчете.ОтражениеНачисленийПоУмолчанию.ПолучитьОбъект();
	СпособУчетПоУмолчанию.СчетДт 	  	= ПланСчетов.АдминистративныеРасходы;
	СпособУчетПоУмолчанию.СубконтоДт1 	= Справочники.СтатьиЗатрат.ПустаяСсылка();
	СпособУчетПоУмолчанию.СубконтоДт2 	= Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
	СпособУчетПоУмолчанию.СчетКт 	  	= ПланСчетов.КраткосрочнаяЗадолженностьПоОплатеТруда;
	СпособУчетПоУмолчанию.СубконтоКт1 	= Справочники.ФизическиеЛица.ПустаяСсылка();
	СпособУчетПоУмолчанию.СчетДтНУ	  	= ПланыСчетов.Налоговый.ОбщиеИАдминистративныеРасходы;
	СпособУчетПоУмолчанию.СубконтоДтНУ1 = Справочники.СтатьиЗатрат.ПустаяСсылка();
	СпособУчетПоУмолчанию.СчетКтНУ 		= ПланыСчетов.Налоговый.ВзаиморасчетыСРаботниками;
	СпособУчетПоУмолчанию.СубконтоКтНУ1 = Справочники.ФизическиеЛица.ПустаяСсылка();
	СпособУчетПоУмолчанию.Записать();
	
КонецПроцедуры

// Заполнение реквизитов у предопределенного элемента ВидыПрочихВыплат \
//
Процедура ЗаполнениеСправочникаВидыПрочихВыплатПоУмолчанию() Экспорт
		
	ВидПрочихВыплат = Справочники.ВидыПрочихВыплат.ПрофессиональнаяВыплатаЗаСчетРаботодателя.ПолучитьОбъект();
	ВидПрочихВыплат.ПолноеНаименование   = ВидПрочихВыплат.Наименование;
	ВидПрочихВыплат.Записать();
	
КонецПроцедуры

// Устанавливает реквизиты элемента плана видов расчета "УдержанияОрганизаций" 
//
Процедура УстановитьРеквизитыУдержанияОрганизации(ВидРасчета, СпособРасчета, СпособОтраженияВБухучете, БазовыеВидыРасчетов = Неопределено, ВычитатьИзБазыИПН = Ложь, ВычитатьИзБазыОПВ = Ложь)

	ОбъектВР = ВидРасчета.ПолучитьОбъект();

	ОбъектВР.СпособРасчета            = СпособРасчета;
	ОбъектВР.СпособОтраженияВБухучете = СпособОтраженияВБухучете;
	ОбъектВР.ВычитатьИзБазыИПН 		  = ВычитатьИзБазыИПН;
	ОбъектВР.ВычитатьИзБазыОПВ 		  = ВычитатьИзБазыОПВ;

	Если БазовыеВидыРасчетов <> Неопределено Тогда
		ОбъектВР.БазовыеВидыРасчета.Очистить();
		Для Каждого Элемент Из БазовыеВидыРасчетов Цикл
			НоваяСтрока            = ОбъектВР.БазовыеВидыРасчета.Добавить();
			НоваяСтрока.ВидРасчета = Элемент.Значение;
		КонецЦикла;
	КонецЕсли;

	ОбъектВР.Записать();

КонецПроцедуры

// Устанавливает список включаемых в расчет от обратного начислений и компенсируемых удержаний
//
// Параметры
//  ВидРасчета  – вид расчетов (ссылка)
//  ВключаемыеВидыНачислений - список включаемых видов начислений
//  КомпенсируемыеВидыУдержаний - список компенсируемых видов удержаний
Процедура УстановитьВключаемыеИКомпенсируемыеРасчеты(ВидРасчета, ВключаемыеВидыНачислений, КомпенсируемыеВидыУдержаний)

	ВР = ВидРасчета.ПолучитьОбъект();

	Если ВключаемыеВидыНачислений <> Неопределено Тогда
		Для каждого Элемент Из ВключаемыеВидыНачислений Цикл
			Если ВР.ВключаемыеВРасчетОтОбратногоВидыНачислений.Найти(Элемент.Значение,"ВидРасчета") = Неопределено Тогда
				НоваяСтрока            = ВР.ВключаемыеВРасчетОтОбратногоВидыНачислений.Добавить();
				НоваяСтрока.ВидРасчета = Элемент.Значение;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	// обходим с последней строки табличной части и удаляем не предопределенные строки
	Если КомпенсируемыеВидыУдержаний <> Неопределено Тогда
		Для каждого Элемент Из КомпенсируемыеВидыУдержаний Цикл
			Если ВР.КомпенсируемыеРасчетомОтОбратногоВидыУдержаний.Найти(Элемент.Значение, "ВидРасчета") = Неопределено Тогда
				НоваяСтрока            = ВР.КомпенсируемыеРасчетомОтОбратногоВидыУдержаний.Добавить();
				НоваяСтрока.ВидРасчета = Элемент.Значение;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	ВР.Записать();

КонецПроцедуры

//Процедура заполняет признак "Учет временных разниц" в плане счетов "Налоговый"
//для счетов, по которым в конфигурации реализован механизм учета ВР
//
Процедура ЗаполнитьПризнакУчетВРВПланеСчетовНалоговый()
	
	МассивСчетовИсключения = Новый Массив;
	МассивСчетовИсключения.Добавить(ПланыСчетов.Налоговый.ДенежныеСредства);
	МассивСчетовИсключения.Добавить(ПланыСчетов.Налоговый.КорпоративныйПодоходныйНалогАвансы);
	МассивСчетовИсключения.Добавить(ПланыСчетов.Налоговый.НалогНаДобавленнуюСтоимостьКВозмещению);
	МассивСчетовИсключения.Добавить(ПланыСчетов.Налоговый.КредитыИЗаймыПолученные);
	МассивСчетовИсключения.Добавить(ПланыСчетов.Налоговый.КредитыИЗаймыВыданные);
	МассивСчетовИсключения.Добавить(ПланыСчетов.Налоговый.КорпоративныйПодоходныйНалог);
	МассивСчетовИсключения.Добавить(ПланыСчетов.Налоговый.ИндивидуальныйПодоходныйНалог);
	МассивСчетовИсключения.Добавить(ПланыСчетов.Налоговый.НалогНаДобавленнуюСтоимость);
	МассивСчетовИсключения.Добавить(ПланыСчетов.Налоговый.ОбязательстваПоСоциальномуСтрахованию);
	МассивСчетовИсключения.Добавить(ПланыСчетов.Налоговый.ОбязательстваПоВзносамОСМС);
	МассивСчетовИсключения.Добавить(ПланыСчетов.Налоговый.ОбязательстваПоОтчислениямОСМС);
	МассивСчетовИсключения.Добавить(ПланыСчетов.Налоговый.ОбязательстваПоПенсионнымОтчислениям);
	МассивСчетовИсключения.Добавить(ПланыСчетов.Налоговый.ОбязательстваПоОбязательнымПенсионнымВзносамРаботодателя);
	МассивСчетовИсключения.Добавить(ПланыСчетов.Налоговый.ПрочиеВзаиморасчеты);
	МассивСчетовИсключения.Добавить(ПланыСчетов.Налоговый.ВзаиморасчетыСРаботниками);
	МассивСчетовИсключения.Добавить(ПланыСчетов.Налоговый.ЗадолженностьПодотчетныхЛиц);
	МассивСчетовИсключения.Добавить(ПланыСчетов.Налоговый.ЗадолженностьПоИсполнительнымЛистам);
	
	
	Запрос = Новый Запрос;
	Запрос.Текст =  "ВЫБРАТЬ
	|	Налоговый.Ссылка КАК Счет,
	|	ПРЕДСТАВЛЕНИЕ(Налоговый.Ссылка) КАК СчетПредставление
	|ИЗ
	|	ПланСчетов.Налоговый КАК Налоговый
	|ГДЕ
	|	НЕ Налоговый.Ссылка В ИЕРАРХИИ(&МассивСчетов)
	|	И (НЕ Налоговый.ВестиУчетВременныхРазниц)
	|	И (НЕ Налоговый.ЗапретитьИспользоватьВПроводках)" ;
	
	Запрос.УстановитьПараметр("МассивСчетов", МассивСчетовИсключения);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		ОбъектСчет = Выборка.Счет.ПолучитьОбъект();
		ОбъектСчет.ВестиУчетВременныхРазниц = Истина;
		Попытка
			ОбъектСчет.Записать();
		Исключение
			ТекстСообщения = НСтр("ru='Операция не выполнена'", ОбщегоНазначения.КодОсновногоЯзыка());
			ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;	    
	КонецЦикла; 

КонецПроцедуры

// Заполняет реквизит "СчетНУ" в плане счетов Типовой из макета соответствия  документа "Установка
//
Процедура ЗаполнитьСоответствиеСчетовБУиНУпоУмолчанию() Экспорт
		
	Макет = Документы.УстановкаСоответствияСчетовБУиНУ.ПолучитьМакет("СоответствияСчетовБУиНУ");
	
	Для Индекс = 2 По Макет.ВысотаТаблицы Цикл

		ИмяСчетаБУ     = Макет.Область(Индекс, 1, Индекс, 1).Текст;
		КодСчетаБУ     = Макет.Область(Индекс, 2, Индекс, 2).Текст;
		ИмяСчетаНУ     = Макет.Область(Индекс, 3, Индекс, 3).Текст;
		КодСчетаНУ     = Макет.Область(Индекс, 4, Индекс, 4).Текст;
			
		Если КодСчетаБУ = "" Тогда
			Продолжить;
		КонецЕсли;
			
		СчетБУ = ПланыСчетов.Типовой.НайтиПоКоду(КодСчетаБУ);
		Если СчетБУ = Неопределено Тогда
			Продолжить; // Нет счета с таким именем			
		КонецЕсли;
		Если КодСчетаНУ = "" Тогда
			Продолжить;
		КонецЕсли;	
		
		СчетНУ = ПланыСчетов.Налоговый.НайтиПоКоду(КодСчетаНУ);
		Если СчетНУ = Неопределено Тогда
			Продолжить; // Нет счета с таким именем
		КонецЕсли;
	    			
		Если НЕ ЗначениеЗаполнено(СчетБУ) Или НЕ ЗначениеЗаполнено(СчетНУ) Тогда
			Продолжить;
		КонецЕсли;
		
		ОбъектСчетБУ = СчетБУ.ПолучитьОбъект();
		ОбъектСчетБУ.СчетНУ = СчетНУ;
		
		Попытка
			ОбъектСчетБУ.Записать();
		Исключение
			ТекстСообщения = НСтр("ru='Операция не выполнена'", ОбщегоНазначения.КодОсновногоЯзыка());
			ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;	        			
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьСоответствиеСчетовБУиНУпоУмолчанию()

////////////////////////////////////////////////////////////////////////////////
// ПРОИЗВОДСТВО

// Заполняет регистр СоответствиеСчетовПроизводстваСчетамНезавершенногоПроизводства
// 
Процедура ЗаполнитьСоответствиеСчетовПроизводстваСчетамНезавершенногоПроизводства()

	Типовой 	 = ПланыСчетов.Типовой;
	Налоговый 	 = ПланыСчетов.Налоговый;
	НаборЗаписей = РегистрыСведений.СоответствиеСчетовПроизводстваСчетамНезавершенногоПроизводства.СоздатьНаборЗаписей();
	
	// 8011 - 1341 ОсновноеПроизводство
	НоваяЗапись 			 = НаборЗаписей.Добавить();
	НоваяЗапись.СчетЗатратБУ = Типовой.ОсновноеПроизводство;
	НоваяЗапись.СчетНЗПБУ	 = Типовой.НезавершенноеПроизводство_ОсновноеПроизводство;
	
	НоваяЗапись.СчетЗатратНУ = Налоговый.ОсновноеПроизводство;
	НоваяЗапись.СчетНЗПНУ 	 = Налоговый.НезавершенноеПроизводство_ОсновноеПроизводство;
	
	// 8020 - 1342 Полуфабрикаты собственного производства
	НоваяЗапись	             = НаборЗаписей.Добавить();
	НоваяЗапись.СчетЗатратБУ = Типовой.ПолуфабрикатыСобственногоПроизводства;
	НоваяЗапись.СчетНЗПБУ	 = Типовой.НезавершенноеПроизводство_ПолуфабрикатыСобственногоПроизводства;
	
	НоваяЗапись.СчетЗатратНУ = Налоговый.ПолуфабрикатыСобственногоПроизводства;
	НоваяЗапись.СчетНЗПНУ 	 = Налоговый.НезавершенноеПроизводство_ПолуфабрикатыСобственногоПроизводства;
	
	// 8030- 1343 Вспомогательные производства
	НоваяЗапись				 = НаборЗаписей.Добавить();
	НоваяЗапись.СчетЗатратБУ = Типовой.ВспомогательныеПроизводства;
	НоваяЗапись.СчетНЗПБУ	 = Типовой.НезавершенноеПроизводство_ВспомогательныеПроизводства;
	
	НоваяЗапись.СчетЗатратНУ = Налоговый.ВспомогательныеПроизводства;
	НоваяЗапись.СчетНЗПНУ 	 = Налоговый.НезавершенноеПроизводство_ВспомогательныеПроизводства;
	
	НаборЗаписей.Записать();

КонецПроцедуры // ЗаполнитьСоответствиеСчетовПроизводстваСчетамНезавершенногоПроизводства

// Заполняет регистры учетной политики для переданной организации значениями по умолчанию
//
Процедура ЗаполнитьРегистрыУчетнойПолитикиПоУмолчанию(Организация) Экспорт

	//Заполняем сведения по УчетнаяПолитикаБухгалтерскийУчет Организации 
	
	// попробуем получить учетную политику и если таковой не окажется, создать её для организации
	ЗапросУчетнаяПолитика = Новый Запрос("ВЫБРАТЬ *
	|ИЗ
	|	РегистрСведений.УчетнаяПолитикаБухгалтерскийУчет.СрезПоследних(&ДатаСреза, Организация = &Организация) КАК УчетнаяПолитикаБухгалтерскийУчет");
	
	ЗапросУчетнаяПолитика.УстановитьПараметр("Организация", Организация);
	ЗапросУчетнаяПолитика.УстановитьПараметр("ДатаСреза", '19800101');
	
	Если ЗапросУчетнаяПолитика.Выполнить().Пустой() Тогда
		
		НаборЗаписей = РегистрыСведений.УчетнаяПолитикаБухгалтерскийУчет.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Организация.Значение		 = Организация;
		НаборЗаписей.Отбор.Организация.Использование = Истина;
		НаборЗаписей.Записать();
		
		Запись = НаборЗаписей.Добавить();
		Запись.Период = '19800101'; 
		Запись.Организация =  Организация;
		Запись.СпособРасчетаСебестоимостиПроизводства 		= Перечисления.СпособыРасчетаСебестоимостиПродукции.ПоПодразделениям;
		Запись.УчетВременныхРазницПоНалогуНаПрибыль   		= Истина;
		Запись.ВедениеУчетаВременныхРазницБалансовымМетодом = Истина;
		
		НаборЗаписей.Записать();
	КонецЕсли;
	
	//Заполняем сведения по УчетнаяПолитикаНалоговыйУчет Организации 
	
	// попробуем получить учетную политику и если таковой не окажется, создать её для организации
	ЗапросУчетнаяПолитика = Новый Запрос("ВЫБРАТЬ *
	|ИЗ
	|	РегистрСведений.УчетнаяПолитикаНалоговыйУчет.СрезПоследних(&ДатаСреза, Организация = &Организация) КАК УчетнаяПолитикаНалоговыйУчетСрезПоследних");
	
	ЗапросУчетнаяПолитика.УстановитьПараметр("Организация", Организация);
	ЗапросУчетнаяПолитика.УстановитьПараметр("ДатаСреза", '19800101');
	
	Если ЗапросУчетнаяПолитика.Выполнить().Пустой() Тогда
		НаборЗаписей = РегистрыСведений.УчетнаяПолитикаНалоговыйУчет.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Организация.Значение		 = Организация;
		НаборЗаписей.Отбор.Организация.Использование = Истина;
		НаборЗаписей.Записать();
		
		Запись = НаборЗаписей.Добавить();
		Запись.Период 												  = '19800101'; 
		Запись.Организация 											  = Организация;
		Запись.НДСНалоговыйПериод 	   								  = Перечисления.Периодичность.Квартал;
		Запись.НДСМетодОтнесенияВЗачет 								  = Перечисления.МетодыОтнесенияНДСВЗачет.Пропорциональный;
		Запись.ОрганизацияЯвляетсяПлательщикомКПН 					  = Истина;
		Запись.ОрганизацияЯвляетсяПлательщикомНДС 					  = Истина;
		Запись.УпрощенныйУчетИПНиОПВ   		 						  = Ложь;
		Запись.ОтражениеПоПериодуРегистрации						  = Истина;
		Запись.ЗасчитыватьВВыплаченныеДоходыУдержанияПоИЛ 			  = Истина;
		Запись.ОрганизацияЯвляетсяПлательщикомСН 					  = Истина;
		Запись.ПрименятьОграничениеНаМинимальнуюБазуСоциальногоНалога = Истина;
		Запись.ПорядокСписанияЗадолженностиПоЗарплате 				  = Перечисления.ПорядокСписанияЗадолженностиПоЗарплате.ПоСпособуЗаполненияДокумента;
		
		НаборЗаписей.Записать();
	КонецЕсли;
	
	// Заполняем сведения по УчетнаяПолитикаПоПерсоналуОрганизации
	
	// попробуем получить учетную политику и если таковой не окажется, создать её для организации
	ЗапросУчетнаяПолитика = Новый Запрос("ВЫБРАТЬ *
	|ИЗ
	|	РегистрСведений.УчетнаяПолитикаПоПерсоналуОрганизаций КАК УчетнаяПолитикаПоПерсоналуОрганизаций
	|ГДЕ
	|	УчетнаяПолитикаПоПерсоналуОрганизаций.Организация = &Организация");
	
	ЗапросУчетнаяПолитика.УстановитьПараметр("Организация", Организация);
	
	Если ЗапросУчетнаяПолитика.Выполнить().Пустой() Тогда
		НаборЗаписей = РегистрыСведений.УчетнаяПолитикаПоПерсоналуОрганизаций.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Организация.Значение		 = Организация;
		НаборЗаписей.Отбор.Организация.Использование = Истина;
		НаборЗаписей.Записать();
		
		Запись = НаборЗаписей.Добавить();
		//Запись.Период 					                                  = '19800101';
		Запись.Организация 					                                  = Организация;
		Запись.ВестиУчетПоГоловнойОрганизации                                 = Истина;
		Запись.РасчетКоэффициентаНарастающимИтогом                            = Ложь;
		Запись.УчитыватьКадровыеПерестановкиПриРасчетеСреднегоЗаработка       = Истина;
		Запись.ВариантУчетаКадровыхПерестановок                               = Перечисления.ВариантыУчетаКадровыхПерестановок.ПодразделениеИДолжность;
		Запись.РассчитыватьКоэффициентИндексацииВПределахКадровыхПерестановок = Истина;
		
		НаборЗаписей.Записать();
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьРегистрыУчетнойПолитикиПоУмолчанию

// Начальное заполнение справочника "КлассификаторСтранМира".
//
Процедура НачальноеЗаполнениеСправочникаКлассификаторСтранМира()

	Казахстан = Справочники.КлассификаторСтранМира.Казахстан;

	// Заполнение полного наименования предопределенного элемента.
	КодЯзыка =  ОбщегоНазначения.КодОсновногоЯзыка();
	КазахстанОбъект                    = Казахстан.ПолучитьОбъект();
	КазахстанОбъект.Наименование	   = НСтр("ru = 'КАЗАХСТАН'", КодЯзыка);
	КазахстанОбъект.НаименованиеПолное = НСтр("ru = 'Республика Казахстан'", КодЯзыка);
	КазахстанОбъект.КодАльфа2		   = "KZ";
	КазахстанОбъект.КодАльфа3		   = "KAZ";
	КазахстанОбъект.Записать();

КонецПроцедуры // НачальноеЗаполнениеСправочникаКлассификаторСтранМира()

// Заполнение реквизитов справочника "Корреспонденции счетов"
// в версии 1.5.13
Процедура ЗаполнитьСправочникКорреспонденций() Экспорт

	Макет = Справочники.КорреспонденцииСчетов.ПолучитьМакет("Макет"); 
	Макет.КодЯзыка =  ОбщегоНазначения.КодОсновногоЯзыка();
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	КорреспонденцииСчетов.Код
	               |ИЗ
	               |	Справочник.КорреспонденцииСчетов КАК КорреспонденцииСчетов";
	ВсеКорреспонденции = Запрос.Выполнить().Выгрузить();
	
	НомерСтроки=1;
	Пока Истина Цикл
		
		Номер = Макет.область(НомерСтроки,1).Текст;
		Если НЕ ЗначениеЗаполнено(Номер) Тогда
			//Т.е. если прочли весь макет
			Прервать;
		КонецЕсли;
			
		НайденСуществующий = ВсеКорреспонденции.Найти(формат(Число(Номер),"ЧЦ=9; ЧВН=; ЧГ="));
		Если Не ЗначениеЗаполнено(НайденСуществующий) Тогда
			НовыйСпр = Справочники.КорреспонденцииСчетов.СоздатьЭлемент();
			НовыйСпр.СчетДт 			  = ПланыСчетов.Типовой.НайтиПоКоду(Макет.область(НомерСтроки,3).Текст);
			НовыйСпр.СчетКт 			  = ПланыСчетов.Типовой.НайтиПоКоду(Макет.область(НомерСтроки,4).Текст);
			НовыйСпр.Содержание 		  = Макет.область(НомерСтроки,2).Текст;
			НовыйСпр.ТипДокумента 		  = Макет.область(НомерСтроки,5).Текст;
			НовыйСпр.ВидОперацииДокумента = Макет.область(НомерСтроки,6).Текст;
			НовыйСпр.ЗакладкаДокумента 	  = Макет.область(НомерСтроки,7).Текст;
			НовыйСпр.Меню 				  = Макет.область(НомерСтроки,8).Текст;
			НовыйСпр.Код 				  = формат(Число(Номер),"ЧЦ=9; ЧВН=; ЧГ=");
			НовыйСпр.Записать();
		Иначе
			СуществующийЭлемент = Справочники.КорреспонденцииСчетов.НайтиПоКоду(НайденСуществующий.Код);
			Если ЗначениеЗаполнено(СуществующийЭлемент)
				И СуществующийЭлемент.ТипДокумента <> Макет.область(НомерСтроки,5).Текст Тогда
				Попытка
					СуществующийОбъект = СуществующийЭлемент.ПолучитьОбъект();
					СуществующийОбъект.ТипДокумента = Макет.область(НомерСтроки,5).Текст;
					СуществующийОбъект.Записать();
				Исключение
					ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось обновить ""%1"""".'",ОбщегоНазначения.КодОсновногоЯзыка()), Метаданные.Справочники.КорреспонденцииСчетов.Представление(),);
					ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,, СуществующийОбъект.Содержание, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
		НомерСтроки = НомерСтроки+1;
		
	КонецЦикла;
		
КонецПроцедуры

// Процедура производить заполнение Справочника Группы Налогового учета и 
// регистра Сведения о группах НУ
Процедура ЗаполнитьСведенияОГруппахФАНУ()	
	
	// Заполнение справочника ГруппыФАНУ
	// I группа
	КодЯзыка =  ОбщегоНазначения.КодОсновногоЯзыка();
	
	ГруппаФА = НайтиСоздатьГуппуФАНУ(НСтр("ru = 'Здания, сооружения (за исключением нефтянных, газовых скважин и передаточных устройств)'", КодЯзыка),
							НСтр("ru = 'Здания, сооружения, за исключением нефтяных, газовых скважин и передаточных устройств'", КодЯзыка),
							"I", Перечисления.ВидыНалоговогоУчетаВГруппахФА.ПоОбъектам);
	СоздатьЗаписьСведенийОГруппахФАНУ(ГруппаФА, 15, 10, 10);
	
	// II группа
	ГруппаФА = НайтиСоздатьГуппуФАНУ(НСтр("ru = 'Машины и оборудование, за исключением машин и оборудования нефтегазодобычи'", КодЯзыка),
							НСтр("ru = 'Машины и оборудование, за исключением машин и оборудования нефтегазодобычи, а также компьютеров и оборудования для обработки информации'", КодЯзыка),
							"II", Перечисления.ВидыНалоговогоУчетаВГруппахФА.ПоГруппе);
	СоздатьЗаписьСведенийОГруппахФАНУ(ГруппаФА, 25, 25, 25);
	
	// III группа
	ГруппаФА = НайтиСоздатьГуппуФАНУ(НСтр("ru = 'Компьютеры, программное обеспечение и оборудование для обработки информации'", КодЯзыка),
							НСтр("ru = 'Компьютеры, программное обеспечение и оборудование для обработки информации'", КодЯзыка),
							"III", Перечисления.ВидыНалоговогоУчетаВГруппахФА.ПоГруппе);
	СоздатьЗаписьСведенийОГруппахФАНУ(ГруппаФА, 15, 40, 40);
	
	// IV группа
	ГруппаФА = НайтиСоздатьГуппуФАНУ(НСтр("ru = 'Фиксированные активы, не включенные в другие группы'", КодЯзыка),
							НСтр("ru = 'Фиксированные активы, не включенные в другие группы, в том числе нефтяные, газовые скважины, передаточные устройства, машины и оборудование нефтегазодобычи'", КодЯзыка),
							"IV", Перечисления.ВидыНалоговогоУчетаВГруппахФА.ПоГруппе);
	СоздатьЗаписьСведенийОГруппахФАНУ(ГруппаФА, 15, 15, 15);
	
КонецПроцедуры

// Функция создает элементы справочника
// "Группы налогового учета ФА"
Функция НайтиСоздатьГуппуФАНУ(Наименование, НаименованиеПолное, Код, ВидУчетаВГруппеФА)
	
	Ссылка = Справочники.ГруппыНалоговогоУчетаФА.НайтиПоКоду(Код,Истина);
	
	Если Ссылка.Пустая() Тогда
		СправочникОбъект = Справочники.ГруппыНалоговогоУчетаФА.СоздатьЭлемент();
		СправочникОбъект.Код 			    = Код;
		СправочникОбъект.Наименование 	    = Наименование;
		СправочникОбъект.НаименованиеПолное = НаименованиеПолное;
		СправочникОбъект.ВидУчетаВГруппеФА  = ВидУчетаВГруппеФА;		
		ЗаписатьСправочникОбъект(СправочникОбъект);
		Ссылка = СправочникОбъект.Ссылка;
	КонецЕсли;
	
	Возврат Ссылка;
КонецФункции

// Процедура Создает запись в регистре сведений 
// "Сведения о группах ФА"
Процедура СоздатьЗаписьСведенийОГруппахФАНУ(ГруппаФА, ВычетНаРемонт, ПредельнаяНормаАмортизации, ПрименяемаяНормаАмортизации)
	
	НаборЗаписей = РегистрыСведений.СведенияОГруппахФиксированныхАктивов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Период.Использование = Истина;
	НаборЗаписей.Отбор.Период.ВидСравнения 	= ВидСравнения.Равно;		
	НаборЗаписей.Отбор.Период.Значение	 	= '20060101';		
	
	НаборЗаписей.Отбор.ГруппаФА.Использование = Истина;
	НаборЗаписей.Отбор.ГруппаФА.ВидСравнения  = ВидСравнения.Равно;		
	НаборЗаписей.Отбор.ГруппаФА.Значение	  = ГруппаФА;		
	
	Запись = НаборЗаписей.Добавить();
	Запись.Период					   = '20060101';
	Запись.ГруппаФА					   = ГруппаФА;
	Запись.ВычетНаРемонт			   = ВычетНаРемонт;
	Запись.ПредельнаяНормаАмортизации  = ПредельнаяНормаАмортизации;
	Запись.ПрименяемаяНормаАмортизации = ПрименяемаяНормаАмортизации;
	НаборЗаписей.Записать();                                         		

КонецПроцедуры

//Процедура заполнения справочника "ВидыПервичныхДокументов"
//
Процедура ЗаполнениеСправочникаВидыПервичныхДокументовНачальнымиДанными()
	
	КодЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	НовыйЭлемент = Справочники.ВидыПервичныхДокументов.СоздатьЭлемент();
	НовыйЭлемент.Наименование = НСтр("ru = 'Расходная накладная'", КодЯзыка);
	НовыйЭлемент.Записать();
	
	НовыйЭлемент = Справочники.ВидыПервичныхДокументов.СоздатьЭлемент();
	НовыйЭлемент.Наименование = НСтр("ru = 'Товарный чек'", КодЯзыка);
	НовыйЭлемент.Записать();
	
КонецПроцедуры

// Устанавливает или удаляет субконто "РаботникиОрганизации" у указанного счета.
//
Процедура ПрименитьПараметрыСубконтоРаботникиОрганизации(СчетЗП, ИмяПланаСчетов, ВестиПоСотрудникам, ОбработкаПодчиненных = Истина)

	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда // В подчиненных узлах РИБ не выполняется
		Возврат;
	КонецЕсли;

	
	ВидСубконто = "ВидыСубконтоТиповые";
	
	Попытка
		
		Объект   = СчетЗП.ПолучитьОбъект();
		КодСчета = Объект.Код;
		
		Субконто = Объект.ВидыСубконто.Найти(ПланыВидовХарактеристик[ВидСубконто].РаботникиОрганизаций, "ВидСубконто");
		
		Если ВестиПоСотрудникам = Истина Тогда // Добавляем 
			
			Если Субконто = Неопределено Тогда
				
				НовыйВид = Объект.ВидыСубконто.Добавить();
				
				НовыйВид.ВидСубконто = ПланыВидовХарактеристик[ВидСубконто].РаботникиОрганизаций;
				
				Если ИмяПланаСчетов = "Типовой" Тогда						
					НовыйВид.Валютный = Истина;
				КонецЕсли;
				
				НовыйВид.Количественный = Истина;
				НовыйВид.Суммовой = Истина;
				
				// для счетов резерва устанавливаем "Только обороты"
				Если СчетЗП = ПланыСчетов.Типовой.КраткосрочныеОценочныеОбязательстваПоВознаграждениямРаботникам //3430
					ИЛИ СчетЗП = ПланыСчетов.Налоговый.КраткосрочныеОценочныеОбязательстваПоВознаграждениямРаботникам //3430Н
					ИЛИ СчетЗП = ПланыСчетов.Типовой.ДолгосрочныеОценочныеОбязательстваПоВознаграждениямРаботникам Тогда //4230					 
					НовыйВид.ТолькоОбороты = Истина;
				Иначе
					НовыйВид.ТолькоОбороты = Ложь;
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли ВестиПоСотрудникам = Ложь Тогда // Удаляем
			
			Если Субконто <> Неопределено Тогда
				Объект.ВидыСубконто.Удалить(Субконто);
			КонецЕсли;
			
		КонецЕсли;
				
		Объект.Записать();	
		
	Исключение
		
		ТекстСообщения = НСтр("ru='Операция не выполнена'", ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
КонецПроцедуры // ПрименитьПараметрыСубконтоРаботникиОрганизации()

// Заполняет регистр сведений СоответствиеСчетовБУиНУ 
//
Процедура ЗаполнитьСоответствиеСчетовБУиНУ(ТекущаяДата, ОрганизацияПервоначальногоЗаполнения) Экспорт
	ДокументУстановкаСоответствияСчетовБУиНУ = Документы.УстановкаСоответствияСчетовБУиНУ.СоздатьДокумент();
	ДокументУстановкаСоответствияСчетовБУиНУ.Дата 		 = ТекущаяДата;
	ДокументУстановкаСоответствияСчетовБУиНУ.Организация = ОрганизацияПервоначальногоЗаполнения;
	ДокументУстановкаСоответствияСчетовБУиНУ.УстановитьНовыйНомер();
	Документы.УстановкаСоответствияСчетовБУиНУ.ЗаполнитьСоответствиеСчетовБУиНУПоУмолчанию(ДокументУстановкаСоответствияСчетовБУиНУ);
	КодЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	Попытка
		ДокументУстановкаСоответствияСчетовБУиНУ.Записать(РежимЗаписиДокумента.Запись);
	Исключение
		ТекстСообщения = НСтр("ru='Операция не выполнена'", КодЯзыка);
		ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат;
	КонецПопытки;
	Попытка
		ДокументУстановкаСоответствияСчетовБУиНУ.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		ТекстСообщения = НСтр("ru='Операция не выполнена'", КодЯзыка);
		ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
КонецПроцедуры // ЗаполнитьСоответствиеСчетовБУиНУ()

// Процедура создает ставки НДС
//
Процедура НайтиСоздатьСтавкуНДС(Наименование, Ставка, ДляОсвобожденногоОборота = Ложь, МестоРеализацииНеРК = Ложь)
	
	Ссылка = Справочники.СтавкиНДС.НайтиПоНаименованию(Наименование, Истина);
	
	Если Ссылка.Пустая() ТОгда
		СправочникОбъект = Справочники.СтавкиНДС.СоздатьЭлемент();
		СправочникОбъект.Наименование 			  = Наименование;
		СправочникОбъект.Ставка					  = Ставка;
		СправочникОбъект.ДляОсвобожденногоОборота = ДляОсвобожденногоОборота;
		СправочникОбъект.МестоРеализацииНеРК      =  МестоРеализацииНеРК;
		ЗаписатьСправочникОбъект(СправочникОбъект);
	КонецЕсли;
	
КонецПроцедуры

// Функция создает элемент справочника КлассификаторЕдиницИзмерения, если такого нет.
//
// Параметры:
//  Код -                     - значение соответствующего реквизита справочника,
//  Наименование              - значение соответствующего реквизита справочника,
//  НаименованиеПолное        - значение соответствующего реквизита справочника.
//
// Возвращаемое значение:
//  Ссылка на добавленный или существующий элемент.
//
Функция НайтиСоздатьЕдиницу(Код, Наименование, НаименованиеПолное) Экспорт

	Ссылка = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду(Код);

	Если Ссылка.Пустая() Тогда
		СправочникОбъект = Справочники.КлассификаторЕдиницИзмерения.СоздатьЭлемент();

		СправочникОбъект.Код                = Код;
		СправочникОбъект.Наименование       = Наименование;
		СправочникОбъект.НаименованиеПолное = НаименованиеПолное;

		ЗаписатьСправочникОбъект(СправочникОбъект);

		Ссылка = СправочникОбъект.Ссылка;
	КонецЕсли;

	Возврат Ссылка;

КонецФункции

// Формирует группы элементов справочника "Номенклатура"
// и соответствующие записи регистра "Счета учета номенклатуры".
//
Процедура ЗаполнитьСправочникНоменклатура()
	
	НачатьТранзакцию();
	
	КодЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	Элемент  = Справочники.НоменклатурныеГруппы.НайтиПоНаименованию(НСтр("ru = 'Основная номенклатурная группа'", КодЯзыка), Истина);

	Если Элемент = Справочники.НоменклатурныеГруппы.ПустаяСсылка() Тогда

		Элемент = Справочники.НоменклатурныеГруппы.СоздатьЭлемент();
		Элемент.Наименование = НСтр("ru = 'Основная номенклатурная группа'", КодЯзыка);
		Элемент.Записать();

	КонецЕсли;

	Набор  = РегистрыСведений.СчетаУчетаНоменклатуры.СоздатьНаборЗаписей();
	Запись = Набор.Добавить();

	Запись.Организация  = Справочники.Организации.ПустаяСсылка();
	Запись.Номенклатура = Справочники.Номенклатура.ПустаяСсылка();

	Запись.СчетУчетаБУ                      = ПланыСчетов.Типовой.Товары;
	Запись.СчетУчетаЗабалансовый            = ПланыСчетов.Типовой.МатериалыПринятыеВПереработку;
	Запись.СчетУчетаПередачиБУ              = ПланыСчетов.Типовой.МатериалыПереданныеВПереработку;
	Запись.СчетУчетаПередачиЗабалансовый    = ПланыСчетов.Типовой.МатериалыПринятыеВПереработкуВПроизводстве;
	Запись.СчетУчетаНДСПоПриобретению       = ПланыСчетов.Типовой.НалогНаДобавленнуюСтоимостьКВозмещению;
	Запись.СчетУчетаНДСПоРеализации         = ПланыСчетов.Типовой.НалогНаДобавленнуюСтоимость;
	Запись.СчетДоходовОтРеализацииБУ        = ПланыСчетов.Типовой.ДоходОтРеализацииПродукцииИОказанияУслуг;
	Запись.СчетДоходовПриВозвратеБУ         = ПланыСчетов.Типовой.ВозвратПроданнойПродукции;
	Запись.СчетСебестоимостиПриРеализацииБУ = ПланыСчетов.Типовой.СебестоимостьРеализованнойПродукцииИОказанныхУслуг;

	// счета налогового учета
	Запись.СчетУчетаНУ						= ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", Запись.СчетУчетаБУ), , , ТекущаяДата());	
	Запись.СчетУчетаПередачиНУ				= ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", Запись.СчетУчетаПередачиБУ), , , ТекущаяДата());	
	Запись.СчетДоходовОтРеализацииНУ		= ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", Запись.СчетДоходовОтРеализацииБУ), , , ТекущаяДата());	
	Запись.СчетДоходовПриВозвратеНУ         = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", Запись.СчетДоходовПриВозвратеБУ), , , ТекущаяДата());	
	Запись.СчетСебестоимостиПриРеализацииНУ	= ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", Запись.СчетСебестоимостиПриРеализацииБУ), , , ТекущаяДата());	
	
	//счета для учета передачи структурным подразделениям
	Запись.СчетПоложительныхОтклоненийПриПередачеСтруктурнымПодразделениямБУ = ПланыСчетов.Типовой.ПрочиеДоходы;
	Запись.СчетОтрицательныхОтклоненийПриПередачеСтруктурнымПодразделениямБУ = ПланыСчетов.Типовой.ПрочиеРасходы;
	
	
	Запись = Набор.Добавить();
	// Группа "Товары"
	Группа = Справочники.Номенклатура.НайтиПоНаименованию(НСтр("ru = 'Товары'",КодЯзыка));
	Если Группа = Справочники.Номенклатура.ПустаяСсылка() Тогда
		Группа = Справочники.Номенклатура.СоздатьГруппу();
		Группа.Наименование = НСтр("ru = 'Товары'", КодЯзыка);
		Группа.Записать();
	КонецЕсли;

	Запись.Организация  = Справочники.Организации.ПустаяСсылка();
	Запись.Номенклатура = Группа.Ссылка;

	Запись.СчетУчетаБУ                      = ПланыСчетов.Типовой.Товары;	
	Запись.СчетУчетаЗабалансовый            = ПланыСчетов.Типовой.МатериалыПринятыеВПереработку;
	Запись.СчетУчетаПередачиБУ              = ПланыСчетов.Типовой.МатериалыПереданныеВПереработку;
	Запись.СчетУчетаПередачиЗабалансовый    = ПланыСчетов.Типовой.МатериалыПринятыеВПереработкуВПроизводстве;
	Запись.СчетУчетаНДСПоПриобретению       = ПланыСчетов.Типовой.НалогНаДобавленнуюСтоимостьКВозмещению;
	Запись.СчетУчетаНДСПоРеализации         = ПланыСчетов.Типовой.НалогНаДобавленнуюСтоимость;	
	Запись.СчетДоходовОтРеализацииБУ        = ПланыСчетов.Типовой.ДоходОтРеализацииПродукцииИОказанияУслуг;
	Запись.СчетДоходовПриВозвратеБУ         = ПланыСчетов.Типовой.ВозвратПроданнойПродукции;
	Запись.СчетСебестоимостиПриРеализацииБУ = ПланыСчетов.Типовой.СебестоимостьРеализованнойПродукцииИОказанныхУслуг;
	
	// счета налогового учета
	Запись.СчетУчетаНУ						= ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", Запись.СчетУчетаБУ), , , ТекущаяДата());	
	Запись.СчетУчетаПередачиНУ				= ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", Запись.СчетУчетаПередачиБУ), , , ТекущаяДата());	
	Запись.СчетДоходовОтРеализацииНУ		= ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", Запись.СчетДоходовОтРеализацииБУ), , , ТекущаяДата());	
	Запись.СчетДоходовПриВозвратеНУ         = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", Запись.СчетДоходовПриВозвратеБУ), , , ТекущаяДата());	
	Запись.СчетСебестоимостиПриРеализацииНУ	= ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", Запись.СчетСебестоимостиПриРеализацииБУ), , , ТекущаяДата());	
	
	Запись = Набор.Добавить();
	// Группа "Материалы"
	Группа = Справочники.Номенклатура.НайтиПоНаименованию(НСтр("ru = 'Материалы'",КодЯзыка));
	Если Группа = Справочники.Номенклатура.ПустаяСсылка() Тогда
		Группа = Справочники.Номенклатура.СоздатьГруппу();
		Группа.Наименование = НСтр("ru = 'Материалы'", КодЯзыка);
		Группа.Записать();
	КонецЕсли;

	Запись.Организация  = Справочники.Организации.ПустаяСсылка();
	Запись.Номенклатура = Группа.Ссылка;

	Запись.СчетУчетаБУ                      = ПланыСчетов.Типовой.СырьеИМатериалы;
	Запись.СчетУчетаЗабалансовый            = ПланыСчетов.Типовой.МатериалыПринятыеВПереработку;
	Запись.СчетУчетаПередачиБУ              = ПланыСчетов.Типовой.МатериалыПереданныеВПереработку;
	Запись.СчетУчетаПередачиЗабалансовый    = ПланыСчетов.Типовой.МатериалыПринятыеВПереработкуВПроизводстве;
	Запись.СчетУчетаНДСПоПриобретению       = ПланыСчетов.Типовой.НалогНаДобавленнуюСтоимостьКВозмещению;
	Запись.СчетУчетаНДСПоРеализации         = ПланыСчетов.Типовой.НалогНаДобавленнуюСтоимость;	
	Запись.СчетДоходовОтРеализацииБУ        = ПланыСчетов.Типовой.ДоходОтРеализацииПродукцииИОказанияУслуг;
	Запись.СчетДоходовПриВозвратеБУ         = ПланыСчетов.Типовой.ВозвратПроданнойПродукции;
	Запись.СчетСебестоимостиПриРеализацииБУ = ПланыСчетов.Типовой.СебестоимостьРеализованнойПродукцииИОказанныхУслуг;
	
	// счета налогового учета
	Запись.СчетУчетаНУ						= ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", Запись.СчетУчетаБУ), , , ТекущаяДата());	
	Запись.СчетУчетаПередачиНУ				= ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", Запись.СчетУчетаПередачиБУ), , , ТекущаяДата());	
	Запись.СчетДоходовОтРеализацииНУ		= ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", Запись.СчетДоходовОтРеализацииБУ), , , ТекущаяДата());	
	Запись.СчетДоходовПриВозвратеНУ         = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", Запись.СчетДоходовПриВозвратеБУ), , , ТекущаяДата());	
	Запись.СчетСебестоимостиПриРеализацииНУ	= ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", Запись.СчетСебестоимостиПриРеализацииБУ), , , ТекущаяДата());	
	
	Запись = Набор.Добавить();
	// Группа "Продукция"
	Группа = Справочники.Номенклатура.НайтиПоНаименованию(НСтр("ru = 'Готовая продукция'", КодЯзыка));
	Если Группа = Справочники.Номенклатура.ПустаяСсылка() Тогда
		Группа = Справочники.Номенклатура.СоздатьГруппу();
		Группа.Наименование = НСтр("ru = 'Готовая продукция'", КодЯзыка);
		Группа.Записать();
	КонецЕсли;

	Запись.Организация  = Справочники.Организации.ПустаяСсылка();
	Запись.Номенклатура = Группа.Ссылка;

	Запись.СчетУчетаБУ                      = ПланыСчетов.Типовой.ГотоваяПродукция;
	Запись.СчетУчетаЗабалансовый            = ПланыСчетов.Типовой.МатериалыПринятыеВПереработку;
	Запись.СчетУчетаПередачиБУ              = ПланыСчетов.Типовой.МатериалыПереданныеВПереработку;
	Запись.СчетУчетаПередачиЗабалансовый    = ПланыСчетов.Типовой.МатериалыПринятыеВПереработкуВПроизводстве;
	Запись.СчетУчетаНДСПоПриобретению       = ПланыСчетов.Типовой.НалогНаДобавленнуюСтоимостьКВозмещению;
	Запись.СчетУчетаНДСПоРеализации         = ПланыСчетов.Типовой.НалогНаДобавленнуюСтоимость;	
	Запись.СчетДоходовОтРеализацииБУ        = ПланыСчетов.Типовой.ДоходОтРеализацииПродукцииИОказанияУслуг;
	Запись.СчетДоходовПриВозвратеБУ         = ПланыСчетов.Типовой.ВозвратПроданнойПродукции;
	Запись.СчетСебестоимостиПриРеализацииБУ = ПланыСчетов.Типовой.СебестоимостьРеализованнойПродукцииИОказанныхУслуг;

	// счета налогового учета
	Запись.СчетУчетаНУ						= ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", Запись.СчетУчетаБУ), , , ТекущаяДата());	
	Запись.СчетУчетаПередачиНУ				= ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", Запись.СчетУчетаПередачиБУ), , , ТекущаяДата());	
	Запись.СчетДоходовОтРеализацииНУ		= ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", Запись.СчетДоходовОтРеализацииБУ), , , ТекущаяДата());	
	Запись.СчетДоходовПриВозвратеНУ         = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", Запись.СчетДоходовПриВозвратеБУ), , , ТекущаяДата());	
	Запись.СчетСебестоимостиПриРеализацииНУ	= ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", Запись.СчетСебестоимостиПриРеализацииБУ), , , ТекущаяДата());	
	
	Запись = Набор.Добавить();
	// Группа "Услуги"
	Группа = Справочники.Номенклатура.НайтиПоНаименованию(НСтр("ru = 'Услуги'", КодЯзыка));
	Если Группа = Справочники.Номенклатура.ПустаяСсылка() Тогда
		Группа = Справочники.Номенклатура.СоздатьГруппу();
		Группа.Наименование = НСтр("ru = 'Услуги'", КодЯзыка);
		Группа.Записать();
	КонецЕсли;

	Запись.Организация  = Справочники.Организации.ПустаяСсылка();
	Запись.Номенклатура = Группа.Ссылка;

	Запись.СчетУчетаНДСПоПриобретению       = ПланыСчетов.Типовой.НалогНаДобавленнуюСтоимостьКВозмещению;
	Запись.СчетУчетаНДСПоРеализации         = ПланыСчетов.Типовой.НалогНаДобавленнуюСтоимость;	
	Запись.СчетДоходовОтРеализацииБУ        = ПланыСчетов.Типовой.ДоходОтРеализацииПродукцииИОказанияУслуг;
	Запись.СчетДоходовПриВозвратеБУ         = ПланыСчетов.Типовой.ВозвратПроданнойПродукции;

	// счета налогового учета
	Запись.СчетУчетаНУ						= ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", Запись.СчетУчетаБУ), , , ТекущаяДата());	
	Запись.СчетУчетаПередачиНУ				= ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", Запись.СчетУчетаПередачиБУ), , , ТекущаяДата());	
	Запись.СчетДоходовОтРеализацииНУ		= ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", Запись.СчетДоходовОтРеализацииБУ), , , ТекущаяДата());	
	Запись.СчетДоходовПриВозвратеНУ         = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", Запись.СчетДоходовПриВозвратеБУ), , , ТекущаяДата());	
	Запись.СчетСебестоимостиПриРеализацииНУ	= ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", Запись.СчетСебестоимостиПриРеализацииБУ), , , ТекущаяДата());	
	
	Набор.Записать();
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

Процедура НайтиСоздатьСтавкуРозничногоНалога(Наименование, Ставка)
	
	Ссылка = Справочники.СтавкиРозничногоНалога.НайтиПоРеквизиту("Ставка", Ставка);
	
	Если Ссылка.Пустая() Тогда
		СправочникОбъект = Справочники.СтавкиРозничногоНалога.СоздатьЭлемент();
		СправочникОбъект.Наименование = Наименование;
		СправочникОбъект.Ставка       = Ставка;
		ЗаписатьСправочникОбъект(СправочникОбъект);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьСведенияОСтавкеРозничногоНалога(Ставка)
	
	СтавкаСсылка = Справочники.СтавкиРозничногоНалога.НайтиПоРеквизиту("Ставка", Ставка);
	
	Если НЕ СтавкаСсылка.Пустая() Тогда
		
		НаборЗаписей = РегистрыСведений.СведенияОСтавкахРозничногоНалога.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Организация.Значение      = Справочники.Организации.ПустаяСсылка();
		НаборЗаписей.Отбор.Организация.Использование = Истина;
		НаборЗаписей.Отбор.СтруктурноеПодразделение.Значение      = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
		НаборЗаписей.Отбор.СтруктурноеПодразделение.Использование = Истина;
		НаборЗаписей.Отбор.Подразделение.Значение      = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
		НаборЗаписей.Отбор.Подразделение.Использование = Истина;
		НаборЗаписей.Отбор.ВидДохода.Значение      = Справочники.Доходы.ПустаяСсылка();
		НаборЗаписей.Отбор.ВидДохода.Использование = Истина;
		ПериодНалога = ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьДатуВводаРозничногоНалога();
		НаборЗаписей.Отбор.Период.Значение      = ПериодНалога;
		НаборЗаписей.Отбор.Период.Использование = Истина;
		
		Запись = НаборЗаписей.Добавить();
		Запись.Период = ПериодНалога;
		Запись.Ставка = СтавкаСсылка;
		
		Попытка
			НаборЗаписей.Записать();
		Исключение
			ТекстСообщения = НСтр("ru='Операция не выполнена'", ОбщегоНазначения.КодОсновногоЯзыка());
			ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обновление ИБ

// Добавляет обработчики которые потребуется запустить после завершения обновления.
// Обработчики добавляются в константу СведенияОбОбновленииИБ_БК.
// Обработчики запускаются из обработки ОбновлениеИнформационнойБазыБК.
//
Процедура ДобавитьРучныеОбработчикиОбновленияИБ() Экспорт
	
	НомерВерсииБК2 = Константы.УдалитьНомерВерсииКонфигурации.Получить();
	
	// Ручные обработчики должны добавляться при переходе с 2.0 и при переходе между версиями 3.0.
	// При заполнении пустой ИБ они не должны добавляться.
	Если ОбновлениеИнформационнойБазы.ВерсияИБ(Метаданные.Имя) = "0.0.0.0" И НЕ ЗначениеЗаполнено(НомерВерсииБК2) Тогда
		Возврат;
	КонецЕсли;
	
	// Получить все возможные обработчики обновления.
	ТаблицаОбработчикиОбновления = Обработки.ОбновлениеИнформационнойБазыБК.ОбработчикиОбновленияИзМакета();	
	ТаблицаОбработчикиОбновления.Сортировать("ВесВерсии Возр");
	
	НомерСтаройВерсии = ОбновлениеИнформационнойБазы.ВерсияИБ(Метаданные.Имя);	
	ВесСтаройВерсии = ОбновлениеИнформационнойБазыСлужебный.ВесВерсии(НомерСтаройВерсии); 
	
	// Номер версии программы, который будет после обновления.	
	НомерНовойВерсии = Метаданные.Версия;
	ВесНовойВерсии = ОбновлениеИнформационнойБазыСлужебный.ВесВерсии(НомерНовойВерсии);
	
	// Найти обработчики, которые потребуется выполнить после завершения обновления. 
	МассивДобавляемыхОбработчиков = Новый Массив;	
	Для Каждого ОбработчикОбновления Из ТаблицаОбработчикиОбновления Цикл
		
		Если ОбработчикОбновления.ВесВерсии > ВесСтаройВерсии 
			И ОбработчикОбновления.ВесВерсии <= ВесНовойВерсии Тогда
			
			// Создать описание добавляемого ручного обработчика обновления.
			ОписаниеОбработчика = Обработки.ОбновлениеИнформационнойБазыБК.ПустоеОписаниеРучногоОбработчикаОбновления();
			ЗаполнитьЗначенияСвойств(ОписаниеОбработчика, ОбработчикОбновления);
			ОписаниеОбработчика.ТребуетсяВыполнить = Истина;
			
			// Запомнить, что необходимо выполнить данный обработчик.
			МассивДобавляемыхОбработчиков.Добавить(ОписаниеОбработчика);
			
		КонецЕсли;
		
	КонецЦикла;
	
	
	
	
	//////////////////////////////////////////////////////////////////////////////
	// Снять признак ТребуетсяВыполнить у обработчиков, 
	// которые не требуется выполнять при определенных условиях.
	
	// Снять признак ТребуетсяВыполнить у обработчиков:
	// - ПересчитатьОборотПоРеализацииВСчетахФактурахПолученных
	// - ПересчитатьОборотПоРеализацииВСчетахФактурахВыданных
	// если переход был выполнен с версии, отличной от перечисленных.	
	Если НомерВерсииБК2 <> "2.0.17.14" 
		И НомерСтаройВерсии <> "3.0.1.1"
		И НомерСтаройВерсии <> "3.0.1.2"
		И НомерСтаройВерсии <> "3.0.1.3" Тогда
		
		Для Каждого ОписаниеОбработчика Из МассивДобавляемыхОбработчиков Цикл
			
			Если ОписаниеОбработчика.Процедура = "Обработки.ОбновлениеИнформационнойБазыБК.ПересчитатьОборотПоРеализацииВСчетахФактурахПолученных"
				ИЛИ ОписаниеОбработчика.Процедура = "Обработки.ОбновлениеИнформационнойБазыБК.ПересчитатьОборотПоРеализацииВСчетахФактурахВыданных" Тогда
				
				// Данные обработчики требуется выполнять только при переходе с тестовых версий.
				ОписаниеОбработчика.ТребуетсяВыполнить = Ложь;	
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;

	
	// Снять признак ТребуетсяВыполнить у обработчиков:
	// - ПересчетОборотаПоРеализацииВыданныхСчетовФактурДляУчастниковСД,
	// - ПересчетОборотаПоРеализацииПолученныхСчетовФактурДляУчастниковСД,
	// если нет договоров СД. 
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДоговорыКонтрагентов.Ссылка
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.ДоговорСовместнойДеятельности = ИСТИНА
	|	И ДоговорыКонтрагентов.ПометкаУдаления = ЛОЖЬ";
	Результат = Запрос.Выполнить();
	ПометитьОбработчикиПересчетаОборота = ?(Результат.Пустой(), Ложь, Истина);
	Если НЕ ПометитьОбработчикиПересчетаОборота Тогда
		
		Для Каждого ОписаниеОбработчика Из МассивДобавляемыхОбработчиков Цикл
			
			Если ОписаниеОбработчика.Процедура = "Обработки.ОбновлениеИнформационнойБазыБК.ПересчитатьОборотПоРеализацииДляУчастниковСДДляСФВ"
				ИЛИ ОписаниеОбработчика.Процедура = "Обработки.ОбновлениеИнформационнойБазыБК.ПересчитатьОборотПоРеализацииДляУчастниковСДДляСФП" Тогда
				
				// Данные обработчики требуется выполнять только если есть договры СД.
				ОписаниеОбработчика.ТребуетсяВыполнить = Ложь;	
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	
	// Снять признак ТребуетсяВыполнить у обработчика "ПеренестиКорректировкиВОперации".
	// Если это дочерний узел РИБ, т.к. при вызове этого обработчика 
	// в дочернем узле, в нем будут созданы документы "Операция",
	// что при обмене приведет к появлению дублей документов "Операция".	
	ГлавныйУзел = ПланыОбмена.ГлавныйУзел();	
	Если ТипЗнч(ГлавныйУзел) = Тип("ПланОбменаСсылка.Полный")
		ИЛИ ТипЗнч(ГлавныйУзел) = Тип("ПланОбменаСсылка.ПоОрганизации") Тогда
		
		Для Каждого ОписаниеОбработчика Из МассивДобавляемыхОбработчиков Цикл
			
			Если ОписаниеОбработчика.Процедура = "Обработки.ОбновлениеИнформационнойБазыБК.ПеренестиКорректировкиВОперации" Тогда
				
				// Данный обработчик требуется выполнять только в центральном узле РИБ,
				// а текущий узел является дочерним узлом РИБ.
				ОписаниеОбработчика.ТребуетсяВыполнить = Ложь;	
				
			КонецЕсли;
			
		КонецЦикла;		
		
	КонецЕсли;
	
	
	//////////////////////////////////////////////////////////////////////////////	
	// Записать найденные обработчики в константу СведенияОбОбновленииИБ_БК.
	Если МассивДобавляемыхОбработчиков.Количество() <> 0 Тогда
		
		СведенияОбОбновленииИБ_БК = Обработки.ОбновлениеИнформационнойБазыБК.ПрочитатьКонстантуСведенияОбОбновленииИБ_БК();
		
		Для Каждого ОписаниеОбработчика Из МассивДобавляемыхОбработчиков Цикл
			Обработки.ОбновлениеИнформационнойБазыБК.ДобавитьОбновитьРучнойОбработчикОбновленияИБ(ОписаниеОбработчика, СведенияОбОбновленииИБ_БК);
		КонецЦикла;
		
		Обработки.ОбновлениеИнформационнойБазыБК.ЗаписатьКонстантуСведенияОбОбновленииИБ_БК(СведенияОбОбновленииИБ_БК);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПредопределенныйЭлементСправочникаНоменклатура() Экспорт 

	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда // В подчиненных узлах РИБ не выполняется
		Возврат;
	КонецЕсли;

	ОбъектУслугаПодарочныйСертификат = Справочники.Номенклатура.УслугаПодарочныйСертификат.ПолучитьОбъект();
	СтавкаНДС = Справочники.СтавкиНДС.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	СтавкиНДС.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.СтавкиНДС КАК СтавкиНДС
	               |ГДЕ
	               |	СтавкиНДС.Ставка = 12";
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		СтавкаНДС = Выборка.Ссылка;
	Иначе 
		СтавкаНДС = Справочники.СтавкиНДС.СоздатьЭлемент();
		СтавкаНДС.Ставка 		= 12;
		СтавкаНДС.Наименование 	= НСтр("ru='НДС 12%'", ОбщегоНазначения.КодОсновногоЯзыка());
		Попытка
			СтавкаНДС.Записать();
		Исключение
			ТекстСообщения = НСтр("ru='Операция не выполнена'", ОбщегоНазначения.КодОсновногоЯзыка());
			ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
		СтавкаНДС = СтавкаНДС.Ссылка;
		
	КонецЕсли;
	
	ОбъектУслугаПодарочныйСертификат.Услуга 					= Истина;
	ОбъектУслугаПодарочныйСертификат.СтавкаНДС 					= СтавкаНДС;
	ОбъектУслугаПодарочныйСертификат.БазоваяЕдиницаИзмерения	= Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("796");
	
	ОбъектУслугаПодарочныйСертификат.УстановитьНовыйКод();
	
	Попытка
		ОбъектУслугаПодарочныйСертификат.Записать();
	Исключение
		ТекстСообщения = НСтр("ru='Операция не выполнена'", ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
КонецПроцедуры

Процедура УстановитьСвязьМеждуПользователемИПользователемИБ() Экспорт

	Если Метаданные.Справочники.Пользователи.ДлинаКода = 0 Тогда
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Пользователи.Код,
	|	Пользователи.Ссылка
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	Пользователи.ИдентификаторПользователяИБ = &ПустойИдентификатор
	|	И Пользователи.Код <> """"";
	
	ПустойИдентификатор = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
	Запрос.УстановитьПараметр("ПустойИдентификатор", ПустойИдентификатор);	
	
	ВыборкаПользователи = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаПользователи.Следующий() Цикл
		
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(СокрЛП(ВыборкаПользователи.Код));
		
		Если ТипЗнч(ПользовательИБ) = Тип("ПользовательИнформационнойБазы") 
		И НЕ ПользователиСлужебный.ПользовательПоИдентификаторуСуществует(
				ПользовательИБ.УникальныйИдентификатор, ВыборкаПользователи.Ссылка) Тогда
			
			ОписаниеПользователяИБ = Новый Структура();
			ОписаниеПользователяИБ.Вставить("Действие", "Записать");
			ОписаниеПользователяИБ.Вставить("УникальныйИдентификатор", ПользовательИБ.УникальныйИдентификатор);			
			
		Иначе
			
			ОписаниеПользователяИБ = Новый Структура();
			ОписаниеПользователяИБ.Вставить("Действие", "Удалить");
			
		КонецЕсли;
		
		ПользовательОбъект = ВыборкаПользователи.Ссылка.ПолучитьОбъект();
		ПользовательОбъект.ДополнительныеСвойства.Вставить("ОписаниеПользователяИБ", ОписаниеПользователяИБ);	
		ПользовательОбъект.Код = "";
		ПользовательОбъект.ОбменДанными.Загрузка = Истина;
		ПользователиСлужебный.НачатьОбработкуПользователяИБ(ПользовательОбъект, Неопределено);
		
		// Обновление состава автоматической группы "Все пользователи".
		УчастникиИзменений = Новый Соответствие;
		ИзмененныеГруппы   = Новый Соответствие;

		ПользователиСлужебный.ОбновитьСоставыГруппПользователей(
			Справочники.ГруппыПользователей.ВсеПользователи, ПользовательОбъект.Ссылка, УчастникиИзменений, ИзмененныеГруппы);

		ПользователиСлужебный.ОбновитьИспользуемостьСоставовГруппПользователей(
			ПользовательОбъект.Ссылка, УчастникиИзменений, ИзмененныеГруппы);

		ПользователиСлужебный.ПослеОбновленияСоставовГруппПользователей(
			УчастникиИзменений, ИзмененныеГруппы);

		ИнтеграцияПодсистемБСП.ПослеДобавленияИзмененияПользователяИлиГруппы(ПользовательОбъект.Ссылка, Ложь);

		// БК3. Добавление настроек по умолчанию в регистр сведений НастройкиПользователей. 
		ПользователиБК.ПриЗаписиПользователя(ПользовательОбъект.Ссылка, Ложь);
		
		ПользовательОбъект.Записать();
		
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

// Добавляет всем пользователям с ролью ПолныеПрава роль АдминистраторСистемы.
//
Процедура ДобавитьРольАдминистраторСистемы() Экспорт
	
	Если Не ПравоДоступа("Администрирование", Метаданные) Тогда
		Возврат;
	КонецЕсли;
	
	Если ПользователиСлужебный.ЗапретРедактированияРолей() Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого ПользовательИБ Из ПользователиИнформационнойБазы.ПолучитьПользователей() Цикл
		
		Если ПользовательИБ.Роли.Содержит(Метаданные.Роли.ПолныеПрава)
		И НЕ ПользовательИБ.Роли.Содержит(Метаданные.Роли.АдминистраторСистемы) Тогда
			
			ПользовательИБ.Роли.Добавить(Метаданные.Роли.АдминистраторСистемы);
			ПользовательИБ.Записать();
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Переход с конфигурации с именем "БухгалтерияДляКазахстанаБазовая".
// 
Процедура ПерейтиСБазовойВерсииНаПРОФ() Экспорт
	
	ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
		УровеньЖурналаРегистрации.Информация,,,
		НСтр("ru = 'Выполнен обработчик перехода ПерейтиСБазовойВерсииНаПРОФ'", Метаданные.ОсновнойЯзык.КодЯзыка));
	
КонецПроцедуры

Процедура ПеренестиФайлыИзХранилищаДополнительнойИнформации() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	УдалитьХранилищеДополнительнойИнформации.Ссылка,
	|	УдалитьХранилищеДополнительнойИнформации.Наименование,
	|	УдалитьХранилищеДополнительнойИнформации.ВидДанных,
	|	УдалитьХранилищеДополнительнойИнформации.ИмяФайла,
	|	УдалитьХранилищеДополнительнойИнформации.Объект,
	|	УдалитьХранилищеДополнительнойИнформации.Хранилище
	|ИЗ
	|	Справочник.УдалитьХранилищеДополнительнойИнформации КАК УдалитьХранилищеДополнительнойИнформации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДвоичныеДанныеФайлов КАК ПрисоединенныеФайлы
	|		ПО УдалитьХранилищеДополнительнойИнформации.ПрисоединенныйФайл = ПрисоединенныеФайлы.Файл
	|ГДЕ
	|	ПрисоединенныеФайлы.Файл ЕСТЬ NULL ";
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда 
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл 
		
		Если НЕ ЗначениеЗаполнено(Выборка.Объект) Тогда 
			Продолжить;
		КонецЕсли;
		
		ДанныеХранилища = Выборка.Хранилище.Получить();
		Если ДанныеХранилища = Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		
		Если Выборка.ВидДанных = Перечисления.УдалитьВидыДополнительнойИнформацииОбъектов.Изображение Тогда 
			ИмяФайла = Выборка.Наименование;
			РасширениеФайла = СокрЛП(ДанныеХранилища.Формат());
			ДанныеХранилища = ДанныеХранилища.ПолучитьДвоичныеДанные();
		Иначе 
			ИмяФайла = Выборка.ИмяФайла;
			РасширениеФайла = Неопределено;
		КонецЕсли;
		
		ПараметрыФайла = Новый Структура;
		ПараметрыФайла.Вставить("Автор",                       Неопределено);
		ПараметрыФайла.Вставить("ВладелецФайлов",              Выборка.Объект);
		ПараметрыФайла.Вставить("ИмяБезРасширения",            ИмяФайла);
		ПараметрыФайла.Вставить("РасширениеБезТочки",          РасширениеФайла);
		ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное", Неопределено);
		
		ПрисоединенныйФайл = РаботаСФайлами.ДобавитьФайл(
			ПараметрыФайла,
			ПоместитьВоВременноеХранилище(ДанныеХранилища),
			,
			СтрШаблон(НСтр("ru = 'Перенос файлов из справочника ""%1"" при переходе с редакции 2.0'"), Метаданные.Справочники.УдалитьХранилищеДополнительнойИнформации.Представление())
		);
		
		// запишем ссылку на присоединенный файл в спр. "ХранилищеДополнительнойИнформации",
		// чтобы корректно перенести значения реквизитов, ссылающихся на данный справочник 
		// и не переносить повторно файлы из справочника.
		СправочникОбъект = Выборка.Ссылка.ПолучитьОбъект();
		СправочникОбъект.ПрисоединенныйФайл = ПрисоединенныйФайл;
		
		Попытка
			СправочникОбъект.Записать();
		Исключение
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.Справочники.УдалитьХранилищеДополнительнойИнформации,
				Выборка.Ссылка,
				СтрШаблон(НСтр("ru = 'Не удалось перенести файл из справочника ""%1""'"), Метаданные.Справочники.УдалитьХранилищеДополнительнойИнформации.Представление()));
		КонецПопытки;
		
	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьДанныеППВиПОПДС() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПлатежноеПоручениеВходящее.Ссылка,
		|	ПлатежноеПоручениеВходящее.КурсНаДатуПриобретенияРеализацииВалюты,
		|	ВЫБОР
		|		КОГДА ПлатежноеПоручениеВходящее.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЭтоПоступленияОтПродажиИностраннойВалюты
		|ИЗ
		|	Документ.ПлатежноеПоручениеВходящее.РасшифровкаПлатежа КАК ПлатежноеПоручениеВходящееРасшифровкаПлатежа
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПлатежноеПоручениеВходящее КАК ПлатежноеПоручениеВходящее
		|		ПО ПлатежноеПоручениеВходящееРасшифровкаПлатежа.Ссылка = ПлатежноеПоручениеВходящее.Ссылка
		|			И (ПлатежноеПоручениеВходящееРасшифровкаПлатежа.НомерСтроки = 1)
		|ГДЕ
		|	ПлатежноеПоручениеВходящее.ВидОперации В (ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПриобретениеИностраннойВалюты), ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты))
		|	И ПлатежноеПоручениеВходящееРасшифровкаПлатежа.КурсНаДатуПриобретенияРеализацииВалюты = 0
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПлатежныйОрдерПоступлениеДенежныхСредств.Ссылка,
		|	ПлатежныйОрдерПоступлениеДенежныхСредств.КурсНаДатуПриобретенияРеализацииВалюты,
		|	ВЫБОР
		|		КОГДА ПлатежныйОрдерПоступлениеДенежныхСредств.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ
		|ИЗ
		|	Документ.ПлатежныйОрдерПоступлениеДенежныхСредств.РасшифровкаПлатежа КАК ПлатежныйОрдерПоступлениеДенежныхСредствРасшифровкаПлатежа
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПлатежныйОрдерПоступлениеДенежныхСредств КАК ПлатежныйОрдерПоступлениеДенежныхСредств
		|		ПО (ПлатежныйОрдерПоступлениеДенежныхСредств.Ссылка = ПлатежныйОрдерПоступлениеДенежныхСредствРасшифровкаПлатежа.Ссылка)
		|			И (ПлатежныйОрдерПоступлениеДенежныхСредствРасшифровкаПлатежа.НомерСтроки = 1)
		|ГДЕ
		|	ПлатежныйОрдерПоступлениеДенежныхСредств.ВидОперации В (ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПриобретениеИностраннойВалюты), ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты))
		|	И ПлатежныйОрдерПоступлениеДенежныхСредствРасшифровкаПлатежа.КурсНаДатуПриобретенияРеализацииВалюты = 0";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДокументов = РезультатЗапроса.Выбрать();
	
	Попытка

		Пока ВыборкаДокументов.Следующий() Цикл
			
			ДокументОбъект = ВыборкаДокументов.Ссылка.ПолучитьОбъект();

			СтрокаПлатеж = ДокументОбъект.РасшифровкаПлатежа[0];
			
			СтатьяДвиженияДенежныхСредствТЧ = СтрокаПлатеж.СтатьяДвиженияДенежныхСредств;
			СтрокаПлатеж.СтатьяДвиженияДенежныхСредств = ДокументОбъект.СтатьяДвиженияДенежныхСредств;
			ДокументОбъект.СтатьяДвиженияДенежныхСредств = СтатьяДвиженияДенежныхСредствТЧ;
			
			Если ВыборкаДокументов.ЭтоПоступленияОтПродажиИностраннойВалюты Тогда
				СтрокаПлатеж.КурсНаДатуПриобретенияРеализацииВалюты = ДокументОбъект.КурсНаДатуПриобретенияРеализацииВалюты;		
			КонецЕсли;
			
			ДокументОбъект.ОбменДанными.Загрузка = Истина;
			ДокументОбъект.Записать();
			
		КонецЦикла;
		
	Исключение
		
		ТекстСообщения = НСтр("ru = 'Операция не выполнена'", ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ВыполнитьНачальнуюНастройкуКлиентскогоПриложения() Экспорт
	
	НастройкиКлиентскогоПриложения = Новый НастройкиКлиентскогоПриложения;
	НастройкиКлиентскогоПриложения.ВариантИнтерфейсаКлиентскогоПриложения 	= ВариантИнтерфейсаКлиентскогоПриложения.Такси;
	НастройкиКлиентскогоПриложения.ВариантМасштабаФормКлиентскогоПриложения = ВариантМасштабаФормКлиентскогоПриложения.Компактный;
	
	ПользователиИБ = ПользователиИнформационнойБазы.ПолучитьПользователей();
	Для Каждого ПользовательИБ Из ПользователиИБ Цикл
		
		ОбщегоНазначения.ХранилищеСистемныхНастроекСохранить(
		"Общее/НастройкиКлиентскогоПриложения",
		,
		НастройкиКлиентскогоПриложения, , ПользовательИБ.Имя);
			
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьРолиПользователей_3_0_1_2() Экспорт
	
	Если Не ПравоДоступа("Администрирование", Метаданные) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации() Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	ВсеПользователиИБ = ПользователиИнформационнойБазы.ПолучитьПользователей();
	
	СоответветствиеРолей = Новый Соответствие;
	СоответветствиеРолей.Вставить("УдалитьПравоЗапускаВнешнихОбработок", "ИнтерактивноеОткрытиеВнешнихОтчетовИОбработок");
	СоответветствиеРолей.Вставить("УдалитьПравоВнешнегоПодключения"    , "ЗапускВнешнегоСоединения");
	
	МассивОбщихРолей = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
		"БазовыеПраваБСП,ВыводНаПринтерФайлБуферОбмена,ЗапускВебКлиента,ЗапускТонкогоКлиента,ЧтениеДополнительныхОтчетовИОбработок,
		|ПросмотрСвязанныеДокументы,ПросмотрОписанияИзмененийПрограммы,СохранениеДанныхПользователя,
		|ЧтениеВерсийОбъектов,ЧтениеИнформацииОВерсияхОбъектов", ",", Истина, Истина);
		
	МассивРолейГлБухгалтера = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
		"ИзменениеМакетовПечатныхФорм,ПросмотрЖурналаРегистрации,ДобавлениеИзменениеДополнительныхОтчетовИОбработок",
		",", Истина, Истина);
		
	Для каждого ПользовательИБ Из ВсеПользователиИБ Цикл
		Если ПользовательИБ.Роли.Содержит(Метаданные.Роли.ПолныеПрава)
			ИЛИ ПользовательИБ.Роли.Содержит(Метаданные.Роли.АдминистраторСистемы) Тогда
			Продолжить;
		КонецЕсли;
		
		// Добавим для пользователя общие роли.
		Для Каждого ОбщаяРоль Из МассивОбщихРолей Цикл
			Если Метаданные.Роли.Найти(ОбщаяРоль) <> Неопределено Тогда
				ПользовательИБ.Роли.Добавить(Метаданные.Роли[ОбщаяРоль]);
			КонецЕсли;
		КонецЦикла;
		
		// Установим права на подсистему Взаимодействия.
		Если ПравоДоступа("Изменение", Метаданные.Документы.ЭлектронноеПисьмоВходящее, ПользовательИБ) Тогда
			ПользовательИБ.Роли.Добавить(Метаданные.Роли.ДобавлениеИзменениеВзаимодействий);
		КонецЕсли;
		
		// Установим роли главного бухгалтера.
		Если ПользовательИБ.Роли.Содержит(Метаданные.Роли.УдалитьГлавныйБухгалтер) Тогда
			Для Каждого Роль Из МассивРолейГлБухгалтера Цикл
				Если Метаданные.Роли.Найти(Роль) <> Неопределено Тогда
					ПользовательИБ.Роли.Добавить(Метаданные.Роли[Роль]);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		// Установим роли по соответствию.
		Для Каждого КлючЗначение Из СоответветствиеРолей Цикл
			Если Метаданные.Роли.Найти(КлючЗначение.Ключ) = Неопределено
				ИЛИ Метаданные.Роли.Найти(КлючЗначение.Значение) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если ПользовательИБ.Роли.Содержит(Метаданные.Роли[КлючЗначение.Ключ]) Тогда
				ПользовательИБ.Роли.Добавить(Метаданные.Роли[КлючЗначение.Значение]);
			КонецЕсли;
		КонецЦикла;
		
		ПользовательИБ.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьВозможностьВызоваОнлайнПоддержки() Экспорт
	
	Константы.ИспользоватьКоннект.Установить(Истина);
	
КонецПроцедуры

Процедура УстановитьМЗПМРП2015Год() Экспорт
	
	НаборЗаписей = РегистрыСведений.РегламентированныеРасчетныеПоказатели.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Период.Установить('20150101', Истина);		
	ДобавитьЗначенияРасчетныхПоказателей(НаборЗаписей, Дата("20150101"), 21364, 1982, 55*21364, 55*21364, 21364, 1982);	
	Попытка
		НаборЗаписей.Записать();
	Исключение
	КонецПопытки;
	
КонецПроцедуры

Процедура УстановитьМЗПМРП2016Год() Экспорт
	
	НаборЗаписей = РегистрыСведений.РегламентированныеРасчетныеПоказатели.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Период.Установить('20160101', Истина);		
	ДобавитьЗначенияРасчетныхПоказателей(НаборЗаписей, Дата("20160101"), 22859, 2121, 55*22859, 55*22859, 22859, 2121);
	Попытка
		НаборЗаписей.Записать();
	Исключение
	КонецПопытки;
	
КонецПроцедуры

Процедура УстановитьМЗПМРП2017Год() Экспорт
	
	НаборЗаписей = РегистрыСведений.РегламентированныеРасчетныеПоказатели.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Период.Установить('20170101', Истина);		
	ДобавитьЗначенияРасчетныхПоказателей(НаборЗаписей, Дата("20170101"), 24459, 2269, 75*24459, 75*24459, 24459, 2269);
	Попытка
		НаборЗаписей.Записать();
	Исключение
	КонецПопытки;
	
КонецПроцедуры

Процедура УстановитьМЗПМРП2018Год() Экспорт
	
	НаборЗаписей = РегистрыСведений.РегламентированныеРасчетныеПоказатели.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Период.Установить('20180101', Истина);		
	ДобавитьЗначенияРасчетныхПоказателей(НаборЗаписей, Дата("20180101"), 28284, 2405, 75*28284, 75*28284, 28284, 2405);
	Попытка
		НаборЗаписей.Записать();
	Исключение
	КонецПопытки;
	
КонецПроцедуры

Процедура УстановитьМЗПМРП2019Год() Экспорт
	
	НаборЗаписей = РегистрыСведений.РегламентированныеРасчетныеПоказатели.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Период.Установить('20190101', Истина);		
	ДобавитьЗначенияРасчетныхПоказателей(НаборЗаписей, Дата("20190101"), 42500, 2525, 75*42500, 75*42500, 42500, 2525);
	Попытка
		НаборЗаписей.Записать();
	Исключение
	КонецПопытки;
	
КонецПроцедуры

Процедура УстановитьМЗПМРП2020Год() Экспорт
	
	НаборЗаписей = РегистрыСведений.РегламентированныеРасчетныеПоказатели.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Период.Установить('20200101', Истина);		
	ДобавитьЗначенияРасчетныхПоказателей(НаборЗаписей, Дата("20200101"), 42500, 2651, 75*42500, 75*42500, 42500, 2651);
	Попытка
		НаборЗаписей.Записать();
	Исключение
	КонецПопытки;
	
КонецПроцедуры

Процедура УстановитьМЗПМРП2021Год() Экспорт
	
	НаборЗаписей = РегистрыСведений.РегламентированныеРасчетныеПоказатели.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Период.Установить('20210101', Истина);		
	ДобавитьЗначенияРасчетныхПоказателей(НаборЗаписей, Дата("20210101"), 42500, 2917, 882*2917, 882*2917, 42500, 2917);
	
	Попытка
		НаборЗаписей.Записать();
	Исключение
	КонецПопытки;
	
КонецПроцедуры

Процедура УстановитьМРПАпрель2020Год() Экспорт
	
	НаборЗаписей = РегистрыСведений.РегламентированныеРасчетныеПоказатели.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Период.Установить('20200401', Истина);		
	ДобавитьЗначенияРасчетныхПоказателей(НаборЗаписей, Дата("20200401"), 42500, 2778, 75*42500, 75*42500, 42500, 2778);
	Попытка
		НаборЗаписей.Записать();
	Исключение
	КонецПопытки;
	
КонецПроцедуры

Процедура ПереименоватьРегламентированныйОтчетФорма1ТМесячная() Экспорт
	
	// Удаление отчетов РегламентированныйОтчетФорма1ТМесячная	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	РегламентированныеОтчеты.Ссылка,
	|	РегламентированныеОтчеты.ИсточникОтчета
	|ИЗ
	|	Справочник.РегламентированныеОтчеты КАК РегламентированныеОтчеты
	|ГДЕ
	|	РегламентированныеОтчеты.ИсточникОтчета = &ИсточникОтчета";
	
	Запрос.УстановитьПараметр("ИсточникОтчета","РегламентированныйОтчетФорма1ТМесячная");
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	МассивСсылок = Новый Массив(1);
	
	Пока Выборка.Следующий() Цикл
		
		МассивСсылок[0] = Выборка.Ссылка;
		ТаблицаСсылок = НайтиПоСсылкам(МассивСсылок);
		Если ТаблицаСсылок.Количество() = 0 Тогда
			ОтчетОбъект = Выборка.Ссылка.ПолучитьОбъект();
			Попытка					
				ОтчетОбъект.Удалить();
			Исключение
				ОбщегоНазначения.СообщитьПользователю(ОписаниеОшибки());
			КонецПопытки;
		Иначе
			ТекстСообщения = НСтр("ru = 'Регламентированный отчет %1 ""%2"" - не может быть удален, т.к. имеются ссылки в информационной базе'", ОбщегоНазначения.КодОсновногоЯзыка());
			ЗаписьЖурналаРегистрации(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			                     	ТекстСообщения, Выборка.Ссылка.Код, Выборка.Ссылка.Наименование ),
									УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецЕсли;	
		
	КонецЦикла;
	
	ОбновитьРегламентированныеОтчеты();
	
	// Переименовываем ссылки удаленных отчетов "1-Т Месячная" 
	// в документах "Регламентированный отчет" на вновь добавленные,
	// используемые до 2015 года.
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	РегламентированныйОтчет.Ссылка,
	|	РегламентированныйОтчет.ИсточникОтчета
	|ИЗ
	|	Документ.РегламентированныйОтчет КАК РегламентированныйОтчет
	|ГДЕ
	|	РегламентированныйОтчет.ИсточникОтчета = &ИсточникОтчета";
	
	Запрос.УстановитьПараметр("ИсточникОтчета", "РегламентированныйОтчетФорма1ТМесячная");
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ОтчетОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Источник = Выборка.ИсточникОтчета;
		ОтчетОбъект.ИсточникОтчета = Источник + "До2015";
		Попытка
			ОтчетОбъект.ОбменДанными.Загрузка = Истина;
			ОтчетОбъект.Записать();
		Исключение	
			ТекстСообщения = НСтр("ru = 'при записи документа ""%1"" %2 ""%3"" произошла ошибка: %4'", ОбщегоНазначения.КодОсновногоЯзыка());
			ЗаписьЖурналаРегистрации(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ТекстСообщения,
					Метаданные.Документы.РегламентированныйОтчет.Представление(),
					Выборка.Ссылка.Номер,
					Выборка.Ссылка.НаименованиеОтчета,
					ОписаниеОшибки()),
				УровеньЖурналаРегистрации.Ошибка, , ,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры  

Процедура ЗаполнитьРеквизитыПредопределенногоЭлементаКлиентБанк() Экспорт
	
	Попытка
				
		ОбъектКлиентБанк = Справочники.ДополнительныеОтчетыИОбработки.ОбработкаКлиентБанк.ПолучитьОбъект();
		
		ОбъектКлиентБанк.Наименование = НСтр("ru = 'Обработка ""Клиент банка (импорт / экспорт платежных документов)""'", ОбщегоНазначения.КодОсновногоЯзыка());
		ОбъектКлиентБанк.БезопасныйРежим = Ложь;
		ОбъектКлиентБанк.ИмяОбъекта = Справочники.ДополнительныеОтчетыИОбработки.ОбработкаКлиентБанк.ИмяПредопределенныхДанных;
		ОбъектКлиентБанк.Ответственный = ПользователиКлиентСервер.ТекущийПользователь();
		ОбъектКлиентБанк.Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок.ДополнительнаяОбработка;
		ОбъектКлиентБанк.Публикация = Перечисления.ВариантыПубликацииДополнительныхОтчетовИОбработок.Используется;
		
		ОбъектКлиентБанк.ОбменДанными.Загрузка = Истина;
		ОбъектКлиентБанк.Записать();

	Исключение
		
		ТекстСообщения = НСтр(
		"ru = 'Не удалось обновить элемент ""Обработка ""Клиент банка"""" справочника ""%1"",
		|так как при обновлении произошла ошибка:
		|%2'");
		
		Комментарий = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Метаданные.Справочники.ДополнительныеОтчетыИОбработки.Представление(), Комментарий);
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Не удалось обновить ""Обработка ""Клиент банка"""".'", ОбщегоНазначения.КодОсновногоЯзыка()), 
		УровеньЖурналаРегистрации.Ошибка, , Справочники.ДополнительныеОтчетыИОбработки.ОбработкаКлиентБанк, Комментарий);
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыПредопределенногоЭлементаВыгрузкаДанныхМТ102() Экспорт
	
	Попытка
				
		ОбъектВыгрузкаМТ102 = Справочники.ДополнительныеОтчетыИОбработки.ОбработкаВыгрузкаДанныхМТ102.ПолучитьОбъект();
		
		ОбъектВыгрузкаМТ102.Наименование = НСтр("ru = 'Обработка ""Выгрузка данных в формате МТ-102""'", ОбщегоНазначения.КодОсновногоЯзыка());
		ОбъектВыгрузкаМТ102.БезопасныйРежим = Ложь;
		ОбъектВыгрузкаМТ102.ИмяОбъекта = Справочники.ДополнительныеОтчетыИОбработки.ОбработкаВыгрузкаДанныхМТ102.ИмяПредопределенныхДанных;
		ОбъектВыгрузкаМТ102.Ответственный = ПользователиКлиентСервер.ТекущийПользователь();
		ОбъектВыгрузкаМТ102.Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок.ДополнительнаяОбработка;
		ОбъектВыгрузкаМТ102.Публикация = Перечисления.ВариантыПубликацииДополнительныхОтчетовИОбработок.Используется;
		
		ОбъектВыгрузкаМТ102.ОбменДанными.Загрузка = Истина;
		ОбъектВыгрузкаМТ102.Записать();

	Исключение
		
		ТекстСообщения = НСтр(
		"ru = 'Не удалось обновить элемент ""Обработка ""Выгрузка данных в формате МТ-102"""" справочника ""%1"",
		|так как при обновлении произошла ошибка:
		|%2'");
		
		Комментарий = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Метаданные.Справочники.ДополнительныеОтчетыИОбработки.Представление(), Комментарий);
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Не удалось обновить ""Обработка ""Выгрузка данных в формате МТ-102"""".'", ОбщегоНазначения.КодОсновногоЯзыка()), 
		УровеньЖурналаРегистрации.Ошибка, , Справочники.ДополнительныеОтчетыИОбработки.ОбработкаВыгрузкаДанныхМТ102, Комментарий);
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыПредопределенногоВидаРасчетаИЛКоэффициентомПоМРП() Экспорт
	
	СпособУчетаИЛ = Справочники.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка();
	СпРасчета     = Перечисления.СпособыРасчетаОплатыТруда;
	ПВР           = ПланыВидовРасчета.УдержанияОрганизаций;

	Попытка
		УстановитьРеквизитыУдержанияОрганизации(ПВР.ИЛКоэффициентомПоМРП , СпРасчета.ПоМесячномуРасчетномуПоказателю, СпособУчетаИЛ);
	Исключение
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыЭлементаСлужебныйТелефонПользователяСправочникаВидыКонтактнойИнформации() Экспорт
	
	ОбъектВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.СлужебныйТелефонПользователя.ПолучитьОбъект();
	ОбъектВидКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
	ОбъектВидКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = Перечисления.ВидыОбъектовКонтактнойИнформации.Пользователи;
	ОбъектВидКонтактнойИнформации.Код = "";
	ОбъектВидКонтактнойИнформации.Записать();
	
КонецПроцедуры

// Заполняет реквизит ЗагружатьКурсИзИнтернета в справочнике Валюты.
// Реквизит заполняется на основе макета КлассификаторВалют.
//
Процедура ЗаполнитьРеквизитЗагружатьКурсИзИнтернетаСправочникаВалюты() Экспорт
	
	Попытка
		
		НачатьТранзакцию();
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Валюты.Ссылка,
		|	Валюты.БуквенныйКод
		|ИЗ
		|	Справочник.Валюты КАК Валюты
		|ГДЕ
		|	НЕ Валюты.ЗагружатьКурсИзИнтернета";
		
		РезультатЗапроса = Запрос.Выполнить();	
		Выборка = РезультатЗапроса.Выбрать();
		
		ТабДокКлассификаторВалют = УправлениеПечатью.МакетПечатнойФормы("Справочник.Валюты.ПФ_MXL_КлассификаторВалют");
		ТабДокКлассификаторВалют.КодЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
		НомерКолонкиБуквенныйКод = 3;
		НомерКолонкиЗагружатьКурсИзИнтернета = 6;
		
		Пока Выборка.Следующий() Цикл
						
			Для НомерСтроки = 4 По ТабДокКлассификаторВалют.ВысотаТаблицы Цикл
				
				ОбластьБуквенныйКод = ТабДокКлассификаторВалют.Область(НомерСтроки, НомерКолонкиБуквенныйКод, НомерСтроки, НомерКолонкиБуквенныйКод);
				БуквенныйКод = ОбластьБуквенныйКод.Текст;
				
				Если Выборка.БуквенныйКод = БуквенныйКод Тогда
					
					ОбластьЗагружатьКурсИзИнтернета = ТабДокКлассификаторВалют.Область(НомерСтроки, НомерКолонкиЗагружатьКурсИзИнтернета, НомерСтроки, НомерКолонкиЗагружатьКурсИзИнтернета);
					ЗагружатьКурсИзИнтернета = ?(НРег(ОбластьЗагружатьКурсИзИнтернета.Текст) = "загружать", Истина, Ложь);
					
					Если ЗагружатьКурсИзИнтернета Тогда
						ОбъектВалюта = Выборка.Ссылка.ПолучитьОбъект();
						ОбъектВалюта.ЗагружатьКурсИзИнтернета = Истина;
						ОбъектВалюта.ОбменДанными.Загрузка = Истина;
						ОбъектВалюта.Записать();
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
				
		ЗафиксироватьТранзакцию();
		
	Исключение
				
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		
		ТекстСообщения = НСтр(
		"ru = 'Не удалось заполнить реквизит ""%1"" в справочнике ""%2"",
		|так как при обновлении произошла ошибка:
		|%3'");
		
		Комментарий = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения,
			Метаданные.Справочники.Валюты.Реквизиты.ЗагружатьКурсИзИнтернета.Представление(),
			Метаданные.Справочники.Валюты.Представление(),
			Комментарий);
		
		ЗаписьЖурналаРегистрации(
			СтрШаблон(НСтр("ru = 'Не удалось заполнить реквизит ""%1"" в справочнике ""%2"".'", ОбщегоНазначения.КодОсновногоЯзыка()),
				Метаданные.Справочники.Валюты.Реквизиты.ЗагружатьКурсИзИнтернета.Представление(),
				Метаданные.Справочники.Валюты.Представление()),
			УровеньЖурналаРегистрации.Ошибка, , ,
			Комментарий);
		
	КонецПопытки;
	
КонецПроцедуры

// Выполняет все регламентные операции для регламентированных отчетов
// при каждом обновлении ИБ
Процедура ОбновитьРегламентированныеОтчеты(СписокИсключений = Неопределено) Экспорт
	
	КодЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	// Заполнение списка отчетова.
	ТекстСообщения = НСтр("ru = 'Обновление регламентированных отчетов.'",КодЯзыка);
	ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Информация);
	ЗаполнитьСписокРегламентированныхОтчетов(Ложь, СписокИсключений);
	
	// Перенумерация элементов справочника РегламентированныеОтчеты.
	ТекстСообщения = СтрШаблон(НСтр("ru = 'Перенумерация элементов справочника ""%1""'", КодЯзыка), Метаданные.Справочники.РегламентированныеОтчеты.Представление());
	ЗаписьЖурналаРегистрации(ТекстСообщения,УровеньЖурналаРегистрации.Информация);
	ПеренумероватьСписокРегламентированныхОтчетов();
	
	// Замена внешних регламентированных отчетов на внутренние.
	ТекстСообщения = СтрШаблон(НСтр("ru = 'Замена внешних отчетов на внутренние в справочнике ""%1""'", КодЯзыка), Метаданные.Справочники.РегламентированныеОтчеты.Представление());
	ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Информация);
	ЗаменитьВнешниеРегламентированныеОтчетыНаВнутренние(СписокИсключений);
	
КонецПроцедуры

// Выполняет первоначальное заполнение справочника РегламентированныеОтчеты
// списком регламентированных отчетов. 
//  Процедура должна вызываться при первоначальном заполнении пустой 
// информационной базы. Предполагается, что перед запуском процедуры справочник
// РегламентированныеОтчеты - пустой.
//
Процедура ЗаполнитьСписокРегламентированныхОтчетов(ПервоеЗаполнение = Истина, СписокИсключений = Неопределено) Экспорт

	Перем ДеревоОтчетов;
	Перем ОбработкаОбновлениеОтчетов;

	// Заполнением списка отчетов выполняется путем вызова экспортных процедур
	// основной формы обработки ОбновлениеРегламентированнойОтчетности.
	ОбработкаОбновлениеОтчетов = Обработки.ОбновлениеРегламентированнойОтчетности.Создать();
	
	// Получаем список регламентированных отчетов в виде дерева.
	ДеревоОтчетов = ОбработкаОбновлениеОтчетов.ПолучитьСписокОтчетов();

	Если ДеревоОтчетов.Строки.Количество() = 0 Тогда
		// нет обновлений
		Возврат;
	КонецЕсли;
	
	// Заполняем списко отчетов.
	ОбработкаОбновлениеОтчетов.ЗаполнитьСписокОтчетов(ДеревоОтчетов);

КонецПроцедуры

// Перенумеровывает элементы справочника РегламентированныеОтчеты
//
Процедура ПеренумероватьСписокРегламентированныхОтчетов()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	РегламентированныеОтчеты.Ссылка,
	               |	РегламентированныеОтчеты.Родитель,
	               |	РегламентированныеОтчеты.Код,
	               |	РегламентированныеОтчеты.ЭтоГруппа КАК ЭтоГруппа,
	               |	РегламентированныеОтчеты.Наименование КАК Наименование
	               |ИЗ
	               |	Справочник.РегламентированныеОтчеты КАК РегламентированныеОтчеты
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ЭтоГруппа ИЕРАРХИЯ,
	               |	Наименование";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	ТекКодГруппы = 0;
	ТекКод = 1;
	ТекущаяГруппа = Неопределено;
	
	Пока Выборка.Следующий() Цикл
		Если Выборка.ЭтоГруппа = Истина ИЛИ Выборка.Родитель.Ссылка = Справочники.РегламентированныеОтчеты.ПустаяСсылка() Тогда
			Попытка
				Объект = Выборка.Ссылка.ПолучитьОбъект();
				Объект.Код = Формат(ТекКодГруппы, "ЧЦ=3; ЧВН=; ЧГ=") + "000";
				Объект.ГенерироватьНовыйКод();
				Объект.Записать();  			
				ТекКодГруппы = ТекКодГруппы + 1;
			Исключение
				ТекстСообщения = НСтр("ru = 'ошибка при перенумерации %1  произошла ошибка: %2'",  ОбщегоНазначения.КодОсновногоЯзыка());
				ЗаписьЖурналаРегистрации(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			                     	ТекстСообщения, Выборка.Ссылка, ОписаниеОшибки()),
									УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
		Иначе
			Если ТекущаяГруппа <> Выборка.Родитель.Ссылка Тогда
				ТекКод = 1;
			КонецЕсли;
			Попытка
				Объект = Выборка.Ссылка.ПолучитьОбъект();
				Объект.Код = Формат(ТекКод, "ЧЦ=6; ЧВН=; ЧГ=");
				Объект.ГенерироватьНовыйКод();
				Объект.Записать();			
				ТекКод = ТекКод + 1;
			Исключение
				ТекстСообщения = НСтр("ru = 'ошибка при перенумерации %1  произошла ошибка: %2'", ОбщегоНазначения.КодОсновногоЯзыка());
				ЗаписьЖурналаРегистрации(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			                     	ТекстСообщения, Выборка.Ссылка, ОписаниеОшибки()),
									УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
			ТекущаяГруппа = Выборка.Родитель.Ссылка;
		КонецЕсли;		
	КонецЦикла;
	
КонецПроцедуры  

Процедура ЗаменитьВнешниеРегламентированныеОтчетыНаВнутренние(СписокИсключений = Неопределено)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
						  |	РегламентированныеОтчеты.Ссылка КАК Ссылка,
						  |	РегламентированныеОтчеты.ИсточникОтчета КАК ИсточникОтчета,
						  |	РегламентированныеОтчеты.Наименование КАК Наименование
						  |ИЗ
						  |	Справочник.РегламентированныеОтчеты КАК РегламентированныеОтчеты
						  |ГДЕ
						  |	РегламентированныеОтчеты.ВнешнийОтчетИспользовать = &ПризнакИспользованияВнешнегоОтчета");
						  
	Если ЗначениеЗаполнено(СписокИсключений) Тогда
		Запрос.Текст = Запрос.Текст + "
						  |	 И НЕ РегламентированныеОтчеты.ИсточникОтчета в (&СписокИсключений)";
						  
			Запрос.УстановитьПараметр("СписокИсключений", СписокИсключений);
	КонецЕсли;
						  
	Запрос.УстановитьПараметр("ПризнакИспользованияВнешнегоОтчета", Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Метаданные.Отчеты.Найти(Выборка.ИсточникОтчета) <> Неопределено Тогда
			Попытка
				ОбъектРеглОтчет = Выборка.Ссылка.ПолучитьОбъект();
				ОбъектРеглОтчет.ВнешнийОтчетИспользовать = Ложь;
				ОбъектРеглОтчет.Записать();
			Исключение
			ТекстСообщения = НСтр("ru = 'при записи отчета %1  произошла ошибка: %2'", ОбщегоНазначения.КодОсновногоЯзыка());
			ЗаписьЖурналаРегистрации(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			                     	ТекстСообщения, Выборка.Наименование, ОписаниеОшибки()),
									УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьПериодВРегистреСведенийОКорректировкиСтоимостиТоваров() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СведенияОКорректировкиСтоимостиПродукцииИТоваров.Регистратор КАК Регистратор,
	|	СведенияОКорректировкиСтоимостиПродукцииИТоваров.Регистратор.Дата КАК Дата
	|ИЗ
	|	РегистрСведений.СведенияОКорректировкиСтоимостиПродукцииИТоваров КАК СведенияОКорректировкиСтоимостиПродукцииИТоваров";		                      
	
	Результат = Запрос.Выполнить(); 						
	Если НЕ Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			НаборЗаписей = РегистрыСведений.СведенияОКорректировкиСтоимостиПродукцииИТоваров.СоздатьНаборЗаписей();					
			НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);						
			НаборЗаписей.Прочитать();					
			
			Для Каждого СтрокаЗаписи Из НаборЗаписей Цикл
				
				Если Не ЗначениеЗаполнено(СтрокаЗаписи.Период) Тогда
					СтрокаЗаписи.Период = Выборка.Дата;						
				КонецЕсли;
				
			КонецЦикла;					
			
			Попытка
				
				НаборЗаписей.ОбменДанными.Загрузка = Истина;
				НаборЗаписей.Записать();
				
			Исключение
				
				ТекстСообщения = НСтр(
				"ru = 'при записи набора данных по регистратору <%1> произошла ошибка: 
				|%2");
				
				ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Выборка.Регистратор, ПодробноеПредставлениеОшибки);
				
				ЗаписьЖурналаРегистрации(
					СтрШаблон(НСтр("ru = 'Не удалось обновить ""Регистр сведений  ""%1"""".'", ОбщегоНазначения.КодОсновногоЯзыка()),
						Метаданные.РегистрыСведений.СведенияОКорректировкиСтоимостиПродукцииИТоваров.Представление()),
					УровеньЖурналаРегистрации.Ошибка, , ,
					Комментарий);
				
			КонецПопытки;
		КонецЦикла;
	КонецЕсли;  	

КонецПроцедуры

Процедура ЗаполнитьСпособЗаполненияОперацииБух() Экспорт
			
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОперацияБух.Ссылка
	|ИЗ
	|	Документ.ОперацияБух КАК ОперацияБух
	|ГДЕ
	|	(ОперацияБух.СпособЗаполнения = """"
	|			ИЛИ ОперацияБух.СпособЗаполнения ЕСТЬ NULL )" ;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Попытка
			ОперацияБух = Выборка.Ссылка.ПолучитьОбъект();
			ОперацияБух.СпособЗаполнения = НСтр("ru = 'Вручную'", ОбщегоНазначения.КодОсновногоЯзыка());
			
			ОперацияБух.ОбменДанными.Загрузка = Истина;
			ОперацияБух.Записать();
		Исключение   	
			ТекстСообщения = НСтр("ru = 'при записи документа %1  произошла ошибка: %2'", ОбщегоНазначения.КодОсновногоЯзыка());
			ЗаписьЖурналаРегистрации(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстСообщения, Выборка.Ссылка, ОписаниеОшибки()),
			УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));			
			
		КонецПопытки;		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСтатьюДДСДляПлатежныхОрдеров() Экспорт
		
	Запрос = Новый Запрос;
	Запрос.Текст =  "ВЫБРАТЬ
	                |	ПлатежныйОрдерСписаниеДенежныхСредств.Ссылка КАК Док,
	                |	ПлатежныйОрдерСписаниеДенежныхСредств.Представление КАК ДокПредставление,
	                |	ПлатежныйОрдерСписаниеДенежныхСредств.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств
	                |ИЗ
	                |	Документ.ПлатежныйОрдерСписаниеДенежныхСредств КАК ПлатежныйОрдерСписаниеДенежныхСредств
	                |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПлатежныйОрдерСписаниеДенежныхСредств.РасшифровкаПлатежа КАК РасшифровкаПлатежаДок
	                |		ПО ПлатежныйОрдерСписаниеДенежныхСредств.Ссылка = РасшифровкаПлатежаДок.Ссылка
	                |			И (РасшифровкаПлатежаДок.НомерСтроки = 1)
	                |ГДЕ
	                |	НЕ ПлатежныйОрдерСписаниеДенежныхСредств.СтатьяДвиженияДенежныхСредств = РасшифровкаПлатежаДок.СтатьяДвиженияДенежныхСредств
	                |	И ПлатежныйОрдерСписаниеДенежныхСредств.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПеречислениеЗаработнойПлаты)
	                |	И НЕ ПлатежныйОрдерСписаниеДенежныхСредств.ПометкаУдаления";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ДокОбъект = Выборка.Док.ПолучитьОбъект();
		КоличествоСтрокРасшифровки = ДокОбъект.РасшифровкаПлатежа.Количество();
		Если КоличествоСтрокРасшифровки = 0 Тогда
			СтрокаРасшифровки = ДокОбъект.РасшифровкаПлатежа.Добавить();
		Иначе
			СтрокаРасшифровки = ДокОбъект.РасшифровкаПлатежа[0];
		КонецЕсли;
		СтрокаРасшифровки.СтатьяДвиженияДенежныхСредств = Выборка.СтатьяДвиженияДенежныхСредств;
		Попытка
			ДокОбъект.ОбменДанными.Загрузка = Истина;
			ДокОбъект.Записать();
		Исключение
			ТекстСообщения = НСтр("ru = 'при записи документа %1  произошла ошибка: %2'", ОбщегоНазначения.КодОсновногоЯзыка());
			ЗаписьЖурналаРегистрации(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстСообщения, Выборка.ДокПредставление, ОписаниеОшибки()),
			УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));						
		КонецПопытки;		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьЕдиницуИзмеренияНалоговойБазыПараметровРасчетаТранспортногоНалога() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст  ="ВЫБРАТЬ
	               |	ПараметрыРасчетаТранспортногоНалога.ОсновноеСредство,
	               |	ПараметрыРасчетаТранспортногоНалога.Организация,
	               |	ПараметрыРасчетаТранспортногоНалога.ЕдиницаИзмеренияНалоговойБазы
	               |ИЗ
	               |	РегистрСведений.ПараметрыРасчетаТранспортногоНалога КАК ПараметрыРасчетаТранспортногоНалога
	               |ГДЕ
	               |	ПараметрыРасчетаТранспортногоНалога.ВидТранспортногоСредства = ЗНАЧЕНИЕ(Перечисление.ВидыТранспортныхСредств.Мотоцикл)
	               |	И (ПараметрыРасчетаТранспортногоНалога.ЕдиницаИзмеренияНалоговойБазы = """"
	               |			ИЛИ ПараметрыРасчетаТранспортногоНалога.ЕдиницаИзмеренияНалоговойБазы ЕСТЬ NULL )" ;
				   
	МенеджерЗаписи = РегистрыСведений.ПараметрыРасчетаТранспортногоНалога.СоздатьМенеджерЗаписи();
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		МенеджерЗаписи.ОсновноеСредство = Выборка.ОсновноеСредство;
 		МенеджерЗаписи.Организация 	    = Выборка.Организация;  
		МенеджерЗаписи.Прочитать(); 
		
		//заполняем ед.измерений = "кВт"
		МенеджерЗаписи.ЕдиницаИзмеренияНалоговойБазы = "214";
		
		Попытка
			МенеджерЗаписи.Записать();
		Исключение
			ТекстСообщения = НСтр("ru = 'при записи параметров расчета транспортного для основного средства %1  произошла ошибка: %2'", ОбщегоНазначения.КодОсновногоЯзыка());
			ЗаписьЖурналаРегистрации(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстСообщения, Выборка.ОсновноеСредство, ОписаниеОшибки()),
			УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));						
		КонецПопытки;

		
	КонецЦикла;
	               		
				   
КонецПроцедуры

Процедура ЗаполнитьПериодВРегистреСчетаФактурыПрекратившиеДействие() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СчетаФактурыПрекратившиеДействие.Регистратор,
	|	СчетаФактурыПрекратившиеДействие.Регистратор.Дата КАК Дата
	|ИЗ
	|	РегистрСведений.СчетаФактурыПрекратившиеДействие КАК СчетаФактурыПрекратившиеДействие
	|ГДЕ
	|	СчетаФактурыПрекратившиеДействие.Период = &ПустаяДата";
	
	Запрос.УстановитьПараметр("ПустаяДата", '0001-01-01');	
	
	Результат = Запрос.Выполнить(); 						
	Если НЕ Результат.Пустой() Тогда
		
		УдалосьЗаписатьВсеЗаписи = Истина;
		ЗаголовокОшибки = СтрШаблон(НСтр("ru = 'Не удалось заполнить поле ""Период"" в регистре сведений  ""%1"".'", ОбщегоНазначения.КодОсновногоЯзыка()), Метаданные.РегистрыСведений.СведенияОКорректировкиСтоимостиПродукцииИТоваров.Представление());
		
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			НаборЗаписей = РегистрыСведений.СчетаФактурыПрекратившиеДействие.СоздатьНаборЗаписей();					
			НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);						
			НаборЗаписей.Прочитать();					
			
			Для Каждого СтрокаЗаписи Из НаборЗаписей Цикл
				Если НЕ ЗначениеЗаполнено(СтрокаЗаписи.Период) Тогда
					СтрокаЗаписи.Период = Выборка.Дата;						
				КонецЕсли;				
			КонецЦикла;					
			
			Попытка
				
				НаборЗаписей.ОбменДанными.Загрузка = Истина;
				НаборЗаписей.Записать();
				
			Исключение
				
				УдалосьЗаписатьВсеЗаписи = Ложь;
				
				Комментарий = НСтр("ru = 'При записи набора данных по регистратору ""%1"" произошла ошибка:
                                   |%2'");
				
				ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Комментарий, Выборка.Регистратор, ПодробноеПредставлениеОшибки);
				
				ЗаписьЖурналаРегистрации(ЗаголовокОшибки, УровеньЖурналаРегистрации.Ошибка, , , Комментарий);				
				ОбщегоНазначения.СообщитьПользователю(Комментарий);
				
			КонецПопытки;
			
		КонецЦикла;
		
		Если НЕ УдалосьЗаписатьВсеЗаписи Тогда
			ОбщегоНазначения.СообщитьПользователю(ЗаголовокОшибки);
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьДокументыГТДИмпорт() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ГТДИмпорт.Ссылка КАК Ссылка,
	|	ГТДИмпорт.УдалитьНомерГТД.Код КАК НомерГТД
	|ИЗ
	|	Документ.ГТДИмпорт КАК ГТДИмпорт
	|ГДЕ
	|	НЕ ГТДИмпорт.УдалитьНомерГТД В (&ПустойНомерГТД)
	|	И ГТДИмпорт.НомерГТД = &ПустаяСтрока";
	
	Запрос.УстановитьПараметр("ПустойНомерГТД", Справочники.НомераГТД.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустаяСтрока", "");
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДокументов = РезультатЗапроса.Выбрать();

	Пока ВыборкаДокументов.Следующий() Цикл
			
		ДокументОбъект = ВыборкаДокументов.Ссылка.ПолучитьОбъект();
		
		Если ЗначениеЗаполнено(ДокументОбъект.УдалитьНомерГТД) Тогда
			
			ДокументОбъект.НомерГТД = ДокументОбъект.УдалитьНомерГТД.Код;
			
			Для Каждого СтрокаТовары Из ДокументОбъект.Товары Цикл
				СтрокаТовары.НомерГТД = ДокументОбъект.УдалитьНомерГТД;
			КонецЦикла;
			
			Для Каждого СтрокаОС Из ДокументОбъект.ОС Цикл
				СтрокаОС.НомерГТД = ДокументОбъект.УдалитьНомерГТД;
			КонецЦикла;
			
		Иначе
			
			ДокументОбъект.НомерГТД = "";
			
		КонецЕсли;
		
		Попытка
			ДокументОбъект.ОбменДанными.Загрузка = Истина;
			ДокументОбъект.Записать();
		Исключение
			ТекстСообщения = НСтр("ru = 'при записи документа %1  произошла ошибка: %2'", ОбщегоНазначения.КодОсновногоЯзыка());
			ЗаписьЖурналаРегистрации(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстСообщения, ВыборкаДокументов.Ссылка, ОписаниеОшибки()),
			УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));			
		КонецПопытки;
			
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьНаименованиеСправочникНомераГТД() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НомераГТД.Ссылка
		|ИЗ
		|	Справочник.НомераГТД КАК НомераГТД
		|ГДЕ
		|	НомераГТД.Наименование = &ПустаяСтрока";
	
	Запрос.УстановитьПараметр("ПустаяСтрока", "");
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаЭлементов = РезультатЗапроса.Выбрать();

	Пока ВыборкаЭлементов.Следующий() Цикл
			
		СправочникОбъект = ВыборкаЭлементов.Ссылка.ПолучитьОбъект();
		ВариантыНаименованийНомераГТД = Справочники.НомераГТД.ВариантыНаименованийНомераГТД(СправочникОбъект);
		СправочникОбъект.Наименование = ВариантыНаименованийНомераГТД[ВариантыНаименованийНомераГТД.ВГраница()];
		
		Попытка
			СправочникОбъект.Записать();
		Исключение
			ТекстСообщения = НСтр("ru = 'при записи источника происхождения %1  произошла ошибка: %2'", ОбщегоНазначения.КодОсновногоЯзыка());
			ЗаписьЖурналаРегистрации(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстСообщения, ВыборкаЭлементов.Ссылка, ОписаниеОшибки()),
			УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));			
		КонецПопытки;
			
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьПользователямРолиДляРаботыСИнтернетПоддержкой() Экспорт
	
	МассивПользователейИБ = ПользователиИнформационнойБазы.ПолучитьПользователей();
	
	Для Каждого ПользовательИБ ИЗ МассивПользователейИБ Цикл
		
		Если ПользовательИБ.Роли.Содержит(Метаданные.Роли.УдалитьБухгалтер) Тогда
			
			ПользовательИБ.Роли.Добавить(Метаданные.Роли.БазовыеПраваИПП);
			ПользовательИБ.Роли.Добавить(Метаданные.Роли.ПодключениеИнтернетПоддержки);
			ПользовательИБ.Роли.Добавить(Метаданные.Роли.ЧтениеНовостей);
			
		КонецЕсли;
		
		Если ПользовательИБ.Роли.Содержит(Метаданные.Роли.УдалитьГлавныйБухгалтер) Тогда
			
			ПользовательИБ.Роли.Добавить(Метаданные.Роли.БазовыеПраваИПП);
			ПользовательИБ.Роли.Добавить(Метаданные.Роли.ИспользованиеМонитораПортала1СИТС);
			ПользовательИБ.Роли.Добавить(Метаданные.Роли.ПодключениеИнтернетПоддержки);
			ПользовательИБ.Роли.Добавить(Метаданные.Роли.ЧтениеНовостей);
			
		КонецЕсли;
		
		Если ПользовательИБ.Роли.Содержит(Метаданные.Роли.ЧтениеДанныхБухгалтерии) Тогда
			
			ПользовательИБ.Роли.Добавить(Метаданные.Роли.БазовыеПраваИПП);
			ПользовательИБ.Роли.Добавить(Метаданные.Роли.ЧтениеНовостей);
			
		КонецЕсли;
		
		ПользовательИБ.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСоответствиеСчетаБУ1422() Экспорт
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда // В подчиненных узлах РИБ не выполняется
		Возврат;
	КонецЕсли;

	СчетБУ = ПланыСчетов.Типовой.НДСНачисленныйПриПокупке;
	СчетНУ = ПланыСчетов.Налоговый.НДСНачисленныйПриПокупке;
		
	ОбъектСчетБУ = СчетБУ.ПолучитьОбъект();
	ОбъектСчетБУ.СчетНУ = СчетНУ;
	
	Попытка
		ОбъектСчетБУ.Записать();
	Исключение
		ТекстСообщения = НСтр("ru='Операция не выполнена'", ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;	

	УдаленныйСчетБУ = ПланыСчетов.Типовой.УдалитьНДСНачисленныйПриПокупке;
		
	ОбъектУдаленныйСчетБУ = УдаленныйСчетБУ.ПолучитьОбъект();
	ОбъектУдаленныйСчетБУ.ЗапретитьИспользоватьВПроводках = Истина;
	
	Попытка
		ОбъектУдаленныйСчетБУ.Записать();
	Исключение
		ТекстСообщения = НСтр("ru='Операция не выполнена'", ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;	

	УдаленныйСчетНУ = ПланыСчетов.Налоговый.УдалитьНДСНачисленныйПриПокупке;
		
	ОбъектУдаленныйСчетНУ = УдаленныйСчетНУ.ПолучитьОбъект();
	ОбъектУдаленныйСчетНУ.ЗапретитьИспользоватьВПроводках = Истина;
	
	Попытка
		ОбъектУдаленныйСчетНУ.Записать();
	Исключение
		ТекстСообщения = НСтр("ru='Операция не выполнена'", ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;	
	
КонецПроцедуры 

Процедура УстановитьПараметрыДляГруппыСчетовНДСБУ() Экспорт
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда // В подчиненных узлах РИБ не выполняется
		Возврат;
	КонецЕсли;

	СчетБУ = ПланыСчетов.Типовой.НалогНаДобавленнуюСтоимостьКВозмещению_;
	ОбъектСчетБУ = СчетБУ.ПолучитьОбъект();
	ОбъектСчетБУ.ЗапретитьИспользоватьВПроводках = Истина;		
	Попытка
		ОбъектСчетБУ.Записать();
	Исключение
		ТекстСообщения = НСтр("ru='Операция не выполнена'", ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
КонецПроцедуры 

Процедура УстановитьПараметрыДляГруппыСчетовНДСНУ() Экспорт
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда // В подчиненных узлах РИБ не выполняется
		Возврат;
	КонецЕсли;

	СчетНУ = ПланыСчетов.Налоговый.НалогНаДобавленнуюСтоимостьКВозмещению_;
	
	ОбъектСчетНУ = СчетНУ.ПолучитьОбъект();
	ОбъектСчетНУ.ЗапретитьИспользоватьВПроводках = Истина;		
	Попытка
		ОбъектСчетНУ.Записать();
	Исключение
		ТекстСообщения = НСтр("ru='Операция не выполнена'", ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;		
	
КонецПроцедуры 

Процедура ЗаменитьВнешнююОбработкуОбменЭСФНаВстроенную() Экспорт
	
	Попытка 
		
		Константы.ЭСФИспользоватьВнешнийМодульОбменаДанными.Установить(Ложь);
		
	Исключение
		
		ТекстСообщения = НСтр(
		"ru = 'Не удалось обновить значение константы ""%2"",
		|так как при обновлении произошла ошибка:
		|%1'");
		
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%2", Метаданные.Константы.ЭСФИспользоватьВнешнийМодульОбменаДанными.Представление());
		
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
								УровеньЖурналаРегистрации.Предупреждение,
								Метаданные.Константы.ЭСФИспользоватьВнешнийМодульОбменаДанными,
								ТекстСообщения,
								ТекстСообщения);
								
	КонецПопытки; 
	
КонецПроцедуры

Процедура УстановитьПараметрыДляГруппыСчетовКраткосрочныеВознагражденияБУ() Экспорт
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда // В подчиненных узлах РИБ не выполняется
		Возврат;
	КонецЕсли;

	СчетБУ = ПланыСчетов.Типовой.КраткосрочныеВознагражденияКПолучению_;
	ОбъектСчетБУ = СчетБУ.ПолучитьОбъект();
	ОбъектСчетБУ.ЗапретитьИспользоватьВПроводках = Истина;		
	Попытка
		ОбъектСчетБУ.Записать();
	Исключение
		ТекстСообщения = НСтр("ru='Операция не выполнена'", ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
КонецПроцедуры 

Процедура ПрименитьПараметрыСубконтоРаботникиОрганизацииДляКраткосрочныеВознагражденияБУ() Экспорт
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда // В подчиненных узлах РИБ не выполняется
		Возврат;
	КонецЕсли;

	ВестиУчетПоСотрудникам = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.НаСчетеВедетсяУчетПоРаботникамОрганизаций(ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПоОплатеТруда); // счет 3350
	
	// инициализация списка счетов, на которых можно устанавливать дополнительную аналитику "Работники организации"
	СчетаЗП = Новый СписокЗначений;
	СчетаЗП.Добавить(ПланыСчетов.Типовой.КраткосрочныеВознагражденияКПолучениюРаботникам); //1272
	
	Для каждого Счет Из СчетаЗП Цикл
		Если ТипЗнч(Счет.Значение) = Тип("ПланСчетовСсылка.Налоговый") Тогда
			ИмяПланаСчетов = "Налоговый";
		Иначе
			ИмяПланаСчетов = "Типовой";
		КонецЕсли;
		ПрименитьПараметрыСубконтоРаботникиОрганизации(Счет.Значение, ИмяПланаСчетов, ВестиУчетПоСотрудникам, Ложь);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСоответствиеСчетаБУ1272() Экспорт
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда // В подчиненных узлах РИБ не выполняется
		Возврат;
	КонецЕсли;

	СчетБУ = ПланыСчетов.Типовой.КраткосрочныеВознагражденияКПолучениюРаботникам;
	СчетНУ = ПланыСчетов.Налоговый.ПоступлениеИВыбытиеИмуществаработУслугПрав;
		
	ОбъектСчетБУ = СчетБУ.ПолучитьОбъект();
	ОбъектСчетБУ.СчетНУ = СчетНУ;
	
	Попытка
		ОбъектСчетБУ.Записать();
	Исключение
		ТекстСообщения = НСтр("ru='Операция не выполнена'", ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;	
	
КонецПроцедуры 

Процедура ОтключитьИспользованиеВнешнегоКлассификатораКодаТНВЭД() Экспорт
		
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ПользовательскиеМакетыПечати.Использование,
	|	ПользовательскиеМакетыПечати.ИмяМакета,
	|	ПользовательскиеМакетыПечати.Объект
	|ИЗ
	|	РегистрСведений.ПользовательскиеМакетыПечати КАК ПользовательскиеМакетыПечати
	|ГДЕ
	|	ПользовательскиеМакетыПечати.ИмяМакета = &ИмяМакета
	|	И ПользовательскиеМакетыПечати.Объект = &Объект
	|	И ПользовательскиеМакетыПечати.Использование = ИСТИНА";
	
	Запрос.УстановитьПараметр("ИмяМакета", "ПФ_MXL_КодыТНВЭД");
	Запрос.УстановитьПараметр("Объект",    "ОбщийМакет");

	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ВыборкаДанных = Результат.Выбрать();
	
	МенеджерЗаписи = РегистрыСведений.ПользовательскиеМакетыПечати.СоздатьМенеджерЗаписи();
	
	Пока ВыборкаДанных.Следующий() Цикл
		
		МенеджерЗаписи.ИмяМакета = ВыборкаДанных.ИмяМакета;
		МенеджерЗаписи.Объект 	 = ВыборкаДанных.Объект;  
		МенеджерЗаписи.Прочитать();   		
		МенеджерЗаписи.Использование = Ложь;
		
		Попытка
			МенеджерЗаписи.Записать();
		Исключение
			ТекстСообщения = НСтр("ru = 'при записи макета классификатора кода ТНВЭД регистра сведений ""%1"" произошла ошибка: %2'", ОбщегоНазначения.КодОсновногоЯзыка());
			ЗаписьЖурналаРегистрации(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстСообщения, Метаданные.РегистрыСведений.ПользовательскиеМакетыПечати.Представление(), ОписаниеОшибки()),
			УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));						
		КонецПопытки;	
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьСведенияОСтавкеРефинансированияНБ(Знач Период, Знач Размер)
	
	СтавкаНБ = РегистрыСведений.СтавкаРефинансированияНБ.СоздатьМенеджерЗаписи();
	
	СтавкаНБ.Период = Период;
	СтавкаНБ.Размер = Размер;
	
	Попытка
		СтавкаНБ.Записать();
	Исключение
		
		Комментарий = СтрШаблон(
			НСтр("ru = 'При записи данных в регистр ""%1"" произошла ошибка:%2'"),
			Метаданные.РегистрыСведений.СтавкаРефинансированияНБ.Представление(),
			Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Операция не выполнена'", ОбщегоНазначения.КодОсновногоЯзыка()), УровеньЖурналаРегистрации.Ошибка, , , Комментарий);
		
		ОбщегоНазначения.СообщитьПользователю(Комментарий);
		
	КонецПопытки
	
КонецПроцедуры

Процедура ДобавитьСведенияОСтавкеРефинансированияНБ20170401() Экспорт
	
	ДобавитьСведенияОСтавкеРефинансированияНБ('20170401', 11)
	
КонецПроцедуры

Процедура ДобавитьСведенияОСтавкеРефинансированияНБ20170606() Экспорт
	
	ДобавитьСведенияОСтавкеРефинансированияНБ('20170606', 10.5)
	
КонецПроцедуры

Процедура ДобавитьСведенияОСтавкеРефинансированияНБ20170822() Экспорт
	
	ДобавитьСведенияОСтавкеРефинансированияНБ('20170822', 10.25)
	
КонецПроцедуры

Процедура ДобавитьСведенияОСтавкеРефинансированияНБ20180116() Экспорт
	
	ДобавитьСведенияОСтавкеРефинансированияНБ('20180116', 9.75)
	
КонецПроцедуры

Процедура ДобавитьСведенияОСтавкеРефинансированияНБ20180306() Экспорт
	
	ДобавитьСведенияОСтавкеРефинансированияНБ('20180306', 9.5)
	
КонецПроцедуры

Процедура ДобавитьСведенияОСтавкеРефинансированияНБ20180605() Экспорт
	
	ДобавитьСведенияОСтавкеРефинансированияНБ('20180417', 9.25);
	
	ДобавитьСведенияОСтавкеРефинансированияНБ('20180605', 9)
	
КонецПроцедуры

Процедура ДобавитьСведенияОСтавкеРефинансированияНБ20181016() Экспорт
	
	ДобавитьСведенияОСтавкеРефинансированияНБ('20181016', 9.25)
	
КонецПроцедуры

Процедура ДобавитьСведенияОСтавкеРефинансированияНБ20190416() Экспорт
	
	ДобавитьСведенияОСтавкеРефинансированияНБ('20190416', 9)
	
КонецПроцедуры

Процедура ДобавитьСведенияОСтавкеРефинансированияНБ20190910() Экспорт
	
	ДобавитьСведенияОСтавкеРефинансированияНБ('20190910', 9.25)
	
КонецПроцедуры

Процедура ДобавитьСведенияОСтавкеРефинансированияНБ20200310_20200406() Экспорт
	
	ДобавитьСведенияОСтавкеРефинансированияНБ('20200310', 12);
	
	ДобавитьСведенияОСтавкеРефинансированияНБ('20200406', 9.5)
	
КонецПроцедуры

Процедура ДобавитьСведенияОСтавкеРефинансированияНБ20200721() Экспорт
	
	ДобавитьСведенияОСтавкеРефинансированияНБ('20200721', 9)
	
КонецПроцедуры

Процедура ДобавитьСведенияОСтавкеРефинансированияНБ20210914() Экспорт
	
	ДобавитьСведенияОСтавкеРефинансированияНБ('20210727', 9.25);
	
	ДобавитьСведенияОСтавкеРефинансированияНБ('20210914', 9.5)
	
КонецПроцедуры

Процедура ДобавитьСведенияОСтавкеРефинансированияНБ20211026() Экспорт
	
	ДобавитьСведенияОСтавкеРефинансированияНБ('20211026', 9.75)
	
КонецПроцедуры

Процедура ДобавитьСведенияОСтавкеРефинансированияНБ20220125() Экспорт
	
	ДобавитьСведенияОСтавкеРефинансированияНБ('20220125', 10.25)
	
КонецПроцедуры

Процедура ДобавитьСведенияОСтавкеРефинансированияНБ20220224() Экспорт
	
	ДобавитьСведенияОСтавкеРефинансированияНБ('20220224', 13.5)
	
КонецПроцедуры

Процедура ДобавитьСведенияОСтавкеРефинансированияНБ20220426() Экспорт
	
	ДобавитьСведенияОСтавкеРефинансированияНБ('20220426', 14)
	
КонецПроцедуры

Процедура ДобавитьСведенияОСтавкеРефинансированияНБ20220726() Экспорт
	
	ДобавитьСведенияОСтавкеРефинансированияНБ('20220726', 14.5)
	
КонецПроцедуры

Процедура ДобавитьСведенияОСтавкеРефинансированияНБ20221027() Экспорт
	
	ДобавитьСведенияОСтавкеРефинансированияНБ('20221027', 16)
	
КонецПроцедуры

Процедура ДобавитьСведенияОСтавкеРефинансированияНБ20221206() Экспорт
	
	ДобавитьСведенияОСтавкеРефинансированияНБ('20221206', 16.75)
	
КонецПроцедуры

Процедура ДобавитьСведенияОСтавкеРефинансированияНБ20230828() Экспорт
	
	ДобавитьСведенияОСтавкеРефинансированияНБ('20230828', 16.5)
	
КонецПроцедуры

Процедура ДобавитьСведенияОСтавкеРефинансированияНБ20231009() Экспорт
	
	ДобавитьСведенияОСтавкеРефинансированияНБ('20231009', 16)
	
КонецПроцедуры

Процедура ДобавитьСведенияОСтавкеРефинансированияНБ20231127() Экспорт
	
	ДобавитьСведенияОСтавкеРефинансированияНБ('20231127', 15.75)
	
КонецПроцедуры

Процедура ДобавитьСведенияОСтавкеРефинансированияНБ20240122() Экспорт
	
	ДобавитьСведенияОСтавкеРефинансированияНБ('20240122', 15.25)
	
КонецПроцедуры

Процедура ДобавитьСведенияОСтавкеРефинансированияНБ20240226() Экспорт
	
	ДобавитьСведенияОСтавкеРефинансированияНБ('20240226', 14.75)
	
КонецПроцедуры

Процедура ДобавитьСведенияОСтавкеРефинансированияНБ20240603() Экспорт
	
	ДобавитьСведенияОСтавкеРефинансированияНБ('20240603', 14.5)
	
КонецПроцедуры

Процедура ДобавитьСведенияОСтавкеРефинансированияНБ20240715() Экспорт
	
	ДобавитьСведенияОСтавкеРефинансированияНБ('20240715', 14.25);
	
КонецПроцедуры

Процедура ДобавитьСведенияОСтавкеРефинансированияНБ20241202() Экспорт
	
	ДобавитьСведенияОСтавкеРефинансированияНБ('20241202', 15.25);
	
КонецПроцедуры

Процедура ЗаполнитьНаименованиеПолноеВГруппахФАНУ() Экспорт
	
	// Заполнение полного наименования справочника ГруппыФАНУ
	// I группа
	НайтиЗаполнитьГруппуФАНУ("I", НСтр("ru = 'Здания, сооружения, за исключением нефтяных, газовых скважин и передаточных устройств'", ОбщегоНазначения.КодОсновногоЯзыка()));
	
	// II группа
	НайтиЗаполнитьГруппуФАНУ("II", НСтр("ru = 'Машины и оборудование, за исключением машин и оборудования нефтегазодобычи, а также компьютеров и оборудования для обработки информации'", ОбщегоНазначения.КодОсновногоЯзыка()));
	
	// III группа
	НайтиЗаполнитьГруппуФАНУ("III",Нстр("ru = 'Компьютеры, программное обеспечение и оборудование для обработки информации'", ОбщегоНазначения.КодОсновногоЯзыка()));
	
	// IV группа
	НайтиЗаполнитьГруппуФАНУ("IV", НСтр("ru = 'Фиксированные активы, не включенные в другие группы, в том числе нефтяные, газовые скважины, передаточные устройства, машины и оборудование нефтегазодобычи'", ОбщегоНазначения.КодОсновногоЯзыка()));
	
КонецПроцедуры

// Функция ищет элементы справочника
// "Группы налогового учета ФА" и заполняет полное наименование
Процедура НайтиЗаполнитьГруппуФАНУ(Код, НаименованиеПолное)
	
	Ссылка = Справочники.ГруппыНалоговогоУчетаФА.НайтиПоКоду(Код,Истина);
	
	Если НЕ Ссылка.Пустая() Тогда
		
		СправочникОбъект = Ссылка.ПолучитьОбъект();
		СправочникОбъект.НаименованиеПолное = НаименованиеПолное;
		
		Попытка
			СправочникОбъект.Записать();
		Исключение
			ТекстСообщения = НСтр("ru='При заполнении полного наименования в  %1  произошла ошибка: %2'", ОбщегоНазначения.КодОсновногоЯзыка());
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, СправочникОбъект, ОписаниеОшибки());
			ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры


Процедура ПеренестиСвойстваИКатегорииОбъектов() Экспорт
	
	// Перенос дополнительных сведений
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СвойстваОбъектов.Ссылка
	|ИЗ
	|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК СвойстваОбъектов";
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		// дополнительные реквизиты и сведения уже существуют
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НаборыДополнительныхРеквизитовИСведений.ИмяПредопределенныхДанных,
	|	НаборыДополнительныхРеквизитовИСведений.Ссылка
	|ИЗ
	|	Справочник.НаборыДополнительныхРеквизитовИСведений КАК НаборыДополнительныхРеквизитовИСведений
	|ГДЕ
	|	НаборыДополнительныхРеквизитовИСведений.Предопределенный = ИСТИНА";
	
	НаборыДополнительныхРеквизитовИСведений = Запрос.Выполнить().Выгрузить();
	НаборыДополнительныхРеквизитовИСведений.Индексы.Добавить("ИмяПредопределенныхДанных");
	
	СоответствиеТипов = Новый Соответствие;
	
	ТипыКатегорииСвойстваОбъектов = Метаданные.ПланыВидовХарактеристик.УдалитьСвойстваОбъектов.Тип.Типы();
	Для Каждого ТипКатегорииСвойства Из ТипыКатегорииСвойстваОбъектов Цикл
		СоответствиеТипов.Вставить(ТипКатегорииСвойства, ТипКатегорииСвойства);
	КонецЦикла;
	СправочникУдалитьЗначенияСвойствОбъектов = СоответствиеТипов.Получить(Тип("СправочникСсылка.УдалитьЗначенияСвойствОбъектов"));
	Если СправочникУдалитьЗначенияСвойствОбъектов <> Неопределено Тогда
		СоответствиеТипов.Вставить(Тип("СправочникСсылка.УдалитьЗначенияСвойствОбъектов"), Тип("СправочникСсылка.ЗначенияСвойствОбъектов"));
	КонецЕсли;

	// Перенос дополнительных сведений
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СвойстваОбъектов.Ссылка КАК Ссылка,
	|	ИСТИНА КАК ЭтоСвойство,
	|	СвойстваОбъектов.Наименование,
	|	СвойстваОбъектов.НазначениеСвойства
	|ПОМЕСТИТЬ КатегорииСвойства
	|ИЗ
	|	ПланВидовХарактеристик.УдалитьСвойстваОбъектов КАК СвойстваОбъектов
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	КатегорииОбъектов.Ссылка,
	|	ЛОЖЬ,
	|	КатегорииОбъектов.Наименование,
	|	КатегорииОбъектов.НазначениеКатегории
	|ИЗ
	|	Справочник.УдалитьКатегорииОбъектов КАК КатегорииОбъектов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КатегорииСвойства.Ссылка,
	|	ПВХ_СвойстваОбъектов.ТипЗначения КАК ТипЗначения,
	|	КатегорииСвойства.Наименование,
	|	КатегорииСвойства.НазначениеСвойства,
	|	КатегорииСвойства.ЭтоСвойство,
	|	ЕСТЬNULL(ПВХ_НазначенияСвойствКатегорийОбъектов.ИмяПредопределенныхДанных, """") КАК НазначениеСвойстваИмяПредопределенного,
	|	ПВХ_НазначенияСвойствКатегорийОбъектов.ТипЗначения КАК НазначениеСвойстваТипЗначения
	|ИЗ
	|	КатегорииСвойства КАК КатегорииСвойства
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.УдалитьСвойстваОбъектов КАК ПВХ_СвойстваОбъектов
	|		ПО КатегорииСвойства.Ссылка = ПВХ_СвойстваОбъектов.Ссылка
	|			И (КатегорииСвойства.ЭтоСвойство)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.УдалитьНазначенияСвойствКатегорийОбъектов КАК ПВХ_НазначенияСвойствКатегорийОбъектов
	|		ПО КатегорииСвойства.НазначениеСвойства = ПВХ_НазначенияСвойствКатегорийОбъектов.Ссылка";
	
	Запрос.УстановитьПараметр("ТипБулево", Новый ОписаниеТипов("Булево"));
	
	СоответствиеОбъектов = Новый Соответствие();
	СоответствиеЗначенийСвойствОбъектов = Новый Соответствие();
	
	НачатьТранзакцию();
	
	Попытка
		
		ТаблицаКатегорийСвойств = Запрос.Выполнить().Выгрузить(); // Свойства
		
		ТипБулево = Новый ОписаниеТипов("Булево");
		Для Каждого СтрокаКатегорииСвойства Из ТаблицаКатегорийСвойств Цикл
			Если НЕ СтрокаКатегорииСвойства.ЭтоСвойство Тогда
				СтрокаКатегорииСвойства.Установить(1, ТипБулево);
			КонецЕсли;
		КонецЦикла;
		
		ТипДополнительныеРеквизитыИСведения = Метаданные.ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.Тип;
		
		Для Каждого Выборка Из ТаблицаКатегорийСвойств Цикл
			// Создание нового дополнительного свойства
			МассивЗначенийТипов = Новый Массив;
			Для Каждого КлючИЗначение ИЗ СоответствиеТипов Цикл
				Если Выборка.ТипЗначения.СодержитТип(КлючИЗначение.Ключ) Тогда
					МассивЗначенийТипов.Добавить(КлючИЗначение.Значение);
				КонецЕсли;
			КонецЦикла;
			
			МассивТипов = Новый Массив;
			Для Каждого ЗначениеТипа Из МассивЗначенийТипов Цикл
				Если ТипДополнительныеРеквизитыИСведения.СодержитТип(ЗначениеТипа) Тогда
					МассивТипов.Добавить(ЗначениеТипа);
				КонецЕсли;
			КонецЦикла;
			
			Если МассивТипов.Количество() = 0 Тогда
				Если Выборка.ЭтоСвойство Тогда
					Комментарий = НСтр("ru = 'Для свойства ""%1"" не удалось сопоставить тип значения.'");
				Иначе
					Комментарий = НСтр("ru = 'Для категории ""%1"" не удалось сопоставить тип значения.'");
				КонецЕсли;
				Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Комментарий, Выборка.Наименование);
				ЗаписьЖурналаРегистрации(
					НСтр("ru = 'Обновление информационной базы. Перенос Категорий и Свойств'", ОбщегоНазначения.КодОсновногоЯзыка()), УровеньЖурналаРегистрации.Предупреждение, , , Комментарий);				
				Продолжить;
			КонецЕсли;
		
			ОбъектПВХ = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.СоздатьЭлемент();
			ОбъектПВХ.Заголовок    = Выборка.Наименование;
			ОбъектПВХ.Наименование = Выборка.Наименование;
			ОбъектПВХ.ТипЗначения  = Новый ОписаниеТипов(МассивТипов);
			ОбъектПВХ.ЭтоДополнительноеСведение = Истина;
		
			Если УправлениеСвойствамиСлужебный.ТипЗначенияСодержитЗначенияСвойств(ОбъектПВХ.ТипЗначения) Тогда
				ОбъектПВХ.ДополнительныеЗначенияИспользуются = Истина;
			Иначе
				ОбъектПВХ.ДополнительныеЗначенияИспользуются = Ложь;
			КонецЕсли;
			
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ОбъектПВХ);
			
			СоответствиеОбъектов.Вставить(Выборка.Ссылка, ОбъектПВХ.Ссылка);
			
			// Перенос элементов справочника ЗначенияСвойствОбъектов
			Если Выборка.ЭтоСвойство Тогда
				ВыборкаЗначенияСвойствОбъектов = Справочники.УдалитьЗначенияСвойствОбъектов.Выбрать(, Выборка.Ссылка);
				Пока ВыборкаЗначенияСвойствОбъектов.Следующий() Цикл
					НовыйЭлемент = Справочники.ЗначенияСвойствОбъектов.СоздатьЭлемент();
					НовыйЭлемент.Наименование = ВыборкаЗначенияСвойствОбъектов.Наименование;
					НовыйЭлемент.Владелец     = ОбъектПВХ.Ссылка;
					ОбновлениеИнформационнойБазы.ЗаписатьОбъект(НовыйЭлемент);
					СоответствиеЗначенийСвойствОбъектов.Вставить(ВыборкаЗначенияСвойствОбъектов.Ссылка, НовыйЭлемент.Ссылка);
				КонецЦикла;
			КонецЕсли;

			// Перенос значений свойства в другой регистр
			Запрос = Новый Запрос;
			Запрос.Текст =
			"ВЫБРАТЬ
			|	&СвойствоПосле КАК Свойство,
			|	ВЫБОР
			|		КОГДА ТИПЗНАЧЕНИЯ(ЗначенияСвойствОбъектов.Значение) = ТИП(Справочник.УдалитьЗначенияСвойствОбъектов)
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК ЭтоЗначениеСвойствОбъектов,
			|	ЗначенияСвойствОбъектов.Значение КАК ЗначениеСтарое,
			|	ЗначенияСвойствОбъектов.Объект,
			|	ВЫБОР
			|		КОГДА ЗначенияСвойствОбъектов.Объект ССЫЛКА Справочник.ПодразделенияОрганизаций
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЕСТЬNULL(ЗначенияСвойствОбъектов.Объект.ЭтоГруппа, ЛОЖЬ)
			|	КОНЕЦ КАК ЭтоГруппа
			|ИЗ
			|	РегистрСведений.УдалитьЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
			|ГДЕ
			|	ЗначенияСвойствОбъектов.Свойство = &СвойствоДо
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ
			|	&СвойствоПосле,
			|	ЛОЖЬ,
			|	ИСТИНА,
			|	КатегорииОбъектов.Объект,
			|	ЕСТЬNULL(КатегорииОбъектов.Объект.ЭтоГруппа, ЛОЖЬ)
			|ИЗ
			|	РегистрСведений.УдалитьКатегорииОбъектов КАК КатегорииОбъектов
			|ГДЕ
			|	КатегорииОбъектов.Категория = &СвойствоДо";
			
			Запрос.УстановитьПараметр("СвойствоДо"   , Выборка.Ссылка);
			Запрос.УстановитьПараметр("СвойствоПосле", ОбъектПВХ.Ссылка);
			ТаблицаЗначенийДопСведений = Запрос.Выполнить().Выгрузить();
			
			Если ТаблицаЗначенийДопСведений.Количество() = 0 И ЗначениеЗаполнено(Выборка.НазначениеСвойстваИмяПредопределенного) Тогда
				Если СтрНайти(Выборка.НазначениеСвойстваИмяПредопределенного, "Справочник_", НаправлениеПоиска.СНачала) > 0 Тогда
					ТипОбъектаНазначения = Выборка.НазначениеСвойстваТипЗначения.Типы()[0];
					МетаданныеТипаНазначения = Метаданные.НайтиПоТипу(ТипОбъектаНазначения);
					Если Метаданные.Справочники.Содержит(МетаданныеТипаНазначения) Тогда
						НоваяСтрокаДопСведений = ТаблицаЗначенийДопСведений.Добавить();
						НоваяСтрокаДопСведений.Свойство = ОбъектПВХ.Ссылка;
						НоваяСтрокаДопСведений.Объект   = Справочники[МетаданныеТипаНазначения.Имя].ПустаяСсылка();
						НоваяСтрокаДопСведений.ЭтоГруппа = Ложь;
						НоваяСтрокаДопСведений.ЭтоЗначениеСвойствОбъектов = Выборка.ТипЗначения.СодержитТип(Тип("СправочникСсылка.УдалитьЗначенияСвойствОбъектов"));
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			ОтборГрупп = Новый Структура();
			ОтборГрупп.Вставить("ЭтоГруппа", Истина);
			СтрокиГрупп = ТаблицаЗначенийДопСведений.НайтиСтроки(ОтборГрупп);
			
			Если СтрокиГрупп.Количество() <> 0 Тогда
					
				ЗапросГрупп  = Новый Запрос;
				НомерЗапроса = 0;
				ТекстЗапросаГрупп = "";
				
				Для Каждого СтрокаГруппы Из СтрокиГрупп Цикл
					
					НомерЗапроса = 1;
					
					ЗапросГрупп.УстановитьПараметр("Свойство" + НомерЗапроса, СтрокаГруппы.Свойство);
					ЗапросГрупп.УстановитьПараметр("ГруппаОтбора" + НомерЗапроса, СтрокаГруппы.Объект);
					ЗапросГрупп.УстановитьПараметр("ЗначениеСтарое" + НомерЗапроса, СтрокаГруппы.ЗначениеСтарое);
					ЗапросГрупп.УстановитьПараметр("ЭтоЗначениеСвойствОбъектов" + НомерЗапроса, СтрокаГруппы.ЭтоЗначениеСвойствОбъектов);
					
					СвойстваИКатегорииСформироватьТекстЗапросаПоЭлементамГрупп(ТекстЗапросаГрупп, НомерЗапроса);
					
				КонецЦикла;
				
				Для Каждого СтрокаГруппы Из СтрокиГрупп Цикл
					ТаблицаЗначенийДопСведений.Удалить(СтрокаГруппы);
				КонецЦикла;
				
				ЗапросГрупп.Текст = ТекстЗапросаГрупп;
				
				ВыборкаЭлементовГрупп = ЗапросГрупп.Выполнить().Выбрать();
				Пока ВыборкаЭлементовГрупп.Следующий() Цикл
					
					ОтборОбъекта = Новый Структура();
					ОтборОбъекта.Вставить("Объект", ВыборкаЭлементовГрупп.Объект);
					СтрокиОбъекта = ТаблицаЗначенийДопСведений.НайтиСтроки(ОтборОбъекта);
					
					Если СтрокиОбъекта.Количество() <> 0 Тогда
						ТаблицаСтрокОбъекта = ТаблицаЗначенийДопСведений.Скопировать(СтрокиОбъекта);
						СтрокаСвойства = ТаблицаСтрокОбъекта.Найти(ВыборкаЭлементовГрупп.Свойство, "Свойство");
						Если СтрокаСвойства <> Неопределено Тогда
							Продолжить;
						КонецЕсли;
					КонецЕсли;
					
					НоваяСтрокаДопСведений = ТаблицаЗначенийДопСведений.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаДопСведений, ВыборкаЭлементовГрупп);
					
				КонецЦикла;
				
			КонецЕсли;
			
			СоответствияТиповИНаборов = Новый Соответствие();
			НаборЗаписей = РегистрыСведений.ДополнительныеСведения.СоздатьНаборЗаписей();
			Для Каждого СтрокаЗначения Из ТаблицаЗначенийДопСведений Цикл
				
				ТипЗначенияОбъекта = ТипЗнч(СтрокаЗначения.Объект);
				НаборДополнительныхРеквизитовИСведений = СоответствияТиповИНаборов.Получить(ТипЗначенияОбъекта);
				Если НаборДополнительныхРеквизитовИСведений = Неопределено Тогда
					
					МетаданныеТипа = Метаданные.НайтиПоТипу(ТипЗначенияОбъекта);
					Если Метаданные.Справочники.Содержит(МетаданныеТипа) Тогда
						Набор = НаборыДополнительныхРеквизитовИСведений.Найти("Справочник_" + МетаданныеТипа.Имя, "ИмяПредопределенныхДанных");
					ИначеЕсли Метаданные.Документы.Содержит(МетаданныеТипа) Тогда
						Набор = НаборыДополнительныхРеквизитовИСведений.Найти("Документ_" + МетаданныеТипа.Имя, "ИмяПредопределенныхДанных");
					Иначе
						Набор = Неопределено;
					КонецЕсли;
					
					НаборДополнительныхРеквизитовИСведений = ?(Набор <> Неопределено, Набор.Ссылка, Справочники.НаборыДополнительныхРеквизитовИСведений.ПустаяСсылка());
					СоответствияТиповИНаборов.Вставить(ТипЗначенияОбъекта, НаборДополнительныхРеквизитовИСведений);
					
				КонецЕсли;
				
				Если ЗначениеЗаполнено(НаборДополнительныхРеквизитовИСведений) И ЗначениеЗаполнено(СтрокаЗначения.Объект) Тогда
					Запись = НаборЗаписей.Добавить();
					ЗаполнитьЗначенияСвойств(Запись, СтрокаЗначения);
					Если СтрокаЗначения.ЭтоЗначениеСвойствОбъектов Тогда
						Запись.Значение = СоответствиеЗначенийСвойствОбъектов.Получить(СтрокаЗначения.ЗначениеСтарое);
					Иначе
						Запись.Значение = СтрокаЗначения.ЗначениеСтарое;
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
			НаборЗаписей.ОбменДанными.Загрузка = Истина;
			НаборЗаписей.Записать(Ложь);
			
			// Обновление наборов свойства
			Для Каждого СоответствиеТипаИНабора Из СоответствияТиповИНаборов Цикл
				Если ЗначениеЗаполнено(СоответствиеТипаИНабора.Значение) Тогда
					ОбщиеСвойства = СоответствиеТипаИНабора.Значение.ПолучитьОбъект();
					СвойствоНайдено = Ложь;
					Для Каждого ОбщееСвойство Из ОбщиеСвойства.ДополнительныеСведения Цикл
						Если ОбщееСвойство.Свойство = ОбъектПВХ.Ссылка Тогда
							СвойствоНайдено = Истина;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					Если НЕ СвойствоНайдено Тогда
						ОбщиеСвойства.КоличествоСведений = Строка(Число("0" + ОбщиеСвойства.КоличествоСведений) + 1);
						НовоеСвойство = ОбщиеСвойства.ДополнительныеСведения.Добавить();
						НовоеСвойство.Свойство = ОбъектПВХ.Ссылка;
						ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ОбщиеСвойства);
					КонецЕсли;
					
				КонецЕсли;
			КонецЦикла;
			
		КонецЦикла;
		
		ЗапросНаборы = Новый Запрос();
		ЗапросНаборы.Текст =
		"ВЫБРАТЬ
		|	НаборыДополнительныхРеквизитовИСведенийДополнительныеСведения.Свойство КАК Свойство,
		|	НаборыДополнительныхРеквизитовИСведенийДополнительныеСведения.Ссылка КАК НаборСвойств,
		|	1 КАК Количество
		|ИЗ
		|	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеСведения КАК НаборыДополнительныхРеквизитовИСведенийДополнительныеСведения
		|ИТОГИ
		|	СУММА(Количество)
		|ПО
		|	Свойство";
		ВыборкаНаборы = ЗапросНаборы.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаНаборы.Следующий() Цикл
			Если ЗначениеЗаполнено(ВыборкаНаборы.Свойство) Тогда
				Если ВыборкаНаборы.Количество = 1 Тогда
					ВыборкаСвойство = ВыборкаНаборы.Выбрать();
					Если ВыборкаСвойство.Следующий() Тогда
						Свойство = ВыборкаСвойство.Свойство.ПолучитьОбъект();
						Свойство.НаборСвойств = ВыборкаСвойство.НаборСвойств;
						ОбновлениеИнформационнойБазы.ЗаписатьОбъект(Свойство);
					КонецЕсли;
				Иначе
					Свойство = ВыборкаНаборы.Свойство.ПолучитьОбъект();
					Свойство.НаборСвойств = Справочники.НаборыДополнительныхРеквизитовИСведений.ПустаяСсылка();
					ОбновлениеИнформационнойБазы.ЗаписатьОбъект(Свойство);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Запрос = Новый Запрос();
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	НаборыДополнительныхРеквизитовИСведений.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.НаборыДополнительныхРеквизитовИСведений КАК НаборыДополнительныхРеквизитовИСведений
		|ГДЕ
		|	НаборыДополнительныхРеквизитовИСведений.КоличествоРеквизитов <> """"
		|	ИЛИ НаборыДополнительныхРеквизитовИСведений.КоличествоСведений <> """"";
		
		НаборыДополнительныхРеквизитовИСведений = Запрос.Выполнить();
		Если НЕ НаборыДополнительныхРеквизитовИСведений.Пустой() Тогда
			Константы.ИспользоватьДополнительныеРеквизитыИСведения.Установить(Истина);
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;

КонецПроцедуры

Процедура СвойстваИКатегорииСформироватьТекстЗапросаПоЭлементамГрупп(ТекстЗапросаГрупп, НомерЗапроса)

	Если НЕ ПустаяСтрока(ТекстЗапросаГрупп) Тогда
		ТекстЗапросаГрупп = ТекстЗапросаГрупп + Символы.ПС + " ОБЪЕДИНИТЬ " + Символы.ПС;
	КонецЕсли;
	
	ТекстЗапросаГрупп = ТекстЗапросаГрупп +
	"ВЫБРАТЬ
	|	&Свойство" + НомерЗапроса + " КАК Свойство,
	|	&ЭтоЗначениеСвойствОбъектов" + НомерЗапроса + " КАК ЭтоЗначениеСвойствОбъектов,
	|	&ЗначениеСтарое" + НомерЗапроса + " КАК ЗначениеСтарое,
	|	ДоговорыКонтрагентов.Ссылка КАК Объект,
	|	ЛОЖЬ КАК ЭтоГруппа
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	НЕ ДоговорыКонтрагентов.ЭтоГруппа
	|	И ДоговорыКонтрагентов.Ссылка В ИЕРАРХИИ(&ГруппаОтбора" + НомерЗапроса + ")
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	&Свойство" + НомерЗапроса + ",
	|	&ЭтоЗначениеСвойствОбъектов" + НомерЗапроса + ",
	|	&ЗначениеСтарое" + НомерЗапроса + ",
	|	Контрагенты.Ссылка,
	|	ЛОЖЬ
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	НЕ Контрагенты.ЭтоГруппа
	|	И Контрагенты.Ссылка В ИЕРАРХИИ(&ГруппаОтбора" + НомерЗапроса + ")
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	&Свойство" + НомерЗапроса + ",
	|	&ЭтоЗначениеСвойствОбъектов" + НомерЗапроса + ",
	|	&ЗначениеСтарое" + НомерЗапроса + ",
	|	Номенклатура.Ссылка,
	|	ЛОЖЬ
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	НЕ Номенклатура.ЭтоГруппа
	|	И Номенклатура.Ссылка В ИЕРАРХИИ(&ГруппаОтбора" + НомерЗапроса + ")	
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	&Свойство" + НомерЗапроса + ",
	|	&ЭтоЗначениеСвойствОбъектов" + НомерЗапроса + ",
	|	&ЗначениеСтарое" + НомерЗапроса + ",
	|	НоменклатурныеГруппы.Ссылка,
	|	ЛОЖЬ
	|ИЗ
	|	Справочник.НоменклатурныеГруппы КАК НоменклатурныеГруппы
	|ГДЕ
	|	НЕ НоменклатурныеГруппы.ЭтоГруппа
	|	И НоменклатурныеГруппы.Ссылка В ИЕРАРХИИ(&ГруппаОтбора" + НомерЗапроса + ")	
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	&Свойство" + НомерЗапроса + ",
	|	&ЭтоЗначениеСвойствОбъектов" + НомерЗапроса + ",
	|	&ЗначениеСтарое" + НомерЗапроса + ",
	|	ОсновныеСредства.Ссылка,
	|	ЛОЖЬ
	|ИЗ
	|	Справочник.ОсновныеСредства КАК ОсновныеСредства
	|ГДЕ
	|	НЕ ОсновныеСредства.ЭтоГруппа
	|	И ОсновныеСредства.Ссылка В ИЕРАРХИИ(&ГруппаОтбора" + НомерЗапроса + ")	
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	&Свойство" + НомерЗапроса + ",
	|	&ЭтоЗначениеСвойствОбъектов" + НомерЗапроса + ",
	|	&ЗначениеСтарое" + НомерЗапроса + ",
	|	ПодразделенияОрганизаций.Ссылка,
	|	ЛОЖЬ
	|ИЗ
	|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
	|ГДЕ
	|	ПодразделенияОрганизаций.Ссылка В ИЕРАРХИИ(&ГруппаОтбора" + НомерЗапроса + ")	
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	&Свойство" + НомерЗапроса + ",
	|	&ЭтоЗначениеСвойствОбъектов" + НомерЗапроса + ",
	|	&ЗначениеСтарое" + НомерЗапроса + ",
	|	Склады.Ссылка,
	|	ЛОЖЬ
	|ИЗ
	|	Справочник.Склады КАК Склады
	|ГДЕ
	|	НЕ Склады.ЭтоГруппа
	|	И Склады.Ссылка В ИЕРАРХИИ(&ГруппаОтбора" + НомерЗапроса + ")	
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	&Свойство" + НомерЗапроса + ",
	|	&ЭтоЗначениеСвойствОбъектов" + НомерЗапроса + ",
	|	&ЗначениеСтарое" + НомерЗапроса + ",
	|	СотрудникиОрганизаций.Ссылка,
	|	ЛОЖЬ
	|ИЗ
	|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
	|ГДЕ
	|	НЕ СотрудникиОрганизаций.ЭтоГруппа
	|	И СотрудникиОрганизаций.Ссылка В ИЕРАРХИИ(&ГруппаОтбора" + НомерЗапроса + ")	
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	&Свойство" + НомерЗапроса + ",
	|	&ЭтоЗначениеСвойствОбъектов" + НомерЗапроса + ",
	|	&ЗначениеСтарое" + НомерЗапроса + ",
	|	СтатьиЗатрат.Ссылка,
	|	ЛОЖЬ
	|ИЗ
	|	Справочник.СтатьиЗатрат КАК СтатьиЗатрат
	|ГДЕ
	|	НЕ СтатьиЗатрат.ЭтоГруппа
	|	И СтатьиЗатрат.Ссылка В ИЕРАРХИИ(&ГруппаОтбора" + НомерЗапроса + ")	
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	&Свойство" + НомерЗапроса + ",
	|	&ЭтоЗначениеСвойствОбъектов" + НомерЗапроса + ",
	|	&ЗначениеСтарое" + НомерЗапроса + ",
	|	ФизическиеЛица.Ссылка,
	|	ЛОЖЬ
	|ИЗ
	|	Справочник.ФизическиеЛица КАК ФизическиеЛица
	|ГДЕ
	|	НЕ ФизическиеЛица.ЭтоГруппа
	|	И ФизическиеЛица.Ссылка В ИЕРАРХИИ(&ГруппаОтбора" + НомерЗапроса + ")";
	
КонецПроцедуры

Процедура ПереносПризводственногоРеглКалендаряВКалендарныеГрафики() Экспорт
	
	//добавим элемент календаря, если его нет
	КалендарныеГрафики.ОбновитьПроизводственныеКалендари();
	
	//перенесем накопленные данные 
	Запрос =  Новый Запрос;
	Запрос.Текст  =  "ВЫБРАТЬ
	                 |	РегламентированныйПроизводственныйКалендарь.ДатаКалендаря КАК Дата,
	                 |	РегламентированныйПроизводственныйКалендарь.Год КАК Год,
	                 |	РегламентированныйПроизводственныйКалендарь.ВидДня КАК ВидДня
	                 |ИЗ
	                 |	РегистрСведений.УдалитьРегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
	                 |
	                 |УПОРЯДОЧИТЬ ПО
	                 |	Год,
	                 |	Дата" ;
					 
					 
	ТаблицаДанных = Запрос.Выполнить().Выгрузить();
	Если ТаблицаДанных.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПроизводственныйКалендарь = КалендарныеГрафики.ПроизводственныйКалендарьРеспубликиКазахстан();
	СоответствиеЭлементов = Новый Соответствие; 
	СоответствиеЭлементов.Вставить(Перечисления.УдалитьВидыДнейПроизводственногоКалендаря.Воскресенье, Перечисления.ВидыДнейПроизводственногоКалендаря.Воскресенье);
	СоответствиеЭлементов.Вставить(Перечисления.УдалитьВидыДнейПроизводственногоКалендаря.ДополнительныйВыходной, Перечисления.ВидыДнейПроизводственногоКалендаря.ДополнительныйВыходной);
	СоответствиеЭлементов.Вставить(Перечисления.УдалитьВидыДнейПроизводственногоКалендаря.Праздник, Перечисления.ВидыДнейПроизводственногоКалендаря.Праздник);
	СоответствиеЭлементов.Вставить(Перечисления.УдалитьВидыДнейПроизводственногоКалендаря.Рабочий, Перечисления.ВидыДнейПроизводственногоКалендаря.Рабочий);
	СоответствиеЭлементов.Вставить(Перечисления.УдалитьВидыДнейПроизводственногоКалендаря.Суббота, Перечисления.ВидыДнейПроизводственногоКалендаря.Суббота);
	
	НаборЗаписей = РегистрыСведений.ДанныеПроизводственногоКалендаря.СоздатьНаборЗаписей();
	Для Каждого СтрокаКалендаря Из ТаблицаДанных Цикл
		НоваяСтрокаРегистра = НаборЗаписей.Добавить();
		НоваяСтрокаРегистра.Дата = СтрокаКалендаря.Дата; 
		НоваяСтрокаРегистра.Год  = СтрокаКалендаря.Год; 
		НоваяСтрокаРегистра.ПроизводственныйКалендарь = ПроизводственныйКалендарь;
		ВидДня = СоответствиеЭлементов.Получить(СтрокаКалендаря.ВидДня);
		//Если вид дня был добавлен пользователем самостоятельно в значение перечисления "Виды дней производственного календаря" (в режиме Конфигуратор)
		//, то поставим вид дня= рабочий
		Если ВидДня = Неопределено Тогда
			ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Рабочий;
			
			Комментарий = НСтр("ru = 'Вид дня %1 не найден в перечислении ""%2"".
			|Вид дня установлен в значение ""%3""'");
			
			Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Комментарий,
				СтрокаКалендаря.ВидДня,
				Метаданные.Перечисления.ВидыДнейПроизводственногоКалендаря.Представление(),
				ВидДня);
			
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение, , , Комментарий);				
			ОбщегоНазначения.СообщитьПользователю(Комментарий);		
		КонецЕсли;
		НоваяСтрокаРегистра.ВидДня = ВидДня;
				
	КонецЦикла;
	
	Попытка
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.Записать();
	Исключение
		
		Комментарий = НСтр("ru = 'При записи набора данных регистра ""%1"" произошла ошибка:
		|%2'");
		
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Комментарий,
			Метаданные.РегистрыСведений.ДанныеПроизводственногоКалендаря.Представление(),
			ПодробноеПредставлениеОшибки);
		
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка, , , Комментарий);				
		ОбщегоНазначения.СообщитьПользователю(Комментарий);		
		
	КонецПопытки;  
		
	
КонецПроцедуры

Процедура ДобавитьПользователямРолиДляРаботыСПроизводственнымиКалендарями() Экспорт
	
	МассивПользователейИБ = ПользователиИнформационнойБазы.ПолучитьПользователей();
	
	Для Каждого ПользовательИБ ИЗ МассивПользователейИБ Цикл
		
		Если ПользовательИБ.Роли.Содержит(Метаданные.Роли.УдалитьБухгалтер) Тогда
			
			ПользовательИБ.Роли.Добавить(Метаданные.Роли.УдалитьБухгалтер);
			
		КонецЕсли;
		
		Попытка
			ПользовательИБ.Записать();
		Исключение
						
			Комментарий = НСтр("ru = 'При записи пользователя ""%1"" произошла ошибка:
			|%2'");
			
			ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Комментарий, ПользовательИБ.Имя, ПодробноеПредставлениеОшибки);
			
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка, , , Комментарий);				
			ОбщегоНазначения.СообщитьПользователю(Комментарий);
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

//Процедуры при обновлении в связи с добавлением "Регситрации НДС за нерезидента"
Процедура ЗаполнитьВидОперацииПоступленияНМА() Экспорт
	Запрос 			= Новый Запрос;
	Запрос.Текст 	= "ВЫБРАТЬ
	|	ПоступлениеНМА.Ссылка КАК ДокументПоступлениеНМА
	|ИЗ
	|	Документ.ПоступлениеНМА КАК ПоступлениеНМА
	|ГДЕ
	|	ПоступлениеНМА.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеНМА.ПустаяСсылка)";
	ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
	Пока ВыборкаЗапроса.Следующий() Цикл
		ДокументПоступлениеНМА = ВыборкаЗапроса.ДокументПоступлениеНМА.ПолучитьОбъект();
		ДокументПоступлениеНМА.ВидОперации = Перечисления.ВидыОперацийПоступлениеНМА.Покупка;
		Попытка
			ДокументПоступлениеНМА.ОбменДанными.Загрузка = Истина;
			ДокументПоступлениеНМА.Записать(РежимЗаписиДокумента.Запись);
		Исключение
			ТекстСообщения = НСтр("ru='при записи документа %1  произошла ошибка: %2'", ОбщегоНазначения.КодОсновногоЯзыка());
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ДокументПоступлениеНМА, ОписаниеОшибки());
			ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;	
	КонецЦикла;	
	
КонецПроцедуры 

Процедура ЗаполнитьРеквизитыНалогНаДобавленнуюСтоимостьЗаНерезидента() Экспорт
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда // В подчиненных узлах РИБ не выполняется
		Возврат;
	КонецЕсли;

	НалогиСборыОтчисленияОбъект 									= Справочники.НалогиСборыОтчисления.НалогНаДобавленнуюСтоимостьЗаНерезидента.ПолучитьОбъект();
	НалогиСборыОтчисленияОбъект.КодБК                               = "105104";
	НалогиСборыОтчисленияОбъект.КодНазначенияПлатежа                = "911";
	НалогиСборыОтчисленияОбъект.НазначениеПлатежа                   = "Налог на добавленную стоимость за нерезидента";
	НалогиСборыОтчисленияОбъект.СчетУчетаРасчетовСКонтрагентомБУ    = ПланыСчетов.Типовой.НалогНаДобавленнуюСтоимость;
	НалогиСборыОтчисленияОбъект.СчетУчетаРасчетовСКонтрагентомНУ    = ПланыСчетов.Налоговый.НалогНаДобавленнуюСтоимость;
	НалогиСборыОтчисленияОбъект.ОбменДанными.Загрузка 				= Истина;
	Попытка
		НалогиСборыОтчисленияОбъект.Записать();
	Исключение
		ТекстСообщения = НСтр("ru='при записи элемента справочника %1 произошла ошибка: %2'", ОбщегоНазначения.КодОсновногоЯзыка());
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, НалогиСборыОтчисленияОбъект, ОписаниеОшибки());
		ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
КонецПроцедуры	

Процедура ЗаполнитьСоответствиеСчетаБУ1423() Экспорт
		
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда // В подчиненных узлах РИБ не выполняется
		Возврат;
	КонецЕсли;

	СчетБУ = ПланыСчетов.Типовой.НДСУплачиваемыйНалоговымАгентом;
	СчетНУ = ПланыСчетов.Налоговый.НДСУплачиваемыйНалоговымАгентом;
		
	ОбъектСчетБУ = СчетБУ.ПолучитьОбъект();
	ОбъектСчетБУ.СчетНУ = СчетНУ;
	
	Попытка
		ОбъектСчетБУ.Записать();
	Исключение
		ТекстСообщения = НСтр("ru='Операция не выполнена'");
		ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;	
	
КонецПроцедуры

Процедура ОбновитьКодыПланаВидовХарактеристик() Экспорт
	
	УстановитьНовыеКодыНеПредопределеннымЭлементамПВХ("ВидыСубконтоТиповые");	
	
КонецПроцедуры 

Процедура ОбновитьКодыСправочников() Экспорт
	
	УстановитьНовыеКодыНеПредопределеннымЭлементамСправочника("ВидыПоступления");	
	УстановитьНовыеКодыНеПредопределеннымЭлементамСправочника("НалогиСборыОтчисления");	
	
КонецПроцедуры 

// Процедура изменяет ставшие неуникальными коды непредопределенных элементов
//
Процедура УстановитьНовыеКодыНеПредопределеннымЭлементамПВХ(ИмяПВХ)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Пользовательские.Ссылка,
	|	Представление(Пользовательские.Ссылка) КАК ПредставлениеЭлемента
	|ИЗ
	|	ПланВидовХарактеристик." + ИмяПВХ + " КАК Предопределенные
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовХарактеристик." + ИмяПВХ + " КАК Пользовательские
	|		ПО Предопределенные.Код = Пользовательские.Код
	|
	|ГДЕ
	|	Предопределенные.Предопределенный И
	|   Не Пользовательские.Предопределенный";
	
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		Объект.УстановитьНовыйКод();
		Объект.ОбменДанными.Загрузка = Истина;
		Попытка
			Объект.Записать();
		Исключение
			ТекстСообщения = НСтр("ru='при записи элемента плана видов характеристик %1  произошла ошибка: %2'", ОбщегоНазначения.КодОсновногоЯзыка());
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Объект, ОписаниеОшибки());
			ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
	КонецЦикла;	 
	
КонецПроцедуры

Процедура СкорректироватьДвиженияРазовыеУдержания() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РегистрацияРазовыхУдержанийРаботниковОрганизаций.Ссылка,
		|	РегистрацияРазовыхУдержанийРаботниковОрганизаций.Представление
		|ИЗ
		|	Документ.РегистрацияРазовыхУдержанийРаботниковОрганизаций КАК РегистрацияРазовыхУдержанийРаботниковОрганизаций
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
		|		ПО РегистрацияРазовыхУдержанийРаботниковОрганизаций.Организация = Организации.Ссылка
		|ГДЕ
		|	РегистрацияРазовыхУдержанийРаботниковОрганизаций.Организация <> Организации.ГоловнаяОрганизация
		|	И РегистрацияРазовыхУдержанийРаботниковОрганизаций.Проведен
		|	И НЕ РегистрацияРазовыхУдержанийРаботниковОрганизаций.РучнаяКорректировка
		|
		|УПОРЯДОЧИТЬ ПО
		|	РегистрацияРазовыхУдержанийРаботниковОрганизаций.Дата";
		
		
	Выборка = Запрос.Выполнить().Выбрать();
	
	НаборЗаписей = РегистрыНакопления.ВзаиморасчетыСРаботникамиОрганизаций.СоздатьНаборЗаписей();
	
	Пока Выборка.Следующий() Цикл
		НаборЗаписей.Отбор.Регистратор.Значение = Выборка.Ссылка;
		НаборЗаписей.Прочитать();
		НаборЗаписей.Очистить();
		Отказ = Ложь;
		ПараметрыПроведения = Документы.РегистрацияРазовыхУдержанийРаботниковОрганизаций.ПодготовитьПараметрыПроведения(Выборка.Ссылка, Отказ);

		// Взаиморасчеты с работниками
		ТаблицаВзаиморасчетыСРаботниками = РасчетЗарплатыСервер.ПодготовитьТаблицуВзаиморасчеты(ПараметрыПроведения.Реквизиты[0],
																						ПараметрыПроведения.Удержания,
																						НаборЗаписей.ВыгрузитьКолонки(),
																						ВидДвиженияНакопления.Приход,
																						Отказ);
		НаборЗаписей.Загрузить(ТаблицаВзаиморасчетыСРаботниками);
		Попытка
			НаборЗаписей.ОбменДанными.Загрузка = Истина;
			НаборЗаписей.Записать(Истина);
		Исключение
			ТекстСообщения = НСтр("ru='При записи движений документа %1  произошла ошибка: %2'",  ОбщегоНазначения.КодОсновногоЯзыка());
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Выборка.Представление, ОписаниеОшибки());
			ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;		
	КонецЦикла;     
	
КонецПроцедуры

Процедура ИзменитьОбъектыСвойствВУзлеРИБ() Экспорт
	
	Если ПланыОбмена.ГлавныйУзел() = Неопределено Тогда // Выполняется в подчиненных узлах РИБ
		Возврат;
	КонецЕсли;
	
	Справочники.НаборыДополнительныхРеквизитовИСведений.УстановитьОбновлениеПредопределенныхДанных(ОбновлениеПредопределенныхДанных.Авто);
	
КонецПроцедуры

Процедура ВыполнитьНастройкиПоСоциальномуМедицинскомуСтрахованию() Экспорт
	
	ЗаполнитьНалогиСборыОтчисленияОСМС();
	РегистрыСведений.СведенияОСтавкахОСМС.ЗаполнитьСведенияОСтавкахОСМС();
	ЗаполнитьНастройкиОСМСДляНачислений();
	ЗаполнитьНастройкиОтраженияОСМС();
	РегистрыСведений.КоэффициентыСтавкиРефинансированияНБДляРасчетаПени.ЗаполнитьКоэффициентыДляОСМС();
	
	//добавлены новые налоги, статьи затрат, нужно скорректировать коды у элементов справочника
	УстановитьНовыеКодыНеПредопределеннымЭлементамСправочника("НалогиСборыОтчисления");	
	УстановитьНовыеКодыНеПредопределеннымЭлементамСправочника("СтатьиЗатрат");
	
	ОбновитьНастройкиОтчетовОСМС();
	
КонецПроцедуры

Процедура ЗаполнитьНалогиСборыОтчисленияОСМС()
	
	Если ПланыОбмена.ГлавныйУзел() = Неопределено Тогда // В подчиненных узлах РИБ не выполняется
	
		СправочникОбъект = Справочники.НалогиСборыОтчисления.ОтчисленияОбязательноеСоциальноеМедицинскоеСтрахование.ПолучитьОбъект();
		СправочникОбъект.КодБК 							  = "";
		СправочникОбъект.КодНазначенияПлатежа 			  = "121";
		СправочникОбъект.СчетУчетаРасчетовСКонтрагентомБУ = ПланыСчетов.Типовой.ОбязательстваПоОтчислениямОСМС;
		СправочникОбъект.СчетУчетаРасчетовСКонтрагентомНУ = ПланыСчетов.Налоговый.ОбязательстваПоОтчислениямОСМС;
		СправочникОбъект.НазначениеПлатежа 				  = НСтр("ru = 'Отчисления на обязательное социальное медицинское страхование за '");
		Попытка
			СправочникОбъект.Записать();
		Исключение
			ТекстСообщения = НСтр("ru='Операция не выполнена'", ОбщегоНазначения.КодОсновногоЯзыка());
			ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;	
		
		СправочникОбъект = Справочники.НалогиСборыОтчисления.ВзносыОбязательноеСоциальноеМедицинскоеСтрахование.ПолучитьОбъект();
		СправочникОбъект.КодБК 							  = "";
		СправочникОбъект.КодНазначенияПлатежа 			  = "122";
		СправочникОбъект.СчетУчетаРасчетовСКонтрагентомБУ = ПланыСчетов.Типовой.ОбязательстваПоВзносамОСМС;
		СправочникОбъект.СчетУчетаРасчетовСКонтрагентомНУ = ПланыСчетов.Налоговый.ОбязательстваПоВзносамОСМС;
		СправочникОбъект.НазначениеПлатежа 				  = НСтр("ru = 'Взносы на обязательное социальное медицинское страхование за '");
		Попытка
			СправочникОбъект.Записать();
		Исключение
			ТекстСообщения = НСтр("ru='Операция не выполнена'", ОбщегоНазначения.КодОсновногоЯзыка());
			ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	КонецЕсли;
	
	// Сроки перечисления налогов, сборов, отчислений
	НаборЗаписейПроверка = РегистрыСведений.СрокиПеречисленияНалоговСборовОтчислений.СоздатьНаборЗаписей();
	
	НаборЗаписейПроверка.Отбор.ВидНалога.Использование = Истина;
	НаборЗаписейПроверка.Отбор.ВидНалога.ВидСравнения	 = ВидСравнения.Равно;
	НаборЗаписейПроверка.Отбор.ВидНалога.Значение	 	 = Справочники.НалогиСборыОтчисления.ВзносыОбязательноеСоциальноеМедицинскоеСтрахование;
	
	НаборЗаписейПроверка.Прочитать();
	ЕстьЗаписиВОСМС = (НаборЗаписейПроверка.Количество() > 0);
	
	НаборЗаписейПроверка.Отбор.ВидНалога.Значение	 	 = Справочники.НалогиСборыОтчисления.ОтчисленияОбязательноеСоциальноеМедицинскоеСтрахование;
	НаборЗаписейПроверка.Прочитать();
	ЕстьЗаписиООСМС = (НаборЗаписейПроверка.Количество() > 0);
	
	Если ЕстьЗаписиВОСМС ИЛИ ЕстьЗаписиООСМС Тогда
		// Переход с версии 2.0, где уже были автоматизированы ОСМС
		Возврат;
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.СрокиПеречисленияНалоговСборовОтчислений.СоздатьНаборЗаписей();
	
	НаборЗаписей.Отбор.Организация.Использование = Истина;
	НаборЗаписей.Отбор.Организация.ВидСравнения	 = ВидСравнения.Равно;
	НаборЗаписей.Отбор.Организация.Значение	 	 = Справочники.Организации.ПустаяСсылка();

	ДлинаСуток = 86400;
	ТекМесяц = '20170701';	
	ДатаОкончания = НачалоМесяца(КонецГода(ОбщегоНазначенияБК.ПолучитьРабочуюДату()));
	
	Пока ТекМесяц <= ДатаОкончания Цикл
		
		// ВОСМС
		Если ТекМесяц >= '20170701' Тогда
			// до 25 числа месяца, следующего за месяцем исчисления
			Движение = НаборЗаписей.Добавить();
			// Измерения
			Движение.Месяц 		 = ТекМесяц;
			Движение.Организация = Справочники.Организации.ПустаяСсылка();
			Движение.ВидНалога	 = Справочники.НалогиСборыОтчисления.ВзносыОбязательноеСоциальноеМедицинскоеСтрахование;
			// Ресурсы
			Движение.ПорядокОпределенияСрокаПеречисления = Перечисления.ПорядокОпределенияСрокаПеречисления.ПоМесяцуНалоговогоПериода;
			Движение.СрокПеречисления					 = ДобавитьМесяц(ТекМесяц, 1) + (25-1) * ДлинаСуток;
		//Иначе - до июля 2017 Взносы ОСМС вообще не исчислялись
		КонецЕсли;		
		
		// ООСМС
		Если ТекМесяц >= '20170701' Тогда
			// до 25 числа месяца, следующего за месяцем исчисления
			Движение = НаборЗаписей.Добавить();
			// Измерения
			Движение.Месяц 		 = ТекМесяц;
			Движение.Организация = Справочники.Организации.ПустаяСсылка();
			Движение.ВидНалога	 = Справочники.НалогиСборыОтчисления.ОтчисленияОбязательноеСоциальноеМедицинскоеСтрахование;
			// Ресурсы
			Движение.ПорядокОпределенияСрокаПеречисления = Перечисления.ПорядокОпределенияСрокаПеречисления.ПоМесяцуНалоговогоПериода;
			Движение.СрокПеречисления					 = ДобавитьМесяц(ТекМесяц, 1) + (25-1) * ДлинаСуток;
		//Иначе - до июля 2017 отчисления ОСМС вообще не исчислялись
		КонецЕсли;		
		
		ТекМесяц = ДобавитьМесяц(ТекМесяц, 1);
	КонецЦикла;

	Попытка
		НаборЗаписей.Записать(Ложь);
	Исключение
		ТекстСообщения = НСтр("ru='Операция не выполнена'", ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
			
КонецПроцедуры

Процедура ЗаполнитьНастройкиОСМСДляНачислений()
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда
		Возврат;
	КонецЕсли;
			
	Облагается			   = Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЦеликом;
	НеОблагается		   = Справочники.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ОсновныеНачисленияОрганизаций.Ссылка,
	               |	ОсновныеНачисленияОрганизаций.Предопределенный,
	               |	ОсновныеНачисленияОрганизаций.ИмяПредопределенныхДанных
	               |ИЗ
	               |	ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК ОсновныеНачисленияОрганизаций
	               |ГДЕ
	               |	(ОсновныеНачисленияОрганизаций.ОблагаетсяООСМС = ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.ПустаяСсылка)
	               |			ИЛИ ОсновныеНачисленияОрганизаций.ОблагаетсяВОСМС = ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.ПустаяСсылка))";
				   
				   
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НачислениеОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		Если Выборка.Предопределенный Тогда
			Если Выборка.ИмяПредопределенныхДанных = "ОкладПоДням" 
				ИЛИ Выборка.ИмяПредопределенныхДанных = "ОкладПоЧасам" 
				ИЛИ Выборка.ИмяПредопределенныхДанных = "ОкладОтОбратного" 
				ИЛИ Выборка.ИмяПредопределенныхДанных = "ОкладОтОбратногоПоДням" 
				ИЛИ Выборка.ИмяПредопределенныхДанных = "ОкладОтОбратногоПоЧасам" 
				ИЛИ Выборка.ИмяПредопределенныхДанных = "ТарифЧасовой" 
				ИЛИ Выборка.ИмяПредопределенныхДанных = "ОплатаПоСреднемуБЛ" 
				ИЛИ Выборка.ИмяПредопределенныхДанных = "ОплатаПоСреднемуОтп" 
				ИЛИ Выборка.ИмяПредопределенныхДанных = "КомпенсацияОтпуска" 
				ИЛИ Выборка.ИмяПредопределенныхДанных = "КомпенсацияОтпускаБезУвольнения" Тогда
				
				НачислениеОбъект.ОблагаетсяООСМС = Облагается;
				НачислениеОбъект.ОблагаетсяВОСМС = Облагается;
				
			ИначеЕсли Выборка.ИмяПредопределенныхДанных = "КомпенсационныеВыплатыПриСлужебныхКомандировках" 
				ИЛИ Выборка.ИмяПредопределенныхДанных = "ПрочиеДоходыОблагаемыеУИсточника" 
				ИЛИ Выборка.ИмяПредопределенныхДанных = "ДоходыНеОблагаемыеУИсточникаВыплаты" ТОгда
				
				НачислениеОбъект.ОблагаетсяООСМС = НеОблагается;
				НачислениеОбъект.ОблагаетсяВОСМС = НеОблагается;
				
			КонецЕсли;
			
		Иначе
			НачислениеОбъект.ОблагаетсяООСМС = Облагается;
			НачислениеОбъект.ОблагаетсяВОСМС = Облагается;
		КонецЕсли;
		
		Попытка
			НачислениеОбъект.Записать();	
		Исключение
			ТекстСообщения = НСтр("ru='Операция не выполнена'", ОбщегоНазначения.КодОсновногоЯзыка());
			ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
	КонецЦикла;
	
	
КонецПроцедуры

Процедура ЗаполнитьНастройкиОтраженияОСМС()
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда // В подчиненных узлах РИБ не выполняется
		Возврат;
	КонецЕсли;

	// Счета учета
	СчетБУ = ПланыСчетов.Типовой.ОбязательстваПоОтчислениямОСМС;
	СчетНУ = ПланыСчетов.Налоговый.ОбязательстваПоОтчислениямОСМС;
		
	ОбъектСчетБУ = СчетБУ.ПолучитьОбъект();
	ОбъектСчетБУ.СчетНУ = СчетНУ;
	КодЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();	
	Попытка
		ОбъектСчетБУ.Записать();
	Исключение
		ТекстСообщения = НСтр("ru='Операция не выполнена'", КодЯзыка);
		ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;	
	
	СчетБУ = ПланыСчетов.Типовой.ОбязательстваПоВзносамОСМС;
	СчетНУ = ПланыСчетов.Налоговый.ОбязательстваПоВзносамОСМС;
		
	ОбъектСчетБУ = СчетБУ.ПолучитьОбъект();
	ОбъектСчетБУ.СчетНУ = СчетНУ;
	
	Попытка
		ОбъектСчетБУ.Записать();
	Исключение
		ТекстСообщения = НСтр("ru='Операция не выполнена'", КодЯзыка);
		ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	////////////установка запрета использования счета//////////////////////////////////////////
	//3210
	СчетГруппаБУ = ПланыСчетов.Типовой.ОбязательстваПоСоциальномуСтрахованию_.ПолучитьОбъект();
	СчетГруппаБУ.ЗапретитьИспользоватьВПроводках = Истина;
	
	Попытка
		СчетГруппаБУ.Записать();
	Исключение
		ТекстСообщения = НСтр("ru='Операция не выполнена'", КодЯзыка);
		ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	//3210Н
	СчетГруппаНУ = ПланыСчетов.Налоговый.ОбязательстваПоСоциальномуСтрахованию_.ПолучитьОбъект();
	СчетГруппаНУ.ЗапретитьИспользоватьВПроводках = Истина;
	
	Попытка
		СчетГруппаНУ.Записать();
	Исключение
		ТекстСообщения = НСтр("ru='Операция не выполнена'", КодЯзыка);
		ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	/////////////////////////////////////////////////////////////////////
	
	///////установка аналитики учета по сотрудникам /////////////////
	ВестиУчетПоСотрудникам = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.НаСчетеВедетсяУчетПоРаботникамОрганизаций(ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПоОплатеТруда); // счет 3350
	
	// инициализация списка счетов, на которых можно устанавливать дополнительную аналитику "Работники организации"
	СчетаЗП = Новый СписокЗначений;
	СчетаЗП.Добавить(ПланыСчетов.Типовой.ОбязательстваПоВзносамОСМС); //3212
	СчетаЗП.Добавить(ПланыСчетов.Типовой.ОбязательстваПоОтчислениямОСМС); //3213
	СчетаЗП.Добавить(ПланыСчетов.Налоговый.ОбязательстваПоВзносамОСМС); // 3212Н
	СчетаЗП.Добавить(ПланыСчетов.Налоговый.ОбязательстваПоОтчислениямОСМС); // 3213Н
	
	Для каждого Счет Из СчетаЗП Цикл
		Если ТипЗнч(Счет.Значение) = Тип("ПланСчетовСсылка.Налоговый") Тогда
			ИмяПланаСчетов = "Налоговый";
		Иначе
			ИмяПланаСчетов = "Типовой";
		КонецЕсли;
		ПрименитьПараметрыСубконтоРаботникиОрганизации(Счет.Значение, ИмяПланаСчетов, ВестиУчетПоСотрудникам, Ложь);
	КонецЦикла;
	
	/////////////////////////////////////////////////////////////////////

	// Статьи затрат
	СтатьяЗатрат = Справочники.СтатьиЗатрат.ПеняПоВОСМС.ПолучитьОбъект();
	СтатьяЗатрат.КатегорияЗатрат   		  = Перечисления.КатегорииЗатрат.ПрочиеРасходы;
	СтатьяЗатрат.ПринятиеКНалоговомуУчету =	Истина;
	СтатьяЗатрат.ВидРасходовНУ			  =	Справочники.ВидыРасходовНУ.ПрочиеРасходыНаВычет;
	Попытка
		СтатьяЗатрат.Записать();
	Исключение
		ТекстСообщения = НСтр("ru='Операция не выполнена'", КодЯзыка);
		ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	СтатьяЗатрат = Справочники.СтатьиЗатрат.ПеняПоООСМС.ПолучитьОбъект();
	СтатьяЗатрат.КатегорияЗатрат   		  = Перечисления.КатегорииЗатрат.ПрочиеРасходы;
	СтатьяЗатрат.ПринятиеКНалоговомуУчету =	Истина;
	СтатьяЗатрат.ВидРасходовНУ			  =	Справочники.ВидыРасходовНУ.ПрочиеРасходыНаВычет;
	Попытка
		СтатьяЗатрат.Записать();
	Исключение
		ТекстСообщения = НСтр("ru='Операция не выполнена'", КодЯзыка);
		ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	СтатьяЗатрат = Справочники.СтатьиЗатрат.ОтчисленияОСМС.ПолучитьОбъект();
	СтатьяЗатрат.КатегорияЗатрат   		  = Перечисления.КатегорииЗатрат.ПрочиеРасходы;
	СтатьяЗатрат.ПринятиеКНалоговомуУчету =	Истина;
	СтатьяЗатрат.ВидРасходовНУ			  =	Справочники.ВидыРасходовНУ.ПрочиеРасходыНаВычет;
	Попытка
		СтатьяЗатрат.Записать();
	Исключение
		ТекстСообщения = НСтр("ru='Операция не выполнена'", КодЯзыка);
		ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
КонецПроцедуры

Процедура ОбновитьНастройкиОтчетовОСМС()
	
	НастройкиОтчетов = Новый ТаблицаЗначений;
	НастройкиОтчетов.Колонки.Добавить("КлючОбъекта");
	НастройкиОтчетов.Колонки.Добавить("КлючНастроек");
	НастройкиОтчетов.Колонки.Добавить("Пользователь");
	НастройкиОтчетов.Колонки.Добавить("Представление");
	
	ВыборкаНастроек = ХранилищеПользовательскихНастроекОтчетов.Выбрать();
	КодЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	Пока ВыборкаНастроек.Следующий() Цикл 
		
		ИмяНастроекОтчета = СтрРазделить(ВыборкаНастроек.КлючОбъекта, "/", Ложь);
		Если ИмяНастроекОтчета.Количество() < 2 Тогда
			Продолжить; // Некорректная настройка.
		КонецЕсли;
		
		Если ИмяНастроекОтчета[0] = "Отчет.РегистрНалоговогоУчетаПоИПНиСН"
			ИЛИ ИмяНастроекОтчета[0] = "Отчет.КонтрольнаяВедомостьОтраженияЗарплатыВРегУчете"
			ИЛИ ИмяНастроекОтчета[0] = "Отчет.РасчетныеВедомостиОрганизаций"
			ИЛИ ИмяНастроекОтчета[0] = "Отчет.СправкаРасчетРезервыПоВознаграждениямРаботникам" Тогда
			
			НоваяСтрока = НастройкиОтчетов.Добавить();
			НоваяСтрока.КлючОбъекта = ВыборкаНастроек.КлючОбъекта;
			НоваяСтрока.КлючНастроек = ВыборкаНастроек.КлючНастроек;
			НоваяСтрока.Пользователь = ВыборкаНастроек.Пользователь;
			НоваяСтрока.Представление = ВыборкаНастроек.Представление;
			
		КонецЕсли;
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Истина);
	Для Каждого СтрокаНастройки Из НастройкиОтчетов Цикл
		Попытка
			ХранилищеПользовательскихНастроекОтчетов.Удалить(СтрокаНастройки.КлючОбъекта, СтрокаНастройки.КлючНастроек, СтрокаНастройки.Пользователь);
		Исключение
			ТекстСообщения = НСтр("ru='Операция не выполнена'", КодЯзыка);
			ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	КонецЦикла;
	УстановитьПривилегированныйРежим(Ложь);
	
	НастройкиОтчетов.Очистить();
	
	ВыборкаНастроек = ХранилищеСистемныхНастроек.Выбрать();
	
	Пока ВыборкаНастроек.Следующий() Цикл 
		
		ИмяНастроекОтчета = СтрРазделить(ВыборкаНастроек.КлючОбъекта, "/", Ложь);
		Если ИмяНастроекОтчета.Количество() < 2 Тогда
			Продолжить; // Некорректная настройка.
		КонецЕсли;
		
		Если СтрНайти(ИмяНастроекОтчета[0],"РегистрНалоговогоУчетаПоИПНиСН") > 0
			ИЛИ СтрНайти(ИмяНастроекОтчета[0], "КонтрольнаяВедомостьОтраженияЗарплатыВРегУчете") > 0
			ИЛИ СтрНайти(ИмяНастроекОтчета[0], "РасчетныеВедомостиОрганизаций") > 0
			ИЛИ СтрНайти(ИмяНастроекОтчета[0], "СправкаРасчетРезервыПоВознаграждениямРаботникам") > 0 Тогда
			
			НоваяСтрока = НастройкиОтчетов.Добавить();
			НоваяСтрока.КлючОбъекта = ВыборкаНастроек.КлючОбъекта;
			НоваяСтрока.КлючНастроек = ВыборкаНастроек.КлючНастроек;
			НоваяСтрока.Пользователь = ВыборкаНастроек.Пользователь;
			НоваяСтрока.Представление = ВыборкаНастроек.Представление;
			
		КонецЕсли;
		
	КонецЦикла;

	УстановитьПривилегированныйРежим(Истина);
	Для Каждого СтрокаНастройки Из НастройкиОтчетов Цикл
		Попытка
			ХранилищеСистемныхНастроек.Удалить(СтрокаНастройки.КлючОбъекта, СтрокаНастройки.КлючНастроек, СтрокаНастройки.Пользователь);
		Исключение
			ТекстСообщения = НСтр("ru='Операция не выполнена'", КодЯзыка);
			ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	КонецЦикла;
	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры

Процедура ЗаменаСсылокНаНовыеСчета1422(Параметры) Экспорт
	
	СписокЗаменяемыхОбъектов = Новый СписокЗначений;
	СписокНовыхОбъектов      = Новый СписокЗначений;
	
	СписокЗаменяемыхОбъектов.Добавить(ПланыСчетов.Налоговый.УдалитьНДСНачисленныйПриПокупке);  //ЯН142
	СписокНовыхОбъектов.Добавить(ПланыСчетов.Налоговый.НДСНачисленныйПриПокупке);              //1422Н
	
	СписокЗаменяемыхОбъектов.Добавить(ПланыСчетов.Типовой.УдалитьНДСНачисленныйПриПокупке);    //Я142
	СписокНовыхОбъектов.Добавить(ПланыСчетов.Типовой.НДСНачисленныйПриПокупке);                //1422
	
	МассивИсходныхОбъектов = СписокЗаменяемыхОбъектов.ВыгрузитьЗначения();
	Ссылки = НайтиПоСсылкам(МассивИсходныхОбъектов);
	
	Если Ссылки.Количество() = 0 Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;	
		
	Ссылки.Сортировать("Данные Возр");

	ТаблицаОбъектов = Ссылки.СкопироватьКолонки();
	
	ТекущийОбъект = Неопределено;
	НовыйОбъект   = Неопределено;
	
	ТребуетсяОбработка = Ложь;

	КодЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	Для Каждого Ссылка из Ссылки Цикл
		
		// Получение имени коллекции объектов метаданных
		ПолноеИмяОбъектаМД = Ссылка.Метаданные.ПолноеИмя();
		ПозицияТочки = СтрНайти(ПолноеИмяОбъектаМД, ".");
		ИмяКоллекцииОбъектовМД = Лев(ПолноеИмяОбъектаМД, ПозицияТочки - 1);
		
		Если ИмяКоллекцииОбъектовМД <> "Справочник"
			И ИмяКоллекцииОбъектовМД <> "Документ"
			И ИмяКоллекцииОбъектовМД <> "РегистрСведений" Тогда
			Продолжить;
		КонецЕсли;
		
		НовыйОбъект = Ссылка.Данные;
		Если НовыйОбъект <> ТекущийОбъект Тогда
			НоваяСтрока = ТаблицаОбъектов.Добавить();
			НоваяСтрока.Данные = Ссылка.Данные;
			НоваяСтрока.Метаданные = Ссылка.Метаданные;
			СписокСсылокНаСчет = Новый СписокЗначений;
			СписокСсылокНаСчет.Добавить(Ссылка.Ссылка);			
			НоваяСтрока.Ссылка = СписокСсылокНаСчет;
		Иначе // добавляем в список счетов наш счет
			СписокСсылокНаСчет = НоваяСтрока.Ссылка;
			СписокСсылокНаСчет.Добавить(Ссылка.Ссылка);			
		КонецЕсли;
		 	
		ТекущийОбъект = Ссылка.Данные;
		ТребуетсяОбработка = Истина;
		
	КонецЦикла;
	
	Если НЕ ТребуетсяОбработка Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	
	Параметры.ОбработкаЗавершена = Ложь;
	
	КоличествоДокументовВОднойИтерации = 1000;
	
	Счетчик = 0;
	
	ТипЗначенияДокументыПоступления = ПланыВидовХарактеристик.ВидыСубконтоТиповые.ДокументыПоступления.ТипЗначения;
	УдаляемыеЗаписи = Новый Массив;
	
	ТаблицаАвансовыеОтчетыДляИзмененияПроводок = Новый ТаблицаЗначений;
	ТаблицаАвансовыеОтчетыДляИзмененияПроводок.Колонки.Добавить("АвансовыйОтчет");
	ТаблицаАвансовыеОтчетыДляИзмененияПроводок.Колонки.Добавить("Сторнирование");
	
	Для Каждого Ссылка Из ТаблицаОбъектов Цикл
		
		// Получение имени коллекции объектов метаданных
		ПолноеИмяОбъектаМД = Ссылка.Метаданные.ПолноеИмя();
		ПозицияТочки = СтрНайти(ПолноеИмяОбъектаМД, ".");
		ИмяКоллекцииОбъектовМД = Лев(ПолноеИмяОбъектаМД, ПозицияТочки - 1);
		
		Если ИмяКоллекцииОбъектовМД <> "Справочник"
			И ИмяКоллекцииОбъектовМД <> "Документ"
			И ИмяКоллекцииОбъектовМД <> "РегистрСведений" Тогда
			Продолжить;
		КонецЕсли;
		
		ТаблицаАвансовыеОтчетыДляИзмененияПроводок.Очистить();
		
		Если Счетчик >= КоличествоДокументовВОднойИтерации Тогда
			Если ТранзакцияАктивна() Тогда
				Попытка
					ЗафиксироватьТранзакцию();
				Исключение
					ОтменитьТранзакцию();
					Инфо = ИнформацияОбОшибке();
					ЗаписьЖурналаРегистрации(
						НСтр("ru = 'Обновление информационной базы. Замена ссылок на счета'", КодЯзыка),
						УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(Инфо));				
					ОбщегоНазначения.СообщитьПользователю(КраткоеПредставлениеОшибки(Инфо));
				КонецПопытки;
			КонецЕсли;
			Счетчик = 0;
			Возврат;
		КонецЕсли;
		
		НачатьТранзакцию();
		Счетчик = Счетчик + 1;
		
		// Получение ссылки на новый объект
		ТипСсылки   = Неопределено;
		НоваяСсылка = Неопределено;
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъектаМД);
		
		// Обработка независимых регистров сведений
		Если ИмяКоллекцииОбъектовМД = "РегистрСведений" Тогда
			
			Измерения = Ссылка.Метаданные["Измерения"];
			Реквизиты = Ссылка.Метаданные["Реквизиты"];
			Ресурсы   = Ссылка.Метаданные["Ресурсы"];
			
			СубконтоИзмерение = Ложь;
			СубконтоРеквизит  = Ложь;
			СубконтоРесурс    = Ложь;
			
			Для Каждого Измерение из Измерения Цикл
				СубконтоИзмерение = СтрНайти(Измерение.Имя, "Субконто") <> 0;
				Если СубконтоИзмерение Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Для Каждого Реквизит из Реквизиты Цикл
				СубконтоРеквизит = СтрНайти(Реквизит.Имя, "Субконто") <> 0;
				Если СубконтоРеквизит Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Для Каждого Ресурс из Ресурсы Цикл
				СубконтоРесурс = СтрНайти(Ресурс.Имя, "Субконто") <> 0;
				Если СубконтоРесурс Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;

			ОбъектИзмененияВИзмерении = Ложь;
			Для Каждого СсылкаНаСчет Из Ссылка.Ссылка Цикл
				Для Каждого Измерение из Измерения Цикл
					Если Ссылка.Данные[Измерение.Имя] = СсылкаНаСчет.Значение Тогда 
						//отбор по изменяемым полям не построим
						ОбъектИзмененияВИзмерении = Истина;
					КонецЕсли;
					СубконтоИзмерение = СтрНайти(Измерение.Имя, "Субконто") <> 0;
				КонецЦикла;
			КонецЦикла;
			
			Если НЕ ОбъектИзмененияВИзмерении Тогда 
				
				НаборЗаписей = РегистрыСведений[Ссылка.Метаданные.Имя].СоздатьНаборЗаписей(); 
				ОбъектИзменен = Ложь;
				
				Для каждого Измерение из Измерения Цикл
					НаборЗаписей.Отбор[Измерение.Имя].Значение 		= Ссылка.Данные[Измерение.Имя];
					НаборЗаписей.Отбор[Измерение.Имя].Использование = Истина;
					НаборЗаписей.Отбор[Измерение.Имя].ВидСравнения  = ВидСравнения.Равно;
					
					ЭлементБлокировки.УстановитьЗначение(Измерение.Имя, Ссылка.Данные[Измерение.Имя]);
				КонецЦикла;
				
				Если НаборЗаписей.Отбор.Найти("Период") <> Неопределено Тогда 
					НаборЗаписей.Отбор.Период.Значение 		= Ссылка.Данные.Период;
					НаборЗаписей.Отбор.Период.Использование = Истина;
					НаборЗаписей.Отбор.Период.ВидСравнения  = ВидСравнения.Равно;
					
					ЭлементБлокировки.УстановитьЗначение("Период", Ссылка.Данные.Период);
				КонецЕсли;	
	
				НаборЗаписей.Прочитать();
				Если НаборЗаписей.Выбран() Тогда
					
					Блокировка.Заблокировать();
					
					Для каждого ЗаписьРегистра Из НаборЗаписей Цикл
						
						Для Каждого СсылкаНаСчет Из Ссылка.Ссылка Цикл
							ПолучениеСсылокНаНовыйОбъект(СписокЗаменяемыхОбъектов, СписокНовыхОбъектов, СсылкаНаСчет.Значение, ТипСсылки, НоваяСсылка);
							Для каждого Реквизит из Реквизиты Цикл
								ЗаменаСсылкиНаОбъект(ЗаписьРегистра, Реквизит.Имя, ТипСсылки, СсылкаНаСчет.Значение, НоваяСсылка, ОбъектИзменен);
							КонецЦикла;
						КонецЦикла;
						
						Для Каждого СсылкаНаСчет Из Ссылка.Ссылка Цикл
							ПолучениеСсылокНаНовыйОбъект(СписокЗаменяемыхОбъектов, СписокНовыхОбъектов, СсылкаНаСчет.Значение, ТипСсылки, НоваяСсылка);
							Для каждого Ресурс из Ресурсы Цикл
								ЗаменаСсылкиНаОбъект(ЗаписьРегистра, Ресурс.Имя, ТипСсылки, СсылкаНаСчет.Значение, НоваяСсылка, ОбъектИзменен);
							КонецЦикла;
						КонецЦикла;
						
					КонецЦикла;
					
					Попытка
						НаборЗаписей.ОбменДанными.Загрузка = Истина;
						НаборЗаписей.Записать();
						
						ЗафиксироватьТранзакцию();
						
						Комментарий = НСтр("ru = 'Обработан объект <%1>.'");
						Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Комментарий, Ссылка.Данные);
						
						Если СубконтоИзмерение ИЛИ СубконтоРеквизит ИЛИ СубконтоРесурс Тогда
							Комментарий = Комментарий + Символы.ПС + НСтр("ru = '    - Необходимо вручную проверить значения Субконто.'")
						КонецЕсли;
						
						ЗаписьЖурналаРегистрации(
							НСтр("ru = 'Обновление информационной базы. Замена ссылок на счета. Регистры сведений'", КодЯзыка),
							УровеньЖурналаРегистрации.Информация,,, Комментарий);				
						ОбщегоНазначения.СообщитьПользователю(Комментарий);
					Исключение
						ОтменитьТранзакцию();
						
						Комментарий = НСтр("ru = 'Объект не обработан автоматически: %1 <%2> <%3>.
						                         |	Необходимо вручную заменить значение <%4> на <%5>.'");
						Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							Комментарий, ИмяКоллекцииОбъектовМД, Ссылка.Метаданные.Синоним, Ссылка.Данные, Ссылка.Ссылка, НоваяСсылка);
							
						Если СубконтоИзмерение ИЛИ СубконтоРеквизит ИЛИ СубконтоРесурс Тогда
							Комментарий = Комментарий + НСтр("ru = ' Необходимо вручную проверить значения Субконто.'")
						КонецЕсли;
							
						ЗаписьЖурналаРегистрации(
							НСтр("ru = 'Обновление информационной базы. Замена ссылок на счета. Регистры сведений'", КодЯзыка),
							УровеньЖурналаРегистрации.Ошибка,,, Комментарий + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));				
						ОбщегоНазначения.СообщитьПользователю(Комментарий);
					КонецПопытки;
					
				КонецЕсли;
				
			Иначе  // если ОбъектИзмененияВИзмерении 
				
				Объект = РегистрыСведений[Ссылка.Метаданные.Имя].СоздатьМенеджерЗаписи();
				ОбъектИзменен = Ложь;
				
				Объект.Период = Ссылка.Данные.Период;
				
				Для каждого Измерение из Измерения Цикл
					Объект[Измерение.Имя] = Ссылка.Данные[Измерение.Имя];
					
					ЭлементБлокировки.УстановитьЗначение(Измерение.Имя, Ссылка.Данные[Измерение.Имя]);
				КонецЦикла;
				
				Объект.Прочитать();
				
				Если Объект.Выбран() Тогда
					
					Блокировка.Заблокировать();
					
					Для Каждого СсылкаНаСчет Из Ссылка.Ссылка Цикл
						ПолучениеСсылокНаНовыйОбъект(СписокЗаменяемыхОбъектов, СписокНовыхОбъектов, СсылкаНаСчет.Значение, ТипСсылки, НоваяСсылка);
						Для каждого Измерение из Измерения Цикл
							ЗаменаСсылкиНаОбъект(Объект, Измерение.Имя, ТипСсылки, СсылкаНаСчет.Значение, НоваяСсылка, ОбъектИзменен);
						КонецЦикла;
					КонецЦикла;
					
					Для Каждого СсылкаНаСчет Из Ссылка.Ссылка Цикл
						ПолучениеСсылокНаНовыйОбъект(СписокЗаменяемыхОбъектов, СписокНовыхОбъектов, СсылкаНаСчет.Значение, ТипСсылки, НоваяСсылка);
						Для каждого Реквизит из Реквизиты Цикл
							ЗаменаСсылкиНаОбъект(Объект, Реквизит.Имя, ТипСсылки, СсылкаНаСчет.Значение, НоваяСсылка, ОбъектИзменен);
						КонецЦикла;
					КонецЦикла;
					
					Для Каждого СсылкаНаСчет Из Ссылка.Ссылка Цикл
						ПолучениеСсылокНаНовыйОбъект(СписокЗаменяемыхОбъектов, СписокНовыхОбъектов, СсылкаНаСчет.Значение, ТипСсылки, НоваяСсылка);
						Для каждого Ресурс из Ресурсы Цикл
							ЗаменаСсылкиНаОбъект(Объект, Ресурс.Имя, ТипСсылки, СсылкаНаСчет.Значение, НоваяСсылка, ОбъектИзменен);
						КонецЦикла;
					КонецЦикла;
					
					Попытка
						Объект.Записать();
						
						ЗафиксироватьТранзакцию();
						
						Комментарий = НСтр("ru = 'Обработан объект <%1>.'");
						Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Комментарий, Ссылка.Данные);
						
						Если СубконтоИзмерение ИЛИ СубконтоРеквизит ИЛИ СубконтоРесурс Тогда
							Комментарий = Комментарий + Символы.ПС + НСтр("ru = '    - Необходимо вручную проверить значения Субконто.'")
						КонецЕсли;
						
						ЗаписьЖурналаРегистрации(
							НСтр("ru = 'Обновление информационной базы. Замена ссылок на счета. Регистры сведений'", КодЯзыка),
							УровеньЖурналаРегистрации.Информация,,, Комментарий);				
						ОбщегоНазначения.СообщитьПользователю(Комментарий);
					Исключение
						
						ОтменитьТранзакцию();
						
						Комментарий = НСтр("ru = 'Объект не обработан автоматически: %1 <%2> <%3>.
						                         |	Необходимо вручную перевыбрать значение <%4>.'");
						Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							Комментарий, ИмяКоллекцииОбъектовМД, Ссылка.Метаданные.Синоним, Ссылка.Данные, "1422/1422Н");
							
						Если СубконтоИзмерение ИЛИ СубконтоРеквизит ИЛИ СубконтоРесурс Тогда
							Комментарий = Комментарий + НСтр("ru = ' Необходимо вручную проверить значения Субконто.'")
						КонецЕсли;
							
						ЗаписьЖурналаРегистрации(
							НСтр("ru = 'Обновление информационной базы. Замена ссылок на счета. Регистры сведений'", КодЯзыка),
							УровеньЖурналаРегистрации.Ошибка,,, Комментарий + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));				
						ОбщегоНазначения.СообщитьПользователю(Комментарий);
					КонецПопытки;
				КонецЕсли;
				
			КонецЕсли;
			
			Продолжить;
		КонецЕсли;
		
		Объект = Ссылка.Данные.ПолучитьОбъект();
		ОбъектИзменен = Ложь;
		
		ЭлементБлокировки.УстановитьЗначение("Ссылка", Ссылка.Данные);
		Блокировка.Заблокировать();
		
		СубконтоРеквизит  = Ложь;

		Если ИмяКоллекцииОбъектовМД = "Справочник" Тогда
			
			Реквизиты = Ссылка.Метаданные["Реквизиты"];
			
			Для Каждого Реквизит из Реквизиты Цикл
				СубконтоРеквизит = СтрНайти(Реквизит.Имя, "Субконто") <> 0;
				Если СубконтоРеквизит Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Для Каждого СсылкаНаСчет Из Ссылка.Ссылка Цикл
				ПолучениеСсылокНаНовыйОбъект(СписокЗаменяемыхОбъектов, СписокНовыхОбъектов, СсылкаНаСчет.Значение, ТипСсылки, НоваяСсылка);
				Для каждого Реквизит из Реквизиты Цикл
					ЗаменаСсылкиНаОбъект(Объект, Реквизит.Имя, ТипСсылки, СсылкаНаСчет.Значение, НоваяСсылка, ОбъектИзменен);
				КонецЦикла;
			КонецЦикла;
			
			// Обработка табличных частей
			ТабличныеЧасти = Ссылка.Метаданные["ТабличныеЧасти"];
			Для Каждого СсылкаНаСчет Из Ссылка.Ссылка Цикл
				ПолучениеСсылокНаНовыйОбъект(СписокЗаменяемыхОбъектов, СписокНовыхОбъектов, СсылкаНаСчет.Значение, ТипСсылки, НоваяСсылка);
				Для каждого ТабличнаяЧасть из ТабличныеЧасти Цикл
					Реквизиты = ТабличнаяЧасть["Реквизиты"];
					
					Для Каждого Реквизит из Реквизиты Цикл
						СубконтоРеквизит = СтрНайти(Реквизит.Имя, "Субконто") <> 0;
						Если СубконтоРеквизит Тогда
							Прервать;
						КонецЕсли;
					КонецЦикла;
					
					ТЧ = Объект[ТабличнаяЧасть.Имя];
					Для каждого СтрокаТЧ из ТЧ Цикл
						Для каждого Реквизит из Реквизиты Цикл
							ЗаменаСсылкиНаОбъект(СтрокаТЧ, Реквизит.Имя, ТипСсылки, СсылкаНаСчет.Значение, НоваяСсылка, ОбъектИзменен);
						КонецЦикла;
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
			
		КонецЕсли;
		
		Если ИмяКоллекцииОбъектовМД = "Документ" Тогда

			Реквизиты = Ссылка.Метаданные["Реквизиты"];
			Для Каждого СсылкаНаСчет Из Ссылка.Ссылка Цикл
				ПолучениеСсылокНаНовыйОбъект(СписокЗаменяемыхОбъектов, СписокНовыхОбъектов, СсылкаНаСчет.Значение, ТипСсылки, НоваяСсылка);
				Для каждого Реквизит из Реквизиты Цикл
					ЗаменаСсылкиНаОбъект(Объект, Реквизит.Имя, ТипСсылки, СсылкаНаСчет.Значение, НоваяСсылка, ОбъектИзменен);
				КонецЦикла;
			КонецЦикла;
			
			// Обработка табличных частей
			ТабличныеЧасти = Ссылка.Метаданные["ТабличныеЧасти"];
			Для Каждого СсылкаНаСчет Из Ссылка.Ссылка Цикл
				ПолучениеСсылокНаНовыйОбъект(СписокЗаменяемыхОбъектов, СписокНовыхОбъектов, СсылкаНаСчет.Значение, ТипСсылки, НоваяСсылка);
				Для каждого ТабличнаяЧасть из ТабличныеЧасти Цикл
					Реквизиты = ТабличнаяЧасть["Реквизиты"];
					ТЧ = Объект[ТабличнаяЧасть.Имя];
					Для каждого СтрокаТЧ из ТЧ Цикл
						Для каждого Реквизит из Реквизиты Цикл
							ЗаменаСсылкиНаОбъект(СтрокаТЧ, Реквизит.Имя, ТипСсылки, СсылкаНаСчет.Значение, НоваяСсылка, ОбъектИзменен);
						КонецЦикла;
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
			
		КонецЕсли;
		
		// Обработка движений документов
		Если ИмяКоллекцииОбъектовМД = "Документ" Тогда
			
			Если ПолноеИмяОбъектаМД = "Документ.Сторнирование" Тогда
				МетаданныеДокументаОснования = Объект.ДокументОснование.Метаданные();
				Реквизиты = МетаданныеДокументаОснования["Реквизиты"];
			Иначе
				Реквизиты = Ссылка.Метаданные["Реквизиты"];
			КонецЕсли;
			
			Если Реквизиты.Найти("ОтложитьПринятиеНДСКЗачету") = Неопределено Тогда
				ОтложенноеПринятиеНДСКЗачету = Ложь;
			Иначе
				Если ПолноеИмяОбъектаМД = "Документ.Сторнирование" Тогда
					ОтложенноеПринятиеНДСКЗачету = Объект.ДокументОснование.ОтложитьПринятиеНДСКЗачету;
				Иначе
					ОтложенноеПринятиеНДСКЗачету = Ссылка.Данные.ОтложитьПринятиеНДСКЗачету;
				КонецЕсли;
			КонецЕсли;
			
			Если ПолноеИмяОбъектаМД = "Документ.РегистрацияПрочихОперацийПоПриобретеннымТоварамВЦеляхНДС" Тогда
				ОтложенноеПринятиеНДСКЗачету = Объект.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Типовой.НДСНачисленныйПриПокупке;
			КонецЕсли;
			 
			Если ПолноеИмяОбъектаМД = "Документ.Сторнирование" И ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.РегистрацияПрочихОперацийПоПриобретеннымТоварамВЦеляхНДС") Тогда
				 ОтложенноеПринятиеНДСКЗачету = Объект.ДокументОснование.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Типовой.НДСНачисленныйПриПокупке;
			КонецЕсли;
				
			Контрагент = Справочники.Контрагенты.ПустаяСсылка();
			ДокументПоступления = Неопределено;
			
			Если ОтложенноеПринятиеНДСКЗачету Тогда
				Если Реквизиты.Найти("Контрагент") <> Неопределено Тогда
					Если ПолноеИмяОбъектаМД = "Документ.Сторнирование" Тогда
						Контрагент = Объект.ДокументОснование.Контрагент;
					Иначе
						Контрагент = Ссылка.Данные.Контрагент;
					КонецЕсли;
				КонецЕсли;
				
				Если ПолноеИмяОбъектаМД = "Документ.РегистрацияПрочихОперацийПоПриобретеннымТоварамВЦеляхНДС" Тогда
					ДокументОснование = Ссылка.Данные.ДокументОснование;
					Если ЗначениеЗаполнено(ДокументОснование)
						И ТипЗначенияДокументыПоступления.СодержитТип(ТипЗнч(ДокументОснование)) Тогда
						ДокументПоступления = ДокументОснование;
					КонецЕсли;
				ИначеЕсли ПолноеИмяОбъектаМД = "Документ.Сторнирование" Тогда
					Если ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.РегистрацияПрочихОперацийПоПриобретеннымТоварамВЦеляхНДС") Тогда
						ДокументОснование = Объект.ДокументОснование.ДокументОснование;
					Иначе
						ДокументОснование = Объект.ДокументОснование;
					Конецесли;
					Если ЗначениеЗаполнено(ДокументОснование)
						И ТипЗначенияДокументыПоступления.СодержитТип(ТипЗнч(ДокументОснование)) Тогда
						ДокументПоступления = ДокументОснование;
					КонецЕсли;
				Иначе
					Если ТипЗначенияДокументыПоступления.СодержитТип(ТипЗнч(Ссылка.Данные)) Тогда
						ДокументПоступления = Ссылка.Данные;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
		
			ДвиженияИзменены = Ложь;
			
			Для Каждого Регистр из Ссылка.Метаданные.Движения Цикл
				
				// Получение имени коллекции объектов метаданных
				ПолноеИмяРегистра = Регистр.ПолноеИмя();
				ПозицияТочки = Найти(ПолноеИмяРегистра, ".");
				ИмяКоллекцииРегистров = Лев(ПолноеИмяРегистра, ПозицияТочки - 1);
				
				Если ИмяКоллекцииРегистров = "РегистрНакопления" Тогда
					Менеджер = РегистрыНакопления[Регистр.Имя];
					
				ИначеЕсли ИмяКоллекцииРегистров = "РегистрСведений" Тогда
					Менеджер = РегистрыСведений[Регистр.Имя];
					
				ИначеЕсли ИмяКоллекцииРегистров = "РегистрБухгалтерии" Тогда
					Менеджер = РегистрыБухгалтерии[Регистр.Имя];
					
				Иначе
					Продолжить;
				КонецЕсли;
				
				Измерения = Регистр["Измерения"];
				Реквизиты = Регистр["Реквизиты"];
				Ресурсы   = Регистр["Ресурсы"];
				
				РегистрСубконтоИзмерение = Ложь;
				РегистрСубконтоРеквизит  = Ложь;
				РегистрСубконтоРесурс    = Ложь;
				
				Если НЕ ИмяКоллекцииРегистров = "РегистрБухгалтерии" Тогда
					Для Каждого Измерение из Измерения Цикл
						РегистрСубконтоИзмерение = СтрНайти(Измерение.Имя, "Субконто") <> 0;
						Если РегистрСубконтоИзмерение Тогда
							Прервать;
						КонецЕсли;
					КонецЦикла;
					Для Каждого Реквизит из Реквизиты Цикл
						РегистрСубконтоРеквизит = СтрНайти(Реквизит.Имя, "Субконто") <> 0;
						Если РегистрСубконтоРеквизит Тогда
							Прервать;
						КонецЕсли;
					КонецЦикла;
					Для Каждого Ресурс из Ресурсы Цикл
						РегистрСубконтоРесурс = СтрНайти(Ресурс.Имя, "Субконто") <> 0;
						Если РегистрСубконтоРесурс Тогда
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				НаборЗаписей = Менеджер.СоздатьНаборЗаписей();
				
				Регистратор = Ссылка.Данные;
				НаборЗаписей.Отбор.Регистратор.Установить(Регистратор);
				НаборЗаписей.Прочитать();
				
				Если НаборЗаписей.Количество() > 0 Тогда
					БлокировкаЗаписей = Новый БлокировкаДанных;
					ЭлементБлокировки = БлокировкаЗаписей.Добавить(ПолноеИмяРегистра + ".НаборЗаписей");
					ЭлементБлокировки.УстановитьЗначение("Регистратор", Ссылка.Данные);
					БлокировкаЗаписей.Заблокировать();
				КонецЕсли;
				
				НаборЗаписейИзменен = Ложь;
				
				Для Каждого СсылкаНаСчет Из Ссылка.Ссылка Цикл
					ПолучениеСсылокНаНовыйОбъект(СписокЗаменяемыхОбъектов, СписокНовыхОбъектов, СсылкаНаСчет.Значение, ТипСсылки, НоваяСсылка);
					
					УдаляемыеЗаписи.Очистить();
					
					Для каждого Запись из НаборЗаписей Цикл
						Для каждого Измерение из Измерения Цикл
							Если ИмяКоллекцииРегистров = "РегистрБухгалтерии" Тогда
								Балансовый = Измерение.Балансовый;
							Иначе
								Балансовый = Истина;
							КонецЕсли;
							
							Если Балансовый Тогда
								ЗаменаСсылкиНаОбъект(Запись, Измерение.Имя, ТипСсылки, СсылкаНаСчет.Значение, НоваяСсылка, НаборЗаписейИзменен);
							Иначе
								ЗаменаСсылкиНаОбъект(Запись, Измерение.Имя+"Дт", ТипСсылки, СсылкаНаСчет.Значение, НоваяСсылка, НаборЗаписейИзменен);
								ЗаменаСсылкиНаОбъект(Запись, Измерение.Имя+"Кт", ТипСсылки, СсылкаНаСчет.Значение, НоваяСсылка, НаборЗаписейИзменен);
							КонецЕсли;
						КонецЦикла;
						
						Для каждого Реквизит из Реквизиты Цикл
							ЗаменаСсылкиНаОбъект(Запись, Реквизит.Имя, ТипСсылки, СсылкаНаСчет.Значение, НоваяСсылка, НаборЗаписейИзменен);
						КонецЦикла;
						
						Для каждого Ресурс из Ресурсы Цикл
							Если ИмяКоллекцииРегистров = "РегистрБухгалтерии" Тогда
								Балансовый = Ресурс.Балансовый;
							Иначе
								Балансовый = Истина;
							КонецЕсли;
							
							Если Балансовый Тогда
								ЗаменаСсылкиНаОбъект(Запись, Ресурс.Имя, ТипСсылки, СсылкаНаСчет.Значение, НоваяСсылка, НаборЗаписейИзменен);
							Иначе
								ЗаменаСсылкиНаОбъект(Запись, Ресурс.Имя+"Дт", ТипСсылки, СсылкаНаСчет.Значение, НоваяСсылка, НаборЗаписейИзменен);
								ЗаменаСсылкиНаОбъект(Запись, Ресурс.Имя+"Кт", ТипСсылки, СсылкаНаСчет.Значение, НоваяСсылка, НаборЗаписейИзменен);
							КонецЕсли;
						КонецЦикла;
						
						Если ИмяКоллекцииРегистров = "РегистрБухгалтерии" Тогда
							Если Регистр.Корреспонденция Тогда
								
								Если ПолноеИмяОбъектаМД = "Документ.АвансовыйОтчет" И ОтложенноеПринятиеНДСКЗачету Тогда
									Если Запись.СчетДт = СсылкаНаСчет.Значение ИЛИ Запись.СчетКт = СсылкаНаСчет.Значение Тогда
										
										Если ТаблицаАвансовыеОтчетыДляИзмененияПроводок.Найти(Ссылка.Данные, "АвансовыйОтчет") = Неопределено Тогда
											НоваяСтрокаАвансовыйОтчет = ТаблицаАвансовыеОтчетыДляИзмененияПроводок.Добавить();
											НоваяСтрокаАвансовыйОтчет.АвансовыйОтчет = Ссылка.Данные; 
										КонецЕсли;
										
										УдаляемыеЗаписи.Добавить(Запись);
										Продолжить;
										
									КонецЕсли;
								КонецЕсли;
								
								Если ПолноеИмяОбъектаМД = "Документ.Сторнирование" И ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.АвансовыйОтчет") И ОтложенноеПринятиеНДСКЗачету Тогда
									Если Запись.СчетДт = СсылкаНаСчет.Значение ИЛИ Запись.СчетКт = СсылкаНаСчет.Значение Тогда
										
										Если ТаблицаАвансовыеОтчетыДляИзмененияПроводок.Найти(Ссылка.Данные, "Сторнирование") = Неопределено Тогда
											НоваяСтрокаАвансовыйОтчет = ТаблицаАвансовыеОтчетыДляИзмененияПроводок.Добавить();
											НоваяСтрокаАвансовыйОтчет.Сторнирование = Ссылка.Данные;
											НоваяСтрокаАвансовыйОтчет.АвансовыйОтчет = Объект.ДокументОснование; 
										КонецЕсли;
										
										УдаляемыеЗаписи.Добавить(Запись);
										Продолжить;
										
									КонецЕсли;
								КонецЕсли;
								
								Если Запись.СчетДт = СсылкаНаСчет.Значение И ОтложенноеПринятиеНДСКЗачету Тогда
									Запись.СубконтоДт.Вставить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Контрагенты, Контрагент);
									Запись.СубконтоДт.Вставить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.ДокументыПоступления, ДокументПоступления);
									НаборЗаписейИзменен = Истина;
								КонецЕсли;
								
								Если Запись.СчетКт = СсылкаНаСчет.Значение И ОтложенноеПринятиеНДСКЗачету Тогда
									Запись.СубконтоКт.Вставить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Контрагенты, Контрагент);
									Запись.СубконтоКт.Вставить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.ДокументыПоступления, ДокументПоступления);
									НаборЗаписейИзменен = Истина;
								КонецЕсли;
								
								ЗаменаСсылкиНаОбъект(Запись, "СчетДт", ТипСсылки, СсылкаНаСчет.Значение, НоваяСсылка, НаборЗаписейИзменен);
								ЗаменаСсылкиНаОбъект(Запись, "СчетКт", ТипСсылки, СсылкаНаСчет.Значение, НоваяСсылка, НаборЗаписейИзменен);
								
								// Приведение к типу субконто для пустой ссылки, исключающее возникновение записей типа Null
								Если Запись.СубконтоДт.Количество()< НоваяСсылка.ВидыСубконто.Количество() Тогда
									Для СчетчикСубконто = 1 По НоваяСсылка.ВидыСубконто.Количество() Цикл
										ВидСубконтоСчета = НоваяСсылка.ВидыСубконто[СчетчикСубконто-1].ВидСубконто;
										Если НЕ ЗначениеЗаполнено(Запись.СубконтоДт[ВидСубконтоСчета]) Тогда
											 Запись.СубконтоДт.Вставить(ВидСубконтоСчета);
										КонецЕсли;											
									КонецЦикла;
								КонецЕсли;
								
								Если Запись.СубконтоКт.Количество()< НоваяСсылка.ВидыСубконто.Количество() Тогда
									Для СчетчикСубконто = 1 По НоваяСсылка.ВидыСубконто.Количество() Цикл
										ВидСубконтоСчета = НоваяСсылка.ВидыСубконто[СчетчикСубконто-1].ВидСубконто;
										Если НЕ ЗначениеЗаполнено(Запись.СубконтоКт[ВидСубконтоСчета]) Тогда
											 Запись.СубконтоКт.Вставить(ВидСубконтоСчета);
										КонецЕсли;											
									КонецЦикла;
								КонецЕсли;
								
							Иначе
								ЗаменаСсылкиНаОбъект(Запись, "Счет", ТипСсылки, СсылкаНаСчет.Значение, НоваяСсылка, НаборЗаписейИзменен);
							КонецЕсли;
						КонецЕсли;
					КонецЦикла; // Для каждого Запись из НаборЗаписей Цикл
					
					Если ИмяКоллекцииРегистров = "РегистрБухгалтерии" И УдаляемыеЗаписи.Количество() > 0 Тогда
						Для Каждого УдаляемаяЗапись из УдаляемыеЗаписи Цикл
							НаборЗаписей.Удалить(УдаляемаяЗапись);
							НаборЗаписейИзменен = Истина;
							
							Комментарий = НСтр("ru = 'Удалены проводки по отложенному НДС документа <%1> в <%2>'");
							Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Комментарий, Ссылка.Данные, ПолноеИмяРегистра);
							ЗаписьЖурналаРегистрации(
								СтрШаблон(НСтр("ru = 'Обновление информационной базы. Замена ссылок на счета. %1'",КодЯзыка), ИмяКоллекцииОбъектовМД),
								УровеньЖурналаРегистрации.Информация,,, Комментарий);				
							ОбщегоНазначения.СообщитьПользователю(Комментарий);
						КонецЦикла;
					КонецЕсли;

				КонецЦикла; // Для Каждого СсылкаНаСчет Из Ссылка.Ссылка Цикл
				
				Если НаборЗаписейИзменен Тогда
							
					Попытка
						НаборЗаписей.ОбменДанными.Загрузка = Истина;
						НаборЗаписей.ДополнительныеСвойства.Вставить("ОбработкаДанных", Истина);
						НаборЗаписей.Записать();
						
						ДвиженияИзменены = Истина;
						
						Комментарий = НСтр("ru = 'Обработаны движения документа <%1> по <%2>'");
						Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Комментарий, Ссылка.Данные, ПолноеИмяРегистра);
						
						Если ИмяКоллекцииРегистров = "РегистрБухгалтерии" Тогда
							НовыйСчетСообщения = ?(ПолноеИмяРегистра = "РегистрБухгалтерии.Налоговый", "1422Н", "1422");
							Если ОтложенноеПринятиеНДСКЗачету Тогда
								Комментарий = Комментарий + Символы.ПС + НСтр("ru = '    - Изменены значения Субконто для счета <%1>.'");
								Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Комментарий, НовыйСчетСообщения);
							Иначе
								Комментарий = Комментарий + Символы.ПС + НСтр("ru = '    - Очищены значения Субконто для счета <%1>.'");
								Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Комментарий, НовыйСчетСообщения);
							КонецЕсли;
						Иначе
							Если РегистрСубконтоИзмерение ИЛИ РегистрСубконтоРеквизит ИЛИ РегистрСубконтоРесурс Тогда
								Комментарий = Комментарий + Символы.ПС + НСтр("ru = '    - Необходимо вручную проверить значения Субконто.'");
							КонецЕсли;
						КонецЕсли;
						
						ЗаписьЖурналаРегистрации(
							СтрШаблон(НСтр("ru = 'Обновление информационной базы. Замена ссылок на счета. %1'", КодЯзыка), ИмяКоллекцииОбъектовМД),
							УровеньЖурналаРегистрации.Информация,,, Комментарий);				
						ОбщегоНазначения.СообщитьПользователю(Комментарий);
					Исключение
						НовыйСчетСообщения = ?(ПолноеИмяРегистра = "РегистрБухгалтерии.Налоговый", "1422Н", "1422");
						Комментарий = НСтр("ru = 'Движения документа <%1> по <%2> не обработаны.
						                         |	Необходимо заменить значение <%3> на <%4>.'");
						Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							Комментарий, Ссылка.Данные, ПолноеИмяРегистра, Ссылка.Ссылка, НовыйСчетСообщения);
							
						Если ИмяКоллекцииРегистров = "РегистрБухгалтерии" Тогда
							Комментарий = Комментарий + Символы.ПС + НСтр("ru = ' Необходимо вручную проверить значения Субконто для счета <%1>.'");
							Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Комментарий, НовыйСчетСообщения);
						Иначе
							Если РегистрСубконтоИзмерение ИЛИ РегистрСубконтоРеквизит ИЛИ РегистрСубконтоРесурс Тогда
								Комментарий = Комментарий + НСтр("ru = ' Необходимо вручную проверить значения Субконто.'");
							КонецЕсли;
						КонецЕсли;
							
						ЗаписьЖурналаРегистрации(
							СтрШаблон(НСтр("ru = 'Обновление информационной базы. Замена ссылок на счета. %1'", КодЯзыка), ИмяКоллекцииОбъектовМД),
							УровеньЖурналаРегистрации.Ошибка,,, Комментарий + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));				
						ОбщегоНазначения.СообщитьПользователю(Комментарий);
					КонецПопытки;
							
				КонецЕсли;
				
			КонецЦикла; // Для Каждого Регистр из Ссылка.Метаданные.Движения Цикл
			
		КонецЕсли;
			
		Если ТаблицаАвансовыеОтчетыДляИзмененияПроводок.Количество() > 0 Тогда
			ЗаменаСсылокВПроводкахАвансовогоОтчета(ТаблицаАвансовыеОтчетыДляИзмененияПроводок, СписокЗаменяемыхОбъектов, ДвиженияИзменены);
		КонецЕсли;
			
		Если ОбъектИзменен Тогда
			Попытка
				Объект.ОбменДанными.Загрузка = Истина;
				Объект.Записать();
				
				Комментарий = НСтр("ru = 'Обработан объект <%1>'");
				Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Комментарий, Ссылка.Данные);
				
				Если СубконтоРеквизит Тогда
					Комментарий = Комментарий + Символы.ПС + НСтр("ru = '    - Необходимо вручную проверить значения реквизитов Субконто.'");
				КонецЕсли;
				
				ЗаписьЖурналаРегистрации(
					СтрШаблон(НСтр("ru = 'Обновление информационной базы. Замена ссылок на счета. %1'", КодЯзыка), ИмяКоллекцииОбъектовМД),
					УровеньЖурналаРегистрации.Информация,,, Комментарий);				
				ОбщегоНазначения.СообщитьПользователю(Комментарий);
				
				ЗафиксироватьТранзакцию();
			Исключение
				Комментарий = НСтр("ru = 'Объект не обработан автоматически: %1 <%2> <%3>.
				                         |	Необходимо вручную перевыбрать счет <%4>.'");
				Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					Комментарий, ИмяКоллекцииОбъектовМД, Ссылка.Метаданные.Синоним, Ссылка.Данные, "1422/1422Н");

				Если СубконтоРеквизит Тогда
					Комментарий = Комментарий + Символы.ПС + НСтр("ru = ' Необходимо вручную проверить значения реквизитов Субконто.'");
				КонецЕсли;
					
				ЗаписьЖурналаРегистрации(
					СтрШаблон(НСтр("ru = 'Обновление информационной базы. Замена ссылок на счета. %1'", КодЯзыка), ИмяКоллекцииОбъектовМД),
					УровеньЖурналаРегистрации.Ошибка,,, Комментарий + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));				
				ОбщегоНазначения.СообщитьПользователю(Комментарий);
				
				ОтменитьТранзакцию();
			КонецПопытки;
			
		ИначеЕсли ДвиженияИзменены И ТранзакцияАктивна() Тогда
			Попытка
				ЗафиксироватьТранзакцию();
			Исключение
				Инфо = ИнформацияОбОшибке();
				ЗаписьЖурналаРегистрации(
					НСтр("ru = 'Обновление информационной базы. Замена ссылок на счета'",  КодЯзыка),
					УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(Инфо));				
				ОбщегоНазначения.СообщитьПользователю(КраткоеПредставлениеОшибки(Инфо));
				ОтменитьТранзакцию();
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЦикла; // Для Каждого Ссылка Из ТаблицаОбъектов Цикл
	
КонецПроцедуры

Процедура ПолучениеСсылокНаНовыйОбъект(СписокЗаменяемыхОбъектов, СписокНовыхОбъектов, Ссылка, ТипСсылки, НоваяСсылка)
	
	// Получение ссылки на новый объект
	ТипСсылки = ТипЗнч(Ссылка.Ссылка);
	ИсходныйОбъект = СписокЗаменяемыхОбъектов.НайтиПоЗначению(Ссылка.Ссылка);
	ИндексОбъектаВСписке = СписокЗаменяемыхОбъектов.Индекс(ИсходныйОбъект);
	НоваяСсылка = СписокНовыхОбъектов[ИндексОбъектаВСписке].Значение;
	
КонецПроцедуры

Процедура ЗаменаСсылкиНаОбъект(Объект, ИмяСвойства, ТипСсылки, ЗаменяемаяСсылка, НоваяСсылка, ОбъектИзменен)
	
	Если ТипЗнч(Объект[ИмяСвойства]) = ТипСсылки Тогда
		Если Объект[ИмяСвойства] = ЗаменяемаяСсылка Тогда
			Объект[ИмяСвойства] = НоваяСсылка;
			ОбъектИзменен = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ЗаменаСсылкиНаОбъект()

Процедура ЗаменаСсылокВПроводкахАвансовогоОтчета(ТаблицаАвансовыеОтчетыДляИзмененияПроводок, СписокЗаменяемыхОбъектов, ДвиженияИзменены)
	
	Если СписокЗаменяемыхОбъектов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	АвансовыеОтчетыДляИзмененияПроводок = ТаблицаАвансовыеОтчетыДляИзмененияПроводок.ВыгрузитьКолонку("АвансовыйОтчет"); 
	
	ТаблицаДляЗамены = ПолучитьТаблицуЗаменыПроводок(АвансовыеОтчетыДляИзмененияПроводок);
	КодЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();	
	Если ТаблицаДляЗамены.Количество() > 0 Тогда
		
		ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
		
		НаборЗаписейБУ = РегистрыБухгалтерии.Типовой.СоздатьНаборЗаписей();
		НаборЗаписейНУ = РегистрыБухгалтерии.Налоговый.СоздатьНаборЗаписей();
		ОтборСтрок = Новый Структура();
		
		Для Каждого АвансовыйОтчет Из ТаблицаАвансовыеОтчетыДляИзмененияПроводок Цикл
			
			ОтборСтрок.Вставить("Ссылка", АвансовыйОтчет.АвансовыйОтчет);
			СтрокиДляПроводок = ТаблицаДляЗамены.Скопировать(ОтборСтрок);
			
			Если СтрокиДляПроводок.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Если АвансовыйОтчет.Сторнирование <> Неопределено Тогда
				НаборЗаписейБУ.Отбор.Регистратор.Установить(АвансовыйОтчет.Сторнирование);
			Иначе
				НаборЗаписейБУ.Отбор.Регистратор.Установить(АвансовыйОтчет.АвансовыйОтчет);
			КонецЕсли;
			НаборЗаписейБУ.Прочитать();
			
			СтрокаРеквизиты = СтрокиДляПроводок[0];
			
			Если СтрокаРеквизиты.ВалютаДокумента <> ВалютаРегламентированногоУчета Тогда
				// Сумма НДС в валюте рассчитывается в целом по документу и распределяется по строкам
				ИтогСуммаНДСРегл = ?(СтрокаРеквизиты.КратностьВзаиморасчетов = 0, 0,
				Окр(СтрокиДляПроводок.Итог("СуммаНДСВзаиморасчетов") * СтрокаРеквизиты.КурсВзаиморасчетов / СтрокаРеквизиты.КратностьВзаиморасчетов, 2));
				ОбщегоНазначенияБКВызовСервера.РаспределитьСуммуПоКолонкеТаблицы(
				ИтогСуммаНДСРегл, СтрокиДляПроводок, "СуммаНДС", "СуммаНДСВзаиморасчетов");
			КонецЕсли;
			
			ОрганизацияПлательщикНалогаНаПрибыль           = ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(СтрокаРеквизиты.Организация, СтрокаРеквизиты.Период);
			ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль = ОрганизацияПлательщикНалогаНаПрибыль И ПроцедурыНалоговогоУчета.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль(СтрокаРеквизиты.Организация, СтрокаРеквизиты.Период);
			
			НеобходимостьОтраженияВНУ = ОрганизацияПлательщикНалогаНаПрибыль И СтрокаРеквизиты.УчитыватьКПН И (ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль ИЛИ СтрокаРеквизиты.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ);
			
			Если НеобходимостьОтраженияВНУ Тогда
				Если АвансовыйОтчет.Сторнирование <> Неопределено Тогда
					НаборЗаписейНУ.Отбор.Регистратор.Установить(АвансовыйОтчет.Сторнирование);
				Иначе
					НаборЗаписейНУ.Отбор.Регистратор.Установить(АвансовыйОтчет.АвансовыйОтчет);
				КонецЕсли;
				НаборЗаписейНУ.Прочитать();
			КонецЕсли;
			
			НаборБУИзменен = Ложь;
			НаборНУИзменен = Ложь;
			
			Для Каждого СтрокаТаблицы Из СтрокиДляПроводок Цикл
				
				Если СтрокаТаблицы.СуммаНДС = 0 Тогда		
					Продолжить;		
				КонецЕсли;
				
				Проводка = НаборЗаписейБУ.Добавить();
				
				Если АвансовыйОтчет.Сторнирование <> Неопределено Тогда
					Проводка.Период       = СтрокаТаблицы.СторнированиеПериод;
				Иначе
					Проводка.Период       = СтрокаТаблицы.Период;
				КонецЕсли;
				
				Проводка.Организация  = СтрокаТаблицы.Организация;
				
				Если АвансовыйОтчет.Сторнирование <> Неопределено Тогда
					Проводка.Сумма           = СтрокаТаблицы.СуммаНДС * -1;
				Иначе
					Проводка.Сумма        = СтрокаТаблицы.СуммаНДС;
				КонецЕсли;
				
				Проводка.Содержание   = СтрокаТаблицы.Содержание;
				
				Проводка.СчетДт       = ПланыСчетов.Типовой.НДСНачисленныйПриПокупке;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаТаблицы.Контрагент);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаТаблицы.Ссылка);
				
				Проводка.СчетКт       = СтрокаТаблицы.КорСчет;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтрокаТаблицы.КорСубконто1);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтрокаТаблицы.КорСубконто2);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, СтрокаТаблицы.КорСубконто3);
				
				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				Проводка, СтрокаТаблицы.СтруктурноеПодразделение, СтрокаТаблицы.СтруктурноеПодразделение);
				
				Если ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт).Валютный Тогда
					
					Проводка.ВалютаДт = СтрокаТаблицы.ВалютаДокумента;
					Если АвансовыйОтчет.Сторнирование <> Неопределено Тогда
						Проводка.ВалютнаяСуммаДт = СтрокаТаблицы.СуммаНДСВзаиморасчетов * -1;
					Иначе
						Проводка.ВалютнаяСуммаДт = СтрокаТаблицы.СуммаНДСВзаиморасчетов;
					КонецЕсли;
					
				КонецЕсли;
				
				Если ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт).Валютный Тогда
					
					Проводка.ВалютаКт = СтрокаТаблицы.ВалютаДокумента;
					Если АвансовыйОтчет.Сторнирование <> Неопределено Тогда
						Проводка.ВалютнаяСуммаКт = СтрокаТаблицы.СуммаНДСВзаиморасчетов * -1;
					Иначе
						Проводка.ВалютнаяСуммаКт = СтрокаТаблицы.СуммаНДСВзаиморасчетов;
					КонецЕсли;
					
				КонецЕсли;
				
				НаборБУИзменен = Истина;
				
				// поводки по налоговому учету
				Если НеобходимостьОтраженияВНУ Тогда
					
					
					ПроводкаНУ = НаборЗаписейНУ.Добавить();
					
					Если АвансовыйОтчет.Сторнирование <> Неопределено Тогда
						ПроводкаНУ.Период       = СтрокаТаблицы.СторнированиеПериод;
					Иначе
						ПроводкаНУ.Период       = СтрокаТаблицы.Период;
					КонецЕсли;
					
					ПроводкаНУ.Организация  = СтрокаТаблицы.Организация;
					
					Если АвансовыйОтчет.Сторнирование <> Неопределено Тогда
						ПроводкаНУ.Сумма        = СтрокаТаблицы.СуммаНДС * -1;
					Иначе
						ПроводкаНУ.Сумма        = СтрокаТаблицы.СуммаНДС;
					КонецЕсли;
					ПроводкаНУ.Содержание   = СтрокаТаблицы.Содержание;
					
					ПроводкаНУ.СчетДт       = ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьСчетУчетаНДСКНачислениюНУ(Проводка.СчетДт, СтрокаТаблицы.Период);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 1, СтрокаТаблицы.Контрагент);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 2, СтрокаТаблицы.Ссылка);
					
					ПроводкаНУ.СчетКт       = ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьСчетРасчетовСКонтрагентомНУ(Проводка.СчетКт);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 1, СтрокаТаблицы.КорСубконто1);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 2, СтрокаТаблицы.КорСубконто2);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 3, СтрокаТаблицы.КорСубконто3);
					
					ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
					ПроводкаНУ, СтрокаТаблицы.СтруктурноеПодразделение, СтрокаТаблицы.СтруктурноеПодразделение);
					
					ПроцедурыНалоговогоУчета.ВидУчетаНУ(ПроводкаНУ, СтрокаТаблицы.ВидУчетаНУ);
					
					НаборНУИзменен = Истина;
					
				КонецЕсли;	
				
			КонецЦикла;
			
			Если НаборБУИзменен Тогда
				
				Попытка
					НаборЗаписейБУ.ОбменДанными.Загрузка = Истина;
					НаборЗаписейБУ.Записать();
					
					ДвиженияИзменены = Истина;
					
					Комментарий = НСтр("ru = 'Сформированы проводки БУ по отложенному НДС для документа <%1>.'");
					Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Комментарий, АвансовыйОтчет);
					ЗаписьЖурналаРегистрации(
					НСтр("ru = 'Обновление информационной базы. Замена ссылок на счета. Документы'", КодЯзыка),
					УровеньЖурналаРегистрации.Информация,,, Комментарий);				
					ОбщегоНазначения.СообщитьПользователю(Комментарий);
				Исключение
					Комментарий = НСтр("ru = 'Не удалось сформировать проводки БУ по отложенному НДС для документа <%1>.'");
					Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Комментарий, АвансовыйОтчет);
					ЗаписьЖурналаРегистрации(
					НСтр("ru = 'Обновление информационной базы. Замена ссылок на счета. Документы'",  КодЯзыка),
					УровеньЖурналаРегистрации.Ошибка,,, Комментарий + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));				
					ОбщегоНазначения.СообщитьПользователю(Комментарий);
				КонецПопытки;
				
			КонецЕсли;
			
			Если НаборНУИзменен Тогда
				
				Попытка
					НаборЗаписейНУ.ОбменДанными.Загрузка = Истина;
					НаборЗаписейНУ.Записать();
					
					ДвиженияИзменены = Истина;
					
					Комментарий = НСтр("ru = 'Сформированы проводки НУ по отложенному НДС для документа <%1>.'");
					Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Комментарий, АвансовыйОтчет);
					ЗаписьЖурналаРегистрации(
					НСтр("ru = 'Обновление информационной базы. Замена ссылок на счета. Документы'", КодЯзыка),
					УровеньЖурналаРегистрации.Информация,,, Комментарий);				
					ОбщегоНазначения.СообщитьПользователю(Комментарий);
				Исключение
					Комментарий = НСтр("ru = 'Не удалось сформировать проводки НУ по отложенному НДС для документа <%1>.'");
					Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Комментарий, АвансовыйОтчет);
					ЗаписьЖурналаРегистрации(
					НСтр("ru = 'Обновление информационной базы. Замена ссылок на счета. Документы'", КодЯзыка),
					УровеньЖурналаРегистрации.Ошибка,,, Комментарий + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));				
					ОбщегоНазначения.СообщитьПользователю(Комментарий);
				КонецПопытки;
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьТаблицуЗаменыПроводок(МассивОбъектов)
	
	ТаблицаДляЗамены = Новый ТаблицаЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	АвансовыйОтчет.Ссылка КАК Ссылка,
		|	АвансовыйОтчет.Дата КАК Период,
		|	АвансовыйОтчет.Организация КАК Организация,
		|	АвансовыйОтчет.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
		|	АвансовыйОтчет.УчитыватьКПН КАК УчитыватьКПН,
		|	АвансовыйОтчет.ВидУчетаНУ КАК ВидУчетаНУ,
		|	АвансовыйОтчет.СчетРасчетовСПодотчетнымЛицом КАК СчетРасчетовСПодотчетнымЛицом,
		|	АвансовыйОтчет.ФизЛицо КАК ПодотчетноеЛицо,
		|	АвансовыйОтчет.ВалютаДокумента КАК ВалютаДокумента,
		|	АвансовыйОтчет.КурсДокумента КАК КурсВзаиморасчетов,
		|	АвансовыйОтчет.КратностьДокумента КАК КратностьВзаиморасчетов,
		|	Сторнирование.Дата КАК СторнированиеПериод
		|ПОМЕСТИТЬ ВТ_Реквизиты
		|ИЗ
		|	Документ.АвансовыйОтчет КАК АвансовыйОтчет
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Сторнирование КАК Сторнирование
		|		ПО АвансовыйОтчет.Ссылка = Сторнирование.ДокументОснование
		|ГДЕ
		|	АвансовыйОтчет.Ссылка В(&МассивОбъектов)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	АвансовыйОтчетТовары.Ссылка КАК Ссылка,
		|	Реквизиты.Период КАК Период,
		|	Реквизиты.Организация КАК Организация,
		|	Реквизиты.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
		|	Реквизиты.УчитыватьКПН КАК УчитыватьКПН,
		|	Реквизиты.ВидУчетаНУ КАК ВидУчетаНУ,
		|	Реквизиты.ВалютаДокумента КАК ВалютаДокумента,
		|	Реквизиты.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
		|	Реквизиты.КратностьВзаиморасчетов КАК КратностьВзаиморасчетов,
		|	АвансовыйОтчетТовары.НомерСтроки КАК НомерСтроки,
		|	АвансовыйОтчетТовары.Номенклатура КАК ТМЗ,
		|	АвансовыйОтчетТовары.СуммаНДС КАК СуммаНДС,
		|	АвансовыйОтчетТовары.СуммаНДС КАК СуммаНДСВзаиморасчетов,
		|	АвансовыйОтчетТовары.Поставщик КАК Контрагент,
		|	АвансовыйОтчетТовары.СчетУчетаНДС КАК Счет,
		|	Реквизиты.СчетРасчетовСПодотчетнымЛицом КАК КорСчет,
		|	ЗНАЧЕНИЕ(Справочник.НалогиСборыОтчисления.НалогНаДобавленнуюСтоимость) КАК Субконто1,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог) КАК Субконто2,
		|	НЕОПРЕДЕЛЕНО КАК Субконто3,
		|	Реквизиты.ПодотчетноеЛицо КАК КорСубконто1,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыЗадолженностиПодотчетныхЛиц.ПриобретениеАктивов) КАК КорСубконто2,
		|	НЕОПРЕДЕЛЕНО КАК КорСубконто3,
		|	&Содержание КАК Содержание,
		|	0 КАК Порядок,
		|	Реквизиты.СторнированиеПериод КАК СторнированиеПериод
		|ИЗ
		|	Документ.АвансовыйОтчет.Товары КАК АвансовыйОтчетТовары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Реквизиты КАК Реквизиты
		|		ПО АвансовыйОтчетТовары.Ссылка = Реквизиты.Ссылка
		|ГДЕ
		|	АвансовыйОтчетТовары.Ссылка В(&МассивОбъектов)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	АвансовыйОтчетПрочее.Ссылка,
		|	Реквизиты.Период,
		|	Реквизиты.Организация,
		|	Реквизиты.СтруктурноеПодразделение,
		|	Реквизиты.УчитыватьКПН,
		|	Реквизиты.ВидУчетаНУ,
		|	Реквизиты.ВалютаДокумента,
		|	Реквизиты.КурсВзаиморасчетов,
		|	Реквизиты.КратностьВзаиморасчетов,
		|	АвансовыйОтчетПрочее.НомерСтроки,
		|	АвансовыйОтчетПрочее.Номенклатура,
		|	АвансовыйОтчетПрочее.СуммаНДС,
		|	АвансовыйОтчетПрочее.СуммаНДС,
		|	АвансовыйОтчетПрочее.Поставщик,
		|	АвансовыйОтчетПрочее.СчетУчетаНДС,
		|	Реквизиты.СчетРасчетовСПодотчетнымЛицом,
		|	ЗНАЧЕНИЕ(Справочник.НалогиСборыОтчисления.НалогНаДобавленнуюСтоимость),
		|	ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог),
		|	НЕОПРЕДЕЛЕНО,
		|	Реквизиты.ПодотчетноеЛицо,
		|	АвансовыйОтчетПрочее.ВидЗадолженностиПодотчетногоЛица,
		|	НЕОПРЕДЕЛЕНО,
		|	&Содержание,
		|	1,
		|	Реквизиты.СторнированиеПериод
		|ИЗ
		|	Документ.АвансовыйОтчет.Прочее КАК АвансовыйОтчетПрочее
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Реквизиты КАК Реквизиты
		|		ПО АвансовыйОтчетПрочее.Ссылка = Реквизиты.Ссылка
		|ГДЕ
		|	АвансовыйОтчетПрочее.Ссылка В(&МассивОбъектов)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка,
		|	Порядок
		|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.УстановитьПараметр("Содержание", НСтр("ru = 'Отложенное принятие НДС к зачету'"), ОбщегоНазначения.КодОсновногоЯзыка());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ТаблицаДляЗамены = РезультатЗапроса.Выгрузить();
	КонецЕсли;
	
	Возврат ТаблицаДляЗамены;
	
КонецФункции

Процедура УдалениеРегламентированнойФормы210() Экспорт
	
		// Удаление отчета РегламентированныйОтчетФорма210	
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	РегламентированныеОтчеты.Ссылка,
		               |	РегламентированныеОтчеты.ИсточникОтчета
		               |ИЗ
		               |	Справочник.РегламентированныеОтчеты КАК РегламентированныеОтчеты
		               |ГДЕ
		               |	РегламентированныеОтчеты.ИсточникОтчета В(&СписокИсточниковОтчета)";
					   
		СписокИсточников =  Новый СписокЗначений;
		СписокИсточников.Добавить("РегламентированныйОтчет210Форма");
					   
		Запрос.УстановитьПараметр("СписокИсточниковОтчета", СписокИсточников);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		МассивСсылок = Новый Массив(1);
		
		Пока Выборка.Следующий() Цикл
			
			МассивСсылок[0] = Выборка.Ссылка;
			ТаблицаСсылок = НайтиПоСсылкам(МассивСсылок);
			Если ТаблицаСсылок.Количество() = 0 Тогда
				ОтчетОбъект = Выборка.Ссылка.ПолучитьОбъект();
				ОтчетОбъект.Удалить();
			КонецЕсли;	
			
		КонецЦикла;
		
		// Обновление справочника "Регламентированные отчеты"
		ОбновлениеИнформационнойБазыБК.ОбновитьРегламентированныеОтчеты();
		
		// Переименовываем ссылку удаленного отчета "210" 
		// в документах "Регламентированный отчет" на вновь добавленные,
		// используемые до 2017 года.
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	РегламентированныйОтчет.Ссылка,
		               |	РегламентированныйОтчет.ИсточникОтчета
		               |ИЗ
		               |	Документ.РегламентированныйОтчет КАК РегламентированныйОтчет
		               |ГДЕ
		               |	РегламентированныйОтчет.ИсточникОтчета В(&СписокИсточниковОтчета)";
					   
		СписокИсточников =  Новый СписокЗначений;
		СписокИсточников.Добавить("РегламентированныйОтчет210Форма");
					   
		Запрос.УстановитьПараметр("СписокИсточниковОтчета", СписокИсточников);
			
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			ОтчетОбъект = Выборка.Ссылка.ПолучитьОбъект();
			Источник = Выборка.ИсточникОтчета;
			ОтчетОбъект.ИсточникОтчета = Источник + "До2017";
			ОтчетОбъект.ОбменДанными.Загрузка = Истина;
			ОтчетОбъект.Записать();
		
		КонецЦикла;
	
КонецПроцедуры

Процедура ЗаменитьВнешнююОбработкуВыгрузкаДанныхМТ102НаВстроенную() Экспорт
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда // В подчиненных узлах РИБ не выполняется
		Возврат;
	КонецЕсли;

	Попытка 
		
		ОбъектВыгрузкаДанныхМТ102 = Справочники.ДополнительныеОтчетыИОбработки.ОбработкаВыгрузкаДанныхМТ102.ПолучитьОбъект();
		ОбъектВыгрузкаДанныхМТ102.ВнешнийОбъектИспользовать = 0;
		ОбъектВыгрузкаДанныхМТ102.ОбменДанными.Загрузка     = Истина;
		ОбъектВыгрузкаДанныхМТ102.Записать();

	Исключение
		
		ТекстСообщения = НСтр(
		"ru = 'Не удалось обновить элемент ""Обработка ""Выгрузка данных в формате МТ-102"""" справочника ""%1"",
		|так как при обновлении произошла ошибка:
		|%2'");
		
		Комментарий = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Метаданные.Справочники.ДополнительныеОтчетыИОбработки.Представление(), Комментарий);
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Не удалось обновить ""Обработка ""Выгрузка данных в формате МТ-102"""".'", ОбщегоНазначения.КодОсновногоЯзыка()), 
		УровеньЖурналаРегистрации.Ошибка, , Справочники.ДополнительныеОтчетыИОбработки.ОбработкаВыгрузкаДанныхМТ102, Комментарий);
		
	КонецПопытки; 
	
КонецПроцедуры

Процедура ОбновитьНастройкиОтчетаРегистрНалоговогоУчетаПоИПНиСН() Экспорт
	
	НастройкиОтчетов = Новый ТаблицаЗначений;
	НастройкиОтчетов.Колонки.Добавить("КлючОбъекта");
	НастройкиОтчетов.Колонки.Добавить("КлючНастроек");
	НастройкиОтчетов.Колонки.Добавить("Пользователь");
	НастройкиОтчетов.Колонки.Добавить("Представление");
	
	ВыборкаНастроек = ХранилищеПользовательскихНастроекОтчетов.Выбрать();
	
	Пока ВыборкаНастроек.Следующий() Цикл 
		
		ИмяНастроекОтчета = СтрРазделить(ВыборкаНастроек.КлючОбъекта, "/", Ложь);
		Если ИмяНастроекОтчета.Количество() < 2 Тогда
			Продолжить; // Некорректная настройка.
		КонецЕсли;
		
		Если ИмяНастроекОтчета[0] = "Отчет.РегистрНалоговогоУчетаПоИПНиСН" Тогда
			
			НоваяСтрока = НастройкиОтчетов.Добавить();
			НоваяСтрока.КлючОбъекта = ВыборкаНастроек.КлючОбъекта;
			НоваяСтрока.КлючНастроек = ВыборкаНастроек.КлючНастроек;
			НоваяСтрока.Пользователь = ВыборкаНастроек.Пользователь;
			НоваяСтрока.Представление = ВыборкаНастроек.Представление;
			
		КонецЕсли;
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Истина);
	Для Каждого СтрокаНастройки Из НастройкиОтчетов Цикл
		Попытка
			ХранилищеПользовательскихНастроекОтчетов.Удалить(СтрокаНастройки.КлючОбъекта, СтрокаНастройки.КлючНастроек, СтрокаНастройки.Пользователь);
		Исключение
			ТекстСообщения = НСтр("ru='Операция не выполнена'", ОбщегоНазначения.КодОсновногоЯзыка());
			ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	КонецЦикла;
	УстановитьПривилегированныйРежим(Ложь);
	
	НастройкиОтчетов.Очистить();
	
	ВыборкаНастроек = ХранилищеСистемныхНастроек.Выбрать();
	
	Пока ВыборкаНастроек.Следующий() Цикл 
		
		ИмяНастроекОтчета = СтрРазделить(ВыборкаНастроек.КлючОбъекта, "/", Ложь);
		Если ИмяНастроекОтчета.Количество() < 2 Тогда
			Продолжить; // Некорректная настройка.
		КонецЕсли;
		
		Если СтрНайти(ИмяНастроекОтчета[0],"РегистрНалоговогоУчетаПоИПНиСН") > 0 Тогда
			
			НоваяСтрока = НастройкиОтчетов.Добавить();
			НоваяСтрока.КлючОбъекта = ВыборкаНастроек.КлючОбъекта;
			НоваяСтрока.КлючНастроек = ВыборкаНастроек.КлючНастроек;
			НоваяСтрока.Пользователь = ВыборкаНастроек.Пользователь;
			НоваяСтрока.Представление = ВыборкаНастроек.Представление;
			
		КонецЕсли;
		
	КонецЦикла;

	УстановитьПривилегированныйРежим(Истина);
	Для Каждого СтрокаНастройки Из НастройкиОтчетов Цикл
		Попытка
			ХранилищеСистемныхНастроек.Удалить(СтрокаНастройки.КлючОбъекта, СтрокаНастройки.КлючНастроек, СтрокаНастройки.Пользователь);
		Исключение
			ТекстСообщения = НСтр("ru='Операция не выполнена'", ОбщегоНазначения.КодОсновногоЯзыка());
			ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	КонецЦикла;
	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры

Процедура ЗаполнитьСоответствиеСчетаБУ1424() Экспорт
		
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда // В подчиненных узлах РИБ не выполняется
		Возврат;
	КонецЕсли;

	СчетБУ = ПланыСчетов.Типовой.ИзлишнеУплаченныеВБюджетСуммыНДС;
	СчетНУ = ПланыСчетов.Налоговый.ИзлишнеУплаченныеВБюджетСуммыНДС;
		
	ОбъектСчетБУ = СчетБУ.ПолучитьОбъект();
	ОбъектСчетБУ.СчетНУ = СчетНУ;
	
	Попытка
		ОбъектСчетБУ.Записать();
	Исключение
		ТекстСообщения = НСтр("ru='Операция не выполнена'", ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;	
	
КонецПроцедуры

#Область УправлениеДоступом

Процедура УстановитьКонстантыОграниченийДоступНаУровнеЗаписей() Экспорт
	
	Если Константы.УдалитьИспользоватьОграниченияПравДоступаНаУровнеЗаписей.Получить() Тогда
		
		Константы.ОграничиватьДоступНаУровнеЗаписей.Установить(Истина);
		
		НаборЗаписей = РегистрыСведений["УдалитьНастройкиПравДоступаПользователей"].СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ВидОбъектаДоступа.Установить(Перечисления.УдалитьВидыОбъектовДоступа.ФизическиеЛица);
		НаборЗаписей.Прочитать();
		Если НаборЗаписей.Количество() > 0 Тогда
			Константы.ОграничиватьДоступНаУровнеЗаписейФизическиеЛица.Установить(Истина);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаменаРолиДоступаПользователь() Экспорт 
	
	Если Не ПравоДоступа("Администрирование", Метаданные) Тогда
		Возврат;
	КонецЕсли;
	
	//Если ПользователиСлужебный.ЗапретРедактированияРолей() Тогда
	//	Возврат;
	//КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого ПользовательИБ Из ПользователиИнформационнойБазы.ПолучитьПользователей() Цикл
		
		Если ПользовательИБ.Роли.Содержит(Метаданные.Роли.УдалитьПользователь) Тогда
			
			ПользовательИБ.Роли.Удалить(Метаданные.Роли.УдалитьПользователь);
			
			ПользовательИБ.Роли.Добавить(Метаданные.Роли.БазовыеПраваБК);
			ПользовательИБ.Роли.Добавить(Метаданные.Роли.БазовыеПраваБСП);
			ПользовательИБ.Роли.Добавить(Метаданные.Роли.ЧтениеОбменовДанными);
			
			Попытка
				ПользовательИБ.Записать();
			Исключение
							
				Комментарий = НСтр("ru = 'При записи пользователя ""%1"" произошла ошибка:
				|%2'");
				
				ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Комментарий, ПользовательИБ.Имя, ПодробноеПредставлениеОшибки);
				
				ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка, , , Комментарий);				
				ОбщегоНазначения.СообщитьПользователю(Комментарий);
			КонецПопытки;
			
			ЗаписьЖурналаРегистрации(СтрШаблон(НСтр("ru = 'Записан пользователь %1'", ОбщегоНазначения.КодОсновногоЯзыка()), Строка(ПользовательИБ)));
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры	

// Процедура заполняет в документах табличную часть «Физические лица», 
// добавленную для целей ограничения доступа.
// Взята из ЗУП
Процедура ЗаполнениеТабличнойЧастиФизическиеЛица() Экспорт
	// Выявляем состав документов, имеющих табличную часть Физические лица.
	// В соответствие накапливаем сведения о табличных частях документов, 
	// имеющих реквизиты типа Физическое лицо.
	
	ОбрабатываемыеДокументы = Новый Соответствие;
	
	ТипыПодписки = Метаданные.ПодпискиНаСобытия.ПередЗаписьюДокументаЗаполнитьТабличнуюЧастьФизтческиеЛица.Источник.Типы();
	
	Для Каждого МетаданныеДокумента Из Метаданные.Документы Цикл
		Если ТипыПодписки.Найти(Тип("ДокументОбъект." + МетаданныеДокумента.Имя)) = Неопределено Тогда
			Продолжить;
		КонецЕсли;	
		Если МетаданныеДокумента.ТабличныеЧасти.Найти("ФизическиеЛица") <> Неопределено Тогда
			ТабличныеЧастиСФизлицами = Новый Соответствие;
			Для Каждого ТабличнаяЧасть Из МетаданныеДокумента.ТабличныеЧасти Цикл
				Если ТабличнаяЧасть.Имя = "ФизическиеЛица" Тогда
					Продолжить;
				КонецЕсли;
				Для Каждого Реквизит Из ТабличнаяЧасть.Реквизиты Цикл
					Типы = Реквизит.Тип.Типы();
					Если Типы[0] = Тип("СправочникСсылка.ФизическиеЛица") И Типы.Количество() = 1 Тогда
						ТабличныеЧастиСФизлицами.Вставить(ТабличнаяЧасть.Имя, Реквизит.Имя);
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			Если ТабличныеЧастиСФизлицами.Количество() > 0 Тогда
				ОбрабатываемыеДокументы.Вставить(МетаданныеДокумента.Имя, ТабличныеЧастиСФизлицами);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ОбрабатываемыеДокументы.Количество() = 0 Тогда
		// Нет документов, подлежащих обработке.
		Возврат;
	КонецЕсли;
	
	// Составляем запрос к документам
	// - из табличных частей документов, имеющих реквизиты типа Физическое лицо, 
	//	выбираем физических лиц,
	// - сравниваем с табличной частью Физические лица,
	// - заполняем табличную часть, если есть различия.
	
	ШаблонТекстаНачало = 
	"ВЫБРАТЬ %5
	|	%1.Ссылка КАК Ссылка,
	|	%1.%3 КАК ФизическоеЛицо
	|ПОМЕСТИТЬ %4
	|ИЗ
	|	Документ.%2.%1 КАК %1";
	
	ШаблонТекстаПродолжение = "
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	%1.Ссылка,
	|	%1.%3
	|ИЗ
	|	Документ.%2.%1 КАК %1";
	
	ТекстЗапросаКТабличнымЧастям = "";
	ТекстЗапросаКТабличнойЧастиФизическиеЛица = "";
	Для Каждого ДанныеДокумента Из ОбрабатываемыеДокументы Цикл
		ИмяДокумента = ДанныеДокумента.Ключ;
		Для Каждого КлючИЗначение Из ДанныеДокумента.Значение Цикл
			ИмяТабличнойЧасти = КлючИЗначение.Ключ;
			ИмяРеквизита = КлючИЗначение.Значение;
			Шаблон = ?(ПустаяСтрока(ТекстЗапросаКТабличнымЧастям), ШаблонТекстаНачало, ШаблонТекстаПродолжение);
			ТекстЗапросаКТабличнымЧастям = ТекстЗапросаКТабличнымЧастям + 
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					Шаблон, ИмяТабличнойЧасти, ИмяДокумента, ИмяРеквизита, "ФизлицаДокументов", "РАЗЛИЧНЫЕ");
		КонецЦикла;
		Шаблон = ?(ПустаяСтрока(ТекстЗапросаКТабличнойЧастиФизическиеЛица), ШаблонТекстаНачало, ШаблонТекстаПродолжение);
		ТекстЗапросаКТабличнойЧастиФизическиеЛица = ТекстЗапросаКТабличнойЧастиФизическиеЛица + 
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				Шаблон, "ФизическиеЛица", ИмяДокумента, "ФизическоеЛицо", "ФизлицаТабличнойЧасти");
	КонецЦикла;
	
	ТекстЗапроса = 
	ТекстЗапросаКТабличнымЧастям + ";" + 
	ТекстЗапросаКТабличнойЧастиФизическиеЛица + ";" + 
	"ВЫБРАТЬ
	|	ФизлицаДокументов.Ссылка
	|ПОМЕСТИТЬ НедоЗаполненныеДокументы
	|ИЗ
	|	ФизлицаДокументов КАК ФизлицаДокументов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ФизлицаТабличнойЧасти КАК ФизлицаТабличнойЧасти
	|		ПО (ФизлицаТабличнойЧасти.Ссылка = ФизлицаДокументов.Ссылка)
	|			И (ФизлицаТабличнойЧасти.ФизическоеЛицо = ФизлицаДокументов.ФизическоеЛицо)
	|ГДЕ
	|	ФизлицаТабличнойЧасти.ФизическоеЛицо ЕСТЬ NULL 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ФизлицаДокументов.Ссылка,
	|	ФизлицаДокументов.ФизическоеЛицо
	|ИЗ
	|	ФизлицаДокументов КАК ФизлицаДокументов
	|ГДЕ
	|	ФизлицаДокументов.Ссылка В
	|			(ВЫБРАТЬ
	|				НедоЗаполненныеДокументы.Ссылка
	|			ИЗ
	|				НедоЗаполненныеДокументы)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ФизлицаДокументов.Ссылка";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Ссылка") Цикл
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(ДокументОбъект.ФизическиеЛица.Добавить(), Выборка);
		КонецЦикла;
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		Попытка
			ДокументОбъект.Записать();
		Исключение
			ТекстСообщения = НСтр("ru='При записи документа %1  произошла ошибка: %2'", ОбщегоНазначения.КодОсновногоЯзыка());
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ДокументОбъект, ОписаниеОшибки());
			ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	КонецЦикла;	
	
КонецПроцедуры

Процедура ЗаполнитьПрофилиИГруппыДоступаПоУмолчанию() Экспорт
	     		
	ПараметрыОбновления = Новый Структура;
	// Свойства обновления поставляемых профилей.
	ПараметрыОбновления.Вставить("ОбновлятьИзмененныеПрофили", Истина);
	ПараметрыОбновления.Вставить("ЗапретитьИзменениеПрофилей", Истина);
	// Свойства обновления групп доступа поставляемых профилей.
	ПараметрыОбновления.Вставить("ОбновлятьГруппыДоступа", Истина);
	ПараметрыОбновления.Вставить("ОбновлятьГруппыДоступаСУстаревшимиНастройками", Ложь);
	
	ОписанияПрофилей = Новый Массив;
	
	УправлениеДоступомБК.ПриЗаполненииПоставляемыхПрофилейГруппДоступа(ОписанияПрофилей, ПараметрыОбновления);
	            	
    ВключитьПользователейВГруппыДоступа();
	
КонецПроцедуры	

Процедура ВключитьПользователейВГруппыДоступа()

	ПрофильБухгалтер 		= Справочники.ПрофилиГруппДоступа.ПоставляемыйПрофильПоИдентификатору("75fa0eca-98aa-11df-b54f-e0cb4ed5f655");
	ПрофильГлавныйБухгалтер = Справочники.ПрофилиГруппДоступа.ПоставляемыйПрофильПоИдентификатору("75fa0ecb-98aa-11df-b54f-e0cb4ed5f655");
	ПрофильТолькоПросмотр 	= Справочники.ПрофилиГруппДоступа.ПоставляемыйПрофильПоИдентификатору("45ce5549-ade3-11e0-9746-00179a3853da");
	
	ПрофильКадровик 		= Справочники.ПрофилиГруппДоступа.ПоставляемыйПрофильПоИдентификатору("17a7b55d-4f89-11e4-9e14-005056c00008");
	ПрофильРасчетчик 		= Справочники.ПрофилиГруппДоступа.ПоставляемыйПрофильПоИдентификатору("11851213-0f5f-11e0-96c1-e0cb4ed5f655");
	       	
	Для Каждого ПользовательИБ Из ПользователиИнформационнойБазы.ПолучитьПользователей() Цикл
		ЗаписыватьПользователя = Ложь;
		Если ПользовательИБ.Роли.Содержит(Метаданные.Роли.ПолныеПрава) Тогда
			НайденныйПользователь = Справочники.Пользователи.НайтиПоРеквизиту("ИдентификаторПользователяИБ", ПользовательИБ.УникальныйИдентификатор);
			Если ЗначениеЗаполнено(НайденныйПользователь) Тогда
				УправлениеДоступомБК.ВключитьОтключитьПрофильПользователя(НайденныйПользователь, УправлениеДоступом.ПрофильАдминистратор(), Истина);
				ЗаполнитьПользователяДополнительныхПрав(НайденныйПользователь, Метаданные.Роли.ПолныеПрава, Перечисления.УдалитьНаборПравПользователей.ПолныеПрава);
			КонецЕсли;
		КонецЕсли;
		
		Если ПользовательИБ.Роли.Содержит(Метаданные.Роли.АдминистраторСистемы) 
			И Не (ПользовательИБ.Роли.Содержит(Метаданные.Роли.УдалитьТолькоПросмотр)
					ИЛИ ПользовательИБ.Роли.Содержит(Метаданные.Роли.УдалитьГлавныйБухгалтер))Тогда
			НайденныйПользователь = Справочники.Пользователи.НайтиПоРеквизиту("ИдентификаторПользователяИБ", ПользовательИБ.УникальныйИдентификатор);
			Если ЗначениеЗаполнено(НайденныйПользователь) Тогда
				УправлениеДоступомБК.ВключитьОтключитьПрофильПользователя(НайденныйПользователь, УправлениеДоступом.ПрофильАдминистратор(), Истина);
			КонецЕсли;
		КонецЕсли;	
		
		Если ПользовательИБ.Роли.Содержит(Метаданные.Роли.УдалитьБухгалтер) 
			И Не ПользовательИБ.Роли.Содержит(Метаданные.Роли.УдалитьГлавныйБухгалтер) Тогда
			НайденныйПользователь = Справочники.Пользователи.НайтиПоРеквизиту("ИдентификаторПользователяИБ", ПользовательИБ.УникальныйИдентификатор);
			Если ЗначениеЗаполнено(НайденныйПользователь) Тогда
				УправлениеДоступомБК.ВключитьОтключитьПрофильПользователя(НайденныйПользователь, ПрофильБухгалтер, Истина);
				УправлениеДоступомБК.ВключитьОтключитьПрофильПользователя(НайденныйПользователь, ПрофильКадровик, Истина);
				УправлениеДоступомБК.ВключитьОтключитьПрофильПользователя(НайденныйПользователь, ПрофильРасчетчик, Истина);
				
				ЗаполнитьПользователяДополнительныхПрав(НайденныйПользователь, Метаданные.Роли.УдалитьБухгалтер, Перечисления.УдалитьНаборПравПользователей.УдалитьБухгалтер);
			КонецЕсли;	
			ПользовательИБ.Роли.Удалить(Метаданные.Роли.УдалитьБухгалтер);
			ЗаписыватьПользователя = Истина;
		КонецЕсли;
		
		Если ПользовательИБ.Роли.Содержит(Метаданные.Роли.УдалитьГлавныйБухгалтер) Тогда
			НайденныйПользователь = Справочники.Пользователи.НайтиПоРеквизиту("ИдентификаторПользователяИБ", ПользовательИБ.УникальныйИдентификатор);
			Если ЗначениеЗаполнено(НайденныйПользователь) Тогда
				УправлениеДоступомБК.ВключитьОтключитьПрофильПользователя(НайденныйПользователь, ПрофильГлавныйБухгалтер, Истина);
				ЗаполнитьПользователяДополнительныхПрав(НайденныйПользователь, Метаданные.Роли.УдалитьГлавныйБухгалтер, Перечисления.УдалитьНаборПравПользователей.УдалитьГлавныйБухгалтер);
			КонецЕсли;
			ПользовательИБ.Роли.Удалить(Метаданные.Роли.УдалитьГлавныйБухгалтер);
			ЗаписыватьПользователя = Истина;
		КонецЕсли;
		
		Если ПользовательИБ.Роли.Содержит(Метаданные.Роли.УдалитьТолькоПросмотр) Тогда
			НайденныйПользователь = Справочники.Пользователи.НайтиПоРеквизиту("ИдентификаторПользователяИБ", ПользовательИБ.УникальныйИдентификатор);
			Если ЗначениеЗаполнено(НайденныйПользователь) Тогда
				УправлениеДоступомБК.ВключитьОтключитьПрофильПользователя(НайденныйПользователь, ПрофильТолькоПросмотр, Истина);
			КонецЕсли;	
			ПользовательИБ.Роли.Удалить(Метаданные.Роли.УдалитьТолькоПросмотр);
			ЗаписыватьПользователя = Истина;
		КонецЕсли;
		
		Если ЗаписыватьПользователя Тогда	
			Попытка
				ПользовательИБ.Записать();
			Исключение
							
				Комментарий = НСтр("ru = 'При записи пользователя ""%1"" произошла ошибка:
				|%2'");
				
				ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Комментарий, ПользовательИБ.Имя, ПодробноеПредставлениеОшибки);
				
				ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка, , , Комментарий);				
				ОбщегоНазначения.СообщитьПользователю(Комментарий);
			КонецПопытки;
			
			ЗаписьЖурналаРегистрации("Записан пользователь " + Строка(ПользовательИБ));
		КонецЕсли;
	КонецЦикла;	
	
	ПрофильБухгалтер = ПрофильБухгалтер.ПолучитьОбъект();
	ПрофильБухгалтер.Записать();
	
	ПрофильГлавныйБухгалтер = ПрофильГлавныйБухгалтер.ПолучитьОбъект();
	ПрофильГлавныйБухгалтер.Записать();

	ПрофильТолькоПросмотр = ПрофильТолькоПросмотр.ПолучитьОбъект();
	ПрофильТолькоПросмотр.Записать();
	
	ПрофильКадровик = ПрофильКадровик.ПолучитьОбъект();
	ПрофильКадровик.Записать();
	
	ПрофильРасчетчик = ПрофильРасчетчик.ПолучитьОбъект();
	ПрофильРасчетчик.Записать();
	
КонецПроцедуры	

Процедура ПереносОграничейДоступа() Экспорт
	
	Если Константы.УдалитьИспользоватьОграниченияПравДоступаНаУровнеЗаписей.Получить() Тогда
		Запрос 			= Новый Запрос;
		Запрос.Текст 	= "ВЫБРАТЬ
		|	УдалитьНастройкиПравДоступаПользователей.ОбъектДоступа КАК ОбъектДоступа,
		|	УдалитьНастройкиПравДоступаПользователей.ВидОбъектаДоступа КАК ВидОбъектаДоступа,
		|	ГруппыДоступа.Ссылка КАК ГруппаДоступа
		|ИЗ
		|	РегистрСведений.УдалитьНастройкиПравДоступаПользователей КАК УдалитьНастройкиПравДоступаПользователей
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГруппыПользователей.Состав КАК ГруппыПользователейСостав
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГруппыДоступа КАК ГруппыДоступа
		|			ПО ГруппыПользователейСостав.Пользователь = ГруппыДоступа.Пользователь
		|		ПО УдалитьНастройкиПравДоступаПользователей.Пользователь = ГруппыПользователейСостав.Ссылка
		|ГДЕ
		|	(УдалитьНастройкиПравДоступаПользователей.Чтение = ИСТИНА
		|			ИЛИ УдалитьНастройкиПравДоступаПользователей.Запись = ИСТИНА)
		|ИТОГИ ПО
		|	ГруппаДоступа,
		|	ВидОбъектаДоступа";		 	
		
		ВыборкаЗапросаГруппаДоступа = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаЗапросаГруппаДоступа.Следующий() Цикл
			ГруппаДоступа						= ВыборкаЗапросаГруппаДоступа.ГруппаДоступа.ПолучитьОбъект();
			ГруппаДоступа.ОбменДанными.Загрузка = Истина;
			ВыборкаЗапросаВидОбъектаДоступа		= ВыборкаЗапросаГруппаДоступа.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			ГруппаДоступа.ЗначенияДоступа.Очистить();
			Пока ВыборкаЗапросаВидОбъектаДоступа.Следующий() Цикл
				
				ВидОбъектаДоступа	= ВыборкаЗапросаВидОбъектаДоступа.ВидОбъектаДоступа;
				//Определим вид доступа
				Если ВидОбъектаДоступа = Перечисления.УдалитьВидыОбъектовДоступа.Кассы Тогда
					ВидДоступа = Справочники.Кассы.ПустаяСсылка();
				ИначеЕсли ВидОбъектаДоступа = Перечисления.УдалитьВидыОбъектовДоступа.Организации Тогда
					ВидДоступа = Справочники.Организации.ПустаяСсылка();
				ИначеЕсли ВидОбъектаДоступа = Перечисления.УдалитьВидыОбъектовДоступа.Склады Тогда
					ВидДоступа = Справочники.Склады.ПустаяСсылка();
				ИначеЕсли ВидОбъектаДоступа = Перечисления.УдалитьВидыОбъектовДоступа.СтруктурныеПодразделения Тогда
					ВидДоступа = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
				ИначеЕсли ВидОбъектаДоступа = Перечисления.УдалитьВидыОбъектовДоступа.ФизическиеЛица Тогда
					ВидДоступа 			= Справочники.ФизическиеЛица.ПустаяСсылка();
				КонецЕсли;	
				
				ВыборкаЗапроса 	= ВыборкаЗапросаВидОбъектаДоступа.Выбрать();
				Пока ВыборкаЗапроса.Следующий() Цикл
					//Укажем что разрешены только выбраные значения
					ПараметрыОтбора = Новый Структура;
					ПараметрыОтбора.Вставить("ВидДоступа", ВидДоступа);
					МассивСтрок 	= ГруппаДоступа.ВидыДоступа.НайтиСтроки(ПараметрыОтбора);
					Если МассивСтрок.Количество() = 0 Тогда
						СтрокаВидДоступа	= ГруппаДоступа.ВидыДоступа.Добавить();
					Иначе
						СтрокаВидДоступа	= МассивСтрок[0];
					КонецЕсли;	
					СтрокаВидДоступа.ВсеРазрешены 			= Ложь;
					//Укажем какие здачения доступны
					СтрокаЗначенияДоступа 					= ГруппаДоступа.ЗначенияДоступа.Добавить();
					СтрокаЗначенияДоступа.ВидДоступа 		= ВидДоступа;
					СтрокаЗначенияДоступа.ЗначениеДоступа 	= ВыборкаЗапроса.ОбъектДоступа;
				КонецЦикла;	
			КонецЦикла;	
			Попытка
				ГруппаДоступа.Записать();
			Исключение
				
				Комментарий = НСтр("ru = 'При записи группы доступа ""%1"" произошла ошибка:
				|%2'");
				
				ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Комментарий, ГруппаДоступа, ПодробноеПредставлениеОшибки);
				
				ЗаписьЖурналаРегистрации(Комментарий, УровеньЖурналаРегистрации.Ошибка, , , Комментарий);				
				ОбщегоНазначения.СообщитьПользователю(Комментарий);
			КонецПопытки;
		КонецЦикла;	
	КонецЕсли;	
	
КонецПроцедуры	

// Функция создает новую группу пользователей для пары "Пользователь-Роль"
// Параметры:
//  СтрокаПользователя - обрабатываемя строка таблицы пользователей
//	Роль - роль, для которой создается группа пользователей
//
// Возвращаемое значение:
//  Ссылка на созданную группу, или пустая ссылка, если создание группы не выполнялось
//
Функция СоздатьНовуюГруппуПользователейПоРолиИПользователю(Пользователь, ИмяГруппы); 
	
	Группа = Справочники.ГруппыПользователей.НайтиПоНаименованию(ИмяГруппы);
	
	Если Не Группа = Справочники.ГруппыПользователей.ПустаяСсылка() Тогда
		ОбГруппа = Группа.ПолучитьОбъект();
	Иначе
		ОбГруппа = Справочники.ГруппыПользователей.СоздатьЭлемент();
		ОбГруппа.Наименование = ИмяГруппы;
	КонецЕсли;
	
	//посмотрим может пользователь уже добавлен
	Поискпользователя = ОбГруппа.Состав.Найти(Пользователь, "Пользователь");
	Если Не ПоискПользователя = Неопределено Тогда
		Возврат обГруппа.Ссылка;
	КонецЕсли;
	
	НовПользователь = ОбГруппа.Состав.Добавить();
	НовПользователь.Пользователь = Пользователь;
	Попытка
		ОбГруппа.Записать();
		Возврат обГруппа.Ссылка;
	Исключение
		Возврат Справочники.ГруппыПользователей.ПустаяСсылка();
	КонецПопытки  	
	
КонецФункции // СоздатьНовуюГруппуПользователейПоРолиИПользователю()
      
// Для созданной группы пользователей переносятся настройки механихма дополнительных прав
// Параметры:
//  ГруппаПользователя - группа пользователей
//  Роль - роль, соответствующая группе пользователей
//
Процедура ЗаполнитьПользователяДополнительныхПрав(Пользователь, Роль, ЗначениеНабораПрав)
	
	Если Метаданные.РегистрыСведений.Найти("ЗначенияПравПользователя") = Неопределено Тогда
		Возврат;
	КонецЕсли; 	
	
	Если Роль = Метаданные.Роли.ПолныеПрава Тогда
		ГруппаПользователя = Пользователь
	Иначе
		ГруппаПользователя = СоздатьНовуюГруппуПользователейПоРолиИПользователю(Пользователь, ЗначениеНабораПрав)	
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений["ЗначенияПравПользователя"].СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.УдалитьНаборПрав.Установить(ЗначениеНабораПрав);
	НаборЗаписей.Прочитать();
	ТаблицаНабора = НаборЗаписей.Выгрузить();
	НаборЗаписей.Очистить();
	Если ТаблицаНабора.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	Если ЗначениеЗаполнено(ТаблицаНабора[0].Пользователь) Тогда
		Возврат;
	КонецЕсли;	
	
	ТаблицаНабора.ЗаполнитьЗначения(ГруппаПользователя, "Пользователь");
	НаборЗаписей.Загрузить(ТаблицаНабора);
	НаборЗаписей.Записать();
	
КонецПроцедуры // ПереносСтарыхНастроекДополнительныхПрав()

Процедура ОчиститьРС_ОбъектыДоступаДокументов() Экспорт
	НаборЗаписейРС = РегистрыСведений.УдалитьОбъектыДоступаДокументов.СоздатьНаборЗаписей();
	НаборЗаписейРС.Прочитать();
	НаборЗаписейРС.Очистить();
	НаборЗаписейРС.Записать();
КонецПроцедуры	
#КонецОбласти

Процедура ОбновитьПорядокСчетна3210H() Экспорт 
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда // В подчиненных узлах РИБ не выполняется
		Возврат;
	КонецЕсли;
	
	Счет3210Н 				= ПланыСчетов.Налоговый.ОбязательстваПоСоциальномуСтрахованию_.ПолучитьОбъект();
	Счет3210Н.Порядок 		= СокрЛП(Счет3210Н.Порядок);
	Счет3210Н.ОбменДанными.Загрузка 	= Истина;
	Попытка
		Счет3210Н.Записать();
	Исключение
		ТекстСообщения = НСтр("ru='при записи элемента плана счетов %1  произошла ошибка: %2'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Счет3210Н, ОписаниеОшибки());
		ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
КонецПроцедуры	

Процедура ОбновитьПрофилиДоступаПоУмолчанию() Экспорт
	    		
	ПараметрыОбновления = Новый Структура;
	// Свойства обновления поставляемых профилей.
	ПараметрыОбновления.Вставить("ОбновлятьИзмененныеПрофили", Истина);
	ПараметрыОбновления.Вставить("ЗапретитьИзменениеПрофилей", Истина);
	// Свойства обновления групп доступа поставляемых профилей.
	ПараметрыОбновления.Вставить("ОбновлятьГруппыДоступа", Истина);
	ПараметрыОбновления.Вставить("ОбновлятьГруппыДоступаСУстаревшимиНастройками", Ложь);
	
	ОписанияПрофилей = Новый Массив;
	
	УправлениеДоступомБК.ПриЗаполненииПоставляемыхПрофилейГруппДоступа(ОписанияПрофилей, ПараметрыОбновления);
	
КонецПроцедуры	

Процедура ЗаполнениеРегистраСведенийЗначениеГруппДоступаПоУмолчанию() Экспорт 
	Если Не ПолучитьФункциональнуюОпцию("ОграничиватьДоступНаУровнеЗаписей") Тогда
		НаборЗаписей 										= РегистрыСведений.ЗначенияГруппДоступаПоУмолчанию.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ТипЗначенийДоступа.ВидСравнения 	= ВидСравнения.Равно;
		НаборЗаписей.Отбор.ТипЗначенийДоступа.Значение		= Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
		НаборЗаписей.Отбор.ТипЗначенийДоступа.Использование	= Истина;
		НаборЗаписей.Прочитать();
		ГруппаДоступаАдминистраторы = УправлениеДоступом.ГруппаДоступаАдминистраторы();
		Для Каждого СтрокаНабораЗаписей Из НаборЗаписей Цикл
			Если СтрокаНабораЗаписей.ГруппаДоступа <> ГруппаДоступаАдминистраторы Тогда
				СтрокаНабораЗаписей.ВсеРазрешены 				= Ложь;
				СтрокаНабораЗаписей.ВсеРазрешеныБезИсключений 	= Ложь;
			КонецЕсли;	
		КонецЦикла;
		НаборЗаписей.Записать(Истина);
	КонецЕсли;	
КонецПроцедуры	

Процедура ОбновитьНастройкуКлиентскогоПриложения() Экспорт
	
	НастройкиКлиентскогоПриложения = Новый НастройкиКлиентскогоПриложения;
	НастройкиКлиентскогоПриложения.ВариантИнтерфейсаКлиентскогоПриложения 	= ВариантИнтерфейсаКлиентскогоПриложения.Такси;
	НастройкиКлиентскогоПриложения.ВариантМасштабаФормКлиентскогоПриложения = ВариантМасштабаФормКлиентскогоПриложения.Компактный;
	
	ПользователиИБ = ПользователиИнформационнойБазы.ПолучитьПользователей();
	Для Каждого ПользовательИБ Из ПользователиИБ Цикл
		
		ОбщегоНазначения.ХранилищеСистемныхНастроекСохранить(
		"Общее/НастройкиКлиентскогоПриложения",
		,
		НастройкиКлиентскогоПриложения, , ПользовательИБ.Имя);
		
		ОбщегоНазначения.ХранилищеСистемныхНастроекУдалить(
		"",
		"ВариантМасштаба",
		ПользовательИБ.Имя);		
			
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьСведенияОСтавкеРефинансированияНБДляРасчетаПени () Экспорт
	
	НаборЗаписей = РегистрыСведений.КоэффициентыСтавкиРефинансированияНБДляРасчетаПени.СоздатьНаборЗаписей();
	
	НаборЗаписей.Отбор.Организация.Установить(Справочники.Организации.ПустаяСсылка(), Истина);
	
	// ОПВ
	НаборЗаписей.Отбор.ВидНалога.Установить(Справочники.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносы, Истина);
	НаборЗаписей.Отбор.Период.Установить('20180101', Истина);
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() = 0 Тогда
		
		Движение 			 = НаборЗаписей.Добавить();
		// Свойства
		Движение.Период 	 = '20180101'; // 01.01.2018
		// Измерения
		Движение.Организация = Справочники.Организации.ПустаяСсылка();
		Движение.ВидНалога	 = Справочники.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносы;
		// Ресурсы
		Движение.Коэффициент = 1.25;
		
		Попытка
			НаборЗаписей.ОбменДанными.Загрузка = Истина;
			НаборЗаписей.Записать();
		Исключение
			
		КонецПопытки;
	КонецЕсли;
	
	// СО
	НаборЗаписей.Отбор.ВидНалога.Установить(Справочники.НалогиСборыОтчисления.ОбязательныеСоциальныеОтчисления, Истина);
	НаборЗаписей.Отбор.Период.Установить('20180101', Истина);
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() = 0 Тогда
		Движение 			 = НаборЗаписей.Добавить();
		// Свойства
		Движение.Период 	 = '20180101'; // 01.01.2018 
		// Измерения
		Движение.Организация = Справочники.Организации.ПустаяСсылка();
		Движение.ВидНалога	 = Справочники.НалогиСборыОтчисления.ОбязательныеСоциальныеОтчисления;
		// Ресурсы
		Движение.Коэффициент = 1.25;
		
		Попытка
			НаборЗаписей.ОбменДанными.Загрузка = Истина;
			НаборЗаписей.Записать();
		Исключение
			
		КонецПопытки;
	КонецЕсли;
	
	// ОППВ
	НаборЗаписей.Отбор.ВидНалога.Установить(Справочники.НалогиСборыОтчисления.ОбязательныеПрофессиональныеПенсионныеВзносы, Истина);
	НаборЗаписей.Отбор.Период.Установить('20180101', Истина);
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() = 0 Тогда
		
		Движение 			 = НаборЗаписей.Добавить();
		// Свойства
		Движение.Период 	 = '20180101'; // 01.01.2018
		// Измерения
		Движение.Организация = Справочники.Организации.ПустаяСсылка();
		Движение.ВидНалога	 = Справочники.НалогиСборыОтчисления.ОбязательныеПрофессиональныеПенсионныеВзносы;
		// Ресурсы
		Движение.Коэффициент = 1.25;
		
		Попытка
			НаборЗаписей.ОбменДанными.Загрузка = Истина;
			НаборЗаписей.Записать();
		Исключение
			
		КонецПопытки;
	КонецЕсли;
	
	// Взносы ОСМС
	НаборЗаписей.Отбор.ВидНалога.Установить(Справочники.НалогиСборыОтчисления.ВзносыОбязательноеСоциальноеМедицинскоеСтрахование, Истина);
	НаборЗаписей.Отбор.Период.Установить('20180101', Истина);
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() = 0 Тогда
		
		Движение = НаборЗаписей.Добавить();
		// Свойства
		Движение.Период = '20180101';
		// Измерения
		Движение.Организация = Справочники.Организации.ПустаяСсылка();
		Движение.ВидНалога = Справочники.НалогиСборыОтчисления.ВзносыОбязательноеСоциальноеМедицинскоеСтрахование;
		// Ресурсы
		Движение.Коэффициент = 1.25;
		
		Попытка
			НаборЗаписей.ОбменДанными.Загрузка = Истина;
			НаборЗаписей.Записать();
		Исключение
			
		КонецПопытки;
	КонецЕсли;
	
	// Отчисления ОСМС
	НаборЗаписей.Отбор.ВидНалога.Установить(Справочники.НалогиСборыОтчисления.ОтчисленияОбязательноеСоциальноеМедицинскоеСтрахование, Истина);
	НаборЗаписей.Отбор.Период.Установить('20180101', Истина);
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() = 0 Тогда
		
		Движение = НаборЗаписей.Добавить();
		// Свойства
		Движение.Период = '20180101';
		// Измерения
		Движение.Организация = Справочники.Организации.ПустаяСсылка();
		Движение.ВидНалога = Справочники.НалогиСборыОтчисления.ОтчисленияОбязательноеСоциальноеМедицинскоеСтрахование;
		// Ресурсы
		Движение.Коэффициент = 1.25;
		
		Попытка
			НаборЗаписей.ОбменДанными.Загрузка = Истина;
			НаборЗаписей.Записать();
		Исключение
			
		КонецПопытки;
	КонецЕсли;

КонецПроцедуры // ДобавитьСведенияОСтавкеРефинансированияНБДляРасчетаПени

Процедура ДобавитьСведенияОСтавокНалоговВзносовОтчислений() Экспорт
	
	// Установим ставку СО – 3,5%
	НаборЗаписей = РегистрыСведений.СведенияОСтавкахНалоговСборовОтчислений.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВидНалога.Установить(Справочники.НалогиСборыОтчисления.ОбязательныеСоциальныеОтчисления, Истина);
	НаборЗаписей.Отбор.Период.Установить('20180101', Истина);
	НаборЗаписей.Прочитать();
	ПустаяОрганизация = Справочники.Организации.ПустаяСсылка();
	
	Если НаборЗаписей.Количество() = 0 Тогда
		
		ДобавитьЗначенияСтавокНалоговВзносовОтчислений(НаборЗаписей, '20180101', ПустаяОрганизация, Справочники.НалогиСборыОтчисления.ОбязательныеСоциальныеОтчисления, 3.5);
		
		Попытка
			НаборЗаписей.ОбменДанными.Загрузка = Истина;
			НаборЗаписей.Записать();
		Исключение
			
		КонецПопытки;
		
	КонецЕсли;
	
	// Установим ставку СН – 9,5%
	НаборЗаписей = РегистрыСведений.СведенияОСтавкахНалоговСборовОтчислений.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВидНалога.Установить(Справочники.НалогиСборыОтчисления.СоциальныйНалог, Истина);
	НаборЗаписей.Отбор.Период.Установить('20180101', Истина);
	НаборЗаписей.Прочитать();
	ПустаяОрганизация = Справочники.Организации.ПустаяСсылка();
	
	Если НаборЗаписей.Количество() = 0 Тогда
		
		ДобавитьЗначенияСтавокНалоговВзносовОтчислений(НаборЗаписей, '20180101', ПустаяОрганизация, Справочники.НалогиСборыОтчисления.СоциальныйНалог, 9.5);
		
		Попытка
			НаборЗаписей.ОбменДанными.Загрузка = Истина;
			НаборЗаписей.Записать();
		Исключение
			
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьИспользованиеНаборовСвойствВычетыИПН() Экспорт
	ПараметрыНабора = УправлениеСвойствами.СтруктураПараметровНабораСвойств();
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_ПрекращениеПредоставленияВычетовИПН", ПараметрыНабора);
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_ЗаявлениеНаПредоставлениеВычетовИПН", ПараметрыНабора);
КонецПроцедуры	

Процедура ОбновитьНастройкиОтчетовЗП() Экспорт
	
	НастройкиОтчетов = Новый ТаблицаЗначений;
	НастройкиОтчетов.Колонки.Добавить("КлючОбъекта");
	НастройкиОтчетов.Колонки.Добавить("КлючНастроек");
	НастройкиОтчетов.Колонки.Добавить("Пользователь");
	НастройкиОтчетов.Колонки.Добавить("Представление");
	
	ВыборкаНастроек = ХранилищеПользовательскихНастроекОтчетов.Выбрать();
	
	Пока ВыборкаНастроек.Следующий() Цикл 
		
		ИмяНастроекОтчета = СтрРазделить(ВыборкаНастроек.КлючОбъекта, "/", Ложь);
		Если ИмяНастроекОтчета.Количество() < 2 Тогда
			Продолжить; // Некорректная настройка.
		КонецЕсли;
		
		Если ИмяНастроекОтчета[0] = "Отчет.РасчетныеВедомостиОрганизаций" ИЛИ 
			ИмяНастроекОтчета[0] = "Отчет.РасчетныеЛисткиОрганизаций" Тогда
			
			НоваяСтрока = НастройкиОтчетов.Добавить();
			НоваяСтрока.КлючОбъекта = ВыборкаНастроек.КлючОбъекта;
			НоваяСтрока.КлючНастроек = ВыборкаНастроек.КлючНастроек;
			НоваяСтрока.Пользователь = ВыборкаНастроек.Пользователь;
			НоваяСтрока.Представление = ВыборкаНастроек.Представление;
			
		КонецЕсли;
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Истина);
	Для Каждого СтрокаНастройки Из НастройкиОтчетов Цикл
		Попытка
			ХранилищеПользовательскихНастроекОтчетов.Удалить(СтрокаНастройки.КлючОбъекта, СтрокаНастройки.КлючНастроек, СтрокаНастройки.Пользователь);
		Исключение
			ТекстСообщения = НСтр("ru='Операция не выполнена'");
			ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	КонецЦикла;
	УстановитьПривилегированныйРежим(Ложь);
	
	НастройкиОтчетов.Очистить();
	
	ВыборкаНастроек = ХранилищеСистемныхНастроек.Выбрать();
	
	Пока ВыборкаНастроек.Следующий() Цикл 
		
		ИмяНастроекОтчета = СтрРазделить(ВыборкаНастроек.КлючОбъекта, "/", Ложь);
		Если ИмяНастроекОтчета.Количество() < 2 Тогда
			Продолжить; // Некорректная настройка.
		КонецЕсли;
		
		Если СтрНайти(ИмяНастроекОтчета[0],"РасчетныеВедомостиОрганизаций") > 0  
			ИЛИ СтрНайти(ИмяНастроекОтчета[0],"РасчетныеЛисткиОрганизаций") > 0 Тогда
			
			НоваяСтрока = НастройкиОтчетов.Добавить();
			НоваяСтрока.КлючОбъекта = ВыборкаНастроек.КлючОбъекта;
			НоваяСтрока.КлючНастроек = ВыборкаНастроек.КлючНастроек;
			НоваяСтрока.Пользователь = ВыборкаНастроек.Пользователь;
			НоваяСтрока.Представление = ВыборкаНастроек.Представление;
			
		КонецЕсли;
		
	КонецЦикла;

	УстановитьПривилегированныйРежим(Истина);
	Для Каждого СтрокаНастройки Из НастройкиОтчетов Цикл
		Попытка
			ХранилищеСистемныхНастроек.Удалить(СтрокаНастройки.КлючОбъекта, СтрокаНастройки.КлючНастроек, СтрокаНастройки.Пользователь);
		Исключение
			ТекстСообщения = НСтр("ru='Операция не выполнена'");
			ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	КонецЦикла;
	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры

Процедура ОбработкаНастроекОтчетов3018() Экспорт
	
	Фильтр = Новый Структура();
	
	СписокОтчетов = Новый СписокЗначений;
	СписокОтчетов.Добавить("ОтчетПоНаличиюСчетовФактурВыданных", "НаличиеСчетовФактурВыданных");
	СписокОтчетов.Добавить("ОтчетПоНаличиюСчетовФактурПолученных", "НаличиеСчетовФактурПолученных");
	
	Для Каждого ОтчетПодсистемы из СписокОтчетов Цикл
		ИмяОтчета = ОтчетПодсистемы.Значение;
		ПредставлениеОтчета = Метаданные.Отчеты[ИмяОтчета].Представление();

		КлючВарианта = "Основной";
		КлючВариантаНовый = ОтчетПодсистемы.Представление;

		Фильтр.Вставить("КлючОбъекта",  "Отчет." + ИмяОтчета + "/" + КлючВарианта);
		ВыборкаПользовательскихНастроек = ХранилищеПользовательскихНастроекОтчетов.Выбрать(Фильтр);
		Пока ВыборкаПользовательскихНастроек.Следующий() Цикл
			ОписаниеНастроек_ = ХранилищеПользовательскихНастроекОтчетов.ПолучитьОписание(
				ВыборкаПользовательскихНастроек.КлючОбъекта,
				ВыборкаПользовательскихНастроек.КлючНастроек,
				ВыборкаПользовательскихНастроек.Пользователь);

			Попытка
				ХранилищеПользовательскихНастроекОтчетов.Сохранить(
					"Отчет." + ИмяОтчета + "/" + КлючВариантаНовый,
					ВыборкаПользовательскихНастроек.КлючНастроек,
					ВыборкаПользовательскихНастроек.Настройки,
					ОписаниеНастроек_,
					ОписаниеНастроек_.Пользователь);
				
				Комментарий = НСтр("ru = 'Обработаны настройки отчета <%1>: %2.'");
				Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Комментарий, ПредставлениеОтчета, ОписаниеНастроек_.Представление);
				ЗаписьЖурналаРегистрации(
					НСтр("ru = 'Обновление информационной базы. Обработка сохраненных настроек отчетов'"),
					УровеньЖурналаРегистрации.Информация,,, Комментарий);				
			Исключение
				ТекстСообщения = НСтр("ru='При обработке настроек отчета <%1>  произошла ошибка: %2'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ПредставлениеОтчета, ОписаниеОшибки());
				ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьКалендарныеГрафики2018() Экспорт
	
	Если ОбщегоНазначенияПовтИсп.ЭтоАвтономноеРабочееМесто() Тогда
		Возврат;
	КонецЕсли;

	ПроизводственныйКалендарьРК = Справочники.ПроизводственныеКалендари.НайтиПоКоду("РК");
	Если ПроизводственныйКалендарьРК <> Неопределено Тогда
		
		ДанныеПроизводственногоКалендаря          = Справочники.ПроизводственныеКалендари.ДанныеПроизводственногоКалендаря(ПроизводственныйКалендарьРК, 2018);
		ДанныеПроизводственногоКалендаряУмолчанию = Справочники.ПроизводственныеКалендари.РезультатЗаполненияПроизводственногоКалендаряПоУмолчанию("РК", 2018);
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	КлассификаторТаблица.Дата,
			|	КлассификаторТаблица.ВидДня,
			|	КлассификаторТаблица.ДатаПереноса
			|ПОМЕСТИТЬ КлассификаторТаблица
			|ИЗ
			|	&КлассификаторТаблица КАК КлассификаторТаблица
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ДанныеПроизводственногоКалендаря.Дата,
			|	ДанныеПроизводственногоКалендаря.ВидДня,
			|	ДанныеПроизводственногоКалендаря.ДатаПереноса
			|ПОМЕСТИТЬ ДанныеПроизводственногоКалендаря
			|ИЗ
			|	&ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	КлассификаторТаблица.Дата,
			|	КлассификаторТаблица.ВидДня,
			|	КлассификаторТаблица.ДатаПереноса
			|ИЗ
			|	КлассификаторТаблица КАК КлассификаторТаблица
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
			|		ПО КлассификаторТаблица.Дата = ДанныеПроизводственногоКалендаря.Дата";
		
		Запрос.УстановитьПараметр("КлассификаторТаблица", ДанныеПроизводственногоКалендаряУмолчанию);
		Запрос.УстановитьПараметр("ДанныеПроизводственногоКалендаря", ДанныеПроизводственногоКалендаря);
		
		ДанныеПроизводственногоКалендаряДляЗаписи = Запрос.Выполнить().Выгрузить();
		
		Если ДанныеПроизводственногоКалендаряДляЗаписи.Количество() > 0 Тогда
			Справочники.ПроизводственныеКалендари.ЗаписатьДанныеПроизводственногоКалендаря(ПроизводственныйКалендарьРК, 2018, ДанныеПроизводственногоКалендаряДляЗаписи);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#Область ШтрихкодированиеОС

Процедура ЗаполнитьШаблоныШтрихкодов() Экспорт
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураМакетаШаблона = Справочники.ШаблоныШтрихкодов.ПодготовитьСтруктуруМакетаШаблона(Справочники.ШаблоныШтрихкодов.ПолучитьМакет("Шаблон_43х25_ОС"));
	
	СтруктураМакетаШаблона.ТипКода          = 1;
	СтруктураМакетаШаблона.РазмерШрифта     = 12;
	СтруктураМакетаШаблона.ОтображатьТекст  = Истина;
	
	ШаблонОбъект 				= Справочники.ШаблоныШтрихкодов.Шаблон_43х25_ОС.ПолучитьОбъект();
	ШаблонОбъект.Ширина			= 43;
	ШаблонОбъект.Высота			= 25;
	ШаблонОбъект.РазмерЯчейки	= 5;
	ШаблонОбъект.Шаблон			= Новый ХранилищеЗначения(СтруктураМакетаШаблона);
	ШаблонОбъект.ТипШаблона		= Перечисления.ТипыШаблоновШтрихкодов.ОсновныеСредства;
	
	ШаблонОбъект.ОбменДанными.Загрузка = Истина;
	
	Попытка
		ШаблонОбъект.Записать();
	Исключение
		ТекстСообщения = НСтр("ru='При записи шаблона штрих кода  %1  произошла ошибка: %2'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ШаблонОбъект, ОписаниеОшибки());
		ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
    
КонецПроцедуры	

Процедура ШтрихкодУстанавливаетсяВГлавномУзлеРИБ() Экспорт
	Константы.ШтрихкодУстанавливаетсяВГлавномУзлеРИБ.Установить(Истина);
КонецПроцедуры	

Процедура ЗаполнитьОсновнойШтрихкодВНастройкахПользователей() Экспорт
	
	Для Каждого ПользовательИБ Из ПользователиИнформационнойБазы.ПолучитьПользователей() Цикл
		НайденныйПользователь = Справочники.Пользователи.НайтиПоРеквизиту("ИдентификаторПользователяИБ", ПользовательИБ.УникальныйИдентификатор);
		Если ЗначениеЗаполнено(НайденныйПользователь) Тогда
			Набор = РегистрыСведений.НастройкиПользователей.СоздатьНаборЗаписей();
			
			Набор.Отбор.Пользователь.Установить(НайденныйПользователь);
			Набор.Отбор.Настройка.Установить(ПланыВидовХарактеристик.НастройкиПользователей.ОсновнойШаблонШтрихкодаОС);
			
			Запись = Набор.Добавить();
			
			Запись.Пользователь = НайденныйПользователь;
			Запись.Настройка    = ПланыВидовХарактеристик.НастройкиПользователей.ОсновнойШаблонШтрихкодаОС;
			Запись.Значение     = Справочники.ШаблоныШтрихкодов.Шаблон_43х25_ОС;
			
			Попытка
				Набор.Записать();
			Исключение
				ТекстСообщения = НСтр("ru='При установке в настройках пользователя %1 значения основного шаблона штрих кода произошла ошибка: %2'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, НайденныйПользователь, ОписаниеОшибки());
				ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;	
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры	

#КонецОбласти

Процедура ОтключитьИспользованиеВнешнегоКлассификатораКодыСтрокНалоговыхДеклараций() Экспорт
		
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ПользовательскиеМакетыПечати.Использование,
	|	ПользовательскиеМакетыПечати.ИмяМакета,
	|	ПользовательскиеМакетыПечати.Объект
	|ИЗ
	|	РегистрСведений.ПользовательскиеМакетыПечати КАК ПользовательскиеМакетыПечати
	|ГДЕ
	|	ПользовательскиеМакетыПечати.ИмяМакета = &ИмяМакета
	|	И ПользовательскиеМакетыПечати.Объект = &Объект
	|	И ПользовательскиеМакетыПечати.Использование = ИСТИНА";
	
	Запрос.УстановитьПараметр("ИмяМакета", "ПФ_MXL_КодыСтрокНалоговыхДеклараций");
	Запрос.УстановитьПараметр("Объект",    "ОбщийМакет");

	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ВыборкаДанных = Результат.Выбрать();
	
	МенеджерЗаписи = РегистрыСведений.ПользовательскиеМакетыПечати.СоздатьМенеджерЗаписи();
	
	Пока ВыборкаДанных.Следующий() Цикл
		
		МенеджерЗаписи.ИмяМакета = ВыборкаДанных.ИмяМакета;
		МенеджерЗаписи.Объект 	 = ВыборкаДанных.Объект;  
		МенеджерЗаписи.Прочитать();   		
		МенеджерЗаписи.Использование = Ложь;
		
		Попытка
			МенеджерЗаписи.Записать();
		Исключение
			ТекстСообщения = НСтр("ru = 'при записи макета Классификатор кодов строк Декларации регистра сведений ""%1"" произошла ошибка: %2'");
			ЗаписьЖурналаРегистрации(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстСообщения, Метаданные.РегистрыСведений.ПользовательскиеМакетыПечати.Представление(), ОписаниеОшибки()),
			УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));						
		КонецПопытки;	
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьКодыСтрокДекларацииПоНДС() Экспорт 
	СоответсвиеСтрок = Новый Соответствие;
	СоответсвиеСтрок.Вставить("300.01.003.N1"	,"300.01.003.386-1-0");
	СоответсвиеСтрок.Вставить("300.01.003.N2" 	,"300.01.003.387-1-0");
	СоответсвиеСтрок.Вставить("300.01.003.N3" 	,"300.01.003.388-1-0");
	СоответсвиеСтрок.Вставить("300.01.003.N4" 	,"300.01.003.389-1-0");
	СоответсвиеСтрок.Вставить("300.01.003.N5" 	,"300.01.003.390-1-0");
	СоответсвиеСтрок.Вставить("300.01.003.N6" 	,"300.01.003.391-1-0");
	СоответсвиеСтрок.Вставить("300.01.003.N7" 	,"300.01.003.392-1-0");
	СоответсвиеСтрок.Вставить("300.01.003.N8" 	,"300.01.003.393-1-0");
	СоответсвиеСтрок.Вставить("300.01.003.N9" 	,"300.01.003.393-2-0");
	СоответсвиеСтрок.Вставить("300.01.003.N10" 	,"300.01.003.393-3-0");
	
	СоответсвиеСтрок.Вставить("300.02.001.N1"	,"300.02.001.394-0-2");
	СоответсвиеСтрок.Вставить("300.02.001.N2"	,"300.02.001.394-0-3");
	СоответсвиеСтрок.Вставить("300.02.001.N3"	,"300.02.001.394-0-4");
	СоответсвиеСтрок.Вставить("300.02.001.N4"	,"300.02.001.394-0-5");
	СоответсвиеСтрок.Вставить("300.02.001.N5"	,"300.02.001.394-0-6");
	СоответсвиеСтрок.Вставить("300.02.001.N6"	,"300.02.001.394-0-7");
	СоответсвиеСтрок.Вставить("300.02.001.N7"	,"300.02.001.394-0-8");
	СоответсвиеСтрок.Вставить("300.02.001.N8"	,"300.02.001.394-0-9");
	СоответсвиеСтрок.Вставить("300.02.001.N9"	,"300.02.001.394-0-10");
	СоответсвиеСтрок.Вставить("300.02.001.N10"	,"300.02.001.394-0-11");
	СоответсвиеСтрок.Вставить("300.02.001.N11"	,"300.02.001.394-0-12");
	СоответсвиеСтрок.Вставить("300.02.001.N12"	,"300.02.001.394-0-13");
	СоответсвиеСтрок.Вставить("300.02.001.N13"	,"300.02.001.394-0-14");
	СоответсвиеСтрок.Вставить("300.02.001.N14"	,"300.02.001.394-0-15");
	СоответсвиеСтрок.Вставить("300.02.001.N15"	,"300.02.001.394-0-16");
	СоответсвиеСтрок.Вставить("300.02.001.N16"	,"300.02.001.394-0-17");
	СоответсвиеСтрок.Вставить("300.02.001.N17"	,"300.02.001.394-0-18");
	СоответсвиеСтрок.Вставить("300.02.001.N18"	,"300.02.001.394-0-19");
	СоответсвиеСтрок.Вставить("300.02.001.N19"	,"300.02.001.394-0-20");
	СоответсвиеСтрок.Вставить("300.02.001.N20"	,"300.02.001.394-0-21");
	СоответсвиеСтрок.Вставить("300.02.001.N21"	,"300.02.001.394-0-22");
	СоответсвиеСтрок.Вставить("300.02.001.N22"	,"300.02.001.394-0-23");
	СоответсвиеСтрок.Вставить("300.02.001.N23"	,"300.02.001.394-0-24");
	СоответсвиеСтрок.Вставить("300.02.001.N24"	,"300.02.001.394-0-25");
	СоответсвиеСтрок.Вставить("300.02.001.N25"	,"300.02.001.394-0-26");
	СоответсвиеСтрок.Вставить("300.02.001.N26"	,"300.02.001.394-0-27");
	СоответсвиеСтрок.Вставить("300.02.001.N27"	,"300.02.001.394-0-28");
	СоответсвиеСтрок.Вставить("300.02.001.N28"	,"300.02.001.394-0-29");
	СоответсвиеСтрок.Вставить("300.02.001.N29"	,"300.02.001.394-0-30");
	СоответсвиеСтрок.Вставить("300.02.001.N30"	,"300.02.001.394-0-31");
	СоответсвиеСтрок.Вставить("300.02.001.N31"	,"300.02.001.394-0-32");
	СоответсвиеСтрок.Вставить("300.02.001.N32"	,"300.02.001.394-0-33");
	СоответсвиеСтрок.Вставить("300.02.001.N33"	,"300.02.001.394-0-34");
	СоответсвиеСтрок.Вставить("300.02.001.N34"	,"300.02.001.394-0-35");
	СоответсвиеСтрок.Вставить("300.02.001.N35"	,"300.02.001.394-0-36");
	СоответсвиеСтрок.Вставить("300.02.001.N36"	,"300.02.001.394-0-37");
	СоответсвиеСтрок.Вставить("300.02.001.N37"	,"300.02.001.394-0-38");
	СоответсвиеСтрок.Вставить("300.02.001.N38"	,"300.02.001.394-0-39");
	СоответсвиеСтрок.Вставить("300.02.001.N39"	,"300.02.001.394-0-40");
	СоответсвиеСтрок.Вставить("300.02.001.N40"	,"300.02.001.394-0-41");
	СоответсвиеСтрок.Вставить("300.02.001.N41"	,"300.02.001.394-0-42");
	СоответсвиеСтрок.Вставить("300.02.001.N42"	,"300.02.001.394-0-43");
	СоответсвиеСтрок.Вставить("300.02.001.N43"	,"300.02.001.451-1-3");
	
	СоответсвиеСтрок.Вставить("300.02.010.N1"	,"300.02.010.399-1-1");
	СоответсвиеСтрок.Вставить("300.02.010.N2"	,"300.02.010.399-1-2");
	СоответсвиеСтрок.Вставить("300.02.010.N3"	,"300.02.010.399-1-3");
	СоответсвиеСтрок.Вставить("300.02.010.N4"	,"300.02.010.399-1-4");
	СоответсвиеСтрок.Вставить("300.02.010.N5"	,"300.02.010.399-1-5");
	СоответсвиеСтрок.Вставить("300.02.010.N6"	,"300.02.010.399-1-6");
	СоответсвиеСтрок.Вставить("300.02.010.N7"	,"300.02.010.399-1-7");
	СоответсвиеСтрок.Вставить("300.02.010.N8"	,"300.02.010.399-1-8");
	СоответсвиеСтрок.Вставить("300.02.010.N9 "	,"300.02.010.399-1-9");
	СоответсвиеСтрок.Вставить("300.02.010.N10"	,"300.02.010.399-1-10");
	СоответсвиеСтрок.Вставить("300.02.010.N11"	,"300.02.010.399-1-11");
	СоответсвиеСтрок.Вставить("300.02.010.N12"	,"300.02.010.399-1-12");
	СоответсвиеСтрок.Вставить("300.02.010.N13"	,"300.02.010.399-1-13");
	СоответсвиеСтрок.Вставить("300.02.010.N14"	,"300.02.010.399-1-14");
	СоответсвиеСтрок.Вставить("300.02.010.N15"	,"300.02.010.399-1-15");
	СоответсвиеСтрок.Вставить("300.02.010.N16"	,"300.02.010.399-1-16");
	СоответсвиеСтрок.Вставить("300.02.010.N17"	,"300.02.010.399-3-0");
	СоответсвиеСтрок.Вставить("300.02.010.N18"	,"300.02.010.451-2-3");
	СоответсвиеСтрок.Вставить("300.02.010.N19"	,"300.02.010.451-2-4");
	СоответсвиеСтрок.Вставить("300.02.010.N20"	,"300.02.010.451-2-5");
	
	СоответсвиеСтрок.Вставить("300.06.001.N1"	,"300.06.001.383-2-1");
	СоответсвиеСтрок.Вставить("300.06.001.N2"	,"300.06.001.383-2-2");
	СоответсвиеСтрок.Вставить("300.06.001.N3"	,"300.06.001.383-2-3");
	СоответсвиеСтрок.Вставить("300.06.001.N4"	,"300.06.001.383-2-4");
	СоответсвиеСтрок.Вставить("300.06.001.N5"	,"300.06.001.383-2-5");
	СоответсвиеСтрок.Вставить("300.06.001.N6"	,"300.06.001.383-2-6");

	СоответсвиеСтрок.Вставить("300.06.006.N1"	,"300.06.006.383-2-1");
	СоответсвиеСтрок.Вставить("300.06.006.N2"	,"300.06.006.383-2-2");
	СоответсвиеСтрок.Вставить("300.06.006.N3"	,"300.06.006.383-2-3");
	СоответсвиеСтрок.Вставить("300.06.006.N4"	,"300.06.006.383-2-4");
	СоответсвиеСтрок.Вставить("300.06.006.N5"	,"300.06.006.383-2-5");
	СоответсвиеСтрок.Вставить("300.06.006.N6"	,"300.06.006.383-2-6");

	СоответсвиеСтрок.Вставить("300.06.007.N1"	,"300.06.007.404-2-1");
	СоответсвиеСтрок.Вставить("300.06.007.N2"	,"300.06.007.404-2-2");
	СоответсвиеСтрок.Вставить("300.06.007.N3"	,"300.06.007.404-2-3");
	СоответсвиеСтрок.Вставить("300.06.007.N4"	,"300.06.007.404-2-4");
	СоответсвиеСтрок.Вставить("300.06.007.N5"	,"300.06.007.404-2-5");
	СоответсвиеСтрок.Вставить("300.06.007.N6"	,"300.06.007.404-2-6");
	
	Запрос 			= Новый Запрос; 
	Запрос.Текст 	= "ВЫБРАТЬ
	|	КодыСтрокДекларацииПоНДСКЗачету.Период,
	|	КодыСтрокДекларацииПоНДСКЗачету.КодСтроки,
	|	КодыСтрокДекларацииПоНДСКЗачету.ВидОперации,
	|	КодыСтрокДекларацииПоНДСКЗачету.ВидОборота,
	|	""КодыСтрокДекларацииПоНДСКЗачету"" КАК ИмяРегистра
	|ИЗ
	|	РегистрСведений.КодыСтрокДекларацииПоНДСКЗачету КАК КодыСтрокДекларацииПоНДСКЗачету
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КодыСтрокДекларацииПоНДС.Период,
	|	КодыСтрокДекларацииПоНДС.КодСтроки,
	|	КодыСтрокДекларацииПоНДС.ВидОперации,
	|	NULL,
	|	""КодыСтрокДекларацииПоНДС""
	|ИЗ
	|	РегистрСведений.КодыСтрокДекларацииПоНДС КАК КодыСтрокДекларацииПоНДС";
	
	ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
	
	МенеджерЗаписиКодыСтрокДекларацииПоНДС 			= РегистрыСведений.КодыСтрокДекларацииПоНДС.СоздатьМенеджерЗаписи();
	МенеджерЗаписиКодыСтрокДекларацииПоНДСКЗачету 	= РегистрыСведений.КодыСтрокДекларацииПоНДСКЗачету.СоздатьМенеджерЗаписи();
	Пока ВыборкаЗапроса.Следующий() Цикл
		КодСтроки 		= ВыборкаЗапроса.КодСтроки;
		ИмяРегистра 	= ВыборкаЗапроса.ИмяРегистра;
		НовыйКодСтроки 	= СоответсвиеСтрок.Получить(СокрЛП(КодСтроки));
		Если НовыйКодСтроки = Неопределено Тогда
			Продолжить;
		КонецЕсли;	
	
		Если ИмяРегистра = "КодыСтрокДекларацииПоНДСКЗачету" Тогда
			НаборЗаписей = РегистрыСведений.КодыСтрокДекларацииПоНДСКЗачету.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ВидОборота.Установить(ВыборкаЗапроса.ВидОборота);
		Иначе	
			НаборЗаписей = РегистрыСведений.КодыСтрокДекларацииПоНДС.СоздатьНаборЗаписей();
		КонецЕсли;
		
		НаборЗаписей.Отбор.ВидОперации.Установить(ВыборкаЗапроса.ВидОперации);
        НаборЗаписей.Отбор.Период.Установить(ВыборкаЗапроса.Период);
		
		НовЗапись 					= НаборЗаписей.Добавить();
		
		Если ИмяРегистра = "КодыСтрокДекларацииПоНДСКЗачету" Тогда
			НовЗапись.ВидОборота 			= ВыборкаЗапроса.ВидОборота;
		КонецЕсли;
		
		НовЗапись.ВидОперации 		= ВыборкаЗапроса.ВидОперации;
		НовЗапись.КодСтроки 		= НовыйКодСтроки;
		НовЗапись.Период 			= ВыборкаЗапроса.Период;
        
		Попытка
			НаборЗаписей.Записать();
		Исключение
			ТекстСообщения = НСтр("ru = 'При записи кода строки ""%1"" регистра сведений ""%2"" произошла ошибка: %3'");
			ЗаписьЖурналаРегистрации(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ТекстСообщения, КодСтроки, НаборЗаписей.Метаданные().Представление(), ОписаниеОшибки()),
				УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));						
		КонецПопытки;	
		
	КонецЦикла;	
	
	
КонецПроцедуры

Процедура ЗаменитьВнешнююОбработкуОбменСНТНаВстроенную() Экспорт
	
	Попытка 
		
		Константы.СНТИспользоватьВнешнийМодульОбменаДанными.Установить(Ложь);
		
	Исключение
		
		ТекстСообщения = НСтр(
		"ru = 'Не удалось обновить значение константы ""%2"",
		|так как при обновлении произошла ошибка:
		|%1'");
		
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%2", Метаданные.Константы.СНТИспользоватьВнешнийМодульОбменаДанными.Представление());
		
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
								УровеньЖурналаРегистрации.Предупреждение,
								Метаданные.Константы.СНТИспользоватьВнешнийМодульОбменаДанными,
								ТекстСообщения,
								ТекстСообщения);
								
	КонецПопытки; 
	
КонецПроцедуры

#Область ОбновленияНа_3_0_21

Процедура ОбновитьДокументыЭСФОтложенно(Параметры) Экспорт
	                  	
	Запрос = Новый Запрос;
	Запрос.Текст =  "ВЫБРАТЬ ПЕРВЫЕ 1000
	                |	ЭСФ.Ссылка КАК ССылка,
	                |	ЭСФ.Представление КАК Представление
	                |ИЗ
	                |	Документ.ЭСФ КАК ЭСФ
	                |ГДЕ
	                |	НЕ ЭСФ.Проведен
	                |	И НЕ ЭСФ.ПометкаУдаления
	                |	И НЕ ЭСФ.Статус В (&ИсключаемыеСтатусы)" ;
									
	ИсключаемыеСтатусы = Новый Массив;
	ИсключаемыеСтатусы.Добавить(Перечисления.СтатусыЭСФ.Отклоненный);
	ИсключаемыеСтатусы.Добавить(Перечисления.СтатусыЭСФ.Ошибочный);
	ИсключаемыеСтатусы.Добавить(Перечисления.СтатусыЭСФ.Черновик);
	ИсключаемыеСтатусы.Добавить(Перечисления.СтатусыЭСФ.Удаленный);
	
	Запрос.УстановитьПараметр("ИсключаемыеСтатусы", ИсключаемыеСтатусы);
	ТаблицаРезультат = Запрос.Выполнить().Выгрузить();
	
	ПроблемныхОбъектов = 0;
	ОбъектовОбработано = 0;
	
	Для Каждого СтрокаРезультат  ИЗ ТаблицаРезультат Цикл
		
		НачатьТранзакцию();
		
		Блокировка = Новый БлокировкаДанных;
    	ЭлементБлокировки = Блокировка.Добавить("Документ.ЭСФ");
    	ЭлементБлокировки.УстановитьЗначение("Ссылка", СтрокаРезультат.Ссылка);

		ДокументОбъект = СтрокаРезультат.Ссылка.ПолучитьОбъект();
			
		Попытка
			Блокировка.Заблокировать(); 			
			ДокументОбъект.ОбменДанными.Загрузка = Истина;
			ДокументОбъект.Проведен = Истина;

			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
			ОбъектовОбработано = ОбъектовОбработано + 1;
			ЗафиксироватьТранзакцию(); 

		Исключение
			
			ОтменитьТранзакцию(); 
			
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;

			ТекстСообщения = НСтр("ru = 'При записи документа ЭСФ ""%1"" произошла ошибка: %2'", ОбщегоНазначения.КодОсновногоЯзыка());
			ЗаписьЖурналаРегистрации(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ТекстСообщения, СтрокаРезультат.Представление, ОписаниеОшибки()),
				УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));				
				
		КонецПопытки;			
		
	КонецЦикла;  
	
	Если ОбъектовОбработано + ПроблемныхОбъектов = 0 Тогда
	
		Параметры.ОбработкаЗавершена = Истина;
	
	Иначе
		
		Параметры.ОбработкаЗавершена = Ложь;

		Если ОбъектовОбработано = 0 Тогда
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Процедуре Обновления ЭСФ (отложенно)
					|не удалось установить у документов ЭСФ  признак ""Проведен"":  у %1 документов.'"), 
					ПроблемныхОбъектов);
			ВызватьИсключение ТекстСообщения;
		Иначе
			ТекстСообщения = СтрШаблон(
					НСтр("ru = 'Процедура  Обновления ЭСФ (отложенно)
						|обработала очередную порцию документов ЭСФ: %1 документов'"), 
						ОбъектовОбработано);
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
				УровеньЖурналаРегистрации.Информация,
				,
				,
				ТекстСообщения);
		КонецЕсли;
		
	КонецЕсли;

	
КонецПроцедуры

#КонецОбласти

#Область ОбновленияНа_3_0_23

Процедура УстановитьПометкуУдаленияПредопределенногоЭлементаОбменЭСФ() Экспорт
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СпрОбъект = Справочники.ДополнительныеОтчетыИОбработки.УдалитьОбработкаОбменЭСФ.ПолучитьОбъект();
	СпрОбъект.Публикация = Перечисления.ВариантыПубликацииДополнительныхОтчетовИОбработок.Отключена;
	СпрОбъект.ПометкаУдаления = Истина;
	
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(СпрОбъект, Истина, Ложь);

КонецПроцедуры

#КонецОбласти

#Область ОбновленияНа_3_0_24

Процедура ДобавитьСтавкуБезНДСнеРК() Экспорт
	НайтиСоздатьСтавкуНДС(НСтр("ru = 'без НДС - не РК'"), 0, Ложь, Истина);
КонецПроцедуры

#КонецОбласти

#Область ОбновленияНа_3_0_25

Процедура КорректировкаСтавокБезНДСнеРК() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СтавкиНДС.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.СтавкиНДС КАК СтавкиНДС
		|ГДЕ
		|	СтавкиНДС.ДляОсвобожденногоОборота
		|	И СтавкиНДС.МестоРеализацииНеРК";
	
	ВыборкаСтавки = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаСтавки.Следующий() Цикл

		СтавкаОбъект = ВыборкаСтавки.Ссылка.ПолучитьОбъект();
			
		Попытка
			
			СтавкаОбъект.ДляОсвобожденногоОборота = Ложь;
			СтавкаОбъект.Записать();

			Комментарий = НСтр("ru = 'Для ставки НДС ""%1"" снят признак ""%2""'");
			Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Комментарий, ВыборкаСтавки.Ссылка, Метаданные.Справочники.СтавкиНДС.Реквизиты.ДляОсвобожденногоОборота.Представление());
			
			ЗаписьЖурналаРегистрации(
				СтрШаблон(НСтр("ru = 'Обновление информационной базы. Обработка элементов справочника ""%1""'", ОбщегоНазначения.КодОсновногоЯзыка()), Метаданные.Справочники.СтавкиНДС.Представление()),
				УровеньЖурналаРегистрации.Информация,,, Комментарий);				
				
		Исключение
			
			ТекстСообщения = НСтр("ru = 'При записи ставки НДС ""%1"" произошла ошибка: %2'", ОбщегоНазначения.КодОсновногоЯзыка());
			ЗаписьЖурналаРегистрации(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ТекстСообщения, ВыборкаСтавки.Ссылка, ОписаниеОшибки()),
				УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));				
				
		КонецПопытки;			
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбновленияНа_3_0_26

Процедура ОбновитьКалендарныеГрафики2019() Экспорт
	
	Если ОбщегоНазначенияПовтИсп.ЭтоАвтономноеРабочееМесто() Тогда
		Возврат;
	КонецЕсли;

	ПроизводственныйКалендарьРК = Справочники.ПроизводственныеКалендари.НайтиПоКоду("РК");
	Если ПроизводственныйКалендарьРК <> Неопределено Тогда
		
		ДанныеПроизводственногоКалендаря          = Справочники.ПроизводственныеКалендари.ДанныеПроизводственногоКалендаря(ПроизводственныйКалендарьРК, 2019);
		ДанныеПроизводственногоКалендаряУмолчанию = Справочники.ПроизводственныеКалендари.РезультатЗаполненияПроизводственногоКалендаряПоУмолчанию("РК", 2019);
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	КлассификаторТаблица.Дата,
			|	КлассификаторТаблица.ВидДня,
			|	КлассификаторТаблица.ДатаПереноса
			|ПОМЕСТИТЬ КлассификаторТаблица
			|ИЗ
			|	&КлассификаторТаблица КАК КлассификаторТаблица
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ДанныеПроизводственногоКалендаря.Дата,
			|	ДанныеПроизводственногоКалендаря.ВидДня,
			|	ДанныеПроизводственногоКалендаря.ДатаПереноса
			|ПОМЕСТИТЬ ДанныеПроизводственногоКалендаря
			|ИЗ
			|	&ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	КлассификаторТаблица.Дата,
			|	КлассификаторТаблица.ВидДня,
			|	КлассификаторТаблица.ДатаПереноса
			|ИЗ
			|	КлассификаторТаблица КАК КлассификаторТаблица
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
			|		ПО КлассификаторТаблица.Дата = ДанныеПроизводственногоКалендаря.Дата";
		
		Запрос.УстановитьПараметр("КлассификаторТаблица", ДанныеПроизводственногоКалендаряУмолчанию);
		Запрос.УстановитьПараметр("ДанныеПроизводственногоКалендаря", ДанныеПроизводственногоКалендаря);
		
		ДанныеПроизводственногоКалендаряДляЗаписи = Запрос.Выполнить().Выгрузить();
		
		Если ДанныеПроизводственногоКалендаряДляЗаписи.Количество() > 0 Тогда
			Справочники.ПроизводственныеКалендари.ЗаписатьДанныеПроизводственногоКалендаря(ПроизводственныйКалендарьРК, 2019, ДанныеПроизводственногоКалендаряДляЗаписи);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура РегламентированныйОтчет300ФормаИзмененитьИмяСохраненногоОтчета() Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РегламентированныйОтчет.Ссылка КАК Форма300
	|ИЗ
	|	Документ.РегламентированныйОтчет КАК РегламентированныйОтчет
	|ГДЕ
	|	РегламентированныйОтчет.ДатаНачала >= &ДатаНачалаПериодаОтчета
	|	И РегламентированныйОтчет.ВыбраннаяФорма ПОДОБНО &ВыбраннаяФорма";
	
	Запрос.УстановитьПараметр("ДатаНачалаПериодаОтчета", Дата("20190101"));
	Запрос.УстановитьПараметр("ВыбраннаяФорма","Форма3002019Кв1");
	
	ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаЗапроса.Следующий() Цикл
		
		Форма300 						= 	ВыборкаЗапроса.Форма300.ПолучитьОбъект();
		Форма300.ОбменДанными.Загрузка  = Истина;
		Форма300.ВыбраннаяФорма 		= "Форма3002018Кв1";
		
		Попытка
			Форма300.Записать();
		Исключение
			Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Документ ""%1"": %2'"), Форма300.Ссылка, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Обновление информационной базы'", ОбщегоНазначения.КодОсновногоЯзыка()), УровеньЖурналаРегистрации.Ошибка,,, Сообщение);
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбновленияНа_3_0_27

#Область ОценкаПроизводительности

Процедура ЗаполнитьРеквизитыКлючевыхОпераций() Экспорт

	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() И ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных() Тогда
		Возврат;
	КонецЕсли;
	
	МетаданныеСправочника = Метаданные.Справочники.КлючевыеОперации;

	ТаблицаКлючевыхОпераций = Новый ТаблицаЗначений;
	ТаблицаКлючевыхОпераций.Колонки.Добавить("ИмяКлючевойОперации", МетаданныеСправочника.Реквизиты.Имя.Тип);
	ТаблицаКлючевыхОпераций.Колонки.Добавить("ЦелевоеВремя", 		МетаданныеСправочника.Реквизиты.ЦелевоеВремя.Тип);

	ЗаполнитьТаблицуЦелевогоВремениКлючевыхОпераций(ТаблицаКлючевыхОпераций);

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаКлючевыхОпераций", ТаблицаКлючевыхОпераций);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаКлючевыхОпераций.ИмяКлючевойОперации КАК ИмяКлючевойОперации,
	|	ТаблицаКлючевыхОпераций.ЦелевоеВремя КАК ЦелевоеВремя
	|ПОМЕСТИТЬ ВТ_ТаблицаКлючевыхОпераций
	|ИЗ
	|	&ТаблицаКлючевыхОпераций КАК ТаблицаКлючевыхОпераций
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИмяКлючевойОперации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаКлючевыхОпераций.ИмяКлючевойОперации,
	|	ВТ_ТаблицаКлючевыхОпераций.ЦелевоеВремя,
	|	ЕСТЬNULL(КлючевыеОперации.Приоритет, 0) КАК Приоритет,
	|	КлючевыеОперации.Ссылка
	|ИЗ
	|	ВТ_ТаблицаКлючевыхОпераций КАК ВТ_ТаблицаКлючевыхОпераций
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлючевыеОперации КАК КлючевыеОперации
	|		ПО ВТ_ТаблицаКлючевыхОпераций.ИмяКлючевойОперации = КлючевыеОперации.Имя
	|ГДЕ
	|	(ВТ_ТаблицаКлючевыхОпераций.ЦелевоеВремя <> КлючевыеОперации.ЦелевоеВремя
	|			ИЛИ КлючевыеОперации.ЦелевоеВремя ЕСТЬ NULL )
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(КлючевыеОперации.Приоритет) КАК Приоритет
	|ИЗ
	|	Справочник.КлючевыеОперации КАК КлючевыеОперации";
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	Выборка = РезультатЗапроса[1].Выбрать();
	ВыборкаМаксПриоритет = РезультатЗапроса[2].Выбрать();
	
	МаксПриоритет = 0;
	Если ВыборкаМаксПриоритет.Следующий() Тогда
		Если ЗначениеЗаполнено(ВыборкаМаксПриоритет.Приоритет) Тогда
			МаксПриоритет = ВыборкаМаксПриоритет.Приоритет;
		КонецЕсли;
	КонецЕсли;
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.Приоритет = 0 Тогда
			МаксПриоритет = МаксПриоритет + 1;
		КонецЕсли;
		
		УстановитьРеквизитыКлючевойОперации(
			Выборка.ИмяКлючевойОперации, 
			Выборка.Ссылка, 
			МаксПриоритет, 
			Выборка.ЦелевоеВремя);

	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьТаблицуЦелевогоВремениКлючевыхОпераций(ТаблицаКлючевыхОпераций)

	///////////////////////
	// Общие формы
	
	
	///////////////////////
	// Общие команды
	
	///////////////////////
	// Справочники
	
	#Область Документы
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""авансовый отчет"" (проведение)", 3);
	
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""авизо прочее"" (заполнение)", 2);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""авизо прочее"" (проведение)", 2);
	
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""акт об оказании производственных услуг"" (проведение)", 3);
	
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""акт сверки взаиморасчетов"" (заполнение)", 5);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""акт сверки взаиморасчетов"" (проведение)", 2);
	
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""ввод начальных остатков"" (проведение)", 2);
	
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""ввод сведений о плановых удержаниях сотрудников организаций"" (проведение)", 2);
	
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""ввод сведений о регл. учете плановых начислений сотрудников организаций"" (проведение)", 2);
	
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""возврат зарплаты сотрудников организации"" (запись)", 2);
	
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""возврат тмз от покупателя"" (проведение)", 3);
	
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""возврат тмз поставщику"" (проведение)", 3);
	
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""выработка нма"" (проведение)", 3);
	
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""выработка ос"" (проведение)", 3);
	
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""гтд по импорту"" (проведение)", 3);
	
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""депонирование заработной платы"" (проведение)", 3);
	
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""доверенность"" (запись)", 2);
	
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""закрытие дт/кт задолженности"" (заполнение)", 5);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""закрытие дт/кт задолженности"" (проведение)", 3);
	
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""закрытие месяца"" (начисление амортизации ос)"												, 20);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""закрытие месяца"" (начисление амортизации нма)"												, 10);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""закрытие месяца"" (включение активов, учитываемых отдельно, в стоимостный баланс групп (ну))"	, 10);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""закрытие месяца"" (закрытие подотчетных сумм)"												, 10);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""закрытие месяца"" (закрытие счетов (ну))"														, 10);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""закрытие месяца"" (зачет авансовых платежей по налогам и сборам (бу))"						, 10);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""закрытие месяца"" (зачет авансовых платежей по налогам и сборам (ну))"						, 10);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""закрытие месяца"" (расчет временных разниц)"													, 10);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""закрытие месяца"" (расчет вычета по реализованным товарам)"									, 10);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""закрытие месяца"" (расчет вычета по налогам, уплаченным в бюджет)"							, 10);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""закрытие месяца"" (расчет вычетов по преференциям фа(ну))"									, 10);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""закрытие месяца"" (расчет вычетов по расходам на ремонт фа(ну))"								, 10);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""закрытие месяца"" (расчет итогового дохода убытка (бу))"										, 20);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""закрытие месяца"" (расчет итогового дохода убытка (ну))"										, 20);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""закрытие месяца"" (расчет налога на прибыль)"													, 50);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""закрытие месяца"" (зачет ндс к возмещению)"													, 10);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""закрытие месяца"" (регламентные операции по стоимости фа(ну))"								, 10);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""закрытие месяца"" (реформация баланса)"														, 10);
	
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""закрытие месяца"" (расчет и корректировка себестоимости продукции (услуг)) (бу) (ну)"	, 100);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""закрытие месяца"" (расчет и корректировка себестоимости продукции (услуг)) (бу)"		, 50);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""закрытие месяца"" (расчет и корректировка себестоимости продукции (услуг)) (ну)"		, 50);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""закрытие месяца"" (перенос незавершенного производства) (бу) (ну)"					, 50);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""закрытие месяца"" (перенос незавершенного производства) (бу)"							, 25);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""закрытие месяца"" (перенос незавершенного производства) (ну0"							, 25);
	
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""закрытие месяца"" (переоценка валютных средств)"				, 10);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""закрытие месяца"" (списание резерва по переоценке ос)"		, 10);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""закрытие месяца"" (списание расходов будущих периодов)"		, 10);
	
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""зарплата к выплате организаций"" (заполнение)", 5);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""зарплата к выплате организаций"" (расчет)"	, 5);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""зарплата к выплате организаций"" (запись)"	, 2);
	
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""заявление на предоставление вычетов ипн"" (проведение)", 2);
	
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""заявление о ввозе товаров и уплате косвенных налогов"" (проведение)", 3);
	
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""изменение графиков амортизации ос"" (проведение)", 2);
	
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""изменение параметров начисления амортизации нма"" (проведение)", 2);
	
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""изменение параметров начисления амортизации ос"" (проведение)", 2);
	
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""изменение состояния ос"" (проведение)", 2);
	
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""изменение способа отражения расходов по амортизации нма"" (проведение)", 2);
	
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""изменение способа отражения расходов по амортизации ос"" (проведение)", 2);
	
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""ил перечисление получателям"" (заполнение остатки)"					, 3);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""ил перечисление получателям"" (заполнение остатки на конец месяца)"	, 3);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""ил перечисление получателям"" (проведение)"							, 2);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""ил перечисление получателям"" (расчет на дату документа)"				, 3);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""ил перечисление получателям"" (расчет на конец месяца)"				, 3);
	
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""инвентаризация денежных средств"" (запись)"								, 2);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""инвентаризация денежных средств"" (заполнение по остаткам в кассе)"		, 3);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""инвентаризация денежных средств"" (заполнение по остаткам в организации)"	, 3);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""инвентаризация денежных средств"" (перезаполнение учетных сумм)"			, 3);
	
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""инвентаризация незавершенного производства"" (запись)", 2);
	
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""инвентаризация ос"" (заполнение данными учета)"	, 5);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""инвентаризация ос"" (заполнение по остаткам)"		, 5);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""инвентаризация ос"" (проведение)"					, 3);
	
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""инвентаризация тмз на складе"" (запись)"								 	, 2);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""инвентаризация тмз на складе"" (заполнение по остаткам на складе)"	 	, 5);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""инвентаризация тмз на складе"" (заполнение по остаткам организации)"		, 7);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""инвентаризация тмз на складе"" (перезаполнение по остаткам на складе)"	, 5);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""инвентаризация тмз на складе"" (перезаполнение по остаткам организации)"	, 7);
	
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""заявление на предоставление вычета по ипн (до 2018)"" (проведение)", 2);
	
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""исполнительный лист"" (проведение)", 2);
	
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""кадровое перемещение организации"" (проведение)", 2);
	
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""командировки организации"" (проведение)", 2);
	
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""комплектация тмз"" (проведение)", 3);
	
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""комплектация ос"" (проведение)", 3);
	
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""корректировка долга"" (заполнение)", 4);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""корректировка долга"" (проведение)", 2);
	
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""корректировки стоимости списания товаров"" (проведение)", 20);
	
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""модернизация ос"" (заполнение)", 4);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""модернизация ос"" (проведение)", 2);
	
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""начисление зарплаты сотрудникам организации"" (автозаполнение по всем сотрудникам)"	, 7);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""начисление зарплаты сотрудникам организации"" (проведение)"							, 3);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""начисление зарплаты сотрудникам организации"" (расчет сотрудника)"					, 7);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""начисление зарплаты сотрудникам организации"" (расчет)"								, 2);
	
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""пенсионные взносы возврат из фондов"" (запись)", 2);
	
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""пенсионные взносы перечисление в фонды"" (запись)"	, 2);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""пенсионные взносы перечисление в фонды"" (заполнение)", 3);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""пенсионные взносы перечисление в фонды"" (расчет)"	, 3);
	
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""операция"" (запись)", 3);
	
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""оплаты от покупателя платежными картами"" (проведение)", 2);
	
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""оприходование тмз"" (проведение)", 3);
	
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""отражение зарплаты в регл. учете"" (заполнение)", 7);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""отражение зарплаты в регл. учете"" (проведение)", 3);
	
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""отражение налоговой отчетности в регл. учете"" (перезаполнение по данным регл.отчета)"	, 7);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""отражение налоговой отчетности в регл. учете"" (проведение)"		, 3);
	
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""отчет производства за смену"" (проведение)", 3);
	
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""передача нма"" (проведение)", 3);
	
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""передача ос"" (заполнение)", 4);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""передача ос"" (проведение)", 2);
	
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""передача тмз"" (проведение)", 3);
	
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""перемещение ос"" (заполнение)", 4);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""перемещение ос"" (проведение)", 2);
	
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""перемещение тмз"" (заполнение)", 4);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""перемещение тмз"" (проведение)", 2);
	
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""переоценка внеоборотных активов"" (проведение)", 3);
	
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""платежное поручение (входящее)"" (проведение)", 2);
	
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""платежное поручение (исходящее)"" (проведение)", 2);
	
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""платежный ордер (поступление денежных средств)"" (проведение)", 2);
	
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""платежный ордер (списание денежных средств)"" (проведение)", 2);
	
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""поступление доп. расходов"" (проведение)", 3);
	
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""поступление из переработки"" (проведение)", 3);
	
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""поступление нма"" (проведение)", 3);
	
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""поступление тмз и услуг"" (проведение)", 3);
	
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""прекращение предоставления вычетов ипн"" (проведение)", 2);
	
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""прием на работу в организацию"" (проведение)", 2);
	
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""принятие к учету нма"" (проведение)", 3);
	
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""принятие к учету ос"" (заполнение)", 4);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""принятие к учету ос"" (проведение)", 3);
	
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""приходный кассовый ордер"" (проведение)", 2);
	
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""расходный кассовый ордер"" (проведение)", 2);
	
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""расчет налогов при поступлении активов и услуг"" (проведение)", 3);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""расчет налогов при поступлении активов и услуг"" (расчет)"	, 3);
	
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""расчет пени по взносам и отчислениям"" (заполнение)"	, 3);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""расчет пени по взносам и отчислениям"" (проведение)"	, 2);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""расчет пени по взносам и отчислениям"" (расчет)"		, 3);
	
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""расчет налогов, взносов и отчислений сотрудников организаций"" (заполнение)"	, 3);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""расчет налогов, взносов и отчислений сотрудников организаций"" (проведение)"	, 2);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""расчет налогов, взносов и отчислений сотрудников организаций"" (расчет)"		, 3);
	
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""расчет удержаний сотрудников организаций"" (заполнение)"				, 7);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""расчет удержаний сотрудников организаций"" (проведение)"				, 3);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""расчет удержаний сотрудников организаций"" (расчет)"					, 8);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""расчет удержаний сотрудников организаций"" (расчет сотрудника)"		, 2);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""расчет удержаний сотрудников организаций"" (расчет налоговые вычеты)"	, 2);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""расчет удержаний сотрудников организаций"" (расчет налоги и взносы)"	, 2);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""расчет удержаний сотрудников организаций"" (расчет удержания)"		, 2);
	
	
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""реализация тмз и услуг"" (проведение)", 3);
	
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""реализация услуг по переработке"" (проведение)", 3);
	
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""регистрация ндс за нерезидента"" (проведение)", 2);
	
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""регистрация прочих доходов в целях налогообложения"" (проведение)", 2);
	
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""регистрация прочих операций по приобретенным товарам (работам, услугам) в целях ндс"" (проведение)", 2);
	
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""регистрация прочих операций по реализованным товарам (работам, услугам) в целях ндс"" (проведение)", 2);
	
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""регистрация разовых удержаний сотрудников организации"" (проведение)"		 	, 2);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""регистрация разовых удержаний сотрудников организации"" (расчет)"				, 2);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""регистрация разовых удержаний сотрудников организации"" (расчет сотрудника)"	, 2);
	
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""реструктуризация ос"" (проведение)", 3);
	
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""социальное страхование возврат из фондов"" (запись)", 2);
	
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""социальное страхование перечисление в фонды"" (запись)"		, 2);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""социальное страхование перечисление в фонды"" (заполнение)"	, 3);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""социальное страхование перечисление в фонды"" (расчет)"		, 3);
	
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""списание нма"" (проведение)", 3);
	
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""списание ос"" (заполнение)", 4);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""списание ос"" (проведение)", 3);
	
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""списание тмз"" (проведение)", 3);
	
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""сторнирование"" (запись)"						, 3);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""сторнирование"" (обновление движений документа)", 5);
	
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""счет на оплату покупателю"" (запись)", 2);
	
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""счет-фактура (выданный)"" (проведение)", 2);
	
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""счет-фактура (полученный)"" (проведение)", 2);
	
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""требование-накладная"" (проведение)", 3);
	
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""увольнение из организации"" (проведение)", 2);
	
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""удержание ипн, опв и восмс по налоговому учету"" (заполнение)"	, 7);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""удержание ипн, опв и восмс по налоговому учету"" (расчет восмс)"	, 4);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""удержание ипн, опв и восмс по налоговому учету"" (расчет ипн)"	, 4);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""удержание ипн, опв и восмс по налоговому учету"" (расчет опв)"	, 4);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""удержание ипн, опв и восмс по налоговому учету"" (расчет)"		, 4);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""удержание ипн, опв и восмс по налоговому учету"" (проведение)"	, 3);
	
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""установка цен номенклатуры"" (проведение)", 3);
	
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""эсф"" (проведение)", 2);
	
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Документ ""электронный документ вс"" (проведение)", 2);
	
	#КонецОбласти
	///////////////////////
	// Журналы документов
	
	#Область Отчеты
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Регламентированный отчет ""форма 100 декларация по кпн"" (заполнение)"	, 30);	
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Регламентированный отчет ""форма 100_01 декларация по кпн"" (заполнение)", 10);	
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Регламентированный отчет ""форма 100_02 декларация по кпн"" (заполнение)", 10);	
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Регламентированный отчет ""форма 100_07 декларация по кпн"" (заполнение)", 10);	
	
	
	
	
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Регламентированный отчет ""форма 200 декларация по ипн и сн"" (заполнение)"	 , 30);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Регламентированный отчет ""форма 200_01 декларация по ипн и сн"" (заполнение)", 10);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Регламентированный отчет ""форма 200_02 декларация по ипн и сн"" (заполнение)", 10);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Регламентированный отчет ""форма 200_03 декларация по ипн и сн"" (заполнение)", 10);
	
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Регламентированный отчет ""форма 220 декларация по ипн"" (заполнение)"	, 20);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Регламентированный отчет ""форма 220_01 декларация по ипн"" (заполнение)", 10);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Регламентированный отчет ""форма 220_04 декларация по ипн"" (заполнение)", 10);
	
	
	
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Регламентированный отчет ""форма 300 декларация по ндс"" (заполнение)"	, 55);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Регламентированный отчет ""форма 300_01 декларация по ндс"" (заполнение)", 5);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Регламентированный отчет ""форма 300_02 декларация по ндс"" (заполнение)", 5);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Регламентированный отчет ""форма 300_03 декларация по ндс"" (заполнение)", 5);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Регламентированный отчет ""форма 300_04 декларация по ндс"" (заполнение)", 5);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Регламентированный отчет ""форма 300_05 декларация по ндс"" (заполнение)", 5);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Регламентированный отчет ""форма 300_06 декларация по ндс"" (заполнение)", 5);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Регламентированный отчет ""форма 300_07 декларация по ндс"" (заполнение)", 10);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Регламентированный отчет ""форма 300_08 декларация по ндс"" (заполнение)", 10);
	
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Регламентированный отчет ""форма 400 декларация по акцизу"" (заполнение)"   , 30);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Регламентированный отчет ""форма 400_01 декларация по акцизу"" (заполнение)", 5);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Регламентированный отчет ""форма 400_02 декларация по акцизу"" (заполнение)", 5);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Регламентированный отчет ""форма 400_03 декларация по акцизу"" (заполнение)", 5);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Регламентированный отчет ""форма 400_04 декларация по акцизу"" (заполнение)", 5);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Регламентированный отчет ""форма 400_05 декларация по акцизу"" (заполнение)", 5);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Регламентированный отчет ""форма 400_08 декларация по акцизу"" (заполнение)", 5);
	
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Регламентированный отчет ""форма 700 декларация по налогу на транспортные средства, земельному налогу и налогу на имущество"" (заполнение)"	, 12);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Регламентированный отчет ""форма 700_01 декларация по налогу на транспортные средства, земельному налогу и налогу на имущество"" (заполнение)", 5);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Регламентированный отчет ""форма 700_02 декларация по налогу на транспортные средства, земельному налогу и налогу на имущество"" (заполнение)", 5);
	
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Регламентированный отчет ""форма 70101 Расчет текущих платежей по земельному налогу и налогу на имущество"" (заполнение)"   , 12);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Регламентированный отчет ""форма 70101_001 Расчет текущих платежей по земельному налогу и налогу на имущество"" (заполнение)", 5);
	
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Регламентированный отчет ""форма 910 Упрощенная декларация для субъектов малого бизнеса"" (заполнение)", 5);
	
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Регламентированный отчет ""расчет по исчислению и удержанию ипн и исчислению сн"" (заполнение)", 5);
	
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Регламентированный отчет ""справка о заработной плате"" (заполнение)", 5);
	
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Регламентированный отчет ""справка о перечислении пенсионных взносов"" (заполнение)", 5);
	
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Регламентированный отчет ""справка о суммах дохода и осуществленных пенсионных взносов"" (заполнение)", 5);
	
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Регламентированный отчет ""справка о суммах доходов и взносов осмс"" (заполнение)", 5);
	
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Отчет ""справка с места работы о доходах за последние двенадцать календарных месяцев перед наступлением социального риска""", 5);
	
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Регламентированный отчет ""форма № инв-4"" (заполнение)", 5);
	
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Регламентированный отчет ""баланс (мсфо)"" (заполнение)", 5);
	
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Регламентированный отчет ""о доходах и расходах (мсфо)"" (заполнение)", 5);
	
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Регламентированный отчет ""об изменениях в собственном капитале (мсфо)"" (заполнение)", 5);
	
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Регламентированный отчет ""баланс (нсфо)"" (заполнение)", 5);
	
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Регламентированный отчет ""о прибылях и убытках (нсфо)"" (заполнение)", 5);
	
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Регламентированный отчет ""баланс (мсфо мсб)"" (заполнение)", 5);
	
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Регламентированный отчет ""о движении денежных средств (мсфо мсб)"" (заполнение)", 5);
	
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Регламентированный отчет ""о совокупном доходе, методом одного отчета(мсфо мсб)"" (заполнение)", 5);
	
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Регламентированный отчет ""об изменениях в капитале (МСФО МСБ)"" (заполнение)", 5);
	
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Регламентированный отчет ""форма № 1-т квартальная"" (заполнение)", 5);
	
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Регламентированный отчет ""форма 11 ос годовая"" (заполнение)", 5);
	
	#КонецОбласти
	
	#Область Обработки
	
	//РасчетРегламентированнойЗарплаты - целевое время 3адоно из расчета  1 подразделения
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Обработка ""расчет регламентированной зарплаты"" (рассчет отмеченных подразделений)", 50);
	
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Обработка ""расчет регламентированной зарплаты"" (отражение зарплаты в регл учете)"		, 7);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Обработка ""расчет регламентированной зарплаты"" (проведение отражение зарплаты в регл учете)"	, 3);
	
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Обработка ""расчет регламентированной зарплаты"" (удержание ипн, опв и восмс по ну)"	, 7);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Обработка ""расчет регламентированной зарплаты"" (проведение удержание ипн, опв и восмс по ну)", 3);
	
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Обработка ""расчет регламентированной зарплаты"" (начисление зарплаты сотрудникам организации)"		, 7);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Обработка ""расчет регламентированной зарплаты"" (проведение начисление зарплаты сотрудникам организации)"	, 3);
	
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Обработка ""расчет регламентированной зарплаты"" (расчет удержаний сотрудников организаций)"		, 7);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Обработка ""расчет регламентированной зарплаты"" (проведение расчет удержаний сотрудников организаций)"	, 3);
	
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Обработка ""расчет регламентированной зарплаты"" (расчет налогов, взносов и отчислений сотрудников организаций)"		, 3);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Обработка ""расчет регламентированной зарплаты"" (проведение расчет налогов, взносов и отчислений сотрудников организаций)"	, 2);
	
	
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Обработка ""расчет по среднему заработку"" (расчет отпускных)"						, 5);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Обработка ""расчет по среднему заработку"" (расчет среднего для отпуска)"		, 5);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Обработка ""расчет по среднему заработку"" (расчет среднего для больнихного листа)"					, 5);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "Обработка ""расчет по среднему заработку"" (расчет больничного листа)"	, 5);
	
	#КонецОбласти

	///////////////////////
	// Актуализация данных
	
	///////////////////////
	// Монитор руководителя
	
	///////////////////////
	// Информационная панель
	
	///////////////////////
	// Быстрый старт
	
КонецПроцедуры

Процедура ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, ИмяКлючевойОперации, ЦелевоеВремя)

	НоваяСтрока = ТаблицаКлючевыхОпераций.Добавить();
	НоваяСтрока.ИмяКлючевойОперации = ИмяКлючевойОперации;
	НоваяСтрока.ЦелевоеВремя 		= ЦелевоеВремя;

КонецПроцедуры 

Процедура УстановитьРеквизитыКлючевойОперации(ИмяКлючевойОперации, Знач СсылкаНаКлючевуюОперацию, Приоритет, ЦелевоеВремя)
	
	Если НЕ ЗначениеЗаполнено(СсылкаНаКлючевуюОперацию) Тогда
		СсылкаНаКлючевуюОперацию = ОценкаПроизводительностиПовтИсп.ПолучитьКлючевуюОперациюПоИмени(ИмяКлючевойОперации);
	КонецЕсли;
	СпрОбъект = СсылкаНаКлючевуюОперацию.ПолучитьОбъект();

	СпрОбъект.ДополнительныеСвойства.Вставить(ОценкаПроизводительностиКлиентСервер.НеПроверятьПриоритет());
	
	СпрОбъект.ПометкаУдаления				= Ложь;
	СпрОбъект.Имя							= ИмяКлючевойОперации;
	СпрОбъект.МинимальноДопустимыйУровень 	= Перечисления.УровниПроизводительности.Хорошо;
	Если НЕ ЗначениеЗаполнено(СпрОбъект.Приоритет) Тогда
		СпрОбъект.Приоритет					= Приоритет;
	КонецЕсли;
	СпрОбъект.ЦелевоеВремя					= ЦелевоеВремя;
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(СпрОбъект, Ложь, Ложь);
	
КонецПроцедуры

#КонецОбласти

Процедура ОбновитьПодключаемоеОборудованиеWebkassa() Экспорт
	
	ПолноеИмяОбъекта = "Справочник.ПодключаемоеОборудование";
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПодключаемоеОборудование.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ПодключаемоеОборудование КАК ПодключаемоеОборудование
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДрайверыОборудования КАК ДрайверыОборудования
	|		ПО ПодключаемоеОборудование.ДрайверОборудования = ДрайверыОборудования.Ссылка
	|ГДЕ
	|	ДрайверыОборудования.ОбработчикДрайвера = &ОбработчикДрайвера";
	
	Запрос.УстановитьПараметр("ОбработчикДрайвера", Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикWebkassaФискальныеРегистраторы);
	
	ОбъектыДляОбработки = Запрос.Выполнить().Выбрать();
	
	Пока ОбъектыДляОбработки.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			// Устанавливаем управляемую блокировку, чтобы провести ответственное чтение объекта.
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", ОбъектыДляОбработки.Ссылка);
			
			Блокировка.Заблокировать();
			
			Объект = ОбъектыДляОбработки.Ссылка.ПолучитьОбъект();
			
			Если Объект = Неопределено Тогда
				ОтменитьТранзакцию();
				Продолжить;
			КонецЕсли;
			
			Идентификатор = ОбъектыДляОбработки.Ссылка;
			ДанныеУстройства = МенеджерОборудованияВызовСервера.ПолучитьДанныеУстройства(Идентификатор);
			ПараметрыОборудования = ДанныеУстройства.Параметры;
			
			Если Не ПараметрыОборудования.Свойство("ИспользоватьПринтерЧеков") Тогда
				
				времАвтоматическаяПечатьЧека  = Неопределено;
				времШиринаЛенты               = Неопределено;
				
				ПараметрыОборудования.Свойство("АвтоматическаяПечатьЧека", времАвтоматическаяПечатьЧека);
				ПараметрыОборудования.Свойство("ШиринаЛенты"             , времШиринаЛенты);
				
				АвтоматическаяПечатьЧека = ?(времАвтоматическаяПечатьЧека  = Неопределено, Ложь, времАвтоматическаяПечатьЧека);
				ШиринаЛенты = ?(времШиринаЛенты = Неопределено, "24", времШиринаЛенты);
				ШиринаЛенты = ?(АвтоматическаяПечатьЧека, ШиринаЛенты, "24");
				
				НовыеПараметрыОборудования = Новый Структура;
				НовыеПараметрыОборудования.Вставить("АвтоматическаяПечатьЧека", АвтоматическаяПечатьЧека);
				НовыеПараметрыОборудования.Вставить("ШиринаЛенты"             , ШиринаЛенты);
				//принтеры чеков
				НовыеПараметрыОборудования.Вставить("ПринтерЧеков"            , Неопределено);
				НовыеПараметрыОборудования.Вставить("ИспользоватьПринтерЧеков", Ложь);
				
				Объект.Параметры = Новый ХранилищеЗначения(НовыеПараметрыОборудования);
				
			КонецЕсли;
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(Объект);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			МетаданныеОбъекта = Метаданные.НайтиПоПолномуИмени(ПолноеИмяОбъекта);
			
			ТекстСообщения = НСтр("ru = 'Не удалось обработать %ИмяОбъекта%: %Ссылка% по причине: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИмяОбъекта%", ПолноеИмяОбъекта);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%", ОбъектыДляОбработки.Ссылка);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
										УровеньЖурналаРегистрации.Предупреждение,
										МетаданныеОбъекта,
										ОбъектыДляОбработки.Ссылка,
										ТекстСообщения);
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеНа_3_0_32

Процедура ПереносНастроекWebkassa() Экспорт
	
	ПолноеИмяОбъекта = "Справочник.УдалитьНастройкиИнтеграцииWebKassa";
	
	//запрос получаем старые настройки
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УдалитьНастройкиИнтеграцииWebKassa.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.УдалитьНастройкиИнтеграцииWebKassa КАК УдалитьНастройкиИнтеграцииWebKassa";
	
	ОбъектыДляОбработки = Запрос.Выполнить().Выбрать();
	
	Пока ОбъектыДляОбработки.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			// Устанавливаем управляемую блокировку, чтобы провести ответственное чтение объекта.
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", ОбъектыДляОбработки.Ссылка);
			
			Блокировка.Заблокировать();
			
			СтараяНастройка = ОбъектыДляОбработки.Ссылка.ПолучитьОбъект();
			
			Если СтараяНастройка = Неопределено Тогда
				ОтменитьТранзакцию();
				Продолжить;
			КонецЕсли;
			
			НоваяНастройка = Справочники.НастройкиИнтеграцииWebKassa.СоздатьЭлемент();
			
			ЗаполнитьЗначенияСвойств(НоваяНастройка, СтараяНастройка, "Организация, АдресСервиса, ПометкаУдаления, Наименование");
			
			Для каждого СтараяСтрока Из СтараяНастройка.Пользователи Цикл
				
				НоваяСтрока = НоваяНастройка.Пользователи.Добавить();
				НоваяСтрока.ИмяПользователя = СтараяСтрока.ИмяПользователя;
				
			КонецЦикла;
			
			НоваяНастройка.Записать();
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			МетаданныеОбъекта = Метаданные.НайтиПоПолномуИмени(ПолноеИмяОбъекта);
			
			ТекстСообщения = НСтр("ru = 'Не удалось обработать %ИмяОбъекта%: %Ссылка% по причине: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИмяОбъекта%", ПолноеИмяОбъекта);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%", ОбъектыДляОбработки.Ссылка);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
										УровеньЖурналаРегистрации.Предупреждение,
										МетаданныеОбъекта,
										ОбъектыДляОбработки.Ссылка,
										ТекстСообщения);
										
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

// Добавляет роли Базовые права 1С:WebKassa и Настройка интеграции 1С:WebKassa в необходимые профили
Процедура ДобавитьВПрофилиРолиWebkassa() Экспорт
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		Возврат;
	КонецЕсли;
	
	МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
	
	// БазовыеПраваWebKassa
	НовыеРоли = Новый Массив;
	НовыеРоли.Добавить(Метаданные.Роли.ЧтениеПодключаемогоОборудования.Имя);
	НовыеРоли.Добавить(Метаданные.Роли.БазовыеПраваWebKassa.Имя);
	
	ЗаменяемыеРоли = Новый Соответствие;
	ЗаменяемыеРоли.Вставить(Метаданные.Роли.ЧтениеПодключаемогоОборудования.Имя, НовыеРоли);
	
	МодульУправлениеДоступом.ЗаменитьРолиВПрофилях(ЗаменяемыеРоли);
	
	// НастройкаИнтеграцииWebKassa
	НовыеРоли = Новый Массив;
	НовыеРоли.Добавить(Метаданные.Роли.ДобавлениеИзменениеПодключаемогоОборудования.Имя);
	НовыеРоли.Добавить(Метаданные.Роли.НастройкаИнтеграцииWebKassa.Имя);
	
	ЗаменяемыеРоли = Новый Соответствие;
	ЗаменяемыеРоли.Вставить(Метаданные.Роли.ДобавлениеИзменениеПодключаемогоОборудования.Имя, НовыеРоли);
	
	МодульУправлениеДоступом.ЗаменитьРолиВПрофилях(ЗаменяемыеРоли);
	
	
КонецПроцедуры

#КонецОбласти

#Область ОбновленияНа_3_0_33

Процедура ДобавитьВПрофилиРолиПланыСчетов() Экспорт
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		Возврат;
	КонецЕсли;
	
	МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
	
	НовыеРоли = Новый Массив;
	НовыеРоли.Добавить(Метаданные.Роли.ДобавлениеИзменениеНастроекБухгалтерии.Имя);
	НовыеРоли.Добавить(Метаданные.Роли.ДобавлениеИзменениеДанныхПлановСчетов.Имя);
	
	ЗаменяемыеРоли = Новый Соответствие;
	ЗаменяемыеРоли.Вставить(Метаданные.Роли.ДобавлениеИзменениеНастроекБухгалтерии.Имя, НовыеРоли);
	
	МодульУправлениеДоступом.ЗаменитьРолиВПрофилях(ЗаменяемыеРоли);
	
	НовыеРоли = Новый Массив;
	НовыеРоли.Добавить(Метаданные.Роли.ДобавлениеИзменениеДанныхБухгалтерии.Имя);
	НовыеРоли.Добавить(Метаданные.Роли.ДобавлениеИзменениеДанныхПлановСчетов.Имя);
	
	ЗаменяемыеРоли = Новый Соответствие;
	ЗаменяемыеРоли.Вставить(Метаданные.Роли.ДобавлениеИзменениеДанныхБухгалтерии.Имя, НовыеРоли);
	
	МодульУправлениеДоступом.ЗаменитьРолиВПрофилях(ЗаменяемыеРоли);
	
	
КонецПроцедуры

Процедура ЗаполнитьРесурсыУчетнаяПолитикаНалоговыйУчет() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДАТАВРЕМЯ(2020, 1, 1) КАК Период,
	|	УчетнаяПолитикаНалоговыйУчетСрезПоследних.Организация КАК Организация,
	|	УчетнаяПолитикаНалоговыйУчетСрезПоследних.НДСНалоговыйПериод КАК НДСНалоговыйПериод,
	|	УчетнаяПолитикаНалоговыйУчетСрезПоследних.НДСМетодОтнесенияВЗачет КАК НДСМетодОтнесенияВЗачет,
	|	УчетнаяПолитикаНалоговыйУчетСрезПоследних.ОрганизацияЯвляетсяПлательщикомНДС КАК ОрганизацияЯвляетсяПлательщикомНДС,
	|	УчетнаяПолитикаНалоговыйУчетСрезПоследних.ОрганизацияЯвляетсяПлательщикомКПН КАК ОрганизацияЯвляетсяПлательщикомКПН,
	|	УчетнаяПолитикаНалоговыйУчетСрезПоследних.ОрганизацияЯвляетсяПлательщикомАкциза КАК ОрганизацияЯвляетсяПлательщикомАкциза,
	|	УчетнаяПолитикаНалоговыйУчетСрезПоследних.ОрганизацияЯвляетсяПлательщикомСН КАК ОрганизацияЯвляетсяПлательщикомСН,
	|	УчетнаяПолитикаНалоговыйУчетСрезПоследних.УпрощенныйУчетИПНиОПВ КАК УпрощенныйУчетИПНиОПВ,
	|	УчетнаяПолитикаНалоговыйУчетСрезПоследних.ОтражениеПоПериодуРегистрации КАК ОтражениеПоПериодуРегистрации,
	|	УчетнаяПолитикаНалоговыйУчетСрезПоследних.ЗасчитыватьВВыплаченныеДоходыУдержанияПоИЛ КАК ЗасчитыватьВВыплаченныеДоходыУдержанияПоИЛ,
	|	УчетнаяПолитикаНалоговыйУчетСрезПоследних.КоэффициентМРПДляРасчетаСНЗаИндивидуальногоПредпринимателя КАК КоэффициентМРПДляРасчетаСНЗаИндивидуальногоПредпринимателя,
	|	УчетнаяПолитикаНалоговыйУчетСрезПоследних.КоэффициентМРПДляРасчетаСНЗаНаемногоРаботника КАК КоэффициентМРПДляРасчетаСНЗаНаемногоРаботника,
	|	УчетнаяПолитикаНалоговыйУчетСрезПоследних.ПрименятьОграничениеНаМинимальнуюБазуСоциальногоНалога КАК ПрименятьОграничениеНаМинимальнуюБазуСоциальногоНалога,
	|	УчетнаяПолитикаНалоговыйУчетСрезПоследних.ПорядокСписанияЗадолженностиПоЗарплате КАК ПорядокСписанияЗадолженностиПоЗарплате,
	|	УчетнаяПолитикаНалоговыйУчетСрезПоследних.РаспределятьНалогиПоСтруктурнымЕдиницам КАК РаспределятьНалогиПоСтруктурнымЕдиницам,
	|	УчетнаяПолитикаНалоговыйУчетСрезПоследних.РаспределятьНалогиПоПодразделениямОрганизаций КАК РаспределятьНалогиПоПодразделениямОрганизаций,
	|	УчетнаяПолитикаНалоговыйУчетСрезПоследних.ОрганизацияЯвляетсяВкладчикомОППВ КАК ОрганизацияЯвляетсяВкладчикомОППВ,
	|	УчетнаяПолитикаНалоговыйУчетСрезПоследних.ПрименятьОграничениеНаМинимальныйОбъектОСМС КАК ПрименятьОграничениеНаМинимальныйОбъектОСМС,
	|	УчетнаяПолитикаНалоговыйУчетСрезПоследних.ЕжемесячныйРасчетВзносовИОтчисленийЗаИП КАК ЕжемесячныйРасчетВзносовИОтчисленийЗаИП,
	|	УчетнаяПолитикаНалоговыйУчетСрезПоследних.ПорядокРасчетаДоходаОПВ КАК ПорядокРасчетаДоходаОПВ,
	|	УчетнаяПолитикаНалоговыйУчетСрезПоследних.РазмерДоходаОПВ КАК РазмерДоходаОПВ,
	|	УчетнаяПолитикаНалоговыйУчетСрезПоследних.ПорядокРасчетаДоходаСО КАК ПорядокРасчетаДоходаСО,
	|	УчетнаяПолитикаНалоговыйУчетСрезПоследних.РазмерДоходаСО КАК РазмерДоходаСО,
	|	УчетнаяПолитикаНалоговыйУчетСрезПоследних.ПредоставлятьВычетВМесяцеОтсутствияДохода КАК ПредоставлятьВычетВМесяцеОтсутствияДохода,
	|	УчетнаяПолитикаНалоговыйУчетСрезПоследних.СпособОтраженияОПВИП КАК СпособОтраженияОПВИП,
	|	УчетнаяПолитикаНалоговыйУчетСрезПоследних.СпособОтраженияСОИП КАК СпособОтраженияСОИП,
	|	УчетнаяПолитикаНалоговыйУчетСрезПоследних.СпособОтраженияВОСМСИП КАК СпособОтраженияВОСМСИП,
	|	5 КАК СтавкаВОСМСДляИП,
	|	ВЫБОР КОГДА УчетнаяПолитикаНалоговыйУчетСрезПоследних.ЕжемесячныйРасчетВзносовИОтчисленийЗаИП ТОГДА 1.4 ИНАЧЕ 0 КОНЕЦ КАК РазмерДоходаВОСМС,
	|	ВЫБОР КОГДА УчетнаяПолитикаНалоговыйУчетСрезПоследних.ЕжемесячныйРасчетВзносовИОтчисленийЗаИП ТОГДА ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетаДоходовЗаИП.КратноМЗП)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетаДоходовЗаИП.ПустаяСсылка) КОНЕЦ КАК ПорядокРасчетаДоходаВОСМС
	|ИЗ
	|	РегистрСведений.УчетнаяПолитикаНалоговыйУчет.СрезПоследних(ДАТАВРЕМЯ(2020, 1, 1), ) КАК УчетнаяПолитикаНалоговыйУчетСрезПоследних
	|ГДЕ
	|	УчетнаяПолитикаНалоговыйУчетСрезПоследних.Организация.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ФизЛицо)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		НаборЗаписей = РегистрыСведений.УчетнаяПолитикаНалоговыйУчет.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Организация.Значение   = ВыборкаДетальныеЗаписи.Организация;
		НаборЗаписей.Отбор.Организация.Использование = Истина;
		НаборЗаписей.Отбор.Период.Значение    = ВыборкаДетальныеЗаписи.Период;
		НаборЗаписей.Отбор.Период.Использование   = Истина;
		
		Запись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, ВыборкаДетальныеЗаписи);
		
		Попытка
			НаборЗаписей.Записать();
		Исключение
			ТекстСообщения = НСтр("ru='Операция не выполнена'", ОбщегоНазначения.КодОсновногоЯзыка());
			ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьСведенияОСтавкахОСМС() Экспорт
	
	НаборЗаписей = РегистрыСведений.СведенияОСтавкахОСМС.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Период.Установить('20200101');
	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидДохода        = Перечисления.ЮрФизЛицо.ФизЛицо;
	НоваяЗапись.Период           = '20200101';
	НоваяЗапись.СтавкаВзносы     = 1;
	НоваяЗапись.СтавкаОтчисления = 2;
	
	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидДохода        = Перечисления.ЮрФизЛицо.ЮрЛицо;
	НоваяЗапись.Период           = '20200101';
	НоваяЗапись.СтавкаВзносы     = 1;
	НоваяЗапись.СтавкаОтчисления = 0;
	
	Попытка
		НаборЗаписей.Записать(Истина);
	Исключение
		ТекстСообщения = НСтр("ru='Операция не выполнена'", ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
КонецПроцедуры

Процедура ОбновитьКалендарныеГрафики2020() Экспорт
	
	Если ОбщегоНазначенияПовтИсп.ЭтоАвтономноеРабочееМесто() Тогда
		Возврат;
	КонецЕсли;

	ПроизводственныйКалендарьРК = Справочники.ПроизводственныеКалендари.НайтиПоКоду("РК");
	Если ПроизводственныйКалендарьРК <> Неопределено Тогда
		
		ДанныеПроизводственногоКалендаря          = Справочники.ПроизводственныеКалендари.ДанныеПроизводственногоКалендаря(ПроизводственныйКалендарьРК, 2020);
		ДанныеПроизводственногоКалендаряУмолчанию = Справочники.ПроизводственныеКалендари.РезультатЗаполненияПроизводственногоКалендаряПоУмолчанию("РК", 2020);
		
		Если ДанныеПроизводственногоКалендаря.Количество() = 0 Тогда
			//календарь не был ранее заполнен 			
			Справочники.ПроизводственныеКалендари.ЗаписатьДанныеПроизводственногоКалендаря(ПроизводственныйКалендарьРК, 2020, ДанныеПроизводственногоКалендаряУмолчанию);
			Возврат;
		КонецЕсли;
				
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	КлассификаторТаблица.Дата,
			|	КлассификаторТаблица.ВидДня,
			|	КлассификаторТаблица.ДатаПереноса
			|ПОМЕСТИТЬ КлассификаторТаблица
			|ИЗ
			|	&КлассификаторТаблица КАК КлассификаторТаблица
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ДанныеПроизводственногоКалендаря.Дата,
			|	ДанныеПроизводственногоКалендаря.ВидДня,
			|	ДанныеПроизводственногоКалендаря.ДатаПереноса
			|ПОМЕСТИТЬ ДанныеПроизводственногоКалендаря
			|ИЗ
			|	&ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	КлассификаторТаблица.Дата,
			|	КлассификаторТаблица.ВидДня,
			|	КлассификаторТаблица.ДатаПереноса
			|ИЗ
			|	КлассификаторТаблица КАК КлассификаторТаблица
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
			|		ПО КлассификаторТаблица.Дата = ДанныеПроизводственногоКалендаря.Дата";
		
		Запрос.УстановитьПараметр("КлассификаторТаблица", ДанныеПроизводственногоКалендаряУмолчанию);
		Запрос.УстановитьПараметр("ДанныеПроизводственногоКалендаря", ДанныеПроизводственногоКалендаря);
		
		ДанныеПроизводственногоКалендаряДляЗаписи = Запрос.Выполнить().Выгрузить();
		
		Если ДанныеПроизводственногоКалендаряДляЗаписи.Количество() > 0 Тогда
			Справочники.ПроизводственныеКалендари.ЗаписатьДанныеПроизводственногоКалендаря(ПроизводственныйКалендарьРК, 2020, ДанныеПроизводственногоКалендаряДляЗаписи);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбновленияНа_3_0_33_4

Процедура УдалитьРасширениеОшибкиВОСМС() Экспорт
	
	Если СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации() Тогда
		Возврат;
	КонецЕсли;

	Если Не ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
		Возврат;
	КонецЕсли;
	 
	УдаленныеРасширения = Новый Массив;
	
	НачатьТранзакцию();
	Попытка
		ОтборРасширения = Новый Структура("Имя", "ИсправлениеРасчетаВОСМС2020");
		РасширениеВОСМС = РасширенияКонфигурации.Получить(ОтборРасширения);
		Если РасширениеВОСМС.Количество() = 1 Тогда
			РасширениеКУдалению = РасширениеВОСМС[0];
		Иначе 
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;   
		  		
		Если РасширениеКУдалению <> Неопределено Тогда
			ОписаниеРасширения = Новый Структура;
			ОписаниеРасширения.Вставить("Расширение", РасширениеКУдалению);
			ОписаниеРасширения.Вставить("ДанныеРасширения", РасширениеКУдалению.ПолучитьДанные());
			УдаленныеРасширения.Добавить(ОписаниеРасширения);
		КонецЕсли;
		Для Каждого ОписаниеРасширения Из УдаленныеРасширения Цикл
			Если ОбщегоНазначения.ЕстьЗащитаОтОпасныхДействий() Тогда
				ОписаниеРасширения.Расширение.ЗащитаОтОпасныхДействий = ОбщегоНазначения.ОписаниеЗащитыБезПредупреждений();
			КонецЕсли;
			ОписаниеРасширения.Расширение.Удалить();
		КонецЦикла;
		//Если РасширенияКонфигурации.Получить().Количество() = 0 Тогда
		//	Справочники.ВерсииРасширений.ПриУдаленииВсехРасширений();
		//КонецЕсли;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Не удалось удалить по причине:
		|
		|%1'"), КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
		ВызватьИсключение ТекстОшибки;
	КонецПопытки;
	
КонецПроцедуры

Процедура ОбновитьНастройкиОтчетовСтруктураЗадолженности() Экспорт
	
	НастройкиОтчетов = Новый ТаблицаЗначений;
	НастройкиОтчетов.Колонки.Добавить("КлючОбъекта");
	НастройкиОтчетов.Колонки.Добавить("КлючНастроек");
	НастройкиОтчетов.Колонки.Добавить("Пользователь");
	НастройкиОтчетов.Колонки.Добавить("Представление");
	
	ВыборкаНастроек = ХранилищеПользовательскихНастроекОтчетов.Выбрать();
	
	Пока ВыборкаНастроек.Следующий() Цикл 
		
		ИмяНастроекОтчета = СтрРазделить(ВыборкаНастроек.КлючОбъекта, "/", Ложь);
		Если ИмяНастроекОтчета.Количество() < 2 Тогда
			Продолжить; // Некорректная настройка.
		КонецЕсли;
		
		Если ИмяНастроекОтчета[0] = "Отчет.СтруктураЗадолженностиОрганизацийПоВзносамОСМС"
			ИЛИ ИмяНастроекОтчета[0] = "Отчет.СтруктураЗадолженностиОрганизацийПоОПВ" Тогда
			
			НоваяСтрока = НастройкиОтчетов.Добавить();
			НоваяСтрока.КлючОбъекта = ВыборкаНастроек.КлючОбъекта;
			НоваяСтрока.КлючНастроек = ВыборкаНастроек.КлючНастроек;
			НоваяСтрока.Пользователь = ВыборкаНастроек.Пользователь;
			НоваяСтрока.Представление = ВыборкаНастроек.Представление;
			
		КонецЕсли;
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Истина);
	Для Каждого СтрокаНастройки Из НастройкиОтчетов Цикл
		Попытка
			ХранилищеПользовательскихНастроекОтчетов.Удалить(СтрокаНастройки.КлючОбъекта, СтрокаНастройки.КлючНастроек, СтрокаНастройки.Пользователь);
		Исключение
			ТекстСообщения = НСтр("ru='Операция не выполнена'", ОбщегоНазначения.КодОсновногоЯзыка());
			ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	КонецЦикла;
	УстановитьПривилегированныйРежим(Ложь);
	
	НастройкиОтчетов.Очистить();
	
	ВыборкаНастроек = ХранилищеСистемныхНастроек.Выбрать();
	
	Пока ВыборкаНастроек.Следующий() Цикл 
		
		ИмяНастроекОтчета = СтрРазделить(ВыборкаНастроек.КлючОбъекта, "/", Ложь);
		Если ИмяНастроекОтчета.Количество() < 2 Тогда
			Продолжить; // Некорректная настройка.
		КонецЕсли;
		
		Если СтрНайти(ИмяНастроекОтчета[0],"СтруктураЗадолженностиОрганизацийПоВзносамОСМС") > 0
			ИЛИ СтрНайти(ИмяНастроекОтчета[0], "СтруктураЗадолженностиОрганизацийПоОПВ") > 0 Тогда
			
			НоваяСтрока = НастройкиОтчетов.Добавить();
			НоваяСтрока.КлючОбъекта = ВыборкаНастроек.КлючОбъекта;
			НоваяСтрока.КлючНастроек = ВыборкаНастроек.КлючНастроек;
			НоваяСтрока.Пользователь = ВыборкаНастроек.Пользователь;
			НоваяСтрока.Представление = ВыборкаНастроек.Представление;
			
		КонецЕсли;
		
	КонецЦикла;

	УстановитьПривилегированныйРежим(Истина);
	Для Каждого СтрокаНастройки Из НастройкиОтчетов Цикл
		Попытка
			ХранилищеСистемныхНастроек.Удалить(СтрокаНастройки.КлючОбъекта, СтрокаНастройки.КлючНастроек, СтрокаНастройки.Пользователь);
		Исключение
			ТекстСообщения = НСтр("ru='Операция не выполнена'", ОбщегоНазначения.КодОсновногоЯзыка());
			ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	КонецЦикла;
	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры

#КонецОбласти

#Область ОбновленияНа_3_0_33_5

Процедура ОбновитьТочностьОкругленияВОСМС() Экспорт
	
	// очистим порядок округления ПорядокОкругленияРезультатовРасчетаЗарплаты
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
		|	ПорядокОкругленияРезультатовРасчетаЗарплаты.Период КАК Период,
		|	ПорядокОкругленияРезультатовРасчетаЗарплаты.ВидРасчета КАК ВидРасчета
		|ИЗ
		|	РегистрСведений.ПорядокОкругленияРезультатовРасчетаЗарплаты КАК ПорядокОкругленияРезультатовРасчетаЗарплаты
		|ГДЕ
		|	ПорядокОкругленияРезультатовРасчетаЗарплаты.Период >= ДАТАВРЕМЯ(2020, 1, 1)
		|	И ПорядокОкругленияРезультатовРасчетаЗарплаты.ВидРасчета = ЗНАЧЕНИЕ(Справочник.НалогиСборыОтчисления.ВзносыОбязательноеСоциальноеМедицинскоеСтрахование)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	ПорядокОкругленияРезультатовРасчетаЗарплаты = РегистрыСведений.ПорядокОкругленияРезультатовРасчетаЗарплаты.СоздатьНаборЗаписей();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		ПорядокОкругленияРезультатовРасчетаЗарплаты.Отбор.Период.Установить(ВыборкаДетальныеЗаписи.Период);
		ПорядокОкругленияРезультатовРасчетаЗарплаты.Отбор.ВидРасчета.Установить(ВыборкаДетальныеЗаписи.ВидРасчета);
		
		ПорядокОкругленияРезультатовРасчетаЗарплаты.Прочитать();
		ПорядокОкругленияРезультатовРасчетаЗарплаты.Очистить();
		
		Попытка
			
			ПорядокОкругленияРезультатовРасчетаЗарплаты.ОбменДанными.Загрузка = Истина;
			ПорядокОкругленияРезультатовРасчетаЗарплаты.Записать();
			
		Исключение
			
			ТекстСообщения = НСтр(
			"ru = 'при записи набора данных ""%1"" произошла ошибка: 
			|%2");
			
			ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Метаданные.РегистрыСведений.ПорядокОкругленияРезультатовРасчетаЗарплаты.Представление(), ПодробноеПредставлениеОшибки);
			
			ЗаписьЖурналаРегистрации(
			СтрШаблон(НСтр("ru = 'Не удалось обновить ""Регистр сведений  ""%1"""".'", ОбщегоНазначения.КодОсновногоЯзыка()), Метаданные.РегистрыСведений.ПорядокОкругленияРезультатовРасчетаЗарплаты.Представление()), 
			УровеньЖурналаРегистрации.Ошибка, , , Комментарий);					
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбновленияНа_3_0_33_6

Процедура ЗаполнитьРесурсыУчетнаяПолитикаНалоговыйУчетСОиОПВ() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УчетнаяПолитикаНалоговыйУчет.Период КАК Период,
	|	УчетнаяПолитикаНалоговыйУчет.Организация КАК Организация,
	|	УчетнаяПолитикаНалоговыйУчет.НДСНалоговыйПериод КАК НДСНалоговыйПериод,
	|	УчетнаяПолитикаНалоговыйУчет.НДСМетодОтнесенияВЗачет КАК НДСМетодОтнесенияВЗачет,
	|	УчетнаяПолитикаНалоговыйУчет.ОрганизацияЯвляетсяПлательщикомНДС КАК ОрганизацияЯвляетсяПлательщикомНДС,
	|	УчетнаяПолитикаНалоговыйУчет.ОрганизацияЯвляетсяПлательщикомКПН КАК ОрганизацияЯвляетсяПлательщикомКПН,
	|	УчетнаяПолитикаНалоговыйУчет.ОрганизацияЯвляетсяПлательщикомАкциза КАК ОрганизацияЯвляетсяПлательщикомАкциза,
	|	УчетнаяПолитикаНалоговыйУчет.ОрганизацияЯвляетсяПлательщикомСН КАК ОрганизацияЯвляетсяПлательщикомСН,
	|	УчетнаяПолитикаНалоговыйУчет.УпрощенныйУчетИПНиОПВ КАК УпрощенныйУчетИПНиОПВ,
	|	УчетнаяПолитикаНалоговыйУчет.ОтражениеПоПериодуРегистрации КАК ОтражениеПоПериодуРегистрации,
	|	УчетнаяПолитикаНалоговыйУчет.ЗасчитыватьВВыплаченныеДоходыУдержанияПоИЛ КАК ЗасчитыватьВВыплаченныеДоходыУдержанияПоИЛ,
	|	УчетнаяПолитикаНалоговыйУчет.КоэффициентМРПДляРасчетаСНЗаИндивидуальногоПредпринимателя КАК КоэффициентМРПДляРасчетаСНЗаИндивидуальногоПредпринимателя,
	|	УчетнаяПолитикаНалоговыйУчет.КоэффициентМРПДляРасчетаСНЗаНаемногоРаботника КАК КоэффициентМРПДляРасчетаСНЗаНаемногоРаботника,
	|	УчетнаяПолитикаНалоговыйУчет.ПрименятьОграничениеНаМинимальнуюБазуСоциальногоНалога КАК ПрименятьОграничениеНаМинимальнуюБазуСоциальногоНалога,
	|	УчетнаяПолитикаНалоговыйУчет.ПорядокСписанияЗадолженностиПоЗарплате КАК ПорядокСписанияЗадолженностиПоЗарплате,
	|	УчетнаяПолитикаНалоговыйУчет.РаспределятьНалогиПоСтруктурнымЕдиницам КАК РаспределятьНалогиПоСтруктурнымЕдиницам,
	|	УчетнаяПолитикаНалоговыйУчет.РаспределятьНалогиПоПодразделениямОрганизаций КАК РаспределятьНалогиПоПодразделениямОрганизаций,
	|	УчетнаяПолитикаНалоговыйУчет.ОрганизацияЯвляетсяВкладчикомОППВ КАК ОрганизацияЯвляетсяВкладчикомОППВ,
	|	УчетнаяПолитикаНалоговыйУчет.ПрименятьОграничениеНаМинимальныйОбъектОСМС КАК ПрименятьОграничениеНаМинимальныйОбъектОСМС,
	|	УчетнаяПолитикаНалоговыйУчет.ЕжемесячныйРасчетВзносовИОтчисленийЗаИП КАК ЕжемесячныйРасчетВзносовИОтчисленийЗаИП,
	|	УчетнаяПолитикаНалоговыйУчет.ПорядокРасчетаДоходаОПВ КАК ПорядокРасчетаДоходаОПВ,
	|	УчетнаяПолитикаНалоговыйУчет.РазмерДоходаОПВ КАК РазмерДоходаОПВ,
	|	УчетнаяПолитикаНалоговыйУчет.ПорядокРасчетаДоходаСО КАК ПорядокРасчетаДоходаСО,
	|	УчетнаяПолитикаНалоговыйУчет.РазмерДоходаСО КАК РазмерДоходаСО,
	|	УчетнаяПолитикаНалоговыйУчет.ПредоставлятьВычетВМесяцеОтсутствияДохода КАК ПредоставлятьВычетВМесяцеОтсутствияДохода,
	|	УчетнаяПолитикаНалоговыйУчет.СпособОтраженияОПВИП КАК СпособОтраженияОПВИП,
	|	УчетнаяПолитикаНалоговыйУчет.СпособОтраженияСОИП КАК СпособОтраженияСОИП,
	|	УчетнаяПолитикаНалоговыйУчет.СпособОтраженияВОСМСИП КАК СпособОтраженияВОСМСИП,
	|	ЕСТЬNULL(УчетнаяПолитикаНалоговыйУчет.СтавкаВОСМСДляИП, 5) КАК СтавкаВОСМСДляИП,
	|	10 КАК СтавкаОПВдляИП,
	|	3.5 КАК СтавкаСОДляИП,
	|	УчетнаяПолитикаНалоговыйУчет.РазмерДоходаВОСМС КАК РазмерДоходаВОСМС,
	|	УчетнаяПолитикаНалоговыйУчет.ПорядокРасчетаДоходаВОСМС КАК ПорядокРасчетаДоходаВОСМС
	|ИЗ
	|	РегистрСведений.УчетнаяПолитикаНалоговыйУчет КАК УчетнаяПолитикаНалоговыйУчет
	|ГДЕ
	|	УчетнаяПолитикаНалоговыйУчет.Организация.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ФизЛицо)
	|	И УчетнаяПолитикаНалоговыйУчет.Период >= ДАТАВРЕМЯ(2020, 1, 1)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		НаборЗаписей = РегистрыСведений.УчетнаяПолитикаНалоговыйУчет.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Организация.Значение   = ВыборкаДетальныеЗаписи.Организация;
		НаборЗаписей.Отбор.Организация.Использование = Истина;
		НаборЗаписей.Отбор.Период.Значение    = ВыборкаДетальныеЗаписи.Период;
		НаборЗаписей.Отбор.Период.Использование   = Истина;
		
		Запись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, ВыборкаДетальныеЗаписи);
		
		Попытка
			НаборЗаписей.Записать();
		Исключение
			ТекстСообщения = НСтр("ru='Операция не выполнена'", ОбщегоНазначения.КодОсновногоЯзыка());
			ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбновленияНа_3_0_33_7

Процедура СкорректироватьДвиженияРасчетУдержанийРаботниковОрганизаций() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПериодРегистрации", Дата('20200101'));
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РасчетУдержанийРаботниковОрганизаций.Ссылка КАК Ссылка,
	|	РасчетУдержанийРаботниковОрганизаций.Представление КАК Представление,
	|	РасчетУдержанийРаботниковОрганизаций.Организация КАК Организация,
	|	КОНЕЦПЕРИОДА(РасчетУдержанийРаботниковОрганизаций.ПериодРегистрации, МЕСЯЦ) КАК Период
	|ПОМЕСТИТЬ ДокументыОрганзацииИП
	|ИЗ
	|	Документ.РасчетУдержанийРаботниковОрганизаций КАК РасчетУдержанийРаботниковОрганизаций
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|		ПО РасчетУдержанийРаботниковОрганизаций.Организация = Организации.Ссылка
	|ГДЕ
	|	РасчетУдержанийРаботниковОрганизаций.Проведен
	|	И Организации.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ФизЛицо)
	|	И РасчетУдержанийРаботниковОрганизаций.ПериодРегистрации >= &ПериодРегистрации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументыОрганзацииИП.Ссылка КАК Ссылка,
	|	ДокументыОрганзацииИП.Период КАК Период,
	|	ДокументыОрганзацииИП.Представление КАК Представление,
	|	ДокументыОрганзацииИП.Организация КАК Организация,
	|	МАКСИМУМ(УчетнаяПолитикаНалоговыйУчет.Период) КАК ПериодУП
	|ПОМЕСТИТЬ ДокументыИПСПериодомДляУП
	|ИЗ
	|	ДокументыОрганзацииИП КАК ДокументыОрганзацииИП
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаНалоговыйУчет КАК УчетнаяПолитикаНалоговыйУчет
	|		ПО ДокументыОрганзацииИП.Организация = УчетнаяПолитикаНалоговыйУчет.Организация
	|			И ДокументыОрганзацииИП.Период >= УчетнаяПолитикаНалоговыйУчет.Период
	|
	|СГРУППИРОВАТЬ ПО
	|	ДокументыОрганзацииИП.Ссылка,
	|	ДокументыОрганзацииИП.Представление,
	|	ДокументыОрганзацииИП.Организация,
	|	ДокументыОрганзацииИП.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументыИПСПериодомДляУП.Ссылка КАК Ссылка,
	|	ДокументыИПСПериодомДляУП.Период КАК Период,
	|	ДокументыИПСПериодомДляУП.Представление КАК Представление,
	|	ДокументыИПСПериодомДляУП.Организация КАК Организация
	|ИЗ
	|	ДокументыИПСПериодомДляУП КАК ДокументыИПСПериодомДляУП
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаНалоговыйУчет КАК УчетнаяПолитикаНалоговыйУчет
	|		ПО ДокументыИПСПериодомДляУП.Организация = УчетнаяПолитикаНалоговыйУчет.Организация
	|			И ДокументыИПСПериодомДляУП.ПериодУП = УчетнаяПолитикаНалоговыйУчет.Период
	|ГДЕ
	|	НЕ УчетнаяПолитикаНалоговыйУчет.УпрощенныйУчетИПНиОПВ 
	|	И УчетнаяПолитикаНалоговыйУчет.ЕжемесячныйРасчетВзносовИОтчисленийЗаИП = ИСТИНА";
		
		
	Выборка = Запрос.Выполнить().Выбрать();
	
	НаборЗаписей = РегистрыНакопления.ВОСМСПодлежитПеречислениюВФонды.СоздатьНаборЗаписей();
	
	Пока Выборка.Следующий() Цикл
		НаборЗаписей.Отбор.Регистратор.Значение = Выборка.Ссылка;
		НаборЗаписей.Прочитать();
		НаборЗаписей.Очистить();
		Отказ = Ложь;
		ПараметрыПроведения = Документы.РасчетУдержанийРаботниковОрганизаций.ПодготовитьПараметрыПроведения(Выборка.Ссылка, Отказ);

		//ВОСМС
		ВОСМСПодлежитПеречислениюВФонды = РасчетЗарплатыСервер.ПодготовитьТаблицуИсчисленныхНалоговВзносовОтчислений(ПараметрыПроведения.Реквизиты[0], 
																						ПараметрыПроведения.ВОСМСПодлежитПеречислениюВФонды,
																						НаборЗаписей.ВыгрузитьКолонки(),
																						Отказ);
																						
		Если ВОСМСПодлежитПеречислениюВФонды = Неопределено ИЛИ ВОСМСПодлежитПеречислениюВФонды.Количество() = 0 Тогда
			Возврат; 
		Иначе
			НаборЗаписей.Загрузить(ВОСМСПодлежитПеречислениюВФонды);
			
			Попытка
				НаборЗаписей.ОбменДанными.Загрузка = Истина;
				НаборЗаписей.Записать(Истина);
			Исключение
				ТекстСообщения = НСтр("ru='При записи движений документа %1  произошла ошибка: %2'", ОбщегоНазначения.КодОсновногоЯзыка());
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Выборка.Представление, ОписаниеОшибки());
				ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;	
		КонецЕсли;
	КонецЦикла;     
	
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеНа_3_0_35

Процедура ПерезаполнитьКонстантуВестиУчетПоОрганизациям() Экспорт
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УчетПоОрганизациям = (НЕ СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации()
		ИЛИ Справочники.Организации.КоличествоОрганизаций() > 1
		ИЛИ Константы.ПоддержкаРаботыСоСтруктурнымиПодразделениями.Получить());
	
	ВестиУчетПоОрганизациям = Константы.ВестиУчетПоОрганизациям.СоздатьМенеджерЗначения();
	ВестиУчетПоОрганизациям.Значение = УчетПоОрганизациям;
	ВестиУчетПоОрганизациям.ОбменДанными.Загрузка = Истина;
	ВестиУчетПоОрганизациям.Записать();
	
	НеВестиУчетПоОрганизациям = Константы.НеВестиУчетПоОрганизациям.СоздатьМенеджерЗначения();
	НеВестиУчетПоОрганизациям.Значение = НЕ УчетПоОрганизациям;
	НеВестиУчетПоОрганизациям.ОбменДанными.Загрузка = Истина;
	НеВестиУчетПоОрганизациям.Записать();
	
КонецПроцедуры

Процедура ПерезаполнитьКонстантуИспользоватьНесколькоОрганизаций() Экспорт
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НесколькоОрганизаций = (Справочники.Организации.КоличествоОрганизаций() > 1
		ИЛИ Константы.ПоддержкаРаботыСоСтруктурнымиПодразделениями.Получить());
	
	ИспользоватьНесколькоОрганизаций = Константы.ИспользоватьНесколькоОрганизаций.СоздатьМенеджерЗначения();
	ИспользоватьНесколькоОрганизаций.Значение = НесколькоОрганизаций;
	ИспользоватьНесколькоОрганизаций.ОбменДанными.Загрузка = Истина;
	ИспользоватьНесколькоОрганизаций.Записать();
	
	НеИспользоватьНесколькоОрганизаций = Константы.НеИспользоватьНесколькоОрганизаций.СоздатьМенеджерЗначения();
	НеИспользоватьНесколькоОрганизаций.Значение = НЕ НесколькоОрганизаций;
	НеИспользоватьНесколькоОрганизаций.ОбменДанными.Загрузка = Истина;
	НеИспользоватьНесколькоОрганизаций.Записать();
	
КонецПроцедуры

Процедура УстановитьКонстантуИспользоватьВалютныйУчетОтложенно(Параметры) Экспорт

	ВалютныйУчетИспользуетсяФактически = ОбщегоНазначенияБК.ИспользуетсяВалютныйУчет();
	Если ВалютныйУчетИспользуетсяФактически Тогда
	
		Константы.ИспользоватьВалютныйУчет.Установить(Истина);
		Параметры.ОбработкаЗавершена = Истина;
		
	КонецЕсли;
	
	// Очищаем ранее загруженные курсы для валют, помеченных на удаление.
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1000
	|	КурсыВалют.Период КАК Период,
	|	КурсыВалют.Валюта КАК Валюта
	|ИЗ
	|	РегистрСведений.КурсыВалют КАК КурсыВалют
	|ГДЕ
	|	КурсыВалют.Валюта <> &ВалютаРегламентированногоУчета
	|	И КурсыВалют.Валюта.ПометкаУдаления = ИСТИНА
	|	И КурсыВалют.Период >= &НачалоКорректногоПериода
	|
	|УПОРЯДОЧИТЬ ПО
	|	Валюта,
	|	Период");
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", ВалютаРегламентированногоУчета);
	Запрос.УстановитьПараметр("НачалоКорректногоПериода",	Дата(2000, 01, 01));
	
	ПроблемныхОбъектов = 0;
	ОбъектовОбработано = 0;
	
	НачатьТранзакцию();
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() = 0 Тогда
		ЗафиксироватьТранзакцию();
		Возврат;
	КонецЕсли;
	
	Параметры.ОбработкаЗавершена = Ложь;
	КурсыВалют = РегистрыСведений.КурсыВалют.СоздатьНаборЗаписей();
	ТекущаяВалюта = Неопределено;
	
	Пока Выборка.Следующий() Цикл
		
		Попытка
			КурсыВалют.Отбор.Период.Установить(Выборка.Период);
			КурсыВалют.Отбор.Валюта.Установить(Выборка.Валюта);
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(КурсыВалют);
			ОбъектовОбработано = ОбъектовОбработано + 1;
		Исключение
			// Если не удалось обработать какой-либо курс валюты, повторим попытку снова при следующем запуске обработчика.
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось очистить курс %1 по состоянию на %2 по причине:
			|%3'"),
			Выборка.Валюта,
			Формат(Выборка.Период, "ДЛФ=D"),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
			УровеньЖурналаРегистрации.Предупреждение,
			Метаданные.РегистрыСведений.КурсыВалют,
			Выборка.Валюта,
			ТекстСообщения);
		КонецПопытки;
		
	КонецЦикла;
	
	Если ПроблемныхОбъектов = 0 И ОбъектовОбработано < 1000
		И ТекущаяВалюта <> Неопределено Тогда
		// Фиксируем, что порция курсов по валюте удалена.
		ЗафиксироватьТранзакцию();
	Иначе
		Если ОбъектовОбработано = 0 Тогда 
			// Никаких изменений не вносилось.
			ОтменитьТранзакцию();
		Иначе
			// Фиксируем, что порция курсов по валюте удалена.
			ЗафиксироватьТранзакцию();
		КонецЕсли;
	КонецЕсли;
	
	Если ОбъектовОбработано = 0 Тогда
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Процедуре УстановитьКонстантуИспользоватьВалютныйУчетОтложенно
		|не удалось очистить некоторые курсы: %1'"),
		ПроблемныхОбъектов);
		ВызватьИсключение ТекстСообщения;
		
	Иначе
		
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
		УровеньЖурналаРегистрации.Информация,
		Метаданные.Справочники.Валюты,,
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Процедура УстановитьКонстантуИспользоватьВалютныйУчетОтложенно
		|очистила очередную порцию курсов валют: %1'"), ОбъектовОбработано));
		
	КонецЕсли;

КонецПроцедуры

// Анализирует использование валют и устанавливает использование валютного учета в базе.
//
Процедура СбросИспользованияРегламентногоЗаданияЗагрузкаВалют() Экспорт
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьВалютныйУчет") Тогда
		// Сбрасывает функциональную опцию "Использовать валютный учет", если реально он не используется.
		Если Не ОбщегоНазначенияБК.ИспользуетсяВалютныйУчет() Тогда
			ВалютныйУчет = Константы.ИспользоватьВалютныйУчет.СоздатьМенеджерЗначения();
			ВалютныйУчет.Значение = Ложь;
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ВалютныйУчет, Ложь, Истина);
		КонецЕсли;
		
	Иначе
		// Сбрасывает флаг "Использование" у регламентного задания "Загрузка курсов валют", если валютный учет не используется.
		ИспользоватьВалютныйУчет = Константы.ИспользоватьВалютныйУчет.СоздатьМенеджерЗначения();
		РегламентныеЗаданияСлужебный.ВключитьРегламентноеЗаданиеПриИзмененииФункциональнойОпции(ИспользоватьВалютныйУчет, Ложь);

	КонецЕсли;	
	
КонецПроцедуры

Процедура ДобавитьОбъектыРозничнойТорговли() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Контрагенты.Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.ЭтоГруппа = ЛОЖЬ
	|	И Контрагенты.ИдентификационныйКодЛичности = ""000000000000""
	|	И Контрагенты.РНН = ""000000000000""
	|";
	Результат = Запрос.Выполнить();
	КодЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	Если Результат.Пустой() Тогда
		НовыйКонтрагент = Справочники.Контрагенты.СоздатьЭлемент();
		НовыйКонтрагент.ИдентификационныйКодЛичности = "000000000000";
		НовыйКонтрагент.Наименование = НСтр("ru='Розничная выручка'", КодЯзыка);
		НовыйКонтрагент.НаименованиеПолное = НСтр("ru='Розничная выручка'", КодЯзыка);
		НовыйКонтрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо;
		НовыйКонтрагент.РНН = "000000000000";
		НовыйКонтрагент.Записать();
	КонецЕсли;
	
КонецПроцедуры

//Включает настройку "Показывать счета учета" для всех пользователей
Процедура УстановитьНастройкиПоказыватьСчетаУчета() Экспорт
	
	Запрос = новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	НастройкиПользователей.Ссылка КАК Настройка
	               |ПОМЕСТИТЬ ВТ_Настройки
	               |ИЗ
	               |	ПланВидовХарактеристик.НастройкиПользователей КАК НастройкиПользователей
	               |ГДЕ
	               |	НастройкиПользователей.Идентификатор = ""ПоказыватьВДокументахСчетаУчета""
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	НастройкиПользователей.Пользователь КАК Пользователь,
	               |	НастройкиПользователей.Настройка КАК Настройка,
	               |	НастройкиПользователей.Значение КАК Значение
	               |ИЗ
	               |	РегистрСведений.НастройкиПользователей КАК НастройкиПользователей
	               |ГДЕ
	               |	НастройкиПользователей.Настройка В
	               |			(ВЫБРАТЬ
	               |				ВТ_Настройки.Настройка
	               |			ИЗ
	               |				ВТ_Настройки КАК ВТ_Настройки)";
	Выборка =  Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НаборНастроек = РегистрыСведений.НастройкиПользователей.СоздатьМенеджерЗаписи();
		НаборНастроек.Пользователь = Выборка.Пользователь;
		НаборНастроек.Настройка = Выборка.Настройка;
		НаборНастроек.Прочитать();
		НаборНастроек.Значение = ИСТИНА;
		НаборНастроек.Записать(Истина);
	КонецЦикла;
	
КонецПроцедуры

//Заполняет реквизит ТипШаблона справочника ШаблоныШтрихкодов
Процедура ЗаполнитьТипШаблонаШтрихкода() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ШаблоныШтрихкодов.Ссылка КАК Ссылка,
		|	ШаблоныШтрихкодов.ТипШаблона КАК ТипШаблона
		|ИЗ
		|	Справочник.ШаблоныШтрихкодов КАК ШаблоныШтрихкодов
		|ГДЕ
		|	ШаблоныШтрихкодов.Ссылка <> &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Справочники.ШаблоныШтрихкодов.ШаблонЭтикетки_43х25_Номенклатура);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ТипШаблона) Тогда
			Продолжить;
		КонецЕсли;
		
		СправочникОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		СправочникОбъект.ТипШаблона = Перечисления.ТипыШаблоновШтрихкодов.ОсновныеСредства;
		СправочникОбъект.ОбменДанными.Загрузка = Истина;
		СправочникОбъект.Записать();
		Попытка
			СправочникОбъект.Записать();
		Исключение
			ТекстСообщения = НСтр("ru='При записи шаблона штрих кода  %1  произошла ошибка: %2'", ОбщегоНазначения.КодОсновногоЯзыка());
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, СправочникОбъект, ОписаниеОшибки());
			ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

//Заполняет предопределенный элемент справочника ШаблоныШтрихкодов
Процедура ЗаполнитьПредопределенныйШаблонШтрихкодовНоменклатуры() Экспорт
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураМакетаШаблона = Справочники.ШаблоныШтрихкодов.ПодготовитьСтруктуруМакетаШаблона(Справочники.ШаблоныШтрихкодов.ПолучитьМакет("ШаблонЭтикетки_43х25_Номенклатура"));
	
	СтруктураМакетаШаблона.ТипКода          = 1;
	СтруктураМакетаШаблона.РазмерШрифта     = 12;
	СтруктураМакетаШаблона.ОтображатьТекст  = Истина;
	
	ШаблонОбъект 				= Справочники.ШаблоныШтрихкодов.ШаблонЭтикетки_43х25_Номенклатура.ПолучитьОбъект();
	ШаблонОбъект.Ширина			= 43;
	ШаблонОбъект.Высота			= 25;
	ШаблонОбъект.РазмерЯчейки	= 5;
	ШаблонОбъект.Шаблон			= Новый ХранилищеЗначения(СтруктураМакетаШаблона);
	ШаблонОбъект.ТипШаблона		= Перечисления.ТипыШаблоновШтрихкодов.Номенклатура;
	
	ШаблонОбъект.ОбменДанными.Загрузка = Истина;
	
	Попытка
		ШаблонОбъект.Записать();
	Исключение
		ТекстСообщения = НСтр("ru='При записи шаблона штрих кода  %1  произошла ошибка: %2'", ОбщегоНазначения.КодОсновногоЯзыка());
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ШаблонОбъект, ОписаниеОшибки());
		ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	
КонецПроцедуры

//Заполняет ресурс РежимНалогообложения в регистре сведенийУчетнаяПолитикаНалоговыйУчет
Процедура ЗаполнитьРежимНалогообложенияВРегистреУчетнаяПолитикаНалоговыйУчет() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	УчетнаяПолитикаНалоговыйУчет.ОрганизацияЯвляетсяПлательщикомСН КАК ОрганизацияЯвляетсяПлательщикомСН,
	|	УчетнаяПолитикаНалоговыйУчет.Период КАК Период,
	|	УчетнаяПолитикаНалоговыйУчет.Организация КАК Организация
	|ИЗ
	|	РегистрСведений.УчетнаяПолитикаНалоговыйУчет КАК УчетнаяПолитикаНалоговыйУчет";
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			НаборЗаписей = РегистрыСведений.УчетнаяПолитикаНалоговыйУчет.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Организация.Установить(Выборка.Организация);
			НаборЗаписей.Отбор.Период.Установить(Выборка.Период);
			НаборЗаписей.Прочитать();
			
			Для Каждого СтрокаЗаписи Из НаборЗаписей Цикл
				
				Если Не ЗначениеЗаполнено(СтрокаЗаписи.РежимНалогообложения) Тогда
					СтрокаЗаписи.РежимНалогообложения = 
						?(Выборка.ОрганизацияЯвляетсяПлательщикомСН,
							Перечисления.РежимНалогообложения.Общеустановленный,
							Перечисления.РежимНалогообложения.УпрощеннаяДекларация);
				КонецЕсли;
				
			КонецЦикла;
			
			Попытка
				
				НаборЗаписей.ОбменДанными.Загрузка = Истина;
				НаборЗаписей.Записать();
				
			Исключение
				
				ТекстСообщения = НСтр(
				"ru = 'При записи набора данных по организации ""%1"" для периода %2 произошла ошибка:
				|%3");
				
				ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ТекстСообщения, Выборка.Организация, Выборка.Период, ПодробноеПредставлениеОшибки);
				
				ЗаписьЖурналаРегистрации(
				СтрШаблон(НСтр("ru = 'Не удалось обновить ""Регистр сведений  ""%1"""".'", ОбщегоНазначения.КодОсновногоЯзыка()), Метаданные.РегистрыСведений.УчетнаяПолитикаНалоговыйУчет.Представление()),
				УровеньЖурналаРегистрации.Ошибка, , , Комментарий);
				
			КонецПопытки;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьВидОперацииВозвратТоваровОтПокупателя() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ВозвратТоваровОтПокупателя.Ссылка КАК ДокументВозврат
	|ИЗ
	|	Документ.ВозвратТоваровОтПокупателя КАК ВозвратТоваровОтПокупателя
	|ГДЕ
	|	ВозвратТоваровОтПокупателя.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВозвратТоваровОтПокупателя.ПустаяСсылка)";
	ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
	Пока ВыборкаЗапроса.Следующий() Цикл
		ДокументВозврат = ВыборкаЗапроса.ДокументВозврат.ПолучитьОбъект();
		ДокументВозврат.ВидОперации = Перечисления.ВидыОперацийВозвратТоваровОтПокупателя.ВозвратТоваров;
		Попытка
			ДокументВозврат.ОбменДанными.Загрузка = Истина;
			ДокументВозврат.Записать(РежимЗаписиДокумента.Запись);
		Исключение
			ТекстСообщения = НСтр("ru='при записи документа %1  произошла ошибка: %2'", ОбщегоНазначения.КодОсновногоЯзыка());
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ДокументВозврат, ОписаниеОшибки());
			ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	КонецЦикла;
КонецПроцедуры

Процедура УстановитьКонстантуНастройкаЗаполненияЦеныПродажи() Экспорт
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НастройкаЗаполненияЦеныПродажи = Константы.НастройкаЗаполненияЦеныПродажи.СоздатьМенеджерЗначения();
	НастройкаЗаполненияЦеныПродажи.Значение = Перечисления.НастройкаЗаполненияЦеныПродажи.Номенклатура;
	НастройкаЗаполненияЦеныПродажи.ОбменДанными.Загрузка = Истина;
	НастройкаЗаполненияЦеныПродажи.Записать();
	
КонецПроцедуры

Процедура ЗаполнитьПредопределенныеЭлементыСправочников3032() Экспорт
	
	СтатьяЗатрат = Справочники.СтатьиЗатрат.ПрочиеРасходы.ПолучитьОбъект();
	СтатьяЗатрат.КатегорияЗатрат   		  =	Перечисления.КатегорииЗатрат.ПрочиеРасходы;
	СтатьяЗатрат.ПринятиеКНалоговомуУчету =	Истина;
	СтатьяЗатрат.ВидРасходовНУ			  =	Справочники.ВидыРасходовНУ.ПрочиеРасходыНаВычет;
	СтатьяЗатрат.Записать();
	
	УстановитьНовыеКодыНеПредопределеннымЭлементамСправочника("Доходы");	
	УстановитьНовыеКодыНеПредопределеннымЭлементамСправочника("СтатьиЗатрат");	
	
КонецПроцедуры

Процедура УстановитьКонстантуИспользоватьОбъектыПростойБухгалтерии() Экспорт
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначенияБК.ЭтоПростаяВерсияКонфигурации() Тогда
		Константы.ИспользоватьОбъектыПростойБухгалтерии.Установить(Истина);
	КонецЕсли;

КонецПроцедуры

Процедура УстановитьКонстантуОсновнойЯзык() Экспорт
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Константы.ОсновнойЯзык.Получить()) Тогда
		Константы.ОсновнойЯзык.Установить(Метаданные.ОсновнойЯзык.КодЯзыка);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПереименоватьРольДобавлениеИзменениеШаблоновШтрихкодов() Экспорт
    
    Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
        Возврат;
    КонецЕсли;
    
    МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
    
    НовыеРоли = Новый Массив;
	НовыеРоли.Добавить("ДобавлениеИзменениеШаблоновШтрихкодов");
    ЗаменяемыеРоли = Новый Соответствие;
    ЗаменяемыеРоли.Вставить("? ДобавлениеИзменениеШаблоновШтрихкодовОС", НовыеРоли);
    
    МодульУправлениеДоступом.ЗаменитьРолиВПрофилях(ЗаменяемыеРоли);
    
КонецПроцедуры

Процедура УдалитьРольЧтениеЭД() Экспорт
    
  	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
        Возврат;
    КонецЕсли;
    
    МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
    
    НовыеРоли = Новый Массив;
    ЗаменяемыеРоли = Новый Соответствие;
    ЗаменяемыеРоли.Вставить("? ЧтениеЭД", НовыеРоли);
    
    МодульУправлениеДоступом.ЗаменитьРолиВПрофилях(ЗаменяемыеРоли);
   
КонецПроцедуры

Процедура УдалитьРольПравоИнтерактивногоУдаленияПомеченныхОбъектов() Экспорт
    
  	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
        Возврат;
    КонецЕсли;
    
    МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
    
    НовыеРоли = Новый Массив;
    ЗаменяемыеРоли = Новый Соответствие;
    ЗаменяемыеРоли.Вставить("? ПравоИнтерактивногоУдаленияПомеченныхОбъектов", НовыеРоли);
    
    МодульУправлениеДоступом.ЗаменитьРолиВПрофилях(ЗаменяемыеРоли);
   
КонецПроцедуры

Процедура УдалитьРольНастройкаПараметровЭД() Экспорт
    
  	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
        Возврат;
    КонецЕсли;
    
    МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
    
    НовыеРоли = Новый Массив;
    ЗаменяемыеРоли = Новый Соответствие;
    ЗаменяемыеРоли.Вставить("? НастройкаПараметровЭД", НовыеРоли);
    
    МодульУправлениеДоступом.ЗаменитьРолиВПрофилях(ЗаменяемыеРоли);
   
КонецПроцедуры

Процедура УдалитьРольВыполнениеОбменаЭД() Экспорт
    
  	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
        Возврат;
    КонецЕсли;
    
    МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
    
    НовыеРоли = Новый Массив;
    ЗаменяемыеРоли = Новый Соответствие;
    ЗаменяемыеРоли.Вставить("? ВыполнениеОбменаЭД", НовыеРоли);
    
    МодульУправлениеДоступом.ЗаменитьРолиВПрофилях(ЗаменяемыеРоли);
   
КонецПроцедуры

Процедура ПерезаполнитьНастройкиПользователейУчетПоВсемОрганизациям() Экспорт
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИспользоватьНесколькоОрганизаций = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций");

	Если НЕ ИспользоватьНесколькоОрганизаций Тогда 
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НастройкиПользователей.Пользователь КАК Пользователь
		|ИЗ
		|	РегистрСведений.НастройкиПользователей КАК НастройкиПользователей
		|ГДЕ
		|	НастройкиПользователей.Настройка = ЗНАЧЕНИЕ(ПланВидовХарактеристик.НастройкиПользователей.УчетПоВсемОрганизациям)
		|	И НастройкиПользователей.Значение = ИСТИНА";
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			НаборЗаписей = РегистрыСведений.НастройкиПользователей.СоздатьНаборЗаписей();
			
			НаборЗаписей.Отбор.Пользователь.Установить(ВыборкаДетальныеЗаписи.Пользователь);
			НаборЗаписей.Отбор.Настройка.Установить(ПланыВидовХарактеристик.НастройкиПользователей.УчетПоВсемОрганизациям);
			НаборЗаписей.Записать();
			
			Запись = НаборЗаписей.Добавить();
			
			Запись.Пользователь = ВыборкаДетальныеЗаписи.Пользователь;
			Запись.Настройка    = ПланыВидовХарактеристик.НастройкиПользователей.УчетПоВсемОрганизациям;
			Запись.Значение     = Ложь;
			
			Попытка
				НаборЗаписей.Записать();
			Исключение
				ТекстСообщения = НСтр("ru='При установке в настройках пользователя %1 значения учета по всем организациям произошла ошибка: %2'", ОбщегоНазначения.КодОсновногоЯзыка());
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ВыборкаДетальныеЗаписи.Пользователь, ОписаниеОшибки());
				ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьКонстантуАвтозаполнятьСчетаВзаиморасчетов() Экспорт
	
	АвтозаполнятьСчетаВзаиморасчетов = Константы.АвтозаполнятьСчетаВзаиморасчетов.СоздатьМенеджерЗначения();
	АвтозаполнятьСчетаВзаиморасчетов.Значение = Истина;
	АвтозаполнятьСчетаВзаиморасчетов.ОбменДанными.Загрузка = Истина;
	АвтозаполнятьСчетаВзаиморасчетов.Записать();
	
КонецПроцедуры

Процедура ЗаполнитьКонстантуНачалоРаботы() Экспорт
	
	ОрганизацияСуществует = 
		Справочники.Организации.КоличествоОрганизаций() <> 0
		И Справочники.Организации.ОрганизацияПоУмолчанию().Наименование <> Справочники.Организации.НаименованиеПоУмолчанию();
	
	Константы.НачалоРаботы.Установить(НЕ ОрганизацияСуществует);
	
КонецПроцедуры

Процедура ЗаменитьНаименованиеДокументовУдостоверяющихЛичность() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДокументыУдостоверяющиеЛичность.Код КАК Код,
	|	ДокументыУдостоверяющиеЛичность.Наименование КАК Наименование,
	|	ДокументыУдостоверяющиеЛичность.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ДокументыУдостоверяющиеЛичность КАК ДокументыУдостоверяющиеЛичность
	|ГДЕ
	|	ДокументыУдостоверяющиеЛичность.Наименование В (""Паспорт гражданина Республики Казахстан"", ""Удостоверение личности"", 
	|													""Вид на жительство"", ""Дипломатический паспорт"", ""Паспорт моряка"", ""Иностранный паспорт"")" ;
	
	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл
					
		СправочникОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Если Выборка.Наименование = "Паспорт гражданина Республики Казахстан" Тогда
			СправочникОбъект.Наименование = "Паспорт гражданина РК";
		ИначеЕсли Выборка.Наименование = "Удостоверение личности" Тогда
			СправочникОбъект.Наименование = "Удостоверение личности гражданина РК";
		ИначеЕсли Выборка.Наименование = "Вид на жительство" Тогда
			СправочникОбъект.Наименование = "Вид на жительство иностранца в РК";
		ИначеЕсли Выборка.Наименование = "Дипломатический паспорт" Тогда
			СправочникОбъект.Наименование = "Дипломатический паспорт РК";
		ИначеЕсли Выборка.Наименование = "Паспорт моряка" Тогда
			СправочникОбъект.Наименование = "Удостоверение личности моряка РК";
		ИначеЕсли Выборка.Наименование = "Иностранный паспорт" Тогда
			СправочникОбъект.Наименование = "Заграничный паспорт";
		КонецЕсли;
		
		Попытка
			СправочникОбъект.Записать();
		Исключение
			ТекстСообщения = НСтр("ru = 'при записи документа удостоверяющего личность %1  произошла ошибка: %2'", ОбщегоНазначения.КодОсновногоЯзыка());
			ЗаписьЖурналаРегистрации(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстСообщения, Выборка.Ссылка, ОписаниеОшибки()),
			УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));			
		КонецПопытки;

	КонецЦикла; 

КонецПроцедуры

Процедура УдалитьРасширениеДиректБанкКорректировка() Экспорт
	
	Если Не ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
		Возврат;
	КонецЕсли;
	 
	УдаленныеРасширения = Новый Массив;
	
	НачатьТранзакцию();
	Попытка
		ОтборРасширения = Новый Структура("Имя", "ДиректБанкКорректировка");
		РасширениеДиректБанкКорректировка = РасширенияКонфигурации.Получить(ОтборРасширения);
		Если РасширениеДиректБанкКорректировка.Количество() = 1 Тогда
			РасширениеКУдалению = РасширениеДиректБанкКорректировка[0];
		Иначе 
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;   
		  		
		Если РасширениеКУдалению <> Неопределено Тогда
			ОписаниеРасширения = Новый Структура;
			ОписаниеРасширения.Вставить("Расширение", РасширениеКУдалению);
			ОписаниеРасширения.Вставить("ДанныеРасширения", РасширениеКУдалению.ПолучитьДанные());
			УдаленныеРасширения.Добавить(ОписаниеРасширения);
		КонецЕсли;
		Для Каждого ОписаниеРасширения Из УдаленныеРасширения Цикл
			Если ОбщегоНазначения.ЕстьЗащитаОтОпасныхДействий() Тогда
				ОписаниеРасширения.Расширение.ЗащитаОтОпасныхДействий = ОбщегоНазначения.ОписаниеЗащитыБезПредупреждений();
			КонецЕсли;
			ОписаниеРасширения.Расширение.Удалить();
		КонецЦикла;
		//Если РасширенияКонфигурации.Получить().Количество() = 0 Тогда
		//	Справочники.ВерсииРасширений.ПриУдаленииВсехРасширений();
		//КонецЕсли;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Не удалось удалить по причине:
		|
		|%1'"), КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
		ВызватьИсключение ТекстОшибки;
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеНа_3_0_37

Процедура УстановитьКонстантуИспользоватьЭлектронныеСНТ() Экспорт
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации() Тогда
		ИспользоватьЭСНТ = Константы.ИспользоватьЭлектронныеСНТ.СоздатьМенеджерЗначения();
		ИспользоватьЭСНТ.Значение = Ложь;
		ИспользоватьЭСНТ.ОбменДанными.Загрузка = Истина;
		ИспользоватьЭСНТ.Записать();
	КонецЕсли;
	
КонецПроцедуры
 
Процедура ОбновитьСведенияОСтавкахОСМС2021() Экспорт
	
	НаборЗаписей = РегистрыСведений.СведенияОСтавкахОСМС.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Период.Установить('20210101');
	
	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидДохода        = Перечисления.ЮрФизЛицо.ФизЛицо;
	НоваяЗапись.Период           = '20210101';
	НоваяЗапись.СтавкаВзносы     = 2;
	НоваяЗапись.СтавкаОтчисления = 2;
	
	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидДохода        = Перечисления.ЮрФизЛицо.ЮрЛицо;
	НоваяЗапись.Период           = '20210101';
	НоваяЗапись.СтавкаВзносы     = 2;
	НоваяЗапись.СтавкаОтчисления = 0;
	
	Попытка
		НаборЗаписей.Записать(Истина);
	Исключение
		ТекстСообщения = НСтр("ru='Операция не выполнена'", ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
КонецПроцедуры

Процедура ОбновитьСведенияОСтавкахОПВ2021() Экспорт
	
	НаборЗаписей = РегистрыСведений.СведенияОСтавкахНалоговСборовОтчислений.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Период.Установить('20210101');
	НаборЗаписей.Отбор.ВидНалога.Установить(Справочники.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносы);
	
	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.Период     = '20210101';
	НоваяЗапись.ВидНалога  = Справочники.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносы;
	НоваяЗапись.Ставка     = 10;
	
	Попытка
		НаборЗаписей.Записать(Истина);
	Исключение
		ТекстСообщения = НСтр("ru='Операция не выполнена'", ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
КонецПроцедуры

Процедура ОбновитьКалендарныеГрафики2021() Экспорт
	
	Если ОбщегоНазначенияПовтИсп.ЭтоАвтономноеРабочееМесто() Тогда
		Возврат;
	КонецЕсли;

	ПроизводственныйКалендарьРК = Справочники.ПроизводственныеКалендари.НайтиПоКоду("РК");
	Если ПроизводственныйКалендарьРК <> Неопределено Тогда
		
		ДанныеПроизводственногоКалендаря          = Справочники.ПроизводственныеКалендари.ДанныеПроизводственногоКалендаря(ПроизводственныйКалендарьРК, 2021);
		ДанныеПроизводственногоКалендаряУмолчанию = Справочники.ПроизводственныеКалендари.РезультатЗаполненияПроизводственногоКалендаряПоУмолчанию("РК", 2021);
		
		Если ДанныеПроизводственногоКалендаря.Количество() = 0 Тогда
			//календарь не был ранее заполнен 			
			Справочники.ПроизводственныеКалендари.ЗаписатьДанныеПроизводственногоКалендаря(ПроизводственныйКалендарьРК, 2021, ДанныеПроизводственногоКалендаряУмолчанию);
			Возврат;
		КонецЕсли;
				
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	КлассификаторТаблица.Дата,
			|	КлассификаторТаблица.ВидДня,
			|	КлассификаторТаблица.ДатаПереноса
			|ПОМЕСТИТЬ КлассификаторТаблица
			|ИЗ
			|	&КлассификаторТаблица КАК КлассификаторТаблица
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ДанныеПроизводственногоКалендаря.Дата,
			|	ДанныеПроизводственногоКалендаря.ВидДня,
			|	ДанныеПроизводственногоКалендаря.ДатаПереноса
			|ПОМЕСТИТЬ ДанныеПроизводственногоКалендаря
			|ИЗ
			|	&ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	КлассификаторТаблица.Дата,
			|	КлассификаторТаблица.ВидДня,
			|	КлассификаторТаблица.ДатаПереноса
			|ИЗ
			|	КлассификаторТаблица КАК КлассификаторТаблица
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
			|		ПО КлассификаторТаблица.Дата = ДанныеПроизводственногоКалендаря.Дата";
		
		Запрос.УстановитьПараметр("КлассификаторТаблица", ДанныеПроизводственногоКалендаряУмолчанию);
		Запрос.УстановитьПараметр("ДанныеПроизводственногоКалендаря", ДанныеПроизводственногоКалендаря);
		
		ДанныеПроизводственногоКалендаряДляЗаписи = Запрос.Выполнить().Выгрузить();
		
		Если ДанныеПроизводственногоКалендаряДляЗаписи.Количество() > 0 Тогда
			Справочники.ПроизводственныеКалендари.ЗаписатьДанныеПроизводственногоКалендаря(ПроизводственныйКалендарьРК, 2021, ДанныеПроизводственногоКалендаряДляЗаписи);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеНа_3_0_39

Процедура ЗаполнитьРесурсыУчетнаяПолитикаНалоговыйУчет2020() Экспорт
    
   	НаборЗаписей = РегистрыСведений.УчетнаяПолитикаНалоговыйУчет.СоздатьНаборЗаписей();
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
    |   УчетнаяПолитикаНалоговыйУчет.Период КАК Период,
    |   УчетнаяПолитикаНалоговыйУчет.Организация КАК Организация
    |ИЗ
    |   РегистрСведений.УчетнаяПолитикаНалоговыйУчет КАК УчетнаяПолитикаНалоговыйУчет
    |ГДЕ
    |   УчетнаяПолитикаНалоговыйУчет.Период МЕЖДУ ДАТАВРЕМЯ(2020, 1, 1) И ДАТАВРЕМЯ(2020, 12, 31)
    |   И УчетнаяПолитикаНалоговыйУчет.ПрименятьВычетВОСМСДляФизическихЛицИГПХ = ИСТИНА
    |   И УчетнаяПолитикаНалоговыйУчет.ПрименятьВычетОПВиВОСМСДляГПХ = ЛОЖЬ";
	
	РезультатЗапроса = Запрос.Выполнить();
	
    ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
    
    Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
        
        НаборЗаписей.Отбор.Организация.Установить(ВыборкаДетальныеЗаписи.Организация);
        НаборЗаписей.Отбор.Период.Установить(ВыборкаДетальныеЗаписи.Период);
        
        НаборЗаписей.Прочитать();
        
        Если НЕ НаборЗаписей.Количество() = 0 Тогда
            
            Для Каждого ЗаписьНабора Из НаборЗаписей Цикл
                ЗаписьНабора.ПрименятьВычетОПВиВОСМСДляГПХ = Истина;
            КонецЦикла;
            
        КонецЕсли;
        
        Если НЕ НаборЗаписей.Количество() = 0 Тогда
            
            Попытка
                НаборЗаписей.Записать();
            Исключение
                ТекстСообщения = НСтр("ru='Операция не выполнена'",  ОбщегоНазначения.КодОсновногоЯзыка());
                ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
            КонецПопытки;
            
        КонецЕсли;
        
    КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеНа_3_0_40

Процедура ЗаполнитьПредопределенныеЭлементыСправочников3040() Экспорт
	
	УстановитьНовыеКодыНеПредопределеннымЭлементамСправочника("ВидыПоступления");	
		
КонецПроцедуры

#КонецОбласти

Процедура УстановитьМЗПМРП2022Год() Экспорт
	
	НаборЗаписей = РегистрыСведений.РегламентированныеРасчетныеПоказатели.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Период.Установить('20220101', Истина);		
	ДобавитьЗначенияРасчетныхПоказателей(НаборЗаписей, Дата("20220101"), 60000, 3063, 882*3063, 882*3063, 60000, 3063);
	
	Попытка
		НаборЗаписей.Записать();
	Исключение
	КонецПопытки;
	
КонецПроцедуры

#Область ОбновлениеНа_3_0_41

Процедура ОбновитьСведенияОСтавкахОСМС2022() Экспорт
	
	НаборЗаписей = РегистрыСведений.СведенияОСтавкахОСМС.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Период.Установить('20220101');
	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидДохода        = Перечисления.ЮрФизЛицо.ФизЛицо;
	НоваяЗапись.Период           = '20220101';
	НоваяЗапись.СтавкаВзносы     = 2;
	НоваяЗапись.СтавкаОтчисления = 3;
	
	Попытка
		НаборЗаписей.Записать(Истина);
	Исключение
		ТекстСообщения = НСтр("ru='Операция не выполнена'", ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
КонецПроцедуры

Процедура ОбновитьКалендарныеГрафики2022() Экспорт
	
	Если ОбщегоНазначенияПовтИсп.ЭтоАвтономноеРабочееМесто() Тогда
		Возврат;
	КонецЕсли;

	ПроизводственныйКалендарьРК = Справочники.ПроизводственныеКалендари.НайтиПоКоду("РК");
	Если ЗначениеЗаполнено(ПроизводственныйКалендарьРК) Тогда
		
		ДанныеПроизводственногоКалендаря          = Справочники.ПроизводственныеКалендари.ДанныеПроизводственногоКалендаря(ПроизводственныйКалендарьРК, 2022);
		ДанныеПроизводственногоКалендаряУмолчанию = Справочники.ПроизводственныеКалендари.РезультатЗаполненияПроизводственногоКалендаряПоУмолчанию("РК", 2022);
		
		Если ДанныеПроизводственногоКалендаря.Количество() = 0 Тогда
			//календарь не был ранее заполнен 			
			Справочники.ПроизводственныеКалендари.ЗаписатьДанныеПроизводственногоКалендаря(ПроизводственныйКалендарьРК, 2022, ДанныеПроизводственногоКалендаряУмолчанию);
			Возврат;
		КонецЕсли;
				
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	КлассификаторТаблица.Дата,
			|	КлассификаторТаблица.ВидДня,
			|	КлассификаторТаблица.ДатаПереноса
			|ПОМЕСТИТЬ КлассификаторТаблица
			|ИЗ
			|	&КлассификаторТаблица КАК КлассификаторТаблица
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ДанныеПроизводственногоКалендаря.Дата,
			|	ДанныеПроизводственногоКалендаря.ВидДня,
			|	ДанныеПроизводственногоКалендаря.ДатаПереноса
			|ПОМЕСТИТЬ ДанныеПроизводственногоКалендаря
			|ИЗ
			|	&ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	КлассификаторТаблица.Дата,
			|	КлассификаторТаблица.ВидДня,
			|	КлассификаторТаблица.ДатаПереноса
			|ИЗ
			|	КлассификаторТаблица КАК КлассификаторТаблица
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
			|		ПО КлассификаторТаблица.Дата = ДанныеПроизводственногоКалендаря.Дата";
		
		Запрос.УстановитьПараметр("КлассификаторТаблица", ДанныеПроизводственногоКалендаряУмолчанию);
		Запрос.УстановитьПараметр("ДанныеПроизводственногоКалендаря", ДанныеПроизводственногоКалендаря);
		
		ДанныеПроизводственногоКалендаряДляЗаписи = Запрос.Выполнить().Выгрузить();
		
		Если ДанныеПроизводственногоКалендаряДляЗаписи.Количество() > 0 Тогда
			Справочники.ПроизводственныеКалендари.ЗаписатьДанныеПроизводственногоКалендаря(ПроизводственныйКалендарьРК, 2022, ДанныеПроизводственногоКалендаряДляЗаписи);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьРегистрСведенияОФизическихЛицахУчастникахВОВ() Экспорт
	
	НаборЗаписей = РегистрыСведений.СведенияОФизлицахУчастникахВОВ.СоздатьНаборЗаписей();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
        |   ДАТАВРЕМЯ(2022, 1, 1) КАК Период,
        |   ДАТАВРЕМЯ(2022, 1, 1) КАК ДатаРегистрацииИзменений,
        |   СведенияОФизлицахУчастникахВОВ.Физлицо КАК Физлицо,
        |   ЗНАЧЕНИЕ(Перечисление.КатегорииФизлицУчастниковВОВ.УчастникВОВ) КАК Статус,
        |   СведенияОФизлицахУчастникахВОВ.СерияУдостоверения КАК СерияУдостоверения,
        |   СведенияОФизлицахУчастникахВОВ.НомерУдостоверения КАК НомерУдостоверения,
        |   СведенияОФизлицахУчастникахВОВ.ДатаВыдачи КАК ДатаВыдачи
        |ИЗ
        |   РегистрСведений.СведенияОФизлицахУчастникахВОВ.СрезПоследних(ДАТАВРЕМЯ(2022, 1, 1), ) КАК СведенияОФизлицахУчастникахВОВ
        |ГДЕ
        |   СведенияОФизлицахУчастникахВОВ.Статус = ЗНАЧЕНИЕ(Перечисление.КатегорииФизлицУчастниковВОВ.ИнвалидВОВ)
        |   И НЕ СведенияОФизлицахУчастникахВОВ.Период = ДАТАВРЕМЯ(2022, 1, 1)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		НаборЗаписей.Отбор.Период.Установить(ВыборкаДетальныеЗаписи.Период);
		НаборЗаписей.Отбор.Физлицо.Установить(ВыборкаДетальныеЗаписи.Физлицо);
		
		СтрокаНабора = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаНабора, ВыборкаДетальныеЗаписи);
		
		Попытка
			
			НаборЗаписей.Записать();

		Исключение
			
			ТекстСообщения = НСтр(
			"ru = 'при записи набора данных ""%1"" произошла ошибка: 
			|%2");
			
			ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, НаборЗаписей.Метаданные().Представление(), ПодробноеПредставлениеОшибки);
			
			ЗаписьЖурналаРегистрации(
			СтрШаблон(НСтр("ru = 'Не удалось обновить ""Регистр сведений  ""%1"""".'", ОбщегоНазначения.КодОсновногоЯзыка()), НаборЗаписей.Метаданные().Представление()), 
			УровеньЖурналаРегистрации.Ошибка, , , Комментарий);					
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнениеДокументаПартииВИсточникахПроисхожденияФОтложенно(Параметры) Экспорт
	                  	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
		|	ИсточникиПроисхождения.Ссылка КАК Ссылка,
		|	ИсточникиПроисхождения.ДокументПартии КАК ДокументПартии
		|ПОМЕСТИТЬ ВТ_ИП
		|ИЗ
		|	Справочник.ИсточникиПроисхождения КАК ИсточникиПроисхождения
		|ГДЕ
		|	НЕ ИсточникиПроисхождения.ДокументПартии ЕСТЬ NULL
		|	И ИсточникиПроисхождения.ДокументПартии.Ссылка ЕСТЬ NULL
		|	И НЕ ИсточникиПроисхождения.ДокументПартии = НЕОПРЕДЕЛЕНО
		|	И НЕ ИсточникиПроисхождения.ДокументПартии В (ЗНАЧЕНИЕ(Документ.ЭлектронныйДокументВС.ПустаяСсылка), ЗНАЧЕНИЕ(Документ.СНТ.ПустаяСсылка), ЗНАЧЕНИЕ(Документ.СопоставлениеСНТИФНО.ПустаяСсылка), ЗНАЧЕНИЕ(Документ.ЭСФ.ПустаяСсылка))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТоварыНаВиртуальныхСкладахОбороты.ДокументПартии КАК ДокументПартии,
		|	ТоварыНаВиртуальныхСкладахОбороты.ИсточникПроисхождения КАК ИсточникПроисхождения,
		|	ТоварыНаВиртуальныхСкладахОбороты.Регистратор КАК Регистратор,
		|	ТоварыНаВиртуальныхСкладахОбороты.Период КАК Период,
		|	ТоварыНаВиртуальныхСкладахОбороты.КоличествоПриход КАК КоличествоПриход,
		|	ТоварыНаВиртуальныхСкладахОбороты.КоличествоРасход КАК КоличествоРасход
		|ПОМЕСТИТЬ ВТ_ТоварыНаВиртуальныхСкладахОбороты
		|ИЗ
		|	РегистрНакопления.ТоварыНаВиртуальныхСкладах.Обороты(
		|			,
		|			,
		|			Регистратор,
		|			ИсточникПроисхождения В
		|				(ВЫБРАТЬ
		|					ВТ_ИП.Ссылка
		|				ИЗ
		|					ВТ_ИП КАК ВТ_ИП)) КАК ТоварыНаВиртуальныхСкладахОбороты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТоварыНаВиртуальныхСкладахОбороты.ДокументПартии КАК ДокументПартии,
		|	ТоварыНаВиртуальныхСкладахОбороты.ИсточникПроисхождения КАК Ссылка,
		|	ТоварыНаВиртуальныхСкладахОбороты.Регистратор КАК Регистратор
		|ИЗ
		|	ВТ_ТоварыНаВиртуальныхСкладахОбороты КАК ТоварыНаВиртуальныхСкладахОбороты
		|ГДЕ
		|	ТоварыНаВиртуальныхСкладахОбороты.КоличествоПриход > 0
		|	И ТоварыНаВиртуальныхСкладахОбороты.Регистратор.ТипФормы <> ЗНАЧЕНИЕ(Перечисление.ТипыФормВС.ВнутреннееПеремещение)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТоварыНаВиртуальныхСкладахОбороты.Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТоварыНаВиртуальныхСкладахОбороты.Регистратор КАК Регистратор,
		|	ВТ_ТоварыНаВиртуальныхСкладахОбороты.Регистратор КАК Регистратор1,
		|	ВЫБОР
		|		КОГДА ВТ_ТоварыНаВиртуальныхСкладахОбороты.Регистратор ЕСТЬ NULL
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК НетПрихода
		|ИЗ
		|	ВТ_ТоварыНаВиртуальныхСкладахОбороты КАК ТоварыНаВиртуальныхСкладахОбороты
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ТоварыНаВиртуальныхСкладахОбороты КАК ВТ_ТоварыНаВиртуальныхСкладахОбороты
		|		ПО (ВТ_ТоварыНаВиртуальныхСкладахОбороты.ИсточникПроисхождения = ТоварыНаВиртуальныхСкладахОбороты.ИсточникПроисхождения)
		|			И (ВТ_ТоварыНаВиртуальныхСкладахОбороты.КоличествоПриход > 0)
		|			И (ВТ_ТоварыНаВиртуальныхСкладахОбороты.Регистратор.ТипФормы <> ЗНАЧЕНИЕ(Перечисление.ТипыФормВС.ВнутреннееПеремещение))
		|ГДЕ
		|	НЕ ТоварыНаВиртуальныхСкладахОбороты.ДокументПартии ЕСТЬ NULL
		|	И ТоварыНаВиртуальныхСкладахОбороты.ДокументПартии.Ссылка ЕСТЬ NULL";
	
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ВыборкаПриход = РезультатЗапроса[2].Выбрать();
	ВыборкаПустыеДокументыПартии = РезультатЗапроса[3].Выбрать();
	
	НаборЗаписей = РегистрыНакопления.ТоварыНаВиртуальныхСкладах.СоздатьНаборЗаписей();
		
	ПроблемныхЭлементов = 0;
	ЭлементовОбработано = 0;
	
	ПроблемныхЗаписей = 0;
	ЗаписейОбработано = 0;

	МассивОбработанныхИсточников = Новый Массив;
	
	Пока ВыборкаПриход.Следующий() Цикл 
		
		Если МассивОбработанныхИсточников.Найти(ВыборкаПриход.Ссылка) = Неопределено Тогда
			
			НачатьТранзакцию();
			
			Попытка
				
				Блокировка = Новый БлокировкаДанных;
				ЭлементБлокировки = Блокировка.Добавить(ВыборкаПриход.Ссылка.Метаданные().ПолноеИмя());
				ЭлементБлокировки.УстановитьЗначение("Ссылка", ВыборкаПриход.Ссылка);
				Блокировка.Заблокировать();   			
				
				ИсточникПроисхожденияОбъект = ВыборкаПриход.Ссылка.ПолучитьОбъект();
				Если ИсточникПроисхожденияОбъект = Неопределено Тогда
					ОтменитьТранзакцию();
					Продолжить;
				КонецЕсли;
				
				ИсточникПроисхожденияОбъект.ДокументПартии = ВыборкаПриход.Регистратор;				
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(ИсточникПроисхожденияОбъект);
				МассивОбработанныхИсточников.Добавить(ВыборкаПриход.Ссылка);
				ЭлементовОбработано = ЭлементовОбработано + 1;
				
				ЗафиксироватьТранзакцию();
				
			Исключение
				
				ОтменитьТранзакцию();
				ТекстСообщения = НСтр("ru = 'Не удалось обработать %Ссылка% по причине: %Причина%'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%", ВыборкаПриход.Ссылка);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
				ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
				ВыборкаПриход.Ссылка.Метаданные(), ВыборкаПриход.Ссылка, ТекстСообщения);
				
				ПроблемныхЭлементов = ПроблемныхЭлементов + 1;
				
			КонецПопытки;
		КонецЕсли;
		
	КонецЦикла;
	
	Пока ВыборкаПустыеДокументыПартии.Следующий() Цикл 
		Если  ВыборкаПустыеДокументыПартии.НетПрихода Тогда
			ТекстСообщения = НСтр("ru='Не изменена запись движения документа %1 в регистр ""%2"": нет партиеобразующего документа'", ОбщегоНазначения.КодОсновногоЯзыка());
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ВыборкаПустыеДокументыПартии.Регистратор, НаборЗаписей.Метаданные().Представление());
			ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Информация,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			Продолжить;
		КонецЕсли;
		
		НаборЗаписей.Отбор.Регистратор.Значение = ВыборкаПустыеДокументыПартии.Регистратор;  		
		НаборЗаписей.Прочитать();
		Для каждого Запись Из НаборЗаписей Цикл
			Если Найти(Строка(Запись.ДокументПартии),"Объект не найден") <> 0 
				ИЛИ Запись.ДокументПартии.ПолучитьОбъект() = Неопределено
				ИЛИ НЕ ЗначениеЗаполнено(Запись.ДокументПартии) Тогда
				Запись.ДокументПартии = Запись.ИсточникПроисхождения.ДокументПартии;
			КонецЕсли;
		КонецЦикла;
		
		Попытка
			НаборЗаписей.ОбменДанными.Загрузка = Истина;
			НаборЗаписей.Записать(Истина);
			ЗаписейОбработано = ЗаписейОбработано + 1;

		Исключение
			ТекстСообщения = НСтр("ru='При записи документа партии %1 в регистр ""%2"" произошла ошибка: %3'", ОбщегоНазначения.КодОсновногоЯзыка());
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ВыборкаПустыеДокументыПартии.Регистратор, НаборЗаписей.Метаданные().Представление(), ОписаниеОшибки());
			ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ПроблемныхЗаписей = ПроблемныхЗаписей + 1;

		КонецПопытки;
	КонецЦикла;
	
	Если (ЭлементовОбработано + ПроблемныхЭлементов = 0)  И (ЗаписейОбработано + ПроблемныхЗаписей = 0) Тогда
	
		Параметры.ОбработкаЗавершена = Истина;
	
	Иначе
		
		Параметры.ОбработкаЗавершена = Ложь;

		Если ЭлементовОбработано = 0 И ПроблемныхЭлементов <> 0 Тогда
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Процедуре заполнения документов партий в источниках происхождения (отложенно)
					|не удалось заполнить документ партии:  у %1 элементов.'"), 
					ПроблемныхЭлементов);
			ВызватьИсключение ТекстСообщения;
		Иначе
			ТекстСообщения = СтрШаблон(
					НСтр("ru = 'Процедура заполнения документов партий в источниках происхождения (отложенно)
						|обработала очередную порцию источников происхождения: %1 элементов'"), 
						ЭлементовОбработано);
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
				УровеньЖурналаРегистрации.Информация,
				,
				,
				ТекстСообщения);
		КонецЕсли;
		
		Если ЗаписейОбработано = 0 И ПроблемныхЗаписей <> 0 Тогда
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Процедуре заполнения документов партий в записях регистра ""%1"" (отложенно)
					|не удалось заполнить документ партии:  у %2 записей.'"), 
					НаборЗаписей.Метаданные().Представление(), ПроблемныхЗаписей);
			ВызватьИсключение ТекстСообщения;
		Иначе
			ТекстСообщения = СтрШаблон(
					НСтр("ru = 'Процедура  заполнения документов партий в записях регистра ""%1"" (отложенно)
						|обработала очередную порцию записей: %2 записей'"), 
						НаборЗаписей.Метаданные().Представление(), ЗаписейОбработано);
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
				УровеньЖурналаРегистрации.Информация,
				,
				,
				ТекстСообщения);
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеНа_3_0_43

Процедура УстановитьМРПАпрель2022Год() Экспорт
	
	НаборЗаписей = РегистрыСведений.РегламентированныеРасчетныеПоказатели.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Период.Установить('20220401', Истина);		
	ДобавитьЗначенияРасчетныхПоказателей(НаборЗаписей, Дата("20220401"), 60000, 3063, 882*3063, 882*3063, 60000, 3063, 3180);
	
	Попытка
		НаборЗаписей.Записать();
	Исключение
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеНа_3_0_45

 Процедура УдалениеОтчетовСправокПоЗаработнойПлате() Экспорт
	
	 // Удаление отчетов РегламентированныйОтчетСправкаОСуммахДоходаИОсуществленныхПенсионныхВзносов и РегламентированныйОтчетСправкаСМестаРаботыПередНаступлениемСоциальногоРиска	
	 
	 Запрос = Новый Запрос;
	 Запрос.Текст = "ВЫБРАТЬ
	 |	РегламентированныеОтчеты.Ссылка,
	 |	РегламентированныеОтчеты.ИсточникОтчета
	 |ИЗ
	 |	Справочник.РегламентированныеОтчеты КАК РегламентированныеОтчеты
	 |ГДЕ
	 |	РегламентированныеОтчеты.ИсточникОтчета В (&СписокИсточниковОтчета)";
	 
	 СписокИсточников =  Новый СписокЗначений;
	 СписокИсточников.Добавить("РегламентированныйОтчетСправкаОСуммахДоходаИОсуществленныхПенсионныхВзносов");
	 СписокИсточников.Добавить("РегламентированныйОтчетСправкаСМестаРаботыПередНаступлениемСоциальногоРиска");
	 
	 Запрос.УстановитьПараметр("СписокИсточниковОтчета", СписокИсточников);
	 
	 Выборка = Запрос.Выполнить().Выбрать();
	 
	 МассивСсылок = Новый Массив(1);
	 
	 Пока Выборка.Следующий() Цикл
		 
		 МассивСсылок[0] = Выборка.Ссылка;
		 ТаблицаСсылок = НайтиПоСсылкам(МассивСсылок);
		 Если ТаблицаСсылок.Количество() = 0 Тогда
			 ОтчетОбъект = Выборка.Ссылка.ПолучитьОбъект();
			 Попытка					
				 ОтчетОбъект.ОбменДанными.Загрузка = Истина;
				 ОтчетОбъект.Удалить();
			 Исключение
				 ТекстСообщения = НСтр("ru='Операция не выполнена'", ОбщегоНазначения.КодОсновногоЯзыка());
				 ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			 КонецПопытки;
		 Иначе
			 ТекстСообщения = НСтр("ru = 'Регламентированный отчет %1 ""%2"" - не может быть удален, т.к. имеются ссылки в информационной базе'", ОбщегоНазначения.КодОсновногоЯзыка());
			 ЗаписьЖурналаРегистрации(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		                     	ТекстСообщения, Выборка.Ссылка.Код, Выборка.Ссылка.Наименование, ОбщегоНазначения.КодОсновногоЯзыка()),
								УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		 КонецЕсли;	
		 
	 КонецЦикла;
	 
	 // Обновление справочника "Регламентированные отчеты"
	ОбновлениеИнформационнойБазыБК.ОбновитьРегламентированныеОтчеты();

КонецПроцедуры

#КонецОбласти

#Область ОбновлениеНа_3_0_46

Процедура УстановитьМЗПМРП2023Год() Экспорт
	
	НаборЗаписей = РегистрыСведений.РегламентированныеРасчетныеПоказатели.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Период.Установить('20230101', Истина);		
	ДобавитьЗначенияРасчетныхПоказателей(НаборЗаписей, Дата("20230101"), 70000, 3450, 882*3450, 882*3450, 70000, 3450, 3450);
	
	Попытка
		НаборЗаписей.Записать();
	Исключение
	КонецПопытки;
	
КонецПроцедуры

Процедура ОбновитьКалендарныеГрафики2023() Экспорт
	
	Если ОбщегоНазначенияПовтИсп.ЭтоАвтономноеРабочееМесто() Тогда
		Возврат;
	КонецЕсли;

	ПроизводственныйКалендарьРК = Справочники.ПроизводственныеКалендари.НайтиПоКоду("РК");
	Если ЗначениеЗаполнено(ПроизводственныйКалендарьРК) Тогда
		
		ДанныеПроизводственногоКалендаря          = Справочники.ПроизводственныеКалендари.ДанныеПроизводственногоКалендаря(ПроизводственныйКалендарьРК, 2023);
		ДанныеПроизводственногоКалендаряУмолчанию = Справочники.ПроизводственныеКалендари.РезультатЗаполненияПроизводственногоКалендаряПоУмолчанию("РК", 2023);
		
		Если ДанныеПроизводственногоКалендаря.Количество() = 0 Тогда
			//календарь не был ранее заполнен 			
			Справочники.ПроизводственныеКалендари.ЗаписатьДанныеПроизводственногоКалендаря(ПроизводственныйКалендарьРК, 2023, ДанныеПроизводственногоКалендаряУмолчанию);
			Возврат;
		КонецЕсли;
				
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	КлассификаторТаблица.Дата,
			|	КлассификаторТаблица.ВидДня,
			|	КлассификаторТаблица.ДатаПереноса
			|ПОМЕСТИТЬ КлассификаторТаблица
			|ИЗ
			|	&КлассификаторТаблица КАК КлассификаторТаблица
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ДанныеПроизводственногоКалендаря.Дата,
			|	ДанныеПроизводственногоКалендаря.ВидДня,
			|	ДанныеПроизводственногоКалендаря.ДатаПереноса
			|ПОМЕСТИТЬ ДанныеПроизводственногоКалендаря
			|ИЗ
			|	&ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	КлассификаторТаблица.Дата,
			|	КлассификаторТаблица.ВидДня,
			|	КлассификаторТаблица.ДатаПереноса
			|ИЗ
			|	КлассификаторТаблица КАК КлассификаторТаблица
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
			|		ПО КлассификаторТаблица.Дата = ДанныеПроизводственногоКалендаря.Дата";
		
		Запрос.УстановитьПараметр("КлассификаторТаблица", ДанныеПроизводственногоКалендаряУмолчанию);
		Запрос.УстановитьПараметр("ДанныеПроизводственногоКалендаря", ДанныеПроизводственногоКалендаря);
		
		ДанныеПроизводственногоКалендаряДляЗаписи = Запрос.Выполнить().Выгрузить();
		
		Если ДанныеПроизводственногоКалендаряДляЗаписи.Количество() > 0 Тогда
			Справочники.ПроизводственныеКалендари.ЗаписатьДанныеПроизводственногоКалендаря(ПроизводственныйКалендарьРК, 2023, ДанныеПроизводственногоКалендаряДляЗаписи);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеНа_3_0_47

Процедура ЗаписатьСклоненияФизическихЛицОтложенно(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1000
	|	ФизическиеЛица.Ссылка КАК Ссылка,
	|	ФизическиеЛица.Наименование КАК Наименование,
	|	ФизическиеЛица.Пол КАК Пол,
	|	ЕСТЬNULL(ФИОФизЛиц.Фамилия, """") КАК Фамилия,
	|	ЕСТЬNULL(ФИОФизЛиц.Имя, """") КАК Имя,
	|	ЕСТЬNULL(ФИОФизЛиц.Отчество, """") КАК Отчество,
	|	ЕСТЬNULL(ФИОФизЛиц.УдалитьНеСклонятьФамилию, Ложь) КАК НеСклонятьФамилию
	|ИЗ
	|	Справочник.ФизическиеЛица КАК ФизическиеЛица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(, ) КАК ФИОФизЛиц
	|		ПО ФизическиеЛица.Ссылка = ФИОФизЛиц.ФизЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СклоненияПредставленийОбъектов КАК СклоненияПредставленийОбъектов
	|		ПО ФизическиеЛица.Ссылка = СклоненияПредставленийОбъектов.Объект
	|ГДЕ
	|	НЕ ФизическиеЛица.ЭтоГруппа
	|	И СклоненияПредставленийОбъектов.Объект ЕСТЬ NULL";
		
	Выборка = Запрос.Выполнить().Выбрать();
	
	ПроблемныхОбъектов = 0;
	ОбъектовОбработано = 0;

	Пока Выборка.Следующий() Цикл 
		
		ПараметрыСклонения = СклонениеПредставленийОбъектовКлиентСервер.ПараметрыСклонения();
		СтруктураСклонения = СклонениеПредставленийОбъектовКлиентСервер.СтруктураСклонения();
		
		ИменаПадежей = ОбщегоНазначения.ВыгрузитьКолонку(СтруктураСклонения, "Ключ");
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ИменаПадежей, "Именительный");
		
		ПараметрыСклонения.ЭтоФИО = Истина;
		ПараметрыСклонения.Пол    = ?(ЗначениеЗаполнено(Выборка.Пол), ?(Выборка.Пол = ПредопределенноеЗначение("Перечисление.ПолФизическихЛиц.Мужской"), 1, 2), Неопределено);
		
		Представление = "" + ?(Выборка.НеСклонятьФамилию, "", Выборка.Фамилия +" ") + Выборка.Имя + " " + Выборка.Отчество;
		
		Если ПустаяСтрока(Представление) Тогда
			Продолжить;
		Конецесли;
		
		СклонениеПредставленийОбъектов.ПросклонятьВстроеннымМетодом(СтруктураСклонения, Представление, ПараметрыСклонения, Ложь);
		
		Если СтруктураСклонения <> Неопределено и ТипЗнч(СтруктураСклонения) = Тип("Структура") Тогда
			
			Если Выборка.НеСклонятьФамилию Тогда   
				
				СтруктураСклонения["Именительный"] = "" + Выборка.Фамилия + " " + Представление;
				
				Для Каждого ИмяПадежа Из ИменаПадежей Цикл
					
					ФИО = СтруктураСклонения[ИмяПадежа];
					ФИО = "" + Выборка.Фамилия + " " + ФИО; 
					
					СтруктураСклонения[ИмяПадежа] = ФИО;
				КонецЦикла;
				
			КонецЕсли;
			
			Представление = СтруктураСклонения["Именительный"];
			
			Попытка 
				СклонениеПредставленийОбъектов.ЗаписатьВРегистрСклонения(Представление, Выборка.Ссылка, СтруктураСклонения);
				
				ОбъектовОбработано = ОбъектовОбработано + 1;
			Исключение
				
				ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
				
				ТекстСообщения = НСтр("ru='При записи склонений физического лица %1  произошла ошибка: %2'", ОбщегоНазначения.КодОсновногоЯзыка());
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Представление, ОписаниеОшибки());
				ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЦикла;     
	
	Если ОбъектовОбработано + ПроблемныхОбъектов = 0 Тогда
	
		Параметры.ОбработкаЗавершена = Истина;
	
	Иначе
		
		Параметры.ОбработкаЗавершена = Ложь;

		Если ОбъектовОбработано = 0 Тогда
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Процедуре записи склонения физ.лиц (отложенно)
					|не удалось записать склонения:  у %1 физ.лиц'"), 
					ПроблемныхОбъектов);
			ВызватьИсключение ТекстСообщения;
		Иначе
			ТекстСообщения = СтрШаблон(
					НСтр("ru = 'Процедура записи склонения физ.лиц (отложенно)
						|обработала очередную порцию элементов справочника ""%1"": %2 элементов'"), 
						Метаданные.Справочники.ФизическиеЛица.Представление(), ОбъектовОбработано);
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
				УровеньЖурналаРегистрации.Информация,
				,
				,
				ТекстСообщения);
		КонецЕсли;
		
	КонецЕсли;


КонецПроцедуры

Процедура ЗаполнитьНалогиСборыОтчисленияЕП()
	
	Если ПланыОбмена.ГлавныйУзел() = Неопределено Тогда // В подчиненных узлах РИБ не выполняется
	
		СправочникОбъект = Справочники.НалогиСборыОтчисления.ЕдиныйПлатеж.ПолучитьОбъект();
		СправочникОбъект.КодБК 							  = "";
		СправочникОбъект.КодНазначенияПлатежа 			  = "185";
		СправочникОбъект.СчетУчетаРасчетовСКонтрагентомБУ = ПланыСчетов.Типовой.ОбязательстваПоЕдиномуПлатежу;
		СправочникОбъект.СчетУчетаРасчетовСКонтрагентомНУ = ПланыСчетов.Налоговый.ОбязательстваПоЕдиномуПлатежу;
		СправочникОбъект.НазначениеПлатежа 				  = НСтр("ru = 'Единый платеж за '");
		Попытка
			СправочникОбъект.Записать();
		Исключение
			ТекстСообщения = НСтр("ru='Операция не выполнена'", ОбщегоНазначения.КодОсновногоЯзыка());
			ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;	

	КонецЕсли;
	
	// Сроки перечисления налогов, сборов, отчислений
	НаборЗаписейПроверка = РегистрыСведений.СрокиПеречисленияНалоговСборовОтчислений.СоздатьНаборЗаписей();
	
	НаборЗаписейПроверка.Отбор.ВидНалога.Использование = Истина;
	НаборЗаписейПроверка.Отбор.ВидНалога.ВидСравнения	 = ВидСравнения.Равно;
	НаборЗаписейПроверка.Отбор.ВидНалога.Значение	 	 = Справочники.НалогиСборыОтчисления.ЕдиныйПлатеж;
	
	НаборЗаписейПроверка.Прочитать();
	ЕстьЗаписиЕП = (НаборЗаписейПроверка.Количество() > 0);
	
	Если ЕстьЗаписиЕП Тогда
		Возврат;
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.СрокиПеречисленияНалоговСборовОтчислений.СоздатьНаборЗаписей();
	
	НаборЗаписей.Отбор.Организация.Использование = Истина;
	НаборЗаписей.Отбор.Организация.ВидСравнения	 = ВидСравнения.Равно;
	НаборЗаписей.Отбор.Организация.Значение	 	 = Справочники.Организации.ПустаяСсылка();

	ДлинаСуток = 86400;
	ТекМесяц = '20230101';	
	ДатаОкончания = НачалоМесяца(КонецГода(ОбщегоНазначенияБК.ПолучитьРабочуюДату()));
	
	Пока ТекМесяц <= ДатаОкончания Цикл
		
		// ЕП
		Если ТекМесяц >= '20230101' Тогда
			// до 25 числа месяца, следующего за месяцем исчисления
			Движение = НаборЗаписей.Добавить();
			// Измерения
			Движение.Месяц 		 = ТекМесяц;
			Движение.Организация = Справочники.Организации.ПустаяСсылка();
			Движение.ВидНалога	 = Справочники.НалогиСборыОтчисления.ЕдиныйПлатеж;
			// Ресурсы
			Движение.ПорядокОпределенияСрокаПеречисления = Перечисления.ПорядокОпределенияСрокаПеречисления.ПоМесяцуНалоговогоПериода;
			Движение.СрокПеречисления					 = ДобавитьМесяц(ТекМесяц, 1) + (25-1) * ДлинаСуток;
		КонецЕсли;		
		
		ТекМесяц = ДобавитьМесяц(ТекМесяц, 1);
	КонецЦикла;

	Попытка
		НаборЗаписей.Записать(Ложь);
	Исключение
		ТекстСообщения = НСтр("ru='Операция не выполнена'", ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
			
КонецПроцедуры

Процедура ОбновитьСведенияОСтавкахИДоляхЕП() Экспорт
	
	НаборЗаписей = РегистрыСведений.СведенияОСтавкахНалоговСборовОтчислений.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Период.Установить('20230101');
	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидНалога        = Справочники.НалогиСборыОтчисления.ЕдиныйПлатеж;
	НоваяЗапись.Период           = '20230101';
	НоваяЗапись.Ставка		     = 20;
	
	Попытка
		НаборЗаписей.Записать(Истина);
	Исключение
		ТекстСообщения = НСтр("ru='Операция не выполнена'", ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	РегистрыСведений.СведенияОДоляхЕП.ЗаполнитьСведенияОДоляхЕП();
	
КонецПроцедуры

Процедура ЗаполнитьНастройкиЕПДляНачислений()
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда
		Возврат;
	КонецЕсли;
			
	Облагается			   = Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЦеликом;
	НеОблагается		   = Справочники.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ОсновныеНачисленияОрганизаций.Ссылка,
	               |	ОсновныеНачисленияОрганизаций.Предопределенный,
	               |	ОсновныеНачисленияОрганизаций.ИмяПредопределенныхДанных
	               |ИЗ
	               |	ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК ОсновныеНачисленияОрганизаций
	               |ГДЕ
	               |	ОсновныеНачисленияОрганизаций.ОблагаетсяЕП = ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.ПустаяСсылка)";
				   
				   
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НачислениеОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		Если Выборка.Предопределенный Тогда
			Если Выборка.ИмяПредопределенныхДанных = "ОкладПоДням" 
				ИЛИ Выборка.ИмяПредопределенныхДанных = "ОкладПоЧасам" 
				ИЛИ Выборка.ИмяПредопределенныхДанных = "ОкладОтОбратного" 
				ИЛИ Выборка.ИмяПредопределенныхДанных = "ОкладОтОбратногоПоДням" 
				ИЛИ Выборка.ИмяПредопределенныхДанных = "ОкладОтОбратногоПоЧасам" 
				ИЛИ Выборка.ИмяПредопределенныхДанных = "ТарифЧасовой" 
				ИЛИ Выборка.ИмяПредопределенныхДанных = "ОплатаПоСреднемуБЛ" 
				ИЛИ Выборка.ИмяПредопределенныхДанных = "ОплатаПоСреднемуОтп" 
				ИЛИ Выборка.ИмяПредопределенныхДанных = "КомпенсацияОтпуска" 
				ИЛИ Выборка.ИмяПредопределенныхДанных = "КомпенсацияОтпускаБезУвольнения" Тогда
				
				НачислениеОбъект.ОблагаетсяЕП = Облагается;
				
			ИначеЕсли Выборка.ИмяПредопределенныхДанных = "КомпенсационныеВыплатыПриСлужебныхКомандировках" 
				ИЛИ Выборка.ИмяПредопределенныхДанных = "ПрочиеДоходыОблагаемыеУИсточника" 
				ИЛИ Выборка.ИмяПредопределенныхДанных = "ДоходыНеОблагаемыеУИсточникаВыплаты" ТОгда
				
				НачислениеОбъект.ОблагаетсяЕП = НеОблагается;
				
			КонецЕсли;
			
		Иначе
			НачислениеОбъект.ОблагаетсяЕП = Облагается;
		КонецЕсли;
		
		Попытка
			НачислениеОбъект.Записать();	
		Исключение
			ТекстСообщения = НСтр("ru='Операция не выполнена'", ОбщегоНазначения.КодОсновногоЯзыка());
			ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
	КонецЦикла;
	
	
КонецПроцедуры

Процедура ВыполнитьНастройкиПоЕдиномуПлатежу() Экспорт
	
	ЗаполнитьНалогиСборыОтчисленияЕП();
	ОбновитьСведенияОСтавкахИДоляхЕП();
	ЗаполнитьНастройкиЕПДляНачислений();
	ОбновитьСчетаЕдиногПлатежа();
	
	// КоэффициентыСтавкиРефинансированияНБДляРасчетаПени
	НаборЗаписей = РегистрыСведений.КоэффициентыСтавкиРефинансированияНБДляРасчетаПени.СоздатьНаборЗаписей();
	
	НаборЗаписей.Отбор.Организация.Установить(Справочники.Организации.ПустаяСсылка(), Истина);
	
	НаборЗаписей.Отбор.ВидНалога.Установить(Справочники.НалогиСборыОтчисления.ЕдиныйПлатеж, Истина);
	НаборЗаписей.Отбор.Период.Установить('20230101', Истина);
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() = 0 Тогда
		
		Движение = НаборЗаписей.Добавить();
		// Свойства
		Движение.Период = '20230101';
		// Измерения
		Движение.Организация = Справочники.Организации.ПустаяСсылка();
		Движение.ВидНалога = Справочники.НалогиСборыОтчисления.ЕдиныйПлатеж;
		// Ресурсы
		Движение.Коэффициент = 1.25;
		
		Попытка
			НаборЗаписей.ОбменДанными.Загрузка = Истина;
			НаборЗаписей.Записать();
		Исключение
			
		КонецПопытки;
	КонецЕсли;
	
	// статьи затрат
	СтатьяЗатрат = Справочники.СтатьиЗатрат.ПеняПоЕП.ПолучитьОбъект();
	СтатьяЗатрат.КатегорияЗатрат   		  = Перечисления.КатегорииЗатрат.ПрочиеРасходы;
	СтатьяЗатрат.ПринятиеКНалоговомуУчету =	Истина;
	СтатьяЗатрат.ВидРасходовНУ			  =	Справочники.ВидыРасходовНУ.ПрочиеРасходыНаВычет;
	Попытка
		СтатьяЗатрат.Записать();
	Исключение
		ТекстСообщения = НСтр("ru='Операция не выполнена'", ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	СтатьяЗатрат = Справочники.СтатьиЗатрат.ЕдиныйПлатеж.ПолучитьОбъект();
	СтатьяЗатрат.КатегорияЗатрат   		  = Перечисления.КатегорииЗатрат.ПрочиеРасходы;
	СтатьяЗатрат.ПринятиеКНалоговомуУчету =	Истина;
	СтатьяЗатрат.ВидРасходовНУ			  =	Справочники.ВидыРасходовНУ.ПрочиеРасходыНаВычет;
	Попытка
		СтатьяЗатрат.Записать();
	Исключение
		ТекстСообщения = НСтр("ru='Операция не выполнена'", ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;

	//добавлены новые налоги, статьи затрат, нужно скорректировать коды у элементов справочника
	УстановитьНовыеКодыНеПредопределеннымЭлементамСправочника("НалогиСборыОтчисления");	
	УстановитьНовыеКодыНеПредопределеннымЭлементамСправочника("СтатьиЗатрат");
	
	ОбновитьНастройкиОтчетовЗП();

КонецПроцедуры

Процедура ОбновитьСчетаЕдиногПлатежа() Экспорт 
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда // В подчиненных узлах РИБ не выполняется
		Возврат;
	КонецЕсли;
	
	ВестиУчетПоСотрудникам = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.НаСчетеВедетсяУчетПоРаботникамОрганизаций(ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПоОплатеТруда); // счет 3350

	// обработка групповог осчета ПрочиеОбязательстваПоДругимОбязательнымПлатежам_
	ПрочиеОбязательстваПоДругимОбязательнымПлатежам_ = ПланыСчетов.Типовой.ПрочиеОбязательстваПоДругимОбязательнымПлатежам_;
		
	ОбъектСчетБУ = ПрочиеОбязательстваПоДругимОбязательнымПлатежам_.ПолучитьОбъект();
	ОбъектСчетБУ.ЗапретитьИспользоватьВПроводках = Истина;
	ОбъектСчетБУ.СчетНУ = ПланыСчетов.Налоговый.ПрочиеОбязательстваПоДругимОбязательнымПлатежам_;
	
	Попытка
		ОбъектСчетБУ.Записать();
	Исключение
		ТекстСообщения = НСтр("ru='Операция не выполнена'", ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;	

	ПрочиеОбязательстваПоДругимОбязательнымПлатежам_ = ПланыСчетов.Налоговый.ПрочиеОбязательстваПоДругимОбязательнымПлатежам_;
		
	ОбъектСчетБУ = ПрочиеОбязательстваПоДругимОбязательнымПлатежам_.ПолучитьОбъект();
	ОбъектСчетБУ.ЗапретитьИспользоватьВПроводках = Истина;
	
	Попытка
		ОбъектСчетБУ.Записать();
	Исключение
		ТекстСообщения = НСтр("ru='Операция не выполнена'", ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;	
	
	ОбязательстваПоЕдиномуПлатежу = ПланыСчетов.Типовой.ОбязательстваПоЕдиномуПлатежу;

	ОбъектСчетБУ = ОбязательстваПоЕдиномуПлатежу.ПолучитьОбъект();
	ОбъектСчетБУ.СчетНУ = ПланыСчетов.Налоговый.ОбязательстваПоЕдиномуПлатежу;
	
	Попытка
		ОбъектСчетБУ.Записать();
	Исключение
		ТекстСообщения = НСтр("ru='Операция не выполнена'", ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;	

	ПрочиеОбязательстваПоДругимОбязательнымПлатежам	= ПланыСчетов.Налоговый.ПрочиеОбязательстваПоДругимОбязательнымПлатежам;
    
    ОбъектСчетНУ = ПрочиеОбязательстваПоДругимОбязательнымПлатежам.ПолучитьОбъект();
    ОбъектСчетНУ.Порядок = ОбъектСчетНУ.ПолучитьПорядокКода();
	ОбъектСчетНУ.ОбменДанными.Загрузка 	= Истина;
	Попытка
		ОбъектСчетНУ.Записать();
	Исключение
		ТекстСообщения = НСтр("ru='Операция не выполнена'", ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
    КонецПопытки;

    // инициализация списка счетов, на которых можно устанавливать дополнительную аналитику "Работники организации"
	СчетаЗП = Новый СписокЗначений;
	СчетаЗП.Добавить(ПланыСчетов.Типовой.ОбязательстваПоЕдиномуПлатежу);
	СчетаЗП.Добавить(ПланыСчетов.Налоговый.ОбязательстваПоЕдиномуПлатежу);
	
	Для каждого Счет Из СчетаЗП Цикл
		Если ТипЗнч(Счет.Значение) = Тип("ПланСчетовСсылка.Налоговый") Тогда
			ИмяПланаСчетов = "Налоговый";
		Иначе
			ИмяПланаСчетов = "Типовой";
		КонецЕсли;
		ПрименитьПараметрыСубконтоРаботникиОрганизации(Счет.Значение, ИмяПланаСчетов, ВестиУчетПоСотрудникам, Ложь);
	КонецЦикла;

КонецПроцедуры	

Процедура ОбновитьИспользованиеНаборовСвойствЕП() Экспорт
	
	ПараметрыНабора = УправлениеСвойствами.СтруктураПараметровНабораСвойств();
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_РасчетЕдиногоПлатежа", ПараметрыНабора);
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_ЕППеречислениеВФонды", ПараметрыНабора);
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_ЕПВозвратПлатежа", ПараметрыНабора);

КонецПроцедуры	

Процедура ЗаполнитьРесурсыУчетнаяПолитикаНалоговыйУчет2023() Экспорт
    
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
    |   УчетнаяПолитикаНалоговыйУчет.Период КАК Период,
    |   УчетнаяПолитикаНалоговыйУчет.Организация КАК Организация
    |ИЗ
    |   РегистрСведений.УчетнаяПолитикаНалоговыйУчет КАК УчетнаяПолитикаНалоговыйУчет
    |ГДЕ
    |   УчетнаяПолитикаНалоговыйУчет.ПорядокОбложенияДоходовРаботников = ЗНАЧЕНИЕ(Перечисление.ПорядокОбложенияДоходовРаботников.ПустаяСсылка)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.УчетнаяПолитикаНалоговыйУчет.СоздатьНаборЗаписей();
	
    ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
    
    Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
        
        НаборЗаписей.Отбор.Организация.Установить(ВыборкаДетальныеЗаписи.Организация);
        НаборЗаписей.Отбор.Период.Установить(ВыборкаДетальныеЗаписи.Период);
        
        НаборЗаписей.Прочитать();
        
        Если НЕ НаборЗаписей.Количество() = 0 Тогда
            
            Для Каждого ЗаписьНабора Из НаборЗаписей Цикл
                ЗаписьНабора.ПорядокОбложенияДоходовРаботников = Перечисления.ПорядокОбложенияДоходовРаботников.Общеустановленный;
            КонецЦикла;
            
        КонецЕсли;
        
        Если НЕ НаборЗаписей.Количество() = 0 Тогда
            
            Попытка
                НаборЗаписей.Записать();
            Исключение
                ТекстСообщения = НСтр("ru='Операция не выполнена'", ОбщегоНазначения.КодОсновногоЯзыка());
                ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
            КонецПопытки;
            
        КонецЕсли;
        
    КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьНастройкиОтчетовЕП(Параметры) Экспорт
	
	НастройкиОтчетов = Новый ТаблицаЗначений;
	НастройкиОтчетов.Колонки.Добавить("КлючОбъекта");
	НастройкиОтчетов.Колонки.Добавить("КлючНастроек");
	НастройкиОтчетов.Колонки.Добавить("Пользователь");
	НастройкиОтчетов.Колонки.Добавить("Представление");
	
	ВыборкаНастроек = ХранилищеПользовательскихНастроекОтчетов.Выбрать();
	
	Пока ВыборкаНастроек.Следующий() Цикл 
		
		ИмяНастроекОтчета = СтрРазделить(ВыборкаНастроек.КлючОбъекта, "/", Ложь);
		Если ИмяНастроекОтчета.Количество() < 2 Тогда
			Продолжить; // Некорректная настройка.
		КонецЕсли;
		
		Если ИмяНастроекОтчета[0] = "КонтрольнаяВедомостьОтраженияЗарплатыВРегУчете"
			ИЛИ ИмяНастроекОтчета[0] = "РегистрНалоговогоУчетаПоИПНиСН"
			ИЛИ ИмяНастроекОтчета[0] = "ОтчетПоРасчетуПениОПВиСО" Тогда
			
			НоваяСтрока = НастройкиОтчетов.Добавить();
			НоваяСтрока.КлючОбъекта = ВыборкаНастроек.КлючОбъекта;
			НоваяСтрока.КлючНастроек = ВыборкаНастроек.КлючНастроек;
			НоваяСтрока.Пользователь = ВыборкаНастроек.Пользователь;
			НоваяСтрока.Представление = ВыборкаНастроек.Представление;
			
		КонецЕсли;
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Истина);
	Для Каждого СтрокаНастройки Из НастройкиОтчетов Цикл
		Попытка
			ХранилищеПользовательскихНастроекОтчетов.Удалить(СтрокаНастройки.КлючОбъекта, СтрокаНастройки.КлючНастроек, СтрокаНастройки.Пользователь);
		Исключение
			ТекстСообщения = НСтр("ru='Операция не выполнена'", ОбщегоНазначения.КодОсновногоЯзыка());
			ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	КонецЦикла;
	УстановитьПривилегированныйРежим(Ложь);
	
	НастройкиОтчетов.Очистить();
	
	ВыборкаНастроек = ХранилищеСистемныхНастроек.Выбрать();
	
	Пока ВыборкаНастроек.Следующий() Цикл 
		
		ИмяНастроекОтчета = СтрРазделить(ВыборкаНастроек.КлючОбъекта, "/", Ложь);
		Если ИмяНастроекОтчета.Количество() < 2 Тогда
			Продолжить; // Некорректная настройка.
		КонецЕсли;
		
		Если СтрНайти(ИмяНастроекОтчета[0], "КонтрольнаяВедомостьОтраженияЗарплатыВРегУчете") > 0 
			ИЛИ СтрНайти(ИмяНастроекОтчета[0], "РегистрНалоговогоУчетаПоИПНиСН") > 0
			ИЛИ СтрНайти(ИмяНастроекОтчета[0], "ОтчетПоРасчетуПениОПВиСОТогда") > 0 Тогда
			
			НоваяСтрока = НастройкиОтчетов.Добавить();
			НоваяСтрока.КлючОбъекта = ВыборкаНастроек.КлючОбъекта;
			НоваяСтрока.КлючНастроек = ВыборкаНастроек.КлючНастроек;
			НоваяСтрока.Пользователь = ВыборкаНастроек.Пользователь;
			НоваяСтрока.Представление = ВыборкаНастроек.Представление;
			
		КонецЕсли;
		
	КонецЦикла;

	УстановитьПривилегированныйРежим(Истина);
	Для Каждого СтрокаНастройки Из НастройкиОтчетов Цикл
		Попытка
			ХранилищеСистемныхНастроек.Удалить(СтрокаНастройки.КлючОбъекта, СтрокаНастройки.КлючНастроек, СтрокаНастройки.Пользователь);
		Исключение
			ТекстСообщения = НСтр("ru='Операция не выполнена'", ОбщегоНазначения.КодОсновногоЯзыка());
			ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	КонецЦикла;
	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры

#КонецОбласти

#Область ОбновлениеНа_3_0_48

Процедура ЗаполнитьНастройкиВидовНалоговВНалоговомУчете() Экспорт
	
	Если Метаданные.Справочники.НалогиСборыОтчисления.Реквизиты.Найти("УдалитьОтноситьНаВычетыВПределахУплаченнойСуммы") = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ДАТАВРЕМЯ(1980, 1, 1) КАК Период,
	|	Налоги.Ссылка КАК ВидНалога,
	|	Налоги.УдалитьОтноситьНаВычетыВПределахУплаченнойСуммы КАК ОтноситьНаВычетыВПределахУплаченнойСуммыНалога
	|ИЗ
	|	Справочник.НалогиСборыОтчисления КАК Налоги
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиВидовНалоговВНалоговомУчете КАК Настройки
	|		ПО (Настройки.Период = ДАТАВРЕМЯ(1980, 1, 1))
	|			И (Настройки.ВидНалога = Налоги.Ссылка)
	|ГДЕ
	|	Настройки.ВидНалога ЕСТЬ NULL");
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		ТаблицаНастроек = РезультатЗапроса.Выгрузить();
		
		НачатьТранзакцию();
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.НастройкиВидовНалоговВНалоговомУчете");
		ЭлементБлокировки.ИсточникДанных = ТаблицаНастроек;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Период"   , "Период");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ВидНалога", "ВидНалога");
		Блокировка.Заблокировать();
		
		Попытка
			Для Каждого ТекущаяСтрока Из ТаблицаНастроек Цикл
				МенеджерЗаписи = РегистрыСведений.НастройкиВидовНалоговВНалоговомУчете.СоздатьМенеджерЗаписи();
				ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ТекущаяСтрока);
				МенеджерЗаписи.Записать();
			КонецЦикла;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			Если ТранзакцияАктивна() Тогда
				ОтменитьТранзакцию();
			КонецЕсли;
			
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Не удалось заполнить РС ""%1"" по причине: %2'"),
				Метаданные.РегистрыСведений.НастройкиВидовНалоговВНалоговомУчете.Представление(),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
				Метаданные.РегистрыСведений.НастройкиВидовНалоговВНалоговомУчете, , ТекстСообщения);
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеНа_3_0_49

Процедура ЗаполнитьРесурсыУчетнаяПолитикаНалоговыйУчетЗаявленныйДоходИП() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	&парамПериод КАК Период,
	|	УчетнаяПолитикаНалоговыйУчетСрезПоследних.Организация КАК Организация,
	|	УчетнаяПолитикаНалоговыйУчетСрезПоследних.НДСНалоговыйПериод КАК НДСНалоговыйПериод,
	|	УчетнаяПолитикаНалоговыйУчетСрезПоследних.НДСМетодОтнесенияВЗачет КАК НДСМетодОтнесенияВЗачет,
	|	УчетнаяПолитикаНалоговыйУчетСрезПоследних.ОрганизацияЯвляетсяПлательщикомНДС КАК ОрганизацияЯвляетсяПлательщикомНДС,
	|	УчетнаяПолитикаНалоговыйУчетСрезПоследних.ОрганизацияЯвляетсяПлательщикомКПН КАК ОрганизацияЯвляетсяПлательщикомКПН,
	|	УчетнаяПолитикаНалоговыйУчетСрезПоследних.ОрганизацияЯвляетсяПлательщикомАкциза КАК ОрганизацияЯвляетсяПлательщикомАкциза,
	|	УчетнаяПолитикаНалоговыйУчетСрезПоследних.ОрганизацияЯвляетсяПлательщикомСН КАК ОрганизацияЯвляетсяПлательщикомСН,
	|	УчетнаяПолитикаНалоговыйУчетСрезПоследних.УпрощенныйУчетИПНиОПВ КАК УпрощенныйУчетИПНиОПВ,
	|	УчетнаяПолитикаНалоговыйУчетСрезПоследних.ОтражениеПоПериодуРегистрации КАК ОтражениеПоПериодуРегистрации,
	|	УчетнаяПолитикаНалоговыйУчетСрезПоследних.ЗасчитыватьВВыплаченныеДоходыУдержанияПоИЛ КАК ЗасчитыватьВВыплаченныеДоходыУдержанияПоИЛ,
	|	УчетнаяПолитикаНалоговыйУчетСрезПоследних.КоэффициентМРПДляРасчетаСНЗаИндивидуальногоПредпринимателя КАК КоэффициентМРПДляРасчетаСНЗаИндивидуальногоПредпринимателя,
	|	УчетнаяПолитикаНалоговыйУчетСрезПоследних.КоэффициентМРПДляРасчетаСНЗаНаемногоРаботника КАК КоэффициентМРПДляРасчетаСНЗаНаемногоРаботника,
	|	УчетнаяПолитикаНалоговыйУчетСрезПоследних.ПрименятьОграничениеНаМинимальнуюБазуСоциальногоНалога КАК ПрименятьОграничениеНаМинимальнуюБазуСоциальногоНалога,
	|	УчетнаяПолитикаНалоговыйУчетСрезПоследних.ПорядокСписанияЗадолженностиПоЗарплате КАК ПорядокСписанияЗадолженностиПоЗарплате,
	|	УчетнаяПолитикаНалоговыйУчетСрезПоследних.РаспределятьНалогиПоСтруктурнымЕдиницам КАК РаспределятьНалогиПоСтруктурнымЕдиницам,
	|	УчетнаяПолитикаНалоговыйУчетСрезПоследних.РаспределятьНалогиПоПодразделениямОрганизаций КАК РаспределятьНалогиПоПодразделениямОрганизаций,
	|	УчетнаяПолитикаНалоговыйУчетСрезПоследних.ОрганизацияЯвляетсяВкладчикомОППВ КАК ОрганизацияЯвляетсяВкладчикомОППВ,
	|	УчетнаяПолитикаНалоговыйУчетСрезПоследних.ПрименятьОграничениеНаМинимальныйОбъектОСМС КАК ПрименятьОграничениеНаМинимальныйОбъектОСМС,
	|	УчетнаяПолитикаНалоговыйУчетСрезПоследних.ЕжемесячныйРасчетВзносовИОтчисленийЗаИП КАК ЕжемесячныйРасчетВзносовИОтчисленийЗаИП,
	|	УчетнаяПолитикаНалоговыйУчетСрезПоследних.ПорядокРасчетаДоходаОПВ КАК ПорядокРасчетаДоходаОПВ,
	|	УчетнаяПолитикаНалоговыйУчетСрезПоследних.РазмерДоходаОПВ КАК РазмерДоходаОПВ,
	|	УчетнаяПолитикаНалоговыйУчетСрезПоследних.ПорядокРасчетаДоходаСО КАК ПорядокРасчетаДоходаСО,
	|	УчетнаяПолитикаНалоговыйУчетСрезПоследних.РазмерДоходаСО КАК РазмерДоходаСО,
	|	УчетнаяПолитикаНалоговыйУчетСрезПоследних.ПредоставлятьВычетВМесяцеОтсутствияДохода КАК ПредоставлятьВычетВМесяцеОтсутствияДохода,
	|	УчетнаяПолитикаНалоговыйУчетСрезПоследних.СпособОтраженияОПВИП КАК СпособОтраженияОПВИП,
	|	УчетнаяПолитикаНалоговыйУчетСрезПоследних.СпособОтраженияСОИП КАК СпособОтраженияСОИП,
	|	УчетнаяПолитикаНалоговыйУчетСрезПоследних.РежимНалогообложения КАК РежимНалогообложения,
	|	УчетнаяПолитикаНалоговыйУчетСрезПоследних.СтавкаВОСМСДляИП КАК СтавкаВОСМСДляИП,
	|	УчетнаяПолитикаНалоговыйУчетСрезПоследних.СпособОтраженияВОСМСИП КАК СпособОтраженияВОСМСИП,
	|	УчетнаяПолитикаНалоговыйУчетСрезПоследних.РазмерДоходаВОСМС КАК РазмерДоходаВОСМС,
	|	УчетнаяПолитикаНалоговыйУчетСрезПоследних.ПорядокРасчетаДоходаВОСМС КАК ПорядокРасчетаДоходаВОСМС,
	|	УчетнаяПолитикаНалоговыйУчетСрезПоследних.НеПрименятьКорректировкуПрочихНалоговВзносовОтчислений КАК НеПрименятьКорректировкуПрочихНалоговВзносовОтчислений,
	|	УчетнаяПолитикаНалоговыйУчетСрезПоследних.ПрименятьВычетВОСМСДляФизическихЛицИГПХ КАК ПрименятьВычетВОСМСДляФизическихЛицИГПХ,
	|	УчетнаяПолитикаНалоговыйУчетСрезПоследних.СтавкаОПВдляИП КАК СтавкаОПВдляИП,
	|	УчетнаяПолитикаНалоговыйУчетСрезПоследних.СтавкаСОДляИП КАК СтавкаСОДляИП,
	|	УчетнаяПолитикаНалоговыйУчетСрезПоследних.ПрименятьВычетОПВиВОСМСДляГПХ КАК ПрименятьВычетОПВиВОСМСДляГПХ,
	|	УчетнаяПолитикаНалоговыйУчетСрезПоследних.ПорядокОбложенияДоходовРаботников КАК ПорядокОбложенияДоходовРаботников,
	|	УчетнаяПолитикаНалоговыйУчетСрезПоследних.СуммаЗаявленногоДоходаИП КАК СуммаЗаявленногоДоходаИП,
	|	ЕСТЬNULL(РегламентированныеРасчетныеПоказателиСрезПоследних.РазмерМЗП, 0) КАК РазмерМЗП
	|ИЗ
	|	РегистрСведений.УчетнаяПолитикаНалоговыйУчет.СрезПоследних(&парамПериод, ) КАК УчетнаяПолитикаНалоговыйУчетСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныеРасчетныеПоказатели.СрезПоследних(&парамПериод, ) КАК РегламентированныеРасчетныеПоказателиСрезПоследних
	|		ПО (ИСТИНА)
	|ГДЕ
	|	УчетнаяПолитикаНалоговыйУчетСрезПоследних.Организация.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ФизЛицо)
	|	И УчетнаяПолитикаНалоговыйУчетСрезПоследних.ЕжемесячныйРасчетВзносовИОтчисленийЗаИП
	|	И УчетнаяПолитикаНалоговыйУчетСрезПоследних.СуммаЗаявленногоДоходаИП = 0";
	
	Запрос.УстановитьПараметр("парамПериод", ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьДатуВводаЗаявленногоДоходаИП());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НаборЗаписей = РегистрыСведений.УчетнаяПолитикаНалоговыйУчет.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Организация.Значение   = Выборка.Организация;
		НаборЗаписей.Отбор.Организация.Использование = Истина;
		НаборЗаписей.Отбор.Период.Значение    = Выборка.Период;
		НаборЗаписей.Отбор.Период.Использование   = Истина;
		
		Запись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, Выборка);
		
		Если Выборка.ПорядокРасчетаДоходаОПВ = Перечисления.ПорядокРасчетаДоходовЗаИП.КратноМЗП Тогда
			РазмерДоходаОПВ   = Выборка.РазмерДоходаОПВ * Выборка.РазмерМЗП;
		Иначе
			РазмерДоходаОПВ   = Выборка.РазмерДоходаОПВ;
		КонецЕсли;
		
		Если Выборка.ПорядокРасчетаДоходаСО  = Перечисления.ПорядокРасчетаДоходовЗаИП.КратноМЗП Тогда
			РазмерДоходаСО    = Выборка.РазмерДоходаСО * Выборка.РазмерМЗП;
		Иначе
			РазмерДоходаСО    = Выборка.РазмерДоходаСО;
		КонецЕсли;
	
		//Если Выборка.ПорядокРасчетаДоходаВОСМС  = Перечисления.ПорядокРасчетаДоходовЗаИП.КратноМЗП Тогда
		//	РазмерДоходаВОСМС = Выборка.РазмерДоходаВОСМС * Выборка.РазмерМЗП;
		//Иначе
		//	РазмерДоходаВОСМС = Выборка.РазмерДоходаВОСМС;
		//КонецЕсли;
		
		Запись.СуммаЗаявленногоДоходаИП = Макс(РазмерДоходаОПВ, РазмерДоходаСО);
		
		Запись.РазмерДоходаОПВ   = 0;
		Запись.РазмерДоходаСО    = 0;
		Запись.РазмерДоходаВОСМС = 0;
	
		Попытка
			НаборЗаписей.Записать();
		Исключение
			ТекстСообщения = НСтр("ru='Операция не выполнена'", ОбщегоНазначения.КодОсновногоЯзыка());
			ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьНастройкиОтчетов3049(Параметры) Экспорт
	
	ПеренестиНастройкиОтчета("Отчет.ДвижениеТоваров"       , "Основной"               , "ДвижениеТоваров");
	ПеренестиНастройкиОтчета("Отчет.ОборачиваемостьТоваров", "ОборачиваеомостьТоваров", "ОборачиваемостьТоваров");
	
КонецПроцедуры

// Переносит пользовательские настройки отчета при изменении имени варианта в схеме компоновки
//
Процедура ПеренестиНастройкиОтчета(Знач ИмяОтчета, Знач СтарыйКлючВарианта, Знач НовыйКлючВарианта)
	
	// сохраненные настройки
	СтарыйКлючОбъекта = ИмяОтчета + "/" + СтарыйКлючВарианта;
	НовыйКлючОбъекта  = ИмяОтчета + "/" + НовыйКлючВарианта;
	
	НастройкиОтчетов = Новый ТаблицаЗначений;
	НастройкиОтчетов.Колонки.Добавить("КлючНастроек");
	НастройкиОтчетов.Колонки.Добавить("ОписаниеНастроек");
	НастройкиОтчетов.Колонки.Добавить("Пользователь");
	НастройкиОтчетов.Колонки.Добавить("Настройки");
	
	Выборка = ХранилищеПользовательскихНастроекОтчетов.Выбрать(Новый Структура("КлючОбъекта", СтарыйКлючОбъекта));
	Пока Выборка.Следующий() Цикл
		ОписаниеНастроек = Новый ОписаниеНастроек; // хранит представление настройки после загрузки из хранилища
		НоваяСтрока = НастройкиОтчетов.Добавить();
		НоваяСтрока.КлючНастроек     = Выборка.КлючНастроек;
		НоваяСтрока.Настройки        = ХранилищеПользовательскихНастроекОтчетов.Загрузить(СтарыйКлючОбъекта, Выборка.КлючНастроек, ОписаниеНастроек, Выборка.Пользователь);
		НоваяСтрока.ОписаниеНастроек = ОписаниеНастроек;
		НоваяСтрока.Пользователь     = Выборка.Пользователь;
	КонецЦикла;
	
	Если НастройкиОтчетов.Количество() > 0 Тогда
		УстановитьПривилегированныйРежим(Истина);
		Для Каждого СтрокаНастроекОтчетов Из НастройкиОтчетов Цикл
			Попытка
				ХранилищеПользовательскихНастроекОтчетов.Удалить(
					СтарыйКлючОбъекта,
					СтрокаНастроекОтчетов.КлючНастроек,
					СтрокаНастроекОтчетов.Пользователь);
				ХранилищеПользовательскихНастроекОтчетов.Сохранить(
					НовыйКлючОбъекта,
					СтрокаНастроекОтчетов.КлючНастроек,
					СтрокаНастроекОтчетов.Настройки,
					СтрокаНастроекОтчетов.ОписаниеНастроек,
					СтрокаНастроекОтчетов.Пользователь);
			Исключение
				ТекстСообщения = СтрШаблон(НСтр("ru='Настройки отчета %1 не обновлены!'", ОбщегоНазначения.КодОсновногоЯзыка()), ИмяОтчета);
				ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
		КонецЦикла;
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	// текущие настройки
	НастройкиОтчетов.Очистить();
	НастройкиОтчетов.Колонки["ОписаниеНастроек"].Имя = "СтарыйКлючОбъекта";
	НастройкиОтчетов.Колонки["КлючНастроек"].Имя     = "НовыйКлючОбъекта";
	
	СтарыйКлючОбъекта = ИмяОтчета + "/" + СтарыйКлючВарианта + "/КлючТекущихПользовательскихНастроек";
	НовыйКлючОбъекта  = ИмяОтчета + "/" + НовыйКлючВарианта  + "/КлючТекущихПользовательскихНастроек";
	
	Выборка = ХранилищеСистемныхНастроек.Выбрать(Новый Структура("КлючОбъекта", СтарыйКлючОбъекта));
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = НастройкиОтчетов.Добавить();
		НоваяСтрока.СтарыйКлючОбъекта = СтарыйКлючОбъекта;
		НоваяСтрока.НовыйКлючОбъекта  = НовыйКлючОбъекта;
		НоваяСтрока.Настройки         = ХранилищеСистемныхНастроек.Загрузить(Выборка.КлючОбъекта, , , Выборка.Пользователь);
		НоваяСтрока.Пользователь      = Выборка.Пользователь;
	КонецЦикла;
	
	СтарыйКлючОбъекта = ИмяОтчета + "/" + СтарыйКлючВарианта + "/ТекущиеПользовательскиеНастройки";
	НовыйКлючОбъекта  = ИмяОтчета + "/" + НовыйКлючВарианта  + "/ТекущиеПользовательскиеНастройки";
	
	Выборка = ХранилищеСистемныхНастроек.Выбрать(Новый Структура("КлючОбъекта", СтарыйКлючОбъекта));
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = НастройкиОтчетов.Добавить();
		НоваяСтрока.СтарыйКлючОбъекта = СтарыйКлючОбъекта;
		НоваяСтрока.НовыйКлючОбъекта  = НовыйКлючОбъекта;
		НоваяСтрока.Настройки         = ХранилищеСистемныхНастроек.Загрузить(Выборка.КлючОбъекта, , , Выборка.Пользователь);
		НоваяСтрока.Пользователь      = Выборка.Пользователь;
	КонецЦикла;
	
	Если НастройкиОтчетов.Количество() > 0 Тогда
		УстановитьПривилегированныйРежим(Истина);
		Для Каждого СтрокаНастроекОтчетов Из НастройкиОтчетов Цикл
			Попытка
				ХранилищеСистемныхНастроек.Удалить(
					СтрокаНастроекОтчетов.СтарыйКлючОбъекта, ,
					СтрокаНастроекОтчетов.Пользователь);
				ХранилищеСистемныхНастроек.Сохранить(
					СтрокаНастроекОтчетов.НовыйКлючОбъекта, ,
					СтрокаНастроекОтчетов.Настройки, ,
					СтрокаНастроекОтчетов.Пользователь);
			Исключение
				ТекстСообщения = СтрШаблон(НСтр("ru='Настройки отчета %1 не обновлены!'", ОбщегоНазначения.КодОсновногоЯзыка()), ИмяОтчета);
				ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
		КонецЦикла;
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеНа_3_0_51

Процедура ДобавитьСтавкиРозничногоНалога() Экспорт
	
	НайтиСоздатьСтавкуРозничногоНалога("4%", 4);
	НайтиСоздатьСтавкуРозничногоНалога("8%", 8);
	
	СтавкаПоУмолчанию = 8; // 8%
	ДобавитьСведенияОСтавкеРозничногоНалога(СтавкаПоУмолчанию);
	
КонецПроцедуры

#КонецОбласти 

#Область ОбновлениеНа_3_0_53

Процедура ОбновитьСведенияОСтавкахИДоляхЕП2024() Экспорт
	
	НаборЗаписей = РегистрыСведений.СведенияОСтавкахНалоговСборовОтчислений.СоздатьНаборЗаписей();
	
	ПустаяОрганизация = Справочники.Организации.ПустаяСсылка();
    ВидНалогаЕП       = Справочники.НалогиСборыОтчисления.ЕдиныйПлатеж;
	
	НаборЗаписей.Отбор.Налогоплательщик.Установить(ПустаяОрганизация, Истина);
	НаборЗаписей.Отбор.ВидНалога.Установить(ВидНалогаЕП, Истина);
	НаборЗаписей.Отбор.Период.Установить('20240101', Истина);
	
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() = 0 Тогда
			
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Налогоплательщик = ПустаяОрганизация;
		НоваяЗапись.ВидНалога        = ВидНалогаЕП;
		НоваяЗапись.Период           = '20240101';
		НоваяЗапись.Ставка           = 21.5;
		
		Попытка
			НаборЗаписей.Записать(Истина);
		Исключение
			ТекстСообщения = НСтр("ru='Операция не выполнена'", ОбщегоНазначения.КодОсновногоЯзыка());
			ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
			
	КонецЕсли;
	
	РегистрыСведений.СведенияОДоляхЕП.ЗаполнитьСведенияОДоляхЕП();
	
КонецПроцедуры

#КонецОбласти 

#Область ОбновлениеНа_НГ

Процедура ДобавитьСведенияОСтавкеРефинансированияНБДляРасчетаПени2024() Экспорт
	
	НаборЗаписей = РегистрыСведений.КоэффициентыСтавкиРефинансированияНБДляРасчетаПени.СоздатьНаборЗаписей();
	
	НаборЗаписей.Отбор.Организация.Установить(Справочники.Организации.ПустаяСсылка(), Истина);
	
	// ОПВР
	НаборЗаписей.Отбор.ВидНалога.Установить(Справочники.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносыРаботодателя, Истина);
	НаборЗаписей.Отбор.Период.Установить('20240101', Истина);
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() = 0 Тогда
		
		Движение 			 = НаборЗаписей.Добавить();
		// Свойства
		Движение.Период 	 = '20240101'; // 01.01.2024
		// Измерения
		Движение.Организация = Справочники.Организации.ПустаяСсылка();
		Движение.ВидНалога	 = Справочники.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносыРаботодателя;
		// Ресурсы
		Движение.Коэффициент = 1.25;
		
		Попытка
			НаборЗаписей.ОбменДанными.Загрузка = Истина;
			НаборЗаписей.Записать();
		Исключение
			
		КонецПопытки;
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьНалогиСборыОтчисленияОПВР()
	
	КодЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	
	Если ПланыОбмена.ГлавныйУзел() = Неопределено Тогда // В подчиненных узлах РИБ не выполняется                                           
		
		СправочникОбъект = Справочники.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносыРаботодателя.ПолучитьОбъект();
		СправочникОбъект.КодБК 							  = "";
		СправочникОбъект.КодНазначенияПлатежа 			  = "089";
		СправочникОбъект.СчетУчетаРасчетовСКонтрагентомБУ = ПланыСчетов.Типовой.ОбязательстваПоПенсионнымОтчислениям;
		СправочникОбъект.СчетУчетаРасчетовСКонтрагентомНУ = ПланыСчетов.Налоговый.ОбязательстваПоПенсионнымОтчислениям;
		СправочникОбъект.НазначениеПлатежа 				  = НСтр("ru = 'Обязательные пенсионные взносы работодателя за '", КодЯзыка);
		Попытка
			СправочникОбъект.Записать();
		Исключение
			ТекстСообщения = НСтр("ru='Операция не выполнена'", КодЯзыка);
			ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;	
		
	КонецЕсли;
	
	// Сроки перечисления налогов, сборов, отчислений
	НаборЗаписейПроверка = РегистрыСведений.СрокиПеречисленияНалоговСборовОтчислений.СоздатьНаборЗаписей();
	
	НаборЗаписейПроверка.Отбор.ВидНалога.Использование = Истина;
	НаборЗаписейПроверка.Отбор.ВидНалога.Значение	   = Справочники.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносыРаботодателя;
	НаборЗаписейПроверка.Прочитать();
	ЕстьЗаписиОПВР = (НаборЗаписейПроверка.Количество() > 0);
	
	Если ЕстьЗаписиОПВР Тогда
		// Переход с версии 2.0, где уже были автоматизированы ОПВР
		Возврат;
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.СрокиПеречисленияНалоговСборовОтчислений.СоздатьНаборЗаписей();
	
	НаборЗаписей.Отбор.Организация.Использование = Истина;
	НаборЗаписей.Отбор.Организация.ВидСравнения	 = ВидСравнения.Равно;
	НаборЗаписей.Отбор.Организация.Значение	 	 = Справочники.Организации.ПустаяСсылка();

	ДлинаСуток = 86400;
	ТекМесяц = '20240101';	
	ДатаОкончания = НачалоМесяца(КонецГода(ТекМесяц));
	
	Пока ТекМесяц <= ДатаОкончания Цикл
		
		// ОПВР
		Если ТекМесяц >= '20240101' Тогда
			// до 25 числа месяца, следующего за месяцем исчисления
			Движение = НаборЗаписей.Добавить();
			// Измерения
			Движение.Месяц 		 = ТекМесяц;
			Движение.Организация = Справочники.Организации.ПустаяСсылка();
			Движение.ВидНалога	 = Справочники.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносыРаботодателя;
			// Ресурсы
			Движение.ПорядокОпределенияСрокаПеречисления = Перечисления.ПорядокОпределенияСрокаПеречисления.ПоМесяцуНалоговогоПериода;
			Движение.СрокПеречисления					 = ДобавитьМесяц(ТекМесяц, 1) + (25-1) * ДлинаСуток;
		//Иначе - до января 2024 отчисления ОПВР вообще не исчислялись
		КонецЕсли;		
		
		ТекМесяц = ДобавитьМесяц(ТекМесяц, 1);
	КонецЦикла;

	Попытка
		НаборЗаписей.Записать(Ложь);
	Исключение
		ТекстСообщения = НСтр("ru='Операция не выполнена'", КодЯзыка);
		ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
			
КонецПроцедуры

Процедура ЗаполнитьНастройкиОПВРДляНачислений()
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда
		Возврат;
	КонецЕсли;
			
	Облагается			   = Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЦеликом;
	НеОблагается		   = Справочники.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ОсновныеНачисленияОрганизаций.Ссылка,
	               |	ОсновныеНачисленияОрганизаций.Предопределенный,
	               |	ОсновныеНачисленияОрганизаций.ИмяПредопределенныхДанных
	               |ИЗ
	               |	ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК ОсновныеНачисленияОрганизаций
	               |ГДЕ
	               |	ОсновныеНачисленияОрганизаций.ОблагаетсяОПВР = ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.ПустаяСсылка)";
				   
				   
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НачислениеОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		Если Выборка.Предопределенный Тогда
			Если Выборка.ИмяПредопределенныхДанных = "ОкладПоДням" 
				ИЛИ Выборка.ИмяПредопределенныхДанных = "ОкладПоЧасам" 
				ИЛИ Выборка.ИмяПредопределенныхДанных = "ОкладОтОбратного" 
				ИЛИ Выборка.ИмяПредопределенныхДанных = "ОкладОтОбратногоПоДням" 
				ИЛИ Выборка.ИмяПредопределенныхДанных = "ОкладОтОбратногоПоЧасам" 
				ИЛИ Выборка.ИмяПредопределенныхДанных = "ТарифЧасовой" 
				ИЛИ Выборка.ИмяПредопределенныхДанных = "ОплатаПоСреднемуБЛ" 
				ИЛИ Выборка.ИмяПредопределенныхДанных = "ОплатаПоСреднемуОтп" 
				ИЛИ Выборка.ИмяПредопределенныхДанных = "КомпенсацияОтпуска" 
				ИЛИ Выборка.ИмяПредопределенныхДанных = "КомпенсацияОтпускаБезУвольнения" Тогда
				
				НачислениеОбъект.ОблагаетсяОПВР = Облагается;
				
			ИначеЕсли Выборка.ИмяПредопределенныхДанных = "КомпенсационныеВыплатыПриСлужебныхКомандировках" 
				ИЛИ Выборка.ИмяПредопределенныхДанных = "ПрочиеДоходыОблагаемыеУИсточника" 
				ИЛИ Выборка.ИмяПредопределенныхДанных = "ДоходыНеОблагаемыеУИсточникаВыплаты" Тогда
				
				НачислениеОбъект.ОблагаетсяОПВР = НеОблагается;
				
			КонецЕсли;
			
		Иначе
			НачислениеОбъект.ОблагаетсяОПВР = Облагается;
		КонецЕсли;
		
		Попытка
			НачислениеОбъект.Записать();	
		Исключение
			ТекстСообщения = НСтр("ru = 'Операция не выполнена'", ОбщегоНазначения.КодОсновногоЯзыка());
			ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьНастройкиОтраженияОПВР()
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда // В подчиненных узлах РИБ не выполняется
		Возврат;
	КонецЕсли;

	// Статьи затрат
	СтатьяЗатрат = Справочники.СтатьиЗатрат.ПеняПоОПВР.ПолучитьОбъект();
	СтатьяЗатрат.КатегорияЗатрат   		  = Перечисления.КатегорииЗатрат.ПрочиеРасходы;
	СтатьяЗатрат.ПринятиеКНалоговомуУчету =	Истина;
	СтатьяЗатрат.ВидРасходовНУ			  =	Справочники.ВидыРасходовНУ.ПрочиеРасходыНаВычет;
	Попытка
		СтатьяЗатрат.Записать();
	Исключение
		ТекстСообщения = НСтр("ru = 'Операция не выполнена'", ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	СтатьяЗатрат = Справочники.СтатьиЗатрат.ОбязательныеПенсионныеВзносыРаботодателя.ПолучитьОбъект();
	СтатьяЗатрат.КатегорияЗатрат   		  = Перечисления.КатегорииЗатрат.ПрочиеРасходы;
	СтатьяЗатрат.ПринятиеКНалоговомуУчету =	Истина;
	СтатьяЗатрат.ВидРасходовНУ			  =	Справочники.ВидыРасходовНУ.ПрочиеРасходыНаВычет;
	Попытка
		СтатьяЗатрат.Записать();
	Исключение
		ТекстСообщения = НСтр("ru = 'Операция не выполнена'", ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
КонецПроцедуры

Процедура ВыполнитьНастройкиПоОПВР() Экспорт
	
	// ставки ОПВР 
    НаборЗаписей = РегистрыСведений.СведенияОСтавкахНалоговСборовОтчислений.СоздатьНаборЗаписей();
	НаборЗаписей.ОбменДанными.Загрузка = Истина;
	
	ПустаяОрганизация = Справочники.Организации.ПустаяСсылка();
    ВидОПВР = Справочники.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносыРаботодателя;
	
	НаборЗаписей.Отбор.Налогоплательщик.Установить(ПустаяОрганизация, Истина);
	НаборЗаписей.Отбор.ВидДохода.Установить(ВидОПВР, Истина);
	НаборЗаписей.Отбор.Период.Установить('20240101', Истина);
	
	Если НаборЗаписей.Количество() = 0 Тогда
		
    	ДобавитьЗначенияСтавокНалоговВзносовОтчислений(НаборЗаписей, '20240101', ПустаяОрганизация, ВидОПВР, 1.5);
		
		Попытка
			НаборЗаписей.ОбменДанными.Загрузка = Истина;
			НаборЗаписей.Записать();
		Исключение
			
		КонецПопытки;
		
	КонецЕсли;
	
	ЗаполнитьНалогиСборыОтчисленияОПВР();
	ЗаполнитьНастройкиОПВРДляНачислений();
	ЗаполнитьНастройкиОтраженияОПВР();
	РегистрыСведений.КоэффициентыСтавкиРефинансированияНБДляРасчетаПени.ЗаполнитьКоэффициентыДляОПВР();
	
	//добавлены новые налоги, статьи затрат, нужно скорректировать коды у элементов справочника
	УстановитьНовыеКодыНеПредопределеннымЭлементамСправочника("НалогиСборыОтчисления");	
	УстановитьНовыеКодыНеПредопределеннымЭлементамСправочника("СтатьиЗатрат");
	
	// изменения по вариантам отчетов по ОПВР аналогично ООСМС
	ОбновитьНастройкиОтчетовОСМС();
	
КонецПроцедуры

Процедура УстановитьМЗПМРП2024Год() Экспорт
	
	НаборЗаписей = РегистрыСведений.РегламентированныеРасчетныеПоказатели.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Период.Установить('20240101', Истина);		
	ДобавитьЗначенияРасчетныхПоказателей(НаборЗаписей, Дата("20240101"), 85000, 3692, 882*3692, 882*3692, 85000, 3692, 3692);
	
	Попытка
		НаборЗаписей.Записать();
	Исключение
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеНа_3_0_54

Процедура ПроверитьУстановитьСтавкуОПВР() Экспорт
	
    НаборЗаписей = РегистрыСведений.СведенияОСтавкахНалоговСборовОтчислений.СоздатьНаборЗаписей();
	
	ПустаяОрганизация = Справочники.Организации.ПустаяСсылка();
    ВидОПВР = Справочники.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносыРаботодателя;
	
	НаборЗаписей.Отбор.Налогоплательщик.Установить(ПустаяОрганизация, Истина);
	НаборЗаписей.Отбор.ВидНалога.Установить(ВидОПВР, Истина);
	НаборЗаписей.Отбор.Период.Установить('20240101', Истина);
	
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() = 0 Тогда
		
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Период 			 = '20240101';
		НоваяЗапись.Налогоплательщик = ПустаяОрганизация;
		НоваяЗапись.ВидНалога		 = ВидОПВР;
		НоваяЗапись.Ставка			 = 1.5;
		
		Попытка
			НаборЗаписей.ОбменДанными.Загрузка = Истина;
			НаборЗаписей.Записать();
		Исключение
			
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

#Область ОбновлениеНа_3_0_55

Процедура ЗаполнитьСоответствиеНовыхСчетовНДСВБУ() Экспорт
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда // В подчиненных узлах РИБ не выполняется
		Возврат;
	КонецЕсли;
	
	КодЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	
	//3132
	СчетБУ3132 = ПланыСчетов.Типовой.НалогНаДобавленнуюСтоимостьОтложенный;
	СчетНУ3132 = ПланыСчетов.Налоговый.НалогНаДобавленнуюСтоимостьОтложенный;
		
	ОбъектСчетБУ = СчетБУ3132.ПолучитьОбъект();
	ОбъектСчетБУ.СчетНУ = СчетНУ3132;
	
	Попытка
		ОбъектСчетБУ.Записать();
	Исключение
		ТекстСообщения = НСтр("ru='Операция не выполнена'", КодЯзыка);
		ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;	
	
	//3130
	СчетБУ3130 = ПланыСчетов.Типовой.НалогНаДобавленнуюСтоимость_;
	СчетНУ3130 = ПланыСчетов.Налоговый.НалогНаДобавленнуюСтоимость_;
		
	ОбъектСчетБУ = СчетБУ3130.ПолучитьОбъект();
	ОбъектСчетБУ.СчетНУ = СчетНУ3130;
	
	Попытка
		ОбъектСчетБУ.Записать();
	Исключение
		ТекстСообщения = НСтр("ru='Операция не выполнена'", КодЯзыка);
		ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	//3130
	ИзмененныйСчетБУ = ПланыСчетов.Типовой.НалогНаДобавленнуюСтоимость_;
		
	ОбъектИзмененныйСчетБУ = ИзмененныйСчетБУ.ПолучитьОбъект();
	ОбъектИзмененныйСчетБУ.ЗапретитьИспользоватьВПроводках = Истина;
	
	Попытка
		ОбъектИзмененныйСчетБУ.Записать();
	Исключение
		ТекстСообщения = НСтр("ru='Операция не выполнена'", КодЯзыка);
		ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;	

	ИзмененныйСчетНУ = ПланыСчетов.Налоговый.НалогНаДобавленнуюСтоимость_;
		
	ОбъектИзмененныйСчетНУ = ИзмененныйСчетНУ.ПолучитьОбъект();
	ОбъектИзмененныйСчетНУ.ЗапретитьИспользоватьВПроводках = Истина;
	
	Попытка
		ОбъектИзмененныйСчетНУ.Записать();
	Исключение
		ТекстСообщения = НСтр("ru='Операция не выполнена'", КодЯзыка);
		ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;	
	
КонецПроцедуры 

#КонецОбласти  

#Область ОбновлениеНа_3_0_56

Процедура ЗаполнитьСоответствиеНовыхСчетовПрочихВыплатВБУ() Экспорт
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда // В подчиненных узлах РИБ не выполняется
		Возврат;
	КонецЕсли;
	
	//3233
	СчетБУ3233 = ПланыСчетов.Типовой.ОбязательстваПоПрочимВыплатамФизическимЛицам;
	СчетНУ3233 = ПланыСчетов.Налоговый.ОбязательстваПоПрочимВыплатамФизическимЛицам;
		
	ОбъектСчетБУ = СчетБУ3233.ПолучитьОбъект();
	ОбъектСчетБУ.СчетНУ = СчетНУ3233;
	
	Попытка
		ОбъектСчетБУ.Записать();
	Исключение
		ТекстСообщения = НСтр("ru='Операция не выполнена'", ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;		
	
КонецПроцедуры 

Процедура ОбновитьДополнительныйПрофильДоступа() Экспорт
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда // В подчиненных узлах РИБ не выполняется
		Возврат;
	КонецЕсли;
	
	// Обрабатывается элемент "Дополнительные профили"
	ИдентификаторДляОбработки = Новый УникальныйИдентификатор("69a066e7-ce81-11eb-881c-b06ebfbf08c7");
	ПрофильДляОбработкиСсылка = Справочники.ПрофилиГруппДоступа.НайтиПоРеквизиту("ИдентификаторПоставляемыхДанных", ИдентификаторДляОбработки);
	
	Если ЗначениеЗаполнено(ПрофильДляОбработкиСсылка) И НЕ ПрофильДляОбработкиСсылка.ЭтоГруппа Тогда
		
		ОтменитьТранзакцию = Ложь;
		НачатьТранзакцию();
		
		Попытка
			ПрофильДляОбработкиОбъект = ПрофильДляОбработкиСсылка.ПолучитьОбъект();
			ПрофильДляОбработкиОбъект.ИдентификаторПоставляемыхДанных = "00000000-0000-0000-0000-000000000000";
			ПрофильДляОбработкиОбъект.Наименование = НСтр("ru = '(Не использовать) '", ОбщегоНазначения.КодОсновногоЯзыка()) + ПрофильДляОбработкиОбъект.Наименование;
			ПрофильДляОбработкиОбъект.ОбменДанными.Загрузка = Истина;
			ПрофильДляОбработкиОбъект.Записать();
		Исключение
			ОтменитьТранзакцию = Истина;
			ТекстСообщения = НСтр("ru='Операция не выполнена'", ОбщегоНазначения.КодОсновногоЯзыка());
			ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;		
		
		Если НЕ ОтменитьТранзакцию Тогда
			Попытка
				ПрофильГруппаНовыйОбъект              = Справочники.ПрофилиГруппДоступа.СоздатьГруппу();
				ПрофильГруппаНовыйОбъект.Наименование = НСтр("ru = 'Дополнительные профили'", ОбщегоНазначения.КодОсновногоЯзыка());
				ПрофильГруппаНовыйОбъект.ИдентификаторПоставляемыхДанных = ИдентификаторДляОбработки;
				ПрофильГруппаНовыйОбъект.ОбменДанными.Загрузка = Истина;
				ПрофильГруппаНовыйОбъект.Записать();
				ПрофильГруппаНовыйСсылка = ПрофильГруппаНовыйОбъект.Ссылка;
			Исключение
				ОтменитьТранзакцию = Истина;
				ПрофильГруппаНовыйСсылка = Справочники.ПрофилиГруппДоступа.ПустаяСсылка();
				ТекстСообщения = НСтр("ru='Операция не выполнена'",ОбщегоНазначения.КодОсновногоЯзыка());
				ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
		КонецЕсли;
		
		Если НЕ ОтменитьТранзакцию Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	ПрофилиГруппДоступа.Ссылка КАК Ссылка
				|ИЗ
				|	Справочник.ПрофилиГруппДоступа КАК ПрофилиГруппДоступа
				|ГДЕ
				|	ПрофилиГруппДоступа.Родитель = &ПрофильДляОбработки";
			
			Запрос.УстановитьПараметр("ПрофильДляОбработки", ПрофильДляОбработкиСсылка);
			
			РезультатЗапроса = Запрос.Выполнить();
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				Попытка
					ПрофильОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
					ПрофильОбъект.Родитель = ПрофильГруппаНовыйСсылка;
					ПрофильОбъект.ОбменДанными.Загрузка = Истина;
					ПрофильОбъект.Записать();
				Исключение
					ОтменитьТранзакцию = Истина;
					ТекстСообщения = НСтр("ru='Операция не выполнена'", ОбщегоНазначения.КодОсновногоЯзыка());
					ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				КонецПопытки;
			КонецЦикла;
		КонецЕсли;
		
		Если НЕ ОтменитьТранзакцию Тогда
			ЗафиксироватьТранзакцию();
		Иначе
			Если ТранзакцияАктивна() Тогда
				ОтменитьТранзакцию();
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;
		
КонецПроцедуры 

Процедура ОбновитьПараметрыНаборовСвойствПрочиеВыплатыЕП() Экспорт
	
	// Использование
	ПараметрыНабора = УправлениеСвойствами.СтруктураПараметровНабораСвойств(); 
	// Наименование
	ПараметрыНабора.Вставить("Наименование", "");
	
	// Обновление параметров для документа РегистрацияПрочихВыплат	
	ПараметрыНабора.Наименование = УправлениеСвойствамиСлужебный.НаименованиеПредопределенногоНабора(Справочники.НаборыДополнительныхРеквизитовИСведений.Документ_РегистрацияПрочихВыплат);
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_РегистрацияПрочихВыплат", ПараметрыНабора);
	
	// Обновление параметров для документа ВедомостьНаПеречислениеПрочихВыплат
	ПараметрыНабора.Наименование = УправлениеСвойствамиСлужебный.НаименованиеПредопределенногоНабора(Справочники.НаборыДополнительныхРеквизитовИСведений.Документ_ВедомостьНаПеречислениеПрочихВыплат);
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_ВедомостьНаПеречислениеПрочихВыплат", ПараметрыНабора);  
	
	// Обновление параметров для документа ВедомостьНаВозвратПрочихВыплат 
	ПараметрыНабора.Наименование = УправлениеСвойствамиСлужебный.НаименованиеПредопределенногоНабора(Справочники.НаборыДополнительныхРеквизитовИСведений.Документ_ВедомостьНаВозвратПрочихВыплат);
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_ВедомостьНаВозвратПрочихВыплат", ПараметрыНабора);
	
	// Обновление наименования для документов по ЕП (ранее обновлялся только признак Используется)
	// Обновление параметров для документа РасчетЕдиногоПлатежа 
	ПараметрыНабора.Наименование = УправлениеСвойствамиСлужебный.НаименованиеПредопределенногоНабора(Справочники.НаборыДополнительныхРеквизитовИСведений.Документ_РасчетЕдиногоПлатежа);
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_РасчетЕдиногоПлатежа", ПараметрыНабора);

	// Обновление параметров для документа ЕППеречислениеВФонды 
	ПараметрыНабора.Наименование = УправлениеСвойствамиСлужебный.НаименованиеПредопределенногоНабора(Справочники.НаборыДополнительныхРеквизитовИСведений.Документ_ЕППеречислениеВФонды);
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_ЕППеречислениеВФонды", ПараметрыНабора);

	// Обновление параметров для документа ЕПВозвратПлатежа 
	ПараметрыНабора.Наименование = УправлениеСвойствамиСлужебный.НаименованиеПредопределенногоНабора(Справочники.НаборыДополнительныхРеквизитовИСведений.Документ_ЕПВозвратПлатежа);
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_ЕПВозвратПлатежа", ПараметрыНабора);

КонецПроцедуры

#КонецОбласти   

#Область ОбновлениеНа_3_0_57

Процедура УстановитьОтображениеДополнительныхКолонокВСписках() Экспорт
	
	Константы.ОтображатьСтатусыВСчетахНаОплату.Установить(Истина);
	
КонецПроцедуры 

Процедура ОбновитьПараметрыНаборовСвойствСчетНаОплатуПоставщика() Экспорт
	
	// Использование
	ПараметрыНабора = УправлениеСвойствами.СтруктураПараметровНабораСвойств(); 
	// Наименование
	ПараметрыНабора.Вставить("Наименование", "");
	
	// Обновление параметров для документа СчетНаОплатуПоставщика	
	ПараметрыНабора.Наименование = УправлениеСвойствамиСлужебный.НаименованиеПредопределенногоНабора(Справочники.НаборыДополнительныхРеквизитовИСведений.Документ_СчетНаОплатуПоставщика);
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_СчетНаОплатуПоставщика", ПараметрыНабора);
	
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеНа_3_0_60

Процедура ОбновитьПараметрыНаборовСвойствВедомостьПрочихДоходов() Экспорт
	
	// Использование
	ПараметрыНабора = УправлениеСвойствами.СтруктураПараметровНабораСвойств(); 
	// Наименование
	ПараметрыНабора.Вставить("Наименование", "");
	
	// Обновление параметров для документа СчетНаОплатуПоставщика	
	ПараметрыНабора.Наименование = УправлениеСвойствамиСлужебный.НаименованиеПредопределенногоНабора(Справочники.НаборыДополнительныхРеквизитовИСведений.Документ_ВедомостьПрочихДоходов);
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_ВедомостьПрочихДоходов", ПараметрыНабора);
	
КонецПроцедуры

Процедура ОбновитьКодыКатегорийЗемель(Параметры) Экспорт
	
	СписокУстаревшихКодов = Новый СписокЗначений;
	СписокУстаревшихКодов.Добавить("ЗНП-ЖФ");
	СписокУстаревшихКодов.Добавить("ЗНП");
	СписокУстаревшихКодов.Добавить("ЗНП-ПУ");
	СписокУстаревшихКодов.Добавить("ЗСХ-1");
	СписокУстаревшихКодов.Добавить("ЗСХ-2");
	СписокУстаревшихКодов.Добавить("ЗП");
	СписокУстаревшихКодов.Добавить("ЗП-НП");
	СписокУстаревшихКодов.Добавить("ЗЛФ-СХ-1");
	СписокУстаревшихКодов.Добавить("ЗЛФ-СХ-2");
	СписокУстаревшихКодов.Добавить("ЗЛФ");
	СписокУстаревшихКодов.Добавить("ЗВФ-СХ-1");
	СписокУстаревшихКодов.Добавить("ЗВФ-СХ-2"); 
	СписокУстаревшихКодов.Добавить("ЗВФ");
	СписокУстаревшихКодов.Добавить("ЗООПТ-СХ-1");
	СписокУстаревшихКодов.Добавить("ЗООПТ-СХ-2");
    СписокУстаревшихКодов.Добавить("ЗООПТ");
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КатегорииЗемель.Ссылка
		|ИЗ
		|	Справочник.КатегорииЗемель КАК КатегорииЗемель
		|ГДЕ
		|	КатегорииЗемель.КодПоКлассификатору В (&СписокУстаревшихКодов)";
	
	Запрос.УстановитьПараметр("СписокУстаревшихКодов", СписокУстаревшихКодов);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаЭлементов = РезультатЗапроса.Выбрать();  
	
	ПроблемныхОбъектов = 0;
	ОбъектовОбработано = 0;

	Пока ВыборкаЭлементов.Следующий() Цикл
			
		СправочникОбъект = ВыборкаЭлементов.Ссылка.ПолучитьОбъект();  
		УстаревшийКодКатегории = СправочникОбъект.КодПоКлассификатору;		
		НовыйКодКатегории = "";
		
		Если УстаревшийКодКатегории = "ЗНП-ЖФ" ИЛИ УстаревшийКодКатегории = "ЗНП" ИЛИ УстаревшийКодКатегории = "ЗНП-ПУ" Тогда
			
			НовыйКодКатегории = "A";
			
		ИначеЕсли УстаревшийКодКатегории = "ЗСХ-1" ИЛИ УстаревшийКодКатегории = "ЗСХ-2" Тогда
			
			НовыйКодКатегории = "B";
			
		ИначеЕсли УстаревшийКодКатегории = "ЗП" ИЛИ УстаревшийКодКатегории = "ЗП-НП" Тогда
			
			НовыйКодКатегории = "C";
			
		ИначеЕсли УстаревшийКодКатегории = "ЗЛФ-СХ-1" ИЛИ УстаревшийКодКатегории = "ЗЛФ-СХ-2" ИЛИ УстаревшийКодКатегории = "ЗЛФ" Тогда
			
			НовыйКодКатегории = "D";
			
		ИначеЕсли УстаревшийКодКатегории = "ЗВФ-СХ-1" ИЛИ УстаревшийКодКатегории = "ЗВФ-СХ-2" ИЛИ УстаревшийКодКатегории = "ЗВФ" Тогда
			
			НовыйКодКатегории = "E";
			
		ИначеЕсли УстаревшийКодКатегории = "ЗООПТ-СХ-1" ИЛИ УстаревшийКодКатегории = "ЗООПТ-СХ-2" ИЛИ УстаревшийКодКатегории = "ЗООПТ" Тогда
			
			НовыйКодКатегории = "F"; 
			
		КонецЕсли;
		
		СправочникОбъект.КодПоКлассификатору = НовыйКодКатегории;
		
		Попытка
			СправочникОбъект.Записать();
			
			ОбъектовОбработано = ОбъектовОбработано + 1;
			
		Исключение
			
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			
			ТекстСообщения = НСтр("ru = 'при записи категории земель %1  произошла ошибка: %2'", ОбщегоНазначения.КодОсновногоЯзыка());
			ЗаписьЖурналаРегистрации(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстСообщения, ВыборкаЭлементов.Ссылка, ОписаниеОшибки()),
			УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));			
		КонецПопытки;
			
	КонецЦикла;
	
	Если ОбъектовОбработано + ПроблемныхОбъектов = 0 Тогда
	
		Параметры.ОбработкаЗавершена = Истина;
	
	Иначе
		
		Параметры.ОбработкаЗавершена = Ложь;

		Если ОбъектовОбработано = 0 Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Процедуре обновления кодов категорий земель (отложенно)
					|не удалось записать коды:  у %1 категорий'"), 
					ПроблемныхОбъектов);
			ВызватьИсключение ТекстСообщения;
		Иначе
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Процедура обновления кодов категорий земель (отложенно)
						|обработала очередную порцию элементов справочника ""%1"": %2 элементов'"), 
						Метаданные.Справочники.КатегорииЗемель.Представление(), ОбъектовОбработано);
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
				УровеньЖурналаРегистрации.Информация,
				,
				,
				ТекстСообщения);
		КонецЕсли;
		
	КонецЕсли;


КонецПроцедуры

#КонецОбласти

#Область ОбновлениеНа_3_0_61

Процедура ОчиститьНастройкиСверткиИнформационнойБазы() Экспорт
	
	Константы.СтатусСверткиИнформационнойБазы.Установить(Новый ХранилищеЗначения(Неопределено));
	
КонецПроцедуры

Процедура ОчиститьУдаляемыеРегистрыСведений(Параметры) Экспорт
	
	РегистрыДляОбработки = Новый Массив;
	РегистрыДляОбработки.Добавить("УдалитьОбъектыИнформационныхБаз");
	РегистрыДляОбработки.Добавить("УДАЛИТЬ_ЖурналАудитаОбменСБанками");
	РегистрыДляОбработки.Добавить("УдалитьПараметрыОбменаДанными");
	РегистрыДляОбработки.Добавить("УдалитьИсторияОбменаДанными");
	РегистрыДляОбработки.Добавить("УдалитьКоллизииПриОбмене");
	РегистрыДляОбработки.Добавить("УдалитьСоответствиеОбъектовДляОбмена");
	РегистрыДляОбработки.Добавить("УдалитьСохраненныеНастройки");
	РегистрыДляОбработки.Добавить("УдалитьСтратегииРедактированияНомеровОбъектов");
	
	КодЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	
	ОперацияОбновления = НСтр("ru = 'Обновление информационной базы. Удаление записей регистров'", КодЯзыка);
	КомментарийШаблон  = НСтр("ru = 'Удалены записи регистра сведений ""%1"".'");
	
	Для Каждого РегистрДляОчистки Из РегистрыДляОбработки Цикл
		Если Метаданные.РегистрыСведений.Найти(РегистрДляОчистки) <> Неопределено Тогда
			Попытка
				Набор = РегистрыСведений[РегистрДляОчистки].СоздатьНаборЗаписей();
				Набор.Записать();
				Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(КомментарийШаблон, РегистрДляОчистки);
				ЗаписьЖурналаРегистрации(ОперацияОбновления, УровеньЖурналаРегистрации.Предупреждение,,, Комментарий);				
			Исключение
				ТекстСообщения = НСтр("ru='Операция не выполнена'", КодЯзыка);
				ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеНа_3_0_62

Процедура УстановитьМЗПМРП2025Год() Экспорт
	
	НаборЗаписей = РегистрыСведений.РегламентированныеРасчетныеПоказатели.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Период.Установить('20250101', Истина);		
	ДобавитьЗначенияРасчетныхПоказателей(НаборЗаписей, Дата("20250101"), 85000, 3932, 882*3932, 882*3932, 85000, 3932, 3932);
	
	Попытка
		НаборЗаписей.Записать();
	Исключение
	КонецПопытки;
	
КонецПроцедуры

Процедура ОбновитьСведенияОСтавкахЕП2025() Экспорт
	
	НаборЗаписей = РегистрыСведений.СведенияОСтавкахНалоговСборовОтчислений.СоздатьНаборЗаписей();
	
	ПустаяОрганизация = Справочники.Организации.ПустаяСсылка();
    ВидНалогаЕП       = Справочники.НалогиСборыОтчисления.ЕдиныйПлатеж;
	
	НаборЗаписей.Отбор.Налогоплательщик.Установить(ПустаяОрганизация, Истина);
	НаборЗаписей.Отбор.ВидНалога.Установить(ВидНалогаЕП, Истина);
	НаборЗаписей.Отбор.Период.Установить('20250101', Истина);
	
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() = 0 Тогда
			
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Налогоплательщик = ПустаяОрганизация;
		НоваяЗапись.ВидНалога        = ВидНалогаЕП;
		НоваяЗапись.Период           = '20250101';
		НоваяЗапись.Ставка           = 23.8;
		
		Попытка
			НаборЗаписей.Записать(Истина);
		Исключение
			ТекстСообщения = НСтр("ru='Операция не выполнена'", ОбщегоНазначения.КодОсновногоЯзыка());
			ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
			
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьСведенияОСтавкахНалоговВзносовОтчислений2025() Экспорт
	
	ПустаяОрганизация = Справочники.Организации.ПустаяСсылка();
	
	// Установим ставку СО – 5%
	НаборЗаписей = РегистрыСведений.СведенияОСтавкахНалоговСборовОтчислений.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВидНалога.Установить(Справочники.НалогиСборыОтчисления.ОбязательныеСоциальныеОтчисления, Истина);
	НаборЗаписей.Отбор.Период.Установить('20250101', Истина);
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() = 0 Тогда
		
		ДобавитьЗначенияСтавокНалоговВзносовОтчислений(НаборЗаписей, '20250101', ПустаяОрганизация, Справочники.НалогиСборыОтчисления.ОбязательныеСоциальныеОтчисления, 5);
		
		Попытка
			НаборЗаписей.ОбменДанными.Загрузка = Истина;
			НаборЗаписей.Записать();
		Исключение
			
		КонецПопытки;
		
	КонецЕсли;
	
	// Установим ставку СН – 11%
	НаборЗаписей = РегистрыСведений.СведенияОСтавкахНалоговСборовОтчислений.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВидНалога.Установить(Справочники.НалогиСборыОтчисления.СоциальныйНалог, Истина);
	НаборЗаписей.Отбор.Период.Установить('20250101', Истина);
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() = 0 Тогда
		
		ДобавитьЗначенияСтавокНалоговВзносовОтчислений(НаборЗаписей, '20250101', ПустаяОрганизация, Справочники.НалогиСборыОтчисления.СоциальныйНалог, 11);
		
		Попытка
			НаборЗаписей.ОбменДанными.Загрузка = Истина;
			НаборЗаписей.Записать();
		Исключение
			
		КонецПопытки;
		
	КонецЕсли;
	
	// Установим ставку ОПВР – 2.5%
	НаборЗаписей = РегистрыСведений.СведенияОСтавкахНалоговСборовОтчислений.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВидНалога.Установить(Справочники.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносыРаботодателя, Истина);
	НаборЗаписей.Отбор.Период.Установить('20250101', Истина);
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() = 0 Тогда
		
		ДобавитьЗначенияСтавокНалоговВзносовОтчислений(НаборЗаписей, '20250101', ПустаяОрганизация, Справочники.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносыРаботодателя, 2.5);
		
		Попытка
			НаборЗаписей.ОбменДанными.Загрузка = Истина;
			НаборЗаписей.Записать();
		Исключение
			
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеНа_3_0_63

Процедура ЗаполнитьСоответствиеНовыхСчетовОПВР() Экспорт
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда // В подчиненных узлах РИБ не выполняется
		Возврат;
	КонецЕсли;
	
	//3250
	СчетБУ3250 = ПланыСчетов.Типовой.ОбязательстваПоОбязательнымПенсионнымВзносамРаботодателя;
	СчетНУ3250 = ПланыСчетов.Налоговый.ОбязательстваПоОбязательнымПенсионнымВзносамРаботодателя;
		
	ОбъектСчетБУ = СчетБУ3250.ПолучитьОбъект();
	ОбъектСчетБУ.СчетНУ = СчетНУ3250;
	
	Попытка
		ОбъектСчетБУ.Записать();
	Исключение
		ТекстСообщения = НСтр("ru='Операция не выполнена'", ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;		
	
КонецПроцедуры

Процедура ОбновитьНалогиСборыОтчисленияОПВРСчетаУчета() Экспорт
	
	КодЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	
	Если ПланыОбмена.ГлавныйУзел() = Неопределено Тогда // В подчиненных узлах РИБ не выполняется                                           
		
		СправочникОбъект = Справочники.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносыРаботодателя.ПолучитьОбъект();
		СправочникОбъект.СчетУчетаРасчетовСКонтрагентомБУ = ПланыСчетов.Типовой.ОбязательстваПоОбязательнымПенсионнымВзносамРаботодателя;
		СправочникОбъект.СчетУчетаРасчетовСКонтрагентомНУ = ПланыСчетов.Налоговый.ОбязательстваПоОбязательнымПенсионнымВзносамРаботодателя;
		Попытка
			СправочникОбъект.Записать();
		Исключение
			ТекстСообщения = НСтр("ru='Операция не выполнена'", КодЯзыка);
			ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;	
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрименитьПараметрыСубконтоРаботникиОрганизацииДляНовыхСчетовОПВР() Экспорт
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда // В подчиненных узлах РИБ не выполняется
		Возврат;
	КонецЕсли;

	ВестиУчетПоСотрудникам = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.НаСчетеВедетсяУчетПоРаботникамОрганизаций(ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПоОплатеТруда); // счет 3350
	
	// инициализация списка счетов, на которых можно устанавливать дополнительную аналитику "Работники организации"
	СчетаОПВР = Новый СписокЗначений;
	СчетаОПВР.Добавить(ПланыСчетов.Типовой.ОбязательстваПоОбязательнымПенсионнымВзносамРаботодателя); // 3250
	СчетаОПВР.Добавить(ПланыСчетов.Налоговый.ОбязательстваПоОбязательнымПенсионнымВзносамРаботодателя); // 3250Н
	
	Для каждого Счет Из СчетаОПВР Цикл
		Если ТипЗнч(Счет.Значение) = Тип("ПланСчетовСсылка.Налоговый") Тогда
			ИмяПланаСчетов = "Налоговый";
		Иначе
			ИмяПланаСчетов = "Типовой";
		КонецЕсли;
		ПрименитьПараметрыСубконтоРаботникиОрганизации(Счет.Значение, ИмяПланаСчетов, ВестиУчетПоСотрудникам, Ложь);
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьСведенияОСтавкахСоциальныхОтчислений2025() Экспорт
	
	ПустаяОрганизация = Справочники.Организации.ПустаяСсылка();
	
	НаборЗаписей = РегистрыСведений.СведенияОСтавкахНалоговСборовОтчислений.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВидНалога.Установить(Справочники.НалогиСборыОтчисления.ОбязательныеСоциальныеОтчисления, Истина);
	НаборЗаписей.Отбор.Период.Установить('20250101', Истина);
	НаборЗаписей.Прочитать();
	
	//если совсем нет записей
	Если НаборЗаписей.Количество() = 0 Тогда
		ДобавитьЗначенияСтавокНалоговВзносовОтчислений(НаборЗаписей, '20250101', ПустаяОрганизация, Справочники.НалогиСборыОтчисления.ОбязательныеСоциальныеОтчисления, 5, Перечисления.ЮрФизЛицо.ФизЛицо); 
		ДобавитьЗначенияСтавокНалоговВзносовОтчислений(НаборЗаписей, '20250101', ПустаяОрганизация, Справочники.НалогиСборыОтчисления.ОбязательныеСоциальныеОтчисления, 5, Перечисления.ЮрФизЛицо.ЮрЛицо);
		
		Попытка
			НаборЗаписей.ОбменДанными.Загрузка = Истина;
			НаборЗаписей.Записать();
		Исключение
			ТекстСообщения = НСтр("ru='Операция не выполнена'");
			ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));	
		КонецПопытки;  

	Иначе
		//обрабатываем существующие		
		Для Каждого СтрокаЗапись Из НаборЗаписей Цикл  
			Если НЕ ЗначениеЗаполнено(СтрокаЗапись.ВидДохода) Тогда
				СтрокаЗапись.ВидДохода = Перечисления.ЮрФизЛицо.ФизЛицо;  
			КонецЕсли
		КонецЦикла; 
		
		Попытка
			НаборЗаписей.ОбменДанными.Загрузка = Истина;
			НаборЗаписей.Записать();
		Исключение
			ТекстСообщения = НСтр("ru='Операция не выполнена'");
			ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));	
		КонецПопытки;  
     			
		//1. Отбираем по виду дохода - ГПХ. Добавляем новую ставку, если ее не было ранее
		НаборЗаписей = РегистрыСведений.СведенияОСтавкахНалоговСборовОтчислений.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ВидНалога.Установить(Справочники.НалогиСборыОтчисления.ОбязательныеСоциальныеОтчисления, Истина); 
		НаборЗаписей.Отбор.ВидДохода.Установить(Перечисления.ЮрФизЛицо.ЮрЛицо, Истина);
		НаборЗаписей.Отбор.Период.Установить('20250101', Истина);
		НаборЗаписей.Прочитать(); 		
		
		Если НаборЗаписей.Количество() = 0 Тогда
			ДобавитьЗначенияСтавокНалоговВзносовОтчислений(НаборЗаписей, '20250101', ПустаяОрганизация, Справочники.НалогиСборыОтчисления.ОбязательныеСоциальныеОтчисления, 5, Перечисления.ЮрФизЛицо.ЮрЛицо);			
			Попытка
				НаборЗаписей.ОбменДанными.Загрузка = Истина;
				НаборЗаписей.Записать();
			Исключение
				ТекстСообщения = НСтр("ru='Операция не выполнена'");
				ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));	
			КонецПопытки;     
		КонецЕсли;       		
	КонецЕсли;    
		
КонецПроцедуры

#КонецОбласти   

