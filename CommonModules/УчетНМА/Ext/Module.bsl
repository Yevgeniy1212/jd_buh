////////////////////////////////////////////////////////////////////////////////
// УчетНМА: 
//  
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// ПОСТУПЛЕНИЕ ДОП. РАСХОДОВ

Процедура СформироватьДвиженияПоступлениеДопРасходов(ТаблицаНМА, ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Параметры = ПодготовитьПараметрыПоступлениеДопРасходов(ТаблицаНМА, ТаблицаРеквизиты);
	
	Если Параметры.ТаблицаНМА.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = Параметры.Реквизиты[0];
	
	Для Каждого СтрокаТаблицы Из Параметры.ТаблицаНМА Цикл
		
		Если СтрокаТаблицы.Сумма = 0 Тогда 
			Продолжить;
		КонецЕсли;
		
		Проводка = Движения.Типовой.Добавить();
		
		Проводка.Период       = Реквизиты.Период;
		Проводка.Организация  = Реквизиты.Организация;
		Проводка.Содержание   = СтрокаТаблицы.Содержание;
		Проводка.Сумма        = СтрокаТаблицы.Сумма;
		
		Проводка.СчетДт       = СтрокаТаблицы.СчетУчетаБУ;
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НематериальныеАктивы", СтрокаТаблицы.НематериальныйАктив);
		
		Если Реквизиты.ВидОперации = Перечисления.ВидыОперацийПоступлениеДопРасходов.УслугаСтороннейОрганизации 
			ИЛИ Реквизиты.ВидОперации = Перечисления.ВидыОперацийПоступлениеДопРасходов.ПоступлениеОтНерезидента Тогда 
			Проводка.СчетКт = Реквизиты.СчетУчетаРасчетовСКонтрагентом;
			
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,"Контрагенты",        Реквизиты.Контрагент, Истина);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,"Договоры",           Реквизиты.ДоговорКонтрагента);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,"ДокументыРасчетовСКонтрагентами", Реквизиты.Регистратор);
		ИначеЕсли Реквизиты.ВидОперации = Перечисления.ВидыОперацийПоступлениеДопРасходов.ВнутреннийРасход Тогда 
			Проводка.СчетКт = Реквизиты.СчетЗатратБУ;
			
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, Реквизиты.СубконтоЗатратБУ1);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, Реквизиты.СубконтоЗатратБУ2);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, Реквизиты.СубконтоЗатратБУ3);
		КонецЕсли;
		
		ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
			Проводка, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);
		
		Если ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт).Валютный Тогда
			Проводка.ВалютаКт = Реквизиты.ВалютаВзаиморасчетов;
			Проводка.ВалютнаяСуммаКт = СтрокаТаблицы.СуммаВзаиморасчетов;
		КонецЕсли;
	
		// проводки по налоговому учету
		Если Реквизиты.НеобходимостьОтраженияВНУ Тогда
			
			Проводка = Движения.Налоговый.Добавить();
			
			Проводка.Период      = Реквизиты.Период;
			Проводка.Организация = Реквизиты.Организация;
			
			Проводка.СчетДт      = СтрокаТаблицы.СчетУчетаНУ;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,"ВнеоборотныеАктивы",      СтрокаТаблицы.НематериальныйАктив);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,"ВидыДвиженияСтоимостиФА", Перечисления.ВидыДвиженияСтоимостиФА.Поступление);
			
			Если Реквизиты.ВидОперации = Перечисления.ВидыОперацийПоступлениеДопРасходов.УслугаСтороннейОрганизации 
				ИЛИ Реквизиты.ВидОперации = Перечисления.ВидыОперацийПоступлениеДопРасходов.ПоступлениеОтНерезидента Тогда 
				Проводка.СчетКт = ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьСчетРасчетовСКонтрагентомНУ(Реквизиты.СчетУчетаРасчетовСКонтрагентом);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,"Контрагенты",        Реквизиты.Контрагент);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,"Договоры",           Реквизиты.ДоговорКонтрагента);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,"ДокументыРасчетовСКонтрагентами", Реквизиты.Регистратор);
			ИначеЕсли Реквизиты.ВидОперации = Перечисления.ВидыОперацийПоступлениеДопРасходов.ВнутреннийРасход Тогда 
				Проводка.СчетКт = Реквизиты.СчетЗатратНУ;
				
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, Реквизиты.СубконтоЗатратНУ1);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, Реквизиты.СубконтоЗатратНУ2);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, Реквизиты.СубконтоЗатратНУ3);
			КонецЕсли;
			
			ПроцедурыНалоговогоУчета.ВидУчетаНУ(Проводка, Реквизиты.ВидУчетаНУ);
			
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				Проводка, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);
			
			Проводка.Сумма        = СтрокаТаблицы.Сумма;
			Проводка.Содержание   = СтрокаТаблицы.Содержание;
		КонецЕсли;	
	КонецЦикла;
	
	Движения.Типовой.Записывать = Истина;
	Если Реквизиты.НеобходимостьОтраженияВНУ Тогда 
		Движения.Налоговый.Записывать = Истина;
	КонецЕсли;
	
КонецПроцедуры

Функция ПодготовитьПараметрыПоступлениеДопРасходов(ТаблицаНМА, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаНМА

	СписокОбязательныхКолонок = ""
	+ "НомерСтроки,"       				// <Число> - номер строки в списке
	+ "НематериальныйАктив,"      		// <СправочникСсылка.НематериальныеАктивы> - оприходуемый НМА
	+ "Сумма,"             				// <Число,15,2> - сумма в тенге
	+ "СуммаВзаиморасчетов,"            // <Число,15,2> - сумма в валюте взаиморасчетов
	+ "СчетУчетаБУ,"         			// <ПланСчетовСсылка.Типовой> - счет учета, на который приходуется товар
	+ "СчетУчетаНУ,"        			// <ПланСчетовСсылка.Налоговый> - счет учета, на который приходуется товар
	+ "Содержание,"        				// <Строка,150> - содержание проводки
	+ "Партия";							// <ДокументСсылка> - Партия, на которую оформляется поступление доп. расходов

	Параметры.Вставить("ТаблицаНМА",
		ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаНМА, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Регистратор,"                  	 // <ДокументСсылка.*> - документ-регистратор движений
	+ "Период,"                       	 // <Дата> - период движений - дата документа
	+ "ВидОперации,"					 // <ПеречислениеСсылка.ВидыОперацийПоступлениеДопРасходов> - вид операции поступления доп. расходов
	+ "Организация,"                  	 // <СправочникСсылка.Организация> - организация, в которую приходуется товар
	+ "Контрагент,"                  	 // <СправочникСсылка.Контрагенты> - контрагент - поставщик
	+ "ДоговорКонтрагента,"              // <СправочникСсылка.Организация> - договор контрагента, в рамках которого выполняется поставка
	+ "НеобходимостьОтраженияВНУ,"  	 // <Булево> - определяет необходимость отражения в НУ
	+ "ВалютаВзаиморасчетов,"  			 // <СправочникСсылка.Валюты> - валюта документа
	+ "ВидУчетаНУ,"  					 // <СправочникСсылка.ВидыУчетаНУ> - вид учета, указанный в документе
	+ "СтруктурноеПодразделение,"  		 // <СправочникСсылка.ПодразделенияОрганизаций> - структурное подразделение организации
	+ "СчетУчетаРасчетовСКонтрагентом,"  // <ПланСчетовСсылка.Типовой> - счет на котором ведутся расчеты с контрагентом по задолженности
	+ "СчетУчетаРасчетовПоАвансам,"	 	 // <ПланСчетовСсылка.Типовой> - счет на котором ведутся расчеты с контрагентом по авансам
	+ "СчетЗатратБУ,"					 // <ПланСчетовСсылка.Типовой> - счет затрат для отражения операции внутреннего расхода
	+ "СубконтоЗатратБУ1,"				 // - значение субконто счета затрат
	+ "СубконтоЗатратБУ2,"				 // - значение субконто счета затрат
	+ "СубконтоЗатратБУ3,"				 // - значение субконто счета затрат
	+ "СчетЗатратНУ,"					 // <ПланСчетовСсылка.Налоговый> - счет затрат для отражения операции внутреннего расхода
	+ "СубконтоЗатратНУ1,"				 // - значение субконто счета затрат
	+ "СубконтоЗатратНУ2,"				 // - значение субконто счета затрат
	+ "СубконтоЗатратНУ3";				 // - значение субконто счета затрат
	
	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

// ВЫРАБОТКА НМА

Процедура СформироватьДвиженияВыработкаНМА(ТаблицаНМА, Движения, Отказ) Экспорт
	
	Параметры = ПодготовитьПараметрыВыработкаНМА(ТаблицаНМА);
	
	Если Параметры.ТаблицаНМА.Количество() > 0 Тогда
		
		Движения.ВыработкаНМА.Загрузить(Параметры.ТаблицаНМА);
		Движения.ВыработкаНМА.Записывать = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПодготовитьПараметрыВыработкаНМА(ТаблицаНМА)

	Параметры = Новый Структура;
	
	// Подготовка таблицы ТаблицаНМА:
	СписокОбязательныхКолонок = ""
	+ "Период,"
	+ "Регистратор,"
	+ "НомерСтроки,"
	+ "НематериальныйАктив,"
	+ "Количество,"
	;
	Параметры.Вставить("ТаблицаНМА", ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаНМА, СписокОбязательныхКолонок));
	
	Возврат Параметры;

КонецФункции

// Первоначальные сведения НМА бухгалтерский учет

Процедура СформироватьДвиженияПервоначальныеСведенияНМАБухгалтерскийУчет(ТаблицаРеквизиты, ТаблицаНМА, Движения, Отказ) Экспорт
	
	Если ТаблицаРеквизиты = Неопределено ИЛИ ТаблицаНМА = Неопределено  Тогда
		Возврат;
	КонецЕсли;

	Параметры = ПодготовитьПараметрыПервоначальныеСведенияНМАБухгалтерскийУчет(ТаблицаРеквизиты, ТаблицаНМА);
	
	Если Параметры.ТаблицаНМА.Количество() > 0 Тогда
		
		Движения.ПервоначальныеСведенияНМАБухгалтерскийУчет.Загрузить(Параметры.ТаблицаНМА);
		Движения.ПервоначальныеСведенияНМАБухгалтерскийУчет.Записывать = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПодготовитьПараметрыПервоначальныеСведенияНМАБухгалтерскийУчет(ТаблицаРеквизиты, ТаблицаНМА)

	Параметры = Новый Структура;
	
	// Подготовка таблицы ТаблицаНМА:
	СписокОбязательныхКолонок = ""
	+ "НомерСтроки,"
	+ "НематериальныйАктив,"
	+ "ПервоначальнаяСтоимость,"
	+ "СпособПоступления,"
	+ "НачислятьАмортизацию,"
	+ "СпособНачисленияАмортизации,"
	+ "СрокПолезногоИспользования,"
	+ "СтоимостьДляВычисленияАмортизации,"
	+ "ОбъемПродукцииРаботДляВычисленияАмортизации,"
	;
	
	ТаблицаПоНМА = ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаНМА, СписокОбязательныхКолонок);

	СписокОбязательныхКолонок = ""	
	+ "Период,"                       	 	  // <Дата> - период движений - дата документа
	+ "Организация";                  	 	  // <СправочникСсылка.Организация> - организация, в которую приходуется товар
		
	Реквизиты =	ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок);

	ТаблицаПоНМА.Колонки.Добавить("Организация", Реквизиты.Колонки.Организация.ТипЗначения);
	ТаблицаПоНМА.Колонки.Добавить("Период", Реквизиты.Колонки.Период.ТипЗначения);
	ТаблицаПоНМА.ЗаполнитьЗначения(Реквизиты[0].Организация, "Организация");
	ТаблицаПоНМА.ЗаполнитьЗначения(Реквизиты[0].Период, "Период");
	
	Параметры.Вставить("ТаблицаНМА", ТаблицаПоНМА);

	Возврат Параметры;

КонецФункции

// СпособыОтраженияРасходовПоАмортизацииНМАБухгалтерскийУчет

Процедура СформироватьДвиженияСпособыОтраженияРасходовПоАмортизацииНМАБухгалтерскийУчет(ТаблицаНМА, ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Если ТаблицаРеквизиты = Неопределено ИЛИ ТаблицаНМА = Неопределено  Тогда
		Возврат;
	КонецЕсли;

	Параметры = ПодготовитьПараметрыСпособыОтраженияРасходовПоАмортизацииНМАБухгалтерскийУчет(ТаблицаНМА, ТаблицаРеквизиты);
	
	Если Параметры.ТаблицаНМА.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = Параметры.Реквизиты[0];
	
	Для Каждого СтрокаТаблицы Из Параметры.ТаблицаНМА Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СпособОтраженияРасходовПоАмортизации) Тогда
			Продолжить;
		КонецЕсли;

		Проводка = Движения.СпособыОтраженияРасходовПоАмортизацииНМАБухгалтерскийУчет.Добавить();
		
		Проводка.Период       						  = Реквизиты.Период;
		Проводка.Организация 						  = Реквизиты.Организация;
		Проводка.НематериальныйАктив   				  = СтрокаТаблицы.НематериальныйАктив;
		Проводка.СпособОтраженияРасходовПоАмортизации = СтрокаТаблицы.СпособОтраженияРасходовПоАмортизации;
		 		
	КонецЦикла;
	
	Движения.СпособыОтраженияРасходовПоАмортизацииНМАБухгалтерскийУчет.Записывать = Истина;
	
КонецПроцедуры

Функция ПодготовитьПараметрыСпособыОтраженияРасходовПоАмортизацииНМАБухгалтерскийУчет(ТаблицаНМА, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаНМА

	СписокОбязательныхКолонок = ""	    				
	+ "НематериальныйАктив,"
	+ "СпособОтраженияРасходовПоАмортизации";      		
	
	Параметры.Вставить("ТаблицаНМА",
		ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаНМА, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Регистратор,"                  	 	  // <ДокументСсылка.*> - документ-регистратор движений
	+ "Период,"                       	 	  // <Дата> - период движений - дата документа
	+ "Организация"                  	 	  // <СправочникСсылка.Организация> - организация, в которую приходуется товар
	;
	
	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции


// Движения по состоянию НМА

Процедура СформироватьДвиженияИзменениеСостоянияНМА(ТаблицаНМА, Движения, Отказ) Экспорт
	
	Если ТаблицаНМА = Неопределено ИЛИ ТаблицаНМА.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Движения.СостоянияНМАОрганизаций.Загрузить(ТаблицаНМА);
	Движения.СостоянияНМАОрганизаций.Записывать = Истина;
	
КонецПроцедуры


// Движения Объекты имущественного налога
Процедура СформироватьДвиженияОбъектыИмущественногоНалога(ТаблицаОС, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Если ТаблицаОС = Неопределено ИЛИ ТаблицаОС.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыОбъектыИмущественногоНалога(ТаблицаОС, ТаблицаРеквизиты);

	Если Параметры.ТаблицаОС.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Реквизиты = Параметры.Реквизиты[0];

	Для каждого СтрокаТаблицы Из Параметры.ТаблицаОС Цикл
		Движение = Движения.ОбъектыИмущественногоНалога.Добавить();
		Движение.Период                = Реквизиты.Период;
		Движение.ОбъектНалогообложения = СтрокаТаблицы.ОбъектНалогообложения;
		Движение.НачислятьНалог 	   = СтрокаТаблицы.НачислятьНалог;
		Движение.Организация		   = Реквизиты.Организация;
		Если СтрокаТаблицы.НачислятьНалог Тогда		
			Если Реквизиты.ПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
				
				Движение.Налогоплательщик = ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(СтрокаТаблицы.Местонахождение,
																	Реквизиты.Организация,
																	Перечисления.РазделыНалоговогоУчета.МестныеНалоги);

				СПДокумента = ?(ЗначениеЗаполнено(Реквизиты.СтруктурноеПодразделение),Реквизиты.СтруктурноеПодразделение, Реквизиты.Организация);				
				Движение.СтруктурнаяЕдиница = ?(СтрокаТаблицы.Местонахождение.ЯвляетсяСтруктурнымПодразделением,СтрокаТаблицы.Местонахождение, СПДокумента);								        						
			Иначе
				Движение.Налогоплательщик 	= Реквизиты.Организация;
				Движение.СтруктурнаяЕдиница = Реквизиты.Организация;
			КонецЕсли;
		Иначе			
			Если Реквизиты.ПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
				
				Движение.Налогоплательщик = ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(СтрокаТаблицы.СтруктурнаяЕдиницаИмущественногоНалога,
																	Реквизиты.Организация,
																	Перечисления.РазделыНалоговогоУчета.МестныеНалоги);
	
				Движение.СтруктурнаяЕдиница = СтрокаТаблицы.СтруктурнаяЕдиницаИмущественногоНалога;
			Иначе
				Движение.Налогоплательщик 	= Реквизиты.Организация;
				Движение.СтруктурнаяЕдиница = Реквизиты.Организация;
			КонецЕсли;					
		КонецЕсли;
		
	КонецЦикла;

	Движения.ОбъектыИмущественногоНалога.Записывать = Истина;

КонецПроцедуры

Функция ПодготовитьПараметрыОбъектыИмущественногоНалога(ТаблицаОС, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаОС

	СписокОбязательныхКолонок = ""
	+ "ОбъектНалогообложения," 					// <СправочникСсылка.ОсновныеСредства>
	+ "НачислятьНалог," 						// <Булево> - признак необходимости начисления амортизации по бухгалтерскому учету
	+ "СтруктурнаяЕдиницаИмущественногоНалога," // СправочникСсылка.ПодразделенияОрганизаций, СправочникСсылка.Организации
	+ "Местонахождение";

	Параметры.Вставить("ТаблицаОС",
		ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаОС, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"             						  // <Дата>
	+ "Организация,"   								  // <СправочникСсылка.Организации>
	+ "СтруктурноеПодразделение," 					  // СправочникСсылка.ПодразделенияОрганизаций, СправочникСсылка.Организации
	+ "ПоддержкаРаботыСоСтруктурнымиПодразделениями"; // <Булево>
	
	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

// Движения по счетам учета НМА

Процедура СформироватьДвиженияСчетаУчетаНМА(ТаблицаРеквизиты, ТаблицаНМА, Движения, Отказ) Экспорт
	
	Если ТаблицаРеквизиты = Неопределено ИЛИ ТаблицаНМА = Неопределено  Тогда
		Возврат;
	КонецЕсли;

	Параметры = ПодготовитьПараметрыСчетаУчетаНМА(ТаблицаНМА, ТаблицаРеквизиты);
	Если Параметры.СчетаУчетаНМА.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Движения.СчетаУчетаНМА.Загрузить(Параметры.СчетаУчетаНМА);
	Движения.СчетаУчетаНМА.Записывать = Истина;
	
КонецПроцедуры

Функция ПодготовитьПараметрыСчетаУчетаНМА(ТаблицаНМА, ТаблицаРеквизиты)
	
	Параметры = Новый Структура;
	
	СписокОбязательныхКолонок = ""
	+ "НематериальныйАктив,"	      // <СправочникСсылка.НематериальныйАктив>
	+ "СчетУчетаБУ,"                   // <ПланСчетовСсылка.Типовой>
	+ "СчетНачисленияАмортизацииБУ"  // <ПланСчетовСсылка.Типовой>
	;
	
	СчетаУчетаНМА = ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаНМА, СписокОбязательныхКолонок);
	
	// Подготовка реквизитов
	СписокОбязательныхКолонок = ""
	+ "Период,"                 // <Дата> - Дата движения
	+ "Организация";			// <СправочникСсылка.Организации> - организация документа
	
	Реквизиты = ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок);
	
	СчетаУчетаНМА.Колонки.Добавить("Организация", Реквизиты.Колонки.Организация.ТипЗначения);
	СчетаУчетаНМА.Колонки.Добавить("Период", Реквизиты.Колонки.Период.ТипЗначения);
	СчетаУчетаНМА.ЗаполнитьЗначения(Реквизиты[0].Организация, "Организация");
	СчетаУчетаНМА.ЗаполнитьЗначения(Реквизиты[0].Период, "Период");
	
	Параметры.Вставить("СчетаУчетаНМА", СчетаУчетаНМА);
	
	Возврат Параметры;
	
КонецФункции


// ДВИЖЕНИЯ ПЕРЕДАЧА НМА

Процедура СформироватьДвиженияПередачаНМА(ТаблицаРеквизиты, ТаблицаСтоимостиНМА, ТаблицаАмортизацииНМА, Движения, Отказ) Экспорт

	Если ТаблицаСтоимостиНМА = Неопределено ИЛИ ТаблицаСтоимостиНМА.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизиты[0];
	
	Для Каждого СтрокаНМА Из ТаблицаСтоимостиНМА Цикл
		СтрокаАмортизацииНМА  = ТаблицаАмортизацииНМА.Найти(СтрокаНМА.НематериальныйАктив, "ОбъектУчета");
	
		Если СтрокаАмортизацииНМА = Неопределено тогда
			АмортизацияЗаМесяц = 0;
		Иначе
			АмортизацияЗаМесяц = СтрокаАмортизацииНМА.Сумма;
		КонецЕсли;

			СуммаПроводки = СтрокаНМА.АмортизацияБУ + АмортизацияЗаМесяц;

			Если СуммаПроводки <> 0 И Не (СтрокаНМА.СчетДт = СтрокаНМА.СчетКт) Тогда

				Проводка = Движения.Типовой.Добавить();

				Проводка.НомерЖурнала = Реквизиты.НомерЖурнала;
				Проводка.Период       = Реквизиты.Период;
				Проводка.Регистратор  = Реквизиты.Регистратор;
				Проводка.Организация  = Реквизиты.Организация;
				Проводка.Содержание   = Реквизиты.Содержание;
				Проводка.Сумма        = СуммаПроводки;

				Проводка.СчетДт       = СтрокаНМА.СчетДт;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НематериальныеАктивы", СтрокаНМА.НематериальныйАктив);
				
				Проводка.СчетКт       = СтрокаНМА.СчетКт;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "НематериальныеАктивы", СтрокаНМА.НематериальныйАктив);
				
				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
					Проводка, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);
	
			КонецЕсли;

			// списание остаточной стоимости Д (счета затрат) К (счета учета)
			ОстаточнаяСтоимостьНМА = СтрокаНМА.СтоимостьБУ - СтрокаНМА.АмортизацияБУ - АмортизацияЗаМесяц;
			
			Если ОстаточнаяСтоимостьНМА <> 0 Тогда

				Проводка =  Движения.Типовой.Добавить();

				Проводка.НомерЖурнала = Реквизиты.НомерЖурнала;
				Проводка.Период       = Реквизиты.Период;
				Проводка.Организация  = Реквизиты.Организация;
				Проводка.Содержание   = НСтр("ru ='Списана ост. стоимость'", ОбщегоНазначения.КодОсновногоЯзыка());
				Проводка.Сумма        = ОстаточнаяСтоимостьНМА;

				Проводка.СчетДт       = СтрокаНМА.СчетРасходовБУ;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаНМА.СубконтоРасходовБУ1);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаНМА.СубконтоРасходовБУ2);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтрокаНМА.СубконтоРасходовБУ3);
								
				Проводка.СчетКт      = СтрокаНМА.СчетКт;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "НематериальныеАктивы", СтрокаНМА.НематериальныйАктив);

				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
					Проводка, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);
					
			   СтрокаНМА.ОстаточнаяСтоимостьНМА = ОстаточнаяСтоимостьНМА;
		   КонецЕсли;	
		   
		   Если Реквизиты.НеобходимостьОтраженияВНУ Тогда
			   
			   СформироватьДвижениеСписанияСтоимостиПередачаНМАНУ(Реквизиты, СтрокаНМА, Движения, Отказ)
			
		   КонецЕсли;

	КонецЦикла;
	
	Движения.Типовой.Записывать = Истина;
	
	Если Реквизиты.НеобходимостьОтраженияВНУ Тогда
		Движения.Налоговый.Записывать = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьДвижениеСписанияСтоимостиПередачаНМАНУ(Реквизиты, СтрокаНМА, Движения, Отказ)
	
	СчетУчетаФА = ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьСчетУчетаНУВнеоборотногоАктива(СтрокаНМА.НематериальныйАктив, Реквизиты.Организация, 
																								Реквизиты.Период, Реквизиты.ПризнакОбъектаФА);
	
	СчетРасчетовСКонтрагентомНУ = ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьСчетРасчетовСКонтрагентомНУ(Реквизиты.СчетУчетаРасчетовСКонтрагентом);
	
	// Движения в НУ фиксированных активов
	Если  Реквизиты.ПризнакОбъектаФА Тогда
		// При выбытии стоимостный баланс группы уменьшается на сумму реализации		
		Если СтрокаНМА.СуммаБезНДС <> 0 Тогда
			
			ПроводкаНУ = Движения.Налоговый.Добавить();
			ПроводкаНУ.Период = Реквизиты.Период;
			ПроводкаНУ.Организация = Реквизиты.Организация;  			
			ПроводкаНУ.Содержание = НСтр("ru = 'Реализация фиксированного актива'", ОбщегоНазначения.КодОсновногоЯзыка());
			
			ПроводкаНУ.СчетДт = СчетРасчетовСКонтрагентомНУ;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "Контрагенты", Реквизиты.Контрагент);			
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт,   "Договоры",      Реквизиты.ДоговорКонтрагента);
			
			ПроводкаНУ.СчетКт 	= СчетУчетаФА;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "ВнеоборотныеАктивы", СтрокаНМА.НематериальныйАктив);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "ВидыДвиженияСтоимостиФА", Перечисления.ВидыДвиженияСтоимостиФА.Выбытие);			
			
			ПроводкаНУ.Сумма 	= СтрокаНМА.СуммаБезНДС;			
			ВидУчетаВПроводке 	= Справочники.ВидыУчетаНУ.НУ;									
			
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
			ПроводкаНУ, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);
			
			ПроцедурыНалоговогоУчета.ВидУчетаНУ(ПроводкаНУ,ВидУчетаВПроводке); 
		КонецЕсли;	
		
		Если Реквизиты.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль Тогда
			// Временные разницы
			// 1. Доходы. 	В БУ возникает доход на сумму реализации. В НУ дохода не возникает. Величина дохода от реализации в БУ
			// 	  будет являться временной разницей по НУ. 	Кт Н750 (ВР) Сумма РеализацииБУ
			// 2. Затраты. В БУ признаются затраты в размере остаточной стоимости актива по БУ, в НУ в этом периоде затраты не возникают.
			//    Величина остаточной стоимости в БУ является времененной разницей. Дт Н880 (ВР) ОстаточнаяСтоимостьБУ
			// 3. Стоимость ФА. В БУ актив выбывает и его стоимость равно 0, в НУ актив продолжает числиться. Возникает временная разница
			///   на сумму ( СуммаРеализацииБУ). 
			
			// 1. Доходы
			ПроводкаНУ = Движения.Налоговый.Добавить();
			ПроводкаНУ.Период = Реквизиты.Период;
			ПроводкаНУ.Организация = Реквизиты.Организация;
			ПроводкаНУ.Содержание = НСтр("ru = 'ВР: Доход от реализация фиксированного актива в БУ'", ОбщегоНазначения.КодОсновногоЯзыка());
			
			ПроводкаНУ.СчетКт = СтрокаНМА.СчетДоходовНУ;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 1, СтрокаНМА.СубконтоДоходовНУ1);			
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 2, СтрокаНМА.СубконтоДоходовНУ2);							
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 3, СтрокаНМА.СубконтоДоходовНУ3);											
			ПроводкаНУ.Сумма = СтрокаНМА.СуммаБезНДС;		
			
			ПроводкаНУ.ВидУчетаКт = Справочники.ВидыУчетаНУ.ВР;									
			
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделениеПроводки(ПроводкаНУ, Реквизиты.СтруктурноеПодразделение, "Кт"); 
			
			// 2. Затраты
			СуммаПроводки = СтрокаНМА.ОстаточнаяСтоимостьНМА;
			
			ПроводкаНУ = Движения.Налоговый.Добавить();
			ПроводкаНУ.Период = Реквизиты.Период;
			ПроводкаНУ.Организация = Реквизиты.Организация;
			ПроводкаНУ.Содержание = НСтр("ru = 'ВР: Затраты в сумме остаточной стоимости фиксированного актива в БУ и НУ'", ОбщегоНазначения.КодОсновногоЯзыка());
			
			ПроводкаНУ.СчетДт = СтрокаНМА.СчетРасходовНУ;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 1, СтрокаНМА.СубконтоРасходовНУ1);			
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 2, СтрокаНМА.СубконтоРасходовНУ2);							
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 3, СтрокаНМА.СубконтоРасходовНУ3);											
			ПроводкаНУ.Сумма = СуммаПроводки;		
			
			ПроводкаНУ.СчетКт = СчетУчетаФА;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "ВнеоборотныеАктивы", СтрокаНМА.НематериальныйАктив);			
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "ВидыДвиженияСтоимостиФА", Перечисления.ВидыДвиженияСтоимостиФА.Выбытие);			
			
			ПроводкаНУ.ВидУчетаДт = Справочники.ВидыУчетаНУ.ВР;				
			ПроводкаНУ.ВидУчетаКт = Справочники.ВидыУчетаНУ.ВР;				
			
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(ПроводкаНУ, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);
			
			// 3. Стоимость ФА								
			ПроводкаНУ = Движения.Налоговый.Добавить();
			ПроводкаНУ.Период = Реквизиты.Период;
			ПроводкаНУ.Организация = Реквизиты.Организация;
			ПроводкаНУ.Содержание = НСтр("ru = 'ВР: Разница в стоимости актива по БУ и НУ'", ОбщегоНазначения.КодОсновногоЯзыка());
			
			ПроводкаНУ.СчетДт = СчетУчетаФА;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "ВнеоборотныеАктивы", СтрокаНМА.НематериальныйАктив);			
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "ВидыДвиженияСтоимостиФА", Перечисления.ВидыДвиженияСтоимостиФА.Выбытие);			
			ПроводкаНУ.Сумма = СтрокаНМА.СуммаБезНДС;		
			
			ПроводкаНУ.ВидУчетаДт = Справочники.ВидыУчетаНУ.ВР;
			
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделениеПроводки(ПроводкаНУ, Реквизиты.СтруктурноеПодразделение, "Дт"); 
		КонецЕсли;	
	Иначе
		// не фиксированный актив. Списываем остаточную стоимость и признаем доход от реализации
		
		// Движения в НУ ВА, не подлежащих амортизации		
		// Если возникает налогооблагаемый доход, признаем его в НУ
		// Отражаем балансовую стоимость
		// Отражаем доход от реализации.		
		
		СуммаДоходаНУ = СтрокаНМА.СуммаБезНДС - СтрокаНМА.ОстаточнаяСтоимостьНМА;
		
		Если СуммаДоходаНУ  > 0 Тогда
			ПроводкаНУ = Движения.Налоговый.Добавить();
			ПроводкаНУ.Период = Реквизиты.Период;
			ПроводкаНУ.Организация = Реквизиты.Организация;  			
			ПроводкаНУ.Содержание = НСтр("ru = 'Реализация фиксированного актива'", ОбщегоНазначения.КодОсновногоЯзыка());
			
			ПроводкаНУ.СчетДт = СчетРасчетовСКонтрагентомНУ;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "Контрагенты", Реквизиты.Контрагент);			
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт,"Договоры",      Реквизиты.ДоговорКонтрагента);
			
			ПроводкаНУ.СчетКт = СтрокаНМА.СчетДоходовНУ;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 1, СтрокаНМА.СубконтоДоходовНУ1);			
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 2, СтрокаНМА.СубконтоДоходовНУ2);							
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 3, СтрокаНМА.СубконтоДоходовНУ3);							
			
			ПроводкаНУ.Сумма = СуммаДоходаНУ;						
			
			ПроводкаНУ.ВидУчетаДт = Справочники.ВидыУчетаНУ.НУ;
			ПроводкаНУ.ВидУчетаКт = Справочники.ВидыУчетаНУ.НУ;			
			
			ПроцедурыНалоговогоУчета.ВидУчетаНУ(ПроводкаНУ, Реквизиты.ВидУчетаНУ);
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(ПроводкаНУ, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);
		КонецЕсли;	
		
		Если Реквизиты.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль Тогда
			// отражаем доход отреализации
			СуммаДоходаПР = Мин(СтрокаНМА.СуммаБезНДС, СтрокаНМА.ОстаточнаяСтоимостьНМА);
			
			Если СуммаДоходаПР <> 0 Тогда
				ПроводкаНУ = Движения.Налоговый.Добавить();
				ПроводкаНУ.Период = Реквизиты.Период;
				ПроводкаНУ.Организация = Реквизиты.Организация;  	
				ПроводкаНУ.Содержание = НСтр("ru = 'Часть дохода от реализации ФА,не признаваемая в НУ'", ОбщегоНазначения.КодОсновногоЯзыка());
				
				ПроводкаНУ.СчетДт = СчетРасчетовСКонтрагентомНУ;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "Контрагенты", Реквизиты.Контрагент);			
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт,"Договоры",      Реквизиты.ДоговорКонтрагента);
				
				ПроводкаНУ.СчетКт = СтрокаНМА.СчетДоходовНУ;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 1, СтрокаНМА.СубконтоДоходовНУ1);			
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 2, СтрокаНМА.СубконтоДоходовНУ2);							
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 3, СтрокаНМА.СубконтоДоходовНУ3);												
				
				ПроводкаНУ.Сумма = СуммаДоходаПР;					
				ВидУчетаВПроводке = Справочники.ВидыУчетаНУ.НеОтражаетсяВНУ;								
				ПроводкаНУ.ВидУчетаДт = ВидУчетаВПроводке;
				ПроводкаНУ.ВидУчетаКт = ВидУчетаВПроводке;			
				
				ПроцедурыНалоговогоУчета.ВидУчетаНУ(ПроводкаНУ, Реквизиты.ВидУчетаНУ);
				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(ПроводкаНУ, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);
			КонецЕсли;	
			
			ПроводкаНУ = Движения.Налоговый.Добавить();
			ПроводкаНУ.Период = Реквизиты.Период;
			ПроводкаНУ.Организация = Реквизиты.Организация;  	
			ПроводкаНУ.Содержание = НСтр("ru = 'Списание остаточной стоимости ФА'", ОбщегоНазначения.КодОсновногоЯзыка());
			
			ПроводкаНУ.СчетДт       = СтрокаНМА.СчетРасходовНУ;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 1, СтрокаНМА.СубконтоРасходовНУ1);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 2, СтрокаНМА.СубконтоРасходовНУ2);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 3, СтрокаНМА.СубконтоРасходовНУ3);
			
			ПроводкаНУ.СчетКт 	= СчетУчетаФА;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "ВнеоборотныеАктивы", СтрокаНМА.НематериальныйАктив);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "ВидыДвиженияСтоимостиФА", Перечисления.ВидыДвиженияСтоимостиФА.Выбытие);			
			
			ПроводкаНУ.Сумма 	= СтрокаНМА.ОстаточнаяСтоимостьНМА;
			
			ВидУчетаВПроводке 		= Справочники.ВидыУчетаНУ.НеОтражаетсяВНУ;			
			
			ПроводкаНУ.ВидУчетаДт 	= ВидУчетаВПроводке;
			ПроводкаНУ.ВидУчетаКт 	= ВидУчетаВПроводке;			
			
			ПроцедурыНалоговогоУчета.ВидУчетаНУ(ПроводкаНУ, Реквизиты.ВидУчетаНУ);
			
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(ПроводкаНУ, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры


// ДВИЖЕНИЯ ПОСТУПЛЕНИЕ НМА

Процедура СформироватьДвижениеПоступлениеНМА(ТаблицаПоступление,ТаблицаРеквизиты, Движения, Отказ)   Экспорт
	
	Если ТаблицаПоступление = Неопределено ИЛИ ТаблицаПоступление.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыПоступлениеНМА(ТаблицаПоступление,ТаблицаРеквизиты);
	
	Реквизиты = Параметры.Реквизиты[0];
	
	Для Каждого СтрокаТаблицы Из ТаблицаПоступление Цикл
		
		Проводка = Движения.Типовой.Добавить();
		Проводка.Период         = Реквизиты.Период;
		Проводка.Организация    = Реквизиты.Организация;
		Проводка.Содержание 	= НСтр("ru = 'Поступление НМА'", ОбщегоНазначения.КодОсновногоЯзыка());		
		Проводка.НомерЖурнала 	= СтрокаТаблицы.НомерЖурнала;		
		
		Проводка.СчетДт         = СтрокаТаблицы.СчетУчетаБУ;
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НематериальныеАктивы", СтрокаТаблицы.НематериальныйАктив);
		
		Проводка.СчетКт         = Реквизиты.СчетУчетаРасчетовСКонтрагентом;
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Контрагенты",        Реквизиты.Контрагент, Истина);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Договоры",           Реквизиты.ДоговорКонтрагента);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ДокументыРасчетовСКонтрагентами", Реквизиты.Регистратор);
		
		Проводка.Сумма = СтрокаТаблицы.Сумма;
		
		ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
		Проводка, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);
		
		Если ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт).Валютный Тогда
			Проводка.ВалютаКт = Реквизиты.ВалютаВзаиморасчетов;
			Проводка.ВалютнаяСуммаКт = СтрокаТаблицы.СуммаВзаиморасчетов;
		КонецЕсли;
		
		// Налоговый учет
		Если Реквизиты.НеобходимостьОтраженияВНУ Тогда
			Проводка = Движения.Налоговый.Добавить();
			Проводка.Период         = Реквизиты.Период;
			Проводка.Организация    = Реквизиты.Организация;
			Проводка.Содержание 	= НСтр("ru = 'Поступление НМА'", ОбщегоНазначения.КодОсновногоЯзыка());	
			Проводка.НомерЖурнала 	= СтрокаТаблицы.НомерЖурнала;		
			
			Проводка.СчетДт         = СтрокаТаблицы.СчетУчетаНУ;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ВнеоборотныеАктивы", СтрокаТаблицы.НематериальныйАктив);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ВидыДвиженияСтоимостиФА", СтрокаТаблицы.ВидДвиженияСтоимостиФА);
			
			Проводка.СчетКт         = ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьСчетРасчетовСКонтрагентомНУ(Реквизиты.СчетУчетаРасчетовСКонтрагентом);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Контрагенты",        Реквизиты.Контрагент, Истина);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Договоры",           Реквизиты.ДоговорКонтрагента);			
			
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
			Проводка, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);
			
			Проводка.Сумма = СтрокаТаблицы.Сумма;
						ПроцедурыНалоговогоУчета.ВидУчетаНУ(Проводка, Реквизиты.ВидУчетаНУ);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Движения.Типовой.Записывать = Истина;
	Если Реквизиты.НеобходимостьОтраженияВНУ Тогда 
		Движения.Налоговый.Записывать = Истина;
	КонецЕсли;

КонецПроцедуры

Функция ПодготовитьПараметрыПоступлениеНМА(ТаблицаПоступление, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	
	СписокОбязательныхКолонок = ""
	+ "НомерЖурнала,"                  
	+ "СчетУчетаБУ,"                   
	+ "Сумма,"                     
	+ "СуммаВзаиморасчетов,"
	+ "СчетУчетаНУ,"                  
	+ "ВидДвиженияСтоимостиФА";        

	Параметры.Вставить("ТаблицаПоступление",
		ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаПоступление, СписокОбязательныхКолонок));

	СписокОбязательныхКолонок = ""
	+ "Регистратор,"                  	 // <ДокументСсылка.*> - документ-регистратор движений
	+ "Период,"                       	 // <Дата> - период движений - дата документа
	+ "Организация,"                     // <СправочникСсылка.Организация> - организация, в которую приходуется товар	
	+ "Контрагент,"                  	 // <СправочникСсылка.Контрагенты> - контрагент - поставщик
	+ "ДоговорКонтрагента,"              // <СправочникСсылка.Организация> - договор контрагента, в рамках которого выполняется поставка
	+ "НеобходимостьОтраженияВНУ,"  	 // <Булево> - определяет необходимость отражения в НУ
	+ "ВалютаВзаиморасчетов,"  			 // <СправочникСсылка.Валюты> - валюта документа
	+ "ВидУчетаНУ,"  					 // <СправочникСсылка.ВидыУчетаНУ> - вид учета, указанный в документе
	+ "СтруктурноеПодразделение,"  		 // <СправочникСсылка.ПодразделенияОрганизаций> - структурное подразделение организации
	+ "СчетУчетаРасчетовСКонтрагентом,"  // <ПланСчетовСсылка.Типовой> - счет на котором ведутся расчеты с контрагентом по задолженности
	+ "СчетУчетаРасчетовПоАвансам";		 // <ПланСчетовСсылка.Типовой> - счет на котором ведутся расчеты с контрагентом по авансам


	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

// ДВИЖЕНИЯ СПИСАНИЕ НМА

Процедура СформироватьДвиженияСписаниеНМА(ТаблицаРеквизиты, ТаблицаСтоимостиНМА, ТаблицаАмортизацииНМА, Движения, Отказ) Экспорт

	Если ТаблицаСтоимостиНМА = Неопределено ИЛИ ТаблицаСтоимостиНМА.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизиты[0];
	
	Для Каждого СтрокаНМА Из ТаблицаСтоимостиНМА Цикл
		СтрокаАмортизацииНМА  = ТаблицаАмортизацииНМА.Найти(СтрокаНМА.НематериальныйАктив, "ОбъектУчета");
	
		Если СтрокаАмортизацииНМА = Неопределено тогда
			АмортизацияЗаМесяц = 0;
		Иначе
			АмортизацияЗаМесяц = СтрокаАмортизацииНМА.Сумма;
		КонецЕсли;

		СтрокаНМА.БалансоваяСтоимостьНМА = СтрокаНМА.СтоимостьБУ - СтрокаНМА.АмортизацияБУ - АмортизацияЗаМесяц;
		СуммаПроводки = СтрокаНМА.АмортизацияБУ + АмортизацияЗаМесяц;        

		Если СуммаПроводки <> 0  Тогда
			
			Проводка = Движения.Типовой.Добавить();
			
			Проводка.НомерЖурнала = Реквизиты.НомерЖурнала;
			Проводка.Период       = Реквизиты.Период;
			Проводка.Регистратор  = Реквизиты.Регистратор;
			Проводка.Организация  = Реквизиты.Организация;
			Проводка.Содержание   = НСтр("ru ='Списана амортизация'", ОбщегоНазначения.КодОсновногоЯзыка());
			Проводка.Сумма        = СуммаПроводки;
			
			Проводка.СчетДт       = СтрокаНМА.СчетДт;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НематериальныеАктивы", СтрокаНМА.НематериальныйАктив);
			
			Проводка.СчетКт       = СтрокаНМА.СчетКт;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "НематериальныеАктивы", СтрокаНМА.НематериальныйАктив);
			
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
			Проводка, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);
			
		КонецЕсли;

			ОстаточнаяСтоимостьНМА = СтрокаНМА.СтоимостьБУ - СтрокаНМА.АмортизацияБУ - АмортизацияЗаМесяц;
			Если ОстаточнаяСтоимостьНМА <> 0 Тогда

				Проводка =  Движения.Типовой.Добавить();

				Проводка.НомерЖурнала = Реквизиты.НомерЖурнала;
				Проводка.Период       = Реквизиты.Период;
				Проводка.Организация  = Реквизиты.Организация;
				Проводка.Содержание   = НСтр("ru ='Списана ост. стоимость'", ОбщегоНазначения.КодОсновногоЯзыка());
				Проводка.Сумма        = ОстаточнаяСтоимостьНМА;

				Проводка.СчетДт       = СтрокаНМА.СчетРасходовБУ;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаНМА.СубконтоРасходовБУ1);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаНМА.СубконтоРасходовБУ2);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтрокаНМА.СубконтоРасходовБУ3);
				
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ВнеоборотныеАктивы", СтрокаНМА.НематериальныйАктив);
								
				Проводка.СчетКт      = СтрокаНМА.СчетКт;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "НематериальныеАктивы", СтрокаНМА.НематериальныйАктив);

				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
					Проводка, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);
					
			   СтрокаНМА.ОстаточнаяСтоимостьНМА = ОстаточнаяСтоимостьНМА;
		   КонецЕсли;	
		   
		   Если Реквизиты.НеобходимостьОтраженияВНУ Тогда
			   
			   СформироватьДвижениеСписанияСтоимостиСписаниеНМАНУ(Реквизиты, СтрокаНМА, Движения, Отказ)
			
		   КонецЕсли;

	КонецЦикла;
	
	Движения.Типовой.Записывать = Истина;
	
	Если Реквизиты.НеобходимостьОтраженияВНУ Тогда
		Движения.Налоговый.Записывать = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьДвижениеСписанияСтоимостиСписаниеНМАНУ(Реквизиты, СтрокаНМА, Движения, Отказ)
	
	СчетУчетаФА = ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьСчетУчетаНУВнеоборотногоАктива(СтрокаНМА.НематериальныйАктив, Реквизиты.Организация, 
																								Реквизиты.Период, Реквизиты.ПризнакОбъектаФА);
		
	// Движения в НУ фиксированных активов
	Если  Реквизиты.ПризнакОбъектаФА Тогда
		// При выбытии стоимостный баланс группы уменьшается на сумму реализации		
		Если СтрокаНМА.СуммаНУ <> 0 Тогда
			
			ПроводкаНУ = Движения.Налоговый.Добавить();
			ПроводкаНУ.Период = Реквизиты.Период;
			ПроводкаНУ.Организация = Реквизиты.Организация;  			
			ПроводкаНУ.Содержание = НСтр("ru = 'Списание фиксированного актива в налоговом учете'", ОбщегоНазначения.КодОсновногоЯзыка());
			ПроводкаНУ.НомерЖурнала = Реквизиты.НомерЖурнала;
			
			ПроводкаНУ.СчетКт = СчетУчетаФА;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "ВнеоборотныеАктивы", СтрокаНМА.НематериальныйАктив);			
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт,   "ВидыДвиженияСтоимостиФА", Перечисления.ВидыДвиженияСтоимостиФА.Выбытие);
			
			ПроводкаНУ.СчетДт = СтрокаНМА.СчетРасходовНУ;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 1, СтрокаНМА.СубконтоРасходовНУ1);			
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 2, СтрокаНМА.СубконтоРасходовНУ2);							
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 3, СтрокаНМА.СубконтоРасходовНУ3);	
			
						
			ПроводкаНУ.Сумма 	= СтрокаНМА.СуммаНУ;			
						
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				ПроводкаНУ, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);
				
			ПроцедурыНалоговогоУчета.ВидУчетаНУ(ПроводкаНУ, Реквизиты.ВидУчетаНУ);
		КонецЕсли;	
		
		Если Реквизиты.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль Тогда
			СуммаВР = СтрокаНМА.БалансоваяСтоимостьНМА - СтрокаНМА.СуммаНУ;
			Если СуммаВР <> 0 Тогда

			ПроводкаНУ = Движения.Налоговый.Добавить();
			ПроводкаНУ.Период = Реквизиты.Период;
			ПроводкаНУ.Организация = Реквизиты.Организация;
			ПроводкаНУ.Содержание = НСтр("ru = 'Временная разница при списании ФА в налоговом учете'", ОбщегоНазначения.КодОсновногоЯзыка());			
			ПроводкаНУ.НомерЖурнала = Реквизиты.НомерЖурнала;
			
			ПроводкаНУ.СчетКт = СчетУчетаФА;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "ВнеоборотныеАктивы", СтрокаНМА.НематериальныйАктив);			
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт,   "ВидыДвиженияСтоимостиФА", Перечисления.ВидыДвиженияСтоимостиФА.Выбытие);
			
			ПроводкаНУ.СчетДт = СтрокаНМА.СчетРасходовНУ;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 1, СтрокаНМА.СубконтоРасходовНУ1);			
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 2, СтрокаНМА.СубконтоРасходовНУ2);							
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 3, СтрокаНМА.СубконтоРасходовНУ3);					
						

			ПроводкаНУ.Сумма = СуммаВР;		
			
			ПроводкаНУ.ВидУчетаКт = Справочники.ВидыУчетаНУ.ВР;									
			ПроводкаНУ.ВидУчетаДт = Справочники.ВидыУчетаНУ.ВР;									
			
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(ПроводкаНУ, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);
			
		КонецЕсли;
	КонецЕсли;
	
	ИначеЕсли СтрокаНМА.БалансоваяСтоимостьНМА <> 0 Тогда 			
		
			ПроводкаНУ = Движения.Налоговый.Добавить();
			ПроводкаНУ.Период = Реквизиты.Период;
			ПроводкаНУ.Организация = Реквизиты.Организация;  			
			ПроводкаНУ.Содержание = НСтр("ru = 'Списание внеоборотного актива в налоговом учете'", ОбщегоНазначения.КодОсновногоЯзыка());			
			ПроводкаНУ.НомерЖурнала = Реквизиты.НомерЖурнала;
			
			ПроводкаНУ.СчетКт = СчетУчетаФА;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "ВнеоборотныеАктивы", СтрокаНМА.НематериальныйАктив);			
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт,   "ВидыДвиженияСтоимостиФА", Перечисления.ВидыДвиженияСтоимостиФА.Выбытие);
			
			ПроводкаНУ.СчетДт = СтрокаНМА.СчетРасходовНУ;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 1, СтрокаНМА.СубконтоРасходовНУ1);			
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 2, СтрокаНМА.СубконтоРасходовНУ2);							
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 3, СтрокаНМА.СубконтоРасходовНУ3);				
								
			ПроводкаНУ.Сумма = СтрокаНМА.БалансоваяСтоимостьНМА;						
			
			ПроцедурыНалоговогоУчета.ВидУчетаНУ(ПроводкаНУ, Реквизиты.ВидУчетаНУ);			
					
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(ПроводкаНУ, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);
				
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ФУНКЦИИ И ПРОЦЕДУРЫ

///////////////////////////////////////////////////////////////////////////////
// Определение состояния НМА

Процедура ПроверитьВозможностьИзмененияСостоянияНМА(ТаблицаРеквизиты, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыВозможностьИзмененияСостоянияНМА(ТаблицаРеквизиты);

	Реквизиты = Параметры.Реквизиты[0];

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СостоянияНМАОрганизацийСрезПоследних.НематериальныйАктив,
	|	СостоянияНМАОрганизацийСрезПоследних.НематериальныйАктив.Код КАК КодНМА,
	|	СостоянияНМАОрганизацийСрезПоследних.Период,
	|	СостоянияНМАОрганизацийСрезПоследних.Регистратор
	|ИЗ
	|	РегистрСведений.СостоянияНМАОрганизаций.СрезПоследних(
	|		&Период,
	|		Организация = &Организация
	|		    И НематериальныйАктив В (&НематериальныеАктивы)
	|		    И Состояние = &Состояние
	|		    И (НЕ Регистратор = &ТекущийРегистратор)) КАК СостоянияНМАОрганизацийСрезПоследних";
	
	Запрос.УстановитьПараметр("Организация",          Реквизиты.Организация);
	Запрос.УстановитьПараметр("Состояние",            Реквизиты.Состояние);
	Запрос.УстановитьПараметр("НематериальныеАктивы", Реквизиты.НематериальныйАктив);
	Запрос.УстановитьПараметр("ТекущийРегистратор",   Реквизиты.Регистратор);
	Запрос.УстановитьПараметр("Период",               Новый МоментВремени(Реквизиты.Период, Реквизиты.Регистратор));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();

		ШаблонСообщения = НСтр("ru = 'Для НМА <%1> код <%2> в организации <%3> уже зафиксировано состояние <%4>
			|документом <%5>. Дата состояния: %6'");

		Пока Выборка.Следующий() Цикл
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Выборка.НематериальныйАктив,
				Выборка.КодНМА, Реквизиты.Организация, Реквизиты.Состояние, Выборка.Регистратор, Формат(Выборка.Период, "ДФ=dd.MM.yyyy"));
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);
		КонецЦикла;

		Возврат;
	КонецЕсли;

КонецПроцедуры

Функция ПодготовитьПараметрыВозможностьИзмененияСостоянияНМА(ТаблицаРеквизиты)

	Параметры = Новый Структура;

	СписокОбязательныхКолонок = ""
	+ "НематериальныйАктив," // <СправочникСсылка.НематериальныхАктивов>
	+ "Период,"              // <Дата>
	+ "Организация,"         // <СправочникСсылка.Организации>
	+ "Состояние,"           // <ПеречислениеСсылка.СостоянияНМА> - состояние НМА, которое требуется установить
	+ "Регистратор";         // <ДокументСсылка.*>

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции


///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ РАСЧЕТА АМОРТИЗАЦИИ НМА 


///////////////////////////////////////////////////////////////////////////////
// РАСПРЕДЕЛЕНИЕ АМОРТИЗАЦИИ  

Функция ПодготовитьТаблицуАмортизацииНМАБухРегл(ТаблицаРеквизиты, ТаблицаНМА = Неопределено,
											ВыдаватьСообщения = Истина) Экспорт
											
	Параметры = ПодготовитьПараметрыРасчетаАмортизацииНМА(ТаблицаРеквизиты, ТаблицаНМА);
	Реквизиты = Параметры.Реквизиты[0];

	// определим признак применения параметров амортизации в тек. месяце
	ПрименятьПараметрыАмортизацииВТекМесяце = УправлениеВнеоборотнымиАктивамиСервер.ПолучитьПризнакПримененияПараметровАмортизацииВТекМесяце(Реквизиты.Организация,Реквизиты.Период); 
	ПериодПараметровАмортизации = ?(ПрименятьПараметрыАмортизацииВТекМесяце, Новый Граница(КонецМесяца(Реквизиты.Период)), НачалоМесяца(Реквизиты.Период));

	Если ТаблицаНМА = Неопределено Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Организация",   			     Реквизиты.Организация);
	    Запрос.УстановитьПараметр("СтруктурноеПодразделение",    Реквизиты.СтруктурноеПодразделение);
	    Запрос.УстановитьПараметр("ПериодПараметровАмортизации", ПериодПараметровАмортизации);
		
		Запрос.УстановитьПараметр("СубконтоНМА", 				 ПланыВидовХарактеристик.ВидыСубконтоТиповые.НематериальныеАктивы);
		
		Запрос.Текст = "ВЫБРАТЬ
					   |	ВЫРАЗИТЬ(ТиповойОстатки.Субконто1 КАК Справочник.НематериальныеАктивы) КАК НематериальныйАктив
		               |ИЗ
		               |	РегистрБухгалтерии.Типовой.Остатки(&ПериодПараметровАмортизации, , &СубконтоНМА, Организация = &Организация И СтруктурноеПодразделение = &СтруктурноеПодразделение) КАК ТиповойОстатки";
		
		ТаблицаНМА = Запрос.Выполнить().Выгрузить();		
	КонецЕсли;
	
	Если ТипЗнч(ТаблицаНМА) = Тип("ТаблицаЗначений") Тогда
		НематериальныйАктив = ТаблицаНМА.ВыгрузитьКолонку("НематериальныйАктив");
	Иначе
		НематериальныйАктив = ТаблицаНМА;
	КонецЕсли;
	
	
	ТаблицаАмортизации = Новый ТаблицаЗначений();

    ТаблицаАмортизации.Колонки.Добавить("ОбъектУчета", 					Новый ОписаниеТипов("СправочникСсылка.НематериальныеАктивы"));
    ТаблицаАмортизации.Колонки.Добавить("СчетУчетаБУ",			 		Новый ОписаниеТипов("ПланСчетовСсылка.Типовой"));
    ТаблицаАмортизации.Колонки.Добавить("СчетАмортизации",	 		    Новый ОписаниеТипов("ПланСчетовСсылка.Типовой"));
    ТаблицаАмортизации.Колонки.Добавить("НаправлениеАмортизации", 		Новый ОписаниеТипов("СправочникСсылка.СпособыОтраженияРасходовПоАмортизации"));
	ТаблицаАмортизации.Колонки.Добавить("ПризнакФиксированногоАктива",  Новый ОписаниеТипов("Булево"));
    ТаблицаАмортизации.Колонки.Добавить("Сумма",                    	ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаАмортизации.Колонки.Добавить("ИмяСписка",                    ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповСтроки(100));
	ТаблицаАмортизации.Колонки.Добавить("НомерСтроки",                   ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(5,0));
	ТаблицаАмортизации.Колонки.Добавить("СинонимСписка",                ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповСтроки(100));
	ТаблицаАмортизации.Колонки.Добавить("Период",                       ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповДаты(ЧастиДаты.ДатаВремя));
	ТаблицаАмортизации.Колонки.Добавить("Регистратор",                  );
	ТаблицаАмортизации.Колонки.Добавить("Организация",  	            Новый ОписаниеТипов("СправочникСсылка.Организации"));
    ТаблицаАмортизации.Колонки.Добавить("СтруктурноеПодразделение",  	Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	ТаблицаАмортизации.Колонки.Добавить("КорСтруктурноеПодразделение",  Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	ТаблицаАмортизации.Колонки.Добавить("ТекущееПодразделение",			Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
    ТаблицаАмортизации.Колонки.Добавить("ТекущееМОЛ",					Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	
		
	СписокНМА = ПолучитьСписокНМАОрганизации(ПериодПараметровАмортизации, Реквизиты.Организация, НематериальныйАктив);
    
    Если СписокНМА.Количество()=0 тогда
    	//Не обнаружено объектов 
    	Возврат ТаблицаАмортизации;
    КонецЕсли;
	
	Запрос = Новый Запрос();
    Запрос.УстановитьПараметр("НачалоГода",    				 НачалоГода(Реквизиты.Период));
    Запрос.УстановитьПараметр("Организация",   				 Реквизиты.Организация);
    Запрос.УстановитьПараметр("СтруктурноеПодразделение",	 Реквизиты.СтруктурноеПодразделение);	
    Запрос.УстановитьПараметр("НачалоПериода", 				 НачалоМесяца(Реквизиты.Период));
    Запрос.УстановитьПараметр("КонецПериода",  				 КонецМесяца(Реквизиты.Период));
    Запрос.УстановитьПараметр("Период",  	   				 Реквизиты.Период);
    Запрос.УстановитьПараметр("СписокНМА", 					 СписокНМА);
    Запрос.УстановитьПараметр("ПериодПараметровАмортизации", ПериодПараметровАмортизации);
	Запрос.УстановитьПараметр("СубконтоНМА", 				 ПланыВидовХарактеристик.ВидыСубконтоТиповые.НематериальныеАктивы);
    Запрос.УстановитьПараметр("СнятоСУчета", 				 Перечисления.ВидыСостоянийНМА.Списан); 
	Запрос.УстановитьПараметр("Регистратор", 				 Реквизиты.Регистратор); 
	
	// Выбывший актив может иметь стоимостной баланс и участвовать в учете ст. 
	СостоянияФА = Новый СписокЗначений();	
	СостоянияФА.Добавить(Перечисления.ВидыСостоянийФА.ПринятКУчету);
	СостоянияФА.Добавить(Перечисления.ВидыСостоянийФА.Выбыл);                  	
	Запрос.УстановитьПараметр("СостоянияФА", 	СостоянияФА);	

	Запрос.Текст =   "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                 |	СостоянияНМАОрганизацийСрезПоследних.НематериальныйАктив КАК НематериальныйАктив
	                 |ПОМЕСТИТЬ СнятыеСУчета
	                 |ИЗ
	                 |	РегистрСведений.СостоянияНМАОрганизаций.СрезПоследних(
	                 |			&Период,
	                 |			Организация = &Организация
	                 |				И НематериальныйАктив В (&СписокНМА)
	                 |				И Состояние = &СнятоСУчета
	                 |				И Регистратор <> &Регистратор) КАК СостоянияНМАОрганизацийСрезПоследних
	                 |
	                 |ИНДЕКСИРОВАТЬ ПО
	                 |	НематериальныйАктив
	                 |;
	                 |
	                 |////////////////////////////////////////////////////////////////////////////////
	                 |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                 |	ПервоначальныеСведенияОНМАОрганизацийСрезПоследних.Организация,
	                 |	ПервоначальныеСведенияОНМАОрганизацийСрезПоследних.НематериальныйАктив КАК НематериальныйАктив,
	                 |	ПервоначальныеСведенияОНМАОрганизацийСрезПоследних.СрокПолезногоИспользования,
	                 |	ПервоначальныеСведенияОНМАОрганизацийСрезПоследних.СтоимостьДляВычисленияАмортизации,
	                 |	ПервоначальныеСведенияОНМАОрганизацийСрезПоследних.ОбъемПродукцииРаботДляВычисленияАмортизации,
	                 |	ПервоначальныеСведенияОНМАОрганизацийСрезПоследних.Период,
	                 |	ПервоначальныеСведенияОНМАОрганизацийСрезПоследних.СпособНачисленияАмортизации,
	                 |	ПервоначальныеСведенияОНМАОрганизацийСрезПоследних.ПервоначальнаяСтоимость КАК ПервоначальнаяСтоимость,
	                 |	ПервоначальныеСведенияОНМАОрганизацийСрезПоследних.НачислятьАмортизацию
	                 |ПОМЕСТИТЬ ПервоначальныеСведенияОНМАОрганизацийСрезПоследних
	                 |ИЗ
	                 |	РегистрСведений.ПервоначальныеСведенияНМАБухгалтерскийУчет.СрезПоследних(
	                 |			&ПериодПараметровАмортизации,
	                 |			Организация = &Организация
	                 |				И НематериальныйАктив В (&СписокНМА)) КАК ПервоначальныеСведенияОНМАОрганизацийСрезПоследних
	                 |
	                 |ИНДЕКСИРОВАТЬ ПО
	                 |	НематериальныйАктив
	                 |;
	                 |
	                 |////////////////////////////////////////////////////////////////////////////////
	                 |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                 |	СпособыОтраженияРасходовПоАмортизацииНМАБухгалтерскийУчетСрезПоследних.НематериальныйАктив КАК НематериальныйАктив,
	                 |	СпособыОтраженияРасходовПоАмортизацииНМАБухгалтерскийУчетСрезПоследних.СпособОтраженияРасходовПоАмортизации
	                 |ПОМЕСТИТЬ СпособыОтраженияРасходовПоАмортизацииНМАБухгалтерскийУчетСрезПоследних
	                 |ИЗ
	                 |	РегистрСведений.СпособыОтраженияРасходовПоАмортизацииНМАБухгалтерскийУчет.СрезПоследних(
	                 |			&ПериодПараметровАмортизации,
	                 |			Организация = &Организация
	                 |				И НематериальныйАктив В (&СписокНМА)) КАК СпособыОтраженияРасходовПоАмортизацииНМАБухгалтерскийУчетСрезПоследних
	                 |
	                 |ИНДЕКСИРОВАТЬ ПО
	                 |	НематериальныйАктив
	                 |;
	                 |
	                 |////////////////////////////////////////////////////////////////////////////////
	                 |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                 |	СчетаУчетаНМАСрезПоследних.НематериальныйАктив КАК НематериальныйАктив,
	                 |	СчетаУчетаНМАСрезПоследних.СчетУчетаБУ КАК СчетУчетаБУ,
	                 |	СчетаУчетаНМАСрезПоследних.СчетНачисленияАмортизацииБУ КАК СчетНачисленияАмортизацииБУ
	                 |ПОМЕСТИТЬ СчетаУчетаНМАСрезПоследних
	                 |ИЗ
	                 |	РегистрСведений.СчетаУчетаНМА.СрезПоследних(
	                 |			&ПериодПараметровАмортизации,
	                 |			Организация = &Организация
	                 |				И НематериальныйАктив В (&СписокНМА)) КАК СчетаУчетаНМАСрезПоследних
	                 |
	                 |ИНДЕКСИРОВАТЬ ПО
	                 |	НематериальныйАктив,
	                 |	СчетУчетаБУ,
	                 |	СчетНачисленияАмортизацииБУ
	                 |;
	                 |
	                 |////////////////////////////////////////////////////////////////////////////////
	                 |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                 |	СтоимостьНМА_БУ.СтруктурноеПодразделение,
	                 |	СтоимостьНМА_БУ.СуммаНачальныйОстатокДт,
	                 |	СтоимостьНМА_БУ.СуммаКонечныйОстатокДт,
	                 |	СтоимостьНМА_БУ.СуммаКонечныйОстатокКт,
	                 |	СтоимостьНМА_БУ.СуммаОборотКт,
	                 |	ВЫРАЗИТЬ(СтоимостьНМА_БУ.Субконто1 КАК Справочник.НематериальныеАктивы) КАК Субконто1,
	                 |	СтоимостьНМА_БУ.Счет КАК Счет
	                 |ПОМЕСТИТЬ СтоимостьНМА_БУ
	                 |ИЗ
	                 |	РегистрБухгалтерии.Типовой.ОстаткиИОбороты(
	                 |			&НачалоПериода,
	                 |			&КонецПериода,
	                 |			Период,
	                 |			,
	                 |			,
	                 |			&СубконтоНМА,
	                 |			Организация = &Организация
	                 |				И СтруктурноеПодразделение = &СтруктурноеПодразделение
	                 |				И Субконто1 В (&СписокНМА)) КАК СтоимостьНМА_БУ
	                 |
	                 |ИНДЕКСИРОВАТЬ ПО
	                 |	Субконто1,
	                 |	Счет
	                 |;
	                 |
	                 |////////////////////////////////////////////////////////////////////////////////
	                 |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                 |	ВыработкаНМАОбороты.КоличествоОборот,
	                 |	ВыработкаНМАОбороты.НематериальныйАктив КАК НематериальныйАктив
	                 |ПОМЕСТИТЬ ВыработкаНМАОбороты
	                 |ИЗ
	                 |	РегистрНакопления.ВыработкаНМА.Обороты(&НачалоПериода, &КонецПериода, Месяц, НематериальныйАктив В (&СписокНМА)) КАК ВыработкаНМАОбороты
	                 |
	                 |ИНДЕКСИРОВАТЬ ПО
	                 |	НематериальныйАктив
	                 |;
	                 |
	                 |////////////////////////////////////////////////////////////////////////////////
	                 |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                 |	Стоимость.СтруктурноеПодразделение,
	                 |	ВЫРАЗИТЬ(Стоимость.Субконто1 КАК Справочник.НематериальныеАктивы) КАК Субконто1,
	                 |	Стоимость.СуммаОстатокДт,
	                 |	Стоимость.СуммаОстатокКт,
	                 |	Стоимость.Счет КАК Счет
	                 |ПОМЕСТИТЬ Стоимость
	                 |ИЗ
	                 |	РегистрБухгалтерии.Типовой.Остатки(
	                 |			&НачалоГода,
	                 |			,
	                 |			&СубконтоНМА,
	                 |			Организация = &Организация
	                 |				И СтруктурноеПодразделение = &СтруктурноеПодразделение
	                 |				И Субконто1 В (&СписокНМА)) КАК Стоимость
	                 |
	                 |ИНДЕКСИРОВАТЬ ПО
	                 |	Субконто1,
	                 |	Счет
	                 |;
	                 |
	                 |////////////////////////////////////////////////////////////////////////////////
	                 |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                 |	Стоимость.СтруктурноеПодразделение,
	                 |	СчетаУчетаНМАСрезПоследних.НематериальныйАктив КАК НематериальныйАктив,
	                 |	Стоимость.СуммаОстатокДт - ЕСТЬNULL(Амортизация.СуммаОстатокКт, 0) КАК СтоимостьНаНачалоГода
	                 |ПОМЕСТИТЬ СтоимостьНМАНаНачалоГода_БУ
	                 |ИЗ
	                 |	РегистрСведений.СчетаУчетаНМА.СрезПоследних(
	                 |			&НачалоГода,
	                 |			Организация = &Организация
	                 |				И НематериальныйАктив В (&СписокНМА)) КАК СчетаУчетаНМАСрезПоследних
	                 |		ЛЕВОЕ СОЕДИНЕНИЕ Стоимость КАК Стоимость
	                 |		ПО СчетаУчетаНМАСрезПоследних.НематериальныйАктив = Стоимость.Субконто1
	                 |			И СчетаУчетаНМАСрезПоследних.СчетУчетаБУ = Стоимость.Счет
	                 |		ЛЕВОЕ СОЕДИНЕНИЕ Стоимость КАК Амортизация
	                 |		ПО СчетаУчетаНМАСрезПоследних.НематериальныйАктив = Амортизация.Субконто1
	                 |			И СчетаУчетаНМАСрезПоследних.СчетНачисленияАмортизацииБУ = Амортизация.Счет
	                 |
	                 |ИНДЕКСИРОВАТЬ ПО
	                 |	НематериальныйАктив
	                 |;
	                 |
	                 |////////////////////////////////////////////////////////////////////////////////
	                 |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                 |	ВЫРАЗИТЬ(ОбъектыНалоговогоУчетаФА.ФиксированныйАктив КАК Справочник.НематериальныеАктивы) КАК ФиксированныйАктив
	                 |ПОМЕСТИТЬ ОбъектыНалоговогоУчетаФА
	                 |ИЗ
	                 |	РегистрСведений.ОбъектыНалоговогоУчетаФА.СрезПоследних(
	                 |			&КонецПериода,
	                 |			Организация = &Организация
	                 |				И СостояниеФиксированногоАктива В (&СостоянияФА)
	                 |				И ВЫРАЗИТЬ(ФиксированныйАктив КАК Справочник.НематериальныеАктивы) В (&СписокНМА)) КАК ОбъектыНалоговогоУчетаФА
	                 |
	                 |ИНДЕКСИРОВАТЬ ПО
	                 |	ФиксированныйАктив
	                 |;
	                 |
	                 |////////////////////////////////////////////////////////////////////////////////
	                 |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                 |	СтоимостьНМА_БУ.СтруктурноеПодразделение,
	                 |	ПервоначальныеСведенияОНМАОрганизацийСрезПоследних.НематериальныйАктив,
	                 |	ПервоначальныеСведенияОНМАОрганизацийСрезПоследних.НематериальныйАктив.Код КАК Код,
	                 |	СтоимостьНМА_БУ.СуммаНачальныйОстатокДт КАК СтоимостьНачальныйОстаток,
	                 |	СтоимостьНМА_БУ.СуммаКонечныйОстатокДт КАК СтоимостьКонечныйОстаток,
	                 |	АмортизацияНМА_БУ.СуммаКонечныйОстатокКт КАК АмортизацияКонечныйОстаток,
	                 |	АмортизацияНМА_БУ.СуммаОборотКт КАК АмортизацияОборот,
	                 |	ВыработкаНМАОбороты.КоличествоОборот КАК Количество,
	                 |	ПервоначальныеСведенияОНМАОрганизацийСрезПоследних.СрокПолезногоИспользования КАК СрокИспользованияДляВычисленияАмортизации,
	                 |	ПервоначальныеСведенияОНМАОрганизацийСрезПоследних.СтоимостьДляВычисленияАмортизации КАК СтоимостьДляВычисленияАмортизации,
	                 |	ПервоначальныеСведенияОНМАОрганизацийСрезПоследних.ОбъемПродукцииРаботДляВычисленияАмортизации,
	                 |	ПервоначальныеСведенияОНМАОрганизацийСрезПоследних.Период,
	                 |	СчетаУчетаНМАСрезПоследних.СчетУчетаБУ,
	                 |	СчетаУчетаНМАСрезПоследних.СчетНачисленияАмортизацииБУ,
	                 |	ПервоначальныеСведенияОНМАОрганизацийСрезПоследних.СпособНачисленияАмортизации,
	                 |	ПервоначальныеСведенияОНМАОрганизацийСрезПоследних.ПервоначальнаяСтоимость,
	                 |	СпособыОтраженияРасходовПоАмортизацииНМАБухгалтерскийУчетСрезПоследних.СпособОтраженияРасходовПоАмортизации КАК СпособОтраженияРасходовПоАмортизации,
	                 |	ВЫБОР
	                 |		КОГДА ОбъектыНалоговогоУчетаФА.ФиксированныйАктив ЕСТЬ NULL 
	                 |			ТОГДА ЛОЖЬ
	                 |		ИНАЧЕ ИСТИНА
	                 |	КОНЕЦ КАК ПризнакФиксированногоАктива,
	                 |	СтоимостьНМАНаНачалоГода_БУ.СтоимостьНаНачалоГода
	                 |ИЗ
	                 |	ПервоначальныеСведенияОНМАОрганизацийСрезПоследних КАК ПервоначальныеСведенияОНМАОрганизацийСрезПоследних
	                 |		ЛЕВОЕ СОЕДИНЕНИЕ СпособыОтраженияРасходовПоАмортизацииНМАБухгалтерскийУчетСрезПоследних КАК СпособыОтраженияРасходовПоАмортизацииНМАБухгалтерскийУчетСрезПоследних
	                 |		ПО ПервоначальныеСведенияОНМАОрганизацийСрезПоследних.НематериальныйАктив = СпособыОтраженияРасходовПоАмортизацииНМАБухгалтерскийУчетСрезПоследних.НематериальныйАктив
	                 |		ЛЕВОЕ СОЕДИНЕНИЕ СчетаУчетаНМАСрезПоследних КАК СчетаУчетаНМАСрезПоследних
	                 |			ЛЕВОЕ СОЕДИНЕНИЕ СтоимостьНМА_БУ КАК СтоимостьНМА_БУ
	                 |			ПО СчетаУчетаНМАСрезПоследних.НематериальныйАктив = СтоимостьНМА_БУ.Субконто1
	                 |				И СчетаУчетаНМАСрезПоследних.СчетУчетаБУ = СтоимостьНМА_БУ.Счет
	                 |			ЛЕВОЕ СОЕДИНЕНИЕ СтоимостьНМА_БУ КАК АмортизацияНМА_БУ
	                 |			ПО СчетаУчетаНМАСрезПоследних.НематериальныйАктив = АмортизацияНМА_БУ.Субконто1
	                 |				И СчетаУчетаНМАСрезПоследних.СчетНачисленияАмортизацииБУ = АмортизацияНМА_БУ.Счет
	                 |		ПО ПервоначальныеСведенияОНМАОрганизацийСрезПоследних.НематериальныйАктив = СчетаУчетаНМАСрезПоследних.НематериальныйАктив
	                 |		ЛЕВОЕ СОЕДИНЕНИЕ ВыработкаНМАОбороты КАК ВыработкаНМАОбороты
	                 |		ПО ПервоначальныеСведенияОНМАОрганизацийСрезПоследних.НематериальныйАктив = ВыработкаНМАОбороты.НематериальныйАктив
	                 |		ЛЕВОЕ СОЕДИНЕНИЕ СтоимостьНМАНаНачалоГода_БУ КАК СтоимостьНМАНаНачалоГода_БУ
	                 |		ПО ПервоначальныеСведенияОНМАОрганизацийСрезПоследних.НематериальныйАктив = СтоимостьНМАНаНачалоГода_БУ.НематериальныйАктив
	                 |		ЛЕВОЕ СОЕДИНЕНИЕ СнятыеСУчета КАК СнятыеСУчета
	                 |		ПО ПервоначальныеСведенияОНМАОрганизацийСрезПоследних.НематериальныйАктив = СнятыеСУчета.НематериальныйАктив
	                 |		ЛЕВОЕ СОЕДИНЕНИЕ ОбъектыНалоговогоУчетаФА КАК ОбъектыНалоговогоУчетаФА
	                 |		ПО ПервоначальныеСведенияОНМАОрганизацийСрезПоследних.НематериальныйАктив = ОбъектыНалоговогоУчетаФА.ФиксированныйАктив
	                 |ГДЕ
	                 |	ПервоначальныеСведенияОНМАОрганизацийСрезПоследних.НачислятьАмортизацию = ИСТИНА
	                 |	И СнятыеСУчета.НематериальныйАктив ЕСТЬ NULL ";
		
	ВыборкаПоНМА = Запрос.Выполнить().Выбрать();   
	ВидРегламентнойОперации = Перечисления.ВидыРегламентныхОпераций.АмортизацияНМАБУ;

	НомерСтроки = 1;
	
	Пока ВыборкаПоНМА.Следующий() Цикл
		
		Если ВыборкаПоНМА.АмортизацияОборот <> 0 И ВыборкаПоНМА.АмортизацияОборот <> Null Тогда
			Если ВыдаватьСообщения = Истина И Не (НематериальныйАктив = Неопределено) Тогда
				ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации(СтрШаблон(НСтр("ru = 'Бух. расчет амортизации: для нематериального актива <%1> код <%2> амортизация в этом месяце уже начислялась'"),
					ВыборкаПоНМА.НематериальныйАктив, СокрЛП(ВыборкаПоНМА.Код)),
					ВыборкаПоНМА.НематериальныйАктив, , Реквизиты.Объект, ВидРегламентнойОперации, Ложь);
			КонецЕсли;
			Продолжить; // по указанному НМА в этом месяце уже начисляли амортизацию 
		КонецЕсли;
		
		СуммаАмортизации = 0;
		
		Если НЕ ЗначениеЗаполнено(ВыборкаПоНМА.СчетНачисленияАмортизацииБУ) Тогда
			Если ВыдаватьСообщения = Истина Тогда
				ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации(СтрШаблон(НСтр("ru = 'Бух. расчет амортизации: для нематериального актива <%1> код <%2> не указан счет для начисления амортизации'"),
					ВыборкаПоНМА.НематериальныйАктив, СокрЛП(ВыборкаПоНМА.Код)),
					ВыборкаПоНМА.НематериальныйАктив, , Реквизиты.Объект, ВидРегламентнойОперации);
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ВыборкаПоНМА.СпособНачисленияАмортизации) Тогда
			Если ВыдаватьСообщения = Истина Тогда
				ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации(СтрШаблон(НСтр("ru = 'Бух. расчет амортизации: для нематериального актива <%1> код <%2> не указан способ амортизации'"),
					ВыборкаПоНМА.НематериальныйАктив, СокрЛП(ВыборкаПоНМА.Код)),
					ВыборкаПоНМА.НематериальныйАктив, , Реквизиты.Объект, ВидРегламентнойОперации);
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ВыборкаПоНМА.СтоимостьДляВычисленияАмортизации) Тогда
			Если ВыдаватьСообщения = Истина Тогда
				ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации(СтрШаблон(НСтр("ru = 'Бух. расчет амортизации: для нематериального актива <%1> код <%2> стоимость равна 0'"),
					ВыборкаПоНМА.НематериальныйАктив, СокрЛП(ВыборкаПоНМА.Код)),
					ВыборкаПоНМА.НематериальныйАктив, , Реквизиты.Объект, ВидРегламентнойОперации);
			КонецЕсли; 
			Продолжить;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ВыборкаПоНМА.СрокИспользованияДляВычисленияАмортизации) Тогда
			Если ВыдаватьСообщения = Истина Тогда
				ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации(СтрШаблон(НСтр("ru = 'Бух. расчет амортизации: для нематериального актива <%1> код <%2> срок использования равен 0'"),
					ВыборкаПоНМА.НематериальныйАктив, СокрЛП(ВыборкаПоНМА.Код)),
					ВыборкаПоНМА.НематериальныйАктив, , Реквизиты.Объект, ВидРегламентнойОперации);
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		СуммаАмортизации = 0;

		Если ВыборкаПоНМА.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииНМА.Линейный Тогда
			
			СуммаГодовойАмортизации = ВыборкаПоНМА.СтоимостьДляВычисленияАмортизации/ВыборкаПоНМА.СрокИспользованияДляВычисленияАмортизации * 12;
			СуммаАмортизации        = СуммаГодовойАмортизации / 12;
			
		ИначеЕсли ВыборкаПоНМА.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииНМА.Производственный Тогда
			
			Если НЕ ЗначениеЗаполнено(ВыборкаПоНМА.Количество) Тогда
				Продолжить;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ВыборкаПоНМА.ОбъемПродукцииРаботДляВычисленияАмортизации) Тогда
				Если ВыдаватьСообщения = Истина Тогда
					ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации(СтрШаблон(НСтр("ru = 'Бух. расчет амортизации: для нематериального актива <%1> код <%2> объем продукции для вычисления не определен'"),
						ВыборкаПоНМА.НематериальныйАктив, СокрЛП(ВыборкаПоНМА.Код)),
						ВыборкаПоНМА.НематериальныйАктив, , Реквизиты.Объект, ВидРегламентнойОперации);
				КонецЕсли;
				Продолжить;
			КонецЕсли;
			
			СуммаАмортизации = ВыборкаПоНМА.СтоимостьДляВычисленияАмортизации * ВыборкаПоНМА.Количество / ВыборкаПоНМА.ОбъемПродукцииРаботДляВычисленияАмортизации;
			
		ИначеЕсли ВыборкаПоНМА.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииНМА.УменьшаемогоОстатка Тогда
			
			Если Год(ВыборкаПоНМА.Период) = Год(Реквизиты.Период) Тогда
				СтоимостьИтоговая = ВыборкаПоНМА.СтоимостьДляВычисленияАмортизации;
			Иначе
				СтоимостьИтоговая = ВыборкаПоНМА.СтоимостьНаНачалоГода;
			КонецЕсли;
			СтоимостьИтоговая = ?(СтоимостьИтоговая = NULL, 0, СтоимостьИтоговая);
			
			СуммаГодовойАмортизации = СтоимостьИтоговая / ВыборкаПоНМА.СрокИспользованияДляВычисленияАмортизации * 12;
			СуммаАмортизации        = СуммаГодовойАмортизации / 12;
			
		КонецЕсли;
		ВсегоОсталосьСписать = ?(ВыборкаПоНМА.СтоимостьКонечныйОстаток    = Null, 0, ВыборкаПоНМА.СтоимостьКонечныйОстаток) - 
				  			   ?(ВыборкаПоНМА.АмортизацияКонечныйОстаток = Null, 0, ВыборкаПоНМА.АмортизацияКонечныйОстаток);
							   
		//Списываем остаток если он есть
		Разница = 0;
		Разница = Цел(ВсегоОсталосьСписать - СуммаАмортизации);
		
		Если Разница = 0 Тогда 
			СуммаАмортизации  = ВсегоОсталосьСписать;
		Иначе 
			СуммаАмортизации  = Макс(0,Мин(СуммаАмортизации, ВсегоОсталосьСписать));
		КонецЕсли;

		СтрокаАмортизации = ТаблицаАмортизации.Добавить();
		СтрокаАмортизации.СтруктурноеПодразделение		= ВыборкаПоНМА.СтруктурноеПодразделение;
		СтрокаАмортизации.КорСтруктурноеПодразделение	= ВыборкаПоНМА.СтруктурноеПодразделение;
		СтрокаАмортизации.ИмяСписка             		= "РаспределениеАмортизацииПоНаправлениямРегл";
		СтрокаАмортизации.СинонимСписка            		= НСтр("ru='НМА'");
		СтрокаАмортизации.ОбъектУчета             		= ВыборкаПоНМА.НематериальныйАктив;
		СтрокаАмортизации.СчетУчетаБУ           		= ВыборкаПоНМА.СчетУчетаБУ;
		СтрокаАмортизации.СчетАмортизации      		    = ВыборкаПоНМА.СчетНачисленияАмортизацииБУ;
		СтрокаАмортизации.НаправлениеАмортизации 		= ВыборкаПоНМА.СпособОтраженияРасходовПоАмортизации;
		СтрокаАмортизации.ПризнакФиксированногоАктива 	= ВыборкаПоНМА.ПризнакФиксированногоАктива;		
		СтрокаАмортизации.Сумма                    		= СуммаАмортизации;
		СтрокаАмортизации.Период                    	= Реквизиты.Период;
		СтрокаАмортизации.Организация                   = Реквизиты.Организация;
		СтрокаАмортизации.Регистратор                   = Реквизиты.Регистратор; 
		СтрокаАмортизации.НомерСтроки                   = НомерСтроки; 
		
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;

    Возврат ТаблицаАмортизации;

КонецФункции // РасчетАмортизацииНМАБухРегл()

//Получает список НМА, учитываемых в указанной организации
// НМА включается в список если последняя организация, в которой он учитывался соответсвует переданной в функцию
//
//Параметры:
//	Период - Дата или момент времени - период на который определяется принадлежность организации
//	Орагнизация - СправочникСсылка.Орагнизации
//	НУ 			- булево - признак необходимости определения отражения объекта в НУ, по умолчанию - ложь 
//	ОбъектНМА	- Массив, СписокЗначений или СправочникСсылка.НематериальныеАктивы - список объектов НМА,
//	по которому необходимо отфильтровать полученный результат
//
//Возвращаемое значение:
// 	Массив ссылок СправочникСсылка.НематериальныеАктивы, если ни обин объект не подобран - пустой массив!
//
Функция ПолучитьСписокНМАОрганизации(Период, Организация, ОбъектНМА = Неопределено) Экспорт
	
	ТекстУсловия = ?(ОбъектНМА = Неопределено,""," И НематериальныйАктив В(&НематериальныйАктив) ");
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.НематериальныйАктив
		|ИЗ
		|	РегистрСведений.ПервоначальныеСведенияНМАБухгалтерскийУчет.СрезПоследних(&Период, Организация = &Организация "+ТекстУсловия+" ) КАК ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних
		|";
	
	Запрос.УстановитьПараметр("Период",Период );
	Запрос.УстановитьПараметр("Организация",Организация );
	Запрос.УстановитьПараметр("НематериальныйАктив",ОбъектНМА);
	
	Результат = Запрос.Выполнить();	
	Если Результат.Пустой() Тогда		
		Возврат Новый Массив();
	КонецЕсли; 
	
	ТаблицаОбъектов = Результат.Выгрузить();
	Возврат ТаблицаОбъектов.ВыгрузитьКолонку("НематериальныйАктив");
	
КонецФункции // ПолучитьСписокНМАОрганизации()

Функция ПодготовитьПараметрыРасчетаАмортизацииНМА(ТаблицаРеквизиты, ТаблицаНМА = Неопределено)

	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                      // <Дата>
	+ "Регистратор,"                // <ДокументСсылка.*>
	+ "Организация,"                // <СправочникСсылка.Организации>
	+ "СтруктурноеПодразделение"    // <СправочникСсылка.ПодразделенияОрганизации>
	;

	Если ТипЗнч(ТаблицаРеквизиты) = Тип("ТаблицаЗначений") Тогда
		Если ТаблицаРеквизиты.Колонки.Найти("Объект") <> Неопределено Тогда
			СписокОбязательныхКолонок = СписокОбязательныхКолонок + ",Объект";	
		КонецЕсли;
	КонецЕсли;
	
	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));
	
	Если НЕ  ТаблицаНМА = Неопределено И ТипЗнч(ТаблицаНМА) = Тип("ТаблицаЗначений") Тогда
		// Подготовка таблицы 
		СписокОбязательныхКолонок = ""
		+ "НематериальныйАктив"
		;
		Параметры.Вставить("ТаблицаНМА", ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(
				ТаблицаНМА, СписокОбязательныхКолонок));
	КонецЕсли;


	Возврат Параметры;

КонецФункции

////////////////////////////////////////////////////////////////////////////////////
// ПРОВЕРКА СВЕДЕНИЙ ПО НМА

Процедура ПроверитьСведенияПоНМА(ТаблицаРеквизиты, Отказ)  Экспорт
	
	Параметры = ПодготовитьПараметрыСведенияПоНМА(ТаблицаРеквизиты);

	Реквизиты = Параметры.Реквизиты[0];

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НематериальныйАктив",      Реквизиты.НематериальныйАктив);
	Запрос.УстановитьПараметр("ДатаДокумента", 		      Реквизиты.Период);
	Запрос.УстановитьПараметр("Организация", 		      Реквизиты.Организация);
	Запрос.УстановитьПараметр("СтруктурноеПодразделение", Реквизиты.СтруктурноеПодразделение);
	Запрос.УстановитьПараметр("Ссылка", 			      Реквизиты.Регистратор);
	
	ИмяДокумента = Реквизиты.ВидДокумента;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПервоначСведения.НематериальныйАктив КАК НематериальныйАктив
	               |ПОМЕСТИТЬ ПервоначальныеСведенияНМА
	               |ИЗ
	               |	РегистрСведений.ПервоначальныеСведенияНМАБухгалтерскийУчет.СрезПоследних(
	               |			&ДатаДокумента,
	               |			НематериальныйАктив = &НематериальныйАктив
	               |				И Организация = &Организация) КАК ПервоначСведения
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	НематериальныйАктив
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	СостоянияНМАОрганизацииСрезПоследних.НематериальныйАктив КАК НематериальныйАктив
	               |ПОМЕСТИТЬ НМА_СнятыеСУчета
	               |ИЗ
	               |	РегистрСведений.СостоянияНМАОрганизаций.СрезПоследних(
	               |			&ДатаДокумента,
	               |			НематериальныйАктив = &НематериальныйАктив
	               |				И Организация = &Организация
	               |				И Состояние = ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийНМА.Списан)
	               |				И Регистратор <> &Ссылка) КАК СостоянияНМАОрганизацииСрезПоследних
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	НематериальныйАктив
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СчетаУчетаНМА.НематериальныйАктив,
	               |	СчетаУчетаНМА.Организация,
	               |	СчетаУчетаНМА.СчетУчетаБУ
	               |ПОМЕСТИТЬ ВТ_СчетаУчетаНМА
	               |ИЗ
	               |	РегистрСведений.СчетаУчетаНМА.СрезПоследних(
	               |			&ДатаДокумента,
	               |			НематериальныйАктив = &НематериальныйАктив
	               |				И Организация = &Организация) КАК СчетаУчетаНМА
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТиповойОстатки.Счет,
	               |	ТиповойОстатки.Субконто1 КАК НематериальныйАктив,
	               |	ТиповойОстатки.Организация,
	               |	ТиповойОстатки.СтруктурноеПодразделение,
	               |	ТиповойОстатки.СуммаОстаток
	               |ПОМЕСТИТЬ ВТ_СтоимостьНМА
	               |ИЗ
	               |	РегистрБухгалтерии.Типовой.Остатки(
	               |			&ДатаДокумента,
	               |			Счет В
	               |				(ВЫБРАТЬ
	               |					ВТ_СчетаУчетаНМА.СчетУчетаБУ
	               |				ИЗ
	               |					ВТ_СчетаУчетаНМА),
	               |			,
	               |			Организация = &Организация
	               |				И СтруктурноеПодразделение = &СтруктурноеПодразделение
	               |				И Субконто1 В (&НематериальныйАктив)) КАК ТиповойОстатки
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВыбытиеНМА.НематериальныйАктив,
	               |	ВыбытиеНМА.НематериальныйАктив.Код КАК Код,
	               |	ВЫБОР
	               |		КОГДА ПервоначальныеСведенияНМА.НематериальныйАктив ЕСТЬ NULL 
	               |			ТОГДА ЛОЖЬ
	               |		ИНАЧЕ ИСТИНА
	               |	КОНЕЦ КАК ОтражалосьВБухгалтерскомУчете,
	               |	ВЫБОР
	               |		КОГДА НМА_СнятыеСУчета.НематериальныйАктив ЕСТЬ NULL 
	               |			ТОГДА ЛОЖЬ
	               |		ИНАЧЕ ИСТИНА
	               |	КОНЕЦ КАК СнятоСУчета,
	               |	ВЫБОР
	               |		КОГДА СтоимостьНМА.НематериальныйАктив ЕСТЬ NULL 
	               |			ТОГДА ЛОЖЬ
	               |		ИНАЧЕ ИСТИНА
	               |	КОНЕЦ КАК ЕстьДанныеПоБухгалтерскомуУчету
	               |ИЗ
	               |	Документ."+ ИмяДокумента + " КАК ВыбытиеНМА
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ПервоначальныеСведенияНМА КАК ПервоначальныеСведенияНМА
	               |		ПО ВыбытиеНМА.НематериальныйАктив = ПервоначальныеСведенияНМА.НематериальныйАктив
	               |		ЛЕВОЕ СОЕДИНЕНИЕ НМА_СнятыеСУчета КАК НМА_СнятыеСУчета
	               |		ПО ВыбытиеНМА.НематериальныйАктив = НМА_СнятыеСУчета.НематериальныйАктив
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СтоимостьНМА КАК СтоимостьНМА
	               |		ПО ВыбытиеНМА.НематериальныйАктив = СтоимостьНМА.НематериальныйАктив
	               |ГДЕ
	               |	ВыбытиеНМА.Ссылка = &Ссылка";
	               
	ТаблицаПоНМА = Запрос.Выполнить().Выгрузить();               
				   
	Для Каждого СтрокаНМА Из ТаблицаПоНМА Цикл
		
		Если НЕ СтрокаНМА.ОтражалосьВБухгалтерскомУчете Тогда
				ТекстСообщения = НСтр("ru = 'Нематериальный актив <%1> код <%2> не отражался в учете по указанной организации.'");
				
					ОбщегоНазначения.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, СтрокаНМА.НематериальныйАктив,
				СтрокаНМА.Код),,,,Отказ);    			
			
		КонецЕсли;

		Если СтрокаНМА.СнятоСУчета Тогда
			ТекстСообщения = НСтр("ru = 'Нематериальный актив <%1> код <%2> снят с учета в указанной организации.'");
				
			ОбщегоНазначения.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, СтрокаНМА.НематериальныйАктив,
				СтрокаНМА.Код),,,,Отказ);      
			
		КонецЕсли;
		
		Если НЕ СтрокаНМА.ЕстьДанныеПоБухгалтерскомуУчету Тогда
			
			ТекстСообщения = НСтр("ru = 'Для нематериального актива <%1> код <%2> не обнаружены данные по бухгалтерскому учету по указанному структурному подразделению организации'");
				
					ОбщегоНазначения.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, СтрокаНМА.НематериальныйАктив,
				СтрокаНМА.Код),,,,Отказ);      
		КонецЕсли;

	КонецЦикла;
	
КонецПроцедуры 

Функция ПодготовитьПараметрыСведенияПоНМА(ТаблицаРеквизиты)

	Параметры = Новый Структура;

	СписокОбязательныхКолонок = ""
	+ "НематериальныйАктив," // <СправочникСсылка.НематериальныхАктивов>
	+ "Период,"              // <Дата>
	+ "Организация,"         // <СправочникСсылка.Организации>
	+ "СтруктурноеПодразделение,"
	+ "ВидДокумента,"
	+ "Регистратор";         // <ДокументСсылка.*>

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

