////////////////////////////////////////////////////////////////////////////////
// РеализацияТоваровУслугФормы: серверные процедуры и функции, вызываемые из форм
// документа "Реализация (акт, накладная)".
//  
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЙ ПРОГРАММНЫЙ ИНТЕРФЕЙС

// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

Процедура ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка)Экспорт
	
	Объект = Форма.Объект;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(Форма);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(Форма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	ОбщегоНазначенияБКВызовСервера.НастроитьПодключаемоеОборудование(Форма);
	
	Если Форма.Параметры.Ключ.Пустая() Тогда
		Форма.ПодготовитьФормуНаСервере();
		РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(Объект.ВидОперации), Объект.Ссылка, Форма);
	КонецЕсли;
	
	// Если форма вызвана в режиме смена вида операции - модифицируем сразу при открытии, 
	// чтобы можно было подтвердить или отказаться от изменения путем сохранения или 
	// отказа от сохранения документа.
	Если Форма.Параметры.Свойство("ИзменитьВидОперации")
		И Форма.Параметры.ИзменитьВидОперации Тогда
		
		// Не кэшируем переменную Объект, т.к. может вызываться Форма.ИзменитьРеквизиты(),
		// которая меняет Объект.
		Форма.Объект.ВидОперации = Форма.Параметры.ЗначенияЗаполнения.ВидОперации;
		Если Форма.Объект.ВидОперации <> Перечисления.ВидыОперацийРеализацияТоваров.Товары
			И Форма.Объект.ВидОперации <> Перечисления.ВидыОперацийРеализацияТоваров.Услуги Тогда
			Форма.ВидОперацииПриИзмененииНаСервере(Новый Структура);	
		КонецЕсли;
		Если Форма.Объект.ВидОперации <> Перечисления.ВидыОперацийРеализацияТоваров.Услуги Тогда
			Форма.Объект.ОтложитьНачислениеНДС = Ложь;	
		КонецЕсли;
		РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(Форма.Объект.ВидОперации), Форма.Объект.Ссылка, Форма);
		Форма.ОбновитьИтогиНаСервере();
		Форма.УправлениеФормойНаСервере(Форма);
		Форма.Модифицированность = Истина;
	КонецЕсли;
	
	// Активизировать табличную часть
	Форма.УстановитьТекущуюСтраницуОсновнойПанели();
	
	Форма.УправлениеФормойНаСервере(Форма);	
	
	Форма.УстановитьВидимостьСчетовУчета();
	
	ЗапретРедактированияРеквизитовОбъектовПереопределяемый.ЗаблокироватьРеквизиты(Форма, Форма.Объект.Проведен);
	
КонецПроцедуры

Процедура ПриЧтенииНаСервере(Форма, ТекущийОбъект)Экспорт
	
	Объект = Форма.Объект;
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(Форма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(Форма, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	// РедактированиеДокументовПользователей
	ПраваДоступаКОбъектам.ОбъектПриЧтенииНаСервере(Форма, ТекущийОбъект);
	// Конец РедактированиеДокументовПользователей
	
	//АВР
	Форма.НайтиАВРИЗаполнитьСсылкуНаСервере();
	//Конец АВР
	
	Форма.НайтиЭДВСИЗаполнитьСсылкуНаСервере();

	Форма.ПодготовитьФормуНаСервере();
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(Объект.ВидОперации), Объект.Ссылка, Форма);
	
	Форма.УправлениеФормойНаСервере(Форма);
	
КонецПроцедуры

Процедура ПослеЗаписиНаСервере(Форма, ТекущийОбъект, ПараметрыЗаписи)Экспорт
	
	ЗапретРедактированияРеквизитовОбъектовПереопределяемый.ЗаблокироватьРеквизиты(Форма, Форма.Объект.Проведен);
	
	Форма.УстановитьДоступностьСубконто();
	
	Объект = Форма.Объект;
	
	Форма.ЗаполнитьДобавленныеКолонкиТаблицНаСервере(Объект);
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(Объект.ВидОперации), Объект.Ссылка, Форма);
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) И ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда 
		УчетНДСИАкциза.ЗаполнитьДокументОснованиеВСчетеФактуре(Объект, Объект.ДокументОснование, "СчетФактураВыданный");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Форма.СчетФактура) И ЗначениеЗаполнено(Форма.ДанныеСчетаФактуры) Тогда
		УчетНДСИАкциза.ПолучитьДанныеСчетаФактуры(Форма, "СчетФактураВыданный");
		УчетНДСИАкцизаКлиентСервер.ЗаполнитьТекстПроСчетФактуру(Форма, Форма.ДанныеСчетаФактуры, "НадписьСчетФактура", Истина);
		УчетНДСиАкцизаКлиентСервер.УправлениеГруппойСчетаФактуры(Форма);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ТипЦен) Тогда
		УправлениеЦенообразованием.ОбновитьЦеныНоменклатуры(Объект.Ссылка, 
			Перечисления.СпособыЗаполненияЦен.ПоПродажнымЦенам,
			Объект.ВалютаДокумента,
			Объект.СуммаВключаетНДС);
	КонецЕсли;
	
КонецПроцедуры

// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

Процедура ДатаПриИзмененииНаСервере(Форма, СтруктураРезультатаВыполненияПриИзмененииДаты)Экспорт
	
	Объект = Форма.Объект;
	
	УстановитьФункциональныеОпцииФормы(Форма);
	
	Если Объект.СпособВыпискиАктовВыполненныхРабот = Перечисления.СпособыВыпискиАктовВыполненныхРабот.ВБумажномВиде Тогда
		
		Объект.ДатаПодписанияГЗ = Объект.Дата;
		
	КонецЕсли;

	ИзменятьУчетНДС = Истина;
	Если Объект.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПередачаСтруктурномуПодразделению Тогда
		ИзменятьУчетНДС = Ложь;
	КонецЕсли;
	
	РаботаСДиалогами.ПриИзмененииЗначенияДатыДокумента(Объект, Форма.ВалютаРегламентированногоУчета, , ИзменятьУчетНДС, СтруктураРезультатаВыполненияПриИзмененииДаты);
	
	ПроцедурыНалоговогоУчета.ПриИзмененииПризнакаОтраженияВНалоговомУчете(Объект.Организация, Объект.Дата, Объект.УчитыватьКПН, Истина);
	ПроцедурыНалоговогоУчета.ЗаполнитьВидУчетаНУ(Объект.УчитыватьКПН, Объект.ВидУчетаНУ);
	
	Форма.УправлениеФормойНаСервере(Форма);
	
КонецПроцедуры

Процедура ДатаПодписанияГЗПриИзмененииНаСервере(Форма, СтруктураРезультатаВыполненияПриИзмененииДаты) Экспорт
	
	Объект = Форма.Объект;
	
	УстановитьФункциональныеОпцииФормы(Форма);
	
	ИзменятьУчетНДС = Истина;
	Если Объект.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПередачаСтруктурномуПодразделению Тогда
		ИзменятьУчетНДС = Ложь;
	КонецЕсли;
	
	РаботаСДиалогами.ПриИзмененииЗначенияДатыДокумента(Объект, Форма.ВалютаРегламентированногоУчета, , ИзменятьУчетНДС, СтруктураРезультатаВыполненияПриИзмененииДаты);
	
	ПроцедурыНалоговогоУчета.ПриИзмененииПризнакаОтраженияВНалоговомУчете(Объект.Организация, Объект.ДатаПодписанияГЗ, Объект.УчитыватьКПН, Истина);
	ПроцедурыНалоговогоУчета.ЗаполнитьВидУчетаНУ(Объект.УчитыватьКПН, Объект.ВидУчетаНУ);
	
	Форма.УправлениеФормой(Форма);
	
КонецПроцедуры

Процедура ДоговорКонтрагентаОбработатьИзменение(Форма, СтруктураРезультатаВыполнения, ПричиныИзмененияСчетовУчета)Экспорт
	
	Объект = Форма.Объект;

	Если НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		Объект.Сделка = Неопределено;
		Объект.УчастникиСовместнойДеятельности.Очистить();
		Форма.УправлениеФормойНаСервере(Форма);
		ТекущийДоговорКонтрагента = Неопределено;
		Форма.Элементы.КнопкаУСД.Видимость = Ложь;
		Форма.Элементы.ДоговорКонтрагента.МаксимальнаяШирина = ПолучитьШиринуПоляДоговор(Ложь);
		Возврат;
	КонецЕсли;

	ПричиныИзмененияСчетовУчета.Добавить("ДоговорКонтрагента");
	
	СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры;
	УправлениеВзаиморасчетамиСервер.ПриИзмененииЗначенияДоговора(Объект, СпособЗаполненияЦен, ТекущийДоговорКонтрагента, , СтруктураРезультатаВыполнения);
	
	Если СтруктураРезультатаВыполнения <> Неопределено Тогда 
		СтруктураРезультатаВыполнения.Вставить("ИзмененДоговорКонтрагента", Истина);
	КонецЕсли;
	
	Объект.УчастникиСовместнойДеятельности.Очистить();

	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда 
		РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ДоговорКонтрагента, "ВедениеВзаиморасчетов");
		Форма.Элементы.Сделка.Доступность = (РеквизитыДоговора.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам);
		ЗаполнениеДокументов.ЗаполнитьТабличнуюЧастьУчастникиСовместнойДеятельности(Объект.ДоговорКонтрагента, Объект.УчастникиСовместнойДеятельности);		
		Форма.Элементы.КнопкаУСД.Видимость = ОбщегоНазначенияБК.ЭтоДоговорСДСРП(Объект.ДоговорКонтрагента);
		Форма.Элементы.ДоговорКонтрагента.МаксимальнаяШирина = ПолучитьШиринуПоляДоговор(ОбщегоНазначенияБК.ЭтоДоговорСДСРП(Объект.ДоговорКонтрагента));
	Иначе 		
		Форма.Элементы.Сделка.Доступность = Ложь;
		Форма.Элементы.КнопкаУСД.Видимость = Ложь;
		Форма.Элементы.ДоговорКонтрагента.МаксимальнаяШирина = ПолучитьШиринуПоляДоговор(Ложь);
	КонецЕсли;
	
	Форма.ТекущийДоговорКонтрагента = Объект.ДоговорКонтрагента;
	
	ЗаполнитьСчетаУчета(Форма,ПричиныИзмененияСчетовУчета, "ДоговорКонтрагента");
	
	Форма.УправлениеФормойНаСервере(Форма);
	
КонецПроцедуры

Процедура ПриИзмененииЦеныИВалютыНаСервере(Форма, Знач ВалютаДоИзменения, КурсДоИзменения, КратностьДоИзменения, ПерезаполнитьЦены = Ложь, ПересчитатьЦены = Ложь, ПересчитатьНДС = Неопределено) Экспорт

	УправлениеЦенообразованием.ЗаполнитьРассчитатьСуммы(
		Форма,
		ВалютаДоИзменения,
		КурсДоИзменения,
		КратностьДоИзменения,
		ПерезаполнитьЦены,
		ПересчитатьЦены,
		ПересчитатьНДС);

	Форма.ОбновитьИтогиНаСервере();
	Форма.УправлениеФормойНаСервере(Форма);

КонецПроцедуры

Процедура СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(Форма, СтруктураПараметров = Неопределено, СтруктураРезультатаВыполнения)Экспорт
		
	Объект = Форма.Объект;

	Если СтруктураПараметров = Неопределено 
		ИЛИ (СтруктураПараметров.Свойство("НеобходимоИзменитьЗначенияРеквизитовОбъекта") 
				И СтруктураПараметров.НеобходимоИзменитьЗначенияРеквизитовОбъекта) Тогда 
		РаботаСДиалогами.СтруктурноеПодразделениеПриИзменении(Форма.СтруктурноеПодразделениеОрганизация, Объект.Организация, Объект.СтруктурноеПодразделение, СтруктураПараметров);
	КонецЕсли;
	
	ПриИзмененииЗначенияОрганизацииСервер(Форма, СтруктураПараметров, СтруктураРезультатаВыполнения);
	
КонецПроцедуры

Процедура ПриИзмененииЗначенияОрганизацииСервер(Форма, СтруктураПараметров, СтруктураРезультатаВыполнения)Экспорт
	
	Объект = Форма.Объект;

	Если НЕ СтруктураПараметров.ИзмененаОрганизация И НЕ СтруктураПараметров.ИзмененоСтруктурноеПодразделение Тогда
		Возврат;
	КонецЕсли;
	
	//Очистить ТЧ "НомерГТД", так как могла быть уже заполнена по остаткам другой организации	
	Если Объект.НомераГТД.Количество() > 0 И Форма.ВедетсяУчетПоТоварамОрганизацийБУ Тогда
		Объект.НомераГТД.Очистить();
	КонецЕсли;
	
	ПричиныИзмененияСчетовУчета = Новый Массив;
	Если СтруктураПараметров.ИзмененаОрганизация Тогда
		ПричиныИзмененияСчетовУчета.Добавить("Организация");
	КонецЕсли;
	
	ПриИзмененииЗначенияСтруктурногоПодразделенияСервер(Форма, СтруктураПараметров);
	
	УстановитьФункциональныеОпцииФормы(Форма);
	
	РаботаСДиалогами.ПриИзмененииЗначенияОрганизации(Объект, , СтруктураРезультатаВыполнения);
	
	ПроцедурыНалоговогоУчета.ПриИзмененииПризнакаОтраженияВНалоговомУчете(Объект.Организация, Объект.Дата, Объект.УчитыватьКПН, Истина);
	ПроцедурыНалоговогоУчета.ЗаполнитьВидУчетаНУ(Объект.УчитыватьКПН, Объект.ВидУчетаНУ);
	
	ДоговорКонтрагентаОбработатьИзменение(Форма, СтруктураРезультатаВыполнения, ПричиныИзмененияСчетовУчета);

	РаботаСДиалогами.УстановитьЗаголовокЭлементуУправленияУчитыватьКПН(Объект.Организация, Форма.Элементы.УчитыватьКПН);
	
	Если ПричиныИзмененияСчетовУчета.Количество() > 0 Тогда
		ЗаполнитьСчетаУчета(Форма,ПричиныИзмененияСчетовУчета, "Организация");
	КонецЕсли;

	Если Объект.ВидОперации <> Перечисления.ВидыОперацийРеализацияТоваров.Услуги  Тогда
		РеализацияТоваровУслугФормыКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(Форма, "ДоходовБУ", "СчетДоходовБУ", "Товары");	
		РеализацияТоваровУслугФормыКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(Форма, "ДоходовНУ", "СчетДоходовНУ", "Товары");	
		РеализацияТоваровУслугФормыКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(Форма, "СписанияСебестоимостиБУ", "СчетСписанияСебестоимостиБУ", "Товары");	
		РеализацияТоваровУслугФормыКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(Форма, "СписанияСебестоимостиНУ", "СчетСписанияСебестоимостиНУ", "Товары");	
	КонецЕсли; 
	Если Объект.ВидОперации <> Перечисления.ВидыОперацийРеализацияТоваров.Товары  Тогда
		РеализацияТоваровУслугФормыКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(Форма, "ДоходовБУ", "СчетДоходовБУ", "Услуги");	
		РеализацияТоваровУслугФормыКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(Форма, "ДоходовНУ", "СчетДоходовНУ", "Услуги");	
	КонецЕсли; 
		
КонецПроцедуры

Процедура ПриИзмененииЗначенияСтруктурногоПодразделенияСервер(Форма, СтруктураПараметров)Экспорт
		
	Объект = Форма.Объект;

	Объект.БанковскийСчетОрганизации = УправлениеДенежнымиСредствамиСервер.ПолучитьОсновнойБанковскийСчетДокумента(Объект);
	
	Если СтруктураПараметров.Свойство("ОчищатьНекорректныеЗначения") И НЕ СтруктураПараметров.ОчищатьНекорректныеЗначения Тогда 
		Возврат;
	КонецЕсли;
	
	// Если нет данных в ТЧ, то нет необходимости проверять и очищать некорректные значения субконто
	Если Объект.Товары.Количество() = 0 И Объект.Услуги.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;

	// Список для обработки ТЧ
	СписокТабличныхЧастей = Новый СписокЗначений;
	
	СписокАналитикиСчетовТовары = Новый СписокЗначений;
	СписокАналитикиСчетовУслуги = Новый СписокЗначений;
	
	// ТЧ Товары
	СписокАналитикиСчетовТовары.Добавить("ДоходовБУ"); 				// СчетДоходовБУ
	СписокАналитикиСчетовТовары.Добавить("ДоходовНУ"); 				// СчетДоходовНУ
	СписокАналитикиСчетовТовары.Добавить("СписанияСебестоимостиБУ");// СчетСписанияСебестоимостиБУ
	СписокАналитикиСчетовТовары.Добавить("СписанияСебестоимостиНУ");// СчетСписанияСебестоимостиНУ
	
	// ТЧ Услуги
	СписокАналитикиСчетовУслуги.Добавить("ДоходовБУ"); 				// СчетДоходовБУ
	СписокАналитикиСчетовУслуги.Добавить("ДоходовНУ"); 				// СчетДоходовНУ

	СтруктураРеквизитов = Новый Структура("ТабличнаяЧасть, СписокАналитикиСчетов", Объект.Товары, СписокАналитикиСчетовТовары); 
	СписокТабличныхЧастей.Добавить(СтруктураРеквизитов);
	
	СтруктураРеквизитов = Новый Структура("ТабличнаяЧасть, СписокАналитикиСчетов", Объект.Услуги, СписокАналитикиСчетовУслуги);
	СписокТабличныхЧастей.Добавить(СтруктураРеквизитов);
	
	// Очистим некорректные значения Субконто с подразделениями не входящими в выбранное структурное подразделение
	РаботаСДиалогами.ПроверитьСоответствиеПодразделения(Объект.Организация, Объект.СтруктурноеПодразделение, , СписокТабличныхЧастей); 
	
КонецПроцедуры

Процедура УчитыватьКПНПриИзмененииНаСервере(Форма)Экспорт

	Объект = Форма.Объект;

	ПроцедурыНалоговогоУчета.ЗаполнитьВидУчетаНУ(Объект.УчитыватьКПН, Объект.ВидУчетаНУ);
	Форма.УправлениеФормойНаСервере(Форма);
	
КонецПроцедуры

Процедура КонтрагентПриИзмененииНаСервере(Форма, СтруктураРезультатаВыполнения) Экспорт

	Объект = Форма.Объект;
	
	ОтказОтВыбранного = Ложь;
	ПроверитьСоответствиеКонтрагентаВидуОперации(Объект.ВидОперации, Объект.Контрагент, Объект.ДоговорКонтрагента, ОтказОтВыбранного);
	Если ОтказОтВыбранного Тогда
		ТекущийДоговорКонтрагента = Неопределено;
		ТекущийКонтрагент         = Неопределено;
		Возврат;
	КонецЕсли;
	
	ПричиныИзмененияСчетовУчета = Новый Массив;
	ПричиныИзмененияСчетовУчета.Добавить("Контрагент");

	ИсходныйДоговор = Объект.ДоговорКонтрагента;
	
	УправлениеВзаиморасчетамиСервер.ПриИзмененииЗначенияКонтрагента(Объект, СтруктураДоступныхВидовДоговоров());
	
	//очистим данные грузополучателя
	Если ЗначениеЗаполнено(Объект.Грузополучатель) Тогда
		Объект.Грузополучатель = ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");		
	КонецЕсли;
	
	//очистим данные адреса доставки
	Если ЗначениеЗаполнено(Объект.АдресДоставки) Тогда
		Объект.АдресДоставки = "";
	КонецЕсли;
	
	РеализацияТоваровУслугФормы.ДоговорКонтрагентаОбработатьИзменение(Форма,СтруктураРезультатаВыполнения, ПричиныИзмененияСчетовУчета);
	
	Форма.ТекущийКонтрагент = ?(ЗначениеЗаполнено(Объект.Контрагент), Объект.Контрагент, Неопределено);
	
	Если НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		Объект.УчастникиСовместнойДеятельности.Очистить();
		Форма.ТекущийДоговорКонтрагента = Неопределено;
	КонецЕсли;
	
	ЗаполнитьСчетаУчета(Форма, ПричиныИзмененияСчетовУчета, "Контрагент");
	
КонецПроцедуры

// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ Товары

Процедура ОбработкаВыбораПодборНаСервере(Форма, ВыбранноеЗначение, ИмяТаблицы)Экспорт
	
	Объект = Форма.Объект;

	Если ИмяТаблицы <> "Товары" И ИмяТаблицы <> "Услуги" Тогда
        // Ошибочное имя табличной части
		Возврат;
	КонецЕсли;

	ЭтоВставкаИзБуфера = ВыбранноеЗначение.Свойство("ЭтоВставкаИзБуфера");
	ЭтоПодборПоШтрихкоду = ВыбранноеЗначение.Свойство("Штрихкод");
	
	СписокСвойств = Неопределено;	
	Если ЭтоВставкаИзБуфера Тогда		
		ТаблицаТоваров = ВыбранноеЗначение.Данные;
		СписокСвойств = ВыбранноеЗначение.СписокСвойств;		
	Иначе                                               		
		ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресПодобраннойНоменклатурыВХранилище);		
	КонецЕсли; 	

	
	ДанныеОбъекта = Новый Структура("Дата, Организация, ВидОперации, УчитыватьКПН, УчитыватьНДС, УчитыватьАкциз");
	
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	СведенияОСпискеНоменклатуры = ОбработкаТабличныхЧастей.ПолучитьСведенияОСпискеНоменклатуры(
		ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаТоваров, "Номенклатура", Истина), Объект);
		
	СтрокиДляЗаполненияСчетов = Новый Массив;
	
	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		СтрокаТабличнойЧасти = Неопределено;
		Если НЕ ЭтоВставкаИзБуфера Тогда
			
			// Ищем выбранную позицию в таблице подобранной номенклатуры.
			//  Если найдем - увеличим количество; не найдем - добавим новую строку.
			СтруктураОтбора = Новый Структура();
			СтруктураОтбора.Вставить("Номенклатура", СтрокаТовара.Номенклатура);
			Если ИмяТаблицы = "Товары" Тогда
				СтруктураОтбора.Вставить("ЕдиницаИзмерения", СтрокаТовара.ЕдиницаИзмерения);
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаТовара.Цена) Тогда
				СтруктураОтбора.Вставить("Цена", СтрокаТовара.Цена);
			КонецЕсли;
			
			СтрокаТабличнойЧасти = ОбработкаТабличныхЧастейКлиентСервер.НайтиСтрокуТабЧасти(Объект, ИмяТаблицы, СтруктураОтбора);
		КонецЕсли;
		Если СтрокаТабличнойЧасти <> Неопределено Тогда
			
			СведенияОНоменклатуре = СведенияОСпискеНоменклатуры.Получить(СтрокаТабличнойЧасти.Номенклатура);
			
			// Нашли, увеличиваем количество в первой найденной строке.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + СтрокаТовара.Количество;
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
			Если ИмяТаблицы = "Товары" Тогда 
				Если Объект.УчитыватьАкциз Тогда 
					Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтавкаАкциза) Тогда
						СтрокаТабличнойЧасти.СтавкаАкциза = СведенияОНоменклатуре.СтавкаАкциза;
					КонецЕсли;
					СтрокаТабличнойЧасти.КоэффициентАкциза = СведенияОНоменклатуре.КоэффициентРасчетаОблагаемойБазыАкциза;
				КонецЕсли;
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуАкцизаТабЧасти(СтрокаТабличнойЧасти, Объект);
			КонецЕсли;
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Объект);			
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВсегоТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС, Объект.СуммаВключаетАкциз);
			
		Иначе
			
			СведенияОНоменклатуре = СведенияОСпискеНоменклатуры.Получить(СтрокаТовара.Номенклатура);

			Если ЭтоВставкаИзБуфера 
				И СведенияОНоменклатуре <> Неопределено
				И ЗначениеЗаполнено(СведенияОНоменклатуре.Услуга) Тогда 				
				Если СведенияОНоменклатуре.Услуга Тогда 					
					Если ИмяТаблицы = "Товары" Тогда 						
						Продолжить; 						
					КонецЕсли;  					
				Иначе
					
					Если ИмяТаблицы = "Услуги" Тогда 						
						Продолжить;    						
					КонецЕсли;     					
				КонецЕсли;  				
			КонецЕсли;

			// Не нашли - добавляем новую строку.
			СтрокаТабличнойЧасти = Объект[ИмяТаблицы].Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТовара, СписокСвойств);
			СтрокиДляЗаполненияСчетов.Добавить(СтрокаТабличнойЧасти);
			ВыбранноеЗначение.Вставить("НомерСтроки", СтрокаТабличнойЧасти.НомерСтроки); 
						
			Если ИмяТаблицы = "Товары" Тогда
				СтрокаТабличнойЧасти.Коэффициент = СведенияОНоменклатуре.Коэффициент;
				СтрокаТабличнойЧасти.КлючСвязи = ОбщегоНазначенияБККлиентСервер.НовыйКлючСвязиСтрокиТаблицы(Объект[ИмяТаблицы]);
			КонецЕсли;
			
			Если ИмяТаблицы = "Услуги" Тогда
				СтрокаТабличнойЧасти.Содержание = СведенияОНоменклатуре.НаименованиеПолное;
			КонецЕсли;
			
			СтрокаТабличнойЧасти.СтавкаНДС = СведенияОНоменклатуре.СтавкаНДС;
			
			Если ЭтоВставкаИзБуфера ИЛИ ЭтоПодборПоШтрихкоду Тогда 
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
			КонецЕсли;
			
			Если ИмяТаблицы = "Товары" Тогда 
				Если Объект.УчитыватьАкциз Тогда 
					СтрокаТабличнойЧасти.СтавкаАкциза 		= СведенияОНоменклатуре.СтавкаАкциза;
					СтрокаТабличнойЧасти.КоэффициентАкциза 	= СведенияОНоменклатуре.КоэффициентРасчетаОблагаемойБазыАкциза;
					ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуАкцизаТабЧасти(СтрокаТабличнойЧасти, Объект);
				КонецЕсли;
			КонецЕсли;
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Объект);
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВсегоТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС, Объект.СуммаВключаетАкциз);
			
		КонецЕсли;
		
	КонецЦикла;
	
	СчетаУчетаВДокументах.ЗаполнитьСтроки(СтрокиДляЗаполненияСчетов, ИмяТаблицы, Объект, Документы.РеализацияТоваровУслуг);
	
	Если ЭтоВставкаИзБуфера Тогда
		
		ВыбранноеЗначение.КоличествоДобавленныхСтрок = СтрокиДляЗаполненияСчетов.Количество();
		
	КонецЕсли; 

КонецПроцедуры

Процедура ДобавитьНоменклатуруНаСервере(Форма,Результат, УникальныйИдентификатор) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") И Результат.Свойство("Номенклатура") Тогда
		Номенклатура = Результат.Номенклатура;
	Иначе
		Возврат;
	КонецЕсли;
	
	Объект = Форма.Объект;
	
	ТаблицаТовары = Новый ТаблицаЗначений;
	ТаблицаТовары.Колонки.Добавить("Номенклатура");
	ТаблицаТовары.Колонки.Добавить("Количество");
	ТаблицаТовары.Колонки.Добавить("Цена");
	ТаблицаТовары.Колонки.Добавить("ЕдиницаИзмерения");
	
	ДанныеОбъекта = Новый Структура("Организация, СтруктурноеПодразделение, Дата, Ссылка, ТипЦен,
		|УчитыватьНДС, СуммаВключаетНДС, УчитыватьКПН, ВидОперации, Склад, ДоговорКонтрагента,
		|ВалютаДокумента, КурсВзаиморасчетов, КратностьВзаиморасчетов");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	Если Не ЗначениеЗаполнено(ДанныеОбъекта.ТипЦен) Тогда
		ДанныеОбъекта.Вставить("СпособЗаполненияЦены", Перечисления.СпособыЗаполненияЦен.ПоПродажнымЦенам);
	КонецЕсли;

	Если ЗначениеЗаполнено(Номенклатура) Тогда
		СведенияОНоменклатуре = ОбработкаТабличныхЧастей.ПолучитьСведенияОНоменклатуре(Номенклатура, ДанныеОбъекта);
	Иначе
		СведенияОНоменклатуре = Неопределено;
	КонецЕсли;
	
	СтрокаТаблицаТовары = ТаблицаТовары.Добавить();
	
	СтрокаТаблицаТовары.Номенклатура = Номенклатура;
	СтрокаТаблицаТовары.Количество = 1;
	СтрокаТаблицаТовары.Цена = ?(СведенияОНоменклатуре = Неопределено, 0, СведенияОНоменклатуре.Цена);
	СтрокаТаблицаТовары.ЕдиницаИзмерения = ?(СведенияОНоменклатуре = Неопределено, Неопределено, СведенияОНоменклатуре.БазоваяЕдиницаИзмерения);
	
	Значение = Новый Структура("АдресПодобраннойНоменклатурыВХранилище, КоличествоДобавленныхСтрок", ПоместитьВоВременноеХранилище(ТаблицаТовары, УникальныйИдентификатор));

	Если Результат.Свойство("Штрихкод") Тогда
		Значение.Вставить("Штрихкод", Результат.Штрихкод);	
	КонецЕсли;
	
	ОбработкаВыбораПодборНаСервере(Форма, Значение, "Товары");

	Если Результат <> Неопределено И ТипЗнч(Результат) = Тип("Структура") И Значение.Свойство("НомерСтроки") Тогда
		Результат.Вставить("НомерСтроки", Значение.НомерСтроки);
	Конецесли;

КонецПроцедуры 

Процедура ТоварыНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, ДанныеОбъекта, СчетаУчетаКЗаполнению)Экспорт
	
	Если Не ЗначениеЗаполнено(ДанныеОбъекта.ТипЦен) Тогда
		ДанныеОбъекта.Вставить("СпособЗаполненияЦены", Перечисления.СпособыЗаполненияЦен.ПоПродажнымЦенам);
	КонецЕсли;

	СведенияОНоменклатуре = ОбработкаТабличныхЧастей.ПолучитьСведенияОНоменклатуре(СтрокаТабличнойЧасти.Номенклатура, ДанныеОбъекта);
	
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.ЕдиницаИзмерения  = СведенияОНоменклатуре.БазоваяЕдиницаИзмерения;
	СтрокаТабличнойЧасти.Коэффициент	   = СведенияОНоменклатуре.Коэффициент;
	СтрокаТабличнойЧасти.Цена			   = СведенияОНоменклатуре.Цена;
	СтрокаТабличнойЧасти.СтавкаНДС         = СведенияОНоменклатуре.СтавкаНДС;
	СтрокаТабличнойЧасти.СтавкаАкциза      = СведенияОНоменклатуре.СтавкаАкциза;
	СтрокаТабличнойЧасти.КоэффициентАкциза = ?(ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтавкаАкциза), СведенияОНоменклатуре.КоэффициентРасчетаОблагаемойБазыАкциза, 0);
		
	ЗаполненныеСчета = СчетаУчетаВДокументах.ЗаполнитьРеквизитыПриИзменении(
		Документы.РеализацияТоваровУслуг,
		СчетаУчетаКЗаполнению,
		ДанныеОбъекта,
		"Товары",
		СтрокаТабличнойЧасти);
	
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ЗаполненныеСчета);
	
	ПоляОбъектаСубконтоДоходовБУ	= Новый Структура("Субконто1, Субконто2, Субконто3", "СубконтоДоходовБУ1", "СубконтоДоходовБУ2", "СубконтоДоходовБУ3");
	ПоляОбъектаСубконтоДоходовНУ	= Новый Структура("Субконто1, Субконто2, Субконто3", "СубконтоДоходовНУ1", "СубконтоДоходовНУ2", "СубконтоДоходовНУ3");
	
	ПоляОбъектаСубконтоСписанияСебестоимостиБУ	= Новый Структура("Субконто1, Субконто2, Субконто3", "СубконтоСписанияСебестоимостиБУ1", "СубконтоСписанияСебестоимостиБУ2", "СубконтоСписанияСебестоимостиБУ3");
	ПоляОбъектаСубконтоСписанияСебестоимостиНУ	= Новый Структура("Субконто1, Субконто2, Субконто3", "СубконтоСписанияСебестоимостиНУ1", "СубконтоСписанияСебестоимостиНУ2", "СубконтоСписанияСебестоимостиНУ3");
	
	ПроцедурыБухгалтерскогоУчетаКлиентСервер.УстановитьДоступностьИЗаголовкиСубконто(СтрокаТабличнойЧасти.СчетДоходовБУ, СтрокаТабличнойЧасти, ПоляОбъектаСубконтоДоходовБУ);
	ПроцедурыБухгалтерскогоУчетаКлиентСервер.УстановитьДоступностьИЗаголовкиСубконто(СтрокаТабличнойЧасти.СчетДоходовНУ, СтрокаТабличнойЧасти, ПоляОбъектаСубконтоДоходовНУ);
	
	ПроцедурыБухгалтерскогоУчетаКлиентСервер.УстановитьДоступностьИЗаголовкиСубконто(СтрокаТабличнойЧасти.СчетСписанияСебестоимостиБУ, СтрокаТабличнойЧасти, ПоляОбъектаСубконтоСписанияСебестоимостиБУ);
	ПроцедурыБухгалтерскогоУчетаКлиентСервер.УстановитьДоступностьИЗаголовкиСубконто(СтрокаТабличнойЧасти.СчетСписанияСебестоимостиНУ, СтрокаТабличнойЧасти, ПоляОбъектаСубконтоСписанияСебестоимостиНУ);
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуАкцизаТабЧасти(СтрокаТабличнойЧасти, ДанныеОбъекта);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДанныеОбъекта);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВсегоТабЧасти(СтрокаТабличнойЧасти, ДанныеОбъекта.СуммаВключаетНДС, ДанныеОбъекта.СуммаВключаетАкциз);
	
КонецПроцедуры

Процедура СчетДоходовБУПриИзмененииНаСервере(СтрокаТабличнойЧасти, ДанныеОбъекта)Экспорт
	
	ПроцедурыБухгалтерскогоУчета.ПроверитьВладельцаСубконтоПодразделение(СтрокаТабличнойЧасти, 
	                                        ДанныеОбъекта.Организация, 
	                                        Новый Структура("НазваниеСубконтоБУ1, НазваниеСубконтоБУ2, НазваниеСубконтоБУ3, 
	                                                        |СубконтоБУ1, СубконтоБУ2, СубконтоБУ3",
	                                                        "СубконтоДоходовБУ1", "СубконтоДоходовБУ2", "СубконтоДоходовБУ3", 
	                                                        СтрокаТабличнойЧасти.СубконтоДоходовБУ1, СтрокаТабличнойЧасти.СубконтоДоходовБУ2, СтрокаТабличнойЧасти.СубконтоДоходовБУ3));
															
	СчетаУчета = Новый Структура("СчетДоходовБУ, СубконтоДоходовБУ1,
								 |СубконтоДоходовБУ2, СубконтоДоходовБУ3", СтрокаТабличнойЧасти.СчетДоходовБУ,
								 СтрокаТабличнойЧасти.СубконтоДоходовБУ1, СтрокаТабличнойЧасти.СубконтоДоходовБУ2,
								 СтрокаТабличнойЧасти.СубконтоДоходовБУ3);

	ПроцедурыБухгалтерскогоУчета.ЗаполнитьАналитикуСчетаТабличнойЧасти(СтрокаТабличнойЧасти, СчетаУчета, "СубконтоДоходовБУ", "СчетДоходовБУ", "СубконтоДоходовБУ");
															
	ПроцедурыБухгалтерскогоУчета.ПроверитьВладельцаСубконтоПодразделение(СтрокаТабличнойЧасти, 
	                                        ДанныеОбъекта.Организация, 
	                                        Новый Структура("НазваниеСубконтоБУ1, НазваниеСубконтоБУ2, НазваниеСубконтоБУ3, 
	                                                        |СубконтоБУ1, СубконтоБУ2, СубконтоБУ3",
	                                                        "СубконтоДоходовНУ1", "СубконтоДоходовНУ2", "СубконтоДоходовНУ3", 
	                                                        СтрокаТабличнойЧасти.СубконтоДоходовНУ1, СтрокаТабличнойЧасти.СубконтоДоходовНУ2, СтрокаТабличнойЧасти.СубконтоДоходовНУ3));
															
	СчетаУчета = Новый Структура("СчетДоходовНУ, СубконтоДоходовНУ1,
								 |СубконтоДоходовНУ2, СубконтоДоходовНУ3", СтрокаТабличнойЧасти.СчетДоходовНУ,
								 СтрокаТабличнойЧасти.СубконтоДоходовНУ1, СтрокаТабличнойЧасти.СубконтоДоходовНУ2,
								 СтрокаТабличнойЧасти.СубконтоДоходовНУ3);

	ПроцедурыБухгалтерскогоУчета.ЗаполнитьАналитикуСчетаТабличнойЧасти(СтрокаТабличнойЧасти, СчетаУчета, "СубконтоДоходовНУ", "СчетДоходовНУ", "СубконтоДоходовНУ");

КонецПроцедуры

Процедура СчетДоходовНУПриИзмененииНаСервере(СтрокаТабличнойЧасти, ДанныеОбъекта)Экспорт
	
	ПроцедурыБухгалтерскогоУчета.ПроверитьВладельцаСубконтоПодразделение(СтрокаТабличнойЧасти, 
	                                        ДанныеОбъекта.Организация, 
	                                        Новый Структура("НазваниеСубконтоБУ1, НазваниеСубконтоБУ2, НазваниеСубконтоБУ3, 
	                                                        |СубконтоБУ1, СубконтоБУ2, СубконтоБУ3",
	                                                        "СубконтоДоходовНУ1", "СубконтоДоходовНУ2", "СубконтоДоходовНУ3", 
	                                                        СтрокаТабличнойЧасти.СубконтоДоходовНУ1, СтрокаТабличнойЧасти.СубконтоДоходовНУ2, СтрокаТабличнойЧасти.СубконтоДоходовНУ3));
															
	СчетаУчета = Новый Структура("СчетДоходовНУ, СубконтоДоходовНУ1,
								 |СубконтоДоходовНУ2, СубконтоДоходовНУ3", СтрокаТабличнойЧасти.СчетДоходовНУ,
								 СтрокаТабличнойЧасти.СубконтоДоходовНУ1, СтрокаТабличнойЧасти.СубконтоДоходовНУ2,
								 СтрокаТабличнойЧасти.СубконтоДоходовНУ3);

	ПроцедурыБухгалтерскогоУчета.ЗаполнитьАналитикуСчетаТабличнойЧасти(СтрокаТабличнойЧасти, СчетаУчета, "СубконтоДоходовНУ", "СчетДоходовНУ", "СубконтоДоходовНУ");

КонецПроцедуры

Процедура ТоварыСчетСебестоимостиБУПриИзмененииНаСервере(СтрокаТабличнойЧасти, ДанныеОбъекта)Экспорт
	
	ПроцедурыБухгалтерскогоУчета.ПроверитьВладельцаСубконтоПодразделение(СтрокаТабличнойЧасти, 
	                                        ДанныеОбъекта.Организация, 
	                                        Новый Структура("НазваниеСубконтоБУ1, НазваниеСубконтоБУ2, НазваниеСубконтоБУ3, 
	                                                        |СубконтоБУ1, СубконтоБУ2, СубконтоБУ3",
	                                                        "СубконтоСписанияСебестоимостиБУ1", "СубконтоСписанияСебестоимостиБУ2", "СубконтоСписанияСебестоимостиБУ3", 
	                                                        СтрокаТабличнойЧасти.СубконтоСписанияСебестоимостиБУ1, СтрокаТабличнойЧасти.СубконтоСписанияСебестоимостиБУ2, СтрокаТабличнойЧасти.СубконтоСписанияСебестоимостиБУ3));
															
	СчетаУчета = Новый Структура("СчетСписанияСебестоимостиБУ, СубконтоСписанияСебестоимостиБУ1,
								 |СубконтоСписанияСебестоимостиБУ2, СубконтоСписанияСебестоимостиБУ3", СтрокаТабличнойЧасти.СчетСписанияСебестоимостиБУ,
								 СтрокаТабличнойЧасти.СубконтоСписанияСебестоимостиБУ1, СтрокаТабличнойЧасти.СубконтоСписанияСебестоимостиБУ2,
								 СтрокаТабличнойЧасти.СубконтоСписанияСебестоимостиБУ3);

	ПроцедурыБухгалтерскогоУчета.ЗаполнитьАналитикуСчетаТабличнойЧасти(СтрокаТабличнойЧасти, СчетаУчета, "СубконтоСписанияСебестоимостиБУ", "СчетСписанияСебестоимостиБУ", "СубконтоСписанияСебестоимостиБУ");
															
	ПроцедурыБухгалтерскогоУчета.ПроверитьВладельцаСубконтоПодразделение(СтрокаТабличнойЧасти, 
	                                        ДанныеОбъекта.Организация, 
	                                        Новый Структура("НазваниеСубконтоБУ1, НазваниеСубконтоБУ2, НазваниеСубконтоБУ3, 
	                                                        |СубконтоБУ1, СубконтоБУ2, СубконтоБУ3",
	                                                        "СубконтоСписанияСебестоимостиНУ1", "СубконтоСписанияСебестоимостиНУ2", "СубконтоСписанияСебестоимостиНУ3", 
	                                                        СтрокаТабличнойЧасти.СубконтоСписанияСебестоимостиНУ1, СтрокаТабличнойЧасти.СубконтоСписанияСебестоимостиНУ2, СтрокаТабличнойЧасти.СубконтоСписанияСебестоимостиНУ3));
															
	СчетаУчета = Новый Структура("СчетСписанияСебестоимостиНУ, СубконтоСписанияСебестоимостиНУ1,
								 |СубконтоСписанияСебестоимостиНУ2, СубконтоСписанияСебестоимостиНУ3", СтрокаТабличнойЧасти.СчетСписанияСебестоимостиНУ,
								 СтрокаТабличнойЧасти.СубконтоСписанияСебестоимостиНУ1, СтрокаТабличнойЧасти.СубконтоСписанияСебестоимостиНУ2,
								 СтрокаТабличнойЧасти.СубконтоСписанияСебестоимостиНУ3);

	ПроцедурыБухгалтерскогоУчета.ЗаполнитьАналитикуСчетаТабличнойЧасти(СтрокаТабличнойЧасти, СчетаУчета, "СубконтоСписанияСебестоимостиНУ", "СчетСписанияСебестоимостиНУ", "СубконтоСписанияСебестоимостиНУ");

КонецПроцедуры

Процедура ТоварыСчетСебестоимостиНУПриИзмененииНаСервере(СтрокаТабличнойЧасти, ДанныеОбъекта)Экспорт
	
	ПроцедурыБухгалтерскогоУчета.ПроверитьВладельцаСубконтоПодразделение(СтрокаТабличнойЧасти, 
	                                        ДанныеОбъекта.Организация, 
	                                        Новый Структура("НазваниеСубконтоБУ1, НазваниеСубконтоБУ2, НазваниеСубконтоБУ3, 
	                                                        |СубконтоБУ1, СубконтоБУ2, СубконтоБУ3",
	                                                        "СубконтоСписанияСебестоимостиНУ1", "СубконтоСписанияСебестоимостиНУ2", "СубконтоСписанияСебестоимостиНУ3", 
	                                                        СтрокаТабличнойЧасти.СубконтоСписанияСебестоимостиНУ1, СтрокаТабличнойЧасти.СубконтоСписанияСебестоимостиНУ2, СтрокаТабличнойЧасти.СубконтоСписанияСебестоимостиНУ3));
															
	СчетаУчета = Новый Структура("СчетСписанияСебестоимостиНУ, СубконтоСписанияСебестоимостиНУ1,
								 |СубконтоСписанияСебестоимостиНУ2, СубконтоСписанияСебестоимостиНУ3", СтрокаТабличнойЧасти.СчетСписанияСебестоимостиНУ,
								 СтрокаТабличнойЧасти.СубконтоСписанияСебестоимостиНУ1, СтрокаТабличнойЧасти.СубконтоСписанияСебестоимостиНУ2,
								 СтрокаТабличнойЧасти.СубконтоСписанияСебестоимостиНУ3);

	ПроцедурыБухгалтерскогоУчета.ЗаполнитьАналитикуСчетаТабличнойЧасти(СтрокаТабличнойЧасти, СчетаУчета, "СубконтоСписанияСебестоимостиНУ", "СчетСписанияСебестоимостиНУ", "СубконтоСписанияСебестоимостиНУ");

КонецПроцедуры

// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ Услуги

Процедура ОбработкаОповещенияОбработкиТабличнойЧастиНаСервере(Форма, Параметры)Экспорт
	
	Объект = Форма.Объект;

	ТаблицаОбработки  = ПолучитьИзВременногоХранилища(Параметры.АдресОбработаннойТабличнойЧастиВХранилище);
	ИмяТабличнойЧасти = Параметры.ИмяТаблицы;
	
	Объект[ИмяТабличнойЧасти].Загрузить(ТаблицаОбработки);
	
	Форма.ЗаполнитьДобавленныеКолонкиТаблицНаСервере(Объект);
	
КонецПроцедуры

Процедура УслугиНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, ДанныеОбъекта, СчетаУчетаКЗаполнению)Экспорт
	
	Если Не ЗначениеЗаполнено(ДанныеОбъекта.ТипЦен) Тогда
		ДанныеОбъекта.Вставить("СпособЗаполненияЦены", Перечисления.СпособыЗаполненияЦен.ПоПродажнымЦенам);
	КонецЕсли;

	СведенияОНоменклатуре = ОбработкаТабличныхЧастей.ПолучитьСведенияОНоменклатуре(СтрокаТабличнойЧасти.Номенклатура, ДанныеОбъекта);
	
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.Содержание		   = СведенияОНоменклатуре.НаименованиеПолное;
	СтрокаТабличнойЧасти.Цена			   = СведенияОНоменклатуре.Цена;
	СтрокаТабличнойЧасти.СтавкаНДС         = СведенияОНоменклатуре.СтавкаНДС;
	
	ЗаполненныеСчета = СчетаУчетаВДокументах.ЗаполнитьРеквизитыПриИзменении(
		Документы.РеализацияТоваровУслуг,
		СчетаУчетаКЗаполнению,
		ДанныеОбъекта,
		"Услуги",
		СтрокаТабличнойЧасти);
	
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ЗаполненныеСчета);
		
	ПоляОбъектаСубконто		= Новый Структура("Субконто1, Субконто2, Субконто3", "СубконтоДоходовБУ1", "СубконтоДоходовБУ2", "СубконтоДоходовБУ3");
	ПоляОбъектаСубконтоНУ	= Новый Структура("Субконто1, Субконто2, Субконто3", "СубконтоДоходовНУ1", "СубконтоДоходовНУ2", "СубконтоДоходовНУ3");
	
	ПроцедурыБухгалтерскогоУчетаКлиентСервер.УстановитьДоступностьИЗаголовкиСубконто(СтрокаТабличнойЧасти.СчетДоходовБУ, СтрокаТабличнойЧасти, ПоляОбъектаСубконто);
	ПроцедурыБухгалтерскогоУчетаКлиентСервер.УстановитьДоступностьИЗаголовкиСубконто(СтрокаТабличнойЧасти.СчетДоходовНУ, СтрокаТабличнойЧасти, ПоляОбъектаСубконтоНУ);
	
	// Рассчитываем реквизиты табличной части.
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДанныеОбъекта);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВсегоТабЧасти(СтрокаТабличнойЧасти, ДанныеОбъекта.СуммаВключаетНДС);
	
КонецПроцедуры 

// ПРОЧИЕ ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМ ДОКУМЕНТА РеализацияТоваровУслуг

Процедура ОбработкаОповещенияЗаписиСчетаФактурыНаСервере(Форма)Экспорт

	// Может быть проведен исправленный счет-фактура,
	// в этом случае нужно обновить ссылку на счет-фактуру.	
	Форма.СчетФактура = Неопределено;
	
	УчетНДСИАкциза.ПолучитьДанныеСчетаФактуры(Форма, "СчетФактураВыданный");	
	УчетНДСИАкцизаКлиентСервер.ЗаполнитьТекстПроСчетФактуру(Форма, Форма.ДанныеСчетаФактуры, "НадписьСчетФактура", Истина);	
	УчетНДСиАкцизаКлиентСервер.УправлениеГруппойСчетаФактуры(Форма);

КонецПроцедуры

Процедура ОбработкаОповещенияОбработкиТабличнойЧастиТоварыНаСервере(Форма, Параметры)Экспорт
	
	Объект = Форма.Объект;

	СтрокиДляДополнительнойОбработки = Обработки.ОбработкаТабличнойЧастиТовары.ЗагрузитьТабличнуюЧастьВДанныеФормы(Объект.Товары, Параметры);
	
	СчетаУчетаВДокументах.ЗаполнитьСтроки(СтрокиДляДополнительнойОбработки, "Товары", Объект, Документы.РеализацияТоваровУслуг, Истина);

	Форма.ЗаполнитьДобавленныеКолонкиТаблицНаСервере(Объект, "Товары");
	
	Форма.ОбновитьИтогиНаСервере();
	
КонецПроцедуры

Процедура ЗаполнитьТабличнуюЧастьНомераГТД(Форма, АдресНомераГТД)Экспорт		
	
	Объект = Форма.Объект;
	
	Если ОбщегоНазначенияБККлиентСервер.ЭтоПростаяВерсияКонфигурации() И Объект.Проведен Тогда
		Возврат;
	КонецЕсли;

	Если НЕ АдресНомераГТД = Неопределено Тогда
		ТабЗначНомераГТД = ПолучитьИзВременногоХранилища(АдресНомераГТД);
		Объект.НомераГТД.Загрузить(ТабЗначНомераГТД);
		Форма.Модифицированность = Истина;
	КонецЕсли;                                           

КонецПроцедуры

Процедура СкопироватьСтрокиНаСервере(Форма, ИмяТаблицы)Экспорт
	
	Объект = Форма.Объект;
	
	ОбщегоНазначения.СкопироватьСтрокиВБуферОбмена(Объект[ИмяТаблицы], 
		Форма.Элементы[ИмяТаблицы].ВыделенныеСтроки, Объект.Ссылка.Метаданные().Имя);

КонецПроцедуры

Функция ВставитьСтрокиНаСервере(Форма, ИмяТаблицы)Экспорт
	
	Объект = Форма.Объект;
	
	ПараметрыВставки = ОбработкаТабличныхЧастей.ПолучитьПараметрыВставкиДанныхИзБуфераОбмена(Объект.Ссылка, ИмяТаблицы);
	ОпределитьСписокСвойствДляВставкиИзБуфера(ПараметрыВставки);
	ОбработкаВыбораПодборНаСервере(Форма,ПараметрыВставки, ПараметрыВставки.ИмяТаблицы);
	
	Возврат ПараметрыВставки.КоличествоДобавленныхСтрок;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура УстановитьФункциональныеОпцииФормы(Форма)Экспорт

	Объект = Форма.Объект;

	ОбщегоНазначенияБККлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(Форма);
	
	Форма.ОрганизацияПлательщикНалогаНаПрибыль = ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Объект.Организация, Объект.Дата);
	Форма.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль = Форма.ОрганизацияПлательщикНалогаНаПрибыль И ПроцедурыНалоговогоУчета.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль(Объект.Организация, Объект.Дата);
	
	Форма.ВедетсяУчетПоТоварамОрганизацийБУ = НомераГТДСервер.ВедетсяУчетПоТоварамОрганизаций(Объект.Дата);
	
КонецПроцедуры 

Процедура ПроверитьУчетнуюПолитикуИОбновитьНадписьЦеныВалюта(Форма)Экспорт
	
	Объект = Форма.Объект;

	СведенияОбУчетнойПолитикеОрганизации = УправлениеЦенообразованиемВызовСервера.ПолучитьСведенияОбУчетнойПолитикеОрганизации(Объект.Организация, Объект.Дата);
	ЯвляетсяПлательщикомНДС    = СведенияОбУчетнойПолитикеОрганизации.ЯвляетсяПлательщикомНДС;
	ЯвляетсяПлательщикомАкциза = СведенияОбУчетнойПолитикеОрганизации.ЯвляетсяПлательщикомАкциза;
	
	ИспользоватьТипыЦен = ПолучитьФункциональнуюОпцию("ИспользоватьТипыЦенНоменклатуры");
	ИспользоватьВалютныйУчет = ПолучитьФункциональнуюОпцию("ИспользоватьВалютныйУчет");
	                                                                                                     
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда                    
		ВалютаВзаиморасчетов = УправлениеЦенообразованиемВызовСервера.ПолучитьВалютуВзаиморасчетов(Объект.ДоговорКонтрагента);
	Иначе
		ВалютаВзаиморасчетов = Форма.ВалютаРегламентированногоУчета;
	КонецЕсли;
	
	Если Не ЯвляетсяПлательщикомАкциза И Не ИспользоватьТипыЦен И (Не ИспользоватьВалютныйУчет 
		ИЛИ (ИспользоватьВалютныйУчет И ВалютаВзаиморасчетов = Форма.ВалютаРегламентированногоУчета)) Тогда
		Объект.СуммаВключаетАкциз = Ложь;
		Объект.УчитыватьАкциз = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСчетаУчета(Форма, ПричиныИзмененияСчетовУчета, ИмяРеквизита)Экспорт
	
	Если ПричиныИзмененияСчетовУчета.Найти("КопированиеДокумента") <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Объект = Форма.Объект;

	Если Не СчетаУчетаВДокументахКлиентСервер.МожноНачатьЗаполнениеСчетовУчета(ИмяРеквизита, ПричиныИзмененияСчетовУчета) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗаполнения = РеализацияТоваровУслугФормыКлиентСервер.НачатьЗаполнениеСчетовУчета(ПричиныИзмененияСчетовУчета, Объект);
	ИзмененныеЗначения = СчетаУчетаВДокументах.ЗаполнитьОбъектПриИзменении(ПараметрыЗаполнения);
	
	Если ЗначениеЗаполнено(ИзмененныеЗначения)
		И СчетаУчетаВДокументахВызовСервераПовтИсп.ПользовательУправляетСчетамиУчета() Тогда
		РеализацияТоваровУслугФормыКлиентСервер.СформироватьЗаголовокСчетаУчета(Форма);
		ПоказатьСообщениеОЗаполненииСчетовУчета(Объект.Ссылка);
	КонецЕсли;
	
	Если СчетаУчетаВДокументахВызовСервераПовтИсп.ПользовательУправляетСчетамиУчета() Тогда
		Для Каждого ИмяТабличнойЧасти Из СчетаУчетаВДокументахКлиентСервер.ТабличныеЧастиКЗаполнению(ПараметрыЗаполнения.КЗаполнению) Цикл
			
			Если ИмяТабличнойЧасти = "Товары" Тогда
				
				ПоляОбъектаДоходБУ  = Новый Структура("Субконто1, Субконто2, Субконто3",
											 "СубконтоДоходовБУ1", "СубконтоДоходовБУ2", "СубконтоДоходовБУ3");
				ПоляОбъектаДоходНУ  = Новый Структура("Субконто1, Субконто2, Субконто3",
											 "СубконтоДоходовНУ1", "СубконтоДоходовНУ2", "СубконтоДоходовНУ3");
				
				ПоляОбъектаСебестБУ = Новый Структура("Субконто1, Субконто2, Субконто3",
											 "СубконтоСписанияСебестоимостиБУ1", "СубконтоСписанияСебестоимостиБУ2", "СубконтоСписанияСебестоимостиБУ3");
				ПоляОбъектаСебестНУ = Новый Структура("Субконто1, Субконто2, Субконто3",
											 "СубконтоСписанияСебестоимостиНУ1", "СубконтоСписанияСебестоимостиНУ2", "СубконтоСписанияСебестоимостиНУ3");
				
				ТоварыСчетДоходовБУ = ПараметрыЗаполнения.КЗаполнению.Получить("Товары.СчетДоходовБУ") <> Неопределено;
				ТоварыСчетДоходовНУ = ПараметрыЗаполнения.КЗаполнению.Получить("Товары.СчетДоходовНУ") <> Неопределено;
				ТоварыСчетСебестБУ  = ПараметрыЗаполнения.КЗаполнению.Получить("Товары.СчетСписанияСебестоимостиБУ") <> Неопределено;
				ТоварыСчетСебестНУ  = ПараметрыЗаполнения.КЗаполнению.Получить("Товары.СчетСписанияСебестоимостиНУ") <> Неопределено;
				
				Если НЕ (ТоварыСчетДоходовБУ ИЛИ ТоварыСчетДоходовНУ ИЛИ ТоварыСчетСебестБУ ИЛИ ТоварыСчетСебестНУ) Тогда
					Продолжить;
				КонецЕсли;
				
				Для Каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл
					Если ТоварыСчетДоходовБУ Тогда 
						ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриИзмененииСчета(СтрокаТабличнойЧасти.СчетДоходовБУ, СтрокаТабличнойЧасти, ПоляОбъектаДоходБУ, Истина);
					КонецЕсли;
					Если ТоварыСчетДоходовНУ Тогда 
						ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриИзмененииСчета(СтрокаТабличнойЧасти.СчетДоходовНУ, СтрокаТабличнойЧасти, ПоляОбъектаДоходНУ, Истина);
					КонецЕсли;
					Если ТоварыСчетСебестБУ Тогда 
						ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриИзмененииСчета(СтрокаТабличнойЧасти.СчетСписанияСебестоимостиБУ, СтрокаТабличнойЧасти, ПоляОбъектаСебестБУ, Истина);
					КонецЕсли;
					Если ТоварыСчетСебестНУ Тогда 
						ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриИзмененииСчета(СтрокаТабличнойЧасти.СчетСписанияСебестоимостиНУ, СтрокаТабличнойЧасти, ПоляОбъектаСебестНУ, Истина);
					КонецЕсли;
				КонецЦикла;

			КонецЕсли;
			
			Если ИмяТабличнойЧасти = "Услуги" Тогда
				
				ПоляОбъектаДоходБУ = Новый Структура("Субконто1, Субконто2, Субконто3",
											 "СубконтоДоходовБУ1", "СубконтоДоходовБУ2", "СубконтоДоходовБУ3");
				ПоляОбъектаДоходНУ = Новый Структура("Субконто1, Субконто2, Субконто3",
											 "СубконтоДоходовНУ1", "СубконтоДоходовНУ2", "СубконтоДоходовНУ3");
				
				УслугиСчетДоходовБУ = ПараметрыЗаполнения.КЗаполнению.Получить("Услуги.СчетДоходовБУ") <> Неопределено;
				УслугиСчетДоходовНУ = ПараметрыЗаполнения.КЗаполнению.Получить("Услуги.СчетДоходовНУ") <> Неопределено;
				
				Если НЕ (УслугиСчетДоходовБУ ИЛИ УслугиСчетДоходовНУ) Тогда
					Продолжить;
				КонецЕсли;
				
				Для Каждого СтрокаТабличнойЧасти Из Объект.Услуги Цикл
					Если УслугиСчетДоходовБУ Тогда 
						ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриИзмененииСчета(СтрокаТабличнойЧасти.СчетДоходовБУ, СтрокаТабличнойЧасти, ПоляОбъектаДоходБУ, Истина);
					КонецЕсли;
					Если УслугиСчетДоходовНУ Тогда 
						ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриИзмененииСчета(СтрокаТабличнойЧасти.СчетДоходовНУ, СтрокаТабличнойЧасти, ПоляОбъектаДоходНУ, Истина);
					КонецЕсли;
				КонецЦикла;

			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПоказатьСообщениеОЗаполненииСчетовУчета(ОбъектСсылка)
	
	ТекстСообщения = НСтр("ru = 'Счета учета изменены в соответствии со значениями по умолчанию.'");
	ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ОбъектСсылка, , "Объект");
	
КонецПроцедуры

Процедура ПроверитьСоответствиеКонтрагентаВидуОперации(ВидОперации, Контрагент, ДоговорКонтрагента, ОтказОтВыбранного = Неопределено, ПричиныИзмененияСчетовУчета = Неопределено) Экспорт
	
	Если ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРеализацияТоваров.ПередачаСтруктурномуПодразделению") Тогда
		
		Если ЗначениеЗаполнено(Контрагент) Тогда
			
			Если Не КонтрагентКакОрганизация(Контрагент) Тогда
				
				Контрагент = ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");
				ОтказОтВыбранного = Истина;
				
				Если ПричиныИзмененияСчетовУчета <> Неопределено Тогда
					ПричиныИзмененияСчетовУчета.Добавить("Контрагент");
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
					ДоговорКонтрагента = ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка");
					Если ПричиныИзмененияСчетовУчета <> Неопределено Тогда
						ПричиныИзмененияСчетовУчета.Добавить("ДоговорКонтрагента");
					КонецЕсли;
				КонецЕсли;
				
				ТекстСообщения = СтрШаблон(НСтр("ru = 'При выбранном виде операции ""%1"" может быть выбран только контрагент,
					|соответствующий какому-либо структурному подразделению.
					|Контрагент будет очищен.'"), ВидОперации);
					
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , "Объект.Контрагент");
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция СтруктураДоступныхВидовДоговоров()
        
    СписокВидовДоговоров = Новый Массив;
	СписокВидовДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПокупателем"));
	СписокВидовДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.Прочее"));
    
    СтруктураВидовДоговоров = Новый Структура("СписокДопустимыхВидовДоговоров", СписокВидовДоговоров);
    
    Возврат СтруктураВидовДоговоров;

КонецФункции

Функция КонтрагентКакОрганизация(Контрагент)Экспорт
	
	СобственныйКонтрагент = Ложь;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СобственныеКонтрагенты.Контрагент
	|ИЗ
	|	РегистрСведений.СобственныеКонтрагенты КАК СобственныеКонтрагенты
	|ГДЕ
	|	СобственныеКонтрагенты.Контрагент = &ЭтотКонтрагент");
	Запрос.УстановитьПараметр("ЭтотКонтрагент", Контрагент);
	
	Если Не Запрос.Выполнить().Пустой() Тогда
		СобственныйКонтрагент = Истина;
	КонецЕсли;
	
	Возврат СобственныйКонтрагент;
	
КонецФункции

Функция ПараметрыФормыРедактированияНомеровГТД(Форма) Экспорт
	
	Объект = Форма.Объект;
	
	ПараметрыФормы = НомераГТДСервер.ЗаполнитьПараметрыФормыРедактированияНомеровГТД(Объект, Форма);
	Если ОбщегоНазначенияБККлиентСервер.ЭтоПростаяВерсияКонфигурации() Тогда
		ПараметрыФормы.ТолькоПросмотр = Объект.Проведен;
	КонецЕсли;

	Возврат ПараметрыФормы;
	
КонецФункции

Процедура ОпределитьСписокСвойствДляВставкиИзБуфера(ПараметрыВставки)
	
	СписокСвойств = Новый Массив;

	Если ПараметрыВставки.ИмяТаблицы = "Товары" Тогда
		СписокСвойств.Добавить("Номенклатура");
		СписокСвойств.Добавить("ЕдиницаИзмерения");
		СписокСвойств.Добавить("Коэффициент");
		СписокСвойств.Добавить("Количество");
		СписокСвойств.Добавить("Цена");
		СписокСвойств.Добавить("СтавкаНДС");
		СписокСвойств.Добавить("НДСВидОперацииРеализации");
		СписокСвойств.Добавить("СтавкаАкциза");
		
		Если ПараметрыВставки.ИсточникИДокументОдногоВида Тогда 			
			СписокСвойств.Добавить("АкцизВидОперацииРеализации");	
		КонецЕсли;
		
		Если ПараметрыВставки.ПоказыватьСчетаУчетаВДокументах Тогда
			
			СписокСвойств.Добавить("СчетУчетаБУ");				
			СписокСвойств.Добавить("СчетУчетаНУ");				
			СписокСвойств.Добавить("СчетУчетаНДСПоРеализации");		
			
			Если ПараметрыВставки.ИсточникИДокументОдногоВида Тогда
				СписокСвойств.Добавить("СчетДоходовБУ");	
				СписокСвойств.Добавить("СубконтоДоходовБУ1");
				СписокСвойств.Добавить("СубконтоДоходовБУ2");
				СписокСвойств.Добавить("СубконтоДоходовБУ3");
				
				СписокСвойств.Добавить("СчетДоходовНУ");	
				СписокСвойств.Добавить("СубконтоДоходовНУ1");
				СписокСвойств.Добавить("СубконтоДоходовНУ2");
				СписокСвойств.Добавить("СубконтоДоходовНУ3");
				
				СписокСвойств.Добавить("СчетСписанияСебестоимостиБУ");	
				СписокСвойств.Добавить("СубконтоСписанияСебестоимостиБУ1");
				СписокСвойств.Добавить("СубконтоСписанияСебестоимостиБУ2");
				СписокСвойств.Добавить("СубконтоСписанияСебестоимостиБУ3");
				
				СписокСвойств.Добавить("СчетСписанияСебестоимостиНУ");	
				СписокСвойств.Добавить("СубконтоСписанияСебестоимостиНУ1");
				СписокСвойств.Добавить("СубконтоСписанияСебестоимостиНУ2");
				СписокСвойств.Добавить("СубконтоСписанияСебестоимостиНУ3"); 				
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ПараметрыВставки.ИмяТаблицы = "Услуги" Тогда
		
		СписокСвойств.Добавить("Номенклатура");
		СписокСвойств.Добавить("Содержание");
		СписокСвойств.Добавить("Количество");
		СписокСвойств.Добавить("Цена");
		СписокСвойств.Добавить("СтавкаНДС");
		СписокСвойств.Добавить("НДСВидОперацииРеализации");
		
		
		Если ПараметрыВставки.ПоказыватьСчетаУчетаВДокументах Тогда
			
			СписокСвойств.Добавить("СчетУчетаНДСПоРеализации");	
			
			Если ПараметрыВставки.ИсточникИДокументОдногоВида Тогда 		
				СписокСвойств.Добавить("СчетДоходовБУ");	
				СписокСвойств.Добавить("СубконтоДоходовБУ1");
				СписокСвойств.Добавить("СубконтоДоходовБУ2");
				СписокСвойств.Добавить("СубконтоДоходовБУ3");
				
				СписокСвойств.Добавить("СчетДоходовНУ");	
				СписокСвойств.Добавить("СубконтоДоходовНУ1");
				СписокСвойств.Добавить("СубконтоДоходовНУ2");
				СписокСвойств.Добавить("СубконтоДоходовНУ3");
				
			КонецЕсли;   	
			
		КонецЕсли;
	КонецЕсли;    	
	
	ПараметрыВставки.СписокСвойств = ОбработкаТабличныхЧастей.ПолучитьСписокСвойствИмеющихсяВТаблицеДанных(
	ПараметрыВставки.Данные, СписокСвойств);
	
КонецПроцедуры

Функция ПолучитьПараметрыОбработкиТабличнойЧасти(Форма, ИмяТабличнойЧасти, СинонимТабличнойЧасти, АдресХранилищаТабличнойЧасти) Экспорт
	
	Объект = Форма.Объект;
	
	ПараметрыОбработки = Новый Структура;
	
	ПараметрыОбработки.Вставить("АдресХранилищаТабличнойЧасти", АдресХранилищаТабличнойЧасти);
	ПараметрыОбработки.Вставить("ДокументСсылка"              , Объект.Ссылка);
	ПараметрыОбработки.Вставить("ДокументДата"                , Объект.Дата);
	ПараметрыОбработки.Вставить("ДокументВалюта"              , Объект.ВалютаДокумента);
	ПараметрыОбработки.Вставить("ДокументКурс"                , Объект.КурсВзаиморасчетов);
	ПараметрыОбработки.Вставить("ДокументКратность"           , Объект.КратностьВзаиморасчетов);
	ПараметрыОбработки.Вставить("ДокументСуммаВключаетНДС"    , Объект.СуммаВключаетНДС);
	ПараметрыОбработки.Вставить("ДокументУчитыватьНДС"        , Объект.УчитыватьНДС);
	ПараметрыОбработки.Вставить("ДокументНДСВключенВСтоимость", Ложь);
	ПараметрыОбработки.Вставить("ИмяТаблицы"                  , ИмяТабличнойЧасти);
	ПараметрыОбработки.Вставить("Заголовок"                   , СинонимТабличнойЧасти);
	
	СтруктураРеквизитов          = Новый Структура;
	СтруктураСвязанныхРеквизитов = Новый Структура;
	
	СтруктураРеквизитов.Вставить("Содержание");
	СтруктураРеквизитов.Вставить("Количество");
	СтруктураРеквизитов.Вставить("Цена");
	СтруктураРеквизитов.Вставить("СтавкаНДС");
	СтруктураРеквизитов.Вставить("СчетУчетаНДСПоРеализации");
	СтруктураРеквизитов.Вставить("НДСВидОперацииРеализации");
	
	СтруктураРеквизитов.Вставить("СчетДоходовБУ");
	СтруктураРеквизитов.Вставить("СубконтоДоходовБУ1");
	СтруктураРеквизитов.Вставить("СубконтоДоходовБУ2");
	СтруктураРеквизитов.Вставить("СубконтоДоходовБУ3");
	
	СтруктураРеквизитов.Вставить("СчетДоходовНУ");
	СтруктураРеквизитов.Вставить("СубконтоДоходовНУ1");
	СтруктураРеквизитов.Вставить("СубконтоДоходовНУ2");
	СтруктураРеквизитов.Вставить("СубконтоДоходовНУ3");
		
	СтруктураСвязанныхРеквизитов.Вставить("СчетДоходовБУ", "СубконтоДоходовБУ1,СубконтоДоходовБУ2,СубконтоДоходовБУ3");
	СтруктураСвязанныхРеквизитов.Вставить("СчетДоходовНУ", "СубконтоДоходовНУ1,СубконтоДоходовНУ2,СубконтоДоходовНУ3");
	
	ПараметрыОбработки.Вставить("СтруктураРеквизитов", СтруктураРеквизитов);
	ПараметрыОбработки.Вставить("СтруктураСвязанныхРеквизитов", СтруктураСвязанныхРеквизитов);
	
	ВидимыеКолонки = Новый Массив;
	ПолучитьВидимыеКолонкиТабличнойЧасти(Форма.Элементы[ИмяТабличнойЧасти], Форма.Элементы[ИмяТабличнойЧасти].ПутьКДанным + ".", ВидимыеКолонки);
	ПараметрыОбработки.Вставить("ВидимыеКолонки", ВидимыеКолонки);

	Возврат ПараметрыОбработки;
	
КонецФункции

Функция ПолучитьВидимыеКолонкиТабличнойЧасти(ЭлементТабличнаяЧасть, ПутьКДаннымТаблицы, МассивКолонок)Экспорт
	
	Для Каждого Элемент Из ЭлементТабличнаяЧасть.ПодчиненныеЭлементы Цикл
		Если ТипЗнч(Элемент) = Тип("ГруппаФормы") Тогда
			ПолучитьВидимыеКолонкиТабличнойЧасти(Элемент, ПутьКДаннымТаблицы, МассивКолонок);
		ИначеЕсли ТипЗнч(Элемент) = Тип("ПолеФормы") И Элемент.Видимость Тогда
			МассивКолонок.Добавить(СтрЗаменить(Элемент.ПутьКДанным, ПутьКДаннымТаблицы, ""));
		КонецЕсли;
	КонецЦикла;

КонецФункции

Функция ЗаполнитьЦеныПоСебестоимостиНаСервере(Форма,ТабличнаяЧасть, УникальныйИдентификатор)Экспорт
	
	Объект = Форма.Объект;
	
	СтруктураПараметров = Новый Структура;
	
	СтруктураПараметров.Вставить("ДокументСсылка",      Объект.Ссылка);
	СтруктураПараметров.Вставить("ТабличнаяЧасть",      ТабличнаяЧасть);
	НезаполненныеСтроки = Объект.Товары.Выгрузить();
	НезаполненныеСтроки.Очистить();
	СтруктураПараметров.Вставить("НезаполненныеСтроки", НезаполненныеСтроки);
	
	НаименованиеЗадания = "ЗаполнитьЦеныПоСебестоимости";
	
	РезультатВыполнения = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
		УникальныйИдентификатор, 
		"Документы.РеализацияТоваровУслуг.ЗаполнитьЦеныПоСебестоимости", 
		СтруктураПараметров, 
		НаименованиеЗадания);
		
	АдресХранилища = РезультатВыполнения.АдресХранилища;

	Если РезультатВыполнения.ЗаданиеВыполнено Тогда
		ЗагрузитьПодготовленныеДанные(Форма,АдресХранилища );
	КонецЕсли;
	
	Возврат РезультатВыполнения;
	
КонецФункции

Процедура ЗагрузитьПодготовленныеДанные(Форма,АдресХранилища)Экспорт
	
	Объект = Форма.Объект;
	
	СтруктураДанных = ПолучитьИзВременногоХранилища(АдресХранилища);
	
	Если ТипЗнч(СтруктураДанных) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Объект.Товары.Загрузить(СтруктураДанных.ТабличнаяЧасть);
	
	Для Каждого Строка Из Объект.Товары Цикл
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВсегоТабЧасти(Строка, Объект.СуммаВключаетНДС, Объект.СуммаВключаетАкциз);
	КонецЦикла;
	
	
	НезаполненныеСтроки = СтруктураДанных.НезаполненныеСтроки;
	
	КолонкаНомерСтроки = НезаполненныеСтроки.Колонки.Найти("НомерСтроки");
	Если КолонкаНомерСтроки = Неопределено Тогда
		КолонкаНомерСтроки = НезаполненныеСтроки.Колонки.Найти("LineNumber");
		Если КолонкаНомерСтроки <> Неопределено Тогда
			КолонкаНомерСтроки.Имя = "НомерСтроки";
		КонецЕсли;
	КонецЕсли;
	
	Если КолонкаНомерСтроки <> Неопределено Тогда
		Для Каждого СтрокаТабличнойЧасти Из СтруктураДанных.НезаполненныеСтроки Цикл
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Для номенклатуры ""%1"" не удалось заполнить цену по себестоимости.'"),
				СтрокаТабличнойЧасти.Номенклатура);
			Поле = "Товары[" + Формат(СтрокаТабличнойЧасти.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].Номенклатура";
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, Поле, "Объект");
		КонецЦикла;
	КонецЕсли;
	
	Форма.ОбновитьИтогиНаСервере();
	Форма.Модифицированность = Истина;

КонецПроцедуры

&НаСервере
Процедура РазблокироватьРеквизиты(Форма) Экспорт
	
	Если Форма.Элементы.Найти("Товары") <> Неопределено Тогда
		Форма.Элементы.Товары.ТолькоПросмотр       = Ложь;
		Форма.Элементы.Товары.ИзменятьСоставСтрок  = Ложь;
		Форма.Элементы.Товары.ИзменятьПорядокСтрок = Ложь;
	КонецЕсли;
	
	Если Форма.Элементы.Найти("Услуги") <> Неопределено Тогда
		Форма.Элементы.Услуги.ТолькоПросмотр          = Ложь;
		Форма.Элементы.Услуги.ИзменятьСоставСтрок     = Ложь;
		Форма.Элементы.Услуги.ИзменятьПорядокСтрок    = Ложь;
	КонецЕсли;
	
	Форма.Элементы.ЦеныИВалюта.ТолькоПросмотр  = Истина;
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыНалоговогоУчета(ПараметрыОбъекта, СтрокаТабличнойЧасти, ИмяТабличнойЧасти, СчетаУчетаКЗаполнению) Экспорт
		
	ЗаполненныеСчета = СчетаУчетаВДокументах.ЗаполнитьРеквизитыПриИзменении(
		Документы.РеализацияТоваровУслуг,
		СчетаУчетаКЗаполнению,
		ПараметрыОбъекта,
		ИмяТабличнойЧасти,
		СтрокаТабличнойЧасти);
	
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ЗаполненныеСчета);
	
КонецПроцедуры

Функция ПолучитьШиринуПоляДоговор(ПоказыватьУчастников = Истина)
	
	Если ПоказыватьУчастников Тогда
	   МаксимальнаяШирина = 24;
	Иначе	
	   МаксимальнаяШирина = 28;
	КонецЕсли; 

	Возврат МаксимальнаяШирина;

КонецФункции
