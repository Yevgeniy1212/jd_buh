
#Область ПрограммныйИнтерфейс

// Заполняет основные сведения о библиотеке или основной конфигурации.
// Библиотека, имя которой имя совпадает с именем конфигурации в метаданных, определяется как основная конфигурация.
// 
// Параметры:
//  Описание - Структура - сведения о библиотеке:
//
//   * Имя                 - Строка - имя библиотеки, например, "СтандартныеПодсистемы".
//   * Версия              - Строка - версия в формате из 4-х цифр, например, "2.1.3.1".
//
//   * ТребуемыеПодсистемы - Массив - имена других библиотек (Строка), от которых зависит данная библиотека.
//                                    Обработчики обновления таких библиотек должны быть вызваны ранее
//                                    обработчиков обновления данной библиотеки.
//                                    При циклических зависимостях или, напротив, отсутствии каких-либо зависимостей,
//                                    порядок вызова обработчиков обновления определяется порядком добавления модулей
//                                    в процедуре ПриДобавленииПодсистем общего модуля
//                                    ПодсистемыКонфигурацииПереопределяемый.
//   * РежимВыполненияОтложенныхОбработчиков - Строка - "Последовательно" - отложенные обработчики обновления выполняются
//                                    последовательно в интервале от номера версии информационной базы до номера
//                                    версии конфигурации включительно или "Параллельно" - отложенный обработчик после
//                                    обработки первой порции данных передает управление следующему обработчику, а после
//                                    выполнения последнего обработчика цикл повторяется заново.
//
Процедура ПриДобавленииПодсистемы(Описание) Экспорт

	Описание.Имя    = "БиблиотекаЭлектронныхТрудовыхДоговоров";
	Описание.Версия = "1.0.6.2";

КонецПроцедуры

// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
// Параметры:
//	Обработчики - ТаблицаЗначений - описание полей, см. в процедуре
//		ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления().
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия    = "1.0.1.3";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЭТД.ОбновитьПараметрыЭТД";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия    = "1.0.2.1";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЭТД.ЗаполнитьУсловияТрудаПоУмолчанию";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия    = "1.0.3.1";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЭТД.ОбновитьПараметрыЭТД1031";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия    = "1.0.3.1";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЭТД.ЗаполнитьEContractОтложенно";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("7c613976-96ad-4b4f-8ad7-e05c1b6b519c");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение реквизита Электронный трудовой договор в ЭТД'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия    = "1.0.4.1";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЭТД.ЗаполнитьНаименованиеПричиныРасторженияОтложенно";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("d7191abb-b031-43c6-a6e4-4d728685d7c5");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение реквизита Наименование причины расторжения в ЭТД'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия    = "1.0.4.1";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЭТД.ОбновитьПараметрыЭТД1041";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия    = "1.0.5.1";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЭТД.ОбновитьПараметрыЭТД1051";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия    = "1.0.6.1";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЭТД.ЗаполнитьКодРегионаРабочегоМестаОтложенно";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("525f17ce-bb00-463a-9242-cb7be26ec077");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение реквизита Код КАТО места работы в ЭТД'");
	
КонецПроцедуры

// Вызывается перед обработчиками обновления данных ИБ.
//
Процедура ПередОбновлениемИнформационнойБазы() Экспорт
	
КонецПроцедуры

// Вызывается после завершения обновления данных ИБ.
// 
// Параметры:
//   ПредыдущаяВерсияИБ - Строка - версия до обновления. "0.0.0.0" для "пустой" ИБ.
//   ТекущаяВерсияИБ - Строка - версия после обновления.
//   ВыполненныеОбработчики - ДеревоЗначений - список выполненных процедур-обработчиков обновления,
//                                             сгруппированных по номеру версии.
//   ВыводитьОписаниеОбновлений - Булево - если установить Истина, то будет выведена форма
//                                с описанием обновлений. По умолчанию, Истина.
//                                Возвращаемое значение.
//   МонопольныйРежим           - Булево - Истина, если обновление выполнялось в монопольном режиме.
//
Процедура ПослеОбновленияИнформационнойБазы(Знач ПредыдущаяВерсияИБ, Знач ТекущаяВерсияИБ,
		Знач ВыполненныеОбработчики, ВыводитьОписаниеОбновлений, МонопольныйРежим) Экспорт
	
КонецПроцедуры

// Вызывается при подготовке табличного документа с описанием изменений системы.
//
// Параметры:
//  Макет	 - ТабличныйДокумент - описание обновлений.
//  См. также общий макет ОписаниеИзмененийСистемы.
//
Процедура ПриПодготовкеМакетаОписанияОбновлений(Знач Макет) Экспорт
	
КонецПроцедуры

// Позволяет переопределить режим обновления данных информационной базы.
// Для использования в редких (нештатных) случаях перехода, не предусмотренных в
// стандартной процедуре определения режима обновления.
//
// Параметры:
//   РежимОбновленияДанных - Строка - в обработчике можно присвоить одно из значений:
//              "НачальноеЗаполнение"     - если это первый запуск пустой базы (области данных);
//              "ОбновлениеВерсии"        - если выполняется первый запуск после обновление конфигурации базы данных;
//              "ПереходСДругойПрограммы" - если выполняется первый запуск после обновление конфигурации базы данных, 
//                                          в которой изменилось имя основной конфигурации.
//
//   СтандартнаяОбработка  - Булево - если присвоить Ложь, то стандартная процедура
//                                    определения режима обновления не выполняется, 
//                                    а используется значение РежимОбновленияДанных.
//
Процедура ПриОпределенииРежимаОбновленияДанных(РежимОбновленияДанных, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры

// Добавляет в список процедуры-обработчики перехода с другой программы (с другим именем конфигурации).
// Например, для перехода между разными, но родственными конфигурациями: базовая -> проф -> корп.
// Вызывается перед началом обновления данных ИБ.
//
// Параметры:
//	Обработчики - ТаблицаЗначений - с колонками:
//		* ПредыдущееИмяКонфигурации - Строка - имя конфигурации, с которой выполняется переход;
//			или "*", если нужно выполнять при переходе с любой конфигурации.
//		* Процедура - Строка - полное имя процедуры-обработчика перехода с программы ПредыдущееИмяКонфигурации. 
//			Например, "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику"
//			Обязательно должна быть экспортной.
//
// Пример:
//	Обработчик = Обработчики.Добавить();
//	Обработчик.ПредыдущееИмяКонфигурации  = "УправлениеТорговлей";
//	Обработчик.Процедура                  = "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику";
//
Процедура ПриДобавленииОбработчиковПереходаСДругойПрограммы(Обработчики) Экспорт
	
КонецПроцедуры

// Вызывается после выполнения всех процедур-обработчиков перехода с другой программы (с другим именем конфигурации),
// и до начала выполнения обновления данных ИБ.
//
// Параметры:
//  ПредыдущееИмяКонфигурации    - Строка - имя конфигурации до перехода.
//  ПредыдущаяВерсияКонфигурации - Строка - имя предыдущей конфигурации (до перехода).
//  Параметры                    - Структура - 
//    * ВыполнитьОбновлениеСВерсии   - Булево - по умолчанию Истина. Если установить Ложь, 
//        то будут выполнена только обязательные обработчики обновления (с версией "*").
//    * ВерсияКонфигурации           - Строка - номер версии после перехода. 
//        По умолчанию, равен значению версии конфигурации в свойствах метаданных.
//        Для того чтобы выполнить, например, все обработчики обновления с версии ПредыдущаяВерсияКонфигурации, 
//        следует установить значение параметра в ПредыдущаяВерсияКонфигурации.
//        Для того чтобы выполнить вообще все обработчики обновления, установить значение "0.0.0.1".
//    * ОчиститьСведенияОПредыдущейКонфигурации - Булево - по умолчанию Истина. 
//        Для случаев когда предыдущая конфигурация совпадает по имени с подсистемой текущей конфигурации, 
//		  следует указать Ложь.
//
Процедура ПриЗавершенииПереходаСДругойПрограммы(Знач ПредыдущееИмяКонфигурации, 
	Знач ПредыдущаяВерсияКонфигурации, Параметры) Экспорт
	
КонецПроцедуры

Процедура ОбновитьПараметрыЭТД() Экспорт
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЭТД = ЭТДСерверПовтИсп.ПолучитьПараметрыЭТД();
	Если ПараметрыЭТД.Свойство("ИспользоватьВнешнююКриптографиюДляКомпоненты") Тогда
		ПараметрыЗаполнения.Вставить("ИспользоватьВнешнююКриптографиюДляКомпоненты", ПараметрыЭТД.ИспользоватьВнешнююКриптографиюДляКомпоненты);
	КонецЕсли;
	
	ЭТДСервер.ЗаполнитьПараметрыЭТД(Истина, ПараметрыЗаполнения);
	
КонецПроцедуры

Процедура ЗаполнитьУсловияТрудаПоУмолчанию() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЭТД.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ЭТД КАК ЭТД
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭТД.УсловияТруда КАК ЭТДУсловияТруда
		|		ПО ЭТД.Ссылка = ЭТДУсловияТруда.Ссылка
		|ГДЕ
		|	ЭТДУсловияТруда.УсловиеТруда ЕСТЬ NULL";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ДокументОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		
		УсловияТрудаСтрока = ЭТДСервер.ПолучитьУсловияТрудаПоУмолчанию();
		
		ЭТДКлиентСервер.ЗаполнитьУсловияТруда(ДокументОбъект.УсловияТруда, УсловияТрудаСтрока);
		
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		Попытка
			ДокументОбъект.Записать();
		Исключение
			ТекстСообщения = НСтр(
			"ru = 'при записи документа ""Электронный трудовой договор"" произошла ошибка: 
			|%1'");
			
			ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ПодробноеПредставлениеОшибки);
			
			ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Не удалось обновить ""Документ  ""Электронный трудовой договор"""".'"), 
			УровеньЖурналаРегистрации.Ошибка, , , Комментарий);
		КонецПопытки
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьПараметрыЭТД1031() Экспорт
	
	ОбновитьПараметрыЭТД();
	
КонецПроцедуры

// Заполнение выполнялось из-за того, что некоторый период времени из 1С поле не отправлялось, но сервис ЭТД заполнял поле значением Истина
Процедура ЗаполнитьEContractОтложенно(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЭТД.Ссылка КАК Ссылка,
		|	ЭТД.Статус КАК Статус
		|ИЗ
		|	Документ.ЭТД КАК ЭТД
		|ГДЕ
		|	НЕ ЭТД.ЭтоДополнительноеСоглашение
		|	И (ЭТД.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЭТД.Сформирован)
		|	И ЭТД.ЯвляетсяЭТД <> ""true""
		|	ИЛИ ЭТД.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЭТД.Сформирован)
		|	И ЭТД.ЯвляетсяЭТД <> ""false"")";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	ПроблемныхОбъектов = 0;
	ОбъектовОбработано = 0;
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НачатьТранзакцию();
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Документ.ЭТД");
		ЭлементБлокировки.УстановитьЗначение("Ссылка", ВыборкаДетальныеЗаписи.Ссылка);
		
		ДокументОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		
		Попытка
			Блокировка.Заблокировать();
			
			Если ВыборкаДетальныеЗаписи.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЭТД.Сформирован") Тогда
				ДокументОбъект.ЯвляетсяЭТД = "false";
			Иначе
				ДокументОбъект.ЯвляетсяЭТД = "true";
			КонецЕсли;
			ДокументОбъект.ОбменДанными.Загрузка = Истина;
			
			ДокументОбъект.Записать();
			
			ОбъектовОбработано = ОбъектовОбработано + 1;
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию(); 
			
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			
			ТекстСообщения = НСтр(
			"ru = 'при записи документа ""Электронный трудовой договор"" произошла ошибка: 
			|%1'");
			
			ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ПодробноеПредставлениеОшибки);
			
			ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Не удалось обновить ""Документ  ""Электронный трудовой договор"""".'"), 
			УровеньЖурналаРегистрации.Ошибка, , , Комментарий);
		КонецПопытки
	КонецЦикла;
	
	Если ПроблемныхОбъектов = 0 Тогда
	
		Параметры.ОбработкаЗавершена = Истина;
	
	Иначе
		
		Параметры.ОбработкаЗавершена = Ложь;

		Если ОбъектовОбработано = 0 Тогда
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Процедуре Заполнения eContract (отложенно)
					|не удалось установить у документов ЭТД  признак ""eContract"":  у %1 документов.'"), 
					ПроблемныхОбъектов);
			ВызватьИсключение ТекстСообщения;
		Иначе
			ТекстСообщения = СтрШаблон(
					НСтр("ru = 'Процедура Заполнения eContract (отложенно)
						|обработала очередную порцию документов ЭТД: %1 документов'"), 
						ОбъектовОбработано);
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
				УровеньЖурналаРегистрации.Информация,
				,
				,
				ТекстСообщения);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьНаименованиеПричиныРасторженияОтложенно(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЭТД.Ссылка КАК Ссылка,
		|	ЭТД.КодПричиныРасторжения КАК КодПричиныРасторжения
		|ИЗ
		|	Документ.ЭТД КАК ЭТД
		|ГДЕ
		|	ЭТД.КодПричиныРасторжения <> """"
		|	И ЭТД.НаименованиеПричиныРасторжения = """"";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	ПроблемныхОбъектов = 0;
	ОбъектовОбработано = 0;
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НачатьТранзакцию();
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Документ.ЭТД");
		ЭлементБлокировки.УстановитьЗначение("Ссылка", ВыборкаДетальныеЗаписи.Ссылка);
		
		ДокументОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		
		Попытка
			Блокировка.Заблокировать();
			
			ДокументОбъект.НаименованиеПричиныРасторжения = ЭТДСервер.ПолучитьНаименованиеПричиныРасторжения(ВыборкаДетальныеЗаписи.КодПричиныРасторжения);
			
			ДокументОбъект.ОбменДанными.Загрузка = Истина;
			
			ДокументОбъект.Записать();
			
			ОбъектовОбработано = ОбъектовОбработано + 1;
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию(); 
			
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			
			ТекстСообщения = НСтр(
			"ru = 'при записи документа ""Электронный трудовой договор"" произошла ошибка: 
			|%1'");
			
			ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ПодробноеПредставлениеОшибки);
			
			ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Не удалось обновить ""Документ  ""Электронный трудовой договор"""".'"), 
			УровеньЖурналаРегистрации.Ошибка, , , Комментарий);
		КонецПопытки
	КонецЦикла;
	
	Если ПроблемныхОбъектов = 0 Тогда
	
		Параметры.ОбработкаЗавершена = Истина;
	
	Иначе
		
		Параметры.ОбработкаЗавершена = Ложь;

		Если ОбъектовОбработано = 0 Тогда
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Процедуре Заполнения наименования причины расторжения (отложенно)
					|не удалось установить у документов ЭТД значение поля ""НаименованиеПричиныРасторжения"":  у %1 документов.'"), 
					ПроблемныхОбъектов);
			ВызватьИсключение ТекстСообщения;
		Иначе
			ТекстСообщения = СтрШаблон(
					НСтр("ru = 'Процедура Заполнения наименования причины расторжения (отложенно)
						|обработала очередную порцию документов ЭТД: %1 документов'"), 
						ОбъектовОбработано);
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
				УровеньЖурналаРегистрации.Информация,
				,
				,
				ТекстСообщения);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьПараметрыЭТД1041() Экспорт
	
	ОбновитьПараметрыЭТД();
	
КонецПроцедуры

Процедура ОбновитьПараметрыЭТД1051() Экспорт
	
	ОбновитьПараметрыЭТД();
	
КонецПроцедуры

Процедура ЗаполнитьКодРегионаРабочегоМестаОтложенно(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЭТД.Ссылка КАК Ссылка,
		|	ЭТД.КодРегиона КАК КодРегиона
		|ИЗ
		|	Документ.ЭТД КАК ЭТД
		|ГДЕ
		|	НЕ ЭТД.ЗагруженИзЕСУТД
		|	И ЭТД.КодРегионаРабочегоМеста = """"";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	ПроблемныхОбъектов = 0;
	ОбъектовОбработано = 0;
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НачатьТранзакцию();
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Документ.ЭТД");
		ЭлементБлокировки.УстановитьЗначение("Ссылка", ВыборкаДетальныеЗаписи.Ссылка);
		
		ДокументОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		
		Попытка
			Блокировка.Заблокировать();
			
			ДокументОбъект.КодРегионаРабочегоМеста = ВыборкаДетальныеЗаписи.КодРегиона;
			
			ДокументОбъект.ОбменДанными.Загрузка = Истина;
			
			ДокументОбъект.Записать();
			
			ОбъектовОбработано = ОбъектовОбработано + 1;
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию(); 
			
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			
			ТекстСообщения = НСтр(
			"ru = 'при записи документа ""Электронный трудовой договор"" произошла ошибка: 
			|%1'");
			
			ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ПодробноеПредставлениеОшибки);
			
			ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Не удалось обновить ""Документ  ""Электронный трудовой договор"""".'"), 
			УровеньЖурналаРегистрации.Ошибка, , , Комментарий);
		КонецПопытки
	КонецЦикла;
	
	Если ПроблемныхОбъектов = 0 Тогда
	
		Параметры.ОбработкаЗавершена = Истина;
	
	Иначе
		
		Параметры.ОбработкаЗавершена = Ложь;

		Если ОбъектовОбработано = 0 Тогда
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Процедуре Заполнения кода КАТО места работы (отложенно)
					|не удалось установить у документов ЭТД значение поля ""КодРегионаРабочегоМеста"":  у %1 документов.'"), 
					ПроблемныхОбъектов);
			ВызватьИсключение ТекстСообщения;
		Иначе
			ТекстСообщения = СтрШаблон(
					НСтр("ru = 'Процедура Заполнения кода КАТО места работы (отложенно)
						|обработала очередную порцию документов ЭТД: %1 документов'"), 
						ОбъектовОбработано);
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
				УровеньЖурналаРегистрации.Информация,
				,
				,
				ТекстСообщения);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

