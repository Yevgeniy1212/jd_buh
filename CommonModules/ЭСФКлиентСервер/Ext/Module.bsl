////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Возвращает номер версии библиотеки ЭСФ и ВС.
//
// Возвращаемое значение:
//  Строка - номер сборки.
//
Функция ВерсияБиблиотеки() Экспорт
	
	Возврат "2.0.6.56";
	
КонецФункции

Функция ВерсияКомпонентыНЦАВБазе() Экспорт
	Возврат "5.42";
КонецФункции

Функция КонтейнерМетодов() Экспорт
	
	Контейнер = Неопределено;
	ИспользоватьВнешнююОбработку = ЭСФВызовСервера.ИспользоватьВнешнююОбработку();
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		
		// Если база клиент-серверная, то это точно только клиент.
		// Если база файловая, то это может быть как клиент, так и сервер.
		
		// Если выполняется препроцессоре ТолстыйКлиентОбычноеПриложение,
		// то код ВнешниеОбработки.Подключить() вызовет ошибку,
		// поэтому внешняя обработка для данного режима подлкючается через файл.
		
		Если ИспользоватьВнешнююОбработку Тогда
			ВнешняяОбработка = ЭСФСерверПереопределяемый.СоздатьВнешнююОбработкуИзФайла();
			Контейнер = ВнешняяОбработка.ПолучитьФорму("КлиентОбычная");
		Иначе
			Контейнер = Обработки.ОбменЭСФ.ПолучитьФорму("КлиентОбычная");
		КонецЕсли;
		
	#ИначеЕсли ТонкийКлиент ИЛИ ВебКлиент ИЛИ ТолстыйКлиентУправляемоеПриложение Тогда
		
		// Это точно клиент на управляемые формы.
		
		Если ИспользоватьВнешнююОбработку Тогда
			ИмяВнешнейОбработки = ЭСФВызовСервера.ПодключитьВнешнююОбработку();
			Контейнер = ПолучитьФорму("ВнешняяОбработка." + ИмяВнешнейОбработки + ".Форма.КлиентУправляемая");
		Иначе
			Контейнер = ПолучитьФорму("Обработка.ОбменЭСФ.Форма.КлиентУправляемая");
		КонецЕсли;
		
	#ИначеЕсли Сервер ИЛИ ВнешнееСоединение Тогда
		
		// Это сервер и только сервер, без разницы управляемое приложение или обычное.
		
		Если ИспользоватьВнешнююОбработку Тогда
			ИмяВнешнейОбработки = ЭСФВызовСервера.ПодключитьВнешнююОбработку();
			Контейнер = ВнешниеОбработки.Создать(ИмяВнешнейОбработки);
		Иначе
			Контейнер = Обработки.ОбменЭСФ.Создать();
		КонецЕсли;
		
	#Иначе
		
		// Вызов переопределяемого модуля для остальных видов инструкций препроцессора.
		
		ЭСФКлиентСерверПереопределяемый.КонтейнерМетодов(Контейнер, ИспользоватьВнешнююОбработку);
		
	#КонецЕсли
	
	Возврат Контейнер;
	
КонецФункции

Функция ИмяПропуститьПроверкуЗапретаИзменения() Экспорт
	
	Возврат ЭСФКлиентСерверПереопределяемый.ИмяПропуститьПроверкуЗапретаИзменения();
	
КонецФункции

// Определяет доступность нового метода аутентификации API ИС ЭСФ
//
Функция ДоступенНовыйМетодАутентификации() Экспорт
	Возврат ЭСФКлиентСерверПереопределяемый.ДоступенНовыйМетодАутентификации();
КонецФункции

// Определяет доступность контроля времени переоткрытия сессии API ИС ЭСФ
//
Функция ДоступенКонтрольАктивностиСессии() Экспорт
	Возврат ЭСФКлиентСерверПереопределяемый.ДоступенКонтрольАктивностиСессии();
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКИИ

///////////////////////////////////////////////////////////////////////////////
// Преобразование значений для обмена с ИС ЭСФ

Функция ПользовательскийСтатусИСЭСФ(Знач ПользовательскийСтатусИБ) Экспорт
	
	Если ПользовательскийСтатусИБ = ПредопределенноеЗначение("Перечисление.ПользовательскиеСтатусыЭСФ.Принят") Тогда
		ПользовательскийСтатус = "ACCEPTED";
		
	ИначеЕсли ПользовательскийСтатусИБ = ПредопределенноеЗначение("Перечисление.ПользовательскиеСтатусыЭСФ.Отклонен") Тогда
		ПользовательскийСтатус = "DECLINED";
		
	Иначе
		ПользовательскийСтатус = "";
		
	КонецЕсли;
	
	Возврат ПользовательскийСтатус;
	
КонецФункции

Функция ПользовательскийСтатусИБ(Знач ПользовательскийСтатусИСЭСФ) Экспорт
	
	ВРегПользовательскийСтатусИСЭСФ = ВРег(ПользовательскийСтатусИСЭСФ);
	
	Если ВРегПользовательскийСтатусИСЭСФ = "ACCEPTED" Тогда
		ПользовательскийСтатус = ПредопределенноеЗначение("Перечисление.ПользовательскиеСтатусыЭСФ.Принят");
		
	ИначеЕсли ВРегПользовательскийСтатусИСЭСФ = "DECLINED" Тогда
		ПользовательскийСтатус = ПредопределенноеЗначение("Перечисление.ПользовательскиеСтатусыЭСФ.Отклонен");
		
	Иначе
		ПользовательскийСтатус = ПредопределенноеЗначение("Перечисление.ПользовательскиеСтатусыЭСФ.ПустаяСсылка");
		
	КонецЕсли;
	
	Возврат ПользовательскийСтатус;
	
КонецФункции

Функция СтатусИСЭСФ(Знач СтатусИБ) Экспорт
	
	Если СтатусИБ = ПредопределенноеЗначение("Перечисление.СтатусыЭСФ.Созданный") Тогда
		Статус = "CREATED";
		
	ИначеЕсли СтатусИБ = ПредопределенноеЗначение("Перечисление.СтатусыЭСФ.Доставленный") Тогда
		Статус = "DELIVERED";
		
	ИначеЕсли СтатусИБ = ПредопределенноеЗначение("Перечисление.СтатусыЭСФ.Аннулированный") Тогда
		Статус = "CANCELED";
		
	ИначеЕсли СтатусИБ = ПредопределенноеЗначение("Перечисление.СтатусыЭСФ.Отозванный") Тогда
		Статус = "REVOKED";
		
	ИначеЕсли СтатусИБ = ПредопределенноеЗначение("Перечисление.СтатусыЭСФ.Импортированный") Тогда
		Статус = "IMPORTED";
		
	ИначеЕсли СтатусИБ = ПредопределенноеЗначение("Перечисление.СтатусыЭСФ.Черновик") Тогда
		Статус = "DRAFT";
		
	ИначеЕсли СтатусИБ = ПредопределенноеЗначение("Перечисление.СтатусыЭСФ.Ошибочный") Тогда
		Статус = "FAILED";
		
	ИначеЕсли СтатусИБ = ПредопределенноеЗначение("Перечисление.СтатусыЭСФ.Удаленный") Тогда
		Статус = "DELETED";

	ИначеЕсли СтатусИБ = ПредопределенноеЗначение("Перечисление.СтатусыЭСФ.Отклоненный") Тогда
		Статус = "DECLINED";
		
	ИначеЕсли СтатусИБ = ПредопределенноеЗначение("Перечисление.СтатусыЭСФ.АннулированИСЭСФДляОтнесенияВЗачетИНаВычеты") Тогда
		Статус = "CANCELED_BY_OGD";
		
	ИначеЕсли СтатусИБ = ПредопределенноеЗначение("Перечисление.СтатусыЭСФ.АннулированПриОтклоненииСНТ") Тогда
		Статус = "CANCELED_BY_SNT_DECLINE";
		
	ИначеЕсли СтатусИБ = ПредопределенноеЗначение("Перечисление.СтатусыЭСФ.АннулированПриОтзывеСНТ") Тогда
		Статус = "CANCELED_BY_SNT_REVOKE";
		
	ИначеЕсли СтатусИБ = ПредопределенноеЗначение("Перечисление.СтатусыЭСФ.ЗаблокированИСЭСФ") Тогда
		Статус = "SEND_TO_ISGO";
		
	ИначеЕсли СтатусИБ = ПредопределенноеЗначение("Перечисление.СтатусыЭСФ.ВОбработке") Тогда
		Статус = "IN_PROCESSING";
		
	ИначеЕсли СтатусИБ = ПредопределенноеЗначение("Перечисление.СтатусыЭСФ.ВОчереди") Тогда
		Статус = "IN_QUEUE";
		
	ИначеЕсли СтатусИБ = ПредопределенноеЗначение("Перечисление.СтатусыЭСФ.ОжиданиеБиоидентификации") Тогда
		Статус = "WAIT_BIOMETRICS_VERIFICATION";
		
	ИначеЕсли СтатусИБ = ПредопределенноеЗначение("Перечисление.СтатусыЭСФ.БиоидентификацияНеПройденаВСрок") Тогда
		Статус = "FAILED_BIOMETRICS_VERIFICATION";
			
	Иначе
		Статус = "";	
		
	КонецЕсли;
	
	Возврат Статус;
	
КонецФункции

Функция СтатусИБ(Знач СтатусИСЭСФ) Экспорт
	
	ВРегСтатусИСЭСФ = ВРег(СтатусИСЭСФ);
	
	Если ВРегСтатусИСЭСФ = "CREATED" Тогда
		Статус = ПредопределенноеЗначение("Перечисление.СтатусыЭСФ.Созданный");
		
	ИначеЕсли ВРегСтатусИСЭСФ = "DELIVERED" Тогда
		Статус = ПредопределенноеЗначение("Перечисление.СтатусыЭСФ.Доставленный");
		
	ИначеЕсли ВРегСтатусИСЭСФ = "CANCELED" Тогда
		Статус = ПредопределенноеЗначение("Перечисление.СтатусыЭСФ.Аннулированный");
		
	ИначеЕсли ВРегСтатусИСЭСФ = "REVOKED" Тогда
		Статус = ПредопределенноеЗначение("Перечисление.СтатусыЭСФ.Отозванный");
		
	ИначеЕсли ВРегСтатусИСЭСФ = "IMPORTED" Тогда
		Статус = ПредопределенноеЗначение("Перечисление.СтатусыЭСФ.Импортированный");
		
	ИначеЕсли ВРегСтатусИСЭСФ = "DRAFT" Тогда
		Статус = ПредопределенноеЗначение("Перечисление.СтатусыЭСФ.Черновик");
		
	ИначеЕсли ВРегСтатусИСЭСФ = "FAILED" Тогда
		Статус = ПредопределенноеЗначение("Перечисление.СтатусыЭСФ.Ошибочный");
		
	ИначеЕсли ВРегСтатусИСЭСФ = "DELETED" Тогда
		Статус = ПредопределенноеЗначение("Перечисление.СтатусыЭСФ.Удаленный");
		
	ИначеЕсли ВРегСтатусИСЭСФ = "DECLINED" Тогда
		Статус = ПредопределенноеЗначение("Перечисление.СтатусыЭСФ.Отклоненный");
		
	ИначеЕсли ВРегСтатусИСЭСФ = "CANCELED_BY_OGD" Тогда
		Статус = ПредопределенноеЗначение("Перечисление.СтатусыЭСФ.АннулированИСЭСФДляОтнесенияВЗачетИНаВычеты");
		
	ИначеЕсли ВРегСтатусИСЭСФ = "CANCELED_BY_SNT_DECLINE" Тогда
		Статус = ПредопределенноеЗначение("Перечисление.СтатусыЭСФ.АннулированПриОтклоненииСНТ");
		
	ИначеЕсли ВРегСтатусИСЭСФ = "CANCELED_BY_SNT_REVOKE" Тогда
		Статус = ПредопределенноеЗначение("Перечисление.СтатусыЭСФ.АннулированПриОтзывеСНТ");
		
	// При выписке ЭСФ в другие государственные органы для получения мер государственной поддержки.
	ИначеЕсли ВРегСтатусИСЭСФ = "SEND_TO_ISGO" Тогда
		Статус = ПредопределенноеЗначение("Перечисление.СтатусыЭСФ.ЗаблокированИСЭСФ");
		
	ИначеЕсли ВРегСтатусИСЭСФ = "IN_PROCESSING" Тогда
		Статус = ПредопределенноеЗначение("Перечисление.СтатусыЭСФ.ВОбработке");
		
	ИначеЕсли ВРегСтатусИСЭСФ = "IN_QUEUE" Тогда
		Статус = ПредопределенноеЗначение("Перечисление.СтатусыЭСФ.ВОчереди");
		
	ИначеЕсли ВРегСтатусИСЭСФ = "WAIT_BIOMETRICS_VERIFICATION" Тогда
		Статус = ПредопределенноеЗначение("Перечисление.СтатусыЭСФ.ОжиданиеБиоидентификации");
		
	ИначеЕсли ВРегСтатусИСЭСФ = "FAILED_BIOMETRICS_VERIFICATION" Тогда
		Статус = ПредопределенноеЗначение("Перечисление.СтатусыЭСФ.БиоидентификацияНеПройденаВСрок");
				
	Иначе
		Статус = ПредопределенноеЗначение("Перечисление.СтатусыЭСФ.ПустаяСсылка");
		
	КонецЕсли;
	
	Возврат Статус;
	
КонецФункции

Функция НаправлениеИСЭСФ(Знач НаправлениеИБ) Экспорт
	
	Если НаправлениеИБ = ПредопределенноеЗначение("Перечисление.НаправленияЭСФ.Входящий") Тогда
		Направление =  "INBOUND";
		
	ИначеЕсли НаправлениеИБ = ПредопределенноеЗначение("Перечисление.НаправленияЭСФ.Исходящий") Тогда
		Направление = "OUTBOUND";
		
	Иначе
		Направление = "";
		
	КонецЕсли;
	
	Возврат Направление;
	
КонецФункции

Функция НаправлениеИБ(Знач НаправлениеИСЭСФ) Экспорт
	
	ВРегНаправлениеИСЭСФ = ВРег(НаправлениеИСЭСФ);
	
	Если ВРегНаправлениеИСЭСФ = "INBOUND" Тогда
		Направление = ПредопределенноеЗначение("Перечисление.НаправленияЭСФ.Входящий");
		
	ИначеЕсли ВРегНаправлениеИСЭСФ = "OUTBOUND" Тогда
		Направление = ПредопределенноеЗначение("Перечисление.НаправленияЭСФ.Исходящий");
		
	Иначе
		Направление = ПредопределенноеЗначение("Перечисление.НаправленияЭСФ.ПустаяСсылка");
		
	КонецЕсли;
	
	Возврат Направление;
	
КонецФункции

Функция ВидИСЭСФ(Знач ВидИБ) Экспорт
	
	Если ВидИБ = ПредопределенноеЗначение("Перечисление.ВидыЭСФ.Обычный") Тогда
		Вид = "ORDINARY_INVOICE";
		
	ИначеЕсли ВидИБ = ПредопределенноеЗначение("Перечисление.ВидыЭСФ.Исправленный") Тогда
		Вид = "FIXED_INVOICE";
		
	ИначеЕсли ВидИБ = ПредопределенноеЗначение("Перечисление.ВидыЭСФ.Дополнительный") Тогда
		Вид = "ADDITIONAL_INVOICE";
		
	Иначе
		Вид = "";
		
	КонецЕсли;
	
	Возврат Вид;
	
КонецФункции

Функция ВидИБ(Знач ВидИСЭСФ) Экспорт
	
	ВРегВидИСЭСФ = ВРег(ВидИСЭСФ);
	
	Если ВРегВидИСЭСФ = "ORDINARY_INVOICE" Тогда
		Вид = ПредопределенноеЗначение("Перечисление.ВидыЭСФ.Обычный");
		
	ИначеЕсли ВРегВидИСЭСФ = "FIXED_INVOICE" Тогда
		Вид = ПредопределенноеЗначение("Перечисление.ВидыЭСФ.Исправленный");
		
	ИначеЕсли ВРегВидИСЭСФ = "ADDITIONAL_INVOICE" Тогда
		Вид = ПредопределенноеЗначение("Перечисление.ВидыЭСФ.Дополнительный");
		
	Иначе
		Вид = ПредопределенноеЗначение("Перечисление.ВидыЭСФ.ПустаяСсылка");
		
	КонецЕсли;
	
	Возврат Вид;
	
КонецФункции

Функция ТипПодписиИСЭСФ(Знач ТипПодписиИБ) Экспорт
	
	Если ТипПодписиИБ = ПредопределенноеЗначение("Перечисление.ТипыПодписиЭСФ.ЮридическоеЛицо") Тогда
		ТипПодписи = "COMPANY";
		
	ИначеЕсли ТипПодписиИБ = ПредопределенноеЗначение("Перечисление.ТипыПодписиЭСФ.УполномоченноеЛицо") Тогда
		ТипПодписи = "OPERATOR";
		
	Иначе	
		ТипПодписи = "";
		
	КонецЕсли;
	
	Возврат ТипПодписи;
	
КонецФункции

Функция ТипПодписиИБ(Знач ТипПодписиИСЭСФ) Экспорт
	
	ВРегТипПодписиИСЭСФ = ВРег(ТипПодписиИСЭСФ);
	
	Если ВРегТипПодписиИСЭСФ = "COMPANY" Тогда
		ТипПодписи = ПредопределенноеЗначение("Перечисление.ТипыПодписиЭСФ.ЮридическоеЛицо");
		
	ИначеЕсли ВРегТипПодписиИСЭСФ = "OPERATOR" Тогда
		ТипПодписи = ПредопределенноеЗначение("Перечисление.ТипыПодписиЭСФ.УполномоченноеЛицо");
		
	Иначе	
		ТипПодписи = ПредопределенноеЗначение("Перечисление.ТипыПодписиЭСФ.ПустаяСсылка");
		
	КонецЕсли;
	
	Возврат ТипПодписи;
	
КонецФункции

Функция СпособыПроисхожденияТоваровИСЭСФ(Знач СпособыПроисхожденияТоваровИБ) Экспорт
	
	Если СпособыПроисхожденияТоваровИБ = ПредопределенноеЗначение("Перечисление.СпособыПроисхожденияТоваров.ВТО") Тогда		
		СпособыПроисхожденияТоваровИСЭСФ = "ВТО";
		
	ИначеЕсли СпособыПроисхожденияТоваровИБ = ПредопределенноеЗначение("Перечисление.СпособыПроисхожденияТоваров.ЕТТЕАЭС") Тогда		
		СпособыПроисхожденияТоваровИСЭСФ = "ЕТТ";
		
	ИначеЕсли СпособыПроисхожденияТоваровИБ = ПредопределенноеЗначение("Перечисление.СпособыПроисхожденияТоваров.СТ1") Тогда
		СпособыПроисхожденияТоваровИСЭСФ = "СТ-1";
		
	ИначеЕсли СпособыПроисхожденияТоваровИБ = ПредопределенноеЗначение("Перечисление.СпособыПроисхожденияТоваров.ТС") Тогда
		СпособыПроисхожденияТоваровИСЭСФ = "ТС";
		
	Иначе		
		СпособыПроисхожденияТоваровИСЭСФ = "";
		
	КонецЕсли;
	
	Возврат СпособыПроисхожденияТоваровИСЭСФ;
	
КонецФункции

Функция СпособыПроисхожденияТоваровИБ(Знач СпособыПроисхожденияТоваровИСЭСФ) Экспорт
	
	СпособыПроисхожденияТоваровИСЭСФ = ВРег(СпособыПроисхожденияТоваровИСЭСФ);
	
	Если СпособыПроисхожденияТоваровИСЭСФ = "ВТО" Тогда		
		СпособыПроисхожденияТоваровИБ = ПредопределенноеЗначение("Перечисление.СпособыПроисхожденияТоваров.ВТО");
		
	ИначеЕсли СпособыПроисхожденияТоваровИСЭСФ = "ЕТТ" Тогда		
		СпособыПроисхожденияТоваровИБ = ПредопределенноеЗначение("Перечисление.СпособыПроисхожденияТоваров.ЕТТЕАЭС");
		
	ИначеЕсли СпособыПроисхожденияТоваровИСЭСФ = "СТ-1" Тогда
		СпособыПроисхожденияТоваровИБ = ПредопределенноеЗначение("Перечисление.СпособыПроисхожденияТоваров.СТ1");
		
	ИначеЕсли СпособыПроисхожденияТоваровИСЭСФ = "ТС" Тогда
		СпособыПроисхожденияТоваровИБ = ПредопределенноеЗначение("Перечисление.СпособыПроисхожденияТоваров.ТС");
		
	Иначе		
		СпособыПроисхожденияТоваровИБ = ПредопределенноеЗначение("Перечисление.СпособыПроисхожденияТоваров.ПустаяСсылка");
		
	КонецЕсли;
	
	Возврат СпособыПроисхожденияТоваровИБ;
	
КонецФункции

Функция ПричинаВыпискиНаБумагеИБ(Знач ПричинаВыпискиИСЭСФ) Экспорт
	
	ПричинаВыпискиИСЭСФ = ВРег(ПричинаВыпискиИСЭСФ);
	
	Если ПричинаВыпискиИСЭСФ = "UNLAWFUL_REMOVAL_REGISTRATION" Тогда		
		ПричинаВыпискиИБ = ПредопределенноеЗначение("Перечисление.ПричиныВыпискиСФНаБумаге.БлокированиеДоступа");
		
	ИначеЕсли ПричинаВыпискиИСЭСФ = "DOWN_TIME" Тогда		
		ПричинаВыпискиИБ = ПредопределенноеЗначение("Перечисление.ПричиныВыпискиСФНаБумаге.ПростойСистемы");
		
	ИначеЕсли ПричинаВыпискиИСЭСФ = "MISSING_REQUIREMENT" Тогда		
		ПричинаВыпискиИБ = ПредопределенноеЗначение("Перечисление.ПричиныВыпискиСФНаБумаге.ОтсутствиеТребованиеПоВыписке");
			
	Иначе		
		ПричинаВыпискиИБ = ПредопределенноеЗначение("Перечисление.ПричиныВыпискиСФНаБумаге.ПустаяСсылка");
		
	КонецЕсли;
	
	Возврат ПричинаВыпискиИБ;
	
КонецФункции

Функция МестоРеализацииНеРКИБ(Знач ТипНДСИСЭСФ) Экспорт
	
	ТипНДСИСЭСФ = ВРег(ТипНДСИСЭСФ);
	
	Если ТипНДСИСЭСФ = "WITHOUT_NDS_NOT_KZ" Тогда		
		МестоРеализацииНеРК = Истина;
		
	Иначе		
		МестоРеализацииНеРК = Ложь;
		
	КонецЕсли;
	
	Возврат МестоРеализацииНеРК;	
	
КонецФункции

Функция МестоРеализацииНеРКИСЭСФ(Знач ТипНДСИСЭСФ) Экспорт
		
	Если ТипНДСИСЭСФ Тогда		
		МестоРеализацииНеРК = "WITHOUT_NDS_NOT_KZ";
		
	Иначе		
		МестоРеализацииНеРК = "";
		
	КонецЕсли;
	
	Возврат МестоРеализацииНеРК;	
	
КонецФункции

Функция ТипПрофиляИСЭСФ(ТипПрофиля) Экспорт
	
	Если ТипПрофиля = ПредопределенноеЗначение("Перечисление.ТипыПрофилейИСЭСФ.Адвокат") Тогда		
		
		ТипПрофиляИСЭСФ = "LAWYER";
		
	ИначеЕсли ТипПрофиля = ПредопределенноеЗначение("Перечисление.ТипыПрофилейИСЭСФ.ИндивидуальныйПредприниматель") Тогда		
		
		ТипПрофиляИСЭСФ = "ENTREPRENEUR"; 		
		
	ИначеЕсли ТипПрофиля = ПредопределенноеЗначение("Перечисление.ТипыПрофилейИСЭСФ.Медиатор") Тогда		
		
		ТипПрофиляИСЭСФ = "MEDIATOR";
		
	ИначеЕсли ТипПрофиля = ПредопределенноеЗначение("Перечисление.ТипыПрофилейИСЭСФ.Нотариус") Тогда		
		
		ТипПрофиляИСЭСФ = "NOTARY";
		
	ИначеЕсли ТипПрофиля = ПредопределенноеЗначение("Перечисление.ТипыПрофилейИСЭСФ.РуководительЮЛ") Тогда		
		
		ТипПрофиляИСЭСФ = "ADMIN_ENTERPRISE";
		
	ИначеЕсли ТипПрофиля = ПредопределенноеЗначение("Перечисление.ТипыПрофилейИСЭСФ.РуководительЮЛПроект") Тогда		
		
		ТипПрофиляИСЭСФ = "PROJECT_ADMIN";
		
	ИначеЕсли ТипПрофиля = ПредопределенноеЗначение("Перечисление.ТипыПрофилейИСЭСФ.СотрудникИП") Тогда		
		
		ТипПрофиляИСЭСФ = "ENTREPRENEUR_USER";
		
	ИначеЕсли ТипПрофиля = ПредопределенноеЗначение("Перечисление.ТипыПрофилейИСЭСФ.СотрудникАдвоката") Тогда		
		
		ТипПрофиляИСЭСФ = "LAWYER_USER";
		
	ИначеЕсли ТипПрофиля = ПредопределенноеЗначение("Перечисление.ТипыПрофилейИСЭСФ.СотрудникНотариуса") Тогда		
		
		ТипПрофиляИСЭСФ = "NOTARY_USER";
		
	ИначеЕсли ТипПрофиля = ПредопределенноеЗначение("Перечисление.ТипыПрофилейИСЭСФ.СотрудникПроекта") Тогда		
		
		ТипПрофиляИСЭСФ = "PROJECT_USER";
		
	ИначеЕсли ТипПрофиля = ПредопределенноеЗначение("Перечисление.ТипыПрофилейИСЭСФ.СотрудникСудебногоИсполнителя") Тогда		
		
		ТипПрофиляИСЭСФ = "BAILIFF_USER";
		
	ИначеЕсли ТипПрофиля = ПредопределенноеЗначение("Перечисление.ТипыПрофилейИСЭСФ.СотрудникМедиатора") Тогда		
		
		ТипПрофиляИСЭСФ = "MEDIATOR_USER";
	
	ИначеЕсли ТипПрофиля = ПредопределенноеЗначение("Перечисление.ТипыПрофилейИСЭСФ.СотрудникЮЛ") Тогда		
		
		ТипПрофиляИСЭСФ = "USER";
		
	ИначеЕсли ТипПрофиля = ПредопределенноеЗначение("Перечисление.ТипыПрофилейИСЭСФ.СудебныйИсполнитель") Тогда		
		
		ТипПрофиляИСЭСФ = "BAILIFF";
		
	ИначеЕсли ТипПрофиля = ПредопределенноеЗначение("Перечисление.ТипыПрофилейИСЭСФ.ФизическоеЛицо") Тогда		
		
		ТипПрофиляИСЭСФ = "INDIVIDUAL";	
		
	КонецЕсли;
	
	Возврат ТипПрофиляИСЭСФ;	
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// Возврат строковых констант

Функция АдресВебПриложенияИСЭСФ() Экспорт
	Возврат "https://esf.gov.kz:8443/esf-web/";
КонецФункции

Функция ИмяСервисаInvoiceService() Экспорт
	Возврат "invoiceService";	
КонецФункции

Функция ИмяСервисаClientSession() Экспорт
	Возврат "clientSession";	
КонецФункции

Функция ИмяСервисаUploadInvoiceService() Экспорт
	Возврат "uploadInvoiceService";	
КонецФункции

Функция ИмяСервисаVersionService() Экспорт
	Возврат "versionService";	
КонецФункции

Функция ИмяСобытияЗаписьЭСФ() Экспорт 
	Возврат "Запись_ЭСФ";	
КонецФункции

Функция ИмяСобытияЗаписьУведомленийИСЭСФ() Экспорт 
	Возврат "Запись_ОповещенийИСЭСФ";	
КонецФункции

Функция ИмяСобытияСинхронизацияУведомленийИСЭСФ() Экспорт 
	Возврат "Синхронизация_ОповещенийИСЭСФ";	
КонецФункции

Функция ИмяСобытияЗаписьСчетаФактуры() Экспорт 
	Возврат "Запись_СчетФактура";	
КонецФункции

Функция ИмяСобытияЗаписьСторно() Экспорт 	
	Возврат "Запись_Сторно";
КонецФункции

Функция ИмяПараметраСинхронизацияСИСЭСФПриЗапуске() Экспорт 
	Возврат "СинхронизацияСИСЭСФПриЗапуске";
КонецФункции

Функция СделатьАктуальным() Экспорт
	Возврат "СделатьАктуальным";	
КонецФункции

Функция ДействиеОтправка() Экспорт
	Возврат "Отправка";
КонецФункции

Функция ДействиеВыгрузка() Экспорт
	Возврат "Выгрузка";
КонецФункции

Функция ДействиеОтзыв() Экспорт
	Возврат "Отзыв";	
КонецФункции

Функция ДействиеОтклонение() Экспорт	
	Возврат "Отклонение";	
КонецФункции

Функция ДействиеОтклонениеДополнительногоИлиИсправленного() Экспорт	
	Возврат "ОтклонениеДополнительногоИлиИсправленного";	
КонецФункции

Функция ДействиеОтклонениеОтзыва() Экспорт	
	Возврат "ОтклонениеОтзыва";	
КонецФункции

Функция ИмяВнешнейОбработкиОбменЭСФ() Экспорт
	
	Возврат "ОбменЭСФ";
	
КонецФункции

Функция ТипПроверкиРеквизит() Экспорт
	Возврат "Реквизит";
КонецФункции

Функция ТипПроверкиТабличнаяЧасть() Экспорт
	Возврат "ТабличнаяЧасть";
КонецФункции

Функция ТипПроверкиРеквизитТабличнойЧасти() Экспорт
	Возврат "РеквизитТабличнойЧасти";
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// Варианты настроек прокси-сервера для обмена с ИС ЭСФ

Функция ПроксиНеИспользовать() Экспорт
	Возврат "НеИспользовать";	
КонецФункции

Функция ПроксиСистемныеНастройки() Экспорт
	Возврат "СистемныеНастройки";
КонецФункции

Функция ПроксиДругиеНастройки() Экспорт
	Возврат "ДругиеНастройки";
КонецФункции

Функция НовыйПроксиСерверИСЭСФ() Экспорт
	
	НастройкиПрокси = ЭСФВызовСервераПовтИсп.ПолучитьПараметрыПодключенияКСерверуИСЭСФ();
	
	Если НастройкиПрокси.ПроксиСервер_ВариантИспользования = ЭСФКлиентСервер.ПроксиНеИспользовать() Тогда
		
		ИнтернетПрокси = Новый ИнтернетПрокси(Ложь);	
		
	ИначеЕсли НастройкиПрокси.ПроксиСервер_ВариантИспользования = ЭСФКлиентСервер.ПроксиСистемныеНастройки() Тогда
		
		ИнтернетПрокси = Новый ИнтернетПрокси(Истина);	
		
	ИначеЕсли НастройкиПрокси.ПроксиСервер_ВариантИспользования = ЭСФКлиентСервер.ПроксиДругиеНастройки() Тогда
		
		ИнтернетПрокси = Новый ИнтернетПрокси(Ложь);
		ИнтернетПрокси.Установить("http", НастройкиПрокси.ПроксиСервер_Сервер, НастройкиПрокси.ПроксиСервер_Порт);
		ИнтернетПрокси.Установить("https", НастройкиПрокси.ПроксиСервер_Сервер, НастройкиПрокси.ПроксиСервер_Порт);
		ИнтернетПрокси.Пользователь = НастройкиПрокси.ПроксиСервер_Пользователь;
		ИнтернетПрокси.Пароль = НастройкиПрокси.ПроксиСервер_Пароль;
		
	Иначе
		
		ИнтернетПрокси = Неопределено;
	
	КонецЕсли;
	
	Возврат ИнтернетПрокси;
	
КонецФункции

Функция ЦветЗеленый() Экспорт 
	Возврат WebЦвета.ТемноЗеленый;	
КонецФункции

Функция ЦветКрасный() Экспорт
	Возврат WebЦвета.Кирпичный;	
КонецФункции

Функция ЦветСиний() Экспорт
	Синий = Новый Цвет(25, 85, 174);
	Возврат Синий;	
КонецФункции

Функция ЦветЧерный() Экспорт
	Возврат WebЦвета.Черный;	
КонецФункции

Функция ЦветСостоянияЭСФ(Знач СостояниеЭСФ) Экспорт
	
	Если СостояниеЭСФ = ПредопределенноеЗначение("Перечисление.СостоянияЭСФ.Сформирован")
		ИЛИ СостояниеЭСФ = ПредопределенноеЗначение("Перечисление.СостоянияЭСФ.ОбрабатываетсяСервером") Тогда
		
		Цвет = ЭСФКлиентСервер.ЦветСиний();
		
	ИначеЕсли СостояниеЭСФ = ПредопределенноеЗначение("Перечисление.СостоянияЭСФ.ПринятСервером")
		ИЛИ СостояниеЭСФ = ПредопределенноеЗначение("Перечисление.СостоянияЭСФ.ДоставленПолучателю")
		ИЛИ СостояниеЭСФ = ПредопределенноеЗначение("Перечисление.СостоянияЭСФ.ПринятОтПоставщика")
		ИЛИ СостояниеЭСФ = ПредопределенноеЗначение("Перечисление.СостоянияЭСФ.ЗаблокированИСЭСФ") Тогда
		
		Цвет = ЭСФКлиентСервер.ЦветЗеленый();
		
	ИначеЕсли СостояниеЭСФ = ПредопределенноеЗначение("Перечисление.СостоянияЭСФ.ОтклоненСервером")
		ИЛИ СостояниеЭСФ = ПредопределенноеЗначение("Перечисление.СостоянияЭСФ.Отозван")
		ИЛИ СостояниеЭСФ = ПредопределенноеЗначение("Перечисление.СостоянияЭСФ.Аннулирован")
		ИЛИ СостояниеЭСФ = ПредопределенноеЗначение("Перечисление.СостоянияЭСФ.АннулированИСЭСФДляОтнесенияВЗачетИНаВычеты")
		ИЛИ СостояниеЭСФ = ПредопределенноеЗначение("Перечисление.СостоянияЭСФ.АннулированПриОтзывеСНТ")
		ИЛИ СостояниеЭСФ = ПредопределенноеЗначение("Перечисление.СостоянияЭСФ.АннулированПриОтклоненииСНТ")
		ИЛИ СостояниеЭСФ = ПредопределенноеЗначение("Перечисление.СостоянияЭСФ.ОтклоненПолучателем")
		ИЛИ СостояниеЭСФ = ПредопределенноеЗначение("Перечисление.СостоянияЭСФ.БиоидентификацияНеПройденаВСрок") Тогда
		
		Цвет = ЭСФКлиентСервер.ЦветКрасный();
		
	Иначе
		
		Цвет = ЭСФКлиентСервер.ЦветСиний();
		
	КонецЕсли;
	
	Возврат Цвет;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// Тексты сообщений

Функция ТекстСообщенияНеУстановленОбменЧерезAPI() Экспорт 
	
	Возврат НСтр("ru = 'Не установлена константа ""Использовать прямой обмен с ИС ЭСФ"".'");
	
КонецФункции

Функция ТекстСообщенияНеУстановленОбменЧерезXML() Экспорт
	
	Возврат НСтр("ru = 'Не установлена константа ""Использовать обмен с ИС ЭСФ через выгрузку/загрузку XML файлов"".'");
	
КонецФункции

Функция ТекстСообщенияНеУстановленыОбеКонстанты() Экспорт
	
	Возврат НСтр("ru = 'Не установлена ни одна из констант ""Использовать прямой обмен с ИС ЭСФ"", ""Использовать обмен с ИС ЭСФ через выгрузку/загрузку XML файлов"".'");
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// Работа с реквизитом формы РеквизитыЭСФ

Функция РеквизитыЭСФ(Форма) Экспорт
	
	РеквизитыЭСФ = Неопределено;
	
	Если Форма.РеквизитыЭСФ = Неопределено Тогда
		Форма.РеквизитыЭСФ = НовыеРеквизитыЭСФ();
	КонецЕсли;
	
	Возврат Форма.РеквизитыЭСФ;
	
КонецФункции

Функция НовыеРеквизитыЭСФ() Экспорт
	
	РеквизитыЭСФ = Новый Структура;
	
	РеквизитыЭСФ.Вставить("МассивСторнирований", Новый Массив);
	РеквизитыЭСФ.Вставить("СсылкаЭСФ", ПредопределенноеЗначение("Документ.ЭСФ.ПустаяСсылка"));
	РеквизитыЭСФ.Вставить("ЗаписатьЭСФ", Ложь);
	                                
	Возврат РеквизитыЭСФ;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// Криптография

// Возвращает коллекцию ЭЦП, сформированную на основе КоллекцияSignedContent с помощью ДанныеКлючаЭЦП.
//
// Параметры:
//  КоллекцияSignedContent - Соответствие - Коллекция строк для формирования ЭЦП.
//  ДанныеКлючаЭЦП - Структура - См. Обработки.ОбменЭСФ.ВводДанныхКлючаЭЦП.
//
// Возвращаемое значение:
//  Соответствие - Коллекция сформированных ЭЦП.
//   |- Ключ - Произвольный - Ключ из КоллекцияSignedContent.
//   |- Значение - Строка - ЭЦП.
//
Функция НоваяКоллекцияПодписейЭСФ(Знач КоллекцияSignedContent, Знач ДанныеКлючаЭЦП, ДанныеПрофиляИСЭСФ = Неопределено) Экспорт
	
	КоллекцияПодписейЭСФ = Новый Соответствие;
	
	Если ЭСФВызовСервера.ИспользоватьПодписьНовойКомпоненты() И ЭСФВызовСервера.ИспользоватьВнешнююКриптографиюДляКомпоненты() Тогда
		
		Если ДанныеПрофиляИСЭСФ = Неопределено Тогда
			ТекстИсключения = НСтр(
			"ru = 'Не удалось получить параметры профиля ИСЭСФ для подписи документов.'");
			ЭСФКлиентСервер.СообщитьПользователю(ТекстИсключения);
			Возврат КоллекцияПодписейЭСФ;
		КонецЕсли;
		
		МассивДокументовДляПодписи = Новый Массив;
		
		Для Каждого Элемент Из КоллекцияSignedContent Цикл
			Если ТипЗнч(КоллекцияSignedContent) = Тип("Соответствие") Тогда
				Base64ДокументДляПодписи = Base64Строка(ПолучитьДвоичныеДанныеИзСтроки(Элемент.Значение, КодировкаТекста.UTF8, Ложь));
			ИначеЕсли ТипЗнч(КоллекцияSignedContent) = Тип("Массив") Тогда // массив возвращается при изменении статуса докумета
				Если ТипЗнч(Элемент) = Тип("Структура") Тогда
					СтрокаДляПодписи = Элемент.СтрокаДляПодписи;
				Иначе
					СтрокаДляПодписи = Элемент;
				КонецЕсли;
				Base64ДокументДляПодписи = Base64Строка(ПолучитьДвоичныеДанныеИзСтроки(СтрокаДляПодписи, КодировкаТекста.UTF8, Ложь));
			КонецЕсли;
			Base64ДокументДляПодписи = СтрЗаменить(Base64ДокументДляПодписи,Символы.ПС,"");
			Base64ДокументДляПодписи = СтрЗаменить(Base64ДокументДляПодписи,Символы.ВК,"");
			
			МассивДокументовДляПодписи.Добавить(Base64ДокументДляПодписи);
			
		КонецЦикла;
		
		ИмяСервиса = "1CService";
		БИН = ДанныеПрофиляИСЭСФ.СтруктурнаяЕдиница.ИдентификационныйНомер;
		ИмяАутентификации = ДанныеПрофиляИСЭСФ.ПользовательИСЭСФ.ИмяАутентификации;
		ПредставлениеОрганизации = ДанныеПрофиляИСЭСФ.СтруктурнаяЕдиница.Представление;
		
		ПараметрыКлюча = ЭСФКлиентСервер.ПодготовитьПараметрыКлючаДляПодписи(ДанныеКлючаЭЦП);
		
		ПараметрыПодписи = ЭлектронноеВзаимодействиеССервисамиВызовСервера.ПолучитьПараметрыКомпонентыЭСФ(БИН, Истина, ИмяАутентификации, ,ДанныеПрофиляИСЭСФ.СтруктурнаяЕдиница.Ссылка, ПараметрыКлюча);
		
		Если Не ЗначениеЗаполнено(ПараметрыПодписи) Тогда
			ТекстИсключения = НСтр(
			"ru = 'Не удалось получить параметры для подписи документов.'");
			ЭСФКлиентСервер.СообщитьПользователю(ТекстИсключения);
			УдалитьВременныйФайлКлюча(ПараметрыКлюча);
			Возврат КоллекцияПодписейЭСФ;
		КонецЕсли;
		
		СлужебнаяМеткаКомпоненты = "";
		Если КоллекцияSignedContent.Количество() > 1 Тогда
			ДанныеДляПодписиJSON = ЭСФВызовСервера.ЭСФ_ЗаписатьЗначениеJSON(МассивДокументовДляПодписи);
			ПодписьВФорматеJSON = СоздатьЭЦПСыраяМассив(ДанныеДляПодписиJSON, БИН, ИмяСервиса, ПараметрыПодписи, ПредставлениеОрганизации, СлужебнаяМеткаКомпоненты);
		ИначеЕсли КоллекцияSignedContent.Количество() = 1 Тогда
			ДанныеДляПодписиJSON = ЭСФВызовСервера.ЭСФ_ЗаписатьЗначениеJSON(МассивДокументовДляПодписи[0]);
			ПодписьВФорматеJSON = СоздатьЭЦПСырая(ДанныеДляПодписиJSON, БИН, ИмяСервиса, ПараметрыПодписи, ПредставлениеОрганизации, СлужебнаяМеткаКомпоненты);
		Иначе
			// Ошибка - массив документов пустой
		КонецЕсли;
		
		Попытка
			ЭлектронноеВзаимодействиеССервисамиВызовСервера.ОбработкаВызоваКомпоненты(ДанныеПрофиляИСЭСФ.СтруктурнаяЕдиница.Ссылка, СлужебнаяМеткаКомпоненты);
		Исключение
			ЭСФВызовСервера.СоздатьЗаписьЖурналаРегистрации(
				НСтр("ru = 'Ошибка обработки данных вызова компоненты'"), "Ошибка", , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
		УдалитьВременныйФайлКлюча(ПараметрыКлюча);
		
		Если ПодписьВФорматеJSON.Свойство("Code") и ПодписьВФорматеJSON.code = "200" Тогда
			
			Если КоллекцияSignedContent.Количество() > 1 Тогда 
				НомерЭлемента = 0;
				МассивПодписей = ЭСФВызовСервера.ЭСФ_ПрочитатьЗначениеJSON(ПодписьВФорматеJSON.responseObject.signResult);
				Для Каждого Элемент Из КоллекцияSignedContent Цикл
					
					Если МассивПодписей[НомерЭлемента] = "" Тогда
						ТекстСообщения = НСтр("ru = 'Криптопровайдер вернул пустое значение подписи.'");
						ЭСФКлиентСервер.СообщитьПользователю(ТекстСообщения);
						Возврат Новый Соответствие;
					КонецЕсли;
					
					Если ТипЗнч(КоллекцияSignedContent) = Тип("Соответствие") Тогда
						КоллекцияПодписейЭСФ.Вставить(Элемент.Ключ, МассивПодписей[НомерЭлемента]);
					ИначеЕсли ТипЗнч(КоллекцияSignedContent) = Тип("Массив") Тогда
						Если ТипЗнч(Элемент) = Тип("Структура") Тогда
							Ключ = Элемент.ИД;
						Иначе
							Ключ = Элемент
						КонецЕсли;
						КоллекцияПодписейЭСФ.Вставить(Ключ, МассивПодписей[НомерЭлемента]);
					КонецЕсли;
					СертификатПодписавшего = ПодписьВФорматеJSON.responseObject.signerCert;
					ЗначениеТэгов = РазобратьПоУзламKeyInfo(СертификатПодписавшего);
					Если ЗначениеТэгов.Свойство("pem") Тогда
						ДанныеПрофиляИСЭСФ.Вставить("ОткрытыйСертификатBase64", ЗначениеТэгов.pem);
					КонецЕсли;
					Если ЗначениеТэгов.Свойство("algorithm") Тогда
						ДанныеПрофиляИСЭСФ.Вставить("ТипКлюча", Сертификат_ТипКлючаИзСвойствНовый(ЗначениеТэгов.algorithm));
					КонецЕсли;
					НомерЭлемента = НомерЭлемента + 1;
				КонецЦикла;
			ИначеЕсли КоллекцияSignedContent.Количество() = 1 Тогда
				
				Если ПодписьВФорматеJSON.responseObject.signResult = "" Тогда
					ТекстСообщения = НСтр("ru = 'Криптопровайдер вернул пустое значение подписи.'");
					ЭСФКлиентСервер.СообщитьПользователю(ТекстСообщения);
					Возврат Новый Соответствие;
				КонецЕсли;
				
				Для Каждого Элемент Из КоллекцияSignedContent Цикл
					Если ТипЗнч(КоллекцияSignedContent) = Тип("Соответствие") Тогда
						КоллекцияПодписейЭСФ.Вставить(Элемент.Ключ, ПодписьВФорматеJSON.responseObject.signResult);
					ИначеЕсли ТипЗнч(КоллекцияSignedContent) = Тип("Массив") Тогда
						Если ТипЗнч(Элемент) = Тип("Структура") Тогда
							Ключ = Элемент.ИД;
						Иначе
							Ключ = Элемент
						КонецЕсли;
						КоллекцияПодписейЭСФ.Вставить(Ключ, ПодписьВФорматеJSON.responseObject.signResult);
					КонецЕсли;
					СертификатПодписавшего = ПодписьВФорматеJSON.responseObject.signerCert;
					ЗначениеТэгов = РазобратьПоУзламKeyInfo(СертификатПодписавшего);
					Если ЗначениеТэгов.Свойство("pem") Тогда
						ДанныеПрофиляИСЭСФ.Вставить("ОткрытыйСертификатBase64", ЗначениеТэгов.pem);
					КонецЕсли;
					Если ЗначениеТэгов.Свойство("algorithm") Тогда
						ДанныеПрофиляИСЭСФ.Вставить("ТипКлюча", Сертификат_ТипКлючаИзСвойствНовый(ЗначениеТэгов.algorithm));
					КонецЕсли;
				КонецЦикла;
			Иначе
				//Ошибка - массив документов пустой
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		Контейнер = ЭСФКлиентСервер.КонтейнерМетодов();
		
		Криптопровайдер = КриптографияКлиентСервер.НовыйКриптопровайдер();
		Криптопровайдер.ИнициализироватьХранилищеКлюча(ДанныеКлючаЭЦП.КлючBase64, ДанныеКлючаЭЦП.Пароль, Контейнер.ИнициализироватьХранилищеКлюча_ТипДанных_СтрокаBase64());	
		
		КоллекцияПодписейЭСФ = Новый Соответствие;
		Для Каждого Элемент Из КоллекцияSignedContent Цикл
			Подпись = Контейнер.СоздатьЭЦПДляПакета(Криптопровайдер, Элемент.Значение);
			КоллекцияПодписейЭСФ.Вставить(Элемент.Ключ, Подпись);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат КоллекцияПодписейЭСФ;
	
КонецФункции

// Определяет тип подписи - Подпись ЮЛ или Подпись ФЛ.
//
// Параметры:
//  ДанныеКлючаЭЦП - См. Обработка.ОбменЭСФ.ВводДанныхКлючаЭЦП.
//  ДанныеПрофиляИСЭСФ - См. ЭСФСервер.ДанныеПрофиляИСЭСФ().
//
// Возвращаемое значение:
//  ПеречислениеСсылка.ТипыПодписиЭСФ - Тип подписи, определенный по данным ключа ЭЦП.
//   Если не удалось определить тип подписи, то возвращает пустую ссылку.
//
Функция ТипПодписиЭСФ(Знач ДанныеКлючаЭЦП, Знач ДанныеПрофиляИСЭСФ) Экспорт
	
	Контейнер = ЭСФКлиентСервер.КонтейнерМетодов();
	
	Если ЭСФВызовСервера.ИспользоватьПодписьНовойКомпоненты() Тогда
		Если ДанныеПрофиляИСЭСФ.Свойство("ТипКлюча") Тогда
			ТипКлюча = ДанныеПрофиляИСЭСФ.ТипКлюча;
		Иначе	
			ТипКлюча = Контейнер.ТипКлюча(ДанныеКлючаЭЦП.КлючBase64, ДанныеКлючаЭЦП.Пароль, ДанныеКлючаЭЦП);
		КонецЕсли;
	Иначе
		ТипКлюча = Контейнер.ТипКлюча(ДанныеКлючаЭЦП.КлючBase64, ДанныеКлючаЭЦП.Пароль);
	КонецЕсли; 
	
	
	ТипПодписиЭСФ = ПредопределенноеЗначение("Перечисление.ТипыПодписиЭСФ.ПустаяСсылка");
	
	Если ТипКлюча = Контейнер.КлючGOST() Тогда
		
		ТипПодписиЭСФ = ПредопределенноеЗначение("Перечисление.ТипыПодписиЭСФ.ЮридическоеЛицо");
		
	ИначеЕсли ТипКлюча = Контейнер.КлючRSA() Тогда
		
		Если ДанныеПрофиляИСЭСФ.СтруктурнаяЕдиница.ЭтоИндивидуальныйПредприниматель Тогда
			ТипПодписиЭСФ = ПредопределенноеЗначение("Перечисление.ТипыПодписиЭСФ.ЮридическоеЛицо");
		Иначе
			ТипПодписиЭСФ = ПредопределенноеЗначение("Перечисление.ТипыПодписиЭСФ.УполномоченноеЛицо");
		КонецЕсли;
		
	Иначе
		
		ТипПодписиЭСФ = ПредопределенноеЗначение("Перечисление.ТипыПодписиЭСФ.ПустаяСсылка");
		
	КонецЕсли;
	
	Возврат ТипПодписиЭСФ;
	
КонецФункции

Функция ИнициализироватьХранилищеКлюча_ТипДанных_СтрокаBase64() Экспорт
	Возврат 2;	
КонецФункции

// Возвращает свойства сертификата, извлеченные из файла *.p12.
// При выполнении происходит обращение к серверу.
//
// Параметры:
//  КлючBase64 - Строка - Файл P12 в кодировке Base64.
//  ПарольОтКлюча - Строка - Пароль от файла P12.
//
// Возвращаемое значение:
//  Структура - Свойства сертификата.
//   |- Ключ - Строка - Имя свойства сертификата.
//   |- Значение - Строка - Значение свойства сертификата.
//  Содержит все свойства из НоваяКоллекцияИдентификаторовСвойствСертификата().
//  Если какого-нибудь свойства не было в сертификате, то его значением будет пустая строка.
//
Функция СвойстваСертификатаБезОбработки(Знач КлючBase64, Знач ПарольОтКлюча) Экспорт 
	
	Криптопровайдер = КриптографияКлиентСервер.НовыйКриптопровайдер();	
	Криптопровайдер.ИнициализироватьХранилищеКлюча(КлючBase64, ПарольОтКлюча, ИнициализироватьХранилищеКлюча_ТипДанных_СтрокаBase64());	
	СвойстваXML = Криптопровайдер.ПолучитьСвойстваСертификатаВВидеXML();
	
	СвойстваСертификата = ЭСФВызовСервера.СвойстваСертификатаБезОбработкиНаСервере(СвойстваXML);
	
	Возврат СвойстваСертификата;
	
КонецФункции

Функция СвойстваСертификата(Знач КлючBase64, Знач ПарольОтКлюча) Экспорт 
	
	СвойстваСертификатаБезОбработки = СвойстваСертификатаБезОбработки(КлючBase64, ПарольОтКлюча);	
	
	СвойстваСертификата = НовыеСвойстваСертификата();
	
	СвойстваСертификата.ИдентификаторОткрытогоКлюча = ПолучитьСвойствоСертификата(СвойстваСертификатаБезОбработки, "ext.subjectKeyIdentifier", "");
	СвойстваСертификата.ИмяИздателя = ПолучитьСвойствоСертификата(СвойстваСертификатаБезОбработки, "issuer.CN", "");
	СвойстваСертификата.СрокГодностиОт = ПолучитьСвойствоСертификата(СвойстваСертификатаБезОбработки, "not_before", "");
	СвойстваСертификата.СрокГодностиДо = ПолучитьСвойствоСертификата(СвойстваСертификатаБезОбработки, "not_after", "");
	СвойстваСертификата.ИмяФамилияСубъекта = ПолучитьСвойствоСертификата(СвойстваСертификатаБезОбработки, "subject.CN", "");
	СвойстваСертификата.ОтчествоСубъекта = ПолучитьСвойствоСертификата(СвойстваСертификатаБезОбработки, "subject.GN", "");	
	СвойстваСертификата.ИИНСубъекта = Сертфикат_ИИНСубъектаИзСвойств(СвойстваСертификатаБезОбработки);
	СвойстваСертификата.EmailСубъекта = ПолучитьСвойствоСертификата(СвойстваСертификатаБезОбработки, "subject.emailAddress", "");	
	СвойстваСертификата.Страна = ПолучитьСвойствоСертификата(СвойстваСертификатаБезОбработки, "subject.C", "");	
	СвойстваСертификата.РегионОбласть = ПолучитьСвойствоСертификата(СвойстваСертификатаБезОбработки, "subject.ST", "");	
	СвойстваСертификата.Город = ПолучитьСвойствоСертификата(СвойстваСертификатаБезОбработки, "subject.L", "");	
	СвойстваСертификата.БИНОрганизации = Сертфикат_БИНОрганизацииИзСвойств(СвойстваСертификатаБезОбработки);	
	СвойстваСертификата.НаименованиеОрганизации = ПолучитьСвойствоСертификата(СвойстваСертификатаБезОбработки, "subject.O", "");		
	СвойстваСертификата.ТипКлюча = Сертификат_ТипКлючаИзСвойств(СвойстваСертификатаБезОбработки);
	
	Возврат СвойстваСертификата;
	
КонецФункции

Функция Сертификат_ТипКлючаИзСвойств(Знач СвойстваСертификатаБезОбработки) Экспорт
	
	ТипКлюча = "";
	
	ИмяАлгоритма = СвойстваСертификатаБезОбработки.Получить("algorithmName");
	
	Если ИмяАлгоритма <> Неопределено Тогда
		Если Найти(ВРег(ИмяАлгоритма), "RSA") <> 0 Тогда
			ТипКлюча = КлючRSA();
		ИначеЕсли Найти(ВРег(ИмяАлгоритма), "GOST") <> 0 Тогда
			ТипКлюча = КлючGOST();	
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТипКлюча;
	
КонецФункции

Функция ПолучитьСвойствоСертификата(СвойстваСертификата, ИмяСвойства, ПустоеЗначение) Экспорт
	
	Если ТипЗнч(СвойстваСертификата) = Тип("Структура") Тогда
		Если СвойстваСертификата.Свойство(ИмяСвойства) Тогда
			ЗначениеСвойства = СвойстваСертификата[ИмяСвойства];
		Иначе
			ЗначениеСвойства = Неопределено;
		КонецЕсли;
	Иначе	
		ЗначениеСвойства = СвойстваСертификата.Получить(ИмяСвойства);
	КонецЕсли;
	
	Если ЗначениеСвойства = Неопределено Тогда
		Возврат ПустоеЗначение;	
	Иначе
		Возврат ЗначениеСвойства;
	КонецЕсли;
	
КонецФункции

Функция НовыеСвойстваСертификата() Экспорт
	
	СвойстваСертификата = Новый Структура;
	
	СвойстваСертификата.Вставить("ИдентификаторОткрытогоКлюча", "");
	СвойстваСертификата.Вставить("ИмяИздателя", "");
	СвойстваСертификата.Вставить("СрокГодностиОт", "");
	СвойстваСертификата.Вставить("СрокГодностиДо", "");
	СвойстваСертификата.Вставить("ИмяФамилияСубъекта", "");
	СвойстваСертификата.Вставить("ОтчествоСубъекта", "");
	СвойстваСертификата.Вставить("ИИНСубъекта", "");
	СвойстваСертификата.Вставить("EmailСубъекта", "");
	СвойстваСертификата.Вставить("Страна", "");
	СвойстваСертификата.Вставить("РегионОбласть", "");
	СвойстваСертификата.Вставить("Город", "");
	СвойстваСертификата.Вставить("БИНОрганизации", "");
	СвойстваСертификата.Вставить("НаименованиеОрганизации", "");
	СвойстваСертификата.Вставить("ТипКлюча", "");
	
	Возврат СвойстваСертификата;
	
КонецФункции

Функция Сертфикат_ИИНСубъектаИзСвойств(Знач СвойстваСертификатаБезОбработки) Экспорт
	
	ИИН = "";
	
	СерийныйНомер = СвойстваСертификатаБезОбработки.Получить("subject.serialNumber");
	Если СтрДлина(СерийныйНомер) > 3 Тогда
		ИИН = Сред(СерийныйНомер, 4);
	КонецЕсли;
	
	Возврат ИИН;
	
КонецФункции

Функция Сертфикат_БИНОрганизацииИзСвойств(Знач СвойстваСертификатаБезОбработки) Экспорт
	
	БИН = "";
	
	СерийныйНомер = СвойстваСертификатаБезОбработки.Получить("subject.OU");
	Если СтрДлина(СерийныйНомер) > 3 Тогда
		БИН = Сред(СерийныйНомер, 4);
	КонецЕсли;
	
	Возврат БИН;
	
КонецФункции

Функция СвойстваСертификатаИзJSON_Kalkan(Знач СвойстваСертификатаБезОбработки) Экспорт 
		
	СвойстваСертификата = НовыеСвойстваСертификата();
	
	СвойстваСертификата.ИдентификаторОткрытогоКлюча = ПолучитьСвойствоСертификата(СвойстваСертификатаБезОбработки, "authorityKeyIdentifier", "");
	СвойстваСертификата.ИмяИздателя = ПолучитьСвойствоСертификата(СвойстваСертификатаБезОбработки, "issuerCn", "");
	СвойстваСертификата.СрокГодностиОт = СтрокаВДатуВремя(СвойстваСертификатаБезОбработки.certNotBefore, "dd.mm.yyyy hh:nn:ss");
	СвойстваСертификата.СрокГодностиДо = СтрокаВДатуВремя(СвойстваСертификатаБезОбработки.certNotAfter, "dd.mm.yyyy hh:nn:ss");
	СвойстваСертификата.ИмяФамилияСубъекта = ПолучитьСвойствоСертификата(СвойстваСертификатаБезОбработки, "subjectCn", "");

	Если СвойстваСертификатаБезОбработки.Свойство("subjectDn") И НЕ ПустаяСтрока(СвойстваСертификатаБезОбработки.subjectDn) Тогда
		ДанныеДн = РазобратьСтрокуСертификата(СвойстваСертификатаБезОбработки.subjectDn);
		СвойстваСертификата.ИИНСубъекта = Сред(СокрЛП(ПолучитьСвойствоСертификата(ДанныеДн, "SERIALNUMBER", "")),4);
		СвойстваСертификата.Страна = ПолучитьСвойствоСертификата(ДанныеДн, "C", "");
		СвойстваСертификата.НаименованиеОрганизации = ПолучитьСвойствоСертификата(ДанныеДн, "O", "");
		СвойстваСертификата.ОтчествоСубъекта = ПолучитьСвойствоСертификата(ДанныеДн, "G", "");
		БИН = СокрЛП(ПолучитьСвойствоСертификата(ДанныеДн, "OU", ""));
		Если БИН <> "" Тогда
			Если Найти(ВРег(БИН), "BIN") Тогда
				БИН = Сред(БИН, 4);
			КонецЕсли;
		КонецЕсли;
		СвойстваСертификата.БИНОрганизации = БИН;
		СвойстваСертификата.EmailСубъекта = ПолучитьСвойствоСертификата(ДанныеДн, "E", "");
	КонецЕсли;
	
	//СвойстваСертификата.EmailСубъекта = ПолучитьСвойствоСертификата(СвойстваСертификатаБезОбработки, "subject.emailAddress", "");	
	//СвойстваСертификата.РегионОбласть = ПолучитьСвойствоСертификата(СвойстваСертификатаБезОбработки, "subject.ST", "");	
	//СвойстваСертификата.Город = ПолучитьСвойствоСертификата(СвойстваСертификатаБезОбработки, "subject.L", "");	
	
	СвойстваСертификата.ТипКлюча = Сертификат_ТипКлючаИзСвойствНовый(ПолучитьСвойствоСертификата(СвойстваСертификатаБезОбработки, "algorithm", ""));
	
	Описание = ОписаниеСертификата(СвойстваСертификата);
	СвойстваСертификата.Вставить("ОписаниеСертификата", Описание);
	
	Возврат СвойстваСертификата;
	
КонецФункции

// Возврашает текстовое описание сертификата.
//
// Параметры:
//  Свойства - Структура - См. СвойстваСертификата()
//
// Возвращаемое значение:
//  Строка, текстовое описание сертификата.
//
Функция ОписаниеСертификата(Знач Свойства) Экспорт
	
	//Наименование организации:
	//БИН организации: 
	//
	//ФИО владельца:
	//ИИН владельца:
	//Адрес владельца:
	//Email владельца:
	//
	//Издатель сертификата:
	//Начало действия сертификата:
	//Окончание действия сертификата:
	//Идентификатор открытого ключа:
	
	Описание = "";
	
	ДобавитьСтрокуОписания(Описание, НСтр("ru = 'Наименование организации'"), Свойства.НаименованиеОрганизации);
	ДобавитьСтрокуОписания(Описание, НСтр("ru = 'БИН организации'"), Свойства.БИНОрганизации);
	
	Описание = Описание + Символы.ПС;
	
	ФИО = СокрЛП(Свойства.ИмяФамилияСубъекта + " " + Свойства.ОтчествоСубъекта);
	ДобавитьСтрокуОписания(Описание, НСтр("ru = 'ФИО владельца'"), ФИО);
	
	ДобавитьСтрокуОписания(Описание, НСтр("ru = 'ИИН владельца'"), Свойства.ИИНСубъекта);
	
	Адрес = Свойства.Страна + ", " + Свойства.РегионОбласть + ", " + Свойства.Город;
	Пока Лев(Адрес, 2) = ", " Цикл
		Адрес = Сред(Адрес, 3);	
	КонецЦикла;
	Пока Прав(Адрес, 2) = ", " Цикл
		Адрес = Сред(Адрес, 1, СтрДлина(Адрес) - 2);	
	КонецЦикла;	
	ДобавитьСтрокуОписания(Описание, НСтр("ru = 'Адрес владельца'"), Адрес);	
	
	ДобавитьСтрокуОписания(Описание, НСтр("ru = 'Email владельца'"), Свойства.EmailСубъекта);
	
	Описание = Описание + Символы.ПС;
	
	ДобавитьСтрокуОписания(Описание, НСтр("ru = 'Издатель сертификата'"),           Свойства.ИмяИздателя);
	ДобавитьСтрокуОписания(Описание, НСтр("ru = 'Начало действия сертификата'"),    Свойства.СрокГодностиОт);
	ДобавитьСтрокуОписания(Описание, НСтр("ru = 'Окончание действия сертификата'"), Свойства.СрокГодностиДо);
	ДобавитьСтрокуОписания(Описание, НСтр("ru = 'Идентификатор открытого ключа'"),  Свойства.ИдентификаторОткрытогоКлюча);
	
	Возврат СокрЛП(Описание);
	
КонецФункции

Функция ДобавитьСтрокуОписания(Описание, Знач Наименование, Знач Значение) Экспорт
	
	Если НЕ ПустаяСтрока(Значение) Тогда
		Строка = НСтр("ru = '%Наименование%: %Значение%'");
		Строка = СтрЗаменить(Строка, "%Наименование%", Наименование);
		Строка = СтрЗаменить(Строка, "%Значение%", Значение);
		Описание = Описание + Строка + Символы.ПС;
	КонецЕсли;
	
КонецФункции

Функция СвойстваСертификата_Kalkan(Знач КлючBase64, Знач ПарольОтКлюча) Экспорт
	
	//выбираем тип ключа при помощи внешней криптографии
	СвойстваСертификата = НовыеСвойстваСертификата();
	
	ДанныеКлючаЭЦП = Новый Структура("КлючBase64, Пароль", КлючBase64, ПарольОтКлюча);
	ПараметрыКлюча = ПодготовитьПараметрыКлючаДляПодписи(ДанныеКлючаЭЦП);
	ДополнительныеПараметры = ЭлектронноеВзаимодействиеССервисамиВызовСервера.ПолучитьПараметрыКомпонентыЭСФ("000000000000", Ложь, , , , ПараметрыКлюча);
	
	Если Не ЗначениеЗаполнено(ДополнительныеПараметры) Тогда
		ТекстИсключения = НСтр(
		"ru = 'Не удалось получить данные сертификата.'");
		СообщитьПользователю(ТекстИсключения);
		УдалитьВременныйФайлКлюча(ПараметрыКлюча);
		Возврат Неопределено;
	КонецЕсли;
	
	Если ЭСФВызовСервераПовтИсп.ВыполнятьКриптографическиеОперацииНаКлиенте() Тогда
		ОтветСтруктура = ПолучитьДанныеСертификатаВнешняяКриптография("000000000000", "1CService", ДополнительныеПараметры, ДанныеКлючаЭЦП);
	Иначе
		ОтветСтруктура = ПолучитьДанныеСертификатаВнешняяКриптография("000000000000", "1CService", ДополнительныеПараметры, ДанныеКлючаЭЦП);
	КонецЕсли;
	
	Если ОтветСтруктура <> Неопределено Тогда
		
		СвойстваСертификата = СвойстваСертификатаИзJSON_Kalkan(ОтветСтруктура.responseObject);
		
	КонецЕсли;
	
	Возврат СвойстваСертификата;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// Прочие служебные процедуры и функции

Функция КраткоеПредставлениеЭСФ(Знач СсылкаЭСФ) Экспорт
	
	СтрокаЭСФ = Строка(СсылкаЭСФ);
	СтрокаЭСФ = СтрЗаменить(СтрокаЭСФ, НСтр("ru = 'Электронный счет-фактура'"), НСтр("ru = 'ЭСФ'"));	
	СтрокаЭСФ = СтрЗаменить(СтрокаЭСФ, НСтр("ru = ' 0:00:00'"), "");
	Возврат СтрокаЭСФ;
	
КонецФункции

Функция ПреобразованноеНаименование(Знач ИсходноеНаименование) Экспорт
	
	Возврат ВРег(СокрЛП(ИсходноеНаименование));
	
КонецФункции

// Возвращает имя для аутентификации в ИС ЭСФ, полученное из ИИН.
//
// Параметры:
//  ИИН - Строка - ИИН, для формаирования имени для аутентификации в ИС ЭСФ.
//
// Возвращаемое значение:
//  Строка - Имя для аутентификации в ИСФ ЭСФ.
//
Функция ИмяАутентификации(ИИН) Экспорт
	
	Попытка
		Число = Число(ИИН);
		ИмяАутентификации = ИИН;
	Исключение
		ИмяАутентификации = "";
	КонецПопытки;
	
	Если ПустаяСтрока(ИмяАутентификации) Тогда 
		Попытка
			ИИН = СтрЗаменить(ИИН, "IIN", "");
			Число = Число(ИИН);
			ИмяАутентификации = ИИН;
		Исключение
			ИмяАутентификации = "";	
		КонецПопытки;
	КонецЕсли;
	
	Возврат ИмяАутентификации;
	
КонецФункции

// Возвращает новый массив строк, созданный на основании параметра ИменаЧерезЗапятую.
//
// Параметры:
//  ИменаЧерезЗапятую - Строка - Имена объектов, переменных, реквизитов и т.д.
//
// Возвращаемое значение:
//  Массив - Массив имен, созданный на основании параметра ИменаЧерезЗапятую.
//
// Пример:
//  // Переменная МассивИмен будет массивом, содержащим три элемента:
//  // "Идентификатор", "РегистрационныйНомер", "УполномоченныйСотрудник".
//  МассивИмен = МассивИмен("Идентификатор, РегистрационныйНомер, УполномоченныйСотрудник")
//
Функция МассивИмен(Знач ИменаЧерезЗапятую) Экспорт
	
	МассивПодстрок = Новый Массив;
	
	// Удалить все пробелы, оставив только запятые.
	Пока Найти(ИменаЧерезЗапятую, " ") <> 0 Цикл
		ИменаЧерезЗапятую = СтрЗаменить(ИменаЧерезЗапятую, " ", "");	
	КонецЦикла;
	
	// Разбить строку и заполнить массив.	
	Позиция = Найти(ИменаЧерезЗапятую, ",");
	Пока Позиция <> 0 Цикл
		МассивПодстрок.Добавить(Лев(ИменаЧерезЗапятую, Позиция - 1));
		ИменаЧерезЗапятую = Сред(ИменаЧерезЗапятую, Позиция + 1);
		Позиция = Найти(ИменаЧерезЗапятую, ",");
	КонецЦикла;	
	Если НЕ ПустаяСтрока(ИменаЧерезЗапятую) Тогда
		МассивПодстрок.Добавить(ИменаЧерезЗапятую);	
	КонецЕсли;
	
	Возврат МассивПодстрок;
	
КонецФункции

Процедура ЗаписьЖурналаРегистрацииОшибкаУдаленияФайла(ИмяФайла, ИнформацияОбОшибке)
	
	Комментарий = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(НСтр(
		"ru = 'Не удалось удалить файл %1 по причине:
		|
		|%2'"),ИмяФайла, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		
	ЭСФВызовСервера.СоздатьЗаписьЖурналаРегистрации("ЭСФКлиентСервер.УдалитьВременныеФайлы", "Ошибка", , , Комментарий);
	
КонецПроцедуры

Функция ЭтоОбычнаяФорма(Форма) Экспорт
	
	Если ТипЗнч(Форма) = ЭСФКлиентСерверПереопределяемый.ПолучитьТипФормаКлиентскогоПриложения() Тогда
		ОбычнаяФорма = Ложь;	
	Иначе
		ОбычнаяФорма = Истина;	
	КонецЕсли;
	
	Возврат ОбычнаяФорма;
	
КонецФункции

// Проверяет корректность указанного идентификатора. 
// В качестве идентификатора должна быть указана строка, содержащая только цифры.
//
// Параметры:
//  Идентификатор  - Строка - идентификатор для проверки.
//  ТекстСообщения - Строка - если идентификатор некорректен, то в данный параметр будет помещен текст с причиной некорректности
//
// Возвращаемое значение:
//  Истина       - идентификатор содержит только цифры или пустой;
//  Ложь         - идентификатор содержит не только цифры.
//
Функция ИдентификаторКорректен(Идентификатор, ТекстСообщения = "") Экспорт
	
	Если ТипЗнч(Идентификатор) <> Тип("Строка") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Идентификатор) Тогда
		ТекстСообщения = НСтр("ru = 'Идентификатор не указан'");
		Возврат Истина;
	КонецЕсли;
	
	Для а = 1 По СтрДлина(Идентификатор) Цикл
		КодСимвола = КодСимвола(Сред(Идентификатор, а, 1));
		Если НЕ (КодСимвола >= 48 И КодСимвола <= 57) Тогда
			ТекстСообщения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(НСтр("ru = 'Идентификатор ""%1"" содержит нецифровые символы'"),Идентификатор);
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Процедура УдалитьВременныеФайлы(ПутьКФайлам) Экспорт
	
	Попытка
		УдалитьФайлы(ПутьКФайлам);
	Исключение
		ЗаписьЖурналаРегистрацииОшибкаУдаленияФайла(ПутьКФайлам, ИнформацияОбОшибке());
	КонецПопытки;
	
КонецПроцедуры

Функция ЭтоОповещениеПодсистемыЭСФ(Знач ИмяСобытия) Экспорт
	
	Если ИмяСобытия = ЭСФКлиентСервер.ИмяСобытияЗаписьЭСФ()
	 ИЛИ ИмяСобытия = ЭСФКлиентСервер.ИмяСобытияЗаписьСторно() 
	 ИЛИ ИмяСобытия = ЭСФКлиентСервер.ИмяСобытияЗаписьСчетаФактуры() Тогда
		
		ОповещениеЭСФ = Истина;
		
	Иначе
		
		ОповещениеЭСФ = Ложь;
		
	КонецЕсли;
	
	Возврат ОповещениеЭСФ;
	
КонецФункции

Функция ПриоритетСостоянияЭСФ(Знач СостояниеЭСФ) Экспорт
	
	Приоритет = 0;
	
	Если СостояниеЭСФ = ПредопределенноеЗначение("Перечисление.СостоянияЭСФ.ПустаяСсылка") Тогда
		Приоритет = 0;
	ИначеЕсли СостояниеЭСФ = ПредопределенноеЗначение("Перечисление.СостоянияЭСФ.Сформирован") Тогда
		Приоритет = 1;
	ИначеЕсли СостояниеЭСФ = ПредопределенноеЗначение("Перечисление.СостоянияЭСФ.ОтклоненСервером") Тогда
		Приоритет = 2;
	ИначеЕсли СостояниеЭСФ = ПредопределенноеЗначение("Перечисление.СостоянияЭСФ.Отозван") Тогда
		Приоритет = 3;
	ИначеЕсли СостояниеЭСФ = ПредопределенноеЗначение("Перечисление.СостоянияЭСФ.Аннулирован") Тогда
		Приоритет = 3;
	ИначеЕсли СостояниеЭСФ = ПредопределенноеЗначение("Перечисление.СостоянияЭСФ.АннулированИСЭСФДляОтнесенияВЗачетИНаВычеты") Тогда
		Приоритет = 3;
	ИначеЕсли СостояниеЭСФ = ПредопределенноеЗначение("Перечисление.СостоянияЭСФ.АннулированПриОтзывеСНТ") Тогда
		Приоритет = 3;
	ИначеЕсли СостояниеЭСФ = ПредопределенноеЗначение("Перечисление.СостоянияЭСФ.АннулированПриОтклоненииСНТ") Тогда
		Приоритет = 3;
	ИначеЕсли СостояниеЭСФ = ПредопределенноеЗначение("Перечисление.СостоянияЭСФ.ОбрабатываетсяСервером") Тогда
		Приоритет = 4;
	ИначеЕсли СостояниеЭСФ = ПредопределенноеЗначение("Перечисление.СостоянияЭСФ.ПринятСервером") Тогда
		Приоритет = 5;
	ИначеЕсли СостояниеЭСФ = ПредопределенноеЗначение("Перечисление.СостоянияЭСФ.ДоставленПолучателю") Тогда
		Приоритет = 5;
	ИначеЕсли СостояниеЭСФ = ПредопределенноеЗначение("Перечисление.СостоянияЭСФ.ПринятОтПоставщика") Тогда
		Приоритет = 5;
	ИначеЕсли СостояниеЭСФ = ПредопределенноеЗначение("Перечисление.СостоянияЭСФ.ОтклоненПолучателем") Тогда
		Приоритет = 6;
	КонецЕсли;
	
	Возврат Приоритет;
	
КонецФункции

// Разбирает строку URI на составные части и возвращает в виде структуры.
// На основе RFC 3986.
//
// Параметры:
//     СтрокаURI - Строка - ссылка на ресурс в формате: <схема>://<логин>:<пароль>@<хост>:<порт>/<путь>?<параметры>#<якорь>
//
// Возвращаемое значение:
//     Структура - составные части URI согласно формату:
//         * Схема         - Строка
//         * Логин         - Строка
//         * Пароль        - Строка
//         * ИмяСервера    - Строка - часть <хост>:<порт> входного параметра
//         * Хост          - Строка
//         * Порт          - Строка
//         * ПутьНаСервере - Строка - часть <путь>?<параметры>#<якорь> входного параметра
//
Функция СтруктураURI(Знач СтрокаURI) Экспорт
	
	СтрокаURI = СокрЛП(СтрокаURI);
	
	// схема
	Схема = "";
	Позиция = Найти(СтрокаURI, "://");
	Если Позиция > 0 Тогда
		Схема = НРег(Лев(СтрокаURI, Позиция - 1));
		СтрокаURI = Сред(СтрокаURI, Позиция + 3);
	КонецЕсли;

	// строка соединения и путь на сервере
	СтрокаСоединения = СтрокаURI;
	ПутьНаСервере = "";
	Позиция = Найти(СтрокаСоединения, "/");
	Если Позиция > 0 Тогда
		ПутьНаСервере = Сред(СтрокаСоединения, Позиция + 1);
		СтрокаСоединения = Лев(СтрокаСоединения, Позиция - 1);
	КонецЕсли;
		
	// информация пользователя и имя сервера
	СтрокаАвторизации = "";
	ИмяСервера = СтрокаСоединения;
	Позиция = Найти(СтрокаСоединения, "@");
	Если Позиция > 0 Тогда
		СтрокаАвторизации = Лев(СтрокаСоединения, Позиция - 1);
		ИмяСервера = Сред(СтрокаСоединения, Позиция + 1);
	КонецЕсли;
	
	// логин и пароль
	Логин = СтрокаАвторизации;
	Пароль = "";
	Позиция = Найти(СтрокаАвторизации, ":");
	Если Позиция > 0 Тогда
		Логин = Лев(СтрокаАвторизации, Позиция - 1);
		Пароль = Сред(СтрокаАвторизации, Позиция + 1);
	КонецЕсли;
	
	// хост и порт
	Хост = ИмяСервера;
	Порт = "";
	Позиция = Найти(ИмяСервера, ":");
	Если Позиция > 0 Тогда
		Хост = Лев(ИмяСервера, Позиция - 1);
		Порт = Сред(ИмяСервера, Позиция + 1);
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("Схема", Схема);
	Результат.Вставить("Логин", Логин);
	Результат.Вставить("Пароль", Пароль);
	Результат.Вставить("ИмяСервера", ИмяСервера);
	Результат.Вставить("Хост", Хост);
	Результат.Вставить("Порт", ?(ПустаяСтрока(Порт), Неопределено, Число(Порт)));
	Результат.Вставить("ПутьНаСервере", ПутьНаСервере);
	
	Возврат Результат;
	
КонецФункции

// Устанавливает свойство ИмяСвойства элемента формы с именем ИмяЭлемента в значение Значение.
// Применяется в тех случаях, когда элемент формы может не быть на форме из-за отсутствия прав у пользователя
// на объект, реквизит объекта или команду.
//
// Параметры:
//  ЭлементыФормы - свойство ЭлементыФормы управляемой формы.
//  ИмяЭлемента - Строка - имя элемента формы
//  ИмяСвойства - Строка - имя устанавливаемого свойства элемента формы
//  Значение - Произвольный - новое значение элемента
// 
Процедура УстановитьСвойствоЭлементаФормы(ЭлементыФормы, ИмяЭлемента, ИмяСвойства, Значение) Экспорт
    
    ЭлементФормы = ЭлементыФормы.Найти(ИмяЭлемента);
    Если ЭлементФормы <> Неопределено Тогда
        ЭлементФормы[ИмяСвойства] = Значение;
    КонецЕсли;
    
КонецПроцедуры

Функция ПустыеПараметрыФормыИзменениеСтатусовЭСФ() Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Действие", "");
	ПараметрыФормы.Вставить("МассивЭСФ", Новый Массив);
	ПараметрыФормы.Вставить("ЗапускатьФоновоеЗадание", Ложь);
	
	Возврат ПараметрыФормы;
	
КонецФункции

Функция НаименованиеДоговора(Знач ОбъектЭСФ) Экспорт
	
	НаименованиеДоговора = "";
	
	ВалютаРегламентированногоУчета = ЭСФВызовСервера.ВалютаРегламентированногоУчета();
	
	Если ЗначениеЗаполнено(ОбъектЭСФ.ДоговорПоставкиНомер)
		И ЗначениеЗаполнено(ОбъектЭСФ.ДоговорПоставкиДата) Тогда
		
		Если ОбъектЭСФ.Валюта = ВалютаРегламентированногоУчета Тогда
			НаименованиеДоговора = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(НСтр("ru = 'Договор №%1 от %2'"),ОбъектЭСФ.ДоговорПоставкиНомер,Формат(ОбъектЭСФ.ДоговорПоставкиДата, "ДФ=dd.MM.yyyy"));
		Иначе
			НаименованиеДоговора = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(НСтр("ru = 'Договор №%1 от %2 в %3'"), ОбъектЭСФ.ДоговорПоставкиНомер,Формат(ОбъектЭСФ.ДоговорПоставкиДата, "ДФ=dd.MM.yyyy"),ОбъектЭСФ.Валюта);
		КонецЕсли;		
		
	Иначе
		
		Если ОбъектЭСФ.Валюта = ВалютаРегламентированногоУчета Тогда
			НаименованиеДоговора = НСтр("ru = 'Без договора'");
		Иначе
			НаименованиеДоговора = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(НСтр("ru = 'Договор в %1'"),ОбъектЭСФ.Валюта);
		КонецЕсли;		
		
	КонецЕсли;		
		
	Возврат НаименованиеДоговора;
	
КонецФункции

Функция ТекстКомментарияСозданПоДаннымЭСФ(СсылкаЭСФ) Экспорт
	
	КраткоеПредставлениеЭСФ = ЭСФКлиентСервер.КраткоеПредставлениеЭСФ(СсылкаЭСФ);
	
	ТекстКомментария = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(НСтр("ru = 'Создан по данным документа ""%1"".'"),КраткоеПредставлениеЭСФ);
	
	Возврат ТекстКомментария;
	
КонецФункции

Функция ПолучитьВерсиюТекущейПлатформы() Экспорт
	
	ОбъектСисИнфо = Новый СистемнаяИнформация;
	Возврат СокрЛП(ОбъектСисИнфо.ВерсияПриложения);
	
КонецФункции

Функция РазобратьСтрокуВМассивПоРазделителю(Знач Стр, СтрРазделитель = ".") Экспорт
	
	Результат = Новый Массив;
	
	ВхождениеРазделителя = Найти(Стр, СтрРазделитель);
	Пока ВхождениеРазделителя <> 0 Цикл
		ЧастьДоРазделителя = СокрЛП(Лев(Стр, ВхождениеРазделителя - 1));
		Результат.Добавить(ЧастьДоРазделителя);
		Стр = СокрЛП(Сред(Стр, ВхождениеРазделителя + 1));
		ВхождениеРазделителя = Найти(Стр, СтрРазделитель);
	КонецЦикла;
	
	Если НЕ ПустаяСтрока(Стр) Тогда
		Результат.Добавить(СокрЛП(Стр));
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьЭлементДаты(МассивЭлементов, ИндексЭлемента) 
	
	Если МассивЭлементов.Количество() <= ИндексЭлемента Тогда
		Возврат 0;
	Иначе
		ЭлементДаты = МассивЭлементов[ИндексЭлемента];
		Если ПустаяСтрока(ЭлементДаты) ИЛИ НЕ ЭСФКлиентСерверПереопределяемый.ТолькоЦифрыВСтроке(ЭлементДаты) Тогда
			Возврат 0;
		Иначе
			Возврат Число(ЭлементДаты);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Функция ДатаПоСтроке(Знач Стр) Экспорт
	
	Попытка
		Если Найти(Стр, "-") <> 0 Тогда
			Если СтрДлина(Стр) > 10 Тогда
				Возврат Дата(Число(СокрЛП(Сред(Стр, 1, 4))),
							Число(СокрЛП(Сред(Стр, 6, 2))),
							Число(СокрЛП(Сред(Стр, 9, 2))),
							Число(СокрЛП(Сред(Стр, 12, 2))),
							Число(СокрЛП(Сред(Стр, 15, 2))),
							Число(СокрЛП(Сред(Стр, 18, 2))));
			Иначе
				Возврат Дата(Число(СокрЛП(Сред(Стр, 1, 4))),
							Число(СокрЛП(Сред(Стр, 6, 2))),
							Число(СокрЛП(Сред(Стр, 9, 2))));
			КонецЕсли;
		Иначе
			Если Найти(Стр, ":") <> 0 Тогда
				Стр = СтрЗаменить(Стр, " ", ",");
				Стр = СтрЗаменить(Стр, ":", ",");
				Стр = СтрЗаменить(Стр, ".", ",");
				Стр = СтрЗаменить(Стр, ",,", ",");
				МассивЭлементов = Новый Массив;
				ВхождениеРазделителя = Найти(Стр, ",");
				Пока ВхождениеРазделителя <> 0 Цикл
					МассивЭлементов.Добавить(СокрЛП(Лев(Стр, ВхождениеРазделителя - 1)));
					Стр = СокрЛП(Сред(Стр, ВхождениеРазделителя + 1));
					ВхождениеРазделителя = Найти(Стр, ",");
				КонецЦикла;
				Возврат Дата(ПолучитьЭлементДаты(МассивЭлементов, 2),
							ПолучитьЭлементДаты(МассивЭлементов, 1),
							ПолучитьЭлементДаты(МассивЭлементов, 0),
							ПолучитьЭлементДаты(МассивЭлементов, 3),
							ПолучитьЭлементДаты(МассивЭлементов, 4),
							ПолучитьЭлементДаты(МассивЭлементов, 5));
			Иначе
				Возврат Дата(Число(СокрЛП(Сред(Стр, 7, 4))),
							Число(СокрЛП(Сред(Стр, 4, 2))),
							Число(СокрЛП(Сред(Стр, 1, 2))));
			КонецЕсли;
		КонецЕсли;
	Исключение
		Возврат '00010101';
	КонецПопытки;
	
КонецФункции

Процедура СообщитьПользователю(Текст, Поле = Неопределено) Экспорт
	Сообщение = Новый СообщениеПользователю;
	
	Сообщение.Текст = Текст; 		
	Если ЗначениеЗаполнено(Поле) Тогда
		Сообщение.Поле = Поле;	
	КонецЕсли;	
	
	Сообщение.Сообщить();
КонецПроцедуры

Функция ПроксиСерверИСЭСФ() Экспорт
	
	НастройкиПрокси = ЭСФВызовСервераПовтИсп.ПолучитьПараметрыПодключенияКСерверуИСЭСФ();
	
	Если НастройкиПрокси.ПроксиСервер_ВариантИспользования = ЭСФКлиентСервер.ПроксиНеИспользовать() Тогда
		
		ИнтернетПрокси = Новый ИнтернетПрокси(Ложь);	
		
	ИначеЕсли НастройкиПрокси.ПроксиСервер_ВариантИспользования = ЭСФКлиентСервер.ПроксиСистемныеНастройки() Тогда
		
		ИнтернетПрокси = Новый ИнтернетПрокси(Истина);	
		
	ИначеЕсли НастройкиПрокси.ПроксиСервер_ВариантИспользования = ЭСФКлиентСервер.ПроксиДругиеНастройки() Тогда
		
		ИнтернетПрокси = Новый ИнтернетПрокси(Ложь);
		ИнтернетПрокси.Установить("http", НастройкиПрокси.ПроксиСервер_Сервер, НастройкиПрокси.ПроксиСервер_Порт);
		ИнтернетПрокси.Установить("https", НастройкиПрокси.ПроксиСервер_Сервер, НастройкиПрокси.ПроксиСервер_Порт);
		ИнтернетПрокси.Пользователь = НастройкиПрокси.ПроксиСервер_Пользователь;
		ИнтернетПрокси.Пароль = НастройкиПрокси.ПроксиСервер_Пароль;
		
	Иначе
		
		ИнтернетПрокси = Неопределено;
	
	КонецЕсли;
	
	Возврат ИнтернетПрокси;
	
КонецФункции

// Возвращает структуру параметров открытия сессии с подписью по-умолчанию.
//
// Возвращаемое значение:
//   Структура   - содержит параметры открытия сессии по-умолчанию.
//
Функция ПолучитьПараметрыОткрытияСессииСПодписьюПоУмолчанию() Экспорт
	
	ПараметрыОткрытияСессииСПодписью = Новый Структура();
	ПараметрыОткрытияСессииСПодписью.Вставить("ПроверятьАктивностьСессии", Истина);
	ПараметрыОткрытияСессииСПодписью.Вставить("ПроверятьПараметрыТикета", Ложь);
	ПараметрыОткрытияСессииСПодписью.Вставить("ВерсияЭСФ", Неопределено);
	ПараметрыОткрытияСессииСПодписью.Вставить("ВерсияВС", Неопределено);
	ПараметрыОткрытияСессииСПодписью.Вставить("ИмяМодуля", "ESF");
	ПараметрыОткрытияСессииСПодписью.Вставить("ТребуетсяДополнительноеОткрытиеСессииВС", Ложь);
	ПараметрыОткрытияСессииСПодписью.Вставить("ОткрытьСессиюБезПроверок", Ложь);
	//++ НЕ ЭСФ
	ПараметрыОткрытияСессииСПодписью.Вставить("ВедетсяУчетПоИдентификаторамТоваровВС", ВСВызовСервера.ВедетсяУчетПоИдентификаторамТоваровВС());
	//-- НЕ ЭСФ
	Возврат ПараметрыОткрытияСессииСПодписью;
	
КонецФункции

// Возвращает массив с кодами товаров с признаком прослеживаемости в ГСВС.
//
// Возвращаемое значение:
//   Массив - содержит коды товаров подлежащих прослеживаемости
//
Функция ПолучитьКодыТоваровПрослеживаемости() Экспорт
	
	КодыТоваровПрослеживаемости = Новый Массив;
	КодыТоваровПрослеживаемости.Добавить("8418102001");
	КодыТоваровПрослеживаемости.Добавить("8418108001");
	КодыТоваровПрослеживаемости.Добавить("8418215100");
	КодыТоваровПрослеживаемости.Добавить("8418215900");
	КодыТоваровПрослеживаемости.Добавить("8418219100");
	КодыТоваровПрослеживаемости.Добавить("8418219900");
	КодыТоваровПрослеживаемости.Добавить("8418302001");
	КодыТоваровПрослеживаемости.Добавить("8418308001");
	КодыТоваровПрослеживаемости.Добавить("8418402001");
	КодыТоваровПрослеживаемости.Добавить("8418408001");
	КодыТоваровПрослеживаемости.Добавить("8418211000");
	
	Возврат КодыТоваровПрослеживаемости;
	
КонецФункции //ПолучитьКодыПрослеживаемыхТоваров

#Область МетодыОбщегоНазначения

// Служебная функция, предназначенная для получения описания типов строки, заданной длины.
//
// Параметры:
//  ДлинаСтроки - число, длина строки.
//
// Возвращаемое значение:
//  Объект "ОписаниеТипов" для строки указанной длины.
//
Функция ПолучитьОписаниеТиповСтроки(ДлинаСтроки) Экспорт

	Массив = Новый Массив;
	Массив.Добавить(Тип("Строка"));

	КвалификаторСтроки = Новый КвалификаторыСтроки(ДлинаСтроки, ДопустимаяДлина.Переменная);

	Возврат Новый ОписаниеТипов(Массив, , КвалификаторСтроки);

КонецФункции // ПолучитьОписаниеТиповСтроки()

// Служебная функция, предназначенная для получения описания типов числа, заданной разрядности.
// 
// Параметры:
//  Разрядность 			- число, разряд числа.
//  РазрядностьДробнойЧасти - число, разряд дробной части.
//
// Возвращаемое значение:
//  Объект "ОписаниеТипов" для числа указанной разрядности.
//
Функция ПолучитьОписаниеТиповЧисла(Разрядность,РазрядностьДробнойЧасти=0) Экспорт

	Массив = Новый Массив;

	Массив.Добавить(Тип("Число"));
	КвалификаторЧисла = Новый КвалификаторыЧисла(Разрядность,РазрядностьДробнойЧасти);

	Возврат Новый ОписаниеТипов(Массив, КвалификаторЧисла);

КонецФункции // ПолучитьОписаниеТиповЧисла()

Функция ПустоеЗначениеТипа(ЗаданныйТип) Экспорт

	Если ЗаданныйТип = Тип("Число") Тогда
		Возврат 0;

	ИначеЕсли ЗаданныйТип = Тип("Строка") Тогда
		Возврат "";

	ИначеЕсли ЗаданныйТип = Тип("Дата") Тогда
		Возврат '00010101000000';

	ИначеЕсли ЗаданныйТип = Тип("Булево") Тогда
		Возврат Ложь;

	Иначе
		Возврат Новый (ЗаданныйТип);

	КонецЕсли;

КонецФункции

//Преобразование строки в дату/время с указанием строки форматирования.
//При ошибке преобразования генерируется исключение.
//Допустимые значения в строке форматирования:
//    yyyy     - год полностью
//    yy        - год сокращённо
//    mm        - месяц
//    dd        - день
//    hh        - часы
//    nn        - минуты
//    ss        - секунды
//    Разделитель в исходной строке и строке форматирования может различаться.
//
// Параметры:
//  ДатаСтрока    - Строка - Исходная строка с датой
//  ФорматДаты    - Строка - Формат даты в переданной строке
//
// Возвращаемое значение:
//   Дата
//
// Пример:
// СтрокаВДатуВремя("05.04.20", "dd.mm.yy")
// СтрокаВДатуВремя("05.04.20 12:30:00, "dd.mm.yy hh:nn:ss")
// СтрокаВДатуВремя("05/04/20 12:30:00, "dd.mm.yy hh:nn:ss")
Функция СтрокаВДатуВремя(ДатаСтрока, ФорматДаты = "dd.mm.yyyy") Экспорт
	Если ЗначениеЗаполнено(ДатаСтрока) Тогда
		Попытка
			Годы = СтрНайти(ФорматДаты, "yyyy");
			Годы = ?(Годы = 0 , 0, Число(Сред(ДатаСтрока, Годы, 4)));
			Если Годы = 0 Тогда
				Годы = СтрНайти(ФорматДаты, "yy");
				Годы = ?(Годы = 0 , 0, Число("20" + Сред(ДатаСтрока, Годы, 2)));
			КонецЕсли;
			Месяцы     = СтрНайти(ФорматДаты, "mm");
			Дни     = СтрНайти(ФорматДаты, "dd");
			Часы     = СтрНайти(ФорматДаты, "hh");
			Минуты     = СтрНайти(ФорматДаты, "nn");
			Секунды = СтрНайти(ФорматДаты, "ss");
			
			Возврат Дата(
			?(Годы         = 0, 1, Годы),
			?(Месяцы     = 0, 1, Число(Сред(ДатаСтрока, Месяцы, 2))),
			?(Дни         = 0, 1, Число(Сред(ДатаСтрока, Дни, 2))),
			?(Часы         = 0, 0, Число(Сред(ДатаСтрока, Часы, 2))),
			?(Минуты     = 0, 0, Число(Сред(ДатаСтрока, Минуты, 2))),
			?(Секунды     = 0, 0, Число(Сред(ДатаСтрока, Секунды, 2)))
			)
		Исключение
			Текст = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(НСтр("ru='Ошибка преобразования строки %1 в дату по формату %2'"), ДатаСтрока, ФорматДаты);
			ВызватьИсключение Текст;
		КонецПопытки;
	Иначе
		Возврат Неопределено
	КонецЕсли;
КонецФункции // СтрокаВДатуВремя

///////////////////////////////////////////////////////////////////////////////
// Цвета

Функция ЦветСерый() Экспорт
	Возврат WebЦвета.Серый;	
КонецФункции

#КонецОбласти 

#Область ИдентификаторыТРУ

Функция СтруктураИдентификатораТовара(ИдентификаторТовара) Экспорт
	
	//пример полного идентификатора сожердащего все коды
	// физическая метка может отсутствовать
	//05.10.10.01-2701190000/8602026474128[JF1SJ9LC5JG385200]<3620>(957)
	//
	СтруктураИдентификатора = Новый Структура("КодКПВЭД, КодГСВСПолный, КодТНВЭД, МеткаТовара, КодGTIN", "","","","","");
	
	СтруктураИдентификатора.КодКПВЭД = ОпределитьКПВЭДПоИдентификатору(ИдентификаторТовара);
	СтруктураИдентификатора.КодТНВЭД = ОпределитьТНВЭДПоИдентификатору(ИдентификаторТовара);
	СтруктураИдентификатора.КодGTIN  = ОпределитьGTINПоИдентификатору(ИдентификаторТовара);
	
	Если ЗначениеЗаполнено(СтруктураИдентификатора.КодКПВЭД) Тогда
		
		Если ЗначениеЗаполнено(СтруктураИдентификатора.КодТНВЭД) Тогда
			КодГСВС = СтруктураИдентификатора.КодКПВЭД + "-" + СтруктураИдентификатора.КодТНВЭД;
			Если ЗначениеЗаполнено(СтруктураИдентификатора.КодGTIN) Тогда
				КодГСВС = КодГСВС + "/" + СтруктураИдентификатора.КодGTIN;
			КонецЕсли;
		Иначе			
			КодГСВС = СтруктураИдентификатора.КодКПВЭД;
		КонецЕсли;
		
		СтруктураИдентификатора.КодГСВСПолный = КодГСВС;
		
	КонецЕсли;	
			
	СтруктураИдентификатора.МеткаТовара = ОпределитьМеткуПоИдентификатору(ИдентификаторТовара);		
	     
	Возврат СтруктураИдентификатора;
	
КонецФункции	

Функция ОпределитьКПВЭДПоИдентификатору(ИдентификаторТовара) Экспорт
	
	КПВЭД = "";
	Если СтрДлина(ИдентификаторТовара) >= 11 Тогда
		
		КПВЭД = Сред(ИдентификаторТовара, 1, 11);
		
		Если Сред(КПВЭД, 3,1) = "." И Сред(КПВЭД, 6,1) = "." И Сред(КПВЭД, 9,1) = "." Тогда
			
			Попытка
			    ПерваяЧасть = Число(Сред(КПВЭД, 1,2));
				ВтораяЧасть = Число(Сред(КПВЭД, 4,2));
				ТретьяЧасть = Число(Сред(КПВЭД, 7,2));
				ЧетвертаяЧасть = Число(Сред(КПВЭД, 10,2));
			Исключение
				ПерваяЧасть = Неопределено;
				ВтораяЧасть = Неопределено;
				ТретьяЧасть = Неопределено;
				ЧетвертаяЧасть = Неопределено;
			КонецПопытки;
		КонецЕсли;
		
		Если ПерваяЧасть = Неопределено Или ВтораяЧасть = Неопределено Или ТретьяЧасть = Неопределено Или ЧетвертаяЧасть = Неопределено Тогда
			КПВЭД = "";
		КонецЕсли;
	КонецЕсли;
	
	Возврат КПВЭД;
	
КонецФункции

Функция ОпределитьТНВЭДПоИдентификатору(ИдентификаторТовара) Экспорт
	
	ТНВЭД = "";
	Если СтрДлина(ИдентификаторТовара) >= 22 Тогда
		
		ТНВЭД = Сред(ИдентификаторТовара, 13, 10);
				
		Попытка
			ТНВЭДЧисло = Число(ТНВЭД);
		Исключение
		    ТНВЭДЧисло = 0;
		КонецПопытки;
				
		Если ТНВЭДЧисло = 0 Тогда
			ТНВЭД = "";
		КонецЕсли;	
		
	КонецЕсли;
	
	Возврат ТНВЭД;
	
КонецФункции

Функция ОпределитьМеткуПоИдентификатору(ИдентификаторТовара) Экспорт
	
	Метка = "";
	
	ПерваяПозиция = СтрНайти(ИдентификаторТовара, "[");
	ВтораяПозиция = СтрНайти(ИдентификаторТовара, "]");
	
	Если ПерваяПозиция <> 0 И ВтораяПозиция <> 0 Тогда
		ЧислоСимволов = ВтораяПозиция - (ПерваяПозиция + 1); 
		                                              
		Метка = Сред(ИдентификаторТовара, ПерваяПозиция+1, ЧислоСимволов);
	КонецЕсли;	
		
	Возврат Метка;
	
КонецФункции

Функция ОпределитьGTINПоИдентификатору(ИдентификаторТовара) Экспорт
	//GTIN - Global Trade Item Number - Глобальный Номер Товарной Позиции
	ГНТП = "";
	Если СтрДлина(ИдентификаторТовара) >= 36 Тогда
		НачалоГНТП = СтрНайти(ИдентификаторТовара, "/");
		Если НачалоГНТП > 0 Тогда
			НачалоФизМетки = СтрНайти(ИдентификаторТовара, "[",, НачалоГНТП);
			НачалоИДТовара = СтрНайти(ИдентификаторТовара, "<",,НачалоГНТП);
			НачалоИДСклада = СтрНайти(ИдентификаторТовара, "(",,НачалоГНТП);
			
			
			Если НачалоФизМетки = 0 Тогда
				НачалоФизМетки = 10000;
			КонецЕсли;
			Если НачалоИДТовара = 0 Тогда
				НачалоИДТовара = 10000;
			КонецЕсли;
			Если НачалоИДСклада = 0 Тогда
				НачалоИДСклада = 10000;
			КонецЕсли;
			
			КонецГНТП = Мин(НачалоФизМетки, НачалоИДТовара, НачалоИДСклада);
			
			ГНТП = Сред(ИдентификаторТовара, НачалоГНТП+1, КонецГНТП - НачалоГНТП-1);
			
			Попытка
				ГНТПЧисло = Число(ГНТП);
			Исключение
				ГНТПЧисло = 0;
			КонецПопытки;
			
			Если ГНТПЧисло = 0 Тогда
				ГНТП = "";
			КонецЕсли;	
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ГНТП;
	
КонецФункции

#КонецОбласти

#Область КриптопровайдерПодпись

Функция РазобратьПоУзламKeyInfo(KeyInfo, Узел = Неопределено)

	ЗначенияКлючей = Новый Структура;
	KeyInfo = СтрЗаменить(KeyInfo, "KeyInfo(", ""); // Убрали KeyInfo(, для чтения с сразу с тега
	МассивKeyInfo = СтрРазделить(KeyInfo, ",", Ложь); // Так как разделитель между тэгами запятая, так понимаем что начался новый тэг
	
	Для каждого Узел Из МассивKeyInfo Цикл
	
		Поз = СтрНайти(Узел, "=",,,1);
		
		Если Поз <> 0 Тогда
		
			Ключ = СокрЛП(Лев(Узел, Поз-1));
			Значение = Сред(Узел, Поз+1, СтрДлина(Узел) - (Поз));
			
			// Именно в тэге "pem" содержится сертификат подписи и у него надо обрезать лишнее
			Если Ключ = "pem" Тогда
				// 30 начальная позиция среза-----BEGIN CERTIFICATE-----¶
				// 64 конечная позиция среза¶-----END CERTIFICATE-----¶)
				НачалоСертификата = 0;
				КонецСертификата = 0;
				Если СтрНайти(Значение, "-----BEGIN CERTIFICATE-----") <> 0 Тогда
					НачалоСертификата = СтрНайти(Значение, "-----BEGIN CERTIFICATE-----") + СтрДлина("-----BEGIN CERTIFICATE-----") + 1;
					КонецСертификата = СтрНайти(Значение, "-----END CERTIFICATE-----") - НачалоСертификата - 1;
				КонецЕсли;
				Значение = ?(НачалоСертификата = 0, СокрЛП(Значение), СокрЛП(Сред(Значение, НачалоСертификата, КонецСертификата)));
			КонецЕсли; 
			
			// Чтоб в структуру не включались пустые тэги и их значение
			Если ЗначениеЗаполнено(Ключ) И ЗначениеЗаполнено(Значение) Тогда
				ЗначенияКлючей.Вставить(Ключ, Значение);
			КонецЕсли;
			
		КонецЕсли;
	
	КонецЦикла;
	
	Возврат ЗначенияКлючей;

КонецФункции

Функция РазобратьСтрокуСертификата(СоставнаяСтрокаДанных) Экспорт
	
	ЗначенияПолей = Новый Структура;
	Попытка
		//Определяем разделить строки
		РазделительСтроки = ПолучитьРазделительДанныхСертификата(СоставнаяСтрокаДанных);
		МассивПолей = СтрРазделить(СоставнаяСтрокаДанных, РазделительСтроки, Ложь); 
		
		Для каждого Поле Из МассивПолей Цикл
			
			Поз = СтрНайти(Поле, "=",,,1);
			
			Если Поз <> 0 Тогда
				
				Ключ = СокрЛП(Лев(Поле, Поз-1));
				Значение = Сред(Поле, Поз+1, СтрДлина(Поле) - (Поз));
				
				// Чтоб в структуру не включались пустые тэги и их значение
				Если ЗначениеЗаполнено(Ключ) И ЗначениеЗаполнено(Значение) Тогда
					ЗначенияПолей.Вставить(Ключ, Значение);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
	Исключение
		ТекстСообщения = нСтр("ru='Не удалось разобрать некоторые данные сертификата. Подробности смотрите в журнале регистрации.'");
		ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		
		ТекстОшибки = НСтр("ru='Не удалось разобрать строку сертификата: %1.
			| Ошибка: %2'");
		ТекстОшибки = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстОшибки, СоставнаяСтрокаДанных, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЭСФВызовСервера.СоздатьЗаписьЖурналаРегистрации(
				НСтр("ru = 'Ошибка разбора строки сертификата'"), "Ошибка", , , ТекстОшибки);
	КонецПопытки;
	
	Возврат ЗначенияПолей;
	
КонецФункции

Функция ПолучитьРазделительДанныхСертификата(СтрокаДанных)
	
	РазделительСтроки = ",";
	СтрокаВНижнемРегистре = НРег(СтрокаДанных);
	ОбязательноеПоле = "serialnumber";
	ПозицияРазделителя = СтрНайти(СтрокаВНижнемРегистре, ОбязательноеПоле);
	
	Если ПозицияРазделителя = 1 Тогда
		Если СтрНайти(СтрокаВНижнемРегистре, "/") > 0 Тогда
			РазделительСтроки = "/";
		ИначеЕсли СтрНайти(СтрокаВНижнемРегистре, ",") > 0 Тогда
			РазделительСтроки = ",";
		КонецЕсли;
	Иначе
		НеПустоеЗначениеРазделителя = Неопределено;
		
		Для Индекс = 1 По ПозицияРазделителя - 1 Цикл
			НеПустоеЗначениеРазделителя = Сред(СтрокаВНижнемРегистре, ПозицияРазделителя-Индекс, 1);
			Если НеПустоеЗначениеРазделителя <> " " Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ЗначениеЗаполнено(НеПустоеЗначениеРазделителя) Тогда
			РазделительСтроки = НеПустоеЗначениеРазделителя;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат РазделительСтроки;
	
КонецФункции

Функция Сертификат_ТипКлючаИзСвойствНовый(Знач ИмяАлгоритма) Экспорт
	
	ТипКлюча = "";
	
	Если ИмяАлгоритма <> Неопределено Тогда
		Если Найти(ВРег(ИмяАлгоритма), "RSA") <> 0 Тогда
			ТипКлюча = КлючRSA();
		ИначеЕсли Найти(ВРег(ИмяАлгоритма), "GOST") <> 0 Тогда
			ТипКлюча = КлючGOST();
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТипКлюча;
	
КонецФункции

Функция КлючGOST() Экспорт 
	
	Возврат "GOST";
	
КонецФункции

Функция КлючRSA() Экспорт
	
	Возврат "RSA";
	
КонецФункции

Функция СоздатьЭЦПXML(Знач ДанныеДляПодписиJSON, БИН, Сервис, ДополнительныеПараметры = Неопределено, ПредставлениеОрганизации = "", СлужебныеДанные = "") Экспорт
	
	Попытка
		
		Криптопровайдер = КриптографияКлиентСервер.НовыйКриптопровайдерWSSocket();
		ОтветСокета = КриптоПровайдер.GetXMLSign(БИН, Сервис, ДополнительныеПараметры , ДанныеДляПодписиJSON, "","");	
		СлужебныеДанные = КриптоПровайдер.ServiceDataTicket;
		
		ОтветСокета = ОбработатьОтветСокета(ОтветСокета, Криптопровайдер);
		
		Возврат ОтветСокета;
		//обработать помимо ответа криптосокета - КриптоПровайдер.КодОшибки, КриптоПровайдер.ТекстОшибки
		//то есть предлагаю возвращать не только ответ сокета, но ещё и кодОшибки + ТекстОшибки криптопровайдера, например структурой и уже там его анализировать
		//а на выходе уже анализировать как в процедуре ОбработатьОтветСокета (если есть Code и он 200 - порядок, иначе проанализировать и ответ сокета и крипто)
	Исключение
		
		
		Ошибка = ОшибкаКриптопровайдера(Криптопровайдер, ИнформацияОбОшибке());
		
		ЭСФВызовСервера.СоздатьЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка выполнения'"), "Ошибка", , , Ошибка.ПодробноеПредставление);
		
		ТекстИсключения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(НСтр(
		"ru = 'Не удалось сформировать XML подпись.
		|%1'"), Ошибка.КраткоеПредставление);
		
		ВызватьИсключение ТекстИсключения;
		
	КонецПопытки;
	
КонецФункции

Функция СоздатьЭЦПXMLs(Знач ДанныеДляПодписиJSON, БИН, Сервис, ДополнительныеПараметры = Неопределено, ПредставлениеОрганизации = "", СлужебныеДанные = "") Экспорт
	
	Попытка
		
		Криптопровайдер = КриптографияКлиентСервер.НовыйКриптопровайдерWSSocket();
		ОтветСокета = КриптоПровайдер.GetXMLsSign(БИН, Сервис, ДополнительныеПараметры , ДанныеДляПодписиJSON, "","");	
		СлужебныеДанные = КриптоПровайдер.ServiceDataTicket;
		
		
		ОтветСокета = ОбработатьОтветСокета(ОтветСокета, Криптопровайдер);
		
		Возврат ОтветСокета;
		
	Исключение
		
		Ошибка = ОшибкаКриптопровайдера(Криптопровайдер, ИнформацияОбОшибке());
		
		ЭСФВызовСервера.СоздатьЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка выполнения'"), "Ошибка", , , Ошибка.ПодробноеПредставление);
		
		ТекстИсключения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(НСтр(
		"ru = 'Не удалось сформировать XML подпись.
		|%1'"), Ошибка.КраткоеПредставление);
		
		ВызватьИсключение ТекстИсключения;
		
	КонецПопытки;
	
КонецФункции

Функция СоздатьЭЦПСырая(Знач ДанныеДляПодписиJSON, БИН, Сервис, ДополнительныеПараметры = Неопределено, ПредставлениеОрганизации = "", СлужебныеДанные = "") Экспорт
	
	Попытка
		
		Криптопровайдер = КриптографияКлиентСервер.НовыйКриптопровайдерWSSocket();
		ОтветСокета = КриптоПровайдер.GetRawSign(БИН, Сервис, ДополнительныеПараметры , ДанныеДляПодписиJSON);	
		СлужебныеДанные = КриптоПровайдер.ServiceDataTicket;
		
		ОтветСокета = ОбработатьОтветСокета(ОтветСокета, Криптопровайдер);
		
		Возврат ОтветСокета;
		
	Исключение
		
		Ошибка = ОшибкаКриптопровайдера(Криптопровайдер, ИнформацияОбОшибке());
		
		ЭСФВызовСервера.СоздатьЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка выполнения'"), "Ошибка", , , Ошибка.ПодробноеПредставление);
		
		ТекстИсключения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(НСтр(
		"ru = 'Не удалось сформировать XML подпись.
		|%1'"), Ошибка.КраткоеПредставление);
		
		ВызватьИсключение ТекстИсключения;
		
	КонецПопытки;
	
КонецФункции

Функция СоздатьЭЦПСыраяМассив(Знач ДанныеДляПодписиJSON, БИН, Сервис, ДополнительныеПараметры = Неопределено, ПредставлениеОрганизации = "", СлужебныеДанные = "") Экспорт
	
	Попытка
		
		Криптопровайдер = КриптографияКлиентСервер.НовыйКриптопровайдерWSSocket();
		ОтветСокета = КриптоПровайдер.GetRawsSign(БИН, Сервис, ДополнительныеПараметры , ДанныеДляПодписиJSON);
		СлужебныеДанные = КриптоПровайдер.ServiceDataTicket;
		
		ОтветСокета = ОбработатьОтветСокета(ОтветСокета, Криптопровайдер);
		
		Возврат ОтветСокета;
		
	Исключение
		
		Ошибка = ОшибкаКриптопровайдера(Криптопровайдер, ИнформацияОбОшибке());
		
		ЭСФВызовСервера.СоздатьЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка выполнения'"), "Ошибка", , , Ошибка.ПодробноеПредставление);
		
		ТекстИсключения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(НСтр(
		"ru = 'Не удалось сформировать XML подпись.
		|%1'"), Ошибка.КраткоеПредставление);
		
		ВызватьИсключение ТекстИсключения;
		
	КонецПопытки;
	
КонецФункции

//Функция предназначена для обработки сообщений об ошибке, полученных со стороны компоненты
Функция ОбработатьСообщениеОбОшибке(ОтветСокетаJson) Экспорт
	СообщениеОбОшибке = "";
	Если ОтветСокетаJson = Неопределено Тогда
		СообщениеОбОшибке = НСтр("ru='Возникла проблема при использовании NCALayer. Возможно, программа не запущена, или не установлен модуль ""1С-Рейтинг ЭДО""'");
	Иначе
		Если ОтветСокетаJson.Свойство("Code") Тогда
			Если ОтветСокетаJson.code = "500" Тогда
				Если ОтветСокетаJson.Свойство("message") Тогда
					Если ОтветСокетаJson.message = "action.canceled" Тогда
						СообщениеОбОшибке = НСтр("ru='Отмена выбора ключа подписи.'");
					Иначе
						СообщениеОбОшибке = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(НСтр("ru='Тех. информация: %1"), ОтветСокетаJson.message);
					КонецЕсли;
				Иначе
					СообщениеОбОшибке = НСтр("ru='Неквалифицированная ошибка вызова внешней компоненты.'");
				КонецЕсли;
			ИначеЕсли ОтветСокетаJson.code = "101" Тогда
				СообщениеОбОшибке = НСтр("ru='Ошибка перекодировки данных.'");
			ИначеЕсли ОтветСокетаJson.code = "201" Тогда
				СообщениеОбОшибке = НСтр("ru='Ошибка входных параметров.'");
			ИначеЕсли ОтветСокетаJson.code = "300" Тогда
				СообщениеОбОшибке = НСтр("ru='Ошибка при работе с сокетом.'");
			ИначеЕсли ОтветСокетаJson.Свойство("message") Тогда
				СообщениеОбОшибке = ОтветСокетаJson.message;
			КонецЕсли;
		Иначе
			СообщениеОбОшибке = НСтр("ru='Ошибка вызова внешней компоненты.'");
		КонецЕсли;
	КонецЕсли;
	
	//обработка пустого сообщения
	Если СообщениеОбОшибке = "" Тогда
		СообщениеОбОшибке = НСтр("ru='Ошибка при работе внешней компоненты.'");
	КонецЕсли;
	Возврат СообщениеОбОшибке;
КонецФункции

Функция ПолучитьДанныеСертификатаЧерезНЦА(БИН, Сервис, ДополнительныеПараметры = "") Экспорт
	
	Попытка
		
		Криптопровайдер = КриптографияКлиентСервер.НовыйКриптопровайдерWSSocket();
		ОтветСокета = КриптоПровайдер.ПолучитьСвойстваСертификата(БИН, Сервис, ДополнительныеПараметры);
		
		Если ПустаяСтрока(ОтветСокета) Тогда
			ВызватьИсключение ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(НСтр("ru = 'При получении данных о сертификате возникла ошибка: %1'"),Криптопровайдер.ТекстОшибки);
		КонецЕсли;
				
		ОтветСтруктура = ЭСФВызовСервера.ЭСФ_ПрочитатьЗначениеJSON(ОтветСокета);
		
		Если ОтветСтруктура.code <> "200" Тогда
			ВызватьИсключение ОбработатьСообщениеОбОшибке(ОтветСтруктура);
		КонецЕсли;
		
		Возврат ОтветСтруктура;
		
	Исключение
		
		Ошибка = ОшибкаКриптопровайдера(Криптопровайдер, ИнформацияОбОшибке());
		
		ЭСФВызовСервера.СоздатьЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка выполнения'"), "Ошибка", , , Ошибка.ПодробноеПредставление);
		
		ТекстИсключения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(НСтр(
		"ru = 'Не удалось получить данные по сертификату.
		|%1'"),Ошибка.КраткоеПредставление);
		
		ВызватьИсключение ТекстИсключения;
		
	КонецПопытки;	
	
КонецФункции

Функция ПолучитьДанныеСертификатаВнешняяКриптография(БИН, Сервис, ПараметрыВызова, ПараметрыКлюча) Экспорт
	ДанныеСертификата = ЭСФКлиентСервер.ПолучитьДанныеСертификатаЧерезНЦА(БИН, Сервис, ПараметрыВызова);
	ЭСФКлиентСервер.УдалитьВременныйФайлКлюча(ПараметрыКлюча);
	Возврат ДанныеСертификата;
КонецФункции

//Получает дополнительную информацию компоненты криптографии
//
Функция ПолучитьДополнительныеСведенияКриптопровайдера() Экспорт
	
	Попытка
		
		Криптопровайдер = КриптографияКлиентСервер.НовыйКриптопровайдерWSSocket();
		ОтветСокета = КриптоПровайдер.ДополнительныеСведения();
		
		Если ПустаяСтрока(ОтветСокета) Тогда
			ВызватьИсключение ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(НСтр("ru = 'При получении данных о сертификате возникла ошибка: %1'"),Криптопровайдер.ТекстОшибки);
		КонецЕсли;
		
		ОтветСтруктура = ЭСФВызовСервера.ЭСФ_ПрочитатьЗначениеJSON(ОтветСокета);
		
		Возврат ОтветСтруктура;
		
	Исключение
		
		Ошибка = ОшибкаКриптопровайдера(Криптопровайдер, ИнформацияОбОшибке());
		
		ЭСФВызовСервера.СоздатьЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка выполнения'"), "Ошибка", , , Ошибка.ПодробноеПредставление);
		
		ТекстИсключения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(НСтр(
		"ru = 'Не удалось получить данные по сертификату.
		|%1'"),Ошибка.КраткоеПредставление);
		
		ВызватьИсключение ТекстИсключения;
		
	КонецПопытки;	
	
КонецФункции

#Область ОшибкиКриптографии

Функция ОшибкаКриптопровайдера(Криптопровайдер, ИнформацияОбОшибке) Экспорт
	
	Ошибка = Новый Структура;
	
	Если Криптопровайдер = Неопределено Тогда
		Ошибка.Вставить("Версия", "");
		Ошибка.Вставить("КодОшибки", "");
		Ошибка.Вставить("ОписаниеОшибки", "");
	Иначе
		Ошибка.Вставить("Версия", Криптопровайдер.Версия);
		Ошибка.Вставить("КодОшибки", Криптопровайдер.КодОшибки);
		Ошибка.Вставить("ОписаниеОшибки", Криптопровайдер.ТекстОшибки);
	КонецЕсли;
	
	Ошибка.Вставить("ИнформацияОбОшибке", ИнформацияОбОшибке);
	
	ТипОшибки = ТипОшибкиКриптопровайдера(Ошибка);
	Ошибка.Вставить("ТипОшибки", ТипОшибки);
	
	ПредставленияОшибки = ПредставленияОшибкиКриптопровайдера(Ошибка);
	Ошибка.Вставить("КраткоеПредставление", ПредставленияОшибки.КраткоеПредставление);
	Ошибка.Вставить("ПодробноеПредставление", ПредставленияОшибки.ПодробноеПредставление);
	
	Возврат Ошибка;
	
КонецФункции

//Обрабатывает ответ от криптопровайдера
//
Функция ОбработатьОтветСокета(ОтветСокетаJson, КриптоПровайдер)
		
	Если ТипЗнч(ОтветСокетаJson) = Тип("Строка") И Не ПустаяСтрока(ОтветСокетаJson) Тогда
		ОтветСокетаJson = ЭСФВызовСервера.ЭСФ_ПрочитатьЗначениеJSON(ОтветСокетаJson);
	ИначеЕсли ТипЗнч(ОтветСокетаJson) = Тип("Строка") И ПустаяСтрока(ОтветСокетаJson) Тогда
		ОтветСокетаJson = Новый Структура;
	ИначеЕсли Не ТипЗнч(ОтветСокетаJson) = Тип("Структура") Тогда
		ЭСФКлиентСервер.СообщитьПользователю(ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(НСтр("ru = 'Операция не выполнена. %1 %2'"),СокрЛП(Строка(КриптоПровайдер.КодОшибки)),КриптоПровайдер.ТекстОшибки));
		Возврат ОтветСокетаJson;
	КонецЕсли;
	
	ОтветСокетаJson.Вставить("ТекстОшибкиКриптопровайдера", КриптоПровайдер.ТекстОшибки);
	
	Если КриптоПровайдер.КодОшибки > 0 Тогда
		ОтветСокетаJson.ТекстОшибкиКриптопровайдера = ОтветСокетаJson.ТекстОшибкиКриптопровайдера + " Код ВК: " + Строка(КриптоПровайдер.КодОшибки) + ".";
	КонецЕсли;
	
	Если ОтветСокетаJson.Свойство("Code") и ОтветСокетаJson.code = "200" Тогда
		Возврат ОтветСокетаJson;
	ИначеЕсли НЕ ОтветСокетаJson.Свойство("Code") Тогда
		ЭСФКлиентСервер.СообщитьПользователю(ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(НСтр("ru = 'Операция не выполнена. %1'"), СокрЛП(ОтветСокетаJson.ТекстОшибкиКриптопровайдера)));
	Иначе
		ЭСФКлиентСервер.СообщитьПользователю(СокрЛП(ОтветСокетаJson.ТекстОшибкиКриптопровайдера + " " + ОбработатьСообщениеОбОшибке(ОтветСокетаJson)));
	КонецЕсли;
	
	Возврат ОтветСокетаJson;
	
КонецФункции

Функция ТипОшибкиКриптопровайдера(Ошибка)
	
	ТипОшибки = Ошибка_НеизвестнаяОшибка();
	
	Если Найти(Ошибка.ОписаниеОшибки, "0D0680A8") Тогда
		ТипОшибки = Ошибка_НеверныйФайл();
	ИначеЕсли Найти(Ошибка.ОписаниеОшибки, "23076071") Тогда
		ТипОшибки = Ошибка_НеверныйПароль();
	Иначе
		ТипОшибки = Ошибка_НеизвестнаяОшибка();
	КонецЕсли;
	
	Возврат ТипОшибки;
	
КонецФункции

Функция ПредставленияОшибкиКриптопровайдера(Ошибка)
	
	ПредставленияОшибки = Новый Структура;
	
	КраткоеПредставление = КраткоеПредставлениеОшибкиКриптопровайдера(Ошибка);
	КраткоеПредставление = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 . Подробности ошибки смотрите в журнале регистрации.'"),КраткоеПредставление);
	ПредставленияОшибки.Вставить("КраткоеПредставление", КраткоеПредставление);
	
	ПодробноеПредставление = ПодробноеПредставлениеОшибкиКриптопровайдера(Ошибка);
	ПредставленияОшибки.Вставить("ПодробноеПредставление", ПодробноеПредставление);
	
	Возврат ПредставленияОшибки;
	
КонецФункции

Функция КраткоеПредставлениеОшибкиКриптопровайдера(Ошибка)
	
	КраткоеПредставление = "";
	
	Если Ошибка.ТипОшибки = Ошибка_НеверныйФайл() Тогда
		КраткоеПредставление = НСтр("ru = 'Возможно выбранный файл не является файлом сертификата ""*.p12"".'");
	ИначеЕсли Ошибка.ТипОшибки = Ошибка_НеверныйПароль() Тогда
		КраткоеПредставление = НСтр("ru = 'Возможно был введен некорректный пароль для файла сертификата.'");
	Иначе	
		КраткоеПредставление = КраткоеПредставлениеОшибки(Ошибка.ИнформацияОбОшибке);
	КонецЕсли;
	
	Возврат КраткоеПредставление;
	
КонецФункции

Функция ПодробноеПредставлениеОшибкиКриптопровайдера(Ошибка)
	
	КраткоеПредставление = КраткоеПредставлениеОшибкиКриптопровайдера(Ошибка);
		
	Если ПустаяСтрока(Ошибка.Версия) И ПустаяСтрока(Ошибка.КодОшибки) И ПустаяСтрока(Ошибка.ОписаниеОшибки) Тогда
		ИнформацияИзКриптопровайдера = "";
	Иначе
		ИнформацияИзКриптопровайдера = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(НСтр("ru = 'Версия криптографии: %1, Код ошибки: %2, Описание ошибки: %3'"),Ошибка.Версия,Ошибка.КодОшибки,Ошибка.ОписаниеОшибки);		
	КонецЕсли;	
		
	ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(Ошибка.ИнформацияОбОшибке);
		
	ПодробноеПредставление = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(НСтр(
	"ru = '%1
	|%2
	|%3'"),КраткоеПредставление,ИнформацияИзКриптопровайдера,ПодробноеПредставлениеОшибки);
	
	Возврат ПодробноеПредставление;
	
КонецФункции

Функция Ошибка_НеверныйПароль() Экспорт
	Возврат "НеверныйПароль";
КонецФункции

Функция Ошибка_НеверныйФайл() Экспорт
	Возврат "НеверныйФайл";
КонецФункции

Функция Ошибка_НеизвестнаяОшибка() Экспорт
	Возврат "НеизвестнаяОшибка";
КонецФункции

#КонецОбласти

Функция ПодготовитьПараметрыКлючаДляПодписи(ДанныеКлючаЭЦП) Экспорт
	
	ПараметрыКлюча = Неопределено;
	Если ЭСФВызовСервера.ИспользоватьВнешнююКриптографиюДляКомпоненты() Тогда
		Если ЭСФВызовСервераПовтИсп.ВыполнятьКриптографическиеОперацииНаКлиенте() Тогда
			Если ТипЗнч(ДанныеКлючаЭЦП) = Тип("Структура") И ДанныеКлючаЭЦП.Свойство("АдресКлюча") И ЗначениеЗаполнено(ДанныеКлючаЭЦП.АдресКлюча) Тогда
				ПараметрыКлюча = СформироватьПараметрыКлюча(ДанныеКлючаЭЦП);	
			Иначе
				ПараметрыКлюча = СохранитьКлючВФайл(ДанныеКлючаЭЦП);
			КонецЕсли;
		Иначе
			ПараметрыКлюча = ЭСФВызовСервера.СохранитьКлючВФайл(ДанныеКлючаЭЦП);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПараметрыКлюча;
	
КонецФункции

Функция СохранитьКлючВФайл(ДанныеКлючаЭЦП) Экспорт
	
	ПараметрыКлюча = Неопределено;
	
	#Если Не ВебКлиент Тогда
		ДвоичныеДанныеКлюча = Base64Значение(ДанныеКлючаЭЦП.КлючBase64);
		ИмяФайлаКлюча = ПолучитьИмяВременногоФайла("p12");
		ДвоичныеДанныеКлюча.Записать(ИмяФайлаКлюча);
		ПараметрыКлюча = Новый Структура;
		ПараметрыКлюча.Вставить("АдресКлюча" , ИмяФайлаКлюча);
		ПараметрыКлюча.Вставить("ПарольКлюча", ДанныеКлючаЭЦП.Пароль);
		
		ДанныеКлючаЭЦП.Вставить("АдресКлюча" , ИмяФайлаКлюча);
		ДанныеКлючаЭЦП.Вставить("КлючВременныйФайл" , Истина);
		
	#КонецЕсли
	
	Возврат ПараметрыКлюча;
	
КонецФункции

Функция СформироватьПараметрыКлюча(ДанныеКлючаЭЦП) Экспорт
	
	ПараметрыКлюча = Неопределено;
	
	ПараметрыКлюча = Новый Структура;
	ПараметрыКлюча.Вставить("АдресКлюча" , ДанныеКлючаЭЦП.АдресКлюча);
	ПараметрыКлюча.Вставить("ПарольКлюча", ДанныеКлючаЭЦП.Пароль);
	ПараметрыКлюча.Вставить("КлючВременныйФайл" , Ложь);
			
	Возврат ПараметрыКлюча;
	
КонецФункции


Процедура УдалитьВременныйФайлКлюча(ДанныеКлючаЭЦП) Экспорт
	
	Если ТипЗнч(ДанныеКлючаЭЦП) = Тип("Структура") 
		И ДанныеКлючаЭЦП.Свойство("КлючВременныйФайл") 
		И Не ДанныеКлючаЭЦП.КлючВременныйФайл Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭСФВызовСервераПовтИсп.ВыполнятьКриптографическиеОперацииНаКлиенте() Тогда
		УдалитьФайлКлюча(ДанныеКлючаЭЦП);
	Иначе
		ЭСФВызовСервера.УдалитьФайлКлюча(ДанныеКлючаЭЦП);
	КонецЕсли;
	
КонецПроцедуры

Процедура УдалитьФайлКлюча(ДанныеКлючаЭЦП) Экспорт
	
	Если ЗначениеЗаполнено(ДанныеКлючаЭЦП) И ДанныеКлючаЭЦП.Свойство("АдресКлюча") Тогда
		УдалитьВременныеФайлы(ДанныеКлючаЭЦП.АдресКлюча);
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьФИОИзОписанияСертификата(ОписаниеСертификата) Экспорт
	
	//ФИО владельца: ФАМИЛИЯ ИМЯ ОТЧЕСТВО¶ИИН владельца:
	КонецВхож = Найти(ОписаниеСертификата, "ИИН владельца:");
	ТолькоФИО = Лев(ОписаниеСертификата, КонецВхож - 2);
	НачалоФИО = Найти(ТолькоФИО, "ФИО владельца:") - 1;
	ТолькоФИО = Прав(ТолькоФИО, СтрДлина(ТолькоФИО)-НачалоФИО);
	ТолькоФИО = СтрЗаменить(ТолькоФИО, "ФИО владельца: ", "");

	Возврат ТолькоФИО;
	
КонецФункции

Процедура СообщитьОбИспользованииСервернойКриптографии() Экспорт
	
	ТекстСообщения = НСтр("ru = 'Включен режим криптографии ""На сервере 1С:Предприятие"", поддержка которого прекращается. Рекомендуется обратиться к администратору для изменения настроек.'");
	ЭСФКлиентСервер.СообщитьПользователю(ТекстСообщения);
	
КонецПроцедуры

#КонецОбласти