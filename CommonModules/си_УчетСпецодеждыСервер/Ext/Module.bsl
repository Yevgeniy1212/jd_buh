
#Область ПрограммныйИнтерфейс

// Формирует текст сообщения, подставляя значения
// параметров в шаблоны сообщений.
//
// Параметры
//  ВидПоля       - Строка - может принимать значения:
//                  Поле, Колонка, Список
//  ВидСообщения  - Строка - может принимать значения:
//                  Заполнение, Корректность
//  Параметр1     - Строка - имя поля
//  Параметр2     - Строка - номер строки
//  Параметр3     - Строка - имя списка
//  Параметр4     - Строка - текст сообщения о некорректности заполнения
//
// Возвращаемое значение:
//   Строка - текст сообщения
//
Функция ПолучитьТекстСообщения(ВидПоля = "Поле", ВидСообщения = "Заполнение",
	Параметр1 = "", Параметр2 = "",	Параметр3 = "", Параметр4 = "") Экспорт
	
	ТекстСообщения = "";
	
	Если ВРег(ВидПоля) = "ПОЛЕ" Тогда
		Если ВРег(ВидСообщения) = "ЗАПОЛНЕНИЕ" Тогда
			Шаблон = НСтр("ru = 'Поле ""%1"" не заполнено'");
		ИначеЕсли ВРег(ВидСообщения) = "КОРРЕКТНОСТЬ" Тогда
			Шаблон = НСтр("ru = 'Поле ""%1"" заполнено некорректно.
			|
			|%4'");
		КонецЕсли;
	ИначеЕсли ВРег(ВидПоля) = "КОЛОНКА" Тогда
		Если ВРег(ВидСообщения) = "ЗАПОЛНЕНИЕ" Тогда
			Шаблон = НСтр("ru = 'Не заполнена колонка ""%1"" в строке %2 списка ""%3""'");
		ИначеЕсли ВРег(ВидСообщения) = "КОРРЕКТНОСТЬ" Тогда
			Шаблон = НСтр("ru = 'Некорректно заполнена колонка ""%1"" в строке %2 списка ""%3"".
			|
			|%4'");
		КонецЕсли;
	ИначеЕсли ВРег(ВидПоля) = "СПИСОК" Тогда
		Если ВРег(ВидСообщения) = "ЗАПОЛНЕНИЕ" Тогда
			Шаблон = НСтр("ru = 'Не введено ни одной строки в список ""%3""'");
		ИначеЕсли ВРег(ВидСообщения) = "КОРРЕКТНОСТЬ" Тогда
			Шаблон = НСтр("ru = 'Некорректно заполнен список ""%3"".
			|
			|%4'");
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, Параметр1, Параметр2, Параметр3, Параметр4);
	
КонецФункции // ПолучитьТекстСообщения()

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ОбщиеПроцедуры

Функция НомерВерсииКонфигурации() Экспорт
	Возврат "3.0.8.1";
КонецФункции

Функция ПолучитьВедениеУчетаПоФизЛицам() Экспорт
	Возврат Константы.си_ВестиУчетПоФизическимЛицам.Получить();
КонецФункции

Процедура ИнициализацияНаименованияСотрудникФизлицо(Элемент) Экспорт
	УчетПоФизЛицам 				= ПолучитьВедениеУчетаПоФизЛицам();
	Если УчетПоФизЛицам Тогда
		Элемент.Заголовок 		= "Физ. лицо";
		Если ТипЗнч(Элемент) 	= Тип("ГруппаФормы") Тогда
			Элемент.Заголовок 	= "Физические лица";
		КонецЕсли;
	Иначе
		Элемент.Заголовок 		= "Сотрудник";
		Если ТипЗнч(Элемент) 	= Тип("ГруппаФормы") Тогда
			Элемент.Заголовок 	= "Сотрудники";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьЗначенияСпискаСостояний() Экспорт
	
	ВедетсяУчетПоХарактеристикам = си_УчетСпецодеждыСерверПовтИсп.ВедетсяУчетПоХарактеристикам();
	
	СписокСостоянийСпецодежды = Новый Массив;
	СписокСостоянийСпецодежды.Добавить(Перечисления.си_СостоянияМатериалов.НаходящиесяВЭксплуатации);
	СписокСостоянийСпецодежды.Добавить(Перечисления.си_СостоянияМатериалов.НаходящиесяНаСкладе);
	Если ВедетсяУчетПоХарактеристикам Тогда 
		СписокСостоянийСпецодежды.Добавить(Перечисления.си_СостоянияМатериалов.НаходящиесяНаСкладеНовая);
	КонецЕсли;
	
	Возврат СписокСостоянийСпецодежды;
КонецФункции

#КонецОбласти

// Проверка на отрицательный остаток
//
Функция ПроверкаНаОтрицательныйОстаток(Регистр,Организация,Склад, СписокНоменклатуры, Дата, 
	СтруктурноеПодразделение,ПодразделениеОрганизации,Сотрудник,ДокументПередачи,
	ФизЛицо,НазначениеИспользования,СписокХарактеристик,
	ОстаточныйСрокИспользования = 0, ВидУчетаНУ, СостояниеСпецодежды = Неопределено, 
	ДокументВозврата = Неопределено) Экспорт
	
	Возврат си_ПроцедурыМеханизмаЗащиты.ПроверкаНаОтрицательныйОстаток(Регистр,Организация,Склад, СписокНоменклатуры, Дата, 
	СтруктурноеПодразделение,ПодразделениеОрганизации,Сотрудник,ДокументПередачи,
	ФизЛицо,НазначениеИспользования,СписокХарактеристик,
	ОстаточныйСрокИспользования, ВидУчетаНУ, СостояниеСпецодежды, ДокументВозврата)
КонецФункции

// Проверка заполнения структурной единицы
//
Функция ПроверкаЗаполненияСтруктурнойЕдиницы(Организация,СтруктурноеПодразделение) Экспорт
	ОшибкаЗаполнения = Истина;
	Если ЗначениеЗаполнено(Организация) Тогда
		ОшибкаЗаполнения = Ложь;
	КонецЕсли;
	Если ЗначениеЗаполнено(СтруктурноеПодразделение) Тогда
		ОшибкаЗаполнения = Ложь;
	КонецЕсли;
	Если ОшибкаЗаполнения Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Поле ""Структурная единица"" не заполнено";
		Сообщение.Сообщить();
		
	КонецЕсли;
	
	Возврат ОшибкаЗаполнения;
КонецФункции

// Проверка заполнения структурной единицы
//
Процедура ПроверкаЗаполненияСкладаВТабличнойЧасти(ТЧ, Отказ) Экспорт
	Для Каждого СтрокаТЧ Из ТЧ Цикл
		Если СтрокаТЧ.Состояние = Перечисления.си_СостоянияМатериалов.НаходящиесяНаСкладе Тогда
			Если Не ЗначениеЗаполнено(СтрокаТЧ.Склад) Тогда 
				Отказ = Истина;
				
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "В Строке №" + СтрокаТЧ.НомерСтроки + " не заполнен склад для материалов б/у";
				Сообщение.Сообщить();
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// Процедура удаляет строки таблицы по переданному в параметре структуре
//  отбора.
//
// Параметры:
//  ТаблицаЗначений - таблица значений, в которой необходиммо удалить стоки
//    по отбору;
//  СтруктураОтбора - Структура - струтктура отбора строк в таблице значений.
//
Процедура УдалитьСтрокиТаблицыПоОтбору(ТаблицаЗначений, СтруктураОтбора) Экспорт
	
	Строки = ТаблицаЗначений.НайтиСтроки(СтруктураОтбора);
	
	Пока Строки.Количество() > 0 Цикл
		ТаблицаЗначений.Удалить(Строки[0]);
		Строки.Удалить(0);
	КонецЦикла;
	
КонецПроцедуры // УдалитьСтрокиТаблицыПоОтбору()

// Функция формирует значение нового ключа связи табличной части.
//
// Параметры:
//  Таблица – таблица значений,
//  ИмяКолонки – имя колонки таблицы значений.
//
Функция ПолучитьНовыйКлючСвязи(знач Таблицы, ИмяКолонки = "КлючСвязи") Экспорт
	Если ТипЗнч(Таблицы) = тип("Массив") Тогда
		ТЧ = Новый ТаблицаЗначений;
		ТЧ.Колонки.Добавить(ИмяКолонки);
		
		Для Каждого Таблица Из Таблицы Цикл
			Для Каждого СтрокаТЧ Из Таблица Цикл
				НоваяСтрока = ТЧ.Добавить();
				НоваяСтрока[ИмяКолонки] = СтрокаТЧ[ИмяКолонки];
			КонецЦикла;
		КонецЦикла;
	Иначе
		ТЧ = Таблицы.Выгрузить();
	КонецЕсли;
	
	Если ТЧ.Количество() = 0 Тогда
		МаксКлюч = 1;
	Иначе
		// Если в табл. части уже присутствуют строки, то новое «свободное» значение ключа
		// рассчитывается от максимального существующего значения.
		СписокКлючей = Новый СписокЗначений;
		СписокКлючей.ЗагрузитьЗначения(ТЧ.ВыгрузитьКолонку(ИмяКолонки));
		СписокКлючей.СортироватьПоЗначению(НаправлениеСортировки.Убыв);
		МаксКлюч = СписокКлючей[0].Значение + 1;
	КонецЕсли;
	
	Возврат МаксКлюч;
	
КонецФункции // ПолучитьНовыйКлючСвязи()

// Функция возвращает основное назначение использование номенклатуры
//
// Параметры:
//  Номенклатура - номенклатура для которой необходимо получить основное
//  назначение использование.
//
// Возвращаемое значение:
//  Назначение использование - основное назначение использование номенклатуры
//
Функция ПолучитьОсновноеНазначениеИспользованияНоменклатуры(Номенклатура) Экспорт
	
	Возврат Номенклатура.си_ОсновноеНазначениеИспользования;
	
КонецФункции //ПолучитьОсновноеНазначениеИспользованияНоменклатуры()

// погашение стоимости

// Сформировать движения амортизация спецодежды в эксплуатации
//
Процедура СформироватьДвиженияАмортизацияСпецодеждыВЭксплуатации(ТаблицаРеквизиты, ТаблицаСпецодежда,ТаблицаВыработкаСотрудников,ТаблицаВыработкаМатериалов, Движения, Отказ, ТолькоОперативныйУчет = Ложь) Экспорт
	
	Если ТаблицаСпецодежда = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизиты[0];
	
	ЭтоБСО = си_УчетСпецодеждыСерверПовтИсп.ПроверкаНаБСО();
	Если ЭтоБСО Тогда
		ЗарегистрироватьДвиженияАмортизацияСпецодеждыВЭксплуатации(Реквизиты, ТаблицаСпецодежда,ТаблицаВыработкаСотрудников,ТаблицаВыработкаМатериалов, Движения, Отказ,ТолькоОперативныйУчет);
	Иначе
		ЗарегистрироватьДвиженияАмортизацияСпецодеждыВЭксплуатацииБезВыработкиСотрудников(Реквизиты, ТаблицаСпецодежда,ТаблицаВыработкаСотрудников,ТаблицаВыработкаМатериалов, Движения, Отказ,ТолькоОперативныйУчет);
	КонецЕсли;
	
КонецПроцедуры

// Сформировать движения амортизация спецодежды БУ
//
Процедура СформироватьДвиженияАмортизацияСпецодеждыБУ(ТаблицаРеквизиты, ТаблицаСпецодежда, ТаблицаВыработкаСотрудников,ТаблицаВыработкаМатериалов, Движения, Отказ, ТолькоОперативныйУчет = Ложь) Экспорт
	
	Если ТаблицаСпецодежда = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизиты[0];
	
	ЗарегистрироватьДвиженияАмортизацияСпецодеждыБУ(Реквизиты, ТаблицаСпецодежда, ТаблицаВыработкаСотрудников,ТаблицаВыработкаМатериалов, Движения, Отказ,ТолькоОперативныйУчет);
	
КонецПроцедуры

// движения по списанию затрат по спецодежде при передаче в эксплуатацию

// Сформировать движения амортизация материалов при передаче в эксплуатацию
//
Процедура СформироватьДвиженияАмортизацияМатериаловПриПередачеВЭксплуатацию(ТаблицаРеквизиты, ТаблицаСпецодежда,СпособыОтраженияРасходов, Движения, Отказ) Экспорт
	
	Если ТаблицаСпецодежда = Неопределено ИЛИ СпособыОтраженияРасходов = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизиты[0];
	
	Если Реквизиты.ЕстьМатериалы Тогда
		ЗарегистрироватьДвиженияАмортизацияМатериаловПриПередачеВЭксплуатацию(Реквизиты, ТаблицаСпецодежда,СпособыОтраженияРасходов, Движения, Отказ);
	КонецЕсли;
	
КонецПроцедуры


// Сформировать движения списание материалов по бухгалтерскому учету
//
Процедура СформироватьДвиженияСписаниеМатериаловПоБухУчету(ТаблицаРеквизиты, ТаблицаСпецодежда,СпособыОтраженияРасходов, Движения, Отказ) Экспорт
	
	Если ТаблицаСпецодежда = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизиты[0];
	
	Если Реквизиты.ЕстьМатериалы Тогда
		ЗарегистрироватьДвиженияСписаниеМатериаловПоБухУчету(Реквизиты, ТаблицаСпецодежда,СпособыОтраженияРасходов, Движения, Отказ);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьРезультатРаспределенияПоХарактеристикам(Объект) Экспорт
	
	Копия = Объект.Материалы.Выгрузить();
	Копия.Колонки.Добавить("Сумма");
	Для Каждого СтрокаКопия Из Копия Цикл
		СтрокаКопия.Сумма = 1;
	КонецЦикла;
	Копия.Свернуть("КлючСвязи","Сумма");
	Для Каждого СтрокаКопия Из Копия Цикл
		Если СтрокаКопия.Сумма > 1 Тогда
			СтрокиМатериалов = Объект.Материалы.НайтиСтроки(Новый Структура("КлючСвязи",СтрокаКопия.КлючСвязи));	
			СтрокиНомеровГТД = Объект.НомераГТД.НайтиСтроки(Новый Структура("КлючСвязи",СтрокаКопия.КлючСвязи));	
			Для Инд = 1 По СтрокиМатериалов.Количество()-1 Цикл
				СтрокаМатериал = СтрокиМатериалов[Инд];
				СтрокаМатериал.КлючСвязи = общ_ПереопределениеПроцедурБККлиентСервер.НовыйКлючСвязиСтрокиТаблицы(Объект.Материалы);
				КоличествоКСписанию = СтрокаМатериал.Количество;
				Для Каждого СтрокаГТД Из СтрокиНомеровГТД Цикл
					МожноПогасить = Мин(КоличествоКСписанию,СтрокаГТД.Количество);
					Если МожноПогасить=0 Тогда
						Продолжить;
					КонецЕсли;
					НоваяСтрокаГТД = Объект.НомераГТД.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаГТД,СтрокаГТД);
					НоваяСтрокаГТД.КлючСвязи =  СтрокаМатериал.КлючСвязи;
					НоваяСтрокаГТД.Количество =  МожноПогасить;
					СтрокаГТД.Количество = СтрокаГТД.Количество - МожноПогасить;
					КоличествоКСписанию = КоличествоКСписанию - МожноПогасить;
					Если КоличествоКСписанию = 0 Тогда
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			Для Каждого СтрокаГТД Из СтрокиНомеровГТД Цикл
				Если СтрокаГТД.Количество=0 Тогда
					Объект.НомераГТД.Удалить(СтрокаГТД);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаписатьИдентификаторыОбъектовМетаданных() Экспорт
	Справочники.ИдентификаторыОбъектовМетаданных.ВыполнитьОбновлениеДанных(Истина,Ложь,Ложь);
КонецПроцедуры

Функция ПроизвестиПервыйЗапуск() Экспорт 
	НаборЗаписей = РегистрыСведений.ВерсииПодсистем.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ИмяПодсистемы.Значение = си_УчетСпецодеждыСерверПовтИсп.НаименованиеПодсистемы();
	НаборЗаписей.Отбор.ИмяПодсистемы.Использование = Истина;
	НаборЗаписей.Прочитать();
	Если НаборЗаписей.Количество() = 0 Тогда
		НомерВерсииТекущейКонфигурации = "";
	Иначе
		НомерВерсииТекущейКонфигурации = НаборЗаписей[0].Версия;
	КонецЕсли;
	
	Если НомерВерсииТекущейКонфигурации = "" Тогда
		ТолькоПервыйЗапуск = Истина;
	Иначе
		ТолькоПервыйЗапуск = Ложь;
	КонецЕсли;
	
	Возврат ТолькоПервыйЗапуск;
КонецФункции

// Получить счет учета номенклатуры
//
Функция ПолучитьСчетУчетаНоменклатуры(Организация,Номенклатура) Экспорт
	СписокНоменклатуры = Новый Массив;
	Родитель = Номенклатура;
	Пока НЕ Родитель = Справочники.Номенклатура.ПустаяСсылка() Цикл
		СписокНоменклатуры.Добавить(Родитель);
		Родитель = Родитель.Родитель;
	КонецЦикла;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",Организация);
	Запрос.УстановитьПараметр("Номенклатура",СписокНоменклатуры);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СчетаУчетаНоменклатуры.СчетУчетаБУ,
	|	СчетаУчетаНоменклатуры.Организация,
	|	СчетаУчетаНоменклатуры.Номенклатура,
	|	СправочникНоменклатура.ЭтоГруппа КАК ЭтоГруппа
	|ИЗ
	|	РегистрСведений.СчетаУчетаНоменклатуры КАК СчетаУчетаНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО СчетаУчетаНоменклатуры.Номенклатура = СправочникНоменклатура.Ссылка
	|ГДЕ
	|	СчетаУчетаНоменклатуры.Организация = &Организация
	|	И СчетаУчетаНоменклатуры.Номенклатура В(&Номенклатура)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЭтоГруппа";
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		Возврат Результат.СчетУчетаБУ;
	КонецЕсли;
КонецФункции

// Определить номенклатурную группу для объекта строительства
//
Функция ОпределитьНоменклатурнуюГруппуДляОбъектаСтроительства(ОбъектСтроительства) Экспорт
	
	Если Не ЗначениеЗаполнено(ОбъектСтроительства) Тогда
		Возврат Справочники.НоменклатурныеГруппы.ПустаяСсылка();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НоменклатурныеГруппы.Ссылка
	|ИЗ
	|	Справочник.НоменклатурныеГруппы КАК НоменклатурныеГруппы
	|ГДЕ
	|	НоменклатурныеГруппы.бсо_ОбъектСтроительства = &бсо_ОбъектСтроительства";
	
	Запрос.УстановитьПараметр("бсо_ОбъектСтроительства", ОбъектСтроительства);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	КонецЦикла;
	
	Возврат Справочники.НоменклатурныеГруппы.ПустаяСсылка();
	
КонецФункции

// Процедура заполняет единицу и цену по ценам продажи в строке табличной части документа
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части документа,
//  ДокументОбъект       - объект редактируемого документа.
//  ВалютаРегламентированногоУчета - валюта регламентированного учета
//
Процедура ЗаполнитьЕдиницуЦенуПродажиТабЧастиПлан(СтрокаТабличнойЧасти, ДокументОбъект, ВалютаРегламентированногоУчета) Экспорт
	
	СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтрокаТабличнойЧасти.Номенклатура.БазоваяЕдиницаИзмерения;
	СтрокаТабличнойЧасти.Коэффициент      = 1;
	
КонецПроцедуры // ЗаполнитьЕдиницуЦенуПродажиТабЧасти()

// Ввод начальных остатков

// Зарегистрировать движения ввод начальных остатков
//
Процедура ЗарегистрироватьДвиженияВводНачальныхОстатков(Реквизиты, ТаблицаДвижений, Движения, Отказ) Экспорт
	
    ЭтоБСО 						= си_УчетСпецодеждыСерверПовтИсп.ПроверкаНаБСО();
	СчетаУчетаСпецодежды		= си_УчетСпецодеждыСерверПовтИсп.ПолучитьСчетаУчетаСпецодежды();
	
	Организация 				= Реквизиты.Организация;
	СтруктурноеПодразделение 	= Реквизиты.СтруктурноеПодразделение;
	ЭтотОбъект 					= Реквизиты.Ссылка;
	ВидУчетаНУ 					= Реквизиты.ВидУчетаНУ;
	Дата 						= Реквизиты.Дата;
	УчитыватьКПН 				= Реквизиты.УчитыватьКПН;
	Материалы 					= ТаблицаДвижений;
	
	Движения.Типовой.Записывать 					= Истина;
	Движения.Налоговый.Записывать 					= Истина;
	Движения.си_МатериалыВЭксплуатации.Записывать 	= Истина;
	Движения.си_МатериалыНаСкладе.Записывать 		= Истина;
	
	Если ЭтоБСО Тогда
		Движения.общ_ТоварыНаСкладах.Записывать 		= Истина;
	КонецЕсли;
	
	СтруктураШапкиДокумента		= общ_ПереопределяемыеПроцедурыБКСервер.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	// Для плательщиков КПН в любом случае формируются корреспонденции по отражению в налоговом учете
	// если признак "Отражать в НУ" в документе не установлен, то формируется проводка по постоянной разнице
	ОрганизацияПлательщикНалогаНаПрибыль 			= ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Организация, Дата);
	ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль 	= ОрганизацияПлательщикНалогаНаПрибыль И ПроцедурыНалоговогоУчета.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль(Организация, Дата);	
	СтруктураШапкиДокумента.Вставить("НеобходимостьОтраженияВНУ", 						УчитыватьКПН И (ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль ИЛИ ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ));
	СтруктураШапкиДокумента.Вставить("ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль", 	ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль);
	СтруктураШапкиДокумента.Вставить("ОрганизацияПлательщикНалогаНаПрибыль", 			ОрганизацияПлательщикНалогаНаПрибыль);
	
	Для Каждого ТекСтрокаМатериалы Из Материалы Цикл
		Если Реквизиты.ОтражатьВБухгалтерскомУчете Тогда
			Движение 				= Движения.Типовой.Добавить();
			Движение.Период 		= Дата;
			Движение.СчетКт 		= ПланыСчетов.Типовой.Вспомогательный;
			Движение.СчетДт 		= ?(ТекСтрокаМатериалы.Состояние = Перечисления.си_СостоянияМатериалов.НаходящиесяНаСкладеНовая ИЛИ ТекСтрокаМатериалы.Состояние = Перечисления.си_СостоянияМатериалов.НаходящиесяНаСкладе,СчетаУчетаСпецодежды.СпецоснасткаИСпецодеждаНаСкладе,СчетаУчетаСпецодежды.СпецоснасткаИСпецодеждаВЭксплуатации);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Движение.СчетДт, Движение.СубконтоДт, 1, ТекСтрокаМатериалы.Номенклатура);
			Если ТекСтрокаМатериалы.Состояние = Перечисления.си_СостоянияМатериалов.НаходящиесяНаСкладе 
				ИЛИ ТекСтрокаМатериалы.Состояние = Перечисления.си_СостоянияМатериалов.НаходящиесяНаСкладеНовая Тогда
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Движение.СчетДт, Движение.СубконтоДт, 2, ТекСтрокаМатериалы.Склад);
			КонецЕсли;
			Движение.Организация 	= Организация;
			Движение.СтруктурноеПодразделениеДт = СтруктурноеПодразделение;
			Движение.СтруктурноеПодразделениеКт = СтруктурноеПодразделение;
			Если Движение.СчетКт.Количественный Тогда
				Движение.КоличествоКт = ТекСтрокаМатериалы.Количество *ТекСтрокаМатериалы.Коэффициент;
			КонецЕсли;
			Если Движение.СчетДт.Количественный Тогда
				Движение.КоличествоДт = ТекСтрокаМатериалы.Количество*ТекСтрокаМатериалы.Коэффициент;
			КонецЕсли;
			Движение.Сумма = ТекСтрокаМатериалы.ОстаточнаяСтоимость;
			Движение.Содержание = "Ввод остатков";
			
			Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ Тогда
				Движение = Движения.Налоговый.Добавить();
				Движение.Период = Дата;
				Движение.ВидУчетаДт = ВидУчетаНУ;
				Движение.ВидУчетаКт = ВидУчетаНУ;
				Движение.СчетКт = ПланыСчетов.Налоговый.Вспомогательный;
				Движение.СчетДт = общ_ПереопределяемыеПроцедурыБКВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ",?(ТекСтрокаМатериалы.Состояние = Перечисления.си_СостоянияМатериалов.НаходящиесяНаСкладе,СчетаУчетаСпецодежды.СпецоснасткаИСпецодеждаНаСкладе,СчетаУчетаСпецодежды.СпецоснасткаИСпецодеждаВЭксплуатации)));
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Движение.СчетДт, Движение.СубконтоДт, 1, ТекСтрокаМатериалы.Номенклатура);
				Если ТекСтрокаМатериалы.Состояние = Перечисления.си_СостоянияМатериалов.НаходящиесяНаСкладе Тогда
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Движение.СчетДт, Движение.СубконтоДт, 2, ТекСтрокаМатериалы.Склад);
				КонецЕсли;
				Движение.Организация = Организация;
				Движение.СтруктурноеПодразделениеДт = СтруктурноеПодразделение;
				Движение.СтруктурноеПодразделениеКт = СтруктурноеПодразделение;
				Если Движение.СчетКт.Количественный Тогда
					Движение.КоличествоКт = ТекСтрокаМатериалы.Количество*ТекСтрокаМатериалы.Коэффициент;
				КонецЕсли;
				Если Движение.СчетДт.Количественный Тогда
					Движение.КоличествоДт = ТекСтрокаМатериалы.Количество*ТекСтрокаМатериалы.Коэффициент;
				КонецЕсли;
				Движение.Сумма = ТекСтрокаМатериалы.ОстаточнаяСтоимость;
				Движение.Содержание = "Ввод остатков";
			КонецЕсли;
		КонецЕсли;
		
		Если ТекСтрокаМатериалы.Состояние=Перечисления.си_СостоянияМатериалов.НаходящиесяВЭксплуатации Тогда
			Движение = Движения.си_МатериалыВЭксплуатации.Добавить();
			Движение.ВидУчетаНУ = ВидУчетаНУ;
			Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
			Движение.Период = ТекСтрокаМатериалы.ДатаПередачиВЭксплуатацию;
			Движение.Организация = Организация;
			Движение.СтруктурноеПодразделение = СтруктурноеПодразделение;
			Движение.ПодразделениеОрганизации = ТекСтрокаМатериалы.ПодразделениеОрганизации;
			Движение.ДокументПередачи = ТекСтрокаМатериалы.ДокументПередачи;
			Движение.Номенклатура = ТекСтрокаМатериалы.Номенклатура;
			Движение.Сотрудник = ТекСтрокаМатериалы.Сотрудник;
			Движение.НазначениеИспользования = ТекСтрокаМатериалы.НазначениеИспользования;
			Движение.Количество = ТекСтрокаМатериалы.Количество*ТекСтрокаМатериалы.Коэффициент;
			Движение.Стоимость = ТекСтрокаМатериалы.ОстаточнаяСтоимость;
			Движение.ОстаточныйСрокИспользования = ТекСтрокаМатериалы.ОстаточныйСрокСлужбы;
			Движение.КодОперации = Перечисления.си_КодыОперацийМатериалыВЭксплуатации.СписаниеПартийВЭксплуатацию;
			Движение.Характеристика = ТекСтрокаМатериалы.Характеристика;
			
		ИначеЕсли ТекСтрокаМатериалы.Состояние=Перечисления.си_СостоянияМатериалов.НаходящиесяНаСкладе Тогда
			Движение = Движения.си_МатериалыНаСкладе.Добавить();
			Движение.ВидУчетаНУ = ВидУчетаНУ;
			Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
			Движение.Период = ТекСтрокаМатериалы.ДатаПередачиВЭксплуатацию;
			Движение.Организация = Организация;
			Движение.СтруктурноеПодразделение = СтруктурноеПодразделение;
			Движение.ДокументПередачи = ТекСтрокаМатериалы.ДокументПередачи;
			Движение.Номенклатура = ТекСтрокаМатериалы.Номенклатура;
			Движение.НазначениеИспользования = ТекСтрокаМатериалы.НазначениеИспользования;
			Движение.Склад = ТекСтрокаМатериалы.Склад;
			Движение.Количество = ТекСтрокаМатериалы.Количество*ТекСтрокаМатериалы.Коэффициент;
			Движение.Стоимость = ТекСтрокаМатериалы.ОстаточнаяСтоимость;
			Движение.ОстаточныйСрокИспользования = ТекСтрокаМатериалы.ОстаточныйСрокСлужбы;
			Движение.КодОперации = Перечисления.си_КодыОперацийМатериалыВЭксплуатации.ВозвратИзЭксплуатации;
			Движение.Характеристика = ТекСтрокаМатериалы.Характеристика;
			
		ИначеЕсли ТекСтрокаМатериалы.Состояние=Перечисления.си_СостоянияМатериалов.НаходящиесяНаСкладеНовая Тогда
			Движение = Движения.си_МатериалыНаСкладе.Добавить();
			Движение.ВидУчетаНУ = ?(СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ,ВидУчетаНУ,Справочники.ВидыУчетаНУ.ПустаяСсылка());
			Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
			Движение.Период = Дата;
			Движение.Организация = Организация;
			Движение.СтруктурноеПодразделение = СтруктурноеПодразделение;
			Движение.Номенклатура = ТекСтрокаМатериалы.Номенклатура;
			Движение.Склад = ТекСтрокаМатериалы.Склад;
			Движение.Количество = ТекСтрокаМатериалы.Количество*ТекСтрокаМатериалы.Коэффициент;
			Движение.Стоимость = ТекСтрокаМатериалы.ОстаточнаяСтоимость;
			Движение.КодОперации = Перечисления.си_КодыОперацийМатериалыВЭксплуатации.ПриемкаНаСклад;
			Движение.Характеристика = ТекСтрокаМатериалы.Характеристика;
			Движение.СостояниеСпецодежды = Перечисления.си_СостояниеСпецодеждыИИнвентаряНаСкладе.НаСкладеНовая;
			
		КонецЕсли;
		Если ТекСтрокаМатериалы.Состояние=Перечисления.си_СостоянияМатериалов.НаходящиесяНаСкладе 
			ИЛИ ТекСтрокаМатериалы.Состояние=Перечисления.си_СостоянияМатериалов.НаходящиесяНаСкладеНовая Тогда
			Если ЭтоБСО Тогда
				// Движения по регистру накопления Товары на складах
				Движение = Движения.общ_ТоварыНаСкладах.Добавить();
				Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
				Движение.Период = Дата;
				Движение.Организация = Организация;
				Движение.СтруктурноеПодразделение = СтруктурноеПодразделение;
				Движение.Номенклатура = ТекСтрокаМатериалы.Номенклатура;
				Движение.Склад = ТекСтрокаМатериалы.Склад;
				Движение.Количество = ТекСтрокаМатериалы.Количество * ТекСтрокаМатериалы.Коэффициент;			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	Если Не Отказ Тогда			
		ПроцедурыНалоговогоУчета.ОтразитьПостоянныеРазницыВНУ(ЭтотОбъект, СтруктураШапкиДокумента, Истина);
	КонецЕсли;	
	
КонецПроцедуры

// Зарегистрировать движения амортизация спецодежды БУ
//
Процедура ЗарегистрироватьДвиженияАмортизацияСпецодеждыБУ(Реквизиты, ТаблицаСпецодежда,ТаблицаВыработкаСотрудников,ТаблицаВыработкаМатериалов, Движения, Отказ, ТолькоОперативныйУчет = Ложь) Экспорт
	
	СчетаУчетаСпецодежды		= си_УчетСпецодеждыСерверПовтИсп.ПолучитьСчетаУчетаСпецодежды();
	
	СчетУчетаНУ = общ_ПереопределяемыеПроцедурыБКВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ",СчетаУчетаСпецодежды.СпецоснасткаИСпецодеждаВЭксплуатации));
	ВедениеУчетаВременныхРазницБалансовымМетодом 	= Реквизиты.ВедениеУчетаВременныхРазницБалансовымМетодом;
	ОрганизацияПлательщикНалогаНаПрибыль 			= Реквизиты.ОрганизацияПлательщикНалогаНаПрибыль;
	Дата 											= Реквизиты.Дата;
	Организация 									= Реквизиты.Организация;
	СтруктурноеПодразделение 						= Реквизиты.СтруктурноеПодразделение;
	УчетПоХарактеристикам							= Константы.си_УчетСпецодеждыПоХарактеристикам.Получить();
	
	СкладскойУчетБУ = СчетаУчетаСпецодежды.СпецоснасткаИСпецодеждаНаСкладе.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Склады)<>Неопределено;
	СчетУчетаНУ 	= общ_ПереопределяемыеПроцедурыБКВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ",СчетаУчетаСпецодежды.СпецоснасткаИСпецодеждаНаСкладе));
	
	Для Каждого СтрокаСпецодежда Из ТаблицаСпецодежда Цикл
		Если СтрокаСпецодежда.НазначениеИспользования.ПриостанавливатьАмортизациюНаВремяВозврата Тогда
			Продолжить;			
		КонецЕсли;	
		РазмерПогашенияСрокаИспользования = 1;
		Если СтрокаСпецодежда.СпособПогашенияСтоимости = Перечисления.си_СпособыПогашенияСтоимости.Производственный Тогда
			СуммаАмортизации 			= 0;
			СтруктураПоискаВыработка 	= Новый Структура("Номенклатура,ДокументПередачи,НазначениеИспользования");
			Если УчетПоХарактеристикам Тогда
				СтруктураПоискаВыработка.Вставить("Характеристика");
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(СтруктураПоискаВыработка,СтрокаСпецодежда);
			ТаблицаВыработкиМатериала 	= ТаблицаВыработкаМатериалов.Скопировать(СтруктураПоискаВыработка);
			ИтогоОборотов 				= ТаблицаВыработкиМатериала.Итог("Оборотов");
			СуммаАмортизации 			= ?(СтрокаСпецодежда.ОстаточныйСрокИспользования>ИтогоОборотов,Окр(СтрокаСпецодежда.Стоимость/СтрокаСпецодежда.ОстаточныйСрокИспользования*ИтогоОборотов,2),СтрокаСпецодежда.Стоимость);
			РазмерПогашенияСрокаИспользования = Мин(ИтогоОборотов,СтрокаСпецодежда.ОстаточныйСрокИспользования);
		Иначе
			СуммаАмортизации = ?(СтрокаСпецодежда.ОстаточныйСрокИспользования>1,Окр(СтрокаСпецодежда.Стоимость/СтрокаСпецодежда.ОстаточныйСрокИспользования,2),СтрокаСпецодежда.Стоимость);
		КонецЕсли;
		Если СуммаАмортизации = 0 Тогда
			Если СтрокаСпецодежда.ОстаточныйСрокИспользования = 0 ИЛИ РазмерПогашенияСрокаИспользования=0 Тогда 
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		СоставСпособаСписания 	= СтрокаСпецодежда.Способы;
		МассивКоэффициентов 	= СоставСпособаСписания.ВыгрузитьКолонку("Коэффициент");
		МассивСумм 				= общ_ПереопределениеПроцедурБККлиентСервер.РаспределитьПропорционально(СуммаАмортизации,МассивКоэффициентов);
		Если НЕ ТолькоОперативныйУчет Тогда
			Если Не СтрокаСпецодежда.НазначениеИспользования.СпособПогашенияСтоимости = Перечисления.си_СпособыПогашенияСтоимости.ПриПередачеВЭксплуатацию 
				И Не МассивСумм = Неопределено Тогда 
				Для Инд = 1 По МассивКоэффициентов.Количество() Цикл
					Проводка = Движения.Типовой.Добавить();
					Проводка.Период = НачалоДня(Дата);
					Проводка.Организация = Организация;
					Проводка.СтруктурноеПодразделениеДт = СтруктурноеПодразделение;
					Проводка.СтруктурноеПодразделениеКт = СтруктурноеПодразделение;
					Проводка.Сумма = МассивСумм[Инд-1];
					Проводка.СчетДт = СоставСпособаСписания[Инд-1].СчетЗатрат;
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(СоставСпособаСписания[Инд-1].СчетЗатрат, Проводка.СубконтоДт, 1, СоставСпособаСписания[Инд-1].Субконто1);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(СоставСпособаСписания[Инд-1].СчетЗатрат, Проводка.СубконтоДт, 2, СоставСпособаСписания[Инд-1].Субконто2);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(СоставСпособаСписания[Инд-1].СчетЗатрат, Проводка.СубконтоДт, 3, СоставСпособаСписания[Инд-1].Субконто3);
					Если СоставСпособаСписания[Инд-1].СчетЗатрат.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Подразделения)<>Неопределено Тогда
						
					КонецЕсли;
					Проводка.СчетКт = СчетаУчетаСпецодежды.СпецоснасткаИСпецодеждаНаСкладе;
					Проводка.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконтоТиповые.Номенклатура] = СтрокаСпецодежда.Номенклатура;
					Если СкладскойУчетБУ Тогда
						Проводка.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконтоТиповые.Склады] = СтрокаСпецодежда.Склад;
					КонецЕсли; 
					Проводка.Содержание = "Начислена амортизация спецодежды и инвентаря б/у";
					
					Если ОрганизацияПлательщикНалогаНаПрибыль И ЗначениеЗаполнено(СтрокаСпецодежда.ВидУчетаНУ) Тогда
						ПроводкаНУ = Движения.Налоговый.Добавить();
						
						ПроводкаНУ.Период		= НачалоДня(Дата);
						ПроводкаНУ.Содержание	= "Начислена амортизация спецодежды и инвентаря б/у";
						ПроводкаНУ.Организация	= Организация;
						ПроводкаНУ.СтруктурноеПодразделениеДт = СтруктурноеПодразделение;
						ПроводкаНУ.Сумма		= МассивСумм[Инд-1];
						
						СчетЗатратНУ = общ_ПереопределяемыеПроцедурыБКВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ",СоставСпособаСписания[Инд-1].СчетЗатрат));
						ПроводкаНУ.СчетДт		= СчетЗатратНУ;
						ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(СчетЗатратНУ, ПроводкаНУ.СубконтоДт, 1, СоставСпособаСписания[Инд-1].Субконто1);
						ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(СчетЗатратНУ, ПроводкаНУ.СубконтоДт, 2, СоставСпособаСписания[Инд-1].Субконто2);
						ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(СчетЗатратНУ, ПроводкаНУ.СубконтоДт, 3, СоставСпособаСписания[Инд-1].Субконто3);
						ПроводкаНУ.ВидУчетаДт   = СтрокаСпецодежда.ВидУчетаНУ;								
						
						// Заполняем кредитовую часть проводки
						Если ВедениеУчетаВременныхРазницБалансовымМетодом Тогда
							ПроводкаНУ.СчетКт		= СчетУчетаНУ;
							ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 1, СтрокаСпецодежда.Номенклатура);					
							ПроводкаНУ.ВидУчетаКт   = СтрокаСпецодежда.ВидУчетаНУ;																			
							ПроводкаНУ.СтруктурноеПодразделениеКт = СтруктурноеПодразделение;
						КонецЕсли;	
						Если СкладскойУчетБУ Тогда
							ПроводкаНУ.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконтоТиповые.Склады] = СтрокаСпецодежда.Склад;
						КонецЕсли; 
					КонецЕсли;	                                                
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;	
		Если Не СуммаАмортизации = 0 ИЛИ Не РазмерПогашенияСрокаИспользования = 0 Тогда	
			// списание амортизированной суммы
			Движение = Движения.си_МатериалыНаСкладе.ДобавитьРасход();
			Движение.Период 						= Дата;
			ЗаполнитьЗначенияСвойств(Движение,СтрокаСпецодежда);
			Движение.ВидДвижения					= ВидДвиженияНакопления.Расход;
			Движение.Организация 					= Организация;
			Движение.СтруктурноеПодразделение 		= СтруктурноеПодразделение;
			Движение.ВидУчетаНУ 					= СтрокаСпецодежда.ВидУчетаНУ;
			Движение.Количество 					= СтрокаСпецодежда.Количество;
			Движение.Стоимость 						= СтрокаСпецодежда.Стоимость;
			Движение.СписаннаяСтоимость 			= СтрокаСпецодежда.СписаннаяСтоимость;
			Движение.ОстаточныйСрокИспользования 	= СтрокаСпецодежда.ОстаточныйСрокИспользования;
			Движение.КодОперации					= Перечисления.си_КодыОперацийМатериалыВЭксплуатации.ПогашениеСтоимости;
			Движение.ДокументВозврата			 	= СтрокаСпецодежда.ДокументВозврата;
			// увеличение списанной стоимости
			Движение = Движения.си_МатериалыНаСкладе.ДобавитьПриход();
			Движение.Период 						= Дата;
			ЗаполнитьЗначенияСвойств(Движение,СтрокаСпецодежда);
			Движение.ВидДвижения					= ВидДвиженияНакопления.Приход;
			Движение.Организация 					= Организация;
			Движение.СтруктурноеПодразделение 		= СтруктурноеПодразделение;
			Движение.ВидУчетаНУ 					= СтрокаСпецодежда.ВидУчетаНУ;
			Движение.Количество 					= СтрокаСпецодежда.Количество;
			Движение.Стоимость 						= СтрокаСпецодежда.Стоимость - СуммаАмортизации;
			Движение.СписаннаяСтоимость 			= СтрокаСпецодежда.СписаннаяСтоимость + СуммаАмортизации;
			Движение.ОстаточныйСрокИспользования 	= СтрокаСпецодежда.ОстаточныйСрокИспользования - РазмерПогашенияСрокаИспользования;
			Движение.КодОперации					= Перечисления.си_КодыОперацийМатериалыВЭксплуатации.ПогашениеСтоимости;
			Движение.ДокументВозврата			 	= СтрокаСпецодежда.ДокументВозврата;
			
			СтрокаСпецодежда.Стоимость = Движение.Стоимость;
			СтрокаСпецодежда.СписаннаяСтоимость = Движение.СписаннаяСтоимость;
			СтрокаСпецодежда.ОстаточныйСрокИспользования = Движение.ОстаточныйСрокИспользования;
		КонецЕсли;
		
	КонецЦикла;
	
	Движения.си_МатериалыНаСкладе.Записывать = Истина;
	Движения.Налоговый.Записывать = Истина;
	Движения.Типовой.Записывать = Истина;
КонецПроцедуры

// Зарегистрировать движения приход расход по ордерному складу
//
Процедура ЗарегистрироватьДвиженияПриходРасходПоОрдерномуСкладу(Реквизиты, ТаблицаМатериалы, Движения, Отказ) Экспорт
	ЭтоБСО = си_УчетСпецодеждыСерверПовтИсп.ПроверкаНаБСО();	
	Если Не ЭтоБСО Тогда
		Возврат
	КонецЕсли;
	
	Если Не Метаданные.Константы.Найти("общ_ВестиОрдерныйСклад") = Неопределено Тогда
		Если Не Константы.общ_ВестиОрдерныйСклад.Получить() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ОтражатьПоОрдеру = Вычислить("общ_УправлениеОрдернымСкладом.ПолучитьУчетнуюПолитикуОрганизации(Реквизиты.Дата, Реквизиты.Организация)");
	Если Не ОтражатьПоОрдеру Тогда
		Возврат
	КонецЕсли;
	
	Для Каждого СтрокаМатериал Из ТаблицаМатериалы Цикл
		// Движения по регистру накопления Товары на складах
		Движение = Движения.общ_ТоварыНаСкладах.Добавить();
		Движение.ВидДвижения = ?(ТипЗнч(Реквизиты.Ссылка)=Тип("ДокументСсылка.си_ПередачаМатериаловВЭксплуатацию") ИЛИ ТипЗнч(Реквизиты.Ссылка)=Тип("ДокументСсылка.си_СписаниеМатериаловИзЭксплуатации"),ВидДвиженияНакопления.Расход,ВидДвиженияНакопления.Приход);
		Движение.Период 					= Реквизиты.Дата;
		Движение.Организация 				= Реквизиты.Организация;
		Движение.СтруктурноеПодразделение 	= Реквизиты.СтруктурноеПодразделение;
		Движение.Номенклатура 				= СтрокаМатериал.Номенклатура;
		Движение.Склад 						= Реквизиты.Склад;
		Движение.Количество 				= СтрокаМатериал.Количество * СтрокаМатериал.Коэффициент;
	КонецЦикла;
	Движения.общ_ТоварыНаСкладах.Записывать = Истина;
КонецПроцедуры

#Область ПроцедурыИФункцииДляОбеспеченияПроведенияДокументов

// Зарегистрировать движения амортизация спецодежды в эксплуатации
//
Процедура ЗарегистрироватьДвиженияАмортизацияСпецодеждыВЭксплуатации(Реквизиты, ТаблицаСпецодежда,ТаблицаВыработкаСотрудников,ТаблицаВыработкаМатериалов, Движения, Отказ, ТолькоОперативныйУчет = Ложь) Экспорт
	
	СчетаУчетаСпецодежды		= си_УчетСпецодеждыСерверПовтИсп.ПолучитьСчетаУчетаСпецодежды();
	
	СчетУчетаНУ = общ_ПереопределяемыеПроцедурыБКВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ",СчетаУчетаСпецодежды.СпецоснасткаИСпецодеждаВЭксплуатации));
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	бсо_УчетнаяПолитикаСтроительнойОрганизацииСрезПоследних.РассчитыватьСебестоимостьСМРВРазрезеПодразделений
	|ИЗ
	|	РегистрСведений.бсо_УчетнаяПолитикаСтроительнойОрганизации.СрезПоследних(&Период, Организация = &Организация) КАК бсо_УчетнаяПолитикаСтроительнойОрганизацииСрезПоследних";
	
	Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
	Запрос.УстановитьПараметр("Период", Реквизиты.Дата);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	СебестоимостьВРазрезеПодразделений = Ложь;	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СебестоимостьВРазрезеПодразделений 				= ВыборкаДетальныеЗаписи.РассчитыватьСебестоимостьСМРВРазрезеПодразделений;
	КонецЦикла;
	
	ВедениеУчетаВременныхРазницБалансовымМетодом 	= Реквизиты.ВедениеУчетаВременныхРазницБалансовымМетодом;
	ОрганизацияПлательщикНалогаНаПрибыль 			= Реквизиты.ОрганизацияПлательщикНалогаНаПрибыль;
	Дата 											= Реквизиты.Дата;
	Организация 									= Реквизиты.Организация;
	СтруктурноеПодразделение 						= Реквизиты.СтруктурноеПодразделение;
	
	Для Каждого СтрокаСпецодежда Из ТаблицаСпецодежда Цикл
		РазмерПогашенияСрокаИспользования = 1;
		Если СтрокаСпецодежда.СпособПогашенияСтоимости = Перечисления.си_СпособыПогашенияСтоимости.Производственный Тогда
			СуммаАмортизации 			= 0;
			СтруктураПоискаВыработка 	= Новый Структура("Номенклатура,ПодразделениеОрганизации,ДокументПередачи,Сотрудник,НазначениеИспользования");
			ЗаполнитьЗначенияСвойств(СтруктураПоискаВыработка,СтрокаСпецодежда);
			ТаблицаВыработкиМатериала 	= ТаблицаВыработкаМатериалов.Скопировать(СтруктураПоискаВыработка);
			ИтогоОборотов 				= ТаблицаВыработкиМатериала.Итог("Оборотов");
			СуммаАмортизации 			= ?(СтрокаСпецодежда.ОстаточныйСрокИспользования>ИтогоОборотов,Окр(СтрокаСпецодежда.Стоимость/СтрокаСпецодежда.ОстаточныйСрокИспользования*ИтогоОборотов,2),СтрокаСпецодежда.Стоимость);
			РазмерПогашенияСрокаИспользования = Мин(ИтогоОборотов,СтрокаСпецодежда.ОстаточныйСрокИспользования);
		Иначе
			СуммаАмортизации = ?(СтрокаСпецодежда.ОстаточныйСрокИспользования>1,Окр(СтрокаСпецодежда.Стоимость/СтрокаСпецодежда.ОстаточныйСрокИспользования,2),СтрокаСпецодежда.Стоимость);
		КонецЕсли;
		Если СуммаАмортизации = 0 Тогда
			Если СтрокаСпецодежда.ОстаточныйСрокИспользования = 0 ИЛИ РазмерПогашенияСрокаИспользования=0 Тогда 
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		СоставСпособаСписания 	= СтрокаСпецодежда.Способы;
		МассивКоэффициентов 	= СоставСпособаСписания.ВыгрузитьКолонку("Коэффициент");
		МассивСумм 				= общ_ПереопределениеПроцедурБККлиентСервер.РаспределитьПропорционально(СуммаАмортизации,МассивКоэффициентов);
		Если НЕ ТолькоОперативныйУчет Тогда
			Если Не СтрокаСпецодежда.НазначениеИспользования.СпособПогашенияСтоимости = Перечисления.си_СпособыПогашенияСтоимости.ПриПередачеВЭксплуатацию 
				И Не МассивСумм = Неопределено Тогда 
				Для Инд = 1 По МассивКоэффициентов.Количество() Цикл
					СубконтоМашины = СоставСпособаСписания[Инд-1].СчетЗатрат.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоТиповые.СтроительныеМашиныИМеханизмы);
					НомерСубконтоМашины 				= ?(СубконтоМашины=Неопределено,0,СубконтоМашины.НомерСтроки);
					СубконтоНомГруппы 					= СоставСпособаСписания[Инд-1].СчетЗатрат.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоТиповые.НоменклатурныеГруппы);
					НомерСубконтоНомГруппы 				= ?(СубконтоНомГруппы=Неопределено,0,СубконтоНомГруппы.НомерСтроки);
					СубконтоОбъектыСтроительства 		= СоставСпособаСписания[Инд-1].СчетЗатрат.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоТиповые.ОбъектыСтроительства);
					НомерСубконтоОбъектыСтроительства 	= ?(СубконтоОбъектыСтроительства=Неопределено,0,СубконтоОбъектыСтроительства.НомерСтроки);
					СубконтоПодразделения				= СоставСпособаСписания[Инд-1].СчетЗатрат.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Подразделения);
					НомерСубконтоПодразделения 			= ?(СубконтоПодразделения=Неопределено,0,СубконтоПодразделения.НомерСтроки);
					Если НомерСубконтоМашины<1 И НомерСубконтоНомГруппы<1 И НомерСубконтоОбъектыСтроительства<1 Тогда
						Проводка = Движения.Типовой.Добавить();
						Проводка.Период 			= НачалоДня(Дата);
						Проводка.Организация 		= Организация;
						Проводка.СтруктурноеПодразделениеДт = СтруктурноеПодразделение;
						Проводка.СтруктурноеПодразделениеКт = СтруктурноеПодразделение;
						Проводка.Сумма 				= МассивСумм[Инд-1];
						Проводка.СчетДт 			= СоставСпособаСписания[Инд-1].СчетЗатрат;
						ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(СоставСпособаСписания[Инд-1].СчетЗатрат, Проводка.СубконтоДт, 1, СоставСпособаСписания[Инд-1].Субконто1);
						ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(СоставСпособаСписания[Инд-1].СчетЗатрат, Проводка.СубконтоДт, 2, СоставСпособаСписания[Инд-1].Субконто2);
						ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(СоставСпособаСписания[Инд-1].СчетЗатрат, Проводка.СубконтоДт, 3, СоставСпособаСписания[Инд-1].Субконто3);
						Если НомерСубконтоПодразделения <> 0 И НЕ ЗначениеЗаполнено(СоставСпособаСписания[Инд-1]["Субконто"+Строка(НомерСубконтоПодразделения)]) Тогда
							ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(СоставСпособаСписания[Инд-1].СчетЗатрат, Проводка.СубконтоДт, НомерСубконтоПодразделения, СтрокаСпецодежда.ПодразделениеОрганизации);
						КонецЕсли;
						Проводка.СчетКт = СчетаУчетаСпецодежды.СпецоснасткаИСпецодеждаВЭксплуатации;
						Проводка.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконтоТиповые.Номенклатура] = СтрокаСпецодежда.Номенклатура;
						Проводка.Содержание = "Начислена амортизация спецодежды и инвентаря";
						
						Если ОрганизацияПлательщикНалогаНаПрибыль И ЗначениеЗаполнено(СтрокаСпецодежда.ВидУчетаНУ) Тогда
							ПроводкаНУ = Движения.Налоговый.Добавить();
							
							ПроводкаНУ.Период		= НачалоДня(Дата);
							ПроводкаНУ.Содержание	= "Начислена амортизация спецодежды и инвентаря";
							ПроводкаНУ.Организация	= Организация;
							ПроводкаНУ.СтруктурноеПодразделениеДт = СтруктурноеПодразделение;
							ПроводкаНУ.Сумма		= МассивСумм[Инд-1];
							
							СчетЗатратНУ = общ_ПереопределяемыеПроцедурыБКВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ",СоставСпособаСписания[Инд-1].СчетЗатрат));
							ПроводкаНУ.СчетДт		= СчетЗатратНУ;
							ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(СчетЗатратНУ, ПроводкаНУ.СубконтоДт, 1, СоставСпособаСписания[Инд-1].Субконто1);
							ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(СчетЗатратНУ, ПроводкаНУ.СубконтоДт, 2, СоставСпособаСписания[Инд-1].Субконто2);
							ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(СчетЗатратНУ, ПроводкаНУ.СубконтоДт, 3, СоставСпособаСписания[Инд-1].Субконто3);
							ПроводкаНУ.ВидУчетаДт   = СтрокаСпецодежда.ВидУчетаНУ;								
							СубконтоПодразделения	= СчетЗатратНУ.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Подразделения);
							НомерСубконтоПодразделения = ?(СубконтоПодразделения=Неопределено,0,СубконтоПодразделения.НомерСтроки);
							Если НомерСубконтоПодразделения <> 0 И НЕ ЗначениеЗаполнено(СоставСпособаСписания[Инд-1]["Субконто"+Строка(НомерСубконтоПодразделения)]) Тогда
								ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(СчетЗатратНУ, ПроводкаНУ.СубконтоДт, НомерСубконтоПодразделения, СтрокаСпецодежда.ПодразделениеОрганизации);
							КонецЕсли;
							
							// Заполняем кредитовую часть проводки
							Если ВедениеУчетаВременныхРазницБалансовымМетодом Тогда
								ПроводкаНУ.СчетКт						= СчетУчетаНУ;
								ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 1, СтрокаСпецодежда.Номенклатура);					
								ПроводкаНУ.ВидУчетаКт   				= СтрокаСпецодежда.ВидУчетаНУ;																			
								ПроводкаНУ.СтруктурноеПодразделениеКт 	= СтруктурноеПодразделение;
							КонецЕсли;	
						КонецЕсли;	                                                
					Иначе
						Если СтрокаСпецодежда.СпособПогашенияСтоимости = Перечисления.си_СпособыПогашенияСтоимости.Производственный Тогда
							БазаРаспределения = ТаблицаВыработкиМатериала.Скопировать();
							БазаРаспределения.Колонки.Добавить("Машина");
							БазаРаспределения.Колонки.Добавить("НоменклатурнаяГруппа");
							БазаРаспределения.Колонки.Оборотов.Имя = "Доля";
							Для Каждого СтрокаТЗ Из БазаРаспределения Цикл
								СтрокаТЗ.НоменклатурнаяГруппа = ОпределитьНоменклатурнуюГруппуДляОбъектаСтроительства(СтрокаТЗ.ОбъектСтроительства);
							КонецЦикла;
						Иначе
							БазаРаспределения = ТаблицаВыработкаСотрудников.Скопировать(Новый Структура("Сотрудник",СтрокаСпецодежда.Сотрудник));
						КонецЕсли;
						СтрокаСверткиБазыРаспределения = "";
						Если НомерСубконтоМашины <> 0 Тогда
							СтрокаСверткиБазыРаспределения = ?(СтрокаСверткиБазыРаспределения="","",СтрокаСверткиБазыРаспределения+",") + "Машина";
						КонецЕсли;
						Если НомерСубконтоНомГруппы <> 0 Тогда
							СтрокаСверткиБазыРаспределения = ?(СтрокаСверткиБазыРаспределения="","",СтрокаСверткиБазыРаспределения+",") + "НоменклатурнаяГруппа";
						КонецЕсли;
						Если НомерСубконтоОбъектыСтроительства <> 0 Тогда
							СтрокаСверткиБазыРаспределения = ?(СтрокаСверткиБазыРаспределения="","",СтрокаСверткиБазыРаспределения+",") + "ОбъектСтроительства";
						КонецЕсли;
						БазаРаспределения.Свернуть(СтрокаСверткиБазыРаспределения,"Доля");
						МассивКоэффициентовПоАналитике = БазаРаспределения.ВыгрузитьКолонку("Доля");
						МассивСуммПоАналитике = общ_ПереопределениеПроцедурБККлиентСервер.РаспределитьПропорционально(МассивСумм[Инд-1],МассивКоэффициентовПоАналитике);
						Если БазаРаспределения.Количество()=0 Тогда
							Проводка = Движения.Типовой.Добавить();
							Проводка.Период 		= НачалоДня(Дата);
							Проводка.Организация 	= Организация;
							Проводка.СтруктурноеПодразделениеДт = СтруктурноеПодразделение;
							Проводка.СтруктурноеПодразделениеКт = СтруктурноеПодразделение;
							Проводка.Сумма 			= МассивСумм[Инд-1];
							Проводка.СчетДт 		= СоставСпособаСписания[Инд-1].СчетЗатрат;
							ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(СоставСпособаСписания[Инд-1].СчетЗатрат, Проводка.СубконтоДт, 1, СоставСпособаСписания[Инд-1].Субконто1);
							ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(СоставСпособаСписания[Инд-1].СчетЗатрат, Проводка.СубконтоДт, 2, СоставСпособаСписания[Инд-1].Субконто2);
							ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(СоставСпособаСписания[Инд-1].СчетЗатрат, Проводка.СубконтоДт, 3, СоставСпособаСписания[Инд-1].Субконто3);
							Если НомерСубконтоПодразделения <> 0 И НЕ ЗначениеЗаполнено(СоставСпособаСписания[Инд-1]["Субконто"+Строка(НомерСубконтоПодразделения)]) Тогда
								ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(СоставСпособаСписания[Инд-1].СчетЗатрат, Проводка.СубконтоДт, НомерСубконтоПодразделения, СтрокаСпецодежда.ПодразделениеОрганизации);
							КонецЕсли;
							Проводка.СчетКт = СчетаУчетаСпецодежды.СпецоснасткаИСпецодеждаВЭксплуатации;
							Проводка.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконтоТиповые.Номенклатура] = СтрокаСпецодежда.Номенклатура;
							Проводка.Содержание = "Начислена амортизация спецодежды и инвентаря";
							
							Если ОрганизацияПлательщикНалогаНаПрибыль И ЗначениеЗаполнено(СтрокаСпецодежда.ВидУчетаНУ) Тогда
								ПроводкаНУ = Движения.Налоговый.Добавить();
								
								ПроводкаНУ.Период		= НачалоДня(Дата);
								ПроводкаНУ.Содержание	= "Начислена амортизация спецодежды и инвентаря";
								ПроводкаНУ.Организация	= Организация;
								ПроводкаНУ.СтруктурноеПодразделениеДт = СтруктурноеПодразделение;
								ПроводкаНУ.Сумма		= МассивСумм[Инд-1];
								
								СчетЗатратНУ = общ_ПереопределяемыеПроцедурыБКВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ",СоставСпособаСписания[Инд-1].СчетЗатрат));
								ПроводкаНУ.СчетДт			= СчетЗатратНУ;
								ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(СчетЗатратНУ, ПроводкаНУ.СубконтоДт, 1, СоставСпособаСписания[Инд-1].Субконто1);
								ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(СчетЗатратНУ, ПроводкаНУ.СубконтоДт, 2, СоставСпособаСписания[Инд-1].Субконто2);
								ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(СчетЗатратНУ, ПроводкаНУ.СубконтоДт, 3, СоставСпособаСписания[Инд-1].Субконто3);
								ПроводкаНУ.ВидУчетаДт   	= СтрокаСпецодежда.ВидУчетаНУ;	
								НомерСубконтоПодразделения 	= ?(СубконтоПодразделения=Неопределено,0,СубконтоПодразделения.НомерСтроки);
								Если НомерСубконтоПодразделения <> 0 И НЕ ЗначениеЗаполнено(СоставСпособаСписания[Инд-1]["Субконто"+Строка(НомерСубконтоПодразделения)]) Тогда
									ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(СчетЗатратНУ, ПроводкаНУ.СубконтоДт, НомерСубконтоПодразделения, СтрокаСпецодежда.ПодразделениеОрганизации);
								КонецЕсли;
								
								// Заполняем кредитовую часть проводки
								Если ВедениеУчетаВременныхРазницБалансовымМетодом Тогда
									ПроводкаНУ.СчетКт						= СчетУчетаНУ;
									ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 1, СтрокаСпецодежда.Номенклатура);					
									ПроводкаНУ.ВидУчетаКт   				= СтрокаСпецодежда.ВидУчетаНУ;																			
									ПроводкаНУ.СтруктурноеПодразделениеКт 	= СтруктурноеПодразделение;
								КонецЕсли;	
							КонецЕсли;	                                                
						Иначе
							Для АналитическийИнд = 1 По МассивКоэффициентовПоАналитике.Количество() Цикл
								Проводка = Движения.Типовой.Добавить();
								Проводка.Период 			= НачалоДня(Дата);
								Проводка.Организация 		= Организация;
								Проводка.СтруктурноеПодразделениеДт = СтруктурноеПодразделение;
								Проводка.СтруктурноеПодразделениеКт = СтруктурноеПодразделение;
								Проводка.Сумма 				= МассивСуммПоАналитике[АналитическийИнд-1];
								Проводка.СчетДт 			= СоставСпособаСписания[Инд-1].СчетЗатрат;
								Для НомерСубконто = 1 По 3 Цикл
									ЗначениеСубконто = Неопределено;
									Если НомерСубконтоМашины=НомерСубконто Тогда
										ЗначениеСубконто 	= БазаРаспределения[АналитическийИнд-1].Машина;
									КонецЕсли;
									Если НомерСубконтоНомГруппы=НомерСубконто Тогда
										ЗначениеСубконто 	= БазаРаспределения[АналитическийИнд-1].НоменклатурнаяГруппа;
									КонецЕсли;
									Если НомерСубконтоОбъектыСтроительства=НомерСубконто Тогда
										ЗначениеСубконто 	= БазаРаспределения[АналитическийИнд-1].ОбъектСтроительства;
									КонецЕсли;
									Если ЗначениеСубконто=Неопределено Тогда
										ЗначениеСубконто 	= СоставСпособаСписания[Инд-1]["Субконто"+Строка(НомерСубконто)];
									КонецЕсли;
									ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(СоставСпособаСписания[Инд-1].СчетЗатрат, Проводка.СубконтоДт, НомерСубконто, ЗначениеСубконто);
								КонецЦикла;
								Если НЕ СебестоимостьВРазрезеПодразделений И (НомерСубконтоОбъектыСтроительства<>0 И ЗначениеЗаполнено(БазаРаспределения[АналитическийИнд-1].ОбъектСтроительства)) Тогда
									ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(СоставСпособаСписания[Инд-1].СчетЗатрат, Проводка.СубконтоДт, НомерСубконтоПодразделения, БазаРаспределения[АналитическийИнд-1].ОбъектСтроительства.бсо_ПодразделениеЗатрат);
								ИначеЕсли НЕ СебестоимостьВРазрезеПодразделений И (НомерСубконтоНомГруппы<>0 И ЗначениеЗаполнено(БазаРаспределения[АналитическийИнд-1].НоменклатурнаяГруппа)) Тогда
									ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(СоставСпособаСписания[Инд-1].СчетЗатрат, Проводка.СубконтоДт, НомерСубконтоПодразделения, БазаРаспределения[АналитическийИнд-1].НоменклатурнаяГруппа.бсо_ОбъектСтроительства.бсо_ПодразделениеЗатрат);
								ИначеЕсли НомерСубконтоПодразделения <> 0 И НЕ ЗначениеЗаполнено(СоставСпособаСписания[Инд-1]["Субконто"+Строка(НомерСубконтоПодразделения)]) Тогда
									ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(СоставСпособаСписания[Инд-1].СчетЗатрат, Проводка.СубконтоДт, НомерСубконтоПодразделения, СтрокаСпецодежда.ПодразделениеОрганизации);
								КонецЕсли;
								Проводка.СчетКт 			= СчетаУчетаСпецодежды.СпецоснасткаИСпецодеждаВЭксплуатации;
								Проводка.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконтоТиповые.Номенклатура] = СтрокаСпецодежда.Номенклатура;
								Проводка.Содержание 		= "Начислена амортизация спецодежды и инвентаря";
								
								Если ОрганизацияПлательщикНалогаНаПрибыль И ЗначениеЗаполнено(СтрокаСпецодежда.ВидУчетаНУ) Тогда
									ПроводкаНУ = Движения.Налоговый.Добавить();
									
									ПроводкаНУ.Период		= НачалоДня(Дата);
									ПроводкаНУ.Содержание	= "Начислена амортизация спецодежды и инвентаря";
									ПроводкаНУ.Организация	= Организация;
									ПроводкаНУ.СтруктурноеПодразделениеДт = СтруктурноеПодразделение;
									ПроводкаНУ.Сумма		= МассивСуммПоАналитике[АналитическийИнд-1];
									
									СчетЗатратНУ = общ_ПереопределяемыеПроцедурыБКВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ",СоставСпособаСписания[Инд-1].СчетЗатрат));
									ПроводкаНУ.СчетДт		= СчетЗатратНУ;
									ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(СчетЗатратНУ, ПроводкаНУ.СубконтоДт, 1, ?(НомерСубконтоМашины=1,БазаРаспределения[АналитическийИнд-1].Машина,?(НомерСубконтоНомГруппы=1,БазаРаспределения[АналитическийИнд-1].НоменклатурнаяГруппа,СоставСпособаСписания[Инд-1].Субконто1)));
									ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(СчетЗатратНУ, ПроводкаНУ.СубконтоДт, 2, ?(НомерСубконтоМашины=2,БазаРаспределения[АналитическийИнд-1].Машина,?(НомерСубконтоНомГруппы=2,БазаРаспределения[АналитическийИнд-1].НоменклатурнаяГруппа,СоставСпособаСписания[Инд-1].Субконто2)));
									ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(СчетЗатратНУ, ПроводкаНУ.СубконтоДт, 3, ?(НомерСубконтоМашины=3,БазаРаспределения[АналитическийИнд-1].Машина,?(НомерСубконтоНомГруппы=3,БазаРаспределения[АналитическийИнд-1].НоменклатурнаяГруппа,СоставСпособаСписания[Инд-1].Субконто3)));
									ПроводкаНУ.ВидУчетаДт   = СтрокаСпецодежда.ВидУчетаНУ;
									НомерСубконтоПодразделения = ?(СубконтоПодразделения=Неопределено,0,СубконтоПодразделения.НомерСтроки);
									Если НомерСубконтоПодразделения <> 0 И НЕ ЗначениеЗаполнено(СоставСпособаСписания[Инд-1]["Субконто"+Строка(НомерСубконтоПодразделения)]) Тогда
										ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(СчетЗатратНУ, ПроводкаНУ.СубконтоДт, НомерСубконтоПодразделения, СтрокаСпецодежда.ПодразделениеОрганизации);
									КонецЕсли;
									
									// Заполняем кредитовую часть проводки
									Если ВедениеУчетаВременныхРазницБалансовымМетодом Тогда
										ПроводкаНУ.СчетКт						= СчетУчетаНУ;
										ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 1, СтрокаСпецодежда.Номенклатура);					
										ПроводкаНУ.ВидУчетаКт   				= СтрокаСпецодежда.ВидУчетаНУ;																			
										ПроводкаНУ.СтруктурноеПодразделениеКт	= СтруктурноеПодразделение;
									КонецЕсли;	
								КонецЕсли;	                                                
							КонецЦикла;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		// списание амортизированной суммы
		Движение = Движения.си_МатериалыВЭксплуатации.ДобавитьРасход();
		Движение.Период 						= Дата;
		ЗаполнитьЗначенияСвойств(Движение,СтрокаСпецодежда);
		Движение.ВидДвижения					= ВидДвиженияНакопления.Расход;
		Движение.Организация 					= Организация;
		Движение.СтруктурноеПодразделение 		= СтруктурноеПодразделение;
		Движение.Количество 					= СтрокаСпецодежда.Количество;
		Движение.ВидУчетаНУ 					= СтрокаСпецодежда.ВидУчетаНУ;
		Движение.Стоимость 						= СтрокаСпецодежда.Стоимость;
		Движение.СписаннаяСтоимость 			= СтрокаСпецодежда.СписаннаяСтоимость;
		Движение.ОстаточныйСрокИспользования 	= СтрокаСпецодежда.ОстаточныйСрокИспользования;
		Движение.КодОперации					= Перечисления.си_КодыОперацийМатериалыВЭксплуатации.ПогашениеСтоимости;
		// увеличение списанной стоимости
		Движение = Движения.си_МатериалыВЭксплуатации.ДобавитьПриход();
		Движение.Период 						= Дата;
		ЗаполнитьЗначенияСвойств(Движение,СтрокаСпецодежда);
		Движение.ВидДвижения					= ВидДвиженияНакопления.Приход;
		Движение.Организация 					= Организация;
		Движение.СтруктурноеПодразделение 		= СтруктурноеПодразделение;
		Движение.ВидУчетаНУ 					= СтрокаСпецодежда.ВидУчетаНУ;
		Движение.Количество 					= СтрокаСпецодежда.Количество;
		Движение.Стоимость 						= СтрокаСпецодежда.Стоимость - СуммаАмортизации;
		Движение.СписаннаяСтоимость 			= СтрокаСпецодежда.СписаннаяСтоимость + СуммаАмортизации;
		Движение.ОстаточныйСрокИспользования 	= СтрокаСпецодежда.ОстаточныйСрокИспользования - РазмерПогашенияСрокаИспользования;
		Движение.КодОперации					= Перечисления.си_КодыОперацийМатериалыВЭксплуатации.ПогашениеСтоимости;
		
		СтрокаСпецодежда.Стоимость = Движение.Стоимость;
		СтрокаСпецодежда.СписаннаяСтоимость = Движение.СписаннаяСтоимость;
		СтрокаСпецодежда.ОстаточныйСрокИспользования = Движение.ОстаточныйСрокИспользования;
	КонецЦикла;
	
	Движения.си_МатериалыВЭксплуатации.Записывать = Истина;
	Движения.Налоговый.Записывать = Истина;
	Движения.Типовой.Записывать = Истина;
КонецПроцедуры

// Зарегистрировать движения амортизация спецодежды в эксплуатации
//
Процедура ЗарегистрироватьДвиженияАмортизацияСпецодеждыВЭксплуатацииБезВыработкиСотрудников(Реквизиты, ТаблицаСпецодежда,ТаблицаВыработкаСотрудников,ТаблицаВыработкаМатериалов, Движения, Отказ, ТолькоОперативныйУчет = Ложь) Экспорт
	
	СчетаУчетаСпецодежды		= си_УчетСпецодеждыСерверПовтИсп.ПолучитьСчетаУчетаСпецодежды();
	
	СчетУчетаНУ = общ_ПереопределяемыеПроцедурыБКВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ",СчетаУчетаСпецодежды.СпецоснасткаИСпецодеждаВЭксплуатации));
	ВедениеУчетаВременныхРазницБалансовымМетодом 	= Реквизиты.ВедениеУчетаВременныхРазницБалансовымМетодом;
	ОрганизацияПлательщикНалогаНаПрибыль 			= Реквизиты.ОрганизацияПлательщикНалогаНаПрибыль;
	Дата 											= Реквизиты.Дата;
	Организация 									= Реквизиты.Организация;
	СтруктурноеПодразделение 						= Реквизиты.СтруктурноеПодразделение;
	УчетПоХарактеристикам							= Константы.си_УчетСпецодеждыПоХарактеристикам.Получить();
	
	Для Каждого СтрокаСпецодежда Из ТаблицаСпецодежда Цикл	
		РазмерПогашенияСрокаИспользования = 1;
		Если СтрокаСпецодежда.СпособПогашенияСтоимости = Перечисления.си_СпособыПогашенияСтоимости.Производственный Тогда
			СуммаАмортизации 			= 0;
			СтруктураПоискаВыработка 	= Новый Структура("Номенклатура,ПодразделениеОрганизации,ДокументПередачи,Сотрудник,НазначениеИспользования");
			Если УчетПоХарактеристикам Тогда
				СтруктураПоискаВыработка.Вставить("Характеристика");
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(СтруктураПоискаВыработка,СтрокаСпецодежда);
			ТаблицаВыработкиМатериала 	= ТаблицаВыработкаМатериалов.Скопировать(СтруктураПоискаВыработка);
			ИтогоОборотов 				= ТаблицаВыработкиМатериала.Итог("Оборотов");
			СуммаАмортизации 			= ?(СтрокаСпецодежда.ОстаточныйСрокИспользования>ИтогоОборотов,Окр(СтрокаСпецодежда.Стоимость/СтрокаСпецодежда.ОстаточныйСрокИспользования*ИтогоОборотов,2),СтрокаСпецодежда.Стоимость);
			РазмерПогашенияСрокаИспользования = Мин(ИтогоОборотов,СтрокаСпецодежда.ОстаточныйСрокИспользования);
		Иначе
			СуммаАмортизации = ?(СтрокаСпецодежда.ОстаточныйСрокИспользования>1,Окр(СтрокаСпецодежда.Стоимость/СтрокаСпецодежда.ОстаточныйСрокИспользования,2),СтрокаСпецодежда.Стоимость);
		КонецЕсли;
		Если СуммаАмортизации = 0 Тогда
			Если СтрокаСпецодежда.ОстаточныйСрокИспользования = 0 ИЛИ РазмерПогашенияСрокаИспользования=0 Тогда 
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		СоставСпособаСписания 	= СтрокаСпецодежда.Способы;
		МассивКоэффициентов 	= СоставСпособаСписания.ВыгрузитьКолонку("Коэффициент");
		МассивСумм 				= общ_ПереопределениеПроцедурБККлиентСервер.РаспределитьПропорционально(СуммаАмортизации,МассивКоэффициентов);
		Если НЕ ТолькоОперативныйУчет Тогда
			Если Не СтрокаСпецодежда.НазначениеИспользования.СпособПогашенияСтоимости = Перечисления.си_СпособыПогашенияСтоимости.ПриПередачеВЭксплуатацию 
				И Не МассивСумм = Неопределено Тогда 
				Для Инд = 1 По МассивКоэффициентов.Количество() Цикл
					СубконтоНомГруппы 					= СоставСпособаСписания[Инд-1].СчетЗатрат.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоТиповые.НоменклатурныеГруппы);
					НомерСубконтоНомГруппы 				= ?(СубконтоНомГруппы=Неопределено,0,СубконтоНомГруппы.НомерСтроки);
					СубконтоПодразделения				= СоставСпособаСписания[Инд-1].СчетЗатрат.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Подразделения);
					НомерСубконтоПодразделения 			= ?(СубконтоПодразделения=Неопределено,0,СубконтоПодразделения.НомерСтроки);
					Если НомерСубконтоНомГруппы<1 Тогда
						Проводка = Движения.Типовой.Добавить();
						Проводка.Период 			= НачалоДня(Дата);
						Проводка.Организация 		= Организация;
						Проводка.СтруктурноеПодразделениеДт = СтруктурноеПодразделение;
						Проводка.СтруктурноеПодразделениеКт = СтруктурноеПодразделение;
						Проводка.Сумма 				= МассивСумм[Инд-1];
						Проводка.СчетДт 			= СоставСпособаСписания[Инд-1].СчетЗатрат;
						ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(СоставСпособаСписания[Инд-1].СчетЗатрат, Проводка.СубконтоДт, 1, СоставСпособаСписания[Инд-1].Субконто1);
						ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(СоставСпособаСписания[Инд-1].СчетЗатрат, Проводка.СубконтоДт, 2, СоставСпособаСписания[Инд-1].Субконто2);
						ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(СоставСпособаСписания[Инд-1].СчетЗатрат, Проводка.СубконтоДт, 3, СоставСпособаСписания[Инд-1].Субконто3);
						Если НомерСубконтоПодразделения <> 0 И НЕ ЗначениеЗаполнено(СоставСпособаСписания[Инд-1]["Субконто"+Строка(НомерСубконтоПодразделения)]) Тогда
							ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(СоставСпособаСписания[Инд-1].СчетЗатрат, Проводка.СубконтоДт, НомерСубконтоПодразделения, СтрокаСпецодежда.ПодразделениеОрганизации);
						КонецЕсли;
						Проводка.СчетКт = СчетаУчетаСпецодежды.СпецоснасткаИСпецодеждаВЭксплуатации;
						Проводка.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконтоТиповые.Номенклатура] = СтрокаСпецодежда.Номенклатура;
						Проводка.Содержание = "Начислена амортизация спецодежды и инвентаря";
						
						Если ОрганизацияПлательщикНалогаНаПрибыль И ЗначениеЗаполнено(СтрокаСпецодежда.ВидУчетаНУ) Тогда
							ПроводкаНУ = Движения.Налоговый.Добавить();
							
							ПроводкаНУ.Период		= НачалоДня(Дата);
							ПроводкаНУ.Содержание	= "Начислена амортизация спецодежды и инвентаря";
							ПроводкаНУ.Организация	= Организация;
							ПроводкаНУ.СтруктурноеПодразделениеДт = СтруктурноеПодразделение;
							ПроводкаНУ.Сумма		= МассивСумм[Инд-1];
							
							СчетЗатратНУ = общ_ПереопределяемыеПроцедурыБКВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ",СоставСпособаСписания[Инд-1].СчетЗатрат));
							ПроводкаНУ.СчетДт		= СчетЗатратНУ;
							ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(СчетЗатратНУ, ПроводкаНУ.СубконтоДт, 1, СоставСпособаСписания[Инд-1].Субконто1);
							ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(СчетЗатратНУ, ПроводкаНУ.СубконтоДт, 2, СоставСпособаСписания[Инд-1].Субконто2);
							ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(СчетЗатратНУ, ПроводкаНУ.СубконтоДт, 3, СоставСпособаСписания[Инд-1].Субконто3);
							ПроводкаНУ.ВидУчетаДт   = СтрокаСпецодежда.ВидУчетаНУ;								
							СубконтоПодразделения	= СчетЗатратНУ.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Подразделения);
							НомерСубконтоПодразделения = ?(СубконтоПодразделения=Неопределено,0,СубконтоПодразделения.НомерСтроки);
							Если НомерСубконтоПодразделения <> 0 И НЕ ЗначениеЗаполнено(СоставСпособаСписания[Инд-1]["Субконто"+Строка(НомерСубконтоПодразделения)]) Тогда
								ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(СчетЗатратНУ, ПроводкаНУ.СубконтоДт, НомерСубконтоПодразделения, СтрокаСпецодежда.ПодразделениеОрганизации);
							КонецЕсли;
							
							// Заполняем кредитовую часть проводки
							Если ВедениеУчетаВременныхРазницБалансовымМетодом Тогда
								ПроводкаНУ.СчетКт						= СчетУчетаНУ;
								ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 1, СтрокаСпецодежда.Номенклатура);					
								ПроводкаНУ.ВидУчетаКт   				= СтрокаСпецодежда.ВидУчетаНУ;																			
								ПроводкаНУ.СтруктурноеПодразделениеКт 	= СтруктурноеПодразделение;
							КонецЕсли;	
						КонецЕсли;	                                                
					Иначе
						Если СтрокаСпецодежда.СпособПогашенияСтоимости = Перечисления.си_СпособыПогашенияСтоимости.Производственный Тогда
							БазаРаспределения = ТаблицаВыработкиМатериала.Скопировать();
							БазаРаспределения.Колонки.Добавить("Машина");
							БазаРаспределения.Колонки.Добавить("НоменклатурнаяГруппа");
							БазаРаспределения.Колонки.Оборотов.Имя = "Доля";
						Иначе
							БазаРаспределения = ТаблицаВыработкаМатериалов.Скопировать();
							БазаРаспределения.Колонки.Добавить("Машина");
							БазаРаспределения.Колонки.Добавить("НоменклатурнаяГруппа");
							БазаРаспределения.Колонки.Оборотов.Имя = "Доля";
						КонецЕсли;
						СтрокаСверткиБазыРаспределения = "";
						Если НомерСубконтоНомГруппы <> 0 Тогда
							СтрокаСверткиБазыРаспределения = ?(СтрокаСверткиБазыРаспределения="","",СтрокаСверткиБазыРаспределения+",") + "НоменклатурнаяГруппа";
						КонецЕсли;
						БазаРаспределения.Свернуть(СтрокаСверткиБазыРаспределения,"Доля");
						
						БазаРаспределения.Свернуть("НоменклатурнаяГруппа","Доля");
						
						МассивКоэффициентовПоАналитике = БазаРаспределения.ВыгрузитьКолонку("Доля");
						МассивСуммПоАналитике = общ_ПереопределениеПроцедурБККлиентСервер.РаспределитьПропорционально(МассивСумм[Инд-1],МассивКоэффициентовПоАналитике);
						Если БазаРаспределения.Количество()=0 Тогда
							Проводка = Движения.Типовой.Добавить();
							Проводка.Период 		= НачалоДня(Дата);
							Проводка.Организация 	= Организация;
							Проводка.СтруктурноеПодразделениеДт = СтруктурноеПодразделение;
							Проводка.СтруктурноеПодразделениеКт = СтруктурноеПодразделение;
							Проводка.Сумма 			= МассивСумм[Инд-1];
							Проводка.СчетДт 		= СоставСпособаСписания[Инд-1].СчетЗатрат;
							ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(СоставСпособаСписания[Инд-1].СчетЗатрат, Проводка.СубконтоДт, 1, СоставСпособаСписания[Инд-1].Субконто1);
							ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(СоставСпособаСписания[Инд-1].СчетЗатрат, Проводка.СубконтоДт, 2, СоставСпособаСписания[Инд-1].Субконто2);
							ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(СоставСпособаСписания[Инд-1].СчетЗатрат, Проводка.СубконтоДт, 3, СоставСпособаСписания[Инд-1].Субконто3);
							Если НомерСубконтоПодразделения <> 0 И НЕ ЗначениеЗаполнено(СоставСпособаСписания[Инд-1]["Субконто"+Строка(НомерСубконтоПодразделения)]) Тогда
								ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(СоставСпособаСписания[Инд-1].СчетЗатрат, Проводка.СубконтоДт, НомерСубконтоПодразделения, СтрокаСпецодежда.ПодразделениеОрганизации);
							КонецЕсли;
							Проводка.СчетКт = СчетаУчетаСпецодежды.СпецоснасткаИСпецодеждаВЭксплуатации;
							Проводка.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконтоТиповые.Номенклатура] = СтрокаСпецодежда.Номенклатура;
							Проводка.Содержание = "Начислена амортизация спецодежды и инвентаря";
							
							Если ОрганизацияПлательщикНалогаНаПрибыль И ЗначениеЗаполнено(СтрокаСпецодежда.ВидУчетаНУ) Тогда
								ПроводкаНУ = Движения.Налоговый.Добавить();
								
								ПроводкаНУ.Период		= НачалоДня(Дата);
								ПроводкаНУ.Содержание	= "Начислена амортизация спецодежды и инвентаря";
								ПроводкаНУ.Организация	= Организация;
								ПроводкаНУ.СтруктурноеПодразделениеДт = СтруктурноеПодразделение;
								ПроводкаНУ.Сумма		= МассивСумм[Инд-1];
								
								СчетЗатратНУ = общ_ПереопределяемыеПроцедурыБКВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ",СоставСпособаСписания[Инд-1].СчетЗатрат));
								ПроводкаНУ.СчетДт			= СчетЗатратНУ;
								ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(СчетЗатратНУ, ПроводкаНУ.СубконтоДт, 1, СоставСпособаСписания[Инд-1].Субконто1);
								ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(СчетЗатратНУ, ПроводкаНУ.СубконтоДт, 2, СоставСпособаСписания[Инд-1].Субконто2);
								ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(СчетЗатратНУ, ПроводкаНУ.СубконтоДт, 3, СоставСпособаСписания[Инд-1].Субконто3);
								ПроводкаНУ.ВидУчетаДт   	= СтрокаСпецодежда.ВидУчетаНУ;								
								СубконтоПодразделения		= СчетЗатратНУ.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Подразделения);
								НомерСубконтоПодразделения 	= ?(СубконтоПодразделения=Неопределено,0,СубконтоПодразделения.НомерСтроки);
								Если НомерСубконтоПодразделения <> 0 И НЕ ЗначениеЗаполнено(СоставСпособаСписания[Инд-1]["Субконто"+Строка(НомерСубконтоПодразделения)]) Тогда
									ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(СчетЗатратНУ, ПроводкаНУ.СубконтоДт, НомерСубконтоПодразделения, СтрокаСпецодежда.ПодразделениеОрганизации);
								КонецЕсли;
								
								// Заполняем кредитовую часть проводки
								Если ВедениеУчетаВременныхРазницБалансовымМетодом Тогда
									ПроводкаНУ.СчетКт						= СчетУчетаНУ;
									ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 1, СтрокаСпецодежда.Номенклатура);					
									ПроводкаНУ.ВидУчетаКт   				= СтрокаСпецодежда.ВидУчетаНУ;																			
									ПроводкаНУ.СтруктурноеПодразделениеКт 	= СтруктурноеПодразделение;
								КонецЕсли;	
							КонецЕсли;	                                                
						Иначе
							Для АналитическийИнд = 1 По МассивКоэффициентовПоАналитике.Количество() Цикл
								Проводка = Движения.Типовой.Добавить();
								Проводка.Период 			= НачалоДня(Дата);
								Проводка.Организация 		= Организация;
								Проводка.СтруктурноеПодразделениеДт = СтруктурноеПодразделение;
								Проводка.СтруктурноеПодразделениеКт = СтруктурноеПодразделение;
								Проводка.Сумма 				= МассивСуммПоАналитике[АналитическийИнд-1];
								Проводка.СчетДт 			= СоставСпособаСписания[Инд-1].СчетЗатрат;
								Для НомерСубконто = 1 По 3 Цикл
									ЗначениеСубконто = Неопределено;
									Если НомерСубконтоНомГруппы=НомерСубконто Тогда
										ЗначениеСубконто 	= БазаРаспределения[АналитическийИнд-1].НоменклатурнаяГруппа;
									КонецЕсли;
									Если ЗначениеСубконто=Неопределено Тогда
										ЗначениеСубконто 	= СоставСпособаСписания[Инд-1]["Субконто"+Строка(НомерСубконто)];
									КонецЕсли;
									ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(СоставСпособаСписания[Инд-1].СчетЗатрат, Проводка.СубконтоДт, НомерСубконто, ЗначениеСубконто);
								КонецЦикла;
								ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(СоставСпособаСписания[Инд-1].СчетЗатрат, Проводка.СубконтоДт, НомерСубконтоПодразделения, СтрокаСпецодежда.ПодразделениеОрганизации);
								Если НомерСубконтоПодразделения <> 0 И НЕ ЗначениеЗаполнено(СоставСпособаСписания[Инд-1]["Субконто"+Строка(НомерСубконтоПодразделения)]) Тогда
									ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(СоставСпособаСписания[Инд-1].СчетЗатрат, Проводка.СубконтоДт, НомерСубконтоПодразделения, СтрокаСпецодежда.ПодразделениеОрганизации);
								КонецЕсли;
								Проводка.СчетКт 			= СчетаУчетаСпецодежды.СпецоснасткаИСпецодеждаВЭксплуатации;
								Проводка.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконтоТиповые.Номенклатура] = СтрокаСпецодежда.Номенклатура;
								Проводка.Содержание 		= "Начислена амортизация спецодежды и инвентаря";
								
								Если ОрганизацияПлательщикНалогаНаПрибыль И ЗначениеЗаполнено(СтрокаСпецодежда.ВидУчетаНУ) Тогда
									ПроводкаНУ = Движения.Налоговый.Добавить();
									
									ПроводкаНУ.Период		= НачалоДня(Дата);
									ПроводкаНУ.Содержание	= "Начислена амортизация спецодежды и инвентаря";
									ПроводкаНУ.Организация	= Организация;
									ПроводкаНУ.СтруктурноеПодразделениеДт = СтруктурноеПодразделение;
									ПроводкаНУ.Сумма		= МассивСуммПоАналитике[АналитическийИнд-1];
									
									СчетЗатратНУ = общ_ПереопределяемыеПроцедурыБКВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ",СоставСпособаСписания[Инд-1].СчетЗатрат));
									ПроводкаНУ.СчетДт		= СчетЗатратНУ;
									//////////////
									Для НомерСубконто = 1 По 3 Цикл
										ЗначениеСубконто = Неопределено;
										Если НомерСубконтоНомГруппы=НомерСубконто Тогда
											ЗначениеСубконто 	= БазаРаспределения[АналитическийИнд-1].НоменклатурнаяГруппа;
										КонецЕсли;
										Если ЗначениеСубконто=Неопределено Тогда
											ЗначениеСубконто 	= СоставСпособаСписания[Инд-1]["Субконто"+Строка(НомерСубконто)];
										КонецЕсли;
										ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(СчетЗатратНУ, ПроводкаНУ.СубконтоДт, НомерСубконто, ЗначениеСубконто);
									КонецЦикла;
									ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(СчетЗатратНУ, ПроводкаНУ.СубконтоДт, НомерСубконтоПодразделения, СтрокаСпецодежда.ПодразделениеОрганизации);
									Если НомерСубконтоПодразделения <> 0 И НЕ ЗначениеЗаполнено(СоставСпособаСписания[Инд-1]["Субконто"+Строка(НомерСубконтоПодразделения)]) Тогда
										ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(СчетЗатратНУ, ПроводкаНУ.СубконтоДт, НомерСубконтоПодразделения, СтрокаСпецодежда.ПодразделениеОрганизации);
									КонецЕсли;
									ПроводкаНУ.ВидУчетаДт   = СтрокаСпецодежда.ВидУчетаНУ;								
									СубконтоПодразделения	= СчетЗатратНУ.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Подразделения);
									НомерСубконтоПодразделения = ?(СубконтоПодразделения=Неопределено,0,СубконтоПодразделения.НомерСтроки);
									Если НомерСубконтоПодразделения <> 0 И НЕ ЗначениеЗаполнено(СоставСпособаСписания[Инд-1]["Субконто"+Строка(НомерСубконтоПодразделения)]) Тогда
										ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(СчетЗатратНУ, ПроводкаНУ.СубконтоДт, НомерСубконтоПодразделения, СтрокаСпецодежда.ПодразделениеОрганизации);
									КонецЕсли;
									
									// Заполняем кредитовую часть проводки
									Если ВедениеУчетаВременныхРазницБалансовымМетодом Тогда
										ПроводкаНУ.СчетКт						= СчетУчетаНУ;
										ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 1, СтрокаСпецодежда.Номенклатура);					
										ПроводкаНУ.ВидУчетаКт   				= СтрокаСпецодежда.ВидУчетаНУ;																			
										ПроводкаНУ.СтруктурноеПодразделениеКт	= СтруктурноеПодразделение;
									КонецЕсли;	
								КонецЕсли;	                                                
							КонецЦикла;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		Если Не СуммаАмортизации = 0 ИЛИ Не РазмерПогашенияСрокаИспользования = 0 Тогда
			// списание амортизированной суммы
			Движение = Движения.си_МатериалыВЭксплуатации.ДобавитьРасход();
			Движение.Период 						= Дата;
			ЗаполнитьЗначенияСвойств(Движение,СтрокаСпецодежда);
			Движение.ВидДвижения					= ВидДвиженияНакопления.Расход;
			Движение.Организация 					= Организация;
			Движение.СтруктурноеПодразделение 		= СтруктурноеПодразделение;
			Движение.Количество 					= СтрокаСпецодежда.Количество;
			Движение.ВидУчетаНУ 					= СтрокаСпецодежда.ВидУчетаНУ;
			Движение.Стоимость 						= СтрокаСпецодежда.Стоимость;
			Движение.СписаннаяСтоимость 			= СтрокаСпецодежда.СписаннаяСтоимость;
			Движение.ОстаточныйСрокИспользования 	= СтрокаСпецодежда.ОстаточныйСрокИспользования;
			Движение.КодОперации					= Перечисления.си_КодыОперацийМатериалыВЭксплуатации.ПогашениеСтоимости;
			// увеличение списанной стоимости
			Движение = Движения.си_МатериалыВЭксплуатации.ДобавитьПриход();
			Движение.Период 						= Дата;
			ЗаполнитьЗначенияСвойств(Движение,СтрокаСпецодежда);
			Движение.ВидДвижения					= ВидДвиженияНакопления.Приход;
			Движение.Организация 					= Организация;
			Движение.СтруктурноеПодразделение 		= СтруктурноеПодразделение;
			Движение.ВидУчетаНУ 					= СтрокаСпецодежда.ВидУчетаНУ;
			Движение.Количество 					= СтрокаСпецодежда.Количество;
			Движение.Стоимость 						= СтрокаСпецодежда.Стоимость - СуммаАмортизации;
			Движение.СписаннаяСтоимость 			= СтрокаСпецодежда.СписаннаяСтоимость + СуммаАмортизации;
			Движение.ОстаточныйСрокИспользования 	= СтрокаСпецодежда.ОстаточныйСрокИспользования - РазмерПогашенияСрокаИспользования;
			Движение.КодОперации					= Перечисления.си_КодыОперацийМатериалыВЭксплуатации.ПогашениеСтоимости;
			
			СтрокаСпецодежда.Стоимость = Движение.Стоимость;
			СтрокаСпецодежда.СписаннаяСтоимость = Движение.СписаннаяСтоимость;
			СтрокаСпецодежда.ОстаточныйСрокИспользования = Движение.ОстаточныйСрокИспользования;
		КонецЕсли;
		
	КонецЦикла;
	
	Движения.си_МатериалыВЭксплуатации.Записывать = Истина;
	Движения.Налоговый.Записывать = Истина;
	Движения.Типовой.Записывать = Истина;
КонецПроцедуры

// передача в эксплуатацию и возврат - ордерный склад

// учет передачи в эксплуатацию

// Подготовить таблицу передачи в эксплуатацию
//
Функция ПодготовитьТаблицуПередачиВЭксплуатацию(ТаблицаМатериалы,ПараметрыПроведения,Движения,Отказ) Экспорт
	Возврат си_ПроцедурыМеханизмаЗащиты.ПодготовитьТаблицуПередачиВЭксплуатацию(ТаблицаМатериалы,ПараметрыПроведения,Движения,Отказ);
КонецФункции

Процедура СформироватьТаблицуПередачиВЭксплуатациюСУчетомОстатков(ТаблицаСпецодежда,ПараметрыПроведения,ПоСотруднику,ДокументСсылка,ТекстВидМатериалов,Отказ)
	си_ПроцедурыМеханизмаЗащиты.СформироватьТаблицуПередачиВЭксплуатациюСУчетомОстатков(ТаблицаСпецодежда,ПараметрыПроведения,ПоСотруднику,ДокументСсылка,ТекстВидМатериалов,Отказ);
КонецПроцедуры

// движения по регистру си_МатериалыВЭксплуатации

// Зарегистрировать движения материалы в эксплуатации
//
Процедура ЗарегистрироватьДвиженияМатериалыВЭксплуатации(Реквизиты, ТаблицаМатериалы, Движения, Отказ) Экспорт
	
	ТЧНаПроверку = ТаблицаМатериалы.Скопировать();
	ТЧНаПроверку.Очистить();
	
	Для Каждого СтрокаМатериал Из ТаблицаМатериалы Цикл
		Движение = Движения.си_МатериалыВЭксплуатации.Добавить();
		Движение.ВидДвижения 				= ВидДвиженияНакопления[СтрокаМатериал.ВидДвижения];
		Движение.Период 					= Реквизиты.Дата;
		Движение.Организация 				= Реквизиты.Организация;
		Движение.СтруктурноеПодразделение 	= СтрокаМатериал.СтруктурноеПодразделение;
		Движение.ПодразделениеОрганизации 	= СтрокаМатериал.ПодразделениеОрганизации;
		Движение.Номенклатура 				= СтрокаМатериал.Номенклатура;
		Движение.ДокументПередачи			= СтрокаМатериал.ДокументПередачи;
		Движение.Сотрудник 					= СтрокаМатериал.Сотрудник;
		Движение.НазначениеИспользования 	= СтрокаМатериал.НазначениеИспользования;
		Движение.ОстаточныйСрокИспользования = СтрокаМатериал.ОстаточныйСрокИспользования;
		Движение.КодОперации 				= СтрокаМатериал.КодОперации;
		Движение.Количество 				= СтрокаМатериал.Количество;
		Движение.СписаннаяСтоимость 		= СтрокаМатериал.СписаннаяСтоимость;
		Движение.Стоимость 					= СтрокаМатериал.Стоимость;
		Движение.ВидУчетаНУ 				= ?(Реквизиты.НеобходимостьОтраженияВНУ,Реквизиты.ВидУчетаНУ,Справочники.ВидыУчетаНУ.ПустаяСсылка());
		Движение.Характеристика				= СтрокаМатериал.Характеристика;
		
		Если СтрокаМатериал.ВидДвижения ="Расход" Тогда
			СтрокаТЧ = ТЧНаПроверку.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТЧ,СтрокаМатериал);
		КонецЕсли;
		
	КонецЦикла;
	
	Движения.си_МатериалыВЭксплуатации.Записывать = Истина;
	Движения.си_МатериалыВЭксплуатации.Записать();
	
	Отказ = ?(Отказ, Отказ, Не ПроверкаНаОтрицательныйОстаток("си_МатериалыВЭксплуатации",Реквизиты.Организация,Реквизиты.Склад,
	ТЧНаПроверку.ВыгрузитьКолонку("Номенклатура"),Реквизиты.Дата,Реквизиты.СтруктурноеПодразделение,Реквизиты.ПодразделениеОрганизации,
	ТЧНаПроверку.ВыгрузитьКолонку("Сотрудник"),ТЧНаПроверку.ВыгрузитьКолонку("ДокументПередачи"),,ТЧНаПроверку.ВыгрузитьКолонку("НазначениеИспользования"),
	ТЧНаПроверку.ВыгрузитьКолонку("Характеристика"),ТЧНаПроверку.ВыгрузитьКолонку("ОстаточныйСрокИспользования"),Реквизиты.ВидУчетаНУ,Неопределено));
	
КонецПроцедуры

// движения по регистру си_МатериалыНаСкладе

// Зарегистрировать движения материалы бывшие в эксплуатации
//
Процедура ЗарегистрироватьДвиженияМатериалыБывшиеВЭксплуатации(Реквизиты, ТаблицаМатериалы, Движения, Отказ) Экспорт
	СчетаУчетаСпецодежды		= си_УчетСпецодеждыСерверПовтИсп.ПолучитьСчетаУчетаСпецодежды();
	
	ТЧНаПроверку = ТаблицаМатериалы.Скопировать();
	ТЧНаПроверку.Очистить();
	
	Для Каждого СтрокаМатериал Из ТаблицаМатериалы Цикл
		Если ТаблицаМатериалы.Колонки.Найти("СчетПередачиБУ")<>Неопределено Тогда
			Если СтрокаМатериал.СчетПередачиБУ <> СчетаУчетаСпецодежды.СпецоснасткаИСпецодеждаНаСкладе Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаМатериал.СостояниеСпецодежды) Тогда
			Если Не СтрокаМатериал.СостояниеСпецодежды = Перечисления.си_СостояниеСпецодеждыИИнвентаряНаСкладе.НаСкладеБывшаяВУпотреблении Тогда 
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;
		
		// расход из регистра материалы бывшие в употреблении
		Движение = Движения.си_МатериалыНаСкладе.Добавить();
		Движение.ВидДвижения 					= ВидДвиженияНакопления[СтрокаМатериал.ВидДвиженияБУ];
		Движение.Период 						= Реквизиты.Дата;
		Движение.Организация 					= Реквизиты.Организация;
		Движение.СтруктурноеПодразделение 		= СтрокаМатериал.СтруктурноеПодразделение;
		Движение.Номенклатура 					= СтрокаМатериал.Номенклатура;
		Движение.ДокументПередачи 				= СтрокаМатериал.ДокументПередачи;
		Движение.НазначениеИспользования 		= СтрокаМатериал.НазначениеИспользования;
		Движение.Количество 					= СтрокаМатериал.Количество * СтрокаМатериал.Коэффициент;
		Движение.Склад 							= СтрокаМатериал.Склад;
		Движение.Стоимость 						= СтрокаМатериал.Стоимость;
		Движение.СписаннаяСтоимость 			= СтрокаМатериал.СписаннаяСтоимость;
		Движение.ВидУчетаНУ 					= ?(Реквизиты.НеобходимостьОтраженияВНУ,Реквизиты.ВидУчетаНУ,Справочники.ВидыУчетаНУ.ПустаяСсылка());
		Движение.ОстаточныйСрокИспользования	= СтрокаМатериал.ОстаточныйСрокИспользования;
		Движение.КодОперации 					= СтрокаМатериал.КодОперации;
		Движение.Характеристика					= СтрокаМатериал.Характеристика;
		Движение.ДокументВозврата				= СтрокаМатериал.ДокументВозврата;
		Если СтрокаМатериал.ВидДвиженияБУ ="Расход" Тогда
			СтрокаТЧ = ТЧНаПроверку.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТЧ,СтрокаМатериал);
		КонецЕсли;
	КонецЦикла;
	Движения.си_МатериалыНаСкладе.Записывать = Истина;
	Движения.си_МатериалыНаСкладе.Записать();
	
	Отказ = ?(Отказ, Отказ, Не ПроверкаНаОтрицательныйОстаток("си_МатериалыНаСкладе",Реквизиты.Организация,Реквизиты.Склад,
	ТЧНаПроверку.ВыгрузитьКолонку("Номенклатура"),Реквизиты.Дата,Реквизиты.СтруктурноеПодразделение,Реквизиты.ПодразделениеОрганизации,
	ТЧНаПроверку.ВыгрузитьКолонку("Сотрудник"),ТЧНаПроверку.ВыгрузитьКолонку("ДокументПередачи"),,
	ТЧНаПроверку.ВыгрузитьКолонку("НазначениеИспользования"),ТЧНаПроверку.ВыгрузитьКолонку("Характеристика"),
	ТЧНаПроверку.ВыгрузитьКолонку("ОстаточныйСрокИспользования"),Реквизиты.ВидУчетаНУ,Неопределено,
	ТЧНаПроверку.ВыгрузитьКолонку("ДокументВозврата")));
	
КонецПроцедуры

Процедура ЗарегистрироватьДвиженияМатериалыНаСкладеНовая(Реквизиты, ТаблицаМатериалы, Движения, Отказ) Экспорт
	СчетаУчетаСпецодежды = си_УчетСпецодеждыСерверПовтИсп.ПолучитьСчетаУчетаСпецодежды();
	ТаблицаМатериалыНовая = ТаблицаМатериалы.Скопировать();
	ТаблицаМатериалыНовая.Очистить();
	ТЧНаПроверку = ТаблицаМатериалы.Скопировать();
	ТЧНаПроверку.Очистить();
	Для Каждого СтрокаМатериал Из ТаблицаМатериалы Цикл
		Если Не ТаблицаМатериалы.Колонки.Найти("СчетУчетаБУ") = Неопределено Тогда  //для документа передача в эксплуатацию
			Если Не СтрокаМатериал.СчетУчетаБУ = СчетаУчетаСпецодежды.СпецоснасткаИСпецодеждаНаСкладе Тогда
				Продолжить
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаМатериал.СостояниеСпецодежды) Тогда			//для документа списание материалов
			Если Не СтрокаМатериал.СостояниеСпецодежды = Перечисления.си_СостояниеСпецодеждыИИнвентаряНаСкладе.НаСкладеНовая Тогда
				Продолжить
			КонецЕсли;
		КонецЕсли;
		НоваяСтрока 						= ТаблицаМатериалыНовая.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаМатериал);
		НоваяСтрока.ДокументПередачи 		= Документы.си_ПередачаМатериаловВЭксплуатацию.ПустаяСсылка();
		НоваяСтрока.НазначениеИспользования = Справочники.си_НазначенияИспользования.ПустаяСсылка();
		
		Движение = Движения.си_МатериалыНаСкладе.Добавить();
		
		Движение.ВидДвижения 				= ВидДвиженияНакопления[СтрокаМатериал.ВидДвиженияБУ];
		Движение.Период 					= Реквизиты.Дата;
		Движение.Организация 				= Реквизиты.Организация;
		Движение.СтруктурноеПодразделение 	= СтрокаМатериал.СтруктурноеПодразделение;
		Движение.Склад						= СтрокаМатериал.Склад;
		Движение.Номенклатура 				= СтрокаМатериал.Номенклатура;
		Движение.ДокументПередачи			= Документы.си_ПередачаМатериаловВЭксплуатацию.ПустаяСсылка();
		Движение.НазначениеИспользования 	= Справочники.си_НазначенияИспользования.ПустаяСсылка();
		
		Движение.ОстаточныйСрокИспользования = 0;
		
		
		Движение.КодОперации				= СтрокаМатериал.КодОперации;
		Движение.Количество 				= СтрокаМатериал.Количество;
		Движение.СписаннаяСтоимость 		= 0;
		Движение.Стоимость 					= СтрокаМатериал.СтоимостьНоваяНаСкладе;
		Движение.ВидУчетаНУ 				= ?(Реквизиты.НеобходимостьОтраженияВНУ,Реквизиты.ВидУчетаНУ,Справочники.ВидыУчетаНУ.ПустаяСсылка());
		Движение.Характеристика				= СтрокаМатериал.Характеристика;
		Движение.СостояниеСпецодежды		= Перечисления.си_СостояниеСпецодеждыИИнвентаряНаСкладе.НаСкладеНовая;
		
		Если СтрокаМатериал.ВидДвиженияБУ ="Расход" Тогда
			СтрокаТЧ = ТЧНаПроверку.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТЧ,СтрокаМатериал);
		КонецЕсли;
	КонецЦикла;
	
	Движения.си_МатериалыНаСкладе.Записывать = Истина;
	Движения.си_МатериалыНаСкладе.Записать();
	
	Отказ = ?(Отказ, Отказ, Не ПроверкаНаОтрицательныйОстаток("си_МатериалыНаСкладе",Реквизиты.Организация,Реквизиты.Склад,ТЧНаПроверку.ВыгрузитьКолонку("Номенклатура"),Реквизиты.Дата,Реквизиты.СтруктурноеПодразделение,Реквизиты.ПодразделениеОрганизации,ТЧНаПроверку.ВыгрузитьКолонку("Сотрудник"),ТЧНаПроверку.ВыгрузитьКолонку("ДокументПередачи"),,ТЧНаПроверку.ВыгрузитьКолонку("НазначениеИспользования"),ТЧНаПроверку.ВыгрузитьКолонку("Характеристика"),ТЧНаПроверку.ВыгрузитьКолонку("ОстаточныйСрокИспользования"),Реквизиты.ВидУчетаНУ,Перечисления.си_СостояниеСпецодеждыИИнвентаряНаСкладе.НаСкладеНовая));
	
КонецПроцедуры

Процедура ЗарегистрироватьДвиженияМатериалыНаСкладеПоступление(Реквизиты, ТаблицаМатериалы, Движения, Отказ) Экспорт
	СчетаУчетаСпецодежды 						= си_УчетСпецодеждыСерверПовтИсп.ПолучитьСчетаУчетаСпецодежды();
	ТаблицаМатериалыНовая 						= ТаблицаМатериалы.Скопировать();
	ТаблицаМатериалыНовая.Очистить();
	Для Каждого СтрокаМатериал Из ТаблицаМатериалы Цикл
		
		Движение = Движения.си_МатериалыНаСкладе.Добавить();
		Движение.ВидДвижения 					= ВидДвиженияНакопления.Приход;
		Движение.Период 						= Реквизиты.Дата;
		Движение.Организация 					= Реквизиты.Организация;
		Движение.СтруктурноеПодразделение 		= СтрокаМатериал.СтруктурноеПодразделение;
		Движение.Склад							= СтрокаМатериал.Склад;
		Движение.Номенклатура 					= СтрокаМатериал.Номенклатура;
		Движение.ДокументПередачи				= Документы.си_ПередачаМатериаловВЭксплуатацию.ПустаяСсылка();
		Движение.ОстаточныйСрокИспользования 	= СтрокаМатериал.ОстаточныйСрокИспользования;
		Движение.КодОперации 					= Перечисления.си_КодыОперацийМатериалыВЭксплуатации.ПриемкаНаСклад;
		Движение.Количество 					= СтрокаМатериал.Количество;
		Движение.СписаннаяСтоимость 			= СтрокаМатериал.СписаннаяСтоимость;
		Движение.Стоимость 						= СтрокаМатериал.Стоимость;
		Движение.ВидУчетаНУ 					= ?(Реквизиты.НеобходимостьОтраженияВНУ,Реквизиты.ВидУчетаНУ,Справочники.ВидыУчетаНУ.ПустаяСсылка());
		Движение.Характеристика					= СтрокаМатериал.Характеристика;
		Движение.СостояниеСпецодежды			= Перечисления.си_СостояниеСпецодеждыИИнвентаряНаСкладе.НаСкладеНовая;
		
	КонецЦикла;
	
	Движения.си_МатериалыНаСкладе.Записывать 	= Истина;
	Движения.си_МатериалыНаСкладе.Записать();
	
КонецПроцедуры

Процедура ЗарегистрироватьДвиженияБухУчетНовая(Реквизиты, ТаблицаМатериалы, Движения, Отказ) Экспорт
	СчетаУчетаСпецодежды		= си_УчетСпецодеждыСерверПовтИсп.ПолучитьСчетаУчетаСпецодежды();
	Дата 						= Реквизиты.Дата;
	ВидУчетаНУ 					= Реквизиты.ВидУчетаНУ;
	Организация 				= Реквизиты.Организация;
	СтруктурноеПодразделение	= Реквизиты.СтруктурноеПодразделение;
	СчетУчетаНовая				= СчетаУчетаСпецодежды.СпецоснасткаИСпецодеждаНаСкладе;
	ВедетсяСкладскойУчет	 	= СчетУчетаНовая.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Склады)<>Неопределено;
	СчетУчетаНоваяНУ 			= общ_ПереопределяемыеПроцедурыБКВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ",СчетУчетаНовая));
	СчетУчета					= СчетаУчетаСпецодежды.СпецоснасткаИСпецодеждаВЭксплуатации;
	СчетУчетаНУ 				= общ_ПереопределяемыеПроцедурыБКВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ",СчетУчета));
	
	Если НЕ ВедетсяСкладскойУчет Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ТекСтрокаМатериалы Из ТаблицаМатериалы Цикл
		Если Не ТекСтрокаМатериалы.СчетУчетаБУ = СчетаУчетаСпецодежды.СпецоснасткаИСпецодеждаНаСкладе Тогда
			Продолжить;
		КонецЕсли;
		Движение = Движения.Типовой.Добавить();
		Движение.Период 					= Дата;
		Движение.Организация 				= Организация;
		Движение.СтруктурноеПодразделениеДт	= СтруктурноеПодразделение;
		Движение.СтруктурноеПодразделениеКт	= СтруктурноеПодразделение;
		Движение.СчетКт 					= СчетУчетаНовая;
		Движение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконтоТиповые.Номенклатура] 	= ТекСтрокаМатериалы.Номенклатура;
		Движение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконтоТиповые.Склады] 		= ТекСтрокаМатериалы.Склад;
		Движение.СчетДт 					= СчетУчета;
		Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконтоТиповые.Номенклатура] 	= ТекСтрокаМатериалы.Номенклатура;
		
		Движение.КоличествоКт 				= ТекСтрокаМатериалы.Количество;
		Движение.КоличествоДт 				= ТекСтрокаМатериалы.Количество;
		Если Реквизиты.ВидОперации = Перечисления.си_ВидыОперацийПередачиВЭксплуатацию.ПервичнаяПередача Тогда
			Движение.Сумма 						= ТекСтрокаМатериалы.Стоимость + ТекСтрокаМатериалы.СписаннаяСтоимость;
		Иначе
			Движение.Сумма 						= ТекСтрокаМатериалы.Стоимость;
		КонецЕсли;
		Движение.Содержание 				= "Списание материалов в эксплуатацию";
		Если Реквизиты.НеобходимостьОтраженияВНУ Тогда
			Движение = Движения.Налоговый.Добавить();
			Движение.Период 					= Дата;
			Движение.Организация 				= Организация;
			Движение.СтруктурноеПодразделениеДт = СтруктурноеПодразделение;
			Движение.СтруктурноеПодразделениеКт = СтруктурноеПодразделение;
			Движение.ВидУчетаДт 				= ВидУчетаНУ;
			Движение.ВидУчетаКт 				= ВидУчетаНУ;
			Движение.СчетКт 					= СчетУчетаНоваяНУ;
			Движение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконтоТиповые.Номенклатура] 	= ТекСтрокаМатериалы.Номенклатура;
			Движение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконтоТиповые.Склады] 		= ТекСтрокаМатериалы.Склад;
			Движение.СчетДт 					= СчетУчетаНУ;
			Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконтоТиповые.Номенклатура] 	= ТекСтрокаМатериалы.Номенклатура;
			
			Движение.КоличествоКт 				= ТекСтрокаМатериалы.Количество;
			Движение.КоличествоДт 				= ТекСтрокаМатериалы.Количество;
			Если Реквизиты.ВидОперации = Перечисления.си_ВидыОперацийПередачиВЭксплуатацию.ПервичнаяПередача Тогда
				Движение.Сумма 						= ТекСтрокаМатериалы.Стоимость + ТекСтрокаМатериалы.СписаннаяСтоимость;
			Иначе
				Движение.Сумма 						= ТекСтрокаМатериалы.Стоимость;
			КонецЕсли;
			Движение.Содержание 				= "Списание материалов в эксплуатацию";
		КонецЕсли;
	КонецЦикла;
	Движения.Типовой.Записывать 	= Истина;
	Движения.Налоговый.Записывать 	= Истина;
КонецПроцедуры

// Зарегистрировать движения амортизация материалов при передаче в эксплуатацию
//
Процедура ЗарегистрироватьДвиженияАмортизацияМатериаловПриПередачеВЭксплуатацию(Реквизиты, ТаблицаМатериалы,ВсеСпособыОтраженияРасходов, Движения, Отказ) Экспорт
	СчетаУчетаСпецодежды		= си_УчетСпецодеждыСерверПовтИсп.ПолучитьСчетаУчетаСпецодежды();
	
	Дата 						= Реквизиты.Дата;
	ВидУчетаНУ 					= Реквизиты.ВидУчетаНУ;
	Организация 				= Реквизиты.Организация;
	СтруктурноеПодразделение	= Реквизиты.СтруктурноеПодразделение;
	СчетБУ						= СчетаУчетаСпецодежды.СпецоснасткаИСпецодеждаВЭксплуатации; 
	СчетНУ						= общ_ПереопределяемыеПроцедурыБКВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ",СчетБУ)); 
	Для Каждого СтрокаСпецодежда Из ТаблицаМатериалы Цикл
		// движение по типовому, списание затрат		
		ТЧ 								= СтрокаСпецодежда.НазначениеИспользования.СпособОтраженияРасходов.Способы.Выгрузить();
		МассивКоэффицентов 				= ТЧ.ВыгрузитьКолонку("Коэффициент");
		МассивРаспределения 			= общ_ПереопределениеПроцедурБККлиентСервер.РаспределитьПропорционально(СтрокаСпецодежда.СписаннаяСтоимость,МассивКоэффицентов);
		МассивРаспределенияКоличества 	= общ_ПереопределениеПроцедурБККлиентСервер.РаспределитьПропорционально(СтрокаСпецодежда.Количество * СтрокаСпецодежда.Коэффициент,МассивКоэффицентов);
		
		// При погащении стоимости во время передачи в эксплуатацию, 
		// производим списание по регистру бухгалтерии
		СпособыОтраженияРасходов 		= ВсеСпособыОтраженияРасходов.НайтиСтроки(Новый Структура("Ссылка", СтрокаСпецодежда.НазначениеИспользования.СпособОтраженияРасходов));
		Если СтрокаСпецодежда.НазначениеИспользования.СпособПогашенияСтоимости = Перечисления.си_СпособыПогашенияСтоимости.ПриПередачеВЭксплуатацию Тогда
			Для Каждого СтрокаСпособов Из СпособыОтраженияРасходов Цикл
				// Поиск подразделения и номенклатуры в списке субконто назначения использования
				Подразделение = Неопределено;
				Номенклатура = Неопределено;
				Для к=1 По 3 Цикл
					Если ТипЗнч(СтрокаСпособов["Субконто"+Строка(к)]) = тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
						Подразделение 		= СтрокаСпособов["Субконто"+Строка(к)];
					КонецЕсли;
					Если ТипЗнч(СтрокаСпособов["Субконто"+Строка(к)]) = тип("СправочникСсылка.Номенклатура") Тогда
						Номенклатура 		= СтрокаСпособов["Субконто"+Строка(к)];
					КонецЕсли;
				КонецЦикла;
				// Если не заполнено значение подразделения, то подставляем из документа
				Если Не ЗначениеЗаполнено(Подразделение) Тогда
					Подразделение 			= СтрокаСпецодежда.ПодразделениеОрганизации;
				КонецЕсли;
				// Если не заполнено значение номенклатуры, то подставляем из документа
				Если Не ЗначениеЗаполнено(Номенклатура) Тогда
					Номенклатура 			= СтрокаСпецодежда.Номенклатура;
				КонецЕсли;
				// Движения по регистру бухгалтерии
				Движение 					= Движения.Типовой.Добавить();
				Движение.СчетКт 			= СчетБУ;
				Движение.СчетДт 			= СтрокаСпособов.СчетЗатрат;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(СтрокаСпособов.СчетЗатрат, Движение.СубконтоДт, 1, СтрокаСпособов.Субконто1);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(СтрокаСпособов.СчетЗатрат, Движение.СубконтоДт, 2, СтрокаСпособов.Субконто2);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(СтрокаСпособов.СчетЗатрат, Движение.СубконтоДт, 3, СтрокаСпособов.Субконто3);
				Движение.Период 			= Дата;
				Движение.Организация 		= Организация;
				Движение.СтруктурноеПодразделениеДт = СтруктурноеПодразделение;
				Движение.СтруктурноеПодразделениеКт = СтруктурноеПодразделение;
				Движение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконтоТиповые.Номенклатура] = Номенклатура;
				Движение.Содержание = "Начислена амортизация спецодежды и инвентаря";
				Если Не МассивРаспределения = Неопределено Тогда
					Движение.Сумма 				= МассивРаспределения[СтрокаСпособов.НомерСтроки-1];
				КонецЕсли;
				Если СтрокаСпецодежда.НазначениеИспользования.СрокПолезногоИспользования=0 Тогда
					Если СтрокаСпособов.СчетЗатрат.Количественный Тогда
						Движение.КоличествоДт	= МассивРаспределенияКоличества[СтрокаСпособов.НомерСтроки-1];
					КонецЕсли;
					Если СчетаУчетаСпецодежды.СпецоснасткаИСпецодеждаВЭксплуатации.Количественный Тогда
						Движение.КоличествоКт = МассивРаспределенияКоличества[СтрокаСпособов.НомерСтроки-1];
					КонецЕсли;
				КонецЕсли;
				// проведение по НУ
				Если Реквизиты.НеобходимостьОтраженияВНУ Тогда		
					ДвижениеНУ 					= Движения.Налоговый.Добавить();
					ДвижениеНУ.СчетКт 			= СчетНУ;
					ДвижениеНУ.ВидУчетаДт 		= ВидУчетаНУ;
					ДвижениеНУ.ВидУчетаКт 		= ВидУчетаНУ;
					СчетЗатратНУ 				= общ_ПереопределяемыеПроцедурыБКВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СтрокаСпособов.СчетЗатрат));
					ДвижениеНУ.СчетДт 			= СчетЗатратНУ;
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(СчетЗатратНУ, ДвижениеНУ.СубконтоДт, 1, СтрокаСпособов.Субконто1);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(СчетЗатратНУ, ДвижениеНУ.СубконтоДт, 2, СтрокаСпособов.Субконто2);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(СчетЗатратНУ, ДвижениеНУ.СубконтоДт, 3, СтрокаСпособов.Субконто3);
					ДвижениеНУ.Период 			= Дата;
					ДвижениеНУ.Организация 		= Организация;
					ДвижениеНУ.СтруктурноеПодразделениеДт = СтруктурноеПодразделение;
					ДвижениеНУ.СтруктурноеПодразделениеКт = СтруктурноеПодразделение;
					ДвижениеНУ.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконтоТиповые.Номенклатура] = Номенклатура;
					ДвижениеНУ.Содержание 		= "Начислена амортизация спецодежды и инвентаря";
					Если Не МассивРаспределения = Неопределено Тогда
						ДвижениеНУ.Сумма 		= МассивРаспределения[СтрокаСпособов.НомерСтроки-1];
					КонецЕсли;
					Если СтрокаСпецодежда.НазначениеИспользования.СрокПолезногоИспользования=0 Тогда
						Если СчетЗатратНУ.Количественный Тогда
							ДвижениеНУ.КоличествоДт 	= МассивРаспределенияКоличества[СтрокаСпособов.НомерСтроки-1];
						КонецЕсли;
						Если СчетНУ.Количественный Тогда
							ДвижениеНУ.КоличествоКт 	= МассивРаспределенияКоличества[СтрокаСпособов.НомерСтроки-1];
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;				
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	Движения.Типовой.Записывать 	= Истина;
	Движения.Налоговый.Записывать 	= Истина;
КонецПроцедуры

// движения по перемещению материалов в бух учете

// Зарегистрировать движения перемещение материалов по бухгалтерскому учету
//
Процедура ЗарегистрироватьДвиженияПеремещениеМатериаловПоБухУчету(Реквизиты, ТаблицаМатериалы, Движения, Отказ) Экспорт
	СчетаУчетаСпецодежды		= си_УчетСпецодеждыСерверПовтИсп.ПолучитьСчетаУчетаСпецодежды();
	Дата 						= Реквизиты.Дата;
	ВидУчетаНУ 					= Реквизиты.ВидУчетаНУ;
	Организация 				= Реквизиты.Организация;
	СтруктурноеПодразделение	= Реквизиты.СтруктурноеПодразделение;
	СтруктурноеПодразделениеПолучатель	= Реквизиты.СтруктурноеПодразделениеПолучатель;
	Если Не Реквизиты.СостояниеМатериалов = Перечисления.си_СостоянияМатериалов.НаходящиесяВЭксплуатации Тогда
		СчетУчета 				= СчетаУчетаСпецодежды.СпецоснасткаИСпецодеждаНаСкладе;
		ВедетсяСкладскойУчет 	= СчетУчета.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Склады)<>Неопределено;
		Если НЕ ВедетсяСкладскойУчет Тогда
			Возврат;
		КонецЕсли;
		СчетУчетаНУ 			= общ_ПереопределяемыеПроцедурыБКВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ",СчетУчета));
	КонецЕсли;
	
	
	
	
	
	Для Каждого ТекСтрокаМатериалы Из ТаблицаМатериалы Цикл
		Если ТекСтрокаМатериалы.ВидДвижения = "Приход"  Тогда
			Продолжить;
		КонецЕсли;
		Если Не Реквизиты.СнятиеСУчета Тогда
			Движение = Движения.Типовой.Добавить();
			Движение.Период 					= Дата;
			Движение.Организация 				= Организация;
			Движение.СтруктурноеПодразделениеДт	= СтруктурноеПодразделениеПолучатель;
			Движение.СтруктурноеПодразделениеКт	= СтруктурноеПодразделение;
			Движение.СчетКт 					= СчетУчета;
			Движение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконтоТиповые.Номенклатура] 	= ТекСтрокаМатериалы.Номенклатура;
			Движение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконтоТиповые.Склады] 		= ТекСтрокаМатериалы.Склад;
			Движение.СчетДт 					= СчетУчета;
			Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконтоТиповые.Номенклатура] 	= ТекСтрокаМатериалы.Номенклатура;
			Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконтоТиповые.Склады] 		= Реквизиты.СкладПолучатель;
			Движение.КоличествоКт 				= ТекСтрокаМатериалы.Количество;
			Движение.КоличествоДт 				= ТекСтрокаМатериалы.Количество;
			Движение.Сумма 						= ТекСтрокаМатериалы.Стоимость;
			Движение.Содержание 				= "Перемещение материалов между складами";
			Если Реквизиты.НеобходимостьОтраженияВНУ Тогда
				Движение = Движения.Налоговый.Добавить();
				Движение.Период 					= Дата;
				Движение.Организация 				= Организация;
				Движение.СтруктурноеПодразделениеДт = СтруктурноеПодразделениеПолучатель;
				Движение.СтруктурноеПодразделениеКт = СтруктурноеПодразделение;
				Движение.ВидУчетаДт 				= ВидУчетаНУ;
				Движение.ВидУчетаКт 				= ВидУчетаНУ;
				Движение.СчетКт 					= СчетУчетаНУ;
				Движение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконтоТиповые.Номенклатура] 	= ТекСтрокаМатериалы.Номенклатура;
				Движение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконтоТиповые.Склады] 		= ТекСтрокаМатериалы.Склад;
				Движение.СчетДт 					= СчетУчетаНУ;
				Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконтоТиповые.Номенклатура] 	= ТекСтрокаМатериалы.Номенклатура;
				Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконтоТиповые.Склады] 		= Реквизиты.СкладПолучатель;
				Движение.КоличествоКт 				= ТекСтрокаМатериалы.Количество;
				Движение.КоличествоДт 				= ТекСтрокаМатериалы.Количество;
				Движение.Сумма 						= ТекСтрокаМатериалы.Стоимость;
				Движение.Содержание 				= "Перемещение материалов между складами";
			КонецЕсли;
		Иначе
			// вывод из эксплуатации для реализации спецодежды
			СчетУчета 				= СчетаУчетаСпецодежды.СпецоснасткаИСпецодеждаВЭксплуатации;
			ВедетсяСкладскойУчет 	= ТекСтрокаМатериалы.СчетУчетаПолучатель.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Склады)<>Неопределено;
			Если НЕ ВедетсяСкладскойУчет Тогда
				Продолжить;
			КонецЕсли;
			
			Движение = Движения.Типовой.Добавить();
			Движение.Период 					= Дата;
			Движение.Организация 				= Организация;
			Движение.СтруктурноеПодразделениеДт	= СтруктурноеПодразделение;
			Движение.СтруктурноеПодразделениеКт	= СтруктурноеПодразделение;
			
			Движение.СчетКт 					= СчетУчета;
			Если Не СчетУчета.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Номенклатура) = Неопределено Тогда
				Движение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконтоТиповые.Номенклатура] 	= ТекСтрокаМатериалы.Номенклатура;
			КонецЕсли;
			Если Не СчетУчета.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Склады) = Неопределено Тогда
				Движение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконтоТиповые.Склады] 		= ТекСтрокаМатериалы.Склад;
			КонецЕсли;
			
			Движение.СчетДт 					= ТекСтрокаМатериалы.СчетУчетаПолучатель;
			Если Не ТекСтрокаМатериалы.СчетУчетаПолучатель.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Номенклатура) = Неопределено Тогда
				Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконтоТиповые.Номенклатура] 	= ТекСтрокаМатериалы.Номенклатура;
			КонецЕсли;
			Если Не ТекСтрокаМатериалы.СчетУчетаПолучатель.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Склады) = Неопределено Тогда
				Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконтоТиповые.Склады] 		= Реквизиты.СкладПолучатель;
			КонецЕсли;
			Если Не ТекСтрокаМатериалы.СчетУчетаПолучатель.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Партии) = Неопределено Тогда
				Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконтоТиповые.Партии] 		= Реквизиты.Партия;
			КонецЕсли;
			
			Движение.КоличествоКт 				= ТекСтрокаМатериалы.Количество;
			Движение.КоличествоДт 				= ТекСтрокаМатериалы.Количество;
			Движение.Сумма 						= ТекСтрокаМатериалы.Стоимость;
			Движение.Содержание 				= "Вывод спецодежды и инвентаря из учета";
			Если Реквизиты.НеобходимостьОтраженияВНУ Тогда
				СчетУчетаНУПолучатель 				= общ_ПереопределяемыеПроцедурыБКВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ",ТекСтрокаМатериалы.СчетУчетаПолучатель));
				СчетУчетаНУ 						= общ_ПереопределяемыеПроцедурыБКВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ",СчетУчета));
				Движение = Движения.Налоговый.Добавить();
				Движение.Период 					= Дата;
				Движение.Организация 				= Организация;
				Движение.СтруктурноеПодразделениеДт = СтруктурноеПодразделениеПолучатель;
				Движение.СтруктурноеПодразделениеКт = СтруктурноеПодразделение;
				Движение.ВидУчетаДт 				= ВидУчетаНУ;
				Движение.ВидУчетаКт 				= ВидУчетаНУ;
				Движение.СчетКт 					= СчетУчетаНУ;
				Если Не СчетУчетаНУ.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Номенклатура) = Неопределено Тогда
					Движение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконтоТиповые.Номенклатура] 	= ТекСтрокаМатериалы.Номенклатура;
				КонецЕсли;
				Если Не СчетУчетаНУ.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Склады) = Неопределено Тогда
					Движение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконтоТиповые.Склады] 		= ТекСтрокаМатериалы.Склад;
				КонецЕсли;
				Движение.СчетДт 					= СчетУчетаНУПолучатель;
				Если Не СчетУчетаНУПолучатель.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Номенклатура) = Неопределено Тогда
					Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконтоТиповые.Номенклатура] 	= ТекСтрокаМатериалы.Номенклатура;
				КонецЕсли;
				Если Не СчетУчетаНУПолучатель.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Склады) = Неопределено Тогда
					Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконтоТиповые.Склады] 		= Реквизиты.СкладПолучатель;
				КонецЕсли;
				Если Не СчетУчетаНУПолучатель.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Партии) = Неопределено Тогда
					Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконтоТиповые.Партии] 		= Реквизиты.Партия;
				КонецЕсли;
				Движение.КоличествоКт 				= ТекСтрокаМатериалы.Количество;
				Движение.КоличествоДт 				= ТекСтрокаМатериалы.Количество;
				Движение.Сумма 						= ТекСтрокаМатериалы.Стоимость;
				Движение.Содержание 				= "Вывод спецодежды и инвентаря из учета";
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	Движения.Типовой.Записывать 	= Истина;
	Движения.Налоговый.Записывать 	= Истина;
КонецПроцедуры

// Зарегистрировать движения возврат материалов по бухгалтерскому учету
//
Процедура ЗарегистрироватьДвиженияВозвратМатериаловПоБухУчету(Реквизиты, ТаблицаМатериалы, Движения, Отказ) Экспорт
	СчетаУчетаСпецодежды		= си_УчетСпецодеждыСерверПовтИсп.ПолучитьСчетаУчетаСпецодежды();
	Дата 						= Реквизиты.Дата;
	ВидУчетаНУ 					= Реквизиты.ВидУчетаНУ;
	Организация 				= Реквизиты.Организация;
	СтруктурноеПодразделение	= Реквизиты.СтруктурноеПодразделение;
	СчетУчета 					= СчетаУчетаСпецодежды.СпецоснасткаИСпецодеждаВЭксплуатации;
	СчетУчетаНУ 				= общ_ПереопределяемыеПроцедурыБКВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ",СчетУчета));
	
	Для Каждого Выборка Из ТаблицаМатериалы Цикл
		// Движения по типовому
		Движение = Движения.Типовой.Добавить();
		Движение.Период 					= Дата;
		Движение.Организация 				= Организация;
		Движение.СтруктурноеПодразделениеКт = СтруктурноеПодразделение;
		Движение.СтруктурноеПодразделениеДт = СтруктурноеПодразделение;
		Движение.СчетКт 					= СчетаУчетаСпецодежды.СпецоснасткаИСпецодеждаВЭксплуатации;
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Движение.СчетКт, Движение.СубконтоКт, 1, Выборка.Номенклатура);
		
		Движение.СчетДт 					= Выборка.СчетПередачиБУ;
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Движение.СчетДт, Движение.СубконтоДт, 1, Выборка.Номенклатура);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Движение.СчетДт, Движение.СубконтоДт, 2, Реквизиты.Склад);
		
		Движение.Содержание = "Возврат из эксплуатации";
		Если Движение.СчетКт.Количественный Тогда
			Движение.КоличествоКт 			= Выборка.Количество;
		КонецЕсли;
		Если Движение.СчетДт.Количественный Тогда
			Движение.КоличествоДт 			= Выборка.Количество;
		КонецЕсли;
		Движение.Сумма 						= Выборка.Стоимость;
		
		Если Реквизиты.НеобходимостьОтраженияВНУ Тогда
			Движение = Движения.Налоговый.Добавить();
			Движение.Период 					= Дата;
			Движение.Организация 				= Организация;
			Движение.СтруктурноеПодразделениеКт = СтруктурноеПодразделение;
			Движение.СтруктурноеПодразделениеДт = СтруктурноеПодразделение;
			Движение.ВидУчетаДт 				= ВидУчетаНУ;
			Движение.ВидУчетаКт 				= ВидУчетаНУ;
			Движение.СчетКт 					= СчетУчетаНУ;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Движение.СчетКт, Движение.СубконтоКт, 1, Выборка.Номенклатура);
			
			Движение.СчетДт 					= Выборка.СчетПередачиНУ;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Движение.СчетДт, Движение.СубконтоДт, 1, Выборка.Номенклатура);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Движение.СчетДт, Движение.СубконтоДт, 2, Реквизиты.Склад);
			
			Если Движение.СчетКт.Количественный Тогда
				Движение.КоличествоКт 			= Выборка.Количество;
			КонецЕсли;
			Если Движение.СчетДт.Количественный Тогда
				Движение.КоличествоДт 			= Выборка.Количество;
			КонецЕсли;
			Движение.Сумма 						= Выборка.Стоимость;
			Движение.Содержание 				= "Возврат из эксплуатации";
		КонецЕсли;
	КонецЦикла;
	Движения.Типовой.Записывать 	= Истина;
	Движения.Налоговый.Записывать 	= Истина;
КонецПроцедуры

// Зарегистрировать движения списание материалов по бухгалтерскому учету
//
Процедура ЗарегистрироватьДвиженияСписаниеМатериаловПоБухУчету(Реквизиты, ТаблицаМатериалы,СпособыОтраженияРасходов, Движения, Отказ) Экспорт
	СчетаУчетаСпецодежды		= си_УчетСпецодеждыСерверПовтИсп.ПолучитьСчетаУчетаСпецодежды();
	Дата 						= Реквизиты.Дата;
	ВидУчетаНУ 					= Реквизиты.ВидУчетаНУ;
	Организация 				= Реквизиты.Организация;
	СтруктурноеПодразделение	= Реквизиты.СтруктурноеПодразделение;
	СчетУчета 					= СчетаУчетаСпецодежды.СпецоснасткаИСпецодеждаВЭксплуатации;
	СчетУчетаНУ 				= общ_ПереопределяемыеПроцедурыБКВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ",СчетУчета));
	
	СчетДтБУ = Реквизиты.СчетДтБУ;
	СчетДтНУ = Реквизиты.СчетДтНУ;
	
	Если Реквизиты.СостояниеМатериалов = Перечисления.си_СостоянияМатериалов.НаходящиесяНаСкладе 
		ИЛИ Реквизиты.СостояниеМатериалов = Перечисления.си_СостоянияМатериалов.НаходящиесяНаСкладеНовая Тогда
		СчетУчета = СчетаУчетаСпецодежды.СпецоснасткаИСпецодеждаНаСкладе;
	Иначе
		СчетУчета = СчетаУчетаСпецодежды.СпецоснасткаИСпецодеждаВЭксплуатации;
	КонецЕсли;
	ВедетсяСкладскойУчет = СчетаУчетаСпецодежды.СпецоснасткаИСпецодеждаНаСкладе.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Склады)<>Неопределено;
	СчетУчетаНУ = общ_ПереопределяемыеПроцедурыБКВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ",СчетУчета));
	
	Для Каждого Выборка Из ТаблицаМатериалы Цикл
		// регистр Типовой 
		Если Реквизиты.СпособСписанияРасходов = Перечисления.си_СпособыСписанияРасходов.ПоПараметрамДокумента Тогда
			Движение = Движения.Типовой.Добавить();
			Движение.Период 					= Дата;
			Движение.Организация 				= Организация;
			Движение.СтруктурноеПодразделениеДт = СтруктурноеПодразделение;
			Движение.СтруктурноеПодразделениеКт = СтруктурноеПодразделение;
			Движение.СчетКт 					= СчетУчета;
			Движение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконтоТиповые.Номенклатура] = Выборка.Номенклатура;
			Если (Реквизиты.СостояниеМатериалов = Перечисления.си_СостоянияМатериалов.НаходящиесяНаСкладе ИЛИ Реквизиты.СостояниеМатериалов = Перечисления.си_СостоянияМатериалов.НаходящиесяНаСкладеНовая) И ВедетсяСкладскойУчет Тогда
				Движение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконтоТиповые.Склады] = Реквизиты.Склад;
			КонецЕсли;
			Движение.СчетДт 					= СчетДтБУ;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(СчетДтБУ, Движение.СубконтоДт, 1, Реквизиты.СубконтоДтБУ1);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(СчетДтБУ, Движение.СубконтоДт, 2, Реквизиты.СубконтоДтБУ2);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(СчетДтБУ, Движение.СубконтоДт, 3, Реквизиты.СубконтоДтБУ3);
			
			Движение.КоличествоКт 				= Выборка.Количество;
			Движение.Содержание 				= "Списание";
			Если СчетДтБУ.Количественный Тогда
				Движение.КоличествоДт 			= Выборка.Количество;
			КонецЕсли;
			Движение.Сумма 						= Выборка.Стоимость;
			
			Если Реквизиты.НеобходимостьОтраженияВНУ Тогда
				Движение = Движения.Налоговый.Добавить();
				Движение.Период 					= Дата;
				Движение.Организация 				= Организация;
				Движение.СтруктурноеПодразделениеДт = СтруктурноеПодразделение;
				Движение.СтруктурноеПодразделениеКт = СтруктурноеПодразделение;
				Движение.ВидУчетаДт 				= ВидУчетаНУ;
				Движение.ВидУчетаКт 				= ВидУчетаНУ;
				Движение.СчетКт 					= СчетУчетаНУ;
				Движение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконтоТиповые.Номенклатура] = Выборка.Номенклатура;
				Если (Реквизиты.СостояниеМатериалов = Перечисления.си_СостоянияМатериалов.НаходящиесяНаСкладе ИЛИ Реквизиты.СостояниеМатериалов = Перечисления.си_СостоянияМатериалов.НаходящиесяНаСкладеНовая) И ВедетсяСкладскойУчет Тогда
					Движение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконтоТиповые.Склады] = Реквизиты.Склад;
				КонецЕсли;
				Движение.СчетДт 					= СчетДтНУ;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(СчетДтНУ, Движение.СубконтоДт, 1, Реквизиты.СубконтоДтНУ1);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(СчетДтНУ, Движение.СубконтоДт, 2, Реквизиты.СубконтоДтНУ2);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(СчетДтНУ, Движение.СубконтоДт, 3, Реквизиты.СубконтоДтНУ3);
				Движение.КоличествоКт 				= Выборка.Количество;
				Если СчетДтНУ.Количественный Тогда
					Движение.КоличествоДт 			= Выборка.Количество;
				КонецЕсли;
				Движение.Сумма 						= Выборка.Стоимость;
				Движение.Содержание 				= "Списание";
			КонецЕсли;
		Иначе
			ТаблицаАналитики 	= СпособыОтраженияРасходов.Скопировать(Новый Структура("Ссылка",Выборка.НазначениеИспользования.СпособОтраженияРасходов));
			МассивКоэффициентов = ТаблицаАналитики.ВыгрузитьКолонку("Коэффициент");
			МассивСумма 		= общ_ПереопределениеПроцедурБККлиентСервер.РаспределитьПропорционально(Выборка.Стоимость,МассивКоэффициентов);
			МассивКоличество 	= общ_ПереопределениеПроцедурБККлиентСервер.РаспределитьПропорционально(Выборка.Количество,МассивКоэффициентов);
			Для Инд = 1 По МассивКоэффициентов.Количество() Цикл
				Движение = Движения.Типовой.Добавить();
				Движение.Период 					= Дата;
				Движение.Организация 				= Организация;
				Движение.СтруктурноеПодразделениеДт = СтруктурноеПодразделение;
				Движение.СтруктурноеПодразделениеКт = СтруктурноеПодразделение;
				Движение.СчетКт 					= СчетУчета;
				Движение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконтоТиповые.Номенклатура] = Выборка.Номенклатура;
				Если (Реквизиты.СостояниеМатериалов = Перечисления.си_СостоянияМатериалов.НаходящиесяНаСкладе ИЛИ Реквизиты.СостояниеМатериалов = Перечисления.си_СостоянияМатериалов.НаходящиесяНаСкладеНовая) И ВедетсяСкладскойУчет Тогда
					Движение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконтоТиповые.Склады] = Реквизиты.Склад;
				КонецЕсли;
				СчетЗатратБУ 						= ТаблицаАналитики[Инд-1].СчетЗатрат;
				СтрокаСпособа 						= ТаблицаАналитики[Инд-1];
				Движение.СчетДт 					= СчетЗатратБУ;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(СчетЗатратБУ, Движение.СубконтоДт, 1, СтрокаСпособа.Субконто1);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(СчетЗатратБУ, Движение.СубконтоДт, 2, СтрокаСпособа.Субконто2);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(СчетЗатратБУ, Движение.СубконтоДт, 3, СтрокаСпособа.Субконто3);
				
				Движение.КоличествоКт 				= МассивКоличество[Инд-1];
				Движение.Содержание 				= "Списание";
				Если СчетЗатратБУ.Количественный Тогда
					Движение.КоличествоДт 			= МассивКоличество[Инд-1];
				КонецЕсли;
				Движение.Сумма 						= ?(Выборка.Стоимость=0,0,МассивСумма[Инд-1]);
				
				Если Реквизиты.НеобходимостьОтраженияВНУ Тогда
					Движение = Движения.Налоговый.Добавить();
					Движение.Период 					= Дата;
					Движение.Организация 				= Организация;
					Движение.СтруктурноеПодразделениеДт = СтруктурноеПодразделение;
					Движение.СтруктурноеПодразделениеКт = СтруктурноеПодразделение;
					Движение.ВидУчетаДт 				= ВидУчетаНУ;
					Движение.ВидУчетаКт 				= ВидУчетаНУ;
					Движение.СчетКт 					= СчетУчетаНУ;
					Движение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконтоТиповые.Номенклатура] = Выборка.Номенклатура;
					Если (Реквизиты.СостояниеМатериалов = Перечисления.си_СостоянияМатериалов.НаходящиесяНаСкладе ИЛИ Реквизиты.СостояниеМатериалов = Перечисления.си_СостоянияМатериалов.НаходящиесяНаСкладеНовая) И ВедетсяСкладскойУчет Тогда
						Движение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконтоТиповые.Склады] = Реквизиты.Склад;
					КонецЕсли;
					СчетЗатратНУ 						= общ_ПереопределяемыеПроцедурыБКВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ",СчетЗатратБУ));
					Движение.СчетДт 					= СчетЗатратНУ;
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(СчетЗатратНУ, Движение.СубконтоДт, 1, СтрокаСпособа.Субконто1);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(СчетЗатратНУ, Движение.СубконтоДт, 2, СтрокаСпособа.Субконто2);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(СчетЗатратНУ, Движение.СубконтоДт, 3, СтрокаСпособа.Субконто3);
					Движение.КоличествоКт 				= МассивКоличество[Инд-1];
					Если СчетЗатратНУ.Количественный Тогда
						Движение.КоличествоДт 			= МассивКоличество[Инд-1];
					КонецЕсли;
					Движение.Сумма 						= ?(Выборка.Стоимость=0,0,МассивСумма[Инд-1]);
					Движение.Содержание 				= "Списание";
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	Движения.Типовой.Записывать 	= Истина;
	Движения.Налоговый.Записывать 	= Истина;
КонецПроцедуры

Функция ПолучитьСсылкуНаТаблицуНоменклатурыИзМассива(Результат,УникальныйИдентификатор)	Экспорт
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("Номенклатура");
	Таблица.Колонки.Добавить("Количество");
	Для Каждого Значение Из Результат Цикл
		НС = таблица.Добавить();
		НС.Номенклатура = Значение;
		НС.Количество = 1;
	КонецЦикла;
	Возврат ПоместитьВоВременноеХранилище(Таблица,УникальныйИдентификатор);
КонецФункции

#КонецОбласти

#КонецОбласти

Процедура ПроверитьНаличиеНовойРедакцииСпецодежды(Отказ) Экспорт
	
	Если Метаданные.Константы.Найти("ci_АдресСервераСЛК")<>Неопределено Тогда
        Отказ = Истина;
	КонецЕсли;	
	
КонецПроцедуры	

Функция НомерВерсииТекущейКонфигурации() Экспорт
	Возврат ОбновлениеИнформационнойБазы.ВерсияИБ(си_УчетСпецодеждыСерверПовтИсп.НаименованиеПодсистемы());
	//НаборЗаписей = РегистрыСведений.ВерсииПодсистем.СоздатьНаборЗаписей();
	//НаборЗаписей.Отбор.ИмяПодсистемы.Значение = си_УчетСпецодеждыСерверПовтИсп.НаименованиеПодсистемы();
	//НаборЗаписей.Отбор.ИмяПодсистемы.Использование = Истина;
	//НаборЗаписей.Прочитать();
	//Если НаборЗаписей.Количество() = 0 Тогда
	//	Возврат "";
	//Иначе
	//	Возврат НаборЗаписей[0].Версия;
	//КонецЕсли;
КонецФункции

//функция пересчета в базовую единицу измерения
//
Функция КоэффициентПересчетаВБазовую(ЕдиницаИзмерения,Номенклатура) Экспорт
	Если НЕ ЗначениеЗаполнено(Номенклатура) Тогда
		Возврат 1;
	КонецЕсли;
	Если ЕдиницаИзмерения = Номенклатура.БазоваяЕдиницаИзмерения Тогда
		Возврат 1;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КоэффициентыПересчета.КоэффициентПересчета
	|ИЗ
	|	РегистрСведений.узп_КоэффициентыПересчетаЕдиницИзмерения КАК КоэффициентыПересчета
	|ГДЕ
	|	КоэффициентыПересчета.ИсходнаяЕдиницаИзмерения = &ИсходнаяЕдиницаИзмерения
	|	И КоэффициентыПересчета.Номенклатура = &Номенклатура
	|	И КоэффициентыПересчета.РезультирующаяЕдиницаИзмерения = &РезультирующаяЕдиницаИзмерения
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КоэффициентыПересчета.КоэффициентПересчета
	|ИЗ
	|	РегистрСведений.узп_КоэффициентыПересчетаЕдиницИзмерения КАК КоэффициентыПересчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК спрНоменклатура
	|		ПО КоэффициентыПересчета.Номенклатура = спрНоменклатура.Ссылка
	|ГДЕ
	|	КоэффициентыПересчета.ИсходнаяЕдиницаИзмерения = &ИсходнаяЕдиницаИзмерения
	|	И КоэффициентыПересчета.РезультирующаяЕдиницаИзмерения = &РезультирующаяЕдиницаИзмерения
	|	И спрНоменклатура.Ссылка ЕСТЬ NULL ";
	
	Запрос.УстановитьПараметр("ИсходнаяЕдиницаИзмерения"		, ЕдиницаИзмерения);
	Запрос.УстановитьПараметр("Номенклатура"					, Номенклатура);
	Запрос.УстановитьПараметр("РезультирующаяЕдиницаИзмерения"	, Номенклатура.БазоваяЕдиницаИзмерения);
	
	Результат = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.КоэффициентПересчета;
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	КоэффициентыПересчета.КоэффициентПересчета
		|ИЗ
		|	РегистрСведений.узп_КоэффициентыПересчетаЕдиницИзмерения КАК КоэффициентыПересчета
		|ГДЕ
		|	КоэффициентыПересчета.ИсходнаяЕдиницаИзмерения = &ИсходнаяЕдиницаИзмерения
		|	И КоэффициентыПересчета.Номенклатура = &Номенклатура
		|	И КоэффициентыПересчета.РезультирующаяЕдиницаИзмерения = &РезультирующаяЕдиницаИзмерения
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	КоэффициентыПересчета.КоэффициентПересчета
		|ИЗ
		|	РегистрСведений.узп_КоэффициентыПересчетаЕдиницИзмерения КАК КоэффициентыПересчета
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК спрНоменклатура
		|		ПО КоэффициентыПересчета.Номенклатура = спрНоменклатура.Ссылка
		|ГДЕ
		|	КоэффициентыПересчета.ИсходнаяЕдиницаИзмерения = &ИсходнаяЕдиницаИзмерения
		|	И КоэффициентыПересчета.РезультирующаяЕдиницаИзмерения = &РезультирующаяЕдиницаИзмерения
		|	И спрНоменклатура.Ссылка ЕСТЬ NULL ";
		
		Запрос.УстановитьПараметр("ИсходнаяЕдиницаИзмерения", Номенклатура.БазоваяЕдиницаИзмерения);
		Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
		Запрос.УстановитьПараметр("РезультирующаяЕдиницаИзмерения", ЕдиницаИзмерения);
		
		Результат = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = Результат.Выбрать();
		
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			Возврат 1/ВыборкаДетальныеЗаписи.КоэффициентПересчета;
		Иначе
			Возврат 1;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

	
