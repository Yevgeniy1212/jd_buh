#Область ОбменАВР

// Выполняет методы uploadAwp() API ИС ЭСФ.
// // Если отправляются исправленные ЭСФ, то дополнительно выполняет метод еrevokeInvoiceById() API ИС ЭСФ.
//
// Параметры:
//  МассивИсходящихАВР - Массив - Массив документов АВР, которые необходимо отправить в ИС ЭСФ.
//   Каждый элемент массива должен иметь тип ДокументСсылка.ЭлектронныйАктВыполненныхРабот.
//
// Возвращаемое значение:
//  См. ЭСФСервер.ОтправитьИсходящиеInvoice().
//
Процедура ОтправитьИсходящиеАВР(Знач МассивИсходящихАВР, Знач ДополнительныеПараметры) Экспорт
	
	Контейнер = АВРКлиентСервер.КонтейнерМетодов();	
	Контейнер.ОтправитьИсходящиеАВР(МассивИсходящихАВР, ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ОткрытьФормуВводаДанныхИСЭСФ(ОбработчикОповещения = Неопределено, ПараметрыФормы = Неопределено) Экспорт
	
	ИмяОбработки = "Обработка.ОбменЭСФ.Форма.ВводДанныхИСЭСФ";
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		
		Результат = ОткрытьФормуМодально(ИмяОбработки, ПараметрыФормы);
		ВыполнитьОбработкуОповещения(ОбработчикОповещения, Результат);
	
	#ИначеЕсли ТонкийКлиент ИЛИ ВебКлиент ИЛИ ТолстыйКлиентУправляемоеПриложение Тогда
		
		ИспользоватьВнешнююОбработку = ЭСФВызовСервера.ИспользоватьВнешнююОбработку();	
		
		// Это точно клиент на управляемые формы.
		
		Если ИспользоватьВнешнююОбработку Тогда
			ВнешняяОбработкаИмя = ЭСФВызовСервера.ПодключитьВнешнююОбработку();
			ИмяОбработки = "ВнешняяОбработка." + ВнешняяОбработкаИмя + ".Форма.ВводДанныхИСЭСФ";
		КонецЕсли;
		
		ОткрытьФорму(ИмяОбработки, ПараметрыФормы,,,,,ОбработчикОповещения);
		
	#КонецЕсли
	
КонецПроцедуры

Процедура ОбновитьДокументыАВРИзИСЭСФ(Знач МассивАВР, Знач ДополнительныеПараметры) Экспорт
	
	Контейнер = АВРКлиентСервер.КонтейнерМетодов();	
	Контейнер.ОбновитьДокументыАВРИзИСЭСФ(МассивАВР, ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ОткрытьФормуИзменениеСтатусовАВР(Знач Действие, Знач МассивАВР, Знач ЗапускатьФоновоеЗадание) Экспорт
	
	Контейнер = АВРКлиентСервер.КонтейнерМетодов();	
	Контейнер.ОткрытьФормуИзменениеСтатусовАВР(Действие, МассивАВР, ЗапускатьФоновоеЗадание);
	
КонецПроцедуры

Функция ИзменитьСтатусыАВР(Знач Действие, Знач КоллецияДляИзмененияСтатусов, Знач ДанныеПрофиляИСЭСФ, Знач ДанныеКлючаЭЦП, Знач УникальныйИдентификатор, Знач ЗапускатьФоновоеЗадание) Экспорт
	
	Контейнер = АВРКлиентСервер.КонтейнерМетодов();	
	Возврат Контейнер.ИзменитьСтатусыАВР(Действие, КоллецияДляИзмененияСтатусов, ДанныеПрофиляИСЭСФ, ДанныеКлючаЭЦП, УникальныйИдентификатор, ЗапускатьФоновоеЗадание);
	
КонецФункции

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

// Проверяет даты отправляемых АВР, если они отличаются от текущих, то предлагает изменить даты.
// Если пользователь согласится, то изменяет даты документов АВР и связанных документов.
//
// Параметры:
//  МассивАВР - Массив - Массив АВР, для которых необходимо установить текущую дату.
//   Каждый элемент массива должен иметь тип ДокументСсылка.ЭлектронныйАктВыполненныхРабот.
//  Действие - Строка - АВРКлиентСервер.ДействиеОтправка(), АВРКлиентСервер.ДействиеВыгрузка().
//
// Возвращаемое значение:
//  Булево - Истина - Можно продолжить отправку, Ложь - в противном случае.
//
Процедура УстановитьТекущуюДатуДляАВРВопрос(Знач МассивАВР, Знач Действие, Знач ОписаниеОповещения) Экспорт
	
	ТекущаяДата = НачалоДня(ЭСФВызовСервера.ТекущаяДатаНаСервере());	
	ИзмененГод  = Ложь;
	МассивАВРДругаяДата = АВРВызовСервера.МассивАВРДругаяДата(МассивАВР, ТекущаяДата, ИзмененГод);
	
	Если ИзмененГод Тогда
		СообщениеОСменеНомеровДокументов = Символы.ПС + НСтр("ru = 'ВНИМАНИЕ!!! При изменении года будут изменены номера документов!'");
	Иначе
		СообщениеОСменеНомеровДокументов = "";
	КонецЕсли;
	
	Если Действие = АВРКлиентСервер.ДействиеОтправка() Тогда
		ДействиеТекст = НСтр("ru = 'Отправляемый'"); 
	Иначе
		ДействиеТекст = НСтр("ru = 'Выгружаемый'");
	КонецЕсли;	
	
	Если МассивАВРДругаяДата.Количество() = 1 Тогда
		
		ТекстВопроса = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(НСтр(
			"ru = 'Дата ""%1"" отличается от текущей (%2).
			|%3 электронный акт выполненных работ должен иметь текущую дату.
			|Изменить дату электронного акта выполненных работ и связанного документа на текущую (%2)? %4'"), АВРКлиентСервер.КраткоеПредставлениеАВР(МассивАВРДругаяДата[0]), Формат(ТекущаяДата, "ДФ=dd.MM.yyyy"), ДействиеТекст,СообщениеОСменеНомеровДокументов);
		ОписаниеОповещения.ДополнительныеПараметры.Вставить("ТекущаяДата", ТекущаяДата);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
		
	ИначеЕсли МассивАВРДругаяДата.Количество() > 1 Тогда
		
		ТекстВопроса = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(НСтр(
			"ru = 'Даты %1 электронных актов выполненных работ отличаются от текущей (%2):
			|%3 электронные акты выполненных работ должны иметь текущую дату.
			|Изменить даты электронных актов выполненных работ и связанных документов на текущую (%2)? %4'"),МассивАВРДругаяДата.Количество(),Формат(ТекущаяДата, "ДФ=dd.MM.yyyy"),ДействиеТекст,СообщениеОСменеНомеровДокументов);
		ОписаниеОповещения.ДополнительныеПараметры.Вставить("ТекущаяДата", ТекущаяДата);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
		
	Иначе
		
		ОписаниеОповещения.ДополнительныеПараметры.Вставить("ТекущаяДата", ТекущаяДата);
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, Новый Структура("Ответ, ТекущаяДата", КодВозвратаДиалога.Пропустить, ТекущаяДата));
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СохранитьXMLДляИмпортаВИСЭСФЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ВыбранныеФайлы.Количество() = 1 Тогда

		ЗаписьТекста = Новый ЗаписьТекста();
		ЗаписьТекста.Открыть(ВыбранныеФайлы[0], "UTF-8");			
		ЗаписьТекста.Записать(ДополнительныеПараметры.XML);
		ЗаписьТекста.Закрыть();	
		
		ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(НСтр(
			"ru = 'Выгрузка электронных актов выполненнных работ успешно завершена.
			|Выгруженные акты выполненных работ можно импортировать в ИС ЭСФ, а затем отправить получателю средствами ИС ЭСФ.'"));
		
	КонецЕсли;
	
КонецПроцедуры

// Оповещает формы подсистемы о происхождении события.
//
// Параметры:
//  ИмяСобытия - Строка - Имя произошедшего события, ЭСФКлиентСервер.ИмяСобытия<Имя>().
//  Параметр - Массив, Неопределено - Массив ссылок на измененные или созданные объекты. 
//   Неопределено, если невозможно определить какие объекты были изменены или созданы.
//
Процедура ОповеститьФормы(Знач ИмяСобытия, Знач Параметр = Неопределено, Знач Источник = Неопределено) Экспорт
	
	Оповестить(ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

// Открывает форму выбора документа - основания из документа АВР.
// Используется в команде "Выбрать документ - основание", подменю "Отражение в учете".
// Обработка выбора выполняется в форме АВР и не требует переопределения.
//
// Параметры:
//  ФормаАВР - УправляемаяФорма - Форма документа АВР, 
//   из которой открывается форма выбора документа-основания.
//  ИмяФормыВыбора - Переменная - хранит имя формы того документа,
//   которого нужно открыть.
//
Процедура ОткрытьФормуВыбораДокументаОснования(Знач ФормаАВР, Знач ИмяФормыВыбора) Экспорт
	
	// Сформировать отбор формы выбора.
	Отбор = Новый Структура;
	
	Отбор.Вставить("Организация", ФормаАВР.Объект.Организация);
	
	// Открыть форму выбора с отбором.
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		Форма = ПолучитьФорму(ИмяФормыВыбора, , ФормаАВР);
		Для Каждого ЭлементОтбора Из Отбор Цикл
			Форма.ДокументСписок.Отбор[ЭлементОтбора.Ключ].Установить(ЭлементОтбора.Значение);
		КонецЦикла;
		Форма.Открыть();
	#Иначе
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Отбор", Отбор);
		ОткрытьФорму(ИмяФормыВыбора, ПараметрыФормы, ФормаАВР);		
	#КонецЕсли
	
КонецПроцедуры

Процедура ОткрытьФормуСпискаИсходящихАВР() Экспорт
	СписокАВР(ПредопределенноеЗначение("Перечисление.НаправленияЭСФ.Исходящий"));	
КонецПроцедуры

Процедура ОткрытьФормуСпискаВходящихАВР() Экспорт
	СписокАВР(ПредопределенноеЗначение("Перечисление.НаправленияЭСФ.Входящий"));	
КонецПроцедуры

Процедура СписокАВР(Знач Направление = Неопределено) Экспорт
	
	Контейнер = АВРКлиентСервер.КонтейнерМетодов();	
	Контейнер.СписокАВР(Направление);
	
КонецПроцедуры

// Проверяет корректность заполнения ЭАВР и показывает сообщения.
//
// Параметры:
//  МассивИсходящихэАВР - Массив - Массив документов ЭАВР, которые необходимо отправить в ИС ЭСФ.
//   Каждый элемент массива должен иметь тип ДокументСсылка.ЭлектронныйАктВыполненныхРабот.
//
Процедура ПроверитьИсходящиеЭАВР(Знач МассивИсходящихЭАВР) Экспорт
	
	Контейнер = АВРКлиентСервер.КонтейнерМетодов();
	Контейнер.ПроверитьИсходящиеЭАВР(МассивИсходящихЭАВР);
	
КонецПроцедуры

#КонецОбласти 

#Область СозданиеАктовНаОснованииПервичныхДокументов

Процедура ВыполнитьКомандуСоздатьЭАВР(Знач ПараметрКоманды) Экспорт
	
	Если ПараметрКоманды = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоИсправленныйЭАВР = Ложь;
	
	Если ТипЗнч(ПараметрКоманды) = Тип("Структура") Тогда
		МассивОснований = ПараметрКоманды.ДокументОснование;
		ЭтоИсправленныйЭАВР = ПараметрКоманды.ЭтоИсправленныйЭАВР;
	ИначеЕсли ТипЗнч(ПараметрКоманды) = Тип("Массив")Тогда
		МассивОснований = ПараметрКоманды;
	КонецЕсли;
	
	Если ЭтоИсправленныйЭАВР Тогда
		ГрупповоеСозданиеИсправленных = АВРКлиентСерверПереопределяемый.ДоступноГрупповоеСозданиеИсправленных();
		Если МассивОснований.Количество() > 1 И Не ГрупповоеСозданиеИсправленных Тогда
			ТекстСообщения = НСтр("ru = 'Групповое создание исправленных ЭАВР не предусмотрено'");
			ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ПереченьДокументовУжеЕстьИсправленныеЭАВР = "";
		
	// +++БК3
	Если ЭтоИсправленныйЭАВР Тогда
		
		МассивОснованийИсправленных = Новый Массив;
		Для Каждого Элемент Из МассивОснований Цикл
			ДокументОснование = ОбщегоНазначенияБКВызовСервера.ЗначениеРеквизитаОбъекта(Элемент, "ДокументОснование");
			Если ЗначениеЗаполнено(ДокументОснование) И ТипЗнч(ДокументОснование) = ТипЗнч(Элемент) Тогда  
				МассивОснованийИсправленных.Добавить(ДокументОснование);
			Иначе
				МассивОснованийИсправленных.Добавить(Элемент);
			КонецЕсли;
		КонецЦикла;

		ПараметрыДляВыполненияКоманды = АВРВызовСервера.ПодготовитьПараметрыДляВыполненияКомандыСоздатьЭАВР(МассивОснованийИсправленных);        
		                                                                                                         
	Иначе
		
		ПараметрыДляВыполненияКоманды = АВРВызовСервера.ПодготовитьПараметрыДляВыполненияКомандыСоздатьЭАВР(МассивОснований);
		
	КонецЕсли;
	//ПараметрыДляВыполненияКоманды = АВРВызовСервера.ПодготовитьПараметрыДляВыполненияКомандыСоздатьЭАВР(МассивОснований);
	
	// ---БК3
	
	МассивыОбрабатываемыхДокументов = ПараметрыДляВыполненияКоманды.МассивыОбрабатываемыхДокументов;
	
	МассивДокументовСЭАВР = МассивыОбрабатываемыхДокументов.МассивДокументовСЭАВР;
	
	МассивДокументовИсключений = МассивыОбрабатываемыхДокументов.МассивДокументовНедопустимыхОснований;
		
	НепроведенныеПервичныеДокументы = АВРВызовСервера.ПроверитьНепроведенныеПервичныеДокументы(МассивОснований);
	
	///АВР
	КонтрольПроведенияПервичных = АВРКлиентСерверПереопределяемый.КонтрольПроведенияДокументаОснования();
	// Проверка массива первичных документов на способ выписки, если способ выписки не "НаПорталеИСЭСФ", то из массива такой первичный документ удаляется	
	МассивДляУдаления = Новый Массив;
	Для Каждого ПервичныйДокумент Из МассивОснований Цикл
		Если НЕ ПроверитьДокументОснования(ПервичныйДокумент) Тогда
			МассивДляУдаления.Добавить(ПервичныйДокумент);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивДляУдаления.Количество() > 0 Тогда
		Для Каждого Документ Из МассивДляУдаления Цикл
			МассивОснований.Удалить(МассивОснований.Найти(Документ));
		КонецЦикла;
	КонецЕсли;
	///АВР
	
	// +++БК3
	МассивПодтвержденныхИВпроцессеРасторжения = МассивыОбрабатываемыхДокументов.МассивПодтвержденныхИВпроцессеРасторжения;
	Если ЭтоИсправленныйЭАВР И МассивПодтвержденныхИВпроцессеРасторжения.Количество() = 0 Тогда 
		ПоказатьПредупреждение(, НСтр("ru = 'Не найден Первичный ЭАВР в статусе <Подтвержденный> или <В процессе расторжения>,
                                            |выписанный после 02-02-2023 г.
                                            |Ввод Исправленного ЭАВР невозможен!'"));
		Возврат;
	КонецЕсли;
	// ---БК3

	// Содержит документы на основании которых уже были введены документы исправленный ЭАВР
	МассивДокументовСИсправленнымЭАВР = АВРВызовСервера.ПроверитьПервичныеДокументыНаНаличиеИсправленныхЭАВР(МассивОснований);
	
	ПереченьНепроведенныхПервчиныхДокументов = "";
	ТекстСообщенияНепроведены = НСтр("ru='Документы:'") + Символы.ПС;

	ДополнительныеПараметры = Новый Структура("МассивОснований, МассивДокументовСЭАВР, МассивДокументовИсключений, НепроведенныеПервичныеДокументы, ЭтоИсправленныйЭАВР, МассивДокументовСИсправленнымЭАВР", МассивОснований, МассивДокументовСЭАВР, МассивДокументовИсключений, НепроведенныеПервичныеДокументы, ЭтоИсправленныйЭАВР, МассивДокументовСИсправленнымЭАВР);
	
	Если КонтрольПроведенияПервичных И НепроведенныеПервичныеДокументы.Количество() > 0 Тогда
		
		Для Каждого Документ Из НепроведенныеПервичныеДокументы Цикл
			ПереченьНепроведенныхПервчиныхДокументов = ПереченьНепроведенныхПервчиныхДокументов + Документ + "," + Символы.ПС;
		КонецЦикла;
		ТекстСообщенияНепроведены = ТекстСообщенияНепроведены + Лев(ПереченьНепроведенныхПервчиныхДокументов, СтрДлина(ПереченьНепроведенныхПервчиныхДокументов) - 2) + Символы.ПС + НСтр("ru='не проведены. Провести документы?'");
		
		ОписаниеОповещения = Новый ОписаниеОповещения("СпроситьПользователяОПроведенииПервичныхДокументовЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстСообщенияНепроведены, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ПродолжитьСозданиеСпискаЭАВР(ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

// Если массив МассивДокументовСИсправленнымЭАВР не пустой, то выводим сообщения что у первчиного документа уже создан Исправленный ЭАВР,
//  пользователь может продолжить создание после вывода предупреждения.
Процедура ДокументыСИсправленнымЭАВР(ДополнительныеПараметры) Экспорт
	
	ПереченьДокументовУжеЕстьИсправленныеЭАВР = "";
	ТекстСообщенияУжеЕстьИсправленныеЭАВР = НСтр("ru='На основании документов:'") + Символы.ПС;

	МассивДокументовСИсправленнымЭАВР = ДополнительныеПараметры.МассивДокументовСИсправленнымЭАВР;
	
	Для Каждого Документ Из МассивДокументовСИсправленнымЭАВР Цикл
		ПереченьДокументовУжеЕстьИсправленныеЭАВР = ПереченьДокументовУжеЕстьИсправленныеЭАВР + Документ.ПервичныйДокумент + "," + Символы.ПС;
	КонецЦикла;
	
	ТекстСообщенияУжеЕстьИсправленныеЭАВР = ТекстСообщенияУжеЕстьИсправленныеЭАВР + Лев(ПереченьДокументовУжеЕстьИсправленныеЭАВР, СтрДлина(ПереченьДокументовУжеЕстьИсправленныеЭАВР) - 2) + Символы.ПС + НСтр("ru='уже созданы исправленные ЭАВР. Создать новые исправленные ЭАВР?'");
	
	ОписаниеОповещения = Новый ОписаниеОповещения("СпроситьПользователяОСозданииНовыхИсправленныхЭАВРЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ПоказатьВопрос(ОписаниеОповещения, ТекстСообщенияУжеЕстьИсправленныеЭАВР, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры
 
Процедура СпроситьПользователяОСозданииНовыхИсправленныхЭАВРЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	МассивОснований = ДополнительныеПараметры.МассивОснований;
	МассивДокументовСИсправленнымЭАВР = ДополнительныеПараметры.МассивДокументовСИсправленнымЭАВР;

	Если Ответ = КодВозвратаДиалога.Нет Тогда
	
		Для Каждого Документ Из МассивДокументовСИсправленнымЭАВР Цикл
			МассивОснований.Удалить(МассивОснований.Найти(Документ.ПервичныйДокумент));
		КонецЦикла;
		
		Возврат;

	ИначеЕсли Ответ = КодВозвратаДиалога.Да Тогда
		
		Если МассивОснований.Количество() = 1 Тогда
			ДополнительныеПараметры = Новый Структура("ДокументОснование, ЭтоИсправленныйЭАВР", МассивОснований[0], ДополнительныеПараметры.ЭтоИсправленныйЭАВР);
			СоздатьАВР(ДополнительныеПараметры);
		ИначеЕсли МассивОснований.Количество() > 1 Тогда
			СоздатьСписокЭАВР(ДополнительныеПараметры);
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

Процедура СпроситьПользователяОПроведенииПервичныхДокументовЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	МассивОснований = ДополнительныеПараметры.МассивОснований;
	НепроведенныеПервичныеДокументы = ДополнительныеПараметры.НепроведенныеПервичныеДокументы;
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		
		Для Каждого Документ Из НепроведенныеПервичныеДокументы Цикл
			МассивОснований.Удалить(МассивОснований.Найти(Документ));
		КонецЦикла;
		
		Возврат;
		
	ИначеЕсли Ответ = КодВозвратаДиалога.Да Тогда
		
		ПараметрыЗаписи = Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение);
		
		Попытка // Выполняем проведение документа
			
			Для Каждого Документ Из НепроведенныеПервичныеДокументы Цикл
				Ключ = Новый Структура("Ключ", Документ);
				ИмяФормыОбъекта = "Документ." + АВРВызовСервера.ПолучитьТипДокументаПоСсылке(Документ) + ".ФормаОбъекта";
				Форма = ПолучитьФорму(ИмяФормыОбъекта, Ключ);
				Форма.Записать(ПараметрыЗаписи);
			КонецЦикла;
			
		Исключение
			
			Информация = ИнформацияОбОшибке();
			ТекстСообщения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(НСтр("ru='Не удалось провести документ по причине: %1'"),КраткоеПредставлениеОшибки(Информация));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,);
			Возврат;
			
		КонецПопытки;
		
	КонецЕсли;
	
	ПродолжитьСозданиеСпискаЭАВР(ДополнительныеПараметры);
		
КонецПроцедуры

Процедура ПродолжитьСозданиеСпискаЭАВР(ДанныеДляЗаполнения) Экспорт
	
	ЭтоИсправленныйЭАВР = ДанныеДляЗаполнения.ЭтоИсправленныйЭАВР;
	МассивОснований = ДанныеДляЗаполнения.МассивОснований;
	МассивДокументовСЭАВР = ДанныеДляЗаполнения.МассивДокументовСЭАВР;
	МассивДокументовИсключений = ДанныеДляЗаполнения.МассивДокументовИсключений;
	МассивДокументовСИсправленнымЭАВР = ДанныеДляЗаполнения.МассивДокументовСИсправленнымЭАВР;
		
	Если МассивДокументовСЭАВР.Количество() <> 0 Тогда
		
		ДополнительныеПараметры = Новый Структура("ДокументОснование, ЭтоИсправленныйЭАВР", МассивОснований[0], ЭтоИсправленныйЭАВР);

		Если МассивОснований.Количество() = 1 И НЕ ЭтоИсправленныйЭАВР Тогда
			
			Если ПроверитьДокументОснования(МассивОснований[0]) Тогда
				
				ТекстВопроса = НСтр("ru = 'На основании выбранного документа уже созданы ЭАВР.'")+Символы.ПС + НСтр("ru='Создать новый ЭАВР?'");
				ОписаниеОповещения = Новый ОписаниеОповещения("СоздатьЭАВРЗавершение", ЭтотОбъект , ДополнительныеПараметры);
				ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
				
			КонецЕсли;
			
		ИначеЕсли МассивОснований.Количество() = 1 И ЭтоИсправленныйЭАВР Тогда
			
			Если МассивДокументовСИсправленнымЭАВР.Количество() > 0 Тогда
				ДокументыСИсправленнымЭАВР(ДанныеДляЗаполнения);
			Иначе
				СоздатьАВР(ДополнительныеПараметры);
			КонецЕсли;
			
		Иначе
			
			Если Не ПроверитьТипыОснований(МассивОснований) Тогда
				ПоказатьПредупреждение(, НСтр("ru = 'Различные типы документов не поддерживаются для множественного создания ЭАВР.
				|Выберите один вид документов.'"));
				Возврат;
			КонецЕсли;
			
			МассивОснований = ОбщегоНазначенияКлиентСервер.СократитьМассив(МассивОснований, МассивДокументовИсключений);
			Если МассивОснований.Количество() = 0 Тогда
				ПоказатьПредупреждение(, НСтр("ru = 'Операция не выполнена. Проверьте возможность создания ЭАВР на основании выбранных документов.'"));
				Возврат;
			КонецЕсли;
			
			ДополнительныеПараметры = Новый Структура("МассивОснований, ЭтоИсправленныйЭАВР", МассивОснований, ЭтоИсправленныйЭАВР);
			
			Если НЕ ЭтоИсправленныйЭАВР Тогда
				
				ТекстВопроса = НСтр("ru = 'На основании некоторых выбранных документов уже созданы ЭАВР.
				|Создать новые ЭАВР?'");
				ОписаниеОповещения = Новый ОписаниеОповещения("СоздатьСписокЭАВРЗавершение", ЭтотОбъект, ДополнительныеПараметры);
				ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
				
			ИначеЕсли ЭтоИсправленныйЭАВР Тогда
				Если МассивДокументовСИсправленнымЭАВР.Количество() > 0 Тогда
					ДокументыСИсправленнымЭАВР(ДанныеДляЗаполнения);
				Иначе
					СоздатьСписокЭАВР(ДополнительныеПараметры);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;

	ИначеЕсли МассивОснований.Количество() = 0 Тогда
		
		ПоказатьПредупреждение(, НСтр("ru = 'Выберите хотя бы один документ.'"));
		
	Иначе
		
		Если МассивОснований.Количество() > 1 Тогда 
			
			Если Не ПроверитьТипыОснований(МассивОснований) Тогда
				ПоказатьПредупреждение(, НСтр("ru = 'Различные типы документов не поддерживаются для множественного создания ЭАВР.
													|Выберите один вид документов.'"));
				Возврат;
			КонецЕсли;
			
			МассивОснований = ОбщегоНазначенияКлиентСервер.СократитьМассив(МассивОснований, МассивДокументовИсключений);
			Если МассивОснований.Количество() = 0 Тогда
				ПоказатьПредупреждение(, НСтр("ru = 'Операция не выполнена. Проверьте возможность создания ЭАВР на основании выбранных документов.'"));
				Возврат;
			КонецЕсли;
			
			ТекстВопроса = НСтр(
			"ru = 'Для выделенных документов будут созданы и записаны документы ЭАВР.
			|Продолжить?'");
			
			ДополнительныеПараметры = Новый Структура("МассивОснований, ЭтоИсправленныйЭАВР", МассивОснований, ЭтоИсправленныйЭАВР);
			ОписаниеОповещения = Новый ОписаниеОповещения("СоздатьСписокЭАВРЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			
		ИначеЕсли МассивОснований.Количество() = 1 Тогда
			
			Если ПроверитьДокументОснования(МассивОснований[0]) Тогда
				
				ДополнительныеПараметры = Новый Структура("ДокументОснование, ЭтоИсправленныйЭАВР", МассивОснований[0], ЭтоИсправленныйЭАВР);
				СоздатьАВР(ДополнительныеПараметры);
			
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьСписокЭАВРЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		СоздатьСписокЭАВР(ДополнительныеПараметры)
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьСписокЭАВР(ДополнительныеПараметры)
	
	ПараметрыСоздания = Новый Структура("МассивОснований, ЭтоИсправленныйЭАВР", ДополнительныеПараметры.МассивОснований, ДополнительныеПараметры.ЭтоИсправленныйЭАВР);
	СписокСозданныхЭАВР = АВРВызовСервера.СоздатьСписокИсходящихЭАВР(ПараметрыСоздания);
	
	Если СписокСозданныхЭАВР <> Неопределено И СписокСозданныхЭАВР.Количество() > 0 Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Отбор", Новый Структура("Ссылка", Новый ФиксированныйМассив(СписокСозданныхЭАВР)));
		ОткрытьФорму("Документ.ЭлектронныйАктВыполненныхРабот.Форма.ФормаСпискаИсходящих", ПараметрыФормы,, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьЭАВРЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		СоздатьАВР(ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьАВР(Знач ДополнительныеПараметры) Экспорт
	
	ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", Новый Структура("ДокументОснование, ЭтоИсправленныйЭАВР", ДополнительныеПараметры.ДокументОснование, ДополнительныеПараметры.ЭтоИсправленныйЭАВР));

	ОткрытьФорму("Документ.ЭлектронныйАктВыполненныхРабот.Форма.ФормаДокумента", ПараметрыФормы);
	
КонецПроцедуры

Функция ПроверитьТипыОснований(МассивОснований)
	
	ТипОснования = ТипЗнч(МассивОснований[0]);
	
	Для Каждого Элемент Из МассивОснований Цикл
		Если ТипОснования <> ТипЗнч(Элемент) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Функция ПроверитьДокументОснования(ДокументОснования)
	
	Возврат АВРВызовСервера.ПроверитьДокументОснованияЭАВР(ДокументОснования);
	
КонецФункции


#КонецОбласти

#Область ФоновыеЗадания

Процедура ОбработкаОповещенияАВР_ПроверятьОповещенияФоновогоЗадания(ЭтаФорма, Параметр) Экспорт

	Если Параметр = Неопределено
		ИЛИ НЕ ТипЗнч(Параметр) = Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	РезультатРаботыЗадания = Параметр;
	
	Если РезультатРаботыЗадания.ЗаданиеВыполнено Тогда
		
		АдресСообщенияПользователю = ЭСФВызовСервера.СообщенияФоновогоЗадания(РезультатРаботыЗадания.ИдентификаторЗадания);
		СообщенияПользователю = ПолучитьИзВременногоХранилища(АдресСообщенияПользователю);
		Если СообщенияПользователю <> Неопределено Тогда
			Для каждого СообщениеФоновогоЗадания Из СообщенияПользователю Цикл
				СообщениеФоновогоЗадания.Сообщить();
			КонецЦикла;
		КонецЕсли;
		
		АВРКлиент.ОповеститьФормы(АВРКлиентСервер.ИмяСобытияЗаписьАВР(), Параметр, ЭтаФорма);
		ДополнительныеОповещения = ?(Параметр.Свойство("ДополнительныеОповещения"), Параметр.ДополнительныеОповещения, Новый Структура);
		Для Каждого ДополнительноеОповещение Из ДополнительныеОповещения Цикл
			АВРКлиент.ОповеститьФормы(ДополнительноеОповещение.Ключ, Параметр, ЭтаФорма);
		КонецЦикла;			
	Иначе
	
		ПараметрыДлительнойОперации = Новый Структура;
		ПараметрыДлительнойОперации.Вставить("ИдентификаторЗадания");
		ПараметрыДлительнойОперации.Вставить("ВыводитьОкноОжидания", Истина);
		//ПараметрыДлительнойОперации.Вставить("ВыводитьПрогрессВыполнения", Истина);
		ПараметрыДлительнойОперации.Вставить("АдресРезультата", РезультатРаботыЗадания.АдресХранилища);
		ПараметрыДлительнойОперации.Вставить("ВыводитьСообщения", Истина);
		
		Если РезультатРаботыЗадания.Свойство("ТекстСообщения") Тогда
			ПараметрыДлительнойОперации.Вставить("ТекстСообщения", РезультатРаботыЗадания.ТекстСообщения);
		КонецЕсли;
		
		ПараметрыДлительнойОперации.ИдентификаторЗадания = РезультатРаботыЗадания.ИдентификаторЗадания;
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОповеститьОЗавершениияДлительнойОперацииАВР", АВРКлиент, ЭтаФорма);
		
		ОткрытьФорму("Обработка.ОбменЭСФ.Форма.ДлительнаяОперация", ПараметрыДлительнойОперации, ЭтаФорма,,,, ОписаниеОповещения);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОповеститьОЗавершениияДлительнойОперацииАВР(Результат, Источник) Экспорт

	Оповестить(АВРКлиентСервер.ИмяСобытияЗаписьАВР(), Результат, Источник);
	
	Если Источник.ИмяФормы = "Обработка.ОбменЭСФ.Форма.СинхронизацияАВР" Тогда
		Оповестить(АВРКлиентСервер.ИмяСобытияСинхронизацияАВР(), Результат, Источник);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 