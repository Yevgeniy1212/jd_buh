
#Область ПрограммныйИнтерфейс

// Возвращает организацию по умолчанию
// 
// Возвращаемое значение:
//  СправочникСсылка.Организации - Организация по умолчанию
//
Функция ОрганизацияПоУмолчанию() Экспорт
	
	Результат = Неопределено;
	
	Результат = Справочники.Организации.ОрганизацияПоУмолчанию();
	
	Возврат Результат;
	
КонецФункции

// Возвращает текст запроса для получения основных договоров
// 
// Возвращаемое значение:
//  Строка - Текст запроса
//
Процедура СформироватьЗапросОсновныеДоговоры(Запрос) Экспорт
	
	СформироватьЗапросОсновныеДоговорыБК(Запрос);
	
КонецПроцедуры

// Возвращает текст запроса для получения дополнительных соглашений
// 
// Возвращаемое значение:
//  Строка - Текст запроса
//
Процедура СформироватьЗапросДопСоглашения(Запрос) Экспорт
	
	СформироватьЗапросДопСоглашенияБК(Запрос);
	
КонецПроцедуры

// Возвращает текст запроса для получения договоров ранее уволенных сотрудников
// 
// Возвращаемое значение:
//  Строка - Текст запроса
//
Процедура СформироватьЗапросДоговорыУволенных(Запрос) Экспорт
	
	СформироватьЗапросДоговорыУволенныхБК(Запрос);
	
КонецПроцедуры

// Возвращает текст запроса для сопоставления должностей
// 
// Возвращаемое значение:
//  Строка - Текст запроса
//
Процедура СформироватьЗапросСопоставлениеДолжностей(Запрос) Экспорт
	
	СформироватьЗапросСопоставлениеДолжностейБК(Запрос);
	
КонецПроцедуры

// Возвращает текст запроса для получения расторгнутых договоров работающих сотрудников
// 
// Возвращаемое значение:
//  Строка - Текст запроса
//
Процедура СформироватьЗапросВосстановленныеДоговоры(Запрос) Экспорт
	
	СформироватьЗапросВосстановленныеДоговорыБК(Запрос);
	
КонецПроцедуры

// Возвращает БИН организации
//
// Параметры:
//  Организация	- СправочникСсылка.Организации - Организация
// 
// Возвращаемое значение:
//  Строка - БИН
//
Функция БИНОрганизации(Организация) Экспорт
	
	Результат = "";
	
	Результат = БИНОрганизацииБК(Организация);
	
	Возврат Результат;
	
КонецФункции

// Возвращает ИИН работника
//
// Параметры:
//  ФизическоеЛицо	- СправочникСсылка.ФизическиеЛица - физическое лицо
// 
// Возвращаемое значение:
//  Строка - ИИН
//
Функция ИИНРаботника(ФизическоеЛицо) Экспорт
	
	Результат = "";
	
	Результат = ИИНРаботникаБК(ФизическоеЛицо);
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьДанныеСотрудника(Период, Сотрудник) Экспорт
	
	ДанныеСотрудника = Новый Структура;
	
	ДанныеСотрудника.Вставить("Должность");
	ДанныеСотрудника.Вставить("КодДолжности");
	ДанныеСотрудника.Вставить("НаименованиеДолжности");
	ДанныеСотрудника.Вставить("ПоСовместительству");
	ДанныеСотрудника.Вставить("ДатаНачала");
	ДанныеСотрудника.Вставить("РежимРабочегоВремени");
	ДанныеСотрудника.Вставить("ДоляНеполногоРабочегоВремени");
	ДанныеСотрудника.Вставить("ИИНРаботника");
	
	ПолучитьДанныеСотрудникаБК(ДанныеСотрудника, Период, Сотрудник);
	
	Возврат ДанныеСотрудника;
	
КонецФункции

Функция ПолучитьПерезаполняемыеДанныеСотрудника() Экспорт
	
	ДанныеСотрудника = Новый Структура;
	
	ДанныеСотрудника.Вставить("КодДолжности");
	ДанныеСотрудника.Вставить("НаименованиеДолжности");
	
	Возврат ДанныеСотрудника;
	
КонецФункции

Функция ПолучитьТекущегоПользователя() Экспорт
	
	Возврат Пользователи.ТекущийПользователь();
	
КонецФункции

Процедура ПриСозданииНаСервереЭТД(Форма) Экспорт
	
	Элементы = Форма.Элементы;
	
	МассивПараметровВыбора = Новый Массив;
	МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("ВыбиратьГоловныеОрганизацииДляУчетаЗарплаты", Истина));
	Элементы.Организация.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);

	НоваяСвязь = Новый СвязьПараметраВыбора("Отбор.Организация", "Объект.Организация");
	
	НовыйМассив = Новый Массив();
	НовыйМассив.Добавить(НоваяСвязь);
	НовыеСвязи = Новый ФиксированныйМассив(НовыйМассив);
	
	Элементы.Сотрудник.СвязиПараметровВыбора = НовыеСвязи;
	
	Если ИспользоватьШтатноеРасписание() Тогда
		Элементы.Должность.Видимость = Ложь;
	Иначе
		Элементы.ДолжностьПоШтатномуРасписанию.Видимость = Ложь;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Элементы, "ФормаОбщаяКомандаПрисоединенныеФайлы") Тогда
		ПрисоединенныеФайлы = Элементы.ФормаОбщаяКомандаПрисоединенныеФайлы;
		ПрисоединенныеФайлы.ПоложениеВКоманднойПанели = ПоложениеКнопкиВКоманднойПанели.ВДополнительномПодменю;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(Форма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
КонецПроцедуры

Процедура ПриСозданииНаСервереФормыСпискаЭТД(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	ОбщегоНазначенияБКВызовСервера.УстановитьОтборПоОсновнойОрганизации(Форма,,,ОбщегоНазначенияБКВызовСервера.ГоловнаяОрганизацияДляУчетаЗарплаты(Справочники.Организации.ОрганизацияПоУмолчанию()));
	
	Элементы = Форма.Элементы;
	
	ИспользоватьШтатноеРасписание = ЭТДСервер.ИспользоватьШтатноеРасписание();
	Элементы.ДолжностьПоШтатномуРасписанию.Видимость = ИспользоватьШтатноеРасписание;
	Элементы.Должность.Видимость = НЕ ИспользоватьШтатноеРасписание;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Элементы, "ФормаОбщаяКомандаПрисоединенныеФайлы") Тогда
		ПрисоединенныеФайлы = Элементы.ФормаОбщаяКомандаПрисоединенныеФайлы;
		ПрисоединенныеФайлы.ПоложениеВКоманднойПанели = ПоложениеКнопкиВКоманднойПанели.ВДополнительномПодменю;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(Форма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
КонецПроцедуры

Процедура ПриСозданииНаСервереФормыСпискаРегистраСведений(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	Элементы = Форма.Элементы;
	
	ИспользоватьШтатноеРасписание = ЭТДСервер.ИспользоватьШтатноеРасписание();
	Элементы.ДолжностьОрганизации.Видимость = НЕ ИспользоватьШтатноеРасписание;
	Элементы.ДолжностьПоШтатномуРасписанию.Видимость = ИспользоватьШтатноеРасписание;
	
КонецПроцедуры

Процедура ПриСозданииНаСервереРабочееМестоЭТД(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	Элементы = Форма.Элементы;

	Форма.Организация = ЭТДСервер.ОрганизацияПоУмолчанию();

	МассивПараметровВыбора = Новый Массив;
	МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("ВыбиратьГоловныеОрганизацииДляУчетаЗарплаты", Истина));
	Элементы.Организация.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);
	
КонецПроцедуры

Процедура ПриСозданииНаСервереСопоставлениеДолжностей(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	Элементы = Форма.Элементы;

	Форма.Организация = ЭТДСервер.ОрганизацияПоУмолчанию();

	МассивПараметровВыбора = Новый Массив;
	МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("ВыбиратьГоловныеОрганизацииДляУчетаЗарплаты", Истина));
	Элементы.Организация.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);
	
КонецПроцедуры

Процедура ПриСозданииНаСервереСопоставлениеДолжностейЭТД(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	Элементы = Форма.Элементы;

	МассивПараметровВыбора = Новый Массив;
	МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("ВыбиратьГоловныеОрганизацииДляУчетаЗарплаты", Истина));
	Элементы.Организация.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);
	
КонецПроцедуры

Процедура ПриСозданииНаСервереСопоставлениеПричинРасторженияЭТД(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	Элементы = Форма.Элементы;

	МассивПараметровВыбора = Новый Массив;
	МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("ВыбиратьГоловныеОрганизацииДляУчетаЗарплаты", Истина));
	Элементы.Организация.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);
	
КонецПроцедуры

Процедура ПриСозданииНаСервереСопоставлениеПрофилейНавыковЭТД(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	Элементы = Форма.Элементы;

	МассивПараметровВыбора = Новый Массив;
	МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("ВыбиратьГоловныеОрганизацииДляУчетаЗарплаты", Истина));
	Элементы.Организация.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);
	
КонецПроцедуры

Функция ИспользоватьШтатноеРасписание() Экспорт
	
	Возврат Ложь;
	
КонецФункции

Функция ПолучитьДолжностьОрганизации(ДолжностьПоШтатномуРасписанию) Экспорт
	
	Должность = Неопределено;
	
	Возврат Должность;
	
КонецФункции

Функция ПолучитьМассивВыбораВладельцыПрофиля() Экспорт
	
	СписокТипов = Новый СписокЗначений;
	
	СписокТипов.Добавить(Тип("СправочникСсылка.ДолжностиОрганизаций"));
	СписокТипов.Добавить(Тип("СправочникСсылка.СотрудникиОрганизаций"));
	
	Возврат СписокТипов;
	
КонецФункции

Функция ФоновоеЗаданиеЗапущено(Знач ИмяПроцедуры) Экспорт
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("ЗаданиеАктивно", Ложь);
	
	МассивФоновыхЗаданий = ФоновыеЗадания.ПолучитьФоновыеЗадания(Новый Структура("ИмяМетода, Состояние", ИмяПроцедуры, СостояниеФоновогоЗадания.Активно));
		
	Если МассивФоновыхЗаданий.Количество() > 0 Тогда
		СтруктураВозврата.Вставить("ЗаданиеАктивно", Истина);
	КонецЕсли;		
	
	Возврат СтруктураВозврата;

КонецФункции

Функция ПараметрыВыполненияВФоне(Знач ИдентификаторФормы = Неопределено) Экспорт
	
	Возврат ДлительныеОперации.ПараметрыВыполненияВФоне(ИдентификаторФормы);
	
КонецФункции

Функция ВыполнитьВФоне(Знач ИмяЭкспортнойПроцедуры, Знач ПараметрыПроцедуры, Знач ПараметрыВыполнения) Экспорт
	
	Результат = ДлительныеОперации.ВыполнитьВФоне(ИмяЭкспортнойПроцедуры, ПараметрыПроцедуры, ПараметрыВыполнения);

	Возврат Результат;
	
КонецФункции

Функция ПолучитьСотрудникаПоИИН(ИИН, Организация, ДатаЗаключения) Экспорт
	
	Сотрудник = Неопределено;
	
	Сотрудник = ПолучитьСотрудникаПоИИНБК(ИИН, Организация);
	
	Возврат Сотрудник;
	
КонецФункции

Функция ПолучитьИИНПоСотруднику(Сотрудник) Экспорт
	
	ИИН = "";
	
	ИИН = ПолучитьИИНПоСотрудникуБК(Сотрудник);
	
	Возврат ИИН;
	
КонецФункции

Процедура СоздатьЗаписьЖурналаРегистрации(
	ИмяСобытия, 
	УровеньСтрокой = "", 
	ОбъектМетаданных = Неопределено, 
	Данные = Неопределено, 
	Комментарий = "") Экспорт
	
	Если УровеньСтрокой = "Информация" Тогда
		Уровень = УровеньЖурналаРегистрации.Информация;
	ИначеЕсли УровеньСтрокой = "Ошибка" Тогда
		Уровень = УровеньЖурналаРегистрации.Ошибка;
	ИначеЕсли УровеньСтрокой = "Предупреждение" Тогда
		Уровень = УровеньЖурналаРегистрации.Предупреждение;
	ИначеЕсли УровеньСтрокой = "Примечание" Тогда
		Уровень = УровеньЖурналаРегистрации.Примечание;
	Иначе
		Уровень = УровеньЖурналаРегистрации.Информация;
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации(ИмяСобытия, Уровень, ОбъектМетаданных, Данные, Комментарий);
	
КонецПроцедуры

Функция ПолучитьДанныеДляАвтозаполненияЭТД(Организация, Период) Экспорт
	
	СтруктураДанныхДляАвтозаполнения = Новый Структура("Организация, КодРегиона, КодРегионаРабочегоМеста, МестоРаботы, ТипРаботодателя");
	СтруктураДанныхДляАвтозаполнения.Организация = Организация;
	
	ПолучитьДанныеДляАвтозаполненияБК(Организация, СтруктураДанныхДляАвтозаполнения);
	
	Возврат СтруктураДанныхДляАвтозаполнения;
	
КонецФункции

Процедура ЗаполнитьНаборыЗначенийДоступа(ДокументОбъект, Таблица) Экспорт
	
	ЗаполнитьНаборыЗначенийДоступаБК(ДокументОбъект, Таблица);
	
КонецПроцедуры

Процедура ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения(ИсточникиДанных) Экспорт
	
	
	
КонецПроцедуры

Процедура ПриЗаполненииВидовОграниченийПравОбъектовМетаданных(Описание) Экспорт
	
	
	
КонецПроцедуры

Процедура ПриЗаполненииСписковСОграничениемДоступа(Списки) Экспорт
	
	
	
КонецПроцедуры

Процедура ПриЗаполненииОграниченияДоступаРегистраСведений(Ограничение, НаименованиеОбъекта) Экспорт
	
	
	
КонецПроцедуры

Процедура ПриЗаполненииОграниченияДоступаЭТД(Ограничение) Экспорт
	
	
	
КонецПроцедуры

Процедура ПриЧтенииНаСервереРегистраСведений(Форма, ТекущийОбъект) Экспорт
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(Форма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(Форма, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

Процедура ПослеЗаписиНаСервереРегистраСведений(Форма, ТекущийОбъект, ПараметрыЗаписи) Экспорт

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПослеЗаписиНаСервере(Форма, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом

КонецПроцедуры

Процедура ПриЧтенииНаСервереЭТД(Форма, ТекущийОбъект) Экспорт
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(Форма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(Форма, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	 
КонецПроцедуры

Процедура ПослеЗаписиНаСервереЭТД(Форма, ТекущийОбъект, ПараметрыЗаписи) Экспорт
	  	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПослеЗаписиНаСервере(Форма, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;
 	// Конец СтандартныеПодсистемы.УправлениеДоступом

КонецПроцедуры

Функция ИдентификаторЭТД(Документ) Экспорт
	
	Результат = "";
	
	Результат = ИдентификаторЭТДБК(Документ);
	
	Возврат Результат;
	
КонецФункции

Функция ИнформационнаяБазаФайловая() Экспорт
	
	Возврат ОбщегоНазначения.ИнформационнаяБазаФайловая();
	
КонецФункции

Функция ПолучитьУсловияТрудаПоУмолчанию(ПараметрыПодбора = Неопределено) Экспорт
	
	Возврат "0";
	
КонецФункции

Функция СотрудникПодходитДляПрофессиональнойВыплаты(Сотрудник, ПериодДанных) Экспорт
	
	Возврат СотрудникПодходитДляПрофессиональнойВыплатыБК(Сотрудник, ПериодДанных);
	
КонецФункции

Функция ПолучитьПризнакГражданстваРК(Сотрудник, ПериодДанных) Экспорт
	
	Возврат ПолучитьПризнакГражданстваРКБК(Сотрудник, ПериодДанных);
	
КонецФункции

Процедура ПрисоединенныеФайлыПриЗаполненииНастроекОбработчиковПравилРегистрации(Настройки) Экспорт
	
	
	
КонецПроцедуры

Функция ПолучитьПараметрыСотрудникаДляСоциальногоОтпуска(Сотрудник, ДатаПолученияДанных) Экспорт
	
	Возврат ПолучитьПараметрыСотрудникаДляСоциальногоОтпускаБК(Сотрудник, ДатаПолученияДанных);
	
КонецФункции

Функция ПолучитьКоличествоВыходныхДнейЗаПериод(Сотрудник, НачалоПериода, КонецПериода) Экспорт
	
	Возврат ПолучитьКоличествоВыходныхДнейЗаПериодБК(Сотрудник, НачалоПериода, КонецПериода);
	
КонецФункции

// Возвращает роль, для которой доступно изменение настроек обмена ЭТД
Функция ДоступнаРольИзмененияНастроекЭТД() Экспорт
	Возврат РольДоступна("ПолныеПрава")
			ИЛИ РольДоступна("ДобавлениеИзменениеНастроекЭТД");
КонецФункции

// Возвращает признак необходимости отображать информацию о включенной серверной криптографии.
//
Функция ПоказыватьОповещенияСервернаяКриптография() Экспорт
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПолучитьДанныеСотрудникаБК(ДанныеСотрудника, Период, Сотрудник)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РаботникиОрганизацийСрезПоследних.ОбособленноеПодразделение КАК Организация,
		|	РаботникиОрганизацийСрезПоследних.Должность КАК Должность,
		|	ЕСТЬNULL(СотрудникиОрганизаций.ВидЗанятости, ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ПустаяСсылка)) КАК ВидЗанятости,
		|	ЕСТЬNULL(ФизическиеЛица.ИдентификационныйКодЛичности, """") КАК ИИНРаботника,
		|	РаботникиОрганизацийСрезПоследних.Период КАК ДатаНачала
		|ИЗ
		|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(&Период, Сотрудник = &Сотрудник) КАК РаботникиОрганизацийСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
		|			ПО СотрудникиОрганизаций.Физлицо = ФизическиеЛица.Ссылка
		|		ПО РаботникиОрганизацийСрезПоследних.Сотрудник = СотрудникиОрганизаций.Ссылка";
	
	Запрос.УстановитьПараметр("Период", Период);
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаПоСотруднику = РезультатЗапроса.Выбрать();
	
	Если НЕ ВыборкаПоСотруднику.Следующий() Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеДолжностиЭТД = ЭТДСервер.ПолучитьИнформациюОКодеДолжности(Период, ВыборкаПоСотруднику.Должность, Неопределено, ВыборкаПоСотруднику.Организация);
	
	ДанныеПрофильНавыков = ЭТДСервер.ПолучитьПрофильНавыков(Период, ВыборкаПоСотруднику.Должность, Сотрудник, ВыборкаПоСотруднику.Организация);
	
	ДанныеСотрудника.Вставить("РежимРабочегоВремени", "1");
	
	ДанныеСотрудника.Вставить("ДоляНеполногоРабочегоВремени", "1");
	
	ДанныеСотрудника.Вставить("СрокДействия", "1");
	
	Если ЗначениеЗаполнено(ВыборкаПоСотруднику.ДатаНачала) Тогда
		ДанныеСотрудника.Вставить("ДатаНачала", ВыборкаПоСотруднику.ДатаНачала);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВыборкаПоСотруднику.Должность) Тогда
		ДанныеСотрудника.Вставить("Должность", ВыборкаПоСотруднику.Должность);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВыборкаПоСотруднику.ВидЗанятости) Тогда
		ДанныеСотрудника.Вставить("ПоСовместительству", ?(ВыборкаПоСотруднику.ВидЗанятости = Перечисления.ВидыЗанятостиВОрганизации.Совместительство 
												ИЛИ ВыборкаПоСотруднику.ВидЗанятости = Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство, Истина, Ложь));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВыборкаПоСотруднику.ИИНРаботника) Тогда
		ДанныеСотрудника.Вставить("ИИНРаботника", ВыборкаПоСотруднику.ИИНРаботника)
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеДолжностиЭТД.КодДолжности) Тогда
		ДанныеСотрудника.Вставить("КодДолжности", ДанныеДолжностиЭТД.КодДолжности);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеДолжностиЭТД.НаименованиеДолжности) Тогда
		ДанныеСотрудника.Вставить("НаименованиеДолжности", ДанныеДолжностиЭТД.НаименованиеДолжности);
	КонецЕсли;
	
	Если ДанныеПрофильНавыков.ОбщиеНавыки.Количество() > 0 Тогда
		ДанныеСотрудника.Вставить("ОбщиеНавыки", ДанныеПрофильНавыков.ОбщиеНавыки.Выгрузить());
	КонецЕсли;
	
	Если ДанныеПрофильНавыков.ПрофессиональныеНавыки.Количество() > 0 Тогда
		ДанныеСотрудника.Вставить("СпециальныеНавыки", ДанныеПрофильНавыков.ПрофессиональныеНавыки.Выгрузить());
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьЗапросОсновныеДоговорыБК(Запрос)
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Организации.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВТОрганизации
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	Организации.Ссылка = &Организация
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Организации.Ссылка
		|ИЗ
		|	Справочник.Организации КАК Организации
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаПоПерсоналуОрганизаций КАК УчетнаяПолитикаПоПерсоналуОрганизаций
		|		ПО (УчетнаяПолитикаПоПерсоналуОрганизаций.Организация = Организации.Ссылка)
		|			И (Организации.ГоловнаяОрганизация = &Организация)
		|			И (НЕ Организации.Ссылка = &Организация)
		|			И (УчетнаяПолитикаПоПерсоналуОрганизаций.ВестиУчетПоГоловнойОрганизации)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РаботникиОрганизацийСрезПоследних.Сотрудник КАК Сотрудник,
		|	СотрудникиОрганизаций.Физлицо КАК Физлицо
		|ПОМЕСТИТЬ ВТ_РаботающиеСотрудники
		|ИЗ
		|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(&Период, ) КАК РаботникиОрганизацийСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
		|		ПО РаботникиОрганизацийСрезПоследних.Сотрудник = СотрудникиОрганизаций.Ссылка
		|ГДЕ
		|	РаботникиОрганизацийСрезПоследних.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
		|	И РаботникиОрганизацийСрезПоследних.Организация В
		|			(ВЫБРАТЬ
		|				Организации.Ссылка
		|			ИЗ
		|				ВТОрганизации КАК Организации)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВТ_РаботающиеСотрудники.Сотрудник КАК Сотрудник,
		|	ВТ_РаботающиеСотрудники.Физлицо КАК Физлицо,
		|	РаботникиОрганизацийСрезПоследних.Должность КАК ДолжностьПриПриеме,
		|	РаботникиОрганизацийСрезПоследних.Период КАК ДатаПриема,
		|	РаботникиОрганизацийСрезПоследних.Регистратор КАК ДокументОснование,
		|	МАКСИМУМ(СопоставлениеДолжностейЭТД.Период) КАК СопоставлениеДолжностейЭТДПериод
		|ПОМЕСТИТЬ ВТ_СотрудникиДолжность
		|ИЗ
		|	ВТ_РаботающиеСотрудники КАК ВТ_РаботающиеСотрудники
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних(&Период, ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу)) КАК РаботникиОрганизацийСрезПоследних
		|		ПО ВТ_РаботающиеСотрудники.Сотрудник = РаботникиОрганизацийСрезПоследних.Сотрудник
		|			И (РаботникиОрганизацийСрезПоследних.ОбособленноеПодразделение В (ВЫБРАТЬ
		|				Организации.Ссылка
		|			ИЗ
		|				ВТОрганизации КАК Организации))
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СопоставлениеДолжностейЭТД КАК СопоставлениеДолжностейЭТД
		|		ПО (РаботникиОрганизацийСрезПоследних.Должность = СопоставлениеДолжностейЭТД.ДолжностьОрганизации)
		|			И (РаботникиОрганизацийСрезПоследних.Организация В
		|				(ВЫБРАТЬ
		|					Организации.Ссылка
		|				ИЗ
		|					ВТОрганизации КАК Организации))
		|			И (РаботникиОрганизацийСрезПоследних.Период >= СопоставлениеДолжностейЭТД.Период)
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_РаботающиеСотрудники.Сотрудник,
		|	ВТ_РаботающиеСотрудники.Физлицо,
		|	РаботникиОрганизацийСрезПоследних.Должность,
		|	РаботникиОрганизацийСрезПоследних.Период,
		|	РаботникиОрганизацийСрезПоследних.Регистратор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВТ_СотрудникиДолжность.Сотрудник КАК Сотрудник,
		|	ВТ_СотрудникиДолжность.ДолжностьПриПриеме КАК Должность,
		|	ВТ_СотрудникиДолжность.ДокументОснование КАК ДокументОснование,
		|	ЕСТЬNULL(ЭТД.Ссылка, ЗНАЧЕНИЕ(Документ.ЭТД.ПустаяСсылка)) КАК ЭТДСсылка,
		|	ЕСТЬNULL(ЭТД.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыЭТД.ПустаяСсылка)) КАК Статус,
		|	ЕСТЬNULL(ЭТД.НомерДоговора, """") КАК НомерДоговора,
		|	ЕСТЬNULL(ЭТД.ДатаЗаключения, ВТ_СотрудникиДолжность.ДатаПриема) КАК ДатаНачала,
		|	ЕСТЬNULL(ЭТД.МестоРаботы, """") КАК МестоРаботы,
		|	ЕСТЬNULL(ЭТД.КодРегиона, """") КАК КодРегиона,
		|	ЕСТЬNULL(ЭТД.СрокДействия, """") КАК СрокДействия,
		|	ЕСТЬNULL(ЭТД.КодДолжности, ЕСТЬNULL(СопоставлениеДолжностейЭТД.КодДолжностиЭТД, ЕСТЬNULL(СопоставлениеДолжностейЭТДАктуальное.КодДолжностиЭТД, """"))) КАК ЭТДКодДолжности,
		|	ЕСТЬNULL(ЭТД.НаименованиеДолжности, ЕСТЬNULL(СопоставлениеДолжностейЭТД.НаименованиеЭТД, ЕСТЬNULL(СопоставлениеДолжностейЭТДАктуальное.НаименованиеЭТД, """"))) КАК ЭТДДолжность,
		|	ЕСТЬNULL(ЭТД.ОтношениеКВоинскойСлужбе, """") КАК ОтношениеКВоинскойСлужбе,
		|	ЕСТЬNULL(ЭТД.РежимРабочегоВремени, """") КАК РежимРабочегоВремени,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ЭТД.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыЭТД.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.СтатусыЭТД.ПустаяСсылка)
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК Порядок
		|ИЗ
		|	ВТ_СотрудникиДолжность КАК ВТ_СотрудникиДолжность
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭТД КАК ЭТД
		|		ПО ВТ_СотрудникиДолжность.Сотрудник = ЭТД.Сотрудник
		|			И (НЕ ЭТД.ПометкаУдаления)
		|			И (НЕ ЭТД.ЭтоДополнительноеСоглашение)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СопоставлениеДолжностейЭТД.СрезПоследних(&Период, Организация = &Организация) КАК СопоставлениеДолжностейЭТДАктуальное
		|		ПО ВТ_СотрудникиДолжность.ДолжностьПриПриеме = СопоставлениеДолжностейЭТДАктуальное.ДолжностьОрганизации
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СопоставлениеДолжностейЭТД КАК СопоставлениеДолжностейЭТД
		|		ПО ВТ_СотрудникиДолжность.ДолжностьПриПриеме = СопоставлениеДолжностейЭТД.ДолжностьОрганизации
		|			И (СопоставлениеДолжностейЭТД.Организация = &Организация)
		|			И ВТ_СотрудникиДолжность.СопоставлениеДолжностейЭТДПериод = СопоставлениеДолжностейЭТД.Период
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
		|		ПО ВТ_СотрудникиДолжность.Сотрудник = СотрудникиОрганизаций.Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	СотрудникиОрганизаций.Наименование";
	
КонецПроцедуры

Процедура СформироватьЗапросДопСоглашенияБК(Запрос)
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Организации.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВТОрганизации
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	Организации.Ссылка = &Организация
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Организации.Ссылка
		|ИЗ
		|	Справочник.Организации КАК Организации
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаПоПерсоналуОрганизаций КАК УчетнаяПолитикаПоПерсоналуОрганизаций
		|		ПО (УчетнаяПолитикаПоПерсоналуОрганизаций.Организация = Организации.Ссылка)
		|			И (Организации.ГоловнаяОрганизация = &Организация)
		|			И (НЕ Организации.Ссылка = &Организация)
		|			И (УчетнаяПолитикаПоПерсоналуОрганизаций.ВестиУчетПоГоловнойОрганизации)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РаботникиОрганизацийСрезПоследних.Сотрудник КАК Сотрудник,
		|	РаботникиОрганизацийСрезПоследних.Должность КАК Должность,
		|	СотрудникиОрганизаций.Физлицо КАК Физлицо,
		|	РаботникиОрганизацийСрезПоследних.Период КАК ДатаИзменения,
		|	РаботникиОрганизацийСрезПоследних.Регистратор КАК ДокументОснование,
		|	РаботникиОрганизацийДолжностьПриПриеме.Регистратор КАК ДокументОснованиеПриемНаРаботу,
		|	МАКСИМУМ(СопоставлениеДолжностейЭТД.Период) КАК СопоставлениеДолжностейЭТДПериод
		|ПОМЕСТИТЬ ВТ_ИзмененныеДолжности
		|ИЗ
		|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(&Период, ) КАК РаботникиОрганизацийСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних(&Период, ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу)) КАК РаботникиОрганизацийДолжностьПриПриеме
		|		ПО РаботникиОрганизацийСрезПоследних.Сотрудник = РаботникиОрганизацийДолжностьПриПриеме.Сотрудник
		|			И (РаботникиОрганизацийСрезПоследних.ОбособленноеПодразделение В (ВЫБРАТЬ
		|				Организации.Ссылка
		|			ИЗ
		|				ВТОрганизации КАК Организации))
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
		|		ПО РаботникиОрганизацийСрезПоследних.Сотрудник = СотрудникиОрганизаций.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СопоставлениеДолжностейЭТД КАК СопоставлениеДолжностейЭТД
		|		ПО РаботникиОрганизацийСрезПоследних.Должность = СопоставлениеДолжностейЭТД.ДолжностьОрганизации
		|			И (СопоставлениеДолжностейЭТД.Организация = &Организация)
		|			И РаботникиОрганизацийСрезПоследних.Период >= СопоставлениеДолжностейЭТД.Период
		|ГДЕ
		|	РаботникиОрганизацийСрезПоследних.Организация В
		|			(ВЫБРАТЬ
		|				Организации.Ссылка
		|			ИЗ
		|				ВТОрганизации КАК Организации)
		|	И РаботникиОрганизацийСрезПоследних.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
		|	И РаботникиОрганизацийСрезПоследних.Должность <> ЕСТЬNULL(РаботникиОрганизацийДолжностьПриПриеме.Должность, ЗНАЧЕНИЕ(Справочник.ДолжностиОрганизаций.ПустаяСсылка))
		|
		|СГРУППИРОВАТЬ ПО
		|	РаботникиОрганизацийСрезПоследних.Сотрудник,
		|	РаботникиОрганизацийСрезПоследних.Должность,
		|	СотрудникиОрганизаций.Физлицо,
		|	РаботникиОрганизацийСрезПоследних.Период,
		|	РаботникиОрганизацийСрезПоследних.Регистратор,
		|	РаботникиОрганизацийДолжностьПриПриеме.Регистратор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВТ_ИзмененныеДолжности.Сотрудник КАК Сотрудник,
		|	ВТ_ИзмененныеДолжности.Должность КАК Должность,
		|	ВТ_ИзмененныеДолжности.ДокументОснование КАК ДокументОснование,
		|	ЕСТЬNULL(ЭТДДопСоглашение.Ссылка, ЗНАЧЕНИЕ(Документ.ЭТД.ПустаяСсылка)) КАК ДопСоглашениеСсылка,
		|	ЕСТЬNULL(ЭТДОсновной.Ссылка, ЗНАЧЕНИЕ(Документ.ЭТД.ПустаяСсылка)) КАК ОсновнойДоговорСсылка,
		|	ВЫБОР
		|		КОГДА ЭТДДопСоглашение.Ссылка ЕСТЬ NULL
		|			ТОГДА ЕСТЬNULL(ЭТДОсновной.МестоРаботы, """")
		|		ИНАЧЕ ЭТДДопСоглашение.МестоРаботы
		|	КОНЕЦ КАК МестоРаботы,
		|	ВЫБОР
		|		КОГДА ЭТДДопСоглашение.Ссылка ЕСТЬ NULL
		|			ТОГДА ЕСТЬNULL(ЭТДОсновной.КодРегиона, """")
		|		ИНАЧЕ ЭТДДопСоглашение.КодРегиона
		|	КОНЕЦ КАК КодРегиона,
		|	ВЫБОР
		|		КОГДА ЭТДДопСоглашение.Ссылка ЕСТЬ NULL
		|			ТОГДА ЕСТЬNULL(ЭТДОсновной.СрокДействия, """")
		|		ИНАЧЕ ЭТДДопСоглашение.СрокДействия
		|	КОНЕЦ КАК СрокДействия,
		|	ЕСТЬNULL(ЭТДДопСоглашение.НомерДоговора, ЕСТЬNULL(ЭТДОсновной.НомерДоговора + ""/"", """")) КАК НомерДоговора,
		|	ЕСТЬNULL(ЭТДДопСоглашение.ДатаЗаключения, ВТ_ИзмененныеДолжности.ДатаИзменения) КАК ДатаНачала,
		|	ЕСТЬNULL(ЭТДДопСоглашение.КодДолжности, ЕСТЬNULL(СопоставлениеДолжностейЭТД.КодДолжностиЭТД, ЕСТЬNULL(СопоставлениеДолжностейЭТДАктуальное.КодДолжностиЭТД, """"))) КАК ЭТДКодДолжности,
		|	ЕСТЬNULL(ЭТДДопСоглашение.НаименованиеДолжности, ЕСТЬNULL(СопоставлениеДолжностейЭТД.НаименованиеЭТД, ЕСТЬNULL(СопоставлениеДолжностейЭТДАктуальное.НаименованиеЭТД, """"))) КАК ЭТДДолжность,
		|	ЕСТЬNULL(ЭТДДопСоглашение.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыЭТД.ПустаяСсылка)) КАК ДопСоглашениеСтатус,
		|	ЕСТЬNULL(ЭТДОсновной.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыЭТД.ПустаяСсылка)) КАК ОсновнойДоговорСтатус,
		|	ЕСТЬNULL(ЭТДОсновной.КодТяжелыхУсловийТруда, """") КАК КодТяжелыхУсловийТруда,
		|	ВЫБОР
		|		КОГДА ЭТДДопСоглашение.Ссылка ЕСТЬ NULL
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК Порядок
		|ИЗ
		|	ВТ_ИзмененныеДолжности КАК ВТ_ИзмененныеДолжности
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭТД КАК ЭТДДопСоглашение
		|		ПО ВТ_ИзмененныеДолжности.Сотрудник = ЭТДДопСоглашение.Сотрудник
		|			И (НАЧАЛОПЕРИОДА(ВТ_ИзмененныеДолжности.ДатаИзменения, ДЕНЬ) = ЭТДДопСоглашение.ДатаЗаключения)
		|			И (ЭТДДопСоглашение.ЭтоДополнительноеСоглашение)
		|			И (НЕ ЭТДДопСоглашение.ПометкаУдаления)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СопоставлениеДолжностейЭТД.СрезПоследних(&Период, Организация = &Организация) КАК СопоставлениеДолжностейЭТДАктуальное
		|		ПО ВТ_ИзмененныеДолжности.Должность = СопоставлениеДолжностейЭТДАктуальное.ДолжностьОрганизации
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СопоставлениеДолжностейЭТД КАК СопоставлениеДолжностейЭТД
		|		ПО ВТ_ИзмененныеДолжности.Должность = СопоставлениеДолжностейЭТД.ДолжностьОрганизации
		|			И (СопоставлениеДолжностейЭТД.Организация = &Организация)
		|			И ВТ_ИзмененныеДолжности.СопоставлениеДолжностейЭТДПериод = СопоставлениеДолжностейЭТД.Период
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭТД КАК ЭТДОсновной
		|		ПО ВТ_ИзмененныеДолжности.ДокументОснованиеПриемНаРаботу = ЭТДОсновной.ДокументОснование
		|			И (НЕ ЭТДОсновной.ПометкаУдаления)
		|			И ВТ_ИзмененныеДолжности.Сотрудник = ЭТДОсновной.Сотрудник
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
		|		ПО ВТ_ИзмененныеДолжности.Сотрудник = СотрудникиОрганизаций.Ссылка
		|ГДЕ
		|	НЕ ЭТДОсновной.Ссылка ЕСТЬ NULL
		|	И ЭТДОсновной.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЭТД.Зарегистрирован)
		|
		|УПОРЯДОЧИТЬ ПО
		|	СотрудникиОрганизаций.Наименование";
	
КонецПроцедуры

Процедура СформироватьЗапросСопоставлениеДолжностейБК(Запрос)
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Организации.Ссылка КАК Ссылка,
		|	ЛОЖЬ КАК ВестиУчетПоГоловнойОрганизации,
		|	Организации.ГоловнаяОрганизация КАК ГоловнаяОрганизация
		|ПОМЕСТИТЬ ВТОрганизации
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	Организации.Ссылка = &Организация
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Организации.Ссылка,
        |	ИСТИНА,
		|	Организации.ГоловнаяОрганизация
		|ИЗ
		|	Справочник.Организации КАК Организации
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаПоПерсоналуОрганизаций КАК УчетнаяПолитикаПоПерсоналуОрганизаций
		|		ПО (УчетнаяПолитикаПоПерсоналуОрганизаций.Организация = Организации.Ссылка)
		|			И (Организации.ГоловнаяОрганизация = &Организация)
		|			И (НЕ Организации.Ссылка = &Организация)
		|			И (УчетнаяПолитикаПоПерсоналуОрганизаций.ВестиУчетПоГоловнойОрганизации)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	РаботникиОрганизацийСрезПоследних.Должность КАК Должность,
		|	ВЫБОР
		|		КОГДА ОрганизацииВестиУчетПоГоловнойОрганизации.Ссылка ЕСТЬ NULL
		|			ТОГДА РаботникиОрганизацийСрезПоследних.ОбособленноеПодразделение
		|		ИНАЧЕ ОрганизацииВестиУчетПоГоловнойОрганизации.ГоловнаяОрганизация
		|	КОНЕЦ КАК Организация
		|ПОМЕСТИТЬ ВТ_Должности
		|ИЗ
		|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(&ПериодАктуальности, ) КАК РаботникиОрганизацийСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОрганизации КАК ОрганизацииВестиУчетПоГоловнойОрганизации
		|		ПО РаботникиОрганизацийСрезПоследних.ОбособленноеПодразделение = ОрганизацииВестиУчетПоГоловнойОрганизации.Ссылка 
		|			И ОрганизацииВестиУчетПоГоловнойОрганизации.ВестиУчетПоГоловнойОрганизации
		|ГДЕ
		|	РаботникиОрганизацийСрезПоследних.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
		|	И (РаботникиОрганизацийСрезПоследних.ОбособленноеПодразделение В (ВЫБРАТЬ
		|				Организации.Ссылка
		|			ИЗ
		|				ВТОрганизации КАК Организации))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ЕСТЬNULL(СопоставлениеДолжностейЭТД.ДолжностьОрганизации, ВТ_Должности.Должность) КАК ДолжностьОрганизации,
		|	ЕСТЬNULL(СопоставлениеДолжностейЭТД.КодДолжностиЭТД, """") КАК КодДолжностиЭТД,
		|	ЕСТЬNULL(СопоставлениеДолжностейЭТД.НаименованиеЭТД, """") КАК НаименованиеЭТД,
		|	МИНИМУМ(ЕСТЬNULL(СопоставлениеДолжностейЭТД.Период, ЕСТЬNULL(РаботникиОрганизацийСрезПервых.Период, ДАТАВРЕМЯ(1900, 1, 1)))) КАК Период,
		|	ЕСТЬNULL(СопоставлениеДолжностейЭТД.Организация, ВТ_Должности.Организация) КАК Организация
		|ИЗ
		|	ВТ_Должности КАК ВТ_Должности
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СопоставлениеДолжностейЭТД.СрезПоследних(&ПериодАктуальности, Организация = &Организация) КАК СопоставлениеДолжностейЭТД
		|		ПО ВТ_Должности.Должность = СопоставлениеДолжностейЭТД.ДолжностьОрганизации
		|			И ВТ_Должности.Организация = СопоставлениеДолжностейЭТД.Организация
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПервых(, ) КАК РаботникиОрганизацийСрезПервых
		|		ПО ВТ_Должности.Должность = РаботникиОрганизацийСрезПервых.Должность
		|			И (РаботникиОрганизацийСрезПервых.ОбособленноеПодразделение В (ВЫБРАТЬ
		|						Организации.Ссылка
		|					ИЗ
		|						ВТОрганизации КАК Организации))
		|
		|СГРУППИРОВАТЬ ПО
		|	ЕСТЬNULL(СопоставлениеДолжностейЭТД.ДолжностьОрганизации, ВТ_Должности.Должность),
		|	ЕСТЬNULL(СопоставлениеДолжностейЭТД.Организация, ВТ_Должности.Организация),
		|	ЕСТЬNULL(СопоставлениеДолжностейЭТД.КодДолжностиЭТД, """"),
		|	ЕСТЬNULL(СопоставлениеДолжностейЭТД.НаименованиеЭТД, """")";
	
КонецПроцедуры

Процедура СформироватьЗапросДоговорыУволенныхБК(Запрос)
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Организации.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВТОрганизации
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	Организации.Ссылка = &Организация
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Организации.Ссылка
		|ИЗ
		|	Справочник.Организации КАК Организации
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаПоПерсоналуОрганизаций КАК УчетнаяПолитикаПоПерсоналуОрганизаций
		|		ПО (УчетнаяПолитикаПоПерсоналуОрганизаций.Организация = Организации.Ссылка)
		|			И (Организации.ГоловнаяОрганизация = &Организация)
		|			И (НЕ Организации.Ссылка = &Организация)
		|			И (УчетнаяПолитикаПоПерсоналуОрганизаций.ВестиУчетПоГоловнойОрганизации)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РаботникиОрганизацийСрезПоследних.Сотрудник КАК Сотрудник,
		|	РаботникиОрганизацийСрезПоследних.Должность КАК Должность,
		|	СотрудникиОрганизаций.Физлицо КАК Физлицо,
		|	РаботникиОрганизацийСрезПоследних.Период КАК ДатаРасторжения,
		|	РаботникиОрганизацийСрезПоследних.СтатьяЗаконаОТрудеРК КАК ПричинаРасторжения
		|ПОМЕСТИТЬ ВТ_УволенныеСотрудники
		|ИЗ
		|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(ДОБАВИТЬКДАТЕ(&Период, ДЕНЬ, 1), ) КАК РаботникиОрганизацийСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
		|		ПО РаботникиОрганизацийСрезПоследних.Сотрудник = СотрудникиОрганизаций.Ссылка
		|ГДЕ
		|	РаботникиОрганизацийСрезПоследних.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
		|	И РаботникиОрганизацийСрезПоследних.Организация В
		|			(ВЫБРАТЬ
		|				Организации.Ссылка
		|			ИЗ
		|				ВТОрганизации КАК Организации)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВТ_СотрудникиДолжность.Сотрудник КАК Сотрудник,
		|	ВТ_СотрудникиДолжность.ДатаРасторжения КАК ДатаРасторжения,
		|	ВТ_СотрудникиДолжность.ПричинаРасторжения КАК ПричинаРасторжения,
		|	ЕСТЬNULL(ЭТД.Ссылка, ЗНАЧЕНИЕ(Документ.ЭТД.ПустаяСсылка)) КАК ЭТДСсылка,
		|	ЕСТЬNULL(ЭТД.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыЭТД.ПустаяСсылка)) КАК Статус,
		|	ЕСТЬNULL(ЭТД.НомерДоговора, """") КАК НомерДоговора,
		|	ЕСТЬNULL(ЭТД.ДатаЗаключения, ДАТАВРЕМЯ(1,1,1)) КАК ДатаНачала,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ЭТД.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыЭТД.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.СтатусыЭТД.ПустаяСсылка)
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК Порядок
		|ИЗ
		|	ВТ_УволенныеСотрудники КАК ВТ_СотрудникиДолжность
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭТД КАК ЭТД
		|		ПО ВТ_СотрудникиДолжность.Сотрудник = ЭТД.Сотрудник
		|			И (НЕ ЭТД.ПометкаУдаления)
		|			И (НЕ ЭТД.ЭтоДополнительноеСоглашение)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
		|		ПО ВТ_СотрудникиДолжность.Сотрудник = СотрудникиОрганизаций.Ссылка
		|ГДЕ
		|	НЕ ЭТД.Ссылка ЕСТЬ NULL
		|	И ЭТД.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЭТД.Зарегистрирован)
		|
		|УПОРЯДОЧИТЬ ПО
		|	СотрудникиОрганизаций.Наименование";
	
КонецПроцедуры

Функция БИНОрганизацииБК(Организация)
	
	Результат = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Организация, "ИдентификационныйНомер");
	
	Возврат Результат;
	
КонецФункции

Функция ИИНРаботникаБК(ФизическоеЛицо)
	
	Результат = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ФизическоеЛицо, "ИдентификационныйКодЛичности");
	
	Возврат Результат;
	
КонецФункции

Функция ИдентификаторЭТДБК(Документ)
	
	Результат = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Документ, "Идентификатор");
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьСотрудникаПоИИНБК(ИИН, Организация)
	
	Сотрудник = Справочники.СотрудникиОрганизаций.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ЕСТЬNULL(Сотрудники.Ссылка, ЗНАЧЕНИЕ(Справочник.СотрудникиОрганизаций.ПустаяСсылка)) КАК Сотрудник
		|ИЗ
		|	Справочник.ФизическиеЛица КАК ФизическиеЛица
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СотрудникиОрганизаций КАК Сотрудники
		|		ПО ФизическиеЛица.Ссылка = Сотрудники.Физлицо
		|ГДЕ
		|	ФизическиеЛица.ИдентификационныйКодЛичности = &ИИН
		|	И Сотрудники.ТекущаяСтруктурнаяЕдиница = &Организация
		|
		|УПОРЯДОЧИТЬ ПО
		|	Сотрудник УБЫВ";
	
	Запрос.УстановитьПараметр("ИИН", ИИН);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Сотрудник = ВыборкаДетальныеЗаписи.Сотрудник;
	КонецЦикла;
	
	Возврат Сотрудник;
	
КонецФункции

Функция ПолучитьИИНПоСотрудникуБК(Сотрудник)
	
	ИИН = "";
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЕСТЬNULL(ФизическиеЛица.ИдентификационныйКодЛичности, """") КАК ИИН
		|ИЗ
		|	Справочник.СотрудникиОрганизаций КАК Сотрудники
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
		|		ПО Сотрудники.Физлицо = ФизическиеЛица.Ссылка
		|ГДЕ
		|	Сотрудники.Ссылка = &Сотрудник";
	
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ИИН = ВыборкаДетальныеЗаписи.ИИН;
	КонецЦикла;
	
	Возврат ИИН;
	
КонецФункции

Процедура ПолучитьДанныеДляАвтозаполненияБК(Организация, СтруктураДанныхДляАвтозаполнения)
	
	МестоРаботы = КонтактнаяИнформация.ПолучитьАдресИзКонтактнойИнформации(Организация, "Фактический");
	Если НЕ ЗначениеЗаполнено(МестоРаботы) Тогда
		МестоРаботы = КонтактнаяИнформация.ПолучитьАдресИзКонтактнойИнформации(Организация, "Юридический");
	КонецЕсли;
	
	ЮрФизЛицо = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Организация, "ЮрФизЛицо");
	Если ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
		АдресныеСведения = РегистрыСведений.АдресныйКлассификатор.ПолучитьАдресныеСведенияОрганизации(Организация, , "ЮрАдресОрганизации");
	Иначе
		АдресныеСведения = РегистрыСведений.АдресныйКлассификатор.ПолучитьАдресныеСведенияОрганизации(ОбщегоНазначения.ПолучитьЗначениеРеквизита(Организация, "ИндивидуальныйПредприниматель"), "ЮрАдресФизЛица");
	КонецЕсли;
	КодРегиона = СтрЗаменить(АдресныеСведения.КодКато, Символы.НПП, "");
	КодРегиона = Лев(КодРегиона, 9);
	
	ТипРаботодателя = "";
	Если ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
		ТипРаботодателя = "1";
	ИначеЕсли ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
		ТипРаботодателя = "2";
	КонецЕсли;
	
	СтруктураДанныхДляАвтозаполнения.КодРегиона = КодРегиона;
	СтруктураДанныхДляАвтозаполнения.КодРегионаРабочегоМеста = КодРегиона;
	СтруктураДанныхДляАвтозаполнения.МестоРаботы = МестоРаботы;
	СтруктураДанныхДляАвтозаполнения.ТипРаботодателя = ТипРаботодателя;
	
КонецПроцедуры

Процедура ЗаполнитьНаборыЗначенийДоступаБК(ДокументОбъект, Таблица, НомерНабора = 0)
	
	СтрокаТаб = Таблица.Добавить();
	СтрокаТаб.ЗначениеДоступа = ДокументОбъект["Организация"];
	СтрокаТаб.НомерНабора = НомерНабора;
	
КонецПроцедуры

Процедура СформироватьЗапросВосстановленныеДоговорыБК(Запрос)
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Организации.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВТОрганизации
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	Организации.Ссылка = &Организация
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Организации.Ссылка
		|ИЗ
		|	Справочник.Организации КАК Организации
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаПоПерсоналуОрганизаций КАК УчетнаяПолитикаПоПерсоналуОрганизаций
		|		ПО (УчетнаяПолитикаПоПерсоналуОрганизаций.Организация = Организации.Ссылка)
		|			И (Организации.ГоловнаяОрганизация = &Организация)
		|			И (НЕ Организации.Ссылка = &Организация)
		|			И (УчетнаяПолитикаПоПерсоналуОрганизаций.ВестиУчетПоГоловнойОрганизации)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РаботникиОрганизацийСрезПоследних.Сотрудник КАК Сотрудник,
		|	РаботникиОрганизацийСрезПоследних.Должность КАК Должность,
		|	СотрудникиОрганизаций.Физлицо КАК Физлицо,
		|	РаботникиОрганизацийСрезПоследних.Период КАК ДатаРасторжения,
		|	РаботникиОрганизацийСрезПоследних.СтатьяЗаконаОТрудеРК КАК ПричинаРасторжения
		|ПОМЕСТИТЬ ВТ_РаботающиеСотрудники
		|ИЗ
		|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(ДОБАВИТЬКДАТЕ(&Период, ДЕНЬ, 1), ) КАК РаботникиОрганизацийСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
		|		ПО РаботникиОрганизацийСрезПоследних.Сотрудник = СотрудникиОрганизаций.Ссылка
		|ГДЕ
		|	РаботникиОрганизацийСрезПоследних.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
		|	И РаботникиОрганизацийСрезПоследних.Организация В
		|			(ВЫБРАТЬ
		|				Организации.Ссылка
		|			ИЗ
		|				ВТОрганизации КАК Организации)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВТ_СотрудникиДолжность.Сотрудник КАК Сотрудник,
		|	ВТ_СотрудникиДолжность.ДатаРасторжения КАК ДатаРасторжения,
		|	ВТ_СотрудникиДолжность.ПричинаРасторжения КАК ПричинаРасторжения,
		|	ЕСТЬNULL(ЭТД.Ссылка, ЗНАЧЕНИЕ(Документ.ЭТД.ПустаяСсылка)) КАК ЭТДСсылка,
		|	ЕСТЬNULL(ЭТД.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыЭТД.ПустаяСсылка)) КАК Статус,
		|	ЕСТЬNULL(ЭТД.НомерДоговора, """") КАК НомерДоговора,
		|	ЕСТЬNULL(ЭТД.ДатаЗаключения, ДАТАВРЕМЯ(1,1,1)) КАК ДатаНачала,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ЭТД.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыЭТД.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.СтатусыЭТД.ПустаяСсылка)
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК Порядок
		|ИЗ
		|	ВТ_РаботающиеСотрудники КАК ВТ_СотрудникиДолжность
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭТД КАК ЭТД
		|		ПО ВТ_СотрудникиДолжность.Сотрудник = ЭТД.Сотрудник
		|			И (НЕ ЭТД.ПометкаУдаления)
		|			И (НЕ ЭТД.ЭтоДополнительноеСоглашение)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
		|		ПО ВТ_СотрудникиДолжность.Сотрудник = СотрудникиОрганизаций.Ссылка
		|ГДЕ
		|	НЕ ЭТД.Ссылка ЕСТЬ NULL
		|	И ЭТД.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЭТД.Расторгнут)
		|
		|УПОРЯДОЧИТЬ ПО
		|	СотрудникиОрганизаций.Наименование";
	
КонецПроцедуры

Функция ПолучитьПараметрыСотрудникаДляСоциальногоОтпускаБК(Сотрудник, Знач ДатаПолученияДанных)
	
	Если ДатаПолученияДанных = Неопределено Тогда
		ДатаПолученияДанных = ТекущаяДатаСеанса();
	КонецЕсли;
	
	ФИО = ОбщегоНазначенияБК.ФамилияИнициалыФизЛица(Сотрудник.ФизЛицо);
	НаименованиеПодразделения = "";
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПодразделенияОрганизаций.Наименование КАК Наименование
		|ИЗ
		|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(&Период, Сотрудник = &Сотрудник) КАК РаботникиОрганизацийСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
		|		ПО РаботникиОрганизацийСрезПоследних.ПодразделениеОрганизации = ПодразделенияОрганизаций.Ссылка";
	
	Запрос.УстановитьПараметр("Период", ДатаПолученияДанных);
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НаименованиеПодразделения = ВыборкаДетальныеЗаписи.Наименование;
	КонецЦикла;
	
	ПараметрыСотрудника = Новый Структура("ФИОРаботника,ПодразделениеНаРусскомЯзыке,ПодразделениеНаКазахскомЯзыке",
											ФИО,
											НаименованиеПодразделения,
											"");
	
	Возврат ПараметрыСотрудника;
	
КонецФункции

Функция ПолучитьКоличествоВыходныхДнейЗаПериодБК(Сотрудник, НачалоПериода, КонецПериода)
	
	ПроизводственныйКалендарь = Справочники.ПроизводственныеКалендари.ПустаяСсылка();
	ИспользуемыеКалендари = Справочники.ПроизводственныеКалендари.СписокПроизводственныхКалендарей();
	Если ИспользуемыеКалендари.Количество() = 1 Тогда
		ПроизводственныйКалендарь = ИспользуемыеКалендари[0];
	Иначе
		Для Каждого Календарь Из ИспользуемыеКалендари Цикл
			Если Календарь.Код = "РК" Тогда
				ПроизводственныйКалендарь = Календарь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ВидыДнейИсключаемыхИзРасчета = Новый Массив();
	ВидыДнейИсключаемыхИзРасчета.Добавить(Перечисления.ВидыДнейПроизводственногоКалендаря.Рабочий); 
	ВидыДнейИсключаемыхИзРасчета.Добавить(Перечисления.ВидыДнейПроизводственногоКалендаря.Предпраздничный);
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ПроизводственныйКалендарь", ПроизводственныйКалендарь);
	Запрос.УстановитьПараметр("ВидыДней", ВидыДнейИсключаемыхИзРасчета);
	Запрос.УстановитьПараметр("ДатаНачала", НачалоПериода);
	Запрос.УстановитьПараметр("ДатаОкончания", КонецПериода);
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(КалендарныеГрафики.Дата) КАК Дней
		|ИЗ
		|	РегистрСведений.ДанныеПроизводственногоКалендаря КАК КалендарныеГрафики
		|ГДЕ
		|	КалендарныеГрафики.ПроизводственныйКалендарь = &ПроизводственныйКалендарь
		|	И КалендарныеГрафики.ВидДня НЕ В(&ВидыДней)
		|	И КалендарныеГрафики.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания";
	
	Результат = Запрос.Выполнить().Выгрузить();
	Возврат Результат.ВыгрузитьКолонку("Дней")[0];
	
КонецФункции

Функция ПолучитьПризнакГражданстваРКБК(Сотрудник, ПериодДанных)
	
	Страна = Неопределено;
	
	Гражд = РегистрыСведений.ГражданствоФизЛиц.СрезПоследних(ПериодДанных, Новый Структура("ФизЛицо", Сотрудник.ФизЛицо));
	Если Гражд.Количество() > 0 Тогда
		Страна = Гражд[0].Страна;
	КонецЕсли;
	
	Если Страна = Справочники.КлассификаторСтранМира.Казахстан Тогда
		Возврат Истина;
	ИначеЕсли ТипЗнч(Страна) = Тип("СправочникСсылка.КлассификаторСтранМира") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция СотрудникПодходитДляПрофессиональнойВыплатыБК(Сотрудник, ПериодДанных)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ФизическиеЛица.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ФизическиеЛица КАК ФизическиеЛица
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОПенсионномОбеспеченииФизЛиц.СрезПоследних(&ПериодДанных, Физлицо = &Физлицо) КАК СведенияОПенсионномОбеспеченииФизЛицСрезПоследних
		|		ПО (СведенияОПенсионномОбеспеченииФизЛицСрезПоследних.ФизЛицо = ФизическиеЛица.Ссылка)
		|ГДЕ
		|	ФизическиеЛица.Ссылка = &Физлицо
		|	И РАЗНОСТЬДАТ(ФизическиеЛица.ДатаРождения, &ПериодДанных, МЕСЯЦ) >= 55 * 12
		|	И ЕСТЬNULL(СведенияОПенсионномОбеспеченииФизЛицСрезПоследних.Пенсионер, ЛОЖЬ) <> ИСТИНА";
	
	Запрос.УстановитьПараметр("ПериодДанных", ПериодДанных);
	Запрос.УстановитьПараметр("Физлицо", Сотрудник.Физлицо);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти
