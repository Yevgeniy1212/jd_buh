#Область ПрограммныйИнтерфейс

#Область ПроцедурыИФункцииДляРаботыСоСтруктурнымиПодразделениями

// Процедура вызывается при изменении значения реквизита формы "СтруктурноеПодразделениеОрганизация" и устанавливает значения реквизитов объекта
//
// Параметры
//  ВыбранноеЗначение - СправочникСсылка.Организации, СправочникСсылка.ПодразделенияОрганизаций - выбранное значение в поле "СтруктурноеПодразделениеОрганизация" формы
//  Организация - СправочникСсылка.Организации - значение реквизита "Организация" объекта
//  СтруктурноеПодразделение - СправочникСсылка.ПодразделенияОрганизаций - значение реквизита "СтруктурноеПодразделение" объекта
//  СтруктураПараметров - Структура - дополнительные параметры, передаваемые из формы, также в этот параметр возвращается структура изменений реквизитов
//
Процедура СтруктурноеПодразделениеПриИзменении(ВыбранноеЗначение, Организация, СтруктурноеПодразделение, СтруктураПараметров = Неопределено) Экспорт
	
	Если СтруктураПараметров = Неопределено Тогда 
		СтруктураПараметров = Новый Структура;
	КонецЕсли;
	
	Если ВыбранноеЗначение = Неопределено Тогда 
		СтруктураПараметров.Вставить("ИзмененаОрганизация", Ложь);
		СтруктураПараметров.Вставить("ИзмененоСтруктурноеПодразделение", Ложь);
	КонецЕсли;
	
	ИсходнаяОрганизация 	 		 = Организация;
	ИсходноеСтруктурноеПодразделение = СтруктурноеПодразделение;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Организации") Тогда 
		Организация = ВыбранноеЗначение;
		СтруктурноеПодразделение = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
	Иначе 
		Организация = ВыбранноеЗначение.Владелец;
		СтруктурноеПодразделение = ВыбранноеЗначение;
	КонецЕсли;
	
	СтруктураПараметров.Вставить("ИзмененаОрганизация", 			 ИсходнаяОрганизация <> Организация);
	СтруктураПараметров.Вставить("ИзмененоСтруктурноеПодразделение", ИсходноеСтруктурноеПодразделение <> СтруктурноеПодразделение);
	
КонецПроцедуры

// Процедура - При изменении значения организации
//
// Параметры:
//  ДанныеОбъекта							 - ДокументОбъект 
//  СтруктураПараметровДляПолученияДоговора	 - Структура 
//  СтруктураРезультатаВыполнения			 - Структура 
//
Процедура ПриИзмененииЗначенияОрганизации(ДанныеОбъекта, СтруктураПараметровДляПолученияДоговора = Неопределено, СтруктураРезультатаВыполнения = Неопределено) Экспорт
	
	РаботаСДиалогами.ПриИзмененииЗначенияОрганизации(ДанныеОбъекта,СтруктураПараметровДляПолученияДоговора , СтруктураРезультатаВыполнения);
	
КонецПроцедуры // ПриИзмененииЗначенияОрганизации()

// Заполняет реквизит "КраткийСоставДокумента" документа по его табличным частям.
//
// Параметры
//  ТЧДокумента					– табличная часть документа по которой происходит заполнение реквизита
//  ДополнительнаяТЧДокумента	- табличная часть документа, как правило это ТЧ с дополнительными начислениями
//
// Возвращаемое значение:
//   строка, значение реквизита "КраткийСоставДокумента".
//
Функция ЗаполнитьКраткийСоставДокумента(ТЧДокумента, ИмяРеквизита = "Сотрудник") Экспорт
	//++КУФИБ
	
	КраткийСоставДокумента = "";
	
	КоличествоТЧ = 1;
	КраткийСоставДокументаЗаполнен = Ложь;
	Для каждого ТабличнаяЧастьДокумента Из ТЧДокумента Цикл
		
		Если НЕ КраткийСоставДокументаЗаполнен Тогда
			
			Для каждого СтрокаТЧ Из ТабличнаяЧастьДокумента Цикл
				
				ФИОФизЛица = ОбщегоНазначенияБК.ФамилияИнициалыФизЛица(СтрокаТЧ[ИмяРеквизита]);
				Если Найти(КраткийСоставДокумента, ФИОФизЛица) = 0 Тогда
					
					Если СтрДлина(КраткийСоставДокумента) < 100 Тогда
						КраткийСоставДокумента = КраткийСоставДокумента + ", " + ФИОФизЛица;
					Иначе
						
						Если КоличествоТЧ = 1 Тогда
							КраткийСоставДокумента = Сред(КраткийСоставДокумента,3,95) + "...";
						Иначе
							
							Если Лев(КраткийСоставДокумента,2) = ", " Тогда
								КраткийСоставДокумента = Сред(КраткийСоставДокумента,3,95) + "...";
							Иначе
								КраткийСоставДокумента = Лев(КраткийСоставДокумента,97) + "...";
							КонецЕсли;
							
						КонецЕсли; 
						
						КраткийСоставДокументаЗаполнен = Истина;
						Прервать;
						
					КонецЕсли;
					
				КонецЕсли; 
				
			КонецЦикла;
			
			КоличествоТЧ = КоличествоТЧ + 1;
			
		КонецЕсли; 
		
		Если КраткийСоставДокументаЗаполнен Тогда
			Прервать
		КонецЕсли; 
		
	КонецЦикла; 
	
	Если Лев(КраткийСоставДокумента,2) = ", " Тогда
		ДлинаСтроки = СтрДлина(КраткийСоставДокумента);
		Если ДлинаСтроки < 100 Тогда
			КраткийСоставДокумента = Сред(КраткийСоставДокумента,3)
		Иначе
			КраткийСоставДокумента = Сред(КраткийСоставДокумента,3,95) + "...";
		КонецЕсли; 
		
	КонецЕсли;
	
	Возврат КраткийСоставДокумента;
	
	
	//--КУФИБ
	
КонецФункции

// Процедура - Заполнить шапку документа по основанию
//
// Параметры:
//  ДокументОбъект  - объект редактируемого документа,
//  ДокументОснование - объект документа основания
//
Процедура ЗаполнитьШапкуДокументаПоОснованию(Документ,Основание) Экспорт
	
	ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(Документ, Основание);
	
КонецПроцедуры

// Функция - Текст разделителя запросов пакета
// 
// Возвращаемое значение:
//   Строка 
//
Функция ТекстРазделителяЗапросовПакета() Экспорт
	
	ТекстРазделителя =
	"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат ТекстРазделителя;
	
КонецФункции

// Процедура - Заполнить шапку документа
//
// Параметры:
//  ДокументОбъект       - объект редактируемого документа,
//  СтандартнаяОбработка - Булево 
//
Процедура ЗаполнитьШапкуДокумента(ДокументОбъект, СтандартнаяОбработка) Экспорт
	
	ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ДокументОбъект, си_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("глТекущийПользователь"));
	
КонецПроцедуры

// Процедура - Заполнить таблицу номера ГТД
//
// Параметры:
//  Объект				 - ДокументОбъект 
//  Товары				 - табличная часть "Товары" документа
//  НомераГТД			 - табличная часть "НомераГТД" документа 
//  СпособЗаполнения	 - Неопределено 
//  ПоказыватьСообщения	 - Булево 
//
Процедура ЗаполнитьТаблицуНомераГТД(Объект, Товары, НомераГТД, СпособЗаполнения = Неопределено, ПоказыватьСообщения = Ложь) Экспорт
	НомераГТДСервер.ЗаполнитьТаблицуНомераГТД(Объект, Товары, НомераГТД, СпособЗаполнения, ПоказыватьСообщения);	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииПолученияСчетовУчетаПоУмолчанию 

// Функция возвращает счета учета номенклатуры по выбранной организации.
//
// Параметры:
//  Организация  - организация, по которой определяются счета учета
//  Склад        - место хранения, по которому определяются счета учета
//  Номенклатура - номенклатура, по которой определяются счета учета
//  Дата         - дата, на которую определяются счета учета
//  ОсобыйПорядокНалогообложения - признак того, что необходимо получить счета для особого порядка налогообложения (Патент, ЕНВД)
//
// Возвращает соответствие:
//  Ключ     - номенклатура
//  Значение - структура счетов учета номенклатуры
//
Функция ПолучитьСчетаУчетаСпискаНоменклатуры(Организация, СписокНоменклатуры, Знач Дата = Неопределено) Экспорт
	
	Результат	= Новый Соответствие;
	Если СписокНоменклатуры.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	ПустойСчет = ПланыСчетов.Типовой.ПустаяСсылка();
	
	Для Каждого Номенклатура Из СписокНоменклатуры Цикл
		Если Номенклатура = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		СтруктураВозврата = Новый Структура("
		|СчетУчетаБУ, 						СчетУчетаДавСырья,         			СчетПередачиБУ,
		|СчетПередачиЗаб,					СчетУчетаНДСПоПриобретению, 		СчетУчетаНДСПоРеализации,
		|СчетУчетаНДСУплаченногоНаТаможне,	СчетУчетаАкцизаПоРеализации, 
		|СчетДоходовОтРеализацииБУ,			СчетДоходовПриВозвратеБУ,			СчетСебестоимостиПриРеализацииБУ,
		|СчетУчетаНУ, 						СчетПередачиНУ,						СчетДоходовОтРеализацииНУ,	
		|СчетДоходовПриВозвратеНУ,			СчетСебестоимостиПриРеализацииНУ,
		|СубконтоДоходовБУ1, 				СубконтоДоходовБУ2, 				СубконтоДоходовБУ3,
		|СубконтоДоходовПриВозвратеБУ1, 	СубконтоДоходовПриВозвратеБУ2, 		СубконтоДоходовПриВозвратеБУ3,
		|СубконтоДоходовНУ1, 				СубконтоДоходовНУ2, 				СубконтоДоходовНУ3,	
		|СубконтоДоходовПриВозвратеНУ1, 	СубконтоДоходовПриВозвратеНУ2, 		СубконтоДоходовПриВозвратеНУ3,
		|СубконтоДоходовПриВозвратеБУ1, 	СубконтоДоходовПриВозвратеБУ2, 		СубконтоДоходовПриВозвратеБУ3,
		|СубконтоСебестоимостиБУ1, 			СубконтоСебестоимостиБУ2, 			СубконтоСебестоимостиБУ3,
		|СубконтоСебестоимостиНУ1, 			СубконтоСебестоимостиНУ2, 			СубконтоСебестоимостиНУ3,
		|СчетПоложительныхОтклоненийБУ,		СчетОтрицательныхОтклоненийБУ,
		|СубконтоПоложительныхОтклоненийБУ1,СубконтоПоложительныхОтклоненийБУ2,	СубконтоПоложительныхОтклоненийБУ3,
		|СубконтоОтрицательныхОтклоненийБУ1,СубконтоОтрицательныхОтклоненийБУ2,	СубконтоОтрицательныхОтклоненийБУ3,
		|СчетПоложительныхОтклоненийНУ,		СчетОтрицательныхОтклоненийНУ,
		|СубконтоПоложительныхОтклоненийНУ1,СубконтоПоложительныхОтклоненийНУ2,	СубконтоПоложительныхОтклоненийНУ3,
		|СубконтоОтрицательныхОтклоненийНУ1,СубконтоОтрицательныхОтклоненийНУ2,	СубконтоОтрицательныхОтклоненийНУ3");
		
		Результат.Вставить(Номенклатура, СтруктураВозврата);
	КонецЦикла;
	
	МассивОрганизаций = Новый Массив();
	МассивОрганизаций.Добавить(Справочники.Организации.ПустаяСсылка());
	МассивОрганизаций.Добавить(Организация);
	
	СоответствиеЭлементовИГрупп = ПолучитьСписокВышеСтоящихГруппЭлементов(СписокНоменклатуры);
	
	ТаблицаИерархии = Новый ТаблицаЗначений;
	ТаблицаИерархии.Колонки.Добавить("Элемент",		Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаИерархии.Колонки.Добавить("Родитель",	Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаИерархии.Колонки.Добавить("Уровень",		ПолучитьОписаниеТиповЧисла(10, 0));
	
	Для каждого Номенклатура Из СписокНоменклатуры Цикл
		
		НоваяСтрока = ТаблицаИерархии.Добавить();
		НоваяСтрока.Элемент		= Номенклатура;
		НоваяСтрока.Родитель	= Номенклатура;
		
		СписокГрупп = СоответствиеЭлементовИГрупп.Получить(Номенклатура);
		Если СписокГрупп = Неопределено Тогда
			НоваяСтрока.Уровень = 1;
			Продолжить;
		КонецЕсли;
		
		КоличествоВышеСтоящихГрупп = СписокГрупп.Количество();
		
		НоваяСтрока.Уровень = КоличествоВышеСтоящихГрупп + 1;
		
		Для Индекс = 1 По КоличествоВышеСтоящихГрупп Цикл
			НоваяСтрока = ТаблицаИерархии.Добавить();
			НоваяСтрока.Элемент	= Номенклатура;
			НоваяСтрока.Родитель= СписокГрупп[Индекс - 1];
			НоваяСтрока.Уровень	= КоличествоВышеСтоящихГрупп - Индекс + 1;
		КонецЦикла;
		
	КонецЦикла;
	
	НоваяСтрока = ТаблицаИерархии.Добавить();	// Корень
	
	МассивНоменклатуры = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаИерархии, "Родитель", Истина);
	
	Дата = ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДатаСеанса());
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ТаблицаИерархии",	ТаблицаИерархии);
	Запрос.УстановитьПараметр("МассивОрганизаций",	МассивОрганизаций);
	Запрос.УстановитьПараметр("МассивНоменклатуры",	УдалитьПовторяющиесяЭлементыМассива(МассивНоменклатуры));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаИерархии.Элемент КАК Элемент,
	|	ТаблицаИерархии.Родитель КАК Родитель,
	|	ТаблицаИерархии.Уровень КАК Уровень
	|ПОМЕСТИТЬ ВТТаблицаИерархии
	|ИЗ
	|	&ТаблицаИерархии КАК ТаблицаИерархии
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Родитель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ  РАЗРЕШЕННЫЕ
	|	ТаблицаИерархии.Элемент КАК Номенклатура,
	|	ТаблицаИерархии.Родитель КАК Родитель,
	|	ТаблицаИерархии.Уровень КАК Уровень,
	|	СчетаУчетаНоменклатуры.СчетУчетаБУ,
	|	СчетаУчетаНоменклатуры.СчетУчетаЗабалансовый КАК СчетУчетаДавСырья,
	|	СчетаУчетаНоменклатуры.СчетУчетаПередачиБУ КАК СчетПередачиБУ,
	|	СчетаУчетаНоменклатуры.СчетУчетаПередачиЗабалансовый КАК СчетПередачиЗаб,
	|	СчетаУчетаНоменклатуры.СчетУчетаНДСПоПриобретению,
	|	СчетаУчетаНоменклатуры.СчетУчетаНДСПоРеализации,
	|	СчетаУчетаНоменклатуры.СчетУчетаНДСУплаченногоНаТаможне,
	|	СчетаУчетаНоменклатуры.СчетУчетаАкцизаПоРеализации,
	|	СчетаУчетаНоменклатуры.СчетДоходовОтРеализацииБУ,
	|	СчетаУчетаНоменклатуры.СчетСебестоимостиПриРеализацииБУ,
	|	СчетаУчетаНоменклатуры.СчетУчетаНУ,
	|	СчетаУчетаНоменклатуры.СчетДоходовОтРеализацииНУ,
	|	СчетаУчетаНоменклатуры.СчетСебестоимостиПриРеализацииНУ,
	|	СчетаУчетаНоменклатуры.СчетУчетаПередачиНУ КАК СчетПередачиНУ,
	|	СчетаУчетаНоменклатуры.СубконтоДоходовОтРеализацииБУ1 КАК СубконтоДоходовБУ1,
	|	СчетаУчетаНоменклатуры.СубконтоДоходовОтРеализацииБУ2 КАК СубконтоДоходовБУ2,
	|	СчетаУчетаНоменклатуры.СубконтоДоходовОтРеализацииБУ3 КАК СубконтоДоходовБУ3,
	|	СчетаУчетаНоменклатуры.СубконтоДоходовОтРеализацииНУ1 КАК СубконтоДоходовНУ1,
	|	СчетаУчетаНоменклатуры.СубконтоДоходовОтРеализацииНУ2 КАК СубконтоДоходовНУ2,
	|	СчетаУчетаНоменклатуры.СубконтоДоходовОтРеализацииНУ3 КАК СубконтоДоходовНУ3,
	|	СчетаУчетаНоменклатуры.СубконтоСебестоимостиПриРеализацииБУ1 КАК СубконтоСебестоимостиБУ1,
	|	СчетаУчетаНоменклатуры.СубконтоСебестоимостиПриРеализацииБУ2 КАК СубконтоСебестоимостиБУ2,
	|	СчетаУчетаНоменклатуры.СубконтоСебестоимостиПриРеализацииБУ3 КАК СубконтоСебестоимостиБУ3,
	|	СчетаУчетаНоменклатуры.СубконтоСебестоимостиПриРеализацииНУ1 КАК СубконтоСебестоимостиНУ1,
	|	СчетаУчетаНоменклатуры.СубконтоСебестоимостиПриРеализацииНУ2 КАК СубконтоСебестоимостиНУ2,
	|	СчетаУчетаНоменклатуры.СубконтоСебестоимостиПриРеализацииНУ3 КАК СубконтоСебестоимостиНУ3,
	|	СчетаУчетаНоменклатуры.Организация,
	|	СчетаУчетаНоменклатуры.Номенклатура,
	|	СчетаУчетаНоменклатуры.Номенклатура.ЭтоГруппа,
	|	СчетаУчетаНоменклатуры.СчетДоходовПриВозвратеБУ,
	|	СчетаУчетаНоменклатуры.СчетДоходовПриВозвратеНУ,
	|	СчетаУчетаНоменклатуры.СубконтоДоходовПриВозвратеБУ1 КАК СубконтоДоходовПриВозвратеБУ1,
	|	СчетаУчетаНоменклатуры.СубконтоДоходовПриВозвратеБУ2 КАК СубконтоДоходовПриВозвратеБУ2,
	|	СчетаУчетаНоменклатуры.СубконтоДоходовПриВозвратеБУ3 КАК СубконтоДоходовПриВозвратеБУ3,
	|	СчетаУчетаНоменклатуры.СубконтоДоходовПриВозвратеНУ1 КАК СубконтоДоходовПриВозвратеНУ1,
	|	СчетаУчетаНоменклатуры.СубконтоДоходовПриВозвратеНУ2 КАК СубконтоДоходовПриВозвратеНУ2,
	|	СчетаУчетаНоменклатуры.СубконтоДоходовПриВозвратеНУ3 КАК СубконтоДоходовПриВозвратеНУ3,
	|	СчетаУчетаНоменклатуры.СчетПоложительныхОтклоненийПриПередачеСтруктурнымПодразделениямБУ КАК СчетПоложительныхОтклоненийБУ,
	|	СчетаУчетаНоменклатуры.СубконтоПоложительныхОтклоненийПриПередачеСтруктурнымПодразделениямБУ1 КАК СубконтоПоложительныхОтклоненийБУ1,
	|	СчетаУчетаНоменклатуры.СубконтоПоложительныхОтклоненийПриПередачеСтруктурнымПодразделениямБУ2 КАК СубконтоПоложительныхОтклоненийБУ2,
	|	СчетаУчетаНоменклатуры.СубконтоПоложительныхОтклоненийПриПередачеСтруктурнымПодразделениямБУ3 КАК СубконтоПоложительныхОтклоненийБУ3,
	|	СчетаУчетаНоменклатуры.СчетОтрицательныхОтклоненийПриПередачеСтруктурнымПодразделениямБУ КАК СчетОтрицательныхОтклоненийБУ,
	|	СчетаУчетаНоменклатуры.СубконтоОтрицательныхОтклоненийПриПередачеСтруктурнымПодразделениямБУ1 КАК СубконтоОтрицательныхОтклоненийБУ1,
	|	СчетаУчетаНоменклатуры.СубконтоОтрицательныхОтклоненийПриПередачеСтруктурнымПодразделениямБУ2 КАК СубконтоОтрицательныхОтклоненийБУ2,
	|	СчетаУчетаНоменклатуры.СубконтоОтрицательныхОтклоненийПриПередачеСтруктурнымПодразделениямБУ3 КАК СубконтоОтрицательныхОтклоненийБУ3,
	|	СчетаУчетаНоменклатуры.СчетПоложительныхОтклоненийПриПередачеСтруктурнымПодразделениямНУ КАК СчетПоложительныхОтклоненийНУ,
	|	СчетаУчетаНоменклатуры.СубконтоПоложительныхОтклоненийПриПередачеСтруктурнымПодразделениямНУ1 КАК СубконтоПоложительныхОтклоненийНУ1,
	|	СчетаУчетаНоменклатуры.СубконтоПоложительныхОтклоненийПриПередачеСтруктурнымПодразделениямНУ2 КАК СубконтоПоложительныхОтклоненийНУ2,
	|	СчетаУчетаНоменклатуры.СубконтоПоложительныхОтклоненийПриПередачеСтруктурнымПодразделениямНУ3 КАК СубконтоПоложительныхОтклоненийНУ3,
	|	СчетаУчетаНоменклатуры.СчетОтрицательныхОтклоненийПриПередачеСтруктурнымПодразделениямНУ КАК СчетОтрицательныхОтклоненийНУ,
	|	СчетаУчетаНоменклатуры.СубконтоОтрицательныхОтклоненийПриПередачеСтруктурнымПодразделениямНУ1 КАК СубконтоОтрицательныхОтклоненийНУ1,
	|	СчетаУчетаНоменклатуры.СубконтоОтрицательныхОтклоненийПриПередачеСтруктурнымПодразделениямНУ2 КАК СубконтоОтрицательныхОтклоненийНУ2,
	|	СчетаУчетаНоменклатуры.СубконтоОтрицательныхОтклоненийПриПередачеСтруктурнымПодразделениямНУ3 КАК СубконтоОтрицательныхОтклоненийНУ3
	|ИЗ
	|	ВТТаблицаИерархии КАК ТаблицаИерархии
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаУчетаНоменклатуры КАК СчетаУчетаНоменклатуры
	|		ПО ТаблицаИерархии.Родитель = СчетаУчетаНоменклатуры.Номенклатура
	|ГДЕ
	|	СчетаУчетаНоменклатуры.Организация В(&МассивОрганизаций)
	|	И СчетаУчетаНоменклатуры.Номенклатура В(&МассивНоменклатуры)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Уровень УБЫВ,
	|	Организация УБЫВ";
	
	ТаблицаСчетовУчета = Запрос.Выполнить().Выгрузить();
	ТаблицаСчетовУчета.Индексы.Добавить("Номенклатура");
	
	ОтборСчетовУчета = Новый Структура("Номенклатура");
	
	ПустаяНоменклатура = Справочники.Номенклатура.ПустаяСсылка();
	
	Для Каждого Номенклатура Из СписокНоменклатуры Цикл
		
		СтруктураВозврата = Результат.Получить(Номенклатура);
		
		ОтборСчетовУчета.Номенклатура = Номенклатура;
		
		НайденныеСтроки = ТаблицаСчетовУчета.НайтиСтроки(ОтборСчетовУчета);
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			ЗаполнитьЗначенияСвойств(СтруктураВозврата, НайденныеСтроки[0]);
		Иначе
			
			ОтборСчетовУчета.Номенклатура = ПустаяНоменклатура;
			
			НайденныеСтроки = ТаблицаСчетовУчета.НайтиСтроки(ОтборСчетовУчета);
			Если НайденныеСтроки.Количество() > 0 Тогда
				ЗаполнитьЗначенияСвойств(СтруктураВозврата, НайденныеСтроки[0]);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Служебная функция, предназначенная для получения описания типов числа, заданной разрядности.
// 
// Параметры:
//  Разрядность 			- число, разряд числа.
//  РазрядностьДробнойЧасти - число, разряд дробной части.
//
// Возвращаемое значение:
//  Объект "ОписаниеТипов" для числа указанной разрядности.
//
Функция ПолучитьОписаниеТиповЧисла(Разрядность,РазрядностьДробнойЧасти=0) Экспорт
	
	Массив = Новый Массив;
	
	Массив.Добавить(Тип("Число"));
	КвалификаторЧисла = Новый КвалификаторыЧисла(Разрядность,РазрядностьДробнойЧасти);
	
	Возврат Новый ОписаниеТипов(Массив, КвалификаторЧисла);
	
КонецФункции // ПолучитьОписаниеТиповЧисла() 

// Удаляет повторяющиеся элементы массива.
//
// Параметры:
//  Массив						 - Массив 
//  НеИспользоватьНеопределено	 - Булево 
// 
// Возвращаемое значение:
//   Массив без повторяющихся элементов 
//
Функция УдалитьПовторяющиесяЭлементыМассива(Массив, НеИспользоватьНеопределено = Ложь) Экспорт
	
	ОписаниеТиповСправочники  = Справочники.ТипВсеСсылки();
	ОписаниеТиповДокументы    = Документы.ТипВсеСсылки();
	ОписаниеТиповПВХ          = ПланыВидовХарактеристик.ТипВсеСсылки();
	ОписаниеТиповПланыСчетов  = ПланыСчетов.ТипВсеСсылки();
	ОписаниеТиповПланыРасчета = ПланыВидовРасчета.ТипВсеСсылки();
	
	Если ТипЗнч(Массив) = Тип("Массив") Тогда
		
		УжеВМассиве = Новый Соответствие;
		БылоНеопределено = Ложь;
		
		КолвоЭлементовВМассиве = Массив.Количество();
		
		Для ОбратныйИндекс = 1 По КолвоЭлементовВМассиве Цикл
			ЭлементМассива = Массив[КолвоЭлементовВМассиве - ОбратныйИндекс];
			ТипЭлемента = ТипЗнч(ЭлементМассива);
			Если ЭлементМассива = Неопределено Тогда
				Если БылоНеопределено или НеИспользоватьНеопределено Тогда
					Массив.Удалить(КолвоЭлементовВМассиве - ОбратныйИндекс);
				Иначе
					БылоНеопределено = Истина;
				КонецЕсли;
				Продолжить;
			ИначеЕсли ОписаниеТиповСправочники.СодержитТип(ТипЭлемента)
				ИЛИ ОписаниеТиповДокументы.СодержитТип(ТипЭлемента)
				ИЛИ ОписаниеТиповПВХ.СодержитТип(ТипЭлемента)
				ИЛИ ОписаниеТиповПланыСчетов.СодержитТип(ТипЭлемента)
				ИЛИ ОписаниеТиповПланыРасчета.СодержитТип(ТипЭлемента) Тогда
				
				ИДЭлемента = Строка(ЭлементМассива.УникальныйИдентификатор());
				
			Иначе
				
				ИДЭлемента = ЭлементМассива;
				
			КонецЕсли;
			
			Если УжеВМассиве[ИДЭлемента] = Истина Тогда
				Массив.Удалить(КолвоЭлементовВМассиве - ОбратныйИндекс);
			Иначе
				УжеВМассиве[ИДЭлемента] = Истина;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Массив;
	
КонецФункции

// В качестве параметра КонтрагентОрганизация может выступать
//  Ссылка на элемент справочника Контрагенты, ссылка на элемент справочника Организация либо Структура (подготовленная с помошью функции ОписаниеОрганизации)
//
// Параметры:
//  КонтрагентОрганизация	 - контрагент 
//  Дата					 - Дата 
//  ВыводитьОписание		 - Булево 
//  ПредставлениеРНН_БИН	 - Строка 
//  КодЯзыка				 - Строка 
//  ВыводитьРННиБИН			 - Булево 
//  ВыводитьБИНИИНВместе	 - Булево 
// 
// Возвращаемое значение:
//   Строка 
//
Функция ПолучитьРегистрационныйНомерОрганизацииКонтрагентаВПечатнуюФорму(КонтрагентОрганизация, Дата, ВыводитьОписание = Истина, ПредставлениеРНН_БИН = "", КодЯзыка = "ru", ВыводитьРННиБИН = Ложь, ВыводитьБИНИИНВместе = Ложь) Экспорт
	Возврат ОбщегоНазначенияБК.ПолучитьРегистрационныйНомерОрганизацииКонтрагентаВПечатнуюФорму(КонтрагентОрганизация, Дата, ВыводитьОписание, ПредставлениеРНН_БИН, КодЯзыка, ВыводитьРННиБИН, ВыводитьБИНИИНВместе);	
КонецФункции

// Формирует структуру, содержащую значения реквизитов шапки документа.
//
// Параметры: 
//  ДокументОбъект - объект документа для формирования структуры шапки, 
//
// Возвращаемое значение:
//  Сформированная структура.
//
Функция СформироватьСтруктуруШапкиДокумента(ДокументОбъект) Экспорт
	
	Возврат ОбщегоНазначенияБК.СформироватьСтруктуруШапкиДокумента(ДокументОбъект);
	
КонецФункции // СформироватьСтруктуруШапкиДокумента()

// Позволяет определить есть ли среди реквизитов шапки документа
// реквизит с переданным именем.
//
// Параметры: 
//  ИмяРеквизита - строковое имя искомого реквизита, 
//  МетаданныеДокумента - объект описания метаданных документа, среди реквизитов которого производится поиск.
//
// Возвращаемое значение:
//  Булево: Истина - нашли реквизит с таким именем, Ложь - не нашли.
//
Функция ЕстьРеквизитДокумента(ИмяРеквизита, МетаданныеДокумента) Экспорт
	
	Возврат ОбщегоНазначенияБК.ЕстьРеквизитДокумента(ИмяРеквизита,МетаданныеДокумента);
	
КонецФункции // ЕстьРеквизитДокумента()

// Функция формирует представление суммы прописью в указанной валюте
//
// Параметры:
//  Сумма	 - Число 
//  Валюта	 - СправочникСсылка.Валюты
// 
// Возвращаемое значение:
//  Строка - сумма прописью
//
Функция СформироватьСуммуПрописью(Сумма, Валюта) Экспорт
	
	Возврат ОбщегоНазначенияБКВызовСервера.СформироватьСуммуПрописью(Сумма, Валюта);
	
КонецФункции // СформироватьСуммуПрописью()

// Процедура - При изменении значения даты документа
//
// Параметры:
//  ДанныеОбъекта                 - объект редактируемого документа
//  ВалютаРегламентированногоУчета - валюта регламентированного учета
//  ФлагИзмененияКурса             - валюта регламентированного учета
//  ФлагИзмененияУчетаНДС			 - Булево 
//  СтруктураРезультатаВыполнения	 - Неопределено
//  ПроверкаПоВалютеДокумента		 - Ложь
//
Процедура ПриИзмененииЗначенияДатыДокумента(ДанныеОбъекта, ВалютаРегламентированногоУчета, ФлагИзмененияКурса = Неопределено, ФлагИзмененияУчетаНДС = Истина, СтруктураРезультатаВыполнения = Неопределено, ПроверкаПоВалютеДокумента = Ложь) Экспорт
	#Если Клиент Тогда
		РаботаСДиалогами.ПриИзмененииЗначенияДатыДокумента(ДанныеОбъекта.Ссылка,ВалютаРегламентированногоУчета,ФлагИзмененияКурса,,ФлагИзмененияУчетаНДС);
	#КонецЕсли
КонецПроцедуры

// Формирует и устанавливает текст заголовка формы документа
//
// Параметры:
//  СтрокаВидаОперации - строка вида операции документа, 
//  ДокументОбъект     - объект документа, 
//  ФормаДокумента     - форма документа.
//
Процедура УстановитьЗаголовокФормыДокумента(СтрокаВидаОперации = "", ДокументОбъект, ФормаДокумента) Экспорт
	
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(СтрокаВидаОперации , ДокументОбъект, ФормаДокумента);	
КонецПроцедуры

// Возвращает головную организацию для заданной организации
// Если для организации реквизит ГоловнаяОрганизация не заполнен 
// это значит, что сама организация является голвной
//
// Параметры
//  Организация – СправочникСсылка.Организации
//
// Возвращаемое значение:
//   СправочникСсылка.Организации
//
Функция ГоловнаяОрганизация(Организация) Экспорт
		
	Возврат ОбщегоНазначенияБК.ГоловнаяОрганизация(Организация);	
КонецФункции

// Функция формирует фамилию и инициалы либо по наименованию элемента спр-ка ФизическиеЛица
//  либо по переданным строкам.
//  Если передан Объект, то извлеченная из него строка считается совокупностью 
//  Фамилия + Имя + Отчество, разделенными пробелами.
//
// Параметры
//  Объект		- строка или ссылка или объект элемента спр-ка ФизическиеЛица.
//  Фамилия		- фамилия физ. лица.
//  Имя			- имя физ. лица.
//  Отчество	- отчество физ. лица.
//
// Возвращаемое значение 
//  Фамилия и Инициалы одной строкой. Побочные эффекты - переданная целая строка 
//  Побочные эффекты - переданная целая строка разбивается на подстроки, соответствующие
//  отдельным Фамилии,Имени и Отчеству
//
Функция ФамилияИнициалыФизЛица(Объект = "", Фамилия = " ", Имя = " ", Отчество = " ") Экспорт
	
	Возврат ОбщегоНазначенияБК. ФамилияИнициалыФизЛица(Объект, Фамилия, Имя, Отчество);	
КонецФункции

// Функция преобразует ФИО из именительного падежа в дательный
// Параметры: 
//  СтруктураФИО - тип,Структура, ключи которой должны быть:
//		Фамилия  - значение должна соответствовать фамилии,
//		Имя      - значение должна соответствовать имени,
//		Отчество - значение должна соответствовать отчеству,
//  НеСклонятьФамилию - признак, типа Булево, по котрому опредеяем нужно склонять фамилию или нет
// Возвращаемое значение:
//	ФИО1 - Полное имя в формате "Фамилия Имя Отчество" в дательном падеже
// 
Функция ПреобразоватьФИОВДательныйПадеж(СтруктураФИО, НеСклонятьФамилию = Ложь, Пол = Неопределено) Экспорт 
	
	Возврат ОбщегоНазначенияБККлиентСервер. ПреобразоватьФИОВДательныйПадеж(СтруктураФИО, НеСклонятьФамилию , Пол);	
КонецФункции

// Функция преобразует ФИО из именительного падежа в родительный
// Параметры: 
//  СтруктураФИО - тип,Структура, ключи которой должны быть:
//		Фамилия  - значение должна соответствовать фамилии,
//		Имя      - значение должна соответствовать имени,
//		Отчество - значение должна соответствовать отчеству,
// Возвращаемое значение:  
//	ФИО1 - Полное имя в формате "Фамилия Имя Отчество" в родительном падеже
//
Функция ПреобразоватьФИОВРодительныйПадеж(СтруктураФИО, НеСклонятьФамилию = Ложь) Экспорт 
	
	Возврат ОбщегоНазначенияБККлиентСервер.ПреобразоватьФИОВРодительныйПадеж(СтруктураФИО, НеСклонятьФамилию);	
КонецФункции

// Функция определяет реквизиты организации или структурного подразделения
//
// Параметры:
//  Организация				 - 	СправочникСсылка.Организации 
//  СтруктурноеПодразделение - 	СправочникСсылка.ПодразделенияОрганизаций 
//  КадровыйДокумент		 - 	Булево 
// 
// Возвращаемое значение:
//   СправочникСсылка.Организации или СправочникСсылка.ПодразделенияОрганизаций
//
Функция ПолучитьСтруктурнуюЕдиницу(Организация, СтруктурноеПодразделение, КадровыйДокумент = Ложь) Экспорт
	
	Возврат ОбщегоНазначенияБК. ПолучитьСтруктурнуюЕдиницу(Организация, СтруктурноеПодразделение, КадровыйДокумент );	
КонецФункции

// Стандартная для данной конфигурации функция форматирования сумм
//
// Параметры: 
//  Сумма  - число, которое мы хотим форматировать, 
//  Валюта - ссылка на элемент справочника валют, если задан, то к в результирующую строку
//           будет добавлено представление валюты
//  ЧН     - строка, представляющая нулевое значение числа,
//  ЧРГ    - символ-разделитель групп целой части числа.
//
// Возвращаемое значение:
//  Отформатированная должным образом строковое представление суммы.
//
Функция ФорматСумм(Сумма, Валюта = Неопределено, ЧН = "", ЧРГ = "", ЧРД = "", ВалютаПрописью = Ложь) Экспорт
	
	Возврат ОбщегоНазначенияБКВызовСервера.ФорматСумм(Сумма, Валюта, ЧН, ЧРГ, ЧРД, ВалютаПрописью);	
КонецФункции // ФорматСумм()

// Процедура - При изменении признака отражения в налоговом учете
//
// Параметры:
//  Организация					 - СправочникСсылка.Организации 
//  ДатаДокумента				 - Дата 
//  УчитыватьКПН				 - Булево 
//  ИзменятьРеквизитУчитыватьКПН - Булево 
//
Процедура ПриИзмененииПризнакаОтраженияВНалоговомУчете(Организация, ДатаДокумента, УчитыватьКПН, ИзменятьРеквизитУчитыватьКПН = Ложь) Экспорт
	ПроцедурыНалоговогоУчета.ПриИзмененииПризнакаОтраженияВНалоговомУчете(Организация, ДатаДокумента, УчитыватьКПН, ИзменятьРеквизитУчитыватьКПН);	
КонецПроцедуры	

// Функция - Получить сведения о номенклатуре
//
// Параметры:
//  Номенклатура - СправочникСсылка.Номенклатура
//  ПараметрыОбъекта   - структура содержащая поля:
//  - Дата                    - обязательный
//  - Организация             - обязательный
//  - ТипЦен                  - не обязательный
//  - ВалютаДокумента         - не обязательный
//  - КурсВзаиморасчетов      - не обязательный
//  - КратностьВзаиморасчетов - не обязательный
//  - СуммаВключаетНДС        - не обязательный
//  - СтавкаНДС               - не обязательный (Если параметр передан,
//    то будет использована переданная ставка, иначе ставка из номенклатуры)
// 
// Возвращает соответствие:
//  Ключ     - номенклатура
//  Значение - структура сведений о номенклатуре
//
Функция ПолучитьСведенияОНоменклатуре(Номенклатура, ПараметрыОбъекта) Экспорт
	Возврат ОбработкаТабличныхЧастей.ПолучитьСведенияОНоменклатуре(Номенклатура,ПараметрыОбъекта);
КонецФункции

// Возвращает сведения о массиве номенклатуры
//
// Параметры:
//  СписокНоменклатуры - массив номенклатуры
//  ПараметрыОбъекта   - структура содержащая поля:
//  - Дата                    - обязательный
//  - Организация             - обязательный
//  - ТипЦен                  - не обязательный
//  - ВалютаДокумента         - не обязательный
//  - КурсВзаиморасчетов      - не обязательный
//  - КратностьВзаиморасчетов - не обязательный
//  - СуммаВключаетНДС        - не обязательный
//  - СтавкаНДС               - не обязательный (Если параметр передан,
//    то будет использована переданная ставка, иначе ставка из номенклатуры)
//
// Возвращает соответствие:
//  Ключ     - номенклатура
//  Значение - структура сведений о номенклатуре
//
Функция ПолучитьСведенияОСпискеНоменклатуры(СписокНоменклатуры, ПараметрыОбъекта) Экспорт
	Возврат ОбработкаТабличныхЧастей.ПолучитьСведенияОСпискеНоменклатуры(СписокНоменклатуры,ПараметрыОбъекта);
КонецФункции

// Процедура формирует корреспонденции в налоговом учете
//  по отражению постоянных разниц для документов,
//  в которых не установлен признак отражения в НУ.
//  Процедура необходима для предприятий, которые являются плательщиками КПН, но  не ведут учет временных разниц
//
// Параметры:
//  ДокументОбъект			 - объект документа 
//  СтруктураШапкиДокумента	 - Структура 
//  Движения				 - движения документа 
//  Отказ					 - Булево 
//
Процедура ОтразитьПостоянныеРазницыВНУ(ДокументОбъект, СтруктураШапкиДокумента, Движения, Отказ) экспорт
	
	ПроцедурыНалоговогоУчета.ОтразитьПостоянныеРазницыВНУ(СтруктураШапкиДокумента, Движения, Отказ);
	
КонецПроцедуры

// Функция - Текст запроса товары организаций расход
//
// Параметры:
//  ИмяСписка	 - Строка 
//  ИмяВТ		 - Строка 
// 
// Возвращаемое значение:
//   Строка 
//
Функция ТекстЗапросаТоварыОрганизацийРасход(ИмяСписка = "Товары", ИмяВТ = "ТаблицаТовары") Экспорт
	
	ТекстЗапроса = ТекстЗапросаТоварыОрганизаций(ИмяСписка, ИмяВТ); 
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ВидДвижения", "ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)");		
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Функция - Подготовить таблицу товаров с учетом складов ВТЧ
//
// Параметры:
//  ТаблицаОбъекта			 - ТЧ документа 
//  ИспользоватьСкладИзШапки - Булево 
//  СкладШапки				 - реквизит документа "Склад" 
// 
// Возвращаемое значение:
//   ТаблицаЗначений 
//
Функция ПодготовитьТаблицуТоваровСУчетомСкладовВТЧ(ТаблицаОбъекта, ИспользоватьСкладИзШапки, СкладШапки) Экспорт
	ТаблицаТовары = ТаблицаОбъекта.Выгрузить();
	
	Если ТаблицаТовары.Колонки.Найти("Склад") = Неопределено Тогда
		ТаблицаТовары.Колонки.Добавить("Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"));
	КонецЕсли;
	
	Если ТаблицаТовары.Колонки.Найти("Коэффициент") = Неопределено Тогда
		ТаблицаТовары.Колонки.Добавить("Коэффициент", Новый ОписаниеТипов("Число"));
		ТаблицаТовары.ЗаполнитьЗначения(1, "Коэффициент");
	КонецЕсли; 
	
	ВедетсяУчетПоСкладам  = ?(ПланыСчетов.Типовой.Товары.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Склады, "ВидСубконто") = Неопределено, Ложь, Истина);
	
	Для Каждого СтрокаТовары Из ТаблицаТовары Цикл  		
		Если Не ЗначениеЗаполнено(СтрокаТовары.КлючСвязи) Тогда
			СтрокаТовары.КлючСвязи = общ_ПереопределениеПроцедурБККлиентСервер.НовыйКлючСвязиСтрокиТаблицы(ТаблицаТовары);
		КонецЕсли;	 
		
		Если  ВедетсяУчетПоСкладам Тогда			
			Если НЕ ЗначениеЗаполнено(СтрокаТовары.Склад) ИЛИ ИспользоватьСкладИзШапки Тогда
				СтрокаТовары.Склад = СкладШапки;		
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла; 
	
	Возврат ТаблицаТовары;
	
КонецФункции

// Формирует и устанавливает текст заголовка для элемента управления "УчитыватьКПН"
//
// Параметры:
//  Организация - выбранная организация в документе, 
//  ЭлементУправления     - элемент управления "УчитыватьКПН". 
//
Процедура УстановитьЗаголовокЭлементуУправленияУчитыватьКПН(Организация, ЭлементУправления) Экспорт
	
	РаботаСДиалогами.УстановитьЗаголовокЭлементуУправленияУчитыватьКПН(Организация, ЭлементУправления);
	
КонецПроцедуры

// Функция возвращает возможные счета учета расчетов с контрагентом
//
// Параметры:
//  Организация - по которой выполняется поиск
//  Контрагент  - по которому выполняется поиск
//  Договор     - по которому выполняется поиск
//
// Возвращаемое значение:
//  Структура - структура содержащая счета учета расчетов
// 
Функция ПолучитьСчетаРасчетовСКонтрагентом(Организация, Контрагент, Договор, 
	ВалютаРегламентированногоУчета = Неопределено) Экспорт
	Возврат УправлениеВзаиморасчетамиСервер.ПолучитьСчетаРасчетовСКонтрагентом(Организация, Контрагент, Договор,ВалютаРегламентированногоУчета);
		
КонецФункции

// Функция - Заполнить параметры формы редактирования номеров ГТД
//
// Параметры:
//  Объект		 - объект документа 
//  Форма		 - форма документа 
//  ИмяТаблицы	 - Строка 
// 
// Возвращаемое значение:
//   Структура 
//
Функция ЗаполнитьПараметрыФормыРедактированияНомеровГТД(Объект, Форма, ИмяТаблицы = "Товары") Экспорт
	Возврат НомераГТДСервер.ЗаполнитьПараметрыФормыРедактированияНомеровГТД(Объект, Форма, ИмяТаблицы);	
КонецФункции

// Процедура проверяет владельца субконто "Подразделение"
//
// Параметры:
//	ДокументОбъект - объект документ в форме которого произошло событие
//  ТекПользователь - текущий пользователь, настройки которого используются
//                 по умолчанию
//  СтруктураРеквизитов - структура с названиеями и значениями реквизитов, 
//                 кот.необходимо проверить
//
Процедура ПроверитьВладельцаСубконтоПодразделение(ДокументОбъект, Организация, СтруктураРеквизитов) Экспорт
	ПроцедурыБухгалтерскогоУчета.ПроверитьВладельцаСубконтоПодразделение(ДокументОбъект, Организация, СтруктураРеквизитов);
КонецПроцедуры

// Процедура - Рассчитать сумму НДС табличной части
//
// Параметры:
//  СтрокаТабличнойЧасти	 - строка ТЧ 
//  ПараметрыОбъекта		 - Структура 
//  ИмяРеквизитаСуммаНДС	 - Строка 
//  РассчитыватьСуммуЗачета	 - Булево 
//
Процедура РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ПараметрыОбъекта, ИмяРеквизитаСуммаНДС = "СуммаНДС", РассчитыватьСуммуЗачета = Ложь) Экспорт
	
	// Если в документе нет флагов учета НДС, то используем значения по умолчанию
	УчитыватьНДС = Истина;
	СуммаВключаетНДС = Ложь;
	ЕстьОборотПоРеализации = СтрокаТабличнойЧасти.Свойство("ОборотПоРеализации");
	ЕстьВалюта = ПараметрыОбъекта.Свойство("ВалютаДокумента");
	
	ВалютаРеглУчета = си_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ВалютаРегламентированногоУчета");
	
	// если процедура вызвана из ОбработкаЗаполненияТабличныхЧастейТовары, то проверим наличие параметра "ЗначениеОборотПоРеализации"
	Если ПараметрыОбъекта.Свойство("ЗначениеОборотПоРеализации") Тогда
		ЕстьОборотПоРеализации = ПараметрыОбъекта.ЗначениеОборотПоРеализации;
	Иначе
		Если ЕстьВалюта И ВалютаРеглУчета <> ПараметрыОбъекта.ВалютаДокумента И ПараметрыОбъекта.Дата < Дата(2014, 07, 01) Тогда
			// В валютных счетах-фактурах до 01.07.2014 расчет НДС выполняется от суммы, так как оборот по реализации указывается в тенге.
			// В валютных счетах-фактурах начиная с 01.07.2014 расчет НДС выполняется от оборота по реализации, так как оборот по реализации указывается в валюте.			
			ЕстьОборотПоРеализации = Ложь;
		КонецЕсли;	
	КонецЕсли;
	
	
	Если ПараметрыОбъекта.Свойство("УчитыватьНДС") Тогда
		УчитыватьНДС = ПараметрыОбъекта.УчитыватьНДС;
	КонецЕсли;
	
	Если ПараметрыОбъекта.Свойство("СуммаВключаетНДС") Тогда
		СуммаВключаетНДС = ПараметрыОбъекта.СуммаВключаетНДС;
	КонецЕсли;
	
	
	Если СтрокаТабличнойЧасти.Свойство("СтавкаНДС") Тогда
		Если ЕстьОборотПоРеализации Тогда 
			СтрокаТабличнойЧасти[ИмяРеквизитаСуммаНДС] = общ_ПереопределениеПроцедурБККлиентСервер.РассчитатьСуммуНДС(СтрокаТабличнойЧасти.ОборотПоРеализации,
			УчитыватьНДС, 
			Ложь,
			общ_ПереопределяемыеПроцедурыБКВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС),
			?(СтрокаТабличнойЧасти.Свойство("СуммаАкциза"), СтрокаТабличнойЧасти.СуммаАкциза, 0),
			Истина);	
			
		ИначеЕсли СтрокаТабличнойЧасти.Свойство("Сумма") Тогда
			
			СтрокаТабличнойЧасти[ИмяРеквизитаСуммаНДС] = общ_ПереопределениеПроцедурБККлиентСервер.РассчитатьСуммуНДС(СтрокаТабличнойЧасти.Сумма,
			УчитыватьНДС, 
			СуммаВключаетНДС,
			общ_ПереопределяемыеПроцедурыБКВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС),
			?(СтрокаТабличнойЧасти.Свойство("СуммаАкциза"), СтрокаТабличнойЧасти.СуммаАкциза, 0),
			?(ПараметрыОбъекта.Свойство("СуммаВключаетАкциз"), ПараметрыОбъекта.СуммаВключаетАкциз, Ложь));
			
		КонецЕсли;													   
	КонецЕсли;
	
	// если в документе есть реквизиты УплаченныйНДС и СуммаНДС, то сумма НДС к зачету определяется
	// исходя из признака включения НДС в стоимость
	Если РассчитыватьСуммуЗачета Тогда
		
		НДСВключенВСтоимость = ?(ПараметрыОбъекта.Свойство("НДСВключенВСтоимость"), ПараметрыОбъекта.НДСВключенВСтоимость, Ложь);	
		
		Если НДСВключенВСтоимость Тогда
			СтрокаТабличнойЧасти.СуммаНДС = 0;
		Иначе
			СтрокаТабличнойЧасти.СуммаНДС = СтрокаТабличнойЧасти[ИмяРеквизитаСуммаНДС];
		КонецЕсли
		
	КонецЕсли;   	
	
КонецПроцедуры // РассчитатьСуммуНДСТабЧасти()

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция РазрешитьПечатьНепроведенныхДокументов() Экспорт
	
	Возврат ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	
КонецФункции

// Позволяет определить есть ли среди реквизитов табличной части документа
// реквизит с переданным именем.
//
// Параметры: 
//  ИмяРеквизита - строковое имя искомого реквизита, 
//  МетаданныеДокумента - объект описания метаданных документа, среди реквизитов которого производится поиск.
//  ИмяТабЧасти  - строковое имя табличной части документа, среди реквизитов которого производится поиск
//
// Возвращаемое значение:
//  Истина - нашли реквизит с таким именем, Ложь - не нашли.
//
Функция ЕстьРеквизитТабЧастиДокумента(ИмяРеквизита, МетаданныеДокумента, ИмяТабЧасти) Экспорт
	
	ТабЧасть = МетаданныеДокумента.ТабличныеЧасти.Найти(ИмяТабЧасти);
	
	Если ТабЧасть = Неопределено Тогда // Нет такой таб. части в документе
		Возврат Ложь;
		
	Иначе
		Возврат НЕ (ТабЧасть.Реквизиты.Найти(ИмяРеквизита) = Неопределено);
		
	КонецЕсли;
	
КонецФункции // ЕстьРеквизитТабЧастиДокумента()

// Возвращает Основную кассу организации или структурного подразделения
Функция ПолучитьОсновнуюКассуДокумента(ДанныеОбъекта) Экспорт
	
	Возврат УправлениеДенежнымиСредствамиСервер.ПолучитьОсновнуюКассуДокумента(ДанныеОбъекта); 
	
КонецФункции

Функция ПолучитьОсновнойБанковскийСчетДокумента(ДанныеОбъекта) Экспорт
	
	Возврат УправлениеДенежнымиСредствамиСервер.ПолучитьОсновнойБанковскийСчетДокумента(ДанныеОбъекта); 
	
КонецФункции

// Функция возвращает массив вышестоящих групп указанного элемента.
//
// Параметры:
//  МассивЭлементовСправочника      - Массив элементов справочника, для которого ищются родители
//                                    Все элементы массива должны быть одного вида!
//
// Возвращаемое значение
//  Соответствие массивов вышестоящих групп
//
Функция ПолучитьСписокВышеСтоящихГруппЭлементов(МассивЭлементовСправочника) Экспорт
	
	Результат = Новый Соответствие;
	
	Если МассивЭлементовСправочника.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	Для Каждого ЭлементСправочника Из МассивЭлементовСправочника Цикл
		Результат.Вставить(ЭлементСправочника, Новый Массив);
	КонецЦикла;
	
	МетаданныеСправочника = МассивЭлементовСправочника[0].Метаданные();
	Если НЕ МетаданныеСправочника.Иерархический Тогда
		Возврат Результат;
	КонецЕсли;
	
	ИмяСправочника = МетаданныеСправочника.Имя;
	
	Запрос = Новый Запрос;
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Справочник1.Ссылка КАК Элемент,
	|	Справочник1.Родитель КАК Родитель1,
	|	Справочник2.Родитель КАК Родитель2,
	|	Справочник3.Родитель КАК Родитель3,
	|	Справочник4.Родитель КАК Родитель4,
	|	Справочник5.Родитель КАК Родитель5
	|ИЗ
	|	Справочник.Номенклатура КАК Справочник1
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Справочник2
	|		ПО (Справочник2.Ссылка = Справочник1.Родитель)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Справочник3
	|		ПО (Справочник3.Ссылка = Справочник2.Родитель)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Справочник4
	|		ПО (Справочник4.Ссылка = Справочник3.Родитель)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Справочник5
	|		ПО (Справочник5.Ссылка = Справочник4.Родитель)
	|ГДЕ
	|	Справочник1.Ссылка В(&МассивСсылок)";
	
	Запрос.Текст = СтрЗаменить(ТекстЗапроса, "Номенклатура", ИмяСправочника);
	
	//	Таблица соответствия групп и элементов (начальной точки иерархии):
	//		Родитель - группа справочника
	//		Элемент - элемент справочника, для которого строится иерархия
	СоответствиеГруппИЭлементов = Новый ТаблицаЗначений;
	СоответствиеГруппИЭлементов.Колонки.Добавить("Родитель",	Новый ОписаниеТипов("СправочникСсылка." + ИмяСправочника));
	СоответствиеГруппИЭлементов.Колонки.Добавить("Элемент",		Новый ОписаниеТипов("СправочникСсылка." + ИмяСправочника));
	СоответствиеГруппИЭлементов.Индексы.Добавить("Родитель");
	Для Каждого ЭлементСправочника Из МассивЭлементовСправочника Цикл
		НовоеСоответствие = СоответствиеГруппИЭлементов.Добавить();
		НовоеСоответствие.Родитель	= ЭлементСправочника;
		НовоеСоответствие.Элемент	= ЭлементСправочника;
	КонецЦикла;
	
	Отбор	= Новый Структура("Родитель");
	
	ТекущийМассивСсылок = МассивЭлементовСправочника;
	
	Пока ТекущийМассивСсылок.Количество() > 0 Цикл
		
		Запрос.УстановитьПараметр("МассивСсылок", УдалитьПовторяющиесяЭлементыМассива(ТекущийМассивСсылок));
		Выборка = Запрос.Выполнить().Выбрать();
		
		ТекущийМассивСсылок	= Новый Массив;
		
		Пока Выборка.Следующий() Цикл
			
			Отбор.Родитель = Выборка.Элемент;
			
			НайденныеСтроки = СоответствиеГруппИЭлементов.НайтиСтроки(Отбор);
			Для Каждого СоответствиеГруппыИЭлемента Из НайденныеСтроки Цикл
				
				ЭлементСправочника	= СоответствиеГруппыИЭлемента.Элемент;
				
				МассивВышеСтоящихГруп	= Результат.Получить(ЭлементСправочника);
				
				Для Индекс = 1 по 5 Цикл
					
					Родитель = Выборка["Родитель" + Индекс];
					Если ЗначениеЗаполнено(Родитель) Тогда
						
						МассивВышеСтоящихГруп.Добавить(Родитель);
						Если Индекс = 5 Тогда
							ТекущийМассивСсылок.Добавить(Родитель);
							НовоеСоответствие = СоответствиеГруппИЭлементов.Добавить();
							НовоеСоответствие.Родитель	= Родитель;
							НовоеСоответствие.Элемент	= ЭлементСправочника;
						КонецЕсли;
						
					Иначе
						Прервать;
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Возвращает таблицу цен номенклатуры
//
// Параметры:
//  МассивНоменклатуры - массив номенклатуры
//  ТипЦен             - тип цен
//  Дата               - дата цен
//
// Возвращаемое значение:
//  Таблица значений, содержащая цены, валюты цен и курсы валют на переданную дату
//
Функция ПолучитьТаблицуЦенНоменклатуры(МассивНоменклатуры, ТипЦен, Дата, Организация) Экспорт
	
	Возврат УправлениеЦенообразованием.ПолучитьТаблицуЦенНоменклатуры(МассивНоменклатуры, ТипЦен, Дата, Организация);
	
КонецФункции

Функция ТекстЗапросаТоварыОрганизацийПриход(ИмяСписка = "Товары", ИмяВТ = "ТаблицаТовары") Экспорт
	
	ТекстЗапроса = ТекстЗапросаТоварыОрганизаций(ИмяСписка, ИмяВТ); 
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ВидДвижения", "ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)");
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТоварыОрганизаций(ИмяСписка, ИмяВТ) Экспорт
	
	ТекстЗапроса ="ВЫБРАТЬ
	|	МИНИМУМ(НомераГТД.НомерСтроки) КАК НомерСтроки,
	|	&ИмяСписка КАК ИмяСписка,
	|	ТаблицаТовары.Номенклатура КАК Товар,
	|	Реквизиты.Склад КАК Склад,
	|	НомераГТД.НомерГТД КАК НомерГТД,
	|	СУММА(ВЫРАЗИТЬ(НомераГТД.Количество * ТаблицаТовары.Коэффициент КАК ЧИСЛО(19, 3))) КАК Количество,
	|	&ВидДвижения КАК ВидДвижения
	|ИЗ
	|	&ТаблицаТовары КАК ТаблицаТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|		ПО (Реквизиты.Ссылка = ТаблицаТовары.Ссылка)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаНомераГТД КАК НомераГТД
	|		ПО ТаблицаТовары.КлючСвязи = НомераГТД.КлючСвязи
	|ГДЕ
	|	НЕ ТаблицаТовары.СчетУчетаБУ.Забалансовый
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТовары.Номенклатура,
	|	Реквизиты.Склад,
	|	НомераГТД.НомерГТД
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки"
	+ общ_ПереопределениеПроцедурБККлиентСервер.ТекстРазделителяЗапросовПакета();
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТаблицаТовары", ИмяВт);		
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяСписка", """" + ИмяСписка + """");
	
	Возврат ТекстЗапроса;	
	
КонецФункции

Функция ВедетсяУчетПоТоварамОрганизаций(ДатаДокумента) Экспорт
	
	ДатаПереходаНаУчетПоТоварамОрганизацийВРазрезеНомеровГТДБУ = Константы.ДатаПереходаНаУчетПоТоварамОрганизацийВРазрезеНомеровГТДБУ.Получить();
	
	УчетПоИсточникамПроисхождения = ДатаПереходаНаУчетПоТоварамОрганизацийВРазрезеНомеровГТДБУ <> Дата(1,1,1) И ДатаДокумента >= ДатаПереходаНаУчетПоТоварамОрганизацийВРазрезеНомеровГТДБУ;	
	УчетТоваровНаВС  = ВедетсяУчетПоТоварамНаВС(ДатаДокумента);
	
	Возврат УчетПоИсточникамПроисхождения И Не УчетТоваровНаВС;
	
КонецФункции

Функция ВедетсяУчетПоТоварамНаВС(ДатаДокумента) Экспорт
	
	ДатаПереходаНаУчетПоТоварамОрганизацийНаВС = Константы.ДатаПереходаНаУчетПоТоварамОрганизацийНаВиртуальныхСкладах.Получить();
	
	УчетТоваровНаВС  = (ДатаПереходаНаУчетПоТоварамОрганизацийНаВС <> Дата(1,1,1) И ДатаДокумента >= ДатаПереходаНаУчетПоТоварамОрганизацийНаВС);
	
	Возврат УчетТоваровНаВС;
	
КонецФункции

Функция ПодготовитьТаблицуТоварыОрганизаций(ТаблицаТовары,ТаблицаРеквизиты, Отказ) Экспорт
	
	Параметры = Новый Структура;    
	
	СписокОбязательныхКолонок = ""
	+ "Регистратор,"                  	 // <ДокументСсылка.*> - документ-регистратор движений
	+ "Период,"                       	 // <Дата> - период движений - дата документа
	+ "Организация,"                  	 // <СправочникСсылка.Организация> - организация, в которую приходуется товар
	+ "СтруктурноеПодразделение" ;
	
	Параметры.Вставить("Реквизиты",
	ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));
	
	
	СписокОбязательныхКолонок = ""
	+ "НомерСтроки,"       				// <Число> - номер строки в списке
	+ "Товар,"      				    // <СправочникСсылка.Номенклатура>                      
	+ "НомерГТД,"        				// <СправочникСсылка.НомераГТД> 
	+ "Количество,"                     // <Число,15,3> - количество 
	+ "ВидДвижения,"
	+ "ИмяСписка,"
	+ "Склад";
	
	Параметры.Вставить("ТаблицаТовары",
	ПолучитьТаблицуПараметровПроведения(ТаблицаТовары, СписокОбязательныхКолонок));
	
	Возврат Параметры; 
	
КонецФункции

Процедура СформироватьДвиженияТоварыОрганизаций(ТаблицаТовары, ТаблицаРеквизиты, Движения, Отказ) Экспорт 
	
	Параметры = ПодготовитьТаблицуТоварыОрганизаций(ТаблицаТовары,ТаблицаРеквизиты,  Отказ);
	
	Если Параметры.ТаблицаТовары.Количество() = 0 ИЛИ  Параметры.Реквизиты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = Параметры.Реквизиты[0];
	
	Если НЕ ВедетсяУчетПоТоварамОрганизаций(Реквизиты.Период) Тогда
		Возврат;
	КонецЕсли;
	
	ВедетсяУчетПоСкладам  = ?(ПланыСчетов.Типовой.Товары.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Склады, "ВидСубконто") = Неопределено, Ложь, Истина);
	
	Для Каждого СтрокаТаблицы Из Параметры.ТаблицаТовары Цикл
		Движение = Движения.ТоварыОрганизацийБУ.Добавить();
		Движение.Период 				  = Реквизиты.Период;
		Движение.Организация 			  = Реквизиты.Организация;
		Движение.СтруктурноеПодразделение = Реквизиты.СтруктурноеПодразделение;  
		ЗаполнитьЗначенияСвойств(Движение, СтрокаТаблицы);
		//если не ведется учет по складам на счетах ТМЗ, то склад очищаем
		Если Не ВедетсяУчетПоСкладам Тогда
			Движение.Склад = Справочники.Склады.ПустаяСсылка();
		КонецЕсли;   				
	КонецЦикла;
	
	Движения.ТоварыОрганизацийБУ.Записывать = Истина;
	
КонецПроцедуры

Процедура ВыполнитьКонтрольТоварыОрганизаций(ТаблицаТовары, ТаблицаРеквизиты, ВыводитьСообщения = Истина, Отказ) Экспорт
	
	Если ТаблицаТовары = Неопределено ИЛИ ТаблицаТовары.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Параметры =  ПодготовитьТаблицуТоварыОрганизаций(ТаблицаТовары, ТаблицаРеквизиты, Отказ);
	
	Реквизиты = Параметры.Реквизиты[0];
	
	Если НЕ ВедетсяУчетПоТоварамОрганизаций(Реквизиты.Период) Тогда
		Возврат;
	КонецЕсли;
	
	КонтролироватьОстаток = НЕ ПроцедурыБухгалтерскогоУчета.ОтключитьКонтрольОтрицательныхОстатков();
	
	Запрос = Новый Запрос;
	
	ВедетсяУчетПоСкладам  = ?(ПланыСчетов.Типовой.Товары.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Склады, "ВидСубконто") = Неопределено, Ложь, Истина);
	
	Запрос.Текст = 	
	"ВЫБРАТЬ
	|	ТаблицаТовары.Товар КАК Товар,
	|	ТаблицаТовары.Склад КАК Склад,
	|	ТаблицаТовары.НомерГТД КАК НомерГТД
	|ПОМЕСТИТЬ Вт_Товары
	|ИЗ
	|	&ТаблицаТовары КАК ТаблицаТовары
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Товар,
	|	НомерГТД
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыОрганизацийОстатки.Товар,
	|	ТоварыОрганизацийОстатки.Склад,
	|	ТоварыОрганизацийОстатки.НомерГТД,
	|	ТоварыОрганизацийОстатки.КоличествоОстаток
	|ИЗ
	|	РегистрНакопления.ТоварыОрганизацийБУ.Остатки(
	|			&ДатаОстатка,
	|			Организация = &Организация
	|				И СтруктурноеПодразделение = &СтруктурноеПодразделение
	|				И &УсловиеНаТовары) КАК ТоварыОрганизацийОстатки";
	
	УсловиеНаТовары = 
	"(Товар, НомерГТД " 
	+ ?(ВедетсяУчетПоСкладам, ", Склад", "") + ") В
	|	(ВЫБРАТЬ
	|		ВТ_Товары.Товар,
	|		ВТ_Товары.НомерГТД "
	+ ?(ВедетсяУчетПоСкладам, ", ВТ_Товары.Склад", "") + "
	|	ИЗ
	|		ВТ_Товары)";	
	
	Запрос.УстановитьПараметр("ТаблицаТовары", ТаблицаТовары);
	Запрос.УстановитьПараметр("ДатаОстатка", Новый МоментВремени(Реквизиты.Период, Реквизиты.Регистратор));
	Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
	Запрос.УстановитьПараметр("СтруктурноеПодразделение", Реквизиты.СтруктурноеПодразделение);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеНаТовары",УсловиеНаТовары); 
	
	ТаблицаОстатков = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаДокумента Из ТаблицаТовары Цикл
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Товар", СтрокаДокумента.Товар);
		СтруктураПоиска.Вставить("НомерГТД", СтрокаДокумента.НомерГТД);
		
		Если ВедетсяУчетПоСкладам Тогда
			СтруктураПоиска.Вставить("Склад", СтрокаДокумента.Склад);	
		КонецЕсли;  		
		СтрокиОстатка = ТаблицаОстатков.НайтиСтроки(СтруктураПоиска);
		КоличествоОсталосьПогасить = СтрокаДокумента.Количество;	
		
		Для Каждого СтрокаОстатка Из СтрокиОстатка Цикл
			
			Если КоличествоОсталосьПогасить <= 0 Тогда
				Прервать;
			КонецЕсли;
			
			Если СтрокаОстатка.КоличествоОстаток <= 0 Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаОстатка = СтрокиОстатка[0];
			КоличествоДок = МИН(КоличествоОсталосьПогасить,СтрокаОстатка.КоличествоОстаток);			
			
			Если СтрокаОстатка.КоличествоОстаток <= КоличествоДок Тогда
				СтрокаОстатка.КоличествоОстаток = 0;
			Иначе
				СтрокаОстатка.КоличествоОстаток = СтрокаОстатка.КоличествоОстаток - КоличествоДок;
			КонецЕсли;
			
			КоличествоОсталосьПогасить = КоличествоОсталосьПогасить - КоличествоДок;
			
		КонецЦикла;
		
		Если КоличествоОсталосьПогасить > 0 И ВыводитьСообщения Тогда
			
			Если СтрокаДокумента.НомерГТД.Пустая() Тогда
				ПредставлениеНомераГТД = НСтр("ru = 'Пустой источник происхождения'");
			Иначе
				ПредставлениеНомераГТД = СтрокаДокумента.НомерГТД;
			КонецЕсли;
			
			ТекстОшибки = НСтр("ru='Товары организаций (БУ). По организации %1 не списано %2 %3 товара <%4>, источник происхождения: <%5>, склад %6"
			+ ?(ЗначениеЗаполнено(Реквизиты.СтруктурноеПодразделение), ", структурное подразделение: %7.", ".")+"' ");
			
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстОшибки,
			Реквизиты.Организация,
			КоличествоОсталосьПогасить,
			СтрокаДокумента.Товар.БазоваяЕдиницаИзмерения,
			СтрокаДокумента.Товар,
			ПредставлениеНомераГТД,
			СтрокаДокумента.Склад,
			Реквизиты.СтруктурноеПодразделение,
			);
			
			ПолеКоличество	= СтрокаДокумента.ИмяСписка + "[" + Формат(СтрокаДокумента.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].Количество";		
			
			Если НЕ КонтролироватьОстаток Тогда
				
				ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, , , "Объект", Отказ);
				Отказ = Ложь;
				
			Иначе
				
				ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, Реквизиты.Регистратор, ПолеКоличество, "Объект", Отказ);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла; 	
	
КонецПроцедуры

Функция ПодготовитьТаблицуНомеровГТД(Товары, НомераГТД) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Товары", Товары);  	
	Запрос.УстановитьПараметр("НомераГТД", НомераГТД);
	Запрос.Текст = "ВЫБРАТЬ
	|	Товары.Номенклатура,
	|	Товары.КлючСвязи,
	|	Товары.Склад,
	|	Товары.Коэффициент,
	|	Товары.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НомераГТД.КлючСвязи,
	|	НомераГТД.НомерГТД,
	|	НомераГТД.НовыйНомерГТД,
	|	НомераГТД.Количество
	|ПОМЕСТИТЬ НомераГТД
	|ИЗ
	|	&НомераГТД КАК НомераГТД
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НомераГТД.НомерГТД,
	|	НомераГТД.Количество,
	|	НомераГТД.КлючСвязи,
	|	НомераГТД.НовыйНомерГТД,
	|	Товары.Номенклатура,
	|	Товары.Склад,
	|	Товары.Коэффициент,
	|	Товары.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	НомераГТД КАК НомераГТД
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Товары КАК Товары
	|		ПО НомераГТД.КлючСвязи = Товары.КлючСвязи
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки,
	|	Товары.КлючСвязи";
	
	
	Если НомераГТД.Колонки.Найти("НовыйНомерГТД") = Неопределено  Тогда			
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "НомераГТД.НовыйНомерГТД,", "");		
	КонецЕсли;      	
	
	ТаблицаНомераГТД = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаНомераГТД;			   
	
КонецФункции

Функция ПолучитьТаблицуПараметровПроведения(ИсходнаяТаблица, СписокКолонок) Экспорт
	
	Если ИсходнаяТаблица = Неопределено Тогда
		
		ТаблицаРезультат = Новый ТаблицаЗначений;
		Колонки = Новый Структура(СписокКолонок);
		Для каждого Колонка Из Колонки Цикл
			ТаблицаРезультат.Колонки.Добавить(Колонка.Ключ);
		КонецЦикла;
		Возврат ТаблицаРезультат;
		
	Иначе
		
		Возврат ИсходнаяТаблица.Скопировать(, СписокКолонок);
		
	КонецЕсли;
	
КонецФункции

// Процедура заполняет ставку НДС в строке табличной части документа
//
// Параметры:
//  СтрокаТабличнойЧасти     - строка табличной части документа,
//  ДокументОбъект           - объект редактируемого документа.
//
Процедура ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ИмяТабличнойЧасти, МетаданныеДокумента) Экспорт
	
	ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ИмяТабличнойЧасти, МетаданныеДокумента);
	
КонецПроцедуры // ЗаполнитьСтавкуНДСТабЧасти()

// Процедура заполняет единицу и цену по ценам продажи в строке табличной части документа
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части документа,
//  ДокументОбъект       - объект редактируемого документа.
//  ВалютаРегламентированногоУчета - валюта регламентированного учета
//
Процедура ЗаполнитьЕдиницуЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, ИмяТабличнойЧасти, МетаданныеДокумента) Экспорт
	ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, ИмяТабличнойЧасти, МетаданныеДокумента);
	
КонецПроцедуры

#КонецОбласти




