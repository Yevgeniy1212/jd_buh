// Конвертация БК_3.0.45 от 30.01.2025 17:35:12
#Область ПроцедурыКонвертации
Процедура ПередКонвертацией(КомпонентыОбмена) Экспорт
	Если Не КомпонентыОбмена.ЭтоОбменЧерезПланОбмена Тогда
		Возврат;
	КонецЕсли;
	
	Если КомпонентыОбмена.НаправлениеОбмена = "Получение" Тогда
		
		ЗаполнитьЗначенияСвойств(КомпонентыОбмена.ПараметрыКонвертации, КомпонентыОбмена.УзелКорреспондента,
			"СкладПоУмолчанию,
			|ПравилаЗагрузкиПодразделений,
			|РазрешитьПроведениеДокументовПриЗагрузке,
			|ВариантНастройки");
	
		КомпонентыОбмена.ПараметрыКонвертации.ТипЦенПлановойСебестоимости    = Константы.ТипЦенПлановойСебестоимостиНоменклатуры.Получить();
		КомпонентыОбмена.ПараметрыКонвертации.ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
		///////////////////////////////////////////////////////////////////
		// Инициализация таблицы для отложенного заполнения документов
		
		ЗагруженныеОбъекты = Новый ТаблицаЗначений;
		ЗагруженныеОбъекты.Колонки.Добавить("ИмяПКО");
		ЗагруженныеОбъекты.Колонки.Добавить("Объект");
		
		КомпонентыОбмена.ПараметрыКонвертации.ЗагруженныеОбъекты = ЗагруженныеОбъекты;
	Иначе
		ЗаполнитьЗначенияСвойств(КомпонентыОбмена.ПараметрыКонвертации, КомпонентыОбмена.УзелКорреспондента,
			"ВыгружатьАналитикуПоСкладам");	
	КонецЕсли;
КонецПроцедуры

Процедура ПослеКонвертации(КомпонентыОбмена) Экспорт
	
КонецПроцедуры

Процедура ПередОтложеннымЗаполнением(КомпонентыОбмена) Экспорт
	СортировкаОбъектовПередОтложеннымЗаполнением(КомпонентыОбмена);
КонецПроцедуры

#КонецОбласти
#Область ПОД
// Заполняет таблицу правил обработки данных.
//
// Параметры:
//  НаправлениеОбмена - строка ("Отправка" либо "Получение").
//  ПравилаОбработкиДанных - таблица значений, в которую добавляются правила. 
Процедура ЗаполнитьПравилаОбработкиДанных(НаправлениеОбмена, ПравилаОбработкиДанных) Экспорт
	Если НаправлениеОбмена = "Отправка" Тогда
		Если ПравилаОбработкиДанных.Колонки.Найти("ОчисткаДанных") = Неопределено Тогда
			ПравилаОбработкиДанных.Колонки.Добавить("ОчисткаДанных");
		КонецЕсли;
		ДобавитьПОД_Документ_АвансовыйОтчет_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ВозвратТоваровОтПокупателя_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ВозвратТоваровПоставщику_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_НачислениеОценочныхОбязательств_ЗУП_От(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОприходованиеТоваров_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОстаткиБезналичныхДенежныхСредств(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОстаткиЗадолженностиПодотчетныхЛиц(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОстаткиКредитыЗаймы(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОстаткиНаличныхДенежныхСредств(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОстаткиПерерасходаПодотчетныхЛиц(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОстаткиРасчетыСПокупателямиАвансы(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОстаткиРасчетыСПокупателямиДолги(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОстаткиРасчетыСПоставщикамиАвансы(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОстаткиРасчетыСПоставщикамиДолги(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОстаткиСобственныхТМЦ(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОстаткиТараПереданная(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОстаткиТараПринятая(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОстаткиТоваровПереданныхНаКомиссию(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОстаткиТоваровПринятыхНаКомиссию(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОтражениеЗарплатыВБухучете_Отправка_ЗУП(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПеремещениеТоваров_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПКО_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПОПБДС_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПОСБДС_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПоступлениеТоваровУслуг_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПРС_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_РеализацияТоваровУслуг_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_РКО_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СписаниеТоваров_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СРС_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ТаможеннаяДекларация_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_УстановкаЦенНоменклатуры_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Банки_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_БанковскиеСчета_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Валюты_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ВидыПоступления_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ВидыРеализации_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ДоговорыКонтрагентов_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Кассы_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_КлассификаторЕдиницИзмерения(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_КлассификаторСтранМира_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Контрагенты_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Номенклатура_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Организации_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Подразделения_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Пользователи_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Склады_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СтатьиДДС_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ТипыЦен(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ФизическиеЛица_Отправка(ПравилаОбработкиДанных);
	ИначеЕсли НаправлениеОбмена = "Получение" Тогда
		ДобавитьПОД_Документ_АвансовыйОтчет(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_АннулированиеПодарочныхСертификатов_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ВозвратПодарочныхСертификатов_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ВозвратТоваровОтПокупателя(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ВозвратТоваровПоставщику(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ДепонированиеЗаработнойПлаты_ЗУП(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ЗаказКлиента_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ИнвентаризацияТоваров(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_КорректировкаДолга_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_НачислениеОценочныхОбязательств_ЗУП(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОперацияПоПлатежнойКарте(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОприходованиеТоваров(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОтражениеЗарплатыВБухучете_Получение_ЗУП(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОтчетБанкаПоОперациямЭквайринга_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОтчетОРозничныхПродажах_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОтчетПроизводстваЗаСмену_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПБДСВзносыИОтчисления_Получение_ЗУП(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПБДСВозвратЗаработнойПлаты_Получение_ЗУП(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПБДСКонвертацияВалюты_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПБДСПрочееПоступление_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПБДСПрочиеДоходы_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПБДСРасчетыСКонтрагентами_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПБДСРасчетыССотрудниками_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПередачаМатериаловВПроизводство_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПередачаТоваров_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПеремещениеТоваров(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПКОВнутренняяПередача_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПКОКонвертацияВалюты_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПКОПолучениеНаличныхВБанке_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПКОПрочееПоступление_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПКОПрочиеДоходы_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПКОРасчетыСКонтрагентами_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПКОРасчетыССотрудниками_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПКОРозничнаяВыручка_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПоступлениеИзПереработки_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПоступлениеТоваровУслуг(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_РеализацияТоваровУслуг(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_РКОВнутренняяПередача_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_РКОВыплатаЗарплаты_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_РКОКонвертацияВалюты_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_РКОНаБанковскийСчет_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_РКОПрочаяВыдача_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_РКОПрочийРасход_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_РКОРасчетыСКонтрагентами_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_РКОРасчетыССотрудниками_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СБДСВзносыИОтчисления_Получение_ЗУП(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СБДСКонвертацияВалюты_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СБДСПереводНаДругойСчет_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СБДСПеречислениеЗаработнойПлаты_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СБДСПеречислениеЗаработнойПлатыНаЛицевыеСчета_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СБДСПлатежиВБюджет_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СБДСПрочееСписание_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СБДСПрочиеРасходы_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СБДСРасчетыСКонтрагентами_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СБДСРасчетыССотрудниками_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СборкаТоваров_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СписаниеТоваров_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СписаниеТоваровПоИнвентаризации_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СчетФактураВыданный_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СчетФактураПолученный_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ТаможеннаяДекларация_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ЭСФ_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_АктуальныеЭСФ_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Банки_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_БанковскиеСчета_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Валюты_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ВидыДокументовФизическихЛиц(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ВидыРеализации_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Договоры_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ДокументыФизическихЛиц_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ИсторияЭСФ_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Кассы_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_КлассификаторЕдиницИзмерения_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Контрагенты_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_КонтрагентыГруппа(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Номенклатура_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_НоменклатураГруппа_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_НомераГТД_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Организации_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ПодразделенияОрганизаций(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Пользователи_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Склады_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СкладыГруппа_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СпецификацииНоменклатуры_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СпособыОтраженияЗарплатыВФинансовомУчете(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СпособыОтраженияЗарплатыВФинансовомУчетеГруппа(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СтатьиДДС_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ТипыЦен_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ФизическиеЛица_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ФизическиеЛицаГруппа_Получение(ПравилаОбработкиДанных);
	КонецЕсли;
КонецПроцедуры

#Область Отправка
#Область Документ_АвансовыйОтчет_Отправка
Процедура ДобавитьПОД_Документ_АвансовыйОтчет_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_АвансовыйОтчет_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.АвансовыйОтчет;
	ПравилоОбработки.ПриОбработке = "ПОД_Документ_АвансовыйОтчет_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных = Истина;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_АвансовыйОтчет_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_АвансовыйОтчет_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если КомпонентыОбмена.УзелКорреспондента.ВариантНастройки = "ОбменЗУПБП"   
		ИЛИ КомпонентыОбмена.УзелКорреспондента.ВариантНастройки = "ОбменЗУП31БП"
		ИЛИ КомпонентыОбмена.УзелКорреспондента.ВариантНастройки = "ОбменУНФБП" Тогда
		ИспользованиеПКО.Документ_АвансовыйОтчет_Отправка = Ложь;
	Иначе
		ИспользованиеПКО.Документ_АвансовыйОтчет_Отправка = Истина;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ВозвратТоваровОтПокупателя_Отправка
Процедура ДобавитьПОД_Документ_ВозвратТоваровОтПокупателя_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ВозвратТоваровОтПокупателя_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ВозвратТоваровОтПокупателя;
	ПравилоОбработки.ПриОбработке = "ПОД_Документ_ВозвратТоваровОтПокупателя_Отправка_ПриОбработке";
	ПравилоОбработки.ВыборкаДанных = "ПОД_Документ_ВозвратТоваровОтПокупателя_Отправка_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных = Истина;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ВозвратТоваровОтПокупателя_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_ВозвратТоваровОтПокупателя_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если КомпонентыОбмена.УзелКорреспондента.ВариантНастройки = "ОбменЗУПБП"   
		ИЛИ КомпонентыОбмена.УзелКорреспондента.ВариантНастройки = "ОбменЗУП31БП"
		ИЛИ КомпонентыОбмена.УзелКорреспондента.ВариантНастройки = "ОбменУНФБП" Тогда
		ИспользованиеПКО.Документ_ВозвратТоваровОтПокупателя_Отправка = Ложь;
	Иначе
		ИспользованиеПКО.Документ_ВозвратТоваровОтПокупателя_Отправка = Истина;
	КонецЕсли;
КонецПроцедуры

Функция ПОД_Документ_ВозвратТоваровОтПокупателя_Отправка_ВыборкаДанных(КомпонентыОбмена)
	МассивВыборки = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Док.Ссылка
		|ИЗ
		|	Документ.ВозвратТоваровОтПокупателя КАК Док
		|ГДЕ
		|	Док.Проведен
		|	И Док.Дата >= &ДатаНачала 
		|	И Док.Дата <= &ДатаОкончания";
	
	Запрос.УстановитьПараметр("ДатаНачала", НачалоДня(КомпонентыОбмена.ПараметрыКонвертации.ДатаОстатков));
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(КомпонентыОбмена.ПараметрыКонвертации.ДатаОкончанияПериодаВыгрузкиДокументов));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		МассивВыборки.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат МассивВыборки;
КонецФункции
#КонецОбласти
#Область Документ_ВозвратТоваровПоставщику_Отправка
Процедура ДобавитьПОД_Документ_ВозвратТоваровПоставщику_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ВозвратТоваровПоставщику_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ВозвратТоваровПоставщику;
	ПравилоОбработки.ПриОбработке = "ПОД_Документ_ВозвратТоваровПоставщику_Отправка_ПриОбработке";
	ПравилоОбработки.ВыборкаДанных = "ПОД_Документ_ВозвратТоваровПоставщику_Отправка_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных = Истина;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ВозвратТоваровПоставщику_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_ВозвратТоваровПоставщику_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Документ_ВозвратТоваровПоставщику_Отправка = Ложь;
	
	Если КомпонентыОбмена.УзелКорреспондента.ВариантНастройки <> "ОбменЗУПБП"    
		И КомпонентыОбмена.УзелКорреспондента.ВариантНастройки <> "ОбменЗУП31БП"
		И КомпонентыОбмена.УзелКорреспондента.ВариантНастройки <> "ОбменУНФБП" Тогда
		Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.Покупка И (Не ДанныеИБ.Товары.Количество() = 0) Тогда
			ИспользованиеПКО.Документ_ВозвратТоваровПоставщику_Отправка = Истина;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Функция ПОД_Документ_ВозвратТоваровПоставщику_Отправка_ВыборкаДанных(КомпонентыОбмена)
	МассивВыборки = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Док.Ссылка
		|ИЗ
		|	Документ.ВозвратТоваровПоставщику КАК Док
		|ГДЕ
		|	Док.Проведен
		|	И Док.Дата >= &ДатаНачала 
		|	И Док.Дата <= &ДатаОкончания";
	
	Запрос.УстановитьПараметр("ДатаНачала", НачалоДня(КомпонентыОбмена.ПараметрыКонвертации.ДатаОстатков));
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(КомпонентыОбмена.ПараметрыКонвертации.ДатаОкончанияПериодаВыгрузкиДокументов));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		МассивВыборки.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат МассивВыборки;
КонецФункции
#КонецОбласти
#Область Документ_НачислениеОценочныхОбязательств_ЗУП_От
Процедура ДобавитьПОД_Документ_НачислениеОценочныхОбязательств_ЗУП_От(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_НачислениеОценочныхОбязательств_ЗУП_От";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ОтражениеЗарплатыВБухучете;
	ПравилоОбработки.ПриОбработке = "ПОД_Документ_НачислениеОценочныхОбязательств_ЗУП_От_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_НачислениеОценочныхОбязательств_ЗУП_От");
КонецПроцедуры

Процедура ПОД_Документ_НачислениеОценочныхОбязательств_ЗУП_От_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если КомпонентыОбмена.УзелКорреспондента.ВариантНастройки = "ОбменЗУПБП" 
		ИЛИ КомпонентыОбмена.УзелКорреспондента.ВариантНастройки = "ОбменЗУП31БП" Тогда
		ИспользованиеПКО.Документ_НачислениеОценочныхОбязательств_ЗУП_От = Истина;
	Иначе
		ИспользованиеПКО.Документ_НачислениеОценочныхОбязательств_ЗУП_От = Ложь;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ОприходованиеТоваров_Отправка
Процедура ДобавитьПОД_Документ_ОприходованиеТоваров_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ОприходованиеТоваров_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ОприходованиеТоваров;
	ПравилоОбработки.ПриОбработке = "ПОД_Документ_ОприходованиеТоваров_Отправка_ПриОбработке";
	ПравилоОбработки.ВыборкаДанных = "ПОД_Документ_ОприходованиеТоваров_Отправка_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных = Истина;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОприходованиеТоваров_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_ОприходованиеТоваров_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если КомпонентыОбмена.УзелКорреспондента.ВариантНастройки = "ОбменЗУПБП"   
		ИЛИ КомпонентыОбмена.УзелКорреспондента.ВариантНастройки = "ОбменЗУП31БП"
		ИЛИ КомпонентыОбмена.УзелКорреспондента.ВариантНастройки = "ОбменУНФБП" Тогда
		ИспользованиеПКО.Документ_ОприходованиеТоваров_Отправка = Ложь;
	Иначе
		ИспользованиеПКО.Документ_ОприходованиеТоваров_Отправка = Истина;
	КонецЕсли;
КонецПроцедуры

Функция ПОД_Документ_ОприходованиеТоваров_Отправка_ВыборкаДанных(КомпонентыОбмена)
	МассивВыборки = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Док.Ссылка
		|ИЗ
		|	Документ.ОприходованиеТоваров КАК Док
		|ГДЕ
		|	Док.Проведен
		|	И Док.Дата >= &ДатаНачала 
		|	И Док.Дата <= &ДатаОкончания";
	
	Запрос.УстановитьПараметр("ДатаНачала", НачалоДня(КомпонентыОбмена.ПараметрыКонвертации.ДатаОстатков));
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(КомпонентыОбмена.ПараметрыКонвертации.ДатаОкончанияПериодаВыгрузкиДокументов));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		МассивВыборки.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат МассивВыборки;
КонецФункции
#КонецОбласти
#Область Документ_ОстаткиБезналичныхДенежныхСредств
Процедура ДобавитьПОД_Документ_ОстаткиБезналичныхДенежныхСредств(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ОстаткиБезналичныхДенежныхСредств";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Неопределено;
	ПравилоОбработки.ПриОбработке = "ПОД_Документ_ОстаткиБезналичныхДенежныхСредств_ПриОбработке";
	ПравилоОбработки.ВыборкаДанных = "ПОД_Документ_ОстаткиБезналичныхДенежныхСредств_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных = Истина;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОстаткиБезналичныхДенежныхСредств");
КонецПроцедуры

Процедура ПОД_Документ_ОстаткиБезналичныхДенежныхСредств_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если КомпонентыОбмена.УзелКорреспондента.ВариантНастройки = "ОбменЗУПБП"   
		ИЛИ КомпонентыОбмена.УзелКорреспондента.ВариантНастройки = "ОбменЗУП31БП"
		ИЛИ КомпонентыОбмена.УзелКорреспондента.ВариантНастройки = "ОбменУНФБП" Тогда
		ИспользованиеПКО.Документ_ОстаткиБезналичныхДенежныхСредств = Ложь;
	Иначе
		ИспользованиеПКО.Документ_ОстаткиБезналичныхДенежныхСредств = Истина;
	КонецЕсли;
КонецПроцедуры

Функция ПОД_Документ_ОстаткиБезналичныхДенежныхСредств_ВыборкаДанных(КомпонентыОбмена)
	ДатаОстатков = КомпонентыОбмена.ПараметрыКонвертации.ДатаОстатков;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТиповойОстатки.Счет,
	|	ТиповойОстатки.Организация КАК Организация,
	|	ТиповойОстатки.Субконто1 КАК БанковскийСчет,
	|	ЕСТЬNULL(ТиповойОстатки.Валюта, &ВалютаРегл) КАК Валюта,
	|	ТиповойОстатки.СуммаОстаток КАК СуммаРегл,
	|	ВЫБОР
	|		КОГДА ТиповойОстатки.ВалютнаяСуммаОстаток <> 0
	|			ТОГДА ТиповойОстатки.ВалютнаяСуммаОстаток
	|		ИНАЧЕ ТиповойОстатки.СуммаОстаток
	|	КОНЕЦ КАК Сумма,
	|	ВЫБОР
	|		КОГДА ТиповойОстатки.Счет = ЗНАЧЕНИЕ(ПланСчетов.Типовой.ДенежныеСредстваНаТекущихБанковскихСчетах)
	|			ТОГДА ""Расчетный""
	|		КОГДА ТиповойОстатки.Счет = ЗНАЧЕНИЕ(ПланСчетов.Типовой.ДенежныеСредстваНаКартСчетах)
	|			ТОГДА ""Аккредитивы""
	|		КОГДА ТиповойОстатки.Счет = ЗНАЧЕНИЕ(ПланСчетов.Типовой.ДенежныеСредстваНаСберегательныхСчетах)
	|			ТОГДА ""Депозитный""
	|		КОГДА ТиповойОстатки.Счет  = ЗНАЧЕНИЕ(ПланСчетов.Типовой.ПрочиеДенежныеСредства)
	|			ТОГДА ""Иной""
	|		ИНАЧЕ ""Иной""
	|	КОНЕЦ КАК ВидБанковскогоСчета
	|ИЗ
	|	РегистрБухгалтерии.Типовой.Остатки(
	|			&ДатаОстатков,
	|			Счет В (ЗНАЧЕНИЕ(ПланСчетов.Типовой.ДенежныеСредстваНаТекущихБанковскихСчетах), ЗНАЧЕНИЕ(ПланСчетов.Типовой.ДенежныеСредстваНаКартСчетах), ЗНАЧЕНИЕ(ПланСчетов.Типовой.ДенежныеСредстваНаСберегательныхСчетах), ЗНАЧЕНИЕ(ПланСчетов.Типовой.ПрочиеДенежныеСредства))
	|			,
	|			,
	|			) КАК ТиповойОстатки
	|ГДЕ
	|	ТиповойОстатки.СуммаОстаток > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТиповойОстатки.Организация,
	|	ЕСТЬNULL(ТиповойОстатки.Валюта, &ВалютаРегл),
	|	ТиповойОстатки.Субконто1
	|ИТОГИ ПО
	|	Организация";
	
	Запрос.УстановитьПараметр("ДатаОстатков", ДатаОстатков);
	Запрос.УстановитьПараметр("ВалютаРегл", Константы.ВалютаРегламентированногоУчета.Получить());
	МассивВыборки = Новый Массив;
	ВыборкаОрганизации = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаОрганизации.Следующий() Цикл
		
		ДанныеИБ = Новый Структура("Дата, Организация, ДенежныеСредства");
		ДанныеИБ.Дата        = ДатаОстатков;
		ДанныеИБ.Организация = ВыборкаОрганизации.Организация;
		
		ДенежныеСредства = Новый ТаблицаЗначений;
		Колонки = ДенежныеСредства.Колонки;
		Колонки.Добавить("ФизическоеЛицо");
		Колонки.Добавить("Валюта");
		Колонки.Добавить("ВидБанковскогоСчета");
		Колонки.Добавить("БанковскийСчет");
		Колонки.Добавить("СуммаРегл");
		Колонки.Добавить("Сумма");
		
		ВыборкаДетальная = ВыборкаОрганизации.Выбрать();
		Пока ВыборкаДетальная.Следующий() Цикл
			Если ВыборкаДетальная.Сумма > 0 Тогда
				НоваяСтрока = ДенежныеСредства.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетальная);
			КонецЕсли;
		КонецЦикла;
		
		ДанныеИБ.ДенежныеСредства = ДенежныеСредства;
		
		МассивВыборки.Добавить(ДанныеИБ);
		
	КонецЦикла;
	
	Возврат МассивВыборки;
КонецФункции
#КонецОбласти
#Область Документ_ОстаткиЗадолженностиПодотчетныхЛиц
Процедура ДобавитьПОД_Документ_ОстаткиЗадолженностиПодотчетныхЛиц(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ОстаткиЗадолженностиПодотчетныхЛиц";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Неопределено;
	ПравилоОбработки.ПриОбработке = "ПОД_Документ_ОстаткиЗадолженностиПодотчетныхЛиц_ПриОбработке";
	ПравилоОбработки.ВыборкаДанных = "ПОД_Документ_ОстаткиЗадолженностиПодотчетныхЛиц_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных = Истина;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОстаткиЗадолженностиПодотчетныхЛиц");
КонецПроцедуры

Процедура ПОД_Документ_ОстаткиЗадолженностиПодотчетныхЛиц_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если КомпонентыОбмена.УзелКорреспондента.ВариантНастройки = "ОбменЗУПБП"   
		ИЛИ КомпонентыОбмена.УзелКорреспондента.ВариантНастройки = "ОбменЗУП31БП" 
		ИЛИ КомпонентыОбмена.УзелКорреспондента.ВариантНастройки = "ОбменУНФБП" Тогда
		ИспользованиеПКО.Документ_ОстаткиЗадолженностиПодотчетныхЛиц = Ложь;
	Иначе
		ИспользованиеПКО.Документ_ОстаткиЗадолженностиПодотчетныхЛиц = Истина;
	КонецЕсли;
КонецПроцедуры

Функция ПОД_Документ_ОстаткиЗадолженностиПодотчетныхЛиц_ВыборкаДанных(КомпонентыОбмена)
	ДатаОстатков = КомпонентыОбмена.ПараметрыКонвертации.ДатаОстатков;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТиповойДвиженияССубконто.СубконтоДт1 КАК ФизическоеЛицо,
	|	ТиповойДвиженияССубконто.Период КАК ДатаПоследнегоДвижения,
	|	ТиповойДвиженияССубконто.СчетДт КАК СчетДт,
	|	ТиповойДвиженияССубконто.Регистратор
	|ПОМЕСТИТЬ ДокументыПоДтВсе
	|ИЗ
	|	РегистрБухгалтерии.Типовой.ДвиженияССубконто(
	|			,
	|			&ДатаОстатков,
	|			СчетДт В (ЗНАЧЕНИЕ(ПланСчетов.Типовой.КраткосрочнаяЗадолженностьПодотчетныхЛиц), ЗНАЧЕНИЕ(ПланСчетов.Типовой.ДолгосрочнаяЗадолженностьПодотчетныхЛиц), ЗНАЧЕНИЕ(ПланСчетов.Типовой.КраткосрочнаяЗадолженностьПередПодотчетнымиЛицами), ЗНАЧЕНИЕ(ПланСчетов.Типовой.ДолгосрочнаяЗадолженностьПередПодотчетнымиЛицами))
	|				И (Регистратор ССЫЛКА Документ.РасходныйКассовыйОрдер
	|					ИЛИ Регистратор ССЫЛКА Документ.ПлатежноеПоручениеИсходящее),
	|			,
	|			) КАК ТиповойДвиженияССубконто
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизическоеЛицо,
	|	ДатаПоследнегоДвижения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументыПоДтВсе.ФизическоеЛицо КАК ФизическоеЛицо,
	|	МАКСИМУМ(ДокументыПоДтВсе.ДатаПоследнегоДвижения) КАК ДатаПоследнегоДвижения
	|ПОМЕСТИТЬ ДатыПоследнихДокументовПоДт
	|ИЗ
	|	ДокументыПоДтВсе КАК ДокументыПоДтВсе
	|
	|СГРУППИРОВАТЬ ПО
	|	ДокументыПоДтВсе.ФизическоеЛицо
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизическоеЛицо,
	|	ДатаПоследнегоДвижения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДатыПоследнихДокументовПоДт.ФизическоеЛицо КАК ФизическоеЛицо,
	|	МАКСИМУМ(ДокументыПоДтВсе.Регистратор) КАК Регистратор
	|ПОМЕСТИТЬ ПоследниеДокументыПоДт
	|ИЗ
	|	ДатыПоследнихДокументовПоДт КАК ДатыПоследнихДокументовПоДт
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДокументыПоДтВсе КАК ДокументыПоДтВсе
	|		ПО ДатыПоследнихДокументовПоДт.ДатаПоследнегоДвижения = ДокументыПоДтВсе.ДатаПоследнегоДвижения
	|			И ДатыПоследнихДокументовПоДт.ФизическоеЛицо = ДокументыПоДтВсе.ФизическоеЛицо
	|
	|СГРУППИРОВАТЬ ПО
	|	ДатыПоследнихДокументовПоДт.ФизическоеЛицо
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизическоеЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТиповойОстатки.Счет,
	|	ТиповойОстатки.Субконто1 КАК ФизическоеЛицо,
	|	ТиповойОстатки.Организация КАК Организация,
	|	ЕСТЬNULL(ТиповойОстатки.Валюта, &ВалютаРегл) КАК ВалютаВзаиморасчетов,
	|	ТиповойОстатки.СуммаОстатокДт КАК СуммаРегл,
	|	ВЫБОР
	|		КОГДА ТиповойОстатки.ВалютнаяСуммаОстатокДт = 0
	|			ТОГДА ТиповойОстатки.СуммаОстатокДт
	|		ИНАЧЕ ТиповойОстатки.ВалютнаяСуммаОстатокДт
	|	КОНЕЦ КАК Сумма,
	|	ЕСТЬNULL(ПоследниеДокументыПоДт.Регистратор, НЕОПРЕДЕЛЕНО) КАК ДокументРасчетов,
	|	ПоследниеДокументыПоДт.Регистратор.Дата КАК ДатаРасчетногоДокумента, 
	|	ПоследниеДокументыПоДт.Регистратор.Номер КАК НомерРасчетногоДокумента
	|ИЗ
	|	РегистрБухгалтерии.Типовой.Остатки(&ДатаОстатков, Счет В (ЗНАЧЕНИЕ(ПланСчетов.Типовой.КраткосрочнаяЗадолженностьПодотчетныхЛиц), ЗНАЧЕНИЕ(ПланСчетов.Типовой.ДолгосрочнаяЗадолженностьПодотчетныхЛиц), ЗНАЧЕНИЕ(ПланСчетов.Типовой.КраткосрочнаяЗадолженностьПередПодотчетнымиЛицами), ЗНАЧЕНИЕ(ПланСчетов.Типовой.ДолгосрочнаяЗадолженностьПередПодотчетнымиЛицами)), , ) КАК ТиповойОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПоследниеДокументыПоДт КАК ПоследниеДокументыПоДт
	|		ПО ТиповойОстатки.Субконто1 = ПоследниеДокументыПоДт.ФизическоеЛицо
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТиповойОстатки.Организация,
	|	ФизическоеЛицо
	|ИТОГИ ПО
	|	Организация";
	
	Запрос.УстановитьПараметр("ДатаОстатков", ДатаОстатков);
	Запрос.УстановитьПараметр("ВалютаРегл", Константы.ВалютаРегламентированногоУчета.Получить());
	МассивВыборки = Новый Массив;
	ВыборкаОрганизации = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаОрганизации.Следующий() Цикл
		
		ДанныеИБ = Новый Структура("Дата, Организация, Расчеты");
		ДанныеИБ.Дата = ДатаОстатков;
		ДанныеИБ.Организация = ВыборкаОрганизации.Организация;
		
		Расчеты = Новый ТаблицаЗначений;
		Колонки = Расчеты.Колонки;
		Колонки.Добавить("ФизическоеЛицо");
		Колонки.Добавить("ВалютаВзаиморасчетов");
		Колонки.Добавить("СуммаРегл");
		Колонки.Добавить("Сумма");
		Колонки.Добавить("ДокументРасчетов");
		
		ВыборкаДетальная = ВыборкаОрганизации.Выбрать();
		Пока ВыборкаДетальная.Следующий() Цикл
			
			НоваяСтрока = Расчеты.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетальная);
			
		КонецЦикла;
		
		ДанныеИБ.Расчеты = Расчеты;
		
		МассивВыборки.Добавить(ДанныеИБ);
		
	КонецЦикла;
	
	Возврат МассивВыборки;
КонецФункции
#КонецОбласти
#Область Документ_ОстаткиКредитыЗаймы
Процедура ДобавитьПОД_Документ_ОстаткиКредитыЗаймы(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ОстаткиКредитыЗаймы";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Неопределено;
	ПравилоОбработки.ПриОбработке = "ПОД_Документ_ОстаткиКредитыЗаймы_ПриОбработке";
	ПравилоОбработки.ВыборкаДанных = "ПОД_Документ_ОстаткиКредитыЗаймы_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных = Истина;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОстаткиКредитыЗаймы");
КонецПроцедуры

Процедура ПОД_Документ_ОстаткиКредитыЗаймы_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если КомпонентыОбмена.УзелКорреспондента.ВариантНастройки = "ОбменЗУПБП"   
		ИЛИ КомпонентыОбмена.УзелКорреспондента.ВариантНастройки = "ОбменЗУП31БП" 
		ИЛИ КомпонентыОбмена.УзелКорреспондента.ВариантНастройки = "ОбменУНФБП" Тогда
		ИспользованиеПКО.Документ_ОстаткиКредитыЗаймы = Ложь;
	Иначе
		ИспользованиеПКО.Документ_ОстаткиКредитыЗаймы = Истина;
	КонецЕсли;
КонецПроцедуры

Функция ПОД_Документ_ОстаткиКредитыЗаймы_ВыборкаДанных(КомпонентыОбмена)
	Если Не ЗначениеЗаполнено(КомпонентыОбмена.ПараметрыКонвертации.ТаблицаДолгиАвансыКредитыЗаймы) Тогда
		ЗаполнениеОстатковДолговАвансовКредитовЗаймов(КомпонентыОбмена.ПараметрыКонвертации);
	КонецЕсли;
	
	МассивВыборки = Новый Массив;
	
	ЗаполнитьМассивВыборкиДолгиАвансыКредитыЗаймы(МассивВыборки, КомпонентыОбмена.ПараметрыКонвертации, "КредитыЗаймы");
	
	Возврат МассивВыборки;
КонецФункции
#КонецОбласти
#Область Документ_ОстаткиНаличныхДенежныхСредств
Процедура ДобавитьПОД_Документ_ОстаткиНаличныхДенежныхСредств(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ОстаткиНаличныхДенежныхСредств";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Неопределено;
	ПравилоОбработки.ПриОбработке = "ПОД_Документ_ОстаткиНаличныхДенежныхСредств_ПриОбработке";
	ПравилоОбработки.ВыборкаДанных = "ПОД_Документ_ОстаткиНаличныхДенежныхСредств_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных = Истина;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОстаткиНаличныхДенежныхСредств");
КонецПроцедуры

Процедура ПОД_Документ_ОстаткиНаличныхДенежныхСредств_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если КомпонентыОбмена.УзелКорреспондента.ВариантНастройки = "ОбменЗУПБП"   
		ИЛИ КомпонентыОбмена.УзелКорреспондента.ВариантНастройки = "ОбменЗУП31БП" 
		ИЛИ КомпонентыОбмена.УзелКорреспондента.ВариантНастройки = "ОбменУНФБП" Тогда
		ИспользованиеПКО.Документ_ОстаткиНаличныхДенежныхСредств = Ложь;
	Иначе
		ИспользованиеПКО.Документ_ОстаткиНаличныхДенежныхСредств = Истина;
	КонецЕсли;
КонецПроцедуры

Функция ПОД_Документ_ОстаткиНаличныхДенежныхСредств_ВыборкаДанных(КомпонентыОбмена)
	ДатаОстатков = КомпонентыОбмена.ПараметрыКонвертации.ДатаОстатков;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Таб.Организация КАК Организация,
	|	Таб.Валюта,
	|	Таб.СуммаРегл,
	|	Таб.Сумма
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТиповойОстатки.Организация КАК Организация,
	|		ЕСТЬNULL(ТиповойОстатки.Валюта, &ВалютаРегл) КАК Валюта,
	|		ТиповойОстатки.СуммаОстаток КАК СуммаРегл,
	|		ВЫБОР
	|			КОГДА ТиповойОстатки.ВалютнаяСуммаОстаток <> 0
	|				ТОГДА ТиповойОстатки.ВалютнаяСуммаОстаток
	|			ИНАЧЕ ТиповойОстатки.СуммаОстаток
	|		КОНЕЦ КАК Сумма
	|	ИЗ
	|		РегистрБухгалтерии.Типовой.Остатки(
	|				&ДатаОстатков,
	|				Счет = ЗНАЧЕНИЕ(ПланСчетов.Типовой.ДенежныеСредстваВКассе),
	|				,
	|				) КАК ТиповойОстатки
	|	ГДЕ
	|		ТиповойОстатки.СуммаОстаток > 0) КАК Таб
	|
	|УПОРЯДОЧИТЬ ПО
	|	Таб.Организация,
	|	ЕСТЬNULL(Таб.Валюта, &ВалютаРегл)
	|ИТОГИ ПО
	|	Организация";
	
	Запрос.УстановитьПараметр("ДатаОстатков", ДатаОстатков);
	Запрос.УстановитьПараметр("ВалютаРегл", Константы.ВалютаРегламентированногоУчета.Получить());
	МассивВыборки = Новый Массив;
	ВыборкаОрганизации = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаОрганизации.Следующий() Цикл
		
		ДанныеИБ = Новый Структура("Дата, Организация, ДенежныеСредства");
		ДанныеИБ.Дата = ДатаОстатков;
		ДанныеИБ.Организация = ВыборкаОрганизации.Организация;
		
		ДенежныеСредства = Новый ТаблицаЗначений;
		Колонки = ДенежныеСредства.Колонки;
		Колонки.Добавить("ФизическоеЛицо");
		Колонки.Добавить("Валюта");	
		Колонки.Добавить("СуммаРегл");
		Колонки.Добавить("Сумма");
		
		ВыборкаДетальная = ВыборкаОрганизации.Выбрать();
		Пока ВыборкаДетальная.Следующий() Цикл
			
			НоваяСтрока = ДенежныеСредства.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетальная);
			
		КонецЦикла;
		
		Если ДенежныеСредства.Количество() > 0 Тогда
			
			ДанныеИБ.ДенежныеСредства = ДенежныеСредства;
			
			МассивВыборки.Добавить(ДанныеИБ);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат МассивВыборки;
КонецФункции
#КонецОбласти
#Область Документ_ОстаткиПерерасходаПодотчетныхЛиц
Процедура ДобавитьПОД_Документ_ОстаткиПерерасходаПодотчетныхЛиц(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ОстаткиПерерасходаПодотчетныхЛиц";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Неопределено;
	ПравилоОбработки.ПриОбработке = "ПОД_Документ_ОстаткиПерерасходаПодотчетныхЛиц_ПриОбработке";
	ПравилоОбработки.ВыборкаДанных = "ПОД_Документ_ОстаткиПерерасходаПодотчетныхЛиц_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных = Истина;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОстаткиПерерасходаПодотчетныхЛиц");
КонецПроцедуры

Процедура ПОД_Документ_ОстаткиПерерасходаПодотчетныхЛиц_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если КомпонентыОбмена.УзелКорреспондента.ВариантНастройки = "ОбменЗУПБП"   
		ИЛИ КомпонентыОбмена.УзелКорреспондента.ВариантНастройки = "ОбменЗУП31БП" 
		ИЛИ КомпонентыОбмена.УзелКорреспондента.ВариантНастройки = "ОбменУНФБП" Тогда
		ИспользованиеПКО.Документ_ОстаткиПерерасходаПодотчетныхЛиц = Ложь;
	Иначе
		ИспользованиеПКО.Документ_ОстаткиПерерасходаПодотчетныхЛиц = Истина;
	КонецЕсли;
КонецПроцедуры

Функция ПОД_Документ_ОстаткиПерерасходаПодотчетныхЛиц_ВыборкаДанных(КомпонентыОбмена)
	ДатаОстатков = КомпонентыОбмена.ПараметрыКонвертации.ДатаОстатков;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТиповойДвиженияССубконто.СубконтоКт1 КАК ФизическоеЛицо,
	|	ТиповойДвиженияССубконто.Период КАК ДатаПоследнегоДвижения,
	|	ТиповойДвиженияССубконто.СчетКт КАК СчетКт,
	|	ТиповойДвиженияССубконто.Регистратор
	|ПОМЕСТИТЬ ДокументыПоКтВсе
	|ИЗ
	|	РегистрБухгалтерии.Типовой.ДвиженияССубконто(
	|			,
	|			&ДатаОстатков,
	|			СчетКт (ЗНАЧЕНИЕ(ПланСчетов.Типовой.КраткосрочнаяЗадолженностьПодотчетныхЛиц), ЗНАЧЕНИЕ(ПланСчетов.Типовой.ДолгосрочнаяЗадолженностьПодотчетныхЛиц), ЗНАЧЕНИЕ(ПланСчетов.Типовой.КраткосрочнаяЗадолженностьПередПодотчетнымиЛицами), ЗНАЧЕНИЕ(ПланСчетов.Типовой.ДолгосрочнаяЗадолженностьПередПодотчетнымиЛицами))
	|				И Регистратор ССЫЛКА Документ.АвансовыйОтчет,
	|			,
	|			) КАК ТиповойДвиженияССубконто
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизическоеЛицо,
	|	ДатаПоследнегоДвижения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументыПоКтВсе.ФизическоеЛицо КАК ФизическоеЛицо,
	|	МАКСИМУМ(ДокументыПоКтВсе.ДатаПоследнегоДвижения) КАК ДатаПоследнегоДвижения
	|ПОМЕСТИТЬ ДатыПоследнихДокументовПоКт
	|ИЗ
	|	ДокументыПоКтВсе КАК ДокументыПоКтВсе
	|
	|СГРУППИРОВАТЬ ПО
	|	ДокументыПоКтВсе.ФизическоеЛицо
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизическоеЛицо,
	|	ДатаПоследнегоДвижения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДатыПоследнихДокументовПоКт.ФизическоеЛицо КАК ФизическоеЛицо,
	|	МАКСИМУМ(ДокументыПоКтВсе.Регистратор) КАК Регистратор
	|ПОМЕСТИТЬ ПоследниеДокументыПоКт
	|ИЗ
	|	ДатыПоследнихДокументовПоКт КАК ДатыПоследнихДокументовПоКт
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДокументыПоКтВсе КАК ДокументыПоКтВсе
	|		ПО ДатыПоследнихДокументовПоКт.ДатаПоследнегоДвижения = ДокументыПоКтВсе.ДатаПоследнегоДвижения
	|			И ДатыПоследнихДокументовПоКт.ФизическоеЛицо = ДокументыПоКтВсе.ФизическоеЛицо
	|
	|СГРУППИРОВАТЬ ПО
	|	ДатыПоследнихДокументовПоКт.ФизическоеЛицо
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизическоеЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТиповойОстатки.Счет,
	|	ТиповойОстатки.Субконто1 КАК ФизическоеЛицо,
	|	ТиповойОстатки.Организация КАК Организация,
	|	ЕСТЬNULL(ТиповойОстатки.Валюта, &ВалютаРегл) КАК ВалютаВзаиморасчетов,
	|	ТиповойОстатки.СуммаОстатокКт КАК СуммаРегл,
	|	ВЫБОР
	|		КОГДА ТиповойОстатки.ВалютнаяСуммаОстатокКт = 0
	|			ТОГДА ТиповойОстатки.СуммаОстатокКт
	|		ИНАЧЕ ТиповойОстатки.ВалютнаяСуммаОстатокКт
	|	КОНЕЦ КАК Сумма,
	|	ЕСТЬNULL(ПоследниеДокументыПоКт.Регистратор, НЕОПРЕДЕЛЕНО) КАК ДокументРасчетов
	|ИЗ
	|	РегистрБухгалтерии.Типовой.Остатки(&ДатаОстатков, Счет (ЗНАЧЕНИЕ(ПланСчетов.Типовой.КраткосрочнаяЗадолженностьПодотчетныхЛиц), ЗНАЧЕНИЕ(ПланСчетов.Типовой.ДолгосрочнаяЗадолженностьПодотчетныхЛиц), ЗНАЧЕНИЕ(ПланСчетов.Типовой.КраткосрочнаяЗадолженностьПередПодотчетнымиЛицами), ЗНАЧЕНИЕ(ПланСчетов.Типовой.ДолгосрочнаяЗадолженностьПередПодотчетнымиЛицами)), , ) КАК ТиповойОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПоследниеДокументыПоКт КАК ПоследниеДокументыПоКт
	|		ПО ТиповойОстатки.Субконто1 = ПоследниеДокументыПоКт.ФизическоеЛицо
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТиповойОстатки.Организация,
	|	ФизическоеЛицо
	|ИТОГИ ПО
	|	Организация";
	
	Запрос.УстановитьПараметр("ДатаОстатков", ДатаОстатков);
	Запрос.УстановитьПараметр("ВалютаРегл", Константы.ВалютаРегламентированногоУчета.Получить());
	МассивВыборки = Новый Массив;
	ВыборкаОрганизации = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаОрганизации.Следующий() Цикл
		
		ДанныеИБ = Новый Структура("Дата, Организация, Расчеты");
		ДанныеИБ.Дата = ДатаОстатков;
		ДанныеИБ.Организация = ВыборкаОрганизации.Организация;
		
		Расчеты = Новый ТаблицаЗначений;
		Колонки = Расчеты.Колонки;
		Колонки.Добавить("ФизическоеЛицо");
		Колонки.Добавить("ВалютаВзаиморасчетов");
		Колонки.Добавить("СуммаРегл");
		Колонки.Добавить("Сумма");
		Колонки.Добавить("ДокументРасчетов");
		
		ВыборкаДетальная = ВыборкаОрганизации.Выбрать();
		Пока ВыборкаДетальная.Следующий() Цикл
			
			НоваяСтрока = Расчеты.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетальная);
			
		КонецЦикла;
		
		ДанныеИБ.Расчеты = Расчеты;
		
		МассивВыборки.Добавить(ДанныеИБ);
		
	КонецЦикла;
	
	Возврат МассивВыборки;
КонецФункции
#КонецОбласти
#Область Документ_ОстаткиРасчетыСПокупателямиАвансы
Процедура ДобавитьПОД_Документ_ОстаткиРасчетыСПокупателямиАвансы(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ОстаткиРасчетыСПокупателямиАвансы";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Неопределено;
	ПравилоОбработки.ПриОбработке = "ПОД_Документ_ОстаткиРасчетыСПокупателямиАвансы_ПриОбработке";
	ПравилоОбработки.ВыборкаДанных = "ПОД_Документ_ОстаткиРасчетыСПокупателямиАвансы_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных = Истина;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОстаткиРасчетыСПокупателямиАвансы");
КонецПроцедуры

Процедура ПОД_Документ_ОстаткиРасчетыСПокупателямиАвансы_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если КомпонентыОбмена.УзелКорреспондента.ВариантНастройки = "ОбменЗУПБП"   
		ИЛИ КомпонентыОбмена.УзелКорреспондента.ВариантНастройки = "ОбменЗУП31БП" 
		ИЛИ КомпонентыОбмена.УзелКорреспондента.ВариантНастройки = "ОбменУНФБП" Тогда
		ИспользованиеПКО.Документ_ОстаткиРасчетыСПокупателямиАвансы = Ложь;
	Иначе
		ИспользованиеПКО.Документ_ОстаткиРасчетыСПокупателямиАвансы = Истина;
	КонецЕсли;
КонецПроцедуры

Функция ПОД_Документ_ОстаткиРасчетыСПокупателямиАвансы_ВыборкаДанных(КомпонентыОбмена)
	Если Не ЗначениеЗаполнено(КомпонентыОбмена.ПараметрыКонвертации.ТаблицаДолгиАвансыКредитыЗаймы) Тогда
		ЗаполнениеОстатковДолговАвансовКредитовЗаймов(КомпонентыОбмена.ПараметрыКонвертации);
	КонецЕсли;
	
	МассивВыборки = Новый Массив;
	
	ЗаполнитьМассивВыборкиДолгиАвансыКредитыЗаймы(МассивВыборки, КомпонентыОбмена.ПараметрыКонвертации, "АвансыКлиенты");
	
	Возврат МассивВыборки;
КонецФункции
#КонецОбласти
#Область Документ_ОстаткиРасчетыСПокупателямиДолги
Процедура ДобавитьПОД_Документ_ОстаткиРасчетыСПокупателямиДолги(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ОстаткиРасчетыСПокупателямиДолги";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Неопределено;
	ПравилоОбработки.ПриОбработке = "ПОД_Документ_ОстаткиРасчетыСПокупателямиДолги_ПриОбработке";
	ПравилоОбработки.ВыборкаДанных = "ПОД_Документ_ОстаткиРасчетыСПокупателямиДолги_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных = Истина;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОстаткиРасчетыСПокупателямиДолги");
КонецПроцедуры

Процедура ПОД_Документ_ОстаткиРасчетыСПокупателямиДолги_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если КомпонентыОбмена.УзелКорреспондента.ВариантНастройки = "ОбменЗУПБП"   
		ИЛИ КомпонентыОбмена.УзелКорреспондента.ВариантНастройки = "ОбменЗУП31БП" 
		ИЛИ КомпонентыОбмена.УзелКорреспондента.ВариантНастройки = "ОбменУНФБП" Тогда
		ИспользованиеПКО.Документ_ОстаткиРасчетыСПокупателямиДолги = Ложь;
	Иначе
		ИспользованиеПКО.Документ_ОстаткиРасчетыСПокупателямиДолги = Истина;
	КонецЕсли;
КонецПроцедуры

Функция ПОД_Документ_ОстаткиРасчетыСПокупателямиДолги_ВыборкаДанных(КомпонентыОбмена)
	Если Не ЗначениеЗаполнено(КомпонентыОбмена.ПараметрыКонвертации.ТаблицаДолгиАвансыКредитыЗаймы) Тогда
		ЗаполнениеОстатковДолговАвансовКредитовЗаймов(КомпонентыОбмена.ПараметрыКонвертации);
	КонецЕсли;
	
	МассивВыборки = Новый Массив;
	
	ЗаполнитьМассивВыборкиДолгиАвансыКредитыЗаймы(МассивВыборки, КомпонентыОбмена.ПараметрыКонвертации, "ДолгиКлиенты");
	
	Возврат МассивВыборки;
КонецФункции
#КонецОбласти
#Область Документ_ОстаткиРасчетыСПоставщикамиАвансы
Процедура ДобавитьПОД_Документ_ОстаткиРасчетыСПоставщикамиАвансы(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ОстаткиРасчетыСПоставщикамиАвансы";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Неопределено;
	ПравилоОбработки.ПриОбработке = "ПОД_Документ_ОстаткиРасчетыСПоставщикамиАвансы_ПриОбработке";
	ПравилоОбработки.ВыборкаДанных = "ПОД_Документ_ОстаткиРасчетыСПоставщикамиАвансы_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных = Истина;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОстаткиРасчетыСПоставщикамиАвансы");
КонецПроцедуры

Процедура ПОД_Документ_ОстаткиРасчетыСПоставщикамиАвансы_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если КомпонентыОбмена.УзелКорреспондента.ВариантНастройки = "ОбменЗУПБП"   
		ИЛИ КомпонентыОбмена.УзелКорреспондента.ВариантНастройки = "ОбменЗУП31БП" 
		ИЛИ КомпонентыОбмена.УзелКорреспондента.ВариантНастройки = "ОбменУНФБП" Тогда
		ИспользованиеПКО.Документ_ОстаткиРасчетыСПоставщикамиАвансы = Ложь;
	Иначе
		ИспользованиеПКО.Документ_ОстаткиРасчетыСПоставщикамиАвансы = Истина;
	КонецЕсли;
КонецПроцедуры

Функция ПОД_Документ_ОстаткиРасчетыСПоставщикамиАвансы_ВыборкаДанных(КомпонентыОбмена)
	Если Не ЗначениеЗаполнено(КомпонентыОбмена.ПараметрыКонвертации.ТаблицаДолгиАвансыКредитыЗаймы) Тогда
		ЗаполнениеОстатковДолговАвансовКредитовЗаймов(КомпонентыОбмена.ПараметрыКонвертации);
	КонецЕсли;
	
	МассивВыборки = Новый Массив;
	
	ЗаполнитьМассивВыборкиДолгиАвансыКредитыЗаймы(МассивВыборки, КомпонентыОбмена.ПараметрыКонвертации, "АвансыПоставщики");
	
	Возврат МассивВыборки;
КонецФункции
#КонецОбласти
#Область Документ_ОстаткиРасчетыСПоставщикамиДолги
Процедура ДобавитьПОД_Документ_ОстаткиРасчетыСПоставщикамиДолги(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ОстаткиРасчетыСПоставщикамиДолги";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Неопределено;
	ПравилоОбработки.ПриОбработке = "ПОД_Документ_ОстаткиРасчетыСПоставщикамиДолги_ПриОбработке";
	ПравилоОбработки.ВыборкаДанных = "ПОД_Документ_ОстаткиРасчетыСПоставщикамиДолги_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных = Истина;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОстаткиРасчетыСПоставщикамиДолги");
КонецПроцедуры

Процедура ПОД_Документ_ОстаткиРасчетыСПоставщикамиДолги_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если КомпонентыОбмена.УзелКорреспондента.ВариантНастройки = "ОбменЗУПБП"   
		ИЛИ КомпонентыОбмена.УзелКорреспондента.ВариантНастройки = "ОбменЗУП31БП" 
		ИЛИ КомпонентыОбмена.УзелКорреспондента.ВариантНастройки = "ОбменУНФБП" Тогда
		ИспользованиеПКО.Документ_ОстаткиРасчетыСПоставщикамиДолги = Ложь;
	Иначе
		ИспользованиеПКО.Документ_ОстаткиРасчетыСПоставщикамиДолги = Истина;
	КонецЕсли;
КонецПроцедуры

Функция ПОД_Документ_ОстаткиРасчетыСПоставщикамиДолги_ВыборкаДанных(КомпонентыОбмена)
	Если Не ЗначениеЗаполнено(КомпонентыОбмена.ПараметрыКонвертации.ТаблицаДолгиАвансыКредитыЗаймы) Тогда
		ЗаполнениеОстатковДолговАвансовКредитовЗаймов(КомпонентыОбмена.ПараметрыКонвертации);
	КонецЕсли;
	
	МассивВыборки = Новый Массив;
	
	ЗаполнитьМассивВыборкиДолгиАвансыКредитыЗаймы(МассивВыборки, КомпонентыОбмена.ПараметрыКонвертации, "ДолгиПоставщики");
	
	Возврат МассивВыборки;
КонецФункции
#КонецОбласти
#Область Документ_ОстаткиСобственныхТМЦ
Процедура ДобавитьПОД_Документ_ОстаткиСобственныхТМЦ(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ОстаткиСобственныхТМЦ";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Неопределено;
	ПравилоОбработки.ПриОбработке = "ПОД_Документ_ОстаткиСобственныхТМЦ_ПриОбработке";
	ПравилоОбработки.ВыборкаДанных = "ПОД_Документ_ОстаткиСобственныхТМЦ_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных = Истина;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОстаткиСобственныхТМЦ");
КонецПроцедуры

Процедура ПОД_Документ_ОстаткиСобственныхТМЦ_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если КомпонентыОбмена.УзелКорреспондента.ВариантНастройки = "ОбменЗУПБП"   
		ИЛИ КомпонентыОбмена.УзелКорреспондента.ВариантНастройки = "ОбменЗУП31БП" 
		ИЛИ КомпонентыОбмена.УзелКорреспондента.ВариантНастройки = "ОбменУНФБП" Тогда
		ИспользованиеПКО.Документ_ОстаткиСобственныхТМЦ = Ложь;
	Иначе
		ИспользованиеПКО.Документ_ОстаткиСобственныхТМЦ = Истина;
	КонецЕсли;
КонецПроцедуры

Функция ПОД_Документ_ОстаткиСобственныхТМЦ_ВыборкаДанных(КомпонентыОбмена)
	ДатаОстатков = КомпонентыОбмена.ПараметрыКонвертации.ДатаОстатков;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ *
		|ИЗ (ВЫБРАТЬ
		|	ТиповойОстатки.Субконто1 КАК Номенклатура,
		|	ТиповойОстатки.Организация,
		|	ТиповойОстатки.СуммаОстаток КАК Сумма,
		|	ТиповойОстатки.КоличествоОстаток КАК Количество,
		|	ТиповойОстатки.Счет,
		|	ТиповойОстатки.Субконто2 КАК ДокументПоступления,
		|	ТиповойОстатки.Субконто3 КАК Склад,
		|	ТиповойОстатки.Субконто2.Контрагент КАК Контрагент,
		|	ТиповойОстатки.Субконто2.ДоговорКонтрагента КАК ДоговорКонтрагента
		|ИЗ
		|	РегистрБухгалтерии.Типовой.Остатки(&ДатаОстатков, Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Типовой.Товары)), , ) КАК ТиповойОстатки
		|ГДЕ
		|	ТиповойОстатки.СуммаОстаток <> 0
		|	
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТиповойОстатки.Субконто1,
		|	ТиповойОстатки.Организация,
		|	ТиповойОстатки.СуммаОстаток,
		|	ТиповойОстатки.КоличествоОстаток,
		|	ТиповойОстатки.Счет,
		|	ТиповойОстатки.Субконто2,
		|	ТиповойОстатки.Субконто3,
		|	ТиповойОстатки.Субконто2.Контрагент,
		|	ТиповойОстатки.Субконто2.ДоговорКонтрагента
		|ИЗ
		|	РегистрБухгалтерии.Типовой.Остатки(&ДатаОстатков, Счет = ЗНАЧЕНИЕ(ПланСчетов.Типовой.СырьеИМатериалы), , ) КАК ТиповойОстатки
		|ГДЕ
		|	ТиповойОстатки.СуммаОстаток <> 0
		|	
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТиповойОстатки.Субконто1,
		|	ТиповойОстатки.Организация,
		|	ТиповойОстатки.СуммаОстаток,
		|	ТиповойОстатки.КоличествоОстаток,
		|	ТиповойОстатки.Счет,
		|	ТиповойОстатки.Субконто2,
		|	ТиповойОстатки.Субконто3,
		|	ТиповойОстатки.Субконто2.Контрагент,
		|	ТиповойОстатки.Субконто2.ДоговорКонтрагента
		|ИЗ
		|	РегистрБухгалтерии.Типовой.Остатки(&ДатаОстатков, Счет = ЗНАЧЕНИЕ(ПланСчетов.Типовой.ГотоваяПродукция), , ) КАК ТиповойОстатки
		|ГДЕ
		|	ТиповойОстатки.СуммаОстаток <> 0 ) КАК Таб
		|УПОРЯДОЧИТЬ ПО
		|	Организация,
		|	Склад
		|ИТОГИ ПО
		|	Организация,
		|	Склад";
	
	Запрос.УстановитьПараметр("ДатаОстатков", ДатаОстатков);
	
	МассивВыборки = Новый Массив;
	ВыборкаОрганизации = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаОрганизации.Следующий() Цикл
		
	    ВыборкаСклады = ВыборкаОрганизации.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	    Пока ВыборкаСклады.Следующий() Цикл
	    	
	    	ВыборкаДетальныеЗаписи = ВыборкаСклады.Выбрать();
			
			ДанныеИБ = Новый Структура("Дата, Организация, Склад, ТМЦ");
			ЗаполнитьЗначенияСвойств(ДанныеИБ, ВыборкаДетальныеЗаписи);
			
			ДанныеИБ.Дата        = ДатаОстатков;
			ДанныеИБ.Организация = ВыборкаОрганизации.Организация;
			ДанныеИБ.Склад       = ВыборкаСклады.Склад;
			
			ТМЦ = Новый ТаблицаЗначений;
			Колонки = ТМЦ.Колонки;
			Колонки.Добавить("Номенклатура");
			Колонки.Добавить("СуммаБезНДС");
			Колонки.Добавить("Количество");
			Колонки.Добавить("НомерГТД");
			Колонки.Добавить("ВидЗапасов");
			Колонки.Добавить("ЕдиницаИзмерения");
			Колонки.Добавить("СтавкаНДС");
			Колонки.Добавить("СуммаНДС");
			    		
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				Если ВыборкаДетальныеЗаписи.Сумма > 0 И ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Номенклатура) Тогда
	    			НоваяСтрока = ТМЦ.Добавить();
	    			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетальныеЗаписи);
	    			НоваяСтрока.ВидЗапасов = СокрЛП(ВыборкаДетальныеЗаписи.Счет.ИмяПредопределенныхДанных);
	    			Если НоваяСтрока.ВидЗапасов = "ТоварыНаСкладах" Тогда
	    				НоваяСтрока.ВидЗапасов = "СобственныеТовары";
	    			КонецЕсли;
	    			НоваяСтрока.ЕдиницаИзмерения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НоваяСтрока.Номенклатура, "ЕдиницаИзмерения");
	    			НоваяСтрока.СтавкаНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НоваяСтрока.Номенклатура, "СтавкаНДС");
	    			
	    			СтавкаНДС = НоваяСтрока.СтавкаНДС;
	    			СтавкаНДСЧислом = СтавкаНДС.Ставка;
	    			    			
	    			НоваяСтрока.СуммаБезНДС = Окр(ВыборкаДетальныеЗаписи.Сумма / (1 + СтавкаНДСЧислом/100), 2);
	    			НоваяСтрока.СуммаНДС = Окр(НоваяСтрока.СуммаБезНДС * СтавкаНДСЧислом / 100, 2);
	    		КонецЕсли;	
			КонецЦикла;
			
			ДанныеИБ.ТМЦ = ТМЦ;
			
			Если ДанныеИБ.ТМЦ.Количество() > 0 Тогда
				МассивВыборки.Добавить(ДанныеИБ);
			КонецЕсли;	
		
	    КонецЦикла;
	    
	КонецЦикла;
	
	Возврат МассивВыборки;
КонецФункции
#КонецОбласти
#Область Документ_ОстаткиТараПереданная
Процедура ДобавитьПОД_Документ_ОстаткиТараПереданная(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ОстаткиТараПереданная";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Неопределено;
	ПравилоОбработки.ПриОбработке = "ПОД_Документ_ОстаткиТараПереданная_ПриОбработке";
	ПравилоОбработки.ВыборкаДанных = "ПОД_Документ_ОстаткиТараПереданная_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных = Истина;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОстаткиТараПереданная");
КонецПроцедуры

Процедура ПОД_Документ_ОстаткиТараПереданная_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если КомпонентыОбмена.УзелКорреспондента.ВариантНастройки = "ОбменЗУПБП"   
		ИЛИ КомпонентыОбмена.УзелКорреспондента.ВариантНастройки = "ОбменЗУП31БП" 
		ИЛИ КомпонентыОбмена.УзелКорреспондента.ВариантНастройки = "ОбменУНФБП" Тогда
		ИспользованиеПКО.Документ_ОстаткиТараПереданная = Ложь;
	Иначе
		ИспользованиеПКО.Документ_ОстаткиТараПереданная = Истина;
	КонецЕсли;
КонецПроцедуры

Функция ПОД_Документ_ОстаткиТараПереданная_ВыборкаДанных(КомпонентыОбмена)
	//ДатаОстатков = КомпонентыОбмена.ПараметрыКонвертации.ДатаОстатков;
	
	//Запрос = Новый Запрос;
	//Запрос.Текст =
	//	"ВЫБРАТЬ
	//	|	ХозрасчетныйОстатки.Субконто1 КАК Номенклатура,
	//	|	ХозрасчетныйОстатки.Организация,
	//	|	ХозрасчетныйОстатки.СуммаОстаток КАК Сумма,
	//	|	ХозрасчетныйОстатки.КоличествоОстаток КАК Количество,
	//	|	ХозрасчетныйОстатки.Счет,
	//	|	ХозрасчетныйОстатки.Субконто2 КАК ДокументПоступления,
	//	|	ХозрасчетныйОстатки.Субконто3 КАК Склад
	//	|ИЗ
	//	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаОстатков, Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ТоварыНаСкладах)), , ) КАК ХозрасчетныйОстатки
	//	|ГДЕ
	//	|	ХозрасчетныйОстатки.СуммаОстаток <> 0
	//	|	
	//	|ОБЪЕДИНИТЬ ВСЕ
	//	|
	//	|ВЫБРАТЬ
	//	|	ХозрасчетныйОстатки.Субконто1,
	//	|	ХозрасчетныйОстатки.Организация,
	//	|	ХозрасчетныйОстатки.СуммаОстаток,
	//	|	ХозрасчетныйОстатки.КоличествоОстаток,
	//	|	ХозрасчетныйОстатки.Счет,
	//	|	ХозрасчетныйОстатки.Субконто2,
	//	|	ХозрасчетныйОстатки.Субконто3
	//	|ИЗ
	//	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаОстатков, Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Материалы)) И Счет <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Тара), , ) КАК ХозрасчетныйОстатки
	//	|ГДЕ
	//	|	ХозрасчетныйОстатки.СуммаОстаток <> 0
	//	|	
	//	|ОБЪЕДИНИТЬ ВСЕ
	//	|
	//	|ВЫБРАТЬ
	//	|	ХозрасчетныйОстатки.Субконто1,
	//	|	ХозрасчетныйОстатки.Организация,
	//	|	ХозрасчетныйОстатки.СуммаОстаток,
	//	|	ХозрасчетныйОстатки.КоличествоОстаток,
	//	|	ХозрасчетныйОстатки.Счет,
	//	|	ХозрасчетныйОстатки.Субконто2,
	//	|	ХозрасчетныйОстатки.Субконто3
	//	|ИЗ
	//	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаОстатков, Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ГотоваяПродукция)), , ) КАК ХозрасчетныйОстатки
	//	|ГДЕ
	//	|	ХозрасчетныйОстатки.СуммаОстаток <> 0
	//	|УПОРЯДОЧИТЬ ПО
	//	|	Организация,
	//	|	Склад,
	//	|	ДокументПоступления
	//	|ИТОГИ ПО
	//	|	Организация,
	//	|	Склад,
	//	|	ДокументПоступления";
	
	//Запрос.УстановитьПараметр("ДатаОстатков", ДатаОстатков);
	
	МассивВыборки = Новый Массив;
	//ВыборкаОрганизации = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	//Пока ВыборкаОрганизации.Следующий() Цикл
	//	
	//    ВыборкаСклады = ВыборкаОрганизации.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	//    Пока ВыборкаСклады.Следующий() Цикл
	//    	ВыборкаДокументыПоступления = ВыборкаСклады.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	//    	
	//    	Пока ВыборкаДокументыПоступления.Следующий() Цикл
	//    		ВыборкаДетальныеЗаписи = ВыборкаДокументыПоступления.Выбрать();
	//    		
	//    		ДанныеИБ = Новый Структура("Дата, Организация, Склад, ТМЦ");
	//			ЗаполнитьЗначенияСвойств(ДанныеИБ, ВыборкаДокументыПоступления);
	//			
	//			ДанныеИБ.Дата = ДатаОстатков;
	//			ДанныеИБ.Организация = ВыборкаОрганизации.Организация;
	//			
	//			ТМЦ = Новый ТаблицаЗначений;
	//			Колонки = ТМЦ.Колонки;
	//			Колонки.Добавить("Номенклатура");
	//			Колонки.Добавить("СуммаБезНДС");
	//			Колонки.Добавить("Количество");
	//			Колонки.Добавить("НомерГТД");
	//			Колонки.Добавить("ВидЗапасов");
	//			Колонки.Добавить("ЕдиницаИзмерения");
	//			Колонки.Добавить("СтавкаНДС");
	//			Колонки.Добавить("СуммаНДС");
	//			    		
	//    		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	//    			Если ВыборкаДетальныеЗаписи.Сумма > 0 Тогда
	//	    			НоваяСтрока = ТМЦ.Добавить();
	//	    			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетальныеЗаписи);
	//	    			НоваяСтрока.ВидЗапасов = СокрЛП(ВыборкаДетальныеЗаписи.Счет.ИмяПредопределенныхДанных);
	//	    			Если НоваяСтрока.ВидЗапасов = "ТоварыНаСкладах" Тогда
	//	    				НоваяСтрока.ВидЗапасов = "СобственныеТовары";
	//	    			КонецЕсли;
	//	    			НоваяСтрока.ЕдиницаИзмерения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НоваяСтрока.Номенклатура, "ЕдиницаИзмерения");
	//	    			НоваяСтрока.СтавкаНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НоваяСтрока.Номенклатура, "СтавкаНДС");
	//	    			
	//	    			СтавкаНДС = НоваяСтрока.СтавкаНДС;
	//	    			СтавкаНДСЧислом = 0;
	//	    			Если СтавкаНДС = Перечисления.СтавкиНДС.НДС20 ИЛИ СтавкаНДС = Перечисления.СтавкиНДС.НДС20_120 Тогда
	//						СтавкаНДСЧислом = 20;
	//					ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС10 ИЛИ СтавкаНДС = Перечисления.СтавкиНДС.НДС10_110 Тогда
	//						СтавкаНДСЧислом = 10;
	//					ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС18 ИЛИ СтавкаНДС = Перечисления.СтавкиНДС.НДС18_118 Тогда
	//						СтавкаНДСЧислом = 18;
	//					КонецЕсли;
	//	    			
	//	    			НоваяСтрока.СуммаБезНДС = Окр(ВыборкаДетальныеЗаписи.Сумма / (1 + СтавкаНДСЧислом/100), 2);
	//	    			НоваяСтрока.СуммаНДС = Окр(НоваяСтрока.СуммаБезНДС * СтавкаНДСЧислом / 100, 2);
	//	    		КонецЕсли;	
	//    		КонецЦикла;
	//    		
	//    		ДанныеИБ.ТМЦ = ТМЦ;
	//    		
	//    		МассивВыборки.Добавить(ДанныеИБ);
	//    	КонецЦикла;
	//    КонецЦикла;
	//    
	//КонецЦикла;
	
	Возврат МассивВыборки;
КонецФункции
#КонецОбласти
#Область Документ_ОстаткиТараПринятая
Процедура ДобавитьПОД_Документ_ОстаткиТараПринятая(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ОстаткиТараПринятая";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Неопределено;
	ПравилоОбработки.ПриОбработке = "ПОД_Документ_ОстаткиТараПринятая_ПриОбработке";
	ПравилоОбработки.ВыборкаДанных = "ПОД_Документ_ОстаткиТараПринятая_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных = Истина;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОстаткиТараПринятая");
КонецПроцедуры

Процедура ПОД_Документ_ОстаткиТараПринятая_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если КомпонентыОбмена.УзелКорреспондента.ВариантНастройки = "ОбменЗУПБП"   
		ИЛИ КомпонентыОбмена.УзелКорреспондента.ВариантНастройки = "ОбменЗУП31БП" 
		ИЛИ КомпонентыОбмена.УзелКорреспондента.ВариантНастройки = "ОбменУНФБП" Тогда
		ИспользованиеПКО.Документ_ОстаткиТараПринятая = Ложь;
	Иначе
		ИспользованиеПКО.Документ_ОстаткиТараПринятая = Истина;
	КонецЕсли;
КонецПроцедуры

Функция ПОД_Документ_ОстаткиТараПринятая_ВыборкаДанных(КомпонентыОбмена)
	//ДатаОстатков = КомпонентыОбмена.ПараметрыКонвертации.ДатаОстатков;
	
	//Запрос = Новый Запрос;
	//Запрос.Текст =
	//"ВЫБРАТЬ
	//|	ХозрасчетныйОстатки.Субконто1 КАК Номенклатура,
	//|	ХозрасчетныйОстатки.Организация,
	//|	ХозрасчетныйОстатки.СуммаОстаток КАК Сумма,
	//|	ХозрасчетныйОстатки.КоличествоОстаток КАК Количество,
	//|	ХозрасчетныйОстатки.КоличествоОстаток КАК КоличествоУпаковок,
	//|	ХозрасчетныйОстатки.Субконто2 КАК ДокументПоступления,
	//|	ХозрасчетныйОстатки.Субконто2.Контрагент КАК Контрагент,
	//|	ХозрасчетныйОстатки.Субконто3 КАК Склад
	//|ИЗ
	//|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаОстатков, Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Тара)), , ) КАК ХозрасчетныйОстатки
	//|ГДЕ
	//|	ХозрасчетныйОстатки.СуммаОстаток <> 0
	//|	
	//|ОБЪЕДИНИТЬ ВСЕ
	//|
	//|ВЫБРАТЬ
	//|	ХозрасчетныйОстатки.Субконто1,
	//|	ХозрасчетныйОстатки.Организация,
	//|	ХозрасчетныйОстатки.СуммаОстаток,
	//|	ХозрасчетныйОстатки.КоличествоОстаток,
	//|	ХозрасчетныйОстатки.КоличествоОстаток,
	//|	ХозрасчетныйОстатки.Субконто2,
	//|	ХозрасчетныйОстатки.Субконто2.Контрагент,
	//|	ХозрасчетныйОстатки.Субконто3
	//|ИЗ
	//|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаОстатков, Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ТараПодТоваромИПорожняя)), , ) КАК ХозрасчетныйОстатки
	//|ГДЕ
	//|	ХозрасчетныйОстатки.СуммаОстаток <> 0
	//|
	//|УПОРЯДОЧИТЬ ПО
	//|	Организация,
	//|	Склад,
	//|	ДокументПоступления
	//|ИТОГИ ПО
	//|	Организация,
	//|	Склад,
	//|	ДокументПоступления";
	
	//Запрос.УстановитьПараметр("ДатаОстатков", ДатаОстатков);
	
	МассивВыборки = Новый Массив;
	//ВыборкаОрганизации = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	//Пока ВыборкаОрганизации.Следующий() Цикл
	//	
	//	ВыборкаСклады = ВыборкаОрганизации.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	//	Пока ВыборкаСклады.Следующий() Цикл
	//		ВыборкаДокументыПоступления = ВыборкаСклады.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	//		
	//		Пока ВыборкаДокументыПоступления.Следующий() Цикл
	//			ВыборкаДетальныеЗаписи = ВыборкаДокументыПоступления.Выбрать();
	//			
	//			ДанныеИБ = Новый Структура("Дата, Организация, Склад, Тара, Контрагент");
	//			ЗаполнитьЗначенияСвойств(ДанныеИБ, ВыборкаДокументыПоступления);
	//			
	//			ДанныеИБ.Дата = ДатаОстатков;
	//			ДанныеИБ.Организация = ВыборкаОрганизации.Организация;
	//			
	//			Тара = Новый ТаблицаЗначений;
	//			Колонки = Тара.Колонки;
	//			Колонки.Добавить("Номенклатура");
	//			Колонки.Добавить("СуммаБезНДС");
	//			Колонки.Добавить("Количество");
	//			Колонки.Добавить("КоличествоУпаковок");
	//			Колонки.Добавить("НомерГТД");
	//			Колонки.Добавить("ЕдиницаИзмерения");
	//			Колонки.Добавить("СтавкаНДС");
	//			Колонки.Добавить("СуммаНДС");
	//			
	//			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	//				Если ВыборкаДетальныеЗаписи.Сумма > 0 Тогда
	//					НоваяСтрока = Тара.Добавить();
	//					ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетальныеЗаписи);
	//					
	//					НоваяСтрока.ЕдиницаИзмерения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НоваяСтрока.Номенклатура, "ЕдиницаИзмерения");
	//					НоваяСтрока.СтавкаНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НоваяСтрока.Номенклатура, "СтавкаНДС");
	//					
	//					СтавкаНДС = НоваяСтрока.СтавкаНДС;
	//					СтавкаНДСЧислом = 0;
	//					Если СтавкаНДС = Перечисления.СтавкиНДС.НДС20 ИЛИ СтавкаНДС = Перечисления.СтавкиНДС.НДС20_120 Тогда
	//						СтавкаНДСЧислом = 20;
	//					ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС10 ИЛИ СтавкаНДС = Перечисления.СтавкиНДС.НДС10_110 Тогда
	//						СтавкаНДСЧислом = 10;
	//					ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС18 ИЛИ СтавкаНДС = Перечисления.СтавкиНДС.НДС18_118 Тогда
	//						СтавкаНДСЧислом = 18;
	//					КонецЕсли;
	//					
	//					НоваяСтрока.СуммаБезНДС = Окр(ВыборкаДетальныеЗаписи.Сумма / (1 + СтавкаНДСЧислом/100), 2);
	//					НоваяСтрока.СуммаНДС = Окр(НоваяСтрока.СуммаБезНДС * СтавкаНДСЧислом / 100, 2);
	//				КонецЕсли;
	//			КонецЦикла;
	//			
	//			ДанныеИБ.Тара = Тара;
	//			
	//			МассивВыборки.Добавить(ДанныеИБ);
	//		КонецЦикла;
	//	КонецЦикла;
	//	
	//КонецЦикла;
	
	Возврат МассивВыборки;
КонецФункции
#КонецОбласти
#Область Документ_ОстаткиТоваровПереданныхНаКомиссию
Процедура ДобавитьПОД_Документ_ОстаткиТоваровПереданныхНаКомиссию(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ОстаткиТоваровПереданныхНаКомиссию";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Неопределено;
	ПравилоОбработки.ПриОбработке = "ПОД_Документ_ОстаткиТоваровПереданныхНаКомиссию_ПриОбработке";
	ПравилоОбработки.ВыборкаДанных = "ПОД_Документ_ОстаткиТоваровПереданныхНаКомиссию_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных = Истина;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОстаткиТоваровПереданныхНаКомиссию");
КонецПроцедуры

Процедура ПОД_Документ_ОстаткиТоваровПереданныхНаКомиссию_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если КомпонентыОбмена.УзелКорреспондента.ВариантНастройки = "ОбменЗУПБП"   
		ИЛИ КомпонентыОбмена.УзелКорреспондента.ВариантНастройки = "ОбменЗУП31БП" 
		ИЛИ КомпонентыОбмена.УзелКорреспондента.ВариантНастройки = "ОбменУНФБП" Тогда
		ИспользованиеПКО.Документ_ОстаткиТоваровПереданныхНаКомиссию = Ложь;
	Иначе
		ИспользованиеПКО.Документ_ОстаткиТоваровПереданныхНаКомиссию = Истина;
	КонецЕсли;
КонецПроцедуры

Функция ПОД_Документ_ОстаткиТоваровПереданныхНаКомиссию_ВыборкаДанных(КомпонентыОбмена)
	//ДатаОстатков = КомпонентыОбмена.ПараметрыКонвертации.ДатаОстатков;
	//	
	//Запрос = Новый Запрос;
	//Запрос.Текст =
	//	"ВЫБРАТЬ
	//	|	ХозрасчетныйОстатки.Субконто1 КАК Контрагент,
	//	|	ХозрасчетныйОстатки.Организация,
	//	|	ХозрасчетныйОстатки.СуммаОстаток КАК Сумма,
	//	|	ХозрасчетныйОстатки.КоличествоОстаток КАК Количество,
	//	|	ХозрасчетныйОстатки.КоличествоОстаток КАК КоличествоУпаковок,
	//	|	ХозрасчетныйОстатки.Счет,
	//	|	ХозрасчетныйОстатки.Субконто2 КАК Номенклатура	
	//	|ИЗ
	//	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаОстатков, Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ТоварыОтгруженные)), , ) КАК ХозрасчетныйОстатки
	//	|ГДЕ
	//	|	ХозрасчетныйОстатки.СуммаОстаток <> 0
	//	|	
	//	|УПОРЯДОЧИТЬ ПО
	//	|	Организация,
	//	|	Контрагент
	//	|ИТОГИ ПО
	//	|	Организация,
	//	|	Контрагент";
	
	//Запрос.УстановитьПараметр("ДатаОстатков", ДатаОстатков);
	
	МассивВыборки = Новый Массив;
	//ВыборкаОрганизации = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	//Пока ВыборкаОрганизации.Следующий() Цикл
	//	
	//    ВыборкаКонтрагент = ВыборкаОрганизации.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	//    Пока ВыборкаКонтрагент.Следующий() Цикл
	//    		ВыборкаДетальныеЗаписи = ВыборкаКонтрагент.Выбрать();
	//    		
	//    		ДанныеИБ = Новый Структура("Дата, Организация, Товары, Контрагент");
	//			ЗаполнитьЗначенияСвойств(ДанныеИБ, ВыборкаКонтрагент);
	//			
	//			ДанныеИБ.Дата        = ДатаОстатков;
	//			ДанныеИБ.Организация = ВыборкаОрганизации.Организация;
	//			
	//			Товары = Новый ТаблицаЗначений;
	//			Колонки = Товары.Колонки;
	//			Колонки.Добавить("Номенклатура");
	//			Колонки.Добавить("СуммаБезНДС");
	//			Колонки.Добавить("Количество");
	//			Колонки.Добавить("КоличествоУпаковок");
	//			Колонки.Добавить("НомерГТД");
	//			Колонки.Добавить("ЕдиницаИзмерения");
	//			Колонки.Добавить("СтавкаНДС");
	//			Колонки.Добавить("СуммаНДС");
	//			    		
	//    		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	//    			Если ВыборкаДетальныеЗаписи.Сумма > 0 Тогда
	//	    			НоваяСтрока = Товары.Добавить();
	//	    			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетальныеЗаписи);
	//	    				    			
	//	    			НоваяСтрока.ЕдиницаИзмерения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НоваяСтрока.Номенклатура, "ЕдиницаИзмерения");
	//	    			НоваяСтрока.СтавкаНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НоваяСтрока.Номенклатура, "СтавкаНДС");
	//	    			
	//	    			СтавкаНДС = НоваяСтрока.СтавкаНДС;
	//	    			СтавкаНДСЧислом = 0;
	//	    			Если СтавкаНДС = Перечисления.СтавкиНДС.НДС20 ИЛИ СтавкаНДС = Перечисления.СтавкиНДС.НДС20_120 Тогда
	//						СтавкаНДСЧислом = 20;
	//					ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС10 ИЛИ СтавкаНДС = Перечисления.СтавкиНДС.НДС10_110 Тогда
	//						СтавкаНДСЧислом = 10;
	//					ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС18 ИЛИ СтавкаНДС = Перечисления.СтавкиНДС.НДС18_118 Тогда
	//						СтавкаНДСЧислом = 18;
	//					КонецЕсли;
	//	    			
	//	    			НоваяСтрока.СуммаБезНДС = Окр(ВыборкаДетальныеЗаписи.Сумма / (1 + СтавкаНДСЧислом/100), 2);
	//	    			НоваяСтрока.СуммаНДС = Окр(НоваяСтрока.СуммаБезНДС * СтавкаНДСЧислом / 100, 2);
	//	    		КонецЕсли;	
	//    		КонецЦикла;
	//    		
	//    		ДанныеИБ.Товары = Товары;
	//    		
	//    		МассивВыборки.Добавить(ДанныеИБ);
	//    	КонецЦикла;
	//    
	//    
	//КонецЦикла;
	
	Возврат МассивВыборки;
КонецФункции
#КонецОбласти
#Область Документ_ОстаткиТоваровПринятыхНаКомиссию
Процедура ДобавитьПОД_Документ_ОстаткиТоваровПринятыхНаКомиссию(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ОстаткиТоваровПринятыхНаКомиссию";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Неопределено;
	ПравилоОбработки.ПриОбработке = "ПОД_Документ_ОстаткиТоваровПринятыхНаКомиссию_ПриОбработке";
	ПравилоОбработки.ВыборкаДанных = "ПОД_Документ_ОстаткиТоваровПринятыхНаКомиссию_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных = Истина;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОстаткиТоваровПринятыхНаКомиссию");
КонецПроцедуры

Процедура ПОД_Документ_ОстаткиТоваровПринятыхНаКомиссию_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если КомпонентыОбмена.УзелКорреспондента.ВариантНастройки = "ОбменЗУПБП"   
		ИЛИ КомпонентыОбмена.УзелКорреспондента.ВариантНастройки = "ОбменЗУП31БП" 
		ИЛИ КомпонентыОбмена.УзелКорреспондента.ВариантНастройки = "ОбменУНФБП" Тогда
		ИспользованиеПКО.Документ_ОстаткиТоваровПринятыхНаКомиссию = Ложь;
	Иначе
		ИспользованиеПКО.Документ_ОстаткиТоваровПринятыхНаКомиссию = Истина;
	КонецЕсли;
КонецПроцедуры

Функция ПОД_Документ_ОстаткиТоваровПринятыхНаКомиссию_ВыборкаДанных(КомпонентыОбмена)
	//ДатаОстатков = КомпонентыОбмена.ПараметрыКонвертации.ДатаОстатков;
	
	//Запрос = Новый Запрос;
	//Запрос.Текст =
	//	"ВЫБРАТЬ
	//	|	ХозрасчетныйОстатки.Субконто2 КАК Номенклатура,
	//	|	ХозрасчетныйОстатки.Организация,
	//	|	ХозрасчетныйОстатки.СуммаОстаток КАК Сумма,
	//	|	ХозрасчетныйОстатки.КоличествоОстаток КАК Количество,
	//	|	ХозрасчетныйОстатки.КоличествоОстаток КАК КоличествоУпаковок,
	//	|	ХозрасчетныйОстатки.Субконто1 КАК ДокументПоступления,
	//	|	ХозрасчетныйОстатки.Субконто1.Контрагент КАК Контрагент,
	//	|	ХозрасчетныйОстатки.Субконто3 КАК Склад
	//	|ИЗ
	//	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаОстатков, Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ТоварыНаСкладе)), , ) КАК ХозрасчетныйОстатки
	//	|ГДЕ
	//	|	ХозрасчетныйОстатки.СуммаОстаток <> 0
	//	|
	//	|УПОРЯДОЧИТЬ ПО
	//	|	Организация,
	//	|	Склад,
	//	|	ДокументПоступления
	//	|ИТОГИ ПО
	//	|	Организация,
	//	|	Склад,
	//	|	ДокументПоступления";
	
	//Запрос.УстановитьПараметр("ДатаОстатков", ДатаОстатков);
	
	МассивВыборки = Новый Массив;
	//ВыборкаОрганизации = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	//Пока ВыборкаОрганизации.Следующий() Цикл
	//	
	//    ВыборкаСклады = ВыборкаОрганизации.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	//    Пока ВыборкаСклады.Следующий() Цикл
	//    	ВыборкаДокументыПоступления = ВыборкаСклады.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	//    	
	//    	Пока ВыборкаДокументыПоступления.Следующий() Цикл
	//    		ВыборкаДетальныеЗаписи = ВыборкаДокументыПоступления.Выбрать();
	//    		
	//    		ДанныеИБ = Новый Структура("Дата, Организация, Склад, Товары, Контрагент, Договор");
	//			ЗаполнитьЗначенияСвойств(ДанныеИБ, ВыборкаДокументыПоступления);
	//			
	//			ДанныеИБ.Дата = ДатаОстатков;
	//			ДанныеИБ.Организация = ВыборкаОрганизации.Организация;
	//			
	//			Товары = Новый ТаблицаЗначений;
	//			Колонки = Товары.Колонки;
	//			Колонки.Добавить("Номенклатура");
	//			Колонки.Добавить("СуммаБезНДС");
	//			Колонки.Добавить("Количество");
	//			Колонки.Добавить("НомерГТД");
	//			Колонки.Добавить("ВидЗапасов");
	//			Колонки.Добавить("ЕдиницаИзмерения");
	//			Колонки.Добавить("СтавкаНДС");
	//			Колонки.Добавить("СуммаНДС");
	//			    		
	//    		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	//    			Если Не ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Номенклатура) Тогда
	//    				Продолжить;
	//    			КонецЕсли;
	//    			Если ВыборкаДетальныеЗаписи.Сумма > 0 Тогда
	//	    			НоваяСтрока = Товары.Добавить();
	//	    			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетальныеЗаписи);
	//	    			
	//	    			НоваяСтрока.ЕдиницаИзмерения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НоваяСтрока.Номенклатура, "ЕдиницаИзмерения");
	//	    			НоваяСтрока.СтавкаНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НоваяСтрока.Номенклатура, "СтавкаНДС");
	//	    			
	//	    			СтавкаНДС = НоваяСтрока.СтавкаНДС;
	//	    			СтавкаНДСЧислом = 0;
	//	    			Если СтавкаНДС = Перечисления.СтавкиНДС.НДС20 ИЛИ СтавкаНДС = Перечисления.СтавкиНДС.НДС20_120 Тогда
	//						СтавкаНДСЧислом = 20;
	//					ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС10 ИЛИ СтавкаНДС = Перечисления.СтавкиНДС.НДС10_110 Тогда
	//						СтавкаНДСЧислом = 10;
	//					ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС18 ИЛИ СтавкаНДС = Перечисления.СтавкиНДС.НДС18_118 Тогда
	//						СтавкаНДСЧислом = 18;
	//					КонецЕсли;
	//	    			
	//	    			НоваяСтрока.СуммаБезНДС = Окр(ВыборкаДетальныеЗаписи.Сумма / (1 + СтавкаНДСЧислом/100), 2);
	//	    			НоваяСтрока.СуммаНДС = Окр(НоваяСтрока.СуммаБезНДС * СтавкаНДСЧислом / 100, 2);
	//	    		КонецЕсли;	
	//    		КонецЦикла;
	//    		
	//    		ДанныеИБ.Товары = Товары;
	//    		Если ДанныеИБ.Товары.Количество() > 0 Тогда
	//    			МассивВыборки.Добавить(ДанныеИБ);
	//    		КонецЕсли;
	//    			
	//    	КонецЦикла;
	//    КонецЦикла;
	//    
	//КонецЦикла;
	
	Возврат МассивВыборки;
КонецФункции
#КонецОбласти
#Область Документ_ОтражениеЗарплатыВБухучете_Отправка_ЗУП
Процедура ДобавитьПОД_Документ_ОтражениеЗарплатыВБухучете_Отправка_ЗУП(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ОтражениеЗарплатыВБухучете_Отправка_ЗУП";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ОтражениеЗарплатыВБухучете;
	ПравилоОбработки.ПриОбработке = "ПОД_Документ_ОтражениеЗарплатыВБухучете_Отправка_ЗУП_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОтражениеЗарплатыВБухучете_Отправка_ЗУП");
КонецПроцедуры

Процедура ПОД_Документ_ОтражениеЗарплатыВБухучете_Отправка_ЗУП_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если КомпонентыОбмена.УзелКорреспондента.ВариантНастройки = "ОбменЗУПБП" 
		ИЛИ КомпонентыОбмена.УзелКорреспондента.ВариантНастройки = "ОбменЗУП31БП" Тогда
		ИспользованиеПКО.Документ_ОтражениеЗарплатыВБухучете_Отправка_ЗУП = Истина;
	Иначе
		ИспользованиеПКО.Документ_ОтражениеЗарплатыВБухучете_Отправка_ЗУП = Ложь;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ПеремещениеТоваров_Отправка
Процедура ДобавитьПОД_Документ_ПеремещениеТоваров_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ПеремещениеТоваров_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ПеремещениеТоваров;
	ПравилоОбработки.ПриОбработке = "ПОД_Документ_ПеремещениеТоваров_Отправка_ПриОбработке";
	ПравилоОбработки.ВыборкаДанных = "ПОД_Документ_ПеремещениеТоваров_Отправка_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных = Истина;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПеремещениеТоваров_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_ПеремещениеТоваров_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если КомпонентыОбмена.УзелКорреспондента.ВариантНастройки = "ОбменЗУПБП"   
		ИЛИ КомпонентыОбмена.УзелКорреспондента.ВариантНастройки = "ОбменЗУП31БП" 
		ИЛИ КомпонентыОбмена.УзелКорреспондента.ВариантНастройки = "ОбменУНФБП" Тогда
		ИспользованиеПКО.Документ_ПеремещениеТоваров_Отправка = Ложь;
	Иначе
		ИспользованиеПКО.Документ_ПеремещениеТоваров_Отправка = Истина;
	КонецЕсли;
КонецПроцедуры

Функция ПОД_Документ_ПеремещениеТоваров_Отправка_ВыборкаДанных(КомпонентыОбмена)
	МассивВыборки = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Док.Ссылка
		|ИЗ
		|	Документ.ПеремещениеТоваров КАК Док
		|ГДЕ
		|	Док.Проведен
		|	И Док.Дата >= &ДатаНачала 
		|	И Док.Дата <= &ДатаОкончания";
	
	Запрос.УстановитьПараметр("ДатаНачала", НачалоДня(КомпонентыОбмена.ПараметрыКонвертации.ДатаОстатков));
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(КомпонентыОбмена.ПараметрыКонвертации.ДатаОкончанияПериодаВыгрузкиДокументов));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		МассивВыборки.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат МассивВыборки;
КонецФункции
#КонецОбласти
#Область Документ_ПКО_Отправка
Процедура ДобавитьПОД_Документ_ПКО_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ПКО_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ПриходныйКассовыйОрдер;
	ПравилоОбработки.ПриОбработке = "ПОД_Документ_ПКО_Отправка_ПриОбработке";
	ПравилоОбработки.ВыборкаДанных = "ПОД_Документ_ПКО_Отправка_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных = Истина;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПКОРасчетыСКонтрагентами_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПКОРасчетыССотрудниками_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПКОПолучениеНаличныхВБанке_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПКОРозничнаяВыручка_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПКОПрочиеДоходы_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПКОКонвертацияВалюты_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПКОПрочееПоступление_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_ПКО_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Документ_ПКОРасчетыСКонтрагентами_Отправка   = Ложь;
	ИспользованиеПКО.Документ_ПКОРасчетыССотрудниками_Отправка    = Ложь;
	ИспользованиеПКО.Документ_ПКОПолучениеНаличныхВБанке_Отправка = Ложь;
	ИспользованиеПКО.Документ_ПКОРозничнаяВыручка_Отправка        = Ложь;
	ИспользованиеПКО.Документ_ПКОПрочиеДоходы_Отправка            = Ложь;
	ИспользованиеПКО.Документ_ПКОКонвертацияВалюты_Отправка       = Ложь;
	ИспользованиеПКО.Документ_ПКОПрочееПоступление_Отправка       = Ложь;
	
	Если КомпонентыОбмена.УзелКорреспондента.ВариантНастройки <> "ОбменЗУПБП"    
		И КомпонентыОбмена.УзелКорреспондента.ВариантНастройки <> "ОбменЗУП31БП" Тогда
	
		Если Не ЗначениеЗаполнено(ДанныеИБ.ВидОперации)
			Или ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПКО.ОплатаПокупателя
			Или ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПоставщиком
			Или ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПКО.РасчетыПоКредитамИЗаймамСКонтрагентами Тогда
			
			ИспользованиеПКО.Документ_ПКОРасчетыСКонтрагентами_Отправка = Истина;
			
		ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПодотчетником Тогда
			
			ИспользованиеПКО.Документ_ПКОРасчетыССотрудниками_Отправка = Истина;
	
		ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПКО.ПолучениеНаличныхДенежныхСредствВБанке Тогда
			
			ИспользованиеПКО.Документ_ПКОПолучениеНаличныхВБанке_Отправка = Истина;
			
		ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствПрочее Тогда
			
			ИспользованиеПКО.Документ_ПКОПрочееПоступление_Отправка = Истина;
				
		КонецЕсли;
	
	КонецЕсли;
КонецПроцедуры

Функция ПОД_Документ_ПКО_Отправка_ВыборкаДанных(КомпонентыОбмена)
	МассивВыборки = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Док.Ссылка
		|ИЗ
		|	Документ.ПриходныйКассовыйОрдер КАК Док
		|ГДЕ
		|	Док.Проведен
		|	И Док.Дата >= &ДатаНачала 
		|	И Док.Дата <= &ДатаОкончания";
	
	Запрос.УстановитьПараметр("ДатаНачала", НачалоДня(КомпонентыОбмена.ПараметрыКонвертации.ДатаОстатков));
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(КомпонентыОбмена.ПараметрыКонвертации.ДатаОкончанияПериодаВыгрузкиДокументов));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		МассивВыборки.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат МассивВыборки;
КонецФункции
#КонецОбласти
#Область Документ_ПОПБДС_Отправка
Процедура ДобавитьПОД_Документ_ПОПБДС_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ПОПБДС_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ПлатежныйОрдерПоступлениеДенежныхСредств;
	ПравилоОбработки.ПриОбработке = "ПОД_Документ_ПОПБДС_Отправка_ПриОбработке";
	ПравилоОбработки.ВыборкаДанных = "ПОД_Документ_ПОПБДС_Отправка_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных = Истина;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПОПБДСКонвертацияВалюты_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПОПБДСПрочееПоступление_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПОПБДСПрочиеДоходы_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПОПБДСРасчетыСКонтрагентами_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПОПБДСРасчетыССотрудниками_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_ПОПБДС_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Документ_ПОПБДСРасчетыСКонтрагентами_Отправка = Ложь;
	ИспользованиеПКО.Документ_ПОПБДСРасчетыССотрудниками_Отправка = Ложь;
	ИспользованиеПКО.Документ_ПОПБДСКонвертацияВалюты_Отправка = Ложь;
	ИспользованиеПКО.Документ_ПОПБДСПрочееПоступление_Отправка = Ложь;
	ИспользованиеПКО.Документ_ПОПБДСПрочиеДоходы_Отправка = Ложь;
	
	Если КомпонентыОбмена.УзелКорреспондента.ВариантНастройки <> "ОбменЗУПБП"    
		И КомпонентыОбмена.УзелКорреспондента.ВариантНастройки <> "ОбменЗУП31БП" 
		И КомпонентыОбмена.УзелКорреспондента.ВариантНастройки <> "ОбменУНФБП" Тогда
	
		Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПокупателя
			Или ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПоставщиком
			Или ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.РасчетыПоКредитамИЗаймам
			Или ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочиеРасчетыСКонтрагентами Тогда
	
			// Расчеты с контрагентами - из операций по покуптелям, поставщикам,
			// расчетам по кредитам (займам) и прочим расчетам с контрагентами
			ИспользованиеПКО.Документ_ПОПБДСРасчетыСКонтрагентами_Отправка = Истина;
			
		ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПриобретениеИностраннойВалюты
			Или ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты Тогда
			
			// Конвертация валюты - из операций, связанных с конвертацией валюты
			ИспользованиеПКО.Документ_ПОПБДСКонвертацияВалюты_Отправка = Истина;
			
		ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочееПоступлениеБезналичныхДенежныхСредств Тогда
			
			Если ДанныеИБ.СчетУчетаРасчетовСКонтрагентомБУ = ПланыСчетов.Типовой.ПрочиеДоходы Тогда
				
				// 6280
				ИспользованиеПКО.Документ_ПОПБДСПрочиеДоходы_Отправка = Истина;
				
			ИначеЕсли ДанныеИБ.СчетУчетаРасчетовСКонтрагентомБУ = ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПодотчетныхЛиц Тогда
				
				// 1251
				// Расчеты с сотрудниками - из прочего поступления (расчеты с подотчеными лицами)
				ИспользованиеПКО.Документ_ПОПБДСРасчетыССотрудниками_Отправка = Истина;
				
			ИначеЕсли СчетаРасчетовСКонтрагентами().Найти(ДанныеИБ.СчетУчетаРасчетовСКонтрагентомБУ) <> Неопределено Тогда
				
				// Расчеты с контрагентами - из прочего поступления
				ИспользованиеПКО.Документ_ПОПБДСРасчетыСКонтрагентами_Отправка = Истина;
				
			Иначе 
				ИспользованиеПКО.Документ_ПОПБДСПрочееПоступление_Отправка = Истина;
			КонецЕсли;
				
		КонецЕсли;
	
	КонецЕсли;
КонецПроцедуры

Функция ПОД_Документ_ПОПБДС_Отправка_ВыборкаДанных(КомпонентыОбмена)
	МассивВыборки = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Док.Ссылка
		|ИЗ
		|	Документ.ПлатежныйОрдерПоступлениеДенежныхСредств КАК Док
		|ГДЕ
		|	Док.Проведен
		|	И Док.Дата >= &ДатаНачала 
		|	И Док.Дата <= &ДатаОкончания";
	
	Запрос.УстановитьПараметр("ДатаНачала", НачалоДня(КомпонентыОбмена.ПараметрыКонвертации.ДатаОстатков));
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(КомпонентыОбмена.ПараметрыКонвертации.ДатаОкончанияПериодаВыгрузкиДокументов));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		МассивВыборки.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат МассивВыборки;
КонецФункции
#КонецОбласти
#Область Документ_ПОСБДС_Отправка
Процедура ДобавитьПОД_Документ_ПОСБДС_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ПОСБДС_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ПлатежныйОрдерСписаниеДенежныхСредств;
	ПравилоОбработки.ПриОбработке = "ПОД_Документ_ПОСБДС_Отправка_ПриОбработке";
	ПравилоОбработки.ВыборкаДанных = "ПОД_Документ_ПОСБДС_Отправка_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных = Истина;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПОСБДСПрочееСписание_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПОСБДСПереводНаДругойСчет_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПОСБДСРасчетыСКонтрагентами_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПОСБДСПрочиеРасходы_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПОСБДСПеречислениеЗП_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПОСБДСПлатежиВБюджет_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_ПОСБДС_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Документ_ПОСБДСРасчетыСКонтрагентами_Отправка = Ложь;
	ИспользованиеПКО.Документ_ПОСБДСПеречислениеЗП_Отправка        = Ложь;
	ИспользованиеПКО.Документ_ПОСБДСПереводНаДругойСчет_Отправка   = Ложь;
	ИспользованиеПКО.Документ_ПОСБДСПрочееСписание_Отправка        = Ложь;
	ИспользованиеПКО.Документ_ПОСБДСПрочиеРасходы_Отправка         = Ложь;
	ИспользованиеПКО.Документ_ПОСБДСПлатежиВБюджет_Отправка        = Ложь;
	
	ВидПрочегоСписания = "";
	ВидРасчетовСКонтрагентом = "";
	
	Если КомпонентыОбмена.УзелКорреспондента.ВариантНастройки <> "ОбменЗУПБП"    
		И КомпонентыОбмена.УзелКорреспондента.ВариантНастройки <> "ОбменЗУП31БП" 
		И КомпонентыОбмена.УзелКорреспондента.ВариантНастройки <> "ОбменУНФБП" Тогда
	
		Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПрочиеРасчетыСКонтрагентами Тогда
			Если Найти(ДанныеИБ.Комментарий, "#Таможенный платеж") Тогда
				ИспользованиеПКО.Документ_ПОСБДСПлатежиВБюджет_Отправка = Истина;
			Иначе
				СчетУчетаРасчетовСКонтрагентом = Неопределено;
				Если ДанныеИБ.РасшифровкаПлатежа.Количество() > 0 Тогда
					СчетУчетаРасчетовСКонтрагентом = ДанныеИБ.РасшифровкаПлатежа[0].СчетУчетаРасчетовСКонтрагентомБУ;
				КонецЕсли;
				Если СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Типовой.ДенежныеСредстваВПутиКонвертацияВалюты Тогда
					ИспользованиеПКО.Документ_СБДСКонвертацияВалюты_Отправка = Истина;
				Иначе
					ИспользованиеПКО.Документ_ПОСБДСРасчетыСКонтрагентами_Отправка = Истина;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПеречислениеНалога Тогда
			ИспользованиеПКО.Документ_ПОСБДСПлатежиВБюджет_Отправка = Истина;
		ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПереводНаДругойСчет Тогда
			ИспользованиеПКО.Документ_ПОСБДСПереводНаДругойСчет_Отправка = Истина;
		ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПрочееСписаниеБезналичныхДенежныхСредств Тогда
			ИспользованиеПКО.Документ_ПОСБДСПрочееСписание_Отправка = Истина;
		ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ОплатаПоставщику 
			ИЛИ ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПокупателю 
			ИЛИ ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.РасчетыПоКредитамИЗаймам Тогда
			ИспользованиеПКО.Документ_ПОСБДСРасчетыСКонтрагентами_Отправка = Истина;
		ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПеречислениеЗаработнойПлаты Тогда
			ИспользованиеПКО.Документ_ПОСБДСПеречислениеЗП_Отправка = Истина;
		КонецЕсли;
	
	КонецЕсли;
КонецПроцедуры

Функция ПОД_Документ_ПОСБДС_Отправка_ВыборкаДанных(КомпонентыОбмена)
	МассивВыборки = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Док.Ссылка
		|ИЗ
		|	Документ.ПлатежныйОрдерСписаниеДенежныхСредств КАК Док
		|ГДЕ
		|	Док.Проведен
		|	И Док.Дата >= &ДатаНачала 
		|	И Док.Дата <= &ДатаОкончания";
	
	Запрос.УстановитьПараметр("ДатаНачала", НачалоДня(КомпонентыОбмена.ПараметрыКонвертации.ДатаОстатков));
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(КомпонентыОбмена.ПараметрыКонвертации.ДатаОкончанияПериодаВыгрузкиДокументов));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		МассивВыборки.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат МассивВыборки;
КонецФункции
#КонецОбласти
#Область Документ_ПоступлениеТоваровУслуг_Отправка
Процедура ДобавитьПОД_Документ_ПоступлениеТоваровУслуг_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ПоступлениеТоваровУслуг_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ПоступлениеТоваровУслуг;
	ПравилоОбработки.ПриОбработке = "ПОД_Документ_ПоступлениеТоваровУслуг_Отправка_ПриОбработке";
	ПравилоОбработки.ВыборкаДанных = "ПОД_Документ_ПоступлениеТоваровУслуг_Отправка_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных = Истина;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПоступлениеТоваровУслуг_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_ПоступлениеТоваровУслуг_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Документ_ПоступлениеТоваровУслуг_Отправка = Ложь;
	
	Если КомпонентыОбмена.УзелКорреспондента.ВариантНастройки <> "ОбменЗУПБП"    
		И КомпонентыОбмена.УзелКорреспондента.ВариантНастройки <> "ОбменЗУП31БП" 
		И КомпонентыОбмена.УзелКорреспондента.ВариантНастройки <> "ОбменУНФБП" Тогда
		Если ДанныеИБ.ВидОперации <> Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку Тогда
			ИспользованиеПКО.Документ_ПоступлениеТоваровУслуг_Отправка = Истина;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Функция ПОД_Документ_ПоступлениеТоваровУслуг_Отправка_ВыборкаДанных(КомпонентыОбмена)
	МассивВыборки = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Док.Ссылка
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг КАК Док
		|ГДЕ
		|	Док.Проведен
		|	И Док.Дата >= &ДатаНачала 
		|	И Док.Дата <= &ДатаОкончания";
	
	Запрос.УстановитьПараметр("ДатаНачала", НачалоДня(КомпонентыОбмена.ПараметрыКонвертации.ДатаОстатков));
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(КомпонентыОбмена.ПараметрыКонвертации.ДатаОкончанияПериодаВыгрузкиДокументов));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		МассивВыборки.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат МассивВыборки;
КонецФункции
#КонецОбласти
#Область Документ_ПРС_Отправка
Процедура ДобавитьПОД_Документ_ПРС_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ПРС_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ПлатежноеПоручениеВходящее;
	ПравилоОбработки.ПриОбработке = "ПОД_Документ_ПРС_Отправка_ПриОбработке";
	ПравилоОбработки.ВыборкаДанных = "ПОД_Документ_ПРС_Отправка_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных = Истина;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПРСКонвертацияВалюты_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПРСПрочееПоступление_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПРСПрочиеДоходы_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПРСРасчетыСКонтрагентами_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПРСРасчетыССотрудниками_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_ПРС_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Документ_ПРСРасчетыСКонтрагентами_Отправка = Ложь;
	ИспользованиеПКО.Документ_ПРСРасчетыССотрудниками_Отправка = Ложь;
	ИспользованиеПКО.Документ_ПРСКонвертацияВалюты_Отправка = Ложь;
	ИспользованиеПКО.Документ_ПРСПрочееПоступление_Отправка = Ложь;
	ИспользованиеПКО.Документ_ПРСПрочиеДоходы_Отправка = Ложь;
	
	Если КомпонентыОбмена.УзелКорреспондента.ВариантНастройки <> "ОбменЗУПБП"    
		И КомпонентыОбмена.УзелКорреспондента.ВариантНастройки <> "ОбменЗУП31БП" Тогда
	
		Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПокупателя
			Или ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПоставщиком
			Или ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.РасчетыПоКредитамИЗаймам
			Или ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочиеРасчетыСКонтрагентами Тогда
	
			// Расчеты с контрагентами - из операций по покуптелям, поставщикам,
			// расчетам по кредитам (займам) и прочим расчетам с контрагентами
			ИспользованиеПКО.Документ_ПРСРасчетыСКонтрагентами_Отправка = Истина;
			
		ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПриобретениеИностраннойВалюты
			Или ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты Тогда
			
			// Конвертация валюты - из операций, связанных с конвертацией валюты
			ИспользованиеПКО.Документ_ПРСКонвертацияВалюты_Отправка = Истина;
			
		ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочееПоступлениеБезналичныхДенежныхСредств Тогда
			
			Если ДанныеИБ.СчетУчетаРасчетовСКонтрагентомБУ = ПланыСчетов.Типовой.ПрочиеДоходы Тогда
				
				// 6280
				ИспользованиеПКО.Документ_ПРСПрочиеДоходы_Отправка = Истина;
				
			ИначеЕсли ДанныеИБ.СчетУчетаРасчетовСКонтрагентомБУ = ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПодотчетныхЛиц Тогда
				
				// 1251
				// Расчеты с сотрудниками - из прочего поступления (расчеты с подотчеными лицами)
				ИспользованиеПКО.Документ_ПРСРасчетыССотрудниками_Отправка = Истина;
				
			ИначеЕсли СчетаРасчетовСКонтрагентами().Найти(ДанныеИБ.СчетУчетаРасчетовСКонтрагентомБУ) <> Неопределено Тогда
				
				// Расчеты с контрагентами - из прочего поступления
				ИспользованиеПКО.Документ_ПРСРасчетыСКонтрагентами_Отправка = Истина;
				
			Иначе 
				ИспользованиеПКО.Документ_ПРСПрочееПоступление_Отправка = Истина;
			КонецЕсли;
				
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Функция ПОД_Документ_ПРС_Отправка_ВыборкаДанных(КомпонентыОбмена)
	МассивВыборки = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Док.Ссылка
		|ИЗ
		|	Документ.ПлатежноеПоручениеВходящее КАК Док
		|ГДЕ
		|	Док.Проведен
		|	И Док.Дата >= &ДатаНачала 
		|	И Док.Дата <= &ДатаОкончания";
	
	Запрос.УстановитьПараметр("ДатаНачала", НачалоДня(КомпонентыОбмена.ПараметрыКонвертации.ДатаОстатков));
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(КомпонентыОбмена.ПараметрыКонвертации.ДатаОкончанияПериодаВыгрузкиДокументов));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		МассивВыборки.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат МассивВыборки;
КонецФункции
#КонецОбласти
#Область Документ_РеализацияТоваровУслуг_Отправка
Процедура ДобавитьПОД_Документ_РеализацияТоваровУслуг_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_РеализацияТоваровУслуг_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.РеализацияТоваровУслуг;
	ПравилоОбработки.ПриОбработке = "ПОД_Документ_РеализацияТоваровУслуг_Отправка_ПриОбработке";
	ПравилоОбработки.ВыборкаДанных = "ПОД_Документ_РеализацияТоваровУслуг_Отправка_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных = Истина;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РеализацияТоваровУслуг_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_РеализацияТоваровУслуг_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Документ_РеализацияТоваровУслуг_Отправка = Ложь;
	
	Если КомпонентыОбмена.УзелКорреспондента.ВариантНастройки <> "ОбменЗУПБП"    
		И КомпонентыОбмена.УзелКорреспондента.ВариантНастройки <> "ОбменЗУП31БП" 
		И КомпонентыОбмена.УзелКорреспондента.ВариантНастройки <> "ОбменУНФБП" Тогда
		Если ДанныеИБ.Товары.Количество() + ДанныеИБ.Услуги.Количество() > 0 Тогда
		//Если в документе заполнены только агентские услуги - не отправляем
			ИспользованиеПКО.Документ_РеализацияТоваровУслуг_Отправка = Истина;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Функция ПОД_Документ_РеализацияТоваровУслуг_Отправка_ВыборкаДанных(КомпонентыОбмена)
	Если ЗначениеЗаполнено(КомпонентыОбмена.ПараметрыКонвертации.ДатаОстатков) 
		И ЗначениеЗаполнено(КомпонентыОбмена.ПараметрыКонвертации.ДатаОкончанияПериодаВыгрузкиДокументов) Тогда
		
		МассивВыборки = Новый Массив;
	
		Запрос = Новый Запрос;
		Запрос.Текст = "
			|ВЫБРАТЬ
			|	Док.Ссылка
			|ИЗ
			|	Документ.РеализацияТоваровУслуг КАК Док
			|ГДЕ
			|	Док.Проведен
			|	И Док.Дата >= &ДатаНачала 
			|	И Док.Дата <= &ДатаОкончания";
	
		Запрос.УстановитьПараметр("ДатаНачала", НачалоДня(КомпонентыОбмена.ПараметрыКонвертации.ДатаОстатков));
		Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(КомпонентыОбмена.ПараметрыКонвертации.ДатаОкончанияПериодаВыгрузкиДокументов));
	
		Выборка = Запрос.Выполнить().Выбрать();
	
		Пока Выборка.Следующий() Цикл
			МассивВыборки.Добавить(Выборка.Ссылка);
		КонецЦикла;
	
		Возврат МассивВыборки;
	
	КонецЕсли;
КонецФункции
#КонецОбласти
#Область Документ_РКО_Отправка
Процедура ДобавитьПОД_Документ_РКО_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_РКО_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.РасходныйКассовыйОрдер;
	ПравилоОбработки.ПриОбработке = "ПОД_Документ_РКО_Отправка_ПриОбработке";
	ПравилоОбработки.ВыборкаДанных = "ПОД_Документ_РКО_Отправка_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных = Истина;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РКОРасчетыСКонтрагентами_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РКОПрочийРасход_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РКОРасчетыССотрудниками_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РКОНаБанковскийСчет_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РКОПрочаяВыдача_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РКОКонвертацияВалюты_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РКОВыплатаЗарплаты_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_РКО_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Документ_РКОРасчетыСКонтрагентами_Отправка = Ложь;
	ИспользованиеПКО.Документ_РКОВыплатаЗарплаты_Отправка = Ложь;
	ИспользованиеПКО.Документ_РКОРасчетыССотрудниками_Отправка = Ложь;
	ИспользованиеПКО.Документ_РКОНаБанковскийСчет_Отправка = Ложь;
	ИспользованиеПКО.Документ_РКОПрочийРасход_Отправка = Ложь;
	ИспользованиеПКО.Документ_РКОКонвертацияВалюты_Отправка = Ложь;
	ИспользованиеПКО.Документ_РКОПрочаяВыдача_Отправка = Ложь;
	
	Если КомпонентыОбмена.УзелКорреспондента.ВариантНастройки <> "ОбменЗУПБП"    
		И КомпонентыОбмена.УзелКорреспондента.ВариантНастройки <> "ОбменЗУП31БП" Тогда
	
		Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаПоставщику
			Или ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателю
			Или ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИЗаймамСКонтрагентами Тогда
			
			// Расчеты с контрагентами - из операций по покуптелям, поставщикам, расчетам по кредитам (займам)
			ИспользованиеПКО.Документ_РКОРасчетыСКонтрагентами_Отправка = Истина;
			
		ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям
			Или ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику Тогда
			
			ИспользованиеПКО.Документ_РКОВыплатаЗарплаты_Отправка = Истина;
			
		ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетнику Тогда
			
			// Расчеты с сотрудниками - из операций по выплате депонентов и заработной платы, расчетов с подотчетниками
			ИспользованиеПКО.Документ_РКОРасчетыССотрудниками_Отправка = Истина;
			
		ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРКО.ИнкассацияДенежныхСредств
			Или ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк Тогда
	
			// Перемещение на банковский счет - из операций инкассации и взноса наличными в банк
			ИспользованиеПКО.Документ_РКОНаБанковскийСчет_Отправка = Истина;
			
		ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРКО.РасходДенежныхСредствПрочее Тогда
	
			Если ДанныеИБ.СчетУчетаРасчетовСКонтрагентомБУ = ПланыСчетов.Типовой.ОсновноеПроизводство
				Или ДанныеИБ.СчетУчетаРасчетовСКонтрагентомБУ = ПланыСчетов.Типовой.ВспомогательныеПроизводства
				Или ДанныеИБ.СчетУчетаРасчетовСКонтрагентомБУ = ПланыСчетов.Типовой.НакладныеРасходы
				Или ДанныеИБ.СчетУчетаРасчетовСКонтрагентомБУ = ПланыСчетов.Типовой.РасходыПоРеализацииПродукцииИОказаниюУслуг Тогда
				
				// 20.xx, 23, 25, 26, 44.xx, 91.02
				ИспользованиеПКО.Документ_РКОПрочийРасход_Отправка = Истина;
			
			ИначеЕсли ДанныеИБ.СчетУчетаРасчетовСКонтрагентомБУ = ПланыСчетов.Типовой.ДенежныеСредстваВПутиКонвертацияВалюты Тогда
				
				// 57.02, 57.22
				ИспользованиеПКО.Документ_РКОКонвертацияВалюты_Отправка = Истина;
			Иначе
				ИспользованиеПКО.Документ_РКОПрочаяВыдача_Отправка = Истина;
			КонецЕсли;
	
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Функция ПОД_Документ_РКО_Отправка_ВыборкаДанных(КомпонентыОбмена)
	МассивВыборки = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Док.Ссылка
		|ИЗ
		|	Документ.РасходныйКассовыйОрдер КАК Док
		|ГДЕ
		|	Док.Проведен
		|	И Док.Дата >= &ДатаНачала 
		|	И Док.Дата <= &ДатаОкончания";
	
	Запрос.УстановитьПараметр("ДатаНачала", НачалоДня(КомпонентыОбмена.ПараметрыКонвертации.ДатаОстатков));
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(КомпонентыОбмена.ПараметрыКонвертации.ДатаОкончанияПериодаВыгрузкиДокументов));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		МассивВыборки.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат МассивВыборки;
КонецФункции
#КонецОбласти
#Область Документ_СписаниеТоваров_Отправка
Процедура ДобавитьПОД_Документ_СписаниеТоваров_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_СписаниеТоваров_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.СписаниеТоваров;
	ПравилоОбработки.ПриОбработке = "ПОД_Документ_СписаниеТоваров_Отправка_ПриОбработке";
	ПравилоОбработки.ВыборкаДанных = "ПОД_Документ_СписаниеТоваров_Отправка_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных = Истина;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СписаниеТоваров_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_СписаниеТоваров_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если КомпонентыОбмена.УзелКорреспондента.ВариантНастройки = "ОбменЗУПБП"   
		ИЛИ КомпонентыОбмена.УзелКорреспондента.ВариантНастройки = "ОбменЗУП31БП" 
		ИЛИ КомпонентыОбмена.УзелКорреспондента.ВариантНастройки = "ОбменУНФБП" Тогда
		ИспользованиеПКО.Документ_СписаниеТоваров_Отправка = Ложь;
	Иначе
		ИспользованиеПКО.Документ_СписаниеТоваров_Отправка = Истина;
	КонецЕсли;
КонецПроцедуры

Функция ПОД_Документ_СписаниеТоваров_Отправка_ВыборкаДанных(КомпонентыОбмена)
	МассивВыборки = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Док.Ссылка
		|ИЗ
		|	Документ.СписаниеТоваров КАК Док
		|ГДЕ
		|	Док.Проведен
		|	И Док.Дата >= &ДатаНачала 
		|	И Док.Дата <= &ДатаОкончания";
	
	Запрос.УстановитьПараметр("ДатаНачала", НачалоДня(КомпонентыОбмена.ПараметрыКонвертации.ДатаОстатков));
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(КомпонентыОбмена.ПараметрыКонвертации.ДатаОкончанияПериодаВыгрузкиДокументов));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		МассивВыборки.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат МассивВыборки;
КонецФункции
#КонецОбласти
#Область Документ_СРС_Отправка
Процедура ДобавитьПОД_Документ_СРС_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_СРС_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ПлатежноеПоручениеИсходящее;
	ПравилоОбработки.ПриОбработке = "ПОД_Документ_СРС_Отправка_ПриОбработке";
	ПравилоОбработки.ВыборкаДанных = "ПОД_Документ_СРС_Отправка_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных = Истина;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДСПрочееСписание_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДСРасчетыССотрудниками_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДСПереводНаДругойСчет_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДСРасчетыСКонтрагентами_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДСПрочиеРасходы_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДСПеречислениеЗП_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДСПеречислениеЗПНаЛС_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДСПлатежиВБюджет_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_СРС_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Документ_СБДСРасчетыССотрудниками_Отправка  = Ложь;
	ИспользованиеПКО.Документ_СБДСРасчетыСКонтрагентами_Отправка = Ложь;
	ИспользованиеПКО.Документ_СБДСПеречислениеЗП_Отправка        = Ложь;
	ИспользованиеПКО.Документ_СБДСПеречислениеЗПНаЛС_Отправка    = Ложь;
	ИспользованиеПКО.Документ_СБДСПереводНаДругойСчет_Отправка   = Ложь;
	ИспользованиеПКО.Документ_СБДСПрочееСписание_Отправка        = Ложь;
	ИспользованиеПКО.Документ_СБДСПрочиеРасходы_Отправка         = Ложь;
	ИспользованиеПКО.Документ_СБДСПлатежиВБюджет_Отправка        = Ложь;
	
	ВидПрочегоСписания = "";
	ВидРасчетовСКонтрагентом = "";
	Если КомпонентыОбмена.УзелКорреспондента.ВариантНастройки <> "ОбменЗУПБП"    
		И КомпонентыОбмена.УзелКорреспондента.ВариантНастройки <> "ОбменЗУП31БП" Тогда
		Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеДенежныхСредствПодотчетнику Тогда
			ИспользованиеПКО.Документ_СБДСРасчетыССотрудниками_Отправка = Истина;
		ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПрочиеРасчетыСКонтрагентами Тогда
			Если Найти(ДанныеИБ.Комментарий, "#Таможенный платеж ") Тогда
				ИспользованиеПКО.Документ_СБДСПлатежиВБюджет_Отправка = Истина;
			Иначе
				СчетУчетаРасчетовСКонтрагентом = Неопределено;
				Если ДанныеИБ.РасшифровкаПлатежа.Количество() > 0 Тогда
					СчетУчетаРасчетовСКонтрагентом = ДанныеИБ.РасшифровкаПлатежа[0].СчетУчетаРасчетовСКонтрагентомБУ;
				КонецЕсли;
				Если СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Типовой.ДенежныеСредстваВПутиКонвертацияВалюты Тогда
					ИспользованиеПКО.Документ_СБДСКонвертацияВалюты_Отправка = Истина;
				Иначе
					ИспользованиеПКО.Документ_СБДСРасчетыСКонтрагентами_Отправка = Истина;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеНалога Тогда
			ИспользованиеПКО.Документ_СБДСПлатежиВБюджет_Отправка = Истина;
		ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет Тогда
			ИспользованиеПКО.Документ_СБДСПереводНаДругойСчет_Отправка = Истина;
		ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПрочееСписаниеБезналичныхДенежныхСредств Тогда
			ИспользованиеПКО.Документ_СБДСПрочееСписание_Отправка = Истина;
		ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ОплатаПоставщику 
			ИЛИ ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ВозвратДенежныхСредствПокупателю 
			ИЛИ ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийППИсходящее.РасчетыПоКредитамИЗаймамСКонтрагентами Тогда
			ИспользованиеПКО.Документ_СБДСРасчетыСКонтрагентами_Отправка = Истина;
		ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеЗаработнойПлаты Тогда
			ИспользованиеПКО.Документ_СБДСПеречислениеЗП_Отправка = Истина;
		ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеПоИсполнительнымЛистам Тогда
			ИспользованиеПКО.Документ_СБДСПрочееСписание_Отправка = Истина;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Функция ПОД_Документ_СРС_Отправка_ВыборкаДанных(КомпонентыОбмена)
	МассивВыборки = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Док.Ссылка
		|ИЗ
		|	Документ.ПлатежноеПоручениеИсходящее КАК Док
		|ГДЕ
		|	Док.Проведен
		|	И Док.Дата >= &ДатаНачала 
		|	И Док.Дата <= &ДатаОкончания";
	
	Запрос.УстановитьПараметр("ДатаНачала", НачалоДня(КомпонентыОбмена.ПараметрыКонвертации.ДатаОстатков));
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(КомпонентыОбмена.ПараметрыКонвертации.ДатаОкончанияПериодаВыгрузкиДокументов));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		МассивВыборки.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат МассивВыборки;
КонецФункции
#КонецОбласти
#Область Документ_ТаможеннаяДекларация_Отправка
Процедура ДобавитьПОД_Документ_ТаможеннаяДекларация_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ТаможеннаяДекларация_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ГТДИмпорт;
	ПравилоОбработки.ПриОбработке = "ПОД_Документ_ТаможеннаяДекларация_Отправка_ПриОбработке";
	ПравилоОбработки.ВыборкаДанных = "ПОД_Документ_ТаможеннаяДекларация_Отправка_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных = Истина;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ТаможеннаяДекларация_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_ТаможеннаяДекларация_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если КомпонентыОбмена.УзелКорреспондента.ВариантНастройки = "ОбменЗУПБП"   
		ИЛИ КомпонентыОбмена.УзелКорреспондента.ВариантНастройки = "ОбменЗУП31БП" 
		ИЛИ КомпонентыОбмена.УзелКорреспондента.ВариантНастройки = "ОбменУНФБП" Тогда
		ИспользованиеПКО.Документ_ТаможеннаяДекларация_Отправка = Ложь;
	Иначе
		ИспользованиеПКО.Документ_ТаможеннаяДекларация_Отправка = Истина;
	КонецЕсли;
КонецПроцедуры

Функция ПОД_Документ_ТаможеннаяДекларация_Отправка_ВыборкаДанных(КомпонентыОбмена)
	МассивВыборки = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Док.Ссылка
		|ИЗ
		|	Документ.ГТДИмпорт КАК Док
		|ГДЕ
		|	Док.Проведен
		|	И Док.Дата >= &ДатаНачала 
		|	И Док.Дата <= &ДатаОкончания";
	
	Запрос.УстановитьПараметр("ДатаНачала", НачалоДня(КомпонентыОбмена.ПараметрыКонвертации.ДатаОстатков));
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(КомпонентыОбмена.ПараметрыКонвертации.ДатаОкончанияПериодаВыгрузкиДокументов));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		МассивВыборки.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат МассивВыборки;
КонецФункции
#КонецОбласти
#Область Документ_УстановкаЦенНоменклатуры_Отправка
Процедура ДобавитьПОД_Документ_УстановкаЦенНоменклатуры_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_УстановкаЦенНоменклатуры_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.УстановкаЦенНоменклатуры;
	ПравилоОбработки.ПриОбработке = "ПОД_Документ_УстановкаЦенНоменклатуры_Отправка_ПриОбработке";
	ПравилоОбработки.ВыборкаДанных = "ПОД_Документ_УстановкаЦенНоменклатуры_Отправка_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных = Истина;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_УстановкаЦенНоменклатуры_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_УстановкаЦенНоменклатуры_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если КомпонентыОбмена.УзелКорреспондента.ВариантНастройки = "ОбменЗУПБП"   
		ИЛИ КомпонентыОбмена.УзелКорреспондента.ВариантНастройки = "ОбменЗУП31БП" 
		ИЛИ КомпонентыОбмена.УзелКорреспондента.ВариантНастройки = "ОбменУНФБП" Тогда
		ИспользованиеПКО.Документ_УстановкаЦенНоменклатуры_Отправка = Ложь;
	Иначе
		ИспользованиеПКО.Документ_УстановкаЦенНоменклатуры_Отправка = Истина;
	КонецЕсли;
КонецПроцедуры

Функция ПОД_Документ_УстановкаЦенНоменклатуры_Отправка_ВыборкаДанных(КомпонентыОбмена)
	МассивВыборки = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Док.Ссылка
		|ИЗ
		|	Документ.УстановкаЦенНоменклатуры КАК Док
		|ГДЕ
		|	Док.Проведен
		|	И Док.Дата >= &ДатаНачала 
		|	И Док.Дата <= &ДатаОкончания";
	
	Запрос.УстановитьПараметр("ДатаНачала", НачалоДня(КомпонентыОбмена.ПараметрыКонвертации.ДатаОстатков));
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(КомпонентыОбмена.ПараметрыКонвертации.ДатаОкончанияПериодаВыгрузкиДокументов));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		МассивВыборки.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат МассивВыборки;
КонецФункции
#КонецОбласти
#Область Справочник_Банки_Отправка
Процедура ДобавитьПОД_Справочник_Банки_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_Банки_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Банки;
	ПравилоОбработки.ПриОбработке = "ПОД_Справочник_Банки_Отправка_ПриОбработке";
	ПравилоОбработки.ВыборкаДанных = "ПОД_Справочник_Банки_Отправка_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных = Истина;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Банки");
КонецПроцедуры

Процедура ПОД_Справочник_Банки_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если ДанныеИБ<>Неопределено И ДанныеИБ.ЭтоГруппа Тогда
		ИспользованиеПКО.Справочник_Банки = Ложь;	
	КонецЕсли;
КонецПроцедуры

Функция ПОД_Справочник_Банки_Отправка_ВыборкаДанных(КомпонентыОбмена)
	Запрос = Новый Запрос();
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Банки.Код,
		|	Банки.Ссылка,
		|	Банки.Наименование,
		|	Банки.КоррСчет,
		|	Банки.Город,
		|	Банки.Адрес,
		|	Банки.ЭтоГруппа,
		|	Банки.Телефоны
		|ИЗ
		|	Справочник.Банки КАК Банки
		|ГДЕ
		|	НЕ Банки.ЭтоГруппа";
		
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	МассивВыборки = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		Структура = Новый Структура("Код,Наименование,КоррСчет,Город,Адрес,Телефоны,Ссылка,ЭтоГруппа");
		ЗаполнитьЗначенияСвойств(Структура, Выборка);	
	
		МассивВыборки.Добавить(Структура);	
	КонецЦикла;
	
	Возврат МассивВыборки;
КонецФункции
#КонецОбласти
#Область Справочник_БанковскиеСчета_Отправка
Процедура ДобавитьПОД_Справочник_БанковскиеСчета_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_БанковскиеСчета_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.БанковскиеСчета;
	ПравилоОбработки.ОчисткаДанных = Истина;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_БанковскиеСчета_Отправка");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Валюты_Отправка
Процедура ДобавитьПОД_Справочник_Валюты_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_Валюты_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Валюты;
	ПравилоОбработки.ОчисткаДанных = Истина;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Валюты");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ВидыПоступления_Отправка
Процедура ДобавитьПОД_Справочник_ВидыПоступления_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_ВидыПоступления_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.ВидыПоступления;
	ПравилоОбработки.ПриОбработке = "ПОД_Справочник_ВидыПоступления_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных = Истина;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ВидыПоступления");
КонецПроцедуры

Процедура ПОД_Справочник_ВидыПоступления_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если КомпонентыОбмена.УзелКорреспондента.ВариантНастройки = "ОбменЗУПБП"   
		ИЛИ КомпонентыОбмена.УзелКорреспондента.ВариантНастройки = "ОбменЗУП31БП" Тогда
		ИспользованиеПКО.Справочник_ВидыПоступления = Ложь;
	Иначе
		ИспользованиеПКО.Справочник_ВидыПоступления = Истина;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_ВидыРеализации_Отправка
Процедура ДобавитьПОД_Справочник_ВидыРеализации_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_ВидыРеализации_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.ВидыРеализации;
	ПравилоОбработки.ПриОбработке = "ПОД_Справочник_ВидыРеализации_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных = Истина;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ВидыРеализации");
КонецПроцедуры

Процедура ПОД_Справочник_ВидыРеализации_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если КомпонентыОбмена.УзелКорреспондента.ВариантНастройки = "ОбменЗУПБП"  
		ИЛИ КомпонентыОбмена.УзелКорреспондента.ВариантНастройки = "ОбменЗУП31БП" Тогда
		ИспользованиеПКО.Справочник_ВидыРеализации = Ложь;
	Иначе
		ИспользованиеПКО.Справочник_ВидыРеализации = Истина;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_ДоговорыКонтрагентов_Отправка
Процедура ДобавитьПОД_Справочник_ДоговорыКонтрагентов_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_ДоговорыКонтрагентов_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.ДоговорыКонтрагентов;
	ПравилоОбработки.ПриОбработке = "ПОД_Справочник_ДоговорыКонтрагентов_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных = Истина;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ДоговорыКонтрагентов_Отправка");
КонецПроцедуры

Процедура ПОД_Справочник_ДоговорыКонтрагентов_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если КомпонентыОбмена.УзелКорреспондента.ВариантНастройки = "ОбменЗУПБП"   
		ИЛИ КомпонентыОбмена.УзелКорреспондента.ВариантНастройки = "ОбменЗУП31БП" Тогда
			ИспользованиеПКО.Справочник_ДоговорыКонтрагентов_Отправка = Ложь;
		Иначе
			ИспользованиеПКО.Справочник_ДоговорыКонтрагентов_Отправка = Истина;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_Кассы_Отправка
Процедура ДобавитьПОД_Справочник_Кассы_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_Кассы_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Кассы;
	ПравилоОбработки.ПриОбработке = "ПОД_Справочник_Кассы_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных = Истина;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Кассы_Отправка");
КонецПроцедуры

Процедура ПОД_Справочник_Кассы_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если КомпонентыОбмена.УзелКорреспондента.ВариантНастройки = "ОбменЗУПБП"  
		ИЛИ КомпонентыОбмена.УзелКорреспондента.ВариантНастройки = "ОбменЗУП31БП" Тогда
		ИспользованиеПКО.Справочник_Кассы_Отправка = Ложь;
	Иначе
		ИспользованиеПКО.Справочник_Кассы_Отправка = Истина;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_КлассификаторЕдиницИзмерения
Процедура ДобавитьПОД_Справочник_КлассификаторЕдиницИзмерения(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_КлассификаторЕдиницИзмерения";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.КлассификаторЕдиницИзмерения;
	ПравилоОбработки.ОчисткаДанных = Истина;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ЕдиницыИзмерения");
КонецПроцедуры
#КонецОбласти
#Область Справочник_КлассификаторСтранМира_Отправка
Процедура ДобавитьПОД_Справочник_КлассификаторСтранМира_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_КлассификаторСтранМира_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.КлассификаторСтранМира;
	ПравилоОбработки.ОчисткаДанных = Истина;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_КлассификаторСтранМира");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Контрагенты_Отправка
Процедура ДобавитьПОД_Справочник_Контрагенты_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_Контрагенты_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Контрагенты;
	ПравилоОбработки.ПриОбработке = "ПОД_Справочник_Контрагенты_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных = Истина;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Контрагенты_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_КонтрагентыГруппа");
КонецПроцедуры

Процедура ПОД_Справочник_Контрагенты_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Справочник_Контрагенты_Отправка = Ложь;
	ИспользованиеПКО.Справочник_КонтрагентыГруппа = Ложь;
	
	
	Если ДанныеИБ.ЭтоГруппа Тогда
		ИспользованиеПКО.Справочник_КонтрагентыГруппа = Истина;
	Иначе
		ИспользованиеПКО.Справочник_Контрагенты_Отправка = Истина;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_Номенклатура_Отправка
Процедура ДобавитьПОД_Справочник_Номенклатура_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_Номенклатура_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Номенклатура;
	ПравилоОбработки.ПриОбработке = "ПОД_Справочник_Номенклатура_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных = Истина;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Номенклатура_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_НоменклатураГруппа_Отправка");
КонецПроцедуры

Процедура ПОД_Справочник_Номенклатура_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Справочник_Номенклатура_Отправка = Ложь;
	ИспользованиеПКО.Справочник_НоменклатураГруппа_Отправка = Ложь;
	
	Если КомпонентыОбмена.УзелКорреспондента.ВариантНастройки <> "ОбменЗУПБП"    
		И КомпонентыОбмена.УзелКорреспондента.ВариантНастройки <> "ОбменЗУП31БП" Тогда
		Если ДанныеИБ.ЭтоГруппа Тогда
			ИспользованиеПКО.Справочник_НоменклатураГруппа_Отправка = Истина;
		Иначе
			ИспользованиеПКО.Справочник_Номенклатура_Отправка = Истина;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_Организации_Отправка
Процедура ДобавитьПОД_Справочник_Организации_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_Организации_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Организации;
	ПравилоОбработки.ОчисткаДанных = Истина;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Организации_Отправка");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Подразделения_Отправка
Процедура ДобавитьПОД_Справочник_Подразделения_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_Подразделения_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.ПодразделенияОрганизаций;
	ПравилоОбработки.ОчисткаДанных = Истина;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Подразделения_Отправка");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Пользователи_Отправка
Процедура ДобавитьПОД_Справочник_Пользователи_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_Пользователи_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Пользователи;
	ПравилоОбработки.ОчисткаДанных = Истина;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Пользователи");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Склады_Отправка
Процедура ДобавитьПОД_Справочник_Склады_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_Склады_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Склады;
	ПравилоОбработки.ПриОбработке = "ПОД_Справочник_Склады_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных = Истина;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Склады_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СкладыГруппа");
КонецПроцедуры

Процедура ПОД_Справочник_Склады_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Справочник_Склады_Отправка = Ложь;
	ИспользованиеПКО.Справочник_СкладыГруппа = Ложь;
	
	Если КомпонентыОбмена.УзелКорреспондента.ВариантНастройки = "ОбменЗУПБП"   
		ИЛИ КомпонентыОбмена.УзелКорреспондента.ВариантНастройки = "ОбменЗУП31БП" Тогда
		Если ДанныеИБ.ЭтоГруппа Тогда
			ИспользованиеПКО.Справочник_СкладыГруппа = Истина;
		Иначе
			ИспользованиеПКО.Справочник_Склады_Отправка = Истина;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_СтатьиДДС_Отправка
Процедура ДобавитьПОД_Справочник_СтатьиДДС_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_СтатьиДДС_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.СтатьиДвиженияДенежныхСредств;
	ПравилоОбработки.ОчисткаДанных = Истина;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СтатьиДДС");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ТипыЦен
Процедура ДобавитьПОД_Справочник_ТипыЦен(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_ТипыЦен";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.ТипыЦенНоменклатуры;
	ПравилоОбработки.ПриОбработке = "ПОД_Справочник_ТипыЦен_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных = Истина;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ТипыЦен");
КонецПроцедуры

Процедура ПОД_Справочник_ТипыЦен_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если КомпонентыОбмена.УзелКорреспондента.ВариантНастройки = "ОбменЗУПБП"  
		ИЛИ КомпонентыОбмена.УзелКорреспондента.ВариантНастройки = "ОбменЗУП31БП" Тогда
		ИспользованиеПКО.Справочник_ТипыЦен = Ложь;
	Иначе
		ИспользованиеПКО.Справочник_ТипыЦен = Истина;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_ФизическиеЛица_Отправка
Процедура ДобавитьПОД_Справочник_ФизическиеЛица_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_ФизическиеЛица_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.ФизическиеЛица;
	ПравилоОбработки.ПриОбработке = "ПОД_Справочник_ФизическиеЛица_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных = Истина;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ФизическиеЛица_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ФизическиеЛицаГруппа_Отправка");
КонецПроцедуры

Процедура ПОД_Справочник_ФизическиеЛица_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Справочник_ФизическиеЛица_Отправка = Не ДанныеИБ.ЭтоГруппа;
	ИспользованиеПКО.Справочник_ФизическиеЛицаГруппа_Отправка = ДанныеИБ.ЭтоГруппа;
КонецПроцедуры
#КонецОбласти
#КонецОбласти
#Область Получение
#Область Документ_АвансовыйОтчет
Процедура ДобавитьПОД_Документ_АвансовыйОтчет(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_АвансовыйОтчет";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.АвансовыйОтчет";
	ПравилоОбработки.ПриОбработке = "ПОД_Документ_АвансовыйОтчет_ПриОбработке";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_АвансовыйОтчет_Получение");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_АвансовыйОтчет_Получение_ЗУП");
КонецПроцедуры

Процедура ПОД_Документ_АвансовыйОтчет_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Документ_АвансовыйОтчет_Получение_ЗУП = Ложь;
	ИспользованиеПКО.Документ_АвансовыйОтчет_Получение = Ложь;
	
	Если КомпонентыОбмена.УзелКорреспондента.ВариантНастройки = "ОбменЗУПБП" 
		ИЛИ КомпонентыОбмена.УзелКорреспондента.ВариантНастройки = "ОбменЗУП31БП" Тогда
		ИспользованиеПКО.Документ_АвансовыйОтчет_Получение_ЗУП = Истина;
		ИспользованиеПКО.Документ_АвансовыйОтчет_Получение = Ложь;
	Иначе
		ИспользованиеПКО.Документ_АвансовыйОтчет_Получение_ЗУП = Ложь;
		ИспользованиеПКО.Документ_АвансовыйОтчет_Получение = Истина;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_АннулированиеПодарочныхСертификатов_Получение
Процедура ДобавитьПОД_Документ_АннулированиеПодарочныхСертификатов_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_АннулированиеПодарочныхСертификатов_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.АннулированиеПодарочныхСертификатов";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("АннулированиеПодарочныхСертификатов_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_ВозвратПодарочныхСертификатов_Получение
Процедура ДобавитьПОД_Документ_ВозвратПодарочныхСертификатов_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ВозвратПодарочныхСертификатов_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.ВозвратПодарочныхСертификатов";
	ПравилоОбработки.ПриОбработке = "ПОД_Документ_ВозвратПодарочныхСертификатов_Получение_ПриОбработке";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("ВозвратПодарочныхСертификатов_ВозвратНаБанкКарту");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("ВозвратПодарочныхСертификатов_ВозвратНаличными");
КонецПроцедуры

Процедура ПОД_Документ_ВозвратПодарочныхСертификатов_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	Если ДанныеXDTO.Свойство("ОплатаПлатежнымиКартами") И ДанныеXDTO.ОплатаПлатежнымиКартами.Количество() > 0 Тогда
		ИспользованиеПКО.ВозвратПодарочныхСертификатов_ВозвратНаБанкКарту = Истина;
		ИспользованиеПКО.ВозвратПодарочныхСертификатов_ВозвратНаличными = Ложь;
	Иначе
		ИспользованиеПКО.ВозвратПодарочныхСертификатов_ВозвратНаБанкКарту = Ложь;
		ИспользованиеПКО.ВозвратПодарочныхСертификатов_ВозвратНаличными = Истина;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ВозвратТоваровОтПокупателя
Процедура ДобавитьПОД_Документ_ВозвратТоваровОтПокупателя(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ВозвратТоваровОтПокупателя";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.ВозвратТоваровОтПокупателя";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ВозвратТоваровОтПокупателя");
КонецПроцедуры
#КонецОбласти
#Область Документ_ВозвратТоваровПоставщику
Процедура ДобавитьПОД_Документ_ВозвратТоваровПоставщику(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ВозвратТоваровПоставщику";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.ВозвратТоваровПоставщику";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ВозвратТоваровПоставщику");
КонецПроцедуры
#КонецОбласти
#Область Документ_ДепонированиеЗаработнойПлаты_ЗУП
Процедура ДобавитьПОД_Документ_ДепонированиеЗаработнойПлаты_ЗУП(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ДепонированиеЗаработнойПлаты_ЗУП";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.ЗаявкаНаРасходДСВыплатаЗарплаты";
	ПравилоОбработки.ПриОбработке = "ПОД_Документ_ДепонированиеЗаработнойПлаты_ЗУП_ПриОбработке";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ДепонированиеЗаработнойПлаты_ЗУП");
КонецПроцедуры

Процедура ПОД_Документ_ДепонированиеЗаработнойПлаты_ЗУП_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	Если КомпонентыОбмена.УзелКорреспондента.ВариантНастройки = "ОбменЗУП31БП" Тогда
		ИспользованиеПКО.Документ_ДепонированиеЗаработнойПлаты_ЗУП = Истина;
	Иначе
		ИспользованиеПКО.Документ_ДепонированиеЗаработнойПлаты_ЗУП = Ложь;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ЗаказКлиента_Получение
Процедура ДобавитьПОД_Документ_ЗаказКлиента_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ЗаказКлиента_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.ЗаказКлиента";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ЗаказКлиента_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_ИнвентаризацияТоваров
Процедура ДобавитьПОД_Документ_ИнвентаризацияТоваров(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ИнвентаризацияТоваров";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.ИнвентаризацияТоваров";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ИнвентаризацияТоваровНаСкладе");
КонецПроцедуры
#КонецОбласти
#Область Документ_КорректировкаДолга_Получение
Процедура ДобавитьПОД_Документ_КорректировкаДолга_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_КорректировкаДолга_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.КорректировкаДолга";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_КорректировкаДолга_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_НачислениеОценочныхОбязательств_ЗУП
Процедура ДобавитьПОД_Документ_НачислениеОценочныхОбязательств_ЗУП(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_НачислениеОценочныхОбязательств_ЗУП";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.НачислениеОценочныхОбязательствПоОтпускам";
	ПравилоОбработки.ПриОбработке = "ПОД_Документ_НачислениеОценочныхОбязательств_ЗУП_ПриОбработке";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_НачислениеОценочныхОбязательств_ЗУП");
КонецПроцедуры

Процедура ПОД_Документ_НачислениеОценочныхОбязательств_ЗУП_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	Если КомпонентыОбмена.УзелКорреспондента.ВариантНастройки = "ОбменЗУП31БП" Тогда
		ИспользованиеПКО.Документ_НачислениеОценочныхОбязательств_ЗУП = Истина;
	Иначе
		ИспользованиеПКО.Документ_НачислениеОценочныхОбязательств_ЗУП = Ложь;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ОперацияПоПлатежнойКарте
Процедура ДобавитьПОД_Документ_ОперацияПоПлатежнойКарте(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ОперацияПоПлатежнойКарте";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.ОперацияПоПлатежнойКарте";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОперацияПоПлатежнойКарте_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_ОприходованиеТоваров
Процедура ДобавитьПОД_Документ_ОприходованиеТоваров(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ОприходованиеТоваров";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.ОприходованиеТоваров";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОприходованиеТоваров_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_ОтражениеЗарплатыВБухучете_Получение_ЗУП
Процедура ДобавитьПОД_Документ_ОтражениеЗарплатыВБухучете_Получение_ЗУП(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ОтражениеЗарплатыВБухучете_Получение_ЗУП";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.ОтражениеЗарплатыВФинансовомУчете";
	ПравилоОбработки.ПриОбработке = "ПОД_Документ_ОтражениеЗарплатыВБухучете_Получение_ЗУП_ПриОбработке";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОтражениеЗарплатыВБухучете_Получение_ЗУП");
КонецПроцедуры

Процедура ПОД_Документ_ОтражениеЗарплатыВБухучете_Получение_ЗУП_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	Если КомпонентыОбмена.УзелКорреспондента.ВариантНастройки = "ОбменЗУПБП" 
		ИЛИ КомпонентыОбмена.УзелКорреспондента.ВариантНастройки = "ОбменЗУП31БП" Тогда
		ИспользованиеПКО.Документ_ОтражениеЗарплатыВБухучете_Получение_ЗУП = Истина;
	Иначе
		ИспользованиеПКО.Документ_ОтражениеЗарплатыВБухучете_Получение_ЗУП = Ложь;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ОтчетБанкаПоОперациямЭквайринга_Получение
Процедура ДобавитьПОД_Документ_ОтчетБанкаПоОперациямЭквайринга_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ОтчетБанкаПоОперациямЭквайринга_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.ОтчетБанкаПоОперациямЭквайринга";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОтчетБанкаПоОперациямЭквайринга_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_ОтчетОРозничныхПродажах_Получение
Процедура ДобавитьПОД_Документ_ОтчетОРозничныхПродажах_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ОтчетОРозничныхПродажах_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.ОтчетОРозничныхПродажах";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОтчетОРозничныхПродажах_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_ОтчетПроизводстваЗаСмену_Получение
Процедура ДобавитьПОД_Документ_ОтчетПроизводстваЗаСмену_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ОтчетПроизводстваЗаСмену_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.ВыпускПродукции";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОтчетПроизводстваЗаСмену_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_ПБДСВзносыИОтчисления_Получение_ЗУП
Процедура ДобавитьПОД_Документ_ПБДСВзносыИОтчисления_Получение_ЗУП(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ПБДСВзносыИОтчисления_Получение_ЗУП";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.ПБДСВозвратВзносовИОтчислений";
	ПравилоОбработки.ПриОбработке = "ПОД_Документ_ПБДСВзносыИОтчисления_Получение_ЗУП_ПриОбработке";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПБДСВзносыИОтчисления_Получение_ЗУП");
КонецПроцедуры

Процедура ПОД_Документ_ПБДСВзносыИОтчисления_Получение_ЗУП_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	Если КомпонентыОбмена.УзелКорреспондента.ВариантНастройки = "ОбменЗУП31БП" Тогда
		ИспользованиеПКО.Документ_ПБДСВзносыИОтчисления_Получение_ЗУП = Истина;
	Иначе
		ИспользованиеПКО.Документ_ПБДСВзносыИОтчисления_Получение_ЗУП = Ложь;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ПБДСВозвратЗаработнойПлаты_Получение_ЗУП
Процедура ДобавитьПОД_Документ_ПБДСВозвратЗаработнойПлаты_Получение_ЗУП(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ПБДСВозвратЗаработнойПлаты_Получение_ЗУП";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.ПБДСВозвратЗаработнойПлаты";
	ПравилоОбработки.ПриОбработке = "ПОД_Документ_ПБДСВозвратЗаработнойПлаты_Получение_ЗУП_ПриОбработке";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПБДСВозвратЗаработнойПлаты_Получение_ЗУП");
КонецПроцедуры

Процедура ПОД_Документ_ПБДСВозвратЗаработнойПлаты_Получение_ЗУП_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	Если КомпонентыОбмена.УзелКорреспондента.ВариантНастройки = "ОбменЗУП31БП" Тогда
		ИспользованиеПКО.Документ_ПБДСВозвратЗаработнойПлаты_Получение_ЗУП = Истина;
	Иначе
		ИспользованиеПКО.Документ_ПБДСВозвратЗаработнойПлаты_Получение_ЗУП = Ложь;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ПБДСКонвертацияВалюты_Получение
Процедура ДобавитьПОД_Документ_ПБДСКонвертацияВалюты_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ПБДСКонвертацияВалюты_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.ПБДСКонвертацияВалюты";
	ПравилоОбработки.ПриОбработке = "ПОД_Документ_ПБДСКонвертацияВалюты_Получение_ПриОбработке";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПБДСКонвертацияВалюты_Получение");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПОПБДСКонвертацияВалюты_Получение");
КонецПроцедуры

Процедура ПОД_Документ_ПБДСКонвертацияВалюты_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	Если ДанныеXDTO.Свойство("ТипПлатежногоДокумента") И ДанныеXDTO.ТипПлатежногоДокумента.Значение = "ПлатежныйОрдер" Тогда
		ИспользованиеПКО.Документ_ПБДСКонвертацияВалюты_Получение = Ложь;
		ИспользованиеПКО.Документ_ПОПБДСКонвертацияВалюты_Получение = Истина;
	Иначе
		ИспользованиеПКО.Документ_ПБДСКонвертацияВалюты_Получение = Истина;
		ИспользованиеПКО.Документ_ПОПБДСКонвертацияВалюты_Получение = Ложь;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ПБДСПрочееПоступление_Получение
Процедура ДобавитьПОД_Документ_ПБДСПрочееПоступление_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ПБДСПрочееПоступление_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.ПБДСПрочееПоступление";
	ПравилоОбработки.ПриОбработке = "ПОД_Документ_ПБДСПрочееПоступление_Получение_ПриОбработке";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПБДСПрочееПоступление_Получение");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПОПБДСПрочееПоступление_Получение");
КонецПроцедуры

Процедура ПОД_Документ_ПБДСПрочееПоступление_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	Если ДанныеXDTO.Свойство("ТипПлатежногоДокумента") И ДанныеXDTO.ТипПлатежногоДокумента.Значение = "ПлатежныйОрдер" Тогда
		ИспользованиеПКО.Документ_ПБДСПрочееПоступление_Получение = Ложь;
		ИспользованиеПКО.Документ_ПОПБДСПрочееПоступление_Получение = Истина;
	Иначе
		ИспользованиеПКО.Документ_ПБДСПрочееПоступление_Получение = Истина;
		ИспользованиеПКО.Документ_ПОПБДСПрочееПоступление_Получение = Ложь;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ПБДСПрочиеДоходы_Получение
Процедура ДобавитьПОД_Документ_ПБДСПрочиеДоходы_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ПБДСПрочиеДоходы_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.ПБДСПрочиеДоходы";
	ПравилоОбработки.ПриОбработке = "ПОД_Документ_ПБДСПрочиеДоходы_Получение_ПриОбработке";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПБДСПрочиеДоходы_Получение");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПОПБДСПрочиеДоходы_Получение");
КонецПроцедуры

Процедура ПОД_Документ_ПБДСПрочиеДоходы_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	Если ДанныеXDTO.Свойство("ТипПлатежногоДокумента") И ДанныеXDTO.ТипПлатежногоДокумента.Значение = "ПлатежныйОрдер" Тогда
		ИспользованиеПКО.Документ_ПБДСПрочиеДоходы_Получение = Ложь;
		ИспользованиеПКО.Документ_ПОПБДСПрочиеДоходы_Получение = Истина;
	Иначе
		ИспользованиеПКО.Документ_ПБДСПрочиеДоходы_Получение = Истина;
		ИспользованиеПКО.Документ_ПОПБДСПрочиеДоходы_Получение = Ложь;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ПБДСРасчетыСКонтрагентами_Получение
Процедура ДобавитьПОД_Документ_ПБДСРасчетыСКонтрагентами_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ПБДСРасчетыСКонтрагентами_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.ПБДСРасчетыСКонтрагентами";
	ПравилоОбработки.ПриОбработке = "ПОД_Документ_ПБДСРасчетыСКонтрагентами_Получение_ПриОбработке";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПБДСРасчетыСКонтрагентами_Получение");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПОПБДСРасчетыСКонтрагентами_Получение");
КонецПроцедуры

Процедура ПОД_Документ_ПБДСРасчетыСКонтрагентами_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	Если ДанныеXDTO.Свойство("ТипПлатежногоДокумента") И ДанныеXDTO.ТипПлатежногоДокумента.Значение = "ПлатежныйОрдер" Тогда
		ИспользованиеПКО.Документ_ПБДСРасчетыСКонтрагентами_Получение = Ложь;
		ИспользованиеПКО.Документ_ПОПБДСРасчетыСКонтрагентами_Получение = Истина;
	Иначе
		ИспользованиеПКО.Документ_ПБДСРасчетыСКонтрагентами_Получение = Истина;
		ИспользованиеПКО.Документ_ПОПБДСРасчетыСКонтрагентами_Получение = Ложь;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ПБДСРасчетыССотрудниками_Получение
Процедура ДобавитьПОД_Документ_ПБДСРасчетыССотрудниками_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ПБДСРасчетыССотрудниками_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.ПБДСРасчетыССотрудниками";
	ПравилоОбработки.ПриОбработке = "ПОД_Документ_ПБДСРасчетыССотрудниками_Получение_ПриОбработке";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПБДСРасчетыССотрудниками_Получение");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПОПБДСРасчетыССотрудниками_Получение");
КонецПроцедуры

Процедура ПОД_Документ_ПБДСРасчетыССотрудниками_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	Если ДанныеXDTO.Свойство("ТипПлатежногоДокумента") И ДанныеXDTO.ТипПлатежногоДокумента.Значение = "ПлатежныйОрдер" Тогда
		ИспользованиеПКО.Документ_ПБДСРасчетыССотрудниками_Получение = Ложь;
		ИспользованиеПКО.Документ_ПОПБДСРасчетыССотрудниками_Получение = Истина;
	Иначе
		ИспользованиеПКО.Документ_ПБДСРасчетыССотрудниками_Получение = Истина;
		ИспользованиеПКО.Документ_ПОПБДСРасчетыССотрудниками_Получение = Ложь;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ПередачаМатериаловВПроизводство_Получение
Процедура ДобавитьПОД_Документ_ПередачаМатериаловВПроизводство_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ПередачаМатериаловВПроизводство_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.ПередачаМатериаловВПроизводство";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ТребованиеНакладная_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_ПередачаТоваров_Получение
Процедура ДобавитьПОД_Документ_ПередачаТоваров_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ПередачаТоваров_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.ПередачаПереработчику";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПередачаТоваров_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_ПеремещениеТоваров
Процедура ДобавитьПОД_Документ_ПеремещениеТоваров(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ПеремещениеТоваров";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.ПеремещениеТоваров";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПеремещениеТоваров_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_ПКОВнутренняяПередача_Получение
Процедура ДобавитьПОД_Документ_ПКОВнутренняяПередача_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ПКОВнутренняяПередача_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.ПКОВнутренняяПередача";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПКОВнутренняяПередача_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_ПКОКонвертацияВалюты_Получение
Процедура ДобавитьПОД_Документ_ПКОКонвертацияВалюты_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ПКОКонвертацияВалюты_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.ПКОКонвертацияВалюты";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПКОКонвертацияВалюты_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_ПКОПолучениеНаличныхВБанке_Получение
Процедура ДобавитьПОД_Документ_ПКОПолучениеНаличныхВБанке_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ПКОПолучениеНаличныхВБанке_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.ПКОПолучениеНаличныхВБанке";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПКОПолучениеНаличныхВБанке_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_ПКОПрочееПоступление_Получение
Процедура ДобавитьПОД_Документ_ПКОПрочееПоступление_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ПКОПрочееПоступление_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.ПКОПрочееПоступление";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПКОПрочееПоступление_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_ПКОПрочиеДоходы_Получение
Процедура ДобавитьПОД_Документ_ПКОПрочиеДоходы_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ПКОПрочиеДоходы_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.ПКОПрочиеДоходы";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПКОПрочиеДоходы_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_ПКОРасчетыСКонтрагентами_Получение
Процедура ДобавитьПОД_Документ_ПКОРасчетыСКонтрагентами_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ПКОРасчетыСКонтрагентами_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.ПКОРасчетыСКонтрагентами";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПКОРасчетыСКонтрагентами_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_ПКОРасчетыССотрудниками_Получение
Процедура ДобавитьПОД_Документ_ПКОРасчетыССотрудниками_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ПКОРасчетыССотрудниками_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.ПКОРасчетыССотрудниками";
	ПравилоОбработки.ПриОбработке = "ПОД_Документ_ПКОРасчетыССотрудниками_Получение_ПриОбработке";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПКОРасчетыССотрудниками_Получение");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПКОРасчетыССотрудниками_Получение_ЗУП");
КонецПроцедуры

Процедура ПОД_Документ_ПКОРасчетыССотрудниками_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Документ_ПКОРасчетыССотрудниками_Получение = Ложь;
	ИспользованиеПКО.Документ_ПКОРасчетыССотрудниками_Получение_ЗУП = Ложь;
	
	Если КомпонентыОбмена.УзелКорреспондента.ВариантНастройки = "ОбменЗУПБП" 
		ИЛИ КомпонентыОбмена.УзелКорреспондента.ВариантНастройки = "ОбменЗУП31БП" Тогда
		ИспользованиеПКО.Документ_ПКОРасчетыССотрудниками_Получение_ЗУП = Истина;
	Иначе
		ИспользованиеПКО.Документ_ПКОРасчетыССотрудниками_Получение = Истина;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ПКОРозничнаяВыручка_Получение
Процедура ДобавитьПОД_Документ_ПКОРозничнаяВыручка_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ПКОРозничнаяВыручка_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.ПКОРозничнаяВыручка";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПКОРозничнаяВыручка_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_ПоступлениеИзПереработки_Получение
Процедура ДобавитьПОД_Документ_ПоступлениеИзПереработки_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ПоступлениеИзПереработки_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.ОтчетПереработчика";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПоступлениеИзПереработки_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_ПоступлениеТоваровУслуг
Процедура ДобавитьПОД_Документ_ПоступлениеТоваровУслуг(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ПоступлениеТоваровУслуг";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.ПоступлениеТоваровУслуг";
	ПравилоОбработки.ПриОбработке = "ПОД_Документ_ПоступлениеТоваровУслуг_ПриОбработке";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("ПТиУ_ПоступлениеТоваровУслуг");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("ПТиУ_ПоступлениеДопРасходов");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("ПТиУРасх_ВозвратТоваровПоставщику");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("ПТиУРасх_ВозвратТоваровСтороннейКомпании");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("ПТиУРасх_СписаниеТоваров");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("ПТиУРасх_ОприходованиеТоваров");
КонецПроцедуры

Процедура ПОД_Документ_ПоступлениеТоваровУслуг_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	// Поиск данных для ПКО
	
	// ПТиУ_ПоступлениеДопРасходов и ПТиУ_ПоступлениеТоваровУслуг 
	ИспользованиеПКО.ПТиУ_ПоступлениеТоваровУслуг             = Ложь;
	ИспользованиеПКО.ПТиУ_ПоступлениеДопРасходов              = Ложь;
	ИспользованиеПКО.ПТиУРасх_ВозвратТоваровПоставщику        = Ложь;
	ИспользованиеПКО.ПТиУРасх_ВозвратТоваровСтороннейКомпании = Ложь;
	ИспользованиеПКО.ПТиУРасх_СписаниеТоваров                 = Ложь;
	ИспользованиеПКО.ПТиУРасх_ОприходованиеТоваров            = Ложь;
	
	Если ДанныеXDTO.Свойство("Услуги") Тогда
		Для Каждого Услуги_Строка Из ДанныеXDTO.Услуги Цикл
			Если Услуги_Строка.ЭтоДопРасходы = Истина Тогда
				ИспользованиеПКО.ПТиУ_ПоступлениеДопРасходов = Истина;
			Иначе
				ИспользованиеПКО.ПТиУ_ПоступлениеТоваровУслуг = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ИспользованиеПКО.ПТиУ_ПоступлениеДопРасходов
		И (Не ДанныеXDTO.Свойство("РасшифровкаДопРасходов") Или ДанныеXDTO.РасшифровкаДопРасходов.Количество() = 0) Тогда
		ИспользованиеПКО.ПТиУ_ПоступлениеДопРасходов  = Ложь;
		ИспользованиеПКО.ПТиУ_ПоступлениеТоваровУслуг = Истина;	
	КонецЕсли;
	
	Если ДанныеXDTO.Свойство("Товары") Тогда
		ИспользованиеПКО.ПТиУ_ПоступлениеТоваровУслуг = Истина;
	КонецЕсли;
	
	// ПТиУРасх_ВозвратТоваровПоставщику, ПТиУРасх_ВозвратТоваровСтороннейКомпании и ПТиУРасх_СписаниеТоваров
	Если ДанныеXDTO.Свойство("Недостачи") Тогда
		Для Каждого Недостачи_Строка Из ДанныеXDTO.Недостачи Цикл
			Если Недостачи_Строка.ВариантОтражения.Значение = "ЗаСчетПоставщика" Тогда
				ИспользованиеПКО.ПТиУРасх_ВозвратТоваровПоставщику = Истина;
			ИначеЕсли Недостачи_Строка.ВариантОтражения.Значение = "ЗаСчетСтороннейКомпании" Тогда
				ИспользованиеПКО.ПТиУРасх_ВозвратТоваровСтороннейКомпании = Истина;
			Иначе // НаПрочиеРасходы и все остальное
				ИспользованиеПКО.ПТиУРасх_СписаниеТоваров = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// ПТиУРасх_ОприходованиеТоваров
	Если ДанныеXDTO.Свойство("Излишки") Тогда
		ИспользованиеПКО.ПТиУРасх_ОприходованиеТоваров = Истина;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_РеализацияТоваровУслуг
Процедура ДобавитьПОД_Документ_РеализацияТоваровУслуг(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_РеализацияТоваровУслуг";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.РеализацияТоваровУслуг";
	ПравилоОбработки.ПриОбработке = "ПОД_Документ_РеализацияТоваровУслуг_ПриОбработке";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РеализацияТоваровУслуг");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РТиУБезПереходаПравСобственностиУслуги");
КонецПроцедуры

Процедура ПОД_Документ_РеализацияТоваровУслуг_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Документ_РеализацияТоваровУслуг = Истина;
	ИспользованиеПКО.Документ_РТиУБезПереходаПравСобственностиУслуги = Ложь;
	
	ЕстьТовары = ДанныеXDTO.Свойство("Товары") И ДанныеXDTO.Товары.Количество() > 0;
	ЕстьУслуги = ДанныеXDTO.Свойство("Услуги") И ДанныеXDTO.Услуги.Количество() > 0;
	
	Если ДанныеXDTO.ВидОперации.Значение = "ОтгрузкаБезПереходаПравСобственности_Реализовано" И Не ЕстьТовары Тогда
		ИспользованиеПКО.Документ_РеализацияТоваровУслуг = Ложь;
	КонецЕсли;
	
	ИспользованиеПКО.Документ_РТиУБезПереходаПравСобственностиУслуги = ЕстьУслуги И ДанныеXDTO.ВидОперации.Значение = "ОтгрузкаБезПереходаПравСобственности_Реализовано";
КонецПроцедуры
#КонецОбласти
#Область Документ_РКОВнутренняяПередача_Получение
Процедура ДобавитьПОД_Документ_РКОВнутренняяПередача_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_РКОВнутренняяПередача_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.РКОВнутренняяПередача";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РКОВнутренняяПередача_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_РКОВыплатаЗарплаты_Получение
Процедура ДобавитьПОД_Документ_РКОВыплатаЗарплаты_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_РКОВыплатаЗарплаты_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.РКОВыплатаЗарплаты";
	ПравилоОбработки.ПриОбработке = "ПОД_Документ_РКОВыплатаЗарплаты_Получение_ПриОбработке";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РКОВыплатаЗарплаты_Получение");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РКОВыплатаЗарплаты_Получение_ЗУП");
КонецПроцедуры

Процедура ПОД_Документ_РКОВыплатаЗарплаты_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Документ_РКОВыплатаЗарплаты_Получение = Ложь;
	ИспользованиеПКО.Документ_РКОВыплатаЗарплаты_Получение_ЗУП = Ложь;
	
	Если КомпонентыОбмена.УзелКорреспондента.ВариантНастройки = "ОбменЗУПБП" 
		ИЛИ КомпонентыОбмена.УзелКорреспондента.ВариантНастройки = "ОбменЗУП31БП" Тогда
		ИспользованиеПКО.Документ_РКОВыплатаЗарплаты_Получение_ЗУП = Истина;
	Иначе
		ИспользованиеПКО.Документ_РКОВыплатаЗарплаты_Получение = Истина;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_РКОКонвертацияВалюты_Получение
Процедура ДобавитьПОД_Документ_РКОКонвертацияВалюты_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_РКОКонвертацияВалюты_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.РКОКонвертацияВалюты";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РКОКонвертацияВалюты_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_РКОНаБанковскийСчет_Получение
Процедура ДобавитьПОД_Документ_РКОНаБанковскийСчет_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_РКОНаБанковскийСчет_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.РКОНаБанковскийСчет";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РКОНаБанковскийСчет_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_РКОПрочаяВыдача_Получение
Процедура ДобавитьПОД_Документ_РКОПрочаяВыдача_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_РКОПрочаяВыдача_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.РКОПрочаяВыдача";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РКОПрочаяВыдача_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_РКОПрочийРасход_Получение
Процедура ДобавитьПОД_Документ_РКОПрочийРасход_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_РКОПрочийРасход_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.РКОПрочийРасход";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РКОПрочийРасход_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_РКОРасчетыСКонтрагентами_Получение
Процедура ДобавитьПОД_Документ_РКОРасчетыСКонтрагентами_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_РКОРасчетыСКонтрагентами_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.РКОРасчетыСКонтрагентами";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РКОРасчетыСКонтрагентами_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_РКОРасчетыССотрудниками_Получение
Процедура ДобавитьПОД_Документ_РКОРасчетыССотрудниками_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_РКОРасчетыССотрудниками_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.РКОРасчетыССотрудниками";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РКОРасчетыССотрудниками_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_СБДСВзносыИОтчисления_Получение_ЗУП
Процедура ДобавитьПОД_Документ_СБДСВзносыИОтчисления_Получение_ЗУП(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_СБДСВзносыИОтчисления_Получение_ЗУП";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.СБДСПеречислениеВзносовИОтчислений";
	ПравилоОбработки.ПриОбработке = "ПОД_Документ_СБДСВзносыИОтчисления_Получение_ЗУП_ПриОбработке";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДСВзносыИОтчисления_Получение_ЗУП");
КонецПроцедуры

Процедура ПОД_Документ_СБДСВзносыИОтчисления_Получение_ЗУП_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	Если КомпонентыОбмена.УзелКорреспондента.ВариантНастройки = "ОбменЗУПБП"   
		ИЛИ КомпонентыОбмена.УзелКорреспондента.ВариантНастройки = "ОбменЗУП31БП" Тогда
		ИспользованиеПКО.Документ_СБДСВзносыИОтчисления_Получение_ЗУП = Истина;
	Иначе
		ИспользованиеПКО.Документ_СБДСВзносыИОтчисления_Получение_ЗУП = Ложь;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_СБДСКонвертацияВалюты_Получение
Процедура ДобавитьПОД_Документ_СБДСКонвертацияВалюты_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_СБДСКонвертацияВалюты_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.СБДСКонвертацияВалюты";
	ПравилоОбработки.ПриОбработке = "ПОД_Документ_СБДСКонвертацияВалюты_Получение_ПриОбработке";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДСКонвертацияВалюты_Получение");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПОСБДСКонвертацияВалюты_Получение");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДСКонвертацияВалюты_Получение");
КонецПроцедуры

Процедура ПОД_Документ_СБДСКонвертацияВалюты_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	Если ДанныеXDTO.Свойство("ТипПлатежногоДокумента") И ДанныеXDTO.ТипПлатежногоДокумента.Значение = "ПлатежныйОрдер" Тогда
		ИспользованиеПКО.Документ_СБДСКонвертацияВалюты_Получение = Ложь;
		ИспользованиеПКО.Документ_ПОСБДСКонвертацияВалюты_Получение = Истина;
	Иначе
		ИспользованиеПКО.Документ_СБДСКонвертацияВалюты_Получение = Истина;
		ИспользованиеПКО.Документ_ПОСБДСКонвертацияВалюты_Получение = Ложь;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_СБДСПереводНаДругойСчет_Получение
Процедура ДобавитьПОД_Документ_СБДСПереводНаДругойСчет_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_СБДСПереводНаДругойСчет_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.СБДСПереводНаДругойСчет";
	ПравилоОбработки.ПриОбработке = "ПОД_Документ_СБДСПереводНаДругойСчет_Получение_ПриОбработке";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДСПереводНаДругойСчет_Получение");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПОСБДСПереводНаДругойСчет_Получение");
КонецПроцедуры

Процедура ПОД_Документ_СБДСПереводНаДругойСчет_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	Если ДанныеXDTO.Свойство("ТипПлатежногоДокумента") И ДанныеXDTO.ТипПлатежногоДокумента.Значение = "ПлатежныйОрдер" Тогда
		ИспользованиеПКО.Документ_СБДСПереводНаДругойСчет_Получение = Ложь;
		ИспользованиеПКО.Документ_ПОСБДСПереводНаДругойСчет_Получение = Истина;
	Иначе
		ИспользованиеПКО.Документ_СБДСПереводНаДругойСчет_Получение = Истина;
		ИспользованиеПКО.Документ_ПОСБДСПереводНаДругойСчет_Получение = Ложь;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_СБДСПеречислениеЗаработнойПлаты_Получение
Процедура ДобавитьПОД_Документ_СБДСПеречислениеЗаработнойПлаты_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_СБДСПеречислениеЗаработнойПлаты_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.СБДСПеречислениеЗаработнойПлаты";
	ПравилоОбработки.ПриОбработке = "ПОД_Документ_СБДСПеречислениеЗаработнойПлаты_Получение_ПриОбработке";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДСПеречислениеЗаработнойПлаты_Получение");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПОСБДСПеречислениеЗарПлаты_Получение");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДСПеречислениеЗаработнойПлаты_П_ЗУП");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДСПеречислениеЗаработнойПлаты_Получение");
КонецПроцедуры

Процедура ПОД_Документ_СБДСПеречислениеЗаработнойПлаты_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Документ_СБДСПеречислениеЗаработнойПлаты_П_ЗУП = Ложь;
	ИспользованиеПКО.Документ_СБДСПеречислениеЗаработнойПлаты_Получение = Ложь;
	ИспользованиеПКО.Документ_ПОСБДСПеречислениеЗарПлаты_Получение = Ложь;
	
	Если КомпонентыОбмена.УзелКорреспондента.ВариантНастройки = "ОбменЗУПБП" 
		ИЛИ КомпонентыОбмена.УзелКорреспондента.ВариантНастройки = "ОбменЗУП31БП" Тогда
		ИспользованиеПКО.Документ_СБДСПеречислениеЗаработнойПлаты_П_ЗУП = Истина;
	Иначе
		ИспользованиеПКО.Документ_СБДСПеречислениеЗаработнойПлаты_П_ЗУП = Ложь;
	
		Если ДанныеXDTO.Свойство("ТипПлатежногоДокумента") И ДанныеXDTO.ТипПлатежногоДокумента.Значение = "ПлатежныйОрдер" Тогда
			ИспользованиеПКО.Документ_СБДСПеречислениеЗаработнойПлаты_Получение = Ложь;
			ИспользованиеПКО.Документ_ПОСБДСПеречислениеЗарПлаты_Получение = Истина;
		Иначе
			ИспользованиеПКО.Документ_СБДСПеречислениеЗаработнойПлаты_Получение = Истина;
			ИспользованиеПКО.Документ_ПОСБДСПеречислениеЗарПлаты_Получение = Ложь;
		КонецЕсли;
	КонецЕсли
КонецПроцедуры
#КонецОбласти
#Область Документ_СБДСПеречислениеЗаработнойПлатыНаЛицевыеСчета_Получение
Процедура ДобавитьПОД_Документ_СБДСПеречислениеЗаработнойПлатыНаЛицевыеСчета_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_СБДСПеречислениеЗаработнойПлатыНаЛицевыеСчета_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.СБДСПеречислениеЗаработнойПлатыНаЛицевыеСчета";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДСПеречислениеЗарПлЛицСчета_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_СБДСПлатежиВБюджет_Получение
Процедура ДобавитьПОД_Документ_СБДСПлатежиВБюджет_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_СБДСПлатежиВБюджет_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.СБДСПлатежиВБюджет";
	ПравилоОбработки.ПриОбработке = "ПОД_Документ_СБДСПлатежиВБюджет_Получение_ПриОбработке";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДСПлатежиВБюджет_Получение");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПОСБДСПлатежиВБюджет_Получение");
КонецПроцедуры

Процедура ПОД_Документ_СБДСПлатежиВБюджет_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	Если ДанныеXDTO.Свойство("ТипПлатежногоДокумента") И ДанныеXDTO.ТипПлатежногоДокумента.Значение = "ПлатежныйОрдер" Тогда
		ИспользованиеПКО.Документ_СБДСПлатежиВБюджет_Получение = Ложь;
		ИспользованиеПКО.Документ_ПОСБДСПлатежиВБюджет_Получение = Истина;
	Иначе
		ИспользованиеПКО.Документ_СБДСПлатежиВБюджет_Получение = Истина;
		ИспользованиеПКО.Документ_ПОСБДСПлатежиВБюджет_Получение = Ложь;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_СБДСПрочееСписание_Получение
Процедура ДобавитьПОД_Документ_СБДСПрочееСписание_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_СБДСПрочееСписание_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.СБДСПрочееСписание";
	ПравилоОбработки.ПриОбработке = "ПОД_Документ_СБДСПрочееСписание_Получение_ПриОбработке";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДСПрочееСписание_Получение");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПОСБДСПрочееСписание_Получение");
КонецПроцедуры

Процедура ПОД_Документ_СБДСПрочееСписание_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	Если ДанныеXDTO.Свойство("ТипПлатежногоДокумента") И ДанныеXDTO.ТипПлатежногоДокумента.Значение = "ПлатежныйОрдер" Тогда
		ИспользованиеПКО.Документ_СБДСПрочееСписание_Получение = Ложь;
		ИспользованиеПКО.Документ_ПОСБДСПрочееСписание_Получение = Истина;
	Иначе
		ИспользованиеПКО.Документ_СБДСПрочееСписание_Получение = Истина;
		ИспользованиеПКО.Документ_ПОСБДСПрочееСписание_Получение = Ложь;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_СБДСПрочиеРасходы_Получение
Процедура ДобавитьПОД_Документ_СБДСПрочиеРасходы_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_СБДСПрочиеРасходы_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.СБДСПрочиеРасходы";
	ПравилоОбработки.ПриОбработке = "ПОД_Документ_СБДСПрочиеРасходы_Получение_ПриОбработке";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДСПрочиеРасходы_Получение");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПОСБДСПрочиеРасходы_Получение");
КонецПроцедуры

Процедура ПОД_Документ_СБДСПрочиеРасходы_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	Если ДанныеXDTO.Свойство("ТипПлатежногоДокумента") И ДанныеXDTO.ТипПлатежногоДокумента.Значение = "ПлатежныйОрдер" Тогда
		ИспользованиеПКО.Документ_СБДСПрочиеРасходы_Получение = Ложь;
		ИспользованиеПКО.Документ_ПОСБДСПрочиеРасходы_Получение = Истина;
	Иначе
		ИспользованиеПКО.Документ_СБДСПрочиеРасходы_Получение = Истина;
		ИспользованиеПКО.Документ_ПОСБДСПрочиеРасходы_Получение = Ложь;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_СБДСРасчетыСКонтрагентами_Получение
Процедура ДобавитьПОД_Документ_СБДСРасчетыСКонтрагентами_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_СБДСРасчетыСКонтрагентами_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.СБДСРасчетыСКонтрагентами";
	ПравилоОбработки.ПриОбработке = "ПОД_Документ_СБДСРасчетыСКонтрагентами_Получение_ПриОбработке";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДСРасчетыСКонтрагентами_Получение");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПОСБДСРасчетыСКонтрагентами_Получение");
КонецПроцедуры

Процедура ПОД_Документ_СБДСРасчетыСКонтрагентами_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	Если ДанныеXDTO.Свойство("ТипПлатежногоДокумента") И ДанныеXDTO.ТипПлатежногоДокумента.Значение = "ПлатежныйОрдер" Тогда
		ИспользованиеПКО.Документ_СБДСРасчетыСКонтрагентами_Получение = Ложь;
		ИспользованиеПКО.Документ_ПОСБДСРасчетыСКонтрагентами_Получение = Истина;
	Иначе
		ИспользованиеПКО.Документ_СБДСРасчетыСКонтрагентами_Получение = Истина;
		ИспользованиеПКО.Документ_ПОСБДСРасчетыСКонтрагентами_Получение = Ложь;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_СБДСРасчетыССотрудниками_Получение
Процедура ДобавитьПОД_Документ_СБДСРасчетыССотрудниками_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_СБДСРасчетыССотрудниками_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.СБДСРасчетыССотрудниками";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДСРасчетыССотрудниками_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_СборкаТоваров_Получение
Процедура ДобавитьПОД_Документ_СборкаТоваров_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_СборкаТоваров_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.СборкаТоваров";
	ПравилоОбработки.ПриОбработке = "ПОД_Документ_СборкаТоваров_Получение_ПриОбработке";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СборкаТоваров_Получение");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СписаниеПриСборке_Получение");
КонецПроцедуры

Процедура ПОД_Документ_СборкаТоваров_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Документ_СписаниеПриСборке_Получение = Ложь;
	Для Каждого СтрокаТовары ИЗ ДанныеXDTO.Товары Цикл
		Если ЗначениеЗаполнено(СтрокаТовары.ТипЗапасов) И СтрокаТовары.ТипЗапасов.Значение = "КомиссионныеТовары" Тогда
			ИспользованиеПКО.Документ_СписаниеПриСборке_Получение = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры
#КонецОбласти
#Область Документ_СписаниеТоваров_Получение
Процедура ДобавитьПОД_Документ_СписаниеТоваров_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_СписаниеТоваров_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.СписаниеЗапасов";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СписаниеТоваров");
КонецПроцедуры
#КонецОбласти
#Область Документ_СписаниеТоваровПоИнвентаризации_Получение
Процедура ДобавитьПОД_Документ_СписаниеТоваровПоИнвентаризации_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_СписаниеТоваровПоИнвентаризации_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.СписаниеНедостач";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СписаниеТоваровПоИнвентаризации");
КонецПроцедуры
#КонецОбласти
#Область Документ_СчетФактураВыданный_Получение
Процедура ДобавитьПОД_Документ_СчетФактураВыданный_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_СчетФактураВыданный_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.СчетФактураВыданный";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СчетФактураВыданный_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_СчетФактураПолученный_Получение
Процедура ДобавитьПОД_Документ_СчетФактураПолученный_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_СчетФактураПолученный_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.СчетФактураПолученный";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СчетФактураПолученный_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_ТаможеннаяДекларация_Получение
Процедура ДобавитьПОД_Документ_ТаможеннаяДекларация_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ТаможеннаяДекларация_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.ТаможеннаяДекларация";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ТаможеннаяДекларация_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_ЭСФ_Получение
Процедура ДобавитьПОД_Документ_ЭСФ_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ЭСФ_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.ЭСФ";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ЭСФ_Получение");
КонецПроцедуры
#КонецОбласти
#Область Справочник_АктуальныеЭСФ_Получение
Процедура ДобавитьПОД_Справочник_АктуальныеЭСФ_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_АктуальныеЭСФ_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.АктуальныеЭСФ";
	ПравилоОбработки.ПриОбработке = "ПОД_Справочник_АктуальныеЭСФ_Получение_ПриОбработке";
КонецПроцедуры

Процедура ПОД_Справочник_АктуальныеЭСФ_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	СвойстваОтбор = ДанныеXDTO;
	
	Если ДанныеXDTO.Свойство("КлючевыеСвойства") Тогда
		СвойстваОтбор = ДанныеXDTO.КлючевыеСвойства;
	КонецЕсли;
	
	СчетФактураОтбор = Неопределено;
	
	СвойстваОтбор.Свойство("СчетФактураОтбор", СчетФактураОтбор);
	
	Если ТипЗнч(СчетФактураОтбор) = Тип("Структура") Тогда
		Если СчетФактураОтбор.Свойство("ТипЗначения") И СчетФактураОтбор.ТипЗначения = "СчетФактураВыданный" Тогда    
			ПравилоКонвертацииСФ = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, "Документ_СчетФактураВыданный_Получение"); 	
		Иначе
			ПравилоКонвертацииСФ = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, "Документ_СчетФактураПолученный_Получение"); 
		КонецЕсли;
	КонецЕсли;
	ПравилоКонвертацииЭСФ = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, "Документ_ЭСФ_Получение");
	ПКПДСостоянияЭСФ = КомпонентыОбмена.ПравилаКонвертацииПредопределенныхДанных.Найти("СостоянияЭСФ", "ИмяПКПД");
	
	АктуальныеЭСФ = РегистрыСведений.АктуальныеЭСФ.СоздатьНаборЗаписей();
	Если ЗначениеЗаполнено(СчетФактураОтбор) Тогда
		АктуальныеЭСФ.Отбор.СчетФактура.Установить(ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(
			КомпонентыОбмена, СчетФактураОтбор, ПравилоКонвертацииСФ, "ПолучитьСсылку").Ссылка);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(АктуальныеЭСФ.Отбор.СчетФактура.Значение) Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеXDTO.Свойство("Записи")
		И ЗначениеЗаполнено(ДанныеXDTO.Записи) Тогда
	
		Для Каждого СтрокаЗаписи Из ДанныеXDTO.Записи Цикл
			ЗаписьАктуальныеЭСФ = АктуальныеЭСФ.Добавить();
			
			Если Не ЗначениеЗаполнено(АктуальныеЭСФ.Отбор.СчетФактура.Значение) Тогда
				ЗаписьАктуальныеЭСФ.СчетФактура = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(
					КомпонентыОбмена, СтрокаЗаписи.СчетФактура, ПравилоКонвертацииСФ, "ПолучитьСсылку").Ссылка;
			Иначе
				ЗаписьАктуальныеЭСФ.СчетФактура = АктуальныеЭСФ.Отбор.СчетФактура.Значение;
			КонецЕсли;
					
	        ЗаписьАктуальныеЭСФ.ЭСФ = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(
	                   КомпонентыОбмена, СтрокаЗаписи.ЭСФ, ПравилоКонвертацииЭСФ, "ПолучитьСсылку").Ссылка;
	
			Если ПКПДСостоянияЭСФ <> Неопределено Тогда	
				ЗаписьАктуальныеЭСФ.Состояние = ПКПДСостоянияЭСФ.КонвертацииЗначенийПриПолучении.Получить(СтрокаЗаписи.Состояние.Значение);
			КонецЕсли;				   
		
		КонецЦикла;                                                                    	
	КонецЕсли;
	
	АктуальныеЭСФ.ОбменДанными.Загрузка = Истина;
	АктуальныеЭСФ.Записать(Истина);
КонецПроцедуры
#КонецОбласти
#Область Справочник_Банки_Получение
Процедура ДобавитьПОД_Справочник_Банки_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_Банки_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.Банки";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Банки");
КонецПроцедуры
#КонецОбласти
#Область Справочник_БанковскиеСчета_Получение
Процедура ДобавитьПОД_Справочник_БанковскиеСчета_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_БанковскиеСчета_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.БанковскиеСчета";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_БанковскиеСчета_Получение");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Валюты_Получение
Процедура ДобавитьПОД_Справочник_Валюты_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_Валюты_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.Валюты";
	ПравилоОбработки.ПриОбработке = "ПОД_Справочник_Валюты_Получение_ПриОбработке";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Валюты");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Валюты_ИзСтруктуры");
КонецПроцедуры

Процедура ПОД_Справочник_Валюты_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	Если ДанныеXDTO.Свойство("Ссылка") Тогда
		ИспользованиеПКО.Справочник_Валюты = Истина;
		ИспользованиеПКО.Справочник_Валюты_ИзСтруктуры = Ложь;
	Иначе
		ИспользованиеПКО.Справочник_Валюты = Ложь;
		ИспользованиеПКО.Справочник_Валюты_ИзСтруктуры = Истина;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_ВидыДокументовФизическихЛиц
Процедура ДобавитьПОД_Справочник_ВидыДокументовФизическихЛиц(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_ВидыДокументовФизическихЛиц";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.ВидыДокументовФизическихЛиц";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ВидыДокументовФизическихЛиц");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ВидыРеализации_Получение
Процедура ДобавитьПОД_Справочник_ВидыРеализации_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_ВидыРеализации_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.ВидыРеализации";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ВидыРеализации");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Договоры_Получение
Процедура ДобавитьПОД_Справочник_Договоры_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_Договоры_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.Договоры";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ДоговорыКонтрагентов");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ДокументыФизическихЛиц_Получение
Процедура ДобавитьПОД_Справочник_ДокументыФизическихЛиц_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_ДокументыФизическихЛиц_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.ДокументыФизическихЛиц";
	ПравилоОбработки.ПриОбработке = "ПОД_Справочник_ДокументыФизическихЛиц_Получение_ПриОбработке";
КонецПроцедуры

Процедура ПОД_Справочник_ДокументыФизическихЛиц_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	СвойстваОтбор = ДанныеXDTO;
	
	Если ДанныеXDTO.Свойство("КлючевыеСвойства") Тогда
		СвойстваОтбор = ДанныеXDTO.КлючевыеСвойства;
	КонецЕсли;
	
	ФизическоеЛицоОтбор = Неопределено;
	ВидДокументаОтбор   = Неопределено;
	ПериодОтбор         = Неопределено;
	
	СвойстваОтбор.Свойство("ФизическоеЛицоОтбор", ФизическоеЛицоОтбор);
	СвойстваОтбор.Свойство("ПериодОтбор",         ПериодОтбор);
	
	ПравилоКонвертацииФизическиеЛица = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, "Справочник_ФизическиеЛица_Получение");
	ПравилоКонвертацииВидыДокументов = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, "Справочник_ВидыДокументовФизическихЛиц");
	
	ДокументыФЛ = РегистрыСведений.ПаспортныеДанныеФизЛиц.СоздатьНаборЗаписей();
	Если ЗначениеЗаполнено(ФизическоеЛицоОтбор) Тогда
		ДокументыФЛ.Отбор.Физлицо.Установить(ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(
			КомпонентыОбмена, ФизическоеЛицоОтбор, ПравилоКонвертацииФизическиеЛица, "ПолучитьСсылку").Ссылка);
	КонецЕсли;
	Если ЗначениеЗаполнено(ПериодОтбор) Тогда
		ДокументыФЛ.Отбор.Период.Установить(ПериодОтбор);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДокументыФЛ.Отбор.Физлицо.Значение) Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеXDTO.Свойство("Записи")
		И ЗначениеЗаполнено(ДанныеXDTO.Записи) Тогда
	
		Для Каждого СтрокаЗаписи Из ДанныеXDTO.Записи Цикл
			ЗаписьДокументыФЛ = ДокументыФЛ.Добавить();
			
			Если Не ЗначениеЗаполнено(ДокументыФЛ.Отбор.Физлицо.Значение) Тогда
				ЗаписьДокументыФЛ.Физлицо = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(
					КомпонентыОбмена, СтрокаЗаписи.ФизическоеЛицо, ПравилоКонвертацииФизическиеЛица, "ПолучитьСсылку").Ссылка;
			Иначе
				ЗаписьДокументыФЛ.Физлицо = ДокументыФЛ.Отбор.Физлицо.Значение;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ДокументыФЛ.Отбор.Период.Значение) Тогда
				ЗаписьДокументыФЛ.Период = СтрокаЗаписи.Период;
			Иначе
				ЗаписьДокументыФЛ.Период = ДокументыФЛ.Отбор.Период.Значение;
			КонецЕсли;
			
			ЗаписьДокументыФЛ.ДокументСерия 		= СтрокаЗаписи.Серия;
			ЗаписьДокументыФЛ.ДокументНомер         = СтрокаЗаписи.Номер;
	        ЗаписьДокументыФЛ.ДокументВид           = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(
	                   КомпонентыОбмена, СтрокаЗаписи.ВидДокумента, ПравилоКонвертацииВидыДокументов, "ПолучитьСсылку").Ссылка;
			ЗаписьДокументыФЛ.ДокументДатаВыдачи 	= СтрокаЗаписи.ДатаВыдачи;
			ЗаписьДокументыФЛ.ДокументСрокДействия	= СтрокаЗаписи.СрокДействия;
			ЗаписьДокументыФЛ.ДокументКемВыдан		= СтрокаЗаписи.КемВыдан;
		
		КонецЦикла;
		
	КонецЕсли;
	
	ДокументыФЛ.ОбменДанными.Загрузка = Истина;
	ДокументыФЛ.Записать(Истина);
КонецПроцедуры
#КонецОбласти
#Область Справочник_ИсторияЭСФ_Получение
Процедура ДобавитьПОД_Справочник_ИсторияЭСФ_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_ИсторияЭСФ_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.ИсторияЭСФ";
	ПравилоОбработки.ПриОбработке = "ПОД_Справочник_ИсторияЭСФ_Получение_ПриОбработке";
КонецПроцедуры

Процедура ПОД_Справочник_ИсторияЭСФ_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	СвойстваОтбор = ДанныеXDTO;
	
	Если ДанныеXDTO.Свойство("КлючевыеСвойства") Тогда
		СвойстваОтбор = ДанныеXDTO.КлючевыеСвойства;
	КонецЕсли;
	
	ЭСФОтбор		 = Неопределено;
	НомерЗаписиОтбор = Неопределено;
	
	СвойстваОтбор.Свойство("ЭСФОтбор", 		   ЭСФОтбор);
	СвойстваОтбор.Свойство("НомерЗаписиОтбор", НомерЗаписиОтбор);
	
	ПравилоКонвертацииЭСФ = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, "Документ_ЭСФ_Получение");
	ПКПДСостоянияЭСФ = КомпонентыОбмена.ПравилаКонвертацииПредопределенныхДанных.Найти("СостоянияЭСФ", "ИмяПКПД");
	
	ИсторияЭСФ = РегистрыСведений.ИсторияЭСФ.СоздатьНаборЗаписей();
	Если ЗначениеЗаполнено(ЭСФОтбор) Тогда
		ИсторияЭСФ.Отбор.ЭСФ.Установить(ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(
			КомпонентыОбмена, ЭСФОтбор, ПравилоКонвертацииЭСФ, "ПолучитьСсылку").Ссылка);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НомерЗаписиОтбор) Тогда
		ИсторияЭСФ.Отбор.НомерЗаписи.Установить(НомерЗаписиОтбор);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИсторияЭСФ.Отбор.ЭСФ.Значение) Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеXDTO.Свойство("Записи")
		И ЗначениеЗаполнено(ДанныеXDTO.Записи) Тогда
	
		Для Каждого СтрокаЗаписи Из ДанныеXDTO.Записи Цикл
			ЗаписьИсторияЭСФ = ИсторияЭСФ.Добавить();
			
			Если Не ЗначениеЗаполнено(ИсторияЭСФ.Отбор.ЭСФ.Значение) Тогда
				ЗаписьИсторияЭСФ.ЭСФ = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(
					КомпонентыОбмена, СтрокаЗаписи.ЭСФ, ПравилоКонвертацииЭСФ, "ПолучитьСсылку").Ссылка;
			Иначе
				ЗаписьИсторияЭСФ.ЭСФ = ИсторияЭСФ.Отбор.ЭСФ.Значение;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ИсторияЭСФ.Отбор.НомерЗаписи.Значение) Тогда
				ЗаписьИсторияЭСФ.НомерЗаписи = СтрокаЗаписи.НомерЗаписи;
			Иначе
				ЗаписьИсторияЭСФ.НомерЗаписи = ИсторияЭСФ.Отбор.НомерЗаписи.Значение;
			КонецЕсли;
			
			Если ПКПДСостоянияЭСФ <> Неопределено Тогда	
				ЗаписьИсторияЭСФ.Состояние = ПКПДСостоянияЭСФ.КонвертацииЗначенийПриПолучении.Получить(СтрокаЗаписи.Состояние.Значение);
			КонецЕсли;	
	                   
	        ЗаписьИсторияЭСФ.Дата = СтрокаЗаписи.Дата;                                                
		
		КонецЦикла;                                                                    	
	КонецЕсли;
	
	ИсторияЭСФ.ОбменДанными.Загрузка = Истина;
	ИсторияЭСФ.Записать(Истина);
КонецПроцедуры
#КонецОбласти
#Область Справочник_Кассы_Получение
Процедура ДобавитьПОД_Справочник_Кассы_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_Кассы_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.Кассы";
	ПравилоОбработки.ПриОбработке = "ПОД_Справочник_Кассы_Получение_ПриОбработке";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Кассы_Получение");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Кассы_Получение_ИзСтруктуры");
КонецПроцедуры

Процедура ПОД_Справочник_Кассы_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	Если ДанныеXDTO.Свойство("Ссылка") Тогда
		ИспользованиеПКО.Справочник_Кассы_Получение = Истина;
		ИспользованиеПКО.Справочник_Кассы_Получение_ИзСтруктуры = Ложь;
	Иначе
		ИспользованиеПКО.Справочник_Кассы_Получение = Ложь;
		ИспользованиеПКО.Справочник_Кассы_Получение_ИзСтруктуры = Истина;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_КлассификаторЕдиницИзмерения_Получение
Процедура ДобавитьПОД_Справочник_КлассификаторЕдиницИзмерения_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_КлассификаторЕдиницИзмерения_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.ЕдиницыИзмерения";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ЕдиницыИзмерения");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Контрагенты_Получение
Процедура ДобавитьПОД_Справочник_Контрагенты_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_Контрагенты_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.Контрагенты";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Контрагенты_Получение");
КонецПроцедуры
#КонецОбласти
#Область Справочник_КонтрагентыГруппа
Процедура ДобавитьПОД_Справочник_КонтрагентыГруппа(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_КонтрагентыГруппа";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.КонтрагентыГруппа";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_КонтрагентыГруппа");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Номенклатура_Получение
Процедура ДобавитьПОД_Справочник_Номенклатура_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_Номенклатура_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.Номенклатура";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Номенклатура_Получение");
КонецПроцедуры
#КонецОбласти
#Область Справочник_НоменклатураГруппа_Получение
Процедура ДобавитьПОД_Справочник_НоменклатураГруппа_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_НоменклатураГруппа_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.НоменклатураГруппа";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_НоменклатураГруппа_Получение");
КонецПроцедуры
#КонецОбласти
#Область Справочник_НомераГТД_Получение
Процедура ДобавитьПОД_Справочник_НомераГТД_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_НомераГТД_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.НомераГТД";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_НомераГТД_Получение");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Организации_Получение
Процедура ДобавитьПОД_Справочник_Организации_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_Организации_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.Организации";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Организации_Получение");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ПодразделенияОрганизаций
Процедура ДобавитьПОД_Справочник_ПодразделенияОрганизаций(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_ПодразделенияОрганизаций";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.ПодразделенияОрганизаций";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ПодразделенияОрганизаций");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Пользователи_Получение
Процедура ДобавитьПОД_Справочник_Пользователи_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_Пользователи_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.Пользователи";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Пользователи");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Склады_Получение
Процедура ДобавитьПОД_Справочник_Склады_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_Склады_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.Склады";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Склады_Получение");
КонецПроцедуры
#КонецОбласти
#Область Справочник_СкладыГруппа_Получение
Процедура ДобавитьПОД_Справочник_СкладыГруппа_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_СкладыГруппа_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.СкладыГруппа";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СкладыГруппа");
КонецПроцедуры
#КонецОбласти
#Область Справочник_СпецификацииНоменклатуры_Получение
Процедура ДобавитьПОД_Справочник_СпецификацииНоменклатуры_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_СпецификацииНоменклатуры_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.СпецификацииНоменклатуры";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СпецификацииНоменклатуры_Получение");
КонецПроцедуры
#КонецОбласти
#Область Справочник_СпособыОтраженияЗарплатыВФинансовомУчете
Процедура ДобавитьПОД_Справочник_СпособыОтраженияЗарплатыВФинансовомУчете(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_СпособыОтраженияЗарплатыВФинансовомУчете";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.СпособыОтраженияЗарплатыВФинансовомУчете";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СпособыОтраженияЗарплатыВБухУчете_П_ЗУП");
КонецПроцедуры
#КонецОбласти
#Область Справочник_СпособыОтраженияЗарплатыВФинансовомУчетеГруппа
Процедура ДобавитьПОД_Справочник_СпособыОтраженияЗарплатыВФинансовомУчетеГруппа(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_СпособыОтраженияЗарплатыВФинансовомУчетеГруппа";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.СпособыОтраженияЗарплатыВФинансовомУчетеГруппа";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СпособыОтраженияЗарплатыВБухУчетеГруппа");
КонецПроцедуры
#КонецОбласти
#Область Справочник_СтатьиДДС_Получение
Процедура ДобавитьПОД_Справочник_СтатьиДДС_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_СтатьиДДС_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.СтатьиДДС";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СтатьиДДС");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ТипыЦен_Получение
Процедура ДобавитьПОД_Справочник_ТипыЦен_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_ТипыЦен_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.ТипыЦен";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ТипыЦен");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ФизическиеЛица_Получение
Процедура ДобавитьПОД_Справочник_ФизическиеЛица_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_ФизическиеЛица_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.ФизическиеЛица";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ФизическиеЛица_Получение");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ФизическиеЛицаГруппа_Получение
Процедура ДобавитьПОД_Справочник_ФизическиеЛицаГруппа_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_ФизическиеЛицаГруппа_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.ФизическиеЛицаГруппа";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ФизическиеЛицаГруппа_Отправка");
КонецПроцедуры
#КонецОбласти
#КонецОбласти

#КонецОбласти
#Область ПКО
// Заполняет таблицу правил конвертации объектов.
//
// Параметры:
//  НаправлениеОбмена - строка ("Отправка" либо "Получение").
//  ПравилаКонвертации - таблица значений, в которую добавляются правила. 
Процедура ЗаполнитьПравилаКонвертацииОбъектов(НаправлениеОбмена, ПравилаКонвертации) Экспорт
	Если НаправлениеОбмена = "Отправка" Тогда
		ДобавитьПКО_Документ_АвансовыйОтчет_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ВозвратТоваровОтПокупателя_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ВозвратТоваровПоставщику_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_НачислениеОценочныхОбязательств_ЗУП_От(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОприходованиеТоваров_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОстаткиБезналичныхДенежныхСредств(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОстаткиЗадолженностиПодотчетныхЛиц(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОстаткиКредитыЗаймы(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОстаткиНаличныхДенежныхСредств(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОстаткиПерерасходаПодотчетныхЛиц(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОстаткиРасчетыСПокупателямиАвансы(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОстаткиРасчетыСПокупателямиДолги(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОстаткиРасчетыСПоставщикамиАвансы(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОстаткиРасчетыСПоставщикамиДолги(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОстаткиСобственныхТМЦ(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОстаткиТараПереданная(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОстаткиТараПринятая(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОстаткиТоваровПереданныхНаКомиссию(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОстаткиТоваровПринятыхНаКомиссию(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОтражениеЗарплатыВБухучете_Отправка_ЗУП(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПеремещениеТоваров_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПКОКонвертацияВалюты_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПКОПолучениеНаличныхВБанке_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПКОПрочееПоступление_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПКОПрочиеДоходы_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПКОРасчетыСКонтрагентами_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПКОРасчетыССотрудниками_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПКОРозничнаяВыручка_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПОПБДСКонвертацияВалюты_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПОПБДСПрочееПоступление_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПОПБДСПрочиеДоходы_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПОПБДСРасчетыСКонтрагентами_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПОПБДСРасчетыССотрудниками_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПОСБДСПереводНаДругойСчет_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПОСБДСПеречислениеЗП_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПОСБДСПлатежиВБюджет_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПОСБДСПрочееСписание_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПОСБДСПрочиеРасходы_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПОСБДСРасчетыСКонтрагентами_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПоступлениеТоваровУслуг_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПРСКонвертацияВалюты_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПРСПрочееПоступление_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПРСПрочиеДоходы_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПРСРасчетыСКонтрагентами_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПРСРасчетыССотрудниками_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_РеализацияТоваровУслуг_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_РКОВыплатаЗарплаты_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_РКОКонвертацияВалюты_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_РКОНаБанковскийСчет_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_РКОПрочаяВыдача_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_РКОПрочийРасход_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_РКОРасчетыСКонтрагентами_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_РКОРасчетыССотрудниками_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДСПереводНаДругойСчет_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДСПеречислениеЗП_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДСПеречислениеЗПНаЛС_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДСПлатежиВБюджет_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДСПрочееСписание_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДСПрочиеРасходы_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДСРасчетыСКонтрагентами_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДСРасчетыССотрудниками_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_УстановкаЦенНоменклатуры_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_БанковскиеСчета_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ДоговорыКонтрагентов_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Кассы_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Контрагенты_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Номенклатура_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_НоменклатураГруппа_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Организации_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Подразделения_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Склады_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ФизическиеЛица_Отправка(ПравилаКонвертации);
	ИначеЕсли НаправлениеОбмена = "Получение" Тогда
		ДобавитьПКО_Документ_АвансовыйОтчет_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_АвансовыйОтчет_Получение_ЗУП(ПравилаКонвертации);
		ДобавитьПКО_Документ_ВозвратТоваровОтПокупателя(ПравилаКонвертации);
		ДобавитьПКО_Документ_ВозвратТоваровПоставщику(ПравилаКонвертации);
		ДобавитьПКО_Документ_ДепонированиеЗаработнойПлаты_ЗУП(ПравилаКонвертации);
		ДобавитьПКО_Документ_ЗаказКлиента_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ИнвентаризацияТоваровНаСкладе(ПравилаКонвертации);
		ДобавитьПКО_Документ_КорректировкаДолга_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_НачислениеОценочныхОбязательств_ЗУП(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОперацияПоПлатежнойКарте_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОприходованиеТоваров_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОтражениеЗарплатыВБухучете_Получение_ЗУП(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОтчетБанкаПоОперациямЭквайринга_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОтчетОРозничныхПродажах_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОтчетПроизводстваЗаСмену_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПБДСВзносыИОтчисления_Получение_ЗУП(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПБДСВозвратЗаработнойПлаты_Получение_ЗУП(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПБДСКонвертацияВалюты_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПБДСПрочееПоступление_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПБДСПрочиеДоходы_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПБДСРасчетыСКонтрагентами_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПБДСРасчетыССотрудниками_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПередачаТоваров_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПеремещениеТоваров_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПКОВнутренняяПередача_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПКОКонвертацияВалюты_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПКОПолучениеНаличныхВБанке_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПКОПрочееПоступление_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПКОПрочиеДоходы_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПКОРасчетыСКонтрагентами_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПКОРасчетыССотрудниками_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПКОРасчетыССотрудниками_Получение_ЗУП(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПКОРозничнаяВыручка_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПОПБДСКонвертацияВалюты_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПОПБДСПрочееПоступление_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПОПБДСПрочиеДоходы_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПОПБДСРасчетыСКонтрагентами_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПОПБДСРасчетыССотрудниками_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПОСБДСКонвертацияВалюты_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПОСБДСПереводНаДругойСчет_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПОСБДСПеречислениеЗарПлаты_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПОСБДСПлатежиВБюджет_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПОСБДСПрочееСписание_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПОСБДСПрочиеРасходы_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПОСБДСРасчетыСКонтрагентами_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПоступлениеИзПереработки_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_РеализацияТоваровУслуг(ПравилаКонвертации);
		ДобавитьПКО_Документ_РКОВнутренняяПередача_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_РКОВыплатаЗарплаты_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_РКОВыплатаЗарплаты_Получение_ЗУП(ПравилаКонвертации);
		ДобавитьПКО_Документ_РКОКонвертацияВалюты_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_РКОНаБанковскийСчет_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_РКОПрочаяВыдача_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_РКОПрочийРасход_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_РКОРасчетыСКонтрагентами_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_РКОРасчетыССотрудниками_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_РТиУБезПереходаПравСобственностиУслуги(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДСВзносыИОтчисления_Получение_ЗУП(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДСКонвертацияВалюты_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДСПереводНаДругойСчет_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДСПеречислениеЗаработнойПлаты_П_ЗУП(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДСПеречислениеЗаработнойПлаты_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДСПеречислениеЗарПлЛицСчета_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДСПлатежиВБюджет_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДСПрочееСписание_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДСПрочиеРасходы_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДСРасчетыСКонтрагентами_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДСРасчетыССотрудниками_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_СборкаТоваров_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_СписаниеПриСборке_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_СписаниеТоваров(ПравилаКонвертации);
		ДобавитьПКО_Документ_СписаниеТоваровПоИнвентаризации(ПравилаКонвертации);
		ДобавитьПКО_Документ_СчетФактураВыданный_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_СчетФактураПолученный_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ТаможеннаяДекларация_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ТребованиеНакладная_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ЭСФ_Получение(ПравилаКонвертации);
		ДобавитьПКО_ПТиУ_ПоступлениеДопРасходов(ПравилаКонвертации);
		ДобавитьПКО_ПТиУ_ПоступлениеТоваровУслуг(ПравилаКонвертации);
		ДобавитьПКО_ПТиУРасх_ВозвратТоваровПоставщику(ПравилаКонвертации);
		ДобавитьПКО_ПТиУРасх_ВозвратТоваровСтороннейКомпании(ПравилаКонвертации);
		ДобавитьПКО_ПТиУРасх_ОприходованиеТоваров(ПравилаКонвертации);
		ДобавитьПКО_ПТиУРасх_СписаниеТоваров(ПравилаКонвертации);
		ДобавитьПКО_Справочник_БанковскиеСчета_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Валюты_ИзСтруктуры(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ВидыДокументовФизическихЛиц(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ДоговорыКонтрагентов(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ДоговорыКонтрагентов_ИзСтруктуры(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Кассы_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Кассы_Получение_ИзСтруктуры(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Контрагенты_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Номенклатура_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_НоменклатураГруппа_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_НомераГТД_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_НомераГТДИзСтроки_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Организации_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Подразделения(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ПодразделенияОрганизаций(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Склады_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_СпецификацииНоменклатуры_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_СпособыОтраженияЗарплатыВБухУчете_П_ЗУП(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ФизическиеЛица_Получение(ПравилаКонвертации);
	КонецЕсли;
	ДобавитьПКО_Документ_ТаможеннаяДекларация_Отправка(ПравилаКонвертации);
	ДобавитьПКО_Справочник_Банки(ПравилаКонвертации);
	ДобавитьПКО_Справочник_Валюты(ПравилаКонвертации);
	ДобавитьПКО_Справочник_ВидыПоступления(ПравилаКонвертации);
	ДобавитьПКО_Справочник_ВидыРеализации(ПравилаКонвертации);
	ДобавитьПКО_Справочник_ЕдиницыИзмерения(ПравилаКонвертации);
	ДобавитьПКО_Справочник_КлассификаторСтранМира(ПравилаКонвертации);
	ДобавитьПКО_Справочник_КонтрагентыГруппа(ПравилаКонвертации);
	ДобавитьПКО_Справочник_Пользователи(ПравилаКонвертации);
	ДобавитьПКО_Справочник_СкладыГруппа(ПравилаКонвертации);
	ДобавитьПКО_Справочник_СпособыОтраженияЗарплатыВБухУчетеГруппа(ПравилаКонвертации);
	ДобавитьПКО_Справочник_СтатьиДДС(ПравилаКонвертации);
	ДобавитьПКО_Справочник_ТипыЦен(ПравилаКонвертации);
	ДобавитьПКО_Справочник_ФизическиеЛицаГруппа_Отправка(ПравилаКонвертации);
КонецПроцедуры

#Область Отправка
#Область Документ_АвансовыйОтчет_Отправка
Процедура ДобавитьПКО_Документ_АвансовыйОтчет_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_АвансовыйОтчет_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.АвансовыйОтчет;
	ПравилоКонвертации.ОбъектФормата = "Документ.АвансовыйОтчет";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_АвансовыйОтчет_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КоличествоДокументов";
	НоваяСтрока.СвойствоФормата = "КоличествоДокументов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КоличествоЛистов";
	НоваяСтрока.СвойствоФормата = "КоличествоЛистов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КратностьДокумента";
	НоваяСтрока.СвойствоФормата = "КратностьДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КурсДокумента";
	НоваяСтрока.СвойствоФормата = "КурсДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НазначениеАванса";
	НоваяСтрока.СвойствоФормата = "НазначениеАванса";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаВключаетНДС";
	НоваяСтрока.СвойствоФормата = "СуммаВключаетНДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ФизЛицо";
	НоваяСтрока.СвойствоФормата = "ПодотчетноеЛицо";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ФизическиеЛица_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Отправка";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ВыданныеАвансы", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ВыданныеАвансы;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Документ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ОплатаПоставщикам", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ОплатаПоставщикам;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ВалютаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Договор";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КратностьВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КурсВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Содержание";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ПрочиеРасходы", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ПрочиеРасходы;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ДатаСФ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Поставщик";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ПредъявленСФ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Содержание";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ДатаСФ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерГТД";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерСФ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Поставщик";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ПредъявленСФ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтранаПроисхождения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_КлассификаторСтранМира";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ТипЗапасов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_АвансовыйОтчет_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	
	СкладДляВыгрузки = СкладДляВыгрузки(ДанныеИБ.Склад, КомпонентыОбмена.ПараметрыКонвертации);
	ДанныеXDTO.Вставить("Склад", СкладДляВыгрузки);
	
	//Табличные части
	#Область Товары
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Номенклатура КАК Номенклатура,
	|	Номенклатура.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	""СобственныеТовары"" КАК ТипЗапасов,
	|	Количество,
	|	Цена,
	|	Сумма,
	|	СтавкаНДС,
	|	СуммаНДС,
	|	НомерВходящегоДокумента,
	|	ДатаВходящегоДокумента,
	|	Поставщик,
	|	ПредъявленСФ,
	|	ДатаСФ,
	|	НомерСФ
	|ИЗ Документ.АвансовыйОтчет.Товары
	|ГДЕ Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	РезультатЗапроса = Запрос.Выполнить();
	ТаблицаТовары = РезультатЗапроса.Выгрузить();
	Если ТаблицаТовары.Количество() > 0 Тогда
		ОпределитьСтавкуНДС_Отправка(ТаблицаТовары);
		ДанныеXDTO.Вставить("Товары", ТаблицаТовары);
	КонецЕсли;
	#КонецОбласти
	#Область ВыданныеАвансы
	Если ДанныеИБ.ВыданныеАвансы.Количество() > 0 Тогда
		ТаблицаАвансы = Новый ТаблицаЗначений;
		ТаблицаАвансы.Колонки.Добавить("Документ");
		ТаблицаАвансы.Колонки.Добавить("Сумма");
	
		Для Каждого Строка ИЗ ДанныеИБ.ВыданныеАвансы Цикл
			ИмяПКО = "";
			ТипДокумента = ТипЗнч(Строка.Документ);
			Если ТипДокумента = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
				ИмяПКО = "Документ_РКОРасчетыССотрудниками_Отправка";
			ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ПлатежноеПоручениеИсходящее") Тогда
	           ИмяПКО = "Документ_СБДСРасчетыССотрудниками_Отправка";
	        Иначе
	        	Продолжить;
			КонецЕсли;
			СтрокаТаблицы = ТаблицаАвансы.Добавить();
			СтрокаТаблицы.Документ = Новый Структура("Значение, ИмяПКО", Строка.Документ, ИмяПКО);
			СтрокаТаблицы.Сумма = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Строка.Документ, "СуммаДокумента");
		КонецЦикла;
		ДанныеXDTO.Вставить("ВыданныеАвансы", ТаблицаАвансы);
	КонецЕсли;
	#КонецОбласти
	#Область ОплатаПоставщикам
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Контрагент,
	|   ДоговорКонтрагента КАК Договор,
	|   ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|   КурсВзаиморасчетов,
	|   КратностьВзаиморасчетов,
	|   СуммаВзаиморасчетов,
	|   Сумма,
	|   Содержание,
	|   ДатаВходящегоДокумента,
	|   НомерВходящегоДокумента
	|ИЗ Документ.АвансовыйОтчет.ОплатаПоставщикам
	|ГДЕ Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	РезультатЗапроса = Запрос.Выполнить();
	ТаблицаОплатаПоставщикам = РезультатЗапроса.Выгрузить();
	Если ТаблицаОплатаПоставщикам.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("ОплатаПоставщикам", ТаблицаОплатаПоставщикам);
	КонецЕсли;
	#КонецОбласти
	#Область Прочее
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Номенклатура КАК Номенклатура,
	|	Сумма,
	|	СтавкаНДС,
	|	СуммаНДС,
	|   Содержание,
	|   ДатаВходящегоДокумента,
	|   НомерВходящегоДокумента,
	|	Поставщик,
	|	ПредъявленСФ,
	|	ДатаСФ,
	|	НомерСФ
	|ИЗ Документ.АвансовыйОтчет.Прочее
	|ГДЕ Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	РезультатЗапроса = Запрос.Выполнить();
	ТаблицаПрочее = РезультатЗапроса.Выгрузить();
	Если ТаблицаПрочее.Количество() > 0 Тогда
		ОпределитьСтавкуНДС_Отправка(ТаблицаПрочее);
		ДанныеXDTO.Вставить("ПрочиеРасходы", ТаблицаПрочее);
	КонецЕсли;
	#КонецОбласти
КонецПроцедуры
#КонецОбласти
#Область Документ_ВозвратТоваровОтПокупателя_Отправка
Процедура ДобавитьПКО_Документ_ВозвратТоваровОтПокупателя_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ВозвратТоваровОтПокупателя_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ВозвратТоваровОтПокупателя;
	ПравилоКонвертации.ОбъектФормата = "Документ.ВозвратТоваровОтПокупателя";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ВозвратТоваровОтПокупателя_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоговорКонтрагента";
	НоваяСтрока.СвойствоФормата = "Договор";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КратностьВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "КратностьВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КурсВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "КурсВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтруктурноеПодразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаВключаетНДС";
	НоваяСтрока.СвойствоФормата = "СуммаВключаетНДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВалютаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Отправка";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерГТД";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтранаПроисхождения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_КлассификаторСтранМира";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ТипЗапасов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ВозвратТоваровОтПокупателя_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	СкладДляВыгрузки = СкладДляВыгрузки(ДанныеИБ.Склад, КомпонентыОбмена.ПараметрыКонвертации);
	ДанныеXDTO.Вставить("Склад", СкладДляВыгрузки);
	//ДанныеВзаиморасчетов
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|ДоговорКонтрагента.ВидДоговора КАК ВидДоговора
	|ИЗ Документ.ВозвратТоваровОтПокупателя
	|ГДЕ Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	ДанныеXDTO.Вставить("ВалютаВзаиморасчетов", Выборка.ВалютаВзаиморасчетов);
	
	//ВидОперации
	ВидОперации = "ВозвратОтКлиента";
	ДанныеXDTO.Вставить("ВидОперации", ВидОперации);
	
	//Табличные части
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Номенклатура КАК Номенклатура,
	|	Номенклатура.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	""СобственныеТовары"" КАК ТипЗапасов,
	|	Количество,
	|	Цена,
	|	Сумма,
	|	ВозвратТоваровОтПокупателяТовары.СтавкаНДС КАК СтавкаНДС,
	|	СуммаНДС,
	|	"""" КАК НомерГТД,
	|	"""" КАК СтранаПроисхождения
	|ИЗ Документ.ВозвратТоваровОтПокупателя.Товары КАК ВозвратТоваровОтПокупателяТовары
	|ГДЕ Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	РезультатЗапроса = Запрос.Выполнить();
	ТаблицаТовары = РезультатЗапроса.Выгрузить();
	Если ТаблицаТовары.Количество() > 0 Тогда
		ОпределитьСтавкуНДС_Отправка(ТаблицаТовары);
		ДанныеXDTO.Вставить("Товары", ТаблицаТовары);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ВозвратТоваровПоставщику_Отправка
Процедура ДобавитьПКО_Документ_ВозвратТоваровПоставщику_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ВозвратТоваровПоставщику_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ВозвратТоваровПоставщику;
	ПравилоКонвертации.ОбъектФормата = "Документ.ВозвратТоваровПоставщику";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ВозвратТоваровПоставщику_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Грузополучатель";
	НоваяСтрока.СвойствоФормата = "Грузополучатель";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоговорКонтрагента";
	НоваяСтрока.СвойствоФормата = "Договор";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КратностьВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "КратностьВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КурсВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "КурсВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Сделка";
	НоваяСтрока.СвойствоФормата = "ДокументПоступления";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Документ_ПоступлениеТоваровУслуг_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтруктурноеПодразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаВключаетНДС";
	НоваяСтрока.СвойствоФормата = "СуммаВключаетНДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВалютаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Отправка";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидОборота";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "ПеречислениеСсылка_ВидыОборотовПоРеализации";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ДокументПоступления";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Документ_ПоступлениеТоваровУслуг_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерГТД";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтранаПроисхождения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_КлассификаторСтранМира";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ТипЗапасов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ВозвратТоваровПоставщику_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	СкладДляВыгрузки = СкладДляВыгрузки(ДанныеИБ.Склад, КомпонентыОбмена.ПараметрыКонвертации);
	ДанныеXDTO.Вставить("Склад", СкладДляВыгрузки);
	
	//ДанныеВзаиморасчетов
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|ДоговорКонтрагента.ВидДоговора КАК ВидДоговора
	|ИЗ Документ.ВозвратТоваровПоставщику
	|ГДЕ Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	ДанныеXDTO.Вставить("ВалютаВзаиморасчетов", Выборка.ВалютаВзаиморасчетов);
	
	//ВидОперации
	ВидОперации = "";
	ВидОперации = "ВозвратПоставщику";
	ДанныеXDTO.Вставить("ВидОперации", ВидОперации);
	
	//Табличные части
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Номенклатура КАК Номенклатура,
	|	ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	""СобственныеТовары"" КАК ТипЗапасов,
	|	Количество,
	|	Цена,
	|	Сумма,
	|	СтавкаНДС,
	|	НДСВидОборота КАК ВидОборота,
	|	НДСВидПоступления КАК ВидОперацииПоступления,
	|	СуммаНДС
	|ИЗ Документ.ВозвратТоваровПоставщику.Товары
	|ГДЕ Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	РезультатЗапроса = Запрос.Выполнить();
	ТаблицаТовары = РезультатЗапроса.Выгрузить();
	Если ТаблицаТовары.Количество() > 0 Тогда
		ОпределитьСтавкуНДС_Отправка(ТаблицаТовары);
		ДанныеXDTO.Вставить("Товары", ТаблицаТовары);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_НачислениеОценочныхОбязательств_ЗУП_От
Процедура ДобавитьПКО_Документ_НачислениеОценочныхОбязательств_ЗУП_От(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_НачислениеОценочныхОбязательств_ЗУП_От";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ОтражениеЗарплатыВБухучете;
	ПравилоКонвертации.ОбъектФормата = "Документ.НачислениеОценочныхОбязательствПоОтпускам";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_НачислениеОценочныхОбязательств_ЗУП_От_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Бухгалтер";
	НоваяСтрока.СвойствоФормата = "Бухгалтер";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПериодРегистрации";
	НоваяСтрока.СвойствоФормата = "ПериодРегистрации";

КонецПроцедуры

Процедура ПКО_Документ_НачислениеОценочныхОбязательств_ЗУП_От_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если ДанныеИБ.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийОтражениеЗарплатыВБухучете.ОтражениеЗарплатыВзносовУдержаний") Тогда
		Возврат;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ОприходованиеТоваров_Отправка
Процедура ДобавитьПКО_Документ_ОприходованиеТоваров_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ОприходованиеТоваров_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ОприходованиеТоваров;
	ПравилоКонвертации.ОбъектФормата = "Документ.ОприходованиеТоваров";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОприходованиеТоваров_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Основание";
	НоваяСтрока.СвойствоФормата = "Основание";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтруктурноеПодразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ТипЦен";
	НоваяСтрока.СвойствоФормата = "ТипЦен";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ТипыЦен";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Отправка";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерГТД";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерСтрокиДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтранаПроисхождения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ТипЗапасов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_ОприходованиеТоваров_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	СкладДляВыгрузки = СкладДляВыгрузки(ДанныеИБ.Склад, КомпонентыОбмена.ПараметрыКонвертации);
	ДанныеXDTO.Вставить("Склад", СкладДляВыгрузки);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	НомерСтроки КАК НомерСтрокиДокумента,
	|	Номенклатура,
	|	ЕдиницаИзмерения,
	|	Количество,
	|	Цена,
	|	Сумма,
	|	СчетУчетаБУ
	|ИЗ Документ.ОприходованиеТоваров.Товары
	|ГДЕ Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Товары = Запрос.Выполнить().Выгрузить();
	
	Товары.Колонки.Добавить("ТипЗапасов");
	
	Для Каждого Строка Из Товары Цикл
		Строка.ТипЗапасов = ОпределитьТипЗапасовПоСчетуУчета(Строка.СчетУчетаБУ);
	КонецЦикла;
	
	ДанныеXDTO.Вставить("Товары", Товары);
КонецПроцедуры
#КонецОбласти
#Область Документ_ОстаткиБезналичныхДенежныхСредств
Процедура ДобавитьПКО_Документ_ОстаткиБезналичныхДенежныхСредств(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ОстаткиБезналичныхДенежныхСредств";
	ПравилоКонвертации.ОбъектДанных = Неопределено;
	ПравилоКонвертации.ОбъектФормата = "Документ.ОстаткиБезналичныхДенежныхСредств";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОстаткиБезналичныхДенежныхСредств_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Дата";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДенежныеСредства", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДенежныеСредства;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "БанковскийСчет";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидБанковскогоСчета";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаРегл";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ОстаткиБезналичныхДенежныхСредств_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.Вставить("ДенежныеСредства", ДанныеИБ.ДенежныеСредства);
КонецПроцедуры
#КонецОбласти
#Область Документ_ОстаткиЗадолженностиПодотчетныхЛиц
Процедура ДобавитьПКО_Документ_ОстаткиЗадолженностиПодотчетныхЛиц(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ОстаткиЗадолженностиПодотчетныхЛиц";
	ПравилоКонвертации.ОбъектДанных = Неопределено;
	ПравилоКонвертации.ОбъектФормата = "Документ.ОстаткиЗадолженностиПодотчетныхЛиц";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОстаткиЗадолженностиПодотчетныхЛиц_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Расчеты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Расчеты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ВалютаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ДокументРасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаРегл";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ФизическоеЛицо";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ФизическиеЛица_Отправка";

КонецПроцедуры

Процедура ПКО_Документ_ОстаткиЗадолженностиПодотчетныхЛиц_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.Вставить("Расчеты", ДанныеИБ.Расчеты);
	
	// ДокументРасчетов
	Для Каждого Строка Из ДанныеXDTO.Расчеты Цикл
	
		Если ЗначениеЗаполнено(Строка.ДокументРасчетов) Тогда
			
			Инструкция = Новый Структура("Значение", Строка.ДокументРасчетов);
			Если ТипЗнч(Строка.ДокументРасчетов) = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
				Инструкция.Вставить("ИмяПКО", "Документ_РКОРасчетыССотрудниками_Отправка");
			ИначеЕсли ТипЗнч(Строка.ДокументРасчетов) = Тип("ДокументСсылка.ПлатежноеПоручениеИсходящее") Тогда
				Инструкция.Вставить("ИмяПКО", "Документ_СБДСРасчетыССотрудниками_Отправка");
			КонецЕсли;
			Строка.ДокументРасчетов = Инструкция;
			
		КонецЕсли;
	
	КонецЦикла;
КонецПроцедуры
#КонецОбласти
#Область Документ_ОстаткиКредитыЗаймы
Процедура ДобавитьПКО_Документ_ОстаткиКредитыЗаймы(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ОстаткиКредитыЗаймы";
	ПравилоКонвертации.ОбъектДанных = Неопределено;
	ПравилоКонвертации.ОбъектФормата = "Документ.ОстаткиРасчетовПоКредитамЗаймам";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОстаткиКредитыЗаймы_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Дата";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Расчеты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Расчеты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ВалютаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидРасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Договор";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаРегл";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ОстаткиКредитыЗаймы_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ПравилаКонвертации = Новый Соответствие;
	
	ПравилаКонвертации.Вставить(ПланыСчетов.Типовой.КраткосрочныеБанковскиеЗаймы, "КраткосрочныеКредиты");
	
	ПравилаКонвертации.Вставить(ПланыСчетов.Типовой.ДолгосрочныеБанковскиеЗаймы, "ДолгосрочныеКредиты");
	
	Для Каждого Строка Из ДанныеИБ.Расчеты Цикл
		Строка.ВидРасчетов = ПравилаКонвертации.Получить(Строка.ВидРасчетов);	
	КонецЦикла;
	
	ДанныеXDTO.Вставить("Расчеты", ДанныеИБ.Расчеты);
КонецПроцедуры
#КонецОбласти
#Область Документ_ОстаткиНаличныхДенежныхСредств
Процедура ДобавитьПКО_Документ_ОстаткиНаличныхДенежныхСредств(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ОстаткиНаличныхДенежныхСредств";
	ПравилоКонвертации.ОбъектДанных = Неопределено;
	ПравилоКонвертации.ОбъектФормата = "Документ.ОстаткиНаличныхДенежныхСредств";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОстаткиНаличныхДенежныхСредств_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДенежныеСредства", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДенежныеСредства;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаРегл";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ОстаткиНаличныхДенежныхСредств_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.Вставить("ДенежныеСредства", ДанныеИБ.ДенежныеСредства);
КонецПроцедуры
#КонецОбласти
#Область Документ_ОстаткиПерерасходаПодотчетныхЛиц
Процедура ДобавитьПКО_Документ_ОстаткиПерерасходаПодотчетныхЛиц(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ОстаткиПерерасходаПодотчетныхЛиц";
	ПравилоКонвертации.ОбъектДанных = Неопределено;
	ПравилоКонвертации.ОбъектФормата = "Документ.ОстаткиПерерасходаПодотчетныхЛиц";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОстаткиПерерасходаПодотчетныхЛиц_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Расчеты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Расчеты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ВалютаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ДокументРасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Документ_АвансовыйОтчет_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаРегл";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ФизическоеЛицо";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ФизическиеЛица_Отправка";

КонецПроцедуры

Процедура ПКО_Документ_ОстаткиПерерасходаПодотчетныхЛиц_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.Вставить("Расчеты", ДанныеИБ.Расчеты);
КонецПроцедуры
#КонецОбласти
#Область Документ_ОстаткиРасчетыСПокупателямиАвансы
Процедура ДобавитьПКО_Документ_ОстаткиРасчетыСПокупателямиАвансы(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ОстаткиРасчетыСПокупателямиАвансы";
	ПравилоКонвертации.ОбъектДанных = Неопределено;
	ПравилоКонвертации.ОбъектФормата = "Документ.ОстаткиРасчетовСПокупателямиАвансы";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОстаткиРасчетыСПокупателямиАвансы_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Дата";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Расчеты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Расчеты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ВалютаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КратностьВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КурсВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "РасчетыВУсловныхЕдиницах";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаРегл";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ОстаткиРасчетыСПокупателямиАвансы_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.Вставить("Расчеты", ДанныеИБ.Расчеты);
	
	// Договор
	ДанныеXDTO.Расчеты.Колонки.Добавить("Договор");
	Для Каждого Строка Из ДанныеXDTO.Расчеты Цикл
		
		Инструкция = Новый Структура;
		Если ЗначениеЗаполнено(Строка.ДатаРасчетногоДокумента)
			И ЗначениеЗаполнено(Строка.НомерРасчетногоДокумента) Тогда
			Инструкция.Вставить("Значение", Строка.РасчетныйДокумент);
			Инструкция.Вставить("ИмяПКО", "Справочник_ДоговорыКонтрагентов_Отправка");
			Строка.Договор = Инструкция;
		КонецЕсли;
		
	КонецЦикла;
КонецПроцедуры
#КонецОбласти
#Область Документ_ОстаткиРасчетыСПокупателямиДолги
Процедура ДобавитьПКО_Документ_ОстаткиРасчетыСПокупателямиДолги(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ОстаткиРасчетыСПокупателямиДолги";
	ПравилоКонвертации.ОбъектДанных = Неопределено;
	ПравилоКонвертации.ОбъектФормата = "Документ.ОстаткиРасчетовСПокупателямиДолги";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОстаткиРасчетыСПокупателямиДолги_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Дата";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Расчеты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Расчеты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ВалютаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КратностьВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КурсВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "РасчетыВУсловныхЕдиницах";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаРегл";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ОстаткиРасчетыСПокупателямиДолги_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.Вставить("Расчеты", ДанныеИБ.Расчеты);
	
	// Договор
	ДанныеXDTO.Расчеты.Колонки.Добавить("Договор");
	Для Каждого Строка Из ДанныеXDTO.Расчеты Цикл
		
		Инструкция = Новый Структура;
		Если ЗначениеЗаполнено(Строка.ДатаРасчетногоДокумента)
			И ЗначениеЗаполнено(Строка.НомерРасчетногоДокумента) Тогда
			Инструкция.Вставить("Значение", Строка.РасчетныйДокумент);
			Инструкция.Вставить("ИмяПКО", "Справочник_ДоговорыКонтрагентов_Отправка");
			Строка.Договор = Инструкция;
		КонецЕсли;
		
	КонецЦикла;
КонецПроцедуры
#КонецОбласти
#Область Документ_ОстаткиРасчетыСПоставщикамиАвансы
Процедура ДобавитьПКО_Документ_ОстаткиРасчетыСПоставщикамиАвансы(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ОстаткиРасчетыСПоставщикамиАвансы";
	ПравилоКонвертации.ОбъектДанных = Неопределено;
	ПравилоКонвертации.ОбъектФормата = "Документ.ОстаткиРасчетовСПоставщикамиАвансы";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОстаткиРасчетыСПоставщикамиАвансы_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Дата";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Расчеты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Расчеты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ВалютаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Договор";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаРегл";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ОстаткиРасчетыСПоставщикамиАвансы_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.Вставить("Расчеты", ДанныеИБ.Расчеты);
	
	// Договор
	ДанныеXDTO.Расчеты.Колонки.Добавить("Договор");
	Для Каждого Строка Из ДанныеXDTO.Расчеты Цикл
		
		Инструкция = Новый Структура;
		Если ЗначениеЗаполнено(Строка.ДатаРасчетногоДокумента)
			И ЗначениеЗаполнено(Строка.НомерРасчетногоДокумента) Тогда
			Инструкция.Вставить("Значение", Строка.РасчетныйДокумент);
			Инструкция.Вставить("ИмяПКО", "Справочник_ДоговорыКонтрагентов_Отправка");
			Строка.Договор = Инструкция;
		КонецЕсли;
		
	КонецЦикла;
КонецПроцедуры
#КонецОбласти
#Область Документ_ОстаткиРасчетыСПоставщикамиДолги
Процедура ДобавитьПКО_Документ_ОстаткиРасчетыСПоставщикамиДолги(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ОстаткиРасчетыСПоставщикамиДолги";
	ПравилоКонвертации.ОбъектДанных = Неопределено;
	ПравилоКонвертации.ОбъектФормата = "Документ.ОстаткиРасчетовСПоставщикамиДолги";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОстаткиРасчетыСПоставщикамиДолги_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Дата";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Расчеты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Расчеты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ВалютаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Договор";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "РасчетыВУсловныхЕдиницах";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаРегл";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ОстаткиРасчетыСПоставщикамиДолги_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.Вставить("Расчеты", ДанныеИБ.Расчеты);
	
	// Договор
	ДанныеXDTO.Расчеты.Колонки.Добавить("Договор");
	Для Каждого Строка Из ДанныеXDTO.Расчеты Цикл
		
		Инструкция = Новый Структура;
		Если ЗначениеЗаполнено(Строка.ДатаРасчетногоДокумента)
			И ЗначениеЗаполнено(Строка.НомерРасчетногоДокумента) Тогда
			Инструкция.Вставить("Значение", Строка.РасчетныйДокумент);
			Инструкция.Вставить("ИмяПКО", "Справочник_ДоговорыКонтрагентов_Отправка");
			Строка.Договор = Инструкция;
		КонецЕсли;
		
	КонецЦикла;
КонецПроцедуры
#КонецОбласти
#Область Документ_ОстаткиСобственныхТМЦ
Процедура ДобавитьПКО_Документ_ОстаткиСобственныхТМЦ(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ОстаткиСобственныхТМЦ";
	ПравилоКонвертации.ОбъектДанных = Неопределено;
	ПравилоКонвертации.ОбъектФормата = "Документ.ОстаткиСобственныхТМЦ";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОстаткиСобственныхТМЦ_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Отправка";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ТМЦ", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ТМЦ;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидЗапасов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ДокументПоступления";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Документ_ПоступлениеТоваровУслуг_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерГТД";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтранаПроисхождения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_КлассификаторСтранМира";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаБезНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетФактура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Документ_СчетФактураПолученный_Отправка";

КонецПроцедуры

Процедура ПКО_Документ_ОстаткиСобственныхТМЦ_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.Вставить("ТМЦ", ДанныеИБ.ТМЦ);
КонецПроцедуры
#КонецОбласти
#Область Документ_ОстаткиТараПереданная
Процедура ДобавитьПКО_Документ_ОстаткиТараПереданная(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ОстаткиТараПереданная";
	ПравилоКонвертации.ОбъектДанных = Неопределено;
	ПравилоКонвертации.ОбъектФормата = "Документ.ОстаткиТараПереданная";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОстаткиТараПереданная_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Дата";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Тара", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Тара;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КоличествоУпаковок";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерГТД";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтранаПроисхождения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_КлассификаторСтранМира";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаБезНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ОстаткиТараПереданная_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.Вставить("Тара", ДанныеИБ.Тара);
КонецПроцедуры
#КонецОбласти
#Область Документ_ОстаткиТараПринятая
Процедура ДобавитьПКО_Документ_ОстаткиТараПринятая(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ОстаткиТараПринятая";
	ПравилоКонвертации.ОбъектДанных = Неопределено;
	ПравилоКонвертации.ОбъектФормата = "Документ.ОстаткиТараПринятая";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОстаткиТараПринятая_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Отправка";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Тара", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Тара;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КоличествоУпаковок";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерГТД";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтранаПроисхождения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_КлассификаторСтранМира";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаБезНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ОстаткиТараПринятая_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.Вставить("Тара", ДанныеИБ.Тара);
КонецПроцедуры
#КонецОбласти
#Область Документ_ОстаткиТоваровПереданныхНаКомиссию
Процедура ДобавитьПКО_Документ_ОстаткиТоваровПереданныхНаКомиссию(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ОстаткиТоваровПереданныхНаКомиссию";
	ПравилоКонвертации.ОбъектДанных = Неопределено;
	ПравилоКонвертации.ОбъектФормата = "Документ.ОстаткиТоваровПереданныхНаКомиссию";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОстаткиТоваровПереданныхНаКомиссию_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Дата";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КоличествоУпаковок";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерГТД";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтранаПроисхождения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_КлассификаторСтранМира";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаБезНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ОстаткиТоваровПереданныхНаКомиссию_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.Вставить("Товары", ДанныеИБ.Товары);
КонецПроцедуры
#КонецОбласти
#Область Документ_ОстаткиТоваровПринятыхНаКомиссию
Процедура ДобавитьПКО_Документ_ОстаткиТоваровПринятыхНаКомиссию(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ОстаткиТоваровПринятыхНаКомиссию";
	ПравилоКонвертации.ОбъектДанных = Неопределено;
	ПравилоКонвертации.ОбъектФормата = "Документ.ОстаткиТоваровПринятыхНаКомиссию";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОстаткиТоваровПринятыхНаКомиссию_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Договор";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Отправка";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КоличествоУпаковок";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерГТД";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтранаПроисхождения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_КлассификаторСтранМира";

КонецПроцедуры

Процедура ПКО_Документ_ОстаткиТоваровПринятыхНаКомиссию_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.Вставить("Товары", ДанныеИБ.Товары);
КонецПроцедуры
#КонецОбласти
#Область Документ_ОтражениеЗарплатыВБухучете_Отправка_ЗУП
Процедура ДобавитьПКО_Документ_ОтражениеЗарплатыВБухучете_Отправка_ЗУП(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ОтражениеЗарплатыВБухучете_Отправка_ЗУП";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ОтражениеЗарплатыВБухучете;
	ПравилоКонвертации.ОбъектФормата = "Документ.ОтражениеЗарплатыВФинансовомУчете";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОтражениеЗарплатыВБухучете_Отправка_ЗУП_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Бухгалтер";
	НоваяСтрока.СвойствоФормата = "Бухгалтер";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПериодРегистрации";
	НоваяСтрока.СвойствоФормата = "ПериодРегистрации";

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_ОтражениеЗарплатыВБухучете_Отправка_ЗУП_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если ДанныеИБ.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийОтражениеЗарплатыВБухучете.ОтражениеОценочныхОбязательств") Тогда
		Возврат;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ПеремещениеТоваров_Отправка
Процедура ДобавитьПКО_Документ_ПеремещениеТоваров_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПеремещениеТоваров_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПеремещениеТоваров;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПеремещениеТоваров";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПеремещениеТоваров_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СкладОтправитель";
	НоваяСтрока.СвойствоФормата = "СкладОтправитель";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СкладПолучатель";
	НоваяСтрока.СвойствоФормата = "СкладПолучатель";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Отправка";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДСВРознице";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаВРознице";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ТипЗапасов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЦенаВРознице";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_ПеремещениеТоваров_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Товары = ДанныеИБ.Товары.Выгрузить();
	
	Товары.Колонки.Добавить("ТипЗапасов");
	Для Каждого Строка Из Товары Цикл
		Строка.ТипЗапасов = ОпределитьТипЗапасовПоСчетуУчета(Строка.СчетУчетаБУ);
	КонецЦикла;
	
	ДанныеXDTO.Вставить("Товары", Товары);
КонецПроцедуры
#КонецОбласти
#Область Документ_ПКОКонвертацияВалюты_Отправка
Процедура ДобавитьПКО_Документ_ПКОКонвертацияВалюты_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПКОКонвертацияВалюты_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПриходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПКОКонвертацияВалюты";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПКОКонвертацияВалюты_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Касса";
	НоваяСтрока.СвойствоФормата = "Касса";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Кассы_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Основание";
	НоваяСтрока.СвойствоФормата = "Основание";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Приложение";
	НоваяСтрока.СвойствоФормата = "Приложение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПринятоОт";
	НоваяСтрока.СвойствоФормата = "ПринятоОт";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтруктурноеПодразделениеОтправитель";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СубконтоКтБУ1";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ВалютаКонвертации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Договор";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КратностьКонвертации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КурсКонвертации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КурсЦБНаДатуКонвертации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяДДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаВал";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ПКОКонвертацияВалюты_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
		
	АлгоритмКонвертации = "";
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	Если ДанныеИБ.ВалютаДокумента = ВалютаРегламентированногоУчета Тогда
		АлгоритмКонвертации = "ПоступленияОтПродажиИностраннойВалюты";
	ИначеЕсли ДанныеИБ.ВалютаДокумента <> ВалютаРегламентированногоУчета Тогда
		АлгоритмКонвертации = "ПриобретениеИностраннойВалюты";
	КонецЕсли;
	
	// Расшифровка платежа
	ТабРП = Новый ТаблицаЗначений;
	ТабРП.Колонки.Добавить("СтатьяДДС");
	ТабРП.Колонки.Добавить("Сумма");
	ТабРП.Колонки.Добавить("СуммаВал");
	ТабРП.Колонки.Добавить("ВалютаКонвертации");
	ТабРП.Колонки.Добавить("КурсКонвертации");
	ТабРП.Колонки.Добавить("КратностьКонвертации");
	ТабРП.Колонки.Добавить("КурсЦБНаДатуКонвертации");
	ТабРП.Колонки.Добавить("Договор");
	
	СтрокаРП = ТабРП.Добавить();
	СтрокаРП.СтатьяДДС = ДанныеИБ.СтатьяДвиженияДенежныхСредств;
	
	//Корректность и заполненность СубконтоКт2 проверяется в ПОД
	ВалютаКонвертации = ДанныеИБ.СубконтоКтБУ2.ВалютаВзаиморасчетов;
	СтрокаРП.ВалютаКонвертации = ВалютаКонвертации;
	СтрокаРП.Договор = ДанныеИБ.СубконтоКтБУ2;
	
	// КурсЦБНаДатуКонвертации
	ПараметрыКурсаЦБНаДатуОперацииСВалютой = ОбщегоНазначенияБК.ПолучитьКурсВалюты(ВалютаКонвертации, ДанныеИБ.Дата);
	СтрокаРП.КратностьКонвертации = ПараметрыКурсаЦБНаДатуОперацииСВалютой.Кратность;
	СтрокаРП.КурсЦБНаДатуКонвертации = ПараметрыКурсаЦБНаДатуОперацииСВалютой.Курс;
	СтрокаРП.КурсКонвертации = ПараметрыКурсаЦБНаДатуОперацииСВалютой.Курс;
	
	// СуммаВал
	ПараметрыВалютыРег  = Новый Структура("Курс, Кратность, Валюта", 1, 1, ВалютаРегламентированногоУчета);
	ПараметрыВалютыКонв = Новый Структура("Курс, Кратность, Валюта",
		СтрокаРП.КурсКонвертации, СтрокаРП.КратностьКонвертации, ВалютаКонвертации);
	
	Если АлгоритмКонвертации = "ПоступленияОтПродажиИностраннойВалюты" Тогда
		СтрокаРП.Сумма = ДанныеИБ.СуммаДокумента;
		СтрокаРП.СуммаВал = ОбщегоНазначенияБККлиентСервер.ПересчитатьПоКурсу(ДанныеИБ.СуммаДокумента, ПараметрыВалютыРег, ПараметрыВалютыКонв);
	Иначе
		СтрокаРП.СуммаВал = ДанныеИБ.СуммаДокумента;
		СтрокаРП.Сумма = ОбщегоНазначенияБККлиентСервер.ПересчитатьПоКурсу(ДанныеИБ.СуммаДокумента, ПараметрыВалютыКонв, ПараметрыВалютыРег);
	КонецЕсли;
		
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", ТабРП);
КонецПроцедуры
#КонецОбласти
#Область Документ_ПКОПолучениеНаличныхВБанке_Отправка
Процедура ДобавитьПКО_Документ_ПКОПолучениеНаличныхВБанке_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПКОПолучениеНаличныхВБанке_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПриходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПКОПолучениеНаличныхВБанке";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПКОПолучениеНаличныхВБанке_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Касса";
	НоваяСтрока.СвойствоФормата = "Касса";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Кассы_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Основание";
	НоваяСтрока.СвойствоФормата = "Основание";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Приложение";
	НоваяСтрока.СвойствоФормата = "Приложение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПринятоОт";
	НоваяСтрока.СвойствоФормата = "ПринятоОт";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтруктурноеПодразделениеОтправитель";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетОрганизации";
	НоваяСтрока.СвойствоФормата = "БанковскийСчет";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ПКОПолучениеНаличныхВБанке_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.Вставить("ВидОперации", "ПолучениеНаличных");
КонецПроцедуры
#КонецОбласти
#Область Документ_ПКОПрочееПоступление_Отправка
Процедура ДобавитьПКО_Документ_ПКОПрочееПоступление_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПКОПрочееПоступление_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПриходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПКОПрочееПоступление";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПКОПрочееПоступление_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Касса";
	НоваяСтрока.СвойствоФормата = "Касса";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Кассы_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Основание";
	НоваяСтрока.СвойствоФормата = "Основание";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Приложение";
	НоваяСтрока.СвойствоФормата = "Приложение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПринятоОт";
	НоваяСтрока.СвойствоФормата = "ПринятоОт";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтруктурноеПодразделениеОтправитель";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяДДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ПКОПрочееПоступление_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Контрагент = ДанныеИБ.Контрагент;
	Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
		Если ТипЗнч(ДанныеИБ.СубконтоКтБУ1) = Тип("СправочникСсылка.Контрагенты") И ЗначениеЗаполнено(ДанныеИБ.СубконтоКтБУ1) Тогда
			Контрагент = ДанныеИБ.СубконтоКтБУ1;
		ИначеЕсли ТипЗнч(ДанныеИБ.СубконтоКтБУ2) = Тип("СправочникСсылка.Контрагенты") И ЗначениеЗаполнено(ДанныеИБ.СубконтоКтБУ2) Тогда
			Контрагент = ДанныеИБ.СубконтоКтБУ2;
		ИначеЕсли ТипЗнч(ДанныеИБ.СубконтоКтБУ3) = Тип("СправочникСсылка.Контрагенты") И ЗначениеЗаполнено(ДанныеИБ.СубконтоКтБУ3) Тогда
			Контрагент = ДанныеИБ.СубконтоКтБУ3;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
		Инструкция = Новый Структура("Значение, ИмяПКО");
		Инструкция.Значение = Контрагент;
		Инструкция.ИмяПКО = "Справочник_Контрагенты_Отправка";
		ДанныеXDTO.Вставить("Контрагент", Инструкция);
	Иначе
		ДанныеXDTO.Вставить("Контрагент", Неопределено);
	КонецЕсли;
		
	ТабРасшифровка = Новый ТаблицаЗначений;
	ТабРасшифровка.Колонки.Добавить("СтатьяДДС");
	ТабРасшифровка.Колонки.Добавить("Сумма");
	НоваяСтрока = ТабРасшифровка.Добавить();
	НоваяСтрока.СтатьяДДС = ДанныеИБ.СтатьяДвиженияДенежныхСредств;
	
	НоваяСтрока.Сумма = ДанныеИБ.СуммаДокумента;
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", ТабРасшифровка);
КонецПроцедуры
#КонецОбласти
#Область Документ_ПКОПрочиеДоходы_Отправка
Процедура ДобавитьПКО_Документ_ПКОПрочиеДоходы_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПКОПрочиеДоходы_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПриходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПКОПрочиеДоходы";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПКОПрочиеДоходы_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Касса";
	НоваяСтрока.СвойствоФормата = "Касса";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Кассы_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Основание";
	НоваяСтрока.СвойствоФормата = "Основание";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Приложение";
	НоваяСтрока.СвойствоФормата = "Приложение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПринятоОт";
	НоваяСтрока.СвойствоФормата = "ПринятоОт";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтруктурноеПодразделениеОтправитель";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяДДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяДоходов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДоходов";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ПКОПрочиеДоходы_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.КОличество() > 1 Тогда
		Возврат;
	КонецЕсли;
		
	ТабРасшифровка = Новый ТаблицаЗначений;
	ТабРасшифровка.Колонки.Добавить("СтатьяДДС");
	ТабРасшифровка.Колонки.Добавить("СтатьяДоходов");
	ТабРасшифровка.Колонки.Добавить("Сумма");
	НоваяСтрока = ТабРасшифровка.Добавить();
	НоваяСтрока.СтатьяДДС = ДанныеИБ.СтатьяДвиженияДенежныхСредств;
	НоваяСтрока.Сумма = ДанныеИБ.СуммаДокумента;
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", ТабРасшифровка);
КонецПроцедуры
#КонецОбласти
#Область Документ_ПКОРасчетыСКонтрагентами_Отправка
Процедура ДобавитьПКО_Документ_ПКОРасчетыСКонтрагентами_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПКОРасчетыСКонтрагентами_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПриходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПКОРасчетыСКонтрагентами";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПКОРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Касса";
	НоваяСтрока.СвойствоФормата = "Касса";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Кассы_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Основание";
	НоваяСтрока.СвойствоФормата = "Основание";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Приложение";
	НоваяСтрока.СвойствоФормата = "Приложение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПринятоОт";
	НоваяСтрока.СвойствоФормата = "ПринятоОт";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ВалютаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Договор";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КратностьВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КурсВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "РасчетыВУсловныхЕдиницах";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяДДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетУчетаРасчетовПоАвансам";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетУчетаРасчетовСКонтрагентом";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ПКОРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	// Вид расчетов
	Если Не ЗначениеЗаполнено(ДанныеИБ.ВидОперации)
		Или ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПКО.ОплатаПокупателя Тогда
		
		ДанныеXDTO.Вставить("ВидРасчетов", "СПокупателем");
	
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПоставщиком Тогда
		
		ДанныеXDTO.Вставить("ВидРасчетов", "СПоставщиком");
		
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПКО.РасчетыПоКредитамИЗаймамСКонтрагентами Тогда
		
		ДанныеXDTO.Вставить("ВидРасчетов", "КредитыИЗаймы");
		
	Иначе
		ДанныеXDTO.Вставить("ВидРасчетов", "Прочее");
	КонецЕсли;
		
	//Расшифровка платежа
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПриходныйКассовыйОрдерРасшифровкаПлатежа.СуммаПлатежа КАК Сумма,
	               |	ПриходныйКассовыйОрдерРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств КАК СтатьяДДС,
	               |	ПриходныйКассовыйОрдерРасшифровкаПлатежа.ДоговорКонтрагента КАК Договор,
	               |	ПриходныйКассовыйОрдерРасшифровкаПлатежа.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
	               |	ПриходныйКассовыйОрдерРасшифровкаПлатежа.КратностьВзаиморасчетов КАК КратностьВзаиморасчетов,
	               |	ПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.ВалютаДокумента КАК ВалютаВзаиморасчетов,
	               |	ПриходныйКассовыйОрдерРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентомБУ.Код КАК СчетУчетаРасчетовСКонтрагентом,
	               |	ПриходныйКассовыйОрдерРасшифровкаПлатежа.СчетУчетаРасчетовПоАвансам.Код КАК СчетУчетаРасчетовПоАвансам,
	               |	ПриходныйКассовыйОрдерРасшифровкаПлатежа.ДоговорКонтрагента.ВалютаВзаиморасчетов <> &НациональнаяВалюта КАК РасчетыВУсловныхЕдиницах,
	               |	ВЫБОР
	               |		КОГДА ПриходныйКассовыйОрдерРасшифровкаПлатежа.СтавкаНДС.Ставка = 0
	               |				И ПриходныйКассовыйОрдерРасшифровкаПлатежа.СтавкаНДС.ДляОсвобожденногоОборота
	               |			ТОГДА ""БезНДС""
	               |		ИНАЧЕ ПриходныйКассовыйОрдерРасшифровкаПлатежа.СтавкаНДС.Ставка
	               |	КОНЕЦ КАК СтавкаНДС
	               |ИЗ
	               |	Документ.ПриходныйКассовыйОрдер.РасшифровкаПлатежа КАК ПриходныйКассовыйОрдерРасшифровкаПлатежа
	               |ГДЕ
	               |	ПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка = &Ссылка";
	               
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Запрос.УстановитьПараметр("НациональнаяВалюта", Константы.ВалютаРегламентированногоУчета.Получить());
	
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", Запрос.Выполнить().Выгрузить());
КонецПроцедуры
#КонецОбласти
#Область Документ_ПКОРасчетыССотрудниками_Отправка
Процедура ДобавитьПКО_Документ_ПКОРасчетыССотрудниками_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПКОРасчетыССотрудниками_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПриходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПКОРасчетыССотрудниками";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПКОРасчетыССотрудниками_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Касса";
	НоваяСтрока.СвойствоФормата = "Касса";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Кассы_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Сотрудник";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ФизическиеЛица_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Основание";
	НоваяСтрока.СвойствоФормата = "Основание";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Приложение";
	НоваяСтрока.СвойствоФормата = "Приложение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПринятоОт";
	НоваяСтрока.СвойствоФормата = "ПринятоОт";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтруктурноеПодразделениеОтправитель";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидРасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ПКОРасчетыССотрудниками_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.КОличество() > 1 Тогда
		Возврат;
	КонецЕсли;
	ВидРасчетов = "Подотчет";
		
	ДанныеXDTO.Вставить("ВидРасчетов", ВидРасчетов);
	
	ТабРасшифровка = Новый ТаблицаЗначений;
	ТабРасшифровка.Колонки.Добавить("СтатьяДДС");
	ТабРасшифровка.Колонки.Добавить("Сумма");
	НоваяСтрока = ТабРасшифровка.Добавить();
	
	НоваяСтрока.Сумма = ДанныеИБ.СуммаДокумента;
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", ТабРасшифровка);
КонецПроцедуры
#КонецОбласти
#Область Документ_ПКОРозничнаяВыручка_Отправка
Процедура ДобавитьПКО_Документ_ПКОРозничнаяВыручка_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПКОРозничнаяВыручка_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПриходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПКОРозничнаяВыручка";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Касса";
	НоваяСтрока.СвойствоФормата = "Касса";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Кассы_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Основание";
	НоваяСтрока.СвойствоФормата = "Основание";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Приложение";
	НоваяСтрока.СвойствоФормата = "Приложение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПринятоОт";
	НоваяСтрока.СвойствоФормата = "ПринятоОт";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтруктурноеПодразделениеОтправитель";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";

КонецПроцедуры
#КонецОбласти
#Область Документ_ПОПБДСКонвертацияВалюты_Отправка
Процедура ДобавитьПКО_Документ_ПОПБДСКонвертацияВалюты_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПОПБДСКонвертацияВалюты_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПлатежныйОрдерПоступлениеДенежныхСредств;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПБДСКонвертацияВалюты";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПОПБДСКонвертацияВалюты_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "ДатаВыписки";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетКонтрагента";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетКонтрагента";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетОрганизации";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ТипПлатежногоДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ВалютаКонвертации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КратностьКонвертации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КурсКонвертации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КурсЦБНаДатуКонвертации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяДДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаВал";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ПОПБДСКонвертацияВалюты_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.Вставить("ТипПлатежногоДокумента", "ПлатежныйОрдер");
	
	#Область РасшифровкаПлатежа
	
	Запрос = Новый Запрос;
	
	Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПриобретениеИностраннойВалюты
		Или ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты Тогда
		 
		Запрос.Текст = "ВЫБРАТЬ
		|   ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаКонвертации,
		|   Ссылка.КурсНаДатуПриобретенияРеализацииВалюты КАК КурсЦБНаДатуКонвертации,
		|   КурсВзаиморасчетов КАК КурсКонвертации,
		|   КратностьВзаиморасчетов КАК КратностьКонвертации,
		|   СуммаВзаиморасчетов КАК Сумма,
		|   СтатьяДвиженияДенежныхСредств КАК СтатьяДДС,
		|   СуммаПлатежа КАК СуммаВал
		|ИЗ Документ.ПлатежныйОрдерПоступлениеДенежныхСредств.РасшифровкаПлатежа
		|ГДЕ Ссылка = &Ссылка";
		Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
		ДанныеXDTO.Вставить("РасшифровкаПлатежа", Запрос.Выполнить().Выгрузить());
		
	КонецЕсли;
	
	#КонецОбласти
КонецПроцедуры
#КонецОбласти
#Область Документ_ПОПБДСПрочееПоступление_Отправка
Процедура ДобавитьПКО_Документ_ПОПБДСПрочееПоступление_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПОПБДСПрочееПоступление_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПлатежныйОрдерПоступлениеДенежныхСредств;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПБДСПрочееПоступление";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПОПБДСПрочееПоступление_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "ДатаВыписки";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетКонтрагента";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетКонтрагента";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетОрганизации";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ТипПлатежногоДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяДДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ПОПБДСПрочееПоступление_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
		
	Если НЕ ЗначениеЗаполнено(ДанныеИБ.Контрагент) Тогда
		Контрагент = Неопределено;
		Если ТипЗнч(ДанныеИБ.СубконтоКт1) = Тип("СправочникСсылка.Контрагенты") И ЗначениеЗаполнено(ДанныеИБ.СубконтоКт1) Тогда
			Контрагент = ДанныеИБ.СубконтоКт1;
		ИначеЕсли ТипЗнч(ДанныеИБ.СубконтоКт2) = Тип("СправочникСсылка.Контрагенты") И ЗначениеЗаполнено(ДанныеИБ.СубконтоКт2) Тогда
			Контрагент = ДанныеИБ.СубконтоКт2;
		ИначеЕсли ТипЗнч(ДанныеИБ.СубконтоКт3) = Тип("СправочникСсылка.Контрагенты") И ЗначениеЗаполнено(ДанныеИБ.СубконтоКт3) Тогда
			Контрагент = ДанныеИБ.СубконтоКт3;
		КонецЕсли;
		ДанныеXDTO.Вставить("Контрагент", Контрагент);
	КонецЕсли;
	
	ДанныеXDTO.Вставить("ТипПлатежногоДокумента", "ПлатежныйОрдер");
	
	// РасшифровкаПлатежа
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|   СтатьяДвиженияДенежныхСредств КАК СтатьяДДС,
	|   СуммаДокумента КАК Сумма
	|ИЗ Документ.ПлатежныйОрдерПоступлениеДенежныхСредств
	|ГДЕ Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", Запрос.Выполнить().Выгрузить());
КонецПроцедуры
#КонецОбласти
#Область Документ_ПОПБДСПрочиеДоходы_Отправка
Процедура ДобавитьПКО_Документ_ПОПБДСПрочиеДоходы_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПОПБДСПрочиеДоходы_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПлатежныйОрдерПоступлениеДенежныхСредств;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПБДСПрочиеДоходы";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПОПБДСПрочиеДоходы_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "ДатаВыписки";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетКонтрагента";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетКонтрагента";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетОрганизации";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ТипПлатежногоДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяДДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяДоходов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДоходов";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ПОПБДСПрочиеДоходы_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
		
	Если НЕ ЗначениеЗаполнено(ДанныеИБ.Контрагент) Тогда
		Если ТипЗнч(ДанныеИБ.СубконтоКт1) = Тип("СправочникСсылка.Контрагенты") И ЗначениеЗаполнено(ДанныеИБ.СубконтоКт1) Тогда
			ДанныеXDTO.Вставить("Контрагент", ДанныеИБ.СубконтоКт1);
		ИначеЕсли ТипЗнч(ДанныеИБ.СубконтоКт2) = Тип("СправочникСсылка.Контрагенты") И ЗначениеЗаполнено(ДанныеИБ.СубконтоКт2) Тогда
			ДанныеXDTO.Вставить("Контрагент", ДанныеИБ.СубконтоКт2);
		ИначеЕсли ТипЗнч(ДанныеИБ.СубконтоКт3) = Тип("СправочникСсылка.Контрагенты") И ЗначениеЗаполнено(ДанныеИБ.СубконтоКт3) Тогда
			ДанныеXDTO.Вставить("Контрагент", ДанныеИБ.СубконтоКт3);
		КонецЕсли;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("ТипПлатежногоДокумента", "ПлатежныйОрдер");
	
	// РасшифровкаПлатежа
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	СубконтоКт1 КАК СтатьяДоходов,
	|   СтатьяДвиженияДенежныхСредств КАК СтатьяДДС,
	|   СуммаДокумента КАК Сумма
	|ИЗ Документ.ПлатежныйОрдерПоступлениеДенежныхСредств
	|ГДЕ Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", Запрос.Выполнить().Выгрузить());
КонецПроцедуры
#КонецОбласти
#Область Документ_ПОПБДСРасчетыСКонтрагентами_Отправка
Процедура ДобавитьПКО_Документ_ПОПБДСРасчетыСКонтрагентами_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПОПБДСРасчетыСКонтрагентами_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПлатежныйОрдерПоступлениеДенежныхСредств;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПБДСРасчетыСКонтрагентами";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПОПБДСРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "ДатаВыписки";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетКонтрагента";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетКонтрагента";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетОрганизации";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидРасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ТипПлатежногоДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ВалютаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Договор";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КратностьВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КурсВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяДДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ПОПБДСРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	// Вид расчетов
	
	ВидРасчетов = "Прочее";
	Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПокупателя Тогда
		ВидРасчетов = "СПокупателем";
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПоставщиком Тогда
		ВидРасчетов = "СПоставщиком";
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.РасчетыПоКредитамИЗаймам Тогда
		ВидРасчетов = "КредитыИЗаймы";
	Иначе
		Если ДанныеИБ.СчетУчетаРасчетовСКонтрагентомБУ = ПланыСчетов.Типовой.КраткосрочныеБанковскиеЗаймы
			Или ДанныеИБ.СчетУчетаРасчетовСКонтрагентомБУ = ПланыСчетов.Типовой.ДолгосрочныеБанковскиеЗаймы Тогда
			ВидРасчетов = "КредитыИЗаймы";
		ИначеЕсли	Найти(ДанныеИБ.СчетУчетаРасчетовСКонтрагентомБУ.Код, "1610;2910;3310;3360;4110") > 0 Тогда
			ВидРасчетов = "СПоставщиком";
		ИначеЕсли	Найти(ДанныеИБ.СчетУчетаРасчетовСКонтрагентомБУ.Код, "1120;1210;2110;3510;4410") > 0 Тогда
			ВидРасчетов = "СПокупателем";
		КонецЕсли;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("ВидРасчетов", ВидРасчетов);
	
	ДанныеXDTO.Вставить("ТипПлатежногоДокумента", "ПлатежныйОрдер");
	
	#Область РасшифровкаПлатежа
	
	Запрос = Новый Запрос;
	Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочееПоступлениеБезналичныхДенежныхСредств Тогда
		Запрос.Текст = "ВЫБРАТЬ
		|	СубконтоКт2 КАК Договор,
		|   1 КАК КурсВзаиморасчетов,
		|   1 КАК КратностьВзаиморасчетов,
		|   СтатьяДвиженияДенежныхСредств КАК СтатьяДДС,
		|   СуммаДокумента КАК Сумма
		|ИЗ Документ.ПлатежныйОрдерПоступлениеДенежныхСредств
		|ГДЕ Ссылка = &Ссылка";
	Иначе
		Запрос.Текст = "ВЫБРАТЬ
		|	ДоговорКонтрагента КАК Договор,
		|   КурсВзаиморасчетов КАК КурсВзаиморасчетов,
		|   КратностьВзаиморасчетов КАК КратностьВзаиморасчетов,
		|   ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
		|   СтатьяДвиженияДенежныхСредств КАК СтатьяДДС,
		|   СуммаПлатежа КАК Сумма,
		|   СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
		|   СтавкаНДС КАК СтавкаНДС,
		|   СуммаНДС КАК СуммаНДС
		|ИЗ Документ.ПлатежныйОрдерПоступлениеДенежныхСредств.РасшифровкаПлатежа
		|ГДЕ Ссылка = &Ссылка";
	КонецЕсли;
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	ТаблицаРасшифровкаПлатежа = Запрос.Выполнить().Выгрузить();
	ОпределитьСтавкуНДС_Отправка(ТаблицаРасшифровкаПлатежа);
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", ТаблицаРасшифровкаПлатежа);
	
	#КонецОбласти
КонецПроцедуры
#КонецОбласти
#Область Документ_ПОПБДСРасчетыССотрудниками_Отправка
Процедура ДобавитьПКО_Документ_ПОПБДСРасчетыССотрудниками_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПОПБДСРасчетыССотрудниками_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПлатежныйОрдерПоступлениеДенежныхСредств;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПБДСРасчетыССотрудниками";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПОПБДСРасчетыССотрудниками_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "ДатаВыписки";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетКонтрагента";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетСотрудника";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетОрганизации";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидРасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Сотрудник";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ФизическиеЛица_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ТипПлатежногоДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяДДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ПОПБДСРасчетыССотрудниками_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.Вставить("ТипПлатежногоДокумента", "ПлатежныйОрдер");
	
	// ВидРасчетов
	ВидРасчетов = "Подотчет";
	
	ДанныеXDTO.Вставить("ВидРасчетов", ВидРасчетов);
	
	// Сотрудник
	
	Сотрудник = ДанныеИБ.СубконтоКт1;
	ДанныеXDTO.Вставить("Сотрудник", Сотрудник);	
	#Область РасшифровкаПлатежа
	
	Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|   СтатьяДвиженияДенежныхСредств КАК СтатьяДДС,
		|   СуммаДокумента КАК Сумма
		|ИЗ Документ.ПлатежныйОрдерПоступлениеДенежныхСредств
		|ГДЕ Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", Запрос.Выполнить().Выгрузить());
	
	#КонецОбласти
КонецПроцедуры
#КонецОбласти
#Область Документ_ПОСБДСПереводНаДругойСчет_Отправка
Процедура ДобавитьПКО_Документ_ПОСБДСПереводНаДругойСчет_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПОСБДСПереводНаДругойСчет_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПлатежныйОрдерСписаниеДенежныхСредств;
	ПравилоКонвертации.ОбъектФормата = "Документ.СБДСПереводНаДругойСчет";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПОСБДСПереводНаДругойСчет_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВыписки";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НазначениеПлатежа";
	НоваяСтрока.СвойствоФормата = "НазначениеПлатежа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетОрганизации";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "БанковскийСчет";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидПлатежа";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ДатаВыписки";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Код";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Очередность";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ТипПлатежногоДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ПОСБДСПереводНаДругойСчет_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ПередатьОбщиеРеквизитыПлатежаИзПлатежногоПоручения(ДанныеИБ, ДанныеXDTO);
	ДанныеXDTO.Вставить("ДатаВыписки", ДанныеИБ.Дата);
	
	ДанныеXDTO.Вставить("ТипПлатежногоДокумента", "ПлатежныйОрдер");
КонецПроцедуры
#КонецОбласти
#Область Документ_ПОСБДСПеречислениеЗП_Отправка
Процедура ДобавитьПКО_Документ_ПОСБДСПеречислениеЗП_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПОСБДСПеречислениеЗП_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПлатежныйОрдерСписаниеДенежныхСредств;
	ПравилоКонвертации.ОбъектФормата = "Документ.СБДСПеречислениеЗаработнойПлаты";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПОСБДСПеречислениеЗП_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "ДатаВыписки";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВыписки";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НазначениеПлатежа";
	НоваяСтрока.СвойствоФормата = "НазначениеПлатежа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетОрганизации";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "БанковскийСчет";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ТипПлатежногоДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ДатаВедомостиНаВыплатуЗарплаты";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Депонент";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерВедомостиНаВыплатуЗарплаты";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяДДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ПОСБДСПеречислениеЗП_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	#Область Шапка
	
	ПередатьОбщиеРеквизитыПлатежаИзПлатежногоПоручения(ДанныеИБ, ДанныеXDTO);
	
	ДанныеXDTO.Вставить("ТипПлатежногоДокумента", "ПлатежныйОрдер");
	
	#КонецОбласти
	
	#Область РасшифровкаПлатежа
	
	РасшифровкаПлатежа = Новый ТаблицаЗначений;
	РасшифровкаПлатежа.Колонки.Добавить("Сумма");
	РасшифровкаПлатежа.Колонки.Добавить("СтатьяДДС");
	РасшифровкаПлатежа.Колонки.Добавить("Депонент");
	РасшифровкаПлатежа.Колонки.Добавить("НомерВедомостиНаВыплатуЗарплаты");
	РасшифровкаПлатежа.Колонки.Добавить("ДатаВедомостиНаВыплатуЗарплаты");
	
	Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПеречислениеЗаработнойПлаты Тогда
		
		Для Каждого Строка Из ДанныеИБ.ПеречислениеЗаработнойПлаты Цикл
			
			НоваяСтрокаРП = РасшифровкаПлатежа.Добавить();
			НоваяСтрокаРП.Сумма = Строка.СуммаПлатежа;
			НоваяСтрокаРП.СтатьяДДС = ДанныеИБ.СтатьяДвиженияДенежныхСредств;
			НоваяСтрокаРП.Депонент = Ложь;
			
			// НомерВедомостиНаВыплатуЗарплаты, ДатаВедомостиНаВыплатуЗарплаты
			ДанныеВедомостиНаВыплатуЗП = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Строка.Ведомость, "Дата,Номер");
			НоваяСтрокаРП.НомерВедомостиНаВыплатуЗарплаты = ДанныеВедомостиНаВыплатуЗП.Номер;
			НоваяСтрокаРП.ДатаВедомостиНаВыплатуЗарплаты = ДанныеВедомостиНаВыплатуЗП.Дата;
		
		КонецЦикла;
		
	КонецЕсли;
	
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", РасшифровкаПлатежа);
	
	#КонецОбласти
КонецПроцедуры
#КонецОбласти
#Область Документ_ПОСБДСПлатежиВБюджет_Отправка
Процедура ДобавитьПКО_Документ_ПОСБДСПлатежиВБюджет_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПОСБДСПлатежиВБюджет_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПлатежныйОрдерСписаниеДенежныхСредств;
	ПравилоКонвертации.ОбъектФормата = "Документ.СБДСПлатежиВБюджет";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПОСБДСПлатежиВБюджет_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "ДатаВыписки";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВыписки";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НазначениеПлатежа";
	НоваяСтрока.СвойствоФормата = "НазначениеПлатежа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетОрганизации";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "БанковскийСчет";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидПлатежа";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Код";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ОКАТО";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Очередность";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ПоказательДаты";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ПоказательКБК";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ПоказательНомера";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ПоказательОснования";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ПоказательПериода";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ПоказательТипа";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатусСоставителя";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ТипПлатежногоДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяДДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ПОСБДСПлатежиВБюджет_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ПередатьОбщиеРеквизитыПлатежаИзПлатежногоПоручения(ДанныеИБ, ДанныеXDTO, Истина);
	ДанныеXDTO.Вставить("ВидОперации", "ПрочееСписание");
	
	ДанныеXDTO.Вставить("ТипПлатежногоДокумента", "ПлатежныйОрдер");
	
	ТабРасшифровкаПлатежа = Новый ТаблицаЗначений();
	ТабРасшифровкаПлатежа.Колонки.Добавить("СтатьяДДС");
	ТабРасшифровкаПлатежа.Колонки.Добавить("Сумма");
	
	СтрокаРасшифровки = ТабРасшифровкаПлатежа.Добавить();
	СтрокаРасшифровки.СтатьяДДС = ДанныеИБ.СтатьяДвиженияДенежныхСредств;
	СтрокаРасшифровки.Сумма     = ДанныеИБ.СуммаДокумента;
	
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", ТабРасшифровкаПлатежа);
	
	Если ДанныеXDTO.ПоказательДаты = "01.01.0001" Тогда
		ДанныеXDTO.ПоказательДаты = "0";
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ПОСБДСПрочееСписание_Отправка
Процедура ДобавитьПКО_Документ_ПОСБДСПрочееСписание_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПОСБДСПрочееСписание_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПлатежныйОрдерСписаниеДенежныхСредств;
	ПравилоКонвертации.ОбъектФормата = "Документ.СБДСПрочееСписание";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПОСБДСПрочееСписание_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "ДатаВыписки";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВыписки";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НазначениеПлатежа";
	НоваяСтрока.СвойствоФормата = "НазначениеПлатежа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетОрганизации";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "БанковскийСчет";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "ВидыОперацийСБДСПрочее_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидПлатежа";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Код";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Очередность";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ТипПлатежногоДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяДДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ПОСБДСПрочееСписание_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("ТипПлатежногоДокумента", "ПлатежныйОрдер");
	
	ПередатьОбщиеРеквизитыПлатежаИзПлатежногоПоручения(ДанныеИБ, ДанныеXDTO);
	Если НЕ ЗначениеЗаполнено(ДанныеИБ.Контрагент) Тогда
		Если ТипЗнч(ДанныеИБ.СубконтоДтБУ1) = Тип("СправочникСсылка.Контрагенты") И ЗначениеЗаполнено(ДанныеИБ.СубконтоДтБУ1) Тогда
			ДанныеXDTO.Вставить("Контрагент", ДанныеИБ.СубконтоДтБУ1);
		ИначеЕсли ТипЗнч(ДанныеИБ.СубконтоДтБУ2) = Тип("СправочникСсылка.Контрагенты") И ЗначениеЗаполнено(ДанныеИБ.СубконтоДтБУ2) Тогда
			ДанныеXDTO.Вставить("Контрагент", ДанныеИБ.СубконтоДтБУ2);
		ИначеЕсли ТипЗнч(ДанныеИБ.СубконтоДтБУ3) = Тип("СправочникСсылка.Контрагенты") И ЗначениеЗаполнено(ДанныеИБ.СубконтоДтБУ3) Тогда
			ДанныеXDTO.Вставить("Контрагент", ДанныеИБ.СубконтоДтБУ3);
		КонецЕсли;
	КонецЕсли;
	
	//Уточнение вида операции
	ВидОперации = "";
	Если ЗначениеЗаполнено(ДанныеИБ.ВидОперации) Тогда
	
		ВидПрочегоСписания = "";
		Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПрочиеРасчетыСКонтрагентами Тогда
			Если Найти(ДанныеИБ.Комментарий, "#Таможенный платеж ")<0 Тогда
					ВидПрочегоСписания = Перечисления.ВидыОперацийППИсходящее.ПрочиеРасчетыСКонтрагентами;
			КонецЕсли;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ВидПрочегоСписания) Тогда
			ВидПрочегоСписания = Перечисления.ВидыОперацийППИсходящее.ПрочееСписаниеБезналичныхДенежныхСредств;
		КонецЕсли;
	
		ДанныеXDTO.Вставить("ВидОперации", ВидПрочегоСписания);
	Иначе
		ДанныеXDTO.Вставить("ВидОперации", Перечисления.ВидыОперацийППИсходящее.ПрочееСписаниеБезналичныхДенежныхСредств);	
	КонецЕсли;
	
	ТабРасшифровкаПлатежа = Новый ТаблицаЗначений();
	ТабРасшифровкаПлатежа.Колонки.Добавить("СтатьяДДС");
	ТабРасшифровкаПлатежа.Колонки.Добавить("Сумма");
	СтрокаРасшифровки = ТабРасшифровкаПлатежа.Добавить();
	СтрокаРасшифровки.СтатьяДДС = ДанныеИБ.СтатьяДвиженияДенежныхСредств;
	СтрокаРасшифровки.Сумма     = ДанныеИБ.СуммаДокумента;
	
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", ТабРасшифровкаПлатежа);
КонецПроцедуры
#КонецОбласти
#Область Документ_ПОСБДСПрочиеРасходы_Отправка
Процедура ДобавитьПКО_Документ_ПОСБДСПрочиеРасходы_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПОСБДСПрочиеРасходы_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПлатежныйОрдерСписаниеДенежныхСредств;
	ПравилоКонвертации.ОбъектФормата = "Документ.СБДСПрочиеРасходы";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПОСБДСПрочиеРасходы_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "ДатаВыписки";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВыписки";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НазначениеПлатежа";
	НоваяСтрока.СвойствоФормата = "НазначениеПлатежа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетОрганизации";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "БанковскийСчет";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидПлатежа";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Код";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Очередность";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ТипПлатежногоДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяДДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяРасходов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиРасходов_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ПОСБДСПрочиеРасходы_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("ТипПлатежногоДокумента", "ПлатежныйОрдер");
	
	ПередатьОбщиеРеквизитыПлатежаИзПлатежногоПоручения(ДанныеИБ, ДанныеXDTO);
	Если НЕ ЗначениеЗаполнено(ДанныеИБ.Контрагент) Тогда
		Если ТипЗнч(ДанныеИБ.СубконтоДт1) = Тип("СправочникСсылка.Контрагенты") И ЗначениеЗаполнено(ДанныеИБ.СубконтоДт1) Тогда
			ДанныеXDTO.Вставить("Контрагент", ДанныеИБ.СубконтоДт1);
		ИначеЕсли ТипЗнч(ДанныеИБ.СубконтоДт2) = Тип("СправочникСсылка.Контрагенты") И ЗначениеЗаполнено(ДанныеИБ.СубконтоДт2) Тогда
			ДанныеXDTO.Вставить("Контрагент", ДанныеИБ.СубконтоДт2);
		ИначеЕсли ТипЗнч(ДанныеИБ.СубконтоДт3) = Тип("СправочникСсылка.Контрагенты") И ЗначениеЗаполнено(ДанныеИБ.СубконтоДт3) Тогда
			ДанныеXDTO.Вставить("Контрагент", ДанныеИБ.СубконтоДт3);
		КонецЕсли;
	КонецЕсли;
	
	ТабРасшифровкаПлатежа = Новый ТаблицаЗначений();
	ТабРасшифровкаПлатежа.Колонки.Добавить("СтатьяДДС");
	ТабРасшифровкаПлатежа.Колонки.Добавить("СтатьяРасходов");
	ТабРасшифровкаПлатежа.Колонки.Добавить("Сумма");
	СтрокаРасшифровки = ТабРасшифровкаПлатежа.Добавить();
	СтрокаРасшифровки.СтатьяДДС = ДанныеИБ.СтатьяДвиженияДенежныхСредств;
	СтрокаРасшифровки.Сумма = ДанныеИБ.СуммаДокумента;
		
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", ТабРасшифровкаПлатежа);
КонецПроцедуры
#КонецОбласти
#Область Документ_ПОСБДСРасчетыСКонтрагентами_Отправка
Процедура ДобавитьПКО_Документ_ПОСБДСРасчетыСКонтрагентами_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПОСБДСРасчетыСКонтрагентами_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПлатежныйОрдерСписаниеДенежныхСредств;
	ПравилоКонвертации.ОбъектФормата = "Документ.СБДСРасчетыСКонтрагентами";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПОСБДСРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "ДатаВыписки";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВыписки";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НазначениеПлатежа";
	НоваяСтрока.СвойствоФормата = "НазначениеПлатежа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетОрганизации";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "БанковскийСчет";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидПлатежа";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидРасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Код";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Очередность";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ТипПлатежногоДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ВалютаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидРасчетовРасширенный";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Договор";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КратностьВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КурсВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяДДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ПОСБДСРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	ПередатьОбщиеРеквизитыПлатежаИзПлатежногоПоручения(ДанныеИБ, ДанныеXDTO);
	
	ДанныеXDTO.Вставить("ТипПлатежногоДокумента", "ПлатежныйОрдер");
	
	ВидРасчетовСКонтрагентом = "";
	Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПрочиеРасчетыСКонтрагентами Тогда
		Если Найти(ДанныеИБ.Комментарий, "#Таможенный платеж ")<0 Тогда
			СчетУчетаРасчетовСКонтрагентомБУ = Неопределено;
			Если ДанныеИБ.РасшифровкаПлатежа.Количество() > 0 Тогда
				СчетУчетаРасчетовСКонтрагентомБУ = ДанныеИБ.РасшифровкаПлатежа[0].СчетУчетаРасчетовСКонтрагентомБУ;
			КонецЕсли;
			
			Если СчетУчетаРасчетовСКонтрагентомБУ <> ПланыСчетов.Типовой.ДенежныеСредстваВПутиКонвертацияВалюты
				И Найти("1410;1430;3110;3120;3130;3140;3150;3160;3170;3180;3190", ДанныеИБ.СчетУчетаРасчетовСКонтрагентомБУ.ПринадлежитЭлементу.Код) = 0 Тогда
				ВидРасчетовСКонтрагентом = "Прочее";
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ОплатаПоставщику Тогда
		ВидРасчетовСКонтрагентом = "СПоставщиком";
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПокупателю Тогда
		ВидРасчетовСКонтрагентом = "СПокупателем";
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.РасчетыПоКредитамИЗаймам Тогда
		ВидРасчетовСКонтрагентом = "КредитыИЗаймы";
	КонецЕсли;
	Если ВидРасчетовСКонтрагентом = "" Тогда
		ВидРасчетовСКонтрагентом = "Прочее";
	КонецЕсли;
	ДанныеXDTO.Вставить("ВидРасчетов", ВидРасчетовСКонтрагентом);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РасшифровкаПлатежа.ДоговорКонтрагента КАК Договор,
		|	РасшифровкаПлатежа.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
		|	РасшифровкаПлатежа.КратностьВзаиморасчетов КАК КратностьВзаиморасчетов,
		|	РасшифровкаПлатежа.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
		|	РасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств КАК СтатьяДДС,
		|	РасшифровкаПлатежа.СуммаПлатежа КАК Сумма,
		|	РасшифровкаПлатежа.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
		|	РасшифровкаПлатежа.СтавкаНДС КАК СтавкаНДС,
		|	РасшифровкаПлатежа.СуммаНДС КАК СуммаНДС,
		|	ВЫБОР
		|		КОГДА РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентомБУ = ЗНАЧЕНИЕ(ПланСчетов.Типовой.КраткосрочныеАвансыВыданные)
		|				ИЛИ РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентомБУ = ЗНАЧЕНИЕ(ПланСчетов.Типовой.ДолгосрочныеАвансыВыданные)
		|				ИЛИ РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентомБУ = ЗНАЧЕНИЕ(ПланСчетов.Типовой.ДолгосрочныеАвансыПолученные)
		|				ИЛИ РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентомБУ = ЗНАЧЕНИЕ(ПланСчетов.Типовой.КраткосрочныеАвансыПолученные)
		|			ТОГДА ""Аванс""
		|		КОГДА РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентомБУ = ЗНАЧЕНИЕ(ПланСчетов.Типовой.КраткосрочнаяЗадолженностьПоставщикамИПодрядчикам)
		|				ИЛИ РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентомБУ = ЗНАЧЕНИЕ(ПланСчетов.Типовой.КраткосрочнаяЗадолженностьПоАренде)
		|				ИЛИ РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентомБУ = ЗНАЧЕНИЕ(ПланСчетов.Типовой.ДолгосрочнаяЗадолженностьПоставщикамИПодрядчикам)
		|				ИЛИ РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентомБУ = ЗНАЧЕНИЕ(ПланСчетов.Типовой.КраткосрочнаяДебиторскаяЗадолженностьПокупателейИЗаказчиков)
		|				ИЛИ РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентомБУ = ЗНАЧЕНИЕ(ПланСчетов.Типовой.ДолгосрочнаяЗадолженностьПокупателейИЗаказчиков)
		|			ТОГДА ""Долг""
		|		КОГДА РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентомБУ = ЗНАЧЕНИЕ(ПланСчетов.Типовой.КраткосрочныеБанковскиеЗаймы)
		|			ТОГДА ""КраткосрочныеКредиты""
		|		КОГДА РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентомБУ = ЗНАЧЕНИЕ(ПланСчетов.Типовой.ДолгосрочныеБанковскиеЗаймы)
		|			ТОГДА ""ДолгосрочныеКредиты""
		|		ИНАЧЕ NULL
		|	КОНЕЦ КАК ВидРасчетовРасширенный
		|ИЗ
		|	Документ.ПлатежныйОрдерСписаниеДенежныхСредств.РасшифровкаПлатежа КАК РасшифровкаПлатежа
		|ГДЕ
		|	РасшифровкаПлатежа.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	РасшифровкаПлатежа = Запрос.Выполнить().Выгрузить();
	ОпределитьСтавкуНДС_Отправка(РасшифровкаПлатежа);
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", РасшифровкаПлатежа);
КонецПроцедуры
#КонецОбласти
#Область Документ_ПоступлениеТоваровУслуг_Отправка
Процедура ДобавитьПКО_Документ_ПоступлениеТоваровУслуг_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПоступлениеТоваровУслуг_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПоступлениеТоваровУслуг;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПоступлениеТоваровУслуг";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПоступлениеТоваровУслуг_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоговорКонтрагента";
	НоваяСтрока.СвойствоФормата = "Договор";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КратностьВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "КратностьВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КурсВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "КурсВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтруктурноеПодразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаВключаетНДС";
	НоваяСтрока.СвойствоФормата = "СуммаВключаетНДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВалютаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Налогообложение";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Отправка";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидОборота";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "ПеречислениеСсылка_ВидыОборотовПоРеализации";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерГТД";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтранаПроисхождения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_КлассификаторСтранМира";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ТипЗапасов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Услуги", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Услуги;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Содержание";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ПоступлениеТоваровУслуг_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
		
	ДанныеXDTO.Вставить("Склад", СкладДляВыгрузки(ДанныеИБ.Склад, КомпонентыОбмена.ПараметрыКонвертации));
	
	//ДанныеВзаиморасчетов
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|ДоговорКонтрагента.ВидДоговора КАК ВидДоговора
	|ИЗ Документ.ПоступлениеТоваровУслуг
	|ГДЕ Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	ДанныеXDTO.Вставить("ВалютаВзаиморасчетов", Выборка.ВалютаВзаиморасчетов);
	
	//ВидОперации
	ВидОперации = "ПокупкаУПоставщика";
	ДанныеXDTO.Вставить("ВидОперации", ВидОперации);
	
	//Табличные части
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Номенклатура КАК Номенклатура,
	|	ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	""СобственныеТовары"" КАК ТипЗапасов,
	|	НДСВидОборота КАК ВидОборота,
	|	НДСВидПоступления КАК ВидОперацииПоступления,
	|	Количество,
	|	Цена,
	|	Сумма,
	|	СтавкаНДС,
	|	СуммаНДС
	|ИЗ Документ.ПоступлениеТоваровУслуг.Товары
	|ГДЕ Ссылка = &Ссылка
	|;
	|//////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Номенклатура,
	|	Содержание,
	|	ВЫБОР КОГДА ЕстьNULL(Количество, 1) = 0 ТОГДА
	|		1
	|	ИНАЧЕ
	|		ЕстьNULL(Количество, 1)
	|	КОНЕЦ КАК Количество,
	|	Цена,
	|	Сумма,
	|	СтавкаНДС,
	|	СуммаНДС
	|ИЗ Документ.ПоступлениеТоваровУслуг.Услуги
	|ГДЕ Ссылка = &Ссылка
	|";
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	ТаблицаТовары = РезультатЗапроса[0].Выгрузить();
	Если ТаблицаТовары.Количество() > 0 Тогда
		ОпределитьСтавкуНДС_Отправка(ТаблицаТовары);
		ДанныеXDTO.Вставить("Товары", ТаблицаТовары);
	КонецЕсли;
	
	БезНДС = Ложь;
	Для Каждого Строка Из ТаблицаТовары Цикл
		Если Строка.СтавкаНДС = "0" Тогда
			БезНДС = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если БезНДС Тогда
		ДанныеXDTO.Вставить("Налогообложение", "ПродажаНеОблагаетсяНДС");
	Иначе	
		ДанныеXDTO.Вставить("Налогообложение", "ПродажаОблагаетсяНДС");
	КонецЕсли;	
	
	ТаблицаУслуги = РезультатЗапроса[1].Выгрузить();
	
	Если ТаблицаУслуги.Количество() > 0 Тогда
		ОпределитьСтавкуНДС_Отправка(ТаблицаУслуги);
		ДанныеXDTO.Вставить("Услуги", ТаблицаУслуги);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ПРСКонвертацияВалюты_Отправка
Процедура ДобавитьПКО_Документ_ПРСКонвертацияВалюты_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПРСКонвертацияВалюты_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПлатежноеПоручениеВходящее;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПБДСКонвертацияВалюты";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПРСКонвертацияВалюты_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "ДатаВыписки";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетКонтрагента";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетКонтрагента";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетОрганизации";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ТипПлатежногоДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ВалютаКонвертации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Договор";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КратностьКонвертации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КурсКонвертации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КурсЦБНаДатуКонвертации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяДДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаВал";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ПРСКонвертацияВалюты_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.Вставить("ТипПлатежногоДокумента", "ПлатежноеПоручение");
	
	#Область РасшифровкаПлатежа
	
	Запрос = Новый Запрос;
	
	Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПриобретениеИностраннойВалюты
		Или ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты Тогда
		 
		Запрос.Текст = "ВЫБРАТЬ
		               |	ПлатежноеПоручениеВходящееРасшифровкаПлатежа.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаКонвертации,
		               |	ПлатежноеПоручениеВходящееРасшифровкаПлатежа.Ссылка.КурсНаДатуПриобретенияРеализацииВалюты КАК КурсЦБНаДатуКонвертации,
		               |	ПлатежноеПоручениеВходящееРасшифровкаПлатежа.КурсВзаиморасчетов КАК КурсКонвертации,
		               |	ПлатежноеПоручениеВходящееРасшифровкаПлатежа.КратностьВзаиморасчетов КАК КратностьКонвертации,
		               |	ПлатежноеПоручениеВходящееРасшифровкаПлатежа.СуммаВзаиморасчетов КАК Сумма,
		               |	ПлатежноеПоручениеВходящееРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств КАК СтатьяДДС,
		               |	ПлатежноеПоручениеВходящееРасшифровкаПлатежа.СуммаПлатежа КАК СуммаВал,
		               |	ПлатежноеПоручениеВходящееРасшифровкаПлатежа.ДоговорКонтрагента КАК Договор
		               |ИЗ
		               |	Документ.ПлатежноеПоручениеВходящее.РасшифровкаПлатежа КАК ПлатежноеПоручениеВходящееРасшифровкаПлатежа
		               |ГДЕ
		               |	ПлатежноеПоручениеВходящееРасшифровкаПлатежа.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
		ДанныеXDTO.Вставить("РасшифровкаПлатежа", Запрос.Выполнить().Выгрузить());
		
	КонецЕсли;
	
	#КонецОбласти
КонецПроцедуры
#КонецОбласти
#Область Документ_ПРСПрочееПоступление_Отправка
Процедура ДобавитьПКО_Документ_ПРСПрочееПоступление_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПРСПрочееПоступление_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПлатежноеПоручениеВходящее;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПБДСПрочееПоступление";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПРСПрочееПоступление_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "ДатаВыписки";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетКонтрагента";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетКонтрагента";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетОрганизации";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ТипПлатежногоДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяДДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ПРСПрочееПоступление_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
		
	Если НЕ ЗначениеЗаполнено(ДанныеИБ.Контрагент) Тогда
		Контрагент = Неопределено;
		Если ТипЗнч(ДанныеИБ.СубконтоКт1) = Тип("СправочникСсылка.Контрагенты") И ЗначениеЗаполнено(ДанныеИБ.СубконтоКт1) Тогда
			Контрагент = ДанныеИБ.СубконтоКт1;
		ИначеЕсли ТипЗнч(ДанныеИБ.СубконтоКт2) = Тип("СправочникСсылка.Контрагенты") И ЗначениеЗаполнено(ДанныеИБ.СубконтоКт2) Тогда
			Контрагент = ДанныеИБ.СубконтоКт2;
		ИначеЕсли ТипЗнч(ДанныеИБ.СубконтоКт3) = Тип("СправочникСсылка.Контрагенты") И ЗначениеЗаполнено(ДанныеИБ.СубконтоКт3) Тогда
			Контрагент = ДанныеИБ.СубконтоКт3;
		КонецЕсли;
		Если ТипЗнч(Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
			ДанныеXDTO.Вставить("Контрагент", Контрагент);
		КонецЕсли;      
	КонецЕсли;
	
	ДанныеXDTO.Вставить("ТипПлатежногоДокумента", "ПлатежноеПоручение");
	
	// РасшифровкаПлатежа
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|   СтатьяДвиженияДенежныхСредств КАК СтатьяДДС,
	|   СуммаДокумента КАК Сумма
	|ИЗ Документ.ПлатежноеПоручениеВходящее
	|ГДЕ Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", Запрос.Выполнить().Выгрузить());
КонецПроцедуры
#КонецОбласти
#Область Документ_ПРСПрочиеДоходы_Отправка
Процедура ДобавитьПКО_Документ_ПРСПрочиеДоходы_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПРСПрочиеДоходы_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПлатежноеПоручениеВходящее;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПБДСПрочиеДоходы";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПРСПрочиеДоходы_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "ДатаВыписки";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетКонтрагента";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетКонтрагента";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетОрганизации";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ТипПлатежногоДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяДДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ПРСПрочиеДоходы_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
		
	Если НЕ ЗначениеЗаполнено(ДанныеИБ.Контрагент) Тогда
		Если ТипЗнч(ДанныеИБ.СубконтоКт1) = Тип("СправочникСсылка.Контрагенты") И ЗначениеЗаполнено(ДанныеИБ.СубконтоКт1) Тогда
			ДанныеXDTO.Вставить("Контрагент", ДанныеИБ.СубконтоКт1);
		ИначеЕсли ТипЗнч(ДанныеИБ.СубконтоКт2) = Тип("СправочникСсылка.Контрагенты") И ЗначениеЗаполнено(ДанныеИБ.СубконтоКт2) Тогда
			ДанныеXDTO.Вставить("Контрагент", ДанныеИБ.СубконтоКт2);
		ИначеЕсли ТипЗнч(ДанныеИБ.СубконтоКт3) = Тип("СправочникСсылка.Контрагенты") И ЗначениеЗаполнено(ДанныеИБ.СубконтоКт3) Тогда
			ДанныеXDTO.Вставить("Контрагент", ДанныеИБ.СубконтоКт3);
		КонецЕсли;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("ТипПлатежногоДокумента", "ПлатежноеПоручение");
	
	// РасшифровкаПлатежа
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	СубконтоКтБУ1 КАК СтатьяДоходов,
	|   СтатьяДвиженияДенежныхСредств КАК СтатьяДДС,
	|   СуммаДокумента КАК Сумма
	|ИЗ Документ.ПлатежноеПоручениеВходящее
	|ГДЕ Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", Запрос.Выполнить().Выгрузить());
КонецПроцедуры
#КонецОбласти
#Область Документ_ПРСРасчетыСКонтрагентами_Отправка
Процедура ДобавитьПКО_Документ_ПРСРасчетыСКонтрагентами_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПРСРасчетыСКонтрагентами_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПлатежноеПоручениеВходящее;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПБДСРасчетыСКонтрагентами";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПРСРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "ДатаВыписки";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетКонтрагента";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетКонтрагента";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетОрганизации";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидРасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ТипПлатежногоДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ВалютаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Договор";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КратностьВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КурсВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяДДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ПРСРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	// Вид расчетов
	
	ВидРасчетов = "Прочее";
	Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПокупателя Тогда
		ВидРасчетов = "СПокупателем";
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПоставщиком Тогда
		ВидРасчетов = "СПоставщиком";
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.РасчетыПоКредитамИЗаймам Тогда
		ВидРасчетов = "КредитыИЗаймы";
	Иначе
		Если ДанныеИБ.СчетУчетаРасчетовСКонтрагентомБУ = ПланыСчетов.Типовой.КраткосрочныеБанковскиеЗаймы
			Или ДанныеИБ.СчетУчетаРасчетовСКонтрагентомБУ = ПланыСчетов.Типовой.ДолгосрочныеБанковскиеЗаймы Тогда
			ВидРасчетов = "КредитыИЗаймы";
		ИначеЕсли	Найти(ДанныеИБ.СчетУчетаРасчетовСКонтрагентомБУ.Код, "1610;2910;3310;3360;4110") > 0 Тогда
			ВидРасчетов = "СПоставщиком";
		ИначеЕсли	Найти(ДанныеИБ.СчетУчетаРасчетовСКонтрагентомБУ.Код, "1120;1210;2110;3510;4410") > 0 Тогда
			ВидРасчетов = "СПокупателем";
		КонецЕсли;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("ВидРасчетов", ВидРасчетов);
	
	ДанныеXDTO.Вставить("ТипПлатежногоДокумента", "ПлатежноеПоручение");
	
	#Область РасшифровкаПлатежа
	
	Запрос = Новый Запрос;
	Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочееПоступлениеБезналичныхДенежныхСредств Тогда
		Запрос.Текст = "ВЫБРАТЬ
		|	СубконтоКтБУ2 КАК Договор,
		|   1 КАК КурсВзаиморасчетов,
		|   1 КАК КратностьВзаиморасчетов,
		|   СтатьяДвиженияДенежныхСредств КАК СтатьяДДС,
		|   СуммаДокумента КАК Сумма
		|ИЗ Документ.ПлатежноеПоручениеВходящее
		|ГДЕ Ссылка = &Ссылка";
	Иначе
		Запрос.Текст = "ВЫБРАТЬ
		|	ДоговорКонтрагента КАК Договор,
		|   КурсВзаиморасчетов КАК КурсВзаиморасчетов,
		|   КратностьВзаиморасчетов КАК КратностьВзаиморасчетов,
		|   ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
		|   СтатьяДвиженияДенежныхСредств КАК СтатьяДДС,
		|   СуммаПлатежа КАК Сумма,
		|   СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
		|   СтавкаНДС КАК СтавкаНДС,
		|   СуммаНДС КАК СуммаНДС
		|ИЗ Документ.ПлатежноеПоручениеВходящее.РасшифровкаПлатежа
		|ГДЕ Ссылка = &Ссылка";
	КонецЕсли;
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	ТаблицаРасшифровкаПлатежа = Запрос.Выполнить().Выгрузить();
	Если ДанныеИБ.ВидОперации <> Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочееПоступлениеБезналичныхДенежныхСредств Тогда
		ОпределитьСтавкуНДС_Отправка(ТаблицаРасшифровкаПлатежа);
	КонецЕсли;
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", ТаблицаРасшифровкаПлатежа);
	
	#КонецОбласти
КонецПроцедуры
#КонецОбласти
#Область Документ_ПРСРасчетыССотрудниками_Отправка
Процедура ДобавитьПКО_Документ_ПРСРасчетыССотрудниками_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПРСРасчетыССотрудниками_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПлатежноеПоручениеВходящее;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПБДСРасчетыССотрудниками";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПРСРасчетыССотрудниками_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "ДатаВыписки";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетКонтрагента";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетСотрудника";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетОрганизации";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидРасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Сотрудник";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ФизическиеЛица_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ТипПлатежногоДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяДДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ПРСРасчетыССотрудниками_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.Вставить("ТипПлатежногоДокумента", "ПлатежноеПоручение");
	
	// ВидРасчетов
	ВидРасчетов = "Подотчет";
	
	ДанныеXDTO.Вставить("ВидРасчетов", ВидРасчетов);
	
	// Сотрудник
	
	Сотрудник = ДанныеИБ.СубконтоКтБУ1;
	ДанныеXDTO.Вставить("Сотрудник", Сотрудник);	
	#Область РасшифровкаПлатежа
	
	Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|   СтатьяДвиженияДенежныхСредств КАК СтатьяДДС,
		|   СуммаДокумента КАК Сумма
		|ИЗ Документ.ПлатежноеПоручениеВходящее
		|ГДЕ Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", Запрос.Выполнить().Выгрузить());
	
	#КонецОбласти
КонецПроцедуры
#КонецОбласти
#Область Документ_РеализацияТоваровУслуг_Отправка
Процедура ДобавитьПКО_Документ_РеализацияТоваровУслуг_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_РеализацияТоваровУслуг_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.РеализацияТоваровУслуг;
	ПравилоКонвертации.ОбъектФормата = "Документ.РеализацияТоваровУслуг";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_РеализацияТоваровУслуг_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "АдресДоставки";
	НоваяСтрока.СвойствоФормата = "АдресДоставки";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "БанковскийСчетОрганизации";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Грузополучатель";
	НоваяСтрока.СвойствоФормата = "Грузополучатель";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоверенностьВыдана";
	НоваяСтрока.СвойствоФормата = "ДоверенностьКемВыдана";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоверенностьДата";
	НоваяСтрока.СвойствоФормата = "ДоверенностьДата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоверенностьЛицо";
	НоваяСтрока.СвойствоФормата = "ДоверенностьКомуВыдана";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоверенностьНомер";
	НоваяСтрока.СвойствоФормата = "ДоверенностьНомер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоговорКонтрагента";
	НоваяСтрока.СвойствоФормата = "Договор";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КратностьВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "КратностьВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КурсВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "КурсВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтруктурноеПодразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаВключаетНДС";
	НоваяСтрока.СвойствоФормата = "СуммаВключаетНДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВалютаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ДатаПереходаПраваСобственности";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Отправка";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерГТД";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтранаПроисхождения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ТипЗапасов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Услуги", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Услуги;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Содержание";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_РеализацияТоваровУслуг_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	ДанныеXDTO.Вставить("Склад", СкладДляВыгрузки(ДанныеИБ.Склад, КомпонентыОбмена.ПараметрыКонвертации));
	//ДанныеВзаиморасчетов
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
		|ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
		|ДоговорКонтрагента.ВидДоговора КАК ВидДоговора
		|ИЗ Документ.РеализацияТоваровУслуг
		|ГДЕ Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	ДанныеXDTO.Вставить("ВалютаВзаиморасчетов", Выборка.ВалютаВзаиморасчетов);
	ДанныеXDTO.Вставить("ДатаПереходаПраваСобственности", Неопределено);
	//ВидОперации
	ВидОперации = "РеализацияКлиенту";
	ДанныеXDTO.Вставить("ВидОперации", ВидОперации);
	
	//Табличные части
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Номенклатура КАК Номенклатура,
	|	ВЫБОР КОГДА ЕдиницаИзмерения = ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка) ТОГДА
	|		Номенклатура.БазоваяЕдиницаИзмерения
	|	ИНАЧЕ
	|		ЕдиницаИзмерения
	|	КОНЕЦ КАК ЕдиницаИзмерения,
	|	""СобственныеТовары"" КАК ТипЗапасов,
	|	Количество,
	|	Цена,
	|	Сумма,
	|	СтавкаНДС.Ставка КАК СтавкаНДС,
	|	СуммаНДС
	|ИЗ Документ.РеализацияТоваровУслуг.Товары
	|ГДЕ Ссылка = &Ссылка
	|;
	|//////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Номенклатура,
	|	Содержание,
	|	ВЫБОР КОГДА Количество = 0 ТОГДА
	|		1
	|	ИНАЧЕ
	|		Количество
	|	КОНЕЦ КАК Количество,
	|	Цена,
	|	Сумма,
	|	СтавкаНДС.Ставка КАК СтавкаНДС,
	|	СуммаНДС
	|ИЗ Документ.РеализацияТоваровУслуг.Услуги
	|ГДЕ Ссылка = &Ссылка 
	|";
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	ТаблицаТовары = РезультатЗапроса[0].Выгрузить();
	Если ТаблицаТовары.Количество() > 0 Тогда
		ОпределитьСтавкуНДС_Отправка(ТаблицаТовары);
		ДанныеXDTO.Вставить("Товары", ТаблицаТовары);
	КонецЕсли;
	ТаблицаУслуги = РезультатЗапроса[1].Выгрузить();
	
	Если ТаблицаУслуги.Количество() > 0 Тогда
		ОпределитьСтавкуНДС_Отправка(ТаблицаУслуги);
		ДанныеXDTO.Вставить("Услуги", ТаблицаУслуги);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_РКОВыплатаЗарплаты_Отправка
Процедура ДобавитьПКО_Документ_РКОВыплатаЗарплаты_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_РКОВыплатаЗарплаты_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.РасходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата = "Документ.РКОВыплатаЗарплаты";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_РКОВыплатаЗарплаты_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Выдать";
	НоваяСтрока.СвойствоФормата = "Выдать";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Касса";
	НоваяСтрока.СвойствоФормата = "Касса";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Кассы_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Основание";
	НоваяСтрока.СвойствоФормата = "Основание";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПоДокументу";
	НоваяСтрока.СвойствоФормата = "ПоДокументу";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Приложение";
	НоваяСтрока.СвойствоФормата = "Приложение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ДатаВедомостиНаВыплатуЗарплаты";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Депонент";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерВедомостиНаВыплатуЗарплаты";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сотрудник";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ФизическиеЛица_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяДДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_РКОВыплатаЗарплаты_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	РасшифровкаПлатежа = Новый ТаблицаЗначений;
	РасшифровкаПлатежа.Колонки.Добавить("Сотрудник");
	РасшифровкаПлатежа.Колонки.Добавить("Сумма");
	РасшифровкаПлатежа.Колонки.Добавить("СтатьяДДС");
	РасшифровкаПлатежа.Колонки.Добавить("Депонент");
	
	Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику
		Или ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям Тогда
		
		
		НоваяСтрокаРП = РасшифровкаПлатежа.Добавить();
		НоваяСтрокаРП.Сотрудник = ДанныеИБ.Контрагент;
		НоваяСтрокаРП.Сумма = ДанныеИБ.СуммаДокумента;
		НоваяСтрокаРП.СтатьяДДС = ДанныеИБ.СтатьяДвиженияДенежныхСредств;
		НоваяСтрокаРП.Депонент = ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям;
	
		// НомерВедомостиНаВыплатуЗарплаты, ДатаВедомостиНаВыплатуЗарплаты
		Если ЗначениеЗаполнено(ДанныеИБ.ПлатежнаяВедомость) Или ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям Тогда
			
			РасшифровкаПлатежа.Колонки.Добавить("НомерВедомостиНаВыплатуЗарплаты");
			РасшифровкаПлатежа.Колонки.Добавить("ДатаВедомостиНаВыплатуЗарплаты");
			
			ДанныеВедомостиНаВыплатуЗП = Новый Структура("Номер,Дата");
			Если ЗначениеЗаполнено(ДанныеИБ.ПлатежнаяВедомость) Тогда
				ДанныеВедомостиНаВыплатуЗП = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеИБ.ПлатежнаяВедомость, "Дата,Номер");
			//Иначе
			//	ДанныеВедомостиНаВыплатуЗП = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеИБ.ВыплатаДепонентов.Получить(0).Ведомость, "Дата,Номер");
			КонецЕсли;
				
			НоваяСтрокаРП.НомерВедомостиНаВыплатуЗарплаты = ДанныеВедомостиНаВыплатуЗП.Номер;
			НоваяСтрокаРП.ДатаВедомостиНаВыплатуЗарплаты = ДанныеВедомостиНаВыплатуЗП.Дата;
		КонецЕсли;
	Иначе // выплата по ведомостям
		
		РасшифровкаПлатежа.Колонки.Добавить("НомерВедомостиНаВыплатуЗарплаты");
		РасшифровкаПлатежа.Колонки.Добавить("ДатаВедомостиНаВыплатуЗарплаты");
		
		ТЧДанныхИБ = ?(ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям,
			ДанныеИБ.ВыплатаДепонентов,
			ДанныеИБ.ВыплатаЗаработнойПлаты);
			
		Для Каждого Строка Из ТЧДанныхИБ Цикл
			
			// НомерВедомостиНаВыплатуЗарплаты, ДатаВедомостиНаВыплатуЗарплаты
			ДанныеВедомостиНаВыплатуЗП = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Строка.Ведомость, "Дата,Номер,Зарплата");
			ТаблицаЗарплатаВедомости = ДанныеВедомостиНаВыплатуЗП.Зарплата.Выгрузить();
			
			// Если ЗарплатаВедомости.Итог("КВыплате") = Строка.СуммаКВыплате Тогда
				Для Каждого СтрокаВедомости Из ТаблицаЗарплатаВедомости Цикл
					НоваяСтрокаРП = РасшифровкаПлатежа.Добавить();
					НоваяСтрокаРП.Сумма     = СтрокаВедомости.КВыплате;
					НоваяСтрокаРП.СтатьяДДС = ДанныеИБ.СтатьяДвиженияДенежныхСредств;
					НоваяСтрокаРП.Депонент  = ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям;
				
					НоваяСтрокаРП.НомерВедомостиНаВыплатуЗарплаты = ДанныеВедомостиНаВыплатуЗП.Номер;
					НоваяСтрокаРП.ДатаВедомостиНаВыплатуЗарплаты  = ДанныеВедомостиНаВыплатуЗП.Дата;
					
					НоваяСтрокаРП.Сотрудник = СтрокаВедомости.Сотрудник.ФизическоеЛицо;
		    	КонецЦикла;
			// КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", РасшифровкаПлатежа);
КонецПроцедуры
#КонецОбласти
#Область Документ_РКОКонвертацияВалюты_Отправка
Процедура ДобавитьПКО_Документ_РКОКонвертацияВалюты_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_РКОКонвертацияВалюты_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.РасходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата = "Документ.РКОКонвертацияВалюты";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_РКОКонвертацияВалюты_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Выдать";
	НоваяСтрока.СвойствоФормата = "Выдать";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Касса";
	НоваяСтрока.СвойствоФормата = "Касса";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Кассы_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Основание";
	НоваяСтрока.СвойствоФормата = "Основание";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПоДокументу";
	НоваяСтрока.СвойствоФормата = "ПоДокументу";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Приложение";
	НоваяСтрока.СвойствоФормата = "Приложение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СубконтоДтБУ1";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ВалютаКонвертации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КратностьКонвертации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КурсКонвертации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КурсЦБНаДатуКонвертации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяДДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаВал";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_РКОКонвертацияВалюты_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	РасшифровкаПлатежа = Новый ТаблицаЗначений;
	РасшифровкаПлатежа.Колонки.Добавить("Сумма");
	РасшифровкаПлатежа.Колонки.Добавить("СтатьяДДС");
	РасшифровкаПлатежа.Колонки.Добавить("ВалютаКонвертации");
	РасшифровкаПлатежа.Колонки.Добавить("КратностьКонвертации");
	РасшифровкаПлатежа.Колонки.Добавить("КурсЦБНаДатуКонвертации");
	РасшифровкаПлатежа.Колонки.Добавить("КурсКонвертации");
	РасшифровкаПлатежа.Колонки.Добавить("СуммаВал");
	
	
	НоваяСтрокаРП = РасшифровкаПлатежа.Добавить();
	НоваяСтрокаРП.Сумма = ДанныеИБ.СуммаДокумента;
	НоваяСтрокаРП.СтатьяДДС = ДанныеИБ.СтатьяДвиженияДенежныхСредств;
	
	Если ТипЗнч(ДанныеИБ.СубконтоДтБУ2) = Тип("СправочникСсылка.ДоговорыКонтрагентов") И ЗначениеЗаполнено(ДанныеИБ.СубконтоДтБУ2) Тогда
		ВалютаКонвертации = ДанныеИБ.СубконтоДтБУ2.ВалютаВзаиморасчетов;
		// КурсЦБНаДатуКонвертации
		ПараметрыКурсаЦБНаДатуОперацииСВалютой = ОбщегоНазначенияБК.ПолучитьКурсВалюты(ВалютаКонвертации, ДанныеИБ.Дата);
		НоваяСтрокаРП.КратностьКонвертации = ПараметрыКурсаЦБНаДатуОперацииСВалютой.Кратность;
		НоваяСтрокаРП.КурсЦБНаДатуКонвертации = ПараметрыКурсаЦБНаДатуОперацииСВалютой.Курс;
		НоваяСтрокаРП.КурсКонвертации = ПараметрыКурсаЦБНаДатуОперацииСВалютой.Курс;
		НоваяСтрокаРП.ВалютаКонвертации = ВалютаКонвертации;
		НоваяСтрокаРП.СуммаВал = ОбщегоНазначенияБККлиентСервер.ПересчитатьПоКурсу(
			ДанныеИБ.СуммаДокумента, 
			ОбщегоНазначенияБК.ПолучитьКурсВалюты(ДанныеИБ.ВалютаДокумента, ДанныеИБ.Дата),
			ОбщегоНазначенияБК.ПолучитьКурсВалюты(ВалютаКонвертации, ДанныеИБ.Дата));
	КонецЕсли;
	
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", РасшифровкаПлатежа);
КонецПроцедуры
#КонецОбласти
#Область Документ_РКОНаБанковскийСчет_Отправка
Процедура ДобавитьПКО_Документ_РКОНаБанковскийСчет_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_РКОНаБанковскийСчет_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.РасходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата = "Документ.РКОНаБанковскийСчет";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_РКОНаБанковскийСчет_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Выдать";
	НоваяСтрока.СвойствоФормата = "Выдать";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Касса";
	НоваяСтрока.СвойствоФормата = "Касса";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Кассы_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Основание";
	НоваяСтрока.СвойствоФормата = "Основание";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПоДокументу";
	НоваяСтрока.СвойствоФормата = "ПоДокументу";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Приложение";
	НоваяСтрока.СвойствоФормата = "Приложение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "БанковскийСчет";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_РКОНаБанковскийСчет_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	#Область Шапка
	
	// ВидОперации
	ВидОперации = "Инкассация";
	Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРКО.ИнкассацияДенежныхСредств Тогда
		ВидОперации = "Инкассация";
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк Тогда
		ВидОперации = "ВзносНаличными";
	КонецЕсли;
	ДанныеXDTO.Вставить("ВидОперации", ВидОперации);
	
	// БанковскийСчет
	ДанныеXDTO.Вставить("БанковскийСчет", Неопределено);
	Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк Тогда
		Если ЗначениеЗаполнено(ДанныеИБ.СчетОрганизации) Тогда
			ДанныеXDTO.БанковскийСчет = ДанныеИБ.СчетОрганизации;
		//ИначеЕсли ТипЗнч(ДанныеИБ.СубконтоКт1) = Тип("СправочникСсылка.БанковскиеСчета") И ЗначениеЗаполнено(ДанныеИБ.СубконтоКт1) Тогда
		//	ДанныеXDTO.БанковскийСчет = ДанныеИБ.СубконтоКт1;
		//ИначеЕсли ТипЗнч(ДанныеИБ.СубконтоКт2) = Тип("СправочникСсылка.БанковскиеСчета") И ЗначениеЗаполнено(ДанныеИБ.СубконтоКт2) Тогда
		//	ДанныеXDTO.БанковскийСчет = ДанныеИБ.СубконтоКт2;
		//ИначеЕсли ТипЗнч(ДанныеИБ.СубконтоКт3) = Тип("СправочникСсылка.БанковскиеСчета") И ЗначениеЗаполнено(ДанныеИБ.СубконтоКт3) Тогда
		//	ДанныеXDTO.БанковскийСчет = ДанныеИБ.СубконтоКт3;
		КонецЕсли;
	КонецЕсли;
	
	#КонецОбласти
КонецПроцедуры
#КонецОбласти
#Область Документ_РКОПрочаяВыдача_Отправка
Процедура ДобавитьПКО_Документ_РКОПрочаяВыдача_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_РКОПрочаяВыдача_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.РасходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата = "Документ.РКОПрочаяВыдача";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_РКОПрочаяВыдача_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Выдать";
	НоваяСтрока.СвойствоФормата = "Выдать";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Касса";
	НоваяСтрока.СвойствоФормата = "Касса";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Кассы_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Основание";
	НоваяСтрока.СвойствоФормата = "Основание";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПоДокументу";
	НоваяСтрока.СвойствоФормата = "ПоДокументу";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Приложение";
	НоваяСтрока.СвойствоФормата = "Приложение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяДДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_РКОПрочаяВыдача_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
		
	Контрагент = Неопределено;
	Если НЕ ЗначениеЗаполнено(ДанныеИБ.Контрагент) Тогда
		Если ТипЗнч(ДанныеИБ.СубконтоДтБУ1) = Тип("СправочникСсылка.Контрагенты") И ЗначениеЗаполнено(ДанныеИБ.СубконтоДтБУ1) Тогда
			Контрагент = ДанныеИБ.СубконтоДтБУ1;
		ИначеЕсли ТипЗнч(ДанныеИБ.СубконтоДтБУ2) = Тип("СправочникСсылка.Контрагенты") И ЗначениеЗаполнено(ДанныеИБ.СубконтоДтБУ2) Тогда
			Контрагент = ДанныеИБ.СубконтоДтБУ2;
		ИначеЕсли ТипЗнч(ДанныеИБ.СубконтоДтБУ3) = Тип("СправочникСсылка.Контрагенты") И ЗначениеЗаполнено(ДанныеИБ.СубконтоДтБУ3) Тогда
			Контрагент = ДанныеИБ.СубконтоДтБУ3;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
		ДанныеXDTO.Вставить("Контрагент", Контрагент);
	КонецЕсли;
	
	РасшифровкаПлатежа = Новый ТаблицаЗначений;
	РасшифровкаПлатежа.Колонки.Добавить("Сумма");
	РасшифровкаПлатежа.Колонки.Добавить("СтатьяДДС");
	
	НоваяСтрокаРП = РасшифровкаПлатежа.Добавить();
	НоваяСтрокаРП.Сумма = ДанныеИБ.СуммаДокумента;
	НоваяСтрокаРП.СтатьяДДС = ДанныеИБ.СтатьяДвиженияДенежныхСредств;
	
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", РасшифровкаПлатежа);
КонецПроцедуры
#КонецОбласти
#Область Документ_РКОПрочийРасход_Отправка
Процедура ДобавитьПКО_Документ_РКОПрочийРасход_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_РКОПрочийРасход_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.РасходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата = "Документ.РКОПрочийРасход";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_РКОПрочийРасход_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Выдать";
	НоваяСтрока.СвойствоФормата = "Выдать";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Касса";
	НоваяСтрока.СвойствоФормата = "Касса";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Кассы_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Основание";
	НоваяСтрока.СвойствоФормата = "Основание";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПоДокументу";
	НоваяСтрока.СвойствоФормата = "ПоДокументу";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Приложение";
	НоваяСтрока.СвойствоФормата = "Приложение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяДДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяРасходов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДоходов";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_РКОПрочийРасход_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	РасшифровкаПлатежа = Новый ТаблицаЗначений;
	РасшифровкаПлатежа.Колонки.Добавить("Сумма");
	РасшифровкаПлатежа.Колонки.Добавить("СтатьяДДС");
	РасшифровкаПлатежа.Колонки.Добавить("СтатьяРасходов");
	
	НоваяСтрокаРП = РасшифровкаПлатежа.Добавить();
	НоваяСтрокаРП.Сумма = ДанныеИБ.СуммаДокумента;
	НоваяСтрокаРП.СтатьяДДС = ДанныеИБ.СтатьяДвиженияДенежныхСредств;
	
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", РасшифровкаПлатежа);
КонецПроцедуры
#КонецОбласти
#Область Документ_РКОРасчетыСКонтрагентами_Отправка
Процедура ДобавитьПКО_Документ_РКОРасчетыСКонтрагентами_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_РКОРасчетыСКонтрагентами_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.РасходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата = "Документ.РКОРасчетыСКонтрагентами";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_РКОРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Выдать";
	НоваяСтрока.СвойствоФормата = "Выдать";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Касса";
	НоваяСтрока.СвойствоФормата = "Касса";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Кассы_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Основание";
	НоваяСтрока.СвойствоФормата = "Основание";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПоДокументу";
	НоваяСтрока.СвойствоФормата = "ПоДокументу";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Приложение";
	НоваяСтрока.СвойствоФормата = "Приложение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидРасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ВалютаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидРасчетовРасширенный";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Договор";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КратностьВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КурсВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "СправочникСсылка.СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяДДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_РКОРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	// Вид расчетов
	
	ВидРасчетов = "";
	Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаПоставщику Тогда
		ВидРасчетов = "СПоставщиком";
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателю Тогда
		ВидРасчетов = "СПокупателем";
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИЗаймамСКонтрагентами Тогда
		ВидРасчетов = "КредитыИЗаймы";
	КонецЕсли;
	
	ДанныеXDTO.Вставить("ВидРасчетов", ВидРасчетов);
	
	#Область РасшифровкаПлатежа
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РасходныйКассовыйОрдерРасшифровкаПлатежа.ДоговорКонтрагента КАК Договор,
		|	РасходныйКассовыйОрдерРасшифровкаПлатежа.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
		|	РасходныйКассовыйОрдерРасшифровкаПлатежа.КратностьВзаиморасчетов КАК КратностьВзаиморасчетов,
		|	РасходныйКассовыйОрдерРасшифровкаПлатежа.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
		|	РасходныйКассовыйОрдерРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств КАК СтатьяДДС,
		|	РасходныйКассовыйОрдерРасшифровкаПлатежа.СуммаПлатежа КАК Сумма,
		|	РасходныйКассовыйОрдерРасшифровкаПлатежа.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
		|	Значение(Справочник.СтавкиНДС.ПустаяСсылка) КАК СтавкаНДС,
		|	0 КАК СуммаНДС,
		|	ВЫБОР
		|		КОГДА РасходныйКассовыйОрдерРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентомБУ = ЗНАЧЕНИЕ(ПланСчетов.Типовой.КраткосрочныеАвансыВыданные)
		|				ИЛИ РасходныйКассовыйОрдерРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентомБУ = ЗНАЧЕНИЕ(ПланСчетов.Типовой.ДолгосрочныеАвансыВыданные)
		|				ИЛИ РасходныйКассовыйОрдерРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентомБУ = ЗНАЧЕНИЕ(ПланСчетов.Типовой.ДолгосрочныеАвансыПолученные)
		|				ИЛИ РасходныйКассовыйОрдерРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентомБУ = ЗНАЧЕНИЕ(ПланСчетов.Типовой.КраткосрочныеАвансыПолученные)
		|			ТОГДА ""Аванс""
		|		КОГДА РасходныйКассовыйОрдерРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентомБУ = ЗНАЧЕНИЕ(ПланСчетов.Типовой.КраткосрочнаяЗадолженностьПоставщикамИПодрядчикам)
		|				ИЛИ РасходныйКассовыйОрдерРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентомБУ = ЗНАЧЕНИЕ(ПланСчетов.Типовой.КраткосрочнаяЗадолженностьПоАренде)
		|				ИЛИ РасходныйКассовыйОрдерРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентомБУ = ЗНАЧЕНИЕ(ПланСчетов.Типовой.ДолгосрочнаяЗадолженностьПоставщикамИПодрядчикам)
		|				ИЛИ РасходныйКассовыйОрдерРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентомБУ = ЗНАЧЕНИЕ(ПланСчетов.Типовой.КраткосрочнаяДебиторскаяЗадолженностьПокупателейИЗаказчиков)
		|				ИЛИ РасходныйКассовыйОрдерРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентомБУ = ЗНАЧЕНИЕ(ПланСчетов.Типовой.ДолгосрочнаяЗадолженностьПокупателейИЗаказчиков)
		|			ТОГДА ""Долг""
		|		КОГДА РасходныйКассовыйОрдерРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентомБУ = ЗНАЧЕНИЕ(ПланСчетов.Типовой.КраткосрочныеБанковскиеЗаймы)
		|			ТОГДА ""КраткосрочныеКредиты""
		|		КОГДА РасходныйКассовыйОрдерРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентомБУ = ЗНАЧЕНИЕ(ПланСчетов.Типовой.ДолгосрочныеБанковскиеЗаймы)
		|			ТОГДА ""ДолгосрочныеКредиты""
		|		ИНАЧЕ NULL
		|	КОНЕЦ КАК ВидРасчетовРасширенный
		|ИЗ
		|	Документ.РасходныйКассовыйОрдер.РасшифровкаПлатежа КАК РасходныйКассовыйОрдерРасшифровкаПлатежа
		|ГДЕ
		|	РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	РасшифровкаПлатежа = Запрос.Выполнить().Выгрузить();
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", РасшифровкаПлатежа);
	
	#КонецОбласти
КонецПроцедуры
#КонецОбласти
#Область Документ_РКОРасчетыССотрудниками_Отправка
Процедура ДобавитьПКО_Документ_РКОРасчетыССотрудниками_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_РКОРасчетыССотрудниками_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.РасходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата = "Документ.РКОРасчетыССотрудниками";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_РКОРасчетыССотрудниками_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Выдать";
	НоваяСтрока.СвойствоФормата = "Выдать";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Касса";
	НоваяСтрока.СвойствоФормата = "Касса";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Кассы_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Сотрудник";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ФизическиеЛица_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Основание";
	НоваяСтрока.СвойствоФормата = "Основание";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПоДокументу";
	НоваяСтрока.СвойствоФормата = "ПоДокументу";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Приложение";
	НоваяСтрока.СвойствоФормата = "Приложение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидРасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяДДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_РКОРасчетыССотрудниками_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	// ВидРасчетов
	ДанныеXDTO.Вставить("ВидРасчетов", "Подотчет");
	Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетнику Тогда
		ДанныеXDTO.ВидРасчетов = "Подотчет";
	КонецЕсли;
	
	РасшифровкаПлатежа = Новый ТаблицаЗначений;
	РасшифровкаПлатежа.Колонки.Добавить("Сумма");
	РасшифровкаПлатежа.Колонки.Добавить("СтатьяДДС");
	
	НоваяСтрокаРП = РасшифровкаПлатежа.Добавить();
	НоваяСтрокаРП.Сумма = ДанныеИБ.СуммаДокумента;
	НоваяСтрокаРП.СтатьяДДС = ДанныеИБ.СтатьяДвиженияДенежныхСредств;
	
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", РасшифровкаПлатежа);
КонецПроцедуры
#КонецОбласти
#Область Документ_СБДСПереводНаДругойСчет_Отправка
Процедура ДобавитьПКО_Документ_СБДСПереводНаДругойСчет_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_СБДСПереводНаДругойСчет_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПлатежноеПоручениеИсходящее;
	ПравилоКонвертации.ОбъектФормата = "Документ.СБДСПереводНаДругойСчет";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_СБДСПереводНаДругойСчет_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВыписки";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НазначениеПлатежа";
	НоваяСтрока.СвойствоФормата = "НазначениеПлатежа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетОрганизации";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "БанковскийСчет";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидПлатежа";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ДатаВыписки";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Код";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Очередность";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ТипПлатежногоДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_СБДСПереводНаДругойСчет_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ПередатьОбщиеРеквизитыПлатежаИзПлатежногоПоручения(ДанныеИБ, ДанныеXDTO);
	ДанныеXDTO.Вставить("ДатаВыписки", ДанныеИБ.Дата);
	
	ДанныеXDTO.Вставить("ТипПлатежногоДокумента", "ПлатежноеПоручение");
КонецПроцедуры
#КонецОбласти
#Область Документ_СБДСПеречислениеЗП_Отправка
Процедура ДобавитьПКО_Документ_СБДСПеречислениеЗП_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_СБДСПеречислениеЗП_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПлатежноеПоручениеИсходящее;
	ПравилоКонвертации.ОбъектФормата = "Документ.СБДСПеречислениеЗаработнойПлаты";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_СБДСПеречислениеЗП_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "ДатаВыписки";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВыписки";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НазначениеПлатежа";
	НоваяСтрока.СвойствоФормата = "НазначениеПлатежа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетОрганизации";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "БанковскийСчет";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ТипПлатежногоДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ДатаВедомостиНаВыплатуЗарплаты";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Депонент";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерВедомостиНаВыплатуЗарплаты";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяДДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_СБДСПеречислениеЗП_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	#Область Шапка
	
	ПередатьОбщиеРеквизитыПлатежаИзПлатежногоПоручения(ДанныеИБ, ДанныеXDTO);
	
	ДанныеXDTO.Вставить("ТипПлатежногоДокумента", "ПлатежноеПоручение");
	
	#КонецОбласти
	
	#Область РасшифровкаПлатежа
	
	РасшифровкаПлатежа = Новый ТаблицаЗначений;
	РасшифровкаПлатежа.Колонки.Добавить("Сумма");
	РасшифровкаПлатежа.Колонки.Добавить("СтатьяДДС");
	РасшифровкаПлатежа.Колонки.Добавить("Депонент");
	РасшифровкаПлатежа.Колонки.Добавить("НомерВедомостиНаВыплатуЗарплаты");
	РасшифровкаПлатежа.Колонки.Добавить("ДатаВедомостиНаВыплатуЗарплаты");
	
	Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеЗаработнойПлаты Тогда
		
		Для Каждого Строка Из ДанныеИБ.ПеречислениеЗаработнойПлаты Цикл
			
			НоваяСтрокаРП = РасшифровкаПлатежа.Добавить();
			НоваяСтрокаРП.Сумма = Строка.СуммаКВыплате;
			НоваяСтрокаРП.СтатьяДДС = ДанныеИБ.СтатьяДвиженияДенежныхСредств;
			НоваяСтрокаРП.Депонент = Ложь;
			
			// НомерВедомостиНаВыплатуЗарплаты, ДатаВедомостиНаВыплатуЗарплаты
			ДанныеВедомостиНаВыплатуЗП = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Строка.Ведомость, "Дата,Номер");
			НоваяСтрокаРП.НомерВедомостиНаВыплатуЗарплаты = ДанныеВедомостиНаВыплатуЗП.Номер;
			НоваяСтрокаРП.ДатаВедомостиНаВыплатуЗарплаты = ДанныеВедомостиНаВыплатуЗП.Дата;
		
		КонецЦикла;
		
	КонецЕсли;
	
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", РасшифровкаПлатежа);
	
	#КонецОбласти
КонецПроцедуры
#КонецОбласти
#Область Документ_СБДСПеречислениеЗПНаЛС_Отправка
Процедура ДобавитьПКО_Документ_СБДСПеречислениеЗПНаЛС_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_СБДСПеречислениеЗПНаЛС_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПлатежноеПоручениеИсходящее;
	ПравилоКонвертации.ОбъектФормата = "Документ.СБДСПеречислениеЗаработнойПлатыНаЛицевыеСчета";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_СБДСПеречислениеЗПНаЛС_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "ДатаВыписки";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВыписки";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НазначениеПлатежа";
	НоваяСтрока.СвойствоФормата = "НазначениеПлатежа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетОрганизации";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ФизЛицо";
	НоваяСтрока.СвойствоФормата = "Сотрудник";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ФизическиеЛица_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "БанковскийСчет";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидПлатежа";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Код";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Очередность";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ТипПлатежногоДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ДатаВедомостиНаВыплатуЗарплаты";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Депонент";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерВедомостиНаВыплатуЗарплаты";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяДДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_СБДСПеречислениеЗПНаЛС_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	#Область Шапка
	
	ПередатьОбщиеРеквизитыПлатежаИзПлатежногоПоручения(ДанныеИБ, ДанныеXDTO);
	
	ДанныеXDTO.Вставить("ТипПлатежногоДокумента", "ПлатежноеПоручение");
	
	#КонецОбласти
	
	#Область РасшифровкаПлатежа
	
	РасшифровкаПлатежа = Новый ТаблицаЗначений;
	РасшифровкаПлатежа.Колонки.Добавить("Сумма");
	РасшифровкаПлатежа.Колонки.Добавить("СтатьяДДС");
	РасшифровкаПлатежа.Колонки.Добавить("Депонент");
	РасшифровкаПлатежа.Колонки.Добавить("НомерВедомостиНаВыплатуЗарплаты");
	РасшифровкаПлатежа.Колонки.Добавить("ДатаВедомостиНаВыплатуЗарплаты");
	
	НоваяСтрокаРП = РасшифровкаПлатежа.Добавить();
	НоваяСтрокаРП.Сумма = ДанныеИБ.СуммаДокумента;
	НоваяСтрокаРП.СтатьяДДС = ДанныеИБ.СтатьяДвиженияДенежныхСредств;
	НоваяСтрокаРП.Депонент = Ложь;
	
	// НомерВедомостиНаВыплатуЗарплаты, ДатаВедомостиНаВыплатуЗарплаты
	Если ЗначениеЗаполнено(ДанныеИБ.ПлатежнаяВедомость) Тогда
		ДанныеВедомостиНаВыплатуЗП = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеИБ.ПлатежнаяВедомость, "Дата,Номер");
		НоваяСтрокаРП.НомерВедомостиНаВыплатуЗарплаты = ДанныеВедомостиНаВыплатуЗП.Номер;
		НоваяСтрокаРП.ДатаВедомостиНаВыплатуЗарплаты = ДанныеВедомостиНаВыплатуЗП.Дата;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", РасшифровкаПлатежа);
	
	#КонецОбласти
КонецПроцедуры
#КонецОбласти
#Область Документ_СБДСПлатежиВБюджет_Отправка
Процедура ДобавитьПКО_Документ_СБДСПлатежиВБюджет_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_СБДСПлатежиВБюджет_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПлатежноеПоручениеИсходящее;
	ПравилоКонвертации.ОбъектФормата = "Документ.СБДСПлатежиВБюджет";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_СБДСПлатежиВБюджет_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "ДатаВыписки";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВыписки";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НазначениеПлатежа";
	НоваяСтрока.СвойствоФормата = "НазначениеПлатежа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетОрганизации";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "БанковскийСчет";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидПлатежа";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Код";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ОКАТО";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Очередность";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ПоказательДаты";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ПоказательКБК";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ПоказательНомера";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ПоказательОснования";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ПоказательПериода";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ПоказательТипа";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатусСоставителя";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ТипПлатежногоДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяДДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_СБДСПлатежиВБюджет_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ПередатьОбщиеРеквизитыПлатежаИзПлатежногоПоручения(ДанныеИБ, ДанныеXDTO, Истина);
	ДанныеXDTO.Вставить("ВидОперации", "ПрочееСписание");
	
	ДанныеXDTO.Вставить("ТипПлатежногоДокумента", "ПлатежноеПоручение");
	
	ТабРасшифровкаПлатежа = Новый ТаблицаЗначений();
	ТабРасшифровкаПлатежа.Колонки.Добавить("СтатьяДДС");
	ТабРасшифровкаПлатежа.Колонки.Добавить("Сумма");
	
	СтрокаРасшифровки = ТабРасшифровкаПлатежа.Добавить();
	СтрокаРасшифровки.СтатьяДДС = ?(ДанныеИБ.РасшифровкаПлатежа.Количество() > 0, ДанныеИБ.РасшифровкаПлатежа[0].СтатьяДвиженияДенежныхСредств, ДанныеИБ.СтатьяДвиженияДенежныхСредств);
	СтрокаРасшифровки.Сумма     = ДанныеИБ.СуммаДокумента;
	
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", ТабРасшифровкаПлатежа);
	
	Если ДанныеXDTO.ПоказательДаты = "01.01.0001" Тогда
		ДанныеXDTO.ПоказательДаты = "0";
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_СБДСПрочееСписание_Отправка
Процедура ДобавитьПКО_Документ_СБДСПрочееСписание_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_СБДСПрочееСписание_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПлатежноеПоручениеИсходящее;
	ПравилоКонвертации.ОбъектФормата = "Документ.СБДСПрочееСписание";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_СБДСПрочееСписание_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "ДатаВыписки";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВыписки";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НазначениеПлатежа";
	НоваяСтрока.СвойствоФормата = "НазначениеПлатежа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетОрганизации";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "БанковскийСчет";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "ВидыОперацийСБДСПрочее_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидПлатежа";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Код";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Очередность";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ТипПлатежногоДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяДДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_СБДСПрочееСписание_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("ТипПлатежногоДокумента", "ПлатежноеПоручение");
	
	ПередатьОбщиеРеквизитыПлатежаИзПлатежногоПоручения(ДанныеИБ, ДанныеXDTO);
	Если НЕ ЗначениеЗаполнено(ДанныеИБ.Контрагент) Тогда
		Если ТипЗнч(ДанныеИБ.СубконтоДтБУ1) = Тип("СправочникСсылка.Контрагенты") И ЗначениеЗаполнено(ДанныеИБ.СубконтоДтБУ1) Тогда
			ДанныеXDTO.Вставить("Контрагент", ДанныеИБ.СубконтоДтБУ1);
		ИначеЕсли ТипЗнч(ДанныеИБ.СубконтоДтБУ2) = Тип("СправочникСсылка.Контрагенты") И ЗначениеЗаполнено(ДанныеИБ.СубконтоДтБУ2) Тогда
			ДанныеXDTO.Вставить("Контрагент", ДанныеИБ.СубконтоДтБУ2);
		ИначеЕсли ТипЗнч(ДанныеИБ.СубконтоДтБУ3) = Тип("СправочникСсылка.Контрагенты") И ЗначениеЗаполнено(ДанныеИБ.СубконтоДтБУ3) Тогда
			ДанныеXDTO.Вставить("Контрагент", ДанныеИБ.СубконтоДтБУ3);
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(ДанныеИБ.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
		Инструкция = Новый Структура("Значение,ИмяПКО");
		Инструкция.Значение = ДанныеИБ.Контрагент;
		Инструкция.ИмяПКО = "Справочник_Контрагенты_Отправка";
		ДанныеXDTO.Вставить("Контрагент", Инструкция);
	КонецЕсли;
	
	//Уточнение вида операции
	ВидОперации = "";
	Если ЗначениеЗаполнено(ДанныеИБ.ВидОперации) Тогда
	
		ВидПрочегоСписания = "";
		Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПрочиеРасчетыСКонтрагентами Тогда
			Если Найти(ДанныеИБ.Комментарий, "#Таможенный платеж ")<0 Тогда
					ВидПрочегоСписания = Перечисления.ВидыОперацийППИсходящее.ПрочиеРасчетыСКонтрагентами;
			КонецЕсли;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ВидПрочегоСписания) Тогда
			ВидПрочегоСписания = Перечисления.ВидыОперацийППИсходящее.ПрочееСписаниеБезналичныхДенежныхСредств;
		КонецЕсли;
	
		ДанныеXDTO.Вставить("ВидОперации", ВидПрочегоСписания);
	Иначе
		ДанныеXDTO.Вставить("ВидОперации", Перечисления.ВидыОперацийППИсходящее.ПрочееСписаниеБезналичныхДенежныхСредств);	
	КонецЕсли;
	
	ТабРасшифровкаПлатежа = Новый ТаблицаЗначений();
	ТабРасшифровкаПлатежа.Колонки.Добавить("СтатьяДДС");
	ТабРасшифровкаПлатежа.Колонки.Добавить("Сумма");
	СтрокаРасшифровки = ТабРасшифровкаПлатежа.Добавить();
	СтрокаРасшифровки.СтатьяДДС = ДанныеИБ.СтатьяДвиженияДенежныхСредств;
	СтрокаРасшифровки.Сумма     = ДанныеИБ.СуммаДокумента;
	
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", ТабРасшифровкаПлатежа);
КонецПроцедуры
#КонецОбласти
#Область Документ_СБДСПрочиеРасходы_Отправка
Процедура ДобавитьПКО_Документ_СБДСПрочиеРасходы_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_СБДСПрочиеРасходы_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПлатежноеПоручениеИсходящее;
	ПравилоКонвертации.ОбъектФормата = "Документ.СБДСПрочиеРасходы";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_СБДСПрочиеРасходы_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "ДатаВыписки";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВыписки";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НазначениеПлатежа";
	НоваяСтрока.СвойствоФормата = "НазначениеПлатежа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетОрганизации";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "БанковскийСчет";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидПлатежа";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Код";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Очередность";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ТипПлатежногоДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяДДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяРасходов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиРасходов_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_СБДСПрочиеРасходы_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("ТипПлатежногоДокумента", "ПлатежноеПоручение");
	
	ПередатьОбщиеРеквизитыПлатежаИзПлатежногоПоручения(ДанныеИБ, ДанныеXDTO);
	Если НЕ ЗначениеЗаполнено(ДанныеИБ.Контрагент) Тогда
		Если ТипЗнч(ДанныеИБ.СубконтоДт1) = Тип("СправочникСсылка.Контрагенты") И ЗначениеЗаполнено(ДанныеИБ.СубконтоДт1) Тогда
			Контрагент = ДанныеИБ.СубконтоДт1;
		ИначеЕсли ТипЗнч(ДанныеИБ.СубконтоДт2) = Тип("СправочникСсылка.Контрагенты") И ЗначениеЗаполнено(ДанныеИБ.СубконтоДт2) Тогда
			Контрагент = ДанныеИБ.СубконтоДт2;
		ИначеЕсли ТипЗнч(ДанныеИБ.СубконтоДт3) = Тип("СправочникСсылка.Контрагенты") И ЗначениеЗаполнено(ДанныеИБ.СубконтоДт3) Тогда
			Контрагент = ДанныеИБ.СубконтоДт3;
		КонецЕсли;
	Иначе
		Контрагент = ДанныеИБ.Контрагент;
	КонецЕсли;
	
	Если ТипЗнч(Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
		Инструкция = Новый Структура("Значение,ИмяПКО");
		Инструкция.Значение = Контрагент;
		Инструкция.ИмяПКО = "Справочник_Контрагенты_Отправка";
		ДанныеXDTO.Вставить("Контрагент", Инструкция);
	КонецЕсли;
	
	ТабРасшифровкаПлатежа = Новый ТаблицаЗначений();
	ТабРасшифровкаПлатежа.Колонки.Добавить("СтатьяДДС");
	ТабРасшифровкаПлатежа.Колонки.Добавить("СтатьяРасходов");
	ТабРасшифровкаПлатежа.Колонки.Добавить("Сумма");
	СтрокаРасшифровки = ТабРасшифровкаПлатежа.Добавить();
	СтрокаРасшифровки.СтатьяДДС = ДанныеИБ.СтатьяДвиженияДенежныхСредств;
	СтрокаРасшифровки.Сумма = ДанныеИБ.СуммаДокумента;
		
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", ТабРасшифровкаПлатежа);
КонецПроцедуры
#КонецОбласти
#Область Документ_СБДСРасчетыСКонтрагентами_Отправка
Процедура ДобавитьПКО_Документ_СБДСРасчетыСКонтрагентами_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_СБДСРасчетыСКонтрагентами_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПлатежноеПоручениеИсходящее;
	ПравилоКонвертации.ОбъектФормата = "Документ.СБДСРасчетыСКонтрагентами";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_СБДСРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "ДатаВыписки";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВыписки";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НазначениеПлатежа";
	НоваяСтрока.СвойствоФормата = "НазначениеПлатежа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетОрганизации";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "БанковскийСчет";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидПлатежа";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидРасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Код";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Очередность";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ТипПлатежногоДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ВалютаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидРасчетовРасширенный";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Договор";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КратностьВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КурсВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяДДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_СБДСРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	ПередатьОбщиеРеквизитыПлатежаИзПлатежногоПоручения(ДанныеИБ, ДанныеXDTO);
	
	ДанныеXDTO.Вставить("ТипПлатежногоДокумента", "ПлатежноеПоручение");
	
	ВидРасчетовСКонтрагентом = "";
	Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПрочиеРасчетыСКонтрагентами Тогда
		Если Найти(ДанныеИБ.Комментарий, "#Таможенный платеж ")<0 Тогда
			СчетУчетаРасчетовСКонтрагентомБУ = Неопределено;
			Если ДанныеИБ.РасшифровкаПлатежа.Количество() > 0 Тогда
				СчетУчетаРасчетовСКонтрагентомБУ = ДанныеИБ.РасшифровкаПлатежа[0].СчетУчетаРасчетовСКонтрагентомБУ;
			КонецЕсли;
			
			Если СчетУчетаРасчетовСКонтрагентомБУ <> ПланыСчетов.Типовой.ДенежныеСредстваВПутиКонвертацияВалюты
				И Найти("1410;1430;3110;3120;3130;3140;3150;3160;3170;3180;3190", ДанныеИБ.СчетУчетаРасчетовСКонтрагентомБУ.ПринадлежитЭлементу.Код) = 0 Тогда
				ВидРасчетовСКонтрагентом = "Прочее";
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ОплатаПоставщику Тогда
		ВидРасчетовСКонтрагентом = "СПоставщиком";
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ВозвратДенежныхСредствПокупателю Тогда
		ВидРасчетовСКонтрагентом = "СПокупателем";
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийППИсходящее.РасчетыПоКредитамИЗаймамСКонтрагентами Тогда
		ВидРасчетовСКонтрагентом = "КредитыИЗаймы";
	КонецЕсли;
	Если ВидРасчетовСКонтрагентом = "" Тогда
		ВидРасчетовСКонтрагентом = "Прочее";
	КонецЕсли;
	ДанныеXDTO.Вставить("ВидРасчетов", ВидРасчетовСКонтрагентом);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РасшифровкаПлатежа.ДоговорКонтрагента КАК Договор,
		|	РасшифровкаПлатежа.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
		|	РасшифровкаПлатежа.КратностьВзаиморасчетов КАК КратностьВзаиморасчетов,
		|	РасшифровкаПлатежа.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
		|	РасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств КАК СтатьяДДС,
		|	РасшифровкаПлатежа.СуммаПлатежа КАК Сумма,
		|	РасшифровкаПлатежа.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
		|	РасшифровкаПлатежа.СтавкаНДС КАК СтавкаНДС,
		|	РасшифровкаПлатежа.СуммаНДС КАК СуммаНДС,
		|	ВЫБОР
		|		КОГДА РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентомБУ = ЗНАЧЕНИЕ(ПланСчетов.Типовой.КраткосрочныеАвансыВыданные)
		|				ИЛИ РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентомБУ = ЗНАЧЕНИЕ(ПланСчетов.Типовой.ДолгосрочныеАвансыВыданные)
		|				ИЛИ РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентомБУ = ЗНАЧЕНИЕ(ПланСчетов.Типовой.ДолгосрочныеАвансыПолученные)
		|				ИЛИ РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентомБУ = ЗНАЧЕНИЕ(ПланСчетов.Типовой.КраткосрочныеАвансыПолученные)
		|			ТОГДА ""Аванс""
		|		КОГДА РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентомБУ = ЗНАЧЕНИЕ(ПланСчетов.Типовой.КраткосрочнаяЗадолженностьПоставщикамИПодрядчикам)
		|				ИЛИ РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентомБУ = ЗНАЧЕНИЕ(ПланСчетов.Типовой.КраткосрочнаяЗадолженностьПоАренде)
		|				ИЛИ РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентомБУ = ЗНАЧЕНИЕ(ПланСчетов.Типовой.ДолгосрочнаяЗадолженностьПоставщикамИПодрядчикам)
		|				ИЛИ РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентомБУ = ЗНАЧЕНИЕ(ПланСчетов.Типовой.КраткосрочнаяДебиторскаяЗадолженностьПокупателейИЗаказчиков)
		|				ИЛИ РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентомБУ = ЗНАЧЕНИЕ(ПланСчетов.Типовой.ДолгосрочнаяЗадолженностьПокупателейИЗаказчиков)
		|			ТОГДА ""Долг""
		|		КОГДА РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентомБУ = ЗНАЧЕНИЕ(ПланСчетов.Типовой.КраткосрочныеБанковскиеЗаймы)
		|			ТОГДА ""КраткосрочныеКредиты""
		|		КОГДА РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентомБУ = ЗНАЧЕНИЕ(ПланСчетов.Типовой.ДолгосрочныеБанковскиеЗаймы)
		|			ТОГДА ""ДолгосрочныеКредиты""
		|		ИНАЧЕ NULL
		|	КОНЕЦ КАК ВидРасчетовРасширенный
		|ИЗ
		|	Документ.ПлатежноеПоручениеИсходящее.РасшифровкаПлатежа КАК РасшифровкаПлатежа
		|ГДЕ
		|	РасшифровкаПлатежа.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	РасшифровкаПлатежа = Запрос.Выполнить().Выгрузить();
	ОпределитьСтавкуНДС_Отправка(РасшифровкаПлатежа);
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", РасшифровкаПлатежа);
КонецПроцедуры
#КонецОбласти
#Область Документ_СБДСРасчетыССотрудниками_Отправка
Процедура ДобавитьПКО_Документ_СБДСРасчетыССотрудниками_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_СБДСРасчетыССотрудниками_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПлатежноеПоручениеИсходящее;
	ПравилоКонвертации.ОбъектФормата = "Документ.СБДСРасчетыССотрудниками";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_СБДСРасчетыССотрудниками_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.СвойствоФормата = "ВидРасчетов";
	НоваяСтрока.ПравилоКонвертацииСвойства = "ВидыОперацийСБДСРасчетыССотрудниками";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "ДатаВыписки";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВыписки";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НазначениеПлатежа";
	НоваяСтрока.СвойствоФормата = "НазначениеПлатежа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетОрганизации";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "БанковскийСчет";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидПлатежа";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Код";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Очередность";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Сотрудник";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ФизическиеЛица_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ТипПлатежногоДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяДДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_СБДСРасчетыССотрудниками_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("ТипПлатежногоДокумента", "ПлатежноеПоручение");
	
	ПередатьОбщиеРеквизитыПлатежаИзПлатежногоПоручения(ДанныеИБ, ДанныеXDTO);
	
	Если ДанныеИБ.ПеречислениеВПодотчет.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Сотрудник", ДанныеИБ.ПеречислениеВПодотчет[0].ФизЛицо);
	Иначе
		ДанныеXDTO.Вставить("Сотрудник", Справочники.ФизическиеЛица.ПустаяСсылка());
	КонецЕсли;	
		
	
	ТабРасшифровкаПлатежа = Новый ТаблицаЗначений();
	ТабРасшифровкаПлатежа.Колонки.Добавить("СтатьяДДС");
	ТабРасшифровкаПлатежа.Колонки.Добавить("Сумма");
	СтрокаРасшифровки = ТабРасшифровкаПлатежа.Добавить();
	СтрокаРасшифровки.СтатьяДДС = ДанныеИБ.СтатьяДвиженияДенежныхСредств;
	СтрокаРасшифровки.Сумма = ДанныеИБ.СуммаДокумента;
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", ТабРасшифровкаПлатежа);
КонецПроцедуры
#КонецОбласти
#Область Документ_УстановкаЦенНоменклатуры_Отправка
Процедура ДобавитьПКО_Документ_УстановкаЦенНоменклатуры_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_УстановкаЦенНоменклатуры_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.УстановкаЦенНоменклатуры;
	ПравилоКонвертации.ОбъектФормата = "Документ.УстановкаЦенНоменклатуры";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_УстановкаЦенНоменклатуры_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ТипЦен";
	НоваяСтрока.СвойствоФормата = "ТипЦен";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ТипыЦен";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерСтрокиДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Характеристика";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_УстановкаЦенНоменклатуры_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Товары = ДанныеИБ.Товары.Выгрузить();
	
	Индекс = Товары.Количество()-1;
	Пока Индекс >=0 Цикл
		Если Товары.Получить(Индекс).Цена = 0 Тогда
			Товары.Удалить(Индекс);
		КонецЕсли;
	 	Индекс = Индекс - 1;
	КонецЦикла;
	
	ДанныеXDTO.Вставить("Товары", Товары);
КонецПроцедуры
#КонецОбласти
#Область Справочник_БанковскиеСчета_Отправка
Процедура ДобавитьПКО_Справочник_БанковскиеСчета_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_БанковскиеСчета_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.БанковскиеСчета;
	ПравилоКонвертации.ОбъектФормата = "Справочник.БанковскиеСчета";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_БанковскиеСчета_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Банк";
	НоваяСтрока.СвойствоФормата = "Банк";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Банки";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "БанкДляРасчетов";
	НоваяСтрока.СвойствоФормата = "БанкДляРасчетов";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Банки";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДенежныхСредств";
	НоваяСтрока.СвойствоФормата = "ВалютаДенежныхСредств";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерСчета";
	НоваяСтрока.СвойствоФормата = "НомерСчета";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ТекстКорреспондента";
	НоваяСтрока.СвойствоФормата = "ТекстКорреспондента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ТекстНазначения";
	НоваяСтрока.СвойствоФормата = "ТекстНазначения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Владелец";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Справочник_БанковскиеСчета_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	// Владелец
	
	Инструкция = Новый Структура("Значение, ИмяПКО");
	Инструкция.Значение = ДанныеИБ.Владелец;
	Если ТипЗнч(ДанныеИБ.Владелец) = Тип("СправочникСсылка.Контрагенты") Тогда
		Инструкция.ИмяПКО = "Справочник_Контрагенты_Отправка";
	ИначеЕсли ТипЗнч(ДанныеИБ.Владелец) = Тип("СправочникСсылка.Организации") Тогда
		Инструкция.ИмяПКО = "Справочник_Организации_Отправка";
	КонецЕсли;
	
	ДанныеXDTO.КлючевыеСвойства.Вставить("Владелец", Инструкция);
КонецПроцедуры
#КонецОбласти
#Область Справочник_ДоговорыКонтрагентов_Отправка
Процедура ДобавитьПКО_Справочник_ДоговорыКонтрагентов_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_ДоговорыКонтрагентов_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.ДоговорыКонтрагентов;
	ПравилоКонвертации.ОбъектФормата = "Справочник.Договоры";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_ДоговорыКонтрагентов_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "ВалютаВзаиморасчетов";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидДоговора";
	НоваяСтрока.СвойствоФормата = "ВидДоговора";
	НоваяСтрока.ПравилоКонвертацииСвойства = "ВидыДоговоров";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Владелец";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаДоговора";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаОкончанияДействияДоговора";
	НоваяСтрока.СвойствоФормата = "СрокДействия";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерДоговора";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПометкаУдаления";
	НоваяСтрока.СвойствоФормата = "РасчетыВУсловныхЕдиницах";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("ВалютаВзаиморасчетов,Контрагент,Наименование,Организация,ТипДоговора");
КонецПроцедуры

Процедура ПКО_Справочник_ДоговорыКонтрагентов_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрДлина(СокрЛП(ДанныеИБ.Наименование)) > 80 Тогда
		ДанныеXDTO.КлючевыеСвойства.Наименование = Лев(СокрЛП(ДанныеИБ.Наименование), 80);
	КонецЕсли;
	
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	Если Не ВалютаРегламентированногоУчета = ДанныеИБ.ВалютаВзаиморасчетов Тогда
		ДанныеXDTO.КлючевыеСвойства.РасчетыВУсловныхЕдиницах = Истина;
	Иначе
		ДанныеXDTO.КлючевыеСвойства.РасчетыВУсловныхЕдиницах = Ложь;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_Кассы_Отправка
Процедура ДобавитьПКО_Справочник_Кассы_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_Кассы_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.Кассы;
	ПравилоКонвертации.ОбъектФормата = "Справочник.Кассы";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДенежныхСредств";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Владелец";
	НоваяСтрока.СвойствоФормата = "Владелец";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";

КонецПроцедуры
#КонецОбласти
#Область Справочник_Контрагенты_Отправка
Процедура ДобавитьПКО_Справочник_Контрагенты_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_Контрагенты_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.Контрагенты;
	ПравилоКонвертации.ОбъектФормата = "Справочник.Контрагенты";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДокументУдостоверяющийЛичность";
	НоваяСтрока.СвойствоФормата = "ДокументУдЛичность";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ИдентификационныйКодЛичности";
	НоваяСтрока.СвойствоФормата = "ИНН";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КБЕ";
	НоваяСтрока.СвойствоФормата = "КБЕ";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НаименованиеПолное";
	НоваяСтрока.СвойствоФормата = "НаименованиеПолное";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЮрФизЛицо";
	НоваяСтрока.СвойствоФормата = "ЮридическоеФизическоеЛицо";
	НоваяСтрока.ПравилоКонвертацииСвойства = "ЮридическоеФизическоеЛицо";

КонецПроцедуры
#КонецОбласти
#Область Справочник_Номенклатура_Отправка
Процедура ДобавитьПКО_Справочник_Номенклатура_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_Номенклатура_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.Номенклатура;
	ПравилоКонвертации.ОбъектФормата = "Справочник.Номенклатура";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_Номенклатура_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Артикул";
	НоваяСтрока.СвойствоФормата = "Артикул";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Код";
	НоваяСтрока.СвойствоФормата = "КодВПрограмме";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Описание";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НаименованиеПолное";
	НоваяСтрока.СвойствоФормата = "НаименованиеПолное";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Родитель";
	НоваяСтрока.СвойствоФормата = "Группа";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_НоменклатураГруппа_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтавкаНДС";
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "АлкогольнаяПродукция";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидАлкогольнойПродукции";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ИмпортнаяАлкогольнаяПродукция";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "КодТНВЭД";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ОбъемДАЛ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ПроизводительИмпортер";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ТипНоменклатуры";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "БазоваяЕдиницаИзмерения";
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения";

	ПравилоКонвертации.ПоляПоиска.Добавить("Артикул,НаименованиеПолное,Код");
	ПравилоКонвертации.ПоляПоиска.Добавить("Артикул,НаименованиеПолное");
КонецПроцедуры

Процедура ПКО_Справочник_Номенклатура_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если НЕ ЗначениеЗаполнено(ДанныеИБ.НаименованиеПолное) Тогда
		ДанныеXDTO.КлючевыеСвойства.Вставить("НаименованиеПолное", ДанныеИБ.Наименование);
	КонецЕсли;
	
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеИБ.СтавкаНДС.Ставка = 0 И ДанныеИБ.СтавкаНДС.ДляОсвобожденногоОборота Тогда
		ДанныеXDTO.СтавкаНДС = "БезНДС";
	Иначе
		ДанныеXDTO.СтавкаНДС = "" + ДанныеИБ.СтавкаНДС.Ставка;
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(ДанныеИБ.КодТНВЭД) Тогда
		МакетКодовСтрокТНВЭД = УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.ПФ_MXL_КодыТНВЭД");
		МакетКодовСтрокТНВЭД.КодЯзыка = ОбщегоНазначения.КодОсновногоЯзыка(); 
		ОбластьСтрокТНВЭД = МакетКодовСтрокТНВЭД.Области.Найти("Классификатор");
		НаименованиеСтроки = РегламентированнаяОтчетность.ПолучитьНаименованиеСтрокиКлассификатораПоКоду(МакетКодовСтрокТНВЭД, ОбластьСтрокТНВЭД, ДанныеИБ.КодТНВЭД, 4, 5);
		СтруктураТНВЭД = Новый Структура("Код, Наименование", ДанныеИБ.КодТНВЭД, НаименованиеСтроки);
		ДанныеXDTO.Вставить("КодТНВЭД", СтруктураТНВЭД);
	КонецЕсли;	
	
	Если Не ЗначениеЗаполнено(ДанныеИБ.БазоваяЕдиницаИзмерения) Тогда
		ДанныеXDTO.Вставить("ЕдиницаИзмерения", ПолучитьЕдиницуИзмеренияПоУмолчанию());
	КонецЕсли;
		
	Если Не ДанныеИБ.ЭтоГруппа Тогда
		Если Не ДанныеИБ.Услуга Тогда 
			ДанныеXDTO.Вставить("ТипНоменклатуры", "Товар");
		Иначе
			ДанныеXDTO.Вставить("ТипНоменклатуры", "Услуга");
		КонецЕсли;
	Иначе	
		ДанныеXDTO.Вставить("ТипНоменклатуры", "");
		ДанныеXDTO.Вставить("НаименованиеПолное", "");
		Возврат;
	КонецЕсли;
	
	#Область ДанныеАлкогольнойПродукции
	ДанныеXDTO.Вставить("АлкогольнаяПродукция", Ложь);
	ДанныеXDTO.Вставить("ИмпортнаяАлкогольнаяПродукция", Ложь);
	ДанныеXDTO.Вставить("ПроизводительИмпортер");
	ДанныеXDTO.Вставить("ОбъемДАЛ");
	ДанныеXDTO.Вставить("ВидАлкогольнойПродукции");
	#КонецОбласти
КонецПроцедуры
#КонецОбласти
#Область Справочник_НоменклатураГруппа_Отправка
Процедура ДобавитьПКО_Справочник_НоменклатураГруппа_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_НоменклатураГруппа_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.Номенклатура;
	ПравилоКонвертации.ОбъектФормата = "Справочник.НоменклатураГруппа";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Истина;
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Код";
	НоваяСтрока.СвойствоФормата = "КодВПрограмме";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Родитель";
	НоваяСтрока.СвойствоФормата = "Группа";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_НоменклатураГруппа_Отправка";

КонецПроцедуры
#КонецОбласти
#Область Справочник_Организации_Отправка
Процедура ДобавитьПКО_Справочник_Организации_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_Организации_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.Организации;
	ПравилоКонвертации.ОбъектФормата = "Справочник.Организации";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_Организации_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ГоловнаяОрганизация";
	НоваяСтрока.СвойствоФормата = "ГоловнаяОрганизация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаПостановкиНаУчетПоНДС";
	НоваяСтрока.СвойствоФормата = "СвидетельствоДатаВыдачи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ИдентификационныйНомер";
	НоваяСтрока.СвойствоФормата = "ИНН";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КодПоОКПО";
	НоваяСтрока.СвойствоФормата = "ОКПО";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НаименованиеПолное";
	НоваяСтрока.СвойствоФормата = "НаименованиеПолное";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерСвидетельстваПоНДС";
	НоваяСтрока.СвойствоФормата = "СвидетельствоСерияНомер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ОсновнойБанковскийСчет";
	НоваяСтрока.СвойствоФормата = "ОсновнойБанковскийСчет";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Префикс";
	НоваяСтрока.СвойствоФормата = "Префикс";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЮрФизЛицо";
	НоваяСтрока.СвойствоФормата = "ЮридическоеФизическоеЛицо";
	НоваяСтрока.ПравилоКонвертацииСвойства = "ЮридическоеФизическоеЛицо";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "КПП";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "НаименованиеСокращенное";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("КонтактнаяИнформация", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.КонтактнаяИнформация;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидКонтактнойИнформации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначенияПолей";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НаименованиеКонтактнойИнформации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Справочник_Организации_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	//Если СтекВыгрузки.Количество() = 1 Тогда
	//	ПодготовитьДанныеКонтактнаяИнформация(ДанныеИБ, ДанныеXDTO);
	//КонецЕсли;
	
	ДанныеXDTO.КлючевыеСвойства.Вставить("КПП", "123456789");
	ДанныеXDTO.КлючевыеСвойства.Вставить("НаименованиеСокращенное", ДанныеИБ.Наименование);
	
	AdditionalInfoВставить(ДанныеXDTO, "СерияСвидетельстваПоНДС", ДанныеИБ.СерияСвидетельстваПоНДС);
КонецПроцедуры
#КонецОбласти
#Область Справочник_Подразделения_Отправка
Процедура ДобавитьПКО_Справочник_Подразделения_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_Подразделения_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.ПодразделенияОрганизаций;
	ПравилоКонвертации.ОбъектФормата = "Справочник.Подразделения";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";

КонецПроцедуры
#КонецОбласти
#Область Справочник_Склады_Отправка
Процедура ДобавитьПКО_Справочник_Склады_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_Склады_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.Склады;
	ПравилоКонвертации.ОбъектФормата = "Справочник.Склады";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_Склады_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Родитель";
	НоваяСтрока.СвойствоФормата = "Группа";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СкладыГруппа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ТипСклада";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "ТипыСкладов";

КонецПроцедуры

Процедура ПКО_Справочник_Склады_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.КлючевыеСвойства.Вставить("ТипСклада", Перечисления.ПолФизическихЛиц.Мужской);
КонецПроцедуры
#КонецОбласти
#Область Справочник_ФизическиеЛица_Отправка
Процедура ДобавитьПКО_Справочник_ФизическиеЛица_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_ФизическиеЛица_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.ФизическиеЛица;
	ПравилоКонвертации.ОбъектФормата = "Справочник.ФизическиеЛица";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаРождения";
	НоваяСтрока.СвойствоФормата = "ДатаРождения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ИдентификационныйКодЛичности";
	НоваяСтрока.СвойствоФормата = "ИНН";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "ФИО";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Пол";
	НоваяСтрока.СвойствоФормата = "Пол";
	НоваяСтрока.ПравилоКонвертацииСвойства = "ПолФизическогоЛица";

КонецПроцедуры
#КонецОбласти
#КонецОбласти
#Область Получение
#Область Документ_АвансовыйОтчет_Получение
Процедура ДобавитьПКО_Документ_АвансовыйОтчет_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_АвансовыйОтчет_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.АвансовыйОтчет;
	ПравилоКонвертации.ОбъектФормата = "Документ.АвансовыйОтчет";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_АвансовыйОтчет_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_АвансовыйОтчет_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_АвансовыйОтчет";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КоличествоДокументов";
	НоваяСтрока.СвойствоФормата = "КоличествоДокументов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КоличествоЛистов";
	НоваяСтрока.СвойствоФормата = "КоличествоЛистов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КратностьДокумента";
	НоваяСтрока.СвойствоФормата = "КратностьДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КурсДокумента";
	НоваяСтрока.СвойствоФормата = "КурсДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НазначениеАванса";
	НоваяСтрока.СвойствоФормата = "НазначениеАванса";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Склад";
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаВключаетНДС";
	НоваяСтрока.СвойствоФормата = "СуммаВключаетНДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ФизЛицо";
	НоваяСтрока.СвойствоФормата = "ПодотчетноеЛицо";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ФизическиеЛица_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетРасчетовСПодотчетнымЛицом";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ВыданныеАвансы", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ВыданныеАвансы;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Документ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ОплатаПоставщикам", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ОплатаПоставщикам;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоговорКонтрагента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КратностьВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КурсВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Содержание";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Прочее", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Прочее;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаСФ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерСФ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Поставщик";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПредъявленСФ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Содержание";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетЗатратБУ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаСФ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Коэффициент";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерСФ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Поставщик";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПредъявленСФ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_АвансовыйОтчет_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Проведен = Истина;
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	
	ПолученныеДанные.СчетРасчетовСПодотчетнымЛицом = ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПодотчетныхЛиц;	
	
	МассивСтрокТовары = Новый Массив;
	МассивСтрокПрочиеРасходы = Новый Массив;
	МассивСтрокОплатаПоставщикам = Новый Массив;
	МассивСтрокВыданныеАвансы = Новый Массив;
	
	//Товары
	Если ДанныеXDTO.Свойство("Товары") И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполнения.Вставить("Количество", "Количество");
		ПравилаЗаполнения.Вставить("Сумма", "Сумма");
		ПравилаЗаполнения.Вставить("Цена", "Цена");
		ПравилаЗаполнения.Вставить("СтавкаНДС", "СтавкаНДС");
		ПравилаЗаполнения.Вставить("СуммаНДС", "СуммаНДС");
		ПравилаЗаполнения.Вставить("Поставщик", "Поставщик");
		ПравилаЗаполнения.Вставить("ПредъявленСФ", "ПредъявленСФ");
		ПравилаЗаполнения.Вставить("ДатаСФ", "ДатаСФ");
		ПравилаЗаполнения.Вставить("НомерСФ", "НомерСФ");
		ПравилаЗаполнения.Вставить("НомерВходящегоДокумента", "НомерВходящегоДокумента");
		ПравилаЗаполнения.Вставить("ДатаВходящегоДокумента", "ДатаВходящегоДокумента");
			
		Для Каждого Строка Из ДанныеXDTO.Товары Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
	
			Если  Строка.ТипЗапасов = "КомиссионныеТовары" Тогда
				СтруктураДанныхСтроки.Вставить("СчетУчета",ПланыСчетов.Типовой.ПустаяСсылка()); 
			КонецЕсли;
			
			СтруктураДанныхСтроки.Вставить("Коэффициент", 1);
			
			ОбработатьСтавкуНДСПриПолучении(Строка, СтруктураДанныхСтроки, КомпонентыОбмена.ПараметрыКонвертации);
	
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	Если ДанныеXDTO.Свойство("ПрочиеРасходы") И ЗначениеЗаполнено(ДанныеXDTO.ПрочиеРасходы) Тогда
		//Прочие расходы
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполнения.Вставить("Содержание", "Содержание");
		ПравилаЗаполнения.Вставить("Сумма", "Сумма");
		ПравилаЗаполнения.Вставить("СтавкаНДС", "СтавкаНДС");
		ПравилаЗаполнения.Вставить("СуммаНДС", "СуммаНДС");
		ПравилаЗаполнения.Вставить("Поставщик", "Поставщик");
		ПравилаЗаполнения.Вставить("ПредъявленСФ", "ПредъявленСФ");
		ПравилаЗаполнения.Вставить("ДатаСФ", "ДатаСФ");
		ПравилаЗаполнения.Вставить("НомерСФ", "НомерСФ");
		ПравилаЗаполнения.Вставить("НомерВходящегоДокумента", "НомерВходящегоДокумента");
		ПравилаЗаполнения.Вставить("ДатаВходящегоДокумента", "ДатаВходящегоДокумента");
		ПравилаЗаполнения.Вставить("СчетЗатрат", "СчетЗатратБУ");
		Для Каждого Строка Из ДанныеXDTO.ПрочиеРасходы Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			
			Если Не СтруктураДанныхСтроки.Свойство("СчетЗатратБУ") Тогда 
				СтруктураДанныхСтроки.Вставить("СчетЗатратБУ", ПланыСчетов.Типовой.АдминистративныеРасходы);
			КонецЕсли;
			
			ОбработатьСтавкуНДСПриПолучении(Строка, СтруктураДанныхСтроки, КомпонентыОбмена.ПараметрыКонвертации);			
			
			МассивСтрокПрочиеРасходы.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	Если (ДанныеXDTO.Свойство("ОплатаПоставщикам") И ЗначениеЗаполнено(ДанныеXDTO.ОплатаПоставщикам))
		Или (ДанныеXDTO.Свойство("ОплатаКонтрагентам") И ЗначениеЗаполнено(ДанныеXDTO.ОплатаКонтрагентам)) Тогда
		//Оплата поставщикам
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Контрагент", "Контрагент");
		ПравилаЗаполнения.Вставить("Сумма", "Сумма");
		ПравилаЗаполнения.Вставить("КурсВзаиморасчетов", "КурсВзаиморасчетов");
		ПравилаЗаполнения.Вставить("КратностьВзаиморасчетов", "КратностьВзаиморасчетов");
		ПравилаЗаполнения.Вставить("СуммаВзаиморасчетов", "СуммаВзаиморасчетов");
		ПравилаЗаполнения.Вставить("Содержание", "Содержание");
		ПравилаЗаполнения.Вставить("НомерВходящегоДокумента", "НомерВходящегоДокумента");
		ПравилаЗаполнения.Вставить("ДатаВходящегоДокумента", "ДатаВходящегоДокумента");
		
		Для Каждого Строка Из ?(ДанныеXDTO.Свойство("ОплатаПоставщикам"), ДанныеXDTO.ОплатаПоставщикам, ДанныеXDTO.ОплатаКонтрагентам) Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
					
			//Договор
			Если ЗначениеЗаполнено(Строка.Договор) Тогда
				Если ТипЗнч(Строка.Договор) = Тип("Структура") И 
					Строка.Договор.Свойство("Ссылка") = Ложь Тогда
					ИмяПКО = "Справочник_ДоговорыКонтрагентов_ИзСтруктуры";
				Иначе
					ИмяПКО = "Справочник_ДоговорыКонтрагентов";
				КонецЕсли;
				СтруктураДанныхСтроки.Вставить("ДоговорКонтрагента", Новый Структура("Значение, ИмяПКО", Строка.Договор, ИмяПКО));
			КонецЕсли;
			 
			МассивСтрокОплатаПоставщикам.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	Если ДанныеXDTO.Свойство("ВыданныеАвансы") И ЗначениеЗаполнено(ДанныеXDTO.ВыданныеАвансы) Тогда
		
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Сумма", "Сумма");
		
		//Выданные авансы
		Для Каждого Строка Из ДанныеXDTO.ВыданныеАвансы Цикл
		
			Если НЕ ЗначениеЗаполнено(Строка.Документ) Тогда
				Продолжить;
			КонецЕсли;
			
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			
			ИмяПКО = "Документ_АвансовыйОтчет_Получение";
			ТипДокумента = Строка.Документ.ТипЗначения;
			Если Найти(ТипДокумента, "РКОРасчетыССотрудниками") > 0 Тогда
				ИмяПКО = "Документ_РКОРасчетыССотрудниками_Получение";
			ИначеЕсли Найти(ТипДокумента, "СБДСРасчетыССотрудниками") > 0 Тогда
				ИмяПКО = "Документ_СБДСРасчетыССотрудниками_Получение";
			КонецЕсли;
			СтруктураДанныхСтроки.Вставить(
					"Документ", Новый Структура("Значение,ИмяПКО", Строка.Документ, ИмяПКО));
			МассивСтрокВыданныеАвансы.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	Если МассивСтрокТовары.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
	КонецЕсли;
	Если МассивСтрокПрочиеРасходы.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Прочее", МассивСтрокПрочиеРасходы);
	КонецЕсли;
	Если МассивСтрокОплатаПоставщикам.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ОплатаПоставщикам", МассивСтрокОплатаПоставщикам);
	КонецЕсли;
	Если МассивСтрокВыданныеАвансы.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ВыданныеАвансы", МассивСтрокВыданныеАвансы);
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_АвансовыйОтчет_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УстановкаУчетнойПолитикиОрганизации(?(ДанныеИБ = Неопределено, ПолученныеДанные.Организация, ДанныеИБ.Организация));
	
	ПолученныеДанные.Склад = СкладДляЗагрузки(ПолученныеДанные.Склад, КомпонентыОбмена.ПараметрыКонвертации);
	
	Если ДанныеИБ <> Неопределено Тогда
		// Заменяем свойства, которые получили из XDTO
		ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
		Если ПолученныеДанные.ОплатаПоставщикам.Количество() > 0 Тогда
			МассивКлючевыхПолей = Новый Массив;
	
			МассивКлючевыхПолей.Добавить("Контрагент");
			МассивКлючевыхПолей.Добавить("ДоговорКонтрагента");
			МассивКлючевыхПолей.Добавить("Сумма");
			МассивКлючевыхПолей.Добавить("КурсВзаиморасчетов");
			МассивКлючевыхПолей.Добавить("КратностьВзаиморасчетов");
			МассивКлючевыхПолей.Добавить("СуммаВзаиморасчетов");
			МассивКлючевыхПолей.Добавить("Содержание");
			МассивКлючевыхПолей.Добавить("НомерВходящегоДокумента");
			МассивКлючевыхПолей.Добавить("ДатаВходящегоДокумента");
			
			ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
				ПолученныеДанные.ОплатаПоставщикам,
				ДанныеИБ.ОплатаПоставщикам,
				МассивКлючевыхПолей,
				"Сделка,ВидВходящегоДокумента, СчетУчетаРасчетовСКонтрагентом, СчетУчетаРасчетовПоАвансам");
			ДанныеИБ.ОплатаПоставщикам.Загрузить(ПолученныеДанные.ОплатаПоставщикам.Выгрузить());
		КонецЕсли;
		ДанныеИБ.ОплатаПоставщикам.Загрузить(ПолученныеДанные.ОплатаПоставщикам.Выгрузить());
	
		Если ДанныеИБ.Товары.Количество() > 0 Тогда
			//Товары
			МассивКлючевыхПолей = Новый Массив;
			МассивКлючевыхПолей.Добавить("Номенклатура");
			МассивКлючевыхПолей.Добавить("Поставщик");
			МассивКлючевыхПолей.Добавить("Количество");
			МассивКлючевыхПолей.Добавить("Сумма");
			МассивКлючевыхПолей.Добавить("Цена");
			МассивКлючевыхПолей.Добавить("СтавкаНДС");
			МассивКлючевыхПолей.Добавить("СуммаНДС");
			МассивКлючевыхПолей.Добавить("ПредъявленСФ");
			МассивКлючевыхПолей.Добавить("ДатаСФ");
			МассивКлючевыхПолей.Добавить("НомерСФ");
			МассивКлючевыхПолей.Добавить("НомерВходящегоДокумента");
			МассивКлючевыхПолей.Добавить("ДатаВходящегоДокумента");
	
			ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
				ПолученныеДанные.Товары,
				ДанныеИБ.Товары,
				МассивКлючевыхПолей,
				"ВидВходящегоДокумента, СчетУчетаБУ, СчетУчетаНДС, СчетФактура");
		КонецЕсли;
		ДанныеИБ.Товары.Загрузить(ПолученныеДанные.Товары.Выгрузить());
	
		Если ДанныеИБ.Прочее.Количество() > 0 Тогда
			//Прочее
			МассивКлючевыхПолей = Новый Массив;
			МассивКлючевыхПолей.Добавить("Номенклатура");
			МассивКлючевыхПолей.Добавить("Поставщик");
			МассивКлючевыхПолей.Добавить("Содержание");
			МассивКлючевыхПолей.Добавить("Сумма");
			МассивКлючевыхПолей.Добавить("СтавкаНДС");
			МассивКлючевыхПолей.Добавить("СуммаНДС");
			МассивКлючевыхПолей.Добавить("ПредъявленСФ");
			МассивКлючевыхПолей.Добавить("ДатаСФ");
			МассивКлючевыхПолей.Добавить("НомерСФ");
			МассивКлючевыхПолей.Добавить("НомерВходящегоДокумента");
			МассивКлючевыхПолей.Добавить("ДатаВходящегоДокумента");
	
			ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
				ПолученныеДанные.Прочее,
				ДанныеИБ.Прочее,
				МассивКлючевыхПолей,
				"ВидВходящегоДокумента, СчетФактура, СчетЗатратБУ, СубконтоЗатратБУ1, СубконтоЗатратБУ2, СубконтоЗатратБУ3, СчетЗатратНУ, СубконтоЗатратНУ1, СубконтоЗатратНУ2, СубконтоЗатратНУ3, СчетУчетаНДС");
		КонецЕсли;
		ДанныеИБ.Прочее.Загрузить(ПолученныеДанные.Прочее.Выгрузить());
	
		//Выданные авансы
		ДанныеИБ.ВыданныеАвансы.Загрузить(ПолученныеДанные.ВыданныеАвансы.Выгрузить());
	
		ПолученныеДанные = Неопределено;
				
	Иначе
		
		ОрганизацияЯвляетсяПлательщикомКПН =  ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(ПолученныеДанные.Организация, ПолученныеДанные.Дата);
	
		Если Не ОрганизацияЯвляетсяПлательщикомКПН Тогда
			ПолученныеДанные.УчитыватьКПН = Ложь;
		Иначе
			ПолученныеДанные.УчитыватьКПН = Истина;
		КонецЕсли;	
	
		Если НЕ ПолученныеДанные.УчитыватьКПН Тогда
			ПолученныеДанные.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НеОтражаетсяВНУ;
		Иначе
			ПолученныеДанные.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ;
		КонецЕсли;
		
		ПолученныеДанные.УчитыватьНДС = ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНДС(ПолученныеДанные.Организация, ПолученныеДанные.Дата);
		
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_АвансовыйОтчет_Получение_ЗУП
Процедура ДобавитьПКО_Документ_АвансовыйОтчет_Получение_ЗУП(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_АвансовыйОтчет_Получение_ЗУП";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.АвансовыйОтчет;
	ПравилоКонвертации.ОбъектФормата = "Документ.АвансовыйОтчет";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_АвансовыйОтчет_Получение_ЗУП_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_АвансовыйОтчет_Получение_ЗУП_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ФизЛицо";
	НоваяСтрока.СвойствоФормата = "ПодотчетноеЛицо";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ФизическиеЛица_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетРасчетовСПодотчетнымЛицом";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_АвансовыйОтчет_Получение_ЗУП_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Проведен = Истина;
		
		ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);	
		
		РасшифровкаПлатежаXDTO = Неопределено;
		
		Если ДанныеXDTO.Свойство("РасшифровкаПлатежа", РасшифровкаПлатежаXDTO)
			И ЗначениеЗаполнено(РасшифровкаПлатежаXDTO) Тогда
			
			РасшифровкаПлатежаXDTOКопия = РасшифровкаПлатежаXDTO.Скопировать();
			
			РасшифровкаПлатежаXDTOКопия.Свернуть("ДатаВедомостиНаВыплатуЗарплаты, НомерВедомостиНаВыплатуЗарплаты");
			
			Для каждого СтрокаРасшифровки Из РасшифровкаПлатежаXDTOКопия Цикл
				
				СтрокиРасшифровки = РасшифровкаПлатежаXDTO.НайтиСтроки(Новый Структура("ДатаВедомостиНаВыплатуЗарплаты, НомерВедомостиНаВыплатуЗарплаты", СтрокаРасшифровки.ДатаВедомостиНаВыплатуЗарплаты, СтрокаРасшифровки.НомерВедомостиНаВыплатуЗарплаты));
				СуммаДокумента = 0;
				
				СтрокаТЧ = ПолученныеДанные.ВыплатаЗаработнойПлаты.Добавить();
				
				Запрос = Новый Запрос();
				Запрос.Текст =
				"ВЫБРАТЬ
				|	ЗарплатаКВыплатеОрганизаций.Ссылка,
				|	ЗарплатаКВыплатеОрганизаций.Номер,
				|	ЗарплатаКВыплатеОрганизаций.Дата
				|ИЗ
				|	Документ.ЗарплатаКВыплатеОрганизаций КАК ЗарплатаКВыплатеОрганизаций
				|ГДЕ
				|	ЗарплатаКВыплатеОрганизаций.Номер = &Номер
				|	И ЗарплатаКВыплатеОрганизаций.Дата = &Дата";
				
				Запрос.УстановитьПараметр("Дата", СтрокаРасшифровки.ДатаВедомостиНаВыплатуЗарплаты);
				Запрос.УстановитьПараметр("Номер", СтрокаРасшифровки.НомерВедомостиНаВыплатуЗарплаты);
				
				Выборка = Запрос.Выполнить().Выбрать();
				
				Если Выборка.Следующий() Тогда
					
					СтараяВедомость = Выборка.Ссылка.ПолучитьОбъект();
					СтараяВедомость.Дата = СтрокаРасшифровки.ДатаВедомостиНаВыплатуЗарплаты;
					СтараяВедомость.Номер = СтрокаРасшифровки.НомерВедомостиНаВыплатуЗарплаты;
					СтараяВедомость.Организация = ПолученныеДанные.Организация;
					СтараяВедомость.СуммаДокумента = ПолученныеДанные.СуммаДокумента;
					СтараяВедомость.СпособВыплаты = Перечисления.СпособыВыплатыЗарплаты.ЧерезКассу;
					СтараяВедомость.ПериодНачисленияЗарплаты = НачалоМесяца(ПолученныеДанные.Дата);
					СтараяВедомость.ВидРасчета = Перечисления.СпособыРасчетаСуммКВыплате.ЗарплатаЗаМесяц;
					СтараяВедомость.СпособРасчетаСуммКВыплате = Перечисления.СпособыРасчетаСуммКВыплате.ЗарплатаЗаМесяц;
					СтараяВедомость.Ответственный = ПолученныеДанные.Ответственный;
					
					СтараяВедомость.Зарплата.Очистить();
					Для каждого СтрокаВедомости Из СтрокиРасшифровки Цикл
						СтрокаТЧЗарплата = СтараяВедомость.Зарплата.Добавить();
						Если НЕ ЗначениеЗаполнено(СтрокаВедомости.Сотрудник) Тогда
							СтрокаТЧЗарплата.Физлицо = ФизическоеЛицоПоУмолчанию();
						Иначе
							СтрокаТЧЗарплата.Физлицо = ФизическоеЛицоДляЗагрузки(СтрокаВедомости.Сотрудник);
						КонецЕсли;
						СтрокаТЧЗарплата.Сумма = СтрокаВедомости.Сумма;
						СтрокаТЧЗарплата.СуммаКВыплате = СтрокаВедомости.Сумма;
						СтрокаТЧЗарплата.ВыплаченностьЗарплаты = Перечисления.ВыплаченностьЗарплаты.Выплачено;
						СуммаДокумента = СуммаДокумента + СтрокаВедомости.Сумма;
					КонецЦикла;
					
					СтараяВедомость.Записать();
					Ведомость = СтараяВедомость.Ссылка;
					
				Иначе
					НоваяВедомость  = Документы.ЗарплатаКВыплатеОрганизаций.СоздатьДокумент();
					НоваяВедомость.Дата = СтрокаРасшифровки.ДатаВедомостиНаВыплатуЗарплаты;
					НоваяВедомость.Номер = СтрокаРасшифровки.НомерВедомостиНаВыплатуЗарплаты;
					НоваяВедомость.Организация = ПолученныеДанные.Организация;
					НоваяВедомость.СуммаДокумента = ПолученныеДанные.СуммаДокумента;
					НоваяВедомость.СпособВыплаты = Перечисления.СпособыВыплатыЗарплаты.ЧерезКассу;
					НоваяВедомость.ПериодНачисленияЗарплаты = НачалоМесяца(ПолученныеДанные.Дата);
					НоваяВедомость.ВидРасчета = Перечисления.СпособыРасчетаСуммКВыплате.ЗарплатаЗаМесяц;
					НоваяВедомость.СпособРасчетаСуммКВыплате = Перечисления.СпособыРасчетаСуммКВыплате.ЗарплатаЗаМесяц;
					НоваяВедомость.Ответственный = ПолученныеДанные.Ответственный;
					Для каждого СтрокаВедомости Из СтрокиРасшифровки Цикл
						СтрокаТЧЗарплата = НоваяВедомость.Зарплата.Добавить();
						Если НЕ ЗначениеЗаполнено(СтрокаВедомости.Сотрудник) Тогда
							СтрокаТЧЗарплата.Физлицо = ФизическоеЛицоПоУмолчанию();
						Иначе
							СтрокаТЧЗарплата.Физлицо = ФизическоеЛицоДляЗагрузки(СтрокаВедомости.Сотрудник);
						КонецЕсли;
						СтрокаТЧЗарплата.Сумма = СтрокаВедомости.Сумма;
						СтрокаТЧЗарплата.СуммаКВыплате = СтрокаВедомости.Сумма;
						СтрокаТЧЗарплата.ВыплаченностьЗарплаты = Перечисления.ВыплаченностьЗарплаты.Выплачено;
						СуммаДокумента = СуммаДокумента + СтрокаВедомости.Сумма;
					КонецЦикла;
					
					НоваяВедомость.Записать();
					Ведомость = НоваяВедомость.Ссылка;
					
				КонецЕсли;
				
				СтрокаТЧ.Ведомость = Ведомость; 
				СтрокаТЧ.СуммаКВыплате = СуммаДокумента;
			КонецЦикла;
		КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_АвансовыйОтчет_Получение_ЗУП_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УстановкаУчетнойПолитикиОрганизации(?(ДанныеИБ = Неопределено, ПолученныеДанные.Организация, ДанныеИБ.Организация));
	
	ПолученныеДанные.СчетРасчетовСПодотчетнымЛицом = ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПодотчетныхЛиц;
	
	Если ДанныеИБ = Неопределено Тогда
		
		ОрганизацияЯвляетсяПлательщикомКПН =  ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(ПолученныеДанные.Организация, ПолученныеДанные.Дата);
	
		Если Не ОрганизацияЯвляетсяПлательщикомКПН Тогда
			ПолученныеДанные.УчитыватьКПН = Ложь;
		Иначе
			ПолученныеДанные.УчитыватьКПН = Истина;
		КонецЕсли;	
	
		Если НЕ ПолученныеДанные.УчитыватьКПН Тогда
			ПолученныеДанные.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НеОтражаетсяВНУ;
		Иначе
			ПолученныеДанные.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ;
		КонецЕсли;
		
		ПолученныеДанные.УчитыватьНДС = ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНДС(ПолученныеДанные.Организация, ПолученныеДанные.Дата);
		
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ВозвратТоваровОтПокупателя
Процедура ДобавитьПКО_Документ_ВозвратТоваровОтПокупателя(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ВозвратТоваровОтПокупателя";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ВозвратТоваровОтПокупателя;
	ПравилоКонвертации.ОбъектФормата = "Документ.ВозвратТоваровОтПокупателя";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_ВозвратТоваровОтПокупателя_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ВозвратТоваровОтПокупателя_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_ВозвратТоваровОтПокупателя";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КратностьВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "КратностьВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КурсВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "КурсВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Склад";
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаВключаетНДС";
	НоваяСтрока.СвойствоФормата = "СуммаВключаетНДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоговорКонтрагента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДокументОснование";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Сделка";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетУчетаРасчетовСКонтрагентом";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Коэффициент";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Себестоимость";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетУчетаБУ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_ВозвратТоваровОтПокупателя_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	
	ДобавитьДоговорВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ПолученныеДанные.Проведен = Истина;
	
	//Документ реализации
	ДокументРеализации = Неопределено;
	Если ДанныеXDTO.Свойство("ДокументРеализации") Тогда
		ДокументРеализации = ДанныеXDTO.ДокументРеализации;
	КонецЕсли;
	Если ЗначениеЗаполнено(ДокументРеализации) Тогда
		ИмяПКО = "Документ_РеализацияТоваровУслуг";
		ТипДокументаРеализации = ДокументРеализации.ТипЗначения;
		
		ПолученныеДанные.ДополнительныеСвойства.Вставить(
				"Сделка", Новый Структура("Значение,ИмяПКО", ДокументРеализации, ИмяПКО));
				
		ПолученныеДанные.ДополнительныеСвойства.Вставить(
				"ДокументОснование", Новый Структура("Значение, ИмяПКО", ДокументРеализации, ИмяПКО));			
	КонецЕсли;
	
	//Товары
	МассивСтрокТовары = Новый Массив;
	Если ДанныеXDTO.Свойство("Товары")
		И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполнения.Вставить("Количество", "Количество");
		ПравилаЗаполнения.Вставить("Цена", "Цена");
		ПравилаЗаполнения.Вставить("Сумма", "Сумма");
		ПравилаЗаполнения.Вставить("СтавкаНДС", "СтавкаНДС");
		ПравилаЗаполнения.Вставить("СуммаНДС", "СуммаНДС");
		ПравилаЗаполнения.Вставить("Себестоимость", "Себестоимость");
		ПравилаЗаполнения.Вставить("ЕдиницаИзмерения", "ЕдиницаИзмерения");
		
		ПравилаЗаполненияТара = Новый Соответствие;
		ПравилаЗаполненияТара.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполненияТара.Вставить("Количество", "Количество");
		ПравилаЗаполненияТара.Вставить("Цена", "Цена");
		ПравилаЗаполненияТара.Вставить("Сумма", "Сумма");
		
		Для Каждого Строка Из ДанныеXDTO.Товары Цикл
	
			ТекТипЗапасов = "";
			Если ЗначениеЗаполнено(Строка.ТипЗапасов) Тогда
				ТекТипЗапасов = Строка.ТипЗапасов.Значение;
			КонецЕсли;
				СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
				СтруктураДанныхСтроки.Вставить("Коэффициент",1);
	            
	  			// Счет учета заполняется сразу, если это комиссионный товар,
				// и автоматически после загрузки всех данных - в остальных случаях
				Если  ТекТипЗапасов = "КомиссионныеТовары" Тогда
					СтруктураДанныхСтроки.Вставить("СчетУчетаБУ",ПланыСчетов.Типовой.ПустаяСсылка()); 
					СтруктураДанныхСтроки.Вставить("ПереданныеСчетУчетаБУ",ПланыСчетов.Типовой.ПустаяСсылка()); 
				КонецЕсли;
				
				ОбработатьСтавкуНДСПриПолучении(Строка, СтруктураДанныхСтроки, КомпонентыОбмена.ПараметрыКонвертации);
				
				МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
		Если МассивСтрокТовары.Количество() > 0 Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_ВозвратТоваровОтПокупателя_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УстановкаУчетнойПолитикиОрганизации(?(ДанныеИБ = Неопределено, ПолученныеДанные.Организация, ДанныеИБ.Организация));
	
	ПолученныеДанные.Склад = СкладДляЗагрузки(ПолученныеДанные.Склад, КомпонентыОбмена.ПараметрыКонвертации);
	
	Если ДанныеИБ = Неопределено Тогда
		
		ОрганизацияЯвляетсяПлательщикомКПН =  ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(ПолученныеДанные.Организация, ПолученныеДанные.Дата);
		
		Если Не ОрганизацияЯвляетсяПлательщикомКПН Тогда
			ПолученныеДанные.УчитыватьКПН = Ложь;
		Иначе
			ПолученныеДанные.УчитыватьКПН = Истина;
		КонецЕсли;	
	
		Если НЕ ПолученныеДанные.УчитыватьКПН Тогда
			ПолученныеДанные.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НеОтражаетсяВНУ;
		Иначе
			ПолученныеДанные.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ;
		КонецЕсли;
		
		ПолученныеДанные.УчитыватьНДС = ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНДС(ПолученныеДанные.Организация, ПолученныеДанные.Дата);
		
		Возврат;
		
	КонецЕсли;
	// Заменяем свойства, которые получили из XDTO
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
					
	//Товары
	МассивКлючевыхПолей = Новый Массив;
	МассивКлючевыхПолей.Добавить("Номенклатура");
	МассивКлючевыхПолей.Добавить("Количество");
	МассивКлючевыхПолей.Добавить("Сумма");
	МассивКлючевыхПолей.Добавить("Цена");
	МассивКлючевыхПолей.Добавить("СтавкаНДС");
	МассивКлючевыхПолей.Добавить("СуммаНДС");
	МассивКлючевыхПолей.Добавить("Себестоимость");
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.Товары,
		ДанныеИБ.Товары,
		МассивКлючевыхПолей,
		"СчетУчетаБУ,СчетДоходовБУ,СчетУчетаНДСПоРеализации");
	
	ДанныеИБ.Товары.Загрузить(ПолученныеДанные.Товары.Выгрузить());
	
	ПолученныеДанные = Неопределено;
КонецПроцедуры
#КонецОбласти
#Область Документ_ВозвратТоваровПоставщику
Процедура ДобавитьПКО_Документ_ВозвратТоваровПоставщику(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ВозвратТоваровПоставщику";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ВозвратТоваровПоставщику;
	ПравилоКонвертации.ОбъектФормата = "Документ.ВозвратТоваровПоставщику";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_ВозвратТоваровПоставщику_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ВозвратТоваровПоставщику_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_ВозвратТоваровПоставщику";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.СвойствоФормата = "ВидОперации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "ВидыОпераций_ВозвратПоставщику";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Грузополучатель";
	НоваяСтрока.СвойствоФормата = "Грузополучатель";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КратностьВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "КратностьВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КурсВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "КурсВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Сделка";
	НоваяСтрока.СвойствоФормата = "ДокументПоступления";
	НоваяСтрока.ПравилоКонвертацииСвойства = "ПТиУ_ПоступлениеТоваровУслуг";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Склад";
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаВключаетНДС";
	НоваяСтрока.СвойствоФормата = "СуммаВключаетНДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоговорКонтрагента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Коэффициент";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НДСВидОборота";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "ПеречислениеСсылка_ВидыОборотовПоРеализации";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетУчетаБУ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_ВозвратТоваровПоставщику_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Проведен = Истина;
	
	МассивСтрокТовары = Новый Массив;
	ДобавитьДоговорВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	
	Если ДанныеXDTO.Свойство("Товары")
		И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
	
		//Товары
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполнения.Вставить("ЕдиницаИзмерения", "ЕдиницаИзмерения");
		ПравилаЗаполнения.Вставить("Количество", "Количество");
		ПравилаЗаполнения.Вставить("Цена", "Цена");
		ПравилаЗаполнения.Вставить("Сумма", "Сумма");
		ПравилаЗаполнения.Вставить("СтавкаНДС", "СтавкаНДС");
		ПравилаЗаполнения.Вставить("СуммаНДС", "СуммаНДС");
		ПравилаЗаполнения.Вставить("СтранаПроисхождения", "СтранаПроисхождения");
		ПравилаЗаполнения.Вставить("ВидОборота", "НДСВидОборота");
		
		Для Каждого Строка Из ДанныеXDTO.Товары Цикл
	
			ТипЗапасов = "";
			Если ЗначениеЗаполнено(Строка.ТипЗапасов) Тогда
				ТипЗапасов = СокрЛП(Строка.ТипЗапасов.Значение);
			КонецЕсли;
			
			//ДокументОприходования
			ДокументПоступления = Неопределено;
			Если ЗначениеЗаполнено(Строка.ДокументПоступления) Тогда
				ДокументПоступления = Строка.ДокументПоступления;
			ИначеЕсли ДанныеXDTO.Свойство("ДокументПоступления") И ЗначениеЗаполнено(ДанныеXDTO.ДокументПоступления) Тогда
				ДокументПоступления = ДанныеXDTO.ДокументПоступления;
			КонецЕсли;
			Если  ДокументПоступления <> Неопределено Тогда
				ИмяПКО = "ПТиУ_ПоступлениеТоваровУслуг";
				ТипДокументаПоступления = ДокументПоступления.ТипЗначения;
				Если Найти(ТипДокументаПоступления, "ВозвратТоваровОтПокупателя") > 0 Тогда
					ИмяПКО = "Документ_ВозвратТоваровОтПокупателя";
				ИначеЕсли Найти(ТипДокументаПоступления, "ОприходованиеТоваров") > 0 Тогда
					ИмяПКО = "Документ_ОприходованиеТоваров_Получение";
				ИначеЕсли Найти(ТипДокументаПоступления, "СборкаТоваров") > 0 Тогда
					ИмяПКО = "Документ_СборкаТоваров_Получение";
				ИначеЕсли Найти(ТипДокументаПоступления, "АвансовыйОтчет") > 0 Тогда
					ИмяПКО = "Документ_АвансовыйОтчет_Получение";
				КонецЕсли;
			КонецЕсли;		
			
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			СтруктураДанныхСтроки.Вставить("Коэффициент",1);
			Если ДокументПоступления <> Неопределено Тогда
				СтруктураДанныхСтроки.Вставить("ДокументОприходования",Новый Структура("Значение, ИмяПКО", ДокументПоступления, ИмяПКО)); 
			КонецЕсли;
				// Счет учета заполняется сразу, если это комиссионный товар,
			// и автоматически после загрузки всех данных - в остальных случаях
			Если  ТипЗапасов = "КомиссионныеТовары" Тогда
				СтруктураДанныхСтроки.Вставить("СчетУчета",ПланыСчетов.Типовой.ПустаяСсылка()); 
			КонецЕсли;
			
			ОбработатьСтавкуНДСПриПолучении(Строка, СтруктураДанныхСтроки, КомпонентыОбмена.ПараметрыКонвертации);
			
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
		Если МассивСтрокТовары.Количество() > 0 Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_ВозвратТоваровПоставщику_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УстановкаУчетнойПолитикиОрганизации(?(ДанныеИБ = Неопределено, ПолученныеДанные.Организация, ДанныеИБ.Организация));
	
	// Склад
	ПолученныеДанные.Склад = СкладДляЗагрузки(ПолученныеДанные.Склад, КомпонентыОбмена.ПараметрыКонвертации);
	
					
	#Область Мержевание
	Если ДанныеИБ = Неопределено Тогда
	
		ОрганизацияЯвляетсяПлательщикомКПН =  ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(ПолученныеДанные.Организация, ПолученныеДанные.Дата);
		
		Если Не ОрганизацияЯвляетсяПлательщикомКПН Тогда
			ПолученныеДанные.УчитыватьКПН = Ложь;
		Иначе
			ПолученныеДанные.УчитыватьКПН = Истина;
		КонецЕсли;	
	
		Если НЕ ПолученныеДанные.УчитыватьКПН Тогда
			ПолученныеДанные.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НеОтражаетсяВНУ;
		Иначе
			ПолученныеДанные.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ;
		КонецЕсли;
	
		ПолученныеДанные.УчитыватьНДС = ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНДС(ПолученныеДанные.Организация, ПолученныеДанные.Дата);
	
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПолученныеДанные.Склад) И ЗначениеЗаполнено(ДанныеИБ.Склад) Тогда
		ПолученныеДанные.Склад = ДанныеИБ.Склад;
	КонецЕсли;
	
	ОбнулениеСчетовУчетаРасчетовВДанныхИБ(ПолученныеДанные, ДанныеИБ);
	
	// Заменяем свойства, которые получили из XDTO
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
	
	//Товары
	МассивКлючевыхПолей = Новый Массив;
	МассивКлючевыхПолей.Добавить("Номенклатура");
	МассивКлючевыхПолей.Добавить("Количество");
	МассивКлючевыхПолей.Добавить("Сумма");
	МассивКлючевыхПолей.Добавить("Цена");
	МассивКлючевыхПолей.Добавить("СтавкаНДС");
	МассивКлючевыхПолей.Добавить("СуммаНДС");
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.Товары,
		ДанныеИБ.Товары,
		МассивКлючевыхПолей,
		"СчетУчетаБУ,СчетУчетаНДС");
	ДанныеИБ.Товары.Загрузить(ПолученныеДанные.Товары.Выгрузить());
	
	ПолученныеДанные = Неопределено;
	#КонецОбласти
КонецПроцедуры
#КонецОбласти
#Область Документ_ДепонированиеЗаработнойПлаты_ЗУП
Процедура ДобавитьПКО_Документ_ДепонированиеЗаработнойПлаты_ЗУП(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ДепонированиеЗаработнойПлаты_ЗУП";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ДепонированиеЗаработнойПлаты;
	ПравилоКонвертации.ОбъектФормата = "Документ.ЗаявкаНаРасходДСВыплатаЗарплаты";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_ДепонированиеЗаработнойПлаты_ЗУП_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Автор";
	НоваяСтрока.СвойствоФормата = "Автор";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "КтоЗаявил";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_ДепонированиеЗаработнойПлаты_ЗУП_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Проведен = Истина;
		
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ДатаВедомостиНаВыплатуЗарплаты", ДанныеXDTO.РасшифровкаПлатежа[0].ДатаВедомостиНаВыплатуЗарплаты);
		ПолученныеДанные.ДополнительныеСвойства.Вставить("НомерВедомостиНаВыплатуЗарплаты", ДанныеXDTO.РасшифровкаПлатежа[0].НомерВедомостиНаВыплатуЗарплаты);
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ФизическоеЛицо", ДанныеXDTO.РасшифровкаПлатежа[0].Сотрудник);
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Сумма", ДанныеXDTO.РасшифровкаПлатежа[0].Сумма);
		
		РасшифровкаПлатежаXDTO = Неопределено;
		
		Если ДанныеXDTO.Свойство("РасшифровкаПлатежа", РасшифровкаПлатежаXDTO)
			И ЗначениеЗаполнено(РасшифровкаПлатежаXDTO) Тогда
			
			РасшифровкаПлатежаXDTOКопия = РасшифровкаПлатежаXDTO.Скопировать();
	
			РасшифровкаПлатежаXDTOКопия.Свернуть("НомерВедомостиНаВыплатуЗарплаты, ДатаВедомостиНаВыплатуЗарплаты");
			
			Для каждого СтрокаРасшифровки Из РасшифровкаПлатежаXDTOКопия Цикл
				
				СтрокиРасшифровки = РасшифровкаПлатежаXDTO.НайтиСтроки(Новый Структура("НомерВедомостиНаВыплатуЗарплаты, ДатаВедомостиНаВыплатуЗарплаты", СтрокаРасшифровки.НомерВедомостиНаВыплатуЗарплаты, СтрокаРасшифровки.ДатаВедомостиНаВыплатуЗарплаты));
	
				СтрокаТЧ = ПолученныеДанные.ДепонированнаяЗаработнаяПлата.Добавить();
		
				Запрос = Новый Запрос();
				Запрос.Текст =
				"ВЫБРАТЬ
				|	ЗарплатаКВыплатеОрганизаций.Ссылка,
				|	ЗарплатаКВыплатеОрганизаций.Номер,
				|	ЗарплатаКВыплатеОрганизаций.Дата
				|ИЗ
				|	Документ.ЗарплатаКВыплатеОрганизаций КАК ЗарплатаКВыплатеОрганизаций
				|ГДЕ
				|	ЗарплатаКВыплатеОрганизаций.Номер = &Номер
				|	И ЗарплатаКВыплатеОрганизаций.Дата = &Дата";
		
				Запрос.УстановитьПараметр("Дата", СтрокаРасшифровки.ДатаВедомостиНаВыплатуЗарплаты);
				Запрос.УстановитьПараметр("Номер", СтрокаРасшифровки.НомерВедомостиНаВыплатуЗарплаты);
		
				Выборка = Запрос.Выполнить().Выбрать();
				
				СуммаДокумента = 0;
	
				Если Выборка.Следующий() Тогда
		
					СтараяВедомость = Выборка.Ссылка.ПолучитьОбъект();
					СтараяВедомость.Дата = СтрокаРасшифровки.ДатаВедомостиНаВыплатуЗарплаты;
					СтараяВедомость.Номер = СтрокаРасшифровки.НомерВедомостиНаВыплатуЗарплаты;
					СтараяВедомость.Организация = ПолученныеДанные.Организация;
					//СтараяВедомость.СуммаДокумента = ПолученныеДанные.СуммаДокумента;
					СтараяВедомость.СпособВыплаты = Перечисления.СпособыВыплатыЗарплаты.ЧерезКассу;
					СтараяВедомость.ПериодНачисленияЗарплаты = НачалоМесяца(ПолученныеДанные.Дата);
					СтараяВедомость.СпособРасчетаСуммКВыплате = Перечисления.СпособыРасчетаСуммКВыплате.ЗарплатаЗаМесяц;
					СтараяВедомость.Ответственный = ПолученныеДанные.Ответственный;
		
					СтараяВедомость.Зарплата.Очистить();
					Для каждого СтрокаВедомости Из СтрокиРасшифровки Цикл
						СтрокаТЧЗарплата = СтараяВедомость.Зарплата.Добавить();
						Если НЕ ЗначениеЗаполнено(СтрокаВедомости.Сотрудник) Тогда
							СтрокаТЧЗарплата.Физлицо = ФизическоеЛицоПоУмолчанию();
						Иначе
							СтрокаТЧЗарплата.Физлицо = ФизическоеЛицоДляЗагрузки(СтрокаВедомости.Сотрудник);
						КонецЕсли;
						СтрокаТЧЗарплата.Сумма = СтрокаВедомости.Сумма;
						СтрокаТЧЗарплата.СуммаКВыплате = СтрокаВедомости.Сумма;
						СтрокаТЧЗарплата.ВыплаченностьЗарплаты = Перечисления.ВыплаченностьЗарплаты.Задепонировано;
						
						СуммаДокумента = СуммаДокумента + СтрокаВедомости.Сумма;
					КонецЦикла; 
	
					СтараяВедомость.СуммаДокумента =  СуммаДокумента;
					СтараяВедомость.Записать();
					Ведомость = СтараяВедомость.Ссылка;
				  
				Иначе
					НоваяВедомость  = Документы.ЗарплатаКВыплатеОрганизаций.СоздатьДокумент();
					НоваяВедомость.Дата = СтрокаРасшифровки.ДатаВедомостиНаВыплатуЗарплаты;
					НоваяВедомость.Номер = СтрокаРасшифровки.НомерВедомостиНаВыплатуЗарплаты;
					НоваяВедомость.Организация = ПолученныеДанные.Организация;
					//НоваяВедомость.СуммаДокумента = ПолученныеДанные.СуммаДокумента;
					НоваяВедомость.СпособВыплаты = Перечисления.СпособыВыплатыЗарплаты.ЧерезКассу;
					НоваяВедомость.ПериодНачисленияЗарплаты = НачалоМесяца(ПолученныеДанные.Дата);
					НоваяВедомость.СпособРасчетаСуммКВыплате = Перечисления.СпособыРасчетаСуммКВыплате.ЗарплатаЗаМесяц;
					НоваяВедомость.Ответственный = ПолученныеДанные.Ответственный;
					
					Для каждого СтрокаВедомости Из СтрокиРасшифровки Цикл
						
						СтрокаТЧЗарплата = НоваяВедомость.Зарплата.Добавить();
						Если НЕ ЗначениеЗаполнено(СтрокаВедомости.Сотрудник) Тогда
							СтрокаТЧЗарплата.Физлицо = ФизическоеЛицоПоУмолчанию();
						Иначе
							СтрокаТЧЗарплата.Физлицо = ФизическоеЛицоДляЗагрузки(СтрокаВедомости.Сотрудник);
						КонецЕсли;
						СтрокаТЧЗарплата.Сумма = СтрокаВедомости.Сумма;
						СтрокаТЧЗарплата.СуммаКВыплате = СтрокаВедомости.Сумма;
						СуммаДокумента = СуммаДокумента + СтрокаВедомости.Сумма;
						СтрокаТЧЗарплата.ВыплаченностьЗарплаты = Перечисления.ВыплаченностьЗарплаты.Задепонировано;
						
					КонецЦикла;	
					НоваяВедомость.СуммаДокумента =  СуммаДокумента;
					НоваяВедомость.Записать();
					Ведомость = НоваяВедомость.Ссылка;
					                                            	
				КонецЕсли;
		
				СтрокаТЧ.Ведомость = Ведомость; 
				СтрокаТЧ.ДепонированнаяСумма = СуммаДокумента;
			   КонецЦикла;
		КонецЕсли
КонецПроцедуры
#КонецОбласти
#Область Документ_ЗаказКлиента_Получение
Процедура ДобавитьПКО_Документ_ЗаказКлиента_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ЗаказКлиента_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.СчетНаОплатуПокупателю;
	ПравилоКонвертации.ОбъектФормата = "Документ.ЗаказКлиента";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_ЗаказКлиента_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ЗаказКлиента_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "АдресДоставки";
	НоваяСтрока.СвойствоФормата = "АдресДоставки";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КратностьВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "КратностьВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КурсВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "КурсВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтруктурнаяЕдиница";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаВключаетНДС";
	НоваяСтрока.СвойствоФормата = "СуммаВключаетНДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ТипЦен";
	НоваяСтрока.СвойствоФормата = "ТипЦен";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ТипыЦен";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоговорКонтрагента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Склад";
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Получение";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Услуги", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Услуги;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Содержание";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_ЗаказКлиента_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Проведен = Истина;
	ДобавитьДоговорВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);	
	
	//Товары
	МассивСтрокТовары = Новый Массив;
	МассивСтрокВозвратнаяТара = Новый Массив;
	Если ДанныеXDTO.Свойство("Товары")
		И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
	
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполнения.Вставить("Количество", "Количество");
		ПравилаЗаполнения.Вставить("Сумма", "Сумма");
		ПравилаЗаполнения.Вставить("Цена", "Цена");
		ПравилаЗаполнения.Вставить("СтавкаНДС", "СтавкаНДС");
		ПравилаЗаполнения.Вставить("СуммаНДС", "СуммаНДС");
		
		Для Каждого Строка Из ДанныеXDTO.Товары Цикл
	
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			ОбработатьСтавкуНДСПриПолучении(Строка, СтруктураДанныхСтроки, КомпонентыОбмена.ПараметрыКонвертации);
	
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
		
		Если МассивСтрокТовары.Количество() > 0 Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
		КонецЕсли;
	КонецЕсли;
	//Услуги
	МассивСтрокУслуги = Новый Массив;
	Если ДанныеXDTO.Свойство("Услуги")
		И ЗначениеЗаполнено(ДанныеXDTO.Услуги) Тогда
	
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполнения.Вставить("Содержание", "Содержание");
		ПравилаЗаполнения.Вставить("Количество", "Количество");
		ПравилаЗаполнения.Вставить("Сумма", "Сумма");
		ПравилаЗаполнения.Вставить("Цена", "Цена");
		ПравилаЗаполнения.Вставить("СтавкаНДС", "СтавкаНДС");
		ПравилаЗаполнения.Вставить("СуммаНДС", "СуммаНДС");
		Для Каждого Строка Из ДанныеXDTO.Услуги Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			ОбработатьСтавкуНДСПриПолучении(Строка, СтруктураДанныхСтроки, КомпонентыОбмена.ПараметрыКонвертации);
			МассивСтрокУслуги.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
		Если МассивСтрокУслуги.Количество() > 0 Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("Услуги", МассивСтрокУслуги);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_ЗаказКлиента_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УстановкаУчетнойПолитикиОрганизации(?(ДанныеИБ = Неопределено, ПолученныеДанные.Организация, ДанныеИБ.Организация));
	ПолученныеДанные.Склад = СкладДляЗагрузки(ПолученныеДанные.Склад, КомпонентыОбмена.ПараметрыКонвертации);
	
	Если ДанныеИБ = Неопределено Тогда
		
		ПолученныеДанные.УчитыватьНДС = ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНДС(ПолученныеДанные.Организация, ПолученныеДанные.Дата);
		
		Возврат;
		
	КонецЕсли
КонецПроцедуры
#КонецОбласти
#Область Документ_ИнвентаризацияТоваровНаСкладе
Процедура ДобавитьПКО_Документ_ИнвентаризацияТоваровНаСкладе(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ИнвентаризацияТоваровНаСкладе";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ИнвентаризацияТоваровНаСкладе;
	ПравилоКонвертации.ОбъектФормата = "Документ.ИнвентаризацияТоваров";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_ИнвентаризацияТоваровНаСкладе_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_ИнвентаризацияТоваров";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Склад";
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Получение";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КоличествоУчет";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаУчет";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_ИнвентаризацияТоваровНаСкладе_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	МассивСтрокТовары = Новый Массив;
	Если ДанныеXDTO.Свойство("Товары")
		И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
	
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполнения.Вставить("ЕдиницаИзмерения", "ЕдиницаИзмерения");
		ПравилаЗаполнения.Вставить("Количество", "Количество");
		ПравилаЗаполнения.Вставить("Сумма", "Сумма");
		ПравилаЗаполнения.Вставить("Цена", "Цена");
		ПравилаЗаполнения.Вставить("КоличествоУчет", "КоличествоУчет");
		ПравилаЗаполнения.Вставить("СуммаУчет", "СуммаУчет");
		
		ПравилаЗаполненияТара = Новый Соответствие;
		ПравилаЗаполненияТара.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполненияТара.Вставить("Количество", "Количество");
		ПравилаЗаполненияТара.Вставить("Сумма", "Сумма");
		ПравилаЗаполненияТара.Вставить("Цена", "Цена");
		
		Для Каждого Строка Из ДанныеXDTO.Товары Цикл
			ТекТипЗапасов = "";
			Если ЗначениеЗаполнено(Строка.ТипЗапасов) Тогда
				ТекТипЗапасов = Строка.ТипЗапасов.Значение;
			КонецЕсли;
	
			Если ТекТипЗапасов = "ВозвратнаяТара" Тогда
			Иначе
				СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
				СтруктураДанныхСтроки.Вставить("Коэффициент",1);
				ОбработатьСтавкуНДСПриПолучении(Строка, СтруктураДанныхСтроки, КомпонентыОбмена.ПараметрыКонвертации); 
				МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
			КонецЕсли;
		КонецЦикла;
		
		Если МассивСтрокТовары.Количество() > 0 Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_КорректировкаДолга_Получение
Процедура ДобавитьПКО_Документ_КорректировкаДолга_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_КорректировкаДолга_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.КорректировкаДолга;
	ПравилоКонвертации.ОбъектФормата = "Документ.КорректировкаДолга";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_КорректировкаДолга_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_КорректировкаДолга_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_КорректировкаДолга";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.СвойствоФормата = "ВидОперации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "ВидыОпераций_КорректировкаДолга_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КонтрагентДебитор";
	НоваяСтрока.СвойствоФормата = "КонтрагентДебитор";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КонтрагентКредитор";
	НоваяСтрока.СвойствоФормата = "КонтрагентКредитор";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КратностьДокумента";
	НоваяСтрока.СвойствоФормата = "КратностьДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КурсДокумента";
	НоваяСтрока.СвойствоФормата = "КурсДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("СуммыДолга", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.СуммыДолга;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидЗадолженности";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоговорКонтрагента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КратностьВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КурсВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_КорректировкаДолга_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Проведен = Истина;
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	
	//Конвертации табличных частей
	СуммаДолга = Новый Массив;
	КонвертацииСвойств = Новый Соответствие;
	КонвертацииСвойств.Вставить("ДоговорКонтрагента", "Договор");
	КонвертацииСвойств.Вставить("Сумма", "Сумма");
	КонвертацииСвойств.Вставить("СуммаВзаиморасчетов", "СуммаВзаиморасчетов");
	КонвертацииСвойств.Вставить("КурсВзаиморасчетов", "КурсВзаиморасчетов");
	КонвертацииСвойств.Вставить("КратностьВзаиморасчетов", "КратностьВзаиморасчетов");
	
	Если ДанныеXDTO.Свойство("ДебиторскаяЗадолженность") И ЗначениеЗаполнено(ДанныеXDTO.ДебиторскаяЗадолженность) Тогда
		
		Для Каждого СтрокаXDTO Из ДанныеXDTO.ДебиторскаяЗадолженность Цикл
			СтруктураДанныхСтроки = Новый Структура;
			ЗаполнитьСтруктуруДанныхСтроки(КонвертацииСвойств, СтрокаXDTO, СтруктураДанныхСтроки);
			Если ЗначениеЗаполнено(СтрокаXDTO.Договор) И ТипЗнч(СтрокаXDTO.Договор) = Тип("Структура") И
				СтрокаXDTO.Договор.Свойство("Ссылка") = ЛОЖЬ Тогда
				СтруктураДанныхСтроки.Вставить("ДоговорКонтрагента", Новый Структура("Значение, ИмяПКО", СтрокаXDTO.Договор, "Справочник_ДоговорыКонтрагентов_ИзСтруктуры"));
			КонецЕсли;
			
			СтруктураДанныхСтроки.Вставить("ВидЗадолженности", Перечисления.ВидыЗадолженности.Дебиторская);
	
			СуммаДолга.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	Если ДанныеXDTO.Свойство("КредиторскаяЗадолженность") И ЗначениеЗаполнено(ДанныеXDTO.КредиторскаяЗадолженность) Тогда
		Для Каждого СтрокаXDTO Из ДанныеXDTO.КредиторскаяЗадолженность Цикл
			СтруктураДанныхСтроки = Новый Структура;
			ЗаполнитьСтруктуруДанныхСтроки(КонвертацииСвойств, СтрокаXDTO, СтруктураДанныхСтроки);
			Если ЗначениеЗаполнено(СтрокаXDTO.Договор) И ТипЗнч(СтрокаXDTO.Договор) = Тип("Структура") И
				СтрокаXDTO.Договор.Свойство("Ссылка") = ЛОЖЬ Тогда
				СтруктураДанныхСтроки.Вставить("ДоговорКонтрагента", Новый Структура("Значение, ИмяПКО", СтрокаXDTO.Договор, "Справочник_ДоговорыКонтрагентов_ИзСтруктуры"));
			КонецЕсли;
	
			СтруктураДанныхСтроки.Вставить("ВидЗадолженности", Перечисления.ВидыЗадолженности.Кредиторская);
	
			СуммаДолга.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	Если СуммаДолга.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("СуммыДолга", СуммаДолга);
	КонецЕсли;
	//Для операции "Списание задолженности" даже если задолженность кредиторская, на форму выводится контрагент-дебитор
	Если ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.СписаниеЗадолженности Тогда
		Если НЕ ЗначениеЗаполнено(ПолученныеДанные.КонтрагентДебитор) Тогда
			ПолученныеДанные.КонтрагентДебитор = ПолученныеДанные.КонтрагентКредитор;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_КорректировкаДолга_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УстановкаУчетнойПолитикиОрганизации(?(ДанныеИБ = Неопределено, ПолученныеДанные.Организация, ДанныеИБ.Организация));
	
	// Далее идет мержевание загруженной и существующей версии
	Если ДанныеИБ = Неопределено Тогда
		
		ОрганизацияЯвляетсяПлательщикомКПН =  ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(ПолученныеДанные.Организация, ПолученныеДанные.Дата);
		
		Если Не ОрганизацияЯвляетсяПлательщикомКПН Тогда
			ПолученныеДанные.УчитыватьКПН = Ложь;
		Иначе
			ПолученныеДанные.УчитыватьКПН = Истина;
		КонецЕсли;	
	
		Если НЕ ПолученныеДанные.УчитыватьКПН Тогда
			ПолученныеДанные.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НеОтражаетсяВНУ;
		Иначе
			ПолученныеДанные.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ;
		КонецЕсли;
	
		Возврат;
		
	КонецЕсли;
	
	// Переносим те свойства, которые указаны в ПКС
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
КонецПроцедуры
#КонецОбласти
#Область Документ_НачислениеОценочныхОбязательств_ЗУП
Процедура ДобавитьПКО_Документ_НачислениеОценочныхОбязательств_ЗУП(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_НачислениеОценочныхОбязательств_ЗУП";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ОтражениеЗарплатыВБухучете;
	ПравилоКонвертации.ОбъектФормата = "Документ.НачислениеОценочныхОбязательствПоОтпускам";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_НачислениеОценочныхОбязательств_ЗУП_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПериодРегистрации";
	НоваяСтрока.СвойствоФормата = "ПериодРегистрации";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЗарплатаОтраженаВБухучете";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Резерв";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ОценочныеОбязательства", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ОценочныеОбязательства;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ПодразделенияОрганизаций";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СпособОтраженияЗарплатыВБухучете";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СпособыОтраженияЗарплатыВБухУчете_П_ЗУП";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтруктурноеПодразделение";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ПодразделенияОрганизаций";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаРезерва";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаРезерваОППВ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаРезерваОтчисленияОСМС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаРезерваСН";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаРезерваСО";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ФизическоеЛицо";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ФизическиеЛицаГруппа_Отправка";

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_НачислениеОценочныхОбязательств_ЗУП_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Проведен = Истина;
	ПолученныеДанные.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийОтражениеЗарплатыВБухучете.ОтражениеОценочныхОбязательств");
	
	Запрос = Новый Запрос;
	Запрос.Текст =  "ВЫБРАТЬ
	|	Резервы.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Резервы КАК Резервы
	|ГДЕ
	|	Резервы.ВидРезерва = &ВидРезерва";
	
	Запрос.УстановитьПараметр("ВидРезерва", ПредопределенноеЗначение("Перечисление.ВидыРезервов.ПоВознаграждениямРаботникам"));
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий()  Тогда
		Резерв = Выборка.Ссылка.ПолучитьОбъект();
		ПолученныеДанные.Резерв = Резерв.Ссылка;	
	Иначе
		НовыйРезерв  = Справочники.Резервы.СоздатьЭлемент();
		НовыйРезерв.Наименование = НСтр("ru = 'Резервы по заработной плате'");
		НовыйРезерв.ВидРезерва = ПредопределенноеЗначение("Перечисление.ВидыРезервов.ПоВознаграждениямРаботникам");
		
		НовыйРезерв.Записать();
		ПолученныеДанные.Резерв = НовыйРезерв.Ссылка;
	КонецЕсли; 
	
	// ОценочныеОбязательства
	ОценочныеОбязательстваXDTO = Неопределено;
	Если ДанныеXDTO.Свойство("ОценочныеОбязательства", ОценочныеОбязательстваXDTO)
		И ЗначениеЗаполнено(ОценочныеОбязательстваXDTO) Тогда
		
		МассивОценочныеОбязательства = Новый Массив;
		
		Для Каждого СтрокаОценочныеОбязательстваXDTO Из ОценочныеОбязательстваXDTO Цикл
		
			СтрокаОценочныеОбязательства = Новый Структура(
				"Подразделение, СтруктурноеПодразделение, ФизическоеЛицо,
				|СпособОтраженияЗарплатыВБухучете, СуммаРезерва, СуммаРезерваОППВ, СуммаРезерваСО, СуммаРезерваСН, СуммаРезерваОтчисленияОСМС");
			
			ЗаполнитьЗначенияСвойств(СтрокаОценочныеОбязательства, СтрокаОценочныеОбязательстваXDTO);
			СтрокаОценочныеОбязательства.СпособОтраженияЗарплатыВБухучете = СтрокаОценочныеОбязательстваXDTO.СпособОтраженияЗарплатыВФинансовомУчете;
			
			СтрокаОценочныеОбязательства.Подразделение = СтрокаОценочныеОбязательстваXDTO.ПодразделениеОрганизации; 
			
			СтрокаФизическоеЛицоXDTO = Новый Структура("ФизическоеЛицо");
			ЗаполнитьЗначенияСвойств(СтрокаФизическоеЛицоXDTO, СтрокаОценочныеОбязательстваXDTO);
			Если НЕ ЗначениеЗаполнено(СтрокаОценочныеОбязательства.ФизическоеЛицо) Тогда
				СтрокаОценочныеОбязательства.ФизическоеЛицо  = ФизическоеЛицоПоУмолчанию();
			Иначе
				СтрокаОценочныеОбязательства.ФизическоеЛицо  = ФизическоеЛицоДляЗагрузки(СтрокаОценочныеОбязательства.ФизическоеЛицо);
			КонецЕсли;
			
			МассивОценочныеОбязательства.Добавить(СтрокаОценочныеОбязательства);
		КонецЦикла;
		
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ОценочныеОбязательства", МассивОценочныеОбязательства);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ОперацияПоПлатежнойКарте_Получение
Процедура ДобавитьПКО_Документ_ОперацияПоПлатежнойКарте_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ОперацияПоПлатежнойКарте_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ОплатаОтПокупателяПлатежнойКартой;
	ПравилоКонвертации.ОбъектФормата = "Документ.ОперацияПоПлатежнойКарте";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_ОперацияПоПлатежнойКарте_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ОперацияПоПлатежнойКарте_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.СвойствоФормата = "ВидОперации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "ВидыОпераций_ОплатаПлатежнойКартой";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Эквайрер";
	НоваяСтрока.СвойствоФормата = "Эквайрер";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоговорКонтрагента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КратностьВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КурсВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтатьяДвиженияДенежныхСредств";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаПлатежа";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_ОперацияПоПлатежнойКарте_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Проведен = Истина;
	
	//ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийОплатаОтПокупателяПлатежнойКартой.ОплатаПокупателя;
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	
	МассивСтрокРасшифровка = Новый Массив;
	Если ДанныеXDTO.Свойство("РасшифровкаПлатежа")
		И ЗначениеЗаполнено(ДанныеXDTO.РасшифровкаПлатежа) 
		И ДанныеXDTO.РасшифровкаПлатежа.Количество() > 0 Тогда
		
		// Расшифровка платежа.
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Договор","ДоговорКонтрагента");
		ПравилаЗаполнения.Вставить("Сумма","СуммаПлатежа");
		ПравилаЗаполнения.Вставить("СуммаВзаиморасчетов", "СуммаВзаиморасчетов");
		ПравилаЗаполнения.Вставить("КурсВзаиморасчетов", "КурсВзаиморасчетов");
		ПравилаЗаполнения.Вставить("КратностьВзаиморасчетов", "КратностьВзаиморасчетов");
		ПравилаЗаполнения.Вставить("СтавкаНДС", "СтавкаНДС");
		ПравилаЗаполнения.Вставить("СуммаНДС", "СуммаНДС");
		ПравилаЗаполнения.Вставить("СтатьяДДС", "СтатьяДвиженияДенежныхСредств");
		
		Для Каждого Строка Из ДанныеXDTO.РасшифровкаПлатежа Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			Если ЗначениеЗаполнено(Строка.Договор)
				И ТипЗнч(Строка.Договор) = Тип("Структура")
				И Строка.Договор.Свойство("Ссылка") = ЛОЖЬ Тогда
				
				Инструкция = Новый Структура("Значение, ИмяПКО",
					Строка.Договор, "Справочник_ДоговорыКонтрагентов_ИзСтруктуры");
				СтруктураДанныхСтроки.Вставить("ДоговорКонтрагента", Инструкция);
			
			КонецЕсли;
			МассивСтрокРасшифровка.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	Если МассивСтрокРасшифровка.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("РасшифровкаПлатежа", МассивСтрокРасшифровка);
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_ОперацияПоПлатежнойКарте_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ДанныеДляЗаписиВИБ = ?(ДанныеИБ = Неопределено, ПолученныеДанные, ДанныеИБ);
	
	УстановкаУчетнойПолитикиОрганизации(ДанныеДляЗаписиВИБ.Организация);
	
	// ДоговорЭквайринга.
	ПараметрыДоговора = Новый Структура;
	ПараметрыДоговора.Вставить("Наименование",         НСтр("ru='Договор эквайринга'"));
	ПараметрыДоговора.Вставить("Организация",          ПолученныеДанные.Организация);
	ПараметрыДоговора.Вставить("Владелец",             ПолученныеДанные.Эквайрер);
	ПараметрыДоговора.Вставить("ВалютаВзаиморасчетов", ПолученныеДанные.ВалютаДокумента);
	ПараметрыДоговора.Вставить("ВидДоговора",          Перечисления.ВидыДоговоровКонтрагентов.Прочее);
	ДанныеДляЗаписиВИБ.ДоговорЭквайринга = ДоговорЭквайрингаСПараметрамиПоУмолчанию(ПараметрыДоговора);
	ДанныеДляЗаписиВИБ.ДоговорВзаиморасчетовЭквайрера = ДанныеДляЗаписиВИБ.ДоговорЭквайринга.ДоговорВзаиморасчетов;
	
	// ВидОплаты.
	Если Не ЗначениеЗаполнено(ДанныеДляЗаписиВИБ.ВидОплаты) Тогда
	
		ДанныеДляЗаписиВИБ.ВидОплаты = ВидОплатыПоУмолчанию(
			КомпонентыОбмена,
			ДанныеДляЗаписиВИБ.Организация,
			ДанныеДляЗаписиВИБ.ДоговорЭквайринга,
			Ложь);
		
	КонецЕсли;
	Если ДанныеИБ <> Неопределено Тогда
	
		// Заменяем свойства, которые получили из XDTO.
		ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
	
		// Восстанавливаем "затертые" данные.
	
		// РасшифровкаПлатежа.
		МассивКлючевыхПолей = Новый Массив;
		МассивКлючевыхПолей.Добавить("ДоговорКонтрагента");
		МассивКлючевыхПолей.Добавить("СуммаПлатежа");
		МассивКлючевыхПолей.Добавить("СуммаВзаиморасчетов");
		МассивКлючевыхПолей.Добавить("КурсВзаиморасчетов");
		МассивКлючевыхПолей.Добавить("КратностьВзаиморасчетов");
	
		ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
			ПолученныеДанные.РасшифровкаПлатежа,
			ДанныеИБ.РасшифровкаПлатежа,
			МассивКлючевыхПолей,
			"Сделка, СчетУчетаРасчетовСКонтрагентомБУ, СчетУчетаРасчетовПоАвансам, СтавкаНДС, СуммаНДС");
		ДанныеИБ.РасшифровкаПлатежа.Загрузить(ПолученныеДанные.РасшифровкаПлатежа.Выгрузить());
	
		ПолученныеДанные = Неопределено;
	
	Иначе
		ОрганизацияЯвляетсяПлательщикомКПН =  ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(ПолученныеДанные.Организация, ПолученныеДанные.Дата);
		
		Если Не ОрганизацияЯвляетсяПлательщикомКПН Тогда
			ПолученныеДанные.УчитыватьКПН = Ложь;
		Иначе
			ПолученныеДанные.УчитыватьКПН = Истина;
		КонецЕсли;	
		
		Если НЕ ПолученныеДанные.УчитыватьКПН Тогда
			ПолученныеДанные.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НеОтражаетсяВНУ;
		Иначе
			ПолученныеДанные.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ;
		КонецЕсли;
	КонецЕсли;
	
	// Заполнение счетов расчетов.
	Для Каждого СтрокаТЧ Из ДанныеДляЗаписиВИБ.РасшифровкаПлатежа Цикл
		
		Если ЗначениеЗаполнено(СтрокаТЧ.ДоговорКонтрагента)
			И (Не ЗначениеЗаполнено(СтрокаТЧ.СчетУчетаРасчетовСКонтрагентомБУ)
			Или Не ЗначениеЗаполнено(СтрокаТЧ.СчетУчетаРасчетовПоАвансам)) Тогда
			
			СтруктураСчетов = УправлениеВзаиморасчетамиСервер.ПолучитьСчетаРасчетовСКонтрагентом(
				ДанныеДляЗаписиВИБ.Организация, ДанныеДляЗаписиВИБ.Контрагент, СтрокаТЧ.ДоговорКонтрагента);
			
			Если Не ЗначениеЗаполнено(СтрокаТЧ.СчетУчетаРасчетовСКонтрагентомБУ) Тогда		
				СтрокаТЧ.СчетУчетаРасчетовСКонтрагентомБУ = СтруктураСчетов.СчетРасчетовПокупателя;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(СтрокаТЧ.СчетУчетаРасчетовПоАвансам) Тогда
				СтрокаТЧ.СчетУчетаРасчетовПоАвансам = СтруктураСчетов.СчетАвансовПокупателя;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ЗначениеЗаполнено(ДанныеДляЗаписиВИБ.СчетУчетаРасчетовСЭквайрером) Тогда
		Документы.ОплатаОтПокупателяПлатежнойКартой.ЗаполнитьСчетаРасчетовСЭквайером(ДанныеДляЗаписиВИБ);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ОприходованиеТоваров_Получение
Процедура ДобавитьПКО_Документ_ОприходованиеТоваров_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ОприходованиеТоваров_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ОприходованиеТоваров;
	ПравилоКонвертации.ОбъектФормата = "Документ.ОприходованиеТоваров";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_ОприходованиеТоваров_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ОприходованиеТоваров_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_ОприходованиеТоваров";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Основание";
	НоваяСтрока.СвойствоФормата = "Основание";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Склад";
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ТипЦен";
	НоваяСтрока.СвойствоФормата = "ТипЦен";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ТипыЦен";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Коэффициент";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетУчетаБУ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_ОприходованиеТоваров_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Проведен = Истина;
	
	//Товары
	Если НЕ (ДанныеXDTO.Свойство("Товары")
		И ЗначениеЗаполнено(ДанныеXDTO.Товары)) Тогда
		Возврат;
	КонецЕсли;
	
	МассивСтрокТовары = Новый Массив;
	
	ПравилаЗаполнения = Новый Соответствие;
	ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
	ПравилаЗаполнения.Вставить("ЕдиницаИзмерения", "ЕдиницаИзмерения");
	ПравилаЗаполнения.Вставить("Количество", "Количество");
	ПравилаЗаполнения.Вставить("Сумма", "Сумма");
	ПравилаЗаполнения.Вставить("Цена", "Цена");
	
	Для Каждого Строка Из ДанныеXDTO.Товары Цикл
		
		СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
		СтруктураДанныхСтроки.Вставить("Коэффициент",1);
		МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		
	КонецЦикла;
	
	Если МассивСтрокТовары.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_ОприходованиеТоваров_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УстановкаУчетнойПолитикиОрганизации(?(ДанныеИБ = Неопределено, ПолученныеДанные.Организация, ДанныеИБ.Организация));
	ОприходованиеТоваров_ПередЗаписью(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации, КонвертацияСвойств);
КонецПроцедуры
#КонецОбласти
#Область Документ_ОтражениеЗарплатыВБухучете_Получение_ЗУП
Процедура ДобавитьПКО_Документ_ОтражениеЗарплатыВБухучете_Получение_ЗУП(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ОтражениеЗарплатыВБухучете_Получение_ЗУП";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ОтражениеЗарплатыВБухучете;
	ПравилоКонвертации.ОбъектФормата = "Документ.ОтражениеЗарплатыВФинансовомУчете";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_ОтражениеЗарплатыВБухучете_Получение_ЗУП_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ОтражениеЗарплатыВБухучете_Получение_ЗУП_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Бухгалтер";
	НоваяСтрока.СвойствоФормата = "Бухгалтер";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПериодРегистрации";
	НоваяСтрока.СвойствоФормата = "ПериодРегистрации";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЗарплатаОтраженаВБухучете";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("НачисленнаяЗарплатаИВзносы", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.НачисленнаяЗарплатаИВзносы;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоговорКонтрагента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ООСМС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ОППВ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ПодразделенияОрганизаций";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СН";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СО";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СпособОтраженияЗарплатыВБухучете";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СпособыОтраженияЗарплатыВБухУчете_П_ЗУП";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтруктурноеПодразделение";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ПодразделенияОрганизаций";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ФизическоеЛицо";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ФизическиеЛица_Получение";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ПеняПоВзносамИОтчислениям", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ПеняПоВзносамИОтчислениям;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидПлатежа";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ПодразделенияОрганизаций";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СпособОтраженияЗарплатыВБухучете";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СпособыОтраженияЗарплатыВБухУчете_П_ЗУП";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтруктурноеПодразделение";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ПодразделенияОрганизаций";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ФизическоеЛицо";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ФизическиеЛица_Получение";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РегламентированныеУдержания", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РегламентированныеУдержания;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоговорКонтрагента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ПодразделенияОрганизаций";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтруктурноеПодразделение";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ПодразделенияОрганизаций";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ФизическоеЛицо";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ФизическиеЛица_Получение";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("УдержаннаяЗарплата", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.УдержаннаяЗарплата;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КонтрагентОтправитель";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ПодразделенияОрганизаций";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "РаботникОрганизации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ФизическиеЛица_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтруктурноеПодразделение";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ПодразделенияОрганизаций";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ФизическоеЛицо";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ФизическиеЛица_Получение";

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_ОтражениеЗарплатыВБухучете_Получение_ЗУП_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Проведен = Истина;
	ПолученныеДанные.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийОтражениеЗарплатыВБухучете.ОтражениеЗарплатыВзносовУдержаний");
	
	ВидыОперацийПоЗарплатеЗначения         	= Метаданные.Перечисления.ВидыОперацийПоЗарплате.ЗначенияПеречисления;
	ВидыПлатежаЗначения						= Метаданные.Перечисления.ВидыПлатежейВБюджетИФонды.ЗначенияПеречисления;
	
	ИспользуютсяРезервы = Ложь;
	
	// НачисленнаяЗарплатаИВзносы
	НачисленнаяЗарплатаИВзносыXDTO = Неопределено;
	Если ДанныеXDTO.Свойство("НачисленнаяЗарплатаИВзносы", НачисленнаяЗарплатаИВзносыXDTO)
		И ЗначениеЗаполнено(НачисленнаяЗарплатаИВзносыXDTO) Тогда
		
		МассивНачисленнаяЗарплатаИВзносы = Новый Массив;
		
		Для Каждого СтрокаНачисленнаяЗарплатаИВзносыXDTO Из НачисленнаяЗарплатаИВзносыXDTO Цикл
		
			СтрокаНачисленнаяЗарплатаИВзносы = Новый Структура(
				"ВидОперации, Подразделение, Контрагент, ДоговорКонтрагента, СтруктурноеПодразделение, ФизическоеЛицо,
				|СпособОтраженияЗарплатыВБухучете, Сумма, ОППВ, СО, СН, ООСМС");
			
			ЗаполнитьЗначенияСвойств(СтрокаНачисленнаяЗарплатаИВзносы, СтрокаНачисленнаяЗарплатаИВзносыXDTO);
			СтрокаНачисленнаяЗарплатаИВзносы.СпособОтраженияЗарплатыВБухучете = СтрокаНачисленнаяЗарплатаИВзносыXDTO.СпособОтраженияЗарплатыВФинансовомУчете;
			
			СтрокаНачисленнаяЗарплатаИВзносы.Подразделение = СтрокаНачисленнаяЗарплатаИВзносыXDTO.ПодразделениеОрганизации; 
			
			СтрокаФизическоеЛицоXDTO = Новый Структура("ФизическоеЛицо");
			ЗаполнитьЗначенияСвойств(СтрокаФизическоеЛицоXDTO, СтрокаНачисленнаяЗарплатаИВзносыXDTO);
			Если НЕ ЗначениеЗаполнено(СтрокаНачисленнаяЗарплатаИВзносы.ФизическоеЛицо) Тогда
				СтрокаНачисленнаяЗарплатаИВзносы.ФизическоеЛицо  = ФизическоеЛицоПоУмолчанию();
			Иначе
				СтрокаНачисленнаяЗарплатаИВзносы.ФизическоеЛицо  = ФизическоеЛицоДляЗагрузки(СтрокаНачисленнаяЗарплатаИВзносы.ФизическоеЛицо);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаНачисленнаяЗарплатаИВзносы.ВидОперации) Тогда
				ВидОперацииМД = ВидыОперацийПоЗарплатеЗначения.Найти(СтрокаНачисленнаяЗарплатаИВзносы.ВидОперации);
				Если Не ВидОперацииМД = Неопределено Тогда
					СтрокаНачисленнаяЗарплатаИВзносы.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.Получить(ВидыОперацийПоЗарплатеЗначения.Индекс(ВидОперацииМД));
				КонецЕсли;
			КонецЕсли;
			
			Если (СтрокаНачисленнаяЗарплатаИВзносы.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.ДоходыКонтрагентов
				ИЛИ СтрокаНачисленнаяЗарплатаИВзносы.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.ВыплатыБывшимСотрудникам
				ИЛИ СтрокаНачисленнаяЗарплатаИВзносы.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.Дивиденды)
		    	И ТипЗнч(СтрокаФизическоеЛицоXDTO.ФизическоеЛицо) = Тип("Структура") Тогда
		    	Если СтрокаФизическоеЛицоXDTO.ФизическоеЛицо.Свойство("ИНН") 
		    	  И ЗначениеЗаполнено(СтрокаФизическоеЛицоXDTO.ФизическоеЛицо.ИНН) Тогда
					МассивКонтрагенты = Справочники.Контрагенты.НайтиКонтрагентовПоНаименованиюБИНилиРНН(СтрокаФизическоеЛицоXDTO.ФизическоеЛицо.ФИО, СтрокаФизическоеЛицоXDTO.ФизическоеЛицо.ИНН, "");
					Если МассивКонтрагенты.Количество() > 0 Тогда
						Контрагент = МассивКонтрагенты[0];
						СтрокаНачисленнаяЗарплатаИВзносы.Контрагент		   = Контрагент;
						СтрокаНачисленнаяЗарплатаИВзносы.ДоговорКонтрагента = ОбщегоНазначенияБК.ПолучитьОсновнойДоговорКонтрагента(Контрагент);		
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
	
			Если НЕ ИспользуютсяРезервы 
				И (СтрокаНачисленнаяЗарплатаИВзносы.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.ЕжегодныйОтпускОценочныеОбязательства
			    ИЛИ СтрокаНачисленнаяЗарплатаИВзносы.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.ЕжегодныйОтпускОценочныеОбязательстваИРезервы
			    ИЛИ СтрокаНачисленнаяЗарплатаИВзносы.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.ЕжегодныйОтпускРезервы
			    ИЛИ СтрокаНачисленнаяЗарплатаИВзносы.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.КомпенсацияЕжегодногоОтпускаОценочныеОбязательства) Тогда
			   
			    ИспользуютсяРезервы = Истина;
		
			КонецЕсли;
			
			МассивНачисленнаяЗарплатаИВзносы.Добавить(СтрокаНачисленнаяЗарплатаИВзносы);
		КонецЦикла;
		
		ПолученныеДанные.ДополнительныеСвойства.Вставить("НачисленнаяЗарплатаИВзносы", МассивНачисленнаяЗарплатаИВзносы);
	КонецЕсли;
	
	Если ИспользуютсяРезервы Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =  "ВЫБРАТЬ
		|	Резервы.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Резервы КАК Резервы
		|ГДЕ
		|	Резервы.ВидРезерва = &ВидРезерва";
	
		Запрос.УстановитьПараметр("ВидРезерва", ПредопределенноеЗначение("Перечисление.ВидыРезервов.ПоВознаграждениямРаботникам"));
		Выборка = Запрос.Выполнить().Выбрать();
	
		Если Выборка.Следующий()  Тогда
			Резерв = Выборка.Ссылка.ПолучитьОбъект();
			ПолученныеДанные.Резерв = Резерв.Ссылка;	
		Иначе
			НовыйРезерв  = Справочники.Резервы.СоздатьЭлемент();
			НовыйРезерв.Наименование = НСтр("ru = 'Резервы по заработной плате'");
			НовыйРезерв.ВидРезерва = ПредопределенноеЗначение("Перечисление.ВидыРезервов.ПоВознаграждениямРаботникам");
			НовыйРезерв.Записать();
			ПолученныеДанные.Резерв = НовыйРезерв.Ссылка;
		КонецЕсли; 
	КонецЕсли;
	
	// УдержаннаяЗарплата, НачисленныеПроцентыПоЗаймам
	МассивУдержаннаяЗарплата = Новый Массив;
	МассивНачисленныеПроцентыПоЗаймам = Новый Массив;
	
	УдержаннаяЗарплатаXDTO = Неопределено;
	Если ДанныеXDTO.Свойство("УдержаннаяЗарплата", УдержаннаяЗарплатаXDTO)
		И ЗначениеЗаполнено(УдержаннаяЗарплатаXDTO) Тогда
		
		Для Каждого СтрокаУдержаннаяЗарплатаXDTO Из УдержаннаяЗарплатаXDTO Цикл
			СтрокаУдержаннаяЗарплата = Новый Структура("ВидОперации, Контрагент, Подразделение, Сумма, СтруктурноеПодразделение, ФизическоеЛицо, КонтрагентОтправитель, РаботникОрганизации");
			
			ЗаполнитьЗначенияСвойств(СтрокаУдержаннаяЗарплата, СтрокаУдержаннаяЗарплатаXDTO);
			
			СтрокаУдержаннаяЗарплата.Подразделение = СтрокаУдержаннаяЗарплатаXDTO.ПодразделениеОрганизации; 
	
			СтрокаФизическоеЛицоXDTO = Новый Структура("ФизическоеЛицо");
			ЗаполнитьЗначенияСвойств(СтрокаФизическоеЛицоXDTO, СтрокаУдержаннаяЗарплатаXDTO);
			Если НЕ ЗначениеЗаполнено(СтрокаУдержаннаяЗарплата.ФизическоеЛицо) Тогда
				СтрокаУдержаннаяЗарплата.ФизическоеЛицо  = ФизическоеЛицоПоУмолчанию();
			Иначе
				СтрокаУдержаннаяЗарплата.ФизическоеЛицо  = ФизическоеЛицоДляЗагрузки(СтрокаУдержаннаяЗарплата.ФизическоеЛицо);
			КонецЕсли;
			
			ВидОперацииМД = ВидыОперацийПоЗарплатеЗначения.Найти(СтрокаУдержаннаяЗарплата.ВидОперации);
			Если Не ВидОперацииМД = Неопределено Тогда
				СтрокаУдержаннаяЗарплата.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.Получить(ВидыОперацийПоЗарплатеЗначения.Индекс(ВидОперацииМД));
			КонецЕсли;
						
			Если (СтрокаУдержаннаяЗарплата.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.АлиментыПрочиеИсполнительныеЛистыКонтрагенты
				ИЛИ СтрокаУдержаннаяЗарплата.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.ВознаграждениеПлатежногоАгентаКонтрагенты)
		    	И ТипЗнч(СтрокаФизическоеЛицоXDTO.ФизическоеЛицо) = Тип("Структура") Тогда
		    	Если СтрокаФизическоеЛицоXDTO.ФизическоеЛицо.Свойство("ИНН") 
		    		И ЗначениеЗаполнено(СтрокаФизическоеЛицоXDTO.ФизическоеЛицо.ИНН) Тогда
					МассивКонтрагенты = Справочники.Контрагенты.НайтиКонтрагентовПоНаименованиюБИНилиРНН(СтрокаФизическоеЛицоXDTO.ФизическоеЛицо.ФИО, СтрокаФизическоеЛицоXDTO.ФизическоеЛицо.ИНН, "");
					Если МассивКонтрагенты.Количество() > 0 Тогда
						Контрагент = МассивКонтрагенты[0];
						СтрокаУдержаннаяЗарплата.КонтрагентОтправитель  = Контрагент;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если (СтрокаУдержаннаяЗарплата.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.ПогашениеЗаймов)
		    	И ТипЗнч(СтрокаФизическоеЛицоXDTO.ФизическоеЛицо) = Тип("Структура") Тогда
		    	Если СтрокаФизическоеЛицоXDTO.ФизическоеЛицо.Свойство("ИНН") 
		    		И ЗначениеЗаполнено(СтрокаФизическоеЛицоXDTO.ФизическоеЛицо.ИНН) Тогда
					МассивКонтрагенты = Справочники.Контрагенты.НайтиКонтрагентовПоНаименованиюБИНилиРНН(СтрокаФизическоеЛицоXDTO.ФизическоеЛицо.ФИО, СтрокаФизическоеЛицоXDTO.ФизическоеЛицо.ИНН, "");
					Если МассивКонтрагенты.Количество() > 0 Тогда
						Контрагент = МассивКонтрагенты[0];
						СтрокаУдержаннаяЗарплата.Контрагент  = Контрагент;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			МассивУдержаннаяЗарплата.Добавить(СтрокаУдержаннаяЗарплата);
		КонецЦикла;
	КонецЕсли;
	
	Если МассивУдержаннаяЗарплата.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("УдержаннаяЗарплата", МассивУдержаннаяЗарплата);
	КонецЕсли;
	
	// РегламентированныеУдержания
	РегламентированныеУдержанияXDTO = Неопределено;
	Если ДанныеXDTO.Свойство("РегламентированныеУдержания", РегламентированныеУдержанияXDTO)
		И ЗначениеЗаполнено(РегламентированныеУдержанияXDTO) Тогда
		
		МассивРегламентированныеУдержания = Новый Массив;
		
		Для Каждого СтрокаРегламентированныеУдержанияXDTO Из РегламентированныеУдержанияXDTO Цикл
		
			СтрокаРегламентированныеУдержания = Новый Структура(
				"ВидОперации, Подразделение, , Контрагент, ДоговорКонтрагента, СтруктурноеПодразделение, ФизическоеЛицо,
				|Сумма");
			
			ЗаполнитьЗначенияСвойств(СтрокаРегламентированныеУдержания, СтрокаРегламентированныеУдержанияXDTO);
			СтрокаРегламентированныеУдержания.Подразделение = СтрокаРегламентированныеУдержанияXDTO.ПодразделениеОрганизации;
			
			СтрокаФизическоеЛицоXDTO = Новый Структура("ФизическоеЛицо");
			ЗаполнитьЗначенияСвойств(СтрокаФизическоеЛицоXDTO, СтрокаРегламентированныеУдержанияXDTO);
			Если НЕ ЗначениеЗаполнено(СтрокаРегламентированныеУдержания.ФизическоеЛицо) Тогда
				СтрокаРегламентированныеУдержания.ФизическоеЛицо  = ФизическоеЛицоПоУмолчанию();
			Иначе
				СтрокаРегламентированныеУдержания.ФизическоеЛицо  = ФизическоеЛицоДляЗагрузки(СтрокаРегламентированныеУдержания.ФизическоеЛицо);
			КонецЕсли;
		
			Если ЗначениеЗаполнено(СтрокаРегламентированныеУдержания.ВидОперации) Тогда
				ВидОперацииМД = ВидыОперацийПоЗарплатеЗначения.Найти(СтрокаРегламентированныеУдержания.ВидОперации);
				Если Не ВидОперацииМД = Неопределено Тогда
					СтрокаРегламентированныеУдержания.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.Получить(ВидыОперацийПоЗарплатеЗначения.Индекс(ВидОперацииМД));
				КонецЕсли;
			КонецЕсли;
			
			Если (СтрокаРегламентированныеУдержания.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.ИПНДоходыКонтрагентов
			 ИЛИ СтрокаРегламентированныеУдержания.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.ОПВДоходыКонтрагентов
	 		 ИЛИ СтрокаРегламентированныеУдержания.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.ОПВРасчетыСБывшимиСотрудниками
			 ИЛИ СтрокаРегламентированныеУдержания.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.ВОСМСДоходыКонтрагентов
	 		 ИЛИ СтрокаРегламентированныеУдержания.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.ВОСМСРасчетыСБывшимиСотрудниками
			 ИЛИ СтрокаРегламентированныеУдержания.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.ИПНДивиденды
			 ИЛИ СтрокаРегламентированныеУдержания.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.ИПНРасчетыСБывшимиСотрудниками)
			 И ТипЗнч(СтрокаРегламентированныеУдержанияXDTO.ФизическоеЛицо) = Тип("Структура") Тогда
			 	Если СтрокаФизическоеЛицоXDTO.ФизическоеЛицо.Свойство("ИНН") 
		    		И ЗначениеЗаполнено(СтрокаФизическоеЛицоXDTO.ФизическоеЛицо.ИНН) Тогда
	
					МассивКонтрагенты = Справочники.Контрагенты.НайтиКонтрагентовПоНаименованиюБИНилиРНН(СтрокаРегламентированныеУдержанияXDTO.ФизическоеЛицо.ФИО, СтрокаРегламентированныеУдержанияXDTO.ФизическоеЛицо.ИНН, "");
					Если МассивКонтрагенты.Количество() > 0 Тогда
						Контрагент = МассивКонтрагенты[0];
						СтрокаРегламентированныеУдержания.Контрагент		 = Контрагент;
						СтрокаРегламентированныеУдержания.ДоговорКонтрагента = ОбщегоНазначенияБК.ПолучитьОсновнойДоговорКонтрагента(Контрагент);		
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
	
			МассивРегламентированныеУдержания.Добавить(СтрокаРегламентированныеУдержания);
		КонецЦикла;
		
		ПолученныеДанные.ДополнительныеСвойства.Вставить("РегламентированныеУдержания", МассивРегламентированныеУдержания);
	КонецЕсли;
	
	// ПеняПоВзносамИОтчислениям
	ПеняПоВзносамИОтчислениямXDTO = Неопределено;
	Если ДанныеXDTO.Свойство("ПеняПоВзносамИОтчислениям", ПеняПоВзносамИОтчислениямXDTO)
		И ЗначениеЗаполнено(ПеняПоВзносамИОтчислениямXDTO) Тогда
		
		МассивПеняПоВзносамИОтчислениям = Новый Массив;
		
		Для Каждого СтрокаПеняПоВзносамИОтчислениямXDTO Из ПеняПоВзносамИОтчислениямXDTO Цикл
		
			СтрокаПеняПоВзносамИОтчислениям = Новый Структура(
				"ВидОперации, ВидПлатежа, Подразделение, СтруктурноеПодразделение, ФизическоеЛицо,
				|Сумма, СпособОтраженияЗарплатыВБухучете");
			
			ЗаполнитьЗначенияСвойств(СтрокаПеняПоВзносамИОтчислениям, СтрокаПеняПоВзносамИОтчислениямXDTO);
			СтрокаПеняПоВзносамИОтчислениям.СпособОтраженияЗарплатыВБухучете = СтрокаПеняПоВзносамИОтчислениямXDTO.СпособОтраженияЗарплатыВФинансовомУчете;
	
			СтрокаПеняПоВзносамИОтчислениям.Подразделение = СтрокаПеняПоВзносамИОтчислениямXDTO.ПодразделениеОрганизации;
			
			СтрокаФизическоеЛицоXDTO = Новый Структура("ФизическоеЛицо");
			ЗаполнитьЗначенияСвойств(СтрокаФизическоеЛицоXDTO, СтрокаПеняПоВзносамИОтчислениямXDTO);
			Если НЕ ЗначениеЗаполнено(СтрокаПеняПоВзносамИОтчислениям.ФизическоеЛицо) Тогда
				СтрокаПеняПоВзносамИОтчислениям.ФизическоеЛицо  = ФизическоеЛицоПоУмолчанию();
			Иначе
				СтрокаПеняПоВзносамИОтчислениям.ФизическоеЛицо  = ФизическоеЛицоДляЗагрузки(СтрокаПеняПоВзносамИОтчислениям.ФизическоеЛицо);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаПеняПоВзносамИОтчислениям.ВидОперации) Тогда
				ВидОперацииМД = ВидыОперацийПоЗарплатеЗначения.Найти(СтрокаПеняПоВзносамИОтчислениям.ВидОперации);
				Если Не ВидОперацииМД = Неопределено Тогда
					СтрокаПеняПоВзносамИОтчислениям.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.Получить(ВидыОперацийПоЗарплатеЗначения.Индекс(ВидОперацииМД));
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаПеняПоВзносамИОтчислениям.ВидПлатежа) Тогда
				ВидПлатежаМД = ВидыПлатежаЗначения.Найти(СтрокаПеняПоВзносамИОтчислениям.ВидПлатежа);
				Если Не ВидПлатежаМД = Неопределено Тогда
					СтрокаПеняПоВзносамИОтчислениям.ВидПлатежа = Перечисления.ВидыПлатежейВБюджетИФонды.Получить(ВидыПлатежаЗначения.Индекс(ВидПлатежаМД));
				КонецЕсли;
			КонецЕсли;
			
			МассивПеняПоВзносамИОтчислениям.Добавить(СтрокаПеняПоВзносамИОтчислениям);
		КонецЦикла;
		
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ПеняПоВзносамИОтчислениям", МассивПеняПоВзносамИОтчислениям);
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_ОтражениеЗарплатыВБухучете_Получение_ЗУП_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если ЗначениеЗаполнено(ПолученныеДанные.Бухгалтер) Тогда
		ПолученныеДанные.ЗарплатаОтраженаВБухучете = Истина;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ОтчетБанкаПоОперациямЭквайринга_Получение
Процедура ДобавитьПКО_Документ_ОтчетБанкаПоОперациямЭквайринга_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ОтчетБанкаПоОперациямЭквайринга_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПлатежноеПоручениеВходящее;
	ПравилоКонвертации.ОбъектФормата = "Документ.ОтчетБанкаПоОперациямЭквайринга";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_ОтчетБанкаПоОперациямЭквайринга_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ОтчетБанкаПоОперациямЭквайринга_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_ПБДС";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВыписки";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Эквайрер";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетОрганизации";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоговорКонтрагента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов_ИзСтруктуры";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаПлатежа";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетУчетаРасчетовСКонтрагентомБУ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("ДатаВходящегоДокумента,НомерВходящегоДокумента");
КонецПроцедуры

Процедура ПКО_Документ_ОтчетБанкаПоОперациямЭквайринга_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ДанныеXDTO.Свойство("ДатаВыписки") И ЗначениеЗаполнено(ДанныеXDTO.ДатаВыписки) Тогда
		ПолученныеДанные.Проведен = Истина;
		ПолученныеДанные.Дата = ДанныеXDTO.ДатаВыписки;
	Иначе
		ПолученныеДанные.Дата = ДанныеXDTO.КлючевыеСвойства.Дата;
	КонецЕсли;
	ПолученныеДанные.Номер = Лев(ДанныеXDTO.КлючевыеСвойства.Номер, 5) + "Э" + Сред(ДанныеXDTO.КлючевыеСвойства.Номер, 7);
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочееПоступлениеБезналичныхДенежныхСредств;
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	
	МассивСтрокРасшифровка = Новый Массив;
	СтруктураДанныхСтроки = Новый Структура();
	СтруктураДанныхСтроки.Вставить("ДоговорКонтрагента", ДанныеXDTO.ДоговорЭквайринга);
	СтруктураДанныхСтроки.Вставить("СуммаВзаиморасчетов", ДанныеXDTO.Сумма);
	СтруктураДанныхСтроки.Вставить("СуммаПлатежа", ДанныеXDTO.Сумма);
	СтруктураДанныхСтроки.Вставить("СчетУчетаРасчетовСКонтрагентомБУ", ПланыСчетов.Типовой.КраткосрочнаяДебиторскаяЗадолженностьПокупателейИЗаказчиков);
	
	МассивСтрокРасшифровка.Добавить(СтруктураДанныхСтроки);
	ПолученныеДанные.ДополнительныеСвойства.Вставить("РасшифровкаПлатежа", МассивСтрокРасшифровка);
КонецПроцедуры

Процедура ПКО_Документ_ОтчетБанкаПоОперациямЭквайринга_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УстановкаУчетнойПолитикиОрганизации(?(ДанныеИБ = Неопределено, ПолученныеДанные.Организация, ДанныеИБ.Организация));
	
	// Далее идет мержевание загруженной и существующей версии
	Если ДанныеИБ = Неопределено Тогда
		
		ОрганизацияЯвляетсяПлательщикомКПН =  ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(ПолученныеДанные.Организация, ПолученныеДанные.Дата);
		
		Если Не ОрганизацияЯвляетсяПлательщикомКПН Тогда
			ПолученныеДанные.УчитыватьКПН = Ложь;
		Иначе
			ПолученныеДанные.УчитыватьКПН = Истина;
		КонецЕсли;	
	
		Если НЕ ПолученныеДанные.УчитыватьКПН Тогда
			ПолученныеДанные.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НеОтражаетсяВНУ;
		Иначе
			ПолученныеДанные.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ;
		КонецЕсли;
	
		Для Каждого СтрокаТабличнойЧасти Из ПолученныеДанные.РасшифровкаПлатежа Цикл
			СтрокаТабличнойЧасти.СчетУчетаРасчетовСКонтрагентомБУ = УправлениеВзаиморасчетамиСервер.ПолучитьСчетаРасчетовСКонтрагентом(ПолученныеДанные.Организация, ПолученныеДанные.Контрагент, СтрокаТабличнойЧасти.ДоговорКонтрагента)
		КонецЦикла;
		
	КонецЕсли;
	
	ПБДС_СБДС_ПолучениеСчетБанк(ПолученныеДанные);
КонецПроцедуры
#КонецОбласти
#Область Документ_ОтчетОРозничныхПродажах_Получение
Процедура ДобавитьПКО_Документ_ОтчетОРозничныхПродажах_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ОтчетОРозничныхПродажах_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ОтчетОРозничныхПродажах;
	ПравилоКонвертации.ОбъектФормата = "Документ.ОтчетОРозничныхПродажах";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_ОтчетОРозничныхПродажах_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ОтчетОРозничныхПродажах_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_ОРТ";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Касса";
	НоваяСтрока.СвойствоФормата = "Касса";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Кассы_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Склад";
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтатьяДвиженияДенежныхСредств";
	НоваяСтрока.СвойствоФормата = "СтатьяДДС";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаВключаетНДС";
	НоваяСтрока.СвойствоФормата = "СуммаВключаетНДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КратностьВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КурсВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ТипЦен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ТипыЦен";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Оплата", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Оплата;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОплаты";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаОплаты";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Коэффициент";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетУчетаБУ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Услуги", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Услуги;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Содержание";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_ОтчетОРозничныхПродажах_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Проведен = Истина;
	
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);  	
	
	//Товары
	МассивСтрокТовары = Новый Массив;
	Если ДанныеXDTO.Свойство("Товары")
		И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
	
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполнения.Вставить("ЕдиницаИзмерения", "ЕдиницаИзмерения");
		ПравилаЗаполнения.Вставить("Количество", "Количество");
		ПравилаЗаполнения.Вставить("Сумма", "Сумма");
		ПравилаЗаполнения.Вставить("Цена", "Цена");
		ПравилаЗаполнения.Вставить("СтавкаНДС", "СтавкаНДС");
		ПравилаЗаполнения.Вставить("СуммаНДС", "СуммаНДС");
		
		ПравилаЗаполненияТара = Новый Соответствие;
		ПравилаЗаполненияТара.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполненияТара.Вставить("Количество", "Количество");
		ПравилаЗаполненияТара.Вставить("Сумма", "Сумма");
		ПравилаЗаполненияТара.Вставить("Цена", "Цена");
		
		Для Каждого Строка Из ДанныеXDTO.Товары Цикл
			ТекТипЗапасов = "";
			Если ЗначениеЗаполнено(Строка.ТипЗапасов) Тогда
				ТекТипЗапасов = Строка.ТипЗапасов.Значение;
			КонецЕсли;
	
			Если ТекТипЗапасов = "ВозвратнаяТара" Тогда
			Иначе
				СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
				СтруктураДанныхСтроки.Вставить("Коэффициент",1);
				ОбработатьСтавкуНДСПриПолучении(Строка, СтруктураДанныхСтроки, КомпонентыОбмена.ПараметрыКонвертации); 
				МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
			КонецЕсли;
		КонецЦикла;
		
		Если МассивСтрокТовары.Количество() > 0 Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
		КонецЕсли;
	КонецЕсли;
	
	//Услуги
	//Для вида операции "Отгрузка без перехода права собственности" услуги загружаются по отдельному правилу
	
	МассивСтрокУслуги = Новый Массив;
	Если ДанныеXDTO.Свойство("Услуги")
		И ЗначениеЗаполнено(ДанныеXDTO.Услуги) Тогда
	
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполнения.Вставить("Содержание", "Содержание");
		ПравилаЗаполнения.Вставить("Количество", "Количество");
		ПравилаЗаполнения.Вставить("Сумма", "Сумма");
		ПравилаЗаполнения.Вставить("Цена", "Цена");
		ПравилаЗаполнения.Вставить("СтавкаНДС", "СтавкаНДС");
		ПравилаЗаполнения.Вставить("СуммаНДС", "СуммаНДС");
		Для Каждого Строка Из ДанныеXDTO.Услуги Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			ОбработатьСтавкуНДСПриПолучении(Строка, СтруктураДанныхСтроки, КомпонентыОбмена.ПараметрыКонвертации);
			МассивСтрокУслуги.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
		Если МассивСтрокУслуги.Количество() > 0 Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("Услуги", МассивСтрокУслуги);
		КонецЕсли;
	КонецЕсли;   
	
	МассивСтрокОплата = Новый Массив;
	Если ДанныеXDTO.Свойство("ОплатаПлатежнымиКартами")
		И ЗначениеЗаполнено(ДанныеXDTO.ОплатаПлатежнымиКартами) Тогда
	
		Для Каждого Строка Из ДанныеXDTO.ОплатаПлатежнымиКартами Цикл
			СтруктураДанныхСтроки = Новый Структура("СуммаОплаты", Строка.СуммаОплаты);
			
			Если ЗначениеЗаполнено(Строка.Эквайрер) Тогда
				ИмяПКО = "Справочник_Контрагенты_Получение";
				ПКОКонтрагент = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, ИмяПКО);
				Контрагент = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, Строка.Эквайрер,
											ПКОКонтрагент, "ПолучитьСсылку").Ссылка;
				СтруктураДанныхСтроки.Вставить("Контрагент", Контрагент);
				
				// ДоговорЭквайринга.
				ПараметрыДоговора = Новый Структура;
				ПараметрыДоговора.Вставить("Наименование",         НСтр("ru='Договор эквайринга'"));
				ПараметрыДоговора.Вставить("Организация",          ПолученныеДанные.Организация);
				ПараметрыДоговора.Вставить("Владелец",             Контрагент);
				ПараметрыДоговора.Вставить("ВалютаВзаиморасчетов", Константы.ВалютаРегламентированногоУчета.Получить());
				ПараметрыДоговора.Вставить("ВидДоговора",          Перечисления.ВидыДоговоровКонтрагентов.Прочее);
				ДоговорЭквайринга = ДоговорЭквайрингаСПараметрамиПоУмолчанию(ПараметрыДоговора);
				СтруктураДанныхСтроки.Вставить("ВидОплаты", ДоговорЭквайринга);			
			КонецЕсли;
			
			Если ДанныеXDTO.ОплатаПлатежнымиКартами.Колонки.Найти("ДоговорЭквайринга") <> Неопределено
				И ЗначениеЗаполнено(Строка.ДоговорЭквайринга)
				И ТипЗнч(Строка.ДоговорЭквайринга) = Тип("Структура") 
				И Строка.ДоговорЭквайринга.Свойство("Ссылка") Тогда
				// Если указана ссылка на договор, то используем переданный договор
				// Если ДоговорЭквайринга передан, но поле Ссылка не заполнена,
				// то используем договор эквайринга по умолчанию, так как те данные, которые переданы, дублируют данные в документе.
				
				ИмяПКО = "Справочник_ДоговорыКонтрагентов";
				// Конвертация договора
				ПКОДоговор = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, ИмяПКО);
				ДоговорКонтрагента = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, Строка.ДоговорЭквайринга,
											ПКОДоговор, "ПолучитьСсылку").Ссылка;
				СтруктураДанныхСтроки.Вставить("ДоговорКонтрагента", ДоговорКонтрагента);
			//ИначеЕсли СтруктураДанныхСтроки.Свойство("Контрагент") Тогда
			//	ДоговорКонтрагента = ДоговорЭквайринга(ПолученныеДанные.Организация, СтруктураДанныхСтроки.Контрагент);
			//	СтруктураДанныхСтроки.Вставить("ДоговорКонтрагента", ДоговорКонтрагента); 
			КонецЕсли;
			
			МассивСтрокОплата.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
		Если МассивСтрокОплата.Количество() > 0 Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("Оплата", МассивСтрокОплата);
		КонецЕсли;	
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_ОтчетОРозничныхПродажах_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УстановкаУчетнойПолитикиОрганизации(?(ДанныеИБ = Неопределено, ПолученныеДанные.Организация, ДанныеИБ.Организация));
	
	ПолученныеДанные.Склад = СкладДляЗагрузки(ПолученныеДанные.Склад, КомпонентыОбмена.ПараметрыКонвертации);
	
	Если ДанныеИБ = Неопределено Тогда
		
		ОрганизацияЯвляетсяПлательщикомКПН =  ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(ПолученныеДанные.Организация, ПолученныеДанные.Дата);
		
		Если Не ОрганизацияЯвляетсяПлательщикомКПН Тогда
			ПолученныеДанные.УчитыватьКПН = Ложь;
		Иначе
			ПолученныеДанные.УчитыватьКПН = Истина;
		КонецЕсли;	
	
		Если НЕ ПолученныеДанные.УчитыватьКПН Тогда
			ПолученныеДанные.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НеОтражаетсяВНУ;
		Иначе
			ПолученныеДанные.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ;
		КонецЕсли;
	
		ПолученныеДанные.УчитыватьНДС = ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНДС(ПолученныеДанные.Организация, ПолученныеДанные.Дата);
	
		Возврат;
	КонецЕсли;
	
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
		
	// Восстанавливаем "затертые" данные
	//Товары
	МассивКлючевыхПолей = Новый Массив;
	МассивКлючевыхПолей.Добавить("Номенклатура");
	МассивКлючевыхПолей.Добавить("ЕдиницаИзмерения");
	МассивКлючевыхПолей.Добавить("Количество");
	МассивКлючевыхПолей.Добавить("Сумма");
	МассивКлючевыхПолей.Добавить("Цена");
	МассивКлючевыхПолей.Добавить("СтавкаНДС");
	МассивКлючевыхПолей.Добавить("СуммаНДС");
	
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.Товары,
		ДанныеИБ.Товары,
		МассивКлючевыхПолей,
		"СчетУчетаБУ,СчетУчетаНДСПоРеализации,СчетДоходовБУ");
	ДанныеИБ.Товары.Загрузить(ПолученныеДанные.Товары.Выгрузить());
	
	//Услуги
	МассивКлючевыхПолей = Новый Массив;
	МассивКлючевыхПолей.Добавить("Номенклатура");
	МассивКлючевыхПолей.Добавить("Содержание");
	МассивКлючевыхПолей.Добавить("Количество");
	МассивКлючевыхПолей.Добавить("Сумма");
	МассивКлючевыхПолей.Добавить("Цена");
	МассивКлючевыхПолей.Добавить("СтавкаНДС");
	МассивКлючевыхПолей.Добавить("СуммаНДС");
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.Услуги,
		ДанныеИБ.Услуги,
		МассивКлючевыхПолей,
		"СчетУчетаНДСПоРеализации,СчетДоходовБУ");
	ДанныеИБ.Услуги.Загрузить(ПолученныеДанные.Услуги.Выгрузить());
	
	//Оплаты
	МассивКлючевыхПолей = Новый Массив;
	МассивКлючевыхПолей.Добавить("СуммаОплаты");
	МассивКлючевыхПолей.Добавить("ВидОплаты");
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.Оплата,
		ДанныеИБ.Оплата,
		МассивКлючевыхПолей,
		"ВидОплаты");
	ДанныеИБ.Оплата.Загрузить(ПолученныеДанные.Оплата.Выгрузить());
	
	ПолученныеДанные = Неопределено;
КонецПроцедуры
#КонецОбласти
#Область Документ_ОтчетПроизводстваЗаСмену_Получение
Процедура ДобавитьПКО_Документ_ОтчетПроизводстваЗаСмену_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ОтчетПроизводстваЗаСмену_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ОтчетПроизводстваЗаСмену;
	ПравилоКонвертации.ОбъектФормата = "Документ.ВыпускПродукции";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_ОтчетПроизводстваЗаСмену_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_Производство";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПодразделениеОрганизации";
	НоваяСтрока.СвойствоФормата = "ПодразделениеЗатрат";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Склад";
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ВозвратныеОтходы", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ВозвратныеОтходы;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Коэффициент";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Получение";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Продукция", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Продукция;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Коэффициент";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Спецификация";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СпецификацииНоменклатуры_Получение";

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_ОтчетПроизводстваЗаСмену_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Проведен = Истина;
	
	// ВозвратныеОтходы
	МассивСтрокВозвратныеОтходы = Новый Массив;
	Если ДанныеXDTO.Свойство("ВозвратныеОтходы")
		И ЗначениеЗаполнено(ДанныеXDTO.ВозвратныеОтходы) Тогда
	
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполнения.Вставить("ЕдиницаИзмерения", "ЕдиницаИзмерения");
		ПравилаЗаполнения.Вставить("Количество", "Количество");
		
		Для Каждого Строка Из ДанныеXDTO.ВозвратныеОтходы Цикл 
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			СтруктураДанныхСтроки.Вставить("Коэффициент", 1);
			МассивСтрокВозвратныеОтходы.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
		
		Если МассивСтрокВозвратныеОтходы.Количество() > 0 Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("ВозвратныеОтходы", МассивСтрокВозвратныеОтходы);
		КонецЕсли;
	КонецЕсли;
	
	// ВозвратныеОтходы
	МассивСтрокПродукция = Новый Массив;
	Если ДанныеXDTO.Свойство("Продукция")
		И ЗначениеЗаполнено(ДанныеXDTO.Продукция) Тогда
	
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполнения.Вставить("ЕдиницаИзмерения", "ЕдиницаИзмерения");
		ПравилаЗаполнения.Вставить("Количество", "Количество");
		ПравилаЗаполнения.Вставить("СпецификацияНоменклатуры", "Спецификация");
		
		Для Каждого Строка Из ДанныеXDTO.Продукция Цикл 
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			СтруктураДанныхСтроки.Вставить("Коэффициент", 1);
			МассивСтрокПродукция.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
		
		Если МассивСтрокПродукция.Количество() > 0 Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("Продукция", МассивСтрокПродукция);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ПБДСВзносыИОтчисления_Получение_ЗУП
Процедура ДобавитьПКО_Документ_ПБДСВзносыИОтчисления_Получение_ЗУП(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПБДСВзносыИОтчисления_Получение_ЗУП";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПлатежноеПоручениеВходящее;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПБДСВозвратВзносовИОтчислений";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_ПБДСВзносыИОтчисления_Получение_ЗУП_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПБДСВзносыИОтчисления_Получение_ЗУП_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_РКО";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВыписки";
	НоваяСтрока.СвойствоФормата = "ДатаВыписки";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НазначениеПлатежа";
	НоваяСтрока.СвойствоФормата = "НазначениеПлатежа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетКонтрагента";
	НоваяСтрока.СвойствоФормата = "БанковскийСчет";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетОрганизации";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Оплачено";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_ПБДСВзносыИОтчисления_Получение_ЗУП_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПБДС_СБДС_ПолучениеДатаПроведен(ПолученныеДанные, ДанныеXDTO);
		ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);	
		
		ВидОперацииВзносыОтчисления =  ДанныеXDTO.РасшифровкаПлатежа[0].ВидОперации;
		ПолученныеДанные.Оплачено = Истина;	
		Если ВидОперацииВзносыОтчисления = "СО"
			ИЛИ ВидОперацииВзносыОтчисления = "ВОСМС"
			ИЛИ ВидОперацииВзносыОтчисления = "ООСМС" Тогда
			ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратСоциальныхОтчислений;
															
		ИначеЕсли ВидОперацииВзносыОтчисления = "ОПВ"
					ИЛИ ВидОперацииВзносыОтчисления = "ОППВ" Тогда
			ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратПенсионныхВзносов;
		КонецЕсли;
		
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ДатаВедомостиНаВозвратЗарплаты", ДанныеXDTO.РасшифровкаПлатежа[0].ДатаВедомостиНаВозвратЗарплаты);
		ПолученныеДанные.ДополнительныеСвойства.Вставить("НомерВедомостиНаВозвратЗарплаты", ДанныеXDTO.РасшифровкаПлатежа[0].НомерВедомостиНаВозвратЗарплаты);
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ФизическоеЛицо", ДанныеXDTO.РасшифровкаПлатежа[0].Сотрудник);
		
		РасшифровкаПлатежаXDTO = Неопределено;
		
		Если ДанныеXDTO.Свойство("РасшифровкаПлатежа", РасшифровкаПлатежаXDTO)
			И ЗначениеЗаполнено(РасшифровкаПлатежаXDTO) Тогда
			
			РасшифровкаПлатежаXDTOКопия = РасшифровкаПлатежаXDTO.Скопировать();
	
			РасшифровкаПлатежаXDTOКопия.Свернуть("ДатаВедомостиНаВозвратЗарплаты, НомерВедомостиНаВозвратЗарплаты, ВидОперации, ВидПлатежа");
			Для каждого СтрокаРасшифровки Из РасшифровкаПлатежаXDTOКопия Цикл
				
				СтрокиРасшифровки = РасшифровкаПлатежаXDTO.НайтиСтроки(Новый Структура("ДатаВедомостиНаВозвратЗарплаты, НомерВедомостиНаВозвратЗарплаты", СтрокаРасшифровки.ДатаВедомостиНаВозвратЗарплаты, СтрокаРасшифровки.НомерВедомостиНаВозвратЗарплаты));
				
				Если СтрокаРасшифровки.ВидОперации = "СО" Тогда
					ВидОперацииДокумента = Перечисления.ВидыОперацийСОВозвратОтчислений.ВозвратОбязательныхСоциальныхОтчислений;
				ИначеЕсли СтрокаРасшифровки.ВидОперации = "ВОСМС" Тогда
					ВидОперацииДокумента = Перечисления.ВидыОперацийСОВозвратОтчислений.ВозвратВзносовОСМС;
				ИначеЕсли СтрокаРасшифровки.ВидОперации = "ООСМС" Тогда
					ВидОперацииДокумента = Перечисления.ВидыОперацийСОВозвратОтчислений.ВозвратОтчисленийОСМС;
				ИначеЕсли СтрокаРасшифровки.ВидОперации = "ОПВ" Тогда
					ВидОперацииДокумента =  Перечисления.ВидыОперацийОПВВозвратВзносов.ВозвратОбязательныхПенсионныхВзносов;
				Иначе
					ВидОперацииДокумента =  Перечисления.ВидыОперацийОПВВозвратВзносов.ВозвратОбязательныхПрофессиональныхПенсионныхВзносов;
				КонецЕсли;	
				
				Если СтрокаРасшифровки.ВидПлатежа = "Налог" Тогда
					ВидПлатежа = Перечисления.ВидыПлатежейВБюджетИФонды.Налог;
				ИначеЕсли СтрокаРасшифровки.ВидПлатежа = "НалогСам" Тогда
					ВидПлатежа = Перечисления.ВидыПлатежейВБюджетИФонды.НалогСам;
				ИначеЕсли СтрокаРасшифровки.ВидПлатежа = "НалогАкт" Тогда
					ВидПлатежа = Перечисления.ВидыПлатежейВБюджетИФонды.НалогАкт;
				ИначеЕсли СтрокаРасшифровки.ВидПлатежа = "ПениСам" Тогда
					ВидПлатежа = Перечисления.ВидыПлатежейВБюджетИФонды.ПениСам;
				ИначеЕсли СтрокаРасшифровки.ВидПлатежа = "ПениАкт" Тогда
					ВидПлатежа = Перечисления.ВидыПлатежейВБюджетИФонды.ПениАкт;
				КонецЕсли;
				
				СуммаДокумента = 0;
				Если ВидОперацииДокумента = Перечисления.ВидыОперацийСОВозвратОтчислений.ВозвратОбязательныхСоциальныхОтчислений
					ИЛИ ВидОперацииДокумента = Перечисления.ВидыОперацийСОВозвратОтчислений.ВозвратВзносовОСМС 
					ИЛИ ВидОперацииДокумента = Перечисления.ВидыОперацийСОВозвратОтчислений.ВозвратОтчисленийОСМС Тогда
					
					СтрокаТЧ = ПолученныеДанные.ВозвратСоциальныхОтчислений.Добавить();
					
					Запрос = Новый Запрос();
					Запрос.Текст =
					"ВЫБРАТЬ
					|	СОВозвратОтчислений.Ссылка,
					|	СОВозвратОтчислений.Номер,
					|	СОВозвратОтчислений.Дата
					|ИЗ
					|	Документ.СОВозвратОтчислений КАК СОВозвратОтчислений
					|ГДЕ
					|	СОВозвратОтчислений.Номер = &Номер
					|	И СОВозвратОтчислений.Дата = &Дата";
					
					Запрос.УстановитьПараметр("Дата", СтрокаРасшифровки.ДатаВедомостиНаВозвратЗарплаты);
					Запрос.УстановитьПараметр("Номер", СтрокаРасшифровки.НомерВедомостиНаВозвратЗарплаты);
					
					Выборка = Запрос.Выполнить().Выбрать();
					
					Если Выборка.Следующий() Тогда
						
						СтараяВедомость = Выборка.Ссылка.ПолучитьОбъект();
						СтараяВедомость.Дата = СтрокаРасшифровки.ДатаВедомостиНаВозвратЗарплаты;
						СтараяВедомость.Номер = СтрокаРасшифровки.НомерВедомостиНаВозвратЗарплаты;
						СтараяВедомость.Организация = ПолученныеДанные.Организация;
						СтараяВедомость.СуммаДокумента = ПолученныеДанные.СуммаДокумента;
						СтараяВедомость.ПериодРегистрации = ПолученныеДанные.ДатаВходящегоДокумента;
						СтараяВедомость.ВидПлатежа = ВидПлатежа;
						СтараяВедомость.ВидОперации = ВидОперацииДокумента;
						СтараяВедомость.Контрагент = ПолученныеДанные.Контрагент;
						СтараяВедомость.Ответственный = ПолученныеДанные.Ответственный;
						
						СтараяВедомость.СоциальныеОтчисления.Очистить();
						
						Для каждого СтрокаВедомости Из СтрокиРасшифровки Цикл
							
							СтрокаТЧЗарплата = СтараяВедомость.СоциальныеОтчисления.Добавить();
							Если НЕ ЗначениеЗаполнено(СтрокаВедомости.Сотрудник) Тогда
								СтрокаТЧЗарплата.Физлицо = ФизическоеЛицоПоУмолчанию();
							Иначе
								СтрокаТЧЗарплата.Физлицо = ФизическоеЛицоДляЗагрузки(СтрокаВедомости.Сотрудник);
							КонецЕсли;
							
							СтрокаТЧЗарплата.Сумма = СтрокаВедомости.Сумма;
							СуммаДокумента = СуммаДокумента + СтрокаВедомости.Сумма;
							
							СтараяВедомость.Записать();
							
						КонецЦикла;
						
						Ведомость = СтараяВедомость.Ссылка;
						
					Иначе
						НоваяВедомость  = Документы.СОВозвратОтчислений.СоздатьДокумент();
						НоваяВедомость.Дата = СтрокаРасшифровки.ДатаВедомостиНаВозвратЗарплаты;
						НоваяВедомость.Номер = СтрокаРасшифровки.НомерВедомостиНаВозвратЗарплаты;
						НоваяВедомость.Организация = ПолученныеДанные.Организация;
						НоваяВедомость.СуммаДокумента = ПолученныеДанные.СуммаДокумента;
						НоваяВедомость.ПериодРегистрации = ПолученныеДанные.ДатаВходящегоДокумента;
						НоваяВедомость.ВидПлатежа = ВидПлатежа;
						НоваяВедомость.ВидОперации = ВидОперацииДокумента;
						НоваяВедомость.Контрагент = ПолученныеДанные.Контрагент;
						НоваяВедомость.Ответственный = ПолученныеДанные.Ответственный;
									
						Для каждого СтрокаВедомости Из СтрокиРасшифровки Цикл
							
							СтрокаТЧЗарплата = НоваяВедомость.СоциальныеОтчисления.Добавить();
							Если НЕ ЗначениеЗаполнено(СтрокаВедомости.Сотрудник) Тогда
								СтрокаТЧЗарплата.Физлицо = ФизическоеЛицоПоУмолчанию();
							Иначе
								СтрокаТЧЗарплата.Физлицо = ФизическоеЛицоДляЗагрузки(СтрокаВедомости.Сотрудник);
							КонецЕсли;
							
							СтрокаТЧЗарплата.Сумма = СтрокаВедомости.Сумма;
							СуммаДокумента = СуммаДокумента + СтрокаВедомости.Сумма;
							
							НоваяВедомость.Записать();
							
						КонецЦикла;
						
						Ведомость = НоваяВедомость.Ссылка;
						
					КонецЕсли;
					
					СтрокаТЧ.Документ = Ведомость; 
					СтрокаТЧ.СуммаВозврата = СуммаДокумента; 
									
				Иначе
					
					СтрокаТЧ = ПолученныеДанные.ВозвратПенсионныхВзносов.Добавить();
					
					Запрос = Новый Запрос();
					Запрос.Текст =
					"ВЫБРАТЬ
					|	ОПВВозвратВзносов.Ссылка,
					|	ОПВВозвратВзносов.Номер,
					|	ОПВВозвратВзносов.Дата
					|ИЗ
					|	Документ.ОПВВозвратВзносов КАК ОПВВозвратВзносов
					|ГДЕ
					|	ОПВВозвратВзносов.Номер = &Номер
					|	И ОПВВозвратВзносов.Дата = &Дата";
					
					Запрос.УстановитьПараметр("Дата", СтрокаРасшифровки.ДатаВедомостиНаВозвратЗарплаты);
					Запрос.УстановитьПараметр("Номер", СтрокаРасшифровки.НомерВедомостиНаВозвратЗарплаты);
						
					Выборка = Запрос.Выполнить().Выбрать();
					
					Если Выборка.Следующий()> 0 Тогда
						
						СтараяВедомость = Выборка.Ссылка.ПолучитьОбъект();
						СтараяВедомость.Дата = СтрокаРасшифровки.ДатаВедомостиНаВозвратЗарплаты;
						СтараяВедомость.Номер = СтрокаРасшифровки.НомерВедомостиНаВозвратЗарплаты;
						СтараяВедомость.Организация = ПолученныеДанные.Организация;
						СтараяВедомость.СуммаДокумента = ПолученныеДанные.СуммаДокумента;
						СтараяВедомость.ПериодРегистрации = ПолученныеДанные.ДатаВходящегоДокумента;
						СтараяВедомость.ВидПлатежа = ВидПлатежа;
						СтараяВедомость.Контрагент = ПолученныеДанные.Контрагент;
						СтараяВедомость.ВидОперации =  ВидОперацииДокумента;
						СтараяВедомость.Ответственный = ПолученныеДанные.Ответственный;
						
						СтараяВедомость.ПенсионныеВзносы.Очистить();
						
						Для каждого СтрокаВедомости Из СтрокиРасшифровки Цикл
							
							СтрокаТЧЗарплата = СтараяВедомость.ПенсионныеВзносы.Добавить();
							Если НЕ ЗначениеЗаполнено(СтрокаВедомости.Сотрудник) Тогда
								СтрокаТЧЗарплата.Физлицо = ФизическоеЛицоПоУмолчанию();
							Иначе
								СтрокаТЧЗарплата.Физлицо = ФизическоеЛицоДляЗагрузки(СтрокаВедомости.Сотрудник);
							КонецЕсли;
							
							СтрокаТЧЗарплата.Сумма = СтрокаВедомости.Сумма;
							СуммаДокумента = СуммаДокумента + СтрокаВедомости.Сумма;
							
							СтараяВедомость.Записать();
							
						КонецЦикла;
						
						Ведомость = СтараяВедомость.Ссылка;
						
					Иначе
						
						НоваяВедомость  = Документы.ОПВВозвратВзносов.СоздатьДокумент();
						НоваяВедомость.Дата = СтрокаРасшифровки.ДатаВедомостиНаВозвратЗарплаты;
						НоваяВедомость.Номер = СтрокаРасшифровки.НомерВедомостиНаВозвратЗарплаты;
						НоваяВедомость.Организация = ПолученныеДанные.Организация;
						НоваяВедомость.СуммаДокумента = ПолученныеДанные.СуммаДокумента;
						НоваяВедомость.ПериодРегистрации = ПолученныеДанные.ДатаВходящегоДокумента;
						НоваяВедомость.ВидПлатежа = ВидПлатежа;
						НоваяВедомость.Контрагент = ПолученныеДанные.Контрагент;
						НоваяВедомость.ВидОперации =  ВидОперацииДокумента;
						НоваяВедомость.Ответственный = ПолученныеДанные.Ответственный;
											
						Для каждого СтрокаВедомости Из СтрокиРасшифровки Цикл
							
							СтрокаТЧЗарплата = НоваяВедомость.ПенсионныеВзносы.Добавить();
							Если НЕ ЗначениеЗаполнено(СтрокаВедомости.Сотрудник) Тогда
								СтрокаТЧЗарплата.Физлицо = ФизическоеЛицоПоУмолчанию();
							Иначе
								СтрокаТЧЗарплата.Физлицо = ФизическоеЛицоДляЗагрузки(СтрокаВедомости.Сотрудник);
							КонецЕсли;
							
							СтрокаТЧЗарплата.Сумма = СтрокаВедомости.Сумма;
							СуммаДокумента = СуммаДокумента + СтрокаВедомости.Сумма;
							
							НоваяВедомость.Записать();
							
						КонецЦикла;
						
						Ведомость = НоваяВедомость.Ссылка;
						
					КонецЕсли;
					
					СтрокаТЧ.Документ = Ведомость; 
					СтрокаТЧ.СуммаВозврата = СуммаДокумента;    
					
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_ПБДСВзносыИОтчисления_Получение_ЗУП_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УстановкаУчетнойПолитикиОрганизации(?(ДанныеИБ = Неопределено, ПолученныеДанные.Организация, ДанныеИБ.Организация));
	
	ПБДС_СБДС_ПолучениеСчетБанк(ПолученныеДанные);
	
	Если ДанныеИБ = Неопределено Тогда
		
		ОрганизацияЯвляетсяПлательщикомКПН =  ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(ПолученныеДанные.Организация, ПолученныеДанные.Дата);
		
		Если Не ОрганизацияЯвляетсяПлательщикомКПН Тогда
			ПолученныеДанные.УчитыватьКПН = Ложь;
		Иначе
			ПолученныеДанные.УчитыватьКПН = Истина;
		КонецЕсли;	
	
		Если НЕ ПолученныеДанные.УчитыватьКПН Тогда
			ПолученныеДанные.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НеОтражаетсяВНУ;
		Иначе
			ПолученныеДанные.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ;
		КонецЕсли;
	
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ПБДСВозвратЗаработнойПлаты_Получение_ЗУП
Процедура ДобавитьПКО_Документ_ПБДСВозвратЗаработнойПлаты_Получение_ЗУП(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПБДСВозвратЗаработнойПлаты_Получение_ЗУП";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПлатежноеПоручениеВходящее;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПБДСВозвратЗаработнойПлаты";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_ПБДСВозвратЗаработнойПлаты_Получение_ЗУП_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПБДСВозвратЗаработнойПлаты_Получение_ЗУП_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВыписки";
	НоваяСтрока.СвойствоФормата = "ДатаВыписки";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НазначениеПлатежа";
	НоваяСтрока.СвойствоФормата = "НазначениеПлатежа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетКонтрагента";
	НоваяСтрока.СвойствоФормата = "БанковскийСчет";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетОрганизации";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Оплачено";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_ПБДСВозвратЗаработнойПлаты_Получение_ЗУП_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПБДС_СБДС_ПолучениеДатаПроведен(ПолученныеДанные, ДанныеXDTO);
		ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратЗаработнойПлаты;
		ПолученныеДанные.Оплачено = Истина;
		
		ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
		
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ДатаВедомостиНаВозвратЗарплаты", ДанныеXDTO.РасшифровкаПлатежа[0].ДатаВедомостиНаВозвратЗарплаты);
		ПолученныеДанные.ДополнительныеСвойства.Вставить("НомерВедомостиНаВозвратЗарплаты", ДанныеXDTO.РасшифровкаПлатежа[0].НомерВедомостиНаВозвратЗарплаты);
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ФизическоеЛицо", ДанныеXDTO.РасшифровкаПлатежа[0].Сотрудник);
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Сумма", ДанныеXDTO.РасшифровкаПлатежа[0].Сумма);
		
		РасшифровкаПлатежаXDTO = Неопределено;
		
		Если ДанныеXDTO.Свойство("РасшифровкаПлатежа", РасшифровкаПлатежаXDTO)
			И ЗначениеЗаполнено(РасшифровкаПлатежаXDTO) Тогда
			
			РасшифровкаПлатежаXDTOКопия = РасшифровкаПлатежаXDTO.Скопировать();
	
			РасшифровкаПлатежаXDTOКопия.Свернуть("ДатаВедомостиНаВозвратЗарплаты, НомерВедомостиНаВозвратЗарплаты");
			
			Для каждого СтрокаРасшифровки Из РасшифровкаПлатежаXDTOКопия Цикл
				
				СтрокиРасшифровки = РасшифровкаПлатежаXDTO.НайтиСтроки(Новый Структура("ДатаВедомостиНаВозвратЗарплаты, НомерВедомостиНаВозвратЗарплаты", СтрокаРасшифровки.ДатаВедомостиНаВозвратЗарплаты, СтрокаРасшифровки.НомерВедомостиНаВозвратЗарплаты));
				СуммаДокумента = 0;
	
				СтрокаТЧ = ПолученныеДанные.ВозвратЗаработнойПлаты.Добавить();
		
				Запрос = Новый Запрос();
				Запрос.Текст =
				"ВЫБРАТЬ
				|	ВозвратЗарплатыРаботниковОрганизаций.Ссылка,
				|	ВозвратЗарплатыРаботниковОрганизаций.Номер,
				|	ВозвратЗарплатыРаботниковОрганизаций.Дата
				|ИЗ
				|	Документ.ВозвратЗарплатыРаботниковОрганизаций КАК ВозвратЗарплатыРаботниковОрганизаций
				|ГДЕ
				|	ВозвратЗарплатыРаботниковОрганизаций.Номер = &Номер
				|	И ВозвратЗарплатыРаботниковОрганизаций.Дата = &Дата";
		
				Запрос.УстановитьПараметр("Дата", СтрокаРасшифровки.ДатаВедомостиНаВозвратЗарплаты);
				Запрос.УстановитьПараметр("Номер", СтрокаРасшифровки.НомерВедомостиНаВозвратЗарплаты);
		
				Выборка = Запрос.Выполнить().Выбрать();
		
				Если Выборка.Следующий() Тогда
		
					СтараяВедомость = Выборка.Ссылка.ПолучитьОбъект();
					СтараяВедомость.Дата = СтрокаРасшифровки.ДатаВедомостиНаВозвратЗарплаты;
					СтараяВедомость.Номер = СтрокаРасшифровки.НомерВедомостиНаВозвратЗарплаты;
					СтараяВедомость.Организация = ПолученныеДанные.Организация;
					СтараяВедомость.СуммаДокумента = ПолученныеДанные.СуммаДокумента;
		   			СтараяВедомость.Ответственный = ПолученныеДанные.Ответственный;
		
					СтараяВедомость.Зарплата.Очистить();
					Для каждого СтрокаВедомости Из СтрокиРасшифровки Цикл
						СтрокаТЧЗарплата = СтараяВедомость.Зарплата.Добавить();
						Если НЕ ЗначениеЗаполнено(СтрокаВедомости.Сотрудник) Тогда
							СтрокаТЧЗарплата.Физлицо = ФизическоеЛицоПоУмолчанию();
						Иначе
							СтрокаТЧЗарплата.Физлицо = ФизическоеЛицоДляЗагрузки(СтрокаВедомости.Сотрудник);
						КонецЕсли;
						СтрокаТЧЗарплата.Сумма = СтрокаВедомости.Сумма;
						СуммаДокумента = СуммаДокумента + СтрокаВедомости.Сумма;
					КонецЦикла;
					СтараяВедомость.Записать();
					Ведомость = СтараяВедомость.Ссылка;
				  
				Иначе
					НоваяВедомость  = Документы.ВозвратЗарплатыРаботниковОрганизаций.СоздатьДокумент();
					НоваяВедомость.Дата = СтрокаРасшифровки.ДатаВедомостиНаВозвратЗарплаты;
					НоваяВедомость.Номер = СтрокаРасшифровки.НомерВедомостиНаВозвратЗарплаты;
					НоваяВедомость.Организация = ПолученныеДанные.Организация;
					НоваяВедомость.СуммаДокумента = ПолученныеДанные.СуммаДокумента;
		   			НоваяВедомость.Ответственный = ПолученныеДанные.Ответственный;
		
					Для каждого СтрокаВедомости Из СтрокиРасшифровки Цикл
						СтрокаТЧЗарплата = НоваяВедомость.Зарплата.Добавить();
						Если НЕ ЗначениеЗаполнено(СтрокаВедомости.Сотрудник) Тогда
							СтрокаТЧЗарплата.Физлицо = ФизическоеЛицоПоУмолчанию();
						Иначе
							СтрокаТЧЗарплата.Физлицо = ФизическоеЛицоДляЗагрузки(СтрокаВедомости.Сотрудник);
						КонецЕсли;
						СтрокаТЧЗарплата.Сумма = СтрокаВедомости.Сумма;
						СуммаДокумента = СуммаДокумента + СтрокаВедомости.Сумма;		
					КонецЦикла;
	
					НоваяВедомость.Записать();
					Ведомость = НоваяВедомость.Ссылка;
		
				КонецЕсли;
		
				СтрокаТЧ.Документ = Ведомость; 
				СтрокаТЧ.СуммаВозврата = СуммаДокумента;
			   КонецЦикла;
		КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_ПБДСВозвратЗаработнойПлаты_Получение_ЗУП_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УстановкаУчетнойПолитикиОрганизации(?(ДанныеИБ = Неопределено, ПолученныеДанные.Организация, ДанныеИБ.Организация));
	
	ПБДС_СБДС_ПолучениеСчетБанк(ПолученныеДанные);
	
	Если ДанныеИБ = Неопределено Тогда
		
		ОрганизацияЯвляетсяПлательщикомКПН =  ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(ПолученныеДанные.Организация, ПолученныеДанные.Дата);
		
		Если Не ОрганизацияЯвляетсяПлательщикомКПН Тогда
			ПолученныеДанные.УчитыватьКПН = Ложь;
		Иначе
			ПолученныеДанные.УчитыватьКПН = Истина;
		КонецЕсли;	
	
		Если НЕ ПолученныеДанные.УчитыватьКПН Тогда
			ПолученныеДанные.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НеОтражаетсяВНУ;
		Иначе
			ПолученныеДанные.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ;
		КонецЕсли;
	
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ПБДСКонвертацияВалюты_Получение
Процедура ДобавитьПКО_Документ_ПБДСКонвертацияВалюты_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПБДСКонвертацияВалюты_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПлатежноеПоручениеВходящее;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПБДСКонвертацияВалюты";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_ПБДСКонвертацияВалюты_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПБДСКонвертацияВалюты_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_ПБДС";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВыписки";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтруктурноеПодразделениеПолучатель";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетКонтрагента";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетКонтрагента";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетОрганизации";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КурсНаДатуПриобретенияРеализацииВалюты";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетБанк";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоговорКонтрагента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КратностьВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КурсВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КурсНаДатуПриобретенияРеализацииВалюты";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтатьяДвиженияДенежныхСредств";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаПлатежа";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_ПБДСКонвертацияВалюты_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПБДС_СБДС_ПолучениеДатаПроведен(ПолученныеДанные, ДанныеXDTO);
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);	
	
	МассивСтрокРасшифровка = Новый Массив;
	Если ДанныеXDTO.Свойство("РасшифровкаПлатежа")
		И ЗначениеЗаполнено(ДанныеXDTO.РасшифровкаПлатежа) 
		И ДанныеXDTO.РасшифровкаПлатежа.Количество() > 0 Тогда
		
		//Валюта конвертации
		ВалютаКонвертации = ДанныеXDTO.РасшифровкаПлатежа[0].ВалютаКонвертации;
		ИмяПКОВалюта = "";
		Если ЗначениеЗаполнено(ВалютаКонвертации) Тогда
			
			Если ВалютаКонвертации.Свойство("Ссылка") Тогда
				ИмяПКОВалюта = "Справочник_Валюты";
			Иначе
				ИмяПКОВалюта = "Справочник_Валюты_ИзСтруктуры";
			КонецЕсли;
		КонецЕсли;
		ПКОВалюты = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, ИмяПКОВалюта);
		ВалютаКонвертации = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, ВалютаКонвертации, ПКОВалюты,"ПолучитьСсылку");
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ВалютаКонвертации", ВалютаКонвертации);
	
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("СтатьяДДС","СтатьяДвиженияДенежныхСредств");
		
		ПравилаЗаполнения.Вставить("Сумма","СуммаПлатежа");
		ПравилаЗаполнения.Вставить("СуммаВал","СуммаВзаиморасчетов");
		ПравилаЗаполнения.Вставить("КратностьКонвертации","КратностьВзаиморасчетов");
		ПравилаЗаполнения.Вставить("КурсКонвертации","КурсВзаиморасчетов");
		ПравилаЗаполнения.Вставить("КурсЦБНаДатуКонвертации","КурсНаДатуПриобретенияРеализацииВалюты");
		
		Для Каждого Строка Из ДанныеXDTO.РасшифровкаПлатежа Цикл
			
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			ПолученныеДанные.КурсНаДатуПриобретенияРеализацииВалюты = СтруктураДанныхСтроки.КурсНаДатуПриобретенияРеализацииВалюты;
			Договор = ДанныеXDTO.РасшифровкаПлатежа[0].Договор;
			Если ЗначениеЗаполнено(Строка.Договор) Тогда
				Если ТипЗнч(Строка.Договор) = Тип("Структура") И Строка.Договор.Свойство("Ссылка") = ЛОЖЬ Тогда
					СтруктураДанныхСтроки.Вставить("ДоговорКонтрагента", Новый Структура("Значение, ИмяПКО", Строка.Договор, "Справочник_ДоговорыКонтрагентов_ИзСтруктуры"));
				Иначе
					СтруктураДанныхСтроки.Вставить("ДоговорКонтрагента",Строка.Договор);
				КонецЕсли;
			КонецЕсли;	
	
			МассивСтрокРасшифровка.Добавить(СтруктураДанныхСтроки);
			
		КонецЦикла;
		Если МассивСтрокРасшифровка.Количество() > 0 Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("РасшифровкаПлатежа", МассивСтрокРасшифровка);
		КонецЕсли;
	
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_ПБДСКонвертацияВалюты_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УстановкаУчетнойПолитикиОрганизации(?(ДанныеИБ = Неопределено, ПолученныеДанные.Организация, ДанныеИБ.Организация));
	
	Если ДанныеИБ = Неопределено Тогда
		
		ОрганизацияЯвляетсяПлательщикомКПН =  ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(ПолученныеДанные.Организация, ПолученныеДанные.Дата);
		
		Если Не ОрганизацияЯвляетсяПлательщикомКПН Тогда
			ПолученныеДанные.УчитыватьКПН = Ложь;
		Иначе
			ПолученныеДанные.УчитыватьКПН = Истина;
		КонецЕсли;	
	
		Если НЕ ПолученныеДанные.УчитыватьКПН Тогда
			ПолученныеДанные.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НеОтражаетсяВНУ;
		Иначе
			ПолученныеДанные.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ;
		КонецЕсли;
		
	КонецЕсли;
	
	ПБДС_СБДС_ПолучениеСчетБанк(ПолученныеДанные);
	
	ВалютаКонвертации = ПолученныеДанные.ДополнительныеСвойства.ВалютаКонвертации;
	АлгоритмКонвертации = "";
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	Если ПолученныеДанные.ВалютаДокумента <> ВалютаРегламентированногоУчета
		И ВалютаКонвертации = ВалютаРегламентированногоУчета Тогда
		АлгоритмКонвертации = "ПриобретениеИностраннойВалюты";
		ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПриобретениеИностраннойВалюты;
	Иначе
		АлгоритмКонвертации = "ПоступленияОтПродажиИностраннойВалюты";
		ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты;
	КонецЕсли;
	
	Для Каждого СтрокаТЧ ИЗ ПолученныеДанные.РасшифровкаПлатежа Цикл
		// СчетУчетаРасчетовСКонтрагентом
		Если АлгоритмКонвертации = "ПриобретениеИностраннойВалюты" Тогда
			СтрокаТЧ.СчетУчетаРасчетовСКонтрагентомБУ = ПланыСчетов.Типовой.ДенежныеСредстваВПутиКонвертацияВалюты; 
		ИначеЕсли АлгоритмКонвертации = "ПоступленияОтПродажиИностраннойВалюты" Тогда
			СтрокаТЧ.СчетУчетаРасчетовСКонтрагентомБУ = ПланыСчетов.Типовой.ДенежныеСредстваВПутиКонвертацияВалюты; 
		КонецЕсли;
	КонецЦикла;
	
	Если ДанныеИБ <> Неопределено Тогда
		
		// Заменяем свойства, которые получили из XDTO
		ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
		
		// Восстанавливаем "затертые" данные
		//РасшифровкаПлатежа
		МассивКлючевыхПолей = Новый Массив;
		МассивКлючевыхПолей.Добавить("ДоговорКонтрагента");
		МассивКлючевыхПолей.Добавить("СуммаПлатежа");
		МассивКлючевыхПолей.Добавить("СуммаВзаиморасчетов");
		МассивКлючевыхПолей.Добавить("КурсВзаиморасчетов");
		МассивКлючевыхПолей.Добавить("КратностьВзаиморасчетов");
		МассивКлючевыхПолей.Добавить("КурсНаДатуПриобретенияРеализацииВалюты");
		МассивКлючевыхПолей.Добавить("СтатьяДвиженияДенежныхСредств");
		
		ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
			ПолученныеДанные.РасшифровкаПлатежа,
			ДанныеИБ.РасшифровкаПлатежа,
			МассивКлючевыхПолей,
			"Сделка, СчетУчетаРасчетовСКонтрагентомБУ, СчетУчетаРасчетовПоАвансам, СтавкаНДС");
		ДанныеИБ.РасшифровкаПлатежа.Загрузить(ПолученныеДанные.РасшифровкаПлатежа.Выгрузить());
	
		
		ПолученныеДанные = Неопределено;
				
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ПБДСПрочееПоступление_Получение
Процедура ДобавитьПКО_Документ_ПБДСПрочееПоступление_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПБДСПрочееПоступление_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПлатежноеПоручениеВходящее;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПБДСПрочееПоступление";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_ПБДСПрочееПоступление_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПБДСПрочееПоступление_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_ПБДС";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВыписки";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетКонтрагента";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетКонтрагента";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетОрганизации";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтатьяДвиженияДенежныхСредств";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетБанк";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетУчетаРасчетовСКонтрагентомБУ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_ПБДСПрочееПоступление_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПБДС_СБДС_ПолучениеДатаПроведен(ПолученныеДанные, ДанныеXDTO);
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);	
		
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочееПоступлениеБезналичныхДенежныхСредств;
	
	ДокументыДвиженияДС_ПолучениеСтатьиДДС(ПолученныеДанные, ДанныеXDTO);
	
	ЗаполнитьСчетУчетаРасчетовВПрочейОперацииДДС(ПолученныеДанные, ДанныеXDTO);
КонецПроцедуры

Процедура ПКО_Документ_ПБДСПрочееПоступление_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УстановкаУчетнойПолитикиОрганизации(?(ДанныеИБ = Неопределено, ПолученныеДанные.Организация, ДанныеИБ.Организация));
	
	Если ДанныеИБ = Неопределено Тогда
		
		ОрганизацияЯвляетсяПлательщикомКПН =  ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(ПолученныеДанные.Организация, ПолученныеДанные.Дата);
		
		Если Не ОрганизацияЯвляетсяПлательщикомКПН Тогда
			ПолученныеДанные.УчитыватьКПН = Ложь;
		Иначе
			ПолученныеДанные.УчитыватьКПН = Истина;
		КонецЕсли;	
	
		Если НЕ ПолученныеДанные.УчитыватьКПН Тогда
			ПолученныеДанные.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НеОтражаетсяВНУ;
		Иначе
			ПолученныеДанные.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ;
		КонецЕсли;
		
	КонецЕсли;
	
	ПБДС_СБДС_ПолучениеСчетБанк(ПолученныеДанные);
	
	Если ДанныеИБ <> Неопределено Тогда
		Если ЗначениеЗаполнено(ДанныеИБ.СчетУчетаРасчетовСКонтрагентомБУ) Тогда
			ПолученныеДанные.СчетУчетаРасчетовСКонтрагентомБУ = ДанныеИБ.СчетУчетаРасчетовСКонтрагентомБУ;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ПБДСПрочиеДоходы_Получение
Процедура ДобавитьПКО_Документ_ПБДСПрочиеДоходы_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПБДСПрочиеДоходы_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПлатежноеПоручениеВходящее;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПБДСПрочиеДоходы";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_ПБДСПрочиеДоходы_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПБДСПрочиеДоходы_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_ПБДС";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВыписки";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтруктурноеПодразделениеПолучатель";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетКонтрагента";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетКонтрагента";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетОрганизации";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтатьяДвиженияДенежныхСредств";
	НоваяСтрока.СвойствоФормата = "СтатьяДДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СубконтоКтБУ1";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДоходов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетБанк";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетУчетаРасчетовСКонтрагентомБУ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_ПБДСПрочиеДоходы_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПБДС_СБДС_ПолучениеДатаПроведен(ПолученныеДанные, ДанныеXDTO);
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);	
		
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочееПоступлениеБезналичныхДенежныхСредств;
	ДокументыДвиженияДС_ПолучениеСтатьиДДС(ПолученныеДанные, ДанныеXDTO);
	
	ЗаполнитьСчетУчетаРасчетовВПрочейОперацииДДС(ПолученныеДанные, ДанныеXDTO);
КонецПроцедуры

Процедура ПКО_Документ_ПБДСПрочиеДоходы_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УстановкаУчетнойПолитикиОрганизации(?(ДанныеИБ = Неопределено, ПолученныеДанные.Организация, ДанныеИБ.Организация));
	
	Если ДанныеИБ = Неопределено Тогда
		
		ОрганизацияЯвляетсяПлательщикомКПН =  ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(ПолученныеДанные.Организация, ПолученныеДанные.Дата);
		
		Если Не ОрганизацияЯвляетсяПлательщикомКПН Тогда
			ПолученныеДанные.УчитыватьКПН = Ложь;
		Иначе
			ПолученныеДанные.УчитыватьКПН = Истина;
		КонецЕсли;	
	
		Если НЕ ПолученныеДанные.УчитыватьКПН Тогда
			ПолученныеДанные.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НеОтражаетсяВНУ;
		Иначе
			ПолученныеДанные.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ;
		КонецЕсли;
		
	КонецЕсли;
	
	ПБДС_СБДС_ПолучениеСчетБанк(ПолученныеДанные);
	
	Если ДанныеИБ <> Неопределено Тогда
		Если ЗначениеЗаполнено(ДанныеИБ.СчетУчетаРасчетовСКонтрагентомБУ) Тогда
			ПолученныеДанные.СчетУчетаРасчетовСКонтрагентомБУ = ДанныеИБ.СчетУчетаРасчетовСКонтрагентомБУ;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ПБДСРасчетыСКонтрагентами_Получение
Процедура ДобавитьПКО_Документ_ПБДСРасчетыСКонтрагентами_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПБДСРасчетыСКонтрагентами_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПлатежноеПоручениеВходящее;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПБДСРасчетыСКонтрагентами";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_ПБДСРасчетыСКонтрагентами_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПБДСРасчетыСКонтрагентами_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_ПБДС";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.СвойствоФормата = "ВидРасчетов";
	НоваяСтрока.ПравилоКонвертацииСвойства = "ВидыОперацийПБДСРасчетыСКонтрагентами";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВыписки";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтруктурноеПодразделениеПолучатель";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетКонтрагента";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетКонтрагента";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетОрганизации";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтатьяДвиженияДенежныхСредств";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетБанк";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоговорКонтрагента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КратностьВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КурсВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтатьяДвиженияДенежныхСредств";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаПлатежа";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_ПБДСРасчетыСКонтрагентами_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПБДС_СБДС_ПолучениеДатаПроведен(ПолученныеДанные, ДанныеXDTO);
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);	
	
	#Область АлгоритмКонвертации
	АлгоритмКонвертации = "";
	ВидРасчетовXDTO = ДанныеXDTO.ВидРасчетов.Значение;
	Если ВидРасчетовXDTO = "СПокупателем" Тогда
		
		АлгоритмКонвертации = "ОплатаОтПокупателя";
		
	ИначеЕсли ВидРасчетовXDTO = "СПоставщиком" Тогда
		
		АлгоритмКонвертации = "ВозвратОтПоставщика";
		
	ИначеЕсли ВидРасчетовXDTO = "КредитыИЗаймы" Тогда
		
		АлгоритмКонвертации = "РасчетыПоКредитамИЗаймам";
		
	ИначеЕсли ВидРасчетовXDTO = "Прочее" Тогда
		
		АлгоритмКонвертации = "ПрочиеРасчетыСКонтрагентами";
		
	КонецЕсли;
	#КонецОбласти
	
	Если ДанныеXDTO.Свойство("РасшифровкаПлатежа") И ЗначениеЗаполнено(ДанныеXDTO.РасшифровкаПлатежа) 
		И ДанныеXDTO.РасшифровкаПлатежа.Количество() > 0 Тогда
		// СтатьяДвиженияДенежныхСредств
		Если АлгоритмКонвертации = "ОплатаОтПокупателя"
			Или АлгоритмКонвертации = "ВозвратОтПоставщика" Тогда
			
			Если ЗначениеЗаполнено(ДанныеXDTO.РасшифровкаПлатежа[0].СтатьяДДС) Тогда
				ПолученныеДанные.ДополнительныеСвойства.Вставить("СтатьяДвиженияДенежныхСредств", ДанныеXDTO.РасшифровкаПлатежа[0].СтатьяДДС);
			КонецЕсли;
		КонецЕсли;
		МассивСтрокРасшифровка = Новый Массив;
	
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Сумма","СуммаПлатежа");
		
		ПравилаЗаполнения.Вставить("СтатьяДДС","СтатьяДвиженияДенежныхСредств");
		ПравилаЗаполнения.Вставить("Договор","ДоговорКонтрагента");
		ПравилаЗаполнения.Вставить("СуммаВзаиморасчетов", "СуммаВзаиморасчетов");
		ПравилаЗаполнения.Вставить("КурсВзаиморасчетов", "КурсВзаиморасчетов");
		ПравилаЗаполнения.Вставить("КратностьВзаиморасчетов", "КратностьВзаиморасчетов");
		
		Если АлгоритмКонвертации = "ОплатаОтПокупателя"
			Или АлгоритмКонвертации = "ВозвратОтПоставщика" Тогда
			ПравилаЗаполнения.Вставить("СтавкаНДС", "СтавкаНДС");
			ПравилаЗаполнения.Вставить("СуммаНДС", "СуммаНДС");
		КонецЕсли;
		
		Для Каждого Строка Из ДанныеXDTO.РасшифровкаПлатежа Цикл
			
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			Если ЗначениеЗаполнено(Строка.Договор) И ТипЗнч(Строка.Договор) = Тип("Структура") И
				Строка.Договор.Свойство("Ссылка") = ЛОЖЬ Тогда
				СтруктураДанныхСтроки.Вставить("ДоговорКонтрагента", Новый Структура("Значение, ИмяПКО", Строка.Договор, "Справочник_ДоговорыКонтрагентов_ИзСтруктуры"));
			КонецЕсли;
			
			ОбработатьСтавкуНДСПриПолучении(Строка, СтруктураДанныхСтроки, КомпонентыОбмена.ПараметрыКонвертации);
			
			МассивСтрокРасшифровка.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
		ПолученныеДанные.ДополнительныеСвойства.Вставить("РасшифровкаПлатежа", МассивСтрокРасшифровка);
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_ПБДСРасчетыСКонтрагентами_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УстановкаУчетнойПолитикиОрганизации(?(ДанныеИБ = Неопределено, ПолученныеДанные.Организация, ДанныеИБ.Организация));
	
	ПБДС_СБДС_ПолучениеСчетБанк(ПолученныеДанные);
	
	Если ДанныеИБ = Неопределено Тогда
	
		ОрганизацияЯвляетсяПлательщикомКПН =  ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(ПолученныеДанные.Организация, ПолученныеДанные.Дата);
		
		Если Не ОрганизацияЯвляетсяПлательщикомКПН Тогда
			ПолученныеДанные.УчитыватьКПН = Ложь;
		Иначе
			ПолученныеДанные.УчитыватьКПН = Истина;
		КонецЕсли;	
	
		Если НЕ ПолученныеДанные.УчитыватьКПН Тогда
			ПолученныеДанные.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НеОтражаетсяВНУ;
		Иначе
			ПолученныеДанные.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ;
		КонецЕсли;
	
	
		Возврат;
		
	КонецЕсли;
		
	
	// Заменяем свойства, которые получили из XDTO
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
	
	// Восстанавливаем "затертые" данные
	//РасшифровкаПлатежа
	МассивКлючевыхПолей = Новый Массив;
	МассивКлючевыхПолей.Добавить("ДоговорКонтрагента");
	МассивКлючевыхПолей.Добавить("СуммаПлатежа");
	МассивКлючевыхПолей.Добавить("СуммаВзаиморасчетов");
	МассивКлючевыхПолей.Добавить("КурсВзаиморасчетов");
	МассивКлючевыхПолей.Добавить("КратностьВзаиморасчетов");
	МассивКлючевыхПолей.Добавить("СтатьяДвиженияДенежныхСредств");
	Если ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПокупателя ИЛИ
			ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПоставщиком Тогда
		МассивКлючевыхПолей.Добавить("СтавкаНДС");
		МассивКлючевыхПолей.Добавить("СуммаНДС");
	КонецЕсли;
	
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.РасшифровкаПлатежа,
		ДанныеИБ.РасшифровкаПлатежа,
		МассивКлючевыхПолей,
		"Сделка, СчетУчетаРасчетовСКонтрагентомБУ, СчетУчетаРасчетовПоАвансам");
	ДанныеИБ.РасшифровкаПлатежа.Загрузить(ПолученныеДанные.РасшифровкаПлатежа.Выгрузить());
	
	
	ПолученныеДанные = Неопределено;
КонецПроцедуры
#КонецОбласти
#Область Документ_ПБДСРасчетыССотрудниками_Получение
Процедура ДобавитьПКО_Документ_ПБДСРасчетыССотрудниками_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПБДСРасчетыССотрудниками_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПлатежноеПоручениеВходящее;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПБДСРасчетыССотрудниками";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_ПБДСРасчетыССотрудниками_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПБДСРасчетыССотрудниками_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_ПБДС";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВыписки";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СубконтоКтБУ1";
	НоваяСтрока.СвойствоФормата = "Сотрудник";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ФизическиеЛица_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетОрганизации";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтатьяДвиженияДенежныхСредств";
	НоваяСтрока.СвойствоФормата = "СтатьяДДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетБанк";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетКонтрагента";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетСотрудника";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Получение";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтатьяДвиженияДенежныхСредств";
	НоваяСтрока.СвойствоФормата = "СтатьяДДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаПлатежа";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_ПБДСРасчетыССотрудниками_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПБДС_СБДС_ПолучениеДатаПроведен(ПолученныеДанные, ДанныеXDTO);
	
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочееПоступлениеБезналичныхДенежныхСредств;
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);	
	
	ДокументыДвиженияДС_ПолучениеСтатьиДДС(ПолученныеДанные, ДанныеXDTO);
	МассивСтрокРасшифровка = Новый Массив;
	Если ДанныеXDTO.Свойство("РасшифровкаПлатежа")
		И ЗначениеЗаполнено(ДанныеXDTO.РасшифровкаПлатежа)
		И ДанныеXDTO.РасшифровкаПлатежа.Количество() > 0 Тогда
		
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("СтатьяДДС","СтатьяДвиженияДенежныхСредств");
		ПравилаЗаполнения.Вставить("Сумма","СуммаПлатежа");
	
		Для Каждого Строка Из ДанныеXDTO.РасшифровкаПлатежа Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			МассивСтрокРасшифровка.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
		ПолученныеДанные.ДополнительныеСвойства.Вставить("РасшифровкаПлатежа", МассивСтрокРасшифровка);
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_ПБДСРасчетыССотрудниками_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УстановкаУчетнойПолитикиОрганизации(?(ДанныеИБ = Неопределено, ПолученныеДанные.Организация, ДанныеИБ.Организация));
	
	ПБДС_СБДС_ПолучениеСчетБанк(ПолученныеДанные);
	
	Если ДанныеИБ = Неопределено Тогда
		
		ОрганизацияЯвляетсяПлательщикомКПН =  ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(ПолученныеДанные.Организация, ПолученныеДанные.Дата);
		
		Если Не ОрганизацияЯвляетсяПлательщикомКПН Тогда
			ПолученныеДанные.УчитыватьКПН = Ложь;
		Иначе
			ПолученныеДанные.УчитыватьКПН = Истина;
		КонецЕсли;	
	
		Если НЕ ПолученныеДанные.УчитыватьКПН Тогда
			ПолученныеДанные.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НеОтражаетсяВНУ;
		Иначе
			ПолученныеДанные.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ;
		КонецЕсли;
		
	КонецЕсли;
	
	
	Если ДанныеИБ <> Неопределено Тогда
		
		ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
		МассивКлючевыхПолей = Новый Массив;
		МассивКлючевыхПолей.Добавить("СтатьяДвиженияДенежныхСредств");
		МассивКлючевыхПолей.Добавить("СуммаПлатежа");
	
		ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
			ПолученныеДанные.РасшифровкаПлатежа,
			ДанныеИБ.РасшифровкаПлатежа,
			МассивКлючевыхПолей,
			"СчетУчетаРасчетовСКонтрагентомБУ,СчетУчетаРасчетовПоАвансам");
		ДанныеИБ.РасшифровкаПлатежа.Загрузить(ПолученныеДанные.РасшифровкаПлатежа.Выгрузить());
		
		ПолученныеДанные = Неопределено;
		
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ПередачаТоваров_Получение
Процедура ДобавитьПКО_Документ_ПередачаТоваров_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПередачаТоваров_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПередачаТоваров;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПередачаПереработчику";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_ПередачаТоваров_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПередачаТоваров_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_ПередачаМатериаловВПереработку";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Склад";
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоговорКонтрагента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетПередачиБУ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетУчетаБУ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_ПередачаТоваров_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	// ДанныеXDTO содержат только 1 свойство, 
	// значит выполняется загрузка значения свойства, а не самого объекта. 
	Если ДанныеXDTO.Количество() = 1 Тогда
		Возврат;
	КонецЕсли;
	
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПередачаТоваров.ВПереработку;
	ДобавитьДоговорВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	
	МассивСтрокТовары = Новый Массив;
	Если ДанныеXDTO.Свойство("Товары")
		И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
	
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполнения.Вставить("Количество", "Количество");
		
		Для Каждого Строка Из ДанныеXDTO.Товары Цикл
			ТекТипЗапасов = "";
			Если ЗначениеЗаполнено(Строка.ТипЗапасов) Тогда
				ТекТипЗапасов = Строка.ТипЗапасов.Значение;
			КонецЕсли;
	
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			Если ТекТипЗапасов = "КомиссионныеТовары" Тогда
				СтруктураДанныхСтроки.Вставить("СчетУчетаБУ",    ПланыСчетов.Типовой.Товары); 
				СтруктураДанныхСтроки.Вставить("СчетПередачиБУ", ПланыСчетов.Типовой.Товары); 
			КонецЕсли;
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
		
		Если МассивСтрокТовары.Количество() > 0 Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_ПередачаТоваров_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	// Склад
	ПолученныеДанные.Склад = СкладДляЗагрузки(ПолученныеДанные.Склад, КомпонентыОбмена.ПараметрыКонвертации);
	
	ПолученныеДанные.Проведен = Истина;
	
	Если ДанныеИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Склад
	Если Не ЗначениеЗаполнено(ПолученныеДанные.Склад) И ЗначениеЗаполнено(ДанныеИБ.Склад) Тогда
		ПолученныеДанные.Склад = ДанныеИБ.Склад;
	КонецЕсли;
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
	
	// Восстанавливаем "затертые" данные
	//Товары
	МассивКлючевыхПолей = Новый Массив;
	МассивКлючевыхПолей.Добавить("Номенклатура");
	МассивКлючевыхПолей.Добавить("Количество");
	
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.Товары,
		ДанныеИБ.Товары,
		МассивКлючевыхПолей,
		"СчетУчетаБУ,СчетПередачиБУ");
	ДанныеИБ.Товары.Загрузить(ПолученныеДанные.Товары.Выгрузить());
	
	ПолученныеДанные = Неопределено;
КонецПроцедуры
#КонецОбласти
#Область Документ_ПеремещениеТоваров_Получение
Процедура ДобавитьПКО_Документ_ПеремещениеТоваров_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПеремещениеТоваров_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПеремещениеТоваров;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПеремещениеТоваров";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_ПеремещениеТоваров_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПеремещениеТоваров_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_ПеремещениеТоваров";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СкладОтправитель";
	НоваяСтрока.СвойствоФормата = "СкладОтправитель";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СкладПолучатель";
	НоваяСтрока.СвойствоФормата = "СкладПолучатель";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Коэффициент";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НовыйСчетУчетаБУ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетУчетаБУ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_ПеремещениеТоваров_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Проведен = Истина;
	
	МассивСтрокТовары = Новый Массив;
	Если ДанныеXDTO.Свойство("Товары")
		И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
	
		//Товары
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполнения.Вставить("ЕдиницаИзмерения", "ЕдиницаИзмерения");
		ПравилаЗаполнения.Вставить("Количество", "Количество");
		
		Для Каждого Строка Из ДанныеXDTO.Товары Цикл
			СтруктураДанныхСтроки = Новый Структура;
	
			ТипЗапасов = "";
			Если ЗначениеЗаполнено(Строка.ТипЗапасов) Тогда
				ТипЗапасов = Строка.ТипЗапасов.Значение;
			КонецЕсли;
			Если ТипЗапасов = "КомиссионныеТовары" Тогда
				
			Иначе
				СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
				СтруктураДанныхСтроки.Вставить("Коэффициент",1); 
				МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
			КонецЕсли;
		КонецЦикла;
		Если МассивСтрокТовары.Количество() > 0 Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_ПеремещениеТоваров_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УстановкаУчетнойПолитикиОрганизации(?(ДанныеИБ = Неопределено, ПолученныеДанные.Организация, ДанныеИБ.Организация));
	
	Если ДанныеИБ = Неопределено Тогда
	
		ОрганизацияЯвляетсяПлательщикомКПН =  ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(ПолученныеДанные.Организация, ПолученныеДанные.Дата);
		
		Если Не ОрганизацияЯвляетсяПлательщикомКПН Тогда
			ПолученныеДанные.УчитыватьКПН = Ложь;
		Иначе
			ПолученныеДанные.УчитыватьКПН = Истина;
		КонецЕсли;	
	
		Если НЕ ПолученныеДанные.УчитыватьКПН Тогда
			ПолученныеДанные.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НеОтражаетсяВНУ;
		Иначе
			ПолученныеДанные.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ;
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
			
	// Заменяем свойства, которые получили из XDTO
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
					
	// Восстанавливаем "затертые" данные
	//Товары
	МассивКлючевыхПолей = Новый Массив;
	МассивКлючевыхПолей.Добавить("Номенклатура");
	МассивКлючевыхПолей.Добавить("ЕдиницаИзмерения");
	МассивКлючевыхПолей.Добавить("Количество");
	
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.Товары,
		ДанныеИБ.Товары,
		МассивКлючевыхПолей,
		"СчетУчетаБУ,НовыйСчетУчетаБУ");
	ДанныеИБ.Товары.Загрузить(ПолученныеДанные.Товары.Выгрузить());
	ПолученныеДанные = Неопределено;
КонецПроцедуры
#КонецОбласти
#Область Документ_ПКОВнутренняяПередача_Получение
Процедура ДобавитьПКО_Документ_ПКОВнутренняяПередача_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПКОВнутренняяПередача_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПриходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПКОВнутренняяПередача";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_ПКОВнутренняяПередача_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПКОВнутренняяПередача_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_ПКОПолучениеНаличныхВБанке";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Касса";
	НоваяСтрока.СвойствоФормата = "Касса";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Кассы_Получение_ИзСтруктуры";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Основание";
	НоваяСтрока.СвойствоФормата = "Основание";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Приложение";
	НоваяСтрока.СвойствоФормата = "Приложение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПринятоОт";
	НоваяСтрока.СвойствоФормата = "ПринятоОт";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтатьяДвиженияДенежныхСредств";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_ПКОВнутренняяПередача_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствПрочее;
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);	
	
	ДокументыДвиженияДС_ПолучениеСтатьиДДС(ПолученныеДанные, ДанныеXDTO);
	ПолученныеДанные.Проведен = Истина;
	
	Если ДанныеXDTO.КлючевыеСвойства.Свойство("Касса") Тогда 
		Касса = ДанныеXDTO.КлючевыеСвойства.Касса;
	Иначе 
		Касса = ДанныеXDTO.Касса;
	КонецЕсли;
	Если ЗначениеЗаполнено(Касса) Тогда
		Если ТипЗнч(Касса) = Тип("Структура") И 
			Касса.Свойство("Ссылка") = Ложь Тогда
			ИмяПКО = "Справочник_Кассы_Получение_ИзСтруктуры";
		Иначе
			ИмяПКО = "Справочник_Кассы_Получение";
		КонецЕсли;
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Касса", Новый Структура("Значение, ИмяПКО", Касса, ИмяПКО));
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_ПКОВнутренняяПередача_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УстановкаУчетнойПолитикиОрганизации(?(ДанныеИБ = Неопределено, ПолученныеДанные.Организация, ДанныеИБ.Организация));
	
	ПКО_РКО_ПолучениеСчетКасса(ПолученныеДанные);
	
	Если ДанныеИБ = Неопределено Тогда
	
		ОрганизацияЯвляетсяПлательщикомКПН =  ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(ПолученныеДанные.Организация, ПолученныеДанные.Дата);
		
		Если Не ОрганизацияЯвляетсяПлательщикомКПН Тогда
			ПолученныеДанные.УчитыватьКПН = Ложь;
		Иначе
			ПолученныеДанные.УчитыватьКПН = Истина;
		КонецЕсли;	
	
		Если НЕ ПолученныеДанные.УчитыватьКПН Тогда
			ПолученныеДанные.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НеОтражаетсяВНУ;
		Иначе
			ПолученныеДанные.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ;
		КонецЕсли;
	
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ПКОКонвертацияВалюты_Получение
Процедура ДобавитьПКО_Документ_ПКОКонвертацияВалюты_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПКОКонвертацияВалюты_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПриходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПКОКонвертацияВалюты";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_ПКОКонвертацияВалюты_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПКОКонвертацияВалюты_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_ПКОПолучениеНаличныхВБанке";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Касса";
	НоваяСтрока.СвойствоФормата = "Касса";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Кассы_Получение_ИзСтруктуры";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Основание";
	НоваяСтрока.СвойствоФормата = "Основание";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Приложение";
	НоваяСтрока.СвойствоФормата = "Приложение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПринятоОт";
	НоваяСтрока.СвойствоФормата = "ПринятоОт";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СубконтоКтБУ1";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтатьяДвиженияДенежныхСредств";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СубконтоКтБУ2";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетКасса";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетУчетаРасчетовСКонтрагентомБУ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_ПКОКонвертацияВалюты_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствПрочее;
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);	
	ДокументыДвиженияДС_ПолучениеСтатьиДДС(ПолученныеДанные, ДанныеXDTO);
	ПолученныеДанные.Проведен = Истина;
	
	Если ДанныеXDTO.Свойство("РасшифровкаПлатежа") И
		ЗначениеЗаполнено(ДанныеXDTO.РасшифровкаПлатежа) И 
		ДанныеXDTO.РасшифровкаПлатежа.Количество() > 0 Тогда
		Договор = ДанныеXDTO.РасшифровкаПлатежа[0].Договор;
		Если ЗначениеЗаполнено(Договор) Тогда
			Если ТипЗнч(Договор) = Тип("Структура") И Договор.Свойство("Ссылка") = ЛОЖЬ Тогда
				ПолученныеДанные.ДополнительныеСвойства.Вставить("СубконтоКтБУ2", Новый Структура("Значение, ИмяПКО", Договор, "Справочник_ДоговорыКонтрагентов_ИзСтруктуры"));
			Иначе
				ПолученныеДанные.ДополнительныеСвойства.Вставить("СубконтоКтБУ2",Договор);
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;
	
	Если ДанныеXDTO.КлючевыеСвойства.Свойство("Касса") Тогда 
		Касса = ДанныеXDTO.КлючевыеСвойства.Касса;
	Иначе 
		Касса = ДанныеXDTO.Касса;
	КонецЕсли;
	Если ЗначениеЗаполнено(Касса) Тогда
		Если ТипЗнч(Касса) = Тип("Структура") И 
			Касса.Свойство("Ссылка") = Ложь Тогда
			ИмяПКО = "Справочник_Кассы_Получение_ИзСтруктуры";
		Иначе
			ИмяПКО = "Справочник_Кассы_Получение";
		КонецЕсли;
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Касса", Новый Структура("Значение, ИмяПКО", Касса, ИмяПКО));
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_ПКОКонвертацияВалюты_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УстановкаУчетнойПолитикиОрганизации(?(ДанныеИБ = Неопределено, ПолученныеДанные.Организация, ДанныеИБ.Организация));
	
	ПКО_РКО_ПолучениеСчетКасса(ПолученныеДанные);
	
	ПолученныеДанные.СчетУчетаРасчетовСКонтрагентомБУ = ПланыСчетов.Типовой.ДенежныеСредстваВПутиКонвертацияВалюты;
	
	Если ДанныеИБ = Неопределено Тогда
	
		ОрганизацияЯвляетсяПлательщикомКПН =  ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(ПолученныеДанные.Организация, ПолученныеДанные.Дата);
		
		Если Не ОрганизацияЯвляетсяПлательщикомКПН Тогда
			ПолученныеДанные.УчитыватьКПН = Ложь;
		Иначе
			ПолученныеДанные.УчитыватьКПН = Истина;
		КонецЕсли;	
	
		Если НЕ ПолученныеДанные.УчитыватьКПН Тогда
			ПолученныеДанные.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НеОтражаетсяВНУ;
		Иначе
			ПолученныеДанные.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ;
		КонецЕсли;
	
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ПКОПолучениеНаличныхВБанке_Получение
Процедура ДобавитьПКО_Документ_ПКОПолучениеНаличныхВБанке_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПКОПолучениеНаличныхВБанке_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПриходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПКОПолучениеНаличныхВБанке";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_ПКОПолучениеНаличныхВБанке_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПКОПолучениеНаличныхВБанке_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_ПКОПолучениеНаличныхВБанке";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Касса";
	НоваяСтрока.СвойствоФормата = "Касса";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Кассы_Получение_ИзСтруктуры";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Основание";
	НоваяСтрока.СвойствоФормата = "Основание";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Приложение";
	НоваяСтрока.СвойствоФормата = "Приложение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПринятоОт";
	НоваяСтрока.СвойствоФормата = "ПринятоОт";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетОрганизации";
	НоваяСтрока.СвойствоФормата = "БанковскийСчет";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтатьяДвиженияДенежныхСредств";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетКасса";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_ПКОПолучениеНаличныхВБанке_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПКО.ПолучениеНаличныхДенежныхСредствВБанке;
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);	
	
	ДокументыДвиженияДС_ПолучениеСтатьиДДС(ПолученныеДанные, ДанныеXDTO);
	ПолученныеДанные.Проведен = Истина;
	
	ПолученныеДанные.СчетУчетаРасчетовСКонтрагентомБУ = ПланыСчетов.Типовой.ДенежныеСредстваНаТекущихБанковскихСчетах;
	
	Если ДанныеXDTO.КлючевыеСвойства.Свойство("Касса") Тогда 
		Касса = ДанныеXDTO.КлючевыеСвойства.Касса;
	Иначе 
		Касса = ДанныеXDTO.Касса;
	КонецЕсли;
	Если ЗначениеЗаполнено(Касса) Тогда
		Если ТипЗнч(Касса) = Тип("Структура") И 
			Касса.Свойство("Ссылка") = Ложь Тогда
			ИмяПКО = "Справочник_Кассы_Получение_ИзСтруктуры";
		Иначе
			ИмяПКО = "Справочник_Кассы_Получение";
		КонецЕсли;
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Касса", Новый Структура("Значение, ИмяПКО", Касса, ИмяПКО));
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_ПКОПолучениеНаличныхВБанке_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УстановкаУчетнойПолитикиОрганизации(?(ДанныеИБ = Неопределено, ПолученныеДанные.Организация, ДанныеИБ.Организация));
	
	ПКО_РКО_ПолучениеСчетКасса(ПолученныеДанные);
	
	Если ДанныеИБ = Неопределено Тогда
	
		ОрганизацияЯвляетсяПлательщикомКПН =  ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(ПолученныеДанные.Организация, ПолученныеДанные.Дата);
		
		Если Не ОрганизацияЯвляетсяПлательщикомКПН Тогда
			ПолученныеДанные.УчитыватьКПН = Ложь;
		Иначе
			ПолученныеДанные.УчитыватьКПН = Истина;
		КонецЕсли;	
	
		Если НЕ ПолученныеДанные.УчитыватьКПН Тогда
			ПолученныеДанные.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НеОтражаетсяВНУ;
		Иначе
			ПолученныеДанные.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ;
		КонецЕсли;
	
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ПКОПрочееПоступление_Получение
Процедура ДобавитьПКО_Документ_ПКОПрочееПоступление_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПКОПрочееПоступление_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПриходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПКОПрочееПоступление";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_ПКОПрочееПоступление_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПКОПрочееПоступление_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_ПКОПолучениеНаличныхВБанке";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Касса";
	НоваяСтрока.СвойствоФормата = "Касса";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Кассы_Получение_ИзСтруктуры";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Основание";
	НоваяСтрока.СвойствоФормата = "Основание";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Приложение";
	НоваяСтрока.СвойствоФормата = "Приложение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПринятоОт";
	НоваяСтрока.СвойствоФормата = "ПринятоОт";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтатьяДвиженияДенежныхСредств";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетКасса";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетУчетаРасчетовСКонтрагентомБУ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_ПКОПрочееПоступление_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствПрочее;
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);	
	
	ДокументыДвиженияДС_ПолучениеСтатьиДДС(ПолученныеДанные, ДанныеXDTO);
	ПолученныеДанные.Проведен = Истина;
	
	ЗаполнитьСчетУчетаРасчетовВПрочейОперацииДДС(ПолученныеДанные, ДанныеXDTO);
	
	Если ДанныеXDTO.КлючевыеСвойства.Свойство("Касса") Тогда 
		Касса = ДанныеXDTO.КлючевыеСвойства.Касса;
	Иначе 
		Касса = ДанныеXDTO.Касса;
	КонецЕсли;
	Если ЗначениеЗаполнено(Касса) Тогда
		Если ТипЗнч(Касса) = Тип("Структура") И 
			Касса.Свойство("Ссылка") = Ложь Тогда
			ИмяПКО = "Справочник_Кассы_Получение_ИзСтруктуры";
		Иначе
			ИмяПКО = "Справочник_Кассы_Получение";
		КонецЕсли;
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Касса", Новый Структура("Значение, ИмяПКО", Касса, ИмяПКО));
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_ПКОПрочееПоступление_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УстановкаУчетнойПолитикиОрганизации(?(ДанныеИБ = Неопределено, ПолученныеДанные.Организация, ДанныеИБ.Организация));
	
	ПКО_РКО_ПолучениеСчетКасса(ПолученныеДанные);
	
	Если ДанныеИБ = Неопределено Тогда
	
		ОрганизацияЯвляетсяПлательщикомКПН =  ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(ПолученныеДанные.Организация, ПолученныеДанные.Дата);
		
		Если Не ОрганизацияЯвляетсяПлательщикомКПН Тогда
			ПолученныеДанные.УчитыватьКПН = Ложь;
		Иначе
			ПолученныеДанные.УчитыватьКПН = Истина;
		КонецЕсли;	
	
		Если НЕ ПолученныеДанные.УчитыватьКПН Тогда
			ПолученныеДанные.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НеОтражаетсяВНУ;
		Иначе
			ПолученныеДанные.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ;
		КонецЕсли;
	
	КонецЕсли; 
	
	Если ДанныеИБ <> Неопределено Тогда
		Если ЗначениеЗаполнено(ДанныеИБ.СчетУчетаРасчетовСКонтрагентомБУ) Тогда
			ПолученныеДанные.СчетУчетаРасчетовСКонтрагентомБУ = ДанныеИБ.СчетУчетаРасчетовСКонтрагентомБУ;
		КонецЕсли;	
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ПКОПрочиеДоходы_Получение
Процедура ДобавитьПКО_Документ_ПКОПрочиеДоходы_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПКОПрочиеДоходы_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПриходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПКОПрочиеДоходы";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_ПКОПрочиеДоходы_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПКОПрочиеДоходы_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_ПКОПолучениеНаличныхВБанке";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Касса";
	НоваяСтрока.СвойствоФормата = "Касса";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Кассы_Получение_ИзСтруктуры";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Основание";
	НоваяСтрока.СвойствоФормата = "Основание";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Приложение";
	НоваяСтрока.СвойствоФормата = "Приложение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПринятоОт";
	НоваяСтрока.СвойствоФормата = "ПринятоОт";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтатьяДвиженияДенежныхСредств";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетКасса";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетУчетаРасчетовСКонтрагентомБУ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_ПКОПрочиеДоходы_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствПрочее;
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);	
	
	ДокументыДвиженияДС_ПолучениеСтатьиДДС(ПолученныеДанные, ДанныеXDTO);
	ПолученныеДанные.Проведен = Истина;
	
	ЗаполнитьСчетУчетаРасчетовВПрочейОперацииДДС(ПолученныеДанные, ДанныеXDTO);
	
	Если ДанныеXDTO.КлючевыеСвойства.Свойство("Касса") Тогда 
		Касса = ДанныеXDTO.КлючевыеСвойства.Касса;
	Иначе 
		Касса = ДанныеXDTO.Касса;
	КонецЕсли;
	Если ЗначениеЗаполнено(Касса) Тогда
		Если ТипЗнч(Касса) = Тип("Структура") И 
			Касса.Свойство("Ссылка") = Ложь Тогда
			ИмяПКО = "Справочник_Кассы_Получение_ИзСтруктуры";
		Иначе
			ИмяПКО = "Справочник_Кассы_Получение";
		КонецЕсли;
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Касса", Новый Структура("Значение, ИмяПКО", Касса, ИмяПКО));
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_ПКОПрочиеДоходы_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УстановкаУчетнойПолитикиОрганизации(?(ДанныеИБ = Неопределено, ПолученныеДанные.Организация, ДанныеИБ.Организация));
	
	ПКО_РКО_ПолучениеСчетКасса(ПолученныеДанные);
	
	Если ДанныеИБ = Неопределено Тогда
	
		ОрганизацияЯвляетсяПлательщикомКПН =  ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(ПолученныеДанные.Организация, ПолученныеДанные.Дата);
		
		Если Не ОрганизацияЯвляетсяПлательщикомКПН Тогда
			ПолученныеДанные.УчитыватьКПН = Ложь;
		Иначе
			ПолученныеДанные.УчитыватьКПН = Истина;
		КонецЕсли;	
	
		Если НЕ ПолученныеДанные.УчитыватьКПН Тогда
			ПолученныеДанные.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НеОтражаетсяВНУ;
		Иначе
			ПолученныеДанные.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ;
		КонецЕсли;
	
	КонецЕсли;
	
	Если ДанныеИБ <> Неопределено Тогда
		Если ЗначениеЗаполнено(ДанныеИБ.СчетУчетаРасчетовСКонтрагентомБУ) Тогда
			ПолученныеДанные.СчетУчетаРасчетовСКонтрагентомБУ = ДанныеИБ.СчетУчетаРасчетовСКонтрагентомБУ;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ПКОРасчетыСКонтрагентами_Получение
Процедура ДобавитьПКО_Документ_ПКОРасчетыСКонтрагентами_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПКОРасчетыСКонтрагентами_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПриходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПКОРасчетыСКонтрагентами";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_ПКОРасчетыСКонтрагентами_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПКОРасчетыСКонтрагентами_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_ПКОПолучениеНаличныхВБанке";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.СвойствоФормата = "ВидРасчетов";
	НоваяСтрока.ПравилоКонвертацииСвойства = "ВидыОперацийПКО_РасчетыСКонтрагентами";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Касса";
	НоваяСтрока.СвойствоФормата = "Касса";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Кассы_Получение_ИзСтруктуры";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Основание";
	НоваяСтрока.СвойствоФормата = "Основание";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Приложение";
	НоваяСтрока.СвойствоФормата = "Приложение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПринятоОт";
	НоваяСтрока.СвойствоФормата = "ПринятоОт";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетКасса";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетУчетаРасчетовСКонтрагентомБУ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоговорКонтрагента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КратностьВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КурсВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтатьяДвиженияДенежныхСредств";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаПлатежа";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетУчетаРасчетовСКонтрагентомБУ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_ПКОРасчетыСКонтрагентами_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);	
	
	ПолученныеДанные.Проведен = Истина;
	
	МассивСтрокРасшифровка = Новый Массив;
	Если ДанныеXDTO.Свойство("РасшифровкаПлатежа") И ЗначениеЗаполнено(ДанныеXDTO.РасшифровкаПлатежа) 
		И ДанныеXDTO.РасшифровкаПлатежа.Количество() > 0 Тогда
		
		//Расшифровка платежа
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Договор","ДоговорКонтрагента");
		ПравилаЗаполнения.Вставить("Сумма","СуммаПлатежа");
		ПравилаЗаполнения.Вставить("СуммаВзаиморасчетов", "СуммаВзаиморасчетов");
		ПравилаЗаполнения.Вставить("КурсВзаиморасчетов", "КурсВзаиморасчетов");
		ПравилаЗаполнения.Вставить("КратностьВзаиморасчетов", "КратностьВзаиморасчетов");
		ПравилаЗаполнения.Вставить("СтатьяДДС","СтатьяДвиженияДенежныхСредств");
		ПравилаЗаполнения.Вставить("СтавкаНДС", "СтавкаНДС");
		ПравилаЗаполнения.Вставить("СуммаНДС", "СуммаНДС");
		ПравилаЗаполнения.Вставить("СчетУчетаРасчетовСКонтрагентом", "СчетУчетаРасчетовСКонтрагентомБУ");
		
		Для Каждого Строка Из ДанныеXDTO.РасшифровкаПлатежа Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			Если ЗначениеЗаполнено(Строка.Договор) И ТипЗнч(Строка.Договор) = Тип("Структура") И
				Строка.Договор.Свойство("Ссылка") = ЛОЖЬ Тогда
				СтруктураДанныхСтроки.Вставить("ДоговорКонтрагента", Новый Структура("Значение, ИмяПКО", Строка.Договор, "Справочник_ДоговорыКонтрагентов_ИзСтруктуры"));
			КонецЕсли;
			
			ОбработатьСтавкуНДСПриПолучении(Строка, СтруктураДанныхСтроки, КомпонентыОбмена.ПараметрыКонвертации);
			
			МассивСтрокРасшифровка.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	Если МассивСтрокРасшифровка.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("РасшифровкаПлатежа", МассивСтрокРасшифровка);
		
		Если ДанныеXDTO.ВидРасчетов.Значение = "Прочее" Тогда
			ПолученныеДанные.СчетУчетаРасчетовСКонтрагентомБУ = ПланыСчетов.Типовой.НайтиПоКоду(МассивСтрокРасшифровка[0].СчетУчетаРасчетовСКонтрагентомБУ);
			ПолученныеДанные.СчетУчетаРасчетовСКонтрагентомНУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", ПолученныеДанные.СчетУчетаРасчетовСКонтрагентомБУ));
		КонецЕсли;		
	КонецЕсли;
	
	Если ДанныеXDTO.КлючевыеСвойства.Свойство("Касса") Тогда 
		Касса = ДанныеXDTO.КлючевыеСвойства.Касса;
	Иначе 
		Касса = ДанныеXDTO.Касса;
	КонецЕсли;
	Если ЗначениеЗаполнено(Касса) Тогда
		Если ТипЗнч(Касса) = Тип("Структура") И 
			Касса.Свойство("Ссылка") = Ложь Тогда
			ИмяПКО = "Справочник_Кассы_Получение_ИзСтруктуры";
		Иначе
			ИмяПКО = "Справочник_Кассы_Получение";
		КонецЕсли;
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Касса", Новый Структура("Значение, ИмяПКО", Касса, ИмяПКО));
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_ПКОРасчетыСКонтрагентами_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УстановкаУчетнойПолитикиОрганизации(?(ДанныеИБ = Неопределено, ПолученныеДанные.Организация, ДанныеИБ.Организация));
	
	ПКО_РКО_ПолучениеСчетКасса(ПолученныеДанные);
	//Заполнение счетов расчетов
	
	Если ДанныеИБ = Неопределено Тогда
	
		ОрганизацияЯвляетсяПлательщикомКПН =  ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(ПолученныеДанные.Организация, ПолученныеДанные.Дата);
		
		Если Не ОрганизацияЯвляетсяПлательщикомКПН Тогда
			ПолученныеДанные.УчитыватьКПН = Ложь;
		Иначе
			ПолученныеДанные.УчитыватьКПН = Истина;
		КонецЕсли;	
	
		Если НЕ ПолученныеДанные.УчитыватьКПН Тогда
			ПолученныеДанные.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НеОтражаетсяВНУ;
		Иначе
			ПолученныеДанные.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ;
		КонецЕсли;
	
		Возврат;
	КонецЕсли;
	
	Если ДанныеИБ <> Неопределено Тогда
		Если ЗначениеЗаполнено(ДанныеИБ.СчетУчетаРасчетовСКонтрагентомБУ) Тогда
			ПолученныеДанные.СчетУчетаРасчетовСКонтрагентомБУ = ДанныеИБ.СчетУчетаРасчетовСКонтрагентомБУ;
		КонецЕсли;
		Если ЗначениеЗаполнено(ДанныеИБ.СчетУчетаРасчетовСКонтрагентомНУ) Тогда
			ПолученныеДанные.СчетУчетаРасчетовСКонтрагентомНУ = ДанныеИБ.СчетУчетаРасчетовСКонтрагентомНУ;
		КонецЕсли;		
	КонецЕсли;	
	
	// Заменяем свойства, которые получили из XDTO
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
	
	// Восстанавливаем "затертые" данные
	//РасшифровкаПлатежа
	МассивКлючевыхПолей = Новый Массив;
	МассивКлючевыхПолей.Добавить("ДоговорКонтрагента");
	МассивКлючевыхПолей.Добавить("СуммаПлатежа");
	МассивКлючевыхПолей.Добавить("СуммаВзаиморасчетов");
	МассивКлючевыхПолей.Добавить("КурсВзаиморасчетов");
	МассивКлючевыхПолей.Добавить("КратностьВзаиморасчетов");
	МассивКлючевыхПолей.Добавить("СтатьяДвиженияДенежныхСредств");
	
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.РасшифровкаПлатежа,
		ДанныеИБ.РасшифровкаПлатежа,
		МассивКлючевыхПолей,
		"Сделка, СчетУчетаРасчетовСКонтрагентомБУ, СчетУчетаРасчетовПоАвансам, СтавкаНДС");
	ДанныеИБ.РасшифровкаПлатежа.Загрузить(ПолученныеДанные.РасшифровкаПлатежа.Выгрузить());
	
	
	ПолученныеДанные = Неопределено;
КонецПроцедуры
#КонецОбласти
#Область Документ_ПКОРасчетыССотрудниками_Получение
Процедура ДобавитьПКО_Документ_ПКОРасчетыССотрудниками_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПКОРасчетыССотрудниками_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПриходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПКОРасчетыССотрудниками";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_ПКОРасчетыССотрудниками_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПКОРасчетыССотрудниками_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_ПКОПолучениеНаличныхВБанке";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.СвойствоФормата = "ВидРасчетов";
	НоваяСтрока.ПравилоКонвертацииСвойства = "ВидыОперацийПКО_РасчетыССотрудниками";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Касса";
	НоваяСтрока.СвойствоФормата = "Касса";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Кассы_Получение_ИзСтруктуры";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Сотрудник";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ФизическиеЛица_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Основание";
	НоваяСтрока.СвойствоФормата = "Основание";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Приложение";
	НоваяСтрока.СвойствоФормата = "Приложение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПринятоОт";
	НоваяСтрока.СвойствоФормата = "ПринятоОт";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидЗадолженностиПодотчетногоЛица";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтатьяДвиженияДенежныхСредств";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетКасса";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтатьяДвиженияДенежныхСредств";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаПлатежа";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_ПКОРасчетыССотрудниками_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);	
	ДокументыДвиженияДС_ПолучениеСтатьиДДС(ПолученныеДанные, ДанныеXDTO);
	ПолученныеДанные.Проведен = Истина;
	
	Если ДанныеXDTO.КлючевыеСвойства.Свойство("Касса") Тогда 
		Касса = ДанныеXDTO.КлючевыеСвойства.Касса;
	Иначе 
		Касса = ДанныеXDTO.Касса;
	КонецЕсли;
	Если ЗначениеЗаполнено(Касса) Тогда
		Если ТипЗнч(Касса) = Тип("Структура") И 
			Касса.Свойство("Ссылка") = Ложь Тогда
			ИмяПКО = "Справочник_Кассы_Получение_ИзСтруктуры";
		Иначе
			ИмяПКО = "Справочник_Кассы_Получение";
		КонецЕсли;
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Касса", Новый Структура("Значение, ИмяПКО", Касса, ИмяПКО));
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_ПКОРасчетыССотрудниками_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УстановкаУчетнойПолитикиОрганизации(?(ДанныеИБ = Неопределено, ПолученныеДанные.Организация, ДанныеИБ.Организация));
	
	ПКО_РКО_ПолучениеСчетКасса(ПолученныеДанные);
	
	Если ДанныеИБ = Неопределено Тогда
	
		ОрганизацияЯвляетсяПлательщикомКПН =  ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(ПолученныеДанные.Организация, ПолученныеДанные.Дата);
		
		Если Не ОрганизацияЯвляетсяПлательщикомКПН Тогда
			ПолученныеДанные.УчитыватьКПН = Ложь;
		Иначе
			ПолученныеДанные.УчитыватьКПН = Истина;
		КонецЕсли;	
	
		Если НЕ ПолученныеДанные.УчитыватьКПН Тогда
			ПолученныеДанные.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НеОтражаетсяВНУ;
		Иначе
			ПолученныеДанные.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ;
		КонецЕсли;
				
	КонецЕсли;
	
	ДанныеДляЗаполнения = ?(ДанныеИБ = Неопределено, ПолученныеДанные, ДанныеИБ);
	
	Если ДанныеДляЗаполнения.ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПодотчетником Тогда 
		
		Если Не ЗначениеЗаполнено(ДанныеДляЗаполнения.СчетУчетаРасчетовСКонтрагентомБУ) Тогда 
			ДанныеДляЗаполнения.СчетУчетаРасчетовСКонтрагентомБУ = ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПодотчетныхЛиц;
		КонецЕсли;	 
	
		Если ДанныеДляЗаполнения.ВыдачаВПодотчет.Количество() = 0 Тогда 	
			НоваяСтрока = ДанныеДляЗаполнения.ВыдачаВПодотчет.Добавить();	
		Иначе                                                        	
			НоваяСтрока = ДанныеДляЗаполнения.ВыдачаВПодотчет[0]; 		
		КонецЕсли;
			
		Если Не ЗначениеЗаполнено(НоваяСтрока.ВидЗадолженностиПодотчетногоЛица) Тогда 
			НоваяСтрока.ВидЗадолженностиПодотчетногоЛица = Перечисления.ВидыЗадолженностиПодотчетныхЛиц.Прочие;
		КонецЕсли;	
		НоваяСтрока.СтатьяДвиженияДенежныхСредств 	= ДанныеДляЗаполнения.СтатьяДвиженияДенежныхСредств;
		НоваяСтрока.СуммаПлатежа 					= ДанныеДляЗаполнения.СуммаДокумента;			
				
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ПКОРасчетыССотрудниками_Получение_ЗУП
Процедура ДобавитьПКО_Документ_ПКОРасчетыССотрудниками_Получение_ЗУП(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПКОРасчетыССотрудниками_Получение_ЗУП";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПриходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПКОРасчетыССотрудниками";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_ПКОРасчетыССотрудниками_Получение_ЗУП_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПКОРасчетыССотрудниками_Получение_ЗУП_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Касса";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Сотрудник";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ФизическиеЛица_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтатьяДвиженияДенежныхСредств";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетКасса";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_ПКОРасчетыССотрудниками_Получение_ЗУП_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);	
	ПолученныеДанные.Проведен = Истина;
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствРаботником;
	ДокументыДвиженияДС_ПолучениеСтатьиДДС(ПолученныеДанные, ДанныеXDTO);
	
	Если ДанныеXDTO.Свойство("Сотрудник") Тогда
		Если ЗначениеЗаполнено(ДанныеXDTO.Сотрудник) Тогда
			ПолученныеДанные.Контрагент  = ФизическоеЛицоДляЗагрузки(ДанныеXDTO.Сотрудник);
		КонецЕсли;
	Иначе
		ПолученныеДанные.Контрагент  = ФизическоеЛицоПоУмолчанию();
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_ПКОРасчетыССотрудниками_Получение_ЗУП_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УстановкаУчетнойПолитикиОрганизации(?(ДанныеИБ = Неопределено, ПолученныеДанные.Организация, ДанныеИБ.Организация));
	
	ПКО_РКО_ПолучениеСчетКасса(ПолученныеДанные);
	
	Если ДанныеИБ = Неопределено Тогда
	
		ОрганизацияЯвляетсяПлательщикомКПН =  ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(ПолученныеДанные.Организация, ПолученныеДанные.Дата);
		
		Если Не ОрганизацияЯвляетсяПлательщикомКПН Тогда
			ПолученныеДанные.УчитыватьКПН = Ложь;
		Иначе
			ПолученныеДанные.УчитыватьКПН = Истина;
		КонецЕсли;	
	
		Если НЕ ПолученныеДанные.УчитыватьКПН Тогда
			ПолученныеДанные.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НеОтражаетсяВНУ;
		Иначе
			ПолученныеДанные.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ;
		КонецЕсли;
				
	КонецЕсли;
	
	ДанныеДляЗаполнения = ?(ДанныеИБ = Неопределено, ПолученныеДанные, ДанныеИБ);
	
	ПолученныеДанные.Касса = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПолученныеДанные.Организация, "ОсновнаяКасса");
КонецПроцедуры
#КонецОбласти
#Область Документ_ПКОРозничнаяВыручка_Получение
Процедура ДобавитьПКО_Документ_ПКОРозничнаяВыручка_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПКОРозничнаяВыручка_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПриходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПКОРозничнаяВыручка";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_ПКОРозничнаяВыручка_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПКОРозничнаяВыручка_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_ПКОПолучениеНаличныхВБанке";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Касса";
	НоваяСтрока.СвойствоФормата = "Касса";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Кассы_Получение_ИзСтруктуры";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Основание";
	НоваяСтрока.СвойствоФормата = "Основание";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Приложение";
	НоваяСтрока.СвойствоФормата = "Приложение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПринятоОт";
	НоваяСтрока.СвойствоФормата = "ПринятоОт";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтатьяДвиженияДенежныхСредств";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетКасса";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетУчетаРасчетовСКонтрагентомБУ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетУчетаРасчетовСКонтрагентомНУ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_ПКОРозничнаяВыручка_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствПрочее;
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);	
	ПолученныеДанные.Проведен = Истина;
	
	Если ДанныеXDTO.КлючевыеСвойства.Свойство("Касса") Тогда 
		Касса = ДанныеXDTO.КлючевыеСвойства.Касса;
	Иначе 
		Касса = ДанныеXDTO.Касса;
	КонецЕсли;
	Если ЗначениеЗаполнено(Касса) Тогда
		Если ТипЗнч(Касса) = Тип("Структура") И 
			Касса.Свойство("Ссылка") = Ложь Тогда
			ИмяПКО = "Справочник_Кассы_Получение_ИзСтруктуры";
		Иначе
			ИмяПКО = "Справочник_Кассы_Получение";
		КонецЕсли;
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Касса", Новый Структура("Значение, ИмяПКО", Касса, ИмяПКО));
	КонецЕсли;
	
	Если ДанныеXDTO.Свойство("AdditionalInfo") И ТипЗнч(ДанныеXDTO.AdditionalInfo) = Тип("Структура") Тогда
	
		ДопДанные = ДанныеXDTO.AdditionalInfo;
		
		Если ДопДанные.Свойство("СчетУчетаРасчетовСКонтрагентомБУ") Тогда
			ПолученныеДанные.СчетУчетаРасчетовСКонтрагентомБУ = ПланыСчетов.Типовой.НайтиПоКоду(ДопДанные.СчетУчетаРасчетовСКонтрагентомБУ);
			ПолученныеДанные.СчетУчетаРасчетовСКонтрагентомНУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", ДопДанные.СчетУчетаРасчетовСКонтрагентомБУ));;
		КонецЕсли;		
		
		Если ДопДанные.Свойство("СтатьяДвиженияДенежныхСредств") Тогда
			ПолученныеДанные.СтатьяДвиженияДенежныхСредств = ДопДанные.СтатьяДвиженияДенежныхСредств;
		КонецЕсли;		
		
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_ПКОРозничнаяВыручка_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УстановкаУчетнойПолитикиОрганизации(?(ДанныеИБ = Неопределено, ПолученныеДанные.Организация, ДанныеИБ.Организация));
	
	ПКО_РКО_ПолучениеСчетКасса(ПолученныеДанные);
	
	Если ДанныеИБ = Неопределено Тогда
		
		ОрганизацияЯвляетсяПлательщикомКПН =  ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(ПолученныеДанные.Организация, ПолученныеДанные.Дата);
		
		Если Не ОрганизацияЯвляетсяПлательщикомКПН Тогда
			ПолученныеДанные.УчитыватьКПН = Ложь;
		Иначе
			ПолученныеДанные.УчитыватьКПН = Истина;
		КонецЕсли;	
	
		Если НЕ ПолученныеДанные.УчитыватьКПН Тогда
			ПолученныеДанные.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НеОтражаетсяВНУ;
		Иначе
			ПолученныеДанные.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ;
		КонецЕсли;
	
		Возврат;
	КонецЕсли;
	
	Если ДанныеИБ <> Неопределено Тогда
		Если ЗначениеЗаполнено(ДанныеИБ.СчетУчетаРасчетовСКонтрагентомБУ) Тогда
			ПолученныеДанные.СчетУчетаРасчетовСКонтрагентомБУ = ДанныеИБ.СчетУчетаРасчетовСКонтрагентомБУ;
		КонецЕсли;
		Если ЗначениеЗаполнено(ДанныеИБ.СчетУчетаРасчетовСКонтрагентомНУ) Тогда
			ПолученныеДанные.СчетУчетаРасчетовСКонтрагентомНУ = ДанныеИБ.СчетУчетаРасчетовСКонтрагентомНУ;
		КонецЕсли;		
	КонецЕсли;	
	
	// Заменяем свойства, которые получили из XDTO
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
	
	ПолученныеДанные = Неопределено;
КонецПроцедуры
#КонецОбласти
#Область Документ_ПОПБДСКонвертацияВалюты_Получение
Процедура ДобавитьПКО_Документ_ПОПБДСКонвертацияВалюты_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПОПБДСКонвертацияВалюты_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПлатежныйОрдерПоступлениеДенежныхСредств;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПБДСКонвертацияВалюты";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_ПОПБДСКонвертацияВалюты_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПОПБДСКонвертацияВалюты_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_ПБДС";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВыписки";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтруктурноеПодразделениеПолучатель";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетКонтрагента";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетКонтрагента";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетОрганизации";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоговорКонтрагента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КратностьВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КурсВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КурсНаДатуПриобретенияРеализацииВалюты";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КурсНаДатуПриобретенияРеализацииВалюты";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтатьяДвиженияДенежныхСредств";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаПлатежа";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетБанк";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_ПОПБДСКонвертацияВалюты_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПБДС_СБДС_ПолучениеДатаПроведен(ПолученныеДанные, ДанныеXDTO);
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);	
	
	МассивСтрокРасшифровка = Новый Массив;
	Если ДанныеXDTO.Свойство("РасшифровкаПлатежа")
		И ЗначениеЗаполнено(ДанныеXDTO.РасшифровкаПлатежа) 
		И ДанныеXDTO.РасшифровкаПлатежа.Количество() > 0 Тогда
		
		//Валюта конвертации
		ВалютаКонвертации = ДанныеXDTO.РасшифровкаПлатежа[0].ВалютаКонвертации;
		ИмяПКОВалюта = "";
		Если ЗначениеЗаполнено(ВалютаКонвертации) Тогда
			
			Если ВалютаКонвертации.Свойство("Ссылка") Тогда
				ИмяПКОВалюта = "Справочник_Валюты";
			Иначе
				ИмяПКОВалюта = "Справочник_Валюты_ИзСтруктуры";
			КонецЕсли;
		КонецЕсли;
		ПКОВалюты = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, ИмяПКОВалюта);
		ВалютаКонвертации = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, ВалютаКонвертации, ПКОВалюты,"ПолучитьСсылку");
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ВалютаКонвертации", ВалютаКонвертации);
	
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("СтатьяДДС","СтатьяДвиженияДенежныхСредств");
		
		ПравилаЗаполнения.Вставить("Сумма","СуммаПлатежа");
		ПравилаЗаполнения.Вставить("СуммаВал","СуммаВзаиморасчетов");
		ПравилаЗаполнения.Вставить("КратностьКонвертации","КратностьВзаиморасчетов");
		ПравилаЗаполнения.Вставить("КурсКонвертации","КурсВзаиморасчетов");
		ПравилаЗаполнения.Вставить("КурсЦБНаДатуКонвертации","КурсНаДатуПриобретенияРеализацииВалюты");
		
		Для Каждого Строка Из ДанныеXDTO.РасшифровкаПлатежа Цикл
			
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			ПолученныеДанные.КурсНаДатуПриобретенияРеализацииВалюты = СтруктураДанныхСтроки.КурсНаДатуПриобретенияРеализацииВалюты;
			Договор = ДанныеXDTO.РасшифровкаПлатежа[0].Договор;
			Если ЗначениеЗаполнено(Строка.Договор) Тогда
				Если ТипЗнч(Строка.Договор) = Тип("Структура") И Строка.Договор.Свойство("Ссылка") = ЛОЖЬ Тогда
					СтруктураДанныхСтроки.Вставить("ДоговорКонтрагента", Новый Структура("Значение, ИмяПКО", Строка.Договор, "Справочник_ДоговорыКонтрагентов_ИзСтруктуры"));
				Иначе
					СтруктураДанныхСтроки.Вставить("ДоговорКонтрагента",Строка.Договор);
				КонецЕсли;
			КонецЕсли;	
	
			МассивСтрокРасшифровка.Добавить(СтруктураДанныхСтроки);
			
		КонецЦикла;
		Если МассивСтрокРасшифровка.Количество() > 0 Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("РасшифровкаПлатежа", МассивСтрокРасшифровка);
		КонецЕсли;
	
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_ПОПБДСКонвертацияВалюты_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УстановкаУчетнойПолитикиОрганизации(?(ДанныеИБ = Неопределено, ПолученныеДанные.Организация, ДанныеИБ.Организация));
	
	Если ДанныеИБ = Неопределено Тогда
		
		ОрганизацияЯвляетсяПлательщикомКПН =  ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(ПолученныеДанные.Организация, ПолученныеДанные.Дата);
		
		Если Не ОрганизацияЯвляетсяПлательщикомКПН Тогда
			ПолученныеДанные.УчитыватьКПН = Ложь;
		Иначе
			ПолученныеДанные.УчитыватьКПН = Истина;
		КонецЕсли;	
	
		Если НЕ ПолученныеДанные.УчитыватьКПН Тогда
			ПолученныеДанные.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НеОтражаетсяВНУ;
		Иначе
			ПолученныеДанные.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ;
		КонецЕсли;
		
	КонецЕсли;
	
	ПБДС_СБДС_ПолучениеСчетБанк(ПолученныеДанные);
	
	ВалютаКонвертации = ПолученныеДанные.ДополнительныеСвойства.ВалютаКонвертации;
	АлгоритмКонвертации = "";
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	Если ПолученныеДанные.ВалютаДокумента <> ВалютаРегламентированногоУчета
		И ВалютаКонвертации = ВалютаРегламентированногоУчета Тогда
		АлгоритмКонвертации = "ПриобретениеИностраннойВалюты";
		ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПриобретениеИностраннойВалюты;
	Иначе
		АлгоритмКонвертации = "ПоступленияОтПродажиИностраннойВалюты";
		ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты;
	КонецЕсли;
	
	Для Каждого СтрокаТЧ ИЗ ПолученныеДанные.РасшифровкаПлатежа Цикл
		// СчетУчетаРасчетовСКонтрагентом
		Если АлгоритмКонвертации = "ПриобретениеИностраннойВалюты" Тогда
			СтрокаТЧ.СчетУчетаРасчетовСКонтрагентомБУ = ПланыСчетов.Типовой.ДенежныеСредстваВПутиКонвертацияВалюты; 
		ИначеЕсли АлгоритмКонвертации = "ПоступленияОтПродажиИностраннойВалюты" Тогда
			СтрокаТЧ.СчетУчетаРасчетовСКонтрагентомБУ = ПланыСчетов.Типовой.ДенежныеСредстваВПутиКонвертацияВалюты; 
		КонецЕсли;
	КонецЦикла;
	
	Если ДанныеИБ <> Неопределено Тогда
		
		// Заменяем свойства, которые получили из XDTO
		ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
		
		// Восстанавливаем "затертые" данные
		//РасшифровкаПлатежа
		МассивКлючевыхПолей = Новый Массив;
		МассивКлючевыхПолей.Добавить("ДоговорКонтрагента");
		МассивКлючевыхПолей.Добавить("СуммаПлатежа");
		МассивКлючевыхПолей.Добавить("СуммаВзаиморасчетов");
		МассивКлючевыхПолей.Добавить("КурсВзаиморасчетов");
		МассивКлючевыхПолей.Добавить("КратностьВзаиморасчетов");
		МассивКлючевыхПолей.Добавить("КурсНаДатуПриобретенияРеализацииВалюты");
		МассивКлючевыхПолей.Добавить("СтатьяДвиженияДенежныхСредств");
		
		ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
			ПолученныеДанные.РасшифровкаПлатежа,
			ДанныеИБ.РасшифровкаПлатежа,
			МассивКлючевыхПолей,
			"Сделка, СчетУчетаРасчетовСКонтрагентомБУ, СчетУчетаРасчетовПоАвансам, СтавкаНДС");
		ДанныеИБ.РасшифровкаПлатежа.Загрузить(ПолученныеДанные.РасшифровкаПлатежа.Выгрузить());
	
		
		ПолученныеДанные = Неопределено;
				
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ПОПБДСПрочееПоступление_Получение
Процедура ДобавитьПКО_Документ_ПОПБДСПрочееПоступление_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПОПБДСПрочееПоступление_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПлатежныйОрдерПоступлениеДенежныхСредств;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПБДСПрочееПоступление";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_ПОПБДСПрочееПоступление_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПОПБДСПрочееПоступление_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_ПБДС";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВыписки";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетКонтрагента";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетКонтрагента";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетОрганизации";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтатьяДвиженияДенежныхСредств";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетБанк";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетУчетаРасчетовСКонтрагентомБУ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_ПОПБДСПрочееПоступление_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПБДС_СБДС_ПолучениеДатаПроведен(ПолученныеДанные, ДанныеXDTO);
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);	
		
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочееПоступлениеБезналичныхДенежныхСредств;
	
	ДокументыДвиженияДС_ПолучениеСтатьиДДС(ПолученныеДанные, ДанныеXDTO);
	
	ЗаполнитьСчетУчетаРасчетовВПрочейОперацииДДС(ПолученныеДанные, ДанныеXDTO);
КонецПроцедуры

Процедура ПКО_Документ_ПОПБДСПрочееПоступление_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УстановкаУчетнойПолитикиОрганизации(?(ДанныеИБ = Неопределено, ПолученныеДанные.Организация, ДанныеИБ.Организация));
	
	Если ДанныеИБ = Неопределено Тогда
		
		ОрганизацияЯвляетсяПлательщикомКПН =  ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(ПолученныеДанные.Организация, ПолученныеДанные.Дата);
		
		Если Не ОрганизацияЯвляетсяПлательщикомКПН Тогда
			ПолученныеДанные.УчитыватьКПН = Ложь;
		Иначе
			ПолученныеДанные.УчитыватьКПН = Истина;
		КонецЕсли;	
	
		Если НЕ ПолученныеДанные.УчитыватьКПН Тогда
			ПолученныеДанные.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НеОтражаетсяВНУ;
		Иначе
			ПолученныеДанные.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ;
		КонецЕсли;
		
	КонецЕсли;
	
	ПБДС_СБДС_ПолучениеСчетБанк(ПолученныеДанные);
	
	Если ДанныеИБ <> Неопределено Тогда
		Если ЗначениеЗаполнено(ДанныеИБ.СчетУчетаРасчетовСКонтрагентомБУ) Тогда
			ПолученныеДанные.СчетУчетаРасчетовСКонтрагентомБУ = ДанныеИБ.СчетУчетаРасчетовСКонтрагентомБУ;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ПОПБДСПрочиеДоходы_Получение
Процедура ДобавитьПКО_Документ_ПОПБДСПрочиеДоходы_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПОПБДСПрочиеДоходы_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПлатежныйОрдерПоступлениеДенежныхСредств;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПБДСПрочиеДоходы";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_ПОПБДСПрочиеДоходы_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПОПБДСПрочиеДоходы_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_ПБДС";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВыписки";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтруктурноеПодразделениеПолучатель";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетКонтрагента";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетКонтрагента";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетОрганизации";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтатьяДвиженияДенежныхСредств";
	НоваяСтрока.СвойствоФормата = "СтатьяДДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СубконтоКтБУ1";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДоходов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетБанк";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетУчетаРасчетовСКонтрагентомБУ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_ПОПБДСПрочиеДоходы_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПБДС_СБДС_ПолучениеДатаПроведен(ПолученныеДанные, ДанныеXDTO);
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);	
		
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочееПоступлениеБезналичныхДенежныхСредств;
	ДокументыДвиженияДС_ПолучениеСтатьиДДС(ПолученныеДанные, ДанныеXDTO);
	
	ЗаполнитьСчетУчетаРасчетовВПрочейОперацииДДС(ПолученныеДанные, ДанныеXDTO);
КонецПроцедуры

Процедура ПКО_Документ_ПОПБДСПрочиеДоходы_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УстановкаУчетнойПолитикиОрганизации(?(ДанныеИБ = Неопределено, ПолученныеДанные.Организация, ДанныеИБ.Организация));
	
	Если ДанныеИБ = Неопределено Тогда
		
		ОрганизацияЯвляетсяПлательщикомКПН =  ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(ПолученныеДанные.Организация, ПолученныеДанные.Дата);
		
		Если Не ОрганизацияЯвляетсяПлательщикомКПН Тогда
			ПолученныеДанные.УчитыватьКПН = Ложь;
		Иначе
			ПолученныеДанные.УчитыватьКПН = Истина;
		КонецЕсли;	
	
		Если НЕ ПолученныеДанные.УчитыватьКПН Тогда
			ПолученныеДанные.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НеОтражаетсяВНУ;
		Иначе
			ПолученныеДанные.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ;
		КонецЕсли;
		
	КонецЕсли;
	
	ПБДС_СБДС_ПолучениеСчетБанк(ПолученныеДанные);
	
	Если ДанныеИБ <> Неопределено Тогда
		Если ЗначениеЗаполнено(ДанныеИБ.СчетУчетаРасчетовСКонтрагентомБУ) Тогда
			ПолученныеДанные.СчетУчетаРасчетовСКонтрагентомБУ = ДанныеИБ.СчетУчетаРасчетовСКонтрагентомБУ;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ПОПБДСРасчетыСКонтрагентами_Получение
Процедура ДобавитьПКО_Документ_ПОПБДСРасчетыСКонтрагентами_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПОПБДСРасчетыСКонтрагентами_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПлатежныйОрдерПоступлениеДенежныхСредств;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПБДСРасчетыСКонтрагентами";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_ПОПБДСРасчетыСКонтрагентами_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПОПБДСРасчетыСКонтрагентами_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_ПБДС";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.СвойствоФормата = "ВидРасчетов";
	НоваяСтрока.ПравилоКонвертацииСвойства = "ВидыОперацийПБДСРасчетыСКонтрагентами";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВыписки";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтруктурноеПодразделениеПолучатель";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетКонтрагента";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетКонтрагента";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетОрганизации";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоговорКонтрагента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КратностьВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КурсВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтатьяДвиженияДенежныхСредств";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтатьяДвиженияДенежныхСредств";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаПлатежа";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетБанк";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_ПОПБДСРасчетыСКонтрагентами_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПБДС_СБДС_ПолучениеДатаПроведен(ПолученныеДанные, ДанныеXDTO);
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);	
	
	#Область АлгоритмКонвертации
	АлгоритмКонвертации = "";
	ВидРасчетовXDTO = ДанныеXDTO.ВидРасчетов.Значение;
	Если ВидРасчетовXDTO = "СПокупателем" Тогда
		
		АлгоритмКонвертации = "ОплатаОтПокупателя";
		
	ИначеЕсли ВидРасчетовXDTO = "СПоставщиком" Тогда
		
		АлгоритмКонвертации = "ВозвратОтПоставщика";
		
	ИначеЕсли ВидРасчетовXDTO = "КредитыИЗаймы" Тогда
		
		АлгоритмКонвертации = "РасчетыПоКредитамИЗаймам";
		
	ИначеЕсли ВидРасчетовXDTO = "Прочее" Тогда
		
		АлгоритмКонвертации = "ПрочиеРасчетыСКонтрагентами";
		
	КонецЕсли;
	#КонецОбласти
	
	Если ДанныеXDTO.Свойство("РасшифровкаПлатежа") И ЗначениеЗаполнено(ДанныеXDTO.РасшифровкаПлатежа) 
		И ДанныеXDTO.РасшифровкаПлатежа.Количество() > 0 Тогда
		// СтатьяДвиженияДенежныхСредств
		Если АлгоритмКонвертации = "ОплатаОтПокупателя"
			Или АлгоритмКонвертации = "ВозвратОтПоставщика" Тогда
			
			Если ЗначениеЗаполнено(ДанныеXDTO.РасшифровкаПлатежа[0].СтатьяДДС) Тогда
				ПолученныеДанные.ДополнительныеСвойства.Вставить("СтатьяДвиженияДенежныхСредств", ДанныеXDTO.РасшифровкаПлатежа[0].СтатьяДДС);
			КонецЕсли;
		КонецЕсли;
		МассивСтрокРасшифровка = Новый Массив;
	
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Сумма","СуммаПлатежа");
		
		ПравилаЗаполнения.Вставить("СтатьяДДС","СтатьяДвиженияДенежныхСредств");
		ПравилаЗаполнения.Вставить("Договор","ДоговорКонтрагента");
		ПравилаЗаполнения.Вставить("СуммаВзаиморасчетов", "СуммаВзаиморасчетов");
		ПравилаЗаполнения.Вставить("КурсВзаиморасчетов", "КурсВзаиморасчетов");
		ПравилаЗаполнения.Вставить("КратностьВзаиморасчетов", "КратностьВзаиморасчетов");
		
		Если АлгоритмКонвертации = "ОплатаОтПокупателя"
			Или АлгоритмКонвертации = "ВозвратОтПоставщика" Тогда
			ПравилаЗаполнения.Вставить("СтавкаНДС", "СтавкаНДС");
			ПравилаЗаполнения.Вставить("СуммаНДС", "СуммаНДС");
		КонецЕсли;
		
		Для Каждого Строка Из ДанныеXDTO.РасшифровкаПлатежа Цикл
			
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			Если ЗначениеЗаполнено(Строка.Договор) И ТипЗнч(Строка.Договор) = Тип("Структура") И
				Строка.Договор.Свойство("Ссылка") = ЛОЖЬ Тогда
				СтруктураДанныхСтроки.Вставить("ДоговорКонтрагента", Новый Структура("Значение, ИмяПКО", Строка.Договор, "Справочник_ДоговорыКонтрагентов_ИзСтруктуры"));
			КонецЕсли;
			
			ОбработатьСтавкуНДСПриПолучении(Строка, СтруктураДанныхСтроки, КомпонентыОбмена.ПараметрыКонвертации);
			
			МассивСтрокРасшифровка.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
		ПолученныеДанные.ДополнительныеСвойства.Вставить("РасшифровкаПлатежа", МассивСтрокРасшифровка);
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_ПОПБДСРасчетыСКонтрагентами_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УстановкаУчетнойПолитикиОрганизации(?(ДанныеИБ = Неопределено, ПолученныеДанные.Организация, ДанныеИБ.Организация));
	
	ПБДС_СБДС_ПолучениеСчетБанк(ПолученныеДанные);
	
	Если ДанныеИБ = Неопределено Тогда
	
		ОрганизацияЯвляетсяПлательщикомКПН =  ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(ПолученныеДанные.Организация, ПолученныеДанные.Дата);
		
		Если Не ОрганизацияЯвляетсяПлательщикомКПН Тогда
			ПолученныеДанные.УчитыватьКПН = Ложь;
		Иначе
			ПолученныеДанные.УчитыватьКПН = Истина;
		КонецЕсли;	
	
		Если НЕ ПолученныеДанные.УчитыватьКПН Тогда
			ПолученныеДанные.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НеОтражаетсяВНУ;
		Иначе
			ПолученныеДанные.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ;
		КонецЕсли;
	
	
		Возврат;
		
	КонецЕсли;
		
	
	// Заменяем свойства, которые получили из XDTO
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
	
	// Восстанавливаем "затертые" данные
	//РасшифровкаПлатежа
	МассивКлючевыхПолей = Новый Массив;
	МассивКлючевыхПолей.Добавить("ДоговорКонтрагента");
	МассивКлючевыхПолей.Добавить("СуммаПлатежа");
	МассивКлючевыхПолей.Добавить("СуммаВзаиморасчетов");
	МассивКлючевыхПолей.Добавить("КурсВзаиморасчетов");
	МассивКлючевыхПолей.Добавить("КратностьВзаиморасчетов");
	МассивКлючевыхПолей.Добавить("СтатьяДвиженияДенежныхСредств");
	Если ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПокупателя ИЛИ
			ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПоставщиком Тогда
		МассивКлючевыхПолей.Добавить("СтавкаНДС");
		МассивКлючевыхПолей.Добавить("СуммаНДС");
	КонецЕсли;
	
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.РасшифровкаПлатежа,
		ДанныеИБ.РасшифровкаПлатежа,
		МассивКлючевыхПолей,
		"Сделка, СчетУчетаРасчетовСКонтрагентомБУ, СчетУчетаРасчетовПоАвансам");
	ДанныеИБ.РасшифровкаПлатежа.Загрузить(ПолученныеДанные.РасшифровкаПлатежа.Выгрузить());
	
	
	ПолученныеДанные = Неопределено;
КонецПроцедуры
#КонецОбласти
#Область Документ_ПОПБДСРасчетыССотрудниками_Получение
Процедура ДобавитьПКО_Документ_ПОПБДСРасчетыССотрудниками_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПОПБДСРасчетыССотрудниками_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПлатежныйОрдерПоступлениеДенежныхСредств;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПБДСРасчетыССотрудниками";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_ПОПБДСРасчетыССотрудниками_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПОПБДСРасчетыССотрудниками_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_ПБДС";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВыписки";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СубконтоКтБУ1";
	НоваяСтрока.СвойствоФормата = "Сотрудник";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ФизическиеЛица_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетОрганизации";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтатьяДвиженияДенежныхСредств";
	НоваяСтрока.СвойствоФормата = "СтатьяДДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтатьяДвиженияДенежныхСредств";
	НоваяСтрока.СвойствоФормата = "СтатьяДДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаПлатежа";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетБанк";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетКонтрагента";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетСотрудника";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Получение";

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_ПОПБДСРасчетыССотрудниками_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПБДС_СБДС_ПолучениеДатаПроведен(ПолученныеДанные, ДанныеXDTO);
	
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочееПоступлениеБезналичныхДенежныхСредств;
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);	
	
	ДокументыДвиженияДС_ПолучениеСтатьиДДС(ПолученныеДанные, ДанныеXDTO);
	МассивСтрокРасшифровка = Новый Массив;
	Если ДанныеXDTO.Свойство("РасшифровкаПлатежа")
		И ЗначениеЗаполнено(ДанныеXDTO.РасшифровкаПлатежа)
		И ДанныеXDTO.РасшифровкаПлатежа.Количество() > 0 Тогда
		
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("СтатьяДДС","СтатьяДвиженияДенежныхСредств");
		ПравилаЗаполнения.Вставить("Сумма","СуммаПлатежа");
	
		Для Каждого Строка Из ДанныеXDTO.РасшифровкаПлатежа Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			МассивСтрокРасшифровка.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
		ПолученныеДанные.ДополнительныеСвойства.Вставить("РасшифровкаПлатежа", МассивСтрокРасшифровка);
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_ПОПБДСРасчетыССотрудниками_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УстановкаУчетнойПолитикиОрганизации(?(ДанныеИБ = Неопределено, ПолученныеДанные.Организация, ДанныеИБ.Организация));
	
	ПБДС_СБДС_ПолучениеСчетБанк(ПолученныеДанные);
	
	Если ДанныеИБ = Неопределено Тогда
		
		ОрганизацияЯвляетсяПлательщикомКПН =  ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(ПолученныеДанные.Организация, ПолученныеДанные.Дата);
		
		Если Не ОрганизацияЯвляетсяПлательщикомКПН Тогда
			ПолученныеДанные.УчитыватьКПН = Ложь;
		Иначе
			ПолученныеДанные.УчитыватьКПН = Истина;
		КонецЕсли;	
	
		Если НЕ ПолученныеДанные.УчитыватьКПН Тогда
			ПолученныеДанные.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НеОтражаетсяВНУ;
		Иначе
			ПолученныеДанные.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ;
		КонецЕсли;
		
	КонецЕсли;
	
	
	Если ДанныеИБ <> Неопределено Тогда
		
		ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
		МассивКлючевыхПолей = Новый Массив;
		МассивКлючевыхПолей.Добавить("СтатьяДвиженияДенежныхСредств");
		МассивКлючевыхПолей.Добавить("СуммаПлатежа");
	
		ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
			ПолученныеДанные.РасшифровкаПлатежа,
			ДанныеИБ.РасшифровкаПлатежа,
			МассивКлючевыхПолей,
			"СчетУчетаРасчетовСКонтрагентомБУ,СчетУчетаРасчетовПоАвансам");
		ДанныеИБ.РасшифровкаПлатежа.Загрузить(ПолученныеДанные.РасшифровкаПлатежа.Выгрузить());
		
		ПолученныеДанные = Неопределено;
		
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ПОСБДСКонвертацияВалюты_Получение
Процедура ДобавитьПКО_Документ_ПОСБДСКонвертацияВалюты_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПОСБДСКонвертацияВалюты_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПлатежныйОрдерСписаниеДенежныхСредств;
	ПравилоКонвертации.ОбъектФормата = "Документ.СБДСКонвертацияВалюты";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_ПОСБДСКонвертацияВалюты_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПОСБДСКонвертацияВалюты_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_ПОСБДС";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВыписки";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НазначениеПлатежа";
	НоваяСтрока.СвойствоФормата = "НазначениеПлатежа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПодразделениеОрганизации";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетКонтрагента";
	НоваяСтрока.СвойствоФормата = "БанковскийСчет";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетОрганизации";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоговорКонтрагента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КратностьВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КурсВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтатьяДвиженияДенежныхСредств";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаПлатежа";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетБанк";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетУчетаРасчетовСКонтрагентомБУ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_ПОСБДСКонвертацияВалюты_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПБДС_СБДС_ПолучениеДатаПроведен(ПолученныеДанные, ДанныеXDTO);
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);	
	
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПрочиеРасчетыСКонтрагентами;
	
	
	ПолученныеДанные.СчетУчетаРасчетовСКонтрагентомБУ = ПланыСчетов.Типовой.ДенежныеСредстваВПутиКонвертацияВалюты;
	
	МассивСтрокРасшифровка = Новый Массив;
	Если ДанныеXDTO.Свойство("РасшифровкаПлатежа")
		И ЗначениеЗаполнено(ДанныеXDTO.РасшифровкаПлатежа) 
		И ДанныеXDTO.РасшифровкаПлатежа.Количество() > 0 Тогда
		
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("СтатьяДДС","СтатьяДвиженияДенежныхСредств");
		ПравилаЗаполнения.Вставить("Сумма","СуммаПлатежа");
		ПравилаЗаполнения.Вставить("СуммаВал","СуммаВзаиморасчетов");
		ПравилаЗаполнения.Вставить("КратностьКонвертации","КратностьВзаиморасчетов");
		ПравилаЗаполнения.Вставить("КурсКонвертации","КурсВзаиморасчетов");
		
		Для Каждого Строка Из ДанныеXDTO.РасшифровкаПлатежа Цикл
			
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			
			Договор = Строка.Договор;
			Если ЗначениеЗаполнено(Договор) И ТипЗнч(Договор) = Тип("Структура") И
				Договор.Свойство("Ссылка") = Ложь Тогда
				ИмяПКО = "Справочник_ДоговорыКонтрагентов_ИзСтруктуры";
				СтруктураДанныхСтроки.Вставить("ДоговорКонтрагента",Новый Структура("Значение, ИмяПКО", Договор, ИмяПКО));
			Иначе
				СтруктураДанныхСтроки.Вставить("ДоговорКонтрагента",Договор);
			КонецЕсли;
	
			
			МассивСтрокРасшифровка.Добавить(СтруктураДанныхСтроки);
			
		КонецЦикла;
		Если МассивСтрокРасшифровка.Количество() > 0 Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("РасшифровкаПлатежа", МассивСтрокРасшифровка);
		КонецЕсли;
	
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_ПОСБДСКонвертацияВалюты_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УстановкаУчетнойПолитикиОрганизации(?(ДанныеИБ = Неопределено, ПолученныеДанные.Организация, ДанныеИБ.Организация));
	
	ПБДС_СБДС_ПолучениеСчетБанк(ПолученныеДанные);
	
	Если ДанныеИБ = Неопределено Тогда
		
		ОрганизацияЯвляетсяПлательщикомКПН =  ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(ПолученныеДанные.Организация, ПолученныеДанные.Дата);
		
		Если Не ОрганизацияЯвляетсяПлательщикомКПН Тогда
			ПолученныеДанные.УчитыватьКПН = Ложь;
		Иначе
			ПолученныеДанные.УчитыватьКПН = Истина;
		КонецЕсли;	
	
		Если НЕ ПолученныеДанные.УчитыватьКПН Тогда
			ПолученныеДанные.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НеОтражаетсяВНУ;
		Иначе
			ПолученныеДанные.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ;
		КонецЕсли;
	
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ПОСБДСПереводНаДругойСчет_Получение
Процедура ДобавитьПКО_Документ_ПОСБДСПереводНаДругойСчет_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПОСБДСПереводНаДругойСчет_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПлатежныйОрдерСписаниеДенежныхСредств;
	ПравилоКонвертации.ОбъектФормата = "Документ.СБДСПереводНаДругойСчет";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_ПОСБДСПереводНаДругойСчет_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПОСБДСПереводНаДругойСчет_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_ПОСБДС";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВыписки";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НазначениеПлатежа";
	НоваяСтрока.СвойствоФормата = "НазначениеПлатежа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетКонтрагента";
	НоваяСтрока.СвойствоФормата = "БанковскийСчет";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетОрганизации";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетБанк";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетУчетаРасчетовСКонтрагентомБУ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_ПОСБДСПереводНаДругойСчет_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПБДС_СБДС_ПолучениеДатаПроведен(ПолученныеДанные, ДанныеXDTO);
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПереводНаДругойСчет;
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
КонецПроцедуры

Процедура ПКО_Документ_ПОСБДСПереводНаДругойСчет_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УстановкаУчетнойПолитикиОрганизации(?(ДанныеИБ = Неопределено, ПолученныеДанные.Организация, ДанныеИБ.Организация));
	
	ПБДС_СБДС_ПолучениеСчетБанк(ПолученныеДанные);
	ПолученныеДанные.СчетУчетаРасчетовСКонтрагентомБУ = ПолученныеДанные.СчетБанк;
	
	Если ДанныеИБ = Неопределено Тогда
		
		ОрганизацияЯвляетсяПлательщикомКПН = ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(ПолученныеДанные.Организация, ПолученныеДанные.Дата);
		
		Если Не ОрганизацияЯвляетсяПлательщикомКПН Тогда
			ПолученныеДанные.УчитыватьКПН = Ложь;
		Иначе
			ПолученныеДанные.УчитыватьКПН = Истина;
		КонецЕсли;	
	
		Если НЕ ПолученныеДанные.УчитыватьКПН Тогда
			ПолученныеДанные.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НеОтражаетсяВНУ;
		Иначе
			ПолученныеДанные.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ;
		КонецЕсли;
	
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ПОСБДСПеречислениеЗарПлаты_Получение
Процедура ДобавитьПКО_Документ_ПОСБДСПеречислениеЗарПлаты_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПОСБДСПеречислениеЗарПлаты_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПлатежныйОрдерСписаниеДенежныхСредств;
	ПравилоКонвертации.ОбъектФормата = "Документ.СБДСПеречислениеЗаработнойПлаты";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_ПОСБДСПеречислениеЗарПлаты_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПОСБДСПеречислениеЗарПлаты_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_ПОСБДС";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВыписки";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НазначениеПлатежа";
	НоваяСтрока.СвойствоФормата = "НазначениеПлатежа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетКонтрагента";
	НоваяСтрока.СвойствоФормата = "БанковскийСчет";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетОрганизации";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтатьяДвиженияДенежныхСредств";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетБанк";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_ПОСБДСПеречислениеЗарПлаты_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПБДС_СБДС_ПолучениеДатаПроведен(ПолученныеДанные, ДанныеXDTO);
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПеречислениеЗаработнойПлаты;
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
КонецПроцедуры

Процедура ПКО_Документ_ПОСБДСПеречислениеЗарПлаты_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УстановкаУчетнойПолитикиОрганизации(?(ДанныеИБ = Неопределено, ПолученныеДанные.Организация, ДанныеИБ.Организация));
	
	ПБДС_СБДС_ПолучениеСчетБанк(ПолученныеДанные);
	
	Если ДанныеИБ = Неопределено Тогда
		
		ОрганизацияЯвляетсяПлательщикомКПН = ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(ПолученныеДанные.Организация, ПолученныеДанные.Дата);
		
		Если Не ОрганизацияЯвляетсяПлательщикомКПН Тогда
			ПолученныеДанные.УчитыватьКПН = Ложь;
		Иначе
			ПолученныеДанные.УчитыватьКПН = Истина;
		КонецЕсли;	
	
		Если НЕ ПолученныеДанные.УчитыватьКПН Тогда
			ПолученныеДанные.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НеОтражаетсяВНУ;
		Иначе
			ПолученныеДанные.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ;
		КонецЕсли;
	
	КонецЕсли;
	
	Если ПолученныеДанные.ПеречислениеЗаработнойПлаты.Количество() = 0 Тогда
		СтрокаТЧ = ПолученныеДанные.ПеречислениеЗаработнойПлаты.Добавить();
	Иначе
		СтрокаТЧ = ПолученныеДанные.ПеречислениеЗаработнойПлаты[0];
	КонецЕсли;
	
	СтрокаТЧ.СуммаПлатежа = ПолученныеДанные.СуммаДокумента;
КонецПроцедуры
#КонецОбласти
#Область Документ_ПОСБДСПлатежиВБюджет_Получение
Процедура ДобавитьПКО_Документ_ПОСБДСПлатежиВБюджет_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПОСБДСПлатежиВБюджет_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПлатежныйОрдерСписаниеДенежныхСредств;
	ПравилоКонвертации.ОбъектФормата = "Документ.СБДСПлатежиВБюджет";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_ПОСБДСПлатежиВБюджет_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПОСБДСПлатежиВБюджет_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_ПОСБДС";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВыписки";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НазначениеПлатежа";
	НоваяСтрока.СвойствоФормата = "НазначениеПлатежа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетКонтрагента";
	НоваяСтрока.СвойствоФормата = "БанковскийСчет";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетОрганизации";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтатьяДвиженияДенежныхСредств";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтатьяДвиженияДенежныхСредств";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаПлатежа";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетУчетаРасчетовСКонтрагентомБУ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_ПОСБДСПлатежиВБюджет_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПБДС_СБДС_ПолучениеДатаПроведен(ПолученныеДанные, ДанныеXDTO);
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПеречислениеНалога;
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);	
	
	ДокументыДвиженияДС_ПолучениеСтатьиДДС(ПолученныеДанные, ДанныеXDTO);
	
	Если ДанныеXDTO.Свойство("РасшифровкаПлатежа") И ЗначениеЗаполнено(ДанныеXDTO.РасшифровкаПлатежа) 
		И ДанныеXDTO.РасшифровкаПлатежа.Количество() > 0 Тогда
		МассивСтрокРасшифровка = Новый Массив;
	
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Сумма","СуммаПлатежа");
		ПравилаЗаполнения.Вставить("СтатьяДДС","СтатьяДвиженияДенежныхСредств");
		
		Для Каждого Строка Из ДанныеXDTO.РасшифровкаПлатежа Цикл
			
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			СтруктураДанныхСтроки.Вставить("СчетУчетаРасчетовСКонтрагентомБУ", ПЛаныСчетов.Типовой.ПрочиеНалоги);
			МассивСтрокРасшифровка.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
		ПолученныеДанные.ДополнительныеСвойства.Вставить("РасшифровкаПлатежа", МассивСтрокРасшифровка);
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_ПОСБДСПлатежиВБюджет_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УстановкаУчетнойПолитикиОрганизации(?(ДанныеИБ = Неопределено, ПолученныеДанные.Организация, ДанныеИБ.Организация));
	
	ПБДС_СБДС_ПолучениеСчетБанк(ПолученныеДанные);
	
	Если ДанныеИБ = Неопределено Тогда
	
		ОрганизацияЯвляетсяПлательщикомКПН =  ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(ПолученныеДанные.Организация, ПолученныеДанные.Дата);
		
		Если Не ОрганизацияЯвляетсяПлательщикомКПН Тогда
			ПолученныеДанные.УчитыватьКПН = Ложь;
		Иначе
			ПолученныеДанные.УчитыватьКПН = Истина;
		КонецЕсли;	
	
		Если НЕ ПолученныеДанные.УчитыватьКПН Тогда
			ПолученныеДанные.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НеОтражаетсяВНУ;
		Иначе
			ПолученныеДанные.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ;
		КонецЕсли;
		
	ИначеЕсли НЕ ЗначениеЗаполнено(ДанныеИБ.СчетУчетаРасчетовСКонтрагентомБУ) Тогда
		ДанныеИБ.СчетУчетаРасчетовСКонтрагентомБУ = ПЛаныСчетов.Типовой.ПрочиеНалоги;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ПОСБДСПрочееСписание_Получение
Процедура ДобавитьПКО_Документ_ПОСБДСПрочееСписание_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПОСБДСПрочееСписание_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПлатежныйОрдерСписаниеДенежныхСредств;
	ПравилоКонвертации.ОбъектФормата = "Документ.СБДСПрочееСписание";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_ПОСБДСПрочееСписание_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПОСБДСПрочееСписание_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_ПОСБДС";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВыписки";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НазначениеПлатежа";
	НоваяСтрока.СвойствоФормата = "НазначениеПлатежа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетКонтрагента";
	НоваяСтрока.СвойствоФормата = "БанковскийСчет";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетОрганизации";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.СвойствоФормата = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "ВидыОперацийСБДСПрочее_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтатьяДвиженияДенежныхСредств";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетБанк";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетУчетаРасчетовСКонтрагентомБУ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_ПОСБДСПрочееСписание_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПБДС_СБДС_ПолучениеДатаПроведен(ПолученныеДанные, ДанныеXDTO);
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПрочееСписаниеБезналичныхДенежныхСредств;
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);	
	
	ДокументыДвиженияДС_ПолучениеСтатьиДДС(ПолученныеДанные, ДанныеXDTO);
	
	ЗаполнитьСчетУчетаРасчетовВПрочейОперацииДДС(ПолученныеДанные, ДанныеXDTO);
КонецПроцедуры

Процедура ПКО_Документ_ПОСБДСПрочееСписание_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УстановкаУчетнойПолитикиОрганизации(?(ДанныеИБ = Неопределено, ПолученныеДанные.Организация, ДанныеИБ.Организация));
	
	ПБДС_СБДС_ПолучениеСчетБанк(ПолученныеДанные);
	
	Если ДанныеИБ = Неопределено Тогда
	
		ОрганизацияЯвляетсяПлательщикомКПН =  ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(ПолученныеДанные.Организация, ПолученныеДанные.Дата);
		
		Если Не ОрганизацияЯвляетсяПлательщикомКПН Тогда
			ПолученныеДанные.УчитыватьКПН = Ложь;
		Иначе
			ПолученныеДанные.УчитыватьКПН = Истина;
		КонецЕсли;	
	
		Если НЕ ПолученныеДанные.УчитыватьКПН Тогда
			ПолученныеДанные.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НеОтражаетсяВНУ;
		Иначе
			ПолученныеДанные.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДанныеИБ <> Неопределено Тогда
		Если ЗначениеЗаполнено(ДанныеИБ.СчетУчетаРасчетовСКонтрагентомБУ) Тогда
			ПолученныеДанные.СчетУчетаРасчетовСКонтрагентомБУ = ДанныеИБ.СчетУчетаРасчетовСКонтрагентомБУ;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ПОСБДСПрочиеРасходы_Получение
Процедура ДобавитьПКО_Документ_ПОСБДСПрочиеРасходы_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПОСБДСПрочиеРасходы_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПлатежныйОрдерСписаниеДенежныхСредств;
	ПравилоКонвертации.ОбъектФормата = "Документ.СБДСПрочиеРасходы";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_ПОСБДСПрочиеРасходы_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПОСБДСПрочиеРасходы_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_ПОСБДС";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВыписки";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НазначениеПлатежа";
	НоваяСтрока.СвойствоФормата = "НазначениеПлатежа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетКонтрагента";
	НоваяСтрока.СвойствоФормата = "БанковскийСчет";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетОрганизации";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоговорКонтрагента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КратностьВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КурсВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтатьяДвиженияДенежныхСредств";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтатьяДвиженияДенежныхСредств";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаПлатежа";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетБанк";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетУчетаРасчетовСКонтрагентомБУ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_ПОСБДСПрочиеРасходы_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПрочееСписаниеБезналичныхДенежныхСредств;
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);	
	
	ПБДС_СБДС_ПолучениеДатаПроведен(ПолученныеДанные, ДанныеXDTO);
	
	ДокументыДвиженияДС_ПолучениеСтатьиДДС(ПолученныеДанные, ДанныеXDTO);
	ДокументыДвиженияДС_ПолучениеСтатьиРасходов(ПолученныеДанные, ДанныеXDTO);
	
	ЗаполнитьСчетУчетаРасчетовВПрочейОперацииДДС(ПолученныеДанные, ДанныеXDTO);
	
	Если ДанныеXDTO.Свойство("РасшифровкаПлатежа") И ЗначениеЗаполнено(ДанныеXDTO.РасшифровкаПлатежа) 
		И ДанныеXDTO.РасшифровкаПлатежа.Количество() > 0 Тогда
		МассивСтрокРасшифровка = Новый Массив;
	
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Сумма","СуммаПлатежа");
		ПравилаЗаполнения.Вставить("Договор","ДоговорКонтрагента");
		ПравилаЗаполнения.Вставить("СтатьяДДС","СтатьяДвиженияДенежныхСредств");
		ПравилаЗаполнения.Вставить("СуммаВзаиморасчетов", "СуммаВзаиморасчетов");
		ПравилаЗаполнения.Вставить("КурсВзаиморасчетов", "КурсВзаиморасчетов");
		ПравилаЗаполнения.Вставить("КратностьВзаиморасчетов", "КратностьВзаиморасчетов");
		ПравилаЗаполнения.Вставить("СтавкаНДС", "СтавкаНДС");
		ПравилаЗаполнения.Вставить("СуммаНДС", "СуммаНДС");
		
		Для Каждого Строка Из ДанныеXDTO.РасшифровкаПлатежа Цикл
			
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			Если ЗначениеЗаполнено(ДанныеXDTO.РасшифровкаПлатежа.Колонки.Найти("ДоговорКонтрагента"))
				 И ЗначениеЗаполнено(Строка.ДоговорКонтрагента) Тогда
				Если ТипЗнч(Строка.ДоговорКонтрагента) = Тип("Структура") И 
					Строка.Договор.Свойство("Ссылка") = Ложь Тогда
					ИмяПКО = "Справочник_ДоговорыКонтрагентов_ИзСтруктуры";
					СтруктураДанныхСтроки.Вставить("ДоговорКонтрагента", Новый Структура("Значение, ИмяПКО", Строка.ДоговорКонтрагента, ИмяПКО));
				КонецЕсли;
			КонецЕсли;
			
			ОбработатьСтавкуНДСПриПолучении(Строка, СтруктураДанныхСтроки, КомпонентыОбмена.ПараметрыКонвертации);
			
			МассивСтрокРасшифровка.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
		ПолученныеДанные.ДополнительныеСвойства.Вставить("РасшифровкаПлатежа", МассивСтрокРасшифровка);
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_ПОСБДСПрочиеРасходы_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УстановкаУчетнойПолитикиОрганизации(?(ДанныеИБ = Неопределено, ПолученныеДанные.Организация, ДанныеИБ.Организация));
	
	ПБДС_СБДС_ПолучениеСчетБанк(ПолученныеДанные);
	
	Если ДанныеИБ = Неопределено Тогда
	
		ОрганизацияЯвляетсяПлательщикомКПН =  ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(ПолученныеДанные.Организация, ПолученныеДанные.Дата);
		
		Если Не ОрганизацияЯвляетсяПлательщикомКПН Тогда
			ПолученныеДанные.УчитыватьКПН = Ложь;
		Иначе
			ПолученныеДанные.УчитыватьКПН = Истина;
		КонецЕсли;	
	
		Если НЕ ПолученныеДанные.УчитыватьКПН Тогда
			ПолученныеДанные.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НеОтражаетсяВНУ;
		Иначе
			ПолученныеДанные.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДанныеИБ <> Неопределено Тогда
		Если ЗначениеЗаполнено(ДанныеИБ.СчетУчетаРасчетовСКонтрагентомБУ) Тогда
			ПолученныеДанные.СчетУчетаРасчетовСКонтрагентомБУ = ДанныеИБ.СчетУчетаРасчетовСКонтрагентомБУ;
			
		КонецЕсли;
	КонецЕсли;
	Для Каждого Строка ИЗ ПолученныеДанные.РасшифровкаПлатежа Цикл
		Строка.СчетУчетаРасчетовСКонтрагентомБУ = ПолученныеДанные.СчетУчетаРасчетовСКонтрагентомБУ;
	КонецЦикла;
КонецПроцедуры
#КонецОбласти
#Область Документ_ПОСБДСРасчетыСКонтрагентами_Получение
Процедура ДобавитьПКО_Документ_ПОСБДСРасчетыСКонтрагентами_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПОСБДСРасчетыСКонтрагентами_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПлатежныйОрдерСписаниеДенежныхСредств;
	ПравилоКонвертации.ОбъектФормата = "Документ.СБДСРасчетыСКонтрагентами";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_ПОСБДСРасчетыСКонтрагентами_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПОСБДСРасчетыСКонтрагентами_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_ПОСБДС";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.СвойствоФормата = "ВидРасчетов";
	НоваяСтрока.ПравилоКонвертацииСвойства = "ВидыОперацийСБДСРасчетыСКонтрагентами";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВыписки";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НазначениеПлатежа";
	НоваяСтрока.СвойствоФормата = "НазначениеПлатежа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетКонтрагента";
	НоваяСтрока.СвойствоФормата = "БанковскийСчет";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетОрганизации";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоговорКонтрагента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КратностьВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КурсВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтатьяДвиженияДенежныхСредств";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаПлатежа";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетБанк";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_ПОСБДСРасчетыСКонтрагентами_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПБДС_СБДС_ПолучениеДатаПроведен(ПолученныеДанные, ДанныеXDTO);
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);	
	
	Если ДанныеXDTO.Свойство("РасшифровкаПлатежа") И ЗначениеЗаполнено(ДанныеXDTO.РасшифровкаПлатежа) 
		И ДанныеXDTO.РасшифровкаПлатежа.Количество() > 0 Тогда
		МассивСтрокРасшифровка = Новый Массив;
	
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Сумма","СуммаПлатежа");
		ПравилаЗаполнения.Вставить("Договор","ДоговорКонтрагента");
		ПравилаЗаполнения.Вставить("СтатьяДДС","СтатьяДвиженияДенежныхСредств");
		ПравилаЗаполнения.Вставить("СуммаВзаиморасчетов", "СуммаВзаиморасчетов");
		ПравилаЗаполнения.Вставить("Сумма","СуммаПлатежа");
		ПравилаЗаполнения.Вставить("КурсВзаиморасчетов", "КурсВзаиморасчетов");
		ПравилаЗаполнения.Вставить("КратностьВзаиморасчетов", "КратностьВзаиморасчетов");
		ПравилаЗаполнения.Вставить("СтавкаНДС", "СтавкаНДС");
		ПравилаЗаполнения.Вставить("СуммаНДС", "СуммаНДС");
		
		Для Каждого Строка Из ДанныеXDTO.РасшифровкаПлатежа Цикл
			
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			Если ЗначениеЗаполнено(Строка.Договор) Тогда
				Если ТипЗнч(Строка.Договор) = Тип("Структура") И 
					Строка.Договор.Свойство("Ссылка") = Ложь Тогда
					ИмяПКО = "Справочник_ДоговорыКонтрагентов_ИзСтруктуры";
					СтруктураДанныхСтроки.Вставить("ДоговорКонтрагента", Новый Структура("Значение, ИмяПКО", Строка.Договор, ИмяПКО));
				КонецЕсли;
			КонецЕсли;
			
			ОбработатьСтавкуНДСПриПолучении(Строка, СтруктураДанныхСтроки, КомпонентыОбмена.ПараметрыКонвертации);
			
			МассивСтрокРасшифровка.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
		ПолученныеДанные.ДополнительныеСвойства.Вставить("РасшифровкаПлатежа", МассивСтрокРасшифровка);
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_ПОСБДСРасчетыСКонтрагентами_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УстановкаУчетнойПолитикиОрганизации(?(ДанныеИБ = Неопределено, ПолученныеДанные.Организация, ДанныеИБ.Организация));
	
	ПБДС_СБДС_ПолучениеСчетБанк(ПолученныеДанные);
	
	Если ДанныеИБ = Неопределено Тогда
	
		ОрганизацияЯвляетсяПлательщикомКПН =  ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(ПолученныеДанные.Организация, ПолученныеДанные.Дата);
		
		Если Не ОрганизацияЯвляетсяПлательщикомКПН Тогда
			ПолученныеДанные.УчитыватьКПН = Ложь;
		Иначе
			ПолученныеДанные.УчитыватьКПН = Истина;
		КонецЕсли;	
	
		Если НЕ ПолученныеДанные.УчитыватьКПН Тогда
			ПолученныеДанные.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НеОтражаетсяВНУ;
		Иначе
			ПолученныеДанные.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ;
		КонецЕсли;
	
		Возврат;
	КонецЕсли;
			
	// Заменяем свойства, которые получили из XDTO
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
	
	// Восстанавливаем "затертые" данные
	//РасшифровкаПлатежа
	МассивКлючевыхПолей = Новый Массив;
	МассивКлючевыхПолей.Добавить("ДоговорКонтрагента");
	МассивКлючевыхПолей.Добавить("СуммаПлатежа");
	МассивКлючевыхПолей.Добавить("СуммаВзаиморасчетов");
	МассивКлючевыхПолей.Добавить("КурсВзаиморасчетов");
	МассивКлючевыхПолей.Добавить("КратностьВзаиморасчетов");
	МассивКлючевыхПолей.Добавить("СтатьяДвиженияДенежныхСредств");
	
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.РасшифровкаПлатежа,
		ДанныеИБ.РасшифровкаПлатежа,
		МассивКлючевыхПолей,
		"Сделка, СчетУчетаРасчетовСКонтрагентомБУ, СчетУчетаРасчетовПоАвансам, СтавкаНДС");
	ДанныеИБ.РасшифровкаПлатежа.Загрузить(ПолученныеДанные.РасшифровкаПлатежа.Выгрузить());
	
	
	ПолученныеДанные = Неопределено;
КонецПроцедуры
#КонецОбласти
#Область Документ_ПоступлениеИзПереработки_Получение
Процедура ДобавитьПКО_Документ_ПоступлениеИзПереработки_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПоступлениеИзПереработки_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПоступлениеИзПереработки;
	ПравилоКонвертации.ОбъектФормата = "Документ.ОтчетПереработчика";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_ПоступлениеИзПереработки_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_ПоступлениеИзПереработки";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоговорКонтрагента";
	НоваяСтрока.СвойствоФормата = "Договор";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КратностьВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "КратностьВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КурсВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "КурсВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПодразделениеОрганизации";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Склад";
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаВключаетНДС";
	НоваяСтрока.СвойствоФормата = "СуммаВключаетНДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ВозвращенныеМатериалы", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ВозвращенныеМатериалы;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Получение";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ИспользованныеМатериалы", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ИспользованныеМатериалы;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Получение";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Продукция", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Продукция;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Получение";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Услуги", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Услуги;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_ПоступлениеИзПереработки_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	// Продукция
	МассивСтрокПродукция = Новый Массив;
	Если ДанныеXDTO.Свойство("Продукция")
		И ЗначениеЗаполнено(ДанныеXDTO.Продукция) Тогда
	
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполнения.Вставить("Количество",   "Количество");
		
		Для Каждого Строка Из ДанныеXDTO.Продукция Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			МассивСтрокПродукция.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
		
		Если МассивСтрокПродукция.Количество() > 0 Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("Продукция", МассивСтрокПродукция);
		КонецЕсли;
	КонецЕсли;
	
	// Услуги
	МассивСтрокУслуги = Новый Массив;
	Если ДанныеXDTO.Свойство("Услуги")
		И ЗначениеЗаполнено(ДанныеXDTO.Услуги) Тогда
	
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполнения.Вставить("Количество",   "Количество");
		ПравилаЗаполнения.Вставить("Сумма",        "Сумма");
		ПравилаЗаполнения.Вставить("Цена", 		   "Цена");
		ПравилаЗаполнения.Вставить("СтавкаНДС",    "СтавкаНДС");
		ПравилаЗаполнения.Вставить("СуммаНДС", 	   "СуммаНДС");
		Для Каждого Строка Из ДанныеXDTO.Услуги Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			ОбработатьСтавкуНДСПриПолучении(Строка, СтруктураДанныхСтроки, КомпонентыОбмена.ПараметрыКонвертации);
			МассивСтрокУслуги.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
		Если МассивСтрокУслуги.Количество() > 0 Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("Услуги", МассивСтрокУслуги);
		КонецЕсли;
	КонецЕсли; 
	
	// Использованные материалы
	МассивСтрокМатериалы = Новый Массив;
	Если ДанныеXDTO.Свойство("Материалы")
		И ЗначениеЗаполнено(ДанныеXDTO.Материалы) Тогда
	
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполнения.Вставить("Количество",   "Количество");
		
		Для Каждого Строка Из ДанныеXDTO.Материалы Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			МассивСтрокМатериалы.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
		
		Если МассивСтрокМатериалы.Количество() > 0 Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("ИспользованныеМатериалы", МассивСтрокМатериалы);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_РеализацияТоваровУслуг
Процедура ДобавитьПКО_Документ_РеализацияТоваровУслуг(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_РеализацияТоваровУслуг";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.РеализацияТоваровУслуг;
	ПравилоКонвертации.ОбъектФормата = "Документ.РеализацияТоваровУслуг";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_РеализацияТоваровУслуг_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_РеализацияТоваровУслуг_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_РТиУ";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "АдресДоставки";
	НоваяСтрока.СвойствоФормата = "АдресДоставки";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "БанковскийСчетОрганизации";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.СвойствоФормата = "ВидОперации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "ВидыОпераций_РТиУ";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Грузополучатель";
	НоваяСтрока.СвойствоФормата = "Грузополучатель";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоверенностьВыдана";
	НоваяСтрока.СвойствоФормата = "ДоверенностьКемВыдана";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоверенностьДата";
	НоваяСтрока.СвойствоФормата = "ДоверенностьДата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоверенностьЛицо";
	НоваяСтрока.СвойствоФормата = "ДоверенностьКомуВыдана";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоверенностьНомер";
	НоваяСтрока.СвойствоФормата = "ДоверенностьНомер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КратностьВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "КратностьВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КурсВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "КурсВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Склад";
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаВключаетНДС";
	НоваяСтрока.СвойствоФормата = "СуммаВключаетНДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоговорКонтрагента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ТипЦен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ТипыЦен";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Коэффициент";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетУчетаБУ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Услуги", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Услуги;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Содержание";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_РеализацияТоваровУслуг_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Проведен = Истина;
	
	ДобавитьДоговорВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);      	
	
	//
	 
	ЕстьТовары = ДанныеXDTO.Свойство("Товары") И ДанныеXDTO.Товары.Количество() > 0;
	ЕстьУслуги = ДанныеXDTO.Свойство("Услуги") И ДанныеXDTO.Услуги.Количество() > 0;
	
	Если ЕстьТовары И ЕстьУслуги Тогда    
		ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия;
	ИначеЕсли ЕстьТовары И Не ЕстьУслуги Тогда
		ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Товары;
	ИначеЕсли ЕстьУслуги И Не ЕстьТовары Тогда
		ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Услуги; 
	КонецЕсли;
	
	//
	
	//Товары
	МассивСтрокТовары = Новый Массив;
	Если ДанныеXDTO.Свойство("Товары")
		И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
	
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполнения.Вставить("ЕдиницаИзмерения", "ЕдиницаИзмерения");
		ПравилаЗаполнения.Вставить("Количество", "Количество");
		ПравилаЗаполнения.Вставить("Сумма", "Сумма");
		ПравилаЗаполнения.Вставить("Цена", "Цена");
		ПравилаЗаполнения.Вставить("СтавкаНДС", "СтавкаНДС");
		ПравилаЗаполнения.Вставить("СуммаНДС", "СуммаНДС");
		
		ПравилаЗаполненияТара = Новый Соответствие;
		ПравилаЗаполненияТара.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполненияТара.Вставить("Количество", "Количество");
		ПравилаЗаполненияТара.Вставить("Сумма", "Сумма");
		ПравилаЗаполненияТара.Вставить("Цена", "Цена");
		
		Для Каждого Строка Из ДанныеXDTO.Товары Цикл
			ТекТипЗапасов = "";
			Если ЗначениеЗаполнено(Строка.ТипЗапасов) Тогда
				ТекТипЗапасов = Строка.ТипЗапасов.Значение;
			КонецЕсли;
	
			Если ТекТипЗапасов = "ВозвратнаяТара" Тогда
			Иначе
				СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
				СтруктураДанныхСтроки.Вставить("Коэффициент",1);
				ОбработатьСтавкуНДСПриПолучении(Строка, СтруктураДанныхСтроки, КомпонентыОбмена.ПараметрыКонвертации); 
				МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
			КонецЕсли;
		КонецЦикла;
		
		Если МассивСтрокТовары.Количество() > 0 Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
		КонецЕсли;
	КонецЕсли;
	
	//Услуги
	//Для вида операции "Отгрузка без перехода права собственности" услуги загружаются по отдельному правилу  	
	МассивСтрокУслуги = Новый Массив;
	Если ДанныеXDTO.Свойство("Услуги")
		И ЗначениеЗаполнено(ДанныеXDTO.Услуги) Тогда
	
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполнения.Вставить("Содержание", "Содержание");
		ПравилаЗаполнения.Вставить("Количество", "Количество");
		ПравилаЗаполнения.Вставить("Сумма", "Сумма");
		ПравилаЗаполнения.Вставить("Цена", "Цена");
		ПравилаЗаполнения.Вставить("СтавкаНДС", "СтавкаНДС");
		ПравилаЗаполнения.Вставить("СуммаНДС", "СуммаНДС");
		Для Каждого Строка Из ДанныеXDTO.Услуги Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			ОбработатьСтавкуНДСПриПолучении(Строка, СтруктураДанныхСтроки, КомпонентыОбмена.ПараметрыКонвертации);
			МассивСтрокУслуги.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
		Если МассивСтрокУслуги.Количество() > 0 Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("Услуги", МассивСтрокУслуги);
		КонецЕсли;
	КонецЕсли;
		
	Если ДанныеXDTO.Свойство("ТипЦен") И ТипЗнч(ДанныеXDTO.ТипЦен) = Тип("Структура") Тогда          
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ТипЦен", Новый Структура("Значение, ИмяПКО", ДанныеXDTO.ТипЦен, "Справочник_ТипыЦен"));		
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_РеализацияТоваровУслуг_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УстановкаУчетнойПолитикиОрганизации(?(ДанныеИБ = Неопределено, ПолученныеДанные.Организация, ДанныеИБ.Организация));
	
	ПолученныеДанные.Склад = СкладДляЗагрузки(ПолученныеДанные.Склад, КомпонентыОбмена.ПараметрыКонвертации);
	
	Если ДанныеИБ = Неопределено Тогда
		
		ОрганизацияЯвляетсяПлательщикомКПН =  ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(ПолученныеДанные.Организация, ПолученныеДанные.Дата);
		
		Если Не ОрганизацияЯвляетсяПлательщикомКПН Тогда
			ПолученныеДанные.УчитыватьКПН = Ложь;
		Иначе
			ПолученныеДанные.УчитыватьКПН = Истина;
		КонецЕсли;	
	
		Если НЕ ПолученныеДанные.УчитыватьКПН Тогда
			ПолученныеДанные.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НеОтражаетсяВНУ;
		Иначе
			ПолученныеДанные.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ;
		КонецЕсли;
	
		ПолученныеДанные.УчитыватьНДС = ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНДС(ПолученныеДанные.Организация, ПолученныеДанные.Дата);
		
		Если Не ЗначениеЗаполнено(ПолученныеДанные.ДатаПодписанияГЗ) Тогда
			ПолученныеДанные.ДатаПодписанияГЗ = ПолученныеДанные.Дата;	
		КонецЕсли;	
		
		Возврат;
	КонецЕсли;
	
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
		
	// Восстанавливаем "затертые" данные
	//Товары
	МассивКлючевыхПолей = Новый Массив;
	МассивКлючевыхПолей.Добавить("Номенклатура");
	МассивКлючевыхПолей.Добавить("ЕдиницаИзмерения");
	МассивКлючевыхПолей.Добавить("Количество");
	МассивКлючевыхПолей.Добавить("Сумма");
	МассивКлючевыхПолей.Добавить("Цена");
	МассивКлючевыхПолей.Добавить("СтавкаНДС");
	МассивКлючевыхПолей.Добавить("СуммаНДС");
	
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.Товары,
		ДанныеИБ.Товары,
		МассивКлючевыхПолей,
		"СчетУчетаБУ,СчетУчетаНДСПоРеализации,СчетДоходовБУ");
	ДанныеИБ.Товары.Загрузить(ПолученныеДанные.Товары.Выгрузить());
	
	//Услуги
	МассивКлючевыхПолей = Новый Массив;
	МассивКлючевыхПолей.Добавить("Номенклатура");
	МассивКлючевыхПолей.Добавить("Содержание");
	МассивКлючевыхПолей.Добавить("Количество");
	МассивКлючевыхПолей.Добавить("Сумма");
	МассивКлючевыхПолей.Добавить("Цена");
	МассивКлючевыхПолей.Добавить("СтавкаНДС");
	МассивКлючевыхПолей.Добавить("СуммаНДС");
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.Услуги,
		ДанныеИБ.Услуги,
		МассивКлючевыхПолей,
		"СчетУчетаНДСПоРеализации,СчетДоходовБУ");
	ДанныеИБ.Услуги.Загрузить(ПолученныеДанные.Услуги.Выгрузить());
	ПолученныеДанные = Неопределено;
КонецПроцедуры
#КонецОбласти
#Область Документ_РКОВнутренняяПередача_Получение
Процедура ДобавитьПКО_Документ_РКОВнутренняяПередача_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_РКОВнутренняяПередача_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.РасходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата = "Документ.РКОВнутренняяПередача";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_РКОВнутренняяПередача_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_РКОВнутренняяПередача_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_РКО";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Выдать";
	НоваяСтрока.СвойствоФормата = "Выдать";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Касса";
	НоваяСтрока.СвойствоФормата = "Касса";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Кассы_Получение_ИзСтруктуры";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Основание";
	НоваяСтрока.СвойствоФормата = "Основание";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПоДокументу";
	НоваяСтрока.СвойствоФормата = "ПоДокументу";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Приложение";
	НоваяСтрока.СвойствоФормата = "Приложение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтатьяДвиженияДенежныхСредств";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетКасса";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_РКОВнутренняяПередача_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийРКО.РасходДенежныхСредствПрочее;
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);	
	ДокументыДвиженияДС_ПолучениеСтатьиДДС(ПолученныеДанные, ДанныеXDTO);
	ПолученныеДанные.Проведен = Истина;
	
	Если ДанныеXDTO.КлючевыеСвойства.Свойство("Касса") Тогда 
		Касса = ДанныеXDTO.КлючевыеСвойства.Касса;
	Иначе 
		Касса = ДанныеXDTO.Касса;
	КонецЕсли;
	Если ЗначениеЗаполнено(Касса) Тогда
		Если ТипЗнч(Касса) = Тип("Структура") И 
			Касса.Свойство("Ссылка") = Ложь Тогда
			ИмяПКО = "Справочник_Кассы_Получение_ИзСтруктуры";
		Иначе
			ИмяПКО = "Справочник_Кассы_Получение";
		КонецЕсли;
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Касса", Новый Структура("Значение, ИмяПКО", Касса, ИмяПКО));
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_РКОВнутренняяПередача_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УстановкаУчетнойПолитикиОрганизации(?(ДанныеИБ = Неопределено, ПолученныеДанные.Организация, ДанныеИБ.Организация));
	
	ПКО_РКО_ПолучениеСчетКасса(ПолученныеДанные);
	
	Если ДанныеИБ = Неопределено Тогда
		
		ОрганизацияЯвляетсяПлательщикомКПН =  ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(ПолученныеДанные.Организация, ПолученныеДанные.Дата);
		
		Если Не ОрганизацияЯвляетсяПлательщикомКПН Тогда
			ПолученныеДанные.УчитыватьКПН = Ложь;
		Иначе
			ПолученныеДанные.УчитыватьКПН = Истина;
		КонецЕсли;	
	
		Если НЕ ПолученныеДанные.УчитыватьКПН Тогда
			ПолученныеДанные.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НеОтражаетсяВНУ;
		Иначе
			ПолученныеДанные.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ;
		КонецЕсли;
	
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_РКОВыплатаЗарплаты_Получение
Процедура ДобавитьПКО_Документ_РКОВыплатаЗарплаты_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_РКОВыплатаЗарплаты_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.РасходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата = "Документ.РКОВыплатаЗарплаты";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_РКОВыплатаЗарплаты_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_РКОВыплатаЗарплаты_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_РКО";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Выдать";
	НоваяСтрока.СвойствоФормата = "Выдать";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Касса";
	НоваяСтрока.СвойствоФормата = "Касса";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Кассы_Получение_ИзСтруктуры";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Основание";
	НоваяСтрока.СвойствоФормата = "Основание";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПоДокументу";
	НоваяСтрока.СвойствоФормата = "ПоДокументу";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Приложение";
	НоваяСтрока.СвойствоФормата = "Приложение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ФизическиеЛица_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтатьяДвиженияДенежныхСредств";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетКасса";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_РКОВыплатаЗарплаты_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям;
	ПолученныеДанные.Проведен = Истина;
	
	Если ДанныеXDTO.РасшифровкаПлатежа[0].Депонент = Истина Тогда
		ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийРКО.РасходДенежныхСредствПрочее;
	ИначеЕсли ЗначениеЗаполнено(ДанныеXDTO.РасшифровкаПлатежа[0].Сотрудник) Тогда
		ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику;
	КонецЕсли;
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);	
	
	ДокументыДвиженияДС_ПолучениеСтатьиДДС(ПолученныеДанные, ДанныеXDTO);
	ПолученныеДанные.ДополнительныеСвойства.Вставить("ДатаВедомостиНаВыплатуЗарплаты", ДанныеXDTO.РасшифровкаПлатежа[0].ДатаВедомостиНаВыплатуЗарплаты);
	ПолученныеДанные.ДополнительныеСвойства.Вставить("НомерВедомостиНаВыплатуЗарплаты", ДанныеXDTO.РасшифровкаПлатежа[0].НомерВедомостиНаВыплатуЗарплаты);
	ПолученныеДанные.ДополнительныеСвойства.Вставить("Контрагент", ДанныеXDTO.РасшифровкаПлатежа[0].Сотрудник);
	
	Если ДанныеXDTO.КлючевыеСвойства.Свойство("Касса") Тогда 
		Касса = ДанныеXDTO.КлючевыеСвойства.Касса;
	Иначе 
		Касса = ДанныеXDTO.Касса;
	КонецЕсли;
	Если ЗначениеЗаполнено(Касса) Тогда
		Если ТипЗнч(Касса) = Тип("Структура") И 
			Касса.Свойство("Ссылка") = Ложь Тогда
			ИмяПКО = "Справочник_Кассы_Получение_ИзСтруктуры";
		Иначе
			ИмяПКО = "Справочник_Кассы_Получение";
		КонецЕсли;
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Касса", Новый Структура("Значение, ИмяПКО", Касса, ИмяПКО));
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_РКОВыплатаЗарплаты_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УстановкаУчетнойПолитикиОрганизации(?(ДанныеИБ = Неопределено, ПолученныеДанные.Организация, ДанныеИБ.Организация));
	
	ПКО_РКО_ПолучениеСчетКасса(ПолученныеДанные);
	
	Если ДанныеИБ = Неопределено Тогда
		
		ОрганизацияЯвляетсяПлательщикомКПН =  ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(ПолученныеДанные.Организация, ПолученныеДанные.Дата);
		
		Если Не ОрганизацияЯвляетсяПлательщикомКПН Тогда
			ПолученныеДанные.УчитыватьКПН = Ложь;
		Иначе
			ПолученныеДанные.УчитыватьКПН = Истина;
		КонецЕсли;	
	
		Если НЕ ПолученныеДанные.УчитыватьКПН Тогда
			ПолученныеДанные.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НеОтражаетсяВНУ;
		Иначе
			ПолученныеДанные.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ;
		КонецЕсли;
	
	КонецЕсли;
	
	Если ПолученныеДанные.ВыплатаЗаработнойПлаты.Количество() = 0 Тогда
		СтрокаТЧ = ПолученныеДанные.ВыплатаЗаработнойПлаты.Добавить();
	Иначе
		СтрокаТЧ = ПолученныеДанные.ВыплатаЗаработнойПлаты[0];
	КонецЕсли;
	СтрокаТЧ.СуммаКВыплате = ПолученныеДанные.СуммаДокумента;
КонецПроцедуры
#КонецОбласти
#Область Документ_РКОВыплатаЗарплаты_Получение_ЗУП
Процедура ДобавитьПКО_Документ_РКОВыплатаЗарплаты_Получение_ЗУП(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_РКОВыплатаЗарплаты_Получение_ЗУП";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.РасходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата = "Документ.РКОВыплатаЗарплаты";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_РКОВыплатаЗарплаты_Получение_ЗУП_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_РКОВыплатаЗарплаты_Получение_ЗУП_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_РКО";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Касса";
	НоваяСтрока.СвойствоФормата = "Касса";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Кассы_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтатьяДвиженияДенежныхСредств";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетКасса";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_РКОВыплатаЗарплаты_Получение_ЗУП_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям;
			ПолученныеДанные.Проведен = Истина;
			
			ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);	
			
			ДокументыДвиженияДС_ПолучениеСтатьиДДС(ПолученныеДанные, ДанныеXDTO);
			
			РасшифровкаПлатежаXDTO = Неопределено;
			
			Если ДанныеXDTO.Свойство("РасшифровкаПлатежа", РасшифровкаПлатежаXDTO)
				И ЗначениеЗаполнено(РасшифровкаПлатежаXDTO) Тогда
				
				РасшифровкаПлатежаXDTOКопия = РасшифровкаПлатежаXDTO.Скопировать();
		
				РасшифровкаПлатежаXDTOКопия.Свернуть("ДатаВедомостиНаВыплатуЗарплаты, НомерВедомостиНаВыплатуЗарплаты");
				
				Для каждого СтрокаРасшифровки Из РасшифровкаПлатежаXDTOКопия Цикл
					
					СтрокиРасшифровки = РасшифровкаПлатежаXDTO.НайтиСтроки(Новый Структура("ДатаВедомостиНаВыплатуЗарплаты, НомерВедомостиНаВыплатуЗарплаты", СтрокаРасшифровки.ДатаВедомостиНаВыплатуЗарплаты, СтрокаРасшифровки.НомерВедомостиНаВыплатуЗарплаты));
					СтрокаТЧ = ПолученныеДанные.ВыплатаЗаработнойПлаты.Добавить();
			        СуммаДокумента = 0;
		
					Запрос = Новый Запрос();
						Запрос.Текст =
						"ВЫБРАТЬ
						|	ЗарплатаКВыплатеОрганизаций.Ссылка,
						|	ЗарплатаКВыплатеОрганизаций.Номер,
						|	ЗарплатаКВыплатеОрганизаций.Дата
						|ИЗ
						|	Документ.ЗарплатаКВыплатеОрганизаций КАК ЗарплатаКВыплатеОрганизаций
						|ГДЕ
						|	ЗарплатаКВыплатеОрганизаций.Номер = &Номер
						|	И ЗарплатаКВыплатеОрганизаций.Дата = &Дата";
						
					Запрос.УстановитьПараметр("Дата",  ПолученныеДанные.Дата);
					Запрос.УстановитьПараметр("Номер", СтрокаРасшифровки.НомерВедомостиНаВыплатуЗарплаты);
			
					Выборка = Запрос.Выполнить().Выбрать();
			
					Если Выборка.Следующий() Тогда
						СтараяВедомость = Выборка.Ссылка.ПолучитьОбъект();
						СтараяВедомость.Дата = ПолученныеДанные.Дата;
						СтараяВедомость.Номер = СтрокаРасшифровки.НомерВедомостиНаВыплатуЗарплаты;
						СтараяВедомость.Организация = ПолученныеДанные.Организация;
						СтараяВедомость.СуммаДокумента = ПолученныеДанные.СуммаДокумента;
						СтараяВедомость.СпособВыплаты = Перечисления.СпособыВыплатыЗарплаты.ЧерезКассу;
						СтараяВедомость.ПериодНачисленияЗарплаты = НачалоМесяца(СтрокаРасшифровки.ДатаВедомостиНаВыплатуЗарплаты);
			       		СтараяВедомость.Ответственный = ПолученныеДанные.Ответственный;
						
						СтараяВедомость.Зарплата.Очистить();
						Для каждого СтрокаВедомости Из СтрокиРасшифровки Цикл
							СтрокаТЧЗарплата = СтараяВедомость.Зарплата.Добавить();
							Если НЕ ЗначениеЗаполнено(СтрокаВедомости.Сотрудник) Тогда
								СтрокаТЧЗарплата.Физлицо = ФизическоеЛицоПоУмолчанию();
							Иначе
								СтрокаТЧЗарплата.Физлицо = ФизическоеЛицоДляЗагрузки(СтрокаВедомости.Сотрудник);
							КонецЕсли;
							Если СтрокаВедомости.Депонент <> Неопределено Тогда 
								Если СтрокаВедомости.Депонент Тогда
									СтрокаТЧЗарплата.ДепонированнаяСумма = СтрокаВедомости.Сумма;
									СтараяВедомость.СпособРасчетаСуммКВыплате = Перечисления.СпособыРасчетаСуммКВыплате.ДепонированнаяЗарплатаЗаМесяц;
								Иначе
									СтрокаТЧЗарплата.Сумма = СтрокаВедомости.Сумма;
									СтараяВедомость.СпособРасчетаСуммКВыплате = Перечисления.СпособыРасчетаСуммКВыплате.ЗарплатаЗаМесяц;
								КонецЕсли;
							Иначе
								СтрокаТЧЗарплата.Сумма = СтрокаВедомости.Сумма;
								СтараяВедомость.СпособРасчетаСуммКВыплате = Перечисления.СпособыРасчетаСуммКВыплате.ЗарплатаЗаМесяц;
							КонецЕсли;
							СтрокаТЧЗарплата.СуммаКВыплате = СтрокаВедомости.Сумма;
							СтрокаТЧЗарплата.ВыплаченностьЗарплаты = Перечисления.ВыплаченностьЗарплаты.Выплачено;
							СуммаДокумента = СуммаДокумента + СтрокаВедомости.Сумма;
						КонецЦикла; 
		
						СтараяВедомость.Записать();
						Ведомость = СтараяВедомость.Ссылка;   			 
					Иначе
						НоваяВедомость  = Документы.ЗарплатаКВыплатеОрганизаций.СоздатьДокумент();
						НоваяВедомость.Дата = ПолученныеДанные.Дата;
						НоваяВедомость.Номер = СтрокаРасшифровки.НомерВедомостиНаВыплатуЗарплаты;
						НоваяВедомость.Организация = ПолученныеДанные.Организация;
						НоваяВедомость.СуммаДокумента = ПолученныеДанные.СуммаДокумента;
						НоваяВедомость.СпособВыплаты = Перечисления.СпособыВыплатыЗарплаты.ЧерезКассу;
						НоваяВедомость.ПериодНачисленияЗарплаты = НачалоМесяца(СтрокаРасшифровки.ДатаВедомостиНаВыплатуЗарплаты);
			   			НоваяВедомость.Ответственный = ПолученныеДанные.Ответственный;
						
						Для каждого СтрокаВедомости Из СтрокиРасшифровки Цикл
							СтрокаТЧЗарплата = НоваяВедомость.Зарплата.Добавить();
							Если НЕ ЗначениеЗаполнено(СтрокаВедомости.Сотрудник) Тогда
								СтрокаТЧЗарплата.Физлицо = ФизическоеЛицоПоУмолчанию();
							Иначе
								СтрокаТЧЗарплата.Физлицо = ФизическоеЛицоДляЗагрузки(СтрокаВедомости.Сотрудник);
							КонецЕсли;
							Если СтрокаВедомости.Депонент <> Неопределено Тогда 
								Если СтрокаВедомости.Депонент Тогда
									СтрокаТЧЗарплата.ДепонированнаяСумма = СтрокаВедомости.Сумма;
									НоваяВедомость.СпособРасчетаСуммКВыплате = Перечисления.СпособыРасчетаСуммКВыплате.ДепонированнаяЗарплатаЗаМесяц;
								Иначе
									СтрокаТЧЗарплата.Сумма = СтрокаВедомости.Сумма;
									НоваяВедомость.СпособРасчетаСуммКВыплате = Перечисления.СпособыРасчетаСуммКВыплате.ЗарплатаЗаМесяц;
								КонецЕсли;
							Иначе
								СтрокаТЧЗарплата.Сумма = СтрокаВедомости.Сумма;
								НоваяВедомость.СпособРасчетаСуммКВыплате = Перечисления.СпособыРасчетаСуммКВыплате.ЗарплатаЗаМесяц;
							КонецЕсли;
							СтрокаТЧЗарплата.СуммаКВыплате = СтрокаВедомости.Сумма;
							СтрокаТЧЗарплата.ВыплаченностьЗарплаты = Перечисления.ВыплаченностьЗарплаты.Выплачено;
							СуммаДокумента = СуммаДокумента + СтрокаВедомости.Сумма;
						КонецЦикла; 
		
						НоваяВедомость.Записать();
						Ведомость = НоваяВедомость.Ссылка;
			
					КонецЕсли;
			
					СтрокаТЧ.Ведомость = Ведомость; 
					СтрокаТЧ.СуммаКВыплате = СуммаДокумента;
				КонецЦикла;
			КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_РКОВыплатаЗарплаты_Получение_ЗУП_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УстановкаУчетнойПолитикиОрганизации(?(ДанныеИБ = Неопределено, ПолученныеДанные.Организация, ДанныеИБ.Организация));
	
	ПолученныеДанные.СчетКасса = ПланыСчетов.Типовой.ДенежныеСредстваВКассе;
	
	Если ДанныеИБ = Неопределено Тогда
		
		ОрганизацияЯвляетсяПлательщикомКПН =  ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(ПолученныеДанные.Организация, ПолученныеДанные.Дата);
		
		Если Не ОрганизацияЯвляетсяПлательщикомКПН Тогда
			ПолученныеДанные.УчитыватьКПН = Ложь;
		Иначе
			ПолученныеДанные.УчитыватьКПН = Истина;
		КонецЕсли;	
	
		Если НЕ ПолученныеДанные.УчитыватьКПН Тогда
			ПолученныеДанные.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НеОтражаетсяВНУ;
		Иначе
			ПолученныеДанные.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ;
		КонецЕсли;
	
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_РКОКонвертацияВалюты_Получение
Процедура ДобавитьПКО_Документ_РКОКонвертацияВалюты_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_РКОКонвертацияВалюты_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.РасходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата = "Документ.РКОКонвертацияВалюты";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_РКОКонвертацияВалюты_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_РКОКонвертацияВалюты_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_РКО";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Выдать";
	НоваяСтрока.СвойствоФормата = "Выдать";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Касса";
	НоваяСтрока.СвойствоФормата = "Касса";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Кассы_Получение_ИзСтруктуры";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Основание";
	НоваяСтрока.СвойствоФормата = "Основание";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПоДокументу";
	НоваяСтрока.СвойствоФормата = "ПоДокументу";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Приложение";
	НоваяСтрока.СвойствоФормата = "Приложение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтатьяДвиженияДенежныхСредств";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетКасса";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетУчетаРасчетовСКонтрагентомБУ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КратностьВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КурсВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтатьяДвиженияДенежныхСредств";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаПлатежа";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетУчетаРасчетовСКонтрагентомБУ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_РКОКонвертацияВалюты_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийРКО.РасходДенежныхСредствПрочее;
	ПолученныеДанные.Проведен = Истина;
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);	
	
	ДокументыДвиженияДС_ПолучениеСтатьиДДС(ПолученныеДанные, ДанныеXDTO);
	
	Если ДанныеXDTO.Свойство("РасшифровкаПлатежа") И
		ЗначениеЗаполнено(ДанныеXDTO.РасшифровкаПлатежа) И 
		ДанныеXDTO.РасшифровкаПлатежа.Количество() > 0 Тогда
		
		Договор = ДанныеXDTO.РасшифровкаПлатежа[0].Договор;
		Если ЗначениеЗаполнено(Договор) И ТипЗнч(Договор) = Тип("Структура") И
			Договор.Свойство("Ссылка") = Ложь Тогда
			ИмяПКО = "Справочник_ДоговорыКонтрагентов_ИзСтруктуры";
			ПолученныеДанные.ДополнительныеСвойства.Вставить("СубконтоДт2",Новый Структура("Значение, ИмяПКО", Договор, ИмяПКО));
		Иначе
			ПолученныеДанные.ДополнительныеСвойства.Вставить("СубконтоДт2",Договор);
		КонецЕсли;
		
		МассивСтрокРасшифровкаПлатежа = Новый Массив;
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("СтатьяДДС", "СтатьяДвиженияДенежныхСредств");
		ПравилаЗаполнения.Вставить("Сумма","СуммаПлатежа");
		ПравилаЗаполнения.Вставить("СуммаВал","СуммаВзаиморасчетов");
		ПравилаЗаполнения.Вставить("КурсКонвертации","КурсВзаиморасчетов");
		ПравилаЗаполнения.Вставить("КратностьКонвертации","КратностьВзаиморасчетов");
	
		Для Каждого Строка Из ДанныеXDTO.РасшифровкаПлатежа Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			МассивСтрокРасшифровкаПлатежа.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
		ПолученныеДанные.ДополнительныеСвойства.Вставить("РасшифровкаПлатежа", МассивСтрокРасшифровкаПлатежа);
	
	КонецЕсли;
	
	Если ДанныеXDTO.КлючевыеСвойства.Свойство("Касса") Тогда 
		Касса = ДанныеXDTO.КлючевыеСвойства.Касса;
	Иначе 
		Касса = ДанныеXDTO.Касса;
	КонецЕсли;
	Если ЗначениеЗаполнено(Касса) Тогда
		Если ТипЗнч(Касса) = Тип("Структура") И 
			Касса.Свойство("Ссылка") = Ложь Тогда
			ИмяПКО = "Справочник_Кассы_Получение_ИзСтруктуры";
		Иначе
			ИмяПКО = "Справочник_Кассы_Получение";
		КонецЕсли;
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Касса", Новый Структура("Значение, ИмяПКО", Касса, ИмяПКО));
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_РКОКонвертацияВалюты_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УстановкаУчетнойПолитикиОрганизации(?(ДанныеИБ = Неопределено, ПолученныеДанные.Организация, ДанныеИБ.Организация));
	
	ПКО_РКО_ПолучениеСчетКасса(ПолученныеДанные);
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	СчетУчетаРасчетов = ПланыСчетов.Типовой.ДенежныеСредстваВПутиКонвертацияВалюты;
	
	Если ДанныеИБ = Неопределено Тогда
		
		ОрганизацияЯвляетсяПлательщикомКПН =  ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(ПолученныеДанные.Организация, ПолученныеДанные.Дата);
		
		Если Не ОрганизацияЯвляетсяПлательщикомКПН Тогда
			ПолученныеДанные.УчитыватьКПН = Ложь;
		Иначе
			ПолученныеДанные.УчитыватьКПН = Истина;
		КонецЕсли;	
	
		Если НЕ ПолученныеДанные.УчитыватьКПН Тогда
			ПолученныеДанные.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НеОтражаетсяВНУ;
		Иначе
			ПолученныеДанные.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ;
		КонецЕсли;
	
	КонецЕсли;
	
	ПолученныеДанные.СчетУчетаРАсчетовСКонтрагентомБУ = СчетУчетаРасчетов;
	Для Каждого Строка ИЗ ПолученныеДанные.РасшифровкаПлатежа Цикл
		Строка.СчетУчетаРасчетовСКонтрагентомБУ = СчетУчетаРасчетов;
	КонецЦикла;
	
	Если ДанныеИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;
			
	// Заменяем свойства, которые получили из XDTO
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
	
	Если ПолученныеДанные.РасшифровкаПлатежа.Количество() > 0 Тогда
		МассивКлючевыхПолей = Новый Массив;
	
		МассивКлючевыхПолей.Добавить("СтатьяДвиженияДенежныхСредств");
		МассивКлючевыхПолей.Добавить("СуммаПлатежа");
		МассивКлючевыхПолей.Добавить("СуммаВзаиморасчетов");
		МассивКлючевыхПолей.Добавить("КурсВзаиморасчетов");
		МассивКлючевыхПолей.Добавить("КратностьВзаиморасчетов");
		
		ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
			ПолученныеДанные.РасшифровкаПлатежа,
			ДанныеИБ.РасшифровкаПлатежа,
			МассивКлючевыхПолей,
			"СчетУчетаРасчетовСКонтрагентомБУ");
		ДанныеИБ.РасшифровкаПлатежа.Загрузить(ПолученныеДанные.РасшифровкаПлатежа.Выгрузить());
	
	КонецЕсли;   
	
	ПолученныеДанные = Неопределено;
КонецПроцедуры
#КонецОбласти
#Область Документ_РКОНаБанковскийСчет_Получение
Процедура ДобавитьПКО_Документ_РКОНаБанковскийСчет_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_РКОНаБанковскийСчет_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.РасходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата = "Документ.РКОНаБанковскийСчет";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_РКОНаБанковскийСчет_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_РКОНаБанковскийСчет_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_РКО";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.СвойствоФормата = "ВидОперации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "ВидыОперацийРКОНаБанковскийСчет";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Выдать";
	НоваяСтрока.СвойствоФормата = "Выдать";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Основание";
	НоваяСтрока.СвойствоФормата = "Основание";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПоДокументу";
	НоваяСтрока.СвойствоФормата = "ПоДокументу";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Приложение";
	НоваяСтрока.СвойствоФормата = "Приложение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетОрганизации";
	НоваяСтрока.СвойствоФормата = "БанковскийСчет";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтатьяДвиженияДенежныхСредств";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетКасса";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетУчетаРасчетовСКонтрагентомБУ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_РКОНаБанковскийСчет_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);	
	ПолученныеДанные.Проведен = Истина;
	
	ДокументыДвиженияДС_ПолучениеСтатьиДДС(ПолученныеДанные, ДанныеXDTO);
	
	Если ДанныеXDTO.КлючевыеСвойства.Свойство("Касса") Тогда 
		Касса = ДанныеXDTO.КлючевыеСвойства.Касса;
	Иначе 
		Касса = ДанныеXDTO.Касса;
	КонецЕсли;
	Если ЗначениеЗаполнено(Касса) Тогда
		Если ТипЗнч(Касса) = Тип("Структура") И 
			Касса.Свойство("Ссылка") = Ложь Тогда
			ИмяПКО = "Справочник_Кассы_Получение_ИзСтруктуры";
		Иначе
			ИмяПКО = "Справочник_Кассы_Получение";
		КонецЕсли;
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Касса", Новый Структура("Значение, ИмяПКО", Касса, ИмяПКО));
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_РКОНаБанковскийСчет_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УстановкаУчетнойПолитикиОрганизации(?(ДанныеИБ = Неопределено, ПолученныеДанные.Организация, ДанныеИБ.Организация));
	
	ПКО_РКО_ПолучениеСчетКасса(ПолученныеДанные);
	
	Если ДанныеИБ = Неопределено Тогда
		
		ОрганизацияЯвляетсяПлательщикомКПН =  ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(ПолученныеДанные.Организация, ПолученныеДанные.Дата);
		
		Если Не ОрганизацияЯвляетсяПлательщикомКПН Тогда
			ПолученныеДанные.УчитыватьКПН = Ложь;
		Иначе
			ПолученныеДанные.УчитыватьКПН = Истина;
		КонецЕсли;	
	
		Если НЕ ПолученныеДанные.УчитыватьКПН Тогда
			ПолученныеДанные.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НеОтражаетсяВНУ;
		Иначе
			ПолученныеДанные.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ;
		КонецЕсли;
	
	КонецЕсли;
	
	Если ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк Тогда
		ПолученныеДанные.СчетУчетаРасчетовСКонтрагентомБУ = ПланыСчетов.Типовой.ДенежныеСредстваНаТекущихБанковскихСчетах;
	Иначе
		//Счет инкассации
		ПолученныеДанные.СчетУчетаРасчетовСКонтрагентомБУ = ПланыСчетов.Типовой.ДенежныеСредстваВПути;
	КонецЕсли;
	
	Если ДанныеИБ <> Неопределено И ДанныеИБ.РасшифровкаПлатежа.Количество() > 0 И ПолученныеДанные.РасшифровкаПлатежа.Количество() = 0 Тогда
		ЗаполнитьЗначенияСвойств(ПолученныеДанные.РасшифровкаПлатежа.Добавить(), ДанныеИБ.РасшифровкаПлатежа[0]);
	ИначеЕсли ПолученныеДанные.РасшифровкаПлатежа.Количество() = 0 Тогда
		ПолученныеДанные.РасшифровкаПлатежа.Добавить();
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_РКОПрочаяВыдача_Получение
Процедура ДобавитьПКО_Документ_РКОПрочаяВыдача_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_РКОПрочаяВыдача_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.РасходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата = "Документ.РКОПрочаяВыдача";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_РКОПрочаяВыдача_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_РКОПрочаяВыдача_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_РКО";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Выдать";
	НоваяСтрока.СвойствоФормата = "Выдать";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Касса";
	НоваяСтрока.СвойствоФормата = "Касса";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Кассы_Получение_ИзСтруктуры";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Основание";
	НоваяСтрока.СвойствоФормата = "Основание";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПоДокументу";
	НоваяСтрока.СвойствоФормата = "ПоДокументу";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Приложение";
	НоваяСтрока.СвойствоФормата = "Приложение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтатьяДвиженияДенежныхСредств";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетКасса";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетУчетаРасчетовСКонтрагентомБУ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_РКОПрочаяВыдача_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Проведен = Истина;
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);	
	
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийРКО.РасходДенежныхСредствПрочее;
	ДокументыДвиженияДС_ПолучениеСтатьиДДС(ПолученныеДанные, ДанныеXDTO);
	
	ЗаполнитьСчетУчетаРасчетовВПрочейОперацииДДС(ПолученныеДанные, ДанныеXDTO);
	
	Если ДанныеXDTO.КлючевыеСвойства.Свойство("Касса") Тогда 
		Касса = ДанныеXDTO.КлючевыеСвойства.Касса;
	Иначе 
		Касса = ДанныеXDTO.Касса;
	КонецЕсли;
	Если ЗначениеЗаполнено(Касса) Тогда
		Если ТипЗнч(Касса) = Тип("Структура") И 
			Касса.Свойство("Ссылка") = Ложь Тогда
			ИмяПКО = "Справочник_Кассы_Получение_ИзСтруктуры";
		Иначе
			ИмяПКО = "Справочник_Кассы_Получение";
		КонецЕсли;
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Касса", Новый Структура("Значение, ИмяПКО", Касса, ИмяПКО));
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_РКОПрочаяВыдача_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УстановкаУчетнойПолитикиОрганизации(?(ДанныеИБ = Неопределено, ПолученныеДанные.Организация, ДанныеИБ.Организация));
	
	ПКО_РКО_ПолучениеСчетКасса(ПолученныеДанные);
	
	Если ДанныеИБ = Неопределено Тогда
		
		ОрганизацияЯвляетсяПлательщикомКПН =  ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(ПолученныеДанные.Организация, ПолученныеДанные.Дата);
		
		Если Не ОрганизацияЯвляетсяПлательщикомКПН Тогда
			ПолученныеДанные.УчитыватьКПН = Ложь;
		Иначе
			ПолученныеДанные.УчитыватьКПН = Истина;
		КонецЕсли;	
	
		Если НЕ ПолученныеДанные.УчитыватьКПН Тогда
			ПолученныеДанные.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НеОтражаетсяВНУ;
		Иначе
			ПолученныеДанные.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ;
		КонецЕсли;
	
	КонецЕсли;
	
	Если ДанныеИБ <> Неопределено Тогда
		Если ЗначениеЗаполнено(ДанныеИБ.СчетУчетаРасчетовСКонтрагентомБУ) Тогда
			ПолученныеДанные.СчетУчетаРасчетовСКонтрагентомБУ = ДанныеИБ.СчетУчетаРасчетовСКонтрагентомБУ;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_РКОПрочийРасход_Получение
Процедура ДобавитьПКО_Документ_РКОПрочийРасход_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_РКОПрочийРасход_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.РасходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата = "Документ.РКОПрочийРасход";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_РКОПрочийРасход_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_РКОПрочийРасход_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_РКО";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Выдать";
	НоваяСтрока.СвойствоФормата = "Выдать";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Касса";
	НоваяСтрока.СвойствоФормата = "Касса";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Кассы_Получение_ИзСтруктуры";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Основание";
	НоваяСтрока.СвойствоФормата = "Основание";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПоДокументу";
	НоваяСтрока.СвойствоФормата = "ПоДокументу";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Приложение";
	НоваяСтрока.СвойствоФормата = "Приложение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтатьяДвиженияДенежныхСредств";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетКасса";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетУчетаРасчетовСКонтрагентомБУ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_РКОПрочийРасход_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Проведен = Истина;
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);	
	
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийРКО.РасходДенежныхСредствПрочее;
	ДокументыДвиженияДС_ПолучениеСтатьиДДС(ПолученныеДанные, ДанныеXDTO);     
	ДокументыДвиженияДС_ПолучениеСтатьиРасходов(ПолученныеДанные, ДанныеXDTO);
	
	ЗаполнитьСчетУчетаРасчетовВПрочейОперацииДДС(ПолученныеДанные, ДанныеXDTO);
	
	Если ДанныеXDTO.КлючевыеСвойства.Свойство("Касса") Тогда 
		Касса = ДанныеXDTO.КлючевыеСвойства.Касса;
	Иначе 
		Касса = ДанныеXDTO.Касса;
	КонецЕсли;
	Если ЗначениеЗаполнено(Касса) Тогда
		Если ТипЗнч(Касса) = Тип("Структура") И 
			Касса.Свойство("Ссылка") = Ложь Тогда
			ИмяПКО = "Справочник_Кассы_Получение_ИзСтруктуры";
		Иначе
			ИмяПКО = "Справочник_Кассы_Получение";
		КонецЕсли;
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Касса", Новый Структура("Значение, ИмяПКО", Касса, ИмяПКО));
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_РКОПрочийРасход_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УстановкаУчетнойПолитикиОрганизации(?(ДанныеИБ = Неопределено, ПолученныеДанные.Организация, ДанныеИБ.Организация));
	
	ПКО_РКО_ПолучениеСчетКасса(ПолученныеДанные);
	
	Если ДанныеИБ = Неопределено Тогда
		
		ОрганизацияЯвляетсяПлательщикомКПН =  ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(ПолученныеДанные.Организация, ПолученныеДанные.Дата);
		
		Если Не ОрганизацияЯвляетсяПлательщикомКПН Тогда
			ПолученныеДанные.УчитыватьКПН = Ложь;
		Иначе
			ПолученныеДанные.УчитыватьКПН = Истина;
		КонецЕсли;	
	
		Если НЕ ПолученныеДанные.УчитыватьКПН Тогда
			ПолученныеДанные.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НеОтражаетсяВНУ;
		Иначе
			ПолученныеДанные.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ;
		КонецЕсли;
	
	КонецЕсли;
	
	Если ДанныеИБ <> Неопределено Тогда
		Если ЗначениеЗаполнено(ДанныеИБ.СчетУчетаРасчетовСКонтрагентомБУ) Тогда
			ПолученныеДанные.СчетУчетаРасчетовСКонтрагентомБУ = ДанныеИБ.СчетУчетаРасчетовСКонтрагентомБУ;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_РКОРасчетыСКонтрагентами_Получение
Процедура ДобавитьПКО_Документ_РКОРасчетыСКонтрагентами_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_РКОРасчетыСКонтрагентами_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.РасходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата = "Документ.РКОРасчетыСКонтрагентами";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_РКОРасчетыСКонтрагентами_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_РКОРасчетыСКонтрагентами_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_РКО";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.СвойствоФормата = "ВидРасчетов";
	НоваяСтрока.ПравилоКонвертацииСвойства = "ВидыОперацийРКО_РасчетыСКонтрагентами";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Выдать";
	НоваяСтрока.СвойствоФормата = "Выдать";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Касса";
	НоваяСтрока.СвойствоФормата = "Касса";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Кассы_Получение_ИзСтруктуры";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Основание";
	НоваяСтрока.СвойствоФормата = "Основание";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПоДокументу";
	НоваяСтрока.СвойствоФормата = "ПоДокументу";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Приложение";
	НоваяСтрока.СвойствоФормата = "Приложение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетУчетаРасчетовСКонтрагентомНУ";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетКасса";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетУчетаРасчетовСКонтрагентомБУ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоговорКонтрагента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КратностьВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КурсВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтатьяДвиженияДенежныхСредств";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаПлатежа";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетУчетаРасчетовСКонтрагентомБУ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_РКОРасчетыСКонтрагентами_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Проведен = Истина;
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);	
	
	ПравилаКонвертации = Новый Соответствие;
	
	ПравилаКонвертации.Вставить("КраткосрочныеКредиты",            ПланыСчетов.Типовой.КраткосрочныеБанковскиеЗаймы);
	ПравилаКонвертации.Вставить("ДолгосрочныеКредиты",             ПланыСчетов.Типовой.ДолгосрочныеБанковскиеЗаймы);
	
	МассивСтрокРасшифровка = Новый Массив;
	Если ДанныеXDTO.Свойство("РасшифровкаПлатежа") И ЗначениеЗаполнено(ДанныеXDTO.РасшифровкаПлатежа) 
		И ДанныеXDTO.РасшифровкаПлатежа.Количество() > 0 Тогда
		
		//Расшифровка платежа
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Договор",                 "ДоговорКонтрагента");
		ПравилаЗаполнения.Вставить("Сумма",                   "СуммаПлатежа");
		ПравилаЗаполнения.Вставить("СуммаВзаиморасчетов",     "СуммаВзаиморасчетов");
		ПравилаЗаполнения.Вставить("КурсВзаиморасчетов",      "КурсВзаиморасчетов");
		ПравилаЗаполнения.Вставить("КратностьВзаиморасчетов", "КратностьВзаиморасчетов");
		ПравилаЗаполнения.Вставить("СтатьяДДС",               "СтатьяДвиженияДенежныхСредств");
		ПравилаЗаполнения.Вставить("СтавкаНДС",               "СтавкаНДС");
		ПравилаЗаполнения.Вставить("СуммаНДС",                "СуммаНДС");
		ПравилаЗаполнения.Вставить("СчетУчетаРасчетовСКонтрагентом", "СчетУчетаРасчетовСКонтрагентомБУ");
		
		Для Каждого Строка Из ДанныеXDTO.РасшифровкаПлатежа Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			
			Если ЗначениеЗаполнено(Строка.Договор) Тогда
				Если ТипЗнч(Строка.Договор) = Тип("Структура") И 
					Строка.Договор.Свойство("Ссылка") = Ложь Тогда
					ИмяПКО = "Справочник_ДоговорыКонтрагентов_ИзСтруктуры";
					СтруктураДанныхСтроки.Вставить("ДоговорКонтрагента", Новый Структура("Значение, ИмяПКО", Строка.Договор, ИмяПКО));
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Строка.ВидРасчетовРасширенный) Тогда
				СтруктураДанныхСтроки.Вставить("СчетУчетаРасчетовСКонтрагентомБУ", ПравилаКонвертации.Получить(Строка.ВидРасчетовРасширенный.Значение));
			КонецЕсли;                                                        
			
			МассивСтрокРасшифровка.Добавить(СтруктураДанныхСтроки);
		
		КонецЦикла;
	
	КонецЕсли;
	
	Если ДанныеXDTO.КлючевыеСвойства.Свойство("Касса") Тогда 
		Касса = ДанныеXDTO.КлючевыеСвойства.Касса;
	Иначе 
		Касса = ДанныеXDTO.Касса;
	КонецЕсли;
	Если ЗначениеЗаполнено(Касса) Тогда
		Если ТипЗнч(Касса) = Тип("Структура") И 
			Касса.Свойство("Ссылка") = Ложь Тогда
			ИмяПКО = "Справочник_Кассы_Получение_ИзСтруктуры";
		Иначе
			ИмяПКО = "Справочник_Кассы_Получение";
		КонецЕсли;
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Касса", Новый Структура("Значение, ИмяПКО", Касса, ИмяПКО));
	КонецЕсли;
	
	Если МассивСтрокРасшифровка.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("РасшифровкаПлатежа", МассивСтрокРасшифровка);
		
		Если ДанныеXDTO.ВидРасчетов.Значение = "Прочее" Тогда
			ПолученныеДанные.СчетУчетаРасчетовСКонтрагентомБУ = ПланыСчетов.Типовой.НайтиПоКоду(МассивСтрокРасшифровка[0].СчетУчетаРасчетовСКонтрагентомБУ);
			ПолученныеДанные.СчетУчетаРасчетовСКонтрагентомНУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", ПолученныеДанные.СчетУчетаРасчетовСКонтрагентомБУ));
		КонецЕсли;		
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_РКОРасчетыСКонтрагентами_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УстановкаУчетнойПолитикиОрганизации(?(ДанныеИБ = Неопределено, ПолученныеДанные.Организация, ДанныеИБ.Организация));
	
	ПКО_РКО_ПолучениеСчетКасса(ПолученныеДанные);
	Если ДанныеИБ = Неопределено Тогда
		
		ОрганизацияЯвляетсяПлательщикомКПН =  ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(ПолученныеДанные.Организация, ПолученныеДанные.Дата);
		
		Если Не ОрганизацияЯвляетсяПлательщикомКПН Тогда
			ПолученныеДанные.УчитыватьКПН = Ложь;
		Иначе
			ПолученныеДанные.УчитыватьКПН = Истина;
		КонецЕсли;	
	
		Если НЕ ПолученныеДанные.УчитыватьКПН Тогда
			ПолученныеДанные.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НеОтражаетсяВНУ;
		Иначе
			ПолученныеДанные.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ;
		КонецЕсли;
	
		Возврат;
	КонецЕсли;
	
	Если ДанныеИБ <> Неопределено Тогда
		Если ЗначениеЗаполнено(ДанныеИБ.СчетУчетаРасчетовСКонтрагентомБУ) Тогда
			ПолученныеДанные.СчетУчетаРасчетовСКонтрагентомБУ = ДанныеИБ.СчетУчетаРасчетовСКонтрагентомБУ;
		КонецЕсли;
		Если ЗначениеЗаполнено(ДанныеИБ.СчетУчетаРасчетовСКонтрагентомНУ) Тогда
			ПолученныеДанные.СчетУчетаРасчетовСКонтрагентомНУ = ДанныеИБ.СчетУчетаРасчетовСКонтрагентомНУ;
		КонецЕсли;		
	КонецЕсли;	
			
	// Заменяем свойства, которые получили из XDTO
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
	
	// Восстанавливаем "затертые" данные
	//РасшифровкаПлатежа
	МассивКлючевыхПолей = Новый Массив;
	МассивКлючевыхПолей.Добавить("ДоговорКонтрагента");
	МассивКлючевыхПолей.Добавить("СуммаПлатежа");
	МассивКлючевыхПолей.Добавить("СуммаВзаиморасчетов");
	МассивКлючевыхПолей.Добавить("КурсВзаиморасчетов");
	МассивКлючевыхПолей.Добавить("КратностьВзаиморасчетов");
	МассивКлючевыхПолей.Добавить("СтатьяДвиженияДенежныхСредств");
	
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.РасшифровкаПлатежа,
		ДанныеИБ.РасшифровкаПлатежа,
		МассивКлючевыхПолей,
		"Сделка, СчетУчетаРасчетовСКонтрагентомБУ, СчетУчетаРасчетовПоАвансам");
	
	ДанныеИБ.РасшифровкаПлатежа.Загрузить(ПолученныеДанные.РасшифровкаПлатежа.Выгрузить());
	ПолученныеДанные = Неопределено;
КонецПроцедуры
#КонецОбласти
#Область Документ_РКОРасчетыССотрудниками_Получение
Процедура ДобавитьПКО_Документ_РКОРасчетыССотрудниками_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_РКОРасчетыССотрудниками_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.РасходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата = "Документ.РКОРасчетыССотрудниками";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_РКОРасчетыССотрудниками_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_РКОРасчетыССотрудниками_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_РКО";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.СвойствоФормата = "ВидРасчетов";
	НоваяСтрока.ПравилоКонвертацииСвойства = "ВидыОперацийРКО_РасчетыССотрудниками";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Выдать";
	НоваяСтрока.СвойствоФормата = "Выдать";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Касса";
	НоваяСтрока.СвойствоФормата = "Касса";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Кассы_Получение_ИзСтруктуры";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Сотрудник";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ФизическиеЛица_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Основание";
	НоваяСтрока.СвойствоФормата = "Основание";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПоДокументу";
	НоваяСтрока.СвойствоФормата = "ПоДокументу";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Приложение";
	НоваяСтрока.СвойствоФормата = "Приложение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтатьяДвиженияДенежныхСредств";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетКасса";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетУчетаРасчетовСКонтрагентомБУ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_РКОРасчетыССотрудниками_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Проведен = Истина;
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);	
	
	ДокументыДвиженияДС_ПолучениеСтатьиДДС(ПолученныеДанные, ДанныеXDTO);
	
	Если ДанныеXDTO.КлючевыеСвойства.Свойство("Касса") Тогда 
		Касса = ДанныеXDTO.КлючевыеСвойства.Касса;
	Иначе 
		Касса = ДанныеXDTO.Касса;
	КонецЕсли;
	Если ЗначениеЗаполнено(Касса) Тогда
		Если ТипЗнч(Касса) = Тип("Структура") И 
			Касса.Свойство("Ссылка") = Ложь Тогда
			ИмяПКО = "Справочник_Кассы_Получение_ИзСтруктуры";
		Иначе
			ИмяПКО = "Справочник_Кассы_Получение";
		КонецЕсли;
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Касса", Новый Структура("Значение, ИмяПКО", Касса, ИмяПКО));
	КонецЕсли;
	
	Если ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийРКО.РасходДенежныхСредствПрочее Тогда
		Если Не ЗначениеЗаполнено(ПолученныеДанные.СчетУчетаРасчетовСКонтрагентомБУ) И ДанныеXDTO.РасшифровкаПлатежа.Количество() > 0 Тогда 
			ПолученныеДанные.СчетУчетаРасчетовСКонтрагентомБУ = ПланыСчетов.Типовой.НайтиПоКоду(ДанныеXDTO.РасшифровкаПлатежа[0].СчетУчетаРасчетов);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_РКОРасчетыССотрудниками_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УстановкаУчетнойПолитикиОрганизации(?(ДанныеИБ = Неопределено, ПолученныеДанные.Организация, ДанныеИБ.Организация));
	
	ПКО_РКО_ПолучениеСчетКасса(ПолученныеДанные);
	
	Если ДанныеИБ = Неопределено Тогда
		
		ОрганизацияЯвляетсяПлательщикомКПН =  ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(ПолученныеДанные.Организация, ПолученныеДанные.Дата);
		
		Если Не ОрганизацияЯвляетсяПлательщикомКПН Тогда
			ПолученныеДанные.УчитыватьКПН = Ложь;
		Иначе
			ПолученныеДанные.УчитыватьКПН = Истина;
		КонецЕсли;	
	
		Если НЕ ПолученныеДанные.УчитыватьКПН Тогда
			ПолученныеДанные.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НеОтражаетсяВНУ;
		Иначе
			ПолученныеДанные.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ;
		КонецЕсли;
	
	КонецЕсли;
	
	ДанныеДляЗаполнения = ?(ДанныеИБ = Неопределено, ПолученныеДанные, ДанныеИБ);
	
	Если ДанныеДляЗаполнения.ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетнику Тогда 
		
		Если ДанныеДляЗаполнения.ВыдачаВПодотчет.Количество() = 0 Тогда 		
			НоваяСтрока = ДанныеДляЗаполнения.ВыдачаВПодотчет.Добавить();
		Иначе
			НоваяСтрока = ДанныеДляЗаполнения.ВыдачаВПодотчет[0];
		КонецЕсли;	
		
		Если Не ЗначениеЗаполнено(НоваяСтрока.ВидЗадолженностиПодотчетногоЛица) Тогда 
			НоваяСтрока.ВидЗадолженностиПодотчетногоЛица = Перечисления.ВидыЗадолженностиПодотчетныхЛиц.Прочие;
		КонецЕсли;		
		НоваяСтрока.СтатьяДвиженияДенежныхСредств 	= ДанныеДляЗаполнения.СтатьяДвиженияДенежныхСредств;
		НоваяСтрока.СуммаПлатежа 					= ДанныеДляЗаполнения.СуммаДокумента;							
			
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_РТиУБезПереходаПравСобственностиУслуги
Процедура ДобавитьПКО_Документ_РТиУБезПереходаПравСобственностиУслуги(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_РТиУБезПереходаПравСобственностиУслуги";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.РеализацияТоваровУслуг;
	ПравилоКонвертации.ОбъектФормата = "Документ.РеализацияТоваровУслуг";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_РТиУБезПереходаПравСобственностиУслуги_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_РТиУБезПереходаПравСобственностиУслуги_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_РТиУ";
	ПравилоКонвертации.ВариантИдентификации = "ПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "АдресДоставки";
	НоваяСтрока.СвойствоФормата = "АдресДоставки";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "БанковскийСчетОрганизации";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Грузополучатель";
	НоваяСтрока.СвойствоФормата = "Грузополучатель";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "ДатаПереходаПраваСобственности";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КратностьВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "КратностьВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КурсВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "КурсВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Продавец";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаВключаетНДС";
	НоваяСтрока.СвойствоФормата = "СуммаВключаетНДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоговорКонтрагента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Содержание";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_РТиУБезПереходаПравСобственностиУслуги_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия;
	ДобавитьДоговорВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
		
	ПолученныеДанные.Проведен = Истина;
	
	Номер = ДанныеXDTO.КлючевыеСвойства.Номер;
	ПолученныеДанные.Номер = Лев(Номер, 5) + "У" + Сред(Номер, 7);
	
	МассивСтрокУслуги = Новый Массив;
	Если ДанныеXDTO.Свойство("Услуги")
		И ЗначениеЗаполнено(ДанныеXDTO.Услуги) Тогда
	
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполнения.Вставить("Содержание", "Содержание");
		ПравилаЗаполнения.Вставить("Количество", "Количество");
		ПравилаЗаполнения.Вставить("Сумма", "Сумма");
		ПравилаЗаполнения.Вставить("Цена", "Цена");
		ПравилаЗаполнения.Вставить("СтавкаНДС", "СтавкаНДС");
		ПравилаЗаполнения.Вставить("СуммаНДС", "СуммаНДС");
		Для Каждого Строка Из ДанныеXDTO.Услуги Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			ОбработатьСтавкуНДСПриПолучении(Строка, СтруктураДанныхСтроки, КомпонентыОбмена.ПараметрыКонвертации);
			МассивСтрокУслуги.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	Если МассивСтрокУслуги.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Услуги", МассивСтрокУслуги);
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_РТиУБезПереходаПравСобственностиУслуги_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УстановкаУчетнойПолитикиОрганизации(?(ДанныеИБ = Неопределено, ПолученныеДанные.Организация, ДанныеИБ.Организация));
	
	Если ДанныеИБ = Неопределено Тогда
		
		ОрганизацияЯвляетсяПлательщикомКПН =  ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(ПолученныеДанные.Организация, ПолученныеДанные.Дата);
		
		Если Не ОрганизацияЯвляетсяПлательщикомКПН Тогда
			ПолученныеДанные.УчитыватьКПН = Ложь;
		Иначе
			ПолученныеДанные.УчитыватьКПН = Истина;
		КонецЕсли;	
	
		Если НЕ ПолученныеДанные.УчитыватьКПН Тогда
			ПолученныеДанные.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НеОтражаетсяВНУ;
		Иначе
			ПолученныеДанные.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ;
		КонецЕсли;
	
		ПолученныеДанные.УчитыватьНДС = ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНДС(ПолученныеДанные.Организация, ПолученныеДанные.Дата);
	
		Возврат;
	КонецЕсли;
	
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
		
	// Восстанавливаем "затертые" данные
	
	//Услуги
	МассивКлючевыхПолей = Новый Массив;
	МассивКлючевыхПолей.Добавить("Номенклатура");
	МассивКлючевыхПолей.Добавить("Содержание");
	МассивКлючевыхПолей.Добавить("Количество");
	МассивКлючевыхПолей.Добавить("Сумма");
	МассивКлючевыхПолей.Добавить("Цена");
	МассивКлючевыхПолей.Добавить("СтавкаНДС");
	МассивКлючевыхПолей.Добавить("СуммаНДС");
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.Услуги,
		ДанныеИБ.Услуги,
		МассивКлючевыхПолей,
		"СчетУчетаНДСПоРеализации,СчетДоходовБУ");
	ДанныеИБ.Услуги.Загрузить(ПолученныеДанные.Услуги.Выгрузить());
	ПолученныеДанные = Неопределено;
КонецПроцедуры
#КонецОбласти
#Область Документ_СБДСВзносыИОтчисления_Получение_ЗУП
Процедура ДобавитьПКО_Документ_СБДСВзносыИОтчисления_Получение_ЗУП(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_СБДСВзносыИОтчисления_Получение_ЗУП";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПлатежноеПоручениеИсходящее;
	ПравилоКонвертации.ОбъектФормата = "Документ.СБДСПеречислениеВзносовИОтчислений";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_СБДСВзносыИОтчисления_Получение_ЗУП_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_СБДСВзносыИОтчисления_Получение_ЗУП_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_РКО";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВыписки";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КодНазначенияПлатежа";
	НоваяСтрока.СвойствоФормата = "КодНазначенияПлатежа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НазначениеПлатежа";
	НоваяСтрока.СвойствоФормата = "НазначениеПлатежа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетБанкаПосредника";
	НоваяСтрока.СвойствоФормата = "БанковскийСчет";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетКонтрагента";
	НоваяСтрока.СвойствоФормата = "БанковскийСчет";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетОрганизации";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "БанкПосредник";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Оплачено";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетБанк";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_СБДСВзносыИОтчисления_Получение_ЗУП_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПБДС_СБДС_ПолучениеДатаПроведен(ПолученныеДанные, ДанныеXDTO);
		ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);	
		
		ВидОперацииВзносыОтчисления =  ДанныеXDTO.РасшифровкаПлатежа[0].ВидОперации;
		ПолученныеДанные.Оплачено = Истина;	
		Если ВидОперацииВзносыОтчисления = "СО"
			ИЛИ ВидОперацииВзносыОтчисления = "ВОСМС"
			ИЛИ ВидОперацииВзносыОтчисления = "ООСМС" Тогда
			ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеСоциальныхОтчислений;
															
		ИначеЕсли ВидОперацииВзносыОтчисления = "ОПВ"
					ИЛИ ВидОперацииВзносыОтчисления = "ОППВ" Тогда
			ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеПенсионныхВзносов;
		КонецЕсли;
		
		//ДокументыДвиженияДС_ПолучениеСтатьиДДС(ПолученныеДанные, ДанныеXDTO);
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ДатаВедомостиНаВыплатуЗарплаты", ДанныеXDTO.РасшифровкаПлатежа[0].ДатаВедомостиНаВыплатуЗарплаты);
		ПолученныеДанные.ДополнительныеСвойства.Вставить("НомерВедомостиНаВыплатуЗарплаты", ДанныеXDTO.РасшифровкаПлатежа[0].НомерВедомостиНаВыплатуЗарплаты);
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ФизическоеЛицо", ДанныеXDTO.РасшифровкаПлатежа[0].Сотрудник);
		
		Если ДанныеXDTO.Свойство("Контрагент") Тогда
			
			БанкПосредник = ДанныеXDTO.Контрагент;
			ИмяПКО = "Справочник_Контрагенты_Получение";
			ПолученныеДанные.ДополнительныеСвойства.Вставить(
				"БанкПосредник", Новый Структура("Значение,ИмяПКО", БанкПосредник, ИмяПКО));
			
		КонецЕсли;
		
		РасшифровкаПлатежаXDTO = Неопределено;
		
		Если ДанныеXDTO.Свойство("РасшифровкаПлатежа", РасшифровкаПлатежаXDTO)
			И ЗначениеЗаполнено(РасшифровкаПлатежаXDTO) Тогда
			
			РасшифровкаПлатежаXDTOКопия = РасшифровкаПлатежаXDTO.Скопировать();
	
			РасшифровкаПлатежаXDTOКопия.Свернуть("ДатаВедомостиНаВыплатуЗарплаты, НомерВедомостиНаВыплатуЗарплаты, ВидОперации, ВидПлатежа");
			Для каждого СтрокаРасшифровки Из РасшифровкаПлатежаXDTOКопия Цикл
				
				СтрокиРасшифровки = РасшифровкаПлатежаXDTO.НайтиСтроки(Новый Структура("ДатаВедомостиНаВыплатуЗарплаты, НомерВедомостиНаВыплатуЗарплаты", СтрокаРасшифровки.ДатаВедомостиНаВыплатуЗарплаты, СтрокаРасшифровки.НомерВедомостиНаВыплатуЗарплаты));
	
				Если СтрокаРасшифровки.ВидПлатежа = "Налог" Тогда
					ВидПлатежа = Перечисления.ВидыПлатежейВБюджетИФонды.Налог;
				ИначеЕсли СтрокаРасшифровки.ВидПлатежа = "НалогСам" Тогда
					ВидПлатежа = Перечисления.ВидыПлатежейВБюджетИФонды.НалогСам;
				ИначеЕсли СтрокаРасшифровки.ВидПлатежа = "НалогАкт" Тогда
					ВидПлатежа = Перечисления.ВидыПлатежейВБюджетИФонды.НалогАкт;
				ИначеЕсли СтрокаРасшифровки.ВидПлатежа = "ПениСам" Тогда
					ВидПлатежа = Перечисления.ВидыПлатежейВБюджетИФонды.ПениСам;
				ИначеЕсли СтрокаРасшифровки.ВидПлатежа = "ПениАкт" Тогда
					ВидПлатежа = Перечисления.ВидыПлатежейВБюджетИФонды.ПениАкт;
				КонецЕсли;
				
				Если СтрокаРасшифровки.ВидОперации = "СО" Тогда
					ВидОперацииДокумента = Перечисления.ВидыОперацийСОПеречислениеВФонды.ПеречислениеОбязательныхСоциальныхОтчислений;
				ИначеЕсли СтрокаРасшифровки.ВидОперации = "ВОСМС" Тогда
					ВидОперацииДокумента = Перечисления.ВидыОперацийСОПеречислениеВФонды.ПеречислениеВзносовОСМС;
				ИначеЕсли СтрокаРасшифровки.ВидОперации = "ООСМС" Тогда
					ВидОперацииДокумента = Перечисления.ВидыОперацийСОПеречислениеВФонды.ПеречислениеОтчисленийОСМС;
				ИначеЕсли СтрокаРасшифровки.ВидОперации = "ОПВ" Тогда
					ВидОперацииДокумента =  Перечисления.ВидыОперацийОПВПеречислениеВФонды.ПеречислениеОбязательныхПенсионныхВзносов;
				Иначе
					ВидОперацииДокумента =  Перечисления.ВидыОперацийОПВПеречислениеВФонды.ПеречислениеОбязательныхПрофессиональныхПенсионныхВзносов;
				КонецЕсли;
				
				СуммаДокумента = 0;
	
				Если ВидОперацииДокумента = Перечисления.ВидыОперацийСОПеречислениеВФонды.ПеречислениеОбязательныхСоциальныхОтчислений
					ИЛИ ВидОперацииДокумента = Перечисления.ВидыОперацийСОПеречислениеВФонды.ПеречислениеВзносовОСМС
					ИЛИ ВидОперацииДокумента = Перечисления.ВидыОперацийСОПеречислениеВФонды.ПеречислениеОтчисленийОСМС Тогда
					
					СтрокаТЧ = ПолученныеДанные.ПеречислениеСоциальныхОтчислений.Добавить();
				
					Запрос = Новый Запрос();
					Запрос.Текст =
					"ВЫБРАТЬ
					|	СОПеречислениеВФонды.Ссылка,
					|	СОПеречислениеВФонды.Номер,
					|	СОПеречислениеВФонды.Дата
					|ИЗ
					|	Документ.СОПеречислениеВФонды КАК СОПеречислениеВФонды
					|ГДЕ
					|	СОПеречислениеВФонды.Номер = &Номер
					|	И СОПеречислениеВФонды.Дата = &Дата";
						
					Запрос.УстановитьПараметр("Дата", СтрокаРасшифровки.ДатаВедомостиНаВыплатуЗарплаты);
					Запрос.УстановитьПараметр("Номер", СтрокаРасшифровки.НомерВедомостиНаВыплатуЗарплаты);
				
					Выборка = Запрос.Выполнить().Выбрать();
				
					Если Выборка.Следующий() Тогда
					
						СтараяВедомость = Выборка.Ссылка.ПолучитьОбъект();
						СтараяВедомость.Дата = СтрокаРасшифровки.ДатаВедомостиНаВыплатуЗарплаты;
						СтараяВедомость.Номер = СтрокаРасшифровки.НомерВедомостиНаВыплатуЗарплаты;
						СтараяВедомость.Организация = ПолученныеДанные.Организация;
						СтараяВедомость.СуммаДокумента = ПолученныеДанные.СуммаДокумента;
						СтараяВедомость.СпособРасчетаСуммКПеречислению = Перечисления.СпособыРасчетаСуммКПеречислениюСО.ПоЗадолженностиЗаМесяц;
						СтараяВедомость.ПериодРегистрации = НачалоМесяца(ПолученныеДанные.Дата);
						СтараяВедомость.Контрагент = ПолученныеДанные.Контрагент;
			            СтараяВедомость.ВидПлатежа = ВидПлатежа;
			            СтараяВедомость.ВидОперации = ВидОперацииДокумента;
		       			СтараяВедомость.Ответственный = ПолученныеДанные.Ответственный;
		                 
						СтараяВедомость.СоциальныеОтчисления.Очистить();
						Для каждого СтрокаВедомости Из СтрокиРасшифровки Цикл
							СтрокаТЧЗарплата = СтараяВедомость.СоциальныеОтчисления.Добавить();
							Если НЕ ЗначениеЗаполнено(СтрокаВедомости.Сотрудник) Тогда
								СтрокаТЧЗарплата.Физлицо = ФизическоеЛицоПоУмолчанию();
							Иначе
								СтрокаТЧЗарплата.Физлицо = ФизическоеЛицоДляЗагрузки(СтрокаВедомости.Сотрудник);
							КонецЕсли;
							
							СтрокаТЧЗарплата.Сумма = СтрокаВедомости.Сумма;
							СуммаДокумента = СуммаДокумента + СтрокаВедомости.Сумма;
						КонецЦикла;
						
						СтараяВедомость.Записать();
						Ведомость = СтараяВедомость.Ссылка;
						
					Иначе
						НоваяВедомость  = Документы.СОПеречислениеВФонды.СоздатьДокумент();
						НоваяВедомость.Дата = СтрокаРасшифровки.ДатаВедомостиНаВыплатуЗарплаты;
						НоваяВедомость.Номер = СтрокаРасшифровки.НомерВедомостиНаВыплатуЗарплаты;
						НоваяВедомость.Организация = ПолученныеДанные.Организация;
						НоваяВедомость.СуммаДокумента = ПолученныеДанные.СуммаДокумента;
						НоваяВедомость.СпособРасчетаСуммКПеречислению = Перечисления.СпособыРасчетаСуммКПеречислениюСО.ПоЗадолженностиЗаМесяц;
						НоваяВедомость.ПериодРегистрации = НачалоМесяца(ПолученныеДанные.Дата);
						НоваяВедомость.Контрагент = ПолученныеДанные.Контрагент;
				        НоваяВедомость.ВидПлатежа = ВидПлатежа;
				        НоваяВедомость.ВидОперации = ВидОперацииДокумента;
						НоваяВедомость.Ответственный = ПолученныеДанные.Ответственный;
						
						Для каждого СтрокаВедомости Из СтрокиРасшифровки Цикл
							СтрокаТЧЗарплата = НоваяВедомость.СоциальныеОтчисления.Добавить();
							Если НЕ ЗначениеЗаполнено(СтрокаВедомости.Сотрудник) Тогда
								СтрокаТЧЗарплата.Физлицо = ФизическоеЛицоПоУмолчанию();
							Иначе
								СтрокаТЧЗарплата.Физлицо = ФизическоеЛицоДляЗагрузки(СтрокаВедомости.Сотрудник);
							КонецЕсли;			
							СтрокаТЧЗарплата.Сумма = СтрокаВедомости.Сумма;
							СуммаДокумента = СуммаДокумента + СтрокаВедомости.Сумма;
						КонецЦикла;
	
						НоваяВедомость.Записать();
						Ведомость = НоваяВедомость.Ссылка;
				
					КонецЕсли;
				
					СтрокаТЧ.Документ = Ведомость; 
					СтрокаТЧ.СуммаКПеречислению = СуммаДокумента;    
					
				Иначе
					СтрокаТЧ = ПолученныеДанные.ПеречислениеПенсионныхВзносов.Добавить();
					
					Запрос = Новый Запрос();
					Запрос.Текст =
					"ВЫБРАТЬ
					|	ОПВПеречислениеВФонды.Ссылка,
					|	ОПВПеречислениеВФонды.Номер,
					|	ОПВПеречислениеВФонды.Дата
					|ИЗ
					|	Документ.ОПВПеречислениеВФонды КАК ОПВПеречислениеВФонды
					|ГДЕ
					|	ОПВПеречислениеВФонды.Номер = &Номер
					|	И ОПВПеречислениеВФонды.Дата = &Дата";
						
					Запрос.УстановитьПараметр("Дата", СтрокаРасшифровки.ДатаВедомостиНаВыплатуЗарплаты);
					Запрос.УстановитьПараметр("Номер", СтрокаРасшифровки.НомерВедомостиНаВыплатуЗарплаты);
				
					Выборка = Запрос.Выполнить().Выбрать();
				
					Если Выборка.Следующий()> 0 Тогда
						
						СтараяВедомость = Выборка.Ссылка.ПолучитьОбъект();
						СтараяВедомость.Дата = СтрокаРасшифровки.ДатаВедомостиНаВыплатуЗарплаты;
						СтараяВедомость.Номер = СтрокаРасшифровки.НомерВедомостиНаВыплатуЗарплаты;
						СтараяВедомость.Организация = ПолученныеДанные.Организация;
						СтараяВедомость.СуммаДокумента = ПолученныеДанные.СуммаДокумента;
						СтараяВедомость.СпособРасчетаСуммКПеречислению = Перечисления.СпособыРасчетаСуммКПеречислениюОПВ.ПоЗадолженностиЗаМесяц;
						СтараяВедомость.ПериодРегистрации = НачалоМесяца(ПолученныеДанные.Дата);
						СтараяВедомость.Контрагент = ПолученныеДанные.Контрагент;
						СтараяВедомость.ВидПлатежа = ВидПлатежа;
						СтараяВедомость.ВидОперации = ВидОперацииДокумента;
	
		      			СтараяВедомость.Ответственный = ПолученныеДанные.Ответственный;
						
						СтараяВедомость.ПенсионныеВзносы.Очистить();
						Для каждого СтрокаВедомости Из СтрокиРасшифровки Цикл
							СтрокаТЧЗарплата = СтараяВедомость.ПенсионныеВзносы.Добавить();
							Если НЕ ЗначениеЗаполнено(СтрокаВедомости.Сотрудник) Тогда
								СтрокаТЧЗарплата.Физлицо = ФизическоеЛицоПоУмолчанию();
							Иначе
								СтрокаТЧЗарплата.Физлицо = ФизическоеЛицоДляЗагрузки(СтрокаВедомости.Сотрудник);
							КонецЕсли;
							
							СтрокаТЧЗарплата.Сумма = СтрокаВедомости.Сумма;
							СуммаДокумента = СуммаДокумента + СтрокаВедомости.Сумма;
						КонецЦикла;
						
						СтараяВедомость.Записать();
						Ведомость = СтараяВедомость.Ссылка;
							
					Иначе
						НоваяВедомость  = Документы.ОПВПеречислениеВФонды.СоздатьДокумент();
						НоваяВедомость.Дата = СтрокаРасшифровки.ДатаВедомостиНаВыплатуЗарплаты;
						НоваяВедомость.Номер = СтрокаРасшифровки.НомерВедомостиНаВыплатуЗарплаты;
						НоваяВедомость.Организация = ПолученныеДанные.Организация;
						НоваяВедомость.СуммаДокумента = ПолученныеДанные.СуммаДокумента;
						НоваяВедомость.СпособРасчетаСуммКПеречислению = Перечисления.СпособыРасчетаСуммКПеречислениюОПВ.ПоЗадолженностиЗаМесяц;
						НоваяВедомость.ПериодРегистрации = НачалоМесяца(ПолученныеДанные.Дата);
						НоваяВедомость.Контрагент = ПолученныеДанные.Контрагент;
						НоваяВедомость.ВидПлатежа = ВидПлатежа;
						НоваяВедомость.ВидОперации = ВидОперацииДокумента;
	
		      			НоваяВедомость.Ответственный = ПолученныеДанные.Ответственный;
						Для каждого СтрокаВедомости Из СтрокиРасшифровки Цикл
							СтрокаТЧЗарплата = НоваяВедомость.ПенсионныеВзносы.Добавить();
							Если НЕ ЗначениеЗаполнено(СтрокаВедомости.Сотрудник) Тогда
								СтрокаТЧЗарплата.Физлицо = ФизическоеЛицоПоУмолчанию();
							Иначе
								СтрокаТЧЗарплата.Физлицо = ФизическоеЛицоДляЗагрузки(СтрокаВедомости.Сотрудник);
							КонецЕсли;
							
							СтрокаТЧЗарплата.Сумма = СтрокаВедомости.Сумма;
							СуммаДокумента = СуммаДокумента + СтрокаВедомости.Сумма;
						КонецЦикла;
	
						НоваяВедомость.Записать();
						Ведомость = НоваяВедомость.Ссылка;
				
					КонецЕсли;
				
					СтрокаТЧ.Документ = Ведомость; 
					СтрокаТЧ.СуммаКПеречислению = СуммаДокумента;
				
				КонецЕсли;
			КонецЦикла;
		КонецЕсли
КонецПроцедуры

Процедура ПКО_Документ_СБДСВзносыИОтчисления_Получение_ЗУП_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УстановкаУчетнойПолитикиОрганизации(?(ДанныеИБ = Неопределено, ПолученныеДанные.Организация, ДанныеИБ.Организация));
	
	ПБДС_СБДС_ПолучениеСчетБанк(ПолученныеДанные);
	
	Если ДанныеИБ = Неопределено Тогда
		
		ОрганизацияЯвляетсяПлательщикомКПН =  ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(ПолученныеДанные.Организация, ПолученныеДанные.Дата);
		
		Если Не ОрганизацияЯвляетсяПлательщикомКПН Тогда
			ПолученныеДанные.УчитыватьКПН = Ложь;
		Иначе
			ПолученныеДанные.УчитыватьКПН = Истина;
		КонецЕсли;	
	
		Если НЕ ПолученныеДанные.УчитыватьКПН Тогда
			ПолученныеДанные.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НеОтражаетсяВНУ;
		Иначе
			ПолученныеДанные.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ;
		КонецЕсли;
	
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_СБДСКонвертацияВалюты_Получение
Процедура ДобавитьПКО_Документ_СБДСКонвертацияВалюты_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_СБДСКонвертацияВалюты_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПлатежноеПоручениеИсходящее;
	ПравилоКонвертации.ОбъектФормата = "Документ.СБДСКонвертацияВалюты";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_СБДСКонвертацияВалюты_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_СБДСКонвертацияВалюты_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_СБДС";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВыписки";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НазначениеПлатежа";
	НоваяСтрока.СвойствоФормата = "НазначениеПлатежа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПодразделениеОрганизации";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетКонтрагента";
	НоваяСтрока.СвойствоФормата = "БанковскийСчет";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетОрганизации";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетБанк";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетУчетаРасчетовСКонтрагентомБУ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоговорКонтрагента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КратностьВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КурсВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтатьяДвиженияДенежныхСредств";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаПлатежа";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_СБДСКонвертацияВалюты_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПБДС_СБДС_ПолучениеДатаПроведен(ПолученныеДанные, ДанныеXDTO);
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);	
	
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПрочиеРасчетыСКонтрагентами;
	
	ПолученныеДанные.СчетУчетаРасчетовСКонтрагентомБУ = ПланыСчетов.Типовой.ДенежныеСредстваВПутиКонвертацияВалюты;
	
	МассивСтрокРасшифровка = Новый Массив;
	Если ДанныеXDTO.Свойство("РасшифровкаПлатежа")
		И ЗначениеЗаполнено(ДанныеXDTO.РасшифровкаПлатежа) 
		И ДанныеXDTO.РасшифровкаПлатежа.Количество() > 0 Тогда
		
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("СтатьяДДС","СтатьяДвиженияДенежныхСредств");
		ПравилаЗаполнения.Вставить("Сумма","СуммаПлатежа");
		ПравилаЗаполнения.Вставить("СуммаВал","СуммаВзаиморасчетов");
		ПравилаЗаполнения.Вставить("КратностьКонвертации","КратностьВзаиморасчетов");
		ПравилаЗаполнения.Вставить("КурсКонвертации","КурсВзаиморасчетов");
		
		Для Каждого Строка Из ДанныеXDTO.РасшифровкаПлатежа Цикл
			
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			
			Договор = Строка.Договор;
			Если ЗначениеЗаполнено(Договор) И ТипЗнч(Договор) = Тип("Структура") И
				Договор.Свойство("Ссылка") = Ложь Тогда
				ИмяПКО = "Справочник_ДоговорыКонтрагентов_ИзСтруктуры";
				СтруктураДанныхСтроки.Вставить("ДоговорКонтрагента",Новый Структура("Значение, ИмяПКО", Договор, ИмяПКО));
			Иначе
				СтруктураДанныхСтроки.Вставить("ДоговорКонтрагента",Договор);
			КонецЕсли;
	
			
			МассивСтрокРасшифровка.Добавить(СтруктураДанныхСтроки);
			
		КонецЦикла;
		Если МассивСтрокРасшифровка.Количество() > 0 Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("РасшифровкаПлатежа", МассивСтрокРасшифровка);
		КонецЕсли;
	
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_СБДСКонвертацияВалюты_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УстановкаУчетнойПолитикиОрганизации(?(ДанныеИБ = Неопределено, ПолученныеДанные.Организация, ДанныеИБ.Организация));
	
	ПБДС_СБДС_ПолучениеСчетБанк(ПолученныеДанные);
	
	Если ДанныеИБ = Неопределено Тогда
		
		ОрганизацияЯвляетсяПлательщикомКПН =  ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(ПолученныеДанные.Организация, ПолученныеДанные.Дата);
		
		Если Не ОрганизацияЯвляетсяПлательщикомКПН Тогда
			ПолученныеДанные.УчитыватьКПН = Ложь;
		Иначе
			ПолученныеДанные.УчитыватьКПН = Истина;
		КонецЕсли;	
	
		Если НЕ ПолученныеДанные.УчитыватьКПН Тогда
			ПолученныеДанные.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НеОтражаетсяВНУ;
		Иначе
			ПолученныеДанные.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ;
		КонецЕсли;
	
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_СБДСПереводНаДругойСчет_Получение
Процедура ДобавитьПКО_Документ_СБДСПереводНаДругойСчет_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_СБДСПереводНаДругойСчет_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПлатежноеПоручениеИсходящее;
	ПравилоКонвертации.ОбъектФормата = "Документ.СБДСПереводНаДругойСчет";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_СБДСПереводНаДругойСчет_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_СБДСПереводНаДругойСчет_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_СБДС";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВыписки";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НазначениеПлатежа";
	НоваяСтрока.СвойствоФормата = "НазначениеПлатежа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетКонтрагента";
	НоваяСтрока.СвойствоФормата = "БанковскийСчет";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетОрганизации";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетБанк";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетУчетаРасчетовСКонтрагентомБУ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_СБДСПереводНаДругойСчет_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПБДС_СБДС_ПолучениеДатаПроведен(ПолученныеДанные, ДанныеXDTO);
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет;
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
КонецПроцедуры

Процедура ПКО_Документ_СБДСПереводНаДругойСчет_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УстановкаУчетнойПолитикиОрганизации(?(ДанныеИБ = Неопределено, ПолученныеДанные.Организация, ДанныеИБ.Организация));
	
	ПБДС_СБДС_ПолучениеСчетБанк(ПолученныеДанные);
	ПолученныеДанные.СчетУчетаРасчетовСКонтрагентомБУ = ПолученныеДанные.СчетБанк;
	
	Если ДанныеИБ = Неопределено Тогда
		
		ОрганизацияЯвляетсяПлательщикомКПН =  ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(ПолученныеДанные.Организация, ПолученныеДанные.Дата);
		
		Если Не ОрганизацияЯвляетсяПлательщикомКПН Тогда
			ПолученныеДанные.УчитыватьКПН = Ложь;
		Иначе
			ПолученныеДанные.УчитыватьКПН = Истина;
		КонецЕсли;	
	
		Если НЕ ПолученныеДанные.УчитыватьКПН Тогда
			ПолученныеДанные.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НеОтражаетсяВНУ;
		Иначе
			ПолученныеДанные.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ;
		КонецЕсли;
	
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_СБДСПеречислениеЗаработнойПлаты_П_ЗУП
Процедура ДобавитьПКО_Документ_СБДСПеречислениеЗаработнойПлаты_П_ЗУП(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_СБДСПеречислениеЗаработнойПлаты_П_ЗУП";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПлатежноеПоручениеИсходящее;
	ПравилоКонвертации.ОбъектФормата = "Документ.СБДСПеречислениеЗаработнойПлаты";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_СБДСПеречислениеЗаработнойПлаты_П_ЗУП_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_СБДСПеречислениеЗаработнойПлаты_П_ЗУП_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_СБДС";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВыписки";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КодНазначенияПлатежа";
	НоваяСтрока.СвойствоФормата = "КодНазначенияПлатежа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НазначениеПлатежа";
	НоваяСтрока.СвойствоФормата = "НазначениеПлатежа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетКонтрагента";
	НоваяСтрока.СвойствоФормата = "БанковскийСчет";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетОрганизации";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтатьяДвиженияДенежныхСредств";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетБанк";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_СБДСПеречислениеЗаработнойПлаты_П_ЗУП_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПБДС_СБДС_ПолучениеДатаПроведен(ПолученныеДанные, ДанныеXDTO);
		ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеЗаработнойПлаты;
		ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
		
		ДокументыДвиженияДС_ПолучениеСтатьиДДС(ПолученныеДанные, ДанныеXDTO);
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ДатаВедомостиНаВыплатуЗарплаты", ДанныеXDTO.РасшифровкаПлатежа[0].ДатаВедомостиНаВыплатуЗарплаты);
		ПолученныеДанные.ДополнительныеСвойства.Вставить("НомерВедомостиНаВыплатуЗарплаты", ДанныеXDTO.РасшифровкаПлатежа[0].НомерВедомостиНаВыплатуЗарплаты);
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ФизическоеЛицо", ДанныеXDTO.РасшифровкаПлатежа[0].Сотрудник);
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Банк", ДанныеXDTO.РасшифровкаПлатежа[0].Банк);
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Сумма", ДанныеXDTO.РасшифровкаПлатежа[0].Сумма);
		
		РасшифровкаПлатежаXDTO = Неопределено;
		
		Если ДанныеXDTO.Свойство("РасшифровкаПлатежа", РасшифровкаПлатежаXDTO)
			И ЗначениеЗаполнено(РасшифровкаПлатежаXDTO) Тогда
			
			РасшифровкаПлатежаXDTOКопия = РасшифровкаПлатежаXDTO.Скопировать();
	
			РасшифровкаПлатежаXDTOКопия.Свернуть("НомерВедомостиНаВыплатуЗарплаты, ДатаВедомостиНаВыплатуЗарплаты");
			
			Для каждого СтрокаРасшифровки Из РасшифровкаПлатежаXDTOКопия Цикл
				
				СтрокиРасшифровки = РасшифровкаПлатежаXDTO.НайтиСтроки(Новый Структура("НомерВедомостиНаВыплатуЗарплаты, ДатаВедомостиНаВыплатуЗарплаты", СтрокаРасшифровки.НомерВедомостиНаВыплатуЗарплаты, СтрокаРасшифровки.ДатаВедомостиНаВыплатуЗарплаты));
	
				СтрокаТЧ = ПолученныеДанные.ПеречислениеЗаработнойПлаты.Добавить();
		
				Запрос = Новый Запрос();
				Запрос.Текст =
				"ВЫБРАТЬ
				|	ЗарплатаКВыплатеОрганизаций.Ссылка,
				|	ЗарплатаКВыплатеОрганизаций.Номер,
				|	ЗарплатаКВыплатеОрганизаций.Дата
				|ИЗ
				|	Документ.ЗарплатаКВыплатеОрганизаций КАК ЗарплатаКВыплатеОрганизаций
				|ГДЕ
				|	ЗарплатаКВыплатеОрганизаций.Номер = &Номер
				|	И ЗарплатаКВыплатеОрганизаций.Дата = &Дата";
		
				Запрос.УстановитьПараметр("Дата", СтрокаРасшифровки.ДатаВедомостиНаВыплатуЗарплаты);
				Запрос.УстановитьПараметр("Номер", СтрокаРасшифровки.НомерВедомостиНаВыплатуЗарплаты);
		
				Выборка = Запрос.Выполнить().Выбрать();
				
				СуммаДокумента = 0;
	
				Если Выборка.Следующий() Тогда
		
					СтараяВедомость = Выборка.Ссылка.ПолучитьОбъект();
					СтараяВедомость.Дата = СтрокаРасшифровки.ДатаВедомостиНаВыплатуЗарплаты;
					СтараяВедомость.Номер = СтрокаРасшифровки.НомерВедомостиНаВыплатуЗарплаты;
					СтараяВедомость.Организация = ПолученныеДанные.Организация;
					СтараяВедомость.СуммаДокумента = ПолученныеДанные.СуммаДокумента;
					СтараяВедомость.СпособВыплаты = Перечисления.СпособыВыплатыЗарплаты.ЧерезБанк;
					СтараяВедомость.ПериодНачисленияЗарплаты = НачалоМесяца(ПолученныеДанные.Дата);
					СтараяВедомость.СпособРасчетаСуммКВыплате = Перечисления.СпособыРасчетаСуммКВыплате.ЗарплатаЗаМесяц;
					СтараяВедомость.Ответственный = ПолученныеДанные.Ответственный;
		
					СтараяВедомость.Зарплата.Очистить();
					Для каждого СтрокаВедомости Из СтрокиРасшифровки Цикл
						СтрокаТЧЗарплата = СтараяВедомость.Зарплата.Добавить();
						Если НЕ ЗначениеЗаполнено(СтрокаВедомости.Сотрудник) Тогда
							СтрокаТЧЗарплата.Физлицо = ФизическоеЛицоПоУмолчанию();
						Иначе
							СтрокаТЧЗарплата.Физлицо = ФизическоеЛицоДляЗагрузки(СтрокаВедомости.Сотрудник);
						КонецЕсли;
						СтараяВедомость.Банк =  БанкДляЗагрузки(СтрокаВедомости.Банк);
						СтрокаТЧЗарплата.НомерКартСчета = НомерКартСчетаПоУмолчанию();
						СтрокаТЧЗарплата.Сумма = СтрокаВедомости.Сумма;
						СтрокаТЧЗарплата.СуммаКВыплате = СтрокаВедомости.Сумма;
						
						СуммаДокумента = СуммаДокумента + СтрокаВедомости.Сумма;
					КонецЦикла; 
	
					СтараяВедомость.Записать();
					Ведомость = СтараяВедомость.Ссылка;
				  
				Иначе
					НоваяВедомость  = Документы.ЗарплатаКВыплатеОрганизаций.СоздатьДокумент();
					НоваяВедомость.Дата = СтрокаРасшифровки.ДатаВедомостиНаВыплатуЗарплаты;
					НоваяВедомость.Номер = СтрокаРасшифровки.НомерВедомостиНаВыплатуЗарплаты;
					НоваяВедомость.Организация = ПолученныеДанные.Организация;
					НоваяВедомость.СуммаДокумента = ПолученныеДанные.СуммаДокумента;
					НоваяВедомость.СпособВыплаты = Перечисления.СпособыВыплатыЗарплаты.ЧерезБанк;
					НоваяВедомость.ПериодНачисленияЗарплаты = НачалоМесяца(ПолученныеДанные.Дата);
					НоваяВедомость.СпособРасчетаСуммКВыплате = Перечисления.СпособыРасчетаСуммКВыплате.ЗарплатаЗаМесяц;
					НоваяВедомость.Ответственный = ПолученныеДанные.Ответственный;
					
					Для каждого СтрокаВедомости Из СтрокиРасшифровки Цикл
						
						СтрокаТЧЗарплата = НоваяВедомость.Зарплата.Добавить();
						Если НЕ ЗначениеЗаполнено(СтрокаВедомости.Сотрудник) Тогда
							СтрокаТЧЗарплата.Физлицо = ФизическоеЛицоПоУмолчанию();
						Иначе
							СтрокаТЧЗарплата.Физлицо = ФизическоеЛицоДляЗагрузки(СтрокаВедомости.Сотрудник);
						КонецЕсли;
						НоваяВедомость.Банк =  БанкДляЗагрузки(СтрокаВедомости.Банк);
						СтрокаТЧЗарплата.НомерКартСчета = НомерКартСчетаПоУмолчанию();
						СтрокаТЧЗарплата.Сумма = СтрокаВедомости.Сумма;
						СтрокаТЧЗарплата.СуммаКВыплате = СтрокаВедомости.Сумма;
						СуммаДокумента = СуммаДокумента + СтрокаВедомости.Сумма;
						
					КонецЦикла;	
					НоваяВедомость.Записать();
					Ведомость = НоваяВедомость.Ссылка;
		
				КонецЕсли;
		
				СтрокаТЧ.Ведомость = Ведомость; 
				СтрокаТЧ.СуммаКВыплате = СуммаДокумента;
			   КонецЦикла;
		КонецЕсли
КонецПроцедуры

Процедура ПКО_Документ_СБДСПеречислениеЗаработнойПлаты_П_ЗУП_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УстановкаУчетнойПолитикиОрганизации(?(ДанныеИБ = Неопределено, ПолученныеДанные.Организация, ДанныеИБ.Организация));
	
	ПБДС_СБДС_ПолучениеСчетБанк(ПолученныеДанные);
	
	Если ДанныеИБ = Неопределено Тогда
		
		ОрганизацияЯвляетсяПлательщикомКПН =  ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(ПолученныеДанные.Организация, ПолученныеДанные.Дата);
		
		Если Не ОрганизацияЯвляетсяПлательщикомКПН Тогда
			ПолученныеДанные.УчитыватьКПН = Ложь;
		Иначе
			ПолученныеДанные.УчитыватьКПН = Истина;
		КонецЕсли;	
	
		Если НЕ ПолученныеДанные.УчитыватьКПН Тогда
			ПолученныеДанные.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НеОтражаетсяВНУ;
		Иначе
			ПолученныеДанные.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ;
		КонецЕсли;
	
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_СБДСПеречислениеЗаработнойПлаты_Получение
Процедура ДобавитьПКО_Документ_СБДСПеречислениеЗаработнойПлаты_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_СБДСПеречислениеЗаработнойПлаты_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПлатежноеПоручениеИсходящее;
	ПравилоКонвертации.ОбъектФормата = "Документ.СБДСПеречислениеЗаработнойПлаты";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_СБДСПеречислениеЗаработнойПлаты_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_СБДСПеречислениеЗаработнойПлаты_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_СБДС";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВыписки";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НазначениеПлатежа";
	НоваяСтрока.СвойствоФормата = "НазначениеПлатежа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетКонтрагента";
	НоваяСтрока.СвойствоФормата = "БанковскийСчет";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетОрганизации";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтатьяДвиженияДенежныхСредств";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетБанк";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_СБДСПеречислениеЗаработнойПлаты_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПБДС_СБДС_ПолучениеДатаПроведен(ПолученныеДанные, ДанныеXDTO);
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеЗаработнойПлаты;
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
КонецПроцедуры

Процедура ПКО_Документ_СБДСПеречислениеЗаработнойПлаты_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УстановкаУчетнойПолитикиОрганизации(?(ДанныеИБ = Неопределено, ПолученныеДанные.Организация, ДанныеИБ.Организация));
	
	ПБДС_СБДС_ПолучениеСчетБанк(ПолученныеДанные);
	
	Если ДанныеИБ = Неопределено Тогда
		
		ОрганизацияЯвляетсяПлательщикомКПН =  ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(ПолученныеДанные.Организация, ПолученныеДанные.Дата);
		
		Если Не ОрганизацияЯвляетсяПлательщикомКПН Тогда
			ПолученныеДанные.УчитыватьКПН = Ложь;
		Иначе
			ПолученныеДанные.УчитыватьКПН = Истина;
		КонецЕсли;	
	
		Если НЕ ПолученныеДанные.УчитыватьКПН Тогда
			ПолученныеДанные.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НеОтражаетсяВНУ;
		Иначе
			ПолученныеДанные.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ;
		КонецЕсли;
	
	КонецЕсли;
	
	Если ПолученныеДанные.ПеречислениеЗаработнойПлаты.Количество() = 0 Тогда
		СтрокаТЧ = ПолученныеДанные.ПеречислениеЗаработнойПлаты.Добавить();
	Иначе
		СтрокаТЧ = ПолученныеДанные.ПеречислениеЗаработнойПлаты[0];
	КонецЕсли;
	
	СтрокаТЧ.СуммаКВыплате = ПолученныеДанные.СуммаДокумента;
КонецПроцедуры
#КонецОбласти
#Область Документ_СБДСПеречислениеЗарПлЛицСчета_Получение
Процедура ДобавитьПКО_Документ_СБДСПеречислениеЗарПлЛицСчета_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_СБДСПеречислениеЗарПлЛицСчета_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПлатежноеПоручениеИсходящее;
	ПравилоКонвертации.ОбъектФормата = "Документ.СБДСПеречислениеЗаработнойПлатыНаЛицевыеСчета";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_СБДСПеречислениеЗарПлЛицСчета_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_СБДСПеречислениеЗарПлЛицСчета_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_СБДС";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВыписки";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НазначениеПлатежа";
	НоваяСтрока.СвойствоФормата = "НазначениеПлатежа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетКонтрагента";
	НоваяСтрока.СвойствоФормата = "БанковскийСчет";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетОрганизации";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтатьяДвиженияДенежныхСредств";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетБанк";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_СБДСПеречислениеЗарПлЛицСчета_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПБДС_СБДС_ПолучениеДатаПроведен(ПолученныеДанные, ДанныеXDTO);
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);	
	
	ПолученныеДанные.Номер = ДанныеXDTO.КлючевыеСвойства.Номер;
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеПоИсполнительнымЛистам;
	
	ДокументыДвиженияДС_ПолучениеСтатьиДДС(ПолученныеДанные, ДанныеXDTO);
КонецПроцедуры

Процедура ПКО_Документ_СБДСПеречислениеЗарПлЛицСчета_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УстановкаУчетнойПолитикиОрганизации(?(ДанныеИБ = Неопределено, ПолученныеДанные.Организация, ДанныеИБ.Организация));
	
	ПБДС_СБДС_ПолучениеСчетБанк(ПолученныеДанные);
	
	Если ПолученныеДанные.ПеречислениеЗаработнойПлаты.Количество() = 0 Тогда
		СтрокаТЧ = ПолученныеДанные.ПеречислениеЗаработнойПлаты.Добавить();
	Иначе
		СтрокаТЧ = ПолученныеДанные.ПеречислениеЗаработнойПлаты[0];
	КонецЕсли;
	СтрокаТЧ.СуммаКВыплате = ПолученныеДанные.СуммаДокумента;
		
	Если ДанныеИБ = Неопределено Тогда
		
		ОрганизацияЯвляетсяПлательщикомКПН =  ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(ПолученныеДанные.Организация, ПолученныеДанные.Дата);
		
		Если Не ОрганизацияЯвляетсяПлательщикомКПН Тогда
			ПолученныеДанные.УчитыватьКПН = Ложь;
		Иначе
			ПолученныеДанные.УчитыватьКПН = Истина;
		КонецЕсли;	
	
		Если НЕ ПолученныеДанные.УчитыватьКПН Тогда
			ПолученныеДанные.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НеОтражаетсяВНУ;
		Иначе
			ПолученныеДанные.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ;
		КонецЕсли;
	
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_СБДСПлатежиВБюджет_Получение
Процедура ДобавитьПКО_Документ_СБДСПлатежиВБюджет_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_СБДСПлатежиВБюджет_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПлатежноеПоручениеИсходящее;
	ПравилоКонвертации.ОбъектФормата = "Документ.СБДСПлатежиВБюджет";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_СБДСПлатежиВБюджет_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_СБДСПлатежиВБюджет_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_СБДС";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВыписки";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НазначениеПлатежа";
	НоваяСтрока.СвойствоФормата = "НазначениеПлатежа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетКонтрагента";
	НоваяСтрока.СвойствоФормата = "БанковскийСчет";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетОрганизации";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтатьяДвиженияДенежныхСредств";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетУчетаРасчетовСКонтрагентомБУ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтатьяДвиженияДенежныхСредств";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаПлатежа";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетУчетаРасчетовСКонтрагентомБУ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_СБДСПлатежиВБюджет_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПБДС_СБДС_ПолучениеДатаПроведен(ПолученныеДанные, ДанныеXDTO);
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеНалога;
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);	
	
	ДокументыДвиженияДС_ПолучениеСтатьиДДС(ПолученныеДанные, ДанныеXDTO);
	
	Если ДанныеXDTO.Свойство("РасшифровкаПлатежа") И ЗначениеЗаполнено(ДанныеXDTO.РасшифровкаПлатежа) 
		И ДанныеXDTO.РасшифровкаПлатежа.Количество() > 0 Тогда
		МассивСтрокРасшифровка = Новый Массив;
	
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Сумма","СуммаПлатежа");
		ПравилаЗаполнения.Вставить("СтатьяДДС","СтатьяДвиженияДенежныхСредств");
		
		Для Каждого Строка Из ДанныеXDTO.РасшифровкаПлатежа Цикл
			
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			СтруктураДанныхСтроки.Вставить("СчетУчетаРасчетовСКонтрагентомБУ", ПЛаныСчетов.Типовой.ПрочиеНалоги);
			МассивСтрокРасшифровка.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
		ПолученныеДанные.ДополнительныеСвойства.Вставить("РасшифровкаПлатежа", МассивСтрокРасшифровка);
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_СБДСПлатежиВБюджет_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УстановкаУчетнойПолитикиОрганизации(?(ДанныеИБ = Неопределено, ПолученныеДанные.Организация, ДанныеИБ.Организация));
	
	ПБДС_СБДС_ПолучениеСчетБанк(ПолученныеДанные);
	
	Если ДанныеИБ = Неопределено Тогда
	
		ОрганизацияЯвляетсяПлательщикомКПН =  ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(ПолученныеДанные.Организация, ПолученныеДанные.Дата);
		
		Если Не ОрганизацияЯвляетсяПлательщикомКПН Тогда
			ПолученныеДанные.УчитыватьКПН = Ложь;
		Иначе
			ПолученныеДанные.УчитыватьКПН = Истина;
		КонецЕсли;	
	
		Если НЕ ПолученныеДанные.УчитыватьКПН Тогда
			ПолученныеДанные.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НеОтражаетсяВНУ;
		Иначе
			ПолученныеДанные.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ;
		КонецЕсли;
		
	ИначеЕсли НЕ ЗначениеЗаполнено(ДанныеИБ.СчетУчетаРасчетовСКонтрагентомБУ) Тогда
		ДанныеИБ.СчетУчетаРасчетовСКонтрагентомБУ = ПЛаныСчетов.Типовой.ПрочиеНалоги;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_СБДСПрочееСписание_Получение
Процедура ДобавитьПКО_Документ_СБДСПрочееСписание_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_СБДСПрочееСписание_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПлатежноеПоручениеИсходящее;
	ПравилоКонвертации.ОбъектФормата = "Документ.СБДСПрочееСписание";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_СБДСПрочееСписание_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_СБДСПрочееСписание_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_СБДС";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.СвойствоФормата = "ВидОперации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "ВидыОперацийСБДСПрочее_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВыписки";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НазначениеПлатежа";
	НоваяСтрока.СвойствоФормата = "НазначениеПлатежа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетКонтрагента";
	НоваяСтрока.СвойствоФормата = "БанковскийСчет";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетОрганизации";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтатьяДвиженияДенежныхСредств";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетБанк";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетУчетаРасчетовСКонтрагентомБУ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_СБДСПрочееСписание_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПБДС_СБДС_ПолучениеДатаПроведен(ПолученныеДанные, ДанныеXDTO);
	Если НЕ ЗначениеЗаполнено(ПолученныеДанные.ВидОперации) Тогда
		ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПрочееСписаниеБезналичныхДенежныхСредств;
	КонецЕсли;
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);	
	
	ДокументыДвиженияДС_ПолучениеСтатьиДДС(ПолученныеДанные, ДанныеXDTO);
	
	ЗаполнитьСчетУчетаРасчетовВПрочейОперацииДДС(ПолученныеДанные, ДанныеXDTO);
КонецПроцедуры

Процедура ПКО_Документ_СБДСПрочееСписание_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УстановкаУчетнойПолитикиОрганизации(?(ДанныеИБ = Неопределено, ПолученныеДанные.Организация, ДанныеИБ.Организация));
	
	ПБДС_СБДС_ПолучениеСчетБанк(ПолученныеДанные);
	
	Если ДанныеИБ = Неопределено Тогда
	
		ОрганизацияЯвляетсяПлательщикомКПН =  ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(ПолученныеДанные.Организация, ПолученныеДанные.Дата);
		
		Если Не ОрганизацияЯвляетсяПлательщикомКПН Тогда
			ПолученныеДанные.УчитыватьКПН = Ложь;
		Иначе
			ПолученныеДанные.УчитыватьКПН = Истина;
		КонецЕсли;	
	
		Если НЕ ПолученныеДанные.УчитыватьКПН Тогда
			ПолученныеДанные.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НеОтражаетсяВНУ;
		Иначе
			ПолученныеДанные.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДанныеИБ <> Неопределено Тогда
		Если ЗначениеЗаполнено(ДанныеИБ.СчетУчетаРасчетовСКонтрагентомБУ) Тогда
			ПолученныеДанные.СчетУчетаРасчетовСКонтрагентомБУ = ДанныеИБ.СчетУчетаРасчетовСКонтрагентомБУ;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_СБДСПрочиеРасходы_Получение
Процедура ДобавитьПКО_Документ_СБДСПрочиеРасходы_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_СБДСПрочиеРасходы_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПлатежноеПоручениеИсходящее;
	ПравилоКонвертации.ОбъектФормата = "Документ.СБДСПрочиеРасходы";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_СБДСПрочиеРасходы_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_СБДСПрочиеРасходы_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_СБДС";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВыписки";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НазначениеПлатежа";
	НоваяСтрока.СвойствоФормата = "НазначениеПлатежа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетКонтрагента";
	НоваяСтрока.СвойствоФормата = "БанковскийСчет";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетОрганизации";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтатьяДвиженияДенежныхСредств";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетБанк";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетУчетаРасчетовСКонтрагентомБУ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоговорКонтрагента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КратностьВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КурсВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтатьяДвиженияДенежныхСредств";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаПлатежа";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_СБДСПрочиеРасходы_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПрочееСписаниеБезналичныхДенежныхСредств;
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);	
	
	ПБДС_СБДС_ПолучениеДатаПроведен(ПолученныеДанные, ДанныеXDTO);
	
	ДокументыДвиженияДС_ПолучениеСтатьиДДС(ПолученныеДанные, ДанныеXDTO);
	ДокументыДвиженияДС_ПолучениеСтатьиРасходов(ПолученныеДанные, ДанныеXDTO);
	
	ЗаполнитьСчетУчетаРасчетовВПрочейОперацииДДС(ПолученныеДанные, ДанныеXDTO);
	
	Если ДанныеXDTO.Свойство("РасшифровкаПлатежа") И ЗначениеЗаполнено(ДанныеXDTO.РасшифровкаПлатежа) 
		И ДанныеXDTO.РасшифровкаПлатежа.Количество() > 0 Тогда
		МассивСтрокРасшифровка = Новый Массив;
	
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Сумма","СуммаПлатежа");
		ПравилаЗаполнения.Вставить("Договор","ДоговорКонтрагента");
		ПравилаЗаполнения.Вставить("СтатьяДДС","СтатьяДвиженияДенежныхСредств");
		ПравилаЗаполнения.Вставить("СуммаВзаиморасчетов", "СуммаВзаиморасчетов");
		ПравилаЗаполнения.Вставить("КурсВзаиморасчетов", "КурсВзаиморасчетов");
		ПравилаЗаполнения.Вставить("КратностьВзаиморасчетов", "КратностьВзаиморасчетов");
		ПравилаЗаполнения.Вставить("СтавкаНДС", "СтавкаНДС");
		ПравилаЗаполнения.Вставить("СуммаНДС", "СуммаНДС");
		
		Для Каждого Строка Из ДанныеXDTO.РасшифровкаПлатежа Цикл
			
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			Если ЗначениеЗаполнено(ДанныеXDTO.РасшифровкаПлатежа.Колонки.Найти("ДоговорКонтрагента"))
				 И ЗначениеЗаполнено(Строка.ДоговорКонтрагента) Тогда
				Если ТипЗнч(Строка.ДоговорКонтрагента) = Тип("Структура") И 
					Строка.Договор.Свойство("Ссылка") = Ложь Тогда
					ИмяПКО = "Справочник_ДоговорыКонтрагентов_ИзСтруктуры";
					СтруктураДанныхСтроки.Вставить("ДоговорКонтрагента", Новый Структура("Значение, ИмяПКО", Строка.ДоговорКонтрагента, ИмяПКО));
				КонецЕсли;
			КонецЕсли;
			
			ОбработатьСтавкуНДСПриПолучении(Строка, СтруктураДанныхСтроки, КомпонентыОбмена.ПараметрыКонвертации);
			
			МассивСтрокРасшифровка.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
		ПолученныеДанные.ДополнительныеСвойства.Вставить("РасшифровкаПлатежа", МассивСтрокРасшифровка);
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_СБДСПрочиеРасходы_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УстановкаУчетнойПолитикиОрганизации(?(ДанныеИБ = Неопределено, ПолученныеДанные.Организация, ДанныеИБ.Организация));
	
	ПБДС_СБДС_ПолучениеСчетБанк(ПолученныеДанные);
	
	Если ДанныеИБ = Неопределено Тогда
	
		ОрганизацияЯвляетсяПлательщикомКПН =  ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(ПолученныеДанные.Организация, ПолученныеДанные.Дата);
		
		Если Не ОрганизацияЯвляетсяПлательщикомКПН Тогда
			ПолученныеДанные.УчитыватьКПН = Ложь;
		Иначе
			ПолученныеДанные.УчитыватьКПН = Истина;
		КонецЕсли;	
	
		Если НЕ ПолученныеДанные.УчитыватьКПН Тогда
			ПолученныеДанные.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НеОтражаетсяВНУ;
		Иначе
			ПолученныеДанные.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДанныеИБ <> Неопределено Тогда
		Если ЗначениеЗаполнено(ДанныеИБ.СчетУчетаРасчетовСКонтрагентомБУ) Тогда
			ПолученныеДанные.СчетУчетаРасчетовСКонтрагентомБУ = ДанныеИБ.СчетУчетаРасчетовСКонтрагентомБУ;
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого Строка ИЗ ПолученныеДанные.РасшифровкаПлатежа Цикл
		Строка.СчетУчетаРасчетовСКонтрагентомБУ = ПолученныеДанные.СчетУчетаРасчетовСКонтрагентомБУ;
	КонецЦикла;
КонецПроцедуры
#КонецОбласти
#Область Документ_СБДСРасчетыСКонтрагентами_Получение
Процедура ДобавитьПКО_Документ_СБДСРасчетыСКонтрагентами_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_СБДСРасчетыСКонтрагентами_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПлатежноеПоручениеИсходящее;
	ПравилоКонвертации.ОбъектФормата = "Документ.СБДСРасчетыСКонтрагентами";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_СБДСРасчетыСКонтрагентами_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_СБДСРасчетыСКонтрагентами_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_СБДС";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.СвойствоФормата = "ВидРасчетов";
	НоваяСтрока.ПравилоКонвертацииСвойства = "ВидыОперацийСБДСРасчетыСКонтрагентами";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВыписки";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НазначениеПлатежа";
	НоваяСтрока.СвойствоФормата = "НазначениеПлатежа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетКонтрагента";
	НоваяСтрока.СвойствоФормата = "БанковскийСчет";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетОрганизации";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетБанк";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоговорКонтрагента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КратностьВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КурсВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтатьяДвиженияДенежныхСредств";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаПлатежа";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_СБДСРасчетыСКонтрагентами_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПБДС_СБДС_ПолучениеДатаПроведен(ПолученныеДанные, ДанныеXDTO);
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);	
	
	Если ДанныеXDTO.Свойство("РасшифровкаПлатежа") И ЗначениеЗаполнено(ДанныеXDTO.РасшифровкаПлатежа) 
		И ДанныеXDTO.РасшифровкаПлатежа.Количество() > 0 Тогда
		МассивСтрокРасшифровка = Новый Массив;
	
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Сумма","СуммаПлатежа");
		ПравилаЗаполнения.Вставить("Договор","ДоговорКонтрагента");
		ПравилаЗаполнения.Вставить("СтатьяДДС","СтатьяДвиженияДенежныхСредств");
		ПравилаЗаполнения.Вставить("СуммаВзаиморасчетов", "СуммаВзаиморасчетов");
		ПравилаЗаполнения.Вставить("Сумма","СуммаПлатежа");
		ПравилаЗаполнения.Вставить("КурсВзаиморасчетов", "КурсВзаиморасчетов");
		ПравилаЗаполнения.Вставить("КратностьВзаиморасчетов", "КратностьВзаиморасчетов");
		ПравилаЗаполнения.Вставить("СтавкаНДС", "СтавкаНДС");
		ПравилаЗаполнения.Вставить("СуммаНДС", "СуммаНДС");
		
		Для Каждого Строка Из ДанныеXDTO.РасшифровкаПлатежа Цикл
			
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			Если ЗначениеЗаполнено(Строка.Договор) Тогда
				Если ТипЗнч(Строка.Договор) = Тип("Структура") И 
					Строка.Договор.Свойство("Ссылка") = Ложь Тогда
					ИмяПКО = "Справочник_ДоговорыКонтрагентов_ИзСтруктуры";
					СтруктураДанныхСтроки.Вставить("ДоговорКонтрагента", Новый Структура("Значение, ИмяПКО", Строка.Договор, ИмяПКО));
				КонецЕсли;
			КонецЕсли;
			
			ОбработатьСтавкуНДСПриПолучении(Строка, СтруктураДанныхСтроки, КомпонентыОбмена.ПараметрыКонвертации);
			
			МассивСтрокРасшифровка.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
		ПолученныеДанные.ДополнительныеСвойства.Вставить("РасшифровкаПлатежа", МассивСтрокРасшифровка);
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_СБДСРасчетыСКонтрагентами_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УстановкаУчетнойПолитикиОрганизации(?(ДанныеИБ = Неопределено, ПолученныеДанные.Организация, ДанныеИБ.Организация));
	
	ПБДС_СБДС_ПолучениеСчетБанк(ПолученныеДанные);
	
	Если ДанныеИБ = Неопределено Тогда
	
		ОрганизацияЯвляетсяПлательщикомКПН =  ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(ПолученныеДанные.Организация, ПолученныеДанные.Дата);
		
		Если Не ОрганизацияЯвляетсяПлательщикомКПН Тогда
			ПолученныеДанные.УчитыватьКПН = Ложь;
		Иначе
			ПолученныеДанные.УчитыватьКПН = Истина;
		КонецЕсли;	
	
		Если НЕ ПолученныеДанные.УчитыватьКПН Тогда
			ПолученныеДанные.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НеОтражаетсяВНУ;
		Иначе
			ПолученныеДанные.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ;
		КонецЕсли;
	
		Возврат;
	КонецЕсли;
			
	// Заменяем свойства, которые получили из XDTO
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
	
	// Восстанавливаем "затертые" данные
	//РасшифровкаПлатежа
	МассивКлючевыхПолей = Новый Массив;
	МассивКлючевыхПолей.Добавить("ДоговорКонтрагента");
	МассивКлючевыхПолей.Добавить("СуммаПлатежа");
	МассивКлючевыхПолей.Добавить("СуммаВзаиморасчетов");
	МассивКлючевыхПолей.Добавить("КурсВзаиморасчетов");
	МассивКлючевыхПолей.Добавить("КратностьВзаиморасчетов");
	МассивКлючевыхПолей.Добавить("СтатьяДвиженияДенежныхСредств");
	
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.РасшифровкаПлатежа,
		ДанныеИБ.РасшифровкаПлатежа,
		МассивКлючевыхПолей,
		"Сделка, СчетУчетаРасчетовСКонтрагентомБУ, СчетУчетаРасчетовПоАвансам, СтавкаНДС");
	ДанныеИБ.РасшифровкаПлатежа.Загрузить(ПолученныеДанные.РасшифровкаПлатежа.Выгрузить());
	
	
	ПолученныеДанные = Неопределено;
КонецПроцедуры
#КонецОбласти
#Область Документ_СБДСРасчетыССотрудниками_Получение
Процедура ДобавитьПКО_Документ_СБДСРасчетыССотрудниками_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_СБДСРасчетыССотрудниками_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПлатежноеПоручениеИсходящее;
	ПравилоКонвертации.ОбъектФормата = "Документ.СБДСРасчетыССотрудниками";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_СБДСРасчетыССотрудниками_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_СБДСРасчетыССотрудниками_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_СБДС";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.СвойствоФормата = "ВидРасчетов";
	НоваяСтрока.ПравилоКонвертацииСвойства = "ВидыОперацийСБДСРасчетыССотрудниками";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВыписки";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НазначениеПлатежа";
	НоваяСтрока.СвойствоФормата = "НазначениеПлатежа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетКонтрагента";
	НоваяСтрока.СвойствоФормата = "БанковскийСчет";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетОрганизации";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтатьяДвиженияДенежныхСредств";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетБанк";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетУчетаРасчетовСКонтрагентомБУ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ПеречислениеВПодотчет", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ПеречислениеВПодотчет;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтатьяДвиженияДенежныхСредств";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаПлатежа";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетУчета";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ФизЛицо";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ФизическиеЛица_Получение";

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_СБДСРасчетыССотрудниками_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПБДС_СБДС_ПолучениеДатаПроведен(ПолученныеДанные, ДанныеXDTO);
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);	
	
	ДокументыДвиженияДС_ПолучениеСтатьиДДС(ПолученныеДанные, ДанныеXDTO);
	
	ПолученныеДанные.Контрагент = ПолученныеДанные.СчетКонтрагента.Владелец;
	
	Если ДанныеXDTO.Свойство("РасшифровкаПлатежа") И ЗначениеЗаполнено(ДанныеXDTO.РасшифровкаПлатежа) 
		И ДанныеXDTO.РасшифровкаПлатежа.Количество() > 0 Тогда
		МассивСтрокРасшифровка = Новый Массив;
	
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Сумма", "СуммаПлатежа");
		ПравилаЗаполнения.Вставить("СтатьяДДС", "СтатьяДвиженияДенежныхСредств");
		ПравилаЗаполнения.Вставить("СчетУчетаРасчетов", "СчетУчета");
			
		Для Каждого Строка Из ДанныеXDTO.РасшифровкаПлатежа Цикл
			
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			
			ИмяПКО = "Справочник_ФизическиеЛица_Получение";			
			СтруктураДанныхСтроки.Вставить("ФизЛицо", Новый Структура("Значение, ИмяПКО", ДанныеXDTO.Сотрудник, ИмяПКО));
	
			ОбработатьСтавкуНДСПриПолучении(Строка, СтруктураДанныхСтроки, КомпонентыОбмена.ПараметрыКонвертации);
			
			МассивСтрокРасшифровка.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ПеречислениеВПодотчет", МассивСтрокРасшифровка);
	КонецЕсли;
	
	Если ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПрочееСписаниеБезналичныхДенежныхСредств Тогда
		Если Не ЗначениеЗаполнено(ПолученныеДанные.СчетУчетаРасчетовСКонтрагентомБУ) И ДанныеXDTO.РасшифровкаПлатежа.Количество() > 0 Тогда 
			ПолученныеДанные.СчетУчетаРасчетовСКонтрагентомБУ = ПланыСчетов.Типовой.НайтиПоКоду(ДанныеXDTO.РасшифровкаПлатежа[0].СчетУчетаРасчетов);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_СБДСРасчетыССотрудниками_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УстановкаУчетнойПолитикиОрганизации(?(ДанныеИБ = Неопределено, ПолученныеДанные.Организация, ДанныеИБ.Организация));
	
	ПБДС_СБДС_ПолучениеСчетБанк(ПолученныеДанные);
	
	Для Каждого СтрокаТЧ Из ПолученныеДанные.ПеречислениеВПодотчет Цикл
		Если Не ЗначениеЗаполнено(СтрокаТЧ.СчетУчета) Тогда
			СтрокаТЧ.СчетУчета = ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПодотчетныхЛиц;
		КонецЕсли;
	КонецЦикла;
	
	
	Если ДанныеИБ = Неопределено Тогда
	
		ОрганизацияЯвляетсяПлательщикомКПН =  ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(ПолученныеДанные.Организация, ПолученныеДанные.Дата);
		
		Если Не ОрганизацияЯвляетсяПлательщикомКПН Тогда
			ПолученныеДанные.УчитыватьКПН = Ложь;
		Иначе
			ПолученныеДанные.УчитыватьКПН = Истина;
		КонецЕсли;	
	
		Если НЕ ПолученныеДанные.УчитыватьКПН Тогда
			ПолученныеДанные.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НеОтражаетсяВНУ;
		Иначе
			ПолученныеДанные.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ;
		КонецЕсли;
	
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_СборкаТоваров_Получение
Процедура ДобавитьПКО_Документ_СборкаТоваров_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_СборкаТоваров_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.КомплектацияНоменклатуры;
	ПравилоКонвертации.ОбъектФормата = "Документ.СборкаТоваров";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_СборкаТоваров_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_СборкаТоваров_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_СборкаТоваров";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.СвойствоФормата = "ВидОперации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_ВидыОперацийКомплектация";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЕдиницаИзмерения";
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Количество";
	НоваяСтрока.СвойствоФормата = "Количество";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номенклатура";
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Склад";
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтруктурноеПодразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Коэффициент";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетУчетаБУ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Комплектующие", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Комплектующие;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоляСтоимости";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Коэффициент";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетУчетаБУ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_СборкаТоваров_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Проведен = Истина;
	ПолученныеДанные.Коэффициент = 1;
	
	МассивСтрокТовары = Новый Массив;
	МассивСтрокВозвратнаяТара = Новый Массив;
	Если ДанныеXDTO.Свойство("Товары")
		И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
	
		//Товары
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполнения.Вставить("Количество", "Количество");
		ПравилаЗаполнения.Вставить("СтранаПроисхождения", "СтранаПроисхождения");
		ПравилаЗаполнения.Вставить("ДоляСтоимости", "ДоляСтоимости");
		Для Каждого Строка Из ДанныеXDTO.Товары Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			СтруктураДанныхСтроки.Вставить("Коэффициент",1);
			Если ЗначениеЗаполнено(Строка.НомерГТД) Тогда
				СтруктураДанныхСтроки.Вставить("НомерГТД", Новый Структура("Код", Строка.НомерГТД));
			КонецЕсли;
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
		Если МассивСтрокТовары.Количество() > 0 Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("Комплектующие", МассивСтрокТовары);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_СборкаТоваров_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УстановкаУчетнойПолитикиОрганизации(?(ДанныеИБ = Неопределено, ПолученныеДанные.Организация, ДанныеИБ.Организация));
	
	ПолученныеДанные.Склад = СкладДляЗагрузки(ПолученныеДанные.Склад, КомпонентыОбмена.ПараметрыКонвертации);
	
	Если ДанныеИБ = Неопределено Тогда
	
		ОрганизацияЯвляетсяПлательщикомКПН =  ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(ПолученныеДанные.Организация, ПолученныеДанные.Дата);
		
		Если Не ОрганизацияЯвляетсяПлательщикомКПН Тогда
			ПолученныеДанные.УчитыватьКПН = Ложь;
		Иначе
			ПолученныеДанные.УчитыватьКПН = Истина;
		КонецЕсли;	
	
		Если НЕ ПолученныеДанные.УчитыватьКПН Тогда
			ПолученныеДанные.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НеОтражаетсяВНУ;
		Иначе
			ПолученныеДанные.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ;
		КонецЕсли;
	
		Возврат;
		
	КонецЕсли;
	
	// Заменяем свойства, которые получили из XDTO
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
	
	МассивКлючевыхПолей = Новый Массив;
	МассивКлючевыхПолей.Добавить("Номенклатура");
	МассивКлючевыхПолей.Добавить("Количество");
	МассивКлючевыхПолей.Добавить("ДоляСтоимости");
	
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.Комплектующие,
		ДанныеИБ.Комплектующие,
		МассивКлючевыхПолей,
		"СчетУчетаБУ");
	ДанныеИБ.Комплектующие.Загрузить(ПолученныеДанные.Комплектующие.Выгрузить());
	
	ПолученныеДанные = Неопределено;
КонецПроцедуры
#КонецОбласти
#Область Документ_СписаниеПриСборке_Получение
Процедура ДобавитьПКО_Документ_СписаниеПриСборке_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_СписаниеПриСборке_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.СписаниеТоваров;
	ПравилоКонвертации.ОбъектФормата = "Документ.СборкаТоваров";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_СписаниеПриСборке_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_СписаниеПриСборке_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_СписаниеТоваров";
	ПравилоКонвертации.ВариантИдентификации = "ПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Склад";
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Основание";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Коэффициент";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетУчетаБУ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_СписаниеПриСборке_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Номер = Лев(ДанныеXDTO.КлючевыеСвойства.Номер, 5) + "К" + Сред(ДанныеXDTO.КлючевыеСвойства.Номер, 7);
	ПолученныеДанные.Проведен = Истина;
	
	//Товары
	МассивСтрокТовары = Новый Массив;
	Если ДанныеXDTO.Свойство("Товары")
		И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
	
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполнения.Вставить("Количество", "Количество");
		ПравилаЗаполнения.Вставить("ЕдиницаИзмерения", "ЕдиницаИзмерения");
		Для Каждого Строка Из ДанныеXDTO.Товары Цикл
			Если Строка.ТипЗапасов.Значение <> "КомиссионныеТовары" Тогда
				Продолжить;
			КонецЕсли;
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			СтруктураДанныхСтроки.Вставить("СчетУчета",ПланыСчетов.Типовой.Товары);
			СтруктураДанныхСтроки.Вставить("Коэффициент",1); 
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	
	Если МассивСтрокТовары.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
	КонецЕсли;
	
	ПолученныеДанные.Основание = СтрШаблон(НСтр("ru = 'Сборка товаров № %1 от %2'"), СокрЛП(ДанныеXDTO.КлючевыеСвойства.Номер), ДанныеXDTO.КлючевыеСвойства.Дата);
КонецПроцедуры

Процедура ПКО_Документ_СписаниеПриСборке_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УстановкаУчетнойПолитикиОрганизации(?(ДанныеИБ = Неопределено, ПолученныеДанные.Организация, ДанныеИБ.Организация));
	
	ПолученныеДанные.Склад = СкладДляЗагрузки(ПолученныеДанные.Склад, КомпонентыОбмена.ПараметрыКонвертации);
	
	Если ДанныеИБ = Неопределено Тогда
	
		ОрганизацияЯвляетсяПлательщикомКПН =  ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(ПолученныеДанные.Организация, ПолученныеДанные.Дата);
		
		Если Не ОрганизацияЯвляетсяПлательщикомКПН Тогда
			ПолученныеДанные.УчитыватьКПН = Ложь;
		Иначе
			ПолученныеДанные.УчитыватьКПН = Истина;
		КонецЕсли;	
	
		Если НЕ ПолученныеДанные.УчитыватьКПН Тогда
			ПолученныеДанные.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НеОтражаетсяВНУ;
		Иначе
			ПолученныеДанные.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ;
		КонецЕсли;
	
		ПолученныеДанные.УчитыватьНДС = ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНДС(ПолученныеДанные.Организация, ПолученныеДанные.Дата);
	
		Возврат;
		
	КонецЕсли;
	
			
	// Заменяем свойства, которые получили из XDTO
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
					
	// Восстанавливаем "затертые" данные
	//Товары
	МассивКлючевыхПолей = Новый Массив;
	МассивКлючевыхПолей.Добавить("Номенклатура");
	МассивКлючевыхПолей.Добавить("Количество");
	
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.Товары,
		ДанныеИБ.Товары,
		МассивКлючевыхПолей,
		"СчетУчетаБУ,СтавкаНДС");
	ДанныеИБ.Товары.Загрузить(ПолученныеДанные.Товары.Выгрузить());
	ПолученныеДанные = Неопределено;
КонецПроцедуры
#КонецОбласти
#Область Документ_СписаниеТоваров
Процедура ДобавитьПКО_Документ_СписаниеТоваров(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_СписаниеТоваров";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.СписаниеТоваров;
	ПравилоКонвертации.ОбъектФормата = "Документ.СписаниеЗапасов";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_СписаниеТоваров_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_СписаниеТоваров_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_СписаниеТоваров";
	ПравилоКонвертации.ВариантИдентификации = "ПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Склад";
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Основание";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Коэффициент";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетУчетаБУ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_СписаниеТоваров_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	// Заполнение данных шапки
	ПолученныеДанные.Проведен = Истина; 
	
	МассивСтрокТовары = Новый Массив;
	
	Если ДанныеXDTO.Свойство("Товары")
		И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
	
		// Товары
		Т_КС = Новый Соответствие;
		Т_КС.Вставить("Номенклатура", "Номенклатура");
		Т_КС.Вставить("Количество", "Количество");
		Т_КС.Вставить("ЕдиницаИзмерения", "ЕдиницаИзмерения");     		
		Т_КС.Вставить("Цена", "Цена");
		
		Для Каждого СтрокаXDTO Из ДанныеXDTO.Товары Цикл
		
			ТипЗапасов = "";
			Если ЗначениеЗаполнено(СтрокаXDTO.ТипЗапасов) Тогда
				ТипЗапасов = СтрокаXDTO.ТипЗапасов.Значение;
			КонецЕсли;
			СтруктураДанныхСтроки = Новый Структура;
			// Заполнение ТЧ Товары
			
			ЗаполнитьСтруктуруДанныхСтроки(Т_КС, СтрокаXDTO, СтруктураДанныхСтроки);
			СтруктураДанныхСтроки.Вставить("Коэффициент", 1); 
			// Счет учета заполняется сразу, если это комиссионный товар,
			// и автоматически после загрузки всех данных - в остальных случаях
			Если  ТипЗапасов = "КомиссионныеТовары" Тогда
				СтруктураДанныхСтроки.Вставить("СчетУчетаБУ", ПланыСчетов.Типовой.Вспомогательный); 
			КонецЕсли;
			
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
				
		КонецЦикла;
	КонецЕсли;
	Если МассивСтрокТовары.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_СписаниеТоваров_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УстановкаУчетнойПолитикиОрганизации(?(ДанныеИБ = Неопределено, ПолученныеДанные.Организация, ДанныеИБ.Организация));
	
	Если ДанныеИБ <> Неопределено Тогда
		// Переносим свойства, не указанные в ПКС
		ЗаполнитьЗначенияСвойств(ДанныеИБ, ПолученныеДанные, "Основание");
	КонецЕсли;
	
	СписаниеТоваров_ПередЗаписью(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации, КонвертацияСвойств);
КонецПроцедуры
#КонецОбласти
#Область Документ_СписаниеТоваровПоИнвентаризации
Процедура ДобавитьПКО_Документ_СписаниеТоваровПоИнвентаризации(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_СписаниеТоваровПоИнвентаризации";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.СписаниеТоваров;
	ПравилоКонвертации.ОбъектФормата = "Документ.СписаниеНедостач";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_СписаниеТоваровПоИнвентаризации_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_СписаниеТоваровПоИнвентаризации_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_СписаниеТоваров";
	ПравилоКонвертации.ВариантИдентификации = "ПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДокументОснование";
	НоваяСтрока.СвойствоФормата = "Инвентаризация";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Склад";
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Основание";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Коэффициент";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетУчетаБУ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_СписаниеТоваровПоИнвентаризации_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	// Заполнение данных шапки
	ПолученныеДанные.Проведен = Истина; 
	
	МассивСтрокТовары = Новый Массив;
	
	Если ДанныеXDTO.Свойство("Товары")
		И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
	
		// Товары
		Т_КС = Новый Соответствие;
		Т_КС.Вставить("Номенклатура", "Номенклатура");
		Т_КС.Вставить("Количество", "Количество");
		Т_КС.Вставить("ЕдиницаИзмерения", "ЕдиницаИзмерения");     		
		Т_КС.Вставить("Цена", "Цена");
		
		Для Каждого СтрокаXDTO Из ДанныеXDTO.Товары Цикл
		
			ТипЗапасов = "";
			Если ЗначениеЗаполнено(СтрокаXDTO.ТипЗапасов) Тогда
				ТипЗапасов = СтрокаXDTO.ТипЗапасов.Значение;
			КонецЕсли;
			СтруктураДанныхСтроки = Новый Структура;
			// Заполнение ТЧ Товары
			
			ЗаполнитьСтруктуруДанныхСтроки(Т_КС, СтрокаXDTO, СтруктураДанныхСтроки);
			СтруктураДанныхСтроки.Вставить("Коэффициент", 1); 
			// Счет учета заполняется сразу, если это комиссионный товар,
			// и автоматически после загрузки всех данных - в остальных случаях
			Если  ТипЗапасов = "КомиссионныеТовары" Тогда
				СтруктураДанныхСтроки.Вставить("СчетУчетаБУ", ПланыСчетов.Типовой.Вспомогательный); 
			КонецЕсли;
			
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
				
		КонецЦикла;
	КонецЕсли;
	Если МассивСтрокТовары.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_СписаниеТоваровПоИнвентаризации_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УстановкаУчетнойПолитикиОрганизации(?(ДанныеИБ = Неопределено, ПолученныеДанные.Организация, ДанныеИБ.Организация));
	
	Если ДанныеИБ <> Неопределено Тогда
		// Переносим свойства, не указанные в ПКС
		ЗаполнитьЗначенияСвойств(ДанныеИБ, ПолученныеДанные, "Основание");
	КонецЕсли;
	
	СписаниеТоваров_ПередЗаписью(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации, КонвертацияСвойств);
КонецПроцедуры
#КонецОбласти
#Область Документ_СчетФактураВыданный_Получение
Процедура ДобавитьПКО_Документ_СчетФактураВыданный_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_СчетФактураВыданный_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.СчетФактураВыданный;
	ПравилоКонвертации.ОбъектФормата = "Документ.СчетФактураВыданный";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_СчетФактураВыданный_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_СчетФактураВыданный_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_СчетФактураВыданный";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидСчетаФактуры";
	НоваяСтрока.СвойствоФормата = "ВидСчетаФактуры";
	НоваяСтрока.ПравилоКонвертацииСвойства = "ПеречислениеСсылка_ВидыСчетовФактур";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаСовершенияОборотаПоРеализации";
	НоваяСтрока.СвойствоФормата = "ДатаСовершенияОборотаПоРеализации";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ОсновнойСчетФактура";
	НоваяСтрока.СвойствоФормата = "ИсправляемыйСчетФактура";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Документ_СчетФактураВыданный_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Покупатель";
	НоваяСтрока.СвойствоФормата = "Покупатель";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Поставщик";
	НоваяСтрока.СвойствоФормата = "Поставщик";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СпособВыставления";
	НоваяСтрока.СвойствоФормата = "СпособВыставления";
	НоваяСтрока.ПравилоКонвертацииСвойства = "ПеречислениеСсылка_СпособыВыставленияСчетаФактуры";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоговорКонтрагента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДокументОснование";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КратностьВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КурсВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДокументыОснования", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДокументыОснования;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДокументОснование";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_СчетФактураВыданный_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ДанныеXDTO.Количество() = 1 Тогда
		// Конвертация ключевых свойств
		Возврат;
	КонецЕсли;
	
	Если ДанныеXDTO.Свойство("Исправление") И ДанныеXDTO.Исправление Тогда 
		ПолученныеДанные.ВидСчетаФактуры = Перечисления.ВидыСчетовФактур.Исправленный;
	КонецЕсли;
	
	ДобавитьДоговорВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	
	ПолученныеДанные.Проведен = Истина;	
	
	//Документы-основания
	МассивСтрокДокументыОснования = Новый Массив;
	ДанныеXDTO.Вставить("ДокументОснование", Неопределено);
	Если ДанныеXDTO.Свойство("ДокументыОснования") И ЗначениеЗаполнено(ДанныеXDTO.ДокументыОснования) Тогда
		ЭтоПерваяСтрока = Истина;
		Для Каждого Строка ИЗ ДанныеXDTO.ДокументыОснования Цикл
			ТипДокументаОснования = Строка.ДокументОснование.ТипЗначения;
			
			ИмяПКО = Неопределено;
			
			Если Найти(ТипДокументаОснования, "ВозвратТоваровПоставщику") > 0 Тогда
				ИмяПКО = "Документ_ВозвратТоваровПоставщику";
			ИначеЕсли Найти(ТипДокументаОснования, "РеализацияТоваровУслуг") > 0 Тогда
				ИмяПКО = "Документ_РеализацияТоваровУслуг";
			ИначеЕсли Найти(ТипДокументаОснования, "АктВыполненныхРабот") > 0 Тогда
				ИмяПКО = "Документ_АктВыполненныхРабот";
			ИначеЕсли Найти(ТипДокументаОснования, "ВозвратТоваровОтПокупателя") > 0 Тогда
				ИмяПКО = "Документ_ВозвратТоваровОтПокупателя";
			ИначеЕсли Найти(ТипДокументаОснования, "ПоступлениеТоваровУслуг") > 0 Тогда
				ИмяПКО = "ПТиУ_ПоступлениеТоваровУслуг";
			ИначеЕсли Найти(ТипДокументаОснования, "АвансовыйОтчет") > 0 Тогда
				ИмяПКО = "Документ_АвансовыйОтчет_Получение";
			ИначеЕсли Найти(ТипДокументаОснования, "РКОРасчетыСКонтрагентами") > 0 Тогда
				ИмяПКО = "Документ_РКОРасчетыСКонтрагентами_Получение";
			ИначеЕсли Найти(ТипДокументаОснования, "ПКОРасчетыСКонтрагентами") > 0 Тогда
				ИмяПКО = "Документ_ПКОРасчетыСКонтрагентами_Получение";
			ИначеЕсли Найти(ТипДокументаОснования, "СБДСРасчетыСКонтрагентами") > 0 Тогда
				ИмяПКО = "Документ_СБДСРасчетыСКонтрагентами_Получение";
			ИначеЕсли Найти(ТипДокументаОснования, "ПБДСРасчетыСКонтрагентами") > 0 Тогда
				ИмяПКО = "Документ_ПБДСРасчетыСКонтрагентами_Получение";
			ИначеЕсли Найти(ТипДокументаОснования, "КорректировкаДолга") > 0 Тогда
				ИмяПКО = "Документ_КорректировкаДолга_Получение";
			КонецЕсли;
	
			Если Не ИмяПКО = Неопределено Тогда
			
				ТекДокументОснование = Новый Структура("Значение, ИмяПКО", Строка.ДокументОснование, ИмяПКО);
				СтруктураДанныхСтроки = Новый Структура("ДокументОснование", ТекДокументОснование);
				МассивСтрокДокументыОснования.Добавить(СтруктураДанныхСтроки);
			
				Если ДанныеXDTO.ДокументыОснования.Количество() = 1 И ЭтоПерваяСтрока Тогда
					ПолученныеДанные.ДополнительныеСвойства.Вставить("ДокументОснование", ТекДокументОснование);
				КонецЕсли;
				ЭтоПерваяСтрока = Ложь;
			
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	Если МассивСтрокДокументыОснования.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ДокументыОснования", МассивСтрокДокументыОснования);
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_СчетФактураВыданный_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УстановкаУчетнойПолитикиОрганизации(?(ДанныеИБ = Неопределено, ПолученныеДанные.Организация, ДанныеИБ.Организация));
	
	Если ДанныеИБ = Неопределено Тогда
		ПолученныеДанные.УчитыватьНДС = ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНДС(ПолученныеДанные.Организация, ПолученныеДанные.Дата);
	КонецЕсли;
	
	СтруктураНовогоКурсаВалюты  = ОбщегоНазначенияБК.ПолучитьКурсВалюты(ПолученныеДанные.ВалютаДокумента, ПолученныеДанные.Дата);
	Курс                   = СтруктураНовогоКурсаВалюты.Курс;
	Кратность              = СтруктураНовогоКурсаВалюты.Кратность;
	
	ПолученныеДанные.КурсВзаиморасчетов 		= Курс;
	ПолученныеДанные.КратностьВзаиморасчетов 	= Кратность;
КонецПроцедуры
#КонецОбласти
#Область Документ_СчетФактураПолученный_Получение
Процедура ДобавитьПКО_Документ_СчетФактураПолученный_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_СчетФактураПолученный_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.СчетФактураПолученный;
	ПравилоКонвертации.ОбъектФормата = "Документ.СчетФактураПолученный";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_СчетФактураПолученный_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_СчетФактураПолученный_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_СчетФактураПолученный";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидСчетаФактуры";
	НоваяСтрока.СвойствоФормата = "ВидСчетаФактуры";
	НоваяСтрока.ПравилоКонвертацииСвойства = "ПеречислениеСсылка_ВидыСчетовФактур";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "ДатаПолучения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаСовершенияОборотаПоРеализации";
	НоваяСтрока.СвойствоФормата = "ДатаСовершенияОборотаПоРеализации";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ОсновнойСчетФактура";
	НоваяСтрока.СвойствоФормата = "ИсправляемыйСчетФактура";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Документ_СчетФактураПолученный_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Покупатель";
	НоваяСтрока.СвойствоФормата = "Покупатель";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Поставщик";
	НоваяСтрока.СвойствоФормата = "Поставщик";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СпособПолучения";
	НоваяСтрока.СвойствоФормата = "СпособВыставления";
	НоваяСтрока.ПравилоКонвертацииСвойства = "ПеречислениеСсылка_СпособыВыставленияСчетаФактуры";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоговорКонтрагента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДокументОснование";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КратностьВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КурсВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДокументыОснования", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДокументыОснования;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДокументОснование";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("ДатаВходящегоДокумента,НомерВходящегоДокумента,ДатаИсправления,НомерИсправления");
КонецПроцедуры

Процедура ПКО_Документ_СчетФактураПолученный_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ДанныеXDTO.Количество() = 1 Тогда
		// Конвертация ключевых свойств
		Возврат;
	КонецЕсли;
	
	ПолученныеДанные.Проведен = Истина;	
	
	ДобавитьДоговорВДопСвойства(ПолученныеДанные, ДанныеXDTO);	
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	
	//Документы-основания
	МассивСтрокДокументыОснования = Новый Массив;
	ДанныеXDTO.Вставить("ДокументОснование", Неопределено);
	Если ДанныеXDTO.Свойство("ДокументыОснования") И ЗначениеЗаполнено(ДанныеXDTO.ДокументыОснования) Тогда
		ЭтоПерваяСтрока = Истина;
		Для Каждого Строка ИЗ ДанныеXDTO.ДокументыОснования Цикл
			ТипДокументаОснования = Строка.ДокументОснование.ТипЗначения;
			
			ИмяПКО = Неопределено;
			
			Если Найти(ТипДокументаОснования, "ВозвратТоваровПоставщику") > 0 Тогда
				ИмяПКО = "Документ_ВозвратТоваровПоставщику";
			ИначеЕсли Найти(ТипДокументаОснования, "РеализацияТоваровУслуг") > 0 Тогда
				ИмяПКО = "Документ_РеализацияТоваровУслуг";
			ИначеЕсли Найти(ТипДокументаОснования, "АктВыполненныхРабот") > 0 Тогда
				ИмяПКО = "Документ_АктВыполненныхРабот";
			ИначеЕсли Найти(ТипДокументаОснования, "ВозвратТоваровОтПокупателя") > 0 Тогда
				ИмяПКО = "Документ_ВозвратТоваровОтПокупателя";
			ИначеЕсли Найти(ТипДокументаОснования, "ПоступлениеТоваровУслуг") > 0 Тогда
				ИмяПКО = "ПТиУ_ПоступлениеТоваровУслуг";
			ИначеЕсли Найти(ТипДокументаОснования, "АвансовыйОтчет") > 0 Тогда
				ИмяПКО = "Документ_АвансовыйОтчет_Получение";
			ИначеЕсли Найти(ТипДокументаОснования, "РКОРасчетыСКонтрагентами") > 0 Тогда
				ИмяПКО = "Документ_РКОРасчетыСКонтрагентами_Получение";
			ИначеЕсли Найти(ТипДокументаОснования, "ПКОРасчетыСКонтрагентами") > 0 Тогда
				ИмяПКО = "Документ_ПКОРасчетыСКонтрагентами_Получение";
			ИначеЕсли Найти(ТипДокументаОснования, "СБДСРасчетыСКонтрагентами") > 0 Тогда
				ИмяПКО = "Документ_СБДСРасчетыСКонтрагентами_Получение";
			ИначеЕсли Найти(ТипДокументаОснования, "ПБДСРасчетыСКонтрагентами") > 0 Тогда
				ИмяПКО = "Документ_ПБДСРасчетыСКонтрагентами_Получение";
			ИначеЕсли Найти(ТипДокументаОснования, "КорректировкаДолга") > 0 Тогда
				ИмяПКО = "Документ_КорректировкаДолга_Получение";
			КонецЕсли;
			
			Если Не ИмяПКО = Неопределено Тогда
	
				ТекДокументОснование = Новый Структура("Значение, ИмяПКО", Строка.ДокументОснование, ИмяПКО);
				СтруктураДанныхСтроки = Новый Структура("ДокументОснование", ТекДокументОснование);
				МассивСтрокДокументыОснования.Добавить(СтруктураДанныхСтроки);
				
				Если ДанныеXDTO.ДокументыОснования.Количество() = 1 И ЭтоПерваяСтрока Тогда
					ПолученныеДанные.ДополнительныеСвойства.Вставить("ДокументОснование", ТекДокументОснование);
				КонецЕсли;
				ЭтоПерваяСтрока = Ложь;
			
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	Если МассивСтрокДокументыОснования.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ДокументыОснования", МассивСтрокДокументыОснования);
	КонецЕсли;
	
	//АВансы
	МассивСтрокАвансы = Новый Массив;
	Если ДанныеXDTO.Свойство("Авансы") И ЗначениеЗаполнено(ДанныеXDTO.Авансы) Тогда
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполнения.Вставить("Содержание", "Содержание");
		ПравилаЗаполнения.Вставить("СтавкаНДС", "СтавкаНДС");
		ПравилаЗаполнения.Вставить("СуммаНДС", "СуммаНДС");
		ПравилаЗаполнения.Вставить("Сумма", "Сумма");
		Для Каждого Строка Из ДанныеXDTO.Авансы Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
	
			МассивСтрокАвансы.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	
	Если МассивСтрокАвансы.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Авансы", МассивСтрокАвансы);
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_СчетФактураПолученный_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УстановкаУчетнойПолитикиОрганизации(?(ДанныеИБ = Неопределено, ПолученныеДанные.Организация, ДанныеИБ.Организация));
	
	Если НЕ ЗначениеЗаполнено(ПолученныеДанные.ДоговорКонтрагента)
		И ЗначениеЗаполнено(ПолученныеДанные.ДокументОснование)
		И ОбщегоНазначения.ЕстьРеквизитОбъекта("ДоговорКонтрагента", ПолученныеДанные.ДокументОснование.Метаданные()) Тогда
		ПолученныеДанные.ДоговорКонтрагента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПолученныеДанные.ДокументОснование, "ДоговорКонтрагента");
	КонецЕсли;
	
	ПолученныеДанные.Дата = КонецДня(ПолученныеДанные.Дата);
	
	СтруктураНовогоКурсаВалюты  = ОбщегоНазначенияБК.ПолучитьКурсВалюты(ПолученныеДанные.ВалютаДокумента, ПолученныеДанные.Дата);
	Курс                   = СтруктураНовогоКурсаВалюты.Курс;
	Кратность              = СтруктураНовогоКурсаВалюты.Кратность;
	
	ПолученныеДанные.КурсВзаиморасчетов 		= Курс;
	ПолученныеДанные.КратностьВзаиморасчетов 	= Кратность;
	
	Если Не ДанныеИБ = Неопределено Тогда
		Если КонецДня(ДанныеИБ.Дата) = ПолученныеДанные.Дата Тогда
			ПолученныеДанные.Дата = ДанныеИБ.Дата;
		КонецЕсли;
	Иначе
		ПолученныеДанные.УчитыватьНДС = ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНДС(ПолученныеДанные.Организация, ПолученныеДанные.Дата);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПолученныеДанные.Покупатель) Тогда
		ПолученныеДанные.Покупатель = УчетНДСИАкциза.ПолучитьПлательщикаНДСВСчетеФактуре(ПолученныеДанные.Организация);
	КонецЕсли;	
	
	Если Не ЗначениеЗаполнено(ПолученныеДанные.Поставщик) Тогда
		ПолученныеДанные.Поставщик = УчетНДСИАкциза.ПолучитьПлательщикаНДСВСчетеФактуре(ПолученныеДанные.Контрагент);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ТаможеннаяДекларация_Получение
Процедура ДобавитьПКО_Документ_ТаможеннаяДекларация_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ТаможеннаяДекларация_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ГТДИмпорт;
	ПравилоКонвертации.ОбъектФормата = "Документ.ТаможеннаяДекларация";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_ТаможеннаяДекларация_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ТаможеннаяДекларация_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_ТаможеннаяДекларация";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КратностьВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "КратностьВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КратностьДокумента";
	НоваяСтрока.СвойствоФормата = "КратностьДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КурсВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "КурсВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КурсДокумента";
	НоваяСтрока.СвойствоФормата = "КурсДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерГТД";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_НомераГТДИзСтроки_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Разделы", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Разделы;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтавкаПошлины";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаПошлины";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ТаможеннаяСтоимость";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДокументПартии";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "ПТиУ_ПоступлениеТоваровУслуг";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерРаздела";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтранаПроисхождения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_КлассификаторСтранМира";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаПошлины";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ТаможеннаяСтоимость";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ФактурнаяСтоимость";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_ТаможеннаяДекларация_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Проведен = Истина;
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);	
	Если ДанныеXDTO.Свойство("Договор") И ЗначениеЗаполнено(ДанныеXDTO.Договор) Тогда
		Если ТипЗнч(ДанныеXDTO.Договор) = Тип("Структура") И 
			ДанныеXDTO.Договор.Свойство("Ссылка") = Ложь Тогда
			ИмяПКО = "Справочник_ДоговорыКонтрагентов_ИзСтруктуры";
		Иначе
			ИмяПКО = "Справочник_ДоговорыКонтрагентов";
		КонецЕсли;
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ДоговорКонтрагентаРегл", Новый Структура("Значение, ИмяПКО", ДанныеXDTO.Договор, ИмяПКО));
	КонецЕсли;
	Если ДанныеXDTO.Свойство("НомерДекларации") И ЗначениеЗаполнено(ДанныеXDTO.НомерДекларации) Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("НомерГТД", ДанныеXDTO.НомерДекларации);
	КонецЕсли;
	
	//Товары
	МассивСтрокТовары = Новый Массив;
	Если ДанныеXDTO.Свойство("Товары")
		И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
	
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Номенклатура", 		  "Номенклатура");
		ПравилаЗаполнения.Вставить("ДокументПоступления", "ДокументПартии");
		ПравилаЗаполнения.Вставить("Количество", 		  "Количество");
		ПравилаЗаполнения.Вставить("СуммаНДС", 			  "СуммаНДС");
		ПравилаЗаполнения.Вставить("СуммаПошлины", 		  "СуммаПошлины");
		ПравилаЗаполнения.Вставить("ТаможеннаяСтоимость", "ФактурнаяСтоимость");
		ПравилаЗаполнения.Вставить("НомерРаздела", 		  "НомерРаздела");
		ПравилаЗаполнения.Вставить("СтранаПроисхождения", "СтранаПроисхождения");
		Для Каждого Строка Из ДанныеXDTO.Товары Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			СтруктураДанныхСтроки.Вставить("ТаможеннаяСтоимость", СтруктураДанныхСтроки.ФактурнаяСтоимость);
			ОбработатьСтавкуНДСПриПолучении(Строка, СтруктураДанныхСтроки, КомпонентыОбмена.ПараметрыКонвертации);
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
		
		Если МассивСтрокТовары.Количество() > 0 Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
		КонецЕсли;
	КонецЕсли;
	
	//Разделы
	МассивСтрокРазделы = Новый Массив;
	Если ДанныеXDTO.Свойство("Разделы")
		И ЗначениеЗаполнено(ДанныеXDTO.Разделы) Тогда
	
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("СтавкаНДС", 		  "СтавкаНДС");
		ПравилаЗаполнения.Вставить("СтавкаПошлины", 	  "СтавкаПошлины");
		ПравилаЗаполнения.Вставить("СуммаНДС", 			  "СуммаНДС");
		ПравилаЗаполнения.Вставить("СуммаПошлины", 		  "СуммаПошлины");
		ПравилаЗаполнения.Вставить("ТаможеннаяСтоимость", "ТаможеннаяСтоимость");
		Для Каждого Строка Из ДанныеXDTO.Разделы Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			ОбработатьСтавкуНДСПриПолучении(Строка, СтруктураДанныхСтроки, КомпонентыОбмена.ПараметрыКонвертации);
			МассивСтрокРазделы.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
		
		Если МассивСтрокРазделы.Количество() > 0 Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("Разделы", МассивСтрокРазделы);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_ТаможеннаяДекларация_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УстановкаУчетнойПолитикиОрганизации(?(ДанныеИБ = Неопределено, ПолученныеДанные.Организация, ДанныеИБ.Организация));
	
	Если ДанныеИБ = Неопределено Тогда
	
		ОрганизацияЯвляетсяПлательщикомКПН =  ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(ПолученныеДанные.Организация, ПолученныеДанные.Дата);
		
		Если Не ОрганизацияЯвляетсяПлательщикомКПН Тогда
			ПолученныеДанные.УчитыватьКПН = Ложь;
		Иначе
			ПолученныеДанные.УчитыватьКПН = Истина;
		КонецЕсли;	
	
		Если НЕ ПолученныеДанные.УчитыватьКПН Тогда
			ПолученныеДанные.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НеОтражаетсяВНУ;
		Иначе
			ПолученныеДанные.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ;
		КонецЕсли;
	
		ПолученныеДанные.УчитыватьНДС = ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНДС(ПолученныеДанные.Организация, ПолученныеДанные.Дата);
	
		Возврат;
		
	КонецЕсли;
			
	// Заменяем свойства, которые получили из XDTO
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
	
	Если ДанныеИБ.Товары.Количество() > 0 Тогда
		МассивКлючевыхПолей = Новый Массив;
		МассивКлючевыхПолей.Добавить("Номенклатура");
		МассивКлючевыхПолей.Добавить("Количество");
		МассивКлючевыхПолей.Добавить("СуммаПошлины");
		МассивКлючевыхПолей.Добавить("СуммаНДС");
		МассивКлючевыхПолей.Добавить("ДокументПартии");
		МассивКлючевыхПолей.Добавить("ФактурнаяСтоимость");
		МассивКлючевыхПолей.Добавить("НомерРаздела");
	
		ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
			ПолученныеДанные.Товары,
			ДанныеИБ.Товары,
			МассивКлючевыхПолей,
			"СчетУчетаБУ,СчетУчетаНДС, СчетУчетаНУ");
	КонецЕсли;
	
	ДанныеИБ.Товары.Загрузить(ПолученныеДанные.Товары.Выгрузить());
	
	ДанныеИБ.Разделы.Загрузить(ПолученныеДанные.Разделы.Выгрузить());
	ПолученныеДанные = Неопределено;
КонецПроцедуры
#КонецОбласти
#Область Документ_ТребованиеНакладная_Получение
Процедура ДобавитьПКО_Документ_ТребованиеНакладная_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ТребованиеНакладная_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ТребованиеНакладная;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПередачаМатериаловВПроизводство";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_ТребованиеНакладная_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ТребованиеНакладная_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_ТребованиеНакладная";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Склад";
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Материалы", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Материалы;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Коэффициент";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Получение";

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_ТребованиеНакладная_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Проведен = Истина;
	
	//Товары
	МассивСтрокТовары = Новый Массив;
	Если ДанныеXDTO.Свойство("Товары")
		И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
	
		КонвертацииСвойств = Новый Соответствие;
		КонвертацииСвойств.Вставить("Номенклатура", "Номенклатура");
		КонвертацииСвойств.Вставить("ЕдиницаИзмерения", "ЕдиницаИзмерения");
		КонвертацииСвойств.Вставить("Количество", "Количество");
		
		Для Каждого СтрокаXDTO Из ДанныеXDTO.Товары Цикл
			Если  СтрокаXDTO.ТипЗапасов.Значение = "КомиссионныеТовары" Тогда
				Продолжить;
			КонецЕсли;
			СтруктураДанныхСтроки = Новый Структура;
			СтруктураДанныхСтроки.Вставить("Коэффициент", 1);
			ЗаполнитьСтруктуруДанныхСтроки(КонвертацииСвойств, СтрокаXDTO, СтруктураДанныхСтроки);
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	
	Если МассивСтрокТовары.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Материалы", МассивСтрокТовары);
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_ТребованиеНакладная_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УстановкаУчетнойПолитикиОрганизации(?(ДанныеИБ = Неопределено, ПолученныеДанные.Организация, ДанныеИБ.Организация));
	
	ПолученныеДанные.Склад = СкладДляЗагрузки(ПолученныеДанные.Склад, КомпонентыОбмена.ПараметрыКонвертации);
	
	Если ДанныеИБ = Неопределено Тогда
	
		ОрганизацияЯвляетсяПлательщикомКПН =  ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(ПолученныеДанные.Организация, ПолученныеДанные.Дата);
		
		Если Не ОрганизацияЯвляетсяПлательщикомКПН Тогда
			ПолученныеДанные.УчитыватьКПН = Ложь;
		Иначе
			ПолученныеДанные.УчитыватьКПН = Истина;
		КонецЕсли;	
	
		Если НЕ ПолученныеДанные.УчитыватьКПН Тогда
			ПолученныеДанные.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НеОтражаетсяВНУ;
		Иначе
			ПолученныеДанные.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ;
		КонецЕсли;
		
		ПроцедурыНалоговогоУчета.ЗаполнитьВидУчетаНУ(ПолученныеДанные.УчитыватьКПН, ПолученныеДанные.ВидУчетаНУ);
		
		Если НЕ ЗначениеЗаполнено(ПолученныеДанные.СчетЗатратБУ) Тогда
			
			ПолученныеДанные.СчетЗатратБУ = ПланыСчетов.Типовой.ОсновноеПроизводство;
			
			ПолученныеДанные.СчетЗатратНУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", ПолученныеДанные.СчетЗатратБУ));
			
		КонецЕсли;   	
		
		Возврат;
		
	КонецЕсли;	
			
	// Заменяем свойства, которые получили из XDTO
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
					
	// Восстанавливаем "затертые" данные
	//Товары
	МассивКлючевыхПолей = Новый Массив;
	МассивКлючевыхПолей.Добавить("Номенклатура");
	МассивКлючевыхПолей.Добавить("ЕдиницаИзмерения");
	МассивКлючевыхПолей.Добавить("Количество");
	
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.Материалы,
		ДанныеИБ.Материалы,
		МассивКлючевыхПолей,
		"СчетБУ");
		
	ДанныеИБ.Материалы.Загрузить(ПолученныеДанные.Материалы.Выгрузить());
	ПолученныеДанные = Неопределено;
КонецПроцедуры
#КонецОбласти
#Область Документ_ЭСФ_Получение
Процедура ДобавитьПКО_Документ_ЭСФ_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ЭСФ_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ЭСФ;
	ПравилоКонвертации.ОбъектФормата = "Документ.ЭСФ";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_ЭСФ_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ЭСФ_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_ЭСФ";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "АдресДоставки";
	НоваяСтрока.СвойствоФормата = "АдресДоставки";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "АдресОтправки";
	НоваяСтрока.СвойствоФормата = "АдресОтправки";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Валюта";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаКод";
	НоваяСтрока.СвойствоФормата = "ВалютаКод";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВерсияБланкаЭСФ";
	НоваяСтрока.СвойствоФормата = "ВерсияБланкаЭСФ";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Вид";
	НоваяСтрока.СвойствоФормата = "Вид";
	НоваяСтрока.ПравилоКонвертацииСвойства = "ВидыЭСФ";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ГосучреждениеБИК";
	НоваяСтрока.СвойствоФормата = "ГосучреждениеБИК";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ГосучреждениеИИК";
	НоваяСтрока.СвойствоФормата = "ГосучреждениеИИК";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ГосучреждениеКодТоваров";
	НоваяСтрока.СвойствоФормата = "ГосучреждениеКодТоваров";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ГосучреждениеНазначениеПлатежа";
	НоваяСтрока.СвойствоФормата = "ГосучреждениеНазначениеПлатежа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ГрузоотправительИдентификатор";
	НоваяСтрока.СвойствоФормата = "ГрузоотправительИдентификатор";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ГрузоотправительНаименование";
	НоваяСтрока.СвойствоФормата = "ГрузоотправительНаименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ГрузополучательИдентификатор";
	НоваяСтрока.СвойствоФормата = "ГрузополучательИдентификатор";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ГрузополучательКодСтраны";
	НоваяСтрока.СвойствоФормата = "ГрузополучательКодСтраны";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ГрузополучательНаименование";
	НоваяСтрока.СвойствоФормата = "ГрузополучательНаименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВыпискиНаБумажномНосителе";
	НоваяСтрока.СвойствоФормата = "ДатаВыпискиНаБумажномНосителе";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаОборота";
	НоваяСтрока.СвойствоФормата = "ДатаОборота";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоверенностьНаПоставкуДата";
	НоваяСтрока.СвойствоФормата = "ДоверенностьНаПоставкуДата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоверенностьНаПоставкуНомер";
	НоваяСтрока.СвойствоФормата = "ДоверенностьНаПоставкуНомер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоговорПорученияПокупателяДата";
	НоваяСтрока.СвойствоФормата = "ДоговорПорученияПокупателяДата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоговорПорученияПокупателяНомер";
	НоваяСтрока.СвойствоФормата = "ДоговорПорученияПокупателяНомер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоговорПорученияПоставщикаДата";
	НоваяСтрока.СвойствоФормата = "ДоговорПорученияПоставщикаДата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоговорПорученияПоставщикаНомер";
	НоваяСтрока.СвойствоФормата = "ДоговорПорученияПоставщикаНомер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоговорПоставки";
	НоваяСтрока.СвойствоФормата = "ДоговорПоставки";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоговорПоставкиДата";
	НоваяСтрока.СвойствоФормата = "ДоговорПоставкиДата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоговорПоставкиНомер";
	НоваяСтрока.СвойствоФормата = "ДоговорПоставкиНомер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоговорПоставкиСпособОтправления";
	НоваяСтрока.СвойствоФормата = "ДоговорПоставкиСпособОтправления";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоговорПоставкиУсловияОплаты";
	НоваяСтрока.СвойствоФормата = "ДоговорПоставкиУсловияОплаты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоговорПоставкиУсловияПоставки";
	НоваяСтрока.СвойствоФормата = "ДоговорПоставкиУсловияПоставки";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДокументПодтверждающийПоставкуДата";
	НоваяСтрока.СвойствоФормата = "ДокументПодтверждающийПоставкуДата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДокументПодтверждающийПоставкуНомер";
	НоваяСтрока.СвойствоФормата = "ДокументПодтверждающийПоставкуНомер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДополнительныеСведения";
	НоваяСтрока.СвойствоФормата = "ДополнительныеСведения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Идентификатор";
	НоваяСтрока.СвойствоФормата = "Идентификатор";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КурсВалюты";
	НоваяСтрока.СвойствоФормата = "КурсВалюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "МестоРеализацииНеРК";
	НоваяСтрока.СвойствоФормата = "МестоРеализацииНеРК";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Направление";
	НоваяСтрока.СвойствоФормата = "Направление";
	НоваяСтрока.ПравилоКонвертацииСвойства = "НаправленияЭСФ";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ОтражаетсяВВС";
	НоваяСтрока.СвойствоФормата = "ОтражаетсяВВС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПоверенныйПокупателяАдресМестонахождения";
	НоваяСтрока.СвойствоФормата = "ПоверенныйПокупателяАдресМестонахождения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПоверенныйПокупателяБИН";
	НоваяСтрока.СвойствоФормата = "ПоверенныйПокупателяБИН";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПоверенныйПокупателяНаименование";
	НоваяСтрока.СвойствоФормата = "ПоверенныйПокупателяНаименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПоверенныйПоставщикаАдресМестонахождения";
	НоваяСтрока.СвойствоФормата = "ПоверенныйПоставщикаАдресМестонахождения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПоверенныйПоставщикаБИН";
	НоваяСтрока.СвойствоФормата = "ПоверенныйПоставщикаБИН";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПоверенныйПоставщикаНаименование";
	НоваяСтрока.СвойствоФормата = "ПоверенныйПоставщикаНаименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПользовательскийСтатус";
	НоваяСтрока.СвойствоФормата = "ПользовательскийСтатус";
	НоваяСтрока.ПравилоКонвертацииСвойства = "ПользовательскиеСтатусыЭСФ";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Причина";
	НоваяСтрока.СвойствоФормата = "Причина";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПричинаВыпискиНаБумажномНосителе";
	НоваяСтрока.СвойствоФормата = "ПричинаВыпискиНаБумажномНосителе";
	НоваяСтрока.ПравилоКонвертацииСвойства = "ПричиныВыпискиСФНаБумаге";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПунктНазначения";
	НоваяСтрока.СвойствоФормата = "ПунктНазначения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "РегистрационныйНомер";
	НоваяСтрока.СвойствоФормата = "РегистрационныйНомер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СвязанныйЭСФ";
	НоваяСтрока.СвойствоФормата = "СвязанныйЭСФ";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Документ_ЭСФ_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СвязанныйЭСФДата";
	НоваяСтрока.СвойствоФормата = "СвязанныйЭСФДата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СвязанныйЭСФНомер";
	НоваяСтрока.СвойствоФормата = "СвязанныйЭСФНомер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СвязанныйЭСФРегистрационныйНомер";
	НоваяСтрока.СвойствоФормата = "СвязанныйЭСФРегистрационныйНомер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Состояние";
	НоваяСтрока.СвойствоФормата = "Состояние";
	НоваяСтрока.ПравилоКонвертацииСвойства = "СостоянияЭСФ";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СпособОтправленияПоКлассификатору";
	НоваяСтрока.СвойствоФормата = "СпособОтправленияПоКлассификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Статус";
	НоваяСтрока.СвойствоФормата = "Статус";
	НоваяСтрока.ПравилоКонвертацииСвойства = "СтатусыЭСФ";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтруктурноеПодразделение";
	НоваяСтрока.СвойствоФормата = "СтруктурноеПодразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ПодразделенияОрганизаций";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "СуммаДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ТипПодписи";
	НоваяСтрока.СвойствоФормата = "ТипПодписи";
	НоваяСтрока.ПравилоКонвертацииСвойства = "ТипыПодписиЭСФ";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "УполномоченныйСотрудник";
	НоваяСтрока.СвойствоФормата = "УполномоченныйСотрудник";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЭЦП";
	НоваяСтрока.СвойствоФормата = "ЭЦП";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Грузоотправитель";
	НоваяСтрока.СвойствоФормата = "Грузоотправитель";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Грузополучатель";
	НоваяСтрока.СвойствоФормата = "Грузополучатель";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетФактура";
	НоваяСтрока.СвойствоФормата = "СчетФактура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Ошибки", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Ошибки;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Поле";
	НоваяСтрока.СвойствоФормата = "Поле";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Текст";
	НоваяСтрока.СвойствоФормата = "Текст";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Получатели", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Получатели;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Адвокат";
	НоваяСтрока.СвойствоФормата = "Адвокат";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Адрес";
	НоваяСтрока.СвойствоФормата = "Адрес";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "БИНРеорганизованногоЛица";
	НоваяСтрока.СвойствоФормата = "БИНРеорганизованногоЛица";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "БИНФилиала";
	НоваяСтрока.СвойствоФормата = "БИНФилиала";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ГосударственноеУчреждение";
	НоваяСтрока.СвойствоФормата = "ГосударственноеУчреждение";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Доверитель";
	НоваяСтрока.СвойствоФормата = "Доверитель";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоляУчастия";
	НоваяСтрока.СвойствоФормата = "ДоляУчастия";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДополнительныеСведения";
	НоваяСтрока.СвойствоФормата = "ДополнительныеСведения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КодСтраны";
	НоваяСтрока.СвойствоФормата = "КодСтраны";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комиссионер";
	НоваяСтрока.СвойствоФормата = "Комиссионер";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комитент";
	НоваяСтрока.СвойствоФормата = "Комитент";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Лизингодатель";
	НоваяСтрока.СвойствоФормата = "Лизингодатель";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Медиатор";
	НоваяСтрока.СвойствоФормата = "Медиатор";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Нерезидент";
	НоваяСтрока.СвойствоФормата = "Нерезидент";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НерезидентВерсия2";
	НоваяСтрока.СвойствоФормата = "НерезидентВерсия2";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерСвидетельстваПоНДС";
	НоваяСтрока.СвойствоФормата = "НомерСвидетельстваПоНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Нотариус";
	НоваяСтрока.СвойствоФормата = "Нотариус";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Получатель";
	НоваяСтрока.СвойствоФормата = "Получатель";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПолучательИдентификатор";
	НоваяСтрока.СвойствоФормата = "ПолучательИдентификатор";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПолучательНаименование";
	НоваяСтрока.СвойствоФормата = "ПолучательНаименование";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "РозничнаяРеализация";
	НоваяСтрока.СвойствоФормата = "РозничнаяРеализация";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СерияСвидетельстваПоНДС";
	НоваяСтрока.СвойствоФормата = "СерияСвидетельстваПоНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СудебныйИсполнитель";
	НоваяСтрока.СвойствоФормата = "СудебныйИсполнитель";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "УчастникСовместнойДеятельности";
	НоваяСтрока.СвойствоФормата = "УчастникСовместнойДеятельности";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "УчастникСРП";
	НоваяСтрока.СвойствоФормата = "УчастникСРП";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ФизическоеЛицо";
	НоваяСтрока.СвойствоФормата = "ФизическоеЛицо";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Поставщики", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Поставщики;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Адвокат";
	НоваяСтрока.СвойствоФормата = "Адвокат";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Адрес";
	НоваяСтрока.СвойствоФормата = "Адрес";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "БИК";
	НоваяСтрока.СвойствоФормата = "БИК";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "БИНРеорганизованногоЛица";
	НоваяСтрока.СвойствоФормата = "БИНРеорганизованногоЛица";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "БИНФилиала";
	НоваяСтрока.СвойствоФормата = "БИНФилиала";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Доверитель";
	НоваяСтрока.СвойствоФормата = "Доверитель";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДокументПодтверждающийПоставкуДата";
	НоваяСтрока.СвойствоФормата = "ДокументПодтверждающийПоставкуДата";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДокументПодтверждающийПоставкуНомер";
	НоваяСтрока.СвойствоФормата = "ДокументПодтверждающийПоставкуНомер";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоляУчастия";
	НоваяСтрока.СвойствоФормата = "ДоляУчастия";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДополнительныеСведения";
	НоваяСтрока.СвойствоФормата = "ДополнительныеСведения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ИИК";
	НоваяСтрока.СвойствоФормата = "ИИК";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КБе";
	НоваяСтрока.СвойствоФормата = "КБе";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комиссионер";
	НоваяСтрока.СвойствоФормата = "Комиссионер";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комитент";
	НоваяСтрока.СвойствоФормата = "Комитент";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Лизингодатель";
	НоваяСтрока.СвойствоФормата = "Лизингодатель";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Медиатор";
	НоваяСтрока.СвойствоФормата = "Медиатор";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "МеждународныйПеревозчик";
	НоваяСтрока.СвойствоФормата = "МеждународныйПеревозчик";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НаименованиеБанка";
	НоваяСтрока.СвойствоФормата = "НаименованиеБанка";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерСвидетельстваПоНДС";
	НоваяСтрока.СвойствоФормата = "НомерСвидетельстваПоНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Нотариус";
	НоваяСтрока.СвойствоФормата = "Нотариус";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Поставщик";
	НоваяСтрока.СвойствоФормата = "Поставщик";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПоставщикИдентификатор";
	НоваяСтрока.СвойствоФормата = "ПоставщикИдентификатор";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПоставщикНаименование";
	НоваяСтрока.СвойствоФормата = "ПоставщикНаименование";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СерияСвидетельстваПоНДС";
	НоваяСтрока.СвойствоФормата = "СерияСвидетельстваПоНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СудебныйИсполнитель";
	НоваяСтрока.СвойствоФормата = "СудебныйИсполнитель";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "УчастникСовместнойДеятельности";
	НоваяСтрока.СвойствоФормата = "УчастникСовместнойДеятельности";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "УчастникСРП";
	НоваяСтрока.СвойствоФормата = "УчастникСРП";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Экспедитор";
	НоваяСтрока.СвойствоФормата = "Экспедитор";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Экспортер";
	НоваяСтрока.СвойствоФормата = "Экспортер";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЭкспортерИлиУчастникСРП";
	НоваяСтрока.СвойствоФормата = "ЭкспортерИлиУчастникСРП";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЯвляетсяСтруктурнымПодразделениемНерезидента";
	НоваяСтрока.СвойствоФормата = "ЯвляетсяСтруктурнымПодразделениемНерезидента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "БезНДС";
	НоваяСтрока.СвойствоФормата = "БезНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДополнительныеДанные";
	НоваяСтрока.СвойствоФормата = "ДополнительныеДанные";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДополнительныйИдентификатор";
	НоваяСтрока.СвойствоФормата = "ДополнительныйИдентификатор";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЕдиницаИзмерения";
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЕдиницаИзмеренияКод";
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмеренияКод";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЕдиницаИзмеренияНаименование";
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмеренияНаименование";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЕдиницаИзмеренияХраненияОстатков";
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмеренияХраненияОстатков";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ИдентификаторТовара";
	НоваяСтрока.СвойствоФормата = "ИдентификаторТовара";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КодТНВЭД";
	НоваяСтрока.СвойствоФормата = "КодТНВЭД";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Количество";
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КоэффициентПересчета";
	НоваяСтрока.СвойствоФормата = "КоэффициентПересчета";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерЗаявленияВРамкахТС";
	НоваяСтрока.СвойствоФормата = "НомерЗаявленияВРамкахТС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерИзСНТ";
	НоваяСтрока.СвойствоФормата = "НомерИзСНТ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерПозицииВДекларацииИлиЗаявлении";
	НоваяСтрока.СвойствоФормата = "НомерПозицииВДекларацииИлиЗаявлении";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ОборотПоРеализации";
	НоваяСтрока.СвойствоФормата = "ОборотПоРеализации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПризнакПроисхождения";
	НоваяСтрока.СвойствоФормата = "ПризнакПроисхождения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПризнакУчетаНаВиртуальномСкладе";
	НоваяСтрока.СвойствоФормата = "ПризнакУчетаНаВиртуальномСкладе";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтавкаНДС";
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтавкаНДСЧисло";
	НоваяСтрока.СвойствоФормата = "СтавкаНДСЧисло";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Сумма";
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаБезНалогов";
	НоваяСтрока.СвойствоФормата = "СуммаБезНалогов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаНДС";
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Товар";
	НоваяСтрока.СвойствоФормата = "Товар";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ТоварНаименование";
	НоваяСтрока.СвойствоФормата = "ТоварНаименование";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ТоварНаименованиеВРамкахТС";
	НоваяСтрока.СвойствоФормата = "ТоварНаименованиеВРамкахТС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Цена";
	НоваяСтрока.СвойствоФормата = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ТоварыПоПолучателям", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ТоварыПоПолучателям;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДополнительныеДанные";
	НоваяСтрока.СвойствоФормата = "ДополнительныеДанные";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Идентификатор";
	НоваяСтрока.СвойствоФормата = "Идентификатор";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Количество";
	НоваяСтрока.СвойствоФормата = "Количество";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерИзСНТ";
	НоваяСтрока.СвойствоФормата = "НомерИзСНТ";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерТовара";
	НоваяСтрока.СвойствоФормата = "НомерТовара";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ОборотПоРеализации";
	НоваяСтрока.СвойствоФормата = "ОборотПоРеализации";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Сумма";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаБезНалогов";
	НоваяСтрока.СвойствоФормата = "СуммаБезНалогов";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаНДС";
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ТоварыПоПоставщикам", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ТоварыПоПоставщикам;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДополнительныеДанные";
	НоваяСтрока.СвойствоФормата = "ДополнительныеДанные";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Идентификатор";
	НоваяСтрока.СвойствоФормата = "Идентификатор";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Количество";
	НоваяСтрока.СвойствоФормата = "Количество";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерИзСНТ";
	НоваяСтрока.СвойствоФормата = "НомерИзСНТ";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерТовара";
	НоваяСтрока.СвойствоФормата = "НомерТовара";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ОборотПоРеализации";
	НоваяСтрока.СвойствоФормата = "ОборотПоРеализации";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Сумма";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаБезНалогов";
	НоваяСтрока.СвойствоФормата = "СуммаБезНалогов";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаНДС";
	НоваяСтрока.СвойствоФормата = "СуммаНДС";

КонецПроцедуры

Процедура ПКО_Документ_ЭСФ_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ДанныеXDTO.Свойство("Грузоотправитель") И ТипЗнч(ДанныеXDTO.Грузоотправитель) = Тип("Структура") Тогда
		Если ДанныеXDTO.Грузоотправитель.Свойство("ТипЗначения") И ДанныеXDTO.Грузоотправитель.ТипЗначения = "Контрагент" Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("Грузоотправитель", Новый Структура("Значение, ИмяПКО", ДанныеXDTO.Грузоотправитель, "Справочник_Контрагенты_Получение")); 	
		Иначе
			ПолученныеДанные.ДополнительныеСвойства.Вставить("Грузоотправитель", Новый Структура("Значение, ИмяПКО", ДанныеXDTO.Грузоотправитель, "Справочник_Организации_Получение"));	
		КонецЕсли;
	КонецЕсли;
	
	Если ДанныеXDTO.Свойство("Грузополучатель") И ТипЗнч(ДанныеXDTO.Грузополучатель) = Тип("Структура") Тогда
		Если ДанныеXDTO.Грузополучатель.Свойство("ТипЗначения") И ДанныеXDTO.Грузополучатель.ТипЗначения = "Контрагент" Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("Грузополучатель", Новый Структура("Значение, ИмяПКО", ДанныеXDTO.Грузополучатель, "Справочник_Контрагенты_Получение")); 	
		Иначе
			ПолученныеДанные.ДополнительныеСвойства.Вставить("Грузополучатель", Новый Структура("Значение, ИмяПКО", ДанныеXDTO.Грузополучатель, "Справочник_Организации_Получение"));	
		КонецЕсли;
	КонецЕсли;
	
	Если ДанныеXDTO.Свойство("СчетФактура") И ТипЗнч(ДанныеXDTO.СчетФактура) = Тип("Структура") Тогда
		Если ДанныеXDTO.СчетФактура.Свойство("ТипЗначения") И ДанныеXDTO.СчетФактура.ТипЗначения = "СчетФактураВыданный" Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("СчетФактура", Новый Структура("Значение, ИмяПКО", ДанныеXDTO.СчетФактура, "Документ_СчетФактураВыданный_Получение")); 	
		Иначе
			ПолученныеДанные.ДополнительныеСвойства.Вставить("СчетФактура", Новый Структура("Значение, ИмяПКО", ДанныеXDTO.СчетФактура, "Документ_СчетФактураПолученный_Получение"));	
		КонецЕсли;
	КонецЕсли;
	
	//Товары
	МассивСтрокТовары = Новый Массив;
	Если ДанныеXDTO.Свойство("Товары")
		И ЗначениеЗаполнено(ДанныеXDTO.Товары)
		И ДанныеXDTO.Товары.Количество() > 0 Тогда
		
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("ТоварНаименование","ТоварНаименование");
		ПравилаЗаполнения.Вставить("Товар","Товар");
		ПравилаЗаполнения.Вставить("КодТНВЭД", "КодТНВЭД");
		ПравилаЗаполнения.Вставить("ЕдиницаИзмеренияНаименование", "ЕдиницаИзмеренияНаименование");
		ПравилаЗаполнения.Вставить("ЕдиницаИзмерения", "ЕдиницаИзмерения");
		ПравилаЗаполнения.Вставить("Количество", "Количество");
		ПравилаЗаполнения.Вставить("Цена", "Цена");
		ПравилаЗаполнения.Вставить("СуммаБезНалогов", "СуммаБезНалогов");
		ПравилаЗаполнения.Вставить("ОборотПоРеализации","ОборотПоРеализации");
		ПравилаЗаполнения.Вставить("СтавкаНДСЧисло","СтавкаНДСЧисло");
		ПравилаЗаполнения.Вставить("БезНДС", "БезНДС");
		ПравилаЗаполнения.Вставить("СтавкаНДС", "СтавкаНДС");
		ПравилаЗаполнения.Вставить("СуммаНДС", "СуммаНДС");
		ПравилаЗаполнения.Вставить("Сумма", "Сумма");
		ПравилаЗаполнения.Вставить("НомерЗаявленияВРамкахТС", "НомерЗаявленияВРамкахТС");
		ПравилаЗаполнения.Вставить("ДополнительныеДанные", "ДополнительныеДанные");
		ПравилаЗаполнения.Вставить("ПризнакПроисхождения", "ПризнакПроисхождения");
		ПравилаЗаполнения.Вставить("ТоварНаименованиеВРамкахТС","ТоварНаименованиеВРамкахТС");
		ПравилаЗаполнения.Вставить("НомерПозицииВДекларацииИлиЗаявлении", "НомерПозицииВДекларацииИлиЗаявлении");
		ПравилаЗаполнения.Вставить("ИдентификаторТовара", "ИдентификаторТовара");
		ПравилаЗаполнения.Вставить("ЕдиницаИзмеренияКод", "ЕдиницаИзмеренияКод");
		ПравилаЗаполнения.Вставить("ЕдиницаИзмеренияХраненияОстатков", "ЕдиницаИзмеренияХраненияОстатков");
		ПравилаЗаполнения.Вставить("КоэффициентПересчета", "КоэффициентПересчета");
		ПравилаЗаполнения.Вставить("ДополнительныйИдентификатор", "ДополнительныйИдентификатор");
		ПравилаЗаполнения.Вставить("ПризнакУчетаНаВиртуальномСкладе", "ПризнакУчетаНаВиртуальномСкладе"); 
		ПравилаЗаполнения.Вставить("НомерИзСНТ", "НомерИзСНТ");
		
		Для Каждого Строка Из ДанныеXDTO.Товары Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			ОбработатьСтавкуНДСПриПолучении(Строка, СтруктураДанныхСтроки, КомпонентыОбмена.ПараметрыКонвертации);
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	Если МассивСтрокТовары.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
	КонецЕсли;
	
	
	// Получатели
	МассивСтрокПолучатели = Новый Массив;
	Если ДанныеXDTO.Свойство("Получатели")
		И ЗначениеЗаполнено(ДанныеXDTO.Получатели) 
		И ДанныеXDTO.Получатели.Количество() > 0 Тогда
	
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("ПолучательИдентификатор","ПолучательИдентификатор");
		ПравилаЗаполнения.Вставить("ПолучательНаименование","ПолучательНаименование");
		ПравилаЗаполнения.Вставить("Адрес", "Адрес");
		ПравилаЗаполнения.Вставить("СерияСвидетельстваПоНДС", "СерияСвидетельстваПоНДС");
		ПравилаЗаполнения.Вставить("НомерСвидетельстваПоНДС", "НомерСвидетельстваПоНДС");
		ПравилаЗаполнения.Вставить("ДополнительныеСведения", "ДополнительныеСведения");
		ПравилаЗаполнения.Вставить("Комитент", "Комитент");
		ПравилаЗаполнения.Вставить("Комиссионер", "Комиссионер");
		ПравилаЗаполнения.Вставить("Лизингодатель","Лизингодатель");
		ПравилаЗаполнения.Вставить("УчастникСовместнойДеятельности","УчастникСовместнойДеятельности");
		ПравилаЗаполнения.Вставить("ГосударственноеУчреждение", "ГосударственноеУчреждение");
		ПравилаЗаполнения.Вставить("Нерезидент", "Нерезидент");
		ПравилаЗаполнения.Вставить("ДоляУчастия", "ДоляУчастия");
		ПравилаЗаполнения.Вставить("КодСтраны", "КодСтраны");
		ПравилаЗаполнения.Вставить("УчастникСРП", "УчастникСРП");
		ПравилаЗаполнения.Вставить("Доверитель", "Доверитель");
		ПравилаЗаполнения.Вставить("РозничнаяРеализация", "РозничнаяРеализация");
		ПравилаЗаполнения.Вставить("БИНРеорганизованногоЛица","БИНРеорганизованногоЛица");
		ПравилаЗаполнения.Вставить("НерезидентВерсия2", "НерезидентВерсия2");
		ПравилаЗаполнения.Вставить("БИНФилиала", "БИНФилиала");
		ПравилаЗаполнения.Вставить("ФизическоеЛицо", "ФизическоеЛицо");
		ПравилаЗаполнения.Вставить("Адвокат", "Адвокат");
		ПравилаЗаполнения.Вставить("СудебныйИсполнитель", "СудебныйИсполнитель");
		ПравилаЗаполнения.Вставить("Медиатор", "Медиатор");
		ПравилаЗаполнения.Вставить("Нотариус", "Нотариус"); 
		
		Для Каждого Строка Из ДанныеXDTO.Получатели Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			Если ЗначениеЗаполнено(Строка.Получатель) И ТипЗнч(Строка.Получатель) = Тип("Структура") И Строка.Получатель.Свойство("ТипЗначения") Тогда			
				Если Строка.Получатель.ТипЗначения = "Организации" Тогда
					Инструкция = Новый Структура("Значение, ИмяПКО", Строка.Получатель, "Справочник_Организации_Получение");
				Иначе	
					Инструкция = Новый Структура("Значение, ИмяПКО", Строка.Получатель, "Справочник_Контрагенты_Получение");
				КонецЕсли;	
				СтруктураДанныхСтроки.Вставить("Получатель", Инструкция);    		
			КонецЕсли;
			МассивСтрокПолучатели.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	Если МассивСтрокПолучатели.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Получатели", МассивСтрокПолучатели);
	КонецЕсли;
	
	// Поставщики
	МассивСтрокПоставщики = Новый Массив;
	Если ДанныеXDTO.Свойство("Поставщики")
		И ЗначениеЗаполнено(ДанныеXDTO.Поставщики) 
		И ДанныеXDTO.Поставщики.Количество() > 0 Тогда
		
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("ПоставщикИдентификатор","ПоставщикИдентификатор");
		ПравилаЗаполнения.Вставить("ПоставщикНаименование","ПоставщикНаименование");
		ПравилаЗаполнения.Вставить("Адрес", "Адрес");
		ПравилаЗаполнения.Вставить("СерияСвидетельстваПоНДС", "СерияСвидетельстваПоНДС");
		ПравилаЗаполнения.Вставить("НомерСвидетельстваПоНДС", "НомерСвидетельстваПоНДС");
		ПравилаЗаполнения.Вставить("ДополнительныеСведения", "ДополнительныеСведения");
		ПравилаЗаполнения.Вставить("Комитент", "Комитент");
		ПравилаЗаполнения.Вставить("Комиссионер", "Комиссионер");
		ПравилаЗаполнения.Вставить("Лизингодатель","Лизингодатель");
		ПравилаЗаполнения.Вставить("УчастникСовместнойДеятельности","УчастникСовместнойДеятельности");
		ПравилаЗаполнения.Вставить("Экспедитор", "Экспедитор");
		ПравилаЗаполнения.Вставить("ЭкспортерИлиУчастникСРП", "ЭкспортерИлиУчастникСРП");
		ПравилаЗаполнения.Вставить("ДокументПодтверждающийПоставкуНомер", "ДокументПодтверждающийПоставкуНомер");
		ПравилаЗаполнения.Вставить("ДокументПодтверждающийПоставкуДата", "ДокументПодтверждающийПоставкуДата");
		ПравилаЗаполнения.Вставить("УчастникСРП", "УчастникСРП");
		ПравилаЗаполнения.Вставить("Доверитель", "Доверитель");
		ПравилаЗаполнения.Вставить("КБе", "КБе");
		ПравилаЗаполнения.Вставить("БИНРеорганизованногоЛица","БИНРеорганизованногоЛица");
		ПравилаЗаполнения.Вставить("БИК", "БИК");
		ПравилаЗаполнения.Вставить("БИНФилиала", "БИНФилиала");
		ПравилаЗаполнения.Вставить("ИИК", "ИИК");
		ПравилаЗаполнения.Вставить("ДоляУчастия", "ДоляУчастия");
		ПравилаЗаполнения.Вставить("Экспортер", "Экспортер");
		ПравилаЗаполнения.Вставить("МеждународныйПеревозчик", "МеждународныйПеревозчик");
		ПравилаЗаполнения.Вставить("ЯвляетсяСтруктурнымПодразделениемНерезидента", "ЯвляетсяСтруктурнымПодразделениемНерезидента");	
		ПравилаЗаполнения.Вставить("НаименованиеБанка", "НаименованиеБанка");
		ПравилаЗаполнения.Вставить("Адвокат", "Адвокат");
		ПравилаЗаполнения.Вставить("СудебныйИсполнитель", "СудебныйИсполнитель");
		ПравилаЗаполнения.Вставить("Медиатор", "Медиатор");
		ПравилаЗаполнения.Вставить("Нотариус", "Нотариус");   	
		
		Для Каждого Строка Из ДанныеXDTO.Поставщики Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			Если ЗначениеЗаполнено(Строка.Поставщик) И ТипЗнч(Строка.Поставщик) = Тип("Структура") И Строка.Поставщик.Свойство("ТипЗначения") Тогда			
				Если Строка.Поставщик.ТипЗначения = "Организации" Тогда
					Инструкция = Новый Структура("Значение, ИмяПКО", Строка.Поставщик, "Справочник_Организации_Получение");
				Иначе	
					Инструкция = Новый Структура("Значение, ИмяПКО", Строка.Поставщик, "Справочник_Контрагенты_Получение");
				КонецЕсли;	
				СтруктураДанныхСтроки.Вставить("Поставщик", Инструкция);    		
			КонецЕсли;
			МассивСтрокПоставщики.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	Если МассивСтрокПоставщики.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Поставщики", МассивСтрокПоставщики);
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_ЭСФ_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если ПолученныеДанные.ДополнительныеСвойства.Свойство("ИсторияЭСФ")
		И ЗначениеЗаполнено(ПолученныеДанные.ДополнительныеСвойства.ИсторияЭСФ) Тогда
		
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область ПТиУ_ПоступлениеДопРасходов
Процедура ДобавитьПКО_ПТиУ_ПоступлениеДопРасходов(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "ПТиУ_ПоступлениеДопРасходов";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПоступлениеДопРасходов;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПоступлениеТоваровУслуг";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_ПТиУ_ПоступлениеДопРасходов_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_ПТиУ_ПоступлениеДопРасходов_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_ПоступлениеДопРасходов";
	ПравилоКонвертации.ВариантИдентификации = "ПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КратностьВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "КратностьВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КурсВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "КурсВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаВключаетНДС";
	НоваяСтрока.СвойствоФормата = "СуммаВключаетНДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоговорКонтрагента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Содержание";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СпособРаспределения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДокументПартии";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "ПТиУ_ПоступлениеТоваровУслуг";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Коэффициент";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаТовара";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_ПТиУ_ПоступлениеДопРасходов_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	// Заполнение данных шапки
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеДопРасходов.УслугаСтороннейОрганизации;
	Если ДанныеXDTO.Услуги.Количество() > 0 Тогда
		СтруктураДанныхСтроки = Новый Структура("СтавкаНДС", ДанныеXDTO.Услуги[0].СтавкаНДС);
		ОбработатьСтавкуНДСПриПолучении(ДанныеXDTO.Услуги[0], СтруктураДанныхСтроки, КомпонентыОбмена.ПараметрыКонвертации);
		ПолученныеДанные.СтавкаНДС = СтруктураДанныхСтроки.СтавкаНДС;
	Иначе
		ПолученныеДанные.СтавкаНДС = Справочники.СтавкиНДС.ПустаяСсылка();
	КонецЕсли;	
	ПолученныеДанные.СпособРаспределения = Перечисления.СпособыРаспределенияДопРасходов.ПоСумме;
	ДобавитьДоговорВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);		
	ПолученныеДанные.Проведен = Истина;
	
	Номер = ДанныеXDTO.КлючевыеСвойства.Номер;
	ПолученныеДанные.Номер = Лев(Номер, 5) + "П" + Сред(Номер, 7);
	
	Если ДанныеXDTO.Налогообложение = "ПродажаОблагаетсяЕНВД" Тогда
		ПолученныеДанные.НДСВключенВСтоимость = Истина;
	КонецЕсли;
	Если ДанныеXDTO.Свойство("Услуги")
		И ЗначениеЗаполнено(ДанныеXDTO.Услуги) Тогда
		ПолученныеДанные.СуммаДокумента = 0;
		Для Каждого Услуги_Строка Из ДанныеXDTO.Услуги Цикл
			
			Если Услуги_Строка.ЭтоДопРасходы = Истина Тогда
				
				ПолученныеДанные.СуммаДокумента = ПолученныеДанные.СуммаДокумента + Услуги_Строка.Сумма + ?(Услуги_Строка.СуммаНДС = Неопределено, 0, Услуги_Строка.СуммаНДС);
				
				Если ЗначениеЗаполнено(Услуги_Строка.Содержание) Тогда
					ПолученныеДанные.Содержание = ?(ПолученныеДанные.Содержание = "", "", ", ") + Услуги_Строка.Содержание;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	// Расшифровка допрасходов
	МассивСтрокТовары = Новый Массив;
	
	Если ДанныеXDTO.Свойство("РасшифровкаДопРасходов")
		И ЗначениеЗаполнено(ДанныеXDTO.РасшифровкаДопРасходов) Тогда
	
		Р_КС = Новый Соответствие;
		Р_КС.Вставить("Номенклатура", "Номенклатура");
		Р_КС.Вставить("Количество", "Количество");
		Р_КС.Вставить("Сумма", "Сумма");
		Р_КС.Вставить("СуммаНДС", "СуммаНДС");
		Р_КС.Вставить("СуммаТовара", "СтоимостьТоваров");
		Р_КС.Вставить("ДокументПартии", "ДокументПоступления");
		Для Каждого СтрокаXDTO Из ДанныеXDTO.РасшифровкаДопРасходов Цикл
			СтруктураДанныхСтроки = Новый Структура;
			ЗаполнитьСтруктуруДанныхСтроки(Р_КС, СтрокаXDTO, СтруктураДанныхСтроки);
			СтруктураДанныхСтроки.Вставить("Коэффициент", 1);
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	Если МассивСтрокТовары.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_ПТиУ_ПоступлениеДопРасходов_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УстановкаУчетнойПолитикиОрганизации(?(ДанныеИБ = Неопределено, ПолученныеДанные.Организация, ДанныеИБ.Организация));
	
	Для Каждого СтрокаТабличнойЧасти Из ПолученныеДанные.Товары Цикл
		МетаданныеДокумента = ПолученныеДанные.Метаданные();
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.НДСВидОборота) Тогда
			ОбработкаТабличныхЧастей.ЗаполнитьНДСВидОборотаТабЧасти(СтрокаТабличнойЧасти, ПолученныеДанные, "Товары", МетаданныеДокумента);
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.НДСВидПоступления) Тогда
			ОбработкаТабличныхЧастей.ЗаполнитьНДСВидПоступленияТабЧасти(СтрокаТабличнойЧасти, "Товары", МетаданныеДокумента, Пользователи.ТекущийПользователь());
		КонецЕсли;
	КонецЦикла;
	
	РаспределитьДопРасходы_Получение(ПолученныеДанные);
	
	Если ДанныеИБ = Неопределено Тогда
	
		ОрганизацияЯвляетсяПлательщикомКПН =  ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(ПолученныеДанные.Организация, ПолученныеДанные.Дата);
		
		Если Не ОрганизацияЯвляетсяПлательщикомКПН Тогда
			ПолученныеДанные.УчитыватьКПН = Ложь;
		Иначе
			ПолученныеДанные.УчитыватьКПН = Истина;
		КонецЕсли;	
	
		Если НЕ ПолученныеДанные.УчитыватьКПН Тогда
			ПолученныеДанные.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НеОтражаетсяВНУ;
		Иначе
			ПолученныеДанные.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ;
		КонецЕсли;
	
		ПолученныеДанные.УчитыватьНДС = ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНДС(ПолученныеДанные.Организация, ПолученныеДанные.Дата);
	
		Возврат;
		
	КонецЕсли;
	
	ОбнулениеСчетовУчетаРасчетовВДанныхИБ(ПолученныеДанные, ДанныеИБ);
	
	// Переносим те свойства, которые указаны в ПКС
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
	
	// Переносим свойства, не указанные в ПКС
	ЗаполнитьЗначенияСвойств(ДанныеИБ, ПолученныеДанные,
		"НДСВключенВСтоимость,СтавкаНДС,СуммаДокумента,СпособРаспределения,Содержание");
	
	Если ДанныеИБ.Товары.Количество() > 0 Тогда
		
		МассивКлючевыхПолей = Новый Массив;
		МассивКлючевыхПолей.Добавить("Номенклатура");
		МассивКлючевыхПолей.Добавить("Количество");
		МассивКлючевыхПолей.Добавить("Сумма");
		МассивКлючевыхПолей.Добавить("СуммаНДС");
		МассивКлючевыхПолей.Добавить("СуммаТовара");
		МассивКлючевыхПолей.Добавить("ДокументПартии");
	
		ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
			ПолученныеДанные.Товары,
			ДанныеИБ.Товары,
			МассивКлючевыхПолей,
			"СчетУчетаБУ,СчетУчетаНДС, СчетУчетаНУ");
	КонецЕсли;
	
	ДанныеИБ.Товары.Загрузить(ПолученныеДанные.Товары.Выгрузить());
	
	ПолученныеДанные = Неопределено;
КонецПроцедуры
#КонецОбласти
#Область ПТиУ_ПоступлениеТоваровУслуг
Процедура ДобавитьПКО_ПТиУ_ПоступлениеТоваровУслуг(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "ПТиУ_ПоступлениеТоваровУслуг";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПоступлениеТоваровУслуг;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПоступлениеТоваровУслуг";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_ПТиУ_ПоступлениеТоваровУслуг_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_ПТиУ_ПоступлениеТоваровУслуг_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_ПТиУ";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.СвойствоФормата = "ВидОперации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "ВидыОперацийПоступленияТоваров";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КратностьВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "КратностьВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КурсВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "КурсВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Склад";
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаВключаетНДС";
	НоваяСтрока.СвойствоФормата = "СуммаВключаетНДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоговорКонтрагента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Коэффициент";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НДСВидОборота";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "ПеречислениеСсылка_ВидыОборотовПоРеализации";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетУчетаБУ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Услуги", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Услуги;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Содержание";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_ПТиУ_ПоступлениеТоваровУслуг_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	// Заполнение данных шапки
	
	ПолученныеДанные.Проведен = Истина;
	ДобавитьДоговорВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);	
	
	//Товары и возвратная тара
	МассивСтрокТовары = Новый Массив;
	Если ДанныеXDTO.Свойство("Товары")
		И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
	
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполнения.Вставить("ЕдиницаИзмерения", "ЕдиницаИзмерения");
		ПравилаЗаполнения.Вставить("Количество", "Количество");
		ПравилаЗаполнения.Вставить("Сумма", "Сумма");
		ПравилаЗаполнения.Вставить("Цена", "Цена");
		ПравилаЗаполнения.Вставить("ВидОборота", "НДСВидОборота");
		
		ПравилаЗаполнения.Вставить("СтавкаНДС", "СтавкаНДС");
		ПравилаЗаполнения.Вставить("СуммаНДС", "СуммаНДС");
		
		ПравилаЗаполненияТара = Новый Соответствие;
		ПравилаЗаполненияТара.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполненияТара.Вставить("Количество", "Количество");
		ПравилаЗаполненияТара.Вставить("Сумма", "Сумма");
		ПравилаЗаполненияТара.Вставить("Цена", "Цена");
		
		Для Каждого Строка Из ДанныеXDTO.Товары Цикл
			
			ТекТипЗапасов = "";
			Если ЗначениеЗаполнено(Строка.ТипЗапасов) И ТипЗнч(Строка.ТипЗапасов) = Тип("Структура") Тогда
				ТекТипЗапасов = Строка.ТипЗапасов.Значение;
			КонецЕсли;
	
			Если ТекТипЗапасов = "ВозвратнаяТара" Тогда // Заполнение ТЧ ВозвратнаяТара
			Иначе // Заполнение ТЧ Товары
				
				СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
				СтруктураДанныхСтроки.Вставить("Коэффициент",1);
				ОбработатьСтавкуНДСПриПолучении(Строка, СтруктураДанныхСтроки, КомпонентыОбмена.ПараметрыКонвертации);
				МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
				
			КонецЕсли;
		
		КонецЦикла;
		
	КонецЕсли;
	
	//Услуги
	МассивСтрокУслуги = Новый Массив;
	Если ДанныеXDTO.Свойство("Услуги")
		И ЗначениеЗаполнено(ДанныеXDTO.Услуги) Тогда
		
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполнения.Вставить("Содержание", "Содержание");
		ПравилаЗаполнения.Вставить("Количество", "Количество");
		ПравилаЗаполнения.Вставить("Сумма", "Сумма");
		ПравилаЗаполнения.Вставить("Цена", "Цена");
		ПравилаЗаполнения.Вставить("СтавкаНДС", "СтавкаНДС");
		ПравилаЗаполнения.Вставить("СуммаНДС", "СуммаНДС");
		Для Каждого Строка Из ДанныеXDTO.Услуги Цикл
			
			Если Строка.ЭтоДопРасходы = Истина Тогда
				Продолжить;
			КонецЕсли;
	
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			ОбработатьСтавкуНДСПриПолучении(Строка, СтруктураДанныхСтроки, КомпонентыОбмена.ПараметрыКонвертации);
			МассивСтрокУслуги.Добавить(СтруктураДанныхСтроки);
			
		КонецЦикла;
	КонецЕсли;
	
	//ОбновимСвойствоДоговора
	
	Если МассивСтрокТовары.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
	КонецЕсли;
	Если МассивСтрокУслуги.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Услуги", МассивСтрокУслуги);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПолученныеДанные.ВидОперации) Тогда
		ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомисия;
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_ПТиУ_ПоступлениеТоваровУслуг_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если ПолученныеДанные.ВалютаДокумента <> ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета() Тогда
		ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Импорт; 
	КонецЕсли;
	
	УстановкаУчетнойПолитикиОрганизации(?(ДанныеИБ = Неопределено, ПолученныеДанные.Организация, ДанныеИБ.Организация));
	
	// Склад
	ПолученныеДанные.Склад = СкладДляЗагрузки(ПолученныеДанные.Склад, КомпонентыОбмена.ПараметрыКонвертации);
	
	#Область Мержевание
	Если Не ДанныеИБ <> Неопределено Тогда
	
		ПолученныеДанные.СчетУчетаРасчетовСКонтрагентом = ПЛаныСчетов.Типовой.ПрочиеНалоги;
	
		ОрганизацияЯвляетсяПлательщикомКПН =  ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(ПолученныеДанные.Организация, ПолученныеДанные.Дата);
			
		Если Не ОрганизацияЯвляетсяПлательщикомКПН Тогда
			ПолученныеДанные.УчитыватьКПН = Ложь;
		Иначе
			ПолученныеДанные.УчитыватьКПН = Истина;
		КонецЕсли;	
			Если НЕ ПолученныеДанные.УчитыватьКПН Тогда
			ПолученныеДанные.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НеОтражаетсяВНУ;
		Иначе
			ПолученныеДанные.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ;
		КонецЕсли;
	
		ПолученныеДанные.УчитыватьНДС = ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНДС(ПолученныеДанные.Организация, ПолученныеДанные.Дата);
	
		Возврат;
	КонецЕсли;
	
	// Склад
	Если Не ЗначениеЗаполнено(ПолученныеДанные.Склад) И ЗначениеЗаполнено(ДанныеИБ.Склад) Тогда
		ПолученныеДанные.Склад = ДанныеИБ.Склад;
	КонецЕсли;
	
	ОбнулениеСчетовУчетаРасчетовВДанныхИБ(ПолученныеДанные, ДанныеИБ);
	
	// Переносим те свойства, которые указаны в ПКС
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
	
	// Переносим свойства, не указанные в ПКС
	ЗаполнитьЗначенияСвойств(ДанныеИБ, ПолученныеДанные, "НДСВключенВСтоимость");
	
	// Восстанавливаем "затертые" данные
	//Товары
	МассивКлючевыхПолей = Новый Массив;
	МассивКлючевыхПолей.Добавить("Номенклатура");
	МассивКлючевыхПолей.Добавить("ЕдиницаИзмерения");
	МассивКлючевыхПолей.Добавить("Количество");
	МассивКлючевыхПолей.Добавить("Сумма");
	МассивКлючевыхПолей.Добавить("Цена");
	МассивКлючевыхПолей.Добавить("СтавкаНДС");
	МассивКлючевыхПолей.Добавить("СуммаНДС");
	
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.Товары,
		ДанныеИБ.Товары,
		МассивКлючевыхПолей,
		"СчетУчетаБУ,СчетУчетаНДС");
	
	ДанныеИБ.Товары.Загрузить(ПолученныеДанные.Товары.Выгрузить());
	
	//Услуги
	МассивКлючевыхПолей = Новый Массив;
	МассивКлючевыхПолей.Добавить("Номенклатура");
	МассивКлючевыхПолей.Добавить("Количество");
	МассивКлючевыхПолей.Добавить("Сумма");
	МассивКлючевыхПолей.Добавить("Цена");
	МассивКлючевыхПолей.Добавить("СтавкаНДС");
	МассивКлючевыхПолей.Добавить("СуммаНДС");
	
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.Услуги,
		ДанныеИБ.Услуги,
		МассивКлючевыхПолей,
		"Содержание,СчетЗатратБУ,СчетУчетаНДС, СчетЗатратНУ, 
		|СубконтоЗатратБУ1, СубконтоЗатратБУ2, СубконтоЗатратБУ3, СубконтоЗатратНУ1, СубконтоЗатратНУ2, СубконтоЗатратНУ3");
	
	ДанныеИБ.Услуги.Загрузить(ПолученныеДанные.Услуги.Выгрузить());
	
	ПолученныеДанные = Неопределено;
	
	#КонецОбласти
КонецПроцедуры
#КонецОбласти
#Область ПТиУРасх_ВозвратТоваровПоставщику
Процедура ДобавитьПКО_ПТиУРасх_ВозвратТоваровПоставщику(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "ПТиУРасх_ВозвратТоваровПоставщику";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ВозвратТоваровПоставщику;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПоступлениеТоваровУслуг";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_ПТиУРасх_ВозвратТоваровПоставщику_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_ПТиУРасх_ВозвратТоваровПоставщику_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_ВозвратТоваровПоставщику";
	ПравилоКонвертации.ВариантИдентификации = "ПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КратностьВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "КратностьВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КурсВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "КурсВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Склад";
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаВключаетНДС";
	НоваяСтрока.СвойствоФормата = "СуммаВключаетНДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "ВидыОпераций_ВозвратПоставщику";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоговорКонтрагента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Коэффициент";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НДСВидОборота";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "ПеречислениеСсылка_ВидыОборотовПоРеализации";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетУчетаБУ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_ПТиУРасх_ВозвратТоваровПоставщику_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.Покупка;
	Номер = ДанныеXDTO.КлючевыеСвойства.Номер;
	ПолученныеДанные.Номер = Лев(Номер, 5) + "РП" + Сред(Номер, 8);
	ПолученныеДанные.Проведен = Истина;
	
	ДобавитьДоговорВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);	
	
	// Товары
	МассивСтрокТовары = Новый Массив;
	Если ДанныеXDTO.Свойство("Недостачи")
		И ЗначениеЗаполнено(ДанныеXDTO.Недостачи) Тогда
	
		КонвертацииСвойств = Новый Соответствие;
		КонвертацииСвойств.Вставить("Номенклатура", "Номенклатура");
		КонвертацииСвойств.Вставить("ЕдиницаИзмерения", "ЕдиницаИзмерения");
		КонвертацииСвойств.Вставить("Количество", "Количество");
		КонвертацииСвойств.Вставить("Цена", "Цена");
		КонвертацииСвойств.Вставить("Сумма", "Сумма");
		КонвертацииСвойств.Вставить("СтавкаНДС", "СтавкаНДС");
		КонвертацииСвойств.Вставить("СуммаНДС", "СуммаНДС");
		
		Для Каждого СтрокаXDTO Из ДанныеXDTO.Недостачи Цикл
			
			Если СтрокаXDTO.ВариантОтражения.Значение <> "ЗаСчетПоставщика" Тогда
				Продолжить;
			КонецЕсли;
			СтруктураДанныхСтроки = Новый Структура;
			ЗаполнитьСтруктуруДанныхСтроки(КонвертацииСвойств, СтрокаXDTO, СтруктураДанныхСтроки);
			СтруктураДанныхСтроки.Вставить("Коэффициент",1); 
			СтруктураДанныхСтроки.Вставить("ДокументОприходования",ДанныеXDTO.КлючевыеСвойства.Ссылка); 
	
			// Счет учета заполняется сразу, если это комиссионный товар,
			// и автоматически после загрузки всех данных - в остальных случаях
			Если ЗначениеЗаполнено(СтрокаXDTO.ТипЗапасов) И СтрокаXDTO.ТипЗапасов.Значение = "КомиссионныеТовары" Тогда
				СтруктураДанныхСтроки.Вставить("СчетУчетаБУ",ПланыСчетов.Типовой.Вспомогательный); 
			КонецЕсли;
			
			ОбработатьСтавкуНДСПриПолучении(СтрокаXDTO, СтруктураДанныхСтроки, КомпонентыОбмена.ПараметрыКонвертации);
			
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
			ПолученныеДанные.СуммаДокумента = ПолученныеДанные.СуммаДокумента + СтрокаXDTO.Сумма;
			
		КонецЦикла;
	КонецЕсли;
	
	Если МассивСтрокТовары.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_ПТиУРасх_ВозвратТоваровПоставщику_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УстановкаУчетнойПолитикиОрганизации(?(ДанныеИБ = Неопределено, ПолученныеДанные.Организация, ДанныеИБ.Организация));
	
	ПТиУРасх_ВТП_ПередЗаписью(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена, КомпонентыОбмена.ПараметрыКонвертации, КонвертацияСвойств);
КонецПроцедуры
#КонецОбласти
#Область ПТиУРасх_ВозвратТоваровСтороннейКомпании
Процедура ДобавитьПКО_ПТиУРасх_ВозвратТоваровСтороннейКомпании(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "ПТиУРасх_ВозвратТоваровСтороннейКомпании";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ВозвратТоваровПоставщику;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПоступлениеТоваровУслуг";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_ПТиУРасх_ВозвратТоваровСтороннейКомпании_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_ПТиУРасх_ВозвратТоваровСтороннейКомпании_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_ВозвратТоваровПоставщику";
	ПравилоКонвертации.ВариантИдентификации = "ПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "КонтрагентСтороннейКомпании";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КратностьВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "КратностьВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КурсВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "КурсВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Склад";
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаВключаетНДС";
	НоваяСтрока.СвойствоФормата = "СуммаВключаетНДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "ВидыОпераций_ВозвратПоставщику";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоговорКонтрагента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Коэффициент";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НДСВидОборота";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "ПеречислениеСсылка_ВидыОборотовПоРеализации";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетУчетаБУ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_ПТиУРасх_ВозвратТоваровСтороннейКомпании_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.Покупка;
	Номер = ДанныеXDTO.КлючевыеСвойства.Номер;
	ПолученныеДанные.Номер = Лев(Номер, 5) + "РТ" + Сред(Номер, 8);
	ПолученныеДанные.Проведен = Истина;
	
	// Договор по совокупности ключевых свойств
	СтруктураДанныеДоговора = Новый Структура();
	СтруктураДанныеДоговора.Вставить("Организация", ДанныеXDTO.КлючевыеСвойства.Организация);
	СтруктураДанныеДоговора.Вставить("Контрагент", ДанныеXDTO.КонтрагентСтороннейКомпании);
	
	СтруктураДанныеДоговора.Вставить("ВалютаВзаиморасчетов", ДанныеXDTO.Валюта);
	
	СтруктураДанныеДоговора.Вставить("ВидДоговора", Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
	
	СтруктураДанныеДоговора.Вставить("ЭтоНаборКлючевыхСвойств", Истина);
	
	ПолученныеДанные.ДополнительныеСвойства.Вставить("ДоговорКонтрагента", Новый Структура("Значение, ИмяПКО", СтруктураДанныеДоговора, "Справочник_ДоговорыКонтрагентов_ИзСтруктуры"));
	
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);	
	
	МассивСтрокТовары = Новый Массив;
	Если ДанныеXDTO.Свойство("Недостачи")
		И ЗначениеЗаполнено(ДанныеXDTO.Недостачи) Тогда
		// Товары
		КонвертацииСвойств = Новый Соответствие;
		КонвертацииСвойств.Вставить("Номенклатура", "Номенклатура");
		КонвертацииСвойств.Вставить("ЕдиницаИзмерения", "ЕдиницаИзмерения");
		КонвертацииСвойств.Вставить("Количество", "Количество");
		КонвертацииСвойств.Вставить("Цена", "Цена");
		КонвертацииСвойств.Вставить("Сумма", "Сумма");
		КонвертацииСвойств.Вставить("СтавкаНДС", "СтавкаНДС");
		КонвертацииСвойств.Вставить("СуммаНДС", "СуммаНДС");
		
		Для Каждого СтрокаXDTO Из ДанныеXDTO.Недостачи Цикл
			
			Если СтрокаXDTO.ВариантОтражения.Значение <> "ЗаСчетСтороннейКомпании" Тогда
				Продолжить;
			КонецЕсли;
			
			СтруктураДанныхСтроки = Новый Структура;
			ЗаполнитьСтруктуруДанныхСтроки(КонвертацииСвойств, СтрокаXDTO, СтруктураДанныхСтроки);
			СтруктураДанныхСтроки.Вставить("Коэффициент",1); 
	
			// Счет учета заполняется сразу, если это комиссионный товар,
			// и автоматически после загрузки всех данных - в остальных случаях
			Если ЗначениеЗаполнено(СтрокаXDTO.ТипЗапасов) И СтрокаXDTO.ТипЗапасов.Значение = "КомиссионныеТовары" Тогда
				СтруктураДанныхСтроки.Вставить("СчетУчетаБУ",ПланыСчетов.Типовой.Вспомогательный); 
			КонецЕсли;
			
			ОбработатьСтавкуНДСПриПолучении(СтрокаXDTO, СтруктураДанныхСтроки, КомпонентыОбмена.ПараметрыКонвертации);
			
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
			
			ПолученныеДанные.СуммаДокумента = ПолученныеДанные.СуммаДокумента + СтрокаXDTO.Сумма;
			
		КонецЦикла;
	КонецЕсли;
	Если МассивСтрокТовары.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_ПТиУРасх_ВозвратТоваровСтороннейКомпании_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УстановкаУчетнойПолитикиОрганизации(?(ДанныеИБ = Неопределено, ПолученныеДанные.Организация, ДанныеИБ.Организация));
	
	ПТиУРасх_ВТП_ПередЗаписью(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена, КомпонентыОбмена.ПараметрыКонвертации, КонвертацияСвойств);
КонецПроцедуры
#КонецОбласти
#Область ПТиУРасх_ОприходованиеТоваров
Процедура ДобавитьПКО_ПТиУРасх_ОприходованиеТоваров(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "ПТиУРасх_ОприходованиеТоваров";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ОприходованиеТоваров;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПоступлениеТоваровУслуг";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_ПТиУРасх_ОприходованиеТоваров_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_ПТиУРасх_ОприходованиеТоваров_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_ОприходованиеТоваров";
	ПравилоКонвертации.ВариантИдентификации = "ПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Склад";
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтруктурноеПодразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Основание";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Коэффициент";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_ПТиУРасх_ОприходованиеТоваров_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	// Заполнение данных шапки
	ПолученныеДанные.Проведен = Истина;
	
	Номер = ДанныеXDTO.КлючевыеСвойства.Номер;
	ПолученныеДанные.Номер = Лев(Номер, 5) + "Р" + Сред(Номер, 7);
	
	//Валюта
	ИмяПКОВалюты = "";	
	Если ДанныеXDTO.Свойство("Валюта")
		И ЗначениеЗаполнено(ДанныеXDTO.Валюта) Тогда
		
		Если ДанныеXDTO.Валюта.Свойство("Ссылка") Тогда
			ИмяПКОВалюты = "Справочник_Валюты";
		Иначе
			ИмяПКОВалюты = "Справочник_Валюты_ИзСтруктуры";
		КонецЕсли;
	КонецЕсли;
	ПКОВалюты = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, ИмяПКОВалюты);
	Валюта = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, ДанныеXDTO.Валюта, ПКОВалюты,"ПолучитьСсылку");
	ПолученныеДанные.ДополнительныеСвойства.Вставить("Валюта", Валюта);
	
	ДатаВходящегоДокумента = ?(ДанныеXDTO.Свойство("ДатаВходящегоДокумента"),ДанныеXDTO.ДатаВходящегоДокумента, Неопределено);
	НомерВходящегоДокумента = ?(ДанныеXDTO.Свойство("НомерВходящегоДокумента"),ДанныеXDTO.НомерВходящегоДокумента, Неопределено);
	Если ЗначениеЗаполнено(ДатаВходящегоДокумента) И ЗначениеЗаполнено(НомерВходящегоДокумента) Тогда
			ПолученныеДанные.Основание = СтрШаблон(НСтр("ru = 'Поступление товаров и услуг № %1 от %2'"),
				НомерВходящегоДокумента,
				Формат(ДатаВходящегоДокумента, "ДФ='дд ММММ гггг'"));
	КонецЕсли;
	
	// Товары
	МассивСтрокТовары = Новый Массив;
	Если ДанныеXDTO.Свойство("Излишки")
		И ЗначениеЗаполнено(ДанныеXDTO.Излишки) Тогда
		Т_КС = Новый Соответствие;
		Т_КС.Вставить("Номенклатура", "Номенклатура");
		Т_КС.Вставить("Количество", "Количество");
		Т_КС.Вставить("ЕдиницаИзмерения", "ЕдиницаИзмерения");
		
		Т_КС.Вставить("Цена", "Цена");
		Т_КС.Вставить("Сумма", "Сумма");
		
		Для Каждого СтрокаXDTO Из ДанныеXDTO.Излишки Цикл
			СтруктураДанныхСтроки = Новый Структура;
			ЗаполнитьСтруктуруДанныхСтроки(Т_КС, СтрокаXDTO, СтруктураДанныхСтроки);
			СтруктураДанныхСтроки.Вставить("Коэффициент",1); 
			
			ПолученныеДанные.СуммаДокумента = ПолученныеДанные.СуммаДокумента + СтрокаXDTO.Сумма;
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	Если МассивСтрокТовары.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_ПТиУРасх_ОприходованиеТоваров_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УстановкаУчетнойПолитикиОрганизации(?(ДанныеИБ = Неопределено, ПолученныеДанные.Организация, ДанныеИБ.Организация));
	
	//Пересчет сумм по курсу валюты
	СтруктураКурсаВалюты = ОбщегоНазначенияБК.ПолучитьКурсВалюты(ПолученныеДанные.ДополнительныеСвойства.Валюта, ПолученныеДанные.Дата);
	КоэффициентПересчета = ?(СтруктураКурсаВалюты.Курс = 0, 1, СтруктураКурсаВалюты.Курс)
			/ ?(СтруктураКурсаВалюты.Кратность = 0, 1, СтруктураКурсаВалюты.Кратность);
	Если КоэффициентПересчета <> 1 Тогда
		ПолученныеДанные.СуммаДокумента = ПолученныеДанные.СуммаДокумента * КоэффициентПересчета;
		
		Для Каждого СтрокаТовары ИЗ ПолученныеДанные.Товары Цикл
			СтрокаТовары.Цена = СтрокаТовары.Цена * КоэффициентПересчета;
			СтрокаТовары.Сумма = СтрокаТовары.Сумма * КоэффициентПересчета;
		КонецЦикла;
	КонецЕсли;		
	Если ДанныеИБ <> Неопределено Тогда
		// Переносим свойства, не указанные в ПКС
		ЗаполнитьЗначенияСвойств(ДанныеИБ, ПолученныеДанные, "СуммаДокумента,Основание");
	КонецЕсли;
	
	ОприходованиеТоваров_ПередЗаписью(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации, КонвертацияСвойств);
КонецПроцедуры
#КонецОбласти
#Область ПТиУРасх_СписаниеТоваров
Процедура ДобавитьПКО_ПТиУРасх_СписаниеТоваров(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "ПТиУРасх_СписаниеТоваров";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.СписаниеТоваров;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПоступлениеТоваровУслуг";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_ПТиУРасх_СписаниеТоваров_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_ПТиУРасх_СписаниеТоваров_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_СписаниеТоваров";
	ПравилоКонвертации.ВариантИдентификации = "ПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Склад";
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Основание";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Коэффициент";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетУчетаБУ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_ПТиУРасх_СписаниеТоваров_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	// Заполнение данных шапки
	Номер = ДанныеXDTO.КлючевыеСвойства.Номер;
	ПолученныеДанные.Номер = Лев(Номер, 5) + "Р" + Сред(Номер, 7);
	ПолученныеДанные.Проведен = Истина;
	
	
	ДатаВходящегоДокумента = ?(ДанныеXDTO.Свойство("ДатаВходящегоДокумента"),ДанныеXDTO.ДатаВходящегоДокумента, Неопределено);
	НомерВходящегоДокумента = ?(ДанныеXDTO.Свойство("НомерВходящегоДокумента"),ДанныеXDTO.НомерВходящегоДокумента, Неопределено);
	Если ЗначениеЗаполнено(ДатаВходящегоДокумента) И ЗначениеЗаполнено(НомерВходящегоДокумента) Тогда
			ПолученныеДанные.Основание = СтрШаблон(НСтр("ru = 'Поступление товаров и услуг № %1 от %2'"),
				НомерВходящегоДокумента,
				Формат(ДатаВходящегоДокумента, "ДФ='дд ММММ гггг'"));
	КонецЕсли;
	
	//Валюта
	ИмяПКОВалюты = "";	
	Если ДанныеXDTO.Свойство("Валюта")
		И ЗначениеЗаполнено(ДанныеXDTO.Валюта) Тогда
		
		Если ДанныеXDTO.Валюта.Свойство("Ссылка") Тогда
			ИмяПКОВалюты = "Справочник_Валюты";
		Иначе
			ИмяПКОВалюты = "Справочник_Валюты_ИзСтруктуры";
		КонецЕсли;
	КонецЕсли;
	ПКОВалюты = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, ИмяПКОВалюты);
	Валюта = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, ДанныеXDTO.Валюта, ПКОВалюты,"ПолучитьСсылку");
	ПолученныеДанные.ДополнительныеСвойства.Вставить("Валюта", Валюта);
	
	МассивСтрокТовары = Новый Массив;
	
	Если ДанныеXDTO.Свойство("Недостачи")
		И ЗначениеЗаполнено(ДанныеXDTO.Недостачи) Тогда
	
		// Товары
		Т_КС = Новый Соответствие;
		Т_КС.Вставить("Номенклатура", "Номенклатура");
		Т_КС.Вставить("Количество", "Количество");
		Т_КС.Вставить("ЕдиницаИзмерения", "ЕдиницаИзмерения");
		
		Т_КС.Вставить("Цена", "Цена");
		Т_КС.Вставить("Себестоимость", "Сумма");
		
		ВТ_КС = Новый Соответствие;
		ВТ_КС.Вставить("Номенклатура", "Номенклатура");
		ВТ_КС.Вставить("Количество", "Количество");
		
		СтруктураКурсаВалюты = ОбщегоНазначенияБК.ПолучитьКурсВалюты(ПолученныеДанные.ДополнительныеСвойства.Валюта, ПолученныеДанные.Дата);
		КоэффициентПересчета = ?(СтруктураКурсаВалюты.Курс = 0, 1, СтруктураКурсаВалюты.Курс)
			/ ?(СтруктураКурсаВалюты.Кратность = 0, 1, СтруктураКурсаВалюты.Кратность);
		Для Каждого СтрокаXDTO Из ДанныеXDTO.Недостачи Цикл
		
			Если СтрокаXDTO.ВариантОтражения.Значение <> "НаПрочиеРасходы" Тогда
				Продолжить;
			КонецЕсли;
			ТипЗапасов = "";
			Если ЗначениеЗаполнено(СтрокаXDTO.ТипЗапасов) Тогда
				ТипЗапасов = СтрокаXDTO.ТипЗапасов.Значение;
			КонецЕсли;
			СтруктураДанныхСтроки = Новый Структура;
			// Заполнение ТЧ Товары
			
			ЗаполнитьСтруктуруДанныхСтроки(Т_КС, СтрокаXDTO, СтруктураДанныхСтроки);
			СтруктураДанныхСтроки.Вставить("Коэффициент",1); 
			// Счет учета заполняется сразу, если это комиссионный товар,
			// и автоматически после загрузки всех данных - в остальных случаях
			Если  ТипЗапасов = "КомиссионныеТовары" Тогда
				СтруктураДанныхСтроки.Вставить("СчетУчетаБУ",ПланыСчетов.Типовой.Вспомогательный); 
			КонецЕсли;
			
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
			
			ПолученныеДанные.СуммаДокумента = ПолученныеДанные.СуммаДокумента + СтруктураДанныхСтроки.Себестоимость;
				
		КонецЦикла;
	КонецЕсли;
	Если МассивСтрокТовары.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_ПТиУРасх_СписаниеТоваров_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УстановкаУчетнойПолитикиОрганизации(?(ДанныеИБ = Неопределено, ПолученныеДанные.Организация, ДанныеИБ.Организация));
	
	//Пересчет сумм по курсу валюты
	СтруктураКурсаВалюты = ОбщегоНазначенияБК.ПолучитьКурсВалюты(ПолученныеДанные.ДополнительныеСвойства.Валюта, ПолученныеДанные.Дата);
	КоэффициентПересчета = ?(СтруктураКурсаВалюты.Курс = 0, 1, СтруктураКурсаВалюты.Курс)
			/ ?(СтруктураКурсаВалюты.Кратность = 0, 1, СтруктураКурсаВалюты.Кратность);
	Если КоэффициентПересчета <> 1 Тогда
		ПолученныеДанные.СуммаДокумента = ПолученныеДанные.СуммаДокумента * КоэффициентПересчета;
	КонецЕсли;		
	
	Если ДанныеИБ <> Неопределено Тогда
		// Переносим свойства, не указанные в ПКС
		ЗаполнитьЗначенияСвойств(ДанныеИБ, ПолученныеДанные, "СуммаДокумента,Основание");
	КонецЕсли;
	
	СписаниеТоваров_ПередЗаписью(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации, КонвертацияСвойств);
КонецПроцедуры
#КонецОбласти
#Область Справочник_БанковскиеСчета_Получение
Процедура ДобавитьПКО_Справочник_БанковскиеСчета_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_БанковскиеСчета_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.БанковскиеСчета;
	ПравилоКонвертации.ОбъектФормата = "Справочник.БанковскиеСчета";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Справочник_БанковскиеСчета_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Банк";
	НоваяСтрока.СвойствоФормата = "Банк";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Банки";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "БанкДляРасчетов";
	НоваяСтрока.СвойствоФормата = "БанкДляРасчетов";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Банки";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидСчета";
	НоваяСтрока.СвойствоФормата = "ВидСчета";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "МесяцПрописью";
	НоваяСтрока.СвойствоФормата = "ВыводитьМесяцПрописью";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерСчета";
	НоваяСтрока.СвойствоФормата = "НомерСчета";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаБезДробнойЧасти";
	НоваяСтрока.СвойствоФормата = "ВыводитьСуммуБезКопеек";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ТекстКорреспондента";
	НоваяСтрока.СвойствоФормата = "ТекстКорреспондента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ТекстНазначения";
	НоваяСтрока.СвойствоФормата = "ТекстНазначения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДенежныхСредств";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Владелец";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("НомерСчета,Владелец");
КонецПроцедуры

Процедура ПКО_Справочник_БанковскиеСчета_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.ВидСчета = "Расчетный";
	
	Если ДанныеXDTO.Свойство("ВалютаДенежныхСредств")
		И ЗначениеЗаполнено(ДанныеXDTO.ВалютаДенежныхСредств) Тогда
		
		Если ДанныеXDTO.ВалютаДенежныхСредств.Свойство("Ссылка") Тогда
			ИмяПКО = "Справочник_Валюты";
		Иначе
			ИмяПКО = "Справочник_Валюты_ИзСтруктуры";
		КонецЕсли;
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ВалютаДенежныхСредств", Новый Структура("Значение, ИмяПКО", ДанныеXDTO.ВалютаДенежныхСредств, ИмяПКО));
	КонецЕсли;
	
	// Владелец
	// Выбираем ПКО в зависимости от типа владельца
	Если ДанныеXDTO.КлючевыеСвойства.Свойство("Владелец") Тогда
		
		Владелец = ДанныеXDTO.КлючевыеСвойства.Владелец;
		ИмяПКО = "Справочник_Контрагенты_Получение";
		Если Найти(Владелец.ТипЗначения, "ФизическиеЛица") > 0 Тогда
			ИмяПКО = "Справочник_ФизическиеЛица_Получение";
		ИначеЕсли Найти(Владелец.ТипЗначения, "Организация") > 0 Тогда
			ИмяПКО = "Справочник_Организации_Получение";
		КонецЕсли;	
		ПолученныеДанные.ДополнительныеСвойства.Вставить(
			"Владелец", Новый Структура("Значение,ИмяПКО", Владелец, ИмяПКО));
		
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_Валюты_ИзСтруктуры
Процедура ДобавитьПКО_Справочник_Валюты_ИзСтруктуры(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_Валюты_ИзСтруктуры";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.Валюты;
	ПравилоКонвертации.ОбъектФормата = "Справочник.Валюты";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ВариантИдентификации = "ПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Код";
	НоваяСтрока.СвойствоФормата = "Код";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НаименованиеПолное";
	НоваяСтрока.СвойствоФормата = "НаименованиеПолное";

	ПравилоКонвертации.ПоляПоиска.Добавить("Код");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ВидыДокументовФизическихЛиц
Процедура ДобавитьПКО_Справочник_ВидыДокументовФизическихЛиц(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_ВидыДокументовФизическихЛиц";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.ДокументыУдостоверяющиеЛичность;
	ПравилоКонвертации.ОбъектФормата = "Справочник.ВидыДокументовФизическихЛиц";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";

КонецПроцедуры
#КонецОбласти
#Область Справочник_ДоговорыКонтрагентов
Процедура ДобавитьПКО_Справочник_ДоговорыКонтрагентов(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_ДоговорыКонтрагентов";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.ДоговорыКонтрагентов;
	ПравилоКонвертации.ОбъектФормата = "Справочник.Договоры";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Справочник_ДоговорыКонтрагентов_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидДоговора";
	НоваяСтрока.СвойствоФормата = "ВидДоговора";
	НоваяСтрока.ПравилоКонвертацииСвойства = "ВидыДоговоров";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Владелец";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаДоговора";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаОкончанияДействияДоговора";
	НоваяСтрока.СвойствоФормата = "СрокДействия";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерДоговора";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("ВалютаВзаиморасчетов,ВидДоговора,Владелец,Организация");
КонецПроцедуры

Процедура ПКО_Справочник_ДоговорыКонтрагентов_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ДанныеXDTO.КлючевыеСвойства.Свойство("ВалютаВзаиморасчетов")
		И ЗначениеЗаполнено(ДанныеXDTO.КлючевыеСвойства.ВалютаВзаиморасчетов) Тогда
		
		Если ДанныеXDTO.КлючевыеСвойства.ВалютаВзаиморасчетов.Свойство("Ссылка") Тогда
			ИмяПКО = "Справочник_Валюты";
		Иначе
			ИмяПКО = "Справочник_Валюты_ИзСтруктуры";
		КонецЕсли;
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ВалютаВзаиморасчетов", Новый Структура("Значение, ИмяПКО", ДанныеXDTO.КлючевыеСвойства.ВалютаВзаиморасчетов, ИмяПКО));
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_ДоговорыКонтрагентов_ИзСтруктуры
Процедура ДобавитьПКО_Справочник_ДоговорыКонтрагентов_ИзСтруктуры(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_ДоговорыКонтрагентов_ИзСтруктуры";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.ДоговорыКонтрагентов;
	ПравилоКонвертации.ОбъектФормата = "Справочник.Договоры";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Справочник_ДоговорыКонтрагентов_ИзСтруктуры_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_ДоговорыКонтрагентовИзСтруктур";
	ПравилоКонвертации.ВариантИдентификации = "ПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидДоговора";
	НоваяСтрока.СвойствоФормата = "ВидДоговора";
	НоваяСтрока.ПравилоКонвертацииСвойства = "ВидыДоговоров";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Владелец";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаДоговора";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаОкончанияДействияДоговора";
	НоваяСтрока.СвойствоФормата = "СрокДействия";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерДоговора";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("ВалютаВзаиморасчетов,ВидДоговора,Владелец,Организация");
КонецПроцедуры

Процедура ПКО_Справочник_ДоговорыКонтрагентов_ИзСтруктуры_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ДанныеXDTO.КлючевыеСвойства.Свойство("ВалютаВзаиморасчетов")
		И ЗначениеЗаполнено(ДанныеXDTO.КлючевыеСвойства.ВалютаВзаиморасчетов) Тогда
		
		Если ДанныеXDTO.КлючевыеСвойства.ВалютаВзаиморасчетов.Свойство("Ссылка") Тогда
			ИмяПКО = "Справочник_Валюты";
		Иначе
			ИмяПКО = "Справочник_Валюты_ИзСтруктуры";
		КонецЕсли;
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ВалютаВзаиморасчетов", Новый Структура("Значение, ИмяПКО", ДанныеXDTO.КлючевыеСвойства.ВалютаВзаиморасчетов, ИмяПКО));
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_Кассы_Получение
Процедура ДобавитьПКО_Справочник_Кассы_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_Кассы_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.Кассы;
	ПравилоКонвертации.ОбъектФормата = "Справочник.Кассы";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДенежныхСредств";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты_ИзСтруктуры";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Владелец";
	НоваяСтрока.СвойствоФормата = "Владелец";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";

	ПравилоКонвертации.ПоляПоиска.Добавить("Владелец,Наименование");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Кассы_Получение_ИзСтруктуры
Процедура ДобавитьПКО_Справочник_Кассы_Получение_ИзСтруктуры(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_Кассы_Получение_ИзСтруктуры";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.Кассы;
	ПравилоКонвертации.ОбъектФормата = "Справочник.Кассы";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДенежныхСредств";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты_ИзСтруктуры";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Владелец";
	НоваяСтрока.СвойствоФормата = "Владелец";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";

	ПравилоКонвертации.ПоляПоиска.Добавить("Владелец,Наименование");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Контрагенты_Получение
Процедура ДобавитьПКО_Справочник_Контрагенты_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_Контрагенты_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.Контрагенты;
	ПравилоКонвертации.ОбъектФормата = "Справочник.Контрагенты";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Справочник_Контрагенты_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_Контрагенты_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ИдентификационныйКодЛичности";
	НоваяСтрока.СвойствоФормата = "ИНН";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КБЕ";
	НоваяСтрока.СвойствоФормата = "КБЕ";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КодПоОКПО";
	НоваяСтрока.СвойствоФормата = "ОКПО";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НаименованиеПолное";
	НоваяСтрока.СвойствоФормата = "НаименованиеПолное";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Родитель";
	НоваяСтрока.СвойствоФормата = "Группа";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_КонтрагентыГруппа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЮрФизЛицо";
	НоваяСтрока.СвойствоФормата = "ЮридическоеФизическоеЛицо";
	НоваяСтрока.ПравилоКонвертацииСвойства = "ЮридическоеФизическоеЛицо";

	ПравилоКонвертации.ПоляПоиска.Добавить("ИдентификационныйКодЛичности,ЮрФизЛицо");
КонецПроцедуры

Процедура ПКО_Справочник_Контрагенты_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ДанныеXDTO.Свойство("КонтактнаяИнформация")
		И ЗначениеЗаполнено(ДанныеXDTO.КонтактнаяИнформация) Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("КонтактнаяИнформация", ДанныеXDTO.КонтактнаяИнформация);
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Справочник_Контрагенты_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ПолученныеДанные.СтранаРезидентства = Справочники.КлассификаторСтранМира.Казахстан;
	
	Если ДанныеИБ <> Неопределено Тогда
		Если Не ЗначениеЗаполнено(ПолученныеДанные.Родитель) Тогда
			ПолученныеДанные.Родитель = ДанныеИБ.Родитель;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ДанныеИБ.СтранаРезидентства) Тогда
			ДанныеИБ.СтранаРезидентства = Справочники.КлассификаторСтранМира.Казахстан;
		КонецЕсли;
	КонецЕсли;
		                      	
	Если ДанныеИБ = Неопределено Тогда
		СсылкаНового = ПолученныеДанные.ПолучитьСсылкуНового();
	    Если НЕ ЗначениеЗаполнено(СсылкаНового) Тогда
	        СсылкаНового = Справочники.Контрагенты.ПолучитьСсылку();
	    КонецЕсли;
	    ПолученныеДанные.УстановитьСсылкуНового(СсылкаНового);	
	    СсылкаНаОбъект = СсылкаНового;
	Иначе
		СсылкаНаОбъект = ДанныеИБ.Ссылка;  
	КонецЕсли;
	
	ОбработатьКонтактнуюИнформациюПриПолучении(СсылкаНаОбъект, ПолученныеДанные);
КонецПроцедуры
#КонецОбласти
#Область Справочник_Номенклатура_Получение
Процедура ДобавитьПКО_Справочник_Номенклатура_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_Номенклатура_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.Номенклатура;
	ПравилоКонвертации.ОбъектФормата = "Справочник.Номенклатура";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Справочник_Номенклатура_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Артикул";
	НоваяСтрока.СвойствоФормата = "Артикул";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "БазоваяЕдиницаИзмерения";
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Код";
	НоваяСтрока.СвойствоФормата = "КодВПрограмме";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Описание";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НаименованиеПолное";
	НоваяСтрока.СвойствоФормата = "НаименованиеПолное";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Родитель";
	НоваяСтрока.СвойствоФормата = "Группа";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_НоменклатураГруппа_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтавкаНДС";
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КодТНВЭД";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Услуга";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Артикул,Наименование");
КонецПроцедуры

Процедура ПКО_Справочник_Номенклатура_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	// Сведения об алкогольной продукции
	Если ДанныеXDTO.Свойство("АлкогольнаяПродукция") И ДанныеXDTO.АлкогольнаяПродукция Тогда
		Если ДанныеXDTO.Свойство("ВидАлкогольнойПродукции") Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("ВидАлкогольнойПродукции", ДанныеXDTO.ВидАлкогольнойПродукции);
		КонецЕсли;
		Если ДанныеXDTO.Свойство("ОбъемДАЛ") Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("ОбъемДАЛ", ДанныеXDTO.ОбъемДАЛ);
		КонецЕсли;
	КонецЕсли;
	
	// ТипНоменклатуры
	ТипНоменклатуры = ДанныеXDTO.ТипНоменклатуры.Значение;
	Если ТипНоменклатуры = "Услуга" Или ТипНоменклатуры = "Работа" Тогда
		ПолученныеДанные.Услуга = Истина;
	КонецЕсли;
	
	Если ДанныеXDTO.Свойство("КодТНВЭД") И ЗначениеЗаполнено(ДанныеXDTO.КодТНВЭД) Тогда
		ПолученныеДанные.КодТНВЭД = ДанныеXDTO.КодТНВЭД.Код;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеXDTO.СтавкаНДС) Тогда
		
		ЗначениеСтавкиНДС = ДанныеXDTO.СтавкаНДС;
		
		НеОблагается = Ложь;
		Если ЗначениеСтавкиНДС = "БезНДС" Тогда 
			ЗначениеСтавкиНДС = "0";
			НеОблагается = Истина;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	СтавкиНДС.Ссылка КАК СтавкаНДС
		|ИЗ	
		|	Справочник.СтавкиНДС КАК СтавкиНДС
		|ГДЕ
		|	СтавкиНДС.Ставка = &Ставка
		|	И СтавкиНДС.ДляОсвобожденногоОборота = &НеОблагается
		|";
		
		Запрос.УстановитьПараметр("Ставка", Число(ЗначениеСтавкиНДС));
		Запрос.УстановитьПараметр("НеОблагается", НеОблагается);
		Результат = Запрос.Выполнить();
		
		Если Не Результат.Пустой() Тогда
			
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			ПолученныеДанные.СтавкаНДС = Выборка.СтавкаНДС;  
			
		Иначе
			
			НоваяСтавка = Справочники.СтавкиНДС.СоздатьЭлемент();
			НоваяСтавка.Ставка = Число(ЗначениеСтавкиНДС);
			НоваяСтавка.Наименование = "" + ?(НеОблагается, "Без НДС", ЗначениеСтавкиНДС) + "%";
			НоваяСтавка.ДляОсвобожденногоОборота = НеОблагается;
			НоваяСтавка.Записать();
			ПолученныеДанные.СтавкаНДС = НоваяСтавка;
			
		КонецЕсли;	
	
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_НоменклатураГруппа_Получение
Процедура ДобавитьПКО_Справочник_НоменклатураГруппа_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_НоменклатураГруппа_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.Номенклатура;
	ПравилоКонвертации.ОбъектФормата = "Справочник.НоменклатураГруппа";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Истина;
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Код";
	НоваяСтрока.СвойствоФормата = "КодВПрограмме";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Родитель";
	НоваяСтрока.СвойствоФормата = "Группа";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_НоменклатураГруппа_Получение";

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры
#КонецОбласти
#Область Справочник_НомераГТД_Получение
Процедура ДобавитьПКО_Справочник_НомераГТД_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_НомераГТД_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.НомераГТД;
	ПравилоКонвертации.ОбъектФормата = "Справочник.НомераГТД";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_НомераГТД";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаСертификатаПроисхожденияТовара";
	НоваяСтрока.СвойствоФормата = "ДатаСертификатаПроисхожденияТовара";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Код";
	НоваяСтрока.СвойствоФормата = "Код";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КодТНВЭД";
	НоваяСтрока.СвойствоФормата = "КодТНВЭД";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НаименованиеТовара";
	НоваяСтрока.СвойствоФормата = "НаименованиеТовара";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерСтрокиГТД";
	НоваяСтрока.СвойствоФормата = "НомерСтрокиГТД";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПризнакПроисхождения";
	НоваяСтрока.СвойствоФормата = "ПризнакПроисхождения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "РегистрационныйНомерЭСФ";
	НоваяСтрока.СвойствоФормата = "РегистрационныйНомерЭСФ";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СпособПроисхожденияТовара";
	НоваяСтрока.СвойствоФормата = "СпособПроисхожденияТовара";
	НоваяСтрока.ПравилоКонвертацииСвойства = "СпособыПроисхожденияТоваров";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтранаПроисхожденияТовара";
	НоваяСтрока.СвойствоФормата = "СтранаПроисхожденияТовара";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_КлассификаторСтранМира";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры
#КонецОбласти
#Область Справочник_НомераГТДИзСтроки_Получение
Процедура ДобавитьПКО_Справочник_НомераГТДИзСтроки_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_НомераГТДИзСтроки_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.НомераГТД;
	ПравилоКонвертации.ОбъектФормата = "";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Справочник_НомераГТДИзСтроки_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ВариантИдентификации = "ПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Код";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Код");
КонецПроцедуры

Процедура ПКО_Справочник_НомераГТДИзСтроки_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	НомерГТД = "";
	Если ДанныеXDTO.Свойство("Код") Тогда
		НомерГТД = ДанныеXDTO.Код;
	ИначеЕсли ДанныеXDTO.КлючевыеСвойства.Свойство("Код") Тогда
		НомерГТД = ДанныеXDTO.КлючевыеСвойства.Код;
	КонецЕсли;
	ПолученныеДанные.Код = НомерГТД;
КонецПроцедуры
#КонецОбласти
#Область Справочник_Организации_Получение
Процедура ДобавитьПКО_Справочник_Организации_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_Организации_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.Организации;
	ПравилоКонвертации.ОбъектФормата = "Справочник.Организации";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Справочник_Организации_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_Организации_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_Организации";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ГоловнаяОрганизация";
	НоваяСтрока.СвойствоФормата = "ГоловнаяОрганизация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаПостановкиНаУчетПоНДС";
	НоваяСтрока.СвойствоФормата = "СвидетельствоДатаВыдачи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаСвидетельстваПоНДС";
	НоваяСтрока.СвойствоФормата = "СвидетельствоДатаВыдачи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ИдентификационныйНомер";
	НоваяСтрока.СвойствоФормата = "ИНН";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ИндивидуальныйПредприниматель";
	НоваяСтрока.СвойствоФормата = "ФизическоеЛицо";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ФизическиеЛица_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КодПоОКПО";
	НоваяСтрока.СвойствоФормата = "ОКПО";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НаименованиеПолное";
	НоваяСтрока.СвойствоФормата = "НаименованиеПолное";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерСвидетельстваПоНДС";
	НоваяСтрока.СвойствоФормата = "СвидетельствоСерияНомер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ОсновнойБанковскийСчет";
	НоваяСтрока.СвойствоФормата = "ОсновнойБанковскийСчет";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Префикс";
	НоваяСтрока.СвойствоФормата = "Префикс";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЮрФизЛицо";
	НоваяСтрока.СвойствоФормата = "ЮридическоеФизическоеЛицо";
	НоваяСтрока.ПравилоКонвертацииСвойства = "ЮридическоеФизическоеЛицо";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СерияСвидетельстваПоНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("ИдентификационныйНомер");
КонецПроцедуры

Процедура ПКО_Справочник_Организации_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ДанныеXDTO.Свойство("КонтактнаяИнформация")
		И ЗначениеЗаполнено(ДанныеXDTO.КонтактнаяИнформация) Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("КонтактнаяИнформация", ДанныеXDTO.КонтактнаяИнформация);
	КонецЕсли;  
	
	Если ДанныеXDTO.Свойство("AdditionalInfo") И ТипЗнч(ДанныеXDTO.AdditionalInfo) = Тип("Структура") Тогда
		ДопДанные = ДанныеXDTO.AdditionalInfo; 	
		Если ДопДанные.Свойство("СерияСвидетельстваПоНДС") Тогда
			ПолученныеДанные.СерияСвидетельстваПоНДС = ДопДанные.СерияСвидетельстваПоНДС;
		КонецЕсли;		          	
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Справочник_Организации_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если Не ЗначениеЗаполнено(ПолученныеДанные.ГоловнаяОрганизация) Тогда
		ПолученныеДанные.ГоловнаяОрганизация = ПолученныеДанные.Ссылка;
	КонецЕсли;
	
	Если ДанныеИБ = Неопределено Тогда
		СсылкаНового = ПолученныеДанные.ПолучитьСсылкуНового();
	    Если НЕ ЗначениеЗаполнено(СсылкаНового) Тогда
	        СсылкаНового = Справочники.Организации.ПолучитьСсылку();
	    КонецЕсли;
	    ПолученныеДанные.УстановитьСсылкуНового(СсылкаНового);	
	    СсылкаНаОбъект = СсылкаНового;
	Иначе
		СсылкаНаОбъект = ДанныеИБ.Ссылка;  
	КонецЕсли;
	
	ОбработатьКонтактнуюИнформациюПриПолучении(СсылкаНаОбъект, ПолученныеДанные);
КонецПроцедуры
#КонецОбласти
#Область Справочник_Подразделения
Процедура ДобавитьПКО_Справочник_Подразделения(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_Подразделения";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.ПодразделенияОрганизаций;
	ПравилоКонвертации.ОбъектФормата = "Справочник.Подразделения";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ВариантИдентификации = "ПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ПодразделенияОрганизаций
Процедура ДобавитьПКО_Справочник_ПодразделенияОрганизаций(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_ПодразделенияОрганизаций";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.ПодразделенияОрганизаций;
	ПравилоКонвертации.ОбъектФормата = "Справочник.ПодразделенияОрганизаций";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Владелец";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ИдентификационныйНомер";
	НоваяСтрока.СвойствоФормата = "ИНН";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НаименованиеПолное";
	НоваяСтрока.СвойствоФормата = "НаименованиеПолное";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЯвляетсяСтруктурнымПодразделением";
	НоваяСтрока.СвойствоФормата = "ОбособленноеПодразделение";

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование,Родитель");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Склады_Получение
Процедура ДобавитьПКО_Справочник_Склады_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_Склады_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.Склады;
	ПравилоКонвертации.ОбъектФормата = "Справочник.Склады";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_Склады";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Родитель";
	НоваяСтрока.СвойствоФормата = "Группа";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СкладыГруппа";

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры
#КонецОбласти
#Область Справочник_СпецификацииНоменклатуры_Получение
Процедура ДобавитьПКО_Справочник_СпецификацииНоменклатуры_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_СпецификацииНоменклатуры_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.СпецификацииНоменклатуры;
	ПравилоКонвертации.ОбъектФормата = "Справочник.СпецификацииНоменклатуры";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Справочник_СпецификацииНоменклатуры_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Владелец";
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Код";
	НоваяСтрока.СвойствоФормата = "КодВПрограмме";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Количество";
	НоваяСтрока.СвойствоФормата = "Количество";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ИсходныеКомплектующие", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ИсходныеКомплектующие;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Получение";

	ПравилоКонвертации.ПоляПоиска.Добавить("Код,Наименование,Владелец");
КонецПроцедуры

Процедура ПКО_Справочник_СпецификацииНоменклатуры_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ДанныеXDTO.Количество() = 1 Тогда
		Возврат;
	КонецЕсли;
	
	ПравилаЗаполнения = Новый Соответствие;
	ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
	ПравилаЗаполнения.Вставить("Количество", "Количество");
	
	//Товары 
	МассивСтрокТовары = Новый Массив;
	Если ДанныеXDTO.Свойство("Товары") И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда 		
		Для Каждого Строка Из ДанныеXDTO.Товары Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	
	Если МассивСтрокТовары.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ИсходныеКомплектующие", МассивСтрокТовары);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_СпособыОтраженияЗарплатыВБухУчете_П_ЗУП
Процедура ДобавитьПКО_Справочник_СпособыОтраженияЗарплатыВБухУчете_П_ЗУП(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_СпособыОтраженияЗарплатыВБухУчете_П_ЗУП";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.СпособыОтраженияЗарплатыВБухУчете;
	ПравилоКонвертации.ОбъектФормата = "Справочник.СпособыОтраженияЗарплатыВФинансовомУчете";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_СпособыОтраженияЗарплатыВБухУчете_П_ЗУП_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Родитель";
	НоваяСтрока.СвойствоФормата = "Группа";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СпособыОтраженияЗарплатыВБухУчетеГруппа";

КонецПроцедуры

Процедура ПКО_Справочник_СпособыОтраженияЗарплатыВБухУчете_П_ЗУП_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если ДанныеИБ <> Неопределено Тогда
		Если Не ЗначениеЗаполнено(ПолученныеДанные.Родитель) Тогда
			ПолученныеДанные.Родитель = ДанныеИБ.Родитель;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_ФизическиеЛица_Получение
Процедура ДобавитьПКО_Справочник_ФизическиеЛица_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_ФизическиеЛица_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.ФизическиеЛица;
	ПравилоКонвертации.ОбъектФормата = "Справочник.ФизическиеЛица";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Справочник_ФизическиеЛица_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_ФизическиеЛица_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаРождения";
	НоваяСтрока.СвойствоФормата = "ДатаРождения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ИдентификационныйКодЛичности";
	НоваяСтрока.СвойствоФормата = "ИНН";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "ФИО";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Пол";
	НоваяСтрока.СвойствоФормата = "Пол";
	НоваяСтрока.ПравилоКонвертацииСвойства = "ПолФизическогоЛица";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Родитель";
	НоваяСтрока.СвойствоФормата = "Группа";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ФизическиеЛицаГруппа_Отправка";

	ПравилоКонвертации.ПоляПоиска.Добавить("ИдентификационныйКодЛичности,ЭтоГруппа");
	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование,ДатаРождения,ЭтоГруппа");
	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование,ЭтоГруппа");
КонецПроцедуры

Процедура ПКО_Справочник_ФизическиеЛица_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	//ПолучитьКонтактнуюИнформациюФизическогоЛица(ДанныеXDTO, ПолученныеДанные);
	
	Если ДанныеXDTO.Свойство("КонтактнаяИнформация")
		И ЗначениеЗаполнено(ДанныеXDTO.КонтактнаяИнформация) Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("КонтактнаяИнформация", ДанныеXDTO.КонтактнаяИнформация);
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Справочник_ФизическиеЛица_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ФизЛицоСсылка = ?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка);
	
	ОбработатьКонтактнуюИнформациюПриПолучении(ФизЛицоСсылка, ПолученныеДанные);
	
	Если СвойствоФорматаОбмена(КомпонентыОбмена, "Справочник.ФизическиеЛица.ДанныеФИО")
		И ПолученныеДанные.ДополнительныеСвойства.Свойство("ПодробныеДанныеФИО") Тогда	
		
		НаборЗаписейФИО = РегистрыСведений.ФИОФизЛиц.СоздатьНаборЗаписей();
		НаборЗаписейФИО.Отбор.ФизическоеЛицо.Установить(ФизЛицоСсылка);
		Для Каждого СтрокаФИО Из ПолученныеДанные.ДополнительныеСвойства.ПодробныеДанныеФИО Цикл
			НовЗапись = НаборЗаписейФИО.Добавить();
			ЗаполнитьЗначенияСвойств(НовЗапись, СтрокаФИО);
			НовЗапись.ФизЛицо = ФизЛицоСсылка;
			НовЗапись.Период = СтрокаФИО.НачалоПериода;
		КонецЦикла;
		НаборЗаписейФИО.ОбменДанными.Загрузка = Истина;
		НаборЗаписейФИО.Записать();
		
	Иначе 
		ФИОСтрокой = ПолученныеДанные.Наименование;
		СтруктураФИО = ФизическиеЛицаКлиентСервер.ЧастиИмени(ФИОСтрокой);
		ДанныеФИО = РегистрыСведений.ФИОФизЛиц.СрезПоследних(,Новый Структура("ФизЛицо", ФизЛицоСсылка));
		Если ДанныеФИО.Количество() > 0 
			И ДанныеФИО[0].Фамилия = СтруктураФИО.Фамилия
			И ДанныеФИО[0].Имя = СтруктураФИО.Имя
			И ДанныеФИО[0].Отчество = СтруктураФИО.Отчество Тогда
			Возврат;
		КонецЕсли;
		НаборЗаписейФИО = РегистрыСведений.ФИОФизЛиц.СоздатьНаборЗаписей();
		НаборЗаписейФИО.Отбор.ФизЛицо.Установить(ФизЛицоСсылка);
	
		Если СтруктураФИО.Фамилия = Неопределено 
			И СтруктураФИО.Имя = Неопределено
			И СтруктураФИО.Отчество = Неопределено Тогда
			НаборЗаписейФИО.Записать();
			Возврат;
		КонецЕсли;
		НовЗапись = НаборЗаписейФИО.Добавить();
		ЗаполнитьЗначенияСвойств(НовЗапись, СтруктураФИО, "Фамилия, Имя, Отчество");
		НовЗапись.ФизЛицо = ФизЛицоСсылка;
		НовЗапись.Период = ТекущаяДатаСеанса();
		
		НаборЗаписейФИО.ОбменДанными.Загрузка = Истина;
		НаборЗаписейФИО.Записать();
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#КонецОбласти
#Область ОтправкаИПолучение
#Область Документ_ТаможеннаяДекларация_Отправка
Процедура ДобавитьПКО_Документ_ТаможеннаяДекларация_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ТаможеннаяДекларация_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ГТДИмпорт;
	ПравилоКонвертации.ОбъектФормата = "Документ.ТаможеннаяДекларация";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ТаможеннаяДекларация_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_ТаможеннаяДекларация_Отправка_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_ТаможеннаяДекларация";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КратностьВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "КратностьВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КратностьДокумента";
	НоваяСтрока.СвойствоФормата = "КратностьДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КурсВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "КурсВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КурсДокумента";
	НоваяСтрока.СвойствоФормата = "КурсДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтруктурноеПодразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерДекларации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Разделы", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Разделы;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НДСВВалюте";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерРаздела";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ПошлинаВВалюте";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "СправочникСсылка.СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаПошлины";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ТаможеннаяСтоимость";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ДокументПоступления";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Документ_ПоступлениеТоваровУслуг_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерРаздела";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерСтрокиДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтранаПроисхождения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_КлассификаторСтранМира";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаПошлины";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ТаможеннаяСтоимость";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_ТаможеннаяДекларация_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.Вставить("НомерДекларации", ДанныеИБ.НомерГТД);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Номенклатура,
	|	Количество,
	|	ФактурнаяСтоимость КАК ТаможеннаяСтоимость,
	|   СуммаПошлины,
	|   СуммаНДС,
	|   ДокументПартии КАК ДокументПоступления,
	|   НомерСтроки КАК НомерСтрокиДокумента,
	|   НомерРаздела КАК НомерРаздела,
	|   СтранаПроисхождения КАК СтранаПроисхождения
	|ИЗ Документ.ГТДИмпорт.Товары
	|ГДЕ Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Товары = Запрос.Выполнить().Выгрузить();
	ДанныеXDTO.Вставить("Товары", Товары);
	
	Разделы = ДанныеИБ.Разделы.Выгрузить();
	Разделы.Колонки.Добавить("НомерРаздела");
	Для Каждого Строка Из Разделы Цикл
		Строка.НомерРаздела = Строка.НомерСтроки;
	КонецЦикла;
	ДанныеXDTO.Вставить("Разделы", Разделы);
КонецПроцедуры

Процедура ПКО_Документ_ТаможеннаяДекларация_Отправка_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ДанныеXDTO.Свойство("Договор") И ЗначениеЗаполнено(ДанныеXDTO.Договор) Тогда
		Если ТипЗнч(ДанныеXDTO.Договор) = Тип("Структура") И 
			ДанныеXDTO.Договор.Свойство("Ссылка") = Ложь Тогда
			ИмяПКО = "Справочник_ДоговорыКонтрагентов_ИзСтруктуры";
		Иначе
			ИмяПКО = "Справочник_ДоговорыКонтрагентов";
		КонецЕсли;
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ДоговорКонтрагентаРегл", Новый Структура("Значение, ИмяПКО", ДанныеXDTO.Договор, ИмяПКО));
	КонецЕсли;
	Если ДанныеXDTO.Свойство("НомерДекларации") И ЗначениеЗаполнено(ДанныеXDTO.НомерДекларации) Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("НомерГТД", ДанныеXDTO.НомерДекларации);
	КонецЕсли;
	//Товары
	МассивСтрокТовары = Новый Массив;
	Если ДанныеXDTO.Свойство("Товары")
		И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
	
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполнения.Вставить("ДокументПоступления", "ДокументПартии");
		ПравилаЗаполнения.Вставить("Количество", "Количество");
		ПравилаЗаполнения.Вставить("СуммаНДС", "СуммаНДС");
		ПравилаЗаполнения.Вставить("СуммаПошлины", "СуммаПошлины");
		ПравилаЗаполнения.Вставить("ТаможеннаяСтоимость", "ФактурнаяСтоимость");
		ПравилаЗаполнения.Вставить("НомерРаздела", "НомерРаздела");
		ПравилаЗаполнения.Вставить("СтранаПроисхождения", "СтранаПроисхождения");
		Для Каждого Строка Из ДанныеXDTO.Товары Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
		
		Если МассивСтрокТовары.Количество() > 0 Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
		КонецЕсли;
	КонецЕсли;
	
	//Разделы
	МассивСтрокРазделы = Новый Массив;
	Если ДанныеXDTO.Свойство("Разделы")
		И ЗначениеЗаполнено(ДанныеXDTO.Разделы) Тогда
	
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("СтавкаНДС", "СтавкаНДС");
		ПравилаЗаполнения.Вставить("СтавкаПошлины", "СтавкаПошлины");
		ПравилаЗаполнения.Вставить("СуммаНДС", "СуммаНДС");
		ПравилаЗаполнения.Вставить("СуммаПошлины", "СуммаПошлины");
		ПравилаЗаполнения.Вставить("ТаможеннаяСтоимость", "ТаможеннаяСтоимость");
		Для Каждого Строка Из ДанныеXDTO.Разделы Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			МассивСтрокРазделы.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
		
		Если МассивСтрокРазделы.Количество() > 0 Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("Разделы", МассивСтрокРазделы);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_Банки
Процедура ДобавитьПКО_Справочник_Банки(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_Банки";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.Банки;
	ПравилоКонвертации.ОбъектФормата = "Справочник.Банки";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Адрес";
	НоваяСтрока.СвойствоФормата = "Адрес";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "БИК";
	НоваяСтрока.СвойствоФормата = "БИК";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Город";
	НоваяСтрока.СвойствоФормата = "Город";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КоррСчет";
	НоваяСтрока.СвойствоФормата = "КоррСчет";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Телефоны";
	НоваяСтрока.СвойствоФормата = "Телефоны";

	ПравилоКонвертации.ПоляПоиска.Добавить("Код,КоррСчет,Наименование");
	ПравилоКонвертации.ПоляПоиска.Добавить("Код");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Валюты
Процедура ДобавитьПКО_Справочник_Валюты(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_Валюты";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.Валюты;
	ПравилоКонвертации.ОбъектФормата = "Справочник.Валюты";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ВариантИдентификации = "ПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Код";
	НоваяСтрока.СвойствоФормата = "Код";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НаименованиеПолное";
	НоваяСтрока.СвойствоФормата = "НаименованиеПолное";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПараметрыПрописиНаРусском";
	НоваяСтрока.СвойствоФормата = "ПараметрыПрописиНаРусском";

	ПравилоКонвертации.ПоляПоиска.Добавить("Код");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ВидыПоступления
Процедура ДобавитьПКО_Справочник_ВидыПоступления(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_ВидыПоступления";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.ВидыПоступления;
	ПравилоКонвертации.ОбъектФормата = "Справочник.ВидыПоступления";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Код";
	НоваяСтрока.СвойствоФормата = "Код";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПолноеНаименование";
	НоваяСтрока.СвойствоФормата = "ПолноеНаименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПризнакКорректировки";
	НоваяСтрока.СвойствоФормата = "ПризнакКорректировки";

	ПравилоКонвертации.ПоляПоиска.Добавить("Код,Наименование,ПолноеНаименование");
	ПравилоКонвертации.ПоляПоиска.Добавить("Код,Наименование");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ВидыРеализации
Процедура ДобавитьПКО_Справочник_ВидыРеализации(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_ВидыРеализации";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.ВидыРеализации;
	ПравилоКонвертации.ОбъектФормата = "Справочник.ВидыРеализации";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Код";
	НоваяСтрока.СвойствоФормата = "Код";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПолноеНаименование";
	НоваяСтрока.СвойствоФормата = "ПолноеНаименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПризнакКорректировки";
	НоваяСтрока.СвойствоФормата = "ПризнакКорректировки";

	ПравилоКонвертации.ПоляПоиска.Добавить("Код,Наименование,ПолноеНаименование");
	ПравилоКонвертации.ПоляПоиска.Добавить("Код,Наименование");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ЕдиницыИзмерения
Процедура ДобавитьПКО_Справочник_ЕдиницыИзмерения(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_ЕдиницыИзмерения";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.КлассификаторЕдиницИзмерения;
	ПравилоКонвертации.ОбъектФормата = "Справочник.ЕдиницыИзмерения";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Код";
	НоваяСтрока.СвойствоФормата = "Код";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НаименованиеПолное";
	НоваяСтрока.СвойствоФормата = "НаименованиеПолное";

	ПравилоКонвертации.ПоляПоиска.Добавить("Код");
КонецПроцедуры
#КонецОбласти
#Область Справочник_КлассификаторСтранМира
Процедура ДобавитьПКО_Справочник_КлассификаторСтранМира(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_КлассификаторСтранМира";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.КлассификаторСтранМира;
	ПравилоКонвертации.ОбъектФормата = "Справочник.СтраныМира";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Код";
	НоваяСтрока.СвойствоФормата = "Код";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КодАльфа2";
	НоваяСтрока.СвойствоФормата = "КодАльфа2";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КодАльфа3";
	НоваяСтрока.СвойствоФормата = "КодАльфа3";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НаименованиеПолное";
	НоваяСтрока.СвойствоФормата = "НаименованиеПолное";

	ПравилоКонвертации.ПоляПоиска.Добавить("Код,Наименование");
КонецПроцедуры
#КонецОбласти
#Область Справочник_КонтрагентыГруппа
Процедура ДобавитьПКО_Справочник_КонтрагентыГруппа(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_КонтрагентыГруппа";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.Контрагенты;
	ПравилоКонвертации.ОбъектФормата = "Справочник.КонтрагентыГруппа";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Истина;
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Родитель";
	НоваяСтрока.СвойствоФормата = "Группа";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_КонтрагентыГруппа";

КонецПроцедуры
#КонецОбласти
#Область Справочник_Пользователи
Процедура ДобавитьПКО_Справочник_Пользователи(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_Пользователи";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.Пользователи;
	ПравилоКонвертации.ОбъектФормата = "Справочник.Пользователи";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры
#КонецОбласти
#Область Справочник_СкладыГруппа
Процедура ДобавитьПКО_Справочник_СкладыГруппа(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_СкладыГруппа";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.Склады;
	ПравилоКонвертации.ОбъектФормата = "Справочник.СкладыГруппа";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Истина;
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Родитель";
	НоваяСтрока.СвойствоФормата = "Группа";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СкладыГруппа";

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры
#КонецОбласти
#Область Справочник_СпособыОтраженияЗарплатыВБухУчетеГруппа
Процедура ДобавитьПКО_Справочник_СпособыОтраженияЗарплатыВБухУчетеГруппа(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_СпособыОтраженияЗарплатыВБухУчетеГруппа";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.СпособыОтраженияЗарплатыВБухУчете;
	ПравилоКонвертации.ОбъектФормата = "Справочник.СпособыОтраженияЗарплатыВФинансовомУчетеГруппа";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Истина;
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Родитель";
	НоваяСтрока.СвойствоФормата = "Группа";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СпособыОтраженияЗарплатыВБухУчетеГруппа";

КонецПроцедуры
#КонецОбласти
#Область Справочник_СтатьиДДС
Процедура ДобавитьПКО_Справочник_СтатьиДДС(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_СтатьиДДС";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.СтатьиДвиженияДенежныхСредств;
	ПравилоКонвертации.ОбъектФормата = "Справочник.СтатьиДДС";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Код";
	НоваяСтрока.СвойствоФормата = "КодВПрограмме";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";

	ПравилоКонвертации.ПоляПоиска.Добавить("Код,Наименование");
	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ТипыЦен
Процедура ДобавитьПКО_Справочник_ТипыЦен(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_ТипыЦен";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.ТипыЦенНоменклатуры;
	ПравилоКонвертации.ОбъектФормата = "Справочник.ТипыЦен";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_ТипыЦен_ПриОтправкеДанных";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Справочник_ТипыЦен_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ОкруглятьВБольшуюСторону";
	НоваяСтрока.СвойствоФормата = "ОкруглятьВБольшуюСторону";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЦенаВключаетНДС";
	НоваяСтрока.СвойствоФормата = "ЦенаВключаетНДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВалютаЦены";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаЦены";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("ВалютаЦены,Наименование");
КонецПроцедуры

Процедура ПКО_Справочник_ТипыЦен_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.КлючевыеСвойства.Вставить("ВалютаЦены", Новый Структура("Значение, ИмяПКО", ДанныеИБ.ВалютаЦены, "Справочник_Валюты"));
КонецПроцедуры

Процедура ПКО_Справочник_ТипыЦен_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ДанныеXDTO.КлючевыеСвойства.Свойство("ВалютаЦены")
		И ЗначениеЗаполнено(ДанныеXDTO.КлючевыеСвойства.ВалютаЦены) Тогда
		
		Если ДанныеXDTO.КлючевыеСвойства.ВалютаЦены.Свойство("Ссылка") Тогда
			ИмяПКО = "Справочник_Валюты";
		Иначе
			ИмяПКО = "Справочник_Валюты_ИзСтруктуры";
		КонецЕсли;
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ВалютаЦены", Новый Структура("Значение, ИмяПКО", ДанныеXDTO.КлючевыеСвойства.ВалютаЦены, ИмяПКО));
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_ФизическиеЛицаГруппа_Отправка
Процедура ДобавитьПКО_Справочник_ФизическиеЛицаГруппа_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_ФизическиеЛицаГруппа_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.ФизическиеЛица;
	ПравилоКонвертации.ОбъектФормата = "Справочник.ФизическиеЛицаГруппа";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Истина;
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Родитель";
	НоваяСтрока.СвойствоФормата = "Группа";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ФизическиеЛицаГруппа_Отправка";

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры
#КонецОбласти
#КонецОбласти

#КонецОбласти
#Область ПКПД
// Заполняет таблицу правил конвертации предопределенных данных.
//
// Параметры:
//  НаправлениеОбмена - строка ("Отправка" либо "Получение").
//  ПравилаКонвертации - таблица значений, в которую будут добавлены правила. 
Процедура ЗаполнитьПравилаКонвертацииПредопределенныхДанных(НаправлениеОбмена, ПравилаКонвертации) Экспорт
	Если НаправлениеОбмена = "Отправка" Тогда
		// ВидыКИ_Отправка.
		ПравилоКонвертации = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД = "ВидыКИ_Отправка";
		ПравилоКонвертации.ТипДанных = Метаданные.Справочники.ВидыКонтактнойИнформации;
		ПравилоКонвертации.ТипXDTO = "ВидыКИ";
	
		ЗначенияДляОтправки = Новый Соответствие;
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.АдресОрганизацииПочтовый, "ПочтовыйАдрес");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации, "Телефон");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ТелефонПоЮрАдресуОрганизации, "Телефон");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ФаксОрганизации, "Факс");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации, "ФактическийАдрес");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации, "ЮридическийАдрес");
		ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	
		// ВидыОперацийСБДСПрочее_Отправка.
		ПравилоКонвертации = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД = "ВидыОперацийСБДСПрочее_Отправка";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидыОперацийППИсходящее;
		ПравилоКонвертации.ТипXDTO = "ВидыОперацийСБДСПрочее";
	
		ЗначенияДляОтправки = Новый Соответствие;
		ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийППИсходящее.ПрочееСписаниеБезналичныхДенежныхСредств, "ПрочееСписание");
		ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийППИсходящее.ПрочиеРасчетыСКонтрагентами, "ВнутренняяПередача");
		ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	
		// ТипыСкладов.
		ПравилоКонвертации = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД = "ТипыСкладов";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ПолФизическихЛиц;
		ПравилоКонвертации.ТипXDTO = "ТипыСкладов";
	
		ЗначенияДляОтправки = Новый Соответствие;
		ЗначенияДляОтправки.Вставить(Перечисления.ПолФизическихЛиц.Мужской, "Оптовый");
		ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	КонецЕсли;
	Если НаправлениеОбмена = "Получение" Тогда
		// ВидыОпераций_ВозвратПоставщику.
		ПравилоКонвертации = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД = "ВидыОпераций_ВозвратПоставщику";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидыОперацийВозвратТоваровПоставщику;
		ПравилоКонвертации.ТипXDTO = "ВидыОперацийВозвратПоставщику";
	
		ЗначенияДляПолучения = Новый Соответствие;
		ЗначенияДляПолучения.Вставить("ВозвратКомитенту", Перечисления.ВидыОперацийВозвратТоваровПоставщику.Покупка);
		ЗначенияДляПолучения.Вставить("ВозвратПоставщику", Перечисления.ВидыОперацийВозвратТоваровПоставщику.Покупка);
		ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;
	
		// ВидыОпераций_КорректировкаДолга_Получение.
		ПравилоКонвертации = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД = "ВидыОпераций_КорректировкаДолга_Получение";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидыОперацийКорректировкаДолга;
		ПравилоКонвертации.ТипXDTO = "ВидыОперацийКорректировкаДолга";
	
		ЗначенияДляПолучения = Новый Соответствие;
		ЗначенияДляПолучения.Вставить("ПереносЗадолженности", Перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности);
		ЗначенияДляПолучения.Вставить("ПроведениеВзаимозачета", Перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета);
		ЗначенияДляПолучения.Вставить("СписаниеЗадолженности", Перечисления.ВидыОперацийКорректировкаДолга.СписаниеЗадолженности);
		ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;
	
		// ВидыОпераций_ОплатаПлатежнойКартой.
		ПравилоКонвертации = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД = "ВидыОпераций_ОплатаПлатежнойКартой";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидыОперацийОплатаОтПокупателяПлатежнойКартой;
		ПравилоКонвертации.ТипXDTO = "ВидыОперацийПоПлатежнойКарте";
	
		ЗначенияДляПолучения = Новый Соответствие;
		ЗначенияДляПолучения.Вставить("ВозвратОплатыКлиентуНаПлатежнуюКарту", Перечисления.ВидыОперацийОплатаОтПокупателяПлатежнойКартой.ВозвратДенежныхСредствПокупателю);
		ЗначенияДляПолучения.Вставить("ОплатаОтКлиентаПлатежнойКартой", Перечисления.ВидыОперацийОплатаОтПокупателяПлатежнойКартой.ОплатаПокупателя);
		ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;
	
		// ВидыОпераций_РТиУ.
		ПравилоКонвертации = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД = "ВидыОпераций_РТиУ";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидыОперацийРеализацияТоваров;
		ПравилоКонвертации.ТипXDTO = "ВидыОперацийРеализацияТоваровУслуг";
	
		ЗначенияДляПолучения = Новый Соответствие;
		ЗначенияДляПолучения.Вставить("ПередачаНаКомиссию", Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия);
		ЗначенияДляПолучения.Вставить("РеализацияКлиенту", Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия);
		ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;
	
		// ВидыОперацийПоступленияТоваров.
		ПравилоКонвертации = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД = "ВидыОперацийПоступленияТоваров";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидыОперацийПоступлениеТоваровУслуг;
		ПравилоКонвертации.ТипXDTO = "ВидыОперацийПоступленияТоваров";
	
		ЗначенияДляПолучения = Новый Соответствие;
		ЗначенияДляПолучения.Вставить("ЗакупкаПоИмпорту", Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомисия);
		ЗначенияДляПолучения.Вставить("ПокупкаУПоставщика", Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомисия);
		ЗначенияДляПолучения.Вставить("ПриемНаКомиссию", Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомисия);
		ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;
	
		// ВидыОперацийСБДСПрочее_Получение.
		ПравилоКонвертации = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД = "ВидыОперацийСБДСПрочее_Получение";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидыОперацийППИсходящее;
		ПравилоКонвертации.ТипXDTO = "ВидыОперацийСБДСПрочее";
	
		ЗначенияДляПолучения = Новый Соответствие;
		ЗначенияДляПолучения.Вставить("ВнутренняяПередача", Перечисления.ВидыОперацийППИсходящее.ПрочееСписаниеБезналичныхДенежныхСредств);
		ЗначенияДляПолучения.Вставить("ПрочееСписание", Перечисления.ВидыОперацийППИсходящее.ПрочееСписаниеБезналичныхДенежныхСредств);
		ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;
	
		// ВидыЭСФ.
		ПравилоКонвертации = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД = "ВидыЭСФ";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидыЭСФ;
		ПравилоКонвертации.ТипXDTO = "ВидыЭСФ";
	
		ЗначенияДляПолучения = Новый Соответствие;
		ЗначенияДляПолучения.Вставить("Дополнительный", Перечисления.ВидыЭСФ.Дополнительный);
		ЗначенияДляПолучения.Вставить("Исправленный", Перечисления.ВидыЭСФ.Исправленный);
		ЗначенияДляПолучения.Вставить("Обычный", Перечисления.ВидыЭСФ.Обычный);
		ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;
	
		// НаправленияЭСФ.
		ПравилоКонвертации = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД = "НаправленияЭСФ";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.НаправленияЭСФ;
		ПравилоКонвертации.ТипXDTO = "НаправленияЭСФ";
	
		ЗначенияДляПолучения = Новый Соответствие;
		ЗначенияДляПолучения.Вставить("Входящий", Перечисления.НаправленияЭСФ.Входящий);
		ЗначенияДляПолучения.Вставить("Исходящий", Перечисления.НаправленияЭСФ.Исходящий);
		ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;
	
		// ПеречислениеСсылка_ВидыСчетовФактур.
		ПравилоКонвертации = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД = "ПеречислениеСсылка_ВидыСчетовФактур";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидыСчетовФактур;
		ПравилоКонвертации.ТипXDTO = "ВидыСчетаФактуры";
	
		ЗначенияДляПолучения = Новый Соответствие;
		ЗначенияДляПолучения.Вставить("Корректировочный", Перечисления.ВидыСчетовФактур.Дополнительный);
		ЗначенияДляПолучения.Вставить("НаАванс", Перечисления.ВидыСчетовФактур.Обычный);
		ЗначенияДляПолучения.Вставить("НаАвансКомитента", Перечисления.ВидыСчетовФактур.Обычный);
		ЗначенияДляПолучения.Вставить("НалоговыйАгент", Перечисления.ВидыСчетовФактур.Обычный);
		ЗначенияДляПолучения.Вставить("НаПоступление", Перечисления.ВидыСчетовФактур.Обычный);
		ЗначенияДляПолучения.Вставить("НаРеализацию", Перечисления.ВидыСчетовФактур.Обычный);
		ЗначенияДляПолучения.Вставить("СуммовыеРазницы", Перечисления.ВидыСчетовФактур.Обычный);
		ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;
	
		// ПользовательскиеСтатусыЭСФ.
		ПравилоКонвертации = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД = "ПользовательскиеСтатусыЭСФ";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ПользовательскиеСтатусыЭСФ;
		ПравилоКонвертации.ТипXDTO = "ПользовательскиеСтатусыЭСФ";
	
		ЗначенияДляПолучения = Новый Соответствие;
		ЗначенияДляПолучения.Вставить("Отклонен", Перечисления.ПользовательскиеСтатусыЭСФ.Отклонен);
		ЗначенияДляПолучения.Вставить("Принят", Перечисления.ПользовательскиеСтатусыЭСФ.Принят);
		ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;
	
		// ПричиныВыпискиСФНаБумаге.
		ПравилоКонвертации = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД = "ПричиныВыпискиСФНаБумаге";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ПричиныВыпискиСФНаБумаге;
		ПравилоКонвертации.ТипXDTO = "ПричиныВыпискиСФНаБумаге";
	
		ЗначенияДляПолучения = Новый Соответствие;
		ЗначенияДляПолучения.Вставить("БлокированиеДоступа", Перечисления.ПричиныВыпискиСФНаБумаге.БлокированиеДоступа);
		ЗначенияДляПолучения.Вставить("ОтсутствиеТребованиеПоВыписке", Перечисления.ПричиныВыпискиСФНаБумаге.ОтсутствиеТребованиеПоВыписке);
		ЗначенияДляПолучения.Вставить("ПростойСистемы", Перечисления.ПричиныВыпискиСФНаБумаге.ПростойСистемы);
		ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;
	
		// СостоянияЭСФ.
		ПравилоКонвертации = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД = "СостоянияЭСФ";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.СостоянияЭСФ;
		ПравилоКонвертации.ТипXDTO = "СостоянияЭСФ";
	
		ЗначенияДляПолучения = Новый Соответствие;
		ЗначенияДляПолучения.Вставить("Аннулирован", Перечисления.СостоянияЭСФ.Аннулирован);
		ЗначенияДляПолучения.Вставить("АннулированИСЭСФДляОтнесенияВЗачетИНаВычеты", Перечисления.СостоянияЭСФ.АннулированИСЭСФДляОтнесенияВЗачетИНаВычеты);
		ЗначенияДляПолучения.Вставить("АннулированПриОтзывеСНТ", Перечисления.СостоянияЭСФ.АннулированПриОтзывеСНТ);
		ЗначенияДляПолучения.Вставить("АннулированПриОтклоненииСНТ", Перечисления.СостоянияЭСФ.АннулированПриОтклоненииСНТ);
		ЗначенияДляПолучения.Вставить("ДоставленПолучателю", Перечисления.СостоянияЭСФ.ДоставленПолучателю);
		ЗначенияДляПолучения.Вставить("ОбрабатываетсяСервером", Перечисления.СостоянияЭСФ.ОбрабатываетсяСервером);
		ЗначенияДляПолучения.Вставить("ОжидаетИдентификацииТоваровНаВС", Перечисления.СостоянияЭСФ.ОжидаетИдентификацииТоваровНаВС);
		ЗначенияДляПолучения.Вставить("ОтклоненПолучателем", Перечисления.СостоянияЭСФ.ОтклоненПолучателем);
		ЗначенияДляПолучения.Вставить("ОтклоненСервером", Перечисления.СостоянияЭСФ.ОтклоненСервером);
		ЗначенияДляПолучения.Вставить("Отозван", Перечисления.СостоянияЭСФ.Отозван);
		ЗначенияДляПолучения.Вставить("ПринятОтПоставщика", Перечисления.СостоянияЭСФ.ПринятОтПоставщика);
		ЗначенияДляПолучения.Вставить("ПринятСервером", Перечисления.СостоянияЭСФ.ПринятСервером);
		ЗначенияДляПолучения.Вставить("Сформирован", Перечисления.СостоянияЭСФ.Сформирован);
		ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;
	
		// СпособыПроисхожденияТоваров.
		ПравилоКонвертации = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД = "СпособыПроисхожденияТоваров";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.СпособыПроисхожденияТоваров;
		ПравилоКонвертации.ТипXDTO = "СпособыПроисхожденияТоваров";
	
		ЗначенияДляПолучения = Новый Соответствие;
		ЗначенияДляПолучения.Вставить("ВТО", Перечисления.СпособыПроисхожденияТоваров.ВТО);
		ЗначенияДляПолучения.Вставить("ЕТТЕАЭС", Перечисления.СпособыПроисхожденияТоваров.ЕТТЕАЭС);
		ЗначенияДляПолучения.Вставить("СТ1", Перечисления.СпособыПроисхожденияТоваров.СТ1);
		ЗначенияДляПолучения.Вставить("ТС", Перечисления.СпособыПроисхожденияТоваров.ТС);
		ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;
	
		// СтатусыЭСФ.
		ПравилоКонвертации = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД = "СтатусыЭСФ";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.СтатусыЭСФ;
		ПравилоКонвертации.ТипXDTO = "СтатусыЭСФ";
	
		ЗначенияДляПолучения = Новый Соответствие;
		ЗначенияДляПолучения.Вставить("АннулированИСЭСФДляОтнесенияВЗачетИНаВычеты", Перечисления.СтатусыЭСФ.АннулированИСЭСФДляОтнесенияВЗачетИНаВычеты);
		ЗначенияДляПолучения.Вставить("Аннулированный", Перечисления.СтатусыЭСФ.Аннулированный);
		ЗначенияДляПолучения.Вставить("АннулированПриОтзывеСНТ", Перечисления.СтатусыЭСФ.АннулированПриОтзывеСНТ);
		ЗначенияДляПолучения.Вставить("АннулированПриОтклоненииСНТ", Перечисления.СтатусыЭСФ.АннулированПриОтклоненииСНТ);
		ЗначенияДляПолучения.Вставить("Доставленный", Перечисления.СтатусыЭСФ.Доставленный);
		ЗначенияДляПолучения.Вставить("Импортированный", Перечисления.СтатусыЭСФ.Импортированный);
		ЗначенияДляПолучения.Вставить("Отклоненный", Перечисления.СтатусыЭСФ.Отклоненный);
		ЗначенияДляПолучения.Вставить("Отозванный", Перечисления.СтатусыЭСФ.Отозванный);
		ЗначенияДляПолучения.Вставить("Ошибочный", Перечисления.СтатусыЭСФ.Ошибочный);
		ЗначенияДляПолучения.Вставить("Созданный", Перечисления.СтатусыЭСФ.Созданный);
		ЗначенияДляПолучения.Вставить("Удаленный", Перечисления.СтатусыЭСФ.Удаленный);
		ЗначенияДляПолучения.Вставить("Черновик", Перечисления.СтатусыЭСФ.Черновик);
		ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;
	
		// ТипыПодписиЭСФ.
		ПравилоКонвертации = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД = "ТипыПодписиЭСФ";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ТипыПодписиЭСФ;
		ПравилоКонвертации.ТипXDTO = "ТипыПодписиЭСФ";
	
		ЗначенияДляПолучения = Новый Соответствие;
		ЗначенияДляПолучения.Вставить("УполномоченноеЛицо", Перечисления.ТипыПодписиЭСФ.УполномоченноеЛицо);
		ЗначенияДляПолучения.Вставить("ЮридическоеЛицо", Перечисления.ТипыПодписиЭСФ.ЮридическоеЛицо);
		ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;
	КонецЕсли;

	// ВидыДоговоров.
	ПравилоКонвертации = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД = "ВидыДоговоров";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидыДоговоровКонтрагентов;
	ПравилоКонвертации.ТипXDTO = "ВидыДоговоров";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыДоговоровКонтрагентов.Прочее, "Прочее");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыДоговоровКонтрагентов.Прочее, "СКомиссионером");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыДоговоровКонтрагентов.Прочее, "СКомитентом");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыДоговоровКонтрагентов.Прочее, "СКомитентомНаЗакупку");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем, "СПокупателем");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком, "СПоставщиком");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("Прочее", Перечисления.ВидыДоговоровКонтрагентов.Прочее);
	ЗначенияДляПолучения.Вставить("СКомиссионером", Перечисления.ВидыДоговоровКонтрагентов.Прочее);
	ЗначенияДляПолучения.Вставить("СКомитентом", Перечисления.ВидыДоговоровКонтрагентов.Прочее);
	ЗначенияДляПолучения.Вставить("СКомитентомНаЗакупку", Перечисления.ВидыДоговоровКонтрагентов.Прочее);
	ЗначенияДляПолучения.Вставить("СПокупателем", Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
	ЗначенияДляПолучения.Вставить("СПоставщиком", Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// ВидыОперацийПБДСРасчетыСКонтрагентами.
	ПравилоКонвертации = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД = "ВидыОперацийПБДСРасчетыСКонтрагентами";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств;
	ПравилоКонвертации.ТипXDTO = "ВидыРасчетовСКонтрагентами";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПоставщиком, "СПоставщиком");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПокупателя, "СПокупателем");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочиеРасчетыСКонтрагентами, "Прочее");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.РасчетыПоКредитамИЗаймам, "КредитыИЗаймы");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("СПоставщиком", Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПоставщиком);
	ЗначенияДляПолучения.Вставить("СПокупателем", Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПокупателя);
	ЗначенияДляПолучения.Вставить("Прочее", Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочиеРасчетыСКонтрагентами);
	ЗначенияДляПолучения.Вставить("КредитыИЗаймы", Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.РасчетыПоКредитамИЗаймам);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// ВидыОперацийПКО_РасчетыСКонтрагентами.
	ПравилоКонвертации = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД = "ВидыОперацийПКО_РасчетыСКонтрагентами";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидыОперацийПКО;
	ПравилоКонвертации.ТипXDTO = "ВидыРасчетовСКонтрагентами";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПоставщиком, "СПоставщиком");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийПКО.ОплатаПокупателя, "СПокупателем");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствПрочее, "Прочее");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийПКО.РасчетыПоКредитамИЗаймамСКонтрагентами, "КредитыИЗаймы");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("СПоставщиком", Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПоставщиком);
	ЗначенияДляПолучения.Вставить("СПокупателем", Перечисления.ВидыОперацийПКО.ОплатаПокупателя);
	ЗначенияДляПолучения.Вставить("Прочее", Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствПрочее);
	ЗначенияДляПолучения.Вставить("КредитыИЗаймы", Перечисления.ВидыОперацийПКО.РасчетыПоКредитамИЗаймамСКонтрагентами);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// ВидыОперацийПКО_РасчетыССотрудниками.
	ПравилоКонвертации = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД = "ВидыОперацийПКО_РасчетыССотрудниками";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидыОперацийПКО;
	ПравилоКонвертации.ТипXDTO = "ВидыРасчетовССотрудниками";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПодотчетником, "Подотчет");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствРаботником, "Займы");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("Подотчет", Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПодотчетником);
	ЗначенияДляПолучения.Вставить("Займы", Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствРаботником);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// ВидыОперацийПОСБДСРасчетыСКонтрагентами.
	ПравилоКонвертации = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД = "ВидыОперацийПОСБДСРасчетыСКонтрагентами";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств;
	ПравилоКонвертации.ТипXDTO = "ВидыРасчетовСКонтрагентами";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПокупателю, "СПокупателем");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ОплатаПоставщику, "СПоставщиком");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПрочиеРасчетыСКонтрагентами, "Прочее");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.РасчетыПоКредитамИЗаймам, "КредитыИЗаймы");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("СПокупателем", Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПокупателю);
	ЗначенияДляПолучения.Вставить("СПоставщиком", Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ОплатаПоставщику);
	ЗначенияДляПолучения.Вставить("Прочее", Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПрочиеРасчетыСКонтрагентами);
	ЗначенияДляПолучения.Вставить("КредитыИЗаймы", Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.РасчетыПоКредитамИЗаймам);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// ВидыОперацийРКО_РасчетыСКонтрагентами.
	ПравилоКонвертации = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД = "ВидыОперацийРКО_РасчетыСКонтрагентами";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидыОперацийРКО;
	ПравилоКонвертации.ТипXDTO = "ВидыРасчетовСКонтрагентами";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателю, "СПокупателем");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийРКО.ОплатаПоставщику, "СПоставщиком");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийРКО.РасходДенежныхСредствПрочее, "Прочее");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИЗаймамСКонтрагентами, "КредитыИЗаймы");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("СПокупателем", Перечисления.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателю);
	ЗначенияДляПолучения.Вставить("СПоставщиком", Перечисления.ВидыОперацийРКО.ОплатаПоставщику);
	ЗначенияДляПолучения.Вставить("Прочее", Перечисления.ВидыОперацийРКО.РасходДенежныхСредствПрочее);
	ЗначенияДляПолучения.Вставить("КредитыИЗаймы", Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИЗаймамСКонтрагентами);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// ВидыОперацийРКО_РасчетыССотрудниками.
	ПравилоКонвертации = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД = "ВидыОперацийРКО_РасчетыССотрудниками";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидыОперацийРКО;
	ПравилоКонвертации.ТипXDTO = "ВидыРасчетовССотрудниками";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетнику, "Подотчет");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийРКО.РасходДенежныхСредствПрочее, "Займы");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("Подотчет", Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетнику);
	ЗначенияДляПолучения.Вставить("Займы", Перечисления.ВидыОперацийРКО.РасходДенежныхСредствПрочее);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// ВидыОперацийРКОНаБанковскийСчет.
	ПравилоКонвертации = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД = "ВидыОперацийРКОНаБанковскийСчет";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидыОперацийРКО;
	ПравилоКонвертации.ТипXDTO = "ВидыОперацийРКОНаБанковскийСчет";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк, "ВзносНаличными");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийРКО.ИнкассацияДенежныхСредств, "Инкассация");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("ВзносНаличными", Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк);
	ЗначенияДляПолучения.Вставить("Инкассация", Перечисления.ВидыОперацийРКО.ИнкассацияДенежныхСредств);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// ВидыОперацийСБДСРасчетыСКонтрагентами.
	ПравилоКонвертации = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД = "ВидыОперацийСБДСРасчетыСКонтрагентами";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидыОперацийППИсходящее;
	ПравилоКонвертации.ТипXDTO = "ВидыРасчетовСКонтрагентами";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийППИсходящее.ВозвратДенежныхСредствПокупателю, "СПокупателем");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийППИсходящее.ОплатаПоставщику, "СПоставщиком");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийППИсходящее.ПрочиеРасчетыСКонтрагентами, "Прочее");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийППИсходящее.РасчетыПоКредитамИЗаймамСКонтрагентами, "КредитыИЗаймы");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("СПокупателем", Перечисления.ВидыОперацийППИсходящее.ВозвратДенежныхСредствПокупателю);
	ЗначенияДляПолучения.Вставить("СПоставщиком", Перечисления.ВидыОперацийППИсходящее.ОплатаПоставщику);
	ЗначенияДляПолучения.Вставить("Прочее", Перечисления.ВидыОперацийППИсходящее.ПрочиеРасчетыСКонтрагентами);
	ЗначенияДляПолучения.Вставить("КредитыИЗаймы", Перечисления.ВидыОперацийППИсходящее.РасчетыПоКредитамИЗаймамСКонтрагентами);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// ВидыОперацийСБДСРасчетыССотрудниками.
	ПравилоКонвертации = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД = "ВидыОперацийСБДСРасчетыССотрудниками";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидыОперацийППИсходящее;
	ПравилоКонвертации.ТипXDTO = "ВидыРасчетовССотрудниками";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийППИсходящее.ПеречислениеДенежныхСредствПодотчетнику, "Подотчет");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийППИсходящее.ПрочееСписаниеБезналичныхДенежныхСредств, "Займы");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("Подотчет", Перечисления.ВидыОперацийППИсходящее.ПеречислениеДенежныхСредствПодотчетнику);
	ЗначенияДляПолучения.Вставить("Займы", Перечисления.ВидыОперацийППИсходящее.ПрочееСписаниеБезналичныхДенежныхСредств);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// Перечисление_ВидыОперацийКомплектация.
	ПравилоКонвертации = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД = "Перечисление_ВидыОперацийКомплектация";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидыОперацийКомплектацияНоменклатуры;
	ПравилоКонвертации.ТипXDTO = "ВидыОперацийСборкаТоваров";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийКомплектацияНоменклатуры.Комплектация, "Сборка");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийКомплектацияНоменклатуры.Разукомплектация, "Разборка");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("Сборка", Перечисления.ВидыОперацийКомплектацияНоменклатуры.Комплектация);
	ЗначенияДляПолучения.Вставить("Разборка", Перечисления.ВидыОперацийКомплектацияНоменклатуры.Разукомплектация);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// ПеречислениеСсылка_СпособыВыставленияСчетаФактуры.
	ПравилоКонвертации = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД = "ПеречислениеСсылка_СпособыВыставленияСчетаФактуры";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.СпособыОбменаДокументами;
	ПравилоКонвертации.ТипXDTO = "СпособыВыставленияСчетаФактуры";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.СпособыОбменаДокументами.Бумажно, "НаБумажномНосителе");
	ЗначенияДляОтправки.Вставить(Перечисления.СпособыОбменаДокументами.Электронно, "ВЭлектронномВиде");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("НаБумажномНосителе", Перечисления.СпособыОбменаДокументами.Бумажно);
	ЗначенияДляПолучения.Вставить("ВЭлектронномВиде", Перечисления.СпособыОбменаДокументами.Электронно);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// ПолФизическогоЛица.
	ПравилоКонвертации = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД = "ПолФизическогоЛица";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ПолФизическихЛиц;
	ПравилоКонвертации.ТипXDTO = "Пол";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ПолФизическихЛиц.Женский, "Женский");
	ЗначенияДляОтправки.Вставить(Перечисления.ПолФизическихЛиц.Мужской, "Мужской");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("Женский", Перечисления.ПолФизическихЛиц.Женский);
	ЗначенияДляПолучения.Вставить("Мужской", Перечисления.ПолФизическихЛиц.Мужской);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// ЮридическоеФизическоеЛицо.
	ПравилоКонвертации = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД = "ЮридическоеФизическоеЛицо";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ЮрФизЛицо;
	ПравилоКонвертации.ТипXDTO = "ЮридическоеФизическоеЛицо";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ЮрФизЛицо.ФизЛицо, "ФизическоеЛицо");
	ЗначенияДляОтправки.Вставить(Перечисления.ЮрФизЛицо.ЮрЛицо, "ЮридическоеЛицо");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("ФизическоеЛицо", Перечисления.ЮрФизЛицо.ФизЛицо);
	ЗначенияДляПолучения.Вставить("ЮридическоеЛицо", Перечисления.ЮрФизЛицо.ЮрЛицо);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

КонецПроцедуры

#КонецОбласти
#Область Алгоритмы


Процедура AdditionalInfoВставить(ДанныеXDTO, Имя, ДопЗначение)
	Если ДанныеXDTO.Свойство("AdditionalInfo") И ТипЗнч(ДанныеXDTO.AdditionalInfo) = Тип("Структура") Тогда
	    ДопДанные = ДанныеXDTO.AdditionalInfo;
	Иначе
	    ДопДанные = Новый Структура;
	КонецЕсли;
	
	ДопДанные.Вставить(Имя, ДопЗначение);
	ДанныеXDTO.Вставить("AdditionalInfo", ДопДанные);
КонецПроцедуры
Функция БанкДляЗагрузки(БанкИсходный)
	Если БанкИсходный = Неопределено Тогда
			Возврат Справочники.Банки.ПустаяСсылка();
	КонецЕсли;
		
	Банк = Справочники.Банки.НайтиПоНаименованию(БанкИсходный.Наименование);
	Если НЕ ЗначениеЗаполнено(Банк) Тогда
		НовыйБанк = Справочники.Банки.СоздатьЭлемент();
		НовыйБанк.Наименование = БанкИсходный.Наименование;
		НовыйБанк.БИК = БанкИсходный.БИК;
		НовыйБанк.Записать();
		Банк = НовыйБанк.Ссылка;
	КонецЕсли;
	
	Возврат Банк;
КонецФункции
Функция БанкПоУмолчанию()
	НаименованиеПоУмолчанию = НСтр("ru = '<Обобщённый банк>'");
	БИКПоУмолчанию = НСтр("ru = '<12345678901>'");
	
	Банк = Справочники.Банки.НайтиПоНаименованию(НаименованиеПоУмолчанию);
	Если НЕ ЗначениеЗаполнено(Банк) Тогда
		НовыйБанк = Справочники.Банки.СоздатьЭлемент();
		НовыйБанк.Наименование = НаименованиеПоУмолчанию;
		НовыйБанк.БИК = БИКПоУмолчанию;
		НовыйБанк.Записать();
		Банк = НовыйБанк.Ссылка;
	КонецЕсли;
	
	Возврат Банк;
КонецФункции
Функция ВерсияФорматаЧислом(СтрокаВерсии)
	Если Не ЗначениеЗаполнено(СтрокаВерсии) Или СтрокаВерсии = "1.0.beta" Тогда
		Возврат 0;
	КонецЕсли;
	
	ВерсияФорматаЧислом = 0;
	
	РазрядыВерсии = СтрРазделить(СтрокаВерсии, ".");
	Если РазрядыВерсии.Количество() <> 2 Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Неправильный формат параметра СтрокаВерсии1: %1'"), СтрокаВерсии);
	КонецЕсли;
	
	МножительРазряда = 10000;
	Для ИндексРазрядаОбратный = 0 По 1 Цикл
		ВерсияФорматаЧислом = ВерсияФорматаЧислом + Число(РазрядыВерсии[ИндексРазрядаОбратный])*МножительРазряда;
		МножительРазряда = МножительРазряда / 100;
	КонецЦикла;
	Возврат ВерсияФорматаЧислом;
КонецФункции
Функция ВидОплатыПоУмолчанию(КомпонентыОбмена, Организация, ДоговорКонтрагента, ЭтоПодарочныйСертификат = Ложь)
	ВидыОплатПоУмолчанию = КомпонентыОбмена.ПараметрыКонвертации.ВидыОплатПоУмолчанию;
	
	НеобходимоСоздатьЭлемент = Ложь;
	Элемент = Справочники.ВидыОплатЭквайринга.ПустаяСсылка();
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Организация", Организация);
	СтруктураОтбора.Вставить("ДоговорКонтрагента", ДоговорКонтрагента);
	СтруктураОтбора.Вставить("ЭтоПодарочныйСертификат", ЭтоПодарочныйСертификат);
	Если ЗначениеЗаполнено(ВидыОплатПоУмолчанию) Тогда
		
		Строки = ВидыОплатПоУмолчанию.НайтиСтроки(СтруктураОтбора);
		Если Строки.Количество() = 1 Тогда
			Возврат Строки[0].Элемент;
		КонецЕсли;
	Иначе
		ТаблицаВидовОплаты = Новый ТаблицаЗначений;
		ТаблицаВидовОплаты.Колонки.Добавить("Организация");
		ТаблицаВидовОплаты.Колонки.Добавить("ДоговорКонтрагента");
		ТаблицаВидовОплаты.Колонки.Добавить("ЭтоПодарочныйСертификат");
		ТаблицаВидовОплаты.Колонки.Добавить("Элемент");
		
		ВидыОплатПоУмолчанию = ТаблицаВидовОплаты;
	КонецЕсли;
	НоваяСтрока = ВидыОплатПоУмолчанию.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураОтбора);
	
	НаименованиеЭлементаДляОбменаПоУмолчанию = ?(ЭтоПодарочныйСертификат,
		НСтр("ru='Подарочные сертификаты'"),
		НСтр("ru='Вид оплаты по умолчанию'"));
	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ ПЕРВЫЕ 2
		|Ссылка,
		|ВЫБОР
		|	КОГДА Наименование = &НаименованиеЭлементаДляОбменаПоУмолчанию
		|		ТОГДА ИСТИНА
		|	ИНАЧЕ ЛОЖЬ
		|КОНЕЦ КАК ЭтоЭлементПоУмолчаниюДляОбмена
		|ИЗ Справочник.ВидыОплатЭквайринга
		|ГДЕ ПометкаУдаления = Ложь
		|УПОРЯДОЧИТЬ ПО
		|	ЭтоЭлементПоУмолчаниюДляОбмена УБЫВ");
		
	Запрос.УстановитьПараметр("НаименованиеЭлементаДляОбменаПоУмолчанию", НаименованиеЭлементаДляОбменаПоУмолчанию);	
	Запрос.УстановитьПараметр("Организация", Организация);	
	Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Элемент = Выборка.Ссылка;
		Если Выборка.Следующий() Тогда
			НеобходимоСоздатьЭлемент = Истина;
		КонецЕсли;
	Иначе
		НеобходимоСоздатьЭлемент = Истина;
	КонецЕсли;
	
	// Создание элемента для обмена с заданными параметрами
	Если НеобходимоСоздатьЭлемент Тогда
		ВидОплатыОбъект = Справочники.ВидыОплатЭквайринга.СоздатьЭлемент();
		ВидОплатыОбъект.Наименование       = НаименованиеЭлементаДляОбменаПоУмолчанию;
		ВидОплатыОбъект.УстановитьНовыйКод();
	
		Попытка
			ВидОплатыОбъект.Записать();
			Элемент = ВидОплатыОбъект.Ссылка;
		Исключение
		КонецПопытки
	КонецЕсли;
	
	ВидыОплатПоУмолчанию[ВидыОплатПоУмолчанию.Количество() - 1].Элемент = Элемент;
	
	Возврат Элемент;
КонецФункции
Функция ДанныеКоллекцииВВидеСтруктуры(Источник, ПравилаЗаполнения)
	Результат = Новый Структура;
	
	Для Каждого ПравилоЗаполнения Из ПравилаЗаполнения Цикл
	
		СтруктураДляПереносаЗначения = Новый Структура(ПравилоЗаполнения.Ключ, Неопределено);
		ЗаполнитьЗначенияСвойств(СтруктураДляПереносаЗначения, Источник);
		
		Значение = СтруктураДляПереносаЗначения[ПравилоЗаполнения.Ключ];
		Если Значение <> Неопределено Тогда
			Результат.Вставить(ПравилоЗаполнения.Значение, Значение);
		КонецЕсли;
	
	КонецЦикла;
	
	Возврат Результат
КонецФункции
Процедура ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO, ИмяДопСвойства = "ВалютаДокумента")
	Если ДанныеXDTO.Свойство("Валюта")
		И ЗначениеЗаполнено(ДанныеXDTO.Валюта) Тогда
		
		Если ДанныеXDTO.Валюта.Свойство("Ссылка") Тогда
			ИмяПКО = "Справочник_Валюты";
		Иначе
			ИмяПКО = "Справочник_Валюты_ИзСтруктуры";
		КонецЕсли;
		
		ПолученныеДанные.ДополнительныеСвойства.Вставить(ИмяДопСвойства, Новый Структура("Значение, ИмяПКО", ДанныеXDTO.Валюта, ИмяПКО));
	
	КонецЕсли;
КонецПроцедуры
Процедура ДобавитьДоговорВДопСвойства(ПолученныеДанные, ДанныеXDTO)
	Если ДанныеXDTO.Свойство("Договор") И ЗначениеЗаполнено(ДанныеXDTO.Договор) Тогда
		Если ТипЗнч(ДанныеXDTO.Договор) = Тип("Структура")
			И ДанныеXDTO.Договор.Свойство("Ссылка") = Ложь Тогда
			ИмяПКО = "Справочник_ДоговорыКонтрагентов_ИзСтруктуры";
		Иначе
			ИмяПКО = "Справочник_ДоговорыКонтрагентов";
		КонецЕсли;
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ДоговорКонтрагента", Новый Структура("Значение, ИмяПКО", ДанныеXDTO.Договор, ИмяПКО));
	КонецЕсли;
КонецПроцедуры
Функция ДоговорОплатаСертификатомОтРозничногоПокупателя(КомпонентыОбмена, ПараметрыДоговора)
	ПараметрыКонвертации = КомпонентыОбмена.ПараметрыКонвертации;
	Если ЗначениеЗаполнено(ПараметрыКонвертации.ДоговорОплатаСертификатомОтРозничногоПокупателя) Тогда
		Возврат ПараметрыКонвертации.ДоговорОплатаСертификатомОтРозничногоПокупателя;
	КонецЕсли;
	
	Элемент = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	НеобходимоСоздатьЭлемент = Ложь;
	
	НаименованиеЭлементаДляОбменаПоУмолчанию = НСтр("ru='Оплата подарочными сертификатами'");
	
	ПараметрыДоговора.Вставить("ВидДоговора", Перечисления.ВидыДоговоровКонтрагентов.Прочее);
	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ ПЕРВЫЕ 2
		|Ссылка,
		|ВЫБОР
		|	КОГДА Наименование = &НаименованиеЭлементаДляОбменаПоУмолчанию
		|		ТОГДА ИСТИНА
		|	ИНАЧЕ ЛОЖЬ
		|КОНЕЦ КАК ЭтоЭлементПоУмолчаниюДляОбмена
		|ИЗ Справочник.ДоговорыКонтрагентов
		|ГДЕ Организация = &Организация
		|	И ВидДоговора = &ВидДоговора
		|	И Владелец = &Владелец
		|	И ВалютаВзаиморасчетов = &ВалютаВзаиморасчетов
		|	И ПометкаУдаления = Ложь
		|УПОРЯДОЧИТЬ ПО
		|	ЭтоЭлементПоУмолчаниюДляОбмена УБЫВ");
		
	Запрос.УстановитьПараметр("НаименованиеЭлементаДляОбменаПоУмолчанию", НаименованиеЭлементаДляОбменаПоУмолчанию);	
	Запрос.УстановитьПараметр("Организация",          ПараметрыДоговора.Организация);	
	Запрос.УстановитьПараметр("Владелец",             ПараметрыДоговора.Владелец);
	Запрос.УстановитьПараметр("ВалютаВзаиморасчетов", ПараметрыДоговора.ВалютаВзаиморасчетов);
	Запрос.УстановитьПараметр("ВидДоговора",          ПараметрыДоговора.ВидДоговора);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Элемент = Выборка.Ссылка;
		Если Выборка.Следующий() Тогда
			НеобходимоСоздатьЭлемент = Истина;
		КонецЕсли;
	Иначе
		НеобходимоСоздатьЭлемент = Истина;
	КонецЕсли;
	
	// Создание элемента для обмена с заданными параметрами
	Если НеобходимоСоздатьЭлемент Тогда
		ДоговорОбъект = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
		ДоговорОбъект.Наименование = НаименованиеЭлементаДляОбменаПоУмолчанию;
		ЗаполнитьЗначенияСвойств(ДоговорОбъект, ПараметрыДоговора);
		ДоговорОбъект.УстановитьНовыйКод();
	
		Попытка
			ДоговорОбъект.Записать();
			Элемент = ДоговорОбъект.Ссылка;
		Исключение
		КонецПопытки
	КонецЕсли;
	
	ПараметрыКонвертации.ДоговорОплатаСертификатомОтРозничногоПокупателя = Элемент;
	
	Возврат Элемент;
КонецФункции
Функция ДоговорРеализацияСертификатаРозничномуПокупателю(КомпонентыОбмена, ПараметрыДоговора)
	ПараметрыКонвертации = КомпонентыОбмена.ПараметрыКонвертации;
	Если ЗначениеЗаполнено(ПараметрыКонвертации.ДоговорРеализацияСертификатаРозничномуПокупателю) Тогда
		Возврат ПараметрыКонвертации.ДоговорРеализацияСертификатаРозничномуПокупателю;
	КонецЕсли;
	
	Элемент = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	НеобходимоСоздатьЭлемент = Ложь;
	
	НаименованиеЭлементаДляОбменаПоУмолчанию = НСтр("ru='Реализация подарочных сертификатов'");
	
	ПараметрыДоговора.Вставить("ВидДоговора", Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ ПЕРВЫЕ 2
		|Ссылка,
		|ВЫБОР
		|	КОГДА Наименование = &НаименованиеЭлементаДляОбменаПоУмолчанию
		|		ТОГДА ИСТИНА
		|	ИНАЧЕ ЛОЖЬ
		|КОНЕЦ КАК ЭтоЭлементПоУмолчаниюДляОбмена
		|ИЗ Справочник.ДоговорыКонтрагентов
		|ГДЕ Организация = &Организация
		|	И ВидДоговора = &ВидДоговора
		|	И Владелец = &Владелец
		|	И ВалютаВзаиморасчетов = &ВалютаВзаиморасчетов
		|	И ПометкаУдаления = Ложь
		|УПОРЯДОЧИТЬ ПО
		|	ЭтоЭлементПоУмолчаниюДляОбмена УБЫВ");
		
	Запрос.УстановитьПараметр("НаименованиеЭлементаДляОбменаПоУмолчанию", НаименованиеЭлементаДляОбменаПоУмолчанию);	
	Запрос.УстановитьПараметр("Организация",          ПараметрыДоговора.Организация);	
	Запрос.УстановитьПараметр("Владелец",             ПараметрыДоговора.Владелец);
	Запрос.УстановитьПараметр("ВалютаВзаиморасчетов", ПараметрыДоговора.ВалютаВзаиморасчетов);
	Запрос.УстановитьПараметр("ВидДоговора",          ПараметрыДоговора.ВидДоговора);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Элемент = Выборка.Ссылка;
		Если Выборка.Следующий() Тогда
			НеобходимоСоздатьЭлемент = Истина;
		КонецЕсли;
	Иначе
		НеобходимоСоздатьЭлемент = Истина;
	КонецЕсли;
	
	// Создание элемента для обмена с заданными параметрами
	Если НеобходимоСоздатьЭлемент Тогда
		ДоговорОбъект = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
		ДоговорОбъект.Наименование = НаименованиеЭлементаДляОбменаПоУмолчанию;
		ЗаполнитьЗначенияСвойств(ДоговорОбъект, ПараметрыДоговора);
		ДоговорОбъект.УстановитьНовыйКод();
	
		Попытка
			ДоговорОбъект.Записать();
			Элемент = ДоговорОбъект.Ссылка;
		Исключение
		КонецПопытки
	КонецЕсли;
	
	ПараметрыКонвертации.ДоговорРеализацияСертификатаРозничномуПокупателю = Элемент;
	
	Возврат Элемент;
КонецФункции
Функция ДоговорСПараметрамиПоУмолчанию(ПараметрыДоговора)
	Договор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	
	Если НЕ ЗначениеЗаполнено(ПараметрыДоговора.Организация)
		ИЛИ НЕ ЗначениеЗаполнено(ПараметрыДоговора.Владелец)
		ИЛИ НЕ ЗначениеЗаполнено(ПараметрыДоговора.ВалютаВзаиморасчетов)
		ИЛИ НЕ ЗначениеЗаполнено(ПараметрыДоговора.ВидДоговора) Тогда
		Возврат Договор;
	КонецЕсли;
	
	ГоловнаяОрганизация = ОбщегоНазначенияБК.ГоловнаяОрганизация(ПараметрыДоговора.Организация);
	
	НеобходимоСоздатьДоговор = Ложь;
	Запрос = Новый Запрос("
		|ВЫБРАТЬ ПЕРВЫЕ 2
		|Ссылка,
		|ВЫБОР
		|	КОГДА Наименование = &НаименованиеЭлементаДляОбменаПоУмолчанию
		|		ТОГДА ИСТИНА
		|	ИНАЧЕ ЛОЖЬ
		|КОНЕЦ КАК ЭтоЭлементПоУмолчаниюДляОбмена
		|ИЗ Справочник.ДоговорыКонтрагентов
		|ГДЕ Организация = &Организация
		|	И ВидДоговора = &ВидДоговора
		|	И Владелец = &Владелец
		|	И ВалютаВзаиморасчетов = &ВалютаВзаиморасчетов
		|	И ПометкаУдаления = Ложь
		|УПОРЯДОЧИТЬ ПО
		|	ЭтоЭлементПоУмолчаниюДляОбмена УБЫВ");
		
	Запрос.УстановитьПараметр("НаименованиеЭлементаДляОбменаПоУмолчанию", ПараметрыДоговора.Наименование);
	Запрос.УстановитьПараметр("Организация",          ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("Владелец",             ПараметрыДоговора.Владелец);
	Запрос.УстановитьПараметр("ВалютаВзаиморасчетов", ПараметрыДоговора.ВалютаВзаиморасчетов);
	Запрос.УстановитьПараметр("ВидДоговора",          ПараметрыДоговора.ВидДоговора);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Договор = Выборка.Ссылка;
		Если НЕ Выборка.ЭтоЭлементПоУмолчаниюДляОбмена 
			И Выборка.Следующий() Тогда
			НеобходимоСоздатьДоговор = Истина;
		КонецЕсли;
	Иначе
		НеобходимоСоздатьДоговор = Истина;
	КонецЕсли;
	
	// Создание элемента для обмена с заданными параметрами.
	Если НеобходимоСоздатьДоговор Тогда
		
		ДоговорОбъект = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
		ДоговорОбъект.Организация = ГоловнаяОрганизация;
		ЗаполнитьЗначенияСвойств(ДоговорОбъект, ПараметрыДоговора, , "Организация");
	
		Попытка
			ДоговорОбъект.ОбменДанными.Загрузка = Истина;
			ДоговорОбъект.Записать();
			Договор = ДоговорОбъект.Ссылка;
		Исключение
		КонецПопытки
		
	КонецЕсли;
	
	Возврат Договор;
КонецФункции
Функция ДоговорЭквайринга(Организация, Контрагент)
	Если НЕ ЗначениеЗаполнено(Организация) 
		ИЛИ НЕ ЗначениеЗаполнено(Контрагент) Тогда
		Возврат Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	КонецЕсли;
	
	НаименованиеЭлементаДляОбменаПоУмолчанию = НСтр("ru='Договор эквайринга'");
	ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Прочее;
	
	ПараметрыДоговора = Новый Структура;
	ПараметрыДоговора.Вставить("Наименование",         НаименованиеЭлементаДляОбменаПоУмолчанию);
	ПараметрыДоговора.Вставить("Организация",          Организация);
	ПараметрыДоговора.Вставить("Владелец",             Контрагент);
	ПараметрыДоговора.Вставить("ВалютаВзаиморасчетов", Константы.ВалютаРегламентированногоУчета.Получить());
	ПараметрыДоговора.Вставить("ВидДоговора",          ВидДоговора);
	
	Договор = ДоговорСПараметрамиПоУмолчанию(ПараметрыДоговора);
	
	Возврат Договор.Ссылка;
КонецФункции
Функция ДоговорЭквайрингаСПараметрамиПоУмолчанию(ПараметрыДоговора)
	Договор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	НеобходимоСоздатьДоговор = Ложь;
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 2
	                      |	ДоговорыЭквайринга.Ссылка КАК Ссылка,
	                      |	ВЫБОР
	                      |		КОГДА ДоговорыЭквайринга.Наименование = &НаименованиеЭлементаДляОбменаПоУмолчанию
	                      |			ТОГДА ИСТИНА
	                      |		ИНАЧЕ ЛОЖЬ
	                      |	КОНЕЦ КАК ЭтоЭлементПоУмолчаниюДляОбмена
	                      |ИЗ
	                      |	Справочник.ДоговорыЭквайринга КАК ДоговорыЭквайринга
	                      |ГДЕ
	                      |	ДоговорыЭквайринга.Эквайрер = &Владелец
	                      |	И ДоговорыЭквайринга.ПометкаУдаления = ЛОЖЬ
	                      |	И ДоговорыЭквайринга.ДоговорВзаиморасчетов.Организация = &Организация
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	ЭтоЭлементПоУмолчаниюДляОбмена УБЫВ");
		
	НаименованиеЭлементаДляОбменаПоУмолчанию = ПараметрыДоговора.Наименование;
	Запрос.УстановитьПараметр("НаименованиеЭлементаДляОбменаПоУмолчанию", НаименованиеЭлементаДляОбменаПоУмолчанию);
	
	Запрос.УстановитьПараметр("Организация",          ПараметрыДоговора.Организация);
	Запрос.УстановитьПараметр("Владелец",             ПараметрыДоговора.Владелец);
	Запрос.УстановитьПараметр("ВалютаВзаиморасчетов", ПараметрыДоговора.ВалютаВзаиморасчетов);
	Запрос.УстановитьПараметр("ВидДоговора",          ПараметрыДоговора.ВидДоговора);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Договор = Выборка.Ссылка;
	Иначе
		НеобходимоСоздатьДоговор = Истина;
	КонецЕсли;
	
	// Создание элемента для обмена с заданными параметрами.
	Если НеобходимоСоздатьДоговор Тогда
		ДоговорОбъект = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
		ЗаполнитьЗначенияСвойств(ДоговорОбъект, ПараметрыДоговора);
		ДоговорОбъект.УстановитьНовыйКод();
	
		Попытка
			ДоговорОбъект.ОбменДанными.Загрузка = Истина;
			ДоговорОбъект.Записать();
			Договор = ДоговорОбъект.Ссылка;
		Исключение
		КонецПопытки;
	
		ДоговорЭквайрингаОбъект = Справочники.ДоговорыЭквайринга.СоздатьЭлемент();
		ДоговорЭквайрингаОбъект.Наименование = ПараметрыДоговора.Наименование;
		ДоговорЭквайрингаОбъект.Эквайрер = ПараметрыДоговора.Владелец;
		ДоговорЭквайрингаОбъект.ДоговорВзаиморасчетов = ДоговорОбъект.Ссылка;
		ДоговорЭквайрингаОбъект.УстановитьНовыйКод();
	
		Попытка
			ДоговорЭквайрингаОбъект.ОбменДанными.Загрузка = Истина;
			ДоговорЭквайрингаОбъект.Записать();
			Договор = ДоговорЭквайрингаОбъект.Ссылка;
		Исключение
		КонецПопытки;
	
	КонецЕсли;
	
	Возврат Договор;
КонецФункции
Процедура ДокументыДвиженияДС_ПолучениеСтатьиДДС(ПолученныеДанные, ДанныеXDTO)
	Если ДанныеXDTO.Свойство("РасшифровкаПлатежа")
		И ЗначениеЗаполнено(ДанныеXDTO.РасшифровкаПлатежа)
		И ДанныеXDTO.РасшифровкаПлатежа.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("СтатьяДвиженияДенежныхСредств",ДанныеXDTO.РасшифровкаПлатежа[0].СтатьяДДС);
	КонецЕсли;
КонецПроцедуры
Процедура ДокументыДвиженияДС_ПолучениеСтатьиРасходов(ПолученныеДанные, ДанныеXDTO)
	Если ДанныеXDTO.Свойство("РасшифровкаПлатежа") И ЗначениеЗаполнено(ДанныеXDTO.РасшифровкаПлатежа) 
		И ДанныеXDTO.РасшифровкаПлатежа.Количество() > 0 Тогда
	
		ПерваяСтрока = ДанныеXDTO.РасшифровкаПлатежа[0];
		Если ЗначениеЗаполнено(ПерваяСтрока.СтатьяРасходов) Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("СубконтоДт1", Новый Структура("Значение", ПерваяСтрока.СтатьяРасходов));
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры
Процедура ЗаполнениеОстатковДолговАвансовКредитовЗаймов(ПараметрыКонвертации)
	ДатаОстатков = ПараметрыКонвертации.ДатаОстатков;
	
	ПараметрыКонвертации.ТаблицаДолгиАвансыКредитыЗаймы = 
		Новый Структура("ДолгиКлиенты,АвансыКлиенты,ДолгиПоставщики,АвансыПоставщики,КредитыЗаймы");
		
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	КурсыВалют.Курс,
		|	КурсыВалют.Кратность,
		|	КурсыВалют.Валюта
		|ПОМЕСТИТЬ КурсыВалют
		|ИЗ                         
		|	РегистрСведений.КурсыВалют.СрезПоследних(&ДатаОстатковТипДата, ) КАК КурсыВалют
		|;
		|
		|///////////////////////////////// - клиенты долги - ///////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТиповойОстатки.Счет,
		|	ТиповойОстатки.Субконто1 КАК Контрагент,
		|	ТиповойОстатки.Субконто1 КАК Партнер,
		|	ТиповойОстатки.Субконто2 КАК РасчетныйДокумент,
		|	ТиповойОстатки.Организация КАК Организация,
		|	ЕСТЬNULL(ТиповойОстатки.Валюта, &ВалютаРегл) КАК ВалютаВзаиморасчетов,
		|	ТиповойОстатки.СуммаОстатокДт КАК СуммаРегл,
		|	ВЫБОР
		|		КОГДА ТиповойОстатки.ВалютнаяСуммаОстатокДт = 0
		|			ТОГДА ТиповойОстатки.СуммаОстатокДт
		|		ИНАЧЕ ТиповойОстатки.ВалютнаяСуммаОстатокДт
		|	КОНЕЦ КАК Сумма,
		|	ТиповойОстатки.Субконто2.Дата КАК ДатаРасчетногоДокумента,
		|	ТиповойОстатки.Субконто2.Номер КАК НомерРасчетногоДокумента,
		|	&ДатаОстатковТипДата КАК ДатаПлатежа,
		|	""Активный"" КАК ПризнакКорректностиОстатков
		|ИЗ
		|	РегистрБухгалтерии.Типовой.Остатки(
		|			&ДатаОстатковТипДата,
		|			Счет  = ЗНАЧЕНИЕ(ПланСчетов.Типовой.КраткосрочныеФинансовыеАктивыПредназначенныеДляТорговли)
		|				Или Счет = ЗНАЧЕНИЕ(ПланСчетов.Типовой.КраткосрочнаяДебиторскаяЗадолженностьПокупателейИЗаказчиков)
		|				Или Счет = ЗНАЧЕНИЕ(ПланСчетов.Типовой.ДолгосрочнаяЗадолженностьПокупателейИЗаказчиков)
		|			,
		|			) КАК ТиповойОстатки
		|ГДЕ
		|	ТиповойОстатки.СуммаОстатокДт > 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	Организация,
		|	Контрагент,
		|	РасчетныйДокумент
		|;
		|
		|/////////////////////////////// - клиенты авансы - /////////////////////////////////////////////////
		|ВЫБРАТЬ *
		|ИЗ
		|	(ВЫБРАТЬ
		|		ТиповойОстатки.Счет,
		|		ТиповойОстатки.Субконто1 КАК Контрагент,
		|		ТиповойОстатки.Субконто1 КАК Партнер,
		|		ТиповойОстатки.Субконто2 КАК РасчетныйДокумент,
		|		ТиповойОстатки.Организация КАК Организация,
		|		ЕСТЬNULL(ТиповойОстатки.Валюта, &ВалютаРегл) КАК ВалютаВзаиморасчетов,
		|		ВЫБОР
		|			КОГДА ТиповойОстатки.ВалютнаяСуммаОстатокКт = 0
		|				ТОГДА ТиповойОстатки.СуммаОстатокКт
		|			ИНАЧЕ ТиповойОстатки.ВалютнаяСуммаОстатокКт
		|		КОНЕЦ КАК Сумма,
		|		ТиповойОстатки.Субконто2.Дата КАК ДатаРасчетногоДокумента,
		|		ТиповойОстатки.Субконто2.Номер КАК НомерРасчетногоДокумента,
		|		&ДатаОстатковТипДата КАК ДатаПлатежа,
		|		ТиповойОстатки.СуммаОстатокКт КАК СуммаРегл,
		|		""Пассивные"" КАК ПризнакКорректностиОстатков
		|	ИЗ
		|		РегистрБухгалтерии.Типовой.Остатки(
		|				&ДатаОстатковТипДата,
		|				Счет = ЗНАЧЕНИЕ(ПланСчетов.Типовой.КраткосрочныеАвансыПолученные)
		|					ИЛИ Счет = ЗНАЧЕНИЕ(ПланСчетов.Типовой.ДолгосрочныеАвансыПолученные),
		|				,
		|				) КАК ТиповойОстатки
		|
		|	ОБЪЕДИНИТЬ ВСЕ
		|
		|	ВЫБРАТЬ
		|		ТиповойОстатки.Счет,
		|		ТиповойОстатки.Субконто1,
		|		ТиповойОстатки.Субконто1,
		|		ТиповойОстатки.Субконто2,
		|		ТиповойОстатки.Организация,
		|		ЕСТЬNULL(ТиповойОстатки.Валюта, &ВалютаРегл),
		|		ВЫБОР
		|			КОГДА ТиповойОстатки.ВалютнаяСуммаОстатокДт = 0
		|				ТОГДА ТиповойОстатки.СуммаОстатокДт
		|			ИНАЧЕ ТиповойОстатки.ВалютнаяСуммаОстатокДт
		|		КОНЕЦ,
		|		ТиповойОстатки.Субконто2.Дата,
		|		ТиповойОстатки.Субконто2.Номер,
		|		&ДатаОстатковТипДата,
		|		-ТиповойОстатки.СуммаОстатокДт,
		|		""Активные""
		|	ИЗ
		|		РегистрБухгалтерии.Типовой.Остатки(&ДатаОстатковТипДата, Счет В (ЗНАЧЕНИЕ(ПланСчетов.Типовой.КраткосрочныеФинансовыеАктивыПредназначенныеДляТорговли),
		|				ЗНАЧЕНИЕ(ПланСчетов.Типовой.КраткосрочнаяДебиторскаяЗадолженностьПокупателейИЗаказчиков),
		|				ЗНАЧЕНИЕ(ПланСчетов.Типовой.ДолгосрочнаяЗадолженностьПокупателейИЗаказчиков), ЗНАЧЕНИЕ(ПланСчетов.Типовой.КраткосрочныеАвансыПолученные),
		|				ЗНАЧЕНИЕ(ПланСчетов.Типовой.ДолгосрочныеАвансыПолученные),  , ) КАК ТиповойОстатки
		|	ГДЕ
		|		ТиповойОстатки.СуммаОстатокДт < 0) КАК Таб
		|
		|УПОРЯДОЧИТЬ ПО
		|	Организация,
		|	Контрагент,
		|	РасчетныйДокумент
		|;
		|
		|/////////////////////////////// - поставщики долги - /////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТиповойОстатки.Счет,
		|	ТиповойОстатки.Субконто1 КАК Контрагент,
		|	ТиповойОстатки.Субконто1 КАК Партнер,
		|	ТиповойОстатки.Субконто2 КАК РасчетныйДокумент,
		|	ТиповойОстатки.Субконто2.Номер КАК НомерРасчетногоДокумента,
		|	ТиповойОстатки.Субконто2.Дата КАК ДатаРасчетногоДокумента,
		|	ТиповойОстатки.Организация,
		|	ЕСТЬNULL(ТиповойОстатки.Валюта, &ВалютаРегл) КАК ВалютаВзаиморасчетов,
		|	ТиповойОстатки.СуммаОстатокКт КАК СуммаРегл,
		|	ВЫРАЗИТЬ(ТиповойОстатки.СуммаОстатокКт / ВЫБОР
		|		КОГДА ЕСТЬNULL(КурсыВалют.Курс, 0) > 0
		|				И ЕСТЬNULL(КурсыВалют.Кратность, 0) > 0
		|			ТОГДА КурсыВалют.Курс / КурсыВалют.Кратность
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК ЧИСЛО(15,2)) КАК Сумма
		|ИЗ
		|	РегистрБухгалтерии.Типовой.Остатки(
		|			&ДатаОстатковТипДата,
		|			Счет = ЗНАЧЕНИЕ(ПланСчетов.Типовой.КраткосрочнаяЗадолженностьПоставщикамИПодрядчикам)
		|				Или Счет = ЗНАЧЕНИЕ(ПланСчетов.Типовой.КраткосрочнаяЗадолженностьПоАренде)
		|				Или Счет = ЗНАЧЕНИЕ(ПланСчетов.Типовой.ДолгосрочнаяЗадолженностьПоставщикамИПодрядчикам)
		|			,
		|			) КАК ТиповойОстатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалют
		|		ПО ТиповойОстатки.Валюта = КурсыВалют.Валюта
		|ГДЕ
		|	ТиповойОстатки.СуммаОстатокКт > 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	Организация,
		|	Контрагент,
		|	РасчетныйДокумент
		|;
		|
		|/////////////////////////////// - поставщики авансы - /////////////////////////////////////////////////
		|ВЫБРАТЬ *
		|ИЗ
		|	(ВЫБРАТЬ
		|		ТиповойОстатки.Счет,
		|		ТиповойОстатки.Субконто1 КАК Контрагент,
		|		ТиповойОстатки.Субконто1 КАК Партнер,
		|		ТиповойОстатки.Субконто2 КАК РасчетныйДокумент,
		|		ТиповойОстатки.Субконто2.Номер КАК НомерРасчетногоДокумента,
		|		ТиповойОстатки.Субконто2.Дата КАК ДатаРасчетногоДокумента,
		|		ТиповойОстатки.Организация,
		|		ЕСТЬNULL(ТиповойОстатки.Валюта, &ВалютаРегл) КАК ВалютаВзаиморасчетов,
		|		ТиповойОстатки.СуммаОстатокДт КАК СуммаРегл,
		|		ВЫРАЗИТЬ(ТиповойОстатки.СуммаОстатокДт / ВЫБОР
		|			КОГДА ЕСТЬNULL(КурсыВалют.Курс, 0) > 0
		|					И ЕСТЬNULL(КурсыВалют.Кратность, 0) > 0
		|				ТОГДА КурсыВалют.Курс / КурсыВалют.Кратность
		|			ИНАЧЕ 1
		|		КОНЕЦ КАК ЧИСЛО(15,2)) КАК Сумма,
		|		""Активные"" КАК ПризнакКорректностиОстатков
		|	ИЗ
		|		РегистрБухгалтерии.Типовой.Остатки(
		|				&ДатаОстатковТипДата,
		|				Счет = ЗНАЧЕНИЕ(ПланСчетов.Типовой.КраткосрочныеАвансыВыданные)
		|					ИЛИ Счет = ЗНАЧЕНИЕ(ПланСчетов.Типовой.ДолгосрочныеАвансыВыданные),
		|				,
		|				) КАК ТиповойОстатки
		|			ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалют
		|			ПО ТиповойОстатки.Валюта = КурсыВалют.Валюта
		|
		|	ОБЪЕДИНИТЬ ВСЕ
		|
		|	ВЫБРАТЬ
		|		ТиповойОстатки.Счет,
		|		ТиповойОстатки.Субконто1,
		|		ТиповойОстатки.Субконто1,
		|		ТиповойОстатки.Субконто2,
		|		ТиповойОстатки.Субконто2.Номер,
		|		ТиповойОстатки.Субконто2.Дата,
		|		ТиповойОстатки.Организация,
		|		ЕСТЬNULL(ТиповойОстатки.Валюта, &ВалютаРегл),
		|		ТиповойОстатки.СуммаОстатокКт,
		|		ВЫРАЗИТЬ(ТиповойОстатки.СуммаОстатокКт / ВЫБОР
		|			КОГДА ЕСТЬNULL(КурсыВалют.Курс, 0) > 0
		|					И ЕСТЬNULL(КурсыВалют.Кратность, 0) > 0
		|				ТОГДА КурсыВалют.Курс / КурсыВалют.Кратность
		|			ИНАЧЕ 1
		|		КОНЕЦ КАК ЧИСЛО(15, 2)),
		|		""Пассивные""
		|	ИЗ
		|		РегистрБухгалтерии.Типовой.Остатки(&ДатаОстатковТипДата, Счет В (ЗНАЧЕНИЕ(ПланСчетов.Типовой.КраткосрочнаяЗадолженностьПоставщикамИПодрядчикам),
		|				ЗНАЧЕНИЕ(ПланСчетов.Типовой.КраткосрочнаяЗадолженностьПоАренде),
		|				ЗНАЧЕНИЕ(ПланСчетов.Типовой.ДолгосрочнаяЗадолженностьПоставщикамИПодрядчикам), ЗНАЧЕНИЕ(ПланСчетов.Типовой.КраткосрочныеАвансыВыданные),
		|					ЗНАЧЕНИЕ(ПланСчетов.Типовой.ДолгосрочныеАвансыВыданные)), , ) КАК ТиповойОстатки
		|			ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалют
		|			ПО ТиповойОстатки.Валюта = КурсыВалют.Валюта
		|	ГДЕ
		|		ТиповойОстатки.СуммаОстатокКт < 0) КАК Таб
		|
		|УПОРЯДОЧИТЬ ПО
		|	Организация,
		|	Контрагент,
		|	РасчетныйДокумент
		|;
		|
		|///////////////////////////////// - кредиты и займы - ///////////////////////////////////////////////
		|ВЫБРАТЬ *
		|ИЗ
		|	(ВЫБРАТЬ
		|		ТиповойОстатки.Счет,
		|		ТиповойОстатки.Субконто1 КАК Контрагент,
		|		ТиповойОстатки.Субконто1 КАК Партнер,
		|		ТиповойОстатки.Субконто2 КАК РасчетныйДокумент,
		|		ТиповойОстатки.Субконто2 КАК Договор,
		|		ТиповойОстатки.Субконто2.Номер КАК НомерРасчетногоДокумента,
		|		ТиповойОстатки.Субконто2.Дата КАК ДатаРасчетногоДокумента,
		|		ТиповойОстатки.Организация,
		|		ЕСТЬNULL(ТиповойОстатки.Валюта, &ВалютаРегл) КАК ВалютаВзаиморасчетов,
		|		ТиповойОстатки.СуммаОстатокКт КАК СуммаРегл,
		|		ВЫРАЗИТЬ(ТиповойОстатки.СуммаОстатокКт / ВЫБОР
		|			КОГДА ЕСТЬNULL(КурсыВалют.Курс, 0) > 0
		|					И ЕСТЬNULL(КурсыВалют.Кратность, 0) > 0
		|				ТОГДА КурсыВалют.Курс / КурсыВалют.Кратность
		|			ИНАЧЕ 1
		|		КОНЕЦ КАК ЧИСЛО(15,2)) КАК Сумма,
		|		""Краткосрочный"" КАК ТипСрочности,
		|		ТиповойОстатки.Счет КАК ВидРасчетов
		|	ИЗ
		|		РегистрБухгалтерии.Типовой.Остатки(&ДатаОстатковТипДата, Счет В (ЗНАЧЕНИЕ(ПланСчетов.Типовой.КраткосрочныеБанковскиеЗаймы)), , ) КАК ТиповойОстатки
		|			ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалют
		|			ПО ТиповойОстатки.Валюта = КурсыВалют.Валюта
		|
		|	ОБЪЕДИНИТЬ ВСЕ
		|
		|	ВЫБРАТЬ
		|		ТиповойОстатки.Счет,
		|		ТиповойОстатки.Субконто1,
		|		ТиповойОстатки.Субконто1,
		|		ТиповойОстатки.Субконто2,
		|		ТиповойОстатки.Субконто2,
		|		ТиповойОстатки.Субконто2.Номер,
		|		ТиповойОстатки.Субконто2.Дата,
		|		ТиповойОстатки.Организация,
		|		ЕСТЬNULL(ТиповойОстатки.Валюта, &ВалютаРегл),
		|		ТиповойОстатки.СуммаОстатокКт,
		|		ВЫРАЗИТЬ(ТиповойОстатки.СуммаОстатокКт / ВЫБОР
		|			КОГДА ЕСТЬNULL(КурсыВалют.Курс, 0) > 0
		|					И ЕСТЬNULL(КурсыВалют.Кратность, 0) > 0
		|				ТОГДА КурсыВалют.Курс / КурсыВалют.Кратность
		|			ИНАЧЕ 1
		|		КОНЕЦ КАК ЧИСЛО(15,2)),
		|		""Долгосрочный"",
		|		ТиповойОстатки.Счет
		|	ИЗ
		|		РегистрБухгалтерии.Типовой.Остатки(&ДатаОстатковТипДата, Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Типовой.ДолгосрочныеБанковскиеЗаймы)), , ) КАК ТиповойОстатки
		|			ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалют
		|			ПО ТиповойОстатки.Валюта = КурсыВалют.Валюта) КАК Таб
		|
		|УПОРЯДОЧИТЬ ПО
		|	Организация,
		|	Контрагент,
		|	РасчетныйДокумент";
		
	Запрос.УстановитьПараметр("ДатаОстатков", Новый Граница(ДатаОстатков, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ДатаОстатковТипДата", ДатаОстатков);
	Запрос.УстановитьПараметр("ВалютаРегл",   Константы.ВалютаРегламентированногоУчета.Получить());
	
	Результаты = Запрос.ВыполнитьПакет();
	СтруктураПараметров = ПараметрыКонвертации.ТаблицаДолгиАвансыКредитыЗаймы;
	
	// порядок в пакете следующий: ДолгиКлиенты,АвансыКлиенты,ДолгиПоставщики,АвансыПоставщики,КредитыЗаймыРез
	
	СтруктураПараметров.ДолгиКлиенты     = Результаты[Результаты.Количество()-5].Выгрузить();
	СтруктураПараметров.АвансыКлиенты    = Результаты[Результаты.Количество()-4].Выгрузить();
	СтруктураПараметров.ДолгиПоставщики  = Результаты[Результаты.Количество()-3].Выгрузить();
	СтруктураПараметров.АвансыПоставщики = Результаты[Результаты.Количество()-2].Выгрузить();
	СтруктураПараметров.КредитыЗаймы     = Результаты[Результаты.Количество()-1].Выгрузить();
КонецПроцедуры
Процедура ЗаполнитьКорректировкуПоступленияПоОснованию(Объект, ДокументПоступления, ИсправляемыйДокументПоступления)
	Объект.ДокументПоступления = ДокументПоступления;
	Объект.ИсправляемыйДокументПоступления = ИсправляемыйДокументПоступления;
	Объект.Товары.Очистить();
	Объект.Услуги.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Объект.ДокументПоступления);
	
	ТипЗнчДокументаПоступления = ТипЗнч(Объект.ДокументПоступления);
	
	Если ТипЗнчДокументаПоступления = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
		
		ЗаполнитьЗначенияСвойств(
			Объект, Объект.ДокументПоступления,
			"Организация, Контрагент, ДоговорКонтрагента, ВалютаДокумента, 
			| Склад, СуммаДокумента, СуммаВключаетНДС");
			
		Запрос.Текст = "ВЫБРАТЬ
			|	ВозвратТоваровОтПокупателяТовары.Номенклатура,
			|	ВозвратТоваровОтПокупателяТовары.Количество КАК КоличествоДоКорректировки,
			|	ВозвратТоваровОтПокупателяТовары.Количество КАК КоличествоДоИзменения,
			|	ВозвратТоваровОтПокупателяТовары.Количество КАК Количество,
			|	ВозвратТоваровОтПокупателяТовары.Цена КАК ЦенаДоКорректировки,
			|	ВозвратТоваровОтПокупателяТовары.Цена КАК ЦенаДоИзменения,
			|	ВозвратТоваровОтПокупателяТовары.Цена КАК Цена,
			|	ВозвратТоваровОтПокупателяТовары.Сумма КАК СуммаДоКорректировки,
			|	ВозвратТоваровОтПокупателяТовары.Сумма КАК СуммаДоИзменения,
			|	ВозвратТоваровОтПокупателяТовары.Сумма КАК Сумма,
			|	ВозвратТоваровОтПокупателяТовары.СтавкаНДС КАК СтавкаНДСДоИзменения,
			|	ВозвратТоваровОтПокупателяТовары.СтавкаНДС КАК СтавкаНДС,
			|	ВозвратТоваровОтПокупателяТовары.СуммаНДС КАК СуммаНДСДоКорректировки,
			|	ВозвратТоваровОтПокупателяТовары.СуммаНДС КАК СуммаНДСДоИзменения,
			|	ВозвратТоваровОтПокупателяТовары.СуммаНДС КАК СуммаНДС,
			|	ВозвратТоваровОтПокупателяТовары.СчетУчета КАК СчетУчета,
			|	ВозвратТоваровОтПокупателяТовары.НомерГТД КАК НомерГТДДоИзменения,
			|	ВозвратТоваровОтПокупателяТовары.НомерГТД КАК НомерГТД,
			|	ВозвратТоваровОтПокупателяТовары.СтранаПроисхождения КАК СтранаПроисхожденияДоИзменения,
			|	ВозвратТоваровОтПокупателяТовары.СтранаПроисхождения КАК СтранаПроисхождения,
			|	ВозвратТоваровОтПокупателяТовары.СпособУчетаНДС,
			|	ВозвратТоваровОтПокупателяТовары.ОтражениеВУСН,
			|	ВозвратТоваровОтПокупателяТовары.СчетУчетаНДСПоРеализации КАК СчетУчетаНДС
			|ИЗ
			|	Документ.ВозвратТоваровОтПокупателя.Товары КАК ВозвратТоваровОтПокупателяТовары
			|ГДЕ
			|	ВозвратТоваровОтПокупателяТовары.Ссылка = &Ссылка";
			
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			НоваяСтрока = Объект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,Выборка);
		КонецЦикла;
		
	ИначеЕсли ТипЗнчДокументаПоступления = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
		
		ЗаполнитьЗначенияСвойств(
			Объект, Объект.ДокументПоступления,
			"Организация, Контрагент, ДоговорКонтрагента, ВалютаДокумента, 
			| Склад, СуммаДокумента, СуммаВключаетНДС");
	
		Запрос.Текст = "ВЫБРАТЬ
			|	ВозвратТоваровПоставщику.Номенклатура,
			|	ВозвратТоваровПоставщику.Количество КАК КоличествоДоКорректировки,
			|	ВозвратТоваровПоставщику.Количество КАК КоличествоДоИзменения,
			|	ВозвратТоваровПоставщику.Количество КАК Количество,
			|	ВозвратТоваровПоставщику.Цена КАК ЦенаДоКорректировки,
			|	ВозвратТоваровПоставщику.Цена КАК ЦенаДоИзменения,
			|	ВозвратТоваровПоставщику.Цена КАК Цена,
			|	ВозвратТоваровПоставщику.Сумма КАК СуммаДоКорректировки,
			|	ВозвратТоваровПоставщику.Сумма КАК СуммаДоИзменения,
			|	ВозвратТоваровПоставщику.Сумма КАК Сумма,
			|	ВозвратТоваровПоставщику.СтавкаНДС КАК СтавкаНДСДоИзменения,
			|	ВозвратТоваровПоставщику.СтавкаНДС КАК СтавкаНДС,
			|	ВозвратТоваровПоставщику.СуммаНДС КАК СуммаНДСДоКорректировки,
			|	ВозвратТоваровПоставщику.СуммаНДС КАК СуммаНДСДоИзменения,
			|	ВозвратТоваровПоставщику.СуммаНДС КАК СуммаНДС,
			|	ВозвратТоваровПоставщику.СчетУчета КАК СчетУчета,
			|	ВозвратТоваровПоставщику.НомерГТД КАК НомерГТДДоИзменения,
			|	ВозвратТоваровПоставщику.НомерГТД КАК НомерГТД,
			|	ВозвратТоваровПоставщику.СтранаПроисхождения КАК СтранаПроисхожденияДоИзменения,
			|	ВозвратТоваровПоставщику.СтранаПроисхождения КАК СтранаПроисхождения,
			|	ВозвратТоваровПоставщику.ЦенаВРознице КАК ЦенаВРознице,
			|	ВозвратТоваровПоставщику.СуммаВРознице КАК СуммаВРознице,
			|	ВозвратТоваровПоставщику.СтавкаНДСВРознице КАК СтавкаНДСВРознице,
			|	ВозвратТоваровПоставщику.СчетУчетаНДС КАК СчетУчетаНДС,
			|	ВозвратТоваровПоставщику.Контрагент КАК Контрагент,
			|	ВозвратТоваровПоставщику.ДоговорКонтрагента КАК ДоговорКонтрагента,
			|	ВозвратТоваровПоставщику.СчетРасчетов КАК СчетРасчетов
			|ИЗ
			|	Документ.ВозвратТоваровПоставщику.Товары КАК ВозвратТоваровПоставщику
			|ГДЕ
			|	ВозвратТоваровПоставщику.Ссылка = &Ссылка";
			
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			НоваяСтрока = Объект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,Выборка);
		КонецЦикла;
		
	ИначеЕсли ТипЗнчДокументаПоступления = Тип("ДокументСсылка.ГТДИмпорт") Тогда
		
		ЗаполнитьЗначенияСвойств(
			Объект, Объект.ДокументПоступления, 
			"Организация, Контрагент, ДоговорКонтрагента, ВалютаДокумента");
			
		Запрос.Текст = "ВЫБРАТЬ
			|	&Содержание КАК СодержаниеДоИзменения,
			|	&Содержание КАК Содержание,
			|	ГТДИмпортТовары.СуммаПошлины КАК СуммаДоКорректировки,
			|	ГТДИмпортТовары.СуммаПошлины КАК СуммаДоИзменения,
			|	ГТДИмпортТовары.СуммаПошлины КАК Сумма,
			|	ГТДИмпортРазделы.СтавкаНДС КАК СтавкаНДСДоИзменения,
			|	ГТДИмпортРазделы.СтавкаНДС КАК СтавкаНДС,
			|	ГТДИмпортТовары.СуммаНДС КАК СуммаНДСДоКорректировки,
			|	ГТДИмпортТовары.СуммаНДС КАК СуммаНДСДоИзменения,
			|	ГТДИмпортТовары.СуммаНДС КАК СуммаНДС,
			|	ГТДИмпортТовары.ДокументПартии,
			|	ГТДИмпортТовары.СчетУчета КАК СчетЗатрат,
			|	ГТДИмпортТовары.Номенклатура КАК Субконто1,
			|	ГТДИмпортТовары.СчетУчетаНУ КАК СчетЗатратНУ,
			|	ГТДИмпортТовары.Номенклатура КАК СубконтоНУ1,
			|	ГТДИмпортТовары.СтатьяЗатратНУ,
			|	ГТДИмпортТовары.СчетУчетаНДС КАК СчетУчетаНДС,
			|	ГТДИмпортТовары.СпособУчетаНДС
			|ИЗ
			|	Документ.ГТДИмпорт.Товары КАК ГТДИмпортТовары
			|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ГТДИмпорт.Разделы КАК ГТДИмпортРазделы
			|		ПО ГТДИмпортТовары.НомерРаздела = ГТДИмпортРазделы.НомерСтроки
			|			И ГТДИмпортТовары.Ссылка = ГТДИмпортРазделы.Ссылка
			|ГДЕ
			|	ГТДИмпортТовары.Ссылка = &Ссылка";
			
		Запрос.УстановитьПараметр("Содержание", НСтр("ru = 'Таможенная пошлина'"));	
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			НоваяСтрока = Объект.Услуги.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
Процедура ЗаполнитьКорректировкуРеализацииПоОснованию(Объект, ДокументРеализации, ИсправляемыйДокументРеализации)
	Объект.ДокументРеализации = ДокументРеализации;
	Объект.ИсправляемыйДокументРеализации = ИсправляемыйДокументРеализации;
	Объект.Товары.Очистить();
	Объект.Услуги.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Объект.ДокументРеализации);
	
	ТипЗнчДокументаРеализации = ТипЗнч(Объект.ДокументРеализации);
	
	Если ТипЗнчДокументаРеализации = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
		
		ЗаполнитьЗначенияСвойств(
			Объект, Объект.ДокументРеализации,
			"Организация, Контрагент, ДоговорКонтрагента, ВалютаДокумента, 
			| Склад, СуммаДокумента, СуммаВключаетНДС");
			
		Запрос.Текст = "ВЫБРАТЬ
			|	ВозвратТоваровОтПокупателяТовары.Номенклатура,
			|	ВозвратТоваровОтПокупателяТовары.Количество КАК КоличествоДоКорректировки,
			|	ВозвратТоваровОтПокупателяТовары.Количество КАК КоличествоДоИзменения,
			|	ВозвратТоваровОтПокупателяТовары.Количество КАК Количество,
			|	ВозвратТоваровОтПокупателяТовары.Цена КАК ЦенаДоКорректировки,
			|	ВозвратТоваровОтПокупателяТовары.Цена КАК ЦенаДоИзменения,
			|	ВозвратТоваровОтПокупателяТовары.Цена КАК Цена,
			|	ВозвратТоваровОтПокупателяТовары.Сумма КАК СуммаДоКорректировки,
			|	ВозвратТоваровОтПокупателяТовары.Сумма КАК СуммаДоИзменения,
			|	ВозвратТоваровОтПокупателяТовары.Сумма КАК Сумма,
			|	ВозвратТоваровОтПокупателяТовары.СтавкаНДС КАК СтавкаНДСДоИзменения,
			|	ВозвратТоваровОтПокупателяТовары.СтавкаНДС КАК СтавкаНДС,
			|	ВозвратТоваровОтПокупателяТовары.СуммаНДС КАК СуммаНДСДоКорректировки,
			|	ВозвратТоваровОтПокупателяТовары.СуммаНДС КАК СуммаНДСДоИзменения,
			|	ВозвратТоваровОтПокупателяТовары.СуммаНДС КАК СуммаНДС,
			|	ВозвратТоваровОтПокупателяТовары.СчетУчета КАК СчетУчета,
			|	ВозвратТоваровОтПокупателяТовары.СчетДоходов КАК СчетДоходов,
			|	ВозвратТоваровОтПокупателяТовары.Субконто КАК Субконто,
			|	ВозвратТоваровОтПокупателяТовары.СчетРасходов КАК СчетРасходов,
			|	ВозвратТоваровОтПокупателяТовары.СчетУчетаНДСПоРеализации КАК СчетУчетаНДС,
			|	ВозвратТоваровОтПокупателяТовары.СтранаПроисхождения КАК СтранаПроисхожденияДоИзменения,
			|	ВозвратТоваровОтПокупателяТовары.СтранаПроисхождения КАК СтранаПроисхождения
			|ИЗ
			|	Документ.ВозвратТоваровОтПокупателя.Товары КАК ВозвратТоваровОтПокупателяТовары
			|ГДЕ
			|	ВозвратТоваровОтПокупателяТовары.Ссылка = &Ссылка";
			
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			НоваяСтрока = Объект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,Выборка);
		КонецЦикла;
		
	ИначеЕсли ТипЗнчДокументаРеализации = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
		
		ЗаполнитьЗначенияСвойств(
			Объект, Объект.ДокументРеализации,
			"Организация, Контрагент, ДоговорКонтрагента, ВалютаДокумента, 
			| Склад, СуммаДокумента, СуммаВключаетНДС");
	
		Запрос.Текст = "ВЫБРАТЬ
			|	ВозвратТоваровПоставщикуТовары.Номенклатура,
			|	ВозвратТоваровПоставщикуТовары.Количество КАК КоличествоДоКорректировки,
			|	ВозвратТоваровПоставщикуТовары.Количество КАК КоличествоДоИзменения,
			|	ВозвратТоваровПоставщикуТовары.Количество КАК Количество,
			|	ВозвратТоваровПоставщикуТовары.Цена КАК ЦенаДоКорректировки,
			|	ВозвратТоваровПоставщикуТовары.Цена КАК ЦенаДоИзменения,
			|	ВозвратТоваровПоставщикуТовары.Цена КАК Цена,
			|	ВозвратТоваровПоставщикуТовары.Сумма КАК СуммаДоКорректировки,
			|	ВозвратТоваровПоставщикуТовары.Сумма КАК СуммаДоИзменения,
			|	ВозвратТоваровПоставщикуТовары.Сумма КАК Сумма,
			|	ВозвратТоваровПоставщикуТовары.СтавкаНДС КАК СтавкаНДСДоИзменения,
			|	ВозвратТоваровПоставщикуТовары.СтавкаНДС КАК СтавкаНДС,
			|	ВозвратТоваровПоставщикуТовары.СуммаНДС КАК СуммаНДСДоКорректировки,
			|	ВозвратТоваровПоставщикуТовары.СуммаНДС КАК СуммаНДСДоИзменения,
			|	ВозвратТоваровПоставщикуТовары.СуммаНДС КАК СуммаНДС,
			|	ВозвратТоваровПоставщикуТовары.СчетУчета КАК СчетУчета,
			|	ВозвратТоваровПоставщику.СчетУчетаДоходов КАК СчетДоходов,
			|	ВозвратТоваровПоставщику.СчетУчетаРасходов КАК СчетРасходов,
			|	ВозвратТоваровПоставщикуТовары.СчетУчетаНДС КАК СчетУчетаНДСПоРеализации,
			|	ВозвратТоваровПоставщикуТовары.СтранаПроисхождения КАК СтранаПроисхожденияДоИзменения,
			|	ВозвратТоваровПоставщикуТовары.СтранаПроисхождения КАК СтранаПроисхождения
			|ИЗ
			|	Документ.ВозвратТоваровПоставщику.Товары КАК ВозвратТоваровПоставщикуТовары
			|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровПоставщику КАК ВозвратТоваровПоставщику
			|		ПО ВозвратТоваровПоставщикуТовары.Ссылка = ВозвратТоваровПоставщику.Ссылка
			|ГДЕ
			|	ВозвратТоваровПоставщикуТовары.Ссылка = &Ссылка";
			
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			НоваяСтрока = Объект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,Выборка);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры
Процедура ЗаполнитьКурсИКратностьВзаиморасчетов(ПолученныеДанные)
	Если (ЗначениеЗаполнено(ПолученныеДанные.КурсВзаиморасчетов) И ЗначениеЗаполнено(ПолученныеДанные.КратностьВзаиморасчетов))
		ИЛИ НЕ ЗначениеЗаполнено(ПолученныеДанные.ВалютаДокумента) Тогда
		Возврат;
	КонецЕсли;
	СтруктураКурсаВзаиморасчетов = ОбщегоНазначенияБК.ПолучитьКурсВалюты(ПолученныеДанные.ВалютаДокумента, ПолученныеДанные.Дата);
		
	ПолученныеДанные.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
	ПолученныеДанные.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
КонецПроцедуры
Процедура ЗаполнитьМассивВыборкиДолгиАвансыКредитыЗаймы(МассивВыборки, ПараметрыКонвертации, ИмяТаблицы)
	// "ДолгиКлиенты,АвансыКлиенты,ДолгиПоставщики,АвансыПоставщики,КредитыЗаймыРез"
	
	ДатаОстатков = ПараметрыКонвертации.ДатаОстатков;
	
	ТаблицаОстатков = ПараметрыКонвертации.ТаблицаДолгиАвансыКредитыЗаймы[ИмяТаблицы];
	
	ТекущаяОрганизация = Неопределено;
	ДанныеИБ = Неопределено;
	
	Для Каждого Строка Из ТаблицаОстатков Цикл
		Если ТекущаяОрганизация = Неопределено Или Строка.Организация <> ТекущаяОрганизация Тогда
			ТекущаяОрганизация = Строка.Организация;
			
			Если ДанныеИБ <> Неопределено Тогда
				МассивВыборки.Добавить(ДанныеИБ);
			КонецЕсли;
					
			ДанныеИБ = Новый Структура("Дата, Организация, Расчеты");
			ДанныеИБ.Дата = ДатаОстатков;
			ДанныеИБ.Организация = Строка.Организация;
			
			ДанныеИБ.Расчеты = Новый ТаблицаЗначений;
			Колонки = ДанныеИБ.Расчеты.Колонки;
			Колонки.Добавить("Контрагент");
			Колонки.Добавить("ВалютаВзаиморасчетов");
			Колонки.Добавить("СуммаРегл");
			Колонки.Добавить("Сумма");
			Колонки.Добавить("ВидРасчетов");
			Колонки.Добавить("РасчетныйДокумент");
			Колонки.Добавить("ДатаРасчетногоДокумента");
			Колонки.Добавить("НомерРасчетногоДокумента");
		КонецЕсли;
		
		Если Строка.Сумма <= 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ДанныеИБ.Расчеты.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		
		Если НоваяСтрока.СуммаРегл = 0 Или Не ЗначениеЗаполнено(НоваяСтрока.СуммаРегл) Тогда
			НоваяСтрока.СуммаРегл = НоваяСтрока.Сумма;
		КонецЕсли;		
		
	КонецЦикла;
	
	Если ДанныеИБ <> Неопределено И ДанныеИБ.Расчеты.Количество()>0 Тогда
		МассивВыборки.Добавить(ДанныеИБ);
	КонецЕсли;
КонецПроцедуры
Процедура ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ, МассивИсключений = Неопределено)
	Для Каждого СвойствоОбъекта ИЗ КонвертацияСвойств Цикл
		СвойствоИБ = СвойствоОбъекта.СвойствоКонфигурации;
		Если СокрЛП(СвойствоИБ) = "" Тогда
			Продолжить;
		КонецЕсли;
		Если МассивИсключений <> Неопределено И МассивИсключений.Найти(СвойствоИБ) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ДанныеИБ[СвойствоИБ] = ПолученныеДанные[СвойствоИБ];
	КонецЦикла;
КонецПроцедуры
Процедура ЗаполнитьСтрокуКонтактнойИнформацией(СтрокаКИ)
	//XDTOКонтактная = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияИзXML(СтрокаКИ.ЗначенияПолей, СтрокаКИ.Тип, );
	//Если СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон
	//	ИЛИ СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Факс Тогда
	//	СтрокаКИ.НомерТелефона = XDTOКонтактная.Представление;
	//	СтрокаКИ.НомерТелефонаБезКодов = XDTOКонтактная.Состав.Номер;
	//ИначеЕсли СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
	//	СтрокаКИ.Страна = XDTOКонтактная.Состав.Страна;
	//	Если ТипЗнч(XDTOКонтактная.Состав.Состав) <> Тип("Строка") Тогда
	//		СтрокаКИ.Регион = XDTOКонтактная.Состав.Состав.СубъектРФ;
	//		СтрокаКИ.Город = XDTOКонтактная.Состав.Состав.Город;
	//	КонецЕсли;
	//ИначеЕсли СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
	//	СтрокаКИ.АдресЭП = XDTOКонтактная.Состав.Значение;
	//	ПозицияСобаки = Найти(XDTOКонтактная.Состав.Значение, "@");
	//	Если ПозицияСобаки <> 0 Тогда
	//		СтрокаКИ.ДоменноеИмяСервера = Сред(XDTOКонтактная.Состав.Значение, ПозицияСобаки + 1);
	//	КонецЕсли;
	//КонецЕсли;
	//СтрокаКИ.Представление = XDTOКонтактная.Представление;
КонецПроцедуры
Процедура ЗаполнитьСтруктуруДанныхСтроки(СоответствиеРеквизитовТЧ, СтрокаXDTO, СтруктураДанныхСтроки)
	Для Каждого ЭлементСоответствия ИЗ СоответствиеРеквизитовТЧ Цикл
		ЗначениеРеквизитаТЧ = СтрокаXDTO[ЭлементСоответствия.Значение];
		Если НЕ ЗначениеЗаполнено(ЗначениеРеквизитаТЧ) Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураДанныхСтроки.Вставить(ЭлементСоответствия.Ключ,ЗначениеРеквизитаТЧ); 
	КонецЦикла;
КонецПроцедуры
Процедура ЗаполнитьСчетаУчетаВозвратнойТары(Объект)
	Для Каждого СтрокаТаблицы Из Объект.ВозвратнаяТара Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура) Тогда
			Продолжить;
		КонецЕсли; 
		
		СчетаУчета = ПроцедурыБухгалтерскогоУчета.ПолучитьСчетаУчетаНоменклатуры(	Объект.Организация,
																						СтрокаТаблицы.Номенклатура,
																						Объект.Склад);
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.СчетУчета) Тогда
			СтрокаТаблицы.СчетУчета = СчетаУчета.СчетУчета;
		КонецЕсли;
		
	КонецЦикла;
КонецПроцедуры
Процедура ЗаполнитьСчетУчетаРасчетовВПрочейОперацииДДС(ПолученныеДанные, ДанныеXDTO)
	//ПолученныеДанные.СчетУчетаРасчетовСКонтрагентомБУ = ПланыСчетов.Хозрасчетный.Вспомогательный;
	
	// Счет расчетов может быть указан в расшифровке платежа.
	Если ДанныеXDTO.РасшифровкаПлатежа.Колонки.Найти("СчетУчетаРасчетов") <> Неопределено Тогда
		
		СчетУчетаРасчетов = ДанныеXDTO.РасшифровкаПлатежа[0].СчетУчетаРасчетов;
		Если ЗначениеЗаполнено(СчетУчетаРасчетов) Тогда
			СчетСсылка = ПланыСчетов.Типовой.НайтиПоКоду(СчетУчетаРасчетов);
			Если ЗначениеЗаполнено(СчетСсылка) Тогда
				ПолученныеДанные.СчетУчетаРасчетовСКонтрагентомБУ = СчетСсылка;
			КонецЕсли;
		КонецЕсли;
		
	// Счет расходов может быть указан в расшифровке платежа.
	ИначеЕсли ДанныеXDTO.РасшифровкаПлатежа.Колонки.Найти("СчетРасходов") <> Неопределено Тогда
		
		СчетРасходов = ДанныеXDTO.РасшифровкаПлатежа[0].СчетРасходов;
		Если ЗначениеЗаполнено(СчетРасходов) Тогда
			СчетСсылка = ПланыСчетов.Типовой.НайтиПоКоду(СчетРасходов);
			Если ЗначениеЗаполнено(СчетСсылка) Тогда
				ПолученныеДанные.СчетУчетаРасчетовСКонтрагентомБУ = СчетСсылка;
			КонецЕсли;
		КонецЕсли;
		
	// Счет доходов может быть указан в расшифровке платежа.
	ИначеЕсли ДанныеXDTO.РасшифровкаПлатежа.Колонки.Найти("СчетДоходов") <> Неопределено Тогда
		
		СчетДоходов = ДанныеXDTO.РасшифровкаПлатежа[0].СчетДоходов;
		Если ЗначениеЗаполнено(СчетДоходов) Тогда
			СчетСсылка = ПланыСчетов.Типовой.НайтиПоКоду(СчетДоходов);
			Если ЗначениеЗаполнено(СчетСсылка) Тогда
				ПолученныеДанные.СчетУчетаРасчетовСКонтрагентомБУ = СчетСсылка;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры
Процедура ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(ТабличнаяЧастьОбъектаПослеОбработки, ТабличнаяЧастьОбъектаДоОбработки, КолонкиДляВключения = "", КолонкиДляИсключения = "")
	ОбменДаннымиXDTOСервер.ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ТабличнаяЧастьОбъектаПослеОбработки, 
		ТабличнаяЧастьОбъектаДоОбработки, 
		КолонкиДляВключения, 
		КолонкиДляИсключения);
КонецПроцедуры
Функция КонтрагентРозничныйПокупатель(КомпонентыОбмена)
	ПараметрыКонвертации = КомпонентыОбмена.ПараметрыКонвертации;
	Если ЗначениеЗаполнено(ПараметрыКонвертации.КонтрагентРозничныйПокупатель) Тогда
		Возврат ПараметрыКонвертации.КонтрагентРозничныйПокупатель;
	КонецЕсли;
	
	Элемент = Справочники.Контрагенты.ПустаяСсылка();
	
	НаименованиеЭлементаДляОбменаПоУмолчанию = НСтр("ru='Розничный покупатель'");
	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|Контрагенты.Ссылка
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	НЕ Контрагенты.ПометкаУдаления
		|	И Контрагенты.Наименование = &НаименованиеЭлементаДляОбменаПоУмолчанию");
	
	Запрос.УстановитьПараметр("НаименованиеЭлементаДляОбменаПоУмолчанию", НаименованиеЭлементаДляОбменаПоУмолчанию);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Элемент = Выборка.Ссылка;
	Иначе
	
		// Создание элемента для обмена с заданными параметрами
		КонтрагентОбъект = Справочники.Контрагенты.СоздатьЭлемент();
		КонтрагентОбъект.Наименование = НаименованиеЭлементаДляОбменаПоУмолчанию;
		КонтрагентОбъект.НаименованиеПолное = КонтрагентОбъект.Наименование;
		КонтрагентОбъект.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо;
		КонтрагентОбъект.СтранаРезидентства = Справочники.КлассификаторСтранМира.Казахстан;
		КонтрагентОбъект.УстановитьНовыйКод();
	
		Попытка
			КонтрагентОбъект.Записать();
			Элемент = КонтрагентОбъект.Ссылка;
		Исключение
		КонецПопытки
		
	КонецЕсли;
	
	ПараметрыКонвертации.КонтрагентРозничныйПокупатель = Элемент;
	
	Возврат Элемент
КонецФункции
Процедура НазначитьТипДляГруппыНумерованнойАналитикиСчета(СтрокаТЧ, Счет, ИмяСубконто, КоличествоАналитики)
	ВидыСубконтоСчета = Счет.ВидыСубконто;
	
	Для Ном = 1 по КоличествоАналитики Цикл		
		
		ВидыСубконтоСчета = Счет.ВидыСубконто;
		
		Если Ном <= ВидыСубконтоСчета.Количество() тогда		
			ОграничениеТипа = ВидыСубконтоСчета [Ном - 1].ВидСубконто.ТипЗначения;		
			СтрокаТч[ИмяСубконто + Ном]  = ОграничениеТипа.ПривестиЗначение(СтрокаТч[ИмяСубконто + Ном]);							
		Иначе
			СтрокаТч[ИмяСубконто + Ном] = Неопределено;
		КонецЕсли; 	
		
	КонецЦикла;
КонецПроцедуры
Функция НомерКартСчетаПоУмолчанию()
	НаименованиеПоУмолчанию = НСтр("ru = '<Обобщённый счёт>'");
	НомерКартСчетаПоУмолчанию = НСтр("ru = '12345678912345678912'");
	
	КартСчет = Справочники.КартСчета.НайтиПоНаименованию(НаименованиеПоУмолчанию);
	Если НЕ ЗначениеЗаполнено(КартСчет) Тогда
		НовыйКартСчет = Справочники.КартСчета.СоздатьЭлемент();
		НовыйКартСчет.Наименование = НаименованиеПоУмолчанию;
		НовыйКартСчет.НомерСчета = НомерКартСчетаПоУмолчанию;
		НовыйКартСчет.Банк = БанкПоУмолчанию();
		НовыйКартСчет.Владелец = ФизическоеЛицоПоУмолчанию();
		НовыйКартСчет.Записать();
		КартСчет = НовыйКартСчет.Ссылка;
	КонецЕсли;
	
	Возврат КартСчет;
КонецФункции
Процедура ОбнулениеСчетовУчетаРасчетовВДанныхИБ(ПолученныеДанные, ДанныеИБ)
	Если ПолученныеДанные.Организация <> ДанныеИБ.Организация
		И ПолученныеДанные.Контрагент <> ДанныеИБ.Контрагент
		И ПолученныеДанные.ДоговорКонтрагента <> ДанныеИБ.ДоговорКонтрагента Тогда
		
		ДанныеИБ.СчетУчетаРасчетовСКонтрагентом = Неопределено;
		
		Если ДанныеИБ.Метаданные().Реквизиты.Найти("СчетУчетаРасчетовПоАвансам") <> Неопределено Тогда
			ДанныеИБ.СчетУчетаРасчетовПоАвансам = Неопределено;
		КонецЕсли;
		
		Если ДанныеИБ.Метаданные().Реквизиты.Найти("СчетУчетаРасчетовПоВозвратам") <> Неопределено Тогда
			ДанныеИБ.СчетУчетаРасчетовПоВозвратам = Неопределено;
		КонецЕсли;	
		
	КонецЕсли;
КонецПроцедуры
Процедура ОбработатьКонтактнуюИнформациюПриПолучении(СсылкаНаОбъект, ПолученныеДанные)
	Если ПолученныеДанные.ДополнительныеСвойства.Свойство("КонтактнаяИнформация")
		И ЗначениеЗаполнено(ПолученныеДанные.ДополнительныеСвойства.КонтактнаяИнформация) Тогда
	
		ЭтоКонтрагент     = (ТипЗнч(ПолученныеДанные) = Тип("СправочникОбъект.Контрагенты"));
		ЭтоОрганизация    = (ТипЗнч(ПолученныеДанные) = Тип("СправочникОбъект.Организации"));
		ЭтоФизЛицо 	      = (ТипЗнч(ПолученныеДанные) = Тип("СправочникОбъект.ФизическиеЛица"));
		ЭтоКонтактноеЛицо = (ТипЗнч(ПолученныеДанные) = Тип("СправочникОбъект.КонтактныеЛица"));
		ЭтоПользователь   = (ТипЗнч(ПолученныеДанные) = Тип("СправочникОбъект.Пользователи"));
		
		Если ЭтоКонтрагент Тогда
			ВидОбъектаКИ = Перечисления.ВидыОбъектовКонтактнойИнформации.Контрагенты;
		ИначеЕсли ЭтоОрганизация Тогда
			ВидОбъектаКИ = Перечисления.ВидыОбъектовКонтактнойИнформации.Организации;
		ИначеЕсли ЭтоФизЛицо Тогда 
			ВидОбъектаКИ = Перечисления.ВидыОбъектовКонтактнойИнформации.ФизическиеЛица;
		ИначеЕсли ЭтоКонтактноеЛицо Тогда		
			ВидОбъектаКИ = Перечисления.ВидыОбъектовКонтактнойИнформации.КонтактныеЛица;
			Возврат;
		ИначеЕсли ЭтоПользователь Тогда 
			ВидОбъектаКИ = Перечисления.ВидыОбъектовКонтактнойИнформации.Пользователи;
			Возврат;
		Иначе
			Возврат;
		КонецЕсли;
	
		Для Каждого СтрокаXDTO Из ПолученныеДанные.ДополнительныеСвойства.КонтактнаяИнформация Цикл
		
			ВидКИСтрокой = СтрокаXDTO.ВидКонтактнойИнформации.Значение;
			Если Лев(СокрЛП(ВидКИСтрокой),18) = "ПользовательскаяКИ" Тогда
				ТекВидКИ = Справочники.ВидыКонтактнойИнформации.НайтиПоНаименованию(СтрокаXDTO.НаименованиеКонтактнойИнформации);
				Если НЕ ЗначениеЗаполнено(ТекВидКИ) Тогда
					ВидКИОбъект = Справочники.ВидыКонтактнойИнформации.СоздатьЭлемент();
					ВидКИОбъект.Наименование 				   = СтрокаXDTO.НаименованиеКонтактнойИнформации;
					ИмяТипаКИ 								   = СтрЗаменить(СокрЛП(ВидКИСтрокой),"ПользовательскаяКИ","");
					ВидКИОбъект.Тип 						   = Перечисления.ТипыКонтактнойИнформации[ИмяТипаКИ];       
					ВидКИОбъект.ВидОбъектаКонтактнойИнформации = ВидОбъектаКИ;
					ВидКИОбъект.Записать();
					ТекВидКИ = ВидКИОбъект.Ссылка;
				КонецЕсли;
				
			// Контрагенты	
			ИначеЕсли ВидКИСтрокой = "ФактическийАдрес" И ЭтоКонтрагент Тогда
				ТекВидКИ = Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента;		
			ИначеЕсли ВидКИСтрокой = "ЮридическийАдрес" И ЭтоКонтрагент Тогда
				ТекВидКИ = Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента;		
			ИначеЕсли ВидКИСтрокой = "Телефон" И ЭтоКонтрагент Тогда
				ТекВидКИ = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента;	
				
			// Организации
			ИначеЕсли ВидКИСтрокой = "ПочтовыйАдрес" И ЭтоОрганизация Тогда
				ТекВидКИ = Справочники.ВидыКонтактнойИнформации.АдресОрганизацииПочтовый;
			ИначеЕсли ВидКИСтрокой = "ФактическийАдрес" И ЭтоОрганизация Тогда
				ТекВидКИ = Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации;		
			ИначеЕсли ВидКИСтрокой = "ЮридическийАдрес" И ЭтоОрганизация Тогда
				ТекВидКИ = Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации;		
			ИначеЕсли ВидКИСтрокой = "Телефон" И ЭтоОрганизация Тогда
				ТекВидКИ = Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации;		
			ИначеЕсли ВидКИСтрокой = "Факс" И ЭтоОрганизация Тогда
				ТекВидКИ = Справочники.ВидыКонтактнойИнформации.ФаксОрганизации;	
			
			// Физические лица		
			ИначеЕсли ВидКИСтрокой = "ПочтовыйАдрес" И ЭтоФизЛицо Тогда
				ТекВидКИ = Справочники.ВидыКонтактнойИнформации.ИнформАдресФизЛица;
			ИначеЕсли ВидКИСтрокой = "ФактическийАдрес" И ЭтоФизЛицо Тогда
				ТекВидКИ = Справочники.ВидыКонтактнойИнформации.ФактАдресФизЛица;		
			ИначеЕсли ВидКИСтрокой = "ЮридическийАдрес" И ЭтоФизЛицо Тогда
				ТекВидКИ = Справочники.ВидыКонтактнойИнформации.ЮрАдресФизЛица;		
			ИначеЕсли (ВидКИСтрокой = "Телефон" Или ВидКИСтрокой = "ТелефонДомашний") И ЭтоФизЛицо Тогда
				ТекВидКИ = Справочники.ВидыКонтактнойИнформации.ТелефонФизЛица;		
			ИначеЕсли ВидКИСтрокой = "ТелефонРабочий" И ЭтоФизЛицо Тогда
				ТекВидКИ = Справочники.ВидыКонтактнойИнформации.ТелефонСлужебный;			
								
			Иначе
				Продолжить;
			КонецЕсли;
			
			ЧтениеXML = Новый ЧтениеXML;
			ЧтениеXML.УстановитьСтроку(СокрЛП(СтрокаXDTO.ЗначенияПолей));
			ЧтениеXML.Прочитать();
			Представление = ЧтениеXML.ПолучитьАтрибут("Представление");    		
			
			СтрокаКИ = РегистрыСведений.КонтактнаяИнформация.СоздатьМенеджерЗаписи();
			СтрокаКИ.Объект 	   = СсылкаНаОбъект;
			СтрокаКИ.Представление = Представление;
			СтрокаКИ.Вид 		   = ТекВидКИ;
			СтрокаКИ.Тип 		   = ТекВидКИ.Тип;
			СтрокаКИ.Записать();
	
		КонецЦикла;
	
	КонецЕсли;
КонецПроцедуры
Процедура ОбработатьСтавкуНДСПриПолучении(СтрокаXDTO, СтруктураДанныхСтроки, ПараметрыКонвертации)
	ЕстьСтавкаНДС = Неопределено;
	СтруктураДанныхСтроки.Свойство("СтавкаНДС", ЕстьСтавкаНДС);
	
	Если ЗначениеЗаполнено(ЕстьСтавкаНДС) Тогда
		
		ЗначениеСтавкиНДС = СтрокаXDTO.СтавкаНДС;
		
		НеОблагается = Ложь;
		Если ЗначениеСтавкиНДС = "БезНДС" Тогда 
			ЗначениеСтавкиНДС = "0";
			НеОблагается = Истина;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	СтавкиНДС.Ссылка КАК СтавкаНДС
		|ИЗ	
		|	Справочник.СтавкиНДС КАК СтавкиНДС
		|ГДЕ
		|	СтавкиНДС.Ставка = &Ставка
		|	И СтавкиНДС.ДляОсвобожденногоОборота = &НеОблагается
		|";
		
		Запрос.УстановитьПараметр("Ставка", Число(ЗначениеСтавкиНДС));
		Запрос.УстановитьПараметр("НеОблагается", НеОблагается);
		Результат = Запрос.Выполнить();
		
		Если Не Результат.Пустой() Тогда
			
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			СтруктураДанныхСтроки.СтавкаНДС = Выборка.СтавкаНДС;
			
		Иначе
			
			НоваяСтавка = Справочники.СтавкиНДС.СоздатьЭлемент();
			НоваяСтавка.Ставка = Число(ЗначениеСтавкиНДС);
			НоваяСтавка.Наименование = "" + ?(НеОблагается, "Без НДС", ЗначениеСтавкиНДС) + "%";
			НоваяСтавка.ДляОсвобожденногоОборота = НеОблагается;
			НоваяСтавка.Записать();
			СтруктураДанныхСтроки.СтавкаНДС = НоваяСтавка;
			
		КонецЕсли;
	
	КонецЕсли;
КонецПроцедуры
Процедура ОпределитьСтавкуНДС_Отправка(ТабличнаяЧасть, НаименованиеСтавки = "СтавкаНДС")
	ТабличнаяЧасть.Колонки.Добавить("СтавкаНДССтрокой");
	
	Для Каждого Строка Из ТабличнаяЧасть Цикл
		Если ТипЗнч(Строка[НаименованиеСтавки]) = Тип("Число") Тогда 
			Строка.СтавкаНДССтрокой = "" + Строка[НаименованиеСтавки];
		Иначе 
			Попытка
				Строка.СтавкаНДССтрокой = "" + Строка[НаименованиеСтавки].Ставка;
			Исключение
				Строка.СтавкаНДССтрокой = "0";
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
	ТабличнаяЧасть.Колонки.Удалить(НаименованиеСтавки);
	ТабличнаяЧасть.Колонки.СтавкаНДССтрокой.Имя = НаименованиеСтавки;
КонецПроцедуры
Функция ОпределитьТипЗапасовПоСчетуУчета(СчетУчета)
	Если НЕ ЗначениеЗаполнено(СчетУчета) Тогда
		Возврат "СобственныеТовары";
	КонецЕсли;
		
	Если СчетУчета = ПланыСчетов.Типовой.Товары Тогда
		Возврат "СобственныеТовары";
	ИначеЕсли СчетУчета = ПланыСчетов.Типовой.МатериалыПереданныеВПереработку Тогда
		Возврат "СырьеИМатериалы";
	КонецЕсли;
	Возврат "СобственныеТовары";
КонецФункции
Процедура ОприходованиеТоваров_ПередЗаписью(ПолученныеДанные, ДанныеИБ, ПараметрыКонвертации, КонвертацияСвойств)
	// Далее идет мержевание загруженной и существующей версии
	Если ДанныеИБ = Неопределено Тогда
		
		ОрганизацияЯвляетсяПлательщикомКПН =  ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(ПолученныеДанные.Организация, ПолученныеДанные.Дата);
		
		Если Не ОрганизацияЯвляетсяПлательщикомКПН Тогда
			ПолученныеДанные.УчитыватьКПН = Ложь;
		Иначе
			ПолученныеДанные.УчитыватьКПН = Истина;
		КонецЕсли;	
	
		Если НЕ ПолученныеДанные.УчитыватьКПН Тогда
			ПолученныеДанные.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НеОтражаетсяВНУ;
		Иначе
			ПолученныеДанные.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ;
		КонецЕсли;
	
		Возврат;
		
	КонецЕсли;
	
	// Склад
	ПолученныеДанные.Склад = СкладДляЗагрузки(ПолученныеДанные.Склад, ПараметрыКонвертации);
	
	// Склад
	Если Не ЗначениеЗаполнено(ПолученныеДанные.Склад) И ЗначениеЗаполнено(ДанныеИБ.Склад) Тогда
		ПолученныеДанные.Склад = ДанныеИБ.Склад;
	КонецЕсли;
			
	// Заменяем свойства, которые получили из XDTO
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
					
	// Восстанавливаем "затертые" данные
	//Товары
	МассивКлючевыхПолей = Новый Массив;
	МассивКлючевыхПолей.Добавить("Номенклатура");
	МассивКлючевыхПолей.Добавить("ЕдиницаИзмерения");
	МассивКлючевыхПолей.Добавить("Количество");
	МассивКлючевыхПолей.Добавить("Сумма");
	МассивКлючевыхПолей.Добавить("Цена");
	
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.Товары,
		ДанныеИБ.Товары,
		МассивКлючевыхПолей,
		"СчетУчетаБУ");
	ДанныеИБ.Товары.Загрузить(ПолученныеДанные.Товары.Выгрузить());
	ПолученныеДанные = Неопределено;
КонецПроцедуры
Процедура ОтложеннаяОбработка_АвансовыйОтчет(Объект, ПараметрыКонвертации, ОбъектМодифицирован)
	//Новые обработчки
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	МетаданныеДокумента = Объект.Метаданные();
	
	Документы.АвансовыйОтчет.ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, "Товары");
	Документы.АвансовыйОтчет.ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, "Прочее");
	
	Если Объект.ОплатаПоставщикам.Количество() > 0 ТОгда
		
		СчетаУчета = УправлениеВзаиморасчетамиСервер.ПолучитьСчетаРасчетовСКонтрагентом(Объект.Организация, Объект.ОплатаПоставщикам[0].Контрагент, Объект.ОплатаПоставщикам[0].ДоговорКонтрагента);
		Для Каждого ТекСтрока Из Объект.ОплатаПоставщикам Цикл
			ТекСтрока.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетов;
			ТекСтрока.СчетУчетаРасчетовПоАвансам     = СчетаУчета.СчетАвансов;
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого СтрокаТовары Из Объект.Товары Цикл
		
		Если Объект.УчитыватьНДС Тогда
			Если НЕ ЗначениеЗаполнено(СтрокаТовары.НДСВидОборота) Тогда
				ОбработкаТабличныхЧастей.ЗаполнитьНДСВидОборотаТабЧасти(СтрокаТовары, Объект, "Товары", МетаданныеДокумента);
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(СтрокаТовары.НДСВидПоступления) Тогда
				ОбработкаТабличныхЧастей.ЗаполнитьНДСВидПоступленияТабЧасти(СтрокаТовары, "Товары", МетаданныеДокумента, ТекущийПользователь);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого СтрокаТовары Из Объект.Прочее Цикл
				
		НазначитьТипДляГруппыНумерованнойАналитикиСчета(СтрокаТовары, СтрокаТовары.СчетЗатратБУ, "СубконтоЗатратБУ", 1);
		
		Если Объект.УчитыватьКПН Тогда
					
			СтрокаТовары.СчетЗатратНУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СтрокаТовары.СчетЗатратБУ));
			
			НазначитьТипДляГруппыНумерованнойАналитикиСчета(СтрокаТовары, СтрокаТовары.СчетЗатратНУ, "СубконтоЗатратНУ", 1);
				
		КонецЕсли;
		
		Если Объект.УчитыватьНДС Тогда
			Если НЕ ЗначениеЗаполнено(СтрокаТовары.НДСВидОборота) Тогда
				ОбработкаТабличныхЧастей.ЗаполнитьНДСВидОборотаТабЧасти(СтрокаТовары, Объект, "Прочее", МетаданныеДокумента);
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(СтрокаТовары.НДСВидПоступления) Тогда
				ОбработкаТабличныхЧастей.ЗаполнитьНДСВидПоступленияТабЧасти(СтрокаТовары, "Прочее", МетаданныеДокумента, ТекущийПользователь);
			КонецЕсли;
	    КонецЕсли;
		
		Субконто1 = СтрокаТовары.СубконтоЗатратБУ1;
		Субконто2 = СтрокаТовары.СубконтоЗатратБУ2;
		Субконто3 = СтрокаТовары.СубконтоЗатратБУ3;
			
		ЧислоАктивныхСубконто = СтрокаТовары.СчетЗатратБУ.ВидыСубконто.Количество();
		
		Для Сч = 1 По ЧислоАктивныхСубконто Цикл
			
			Если СтрокаТовары.СчетЗатратБУ.ВидыСубконто[Сч-1].ВидСубконто.ТипЗначения.СодержитТип(ТипЗнч(Субконто1)) И НЕ Субконто1 = Неопределено Тогда
				СтрокаТовары["СубконтоЗатратБУ"+Сч] = Субконто1;
			КонецЕсли;
			
			Если СтрокаТовары.СчетЗатратБУ.ВидыСубконто[Сч-1].ВидСубконто.ТипЗначения.СодержитТип(ТипЗнч(Субконто2)) И НЕ Субконто2 = Неопределено Тогда
				СтрокаТовары["СубконтоЗатратБУ"+Сч] = Субконто2;
			КонецЕсли;
			
			Если СтрокаТовары.СчетЗатратБУ.ВидыСубконто[Сч-1].ВидСубконто.ТипЗначения.СодержитТип(ТипЗнч(Субконто3)) И НЕ Субконто3 = Неопределено Тогда
				СтрокаТовары["СубконтоЗатратБУ"+Сч] = Субконто3;
			КонецЕсли;
			
			ТипСубк = СтрокаТовары.СчетЗатратБУ.ВидыСубконто[Сч - 1].ВидСубконто.ТипЗначения;
			СтрокаТовары["СубконтоЗатратБУ"+Сч] = ТипСубк.ПривестиЗначение(СтрокаТовары["СубконтоЗатратБУ"+Сч]);
			
			Если Объект.УчитыватьКПН Тогда
				ОбщегоНазначенияБККлиентСервер.ЗаменитьСубконтоНУ(СтрокаТовары, СтрокаТовары.СчетЗатратБУ, СтрокаТовары.СчетЗатратНУ, Сч, СтрокаТовары["СубконтоЗатратБУ"+Сч], "СубконтоЗатратНУ");
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	//Новые обработчки
КонецПроцедуры
Процедура ОтложеннаяОбработка_ВозвратТоваровОтПокупателя(Объект, ПараметрыКонвертации, ОбъектМодифицирован)
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	МетаданныеДокумента = Объект.Метаданные();
	
	Если Не ЗначениеЗаполнено(Объект.ВидОперации) Тогда 
		Объект.ВидОперации = Перечисления.ВидыОперацийВозвратТоваровОтПокупателя.ВозвратТоваров;
	КонецЕсли;
	
	СчетаУчета = УправлениеВзаиморасчетамиСервер.ПолучитьСчетаРасчетовСКонтрагентом(Объект.Организация, Объект.Контрагент, Объект.ДоговорКонтрагента);
			
	Объект.СчетУчетаРасчетовСКонтрагентом 	= СчетаУчета.СчетРасчетовПокупателя;
	Объект.СчетУчетаРасчетовПоВозвратам     = СчетаУчета.СчетВозвратовПокупателя;
	
	Документы.ВозвратТоваровОтПокупателя.ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, "Товары");
	
	Для Каждого СтрокаТовары Из Объект.Товары Цикл
		
		НазначитьТипДляГруппыНумерованнойАналитикиСчета(СтрокаТовары, СтрокаТовары.СчетДоходовБУ, "СубконтоДоходовБУ",1);
		НазначитьТипДляГруппыНумерованнойАналитикиСчета(СтрокаТовары, СтрокаТовары.СчетСписанияСебестоимостиБУ, "СубконтоСписанияСебестоимостиБУ", 1);
		
		Для НомерСубконто = 1 По СтрокаТовары.СчетДоходовБУ.ВидыСубконто.Количество() Цикл
			Если НЕ ЗначениеЗаполнено(СтрокаТовары["СубконтоДоходовБУ"+НомерСубконто]) ТОгда
				Если СтрокаТовары.СчетДоходовБУ.ВидыСубконто[НомерСубконто-1].ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоТиповые.Номенклатура ТОгда
					СтрокаТовары["СубконтоДоходовБУ"+НомерСубконто] = СтрокаТовары.Номенклатура;
				ИначеЕсли СтрокаТовары.СчетДоходовБУ.ВидыСубконто[НомерСубконто-1].ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоТиповые.НоменклатурныеГруппы Тогда
					СтрокаТовары["СубконтоДоходовБУ"+НомерСубконто] = Строкатовары.Номенклатура.НоменклатурнаяГруппа;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Для НомерСубконто = 1 По СтрокаТовары.СчетСписанияСебестоимостиБУ.ВидыСубконто.Количество() Цикл
			Если НЕ ЗначениеЗаполнено(СтрокаТовары["СубконтоСписанияСебестоимостиБУ"+НомерСубконто]) ТОгда
				Если СтрокаТовары.СчетСписанияСебестоимостиБУ.ВидыСубконто[НомерСубконто-1].ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоТиповые.Номенклатура ТОгда
					СтрокаТовары["СубконтоСписанияСебестоимостиБУ"+НомерСубконто] = СтрокаТовары.Номенклатура;
				ИначеЕсли СтрокаТовары.СчетСписанияСебестоимостиБУ.ВидыСубконто[НомерСубконто-1].ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоТиповые.НоменклатурныеГруппы Тогда
					СтрокаТовары["СубконтоСписанияСебестоимостиБУ"+НомерСубконто] = СтрокаТовары.Номенклатура.НоменклатурнаяГруппа;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если Объект.УчитыватьНДС Тогда
			Если НЕ ЗначениеЗаполнено(СтрокаТовары.НДСВидОперацииРеализации) Тогда
				ОбработкаТабличныхЧастей.ЗаполнитьНДСВидРеализацииТабЧасти(СтрокаТовары, "Товары", МетаданныеДокумента, ТекущийПользователь);
			КонецЕсли;
		КонецЕсли;
			
		Если Объект.УчитыватьКПН Тогда
			
			Если Не ЗначениеЗаполнено(СтрокаТовары.АкцизВидОперацииРеализации) Тогда
				ОбработкаТабличныхЧастей.ЗаполнитьАкцизВидРеализацииТабЧасти(СтрокаТовары, "Товары", МетаданныеДокумента, ТекущийПользователь);
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(СтрокаТовары.СчетДоходовНУ) Тогда
				СтрокаТовары.СчетДоходовНУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СтрокаТовары.СчетДоходовБУ));
			КонецЕсли;
			
			НазначитьТипДляГруппыНумерованнойАналитикиСчета(СтрокаТовары, СтрокаТовары.СчетДоходовНУ, "СубконтоДоходовНУ", 1);
			
			Если НЕ ЗначениеЗаполнено(СтрокаТовары.СчетСписанияСебестоимостиНУ) Тогда
				СтрокаТовары.СчетСписанияСебестоимостиНУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СтрокаТовары.СчетСписанияСебестоимостиБУ));
			КонецЕсли;
			
			НазначитьТипДляГруппыНумерованнойАналитикиСчета(СтрокаТовары, СтрокаТовары.СчетСписанияСебестоимостиНУ, "СубконтоСписанияСебестоимостиНУ", 1);
			
			Для НомерСубконто = 1 По СтрокаТовары.СчетДоходовНУ.ВидыСубконто.Количество() Цикл
				Если НЕ ЗначениеЗаполнено(СтрокаТовары["СубконтоДоходовНУ"+НомерСубконто]) ТОгда
					Если СтрокаТовары.СчетДоходовНУ.ВидыСубконто[НомерСубконто-1].ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоТиповые.Номенклатура ТОгда
						СтрокаТовары["СубконтоДоходовНУ"+НомерСубконто] = СтрокаТовары.Номенклатура;
					ИначеЕсли СтрокаТовары.СчетДоходовНУ.ВидыСубконто[НомерСубконто-1].ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоТиповые.НоменклатурныеГруппы Тогда
						СтрокаТовары["СубконтоДоходовНУ"+НомерСубконто] = Строкатовары.Номенклатура.НоменклатурнаяГруппа;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			Для НомерСубконто = 1 По СтрокаТовары.СчетСписанияСебестоимостиНУ.ВидыСубконто.Количество() Цикл
				Если НЕ ЗначениеЗаполнено(СтрокаТовары["СубконтоСписанияСебестоимостиНУ"+НомерСубконто]) ТОгда
					Если СтрокаТовары.СчетСписанияСебестоимостиНУ.ВидыСубконто[НомерСубконто-1].ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоТиповые.Номенклатура ТОгда
						СтрокаТовары["СубконтоСписанияСебестоимостиНУ"+НомерСубконто] = СтрокаТовары.Номенклатура;
					ИначеЕсли СтрокаТовары.СчетСписанияСебестоимостиНУ.ВидыСубконто[НомерСубконто-1].ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоТиповые.НоменклатурныеГруппы Тогда
						СтрокаТовары["СубконтоСписанияСебестоимостиНУ"+НомерСубконто] = СтрокаТовары.Номенклатура.НоменклатурнаяГруппа;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
	КонецЦикла;
	
	
	Документы.ВозвратТоваровОтПокупателя.ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, "Услуги");
	
	Для Каждого СтрокаТовары Из Объект.Услуги Цикл
		
		НазначитьТипДляГруппыНумерованнойАналитикиСчета(СтрокаТовары, СтрокаТовары.СчетДоходовБУ, "СубконтоДоходовБУ",1);
		
		Для НомерСубконто = 1 По СтрокаТовары.СчетДоходовБУ.ВидыСубконто.Количество() Цикл
			Если НЕ ЗначениеЗаполнено(СтрокаТовары["СубконтоДоходовБУ"+НомерСубконто]) ТОгда
				Если СтрокаТовары.СчетДоходовБУ.ВидыСубконто[НомерСубконто-1].ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоТиповые.Номенклатура ТОгда
					СтрокаТовары["СубконтоДоходовБУ"+НомерСубконто] = СтрокаТовары.Номенклатура;
				ИначеЕсли СтрокаТовары.СчетДоходовБУ.ВидыСубконто[НомерСубконто-1].ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоТиповые.НоменклатурныеГруппы Тогда
					СтрокаТовары["СубконтоДоходовБУ"+НомерСубконто] = Строкатовары.Номенклатура.НоменклатурнаяГруппа;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если Объект.УчитыватьНДС Тогда
			Если НЕ ЗначениеЗаполнено(СтрокаТовары.НДСВидОперацииРеализации) Тогда
				ОбработкаТабличныхЧастей.ЗаполнитьНДСВидРеализацииТабЧасти(СтрокаТовары, "Услуги", МетаданныеДокумента, ТекущийПользователь);
			КонецЕсли;
		КонецЕсли;
		
		Если Объект.УчитыватьКПН Тогда
				
			Если НЕ ЗначениеЗаполнено(СтрокаТовары.СчетДоходовНУ) Тогда
				СтрокаТовары.СчетДоходовНУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СтрокаТовары.СчетДоходовБУ));
			КонецЕсли;
			
			НазначитьТипДляГруппыНумерованнойАналитикиСчета(СтрокаТовары, СтрокаТовары.СчетДоходовНУ, "СубконтоДоходовНУ", 1);
			
			Для НомерСубконто = 1 По СтрокаТовары.СчетДоходовНУ.ВидыСубконто.Количество() Цикл
				Если НЕ ЗначениеЗаполнено(СтрокаТовары["СубконтоДоходовНУ"+НомерСубконто]) ТОгда
					Если СтрокаТовары.СчетДоходовНУ.ВидыСубконто[НомерСубконто-1].ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоТиповые.Номенклатура ТОгда
						СтрокаТовары["СубконтоДоходовНУ"+НомерСубконто] = СтрокаТовары.Номенклатура;
					ИначеЕсли СтрокаТовары.СчетДоходовНУ.ВидыСубконто[НомерСубконто-1].ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоТиповые.НоменклатурныеГруппы Тогда
						СтрокаТовары["СубконтоДоходовНУ"+НомерСубконто] = Строкатовары.Номенклатура.НоменклатурнаяГруппа;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры
Процедура ОтложеннаяОбработка_ВозвратТоваровПоставщику(Объект, ПараметрыКонвертации, ОбъектМодифицирован)
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	МетаданныеДокумента = Объект.Метаданные();
	
	Документы.ВозвратТоваровПоставщику.ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, "Товары");
	
	СчетаУчета = УправлениеВзаиморасчетамиСервер.ПолучитьСчетаРасчетовСКонтрагентом(Объект.Организация, Объект.Контрагент, Объект.ДоговорКонтрагента);
			
	Объект.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетов;
	Объект.СчетУчетаРасчетовПоВозвратам   = СчетаУчета.СчетВозвратов;
	
	ПараметрыОбъекта = Новый Структура("Организация, СтруктурноеПодразделение, Дата, Ссылка, ТипЦен,
		|УчитыватьНДС, СуммаВключаетНДС, УчитыватьКПН, ВидОперации,
		|ВалютаДокумента, КурсВзаиморасчетов, КратностьВзаиморасчетов, Склад, ДоговорКонтрагента,
		|СчетОтнесенияСебестоимостиБУ, СубконтоОтнесенияСебестоимостиБУ1, СубконтоОтнесенияСебестоимостиБУ2, СубконтоОтнесенияСебестоимостиБУ3,
		|СчетОтнесенияСебестоимостиНУ, СубконтоОтнесенияСебестоимостиНУ1, СубконтоОтнесенияСебестоимостиНУ2, СубконтоОтнесенияСебестоимостиНУ3");
	ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, Объект);
	
	СчетаУчетаКЗаполнению = Новый Соответствие;
	СчетаУчетаКЗаполнению.Вставить("СчетОтнесенияСебестоимостиБУ", 		Истина);
	СчетаУчетаКЗаполнению.Вставить("СубконтоОтнесенияСебестоимостиБУ1", Истина);
	СчетаУчетаКЗаполнению.Вставить("СубконтоОтнесенияСебестоимостиБУ2", Истина);
	СчетаУчетаКЗаполнению.Вставить("СубконтоОтнесенияСебестоимостиБУ3", Истина);
	СчетаУчетаКЗаполнению.Вставить("СчетОтнесенияСебестоимостиНУ", 		Истина);
	СчетаУчетаКЗаполнению.Вставить("СубконтоОтнесенияСебестоимостиНУ1", Истина);
	СчетаУчетаКЗаполнению.Вставить("СубконтоОтнесенияСебестоимостиНУ2", Истина);
	СчетаУчетаКЗаполнению.Вставить("СубконтоОтнесенияСебестоимостиНУ3", Истина);
	
	ЗаполненныеСчета = СчетаУчетаВДокументах.ЗаполнитьРеквизитыПриИзменении(
		Документы.ВозвратТоваровПоставщику,
		СчетаУчетаКЗаполнению,
		ПараметрыОбъекта);
	
	ЗаполнитьЗначенияСвойств(Объект, ЗаполненныеСчета);
	
	НазначитьТипДляГруппыНумерованнойАналитикиСчета(Объект, Объект.СчетОтнесенияСебестоимостиБУ, "СубконтоОтнесенияСебестоимостиБУ", 1);
	
	Для Каждого СтрокаТовары Из Объект.Товары Цикл
		
		Если Объект.УчитыватьНДС Тогда
			Если НЕ ЗначениеЗаполнено(СтрокаТовары.НДСВидОборота) Тогда
				ОбработкаТабличныхЧастей.ЗаполнитьНДСВидОборотаТабЧасти(СтрокаТовары, Объект, "Товары", МетаданныеДокумента);
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(СтрокаТовары.НДСВидПоступления) Тогда
				ОбработкаТабличныхЧастей.ЗаполнитьНДСВидПоступленияТабЧасти(СтрокаТовары, "Товары", МетаданныеДокумента, ТекущийПользователь);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	ТабличнаяЧасть = Объект["Услуги"];
	
	ДанныеОбъекта = Новый Структура("Дата, Организация, ВидОперации, УчитыватьКПН, УчитыватьНДС");
	
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	СоответствиеСчетовУчета = ПроцедурыБухгалтерскогоУчета.ПолучитьСчетаУчетаСпискаНоменклатуры(
	ДанныеОбъекта.Организация, ОбщегоНазначения.ВыгрузитьКолонку(ТабличнаяЧасть, "Номенклатура", Истина), ДанныеОбъекта.Дата);
	
	Для Каждого СтрокаТовары Из Объект.Услуги Цикл
		
		СчетаИзРС = ложь;
		
		Субконто1 = СтрокаТовары.СубконтоЗатратБУ1;
		Субконто2 = СтрокаТовары.СубконтоЗатратБУ2;
		
		СчетаУчета = ПроцедурыБухгалтерскогоУчета.ПолучитьСчетаУчетаНоменклатуры(Объект.Организация, СтрокаТовары.Номенклатура);
		
		Если НЕ ЗначениеЗаполнено(СтрокаТовары.СчетЗатратБУ) Тогда
			СчетаУчета = СоответствиеСчетовУчета.Получить(СтрокаТовары.Номенклатура);
			Документы.ВозвратТоваровПоставщику.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, СтрокаТовары, "Услуги", СчетаУчета);
			СчетаИзРС = Истина;
		Иначе
			СтрокаТовары.СчетУчетаНДС = СчетаУчета.СчетУчетаНДСПоПриобретению;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаТовары.СчетУчетаНДС) Тогда
			СтрокаТовары.СчетУчетаНДС = ПланыСчетов.Типовой.НалогНаДобавленнуюСтоимостьКВозмещению;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаТовары.СчетЗатратБУ) Тогда
			СтрокаТовары.СчетЗатратБУ = ПланыСчетов.Типовой.АдминистративныеРасходы;
			СтрокаТовары.СубконтоЗатратБУ1 = Субконто1;
			СтрокаТовары.СубконтоЗатратБУ2 = Субконто2;
			СчетаИзРС = Ложь;
		КонецЕсли;
		
		Если НЕ СчетаИзРС Тогда
			НазначитьТипДляГруппыНумерованнойАналитикиСчета(СтрокаТовары, СтрокаТовары.СчетЗатратБУ, "СубконтоЗатратБУ", 1);
			
			Если Объект.УчитыватьКПН Тогда
				СтрокаТовары.СчетЗатратНУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СтрокаТовары.СчетЗатратБУ));
				НазначитьТипДляГруппыНумерованнойАналитикиСчета(СтрокаТовары, СтрокаТовары.СчетЗатратНУ, "СубконтоЗатратНУ", 1);
			КонецЕсли;
		КонецЕсли;
		
		Если Объект.УчитыватьНДС Тогда
			Если НЕ ЗначениеЗаполнено(СтрокаТовары.НДСВидОборота) Тогда
				ОбработкаТабличныхЧастей.ЗаполнитьНДСВидОборотаТабЧасти(СтрокаТовары, Объект, "Услуги", МетаданныеДокумента);
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(СтрокаТовары.НДСВидПоступления) Тогда
				ОбработкаТабличныхЧастей.ЗаполнитьНДСВидПоступленияТабЧасти(СтрокаТовары, "Услуги", МетаданныеДокумента, ТекущийПользователь);
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ СчетаИзРС Тогда
			
			Субконто1 = СтрокаТовары.СубконтоЗатратБУ1;
			Субконто2 = СтрокаТовары.СубконтоЗатратБУ2;
			Субконто3 = СтрокаТовары.СубконтоЗатратБУ3;
			
			ЧислоАктивныхСубконто = СтрокаТовары.СчетЗатратБУ.ВидыСубконто.Количество();
			
			Для Сч = 1 По ЧислоАктивныхСубконто Цикл
				
				Если СтрокаТовары.СчетЗатратБУ.ВидыСубконто[Сч-1].ВидСубконто.ТипЗначения.СодержитТип(ТипЗнч(Субконто1)) И НЕ Субконто1 = Неопределено Тогда
					СтрокаТовары["СубконтоЗатратБУ"+Сч] = Субконто1;
				КонецЕсли;
				
				Если СтрокаТовары.СчетЗатратБУ.ВидыСубконто[Сч-1].ВидСубконто.ТипЗначения.СодержитТип(ТипЗнч(Субконто2)) И НЕ Субконто2 = Неопределено Тогда
					СтрокаТовары["СубконтоЗатратБУ"+Сч] = Субконто2;
				КонецЕсли;
				
				Если СтрокаТовары.СчетЗатратБУ.ВидыСубконто[Сч-1].ВидСубконто.ТипЗначения.СодержитТип(ТипЗнч(Субконто3)) И НЕ Субконто3 = Неопределено Тогда
					СтрокаТовары["СубконтоЗатратБУ"+Сч] = Субконто3;
				КонецЕсли;
				
				ТипСубк = СтрокаТовары.СчетЗатратБУ.ВидыСубконто[Сч - 1].ВидСубконто.ТипЗначения;
				СтрокаТовары["СубконтоЗатратБУ"+Сч] = ТипСубк.ПривестиЗначение(СтрокаТовары["СубконтоЗатратБУ"+Сч]);
				
				Если Объект.УчитыватьКПН Тогда
					ОбщегоНазначенияБККлиентСервер.ЗаменитьСубконтоНУ(СтрокаТовары, СтрокаТовары.СчетЗатратБУ, СтрокаТовары.СчетЗатратНУ, Сч, СтрокаТовары["СубконтоЗатратБУ"+Сч], "СубконтоЗатратНУ");
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
КонецПроцедуры
Процедура ОтложеннаяОбработка_ДоговорыКонтрагентовИзСтруктур(Объект)
	Если СокрЛП(Объект.Наименование) = "" Тогда
		НаименованиеПоУмолчанию = "" + СокрЛП(Объект.ВидДоговора) + ", " + НРег(СокрЛП(Объект.ВалютаВзаиморасчетов));
		Объект.Наименование = НаименованиеПоУмолчанию;
	КонецЕсли;
КонецПроцедуры
Процедура ОтложеннаяОбработка_ИнвентаризацияТоваров(Объект, ПараметрыКонвертации, ОбъектМодифицирован)
	Если Не ЗначениеЗаполнено(Объект.ВидОперации) Тогда
		Объект.ВидОперации = Перечисления.ВидыОперацийИнвентаризация.ПоСкладу;
	КонецЕсли;
	
	МетаданныеДокумента = Объект.Ссылка.Метаданные();
	
	ПараметрыОбъекта = Новый Структура("Организация, СтруктурноеПодразделение, Дата, Ссылка, ВидОперации, Склад");
	ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, Объект);
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл
		
		СведенияОНоменклатуре = ОбработкаТабличныхЧастей.ПолучитьСведенияОНоменклатуре(СтрокаТабличнойЧасти.Номенклатура, ПараметрыОбъекта);
	
		Документы.ИнвентаризацияТоваровНаСкладе.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ПараметрыОбъекта, СтрокаТабличнойЧасти, "Товары", СведенияОНоменклатуре);
		
	КонецЦикла;
КонецПроцедуры
Процедура ОтложеннаяОбработка_КассаРасчетыСКонтрагентами_БП(Объект)
	//Заполнение счетов расчетов
	Для Каждого СтрокаТЧ Из Объект.РасшифровкаПлатежа Цикл
		Если ЗначениеЗаполнено(СтрокаТЧ.СчетУчетаРасчетовСКонтрагентомБУ) 
			И ЗначениеЗаполнено(СтрокаТЧ.СчетУчетаРасчетовПоАвансам) Тогда
			Продолжить;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаТЧ.ДоговорКонтрагента) Тогда
			СтруктураСчетов = УправлениеВзаиморасчетамиСервер.ПолучитьСчетаРасчетовСКонтрагентом(
				Объект.Организация, Объект.Контрагент, СтрокаТЧ.ДоговорКонтрагента);
			
			Если Объект.ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПоставщиком Тогда
				СтрокаТЧ.СчетУчетаРасчетовСКонтрагентомБУ = СтруктураСчетов.СчетРасчетов;
				СтрокаТЧ.СчетУчетаРасчетовПоАвансам = СтруктураСчетов.СчетАвансов;
			ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаПоставщику Тогда
				СтрокаТЧ.СчетУчетаРасчетовСКонтрагентомБУ = СтруктураСчетов.СчетРасчетов;
				СтрокаТЧ.СчетУчетаРасчетовПоАвансам = СтруктураСчетов.СчетАвансов;
			ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИЗаймамСКонтрагентами Тогда
				Если Не ЗначениеЗаполнено(СтрокаТЧ.СчетУчетаРасчетовСКонтрагентомБУ) Тогда
					СтрокаТЧ.СчетУчетаРасчетовСКонтрагентомБУ = СтруктураСчетов.СчетРасчетов;
				КонецЕсли;
				СтрокаТЧ.СчетУчетаРасчетовПоАвансам = СтруктураСчетов.СчетАвансов;
			Иначе
				СтрокаТЧ.СчетУчетаРасчетовСКонтрагентомБУ = СтруктураСчетов.СчетРасчетовПокупателя;
				СтрокаТЧ.СчетУчетаРасчетовПоАвансам =     СтруктураСчетов.СчетАвансовПокупателя;
			КонецЕсли;
		КонецЕсли;
	
	КонецЦикла;
КонецПроцедуры
Процедура ОтложеннаяОбработка_КорректировкаДолга(Объект, ПараметрыКонвертации, ОбъектМодифицирован)
	Для Каждого СтрокаТЧ Из Объект.СуммыДолга Цикл	
		СчетаУчета = УправлениеВзаиморасчетамиСервер.ПолучитьСчетаРасчетовСКонтрагентом(Объект.Организация, Объект.КонтрагентДебитор, СтрокаТЧ.ДоговорКонтрагента);
		
		Если СтрокаТЧ.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком Тогда
			СтрокаТЧ.СчетУчетаРасчетов = СчетаУчета.СчетРасчетов;
		ИначеЕсли СтрокаТЧ.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
			СтрокаТЧ.СчетУчетаРасчетов = СчетаУчета.СчетРасчетовПокупателя;
		ИначеЕсли СтрокаТЧ.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Прочее Тогда 
			СтрокаТЧ.СчетУчетаРасчетов = ?(СтрокаТЧ.ВидЗадолженности = Перечисления.ВидыЗадолженности.Дебиторская, СчетаУчета.СчетРасчетовПокупателя, СчетаУчета.СчетРасчетов);	
		КонецЕсли; 
	КонецЦикла;
КонецПроцедуры
Процедура ОтложеннаяОбработка_НомераГТД(Объект)
	ВариантыНаименованийНомераГТД = Справочники.НомераГТД.ВариантыНаименованийНомераГТД(Объект);
	Объект.Наименование = ВариантыНаименованийНомераГТД[ВариантыНаименованийНомераГТД.ВГраница()];
КонецПроцедуры
Процедура ОтложеннаяОбработка_ОплатаОтПокупателяПлатежнойКар(Объект)
	мВалютаРегламентированногоУчета = ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	УправлениеДенежнымиСредствамиСервер.ЗаполнитьРеквизитыРасчетногоДокумента(Объект, Объект.РасшифровкаПлатежа);
	
	СчетаУчета = УправлениеВзаиморасчетамиСервер.ПолучитьСчетаРасчетовСКонтрагентом(Объект.Организация, Объект.ДоговорВзаиморасчетовЭквайрера.Владелец, Объект.ДоговорВзаиморасчетовЭквайрера);
	Объект.СчетУчетаРасчетовСЭквайрером = СчетаУчета.СчетРасчетовПокупателя;
	
	Для Каждого СтрокаТЧ Из Объект.РасшифровкаПлатежа Цикл
		СчетаУчета = УправлениеВзаиморасчетамиСервер.ПолучитьСчетаРасчетовСКонтрагентом(Объект.Организация, Объект.Контрагент, СтрокаТЧ.ДоговорКонтрагента);
		СтрокаТЧ.СчетУчетаРасчетовСКонтрагентомБУ 	= СчетаУчета.СчетРасчетовПокупателя;
		СтрокаТЧ.СчетУчетаРасчетовПоАвансам     	= СчетаУчета.СчетАвансовПокупателя;
	КонецЦикла;
КонецПроцедуры
Процедура ОтложеннаяОбработка_ОприходованиеТоваров(Объект, ПараметрыКонвертации, ОбъектМодифицирован)
	ТабличнаяЧасть = Объект["Товары"];
	
	ДанныеОбъекта = Новый Структура("Дата, Организация, ВидОперации, УчитыватьКПН, УчитыватьНДС, ТипЦен");   
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	Для Каждого СтрокаТовары Из Объект.Товары Цикл
		
		КЗаполнению = Новый Соответствие;
		Кзаполнению.Вставить("Товары.СчетУчетаБУ", 				   Истина);
		Кзаполнению.Вставить("Товары.КорСчетОприходованияБУ", 	   Истина);
		Кзаполнению.Вставить("Товары.КорСубконтоОприходованияБУ1", Истина);
		Кзаполнению.Вставить("Товары.КорСубконтоОприходованияБУ2", Истина);
		Кзаполнению.Вставить("Товары.КорСубконтоОприходованияБУ3", Истина);
		Кзаполнению.Вставить("Товары.СчетУчетаНУ", 				   Истина);
		Кзаполнению.Вставить("Товары.КорСчетОприходованияНУ", 	   Истина);
		Кзаполнению.Вставить("Товары.КорСубконтоОприходованияНУ1", Истина);
		Кзаполнению.Вставить("Товары.КорСубконтоОприходованияНУ2", Истина);
		Кзаполнению.Вставить("Товары.КорСубконтоОприходованияНУ3", Истина);
	
		ЗаполненныеСчета = СчетаУчетаВДокументах.ЗаполнитьРеквизитыПриИзменении(
			Документы.ОприходованиеТоваров,
			КЗаполнению,
			ДанныеОбъекта,
			"Товары",
			СтрокаТовары);
		
		ЗаполнитьЗначенияСвойств(СтрокаТовары, ЗаполненныеСчета);
	
	КонецЦикла;
КонецПроцедуры
Процедура ОтложеннаяОбработка_Организации(Объект, ПараметрыКонвертации)
	Если Не ЗначениеЗаполнено(Объект.ГоловнаяОрганизация) Тогда
		Объект.ГоловнаяОрганизация = Объект.Ссылка;
	КонецЕсли;
	//Для организаций - ИП
	Если НЕ ЗначениеЗаполнено(Объект.ИндивидуальныйПредприниматель) 
		И Объект.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
		//Создаем физическое лицо
		ФизЛицоОбъект = Справочники.ФизическиеЛица.СоздатьЭлемент();
		ФизЛицоОбъект.Наименование = Объект.Наименование;
		ФизЛицоОбъект.Пол = Перечисления.ПолФизическихЛиц.Мужской;
		ФизЛицоОбъект.ИдентификационныйКодЛичности = Объект.ИдентификационныйНомер;
		ФизЛицоОбъект.Записать();
		Объект.ИндивидуальныйПредприниматель = ФизЛицоОбъект.Ссылка;
	КонецЕсли;
КонецПроцедуры
Процедура ОтложеннаяОбработка_ОРТ(Объект, ПараметрыКонвертации, ОбъектМодифицирован)
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	МетаданныеДокумента = Объект.Метаданные();
	
	СчетаУчета = УправлениеВзаиморасчетамиСервер.ПолучитьСчетаРасчетовСКонтрагентом(Объект.Организация, Объект.Контрагент, Объект.ДоговорКонтрагента);
			
	Объект.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетовПокупателя;
	
	Если Не ЗначениеЗаполнено(Объект.СчетКасса) Тогда
		Объект.СчетКасса = ПланыСчетов.Типовой.ДенежныеСредстваВКассе;
	КонецЕсли;
	
	СтруктураКурсаВалюты  = ОбщегоНазначенияБК.ПолучитьКурсВалюты(Объект.ВалютаДокумента, Объект.Дата);
	Объект.КурсВзаиморасчетов 	   = СтруктураКурсаВалюты.Курс;
	Объект.КратностьВзаиморасчетов = СтруктураКурсаВалюты.Кратность;
	
	Документы.ОтчетОРозничныхПродажах.ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, "Товары");
	Для Каждого СтрокаТовары Из Объект.Товары Цикл
		
		НазначитьТипДляГруппыНумерованнойАналитикиСчета(СтрокаТовары, СтрокаТовары.СчетДоходовБУ, "СубконтоДоходовБУ", 1);
		НазначитьТипДляГруппыНумерованнойАналитикиСчета(СтрокаТовары, СтрокаТовары.СчетСписанияСебестоимостиБУ, "СубконтоСписанияСебестоимостиБУ", 1);
		
		Для НомерСубконто = 1 По СтрокаТовары.СчетДоходовБУ.ВидыСубконто.Количество() Цикл
			Если НЕ ЗначениеЗаполнено(СтрокаТовары["СубконтоДоходовБУ"+НомерСубконто]) ТОгда
				Если СтрокаТовары.СчетДоходовБУ.ВидыСубконто[НомерСубконто-1].ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоТиповые.Номенклатура ТОгда
					СтрокаТовары["СубконтоДоходовБУ"+НомерСубконто] = СтрокаТовары.Номенклатура;
				ИначеЕсли СтрокаТовары.СчетДоходовБУ.ВидыСубконто[НомерСубконто-1].ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоТиповые.НоменклатурныеГруппы Тогда
					СтрокаТовары["СубконтоДоходовБУ"+НомерСубконто] = Строкатовары.Номенклатура.НоменклатурнаяГруппа;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Для НомерСубконто = 1 По СтрокаТовары.СчетСписанияСебестоимостиБУ.ВидыСубконто.Количество() Цикл
			Если НЕ ЗначениеЗаполнено(СтрокаТовары["СубконтоСписанияСебестоимостиБУ"+НомерСубконто]) ТОгда
				Если СтрокаТовары.СчетСписанияСебестоимостиБУ.ВидыСубконто[НомерСубконто-1].ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоТиповые.Номенклатура ТОгда
					СтрокаТовары["СубконтоСписанияСебестоимостиБУ"+НомерСубконто] = СтрокаТовары.Номенклатура;
				ИначеЕсли СтрокаТовары.СчетСписанияСебестоимостиБУ.ВидыСубконто[НомерСубконто-1].ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоТиповые.НоменклатурныеГруппы Тогда
					СтрокаТовары["СубконтоСписанияСебестоимостиБУ"+НомерСубконто] = СтрокаТовары.Номенклатура.НоменклатурнаяГруппа;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если Объект.УчитыватьНДС Тогда
			Если НЕ ЗначениеЗаполнено(СтрокаТовары.НДСВидОперацииРеализации) Тогда
				ОбработкаТабличныхЧастей.ЗаполнитьНДСВидРеализацииТабЧасти(СтрокаТовары, "Товары", МетаданныеДокумента, ТекущийПользователь);
			КонецЕсли;
		КонецЕсли;
		
		Если Объект.УчитыватьКПН Тогда
			
			Если Не ЗначениеЗаполнено(СтрокаТовары.АкцизВидОперацииРеализации) Тогда
				ОбработкаТабличныхЧастей.ЗаполнитьАкцизВидРеализацииТабЧасти(СтрокаТовары, "Товары", МетаданныеДокумента, ТекущийПользователь);
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(СтрокаТовары.СчетДоходовНУ) Тогда
				СтрокаТовары.СчетДоходовНУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СтрокаТовары.СчетДоходовБУ));
			КонецЕсли;
			
			НазначитьТипДляГруппыНумерованнойАналитикиСчета(СтрокаТовары, СтрокаТовары.СчетДоходовНУ, "СубконтоДоходовНУ", 1);
			
			Если НЕ ЗначениеЗаполнено(СтрокаТовары.СчетСписанияСебестоимостиНУ) Тогда
				СтрокаТовары.СчетСписанияСебестоимостиНУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СтрокаТовары.СчетСписанияСебестоимостиБУ));
			КонецЕсли;
			
			НазначитьТипДляГруппыНумерованнойАналитикиСчета(СтрокаТовары, СтрокаТовары.СчетСписанияСебестоимостиНУ, "СубконтоСписанияСебестоимостиНУ", 1);
			
			Для НомерСубконто = 1 По СтрокаТовары.СчетДоходовНУ.ВидыСубконто.Количество() Цикл
				Если НЕ ЗначениеЗаполнено(СтрокаТовары["СубконтоДоходовНУ"+НомерСубконто]) ТОгда
					Если СтрокаТовары.СчетДоходовНУ.ВидыСубконто[НомерСубконто-1].ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоТиповые.Номенклатура ТОгда
						СтрокаТовары["СубконтоДоходовНУ"+НомерСубконто] = СтрокаТовары.Номенклатура;
					ИначеЕсли СтрокаТовары.СчетДоходовНУ.ВидыСубконто[НомерСубконто-1].ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоТиповые.НоменклатурныеГруппы Тогда
						СтрокаТовары["СубконтоДоходовНУ"+НомерСубконто] = Строкатовары.Номенклатура.НоменклатурнаяГруппа;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			Для НомерСубконто = 1 По СтрокаТовары.СчетСписанияСебестоимостиНУ.ВидыСубконто.Количество() Цикл
				Если НЕ ЗначениеЗаполнено(СтрокаТовары["СубконтоСписанияСебестоимостиНУ"+НомерСубконто]) ТОгда
					Если СтрокаТовары.СчетСписанияСебестоимостиНУ.ВидыСубконто[НомерСубконто-1].ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоТиповые.Номенклатура ТОгда
						СтрокаТовары["СубконтоСписанияСебестоимостиНУ"+НомерСубконто] = СтрокаТовары.Номенклатура;
					ИначеЕсли СтрокаТовары.СчетСписанияСебестоимостиНУ.ВидыСубконто[НомерСубконто-1].ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоТиповые.НоменклатурныеГруппы Тогда
						СтрокаТовары["СубконтоСписанияСебестоимостиНУ"+НомерСубконто] = СтрокаТовары.Номенклатура.НоменклатурнаяГруппа;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	
	ДанныеСтрокиТаблицы = Новый Структура("Номенклатура, Содержание, Количество, Цена, Сумма, СтавкаНДС, СуммаНДС, 
		|СчетДоходовБУ, СубконтоДоходовБУ1, СубконтоДоходовБУ2, СубконтоДоходовБУ3, 
		|СчетДоходовНУ, СубконтоДоходовНУ1, СубконтоДоходовНУ2, СубконтоДоходовНУ3, 
		|СчетУчетаНДСПоРеализации, НДСВидОперацииРеализации, Всего,
		|ВидСубконтоДоходовБУ1, ВидСубконтоДоходовБУ2, ВидСубконтоДоходовБУ3,
		|ВидСубконтоДоходовНУ1, ВидСубконтоДоходовНУ2, ВидСубконтоДоходовНУ3,
		|СубконтоДоходовБУ1Доступность, СубконтоДоходовБУ2Доступность, СубконтоДоходовБУ3Доступность,
		|СубконтоДоходовНУ1Доступность, СубконтоДоходовНУ2Доступность, СубконтоДоходовНУ3Доступность");
		
	ДанныеОбъекта = Новый Структура(
		"Организация, СтруктурноеПодразделение, ВидОперации, Дата, Ссылка, ТипЦен, 
		|УчитыватьКПН, УчитыватьНДС, СуммаВключаетНДС,  
		|ВалютаДокумента, КурсВзаиморасчетов, КратностьВзаиморасчетов, Склад, ДоговорКонтрагента");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	СчетаКЗаполнению = Новый Соответствие;
	СчетаКЗаполнению.Вставить("Услуги.СчетДоходовБУ", Истина);
	СчетаКЗаполнению.Вставить("Услуги.СубконтоДоходовБУ1", Истина);
	СчетаКЗаполнению.Вставить("Услуги.СубконтоДоходовБУ2", Истина);
	СчетаКЗаполнению.Вставить("Услуги.СубконтоДоходовБУ3", Истина);
	СчетаКЗаполнению.Вставить("Услуги.СчетДоходовНУ", Истина);
	СчетаКЗаполнению.Вставить("Услуги.СубконтоДоходовНУ1", Истина);
	СчетаКЗаполнению.Вставить("Услуги.СубконтоДоходовНУ2", Истина);
	СчетаКЗаполнению.Вставить("Услуги.СубконтоДоходовНУ3", Истина);
	СчетаКЗаполнению.Вставить("Услуги.СчетУчетаНДСПоРеализации", Истина);
	
	Для Каждого СтрокаТовары Из Объект.Услуги Цикл
		
	 	СтрокаТовары.Содержание = СтрокаТовары.Номенклатура.НаименованиеПолное;
	 	
	 	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, СтрокаТовары);
		ЗаполненныеСчета = СчетаУчетаВДокументах.ЗаполнитьРеквизитыПриИзменении(
			Документы.ОтчетОРозничныхПродажах,
			СчетаКЗаполнению,
			ДанныеОбъекта,
			"Услуги",
			ДанныеСтрокиТаблицы); 	
		ЗаполнитьЗначенияСвойств(СтрокаТовары, ЗаполненныеСчета);  	
	
		НазначитьТипДляГруппыНумерованнойАналитикиСчета(СтрокаТовары, СтрокаТовары.СчетДоходовБУ, "СубконтоДоходовБУ", 1);
		
		Для НомерСубконто = 1 По СтрокаТовары.СчетДоходовБУ.ВидыСубконто.Количество() Цикл
			Если НЕ ЗначениеЗаполнено(СтрокаТовары["СубконтоДоходовБУ"+НомерСубконто]) ТОгда
				Если СтрокаТовары.СчетДоходовБУ.ВидыСубконто[НомерСубконто-1].ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоТиповые.Номенклатура ТОгда
					СтрокаТовары["СубконтоДоходовБУ"+НомерСубконто] = СтрокаТовары.Номенклатура;
				ИначеЕсли СтрокаТовары.СчетДоходовБУ.ВидыСубконто[НомерСубконто-1].ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоТиповые.НоменклатурныеГруппы Тогда
					СтрокаТовары["СубконтоДоходовБУ"+НомерСубконто] = Строкатовары.Номенклатура.НоменклатурнаяГруппа;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если Объект.УчитыватьНДС Тогда
			Если НЕ ЗначениеЗаполнено(СтрокаТовары.НДСВидОперацииРеализации) Тогда
				ОбработкаТабличныхЧастей.ЗаполнитьНДСВидРеализацииТабЧасти(СтрокаТовары, "Услуги", МетаданныеДокумента, ТекущийПользователь);
			КонецЕсли;	
		КонецЕсли;
		
		Если Объект.УчитыватьКПН ТОгда
			
			Если НЕ ЗначениеЗаполнено(СтрокаТовары.СчетДоходовНУ) Тогда
				СтрокаТовары.СчетДоходовНУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СтрокаТовары.СчетДоходовБУ));
			КонецЕсли;
			
			НазначитьТипДляГруппыНумерованнойАналитикиСчета(СтрокаТовары, СтрокаТовары.СчетДоходовНУ, "СубконтоДоходовНУ", 1);
			
			Для НомерСубконто = 1 По СтрокаТовары.СчетДоходовНУ.ВидыСубконто.Количество() Цикл
				Если НЕ ЗначениеЗаполнено(СтрокаТовары["СубконтоДоходовНУ"+НомерСубконто]) ТОгда
					Если СтрокаТовары.СчетДоходовНУ.ВидыСубконто[НомерСубконто-1].ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоТиповые.Номенклатура ТОгда
						СтрокаТовары["СубконтоДоходовНУ"+НомерСубконто] = СтрокаТовары.Номенклатура;
					ИначеЕсли СтрокаТовары.СчетДоходовНУ.ВидыСубконто[НомерСубконто-1].ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоТиповые.НоменклатурныеГруппы Тогда
						СтрокаТовары["СубконтоДоходовНУ"+НомерСубконто] = Строкатовары.Номенклатура.НоменклатурнаяГруппа;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры
Процедура ОтложеннаяОбработка_ОтчетБанкаПоОперациямЭквайринг(Объект)
	Если Не ЗначениеЗаполнено(Объект.СчетУчетаРасчетовСКонтрагентомБУ) Тогда
		Объект.СчетУчетаРасчетовСКонтрагентомБУ = ПланыСчетов.Типовой.ПрочиеРасходы;
	КонецЕсли;
	
	Объект.Оплачено = Истина;
	
	Для Каждого СтрокаПлатеж ИЗ Объект.РасшифровкаПлатежа Цикл
		
		СчетаУчета = УправлениеВзаиморасчетамиСервер.ПолучитьСчетаРасчетовСКонтрагентом(Объект.Организация, Объект.Контрагент, СтрокаПлатеж.ДоговорКонтрагента);
		
		Если Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПокупателя Тогда
			
			СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентомБУ    	= СчетаУчета.СчетРасчетовПокупателя;
			СтрокаПлатеж.СчетУчетаРасчетовПоАвансам        		= СчетаУчета.СчетАвансовПокупателя;
			
		ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПоставщиком Тогда
			СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентомБУ    	= СчетаУчета.СчетРасчетов;
			СтрокаПлатеж.СчетУчетаРасчетовПоАвансам        		= СчетаУчета.СчетВозвратов;
			
		ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочиеРасчетыСКонтрагентами ТОгда
			
			СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентомБУ    	= ПланыСчетов.Типовой.ПрочаяКраткосрочнаяДебиторскаяЗадолженность;
			
		ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.РасчетыПоКредитамИЗаймам ТОгда
				
			СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентомБУ    	= ПланыСчетов.Типовой.КраткосрочныеФинансовыеАктивыОцениваемыеПоАмортизированнойСтоимости;
			СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентомНУ 		= ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентомБУ));
			
		ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаСтруктурногоПодразделения ТОгда
			
			СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентомБУ    	= ПланыСчетов.Типовой.КраткосрочнаяДебиторскаяЗадолженностьФилиаловИСтруктурныхПодразделений;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочееПоступлениеБезналичныхДенежныхСредств Тогда
		
		НазначитьТипДляГруппыНумерованнойАналитикиСчета(Объект, Объект.СчетУчетаРасчетовСКонтрагентомБУ, "СубконтоКтБУ", 1);
		
		Если Объект.УчитыватьКПН Тогда
			Объект.СчетУчетаРасчетовСКонтрагентомНУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", Объект.СчетУчетаРасчетовСКонтрагентомБУ));
	
			НазначитьТипДляГруппыНумерованнойАналитикиСчета(Объект, Объект.СчетУчетаРасчетовСКонтрагентомНУ, "СубконтоКтНУ", 1);
			
			ЧислоАктивныхСубконто = Объект.СчетУчетаРасчетовСКонтрагентомБУ.ВидыСубконто.Количество();
			
			Для Сч = 1 По ЧислоАктивныхСубконто Цикл
				ОбщегоНазначенияБККлиентСервер.ЗаменитьСубконтоНУ(Объект, Объект.СчетУчетаРасчетовСКонтрагентомБУ, Объект.СчетУчетаРасчетовСКонтрагентомНУ, Сч, Объект["СубконтоКтБУ"+Сч], "СубконтоКтНУ");
			КонецЦикла;
		КонецЕсли;
			
	КонецЕсли;
КонецПроцедуры
Процедура ОтложеннаяОбработка_ПБДС(Объект)
	Если Не ЗначениеЗаполнено(Объект.СчетУчетаРасчетовСКонтрагентомБУ) Тогда
		Объект.СчетУчетаРасчетовСКонтрагентомБУ = ПланыСчетов.Типовой.ПрочиеРасходы;
	КонецЕсли;
	
	Объект.Оплачено = Истина;
	
	Для Каждого СтрокаПлатеж ИЗ Объект.РасшифровкаПлатежа Цикл
		
		СчетаУчета = УправлениеВзаиморасчетамиСервер.ПолучитьСчетаРасчетовСКонтрагентом(Объект.Организация, Объект.Контрагент, СтрокаПлатеж.ДоговорКонтрагента);
		
		Если Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПокупателя Тогда
			
			СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентомБУ    	= СчетаУчета.СчетРасчетовПокупателя;
			СтрокаПлатеж.СчетУчетаРасчетовПоАвансам        		= СчетаУчета.СчетАвансовПокупателя;
			
		ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПоставщиком Тогда
			СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентомБУ    	= СчетаУчета.СчетРасчетов;
			СтрокаПлатеж.СчетУчетаРасчетовПоАвансам        		= СчетаУчета.СчетВозвратов;
			
		ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочиеРасчетыСКонтрагентами ТОгда
			
			СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентомБУ    	= ПланыСчетов.Типовой.ПрочаяКраткосрочнаяДебиторскаяЗадолженность;
			
		ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.РасчетыПоКредитамИЗаймам ТОгда
				
			СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентомБУ    	= ПланыСчетов.Типовой.КраткосрочныеФинансовыеАктивыОцениваемыеПоАмортизированнойСтоимости;
			СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентомНУ 		= ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентомБУ));
			
		ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаСтруктурногоПодразделения ТОгда
			
			СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентомБУ    	= ПланыСчетов.Типовой.КраткосрочнаяДебиторскаяЗадолженностьФилиаловИСтруктурныхПодразделений;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочееПоступлениеБезналичныхДенежныхСредств Тогда
		
		НазначитьТипДляГруппыНумерованнойАналитикиСчета(Объект, Объект.СчетУчетаРасчетовСКонтрагентомБУ, "СубконтоКтБУ", 1);
		
		Если Объект.УчитыватьКПН Тогда
			Объект.СчетУчетаРасчетовСКонтрагентомНУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", Объект.СчетУчетаРасчетовСКонтрагентомБУ));
	
			НазначитьТипДляГруппыНумерованнойАналитикиСчета(Объект, Объект.СчетУчетаРасчетовСКонтрагентомНУ, "СубконтоКтНУ", 1);
			
			ЧислоАктивныхСубконто = Объект.СчетУчетаРасчетовСКонтрагентомБУ.ВидыСубконто.Количество();
			
			Для Сч = 1 По ЧислоАктивныхСубконто Цикл
				ОбщегоНазначенияБККлиентСервер.ЗаменитьСубконтоНУ(Объект, Объект.СчетУчетаРасчетовСКонтрагентомБУ, Объект.СчетУчетаРасчетовСКонтрагентомНУ, Сч, Объект["СубконтоКтБУ"+Сч], "СубконтоКтНУ");
			КонецЦикла;
		КонецЕсли;
			
	КонецЕсли;
КонецПроцедуры
Процедура ОтложеннаяОбработка_ПередачаМатериаловВПереработку(Объект, ПараметрыКонвертации, ОбъектМодифицирован)
	ОрганизацияЯвляетсяПлательщикомКПН =  ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Объект.Организация, Объект.Дата);
	
	Если Не ОрганизацияЯвляетсяПлательщикомКПН Тогда
		Объект.УчитыватьКПН = Ложь;
	Иначе
		Объект.УчитыватьКПН = Истина;
	КонецЕсли;	
	
	Если НЕ Объект.УчитыватьКПН Тогда
		Объект.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НеОтражаетсяВНУ;
	Иначе
		Объект.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ;
	КонецЕсли;	
	
	Документы.ПередачаТоваров.ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, "Товары");
	
	Для Каждого СтрокаТовары Из Объект.Товары Цикл
		Если СтрокаТовары.КлючСвязи = 0 Тогда
			СтрокаТовары.КлючСвязи = ОбщегоНазначенияБККлиентСервер.НовыйКлючСвязиСтрокиТаблицы(Объект.Товары);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры
Процедура ОтложеннаяОбработка_ПеремещениеТоваров(Объект, ПараметрыКонвертации, ОбъектМодифицирован)
	Документы.ПеремещениеТоваров.ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, "Товары");
КонецПроцедуры
Процедура ОтложеннаяОбработка_ПКОПолучениеНаличныхВБанке(Объект, ПараметрыКонвертации, ОбъектМодифицирован)
	Для Каждого СтрокаПлатежа ИЗ Объект.РасшифровкаПлатежа Цикл
		
		СчетаУчета = УправлениеВзаиморасчетамиСервер.ПолучитьСчетаРасчетовСКонтрагентом(Объект.Организация, Объект.Контрагент, СтрокаПлатежа.ДоговорКонтрагента);
		
		Если Объект.ВидОперации = Перечисления.ВидыОперацийПКО.ОплатаПокупателя Тогда
			
			Если НЕ ЗначениеЗаполнено(СтрокаПлатежа.СчетУчетаРасчетовСКонтрагентомБУ) Тогда
				СтрокаПлатежа.СчетУчетаРасчетовСКонтрагентомБУ = СчетаУчета.СчетРасчетовПокупателя;
				СтрокаПлатежа.СчетУчетаРасчетовПоАвансам = СчетаУчета.СчетАвансовПокупателя;
			КонецЕсли;
			
		ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПоставщиком Тогда
			
			СтрокаПлатежа.СчетУчетаРасчетовСКонтрагентомБУ = СчетаУчета.СчетРасчетов;
			СтрокаПлатежа.СчетУчетаРасчетовПоАвансам = СчетаУчета.СчетВозвратов;
			
		ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийПКО.РасчетыПоКредитамИЗаймамСКонтрагентами Тогда
			
			СтрокаПлатежа.СчетУчетаРасчетовСКонтрагентомБУ = ПланыСчетов.Типовой.КраткосрочныеФинансовыеАктивыОцениваемыеПоАмортизированнойСтоимости;
			
		ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийПКО.ОплатаСтруктурногоПодразделения Тогда
			
			СтрокаПлатежа.СчетУчетаРасчетовСКонтрагентомБУ = ПланыСчетов.Типовой.КраткосрочнаяДебиторскаяЗадолженностьФилиаловИСтруктурныхПодразделений;
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаПлатежа.СчетУчетаРасчетовСКонтрагентомНУ) Тогда
			СтрокаПлатежа.СчетУчетаРасчетовСКонтрагентомНУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СтрокаПлатежа.СчетУчетаРасчетовСКонтрагентомБУ));
		КонецЕсли;		
		
	КонецЦикла;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствПрочее Тогда
		
		НазначитьТипДляГруппыНумерованнойАналитикиСчета(Объект, Объект.СчетУчетаРасчетовСКонтрагентомБУ, "СубконтоКтБУ", 1);
		
		Если Объект.УчитыватьКПН Тогда
			Объект.СчетУчетаРасчетовСКонтрагентомНУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", Объект.СчетУчетаРасчетовСКонтрагентомБУ));
			НазначитьТипДляГруппыНумерованнойАналитикиСчета(Объект, Объект.СчетУчетаРасчетовСКонтрагентомНУ, "СубконтоКтНУ", 1);
			
			ЧислоАктивныхСубконто = Объект.СчетУчетаРасчетовСКонтрагентомБУ.ВидыСубконто.Количество();
		
			Для Сч = 1 По ЧислоАктивныхСубконто Цикл
				
				ОбщегоНазначенияБККлиентСервер.ЗаменитьСубконтоНУ(Объект, Объект.СчетУчетаРасчетовСКонтрагентомБУ, Объект.СчетУчетаРасчетовСКонтрагентомНУ, Сч, Объект["СубконтоКтБУ"+Сч], "СубконтоКтНУ");
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствПрочее Тогда
		Контрагент = Справочники.Контрагенты.ПустаяСсылка();
	КонецЕсли;
КонецПроцедуры
Процедура ОтложеннаяОбработка_ПОСБДС(Объект, ПараметрыКонвертации, ОбъектМодифицирован)
	Объект.Оплачено = Истина;
	
	Для Каждого СтрокаПлатеж ИЗ Объект.РасшифровкаПлатежа Цикл
		
		СчетаУчета = УправлениеВзаиморасчетамиСервер.ПолучитьСчетаРасчетовСКонтрагентом(Объект.Организация, Объект.Контрагент, СтрокаПлатеж.ДоговорКонтрагента);
		
		Если Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.РасчетыПоКредитамИЗаймам Тогда
			
			СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентомБУ    = ПланыСчетов.Типовой.КраткосрочныеБанковскиеЗаймы;
			
		ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПокупателю Тогда
				
			СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентомБУ    = СчетаУчета.СчетРасчетовПокупателя;
			СтрокаПлатеж.СчетУчетаРасчетовПоАвансам        = СчетаУчета.СчетВозвратовПокупателя;
				
		ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПрочиеРасчетыСКонтрагентами ТОгда
				
			СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентомБУ    = ПланыСчетов.Типовой.ПрочаяКраткосрочнаяКредиторскаяЗадолженность;
			
		ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ОплатаПоставщику Тогда
			
			СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентомБУ    = СчетаУчета.СчетРасчетов;
			СтрокаПлатеж.СчетУчетаРасчетовПоАвансам        = СчетаУчета.СчетАвансов;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПрочееСписаниеБезналичныхДенежныхСредств Тогда
		
		НазначитьТипДляГруппыНумерованнойАналитикиСчета(Объект, Объект.СчетУчетаРасчетовСКонтрагентомБУ, "СубконтоДтБУ", 1);
		
		Если Объект.УчитыватьКПН Тогда
			Объект.СчетУчетаРасчетовСКонтрагентомНУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", Объект.СчетУчетаРасчетовСКонтрагентомБУ));
			НазначитьТипДляГруппыНумерованнойАналитикиСчета(Объект, Объект.СчетУчетаРасчетовСКонтрагентомНУ, "СубконтоДтНУ", 1);
			
			ЧислоАктивныхСубконто = Объект.СчетУчетаРасчетовСКонтрагентомБУ.ВидыСубконто.Количество();
		
			Для Сч = 1 По ЧислоАктивныхСубконто Цикл
				ОбщегоНазначенияБККлиентСервер.ЗаменитьСубконтоНУ(Объект, Объект.СчетУчетаРасчетовСКонтрагентомБУ, Объект.СчетУчетаРасчетовСКонтрагентомНУ, Сч, Объект["СубконтоДтБУ"+Сч], "СубконтоДтНУ");
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
Процедура ОтложеннаяОбработка_ПоступлениеДопРасходов(Объект, ПараметрыКонвертации, ОбъектМодифицирован)
	СчетаУчета = УправлениеВзаиморасчетамиСервер.ПолучитьСчетаРасчетовСКонтрагентом(Объект.Организация, Объект.Контрагент, Объект.ДоговорКонтрагента);
	Объект.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетов;
	Объект.СчетУчетаРасчетовПоАвансам     = СчетаУчета.СчетАвансов;
	
	Документы.ПоступлениеДопРасходов.ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, "Товары");
	
	Документы.ПоступлениеДопРасходов.ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, "ОС");
КонецПроцедуры
Процедура ОтложеннаяОбработка_ПоступлениеИзПереработки(Объект, ПараметрыКонвертации, ОбъектМодифицирован)
	ОрганизацияЯвляетсяПлательщикомКПН =  ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Объект.Организация, Объект.Дата);
	
	Если Не ОрганизацияЯвляетсяПлательщикомКПН Тогда
		Объект.УчитыватьКПН = Ложь;
	Иначе
		Объект.УчитыватьКПН = Истина;
	КонецЕсли;	
	
	Если НЕ Объект.УчитыватьКПН Тогда
		Объект.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НеОтражаетсяВНУ;
	Иначе
		Объект.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ;
	КонецЕсли;	
	
	Если НЕ ЗначениеЗаполнено(Объект.Склад) Тогда
		Объект.Склад = ПараметрыКонвертации.СкладПоУмолчанию;
	КонецЕсли;
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	
	СтруктураКурсаДокумента = ОбщегоНазначенияБК.ПолучитьКурсВалюты(Объект.ВалютаДокумента, Объект.Дата);
	Если Не ЗначениеЗаполнено(Объект.КурсДокумента) Или Не ЗначениеЗаполнено(Объект.КратностьДокумента) Тогда
		Объект.КурсДокумента 	  = СтруктураКурсаДокумента.Курс;
		Объект.КратностьДокумента = СтруктураКурсаДокумента.Кратность;
	КонецЕсли;	
	
	// Заполним счета учета затрат
	Если НЕ ЗначениеЗаполнено(Объект.СчетЗатратБУ) Тогда
		Объект.СчетЗатратБУ = ПланыСчетов.Типовой.ОсновноеПроизводство;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Объект.СчетЗатратНУ) Тогда
		Объект.СчетЗатратНУ = ПланыСчетов.Налоговый.ОсновноеПроизводство;
	КонецЕсли;
	
	// Заполним счета учета расчетов с контрагентом
	СчетаУчета = УправлениеВзаиморасчетамиСервер.ПолучитьСчетаРасчетовСКонтрагентом(Объект.Организация, Объект.Контрагент, Объект.ДоговорКонтрагента);
	Если НЕ ЗначениеЗаполнено(Объект.СчетУчетаРасчетовСКонтрагентом) Тогда
		Объект.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетов;
	КонецЕсли;	
	Если НЕ ЗначениеЗаполнено(Объект.СчетУчетаРасчетовПоАвансам) Тогда	
		Объект.СчетУчетаРасчетовПоАвансам = СчетаУчета.СчетАвансов;
	КонецЕсли;
	
	// Заполним необходимые реквизиты в табличной части Услуги 
	Для каждого ТекСтрока Из Объект.Услуги Цикл
		СчетаУчета = ПроцедурыБухгалтерскогоУчета.ПолучитьСчетаУчетаНоменклатуры(Объект.Организация, ТекСтрока.Номенклатура);
		Если НЕ ЗначениеЗаполнено(ТекСтрока.СчетУчетаНДС) Тогда
			ТекСтрока.СчетУчетаНДС = СчетаУчета.СчетУчетаНДСПоПриобретению;
		КонецЕсли;
	КонецЦикла;
	
	// Заполним счета и другие необходимые реквизиты в табличной части Возвращенные материалы
	Для каждого ТекСтрока Из Объект.ИспользованныеМатериалы Цикл		
		СчетаУчета = ПроцедурыБухгалтерскогоУчета.ПолучитьСчетаУчетаНоменклатуры(Объект.Организация, ТекСтрока.Номенклатура);
		ТекСтрока.СчетУчетаБУ = СчетаУчета.СчетПередачиБУ;
		Если Объект.УчитыватьКПН Тогда
			ТекСтрока.СчетУчетаНУ = СчетаУчета.СчетПередачиНУ;
		КонецЕсли;		
		ТекСтрока.СчетУчетаНУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ, ВидЗатратНУ", Объект.СчетЗатратБУ, ТекСтрока.СтатьяЗатрат.ВидРасходовНУ), "НУ", Ложь, Объект.Дата);
	КонецЦикла;
	
	// Заполним счета БУ и НУ и другие необходимые реквизиты в табличной части Возвращенные материалы
	Для каждого ТекСтрока Из Объект.ВозвращенныеМатериалы Цикл		
		СчетаУчета = ПроцедурыБухгалтерскогоУчета.ПолучитьСчетаУчетаНоменклатуры(Объект.Организация, ТекСтрока.Номенклатура);
		ТекСтрока.СчетУчетаБУ = СчетаУчета.СчетПередачиБУ;
		ТекСтрока.СчетПередачиБУ = СчетаУчета.СчетУчетаБУ;
		Если Объект.УчитыватьКПН Тогда
			ТекСтрока.СчетУчетаНУ = СчетаУчета.СчетПередачиНУ;
			ТекСтрока.СчетПередачиНУ = СчетаУчета.СчетУчетаНУ;
		КонецЕсли;
	КонецЦикла;
	
	// Заполним счета БУ и НУ в табличной части Продукция
	Для каждого ТекСтрока Из Объект.Продукция Цикл
			
		СчетаУчета = ПроцедурыБухгалтерскогоУчета.ПолучитьСчетаУчетаНоменклатуры(Объект.Организация, ТекСтрока.Номенклатура);
		ТекСтрока.СчетБУ = СчетаУчета.СчетУчетаБУ;
		Если Объект.УчитыватьКПН Тогда
			ТекСтрока.СчетНУ = СчетаУчета.СчетУчетаНУ;			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ТекСтрока.Спецификация) Тогда
			ТекСтрока.Спецификация = УправлениеПроизводствомСервер.ОпределитьСпецификациюПоУмолчанию(ТекСтрока.Номенклатура, Объект.Дата);
		КонецЕсли;
		
		// Заполним плановую сумму в табличной части Продукция
		Если НЕ ЗначениеЗаполнено(ТекСтрока.ПлановаяСтоимость) Тогда    
			ТипЦенПлановойСебестоимости = ПараметрыКонвертации.ТипЦенПлановойСебестоимости;
			ВалютаРегламентированногоУчета = ПараметрыКонвертации.ВалютаРегламентированногоУчета;
			ТекСтрока.ПлановаяСтоимость = УправлениеЦенообразованием.ПолучитьЦенуНоменклатуры(
			ТекСтрока.Номенклатура,
			ТипЦенПлановойСебестоимости,
			Объект.Дата,
			ВалютаРегламентированногоУчета,
			1, , Объект.Организация
			);
			ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьПлановуюСумму(ТекСтрока);
		КонецЕсли;
		
	КонецЦикла;   
	
	МетаданныеДокумента = Объект.Ссылка.Метаданные();
	
	Для Каждого СтрокаУслуги Из Объект.Услуги Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаУслуги.СчетУчетаНДС) Тогда
			СтрокаУслуги.СчетУчетаНДС = ПланыСчетов.Типовой.НалогНаДобавленнуюСтоимостьКВозмещению;
		КонецЕсли;
		
		Если Объект.УчитыватьКПН Тогда
			Если НЕ ЗначениеЗаполнено(СтрокаУслуги.НДСВидОборота) Тогда
				ОбработкаТабличныхЧастей.ЗаполнитьНДСВидОборотаТабЧасти(СтрокаУслуги, Объект, "Услуги", МетаданныеДокумента);
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(СтрокаУслуги.НДСВидПоступления) Тогда
				ОбработкаТабличныхЧастей.ЗаполнитьНДСВидПоступленияТабЧасти(СтрокаУслуги, "Услуги", МетаданныеДокумента, ТекущийПользователь);
			КонецЕсли;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаУслуги.Содержание) Тогда
			ОбработкаТабличныхЧастей.ЗаполнитьСодержаниеТабЧасти(СтрокаУслуги, Объект, "Услуги", Объект.Метаданные());
		КонецЕсли;	
		
	КонецЦикла;
КонецПроцедуры
Процедура ОтложеннаяОбработка_Производство(Объект, ПараметрыКонвертации, ОбъектМодифицирован)
	ОрганизацияЯвляетсяПлательщикомКПН =  ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Объект.Организация, Объект.Дата);
	
	Если Не ОрганизацияЯвляетсяПлательщикомКПН Тогда
		Объект.УчитыватьКПН = Ложь;
	Иначе
		Объект.УчитыватьКПН = Истина;
	КонецЕсли;	
	
	Если НЕ Объект.УчитыватьКПН Тогда
		Объект.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НеОтражаетсяВНУ;
	Иначе
		Объект.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ;
	КонецЕсли;	
	
	// Заполним счета учета затрат
	Если НЕ ЗначениеЗаполнено (Объект.СчетЗатратБУ) Тогда
		Объект.СчетЗатратБУ = ПланыСчетов.Типовой.ОсновноеПроизводство;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено (Объект.СчетЗатратНУ) Тогда
		Объект.СчетЗатратНУ = ПланыСчетов.Налоговый.ОсновноеПроизводство;
	КонецЕсли;
	                 	
	// Заполним необходимые реквизиты в табличной части Продукция
	Документы.ОтчетПроизводстваЗаСмену.ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, "Продукция");
	Для каждого ТекСтрока Из Объект.Продукция Цикл
		УправлениеПроизводствомСервер.ЗаполнитьПлановуюСебестоимость(ТекСтрока, Объект.Дата, Объект.Организация);
		ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьПлановуюСумму(ТекСтрока);
		ТекСтрока.НоменклатурнаяГруппа = ТекСтрока.Номенклатура.НоменклатурнаяГруппа;
		Если Не ЗначениеЗаполнено(ТекСтрока.Спецификация) Тогда
			ТекСтрока.Спецификация = УправлениеПроизводствомСервер.ОпределитьСпецификациюПоУмолчанию(ТекСтрока.Номенклатура, Объект.Дата);
		КонецЕсли;	
	КонецЦикла;
	                   	
	// Заполним необходимые реквизиты в табличной части Услуги
	Документы.ОтчетПроизводстваЗаСмену.ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, "Услуги");
	Для каждого ТекСтрока Из Объект.Услуги Цикл
		УправлениеПроизводствомСервер.ЗаполнитьПлановуюСебестоимость(ТекСтрока, Объект.Дата, Объект.Организация);
		ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьПлановуюСумму(ТекСтрока);
		ТекСтрока.НоменклатурнаяГруппа = ТекСтрока.Номенклатура.НоменклатурнаяГруппа;
		Если Не ЗначениеЗаполнено(ТекСтрока.Спецификация) Тогда
			ТекСтрока.Спецификация = УправлениеПроизводствомСервер.ОпределитьСпецификациюПоУмолчанию(ТекСтрока.Номенклатура, Объект.Дата);
		КонецЕсли;	
	КонецЦикла;
	                   	
	// Заполним необходимые реквизиты в табличной части Возвратные отходы
	Документы.ОтчетПроизводстваЗаСмену.ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, "ВозвратныеОтходы");
	Для Каждого ТекСтрока Из Объект.ВозвратныеОтходы Цикл
		ТипЦенПлановойСебестоимости   = Константы.ТипЦенПлановойСебестоимостиНоменклатуры.Получить();
		ВалютаРеглментированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
		Если ЗначениеЗаполнено(ТипЦенПлановойСебестоимости) Тогда
			ТекСтрока.Цена = УправлениеЦенообразованием.ПолучитьЦенуНоменклатуры(
			ТекСтрока.Номенклатура,
			ТипЦенПлановойСебестоимости,
			Объект.Дата,
			ВалютаРеглментированногоУчета,
			1, , Объект.Организация
			);
		КонецЕсли;
		ТекСтрока.Сумма = ТекСтрока.Количество * ТекСтрока.Цена;
	КонецЦикла;
КонецПроцедуры
Процедура ОтложеннаяОбработка_ПТиУ(Объект, ОбъектМодифицирован)
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	МетаданныеДокумента = Объект.Метаданные();
	
	Документы.ПоступлениеТоваровУслуг.ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, "Товары");
	
	Для Каждого СтрокаТовары Из Объект.Товары Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТовары.СчетУчетаНДС) Тогда
			СтрокаТовары.СчетУчетаНДС = ПланыСчетов.Типовой.НалогНаДобавленнуюСтоимостьКВозмещению;
		КонецЕсли;
		
		Если Объект.УчитыватьНДС Тогда
			Если НЕ ЗначениеЗаполнено(СтрокаТовары.НДСВидОборота) Тогда
				ОбработкаТабличныхЧастей.ЗаполнитьНДСВидОборотаТабЧасти(СтрокаТовары, Объект, "Товары", МетаданныеДокумента);
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(СтрокаТовары.НДСВидПоступления) Тогда
				ОбработкаТабличныхЧастей.ЗаполнитьНДСВидПоступленияТабЧасти(СтрокаТовары, "Товары", МетаданныеДокумента, ТекущийПользователь);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого СтрокаТовары Из Объект.ОС Цикл
		
		Если Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ОтСтруктурногоПодразделения Тогда
			СтрокаТовары.СуммаНУ = СтрокаТовары.Сумма;
		КонецЕсли;
		
		СтрокаТовары.СчетУчетаНУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СтрокаТовары.СчетУчетаБУ));
		
		Если НЕ ЗначениеЗаполнено(СтрокаТовары.СчетУчетаНДС) Тогда
			СтрокаТовары.СчетУчетаНДС = ПланыСчетов.Типовой.НалогНаДобавленнуюСтоимостьКВозмещению;
		КонецЕсли;
		
		Если Объект.УчитыватьНДС Тогда
			Если НЕ ЗначениеЗаполнено(СтрокаТовары.НДСВидОборота) Тогда
				ОбработкаТабличныхЧастей.ЗаполнитьНДСВидОборотаТабЧасти(СтрокаТовары, Объект, "ОС", МетаданныеДокумента);
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(СтрокаТовары.НДСВидПоступления) Тогда
				ОбработкаТабличныхЧастей.ЗаполнитьНДСВидПоступленияТабЧасти(СтрокаТовары, "ОС", МетаданныеДокумента, ТекущийПользователь);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	СчетаУчета = УправлениеВзаиморасчетамиСервер.ПолучитьСчетаРасчетовСКонтрагентом(Объект.Организация, Объект.Контрагент, Объект.ДоговорКонтрагента);
			
	Объект.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетов;
	Объект.СчетУчетаРасчетовПоАвансам     = СчетаУчета.СчетАвансов;
	
	
	ТабличнаяЧасть = Объект["Услуги"];
	
	ДанныеОбъекта = Новый Структура("Дата, Организация, ВидОперации, УчитыватьКПН, УчитыватьНДС");
	
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	СоответствиеСчетовУчета = ПроцедурыБухгалтерскогоУчета.ПолучитьСчетаУчетаСпискаНоменклатуры(
	ДанныеОбъекта.Организация, ОбщегоНазначения.ВыгрузитьКолонку(ТабличнаяЧасть, "Номенклатура", Истина), ДанныеОбъекта.Дата);
	
	Для Каждого СтрокаТовары Из Объект.Услуги Цикл
		
		СчетаИзРС = ложь;
		
		Субконто1 = СтрокаТовары.СубконтоЗатратБУ1;
		Субконто2 = СтрокаТовары.СубконтоЗатратБУ2;
		
		СчетаУчета = ПроцедурыБухгалтерскогоУчета.ПолучитьСчетаУчетаНоменклатуры(Объект.Организация, СтрокаТовары.Номенклатура);
		
		Если НЕ ЗначениеЗаполнено(СтрокаТовары.СчетЗатратБУ) Тогда
			СчетаУчета = СоответствиеСчетовУчета.Получить(СтрокаТовары.Номенклатура);
			Документы.ПоступлениеТоваровУслуг.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, СтрокаТовары, "Услуги", СчетаУчета);
			СчетаИзРС = Истина;
		Иначе
			СтрокаТовары.СчетУчетаНДС = СчетаУчета.СчетУчетаНДСПоПриобретению;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаТовары.СчетУчетаНДС) Тогда
			СтрокаТовары.СчетУчетаНДС = ПланыСчетов.Типовой.НалогНаДобавленнуюСтоимостьКВозмещению;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаТовары.СчетЗатратБУ) Тогда
			СтрокаТовары.СчетЗатратБУ = ПланыСчетов.Типовой.АдминистративныеРасходы;
			СтрокаТовары.СубконтоЗатратБУ1 = Субконто1;
			СтрокаТовары.СубконтоЗатратБУ2 = Субконто2;
			СчетаИзРС = Ложь;
		КонецЕсли;
		
		Если НЕ СчетаИзРС Тогда
			
			НазначитьТипДляГруппыНумерованнойАналитикиСчета(СтрокаТовары, СтрокаТовары.СчетЗатратБУ, "СубконтоЗатратБУ", 1);
			
			Если Объект.УчитыватьКПН Тогда
				СтрокаТовары.СчетЗатратНУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СтрокаТовары.СчетЗатратБУ));
				НазначитьТипДляГруппыНумерованнойАналитикиСчета(СтрокаТовары, СтрокаТовары.СчетЗатратНУ, "СубконтоЗатратНУ", 1);			
			КонецЕсли;
		КонецЕсли;
		
		Если Объект.УчитыватьНДС Тогда
			Если НЕ ЗначениеЗаполнено(СтрокаТовары.НДСВидОборота) Тогда
				ОбработкаТабличныхЧастей.ЗаполнитьНДСВидОборотаТабЧасти(СтрокаТовары, Объект, "Услуги", МетаданныеДокумента);
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(СтрокаТовары.НДСВидПоступления) Тогда
				ОбработкаТабличныхЧастей.ЗаполнитьНДСВидПоступленияТабЧасти(СтрокаТовары, "Услуги", МетаданныеДокумента, ТекущийПользователь);
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ СчетаИзРС Тогда
			
			Субконто1 = СтрокаТовары.СубконтоЗатратБУ1;
			Субконто2 = СтрокаТовары.СубконтоЗатратБУ2;
			Субконто3 = СтрокаТовары.СубконтоЗатратБУ3;
			
			ЧислоАктивныхСубконто = СтрокаТовары.СчетЗатратБУ.ВидыСубконто.Количество();
			
			Для Сч = 1 По ЧислоАктивныхСубконто Цикл
				
				Если СтрокаТовары.СчетЗатратБУ.ВидыСубконто[Сч-1].ВидСубконто.ТипЗначения.СодержитТип(ТипЗнч(Субконто1)) И НЕ Субконто1 = Неопределено Тогда
					СтрокаТовары["СубконтоЗатратБУ"+Сч] = Субконто1;
				КонецЕсли;
				
				Если СтрокаТовары.СчетЗатратБУ.ВидыСубконто[Сч-1].ВидСубконто.ТипЗначения.СодержитТип(ТипЗнч(Субконто2)) И НЕ Субконто2 = Неопределено Тогда
					СтрокаТовары["СубконтоЗатратБУ"+Сч] = Субконто2;
				КонецЕсли;
				
				Если СтрокаТовары.СчетЗатратБУ.ВидыСубконто[Сч-1].ВидСубконто.ТипЗначения.СодержитТип(ТипЗнч(Субконто3)) И НЕ Субконто3 = Неопределено Тогда
					СтрокаТовары["СубконтоЗатратБУ"+Сч] = Субконто3;
				КонецЕсли;
				
				ТипСубк = СтрокаТовары.СчетЗатратБУ.ВидыСубконто[Сч - 1].ВидСубконто.ТипЗначения;
				СтрокаТовары["СубконтоЗатратБУ"+Сч] = ТипСубк.ПривестиЗначение(СтрокаТовары["СубконтоЗатратБУ"+Сч]);
				
				Если Объект.УчитыватьКПН Тогда
					ОбщегоНазначенияБККлиентСервер.ЗаменитьСубконтоНУ(СтрокаТовары, СтрокаТовары.СчетЗатратБУ, СтрокаТовары.СчетЗатратНУ, Сч, СтрокаТовары["СубконтоЗатратБУ"+Сч], "СубконтоЗатратНУ");
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
КонецПроцедуры
Процедура ОтложеннаяОбработка_РКО(Объект, ПараметрыКонвертации, ОбъектМодифицирован)
	//заполним необходимые данные при установке нового вида операции
	Если Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ИнкассацияДенежныхСредств Тогда
		// установка значения по умолчанию
		Если НЕ ЗначениеЗаполнено(Объект.СчетУчетаРасчетовСКонтрагентомБУ) Тогда
			Объект.СчетУчетаРасчетовСКонтрагентомБУ = ПланыСчетов.Типовой.ДенежныеСредстваВПути;
			Объект.СубконтоДтБУ1 = Объект.Касса;
			Объект.СубконтоДтБУ2 = Объект.СтатьяДвиженияДенежныхСредств;
		КонецЕсли;	
		
		Если НЕ ЗначениеЗаполнено(Объект.СчетУчетаРасчетовСКонтрагентомНУ) Тогда
			Объект.СчетУчетаРасчетовСКонтрагентомНУ = ПланыСчетов.Налоговый.ДенежныеСредстваВПути;
			Объект.СубконтоДтНУ1 = Объект.Касса;
			Объект.СубконтоДтНУ2 = Объект.СтатьяДвиженияДенежныхСредств;
		КонецЕсли; 	
	КонецЕсли;
	
	
	Для Каждого СтрокаПлатежа ИЗ Объект.РасшифровкаПлатежа Цикл
		
		СчетаУчета = УправлениеВзаиморасчетамиСервер.ПолучитьСчетаРасчетовСКонтрагентом(Объект.Организация, Объект.Контрагент, СтрокаПлатежа.ДоговорКонтрагента);
		
		Если Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаПоставщику Тогда
			
			Если НЕ ЗначениеЗаполнено(СтрокаПлатежа.СчетУчетаРасчетовСКонтрагентомБУ) Тогда
				СтрокаПлатежа.СчетУчетаРасчетовСКонтрагентомБУ = СчетаУчета.СчетРасчетов;
				СтрокаПлатежа.СчетУчетаРасчетовПоАвансам = СчетаУчета.СчетАвансов;
			КонецЕсли;
			
		ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателю Тогда
			
			СтрокаПлатежа.СчетУчетаРасчетовСКонтрагентомБУ = СчетаУчета.СчетРасчетовПокупателя;
			СтрокаПлатежа.СчетУчетаРасчетовПоАвансам = СчетаУчета.СчетВозвратовПокупателя;
			
		ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИЗаймамСКонтрагентами Тогда
			
			СтрокаПлатежа.СчетУчетаРасчетовСКонтрагентомБУ = ПланыСчетов.Типовой.КраткосрочныеФинансовыеОбязательстваОцениваемыеПоАмортизированнойСтоимости;
			
		ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаСтруктурномуПодразделению Тогда
			
			СтрокаПлатежа.СчетУчетаРасчетовСКонтрагентомБУ = ПланыСчетов.Типовой.КраткосрочнаяКредиторскаяЗадолженностьФилиаламИСтруктурнымПодразделениям;
			
		ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийРКО.РасчетыПоДоходуОтРазовыхВыплатСКонтрагентами Тогда
			
			СтрокаПлатежа.СчетУчетаРасчетовСКонтрагентомБУ = ПланыСчетов.Типовой.ПрочаяКраткосрочнаяКредиторскаяЗадолженность;
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаПлатежа.СчетУчетаРасчетовСКонтрагентомНУ) Тогда
			СтрокаПлатежа.СчетУчетаРасчетовСКонтрагентомНУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СтрокаПлатежа.СчетУчетаРасчетовСКонтрагентомБУ));
		КонецЕсли;		
		
	КонецЦикла;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийРКО.РасходДенежныхСредствПрочее Тогда
		
		НазначитьТипДляГруппыНумерованнойАналитикиСчета(Объект, Объект.СчетУчетаРасчетовСКонтрагентомБУ, "СубконтоДтБУ", 1);
		
		Если Объект.УчитыватьКПН Тогда
			
			Объект.СчетУчетаРасчетовСКонтрагентомНУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", Объект.СчетУчетаРасчетовСКонтрагентомБУ));
			НазначитьТипДляГруппыНумерованнойАналитикиСчета(Объект, Объект.СчетУчетаРасчетовСКонтрагентомНУ, "СубконтоДтНУ", 1);
			
			ЧислоАктивныхСубконто = Объект.СчетУчетаРасчетовСКонтрагентомБУ.ВидыСубконто.Количество();
		
			Для Сч = 1 По ЧислоАктивныхСубконто Цикл
				ОбщегоНазначенияБККлиентСервер.ЗаменитьСубконтоНУ(Объект, Объект.СчетУчетаРасчетовСКонтрагентомБУ, Объект.СчетУчетаРасчетовСКонтрагентомНУ, Сч, Объект["СубконтоДтБУ"+Сч], "СубконтоДтНУ");
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетнику Тогда
			
		Объект.СчетУчетаРасчетовСКонтрагентомБУ = ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПодотчетныхЛиц;		
		
	КонецЕсли;
КонецПроцедуры
Процедура ОтложеннаяОбработка_РТиУ(Объект, ПараметрыКонвертации, ОбъектМодифицирован)
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	МетаданныеДокумента = Объект.Метаданные();
	
	Если Не ЗначениеЗаполнено(Объект.СпособВыпискиАктовВыполненныхРабот) Тогда
		Объект.СпособВыпискиАктовВыполненныхРабот = Перечисления.СпособыВыпискиАктовВыполненныхРабот.ВБумажномВиде;
	КонецЕсли;
	
	СчетаУчета = УправлениеВзаиморасчетамиСервер.ПолучитьСчетаРасчетовСКонтрагентом(Объект.Организация, Объект.Контрагент, Объект.ДоговорКонтрагента);
			
	Объект.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетовПокупателя;
	Объект.СчетУчетаРасчетовПоАвансам     = СчетаУчета.СчетАвансовПокупателя;
	
	Документы.РеализацияТоваровУслуг.ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, "Товары");
	Для Каждого СтрокаТовары Из Объект.Товары Цикл
		
		НазначитьТипДляГруппыНумерованнойАналитикиСчета(СтрокаТовары, СтрокаТовары.СчетДоходовБУ, "СубконтоДоходовБУ", 1);
		НазначитьТипДляГруппыНумерованнойАналитикиСчета(СтрокаТовары, СтрокаТовары.СчетСписанияСебестоимостиБУ, "СубконтоСписанияСебестоимостиБУ", 1);
		
		Для НомерСубконто = 1 По СтрокаТовары.СчетДоходовБУ.ВидыСубконто.Количество() Цикл
			Если НЕ ЗначениеЗаполнено(СтрокаТовары["СубконтоДоходовБУ"+НомерСубконто]) ТОгда
				Если СтрокаТовары.СчетДоходовБУ.ВидыСубконто[НомерСубконто-1].ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоТиповые.Номенклатура ТОгда
					СтрокаТовары["СубконтоДоходовБУ"+НомерСубконто] = СтрокаТовары.Номенклатура;
				ИначеЕсли СтрокаТовары.СчетДоходовБУ.ВидыСубконто[НомерСубконто-1].ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоТиповые.НоменклатурныеГруппы Тогда
					СтрокаТовары["СубконтоДоходовБУ"+НомерСубконто] = Строкатовары.Номенклатура.НоменклатурнаяГруппа;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Для НомерСубконто = 1 По СтрокаТовары.СчетСписанияСебестоимостиБУ.ВидыСубконто.Количество() Цикл
			Если НЕ ЗначениеЗаполнено(СтрокаТовары["СубконтоСписанияСебестоимостиБУ"+НомерСубконто]) ТОгда
				Если СтрокаТовары.СчетСписанияСебестоимостиБУ.ВидыСубконто[НомерСубконто-1].ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоТиповые.Номенклатура ТОгда
					СтрокаТовары["СубконтоСписанияСебестоимостиБУ"+НомерСубконто] = СтрокаТовары.Номенклатура;
				ИначеЕсли СтрокаТовары.СчетСписанияСебестоимостиБУ.ВидыСубконто[НомерСубконто-1].ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоТиповые.НоменклатурныеГруппы Тогда
					СтрокаТовары["СубконтоСписанияСебестоимостиБУ"+НомерСубконто] = СтрокаТовары.Номенклатура.НоменклатурнаяГруппа;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если Объект.УчитыватьНДС Тогда
			Если НЕ ЗначениеЗаполнено(СтрокаТовары.НДСВидОперацииРеализации) Тогда
				ОбработкаТабличныхЧастей.ЗаполнитьНДСВидРеализацииТабЧасти(СтрокаТовары, "Товары", МетаданныеДокумента, ТекущийПользователь);
			КонецЕсли;
		КонецЕсли;
		
		Если Объект.УчитыватьКПН Тогда
					
			Если Не ЗначениеЗаполнено(СтрокаТовары.АкцизВидОперацииРеализации) Тогда
				ОбработкаТабличныхЧастей.ЗаполнитьАкцизВидРеализацииТабЧасти(СтрокаТовары, "Товары", МетаданныеДокумента, ТекущийПользователь);
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(СтрокаТовары.СчетДоходовНУ) Тогда
				СтрокаТовары.СчетДоходовНУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СтрокаТовары.СчетДоходовБУ));
			КонецЕсли;
			
			НазначитьТипДляГруппыНумерованнойАналитикиСчета(СтрокаТовары, СтрокаТовары.СчетДоходовНУ, "СубконтоДоходовНУ", 1);
			
			Если НЕ ЗначениеЗаполнено(СтрокаТовары.СчетСписанияСебестоимостиНУ) Тогда
				СтрокаТовары.СчетСписанияСебестоимостиНУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СтрокаТовары.СчетСписанияСебестоимостиБУ));
			КонецЕсли;
			
			НазначитьТипДляГруппыНумерованнойАналитикиСчета(СтрокаТовары, СтрокаТовары.СчетСписанияСебестоимостиНУ, "СубконтоСписанияСебестоимостиНУ", 1);
			
			Для НомерСубконто = 1 По СтрокаТовары.СчетДоходовНУ.ВидыСубконто.Количество() Цикл
				Если НЕ ЗначениеЗаполнено(СтрокаТовары["СубконтоДоходовНУ"+НомерСубконто]) ТОгда
					Если СтрокаТовары.СчетДоходовНУ.ВидыСубконто[НомерСубконто-1].ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоТиповые.Номенклатура ТОгда
						СтрокаТовары["СубконтоДоходовНУ"+НомерСубконто] = СтрокаТовары.Номенклатура;
					ИначеЕсли СтрокаТовары.СчетДоходовНУ.ВидыСубконто[НомерСубконто-1].ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоТиповые.НоменклатурныеГруппы Тогда
						СтрокаТовары["СубконтоДоходовНУ"+НомерСубконто] = Строкатовары.Номенклатура.НоменклатурнаяГруппа;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			Для НомерСубконто = 1 По СтрокаТовары.СчетСписанияСебестоимостиНУ.ВидыСубконто.Количество() Цикл
				Если НЕ ЗначениеЗаполнено(СтрокаТовары["СубконтоСписанияСебестоимостиНУ"+НомерСубконто]) ТОгда
					Если СтрокаТовары.СчетСписанияСебестоимостиНУ.ВидыСубконто[НомерСубконто-1].ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоТиповые.Номенклатура ТОгда
						СтрокаТовары["СубконтоСписанияСебестоимостиНУ"+НомерСубконто] = СтрокаТовары.Номенклатура;
					ИначеЕсли СтрокаТовары.СчетСписанияСебестоимостиНУ.ВидыСубконто[НомерСубконто-1].ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоТиповые.НоменклатурныеГруппы Тогда
						СтрокаТовары["СубконтоСписанияСебестоимостиНУ"+НомерСубконто] = СтрокаТовары.Номенклатура.НоменклатурнаяГруппа;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Документы.РеализацияТоваровУслуг.ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, "Услуги");
	Для Каждого СтрокаТовары Из Объект.Услуги Цикл
		
		НазначитьТипДляГруппыНумерованнойАналитикиСчета(СтрокаТовары, СтрокаТовары.СчетДоходовБУ, "СубконтоДоходовБУ", 1);
		
		Для НомерСубконто = 1 По СтрокаТовары.СчетДоходовБУ.ВидыСубконто.Количество() Цикл
			Если НЕ ЗначениеЗаполнено(СтрокаТовары["СубконтоДоходовБУ"+НомерСубконто]) ТОгда
				Если СтрокаТовары.СчетДоходовБУ.ВидыСубконто[НомерСубконто-1].ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоТиповые.Номенклатура ТОгда
					СтрокаТовары["СубконтоДоходовБУ"+НомерСубконто] = СтрокаТовары.Номенклатура;
				ИначеЕсли СтрокаТовары.СчетДоходовБУ.ВидыСубконто[НомерСубконто-1].ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоТиповые.НоменклатурныеГруппы Тогда
					СтрокаТовары["СубконтоДоходовБУ"+НомерСубконто] = Строкатовары.Номенклатура.НоменклатурнаяГруппа;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если Объект.УчитыватьНДС Тогда
			Если НЕ ЗначениеЗаполнено(СтрокаТовары.НДСВидОперацииРеализации) Тогда
				ОбработкаТабличныхЧастей.ЗаполнитьНДСВидРеализацииТабЧасти(СтрокаТовары, "Услуги", МетаданныеДокумента, ТекущийПользователь);
			КонецЕсли;
		КонецЕсли;
		
		Если Объект.УчитыватьКПН ТОгда
				
			Если НЕ ЗначениеЗаполнено(СтрокаТовары.СчетДоходовНУ) Тогда
				СтрокаТовары.СчетДоходовНУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СтрокаТовары.СчетДоходовБУ));
			КонецЕсли;
			
			НазначитьТипДляГруппыНумерованнойАналитикиСчета(СтрокаТовары, СтрокаТовары.СчетДоходовНУ, "СубконтоДоходовНУ", 1);
			
			Для НомерСубконто = 1 По СтрокаТовары.СчетДоходовНУ.ВидыСубконто.Количество() Цикл
				Если НЕ ЗначениеЗаполнено(СтрокаТовары["СубконтоДоходовНУ"+НомерСубконто]) ТОгда
					Если СтрокаТовары.СчетДоходовНУ.ВидыСубконто[НомерСубконто-1].ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоТиповые.Номенклатура ТОгда
						СтрокаТовары["СубконтоДоходовНУ"+НомерСубконто] = СтрокаТовары.Номенклатура;
					ИначеЕсли СтрокаТовары.СчетДоходовНУ.ВидыСубконто[НомерСубконто-1].ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоТиповые.НоменклатурныеГруппы Тогда
						СтрокаТовары["СубконтоДоходовНУ"+НомерСубконто] = Строкатовары.Номенклатура.НоменклатурнаяГруппа;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры
Процедура ОтложеннаяОбработка_СБДС(Объект, ПараметрыКонвертации, ОбъектМодифицирован)
	Объект.Оплачено = Истина;
	
	Для Каждого СтрокаПлатеж ИЗ Объект.РасшифровкаПлатежа Цикл
		
		СчетаУчета = УправлениеВзаиморасчетамиСервер.ПолучитьСчетаРасчетовСКонтрагентом(Объект.Организация, Объект.Контрагент, СтрокаПлатеж.ДоговорКонтрагента);
		
		Если Объект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.РасчетыПоКредитамИЗаймамСКонтрагентами ТОгда
			
			СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентомБУ    = ПланыСчетов.Типовой.КраткосрочныеБанковскиеЗаймы;
			
		ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ВозвратДенежныхСредствПокупателю Тогда
				
			СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентомБУ    = СчетаУчета.СчетРасчетовПокупателя;
			СтрокаПлатеж.СчетУчетаРасчетовПоАвансам        = СчетаУчета.СчетВозвратовПокупателя;
				
		ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПрочиеРасчетыСКонтрагентами ТОгда
				
			СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентомБУ    = ПланыСчетов.Типовой.ПрочаяКраткосрочнаяКредиторскаяЗадолженность;
			
		ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ОплатаПоставщику Тогда
			
			СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентомБУ    = СчетаУчета.СчетРасчетов;
			СтрокаПлатеж.СчетУчетаРасчетовПоАвансам        = СчетаУчета.СчетАвансов;
			
		ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ОплатаСтруктурномуПодразделению Тогда
			
			СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентомБУ    = ПланыСчетов.Типовой.КраткосрочнаяКредиторскаяЗадолженностьФилиаламИСтруктурнымПодразделениям;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПрочееСписаниеБезналичныхДенежныхСредств Тогда
		
		НазначитьТипДляГруппыНумерованнойАналитикиСчета(Объект, Объект.СчетУчетаРасчетовСКонтрагентомБУ, "СубконтоДтБУ", 1);
		
		Если Объект.УчитыватьКПН Тогда
			Объект.СчетУчетаРасчетовСКонтрагентомНУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", Объект.СчетУчетаРасчетовСКонтрагентомБУ));
			НазначитьТипДляГруппыНумерованнойАналитикиСчета(Объект, Объект.СчетУчетаРасчетовСКонтрагентомНУ, "СубконтоДтНУ", 1);
			
			ЧислоАктивныхСубконто = Объект.СчетУчетаРасчетовСКонтрагентомБУ.ВидыСубконто.Количество();
		
			Для Сч = 1 По ЧислоАктивныхСубконто Цикл
				ОбщегоНазначенияБККлиентСервер.ЗаменитьСубконтоНУ(Объект, Объект.СчетУчетаРасчетовСКонтрагентомБУ, Объект.СчетУчетаРасчетовСКонтрагентомНУ, Сч, Объект["СубконтоДтБУ"+Сч], "СубконтоДтНУ");
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
Процедура ОтложеннаяОбработка_СборкаТоваров(Объект, ПараметрыКонвертации, ОбъектМодифицирован)
	Документы.КомплектацияНоменклатуры.ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, "Комплектующие");
	
	СчетаУчета = ПроцедурыБухгалтерскогоУчета.ПолучитьСчетаУчетаНоменклатуры(Объект.Организация, Объект.Номенклатура);
	
	Объект.СчетУчетаБУ = СчетаУчета.СчетУчетаБУ;
	
	Если Объект.УчитыватьКПН Тогда
		Объект.СчетУчетаНУ = СчетаУчета.СчетУчетаНУ;
	КонецЕсли;
КонецПроцедуры
Процедура ОтложеннаяОбработка_Склады(Объект)
	//Склады у нас гораздо менее функциональные
	//Если НЕ ЗначениеЗаполнено(Объект.ТипЦенРозничнойТорговли) Тогда
	//	НаименованиеТипаЦен = НСтр("ru='Розничная цена'");
	//	ВидЦены = Справочники.ТипыЦенНоменклатуры.НайтиПоНаименованию(НаименованиеТипаЦен);
	//	
	//	Если Не ЗначениеЗаполнено(ВидЦены) Тогда
	//		ВидОбъект = Справочники.ТипыЦенНоменклатуры.СоздатьЭлемент();
	//		ВидОбъект.Наименование = НаименованиеТипаЦен;
	//		ВидОбъект.Записать();
	//		ВидЦены = ВидОбъект.Ссылка;
	//	КонецЕсли;
	//
	//	Объект.ТипЦенРозничнойТорговли = ВидЦены;
	//КонецЕсли;
КонецПроцедуры
Процедура ОтложеннаяОбработка_СписаниеТоваров(Объект, ПараметрыКонвертации, ОбъектМодифицирован)
	Документы.СписаниеТоваров.ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, "Товары");
	Для Каждого СтрокаТовары Из Объект.Товары Цикл
		
		СчетаИзРС = ложь;
		Субконто1 = СтрокаТовары.СубконтоЗатратБУ1;
		Субконто2 = СтрокаТовары.СубконтоЗатратБУ2;
		
		СчетаУчета = ПроцедурыБухгалтерскогоУчета.ПолучитьСчетаУчетаНоменклатуры(Объект.Организация, СтрокаТовары.Номенклатура);
		
		Если НЕ ЗначениеЗаполнено(СтрокаТовары.СчетЗатратБУ) Тогда
			СчетаИзРС = Истина;
		Иначе
			СчетЗатрат = СтрокаТовары.СчетЗатратБУ;
			Субконто1 = СтрокаТовары.СубконтоЗатратБУ1;
			Субконто2 = СтрокаТовары.СубконтоЗатратБУ2;
			Субконто3 = СтрокаТовары.СубконтоЗатратБУ3;
			СтрокаТовары.СчетЗатратБУ = СчетЗатрат;
			СтрокаТовары.СубконтоЗатратБУ1 = Субконто1;
			СтрокаТовары.СубконтоЗатратБУ2 = Субконто2;
			СтрокаТовары.СубконтоЗатратБУ3 = Субконто3;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаТовары.СчетЗатратБУ) Тогда
			СтрокаТовары.СчетЗатратБУ = ПланыСчетов.Типовой.АдминистративныеРасходы;
			СтрокаТовары.СубконтоЗатратБУ1 = Субконто1;
			СтрокаТовары.СубконтоЗатратБУ2 = Субконто2;
			СчетаИзРС = Ложь;
		КонецЕсли;
		
		Если НЕ СчетаИзРС Тогда
			НазначитьТипДляГруппыНумерованнойАналитикиСчета(СтрокаТовары, СтрокаТовары.СчетЗатратБУ, "СубконтоЗатратБУ", 1);
			
			Если Объект.УчитыватьКПН Тогда
				СтрокаТовары.СчетЗатратНУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СтрокаТовары.СчетЗатратБУ));
				НазначитьТипДляГруппыНумерованнойАналитикиСчета(СтрокаТовары, СтрокаТовары.СчетЗатратНУ, "СубконтоЗатратНУ", 1);
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ СчетаИзРС Тогда
			
			Субконто1 = СтрокаТовары.СубконтоЗатратБУ1;
			Субконто2 = СтрокаТовары.СубконтоЗатратБУ2;
			Субконто3 = СтрокаТовары.СубконтоЗатратБУ3;
			
			ЧислоАктивныхСубконто = СтрокаТовары.СчетЗатратБУ.ВидыСубконто.Количество();
			
			Для Сч = 1 По ЧислоАктивныхСубконто Цикл
				
				Если СтрокаТовары.СчетЗатратБУ.ВидыСубконто[Сч-1].ВидСубконто.ТипЗначения.СодержитТип(ТипЗнч(Субконто1)) И Субконто1<>Неопределено Тогда
					СтрокаТовары["СубконтоЗатратБУ"+Сч] = Субконто1;
				КонецЕсли;
				
				Если СтрокаТовары.СчетЗатратБУ.ВидыСубконто[Сч-1].ВидСубконто.ТипЗначения.СодержитТип(ТипЗнч(Субконто2)) И Субконто2<>Неопределено Тогда
					СтрокаТовары["СубконтоЗатратБУ"+Сч] = Субконто2;
				КонецЕсли;
				
				Если СтрокаТовары.СчетЗатратБУ.ВидыСубконто[Сч-1].ВидСубконто.ТипЗначения.СодержитТип(ТипЗнч(Субконто3)) И Субконто3<>Неопределено Тогда
					СтрокаТовары["СубконтоЗатратБУ"+Сч] = Субконто3;
				КонецЕсли;
				
				ТипСубк = СтрокаТовары.СчетЗатратБУ.ВидыСубконто[Сч - 1].ВидСубконто.ТипЗначения;
				СтрокаТовары["СубконтоЗатратБУ"+Сч] = ТипСубк.ПривестиЗначение(СтрокаТовары["СубконтоЗатратБУ"+Сч]);
				
			КонецЦикла;
			
			Если Объект.УчитыватьКПН Тогда
				
				Для Сч = 1 По ЧислоАктивныхСубконто Цикл
					ОбщегоНазначенияБККлиентСервер.ЗаменитьСубконтоНУ(СтрокаТовары, СтрокаТовары.СчетЗатратБУ, СтрокаТовары.СчетЗатратНУ, Сч, СтрокаТовары["СубконтоЗатратБУ"+Сч], "СубконтоЗатратНУ");
				КонецЦикла;
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
КонецПроцедуры
Процедура ОтложеннаяОбработка_СчетФактураВыданный(Объект, ОбъектМодифицирован, КомпонентыОбмена)
	Если НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) И ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		Объект.ДоговорКонтрагента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДокументОснование, "ДоговорКонтрагента");
	КонецЕсли;
	
	Объект.ПодтвержденДокументамиОтгрузки = Истина;
	
	УчетНДСиАкциза.ОчиститьТабЧасти(Объект);
	Для Каждого СтрокаТабличнойЧасти Из Объект.ДокументыОснования Цикл
		УчетНДСИАкциза.ЗаполнитьТабличныеЧастиИзДокументаОснования(Объект, СтрокаТабличнойЧасти.ДокументОснование);
	КонецЦикла;
КонецПроцедуры
Процедура ОтложеннаяОбработка_СчетФактураПолученный(Объект, ОбъектМодифицирован, КомпонентыОбмена)
	Объект.ПодтвержденДокументамиОтгрузки = Истина;
	
	УчетНДСиАкциза.ОчиститьТабЧасти(Объект);
	Для Каждого СтрокаТабличнойЧасти Из Объект.ДокументыОснования Цикл
		УчетНДСИАкциза.ЗаполнитьТабличныеЧастиИзДокументаОснования(Объект, СтрокаТабличнойЧасти.ДокументОснование);
	КонецЦикла;
КонецПроцедуры
Процедура ОтложеннаяОбработка_ТаможеннаяДекларация(Объект, ПараметрыКонвертации, ОбъектМодифицирован)
	Документы.ГТДИмпорт.ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, "Товары");  
	Документы.ГТДИмпорт.ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, "ОС");
	
	СчетаУчета = УправлениеВзаиморасчетамиСервер.ПолучитьСчетаРасчетовСКонтрагентом(Объект.Организация, Объект.Контрагент, Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
			
	Объект.СчетУчетаРасчетовСКонтрагентом    = СчетаУчета.СчетРасчетов;
	Объект.СчетУчетаРасчетовСКонтрагентомВал = СчетаУчета.СчетРасчетов;
	
	ПараметрыОбъекта = Новый Структура("Организация, СтруктурноеПодразделение, Дата, Ссылка, ТипЦен, УчитыватьНДС, СуммаВключаетНДС, УчитыватьКПН, НДСВключенВСтоимость, 
		|ВалютаДокумента, КурсВзаиморасчетов, КратностьВзаиморасчетов, СчетУчетаНДСПоРеализации");
	ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, Объект);
	
	СчетаУчетаКЗаполнению = Новый Соответствие;
	СчетаУчетаКЗаполнению.Вставить("СчетУчетаНДСПоРеализации", Истина);
	
	ЗаполненныеСчета = СчетаУчетаВДокументах.ЗаполнитьРеквизитыПриИзменении(
		Документы.ГТДИмпорт,
		СчетаУчетаКЗаполнению,
		ПараметрыОбъекта);
	
	ЗаполнитьЗначенияСвойств(Объект, ЗаполненныеСчета);
	
	Для Каждого СтрокаТовары Из Объект.Товары Цикл    	
		
		ЗначениеРеквизитаНоменклатура = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаТовары.Номенклатура, "КодТНВЭД, НаименованиеПолное, Наименование");
		
		СтрокаТовары.КодТНВЭД 			= ЗначениеРеквизитаНоменклатура.КодТНВЭД;
		СтрокаТовары.НаименованиеТовара = ?(ЗначениеЗаполнено(ЗначениеРеквизитаНоменклатура.НаименованиеПолное)
															, ЗначениеРеквизитаНоменклатура.НаименованиеПолное
															, ЗначениеРеквизитаНоменклатура.Наименование);   
																	
		СведенияОНоменклатуре = ОбработкаТабличныхЧастей.ПолучитьСведенияОНоменклатуре(СтрокаТовары.Номенклатура, ПараметрыОбъекта);
		
		Если СведенияОНоменклатуре <> Неопределено Тогда
			СтрокаТовары.ЕдиницаИзмерения = СведенияОНоменклатуре.БазоваяЕдиницаИзмерения;
			СтрокаТовары.Коэффициент	  = СведенияОНоменклатуре.Коэффициент;	
		КонецЕсли;
		
		КЗаполнению = Новый Соответствие;
		Кзаполнению.Вставить("Товары.ВидНДС", 			 Истина);
		Кзаполнению.Вставить("Товары.НДСВидОборота", 	 Истина);
		Кзаполнению.Вставить("Товары.НДСВидПоступления", Истина); 	
	
		ЗаполненныеСчета = СчетаУчетаВДокументах.ЗаполнитьРеквизитыПриИзменении(
			Документы.ГТДИмпорт,
			КЗаполнению,
			ПараметрыОбъекта,
			"Товары",
			СтрокаТовары);
		
		ЗаполнитьЗначенияСвойств(СтрокаТовары, ЗаполненныеСчета);
	
	КонецЦикла;
КонецПроцедуры
Процедура ОтложеннаяОбработка_ТребованиеНакладная(Объект, ПараметрыКонвертации, ОбъектМодифицирован)
	Если Объект.УчитыватьКПН Тогда
		Объект.СчетЗатратНУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", Объект.СчетЗатратБУ), , , Объект.Дата);
	КонецЕсли;
	
	Для каждого СтрокаТабличнойЧасти Из Объект.Материалы Цикл
		Документы.ТребованиеНакладная.ЗаполнитьСчетаУчетаВСтрокеТабЧасти(Объект.Организация, СтрокаТабличнойЧасти, Объект.УчитыватьКПН);
	КонецЦикла;
КонецПроцедуры
Процедура ОтложеннаяОбработка_ЭСФ(Объект, ПараметрыКонвертации, ОбъектМодифицирован)
	Если Объект.Направление = Перечисления.НаправленияЭСФ.Входящий Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВиртуальныеСклады.Ссылка
		|ИЗ
		|	Справочник.ВиртуальныеСклады КАК ВиртуальныеСклады
		|ГДЕ
		|	ВиртуальныеСклады.Организация = &Организация
		|	И ВиртуальныеСклады.ПризнакОприходования = ИСТИНА";
		
		Запрос.УстановитьПараметр("Организация", Объект.Организация);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если Не РезультатЗапроса.Пустой() Тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			ВыборкаДетальныеЗаписи.Следующий();
			Объект.Склад = ВыборкаДетальныеЗаписи.Ссылка;
		КонецЕсли;
		
	Иначе
		
		Если Не Объект.СчетФактура.ДокументыОснования.Количество() = 0 Тогда
			
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект.СчетФактура.ДокументыОснования[0].ДокументОснование, "Склад") Тогда
				
				СкладОснования = Объект.СчетФактура.ДокументыОснования[0].ДокументОснование.Склад;
				
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ
				|СоответствиеСкладовИВиртуальныхСкладов.ВиртуальныйСклад КАК ВиртуальныйСклад
				|ИЗ
				|РегистрСведений.СоответствиеСкладовИВиртуальныхСкладов КАК СоответствиеСкладовИВиртуальныхСкладов
				|ГДЕ
				|СоответствиеСкладовИВиртуальныхСкладов.Склад = &Склад
				|И СоответствиеСкладовИВиртуальныхСкладов.Организация = &Организация";
				
				Запрос.УстановитьПараметр("Организация", Объект.Организация);
				Запрос.УстановитьПараметр("Склад", СкладОснования);
				
				Результат = Запрос.Выполнить();
				
				Если Не Результат.Пустой() Тогда
					ВыборкаДетальныеЗаписи = Результат.Выбрать();
					ВыборкаДетальныеЗаписи.Следующий();
					Объект.Склад = ВыборкаДетальныеЗаписи.ВиртуальныйСклад;
				КонецЕсли;		
				
			КонецЕсли
			
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры
Процедура ПБДС_СБДС_ПолучениеДатаПроведен(ПолученныеДанные, ДанныеXDTO)
	Если ДанныеXDTO.Свойство("ДатаВыписки")
		И ЗначениеЗаполнено(ДанныеXDTO.ДатаВыписки) Тогда
		ПолученныеДанные.Проведен = Истина;
		ПолученныеДанные.Дата     = ДанныеXDTO.ДатаВыписки;
	Иначе
		ПолученныеДанные.Проведен = Ложь;
		ПолученныеДанные.Дата     = ДанныеXDTO.КлючевыеСвойства.Дата;
	КонецЕсли;
КонецПроцедуры
Процедура ПБДС_СБДС_ПолучениеСчетБанк(ПолученныеДанные)
	ПолученныеДанные.СчетБанк = ПланыСчетов.Типовой.ДенежныеСредстваНаТекущихБанковскихСчетах;
КонецПроцедуры
Процедура ПередатьОбщиеРеквизитыПлатежаИзПлатежногоПоручения(ДанныеИБ, ДанныеXDTO, ПолучатьДанныеПлатежаВБюджет = Ложь)
	//Заполняем реквизиты платежа пустыми значениями
	ДанныеXDTO.Вставить("ВидПлатежа");
	ДанныеXDTO.Вставить("Очередность");
	ДанныеXDTO.Вставить("Код");
	Если ПолучатьДанныеПлатежаВБюджет Тогда
		ДанныеXDTO.Вставить("СтатусСоставителя");
		ДанныеXDTO.Вставить("ПоказательКБК");
		ДанныеXDTO.Вставить("ОКАТО");
		ДанныеXDTO.Вставить("ПоказательОснования");
		ДанныеXDTO.Вставить("ПоказательПериода");
		ДанныеXDTO.Вставить("ПоказательНомера");
		ДанныеXDTO.Вставить("ПоказательДаты");
		ДанныеXDTO.Вставить("ПоказательТипа");
	КонецЕсли;
	//Банковский счет получателя берем из реквизита документа
	ДанныеXDTO.Вставить("БанковскийСчет", ДанныеИБ.СчетКонтрагента);
	
	
	Запрос = Новый Запрос;
	
	ДополнениеЗапросаПлатежВБюджет = "";
	Если ПолучатьДанныеПлатежаВБюджет Тогда
		ДополнениеЗапросаПлатежВБюджет = ", ПлатежныеПоручения.Ссылка.КодБК КАК ПоказательКБК";
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Док.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ПлатежныеПоручения
	|ИЗ
	|	Документ.ПлатежноеПоручениеИсходящее КАК Док
	|ГДЕ
	|	Док.Ссылка = &Ссылка
	|	И Док.Проведен = ИСТИНА
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Док.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ПлатежныйОрдерСписаниеДенежныхСредств КАК Док
	|ГДЕ
	|	Док.Ссылка = &Ссылка
	|	И Док.Проведен = ИСТИНА
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПлатежныеПоручения.Ссылка.ВидПлатежа КАК ВидПлатежа,
	|	1 КАК Очередность,
	|	ПлатежныеПоручения.Ссылка.СчетКонтрагента КАК СчетКонтрагента,
	|	"""" КАК Код
	|" + ДополнениеЗапросаПлатежВБюджет + "
	|ИЗ
	|	ПлатежныеПоручения КАК ПлатежныеПоручения";
	
	 
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	РеквизитыПлатежа = Запрос.Выполнить().Выбрать();
	Если РеквизитыПлатежа.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ДанныеXDTO, РеквизитыПлатежа);
		//Если счет указан в платежке но не указан в документе - подставим счет получателя из платежки
		Если ЗначениеЗаполнено(РеквизитыПлатежа.СчетКонтрагента) 
			И НЕ ЗначениеЗаполнено(ДанныеXDTO.БанковскийСчет) Тогда
			ДанныеXDTO.Вставить("БанковскийСчет", РеквизитыПлатежа.СчетКонтрагента);
		КонецЕсли;
		Если ПолучатьДанныеПлатежаВБюджет И СтрДлина(ДанныеXDTO.ПоказательКБК) < 20 Тогда
			ДанныеXDTO.ПоказательКБК = Прав("00000000000000000000" + ДанныеXDTO.ПоказательКБК, 20);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_РКО_ПолучениеСчетКасса(ПолученныеДанные)
	ПолученныеДанные.СчетКасса = ПланыСчетов.Типовой.ДенежныеСредстваВКассе;
КонецПроцедуры
Процедура ПодготовитьДанныеКонтактнаяИнформация(ДанныеИБ, ДанныеXDTO)
	//Если ДанныеИБ.КонтактнаяИнформация.Количество() = 0 Тогда
	//	Возврат;
	//КонецЕсли;
	//ТабКонтактнаяИнформация = Новый ТаблицаЗначений;
	//ТабКонтактнаяИнформация.Колонки.Добавить("ЗначенияПолей");
	//ТабКонтактнаяИнформация.Колонки.Добавить("ВидКонтактнойИнформации");
	//ТабКонтактнаяИнформация.Колонки.Добавить("НаименованиеКонтактнойИнформации");
	//Для Каждого СтрокаКИ ИЗ ДанныеИБ.КонтактнаяИнформация цикл
	//	Если НЕ ЗначениеЗаполнено(СтрокаКИ.Вид)
	//		ИЛИ СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.АдресЗаПределамиРФФизическиеЛица
	//		ИЛИ НЕ ЗначениеЗаполнено(СтрокаКИ.ЗначенияПолей) Тогда
	//		Продолжить;
	//	КонецЕсли;
	//	
	//	СвойстваВидаКИ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаКИ.Вид, "Наименование,Предопределенный");
	//	
	//	СтрокаТЗКИ = ТабКонтактнаяИнформация.Добавить();
	//	СтрокаТЗКИ.ЗначенияПолей = СокрЛП(СтрокаКИ.ЗначенияПолей);
	//	Если СвойстваВидаКИ.Предопределенный И СтрокаКИ.Вид <> Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияОрганизации
	//		И СтрокаКИ.Вид <> Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияКонтрагенты Тогда
	//		СтрокаТЗКИ.ВидКонтактнойИнформации = СтрокаКИ.Вид;
	//	Иначе
	//		СтрокаТЗКИ.ВидКонтактнойИнформации = "ПользовательскаяКИ"+СокрЛП(СтрокаКИ.Тип);
	//		СтрокаТЗКИ.НаименованиеКонтактнойИнформации = СвойстваВидаКИ.Наименование; 
	//	КонецЕсли;
	//КонецЦикла;
	//ДанныеXDTO.Вставить("КонтактнаяИнформация", ТабКонтактнаяИнформация);
КонецПроцедуры
Функция ПодобратьПлатежнуюВедомость(СтруктураДопСвойства, ТипДокумента)
	ДатаВедомости = СтруктураДопСвойства.ДатаВедомостиНаВыплатуЗарплаты;
	НомерВедомости = СтруктураДопСвойства.НомерВедомостиНаВыплатуЗарплаты;
	ПустаяВедомость = Документы[ТипДокумента].ПустаяСсылка();
	Если НЕ ЗначениеЗаполнено(ДатаВедомости) ИЛИ НЕ ЗначениеЗАполнено(НомерВедомости) Тогда
		Возврат ПустаяВедомость;
	КонецЕсли;
		
	Запрос = Новый Запрос ("
		|ВЫБРАТЬ
		|	ПлатежнаяВедомость.Ссылка КАК Ссылка,
		|	ПлатежнаяВедомость.Дата,
		|	ПлатежнаяВедомость.Номер
		|ИЗ
		|	Документ.[ТипДокумента] КАК ПлатежнаяВедомость
		|ГДЕ
		|	ПлатежнаяВедомость.Дата >= &ДатаН
		|	И ПлатежнаяВедомость.Дата <= &ДатаК
		|	И ПлатежнаяВедомость.Номер = &Номер");
	
	Запрос.УстановитьПараметр("ДатаН",НачалоДня(ДатаВедомости));
	Запрос.УстановитьПараметр("ДатаК",КонецДня(ДатаВедомости));
	Запрос.УстановитьПараметр("Номер",НомерВедомости);
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"[ТипДокумента]",ТипДокумента);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат ПустаяВедомость;
	КонецЕсли;
КонецФункции
Функция ПолучитьЕдиницуИзмеренияПоУмолчанию()
	ЕдиницаПоУмолчанию = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("796");	
	Если ЕдиницаПоУмолчанию = Справочники.КлассификаторЕдиницИзмерения.ПустаяСсылка() Тогда
		ЕдиницаПоУмолчанию = Справочники.КлассификаторЕдиницИзмерения.НайтиПоНаименованию("шт", Истина);
	КонецЕсли;
	
	Возврат ЕдиницаПоУмолчанию;
КонецФункции
Процедура ПолучитьКонтактнуюИнформациюФизическогоЛица(ДанныеXDTO, ПолученныеДанные)
	//Если ДанныеXDTO.Свойство("КонтактнаяИнформация")
	//	И ЗначениеЗаполнено(ДанныеXDTO.КонтактнаяИнформация) Тогда
	//	
	//	Для Каждого СтрокаXDTO Из ДанныеXDTO.КонтактнаяИнформация Цикл
	//		ВидКИСтрокой = СтрокаXDTO.ВидКонтактнойИнформации.Значение;
	//		ТекВидКИ = Неопределено;
	//		Если Лев(СокрЛП(ВидКИСтрокой),18) = "ПользовательскаяКИ" Тогда
	//			ТекВидКИ = Справочники.ВидыКонтактнойИнформации.НайтиПоНаименованию(СтрокаXDTO.НаименованиеКонтактнойИнформации,,Справочники.ВидыКонтактнойИнформации.СправочникФизическиеЛица);
	//			Если НЕ ЗначениеЗаполнено(ТекВидКИ) Тогда
	//				ВидКИОбъект = Справочники.ВидыКонтактнойИнформации.СоздатьЭлемент();
	//				ВидКИОбъект.Родитель = Справочники.ВидыКонтактнойИнформации.СправочникФизическиеЛица;
	//				ВидКИОбъект.Наименование = СтрокаXDTO.НаименованиеКонтактнойИнформации;
	//				ИмяТипаКИ = СтрЗаменить(СокрЛП(ВидКИСтрокой),"ПользовательскаяКИ","");
	//				ВидКИОбъект.Тип = Перечисления.ТипыКонтактнойИнформации[ИмяТипаКИ];
	//				ВидКИОбъект.Записать();
	//				ТекВидКИ = ВидКИОбъект.Ссылка;
	//			КонецЕсли;
	//		ИначеЕсли ВидКИСтрокой = "АдресЭлектроннойПочты" Тогда
	//			ТекВидКИ = Справочники.ВидыКонтактнойИнформации.НайтиПоНаименованию("Email",,Справочники.ВидыКонтактнойИнформации.СправочникФизическиеЛица);
	//		ИначеЕсли ВидКИСтрокой = "Телефон" Тогда
	//			ТекВидКИ = Справочники.ВидыКонтактнойИнформации.НайтиПоНаименованию("Мобильный телефон",,Справочники.ВидыКонтактнойИнформации.СправочникФизическиеЛица);
	//		ИначеЕсли ВидКИСтрокой = "ПочтовыйАдрес" Тогда
	//			ТекВидКИ = Справочники.ВидыКонтактнойИнформации.АдресДляИнформированияФизическиеЛица;
	//		ИначеЕсли ВидКИСтрокой = "ФактическийАдрес" Тогда
	//			ТекВидКИ = Справочники.ВидыКонтактнойИнформации.АдресМестаПроживанияФизическиеЛица;		
	//		ИначеЕсли ВидКИСтрокой = "ЮридическийАдрес" Тогда
	//			ТекВидКИ = Справочники.ВидыКонтактнойИнформации.АдресПоПропискеФизическиеЛица;		
	//		ИначеЕсли ВидКИСтрокой = "ТелефонДомашний" Тогда
	//			ТекВидКИ = Справочники.ВидыКонтактнойИнформации.ТелефонДомашнийФизическиеЛица;		
	//		ИначеЕсли ВидКИСтрокой = "ТелефонРабочий" Тогда
	//			ТекВидКИ = Справочники.ВидыКонтактнойИнформации.ТелефонРабочийФизическиеЛица;		
	//		Иначе
	//			Продолжить;
	//		КонецЕсли;
	//		Если НЕ ЗначениеЗаполнено(ТекВидКИ) Тогда
	//			Продолжить;
	//		КонецЕсли;
	//
	//		ТекТипКИ = ТекВидКИ.Тип;	
	//		СтрокаКИ = ПолученныеДанные.КонтактнаяИнформация.Добавить();
	//		ЗначенияПолейСтрокой = СокрЛП(СтрокаXDTO.ЗначенияПолей);
	//		СтрокаКИ.ЗначенияПолей = ЗначенияПолейСтрокой;
	//		СтрокаКИ.Вид = ТекВидКИ;
	//		СтрокаКИ.Тип = ТекТипКИ;
	//		
	//		ЗаполнитьСтрокуКонтактнойИнформацией(СтрокаКИ);
	//	
	//	КонецЦикла;
	//	
	//КонецЕсли;
КонецПроцедуры
Процедура ПрочиеДоходыРасходы_ПолучитьКод(ДанныеXDTO, ПолученныеДанные, Префикс)
	КодВПрограмме = "";
	Если ДанныеXDTO.КлючевыеСвойства.Свойство("КодВПрограмме") Тогда
		КодВПрограмме = ДанныеXDTO.КлючевыеСвойства.КодВПрограмме;
	ИначеЕсли ДанныеXDTO.Свойство("КодВПрограмме") Тогда
		КодВПрограмме = ДанныеXDTO.КодВПрограмме;
	КонецЕсли; 
	
	Если КодВПрограмме <> "" Тогда
		ПолученныеДанные.Код = Лев(КодВПрограмме, 3) + Префикс + Сред(КодВПрограмме, 5);
	КонецЕсли;
КонецПроцедуры
Процедура ПТиУРасх_ВТП_ПередЗаписью(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена, ПараметрыКонвертации, КонвертацияСвойств)
	// Склад
	ПолученныеДанные.Склад = СкладДляЗагрузки(ПолученныеДанные.Склад, КомпонентыОбмена.ПараметрыКонвертации);
	
	#Область Мержевание
	Если Не ДанныеИБ <> Неопределено Тогда
	
		ОрганизацияЯвляетсяПлательщикомКПН =  ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(ПолученныеДанные.Организация, ПолученныеДанные.Дата);
		
		Если Не ОрганизацияЯвляетсяПлательщикомКПН Тогда
			ПолученныеДанные.УчитыватьКПН = Ложь;
		Иначе
			ПолученныеДанные.УчитыватьКПН = Истина;
		КонецЕсли;	
			Если НЕ ПолученныеДанные.УчитыватьКПН Тогда
			ПолученныеДанные.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НеОтражаетсяВНУ;
		Иначе
			ПолученныеДанные.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ;
		КонецЕсли;
	
		ПолученныеДанные.УчитыватьНДС = ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНДС(ПолученныеДанные.Организация, ПолученныеДанные.Дата);
	
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПолученныеДанные.Склад) И ЗначениеЗаполнено(ДанныеИБ.Склад) Тогда
		ПолученныеДанные.Склад = ДанныеИБ.Склад;
	КонецЕсли;
	
	ОбнулениеСчетовУчетаРасчетовВДанныхИБ(ПолученныеДанные, ДанныеИБ);
	
	// Переносим те свойства, которые указаны в ПКС
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
	
	// Переносим свойства, не указанные в ПКС
	ЗаполнитьЗначенияСвойств(ДанныеИБ, ПолученныеДанные,
		"Дата,ДоговорКонтрагента,ВалютаДокумента,Комментарий,
		|КратностьВзаиморасчетов,КурсВзаиморасчетов,
		|Организация,Ответственный,Склад,
		|СуммаВключаетНДС,
		|НДСВключенВСтоимость,Номер,СуммаДокумента");
	
	// Восстанавливаем "затертые" данные
	//Товары
	МассивКлючевыхПолей = Новый Массив;
	МассивКлючевыхПолей.Добавить("Номенклатура");
	МассивКлючевыхПолей.Добавить("ЕдиницаИзмерения");
	МассивКлючевыхПолей.Добавить("Количество");
	МассивКлючевыхПолей.Добавить("Сумма");
	МассивКлючевыхПолей.Добавить("Цена");
	МассивКлючевыхПолей.Добавить("СтавкаНДС");
	МассивКлючевыхПолей.Добавить("СуммаНДС");
	
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.Товары,
		ДанныеИБ.Товары,
		МассивКлючевыхПолей,
		"СчетУчетаБУ,СчетУчетаНДС");
	
	ДанныеИБ.Товары.Загрузить(ПолученныеДанные.Товары.Выгрузить());
	
	ПолученныеДанные = Неопределено;
	
	#КонецОбласти
КонецПроцедуры
Процедура РаспределитьДопРасходы_Получение(Объект)
	// расчет затрат по каждой позиции номенклатуры
	ТаблицаПоТоварам = Объект.Товары.Выгрузить();
	// Обнуление ранее рассчитанных сумм
	Для Каждого СтрокаТабличнойЧасти из Объект.Товары Цикл
		СтрокаТабличнойЧасти.СуммаРаспределения = 0;
		СтрокаТабличнойЧасти.СуммаРаспределенияНДС = 0;
	КонецЦикла;	
	
	ТаблицаПоОС 	 = Объект.ОС.Выгрузить();
	ТаблицаПоОС.Колонки.Добавить("Количество");
	ТаблицаПоОС.ЗаполнитьЗначения(1, "Количество");	
	// Обнуление ранее рассчитанных сумм
	Для Каждого СтрокаТабличнойЧасти из Объект.ОС Цикл
		СтрокаТабличнойЧасти.СуммаРаспределения = 0;
		СтрокаТабличнойЧасти.СуммаРаспределенияНДС = 0;
	КонецЦикла;	
	
	ТаблицаПоНМА 	 = Объект.НМА.Выгрузить();
	ТаблицаПоНМА.Колонки.Добавить("Количество");
	ТаблицаПоНМА.ЗаполнитьЗначения(1, "Количество");	
	// Обнуление ранее рассчитанных сумм
	Для Каждого СтрокаТабличнойЧасти из Объект.НМА Цикл
		СтрокаТабличнойЧасти.СуммаРаспределения = 0;
		СтрокаТабличнойЧасти.СуммаРаспределенияНДС = 0;
	КонецЦикла;	
	
	Если НЕ Объект.Сумма = 0 тогда
		
		СуммаКРаспределению = Объект.Сумма;
		НДСКРаспределению   = Объект.СуммаНДС;
		КолонкаБазиса       = ?(Объект.СпособРаспределения = Перечисления.СпособыРаспределенияДопРасходов.ПоКоличеству, "Количество",
							  ?(Объект.СпособРаспределения = Перечисления.СпособыРаспределенияДопРасходов.ПоСумме,      "СуммаТовара",""));
		
		Если НЕ ЗначениеЗаполнено(КолонкаБазиса) тогда
			//Не выбран способ распределения
			Возврат;
			
		ИначеЕсли (ТаблицаПоТоварам.Итог(КолонкаБазиса) + ТаблицаПоОС.Итог(КолонкаБазиса) + ТаблицаПоНМА.Итог(КолонкаБазиса)) = 0 тогда 
			//Базис распределения - пустая колонка!
			Возврат;
			
		КонецЕсли;
		
		БазисРаспределения = ТаблицаПоТоварам.ВыгрузитьКолонку(КолонкаБазиса);
		
		Для Каждого Строка ИЗ ТаблицаПоОС Цикл
			БазисРаспределения.Добавить(Строка[КолонкаБазиса]);
		КонецЦикла;
		
		Для Каждого Строка ИЗ ТаблицаПоНМА Цикл
			БазисРаспределения.Добавить(Строка[КолонкаБазиса]);
		КонецЦикла;
		
		ИтогРаспределения  = ОбщегоНазначенияБККлиентСервер.РаспределитьПропорционально(СуммаКРаспределению,БазисРаспределения);
		
		Если НЕ (НДСКРаспределению = 0) тогда
			ИтогРаспределенияНДС = ОбщегоНазначенияБККлиентСервер.РаспределитьПропорционально(НДСКРаспределению,БазисРаспределения);
		КонецЕсли;
		
		Для НомерСтрокиТаблицы = 0 По ИтогРаспределения.ВГраница() цикл
			
			Если не ИтогРаспределения[НомерСтрокиТаблицы] = 0 тогда
				Если НомерСтрокиТаблицы >= ТаблицаПоТоварам.Количество() Тогда
					Если НомерСтрокиТаблицы >= (ТаблицаПоТоварам.Количество() + ТаблицаПоОС.Количество()) Тогда
						Объект.НМА[НомерСтрокиТаблицы-(ТаблицаПоТоварам.Количество() + ТаблицаПоОС.Количество())].СуммаРаспределения = ИтогРаспределения[НомерСтрокиТаблицы];
					Иначе	
						Объект.ОС[НомерСтрокиТаблицы-ТаблицаПоТоварам.Количество()].СуммаРаспределения = ИтогРаспределения[НомерСтрокиТаблицы];
					КонецЕсли;	
				Иначе
					Объект.Товары[НомерСтрокиТаблицы].СуммаРаспределения  = ИтогРаспределения[НомерСтрокиТаблицы];
				КонецЕсли;
			КонецЕсли;
			
			Если Не(НДСКРаспределению = 0) тогда
				
				Если НЕ ИтогРаспределенияНДС[НомерСтрокиТаблицы] = 0 тогда
					Если НомерСтрокиТаблицы >= ТаблицаПоТоварам.Количество() Тогда
						Если НомерСтрокиТаблицы >= (ТаблицаПоТоварам.Количество() + ТаблицаПоОС.Количество()) Тогда
							Объект.НМА[НомерСтрокиТаблицы-(ТаблицаПоТоварам.Количество() + ТаблицаПоОС.Количество())].СуммаРаспределенияНДС  = ИтогРаспределенияНДС[НомерСтрокиТаблицы];
						Иначе	
							Объект.ОС[НомерСтрокиТаблицы-ТаблицаПоТоварам.Количество()].СуммаРаспределенияНДС  = ИтогРаспределенияНДС[НомерСтрокиТаблицы];
						КонецЕсли;	
					Иначе
						Объект.Товары[НомерСтрокиТаблицы].СуммаРаспределенияНДС  = ИтогРаспределенияНДС[НомерСтрокиТаблицы];
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Для Каждого СтрокаТабличнойЧасти из Объект.Товары Цикл
		СтрокаТабличнойЧасти.СуммаРаспределения = СтрокаТабличнойЧасти.СуммаРаспределения+СтрокаТабличнойЧасти.Сумма;
		СтрокаТабличнойЧасти.СуммаРаспределенияНДС = СтрокаТабличнойЧасти.СуммаРаспределенияНДС+СтрокаТабличнойЧасти.СуммаНДС;
	КонецЦикла;	
	
	Для Каждого СтрокаТабличнойЧасти из Объект.ОС Цикл
		СтрокаТабличнойЧасти.СуммаРаспределения = СтрокаТабличнойЧасти.СуммаРаспределения+СтрокаТабличнойЧасти.Сумма;
		СтрокаТабличнойЧасти.СуммаРаспределенияНДС = СтрокаТабличнойЧасти.СуммаРаспределенияНДС+СтрокаТабличнойЧасти.СуммаНДС;
	КонецЦикла;	
	
	Для Каждого СтрокаТабличнойЧасти из Объект.НМА Цикл
		СтрокаТабличнойЧасти.СуммаРаспределения = СтрокаТабличнойЧасти.СуммаРаспределения+СтрокаТабличнойЧасти.Сумма;
		СтрокаТабличнойЧасти.СуммаРаспределенияНДС = СтрокаТабличнойЧасти.СуммаРаспределенияНДС+СтрокаТабличнойЧасти.СуммаНДС;
	КонецЦикла;
КонецПроцедуры
Функция СвойствоФорматаОбмена(КомпонентыОбмена, ИмяСвойства)
	Результат = Ложь;
	
	Если ИмяСвойства = "Справочник.ФизическиеЛица.ДанныеФИО" Тогда
		Результат = (ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("1.3"));
	КонецЕсли;
	
	Возврат Результат;
КонецФункции
Функция СкладДляВыгрузки(СкладИсходный, ПараметрыКонвертации)
	Если ПараметрыКонвертации.ВыгружатьАналитикуПоСкладам = ЛОЖЬ Тогда
		// отправляем пустой склад
		Возврат Справочники.Склады.ПустаяСсылка();
	Иначе
		Возврат СкладИсходный;
	КонецЕсли;
КонецФункции
Функция СкладДляЗагрузки(СкладИсходный, ПараметрыКонвертации)
	Если ЗначениеЗаполнено(ПараметрыКонвертации.СкладПоУмолчанию) И НЕ ЗначениеЗаполнено(СкладИсходный) Тогда
		// Относим хозоперацию на склад по умолчанию
		Возврат ПараметрыКонвертации.СкладПоУмолчанию;
	Иначе
		Возврат СкладИсходный;
	КонецЕсли;
КонецФункции
Процедура СортировкаОбъектовПередОтложеннымЗаполнением(КомпонентыОбмена)
	// Необходимо обеспечить следующий порядок заполнения:
	// - справочники
	// - документы кроме корректировок и счетов-фактур
	// - корректировки поступления и реализации, созданные на основании исправительных счетов-фактур (в хронологическом порядке)
	// - счета-фактуры
	ЗагруженныеОбъекты = КомпонентыОбмена.ЗагруженныеОбъекты;
	ЗагруженныеОбъекты.Колонки.Добавить("Очередность");
	ЗагруженныеОбъекты.Колонки.Добавить("ДатаДляСортировкиДокументов");
	ЗагруженныеОбъекты.Колонки.Добавить("НомерИсправленияДляСортировкиКорректировок");
	
	Для Каждого СтрокаТаблицы Из ЗагруженныеОбъекты Цикл
		
		МетаданныеОбъекта = СтрокаТаблицы.Объект.МетаДанные();
		Если Метаданные.Справочники.Содержит(МетаданныеОбъекта)
			Или Метаданные.ПланыВидовХарактеристик.Содержит(МетаданныеОбъекта) Тогда
			СтрокаТаблицы.Очередность = 1;
		ИначеЕсли Метаданные.Документы.Содержит(МетаданныеОбъекта) Тогда
			
			СтрокаТаблицы.ДатаДляСортировкиДокументов = СтрокаТаблицы.Объект.Дата;
			
			Если ТипЗнч(СтрокаТаблицы.Объект.Ссылка) = Тип("ДокументСсылка.СчетФактураПолученный")
				Или ТипЗнч(СтрокаТаблицы.Объект.Ссылка) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
				
				СтрокаТаблицы.Очередность = 6;
				
			Иначе
				СтрокаТаблицы.Очередность = 4;
			КонецЕсли;
			
		Иначе
			СтрокаТаблицы.Очередность = 3;
		КонецЕсли;
		
	КонецЦикла;
	
	ЗагруженныеОбъекты.Сортировать("Очередность, ДатаДляСортировкиДокументов, НомерИсправленияДляСортировкиКорректировок");
КонецПроцедуры
Процедура СписаниеТоваров_ПередЗаписью(ПолученныеДанные, ДанныеИБ, ПараметрыКонвертации, КонвертацияСвойств)
	// Склад
	СкладИзПолученныхДанных = ПолученныеДанные.Склад;
	Если Не ЗначениеЗаполнено(СкладИзПолученныхДанных) Тогда
		ПолученныеДанные.Склад = ПараметрыКонвертации.СкладПоУмолчанию;
	КонецЕсли;
	
	Если ДанныеИБ = Неопределено Тогда
	
		ОрганизацияЯвляетсяПлательщикомКПН =  ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(ПолученныеДанные.Организация, ПолученныеДанные.Дата);
		
		Если Не ОрганизацияЯвляетсяПлательщикомКПН Тогда
			ПолученныеДанные.УчитыватьКПН = Ложь;
		Иначе
			ПолученныеДанные.УчитыватьКПН = Истина;
		КонецЕсли;	
	
		Если НЕ ПолученныеДанные.УчитыватьКПН Тогда
			ПолученныеДанные.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НеОтражаетсяВНУ;
		Иначе
			ПолученныеДанные.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ;
		КонецЕсли;
	
		ПолученныеДанные.УчитыватьНДС = ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНДС(ПолученныеДанные.Организация, ПолученныеДанные.Дата);
	
		Возврат;
		
	КонецЕсли;
	
	// Склад
	Если Не ЗначениеЗаполнено(СкладИзПолученныхДанных) И ЗначениеЗаполнено(ДанныеИБ.Склад) Тогда
		ПолученныеДанные.Склад = ДанныеИБ.Склад;
	КонецЕсли;
			
	// Переносим те свойства, которые указаны в ПКС
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
	
	// Восстанавливаем "затертые" данные
	//Товары
	МассивКлючевыхПолей = Новый Массив;
	МассивКлючевыхПолей.Добавить("Номенклатура");
	МассивКлючевыхПолей.Добавить("ЕдиницаИзмерения");
	МассивКлючевыхПолей.Добавить("Количество");
	
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.Товары,
		ДанныеИБ.Товары,
		МассивКлючевыхПолей,
		"СчетУчетаБУ");
	ДанныеИБ.Товары.Загрузить(ПолученныеДанные.Товары.Выгрузить());
	ПолученныеДанные = Неопределено;
КонецПроцедуры
Функция СчетаРасчетовСКонтрагентами()
	ДоступныеСчета = Новый Массив;
	ДоступныеСчета.Добавить(ПланыСчетов.Типовой.КраткосрочныеФинансовыеАктивыОцениваемыеПоАмортизированнойСтоимости);
	ДоступныеСчета.Добавить(ПланыСчетов.Типовой.КраткосрочнаяДебиторскаяЗадолженность);
	ДоступныеСчета.Добавить(ПланыСчетов.Типовой.ПрочиеКраткосрочныеАктивы_);
	ДоступныеСчета.Добавить(ПланыСчетов.Типовой.ДолгосрочныеПредоставленныеЗаймы);
	ДоступныеСчета.Добавить(ПланыСчетов.Типовой.ДолгосрочнаяДебиторскаяЗадолженность);
	ДоступныеСчета.Добавить(ПланыСчетов.Типовой.ДолгосрочныеАвансыВыданные);
	ДоступныеСчета.Добавить(ПланыСчетов.Типовой.КраткосрочныеФинансовыеОбязательства);
	ДоступныеСчета.Добавить(ПланыСчетов.Типовой.КраткосрочнаяКредиторскаяЗадолженность);
	ДоступныеСчета.Добавить(ПланыСчетов.Типовой.ПрочиеКраткосрочныеОбязательства_);
	ДоступныеСчета.Добавить(ПланыСчетов.Типовой.ДолгосрочныеБанковскиеЗаймы);
	ДоступныеСчета.Добавить(ПланыСчетов.Типовой.ДолгосрочнаяКредиторскаяЗадолженность);
	ДоступныеСчета.Добавить(ПланыСчетов.Типовой.ДолгосрочныеОценочныеОбязательства);
	ДоступныеСчета.Добавить(ПланыСчетов.Типовой.ПрочиеДолгосрочныеОбязательства_);
	
	ИсключаемыеСчета = Новый Массив;
	ИсключаемыеСчета.Добавить(ПланыСчетов.Типовой.КраткосрочнаяДебиторскаяЗадолженностьРаботников);
	ИсключаемыеСчета.Добавить(ПланыСчетов.Типовой.ДолгосрочнаяДебиторскаяЗадолженностьРаботников);
	ИсключаемыеСчета.Добавить(ПланыСчетов.Типовой.РезервПоСомнительнымТребованиям);
	ИсключаемыеСчета.Добавить(ПланыСчетов.Типовой.КраткосрочныеРасходыБудущихПериодов);
	ИсключаемыеСчета.Добавить(ПланыСчетов.Типовой.ПрочиеКраткосрочныеАктивы);
	ИсключаемыеСчета.Добавить(ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПоОплатеТруда);
	ИсключаемыеСчета.Добавить(ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПоДепонированнойЗаработнойПлате);
	ИсключаемыеСчета.Добавить(ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПоИсполнительнымЛистам);
	ИсключаемыеСчета.Добавить(ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПередПодотчетнымиЛицами);
	ИсключаемыеСчета.Добавить(ПланыСчетов.Типовой.КраткосрочныеДоходыБудущихПериодов);
	ИсключаемыеСчета.Добавить(ПланыСчетов.Типовой.ДолгосрочнаяЗадолженностьПоДепонированнойЗаработнойПлате);
	ИсключаемыеСчета.Добавить(ПланыСчетов.Типовой.ДолгосрочнаяЗадолженностьПоИсполнительнымЛистам);
	ИсключаемыеСчета.Добавить(ПланыСчетов.Типовой.ДолгосрочнаяЗадолженностьПередПодотчетнымиЛицами);
	ИсключаемыеСчета.Добавить(ПланыСчетов.Типовой.ДолгосрочныеОценочныеОбязательстваПоВознаграждениямРаботникам);
	ИсключаемыеСчета.Добавить(ПланыСчетов.Типовой.ПрочиеДолгосрочныеОценочныеОбязательства);
	ИсключаемыеСчета.Добавить(ПланыСчетов.Типовой.ДолгосрочныеДоходыБудущихПериодов);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Типовой.Ссылка КАК Ссылка
	|ИЗ
	|	ПланСчетов.Типовой КАК Типовой
	|ГДЕ
	|	Типовой.Ссылка В ИЕРАРХИИ(&ДоступныеСчета)
	|	И НЕ Типовой.Ссылка В ИЕРАРХИИ (&ИсключаемыеСчета)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Типовой.Порядок";
	
	Запрос.УстановитьПараметр("ДоступныеСчета", ДоступныеСчета);
	Запрос.УстановитьПараметр("ИсключаемыеСчета", ИсключаемыеСчета);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
КонецФункции
Процедура УстановитьСтавкуНДС4и2ВДоговоре(Объект)
	Если Объект.ДополнительныеСвойства.Свойство("НДСПоСтавкам4и2") Тогда
		
		НДСПоСтавкам4и2ВДоговоре = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДоговорКонтрагента, "НДСПоСтавкам4и2");
		НДСПоСтавкам4и2Новая     = Объект.ДополнительныеСвойства.НДСПоСтавкам4и2;
		ДоговорМодифицирован     = Ложь;
		
		Если НДСПоСтавкам4и2Новая
			И Не НДСПоСтавкам4и2ВДоговоре Тогда
			ДоговорМодифицирован = Истина;
		Иначе
			Если Объект.ДополнительныеСвойства.НДСПоСтавкам18и10
				И НДСПоСтавкам4и2ВДоговоре Тогда
				ДоговорМодифицирован = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если ДоговорМодифицирован Тогда
			ДоговорОбъекта = Объект.ДоговорКонтрагента.ПолучитьОбъект();
			ДоговорОбъекта.ОбменДанными.Загрузка = Истина;
			ДоговорОбъекта.НДСПоСтавкам4и2       = НДСПоСтавкам4и2Новая;
			ДоговорОбъекта.Записать();
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры
Процедура УстановкаУчетнойПолитикиОрганизации(ОрганизацияДляУчетнойПолитики)
	//Если Не ЗначениеЗаполнено(КомпонентыОбмена.ПараметрыКонвертации.УчетнаяПолитикаОрганизаций) Тогда
	//	КомпонентыОбмена.ПараметрыКонвертации.УчетнаяПолитикаОрганизаций = Новый Соответствие;
	//КонецЕсли;
	
	//Если КомпонентыОбмена.ПараметрыКонвертации.УчетнаяПолитикаОрганизаций.Получить(ОрганизацияДляУчетнойПолитики) = Неопределено Тогда
		
		// проверим, есть ли соответсвие бухгалтерских и налоговых счетов
		ЗапросСоответствиеСчетовБУиНУ = Новый Запрос("ВЫБРАТЬ *
		|ИЗ
		|	РегистрСведений.СоответствиеСчетовБУиНУ.СрезПоследних КАК СоответствиеСчетовБУиНУСрезПоследних");
		
		
		ЕстьСоответсвиеСчетов = НЕ ЗапросСоответствиеСчетовБУиНУ.Выполнить().Пустой();
		
		// попробуем получить учетную политику и если таковой не окажется, создать её для организации
		ЗапросУчетнаяПолитикаБухгалтерскийУчет = Новый Запрос("ВЫБРАТЬ *
		|ИЗ
		|	РегистрСведений.УчетнаяПолитикаНалоговыйУчет.СрезПоследних(, Организация = &Организация) КАК УчетнаяПолитикаНалоговыйУчетСрезПоследних");
		
		ЗапросУчетнаяПолитикаБухгалтерскийУчет.УстановитьПараметр("Организация", ОрганизацияДляУчетнойПолитики);
		
		ЕстьУчетнаяПолитикаБУ = НЕ ЗапросУчетнаяПолитикаБухгалтерскийУчет.Выполнить().Пустой();
		
		ЗапросУчетнаяПолитикаНалоговыйУчет = Новый Запрос("ВЫБРАТЬ *
		|ИЗ
		|	РегистрСведений.УчетнаяПолитикаНалоговыйУчет.СрезПоследних(, Организация = &Организация) КАК УчетнаяПолитикаНалоговыйУчетСрезПоследних");
		
		ЗапросУчетнаяПолитикаНалоговыйУчет.УстановитьПараметр("Организация", ОрганизацияДляУчетнойПолитики);
		
		ЕстьУчетнаяПолитикаНУ = НЕ ЗапросУчетнаяПолитикаНалоговыйУчет.Выполнить().Пустой();
		
		Если НЕ ЕстьУчетнаяПолитикаБУ Тогда
			// создаем учетную политику для организации
			НаборЗаписей = РегистрыСведений.УчетнаяПолитикаБухгалтерскийУчет.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Организация.Установить(ОрганизацияДляУчетнойПолитики);
			
			НоваяСтрока = НаборЗаписей.Добавить();
			НоваяСтрока.Период = '19800101000000';
			НоваяСтрока.СпособРасчетаСебестоимостиПроизводства = Неопределено;
			НоваяСтрока.УчетВременныхРазницПоНалогуНаПрибыль = Истина;
			НоваяСтрока.ПодразделениеДляРеглОпераций = Неопределено;
			НоваяСтрока.ОпределятьСтоимостьПриобретенияПоКурсуАванса = Ложь;
			НоваяСтрока.ПрименятьПараметрыНачисленияАмортизацииВМесяцеИзменения = Ложь;
			НоваяСтрока.Организация = ОрганизацияДляУчетнойПолитики;
			
			НаборЗаписей.Записать();
			
		КонецЕсли;
		
		Если НЕ ЕстьУчетнаяПолитикаНУ Тогда
			// создаем учетную политику для организации
			НаборЗаписей = РегистрыСведений.УчетнаяПолитикаНалоговыйУчет.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Организация.Установить(ОрганизацияДляУчетнойПолитики);
			
			НоваяСтрока = НаборЗаписей.Добавить();
			НоваяСтрока.Период = '19800101000000';
			НоваяСтрока.НДСНалоговыйПериод = Неопределено;
			НоваяСтрока.НДСМетодОтнесенияВЗачет = Неопределено;
			НоваяСтрока.ОрганизацияЯвляетсяПлательщикомНДС = Истина;
			НоваяСтрока.ОрганизацияЯвляетсяПлательщикомКПН = Истина;
			НоваяСтрока.ОрганизацияЯвляетсяПлательщикомАкциза = Ложь;
			НоваяСтрока.Организация = ОрганизацияДляУчетнойПолитики;
			
			НаборЗаписей.Записать();
			
		КонецЕсли;
		
		Если НЕ ЕстьСоответсвиеСчетов Тогда
			
			НовыйДокумент = Документы.УстановкаСоответствияСчетовБУиНУ.СоздатьДокумент();
			НовыйДокумент.Дата = '19800101000000';
			НовыйДокумент.Организация = ОрганизацияДляУчетнойПолитики;
			Документы.УстановкаСоответствияСчетовБУиНУ.ЗаполнитьСоответствиеСчетовБУиНУПоУмолчанию(НовыйДокумент);
			НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
			
		КонецЕсли;
	//	КомпонентыОбмена.ПараметрыКонвертации.УчетнаяПолитикаОрганизаций.Вставить(ОрганизацияДляУчетнойПолитики,"Есть");
	//КонецЕсли;
КонецПроцедуры
Процедура УточнитьСтавкуНДСВСтроке(Строка, СтруктураДанныхСтроки, НДСПоСтавкам4и2, НДСПоСтавкам18и10)
	Если ЗначениеЗаполнено(Строка.СтавкаНДС.Значение) Тогда
		Если Строка.СтавкаНДС.Значение = "НДС2" Тогда
			СтруктураДанныхСтроки.СтавкаНДС.Значение = "НДС10";
			НДСПоСтавкам4и2 = Истина;
		ИначеЕсли Строка.СтавкаНДС.Значение = "НДС2_102" Тогда
			СтруктураДанныхСтроки.СтавкаНДС.Значение = "НДС10_110";
			НДСПоСтавкам4и2 = Истина;
		ИначеЕсли Строка.СтавкаНДС.Значение = "НДС4" Тогда
		    СтруктураДанныхСтроки.СтавкаНДС.Значение = "НДС18";
		    НДСПоСтавкам4и2 = Истина;
		ИначеЕсли Строка.СтавкаНДС.Значение = "НДС4_104" Тогда
			СтруктураДанныхСтроки.СтавкаНДС.Значение = "НДС18_118";
			НДСПоСтавкам4и2 = Истина;
		ИначеЕсли Строка.СтавкаНДС.Значение = "НДС18"
			Или Строка.СтавкаНДС.Значение = "НДС18_118"
			Или Строка.СтавкаНДС.Значение = "НДС10"
			Или Строка.СтавкаНДС.Значение = "НДС10_110" Тогда
			НДСПоСтавкам18и10 = Истина;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
Функция ФизическоеЛицоДляЗагрузки(ФизическоеЛицоИсходное)
	Если ФизическоеЛицоИсходное.Свойство("ИНН") Тогда
		ФизическоеЛицо = Справочники.ФизическиеЛица.НайтиПоРеквизиту("ИдентификационныйКодЛичности",ФизическоеЛицоИсходное.ИНН);
	Иначе
		ФизическоеЛицо = Справочники.ФизическиеЛица.НайтиПоНаименованию(ФизическоеЛицоИсходное.ФИО);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ФизическоеЛицо) Тогда
		НовоеФизическоеЛицо = Справочники.ФизическиеЛица.СоздатьЭлемент();
		НовоеФизическоеЛицо.Наименование = ФизическоеЛицоИсходное.ФИО;
		НовоеФизическоеЛицо.ИдентификационныйКодЛичности = ФизическоеЛицоИсходное.ИНН;
		НовоеФизическоеЛицо.ДатаРождения = ФизическоеЛицоИсходное.ДатаРождения;
		НовоеФизическоеЛицо.Записать();
		ФизическоеЛицо = НовоеФизическоеЛицо.Ссылка;
	КонецЕсли;
	
	Возврат ФизическоеЛицо;
КонецФункции
Функция ФизическоеЛицоПоУмолчанию()
	НаименованиеПоУмолчанию = НСтр("ru = '<По Всем Работникам>'");
	ИИНПоУмолчанию = НСтр("ru = '<123456789012>'");
	
	ФизическоеЛицо = Справочники.ФизическиеЛица.НайтиПоНаименованию(НаименованиеПоУмолчанию);
	Если НЕ ЗначениеЗаполнено(ФизическоеЛицо) Тогда
		НовоеФизическоеЛицо = Справочники.ФизическиеЛица.СоздатьЭлемент();
		НовоеФизическоеЛицо.Наименование = НаименованиеПоУмолчанию;
		НовоеФизическоеЛицо.ИдентификационныйКодЛичности = ИИНПоУмолчанию;
		НовоеФизическоеЛицо.Записать();
		ФизическоеЛицо = НовоеФизическоеЛицо.Ссылка;
	КонецЕсли;
	
	Возврат ФизическоеЛицо;
КонецФункции

#КонецОбласти
#Область Параметры
// Заполняет параметры конвертации.
//
// Параметры:
//  ПараметрыКонвертации - структура, в которую добавляются параметры конвертации.
Процедура ЗаполнитьПараметрыКонвертации(ПараметрыКонвертации) Экспорт
	ПараметрыКонвертации.Вставить("ВидыОплатПоУмолчанию");
	ПараметрыКонвертации.Вставить("ВыгружатьАналитикуПоСкладам");
	ПараметрыКонвертации.Вставить("ДатаОкончанияПериодаВыгрузкиДокументов");
	ПараметрыКонвертации.Вставить("ДатаОстатков");
	ПараметрыКонвертации.Вставить("ДоговорОплатаСертификатомОтРозничногоПокупателя");
	ПараметрыКонвертации.Вставить("ДоговорРеализацияСертификатаРозничномуПокупателю");
	ПараметрыКонвертации.Вставить("ЗагруженныеОбъекты");
	ПараметрыКонвертации.Вставить("КонтрагентРозничныйПокупатель");
	ПараметрыКонвертации.Вставить("ПравилаЗагрузкиПодразделений");
	ПараметрыКонвертации.Вставить("РазрешитьПроведениеДокументовПриЗагрузке");
	ПараметрыКонвертации.Вставить("СкладПоУмолчанию");
	ПараметрыКонвертации.Вставить("СтатьяПрочихДоходовРасходов_ОприходованиеТоваров");
	ПараметрыКонвертации.Вставить("ТаблицаДолгиАвансыКредитыЗаймы");
	ПараметрыКонвертации.Вставить("УчетнаяПолитикаОрганизаций");
	ПараметрыКонвертации.Вставить("ВариантНастройки");
	ПараметрыКонвертации.Вставить("ТипЦенПлановойСебестоимости");
	ПараметрыКонвертации.Вставить("ВалютаРегламентированногоУчета");
КонецПроцедуры

#КонецОбласти
#Область ОбщегоНазначения
// Процедура-обертка, выполняет запуск указанной в параметрах процедуры модуля менеджера обмена через формат.
//
// Параметры:
//  ИмяПроцедуры - строка.
//  СтруктураПараметров - структура, содержащая передаваемые параметры.
Процедура ВыполнитьПроцедуруМодуляМенеджера(ИмяПроцедуры, Параметры) Экспорт
	Если ИмяПроцедуры = "ПОД_Документ_АвансовыйОтчет_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_АвансовыйОтчет_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ВозвратТоваровОтПокупателя_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ВозвратТоваровОтПокупателя_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ВозвратТоваровПоставщику_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ВозвратТоваровПоставщику_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_НачислениеОценочныхОбязательств_ЗУП_От_ПриОбработке" Тогда 
		ПОД_Документ_НачислениеОценочныхОбязательств_ЗУП_От_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ОприходованиеТоваров_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ОприходованиеТоваров_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ОстаткиБезналичныхДенежныхСредств_ПриОбработке" Тогда 
		ПОД_Документ_ОстаткиБезналичныхДенежныхСредств_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ОстаткиЗадолженностиПодотчетныхЛиц_ПриОбработке" Тогда 
		ПОД_Документ_ОстаткиЗадолженностиПодотчетныхЛиц_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ОстаткиКредитыЗаймы_ПриОбработке" Тогда 
		ПОД_Документ_ОстаткиКредитыЗаймы_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ОстаткиНаличныхДенежныхСредств_ПриОбработке" Тогда 
		ПОД_Документ_ОстаткиНаличныхДенежныхСредств_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ОстаткиПерерасходаПодотчетныхЛиц_ПриОбработке" Тогда 
		ПОД_Документ_ОстаткиПерерасходаПодотчетныхЛиц_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ОстаткиРасчетыСПокупателямиАвансы_ПриОбработке" Тогда 
		ПОД_Документ_ОстаткиРасчетыСПокупателямиАвансы_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ОстаткиРасчетыСПокупателямиДолги_ПриОбработке" Тогда 
		ПОД_Документ_ОстаткиРасчетыСПокупателямиДолги_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ОстаткиРасчетыСПоставщикамиАвансы_ПриОбработке" Тогда 
		ПОД_Документ_ОстаткиРасчетыСПоставщикамиАвансы_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ОстаткиРасчетыСПоставщикамиДолги_ПриОбработке" Тогда 
		ПОД_Документ_ОстаткиРасчетыСПоставщикамиДолги_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ОстаткиСобственныхТМЦ_ПриОбработке" Тогда 
		ПОД_Документ_ОстаткиСобственныхТМЦ_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ОстаткиТараПереданная_ПриОбработке" Тогда 
		ПОД_Документ_ОстаткиТараПереданная_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ОстаткиТараПринятая_ПриОбработке" Тогда 
		ПОД_Документ_ОстаткиТараПринятая_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ОстаткиТоваровПереданныхНаКомиссию_ПриОбработке" Тогда 
		ПОД_Документ_ОстаткиТоваровПереданныхНаКомиссию_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ОстаткиТоваровПринятыхНаКомиссию_ПриОбработке" Тогда 
		ПОД_Документ_ОстаткиТоваровПринятыхНаКомиссию_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ОтражениеЗарплатыВБухучете_Отправка_ЗУП_ПриОбработке" Тогда 
		ПОД_Документ_ОтражениеЗарплатыВБухучете_Отправка_ЗУП_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ПеремещениеТоваров_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ПеремещениеТоваров_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ПКО_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ПКО_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ПОПБДС_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ПОПБДС_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ПОСБДС_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ПОСБДС_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ПоступлениеТоваровУслуг_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ПоступлениеТоваровУслуг_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ПРС_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ПРС_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_РеализацияТоваровУслуг_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_РеализацияТоваровУслуг_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_РКО_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_РКО_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_СписаниеТоваров_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_СписаниеТоваров_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_СРС_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_СРС_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ТаможеннаяДекларация_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ТаможеннаяДекларация_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_УстановкаЦенНоменклатуры_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_УстановкаЦенНоменклатуры_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_Банки_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_Банки_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_ВидыПоступления_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_ВидыПоступления_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_ВидыРеализации_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_ВидыРеализации_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_ДоговорыКонтрагентов_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_ДоговорыКонтрагентов_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_Кассы_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_Кассы_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_Контрагенты_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_Контрагенты_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_Номенклатура_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_Номенклатура_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_Склады_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_Склады_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_ТипыЦен_ПриОбработке" Тогда 
		ПОД_Справочник_ТипыЦен_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_ФизическиеЛица_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_ФизическиеЛица_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_АвансовыйОтчет_ПриОбработке" Тогда 
		ПОД_Документ_АвансовыйОтчет_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ВозвратПодарочныхСертификатов_Получение_ПриОбработке" Тогда 
		ПОД_Документ_ВозвратПодарочныхСертификатов_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ДепонированиеЗаработнойПлаты_ЗУП_ПриОбработке" Тогда 
		ПОД_Документ_ДепонированиеЗаработнойПлаты_ЗУП_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_НачислениеОценочныхОбязательств_ЗУП_ПриОбработке" Тогда 
		ПОД_Документ_НачислениеОценочныхОбязательств_ЗУП_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ОтражениеЗарплатыВБухучете_Получение_ЗУП_ПриОбработке" Тогда 
		ПОД_Документ_ОтражениеЗарплатыВБухучете_Получение_ЗУП_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ПБДСВзносыИОтчисления_Получение_ЗУП_ПриОбработке" Тогда 
		ПОД_Документ_ПБДСВзносыИОтчисления_Получение_ЗУП_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ПБДСВозвратЗаработнойПлаты_Получение_ЗУП_ПриОбработке" Тогда 
		ПОД_Документ_ПБДСВозвратЗаработнойПлаты_Получение_ЗУП_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ПБДСКонвертацияВалюты_Получение_ПриОбработке" Тогда 
		ПОД_Документ_ПБДСКонвертацияВалюты_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ПБДСПрочееПоступление_Получение_ПриОбработке" Тогда 
		ПОД_Документ_ПБДСПрочееПоступление_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ПБДСПрочиеДоходы_Получение_ПриОбработке" Тогда 
		ПОД_Документ_ПБДСПрочиеДоходы_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ПБДСРасчетыСКонтрагентами_Получение_ПриОбработке" Тогда 
		ПОД_Документ_ПБДСРасчетыСКонтрагентами_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ПБДСРасчетыССотрудниками_Получение_ПриОбработке" Тогда 
		ПОД_Документ_ПБДСРасчетыССотрудниками_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ПКОРасчетыССотрудниками_Получение_ПриОбработке" Тогда 
		ПОД_Документ_ПКОРасчетыССотрудниками_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ПоступлениеТоваровУслуг_ПриОбработке" Тогда 
		ПОД_Документ_ПоступлениеТоваровУслуг_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_РеализацияТоваровУслуг_ПриОбработке" Тогда 
		ПОД_Документ_РеализацияТоваровУслуг_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_РКОВыплатаЗарплаты_Получение_ПриОбработке" Тогда 
		ПОД_Документ_РКОВыплатаЗарплаты_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_СБДСВзносыИОтчисления_Получение_ЗУП_ПриОбработке" Тогда 
		ПОД_Документ_СБДСВзносыИОтчисления_Получение_ЗУП_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_СБДСКонвертацияВалюты_Получение_ПриОбработке" Тогда 
		ПОД_Документ_СБДСКонвертацияВалюты_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_СБДСПереводНаДругойСчет_Получение_ПриОбработке" Тогда 
		ПОД_Документ_СБДСПереводНаДругойСчет_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_СБДСПеречислениеЗаработнойПлаты_Получение_ПриОбработке" Тогда 
		ПОД_Документ_СБДСПеречислениеЗаработнойПлаты_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_СБДСПлатежиВБюджет_Получение_ПриОбработке" Тогда 
		ПОД_Документ_СБДСПлатежиВБюджет_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_СБДСПрочееСписание_Получение_ПриОбработке" Тогда 
		ПОД_Документ_СБДСПрочееСписание_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_СБДСПрочиеРасходы_Получение_ПриОбработке" Тогда 
		ПОД_Документ_СБДСПрочиеРасходы_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_СБДСРасчетыСКонтрагентами_Получение_ПриОбработке" Тогда 
		ПОД_Документ_СБДСРасчетыСКонтрагентами_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_СборкаТоваров_Получение_ПриОбработке" Тогда 
		ПОД_Документ_СборкаТоваров_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_АктуальныеЭСФ_Получение_ПриОбработке" Тогда 
		ПОД_Справочник_АктуальныеЭСФ_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_Валюты_Получение_ПриОбработке" Тогда 
		ПОД_Справочник_Валюты_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_ДокументыФизическихЛиц_Получение_ПриОбработке" Тогда 
		ПОД_Справочник_ДокументыФизическихЛиц_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_ИсторияЭСФ_Получение_ПриОбработке" Тогда 
		ПОД_Справочник_ИсторияЭСФ_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_Кассы_Получение_ПриОбработке" Тогда 
		ПОД_Справочник_Кассы_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_АвансовыйОтчет_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_АвансовыйОтчет_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВозвратТоваровОтПокупателя_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ВозвратТоваровОтПокупателя_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВозвратТоваровПоставщику_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ВозвратТоваровПоставщику_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_НачислениеОценочныхОбязательств_ЗУП_От_ПриОтправкеДанных" Тогда 
		ПКО_Документ_НачислениеОценочныхОбязательств_ЗУП_От_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОприходованиеТоваров_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОприходованиеТоваров_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОстаткиБезналичныхДенежныхСредств_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОстаткиБезналичныхДенежныхСредств_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОстаткиЗадолженностиПодотчетныхЛиц_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОстаткиЗадолженностиПодотчетныхЛиц_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОстаткиКредитыЗаймы_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОстаткиКредитыЗаймы_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОстаткиНаличныхДенежныхСредств_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОстаткиНаличныхДенежныхСредств_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОстаткиПерерасходаПодотчетныхЛиц_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОстаткиПерерасходаПодотчетныхЛиц_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОстаткиРасчетыСПокупателямиАвансы_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОстаткиРасчетыСПокупателямиАвансы_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОстаткиРасчетыСПокупателямиДолги_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОстаткиРасчетыСПокупателямиДолги_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОстаткиРасчетыСПоставщикамиАвансы_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОстаткиРасчетыСПоставщикамиАвансы_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОстаткиРасчетыСПоставщикамиДолги_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОстаткиРасчетыСПоставщикамиДолги_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОстаткиСобственныхТМЦ_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОстаткиСобственныхТМЦ_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОстаткиТараПереданная_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОстаткиТараПереданная_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОстаткиТараПринятая_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОстаткиТараПринятая_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОстаткиТоваровПереданныхНаКомиссию_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОстаткиТоваровПереданныхНаКомиссию_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОстаткиТоваровПринятыхНаКомиссию_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОстаткиТоваровПринятыхНаКомиссию_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОтражениеЗарплатыВБухучете_Отправка_ЗУП_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОтражениеЗарплатыВБухучете_Отправка_ЗУП_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПеремещениеТоваров_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПеремещениеТоваров_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОКонвертацияВалюты_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПКОКонвертацияВалюты_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОПолучениеНаличныхВБанке_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПКОПолучениеНаличныхВБанке_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОПрочееПоступление_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПКОПрочееПоступление_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОПрочиеДоходы_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПКОПрочиеДоходы_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПКОРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОРасчетыССотрудниками_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПКОРасчетыССотрудниками_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПОПБДСКонвертацияВалюты_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПОПБДСКонвертацияВалюты_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПОПБДСПрочееПоступление_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПОПБДСПрочееПоступление_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПОПБДСПрочиеДоходы_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПОПБДСПрочиеДоходы_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПОПБДСРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПОПБДСРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПОПБДСРасчетыССотрудниками_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПОПБДСРасчетыССотрудниками_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПОСБДСПереводНаДругойСчет_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПОСБДСПереводНаДругойСчет_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПОСБДСПеречислениеЗП_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПОСБДСПеречислениеЗП_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПОСБДСПлатежиВБюджет_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПОСБДСПлатежиВБюджет_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПОСБДСПрочееСписание_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПОСБДСПрочееСписание_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПОСБДСПрочиеРасходы_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПОСБДСПрочиеРасходы_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПОСБДСРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПОСБДСРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПоступлениеТоваровУслуг_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПоступлениеТоваровУслуг_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПРСКонвертацияВалюты_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПРСКонвертацияВалюты_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПРСПрочееПоступление_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПРСПрочееПоступление_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПРСПрочиеДоходы_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПРСПрочиеДоходы_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПРСРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПРСРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПРСРасчетыССотрудниками_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПРСРасчетыССотрудниками_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РеализацияТоваровУслуг_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_РеализацияТоваровУслуг_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОВыплатаЗарплаты_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_РКОВыплатаЗарплаты_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОКонвертацияВалюты_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_РКОКонвертацияВалюты_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОНаБанковскийСчет_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_РКОНаБанковскийСчет_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОПрочаяВыдача_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_РКОПрочаяВыдача_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОПрочийРасход_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_РКОПрочийРасход_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_РКОРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОРасчетыССотрудниками_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_РКОРасчетыССотрудниками_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСПереводНаДругойСчет_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_СБДСПереводНаДругойСчет_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСПеречислениеЗП_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_СБДСПеречислениеЗП_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСПеречислениеЗПНаЛС_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_СБДСПеречислениеЗПНаЛС_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСПлатежиВБюджет_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_СБДСПлатежиВБюджет_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСПрочееСписание_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_СБДСПрочееСписание_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСПрочиеРасходы_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_СБДСПрочиеРасходы_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_СБДСРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСРасчетыССотрудниками_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_СБДСРасчетыССотрудниками_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_УстановкаЦенНоменклатуры_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_УстановкаЦенНоменклатуры_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_БанковскиеСчета_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_БанковскиеСчета_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ДоговорыКонтрагентов_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_ДоговорыКонтрагентов_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Номенклатура_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_Номенклатура_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Организации_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_Организации_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Склады_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_Склады_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_АвансовыйОтчет_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_АвансовыйОтчет_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_АвансовыйОтчет_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_АвансовыйОтчет_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_АвансовыйОтчет_Получение_ЗУП_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_АвансовыйОтчет_Получение_ЗУП_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_АвансовыйОтчет_Получение_ЗУП_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_АвансовыйОтчет_Получение_ЗУП_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВозвратТоваровОтПокупателя_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ВозвратТоваровОтПокупателя_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВозвратТоваровОтПокупателя_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ВозвратТоваровОтПокупателя_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВозвратТоваровПоставщику_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ВозвратТоваровПоставщику_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВозвратТоваровПоставщику_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ВозвратТоваровПоставщику_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ДепонированиеЗаработнойПлаты_ЗУП_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ДепонированиеЗаработнойПлаты_ЗУП_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ЗаказКлиента_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ЗаказКлиента_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ЗаказКлиента_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ЗаказКлиента_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ИнвентаризацияТоваровНаСкладе_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ИнвентаризацияТоваровНаСкладе_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_КорректировкаДолга_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_КорректировкаДолга_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_КорректировкаДолга_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_КорректировкаДолга_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_НачислениеОценочныхОбязательств_ЗУП_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_НачислениеОценочныхОбязательств_ЗУП_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОперацияПоПлатежнойКарте_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ОперацияПоПлатежнойКарте_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОперацияПоПлатежнойКарте_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ОперацияПоПлатежнойКарте_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОприходованиеТоваров_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ОприходованиеТоваров_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОприходованиеТоваров_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ОприходованиеТоваров_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОтражениеЗарплатыВБухучете_Получение_ЗУП_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ОтражениеЗарплатыВБухучете_Получение_ЗУП_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОтражениеЗарплатыВБухучете_Получение_ЗУП_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ОтражениеЗарплатыВБухучете_Получение_ЗУП_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОтчетБанкаПоОперациямЭквайринга_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ОтчетБанкаПоОперациямЭквайринга_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОтчетБанкаПоОперациямЭквайринга_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ОтчетБанкаПоОперациямЭквайринга_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОтчетОРозничныхПродажах_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ОтчетОРозничныхПродажах_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОтчетОРозничныхПродажах_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ОтчетОРозничныхПродажах_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОтчетПроизводстваЗаСмену_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ОтчетПроизводстваЗаСмену_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПБДСВзносыИОтчисления_Получение_ЗУП_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПБДСВзносыИОтчисления_Получение_ЗУП_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПБДСВзносыИОтчисления_Получение_ЗУП_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПБДСВзносыИОтчисления_Получение_ЗУП_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПБДСВозвратЗаработнойПлаты_Получение_ЗУП_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПБДСВозвратЗаработнойПлаты_Получение_ЗУП_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПБДСВозвратЗаработнойПлаты_Получение_ЗУП_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПБДСВозвратЗаработнойПлаты_Получение_ЗУП_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПБДСКонвертацияВалюты_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПБДСКонвертацияВалюты_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПБДСКонвертацияВалюты_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПБДСКонвертацияВалюты_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПБДСПрочееПоступление_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПБДСПрочееПоступление_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПБДСПрочееПоступление_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПБДСПрочееПоступление_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПБДСПрочиеДоходы_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПБДСПрочиеДоходы_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПБДСПрочиеДоходы_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПБДСПрочиеДоходы_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПБДСРасчетыСКонтрагентами_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПБДСРасчетыСКонтрагентами_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПБДСРасчетыСКонтрагентами_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПБДСРасчетыСКонтрагентами_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПБДСРасчетыССотрудниками_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПБДСРасчетыССотрудниками_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПБДСРасчетыССотрудниками_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПБДСРасчетыССотрудниками_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПередачаТоваров_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПередачаТоваров_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПередачаТоваров_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПередачаТоваров_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПеремещениеТоваров_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПеремещениеТоваров_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПеремещениеТоваров_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПеремещениеТоваров_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОВнутренняяПередача_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПКОВнутренняяПередача_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОВнутренняяПередача_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПКОВнутренняяПередача_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОКонвертацияВалюты_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПКОКонвертацияВалюты_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОКонвертацияВалюты_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПКОКонвертацияВалюты_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОПолучениеНаличныхВБанке_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПКОПолучениеНаличныхВБанке_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОПолучениеНаличныхВБанке_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПКОПолучениеНаличныхВБанке_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОПрочееПоступление_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПКОПрочееПоступление_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОПрочееПоступление_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПКОПрочееПоступление_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОПрочиеДоходы_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПКОПрочиеДоходы_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОПрочиеДоходы_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПКОПрочиеДоходы_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОРасчетыСКонтрагентами_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПКОРасчетыСКонтрагентами_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОРасчетыСКонтрагентами_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПКОРасчетыСКонтрагентами_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОРасчетыССотрудниками_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПКОРасчетыССотрудниками_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОРасчетыССотрудниками_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПКОРасчетыССотрудниками_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОРасчетыССотрудниками_Получение_ЗУП_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПКОРасчетыССотрудниками_Получение_ЗУП_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОРасчетыССотрудниками_Получение_ЗУП_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПКОРасчетыССотрудниками_Получение_ЗУП_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОРозничнаяВыручка_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПКОРозничнаяВыручка_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОРозничнаяВыручка_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПКОРозничнаяВыручка_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПОПБДСКонвертацияВалюты_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПОПБДСКонвертацияВалюты_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПОПБДСКонвертацияВалюты_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПОПБДСКонвертацияВалюты_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПОПБДСПрочееПоступление_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПОПБДСПрочееПоступление_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПОПБДСПрочееПоступление_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПОПБДСПрочееПоступление_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПОПБДСПрочиеДоходы_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПОПБДСПрочиеДоходы_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПОПБДСПрочиеДоходы_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПОПБДСПрочиеДоходы_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПОПБДСРасчетыСКонтрагентами_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПОПБДСРасчетыСКонтрагентами_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПОПБДСРасчетыСКонтрагентами_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПОПБДСРасчетыСКонтрагентами_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПОПБДСРасчетыССотрудниками_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПОПБДСРасчетыССотрудниками_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПОПБДСРасчетыССотрудниками_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПОПБДСРасчетыССотрудниками_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПОСБДСКонвертацияВалюты_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПОСБДСКонвертацияВалюты_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПОСБДСКонвертацияВалюты_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПОСБДСКонвертацияВалюты_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПОСБДСПереводНаДругойСчет_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПОСБДСПереводНаДругойСчет_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПОСБДСПереводНаДругойСчет_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПОСБДСПереводНаДругойСчет_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПОСБДСПеречислениеЗарПлаты_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПОСБДСПеречислениеЗарПлаты_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПОСБДСПеречислениеЗарПлаты_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПОСБДСПеречислениеЗарПлаты_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПОСБДСПлатежиВБюджет_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПОСБДСПлатежиВБюджет_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПОСБДСПлатежиВБюджет_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПОСБДСПлатежиВБюджет_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПОСБДСПрочееСписание_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПОСБДСПрочееСписание_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПОСБДСПрочееСписание_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПОСБДСПрочееСписание_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПОСБДСПрочиеРасходы_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПОСБДСПрочиеРасходы_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПОСБДСПрочиеРасходы_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПОСБДСПрочиеРасходы_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПОСБДСРасчетыСКонтрагентами_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПОСБДСРасчетыСКонтрагентами_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПОСБДСРасчетыСКонтрагентами_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПОСБДСРасчетыСКонтрагентами_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПоступлениеИзПереработки_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПоступлениеИзПереработки_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РеализацияТоваровУслуг_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_РеализацияТоваровУслуг_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РеализацияТоваровУслуг_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_РеализацияТоваровУслуг_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОВнутренняяПередача_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_РКОВнутренняяПередача_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОВнутренняяПередача_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_РКОВнутренняяПередача_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОВыплатаЗарплаты_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_РКОВыплатаЗарплаты_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОВыплатаЗарплаты_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_РКОВыплатаЗарплаты_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОВыплатаЗарплаты_Получение_ЗУП_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_РКОВыплатаЗарплаты_Получение_ЗУП_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОВыплатаЗарплаты_Получение_ЗУП_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_РКОВыплатаЗарплаты_Получение_ЗУП_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОКонвертацияВалюты_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_РКОКонвертацияВалюты_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОКонвертацияВалюты_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_РКОКонвертацияВалюты_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОНаБанковскийСчет_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_РКОНаБанковскийСчет_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОНаБанковскийСчет_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_РКОНаБанковскийСчет_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОПрочаяВыдача_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_РКОПрочаяВыдача_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОПрочаяВыдача_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_РКОПрочаяВыдача_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОПрочийРасход_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_РКОПрочийРасход_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОПрочийРасход_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_РКОПрочийРасход_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОРасчетыСКонтрагентами_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_РКОРасчетыСКонтрагентами_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОРасчетыСКонтрагентами_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_РКОРасчетыСКонтрагентами_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОРасчетыССотрудниками_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_РКОРасчетыССотрудниками_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОРасчетыССотрудниками_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_РКОРасчетыССотрудниками_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РТиУБезПереходаПравСобственностиУслуги_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_РТиУБезПереходаПравСобственностиУслуги_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РТиУБезПереходаПравСобственностиУслуги_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_РТиУБезПереходаПравСобственностиУслуги_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСВзносыИОтчисления_Получение_ЗУП_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_СБДСВзносыИОтчисления_Получение_ЗУП_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСВзносыИОтчисления_Получение_ЗУП_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_СБДСВзносыИОтчисления_Получение_ЗУП_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСКонвертацияВалюты_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_СБДСКонвертацияВалюты_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСКонвертацияВалюты_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_СБДСКонвертацияВалюты_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСПереводНаДругойСчет_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_СБДСПереводНаДругойСчет_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСПереводНаДругойСчет_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_СБДСПереводНаДругойСчет_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСПеречислениеЗаработнойПлаты_П_ЗУП_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_СБДСПеречислениеЗаработнойПлаты_П_ЗУП_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСПеречислениеЗаработнойПлаты_П_ЗУП_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_СБДСПеречислениеЗаработнойПлаты_П_ЗУП_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСПеречислениеЗаработнойПлаты_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_СБДСПеречислениеЗаработнойПлаты_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСПеречислениеЗаработнойПлаты_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_СБДСПеречислениеЗаработнойПлаты_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСПеречислениеЗарПлЛицСчета_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_СБДСПеречислениеЗарПлЛицСчета_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСПеречислениеЗарПлЛицСчета_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_СБДСПеречислениеЗарПлЛицСчета_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСПлатежиВБюджет_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_СБДСПлатежиВБюджет_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСПлатежиВБюджет_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_СБДСПлатежиВБюджет_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСПрочееСписание_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_СБДСПрочееСписание_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСПрочееСписание_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_СБДСПрочееСписание_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСПрочиеРасходы_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_СБДСПрочиеРасходы_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСПрочиеРасходы_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_СБДСПрочиеРасходы_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСРасчетыСКонтрагентами_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_СБДСРасчетыСКонтрагентами_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСРасчетыСКонтрагентами_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_СБДСРасчетыСКонтрагентами_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСРасчетыССотрудниками_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_СБДСРасчетыССотрудниками_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСРасчетыССотрудниками_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_СБДСРасчетыССотрудниками_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СборкаТоваров_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_СборкаТоваров_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СборкаТоваров_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_СборкаТоваров_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СписаниеПриСборке_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_СписаниеПриСборке_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СписаниеПриСборке_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_СписаниеПриСборке_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СписаниеТоваров_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_СписаниеТоваров_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СписаниеТоваров_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_СписаниеТоваров_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СписаниеТоваровПоИнвентаризации_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_СписаниеТоваровПоИнвентаризации_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СписаниеТоваровПоИнвентаризации_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_СписаниеТоваровПоИнвентаризации_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СчетФактураВыданный_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_СчетФактураВыданный_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СчетФактураВыданный_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_СчетФактураВыданный_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СчетФактураПолученный_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_СчетФактураПолученный_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СчетФактураПолученный_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_СчетФактураПолученный_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ТаможеннаяДекларация_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ТаможеннаяДекларация_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ТаможеннаяДекларация_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ТаможеннаяДекларация_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ТребованиеНакладная_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ТребованиеНакладная_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ТребованиеНакладная_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ТребованиеНакладная_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ЭСФ_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ЭСФ_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ЭСФ_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ЭСФ_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_ПТиУ_ПоступлениеДопРасходов_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_ПТиУ_ПоступлениеДопРасходов_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_ПТиУ_ПоступлениеДопРасходов_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_ПТиУ_ПоступлениеДопРасходов_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_ПТиУ_ПоступлениеТоваровУслуг_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_ПТиУ_ПоступлениеТоваровУслуг_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_ПТиУ_ПоступлениеТоваровУслуг_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_ПТиУ_ПоступлениеТоваровУслуг_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_ПТиУРасх_ВозвратТоваровПоставщику_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_ПТиУРасх_ВозвратТоваровПоставщику_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_ПТиУРасх_ВозвратТоваровПоставщику_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_ПТиУРасх_ВозвратТоваровПоставщику_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_ПТиУРасх_ВозвратТоваровСтороннейКомпании_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_ПТиУРасх_ВозвратТоваровСтороннейКомпании_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_ПТиУРасх_ВозвратТоваровСтороннейКомпании_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_ПТиУРасх_ВозвратТоваровСтороннейКомпании_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_ПТиУРасх_ОприходованиеТоваров_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_ПТиУРасх_ОприходованиеТоваров_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_ПТиУРасх_ОприходованиеТоваров_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_ПТиУРасх_ОприходованиеТоваров_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_ПТиУРасх_СписаниеТоваров_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_ПТиУРасх_СписаниеТоваров_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_ПТиУРасх_СписаниеТоваров_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_ПТиУРасх_СписаниеТоваров_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_БанковскиеСчета_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_БанковскиеСчета_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ДоговорыКонтрагентов_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_ДоговорыКонтрагентов_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ДоговорыКонтрагентов_ИзСтруктуры_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_ДоговорыКонтрагентов_ИзСтруктуры_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Контрагенты_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_Контрагенты_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Контрагенты_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_Контрагенты_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Номенклатура_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_Номенклатура_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_НомераГТДИзСтроки_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_НомераГТДИзСтроки_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Организации_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_Организации_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Организации_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_Организации_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_СпецификацииНоменклатуры_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_СпецификацииНоменклатуры_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_СпособыОтраженияЗарплатыВБухУчете_П_ЗУП_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_СпособыОтраженияЗарплатыВБухУчете_П_ЗУП_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ФизическиеЛица_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_ФизическиеЛица_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ФизическиеЛица_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_ФизическиеЛица_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ТаможеннаяДекларация_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ТаможеннаяДекларация_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ТаможеннаяДекларация_Отправка_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ТаможеннаяДекларация_Отправка_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ТипыЦен_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_ТипыЦен_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ТипыЦен_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_ТипыЦен_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_АвансовыйОтчет" Тогда 
		ОтложеннаяОбработка_АвансовыйОтчет(
			Параметры.Объект, Параметры.КомпонентыОбмена.ПараметрыКонвертации, Параметры.ОбъектМодифицирован);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_ВозвратТоваровОтПокупателя" Тогда 
		ОтложеннаяОбработка_ВозвратТоваровОтПокупателя(
			Параметры.Объект, Параметры.КомпонентыОбмена.ПараметрыКонвертации, Параметры.ОбъектМодифицирован);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_ВозвратТоваровПоставщику" Тогда 
		ОтложеннаяОбработка_ВозвратТоваровПоставщику(
			Параметры.Объект, Параметры.КомпонентыОбмена.ПараметрыКонвертации, Параметры.ОбъектМодифицирован);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_ДоговорыКонтрагентовИзСтруктур" Тогда 
		ОтложеннаяОбработка_ДоговорыКонтрагентовИзСтруктур(
			Параметры.Объект);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_ИнвентаризацияТоваров" Тогда 
		ОтложеннаяОбработка_ИнвентаризацияТоваров(
			Параметры.Объект, Параметры.КомпонентыОбмена.ПараметрыКонвертации, Параметры.ОбъектМодифицирован);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_КассаРасчетыСКонтрагентами_БП" Тогда 
		ОтложеннаяОбработка_КассаРасчетыСКонтрагентами_БП(
			Параметры.Объект);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_КорректировкаДолга" Тогда 
		ОтложеннаяОбработка_КорректировкаДолга(
			Параметры.Объект, Параметры.КомпонентыОбмена.ПараметрыКонвертации, Параметры.ОбъектМодифицирован);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_НомераГТД" Тогда 
		ОтложеннаяОбработка_НомераГТД(
			Параметры.Объект);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_ОприходованиеТоваров" Тогда 
		ОтложеннаяОбработка_ОприходованиеТоваров(
			Параметры.Объект, Параметры.КомпонентыОбмена.ПараметрыКонвертации, Параметры.ОбъектМодифицирован);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_Организации" Тогда 
		ОтложеннаяОбработка_Организации(
			Параметры.Объект, Параметры.КомпонентыОбмена.ПараметрыКонвертации);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_ОРТ" Тогда 
		ОтложеннаяОбработка_ОРТ(
			Параметры.Объект, Параметры.КомпонентыОбмена.ПараметрыКонвертации, Параметры.ОбъектМодифицирован);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_ПБДС" Тогда 
		ОтложеннаяОбработка_ПБДС(
			Параметры.Объект);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_ПередачаМатериаловВПереработку" Тогда 
		ОтложеннаяОбработка_ПередачаМатериаловВПереработку(
			Параметры.Объект, Параметры.КомпонентыОбмена.ПараметрыКонвертации, Параметры.ОбъектМодифицирован);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_ПеремещениеТоваров" Тогда 
		ОтложеннаяОбработка_ПеремещениеТоваров(
			Параметры.Объект, Параметры.КомпонентыОбмена.ПараметрыКонвертации, Параметры.ОбъектМодифицирован);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_ПКОПолучениеНаличныхВБанке" Тогда 
		ОтложеннаяОбработка_ПКОПолучениеНаличныхВБанке(
			Параметры.Объект, Параметры.КомпонентыОбмена.ПараметрыКонвертации, Параметры.ОбъектМодифицирован);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_ПОСБДС" Тогда 
		ОтложеннаяОбработка_ПОСБДС(
			Параметры.Объект, Параметры.КомпонентыОбмена.ПараметрыКонвертации, Параметры.ОбъектМодифицирован);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_ПоступлениеДопРасходов" Тогда 
		ОтложеннаяОбработка_ПоступлениеДопРасходов(
			Параметры.Объект, Параметры.КомпонентыОбмена.ПараметрыКонвертации, Параметры.ОбъектМодифицирован);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_ПоступлениеИзПереработки" Тогда 
		ОтложеннаяОбработка_ПоступлениеИзПереработки(
			Параметры.Объект, Параметры.КомпонентыОбмена.ПараметрыКонвертации, Параметры.ОбъектМодифицирован);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_Производство" Тогда 
		ОтложеннаяОбработка_Производство(
			Параметры.Объект, Параметры.КомпонентыОбмена.ПараметрыКонвертации, Параметры.ОбъектМодифицирован);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_ПТиУ" Тогда 
		ОтложеннаяОбработка_ПТиУ(
			Параметры.Объект, Параметры.ОбъектМодифицирован);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_РКО" Тогда 
		ОтложеннаяОбработка_РКО(
			Параметры.Объект, Параметры.КомпонентыОбмена.ПараметрыКонвертации, Параметры.ОбъектМодифицирован);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_РТиУ" Тогда 
		ОтложеннаяОбработка_РТиУ(
			Параметры.Объект, Параметры.КомпонентыОбмена.ПараметрыКонвертации, Параметры.ОбъектМодифицирован);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_СБДС" Тогда 
		ОтложеннаяОбработка_СБДС(
			Параметры.Объект, Параметры.КомпонентыОбмена.ПараметрыКонвертации, Параметры.ОбъектМодифицирован);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_СборкаТоваров" Тогда 
		ОтложеннаяОбработка_СборкаТоваров(
			Параметры.Объект, Параметры.КомпонентыОбмена.ПараметрыКонвертации, Параметры.ОбъектМодифицирован);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_Склады" Тогда 
		ОтложеннаяОбработка_Склады(
			Параметры.Объект);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_СписаниеТоваров" Тогда 
		ОтложеннаяОбработка_СписаниеТоваров(
			Параметры.Объект, Параметры.КомпонентыОбмена.ПараметрыКонвертации, Параметры.ОбъектМодифицирован);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_СчетФактураВыданный" Тогда 
		ОтложеннаяОбработка_СчетФактураВыданный(
			Параметры.Объект, Параметры.ОбъектМодифицирован, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_СчетФактураПолученный" Тогда 
		ОтложеннаяОбработка_СчетФактураПолученный(
			Параметры.Объект, Параметры.ОбъектМодифицирован, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_ТаможеннаяДекларация" Тогда 
		ОтложеннаяОбработка_ТаможеннаяДекларация(
			Параметры.Объект, Параметры.КомпонентыОбмена.ПараметрыКонвертации, Параметры.ОбъектМодифицирован);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_ТребованиеНакладная" Тогда 
		ОтложеннаяОбработка_ТребованиеНакладная(
			Параметры.Объект, Параметры.КомпонентыОбмена.ПараметрыКонвертации, Параметры.ОбъектМодифицирован);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_ЭСФ" Тогда 
		ОтложеннаяОбработка_ЭСФ(
			Параметры.Объект, Параметры.КомпонентыОбмена.ПараметрыКонвертации, Параметры.ОбъектМодифицирован);
	КонецЕсли;
КонецПроцедуры
// Процедура-обертка, выполняет запуск указанной в параметрах функции модуля менеджера обмена через формат.
//
// Параметры:
//  ИмяФункции - строка.
//  СтруктураПараметров - структура, содержащая передаваемые параметры.
Функция ВыполнитьФункциюМодуляМенеджера(ИмяФункции, Параметры) Экспорт
	Если ИмяФункции = "ПОД_Документ_ВозвратТоваровОтПокупателя_Отправка_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_ВозвратТоваровОтПокупателя_Отправка_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Документ_ВозвратТоваровПоставщику_Отправка_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_ВозвратТоваровПоставщику_Отправка_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Документ_ОприходованиеТоваров_Отправка_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_ОприходованиеТоваров_Отправка_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Документ_ОстаткиБезналичныхДенежныхСредств_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_ОстаткиБезналичныхДенежныхСредств_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Документ_ОстаткиЗадолженностиПодотчетныхЛиц_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_ОстаткиЗадолженностиПодотчетныхЛиц_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Документ_ОстаткиКредитыЗаймы_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_ОстаткиКредитыЗаймы_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Документ_ОстаткиНаличныхДенежныхСредств_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_ОстаткиНаличныхДенежныхСредств_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Документ_ОстаткиПерерасходаПодотчетныхЛиц_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_ОстаткиПерерасходаПодотчетныхЛиц_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Документ_ОстаткиРасчетыСПокупателямиАвансы_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_ОстаткиРасчетыСПокупателямиАвансы_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Документ_ОстаткиРасчетыСПокупателямиДолги_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_ОстаткиРасчетыСПокупателямиДолги_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Документ_ОстаткиРасчетыСПоставщикамиАвансы_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_ОстаткиРасчетыСПоставщикамиАвансы_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Документ_ОстаткиРасчетыСПоставщикамиДолги_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_ОстаткиРасчетыСПоставщикамиДолги_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Документ_ОстаткиСобственныхТМЦ_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_ОстаткиСобственныхТМЦ_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Документ_ОстаткиТараПереданная_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_ОстаткиТараПереданная_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Документ_ОстаткиТараПринятая_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_ОстаткиТараПринятая_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Документ_ОстаткиТоваровПереданныхНаКомиссию_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_ОстаткиТоваровПереданныхНаКомиссию_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Документ_ОстаткиТоваровПринятыхНаКомиссию_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_ОстаткиТоваровПринятыхНаКомиссию_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Документ_ПеремещениеТоваров_Отправка_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_ПеремещениеТоваров_Отправка_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Документ_ПКО_Отправка_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_ПКО_Отправка_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Документ_ПОПБДС_Отправка_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_ПОПБДС_Отправка_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Документ_ПОСБДС_Отправка_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_ПОСБДС_Отправка_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Документ_ПоступлениеТоваровУслуг_Отправка_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_ПоступлениеТоваровУслуг_Отправка_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Документ_ПРС_Отправка_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_ПРС_Отправка_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Документ_РеализацияТоваровУслуг_Отправка_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_РеализацияТоваровУслуг_Отправка_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Документ_РКО_Отправка_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_РКО_Отправка_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Документ_СписаниеТоваров_Отправка_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_СписаниеТоваров_Отправка_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Документ_СРС_Отправка_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_СРС_Отправка_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Документ_ТаможеннаяДекларация_Отправка_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_ТаможеннаяДекларация_Отправка_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Документ_УстановкаЦенНоменклатуры_Отправка_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_УстановкаЦенНоменклатуры_Отправка_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Справочник_Банки_Отправка_ВыборкаДанных" Тогда 
		Возврат ПОД_Справочник_Банки_Отправка_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	КонецЕсли;
КонецФункции

#КонецОбласти
