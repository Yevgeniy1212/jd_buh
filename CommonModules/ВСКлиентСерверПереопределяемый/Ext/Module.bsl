////////////////////////////////////////////////////////////////////////////////
// Подсистема "Базовая функциональность".
// Клиентские и серверные процедуры и функции общего назначения:
// - для поддержки формирования печатных форм;
// - для работы с файлами;
// - для работы с управляемыми формами; 
// - для работы с почтовыми адресами;
// - для работы с отборами динамических списков;
// - прочее.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// Функции для работы с отборами и параметрами динамических списков.
//

// Найти элемент или группу отбора по заданному имени поля или представлению.
//
// Параметры:
//  ОбластьПоиска - контейнер с элементами и группами отбора, например.
//                  Список.Отбор или группа в отборе.
//  ИмяПоля       - Строка - имя поля компоновки (не используется для групп).
//  Представление - Строка - представление поля компоновки.
//
Функция НайтиЭлементыИГруппыОтбора(Знач ОбластьПоиска,
									Знач ИмяПоля = Неопределено,
									Знач Представление = Неопределено) Экспорт
	
		
	Возврат ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(ОбластьПоиска,ИмяПоля, Представление) ;
	
КонецФункции

// Добавить группу отбора в коллекцию КоллекцияЭлементов.
//
// Параметры:
//  КоллекцияЭлементов - контейнер с элементами и группами отбора, например.
//                      Список.Отбор.Элементы или группа в отборе.
//  ТипГруппы          - ТипГруппыЭлементовОтбораКомпоновкиДанных - тип группы.
//  Представление      - Строка - представление группы.
//
Функция СоздатьГруппуЭлементовОтбора(Знач КоллекцияЭлементов, Представление, ТипГруппы) Экспорт
		
	Возврат ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(КоллекцияЭлементов, Представление, ТипГруппы);
	
КонецФункции

// Изменить элемент отбора с заданным именем поля или представлением.
//
// Параметры:
//  ИмяПоля                 - Строка - имя поля компоновки данных (заполняется всегда).
//  Представление           - Строка - представление элемента компоновки данных.
//  ПравоеЗначение          - произвольный - сравниваемое значение.
//  ВидСравнения            - ВидСравненияКомпоновкиДанных - вид сравнения.
//  Использование           - Булево - использование элемента.
//  РежимОтображения        - РежимОтображенияЭлементаНастройкиКомпоновкиДанных - режим отображения.
//
Функция ИзменитьЭлементыОтбора(ОбластьПоиска,
								Знач ИмяПоля = Неопределено,
								Знач Представление = Неопределено,
								Знач ПравоеЗначение = Неопределено,
								Знач ВидСравнения = Неопределено,
								Знач Использование = Неопределено,
								Знач РежимОтображения = Неопределено,
								Знач ИдентификаторПользовательскойНастройки = Неопределено) Экспорт
	
								
	МассивЭлементов = ОбщегоНазначенияКлиентСервер.ИзменитьЭлементыОтбора(ИмяПоля, Представление,
								 ПравоеЗначение,
								 ВидСравнения,
								 Использование,
								 РежимОтображения,
								ИдентификаторПользовательскойНастройки);
	
	Возврат МассивЭлементов.Количество();
	
КонецФункции

// Добавить элемент компоновки в контейнер элементов компоновки.
//
// Параметры:
//  ОбластьДобавления - контейнер с элементами и группами отбора, например.
//                  Список.Отбор или группа в отборе.
//  ИмяПоля                 - Строка - имя поля компоновки данных (заполняется всегда).
//  ПравоеЗначение          - произвольный - сравниваемое значение.
//  ВидСравнения            - ВидСравненияКомпоновкиДанных - вид сравнения.
//  Представление           - Строка - представление элемента компоновки данных.
//  Использование           - Булево - использование элемента.
//  РежимОтображения        - РежимОтображенияЭлементаНастройкиКомпоновкиДанных - режим отображения.
//  ИдентификаторПользовательскойНастройки - Строка - см. ОтборКомпоновкиДанных.ИдентификаторПользовательскойНастройки
//                                                    в синтакс-помощнике.
//
Функция ДобавитьЭлементКомпоновки(ОбластьДобавления,
									Знач ИмяПоля,
									Знач ВидСравнения,
									Знач ПравоеЗначение = Неопределено,
									Знач Представление  = Неопределено,
									Знач Использование  = Неопределено,
									знач РежимОтображения = Неопределено,
									знач ИдентификаторПользовательскойНастройки = Неопределено) Экспорт
	
	Возврат ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ОбластьДобавления,
									ИмяПоля,
									ВидСравнения,
									ПравоеЗначение,
									Представление,
									Использование,
									РежимОтображения,
									ИдентификаторПользовательскойНастройки);
	
КонецФункции

// Добавить или заменить существующий элемент отбора.
//
// Параметры:
//  ОбластьПоискаДобавления - контейнер с элементами и группами отбора, например.
//                  Список.Отбор или группа в отборе.
//  ИмяПоля                 - Строка - имя поля компоновки данных (заполняется всегда).
//  ПравоеЗначение          - произвольный - сравниваемое значение.
//  ВидСравнения            - ВидСравненияКомпоновкиДанных - вид сравнения.
//  Представление           - Строка - представление элемента компоновки данных.
//  Использование           - Булево - использование элемента.
//  РежимОтображения        - РежимОтображенияЭлементаНастройкиКомпоновкиДанных - режим отображения.
//  ИдентификаторПользовательскойНастройки - Строка - см. ОтборКомпоновкиДанных.ИдентификаторПользовательскойНастройки
//                                                    в синтакс-помощнике.
//
Процедура УстановитьЭлементОтбора(ОбластьПоискаДобавления,
								Знач ИмяПоля,
								Знач ПравоеЗначение = Неопределено,
								Знач ВидСравнения = Неопределено,
								Знач Представление = Неопределено,
								Знач Использование = Неопределено,
								Знач РежимОтображения = Неопределено,
								Знач ИдентификаторПользовательскойНастройки = Неопределено) Экспорт
	
								
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ОбластьПоискаДобавления,
								ИмяПоля,
								ПравоеЗначение,
								ВидСравнения,
								Представление,
								Использование,
								РежимОтображения,
								ИдентификаторПользовательскойНастройки);
	
КонецПроцедуры

// Добавить или заменить существующий элемент отбора динамического списка.
//
// Параметры:
//   ДинамическийСписок - ДинамическийСписок - Список, в котором требуется установить отбор.
//   ИмяПоля            - Строка - Поле, по которому необходимо установить отбор.
//   ПравоеЗначение     - Произвольный - Значение отбора.
//       Необязательный. Значение по умолчанию: Неопределено.
//       Внимание! Если передать Неопределено, то значение не будет изменено.
//   ВидСравнения  - ВидСравненияКомпоновкиДанных - Условие отбора.
//   Представление - Строка - Представление элемента компоновки данных.
//       Необязательный. Значение по умолчанию: Неопределено.
//       Если указано, то выводится только флажок использования с указанным представлением (значение не выводится).
//       Для очистки (чтобы значение снова выводилось) следует передать пустую строку.
//   Использование - Булево - Флажок использования этого отбора.
//       Необязательный. Значение по умолчанию: Неопределено.
//   РежимОтображения - РежимОтображенияЭлементаНастройкиКомпоновкиДанных - Способ отображения этого отбора
//                                                                          пользователю.
//       * РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ - В группе быстрых настроек над списком.
//       * РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный       - В настройка списка (в подменю Еще).
//       * РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный   - Запретить пользователю менять этот отбор.
//   ИдентификаторПользовательскойНастройки - Строка - Уникальный идентификатор этого отбора.
//       Используется для связи с пользовательскими настройками.
//
// См. также:
//   Одноименные свойства объекта "ЭлементОтбораКомпоновкиДанных" в синтакс-помощнике.
//
Процедура УстановитьЭлементОтбораДинамическогоСписка(ДинамическийСписок, ИмяПоля,
	ПравоеЗначение = Неопределено,
	ВидСравнения = Неопределено,
	Представление = Неопределено,
	Использование = Неопределено,
	РежимОтображения = Неопределено,
	ИдентификаторПользовательскойНастройки = Неопределено) Экспорт
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ДинамическийСписок, ИмяПоля,
		ПравоеЗначение,
		ВидСравнения,
		Представление,
		Использование,
		РежимОтображения,
		ИдентификаторПользовательскойНастройки);
	
		
КонецПроцедуры

// Установить или обновить значение параметра ИмяПараметра динамического списка Список.
//
// Параметры:
//  Список          - ДинамическийСписок - реквизит формы, для которого требуется установить параметр.
//  ИмяПараметра    - Строка             - имя параметра динамического списка.
//  Значение        - Произвольный        - новое значение параметра.
//  Использование   - Булево             - признак использования параметра.
//
Процедура УстановитьПараметрДинамическогоСписка(Список, ИмяПараметра, Значение, Использование = Истина) Экспорт
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список,
			ИмяПараметра, Значение, Использование);
	
КонецПроцедуры

Функция ТипПодразделенияОрганизаций() Экспорт
	
	Возврат Тип("СправочникСсылка.ПодразделенияОрганизаций");
	//УПК
	//Возврат Тип("СправочникСсылка.СтруктураПредприятия");
	
КонецФункции

Функция ТипКонтрагент() Экспорт
	
	Возврат Тип("СправочникСсылка.Контрагенты");
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Функции для работы с управляемыми формами.
//

// Выполняет поиск элемента отбора в коллекции по заданному представлению.
//
// Параметры:
//  КоллекцияЭлементов - контейнер с элементами и группами отбора, например.
//                      Список.Отбор.Элементы или группа в отборе.
//  Представление строка - представление группы.
// 
Функция НайтиЭлементОтбораПоПредставлению(КоллекцияЭлементов, Представление) Экспорт
	
	Возврат ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(КоллекцияЭлементов, Представление);
	
КонецФункции

Функция ИмяСобытияЗаписьСНТ() Экспорт
	Возврат СНТКлиентСервер.ИмяСобытияЗаписьСНТ();
КонецФункции

#КонецОбласти

#Область ВзаимодействияКлиентСервер

// Определяет отбор динамического списка в зависимости от наличия режима совместимости.
//
// Параметры:
//  Список  - ДинамическийСписок - список, для которого надо определить отбор.
//
// Возвращаемое значение:
//   Отбор   - требуемый отбор.
//
Функция ОтборДинамическогоСписка(Список) Экспорт

	Возврат ВзаимодействияКлиентСервер.ОтборДинамическогоСписка(Список);

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыФункции

Функция ПолучитьСоответствиеТипДокументаВидДвижения() Экспорт 
	
	СоответствиеТипДокументаВидДвижения = Новый Соответствие;
	СоответствиеТипДокументаВидДвижения.Вставить(Тип("ДокументСсылка.ГТДИмпорт")									, "Приход");
	СоответствиеТипДокументаВидДвижения.Вставить(Тип("ДокументСсылка.ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов"), "Приход");
	СоответствиеТипДокументаВидДвижения.Вставить(Тип("ДокументСсылка.ОтчетПроизводстваЗаСмену")						, "Приход");
	СоответствиеТипДокументаВидДвижения.Вставить(Тип("ДокументСсылка.ОприходованиеТоваров")							, "Приход");
	СоответствиеТипДокументаВидДвижения.Вставить(Тип("ДокументСсылка.ПоступлениеТоваровУслуг")						, "Приход");
	
	СоответствиеТипДокументаВидДвижения.Вставить(Тип("ДокументСсылка.ПеремещениеТоваров")		, "РасходПриход");
	СоответствиеТипДокументаВидДвижения.Вставить(Тип("ДокументСсылка.КомплектацияНоменклатуры")	, "РасходПриход");
	СоответствиеТипДокументаВидДвижения.Вставить(Тип("ДокументСсылка.ПоступлениеИзПереработки")	, "РасходПриход");
	СоответствиеТипДокументаВидДвижения.Вставить(Тип("ДокументСсылка.РеализацияТоваровУслуг")	, "РасходПриход");
	
	СоответствиеТипДокументаВидДвижения.Вставить(Тип("ДокументСсылка.ЭСФ"), "ЭСФ");
	
	СоответствиеТипДокументаВидДвижения.Вставить(Тип("ДокументСсылка.СписаниеТоваров")		, "Расход");
	СоответствиеТипДокументаВидДвижения.Вставить(Тип("ДокументСсылка.ТребованиеНакладная")	, "Расход");
	
	СоответствиеТипДокументаВидДвижения.Вставить(Тип("ДокументСсылка.СНТ")	, "Расход");
	
	Возврат СоответствиеТипДокументаВидДвижения;
	
КонецФункции	

Функция ПолучитьСписокДокументовОснованияДляЭДВС(ТипФормыВС) Экспорт
	
	// Получить список документов ЭДВС по типу формы.
	
	ДокументыВыбора = Новый СписокЗначений;
	
	Если ТипФормыВС = ПредопределенноеЗначение("Перечисление.ТипыФормВС.ДекларацияНаТовары") Или ТипФормыВС = ПредопределенноеЗначение("Перечисление.ТипыФормВС.ДетализацияИмпорта") Тогда
		ДокументыВыбора.Добавить("ГТДИмпорт"               , НСтр("ru = 'ГТД по импорту'"));
		ДокументыВыбора.Добавить("ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов", НСтр("ru = 'Заявление о ввозе товаров и уплате косвенных налогов'"));
	ИначеЕсли ТипФормыВС = ПредопределенноеЗначение("Перечисление.ТипыФормВС.Производство") Тогда
		ДокументыВыбора.Добавить("ОтчетПроизводстваЗаСмену", НСтр("ru = 'Отчет производства за смену'"));
		ДокументыВыбора.Добавить("ПоступлениеИзПереработки", НСтр("ru = 'Поступление из переработки'"));
	ИначеЕсли ТипФормыВС = ПредопределенноеЗначение("Перечисление.ТипыФормВС.Детализация") Тогда
		ДокументыВыбора.Добавить("КомплектацияНоменклатуры", НСтр("ru = 'Комплектация ТМЗ'"));
	ИначеЕсли ТипФормыВС = ПредопределенноеЗначение("Перечисление.ТипыФормВС.ВнутреннееПеремещение") Тогда
		ДокументыВыбора.Добавить("ПеремещениеТоваров"      , НСтр("ru = 'Перемещение ТМЗ'"));
		ДокументыВыбора.Добавить("ЭСФ"                     , НСтр("ru = 'Электронный счет-фактура (полученные)'"));
		ДокументыВыбора.Добавить("РеализацияТоваровУслуг"  , НСтр("ru = 'Реализация ТМЗ и услуг'"));
	ИначеЕсли ТипФормыВС = ПредопределенноеЗначение("Перечисление.ТипыФормВС.Остатки") Или ТипФормыВС = ПредопределенноеЗначение("Перечисление.ТипыФормВС.КорректировкаОстатков") Тогда
		ДокументыВыбора.Добавить("ОприходованиеТоваров"    , НСтр("ru = 'Оприходование ТМЗ'"));
		ДокументыВыбора.Добавить("ПоступлениеТоваровУслуг" , НСтр("ru = 'Поступление ТМЗ и услуг'"));
	ИначеЕсли ТипФормыВС = ПредопределенноеЗначение("Перечисление.ТипыФормВС.Списание") Тогда 
		ДокументыВыбора.Добавить("СписаниеТоваров"         , НСтр("ru = 'Списание ТМЗ'"));
		ДокументыВыбора.Добавить("ТребованиеНакладная"     , НСтр("ru = 'Требование-накладная'"));
		ДокументыВыбора.Добавить("РеализацияТоваровУслуг"  , НСтр("ru = 'Реализация ТМЗ и услуг'"));
	ИначеЕсли ТипФормыВС = ПредопределенноеЗначение("Перечисление.ТипыФормВС.ПеремещениеМеждуФилиалами") Тогда
		ДокументыВыбора.Добавить("РеализацияТоваровУслуг"  , НСтр("ru = 'Реализация ТМЗ и услуг'"));
	ИначеЕсли ТипФормыВС = ПредопределенноеЗначение("Перечисление.ТипыФормВС.ПустаяСсылка") Тогда
		ДокументыВыбора.Добавить("ГТДИмпорт"               , НСтр("ru = 'ГТД по импорту'"));
		ДокументыВыбора.Добавить("ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов", НСтр("ru = 'Заявление о ввозе товаров и уплате косвенных налогов'"));
		ДокументыВыбора.Добавить("ОтчетПроизводстваЗаСмену", НСтр("ru = 'Отчет производства за смену'"));
		ДокументыВыбора.Добавить("ПоступлениеИзПереработки", НСтр("ru = 'Поступление из переработки'"));
		ДокументыВыбора.Добавить("КомплектацияНоменклатуры", НСтр("ru = 'Комплектация ТМЗ'"));
		ДокументыВыбора.Добавить("ПеремещениеТоваров"      , НСтр("ru = 'Перемещение ТМЗ'"));
		ДокументыВыбора.Добавить("ОприходованиеТоваров"    , НСтр("ru = 'Оприходование ТМЗ'"));
		ДокументыВыбора.Добавить("ПоступлениеТоваровУслуг" , НСтр("ru = 'Поступление ТМЗ и услуг'"));
		ДокументыВыбора.Добавить("СписаниеТоваров"         , НСтр("ru = 'Списание ТМЗ'"));
		ДокументыВыбора.Добавить("ТребованиеНакладная"     , НСтр("ru = 'Требование-накладная'"));
	КонецЕсли;
	
	Возврат ДокументыВыбора;
	
КонецФункции

Функция ПолучитьПустуюСсылкуОрганизации() Экспорт
	Возврат ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка");	
КонецФункции

Функция ПолучитьПустуюСсылкуПодразделения() Экспорт
	
	СсылкаПодразделение = ПредопределенноеЗначение("Справочник.ПодразделенияОрганизаций.ПустаяСсылка");
	//УПК
	//СсылкаПодразделение = ПредопределенноеЗначение("Справочник.СтруктураПредприятия.ПустаяСсылка");
	Возврат СсылкаПодразделение;
	
КонецФункции

Функция ИмяРеквизитаКодАльфа2СправочникаКлассификаторСтранМира() Экспорт
	
	Возврат "КодАльфа2";
	
КонецФункции

Функция ИмяСправочникаКлассификаторСтранМира() Экспорт
	
	Возврат "КлассификаторСтранМира";
	
КонецФункции

// См. ВСКлиентСервер.КонтейнерМетодов().
Процедура КонтейнерМетодов(Контейнер, ИспользоватьВнешнююОбработку) Экспорт
	
	
	
КонецПроцедуры

Функция ИмяВладельцаПодразделенияОрганизации() Экспорт
	//БК 3
	Возврат "Владелец";
	
КонецФункции


// Изменённый дубликат функции ТолькоЦифрыВСтроке
// Проверяет, содержит ли строка только цифры.
//
// Параметры:
//  Значение - Строка - проверяемая строка.
//  ПробелыЗапрещены - Булево - если Ложь, то в строке допустимо наличие пробелов.
//
// Возвращаемое значение:
//   Булево - Истина - строка содержит только цифры или пустая, Ложь - строка содержит иные символы.
//
// Пример:
//  Результат = СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке("0123"); // Истина
//  Результат = СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке("0123abc"); // Ложь
//  Результат = СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке("01 2 3",, Ложь); // Истина
//
Функция ПроверитьТолькоЦифрыВСтроке(Знач Значение, Знач ПробелыЗапрещены = Истина) Экспорт
	
	Если ТипЗнч(Значение) <> Тип("Строка") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ПробелыЗапрещены Тогда
		Значение = СтрЗаменить(Значение, " ", "");
	КонецЕсли;
		
	Если СтрДлина(Значение) = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Если содержит только цифры, то в результате замен должна быть получена пустая строка.
	// Проверять при помощи ПустаяСтрока нельзя, так как в исходной строке могут быть пробельные символы.
	Возврат СтрДлина(
		СтрЗаменить( СтрЗаменить( СтрЗаменить( СтрЗаменить( СтрЗаменить(
		СтрЗаменить( СтрЗаменить( СтрЗаменить( СтрЗаменить( СтрЗаменить( 
			Значение, "0", ""), "1", ""), "2", ""), "3", ""), "4", ""), "5", ""), "6", ""), "7", ""), "8", ""), "9", "")) = 0;
	
КонецФункции

#КонецОбласти
