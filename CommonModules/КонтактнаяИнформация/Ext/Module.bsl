////////////////////////////////////////////////////////////////////////////////
// КонтактнаяИнформация: содержит алгоритмы работы с контактной информацией, 
//   исполняемые на сервере
//  
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Чтение и запись контактной информации

Процедура ПрочитатьКонтактнуюИнформацию(ИсходныйНаборЗаписей, ОбъектКИ) Экспорт
	
	Если ТипЗнч(ИсходныйНаборЗаписей) = Тип("ДанныеФормыСтруктураСКоллекцией") Тогда 
		НаборЗаписей = РегистрыСведений.КонтактнаяИнформация.СоздатьНаборЗаписей();
	Иначе 
		НаборЗаписей = ИсходныйНаборЗаписей;
	КонецЕсли;
	
	Если ТипЗнч(НаборЗаписей) <> Тип("РегистрСведенийНаборЗаписей.КонтактнаяИнформация") Тогда
		НаборЗаписей = РегистрыСведений.КонтактнаяИнформация.СоздатьНаборЗаписей();
	Иначе
		НаборЗаписей.Очистить();
	КонецЕсли; 
	
	НаборЗаписей.Отбор.Объект.Значение      = ОбъектКИ;
	НаборЗаписей.Отбор.Объект.Использование = Истина;
	НаборЗаписей.Прочитать();
	
	ТаблицаНабора = НаборЗаписей.Выгрузить();
	ТаблицаНабора.Сортировать("Тип ВОЗР, Вид ВОЗР");
	НаборЗаписей.Загрузить(ТаблицаНабора);
	
	МассивВидов = НаборЗаписей.ВыгрузитьКолонку("Вид");
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ВидОбъектаКонтактнойИнформации", КонтактнаяИнформацияКлиентСерверПовтИсп.ВидОбъектаКИ(ОбъектКИ));
	Запрос.УстановитьПараметр("МассивВидов"                   , МассивВидов);
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ВидыКонтактнойИнформации.Ссылка     КАК Вид,
	|	ВидыКонтактнойИнформации.Ссылка.Тип КАК Тип
	|ИЗ
	|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
	|ГДЕ
	|	ВидыКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = &ВидОбъектаКонтактнойИнформации
	|	И
	|	НЕ ВидыКонтактнойИнформации.Ссылка В (&МассивВидов)
	|";
	
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	ТаблицаЗапроса.Сортировать("Тип ВОЗР, Вид ВОЗР");
	
	Для Каждого СтрокаТаблицы Из ТаблицаЗапроса Цикл
		ЗаписьРегистра			= НаборЗаписей.Добавить();
		ЗаписьРегистра.Вид		= СтрокаТаблицы.Вид;
		ЗаписьРегистра.Тип		= СтрокаТаблицы.Тип;
		ЗаписьРегистра.Объект	= ОбъектКИ;
	КонецЦикла;

	Если ТипЗнч(ИсходныйНаборЗаписей) = Тип("ДанныеФормыСтруктураСКоллекцией") Тогда 
		ИсходныйНаборЗаписей.Загрузить(НаборЗаписей.Выгрузить());
	КонецЕсли;

КонецПроцедуры

Процедура ЗаписатьКонтактнуюИнформацию(ИсходныйНаборЗаписей, ОбъектКИ, Отказ) Экспорт

	НаборЗаписей = ИсходныйНаборЗаписей;
	Если ТипЗнч(ИсходныйНаборЗаписей) = Тип("ДанныеФормыСтруктураСКоллекцией") Тогда
		НаборЗаписей = РегистрыСведений.КонтактнаяИнформация.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Объект.Значение      = ОбъектКИ;
		НаборЗаписей.Отбор.Объект.Использование = Истина;
		
		ТаблицаНабораЗаписей = ИсходныйНаборЗаписей.Выгрузить();
		Если ТипЗнч(ОбъектКИ) = Тип("СправочникСсылка.КонтактныеЛица") Тогда 
			
			ЗначенияРеквизитовОбъекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОбъектКИ, "ОбъектВладелец, ВидКонтактногоЛица");
			Если ЗначенияРеквизитовОбъекта.ВидКонтактногоЛица = Перечисления.ВидыКонтактныхЛиц.ЛичныйКонтакт 
				И ЗначениеЗаполнено(ЗначенияРеквизитовОбъекта.ОбъектВладелец) Тогда 
				ТаблицаНабораЗаписей.ЗаполнитьЗначения(ЗначенияРеквизитовОбъекта.ОбъектВладелец, "ПользовательЛичногоКонтакта");
			КонецЕсли;
		КонецЕсли;
		
		НаборЗаписей.Загрузить(ТаблицаНабораЗаписей);
	КонецЕсли;
	
	Индекс = 0;
	Пока 1 = 1 Цикл
		
		Если Индекс > НаборЗаписей.Количество() - 1 Тогда
			Прервать;
		КонецЕсли; 
		
		Запись = НаборЗаписей[Индекс];
		
		Если НЕ ЗначениеЗаполнено(Запись.Представление) Тогда
			НаборЗаписей.Удалить(Запись);
			Продолжить;
		КонецЕсли;
		
		Запись.Объект = ОбъектКИ;
		
		Индекс = Индекс + 1;
		
	КонецЦикла;
	
	НаборЗаписей.Отбор.Объект.Значение      = ОбъектКИ;
	НаборЗаписей.Отбор.Объект.Использование = Истина;
	
	Попытка
		НаборЗаписей.Записать();
	Исключение
		ШаблонСообщения = НСтр("ru = 'Контактная информация для ""%1"" не записана. Причина: %2'");
		ОбщегоНазначения.СообщитьПользователю(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ОбъектКИ, КраткоеПредставлениеОшибки(ИнформацияОбОшибке())),
			ОбъектКИ,,,Отказ);
		Возврат;
	КонецПопытки;
	
	ПрочитатьКонтактнуюИнформацию(ИсходныйНаборЗаписей, ОбъектКИ)
	
КонецПроцедуры

// Получение значений из контактной информации

// Функция находит актуальное значение адреса в контакной информации.
//
// Параметры:
//  Объект - СправочникСсылка, объект контактной информации
//  ТипАдреса - тип контактной информации
//
// Возвращаемое значение
//  Строка - представление найденного адреса
//
Функция ПолучитьАдресИзКонтактнойИнформации(Объект, ТипАдреса = "") Экспорт

	Если НЕ ЗначениеЗаполнено(Объект) Тогда
		Возврат "";
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТипАдреса) Тогда
		Возврат "";
	КонецЕсли;
	
	ОбъектКИ = Объект;

	Если ТипАдреса="Фактический" Тогда
		Начало = "Факт";
	ИначеЕсли ТипАдреса="Регистрации"
		  ИЛИ ТипАдреса="Юридический" Тогда
		Начало = "Юр";
	Иначе
		Возврат "";
	КонецЕсли;
	
	Если ТипЗнч(Объект) = Тип("СправочникСсылка.Организации") Тогда
		
		Если Объект.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
			
			ОбъектКИ = Объект.ИндивидуальныйПредприниматель;
			
			Окончание = "ФизЛица";
			
		Иначе
			
			Окончание = "Организации";
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
		
		Окончание = "Организации";
		
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.Контрагенты") Тогда
		
		Окончание = "Контрагента";
		
	КонецЕсли;
	
	ВидАдреса = Справочники.ВидыКонтактнойИнформации[Начало+"Адрес"+Окончание];

	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Объект", ОбъектКИ);
	Запрос.УстановитьПараметр("Тип"   , Перечисления.ТипыКонтактнойИнформации.Адрес);
	Запрос.УстановитьПараметр("Вид"   , ВидАдреса);
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ВЫРАЗИТЬ(КонтактнаяИнформация.Представление КАК СТРОКА(1000)) КАК Представление 
	|ИЗ
	|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	КонтактнаяИнформация.Объект = &Объект
	|	И
	|	КонтактнаяИнформация.Тип = &Тип
	|	И
	|	КонтактнаяИнформация.Вид = &Вид
	|";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат "";
	Иначе
		Возврат РезультатЗапроса.Выгрузить()[0].Представление;
	КонецЕсли;

КонецФункции

// Функция находит актуальное значение телефона в контакной информации.
//
// Параметры:
//  Объект - СправочникСсылка, объект контактной информации
//
// Возвращаемое значение
//  Строка - представление найденного телефона
//
Функция ПолучитьТелефонИзКонтактнойИнформации(Объект) Экспорт

	Если ТипЗнч(Объект) = Тип("СправочникСсылка.Организации") ИЛИ ТипЗнч(Объект) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
		Окончание = "Организации";
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.Контрагенты") Тогда
		Окончание = "Контрагента";
	КонецЕсли;

	ВидТелефона = Справочники.ВидыКонтактнойИнформации["Телефон" + Окончание];

	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Объект", Объект);
	Запрос.УстановитьПараметр("Тип"   , Перечисления.ТипыКонтактнойИнформации.Телефон);
	Запрос.УстановитьПараметр("Вид"   , ВидТелефона);
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ВЫРАЗИТЬ(КонтактнаяИнформация.Представление КАК СТРОКА(1000)) КАК Представление
	|ИЗ
	|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	КонтактнаяИнформация.Объект = &Объект
	|	И
	|	КонтактнаяИнформация.Тип = &Тип
	|	И
	|	КонтактнаяИнформация.Вид = &Вид
	|";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат "";
	Иначе
		Возврат РезультатЗапроса.Выгрузить()[0].Представление;
	КонецЕсли;

КонецФункции

// Процедуры преобазования значений

//Представляет адрес в "удобочитаемом" виде	для отражения в формах
//
//	Параметры: 
//		АдреснаяСтрока (строка), адрес представление которого нужно вернуть.
//		Способ - способ представления адреса (если=1, то возвращает представление адреса без индекса)
//
//	Возвращаемое значение:
//		строку - представление адреса
//
//	Описание:
//		Предназначена для формирования адресной строки в "удобочитаемом" виде
//		для отражения в формах.
//
Функция ПредставлениеАдреса(Знач АдреснаяСтрока, Способ = 0, ПредставлениеПустого = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(СтрЗаменить(АдреснаяСтрока, ",", "")) Тогда
		Возврат ?(ПредставлениеПустого = Неопределено, НСтр("ru = '<<Адрес не задан>>'"), ПредставлениеПустого)
	КонецЕсли;
	
	СтруктураАдрес = КонтактнаяИнформацияКлиентСервер.РазложитьАдрес(АдреснаяСтрока);
	
	Адрес = Новый Массив;
	Если ЗначениеЗаполнено(СтруктураАдрес.Страна) Тогда
		СсылкаНаСтрану = Справочники.КлассификаторСтранМира.НайтиПоКоду(СтруктураАдрес.Страна);
		Если Не СсылкаНаСтрану.Пустая() Тогда
			Адрес.Добавить(СсылкаНаСтрану.Наименование);
		Иначе
			Адрес.Добавить(СтруктураАдрес.Страна);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураАдрес.Индекс) И Способ <> 1 тогда
		Если Адрес.Количество() = 0 Тогда
			Адрес.Добавить("");
		КонецЕсли;
		Адрес[0] = Адрес[0] + " " + СтруктураАдрес.Индекс;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураАдрес.Регион) Тогда
		Адрес.Добавить(СтруктураАдрес.Регион);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураАдрес.Район) Тогда
		Адрес.Добавить(СтруктураАдрес.Район);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураАдрес.Город) Тогда
		Адрес.Добавить(СтруктураАдрес.Город);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураАдрес.НаселенныйПункт) Тогда
		Адрес.Добавить(СтруктураАдрес.НаселенныйПункт);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураАдрес.Улица) Тогда
		Адрес.Добавить(СтруктураАдрес.Улица);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураАдрес.Дом) Тогда
		Адрес.Добавить(СтрШаблон(НСтр("ru = 'д.%1'"), СтруктураАдрес.Дом));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураАдрес.Корпус) Тогда
		Адрес.Добавить(СтрШаблон(НСтр("ru = 'корп. %1'"), СтруктураАдрес.Корпус));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураАдрес.Квартира) Тогда
		Адрес.Добавить(СтрШаблон(НСтр("ru = 'кв. %1'"), СтруктураАдрес.Квартира));
	КонецЕсли;
	
	Возврат СтрСоединить(Адрес, ", ")
	
КонецФункции

// Возвращает или пустую структуру-заготовку, или заполненную структуру по коду
Функция СписокРеквизитовАдреса(Код = Неопределено) Экспорт
	
	// Первый уровень - внутренние идентификаторы
	Результат = КонтактнаяИнформацияКлиентСервер.ПустойСписокРеквизитовАдреса();
	
	Если Код = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	Запрос = АдресныйКлассификатор.ЗапросСписокРеквизитовПолногоАдресаКАТО();
	
	Запрос.УстановитьПараметр("Код", Код);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат.Улица.Значение          = КонтактнаяИнформацияКлиентСервер.ПолноеНаименование(Выборка.УлицыНаименование, Выборка.УлицыСокращение);
		Результат.Улица.КодКлассификатора = Выборка.УлицыКод;
		Результат.Улица.Наименование      = Выборка.УлицыНаименование;
		Результат.Улица.Сокращение        = Выборка.УлицыСокращение;
		
		Результат.НаселенныйПункт.Значение          = КонтактнаяИнформацияКлиентСервер.ПолноеНаименование(Выборка.НаселенныеПунктыНаименование, Выборка.НаселенныеПунктыСокращение);
		Результат.НаселенныйПункт.КодКлассификатора = Выборка.НаселенныеПунктыКод;
		Результат.НаселенныйПункт.Наименование      = Выборка.НаселенныеПунктыНаименование;
		Результат.НаселенныйПункт.Сокращение        = Выборка.НаселенныеПунктыСокращение;
		
		Результат.Город.Значение          = КонтактнаяИнформацияКлиентСервер.ПолноеНаименование(Выборка.ГородаНаименование, Выборка.ГородаСокращение);
		Результат.Город.КодКлассификатора = Выборка.ГородаКод;
		Результат.Город.Наименование      = Выборка.ГородаНаименование;
		Результат.Город.Сокращение        = Выборка.ГородаСокращение;
		
		Результат.Район.Значение          = КонтактнаяИнформацияКлиентСервер.ПолноеНаименование(Выборка.РайоныНаименование, Выборка.РайоныСокращение);
		Результат.Район.КодКлассификатора = Выборка.РайоныКод;
		Результат.Район.Наименование      = Выборка.РайоныНаименование;
		Результат.Район.Сокращение        = Выборка.РайоныСокращение;
		
		Результат.Область.Значение          = КонтактнаяИнформацияКлиентСервер.ПолноеНаименование(Выборка.ОбластиНаименование, Выборка.ОбластиСокращение);
		Результат.Область.КодКлассификатора = Выборка.ОбластиКод;
		Результат.Область.Наименование      = Выборка.ОбластиНаименование;
		Результат.Область.Сокращение        = Выборка.ОбластиСокращение;
	КонецЕсли;
	Возврат Результат;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция ШаблоныТелефонныхНомеров() Экспорт
	
	Возврат Константы.ШаблоныТелефонныхНомеров.Получить().Получить();
	
КонецФункции

Функция МассивТиповКонтактнойИнформации() Экспорт
	
	Результат = Новый Массив;
	
	Для а = 0 По (Перечисления.ТипыКонтактнойИнформации.Количество()-1) Цикл
		Результат.Добавить(Перечисления.ТипыКонтактнойИнформации[а]);
	КонецЦикла; 

	Возврат Результат;
	
КонецФункции

Функция ПроверитьИПолучитьОбъектКИОрганизации(ОбъектКИ) Экспорт
	
	Результат = ОбъектКИ;
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОбъектКИ, "ЮрФизЛицо, ИндивидуальныйПредприниматель");
	Если ЗначенияРеквизитов.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
		Результат = ЗначенияРеквизитов.ИндивидуальныйПредприниматель;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции
