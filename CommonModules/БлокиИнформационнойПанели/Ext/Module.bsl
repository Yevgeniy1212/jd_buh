#Область ПрограммныйИнтерфейс

// Возвращает таблицу свойств предопределенных блоков
//
// Возвращаемое значени:
//   ТаблицаЗначений - описание полей см. в методе НоваяТаблицаБлоков()
//
Функция ПредопределенныеБлоки() Экспорт
	
	ТаблицаБлоков = НоваяТаблицаБлоков();
	
	ИспользуетсяРазделениеДанных = ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных()
		И ОбщегоНазначения.РазделениеВключено();
		
	МониторОсновныхПоказарелейДоступен = ПравоДоступа("Просмотр", Метаданные.ОбщиеФормы.МониторОсновныхПоказателей);
	// Монитор основных показателей
	Если ОстаткиДенежныхСредствДоступны() и МониторОсновныхПоказарелейДоступен Тогда
		ДобавитьОстаткиДенежныхСредств(ТаблицаБлоков);
	КонецЕсли;
	
	Если ПродажиДоступны() и МониторОсновныхПоказарелейДоступен  Тогда
		ДобавитьПродажи(ТаблицаБлоков);
	КонецЕсли;
	
	Если ПокупателиДоступны() и МониторОсновныхПоказарелейДоступен  Тогда
		ДобавитьПокупатели(ТаблицаБлоков);
	КонецЕсли;
	
	Если ПоставщикиДоступны() и МониторОсновныхПоказарелейДоступен  Тогда
		ДобавитьПоставщики(ТаблицаБлоков);
	КонецЕсли;	
	
	// БИП
	Если ОбработкаНовостейПовтИсп.РазрешенаРаботаСНовостямиТекущемуПользователю() Тогда
		ДобавитьНовости(ТаблицаБлоков);
	КонецЕсли;
	
	Если МетодическаяПоддержкаДоступна() Тогда
		ДобавитьМетодическаяПоддержка(ТаблицаБлоков);
	КонецЕсли;
	
	Возврат ТаблицаБлоков;
	
КонецФункции

#КонецОбласти

#Область ДанныеИнформационнойПанели


#Область ОстаткиДенежныхСредств

Процедура ДобавитьОстаткиДенежныхСредств(ТаблицаБлоков)
	
	Добавить(ТаблицаБлоков,
		БлокиИнформационнойПанелиКлиентСервер.ИмяБлокаОстаткиДенежныхСредств(),
		БлокиИнформационнойПанелиКлиентСервер.ТекстЗаголовкаОстаткиДенежныхСредств(),
		"БлокиИнформационнойПанели.ОстаткиДенежныхСредств",
		"БлокиИнформационнойПанели.ОбновитьОстаткиДенежныхСредств",
		СвойстваОстаткиДенежныхСредств());
	
КонецПроцедуры

Функция СвойстваОстаткиДенежныхСредств()
	
	// ВГраница = Количеству, т.к. последняя строка используется для итоговой записи
	ВГраница = БлокиИнформационнойПанелиКлиентСервер.КоличествоВалютныхОстатков();
	
	Свойства = "ОстаткиДенежныхСредств_Заголовок, "
					+ "ОстаткиДенежныхСредств_Касса, "
					+ "ОстаткиДенежныхСредств_Банк, "
					+ "ОстаткиДенежныхСредств_ИндексИтога";
	
	Для Индекс = 0 По ВГраница Цикл
		Свойства = Свойства + ", "
			+ БлокиИнформационнойПанелиКлиентСервер.СвойствоОстатокДенежныхСредств(Индекс);
	КонецЦикла;
	
	Возврат Свойства;
	
КонецФункции

// Обновляет данные блока
//
// Параметры:
//   Параметры - Структура
//     * Организация - СправочникСсылка.Организации - отбор по организации
//     * БыстроеОбновление - Булево - учитывать актуальность данных при обновлении
//
Процедура ОбновитьОстаткиДенежныхСредств(Параметры) Экспорт
	
	РазделыМонитора = Новый Массив;
	РазделыМонитора.Добавить(Перечисления.РазделыМонитораРуководителя.ОстаткиДенежныхСредств);
	
	ПараметрыЗаполнения = Новый Структура();
	ПараметрыЗаполнения.Вставить("Организация", Параметры.Организация);
	ПараметрыЗаполнения.Вставить("РазделыМонитора", РазделыМонитора);
	ПараметрыЗаполнения.Вставить("ПолучатьПрошлыйПериод", Ложь);
	
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено);
	
	УстановитьПривилегированныйРежим(Истина);
	Если Параметры.БыстроеОбновление Тогда
		МониторРуководителя.ОбновитьДанныеМонитораВФоне(ПараметрыЗаполнения, АдресХранилища);
	Иначе
		МониторРуководителя.ПерезаписатьДанныеМонитораВФоне(ПараметрыЗаполнения, АдресХранилища);
	КонецЕсли;
	
КонецПроцедуры

// Помещает во временное хранилище данные блока
//
// Параметры:
//   Параметры - Структура
//     * АдресХранилища - Строка - адрес хранилища результата
//     * Организация - СправочникСсылка.Организации - отбор по организации
//     * ВариантОкругления - Число - 1 - округлять до целых рублей, 1000 - до тысяч 
//     * Инициализация - Истина - заполнить только статическими данными
//
Процедура ОстаткиДенежныхСредств(Параметры) Экспорт
	
	Если Параметры.Инициализация Тогда
		Результат = Новый Структура;
		Результат.Вставить("ОстаткиДенежныхСредств_Заголовок",
			ЗаголовокБлока(БлокиИнформационнойПанелиКлиентСервер.ТекстЗаголовкаОстаткиДенежныхСредств()));
		ПоместитьВоВременноеХранилище(Результат, Параметры.АдресХранилища);
		Возврат;
	КонецЕсли;
	
	Результат = Новый Структура(СвойстваОстаткиДенежныхСредств());
	Результат.Вставить("ОстаткиДенежныхСредств_Заголовок",
		ЗаголовокБлока(БлокиИнформационнойПанелиКлиентСервер.ТекстЗаголовкаОстаткиДенежныхСредств()));
	
	ОстаткиДенежныхСредств = МониторРуководителя.ДанныеОстаткиДенежныхСредств(Параметры);
	
	//ИспользоватьВалютныйУчет = ПолучитьФункциональнуюОпцию("ИспользоватьВалютныйУчет");
	//Если ИспользоватьВалютныйУчет Тогда
		ВалютаПоУмолчанию = ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	//Иначе
	//	ВалютаПоУмолчанию = Неопределено;
	//КонецЕсли;
	
	// Остаток в кассе
	Касса = ПредставлениеОстаткаДенежныхСредств(ОстаткиДенежныхСредств.Касса, ВалютаПоУмолчанию);
	Результат.Вставить("ОстаткиДенежныхСредств_Касса", Касса);
	
	ВалютныеОстатки = ОстаткиДенежныхСредств.ВалютныеОстатки;
	
	ИндексСтроки = 0;
	//Если Не ИспользоватьВалютныйУчет Тогда
	//	
	//	// Остаток на рублевых счетах
	//	Банк = ПредставлениеОстаткаДенежныхСредств(ОстаткиДенежныхСредств.Банк, ВалютаПоУмолчанию);
		
	Если ВалютныеОстатки.Количество() <= БлокиИнформационнойПанелиКлиентСервер.КоличествоВалютныхОстатков() Тогда
		
		// Остаток на рублевых счетах
		Банк = ПредставлениеОстаткаДенежныхСредств(ОстаткиДенежныхСредств.Банк, ВалютаПоУмолчанию);
		
		// Остатки на валютных счетах с разбивкой по валютам
		Для Каждого СтрокаОстатка Из ВалютныеОстатки Цикл
			
			Остаток = ПредставлениеОстаткаДенежныхСредств(СтрокаОстатка.СуммаВВалюте, СтрокаОстатка.Валюта);
			Результат.Вставить(БлокиИнформационнойПанелиКлиентСервер.СвойствоОстатокДенежныхСредств(ИндексСтроки), Остаток);
			
			ИндексСтроки = ИндексСтроки + 1;
			
		КонецЦикла;
		
	Иначе
		
		// Группируем все остатки в одну строку
		Банк = ПредставлениеОстаткаДенежныхСредств(ОстаткиДенежныхСредств.Банк + ВалютныеОстатки.Итог("Сумма"), ВалютаПоУмолчанию);
		
	КонецЕсли;
	Результат.Вставить("ОстаткиДенежныхСредств_Банк", Банк);
	
	// Итого
	Итого = ПредставлениеОстаткаДенежныхСредств(ОстаткиДенежныхСредств.Итого, ВалютаПоУмолчанию, Истина);
	Результат.Вставить(БлокиИнформационнойПанелиКлиентСервер.СвойствоОстатокДенежныхСредств(ИндексСтроки), Итого);
	Результат.Вставить("ОстаткиДенежныхСредств_ИндексИтога", ИндексСтроки);
	
	ПоместитьВоВременноеХранилище(Результат, Параметры.АдресХранилища);
	
КонецПроцедуры

Функция ПредставлениеОстаткаДенежныхСредств(Остаток, Валюта, Выделить = Ложь)
	
	ФорматнаяСтрока = "ЧДЦ=; ЧН=0";
	
	Если ЗначениеЗаполнено(Валюта) Тогда
		СтроковоеПредставление = СтрШаблон("%1 %2", Формат(Остаток, ФорматнаяСтрока), Валюта);
	Иначе
		СтроковоеПредставление = Формат(Остаток, ФорматнаяСтрока);
	КонецЕсли;
	
	Шрифт      = ?(Выделить, Новый Шрифт(ШрифтыСтиля.ШрифтТекстаИнформационнойПанели,,, Истина), ШрифтыСтиля.ШрифтТекстаИнформационнойПанели);
	ЦветТекста = ?(Остаток >= 0, ЦветаСтиля.ЦветТекстаИнформационнойПанели, ЦветаСтиля.ВажноеСобытие);
	
	Возврат Новый ФорматированнаяСтрока(СтроковоеПредставление, Шрифт, ЦветТекста);
	
КонецФункции

Функция ОстаткиДенежныхСредствДоступны()
	
	// Блок доступен для пользователей, которым доступен отчет "Остатки денежных средств".
	// Сведения об остатках получаются из регистра "ДанныеМонитораРуководителя" в привилегированном режиме.
	Возврат ПравоДоступа("Использование", Метаданные.Отчеты.ОстаткиДенежныхСредств);
	
КонецФункции

#КонецОбласти

#Область Покупатели

Процедура ДобавитьПокупатели(ТаблицаБлоков)
	
	Добавить(ТаблицаБлоков,
		БлокиИнформационнойПанелиКлиентСервер.ИмяБлокаПокупатели(),
		БлокиИнформационнойПанелиКлиентСервер.ТекстЗаголовкаПокупатели(),
		"БлокиИнформационнойПанели.Покупатели",
		"БлокиИнформационнойПанели.ОбновитьПокупатели",
		СвойстваПокупатели());
	
КонецПроцедуры

Функция СвойстваПокупатели()
	
	Свойства = "Покупатели_Заголовок, Покупатели_НеоплаченныеСчета, "
					+ "Покупатели_Задолженность, Покупатели_ЗадолженностьОтклонение, "
					+ "Покупатели_ПросроченнаяЗадолженность, Покупатели_ПросроченнаяЗадолженностьОтклонение,"
					+ "Покупатели_ДоступностьРазделов";
	
	Возврат Свойства;
	
КонецФункции

// Обновляет данные блока
//
// Параметры:
//   Параметры - Структура
//     * Организация - СправочникСсылка.Организации - отбор по организации
//     * ПоказыватьСравнениеСПрошлымГодом - Булево - необходимость сравнения с показателями прошлого года
//     * БыстроеОбновление - Булево - учитывать актуальность данных при обновлении
//
Процедура ОбновитьПокупатели(Параметры) Экспорт
	
	РазделыМонитора = Новый Массив;
	РазделыМонитора.Добавить(Перечисления.РазделыМонитораРуководителя.ЗадолженностьПокупателей);
	РазделыМонитора.Добавить(Перечисления.РазделыМонитораРуководителя.НеоплаченныеСчетаПокупателям);
	
	Если ПравоДоступа("Чтение", Метаданные.Константы.СрокОплатыПокупателей) Тогда
		ЗаданСрокОплатыПокупателей = (Константы.СрокОплатыПокупателей.Получить() > 0);
		Если ЗаданСрокОплатыПокупателей Тогда
			РазделыМонитора.Добавить(Перечисления.РазделыМонитораРуководителя.ПросроченнаяЗадолженностьПокупателей);
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыЗаполнения = Новый Структура();
	ПараметрыЗаполнения.Вставить("Организация", Параметры.Организация);
	ПараметрыЗаполнения.Вставить("РазделыМонитора", РазделыМонитора);
	ПараметрыЗаполнения.Вставить("ПолучатьПрошлыйПериод", Параметры.ПоказыватьСравнениеСПрошлымГодом);
	
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено);
	
	УстановитьПривилегированныйРежим(Истина);
	Если Параметры.БыстроеОбновление Тогда
		МониторРуководителя.ОбновитьДанныеМонитораВФоне(ПараметрыЗаполнения, АдресХранилища);
	Иначе
		МониторРуководителя.ПерезаписатьДанныеМонитораВФоне(ПараметрыЗаполнения, АдресХранилища);
	КонецЕсли;
	
КонецПроцедуры

// Помещает во временное хранилище данные блока
//
// Параметры:
//   Параметры - Структура
//     * АдресХранилища - Строка - адрес хранилища результата
//     * Организация - СправочникСсылка.Организации - отбор по организации
//     * ВариантОкругления - Число - 1 - округлять до целых рублей, 1000 - до тысяч 
//     * ПоказыватьСравнениеСПрошлымГодом - Булево - необходимость сравнения с показателями прошлого года
//     * Инициализация - Истина - заполнить только статическими данными
//
Процедура Покупатели(Параметры) Экспорт
	
	Если Параметры.Инициализация Тогда
		Результат = Новый Структура;
		Результат.Вставить("Покупатели_Заголовок",
			ЗаголовокБлока(БлокиИнформационнойПанелиКлиентСервер.ТекстЗаголовкаПокупатели()));
		Результат.Вставить("Покупатели_ДоступностьРазделов", ПокупателиДоступностьРазделов());
		ПоместитьВоВременноеХранилище(Результат, Параметры.АдресХранилища);
		Возврат;
	КонецЕсли;
	
	Результат = Новый Структура(СвойстваПокупатели());
	Результат.Вставить("Покупатели_Заголовок",
		ЗаголовокБлока(БлокиИнформационнойПанелиКлиентСервер.ТекстЗаголовкаПокупатели()));
	Результат.Вставить("Покупатели_ДоступностьРазделов", ПокупателиДоступностьРазделов());
	
	Покупатели = МониторРуководителя.ДанныеПокупатели(Параметры);
	
	Шрифт      = ШрифтыСтиля.ШрифтТекстаИнформационнойПанели;
	ЦветТекста = ЦветаСтиля.ЦветТекстаИнформационнойПанели;
	
	// Задолженность
	Если Покупатели.Задолженность = 0 И Покупатели.ЗадолженностьОтклонение <> 0 И Параметры.ПоказыватьСравнениеСПрошлымГодом Тогда
		ФорматнаяСтрокаЗадолженность = "ЧДЦ=; ЧН=0";
	Иначе
		ФорматнаяСтрокаЗадолженность = "ЧДЦ=";
	КонецЕсли;
	
	Задолженность = Новый ФорматированнаяСтрока(
		Формат(Покупатели.Задолженность, ФорматнаяСтрокаЗадолженность),
		Шрифт,
		ЦветТекста);
	Результат.Вставить("Покупатели_Задолженность", Задолженность);
	
	// Просроченная задолженность
	Если Покупатели.ПросроченнаяЗадолженность = 0 И Покупатели.ПросроченнаяЗадолженностьОтклонение <> 0 И Параметры.ПоказыватьСравнениеСПрошлымГодом Тогда
		ФорматнаяСтрокаПросроченнаяЗадолженность = "ЧДЦ=; ЧН=0";
	Иначе
		ФорматнаяСтрокаПросроченнаяЗадолженность = "ЧДЦ=";
	КонецЕсли;
	
	ПросроченнаяЗадолженность = Новый ФорматированнаяСтрока(
		Формат(Покупатели.ПросроченнаяЗадолженность, ФорматнаяСтрокаПросроченнаяЗадолженность),
		Шрифт,
		ЦветТекста);
	Результат.Вставить("Покупатели_ПросроченнаяЗадолженность", ПросроченнаяЗадолженность);
	
	// Отклонения
	Если Параметры.ПоказыватьСравнениеСПрошлымГодом Тогда
		
		ЗадолженностьОтклонение = ПредставлениеОтклонения(Покупатели.ЗадолженностьОтклонение);
		Результат.Вставить("Покупатели_ЗадолженностьОтклонение", ЗадолженностьОтклонение);
		
		ПросроченнаяЗадолженностьОтклонение = ПредставлениеОтклонения(Покупатели.ПросроченнаяЗадолженностьОтклонение);
		Результат.Вставить("Покупатели_ПросроченнаяЗадолженностьОтклонение",ПросроченнаяЗадолженностьОтклонение);
		
	КонецЕсли;
	
	// Неоплаченные счета
	
	НеоплаченныеСчета = Новый ФорматированнаяСтрока(
		Формат(Покупатели.НеоплаченныеСчета, "ЧДЦ="),
		Шрифт,
		ЦветТекста);
	Результат.Вставить("Покупатели_НеоплаченныеСчета", НеоплаченныеСчета);
	
	ПоместитьВоВременноеХранилище(Результат, Параметры.АдресХранилища);
	
КонецПроцедуры

Функция ПокупателиДоступностьРазделов()
	
	ЗадолженностьПокупателейПоСрокамДолга =
		ПравоДоступа("Использование", Метаданные.Отчеты.ЗадолженностьПокупателейПоСрокамДолга)
		И ПравоДоступа("Чтение", Метаданные.Константы.СрокОплатыПокупателей)
		И Константы.СрокОплатыПокупателей.Получить() > 0;
		
	АнализНеоплаченныхСчетовПокупателям =
		ПравоДоступа("Использование", Метаданные.Отчеты.АнализНеоплаченныхСчетовПокупателям)
		И Перечисления.РазделыМонитораРуководителя.ДанныеРазделаДоступны(Перечисления.РазделыМонитораРуководителя.НеоплаченныеСчетаПокупателям);	
				
	ДоступностьРазделов = Новый Структура();
	ДоступностьРазделов.Вставить("ЗадолженностьПокупателей",              ПравоДоступа("Использование", Метаданные.Отчеты.ЗадолженностьПокупателей));
	ДоступностьРазделов.Вставить("ЗадолженностьПокупателейПоСрокамДолга", ЗадолженностьПокупателейПоСрокамДолга);
	ДоступностьРазделов.Вставить("АнализНеоплаченныхСчетовПокупателям",   АнализНеоплаченныхСчетовПокупателям);
	ДоступностьРазделов.Вставить("СозданиеСчета",                         ПравоДоступа("Изменение", Метаданные.Документы.СчетНаОплатуПокупателю));
	ДоступностьРазделов.Вставить("СозданиеРеализации",                    ПравоДоступа("Изменение", Метаданные.Документы.РеализацияТоваровУслуг));
	
	Возврат ДоступностьРазделов;
	
КонецФункции

Функция ПокупателиДоступны()
	
	ДоступностьРазделов = ПокупателиДоступностьРазделов();
	
	Возврат ДоступностьРазделов.ЗадолженностьПокупателей
		ИЛИ ДоступностьРазделов.ЗадолженностьПокупателейПоСрокамДолга
		ИЛИ ДоступностьРазделов.АнализНеоплаченныхСчетовПокупателям;
	
КонецФункции

#КонецОбласти

#Область Поставщики

Процедура ДобавитьПоставщики(ТаблицаБлоков)
	
	Добавить(ТаблицаБлоков,
		БлокиИнформационнойПанелиКлиентСервер.ИмяБлокаПоставщики(),
		БлокиИнформационнойПанелиКлиентСервер.ТекстЗаголовкаПоставщики(),
		"БлокиИнформационнойПанели.Поставщики",
		"БлокиИнформационнойПанели.ОбновитьПоставщики",
		СвойстваПоставщики());
	
КонецПроцедуры

Функция СвойстваПоставщики()
	
	Свойства = "Поставщики_Заголовок, Поставщики_НеоплаченныеСчета, "
					+ "Поставщики_Задолженность, Поставщики_ЗадолженностьОтклонение, "
					+ "Поставщики_ПросроченнаяЗадолженность, Поставщики_ПросроченнаяЗадолженностьОтклонение,"
					+ "Поставщики_ДоступностьРазделов";
	
	Возврат Свойства;
	
КонецФункции

// Обновляет данные блока
//
// Параметры:
//   Параметры - Структура
//     * Организация - СправочникСсылка.Организации - отбор по организации
//     * ПоказыватьСравнениеСПрошлымГодом - Булево - необходимость сравнения с показателями прошлого года
//     * БыстроеОбновление - Булево - учитывать актуальность данных при обновлении
//
Процедура ОбновитьПоставщики(Параметры) Экспорт
	
	РазделыМонитора = Новый Массив;
	РазделыМонитора.Добавить(Перечисления.РазделыМонитораРуководителя.ЗадолженностьПоставщикам);
	РазделыМонитора.Добавить(Перечисления.РазделыМонитораРуководителя.НеоплаченныеСчетаПоставщиков);
	
	ЗаданСрокОплатыПоставщикам = (Константы.СрокОплатыПоставщикам.Получить() > 0);
	Если ЗаданСрокОплатыПоставщикам Тогда
		РазделыМонитора.Добавить(Перечисления.РазделыМонитораРуководителя.ПросроченнаяЗадолженностьПоставщикам);
	КонецЕсли;
	
	ПараметрыЗаполнения = Новый Структура();
	ПараметрыЗаполнения.Вставить("Организация", Параметры.Организация);
	ПараметрыЗаполнения.Вставить("РазделыМонитора", РазделыМонитора);
	ПараметрыЗаполнения.Вставить("ПолучатьПрошлыйПериод", Параметры.ПоказыватьСравнениеСПрошлымГодом);
	
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено);
	
	УстановитьПривилегированныйРежим(Истина);
	Если Параметры.БыстроеОбновление Тогда
		МониторРуководителя.ОбновитьДанныеМонитораВФоне(ПараметрыЗаполнения, АдресХранилища);
	Иначе
		МониторРуководителя.ПерезаписатьДанныеМонитораВФоне(ПараметрыЗаполнения, АдресХранилища);
	КонецЕсли;
	
КонецПроцедуры

// Помещает во временное хранилище данные блока
//
// Параметры:
//   Параметры - Структура
//     * АдресХранилища - Строка - адрес хранилища результата
//     * Организация - СправочникСсылка.Организации - отбор по организации
//     * ВариантОкругления - Число - 1 - округлять до целых рублей, 1000 - до тысяч 
//     * ПоказыватьСравнениеСПрошлымГодом - Булево - необходимость сравнения с показателями прошлого года
//     * Инициализация - Истина - заполнить только статическими данными
//
Процедура Поставщики(Параметры) Экспорт
	
	Если Параметры.Инициализация Тогда
		Результат = Новый Структура;
		Результат.Вставить("Поставщики_Заголовок",
			ЗаголовокБлока(БлокиИнформационнойПанелиКлиентСервер.ТекстЗаголовкаПоставщики()));
		Результат.Вставить("Поставщики_ДоступностьРазделов", ПоставщикиДоступностьРазделов());
		ПоместитьВоВременноеХранилище(Результат, Параметры.АдресХранилища);
		Возврат;
	КонецЕсли;
	
	Результат = Новый Структура(СвойстваПоставщики());
	Результат.Вставить("Поставщики_Заголовок",
		ЗаголовокБлока(БлокиИнформационнойПанелиКлиентСервер.ТекстЗаголовкаПоставщики()));
	Результат.Вставить("Поставщики_ДоступностьРазделов", ПоставщикиДоступностьРазделов());
	
	Поставщики = МониторРуководителя.ДанныеПоставщики(Параметры);
	
	Шрифт      = ШрифтыСтиля.ШрифтТекстаИнформационнойПанели;
	ЦветТекста = ЦветаСтиля.ЦветТекстаИнформационнойПанели;
	
	// Задолженность
	Если Поставщики.Задолженность = 0 И Поставщики.ЗадолженностьОтклонение <> 0 И Параметры.ПоказыватьСравнениеСПрошлымГодом Тогда
		ФорматнаяСтрокаЗадолженность = "ЧДЦ=; ЧН=0";
	Иначе
		ФорматнаяСтрокаЗадолженность = "ЧДЦ=";
	КонецЕсли;
	
	Задолженность = Новый ФорматированнаяСтрока(
		Формат(Поставщики.Задолженность, ФорматнаяСтрокаЗадолженность),
		Шрифт,
		ЦветТекста);
	Результат.Вставить("Поставщики_Задолженность", Задолженность);
	
	// Просроченная задолженность
	Если Поставщики.ПросроченнаяЗадолженность = 0 И Поставщики.ПросроченнаяЗадолженностьОтклонение <> 0 И Параметры.ПоказыватьСравнениеСПрошлымГодом Тогда
		ФорматнаяСтрокаПросроченнаяЗадолженность = "ЧДЦ=; ЧН=0";
	Иначе
		ФорматнаяСтрокаПросроченнаяЗадолженность = "ЧДЦ=";
	КонецЕсли;
	
	ПросроченнаяЗадолженность = Новый ФорматированнаяСтрока(
		Формат(Поставщики.ПросроченнаяЗадолженность, ФорматнаяСтрокаПросроченнаяЗадолженность),
		Шрифт,
		ЦветТекста);
	Результат.Вставить("Поставщики_ПросроченнаяЗадолженность", ПросроченнаяЗадолженность);
	
	// Отклонения
	Если Параметры.ПоказыватьСравнениеСПрошлымГодом Тогда
		
		ЗадолженностьОтклонение = ПредставлениеОтклонения(Поставщики.ЗадолженностьОтклонение);
		Результат.Вставить("Поставщики_ЗадолженностьОтклонение", ЗадолженностьОтклонение);
		
		ПросроченнаяЗадолженностьОтклонение = ПредставлениеОтклонения(Поставщики.ПросроченнаяЗадолженностьОтклонение);
		Результат.Вставить("Поставщики_ПросроченнаяЗадолженностьОтклонение",ПросроченнаяЗадолженностьОтклонение);
		
	КонецЕсли;
	
	// Неоплаченные счета
	
	НеоплаченныеСчета = Новый ФорматированнаяСтрока(
		Формат(Поставщики.НеоплаченныеСчета, "ЧДЦ="),
		Шрифт,
		ЦветТекста);
	Результат.Вставить("Поставщики_НеоплаченныеСчета", НеоплаченныеСчета);
	
	ПоместитьВоВременноеХранилище(Результат, Параметры.АдресХранилища);
	
КонецПроцедуры

Функция ПоставщикиДоступностьРазделов()
	
	ЗадолженностьПоставщикамПоСрокамДолга = 
		ПравоДоступа("Использование", Метаданные.Отчеты.ЗадолженностьПоставщикамПоСрокамДолга)
		И Константы.СрокОплатыПоставщикам.Получить() > 0;
	
	ДоступностьРазделов = Новый Структура();
	ДоступностьРазделов.Вставить("ЗадолженностьПоставщикам",              ПравоДоступа("Использование", Метаданные.Отчеты.ЗадолженностьПоставщикам));
	ДоступностьРазделов.Вставить("ЗадолженностьПоставщикамПоСрокамДолга", ЗадолженностьПоставщикамПоСрокамДолга);
	ДоступностьРазделов.Вставить("АнализНеоплаченныхСчетовПоставщиков",   ПравоДоступа("Использование", Метаданные.Отчеты.АнализНеоплаченныхСчетовПоставщиков));
	
	Возврат ДоступностьРазделов;
	
КонецФункции

Функция ПоставщикиДоступны()
	
	ДоступностьРазделов = ПоставщикиДоступностьРазделов();
	
	Возврат ДоступностьРазделов.ЗадолженностьПоставщикам
		ИЛИ ДоступностьРазделов.ЗадолженностьПоставщикамПоСрокамДолга
		ИЛИ ДоступностьРазделов.АнализНеоплаченныхСчетовПоставщиков;
	
КонецФункции

#КонецОбласти

#Область Продажи

Процедура ДобавитьПродажи(ТаблицаБлоков)
	
	Добавить(ТаблицаБлоков,
		БлокиИнформационнойПанелиКлиентСервер.ИмяБлокаПродажи(),
		БлокиИнформационнойПанелиКлиентСервер.ТекстЗаголовкаПродажи(),
		"БлокиИнформационнойПанели.Продажи",
		"БлокиИнформационнойПанели.ОбновитьПродажи",
		СвойстваПродажи());
	
КонецПроцедуры

Функция СвойстваПродажи()
	
	ВГраница = БлокиИнформационнойПанелиКлиентСервер.КоличествоПериодовПродаж() - 1;
	
	Свойства = "Продажи_Заголовок";
	
	Для Индекс = 0 По ВГраница Цикл
		Свойства = Свойства + ", "
			+ БлокиИнформационнойПанелиКлиентСервер.СвойствоПериодПродаж(Индекс) + ", "
			+ БлокиИнформационнойПанелиКлиентСервер.СвойствоСуммаПродаж(Индекс) + ", "
			+ БлокиИнформационнойПанелиКлиентСервер.СвойствоОтклонениеПродаж(Индекс);
	КонецЦикла;

	Возврат Свойства;
	
КонецФункции

// Обновляет данные блока
//
// Параметры:
//   Параметры - Структура
//     * Организация - СправочникСсылка.Организации - отбор по организации
//     * ПоказыватьСравнениеСПрошлымГодом - Булево - необходимость сравнения с показателями прошлого года
//
Процедура ОбновитьПродажи(Параметры) Экспорт
	
	РазделыМонитора = Новый Массив;
	РазделыМонитора.Добавить(Перечисления.РазделыМонитораРуководителя.ПродажиПоКонтрагентам);
	
	ПараметрыЗаполнения = Новый Структура();
	ПараметрыЗаполнения.Вставить("Организация", Параметры.Организация);
	ПараметрыЗаполнения.Вставить("РазделыМонитора", РазделыМонитора);
	ПараметрыЗаполнения.Вставить("ПолучатьПрошлыйПериод", Параметры.ПоказыватьСравнениеСПрошлымГодом);
	
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено);
	
	УстановитьПривилегированныйРежим(Истина);
	Если Параметры.БыстроеОбновление Тогда
		МониторРуководителя.ОбновитьДанныеМонитораВФоне(ПараметрыЗаполнения, АдресХранилища);
	Иначе
		МониторРуководителя.ПерезаписатьДанныеМонитораВФоне(ПараметрыЗаполнения, АдресХранилища);
	КонецЕсли;
	
КонецПроцедуры

// Помещает во временное хранилище данные блока
//
// Параметры:
//   Параметры - Структура
//     * АдресХранилища - Строка - адрес хранилища результата
//     * Организация - СправочникСсылка.Организации - отбор по организации
//     * ВариантОкругления - Число - 1 - округлять до целых рублей, 1000 - до тысяч 
//     * ПоказыватьСравнениеСПрошлымГодом - Булево - необходимость сравнения с показателями прошлого года
//     * Инициализация - Истина - заполнить только статическими данными
//
Процедура Продажи(Параметры) Экспорт
	
	Если Параметры.Инициализация Тогда
		Результат = Новый Структура;
		Результат.Вставить("Продажи_Заголовок",
			ЗаголовокБлока(БлокиИнформационнойПанелиКлиентСервер.ТекстЗаголовкаПродажи()));
		ПоместитьВоВременноеХранилище(Результат, Параметры.АдресХранилища);
		Возврат;
	КонецЕсли;
	
	Результат = Новый Структура(СвойстваПродажи());
	Результат.Вставить("Продажи_Заголовок",
		ЗаголовокБлока(БлокиИнформационнойПанелиКлиентСервер.ТекстЗаголовкаПродажи()));
	
	Продажи = МониторРуководителя.ДанныеПродажи(Параметры);
	
	КонецПериода = КонецДня(ТекущаяДатаСеанса());
	
	НачалоМесяца = НачалоМесяца(КонецПериода);
	НачалоГода   = НачалоГода(КонецПериода);
	
	НачалоПрошлогоМесяца  = НачалоМесяца(ДобавитьМесяц(КонецПериода, -1));
	НачалоПрошлогоПериода = НачалоГода(НачалоПрошлогоМесяца);
	
	Индекс =-1;
	
	// Текущий месяц
	Индекс = Индекс + 1;
	Если КонецПериода <> КонецМесяца(КонецПериода) Тогда
		ДобавитьСтрокуПродаж(Индекс, Результат,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'с %1'"), Формат(НачалоМесяца, "ДФ='д ММММ'")),
			Продажи.ТекущийМесяц,
			Продажи.ТекущийМесяцОтклонение,
			Параметры.ПоказыватьСравнениеСПрошлымГодом,
			БлокиИнформационнойПанелиКлиентСервер.ИдентификаторПродажиТекущегоМесяца());
	Иначе
		ДобавитьСтрокуПродаж(Индекс, Результат,
			Формат(НачалоМесяца, "ДФ=ММММ"),
			Продажи.ТекущийМесяц,
			Продажи.ТекущийМесяцОтклонение,
			Параметры.ПоказыватьСравнениеСПрошлымГодом,
			БлокиИнформационнойПанелиКлиентСервер.ИдентификаторПродажиТекущегоМесяца());
	КонецЕсли;
	
	// С начала года. Не показываем, если дублирует продажи за текущий месяц.
	Если НачалоГода <> НачалоМесяца Тогда 
		Индекс = Индекс + 1;
		Если КонецПериода <> КонецМесяца(КонецПериода) Тогда
			ДобавитьСтрокуПродаж(Индекс, Результат,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'с %1'"), Формат(НачалоГода, "ДФ='д ММММ'")),
				Продажи.ТекущийМесяцСНачалаГода,
				Продажи.ТекущийМесяцСНачалаГодаОтклонение,
				Параметры.ПоказыватьСравнениеСПрошлымГодом,
				БлокиИнформационнойПанелиКлиентСервер.ИдентификаторПродажиТекущегоМесяцаСНачалаГода());
		Иначе
			ДобавитьСтрокуПродаж(Индекс, Результат,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1 – %2", Формат(НачалоГода, "ДФ=MMMM"), Формат(НачалоМесяца, "ДФ=MMMM")),
				Продажи.ТекущийМесяцСНачалаГода,
				Продажи.ТекущийМесяцСНачалаГодаОтклонение,
				Параметры.ПоказыватьСравнениеСПрошлымГодом,
				БлокиИнформационнойПанелиКлиентСервер.ИдентификаторПродажиТекущегоМесяцаСНачалаГода());
		КонецЕсли;
	КонецЕсли;
	
	// Прошлый месяц
	Индекс = Индекс + 1;
	ДобавитьСтрокуПродаж(Индекс, Результат,
		Формат(НачалоПрошлогоМесяца, "ДФ=MMMM"),
		Продажи.ПрошлыйМесяц,
		Продажи.ПрошлыйМесяцОтклонение,
		Параметры.ПоказыватьСравнениеСПрошлымГодом,
		БлокиИнформационнойПанелиКлиентСервер.ИдентификаторПродажиПрошлогоМесяца());
	
	// С начала года по конец прошлого месяца. Не показываем, если дублирует продажи за прошлый месяц.
	Если НачалоПрошлогоПериода <> НачалоПрошлогоМесяца Тогда
		Индекс = Индекс + 1;
		ДобавитьСтрокуПродаж(Индекс, Результат,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1 – %2", Формат(НачалоПрошлогоПериода, "ДФ=MMMM"), Формат(НачалоПрошлогоМесяца, "ДФ=MMMM")),
			Продажи.ПрошлыйМесяцСНачалаГода,
			Продажи.ПрошлыйМесяцСНачалаГодаОтклонение,
			Параметры.ПоказыватьСравнениеСПрошлымГодом,
			БлокиИнформационнойПанелиКлиентСервер.ИдентификаторПродажиПрошлогоМесяцаСНачалаГода());
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, Параметры.АдресХранилища);
	
КонецПроцедуры

Процедура ДобавитьСтрокуПродаж(Индекс, Результат, Период, Сумма, Отклонение, ДобавитьОтклонение, Идентификатор)
	
	Если Сумма = 0 И Отклонение <> 0 И ДобавитьОтклонение Тогда
		ФорматнаяСтрока = "ЧДЦ=; ЧН=0";
	Иначе
		ФорматнаяСтрока = "ЧДЦ=";
	КонецЕсли;
	
	Шрифт = ШрифтыСтиля.ШрифтТекстаИнформационнойПанели;
	ЦветТекста = ЦветаСтиля.ЦветТекстаИнформационнойПанели;
	ЦветГиперссылки = ЦветаСтиля.ЦветГиперссылки;
	
	ПредставлениеПериода = Новый ФорматированнаяСтрока(Период, , ЦветГиперссылки, , Идентификатор);
	Результат.Вставить(БлокиИнформационнойПанелиКлиентСервер.СвойствоПериодПродаж(Индекс), ПредставлениеПериода);
	
	ПредставлениеСуммы = Новый ФорматированнаяСтрока(Формат(Сумма, ФорматнаяСтрока), Шрифт, ЦветТекста);
	Результат.Вставить(БлокиИнформационнойПанелиКлиентСервер.СвойствоСуммаПродаж(Индекс), ПредставлениеСуммы);
	
	Если ДобавитьОтклонение Тогда
		
		ПредставлениеОтклонения = ПредставлениеОтклонения(Отклонение);
		Результат.Вставить(БлокиИнформационнойПанелиКлиентСервер.СвойствоОтклонениеПродаж(Индекс), ПредставлениеОтклонения);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПродажиДоступны()
	
	Возврат ПравоДоступа("Использование", Метаданные.Отчеты.Продажи);
	
КонецФункции

#КонецОбласти

#Область Новости

Процедура ДобавитьНовости(ТаблицаБлоков)
	
	Добавить(ТаблицаБлоков,
		БлокиИнформационнойПанелиКлиентСервер.ИмяБлокаНовости(),
		БлокиИнформационнойПанелиКлиентСервер.ТекстЗаголовкаНовости(),
		"БлокиИнформационнойПанели.Новости",,
		СвойстваНовости());
	
КонецПроцедуры

Функция СвойстваНовости()
	
	ВГраница = БлокиИнформационнойПанелиКлиентСервер.КоличествоНовостей() - 1;
	
	Свойства = "Новости_Заголовок, Новости_Индекс, Новости_Текст, Новости_АдресХранилища";
	
	Возврат Свойства;
	
КонецФункции

// Помещает во временное хранилище данные блока
//
// Параметры:
//   Параметры - Структура
//     * АдресХранилища - Строка - адрес хранилища результата
//     * УникальныйИдентификатор - УникальныйИдентификатор - уникальный идентификатор формы информационной панели
//
Процедура Новости(Параметры) Экспорт

	Результат = Новый Структура(СвойстваНовости());
	Результат.Вставить("Новости_Заголовок",
		ЗаголовокБлока(БлокиИнформационнойПанелиКлиентСервер.ТекстЗаголовкаНовости()));
	
	МаксимальноеКоличествоНовостей = БлокиИнформационнойПанелиКлиентСервер.КоличествоНовостей();
	
	ТаблицаНовостей = Новый ТаблицаЗначений;
	Если ОбработкаНовостейПовтИсп.РазрешенаРаботаСНовостямиТекущемуПользователю() Тогда
		
		ПараметрыПолученияНовостей = Новый Структура;
		ПараметрыПолученияНовостей.Вставить("ВариантОтбора",      ИнтернетПоддержкаПользователейБК.ВариантОтбораПоЛентеНовостей());
		ПараметрыПолученияНовостей.Вставить("ЛентаНовостей",      ИнтернетПоддержкаПользователейБК.ЛентаНовостейЧтоНового());
		ПараметрыПолученияНовостей.Вставить("КоличествоНовостей", МаксимальноеКоличествоНовостей);
		ПараметрыПолученияНовостей.Вставить("ПорядокСортировки",  "Прочтена Возр, ДатаПубликации Убыв, Важность Убыв");
		
		Справочники.Новости.ПолучитьСписокНовостей(
			ТаблицаНовостей,
			Пользователи.ТекущийПользователь(),
			ПараметрыПолученияНовостей,
			Новый Массив);
		
	КонецЕсли;
	
	Шрифт           = ШрифтыСтиля.ШрифтТекстаИнформационнойПанели;
	ЦветТекста      = ЦветаСтиля.ЦветТекстаИнформационнойПанели;
	ЦветГиперссылки = ЦветаСтиля.ЦветГиперссылки;
	
	ТекстыНовостей = Новый СписокЗначений;
	СсылкиНовостей = Новый СписокЗначений;
	
	КоличествоНовостей = ТаблицаНовостей.Количество();
	Если КоличествоНовостей > 0 Тогда
		
		ВГраница = Мин(МаксимальноеКоличествоНовостей, КоличествоНовостей) - 1;
		Для Индекс = 0 По ВГраница Цикл
			
			Новость = ТаблицаНовостей[Индекс];
			
			ТекстНовости = Новый ФорматированнаяСтрока(
				Новый ФорматированнаяСтрока(СокрЛП(Новость.Наименование), Шрифт, ЦветТекста),
				Символы.ПС,
				Символы.ПС,
				Новый ФорматированнаяСтрока(НСтр("ru = 'Подробнее'"), , ЦветГиперссылки, , ПолучитьНавигационнуюСсылку(Новость.Ссылка))
			);
			
			ТекстыНовостей.Добавить(ТекстНовости);
			СсылкиНовостей.Добавить(Новость.Ссылка);
			
		КонецЦикла;
		
		Результат.Вставить("Новости_Текст", ТекстыНовостей[0].Значение);
		
	Иначе
		
		Результат.Вставить("Новости_Текст", Новый ФорматированнаяСтрока(БлокиИнформационнойПанелиКлиентСервер.ТекстОтсутствияНовостей(), Шрифт, ЦветТекста));
		
	КонецЕсли;
	
	// Начинаем показывать с первой новости
	Результат.Вставить("Новости_Индекс", 0);
	
	// Список новостей передаем в форму через временное хранилище
	ДанныеНовостей = Новый Структура;
	ДанныеНовостей.Вставить("ТекстыНовостей", ТекстыНовостей);
	ДанныеНовостей.Вставить("СсылкиНовостей", СсылкиНовостей);
	АдресХранилищаНовостей = ПоместитьВоВременноеХранилище(ДанныеНовостей, Параметры.УникальныйИдентификатор);
	Результат.Вставить("Новости_АдресХранилища", АдресХранилищаНовостей);
	
	ПоместитьВоВременноеХранилище(Результат, Параметры.АдресХранилища);
	
КонецПроцедуры

#КонецОбласти

#Область МетодическаяПоддержка

Процедура ДобавитьМетодическаяПоддержка(ТаблицаБлоков)
	
	Добавить(ТаблицаБлоков,
		БлокиИнформационнойПанелиКлиентСервер.ИмяБлокаМетодическаяПоддержка(),
		БлокиИнформационнойПанелиКлиентСервер.ТекстЗаголовкаМетодическаяПоддержка(),
		"БлокиИнформационнойПанели.МетодическаяПоддержка",,
		СвойстваМетодическаяПоддержка());
	
КонецПроцедуры

Функция СвойстваМетодическаяПоддержка()
	
	ВГраница = БлокиИнформационнойПанелиКлиентСервер.КоличествоСсылокМетодическойПоддержки() - 1;
	
	Свойства = "МетодическаяПоддержка_Заголовок";
	
	Для Индекс = 0 По ВГраница Цикл
		Свойства = Свойства + ","
			+ БлокиИнформационнойПанелиКлиентСервер.СвойствоСсылкаМетодическойПоддержки(Индекс);
	КонецЦикла;
	
	Возврат Свойства;

КонецФункции

// Помещает во временное хранилище данные блока
//
// Параметры:
//   Параметры - Структура
//     * АдресХранилища - Строка - адрес хранилища результата
//
Процедура МетодическаяПоддержка(Параметры) Экспорт
	
	Результат = Новый Структура(СвойстваМетодическаяПоддержка());
	Результат.Вставить("МетодическаяПоддержка_Заголовок",
		ЗаголовокБлока(БлокиИнформационнойПанелиКлиентСервер.ТекстЗаголовкаМетодическаяПоддержка()));
	
	МаксимальноеКоличествоСсылок = БлокиИнформационнойПанелиКлиентСервер.КоличествоСсылокМетодическойПоддержки();
	
	ТаблицаИнформационныхСсылок = Обработки.МетодическаяПоддержка.ПолучитьТаблицуИнформационныхСсылокДляВиджета();
	
	ЦветГиперссылки = ЦветаСтиля.ЦветГиперссылки;
	
	ВГраница = Мин(МаксимальноеКоличествоСсылок, ТаблицаИнформационныхСсылок.Количество()) - 1;
	Для Индекс = 0 По ВГраница Цикл
		
		ИнформационнаяСсылка = ТаблицаИнформационныхСсылок[Индекс];
		
		СсылкаМетодическойПоддержки = Новый ФорматированнаяСтрока(
			ИнформационнаяСсылка.Наименование, , ЦветГиперссылки, , ИнформационнаяСсылка.Адрес);
		
		Результат.Вставить(БлокиИнформационнойПанелиКлиентСервер.СвойствоСсылкаМетодическойПоддержки(Индекс), СсылкаМетодическойПоддержки);
		
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(Результат, Параметры.АдресХранилища);
	
КонецПроцедуры

Функция МетодическаяПоддержкаДоступна()
	
	Возврат ПравоДоступа("Использование", Метаданные.Обработки.МетодическаяПоддержка);
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция НоваяТаблицаБлоков()
	
	ТаблицаБлоков = Новый ТаблицаЗначений;
	
	Колонки = ТаблицаБлоков.Колонки;
	
	Колонки.Добавить("Пометка",                   Новый ОписаниеТипов("Булево"));
	Колонки.Добавить("Имя",                       ОбщегоНазначения.ОписаниеТипаСтрока(150));
	Колонки.Добавить("Синоним",                   ОбщегоНазначения.ОписаниеТипаСтрока(150));
	Колонки.Добавить("ПроцедураПолученияДанных",  ОбщегоНазначения.ОписаниеТипаСтрока(0));
	Колонки.Добавить("ПроцедураОбновленияДанных", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	Колонки.Добавить("РеквизитыФормы",            ОбщегоНазначения.ОписаниеТипаСтрока(0));
	Колонки.Добавить("ЦветФона",                  Новый ОписаниеТипов("Цвет"));
	Колонки.Добавить("Порядок",                   ОбщегоНазначения.ОписаниеТипаЧисло(3));
	
	Возврат ТаблицаБлоков;
	
КонецФункции

Процедура Добавить(ТаблицаБлоков, Имя, Синоним, ПроцедураПолученияДанных, ПроцедураОбновленияДанных, РеквизитыФормы, Порядок = 100)
	
	НовыйБлок = ТаблицаБлоков.Добавить();
	НовыйБлок.Имя                       = Имя;
	НовыйБлок.Синоним                   = Синоним;
	НовыйБлок.ПроцедураПолученияДанных  = ПроцедураПолученияДанных;
	НовыйБлок.ПроцедураОбновленияДанных = ПроцедураОбновленияДанных;
	НовыйБлок.РеквизитыФормы            = РеквизитыФормы;
	НовыйБлок.Порядок                   = Порядок;
	
КонецПроцедуры

Функция МножественноеПредставление(ПараметрыПредметаИсчисления)
	
	ПредставленияПредмета = СтрРазделить(ПараметрыПредметаИсчисления, ",");
	
	Возврат ?(ПредставленияПредмета.Количество() >= 3, СокрЛП(ПредставленияПредмета[2]), "");
	
КонецФункции

Функция ПредставлениеОтклонения(Знач Отклонение)
	
	Отклонение = Окр(Отклонение, 0);
	
	Стрелка = ?(Отклонение > 0, СтрелкаВверх(), СтрелкаВниз());
	
	МодульОтклонения = Макс(Отклонение, -Отклонение);
	
	ПределОтклонения = ПределОтклонения();
	
	Если Отклонение <> 0 Тогда
		Если Отклонение < ПределОтклонения Тогда
			ПредставлениеОтклонения = Стрелка + Формат(МодульОтклонения, "ЧДЦ=") + "%";
		Иначе
			ПредставлениеОтклонения = Стрелка;
		КонецЕсли;
	Иначе
		ПредставлениеОтклонения = "";
	КонецЕсли;
	
	Шрифт = ШрифтыСтиля.ШрифтОтклоненияИнформационнойПанели;
	Если Отклонение > 0 Тогда
		ЦветТекста = ЦветаСтиля.ЦветПоложительногоОтклоненияИнформационнойПанели;
	ИначеЕсли Отклонение < 0 Тогда
		ЦветТекста = ЦветаСтиля.ЦветОтрицательногоОтклоненияИнформационнойПанели;
	Иначе
		ЦветТекста = ЦветаСтиля.ЦветТекстаИнформационнойПанели;
	КонецЕсли;
	
	Возврат Новый ФорматированнаяСтрока(ПредставлениеОтклонения, Шрифт, ЦветТекста);
	
КонецФункции

Функция ПределОтклонения()
	
	Возврат 999;
	
КонецФункции

Функция СтрелкаВверх()
	
	Возврат Символ(9650);
	
КонецФункции

Функция СтрелкаВниз()
	
	Возврат Символ(9660);
	
КонецФункции

// Заменяет пробелы в строке на неразрывные пробелы для блокировки переносов в браузере
//
Функция СтрокаБезПереносов(ИсходнаяСтрока)
	
	// Для того чтобы строка правильно переносилась в веб-клиенте,
	// вместо запятой используем символ - U+201A:Single Low-9 Quotation Mark (Keystroke: Alt+0130)
	ИсходнаяСтрока = СтрЗаменить(ИсходнаяСтрока, ",", "‚");
	Возврат СтрЗаменить(ИсходнаяСтрока, " ", Символы.НПП);
	
КонецФункции

Функция ЗаголовокБлока(ТекстЗаголовка)
	
	//Если ПолучитьФункциональнуюОпцию("ИнтерфейсТакси") 
	//	ИЛИ ПолучитьФункциональнуюОпцию("ИнтерфейсТаксиПростой") Тогда
		Шрифт = ШрифтыСтиля.ШрифтЗаголовкаИнформационнойПанели;
		ЦветТекста = ЦветаСтиля.ЦветЗаголовкаИнформационнойПанели;
	//Иначе
	//	Шрифт = ШрифтыСтиля.ШрифтЗаголовкаИнформационнойПанели82;
	//	ЦветТекста = ЦветаСтиля.ЦветЗаголовкаИнформационнойПанели82;
	//КонецЕсли;
	
	Возврат Новый ФорматированнаяСтрока(ТекстЗаголовка, Шрифт, ЦветТекста);
	
КонецФункции

#КонецОбласти
