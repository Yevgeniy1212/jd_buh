
#Область ПрограммныйИнтерфейс

// Процедура должна использоваться при начале выбора значения в поле "СтруктурноеПодразделениеОрганизация" форм
// 
// Параметры
//  Форма - УправляемаяФорма - Форма из которой происходит вызов процедуры
//  СтандартнаяОбработка - Булево - признак стандартной обработки события начала выбора
//  Организация - СправочникСсылка.Организации - значение реквизита "Организация"  объекта или аналогичного по свойствам и смыловой нагрузке реквизита объекта
//  СтруктурноеПодразделение - СправочникСсылка.ПодразделенияОрганизаций - значение реквизита "СтруктурноеПодразделение" объекта
//  ДоступностьИзмененияОрганизации - Булево - флаг, влияющий на доступность поля "Организация" форме "ФормаВыбораСтруктурногоПодразделения"
//  ИмяПроцедурыОбработкиВыбора - Строка - имя процедуры в модуле формы, которая будет вызвана после выбора значения в форме "ФормаВыбораСтруктурногоПодразделения"
//  ДополнительныеПараметры - Структура - дополнительные параметры, которые необходимо передать в обработчик события после выбора
//
Процедура СтруктурноеПодразделениеНачалоВыбора(Форма, СтандартнаяОбработка, Организация, СтруктурноеПодразделение, ДоступностьИзмененияОрганизации = Истина, ИмяПроцедурыОбработкиВыбора = "ПослеВыбораСтруктурногоПодразделения", ДополнительныеПараметры = Неопределено) Экспорт
	
	РаботаСДиалогамиКлиент.СтруктурноеПодразделениеНачалоВыбора(Форма, СтандартнаяОбработка, Организация, СтруктурноеПодразделение, ДоступностьИзмененияОрганизации, ИмяПроцедурыОбработкиВыбора, ДополнительныеПараметры);
	
КонецПроцедуры

// Процедура вызывается из формы объекта после выбора значения в поле "СтруктурноеПодразделениеОрганизация" и выполняет общие действия для всех объектов.
// А именно, заполняет реквизиты "Организация" и "СтруктурноеПодразделение" объекта и устанавливает значение реквизита формы "СтруктурноеПодразделениеОрганизация"
//
// Параметры
//  Результат - Структура - результат обработки выбора значения из формы "ФормаВыбораСтруктурногоПодразделения"
//  Организация - СправочникСсылка.Организации - значение реквизита "Организация" объекта
//  СтруктурноеПодразделение - СправочникСсылка.ПодразделенияОрганизаций - значение реквизита "СтруктурноеПодразделение" объекта
//  ЗначениеЭлементаФормы - СправочникСсылка.Организации, СправочникСсылка.ПодразделенияОрганизаций - значение реквизита формы, который хранит информацию о выбранной структурной единице
//
Процедура ПослеВыбораСтруктурногоПодразделения(Результат, Организация, СтруктурноеПодразделение, ЗначениеЭлементаФормы = Неопределено) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		Организация 			 = Результат.Организация;
		СтруктурноеПодразделение = Результат.СтруктурноеПодразделение;
		
		Если ЗначениеЗаполнено(СтруктурноеПодразделение) Тогда 
			ЗначениеЭлементаФормы = СтруктурноеПодразделение;
		Иначе 
			ЗначениеЭлементаФормы = Организация;
		КонецЕсли;
	Иначе 
		Результат = Новый Структура("Организация, СтруктурноеПодразделение, ИзмененаОрганизация, ИзмененоСтруктурноеПодразделение", 
		Организация, 
		СтруктурноеПодразделение,
		Ложь,
		Ложь);
	КонецЕсли;
	
КонецПроцедуры

// В функции проверяется измененность реквизита формы "СтруктурноеПодразделениеОрганизация" по отношению к реквизитам объекта
// 
// Параметры
//  СтруктурноеПодразделениеОрганизация - СправочникСсылка.Организации, СправочникСсылка.ПодразделенияОрганизаций - значение реквизита формы, содержащее значение организации или структурного подразделения
//  Организация - СправочникСсылка.Организации - значение реквизита "Организация" объекта
//  СтруктурноеПодразделение - СправочникСсылка.ПодразделенияОрганизаций - значение реквизита "СтруктурноеПодразделение" объекта
//
// Возвращаемое значение
//  Структура - Структура - структура, содержащая информацию об изменениях. Ключи структуры: ИзмененаОрганизация, ИзмененоСтруктурноеПодразделение. Ключи заполняются если изменена организация или структурное подразделение соответственно.
//
Функция ПроверитьИзменениеЗначенийОрганизацииСтруктурногоПодразделения(СтруктурноеПодразделениеОрганизация, Организация, СтруктурноеПодразделение) Экспорт 
	
	ИзмененаОрганизация = Ложь;
	ИзмененоСтруктурноеПодразделение = Ложь;
	
	Если ТипЗнч(СтруктурноеПодразделениеОрганизация) = Тип("СправочникСсылка.Организации") 
		И (СтруктурноеПодразделениеОрганизация <> Организация 
		ИЛИ ЗначениеЗаполнено(СтруктурноеПодразделение)) Тогда 
		ИзмененаОрганизация = Истина;
		ИзмененоСтруктурноеПодразделение = Истина;
	ИначеЕсли ТипЗнч(СтруктурноеПодразделениеОрганизация) = Тип("СправочникСсылка.ПодразделенияОрганизаций") 
		И СтруктурноеПодразделениеОрганизация <> СтруктурноеПодразделение Тогда 
		ИзмененоСтруктурноеПодразделение = Истина;
	КонецЕсли;
	
	Возврат Новый Структура("ИзмененаОрганизация, ИзмененоСтруктурноеПодразделение, НеобходимоИзменитьЗначенияРеквизитовОбъекта", ИзмененаОрганизация, ИзмененоСтруктурноеПодразделение, ИзмененаОрганизация ИЛИ ИзмененоСтруктурноеПодразделение);
	
КонецФункции

// Открывает форму редактирования многострочного комментария.
//
// Параметры:
//  МногострочныйТекст      - Строка - произвольный текст, который необходимо отредактировать.
//  ФормаВладелец           - УправляемаяФорма - форма, в поле которой выполняется ввод комментария.
//  ИмяРеквизита            - Строка - имя реквизита формы, в который будет помещен введенный пользователем
//                                     комментарий.
//  Заголовок               - Строка - текст, который необходимо отобразить в заголовке формы.
//                                     По умолчанию: "Комментарий".
//
// Пример:
//  ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
//
Процедура ПоказатьФормуРедактированияКомментария(Знач МногострочныйТекст, Знач ФормаВладелец, Знач ИмяРеквизита, 
	Знач Заголовок = Неопределено) Экспорт
	
	ДополнительныеПараметры = Новый Структура("ФормаВладелец,ИмяРеквизита", ФормаВладелец, ИмяРеквизита);
	Оповещение = Новый ОписаниеОповещения("КомментарийЗавершениеВвода", 
	общ_ПереопределяемыеПроцедурыБККлиент, ДополнительныеПараметры);
	ЗаголовокФормы = ?(Заголовок <> Неопределено, Заголовок, НСтр("ru='Комментарий'"));
	ПоказатьФормуРедактированияМногострочногоТекста(Оповещение, МногострочныйТекст, ЗаголовокФормы);
	
КонецПроцедуры

// Процедура открывает специализированные формы для субконто специфического типа,
//  а так же устанавливает необходимые отборы в стандартных формах выбора
//
// Параметры:
//  Форма				 - 	УправляемаяФорма 
//  Элемент				 - 	элемент формы 
//  Индекс				 - 	Число 
//  СтандартнаяОбработка - 	Булево 
//  СписокПараметров	 - 	Структура 
//
Процедура НачалоВыбораЗначенияСубконто(Форма, Элемент, Индекс, СтандартнаяОбработка, СписокПараметров) Экспорт
	
	ДанныеСчета = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(СписокПараметров.СчетУчета);
	ПараметрыВыбора = Новый Структура();
	
	Если ДанныеСчета["ВидСубконто" + Индекс] = ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоТиповые.ДокументыРасчетовСКонтрагентами") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		СтруктураПараметров  = Новый Структура;
		Если ТипЗнч(СписокПараметров) = Тип("Структура") Тогда
			
			Если СписокПараметров.Свойство("Организация") Тогда
				СтруктураПараметров.Вставить("Организация", СписокПараметров.Организация);
			КонецЕсли;
			Если СписокПараметров.Свойство("Контрагент") Тогда
				СтруктураПараметров.Вставить("Контрагент", СписокПараметров.Контрагент);
			КонецЕсли;
			Если СписокПараметров.Свойство("ДоговорКонтрагента") Тогда
				СтруктураПараметров.Вставить("ДоговорКонтрагента", СписокПараметров.ДоговорКонтрагента);
			КонецЕсли;
			Если СписокПараметров.Свойство("Дата") Тогда
				СтруктураПараметров.Вставить("Дата", Форма.Объект.Дата);
			КонецЕсли;
			Если СписокПараметров.Свойство("СчетУчета") Тогда
				СтруктураПараметров.Вставить("СчетУчета", СписокПараметров.СчетУчета);
			КонецЕсли;
			Если СписокПараметров.Свойство("ОстаткиОбороты") Тогда
				СтруктураПараметров.Вставить("ОстаткиОбороты", СписокПараметров.ОстаткиОбороты);
			КонецЕсли;
			СтруктураПараметров.Вставить("ТипыДокументов", ДанныеСчета["ВидСубконто" + Индекс + "ТипЗначения"]);
		КонецЕсли;
		ПараметрыФормы = Новый Структура("ПараметрыОбъекта", СтруктураПараметров);
		ОткрытьФорму("Документ.ДокументРасчетовСКонтрагентом.ФормаВыбора", ПараметрыФормы, Элемент);
		
	ИначеЕсли ДанныеСчета["ВидСубконто" + Индекс] = ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоТиповые.Партии") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		СтруктураПараметров  = Новый Структура;
		СтруктураПараметров.Вставить("Организация", СписокПараметров.Организация);
		Если СписокПараметров.Свойство("Номенклатура") Тогда
			СтруктураПараметров.Вставить("Номенклатура", СписокПараметров.Номенклатура);
		КонецЕсли;
		Если СписокПараметров.Свойство("Склад") Тогда
			СтруктураПараметров.Вставить("Склад", СписокПараметров.Склад);
		КонецЕсли;
		Если СписокПараметров.Свойство("Дата") Тогда
			СтруктураПараметров.Вставить("КонецПериода", Форма.Объект.Дата);
		КонецЕсли;
		Если СписокПараметров.Свойство("СчетУчета") Тогда
			СтруктураПараметров.Вставить("СчетУчета", СписокПараметров.СчетУчета);
		КонецЕсли;
		СтруктураПараметров.Вставить("ТипыДокументов", ДанныеСчета["ВидСубконто" + Индекс + "ТипЗначения"]);
		
		ПараметрыФормы = Новый Структура("ПараметрыОбъекта", СтруктураПараметров);
		ОткрытьФорму("Документ.Партия.ФормаВыбора", ПараметрыФормы, Элемент);
	КонецЕсли;
	
КонецПроцедуры

// Процедура - Начало выбора значения вид учета НУ
//
// Параметры:
//  Элемент				 - элемент формы 
//  ВидУчетаНУ			 - СправочникСсылка.ВидыУчетаНУ 
//  СтандартнаяОбработка - Булево 
//
Процедура НачалоВыбораЗначенияВидУчетаНУ(Элемент, ВидУчетаНУ, СтандартнаяОбработка) Экспорт
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		СтандартнаяОбработка = Ложь;		
		
		СписокВыбора = Новый СписокЗначений;
		СписокВыбора.Добавить(Справочники.ВидыУчетаНУ.НУ);
		СписокВыбора.Добавить(Справочники.ВидыУчетаНУ.ПР);
		
		ФормаВыбора = Справочники.ВидыУчетаНУ.ПолучитьФормуВыбора(, Элемент);
		ФормаВыбора.СправочникСписок.Отбор.Ссылка.ВидСравнения = ВидСравнения.ВСпискеПоИерархии;
		
		ФормаВыбора.СправочникСписок.Отбор.Ссылка.Значение = СписокВыбора;
		ФормаВыбора.СправочникСписок.Отбор.Ссылка.Использование = Истина;
		
		ФормаВыбора.НачальноеЗначениеВыбора = Элемент.Значение;			
		
		ФормаВыбора.Открыть();
	#Иначе
		
		СтандартнаяОбработка = Ложь;
		
		МассивСчетов = Новый Массив;
		МассивСчетов.Добавить(ПредопределенноеЗначение("Справочник.ВидыУчетаНУ.НУ"));
		МассивСчетов.Добавить(ПредопределенноеЗначение("Справочник.ВидыУчетаНУ.ПР"));
		МассивСчетов.Добавить(ПредопределенноеЗначение("Справочник.ВидыУчетаНУ.НеОтражаетсяВНУ"));
		МассивСчетов.Добавить(ПредопределенноеЗначение("Справочник.ВидыУчетаНУ.НеCвязаноСПолучениемСГД"));
		МассивСчетов.Добавить(ПредопределенноеЗначение("Справочник.ВидыУчетаНУ.БезвозмезднаяПередачаВыполнение"));
		МассивСчетов.Добавить(ПредопределенноеЗначение("Справочник.ВидыУчетаНУ.Прочее"));
		МассивСчетов.Добавить(ПредопределенноеЗначение("Справочник.ВидыУчетаНУ.РасходыСверхНорм"));
		МассивСчетов.Добавить(ПредопределенноеЗначение("Справочник.ВидыУчетаНУ.ШтрафыПениВБюджет"));
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Отбор", Новый Структура("Ссылка", Новый ФиксированныйМассив(МассивСчетов)));
		ПараметрыФормы.Вставить("ТекущаяСтрока", ВидУчетаНУ);
		
		ОткрытьФорму("Справочник.ВидыУчетаНУ.ФормаВыбора", ПараметрыФормы, Элемент);
	#КонецЕсли
КонецПроцедуры

// Процедура - Удалить номера ГТДПри изменении товара
//
// Параметры:
//  Форма			 - УправляемаяФорма 
//  ИмяТаблицы		 - Строка 
//  ТекущаяСтрока	 - строка таблицы 
//
Процедура УдалитьНомераГТДПриИзмененииТовара(Форма, ИмяТаблицы, ТекущаяСтрока) Экспорт
	
	НомераГТДКлиент.УдалитьНомераГТДПриИзмененииТовара(Форма, ИмяТаблицы, ТекущаяСтрока);	
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура КомментарийЗавершениеВвода(Знач ВведенныйТекст, Знач ДополнительныеПараметры) Экспорт
	
	Если ВведенныйТекст = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	РеквизитФормы = ДополнительныеПараметры.ФормаВладелец;
	
	ПутьКРеквизитуФормы = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ДополнительныеПараметры.ИмяРеквизита, ".");
	// Если реквизит вида "Объект.Комментарий" и т.п.
	Если ПутьКРеквизитуФормы.Количество() > 1 Тогда
		Для Индекс = 0 По ПутьКРеквизитуФормы.Количество() - 2 Цикл 
			РеквизитФормы = РеквизитФормы[ПутьКРеквизитуФормы[Индекс]];
		КонецЦикла;
	КонецЕсли;	
	
	РеквизитФормы[ПутьКРеквизитуФормы[ПутьКРеквизитуФормы.Количество() - 1]] = ВведенныйТекст;
	ДополнительныеПараметры.ФормаВладелец.Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Открывает форму редактирования произвольного многострочного текста.
//
// Параметры:
//  ОповещениеОЗакрытии     - ОписаниеОповещения - содержит описание процедуры, которая будет вызвана 
//                            после закрытия формы ввода текста с теми же параметрами, что и для метода
//                            ПоказатьВводСтроки.
//  МногострочныйТекст      - Строка - произвольный текст, который необходимо отредактировать;
//  Заголовок               - Строка - текст, который необходимо отобразить в заголовке формы.
//
// Пример:
//
//   Оповещение = Новый ОписаниеОповещения("КомментарийЗавершениеВвода", ЭтотОбъект);
//   ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияМногострочногоТекста(Оповещение, Элемент.ТекстРедактирования);
//
//   &НаКлиенте
//   Процедура КомментарийЗавершениеВвода(Знач ВведенныйТекст, Знач ДополнительныеПараметры) Экспорт
//      Если ВведенныйТекст = Неопределено Тогда
//		   Возврат;
//   	КонецЕсли;	
//	
//	   Объект.МногострочныйКомментарий = ВведенныйТекст;
//	   Модифицированность = Истина;
//   КонецПроцедуры
//
Процедура ПоказатьФормуРедактированияМногострочногоТекста(Знач ОповещениеОЗакрытии, 
	Знач МногострочныйТекст, Знач Заголовок = Неопределено) Экспорт
	
	Если Заголовок = Неопределено Тогда
		ПоказатьВводСтроки(ОповещениеОЗакрытии, МногострочныйТекст,,, Истина);
	Иначе
		ПоказатьВводСтроки(ОповещениеОЗакрытии, МногострочныйТекст, Заголовок,, Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

