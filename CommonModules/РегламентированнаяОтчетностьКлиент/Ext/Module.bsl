////////////////////////////////////////////////////////////////////////////////
// РегламентированнаяОтчетностьКлиент: 
//  
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

Функция СоответствиеФорматовРасширениям() Экспорт
	
	СоответствиеФорматаРасширению = Новый Соответствие;
	СоответствиеФорматаРасширению.Вставить(ТипФайлаТабличногоДокумента.PDF,     "pdf");
	СоответствиеФорматаРасширению.Вставить(ТипФайлаТабличногоДокумента.XLSX,    "xlsx");
	СоответствиеФорматаРасширению.Вставить(ТипФайлаТабличногоДокумента.XLS,     "xls");
	СоответствиеФорматаРасширению.Вставить(ТипФайлаТабличногоДокумента.ODS,     "ods");
	СоответствиеФорматаРасширению.Вставить(ТипФайлаТабличногоДокумента.MXL,     "mxl");
	СоответствиеФорматаРасширению.Вставить(ТипФайлаТабличногоДокумента.DOCX,    "docx");
	СоответствиеФорматаРасширению.Вставить(ТипФайлаТабличногоДокумента.HTML,    "html");
	СоответствиеФорматаРасширению.Вставить(ТипФайлаТабличногоДокумента.TXT,     "txt");
	СоответствиеФорматаРасширению.Вставить(ТипФайлаТабличногоДокумента.ANSITXT, "txt");
	СоответствиеФорматаРасширению.Вставить(ТипФайлаТабличногоДокумента.PDF,     "pdf");
	СоответствиеФорматаРасширению.Вставить(ТипФайлаТабличногоДокумента.PDF,     "pdf");
	
	Возврат СоответствиеФорматаРасширению;
	
КонецФункции

Функция ПолучитьОбщуюФормуПоИмени(ИмяФормы, Параметры = Неопределено, Владелец = Неопределено, КлючУникальности = Неопределено) Экспорт
		
	Попытка
		
		Возврат ПолучитьФорму("Обработка.ОбщиеОбъектыРегламентированнойОтчетности.Форма." + ИмяФормы, Параметры, Владелец, КлючУникальности);
		
	Исключение
		
		Возврат Неопределено;
		
	КонецПопытки;
	
КонецФункции

Функция ОткрытьОбщуюФормуПоИмени(ИмяФормы, Параметры = Неопределено, Владелец = Неопределено, КлючУникальности = Неопределено, ОписаниеОповещенияОЗакрытии = Неопределено, РежимОткрытияОкна = Неопределено) Экспорт
	
	Попытка
		
		ОткрытьФорму("Обработка.ОбщиеОбъектыРегламентированнойОтчетности.Форма." + ИмяФормы, Параметры, Владелец, КлючУникальности,,, ОписаниеОповещенияОЗакрытии, РежимОткрытияОкна);
		Возврат Истина;
		
	Исключение
		
		Возврат Ложь;
		
	КонецПопытки;
	
КонецФункции

Функция ОсновнаяФормаОрганизацияНеЗаполненаВывестиТекст() Экспорт

	Возврат НСтр("ru='Не выбрана организация.'");

КонецФункции

Процедура ОткрытьФормуПредварительногоПросмотра(Форма, ВидПечати, ПризнакНумеруемыхФорм = Истина, СписокПечатаемыхЛистов) Экспорт;

	ПараметрыФормы = Новый Структура;
	
	ПараметрыФормы.Вставить("СписокПечатаемыхЛистов", СписокПечатаемыхЛистов);
	ПараметрыФормы.Вставить("ВидПечати",              ВидПечати);
	ПараметрыФормы.Вставить("ЗаголовокФормы",         Форма.Заголовок);
	
	ПредПросмотр = ПолучитьОбщуюФормуПоИмени("ПечатьРегламентированныхОтчетов", ПараметрыФормы, Форма, Форма.УникальныйИдентификатор);
	
	СписокПечатаемыхЛистов.Очистить();
	
	Если НЕ ПредПросмотр = Неопределено Тогда
		
		Если ВидПечати = "ПечататьСразу" Тогда
			
			ПредПросмотр.ПечататьСразу();
		
		Иначе
			
			ПредПросмотр.ЗакрыватьПриЗакрытииВладельца = Ложь;
		
			ПредПросмотр.Открыть();
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

Процедура ПоказатьСтраницыОтчетаНаКлиенте(Форма) Экспорт

	Если ТипЗнч(Форма.мДеревоВыбранныхСтраниц) <> Тип("ДанныеФормыДерево") Тогда
		Возврат;
	КонецЕсли;
    
	// обновляем исходное дерево значений 
	КопироватьДанныеФормы(Форма.мДеревоВыбранныхСтраниц, Форма.мДеревоСтраницОтчета);
	
	Если РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(Форма.СписокФормДерева.ПолучитьЭлементы(), Новый Структура("ПоказатьСтраницу", Истина)) = Неопределено Тогда
		Форма.Элементы.Отчет.Видимость = Ложь;
	ИначеЕсли Форма.Элементы.Отчет.Видимость = Ложь Тогда
		Форма.Элементы.Отчет.Видимость = Истина;
	КонецЕсли;
		
КонецПроцедуры

Процедура ОткрытьРегОтчетКалендарь(ИсточникОтчета, ДатаНач, ДатаКон, Периодичность, ОрганизацияОтбор) Экспорт
	ПравоДоступаКОтчету = РегламентированнаяОтчетностьВызовСервера.ПравоДоступаКРегламентированномуОтчету(ИсточникОтчета);
	Если ПравоДоступаКОтчету = Ложь Тогда
		ПоказатьПредупреждение(,НСтр("ru = 'Недостаточно прав!'"));
		Возврат;
	ИначеЕсли ПравоДоступаКОтчету = Неопределено Тогда
		ПоказатьПредупреждение(,НСтр("ru = 'Отчет не найден!'"));
		Возврат;
	КонецЕсли;

	РегламентированнаяОтчетностьВызовСервера.ПроверитьДоступностьОтчета(ИсточникОтчета, ДатаНач, ДатаКон, Периодичность, ОрганизацияОтбор);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация", ОрганизацияОтбор);
	ПараметрыФормы.Вставить("мДатаНачалаПериодаОтчета", ДатаНач);
	ПараметрыФормы.Вставить("мДатаКонцаПериодаОтчета", ДатаКон);
	ПараметрыФормы.Вставить("мПериодичность", Периодичность);
	
	ОткрытьФорму("Отчет." + ИсточникОтчета + ".Форма.ОсновнаяФорма", ПараметрыФормы);

КонецПроцедуры

Функция ОпределитьПризнакАвтоЗаполненияФормы(СтрокаФормыВДеревеФорм) Экспорт
	
	Если СтрокаФормыВДеревеФорм <> Неопределено Тогда
		Если СтрокаФормыВДеревеФорм.Автозаполнение = 1 Тогда
			ПризнакАвтоЗаполнения = Истина;
		Иначе
			ПризнакАвтоЗаполнения = Ложь;
		КонецЕсли;
	Иначе
		ПризнакАвтоЗаполнения = Ложь;
	КонецЕсли;
	
	Возврат ПризнакАвтоЗаполнения;
	
КонецФункции // ОпределитьПризнакАвтоЗаполненияФормы()


////////////////////////////////////////////////////////////////////////////////
// Печать и выгрузка отчетов

// Функция выводит на печать/предварительный просмотр регламентированные отчеты.
//
// Возвращаемое значение: ложь - если не был найден регл. отчет.
//
// Параметры:
//  СписокСсылокНаРеглОтчеты - список ссылок на регламентированные отчеты.
//  ВидПечати                - вид печати ("ПоказатьБланк" или "ПечататьСразу").
//
Функция НапечататьОтчеты(СписокСсылокНаРеглОтчеты, ВидПечати = "ПоказатьБланк") Экспорт
	
	Для Каждого Стр Из СписокСсылокНаРеглОтчеты Цикл
		
		ОбработкаПрерыванияПользователя();
		
		Попытка
			
			ПредставлениеДокументаРеглОтч = "";
			
			Отчет = ИнициализацияОтчета(Стр.Значение, ПредставлениеДокументаРеглОтч);
			Если Отчет = Неопределено Тогда
				Возврат Ложь;
			КонецЕсли;
						
			Отчет.Печать(ВидПечати, Истина);
			Отчет = Неопределено;
			
		Исключение
						
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1. Не удалось напечатать отчет! Вероятно, отчетом не предусмотрена возможность печати без открытия формы.'"), ПредставлениеДокументаРеглОтч);

			Сообщение.Сообщить();
            						
		КонецПопытки;
		
	КонецЦикла;
	
КонецФункции

Функция ИнициализацияОтчета(Док, ПредставлениеДокументаРеглОтч = Неопределено) Экспорт
	
	ПараметрыФормыИзСохраненногоОтчета = РегламентированнаяОтчетностьВызовСервера.ПолучитьПараметрыФормыИзСохраненногоОтчета(Док, ПредставлениеДокументаРеглОтч);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("мДатаНачалаПериодаОтчета", ПараметрыФормыИзСохраненногоОтчета.мДатаНачалаПериодаОтчета);
	ПараметрыФормы.Вставить("мДатаКонцаПериодаОтчета",  ПараметрыФормыИзСохраненногоОтчета.мДатаКонцаПериодаОтчета);
	ПараметрыФормы.Вставить("мСохраненныйДок",          ПараметрыФормыИзСохраненногоОтчета.мСохраненныйДок);
	ПараметрыФормы.Вставить("мПериодичность",           ПараметрыФормыИзСохраненногоОтчета.мПериодичность);
	ПараметрыФормы.Вставить("Организация",              ПараметрыФормыИзСохраненногоОтчета.Организация);
	ПараметрыФормы.Вставить("мВыбраннаяФорма",          ПараметрыФормыИзСохраненногоОтчета.мВыбраннаяФорма);
	ПараметрыФормы.Вставить("БезОткрытияФормы",         Истина);
	
	ВыбраннаяФорма = ПараметрыФормыИзСохраненногоОтчета.мВыбраннаяФорма;
	
	ТекОтчет = РегламентированнаяОтчетностьВызовСервера.ИнициализироватьОтчет(ПараметрыФормыИзСохраненногоОтчета.ИсточникОтчета);
	
	Если ТекОтчет = Неопределено Тогда
				
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Не удалось получить отчет!'");
		Сообщение.Сообщить();
		
		Возврат Неопределено;
		
	КонецЕсли;  	

	Попытка
		ПолныйПутьКФорме = РегламентированнаяОтчетностьВызовСервера.ПолныйПутьКФорме(ПараметрыФормыИзСохраненногоОтчета.ИсточникОтчета, ВыбраннаяФорма);
		
		ВыбФормаОтчета = ПолучитьФорму(ПолныйПутьКФорме, ПараметрыФормы, , Новый УникальныйИдентификатор);
	Исключение
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Устаревшая редакция формы отчета не поддерживается текущей версией конфигурации.'");
		Сообщение.Сообщить();
		
		Возврат Неопределено;
		
	КонецПопытки;    
	
	Попытка
		
		Если НЕ РегламентированнаяОтчетностьВызовСервера.ВерсияФормыСовпадаетСВерсиейСохраненногоОтчета(Док, ВыбФормаОтчета.СтруктураРеквизитовФормы.мВерсияФормы) Тогда
			Возврат Неопределено;
		КонецЕсли;
		
	Исключение
	Конецпопытки;
		
	Возврат ВыбФормаОтчета;
	
КонецФункции

// Функция выгружает в электронном виде регламентированные отчеты.
//
// Возвращаемое значение: истина - выгрузка выполнена,
//                        ложь   - выгрузка прервана.
//
// Параметры:
//  СписокСсылокНаРеглОтчеты - список ссылок на регламентированные отчеты.
//	КаталогСохранения        – каталог, в котором будет сохранен сформированный файл выгрузки.
//  СообщенияОбОшибках       - массив структур, содержащий сообщения об ошибках.
// 							   Если параметр не указан, то сообщения об ошибках,
// 							   обнаруженных при проверке выгрузки, выводятся
// 							   в специальной форме, иначе возвращаются в параметре.
//
// Пример:
//  СообщенияОбОшибках = Новый Массив;
//	РегламентированнаяОтчетностьКлиент.ВыгрузитьОтчеты(СписокСсылокНаРеглОтчеты, "C:\Temp\", СообщенияОбОшибках);
//
Функция ВыгрузитьОтчеты(СписокСсылокНаРеглОтчеты, КаталогСохранения = Неопределено, СообщенияОбОшибках = Неопределено, ВВебКлиентеСохранятьФайлВыгрузкиИнтерактивно = Истина, ВыгружатьСОшибками = Ложь, ФайлВыгрузкиВоВременномХранилище = Неопределено, УникальныйИДФормы = Неопределено) Экспорт

	Попытка
		Если ТипЗнч(СписокСсылокНаРеглОтчеты) <> Тип("СписокЗначений") ИЛИ СписокСсылокНаРеглОтчеты.Количество() = 0 Тогда
			Возврат Ложь;
		КонецЕсли;
		
		РезультатПроверки = РегламентированнаяОтчетностьВызовСервера.ПроверитьВозможностьВыгрузки(СписокСсылокНаРеглОтчеты);
		
		Если РезультатПроверки = 1 Тогда
			
			ПоказатьПредупреждение(,НСтр("ru='У выбранных отчетов различаются реквизиты ""Организация"". Пакетная выгрузка невозможна!'"));
			
		ИначеЕсли РезультатПроверки = 2 Тогда
			
			ПоказатьПредупреждение(,НСтр("ru='У выбранных отчетов различаются даты окончания периодов составления. Пакетная выгрузка невозможна!'"));
			
		Иначе
			
			Возврат ВыгрузитьОтчетыПродолжение(
						СписокСсылокНаРеглОтчеты, 
						КаталогСохранения,
						СообщенияОбОшибках,
						ВВебКлиентеСохранятьФайлВыгрузкиИнтерактивно,
						ВыгружатьСОшибками,
						ФайлВыгрузкиВоВременномХранилище,
						УникальныйИДФормы);
						
		КонецЕсли;
		
		Возврат Истина;
		
	Исключение
		
		Возврат Ложь;
		
	КонецПопытки;
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// Печать и выгрузка отчетов

// Процедура открывает уже имеющийся документ отражения
// налоговой отчетности в регламентированном учете
//
// Параметры: РегОтчет - ссылка на документ "РегламентированныйОтчет"
//            ДокументОтраженияВУчете - ссылка на документ "ОтражениеНалоговойОтчетностиВРеглУчете"
//            Форма - форма для определения владельца
//
Процедура ОткрытьДокументОтраженияНалОтчетностиВУчете(РеглОтчет, ДокументОтраженияВУчете, Форма) Экспорт
	
	Если РеглОтчет <> Неопределено И ЗначениеЗаполнено(ДокументОтраженияВУчете) Тогда
		// открываем раннее сохраненный документ
		ПараметрыФормы = Новый Структура("Ключ", ДокументОтраженияВУчете);
		ФормаДокумента = ПолучитьФорму("Документ.ОтражениеНалоговойОтчетностиВРеглУчете.ФормаОбъекта", ПараметрыФормы, Форма);
		Если ФормаДокумента.Открыта() Тогда
			ФормаДокумента.Активизировать();
		Иначе		
			ФормаДокумента.Открыть();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ОткрытьДокументОтраженияНалОтчетностиВУчете()

// Процедура создает документ отражения
// налоговой отчетности в регламентированном учете
//
// Параметры: РегОтчет - ссылка на документ "РегламентированныйОтчет", если из вызвана из списка отчетов
//                      - объект-отчет "Регламентированный отчет", если вызван из отчета.
//            Форма - форма для определения владельца
//
Процедура СоздатьДокументОтраженияНалОтчетностиВУчете(РеглОтчет, Форма, ДополнительныеПараметрыОтражения = Неопределено) Экспорт
	
	ФормаДокумента = ПолучитьФорму("Документ.ОтражениеНалоговойОтчетностиВРеглУчете.ФормаОбъекта",, Форма);
	ДанныеФормы = ФормаДокумента.Объект;
	ВнешнийОтчет = СтрНайти(Форма.ИмяФормы, "ВнешнийОтчет.") > 0;
	ПроцедураВыполнена = РегламентированнаяОтчетностьВызовСервера.ЗаполнитьДокументОтражениеНалоговойОтчетностиВРеглУчете(РеглОтчет, ДанныеФормы, ДополнительныеПараметрыОтражения, ВнешнийОтчет);
	
	Если ТипЗнч(ПроцедураВыполнена) = Тип("Булево") И ПроцедураВыполнена Тогда
		КопироватьДанныеФормы(ДанныеФормы, ФормаДокумента.Объект);
		РаботаСДиалогамиКлиентСервер.УстановитьВидимостьСтруктурногоПодразделения(
			ФормаДокумента.Объект.Организация, ФормаДокумента.Объект.СтруктурноеПодразделение, ФормаДокумента.СтруктурноеПодразделениеОрганизация);
		РаботаСДиалогамиКлиентСервер.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(
			ФормаДокумента.Элементы.СтруктурноеПодразделениеОрганизация, ФормаДокумента.Объект.СтруктурноеПодразделение, ФормаДокумента.ПоддержкаРаботыСоСтруктурнымиПодразделениями);
		ФормаДокумента.Модифицированность = Истина;
		ФормаДокумента.Открыть();
	КонецЕсли;

КонецПроцедуры // СоздатьДокументОтраженияНалОтчетностиВУчете()


////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция ВыгрузитьОтчетыПродолжение(СписокСсылокНаРеглОтчеты, КаталогСохранения = Неопределено, СообщенияОбОшибках = Неопределено, ВВебКлиентеСохранятьФайлВыгрузкиИнтерактивно = Истина, ВыгружатьСОшибками = Ложь, ФайлВыгрузкиВоВременномХранилище = Неопределено, УникальныйИДФормы = Неопределено) Экспорт

	Если ФайлВыгрузкиВоВременномХранилище = Неопределено Тогда
		
		// определяем каталог выгрузки
		Если КаталогСохранения = Неопределено Тогда
			
			#Если НЕ ВебКлиент Тогда
				
				ПутьВыгрузки = РегламентированнаяОтчетностьКлиент.ПолучитьПутьВыгрузки();
				Если ПутьВыгрузки = Ложь Тогда
					Возврат Ложь;
				КонецЕсли;
				
			#КонецЕсли
			
		Иначе
			
			ПутьВыгрузки = КаталогСохранения;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ПолучитьПутьВыгрузки(ПутьДляВыгрузки = Неопределено) Экспорт
	
	РазделительПутиОС = ПолучитьРазделительПути();
	Длг = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	Длг.Заголовок = НСтр("ru = 'Укажите каталог'");
	Длг.Каталог   = ПутьДляВыгрузки;
	Если Длг.Выбрать() Тогда
		ПутьДляВыгрузки = Длг.Каталог+?(Прав(Длг.Каталог, 1) <> РазделительПутиОС, РазделительПутиОС, "");
		Возврат ПутьДляВыгрузки;
	Иначе
		Возврат Ложь;
	КонецЕсли;

КонецФункции

// Функция осуществляет проверку заполнять форму или нет и 
// осуществляет очистку формы и первоначальное заполнение основных 
// параметров формы с помощью процедуры ЗаполнитьПараметры()
//
// Параметры:  Объект - форма регламентированного отчета,
//             КодФормы - код заполняемой формы
// 			   Перезаполнить - признак перезаполнения формы, 
//                             устанавливается в значение Истина при непосредственном заполнении формы
//                             при нажатии на кнопку "Заполнить",
//                             Устанавливается в значение Ложь при заполнении формы из родительской формы
//
Функция ПересчитыватьДанныеФормы(Форма, КодФормы, Перезаполнить) Экспорт
	
	СтрокаФормы = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(Форма.мСписокФормБезИерархии, Новый Структура("КодФормы", КодФормы));
	
	Если СтрокаФормы = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не Перезаполнить Тогда
		ПризнакАвтоЗаполнения = ОпределитьПризнакАвтоЗаполненияФормы(СтрокаФормы);
		Если Не ПризнакАвтоЗаполнения Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;

	Если Перезаполнить Тогда
		Если СтрокаФормы.Строки.Количество() > 0 Тогда
			ТекстВопроса = НСтр("ru = 'Перезаполнить данные формы и ее дополнительных форм?'");
		Иначе
			ТекстВопроса = НСтр("ru = 'Перезаполнить данные формы?'");
		КонецЕсли;
		
		Оповещение = Новый ОписаниеОповещения("ВопросПересчитыватьДанныеФормыЗавершение", Форма, Новый Структура);		
		Оповещение.ДополнительныеПараметры.Вставить("Форма",    Форма);
		Оповещение.ДополнительныеПараметры.Вставить("КодФормы", КодФормы);
		
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, ,КодВозвратаДиалога.Да);
	КонецЕсли;
			
КонецФункции // ПересчитыватьДанныеФормы()

Процедура ВопросПересчитыватьДанныеФормыЗавершение(Знач Результат, Знач ДополнительныеПараметры) Экспорт 
	Если Результат = КодВозвратаДиалога.Нет Тогда
	Иначе
		Форма = ДополнительныеПараметры.Форма;
		КодФормы = ДополнительныеПараметры.КодФормы;
		Форма.Очистить(КодФормы,Истина);		 		
		//Возврат Истина;
	КонецЕсли;	
КонецПроцедуры

// Очистка реглотчетов
Процедура ОчиститьРеглОтчет(Форма, ВидОчистки) Экспорт	
		
	//рмаЗаполнена = РегламентированнаяОтчетностьКлиентСервер.форма.ИмяФормы, Форма.мСписокФормБезИерархии);
	Вложенность = Ложь;
	//
	Если ВидОчистки = "ОчиститьФормуИПриложения" Тогда				
		ТекстВопроса = НСТР("ru = 'Очистить форму и ее приложения?'");		
		Вложенность = Истина;						
	Иначе	
		ТекстВопроса = НСТР("ru = 'Очистить данные формы?'");
		Вложенность = Ложь;  		
	КонецЕсли;	
	
	Оповещение = Новый ОписаниеОповещения("ОчиститьРеглОтчетЗавершение", Форма, Новый Структура);		
	Оповещение.ДополнительныеПараметры.Вставить("Форма",    Форма);
	Оповещение.ДополнительныеПараметры.Вставить("КодФормы", Форма.КодФормы);
	Оповещение.ДополнительныеПараметры.Вставить("ОчищатьПриложения", Вложенность);
		
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена, ,КодВозвратаДиалога.Да);
	
КонецПроцедуры // ОчиститьРеглОтчет()
