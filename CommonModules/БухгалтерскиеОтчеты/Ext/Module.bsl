////////////////////////////////////////////////////////////////////////////////
// Функции и процедуры обеспечения формирования бухгалтерских отчетов.
//  
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

Процедура ОбработатьНаборДанныхСвязаннойИнформации(Схема, ИмяНабора, ПараметрыПоляВладельца, ИмяПоляПрефикс = "Субконто") Экспорт
	
	Если ПараметрыПоляВладельца.ИндексСубконто > 0 Тогда
		ПутьКДаннымОсновногоПоля = "";
		ЗаголовокОсновногоПоля   = "";
		Для Каждого ПолеНабора Из Схема.НаборыДанных[ИмяНабора].Поля Цикл
			Если Найти(ПолеНабора.Поле, "СвязанноеПолеСсылка") = 1 Тогда
				ПутьКДаннымОсновногоПоля = ПолеНабора.ПутьКДанным;
				ЗаголовокОсновногоПоля   = СтрЗаменить(ПолеНабора.Заголовок, ".Ссылка", "");
			КонецЕсли;
		КонецЦикла;
		Для Каждого ПолеНабора Из Схема.НаборыДанных[ИмяНабора].Поля Цикл
			Если Найти(ПолеНабора.Поле, "СвязанноеПоле") = 1 Тогда
				ПолеНабора.ПутьКДанным = СтрЗаменить(ПолеНабора.ПутьКДанным, ПутьКДаннымОсновногоПоля, ИмяПоляПрефикс + ПараметрыПоляВладельца.ИндексСубконто);
				ПолеНабора.Заголовок   = СтрЗаменить(ПолеНабора.Заголовок, ЗаголовокОсновногоПоля, ПараметрыПоляВладельца.ЗаголовокСубконто);
				ПолеНабора.ОграничениеИспользования.Группировка = Истина;
				ПолеНабора.ОграничениеИспользования.Поле        = Ложь;
				ПолеНабора.ОграничениеИспользования.Условие     = Истина;
				ПолеНабора.ОграничениеИспользования.Порядок     = Ложь;
			КонецЕсли;
		КонецЦикла;
		Для Каждого Связь Из Схема.СвязиНаборовДанных Цикл
			Если Связь.НаборДанныхПриемник = ИмяНабора Тогда
				Связь.ВыражениеИсточник = ИмяПоляПрефикс + ПараметрыПоляВладельца.ИндексСубконто;
				Связь.ВыражениеПриемник = ИмяПоляПрефикс + ПараметрыПоляВладельца.ИндексСубконто;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Для Каждого ПолеНабора Из Схема.НаборыДанных[ИмяНабора].Поля Цикл
			Если Найти(ПолеНабора.Поле, "СвязанноеПоле") = 1 Тогда
				ПолеНабора.ОграничениеИспользования.Группировка = Истина;
				ПолеНабора.ОграничениеИспользования.Поле        = Истина;
				ПолеНабора.ОграничениеИспользования.Условие     = Истина;
				ПолеНабора.ОграничениеИспользования.Порядок     = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Функция ДобавитьОтборПоОрганизациямИПодразделениям(ЭлементСтруктуры, ПараметрыОтчета, Использование = Истина, ДтКт = Ложь, ИмяПоляПодразделения = "Подразделение") Экспорт
	
	ПолеОрганизация 	= Новый ПолеКомпоновкиДанных("Организация");
	ПолеПодразделение 	= Новый ПолеКомпоновкиДанных(ИмяПоляПодразделения);
	
	Если ТипЗнч(ЭлементСтруктуры) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		Отбор = ЭлементСтруктуры.Настройки.Отбор;
	Иначе
		Отбор = ЭлементСтруктуры;
	КонецЕсли;
	
	КоличествоЭлементовОтбора = Отбор.Элементы.Количество();
	Для СчетчикЭлементов = 1 По КоличествоЭлементовОтбора Цикл
		ЭлементОтбора = Отбор.Элементы[КоличествоЭлементовОтбора - СчетчикЭлементов];
		Если ЭлементОтбора.Представление = "###ОтборПоОрганизации###" Тогда
			Отбор.Элементы.Удалить(ЭлементОтбора);
		КонецЕсли;
	КонецЦикла;
	
	НоваяГруппаИли = Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	НоваяГруппаИли.Использование  	= Использование;
	НоваяГруппаИли.ТипГруппы 		= ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	НоваяГруппаИли.Представление 	= "###ОтборПоОрганизации###";
	
	ИспользованиеОграничения = Ложь;
	
	СписокСтруктурныхЕдиниц = ?(ПараметрыОтчета.Свойство("СписокСтруктурныхЕдиниц"), ПараметрыОтчета.СписокСтруктурныхЕдиниц, Новый СписокЗначений);
	СписокПодразделений     = ?(ПараметрыОтчета.Свойство("СписокПодразделений")    , ПараметрыОтчета.СписокПодразделений, Новый СписокЗначений);
	СписокВладельцевГоловныхПодразделений = ?(ПараметрыОтчета.Свойство("СписокВладельцевГоловныхПодразделений"), ПараметрыОтчета.СписокВладельцевГоловныхПодразделений, Новый СписокЗначений); 
	
	ДобавитьОграничениеПоПодразделениям = ДобавитьОграничениеПоПодразделениям();
		
	//В случае если в отборе нет ни одного подразделения и включен РЛС по подразделениям
	//добавим в отбор все доступные пользователю подразделения
	Если СписокСтруктурныхЕдиниц.Количество() = 0 Тогда
		Если ДобавитьОграничениеПоПодразделениям Тогда
			ТаблицаДоступныхОрганизаций = ПолучитьСписокДоступныхОрганизаций();
			ИспользованиеОграничения = Истина;
			Для Каждого СтрокаТЗ Из ТаблицаДоступныхОрганизаций Цикл 
				СписокСтруктурныхЕдиниц.Добавить(СтрокаТЗ.Организация);
			КонецЦикла;						
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого ТекОрганизация Из СписокСтруктурныхЕдиниц Цикл 
		
		НоваяГруппаИ = НоваяГруппаИли.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		НоваяГруппаИ.Использование  = Использование;
		НоваяГруппаИ.ТипГруппы 		= ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
		
		НовыйЭлемент = НоваяГруппаИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйЭлемент.Использование  = Использование;
		НовыйЭлемент.ЛевоеЗначение 	= ПолеОрганизация;
		НовыйЭлемент.ВидСравнения 	= ВидСравненияКомпоновкиДанных.Равно;
		НовыйЭлемент.ПравоеЗначение = ТекОрганизация.Значение;
		
		ТекущийСписокПодразделений = Новый СписокЗначений;
		
		Если Не ИспользованиеОграничения Тогда 
			
			ГоловноеПодразделениеДобавлено = Ложь;
			
			Для Каждого ЭлементПодразделение Из СписокПодразделений Цикл
				Подразделение = ЭлементПодразделение.Значение;
				Владелец = Подразделение.Владелец;
				Если Подразделение = Справочники.ПодразделенияОрганизаций.ПустаяСсылка()
					И СписокВладельцевГоловныхПодразделений.НайтиПоЗначению(ТекОрганизация.Значение) <> Неопределено
					И НЕ ГоловноеПодразделениеДобавлено Тогда
					ТекущийСписокПодразделений.Добавить(Подразделение);
					ГоловноеПодразделениеДобавлено = Истина;
				Иначе
					Если СписокСтруктурныхЕдиниц.НайтиПоЗначению(Владелец) <> Неопределено
						И Владелец = ТекОрганизация.Значение Тогда
						ТекущийСписокПодразделений.Добавить(Подразделение);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		//В случае если в отборе нет ни одного подразделения и включен РЛС по подразделениям
		//добавим в отбор все доступные пользователю подразделения
		Если СписокПодразделений.Количество() = 0 Тогда
			Если ДобавитьОграничениеПоПодразделениям Тогда
				ТаблицаДоступныхПодразделений = ПолучитьСписокДоступныхПодразделений(ТекОрганизация);
				Для Каждого СтрокаТЗ Из ТаблицаДоступныхПодразделений Цикл 
					ТекущийСписокПодразделений.Добавить(СтрокаТЗ.Подразделение);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		Если ТекущийСписокПодразделений.Количество() > 0 Тогда 
				
			ДоступныеПоляОтбора = Отбор.ДоступныеПоляОтбора;
			
			ГруппаПодразделений = НоваяГруппаИ.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
			ГруппаПодразделений.Использование  	= Использование;
			ГруппаПодразделений.ТипГруппы 		= ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
			
			Если ДоступныеПоляОтбора.НайтиПоле(ПолеПодразделение) <> Неопределено Тогда
				НовыйЭлемент = ГруппаПодразделений.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				НовыйЭлемент.Использование  = Использование;
				НовыйЭлемент.ЛевоеЗначение 	= ПолеПодразделение;
				НовыйЭлемент.ВидСравнения 	= ВидСравненияКомпоновкиДанных.ВСписке;
				НовыйЭлемент.ПравоеЗначение = ТекущийСписокПодразделений;
			КонецЕсли;
			
			ПодразделениеДт = Новый ПолеКомпоновкиДанных("ПодразделениеДт");
			Если ДоступныеПоляОтбора.НайтиПоле(ПодразделениеДт) <> Неопределено Тогда
				НовыйЭлемент = ГруппаПодразделений.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				НовыйЭлемент.Использование  = Использование;
				НовыйЭлемент.ЛевоеЗначение 	= ПодразделениеДт;
				НовыйЭлемент.ВидСравнения 	= ВидСравненияКомпоновкиДанных.ВСписке;
				НовыйЭлемент.ПравоеЗначение = ТекущийСписокПодразделений;				
			КонецЕсли;
			
			ПодразделениеКт = Новый ПолеКомпоновкиДанных("ПодразделениеКт");
			Если ДоступныеПоляОтбора.НайтиПоле(ПодразделениеКт) <> Неопределено Тогда
				НовыйЭлемент = ГруппаПодразделений.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				НовыйЭлемент.Использование  = Использование;
				НовыйЭлемент.ЛевоеЗначение 	= ПодразделениеКт;
				НовыйЭлемент.ВидСравнения 	= ВидСравненияКомпоновкиДанных.ВСписке;
				НовыйЭлемент.ПравоеЗначение = ТекущийСписокПодразделений;				
			КонецЕсли;
				
		КонецЕсли;
		
	КонецЦикла;	
	
	Возврат НовыйЭлемент;	
		
КонецФункции

//Функция вернёт все доступные пользователю подразделения организации
//
Функция ПолучитьСписокДоступныхОрганизаций() Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка КАК Организация,
	|	Организации.Наименование
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	НЕ Организации.ПометкаУдаления";
	
	Результат = Запрос.Выполнить();
	
	Возврат Результат.Выгрузить();
	
КонецФункции

// Подтверждает, что переданная организация входит в список доступных для пользователя.
//
// Параметры:
//  Организация  - СправочникСсылка.Организации - проверяемая организация. Может быть пустым значением.
//
// Возвращаемое значение:
//   Массив      - список из всех доступных, если было передано пустое значение;
//               - список из Организация и её доступных обособленных подразделений;
//               - пустой список, если организация недоступна для пользователя.
//
Функция СписокДоступныхОрганизаций(Организация) Экспорт
	
	ДоступныеОрганизации = ОбщегоНазначенияБКВызовСервераПовтИсп.ОрганизацииДанныеКоторыхДоступныПользователю();
	
	Если ЗначениеЗаполнено(Организация) Тогда // проверяем конкретную организацию
		
		СписокОрганизаций = Новый Массив;
		
		Если ДоступныеОрганизации.Найти(Организация) <> Неопределено Тогда
			СписокОрганизаций.Вставить(0, Организация);
		КонецЕсли;
		
		ДоступныеОрганизации = СписокОрганизаций;
		
	КонецЕсли;
	
	Возврат ДоступныеОрганизации;
	
КонецФункции

//Функция вернёт все доступные пользователю подразделения организации
//
Функция ПолучитьСписокДоступныхПодразделений(Организация = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
		
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПодразделенияОрганизаций.Ссылка КАК Подразделение
	|ИЗ
	|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
	|ГДЕ
	|	ИСТИНА В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				Справочник.ГруппыДоступа КАК ГруппыДоступа
	|			ГДЕ
	|				ГруппыДоступа.Ссылка В
	|					(ВЫБРАТЬ
	|						ГруппыДоступаПользователи.Ссылка КАК ГруппаДоступа
	|					ИЗ
	|						Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступаПользователи
	|							ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоставыГруппПользователей КАК СоставыГруппПользователей
	|							ПО
	|								СоставыГруппПользователей.Пользователь = &Пользователь
	|									И СоставыГруппПользователей.ГруппаПользователей = ГруппыДоступаПользователи.Пользователь)
	|				И ВЫБОР
	|					КОГДА ИСТИНА В
	|							(ВЫБРАТЬ ПЕРВЫЕ 1
	|								ИСТИНА
	|							ИЗ
	|								РегистрСведений.ЗначенияГруппДоступа КАК Значения
	|									ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГруппыЗначенийДоступа КАК ГруппыЗначений
	|									ПО
	|										Значения.ГруппаДоступа = ГруппыДоступа.Ссылка
	|											И Значения.ЗначениеДоступа = ПодразделенияОрганизаций.Ссылка
	|											И ГруппыЗначений.ЗначениеДоступа = ГруппыЗначений.ГруппаЗначенийДоступа)
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ ЛОЖЬ
	|				КОНЕЦ = ВЫБОР
	|					КОГДА ИСТИНА В
	|							(ВЫБРАТЬ ПЕРВЫЕ 1
	|								ИСТИНА
	|							ИЗ
	|								РегистрСведений.ЗначенияГруппДоступаПоУмолчанию КАК ЗначенияПоУмолчанию
	|							ГДЕ
	|								ЗначенияПоУмолчанию.ГруппаДоступа = ГруппыДоступа.Ссылка
	|								И ТИПЗНАЧЕНИЯ(ЗначенияПоУмолчанию.ТипЗначенийДоступа) = ТИПЗНАЧЕНИЯ(ПодразделенияОрганизаций.Ссылка)
	|								И ЗначенияПоУмолчанию.ВсеРазрешены = ЛОЖЬ)
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ ЛОЖЬ
	|				КОНЕЦ)
	|	И ПодразделенияОрганизаций.ЯвляетсяСтруктурнымПодразделением = ИСТИНА
	|";
	
	Если ТипЗнч(Организация) = Тип("СписокЗначений") Тогда 
		Запрос.Текст = Запрос.Текст + "		
		|	И ПодразделенияОрганизаций.Владелец В (&Организация)";
		Запрос.УстановитьПараметр("Организация"	, Организация);
	ИначеЕсли ТипЗнч(Организация) = Тип("СправочникСсылка.Организации") Тогда
		Запрос.Текст = Запрос.Текст + "				   
		|	И ПодразделенияОрганизаций.Владелец = &Организация";		
		Запрос.УстановитьПараметр("Организация"	, Организация);  
	ИначеЕсли ТипЗнч(Организация) = Тип("ЭлементСпискаЗначений") Тогда
		Запрос.Текст = Запрос.Текст + "				   
		|	И ПодразделенияОрганизаций.Владелец = &Организация";		
		Запрос.УстановитьПараметр("Организация"	, Организация.Значение);
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "		
	
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&ПустаяСылкаПодразделенияОрганизаций
	|ГДЕ
	|	ИСТИНА В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				Справочник.ГруппыДоступа КАК ГруппыДоступа
	|			ГДЕ
	|				ГруппыДоступа.Ссылка В
	|					(ВЫБРАТЬ
	|						ГруппыДоступаПользователи.Ссылка КАК ГруппаДоступа
	|					ИЗ
	|						Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступаПользователи
	|							ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоставыГруппПользователей КАК СоставыГруппПользователей
	|							ПО
	|								СоставыГруппПользователей.Пользователь = &Пользователь
	|									И СоставыГруппПользователей.ГруппаПользователей = ГруппыДоступаПользователи.Пользователь)
	|				И ВЫБОР
	|					КОГДА ИСТИНА В
	|							(ВЫБРАТЬ ПЕРВЫЕ 1
	|								ИСТИНА
	|							ИЗ
	|								РегистрСведений.ЗначенияГруппДоступа КАК Значения
	|									ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГруппыЗначенийДоступа КАК ГруппыЗначений
	|									ПО
	|										Значения.ГруппаДоступа = ГруппыДоступа.Ссылка
	|											И Значения.ЗначениеДоступа = &ПустаяСылкаПодразделенияОрганизаций
	|											И ГруппыЗначений.ЗначениеДоступа = ГруппыЗначений.ГруппаЗначенийДоступа)
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ ЛОЖЬ
	|				КОНЕЦ = ВЫБОР
	|					КОГДА ИСТИНА В
	|							(ВЫБРАТЬ ПЕРВЫЕ 1
	|								ИСТИНА
	|							ИЗ
	|								РегистрСведений.ЗначенияГруппДоступаПоУмолчанию КАК ЗначенияПоУмолчанию
	|							ГДЕ
	|								ЗначенияПоУмолчанию.ГруппаДоступа = ГруппыДоступа.Ссылка
	|								И ТИПЗНАЧЕНИЯ(ЗначенияПоУмолчанию.ТипЗначенийДоступа) = ТИПЗНАЧЕНИЯ(&ПустаяСылкаПодразделенияОрганизаций)
	|								И ЗначенияПоУмолчанию.ВсеРазрешены = ЛОЖЬ)
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ ЛОЖЬ
	|				КОНЕЦ)";
	
	Запрос.УстановитьПараметр("ПустаяСылкаПодразделенияОрганизаций", Справочники.ПодразделенияОрганизаций.ПустаяСсылка());
	Запрос.УстановитьПараметр("Пользователь", Пользователи.ТекущийПользователь());
	
	Результат = Запрос.Выполнить();
	
	Возврат Результат.Выгрузить();
	
КонецФункции

Функция ДобавитьОграничениеПоПодразделениям() Экспорт
	
	Если  ПолучитьФункциональнуюОпцию("ПоддержкаРаботыСоСтруктурнымиПодразделениями") Тогда
		
		Возврат УправлениеДоступомБК.ЕстьОграничениеПоСтруктурномуПодразделениюНаУровнеЗаписи(Пользователи.ТекущийПользователь())
		
	Иначе 
		
		Возврат Ложь;
		
	КонецЕсли;	
	
КонецФункции 

// Возвращает списки счетов расчетов с поставщиками.
//
// Параметры:
//	Структура - Содержит ключи:
//		* СчетаСДокументомРасчетов - СписокЗначений - Список счетов с субконто документы расчетов.
//		* СчетаБезДокументаРасчетов - СписокЗначений - Список счетов без субконто документы расчетов.
//
Функция СчетаУчетаРасчетовПоставщиков() Экспорт

	Возврат СчетаУчетаРасчетов(2);

КонецФункции

// Возвращает списки счетов расчетов с покупателями.
//
// Параметры:
//	Структура - Содержит ключи:
//		* СчетаСДокументомРасчетов - СписокЗначений - Список счетов с субконто документы расчетов.
//		* СчетаБезДокументаРасчетов - СписокЗначений - Список счетов без субконто документы расчетов.
//
Функция СчетаУчетаРасчетовПокупателей() Экспорт

	Возврат СчетаУчетаРасчетов(1);

КонецФункции

Функция СчетаУчетаРасчетов(Вариант)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ТиповойВидыСубконто.Ссылка,
	|	ТиповойВидыСубконто.ВидСубконто
	|ПОМЕСТИТЬ ВыбранныеСчета
	|ИЗ
	|	ПланСчетов.Типовой.ВидыСубконто КАК ТиповойВидыСубконто
	|ГДЕ
	|	ТиповойВидыСубконто.ВидСубконто В(&ВидыСубконтоКД)
	|	И НЕ ТиповойВидыСубконто.Ссылка.Забалансовый
	|	И (ТиповойВидыСубконто.Ссылка В ИЕРАРХИИ (&СчетаРасчетов)
	|			ИЛИ ТиповойВидыСубконто.Ссылка В (&СчетаПользователя))
	|	И НЕ ТиповойВидыСубконто.Ссылка В ИЕРАРХИИ (&ИсключенныеСчета)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТиповойВидыСубконто.Ссылка,
	|	ТиповойВидыСубконто.ВидСубконто
	|ПОМЕСТИТЬ ВыбранныеСчетаДокументы
	|ИЗ
	|	ПланСчетов.Типовой.ВидыСубконто КАК ТиповойВидыСубконто
	|ГДЕ
	|	ТиповойВидыСубконто.ВидСубконто В(&ВидСубконтоДокументРасчетов)
	|	И НЕ ТиповойВидыСубконто.Ссылка.Забалансовый
	|	И (ТиповойВидыСубконто.Ссылка В ИЕРАРХИИ (&СчетаРасчетов)
	|			ИЛИ ТиповойВидыСубконто.Ссылка В (&СчетаПользователя))
	|	И НЕ ТиповойВидыСубконто.Ссылка В ИЕРАРХИИ (&ИсключенныеСчета)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТиповойВидыСубконто.Ссылка КАК Счет,
	|	ЕСТЬNULL(ВыбранныеСчетаДокументы.Ссылка ССЫЛКА ПланСчетов.Типовой, ЛОЖЬ) КАК ЕстьДокументРасчетов
	|ПОМЕСТИТЬ Счета
	|ИЗ
	|	ВыбранныеСчета КАК ТиповойВидыСубконто
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВыбранныеСчетаДокументы КАК ВыбранныеСчетаДокументы
	|		ПО ТиповойВидыСубконто.Ссылка = ВыбранныеСчетаДокументы.Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Счета.Счет
	|ИЗ
	|	Счета КАК Счета
	|ГДЕ
	|	Счета.ЕстьДокументРасчетов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Счета.Счет
	|ИЗ
	|	Счета КАК Счета
	|ГДЕ
	|	НЕ Счета.ЕстьДокументРасчетов";
	
	
	ВидыСубконтоКД = Новый СписокЗначений;
	ВидыСубконтоКД.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Контрагенты);
	ВидыСубконтоКД.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Договоры);
	
	Запрос.УстановитьПараметр("ВидыСубконтоКД", ВидыСубконтоКД);
	
	Запрос.УстановитьПараметр("ВидСубконтоДокументРасчетов", 		ПланыВидовХарактеристик.ВидыСубконтоТиповые.ДокументыРасчетовСКонтрагентами);
	
	Запрос.УстановитьПараметр("СчетаРасчетов"    , БухгалтерскиеОтчетыВызовСервера.ВозвратитьМассивСчетовДтКтЗадолженности(?(Вариант = 2, Истина, Ложь), Истина, Истина));
	Запрос.УстановитьПараметр("ИсключенныеСчета" , БухгалтерскиеОтчетыВызовСервера.ПолучитьСписокСчетовИсключаемыхИзРасчетаЗадолженности(Вариант));	
	Запрос.УстановитьПараметр("СчетаПользователя", БухгалтерскиеОтчетыВызовСервера.ПолучитьСписокСчетовПользователяДляРасчетаЗадолженности(Вариант));	

	
	Счета = Новый Структура("СчетаСДокументомРасчетов, СчетаБезДокументаРасчетов", Новый СписокЗначений, Новый СписокЗначений);
	
	Результат = Запрос.ВыполнитьПакет();
	Если Результат.Количество() = 5 Тогда
		
		Счета.Вставить("СчетаСДокументомРасчетов", Результат[3].Выгрузить().ВыгрузитьКолонку("Счет"));
		Счета.Вставить("СчетаБезДокументаРасчетов", Результат[4].Выгрузить().ВыгрузитьКолонку("Счет"));
		
	КонецЕсли;

	Возврат Счета;
	
КонецФункции

// Возвращает список счетов учета товаров.
//
// Параметры:
// ИсключаемыеСчета - Массив - Счета, которые нужно исключить из итогового списка.
//
// Возвращаемое значение:
// Массив - счета и субсчета учета товаров.
//
Функция СчетаУчетаТоваров() Экспорт
	
	СчетаУчетаТоваровПредопределенные = Новый Массив;
	СчетаУчетаТоваровПредопределенные.Добавить(ПланыСчетов.Типовой.ГотоваяПродукция);
	СчетаУчетаТоваровПредопределенные.Добавить(ПланыСчетов.Типовой.СырьеИМатериалы);
	СчетаУчетаТоваровПредопределенные.Добавить(ПланыСчетов.Типовой.Товары);

	СчетаУчетаТоваров = ПроцедурыБухгалтерскогоУчета.СформироватьМассивСубсчетов(СчетаУчетаТоваровПредопределенные);
	
	Возврат СчетаУчетаТоваров;
	
КонецФункции

// Возвращает таблицу значений с группировками отчета, в которых каждый счет встречается только один раз.
// Возвращаются только те строки, у которых в исходной таблице заполнен Счет и установлен признак Использование.
//
// Параметры:
//	ГруппировкиОтчета - ТаблицаЗначений - Исходные группировки отчета по счетам. Обязательные колонки:
//		* Счет - ПланСчетовСсылка.Типовой - Счет учета, для которого заданы настройки.
//		* Использование - Булево - Признак "включения" строки настройки для отчета.
//
// Возвращаемое значение:
//	ТаблицаЗначений - Совпадает по структуре с исходной таблицей ГруппировкиОтчета,
//  но не содержит повторяющихся строк для одного и того же счета. Дополнительно включает колонки:
//		* СчетаВИерархии - Массив - Массив субсчетов, которые необходимо учитывать по строке группировки.
//
Функция УникальныеНастройкиОтчетаПоСчетам(ГруппировкиОтчета) Экспорт
	
	// Создаем таблицу, из которой дальше будем считывать настройки группировки.
	ГруппировкиПоСубсчетам = ГруппировкиОтчета.СкопироватьКолонки();
	
	// Для счетов-групп развернем каждую строку таблицы по субсчетам.
	ГруппировкиПоСубсчетам.Колонки.Добавить("Субсчет", Новый ОписаниеТипов("ПланСчетовСсылка.Типовой"));
	ГруппировкиПоСубсчетам.Колонки.Добавить("НомерИсходнойГруппировки",        ОбщегоНазначения.ОписаниеТипаЧисло(5));
	ГруппировкиПоСубсчетам.Колонки.Добавить("ЭтоСобственнаяНастройкаСубсчета", Новый ОписаниеТипов("Булево"));
	
	НомерИсходнойГруппировки = 0;
	Для каждого СтрокаГруппировки Из ГруппировкиОтчета Цикл

		НомерИсходнойГруппировки = НомерИсходнойГруппировки + 1;
		Если НЕ СтрокаГруппировки.Использование ИЛИ НЕ ЗначениеЗаполнено(СтрокаГруппировки.Счет) Тогда
			Продолжить;
		КонецЕсли;
	
		Субсчета = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.СчетаВИерархии(СтрокаГруппировки.Счет);
		Для каждого Субсчет Из Субсчета Цикл
			НоваяСтрока = ГруппировкиПоСубсчетам.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаГруппировки);
			НоваяСтрока.Субсчет                         = Субсчет;
			НоваяСтрока.НомерИсходнойГруппировки        = НомерИсходнойГруппировки;
			// Признак того, что настройка задана для самого субсчета, а не вычислена через счет верхнего уровня.
			НоваяСтрока.ЭтоСобственнаяНастройкаСубсчета = (СтрокаГруппировки.Счет = Субсчет);
		КонецЦикла;
		
	КонецЦикла;

	// Оставим по одной строке по каждому субсчету.
	ГруппировкиПоСубсчетам.Сортировать("Субсчет, ЭтоСобственнаяНастройкаСубсчета УБЫВ", Новый СравнениеЗначений);
	
	СтрокиКУдалению = Новый Массив;
	ТекущийСубсчет  = Неопределено;
	
	Для каждого СтрокаГруппировки Из ГруппировкиПоСубсчетам Цикл
		
		Если СтрокаГруппировки.Субсчет <> ТекущийСубсчет Тогда
			// Новый субсчет, первую строку по нему оставляем, остальные удалим.
			ТекущийСубсчет = СтрокаГруппировки.Субсчет;
		Иначе
			СтрокиКУдалению.Добавить(СтрокаГруппировки);
		КонецЕсли;
	
	КонецЦикла;
	
	// Удаляем дублирующиеся строки.
	Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
		ГруппировкиПоСубсчетам.Удалить(СтрокаКУдалению);
	КонецЦикла;
	
	// Оставляем исходные колонки и формируем список субсчетов, которые относятся к конкретной строке.
	Результат = ГруппировкиПоСубсчетам.СкопироватьКолонки();
	Результат.Колонки.Добавить("СчетаВИерархии", Новый ОписаниеТипов("Массив"));
	
	ГруппировкиПоСубсчетам.Сортировать("НомерИсходнойГруппировки", Новый СравнениеЗначений);
	ТекущаяСтрока = Неопределено;
	
	Для каждого СтрокаГруппировки Из ГруппировкиПоСубсчетам Цикл
	
		Если ТекущаяСтрока = Неопределено 
			ИЛИ ТекущаяСтрока.НомерИсходнойГруппировки <> СтрокаГруппировки.НомерИсходнойГруппировки Тогда
			// Добавляем новую строку в результирующую таблицу группировок.
			ТекущаяСтрока = Результат.Добавить();
			ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаГруппировки);
		КонецЕсли;
		
		// Заполняем массив субсчетов, входящих в строку группировки.
		ТекущаяСтрока.СчетаВИерархии.Добавить(СтрокаГруппировки.Субсчет);
	
	КонецЦикла;

	// Удалим вспомогательные колонки.
	Результат.Колонки.Удалить("Субсчет");
	Результат.Колонки.Удалить("НомерИсходнойГруппировки");
	Результат.Колонки.Удалить("ЭтоСобственнаяНастройкаСубсчета");
	
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

