
#Область СлужебныйПрограммныйИнтерфейс

// Подготовить параметры проведения
//
Функция ПодготовитьПараметрыПроведения(ДокументСсылка, Отказ , БУ = Ложь, НУ = Ложь , ДополнительныеДанныеИУчетныеПолитики = Неопределено,ТребуютсяРегламентированныеПоказатели = Ложь,ПолеДатыПолученияРеглПоказателей = Неопределено,ПереопределяемыеТаблицы = Неопределено,ДополнительныеПараметрыЗапросов = Неопределено,ДополнительныеЗапросы = Неопределено) Экспорт
	
	ЕстьВзаиморасчеты = Ложь;
	
	Если ДополнительныеДанныеИУчетныеПолитики <> Неопределено Тогда
		Если ДополнительныеДанныеИУчетныеПолитики.Свойство("ЕстьВзаиморасчеты") Тогда
			ЕстьВзаиморасчеты = Истина;
		КонецЕсли;
	КонецЕсли;
	
	ИмяОбъектаМетаданных = ДокументСсылка.Метаданные().Имя;
	
	ПараметрыПроведения = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета",	Константы.ВалютаРегламентированногоУчета.Получить());
	Если ТребуютсяРегламентированныеПоказатели=Истина Тогда
		Запрос.УстановитьПараметр("ДатаРеглПоказателей",	ДокументСсылка[ПолеДатыПолученияРеглПоказателей]);
	КонецЕсли;
	Если ДополнительныеПараметрыЗапросов<>Неопределено Тогда
		Для Каждого ДополнительныйПараметр Из ДополнительныеПараметрыЗапросов Цикл
			Запрос.УстановитьПараметр(ДополнительныйПараметр.Ключ, ДополнительныйПараметр.Значение);
		КонецЦикла;
	КонецЕсли;
	
	НомераТаблиц = Новый Структура;
	
	Запрос.Текст = ТекстЗапросаРеквизитыДокумента(ИмяОбъектаМетаданных,НомераТаблиц,ТребуютсяРегламентированныеПоказатели);
	Результат = Запрос.ВыполнитьПакет();
	ТаблицаРеквизиты = Результат[НомераТаблиц["Реквизиты"]].Выгрузить();
	ПараметрыПроведения.Вставить("Реквизиты", ТаблицаРеквизиты);
	
	Реквизиты = бсо_УправлениеПроведениемДокументовСерверПереопределяемый.СтрокаТаблицыЗначенийВСтруктуру(ТаблицаРеквизиты[0]);
	
	Если БУ И НЕ Существует(Реквизиты.Организация, Реквизиты.Период, "БУ", Истина, ДокументСсылка) Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Если НУ И НЕ Существует(Реквизиты.Организация, Реквизиты.Период, "НУ", Истина, ДокументСсылка) Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат ПараметрыПроведения;
	КонецЕсли;
	
	
	Если ЕстьВзаиморасчеты Тогда
		
	Иначе
		Запрос.Текст = ТекстЗапросаВременныеТаблицыДокумента(ИмяОбъектаМетаданных,НомераТаблиц, Реквизиты);
		Если НЕ ПустаяСтрока(Запрос.Текст) Тогда 
			Результат    = Запрос.ВыполнитьПакет();
		КонецЕсли;
	КонецЕсли;
	
	Если НУ Тогда
		
		ПроверитьДобавитьКолонку(ПараметрыПроведения.Реквизиты,"НеобходимостьОтраженияВНУ");
		ПроверитьДобавитьКолонку(ПараметрыПроведения.Реквизиты,"ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль");
		ПроверитьДобавитьКолонку(ПараметрыПроведения.Реквизиты,"ВедениеУчетаВременныхРазницБалансовымМетодом");
		ПроверитьДобавитьКолонку(ПараметрыПроведения.Реквизиты,"Налогоплательщик");
		ПроверитьДобавитьКолонку(ПараметрыПроведения.Реквизиты,"ОрганизацияПлательщикНалогаНаПрибыль");
		
		ОрганизацияПлательщикНалогаНаПрибыль 			= ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период);
		ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль 	= ОрганизацияПлательщикНалогаНаПрибыль И ПроцедурыНалоговогоУчета.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль(Реквизиты.Организация, Реквизиты.Период);
		
		НеобходимостьОтраженияВНУ 						= ОрганизацияПлательщикНалогаНаПрибыль И ?(Реквизиты.Свойство("УчитыватьКПН"),Реквизиты.УчитыватьКПН И (ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль ИЛИ Реквизиты.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ),Истина);
		ВедениеУчетаВременныхРазницБалансовымМетодом    = бсо_УправлениеПроведениемДокументовСерверПереопределяемый.ВедетсяУчетВременныхРазницБалансовымМетодом(Реквизиты.Организация, Реквизиты.Период);
		
		Реквизиты.Вставить("ОрганизацияПлательщикНалогаНаПрибыль", 			 ОрганизацияПлательщикНалогаНаПрибыль);
		Реквизиты.Вставить("ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль", ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль);
		Реквизиты.Вставить("НеобходимостьОтраженияВНУ", 					 НеобходимостьОтраженияВНУ);
		Реквизиты.Вставить("ВедениеУчетаВременныхРазницБалансовымМетодом", 	 ВедениеУчетаВременныхРазницБалансовымМетодом);
		
		ПараметрыПроведения.Реквизиты.ЗаполнитьЗначения(НеобходимостьОтраженияВНУ,  				    "НеобходимостьОтраженияВНУ");
		ПараметрыПроведения.Реквизиты.ЗаполнитьЗначения(ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль, "ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль");
		ПараметрыПроведения.Реквизиты.ЗаполнитьЗначения(ВедениеУчетаВременныхРазницБалансовымМетодом,   "ВедениеУчетаВременныхРазницБалансовымМетодом");
		ПараметрыПроведения.Реквизиты.ЗаполнитьЗначения(ОрганизацияПлательщикНалогаНаПрибыль, 			"ОрганизацияПлательщикНалогаНаПрибыль");
		
		Налогоплательщик = Реквизиты.Организация;
		Если ПолучитьФункциональнуюОпцию("ПоддержкаРаботыСоСтруктурнымиПодразделениями")  Тогда
			Налогоплательщик = общ_ПереопределяемыеПроцедурыБКВызовСервераПовтИсп.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(?(Реквизиты.Свойство("СтруктурноеПодразделение"),Реквизиты.СтруктурноеПодразделение,?(Реквизиты.Свойство("СтруктурноеПодразделениеОтправитель"),Реквизиты.СтруктурноеПодразделениеОтправитель,Справочники.ПодразделенияОрганизаций.ПустаяСсылка())),
			Реквизиты.Организация,
			Перечисления.РазделыНалоговогоУчета.НДС);
		КонецЕсли;	
		
		Реквизиты.Вставить("Налогоплательщик", Налогоплательщик);
		Запрос.УстановитьПараметр("ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль", ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль);
		
		ПараметрыПроведения.Реквизиты.ЗаполнитьЗначения(Налогоплательщик, "Налогоплательщик");
	КонецЕсли;
	Если ДополнительныеДанныеИУчетныеПолитики <> Неопределено Тогда
		
	КонецЕсли;
	
	НомераТаблиц = Новый Структура;
	Запрос.Текст = "";
	
	Для Каждого ТабличнаяЧасть Из Метаданные.Документы[ИмяОбъектаМетаданных].ТабличныеЧасти Цикл
		
		ИмяТЧ = ТабличнаяЧасть.Имя;
		
		Если ПереопределяемыеТаблицы<>Неопределено И ПереопределяемыеТаблицы.Найти(ИмяТЧ)<>Неопределено Тогда
			Запрос.Текст = Запрос.Текст + Вычислить("Документы."+ИмяОбъектаМетаданных+".ТекстЗапроса"+ИмяТЧ+"(НомераТаблиц, ПараметрыПроведения, Реквизиты)");
		Иначе	
			Запрос.Текст = Запрос.Текст + ТекстЗапросаТабличнаяЧасть(ИмяОбъектаМетаданных,ИмяТЧ, НомераТаблиц, ПараметрыПроведения, Реквизиты);
		КонецЕсли;
	КонецЦикла;
	
	Если ДополнительныеЗапросы<>Неопределено Тогда
		Для Каждого ДополнительныйЗапрос Из ДополнительныеЗапросы Цикл
			Запрос.Текст = Запрос.Текст + Вычислить("Документы."+ИмяОбъектаМетаданных+".ТекстЗапроса"+ДополнительныйЗапрос+"(НомераТаблиц, ПараметрыПроведения, Реквизиты)");
		КонецЦикла;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("НеобходимостьОтраженияВНУ",	НеобходимостьОтраженияВНУ);
	Запрос.УстановитьПараметр("ВедениеУчетаВременныхРазницБалансовымМетодом",	ВедениеУчетаВременныхРазницБалансовымМетодом);
	
	Если НЕ ПустаяСтрока(Запрос.Текст) Тогда 
		Результат = Запрос.ВыполнитьПакет();
		Для Каждого НомерТаблицы Из НомераТаблиц Цикл
			ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат[НомерТаблицы.Значение].Выгрузить());
		КонецЦикла;
	КонецЕсли;
	
	Возврат ПараметрыПроведения;
	
КонецФункции

// Сформировать движения по регистрам
//
Процедура СформироватьДвиженияПоРегистрам(ТаблицаРеквизиты, ТаблицаДвижений, Движения, Отказ, ИмяТаблицы, ИмяМодуля = Неопределено,ИмяОбработчика = Неопределено, ИмяРегистра = Неопределено, УсловиеВыполнения = Неопределено) Экспорт
	
	Если ТаблицаДвижений = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизиты[0];
	
	Если УсловиеВыполнения <> Неопределено Тогда
		РезультатПроверкиУсловия = Вычислить(УсловиеВыполнения);
		Если РезультатПроверкиУсловия <> Истина Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если Реквизиты["Есть"+ИмяТаблицы] Тогда
		Если ИмяМодуля = Неопределено Тогда
			ЗарегистрироватьДвижения(Реквизиты, ТаблицаДвижений, Движения, Отказ, ИмяРегистра);
		Иначе
			Выполнить(ИмяМодуля+?(ИмяОбработчика=Неопределено,".ЗарегистрироватьДвижения"+ИмяТаблицы,"."+ИмяОбработчика)+"(Реквизиты, ТаблицаДвижений, Движения, Отказ)");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

//Процедура вызывается из форм документов, и заполняет реквизит "ВидУчетаНУ"
//
Процедура си__ЗаполнитьВидУчетаНУ(УчитыватьКПН, ВидУчетаНУ) Экспорт
	
	Если УчитыватьКПН Тогда
		ОтражатьДокументыВНалоговомУчете = ПользователиБКВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию(Пользователи.ТекущийПользователь(), "ОтражатьДокументыВНалоговомУчете"); 
		
		Если ОтражатьДокументыВНалоговомУчете И ВидУчетаНУ <> Справочники.ВидыУчетаНУ.НУ Тогда
			ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ;
		ИначеЕсли НЕ ОтражатьДокументыВНалоговомУчете ИЛИ НЕ ЗначениеЗаполнено(ВидУчетаНУ) Тогда
			ВидУчетаНУ = "";
		КонецЕсли;		
	Иначе
		// для очистки реквизита при использовании функциональной опции "Плательщик КПН"
		ВидУчетаНУ = "";
	КонецЕсли;

КонецПроцедуры

// Текст запроса временные таблицы документа
//
Функция ТекстЗапросаВременныеТаблицыДокумента(ИмяОбъектаМетаданных,НомераТаблиц, Реквизиты, ИсключаемыеТЧ = Неопределено) Экспорт
	
	ТекстЗапроса = "";
	
	Для Каждого ТабличнаяЧасть Из Метаданные.Документы[ИмяОбъектаМетаданных].ТабличныеЧасти Цикл
		
		ИмяТЧ = ТабличнаяЧасть.Имя;
		
		Если ИсключаемыеТЧ<>Неопределено И ИсключаемыеТЧ.Найти(ИмяТЧ)<>Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если Реквизиты["Есть"+ИмяТЧ]=Истина Тогда 
			НомераТаблиц.Вставить("ВременнаяТаблица"+ИмяТЧ, НомераТаблиц.Количество());
			
			ИмяТаблицыЗапроса = "Таблица"+ИмяТЧ;
			
			ТекстЗапроса = ТекстЗапроса + 
			"ВЫБРАТЬ
			|	"+ИмяТаблицыЗапроса+".Ссылка,
			|	"+ИмяТаблицыЗапроса+".НомерСтроки";
			Для Каждого Реквизит Из ТабличнаяЧасть.Реквизиты Цикл
				ТекстЗапроса = ТекстЗапроса + ",
				|	"+ИмяТаблицыЗапроса+"."+Реквизит.Имя;
			КонецЦикла;
			ТекстЗапроса = ТекстЗапроса + "
			|ПОМЕСТИТЬ "+ИмяТаблицыЗапроса+"
			|ИЗ
			|	Документ."+ИмяОбъектаМетаданных+"."+ИмяТЧ+" КАК "+ИмяТаблицыЗапроса+"
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
			|		ПО "+ИмяТаблицыЗапроса+".Ссылка = Реквизиты.Ссылка"
			+ общ_ПереопределениеПроцедурБККлиентСервер.ТекстРазделителяЗапросовПакета();
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Текст запроса реквизиты документа
//
Функция ТекстЗапросаРеквизитыДокумента(ИмяОбъектаМетаданных,НомераТаблиц,ТребуютсяРегламентированныеПоказатели = Ложь) Экспорт
	
	НомераТаблиц.Вставить("ВременнаяТаблицаСоставДокумента", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВременнаяТаблицаРеквизиты", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("Реквизиты", НомераТаблиц.Количество());
	
	Если Метаданные.Документы[ИмяОбъектаМетаданных].ТабличныеЧасти.Количество()>0 Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|";
		Первая = Истина;
		Для Каждого ТабличнаяЧасть Из Метаданные.Документы[ИмяОбъектаМетаданных].ТабличныеЧасти Цикл
			
			ИмяТЧ = ТабличнаяЧасть.Имя;
			
			ТекстЗапроса = ТекстЗапроса + ?(Первая,"",",")+ "
			|	МАКСИМУМ(СоставДокумента.Есть"+ИмяТЧ+") КАК Есть"+ИмяТЧ;
			Первая = Ложь;
		КонецЦикла;
		
		ТекстЗапроса =  ТекстЗапроса + "
		|ПОМЕСТИТЬ СоставДокумента
		|ИЗ
		|	(";
		
		ПерваяТЧ = Истина;
		Для Каждого ТабличнаяЧасть Из Метаданные.Документы[ИмяОбъектаМетаданных].ТабличныеЧасти Цикл
			
			ИмяТЧ = ТабличнаяЧасть.Имя;
			
			ТекстЗапроса = ТекстЗапроса + ?(ПерваяТЧ,"","
			|
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	") + "
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|";
			
			ПерваяТЧКор = Истина;
			Для Каждого ТабличнаяЧастьКорреспондирующая Из Метаданные.Документы[ИмяОбъектаМетаданных].ТабличныеЧасти Цикл
				
				ИмяТЧКор = ТабличнаяЧастьКорреспондирующая.Имя;
				ТекстЗапроса =  ТекстЗапроса + ?(ПерваяТЧКор,"",",") +"
				|		"+?(ИмяТЧ = ИмяТЧКор,"ИСТИНА","ЛОЖЬ")+" КАК Есть"+ИмяТЧКор;
				
				ПерваяТЧКор = Ложь;
			КонецЦикла;
			ТекстЗапроса =  ТекстЗапроса + "
			|	ИЗ
			|		Документ."+ИмяОбъектаМетаданных+"."+ИмяТЧ+" КАК ТаблицаДокумента
			|	ГДЕ
			|		ТаблицаДокумента.Ссылка = &Ссылка";
			
			ПерваяТЧ = Ложь;
		КонецЦикла;
		
		ТекстЗапроса =  ТекстЗапроса + "
		|) КАК СоставДокумента
		|;
		|";
	Иначе
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	1 КАК Поле1
		|ПОМЕСТИТЬ СоставДокумента
		|;
		|";
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса+"	
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Ссылка,
	|	Реквизиты.Дата КАК Дата,
	|	Реквизиты.Организация КАК Налогоплательщик,
	|	ВЫБОР
	|		КОГДА Реквизиты.Организация.ГоловнаяОрганизация ЕСТЬ NULL 
	|				ИЛИ Реквизиты.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА Реквизиты.Организация
	|		ИНАЧЕ Реквизиты.Организация.ГоловнаяОрганизация
	|	КОНЕЦ КАК ГоловнаяОрганизация,
	|	&ВалютаРегламентированногоУчета КАК ВалютаРегламентированногоУчета";
	Для Каждого Реквизит Из Метаданные.Документы[ИмяОбъектаМетаданных].Реквизиты Цикл
		
		ТекстЗапроса =  ТекстЗапроса + ",
		|	Реквизиты."+Реквизит.Имя+" КАК "+Реквизит.Имя;
	КонецЦикла;
	
	Если ТребуютсяРегламентированныеПоказатели Тогда
		ТекстЗапроса =  ТекстЗапроса + ",
		|	РеглПоказатели.РазмерМЗП,
		|	РеглПоказатели.РазмерМРП,
		|	РеглПоказатели.РазмерНеоблагаемогоИПНДоходаИнвалидов1_2Группы,
		|	РеглПоказатели.РазмерНеоблагаемогоИПНДоходаИнвалидов3Группы,
		|	РеглПоказатели.РазмерМЗПДляЦелейНалогообложения,
		|	РеглПоказатели.РазмерМРПДляЦелейНалогообложения";
	КонецЕсли;
	
	ТекстЗапроса =  ТекстЗапроса + "
	|ПОМЕСТИТЬ Реквизиты
	|ИЗ
	|	Документ."+ИмяОбъектаМетаданных+" КАК Реквизиты";
	
	Если ТребуютсяРегламентированныеПоказатели Тогда
		ТекстЗапроса =  ТекстЗапроса + "
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныеРасчетныеПоказатели.СрезПоследних(&ДатаРеглПоказателей,) КАК РеглПоказатели
		|		ПО ИСТИНА";
	КонецЕсли;
	
	ТекстЗапроса =  ТекстЗапроса + "
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Ссылка КАК Ссылка,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Дата КАК Дата,
	|	Реквизиты.Организация КАК Налогоплательщик,
	|	ВЫБОР
	|		КОГДА Реквизиты.Организация.ГоловнаяОрганизация ЕСТЬ NULL 
	|				ИЛИ Реквизиты.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА Реквизиты.Организация
	|		ИНАЧЕ Реквизиты.Организация.ГоловнаяОрганизация
	|	КОНЕЦ КАК ГоловнаяОрганизация,
	|	Реквизиты.ВалютаРегламентированногоУчета КАК ВалютаРегламентированногоУчета";
	Для Каждого Реквизит Из Метаданные.Документы[ИмяОбъектаМетаданных].Реквизиты Цикл
		
		ТекстЗапроса =  ТекстЗапроса + ",
		|	Реквизиты."+Реквизит.Имя+" КАК "+Реквизит.Имя;
	КонецЦикла;
	Для Каждого ТабличнаяЧасть Из Метаданные.Документы[ИмяОбъектаМетаданных].ТабличныеЧасти Цикл
		
		ИмяТЧ = ТабличнаяЧасть.Имя;
		
		ТекстЗапроса = ТекстЗапроса + ",
		|	ЕСТЬNULL(СоставДокумента.Есть"+ИмяТЧ+", ЛОЖЬ) КАК Есть"+ИмяТЧ;
		
	КонецЦикла;
	Если ТребуютсяРегламентированныеПоказатели Тогда
		ТекстЗапроса =  ТекстЗапроса + ",
		|	Реквизиты.РазмерМЗП,
		|	Реквизиты.РазмерМРП,
		|	Реквизиты.РазмерНеоблагаемогоИПНДоходаИнвалидов1_2Группы,
		|	Реквизиты.РазмерНеоблагаемогоИПНДоходаИнвалидов3Группы,
		|	Реквизиты.РазмерМЗПДляЦелейНалогообложения,
		|	Реквизиты.РазмерМРПДляЦелейНалогообложения";
	КонецЕсли;
	ТекстЗапроса =  ТекстЗапроса + "
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|		ЛЕВОЕ СОЕДИНЕНИЕ СоставДокумента КАК СоставДокумента
	|		ПО (ИСТИНА)";
	
	Возврат ТекстЗапроса + общ_ПереопределениеПроцедурБККлиентСервер.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция Существует(Организация, Период, РазделУчета = "БУ", ВыводитьСообщениеОбОтсутствииУчетнойПолитики = Ложь, ДокументСсылка = Неопределено) Экспорт
	
	ИмяФункциональнойОпции = "БухгалтерскийУчет";
	Если РазделУчета = "НУ" Тогда 
		ИмяФункциональнойОпции = "НалоговыйУчет";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УчетнаяПолитикаБухгалтерскийУчетСрезПоследних.Период
	|ИЗ
	|	РегистрСведений.УчетнаяПолитикаБухгалтерскийУчет.СрезПоследних(&Дата, Организация = &Организация) КАК УчетнаяПолитикаБухгалтерскийУчетСрезПоследних";
	
	Запрос.УстановитьПараметр("Дата", Период);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат Истина;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Проверить добавить колонку
//
Процедура ПроверитьДобавитьКолонку(ТаблицаРеквизиты,ИмяКолонки) Экспорт
	Если ТаблицаРеквизиты.Колонки.Найти(ИмяКолонки) = Неопределено Тогда
		ТаблицаРеквизиты.Колонки.Добавить(ИмяКолонки);
	КонецЕсли;
КонецПроцедуры

Функция ТекстЗапросаТабличнаяЧасть(ИмяОбъектаМетаданных,ИмяТЧ, НомераТаблиц,ПараметрыПроведения, Реквизиты)
	
	ТекстЗапроса = "";
	
	Если НЕ Реквизиты["Есть"+ИмяТЧ] Тогда
		ПараметрыПроведения.Вставить("Таблица"+ИмяТЧ, Неопределено);
	Иначе 
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	"+ИмяТЧ+".НомерСтроки КАК НомерСтроки";
		Для Каждого Реквизит Из Метаданные.Документы[ИмяОбъектаМетаданных].ТабличныеЧасти[ИмяТЧ].Реквизиты Цикл
			ТекстЗапроса = ТекстЗапроса+",
			|	"+ИмяТЧ+"."+Реквизит.Имя+" КАК "+Реквизит.Имя;
		КонецЦикла;
		ТекстЗапроса = ТекстЗапроса+"
		|ИЗ
		|	Документ."+ИмяОбъектаМетаданных+"."+ИмяТЧ+" КАК "+ИмяТЧ+"
		|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО (ИСТИНА)
		|ГДЕ "+ИмяТЧ+".Ссылка = &Ссылка"
		+ общ_ПереопределениеПроцедурБККлиентСервер.ТекстРазделителяЗапросовПакета();
		
		НомераТаблиц.Вставить("Таблица"+ИмяТЧ, НомераТаблиц.Количество());
		
	КонецЕсли;
	
	Возврат ТекстЗапроса;	
КонецФункции 

Процедура ЗарегистрироватьДвижения(Реквизиты, ТаблицаДвижений, Движения, Отказ, ИмяРегистра)
	
	Для Каждого СтрокаДвижений Из ТаблицаДвижений Цикл 
		
		НоваяСтрока = Движения[ИмяРегистра].Добавить();
		НоваяСтрока.Период 				= Реквизиты.Дата;
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Реквизиты);
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаДвижений);
	КонецЦикла;
	
	Движения[ИмяРегистра].Записывать = Истина;
	
КонецПроцедуры

#КонецОбласти
