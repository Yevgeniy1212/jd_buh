////////////////////////////////////////////////////////////////////////////////
// РасчетСебестоимости: модуль содержит процедуры расчета и корректировки
//                      фактической себестоимости, ипользующиеся в документах 
//                      "ЗакрытиеМесяца" и "КорректировкаСтоимостиСписанияТоваров".
//  
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

////////////////////////////////////////////////////////////////////////////////
// Корректировка стоимости списания товаров

// Процедура выполняет анализ сложившейся себестоимости товаров и корректирует себестоимость
// в случае необходимости
//
// Параметры:
//  СтруктураПараметров - Структура - структура, содержащая следующие ключи:
//             Организация - СправочникСсылка.Организации - организация из документа
//             СтруктурноеПодразделение - СправочникСсылка.ПодразделенияОрганизаций - подразделение организации из документа
//             Период - Дата - дата из документа
//             Регистратор - ДокументСсылка.КорректировкаСтоимостиСписанияТоваров - ссылка на документ, инициировавший корректировку себестоимости
//             ТаблицаТоваров - Массив - массив товаров, по которым необходимо скорректировать себестоимость
//             Учет - Строка - префикс учета - "БУ" или "НУ"
//             СписокНеКорректируемыхСчетов - Массив, Неопределено - массив исключаемых счетов
//             РасчетПрямыхЗатратНомер - Строка - номер итерации расчета прямых затрат
//             ЗаписьВозвратыПоПроизводству - ТаблицаЗначений - копия колонок набора записей регистра бухгалтерии "Типовой"
//             ЗаписьСведенияОКорректировкиСтоимостиПродукцииИТоваров - ТаблицаЗначений - копия регистра сведений "СведенияОКорректировкиСтоимостиПродукцииИТоваров"
//             СписокКорректируемыхДокументов - Массив, Неопределено - список документов, исключаемых из расчета
//             ТаблицаРасчетаСебестоимости - ТаблицаЗначений - таблица уже скорректированной себестоимости
//             ВидУчетаНУ - СправочникСсылка.ВидыУчетаНУ - вид учета НУ, по которому корректируется себестоимость
//  Движения - КоллекцияДвижений - коллекция движений регламентного документа
//  Отказ - Булево - признак отказа в выполнении операции
//
Процедура КорректировкаСтоимости(СтруктураПараметров, Движения, Отказ) Экспорт
	
	ПолучитьТаблицуОперацийСписания(СтруктураПараметров);
	
	РассчитатьСписаниеПоСредней(СтруктураПараметров, Движения, Отказ);
	
	НаборЗаписей = Движения[?(СтруктураПараметров.Учет = "БУ","Типовой","Налоговый")];
	Если НаборЗаписей.Количество() > 0 Тогда
		НаборЗаписей.Записать(Ложь);
	КонецЕсли;
	
	МассивКомплектов = СтруктураПараметров.МассивКомплектов;
	МассивРассчитанныхКомплектов = Новый Массив();
	
	Пока МассивКомплектов.Количество() > 0 Цикл
		
		СтруктураПараметров.Вставить("ТаблицаТоваров", МассивКомплектов);
		ПолучитьТаблицуОперацийСписания(СтруктураПараметров);
	    РассчитатьСписаниеПоСредней(СтруктураПараметров, Движения, Отказ);
		НаборЗаписей = Движения[?(СтруктураПараметров.Учет = "БУ","Типовой","Налоговый")];
		Если НаборЗаписей.Количество() > 0 Тогда
			НаборЗаписей.Записать(Ложь);
		КонецЕсли;
		
		//Запомним обработанную номенклатуру
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивРассчитанныхКомплектов, МассивКомплектов, Истина);
		
		//Заполним новый массив комплектов с проверкой на наличие такой номенклатуры
		//в составе обработанных комплектов. Это нужно что бы исключить зацикливание
		//в случаях Ном1 -> Компл1 -> Ном1
		МассивКомплектов = ОбщегоНазначенияКлиентСервер.СократитьМассив(СтруктураПараметров.МассивКомплектов, МассивРассчитанныхКомплектов);
		
	КонецЦикла;
	
	Если Движения["РеализацияТМЗ"].Количество() > 0 Тогда
		Движения["РеализацияТМЗ"].Записывать = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьДвиженияСведенияОКорректировкеСтоимостиПродукцииИТоваров(ТаблицаЗаписей, ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Если ТаблицаЗаписей <> Неопределено И ТаблицаЗаписей.Количество() <> 0 Тогда 
		
		Реквизиты = ТаблицаРеквизиты[0];
		
		ТаблицаЗаписей.ЗаполнитьЗначения(Реквизиты.Организация, "Организация");
		ТаблицаЗаписей.ЗаполнитьЗначения(Реквизиты.Период     , "ПериодРасчета");
		ТаблицаЗаписей.ЗаполнитьЗначения(Истина	              , "Активность");
		ТаблицаЗаписей.ЗаполнитьЗначения(Реквизиты.Регистратор, "Регистратор");
		
		ТаблицаЗаписей.Свернуть("Организация,СтруктурноеПодразделение,СтруктурноеПодразделениеПолучатель,ПериодРасчета,Номенклатура,Регистратор,ОперацияСписания,ОПР,КорректируемыйДокумент,НоменклатурнаяГруппаВыпуска,ПодразделениеВыпуска,СчетЗатратБУ, СтатьяЗатрат, ВидУчета","Количество,СуммаКорректировки,Себестоимость,СуммаКорректировкиВНУ");
		
		Движения.СведенияОКорректировкиСтоимостиПродукцииИТоваров.Загрузить(ТаблицаЗаписей);
		Движения.СведенияОКорректировкиСтоимостиПродукцииИТоваров.Записывать = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Расчет и корректировка себестоимости продукции

Процедура РасчетСебестоимостиПродукции(ПараметрыПроведения, Движения, Отказ) Экспорт
	
	Реквизиты = ПараметрыПроведения.Реквизиты[0];
	
	Если Реквизиты.ДопПараметры = Неопределено Тогда
		СтруктураДопПараметров = Новый Структура();
		Реквизиты.ДопПараметры = СтруктураДопПараметров;
	КонецЕсли;
	
	СтруктураДопПараметров =  Реквизиты.ДопПараметры;

	СтруктураДопПараметров.Вставить("СпособРасчетаСебестоимостиПроизводства");
	СтруктураДопПараметров.Вставить("ПорядокПеределов");
	СтруктураДопПараметров.Вставить("ПорядокПодразделенийСообщался", Ложь);
	СтруктураДопПараметров.Вставить("РасчетПрямыхЗатратНомер");
	СтруктураДопПараметров.Вставить("ВыполненоРаспределениеОПР", Ложь);
	СтруктураДопПараметров.Вставить("ДвижениеЗатратПоГПСписаннойВПроизводство", Ложь);
	
	СтруктураДопПараметров.Вставить("ВыполненоРаспределение");

	СтруктураДопПараметров.Вставить("БазаКоэффициентов");

    СтруктураДопПараметров.Вставить("НачалоПериода", НачалоМесяца(Реквизиты.Период));
    СтруктураДопПараметров.Вставить("КонецПериода", КонецМесяца(Реквизиты.Период));
	
	Реквизиты.ДопПараметры =  СтруктураДопПараметров;

	
	ЗаписьРасчетаСебестоимости = Движения.РасчетСебестоимостиПродукции.Выгрузить();
	ЗаписьРасчетаСебестоимости.Очистить();
	СтруктураДопПараметров.Вставить("ЗаписьРасчетаСебестоимости", ЗаписьРасчетаСебестоимости);
	
	ЗаписьРасчетаСебестоимости = Движения.РасчетСебестоимостиПродукции.Выгрузить();
	ЗаписьРасчетаСебестоимости.Очистить();
	СтруктураДопПараметров.Вставить("ЗаписьРасчетаСебестоимости", ЗаписьРасчетаСебестоимости);
	
	ЗаписьРасчетаРаспределенияКосвенныхРасходов = Движения.РасчетРаспределенияКосвенныхРасходов.Выгрузить();
	ЗаписьРасчетаРаспределенияКосвенныхРасходов.Очистить();
	СтруктураДопПараметров.Вставить("ЗаписьРасчетаКосвенныхРасходов", ЗаписьРасчетаРаспределенияКосвенныхРасходов);
	
	ЗаписьВозвратыПоПроизводству = Движения.Типовой.Выгрузить();
	ЗаписьВозвратыПоПроизводству.Очистить();
	СтруктураДопПараметров.Вставить("ЗаписьВозвратыПоПроизводству", ЗаписьВозвратыПоПроизводству);
	
	ЗаписьРасчетВычета = Движения.РасчетВычетаПоРеализованнымТоварам.Выгрузить();
	ЗаписьРасчетВычета.Очистить();
	СтруктураДопПараметров.Вставить("ЗаписьРасчетВычета", ЗаписьРасчетВычета);

	ЗаписьСведенияОКорректировкиСтоимостиПродукцииИТоваров = Движения.СведенияОКорректировкиСтоимостиПродукцииИТоваров.Выгрузить();
	ЗаписьСведенияОКорректировкиСтоимостиПродукцииИТоваров.Очистить();
	СтруктураДопПараметров.Вставить("ЗаписьСведенияОКорректировкиСтоимостиПродукцииИТоваров", ЗаписьСведенияОКорректировкиСтоимостиПродукцииИТоваров);

	
	Если Реквизиты.РасчетСтоимостиПродукцииБУ  Тогда
		
		СтруктураДопПараметров.Вставить("Учет", "БУ");
		СтруктураДопПараметров.Вставить("СписокНекорректируемойПродукции", Неопределено);
		СтруктураДопПараметров.Вставить("ВидУчетаНУ", Справочники.ВидыУчетаНУ.ПустаяСсылка());
			
		ЕстьОстаткиНЗПНаНачалоМесяца(Реквизиты, Перечисления.ВидыРегламентныхОпераций.РасчетСтоимостиПродукцииБУ);
		
		СтруктураДопПараметров.Вставить("НЗП", Неопределено);
		СтруктураДопПараметров.Вставить("ПорядокПеределов", Неопределено);

		//Распределение расходов основного и вспомогательного
		// производства на себестоимость выпущенной продукции (услуг).
		РасчетПорядкаПеределов(Реквизиты);
		
		РасчетПрямыхИКосвенныхРасходов(Реквизиты, Движения, Отказ);
		
		Движения.Типовой.Записать(Ложь);
		
		ЗаписьВВспомогательныеРегистрыСведений(Реквизиты, 
			СтруктураДопПараметров.ЗаписьСведенияОКорректировкиСтоимостиПродукцииИТоваров,
			РегистрыСведений.СведенияОКорректировкиСтоимостиПродукцииИТоваров,
			"Активность,Организация,СтруктурноеПодразделение,СтруктурноеПодразделениеПолучатель, ПериодРасчета,Номенклатура,Регистратор,Номенклатура,КорректируемыйДокумент,НоменклатурнаяГруппаВыпуска, ПодразделениеВыпуска, ОперацияСписания, ОПР, СчетЗатратБУ, СтатьяЗатрат","Количество,СуммаКорректировки, Себестоимость,СуммаКорректировкиВНУ", Ложь);
			
		ЗаписьВВспомогательныеРегистрыСведений(Реквизиты,
			СтруктураДопПараметров.ЗаписьРасчетаКосвенныхРасходов,
			РегистрыСведений.РасчетРаспределенияКосвенныхРасходов,
			"Организация,СтруктурноеПодразделение,ПериодРасчета,Активность,Регистратор,СчетУчета,Подразделение,СтатьяЗатрат,ПодразделениеРаспределения,НоменклатурнаяГруппаРаспределения,БазаРаспределения,СчетРаспределения,ВидОперации, ВидУчета,СтатьяЗатратРаспределения, СтруктурноеПодразделениеРаспределения, РасчетБазы, МетодРаспределенияКосвенныхРасходов",
			"Сумма,СуммаБазы", Ложь);
		
	КонецЕсли;
	
	Если Реквизиты.РасчетСтоимостиПродукцииНУ  И Реквизиты.ВедениеУчетаВременныхРазницБалансовымМетодом Тогда  
		
		СтруктураДопПараметров.Вставить("Учет", "НУ");
		СтруктураДопПараметров.Вставить("СписокНекорректируемойПродукции", Неопределено);
		
		ЕстьОстаткиНЗПНаНачалоМесяца(Реквизиты, Перечисления.ВидыРегламентныхОпераций.РасчетСтоимостиПродукцииНУ);
		
		СтруктураДопПараметров.Вставить("НЗП", Неопределено); 		
		
		Если Не СтруктураДопПараметров.ПорядокПодразделенийСообщался Тогда
			РасчетПорядкаПеределов(Реквизиты);
		Иначе // если был расчет по БУ то необходимо анализировать данные по НУ 	
			АнализДанныхПроизводства(Реквизиты);
		КонецЕсли;        				
		
		СтруктураДопПараметров.ДвижениеЗатратПоГПСписаннойВПроизводство = Ложь;
		СтруктураДопПараметров.Вставить("СписокНекорректируемойПродукции", Неопределено);
		СтруктураДопПараметров.Вставить("ВидУчетаНУ", Справочники.ВидыУчетаНУ.НУ);	
		//Для корректировки по НУ, необходимо знать корректировку по БУ
		ТаблицаРасчетаСебестоимости = ПолучитьСведенияКорректировкиСписания(Реквизиты);             									
		СтруктураДопПараметров.Вставить("ТаблицаРасчетаСебестоимости", ТаблицаРасчетаСебестоимости);
				
		РасчетПрямыхИКосвенныхРасходов(Реквизиты, Движения, Отказ);
		
		// НУ продукция может быть списана на ПР производство. Поэтому к моменту расчета ПР НУ переделы уже должны быть рассчитаны.
		СтруктураДопПараметров.Вставить("СписокНекорректируемойПродукции", Неопределено);
		
		СтруктураДопПараметров.ДвижениеЗатратПоГПСписаннойВПроизводство = Ложь;                                  
		СтруктураДопПараметров.Вставить("ВидУчетаНУ", Справочники.ВидыУчетаНУ.ПР); 
		РасчетПрямыхИКосвенныхРасходов(Реквизиты,Движения, Отказ);

		//Для Вида учета "ВР" будем только "распределять" суммы на затраты 		
		СтруктураДопПараметров.ДвижениеЗатратПоГПСписаннойВПроизводство = Ложь;
		СтруктураДопПараметров.Вставить("ВидУчетаНУ", Справочники.ВидыУчетаНУ.ВР);
		СтруктураДопПараметров.Вставить("СписокНекорректируемойПродукции", Неопределено);		
		РасчетПрямыхИКосвенныхРасходов(Реквизиты,Движения, Отказ);

		Движения.Налоговый.Записать(Ложь);
		
		Если СтруктураДопПараметров.ЗаписьСведенияОКорректировкиСтоимостиПродукцииИТоваров.Колонки.Найти("ВидУчета") = Неопределено Тогда
			СтруктураДопПараметров.ЗаписьСведенияОКорректировкиСтоимостиПродукцииИТоваров.Колонки.Добавить("ВидУчета");
		КонецЕсли;
		
		ЗаписьВВспомогательныеРегистрыСведений(Реквизиты, 
			СтруктураДопПараметров.ЗаписьСведенияОКорректировкиСтоимостиПродукцииИТоваров,
			РегистрыСведений.СведенияОКорректировкиСтоимостиПродукцииИТоваров,
			"Активность,Организация,СтруктурноеПодразделение,СтруктурноеПодразделениеПолучатель, ПериодРасчета,Номенклатура,Регистратор,Номенклатура,КорректируемыйДокумент,НоменклатурнаяГруппаВыпуска, ПодразделениеВыпуска, ОперацияСписания, ОПР, ВидУчета,СчетЗатратБУ, СтатьяЗатрат","Количество,СуммаКорректировки, Себестоимость,СуммаКорректировкиВНУ", Ложь);		
		
	КонецЕсли;

	СтруктураДопПараметров.ЗаписьРасчетаСебестоимости.Свернуть("Организация,СтруктурноеПодразделение,ПериодРасчета,Активность,Регистратор,СчетУчета,Подразделение,НоменклатурнаяГруппа,Продукция,ВидОперации,ВидУчета,СуммаПлан",
					"Сумма,СуммаНЗП");
		
	ЗаписьВВспомогательныеРегистрыСведений(Реквизиты, 
					СтруктураДопПараметров.ЗаписьРасчетаСебестоимости,
					РегистрыСведений.РасчетСебестоимостиПродукции,
					"Организация,СтруктурноеПодразделение,ПериодРасчета,Активность,Регистратор,СчетУчета,Подразделение,НоменклатурнаяГруппа,Продукция,ВидОперации, ВидУчета",
					"Сумма,СуммаНЗП,СуммаПлан", Ложь);
		
	ЗаписьВВспомогательныеРегистрыСведений(Реквизиты,
			СтруктураДопПараметров.ЗаписьРасчетаКосвенныхРасходов,
			РегистрыСведений.РасчетРаспределенияКосвенныхРасходов,
			"Организация,СтруктурноеПодразделение,ПериодРасчета,Активность,Регистратор,СчетУчета,Подразделение,СтатьяЗатрат,ПодразделениеРаспределения,НоменклатурнаяГруппаРаспределения,БазаРаспределения,СчетРаспределения,ВидОперации, ВидУчета,СтатьяЗатратРаспределения, СтруктурноеПодразделениеРаспределения, РасчетБазы, МетодРаспределенияКосвенныхРасходов",
			"Сумма,СуммаБазы", Ложь);

					
	Для Каждого Строка Из СтруктураДопПараметров.ЗаписьВозвратыПоПроизводству Цикл 
		
		Проводка = Движения.Типовой.Добавить();
				   
		Проводка.Период = Строка.Период;
		Проводка.Регистратор   = Строка.Регистратор;
		Проводка.Активность    = Истина;
		Проводка.Организация   = Строка.Организация;
		Проводка.Содержание    = НСтр("ru = 'Корректировка стоимости списания'", ОбщегоНазначения.КодОсновногоЯзыка());
		Проводка.ВидРегламентнойОперации = Строка.ВидРегламентнойОперации;
				
		Проводка.СчетКт = Строка.СчетКт;
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, Строка.СубконтоКт1);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, Строка.СубконтоКт2);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, Строка.СубконтоКт3);
				
		Проводка.СчетДт = Строка.СчетДт;
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, Строка.СубконтоДт1);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, Строка.СубконтоДт2);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, Строка.СубконтоДт3);
		
		Проводка.СтруктурноеПодразделениеДт = Строка.СтруктурноеПодразделениеДт; 
		Проводка.СтруктурноеПодразделениеКт = Строка.СтруктурноеПодразделениеКт;
				
		Проводка.Сумма = Строка.Сумма;
				
	КонецЦикла;
	
	Движения.Типовой.Записать(Ложь);
	
	СтруктураДопПараметров.ЗаписьВозвратыПоПроизводству.Очистить();   				
			
КонецПроцедуры // РасчетСебестоимостиПродукции

Процедура ДвижениеНЗП(ПараметрыПроведения, Движения, Отказ) Экспорт
	
	Реквизиты = ПараметрыПроведения.Реквизиты[0];
		
	Если Реквизиты.ДопПараметры = Неопределено Тогда
		СтруктураДопПараметров = Новый Структура();
		Реквизиты.ДопПараметры = СтруктураДопПараметров;
	КонецЕсли;
	
	СтруктураДопПараметров = Реквизиты.ДопПараметры;

	Если Реквизиты.ПереносНЗПБУ   Тогда
		
		СтруктураДопПараметров.Вставить("Учет", "БУ");
		ДвижениеНЗППоБУиНУ(Реквизиты, Движения, Отказ)		
	КонецЕсли; 	
	
	Если Реквизиты.ПереносНЗПНУ И Реквизиты.ВедениеУчетаВременныхРазницБалансовымМетодом Тогда
		
		СтруктураДопПараметров.Вставить("Учет", "НУ");
		ДвижениеНЗППоБУиНУ(Реквизиты, Движения, Отказ)		

	КонецЕсли;				
	
	Если Реквизиты.УбранФлажокПереносНЗПБУ  <> Неопределено 
		ИЛИ  Реквизиты.УбранФлажокПереносНЗПНУ <> Неопределено Тогда
		
		РезультатЗапроса = СформироватьЗапросПоДокументамНЗП(Реквизиты);
		ТаблицаДокументов = РезультатЗапроса.Выгрузить();
		
		//существуют документы "Движение НЗП"
		Если НЕ РезультатЗапроса.Пустой() Тогда
			ТекстСообщения = НСтр("ru = '
			|У текущего документа существуют подчиненные документы ""Движение НЗП"". 
			|После снятия флажка ""Перенос НЗП"" они будут удалены.'", ОбщегоНазначения.КодОсновногоЯзыка());
			
			ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации(ТекстСообщения,,, Реквизиты.Объект, Перечисления.ВидыРегламентныхОпераций.ПереносНЗПБУ, Ложь);

			Для Каждого Строка Из ТаблицаДокументов Цикл
				ТекущийДокумент = Строка.ДокументСсылка.ПолучитьОбъект();
				ТекущийДокумент.УстановитьПометкуУдаления(Истина);
			КонецЦикла;	
			
		КонецЕсли;		
	КонецЕсли;	

КонецПроцедуры

Процедура ЗаписьВВспомогательныеРегистрыСведений(Реквизиты, ТаблицаДвижений, ВспомогательныйРегистр, СтрокаГруппировки, СтрокаСуммирования, ЗаполнятьСтруктурноеПодразделение = Истина)  Экспорт
	
	Если ТаблицаДвижений.Колонки.Найти("Организация") = Неопределено Тогда
		 ТаблицаДвижений.Колонки.Добавить("Организация" , Новый ОписаниеТипов("СправочникСсылка.Организации"));
	 КонецЕсли;
	 
	Если ТаблицаДвижений.Колонки.Найти("СтруктурноеПодразделение") = Неопределено Тогда
		 ТаблицаДвижений.Колонки.Добавить("СтруктурноеПодразделение" , Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	КонецЕсли;

	Если ТаблицаДвижений.Колонки.Найти("ПериодРасчета") = Неопределено Тогда
		 ТаблицаДвижений.Колонки.Добавить("ПериодРасчета" , Новый ОписаниеТипов("Дата"));
	 КонецЕсли;
	 
	 Если ТаблицаДвижений.Колонки.Найти("Регистратор") = Неопределено Тогда
		 ТаблицаДвижений.Колонки.Добавить("Регистратор" , Новый ОписаниеТипов("ДокументСсылка.ЗакрытиеМесяца"));
	 КонецЕсли;
	 
	  Если ТаблицаДвижений.Колонки.Найти("Активность") = Неопределено Тогда
		 ТаблицаДвижений.Колонки.Добавить("Активность" , Новый ОписаниеТипов("Булево"));
	 КонецЕсли;

	ТаблицаДвижений.ЗаполнитьЗначения(Реквизиты.Организация, "Организация");
	Если ТаблицаДвижений.Колонки.Найти("СтруктурноеПодразделение")<> Неопределено И ЗаполнятьСтруктурноеПодразделение Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(Реквизиты.СтруктурноеПодразделение, "СтруктурноеПодразделение");	
	КонецЕсли;
	
	ТаблицаДвижений.ЗаполнитьЗначения(Реквизиты.Период, "ПериодРасчета");
	ТаблицаДвижений.ЗаполнитьЗначения(Истина, "Активность");
	ТаблицаДвижений.ЗаполнитьЗначения(Реквизиты.Регистратор, "Регистратор");
	ТаблицаДвижений.Свернуть(СтрокаГруппировки,СтрокаСуммирования);
	ВспомогательныйРасчет = ВспомогательныйРегистр.СоздатьНаборЗаписей();
	ВспомогательныйРасчет.Отбор.Регистратор.Установить(Реквизиты.Регистратор);
	ВспомогательныйРасчет.Прочитать();
	ВспомогательныйРасчет.Загрузить(ТаблицаДвижений);
	ВспомогательныйРасчет.Записать();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Корректировка стоимости списания товаров

Функция ПолучитьТаблицуОперацийСписания(СтруктураПараметров)
	
	Если СтруктураПараметров.Учет <> "БУ" Тогда    
		ВидУчетаНУ = СтруктураПараметров.ВидУчетаНУ;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ВложенныйЗапрос.Регистратор,
	|	ВложенныйЗапрос.Счет,
	|	ВЫБОР 
	|		КОГДА СуммовойУчет.Субконто1 
	|			ТОГДА ВложенныйЗапрос.Субконто1 
	|		ИНАЧЕ Неопределено 
	|	КОНЕЦ КАК Субконто1,
	|	ВЫБОР 
	|		КОГДА СуммовойУчет.Субконто2 
	|			ТОГДА ВложенныйЗапрос.Субконто2 
	|		ИНАЧЕ Неопределено 
	|	КОНЕЦ КАК Субконто2,
	|	ВЫБОР 
	|		КОГДА СуммовойУчет.Субконто3 
	|			ТОГДА ВложенныйЗапрос.Субконто3 
	|		ИНАЧЕ Неопределено 
	|	КОНЕЦ КАК Субконто3,
	|	ВложенныйЗапрос.КорСчет,
	|	ВложенныйЗапрос.КорСубконто1,
	|	ВложенныйЗапрос.КорСубконто2,
	|	ВложенныйЗапрос.КорСубконто3,
	|	ВложенныйЗапрос.СтруктурноеПодразделение, 
	|	ВЫБОР 
	|		КОГДА ВложенныйЗапрос.Регистратор ССЫЛКА Документ.ВозвратТоваровОтПокупателя 
	|			ТОГДА Истина 
	|		ИНАЧЕ Ложь 
	|	КОНЕЦ КАК Возврат,
	|	ВЫБОР 
	|		КОГДА (НЕ (ВложенныйЗапрос.КорНоменклатура) ЕСТЬ NULL) И (ВложенныйЗапрос.КорСчетНоменклатуры) 
	|			ТОГДА ВложенныйЗапрос.КорНоменклатура 
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО 
	|	КОНЕЦ КАК Комплектация,
	|	СУММА(ВложенныйЗапрос.Сумма) КАК Сумма,
	|	СУММА(ВложенныйЗапрос.Количество) КАК Количество";
	Если СтруктураПараметров.Учет <> "БУ"  Тогда
		Запрос.Текст = Запрос.Текст + ",
		|	ВложенныйЗапрос.ВидУчета КАК ВидУчета";
	КонецЕсли;
	Запрос.Текст = Запрос.Текст + "
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаСписания.Регистратор КАК Регистратор,
	|		ТаблицаСписания.Счет 		КАК Счет,
	|		ТаблицаСписания.КорСчет 	КАК КорСчет,
	|		ТаблицаСписания.Субконто1 	КАК Субконто1,
	|		ТаблицаСписания.Субконто2 	КАК Субконто2,
	|		ТаблицаСписания.Субконто3 	КАК Субконто3,
	|		ТаблицаСписания.СтруктурноеПодразделение 	КАК СтруктурноеПодразделение,
	|		ВЫБОР 
	|			КОГДА (ТаблицаСписания.КорСчет В ИЕРАРХИИ (&СписокСчетов)) 
	|				ТОГДА ИСТИНА 
	|			ИНАЧЕ ЛОЖЬ 
	|		КОНЕЦ КАК КорСчетНоменклатуры,
	|		ТаблицаСписания.КорСубконто1 	КАК КорСубконто1,
	|		ТаблицаСписания.КорСубконто2 	КАК КорСубконто2,
	|		ТаблицаСписания.КорСубконто3 	КАК КорСубконто3,
	|		ВЫБОР 
	|			КОГДА ТаблицаСписания.Субконто1 ССЫЛКА Справочник.Номенклатура 
	|				ТОГДА ТаблицаСписания.Субконто1 
	|			КОГДА ТаблицаСписания.Субконто2 ССЫЛКА Справочник.Номенклатура 
	|				ТОГДА ТаблицаСписания.Субконто2 
	|			КОГДА ТаблицаСписания.Субконто3 ССЫЛКА Справочник.Номенклатура 
	|				ТОГДА ТаблицаСписания.Субконто3 
	|			ИНАЧЕ NULL 
	|		КОНЕЦ КАК Номенклатура,
	|		ВЫБОР 
	|			КОГДА ТаблицаСписания.КорСубконто1 ССЫЛКА Справочник.Номенклатура 
	|				ТОГДА ТаблицаСписания.КорСубконто1 
	|			КОГДА ТаблицаСписания.КорСубконто2 ССЫЛКА Справочник.Номенклатура 
	|				ТОГДА ТаблицаСписания.КорСубконто2 
	|			КОГДА ТаблицаСписания.КорСубконто3 ССЫЛКА Справочник.Номенклатура 
	|				ТОГДА ТаблицаСписания.КорСубконто3 
	|			ИНАЧЕ NULL 
	|		КОНЕЦ КАК КорНоменклатура,";
	Если СтруктураПараметров.Учет = "НУ" Тогда  			
		Запрос.Текст = Запрос.Текст + "	
		|		ТаблицаСписания.ВидУчета КАК ВидУчета,";
	КонецЕсли;	
	Запрос.Текст = Запрос.Текст + "
	|		ВЫБОР
	|			КОГДА ТаблицаСписания.Регистратор ССЫЛКА Документ.ВозвратТоваровОтПокупателя 
	|				ТОГДА ЕстьNULL(ТаблицаСписания.СуммаОборотДт, 0)
	|			ИНАЧЕ ЕстьNULL(ТаблицаСписания.СуммаОборотКт,0)
	|		КОНЕЦ КАК Сумма,
	|		ВЫБОР 
	|			КОГДА ТаблицаСписания.Регистратор ССЫЛКА Документ.ВозвратТоваровОтПокупателя 
	|				ТОГДА ЕстьNULL(ТаблицаСписания.КоличествоОборотДт, 0)
	|			ИНАЧЕ ЕстьNULL(ТаблицаСписания.КоличествоОборотКт, 0) 
	|		КОНЕЦ КАК Количество
	|	ИЗ
	|		РегистрБухгалтерии.Типовой.Обороты(
	|					&ДатаНач, 
	|					&ДатаКон, 
	|					Регистратор, 
	|					Счет В ИЕРАРХИИ (&СписокСчетов)
	|					, 
	|					, 
	|					Организация = &Организация, , ) КАК ТаблицаСписания
	|	
	|	ГДЕ
	|		НЕ (ТаблицаСписания.Регистратор ССЫЛКА Документ.ОтчетПроизводстваЗаСмену И (ТаблицаСписания.КоличествоОборотКт < 0 ИЛИ ТаблицаСписания.СуммаОборотКт < 0)) И
	|		((ТаблицаСписания.Регистратор ССЫЛКА Документ.ЗакрытиеМесяца) ИЛИ   (ТаблицаСписания.Регистратор ССЫЛКА Документ.ВозвратТоваровОтПокупателя) ИЛИ
	|		(ТаблицаСписания.КоличествоОборотКт <> 0 ИЛИ ТаблицаСписания.СуммаОборотКт <> 0) И (НЕ(ТаблицаСписания.Регистратор ССЫЛКА Документ.ПеремещениеТоваров) Или (ТаблицаСписания.Регистратор ССЫЛКА Документ.ПеремещениеТоваров И ТаблицаСписания.КорСубконто1 ССЫЛКА Справочник.Склады)))";
	
	Запрос.Текст = Запрос.Текст + "
	|		) КАК ВложенныйЗапрос
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			Типовой.Ссылка КАК Счет,
	|			МАКСИМУМ(ВЫБОР КОГДА ТиповойВидыСубконто.НомерСтроки = 1 ТОГДА ТиповойВидыСубконто.Суммовой ИНАЧЕ ЛОЖЬ КОНЕЦ) КАК Субконто1,
	|			МАКСИМУМ(ВЫБОР КОГДА ТиповойВидыСубконто.НомерСтроки = 2 ТОГДА ТиповойВидыСубконто.Суммовой ИНАЧЕ ЛОЖЬ КОНЕЦ) КАК Субконто2,
	|			МАКСИМУМ(ВЫБОР КОГДА ТиповойВидыСубконто.НомерСтроки = 3 ТОГДА ТиповойВидыСубконто.Суммовой ИНАЧЕ ЛОЖЬ КОНЕЦ) КАК Субконто3
	|		ИЗ
	|			ПланСчетов.Типовой.ВидыСубконто КАК ТиповойВидыСубконто
	|				ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Типовой КАК Типовой
	|				ПО ТиповойВидыСубконто.Ссылка = Типовой.Ссылка
	|		
	|		ГДЕ
	|			Типовой.Ссылка В ИЕРАРХИИ(&СписокСчетов)
	|		
	|		СГРУППИРОВАТЬ ПО
	|			Типовой.Ссылка) КАК СуммовойУчет
	|		ПО ВложенныйЗапрос.Счет = СуммовойУчет.Счет
	|
	|ГДЕ
	|	(НЕ(ВложенныйЗапрос.КорСчет В ИЕРАРХИИ (&СписокСчетов)) ИЛИ
	|	(ВЫБОР КОГДА (ВложенныйЗапрос.КорНоменклатура) ЕСТЬ NULL ТОГДА ИСТИНА ИНАЧЕ ВложенныйЗапрос.Номенклатура <> ВложенныйЗапрос.КорНоменклатура КОНЕЦ))";
	
	Если СтруктураПараметров.ТаблицаТоваров <> Неопределено Тогда
		Запрос.Текст = Запрос.Текст + " И
		|		(ВложенныйЗапрос.Номенклатура В (&СписокТоваров))";
	ИначеЕсли СтруктураПараметров.ТаблицаТоваров <> Неопределено И СтруктураПараметров.Учет = "НУ" Тогда
		Запрос.Текст = Запрос.Текст + " И
		|		(ВложенныйЗапрос.Номенклатура В (&СписокТоваров) И 
		|		ВложенныйЗапрос.Регистратор В (&СписокКорректируемыхДокументов))";	
	ИначеЕсли СтруктураПараметров.ТаблицаТоваров = Неопределено И СтруктураПараметров.Учет = "НУ"   Тогда
		Запрос.Текст = Запрос.Текст + " И
		|		(ВложенныйЗапрос.Регистратор В (&СписокКорректируемыхДокументов))";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Регистратор,
	|	ВложенныйЗапрос.Счет,
	|	ВложенныйЗапрос.КорСчет,
	|	ВложенныйЗапрос.КорСубконто1,
	|	ВложенныйЗапрос.КорСубконто2,
	|	ВложенныйЗапрос.КорСубконто3, 
	|	ВложенныйЗапрос.СтруктурноеПодразделение,";
	Если СтруктураПараметров.Учет = "НУ" Тогда 
		Запрос.Текст = Запрос.Текст + " 
		|	ВложенныйЗапрос.ВидУчета,";
	КонецЕсли;
	Запрос.Текст = Запрос.Текст + "
	|	ВЫБОР КОГДА (НЕ (ВложенныйЗапрос.КорНоменклатура) ЕСТЬ NULL) И (ВложенныйЗапрос.КорСчетНоменклатуры) ТОГДА ВложенныйЗапрос.КорНоменклатура ИНАЧЕ НЕОПРЕДЕЛЕНО КОНЕЦ,
	|	ВЫБОР КОГДА СуммовойУчет.Субконто1 ТОГДА ВложенныйЗапрос.Субконто1 ИНАЧЕ Неопределено КОНЕЦ,
	|	ВЫБОР КОГДА СуммовойУчет.Субконто2 ТОГДА ВложенныйЗапрос.Субконто2 ИНАЧЕ Неопределено КОНЕЦ,
	|	ВЫБОР КОГДА СуммовойУчет.Субконто3 ТОГДА ВложенныйЗапрос.Субконто3 ИНАЧЕ Неопределено КОНЕЦ
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("ДатаНач",       СтруктураПараметров.НачалоПериода);
	Запрос.УстановитьПараметр("ДатаКон",       СтруктураПараметров.КонецПериода);
	Запрос.УстановитьПараметр("Организация",   СтруктураПараметров.Организация);
	Запрос.УстановитьПараметр("СписокСчетов",  ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСписокСчетовУчетаТМЗ(СтруктураПараметров.Учет));
	Запрос.УстановитьПараметр("СчетаРасчетов", ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСписокСчетовРасчетов());
	Запрос.УстановитьПараметр("СписокТоваров", СтруктураПараметров.ТаблицаТоваров);
	Если СтруктураПараметров.Учет = "НУ" Тогда 
		Запрос.УстановитьПараметр("СписокКорректируемыхДокументов", СтруктураПараметров.СписокКорректируемыхДокументов);
	КонецЕсли;
	
	Если СтруктураПараметров.Учет <> "БУ" Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Типовой", "Налоговый");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Организация = &Организация ", "Организация = &Организация И ВидУчета В Иерархии(&ВидУчетаНУ)");
		
		СписокВидовУчета = Новый СписокЗначений;
		СписокВидовУчета.Добавить(ВидУчетаНУ);
		СписокВидовУчета.Добавить(Справочники.ВидыУчетаНУ.ВР);
		
		// При корректировке мы должны учесть движения по прямому виду учета НУ/Пр и ВР, которая могла иметь место
		Запрос.УстановитьПараметр("ВидУчетаНУ", СписокВидовУчета);
		Если ВидУчетаНУ = Справочники.ВидыУчетаНУ.ПР Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТаблицаСписания.ВидУчета = &ВидУчетаНУ","ТаблицаСписания.ВидУчета.Родитель = &ВидУчетаНУ");
		КонецЕсли;		
	КонецЕсли;    	
	
	Таб = Запрос.Выполнить().Выгрузить();
	ТабСписания = Таб.Скопировать();
	ТабСДопГруппировкой = Таб.Скопировать();
	
	Если СтруктураПараметров.Учет = "БУ" Тогда
		ТабСписания.Свернуть("Регистратор,Возврат,СтруктурноеПодразделение,Счет,Субконто1,Субконто2,Субконто3,КорСчет,КорСубконто1,КорСубконто2,КорСубконто3", "Сумма,Количество");
	Иначе
		ТабСписания.Свернуть("Регистратор,Возврат,СтруктурноеПодразделение,Счет,Субконто1,Субконто2,Субконто3,КорСчет,КорСубконто1,КорСубконто2,КорСубконто3,ВидУчета", "Сумма,Количество");
	КонецЕсли; 
	
	ТабСписания.Сортировать("Возврат Возр");
	
	ТабСписания.Колонки.Добавить("ВозвратПоставщику", Новый ОписаниеТипов("Булево"));
	
	Если СтруктураПараметров.Учет = "БУ" Тогда 
		ТабСДопГруппировкой.Свернуть("Регистратор,СтруктурноеПодразделение,Счет,Субконто1,Субконто2,Субконто3", "Сумма,Количество");
	Иначе
		ТабСДопГруппировкой.Свернуть("Регистратор,СтруктурноеПодразделение,Счет,Субконто1,Субконто2,Субконто3,ВидУчета", "Сумма,Количество");
	КонецЕсли;       
	
	МассивВозвратов = Новый Массив();
	
	Для Каждого СтрокаСписания ИЗ ТабСДопГруппировкой Цикл
		
		Если НЕ ТипЗнч(СтрокаСписания.Регистратор) = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
			Продолжить;
		КонецЕсли;  
		
		Если МассивВозвратов.Найти(СтрокаСписания.Регистратор) = Неопределено Тогда 
			МассивВозвратов.Добавить(СтрокаСписания.Регистратор);
		КонецЕсли;
		
		Если СтруктураПараметров.Учет = "БУ" Тогда 
			
			СтруктураПоиска = Новый Структура("Регистратор,СтруктурноеПодразделение,Счет,Субконто1,Субконто2,Субконто3",
												СтрокаСписания.Регистратор, СтрокаСписания.СтруктурноеПодразделение, СтрокаСписания.Счет,
												СтрокаСписания.Субконто1, СтрокаСписания.Субконто2, СтрокаСписания.Субконто3);
		Иначе
			
			СтруктураПоиска = Новый Структура("Регистратор,СтруктурноеПодразделение,Счет,Субконто1,Субконто2,Субконто3,ВидУчета",
												СтрокаСписания.Регистратор, СтрокаСписания.СтруктурноеПодразделение, СтрокаСписания.Счет,
												СтрокаСписания.Субконто1, СтрокаСписания.Субконто2, СтрокаСписания.Субконто3, СтрокаСписания.ВидУчета);
		КонецЕсли;
		
		// Т.к. при возврате ТМЗ могут возвращаться по той стоимости по которой поступили, 
		// а могут и по завышенной стоимости, то проводка Дт СчетОтнесенияСебестоимости - Кт СчетТМЗ 
		// будет сформирована не всегда, поэтому ориентируемся на проводку по взаиморасчетам,
		// но списывать разницу в стоимости будем напрямую на счет отнесения себестоимости из документа возврата
		СтрокиПоиска = ТабСписания.НайтиСтроки(СтруктураПоиска); 
		Для Индекс = 0 По СтрокиПоиска.Количество()-1 Цикл   			
			ТабСписания[ТабСписания.Индекс(СтрокиПоиска[Индекс])].ВозвратПоставщику = Истина;						
			Если ТабСписания[ТабСписания.Индекс(СтрокиПоиска[Индекс])].Количество <> 0 Тогда
				ТабСписания[ТабСписания.Индекс(СтрокиПоиска[Индекс])].Сумма = СтрокаСписания.Сумма;					
			Иначе
				ТабСписания.Удалить(ТабСписания.Индекс(СтрокиПоиска[Индекс]));					
			КонецЕсли;				
		КонецЦикла; 														
		
	КонецЦикла;                                                                                        
	
	Если СтруктураПараметров.Учет = "БУ" Тогда  		
		ТабСписания.Свернуть("ВозвратПоставщику,Возврат,СтруктурноеПодразделение,Счет,Субконто1,Субконто2,Субконто3,КорСчет,КорСубконто1,КорСубконто2,КорСубконто3", "Сумма,Количество");
	Иначе
		ТабСписания.Свернуть("ВозвратПоставщику,Возврат,СтруктурноеПодразделение,Счет,Субконто1,Субконто2,Субконто3,КорСчет,КорСубконто1,КорСубконто2,КорСубконто3,ВидУчета", "Сумма,Количество");
	КонецЕсли;  
	
	//получим таблицу Движений возвратов товаров поставщику
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Регистратор", МассивВозвратов);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ТиповойДвиженияССубконто.ВидСубконтоДт1 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоТиповые.Номенклатура)
	|			ТОГДА ТиповойДвиженияССубконто.СубконтоДт1.НоменклатурнаяГруппа
	|		КОГДА ТиповойДвиженияССубконто.ВидСубконтоДт2 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоТиповые.Номенклатура)
	|			ТОГДА ТиповойДвиженияССубконто.СубконтоДт2.НоменклатурнаяГруппа
	|		КОГДА ТиповойДвиженияССубконто.ВидСубконтоДт3 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоТиповые.Номенклатура)
	|			ТОГДА ТиповойДвиженияССубконто.СубконтоДт3.НоменклатурнаяГруппа
	|		КОГДА ТиповойДвиженияССубконто.ВидСубконтоКт1 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоТиповые.Номенклатура)
	|			ТОГДА ТиповойДвиженияССубконто.СубконтоКт1.НоменклатурнаяГруппа
	|		КОГДА ТиповойДвиженияССубконто.ВидСубконтоКт2 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоТиповые.Номенклатура)
	|			ТОГДА ТиповойДвиженияССубконто.СубконтоКт2.НоменклатурнаяГруппа
	|		КОГДА ТиповойДвиженияССубконто.ВидСубконтоКт3 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоТиповые.Номенклатура)
	|			ТОГДА ТиповойДвиженияССубконто.СубконтоКт3.НоменклатурнаяГруппа
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.НоменклатурныеГруппы.ПустаяСсылка)
	|	КОНЕЦ КАК НоменклатурнаяГруппа,
	|	ТиповойДвиженияССубконто.СчетДт,
	|	ТиповойДвиженияССубконто.СубконтоДт1,
	|	ТиповойДвиженияССубконто.СубконтоДт2,
	|	ТиповойДвиженияССубконто.СубконтоДт3,
	|	ПРЕДСТАВЛЕНИЕ(ТиповойДвиженияССубконто.СубконтоДт1) КАК ПРЕДСТАВЛЕНИЕСубконтоДт1,
	|	ПРЕДСТАВЛЕНИЕ(ТиповойДвиженияССубконто.СубконтоДт2) КАК ПРЕДСТАВЛЕНИЕСубконтоДт2,
	|	ПРЕДСТАВЛЕНИЕ(ТиповойДвиженияССубконто.СубконтоДт3) КАК ПРЕДСТАВЛЕНИЕСубконтоДт3,
	|	ТиповойДвиженияССубконто.СчетКт,
	|	ТиповойДвиженияССубконто.СубконтоКт1,
	|	ТиповойДвиженияССубконто.СубконтоКт2,
	|	ТиповойДвиженияССубконто.СубконтоКт3,
	|	ПРЕДСТАВЛЕНИЕ(ТиповойДвиженияССубконто.СубконтоКт1) КАК ПРЕДСТАВЛЕНИЕСубконтоКт1,
	|	ПРЕДСТАВЛЕНИЕ(ТиповойДвиженияССубконто.СубконтоКт2) КАК ПРЕДСТАВЛЕНИЕСубконтоКт2,
	|	ПРЕДСТАВЛЕНИЕ(ТиповойДвиженияССубконто.СубконтоКт3) КАК ПРЕДСТАВЛЕНИЕСубконтоКт3,
	|	ТиповойДвиженияССубконто.Организация,";
	Если СтруктураПараметров.Учет = "БУ" Тогда 
		Запрос.Текст = Запрос.Текст + "
		|	ВЫБОР
		|		КОГДА ТиповойДвиженияССубконто.ВалютаДт ЕСТЬ NULL 
		|			ТОГДА ТиповойДвиженияССубконто.ВалютаКт
		|		ИНАЧЕ ТиповойДвиженияССубконто.ВалютаДт
		|	КОНЕЦ КАК Валюта,
		|	СУММА(ВЫБОР
		|			КОГДА ТиповойДвиженияССубконто.ВалютнаяСуммаДт ЕСТЬ NULL 
		|				ТОГДА ТиповойДвиженияССубконто.ВалютнаяСуммаКт
		|			ИНАЧЕ ТиповойДвиженияССубконто.ВалютнаяСуммаДт
		|		КОНЕЦ) КАК ВалСумма,";
	Иначе 
		Запрос.Текст = Запрос.Текст + "
		|	ТиповойДвиженияССубконто.ВидУчетаДт КАК ВидУчетаДт,
		|	ТиповойДвиженияССубконто.ВидУчетаКт КАК ВидУчетаКт,";
	КонецЕсли;
	Запрос.Текст = Запрос.Текст + "
	|	СУММА(ВЫБОР
	|			КОГДА ТиповойДвиженияССубконто.КоличествоДт ЕСТЬ NULL 
	|				ТОГДА ТиповойДвиженияССубконто.КоличествоКт
	|			ИНАЧЕ ТиповойДвиженияССубконто.КоличествоДт
	|		КОНЕЦ) КАК Количество,
	|	СУММА(ТиповойДвиженияССубконто.Сумма) КАК Сумма,
	|	ТиповойДвиженияССубконто.Регистратор,
	|	ДокументыВозвратовПоставщику.СчетУчетаРасчетовСКонтрагентом КАК СчетУчетаРасчетовСКонтрагентом,
	|	ДокументыВозвратовПоставщику.СчетУчетаРасчетовПоВозвратам КАК СчетУчетаРасчетовПоВозвратам,
	|	ДокументыВозвратовПоставщику.СчетОтнесенияСебестоимостиБУ КАК СчетОтнесенияСебестоимостиБУ,
	|	ДокументыВозвратовПоставщику.СубконтоОтнесенияСебестоимостиБУ1 КАК СубконтоОтнесенияСебестоимостиБУ1,
	|	ДокументыВозвратовПоставщику.СубконтоОтнесенияСебестоимостиБУ2 КАК СубконтоОтнесенияСебестоимостиБУ2,
	|	ДокументыВозвратовПоставщику.СубконтоОтнесенияСебестоимостиБУ3 КАК СубконтоОтнесенияСебестоимостиБУ3,
	|	ДокументыВозвратовПоставщику.СчетОтнесенияСебестоимостиНУ КАК СчетОтнесенияСебестоимостиНУ,
	|	ДокументыВозвратовПоставщику.СубконтоОтнесенияСебестоимостиНУ1 КАК СубконтоОтнесенияСебестоимостиНУ1,
	|	ДокументыВозвратовПоставщику.СубконтоОтнесенияСебестоимостиНУ2 КАК СубконтоОтнесенияСебестоимостиНУ2,
	|	ДокументыВозвратовПоставщику.СубконтоОтнесенияСебестоимостиНУ3 КАК СубконтоОтнесенияСебестоимостиНУ3
	|ИЗ
	|	РегистрБухгалтерии.Типовой.ДвиженияССубконто(, , Регистратор В (&Регистратор), , ) КАК ТиповойДвиженияССубконто
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровПоставщику КАК ДокументыВозвратовПоставщику
	|       ПО ДокументыВозвратовПоставщику.Ссылка = ТиповойДвиженияССубконто.Регистратор
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА ТиповойДвиженияССубконто.ВидСубконтоДт1 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоТиповые.Номенклатура)
	|			ТОГДА ТиповойДвиженияССубконто.СубконтоДт1.НоменклатурнаяГруппа
	|		КОГДА ТиповойДвиженияССубконто.ВидСубконтоДт2 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоТиповые.Номенклатура)
	|			ТОГДА ТиповойДвиженияССубконто.СубконтоДт2.НоменклатурнаяГруппа
	|		КОГДА ТиповойДвиженияССубконто.ВидСубконтоДт3 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоТиповые.Номенклатура)
	|			ТОГДА ТиповойДвиженияССубконто.СубконтоДт3.НоменклатурнаяГруппа
	|		КОГДА ТиповойДвиженияССубконто.ВидСубконтоКт1 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоТиповые.Номенклатура)
	|			ТОГДА ТиповойДвиженияССубконто.СубконтоКт1.НоменклатурнаяГруппа
	|		КОГДА ТиповойДвиженияССубконто.ВидСубконтоКт2 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоТиповые.Номенклатура)
	|			ТОГДА ТиповойДвиженияССубконто.СубконтоКт2.НоменклатурнаяГруппа
	|		КОГДА ТиповойДвиженияССубконто.ВидСубконтоКт3 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоТиповые.Номенклатура)
	|			ТОГДА ТиповойДвиженияССубконто.СубконтоКт3.НоменклатурнаяГруппа
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.НоменклатурныеГруппы.ПустаяСсылка)
	|	КОНЕЦ,
	|	ТиповойДвиженияССубконто.СубконтоДт2,
	|	ТиповойДвиженияССубконто.СубконтоКт1,
	|	ТиповойДвиженияССубконто.СчетКт,
	|	ТиповойДвиженияССубконто.СубконтоКт2,";
	Если СтруктураПараметров.Учет = "БУ" Тогда 
		Запрос.Текст = Запрос.Текст + "
		|	ВЫБОР
		|		КОГДА ТиповойДвиженияССубконто.ВалютаДт ЕСТЬ NULL 
		|			ТОГДА ТиповойДвиженияССубконто.ВалютаКт
		|		ИНАЧЕ ТиповойДвиженияССубконто.ВалютаДт
		|	КОНЕЦ,";
	Иначе 
		Запрос.Текст = Запрос.Текст + "
		|	ТиповойДвиженияССубконто.ВидУчетаДт,
		|	ТиповойДвиженияССубконто.ВидУчетаКт,";
	КонецЕсли;
	Запрос.Текст = Запрос.Текст + "
	|	ТиповойДвиженияССубконто.СчетДт,
	|	ТиповойДвиженияССубконто.Организация,
	|	ТиповойДвиженияССубконто.СубконтоДт3,
	|	ТиповойДвиженияССубконто.СубконтоКт3,
	|	ТиповойДвиженияССубконто.СубконтоДт1,
	|	ТиповойДвиженияССубконто.Регистратор,
	|	ДокументыВозвратовПоставщику.СчетУчетаРасчетовСКонтрагентом,
	|	ДокументыВозвратовПоставщику.СчетУчетаРасчетовПоВозвратам,
	|	ДокументыВозвратовПоставщику.СчетОтнесенияСебестоимостиБУ,
	|	ДокументыВозвратовПоставщику.СубконтоОтнесенияСебестоимостиБУ1,
	|	ДокументыВозвратовПоставщику.СубконтоОтнесенияСебестоимостиБУ2,
	|	ДокументыВозвратовПоставщику.СубконтоОтнесенияСебестоимостиБУ3,
	|	ДокументыВозвратовПоставщику.СчетОтнесенияСебестоимостиНУ,
	|	ДокументыВозвратовПоставщику.СубконтоОтнесенияСебестоимостиНУ1,
	|	ДокументыВозвратовПоставщику.СубконтоОтнесенияСебестоимостиНУ2,
	|	ДокументыВозвратовПоставщику.СубконтоОтнесенияСебестоимостиНУ3";    	
	
	Если СтруктураПараметров.Учет = "НУ" Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Типовой", "Налоговый");
	КонецЕсли;    	
	
	ТаблицаВозвратовПоставщику = Запрос.Выполнить().Выгрузить();	
	СтруктураПараметров.Вставить("ТаблицаВозвратовПоставщику", ТаблицаВозвратовПоставщику);
	
	СтруктураПараметров.Вставить("ТаблицаОперацийСписания",    ТабСписания);
	СтруктураПараметров.Вставить("ТаблицаОперацийРеализации",  Таб);
	
	МассивКомплектов = ОбщегоНазначения.ВыгрузитьКолонку(Таб, "Комплектация", Истина);
	
	ОбщегоНазначенияБККлиентСервер.УдалитьНеЗаполненныеЭлементыМассива(МассивКомплектов);
	
	СтруктураПараметров.Вставить("МассивКомплектов", МассивКомплектов);
	
	Возврат ТабСписания;
	
КонецФункции

// РассчитатьСписаниеПоСредней
//
// Параметры:
//	ТаблицаТоваров - содержит товары, списание которых необходимо усреднить. 
//	Каждая колонка соответствует одному из постоянных параметров товара, не изменяемых в ходе перемещений. 
//	По остальным параметрам выполняется усреднение
//
Процедура РассчитатьСписаниеПоСредней(СтруктураПараметров, Движения, Отказ) Экспорт
	
	// Основное допущение данного метода - игнорирование замкнутой цепочки перемещений между состояниями ("холостого хода"):
	// считаем, что если товар в ходе перемещений снова попал в исходное состояние, то он как бы не перемещался, 
	// это движение можно исключить из общего оборота, а стоимость движения принять равной 0. Цепочки перемещений 
	// таким образом размыкаются, что позволяет рассчитать стоимости движений, начиная от конца цепочки.
	
	// Получим все состояния для товара, которые он принимал за период в виде таблицы
	//	---------------------------------------------------------------------------------------------------------------------------------
	// |Состояние 1 (Источник) |Состояние 2 (Приемник)| Перемещаемое количество| Стоимость (нужна для упрощения последующей корректировки)
	
	// Последовательно обходя состояния, выделим контуры (пути, начала и концы которых совпадают)
	// В каждом контуре найдем количество, которое совершило перемещение по замкнутому кругу ("холостой ход"), 
	// и уменьшим каждое движение из контура на данное количество.
	// Будем выбирать другие состояния для получения всех контуров и применим к ним то же правило.
	
	// После нахождения контуров в графах перемещений и сокращения "холостого хода" получаем совокупность разомкнутых 
	// путей перехода товара между состояниями (остовные деревья). Внутри каждой такой цепочки выполняем расчет.
	// Важно:  в общем случае результат сокращения зависит от последовательности обхода контуров, поэтому
	// для повторяемости результата она должна подчиняться какому-либо правилу (например, чтобы сводные перемещения
	// упорядочивались по возрастанию даты первого перемещения)
	
	// Получим таблицу перемещений, содержащую суммарные перемещения между состояниями
	
	// Получаемая таблица должна содержать колонку "Количество", "Стоимость" и колонки, описывающие старое и новое состояние,
	// причем имена колонок нового состояния заканчиваются на ПрефиксПараметровНовогоСостояния
	ПрефиксПараметровНовогоСостояния="_НовоеСостояние";
	
	Таб = ПолучитьТаблицуПеремещений(СтруктураПараметров, ПрефиксПараметровНовогоСостояния);
	
	
	//1. Приведем переданную таблицу перемещений к требуемому виду:
	// Таблица имеет колонки Источник, Приемник, Количество
	// строка таблицы соответствует перемещению из состояния 1 в состояние 2, перемещения не повторяются.
	
	// Количество колонок без ПрефиксПараметровНовогоСостояния должно быть равно количеству колонок с ПрефиксПараметровНовогоСостояния
	// Сформируем также структуру, которая содержит параметры состояния товара
	СтруктураСостояния = Новый Структура;
	
	МассивСумм = Неопределено;
	СтруктураПараметров.Свойство("МассивСумм", МассивСумм);
	
	Если ТипЗнч(МассивСумм) <> Тип("Массив") Тогда
		МассивСумм = Новый Массив;
		МассивСумм.Добавить("Стоимость");
	КонецЕсли;
	
	// То же самое, но в соответствии - для удобства поиска
	СоотвСумм = Новый Соответствие;
	
	Для Каждого ЭлементСумм Из МассивСумм Цикл
		СоотвСумм.Вставить(ЭлементСумм, ЭлементСумм);
	КонецЦикла;
	
	Инд=0;
	Пока Инд< Таб.Колонки.Количество() Цикл
		
		Колонка = Таб.Колонки[Инд];
		
		// Имя колонки не совпадает с количеством и колонками стоимости
		Если ВРег(Колонка.Имя) <> ВРег("Количество") Тогда
			
			// Это колонка суммы
			Если СоотвСумм[Колонка.Имя] <> Неопределено Тогда
				Инд = Инд+1;
				Продолжить;
			КонецЕсли;
			
			// Колонки, оканчивающиеся на ПрефиксПараметровНовогоСостояния - правые (новое состояние), им должны соответствовать такие же левые, оканчивающиеся на ПрефиксПараметровНовогоСостояния
			Если Прав(Колонка.Имя, СтрДлина(ПрефиксПараметровНовогоСостояния)) = ПрефиксПараметровНовогоСостояния  Тогда
				ИмяСоответствующейКолонки=Лев(Колонка.Имя, СтрДлина(Колонка.Имя)-СтрДлина(ПрефиксПараметровНовогоСостояния));
				Если Таб.Колонки.Найти(ИмяСоответствующейКолонки)=Неопределено Тогда
					Таб.Колонки.Добавить(ИмяСоответствующейКолонки, Колонка.ТипЗначения)
				КонецЕсли;
				// И наоборот, колонки, не оканчивающиеся на ПрефиксПараметровНовогоСостояния - левые (новое состояние), им должны соответствовать такие же правые, оканчивающиеся на ПрефиксПараметровНовогоСостояния
			Иначе
				ИмяСоответствующейКолонки=Колонка.Имя+ПрефиксПараметровНовогоСостояния;
				Если Таб.Колонки.Найти(ИмяСоответствующейКолонки)=Неопределено Тогда
					Таб.Колонки.Добавить(ИмяСоответствующейКолонки, Колонка.ТипЗначения)
				КонецЕсли;
				
				СтруктураСостояния.Вставить(Колонка.Имя);
			КонецЕсли;
		КонецЕсли;
		
		Инд=Инд+1;
	КонецЦикла;
	
	// В таблице перемещений заменим параметры состояний индексами состояний, сами параметры будут храниться в СоотвПараметровСостояний
	
	Таб.Колонки.Добавить("Источник", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(5,0)));
	Таб.Колонки.Добавить("Приемник", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(5,0)));
	
	СоотвПараметровСостояний = Новый Соответствие;
	
	Для Каждого Строка Из Таб Цикл // поиск выполняется полным перебором
		
		// Состояния-источники
		// Найдем состояние в соответствии				
		НайденоСостояние=Ложь;
		Для Каждого ЭлементСостояние Из СоотвПараметровСостояний Цикл
			
			НайденоСостояние=Истина;
			Для Каждого Элемент Из СтруктураСостояния Цикл
				
				Если НЕ (ЭлементСостояние.Значение[Элемент.Ключ] = Строка[Элемент.Ключ]) Тогда
					
					НайденоСостояние = Ложь; // состояния различны
					
					Прервать; // дальше можно не проверять
				КонецЕсли;
				
			КонецЦикла;
			
			Если НайденоСостояние Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если НайденоСостояние Тогда
			ИндексСостояния = ЭлементСостояние.Ключ;
		Иначе
			// Переносим в соответствие
			СтрСост = Новый Структура;
			Для Каждого Элемент Из СтруктураСостояния Цикл
				
				
				СтрСост.Вставить(Элемент.Ключ, Строка[Элемент.Ключ]);
			КонецЦикла;
			
			ИндексСостояния = СоотвПараметровСостояний.Количество();
			СоотвПараметровСостояний.Вставить(ИндексСостояния, СтрСост);
		КонецЕсли;
		
		// Оставим в таблице ссылку на состояние
		Строка.Источник = ИндексСостояния;
		
		
		// То же самое для состояний-приемников
		// Найдем состояние в соответсвии				
		НайденоСостояние=Ложь;
		Для Каждого ЭлементСостояние Из СоотвПараметровСостояний Цикл
			
			НайденоСостояние=Истина;
			Для Каждого Элемент Из СтруктураСостояния Цикл
				
				Если НЕ (ЭлементСостояние.Значение[Элемент.Ключ] = Строка[Элемент.Ключ+ПрефиксПараметровНовогоСостояния]) Тогда
					
					НайденоСостояние = Ложь; // состояния различны
					
					Прервать; // дальше можно не проверять
				КонецЕсли;
				
			КонецЦикла;
			
			Если НайденоСостояние Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если НайденоСостояние Тогда
			ИндексСостояния = ЭлементСостояние.Ключ;
		Иначе
			// Переносим в соответствие
			СтрСост = Новый Структура;
			Для Каждого Элемент Из СтруктураСостояния Цикл
				СтрСост.Вставить(Элемент.Ключ, Строка[Элемент.Ключ+ПрефиксПараметровНовогоСостояния]);
			КонецЦикла;
			
			ИндексСостояния = СоотвПараметровСостояний.Количество();
			СоотвПараметровСостояний.Вставить(ИндексСостояния, СтрСост);
		КонецЕсли;
		
		// Оставим в таблице ссылку на состояние
		Строка.Приемник = ИндексСостояния;
		
	КонецЦикла;
	
	// "Свернем" встречные перемещения: вместо двух перемещений типа 1->2 и 2->1 оставим одно 
	// с количеством |Кол12 - Кол21| в направлении большего перемещения.
	
	// Проведем следующее преобразование: повернем пары так, чтобы количество перемещения стало положительным
	Для Каждого Строка Из Таб Цикл
		
		Если Строка.Количество<0 Тогда
			Буф=Строка.Приемник;
			Строка.Приемник 	= Строка.Источник;
			Строка.Источник 	= Буф;
			Строка.Количество 	= - Строка.Количество;
			
			Для Каждого КолСумма Из МассивСумм Цикл
				Строка[КолСумма] = - Строка[КолСумма];
			КонецЦикла;
			
		КонецЕсли;
	КонецЦикла;
	
	// "Свертка" встречных перемещений
	Инд=0;
	КолВо = Таб.Количество();
	
	Пока Инд<КолВо Цикл
		
		Инд2 = Инд+1;
		Пока Инд2<КолВо Цикл
			
			Строка2 = Таб[Инд2];
			Строка  = Таб[Инд];
			
			// Если найдено соответствующее встречное перемещение
			Если Строка.Источник = Строка2.Приемник
				И Строка.Приемник = Строка2.Источник Тогда
				
				Если Строка.Количество>Строка2.Количество Тогда
					УменьшитьНаКоличество = Строка2.Количество;

				Иначе
					УменьшитьНаКоличество = Строка.Количество;

				КонецЕсли;
				
				Строка.Количество  = Строка.Количество  - УменьшитьНаКоличество;
				Строка2.Количество = Строка2.Количество - УменьшитьНаКоличество;
				
				Для Каждого КолСумма Из МассивСумм Цикл
					
					Если Строка.Количество>Строка2.Количество Тогда
						УменьшитьНаСтоимость = Строка2[КолСумма];
					Иначе
						УменьшитьНаСтоимость = Строка[КолСумма];
					КонецЕсли;
					
					// То же самое - со стоимостью
					Строка[КолСумма]  = Строка[КолСумма]  - УменьшитьНаСтоимость;
					Строка2[КолСумма] = Строка2[КолСумма]  - УменьшитьНаСтоимость;
				КонецЦикла;
				
				// На этом обход можно прервать: быть не более одной пары встречных перемещений
				Прервать;
				
			Иначе
				Инд2 = Инд2+1;
			КонецЕсли;
			
		КонецЦикла; 
		
		Инд = Инд+1;
		
	КонецЦикла; 
	
	// Удалим обнулившиеся строки
	// Удаляем только строки со всеми нулевыми суммами и нулевым количеством
	
	КолВо = Таб.Количество();
	Инд=0;
	Пока Инд<КолВо Цикл
		
		Строка  = Таб[Инд];
		
		НеНужноУдалять = Строка.Количество<>0;
		
		Если Не НеНужноУдалять Тогда
			
			Для Каждого КолСумма Из МассивСумм Цикл
				
				НеНужноУдалять = НеНужноУдалять Или Строка[КолСумма]<>0;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если Не НеНужноУдалять Тогда

			Таб.Удалить(Строка);
			
			КолВо = КолВо-1;
		Иначе
			Инд=Инд+1;
		КонецЕсли;
	КонецЦикла;
	
	// Получили таблицу перемещений в требуемом формате
	ТаблицаПеремещений = Таб;	
	
	// Таблица перемещений содержит несколько несвязанных частей, относящихся к отдельным партиям - строкам таблицы ТаблицаТоваров
	
	// Обработка перемещений: разрыв контуров
	// Получим наборы смежных вершин для каждой вершины
	// Соотв СмежныеВершины Вершина, СмежныеВершины
	
	Источники = Новый Соответствие;
	Приемники = Новый Соответствие;
	МассивНачалДеревьев = Новый Массив;
	
	Для Каждого Строка Из ТаблицаПеремещений Цикл
		
		ПараметрыИсточника = Источники[Строка.Источник];
		Если ПараметрыИсточника = Неопределено Тогда
			СмежныеВершины		= Новый Соответствие;
			ПараметрыИсточника 	= Новый Структура("Пройден, СмежныеВершины", Ложь, СмежныеВершины);
		КонецЕсли;
		
		ПараметрыИсточника.СмежныеВершины.Вставить(Строка.Приемник, ТаблицаПеремещений.Индекс(Строка)); // во вложенной структуре храним смежную вершину и номер строки перемещения
		
		Источники.Вставить(Строка.Источник, ПараметрыИсточника);
		
	КонецЦикла;
	
	// Чтобы рассчитать перемещения, заменим каждый связный граф перемещений его остовным деревом
	// Для этого обойдем их все, найдем и разорвем все контуры по предложенному выше правилу.
	Для Каждого Элемент Из Источники Цикл
		Если НЕ Элемент.Значение.Пройден Тогда // если от вершины еще не строился контур, обрабатываем
		
			ПройденныеВершины = Новый ТаблицаЗначений;
			ПройденныеВершины.Колонки.Добавить("Ключ");
			ПройденныеВершины.Колонки.Добавить("Значение");
			
			НоваяСтрока = ПройденныеВершины.Добавить();
			НоваяСтрока.Ключ = Элемент.Ключ;
			НоваяСтрока.Значение = -1;
			
			НомерВершины = Элемент.Ключ;
			
			РазорватьКонтуры(НомерВершины, Источники, ПройденныеВершины, ТаблицаПеремещений);
		КонецЕсли;
		
	КонецЦикла;
	
	// После этого таблица содержит незамкнутую последовательность перемещений. 
	// Стоимость перемещений с количеством = 0 в таблице тоже должна быть приведена к 0.
	
	СтСумм = Новый Структура; // структура сумм
	
	Для Каждого Строка Из ТаблицаПеремещений Цикл
		
		Если Строка.Количество=0 Тогда
			
			Для Каждого КолСумма Из МассивСумм Цикл
				СтСумм.Вставить(КолСумма, -Строка[КолСумма]);
				СтСумм.Вставить("Количество", Строка.Количество);
			КонецЦикла;
			
			ДобавитьЗаписиПоПеремещению(СоотвПараметровСостояний[Строка.Источник], СоотвПараметровСостояний[Строка.Приемник], СтСумм, СтруктураПараметров, Движения, Отказ);
			
		Иначе
			
			Приемники.Вставить(Строка.Приемник, Строка.Приемник);
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Теперь нужно выделить отдельные деревья, определить среднюю стоимость для каждого дерева, 
	// и начиная с самого начала каждого дерева последовательно рассчитать стоимость для каждого состояния/перемещения
	
	// Найдем начало каждого дерева - его нет в приемниках
	Для каждого Строка Из ТаблицаПеремещений Цикл
		
		// Анализируем только ненулевые дуги
		Если Строка.Количество<>0 Тогда
			
			// Если источника нет среди приемников, значит это начало дерева
			Если Приемники[Строка.Источник]=Неопределено Тогда
				
				ВершинаНайдена = Ложь; // признак того, что вершина уже есть в массиве
				Для Каждого НачалоДерева Из МассивНачалДеревьев Цикл
					
					// Такая вершина уже имеется в списке начал
					Если Строка.Источник = НачалоДерева Тогда
						ВершинаНайдена = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				Если НЕ ВершинаНайдена Тогда
					МассивНачалДеревьев.Добавить(Строка.Источник);
				КонецЕсли;

			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// На данном этапе нужна информация о начальном состоянии и внешнем поступлении в каждую вершину
	
	// Будем использовать список вершин, для каждой из которых указаны смежные вершины - приемники и 
	Вершины = Новый Соответствие; // здесь нам понадобится общее количество источников, приемники
	Для Каждого Строка Из ТаблицаПеремещений Цикл
		
		Если Строка.Количество=0 Тогда
			Продолжить;
		КонецЕсли;
		
		// Обработаем источник
		ПодчСтруктура = Вершины[Строка.Источник];
		Если ПодчСтруктура=Неопределено Тогда
			ПодчСтруктура = Новый Структура("КоличествоИсточников, Приемники, КоличествоРассчитанныхВходов", 0, Новый Соответствие, 0);
		КонецЕсли;
		
		СтСумм = Новый Структура; // структура сумм
		Для Каждого КолСумма Из МассивСумм Цикл
			СтСумм.Вставить(КолСумма, Строка[КолСумма]);
		КонецЦикла;
		
		ПодчСтруктура.Приемники.Вставить(Строка.Приемник, Новый Структура("Количество, СтруктураСумм", Строка.Количество, СтСумм)); // Вместе с вершиной-приемником запоминаем количество перемещения

		
		Вершины.Вставить(Строка.Источник, ПодчСтруктура);
		
		// Обработаем приемник
		ПодчСтруктура = Вершины[Строка.Приемник];
		Если ПодчСтруктура=Неопределено Тогда
			ПодчСтруктура = Новый Структура("КоличествоИсточников, Приемники, КоличествоРассчитанныхВходов", 1, Новый Соответствие, 0);
		Иначе
			ПодчСтруктура.КоличествоИсточников = ПодчСтруктура.КоличествоИсточников + 1;
		КонецЕсли;
		
		Вершины.Вставить(Строка.Приемник, ПодчСтруктура);
	КонецЦикла;
	
	// В структуру Вершины нужно добавить данные о начальном остатке и внешнем поступлении для каждого из состояний,
	// Можно также добавить состояний, не участвовавших в перемещениях, тогда для них тоже будет рассчитано внешнее списание
	МассивДобавленныеВершины = Новый Массив;
	ДобавитьНачальныйОстатокИВнешнееПоступление(Вершины, СоотвПараметровСостояний, СтруктураПараметров, МассивДобавленныеВершины);
	
	// Добавленные состояния возвращаются специальным массивом, который добавляется к началам деревьев
	Для Каждого Элемент Из МассивДобавленныеВершины Цикл
		МассивНачалДеревьев.Добавить(Элемент)
	КонецЦикла;
	
	// Теперь будем обходить деревья с начала, и рассчитывать состояния и переходы между ними
	Для Каждого НачалоДерева Из МассивНачалДеревьев Цикл
		РассчитатьПуть(НачалоДерева, Вершины, СоотвПараметровСостояний, СтруктураПараметров, Движения, Отказ);
	КонецЦикла;
	
КонецПроцедуры

// Находит контуры и разрывает их, сокращая на минимальное количество
//
// Параметры:
//	Нет.
//
Процедура РазорватьКонтуры(НомерИсхВершины, Источники, ПройденныеВершины, ТаблицаПеремещений)
	
	Приемники = Источники[НомерИсхВершины].СмежныеВершины;
	
	Для Каждого ЭлементВершина Из Приемники Цикл
		
		НомерВершины		 = ЭлементВершина.Ключ;
		ИндСтрокиПеремещения = ЭлементВершина.Значение;
		
		// Найдем каждую вершину-приемник в списке источников
		ПараметрыИсточника = Источники[НомерВершины];
		Если ПараметрыИсточника = Неопределено Тогда
			Продолжить; // это висячая вершина (степени 1)
		КонецЕсли;
		СмежныеВершины = ПараметрыИсточника.СмежныеВершины;
		
		// Неплохо бы запоминать уже пройденные контуры, чтобы не разбирать уже разобранные
		// Контур нужно идентифицировать последовательностью входящих в него вершин.
		
		// Проверим на замыкание
		
		Если ПройденныеВершины.Найти(НомерВершины,"Ключ")<> Неопределено тогда
		
			// Контур найден: можно сокращать на мин. количество перемещения
			
			// Найдем дугу контура с мин. количеством
			
			// Начнем с текущей
			СтрокаЗамыкающая			= ТаблицаПеремещений[ИндСтрокиПеремещения];
			МинКоличество				= СтрокаЗамыкающая.Количество;
			ИндСтрокиСМинКоличеством 	= ИндСтрокиПеремещения;
			
			Инд = 0;
			НачалсяКонтур = Ложь; // флаг начала контура
			
			Для Каждого Элемент Из ПройденныеВершины Цикл
				
				// Найдем начало контура
				НачалсяКонтур = НачалсяКонтур ИЛИ (Элемент.Ключ = НомерВершины);
				
				Если НачалсяКонтур Тогда
					Если Инд>0 Тогда // в первом элементе нет ссылки на строку
						Строка=ТаблицаПеремещений[Элемент.Значение];
						Если Строка.Количество < МинКоличество Тогда 
							МинКоличество 				= Строка.Количество;
							ИндСтрокиСМинКоличеством 	= Элемент.Значение;
						КонецЕсли;
					КонецЕсли;
					Инд=Инд+1;
				КонецЕсли;
			КонецЦикла;
			
			// Вычтем найденное минимальное количество из всех дуг контура
			
			// ... из замыкающей дуги
			СтрокаЗамыкающая.Количество = СтрокаЗамыкающая.Количество - МинКоличество;
			
			// ... из всех пройденных дуг
			Инд=0;
			НачалсяКонтур = Ложь; // флаг начала контура
			Для Каждого Элемент Из ПройденныеВершины Цикл
				
				// Найдем начало контура
				НачалсяКонтур = НачалсяКонтур ИЛИ (Элемент.Ключ = НомерВершины);
				
				Если НачалсяКонтур Тогда
					Если Инд>0 Тогда // в первом элементе нет ссылки на строку
						Строка=ТаблицаПеремещений[Элемент.Значение];
						Строка.Количество = Строка.Количество - МинКоличество;
					КонецЕсли;
					Инд=Инд+1;
				КонецЕсли;
				
			КонецЦикла;
			
			// Если контур разорван, для повторяющейся вершины процедуру не запускаем, пеерходим к следующему приемнику
			Продолжить;
			
		КонецЕсли;
		
		// Сделаем копию ПройденныеВершины и добавим пройденную вершину
		
		КопияПройденныеВершины =ПройденныеВершины.Скопировать();
		
		НоваяСтрока = КопияПройденныеВершины.Добавить();
		НоваяСтрока.Ключ = НомерВершины;
		НоваяСтрока.Значение = ИндСтрокиПеремещения;

		РазорватьКонтуры(НомерВершины, Источники, КопияПройденныеВершины, ТаблицаПеремещений);
		
		// Отметим, что от вершины уже строился контур, чтобы не вызывать аналогичную процедуру повторно
		Источники[НомерВершины].Пройден = Истина;
		
	КонецЦикла;
	
КонецПроцедуры

// Рассчитывает отрезки пути в состояния, в которые есть переход из данной вершины
//
// Параметры:
//	Источник - номер состояния-источника.
//	Состояния - соответствие, содержащее состояния, приемники и т.д.
//	СоотвПараметровСостояний - соответствие, содержащее параметры состояния, как они представлены в БД (измерения, счета, субконто и т.д.)
//
Процедура РассчитатьПуть(Источник, Состояния, СоотвПараметровСостояний, СтруктураПараметров, Движения, Отказ)
	
	// Состояние в начале:
	// ............
	// ............
	
	// Расчет состояния.
	// Стоимость в состоянии складывается из:
	// Начального остатка + Внешнего прихода (определяется сразу)
	// Прихода из других состояний (входящих стрелок - оперделяется сложением стрелок)
	
	// Приход из других состояний определяем по таблице перемещений
	
	// Расчет перемещения в другие состояния
	// В каждом состоянии-приемнике КоличествоРассчитанныхВходов = КоличествоРассчитанныхВходов+1
	
	СостояниеИсточник=Состояния[Источник];
	
   	СтКорректировка = Новый Структура; // структура корректировок
	СтСуммы = Новый Структура; // структура сумм в сстоянии
	
	// Состояние можно испоьзовать в расчете, если рассчитаны все входящие стрелки
	Если СостояниеИсточник.КоличествоИсточников=СостояниеИсточник.КоличествоРассчитанныхВходов Тогда
		
		СоотвПриемники=СостояниеИсточник.Приемники; // соответствие  - примники
		
		// Рассчитаем перемещения между состояниями
		Для Каждого ЭлементПриемник Из СоотвПриемники Цикл
			
			Приемник 		= ЭлементПриемник.Ключ;
			Количество 		= ЭлементПриемник.Значение.Количество;
			
			Состояние = Состояния[Приемник];
			
			// Заполним структуру корректировки сумм
			Для Каждого ЭлементСумма Из ЭлементПриемник.Значение.СтруктураСумм Цикл
				
				Если СостояниеИсточник.Количество > Количество Тогда
					СтКорректировка.Вставить("Себестоимость", Окр(СостояниеИсточник.СтруктураСумм[ЭлементСумма.Ключ]*Количество /СостояниеИсточник.Количество, 2));
				Иначе
					СтКорректировка.Вставить("Себестоимость", СостояниеИсточник.СтруктураСумм[ЭлементСумма.Ключ]);
				КонецЕсли;
				
				// Суммы в новом состоянии
				СтСуммы.Вставить(ЭлементСумма.Ключ, СтКорректировка["Себестоимость"]);
				
				// Корректировка равна разности между правильным движением и уже выполненным движением
				СтКорректировка.Вставить(ЭлементСумма.Ключ, СтКорректировка["Себестоимость"] - ЭлементСумма.Значение);
				СтКорректировка.Вставить("СписаноРанее",ЭлементСумма.Значение);
				СтКорректировка.Вставить("Количество", Количество);
				
			КонецЦикла;
			
			// Теперь можно сформировать записи по перемещению между состояниями
			// Передаем разницу между первоначальным движением и рассчитанным
			
			ДобавитьЗаписиПоПеремещению(СоотвПараметровСостояний[Источник], СоотвПараметровСостояний[Приемник], СтКорректировка, СтруктураПараметров, Движения, Отказ);
			
			// Поступление в состояние
			Состояние.Количество = Состояние.Количество + Количество;
			
			СостояниеИсточник.Количество = СостояниеИсточник.Количество - Количество;
			
			// Поступление в состояние: добавим суммы
			Для Каждого ЭлементСумма Из СтСуммы Цикл
				
				Состояние.СтруктураСумм[ЭлементСумма.Ключ]         = Состояние.СтруктураСумм[ЭлементСумма.Ключ]         + ЭлементСумма.Значение;
				СостояниеИсточник.СтруктураСумм[ЭлементСумма.Ключ] = СостояниеИсточник.СтруктураСумм[ЭлементСумма.Ключ] - ЭлементСумма.Значение;
				
			КонецЦикла;
			
			Состояние.КоличествоРассчитанныхВходов = Состояние.КоличествоРассчитанныхВходов+1;
			
			// Расчет пути из этой точки
			РассчитатьПуть(Приемник, Состояния, СоотвПараметровСостояний, СтруктураПараметров, Движения, Отказ);
			
		КонецЦикла;
		
		// Остаток в состоянии после перемещений: суммы
		СтОстаток = Новый Структура;
		Для Каждого ЭлементСумма Из СостояниеИсточник.СтруктураСумм Цикл
			СтОстаток.Вставить(ЭлементСумма.Ключ, ЭлементСумма.Значение);
		КонецЦикла;
		
		// Теперь можем рассчитать внешние выходы:
		// сформируем записи по внешнему списанию из состояния Источник
		
		ДобавитьЗаписиПоВнешнемуСписанию(СоотвПараметровСостояний[Источник], СостояниеИсточник.Количество, СтОстаток, СтруктураПараметров, Движения, Отказ);

		// Все выходы из данного состояния рассчитаны.
		
	КонецЕсли;
	
КонецПроцедуры
 
// Возвращает таблицу перемещений товаров между состояниями
// Зависит от конкретной структуры данных конфигурации
//
Функция ПолучитьТаблицуПеремещений(СтруктураПараметров, Префикс)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ВложенныйЗапрос.Сумма КАК Стоимость,
	|	ВложенныйЗапрос.Регистратор КАК Регистратор,
	|	ВложенныйЗапрос.Количество,
	|	ВложенныйЗапрос.СчетКт КАК Счет,
	|	ВложенныйЗапрос.СтруктурноеПодразделениеДт КАК СтруктурноеПодразделение" + Префикс + ",
	|	ВложенныйЗапрос.СтруктурноеПодразделениеКт КАК СтруктурноеПодразделение,
	|	ВложенныйЗапрос.СчетДт КАК Счет" + Префикс + ",
	|	ВложенныйЗапрос.СубконтоКт1 КАК Субконто1,
	|	ВложенныйЗапрос.СубконтоКт2 КАК Субконто2,
	|	ВложенныйЗапрос.СубконтоКт3 КАК Субконто3,
	|	ВложенныйЗапрос.СубконтоДт1 КАК Субконто1" + Префикс + ",
	|	ВложенныйЗапрос.СубконтоДт2 КАК Субконто2" + Префикс + ",
	|	ВложенныйЗапрос.СубконтоДт3 КАК Субконто3" + Префикс + "";
	Если СтруктураПараметров.Учет = "НУ" Тогда
		Запрос.Текст = Запрос.Текст + ",
		|	ВложенныйЗапрос.ВидУчетаКт КАК ВидУчета,
		|	ВложенныйЗапрос.ВидУчетаДт КАК ВидУчета" + Префикс;
	КонецЕсли;
	Запрос.Текст = Запрос.Текст + "
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТиповойОбороты.СчетКт КАК СчетКт,
	|		ТиповойОбороты.Регистратор КАК Регистратор,
	|		ВЫБОР КОГДА ТиповойОбороты.СубконтоКт1 ССЫЛКА Справочник.Номенклатура ТОГДА ТиповойОбороты.СубконтоКт1 КОГДА ТиповойОбороты.СубконтоКт2 ССЫЛКА Справочник.Номенклатура ТОГДА ТиповойОбороты.СубконтоКт2 КОГДА ТиповойОбороты.СубконтоКт3 ССЫЛКА Справочник.Номенклатура ТОГДА ТиповойОбороты.СубконтоКт3 ИНАЧЕ Неопределено КОНЕЦ КАК НоменклатураКт,
	|		ВЫБОР КОГДА ТиповойОбороты.СубконтоДт1 ССЫЛКА Справочник.Номенклатура ТОГДА ТиповойОбороты.СубконтоДт1 КОГДА ТиповойОбороты.СубконтоДт2 ССЫЛКА Справочник.Номенклатура ТОГДА ТиповойОбороты.СубконтоДт2 КОГДА ТиповойОбороты.СубконтоДт3 ССЫЛКА Справочник.Номенклатура ТОГДА ТиповойОбороты.СубконтоДт3 ИНАЧЕ NULL КОНЕЦ КАК НоменклатураДт,
	|		ВЫБОР КОГДА СуммовойУчетКт.Субконто1 ТОГДА ТиповойОбороты.СубконтоКт1 ИНАЧЕ Неопределено КОНЕЦ КАК СубконтоКт1,
	|		ВЫБОР КОГДА СуммовойУчетКт.Субконто2 ТОГДА ТиповойОбороты.СубконтоКт2 ИНАЧЕ Неопределено КОНЕЦ КАК СубконтоКт2,
	|		ВЫБОР КОГДА СуммовойУчетКт.Субконто3 ТОГДА ТиповойОбороты.СубконтоКт3 ИНАЧЕ Неопределено КОНЕЦ КАК СубконтоКт3,
	|		ТиповойОбороты.СчетДт КАК СчетДт,
	|		ТиповойОбороты.СтруктурноеПодразделениеДт КАК СтруктурноеПодразделениеДт,
	|		ТиповойОбороты.СтруктурноеПодразделениеКт КАК СтруктурноеПодразделениеКт,
	|		ВЫБОР КОГДА СуммовойУчетДт.Субконто1 ТОГДА ТиповойОбороты.СубконтоДт1 ИНАЧЕ Неопределено КОНЕЦ КАК СубконтоДт1,
	|		ВЫБОР КОГДА СуммовойУчетДт.Субконто2 ТОГДА ТиповойОбороты.СубконтоДт2 ИНАЧЕ Неопределено КОНЕЦ КАК СубконтоДт2,
	|		ВЫБОР КОГДА СуммовойУчетДт.Субконто3 ТОГДА ТиповойОбороты.СубконтоДт3 ИНАЧЕ Неопределено КОНЕЦ КАК СубконтоДт3, 
	|		СУММА(ВЫБОР КОГДА ТиповойОбороты.СуммаОборот ЕСТЬ NULL  ТОГДА 0 ИНАЧЕ ТиповойОбороты.СуммаОборот КОНЕЦ) КАК Сумма,
	|		СУММА(ВЫБОР КОГДА (ТиповойОбороты.КоличествоОборотКт) ЕСТЬ NULL  ТОГДА 0 ИНАЧЕ ТиповойОбороты.КоличествоОборотКт КОНЕЦ) КАК Количество ";
	Если СтруктураПараметров.Учет = "НУ" Тогда
		Запрос.Текст = Запрос.Текст + "
		|	, ТиповойОбороты.ВидУчетаДт КАК ВидУчетаДт,
		|	 ТиповойОбороты.ВидУчетаКт КАК ВидУчетаКт";
	КонецЕсли;
	Запрос.Текст = Запрос.Текст  + "
	|	ИЗ
	|		РегистрБухгалтерии.Типовой.ОборотыДтКт(&ДатаНач, &ДатаКон, Регистратор, СчетДт В ИЕРАРХИИ (&СписокСчетов), , СчетКт В ИЕРАРХИИ (&СписокСчетов), , Организация = &Организация) КАК ТиповойОбороты
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|				Типовой.Ссылка КАК Счет,
	|				МАКСИМУМ(ВЫБОР КОГДА ТиповойВидыСубконто.НомерСтроки = 1 ТОГДА ТиповойВидыСубконто.Суммовой ИНАЧЕ ЛОЖЬ КОНЕЦ) КАК Субконто1,
	|				МАКСИМУМ(ВЫБОР КОГДА ТиповойВидыСубконто.НомерСтроки = 2 ТОГДА ТиповойВидыСубконто.Суммовой ИНАЧЕ ЛОЖЬ КОНЕЦ) КАК Субконто2,
	|				МАКСИМУМ(ВЫБОР КОГДА ТиповойВидыСубконто.НомерСтроки = 3 ТОГДА ТиповойВидыСубконто.Суммовой ИНАЧЕ ЛОЖЬ КОНЕЦ) КАК Субконто3
	|			ИЗ
	|				ПланСчетов.Типовой.ВидыСубконто КАК ТиповойВидыСубконто
	|					ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Типовой КАК Типовой
	|					ПО ТиповойВидыСубконто.Ссылка = Типовой.Ссылка
	|			
	|			ГДЕ
	|				Типовой.Ссылка В ИЕРАРХИИ(&СписокСчетов)
	|			
	|			СГРУППИРОВАТЬ ПО
	|				Типовой.Ссылка) КАК СуммовойУчетКт
	|			ПО ТиповойОбороты.СчетКт = СуммовойУчетКт.Счет
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|				Типовой.Ссылка КАК Счет,
	|				МАКСИМУМ(ВЫБОР КОГДА ТиповойВидыСубконто.НомерСтроки = 1 ТОГДА ТиповойВидыСубконто.Суммовой ИНАЧЕ ЛОЖЬ КОНЕЦ) КАК Субконто1,
	|				МАКСИМУМ(ВЫБОР КОГДА ТиповойВидыСубконто.НомерСтроки = 2 ТОГДА ТиповойВидыСубконто.Суммовой ИНАЧЕ ЛОЖЬ КОНЕЦ) КАК Субконто2,
	|				МАКСИМУМ(ВЫБОР КОГДА ТиповойВидыСубконто.НомерСтроки = 3 ТОГДА ТиповойВидыСубконто.Суммовой ИНАЧЕ ЛОЖЬ КОНЕЦ) КАК Субконто3
	|			ИЗ
	|				ПланСчетов.Типовой.ВидыСубконто КАК ТиповойВидыСубконто
	|					ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Типовой КАК Типовой
	|					ПО ТиповойВидыСубконто.Ссылка = Типовой.Ссылка
	|			
	|			ГДЕ
	|				Типовой.Ссылка В ИЕРАРХИИ(&СписокСчетов)
	|			
	|			СГРУППИРОВАТЬ ПО
	|				Типовой.Ссылка) КАК СуммовойУчетДт
	|			ПО ТиповойОбороты.СчетДт = СуммовойУчетДт.Счет
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ТиповойОбороты.СчетКт,
	|		ТиповойОбороты.СчетДт,
	|		ТиповойОбороты.Регистратор,
	|		ТиповойОбороты.СтруктурноеПодразделениеДт,
	|		ТиповойОбороты.СтруктурноеПодразделениеКт,";
	Если СтруктураПараметров.Учет = "НУ" Тогда
		Запрос.Текст = Запрос.Текст + "
		|		ТиповойОбороты.ВидУчетаДт,
		|		ТиповойОбороты.ВидУчетаКт,";
	КонецЕсли;
	Запрос.Текст = Запрос.Текст  + "
	|		ВЫБОР КОГДА ТиповойОбороты.СубконтоКт1 ССЫЛКА Справочник.Номенклатура ТОГДА ТиповойОбороты.СубконтоКт1 КОГДА ТиповойОбороты.СубконтоКт2 ССЫЛКА Справочник.Номенклатура ТОГДА ТиповойОбороты.СубконтоКт2 КОГДА ТиповойОбороты.СубконтоКт3 ССЫЛКА Справочник.Номенклатура ТОГДА ТиповойОбороты.СубконтоКт3 ИНАЧЕ Неопределено КОНЕЦ,
	|		ВЫБОР КОГДА ТиповойОбороты.СубконтоДт1 ССЫЛКА Справочник.Номенклатура ТОГДА ТиповойОбороты.СубконтоДт1 КОГДА ТиповойОбороты.СубконтоДт2 ССЫЛКА Справочник.Номенклатура ТОГДА ТиповойОбороты.СубконтоДт2 КОГДА ТиповойОбороты.СубконтоДт3 ССЫЛКА Справочник.Номенклатура ТОГДА ТиповойОбороты.СубконтоДт3 ИНАЧЕ NULL КОНЕЦ,
	|		ВЫБОР КОГДА СуммовойУчетКт.Субконто1 ТОГДА ТиповойОбороты.СубконтоКт1 ИНАЧЕ Неопределено КОНЕЦ,
	|		ВЫБОР КОГДА СуммовойУчетКт.Субконто2 ТОГДА ТиповойОбороты.СубконтоКт2 ИНАЧЕ Неопределено КОНЕЦ,
	|		ВЫБОР КОГДА СуммовойУчетКт.Субконто3 ТОГДА ТиповойОбороты.СубконтоКт3 ИНАЧЕ Неопределено КОНЕЦ,
	|		ВЫБОР КОГДА СуммовойУчетДт.Субконто1 ТОГДА ТиповойОбороты.СубконтоДт1 ИНАЧЕ Неопределено КОНЕЦ,
	|		ВЫБОР КОГДА СуммовойУчетДт.Субконто2 ТОГДА ТиповойОбороты.СубконтоДт2 ИНАЧЕ Неопределено КОНЕЦ,
	|		ВЫБОР КОГДА СуммовойУчетДт.Субконто3 ТОГДА ТиповойОбороты.СубконтоДт3 ИНАЧЕ Неопределено КОНЕЦ) КАК ВложенныйЗапрос
	|
	|ГДЕ
	//|	ВЫБОР КОГДА ВложенныйЗапрос.СубконтоКт1 ССЫЛКА Документ.ОтчетПроизводстваЗаСмену ТОГДА ВложенныйЗапрос.СубконтоКт1.Дата КОГДА ВложенныйЗапрос.СубконтоКт2 ССЫЛКА Документ.ОтчетПроизводстваЗаСмену ТОГДА ВложенныйЗапрос.СубконтоКт2.Дата КОГДА ВложенныйЗапрос.СубконтоКт3 ССЫЛКА Документ.ОтчетПроизводстваЗаСмену ТОГДА ВложенныйЗапрос.СубконтоКт3.Дата ИНАЧЕ (&ДатаНач) КОНЕЦ >= &ДатаНач И
	|	(ВложенныйЗапрос.НоменклатураКт = ВложенныйЗапрос.НоменклатураДт) И ";
	
	Если СтруктураПараметров.ТаблицаТоваров <> Неопределено Тогда
		Запрос.Текст = Запрос.Текст + "
		|		(ВложенныйЗапрос.НоменклатураКт В (&СписокТоваров))  ";
	ИначеЕсли СтруктураПараметров.ТаблицаТоваров <> Неопределено И СтруктураПараметров.Учет = "НУ" Тогда
		Запрос.Текст = Запрос.Текст + "
		|		(ВложенныйЗапрос.НоменклатураКт В (&СписокТоваров)
		|		И ВложенныйЗапрос.Регистратор В (&СписокКорретируемыхДокументов)) ";	
	ИначеЕсли СтруктураПараметров.ТаблицаТоваров = Неопределено И СтруктураПараметров.Учет = "НУ" Тогда
		Запрос.Текст = Запрос.Текст + " 
		|		(ВложенныйЗапрос.Регистратор В (&СписокКорректируемыхДокументов)) ";
	КонецЕсли;   
	Запрос.Текст = Запрос.Текст + "
	|	И (ВложенныйЗапрос.СчетДт <> ВложенныйЗапрос.СчетКт ИЛИ ВложенныйЗапрос.СубконтоКт1 <> ВложенныйЗапрос.СубконтоДт1 ИЛИ ВложенныйЗапрос.СубконтоКт2 <> ВложенныйЗапрос.СубконтоДт2 
	| ИЛИ ВложенныйЗапрос.СубконтоКт3 <> ВложенныйЗапрос.СубконтоДт3 ИЛИ  ВложенныйЗапрос.СтруктурноеПодразделениеДт <> ВложенныйЗапрос.СтруктурноеПодразделениеКт)";
	
	Если СтруктураПараметров.Учет = "НУ" Тогда
		Запрос.УстановитьПараметр("ВидУчета",     СтруктураПараметров.ВидУчетаНУ);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Организация = &Организация", "Организация = &Организация И ВидУчетаДт В Иерархии(&ВидУчета) И ВидУчетаКт В Иерархии(&ВидУчета) ");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Типовой", "Налоговый");
	КонецЕсли; 
	
	Запрос.УстановитьПараметр("ДатаНач", 		СтруктураПараметров.НачалоПериода);
	Запрос.УстановитьПараметр("ДатаКон", 		СтруктураПараметров.КонецПериода);
	Запрос.УстановитьПараметр("Организация", 	СтруктураПараметров.Организация);
	Запрос.УстановитьПараметр("СписокСчетов",   ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСписокСчетовУчетаТМЗ(СтруктураПараметров.Учет));
	Запрос.УстановитьПараметр("СписокТоваров", 	СтруктураПараметров.ТаблицаТоваров);
	
	Если СтруктураПараметров.Учет = "НУ" Тогда 
		Запрос.УстановитьПараметр("СписокКорректируемыхДокументов", СтруктураПараметров.СписокКорректируемыхДокументов);
	КонецЕсли;
	
	Таб = Запрос.Выполнить().Выгрузить();
	ТаблицаПеремещений = Таб.Скопировать();
	
	СтруктураПараметров.Вставить("ТаблицаПеремещений", ТаблицаПеремещений);
	СтруктураПараметров.Вставить("Префикс", Префикс);
	
	Если СтруктураПараметров.Учет = "НУ" Тогда
		Таб.Свернуть("СтруктурноеПодразделение, СтруктурноеПодразделение" + Префикс + ",Счет,Счет" +Префикс + ",Субконто1,Субконто1" + Префикс + ",Субконто2,Субконто2"+ Префикс + ",Субконто3,Субконто3"+ Префикс + ", ВидУчета, ВидУчета" + Префикс, "Количество, Стоимость");
	Иначе
		Таб.Свернуть("СтруктурноеПодразделение, СтруктурноеПодразделение" + Префикс + ",Счет,Счет" +Префикс + ",Субконто1,Субконто1" + Префикс + ",Субконто2,Субконто2"+ Префикс + ",Субконто3,Субконто3"+ Префикс, "Количество, Стоимость");		
	КонецЕсли;
	
	Возврат Таб;
	
КонецФункции

// Добавляет данные о начальном остатке и внешнем поступлении в состояниях
//
Процедура ДобавитьНачальныйОстатокИВнешнееПоступление(Состояния, СоотвПараметровСостояний, СтруктураПараметров, МассивДобавляемыхВершин)
	
	МассивСумм = Неопределено; // список суммовых ресурсов, списываемых пропорционально количеству
	СтруктураПараметров.Свойство("МассивСумм", МассивСумм);
	
	Если ТипЗнч(МассивСумм) <> Тип("Массив") Тогда
		МассивСумм = Новый Массив;
		МассивСумм.Добавить("Стоимость");
	КонецЕсли;
	
	Текст = "ВЫБРАТЬ
	|	ВложенныйЗапрос.Счет,
	|	ВложенныйЗапрос.СтруктурноеПодразделение,
	|	ВЫБОР КОГДА СуммовойУчет.Субконто1 ТОГДА ВложенныйЗапрос.Субконто1 ИНАЧЕ Неопределено КОНЕЦ КАК Субконто1,
	|	ВЫБОР КОГДА СуммовойУчет.Субконто2 ТОГДА ВложенныйЗапрос.Субконто2 ИНАЧЕ Неопределено КОНЕЦ КАК Субконто2,
	|	ВЫБОР КОГДА СуммовойУчет.Субконто3 ТОГДА ВложенныйЗапрос.Субконто3 ИНАЧЕ Неопределено КОНЕЦ КАК Субконто3,
	|	ВЫБОР КОГДА СУММА(ВложенныйЗапрос.СуммаОстаток)                  ЕСТЬ NULL ТОГДА 0 ИНАЧЕ СУММА(ВложенныйЗапрос.СуммаОстаток) КОНЕЦ КАК СуммаОстаток,
	|	ВЫБОР КОГДА СУММА(ВложенныйЗапрос.КоличествоОстаток)             ЕСТЬ NULL ТОГДА 0 ИНАЧЕ СУММА(ВложенныйЗапрос.КоличествоОстаток) КОНЕЦ КАК КоличествоОстаток,
	|	ВЫБОР КОГДА СУММА(ВложенныйЗапрос.СуммаПриход)                   ЕСТЬ NULL ТОГДА 0 ИНАЧЕ СУММА(ВложенныйЗапрос.СуммаПриход) КОНЕЦ КАК СуммаПриход,
	|	ВЫБОР КОГДА СУММА(ВложенныйЗапрос.КоличествоПриход)              ЕСТЬ NULL ТОГДА 0 ИНАЧЕ СУММА(ВложенныйЗапрос.КоличествоПриход) КОНЕЦ КАК КоличествоПриход,
	|	ВЫБОР КОГДА СУММА(ВложенныйЗапрос.СуммаВозвратОтПокупателя)      ЕСТЬ NULL ТОГДА 0 ИНАЧЕ СУММА(ВложенныйЗапрос.СуммаВозвратОтПокупателя) КОНЕЦ КАК СуммаВозвратОтПокупателя,
	|	ВЫБОР КОГДА СУММА(ВложенныйЗапрос.КоличествоВозвратОтПокупателя) ЕСТЬ NULL ТОГДА 0 ИНАЧЕ СУММА(ВложенныйЗапрос.КоличествоВозвратОтПокупателя)  КОНЕЦ КАК КоличествоВозвратОтПокупателя,
	|	ВЫБОР КОГДА СУММА(ВложенныйЗапрос.СуммаВозвратПоставщику)        ЕСТЬ NULL ТОГДА 0 ИНАЧЕ СУММА(ВложенныйЗапрос.СуммаВозвратПоставщику) КОНЕЦ КАК СуммаВозвратПоставщику,
	|	ВЫБОР КОГДА СУММА(ВложенныйЗапрос.КоличествоВозвратПоставщику)   ЕСТЬ NULL ТОГДА 0 ИНАЧЕ СУММА(ВложенныйЗапрос.КоличествоВозвратПоставщику)  КОНЕЦ КАК КоличествоВозвратПоставщику,
	|	ВЫБОР КОГДА СУММА(ВложенныйЗапрос.СуммаПриходОтходов)            ЕСТЬ NULL ТОГДА 0 ИНАЧЕ СУММА(ВложенныйЗапрос.СуммаПриходОтходов) КОНЕЦ КАК СуммаПриходОтходов,
	|	ВЫБОР КОГДА СУММА(ВложенныйЗапрос.КоличествоПриходОтходов)       ЕСТЬ NULL ТОГДА 0 ИНАЧЕ СУММА(ВложенныйЗапрос.КоличествоПриходОтходов)  КОНЕЦ КАК КоличествоПриходОтходов";
	Если СтруктураПараметров.Учет = "НУ" Тогда
		Текст = Текст + ",
		|	ВложенныйЗапрос.ВидУчета Как ВидУчета";
	КонецЕсли;
	Текст = Текст + "
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаОстатковИПриходов.Счет КАК Счет,
	|		ТаблицаОстатковИПриходов.Субконто1 КАК Субконто1,
	|		ТаблицаОстатковИПриходов.Субконто2 КАК Субконто2,
	|		ТаблицаОстатковИПриходов.Субконто3 КАК Субконто3,
	|		ТаблицаОстатковИПриходов.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	|		СУММА(ВЫБОР КОГДА ТаблицаОстатковИПриходов.СуммаНачальныйОстаток ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ТаблицаОстатковИПриходов.СуммаНачальныйОстаток КОНЕЦ) КАК СуммаОстаток,";
	Если СтруктураПараметров.Учет = "НУ" Тогда
		Текст = Текст +"
		|		ТаблицаОстатковИПриходов.ВидУчета Как ВидУчета,";			
	КонецЕсли; 
	Текст = Текст + "
	|		СУММА(ВЫБОР КОГДА ТаблицаОстатковИПриходов.КоличествоНачальныйОстаток ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ТаблицаОстатковИПриходов.КоличествоНачальныйОстаток КОНЕЦ) КАК КоличествоОстаток,		
	|		ВЫБОР КОГДА СУММА(ТаблицаОстатковИПриходов.СуммаОборотДт) ЕСТЬ NULL ТОГДА 0 ИНАЧЕ СУММА(ТаблицаОстатковИПриходов.СуммаОборотДт) КОНЕЦ КАК СуммаПриход,
	|		ВЫБОР КОГДА СУММА(ТаблицаОстатковИПриходов.КоличествоОборотДт) ЕСТЬ NULL ТОГДА 0 ИНАЧЕ СУММА(ТаблицаОстатковИПриходов.КоличествоОборотДт) КОНЕЦ КАК КоличествоПриход,
	|		0 КАК СуммаВозвратОтПокупателя,
	|		0 КАК КоличествоВозвратОтПокупателя,
	|		0 КАК СуммаВозвратПоставщику,
	|		0 КАК КоличествоВозвратПоставщику,
	|		0 КАК СуммаПриходОтходов,
	|		0 КАК КоличествоПриходОтходов
	|	ИЗ
	|		РегистрБухгалтерии.Типовой.ОстаткиИОбороты(&ДатаНач, &ДатаКон, , , Счет В ИЕРАРХИИ (&СписокСчетов), , Организация = &Организация) КАК ТаблицаОстатковИПриходов";
	Если СтруктураПараметров.ТаблицаТоваров <> Неопределено Тогда
		Текст = Текст + "
		|	ГДЕ
		|		(ВЫБОР КОГДА ТаблицаОстатковИПриходов.Субконто1 ССЫЛКА Справочник.Номенклатура ТОГДА ТаблицаОстатковИПриходов.Субконто1 В (&МассивНоменклатуры) КОГДА ТаблицаОстатковИПриходов.Субконто2 ССЫЛКА Справочник.Номенклатура ТОГДА ТаблицаОстатковИПриходов.Субконто2 В (&МассивНоменклатуры) КОГДА ТаблицаОстатковИПриходов.Субконто3 ССЫЛКА Справочник.Номенклатура ТОГДА ТаблицаОстатковИПриходов.Субконто3 В (&МассивНоменклатуры) ИНАЧЕ ЛОЖЬ КОНЕЦ)";
	КонецЕсли;
	Текст = Текст + "
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ТаблицаОстатковИПриходов.Счет,
	|		ТаблицаОстатковИПриходов.Субконто1,
	|		ТаблицаОстатковИПриходов.Субконто2,
	|		ТаблицаОстатковИПриходов.Субконто3,
	|       ТаблицаОстатковИПриходов.СтруктурноеПодразделение";
	Если СтруктураПараметров.Учет = "НУ" Тогда
		Текст = Текст +",
		|		ТаблицаОстатковИПриходов.ВидУчета";
	КонецЕсли;
	Текст = Текст + "
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТаблицаВозвратов.Счет,
	|		ТаблицаВозвратов.Субконто1,
	|		ТаблицаВозвратов.Субконто2,
	|		ТаблицаВозвратов.Субконто3,
	|		ТаблицаВозвратов.СтруктурноеПодразделение,
	|		0,";
	Если СтруктураПараметров.Учет = "НУ" Тогда
		Текст = Текст + "
		|		ТаблицаВозвратов.ВидУчета,";
	КонецЕсли;
	Текст = Текст + "
	|		0,
	|		0,
	|		0, 
	|		СУММА(ВЫБОР КОГДА (ТаблицаВозвратов.СуммаОборотДт >= 0  И НЕ ТаблицаВозвратов.Регистратор Ссылка Документ.ОтчетПроизводстваЗаСмену) ТОГДА -(ТаблицаВозвратов.СуммаОборотДт) ИНАЧЕ 0 КОНЕЦ),
	|		СУММА(ВЫБОР КОГДА (ТаблицаВозвратов.КоличествоОборотДт >= 0 И НЕ ТаблицаВозвратов.Регистратор Ссылка Документ.ОтчетПроизводстваЗаСмену) ТОГДА -(ТаблицаВозвратов.КоличествоОборотДт) ИНАЧЕ 0 КОНЕЦ),
	|		СУММА(ВЫБОР КОГДА ТаблицаВозвратов.СуммаОборотКт >= 0 ТОГДА ТаблицаВозвратов.СуммаОборотКт ИНАЧЕ 0 КОНЕЦ),
	|		СУММА(ВЫБОР КОГДА ТаблицаВозвратов.КоличествоОборотКт >= 0 ТОГДА ТаблицаВозвратов.КоличествоОборотКт ИНАЧЕ 0 КОНЕЦ),
	|		СУММА(ВЫБОР КОГДА (ТаблицаВозвратов.СуммаОборотКт < 0  И ТаблицаВозвратов.Регистратор Ссылка Документ.ОтчетПроизводстваЗаСмену) ТОГДА -(ТаблицаВозвратов.СуммаОборотКт) ИНАЧЕ 0 КОНЕЦ),		
	|		СУММА(ВЫБОР КОГДА (ТаблицаВозвратов.КоличествоОборотКт < 0 И ТаблицаВозвратов.Регистратор Ссылка Документ.ОтчетПроизводстваЗаСмену) ТОГДА -(ТаблицаВозвратов.КоличествоОборотКт) ИНАЧЕ 0 КОНЕЦ)
	|	ИЗ
	|		РегистрБухгалтерии.Типовой.Обороты(&ДатаНач, &ДатаКон, Регистратор, Счет В ИЕРАРХИИ (&СписокСчетов), ,  Организация = &Организация, , ) КАК ТаблицаВозвратов
	|	
	|	ГДЕ (ВЫБОР КОГДА (ТаблицаВозвратов.Регистратор ССЫЛКА Документ.ВозвратТоваровОтПокупателя) 
	|			ТОГДА (ВЫРАЗИТЬ(ТаблицаВозвратов.Регистратор КАК Документ.ВозвратТоваровОтПокупателя).Сделка.Дата < &ДатаНач 
	|				ИЛИ ВЫРАЗИТЬ(ТаблицаВозвратов.Регистратор КАК Документ.ВозвратТоваровОтПокупателя).Сделка.Склад <> ВЫРАЗИТЬ(ТаблицаВозвратов.Регистратор КАК Документ.ВозвратТоваровОтПокупателя).Склад 
	|				ИЛИ ВЫРАЗИТЬ(ТаблицаВозвратов.Регистратор КАК Документ.ВозвратТоваровОтПокупателя).Сделка.Склад ЕСТЬ NULL
	|				ИЛИ ВЫРАЗИТЬ(ТаблицаВозвратов.Регистратор КАК Документ.ВозвратТоваровОтПокупателя).Сделка.Дата ЕСТЬ NULL) 
	|		ИНАЧЕ ЛОЖЬ КОНЕЦ)
	|		ИЛИ (ТаблицаВозвратов.Регистратор ССЫЛКА Документ.ОтчетПроизводстваЗаСмену И (ТаблицаВозвратов.КоличествоОборотКт < 0 ИЛИ ТаблицаВозвратов.СуммаОборотКт < 0))";
	Если СтруктураПараметров.ТаблицаТоваров <> Неопределено Тогда
		Текст = Текст + " И
		|		(ВЫБОР КОГДА ТаблицаВозвратов.Субконто1 ССЫЛКА Справочник.Номенклатура ТОГДА ТаблицаВозвратов.Субконто1 В (&МассивНоменклатуры) КОГДА ТаблицаВозвратов.Субконто2 ССЫЛКА Справочник.Номенклатура ТОГДА ТаблицаВозвратов.Субконто2 В (&МассивНоменклатуры) КОГДА ТаблицаВозвратов.Субконто3 ССЫЛКА Справочник.Номенклатура ТОГДА ТаблицаВозвратов.Субконто3 В (&МассивНоменклатуры) ИНАЧЕ ЛОЖЬ КОНЕЦ)";
	КонецЕсли;
	Текст = Текст + "
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ТаблицаВозвратов.Счет,
	|		ТаблицаВозвратов.Субконто1,
	|		ТаблицаВозвратов.Субконто2,
	|		ТаблицаВозвратов.Субконто3, 
	|		ТаблицаВозвратов.СтруктурноеПодразделение";
	Если СтруктураПараметров.Учет = "НУ" Тогда
		Текст = Текст + ",
		|		ТаблицаВозвратов.ВидУчета";
	КонецЕсли;                		
	Текст = Текст + " 
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВнутренееПеремещение.Счет,
	|		ВнутренееПеремещение.Субконто1,
	|		ВнутренееПеремещение.Субконто2,
	|		ВнутренееПеремещение.Субконто3,
	|		ВнутренееПеремещение.СтруктурноеПодразделение, 
	|		0,";
	Если СтруктураПараметров.Учет = "НУ" Тогда
		Текст = Текст +"
		|		ВнутренееПеремещение.ВидУчета,";
	КонецЕсли;
	Текст = Текст + "
	|		0,
	|		СУММА(-(ВЫБОР КОГДА ВнутренееПеремещение.СуммаОборотДт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ВнутренееПеремещение.СуммаОборотДт КОНЕЦ)),
	|		СУММА(-(ВЫБОР КОГДА ВнутренееПеремещение.КоличествоОборотДт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ВнутренееПеремещение.КоличествоОборотДт КОНЕЦ)),
	|		0,
	|		0,
	|		0,
	|		0,
	|		0,
	|		0
	|	ИЗ
	|		РегистрБухгалтерии.Типовой.Обороты(&ДатаНач, &ДатаКон, Период, Счет В ИЕРАРХИИ (&СписокСчетов), ,  Организация = &Организация, КорСчет В ИЕРАРХИИ (&СписокСчетов), ) КАК ВнутренееПеремещение
	|	ГДЕ
	|		((ВЫБОР КОГДА ВнутренееПеремещение.Субконто1 ССЫЛКА Справочник.Номенклатура 
	|					ТОГДА ВнутренееПеремещение.Субконто1 
	|				КОГДА ВнутренееПеремещение.Субконто2 ССЫЛКА Справочник.Номенклатура 
	|					ТОГДА ВнутренееПеремещение.Субконто2 
	|				КОГДА ВнутренееПеремещение.Субконто3 ССЫЛКА Справочник.Номенклатура 
	|					ТОГДА ВнутренееПеремещение.Субконто3 
	|				ИНАЧЕ 
	|					NULL КОНЕЦ) = 
	|		(ВЫБОР КОГДА ВнутренееПеремещение.КорСубконто1 ССЫЛКА Справочник.Номенклатура 
	|					ТОГДА ВнутренееПеремещение.КорСубконто1 
	|				КОГДА ВнутренееПеремещение.КорСубконто2 ССЫЛКА Справочник.Номенклатура 
	|					ТОГДА ВнутренееПеремещение.КорСубконто2 
	|				КОГДА ВнутренееПеремещение.КорСубконто3 ССЫЛКА Справочник.Номенклатура 
	|					ТОГДА ВнутренееПеремещение.КорСубконто3 
	|				ИНАЧЕ 
	|					NULL КОНЕЦ))";
	Если СтруктураПараметров.ТаблицаТоваров <> Неопределено Тогда
		Текст = Текст + "
		|		И (ВЫБОР КОГДА ВнутренееПеремещение.Субконто1 ССЫЛКА Справочник.Номенклатура ТОГДА ВнутренееПеремещение.Субконто1 В (&МассивНоменклатуры) КОГДА ВнутренееПеремещение.Субконто2 ССЫЛКА Справочник.Номенклатура ТОГДА ВнутренееПеремещение.Субконто2 В (&МассивНоменклатуры) КОГДА ВнутренееПеремещение.Субконто3 ССЫЛКА Справочник.Номенклатура ТОГДА ВнутренееПеремещение.Субконто3 В (&МассивНоменклатуры) ИНАЧЕ ЛОЖЬ КОНЕЦ)";
	КонецЕсли;
	Текст = Текст + "
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ВнутренееПеремещение.Счет,
	|		ВнутренееПеремещение.Субконто1,
	|		ВнутренееПеремещение.Субконто2,
	|		ВнутренееПеремещение.Субконто3,
	|		ВнутренееПеремещение.СтруктурноеПодразделение";
	Если СтруктураПараметров.Учет = "НУ" Тогда
		Текст = Текст + ",
		|		ВнутренееПеремещение.ВидУчета";
	КонецЕсли;                		
	
	// Если есть операции списания, которе не должны быть скорректированы, то эти
	// операции необходимо учесть при расчете средневзвешенной стоимости номенклатуры.
	Если СтруктураПараметров.СписокНеКорректируемыхСчетов <> Неопределено Тогда
		
		Текст = Текст + "
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ТаблицаНеУчитываемыхСписаний.Счет,
		|		ТаблицаНеУчитываемыхСписаний.Субконто1,
		|		ТаблицаНеУчитываемыхСписаний.Субконто2,
		|		ТаблицаНеУчитываемыхСписаний.Субконто3,
		|		ТаблицаНеУчитываемыхСписаний.СтруктурноеПодразделение, 
		|		0,";
		Если СтруктураПараметров.Учет = "НУ" Тогда
			Текст = Текст + "
			|		ТаблицаНеУчитываемыхСписаний.ВидУчета,";
		КонецЕсли;   
		Текст = Текст + "
		|		0,
		|		СУММА(-(ВЫБОР КОГДА ТаблицаНеУчитываемыхСписаний.СуммаОборотКт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ТаблицаНеУчитываемыхСписаний.СуммаОборотКт КОНЕЦ)),
		|		СУММА(-(ВЫБОР КОГДА ТаблицаНеУчитываемыхСписаний.КоличествоОборотКт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ТаблицаНеУчитываемыхСписаний.КоличествоОборотКт КОНЕЦ)),
		|		0,
		|		0,
		|		0,
		|		0,
		|		0,
		|		0
		|	ИЗ
		|		РегистрБухгалтерии.Типовой.Обороты(&ДатаНач, &ДатаКон, , Счет В ИЕРАРХИИ (&СписокНеКорректируемыхСчетов), ,  Организация = &Организация, , ) КАК ТаблицаНеУчитываемыхСписаний";
		
		Если СтруктураПараметров.ТаблицаТоваров <> Неопределено Тогда
			Текст = Текст + "
			|	
			|	ГДЕ
			|		(ВЫБОР КОГДА ТаблицаНеУчитываемыхСписаний.Субконто1 ССЫЛКА Справочник.Номенклатура ТОГДА ТаблицаНеУчитываемыхСписаний.Субконто1 В (&МассивНоменклатуры) КОГДА ТаблицаНеУчитываемыхСписаний.Субконто2 ССЫЛКА Справочник.Номенклатура ТОГДА ТаблицаНеУчитываемыхСписаний.Субконто2 В (&МассивНоменклатуры) КОГДА ТаблицаНеУчитываемыхСписаний.Субконто3 ССЫЛКА Справочник.Номенклатура ТОГДА ТаблицаНеУчитываемыхСписаний.Субконто3 В (&МассивНоменклатуры) ИНАЧЕ ЛОЖЬ КОНЕЦ)";
		КонецЕсли;
		
		Текст = Текст + "
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ТаблицаНеУчитываемыхСписаний.Счет,
		|		ТаблицаНеУчитываемыхСписаний.Субконто1,
		|		ТаблицаНеУчитываемыхСписаний.Субконто2,
		|		ТаблицаНеУчитываемыхСписаний.Субконто3,
		|		ТаблицаНеУчитываемыхСписаний.СтруктурноеПодразделение";
		Если СтруктураПараметров.Учет = "НУ" Тогда
			Текст = Текст + ",
			|		ТаблицаНеУчитываемыхСписаний.ВидУчета";
		КонецЕсли; 			
	КонецЕсли;  	
	Текст = Текст + ") КАК ВложенныйЗапрос
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			Типовой.Ссылка КАК Счет,
	|			МАКСИМУМ(ВЫБОР КОГДА ТиповойВидыСубконто.НомерСтроки = 1 ТОГДА ТиповойВидыСубконто.Суммовой ИНАЧЕ ЛОЖЬ КОНЕЦ) КАК Субконто1,
	|			МАКСИМУМ(ВЫБОР КОГДА ТиповойВидыСубконто.НомерСтроки = 2 ТОГДА ТиповойВидыСубконто.Суммовой ИНАЧЕ ЛОЖЬ КОНЕЦ) КАК Субконто2,
	|			МАКСИМУМ(ВЫБОР КОГДА ТиповойВидыСубконто.НомерСтроки = 3 ТОГДА ТиповойВидыСубконто.Суммовой ИНАЧЕ ЛОЖЬ КОНЕЦ) КАК Субконто3
	|		ИЗ
	|			ПланСчетов.Типовой.ВидыСубконто КАК ТиповойВидыСубконто
	|				ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Типовой КАК Типовой
	|				ПО ТиповойВидыСубконто.Ссылка = Типовой.Ссылка
	|		
	|		ГДЕ
	|			Типовой.Ссылка В ИЕРАРХИИ(&СписокСчетов)
	|		
	|		СГРУППИРОВАТЬ ПО
	|			Типовой.Ссылка) КАК СуммовойУчет
	|		ПО ВложенныйЗапрос.Счет = СуммовойУчет.Счет
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Счет,
	|	ВложенныйЗапрос.СтруктурноеПодразделение,
	|	ВЫБОР КОГДА СуммовойУчет.Субконто1 ТОГДА ВложенныйЗапрос.Субконто1 ИНАЧЕ Неопределено КОНЕЦ,
	|	ВЫБОР КОГДА СуммовойУчет.Субконто2 ТОГДА ВложенныйЗапрос.Субконто2 ИНАЧЕ Неопределено КОНЕЦ,
	|	ВЫБОР КОГДА СуммовойУчет.Субконто3 ТОГДА ВложенныйЗапрос.Субконто3 ИНАЧЕ Неопределено КОНЕЦ";
	Если СтруктураПараметров.Учет = "НУ" Тогда
		Текст = Текст +",
		|		ВложенныйЗапрос.ВидУчета";
	КонецЕсли;  		      	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНач", 						СтруктураПараметров.НачалоПериода);
	Запрос.УстановитьПараметр("ДатаКон", 						СтруктураПараметров.КонецПериода);
	Запрос.УстановитьПараметр("Организация", 					СтруктураПараметров.Организация);
	Запрос.УстановитьПараметр("МассивНоменклатуры", 			СтруктураПараметров.ТаблицаТоваров);
	Запрос.УстановитьПараметр("СписокСчетов",  					ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСписокСчетовУчетаТМЗ(СтруктураПараметров.Учет));
	Запрос.УстановитьПараметр("СчетаРасчетов", 					ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСписокСчетовРасчетов());
	Запрос.УстановитьПараметр("СписокНеКорректируемыхСчетов", 	СтруктураПараметров.СписокНеКорректируемыхСчетов);
	
	Если СтруктураПараметров.Учет = "НУ" Тогда
		Текст = СтрЗаменить(Текст, "Типовой", "Налоговый");
		Текст = СтрЗаменить(Текст, "Организация = &Организация", "Организация = &Организация И ВидУчета В Иерархии(&ВидУчета)");
		Запрос.УстановитьПараметр("ВидУчета", СтруктураПараметров.ВидУчетаНУ);   			
	КонецЕсли; 
	
	Запрос.Текст = Текст;
	
	ТабПартий = Запрос.Выполнить().Выгрузить();
	
	ТабПартий.Колонки.Добавить("Найдена", Новый ОписаниеТипов("Булево"));
	
	Парам = Новый Структура;
	ИндСостояния = Состояния.Количество();
	
	Для Каждого Состояние Из Состояния Цикл
		
		ИндСостояния = Макс(ИндСостояния, Состояние.Ключ);	
		
		// Это параметры (значения измерений, счетов, субконто и т.д.), которые имеет состояние
		ПараметрыСостояния = СоотвПараметровСостояний[Состояние.Ключ];
		
		Парам.Вставить("Счет", ПараметрыСостояния["Счет"]);
		Парам.Вставить("Субконто1", ПараметрыСостояния["Субконто1"]);
		Парам.Вставить("Субконто2", ПараметрыСостояния["Субконто2"]);
		Парам.Вставить("Субконто3", ПараметрыСостояния["Субконто3"]);
		Парам.Вставить("СтруктурноеПодразделение", ПараметрыСостояния["СтруктурноеПодразделение"]);
		Если СтруктураПараметров.Учет = "НУ" Тогда
			Парам.Вставить("ВидУчета", ПараметрыСостояния["ВидУчета"]);
		КонецЕсли;
		
		Количество = 0;
		
		СтруктураСумм = Новый Структура; // структура, хранящая суммы
		
		// Заполнение сумм
		Для Каждого ЭлементСумма Из МассивСумм Цикл
			СтруктураСумм.Вставить(ЭлементСумма, 0);
		КонецЦикла;
		
		НайдСтроки = ТабПартий.НайтиСтроки(Парам);
		Для Каждого СтрокаТаблицы Из НайдСтроки Цикл
			
			Количество = СтрокаТаблицы.КоличествоОстаток + СтрокаТаблицы.КоличествоПриход 
					   + СтрокаТаблицы.КоличествоПриходОтходов + СтрокаТаблицы.КоличествоВозвратОтПокупателя + СтрокаТаблицы.КоличествоВозвратПоставщику;
			
			Сумма      = СтрокаТаблицы.СуммаОстаток + СтрокаТаблицы.СуммаПриход 
					   + СтрокаТаблицы.СуммаПриходОтходов + СтрокаТаблицы.СуммаВозвратОтПокупателя + СтрокаТаблицы.СуммаВозвратПоставщику;
			
			СтруктураСумм.Вставить("Стоимость",  СтруктураСумм[ЭлементСумма] + Сумма);
			
			// Отметим найденные строки (участвующие в перемещениях), чтобы потом добавить все остальные остатки
			СтрокаТаблицы.Найдена = Истина;
		КонецЦикла;
		
		Состояние.Значение.Вставить("Количество", Количество);
		Состояние.Значение.Вставить("СтруктураСумм", СтруктураСумм);
	КонецЦикла;
	
	// Теперь добавим состояния не участвующие в перемещениях (обособленные вершины) - тем, по которым не было перемещений, чтобы по ним внешнее списание рассчиталось той же процедурой, что и для перемещений
	//ИндСостояния=Состояния.Количество();
	Для Каждого СтрокаТаблицы Из ТабПартий Цикл
		Если НЕ СтрокаТаблицы.Найдена Тогда
			
			Количество    = СтрокаТаблицы.КоличествоОстаток + СтрокаТаблицы.КоличествоПриход + СтрокаТаблицы.КоличествоВозвратОтПокупателя + СтрокаТаблицы.КоличествоВозвратПоставщику;
			
			СтруктураСумм = Новый Структура; // структура, хранящая суммы
			СтруктураСумм.Вставить("Стоимость", СтрокаТаблицы.СуммаОстаток + СтрокаТаблицы.СуммаПриход + СтрокаТаблицы.СуммаВозвратОтПокупателя + СтрокаТаблицы.СуммаВозвратПоставщику);
			
			ИндСостояния  = ИндСостояния + 1;
			
			// Добавим состояние со всеми необходимыми параметрами
			Состояния.Вставить(ИндСостояния, 
			Новый Структура("КоличествоИсточников, КоличествоРассчитанныхВходов, Приемники, Количество, СтруктураСумм", 0, 0, Новый Соответствие, Количество, СтруктураСумм));
			
			Если СтруктураПараметров.Учет = "НУ" Тогда
				СоотвПараметровСостояний.Вставить(ИндСостояния, Новый Структура("Счет,СтруктурноеПодразделение,Субконто1,Субконто2,Субконто3,ВидУчета", СтрокаТаблицы.Счет, СтрокаТаблицы.СтруктурноеПодразделение, СтрокаТаблицы.Субконто1, СтрокаТаблицы.Субконто2, СтрокаТаблицы.Субконто3, СтрокаТаблицы.ВидУчета));
			Иначе
				СоотвПараметровСостояний.Вставить(ИндСостояния, Новый Структура("Счет,СтруктурноеПодразделение,Субконто1,Субконто2,Субконто3", СтрокаТаблицы.Счет, СтрокаТаблицы.СтруктурноеПодразделение, СтрокаТаблицы.Субконто1, СтрокаТаблицы.Субконто2, СтрокаТаблицы.Субконто3));
			КонецЕсли;
			
			МассивДобавляемыхВершин.Добавить(ИндСостояния);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Добавляет в базу данных записи по перемещению в другое состояние
//
Процедура ДобавитьЗаписиПоПеремещению(ПараметрыСостоянияИсточника, ПараметрыСостоянияПриемника, ИсходнаяСуммаКорректировки, СтруктураПараметров, Движения, Отказ)
	
	СуммаКорректировки 		= ИсходнаяСуммаКорректировки.Стоимость;
	КоличествоКорректировки = ИсходнаяСуммаКорректировки.Количество;
	         		
	Если ИсходнаяСуммаКорректировки.Свойство("СписаноРанее") Тогда
		СуммаСписаноРанее = ИсходнаяСуммаКорректировки.СписаноРанее;
	Иначе
		СуммаСписаноРанее = 0;
	КонецЕсли;

	Если ИсходнаяСуммаКорректировки.Свойство("Себестоимость") Тогда
		СуммаСебестоимости = ИсходнаяСуммаКорректировки.Себестоимость;
	Иначе
		СуммаСебестоимости = СуммаСписаноРанее+СуммаКорректировки;
	КонецЕсли;
	
	Если СуммаКорректировки = 0 Тогда
		Возврат;
	КонецЕсли;
	
	НаборЗаписей = Движения[?(СтруктураПараметров.Учет = "НУ", "Налоговый", "Типовой")];
	СуммаКорректировки = Окр(СуммаКорректировки, 2, 1);
	
	Префикс = СтруктураПараметров.Префикс;
	СтруктураПоискаПоРегистратору = Новый Структура("СтруктурноеПодразделение, Счет,Субконто1,Субконто2,Субконто3,СтруктурноеПодразделение" + Префикс +" ,Счет" + Префикс + ",Субконто1" + Префикс + ", Субконто2" + Префикс + ",Субконто3" + Префикс + "",
									ПараметрыСостоянияИсточника.СтруктурноеПодразделение, ПараметрыСостоянияИсточника.Счет, ПараметрыСостоянияИсточника.Субконто1, ПараметрыСостоянияИсточника.Субконто2, ПараметрыСостоянияИсточника.Субконто3,
									ПараметрыСостоянияПриемника.СтруктурноеПодразделение, ПараметрыСостоянияПриемника.Счет, ПараметрыСостоянияПриемника.Субконто1, ПараметрыСостоянияПриемника.Субконто2, ПараметрыСостоянияПриемника.Субконто3);
	
	ОперацийПеремещений = СтруктураПараметров.ТаблицаПеремещений.НайтиСтроки(СтруктураПоискаПоРегистратору);
	ОбщаяСуммаКорректировки = 0;
	ОсталосьКоличества      = КоличествоКорректировки;
		
	УжеСписано = 0;
	ОбщаяСтоимостьКорректировкиБУ = 0;
	
	Для Каждого ОперацияПеремещения Из ОперацийПеремещений Цикл
		Если ОперацияПеремещения.Количество = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если ОсталосьКоличества < ОперацияПеремещения.Количество
			И КоличествоКорректировки <> 0 И ОсталосьКоличества <> 0 Тогда
			КоэффициентКорректировки = ОсталосьКоличества/КоличествоКорректировки;
		Иначе			
			Если КоличествоКорректировки > ОперацияПеремещения.Количество Тогда
				КоэффициентКорректировки = ОперацияПеремещения.Количество/КоличествоКорректировки;
			Иначе
				КоэффициентКорректировки = 1;
			КонецЕсли;
		КонецЕсли;
		
		ОсталосьКоличества = ОсталосьКоличества- ОперацияПеремещения.Количество;
		
		СуммаКорректировкиПеремещения = 0;
		Если СтруктураПараметров.Учет = "БУ" Тогда

			Если УжеСписано = СуммаКорректировки Тогда
				Продолжить;
			КонецЕсли; 
			
			СуммаКорректировкиПеремещения = Окр(СуммаКорректировки*КоэффициентКорректировки,2);
			ОбщаяСуммаКорректировки = ОбщаяСуммаКорректировки + СуммаКорректировкиПеремещения;
			УжеСписано = ОбщаяСуммаКорректировки; 

		ИначеЕсли СтруктураПараметров.Учет = "НУ" Тогда
			// получаем сведения о корректировке из БУ
			// корректирующая корреспонденция будет производиться на общую сумму по аналитике
			СтруктураПоиска = Новый Структура;
			//для перемешения ищем без учета ном. групп и подразделений выпуска. Так как они не могут присутствовать в аналитике проводки
			СтруктураПоиска.Вставить("Номенклатура",						ПараметрыСостоянияИсточника.Субконто1);
			СтруктураПоиска.Вставить("СтруктурноеПодразделение",			ПараметрыСостоянияИсточника.СтруктурноеПодразделение);
			СтруктураПоиска.Вставить("СтруктурноеПодразделениеПолучатель",	ПараметрыСостоянияПриемника.СтруктурноеПодразделение);
			СтруктураПоиска.Вставить("КорректируемыйДокумент",				ОперацияПеремещения.Регистратор);
				
			СписокНоменклатуры = СтруктураПараметров.ТаблицаРасчетаСебестоимости.НайтиСтроки(СтруктураПоиска);
			Если СписокНоменклатуры.Количество() <> 0 Тогда
				///////////////////////////////////////
				//// получаем данные из БУ о сумме списания и корректировке документа
				СебестоимостьБУ 		= 0;  КоличествоБУ 			= 0;
				СуммаКорректировкиБУ 	= 0;  РанееСписаноВБУ			= 0;
				УжеСписаноВНУ			= 0;					
				
				Для Каждого КорректируемаяПартия Из СписокНоменклатуры Цикл
					СебестоимостьБУ 		= СебестоимостьБУ 		 + КорректируемаяПартия.Себестоимость;
					КоличествоБУ    		= КоличествоБУ 			 + КорректируемаяПартия.Количество;
					СуммаКорректировкиБУ 	= СуммаКорректировкиБУ	 + КорректируемаяПартия.СуммаКорректировки;
					УжеСписаноВНУ			= УжеСписаноВНУ			 + КорректируемаяПартия.СуммаКорректировкиВНУ;
				КонецЦикла; 
				РанееСписаноВБУ		= СебестоимостьБУ - СуммаКорректировкиБУ;	
				ОбщаяСтоимостьКорректировкиБУ = ОбщаяСтоимостьКорректировкиБУ + СуммаКорректировкиБУ;
				
				Если СуммаКорректировкиБУ = УжеСписаноВНУ Тогда
					Продолжить;
				КонецЕсли;

				КоличествоСписанияВНУ 	= ОперацияПеремещения.Количество;
				СуммаСписанияВНУ 		= Окр(СуммаСписаноРанее * КоэффициентКорректировки,2);;
				
				//  БУ > НУ например в случаях, когда в НУ направления списания отличаются от БУ
				//  НУ м/б больше БУ  в случаях, когда на счетах БУ ведется партионный учет и списание в течение месяца происходило по партиям, произведенным в прошлых периодах.
				//  в БУ в этом случае корректировка затрагивает только производственные партии текущего периода. В НУ из-за отсутствия партионного учета мы располагаем только общей суммой списания.
				Если КоличествоБУ < КоличествоСписанияВНУ Тогда				
					КоличествоСписанияВНУ 			= КоличествоБУ;						
					СуммаСписанияВНУ 				= РанееСписаноВБУ;
				КонецЕсли;	
				
				Если КоличествоБУ > КоличествоСписанияВНУ Тогда
					КоэффициентКорректировки = КоличествоСписанияВНУ/КоличествоБУ;
				Иначе
					КоэффициентКорректировки = 1;
				КонецЕсли;      			
				
				ДолжноБытьСписаноНУ   = ?(КоличествоСписанияВНУ = КоличествоБУ, СебестоимостьБУ , Окр(СебестоимостьБУ/КоличествоБУ * КоличествоСписанияВНУ, 2)); 								
								
				СуммаКорректировкиПеремещения = ?(КоличествоСписанияВНУ = КоличествоБУ, СуммаКорректировкиБУ , Окр(СуммаКорректировкиБУ/КоличествоБУ * КоличествоСписанияВНУ, 2));
				
				Если СуммаКорректировки <> 0 Тогда
					СписокНоменклатуры[0].СуммаКорректировкиВНУ = СписокНоменклатуры[0].СуммаКорректировкиВНУ + СуммаКорректировкиПеремещения; 
				КонецЕсли;
				ОбщаяСуммаКорректировки = ОбщаяСуммаКорректировки + СуммаКорректировкиПеремещения;	

			КонецЕсли;

		КонецЕсли;
		
		Если НЕ ТипЗнч(ОперацияПеремещения.Регистратор) = Тип("ДокументСсылка.ЗакрытиеМесяца") И СтруктураПараметров.Свойство("ЗаписьСведенияОКорректировкиСтоимостиПродукцииИТоваров") Тогда
			
			// суммы корректировок - складываются.
			// сведения о количестве и себестоимости в БУ - переписываются
			СтруктураПоиска = Новый Структура("Организация, Номенклатура,КорректируемыйДокумент",
				СтруктураПараметров.Организация, ПараметрыСостоянияИсточника.Субконто1, ОперацияПеремещения.Регистратор);
				
			СписокКорректировок = СтруктураПараметров.ЗаписьСведенияОКорректировкиСтоимостиПродукцииИТоваров.НайтиСтроки(СтруктураПоиска);
			Если СписокКорректировок.Количество() = 0 Тогда
				ЗаписьСведенияОКорректировкиСтоимостиПродукцииИТоваров = СтруктураПараметров.ЗаписьСведенияОКорректировкиСтоимостиПродукцииИТоваров.Добавить();
				ЗаписьСведенияОКорректировкиСтоимостиПродукцииИТоваров.ПериодРасчета               = СтруктураПараметров.Период;
				ЗаписьСведенияОКорректировкиСтоимостиПродукцииИТоваров.Организация                 = СтруктураПараметров.Организация;
				ЗаписьСведенияОКорректировкиСтоимостиПродукцииИТоваров.Номенклатура                = ПараметрыСостоянияИсточника.Субконто1;
				ЗаписьСведенияОКорректировкиСтоимостиПродукцииИТоваров.Регистратор                 = СтруктураПараметров.Регистратор;
				ЗаписьСведенияОКорректировкиСтоимостиПродукцииИТоваров.КорректируемыйДокумент      = ОперацияПеремещения.Регистратор;
				ЗаписьСведенияОКорректировкиСтоимостиПродукцииИТоваров.СтруктурноеПодразделение    = ПараметрыСостоянияИсточника.СтруктурноеПодразделение;
				ЗаписьСведенияОКорректировкиСтоимостиПродукцииИТоваров.СтруктурноеПодразделениеПолучатель = ПараметрыСостоянияПриемника.СтруктурноеПодразделение;
			Иначе
				ЗаписьСведенияОКорректировкиСтоимостиПродукцииИТоваров = СписокКорректировок[0];
			КонецЕсли;
			
			Если СтруктураПараметров.Учет = "НУ" Тогда
				
				Если СтруктураПараметров.ЗаписьСведенияОКорректировкиСтоимостиПродукцииИТоваров.Колонки.Найти("ВидУчета") = Неопределено Тогда
					СтруктураПараметров.ЗаписьСведенияОКорректировкиСтоимостиПродукцииИТоваров.Колонки.Добавить("ВидУчета");
				КонецЕсли;
				ЗаписьСведенияОКорректировкиСтоимостиПродукцииИТоваров.ВидУчета = ПараметрыСостоянияПриемника.ВидУчета;
				
				ЗаписьСведенияОКорректировкиСтоимостиПродукцииИТоваров.СуммаКорректировкиВНУ = ЗаписьСведенияОКорректировкиСтоимостиПродукцииИТоваров.СуммаКорректировкиВНУ + СуммаКорректировки;
				
			Иначе
				// по данным БУ
				ЗаписьСведенияОКорректировкиСтоимостиПродукцииИТоваров.Количество 			 = ОперацияПеремещения.Количество;
				ЗаписьСведенияОКорректировкиСтоимостиПродукцииИТоваров.Себестоимость		 = СуммаСебестоимости*КоэффициентКорректировки;
				ЗаписьСведенияОКорректировкиСтоимостиПродукцииИТоваров.СуммаКорректировки 	 = ЗаписьСведенияОКорректировкиСтоимостиПродукцииИТоваров.СуммаКорректировки + СуммаКорректировкиПеремещения;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Если СтруктураПараметров.Учет <> "НУ" Тогда 		
		Остаток = СуммаКорректировки - ОбщаяСуммаКорректировки;
		Если Остаток <> 0 Тогда
			ОбщаяСуммаКорректировки = СуммаКорректировки;			
			Если СтруктураПараметров.Свойство("ЗаписьСведенияОКорректировкиСтоимостиПродукцииИТоваров")
				И НЕ ЗаписьСведенияОКорректировкиСтоимостиПродукцииИТоваров = Неопределено Тогда 				
				ЗаписьСведенияОКорректировкиСтоимостиПродукцииИТоваров.СуммаКорректировки = ЗаписьСведенияОКорректировкиСтоимостиПродукцииИТоваров.СуммаКорректировки + Остаток;				
			КонецЕсли; 
		КонецЕсли;
	Иначе
		ОстатокНУ = ОбщаяСтоимостьКорректировкиБУ - ОбщаяСуммаКорректировки; 			
		Если ОстатокНУ >-0.5 И ОстатокНУ < 0.5 Тогда
			ОбщаяСуммаКорректировки = ОбщаяСуммаКорректировки + ОстатокНУ;
			Если СтруктураПараметров.Свойство("ЗаписьСведенияОКорректировкиСтоимостиПродукцииИТоваров")
				И НЕ ЗаписьСведенияОКорректировкиСтоимостиПродукцииИТоваров = Неопределено Тогда 							
				ЗаписьСведенияОКорректировкиСтоимостиПродукцииИТоваров.СуммаКорректировкиВНУ = ЗаписьСведенияОКорректировкиСтоимостиПродукцииИТоваров.СуммаКорректировки + ОстатокНУ;
			КонецЕсли;
		КонецЕсли;			
	КонецЕсли;

	Если ОбщаяСуммаКорректировки <> 0 Тогда
		
		Проводка = НаборЗаписей.Добавить();
		
		Проводка.Период        = СтруктураПараметров.Период;
		Проводка.Регистратор   = СтруктураПараметров.Регистратор;
		Проводка.Активность    = Истина;
		Проводка.Организация   = СтруктураПараметров.Организация;
		Проводка.Содержание    = НСтр("ru = 'Корректировка стоимости перемещения'", ОбщегоНазначения.КодОсновногоЯзыка());
		Проводка.ВидРегламентнойОперации = Перечисления.ВидыРегламентныхОпераций.РасчетСтоимостиПродукцииБУ;
		
		Проводка.СчетКт = ПараметрыСостоянияИсточника.Счет;
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, ПараметрыСостоянияИсточника.Субконто1);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, ПараметрыСостоянияИсточника.Субконто2);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, ПараметрыСостоянияИсточника.Субконто3);
		
		Проводка.СчетДт = ПараметрыСостоянияПриемника.Счет;
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, ПараметрыСостоянияПриемника.Субконто1);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, ПараметрыСостоянияПриемника.Субконто2);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, ПараметрыСостоянияПриемника.Субконто3);
		
		Проводка.Сумма = ОбщаяСуммаКорректировки;
		
		ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(Проводка, 
			ПараметрыСостоянияПриемника.СтруктурноеПодразделение, ПараметрыСостоянияИсточника.СтруктурноеПодразделение);
		
		Если СтруктураПараметров.Учет = "НУ" Тогда
			Проводка.ВидУчетаДт = ПараметрыСостоянияПриемника.ВидУчета;
			Проводка.ВидУчетаКт = ПараметрыСостоянияПриемника.ВидУчета;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Здесь формируются все записи по внешнему списанию 
//
Процедура ДобавитьЗаписиПоВнешнемуСписанию(ПараметрыСостоянияИсточника, ЗНАЧ ОбщееКоличество, ЗНАЧ ОбщаяСтоимостьГП, СтруктураПараметров, Движения, Отказ)
	
	НаборЗаписейРБ   = Движения[?(СтруктураПараметров.Учет = "НУ", "Налоговый", "Типовой")];
	РеализацияТМЗ    = Движения["РеализацияТМЗ"];
	
	ОперацийСписания = СтруктураПараметров.ТаблицаОперацийСписания.НайтиСтроки(ПараметрыСостоянияИсточника);
	
	// сохраним в структуре параметров на время работы алгоритма, чтобы не получать список счетов в цикле
	СписокСчетовВзаиморасчетов = Неопределено;
	Если НЕ СтруктураПараметров.Свойство("СписокСчетовВзаиморасчетов", СписокСчетовВзаиморасчетов) Тогда 
		СписокСчетовВзаиморасчетов = УправлениеВзаиморасчетамиСервер.ПолучитьСписокСчетовВзаиморасчетов();
		СтруктураПараметров.Вставить("СписокСчетовВзаиморасчетов", СписокСчетовВзаиморасчетов);
	КонецЕсли;
	
	// сохраним в структуре параметров на время работы алгоритма, чтобы не полчать каждый раз в цикле значение константы
	ВалютаРегламентированногоУчета = Неопределено;
	Если НЕ СтруктураПараметров.Свойство("ВалютаРегламентированногоУчета", ВалютаРегламентированногоУчета) Тогда 
		ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
		СтруктураПараметров.Вставить("ВалютаРегламентированногоУчета", ВалютаРегламентированногоУчета);
	КонецЕсли;
	
	ОбщееКоличествоПроверки = ОбщееКоличество;
	
	ОбщаяСтоимость = ОбщаяСтоимостьГП.Стоимость; // Стоимость к распределению
	
	Для каждого ОперацияСписания Из ОперацийСписания Цикл
		
		//необходимо скорректировать стоимость списания реализованных товаров по регистру "Реализация ТМЗ"
		СтруктураПоиска = Новый Структура("СтруктурноеПодразделение,Счет, Возврат,Субконто1,Субконто2,Субконто3,КорСчет,КорСубконто1, КорСубконто2, КорСубконто3",
								ОперацияСписания.СтруктурноеПодразделение, ОперацияСписания.Счет,ОперацияСписания.Возврат,ОперацияСписания.Субконто1,ОперацияСписания.Субконто2,ОперацияСписания.Субконто3,
								ОперацияСписания.КорСчет,ОперацияСписания.КорСубконто1,ОперацияСписания.КорСубконто2,ОперацияСписания.КорСубконто3);
								
		Если СтруктураПараметров.Учет = "НУ" Тогда
			СтруктураПоиска.Вставить("ВидУчета", ОперацияСписания.ВидУчета);
		КонецЕсли;
		
		ОперацийРеализации = СтруктураПараметров.ТаблицаОперацийРеализации.НайтиСтроки(СтруктураПоиска);
		
		Если ОбщееКоличество = 0 Тогда
			Если ОперацияСписания.Возврат И НЕ ОбщееКоличествоПроверки = 0 Тогда
				ОбщееКоличество = ОбщееКоличествоПроверки;
				ОбщаяСтоимость = ОбщаяСтоимостьГП.Стоимость;
			Иначе 
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Если СтруктураПараметров.Учет = "БУ" Тогда
			// По бух. учету проводим корректировку сводно по корреспонденции направления списания
			КоличествоОстаток = ОбщееКоличество;
			ДолжноБытьСписано = Окр(ОбщаяСтоимость/ОбщееКоличество * ОперацияСписания.Количество, 2);
			
			Если ОперацияСписания.Возврат Тогда
				
				Если СтруктураПараметров.ЗаписьВозвратыПоПроизводству.Количество() > 0 Тогда 
					
					//необходимо скорректировать стоимость списания реализованных товаров по регистру "Реализация ТМЗ"
					СтруктураПоискаВозврата = Новый Структура("СчетДт, СубконтоДт1,СубконтоДт2,СубконтоДт3,СчетКт,СубконтоКт1, СубконтоКт2",
													ОперацияСписания.Счет, ОперацияСписания.Субконто1,ОперацияСписания.Субконто2,ОперацияСписания.Субконто3,
													ОперацияСписания.КорСчет,ОперацияСписания.КорСубконто1,ОперацияСписания.КорСубконто2);
					
					СтруктураПоискаВозврата.Вставить("СубконтоКт3", ?(ОперацияСписания.КорСубконто3 = NULL, Неопределено, ОперацияСписания.КорСубконто3));
					ОперацияВозврата = СтруктураПараметров.ЗаписьВозвратыПоПроизводству.НайтиСтроки(СтруктураПоискаВозврата);
					
					УчтеноВозврата = 0;
					
					Для каждого СтрокаМассива Из ОперацияВозврата Цикл
						
						УчтеноВозврата = СтрокаМассива.Сумма + УчтеноВозврата;
						
					КонецЦикла;
					
					Если ОперацияВозврата.Количество() <> 0 Тогда
						СуммаКорректировки = ДолжноБытьСписано - (УчтеноВозврата + ОперацияСписания.Сумма);
					Иначе
						СуммаКорректировки = ДолжноБытьСписано - ОперацияСписания.Сумма;
					КонецЕсли;
					
				Иначе
					
					СуммаКорректировки = ДолжноБытьСписано - ОперацияСписания.Сумма;
					
				КонецЕсли;
				
			Иначе
				СуммаКорректировки = ДолжноБытьСписано - ОперацияСписания.Сумма;
			КонецЕсли;
			
			// Уменьшим общую стоимость и количество.
			ОбщаяСтоимость  = ОбщаяСтоимость  - ДолжноБытьСписано;
			ОбщееКоличество = ОбщееКоличество - ОперацияСписания.Количество;
		КонецЕсли;
		
		// Для расчета по средней и для корректировки списания МПЗ на косвенные расходы третью корректировку делать не надо
		Если Лев(СтруктураПараметров.РасчетПрямыхЗатратНомер, 1) = "3" Тогда
			Если СтруктураПараметров.РасчетПрямыхЗатратНомер <> "3По средней" Тогда
				ВстречныйВыпуск = СтруктураПараметров.ТаблицаВстречногоВыпуска.НайтиСтроки(Новый Структура("Подразделение, НоменклатурнаяГруппа, Продукция, СубконтоКт2, СубконтоКт3", ОперацияСписания.КорСубконто1, ОперацияСписания.КорСубконто2, ПараметрыСостоянияИсточника.Субконто1, ПараметрыСостоянияИсточника.Субконто2, ПараметрыСостоянияИсточника.Субконто3));
				Если ВстречныйВыпуск.Количество() > 0 Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			Если Лев(ОперацияСписания.КорСчет.Код, 1) = "2" Тогда
				ВстречныйВыпуск = СтруктураПараметров.ТаблицаВстречногоВыпуска.НайтиСтроки(Новый Структура("ПодразделениеПересчета, Продукция", ОперацияСписания.КорСубконто1, ПараметрыСостоянияИсточника.Субконто1));
				Если ВстречныйВыпуск.Количество() > 0 Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если СтруктураПараметров.Учет = "БУ" И СуммаКорректировки <> 0 Тогда
			
			// Если это Документ возврата товаров поставщику, 
			// то разницу в стоимости отнесем напрямую на счет списания разницы себестоимости
			Если НЕ ОперацияСписания.ВозвратПоставщику Тогда 
				
				// Если счет валютный то необходимо поставить валютную сумму
				СчетНайденВСписке = СписокСчетовВзаиморасчетов.Найти(ОперацияСписания.КорСчет, "Ссылка");
				Если СчетНайденВСписке <> Неопределено Тогда
					
					Если ТипЗнч(ОперацияСписания.КорСубконто2) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
						
						Если ОперацияСписания.КорСубконто2.ВалютаВзаиморасчетов = ВалютаРегламентированногоУчета Тогда
							
							Если ОперацияСписания.Возврат Тогда
								Проводка = СтруктураПараметров.ЗаписьВозвратыПоПроизводству.Добавить();
							Иначе
								Проводка = НаборЗаписейРБ.Добавить();
							КонецЕсли;
							
							Проводка.ВалютаДт 		 = ВалютаРегламентированногоУчета;
							Проводка.ВалютнаяСуммаДт = СуммаКорректировки;
						Иначе
							ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru = 'Корректировка по счету ""%1"" на сумму %2 не будет произведена, т.к. в договоре ""%3"" установлена валюта, отличная от валюты регламентированного учета'", ОбщегоНазначения.КодОсновногоЯзыка()),
								ОперацияСписания.КорСчет,
								СуммаКорректировки,
								ОперацияСписания.КорСубконто2);
							ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации(ТекстСообщения,,, СтруктураПараметров.Регистратор, Перечисления.ВидыРегламентныхОпераций.РасчетСтоимостиПродукцииБУ);	
							Продолжить;
						КонецЕсли;
						
					Иначе
						Если ОперацияСписания.Возврат Тогда
							Проводка = СтруктураПараметров.ЗаписьВозвратыПоПроизводству.Добавить();
						Иначе
							Проводка = НаборЗаписейРБ.Добавить();
						КонецЕсли;
					КонецЕсли;
				Иначе
					Если ОперацияСписания.Возврат Тогда
						Проводка = СтруктураПараметров.ЗаписьВозвратыПоПроизводству.Добавить();
					Иначе
						Проводка = НаборЗаписейРБ.Добавить();
					КонецЕсли;
				КонецЕсли;
				
				Проводка.Период        = СтруктураПараметров.Период;
				Проводка.Регистратор   = СтруктураПараметров.Регистратор;
				Проводка.Активность    = Истина;
				Проводка.Организация   = СтруктураПараметров.Организация;
				Проводка.Содержание    = НСтр("ru = 'Корректировка стоимости списания'", ОбщегоНазначения.КодОсновногоЯзыка());
				Проводка.ВидРегламентнойОперации = ?(НЕ СтруктураПараметров.Учет = "НУ", Перечисления.ВидыРегламентныхОпераций.РасчетСтоимостиПродукцииБУ, Перечисления.ВидыРегламентныхОпераций.РасчетСтоимостиПродукцииНУ);
				
				Если ОперацияСписания.Возврат Тогда
					Проводка.СчетКт = ОперацияСписания.КорСчет;
					Проводка.СубконтоКт1 = ОперацияСписания.КорСубконто1;
					Проводка.СубконтоКт2 = ОперацияСписания.КорСубконто2;
					Проводка.СубконтоКт3 = ОперацияСписания.КорСубконто3;
					
					Проводка.СчетДт = ПараметрыСостоянияИсточника.Счет;
					Проводка.СубконтоДт1 = ПараметрыСостоянияИсточника.Субконто1;
					Проводка.СубконтоДт2 = ПараметрыСостоянияИсточника.Субконто2;
					Проводка.СубконтоДт3 = ПараметрыСостоянияИсточника.Субконто3;
				Иначе
					Проводка.СчетКт = ПараметрыСостоянияИсточника.Счет;
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, ПараметрыСостоянияИсточника.Субконто1);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, ПараметрыСостоянияИсточника.Субконто2);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, ПараметрыСостоянияИсточника.Субконто3);
					
					Проводка.СчетДт = ОперацияСписания.КорСчет;
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, ОперацияСписания.КорСубконто1);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, ОперацияСписания.КорСубконто2);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, ОперацияСписания.КорСубконто3);
				КонецЕсли;
				
				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(Проводка, 
				ПараметрыСостоянияИсточника.СтруктурноеПодразделение, ПараметрыСостоянияИсточника.СтруктурноеПодразделение);
				
				Проводка.Сумма = СуммаКорректировки;
			КонецЕсли;
			
			//Если это Документ возврата товаров поставщику, нужно проверить использовался ли в проводках счет возврата
			//или напрямую шли взаиморасчеты
			Если ОперацияСписания.ВозвратПоставщику Тогда
				
				Если ОперацийРеализации.Количество() > 0 Тогда 
					
					// Чтобы учесть оба варианта проведения Возврата поставщику (со счетом возврата и без),
					// отбор необходимо накладывать на всю корреспонденцию и рассматривать дебетовую сторону взаиморасчетов
					// (к примеру, 1281 если указан счет возвратов и 3310 если не указан).
					СтруктураПоискаДляВзаиморасчетов = Новый Структура("Регистратор, СчетДт, СубконтоДт1, СубконтоДт2, СубконтоДт3, СчетКт, СубконтоКт1, СубконтоКт2, СубконтоКт3",
																		ОперацийРеализации[0].Регистратор, ОперацияСписания.КорСчет, 
																		ОперацияСписания.КорСубконто1,  ОперацияСписания.КорСубконто2, ?(ОперацияСписания.КорСубконто3 = Неопределено, NULL, ОперацияСписания.КорСубконто3),
																		ОперацияСписания.Счет, ?(ОперацияСписания.Субконто1 = Неопределено, NULL, ОперацияСписания.Субконто1),
																		?(ОперацияСписания.Субконто2 = Неопределено, NULL, ОперацияСписания.Субконто2),
																		?(ОперацияСписания.Субконто3 = Неопределено, NULL, ОперацияСписания.Субконто3));

					ОперацииВозврата = СтруктураПараметров.ТаблицаВозвратовПоставщику.НайтиСтроки(СтруктураПоискаДляВзаиморасчетов);
					
					Для Каждого СтрокаВозврата Из ОперацииВозврата Цикл
						
						Если ЗначениеЗаполнено(СтрокаВозврата.СчетОтнесенияСебестоимостиБУ) Тогда
							//движение по зачету Дт СчетСписанияРазницыСебестоимости - Кт СчетУчетаТМЗ
							Проводка = НаборЗаписейРБ.Добавить();																
							
							Проводка.Период        = СтруктураПараметров.Период;
							Проводка.Регистратор   = СтруктураПараметров.Регистратор;
							Проводка.Активность    = Истина;
							Проводка.Организация   = СтруктураПараметров.Организация;
							Проводка.Содержание    = НСтр("ru = 'Корректировка стоимости списания'", ОбщегоНазначения.КодОсновногоЯзыка());
							Проводка.ВидРегламентнойОперации = ?(НЕ СтруктураПараметров.Учет = "НУ", Перечисления.ВидыРегламентныхОпераций.РасчетСтоимостиПродукцииБУ, Перечисления.ВидыРегламентныхОпераций.РасчетСтоимостиПродукцииНУ);
							
							Проводка.СчетДт = СтрокаВозврата.СчетОтнесенияСебестоимостиБУ;
							Для Индекс = 1 По 3 Цикл
								Если ТипЗнч(СтрокаВозврата["СубконтоОтнесенияСебестоимостиБУ" + Индекс]) = Тип("СправочникСсылка.НоменклатурныеГруппы") Тогда
									ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, Индекс, СтрокаВозврата.НоменклатурнаяГруппа);
								Иначе 
									ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, Индекс, СтрокаВозврата["СубконтоОтнесенияСебестоимостиБУ" + Индекс]);
								КонецЕсли;
							КонецЦикла;
							
							Проводка.СчетКт = ПараметрыСостоянияИсточника.Счет;
							ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, ПараметрыСостоянияИсточника.Субконто1);
							ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, ПараметрыСостоянияИсточника.Субконто2);
							ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, ПараметрыСостоянияИсточника.Субконто3);
							
							ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(Проводка, 
							ПараметрыСостоянияИсточника.СтруктурноеПодразделение, ПараметрыСостоянияИсточника.СтруктурноеПодразделение);
							
							Проводка.Сумма = СуммаКорректировки;
							
							Если Проводка.СчетКт.Валютный Тогда
								Проводка.ВалютаКт 		 = ВалютаРегламентированногоУчета;
								Проводка.ВалютнаяСуммаКт = СуммаКорректировки;
							Конецесли;
							
							Если Проводка.СчетДт.Валютный Тогда
								Проводка.ВалютаДт 		 = ВалютаРегламентированногоУчета;
								Проводка.ВалютнаяСуммаДт = СуммаКорректировки;
							Конецесли; 
							
						КонецЕсли;
					КонецЦикла;										
					
				КонецЕсли;                      				
			КонецЕсли;                          			
			
		КонецЕсли;
		
		КоличествоСписания = ОперацияСписания.Количество;
		
		ОбщаяСуммаПриРаспределении = 0;
		Для каждого ОперацияРеализации Из ОперацийРеализации Цикл
			Если СтруктураПараметров.Учет = "НУ" Тогда
				// необходимо учесть возможное наличие ВР сумм
				// необходимо скорректировать стоимость списания реализованных товаров по регистру "Реализация ТМЗ"
				СтруктураПоискаВР = Новый Структура("Счет,Субконто1,Субконто2,Субконто3,КорСчет,КорСубконто1, КорСубконто2, КорСубконто3, ВидУчета, Регистратор",
													ОперацияРеализации.Счет,ОперацияРеализации.Субконто1,ОперацияРеализации.Субконто2,ОперацияРеализации.Субконто3,
													ОперацияРеализации.КорСчет,ОперацияРеализации.КорСубконто1,ОперацияРеализации.КорСубконто2,ОперацияРеализации.КорСубконто3,
													Справочники.ВидыУчетаНУ.ВР, ОперацияРеализации.Регистратор);
													
				ОперацийРеализацииВР = СтруктураПараметров.ТаблицаОперацийРеализации.НайтиСтроки(СтруктураПоискаВР);
				СуммаВР = 0;
				Для Каждого ОперацияРеализацииВР Из ОперацийРеализацииВР Цикл
					СуммаВР = СуммаВР + ОперацияРеализацииВР.Сумма;
				КонецЦикла;
				
				СтруктураПоиска = Новый Структура;
				
				Если ТипЗнч(ПараметрыСостоянияИсточника.Субконто1)  = Тип("СправочникСсылка.Номенклатура") Тогда
					СтруктураПоиска.Вставить("Номенклатура",ПараметрыСостоянияИсточника.Субконто1);
				ИначеЕсли ТипЗнч(ПараметрыСостоянияИсточника.Субконто2)  = Тип("СправочникСсылка.Номенклатура") Тогда
					СтруктураПоиска.Вставить("Номенклатура",ПараметрыСостоянияИсточника.Субконто2);
				ИначеЕсли ТипЗнч(ПараметрыСостоянияИсточника.Субконто3)  = Тип("СправочникСсылка.Номенклатура") Тогда
					СтруктураПоиска.Вставить("Номенклатура",ПараметрыСостоянияИсточника.Субконто3);    
				КонецЕсли;
				
				СтруктураПоиска.Вставить("СтруктурноеПодразделение",ПараметрыСостоянияИсточника.СтруктурноеПодразделение);
				
				Если ТипЗнч(ОперацияСписания.КорСубконто1) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
					СтруктураПоиска.Вставить("ПодразделениеВыпуска", ОперацияСписания.КорСубконто1);
				ИначеЕсли ТипЗнч(ОперацияСписания.КорСубконто2) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
					СтруктураПоиска.Вставить("ПодразделениеВыпуска", ОперацияСписания.КорСубконто2);
				ИначеЕсли ТипЗнч(ОперацияСписания.КорСубконто3) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
					СтруктураПоиска.Вставить("ПодразделениеВыпуска", ОперацияСписания.КорСубконто3);
				КонецЕсли;
				
				Если ТипЗнч(ОперацияСписания.КорСубконто1) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда						
					СтруктураПоиска.Вставить("СтатьяЗатрат", ОперацияСписания.КорСубконто1);  																		
				ИначеЕсли ТипЗнч(ОперацияСписания.КорСубконто2) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда						
					СтруктураПоиска.Вставить("СтатьяЗатрат", ОперацияСписания.КорСубконто2);  
				ИначеЕсли ТипЗнч(ОперацияСписания.КорСубконто3) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда						
					СтруктураПоиска.Вставить("СтатьяЗатрат", ОперацияСписания.КорСубконто3);  						
				КонецЕсли; 
								
				// Для давальческого сырья поиск выполняем с учетом НГ
				Если ТипЗнч(ОперацияСписания.КорСубконто1) = Тип("СправочникСсылка.НоменклатурныеГруппы") Тогда
					СтруктураПоиска.Вставить("НоменклатурнаяГруппаВыпуска", ОперацияСписания.КорСубконто1);
				ИначеЕсли ТипЗнч(ОперацияСписания.КорСубконто2) = Тип("СправочникСсылка.НоменклатурныеГруппы") Тогда
					СтруктураПоиска.Вставить("НоменклатурнаяГруппаВыпуска", ОперацияСписания.КорСубконто2);
				ИначеЕсли ТипЗнч(ОперацияСписания.КорСубконто3) = Тип("СправочникСсылка.НоменклатурныеГруппы") Тогда
					СтруктураПоиска.Вставить("НоменклатурнаяГруппаВыпуска", ОперацияСписания.КорСубконто3);
				КонецЕсли;
				
				СуммаКорректировки	 = 0;
				СебестоимостьБУ 	 = 0; КоличествоБУ    = 0;
				СуммаКорректировкиБУ = 0; РанееСписаноВБУ = 0;
				УжеСписаноВНУ		 = 0;
				
				// Регистратор
				СтруктураПоиска.Вставить("КорректируемыйДокумент", ОперацияРеализации.Регистратор);
				
				СписокНоменклатуры = СтруктураПараметров.ТаблицаРасчетаСебестоимости.НайтиСтроки(СтруктураПоиска);
				Если СписокНоменклатуры.Количество() <> 0 Тогда
					// получаем данные из БУ о сумме списания и корректировке документа
					Для Каждого КорректируемаяПартия Из СписокНоменклатуры Цикл
						СебестоимостьБУ 		= СебестоимостьБУ 		 + КорректируемаяПартия.Себестоимость;
						КоличествоБУ    		= КоличествоБУ 			 + КорректируемаяПартия.Количество;
						СуммаКорректировкиБУ 	= СуммаКорректировкиБУ	 + КорректируемаяПартия.СуммаКорректировки;
						УжеСписаноВНУ			= УжеСписаноВНУ			 + КорректируемаяПартия.СуммаКорректировкиВНУ;
						
						КорСубконтоСписанияБУ1 = КорректируемаяПартия.ПодразделениеВыпуска;
						КорСубконтоСписанияБУ2 = КорректируемаяПартия.НоменклатурнаяГруппаВыпуска;
						КорСубконтоСписанияБУ3 = КорректируемаяПартия.СтатьяЗатрат;
						КорСчетСписанияБУ      = КорректируемаяПартия.СчетЗатратБУ;	
					КонецЦикла;
					РанееСписаноВБУ		    = СебестоимостьБУ - СуммаКорректировкиБУ;
					
					КоличествоСписанияВНУ 	= ОперацияСписания.Количество;
					СуммаСписанияВНУ 		= ОперацияСписания.Сумма + СуммаВР;
					
					//  БУ > НУ например в случаях, когда в НУ направления списания отличаются от БУ
					//  НУ м/б больше БУ в случаях, когда на счетах БУ ведется партионный учет и списание в течение месяца происходило по партиям, произведенным в прошлых периодах.
					//  в БУ в этом случае корректировка затрагивает только производственные партии текущего периода. В НУ из-за отсутствия партионного учета мы располагаем только общей суммой списания.
					Если КоличествоБУ < КоличествоСписанияВНУ Тогда
						КоличествоСписанияВНУ = КоличествоБУ;
						СуммаСписанияВНУ 	  = РанееСписаноВБУ;
					КонецЕсли;
					
					Если КоличествоБУ > ОперацияСписания.Количество Тогда
						КоэффициентКорректировки = ОперацияСписания.Количество/КоличествоБУ;
					Иначе
						КоэффициентКорректировки = 1;
					КонецЕсли;
					
					ДолжноБытьСписаноНУ    = ?(КоличествоСписанияВНУ = КоличествоБУ, СебестоимостьБУ , Окр(СебестоимостьБУ/КоличествоБУ * КоличествоСписанияВНУ, 2));
					
					СуммаКорректировки     = ДолжноБытьСписаноНУ - СуммаСписанияВНУ;
					
					Если СуммаКорректировки <-0.1 или СуммаКорректировки > 0.1 Тогда
						// с учетом предыдущих транзакций. Так как в первой итерации корректировка уже могла быть произведена по итоговым данным БУ
						СуммаКорректировки = СуммаКорректировки - УжеСписаноВНУ;
					КонецЕсли;
					
					// Уменьшим общую стоимость и количество.
					ОбщаяСтоимость  = ОбщаяСтоимость  - ДолжноБытьСписаноНУ;
					ОбщееКоличество = ОбщееКоличество - КоличествоСписанияВНУ;
					
					
					Если СуммаКорректировки <> 0 Тогда
						СписокНоменклатуры[0].СуммаКорректировкиВНУ = СписокНоменклатуры[0].СуммаКорректировкиВНУ + СуммаКорректировки;
					КонецЕсли;
					
					// Формирование проводок в НУ
					Если СуммаКорректировки <> 0 Тогда
						Если НЕ ОперацияСписания.ВозвратПоставщику Тогда 
							Проводка = НаборЗаписейРБ.Добавить();
							Проводка.Период        = СтруктураПараметров.Период;
							Проводка.Активность    = Истина;
							Проводка.Организация   = СтруктураПараметров.Организация;
							Проводка.Содержание    = НСтр("ru = 'Корректировка стоимости списания'", ОбщегоНазначения.КодОсновногоЯзыка());
							Проводка.ВидРегламентнойОперации = ?(НЕ СтруктураПараметров.Учет = "НУ", Перечисления.ВидыРегламентныхОпераций.РасчетСтоимостиПродукцииБУ, Перечисления.ВидыРегламентныхОпераций.РасчетСтоимостиПродукцииНУ);
							
							Если ОперацияСписания.Возврат Тогда
								
								Проводка.СчетКт = ОперацияСписания.КорСчет;
								ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, ОперацияСписания.КорСубконто1);
								ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, ОперацияСписания.КорСубконто2);
								ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, ОперацияСписания.КорСубконто3);
								
								Проводка.СчетДт = ПараметрыСостоянияИсточника.Счет;
								ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, ПараметрыСостоянияИсточника.Субконто1);
								ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, ПараметрыСостоянияИсточника.Субконто2);
								ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, ПараметрыСостоянияИсточника.Субконто3);
								
							Иначе 
								
								Проводка.СчетКт = ПараметрыСостоянияИсточника.Счет;
								ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, ПараметрыСостоянияИсточника.Субконто1);
								ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, ПараметрыСостоянияИсточника.Субконто2);
								ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, ПараметрыСостоянияИсточника.Субконто3);
								
								Проводка.СчетДт = ОперацияСписания.КорСчет;
								ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, ОперацияСписания.КорСубконто1);
								ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, ОперацияСписания.КорСубконто2);
								ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, ОперацияСписания.КорСубконто3);
								
							КонецЕсли;
							
							ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(Проводка,
								ПараметрыСостоянияИсточника.СтруктурноеПодразделение, ПараметрыСостоянияИсточника.СтруктурноеПодразделение);
							
							Проводка.Сумма = СуммаКорректировки;
							
							КоличествоСписания = ОперацияСписания.Количество;
							
							Если ОперацияСписания.Возврат Тогда
								ПроцедурыНалоговогоУчета.ВидУчетаНУ(Проводка, ОперацияСписания.ВидУчета, Ложь);
							Иначе
								ПроцедурыНалоговогоУчета.ВидУчетаНУ(Проводка, ОперацияСписания.ВидУчета);
							КонецЕсли;							
								
							ПроцедурыНалоговогоУчета.ОтразитьРасходыНаРемонтПроизводственныхОС(НаборЗаписейРБ,
										Новый Структура("СчетБУ, СубконтоБУ1, СубконтоБУ2,СубконтоБУ3",
										КорСчетСписанияБУ, КорСубконтоСписанияБУ1, КорСубконтоСписанияБУ2, КорСубконтоСписанияБУ3),
										Новый Структура("СчетНУ, СубконтоНУ1, СубконтоНУ2,СубконтоНУ3",
										ОперацияСписания.КорСчет, ОперацияСписания.КорСубконто1, ОперацияСписания.КорСубконто2, ОперацияСписания.КорСубконто3),
										СтруктураПараметров, ПараметрыСостоянияИсточника.СтруктурноеПодразделение, ПараметрыСостоянияИсточника.СтруктурноеПодразделение,СуммаКорректировки, КоличествоСписания, Ложь, Неопределено);
							
						Иначе 
							
							//Если это Документ возврата товаров поставщику, нужно проверить использовался ли в проводках счет возврата
							//или напрямую шли взаиморасчеты
							СтруктураПоискаДляВзаиморасчетов = Новый Структура("Регистратор, СчетДт, СубконтоДт1, СубконтоДт2, СубконтоДт3, СчетКт, СубконтоКт1, СубконтоКт2, СубконтоКт3",
																				ОперацияРеализации.Регистратор, ОперацияСписания.КорСчет, 
																				ОперацияСписания.КорСубконто1,  ОперацияСписания.КорСубконто2, ?(ОперацияСписания.КорСубконто3 = Неопределено, NULL, ОперацияСписания.КорСубконто3),
																				ОперацияСписания.Счет, ?(ОперацияСписания.Субконто1 = Неопределено, NULL, ОперацияСписания.Субконто1),
																				?(ОперацияСписания.Субконто2 = Неопределено, NULL, ОперацияСписания.Субконто2),
																				?(ОперацияСписания.Субконто3 = Неопределено, NULL, ОперацияСписания.Субконто3));
							
							ОперацииВозврата = СтруктураПараметров.ТаблицаВозвратовПоставщику.НайтиСтроки(СтруктураПоискаДляВзаиморасчетов);
							
							Для Каждого СтрокаВозврата Из ОперацииВозврата Цикл
								
								Если ЗначениеЗаполнено(СтрокаВозврата.СчетОтнесенияСебестоимостиНУ) Тогда
									//движение по зачету Дт СчетСписанияРазницыСебестоимости - Кт СчетУчетаТМЗ
									Если СтрокаВозврата.СчетДт = ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьСчетРасчетовСКонтрагентомНУ(СтрокаВозврата.СчетУчетаРасчетовСКонтрагентом) Тогда
										Проводка = НаборЗаписейРБ.Добавить();																
										
										Проводка.Период        = СтруктураПараметров.Период;
										Проводка.Регистратор   = СтруктураПараметров.Регистратор;
										Проводка.Активность    = Истина;
										Проводка.Организация   = СтруктураПараметров.Организация;
										Проводка.Содержание    = НСтр("ru = 'Корректировка стоимости списания'", ОбщегоНазначения.КодОсновногоЯзыка());
										Проводка.ВидРегламентнойОперации = ?(НЕ СтруктураПараметров.Учет = "НУ", Перечисления.ВидыРегламентныхОпераций.РасчетСтоимостиПродукцииБУ, Перечисления.ВидыРегламентныхОпераций.РасчетСтоимостиПродукцииНУ);
										
										Проводка.СчетДт = СтрокаВозврата.СчетОтнесенияСебестоимостиНУ;
										Для Индекс = 1 По 3 Цикл
											Если ТипЗнч(СтрокаВозврата["СубконтоОтнесенияСебестоимостиНУ" + Индекс]) = Тип("СправочникСсылка.НоменклатурныеГруппы") Тогда
												ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, Индекс, СтрокаВозврата.НоменклатурнаяГруппа);
											Иначе 
												ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, Индекс, СтрокаВозврата["СубконтоОтнесенияСебестоимостиНУ" + Индекс]);
											КонецЕсли;
										КонецЦикла;
										
										Проводка.СчетКт = ПараметрыСостоянияИсточника.Счет;
										ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, ПараметрыСостоянияИсточника.Субконто1);
										ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, ПараметрыСостоянияИсточника.Субконто2);
										ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, ПараметрыСостоянияИсточника.Субконто3);
										
										ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(Проводка, 
											ПараметрыСостоянияИсточника.СтруктурноеПодразделение, ПараметрыСостоянияИсточника.СтруктурноеПодразделение);
										
										Проводка.Сумма = СуммаКорректировки;
										
										КоличествоСписания = ОперацияСписания.Количество;
										
										ПроцедурыНалоговогоУчета.ВидУчетаНУ(Проводка, ОперацияСписания.ВидУчета);
									КонецЕсли; 					
									
								КонецЕсли;
							КонецЦикла;										
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если КоличествоСписания = 0 Тогда
				Прервать;
			КонецЕсли;
			
			Если ОперацияРеализации.Количество = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Если КоличествоСписания>ОперацияРеализации.Количество Тогда
				КоэффициентКорректировки = ОперацияРеализации.Количество/КоличествоСписания;
			Иначе
				КоэффициентКорректировки = 1;
			КонецЕсли;
			
			Если НЕ ТипЗнч(ОперацияРеализации.Регистратор) = Тип("ДокументСсылка.ЗакрытиеМесяца") И СтруктураПараметров.Свойство("ЗаписьСведенияОКорректировкиСтоимостиПродукцииИТоваров") Тогда
				// суммы корректировок - складываются.
				// сведения о количестве и себестоимости в БУ - переписываются
				СтруктураПоиска = Новый Структура("КорректируемыйДокумент", ОперацияРеализации.Регистратор);
					
				Если ТипЗнч(ПараметрыСостоянияИсточника.Субконто1) = Тип("СправочникСсылка.Номенклатура") Тогда
					СтруктураПоиска.Вставить("Номенклатура", ПараметрыСостоянияИсточника.Субконто1);
				ИначеЕсли ТипЗнч(ПараметрыСостоянияИсточника.Субконто2) = Тип("СправочникСсылка.Номенклатура") Тогда
					СтруктураПоиска.Вставить("Номенклатура", ПараметрыСостоянияИсточника.Субконто2);
				ИначеЕсли ТипЗнч(ПараметрыСостоянияИсточника.Субконто3) = Тип("СправочникСсылка.Номенклатура") Тогда
					СтруктураПоиска.Вставить("Номенклатура", ПараметрыСостоянияИсточника.Субконто3);
				КонецЕсли;
				
				Если ТипЗнч(ОперацияРеализации.КорСубконто1) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
					СтруктураПоиска.Вставить("ПодразделениеВыпуска", ОперацияРеализации.КорСубконто1);
				ИначеЕсли ТипЗнч(ОперацияРеализации.КорСубконто2) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
					СтруктураПоиска.Вставить("ПодразделениеВыпуска", ОперацияРеализации.КорСубконто2);
				ИначеЕсли ТипЗнч(ОперацияРеализации.КорСубконто3) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
					СтруктураПоиска.Вставить("ПодразделениеВыпуска", ОперацияРеализации.КорСубконто3);
				КонецЕсли;
					
				// Для давальческого сырья поиск выполняем с учетом НГ
				Если ТипЗнч(ОперацияРеализации.КорСубконто1) = Тип("СправочникСсылка.НоменклатурныеГруппы") Тогда
					СтруктураПоиска.Вставить("НоменклатурнаяГруппаВыпуска", ОперацияРеализации.КорСубконто1);
				ИначеЕсли ТипЗнч(ОперацияРеализации.КорСубконто2) = Тип("СправочникСсылка.НоменклатурныеГруппы") Тогда
					СтруктураПоиска.Вставить("НоменклатурнаяГруппаВыпуска", ОперацияРеализации.КорСубконто2);
				ИначеЕсли ТипЗнч(ОперацияРеализации.КорСубконто3) = Тип("СправочникСсылка.НоменклатурныеГруппы") Тогда
					СтруктураПоиска.Вставить("НоменклатурнаяГруппаВыпуска", ОперацияРеализации.КорСубконто3);
				КонецЕсли;
				
				Если ТипЗнч(ОперацияРеализации.КорСубконто1) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда						
					СтруктураПоиска.Вставить("СтатьяЗатрат", ОперацияРеализации.КорСубконто1);  																		
				ИначеЕсли ТипЗнч(ОперацияРеализации.КорСубконто2) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда						
					СтруктураПоиска.Вставить("СтатьяЗатрат", ОперацияРеализации.КорСубконто2);  
				ИначеЕсли ТипЗнч(ОперацияРеализации.КорСубконто3) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда						
					СтруктураПоиска.Вставить("СтатьяЗатрат", ОперацияРеализации.КорСубконто3);  						
				КонецЕсли; 

				СписокКорректировок = СтруктураПараметров.ЗаписьСведенияОКорректировкиСтоимостиПродукцииИТоваров.НайтиСтроки(СтруктураПоиска);
				Если СписокКорректировок.Количество() = 0 Тогда
					
					ЗаписьСведенияОКорректировкиСтоимостиПродукцииИТоваров = СтруктураПараметров.ЗаписьСведенияОКорректировкиСтоимостиПродукцииИТоваров.Добавить();
					ЗаписьСведенияОКорректировкиСтоимостиПродукцииИТоваров.ПериодРасчета               = СтруктураПараметров.Период;
					ЗаписьСведенияОКорректировкиСтоимостиПродукцииИТоваров.Организация                 = СтруктураПараметров.Организация;
					
					Если ТипЗнч(ПараметрыСостоянияИсточника.Субконто1)  = Тип("СправочникСсылка.Номенклатура") Тогда
						ЗаписьСведенияОКорректировкиСтоимостиПродукцииИТоваров.Номенклатура            = ПараметрыСостоянияИсточника.Субконто1;
					ИначеЕсли ТипЗнч(ПараметрыСостоянияИсточника.Субконто2)  = Тип("СправочникСсылка.Номенклатура") Тогда
						ЗаписьСведенияОКорректировкиСтоимостиПродукцииИТоваров.Номенклатура            = ПараметрыСостоянияИсточника.Субконто2;
					ИначеЕсли ТипЗнч(ПараметрыСостоянияИсточника.Субконто3)  = Тип("СправочникСсылка.Номенклатура") Тогда
						ЗаписьСведенияОКорректировкиСтоимостиПродукцииИТоваров.Номенклатура            = ПараметрыСостоянияИсточника.Субконто3;
					КонецЕсли;  					
					
					ЗаписьСведенияОКорректировкиСтоимостиПродукцииИТоваров.Регистратор                 = СтруктураПараметров.Регистратор;
					ЗаписьСведенияОКорректировкиСтоимостиПродукцииИТоваров.КорректируемыйДокумент      = ОперацияРеализации.Регистратор;
					ЗаписьСведенияОКорректировкиСтоимостиПродукцииИТоваров.СтруктурноеПодразделение    = ПараметрыСостоянияИсточника.СтруктурноеПодразделение;
					ЗаписьСведенияОКорректировкиСтоимостиПродукцииИТоваров.СчетЗатратБУ                 = ОперацияРеализации.КорСчет;  	
					
					Если ТипЗнч(ОперацияРеализации.КорСубконто1) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
						ЗаписьСведенияОКорректировкиСтоимостиПродукцииИТоваров.ПодразделениеВыпуска             = ОперацияРеализации.КорСубконто1;
					ИначеЕсли ТипЗнч(ОперацияРеализации.КорСубконто2) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
						ЗаписьСведенияОКорректировкиСтоимостиПродукцииИТоваров.ПодразделениеВыпуска             = ОперацияРеализации.КорСубконто2;
					ИначеЕсли ТипЗнч(ОперацияРеализации.КорСубконто3) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
						ЗаписьСведенияОКорректировкиСтоимостиПродукцииИТоваров.ПодразделениеВыпуска             = ОперацияРеализации.КорСубконто3;
					КонецЕсли; 
					
					Если ТипЗнч(ОперацияРеализации.КорСубконто1) = Тип("СправочникСсылка.НоменклатурныеГруппы") Тогда
						ЗаписьСведенияОКорректировкиСтоимостиПродукцииИТоваров.НоменклатурнаяГруппаВыпуска             = ОперацияРеализации.КорСубконто1;
					ИначеЕсли ТипЗнч(ОперацияРеализации.КорСубконто2) = Тип("СправочникСсылка.НоменклатурныеГруппы") Тогда
						ЗаписьСведенияОКорректировкиСтоимостиПродукцииИТоваров.НоменклатурнаяГруппаВыпуска             = ОперацияРеализации.КорСубконто2;
					ИначеЕсли ТипЗнч(ОперацияРеализации.КорСубконто3) = Тип("СправочникСсылка.НоменклатурныеГруппы") Тогда
						ЗаписьСведенияОКорректировкиСтоимостиПродукцииИТоваров.НоменклатурнаяГруппаВыпуска             = ОперацияРеализации.КорСубконто3;
					КонецЕсли; 
					
					Если ТипЗнч(ОперацияРеализации.КорСубконто1) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда						
						ЗаписьСведенияОКорректировкиСтоимостиПродукцииИТоваров.СтатьяЗатрат             = ОперацияРеализации.КорСубконто1;  																		
					ИначеЕсли ТипЗнч(ОперацияРеализации.КорСубконто2) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда
						ЗаписьСведенияОКорректировкиСтоимостиПродукцииИТоваров.СтатьяЗатрат             = ОперацияРеализации.КорСубконто2;
					ИначеЕсли ТипЗнч(ОперацияРеализации.КорСубконто3) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда
						ЗаписьСведенияОКорректировкиСтоимостиПродукцииИТоваров.СтатьяЗатрат             = ОперацияРеализации.КорСубконто3;						
					КонецЕсли; 

				Иначе
					ЗаписьСведенияОКорректировкиСтоимостиПродукцииИТоваров = СписокКорректировок[0];
				КонецЕсли;
				
				Если СтруктураПараметров.Учет = "НУ" Тогда
					
					Если СтруктураПараметров.ЗаписьСведенияОКорректировкиСтоимостиПродукцииИТоваров.Колонки.Найти("ВидУчета") = Неопределено Тогда
						СтруктураПараметров.ЗаписьСведенияОКорректировкиСтоимостиПродукцииИТоваров.Колонки.Добавить("ВидУчета");
					КонецЕсли;
					
					ЗаписьСведенияОКорректировкиСтоимостиПродукцииИТоваров.ВидУчета = ОперацияСписания.ВидУчета;
					ЗаписьСведенияОКорректировкиСтоимостиПродукцииИТоваров.СуммаКорректировкиВНУ = ЗаписьСведенияОКорректировкиСтоимостиПродукцииИТоваров.СуммаКорректировкиВНУ + СуммаКорректировки;
					
				Иначе	
					// по данным БУ
					ЗаписьСведенияОКорректировкиСтоимостиПродукцииИТоваров.Количество 			 = ОперацияРеализации.Количество;
					ЗаписьСведенияОКорректировкиСтоимостиПродукцииИТоваров.Себестоимость		 = Окр(ДолжноБытьСписано*КоэффициентКорректировки,2);
					
					ЗаписьСведенияОКорректировкиСтоимостиПродукцииИТоваров.СуммаКорректировки 	 = ЗаписьСведенияОКорректировкиСтоимостиПродукцииИТоваров.СуммаКорректировки + Окр(СуммаКорректировки*КоэффициентКорректировки,2);
				КонецЕсли;
			КонецЕсли;
			
			//движения в регистр "Реализация ТМЗ" формируются только для бух.учета
			Если СтруктураПараметров.Учет <> "НУ" Тогда
				
				ОбщаяСуммаПриРаспределении = ОбщаяСуммаПриРаспределении + Окр(СуммаКорректировки*КоэффициентКорректировки,2);
				
				Если НЕ (ТипЗнч(ОперацияРеализации.Регистратор) = Тип("ДокументСсылка.РеализацияТоваровУслуг")
					ИЛИ ТипЗнч(ОперацияРеализации.Регистратор) = Тип("ДокументСсылка.АктОбОказанииПроизводственныхУслуг")
					ИЛИ ТипЗнч(ОперацияРеализации.Регистратор) = Тип("ДокументСсылка.РеализацияУслугПоПереработке")
					ИЛИ ТипЗнч(ОперацияРеализации.Регистратор) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя"))
					ИЛИ ОбщаяСуммаПриРаспределении = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				ДвижениеТМЗ 						 = РеализацияТМЗ.Добавить();
				ДвижениеТМЗ.Период        			 = СтруктураПараметров.Период;
				ДвижениеТМЗ.Регистратор   			 = СтруктураПараметров.Регистратор;
				ДвижениеТМЗ.СтруктурноеПодразделение = ПараметрыСостоянияИсточника.СтруктурноеПодразделение;
				ДвижениеТМЗ.Активность    			 = Истина;
				ДвижениеТМЗ.Организация   			 = СтруктураПараметров.Организация;
				ДвижениеТМЗ.ДоговорКонтрагента   	 = ОперацияРеализации.Регистратор.ДоговорКонтрагента;
				ДвижениеТМЗ.СчетУчета 				 = ПараметрыСостоянияИсточника.Счет;
				
				// заполняем измерение "Номенклатура"
				Если ТипЗнч(ПараметрыСостоянияИсточника.Субконто1) = Тип("СправочникСсылка.Номенклатура") Тогда
					ДвижениеТМЗ.Номенклатура = ПараметрыСостоянияИсточника.Субконто1;
				ИначеЕсли ТипЗнч(ПараметрыСостоянияИсточника.Субконто2) = Тип("СправочникСсылка.Номенклатура") Тогда
					ДвижениеТМЗ.Номенклатура = ПараметрыСостоянияИсточника.Субконто2;
				ИначеЕсли ТипЗнч(ПараметрыСостоянияИсточника.Субконто3) = Тип("СправочникСсылка.Номенклатура") Тогда
					ДвижениеТМЗ.Номенклатура = ПараметрыСостоянияИсточника.Субконто3;
				КонецЕсли;
				
				// заполняем измерение "Склад"
				Если ТипЗнч(ПараметрыСостоянияИсточника.Субконто1) = Тип("СправочникСсылка.Склады") Тогда
					ДвижениеТМЗ.Склад = ПараметрыСостоянияИсточника.Субконто1;
				ИначеЕсли ТипЗнч(ПараметрыСостоянияИсточника.Субконто2) = Тип("СправочникСсылка.Склады") Тогда
					ДвижениеТМЗ.Склад = ПараметрыСостоянияИсточника.Субконто2;
				ИначеЕсли ТипЗнч(ПараметрыСостоянияИсточника.Субконто3) = Тип("СправочникСсылка.Склады") Тогда
					ДвижениеТМЗ.Склад = ПараметрыСостоянияИсточника.Субконто3;
				КонецЕсли;
				
				// заполняем измерение "Партия"
				Если ЗначениеЗаполнено(ПараметрыСостоянияИсточника.Субконто1) И НЕ (ТипЗнч(ПараметрыСостоянияИсточника.Субконто1) = Тип("СправочникСсылка.Склады") ИЛИ ТипЗнч(ПараметрыСостоянияИсточника.Субконто1) = Тип("СправочникСсылка.Номенклатура")) Тогда
					ДвижениеТМЗ.Партия = ПараметрыСостоянияИсточника.Субконто1;
				ИначеЕсли ЗначениеЗаполнено(ПараметрыСостоянияИсточника.Субконто2) И НЕ (ТипЗнч(ПараметрыСостоянияИсточника.Субконто2) = Тип("СправочникСсылка.Склады") ИЛИ ТипЗнч(ПараметрыСостоянияИсточника.Субконто2) = Тип("СправочникСсылка.Номенклатура")) Тогда
					ДвижениеТМЗ.Партия = ПараметрыСостоянияИсточника.Субконто2;
				ИначеЕсли ЗначениеЗаполнено(ПараметрыСостоянияИсточника.Субконто3) И НЕ (ТипЗнч(ПараметрыСостоянияИсточника.Субконто3) = Тип("СправочникСсылка.Склады") ИЛИ ТипЗнч(ПараметрыСостоянияИсточника.Субконто3) = Тип("СправочникСсылка.Номенклатура")) Тогда
					ДвижениеТМЗ.Партия = ПараметрыСостоянияИсточника.Субконто3;
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ДвижениеТМЗ.Партия) Тогда
					ДвижениеТМЗ.Партия = Неопределено;
				КонецЕсли;
				
				ДвижениеТМЗ.Стоимость = СуммаКорректировки*КоэффициентКорректировки;
				
				Если ТипЗнч(ОперацияРеализации.Регистратор) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
					ДвижениеТМЗ.Стоимость = (-1)*ДвижениеТМЗ.Стоимость;
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
		
		Если СтруктураПараметров.Учет <> "НУ" Тогда
			//проверим остаток, получившийся после распределения
			Остаток = СуммаКорректировки - ОбщаяСуммаПриРаспределении;
			Если Остаток <> 0 Тогда
				Если СтруктураПараметров.Свойство("ЗаписьСведенияОКорректировкиСтоимостиПродукцииИТоваров")
					И НЕ ЗаписьСведенияОКорректировкиСтоимостиПродукцииИТоваров = Неопределено Тогда
					ЗаписьСведенияОКорректировкиСтоимостиПродукцииИТоваров.СуммаКорректировки = ЗаписьСведенияОКорректировкиСтоимостиПродукцииИТоваров.СуммаКорректировки + Остаток;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры
////////////////////////////////////////////////////////////////////////////////
// Расчет и корректировка себестоимости продукции

Функция РасчетПорядкаПеределов(Реквизиты)
	
	СпособРасчетаСебестоимостиПроизводства = УчетнаяПолитикаСервер.СпособРасчетаСебестоимостиПроизводства(Реквизиты.Организация,Реквизиты.Период);
	
	СтруктураДопПараметров =  Реквизиты.ДопПараметры;

	Если СпособРасчетаСебестоимостиПроизводства  = Перечисления.СпособыРасчетаСебестоимостиПродукции.ПоПеределам Тогда
		
		СтруктураДопПараметров.СпособРасчетаСебестоимостиПроизводства = "ПоПеределам";
		СтруктураДопПараметров.ПорядокПеределов = ПолучитьПорядокПеределов(Реквизиты);
		
	Иначе
		
		СтруктураДопПараметров.СпособРасчетаСебестоимостиПроизводства = "ПоПодразделениям";
		
		Если СтруктураДопПараметров.Учет = "БУ" Тогда
			ПроверкаПорядкаЗакрытияПодразделений(Реквизиты, "Типовой");
		Иначе
			ПроверкаПорядкаЗакрытияПодразделений(Реквизиты, "Налоговый");
		КонецЕсли;

		СтруктураДопПараметров.ПорядокПеределов = ПолучитьПорядокПодразделений(Реквизиты);
		
		АнализДанныхПроизводства(Реквизиты);
	КонецЕсли;
	
	
КонецФункции 

Процедура ПроверкаПорядкаЗакрытияПодразделений(Реквизиты, ПланСчетов)
		
	СтруктураДопПараметров = Реквизиты.ДопПараметры;
	
	ТекстЗапроса = "ВЫБРАТЬ
				   |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ПорядокЗакрытияПодразделенийОрганизацийСрезПоследних.НомерПередела) КАК КонечныйПередел,
				   |	ПорядокЗакрытияПодразделенийОрганизацийСрезПоследних.Подразделение КАК Подразделение,
				   |	NULL КАК СуммаОборот
				   |ИЗ
				   |	РегистрСведений.ПорядокЗакрытияПодразделенийОрганизаций.СрезПоследних(&КонДата, Организация = &Организация) КАК ПорядокЗакрытияПодразделенийОрганизацийСрезПоследних
				   |
				   |СГРУППИРОВАТЬ ПО
				   |	ПорядокЗакрытияПодразделенийОрганизацийСрезПоследних.Подразделение
				   |
				   |ОБЪЕДИНИТЬ ВСЕ
				   |
				   |ВЫБРАТЬ
				   |	NULL,
				   |	ТиповойОбороты.СубконтоДт1,
				   |	СУММА(ТиповойОбороты.СуммаОборот)
				   |ИЗ
				   |	РегистрБухгалтерии."+ ПланСчетов +".ОборотыДтКт(&НачДата, &КонДата, , , , , , СтруктурноеПодразделениеДт = &СтруктурноеПодразделение И  Организация = &Организация) КАК ТиповойОбороты
				   |
				   |ГДЕ
				   |	(ТиповойОбороты.СубконтоДт1 ССЫЛКА Справочник.ПодразделенияОрганизаций)
				   |
				   |СГРУППИРОВАТЬ ПО
				   |	ТиповойОбороты.СубконтоДт1
				   |
				   |ИТОГИ СУММА(КонечныйПередел), СУММА(СуммаОборот) ПО
				   |	Подразделение";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("КонДата",     Реквизиты.КонецПериода);
	Запрос.УстановитьПараметр("НачДата",     Реквизиты.НачалоПериода);
	Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
	Запрос.УстановитьПараметр("СтруктурноеПодразделение", Реквизиты.СтруктурноеПодразделение);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	РезультатЗапроса.Свернуть("Подразделение","КонечныйПередел, СуммаОборот");
	
	Если СтруктураДопПараметров.Учет = "БУ" Тогда
		РегОперация = Перечисления.ВидыРегламентныхОпераций.РасчетСтоимостиПродукцииБУ;
	Иначе
		РегОперация = Перечисления.ВидыРегламентныхОпераций.РасчетСтоимостиПродукцииНУ;
	КонецЕсли;
			
	Для Каждого Результат Из РезультатЗапроса Цикл
		Если Результат.КонечныйПередел = 0 И Результат.СуммаОборот <> 0   И Не СтруктураДопПараметров.ПорядокПодразделенийСообщался Тогда
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Не установлен порядок подразделения %1
			|для закрытия счетов, используемый
			|при расчете стоимости продукции.
			|Порядок устанавливается документом
			|""%2""'", ОбщегоНазначения.КодОсновногоЯзыка()), Результат.Подразделение, Метаданные.Документы.УстановкаПорядкаЗакрытияПодразделений.Представление());
			
			ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации(ТекстСообщения, , , Реквизиты.Объект, РегОперация);
			
			СтруктураДопПараметров.ПорядокПодразделенийСообщался = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьТаблицуВстречногоВыпуска(Реквизиты)
		
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВстречныйВыпускПродукцииУслугСрезПоследних.Продукция,
	|	ВстречныйВыпускПродукцииУслугСрезПоследних.Подразделение,
	|	ВстречныйВыпускПродукцииУслугСрезПоследних.НоменклатурнаяГруппа,
	|	ВстречныйВыпускПродукцииУслугСрезПоследних.ПодразделениеПересчета КАК ПодразделениеПересчета,
	|	ВстречныйВыпускПродукцииУслугСрезПоследних.НоменклатурнаяГруппаПересчета КАК НоменклатурнаяГруппаПересчета,
	|	ВложенныйЗапрос.СубконтоКт2,
	|	ВложенныйЗапрос.СубконтоКт3
	|ИЗ
	|	РегистрСведений.ВстречныйВыпускПродукцииУслуг.СрезПоследних(&КонДата, ) КАК ВстречныйВыпускПродукцииУслугСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ТиповойОборотыДтКт.СубконтоКт2 КАК СубконтоКт2,
	|			ТиповойОборотыДтКт.СубконтоКт3 КАК СубконтоКт3,
	|			ТиповойОборотыДтКт.СуммаОборот КАК СуммаОборот,
	|			ТиповойОборотыДтКт.СубконтоДт1 КАК СубконтоДт1,
	|			ТиповойОборотыДтКт.СубконтоДт2 КАК СубконтоДт2,
	|			ТиповойОборотыДтКт.СубконтоДт3 КАК СубконтоДт3,
	|			ТиповойОборотыДтКт.СубконтоКт1 КАК СубконтоКт1,
	|			ТиповойОборотыДтКт.СтруктурноеПодразделениеДт КАК СтруктурноеПодразделениеДт,
	|			ТиповойОборотыДтКт.СтруктурноеПодразделениеКт КАК СтруктурноеПодразделениеКт
	|		ИЗ
	|			РегистрБухгалтерии.Типовой.ОборотыДтКт(&НачДата, &КонДата, , (НЕ СчетДт В ИЕРАРХИИ (&СчетаНакладныхРасх)), , , , &Организация = Организация) КАК ТиповойОборотыДтКт) КАК ВложенныйЗапрос
	|		ПО ВстречныйВыпускПродукцииУслугСрезПоследних.Продукция = ВложенныйЗапрос.СубконтоКт1
	|			И ВстречныйВыпускПродукцииУслугСрезПоследних.ПодразделениеПересчета = ВложенныйЗапрос.СубконтоДт1
	|			И ВстречныйВыпускПродукцииУслугСрезПоследних.НоменклатурнаяГруппаПересчета = ВложенныйЗапрос.СубконтоДт2
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВстречныйВыпускПродукцииУслугСрезПоследних.Продукция,
	|	ВстречныйВыпускПродукцииУслугСрезПоследних.Подразделение,
	|	ВстречныйВыпускПродукцииУслугСрезПоследних.НоменклатурнаяГруппа,
	|	ВстречныйВыпускПродукцииУслугСрезПоследних.ПодразделениеПересчета,
	|	ВстречныйВыпускПродукцииУслугСрезПоследних.НоменклатурнаяГруппаПересчета,
	|	ВложенныйЗапрос.СубконтоКт2,
	|	ВложенныйЗапрос.СубконтоКт3
	|ИЗ
	|	РегистрСведений.ВстречныйВыпускПродукцииУслуг.СрезПоследних(&КонДата, ) КАК ВстречныйВыпускПродукцииУслугСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ТиповойОборотыДтКт.СубконтоКт2 КАК СубконтоКт2,
	|			ТиповойОборотыДтКт.СубконтоКт3 КАК СубконтоКт3,
	|			ТиповойОборотыДтКт.СуммаОборот КАК СуммаОборот,
	|			ТиповойОборотыДтКт.СубконтоДт1 КАК СубконтоДт1,
	|			ТиповойОборотыДтКт.СубконтоДт2 КАК СубконтоДт2,
	|			ТиповойОборотыДтКт.СубконтоДт3 КАК СубконтоДт3,
	|			ТиповойОборотыДтКт.СубконтоКт1 КАК СубконтоКт1
	|		ИЗ
	|			РегистрБухгалтерии.Типовой.ОборотыДтКт(&НачДата, &КонДата, , СчетДт В ИЕРАРХИИ (&СчетаНакладныхРасх), , , , &Организация = Организация) КАК ТиповойОборотыДтКт) КАК ВложенныйЗапрос
	|		ПО ВстречныйВыпускПродукцииУслугСрезПоследних.Продукция = ВложенныйЗапрос.СубконтоКт1
	|			И ВстречныйВыпускПродукцииУслугСрезПоследних.ПодразделениеПересчета = ВложенныйЗапрос.СубконтоДт1";
	 
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("КонДата",     Реквизиты.КонецПериода);
	Запрос.УстановитьПараметр("НачДата",     Реквизиты.НачалоПериода);
	Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
		
	СчетаНакладныхРасх = Новый Массив;
	СчетаНакладныхРасх.Добавить(ПланыСчетов.Типовой.НакладныеРасходы);
	Запрос.УстановитьПараметр("СчетаНакладныхРасх", СчетаНакладныхРасх);
	
	ТаблицаВстречногоВыпуска = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаВстречногоВыпуска;
 КонецФункции

Функция ПолучитьПорядокПодразделений(Реквизиты)
	
	// Определяется диапазон переделов после чего начинается перебор
	// всех переделов из найденного диапазона.	
	
	ТекстЗапроса = "ВЫБРАТЬ
				   |	ПорядокЗакрытияПодразделенийОрганизацийСрезПоследних.НомерПередела КАК НомерПередела,
				   |	ПорядокЗакрытияПодразделенийОрганизацийСрезПоследних.Подразделение КАК Подразделение
				   |ИЗ
				   |	РегистрСведений.ПорядокЗакрытияПодразделенийОрганизаций.СрезПоследних(&КонДата,  Организация = &Организация) КАК ПорядокЗакрытияПодразделенийОрганизацийСрезПоследних
				   |
				   |УПОРЯДОЧИТЬ ПО
				   |	НомерПередела";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("КонДата",     КонецМесяца(Реквизиты.Период));
	Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
		
	 Результат = Запрос.Выполнить().Выгрузить();
	 Результат.Колонки.Добавить("НоменклатурнаяГруппа");
	 Результат.ЗаполнитьЗначения("Все", "НоменклатурнаяГруппа");

	Возврат Результат;
	
Конецфункции

Функция АнализДанныхПроизводства(Реквизиты)
	
	ТаблицаНеЗакрытыхПодразделений = Новый ТаблицаЗначений;
	ТаблицаНеЗакрытыхПодразделений.Колонки.Добавить("Подразделение");
	ТаблицаНеЗакрытыхПодразделений.Колонки.Добавить("СчетЗатрат");
	
	СтруктураДопПараметров = Реквизиты.ДопПараметры;
	
	// Модель поизводства в виде последовательности цепочек:
	//ГП(готовая продукция),
	//Подразделение,
	//ном.группа,
	//Номенклатура, израсходованная на производство, в этом подразделении и на эту ном.группу, а значит и на эту ГП
	//счет учета затрат производства	
	СчетаЗатрат = Новый Массив;
	
	Если СтруктураДопПараметров.Учет = "НУ" Тогда
		РегОперация = Перечисления.ВидыРегламентныхОпераций.РасчетСтоимостиПродукцииНУ;
		ПС = ПланыСчетов.Налоговый;
	Иначе
		РегОперация = Перечисления.ВидыРегламентныхОпераций.РасчетСтоимостиПродукцииБУ;
		ПС = ПланыСчетов.Типовой;
	КонецЕсли;
	
	СчетаЗатрат.Добавить(ПС.ОсновноеПроизводство);
	СчетаЗатрат.Добавить(ПС.ПолуфабрикатыСобственногоПроизводства);
	СчетаЗатрат.Добавить(ПС.ВспомогательныеПроизводства);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	МетодыРаспределения.СчетЗатратБУ             КАК СчетЗатрат,
	|	МетодыРаспределения.СтатьяЗатрат             КАК СтатьяЗатрат,
	|	МетодыРаспределения.Подразделение            КАК Подразделение,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(МетодыРаспределения.СтруктурноеПодразделение КАК Справочник.ПодразделенияОрганизаций), &ПустоеПодразделение) КАК СтруктурноеПодразделение,
	|	МетодыРаспределения.Период                   КАК Период,
	|	МетодыРаспределения.МетодРаспределенияЗатрат КАК МетодРаспределенияЗатрат
	|ПОМЕСТИТЬ ВТ_МетодыРаспределения_Развернуто
	|ИЗ
	|	РегистрСведений.МетодыРаспределенияКосвенныхРасходовОрганизаций.СрезПоследних(&КонДата, Организация = &Организация) КАК МетодыРаспределения
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетЗатрат,
	|	СтатьяЗатрат,
	|	Подразделение,
	|	СтруктурноеПодразделение,
	|	Период
	|;
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	МетодыРаспределения.СчетЗатрат               КАК СчетЗатрат,
	|	МетодыРаспределения.СтатьяЗатрат             КАК СтатьяЗатрат,
	|	МетодыРаспределения.Подразделение            КАК Подразделение,
	|	МетодыРаспределения.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	|	МетодыРаспределения.МетодРаспределенияЗатрат КАК МетодРаспределенияЗатрат
	|ПОМЕСТИТЬ ВТ_МетодыРаспределения
	|ИЗ
	|	ВТ_МетодыРаспределения_Развернуто КАК МетодыРаспределения
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_МетодыРаспределения_Развернуто КАК МетодыРаспределенияДляСреза
	|		ПО МетодыРаспределения.СчетЗатрат              = МетодыРаспределенияДляСреза.СчетЗатрат
	|		И МетодыРаспределения.СтатьяЗатрат             = МетодыРаспределенияДляСреза.СтатьяЗатрат
	|		И МетодыРаспределения.Подразделение            = МетодыРаспределенияДляСреза.Подразделение
	|		И МетодыРаспределения.СтруктурноеПодразделение = МетодыРаспределенияДляСреза.СтруктурноеПодразделение
	|		И МетодыРаспределения.Период                   < МетодыРаспределенияДляСреза.Период
	|		
	|ГДЕ
	|	МетодыРаспределенияДляСреза.Период ЕСТЬ NULL
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетЗатрат,
	|	СтатьяЗатрат,
	|	Подразделение,
	|	СтруктурноеПодразделение
	|;
	|
	|УНИЧТОЖИТЬ ВТ_МетодыРаспределения_Развернуто
	|;
	|
	|ВЫБРАТЬ
	|	ТиповойОбороты.Счет                          КАК СчетЗатрат,
	|	ТиповойОбороты.СтруктурноеПодразделение      КАК СтруктурноеПодразделение,
	|	ТиповойОбороты.Субконто1                     КАК Подразделение,
	|	ТиповойОбороты.Субконто2                     КАК СтатьяЗатрат,
	|	СУММА(ТиповойОбороты.СуммаОборот)            КАК СуммаОборот
	|ПОМЕСТИТЬ ВТ_ТиповойОбороты
	|ИЗ
	|	РегистрБухгалтерии.Типовой.Обороты(&НачДата, &КонДата, , Счет В ИЕРАРХИИ (&СчетЗатрат), &ВидыСубконто, Организация = &Организация, , ) КАК ТиповойОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	ТиповойОбороты.Счет,
	|	ТиповойОбороты.СтруктурноеПодразделение,
	|	ТиповойОбороты.Субконто1,
	|	ТиповойОбороты.Субконто2
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетЗатрат,
	|	СтатьяЗатрат,
	|	Подразделение,
	|	СтруктурноеПодразделение
	|;
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТиповойОбороты.СчетЗатрат КАК СчетЗатрат,
	|	ТиповойОбороты.Подразделение КАК Подразделение,
	|	ЕСТЬNULL(ПТ0.МетодРаспределенияЗатрат,
	|	ЕСТЬNULL(ПТ1.МетодРаспределенияЗатрат,
	|	ЕСТЬNULL(ПТ2.МетодРаспределенияЗатрат,
	|	ЕСТЬNULL(ПТ3.МетодРаспределенияЗатрат,
	|	ЕСТЬNULL(ПТ4.МетодРаспределенияЗатрат,
	|	ЕСТЬNULL(ПТ5.МетодРаспределенияЗатрат,
	|	ЕСТЬNULL(ПТ6.МетодРаспределенияЗатрат,
	|	ЕСТЬNULL(ПТ7.МетодРаспределенияЗатрат,
	|	ЕСТЬNULL(ПТ8.МетодРаспределенияЗатрат, ПТ9.МетодРаспределенияЗатрат))))))))) КАК МетодРаспределенияЗатрат
	|ПОМЕСТИТЬ ВТ_ПоКосвеннымЗатратам
	|ИЗ
	|	ВТ_ТиповойОбороты КАК ТиповойОбороты
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_МетодыРаспределения КАК ПТ0
	|		ПО ПТ0.СчетЗатрат               = ТиповойОбороты.СчетЗатрат
	|		 И ПТ0.СтатьяЗатрат             = ТиповойОбороты.СтатьяЗатрат
	|		 И ПТ0.Подразделение            = ТиповойОбороты.Подразделение
	|		 И ПТ0.СтруктурноеПодразделение = ТиповойОбороты.СтруктурноеПодразделение
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_МетодыРаспределения КАК ПТ1
	|		ПО ПТ1.СчетЗатрат               = ТиповойОбороты.СчетЗатрат
	|		 И ПТ1.СтатьяЗатрат             = &ПустаяСтатьяЗатрат
	|		 И ПТ1.Подразделение            = ТиповойОбороты.Подразделение
	|		 И ПТ1.СтруктурноеПодразделение = ТиповойОбороты.СтруктурноеПодразделение
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_МетодыРаспределения КАК ПТ2
	|		ПО ПТ2.СчетЗатрат               = ТиповойОбороты.СчетЗатрат
	|		 И ПТ2.СтатьяЗатрат             = ТиповойОбороты.СтатьяЗатрат
	|		 И ПТ2.Подразделение            = &ПустоеПодразделение
	|		 И ПТ2.СтруктурноеПодразделение = ТиповойОбороты.СтруктурноеПодразделение
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_МетодыРаспределения КАК ПТ3
	|		ПО ПТ3.СчетЗатрат               = ТиповойОбороты.СчетЗатрат
	|		 И ПТ3.СтатьяЗатрат             = &ПустаяСтатьяЗатрат
	|		 И ПТ3.Подразделение            = ТиповойОбороты.Подразделение
	|		 И ПТ3.СтруктурноеПодразделение = &ПустоеПодразделение
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_МетодыРаспределения КАК ПТ4
	|		ПО ПТ4.СчетЗатрат               = ТиповойОбороты.СчетЗатрат
	|		 И ПТ4.СтатьяЗатрат             = ТиповойОбороты.СтатьяЗатрат
	|		 И ПТ4.Подразделение            = &ПустоеПодразделение
	|		 И ПТ4.СтруктурноеПодразделение = &ПустоеПодразделение
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_МетодыРаспределения КАК ПТ5
	|		ПО ПТ5.СчетЗатрат               = ТиповойОбороты.СчетЗатрат
	|		 И ПТ5.СтатьяЗатрат             = &ПустаяСтатьяЗатрат
	|		 И ПТ5.Подразделение            = &ПустоеПодразделение
	|		 И ПТ5.СтруктурноеПодразделение = ТиповойОбороты.СтруктурноеПодразделение
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_МетодыРаспределения КАК ПТ6
	|		ПО ПТ6.СчетЗатрат               = &ПустойСчет
	|		 И ПТ6.СтатьяЗатрат             = &ПустаяСтатьяЗатрат
	|		 И ПТ6.Подразделение            = &ПустоеПодразделение
	|		 И ПТ6.СтруктурноеПодразделение = ТиповойОбороты.СтруктурноеПодразделение
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_МетодыРаспределения КАК ПТ7
	|		ПО ПТ7.СчетЗатрат               = &ПустойСчет
	|		 И ПТ7.СтатьяЗатрат             = ТиповойОбороты.СтатьяЗатрат
	|		 И ПТ7.Подразделение            = &ПустоеПодразделение
	|		 И ПТ7.СтруктурноеПодразделение = &ПустоеПодразделение
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_МетодыРаспределения КАК ПТ8
	|		ПО ПТ8.СчетЗатрат               = ТиповойОбороты.СчетЗатрат
	|		 И ПТ8.СтатьяЗатрат             = &ПустаяСтатьяЗатрат
	|		 И ПТ8.Подразделение            = &ПустоеПодразделение
	|		 И ПТ8.СтруктурноеПодразделение = &ПустоеПодразделение
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_МетодыРаспределения КАК ПТ9
	|		ПО ПТ9.СчетЗатрат               = &ПустойСчет
	|		 И ПТ9.СтатьяЗатрат             = &ПустаяСтатьяЗатрат
	|		 И ПТ9.Подразделение            = &ПустоеПодразделение
	|		 И ПТ9.СтруктурноеПодразделение = &ПустоеПодразделение
	|;
	|
	|ВЫБРАТЬ
	|	ВыпускПродукцииУслуг.Подразделение КАК Подразделение,
	|	ВыпускПродукцииУслуг.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	ВыпускПродукцииУслуг.СчетЗатрат КАК СчетЗатрат,
	|	ВЫБОР
	|		КОГДА ВыпускПродукцииУслуг.Продукция.Услуга
	|			ТОГДА ВыпускПродукцииУслуг.Подразделение
	|		ИНАЧЕ ВыпускПродукцииУслуг.Продукция
	|	КОНЕЦ КАК ГП
	|ПОМЕСТИТЬ ВТ_ТаблицаГП
	|ИЗ
	|	РегистрНакопления.ВыпускПродукцииУслугБухгалтерскийУчет.Обороты(&НачДата, &КонДата, , СчетЗатрат В ИЕРАРХИИ (&Счета) И Организация = &Организация) КАК ВыпускПродукцииУслуг
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ
	|	ИнвентаризацияНЗП.ПодразделениеОрганизации,
	|	ИнвентаризацияНЗПСостав.НоменклатурнаяГруппа,
	|	ИнвентаризацияНЗП.СчетЗатратБУ,
	|	&ПустаяНоменклатура
	|ИЗ
	|	Документ.ИнвентаризацияНЗП.Состав КАК ИнвентаризацияНЗПСостав
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ИнвентаризацияНЗП КАК ИнвентаризацияНЗП
	|		ПО ИнвентаризацияНЗПСостав.Ссылка = ИнвентаризацияНЗП.Ссылка
	|ГДЕ
	|	ИнвентаризацияНЗП.Дата МЕЖДУ &НачДата И &КонДата
	|	И ИнвентаризацияНЗП.СчетЗатратБУ В ИЕРАРХИИ(&Счета)
	|	И ИнвентаризацияНЗП.Организация = &Организация
	|	И НЕ ИнвентаризацияНЗП.ПометкаУдаления
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Подразделение,
	|	СчетЗатрат
	|;
	|
	|ВЫБРАТЬ
	|	1                          КАК Источник,
	|	ТиповойОбороты.СубконтоДт1 КАК Подразделение,
	|	ТиповойОбороты.СубконтоДт2 КАК НоменклатурнаяГруппа,
	|	ТиповойОбороты.СчетДт      КАК СчетЗатрат,
	|	ВЫБОР
	|		КОГДА ТиповойОбороты.СубконтоКт1 ССЫЛКА Справочник.Номенклатура
	|			ТОГДА ТиповойОбороты.СубконтоКт1
	|		КОГДА ТиповойОбороты.СубконтоКт2 ССЫЛКА Справочник.Номенклатура
	|			ТОГДА ТиповойОбороты.СубконтоКт2
	|		КОГДА ТиповойОбороты.СубконтоКт3 ССЫЛКА Справочник.Номенклатура
	|			ТОГДА ТиповойОбороты.СубконтоКт3
	|		ИНАЧЕ ТиповойОбороты.СубконтоКт1
	|	КОНЕЦ                      КАК НоменклатураЗатрат
	|ПОМЕСТИТЬ ВТ_ТаблицаЗатрат
	|ИЗ
	|	РегистрБухгалтерии.Типовой.ОборотыДтКт(&НачДата, &КонДата, , СчетДт В ИЕРАРХИИ (&Счета), , , , Организация = &Организация) КАК ТиповойОбороты
	|
	|ОБЪЕДИНИТЬ
	|ВЫБРАТЬ
	|	1                          КАК Источник,
	|	ТиповойОстатки.Субконто1   КАК Подразделение,
	|	ТиповойОстатки.Субконто2   КАК НоменклатурнаяГруппа,
	|	ТиповойОстатки.Счет        КАК СчетЗатрат,
	|	ВЫБОР
	|		КОГДА ТиповойОбороты.СубконтоКт1 ССЫЛКА Справочник.Номенклатура
	|			ТОГДА ТиповойОбороты.СубконтоКт1
	|		КОГДА ТиповойОбороты.СубконтоКт2 ССЫЛКА Справочник.Номенклатура
	|			ТОГДА ТиповойОбороты.СубконтоКт2
	|		КОГДА ТиповойОбороты.СубконтоКт3 ССЫЛКА Справочник.Номенклатура
	|			ТОГДА ТиповойОбороты.СубконтоКт3
	|		ИНАЧЕ ТиповойОбороты.СубконтоКт1
	|	КОНЕЦ                      КАК НоменклатураЗатрат
	|ИЗ
	|	РегистрБухгалтерии.Типовой.Остатки(&НачГраница, Счет В ИЕРАРХИИ (&Счета), , Организация = &Организация) КАК ТиповойОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Типовой.ОборотыДтКт(&НачДата, &КонДата, , СчетДт В ИЕРАРХИИ (&Счета), , , , Организация = &Организация) КАК ТиповойОбороты
	|		ПО (ТиповойОбороты.СчетДт = ТиповойОстатки.Счет)
	|			И (ТиповойОбороты.СубконтоДт1 = ТиповойОстатки.Субконто1)
	|			И (ТиповойОбороты.СубконтоДт2 = ТиповойОстатки.Субконто2)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ
	|	2                          КАК Источник,
	|	ТиповойОбороты.СубконтоДт1 КАК Подразделение,
	|	NULL                       КАК НоменклатурнаяГруппа,
	|	ТиповойОбороты.СчетДт      КАК СчетЗатрат,
	|	&ПустаяСтатьяЗатрат        КАК НоменклатураЗатрат
	|ИЗ
	|	РегистрБухгалтерии.Типовой.ОборотыДтКт(&НачДата, &КонДата, , СчетДт В ИЕРАРХИИ (&СчетаОбщихЗатрат), , , , Организация = &Организация) КАК ТиповойОбороты
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Подразделение,
	|	СчетЗатрат
	|;
	|
	|ВЫБРАТЬ
	|	ТаблицаЗатрат.Источник КАК Источник,
	|	ТаблицаЗатрат.Подразделение КАК Подразделение,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаЗатрат.Подразделение) КАК ПодразделениеПредставление,
	|	ЕСТЬNULL(ТаблицаГП.НоменклатурнаяГруппа, ТаблицаЗатрат.НоменклатурнаяГруппа) КАК НоменклатурнаяГруппа,
	|	ПРЕДСТАВЛЕНИЕ(ЕСТЬNULL(ТаблицаГП.НоменклатурнаяГруппа, ТаблицаЗатрат.НоменклатурнаяГруппа)) КАК НоменклатурнаяГруппаПредставление,
	|	ЕСТЬNULL(ТаблицаГП.ГП, ""NULL"") КАК ГП,
	|	ТаблицаЗатрат.СчетЗатрат КАК СчетЗатрат,
	|	ТаблицаЗатрат.НоменклатураЗатрат КАК НоменклатураЗатрат,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаЗатрат.НоменклатураЗатрат) КАК НоменклатураЗатратПредставление,
	|	ПоКосвеннымЗатратам.СчетЗатрат КАК СчетЗатратДляПроверки,
	|	ЕСТЬNULL(АналитикаМетодовРаспределения.СчетЗакрытияБУ, ЗНАЧЕНИЕ(ПланСчетов.Типовой.ПустаяСсылка))
	|	В ИЕРАРХИИ (
	|		ЗНАЧЕНИЕ(ПланСчетов.Типовой.ОсновноеПроизводство_),
	|		ЗНАЧЕНИЕ(ПланСчетов.Типовой.ПолуфабрикатыСобственногоПроизводства_),
	|		ЗНАЧЕНИЕ(ПланСчетов.Типовой.ВспомогательныеПроизводства_),
	|		ЗНАЧЕНИЕ(ПланСчетов.Типовой.НакладныеРасходы_)) КАК ПризнакПроизводсвенногоСчета,
	|	ЕСТЬNULL(АналитикаМетодовРаспределения.СубконтоБУ1, НЕОПРЕДЕЛЕНО) КАК СубконтоЗакрытия1,
	|	ЕСТЬNULL(АналитикаМетодовРаспределения.СубконтоБУ2, НЕОПРЕДЕЛЕНО) КАК СубконтоЗакрытия2,
	|	ЕСТЬNULL(АналитикаМетодовРаспределения.СубконтоБУ3, НЕОПРЕДЕЛЕНО) КАК СубконтоЗакрытия3,
	|	ЕСТЬNULL(МетодыРаспределения.БазаРаспределения, ЛОЖЬ) КАК БазаРаспределения
	|	
	|ИЗ
	|	ВТ_ТаблицаЗатрат КАК ТаблицаЗатрат
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ТаблицаГП КАК ТаблицаГП
	|		ПО (ТаблицаГП.Подразделение = ТаблицаЗатрат.Подразделение)
	|			И (ВЫБОР
	|				КОГДА ТаблицаЗатрат.Источник = 1
	|					ТОГДА ВЫБОР
	|								КОГДА ТаблицаГП.СчетЗатрат = ТаблицаЗатрат.СчетЗатрат
	|									ТОГДА ИСТИНА
	|								ИНАЧЕ ЛОЖЬ
	|							КОНЕЦ
	|							И ВЫБОР
	|								КОГДА ТаблицаЗатрат.НоменклатурнаяГруппа ССЫЛКА Справочник.НоменклатурныеГруппы
	|									ТОГДА ВЫБОР
	|											КОГДА ТаблицаЗатрат.НоменклатурнаяГруппа = ТаблицаГП.НоменклатурнаяГруппа
	|												ТОГДА ИСТИНА
	|											ИНАЧЕ ЛОЖЬ
	|										КОНЕЦ
	|								ИНАЧЕ ИСТИНА
	|							КОНЕЦ
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ = ИСТИНА)
	|			
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПоКосвеннымЗатратам КАК ПоКосвеннымЗатратам
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.МетодыРаспределенияКосвенныхРасходов.АналитикаРаспределения КАК АналитикаМетодовРаспределения
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.МетодыРаспределенияКосвенныхРасходов КАК МетодыРаспределения
	|				ПО (АналитикаМетодовРаспределения.Ссылка = МетодыРаспределения.Ссылка)
	|			ПО (ПоКосвеннымЗатратам.МетодРаспределенияЗатрат = АналитикаМетодовРаспределения.Ссылка)
	|		ПО (ПоКосвеннымЗатратам.Подразделение = ТаблицаЗатрат.Подразделение)
	|			И (ПоКосвеннымЗатратам.СчетЗатрат = ТаблицаЗатрат.СчетЗатрат)");
	
	НачГраница = Новый Граница(Реквизиты.НачалоПериода, ВидГраницы.Исключая);
	Запрос.УстановитьПараметр("НачДата"            , Реквизиты.НачалоПериода);
	Запрос.УстановитьПараметр("КонДата"            , Реквизиты.КонецПериода);
	Запрос.УстановитьПараметр("НачГраница"         , НачГраница);
	Запрос.УстановитьПараметр("Счета"              , СчетаЗатрат);
	Запрос.УстановитьПараметр("Организация"        , Реквизиты.Организация);
	Запрос.УстановитьПараметр("ПустаяСтатьяЗатрат" , Справочники.СтатьиЗатрат.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустаяНоменклатура" , Справочники.Номенклатура.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустоеПодразделение", Справочники.ПодразделенияОрганизаций.ПустаяСсылка());
	
	Если СтруктураДопПараметров.Учет = "НУ" Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Типовой", "Налоговый");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "БухгалтерскийУчет", "НалоговыйУчет");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "МетодыРаспределения.СчетЗатратБУ", "МетодыРаспределения.СчетЗатратНУ");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "СчетЗакрытияБУ", "СчетЗакрытияНУ");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "СубконтоБУ1", "СубконтоНУ1");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "СубконтоБУ2", "СубконтоНУ2");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "СубконтоБУ3", "СубконтоНУ3");	
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПолуфабрикатыСобственногоПроизводства_", "ПолуфабрикатыСобственногоПроизводства");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВспомогательныеПроизводства_", "ВспомогательныеПроизводства");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "НакладныеРасходы_", "НакладныеРасходы");
		Запрос.УстановитьПараметр("СчетЗатрат", ПланыСчетов.Налоговый.НакладныеРасходы);
		Запрос.УстановитьПараметр("ПустойСчет", ПланыСчетов.Налоговый.ПустаяСсылка());
	Иначе
		Запрос.УстановитьПараметр("СчетЗатрат", ПланыСчетов.Типовой.НакладныеРасходы);
		Запрос.УстановитьПараметр("ПустойСчет", ПланыСчетов.Типовой.ПустаяСсылка());
	КонецЕсли;
	
	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Подразделения);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.СтатьиЗатрат);
	Запрос.УстановитьПараметр("ВидыСубконто", ВидыСубконто);
	
	СчетаОбщихЗатрат = Новый Массив;
	СчетаОбщихЗатрат.Добавить(ПС.НакладныеРасходы);
	Запрос.УстановитьПараметр("СчетаОбщихЗатрат", СчетаОбщихЗатрат);
	
	Результат = Запрос.Выполнить();
	ПостроительЗапроса = Новый ПостроительЗапроса;
	ПостроительЗапроса.ИсточникДанных = Новый ОписаниеИсточникаДанных(Результат);
	
	ЭлементОтбора = ПостроительЗапроса.Отбор.Добавить("ГП");
	ЭлементОтбора.ВидСравнения 	= ВидСравнения.НеРавно;
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.Значение = "NULL";
	ПостроительЗапроса.Выполнить();
	ТаблицаПроизводства = ПостроительЗапроса.Результат.Выгрузить();
	ТаблицаПроизводства.Колонки.Удалить("Источник");
	
	ПостроительЗапроса.Отбор.Сбросить();
	ЭлементОтбора = ПостроительЗапроса.Отбор.Добавить("ГП");
	ЭлементОтбора.Установить("NULL");
	ПостроительЗапроса.Выполнить();
	Выборка = ПостроительЗапроса.Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если Выборка.Источник = 1 Тогда // прямые затраты
			Если ТаблицаНеЗакрытыхПодразделений.НайтиСтроки(Новый Структура("Подразделение, СчетЗатрат", Выборка.Подразделение, Выборка.СчетЗатрат)).Количество() <> 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ТекстСообщения = СтрШаблон(НСтр("ru = 'По результатам анализа производственных затрат:
			|Нет базы распределения на себестоимость продукции (услуг) прямых расходов, учитываемых следующим образом:
			|Счет учета				: %1.
			|Подразделение			: %2.
			|Номенклатурная группа	: %3.
			|База распределения		: плановая себестоимость продукции.
			|Проверьте наличие данных о выпуске продукции.'", ОбщегоНазначения.КодОсновногоЯзыка()),
			Выборка.СчетЗатрат,
			Выборка.Подразделение,
			Выборка.НоменклатурнаяГруппа);
			
			ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации(ТекстСообщения, , , Реквизиты.Объект, РегОперация, Ложь);
			
			Строка = ТаблицаНеЗакрытыхПодразделений.Добавить();
			Строка.Подразделение 	= Выборка.Подразделение;
			Строка.СчетЗатрат 		= Выборка.СчетЗатрат;
			
		ИначеЕсли Выборка.Источник = 2 Тогда // общие затраты
			////
			Если Выборка.СчетЗатратДляПроверки <> Null Тогда 
				// если указан непроизводственный счет закрыти налкданых расходов
				// распределение не производится. Проверка не требуется
				Если ЗначениеЗаполнено(Выборка.СчетЗатратДляПроверки) И (Не Выборка.ПризнакПроизводсвенногоСчета) Тогда 
					Продолжить;
				КонецЕсли;
				
				// если указан производственный счет закрытия, но его аналитика - подразделение и НГ - заполнены,
				// то распределение тоже не производится.
				// проверять наличие базы  ОПР не требуется
				НомерСубконтоПодразделения = 0;
				НомерСубконтоНоменклатурнойГруппы = 0;
				Для НомерСубконто = 1 По 3 Цикл
					Если НЕ ЗначениеЗаполнено(Выборка["СубконтоЗакрытия" + НомерСубконто]) Тогда
						Продолжить;
					КонецЕсли;
					Если ТипЗнч(Выборка["СубконтоЗакрытия" + НомерСубконто]) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
						НомерСубконтоПодразделения = НомерСубконто;
					ИначеЕсли ТипЗнч(Выборка["СубконтоЗакрытия" + НомерСубконто]) = Тип("СправочникСсылка.НоменклатурныеГруппы") Тогда
						НомерСубконтоНоменклатурнойГруппы = НомерСубконто;
					КонецЕсли;
				КонецЦикла;
				
				Если НомерСубконтоПодразделения <> 0 И НомерСубконтоНоменклатурнойГруппы <> 0 Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			////
			Если ТаблицаНеЗакрытыхПодразделений.НайтиСтроки(Новый Структура("Подразделение, СчетЗатрат", Выборка.Подразделение, Выборка.СчетЗатрат)).Количество() <> 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ТекстСообщения = СтрШаблон(НСтр("ru = 'По результатам анализа производственных затрат:
			|Нет базы распределения на себестоимость продукции (услуг) косвенных расходов, учитываемых следующим образом:
			|Счет учета			: %1.
			|Подразделение		: %2.
			|База распределения : %3.
			|Проверьте наличие данных о выпуске продукции.'", ОбщегоНазначения.КодОсновногоЯзыка()),
			Выборка.СчетЗатрат,
			Выборка.Подразделение,
			?(Выборка.БазаРаспределения = Ложь, НСтр("ru = 'плановая себестоимость продукции'", ОбщегоНазначения.КодОсновногоЯзыка()), Выборка.БазаРаспределения));
			
			ЭтоСообщениеОшибка = Ложь;
			
			Если СтруктураДопПараметров.Учет = "НУ" Тогда
				Если Выборка.СчетЗатрат = ПланыСчетов.Налоговый.НакладныеРасходы Тогда 
					ЭтоСообщениеОшибка = Ложь;
				Иначе 
					ЭтоСообщениеОшибка = Истина;
				КонецЕсли;
			Иначе
				Если Выборка.СчетЗатрат = ПланыСчетов.Типовой.НакладныеРасходы Тогда 
					ЭтоСообщениеОшибка = Ложь;
				Иначе
					ЭтоСообщениеОшибка = Истина;
				КонецЕсли;
			КонецЕсли;
			
			ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации(ТекстСообщения, , , Реквизиты.Объект, РегОперация, ЭтоСообщениеОшибка);
			
			Строка = ТаблицаНеЗакрытыхПодразделений.Добавить();
			Строка.Подразделение = Выборка.Подразделение;
			Строка.СчетЗатрат = Выборка.СчетЗатрат;
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураДопПараметров.Вставить("ТаблицаНеЗакрытыхПодразделений",ТаблицаНеЗакрытыхПодразделений);
	
	Возврат ТаблицаПроизводства
	
КонецФункции

Функция ПолучитьПорядокПеределов(Реквизиты)
	
	СтруктураДопПараметров =  Реквизиты.ДопПараметры;

	ТаблицаПроизводства = АнализДанныхПроизводства(Реквизиты);
	
	ТаблицаПроизводства.Колонки.Добавить("НомерПередела", ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(12,0));
	
	// Для ускорения выгрузим колонку продукция в ТабСписПрод,
	ТабСписПрод = ТаблицаПроизводства.Скопировать();
	ТабСписПрод.Свернуть("ГП");
	
	ТаблицаПроизводства.Сортировать("ПодразделениеПредставление, НоменклатурнаяГруппаПредставление, НоменклатураЗатратПредставление");

	Индекс = 0;
	МаксИндекс = ТаблицаПроизводства.Количество() - 1;
	ТекПередел = 1;
	ПараметрыПоиска = Новый Структура;
 	ПроставленПередел = Истина;
	
	Пока ПроставленПередел Цикл
		
		ПроставленПередел = Ложь;
	
		Пока Индекс <= МаксИндекс Цикл
			ТекСтрока = ТаблицаПроизводства[Индекс];
			
			Если ТабСписПрод.Найти( ТекСтрока.НоменклатураЗатрат, "ГП") = Неопределено Тогда
				ТекСтрока.НомерПередела = ТекПередел;
				ПроставленПередел = Истина;
				Индекс = Индекс + 1;
				Пока Индекс <= МаксИндекс Цикл
					Стр = ТаблицаПроизводства[Индекс];
					Если Стр.НоменклатураЗатрат = ТекСтрока.НоменклатураЗатрат Тогда
						Стр.НомерПередела = ТекПередел;
					Иначе
						Прервать;
					КонецЕсли;
					Индекс = Индекс + 1;
				КонецЦикла;
								
			Иначе
				ПараметрыПоиска.Очистить();
				ПараметрыПоиска.Вставить( "ГП", ТекСтрока.НоменклатураЗатрат);
				НаборСтрок = ТаблицаПроизводства.НайтиСтроки(ПараметрыПоиска);
				Если НаборСтрок.Количество() = 0 Тогда
					ТекСтрока.НомерПередела = ТекПередел;
					ПроставленПередел = Истина;
				Иначе
					СледПередел = Ложь;
					Для Каждого СтрокаПрод Из НаборСтрок Цикл
						Если СтрокаПрод.НомерПередела = 0 ИЛИ СтрокаПрод.НомерПередела = ТекПередел Тогда
							СледПередел = Истина;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					Если Не СледПередел Тогда
						ТекСтрока.НомерПередела = ТекПередел;
						ПроставленПередел = Истина;
					КонецЕсли;
				КонецЕсли;
				Индекс = Индекс + 1;
			КонецЕсли;
		КонецЦикла;
		
		ТаблицаПроизводства.Сортировать("НомерПередела Убыв, ПодразделениеПредставление, НоменклатурнаяГруппаПредставление, НоменклатураЗатратПредставление");
		ТекСтрока = ТаблицаПроизводства.Найти(0, "НомерПередела");
		
		Если ТекСтрока = Неопределено Тогда
			Прервать;
		Иначе
			Индекс = ТаблицаПроизводства.Индекс(ТекСтрока);
			
		КонецЕсли;
		
		ТекПередел = ТекПередел + 1;
		
	КонецЦикла;
	
	ТаблицаПроизводства.Сортировать("НомерПередела Убыв, ПодразделениеПредставление, НоменклатурнаяГруппаПредставление, НоменклатураЗатратПредставление");
	
	// Продукция выпущенная на переделе.
	ТабТемп = ТаблицаПроизводства.Скопировать();
	
	// Рассчитаем максимальный уровень передела для продукции
	ТабТемп.Свернуть("Подразделение, НоменклатурнаяГруппа, ГП, НомерПередела");
	ТабПродукция = ТабТемп.Скопировать();
	ТабПродукция.Свернуть("Подразделение, НоменклатурнаяГруппа, ГП");
	ТабПродукция.Колонки.Добавить("НомерПередела", ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(12, 0));
	СтруктПоиска = Новый Структура;
	Для Каждого СтрокаТаб Из ТабПродукция Цикл
		СтруктПоиска.Вставить("Подразделение", 			СтрокаТаб.Подразделение);
		СтруктПоиска.Вставить("НоменклатурнаяГруппа", 	СтрокаТаб.НоменклатурнаяГруппа);
		НаборСтрок = ТабТемп.НайтиСтроки(СтруктПоиска);
		МаксНомерПередела = 0;
		Для Каждого Строка Из НаборСтрок Цикл
			МаксНомерПередела = Макс(МаксНомерПередела, Строка.НомерПередела);
		КонецЦикла;
		СтрокаТаб.НомерПередела = МаксНомерПередела;
	КонецЦикла;
	ТабТемп = 0;
	
	ТабПродукция.Свернуть("Подразделение, НоменклатурнаяГруппа, НомерПередела");
	ТабПродукция.Сортировать("НомерПередела Возр");

	ТаблицаВстречногоВыпуска = ПолучитьТаблицуВстречногоВыпуска(Реквизиты);
	СтруктураДопПараметров.Вставить("ТаблицаВстречногоВыпуска", ТаблицаВстречногоВыпуска);
	
	// Если в порядке переделов всего один передел, то сообщение не выдыается
	ПорядокПодразделенийСообщался = СтруктураДопПараметров.ПорядокПодразделенийСообщался ИЛИ (ТабПродукция.Количество() = 1);
	
	Если Не ПорядокПодразделенийСообщался Тогда

		ТекстСообщения = "-------------------------------------------------------------------------------------" + Символы.ПС + НСтр("ru = 'Порядок переделов'", ОбщегоНазначения.КодОсновногоЯзыка());
		
		НомерПередела = 1;
		Для Каждого Передел Из ТабПродукция Цикл
			ТекстСообщения = ТекстСообщения + Символы.ПС + НомерПередела + " - " + Передел.Подразделение + " - " + Передел.НоменклатурнаяГруппа;
			НомерПередела = НомерПередела + 1;
		КонецЦикла;
		
		ТекстСообщения = ТекстСообщения + Символы.ПС + "-------------------------------------------------------------------------------------";
		
		Если СтруктураДопПараметров.Свойство("Учет") И СтруктураДопПараметров.Учет = "НУ" Тогда
			ВидРегламентнойОперации = Перечисления.ВидыРегламентныхОпераций.РасчетСтоимостиПродукцииНУ;
		Иначе
			ВидРегламентнойОперации = Перечисления.ВидыРегламентныхОпераций.РасчетСтоимостиПродукцииБУ;
		КонецЕсли;
		
		ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации(ТекстСообщения, , , Реквизиты.Объект, ВидРегламентнойОперации, Ложь);
		
	КонецЕсли;
	
	СтруктураДопПараметров.ПорядокПодразделенийСообщался = Истина;
	
	Возврат ТабПродукция;
		
КонецФункции

Процедура КорректирровкаСтоимостиСписанияВыпущеннойПродукции(Реквизиты, Движения, Отказ)
	
	СтруктураДопПараметров = Реквизиты.ДопПараметры;
	// Формирование корректировки стоимости списаний, исходя из среденвзвешенной стоимости номенклатуры
	СтруктураДопПараметров.Вставить("Организация",    Реквизиты.Организация);
	СтруктураДопПараметров.Вставить("Период",         Реквизиты.Период);
	СтруктураДопПараметров.Вставить("Регистратор",    Реквизиты.Регистратор);
	
	// После закрытия общепроизводственных расходов необходимо,
	// чтобы не корректировалось списание номенклатуры в дебет
	// счета накладных расходов.
	Если СтруктураДопПараметров.ВыполненоРаспределениеОПР Тогда
		
		// Массив счетов по которым не надо делать корректировку операций списания
		МассивСчетов = Новый Массив;
		Если СтруктураДопПараметров.Учет = "БУ"  Тогда
			МассивСчетов.Добавить(ПланыСчетов.Типовой.ОсновноеПроизводство);
			МассивСчетов.Добавить(ПланыСчетов.Типовой.ПолуфабрикатыСобственногоПроизводства);
			МассивСчетов.Добавить(ПланыСчетов.Типовой.ВспомогательныеПроизводства);
			МассивСчетов.Добавить(ПланыСчетов.Типовой.НакладныеРасходы);
		Иначе
			МассивСчетов.Добавить(ПланыСчетов.Налоговый.ОсновноеПроизводство);
			МассивСчетов.Добавить(ПланыСчетов.Налоговый.ПолуфабрикатыСобственногоПроизводства);
			МассивСчетов.Добавить(ПланыСчетов.Налоговый.ВспомогательныеПроизводства);
			МассивСчетов.Добавить(ПланыСчетов.Налоговый.НакладныеРасходы);			
		КонецЕсли;                                                        		
		СтруктураДопПараметров.Вставить("СписокНеКорректируемыхСчетов", МассивСчетов);		
	Иначе
		СтруктураДопПараметров.Вставить("СписокНеКорректируемыхСчетов", Неопределено);
	КонецЕсли;
	
	РасчетСебестоимости.КорректировкаСтоимости(СтруктураДопПараметров, Движения, Отказ);

	Если СтруктураДопПараметров.Учет = "НУ" Тогда
		Движения.Налоговый.Записать(Ложь);
	Иначе
		Движения.Типовой.Записать(Ложь);
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьЗапросПоПрямымЗатратам(Реквизиты, ПеределПодразделение, ПеределНоменклатурнаяГруппа, РезультатЗапроса)
	
	СтруктураДопПараметров = Реквизиты.ДопПараметры;
	
	УсловияВстречногоВыпуска1 = "";
	УсловияВстречногоВыпуска2 = "";
	РасчетПрямыхЗатратНомер = СтруктураДопПараметров.РасчетПрямыхЗатратНомер;
	Если Лев(РасчетПрямыхЗатратНомер, 1) = "3" Тогда
		
		ВстречныйВыпуск = СтруктураДопПараметров.ТаблицаВстречногоВыпуска.НайтиСтроки(Новый Структура("Подразделение, НоменклатурнаяГруппа", ПеределПодразделение, ПеределНоменклатурнаяГруппа));
		Если ВстречныйВыпуск.Количество() = 0  Тогда
			РасчетПрямыхЗатратНомер = "" 
		КонецЕсли;
		
	ИначеЕсли РасчетПрямыхЗатратНомер <> "" Тогда
		
		ТаблицаВстречногоВыпускаДляОтбора = СтруктураДопПараметров.ТаблицаВстречногоВыпуска.Скопировать();
		ТаблицаВстречногоВыпускаДляОтбора.Свернуть("Продукция, Подразделение, НоменклатурнаяГруппа,  ПодразделениеПересчета, НоменклатурнаяГруппаПересчета", );		
		ВстречныйВыпуск = ТаблицаВстречногоВыпускаДляОтбора.НайтиСтроки(Новый Структура("Подразделение, НоменклатурнаяГруппа", ПеределПодразделение, ПеределНоменклатурнаяГруппа));
		Если ВстречныйВыпуск.Количество() > 0  Тогда
			
			ПродукцияВстречногоВыпуска    = Новый Массив;
			ПодразделениеПересчета        = Новый Массив;
			НоменклатурнаяГруппаПересчета = Новый Массив;
									
			Для Каждого СтрокаВстречногоВыпуска Из ВстречныйВыпуск Цикл
				ПродукцияВстречногоВыпуска.Добавить(СтрокаВстречногоВыпуска.Продукция);
				ПодразделениеПересчета.Добавить(СтрокаВстречногоВыпуска.ПодразделениеПересчета);
				НоменклатурнаяГруппаПересчета.Добавить(СтрокаВстречногоВыпуска.НоменклатурнаяГруппаПересчета);				
			КонецЦикла;
			Если РасчетПрямыхЗатратНомер = "1" Тогда
				УсловияВстречногоВыпуска1 = " И Не (КорСубконто1 В (&ПодразделениеПересчета) И КорСубконто2 В (&НоменклатурнаяГруппаПересчета))";
				УсловияВстречногоВыпуска2 = " И Не (Подразделение В (&ПодразделениеПересчета) И НоменклатурнаяГруппа В (&НоменклатурнаяГруппаПересчета))";
			Иначе
				УсловияВстречногоВыпуска1 = " И КорСубконто1 В (&ПодразделениеПересчета) И КорСубконто2 В (&НоменклатурнаяГруппаПересчета)";
				УсловияВстречногоВыпуска2 = " И Подразделение В (&ПодразделениеПересчета) И НоменклатурнаяГруппа В (&НоменклатурнаяГруппаПересчета)";
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли; 
			
	ТекстЗапроса = "ВЫБРАТЬ
		|	ВыпускПродукцииУслуг.СчетЗатрат 			КАК СчетЗатрат,
		|	ВыпускПродукцииУслуг.Подразделение 			КАК Подразделение,
		|	ВыпускПродукцииУслуг.НоменклатурнаяГруппа 	КАК НоменклатурнаяГруппа,"
		+ ?(СтруктураДопПараметров.Учет = "БУ", """""", "
		| ТиповойОстатки.ВидУчета ") + " Как ВидУчетаНУ,
		|	ВыпускПродукцииУслуг.Продукция,
		|	ВыпускПродукцииУслуг.СчетСписания,
		|	ВыпускПродукцииУслуг.СубконтоСписания1,
		|	ВыпускПродукцииУслуг.СубконтоСписания2,
		|	ВыпускПродукцииУслуг.СубконтоСписания3,
		|	ВыпускПродукцииУслуг.СтруктурноеПодразделение КАК СтруктурноеПодразделение,";
		Если СтруктураДопПараметров.Учет = "НУ" Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|	СУММА(ЕСТЬNULL(ВыпускПродукцииУслугПоВидамУчета.ПлановаяСтоимостьОборот, 0)) КАК ПлановаяСтоимостьПоВидуУчета,
			|	Сумма(ЕСТЬNULL(ВыпускПродукцииУслугПоВидамУчета.КоличествоОборот,0)) КАК КоличествоПоВидуУчета,";
		КонецЕсли;	
		ТекстЗапроса = ТекстЗапроса + "			
		|	СУММА(ЕСТЬNULL(ВыпускПродукцииУслуг.ПлановаяСтоимостьОборот, 0)) КАК ПлановаяСтоимость,
		|	Сумма(ЕСТЬNULL(ВыпускПродукцииУслуг.КоличествоОборот,0)) КАК Количество,
		|	СУММА(ЕСТЬNULL(ВыпускПродукцииУслуг.ПлановаяСтоимостьОборот, 0)) КАК СписаноРасходов,
		|	СУММА(ЕСТЬNULL(ТиповойОстатки.СуммаКонечныйОстаток, 0)) 		 КАК ОстатокПрямыхРасходов, 
		|	СУММА(ЕСТЬNULL(ТиповойОстатки.СуммаОборотДт, 0)) 				 КАК ВсегоПрямыхРасходов,			
		|	СУММА(ЕСТЬNULL(ТиповойДвиженияССубконто.Сумма, 0)) 				 КАК СписаноВНЗП,		
		|	МАКСИМУМ(ЕСТЬNULL(ОстаткиНЗП.Сумма"+ ?(СтруктураДопПараметров.Учет = "БУ", "БУ", "НУ")+",0)) КАК СуммаНЗП
		|ИЗ
		|	РегистрНакопления.ВыпускПродукцииУслугБухгалтерскийУчет.Обороты(&НачГраница, &КонГраница, Месяц, 
		| Организация = &Организация И 
		| Подразделение = &Подразделение 
		|" + ?(ПеределНоменклатурнаяГруппа = "Все", "", " И  НоменклатурнаяГруппа = &НоменклатурнаяГруппа") + УсловияВстречногоВыпуска2 + "
		|) КАК ВыпускПродукцииУслуг";
		Если  СтруктураДопПараметров.Учет = "НУ" Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|ЛЕВОЕ СОЕДИНЕНИЕ 
			|	РегистрНакопления.ВыпускПродукцииУслугНалоговыйУчет.Обороты(&НачГраница, &КонГраница, Месяц,
			| Организация = &Организация И ВидУчета В Иерархии(&ВидУчета) И
			| Подразделение = &Подразделение  
			|" + ?(ПеределНоменклатурнаяГруппа = "Все", "", " И  НоменклатурнаяГруппа = &НоменклатурнаяГруппа") + УсловияВстречногоВыпуска2 + "
			|) КАК ВыпускПродукцииУслугПоВидамУчета
			|		ПО ВыпускПродукцииУслуг.СчетЗатрат = ВыпускПродукцииУслугПоВидамУчета.СчетЗатрат И ВыпускПродукцииУслуг.Подразделение = ВыпускПродукцииУслугПоВидамУчета.Подразделение И ВыпускПродукцииУслуг.НоменклатурнаяГруппа = ВыпускПродукцииУслугПоВидамУчета.НоменклатурнаяГруппа 
			|		И ВыпускПродукцииУслуг.Продукция = ВыпускПродукцииУслугПоВидамУчета.Продукция
			|		И ВыпускПродукцииУслуг.СубконтоСписания1 = ВыпускПродукцииУслугПоВидамУчета.СубконтоСписания1
			|		И ВыпускПродукцииУслуг.СубконтоСписания2 = ВыпускПродукцииУслугПоВидамУчета.СубконтоСписания2
			|		И ВыпускПродукцииУслуг.СубконтоСписания3 = ВыпускПродукцииУслугПоВидамУчета.СубконтоСписания3";
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + "
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ 
		|	РегистрБухгалтерии.Типовой.ОстаткиИОбороты(&НачГраница,&КонГраница,,, Счет В ИЕРАРХИИ (&СчетаЗатрат), &ВидыСубконто, 
		| Организация = &Организация		
		|И Субконто1 = &Подразделение
		|" + ?(ПеределНоменклатурнаяГруппа = "Все", "", " И  Субконто2 = &НоменклатурнаяГруппа") + "
		|) КАК ТиповойОстатки
		|		ПО ВыпускПродукцииУслуг.СчетЗатрат = ТиповойОстатки.Счет И ВыпускПродукцииУслуг.Подразделение = ТиповойОстатки.Субконто1 И ВыпускПродукцииУслуг.НоменклатурнаяГруппа = ТиповойОстатки.Субконто2
		|  	    И ВыпускПродукцииУслуг.СтруктурноеПодразделение = ТиповойОстатки.СтруктурноеПодразделение		
		|
		| 		
		|ЛЕВОЕ СОЕДИНЕНИЕ (	ВЫБРАТЬ
		|		ВнутреннийЗапросПоДвижениямНЗП.СчетКт,
		|		ВнутреннийЗапросПоДвижениямНЗП.СубконтоКт1,
		|		ВнутреннийЗапросПоДвижениямНЗП.СубконтоКт2,
		|		ВнутреннийЗапросПоДвижениямНЗП.СтруктурноеПодразделениеКт Как СтруктурноеПодразделение,
		|		Сумма(ВнутреннийЗапросПоДвижениямНЗП.Сумма) КАК Сумма
		|	ИЗ
		|		РегистрБухгалтерии.Типовой.ДвиженияССубконто(&НачГраница, &КонГраница,  СчетКт В ИЕРАРХИИ (&СчетаЗатрат)
		|		 И Организация = &Организация И СубконтоКт1 = &Подразделение
		|		" + ?(ПеределНоменклатурнаяГруппа = "Все", "", " И  СубконтоКт2 = &НоменклатурнаяГруппа") + "
		|		И Регистратор ССЫЛКА Документ.ДвижениеНЗП) КАК ВнутреннийЗапросПоДвижениямНЗП 
		|	СГРУППИРОВАТЬ ПО 
		|		ВнутреннийЗапросПоДвижениямНЗП.СчетКт,
		|		ВнутреннийЗапросПоДвижениямНЗП.СубконтоКт1,
		|		ВнутреннийЗапросПоДвижениямНЗП.СубконтоКт2 ,
		|		ВнутреннийЗапросПоДвижениямНЗП.СтруктурноеПодразделениеКт
		|	) КАК ТиповойДвиженияССубконто
		|		ПО ВыпускПродукцииУслуг.СчетЗатрат = ТиповойДвиженияССубконто.СчетКт И ВыпускПродукцииУслуг.Подразделение = ТиповойДвиженияССубконто.СубконтоКт1 И ВыпускПродукцииУслуг.НоменклатурнаяГруппа = ТиповойДвиженияССубконто.СубконтоКт2
		|		И ВыпускПродукцииУслуг.СтруктурноеПодразделение = ТиповойДвиженияССубконто.СтруктурноеПодразделение  ";
		ТекстЗапроса = ТекстЗапроса + " 
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ИнвентаризацияНЗП.СчетЗатратБУ КАК СчетЗатрат,
		|			ИнвентаризацияНЗП.ПодразделениеОрганизации КАК Подразделение,
		|			ИнвентаризацияНЗПСостав.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
		|			ИнвентаризацияНЗП.СтруктурноеПодразделение КАК СтруктурноеПодразделение,";
		
		Если  СтруктураДопПараметров.Учет = "БУ"  Тогда
			ТекстЗапроса = ТекстЗапроса + "СУММА(ИнвентаризацияНЗПСостав.СуммаБУ) КАК СуммаБУ";
		Иначе
			ТекстЗапроса = ТекстЗапроса + "СУММА(ИнвентаризацияНЗПСостав.СуммаНУ) КАК СуммаНУ";			
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + "
		|		ИЗ
		|			Документ.ИнвентаризацияНЗП.Состав КАК ИнвентаризацияНЗПСостав
		|				ЛЕВОЕ СОЕДИНЕНИЕ Документ.ИнвентаризацияНЗП КАК ИнвентаризацияНЗП
		|				ПО ИнвентаризацияНЗПСостав.Ссылка = ИнвентаризацияНЗП.Ссылка
		|		
		|		ГДЕ 
		|			ИнвентаризацияНЗП.Дата МЕЖДУ &НачДата И &КонДата И
		|			ИнвентаризацияНЗП.Организация = &Организация И
		|			(НЕ(ИнвентаризацияНЗП.ПометкаУдаления))
		|		СГРУППИРОВАТЬ ПО
		|			ИнвентаризацияНЗП.ПодразделениеОрганизации,
		|			ИнвентаризацияНЗПСостав.НоменклатурнаяГруппа,
		|			ИнвентаризацияНЗП.СтруктурноеПодразделение,
		|			ИнвентаризацияНЗП.СчетЗатратБУ) КАК ОстаткиНЗП
		|		ПО ТиповойОстатки.Субконто1 = ОстаткиНЗП.Подразделение И ТиповойОстатки.Субконто2 = ОстаткиНЗП.НоменклатурнаяГруппа И ТиповойОстатки.Счет = ОстаткиНЗП.СчетЗатрат
		|		И ТиповойОстатки.СтруктурноеПодразделение = ОстаткиНЗП.СтруктурноеПодразделение"; 		
		Если  СтруктураДопПараметров.Учет = "НУ"  Тогда
			ТекстЗапроса = ТекстЗапроса + "
			| ГДЕ НЕ НалоговыйОстатки.ВидУчета Есть Null";  
		КонецЕсли; 		
		ТекстЗапроса = ТекстЗапроса + "
		|СГРУППИРОВАТЬ ПО
		|	ВыпускПродукцииУслуг.СчетЗатрат,
		|	ВыпускПродукцииУслуг.Подразделение,
		|	ВыпускПродукцииУслуг.НоменклатурнаяГруппа,
		|	ВыпускПродукцииУслуг.Продукция,
		|	ВыпускПродукцииУслуг.СчетСписания,
		|	ВыпускПродукцииУслуг.СубконтоСписания1,
		|	ВыпускПродукцииУслуг.СубконтоСписания2,
		|	ВыпускПродукцииУслуг.СубконтоСписания3,
		|	ВыпускПродукцииУслуг.СтруктурноеПодразделение,"
		+ ?( СтруктураДопПараметров.Учет = "БУ", """""", "
		| НалоговыйОстатки.ВидУчета ")  + ",
		|	ОстаткиНЗП.Сумма"+ ?( СтруктураДопПараметров.Учет = "БУ","БУ", "НУ")+",
		|	ЕСТЬNULL(ТиповойОстатки.СуммаНачальныйОстаток, 0)
		|
		|УПОРЯДОЧИТЬ ПО ВыпускПродукцииУслуг.Продукция, ВыпускПродукцииУслуг.СчетСписания, ВыпускПродукцииУслуг.СубконтоСписания1, ВыпускПродукцииУслуг.СубконтоСписания2, ВыпускПродукцииУслуг.СубконтоСписания3
		|ИТОГИ СУММА(ПлановаяСтоимость), МАКСИМУМ(ОстатокПрямыхРасходов), МАКСИМУМ(СписаноВНЗП), СУММА(ВсегоПрямыхРасходов), СУММА(СписаноРасходов),Сумма(Количество), МАКСИМУМ(СуммаНЗП) ";
		
		ТекстЗапроса = ТекстЗапроса + "
		|ПО
		|   СтруктурноеПодразделение,
		|	СчетЗатрат,
		|	Подразделение,
		|	НоменклатурнаяГруппа";		
		
	Если  СтруктураДопПараметров.Учет = "НУ" Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"Субконто1 = &Подразделение","ВидУчета В Иерархии(&ВидУчета) И Субконто1 = &Подразделение"); 		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"СубконтоКт1 = &Подразделение","ВидУчета В Иерархии(&ВидУчета) И СубконтоКт1 = &Подразделение"); 		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"ИнвентаризацияНЗП.Организация = &Организация","ИнвентаризацияНЗП.ВидУчетаНУ В Иерархии(&ВидУчета) И ИнвентаризацияНЗП.Организация = &Организация "); 				
	КонецЕсли; 
		
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("НачДата",     Реквизиты.НачалоПериода);
	Запрос.УстановитьПараметр("КонДата",     Реквизиты.КонецПериода);

	Запрос.УстановитьПараметр("НачГраница",            		 	Реквизиты.НачГраница);
	Запрос.УстановитьПараметр("КонГраница",            			Реквизиты.КонГраница);
	Запрос.УстановитьПараметр("Организация",           			Реквизиты.Организация);
	Запрос.УстановитьПараметр("Подразделение",         			ПеределПодразделение);
	Запрос.УстановитьПараметр("НоменклатурнаяГруппа",  			ПеределНоменклатурнаяГруппа);
	Запрос.УстановитьПараметр("НоменклатурнаяГруппаПересчета",  НоменклатурнаяГруппаПересчета);
	Запрос.УстановитьПараметр("ПодразделениеПересчета",      	ПодразделениеПересчета);
	Запрос.УстановитьПараметр("ПродукцияВстречногоВыпуска",  	ПродукцияВстречногоВыпуска);
		
	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Подразделения);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.НоменклатурныеГруппы);
	Запрос.УстановитьПараметр("ВидыСубконто",  ВидыСубконто);

	Если СтруктураДопПараметров.Учет= "БУ" Тогда
		СчетаЗатрат = Новый Массив;
		СчетаЗатрат.Добавить(ПланыСчетов.Типовой.ОсновноеПроизводство_);
		СчетаЗатрат.Добавить(ПланыСчетов.Типовой.ПолуфабрикатыСобственногоПроизводства);
		СчетаЗатрат.Добавить(ПланыСчетов.Типовой.ВспомогательныеПроизводства);
		Запрос.УстановитьПараметр("СчетаЗатрат",        СчетаЗатрат);
	Иначе
		
		СчетаЗатрат = Новый Массив;
		СчетаЗатрат.Добавить(ПланыСчетов.Налоговый.ОсновноеПроизводство_);
		СчетаЗатрат.Добавить(ПланыСчетов.Налоговый.ПолуфабрикатыСобственногоПроизводства);
		СчетаЗатрат.Добавить(ПланыСчетов.Налоговый.ВспомогательныеПроизводства);
		Запрос.УстановитьПараметр("СчетаЗатрат",        СчетаЗатрат);
		Запрос.УстановитьПараметр("ВидУчета",  			СтруктураДопПараметров.ВидУчетаНУ);
	    		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Типовой", "Налоговый");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "БухгалтерскийУчет", "НалоговыйУчет");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИнвентаризацияНЗП.СчетЗатратБУ", "ИнвентаризацияНЗП.СчетЗатратНУ");				
	КонецЕсли; 
                                                                                                                            	 	
	РезультатЗапроса = Запрос.Выполнить();
	
 КонецПроцедуры // СформироватьЗапросПоПрямымЗатратам()

Процедура ДвиженияПоПрямымЗатратам(Реквизиты, Движения, ПеределПодразделение = "", ПеределНоменклатурнаяГруппа = "")
	
	// Формирование запроса по прямым расходам.
	РезультатЗапроса = Неопределено;
	
	СформироватьЗапросПоПрямымЗатратам(Реквизиты, ПеределПодразделение, ПеределНоменклатурнаяГруппа, РезультатЗапроса);
	
	СтруктураДопПараметров = Реквизиты.ДопПараметры;
	
	ЗаписьРасчетаСебестоимости = СтруктураДопПараметров.ЗаписьРасчетаСебестоимости;
	
	Если СтруктураДопПараметров.Учет = "БУ" Тогда
		РегОперация = Перечисления.ВидыРегламентныхОпераций.РасчетСтоимостиПродукцииБУ;
	Иначе
		РегОперация = Перечисления.ВидыРегламентныхОпераций.РасчетСтоимостиПродукцииНУ;
	КонецЕсли;
	
	// Выбираются прямые расходы в разрезе структурных подразделений
	ОбходПоСтруктурнымПодразделениям = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ОбходПоСтруктурнымПодразделениям.Следующий() Цикл   
		// Выбираются прямые расходы в разрезе счета учета, подразделения, номенклатурной группы.
		ОбходПоСчетамЗатрат = ОбходПоСтруктурнымПодразделениям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ОбходПоСчетамЗатрат.Следующий() Цикл
			ОбходПоПодразделениям = ОбходПоСчетамЗатрат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ОбходПоПодразделениям.Следующий() Цикл
				ОбходПоНомГруппам = ОбходПоПодразделениям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ОбходПоНомГруппам.Следующий() Цикл
					
					// Прямые расходы за минусом НЗП подлежат распределению
					// на стоимость готовой продукции, услуг.
					// Т.к. при оприходовании на склад готовой продукции часть прямых
					// расходов (в размере плановой стоимости этой продукции) была
					// списана, то необходимо к общей сумме прямых расходов прибавить
					// списанную ранее сумму прямых расходов.
					
					СписаноРасходов = ОбходПоНомГруппам.СписаноРасходов;				
					
					ВсегоПрямыхРасходов 		= ОбходПоНомГруппам.ОстатокПрямыхРасходов + ОбходПоНомГруппам.СписаноВНЗП  + ?(СтруктураДопПараметров.ВыполненоРаспределениеОПР, 0, СписаноРасходов);
					
					СуммаНЗП = ОбходПоНомГруппам.СуммаНЗП;
					
					СуммаПрямыхРасходовНаВыпуск = ВсегоПрямыхРасходов - СуммаНЗП;
					
					// В качестве базы распределения прямых расходов на выпущенную продукцию
					// используется плановая себестоимость.
					ВсегоБазаРаспределения = ОбходПоНомГруппам.ПлановаяСтоимость;
					РаспределеноБазыРаспределения = 0;
					СписаноПрямыхРасходов = 0;
					
					ПоследнийПередел = (Лев(СтруктураДопПараметров.РасчетПрямыхЗатратНомер, 1) = "1" Или  СтруктураДопПараметров.РасчетПрямыхЗатратНомер = "");
					
					ВидУчета = ?(СтруктураДопПараметров.Учет= "НУ", СтруктураДопПараметров.ВидУчетаНУ, Справочники.ВидыУчетаНУ.ПустаяСсылка());
					
					Если Не СтруктураДопПараметров.ДвижениеЗатратПоГПСписаннойВПроизводство Тогда
						Если ПоследнийПередел И СтруктураДопПараметров.ВыполненоРаспределениеОПР = Ложь И НЕ СуммаНЗП = 0 Тогда
							
							СтрокаЗаписиРасчетаСебестоимости = ЗаписьРасчетаСебестоимости.Добавить();
							СтрокаЗаписиРасчетаСебестоимости.СчетУчета = ОбходПоСчетамЗатрат.СчетЗатрат;
							СтрокаЗаписиРасчетаСебестоимости.Подразделение 		  = ОбходПоПодразделениям.Подразделение;
							СтрокаЗаписиРасчетаСебестоимости.НоменклатурнаяГруппа = ОбходПоНомГруппам.НоменклатурнаяГруппа;
							СтрокаЗаписиРасчетаСебестоимости.ВидОперации 		  = Перечисления.ВидыОперацийРасчетаСебестоимости.РасходыНаПроизводствоПродукцииИУслуг;
							СтрокаЗаписиРасчетаСебестоимости.ВидУчета 			  = ВидУчета;
							СтрокаЗаписиРасчетаСебестоимости.СуммаНЗП 			  = СуммаНЗП;
							СтрокаЗаписиРасчетаСебестоимости.СтруктурноеПодразделение = ОбходПоСчетамЗатрат.СтруктурноеПодразделение;
							СтрокаЗаписиРасчетаСебестоимости.Сумма    			  = 0;
							СтрокаЗаписиРасчетаСебестоимости.СуммаПлан			  = 0;
							
						КонецЕсли;
					КонецЕсли;
					
					// Обход по операциям выпуска продукции (услуг). Обходя все операции выпуска
					// производим распределение по ним прямых расходов.
					ТаблицаКорректируемыхНаправлений = Новый ТаблицаЗначений;
					ТаблицаКорректируемыхНаправлений.Колонки.Добавить("Продукция");
					ТаблицаКорректируемыхНаправлений.Колонки.Добавить("Подразделение");
					ТаблицаКорректируемыхНаправлений.Колонки.Добавить("НоменклатурнаяГруппа");
					ТаблицаКорректируемыхНаправлений.Колонки.Добавить("СубконтоСписания1");
					ТаблицаКорректируемыхНаправлений.Колонки.Добавить("СубконтоСписания2");
					ТаблицаКорректируемыхНаправлений.Колонки.Добавить("СубконтоСписания3");
					ТаблицаКорректируемыхНаправлений.Колонки.Добавить("СчетСписания");
					ТаблицаКорректируемыхНаправлений.Колонки.Добавить("СчетЗатрат");
					ТаблицаКорректируемыхНаправлений.Колонки.Добавить("СуммаКорректировкиСписания");
					ТаблицаКорректируемыхНаправлений.Колонки.Добавить("СписаноРасходов");
					ТаблицаКорректируемыхНаправлений.Колонки.Добавить("ПлановаяСтоимость");
					ТаблицаКорректируемыхНаправлений.Колонки.Добавить("ПлановаяСтоимостьВПроводках");
					ТаблицаКорректируемыхНаправлений.Колонки.Добавить("СуммаНЗП");
					ТаблицаКорректируемыхНаправлений.Колонки.Добавить("ВидУчета");
					ТаблицаКорректируемыхНаправлений.Колонки.Добавить("СтруктурноеПодразделение");
					
					СуммаНеКорректируемыхНаправлений = 0;
					
					Обход = ОбходПоНомГруппам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					Пока Обход.Следующий() Цикл
						
						ВидУчета = ?(СтруктураДопПараметров.Учет= "НУ", Обход.ВидУчетаНУ, Справочники.ВидыУчетаНУ.ПустаяСсылка());
						
						РаспределеноБазыРаспределения = РаспределеноБазыРаспределения + Обход.ПлановаяСтоимость;
						
						Если ВсегоБазаРаспределения = 0 Тогда
							СуммаСписания = 0;
						Иначе
							СуммаСписания = Окр(СуммаПрямыхРасходовНаВыпуск/ВсегоБазаРаспределения*РаспределеноБазыРаспределения, 2) - СписаноПрямыхРасходов;
						КонецЕсли;
						СписаноПрямыхРасходов = СписаноПрямыхРасходов + СуммаСписания;
						
						Если СтруктураДопПараметров.ВыполненоРаспределениеОПР Тогда
							СуммаКорректировкиСписания = СуммаСписания;						
						Иначе
							СуммаКорректировкиСписания = СуммаСписания - Обход.СписаноРасходов;
						КонецЕсли; 
						
						Если Лев(СтруктураДопПараметров.РасчетПрямыхЗатратНомер, 1) = "3" И СтруктураДопПараметров.РасчетПрямыхЗатратНомер <> "3По средней" Тогда
							
							ВстречныйВыпуск = СтруктураДопПараметров.ТаблицаВстречногоВыпуска.НайтиСтроки(Новый Структура("Подразделение, НоменклатурнаяГруппа, Продукция, СубконтоКт2, СубконтоКт3", Обход.Подразделение, Обход.НоменклатурнаяГруппа, Обход.СубконтоСписания1, Обход.СубконтоСписания2, Обход.СубконтоСписания3));
							Если ВстречныйВыпуск.Количество() > 0 Тогда
								СуммаНеКорретируемыхНаправлений = СуммаНеКорректируемыхНаправлений + СуммаКорректировкиСписания;								
								Продолжить;								
							Иначе
								ВстречныйВыпуск = СтруктураДопПараметров.ТаблицаВстречногоВыпуска.НайтиСтроки(Новый Структура("Подразделение, НоменклатурнаяГруппа, ПодразделениеПересчета",Обход.Подразделение, Обход.НоменклатурнаяГруппа, Обход.СубконтоСписания1));
								Если ВстречныйВыпуск.Количество() > 0 Тогда
									СуммаНеКорректируемыхНаправлений = СуммаНеКорректируемыхНаправлений + СуммаКорректировкиСписания;									
									Продолжить;
								КонецЕсли;
							КонецЕсли;  							
						КонецЕсли;  						
						
						Если СтруктураДопПараметров.СписокНекорректируемойПродукции <> Неопределено Тогда
							Если СтруктураДопПараметров.СписокНекорректируемойПродукции.НайтиПоЗначению(Обход.Продукция) <> Неопределено ТОгда
								СуммаНеКорректируемыхНаправлений = СуммаНеКорректируемыхНаправлений + СуммаКорректировкиСписания;
								Продолжить;
							КонецЕсли;
						КонецЕсли;
						
						НоваяСтрока = ТаблицаКорректируемыхНаправлений.Добавить();
						НоваяСтрока.Продукция            = Обход.Продукция;
						НоваяСтрока.Подразделение        = Обход.Подразделение;
						НоваяСтрока.НоменклатурнаяГруппа = Обход.НоменклатурнаяГруппа;
						НоваяСтрока.СубконтоСписания1    = Обход.СубконтоСписания1;
						НоваяСтрока.СубконтоСписания2    = Обход.СубконтоСписания2;
						НоваяСтрока.СубконтоСписания3    = Обход.СубконтоСписания3;
						НоваяСтрока.СчетСписания         = Обход.СчетСписания;
						НоваяСтрока.СчетЗатрат           = Обход.СчетЗатрат;
						НоваяСтрока.СуммаКорректировкиСписания = СуммаКорректировкиСписания;
						НоваяСтрока.СписаноРасходов=?(СтруктураДопПараметров.ВыполненоРаспределениеОПР, 0, Обход.СписаноРасходов);
						
						Если СтруктураДопПараметров.Учет= "НУ" Тогда
							ПлановаяСтоимость   = Обход.ПлановаяСтоимостьПоВидуУчета; 									
							
						Иначе						
							ПлановаяСтоимость   = Обход.ПлановаяСтоимость;
						КонецЕсли;
						
						НоваяСтрока.СуммаНЗП            = Обход.СуммаНЗП;
						НоваяСтрока.ВидУчета            = ВидУчета;
						НоваяСтрока.ПлановаяСтоимость       = ПлановаяСтоимость;
						НоваяСтрока.СтруктурноеПодразделение = Обход.СтруктурноеПодразделение;
						
						
						Если ПоследнийПередел И СтруктураДопПараметров.ВыполненоРаспределениеОПР = Ложь Тогда
							
							//Для вида учета: НУ и ПР необходимо выдать пользователю сообщению, о том 
							//что если были затраты на выпуск продукции, но не было выпуска.
							Если СтруктураДопПараметров.Учет= "НУ" И СтруктураДопПараметров.ВидУчетаНУ <> Справочники.ВидыУчетаНУ.ВР Тогда
								Если Обход.ПлановаяСтоимость = 0 Тогда
									ТекстСообщения = СтрШаблон(НСтр("ru = 'По налоговому учету, вид учета: ""%1"" в текущем периоде были зарегистрированы производственные затраты на продукцию - %2
									|Но выпуска данной продукции не было!'", ОбщегоНазначения.КодОсновногоЯзыка()), ВидУчета, Обход.Продукция);
									ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации(ТекстСообщения, , , Реквизиты.Объект, РегОперация);
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
					
					ВсегоКорректировок = ТаблицаКорректируемыхНаправлений.Итог("СуммаКорректировкиСписания");
					
					КоэффициентРаспределенияНекорректируемойСуммы = ?(ВсегоКорректировок = 0, 0, СуммаНеКорректируемыхНаправлений / ВсегоКорректировок);
					
					СуммаПроводокПоКорректировке = 0;
					
					Для Каждого Обход Из ТаблицаКорректируемыхНаправлений Цикл
						СуммаКорректировкиСписания = Обход.СуммаКорректировкиСписания * (1 + КоэффициентРаспределенияНекорректируемойСуммы);	
						СписаноРасходов = Обход.СписаноРасходов * (1 + КоэффициентРаспределенияНекорректируемойСуммы);	
						
						Если СтруктураДопПараметров.Учет= "НУ" Тогда
							СтруктураПоиска = Новый Структура("НоменклатурнаяГруппа, Подразделение, Продукция", 
							ОбходПоНомГруппам.НоменклатурнаяГруппа, ОбходПоПодразделениям.Подразделение, Обход.Продукция);
							Если ЗначениеЗаполнено(Обход.СтруктурноеПодразделение) Тогда
								СтруктураПоиска.Вставить("СтруктурноеПодразделение", Обход.СтруктурноеПодразделение);
							КонецЕсли;
							
							НайденныеСтроки = ЗаписьРасчетаСебестоимости.НайтиСтроки(СтруктураПоиска);
							Если НайденныеСтроки <> Неопределено Тогда							 
								СуммаСтоимостиБУ = 0;
								СуммаСтоимостиНУ = 0;
								Для Каждого Строка из НайденныеСтроки Цикл
									Если Не ЗначениеЗаполнено(Строка.ВидУчета)Тогда 
										СуммаСтоимостиБУ = СуммаСтоимостиБУ + Строка.Сумма;							 
									Иначе
										СуммаСтоимостиНУ = СуммаСтоимостиНУ + Строка.Сумма;							  
									КонецЕсли;
								КонецЦикла; 								
								ПогрешностьОкругления  = СуммаСтоимостиБУ - (СуммаСтоимостиНУ + СуммаКорректировкиСписания);
								// Это погрешность округления
								Если ПогрешностьОкругления >-0.1 И ПогрешностьОкругления < 0.1 Тогда								
									СуммаКорректировкиСписания = СуммаКорректировкиСписания + ПогрешностьОкругления;
								КонецЕсли;							
							КонецЕсли; 						
						КонецЕсли;	   
						
						// Формирование проводок по списанию  					
						Если СуммаКорректировкиСписания <> 0 Тогда
							
							Если СтруктураДопПараметров.Учет = "НУ" Тогда
								НоваяПроводка = Движения.Налоговый.Добавить();
							Иначе
								НоваяПроводка = Движения.Типовой.Добавить();
							КонецЕсли;
							
							НоваяПроводка.Организация = Реквизиты.Организация;
							НоваяПроводка.Активность  = Истина;
							НоваяПроводка.Период      = Реквизиты.Период;
							НоваяПроводка.Содержание  = НСтр("ru = 'Корректировка выпуска продукции (услуг)'", ОбщегоНазначения.КодОсновногоЯзыка());
							
							НоваяПроводка.Сумма       = СуммаКорректировкиСписания;
							
							СуммаПроводокПоКорректировке = СуммаПроводокПоКорректировке + НоваяПроводка.Сумма;
							
							НоваяПроводка.СчетДт =  Обход.СчетСписания;
							ПроцедурыБухгалтерскогоУчета.УстановитьСубконто( НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, 1, Обход.СубконтоСписания1);
							ПроцедурыБухгалтерскогоУчета.УстановитьСубконто( НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, 2, Обход.СубконтоСписания2);
							ПроцедурыБухгалтерскогоУчета.УстановитьСубконто( НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, 3, Обход.СубконтоСписания3);
							
							НоваяПроводка.СчетКт = Обход.СчетЗатрат;
							ПроцедурыБухгалтерскогоУчета.УстановитьСубконто( НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "Подразделения",        Обход.Подразделение);
							ПроцедурыБухгалтерскогоУчета.УстановитьСубконто( НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "НоменклатурныеГруппы", Обход.НоменклатурнаяГруппа);
							
							Если СтруктураДопПараметров.Учет = "НУ" Тогда
								НоваяПроводка.ВидУчетаДт = Обход.ВидУчета;
								НоваяПроводка.ВидУчетаКт = Обход.ВидУчета;							
							КонецЕсли;   				
							НоваяПроводка.ВидРегламентнойОперации = РегОперация;
							
							ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(НоваяПроводка, 
							Обход.СтруктурноеПодразделение, Обход.СтруктурноеПодразделение);
							
						КонецЕсли;
						
						// Добавим в таблицу список номенклатуры, у которой изменилась средневзвешенная
						// стоимость и, следовательно, необходимо выполнить корректировку списаний.
						Для НомерСубконто = 1 По 2 Цикл
							Если ТипЗнч(Обход["СубконтоСписания" + НомерСубконто]) = Тип("СправочникСсылка.Номенклатура") Тогда
								СтруктураДопПараметров.ТаблицаТоваров.Добавить(Обход["СубконтоСписания" + НомерСубконто]);
								Прервать;
							КонецЕсли;
						КонецЦикла;  
						
						Если  Не СуммаКорректировкиСписания = 0 Тогда					
							СтрокаЗаписиРасчетаСебестоимости = ЗаписьРасчетаСебестоимости.Добавить();
							СтрокаЗаписиРасчетаСебестоимости.СчетУчета            = ОбходПоСчетамЗатрат.СчетЗатрат;
							СтрокаЗаписиРасчетаСебестоимости.Подразделение        = ОбходПоПодразделениям.Подразделение;
							СтрокаЗаписиРасчетаСебестоимости.НоменклатурнаяГруппа = ОбходПоНомГруппам.НоменклатурнаяГруппа;
							СтрокаЗаписиРасчетаСебестоимости.Продукция            = Обход.Продукция;
							
							СтрокаЗаписиРасчетаСебестоимости.СуммаПлан   =  Обход.ПлановаяСтоимость;
							СтрокаЗаписиРасчетаСебестоимости.ВидОперации = Перечисления.ВидыОперацийРасчетаСебестоимости.ВыпускПродукцииИУслуг;
							СтрокаЗаписиРасчетаСебестоимости.Сумма       = СуммаКорректировкиСписания;
							СтрокаЗаписиРасчетаСебестоимости.ВидУчета    = ВидУчета;    																	
							СтрокаЗаписиРасчетаСебестоимости.СтруктурноеПодразделение  = Обход.СтруктурноеПодразделение;    																							
						КонецЕсли;						
						
						// по продукции у которой плановая СБ равна фактической СБ
						Если Не СтруктураДопПараметров.ДвижениеЗатратПоГПСписаннойВПроизводство 
							И ПоследнийПередел И СтруктураДопПараметров.ВыполненоРаспределениеОПР = Ложь 
							И Обход.ПлановаяСтоимость = Обход.СписаноРасходов И СуммаКорректировкиСписания = 0 Тогда					
							СтрокаЗаписиРасчетаСебестоимости = ЗаписьРасчетаСебестоимости.Добавить();
							СтрокаЗаписиРасчетаСебестоимости.СчетУчета            = ОбходПоСчетамЗатрат.СчетЗатрат;
							СтрокаЗаписиРасчетаСебестоимости.Подразделение        = ОбходПоПодразделениям.Подразделение;
							СтрокаЗаписиРасчетаСебестоимости.НоменклатурнаяГруппа = ОбходПоНомГруппам.НоменклатурнаяГруппа;
							СтрокаЗаписиРасчетаСебестоимости.Продукция            = Обход.Продукция;
							
							СтрокаЗаписиРасчетаСебестоимости.СуммаПлан   =  Обход.ПлановаяСтоимость;
							СтрокаЗаписиРасчетаСебестоимости.ВидОперации = Перечисления.ВидыОперацийРасчетаСебестоимости.ВыпускПродукцииИУслуг;
							СтрокаЗаписиРасчетаСебестоимости.Сумма       = СуммаКорректировкиСписания;
							СтрокаЗаписиРасчетаСебестоимости.ВидУчета    = ВидУчета;    																	
							СтрокаЗаписиРасчетаСебестоимости.СтруктурноеПодразделение  = Обход.СтруктурноеПодразделение;    																							
						КонецЕсли;
						
					КонецЦикла; // по направлениям выпуска продукции (услуг)
					
					Если (СуммаНеКорректируемыхНаправлений <> 0) И (СуммаПроводокПоКорректировке <> 0) Тогда 
						// проверим списанную суммму, из за расчетов с коэффициентами могут не сойтись цифры после запятой
						Разница = Окр(ВсегоКорректировок * (1 + КоэффициентРаспределенияНекорректируемойСуммы), 2) - СуммаПроводокПоКорректировке;
						Если Разница <> 0 Тогда
							Если СтруктураДопПараметров.Учет = "НУ" Тогда
								ПоследняяПроводка =  Движения.Налоговый.Получить(Движения.Налоговый.Количество()-1);
							Иначе
								ПоследняяПроводка =  Движения.Типовой.Получить(Движения.Типовой.Количество()-1);
							КонецЕсли;
							ПоследняяПроводка.Сумма = ПоследняяПроводка.Сумма + Разница;
							Если СтрокаЗаписиРасчетаСебестоимости <> Неопределено Тогда
								СтрокаЗаписиРасчетаСебестоимости.Сумма = СтрокаЗаписиРасчетаСебестоимости.Сумма + Разница; 
							КонецЕсли;    
						КонецЕсли;
					КонецЕсли;
					
				КонецЦикла; // по номенклатурным группам
			КонецЦикла; // по подразделениям
		КонецЦикла; // по счетам учета прямых затрат
	КонецЦикла; //по структуркам
	
	Если СтруктураДопПараметров.Учет = "НУ" Тогда
		Движения.Налоговый.Записать(Ложь);
	Иначе
		Движения.Типовой.Записать(Ложь);
	КонецЕсли;

	
КонецПроцедуры // ДвиженияПоПрямымЗатратам()

Процедура РасчетПрямыхЗатрат(Реквизиты, Движения, Отказ = Ложь)
	
	СтруктураДопПараметров = Реквизиты.ДопПараметры;	
	ПорядокПеределов = Реквизиты.ДопПараметры.ПорядокПеределов;
	
	Для Каждого Передел Из ПорядокПеределов Цикл
		
		МассивНоменклатуры = Новый Массив; // массив номенклатуры, у которой, в результате расчета себестоимости, изменилась среденевзвешенная стоимость.
		СтруктураДопПараметров.Вставить("ТаблицаТоваров", МассивНоменклатуры);
		
		// Распределение прямых расходов по тем подразделениям, которым присвоен
		// текущий номер передела.
		ДвиженияПоПрямымЗатратам(Реквизиты, Движения,Передел.Подразделение, Передел.НоменклатурнаяГруппа);		
		  	
		Если МассивНоменклатуры.Количество() > 0 Тогда
				
			Если СтруктураДопПараметров.Учет = "НУ"  Тогда
				//Для ВР мы только учитываем затраты. При корректировки себестоимости по НУ, сумма ВР образуется 
				//при отклонениях Суммы НУ/ПР от Суммы БУ
				Если  СтруктураДопПараметров.ВидУчетаНУ = Справочники.ВидыУчетаНУ.ВР Тогда
					Продолжить;
				КонецЕсли;				
								
				Если СтруктураДопПараметров.ТаблицаРасчетаСебестоимости.Количество() = 0 Тогда
					Продолжить;
				КонецЕсли; 			
				
			КонецЕсли;
			
			Если Не Отказ Тогда 
				

				КорректирровкаСтоимостиСписанияВыпущеннойПродукции(Реквизиты, Движения, Отказ);															
			КонецЕсли; 
		КонецЕсли;
			
	КонецЦикла;
		
КонецПроцедуры // РасчетПрямыхЗатрат()

Функция РасчетБазыКоэффициентов(Реквизиты)
	
	Запрос = Новый Запрос;
	Запрос.Текст =  "ВЫБРАТЬ
	                |	ПолнаяБазаРаспределения.СчетЗатрат КАК СчетЗатрат,
	                |	ПолнаяБазаРаспределения.Подразделение КАК Подразделение,
	                |	ПолнаяБазаРаспределения.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	                |	ПолнаяБазаРаспределения.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	                |	СУММА(ПолнаяБазаРаспределения.БазаМат) КАК БазаМат,
	                |	СУММА(ПолнаяБазаРаспределения.БазаЗП) КАК БазаЗП,
	                |	СУММА(ПолнаяБазаРаспределения.БазаВыпуск) КАК БазаВыпуск,
	                |	СУММА(ПолнаяБазаРаспределения.БазаПлан) КАК БазаПлан
	                |ИЗ
	                |	(ВЫБРАТЬ
	                |		ТиповойОбороты.Счет КАК СчетЗатрат,
	                |		ТиповойОбороты.Субконто1 КАК Подразделение,
	                |		ТиповойОбороты.Субконто2 КАК НоменклатурнаяГруппа,
	                |		ТиповойОбороты.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	                |		СУММА(ВЫБОР
	                |				КОГДА ТиповойОбороты.Субконто3.КатегорияЗатрат = &МатЗатраты
	                |					ТОГДА ТиповойОбороты.СуммаОборотДт
	                |				ИНАЧЕ 0
	                |			КОНЕЦ) КАК БазаМат,
	                |		СУММА(ВЫБОР
	                |				КОГДА ТиповойОбороты.Субконто3.КатегорияЗатрат = &ОплатаТруда
	                |					ТОГДА ТиповойОбороты.СуммаОборотДт
	                |				ИНАЧЕ 0
	                |			КОНЕЦ) КАК БазаЗП,
	                |		0 КАК БазаВыпуск,
	                |		0 КАК БазаПлан
	                |	ИЗ
	                |		РегистрБухгалтерии.Типовой.Обороты(&НачДата, &КонДата, Месяц, Счет В ИЕРАРХИИ (&СчетаЗатрат), &ВидыСубконто, Организация = &Организация, , ) КАК ТиповойОбороты
	                |	
	                |	СГРУППИРОВАТЬ ПО
	                |		ТиповойОбороты.Счет,
	                |		ТиповойОбороты.Субконто1,
	                |		ТиповойОбороты.Субконто2,
	                |		ТиповойОбороты.СтруктурноеПодразделение
	                |	
	                |	ОБЪЕДИНИТЬ ВСЕ
	                |	
	                |	ВЫБРАТЬ
	                |		ВыпускПродукцииУслуг.СчетЗатрат,
	                |		ВыпускПродукцииУслуг.Подразделение,
	                |		ВыпускПродукцииУслуг.НоменклатурнаяГруппа,
	                |		ВыпускПродукцииУслуг.СтруктурноеПодразделение,
	                |		0,
	                |		0,
	                |		ВЫРАЗИТЬ(СУММА(ВыпускПродукцииУслуг.Количество) КАК ЧИСЛО(15, 2)),
	                |		СУММА(ВыпускПродукцииУслуг.ПлановаяСтоимость)
	                |	ИЗ
	                |		РегистрНакопления.ВыпускПродукцииУслугБухгалтерскийУчет КАК ВыпускПродукцииУслуг
	                |	ГДЕ
	                |		ВыпускПродукцииУслуг.Период МЕЖДУ &НачДата И &КонДата
	                |		И ВыпускПродукцииУслуг.Подразделение.Владелец = &Организация
	                |	
	                |	СГРУППИРОВАТЬ ПО
	                |		ВыпускПродукцииУслуг.СчетЗатрат,
	                |		ВыпускПродукцииУслуг.Подразделение,
	                |		ВыпускПродукцииУслуг.СтруктурноеПодразделение,
	                |		ВыпускПродукцииУслуг.НоменклатурнаяГруппа) КАК ПолнаяБазаРаспределения
	                |
	                |СГРУППИРОВАТЬ ПО
	                |	ПолнаяБазаРаспределения.СтруктурноеПодразделение,
	                |	ПолнаяБазаРаспределения.СчетЗатрат,
	                |	ПолнаяБазаРаспределения.Подразделение,
	                |	ПолнаяБазаРаспределения.НоменклатурнаяГруппа
	                |
	                |УПОРЯДОЧИТЬ ПО
	                |	Подразделение";	 
	 
	Запрос.УстановитьПараметр("НачДата",     Реквизиты.НачалоПериода);
	Запрос.УстановитьПараметр("КонДата",     Реквизиты.КонецПериода);
	Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
	Запрос.УстановитьПараметр("ОплатаТруда", Перечисления.КатегорииЗатрат.ОплатаТруда);
	Запрос.УстановитьПараметр("МатЗатраты",  Перечисления.КатегорииЗатрат.МатериальныеРасходы);
	 
	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Подразделения);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.НоменклатурныеГруппы);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.СтатьиЗатрат);
	Запрос.УстановитьПараметр("ВидыСубконто",  ВидыСубконто);
	
	СчетаЗатрат = Новый Массив;
	СчетаЗатрат.Добавить(ПланыСчетов.Типовой.ОсновноеПроизводство_);
	СчетаЗатрат.Добавить(ПланыСчетов.Типовой.ПолуфабрикатыСобственногоПроизводства);
	СчетаЗатрат.Добавить(ПланыСчетов.Типовой.ВспомогательныеПроизводства);		
	
	Запрос.УстановитьПараметр("СчетаЗатрат", СчетаЗатрат);		
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // РасчетБазыКоэффициентов()

Процедура РаспределениеКосвенныхРасходов(Реквизиты, Движения, Отказ = Ложь)
	
	СтруктураДопПараметров = Реквизиты.ДопПараметры;
	
	Если СтруктураДопПараметров.Учет = "БУ" Тогда
		СтруктураДопПараметров.БазаКоэффициентов = РасчетБазыКоэффициентов(Реквизиты);
	Иначе		
		СтруктураДопПараметров.БазаКоэффициентов = Неопределено;
	КонецЕсли;
	
	СтруктураДопПараметров.ВыполненоРаспределение = Ложь;
	
	// Списание общепроизводственных расходов на счете учета расходов
	// основного и вспомогательного производств.

	СтруктураДопПараметров.ВыполненоРаспределение = РаспределитьОПР(Реквизиты, Движения);
	
	СтруктураДопПараметров.ВыполненоРаспределениеОПР = Истина;
	
	// Распределение общепроизводственных расходов
	// на себестоимость выпущенной продукции (услуг).
	
	РасчетПрямыхЗатрат(Реквизиты, Движения, Отказ);

КонецПроцедуры

Процедура СформироватьЗапросПоКосвеннымЗатратам(Реквизиты, РезультатЗапроса)
	
	СтруктураДопПараметров = Реквизиты.ДопПараметры;
	
	Если СтруктураДопПараметров.Учет = "НУ" Тогда
		
		СформироватьЗапросПоКосвеннымЗатратамНУ(Реквизиты, РезультатЗапроса);
		
	Иначе
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("НачДата"    , СтруктураДопПараметров.НачалоПериода);
		Запрос.УстановитьПараметр("КонДата"    , СтруктураДопПараметров.КонецПериода);
		Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
		Запрос.УстановитьПараметр("СчетЗатрат" , ПланыСчетов.Типовой.НакладныеРасходы);
		
		Запрос.УстановитьПараметр("ПустойСчет"         , ПланыСчетов.Типовой.ПустаяСсылка());
		Запрос.УстановитьПараметр("ПустаяСтатьяЗатрат" , Справочники.СтатьиЗатрат.ПустаяСсылка());
		Запрос.УстановитьПараметр("ПустоеПодразделение", Справочники.ПодразделенияОрганизаций.ПустаяСсылка());
		
		ВидыСубконто = Новый Массив;
		ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Подразделения);
		ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.СтатьиЗатрат);
		Запрос.УстановитьПараметр("ВидыСубконто", ВидыСубконто);
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	МетодыРаспределения.СчетЗатратБУ             КАК СчетЗатрат,
		|	МетодыРаспределения.СчетЗатратНУ             КАК СчетЗатратНУ,
		|	МетодыРаспределения.СтатьяЗатрат             КАК СтатьяЗатрат,
		|	МетодыРаспределения.Подразделение            КАК Подразделение,
		|	ЕСТЬNULL(ВЫРАЗИТЬ(МетодыРаспределения.СтруктурноеПодразделение КАК Справочник.ПодразделенияОрганизаций), &ПустоеПодразделение) КАК СтруктурноеПодразделение,
		|	МетодыРаспределения.Период                   КАК Период,
		|	МетодыРаспределения.МетодРаспределенияЗатрат КАК МетодРаспределенияЗатрат
		|ПОМЕСТИТЬ ВТ_МетодыРаспределения_Развернуто
		|ИЗ
		|	РегистрСведений.МетодыРаспределенияКосвенныхРасходовОрганизаций.СрезПоследних(&КонДата, Организация = &Организация) КАК МетодыРаспределения
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	СчетЗатрат,
		|	СчетЗатратНУ,
		|	СтатьяЗатрат,
		|	Подразделение,
		|	СтруктурноеПодразделение,
		|	Период
		|;
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	МетодыРаспределения.СчетЗатрат               КАК СчетЗатрат,
		|	МетодыРаспределения.СчетЗатратНУ             КАК СчетЗатратНУ,
		|	МетодыРаспределения.СтатьяЗатрат             КАК СтатьяЗатрат,
		|	МетодыРаспределения.Подразделение            КАК Подразделение,
		|	МетодыРаспределения.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
		|	МетодыРаспределения.МетодРаспределенияЗатрат КАК МетодРаспределенияЗатрат
		|ПОМЕСТИТЬ ВТ_МетодыРаспределения
		|ИЗ
		|	ВТ_МетодыРаспределения_Развернуто КАК МетодыРаспределения
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_МетодыРаспределения_Развернуто КАК МетодыРаспределенияДляСреза
		|		ПО МетодыРаспределения.СчетЗатрат              = МетодыРаспределенияДляСреза.СчетЗатрат
		|		И МетодыРаспределения.СчетЗатратНУ             = МетодыРаспределенияДляСреза.СчетЗатратНУ
		|		И МетодыРаспределения.СтатьяЗатрат             = МетодыРаспределенияДляСреза.СтатьяЗатрат
		|		И МетодыРаспределения.Подразделение            = МетодыРаспределенияДляСреза.Подразделение
		|		И МетодыРаспределения.СтруктурноеПодразделение = МетодыРаспределенияДляСреза.СтруктурноеПодразделение
		|		И МетодыРаспределения.Период                   < МетодыРаспределенияДляСреза.Период
		|		
		|ГДЕ
		|	МетодыРаспределенияДляСреза.Период ЕСТЬ NULL
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	СчетЗатрат,
		|	СтатьяЗатрат,
		|	Подразделение,
		|	СтруктурноеПодразделение
		|;
		|
		|УНИЧТОЖИТЬ ВТ_МетодыРаспределения_Развернуто
		|;
		|
		|ВЫБРАТЬ
		|	ТиповойОбороты.Счет                          КАК СчетЗатрат,
		|	ТиповойОбороты.СтруктурноеПодразделение      КАК СтруктурноеПодразделение,
		|	ТиповойОбороты.Субконто1                     КАК Подразделение,
		|	ТиповойОбороты.Субконто2                     КАК СтатьяЗатрат,
		|	СУММА(ТиповойОбороты.СуммаОборот)            КАК СуммаОборот
		|ПОМЕСТИТЬ ВТ_ТиповойОбороты
		|ИЗ
		|	РегистрБухгалтерии.Типовой.Обороты(&НачДата, &КонДата, , Счет В ИЕРАРХИИ (&СчетЗатрат), &ВидыСубконто, Организация = &Организация, , ) КАК ТиповойОбороты
		|
		|СГРУППИРОВАТЬ ПО
		|	ТиповойОбороты.Счет,
		|	ТиповойОбороты.СтруктурноеПодразделение,
		|	ТиповойОбороты.Субконто1,
		|	ТиповойОбороты.Субконто2
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	СчетЗатрат,
		|	СтатьяЗатрат,
		|	Подразделение,
		|	СтруктурноеПодразделение
		|;
		|
		|ВЫБРАТЬ
		|	ТиповойОбороты.СчетЗатрат    КАК СчетЗатрат,
		|	ТиповойОбороты.СтатьяЗатрат  КАК СтатьяЗатрат,
		|	ТиповойОбороты.СуммаОборот   КАК СуммаОборот,
		|	ТиповойОбороты.Подразделение КАК Подразделение,
		|	ТиповойОбороты.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
		|	ЕСТЬNULL(ПТ0.СчетЗатратНУ,
		|	ЕСТЬNULL(ПТ1.СчетЗатратНУ,
		|	ЕСТЬNULL(ПТ2.СчетЗатратНУ,
		|	ЕСТЬNULL(ПТ3.СчетЗатратНУ,
		|	ЕСТЬNULL(ПТ4.СчетЗатратНУ,
		|	ЕСТЬNULL(ПТ5.СчетЗатратНУ,
		|	ЕСТЬNULL(ПТ6.СчетЗатратНУ,
		|	ЕСТЬNULL(ПТ7.СчетЗатратНУ,
		|	ЕСТЬNULL(ПТ8.СчетЗатратНУ, ПТ9.СчетЗатратНУ))))))))) КАК СчетЗатратНУ,
		|	ЕСТЬNULL(ПТ0.МетодРаспределенияЗатрат,
		|	ЕСТЬNULL(ПТ1.МетодРаспределенияЗатрат,
		|	ЕСТЬNULL(ПТ2.МетодРаспределенияЗатрат,
		|	ЕСТЬNULL(ПТ3.МетодРаспределенияЗатрат,
		|	ЕСТЬNULL(ПТ4.МетодРаспределенияЗатрат,
		|	ЕСТЬNULL(ПТ5.МетодРаспределенияЗатрат,
		|	ЕСТЬNULL(ПТ6.МетодРаспределенияЗатрат,
		|	ЕСТЬNULL(ПТ7.МетодРаспределенияЗатрат,
		|	ЕСТЬNULL(ПТ8.МетодРаспределенияЗатрат, ПТ9.МетодРаспределенияЗатрат))))))))) КАК МетодРаспределенияЗатрат
		|ПОМЕСТИТЬ ВТ_ТаблицаРаспределения
		|ИЗ
		|	ВТ_ТиповойОбороты КАК ТиповойОбороты
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_МетодыРаспределения КАК ПТ0
		|		ПО ПТ0.СчетЗатрат               = ТиповойОбороты.СчетЗатрат
		|		 И ПТ0.СтатьяЗатрат             = ТиповойОбороты.СтатьяЗатрат
		|		 И ПТ0.Подразделение            = ТиповойОбороты.Подразделение
		|		 И ПТ0.СтруктурноеПодразделение = ТиповойОбороты.СтруктурноеПодразделение
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_МетодыРаспределения КАК ПТ1
		|		ПО ПТ1.СчетЗатрат               = ТиповойОбороты.СчетЗатрат
		|		 И ПТ1.СтатьяЗатрат             = &ПустаяСтатьяЗатрат
		|		 И ПТ1.Подразделение            = ТиповойОбороты.Подразделение
		|		 И ПТ1.СтруктурноеПодразделение = ТиповойОбороты.СтруктурноеПодразделение
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_МетодыРаспределения КАК ПТ2
		|		ПО ПТ2.СчетЗатрат               = ТиповойОбороты.СчетЗатрат
		|		 И ПТ2.СтатьяЗатрат             = ТиповойОбороты.СтатьяЗатрат
		|		 И ПТ2.Подразделение            = &ПустоеПодразделение
		|		 И ПТ2.СтруктурноеПодразделение = ТиповойОбороты.СтруктурноеПодразделение
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_МетодыРаспределения КАК ПТ3
		|		ПО ПТ3.СчетЗатрат               = ТиповойОбороты.СчетЗатрат
		|		 И ПТ3.СтатьяЗатрат             = &ПустаяСтатьяЗатрат
		|		 И ПТ3.Подразделение            = ТиповойОбороты.Подразделение
		|		 И ПТ3.СтруктурноеПодразделение = &ПустоеПодразделение
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_МетодыРаспределения КАК ПТ4
		|		ПО ПТ4.СчетЗатрат               = ТиповойОбороты.СчетЗатрат
		|		 И ПТ4.СтатьяЗатрат             = ТиповойОбороты.СтатьяЗатрат
		|		 И ПТ4.Подразделение            = &ПустоеПодразделение
		|		 И ПТ4.СтруктурноеПодразделение = &ПустоеПодразделение
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_МетодыРаспределения КАК ПТ5
		|		ПО ПТ5.СчетЗатрат               = ТиповойОбороты.СчетЗатрат
		|		 И ПТ5.СтатьяЗатрат             = &ПустаяСтатьяЗатрат
		|		 И ПТ5.Подразделение            = &ПустоеПодразделение
		|		 И ПТ5.СтруктурноеПодразделение = ТиповойОбороты.СтруктурноеПодразделение
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_МетодыРаспределения КАК ПТ6
		|		ПО ПТ6.СчетЗатрат               = &ПустойСчет
		|		 И ПТ6.СтатьяЗатрат             = &ПустаяСтатьяЗатрат
		|		 И ПТ6.Подразделение            = &ПустоеПодразделение
		|		 И ПТ6.СтруктурноеПодразделение = ТиповойОбороты.СтруктурноеПодразделение
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_МетодыРаспределения КАК ПТ7
		|		ПО ПТ7.СчетЗатрат               = &ПустойСчет
		|		 И ПТ7.СтатьяЗатрат             = ТиповойОбороты.СтатьяЗатрат
		|		 И ПТ7.Подразделение            = &ПустоеПодразделение
		|		 И ПТ7.СтруктурноеПодразделение = &ПустоеПодразделение
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_МетодыРаспределения КАК ПТ8
		|		ПО ПТ8.СчетЗатрат               = ТиповойОбороты.СчетЗатрат
		|		 И ПТ8.СтатьяЗатрат             = &ПустаяСтатьяЗатрат
		|		 И ПТ8.Подразделение            = &ПустоеПодразделение
		|		 И ПТ8.СтруктурноеПодразделение = &ПустоеПодразделение
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_МетодыРаспределения КАК ПТ9
		|		ПО ПТ9.СчетЗатрат               = &ПустойСчет
		|		 И ПТ9.СтатьяЗатрат             = &ПустаяСтатьяЗатрат
		|		 И ПТ9.Подразделение            = &ПустоеПодразделение
		|		 И ПТ9.СтруктурноеПодразделение = &ПустоеПодразделение
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	МетодРаспределенияЗатрат
		|;
		|
		|ВЫБРАТЬ
		|	ТаблицаРаспределения.СчетЗатрат    КАК СчетЗатрат,
		|	ТаблицаРаспределения.СчетЗатратНУ  КАК СчетЗатратНУ,
		|	ТаблицаРаспределения.СтатьяЗатрат  КАК СтатьяЗатрат,
		|	ТаблицаРаспределения.СуммаОборот   КАК Сумма,
		|	ТаблицаРаспределения.Подразделение КАК Подразделение,
		|	ТаблицаРаспределения.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
		|	МетодыРаспределения.БазаРаспределения КАК Метод,
		|	ЕСТЬNULL(АналитикаМетодовРаспределения.СчетЗакрытияБУ, ЗНАЧЕНИЕ(ПланСчетов.Типовой.ПустаяСсылка)) КАК СчетЗакрытия,
		|	ЕСТЬNULL(АналитикаМетодовРаспределения.СчетЗакрытияНУ, ЗНАЧЕНИЕ(ПланСчетов.Типовой.ПустаяСсылка)) КАК СчетЗакрытияНУ,
		|	ЕСТЬNULL(ВЫРАЗИТЬ(АналитикаМетодовРаспределения.СтруктурноеПодразделение КАК Справочник.ПодразделенияОрганизаций), ТаблицаРаспределения.СтруктурноеПодразделение) КАК СтруктурноеПодразделениеЗакрытия,
		|	ЕСТЬNULL(АналитикаМетодовРаспределения.СубконтоБУ1, НЕОПРЕДЕЛЕНО) КАК СубконтоЗакрытия1,
		|	ЕСТЬNULL(АналитикаМетодовРаспределения.СубконтоБУ2, НЕОПРЕДЕЛЕНО) КАК СубконтоЗакрытия2,
		|	ЕСТЬNULL(АналитикаМетодовРаспределения.СубконтоБУ3, НЕОПРЕДЕЛЕНО) КАК СубконтоЗакрытия3,
		|	ЕСТЬNULL(АналитикаМетодовРаспределения.СубконтоНУ1, НЕОПРЕДЕЛЕНО) КАК СубконтоЗакрытияНУ1,
		|	ЕСТЬNULL(АналитикаМетодовРаспределения.СубконтоНУ2, НЕОПРЕДЕЛЕНО) КАК СубконтоЗакрытияНУ2,
		|	ЕСТЬNULL(АналитикаМетодовРаспределения.СубконтоНУ3, НЕОПРЕДЕЛЕНО) КАК СубконтоЗакрытияНУ3,
		|	ЕСТЬNULL(АналитикаМетодовРаспределения.СчетЗакрытияБУ, ЗНАЧЕНИЕ(ПланСчетов.Типовой.ПустаяСсылка))
		|	В ИЕРАРХИИ (
		|		ЗНАЧЕНИЕ(ПланСчетов.Типовой.ОсновноеПроизводство_),
		|		ЗНАЧЕНИЕ(ПланСчетов.Типовой.ПолуфабрикатыСобственногоПроизводства_),
		|		ЗНАЧЕНИЕ(ПланСчетов.Типовой.ВспомогательныеПроизводства_),
		|		ЗНАЧЕНИЕ(ПланСчетов.Типовой.НакладныеРасходы_)) КАК ПризнакПроизводсвенногоСчета,
		|	ЕСТЬNULL(АналитикаМетодовРаспределения.ПроцентРаспределения, 0) КАК ПроцентРаспределения,
		|	ТаблицаРаспределения.МетодРаспределенияЗатрат КАК МетодРаспределенияЗатратСсылка
		|ИЗ
		|	ВТ_ТаблицаРаспределения КАК ТаблицаРаспределения
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.МетодыРаспределенияКосвенныхРасходов.АналитикаРаспределения КАК АналитикаМетодовРаспределения
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.МетодыРаспределенияКосвенныхРасходов КАК МетодыРаспределения
		|			ПО (АналитикаМетодовРаспределения.Ссылка = МетодыРаспределения.Ссылка)
		|		ПО (ТаблицаРаспределения.МетодРаспределенияЗатрат = АналитикаМетодовРаспределения.Ссылка)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Подразделение,
		|	СтатьяЗатрат,
		|	СубконтоЗакрытия1,
		|	СубконтоЗакрытия2,
		|	СубконтоЗакрытия3
		|ИТОГИ ПО
		|	Метод";
		
		РезультатЗапроса = Запрос.Выполнить();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьЗапросПоКосвеннымЗатратамНУ(Реквизиты, РезультатЗапроса)
	
	СтруктураДопПараметров = Реквизиты.ДопПараметры;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачДата",     СтруктураДопПараметров.НачалоПериода);
	Запрос.УстановитьПараметр("КонДата",     СтруктураДопПараметров.КонецПериода);
	Запрос.УстановитьПараметр("СчетЗатрат",  ПланыСчетов.Налоговый.НакладныеРасходы);
	Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
	
	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Подразделения);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.СтатьиЗатрат);
	Запрос.УстановитьПараметр("ВидыСубконто", ВидыСубконто);  
	Запрос.УстановитьПараметр("ВидУчета", СтруктураДопПараметров.ВидУчетаНУ);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	РасчетРаспределенияКосвенныхРасходов.Организация КАК Организация,
	               |	РасчетРаспределенияКосвенныхРасходов.СтатьяЗатрат КАК СтатьяЗатрат,
	               |	РасчетРаспределенияКосвенныхРасходов.СчетУчета КАК СчетЗатрат,
	               |	РасчетРаспределенияКосвенныхРасходов.Подразделение КАК Подразделение,
	               |	РасчетРаспределенияКосвенныхРасходов.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	               |	СУММА(РасчетРаспределенияКосвенныхРасходов.СуммаБазы) КАК СуммаБазы,
	               |	РасчетРаспределенияКосвенныхРасходов.БазаРаспределения КАК Метод,
	               |	РасчетРаспределенияКосвенныхРасходов.СчетРаспределения КАК СчетРаспределения,
	               |	РасчетРаспределенияКосвенныхРасходов.ПодразделениеРаспределения КАК ПодразделениеРаспределения,
	               |	РасчетРаспределенияКосвенныхРасходов.НоменклатурнаяГруппаРаспределения КАК НоменклатурнаяГруппаРаспределения,
	               |	РасчетРаспределенияКосвенныхРасходов.СтатьяЗатратРаспределения КАК СтатьяЗатратРаспределения,
	               |	РасчетРаспределенияКосвенныхРасходов.СтруктурноеПодразделениеРаспределения КАК СтруктурноеПодразделениеРаспределения,
	               |	РасчетРаспределенияКосвенныхРасходов.МетодРаспределенияКосвенныхРасходов КАК МетодРаспределенияЗатратСсылка,
	               |	ВЫБОР
	               |		КОГДА РасчетРаспределенияКосвенныхРасходов.СчетРаспределения В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ОсновноеПроизводство_), ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ПолуфабрикатыСобственногоПроизводства), ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ВспомогательныеПроизводства), ЗНАЧЕНИЕ(ПланСчетов.Налоговый.НакладныеРасходы))
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК ПризнакПроизводсвенногоСчета,
	               |	СУММА(РасчетРаспределенияКосвенныхРасходов.Сумма) КАК СуммаБУ
	               |ПОМЕСТИТЬ РасчетРаспределенияКосвенныхРасходов
	               |ИЗ
	               |	РегистрСведений.РасчетРаспределенияКосвенныхРасходов КАК РасчетРаспределенияКосвенныхРасходов
	               |ГДЕ
	               |	РасчетРаспределенияКосвенныхРасходов.Организация = &Организация
	               |	И НАЧАЛОПЕРИОДА(РасчетРаспределенияКосвенныхРасходов.ПериодРасчета, МЕСЯЦ) = &НачДата
	               |	И РасчетРаспределенияКосвенныхРасходов.СчетУчета ССЫЛКА ПланСчетов.Налоговый
	               |	И РасчетРаспределенияКосвенныхРасходов.РасчетБазы
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	РасчетРаспределенияКосвенныхРасходов.Организация,
	               |	РасчетРаспределенияКосвенныхРасходов.СчетУчета,
	               |	РасчетРаспределенияКосвенныхРасходов.СтатьяЗатрат,
	               |	РасчетРаспределенияКосвенныхРасходов.Подразделение,
	               |	РасчетРаспределенияКосвенныхРасходов.СтруктурноеПодразделение,
	               |	РасчетРаспределенияКосвенныхРасходов.БазаРаспределения,
	               |	РасчетРаспределенияКосвенныхРасходов.СчетРаспределения,
	               |	РасчетРаспределенияКосвенныхРасходов.ПодразделениеРаспределения,
	               |	РасчетРаспределенияКосвенныхРасходов.НоменклатурнаяГруппаРаспределения,
	               |	РасчетРаспределенияКосвенныхРасходов.СтатьяЗатратРаспределения,
	               |	РасчетРаспределенияКосвенныхРасходов.СтруктурноеПодразделениеРаспределения,
	               |	РасчетРаспределенияКосвенныхРасходов.МетодРаспределенияКосвенныхРасходов
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	МетодыРаспределенияКосвенныхРасходов.Ссылка КАК МетодРаспределенияЗатратСсылка,
	               |	МетодыРаспределенияКосвенныхРасходов.СчетЗакрытияНУ,
	               |	МетодыРаспределенияКосвенныхРасходов.СубконтоНУ1,
	               |	МетодыРаспределенияКосвенныхРасходов.СубконтоНУ2,
	               |	МетодыРаспределенияКосвенныхРасходов.СубконтоНУ3
	               |ПОМЕСТИТЬ МетодыРаспределенияКосвенныхРасходов
	               |ИЗ
	               |	Справочник.МетодыРаспределенияКосвенныхРасходов.АналитикаРаспределения КАК МетодыРаспределенияКосвенныхРасходов
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	МетодыРаспределенияКосвенныхРасходов.СчетЗакрытияНУ,
	               |	МетодыРаспределенияКосвенныхРасходов.СубконтоНУ2,
	               |	МетодыРаспределенияКосвенныхРасходов.СубконтоНУ3,
	               |	МетодыРаспределенияКосвенныхРасходов.Ссылка,
	               |	МетодыРаспределенияКосвенныхРасходов.СубконтоНУ1
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	РасчетРаспределенияКосвенныхРасходов.Организация КАК Организация,
	               |	РасчетРаспределенияКосвенныхРасходов.СтатьяЗатрат КАК СтатьяЗатрат,
	               |	РасчетРаспределенияКосвенныхРасходов.СчетЗатрат КАК СчетЗатрат,
	               |	РасчетРаспределенияКосвенныхРасходов.Подразделение КАК Подразделение,
	               |	РасчетРаспределенияКосвенныхРасходов.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	               |	МАКСИМУМ(РасчетРаспределенияКосвенныхРасходов.СуммаБазы) КАК СуммаБазы,
	               |	РасчетРаспределенияКосвенныхРасходов.Метод КАК Метод,
	               |	РасчетРаспределенияКосвенныхРасходов.СчетРаспределения КАК СчетРаспределения,
	               |	РасчетРаспределенияКосвенныхРасходов.ПодразделениеРаспределения КАК ПодразделениеРаспределения,
	               |	РасчетРаспределенияКосвенныхРасходов.НоменклатурнаяГруппаРаспределения КАК НоменклатурнаяГруппаРаспределения,
	               |	РасчетРаспределенияКосвенныхРасходов.СтатьяЗатратРаспределения КАК СтатьяЗатратРаспределения,
	               |	РасчетРаспределенияКосвенныхРасходов.СтруктурноеПодразделениеРаспределения КАК СтруктурноеПодразделениеРаспределения,
	               |	РасчетРаспределенияКосвенныхРасходов.МетодРаспределенияЗатратСсылка КАК МетодРаспределенияЗатратСсылка,
	               |	ВЫБОР
	               |		КОГДА РасчетРаспределенияКосвенныхРасходов.ПризнакПроизводсвенногоСчета
	               |			ТОГДА РасчетРаспределенияКосвенныхРасходов.ПодразделениеРаспределения
	               |		ИНАЧЕ МетодыРаспределенияКосвенныхРасходов.СубконтоНУ1
	               |	КОНЕЦ КАК СубконтоЗакрытия1,
	               |	ВЫБОР
	               |		КОГДА РасчетРаспределенияКосвенныхРасходов.ПризнакПроизводсвенногоСчета
	               |			ТОГДА РасчетРаспределенияКосвенныхРасходов.НоменклатурнаяГруппаРаспределения
	               |		ИНАЧЕ МетодыРаспределенияКосвенныхРасходов.СубконтоНУ2
	               |	КОНЕЦ КАК СубконтоЗакрытия2,
	               |	ВЫБОР
	               |		КОГДА РасчетРаспределенияКосвенныхРасходов.ПризнакПроизводсвенногоСчета
	               |			ТОГДА РасчетРаспределенияКосвенныхРасходов.СтатьяЗатратРаспределения
	               |		ИНАЧЕ МетодыРаспределенияКосвенныхРасходов.СубконтоНУ3
	               |	КОНЕЦ КАК СубконтоЗакрытия3,
	               |	МАКСИМУМ(РасчетРаспределенияКосвенныхРасходов.СуммаБУ) КАК СуммаБУ
	               |ПОМЕСТИТЬ РасчетРаспределенияКосвенныхРасходов_Основной
	               |ИЗ
	               |	РасчетРаспределенияКосвенныхРасходов КАК РасчетРаспределенияКосвенныхРасходов
	               |		ЛЕВОЕ СОЕДИНЕНИЕ МетодыРаспределенияКосвенныхРасходов КАК МетодыРаспределенияКосвенныхРасходов
	               |		ПО (МетодыРаспределенияКосвенныхРасходов.МетодРаспределенияЗатратСсылка = РасчетРаспределенияКосвенныхРасходов.МетодРаспределенияЗатратСсылка)
	               |			И (МетодыРаспределенияКосвенныхРасходов.СчетЗакрытияНУ = РасчетРаспределенияКосвенныхРасходов.СчетРаспределения)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	РасчетРаспределенияКосвенныхРасходов.Организация,
	               |	РасчетРаспределенияКосвенныхРасходов.СчетЗатрат,
	               |	РасчетРаспределенияКосвенныхРасходов.СтатьяЗатрат,
	               |	РасчетРаспределенияКосвенныхРасходов.Подразделение,
	               |	РасчетРаспределенияКосвенныхРасходов.СтруктурноеПодразделение,
	               |	РасчетРаспределенияКосвенныхРасходов.Метод,
	               |	РасчетРаспределенияКосвенныхРасходов.СчетРаспределения,
	               |	РасчетРаспределенияКосвенныхРасходов.ПодразделениеРаспределения,
	               |	РасчетРаспределенияКосвенныхРасходов.НоменклатурнаяГруппаРаспределения,
	               |	РасчетРаспределенияКосвенныхРасходов.СтатьяЗатратРаспределения,
	               |	РасчетРаспределенияКосвенныхРасходов.СтруктурноеПодразделениеРаспределения,
	               |	РасчетРаспределенияКосвенныхРасходов.МетодРаспределенияЗатратСсылка,
	               |	ВЫБОР
	               |		КОГДА РасчетРаспределенияКосвенныхРасходов.ПризнакПроизводсвенногоСчета
	               |			ТОГДА РасчетРаспределенияКосвенныхРасходов.ПодразделениеРаспределения
	               |		ИНАЧЕ МетодыРаспределенияКосвенныхРасходов.СубконтоНУ1
	               |	КОНЕЦ,
	               |	ВЫБОР
	               |		КОГДА РасчетРаспределенияКосвенныхРасходов.ПризнакПроизводсвенногоСчета
	               |			ТОГДА РасчетРаспределенияКосвенныхРасходов.НоменклатурнаяГруппаРаспределения
	               |		ИНАЧЕ МетодыРаспределенияКосвенныхРасходов.СубконтоНУ2
	               |	КОНЕЦ,
	               |	ВЫБОР
	               |		КОГДА РасчетРаспределенияКосвенныхРасходов.ПризнакПроизводсвенногоСчета
	               |			ТОГДА РасчетРаспределенияКосвенныхРасходов.СтатьяЗатратРаспределения
	               |		ИНАЧЕ МетодыРаспределенияКосвенныхРасходов.СубконтоНУ3
	               |	КОНЕЦ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	НалоговыйОбороты.Счет КАК СчетЗатрат,
	               |	НалоговыйОбороты.Субконто1 КАК Подразделение,
	               |	НалоговыйОбороты.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	               |	НалоговыйОбороты.Субконто2 КАК СтатьяЗатрат,
	               |	СУММА(НалоговыйОбороты.СуммаОборот) КАК СуммаОборот,
	               |	НалоговыйОбороты.Организация КАК Организация,
	               |	НалоговыйОбороты.ВидУчета КАК ВидУчетаНакладных
	               |ПОМЕСТИТЬ НакладныеРасходыРаспределения
	               |ИЗ
	               |	РегистрБухгалтерии.Налоговый.Обороты(
	               |			&НачДата,
	               |			&КонДата,
	               |			Месяц,
	               |			Счет В ИЕРАРХИИ (&СчетЗатрат),
	               |			&ВидыСубконто,
	               |			Организация = &Организация
	               |				И ВидУчета В ИЕРАРХИИ (&ВидУчета),
	               |			,
	               |			) КАК НалоговыйОбороты
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	НалоговыйОбороты.Субконто1,
	               |	НалоговыйОбороты.Организация,
	               |	НалоговыйОбороты.СтруктурноеПодразделение,
	               |	НалоговыйОбороты.Счет,
	               |	НалоговыйОбороты.Субконто2,
	               |	НалоговыйОбороты.ВидУчета
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВыпускПродукцииУслуг.ВидУчета КАК ВидУчетаРаспределения,
	               |	ВыпускПродукцииУслуг.Подразделение КАК Подразделение,
	               |	ВыпускПродукцииУслуг.Организация КАК Организация,
	               |	ВыпускПродукцииУслуг.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	               |	ВыпускПродукцииУслуг.СтруктурноеПодразделение КАК СтруктурноеПодразделение
	               |ПОМЕСТИТЬ выпускпродукции
	               |ИЗ
	               |	РегистрНакопления.ВыпускПродукцииУслугНалоговыйУчет КАК ВыпускПродукцииУслуг
	               |ГДЕ
	               |	ВыпускПродукцииУслуг.Период МЕЖДУ &НачДата И &КонДата
	               |	И ВыпускПродукцииУслуг.Организация = &Организация
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВыпускПродукцииУслуг.ВидУчета,
	               |	ВыпускПродукцииУслуг.Подразделение,
	               |	ВыпускПродукцииУслуг.Организация,
	               |	ВыпускПродукцииУслуг.НоменклатурнаяГруппа,
	               |	ВыпускПродукцииУслуг.СтруктурноеПодразделение
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	РасчетРаспределенияКосвенныхРасходов.Организация КАК Организация,
	               |	РасчетРаспределенияКосвенныхРасходов.Метод КАК Метод,
	               |	НакладныеРасходыРаспределения.СчетЗатрат КАК СчетЗатрат,
	               |	НакладныеРасходыРаспределения.СтатьяЗатрат КАК СтатьяЗатрат,
	               |	НакладныеРасходыРаспределения.Подразделение КАК Подразделение,
	               |	РасчетРаспределенияКосвенныхРасходов.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	               |	РасчетРаспределенияКосвенныхРасходов.СчетРаспределения КАК СчетЗакрытия,
	               |	РасчетРаспределенияКосвенныхРасходов.СубконтоЗакрытия1 КАК СубконтоЗакрытия1,
	               |	РасчетРаспределенияКосвенныхРасходов.СубконтоЗакрытия2 КАК СубконтоЗакрытия2,
	               |	РасчетРаспределенияКосвенныхРасходов.СубконтоЗакрытия3 КАК СубконтоЗакрытия3,
	               |	РасчетРаспределенияКосвенныхРасходов.СтруктурноеПодразделениеРаспределения КАК СтруктурноеПодразделениеЗакрытия,
	               |	ВЫБОР
	               |		КОГДА РасчетРаспределенияКосвенныхРасходов.Метод = ЗНАЧЕНИЕ(Перечисление.БазыРаспределенияКосвенныхРасходов.Процентом)
	               |			ТОГДА РасчетРаспределенияКосвенныхРасходов.СуммаБазы
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК ПроцентРаспределения,
	               |	ВЫБОР
	               |		КОГДА РасчетРаспределенияКосвенныхРасходов.СчетРаспределения В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ОсновноеПроизводство_), ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ПолуфабрикатыСобственногоПроизводства), ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ВспомогательныеПроизводства), ЗНАЧЕНИЕ(ПланСчетов.Налоговый.НакладныеРасходы))
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК ПризнакПроизводсвенногоСчета,
	               |	ЕСТЬNULL(НакладныеРасходыРаспределения.СуммаОборот, 0) КАК Сумма,
	               |	ЕСТЬNULL(НакладныеРасходыРаспределения.ВидУчетаНакладных, ЗНАЧЕНИЕ(Справочник.ВидыУчетаНУ.НУ)) КАК ВидУчетаНакладных,
	               |	ЕСТЬNULL(ВыпускПродукции.ВидУчетаРаспределения, ЗНАЧЕНИЕ(Справочник.ВидыУчетаНУ.НУ)) КАК ВидУчетаРаспределения,
	               |	ЕСТЬNULL(РасчетРаспределенияКосвенныхРасходов.СуммаБазы, 0) КАК СуммаБазы,
	               |	РасчетРаспределенияКосвенныхРасходов.МетодРаспределенияЗатратСсылка,
	               |	ЕСТЬNULL(РасчетРаспределенияКосвенныхРасходов.СуммаБУ, 0) КАК СуммаБУ
	               |ИЗ
	               |	НакладныеРасходыРаспределения КАК НакладныеРасходыРаспределения
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РасчетРаспределенияКосвенныхРасходов_Основной КАК РасчетРаспределенияКосвенныхРасходов
	               |		ПО НакладныеРасходыРаспределения.Организация = РасчетРаспределенияКосвенныхРасходов.Организация
	               |			И НакладныеРасходыРаспределения.Подразделение = РасчетРаспределенияКосвенныхРасходов.Подразделение
	               |			И НакладныеРасходыРаспределения.СчетЗатрат = РасчетРаспределенияКосвенныхРасходов.СчетЗатрат
	               |			И НакладныеРасходыРаспределения.СтатьяЗатрат = РасчетРаспределенияКосвенныхРасходов.СтатьяЗатрат
	               |			И НакладныеРасходыРаспределения.СтруктурноеПодразделение = РасчетРаспределенияКосвенныхРасходов.СтруктурноеПодразделение
	               |		ЛЕВОЕ СОЕДИНЕНИЕ выпускпродукции КАК ВыпускПродукции
	               |		ПО (ВыпускПродукции.Организация = РасчетРаспределенияКосвенныхРасходов.Организация)
	               |			И (ВыпускПродукции.Подразделение = РасчетРаспределенияКосвенныхРасходов.ПодразделениеРаспределения)
	               |			И (ВыпускПродукции.НоменклатурнаяГруппа = РасчетРаспределенияКосвенныхРасходов.НоменклатурнаяГруппаРаспределения)
	               |			И (ВыпускПродукции.СтруктурноеПодразделение = РасчетРаспределенияКосвенныхРасходов.СтруктурноеПодразделениеРаспределения)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Подразделение,
	               |	СтатьяЗатрат,
	               |	СубконтоЗакрытия1,
	               |	СубконтоЗакрытия2,
	               |	СубконтоЗакрытия3
	               |ИТОГИ ПО
	               |	Метод";
								                                      		
	
	РезультатЗапроса = Запрос.Выполнить();
		
КонецПроцедуры // СформироватьЗапросПоКосвеннымЗатратам()

Функция РаспределитьОПРПоБазе(Реквизиты, Движения, ИмяРеквБазы, 
		Обход, НаборСтрок = 0, НеРаспределилосьПоБазе = Ложь, МетодРаспределения, ОбщаяСуммаДляСписания = 0)
		
		
	СтруктураДопПараметров = Реквизиты.ДопПараметры;	
	РаспределениеВыполнено = Ложь;
    ВсегоБазаРаспределения = 0;
	
	Если ОбщаяСуммаДляСписания = 0 Тогда 
		ОбщаяСуммаДляСписания = Обход.Сумма;
	КонецЕсли;
			
	Если СтруктураДопПараметров.Учет = "БУ" Тогда
		РегОперация = Перечисления.ВидыРегламентныхОпераций.РасчетСтоимостиПродукцииБУ;
	Иначе
		РегОперация = Перечисления.ВидыРегламентныхОпераций.РасчетСтоимостиПродукцииНУ;
	КонецЕсли;
	
	ЗаписьРасчетаКосвенныхРасходов = СтруктураДопПараметров.ЗаписьРасчетаКосвенныхРасходов;

	Если НаборСтрок = 0 Тогда
		Если НЕ ЗначениеЗаполнено(Обход.СчетЗакрытия) Тогда
			
			СтруктПоиска = Новый Структура;
			
			Если НЕ НеРаспределилосьПоБазе Тогда
				СтруктПоиска.Вставить("Подразделение", Обход.Подразделение);
				СтруктПоиска.Вставить("СтруктурноеПодразделение", Обход.СтруктурноеПодразделение);
				НаборСтрок = СтруктураДопПараметров.БазаКоэффициентов.НайтиСтроки(СтруктПоиска);
			Иначе
				НаборСтрок = СтруктураДопПараметров.БазаКоэффициентов.Скопировать();
			КонецЕсли;	
			
		Иначе
			НаборСтрок = СтруктураДопПараметров.БазаКоэффициентов.Скопировать();
		КонецЕсли;	
	КонецЕсли;
	
	// для процента берем базу из основного запроса
	Если СтруктураДопПараметров.Учет = "НУ" Тогда
		ВидУчетаЗатрат = Обход.ВидУчетаНакладных;
	КонецЕсли;
	
	Для Каждого СтрКоэф Из НаборСтрок Цикл
		Если Обход.Метод <> Перечисления.БазыРаспределенияКосвенныхРасходов.Процентом Тогда 
			ВсегоБазаРаспределения = ВсегоБазаРаспределения + СтрКоэф["База"+ИмяРеквБазы];
		КонецЕсли;
		Если СтруктураДопПараметров.Учет = "НУ" Тогда
			ВидУчетаЗатрат = СтрКоэф.ВидУчетаРаспределения;
		КонецЕсли;		
	КонецЦикла;		
	
	Если Обход.Метод = Перечисления.БазыРаспределенияКосвенныхРасходов.Процентом Тогда 
		ВсегоБазаРаспределения = 100;
	КонецЕсли;	
		
	СуммаКРаспр 					= 0;
	СуммаСписанияНаСебестоимость 	= 0;
	УчтеноБазаРаспределения 		= 0;
	
	// для процента распределяем по другой ветке запроса
	Если Обход.Метод = Перечисления.БазыРаспределенияКосвенныхРасходов.Процентом Тогда 
		
		БазаРаспределения 		= Обход.ПроцентРаспределения;
		
		УчтеноБазаРаспределения = УчтеноБазаРаспределения + БазаРаспределения;
		ДолжноБытьСписано 		= Окр(ОбщаяСуммаДляСписания * УчтеноБазаРаспределения / ВсегоБазаРаспределения, 2, 1);
		СуммаСписания 			= ДолжноБытьСписано - СуммаКРаспр;
		СуммаКРаспр 			= СуммаКРаспр + СуммаСписания;
		
		Если СуммаСписания <> 0 Тогда
			
			Если НЕ НеРаспределилосьПоБазе Тогда
				Содержание = СтрШаблон(НСтр("ru = 'Распределение ОПР, %1'", ОбщегоНазначения.КодОсновногоЯзыка()), Обход.МетодРаспределенияЗатратСсылка);
			Иначе
				Содержание = СтрШаблон(НСтр("ru = 'Распределение ОПР по всем подразделениям, %1'", ОбщегоНазначения.КодОсновногоЯзыка()), Обход.МетодРаспределенияЗатратСсылка);
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Обход.СчетЗакрытия) И НЕ Обход.СчетЗатрат.Забалансовый Тогда
				
				ТекстСообщения = НСтр("ru = '<%1>: не заполнен счет дебета'", ОбщегоНазначения.КодОсновногоЯзыка());
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Содержание);
				
				ЭтоОшибка = Истина;
				ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации(ТекстСообщения,,, Реквизиты.Объект, РегОперация, ЭтоОшибка);
				СуммаСписания = 0;
				РаспределениеВыполнено = Ложь;
				
			ИначеЕсли НЕ ЗначениеЗаполнено(Обход.СчетЗатрат) И НЕ Обход.СчетЗакрытия.Забалансовый Тогда
				
				ТекстСообщения = НСтр("ru = '<%1>: не заполнен счет кредита'", ОбщегоНазначения.КодОсновногоЯзыка());
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Содержание);			
				
				ЭтоОшибка = Истина;
				ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации(ТекстСообщения,,, Реквизиты.Объект, РегОперация, ЭтоОшибка);
				СуммаСписания = 0;
				РаспределениеВыполнено = Ложь;
				
			Иначе
				
				//НоваяПроводка = Движения.Добавить();
				
				Если СтруктураДопПараметров.Учет = "НУ" Тогда
					НоваяПроводка = Движения.Налоговый.Добавить();
				Иначе
					НоваяПроводка = Движения.Типовой.Добавить();
				КонецЕсли;
				
				НоваяПроводка.Организация = Реквизиты.Организация;
				НоваяПроводка.Активность  = Истина;
				НоваяПроводка.Период      = Реквизиты.Период;
				
				НоваяПроводка.СтруктурноеПодразделениеДт = Обход.СтруктурноеПодразделение;
				НоваяПроводка.СтруктурноеПодразделениеКт = Обход.СтруктурноеПодразделениеЗакрытия;
				
				НоваяПроводка.ВидРегламентнойОперации = РегОперация;
				НоваяПроводка.Содержание = Содержание;
				//Если НЕ НеРаспределилосьПоБазе Тогда
				//	НоваяПроводка.Содержание  = "Распределение ОПР, " + Обход.МетодРаспределенияЗатратСсылка;
				//Иначе
				//	НоваяПроводка.Содержание  = "Распределение ОПР по всем подразделениям, " + Обход.МетодРаспределенияЗатратСсылка;
				//КонецЕсли;
				
				НоваяПроводка.Сумма = СуммаСписания;
							
				НоваяПроводка.СчетДт = Обход.СчетЗакрытия;
				
				Для НомерСубконто = 1 По Обход.СчетЗакрытия.ВидыСубконто.Количество() Цикл
					
					Если (ТипЗнч(Обход["СубконтоЗакрытия" + НомерСубконто]) = Тип("СправочникСсылка.ПодразделенияОрганизаций")) Тогда
						
						Если ЗначениеЗаполнено(Обход["СубконтоЗакрытия" + НомерСубконто]) Тогда
							УстанавливаемоеЗначениеАналитики = Обход["СубконтоЗакрытия" + НомерСубконто];
						КонецЕсли;	
						ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, НомерСубконто, УстанавливаемоеЗначениеАналитики);	
						
					ИначеЕсли (ТипЗнч(Обход["СубконтоЗакрытия" + НомерСубконто]) = Тип("СправочникСсылка.НоменклатурныеГруппы")) Тогда
						
						Если ЗначениеЗаполнено(Обход["СубконтоЗакрытия" + НомерСубконто]) Тогда
							УстанавливаемоеЗначениеАналитики = Обход["СубконтоЗакрытия" + НомерСубконто];
						КонецЕсли;	
						
					ИначеЕсли (ТипЗнч(Обход["СубконтоЗакрытия" + НомерСубконто]) = Тип("СправочникСсылка.СтатьиЗатрат")) Тогда
						
						Если НЕ ЗначениеЗаполнено(Обход["СубконтоЗакрытия" + НомерСубконто]) Тогда
							УстанавливаемоеЗначениеАналитики = Обход.СтатьяЗатрат;
						Иначе
							УстанавливаемоеЗначениеАналитики = Обход["СубконтоЗакрытия" + НомерСубконто];
						КонецЕсли;	
						
					Иначе
						УстанавливаемоеЗначениеАналитики = Обход["СубконтоЗакрытия" + НомерСубконто];
					КонецЕсли;
					
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, НомерСубконто, УстанавливаемоеЗначениеАналитики);	
					
				КонецЦикла;
						
				НоваяПроводка.СчетКт = Обход.СчетЗатрат;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "Подразделения",        Обход.Подразделение);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "СтатьиЗатрат",         Обход.СтатьяЗатрат);
				
				Если СтруктураДопПараметров.Учет = "НУ" Тогда
					НоваяПроводка.ВидУчетаДт = ВидУчетаЗатрат;
					НоваяПроводка.ВидУчетаКт = Обход.ВидУчетаНакладных;
				КонецЕсли;
				
				РаспределениеВыполнено = Истина;
				
			КонецЕсли;

		КонецЕсли;
		
		Если Не СуммаСписания = 0 Тогда
			
			//запишем данные в вспомогательный регистр
			СтрокаЗаписьРасчетаКосвенныхРасходов = ЗаписьРасчетаКосвенныхРасходов.Добавить();
			СтрокаЗаписьРасчетаКосвенныхРасходов.СчетУчета = Обход.СчетЗатрат;
			СтрокаЗаписьРасчетаКосвенныхРасходов.ВидОперации = Перечисления.ВидыОперацийРасчетаКосвенныхРасходов.РаспределениеОбщепроизводственныхРасходов;
			СтрокаЗаписьРасчетаКосвенныхРасходов.Подразделение = Обход.Подразделение;
			СтрокаЗаписьРасчетаКосвенныхРасходов.СтатьяЗатрат = Обход.СтатьяЗатрат;
			СтрокаЗаписьРасчетаКосвенныхРасходов.БазаРаспределения = МетодРаспределения;
			СтрокаЗаписьРасчетаКосвенныхРасходов.СуммаБазы = БазаРаспределения;
			
			// направления распределения возьмем из проводок, так как в проводках уже все определено, исходя из метода распределения
			СтрокаЗаписьРасчетаКосвенныхРасходов.СчетРаспределения = НоваяПроводка.СчетДт;
			Для Каждого СубконтоСчета Из НоваяПроводка.СчетДт.ВидыСубконто Цикл
				Если СубконтоСчета.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоТиповые.Подразделения Тогда
					
					СтрокаЗаписьРасчетаКосвенныхРасходов.ПодразделениеРаспределения =
					НоваяПроводка.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконтоТиповые.Подразделения];
					
				ИначеЕсли СубконтоСчета.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоТиповые.НоменклатурныеГруппы Тогда	
					
					СтрокаЗаписьРасчетаКосвенныхРасходов.НоменклатурнаяГруппаРаспределения =
					НоваяПроводка.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконтоТиповые.НоменклатурныеГруппы];
					
				ИначеЕсли СубконтоСчета.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоТиповые.СтатьиЗатрат Тогда	
						
					СтрокаЗаписьРасчетаКосвенныхРасходов.СтатьяЗатратРаспределения =
					НоваяПроводка.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконтоТиповые.СтатьиЗатрат]; 
					
				КонецЕсли;	
			КонецЦикла;	
			
			СтрокаЗаписьРасчетаКосвенныхРасходов.Сумма = СуммаСписания;
			СтрокаЗаписьРасчетаКосвенныхРасходов.СтруктурноеПодразделение = Обход.СтруктурноеПодразделение;
			
			ВидУчета = ?(СтруктураДопПараметров.Учет = "НУ", Обход.ВидУчетаНакладных, Справочники.ВидыУчетаНУ.ПустаяСсылка());
			СтрокаЗаписьРасчетаКосвенныхРасходов.ВидУчета = ВидУчета;
			СтрокаЗаписьРасчетаКосвенныхРасходов.МетодРаспределенияКосвенныхРасходов = Обход.МетодРаспределенияЗатратСсылка;
			
			Если СтруктураДопПараметров.Учет = "БУ"  Тогда
									
				//Для расчета базы по НУ						
				СтрокаЗаписьРасчетаКосвенныхРасходов = ЗаписьРасчетаКосвенныхРасходов.Добавить();
				СтрокаЗаписьРасчетаКосвенныхРасходов.СчетУчета = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ, ", НоваяПроводка.СчетКт),,, Реквизиты.Период);;
				СтрокаЗаписьРасчетаКосвенныхРасходов.ВидОперации = Перечисления.ВидыОперацийРасчетаКосвенныхРасходов.РаспределениеОбщепроизводственныхРасходов;
				СтрокаЗаписьРасчетаКосвенныхРасходов.Подразделение = Обход.Подразделение;
				СтрокаЗаписьРасчетаКосвенныхРасходов.СтатьяЗатрат = Обход.СтатьяЗатрат;
				СтрокаЗаписьРасчетаКосвенныхРасходов.БазаРаспределения = Обход.Метод;
				СтрокаЗаписьРасчетаКосвенныхРасходов.СчетРаспределения = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ, ", НоваяПроводка.СчетДт),,, Реквизиты.Период);
								
				Если НЕ ЗначениеЗаполнено(Обход.СчетЗакрытияНУ) Тогда
					СтрокаЗаписьРасчетаКосвенныхРасходов.СчетРаспределения = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ, ", НоваяПроводка.СчетДт),,, Реквизиты.Период);
				Иначе
					СтрокаЗаписьРасчетаКосвенныхРасходов.СчетРаспределения = Обход.СчетЗакрытияНУ;
				КонецЕсли;
				
				СтрокаЗаписьРасчетаКосвенныхРасходов.СтруктурноеПодразделениеРаспределения  = Обход.СтруктурноеПодразделениеЗакрытия;
				
				НомерСубконтоПодразделенияНУ = 0;
				НомерСубконтоНоменклатурнойГруппыНУ = 0;
				НомерСубконтоСтатьиЗатратНУ = 0;
				
				Для НомерСубконто = 1 По 3 Цикл 					
					Если Не ЗначениеЗаполнено(Обход["СубконтоЗакрытияНУ" + НомерСубконто]) Тогда
						Продолжить;
					КонецЕсли;
					
					Если ТипЗнч(Обход["СубконтоЗакрытияНУ" + НомерСубконто]) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
						НомерСубконтоПодразделенияНУ = НомерСубконто;
					ИначеЕсли ТипЗнч(Обход["СубконтоЗакрытияНУ" + НомерСубконто]) = Тип("СправочникСсылка.НоменклатурныеГруппы") Тогда
						НомерСубконтоНоменклатурнойГруппыНУ = НомерСубконто;
					ИначеЕсли ТипЗнч(Обход["СубконтоЗакрытияНУ" + НомерСубконто]) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда
						НомерСубконтоСтатьиЗатратНУ = НомерСубконто;
					КонецЕсли;  					
				КонецЦикла;
				
				СтрокаЗаписьРасчетаКосвенныхРасходов.ПодразделениеРаспределения = ?(НомерСубконтоПодразделенияНУ = 0, 
					НоваяПроводка.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконтоТиповые.Подразделения], Обход["СубконтоЗакрытияНУ" + НомерСубконтоПодразделенияНУ]);
				
				СтрокаЗаписьРасчетаКосвенныхРасходов.НоменклатурнаяГруппаРаспределения = ?(НомерСубконтоНоменклатурнойГруппыНУ = 0,
					НоваяПроводка.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконтоТиповые.НоменклатурныеГруппы],Обход["СубконтоЗакрытияНУ" + НомерСубконтоНоменклатурнойГруппыНУ]) ;
				
				СтрокаЗаписьРасчетаКосвенныхРасходов.СтатьяЗатратРаспределения = ?(НомерСубконтоСтатьиЗатратНУ = 0,
					НоваяПроводка.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконтоТиповые.СтатьиЗатрат], Обход["СубконтоЗакрытияНУ" + НомерСубконтоСтатьиЗатратНУ]);				
				
				СтрокаЗаписьРасчетаКосвенныхРасходов.СтруктурноеПодразделение = Обход.СтруктурноеПодразделение;
				СтрокаЗаписьРасчетаКосвенныхРасходов.СтруктурноеПодразделениеРаспределения  = Обход.СтруктурноеПодразделениеЗакрытия;
				СтрокаЗаписьРасчетаКосвенныхРасходов.РасчетБазы  		   = Истина;				
				СтрокаЗаписьРасчетаКосвенныхРасходов.Сумма		  		   = СуммаСписания;				
				СтрокаЗаписьРасчетаКосвенныхРасходов.СуммаБазы = БазаРаспределения;	
				СтрокаЗаписьРасчетаКосвенныхРасходов.МетодРаспределенияКосвенныхРасходов = Обход.МетодРаспределенияЗатратСсылка;
			КонецЕсли;									
		КонецЕсли;
		
	Иначе 
		
		Для Каждого СтрКоэф Из НаборСтрок Цикл
			
			Если (ТипЗнч(Обход.СубконтоЗакрытия1) = Тип("СправочникСсылка.ПодразделенияОрганизаций")) Тогда
				Если ЗначениеЗаполнено(Обход.СубконтоЗакрытия1) Тогда
					Если СтрКоэф.Подразделение <> Обход.СубконтоЗакрытия1 Тогда  						
						Продолжить;
						
					КонецЕсли;
				КонецЕсли;	
			КонецЕсли;
			
			БазаРаспределения = СтрКоэф["База"+ИмяРеквБазы];
			
			Если БазаРаспределения = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			УчтеноБазаРаспределения = УчтеноБазаРаспределения + БазаРаспределения;
			ДолжноБытьСписано 		= Окр(ОбщаяСуммаДляСписания * УчтеноБазаРаспределения / ВсегоБазаРаспределения, 2, 1);
			СуммаСписания 			= ДолжноБытьСписано - СуммаКРаспр;
			СуммаКРаспр 			= СуммаКРаспр + СуммаСписания;			
			
			Если СуммаСписания <> 0 Тогда
				
				Если НЕ НеРаспределилосьПоБазе Тогда
					Содержание = СтрШаблон(НСтр("ru = 'Распределение ОПР, %1'", ОбщегоНазначения.КодОсновногоЯзыка()), Обход.МетодРаспределенияЗатратСсылка);
				Иначе
					Содержание = СтрШаблон(НСтр("ru = 'Распределение ОПР по всем подразделениям, %1'", ОбщегоНазначения.КодОсновногоЯзыка()), Обход.МетодРаспределенияЗатратСсылка);
				КонецЕсли;	
				
				Если НЕ ЗначениеЗаполнено(Обход.СчетЗатрат) Тогда
					
					ТекстСообщения = НСтр("ru = '<%1>: не заполнен счет кредита'", ОбщегоНазначения.КодОсновногоЯзыка());
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Содержание);			
					
					ЭтоОшибка = Истина;
					ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации(ТекстСообщения,,, Реквизиты.Объект, РегОперация, ЭтоОшибка);
					СуммаСписания = 0;
					РаспределениеВыполнено = Ложь;
					
				Иначе
					
					Если СтруктураДопПараметров.Учет = "НУ" Тогда
						НоваяПроводка = Движения.Налоговый.Добавить();
					Иначе
						НоваяПроводка = Движения.Типовой.Добавить();
					КонецЕсли;

					НоваяПроводка.Организация = Реквизиты.Организация;
					НоваяПроводка.Активность  = Истина;
					НоваяПроводка.Период      = Реквизиты.Период;
					
					НоваяПроводка.ВидРегламентнойОперации = РегОперация;
					НоваяПроводка.Содержание = Содержание;
					//Если НЕ НеРаспределилосьПоБазе Тогда
					//	НоваяПроводка.Содержание  = "Распределение ОПР, " + Обход.МетодРаспределенияЗатратСсылка;
					//Иначе
					//	НоваяПроводка.Содержание  = "Распределение ОПР по всем подразделениям, " + Обход.МетодРаспределенияЗатратСсылка;
					//КонецЕсли;	
					
					НоваяПроводка.Сумма = СуммаСписания;
					
					Если НЕ ЗначениеЗаполнено(Обход.СчетЗакрытия) Тогда//стандартное распределение
						
						НоваяПроводка.СчетДт = СтрКоэф.СчетЗатрат;
						ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "НоменклатурныеГруппы", СтрКоэф.НоменклатурнаяГруппа);
						ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "Подразделения",        СтрКоэф.Подразделение);
						ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "СтатьиЗатрат",         Обход.СтатьяЗатрат);
						
						ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(НоваяПроводка, 
						Обход.СтруктурноеПодразделение, Обход.СтруктурноеПодразделение);
						// Присутствует счет закрытия	
					Иначе
						
						// Если производится повторное распределение после того, как не распределились ОПР по аналитике 
						// закрытия, то заполнить можно только статью затрат. Остальные аналитики - из базы коэффициентов
						Если НеРаспределилосьПоБазе Тогда
							
							НоваяПроводка.СчетДт 					 = СтрКоэф.СчетЗатрат;
							НоваяПроводка.СтруктурноеПодразделениеДт = СтрКоэф.СтруктурноеПодразделение;
							
							ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "НоменклатурныеГруппы", СтрКоэф.НоменклатурнаяГруппа);
							ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "Подразделения",        СтрКоэф.Подразделение);
							ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "СтатьиЗатрат",         Обход.СтатьяЗатрат);
							
							Для НомерСубконто = 1 По Обход.СчетЗакрытия.ВидыСубконто.Количество() Цикл
								
								Если (ТипЗнч(Обход["СубконтоЗакрытия" + НомерСубконто]) = Тип("СправочникСсылка.СтатьиЗатрат")) Тогда
									
									Если НЕ ЗначениеЗаполнено(Обход["СубконтоЗакрытия" + НомерСубконто]) Тогда
										УстанавливаемоеЗначениеАналитики = Обход.СтатьяЗатрат;
									Иначе
										УстанавливаемоеЗначениеАналитики = Обход["СубконтоЗакрытия" + НомерСубконто];
									КонецЕсли;	
									ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, НомерСубконто, УстанавливаемоеЗначениеАналитики);	
								КонецЕсли;	
								
							КонецЦикла;
							
							НоваяПроводка.СчетКт 					 = Обход.СчетЗатрат;
							НоваяПроводка.СтруктурноеПодразделениеКт = Обход.СтруктурноеПодразделение;
					
							ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "Подразделения", Обход.Подразделение);
							ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "СтатьиЗатрат",  Обход.СтатьяЗатрат);
							
							ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(НоваяПроводка, 
							Обход.СтруктурноеПодразделение, Обход.СтруктурноеПодразделение);
							
							РаспределениеВыполнено = Истина;
							
							// Производится первоначальное распределение на счет закрытия	 
						Иначе	
							
							НоваяПроводка.СчетДт 					 = Обход.СчетЗакрытия;
							НоваяПроводка.СтруктурноеПодразделениеДт = Обход.СтруктурноеПодразделениеЗакрытия;
													
							Для НомерСубконто = 1 По Обход.СчетЗакрытия.ВидыСубконто.Количество() Цикл
								
								Если (ТипЗнч(Обход["СубконтоЗакрытия" + НомерСубконто]) = Тип("СправочникСсылка.ПодразделенияОрганизаций")) Тогда
									
									Если НЕ ЗначениеЗаполнено(Обход["СубконтоЗакрытия" + НомерСубконто]) Тогда
										УстанавливаемоеЗначениеАналитики = СтрКоэф.Подразделение;
									Иначе
										УстанавливаемоеЗначениеАналитики = Обход["СубконтоЗакрытия" + НомерСубконто];
									КонецЕсли;	
									ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, НомерСубконто, УстанавливаемоеЗначениеАналитики);	
									
								ИначеЕсли (ТипЗнч(Обход["СубконтоЗакрытия" + НомерСубконто]) = Тип("СправочникСсылка.НоменклатурныеГруппы")) Тогда
									
									Если НЕ ЗначениеЗаполнено(Обход["СубконтоЗакрытия" + НомерСубконто]) Тогда
										УстанавливаемоеЗначениеАналитики = СтрКоэф.НоменклатурнаяГруппа;
									Иначе
										УстанавливаемоеЗначениеАналитики = Обход["СубконтоЗакрытия" + НомерСубконто];
									КонецЕсли;	
									
								ИначеЕсли (ТипЗнч(Обход["СубконтоЗакрытия" + НомерСубконто]) = Тип("СправочникСсылка.СтатьиЗатрат")) Тогда
									
									Если НЕ ЗначениеЗаполнено(Обход["СубконтоЗакрытия" + НомерСубконто]) Тогда
										УстанавливаемоеЗначениеАналитики = Обход.СтатьяЗатрат;
									Иначе
										УстанавливаемоеЗначениеАналитики = Обход["СубконтоЗакрытия" + НомерСубконто];
									КонецЕсли;	
									
								Иначе
									УстанавливаемоеЗначениеАналитики = Обход["СубконтоЗакрытия" + НомерСубконто];
								КонецЕсли;
								
								ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, НомерСубконто, УстанавливаемоеЗначениеАналитики);	
								
							КонецЦикла;
							
						КонецЕсли;
						
					КонецЕсли;
					
					НоваяПроводка.СчетКт 					 = Обход.СчетЗатрат;
					НоваяПроводка.СтруктурноеПодразделениеКт = Обход.СтруктурноеПодразделение;
					
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "Подразделения",        Обход.Подразделение);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "СтатьиЗатрат",         Обход.СтатьяЗатрат);
					
					Если СтруктураДопПараметров.Учет = "НУ" Тогда
						НоваяПроводка.ВидУчетаДт = Обход.ВидУчетаНакладных;
						НоваяПроводка.ВидУчетаКт = Обход.ВидУчетаРаспределения;
					КонецЕсли;
					
					РаспределениеВыполнено = Истина;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если Не СуммаСписания = 0 Тогда
				
				//запишем данные в вспомогательный регистр
				СтрокаЗаписьРасчетаКосвенныхРасходов = СтруктураДопПараметров.ЗаписьРасчетаКосвенныхРасходов.Добавить();
				СтрокаЗаписьРасчетаКосвенныхРасходов.СчетУчета = Обход.СчетЗатрат;
				СтрокаЗаписьРасчетаКосвенныхРасходов.ВидОперации = Перечисления.ВидыОперацийРасчетаКосвенныхРасходов.РаспределениеОбщепроизводственныхРасходов;
				СтрокаЗаписьРасчетаКосвенныхРасходов.Подразделение = Обход.Подразделение;
				СтрокаЗаписьРасчетаКосвенныхРасходов.СтатьяЗатрат = Обход.СтатьяЗатрат;
				СтрокаЗаписьРасчетаКосвенныхРасходов.БазаРаспределения = МетодРаспределения;
				СтрокаЗаписьРасчетаКосвенныхРасходов.СуммаБазы = БазаРаспределения;
				СтрокаЗаписьРасчетаКосвенныхРасходов.СтруктурноеПодразделениеРаспределения  = Обход.СтруктурноеПодразделениеЗакрытия;
								
				// направления распределения возьмем из проводок, так как в проводках уже все определено, исходя из метода распределения
				СтрокаЗаписьРасчетаКосвенныхРасходов.СчетРаспределения = НоваяПроводка.СчетДт;
				Для Каждого СубконтоСчета Из НоваяПроводка.СчетДт.ВидыСубконто Цикл
					Если СубконтоСчета.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоТиповые.Подразделения Тогда
						
						СтрокаЗаписьРасчетаКосвенныхРасходов.ПодразделениеРаспределения =
						НоваяПроводка.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконтоТиповые.Подразделения];
						
					ИначеЕсли СубконтоСчета.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоТиповые.НоменклатурныеГруппы Тогда	
						
						СтрокаЗаписьРасчетаКосвенныхРасходов.НоменклатурнаяГруппаРаспределения =
						НоваяПроводка.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконтоТиповые.НоменклатурныеГруппы];
						
					ИначеЕсли СубконтоСчета.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоТиповые.СтатьиЗатрат Тогда	
						
						СтрокаЗаписьРасчетаКосвенныхРасходов.СтатьяЗатратРаспределения =
						НоваяПроводка.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконтоТиповые.СтатьиЗатрат];
						
					КонецЕсли;	
				КонецЦикла;	
				
				СтрокаЗаписьРасчетаКосвенныхРасходов.Сумма = СуммаСписания;
				СтрокаЗаписьРасчетаКосвенныхРасходов.СтруктурноеПодразделение = Обход.СтруктурноеПодразделение;
				
				ВидУчета = ?(СтруктураДопПараметров.Учет = "НУ", Обход.ВидУчетаНакладных, Справочники.ВидыУчетаНУ.ПустаяСсылка());
				СтрокаЗаписьРасчетаКосвенныхРасходов.ВидУчета = ВидУчета;
				СтрокаЗаписьРасчетаКосвенныхРасходов.МетодРаспределенияКосвенныхРасходов = Обход.МетодРаспределенияЗатратСсылка;
				
				Если СтруктураДопПараметров.Учет = "БУ"  Тогда
					
					//Для расчета базы по НУ						
					СтрокаЗаписьРасчетаКосвенныхРасходов = ЗаписьРасчетаКосвенныхРасходов.Добавить();
					СтрокаЗаписьРасчетаКосвенныхРасходов.СчетУчета = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ, ", НоваяПроводка.СчетКт),,, Реквизиты.Период);
					СтрокаЗаписьРасчетаКосвенныхРасходов.ВидОперации = Перечисления.ВидыОперацийРасчетаКосвенныхРасходов.РаспределениеОбщепроизводственныхРасходов;
					СтрокаЗаписьРасчетаКосвенныхРасходов.Подразделение = Обход.Подразделение;
					СтрокаЗаписьРасчетаКосвенныхРасходов.СтатьяЗатрат = Обход.СтатьяЗатрат;
					СтрокаЗаписьРасчетаКосвенныхРасходов.БазаРаспределения = Обход.Метод;
					Если НЕ ЗначениеЗаполнено(Обход.СчетЗакрытияНУ) Тогда
						СтрокаЗаписьРасчетаКосвенныхРасходов.СчетРаспределения = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ, ", НоваяПроводка.СчетДт),,, Реквизиты.Период);
					Иначе
						СтрокаЗаписьРасчетаКосвенныхРасходов.СчетРаспределения = Обход.СчетЗакрытияНУ;
					КонецЕсли;
					
					СтрокаЗаписьРасчетаКосвенныхРасходов.СтруктурноеПодразделениеРаспределения  = Обход.СтруктурноеПодразделениеЗакрытия;
					
					НомерСубконтоПодразделенияНУ = 0;
					НомерСубконтоНоменклатурнойГруппыНУ = 0;
					НомерСубконтоСтатьиЗатратНУ = 0;
					
					Для НомерСубконто = 1 По 3 Цикл
						
						Если Не ЗначениеЗаполнено(Обход["СубконтоЗакрытияНУ" + НомерСубконто]) Тогда
							Продолжить;
						КонецЕсли;
						
						Если ТипЗнч(Обход["СубконтоЗакрытияНУ" + НомерСубконто]) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
							НомерСубконтоПодразделенияНУ = НомерСубконто;
						ИначеЕсли ТипЗнч(Обход["СубконтоЗакрытияНУ" + НомерСубконто]) = Тип("СправочникСсылка.НоменклатурныеГруппы") Тогда
							НомерСубконтоНоменклатурнойГруппыНУ = НомерСубконто;
						ИначеЕсли ТипЗнч(Обход["СубконтоЗакрытияНУ" + НомерСубконто]) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда
							НомерСубконтоСтатьиЗатратНУ = НомерСубконто;
						КонецЕсли;
						
					КонецЦикла;
					
					СтрокаЗаписьРасчетаКосвенныхРасходов.ПодразделениеРаспределения = ?(НомерСубконтоПодразделенияНУ = 0, 
					НоваяПроводка.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконтоТиповые.Подразделения], Обход["СубконтоЗакрытияНУ" + НомерСубконтоПодразделенияНУ]);
					
					СтрокаЗаписьРасчетаКосвенныхРасходов.НоменклатурнаяГруппаРаспределения = ?(НомерСубконтоНоменклатурнойГруппыНУ = 0,
					НоваяПроводка.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконтоТиповые.НоменклатурныеГруппы],Обход["СубконтоЗакрытияНУ" + НомерСубконтоНоменклатурнойГруппыНУ]) ;
					
					СтрокаЗаписьРасчетаКосвенныхРасходов.СтатьяЗатратРаспределения = ?(НомерСубконтоСтатьиЗатратНУ = 0,
					НоваяПроводка.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконтоТиповые.СтатьиЗатрат], Обход["СубконтоЗакрытияНУ" + НомерСубконтоСтатьиЗатратНУ]);												
					
					СтрокаЗаписьРасчетаКосвенныхРасходов.СтруктурноеПодразделение = Обход.СтруктурноеПодразделение;
					СтрокаЗаписьРасчетаКосвенныхРасходов.СтруктурноеПодразделениеРаспределения  = Обход.СтруктурноеПодразделениеЗакрытия;
					СтрокаЗаписьРасчетаКосвенныхРасходов.РасчетБазы  		   = Истина;				
					СтрокаЗаписьРасчетаКосвенныхРасходов.Сумма      		   = СуммаСписания;				
					СтрокаЗаписьРасчетаКосвенныхРасходов.СуммаБазы = БазаРаспределения;	
					СтрокаЗаписьРасчетаКосвенныхРасходов.МетодРаспределенияКосвенныхРасходов = Обход.МетодРаспределенияЗатратСсылка;
				КонецЕсли;								
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	
	Если НеРаспределилосьПоБазе Тогда
		ЭтоОшибка = Истина;
		
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Нет базы распределения для косвенных расходов, учитываемых следующим образом:
		|Счет учета			: %1.
		|Подразделение		: %2.
		|Статья затрат		: %3.'", КодОсновногоЯзыка), Обход.СчетЗатрат, Обход.Подразделение, Обход.СтатьяЗатрат);
		Если ЗначениеЗаполнено(Обход.СчетЗакрытия) Тогда
			
			ТекстСообщения = ТекстСообщения + Символы.ПС + СтрШаблон(НСтр("ru = 'Счет закрытия		: %1.'", КодОсновногоЯзыка), Обход.СчетЗакрытия);
			
			Для НомерСубконто = 1 По Обход.СчетЗакрытия.ВидыСубконто.Количество() Цикл
				ТекущаяАналитика = НСтр("ru = '<РАСПРЕДЕЛЕНИЕ>'", КодОсновногоЯзыка);
				Если ЗначениеЗаполнено(Обход["СубконтоЗакрытия" + НомерСубконто]) Тогда
					ТекущаяАналитика = Обход["СубконтоЗакрытия" + НомерСубконто];
				КонецЕсли;	
				ТекстСообщения = ТекстСообщения + Символы.ПС + СтрШаблон(НСтр("ru = 'Субконто закрытия %1	: %2.'", КодОсновногоЯзыка), НомерСубконто, ТекущаяАналитика);
			КонецЦикла;
			
		КонецЕсли;
		
		Если РаспределениеВыполнено Тогда
			ЭтоОшибка = Ложь;
			ТекстСообщения = ТекстСообщения + Символы.ПС + СтрШаблон(НСтр("ru = 'Косвенные расходы были распределены на все подразделения по базе распределения ""%1""'", КодОсновногоЯзыка), Обход.Метод);
		КонецЕсли;
		
		ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации(ТекстСообщения, , , Реквизиты.Объект, РегОперация, ЭтоОшибка);
		
	КонецЕсли;
	
	Возврат РаспределениеВыполнено;
	
КонецФункции //РаспределитьОПРПоБазе

Функция РаспределитьОПР(Реквизиты, Движения)
	
	СтруктураДопПараметров = Реквизиты.ДопПараметры;

	// Формирование запроса по косвенным расходам
	РезультатЗапроса = Неопределено;
	
	РаспределениеВыполнено = Ложь;
	
	СформироватьЗапросПоКосвеннымЗатратам(Реквизиты, РезультатЗапроса);
	
	ДеревоОбходПоМетодамРаспределения = РезультатЗапроса.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	ДеревоОбходПоМетодамРаспределения.Колонки.Добавить("БазаРаспределения");
	ДеревоОбходПоМетодамРаспределения.Колонки.Добавить("РезультатРаспределения");
	ДеревоОбходПоМетодамРаспределения.Колонки.Добавить("НаборСтрок");
	
	СтруктПоиска = Новый Структура;
	
	Если СтруктураДопПараметров.Учет = "НУ"  Тогда
		РегОперация = Перечисления.ВидыРегламентныхОпераций.РасчетСтоимостиПродукцииНУ;
	Иначе
		РегОперация = Перечисления.ВидыРегламентныхОпераций.РасчетСтоимостиПродукцииБУ;
	КонецЕсли;
	
	Для Каждого ОбходПоМетодамРаспределения Из ДеревоОбходПоМетодамРаспределения.Строки Цикл
		
		Если ОбходПоМетодамРаспределения.Метод = Перечисления.БазыРаспределенияКосвенныхРасходов.МатериальныеЗатраты Тогда
			ИмяРеквБазы = "Мат";
		ИначеЕсли ОбходПоМетодамРаспределения.Метод = Перечисления.БазыРаспределенияКосвенныхРасходов.ОплатаТруда Тогда
			ИмяРеквБазы = "ЗП";
		ИначеЕсли ОбходПоМетодамРаспределения.Метод = Перечисления.БазыРаспределенияКосвенныхРасходов.ПлановаяСебестоимость Тогда
			ИмяРеквБазы = "План";
		ИначеЕсли ОбходПоМетодамРаспределения.Метод = Перечисления.БазыРаспределенияКосвенныхРасходов.ОбъемВыпуска Тогда
			ИмяРеквБазы = "Выпуск";
		ИначеЕсли ОбходПоМетодамРаспределения.Метод = Перечисления.БазыРаспределенияКосвенныхРасходов.Процентом Тогда
			ИмяРеквБазы = "Процент";
		ИначеЕсли ОбходПоМетодамРаспределения.Метод = Перечисления.БазыРаспределенияКосвенныхРасходов.НеРаспределяется Тогда
			Для Каждого Обход Из ОбходПоМетодамРаспределения.Строки Цикл
				
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Установлен метод ""Не распределять"" общепроизводственные расходы для:
					|Подразделение: %1
					|Статья затрат: %2'", ОбщегоНазначения.КодОсновногоЯзыка()), Обход.Подразделение, Обход.СтатьяЗатрат);
				ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации(ТекстСообщения, , , Реквизиты.Объект, РегОперация, Ложь);
				
			КонецЦикла;
			Продолжить;
		Иначе
			Для Каждого Обход Из ОбходПоМетодамРаспределения.Строки Цикл
				Если СтруктураДопПараметров.Учет = "НУ" И Обход.Сумма <> 0 И Обход.СуммаБазы = 0  Тогда
					ТекстСообщения = СтрШаблон(НСтр("ru = 'Нет зарегистрированных данных в бухгалтерском учете для распределения накладных расходов в НУ:
						|Подразделение: %1
						|Статья затрат: %2
						|Нераспределенная сумма накладных: %3'", ОбщегоНазначения.КодОсновногоЯзыка()), Обход.Подразделение, Обход.СтатьяЗатрат, Обход.Сумма);
					ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации(ТекстСообщения, , , Реквизиты.Объект, РегОперация, Ложь);
				Иначе
					ТекстСообщения = СтрШаблон(НСтр("ru = 'Не указан способ распределения общепроизводственных расходов для:
						|Подразделение: %1
						|Статья затрат: %2'", ОбщегоНазначения.КодОсновногоЯзыка()), Обход.Подразделение, Обход.СтатьяЗатрат);
					ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации(ТекстСообщения, , , Реквизиты.Объект, РегОперация, Ложь);
				КонецЕсли;
			КонецЦикла;
			Продолжить;
		КонецЕсли;
		
		МассивГрупп    			 	= Новый Массив();
		ПодразделениеДляПроверки 	= Неопределено;
		СтатьяЗатратДляПроверки  	= Неопределено;
		СуммаДляПроверки 			= Неопределено;
		ПроцентРаспределения 	 	= 0;
		СуммаРспределенияПоПроценту = 0;
	
		// Первым проходом получим базу распределения там, где это необходимо
		// Так же выделим группы строк
		// Этим же проходом формируем проводки по простым схемам распределения
		Для Каждого Обход Из ОбходПоМетодамРаспределения.Строки Цикл
			
			// сумма для распределения не должна быть равной или меньше нуля
			Если Обход.Сумма = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			// в НУ не может быть ситуации когда не заполнен счет закрытия, данные рассчитываются и определяются при расчете БУ
			Если Не ЗначениеЗаполнено(Обход.СчетЗакрытия) И СтруктураДопПараметров.Учет = "БУ" Тогда
				
				// Стандартное распределение
				РаспределениеВыполнено = РаспределитьОПРПоБазе(Реквизиты, Движения, ИмяРеквБазы, Обход, , , ОбходПоМетодамРаспределения.Метод);
				
				// Распределение по всем подразделениям
				Если Не РаспределениеВыполнено Тогда
					РаспределениеВыполнено = РаспределитьОПРПоБазе(Реквизиты, Движения, ИмяРеквБазы, Обход, , Истина, ОбходПоМетодамРаспределения.Метод);
				КонецЕсли;
				
			ИначеЕсли НЕ Обход.ПризнакПроизводсвенногоСчета ИЛИ Обход.Метод = Перечисления.БазыРаспределенияКосвенныхРасходов.Процентом Тогда
				
				Если СтруктураДопПараметров.Учет = "НУ" Тогда
					НоваяПроводка = Движения.Налоговый.Добавить();
				Иначе
					НоваяПроводка = Движения.Типовой.Добавить();
				КонецЕсли;
				
				НоваяПроводка.Организация = Реквизиты.Организация;
				НоваяПроводка.Активность  = Истина;
				НоваяПроводка.Период      = Реквизиты.Период;
				НоваяПроводка.Содержание  = НСтр("ru = 'Списание ОПР на непроизводственные счета'", ОбщегоНазначения.КодОсновногоЯзыка());
				НоваяПроводка.ВидРегламентнойОперации = РегОперация;
				
				Если Обход.Метод = Перечисления.БазыРаспределенияКосвенныхРасходов.Процентом Тогда
					ПроцентРаспределения = ПроцентРаспределения + Обход.ПроцентРаспределения;
					
					Если ПроцентРаспределения = 100 Тогда 
						
						Если ЗначениеЗаполнено(Обход.Сумма) Тогда
							СуммаРспределенияПоПроценту = Окр(Обход.Сумма - СуммаРспределенияПоПроценту,2);
						КонецЕсли;
						
						НоваяПроводка.Сумма = СуммаРспределенияПоПроценту; 
				
						СуммаРспределенияПоПроценту = 0;
						ПроцентРаспределения        = 0;
						
					Иначе 
						
						Если ЗначениеЗаполнено(Обход.Сумма) И ЗначениеЗаполнено(Обход.ПроцентРаспределения) Тогда						
							СуммаРспределения = Окр(Обход.Сумма * Обход.ПроцентРаспределения / 100,2);            						
							СуммаРспределенияПоПроценту = СуммаРспределенияПоПроценту + СуммаРспределения;
						КонецЕсли;						
						
						НоваяПроводка.Сумма = СуммаРспределения; 
						
					КонецЕсли;
					
				Иначе 
					НоваяПроводка.Сумма = Обход.Сумма;
				КонецЕсли;
				
				НоваяПроводка.СчетДт = Обход.СчетЗакрытия;
				
				НомерСубконтоПодразделения 		  = 0;
				НомерСубконтоНоменклатурнойГруппы = 0;
				СтатьяЗатратРаспределения         = Неопределено;
				
				Для НомерСубконто = 1 По Обход.СчетЗакрытия.ВидыСубконто.Количество() Цикл
					
					Если (ТипЗнч(Обход["СубконтоЗакрытия" + НомерСубконто]) = Тип("СправочникСсылка.ПодразделенияОрганизаций")) Тогда
						
						Если НЕ ЗначениеЗаполнено(Обход["СубконтоЗакрытия" + НомерСубконто]) Тогда
							УстанавливаемоеЗначениеАналитики = Обход.Подразделение;
						Иначе
							УстанавливаемоеЗначениеАналитики = Обход["СубконтоЗакрытия" + НомерСубконто];
						КонецЕсли;
						
					ИначеЕсли (ТипЗнч(Обход["СубконтоЗакрытия" + НомерСубконто]) = Тип("СправочникСсылка.СтатьиЗатрат")) Тогда
						
						Если НЕ ЗначениеЗаполнено(Обход["СубконтоЗакрытия" + НомерСубконто]) Тогда
							УстанавливаемоеЗначениеАналитики = Обход.СтатьяЗатрат;
						Иначе
							УстанавливаемоеЗначениеАналитики = Обход["СубконтоЗакрытия" + НомерСубконто];
						КонецЕсли;
						СтатьяЗатратРаспределения = УстанавливаемоеЗначениеАналитики; 
						
					Иначе
						УстанавливаемоеЗначениеАналитики = Обход["СубконтоЗакрытия" + НомерСубконто];
					КонецЕсли;
					
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, НомерСубконто, УстанавливаемоеЗначениеАналитики);
					
					Если ТипЗнч(Обход["СубконтоЗакрытия" + НомерСубконто]) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
						НомерСубконтоПодразделения = НомерСубконто;
					ИначеЕсли ТипЗнч(Обход["СубконтоЗакрытия" + НомерСубконто]) = Тип("СправочникСсылка.НоменклатурныеГруппы") Тогда
						НомерСубконтоНоменклатурнойГруппы = НомерСубконто;
					КонецЕсли;

				КонецЦикла;
				
				НоваяПроводка.СчетКт = Обход.СчетЗатрат;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "Подразделения", Обход.Подразделение);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "СтатьиЗатрат",  Обход.СтатьяЗатрат);
				
				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(НоваяПроводка, Обход.СтруктурноеПодразделение, Обход.СтруктурноеПодразделение);
				
				Если СтруктураДопПараметров.Учет = "НУ" Тогда
					НоваяПроводка.ВидУчетаДт = Обход.ВидУчетаРаспределения;
					НоваяПроводка.ВидУчетаКт = Обход.ВидУчетаНакладных;
				КонецЕсли;
				
				РаспределениеВыполнено = Истина;
				
				 
				ЗаписьРасчетаКосвенныхРасходов = СтруктураДопПараметров.ЗаписьРасчетаКосвенныхРасходов;
				СтрокаЗаписьРасчетаКосвенныхРасходов 								   = ЗаписьРасчетаКосвенныхРасходов.Добавить();
				СтрокаЗаписьРасчетаКосвенныхРасходов.СчетУчета						   = Обход.СчетЗатрат;
				СтрокаЗаписьРасчетаКосвенныхРасходов.ВидОперации					   = Перечисления.ВидыОперацийРасчетаКосвенныхРасходов.РаспределениеОбщепроизводственныхРасходов;
				СтрокаЗаписьРасчетаКосвенныхРасходов.Подразделение 					   = Обход.Подразделение;
				СтрокаЗаписьРасчетаКосвенныхРасходов.СтатьяЗатрат					   = Обход.СтатьяЗатрат;
				СтрокаЗаписьРасчетаКосвенныхРасходов.БазаРаспределения				   = ОбходПоМетодамРаспределения.Метод;
				СтрокаЗаписьРасчетаКосвенныхРасходов.СчетРаспределения 				   = Обход.СчетЗакрытия;
				СтрокаЗаписьРасчетаКосвенныхРасходов.ПодразделениеРаспределения 	   = ?(НомерСубконтоПодразделения = 0, Справочники.ПодразделенияОрганизаций.ПустаяСсылка(), Обход["СубконтоЗакрытия" + НомерСубконтоПодразделения]);
				СтрокаЗаписьРасчетаКосвенныхРасходов.НоменклатурнаяГруппаРаспределения = ?(НомерСубконтоНоменклатурнойГруппы = 0,Справочники.НоменклатурныеГруппы.ПустаяСсылка(), Обход["СубконтоЗакрытия" + НомерСубконтоНоменклатурнойГруппы]);
				СтрокаЗаписьРасчетаКосвенныхРасходов.Сумма							   = НоваяПроводка.Сумма; 
				СтрокаЗаписьРасчетаКосвенныхРасходов.СтруктурноеПодразделение 		   = Обход.СтруктурноеПодразделение;
				СтрокаЗаписьРасчетаКосвенныхРасходов.СтруктурноеПодразделениеРаспределения = Обход.СтруктурноеПодразделениеЗакрытия;										
				
				Если СтруктураДопПараметров.Учет = "НУ" Тогда
					СтрокаЗаписьРасчетаКосвенныхРасходов.ВидУчета = Обход.ВидУчетаНакладных;
				КонецЕсли;
				
				СтрокаЗаписьРасчетаКосвенныхРасходов.МетодРаспределенияКосвенныхРасходов = Обход.МетодРаспределенияЗатратСсылка;															
				
				Если Обход.Метод = Перечисления.БазыРаспределенияКосвенныхРасходов.Процентом Тогда
					СтрокаЗаписьРасчетаКосвенныхРасходов.СуммаБазы = Обход.ПроцентРаспределения;						
				Иначе
					СтрокаЗаписьРасчетаКосвенныхРасходов.СуммаБазы = НоваяПроводка.Сумма;						
				КонецЕсли;	
				
				Если ЗначениеЗаполнено(СтатьяЗатратРаспределения) Тогда
					СтрокаЗаписьРасчетаКосвенныхРасходов.СтатьяЗатратРаспределения = СтатьяЗатратРаспределения;
				КонецЕсли;
				
				Если СтруктураДопПараметров.Учет = "БУ"  Тогда
					
					НомерСубконтоПодразделенияНУ = 0;
					НомерСубконтоНоменклатурнойГруппыНУ = 0;
					НомерСубконтоСтатьиЗатратНУ = 0;
					
					Для НомерСубконто = 1 По 3 Цикл
						
						Если Не ЗначениеЗаполнено(Обход["СубконтоЗакрытияНУ" + НомерСубконто]) Тогда
							Продолжить;
						КонецЕсли;
						
						Если ТипЗнч(Обход["СубконтоЗакрытияНУ" + НомерСубконто]) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
							НомерСубконтоПодразделенияНУ = НомерСубконто;
						ИначеЕсли ТипЗнч(Обход["СубконтоЗакрытияНУ" + НомерСубконто]) = Тип("СправочникСсылка.НоменклатурныеГруппы") Тогда
							НомерСубконтоНоменклатурнойГруппыНУ = НомерСубконто;
						ИначеЕсли ТипЗнч(Обход["СубконтоЗакрытияНУ" + НомерСубконто]) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда
							НомерСубконтоСтатьиЗатратНУ = НомерСубконто;
						КонецЕсли; 						
					КонецЦикла;   
					
					//Для расчета базы по НУ						
					СтрокаЗаписьРасчетаКосвенныхРасходов = ЗаписьРасчетаКосвенныхРасходов.Добавить();
					СтрокаЗаписьРасчетаКосвенныхРасходов.СчетУчета         = Обход.СчетЗатратНУ;
					СтрокаЗаписьРасчетаКосвенныхРасходов.ВидОперации       = Перечисления.ВидыОперацийРасчетаКосвенныхРасходов.РаспределениеОбщепроизводственныхРасходов;
					СтрокаЗаписьРасчетаКосвенныхРасходов.Подразделение     = Обход.Подразделение;
					СтрокаЗаписьРасчетаКосвенныхРасходов.СтатьяЗатрат      = Обход.СтатьяЗатрат;
					СтрокаЗаписьРасчетаКосвенныхРасходов.БазаРаспределения = ОбходПоМетодамРаспределения.Метод;
					
					//счет и аналитика закрытия 
					Если НЕ ЗначениеЗаполнено(Обход.СчетЗакрытияНУ) Тогда
						СтрокаЗаписьРасчетаКосвенныхРасходов.СчетРаспределения = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ, ", НоваяПроводка.СчетДт),,, Реквизиты.Период);
					Иначе
						СтрокаЗаписьРасчетаКосвенныхРасходов.СчетРаспределения = Обход.СчетЗакрытияНУ;
					КонецЕсли;
								
					СтрокаЗаписьРасчетаКосвенныхРасходов.ПодразделениеРаспределения        = ?(НомерСубконтоПодразделенияНУ = 0,?(НомерСубконтоПодразделения = 0, Справочники.ПодразделенияОрганизаций.ПустаяСсылка(), Обход["СубконтоЗакрытия" + НомерСубконтоПодразделения]),Обход["СубконтоЗакрытияНУ" + НомерСубконтоПодразделенияНУ]);
					СтрокаЗаписьРасчетаКосвенныхРасходов.НоменклатурнаяГруппаРаспределения = ?(НомерСубконтоНоменклатурнойГруппыНУ = 0, ?(НомерСубконтоНоменклатурнойГруппы = 0,Справочники.НоменклатурныеГруппы.ПустаяСсылка(), Обход["СубконтоЗакрытия" + НомерСубконтоНоменклатурнойГруппы]),Обход["СубконтоЗакрытияНУ" + НомерСубконтоНоменклатурнойГруппыНУ]);						
					СтрокаЗаписьРасчетаКосвенныхРасходов.СтатьяЗатратРаспределения         = ?(НомерСубконтоСтатьиЗатратНУ = 0, СтатьяЗатратРаспределения, Обход["СубконтоЗакрытияНУ" + НомерСубконтоСтатьиЗатратНУ]);
					
					СтрокаЗаписьРасчетаКосвенныхРасходов.СтруктурноеПодразделение = Обход.СтруктурноеПодразделение;
					СтрокаЗаписьРасчетаКосвенныхРасходов.СтруктурноеПодразделениеРаспределения = Обход.СтруктурноеПодразделениеЗакрытия;
					СтрокаЗаписьРасчетаКосвенныхРасходов.РасчетБазы = Истина;						  						
					СтрокаЗаписьРасчетаКосвенныхРасходов.Сумма		= НоваяПроводка.Сумма;						  						
					СтрокаЗаписьРасчетаКосвенныхРасходов.МетодРаспределенияКосвенныхРасходов = Обход.МетодРаспределенияЗатратСсылка;										
					
					Если Обход.Метод = Перечисления.БазыРаспределенияКосвенныхРасходов.Процентом Тогда
						СтрокаЗаписьРасчетаКосвенныхРасходов.СуммаБазы = Обход.ПроцентРаспределения;						
					Иначе
						СтрокаЗаписьРасчетаКосвенныхРасходов.СуммаБазы = НоваяПроводка.Сумма;						
					КонецЕсли;						
				КонецЕсли;	 				
			Иначе
				
				Если Обход.Подразделение <> ПодразделениеДляПроверки
					Или Обход.СтатьяЗатрат <> СтатьяЗатратДляПроверки
					Или Обход.Сумма <> СуммаДляПроверки Тогда
					// Началась очередная группа
					Группа = Новый Массив();
					МассивГрупп.Добавить(Группа);
					ПодразделениеДляПроверки = Обход.Подразделение;
					СтатьяЗатратДляПроверки  = Обход.СтатьяЗатрат;
					СуммаДляПроверки         = Обход.Сумма;
				КонецЕсли;
				Группа.Добавить(Обход);
				
				Если Обход.Метод = Перечисления.БазыРаспределенияКосвенныхРасходов.Процентом Тогда
					Обход.БазаРаспределения = Обход.ПроцентРаспределения; 
				Иначе
					//По БУ ищмем базы
					Если СтруктураДопПараметров.Учет = "БУ" Тогда 
						// Накладываем фильтры в зависимости от указанной аналитики закрытия
						СтруктПоиска.Очистить();
						СтруктПоиска.Вставить("СчетЗатрат", Обход.СчетЗакрытия);
						Для НомерСубконто = 1 По 3 Цикл
							Если Не ЗначениеЗаполнено(Обход["СубконтоЗакрытия" + НомерСубконто]) Тогда
								Продолжить;
							КонецЕсли;
							
							Если ТипЗнч(Обход["СубконтоЗакрытия" + НомерСубконто]) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
								СтруктПоиска.Вставить("Подразделение", Обход["СубконтоЗакрытия" + НомерСубконто]);
							ИначеЕсли ТипЗнч(Обход["СубконтоЗакрытия" + НомерСубконто]) = Тип("СправочникСсылка.НоменклатурныеГруппы") Тогда
								СтруктПоиска.Вставить("НоменклатурнаяГруппа", Обход["СубконтоЗакрытия" + НомерСубконто]);
							КонецЕсли;
						КонецЦикла; 						
												
						НаборСтрок = СтруктураДопПараметров.БазаКоэффициентов.НайтиСтроки(СтруктПоиска);
						
						БазаРаспределения = 0;
						Для Каждого СтрКоэф Из НаборСтрок Цикл
							БазаРаспределения = БазаРаспределения + СтрКоэф["База"+ИмяРеквБазы];
						КонецЦикла;
						
						Обход.НаборСтрок = НаборСтрок;
						Обход.БазаРаспределения = БазаРаспределения;
					Иначе
						//По НУ базу распределения берем уже рассчитанную на этапе расчета БУ
						Обход.БазаРаспределения = Обход.СуммаБазы;
						Обход.НаборСтрок = 0;
					КонецЕсли;
				КонецЕсли;     				
			КонецЕсли;
		КонецЦикла;
		
		// Вторым проходом распределяем суммы
		Для Каждого Группа Из МассивГрупп Цикл
			МассивКоэф = Новый Массив();
			Для Каждого Обход Из Группа Цикл
				Сумма = Обход.Сумма;
				МассивКоэф.Добавить(Обход.БазаРаспределения);
			КонецЦикла;
			МассивСумм = ОбщегоНазначенияБККлиентСервер.РаспределитьПропорционально(Сумма, МассивКоэф);
			Счетчик = - 1;
			Для Каждого Обход Из Группа Цикл
				Если МассивСумм = Неопределено Тогда
					Обход.РезультатРаспределения = 0;
				Иначе
					Счетчик = Счетчик + 1;
					Обход.РезультатРаспределения = МассивСумм[Счетчик];
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		// Третим проходом делаем проводки
		Для Каждого Группа Из МассивГрупп Цикл
			Для Каждого Обход Из Группа Цикл
				
				//по НУ могут ошибки оркгуления, когда по НУ = 0, а по БУ 0,01
				//распределится разница должна также
				Если Обход.РезультатРаспределения = 0 И СтруктураДопПараметров.Учет ="БУ" Тогда
					Продолжить;
				КонецЕсли;
				
				НомерСубконтоПодразделения = 0;
				НомерСубконтоНоменклатурнойГруппы = 0;
				НомерСубконтоСтатьиЗатрат = 0;
				
				Для НомерСубконто = 1 По 3 Цикл
					
					Если Не ЗначениеЗаполнено(Обход["СубконтоЗакрытия" + НомерСубконто])И СтруктураДопПараметров.Учет = "БУ" Тогда
						Продолжить;
					КонецЕсли;
					
					Если ТипЗнч(Обход["СубконтоЗакрытия" + НомерСубконто]) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
						НомерСубконтоПодразделения = НомерСубконто;
					ИначеЕсли ТипЗнч(Обход["СубконтоЗакрытия" + НомерСубконто]) = Тип("СправочникСсылка.НоменклатурныеГруппы") Тогда
						НомерСубконтоНоменклатурнойГруппы = НомерСубконто;
					ИначеЕсли ТипЗнч(Обход["СубконтоЗакрытия" + НомерСубконто]) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда
						НомерСубконтоСтатьиЗатрат = НомерСубконто;
					КонецЕсли;
					
				КонецЦикла;
				
				Если СтруктураДопПараметров.Учет ="БУ" Тогда
					
					НомерСубконтоПодразделенияНУ = 0;
					НомерСубконтоНоменклатурнойГруппыНУ = 0;
					НомерСубконтоСтатьиЗатратНУ = 0;
					
					Для НомерСубконто = 1 По 3 Цикл
						
						Если Не ЗначениеЗаполнено(Обход["СубконтоЗакрытияНУ" + НомерСубконто]) Тогда
							Продолжить;
						КонецЕсли;
						
						Если ТипЗнч(Обход["СубконтоЗакрытияНУ" + НомерСубконто]) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
							НомерСубконтоПодразделенияНУ = НомерСубконто;
						ИначеЕсли ТипЗнч(Обход["СубконтоЗакрытияНУ" + НомерСубконто]) = Тип("СправочникСсылка.НоменклатурныеГруппы") Тогда
							НомерСубконтоНоменклатурнойГруппыНУ = НомерСубконто;
						ИначеЕсли ТипЗнч(Обход["СубконтоЗакрытияНУ" + НомерСубконто]) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда
							НомерСубконтоСтатьиЗатратНУ = НомерСубконто;
						КонецЕсли;
						
					КонецЦикла;
				КонецЕсли;
				
				Если СтруктураДопПараметров.Учет ="НУ"  Тогда
					ВидУчетаЗатрат = Обход.ВидУчетаРаспределения;
				КонецЕсли;
				
				ДолжноБытьСписаноОПР = Обход.РезультатРаспределения;
				
				// Если в аналитике закрытия указана Номенклатурная группа, то необходимо ее добавить в каждое подразделение 
				// счета закрытия.
				//Для НУ вся аналитика закрытия уже определена на этапе БУ, распределение не нужно
				Если НомерСубконтоНоменклатурнойГруппы <> 0 ИЛИ СтруктураДопПараметров.Учет = "НУ" Тогда
					Если НомерСубконтоПодразделения = 0 И СтруктураДопПараметров.Учет = "БУ" Тогда
						// В случае, если указано и подразделение и номенклатурная группа, база распределения не нужна
					Иначе
						ВидУчета = ?(СтруктураДопПараметров.Учет ="НУ" , Обход.ВидУчетаНакладных, Справочники.ВидыУчетаНУ.ПустаяСсылка());
						
						Если СтруктураДопПараметров.Учет ="НУ" Тогда
							НоваяПроводка = Движения.Налоговый.Добавить();
						Иначе
							НоваяПроводка = Движения.Типовой.Добавить();
						КонецЕсли;
						
						НоваяПроводка.Организация = Реквизиты.Организация;
						НоваяПроводка.Активность  = Истина;
						НоваяПроводка.Период      = Реквизиты.Период;
						НоваяПроводка.Содержание  = НСтр("ru = 'Распределение ОПР'", ОбщегоНазначения.КодОсновногоЯзыка());
						НоваяПроводка.ВидРегламентнойОперации = РегОперация;
						
						Если СтруктураДопПараметров.Учет = "НУ" Тогда
							//ошибки округления
							РазницаБУ_НУ = Обход.СуммаБУ - ДолжноБытьСписаноОПР;
							Если РазницаБУ_НУ >-0.1 И РазницаБУ_НУ < 0.1 Тогда
								ДолжноБытьСписаноОПР = ДолжноБытьСписаноОПР + РазницаБУ_НУ;
							КонецЕсли;
						КонецЕсли;
						          
						НоваяПроводка.Сумма = ДолжноБытьСписаноОПР;
						
						НоваяПроводка.СчетДт = Обход.СчетЗакрытия;
						ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "НоменклатурныеГруппы", Обход["СубконтоЗакрытия" + НомерСубконтоНоменклатурнойГруппы]);
						ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "Подразделения",        Обход["СубконтоЗакрытия" + НомерСубконтоПодразделения]);
						
						Если НомерСубконтоСтатьиЗатрат = 0 Тогда
							УстанавливаемоеЗначениеАналитики = Обход.СтатьяЗатрат;
						Иначе
							УстанавливаемоеЗначениеАналитики = Обход["СубконтоЗакрытия" + НомерСубконтоСтатьиЗатрат];
						КонецЕсли;
						
						ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "СтатьиЗатрат",         УстанавливаемоеЗначениеАналитики);
						
						ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(НоваяПроводка, Обход.СтруктурноеПодразделение, Обход.СтруктурноеПодразделение);
						
						НоваяПроводка.СчетКт = Обход.СчетЗатрат;
						ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "Подразделения",        Обход.Подразделение);
						ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "СтатьиЗатрат",         Обход.СтатьяЗатрат);
						
						Если СтруктураДопПараметров.Учет ="НУ"  Тогда
							НоваяПроводка.ВидУчетаДт = ВидУчетаЗатрат;
							НоваяПроводка.ВидУчетаКт = Обход.ВидУчетаНакладных;
							ПроцедурыНалоговогоУчета.ВидУчетаНУ(НоваяПроводка, Обход.ВидУчетаНакладных, Ложь, Ложь);
						КонецЕсли;
						
						РаспределениеВыполнено = Истина;
						
						ЗаписьРасчетаКосвенныхРасходов = СтруктураДопПараметров.ЗаписьРасчетаКосвенныхРасходов;
						СтрокаЗаписьРасчетаКосвенныхРасходов = ЗаписьРасчетаКосвенныхРасходов.Добавить();
						СтрокаЗаписьРасчетаКосвенныхРасходов.СчетУчета = Обход.СчетЗатрат;
						СтрокаЗаписьРасчетаКосвенныхРасходов.ВидОперации = Перечисления.ВидыОперацийРасчетаКосвенныхРасходов.РаспределениеОбщепроизводственныхРасходов;
						СтрокаЗаписьРасчетаКосвенныхРасходов.Подразделение = Обход.Подразделение;
						СтрокаЗаписьРасчетаКосвенныхРасходов.СтатьяЗатрат = Обход.СтатьяЗатрат;
						СтрокаЗаписьРасчетаКосвенныхРасходов.БазаРаспределения = ОбходПоМетодамРаспределения.Метод;
						СтрокаЗаписьРасчетаКосвенныхРасходов.СчетРаспределения = Обход.СчетЗакрытия;
						СтрокаЗаписьРасчетаКосвенныхРасходов.ПодразделениеРаспределения = Обход["СубконтоЗакрытия" + НомерСубконтоПодразделения];
						СтрокаЗаписьРасчетаКосвенныхРасходов.НоменклатурнаяГруппаРаспределения = Обход["СубконтоЗакрытия" + НомерСубконтоНоменклатурнойГруппы];
						СтрокаЗаписьРасчетаКосвенныхРасходов.СтатьяЗатратРаспределения = УстанавливаемоеЗначениеАналитики;
						СтрокаЗаписьРасчетаКосвенныхРасходов.Сумма = ДолжноБытьСписаноОПР; 
						СтрокаЗаписьРасчетаКосвенныхРасходов.СтруктурноеПодразделение = Обход.СтруктурноеПодразделение;
						СтрокаЗаписьРасчетаКосвенныхРасходов.СтруктурноеПодразделениеРаспределения = Обход.СтруктурноеПодразделениеЗакрытия;																		
						СтрокаЗаписьРасчетаКосвенныхРасходов.ВидУчета = ВидУчета;
						СтрокаЗаписьРасчетаКосвенныхРасходов.СуммаБазы = Обход.БазаРаспределения;
						СтрокаЗаписьРасчетаКосвенныхРасходов.МетодРаспределенияКосвенныхРасходов = Обход.МетодРаспределенияЗатратСсылка;
						
						Если СтруктураДопПараметров.Учет ="БУ" Тогда
							//Для расчета базы по НУ						
							СтрокаЗаписьРасчетаКосвенныхРасходов = ЗаписьРасчетаКосвенныхРасходов.Добавить();
							СтрокаЗаписьРасчетаКосвенныхРасходов.СчетУчета = Обход.СчетЗатратНУ;
							СтрокаЗаписьРасчетаКосвенныхРасходов.ВидОперации = Перечисления.ВидыОперацийРасчетаКосвенныхРасходов.РаспределениеОбщепроизводственныхРасходов;
							СтрокаЗаписьРасчетаКосвенныхРасходов.Подразделение = Обход.Подразделение;
							СтрокаЗаписьРасчетаКосвенныхРасходов.СтатьяЗатрат = Обход.СтатьяЗатрат;
							СтрокаЗаписьРасчетаКосвенныхРасходов.БазаРаспределения = ОбходПоМетодамРаспределения.Метод;
							Если НЕ ЗначениеЗаполнено(Обход.СчетЗакрытияНУ) Тогда
								СтрокаЗаписьРасчетаКосвенныхРасходов.СчетРаспределения = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ, ", НоваяПроводка.СчетДт),,, Реквизиты.Период);
							Иначе
								СтрокаЗаписьРасчетаКосвенныхРасходов.СчетРаспределения = Обход.СчетЗакрытияНУ;
							КонецЕсли;
							
							СтрокаЗаписьРасчетаКосвенныхРасходов.ПодразделениеРаспределения = ?(НомерСубконтоПодразделенияНУ = 0, Обход["СубконтоЗакрытия" + НомерСубконтоПодразделения],Обход["СубконтоЗакрытияНУ" + НомерСубконтоПодразделенияНУ]);
							СтрокаЗаписьРасчетаКосвенныхРасходов.НоменклатурнаяГруппаРаспределения = ?(НомерСубконтоНоменклатурнойГруппыНУ = 0, Обход["СубконтоЗакрытия" + НомерСубконтоНоменклатурнойГруппы],Обход["СубконтоЗакрытияНУ" + НомерСубконтоНоменклатурнойГруппыНУ]);												
							СтрокаЗаписьРасчетаКосвенныхРасходов.СтатьяЗатратРаспределения = ?(НомерСубконтоСтатьиЗатратНУ = 0, УстанавливаемоеЗначениеАналитики,Обход["СубконтоЗакрытияНУ" + НомерСубконтоСтатьиЗатратНУ]);												
							СтрокаЗаписьРасчетаКосвенныхРасходов.СтруктурноеПодразделение  = Обход.СтруктурноеПодразделение;	
							СтрокаЗаписьРасчетаКосвенныхРасходов.СтруктурноеПодразделениеРаспределения = Обход.СтруктурноеПодразделениеЗакрытия;
							СтрокаЗаписьРасчетаКосвенныхРасходов.СтруктурноеПодразделениеРаспределения = Обход.СтруктурноеПодразделениеЗакрытия;
							СтрокаЗаписьРасчетаКосвенныхРасходов.СуммаБазы  = Обход.БазаРаспределения;						
							СтрокаЗаписьРасчетаКосвенныхРасходов.РасчетБазы = Истина;	
							СтрокаЗаписьРасчетаКосвенныхРасходов.Сумма 		= ДолжноБытьСписаноОПР;	
							СтрокаЗаписьРасчетаКосвенныхРасходов.МетодРаспределенияКосвенныхРасходов = Обход.МетодРаспределенияЗатратСсылка;
						КонецЕсли;   
						Продолжить;
					КонецЕсли;
				КонецЕсли;			
				
				
				// Стандартное распределение
				РаспределениеВыполнено = РаспределитьОПРПоБазе(Реквизиты, Движения, ИмяРеквБазы, Обход, Обход.НаборСтрок, , ОбходПоМетодамРаспределения.Метод, ДолжноБытьСписаноОПР);
				
				// Распределение по всем подразделениям
				Если НЕ РаспределениеВыполнено Тогда
					РаспределениеВыполнено = РаспределитьОПРПоБазе(Реквизиты, Движения, ИмяРеквБазы, Обход, , Истина, ОбходПоМетодамРаспределения.Метод, ДолжноБытьСписаноОПР);
				КонецЕсли;
				
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Если РаспределениеВыполнено Тогда
		Если СтруктураДопПараметров.Учет = "НУ" Тогда
			Движения.Налоговый.Записать(Ложь);
		Иначе
			Движения.Типовой.Записать(Ложь);
		КонецЕсли;
	КонецЕсли;
	
	Возврат РаспределениеВыполнено;
	
КонецФункции // РаспределитьОПР()

Процедура РасчетПрямыхИКосвенныхРасходовГПСписаннаяВПроизводство(Реквизиты, Движения,Отказ = Ложь)
	
	СтруктураДопПараметров = Реквизиты.ДопПараметры;
	
	ЗапросОстатков = Новый Запрос;
	ЗапросОстатков.Текст = 
	"ВЫБРАТЬ
	|	ТиповойОстатки.СуммаОстаток
	|ИЗ
	|	РегистрБухгалтерии.Типовой.Остатки(&КонГраница, Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Типовой.ОсновноеПроизводство_), ЗНАЧЕНИЕ(ПланСчетов.Типовой.ПолуфабрикатыСобственногоПроизводства_), ЗНАЧЕНИЕ(ПланСчетов.Типовой.ВспомогательныеПроизводства_), ЗНАЧЕНИЕ(ПланСчетов.Типовой.НакладныеРасходы_)), ,  Организация = &Организация) КАК ТиповойОстатки";
	
	Если СтруктураДопПараметров.Учет = "НУ" Тогда
		ЗапросОстатков.Текст = СтрЗаменить(ЗапросОстатков.Текст, "Типовой", "Налоговый");
		ЗапросОстатков.Текст = СтрЗаменить(ЗапросОстатков.Текст, "Организация = &Организация", "Организация = &Организация И ВидУчета В Иерархии(&ВидУчета)");		
		ЗапросОстатков.Текст = СтрЗаменить(ЗапросОстатков.Текст, "ПолуфабрикатыСобственногоПроизводства_", "ПолуфабрикатыСобственногоПроизводства");
		ЗапросОстатков.Текст = СтрЗаменить(ЗапросОстатков.Текст, "ВспомогательныеПроизводства_", "ВспомогательныеПроизводства");
		ЗапросОстатков.Текст = СтрЗаменить(ЗапросОстатков.Текст, "НакладныеРасходы_", "НакладныеРасходы");
		
		ЗапросОстатков.УстановитьПараметр("ВидУчета", СтруктураДопПараметров.ВидУчетаНУ);
	КонецЕсли;
	
	КонГраница = Новый Граница( КонецМесяца(Реквизиты.Период), ВидГраницы.Включая);
	ЗапросОстатков.УстановитьПараметр("КонГраница", КонГраница);	
	ЗапросОстатков.УстановитьПараметр("Организация", Реквизиты.Организация);
		
	Результат = ЗапросОстатков.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Если Выборка.СуммаОстаток = 0 Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВыпускГП.СубконтоДт1 КАК Номенклатура
	|ИЗ
	|	РегистрБухгалтерии.Типовой.ОборотыДтКт(
	|		&НачДата,
	|		&КонДата,,
	|		СчетДт = &СчетГП,,
	|		СчетКт В ИЕРАРХИИ (&СписокСчетовПроизводства),,
	|		Организация = &Организация) КАК ВыпускГП
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|	РегистрБухгалтерии.Типовой.ОборотыДтКт(
	|		&НачДата,
	|		&КонДата,,
	|		СчетДт В ИЕРАРХИИ (&СписокСчетовПроизводства),,
	|		СчетКт = &СчетГП,,
	|		Организация = &Организация) КАК СписаниеГПВПроизводство
	|ПО 
	|	ВыпускГП.СубконтоДт1 = СписаниеГПВПроизводство.СубконтоКт1";
	
	СписокСчетовПроизводства = новый СписокЗначений;
	Если СтруктураДопПараметров.Учет = "НУ" Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Типовой", "Налоговый");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Организация = &Организация", "Организация = &Организация И ВидУчетаДт В Иерархии(&ВидУчета)");		
		СписокСчетовПроизводства.Добавить(ПланыСчетов.Налоговый.ОсновноеПроизводство);
		СписокСчетовПроизводства.Добавить(ПланыСчетов.Налоговый.ПолуфабрикатыСобственногоПроизводства);
		СписокСчетовПроизводства.Добавить(ПланыСчетов.Налоговый.ВспомогательныеПроизводства);
		СписокСчетовПроизводства.Добавить(ПланыСчетов.Налоговый.НакладныеРасходы);
		Запрос.УстановитьПараметр("СчетГП", ПланыСчетов.Налоговый.ГотоваяПродукция);
		Запрос.УстановитьПараметр("ВидУчета", СтруктураДопПараметров.ВидУчетаНУ);
	Иначе
		СписокСчетовПроизводства.Добавить(ПланыСчетов.Типовой.ОсновноеПроизводство);
		СписокСчетовПроизводства.Добавить(ПланыСчетов.Типовой.ПолуфабрикатыСобственногоПроизводства);
		СписокСчетовПроизводства.Добавить(ПланыСчетов.Типовой.ВспомогательныеПроизводства);
		СписокСчетовПроизводства.Добавить(ПланыСчетов.Типовой.НакладныеРасходы);
		Запрос.УстановитьПараметр("СчетГП", ПланыСчетов.Типовой.ГотоваяПродукция);		
	КонецЕсли;
	                                                      	
	Запрос.УстановитьПараметр("НачДата", Реквизиты.НачалоПериода);
	Запрос.УстановитьПараметр("КонДата", Реквизиты.КонецПериода);
	
	Запрос.УстановитьПараметр("ДокЗакрытиеМесяца", Реквизиты.Регистратор);
	Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);	
		
	Запрос.УстановитьПараметр("СписокСчетовПроизводства", СписокСчетовПроизводства);
	
	тзГПСписаннаяВПроизводство = Запрос.Выполнить().Выгрузить();
	
	Если тзГПСписаннаяВПроизводство.Количество() > 0 Тогда
		
		СписокНекорректируемойПродукции = Новый СписокЗначений;
		Для Каждого СтрокаТЗ Из тзГПСписаннаяВПроизводство Цикл
			СписокНекорректируемойПродукции.Добавить(СтрокаТЗ.Номенклатура);
		КонецЦикла;
		
		ДвижениеЗатратПоГПСписаннойВПроизводство = Истина;
				
		Если СтруктураДопПараметров.СпособРасчетаСебестоимостиПроизводства = "ПоПеределам"
			И СтруктураДопПараметров.ТаблицаВстречногоВыпуска.Количество() > 0 Тогда
			СтруктураДопПараметров.РасчетПрямыхЗатратНомер = "1";
			РасчетПрямыхЗатрат(Реквизиты, Движения, Отказ);
			СтруктураДопПараметров.РасчетПрямыхЗатратНомер = "2";
			РасчетПрямыхЗатрат(Реквизиты, Движения,Отказ);
			// Списание общепроизводственных  расходов
			// на себестоимость продукции (услуг).
			
			СтруктураДопПараметров.РасчетПрямыхЗатратНомер = "3";
			СтруктураДопПараметров.СписокНекорректируемойПродукции = СписокНекорректируемойПродукции;
			
			РаспределениеКосвенныхРасходов(Реквизиты, Движения, Отказ);		      			
			
		Иначе
			СтруктураДопПараметров.РасчетПрямыхЗатратНомер = "";
			РасчетПрямыхЗатрат(Реквизиты,Движения, Отказ);
			СтруктураДопПараметров.СписокНекорректируемойПродукции = СписокНекорректируемойПродукции;
			РаспределениеКосвенныхРасходов(Реквизиты, Движения, Отказ);
			     			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПРоцедуры

Процедура РасчетПрямыхИКосвенныхРасходов(Реквизиты, Движения, Отказ = Ложь)
	
	СтруктураДопПараметров = Реквизиты.ДопПараметры;
	Если СтруктураДопПараметров.СпособРасчетаСебестоимостиПроизводства = "ПоПеределам"
		И СтруктураДопПараметров.ТаблицаВстречногоВыпуска.Количество() > 0 Тогда
		СтруктураДопПараметров.РасчетПрямыхЗатратНомер = "1";
		РасчетПрямыхЗатрат(Реквизиты, Движения, Отказ);
		СтруктураДопПараметров.РасчетПрямыхЗатратНомер = "2";
		РасчетПрямыхЗатрат(Реквизиты, Движения, Отказ);
		// Списание общепроизводственных  расходов
		// на себестоимость продукции (услуг).
		//СтруктураДопПараметров.РасчетПрямыхЗатратНомер = "3" + СпособОценкиМПЗ;
		СтруктураДопПараметров.РасчетПрямыхЗатратНомер = "3";
		        	
		
		РаспределениеКосвенныхРасходов(Реквизиты, Движения, Отказ);
				
	Иначе		
		СтруктураДопПараметров.РасчетПрямыхЗатратНомер = "";
		РасчетПрямыхЗатрат(Реквизиты, Движения, Отказ);
			
		РаспределениеКосвенныхРасходов(Реквизиты, Движения, Отказ);
				
	КонецЕсли;
		
	РасчетПрямыхИКосвенныхРасходовГПСписаннаяВПроизводство(Реквизиты, Движения, Отказ);
	
КонецПроцедуры

Функция ПолучитьСведенияКорректировкиСписания(Реквизиты)
	
	СтруктураДопПараметров = Реквизиты.ДопПараметры;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СведенияОКорректировкиСтоимостиПродукцииИТоваров.Номенклатура,
	               |	СведенияОКорректировкиСтоимостиПродукцииИТоваров.КорректируемыйДокумент,
	               |	ЕСТЬNULL(СведенияОКорректировкиСтоимостиПродукцииИТоваров.СуммаКорректировки, 0) КАК СуммаКорректировки,
	               |	ЕСТЬNULL(СведенияОКорректировкиСтоимостиПродукцииИТоваров.Количество, 0) КАК Количество,
	               |	ЕСТЬNULL(СведенияОКорректировкиСтоимостиПродукцииИТоваров.Себестоимость, 0) КАК Себестоимость,
	               |	ЕСТЬNULL(СведенияОКорректировкиСтоимостиПродукцииИТоваров.СуммаКорректировкиВНУ, 0) КАК СуммаКорректировкиВНУ,
	               |	СведенияОКорректировкиСтоимостиПродукцииИТоваров.ПодразделениеВыпуска,
	               |	СведенияОКорректировкиСтоимостиПродукцииИТоваров.НоменклатурнаяГруппаВыпуска,
	               |	СведенияОКорректировкиСтоимостиПродукцииИТоваров.СтруктурноеПодразделение,
	               |	СведенияОКорректировкиСтоимостиПродукцииИТоваров.СтруктурноеПодразделениеПолучатель,
	               |	СведенияОКорректировкиСтоимостиПродукцииИТоваров.ОперацияСписания,
	               |	СведенияОКорректировкиСтоимостиПродукцииИТоваров.ОПР,
	               |	СведенияОКорректировкиСтоимостиПродукцииИТоваров.СчетЗатратБУ,
	               |	СведенияОКорректировкиСтоимостиПродукцииИТоваров.СтатьяЗатрат
	               |ИЗ
	               |	РегистрСведений.СведенияОКорректировкиСтоимостиПродукцииИТоваров КАК СведенияОКорректировкиСтоимостиПродукцииИТоваров
	               |ГДЕ
	               |	СведенияОКорректировкиСтоимостиПродукцииИТоваров.Организация = &Организация
	               |	И НАЧАЛОПЕРИОДА(СведенияОКорректировкиСтоимостиПродукцииИТоваров.ПериодРасчета, МЕСЯЦ) = &ПериодРасчета" ;
				   
				   
   Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
   Запрос.УстановитьПараметр("ПериодРасчета", Реквизиты.НачалоПериода);
   
   ТаблицаДанных = Запрос.Выполнить().Выгрузить();
   
   //Нам необходимо значть регистраторы корректировок, чтобы их сразу отсечь при выборке
   СписокКорректируемыхДокументов = Новый СписокЗначений;
   СписокКорректируемыхДокументов.ЗагрузитьЗначения(ТаблицаДанных.ВыгрузитьКолонку("КорректируемыйДокумент"));
   СтруктураДопПараметров.Вставить("СписокКорректируемыхДокументов",СписокКорректируемыхДокументов);   
   ТаблицаДанных.Свернуть("Номенклатура,СтруктурноеПодразделение,СтруктурноеПодразделениеПолучатель, ПодразделениеВыпуска,НоменклатурнаяГруппаВыпуска, ОперацияСписания, ОПР, КорректируемыйДокумент,СчетЗатратБУ, СтатьяЗатрат", "СуммаКорректировки, Количество,Себестоимость, СуммаКорректировкиВНУ");
   
   //// добавляем колонку признака корректировки по НУ
   //ТаблицаДанных.Колонки.Добавить("СуммаКорректировкиВНУ", Новый ОписаниеТипов("Число"));
   
   Возврат ТаблицаДанных;   
КонецФункции

Процедура ЕстьОстаткиНЗПНаНачалоМесяца(Реквизиты, ВидРегламентнойОперации)
	
	СтруктураДопПараметров = Реквизиты.ДопПараметры;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ТиповойОстатки.Субконто1 		КАК Субконто1,
	|	ТиповойОстатки.Счет 			КАК Счет,
	|	ТиповойОстатки.Субконто2 		КАК Субконто2,
	|	ТиповойОстатки.СуммаОстатокДт 	КАК КонОстаток	
	|ИЗ
	|	РегистрБухгалтерии.Типовой.Остатки(&НачГраница, Счет В ИЕРАРХИИ (&СчетаЗатрат), 
	|					 	 &ВидыСубконто, Организация = &Организация) КАК ТиповойОстатки
	|ГДЕ
	|	ТиповойОстатки.СуммаОстатокДт <> 0
	|ИТОГИ
	|	СУММА(КонОстаток)
	|ПО
	|	Субконто1";
	
	НачГраница =  Новый Граница(Реквизиты.НачалоПериода, ВидГраницы.Исключая);

	Запрос.УстановитьПараметр("НачГраница",    	НачГраница);
	Запрос.УстановитьПараметр("Организация",  	Реквизиты.Организация);
		
	СчетаЗатрат = Новый Массив;
	Если СтруктураДопПараметров.Учет = "БУ" Тогда
		СчетаЗатрат.Добавить(ПланыСчетов.Типовой.ОсновноеПроизводство);
		СчетаЗатрат.Добавить(ПланыСчетов.Типовой.ПолуфабрикатыСобственногоПроизводства);
		СчетаЗатрат.Добавить(ПланыСчетов.Типовой.ВспомогательныеПроизводства);
	Иначе
		СчетаЗатрат.Добавить(ПланыСчетов.Налоговый.ОсновноеПроизводство);
		СчетаЗатрат.Добавить(ПланыСчетов.Налоговый.ПолуфабрикатыСобственногоПроизводства);
		СчетаЗатрат.Добавить(ПланыСчетов.Налоговый.ВспомогательныеПроизводства);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Типовой", "Налоговый");
	КонецЕсли;

	Запрос.УстановитьПараметр("СчетаЗатрат", СчетаЗатрат);
	
	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Подразделения);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.НоменклатурныеГруппы);
	Запрос.УстановитьПараметр("ВидыСубконто",  ВидыСубконто);
	
	Результат = Запрос.Выполнить();
	
	//существуют остатки на начало
	Если НЕ Результат.Пустой() Тогда
		
		ТекстСообщения = НСтр("ru = 'На начало месяца существуют остатки по счетам прямых затрат производственного учета.
		|Такая ситуация возможна, если в прошлом месяце были закрыты (списаны на счета 
		|незавершенного производства) не все затраты. Ниже приведен перечень затрат:'", ОбщегоНазначения.КодОсновногоЯзыка());
		
		ВыборкаПоПодразделениям = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПоПодразделениям.Следующий() Цикл
			
			ТекстСообщения = ТекстСообщения + Символы.ПС + СтрШаблон(НСтр("ru = 'Подразделение		: %1. Сумма %2'", ОбщегоНазначения.КодОсновногоЯзыка()), ВыборкаПоПодразделениям.Субконто1, ВыборкаПоПодразделениям.КонОстаток);
			
			ВыборкаПоСчетамИНоменклатурнымГруппам = ВыборкаПоПодразделениям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаПоСчетамИНоменклатурнымГруппам.Следующий() Цикл
				
				ТекстСообщения = ТекстСообщения + Символы.ПС + СтрШаблон(НСтр("ru = 'Счет затрат : %1. Номенклатурная группа : %2. Сумма : %3'", ОбщегоНазначения.КодОсновногоЯзыка()),
					ВыборкаПоСчетамИНоменклатурнымГруппам.Счет,
					ВыборкаПоСчетамИНоменклатурнымГруппам.Субконто2,
					ВыборкаПоСчетамИНоменклатурнымГруппам.КонОстаток);
				
			КонецЦикла;
		КонецЦикла;
		
		ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации(ТекстСообщения, , , Реквизиты.Объект, ВидРегламентнойОперации);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДвижениеНЗППоБУиНУ(Реквизиты, Движения, Отказ)
	
	СтруктураДопПараметров = Реквизиты.ДопПараметры;
	
	ВидРегламентнойОперации = Неопределено;
	Если СтруктураДопПараметров.Учет = "НУ" Тогда
		ВидРегламентнойОперации = Перечисления.ВидыРегламентныхОпераций.ПереносНЗПНУ;
	ИначеЕсли СтруктураДопПараметров.Учет = "БУ" Тогда	
		ВидРегламентнойОперации = Перечисления.ВидыРегламентныхОпераций.ПереносНЗПБУ;	
	КонецЕсли;
	
	ЕстьОстаткиНЗПНаНачалоМесяца(Реквизиты, ВидРегламентнойОперации);
	
	НазваниеНачалаЭтапаСообщалось 		= Ложь;
	НазваниеОкончанияЭтапаСообщалось 	= Ложь;
	СписокСформированныхДокументов 		= Новый СписокЗначений;
	
	// Соберем данные о существующих документах "Движение НЗП".
	
	Запрос = Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	             |	ДвижениеНЗП.ПодразделениеОрганизации КАК Подразделение,
	             |	ДвижениеНЗП.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	             |	ДвижениеНЗП.Ссылка КАК ДокументСсылка
	             |ИЗ
	             |	Документ.ДвижениеНЗП КАК ДвижениеНЗП
	             |ГДЕ
	             |	ДвижениеНЗП.Организация = &Организация
	             |	И ДвижениеНЗП.Дата >= &НачДата
	             |	И ДвижениеНЗП.Дата <= &КонДата
	             |	И ДвижениеНЗП.ВидОперации = &ВидОперации
	             |	И ДвижениеНЗП.ОтражатьВБухгалтерскомУчете
	             |ИТОГИ
	             |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДокументСсылка)
	             |ПО
	             |	СтруктурноеПодразделение,
	             |	Подразделение";
	Запрос.УстановитьПараметр("НачДата",  Реквизиты.НачалоПериода);
	Запрос.УстановитьПараметр("КонДата",  Реквизиты.КонецПериода);
	Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
	Запрос.УстановитьПараметр("СтруктурноеПодразделение", Реквизиты.СтруктурноеПодразделение);
	Запрос.УстановитьПараметр("ВидОперации", Перечисления.ВидыОперацийДвиженияНЗП.ОтнесениеНаНЗП);
	Если СтруктураДопПараметров.Учет = "НУ" Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ОтражатьВБухгалтерскомУчете", "УчитыватьКПН");
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	
	// Дерево значений с документами "Движение НЗП" текущего месяца
	ДокументыДвиженияНЗПТекущегоМесяца = Новый ДеревоЗначений;
	ДокументыДвиженияНЗПТекущегоМесяца.Колонки.Добавить("СтруктурноеПодразделение");
	ДокументыДвиженияНЗПТекущегоМесяца.Колонки.Добавить("Подразделение");
	ДокументыДвиженияНЗПТекущегоМесяца.Колонки.Добавить("ДокументСсылка");
	
	// Выборка по структурным подразделениям
	ВыборкаПоСтруктурнымПодразделениям = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПоСтруктурнымПодразделениям.Следующий() Цикл
		// Выборка по подразделениям.
		ВыборкаПоПодразделениям = ВыборкаПоСтруктурнымПодразделениям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаПоПодразделениям.Следующий() Цикл
			НоваяСтрока = ДокументыДвиженияНЗПТекущегоМесяца.Строки.Добавить(); 
			НоваяСтрока.Подразделение 	= ВыборкаПоПодразделениям.Подразделение;
			НоваяСтрока.ДокументСсылка 	= ВыборкаПоПодразделениям.ДокументСсылка;
			НоваяСтрока.СтруктурноеПодразделение 	= ВыборкаПоСтруктурнымПодразделениям.СтруктурноеПодразделение;
			ИндексСтроки = ДокументыДвиженияНЗПТекущегоМесяца.Строки.Индекс(НоваяСтрока);
			
			
			// Выборка по документам.
			ВыборкаПоДокументам = ВыборкаПоПодразделениям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаПоДокументам.Следующий() Цикл				
				НоваяСтрока = ДокументыДвиженияНЗПТекущегоМесяца.Строки[ИндексСтроки] .Строки.Добавить(); 
				НоваяСтрока.Подразделение 	= ВыборкаПоДокументам.Подразделение;
				НоваяСтрока.ДокументСсылка 	= ВыборкаПоДокументам.ДокументСсылка;	
				НоваяСтрока.СтруктурноеПодразделение 	= ВыборкаПоДокументам.СтруктурноеПодразделение;
			КонецЦикла; 
		КонецЦикла;
	КонецЦикла; 	
	
	Для Каждого ТекПодразделение Из ДокументыДвиженияНЗПТекущегоМесяца.Строки Цикл
		Для Каждого ТекДокумент Из ТекПодразделение.Строки Цикл			
			 ТекДокумент.ДокументСсылка.ПолучитьОбъект().УстановитьПометкуУдаления(Истина);
		КонецЦикла;	
	КонецЦикла;	
	
	// Теперь произведем закрытие остатков по производственным счетам на конец месяца.
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ТиповойОстатки.Субконто1 		КАК Субконто1,
	|	ТиповойОстатки.Счет 			КАК Счет,
	|	ТиповойОстатки.Субконто2		КАК Субконто2,
	|	ТиповойОбороты.Субконто3		КАК Субконто3,
	|	ТиповойОстатки.СтруктурноеПодразделение		КАК СтруктурноеПодразделение," + 
	? (СтруктураДопПараметров.Учет = "НУ", "ЕСТЬNULL(ТиповойОстаткиОбщее.КонОстаток,0) ", 
	" ЕСТЬNULL(ТиповойОстатки.СуммаОстатокДт,0)") + " КАК КонОстаток,
	|	ЕСТЬNULL(ТиповойОбороты.СуммаОборотДт, 0) 	КАК ОборотДт ";
	Если СтруктураДопПараметров.Учет = "НУ" Тогда
		Запрос.Текст  = Запрос.Текст + ",
		|ТиповойОбороты.ВидУчета Как ВидУчета ";
	Иначе
		Запрос.Текст  = Запрос.Текст + ",
		|"""" Как ВидУчета ";		
	КонецЕсли;
	Запрос.Текст = Запрос.Текст + "
	|ИЗ  РегистрБухгалтерии.Типовой.Остатки(&КонГраница, Счет В ИЕРАРХИИ (&СчетаЗатрат), 
	|			&ВидыСубконто, Организация = &Организация) КАК ТиповойОстатки ";
	Если СтруктураДопПараметров.Учет = "НУ" Тогда
		Запрос.Текст = Запрос.Текст + " Левое соединение (ВЫБРАТЬ
		|	ТиповойОстатки.Субконто1 		КАК Субконто1,
		|	ТиповойОстатки.Счет 			КАК Счет,
		|	ТиповойОстатки.Субконто2		КАК Субконто2,
		|   ТиповойОстатки.СтруктурноеПодразделение,		
		|	Сумма(ТиповойОстатки.СуммаОстатокДт) 	КАК КонОстаток	
		| ИЗ
		|РегистрБухгалтерии.Налоговый.Остатки(&КонГраница, Счет В ИЕРАРХИИ (&СчетаЗатрат), 
		|			&ВидыСубконто, Организация = &Организация) КАК ТиповойОстатки
		| Сгруппировать ПО
		|   ТиповойОстатки.СтруктурноеПодразделение,
		|	ТиповойОстатки.Субконто1, 	
		|	ТиповойОстатки.Счет 	,		
		|	ТиповойОстатки.Субконто2		
		|	) КАК ТиповойОстаткиОбщее 	
		|ПО    ТиповойОстатки.Счет = ТиповойОстаткиОбщее.Счет
		|			И ТиповойОстатки.Субконто1 = ТиповойОстаткиОбщее.Субконто1
		|			И ТиповойОстатки.Субконто2 = ТиповойОстаткиОбщее.Субконто2		
		|			И ТиповойОстатки.СтруктурноеПодразделение = ТиповойОстаткиОбщее.СтруктурноеПодразделение";
	КонецЕсли;
	Запрос.Текст = Запрос.Текст + " 	
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Типовой.Обороты(&НачГраница, &КонГраница, 
	|		Месяц, Счет В ИЕРАРХИИ (&СчетаЗатрат), &ВидыСубконто,  Организация = &Организация, , ) 
	|		КАК ТиповойОбороты
	|
	|		ПО ТиповойОстатки.Счет = ТиповойОбороты.Счет
	|			И ТиповойОстатки.Субконто1 = ТиповойОбороты.Субконто1
	|			И ТиповойОстатки.Субконто2 = ТиповойОбороты.Субконто2 	
	|			И ТиповойОстатки.СтруктурноеПодразделение = ТиповойОбороты.СтруктурноеПодразделение 	
	|ГДЕ
	|	ТиповойОстатки.СуммаОстатокДт <> 0
	| Упорядочить  По Субконто1,Субконто2	
	|ИТОГИ
	|	МАКСИМУМ(КонОстаток)
	|ПО
	| СтруктурноеПодразделение,
	|	Субконто1,
	|	Счет,
	|	Субконто2	";
	
		
	Запрос.УстановитьПараметр("НачГраница",  Реквизиты.НачГраница);
	Запрос.УстановитьПараметр("КонГраница",  Реквизиты.КонГраница);
	Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
		
	СчетаЗатрат = Новый Массив;
	Если СтруктураДопПараметров.Учет = "НУ" Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Типовой", "Налоговый");			
		СчетаЗатрат.Добавить(ПланыСчетов.Налоговый.ОсновноеПроизводство);
		СчетаЗатрат.Добавить(ПланыСчетов.Налоговый.ПолуфабрикатыСобственногоПроизводства);
		СчетаЗатрат.Добавить(ПланыСчетов.Налоговый.ВспомогательныеПроизводства);		
	Иначе 		
		СчетаЗатрат.Добавить(ПланыСчетов.Типовой.ОсновноеПроизводство);  			
		СчетаЗатрат.Добавить(ПланыСчетов.Типовой.ПолуфабрикатыСобственногоПроизводства);
		СчетаЗатрат.Добавить(ПланыСчетов.Типовой.ВспомогательныеПроизводства);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("СчетаЗатрат",        СчетаЗатрат);
	
	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Подразделения);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.НоменклатурныеГруппы);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.СтатьиЗатрат);
	Запрос.УстановитьПараметр("ВидыСубконто",  ВидыСубконто);
	
	Результат = Запрос.Выполнить();
	
	// Дерево значений с суммами НЗП, распределенными по статьям затрат
	ДанныеДляНЗП = Новый ДеревоЗначений;
	ДанныеДляНЗП.Колонки.Добавить("СтруктурноеПодразделение");
	ДанныеДляНЗП.Колонки.Добавить("Подразделение");
	ДанныеДляНЗП.Колонки.Добавить("НоменклатурнаяГруппа");
	
	Если СтруктураДопПараметров.Учет = "НУ" Тогда
		ДанныеДляНЗП.Колонки.Добавить("СчетНУ");
		ДанныеДляНЗП.Колонки.Добавить("СуммаНУ");
		ДанныеДляНЗП.Колонки.Добавить("ВидУчетаНУ");
	Иначе
		ДанныеДляНЗП.Колонки.Добавить("Счет");
		ДанныеДляНЗП.Колонки.Добавить("Сумма");
	КонецЕсли;
	
	ДанныеДляНЗП.Колонки.Добавить("СтатьяЗатрат");
	
	
	//существуют остатки НЗП
	Если НЕ Результат.Пустой() Тогда
		
		Если Не НазваниеНачалаЭтапаСообщалось Тогда
			
			ТекстСообщения = НСтр("ru='-----Начало переноса остатков производственных счетов на счета незавершенного производства-----'");
			ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации(ТекстСообщения,,, Неопределено, ВидРегламентнойОперации, Ложь);	
			НазваниеНачалаЭтапаСообщалось = Истина;
		КонецЕсли;
		
	КонецЕсли;	
	
	// Выборка по структурным подразделениям.
	ВыборкаПоСтруктурнымПодразделениям = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПоСтруктурнымПодразделениям.Следующий() Цикл
		// Выборка по подразделениям.
		ВыборкаПоПодразделениям = ВыборкаПоСтруктурнымПодразделениям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПоПодразделениям.Следующий() Цикл		
			
			НоваяСтрока = ДанныеДляНЗП.Строки.Добавить(); 
			НоваяСтрока.Подразделение = ВыборкаПоПодразделениям.Субконто1;
			НоваяСтрока.СтруктурноеПодразделение = ВыборкаПоПодразделениям.СтруктурноеПодразделение;
			
			ИндексСтроки = ДанныеДляНЗП.Строки.Индекс(НоваяСтрока);
			
			// Выборка по счетам.
			ВыборкаПоСчетам = ВыборкаПоПодразделениям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаПоСчетам.Следующий() Цикл		
				
				ВыборкаПоНомГруппам = ВыборкаПоСчетам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);				
				
				Пока ВыборкаПоНомГруппам.Следующий() Цикл		
					ОстатокНЗППоНоменклатурнойГруппе = ВыборкаПоНомГруппам.КонОстаток;
					ОбщийОборотПоНоменклатурнойГруппе= 0;
					// Обходим статьи затрат 2 раза. 1-й - Сбор общей суммы оборота по всем статьям затрат.
					// 2-й - Распределение по статьям и занесение сумм в дерево значений.
					Для СчетчикЦикла = 1 По 2 Цикл
						
						// Выборка по статьям затрат
						ВыборкаПоСтатьямЗатрат = ВыборкаПоНомГруппам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
						
						РаспределеннаяСумма = 0;
						ТекЗапись = 0;
						
						Пока ВыборкаПоСтатьямЗатрат.Следующий() Цикл		
							
							// 1-й проход. Сбор данных.
							Если СчетчикЦикла = 1 Тогда
								 //Если ВыборкаПоСтатьямЗатрат.ОборотДт > 0 Тогда
								ОбщийОборотПоНоменклатурнойГруппе = ОбщийОборотПоНоменклатурнойГруппе + ВыборкаПоСтатьямЗатрат.ОборотДт;
								//КонецЕсли;
								
								// 2-й проход. Распределение и занесение сумм в дерево значений.	
							Иначе
								
								Если ОбщийОборотПоНоменклатурнойГруппе = 0 Тогда
									Продолжить;	
								КонецЕсли;	
								
								НоваяСтрока = ДанныеДляНЗП.Строки[ИндексСтроки] .Строки.Добавить(); 
								НоваяСтрока.СтруктурноеПодразделение = ВыборкаПоСтатьямЗатрат.СтруктурноеПодразделение;
								НоваяСтрока.Подразделение 			 = ВыборкаПоСтатьямЗатрат.Субконто1;
								НоваяСтрока.НоменклатурнаяГруппа 	 = ВыборкаПоСтатьямЗатрат.Субконто2;
								НоваяСтрока.СтатьяЗатрат		 	 = ВыборкаПоСтатьямЗатрат.Субконто3;
								СуммаНЗППоСтатьеЗатрат	= Окр((ВыборкаПоСтатьямЗатрат.КонОстаток * ВыборкаПоСтатьямЗатрат.ОборотДт / ОбщийОборотПоНоменклатурнойГруппе),2, РежимОкругления.Окр15как20);
								
								ОстатокКРаспределению = Окр((ВыборкаПоСтатьямЗатрат.КонОстаток - РаспределеннаяСумма),2, РежимОкругления.Окр15как20);
								
								// берем наименьший из двух величин - рассчитанной суммы НЗП и остатка суммы к распределению
								// так как при расчете каждой суммы СуммаНЗППоСтатьеЗатрат были округления в большую сторону, 
								// и если возникнуть ошибки, то однозначно в большую сторону (режим округления такой), поэтому берем меньший остаток
								// если это последняя запись то списываем полоностью 
								
								ТекЗапись = ТекЗапись + 1;
								
								Если ВыборкаПоСтатьямЗатрат.Количество() <> ТекЗапись Тогда 
									СуммаКОтнесению = ?(СуммаНЗППоСтатьеЗатрат>ОстатокКРаспределению, ОстатокКРаспределению, СуммаНЗППоСтатьеЗатрат);									
								Иначе 
									СуммаКОтнесению = ?(РаспределеннаяСумма + ОстатокКРаспределению = ВыборкаПоСтатьямЗатрат.КонОстаток, ОстатокКРаспределению, СуммаНЗППоСтатьеЗатрат); 
									СуммаНЗППоСтатьеЗатрат = СуммаКОтнесению;
								КонецЕсли;
								
								Если СтруктураДопПараметров.Учет = "НУ" Тогда
									НоваяСтрока.СчетНУ				 	= ВыборкаПоСтатьямЗатрат.Счет;
									НоваяСтрока.СуммаНУ 				= СуммаКОтнесению;
									НоваяСтрока.ВидУчетаНУ   		 	= ВыборкаПоСтатьямЗатрат.ВидУчета;
								Иначе
									НоваяСтрока.Счет				 	= ВыборкаПоСтатьямЗатрат.Счет;
									НоваяСтрока.Сумма 				    = СуммаКОтнесению;
								КонецЕсли;    						
								
								РаспределеннаяСумма = РаспределеннаяСумма + СуммаНЗППоСтатьеЗатрат; 
								
							КонецЕсли;	
							
						КонецЦикла;	// по статьям затрат.
						
					КонецЦикла;	// по этапам. 
					
				КонецЦикла;	// по номенклатурным группам.
				
			КонецЦикла;	// по счетам.	
			
		КонецЦикла;	// по подразделениям.
	КонецЦикла; // по структурным подразделения

	
	// Если по какому-либо подразделению нет сумм - удаляем строку 
	КолвоЭлементов = ДанныеДляНЗП.Строки.Количество(); 
	Для ОбратныйИндекс = 1 По КолвоЭлементов Цикл 
		ТекСтрока = ДанныеДляНЗП.Строки[КолвоЭлементов - ОбратныйИндекс]; 
		
		Если СтруктураДопПараметров.Учет = "НУ" Тогда
			ИмяКолонки = "СуммаНУ";
		Иначе
			ИмяКолонки = "Сумма";
		КонецЕсли;
		
		Если ТекСтрока.Строки.Итог(ИмяКолонки, Истина) = 0 Тогда 
			ДанныеДляНЗП.Строки.Удалить(ТекСтрока); 
		КонецЕсли; 
		
	КонецЦикла; 
	
	// Формирование документов "Движение НЗП"
	Для Каждого ТекСтрокаДанныхНЗП Из ДанныеДляНЗП.Строки Цикл	
		
		// Для начала определимся с документом. Документ по текущему подразделению может существовать, а может и нет.
		//Проверку будем осуществлять не только по подразделению, но и по структурному подразделению
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Подразделение", ТекСтрокаДанныхНЗП.Подразделение); 
		СтруктураПоиска.Вставить("СтруктурноеПодразделение", ТекСтрокаДанныхНЗП.СтруктурноеПодразделение);
		НайденаяСтрока = ДокументыДвиженияНЗПТекущегоМесяца.Строки.НайтиСтроки(СтруктураПоиска);
		// документ "Движение НЗП" по текущему подразделению не найден 
		// то создаем сразу два документа один по БУ, другой по НУ.
		//В зависмости от выполняемой операции будет либо один пустой(если не выполняется какая-либо операция: Перенос НЗП (БУ, НУ)
		//либо оба будут заполнены
		Если НайденаяСтрока.Количество() = 0 Тогда
			ТекущийДокументДвижениеНЗП = Документы.ДвижениеНЗП.СоздатьДокумент();
			ТекущийДокументДвижениеНЗП.Дата 					 = Реквизиты.КонецПериода;
			ТекущийДокументДвижениеНЗП.Организация 				 = Реквизиты.Организация;
			ТекущийДокументДвижениеНЗП.СтруктурноеПодразделение	 = ТекСтрокаДанныхНЗП.СтруктурноеПодразделение;			
			ТекущийДокументДвижениеНЗП.ПодразделениеОрганизации  = ТекСтрокаДанныхНЗП.Подразделение;
			ТекущийДокументДвижениеНЗП.ВидОперации 			     = Перечисления.ВидыОперацийДвиженияНЗП.ОтнесениеНаНЗП;
			ТекущийДокументДвижениеНЗП.Ответственный 			 = Реквизиты.Ответственный;
			ТекущийДокументДвижениеНЗП.ДокументЗакрытиеМесяца	 = Реквизиты.Регистратор; 
			ТекущийДокументДвижениеНЗП.Комментарий				 = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Отнесение на НЗП %1'", ОбщегоНазначения.КодОсновногоЯзыка()),ПредставлениеПериода(Реквизиты.НачалоПериода, Реквизиты.КонецПериода, "Л=" + ОбщегоНазначения.КодОсновногоЯзыка() + "; ФП = Истина"));
			ТекущийДокументДвижениеНЗП.Автор					 = Пользователи.ТекущийПользователь();
			ТекущийДокументДвижениеНЗПСсылка					 = ТекущийДокументДвижениеНЗП.Ссылка;
			ТекущийДокументДвижениеНЗП.ОтражатьВБухгалтерскомУчете = ?(СтруктураДопПараметров.Учет = "БУ", Истина, Ложь); 
			ТекущийДокументДвижениеНЗП.УчитыватьКПН                = ?(СтруктураДопПараметров.Учет = "НУ", Истина, Ложь);
			                              			
			// документ "Движение НЗП" по текущему подразделению найден
		Иначе
			
			// Документов "Движение НЗП" по текущему подразделению более 1.
			Если НайденаяСтрока[0].ДокументСсылка > 1 Тогда
				ТекстСообщения = СтрШаблон(НСтр("ru = 'По подразделению ""%1"" найдено более одного документа
				| ""%2"". Допускается наличие только одного документа на каждое подразделение.'",ОбщегоНазначения.КодОсновногоЯзыка()), ТекСтрокаДанныхНЗП.Подразделение, Метаданные.Документы.ДвижениеНЗП.Представление());
				
				ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации(ТекстСообщения, , , Реквизиты.Объект, ВидРегламентнойОперации, Ложь);
				
				КоличествоСуществующихДокументов = НайденаяСтрока[0].ДокументСсылка ;
				Если НайденаяСтрока[0].Строки.Количество() > 0 Тогда
					
					// Перебор документов "Движение НЗП" по текущему подразделению
					Для НомерТекущегоДокумента = 0 По НайденаяСтрока[0].Строки.Количество()-1 Цикл
						ТекущийДокументДвижениеНЗПСсылка = НайденаяСтрока[0].Строки[НомерТекущегоДокумента].ДокументСсылка;
						Если НомерТекущегоДокумента = 0 Тогда
							ТекущийДокументДвижениеНЗП = ТекущийДокументДвижениеНЗПСсылка.ПолучитьОбъект();
							ТекущийДокументДвижениеНЗП.ПометкаУдаления = Ложь;
							ТекущийДокументДвижениеНЗП.Состав.Очистить();
						Иначе
							ТекущийДокументДвижениеНЗПДляУдаления = ТекущийДокументДвижениеНЗПСсылка.ПолучитьОбъект();
							ТекущийДокументДвижениеНЗПДляУдаления.УстановитьПометкуУдаления(Истина);
							
							ТекстСообщения = СтрШаблон(НСтр("ru = 'Помечен на удаление документ ""%1""'", ОбщегоНазначения.КодОсновногоЯзыка()), ТекущийДокументДвижениеНЗПДляУдаления);
							ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации( ТекстСообщения, , , Реквизиты.Объект, ВидРегламентнойОперации, Ложь);
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
				
				// Документ "Движение НЗП" по текущему подразделению один. Очищаем табличную часть документа.
			Иначе
				ТекущийДокументДвижениеНЗПСсылка = НайденаяСтрока[0].Строки[0].ДокументСсылка;
				ТекущийДокументДвижениеНЗП = ТекущийДокументДвижениеНЗПСсылка.ПолучитьОбъект();
				ТекущийДокументДвижениеНЗП.ПометкаУдаления = Ложь;
				ТекущийДокументДвижениеНЗП.Состав.Очистить();
				ТекущийДокументДвижениеНЗП.Ответственный 			 = Реквизиты.Ответственный;
				ТекущийДокументДвижениеНЗП.ДокументЗакрытиеМесяца	 = Реквизиты.Регистратор;
				
			КонецЕсли;
			
		КонецЕсли; 			
		
		// Теперь заполняем текущий документ "Движение НЗП".
		Для Каждого ДанныеТекущегоДокумента Из ТекСтрокаДанныхНЗП.Строки Цикл	
			НоваяСтрока = ТекущийДокументДвижениеНЗП.Состав.Добавить();
			Если СтруктураДопПараметров.Учет = "НУ" Тогда
				НоваяСтрока.СчетЗатратНУ 				= ДанныеТекущегоДокумента.СчетНУ;
				НоваяСтрока.СуммаНУ 					= ДанныеТекущегоДокумента.СуммаНУ;					
				НоваяСтрока.ВидУчетаНУ 					= ДанныеТекущегоДокумента.ВидУчетаНУ;					
			Иначе					
				НоваяСтрока.СчетЗатратБУ 				= ДанныеТекущегоДокумента.Счет;
				НоваяСтрока.Сумма 					    = ДанныеТекущегоДокумента.Сумма;
			КонецЕсли;
			
			НоваяСтрока.НоменклатурнаяГруппа 	= ДанныеТекущегоДокумента.НоменклатурнаяГруппа;
			НоваяСтрока.СтатьяЗатрат 			= ДанныеТекущегоДокумента.СтатьяЗатрат;
			
		КонецЦикла;
		
		ТекущийДокументДвижениеНЗП.мПроведениеОперацииИзвне = Истина;
		ТекущийДокументДвижениеНЗП.Записать(РежимЗаписиДокумента.Проведение);
		
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Создан документ ""%1"".
		|Вид операции ""%2"". Подразделение ""%3""'"), ТекущийДокументДвижениеНЗП, Перечисления.ВидыОперацийДвиженияНЗП.ОтнесениеНаНЗП, ТекущийДокументДвижениеНЗП.ПодразделениеОрганизации);
		
		ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации(ТекстСообщения, , , Неопределено, ВидРегламентнойОперации, Ложь);

		СписокСформированныхДокументов.Добавить(ТекущийДокументДвижениеНЗП);
		
	КонецЦикла;
	
	// Создание документов "Движение НЗП" с видом операции "Возврат из производства"
	Для Каждого ТекущийДокумент Из СписокСформированныхДокументов Цикл
		
		ТекущийДокументДвижениеНЗП = ТекущийДокумент.Значение;
		
		Если ЗначениеЗаполнено(ТекущийДокументДвижениеНЗП.ДокументОснование) Тогда			
			ТекущийДокументДвижениеНЗППеренос = ТекущийДокументДвижениеНЗП.ДокументОснование.ПолучитьОбъект();
			ТекущийДокументДвижениеНЗППеренос.Состав.Очистить();                  
		Иначе						
			ТекущийДокументДвижениеНЗППеренос = Документы.ДвижениеНЗП.СоздатьДокумент();
			ТекущийДокументДвижениеНЗППеренос.Дата   					= НачалоМесяца(ДобавитьМесяц(Реквизиты.Период, 1));
			ТекущийДокументДвижениеНЗППеренос.Организация 			 	= Реквизиты.Организация;
			ТекущийДокументДвижениеНЗППеренос.СтруктурноеПодразделение 	= ТекущийДокументДвижениеНЗП.СтруктурноеПодразделение;
			
			ТекущийДокументДвижениеНЗППеренос.ПодразделениеОрганизации 	= ТекущийДокументДвижениеНЗП.ПодразделениеОрганизации;
			ТекущийДокументДвижениеНЗППеренос.ВидОперации 			 	= Перечисления.ВидыОперацийДвиженияНЗП.ВозвратИзНЗП;
			ТекущийДокументДвижениеНЗППеренос.ДокументОснование		 	= Реквизиты.Регистратор;
			ТекущийДокументДвижениеНЗППеренос.ДокументЗакрытиеМесяца	= Реквизиты.Регистратор;
			ТекущийДокументДвижениеНЗППеренос.Ответственный 			= Реквизиты.Ответственный;
			ТекущийДокументДвижениеНЗППеренос.Комментарий				= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Перенос с НЗП %1'", ОбщегоНазначения.КодОсновногоЯзыка()), ПредставлениеПериода(НачалоДня(НачалоМесяца(ДобавитьМесяц(Реквизиты.Период, 1))), КонецДня(КонецМесяца(ДобавитьМесяц(Реквизиты.Период, 1))), "Л=" + ОбщегоНазначения.КодОсновногоЯзыка() + "; ФП = Истина"));
			ТекущийДокументДвижениеНЗППеренос.Автор					 	= Пользователи.ТекущийПользователь();
			ТекущийДокументДвижениеНЗППереносСсылка					 	= ТекущийДокументДвижениеНЗППеренос.Ссылка;
			ТекущийДокументДвижениеНЗППеренос.ОтражатьВБухгалтерскомУчете = ?(СтруктураДопПараметров.Учет = "БУ", Истина, Ложь); 
			ТекущийДокументДвижениеНЗППеренос.УчитыватьКПН     = ?(СтруктураДопПараметров.Учет = "НУ", Истина, Ложь); 
												
		КонецЕсли;		
		
		// Теперь заполняем текущий документ "Движение НЗП".
		Для Каждого СтрокаДокументаОтнесения Из ТекущийДокументДвижениеНЗП.Состав Цикл	
			НоваяСтрока = ТекущийДокументДвижениеНЗППеренос.Состав.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДокументаОтнесения); 
		КонецЦикла;
		
		ТекущийДокументДвижениеНЗППеренос.мПроведениеОперацииИзвне = Истина;
		ТекущийДокументДвижениеНЗППеренос.Записать(РежимЗаписиДокумента.Проведение);
		
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Создан документ ""%1"".
		|Вид операции ""%2"". Подразделение ""%3""'"), ТекущийДокументДвижениеНЗППеренос, Перечисления.ВидыОперацийДвиженияНЗП.ВозвратИзНЗП, ТекущийДокументДвижениеНЗППеренос.ПодразделениеОрганизации);
		
		ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации(ТекстСообщения, , , Неопределено, ВидРегламентнойОперации, Ложь);
		
		Если НЕ ЗначениеЗаполнено(ТекущийДокументДвижениеНЗП.ДокументОснование) Тогда
			
			ТекущийДокументДвижениеНЗП.ДокументОснование = ТекущийДокументДвижениеНЗППеренос.Ссылка;
			ТекущийДокументДвижениеНЗП.Записать(РежимЗаписиДокумента.Запись);
			
		КонецЕсли;	
		
	КонецЦикла;
	
	Если НазваниеНачалаЭтапаСообщалось И  (НЕ НазваниеОкончанияЭтапаСообщалось)Тогда
		ТекстСообщения = НСтр("ru='---Окончание переноса остатков производственных счетов на счета незавершенного производства----'");
		ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации(ТекстСообщения, , , Неопределено, ВидРегламентнойОперации, Ложь);
	КонецЕсли;
	
КонецПроцедуры

Функция СформироватьЗапросПоДокументамНЗП(Реквизиты)
	
	// Соберем данные о существующих документах "Движение НЗП".
	Запрос = Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	             |	ДвижениеНЗП.Ссылка КАК ДокументСсылка
	             |ИЗ
	             |	Документ.ДвижениеНЗП КАК ДвижениеНЗП
	             |ГДЕ
	             |	ДвижениеНЗП.Организация = &Организация
				 |	
	             |	И ДвижениеНЗП.Дата >= &НачДата
	             |	И ДвижениеНЗП.Дата <= &КонДата
	             |	И ДвижениеНЗП.ВидОперации = &ВидОперации
	             |	И ДвижениеНЗП.ОтражатьВБухгалтерскомУчете";
	Запрос.УстановитьПараметр("НачДата",  Реквизиты.НачалоПериода);
	Запрос.УстановитьПараметр("КонДата",  Реквизиты.КонецПериода);
	Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);	
	Запрос.УстановитьПараметр("ВидОперации", Перечисления.ВидыОперацийДвиженияНЗП.ОтнесениеНаНЗП);
		
	Если (Реквизиты.УбранФлажокПереносНЗПНУ <> Неопределено ИЛИ Реквизиты.УбранФлажокПереносНЗПБУ <> Неопределено)
		ИЛИ (Реквизиты.ПереносНЗПНУ И Реквизиты.ПереносНЗПБУ) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ДвижениеНЗП.ОтражатьВБухгалтерскомУчете", "");
	ИначеЕсли Реквизиты.УбранФлажокПереносНЗПНУ <> Неопределено ИЛИ Реквизиты.ПереносНЗПНУ Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ОтражатьВБухгалтерскомУчете", "УчитыватьКПН");
	КонецЕсли;
 	 		
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса;
	
КонецФункции	
