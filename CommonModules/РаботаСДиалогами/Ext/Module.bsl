////////////////////////////////////////////////////////////////////////////////
// РаботаСДиалогами: 
//  
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Функция формирует представление заголовка документа
//
// Параметры:
//  ДокументОбъект - ДокументСсылка, ДокументОбъект - ссылка на документ или объект документа информационной базы
//  НазваниеДокумента - Строка - название документа. Если не заполнено, то получается представление из метаданных документа
//  СписокПрефиксовУзлов - Массив - массив префиксов узлов РИБ. Если параметр не указан, 
//                                  то получаются значения по-умолчанию, иначе используются переданные значения.
//                                  Указывается только когда требуется переопределить стандартное поведение.
//  ПереноситьДату - Булево - признак переноса даты документа в сформированном представлении заголовка документа.
//  ПредставлениеНомераОбъекта - ПеречислениеСсылка.ВидыПредставленийНомеровДокументов - представление, к которому будет приведен номер объекта
//                                                Указывается только когда требуется переопределить стандартное поведение.
//
// Возвращаемое значение:
//  Строка - представление номера документа
//
Функция СформироватьЗаголовокДокумента(ДокументОбъект, НазваниеДокумента = "", СписокПрефиксовУзлов = Неопределено, ПереноситьДату = Ложь, ПредставлениеНомераОбъекта = Неопределено, КодЯзыка=Неопределено) Экспорт
	
	Возврат РаботаСДиалогамиКлиентСервер.СформироватьЗаголовокДокумента(ДокументОбъект, НазваниеДокумента, СписокПрефиксовУзлов, ПереноситьДату, ПредставлениеНомераОбъекта, КодЯзыка)
	
КонецФункции // СформироватьЗаголовокДокумента()

// Формирует и устанавливает текст заголовка формы документа
//
// Параметры:
//  СтрокаВидаОперации - строка вида операции документа, 
//  ДокументОбъект     - объект документа, 
//  ФормаДокумента     - форма документа.
//
Процедура УстановитьЗаголовокФормыДокумента(СтрокаВидаОперации = "", ДокументСсылка, ФормаДокумента) Экспорт

	ФормаДокумента.АвтоЗаголовок = Ложь; // заголовок будем писать сами
	
	Если ПустаяСтрока(СтрокаВидаОперации) Тогда
		Заголовок = ДокументСсылка.Метаданные().Синоним + ": ";
	Иначе
		Заголовок = ДокументСсылка.Метаданные().Синоним + ": " + СтрокаВидаОперации + ". ";
	КонецЕсли;
		
	Если ДокументСсылка.Пустая() Тогда  
		Заголовок = Заголовок + НСтр("ru = 'Новый'");
	Иначе
		Если ДокументСсылка.Проведен Тогда
			Заголовок = Заголовок + НСтр("ru = 'Проведен'");
		ИначеЕсли ДокументСсылка.Метаданные().Проведение = Метаданные.СвойстваОбъектов.Проведение.Разрешить Тогда
			Заголовок = Заголовок + НСтр("ru = 'Не проведен'");
		Иначе
			Заголовок = Заголовок + НСтр("ru = 'Записан'");
		КонецЕсли;
		Если ОбщегоНазначенияБК.ЕстьРеквизитДокумента("РучнаяКорректировка", ДокументСсылка.Метаданные()) Тогда
			Если ДокументСсылка.РучнаяКорректировка Тогда
				Заголовок = Заголовок + НСтр("ru = ': (Ручная корректировка)'");
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	ФормаДокумента.Заголовок = Заголовок;

КонецПроцедуры // УстановитьЗаголовокФормыДокумента()

// Формирует и устанавливает текст заголовка для элемента управления "УчитыватьКПН"
//
// Параметры:
//  Организация - выбранная организация в документе, 
//  ЭлементУправления     - элемент управления "УчитыватьКПН". 
//
Процедура УстановитьЗаголовокЭлементуУправленияУчитыватьКПН(Организация, ЭлементУправления) Экспорт
	
	ЮрФизЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ЮрФизЛицо");
	Если ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
		Заголовок = НСтр("ru = 'Учитывать ИПН'");
	Иначе
		Заголовок = НСтр("ru = 'Учитывать КПН'");
	КонецЕсли;
	
	ЭлементУправления.Заголовок = Заголовок;
	
КонецПроцедуры

Процедура УстановитьСвойстваЭлементовУчастниковСовместнойДеятельности(ЭлементУчастникиСовместнойДеятельности, ЭлементТЧУчастникиСовместнойДеятельностиУчастникСовместнойДеятельности, ДоговорКонтрагента)Экспорт
	
	Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДоговорКонтрагента, "ДоговорСовместнойДеятельности,УчастникСРП");		
		ЭлементУчастникиСовместнойДеятельности.Видимость = РеквизитыДоговора.ДоговорСовместнойДеятельности ИЛИ РеквизитыДоговора.УчастникСРП;
		
		Если РеквизитыДоговора.ДоговорСовместнойДеятельности Тогда
			ЭлементУчастникиСовместнойДеятельности.Заголовок = НСтр("ru ='Участники совместной деятельности'");
			ЭлементТЧУчастникиСовместнойДеятельностиУчастникСовместнойДеятельности.Заголовок = НСтр("ru ='Участник совместной деятельности'");
			
		ИначеЕсли РеквизитыДоговора.УчастникСРП Тогда
			ЭлементУчастникиСовместнойДеятельности.Заголовок = НСтр("ru ='Участники СРП'");
			ЭлементТЧУчастникиСовместнойДеятельностиУчастникСовместнойДеятельности.Заголовок = НСтр("ru ='Участник СРП'");
		КонецЕсли;
	Иначе
		ЭлементУчастникиСовместнойДеятельности.Видимость = Ложь;
	КонецЕсли;  
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции для работы со структурными подразделениями

// Процедура вызывается при изменении значения реквизита формы "СтруктурноеПодразделениеОрганизация" и устанавливает значения реквизитов объекта
//
// Параметры
//  ВыбранноеЗначение - СправочникСсылка.Организации, СправочникСсылка.ПодразделенияОрганизаций - выбранное значение в поле "СтруктурноеПодразделениеОрганизация" формы
//  Организация - СправочникСсылка.Организации - значение реквизита "Организация" объекта
//  СтруктурноеПодразделение - СправочникСсылка.ПодразделенияОрганизаций - значение реквизита "СтруктурноеПодразделение" объекта
//  СтруктураПараметров - Структура - дополнительные параметры, передаваемые из формы, также в этот параметр возвращается структура изменений реквизитов
//
Процедура СтруктурноеПодразделениеПриИзменении(ВыбранноеЗначение, Организация, СтруктурноеПодразделение, СтруктураПараметров = Неопределено) Экспорт
	
	Если СтруктураПараметров = Неопределено Тогда 
		СтруктураПараметров = Новый Структура;
	КонецЕсли;
	
	Если ВыбранноеЗначение = Неопределено Тогда 
		СтруктураПараметров.Вставить("ИзмененаОрганизация", Ложь);
		СтруктураПараметров.Вставить("ИзмененоСтруктурноеПодразделение", Ложь);
	КонецЕсли;
	
	ИсходнаяОрганизация 	 		 = Организация;
	ИсходноеСтруктурноеПодразделение = СтруктурноеПодразделение;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Организации") Тогда 
		Организация = ВыбранноеЗначение;
		СтруктурноеПодразделение = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
	Иначе 
		Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВыбранноеЗначение, "Владелец");
		СтруктурноеПодразделение = ВыбранноеЗначение;
	КонецЕсли;
	
	СтруктураПараметров.Вставить("ИзмененаОрганизация", 			 ИсходнаяОрганизация <> Организация);
	СтруктураПараметров.Вставить("ИзмененоСтруктурноеПодразделение", ИсходноеСтруктурноеПодразделение <> СтруктурноеПодразделение);
							
КонецПроцедуры

Процедура ПроверитьСоответствиеПодразделения(Организация, СтруктурноеПодразделение, Подразделение = Неопределено, 
											СписокТабличныхЧастей = Неопределено, СтруктураРеквизитовШапки = Неопределено) Экспорт 
											
	Если (НЕ ЗначениеЗаполнено(СтруктурноеПодразделение) И НЕ ЗначениеЗаполнено(Организация)) 
		ИЛИ (Подразделение <> Неопределено И НЕ ЗначениеЗаполнено(Подразделение)) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("СтруктурноеПодразделение", СтруктурноеПодразделение);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПодразделенияОрганизаций.Ссылка
	               |ИЗ
	               |	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
	               |ГДЕ
	               |	ПодразделенияОрганизаций.Владелец = &Организация
	               |	И ПодразделенияОрганизаций.Ссылка В ИЕРАРХИИ(&СтруктурноеПодразделение)";
				   
	СписокПодразделений = Новый СписокЗначений;
	СписокПодразделений.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));			   
	
	ПустаяСсылкаПодразделения = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
	
	Если Подразделение <> Неопределено Тогда
		Если СписокПодразделений.НайтиПоЗначению(Подразделение) = Неопределено Тогда
			Подразделение = ПустаяСсылкаПодразделения;
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураРеквизитовШапки <> Неопределено Тогда
		Объект = СтруктураРеквизитовШапки.Объект;
		АналитикаСчетовШапки = СтруктураРеквизитовШапки.СписокАналитикиСчетовШапки;
		Если СтруктураРеквизитовШапки.Свойство("ПриставкаИмениСчета") Тогда
			Приставка = СтруктураРеквизитовШапки.ПриставкаИмениСчета;
		Иначе 
			Приставка = "";
		КонецЕсли;
		
		Если СтруктураРеквизитовШапки.Свойство("СуффиксСчета") Тогда
			СуффиксСчета = СтруктураРеквизитовШапки.СуффиксСчета;
		Иначе 
			СуффиксСчета = "";
		КонецЕсли;
		
		Если СтруктураРеквизитовШапки.Свойство("СуффиксСубконто") Тогда
			СуффиксСубконто = СтруктураРеквизитовШапки.СуффиксСубконто;
		Иначе 
			СуффиксСубконто = "";
		КонецЕсли;
	
		Для Каждого ИмяАналитикиСчета Из АналитикаСчетовШапки Цикл
			Счет = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(Объект[Приставка + "Счет" + СуффиксСчета + ИмяАналитикиСчета]);
			Для Счетчик = 1 По 3 Цикл
				Если Счет.КоличествоСубконто >= Счетчик Тогда
					Если Счет["ВидСубконто" + Счетчик + "ТипЗначения"].СодержитТип(Тип("СправочникСсылка.ПодразделенияОрганизаций")) Тогда
						Если СписокПодразделений.НайтиПоЗначению(Объект[Приставка + "Субконто" + СуффиксСубконто + ИмяАналитикиСчета + Счетчик]) <> Неопределено Тогда
							Продолжить;
						КонецЕсли;
						Объект[Приставка + "Субконто" + СуффиксСубконто + ИмяАналитикиСчета + Счетчик] = ПустаяСсылкаПодразделения;
					КонецЕсли;
				Иначе
					Объект[Приставка + "Субконто" + СуффиксСубконто + ИмяАналитикиСчета + Счетчик] = Неопределено;	
				КонецЕсли;	
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	Если СписокТабличныхЧастей <> Неопределено Тогда
		
		Для Каждого Реквизиты Из СписокТабличныхЧастей Цикл
			ТабличнаяЧасть = Реквизиты.Значение.ТабличнаяЧасть;
			
			СписокРеквизитовПодразделения = Новый СписокЗначений;
			Реквизиты.Значение.Свойство("СписокРеквизитовПодразделения", СписокРеквизитовПодразделения);
			
			АналитикаСчетовТабличнойЧасти = Новый СписокЗначений;
			Реквизиты.Значение.Свойство("СписокАналитикиСчетов", АналитикаСчетовТабличнойЧасти);
			
			АналитикаСубконтоТабличнойЧасти = Новый Соответствие;
			Реквизиты.Значение.Свойство("СписокАналитикиСубконтоУслуги", АналитикаСубконтоТабличнойЧасти);
		
			Если Реквизиты.Значение.Свойство("ПриставкаИмениСчета") Тогда
				Приставка = Реквизиты.Значение.ПриставкаИмениСчета;
			Иначе 
				Приставка = "";
			КонецЕсли;
			
			Если Реквизиты.Значение.Свойство("СуффиксСчета") Тогда
				СуффиксСчета = Реквизиты.Значение.СуффиксСчета;
			Иначе 
				СуффиксСчета = "";
			КонецЕсли;
			
			Если Реквизиты.Значение.Свойство("СуффиксСубконто") Тогда
				СуффиксСубконто = Реквизиты.Значение.СуффиксСубконто;
			Иначе 
				СуффиксСубконто = "";
			КонецЕсли;
			
			Для Каждого СтрокаТЧ Из ТабличнаяЧасть Цикл
				
				Если СписокРеквизитовПодразделения <> Неопределено Тогда
					Для Каждого РеквизитПодразделения Из СписокРеквизитовПодразделения Цикл
						Если СписокПодразделений.НайтиПоЗначению(СтрокаТЧ[РеквизитПодразделения.Значение]) = Неопределено Тогда
							СтрокаТЧ[РеквизитПодразделения.Значение] = ПустаяСсылкаПодразделения;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				Если АналитикаСубконтоТабличнойЧасти <> Неопределено И АналитикаСчетовТабличнойЧасти <> Неопределено  Тогда
					Для Каждого ИмяАналитикиТабличнойЧасти Из АналитикаСчетовТабличнойЧасти Цикл 
						ЗаполнитьАналитикуПодразделениеСчетовДоходовЗатрат(СтрокаТЧ, СтрокаТЧ[Приставка + "Счет" + СуффиксСчета + ИмяАналитикиТабличнойЧасти.Значение], 
																			Приставка + "Субконто" + СуффиксСубконто + АналитикаСубконтоТабличнойЧасти.Получить(ИмяАналитикиТабличнойЧасти.Значение), ПустаяСсылкаПодразделения, СписокПодразделений);
					КонецЦикла;		
				ИначеЕсли АналитикаСчетовТабличнойЧасти <> Неопределено Тогда
					Для Каждого ИмяАналитикиТабличнойЧасти Из АналитикаСчетовТабличнойЧасти Цикл 
						ЗаполнитьАналитикуПодразделениеСчетовДоходовЗатрат(СтрокаТЧ, СтрокаТЧ[Приставка + "Счет" + СуффиксСчета + ИмяАналитикиТабличнойЧасти.Значение], 
																			Приставка + "Субконто" + СуффиксСубконто + ИмяАналитикиТабличнойЧасти.Значение, ПустаяСсылкаПодразделения, СписокПодразделений);
					КонецЦикла;		
				КонецЕсли;
				
			КонецЦикла;        
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Предназначен для заполнения аналитики "Подразделения" на счетах доходов/затрат
//
// Параметры:
//  СтрокаТЧ - строка табличной части, где нужно заполнять аналитику.
//  Счет - ПланыСчетовСсылка, счет, аналитику которого нужно заполнить.
//  ИмяАналитикиТабличнойЧасти - Строка, имя аналитики счета.
//  Подразделение - СправочникССылка.ПодразделенияОрганизации, значение, которым заполняется субконто "Подразделение".
//
Процедура ЗаполнитьАналитикуПодразделениеСчетовДоходовЗатрат(СтрокаТЧ, Счет, ИмяАналитики, ПодразделениеОрганизации, СписокПодразделений = Неопределено) Экспорт
	
	ПроверятьНеобходимостьИзменения = Ложь;
	Если СписокПодразделений <> Неопределено Тогда
		ПроверятьНеобходимостьИзменения = Истина;
	КонецЕсли;
		
	Для Счетчик = 1 По 3 Цикл
		СвойстваСчета = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(Счет);
		Если СвойстваСчета.КоличествоСубконто >= Счетчик Тогда
			Если СвойстваСчета["ВидСубконто" + Счетчик + "ТипЗначения"].СодержитТип(Тип("СправочникСсылка.ПодразделенияОрганизаций")) Тогда
				Если ПроверятьНеобходимостьИзменения Тогда
					Если СписокПодразделений.НайтиПоЗначению(СтрокаТЧ[ИмяАналитики + Счетчик]) <> Неопределено Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				СтрокаТЧ[ИмяАналитики + Счетчик] = ПодразделениеОрганизации;
			КонецЕсли;
		Иначе
			СтрокаТЧ[ИмяАналитики + Счетчик] = Неопределено;	
		КонецЕсли;	
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьАналитикуПодразделениеСчетовДоходовЗатрат()

Процедура ПриИзмененииЗначенияОрганизации(ДанныеОбъекта, СтруктураПараметровДляПолученияДоговора = Неопределено, СтруктураРезультатаВыполнения = Неопределено) Экспорт

	ТекПользователь = Пользователи.ТекущийПользователь();
	
	Если ДанныеОбъекта.Свойство("Организация") Тогда  
		Если ДанныеОбъекта.Свойство("ПодразделениеОрганизации")
		   И ЗначениеЗаполнено(ДанныеОбъекта.Организация) Тогда
			
			ПодразделениеПоУмолчанию = ПользователиБКВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОсновноеПодразделениеОрганизации");
			
			// Если ПодразделениеОрганизации не заполнено.
			Если НЕ ЗначениеЗаполнено(ДанныеОбъекта.ПодразделениеОрганизации) Тогда
				
				// Если ПодразделениеПоУмолчанию сооответствует выбранной организации, подставляем его.
				Если ПодразделениеПоУмолчанию.Владелец = ДанныеОбъекта.Организация Тогда
					ДанныеОбъекта.ПодразделениеОрганизации = ПодразделениеПоУмолчанию;
				КонецЕсли;
				
			Иначе // Если ПодразделениеОрганизации заполнено.
				
				// Если ПодразделениеОрганизации не соответствует выбранной организации.
				Если НЕ ДанныеОбъекта.ПодразделениеОрганизации.Владелец = ДанныеОбъекта.Организация Тогда
					
					// Если ПодразделениеПоУмолчанию сооответствует выбранной организации, подставляем его.
					Если ПодразделениеПоУмолчанию.Владелец = ДанныеОбъекта.Организация Тогда
						ДанныеОбъекта.ПодразделениеОрганизации = ПодразделениеПоУмолчанию;
					Иначе // Выбрана не основная организация. ПодразделениеОрганизации нужно очистить.
						ДанныеОбъекта.ПодразделениеОрганизации = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
						ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Значение в поле ""Подразделение"" не соответствует выбранной организации и было очищено.'"));
					КонецЕсли;   					
				КонецЕсли;       				
			КонецЕсли;           			
		КонецЕсли;               

		Если ДанныеОбъекта.Свойство("ДоговорКонтрагента") Тогда
			Если ЗначениеЗаполнено(ДанныеОбъекта.Организация) Тогда
				Если ЗначениеЗаполнено(ДанныеОбъекта.ДоговорКонтрагента)
				   И ДанныеОбъекта.ДоговорКонтрагента.Организация = ДанныеОбъекта.Организация Тогда
				Иначе
					Если ТипЗнч(ДанныеОбъекта.Ссылка) <> Тип("ДокументСсылка.КорректировкаДолга") Тогда
						ДанныеОбъекта.ДоговорКонтрагента = ЗаполнениеДокументов.ПолучитьДоговорПоОрганизацииИКонтрагенту(ДанныеОбъекта.Организация, ДанныеОбъекта.Контрагент, СтруктураПараметровДляПолученияДоговора);
					Иначе
						ДанныеОбъекта.ДоговорКонтрагента = ЗаполнениеДокументов.ПолучитьДоговорПоОрганизацииИКонтрагенту(ДанныеОбъекта.Организация, ДанныеОбъекта.КонтрагентКредитор, СтруктураПараметровДляПолученияДоговора);
					КонецЕсли;
				КонецЕсли;
			Иначе
				ДанныеОбъекта.ДоговорКонтрагента = Неопределено;
			КонецЕсли;
		КонецЕсли;

		Если ДанныеОбъекта.Свойство("БанковскийСчетОрганизации") Тогда
			ДанныеОбъекта.БанковскийСчетОрганизации = УправлениеДенежнымиСредствамиСервер.ПолучитьОсновнойБанковскийСчетДокумента(ДанныеОбъекта);			
		КонецЕсли;
		
		Если ДанныеОбъекта.Свойство("Касса") Тогда						
			ДанныеОбъекта.Касса = Справочники.Кассы.КассаПоУмолчанию(ДанныеОбъекта);				
		КонецЕсли;
		
		Если ДанныеОбъекта.Свойство("УчитыватьНДС") Тогда
			ДанныеОбъекта.УчитыватьНДС = ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНДС(ДанныеОбъекта.Организация, ДанныеОбъекта.Дата);
			
			Если ДанныеОбъекта.Свойство("СуммаВключаетНДС") Тогда
				Если ДанныеОбъекта.УчитыватьНДС Тогда
					Если ДанныеОбъекта.Свойство("ТипЦен") И ЗначениеЗаполнено(ДанныеОбъекта.ТипЦен) Тогда
						ДанныеОбъекта.СуммаВключаетНДС = ДанныеОбъекта.ТипЦен.ЦенаВключаетНДС;
					Иначе
						ДанныеОбъекта.СуммаВключаетНДС = Истина;
					КонецЕсли;
				Иначе
					ДанныеОбъекта.СуммаВключаетНДС = Ложь;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	СписокТЧ = Новый СписокЗначений;
	Для Каждого ТЧ Из ДанныеОбъекта.Ссылка.Метаданные().ТабличныеЧасти Цикл
		
		Если (ТЧ.Реквизиты.Найти("Цена") <> Неопределено) И (ТЧ.Реквизиты.Найти("Номенклатура") <> Неопределено) Тогда
			СписокТЧ.Добавить(ТЧ.Имя);
		КонецЕсли;
		
	КонецЦикла;
	
	ТипЦен = "";
	Если ДанныеОбъекта.Свойство("ТипЦен") Тогда
		ТипЦен = ДанныеОбъекта.ТипЦен;
	КонецЕсли;
	
	Если СписокТЧ.Количество() > 0 Тогда
		
		Если СписокТЧ.Количество() = 1 Тогда
			
			ТЧ = ДанныеОбъекта[СписокТЧ[0].Значение];
			МассивНоменклатуры = ТЧ.Выгрузить(,"Номенклатура").ВыгрузитьКолонку("Номенклатура");
			
		Иначе
			
			МассивНоменклатуры = Новый Массив;
			
			Для Каждого ЭлементСписка Из СписокТЧ Цикл
				
				ТЧ = ДанныеОбъекта[ЭлементСписка.Значение];

				Для Каждого СтрокаТабличнойЧасти Из ТЧ Цикл
					
					МассивНоменклатуры.Добавить(СтрокаТабличнойЧасти.Номенклатура);
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если СтруктураРезультатаВыполнения = Неопределено Тогда 
			СтруктураРезультатаВыполнения = Новый Структура;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТипЦен) Тогда
			
			СоответствиеЦенНоменклатуры = Новый Соответствие;
			ТаблицаЦенНоменклатуры = УправлениеЦенообразованием.ПолучитьТаблицуЦенНоменклатуры(МассивНоменклатуры, ТипЦен, ДанныеОбъекта.Дата, ДанныеОбъекта.Организация);
			
			Для Каждого СтрокаТаблицыЦен Из ТаблицаЦенНоменклатуры Цикл
				
				ПолученнаяЦена = СтрокаТаблицыЦен.Цена;
				
				Если ДанныеОбъекта.Свойство("ВалютаДокумента") Тогда					
					ВалютаДокумента = ДанныеОбъекта.ВалютаДокумента; 	
				Иначе					
					ВалютаДокумента =  ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();					
				КонецЕсли;                                                                                            				

				Если СтрокаТаблицыЦен.Валюта <> ВалютаДокумента Тогда
					
					СтруктураКурсаЦены = ОбщегоНазначенияБК.ПолучитьКурсВалюты(СтрокаТаблицыЦен.Валюта, ДанныеОбъекта.Дата);
					
										
					ПолученнаяЦена     = ОбщегоНазначенияБККлиентСервер.ПересчитатьИзВалютыВВалюту(
						ПолученнаяЦена, СтрокаТаблицыЦен.Валюта, ВалютаДокумента, 
					    СтрокаТаблицыЦен.Курс, ДанныеОбъекта.КурсВзаиморасчетов, 
					    СтрокаТаблицыЦен.Кратность, ДанныеОбъекта.КратностьВзаиморасчетов);

				КонецЕсли;
					
				СоответствиеЦенНоменклатуры.Вставить(СтрокаТаблицыЦен.Номенклатура, Новый Структура("Цена, Валюта", ПолученнаяЦена, СтрокаТаблицыЦен.Валюта));		
			КонецЦикла;
			
			СтруктураРезультатаВыполнения.Вставить("СоответствиеЦенНоменклатуры", СоответствиеЦенНоменклатуры);
			СтруктураРезультатаВыполнения.Вставить("ТипЦен", ТипЦен);
			СтруктураРезультатаВыполнения.Вставить("ТипЦенЦенаВключаетНДС", ТипЦен.ЦенаВключаетНДС);
			
		КонецЕсли;
		
		СтруктураРезультатаВыполнения.Вставить("СписокТЧ", СписокТЧ);
				
	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииЗначенияОрганизации()

Функция АдресТаблицыЗначений(Форма, ИмяТаблицы) Экспорт
	
	ТабЗнач = Форма.Объект[ИмяТаблицы].Выгрузить();	
	АдресТабЗнач = ПоместитьВоВременноеХранилище(ТабЗнач, Форма.УникальныйИдентификатор);
	Возврат АдресТабЗнач;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ ИЗМЕНЕНИЙ РЕКВИЗИТОВ В ФОРМЕ

// Процедура выполняет общие действия при изменнении даты документа
//
// Параметры:
//  ДанныеОбъекта                 - объект редактируемого документа
//  ВалютаРегламентированногоУчета - валюта регламентированного учета
//  ФлагИзмененияКурса             - валюта регламентированного учета
//
Процедура ПриИзмененииЗначенияДатыДокумента(ДанныеОбъекта, ВалютаРегламентированногоУчета, ФлагИзмененияКурса = Неопределено, ФлагИзмененияУчетаНДС = Истина, СтруктураРезультатаВыполнения = Неопределено, ПроверкаПоВалютеДокумента = Ложь) Экспорт

	ЕстьВалютаДокумента    = ДанныеОбъекта.Свойство("ВалютаДокумента");
	ЕстьДоговорКонтрагента = ДанныеОбъекта.Свойство("ДоговорКонтрагента");
	
	ЕстьУчетНДС = Ложь;
	Если ФлагИзмененияУчетаНДС Тогда
		ЕстьУчетНДС = ДанныеОбъекта.Свойство("УчитыватьНДС");
	КонецЕсли;
	
	ПроверкаПоВалютеВзаиморасчетов = Ложь;
	ФлагИзмененияКурса             = Ложь;
	Если ЕстьУчетНДС Тогда
		ДанныеОбъекта.УчитыватьНДС = ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНДС(ДанныеОбъекта.Организация, ДанныеОбъекта.Дата);		
		Если (НЕ ДанныеОбъекта.УчитыватьНДС) И ДанныеОбъекта.Свойство("СуммаВключаетНДС") Тогда
			ДанныеОбъекта.СуммаВключаетНДС = Ложь;
		КонецЕсли;			
	КонецЕсли; 
	         		
	// В некоторых документах нет валюты документа и договора.
	Если ЕстьВалютаДокумента Тогда
		Если ЕстьДоговорКонтрагента И НЕ ПроверкаПоВалютеДокумента Тогда
			Договор = ДанныеОбъекта.ДоговорКонтрагента;

			Если ЗначениеЗаполнено(Договор) Тогда
				Валюта = Договор.ВалютаВзаиморасчетов;
				ПроверкаПоВалютеВзаиморасчетов = Истина;
			Иначе
				Возврат;
			КонецЕсли;
		Иначе
			Валюта = ДанныеОбъекта.ВалютаДокумента;
			ПроверкаПоВалютеВзаиморасчетов = ПроверкаПоВалютеДокумента;
		КонецЕсли;
	Иначе
		Возврат;
	КонецЕсли;

	СтруктураНовогоКурсаВалюты  = ОбщегоНазначенияБК.ПолучитьКурсВалюты(Валюта, ДанныеОбъекта.Дата);
	НовыйКурс                   = СтруктураНовогоКурсаВалюты.Курс;
	НоваяКратность              = СтруктураНовогоКурсаВалюты.Кратность;

	ЕстьКурсДокумента           = ДанныеОбъекта.Свойство("КурсДокумента");
	ЕстьКратностьДокумента      = ДанныеОбъекта.Свойство("КратностьДокумента");
	ЕстьКурсВзаиморасчетов      = ДанныеОбъекта.Свойство("КурсВзаиморасчетов");
	ЕстьКратностьВзаиморасчетов = ДанныеОбъекта.Свойство("КратностьВзаиморасчетов");

	// В некоторых документах курс и кратность документа отсутствуют
	Если ПроверкаПоВалютеВзаиморасчетов И ЕстьКурсВзаиморасчетов И ЕстьКратностьВзаиморасчетов Тогда
		СтарыйКурс      = ДанныеОбъекта.КурсВзаиморасчетов;
		СтараяКратность = ДанныеОбъекта.КратностьВзаиморасчетов;
	ИначеЕсли НЕ ПроверкаПоВалютеВзаиморасчетов И ЕстьКурсДокумента И ЕстьКратностьДокумента Тогда
		СтарыйКурс      = ДанныеОбъекта.КурсДокумента;
		СтараяКратность = ДанныеОбъекта.КратностьДокумента;
	Иначе
		Возврат;
	КонецЕсли;

	// Если курс и кратность неизменилась, то выход.
	Если НовыйКурс = СтарыйКурс И НоваяКратность = СтараяКратность Тогда
		Возврат;
	КонецЕсли;

	Если СтруктураРезультатаВыполнения = Неопределено Тогда 
		СтруктураРезультатаВыполнения = Новый Структура;
	КонецЕсли;
	
	Если ЕстьКурсДокумента Тогда
		СтруктураРезультатаВыполнения.Вставить("КурсДокумента", НовыйКурс);
	КонецЕсли;
	
	Если ЕстьКратностьДокумента Тогда
		СтруктураРезультатаВыполнения.Вставить("КратностьДокумента", НоваяКратность);
	КонецЕсли;
		
	Если ЕстьКурсВзаиморасчетов Тогда
		СтруктураРезультатаВыполнения.Вставить("КурсВзаиморасчетов", НовыйКурс);
	КонецЕсли;
		
	Если ЕстьКратностьВзаиморасчетов Тогда
		СтруктураРезультатаВыполнения.Вставить("КратностьВзаиморасчетов", НоваяКратность);
	КонецЕсли;
	
	ТекстНовыйКурс  = СокрЛП(РаботаСДиалогамиКлиентСервер.ПолучитьИнформациюКурсаВалютыСтрокой(Валюта, НовыйКурс,  НоваяКратность,  ВалютаРегламентированногоУчета, Истина));
	ТекстСтарыйКурс = СокрЛП(РаботаСДиалогамиКлиентСервер.ПолучитьИнформациюКурсаВалютыСтрокой(Валюта, СтарыйКурс, СтараяКратность, ВалютаРегламентированногоУчета, Истина));
	
	Если ПроверкаПоВалютеВзаиморасчетов Тогда
		ТекстВопроса = НСтр("ru = 'На дату документа у валюты взаиморасчетов %1 был задан другой курс.
		|Установить курс взаиморасчетов %2 в соответствии с курсом валюты?'");
	Иначе
		ТекстВопроса = НСтр("ru = 'На дату документа у валюты документа %1 был задан другой курс.
		|Установить курс документа %2 в соответствии с курсом валюты?'");
	КонецЕсли;
	
	СтруктураРезультатаВыполнения.Вставить("ТекстВопроса", СтрШаблон(ТекстВопроса, ТекстСтарыйКурс, ТекстНовыйКурс));
	
	ФлагИзмененияКурса = Истина;
КонецПроцедуры // ПриИзмененииЗначенияДатыДокумента()

Процедура ПриИзмененииЗначенияКассыБанковскогоСчета(ВалютаДокумента, КурсДокумента, КратностьДокумента, ДатаДокумента, 
	                                        СуммаДокумента, ВалютаДенежныхСредств, ПересчитатьСуммаДокумента = Ложь) Экспорт

	// Поменяем валюту до вопроса о пересчете, чтобы было видно, что она действительно поменялась.
	СтараяВалюта    = ВалютаДокумента; 
	СтарыйКурс      = КурсДокумента;
	СтараяКратность = КратностьДокумента;
	ВалютаДокумента = ВалютаДенежныхСредств; // должны строго совпадать

	СтруктураКурсаВалютаДокумента = ОбщегоНазначенияБК.ПолучитьКурсВалюты(ВалютаДокумента, ДатаДокумента);
	КурсДокумента        = СтруктураКурсаВалютаДокумента.Курс;
	КратностьДокумента   = СтруктураКурсаВалютаДокумента.Кратность;

	Если ВалютаДокумента <> СтараяВалюта
	   И СуммаДокумента > 0 И ПересчитатьСуммаДокумента Тогда

		// Надо предложить пересчитать сумму.
		СуммаДокумента = ОбщегоНазначенияБККлиентСервер.ПересчитатьИзВалютыВВалюту(СуммаДокумента, СтараяВалюта, ВалютаДокумента, СтарыйКурс,
								    КурсДокумента,СтараяКратность,КратностьДокумента);

	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА ВСТРОЕННОЙ СПРАВКИ

Функция ПолучитьИДКартинки(Картинка) Экспорт
	
	КартИД	= ЗначениеВСтрокуВнутр(Картинка);
	КартИД	= Сред(КартИД,Найти(КартИД,"{")+1);
	КартИД	= Сред(КартИД,Найти(КартИД,"{")+1);
	КартИД	= Сред(КартИД,Найти(КартИД,"{")+1);
	КартИД	= Лев(КартИД,НАйти(КартИД,"}")-1);
	
	Если Лев(КартИД,1) = "-" Тогда
		КартИд	= "n"+КартИД;
	Иначе
		КартИД	= Сред(КартИД,3);
	КонецЕсли;

	Возврат КартИД;
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция ПроверитьВозможностьКорректировкиДокумента(ДокументСсылка) Экспорт
	
	Если НЕ ОбщегоНазначенияБККлиентСервер.ЭтоПростаяВерсияКонфигурации() Тогда
		Возврат Истина;
	КонецЕсли;
	                		
	ЭтоРозница =  ТипЗнч(ДокументСсылка) =  Тип("ДокументСсылка.ОтчетОРозничныхПродажах") 
			ИЛИ ТипЗнч(ДокументСсылка) =  Тип("ДокументСсылка.ЧекККМ");
	Возврат Не ЭтоРозница;	
КонецФункции