////////////////////////////////////////////////////////////////////////////////
// УчетТоваров: 
//  
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// ПОСТУПЛЕНИЕ ТОВАРОВ

Процедура СформироватьДвиженияПоступлениеТоваров(ТаблицаТовары, ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Параметры = ПодготовитьПараметрыПоступлениеТоваров(ТаблицаТовары, ТаблицаРеквизиты);
	
	Если Параметры.ТаблицаТовары.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	
	Реквизиты = Параметры.Реквизиты[0];
	
	Для Каждого СтрокаТаблицы Из Параметры.ТаблицаТовары Цикл
		
		Проводка = Движения.Типовой.Добавить();
		
		Проводка.Период       = Реквизиты.Период;
		Проводка.Организация  = Реквизиты.Организация;
		Проводка.Содержание   = СтрокаТаблицы.Содержание;
		Проводка.Сумма        = СтрокаТаблицы.Сумма;
		
		Проводка.СчетДт       = СтрокаТаблицы.СчетУчетаБУ;
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура", СтрокаТаблицы.Номенклатура);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Склады",       Реквизиты.Склад);
		
		ПроцедурыБухгалтерскогоУчета.УстановитьПодразделениеПроводки(
			Проводка, Реквизиты.СтруктурноеПодразделение, "Дт");
		
		Если СтрокаТаблицы.ВедетсяПартионныйУчет Тогда 
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Партии",   Реквизиты.Регистратор);
		КонецЕсли;
		
		Проводка.КоличествоДт = СтрокаТаблицы.Количество;
		
		Если СтрокаТаблицы.СчетУчетаБУЗабалансовый Тогда 
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Контрагенты",Реквизиты.Контрагент);			
		Иначе 
			Проводка.СчетКт = Реквизиты.СчетУчетаРасчетовСКонтрагентом;
			
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Контрагенты",        Реквизиты.Контрагент, Истина);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Договоры",           Реквизиты.ДоговорКонтрагента);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ДокументыРасчетовСКонтрагентами", Реквизиты.Регистратор);
			
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделениеПроводки(
				Проводка, Реквизиты.СтруктурноеПодразделение, "Кт");
			
			Если ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт).Валютный Тогда
				Проводка.ВалютаКт = Реквизиты.ВалютаВзаиморасчетов;
				Проводка.ВалютнаяСуммаКт = СтрокаТаблицы.СуммаВзаиморасчетов;
			КонецЕсли;
		КонецЕсли;
		
		// проводки по налоговому учету
		Если НЕ СтрокаТаблицы.СчетУчетаБУЗабалансовый И Реквизиты.НеобходимостьОтраженияВНУ Тогда
			
			Проводка = Движения.Налоговый.Добавить();
			
			Проводка.Период      = Реквизиты.Период;
			Проводка.Организация = Реквизиты.Организация;
			
			Проводка.СчетДт      = СтрокаТаблицы.СчетУчетаНУ;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Номенклатура",	СтрокаТаблицы.Номенклатура);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Склады",		Реквизиты.Склад);
			
			Проводка.КоличествоДт = СтрокаТаблицы.Количество;
			
			Проводка.СчетКт = ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьСчетРасчетовСКонтрагентомНУ(Реквизиты.СчетУчетаРасчетовСКонтрагентом);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Контрагенты",        Реквизиты.Контрагент);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Договоры",           Реквизиты.ДоговорКонтрагента);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ДокументыРасчетовСКонтрагентами", Реквизиты.Регистратор);
			
			ПроцедурыНалоговогоУчета.ВидУчетаНУ(Проводка, Реквизиты.ВидУчетаНУ);
			
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				Проводка, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);
			
			Проводка.Сумма        = СтрокаТаблицы.Сумма;
			Проводка.Содержание   = СтрокаТаблицы.Содержание;
		КонецЕсли;	
	КонецЦикла;
	
	Движения.Типовой.Записывать = Истина;
	Если Реквизиты.НеобходимостьОтраженияВНУ Тогда 
		Движения.Налоговый.Записывать = Истина;
	КонецЕсли;
		
КонецПроцедуры

// ОПРИХОДОВАНИЕ ТОВАРОВ

Процедура СформироватьДвиженияОприходованиеТоваров(ТаблицаТовары, ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Если ТаблицаТовары = Неопределено ИЛИ ТаблицаРеквизиты = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыОприходованиеТоваров(ТаблицаТовары, ТаблицаРеквизиты);
	
	Если Параметры.ТаблицаТовары.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Реквизиты = Параметры.Реквизиты[0];

	СтратегииСписания = Новый Соответствие;

	Для каждого СтрокаТаблицы Из Параметры.ТаблицаТовары Цикл

		Проводка = Движения.Типовой.Добавить();

		Проводка.Период       = Реквизиты.Период;
		Проводка.Организация  = Реквизиты.Организация;
		Проводка.Содержание   = СтрокаТаблицы.Содержание;
		Проводка.Сумма        = СтрокаТаблицы.Сумма;
		Проводка.НомерЖурнала = Реквизиты.НомерЖурнала;

		Проводка.СчетДт       = СтрокаТаблицы.СчетУчетаБУ;
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура", СтрокаТаблицы.Номенклатура);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Склады",       СтрокаТаблицы.Склад);
		
		ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
			Проводка, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);
                                                                               
		// если нет соответствия стратегии выбранному счету, добавим значение
		Если СтратегииСписания.Получить(СтрокаТаблицы.СчетУчетаБУ) = Неопределено Тогда
			СтратегииСписания.Вставить(СтрокаТаблицы.СчетУчетаБУ,УправлениеЗапасамиПовтИсп.ВедетсяПартионныйУчетДляСчета(СтрокаТаблицы.СчетУчетаБУ));
		КонецЕсли;
		
		ВедетсяПартионныйУчетДляСчета = СтратегииСписания.Получить(СтрокаТаблицы.СчетУчетаБУ);
		Если ВедетсяПартионныйУчетДляСчета Тогда 
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Партии",       Реквизиты.Регистратор);
		КонецЕсли;

		Проводка.КоличествоДт = СтрокаТаблицы.Количество;

		Проводка.СчетКт = СтрокаТаблицы.КорСчетОприходованияБУ;
		
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтрокаТаблицы.КорСубконтоОприходованияБУ1);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтрокаТаблицы.КорСубконтоОприходованияБУ2);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, СтрокаТаблицы.КорСубконтоОприходованияБУ3);
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.ОсновноеСредство) Тогда
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", СтрокаТаблицы.ОсновноеСредство);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ВнеоборотныеАктивы", СтрокаТаблицы.ОсновноеСредство);
		КонецЕсли;
		
		Если ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт).Валютный Тогда
			Проводка.ВалютаКт = Реквизиты.ВалютаДокумента;
			Проводка.ВалютнаяСуммаКт = СтрокаТаблицы.Сумма;
		КонецЕсли;

		// проводки по налоговому учету
		Если Реквизиты.НеобходимостьОтраженияВНУ И НЕ ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы.СчетУчетаБУ).Забалансовый Тогда
			
			Проводка = Движения.Налоговый.Добавить();

			Проводка.Период      = Реквизиты.Период;
			Проводка.Организация = Реквизиты.Организация;
			Проводка.Сумма        = СтрокаТаблицы.Сумма;
			Проводка.Содержание   = НСтр("ru = 'Оприходованы ТМЗ'",ОбщегоНазначения.КодОсновногоЯзыка());

			Проводка.СчетДт      = СтрокаТаблицы.СчетУчетаНУ;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Номенклатура",	СтрокаТаблицы.Номенклатура);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Склады",	СтрокаТаблицы.Склад);
            			
			Проводка.КоличествоДт = СтрокаТаблицы.Количество;

			Проводка.СчетКт = СтрокаТаблицы.КорСчетОприходованияНУ;		
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтрокаТаблицы.КорСубконтоОприходованияНУ1);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтрокаТаблицы.КорСубконтоОприходованияНУ2);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, СтрокаТаблицы.КорСубконтоОприходованияНУ3);        			
			
			Если ЗначениеЗаполнено(СтрокаТаблицы.ОсновноеСредство) Тогда
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ВнеоборотныеАктивы", СтрокаТаблицы.ОсновноеСредство);
			КонецЕсли;
			
			ПроцедурыНалоговогоУчета.ВидУчетаНУ(Проводка, Реквизиты.ВидУчетаНУ);
			
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				Проводка, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);

		КонецЕсли;	
	КонецЦикла; // Для каждого СтрокаТаблицы Из ТаблицаПоТоварам Цикл
	
	Движения.Типовой.Записывать = Истина;
	Если Реквизиты.НеобходимостьОтраженияВНУ Тогда 
		Движения.Налоговый.Записывать = Истина;
	КонецЕсли;

КонецПроцедуры

// ПОСТУПЛЕНИЕ ДОП. РАСХОДОВ

Процедура СформироватьДвиженияПоступлениеДопРасходов(ТаблицаТовары, ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Параметры = ПодготовитьПараметрыПоступлениеДопРасходов(ТаблицаТовары, ТаблицаРеквизиты);
	
	Если Параметры.ТаблицаТовары.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = Параметры.Реквизиты[0];
	
	Для Каждого СтрокаТаблицы Из Параметры.ТаблицаТовары Цикл
		
		Если СтрокаТаблицы.Сумма = 0 Тогда 
			Продолжить;
		КонецЕсли;
		
		Проводка = Движения.Типовой.Добавить();
		
		Проводка.Период       = Реквизиты.Период;
		Проводка.Организация  = Реквизиты.Организация;
		Проводка.Содержание   = СтрокаТаблицы.Содержание;
		Проводка.Сумма        = СтрокаТаблицы.Сумма;
		
		Проводка.СчетДт       = СтрокаТаблицы.СчетУчетаБУ;
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура", СтрокаТаблицы.Номенклатура);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Склады",       СтрокаТаблицы.Склад);
		
		ПроцедурыБухгалтерскогоУчета.УстановитьПодразделениеПроводки(
			Проводка, Реквизиты.СтруктурноеПодразделение, "Дт");
		
		Если СтрокаТаблицы.ВедетсяПартионныйУчет Тогда 
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Партии",   СтрокаТаблицы.Партия);
		КонецЕсли;
		
		Если СтрокаТаблицы.СчетУчетаБУЗабалансовый Тогда 
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт, "Контрагенты",Реквизиты.Контрагент);			
		Иначе 
			Если Реквизиты.ВидОперации = Перечисления.ВидыОперацийПоступлениеДопРасходов.УслугаСтороннейОрганизации 
				ИЛИ Реквизиты.ВидОперации = Перечисления.ВидыОперацийПоступлениеДопРасходов.ПоступлениеОтНерезидента Тогда 
				Проводка.СчетКт = Реквизиты.СчетУчетаРасчетовСКонтрагентом;
				
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Контрагенты",        Реквизиты.Контрагент, Истина);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Договоры",           Реквизиты.ДоговорКонтрагента);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ДокументыРасчетовСКонтрагентами", Реквизиты.Регистратор);
			ИначеЕсли Реквизиты.ВидОперации = Перечисления.ВидыОперацийПоступлениеДопРасходов.ВнутреннийРасход Тогда 
				Проводка.СчетКт = Реквизиты.СчетЗатратБУ;
				
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, Реквизиты.СубконтоЗатратБУ1);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, Реквизиты.СубконтоЗатратБУ2);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, Реквизиты.СубконтоЗатратБУ3);
			КонецЕсли;
			
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделениеПроводки(
				Проводка, Реквизиты.СтруктурноеПодразделение, "Кт");
			
			Если ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт).Валютный Тогда
				Проводка.ВалютаКт = Реквизиты.ВалютаВзаиморасчетов;
				Проводка.ВалютнаяСуммаКт = СтрокаТаблицы.СуммаВзаиморасчетов;
			КонецЕсли;
		КонецЕсли;
		
		// проводки по налоговому учету
		Если НЕ СтрокаТаблицы.СчетУчетаБУЗабалансовый И Реквизиты.НеобходимостьОтраженияВНУ Тогда
			
			Проводка = Движения.Налоговый.Добавить();
			
			Проводка.Период      = Реквизиты.Период;
			Проводка.Организация = Реквизиты.Организация;
			
			Проводка.СчетДт      = СтрокаТаблицы.СчетУчетаНУ;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Номенклатура",	СтрокаТаблицы.Номенклатура);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Склады",		СтрокаТаблицы.Склад);
			
			Если Реквизиты.ВидОперации = Перечисления.ВидыОперацийПоступлениеДопРасходов.УслугаСтороннейОрганизации 
				ИЛИ Реквизиты.ВидОперации = Перечисления.ВидыОперацийПоступлениеДопРасходов.ПоступлениеОтНерезидента Тогда 
				Проводка.СчетКт = ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьСчетРасчетовСКонтрагентомНУ(Реквизиты.СчетУчетаРасчетовСКонтрагентом);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Контрагенты",        Реквизиты.Контрагент);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Договоры",           Реквизиты.ДоговорКонтрагента);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ДокументыРасчетовСКонтрагентами", Реквизиты.Регистратор);
			ИначеЕсли Реквизиты.ВидОперации = Перечисления.ВидыОперацийПоступлениеДопРасходов.ВнутреннийРасход Тогда 
				Проводка.СчетКт = Реквизиты.СчетЗатратНУ;
				
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, Реквизиты.СубконтоЗатратНУ1);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, Реквизиты.СубконтоЗатратНУ2);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, Реквизиты.СубконтоЗатратНУ3);
			КонецЕсли;
			
			ПроцедурыНалоговогоУчета.ВидУчетаНУ(Проводка, Реквизиты.ВидУчетаНУ);
			
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				Проводка, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);
			
			Проводка.Сумма        = СтрокаТаблицы.Сумма;
			Проводка.Содержание   = СтрокаТаблицы.Содержание;
		КонецЕсли;	
	КонецЦикла;
	
	Движения.Типовой.Записывать = Истина;
	Если Реквизиты.НеобходимостьОтраженияВНУ Тогда 
		Движения.Налоговый.Записывать = Истина;
	КонецЕсли;
	
КонецПроцедуры

// АВАНСОВЫЙ ОТЧЕТ

Процедура СформироватьДвиженияАвансовыйОтчетТовары(ТаблицаТовары, ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Параметры = ПодготовитьПараметрыАвансовыйОтчетТовары(ТаблицаТовары, ТаблицаРеквизиты);
	
	Если Параметры.ТаблицаТовары.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = Параметры.Реквизиты[0];
	
	Для Каждого СтрокаТаблицы Из Параметры.ТаблицаТовары Цикл
		
		Проводка = Движения.Типовой.Добавить();
		
		Проводка.Период       = Реквизиты.Период;
		Проводка.Организация  = Реквизиты.Организация;
		Проводка.Содержание   = СтрокаТаблицы.Содержание;
		Проводка.Сумма        = СтрокаТаблицы.Сумма;
		
		Проводка.СчетДт       = СтрокаТаблицы.СчетУчетаБУ;
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура",    СтрокаТаблицы.Номенклатура);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Склады",          Реквизиты.Склад);
		
		ПроцедурыБухгалтерскогоУчета.УстановитьПодразделениеПроводки(
			Проводка, Реквизиты.СтруктурноеПодразделение, "Дт");
		
		Если СтрокаТаблицы.ВедетсяПартионныйУчет Тогда 
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Партии",      Реквизиты.Регистратор);
		КонецЕсли;
		
		Проводка.КоличествоДт = СтрокаТаблицы.Количество;
		
		Если СтрокаТаблицы.СчетУчетаБУЗабалансовый Тогда 
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтрокаТаблицы.Контрагент);			
		Иначе 
			Проводка.СчетКт = Реквизиты.СчетРасчетовСПодотчетнымЛицом;
			
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"РаботникиОрганизаций",            Реквизиты.ПодотчетноеЛицо, Истина);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ВидыЗадолженностиПодотчетныхЛиц", Перечисления.ВидыЗадолженностиПодотчетныхЛиц.ПриобретениеАктивов);
			
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделениеПроводки(
				Проводка, Реквизиты.СтруктурноеПодразделение, "Кт");
			
			Если ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт).Валютный Тогда
				Проводка.ВалютаКт        = Реквизиты.ВалютаВзаиморасчетов;
				Проводка.ВалютнаяСуммаКт = СтрокаТаблицы.СуммаВзаиморасчетов;
			КонецЕсли;
		КонецЕсли;
		
		// проводки по налоговому учету
		Если НЕ СтрокаТаблицы.СчетУчетаБУЗабалансовый И Реквизиты.НеобходимостьОтраженияВНУ Тогда
			
			Проводка = Движения.Налоговый.Добавить();
			
			Проводка.Период      = Реквизиты.Период;
			Проводка.Организация = Реквизиты.Организация;
			
			Проводка.СчетДт      = СтрокаТаблицы.СчетУчетаНУ;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура", СтрокаТаблицы.Номенклатура);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Склады",		  Реквизиты.Склад);
			
			Проводка.КоличествоДт = СтрокаТаблицы.Количество;
			
			Проводка.СчетКт = ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьСчетРасчетовСКонтрагентомНУ();
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты",  СтрокаТаблицы.Контрагент);
			
			ПроцедурыНалоговогоУчета.ВидУчетаНУ(Проводка, Реквизиты.ВидУчетаНУ);
			
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				Проводка, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);
			
			Проводка.Сумма        = СтрокаТаблицы.Сумма;
			Проводка.Содержание   = СтрокаТаблицы.Содержание;
			
			//сразу сделаем погашение начисленной задолженности
			Если Реквизиты.ВедениеУчетаВременныхРазницБалансовымМетодом Тогда			
				Проводка = Движения.Налоговый.Добавить();
				
				Проводка.Период      = Реквизиты.Период;
				Проводка.Организация = Реквизиты.Организация;
				Проводка.Сумма       = СтрокаТаблицы.Сумма;
			
				Проводка.СчетДт      = ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьСчетРасчетовСКонтрагентомНУ();
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтрокаТаблицы.Контрагент);
				
				Проводка.СчетКт      = ПроцедурыБухгалтерскогоУчета.ЗаполнитьСчетНалоговогоУчетаПоУмолчанию(Реквизиты.СчетРасчетовСПодотчетнымЛицом, Реквизиты.Период, ПланыСчетов.Налоговый.ЗадолженностьПодотчетныхЛиц);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "РаботникиОрганизаций",            Реквизиты.ПодотчетноеЛицо);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ВидыЗадолженностиПодотчетныхЛиц", Перечисления.ВидыЗадолженностиПодотчетныхЛиц.ПриобретениеАктивов);
				
				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
					Проводка, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);
				
				ПроцедурыНалоговогоУчета.ВидУчетаНУ(Проводка, Реквизиты.ВидУчетаНУ);		
				
				Проводка.Содержание  = НСтр("ru = 'Погашение задолженности перед поставщиком'", ОбщегоНазначения.КодОсновногоЯзыка());
			КонецЕсли;
		КонецЕсли;	
	КонецЦикла;
	
	Движения.Типовой.Записывать = Истина;
	Если Реквизиты.НеобходимостьОтраженияВНУ Тогда 
		Движения.Налоговый.Записывать = Истина;
	КонецЕсли;
	
КонецПроцедуры

// ГТД ПО ИМПОРТУ

Процедура СформироватьДвиженияГТДИмпорт(ТаблицаТовары, ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Параметры = ПодготовитьПараметрыГТДИмпорт(ТаблицаТовары, ТаблицаРеквизиты);
	
	Если Параметры.ТаблицаТовары.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = Параметры.Реквизиты[0];
	
	Для Каждого СтрокаТаблицы Из Параметры.ТаблицаТовары Цикл
		
		Если СтрокаТаблицы.Сумма = 0 И СтрокаТаблицы.СуммаВзаиморасчетов = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Проводка = Движения.Типовой.Добавить();
		
		Проводка.Период       = Реквизиты.Период;
		Проводка.Организация  = Реквизиты.Организация;
		Проводка.Содержание   = СтрокаТаблицы.Содержание;
		Проводка.Сумма        = СтрокаТаблицы.Сумма;
		
		Проводка.СчетДт       = СтрокаТаблицы.СчетУчетаБУ;
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура", СтрокаТаблицы.Номенклатура);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Склады",       СтрокаТаблицы.Склад);
		
		ПроцедурыБухгалтерскогоУчета.УстановитьПодразделениеПроводки(
			Проводка, Реквизиты.СтруктурноеПодразделение, "Дт");
		
		Если СтрокаТаблицы.ВедетсяПартионныйУчет Тогда 
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Партии",   СтрокаТаблицы.ДокументПартии);
		КонецЕсли;
		
		Если СтрокаТаблицы.СчетУчетаБУЗабалансовый Тогда 
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Контрагенты",Реквизиты.Контрагент);			
		Иначе 
			Если Реквизиты.ВалютаДокумента <> СтрокаТаблицы.ВалютаВзаиморасчетов И Реквизиты.ВариантОтражения = 0 Тогда 
				Проводка.СчетКт = Реквизиты.СчетУчетаРасчетовСКонтрагентомВал;
			Иначе 
				Проводка.СчетКт = Реквизиты.СчетУчетаРасчетовСКонтрагентом;
			КонецЕсли;
			
			Если Реквизиты.ВариантОтражения = 0 Тогда
				Если Реквизиты.ВалютаДокумента <> СтрокаТаблицы.ВалютаВзаиморасчетов Тогда 
					Проводка.СчетКт = Реквизиты.СчетУчетаРасчетовСКонтрагентомВал;
				Иначе 
					Проводка.СчетКт = Реквизиты.СчетУчетаРасчетовСКонтрагентом;
				КонецЕсли;

				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,"Контрагенты",        Реквизиты.Контрагент);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,"Договоры",           СтрокаТаблицы.ДоговорКонтрагента);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,"ДокументыРасчетовСКонтрагентами", Реквизиты.Регистратор);
			Иначе
				Если СтрокаТаблицы.Содержание = НСтр("ru = 'НДС по импорту'", ОбщегоНазначения.КодОсновногоЯзыка()) Тогда
					Проводка.СчетКт = Реквизиты.СчетУчетаНДСПоРеализации;
				Иначе
					Проводка.СчетКт = Реквизиты.СчетУчетаРасчетовСКонтрагентом;
				КонецЕсли;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,"НалогиСборыОтчисления",        СтрокаТаблицы.ВидНалога);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,"ВидыПлатежейВБюджетИФонды",           ПредопределенноеЗначение("Перечисление.ВидыПлатежейВБюджетИФонды.Налог"));
			КонецЕсли;
			
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделениеПроводки(
				Проводка, Реквизиты.СтруктурноеПодразделение, "Кт");
			
			Если ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт).Валютный Тогда
				Проводка.ВалютаКт = СтрокаТаблицы.ВалютаВзаиморасчетов;
				Проводка.ВалютнаяСуммаКт = СтрокаТаблицы.СуммаВзаиморасчетов;
			КонецЕсли;
		КонецЕсли;
		
		// проводки по налоговому учету
		Если НЕ СтрокаТаблицы.СчетУчетаБУЗабалансовый И Реквизиты.НеобходимостьОтраженияВНУ Тогда
			
			ПроводкаНУ = Движения.Налоговый.Добавить();
			
			ПроводкаНУ.Период      = Реквизиты.Период;
			ПроводкаНУ.Организация = Реквизиты.Организация;
			
			ПроводкаНУ.СчетДт      = СтрокаТаблицы.СчетУчетаНУ;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт,"Номенклатура", СтрокаТаблицы.Номенклатура);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт,"Склады",		 СтрокаТаблицы.Склад);
			
			ПроводкаНУ.СчетКт = ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьСчетРасчетовСКонтрагентомНУ(Проводка.СчетКт);

			Если Реквизиты.ВариантОтражения = 0 Тогда
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт,"Контрагенты",        Реквизиты.Контрагент);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт,"Договоры",           СтрокаТаблицы.ДоговорКонтрагента);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт,"ДокументыРасчетовСКонтрагентами", Реквизиты.Регистратор);
			Иначе
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт,"НалогиСборыОтчисления",        СтрокаТаблицы.ВидНалога);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт,"ВидыПлатежейВБюджетИФонды",    ПредопределенноеЗначение("Перечисление.ВидыПлатежейВБюджетИФонды.Налог"));
				
			КонецЕсли;
		
			ПроцедурыНалоговогоУчета.ВидУчетаНУ(ПроводкаНУ, Реквизиты.ВидУчетаНУ);
			
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				ПроводкаНУ, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);
			
			ПроводкаНУ.Сумма        = СтрокаТаблицы.Сумма;
			ПроводкаНУ.Содержание   = СтрокаТаблицы.Содержание;
		КонецЕсли;	
	КонецЦикла;
	
	Движения.Типовой.Записывать = Истина;
	Если Реквизиты.НеобходимостьОтраженияВНУ Тогда 
		Движения.Налоговый.Записывать = Истина;
	КонецЕсли;
	
КонецПроцедуры

// ПОДГОТОВКА СПИСАНИЯ ТОВАРОВ

Функция ПодготовитьТаблицуСписанныеТовары(ТаблицаТовары, ТаблицаРеквизиты, Отказ, ВыводитьСообщения = Истина, КонтролироватьОстаток = Истина) Экспорт
	
	МатериалыДляОценкиСтоимости = Новый Структура("СписанныеТовары", ТаблицаТовары);
	
	МатериалыСОценкойСтоимости = ПодготовитьТаблицыСписанныеТовары(
		МатериалыДляОценкиСтоимости,
		ТаблицаРеквизиты,
		Отказ,
		ВыводитьСообщения,
		КонтролироватьОстаток);
		
	Возврат МатериалыСОценкойСтоимости.СписанныеТовары;

КонецФункции

// Подготавливает таблицы расхода товаров, в которых нужна расчетная оценка стоимости списания.
//
// Параметры:
//  ТаблицыТовары - Структура - Содержит таблицы значений с списком товаров, оценку которых нужно получить
//  ТаблицаРеквизиты - ТаблицаЗначений - Таблица с реквизитами документа, влияющими на списание товаров
//  Отказ - Булево - Признак ошибки, выявленной в ходе подготовки таблицы
// 
Функция ПодготовитьТаблицыСписанныеТовары(ТаблицыТовары, ТаблицаРеквизиты, Отказ, ВыводитьСообщения = Истина, КонтролироватьОстаток = Истина) Экспорт
	
	Реквизиты = ПодготовитьРеквизитыСписанныеТовары(ТаблицаРеквизиты);
	
	СписанныеТовары = Новый Структура;
	
	Если Реквизиты.Количество() = 0 Тогда
		Для Каждого КлючИЗначение Из ТаблицыТовары Цикл	
			СписанныеТовары.Вставить(КлючИЗначение.Ключ, ПолучитьПустуюТаблицуСписанныеТовары());
		КонецЦикла;
		Возврат СписанныеТовары;
	КонецЕсли;
	
	Реквизиты = Реквизиты[0];
	ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль  = ПроцедурыНалоговогоУчета.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль(Реквизиты.Организация, Реквизиты.Период);
	Реквизиты.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль = ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль; 	
	
	НадоРассчитать  = Новый Структура;
	
	// Подготовим данные для расчета стоимости списания
	Для Каждого КлючИЗначение Из ТаблицыТовары Цикл
		
		ИмяТаблицы    = КлючИЗначение.Ключ;
		ДанныеТаблицы = КлючИЗначение.Значение;
		
		СписанныеТовары.Вставить(ИмяТаблицы, ПолучитьПустуюТаблицуСписанныеТовары());
		Если ДанныеТаблицы = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Параметры = ПодготовитьПараметрыТаблицыСписанныеТовары(ДанныеТаблицы, ТаблицаРеквизиты);
		
		ТаблицаТовары		  = Параметры.ТаблицаТовары;
		ТаблицаНадоРассчитать = ТаблицаТовары.СкопироватьКолонки();
		
		// Отделим запасы, которые будут списаны по указанной в документе стоимости,
		// от запасов, стоимость которых будет расчитана на основании остатков.
		// Строки, стоимость которых считать не надо, сразу запишем в СписанныеТовары.
		Для Каждого СтрокаТаблицыТовары Из ТаблицаТовары Цикл
			
			Если СтрокаТаблицыТовары.Себестоимость > 0 Тогда 				
				
				// Стоимость указана в документе 				
				НоваяСтрока = СписанныеТовары[ИмяТаблицы].Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицыТовары);
				
							
				НоваяСтрока.СтруктурноеПодразделение    = Реквизиты.СтруктурноеПодразделение;
				НоваяСтрока.КорСтруктурноеПодразделение = Реквизиты.КорСтруктурноеПодразделение;
				НоваяСтрока.Партия            			= СтрокаТаблицыТовары.ДокументОприходования;
				НоваяСтрока.СуммаСписания      			= СтрокаТаблицыТовары.Себестоимость;
				НоваяСтрока.СуммаСписанияНУ    			= СтрокаТаблицыТовары.Себестоимость;
				
				НоваяСтрока.ВалютаВзаиморасчетов        = Реквизиты.ВалютаВзаиморасчетов;
				Если Реквизиты.ВалютаВзаиморасчетов = ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета() Тогда 
					НоваяСтрока.СуммаСписанияВал        = СтрокаТаблицыТовары.Себестоимость;
				Иначе 
					НоваяСтрока.СуммаСписанияВал        = ?(СтрокаТаблицыТовары.Сумма = 0, СтрокаТаблицыТовары.Себестоимость, СтрокаТаблицыТовары.Себестоимость * СтрокаТаблицыТовары.СуммаВал / СтрокаТаблицыТовары.Сумма);
				КонецЕсли;
			Иначе 				
				// Надо рассчитать   				
				НоваяСтрока = ТаблицаНадоРассчитать.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицыТовары);
				
			КонецЕсли;

		КонецЦикла; // По строкам ТаблицаТовары
		
		Если ТаблицаНадоРассчитать.Количество() > 0 Тогда
			НадоРассчитать.Вставить(ИмяТаблицы, ТаблицаНадоРассчитать);
		КонецЕсли;

	КонецЦикла; // По элементам ТаблицыТовары
		
	Если НадоРассчитать.Количество() = 0 Тогда
		Возврат СписанныеТовары;
	КонецЕсли;

	// Нужно рассчитать стоимость списания - определить ее на основании остатков.

	// Подготовим таблицу, по которой отберем остатки
	ОтборОстатков = Новый ТаблицаЗначений();
	ОтборОстатков.Колонки.Добавить("СчетУчетаБУ",  Новый ОписаниеТипов("ПланСчетовСсылка.Типовой"));
	ОтборОстатков.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ОтборОстатков.Колонки.Добавить("Склад",        Новый ОписаниеТипов("СправочникСсылка.Склады"));
	ОтборОстатков.Колонки.Добавить("Контрагент",   Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	
	Для Каждого КлючИЗначение Из НадоРассчитать Цикл
		Для Каждого СтрокаТаблицы Из КлючИЗначение.Значение Цикл
			НоваяСтрока = ОтборОстатков.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			НоваяСтрока.Контрагент = Реквизиты.Контрагент;
		КонецЦикла;
	КонецЦикла;
	
	// Получим остатки
	МоментВремени = Новый МоментВремени(Реквизиты.Период, Реквизиты.Регистратор);
	ТаблицаОстатки = ПолучитьОстаткиТоваров(
		МоментВремени,
		Реквизиты.Организация,
		Реквизиты.СтруктурноеПодразделение,
		ОтборОстатков);
		
	ТаблицаОстатки.Индексы.Добавить("Номенклатура, СчетУчетаБУ");
	ТаблицаОстатки.Индексы.Добавить("НомерСтроки");
	
	
	// если в документе учитывается КПН, тогда получим остатки по НУ 
	Если Реквизиты.НеобходимостьОтраженияВНУ И Реквизиты.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль Тогда
		// Подготовим таблицу, по которой отберем остатки
		ОтборОстатковНУ = Новый ТаблицаЗначений();
		ОтборОстатковНУ.Колонки.Добавить("СчетУчетаНУ",  Новый ОписаниеТипов("ПланСчетовСсылка.Налоговый"));
		ОтборОстатковНУ.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		ОтборОстатковНУ.Колонки.Добавить("Склад",        Новый ОписаниеТипов("СправочникСсылка.Склады"));
		ОтборОстатковНУ.Колонки.Добавить("Контрагент",   Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));

		Для Каждого КлючИЗначение Из НадоРассчитать Цикл
			Для Каждого СтрокаТаблицы Из КлючИЗначение.Значение Цикл
				НоваяСтрока = ОтборОстатковНУ.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
				НоваяСтрока.Контрагент = Реквизиты.Контрагент;
			КонецЦикла;
		КонецЦикла;
		
		// Получим остатки
		МоментВремени = Новый МоментВремени(Реквизиты.Период, Реквизиты.Регистратор);
		ТаблицаОстаткиНУ = ПолучитьОстаткиТоваровНУ(
							МоментВремени,
							Реквизиты.Организация,
							Реквизиты.СтруктурноеПодразделение,
		 					Реквизиты.ВидУчетаНУ,
							ОтборОстатковНУ);
		
		ТаблицаОстаткиНУ.Индексы.Добавить("Номенклатура, СчетУчетаНУ");
		ТаблицаОстаткиНУ.Индексы.Добавить("НомерСтроки");
		
	КонецЕсли;

	// Спишем остатки из таблицы
	
	КонтролироватьОстаток = КонтролироватьОстаток И НЕ ПроцедурыБухгалтерскогоУчета.ОтключитьКонтрольОтрицательныхОстатков();
	
	Для Каждого КлючИЗначение Из НадоРассчитать Цикл
		
		ИмяТаблицы             = КлючИЗначение.Ключ;
		ТаблицаНадоРассчитать  = КлючИЗначение.Значение;
		ТаблицаСписанныеТовары = СписанныеТовары[ИмяТаблицы];

		СписатьОстаткиТоваров(
			ТаблицаНадоРассчитать,
			ТаблицаОстатки,
			ТаблицаСписанныеТовары,
			Реквизиты,
			Отказ,
			ВыводитьСообщения,КонтролироватьОстаток);
			
			Если Реквизиты.НеобходимостьОтраженияВНУ Тогда
				СписатьОстаткиТоваровНУ(
					ТаблицаНадоРассчитать,
					ТаблицаОстаткиНУ,
					ТаблицаСписанныеТовары,
					Реквизиты,
					Отказ,
					ВыводитьСообщения,КонтролироватьОстаток);
			КонецЕсли;
			
	КонецЦикла;
	
	Возврат СписанныеТовары;

КонецФункции

// СПИСАНИЕ ТОВАРОВ

Процедура СформироватьДвиженияСписаниеТоваров(ТаблицаСписанныеТовары, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыСписаниеТоваров(ТаблицаСписанныеТовары, ТаблицаРеквизиты);
	
	Если Параметры.Реквизиты.Количество() = 0
		ИЛИ Параметры.ТаблицаСписанныеТовары.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты   = Параметры.Реквизиты[0];
	ОтражатьВНУ = Ложь;
	
	Для Каждого СтрокаПартии Из Параметры.ТаблицаСписанныеТовары Цикл
		
		Если СтрокаПартии.ОтражатьВБухгалтерскомУчете Тогда 
			
			Проводка = Движения.Типовой.Добавить();
			Проводка.Период      = СтрокаПартии.Период;
			Проводка.Организация = Реквизиты.Организация;
			
			СпособОценкиТМЗКт = УправлениеЗапасамиПовтИсп.ПолучитьСтратегиюСписанияСчета(СтрокаПартии.СчетУчетаБУ);
			ВедетсяУчетПоПартиямКт = СпособОценкиТМЗКт <> Перечисления.СпособыОценки.ПоСредней;
			
			Проводка.Содержание  = ?(ЗначениеЗаполнено(СтрокаПартии.Содержание), СокрЛП(СтрокаПартии.Содержание), СокрЛП(Реквизиты.Содержание));
			
			Проводка.СчетКт = СтрокаПартии.СчетУчетаБУ;
			СвойстваСчетаКт = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Номенклатура", СтрокаПартии.Номенклатура);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Склады", СтрокаПартии.Склад);
			
			Если ВедетсяУчетПоПартиямКт  Тогда
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Партии", СтрокаПартии.Партия);
			КонецЕсли;
			
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", Реквизиты.Контрагент);
			
			Если СвойстваСчетаКт.Количественный Тогда
				Проводка.КоличествоКт = СтрокаПартии.Количество;
			КонецЕсли;
			
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделениеПроводки(Проводка, СтрокаПартии.СтруктурноеПодразделение, "Кт");
			
			СвойстваСчетаДт = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаПартии.КорСчетСписанияБУ);
			
			Если СвойстваСчетаКт.Забалансовый = СвойстваСчетаДт.Забалансовый Тогда
				
				Проводка.СчетДт	= СтрокаПартии.КорСчетСписанияБУ;
				
				СпособОценкиТМЗДт = УправлениеЗапасамиПовтИсп.ПолучитьСтратегиюСписанияСчета(СтрокаПартии.КорСчетСписанияБУ);
				ВедетсяУчетПоПартиямДт = СпособОценкиТМЗДт <> Перечисления.СпособыОценки.ПоСредней;
								
				// Цикл субконто по строке партий
				Для НомерСубконто = 1 По 3 Цикл
					ВидСубконто = СтрокаПартии["ВидКорСубконтоБУ" + НомерСубконто];
					
					КорСубконто = СтрокаПартии["КорСубконтоБУ" + НомерСубконто];
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
					?(ВидСубконто = Неопределено, НомерСубконто, ВидСубконто) , КорСубконто);
				КонецЦикла;
				
				// Если корсубконто для списания явно не указано, подставляем совпадающие по типу значения
				// из других полей таблицы.
				
				// Цикл по видам субконто на счете Дт.
				Для НомерСубконто = 1 По 3 Цикл
					
					ВидСубконто = СвойстваСчетаДт["ВидСубконто" + НомерСубконто];
					
					Если ЗначениеЗаполнено(ВидСубконто) Тогда
						
						КорСубконто = Проводка.СубконтоДт[ВидСубконто];
						Если ЗначениеЗаполнено(КорСубконто) Тогда
							Продолжить;
						КонецЕсли;
						
						ТипЗначенияВидаСубконто = СвойстваСчетаДт["ВидСубконто" + НомерСубконто + "ТипЗначения"];
						
						Если ТипЗначенияВидаСубконто.СодержитТип(Тип("СправочникСсылка.Номенклатура")) Тогда
							КорСубконто = СтрокаПартии.Номенклатура;
							
						ИначеЕсли ТипЗначенияВидаСубконто.СодержитТип(Тип("СправочникСсылка.Организации")) Тогда
							КорСубконто = Реквизиты.Организация;
							
						ИначеЕсли ТипЗначенияВидаСубконто.СодержитТип(Тип("СправочникСсылка.Склады")) Тогда
							Если ЗначениеЗаполнено(СтрокаПартии.Склад) Тогда
								КорСубконто = СтрокаПартии.Склад;
							КонецЕсли;
							
						ИначеЕсли ТипЗначенияВидаСубконто.СодержитТип(Тип("СправочникСсылка.Контрагенты")) Тогда
							Если ЗначениеЗаполнено(Реквизиты.Контрагент) Тогда
								КорСубконто = Реквизиты.Контрагент;
							КонецЕсли;
							
						ИначеЕсли ТипЗначенияВидаСубконто.СодержитТип(Тип("СправочникСсылка.ПодразделенияОрганизаций")) Тогда
							Если ЗначениеЗаполнено(СтрокаПартии.ПодразделениеОрганизации) Тогда
								КорСубконто = СтрокаПартии.ПодразделениеОрганизации;
							КонецЕсли;
							
						ИначеЕсли ТипЗначенияВидаСубконто.СодержитТип(Тип("СправочникСсылка.ФизическиеЛица")) Тогда
							Если ЗначениеЗаполнено(СтрокаПартии.МОЛ) Тогда
								КорСубконто = СтрокаПартии.МОЛ;
							КонецЕсли; 
						КонецЕсли;   						
						
						ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, ВидСубконто, КорСубконто);						
					КонецЕсли;          					
				КонецЦикла;
				
				Если ВедетсяУчетПоПартиямДт  Тогда
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Партии", СтрокаПартии.Партия);
				КонецЕсли;

				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделениеПроводки(Проводка, СтрокаПартии.КорСтруктурноеПодразделение, "Дт");
				
				Если СвойстваСчетаДт.Количественный Тогда
					Проводка.КоличествоДт = СтрокаПартии.Количество;
				КонецЕсли;
				
				Если СвойстваСчетаДт.Валютный Тогда 
					Проводка.ВалютаДт        = СтрокаПартии.ВалютаВзаиморасчетов;
					Проводка.ВалютнаяСуммаДт = СтрокаПартии.СуммаСписанияВал;
				КонецЕсли;
				
			КонецЕсли;
			
			Проводка.Сумма = СтрокаПартии.СуммаСписания;
			
		КонецЕсли;
		
		Если СтрокаПартии.ОтражатьВНалоговомУчете Тогда
			//И НЕ СвойстваСчетаКт.Забалансовый - в НУ всегда счета забалансовые пока условие не совсем понятно 
			ОтражатьВНУ = Истина;
			
			//НУ
			Проводка = Движения.Налоговый.Добавить();
			Проводка.Период      = СтрокаПартии.Период;
			Проводка.Организация = Реквизиты.Организация;
			
			Проводка.Содержание  = ?(ЗначениеЗаполнено(СтрокаПартии.Содержание), СокрЛП(СтрокаПартии.Содержание), СокрЛП(Реквизиты.Содержание));
			
			Проводка.СчетКт = СтрокаПартии.СчетУчетаНУ;
			СвойстваСчетаКт = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Номенклатура", СтрокаПартии.Номенклатура);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Склады", СтрокаПартии.Склад);
			
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", Реквизиты.Контрагент);
			
			Если СвойстваСчетаКт.Количественный Тогда
				Проводка.КоличествоКт = СтрокаПартии.Количество;
			КонецЕсли;
			
			СвойстваСчетаДт = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаПартии.КорСчетСписанияНУ);
			
			Проводка.СчетДт	= СтрокаПартии.КорСчетСписанияНУ;
			
			// Если корсубконто для списания явно не указано, подставляем совпадающие по типу значения
			// из других полей таблицы.
			
			Для НомерСубконто = 1 По 3 Цикл
				ВидСубконто = СтрокаПартии["ВидКорСубконтоНУ" + НомерСубконто];
				КорСубконто = СтрокаПартии["КорСубконтоНУ" + НомерСубконто];
				
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
					?(ВидСубконто = Неопределено, НомерСубконто, ВидСубконто) , КорСубконто);
			КонецЦикла;
			
			// Цикл по видам субконто на счете Дт.
			Для НомерСубконто = 1 По 3 Цикл
				
				ВидСубконто = СвойстваСчетаДт["ВидСубконто" + НомерСубконто];
				
				Если ЗначениеЗаполнено(ВидСубконто) Тогда
					
					КорСубконто = Проводка.СубконтоДт[ВидСубконто];
					Если ЗначениеЗаполнено(КорСубконто) Тогда
						Продолжить;
					КонецЕсли;
					
					ТипЗначенияВидаСубконто = СвойстваСчетаДт["ВидСубконто" + НомерСубконто + "ТипЗначения"];
					
					Если ТипЗначенияВидаСубконто.СодержитТип(Тип("СправочникСсылка.Номенклатура")) Тогда
						КорСубконто = СтрокаПартии.Номенклатура;
							
					ИначеЕсли ТипЗначенияВидаСубконто.СодержитТип(Тип("СправочникСсылка.Организации")) Тогда
						КорСубконто = Реквизиты.Организация;
						
					ИначеЕсли ТипЗначенияВидаСубконто.СодержитТип(Тип("СправочникСсылка.Склады")) Тогда
						Если ЗначениеЗаполнено(СтрокаПартии.Склад) Тогда
							КорСубконто = СтрокаПартии.Склад;
						КонецЕсли;
						
					ИначеЕсли ТипЗначенияВидаСубконто.СодержитТип(Тип("СправочникСсылка.Контрагенты")) Тогда
						Если ЗначениеЗаполнено(Реквизиты.Контрагент) Тогда
							КорСубконто = Реквизиты.Контрагент;
						КонецЕсли;
					ИначеЕсли ТипЗначенияВидаСубконто.СодержитТип(Тип("СправочникСсылка.ПодразделенияОрганизаций")) Тогда
						Если ЗначениеЗаполнено(СтрокаПартии.ПодразделениеОрганизации) Тогда
							КорСубконто = СтрокаПартии.ПодразделениеОрганизации;
						КонецЕсли;
						
					ИначеЕсли ТипЗначенияВидаСубконто.СодержитТип(Тип("СправочникСсылка.ФизическиеЛица")) Тогда
						Если ЗначениеЗаполнено(СтрокаПартии.МОЛ) Тогда
							КорСубконто = СтрокаПартии.МОЛ;
						КонецЕсли; 						
					КонецЕсли;
					
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, ВидСубконто, КорСубконто);
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если ЗначениеЗаполнено(Проводка.СчетДт) Тогда 
				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделениеПроводки(Проводка, СтрокаПартии.КорСтруктурноеПодразделение, "Дт");
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Проводка.СчетКт) Тогда 
				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделениеПроводки(Проводка, СтрокаПартии.СтруктурноеПодразделение, "Кт");
			КонецЕсли;
			
			Если СвойстваСчетаДт.Количественный Тогда
				Проводка.КоличествоДт = СтрокаПартии.Количество;
			КонецЕсли;
			
			Проводка.Сумма = СтрокаПартии.СуммаСписанияНУ;
			
			ПроцедурыНалоговогоУчета.ВидУчетаНУ(Проводка, Реквизиты.ВидУчетаНУ);
			
			// отражение специфических затрат
			ПроцедурыНалоговогоУчета.ОтразитьРасходыНаРемонтПроизводственныхОС(Движения.Налоговый,
										Новый Структура("СчетБУ, СубконтоБУ1, СубконтоБУ2,СубконтоБУ3",
										СтрокаПартии.КорСчетСписанияБУ, СтрокаПартии.КорСубконтоБУ1, СтрокаПартии.КорСубконтоБУ2, СтрокаПартии.КорСубконтоБУ3),
										Новый Структура("СчетНУ, СубконтоНУ1, СубконтоНУ2,СубконтоНУ3",
										СтрокаПартии.КорСчетСписанияНУ, СтрокаПартии.КорСубконтоНУ1, СтрокаПартии.КорСубконтоНУ2, СтрокаПартии.КорСубконтоНУ3),
										Реквизиты, СтрокаПартии.СтруктурноеПодразделение, СтрокаПартии.КорСтруктурноеПодразделение, СтрокаПартии.СуммаСписанияНУ, СтрокаПартии.Количество, Отказ);
		
	
			// ВР
			Если  СтрокаПартии.СуммаСписанияВР <> 0 Тогда
				Проводка = Движения.Налоговый.Добавить();
				Проводка.Период      = СтрокаПартии.Период;
				Проводка.Организация = Реквизиты.Организация;
				
				Проводка.Содержание  = ?(ЗначениеЗаполнено(СтрокаПартии.Содержание), СокрЛП(СтрокаПартии.Содержание), СокрЛП(Реквизиты.Содержание));
				
				Проводка.СчетКт = СтрокаПартии.СчетУчетаНУ;
				СвойстваСчетаКт = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Номенклатура", СтрокаПартии.Номенклатура);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Склады", СтрокаПартии.Склад);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", Реквизиты.Контрагент);
				
				СвойстваСчетаДт = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаПартии.КорСчетСписанияНУ);
				Проводка.СчетДт	= СтрокаПартии.КорСчетСписанияНУ;
				
				Для НомерСубконто = 1 По 3 Цикл
					ВидСубконто = СтрокаПартии["ВидКорСубконтоНУ" + НомерСубконто];
					КорСубконто = СтрокаПартии["КорСубконтоНУ" + НомерСубконто];
					
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
						?(ВидСубконто = Неопределено, НомерСубконто, ВидСубконто) , КорСубконто);
				КонецЦикла;
				
				// Цикл по видам субконто на счете Дт.
				Для НомерСубконто = 1 По 3 Цикл
					
					ВидСубконто = СвойстваСчетаДт["ВидСубконто" + НомерСубконто];
					
					Если ЗначениеЗаполнено(ВидСубконто) Тогда
						
						КорСубконто = Проводка.СубконтоДт[ВидСубконто];
						Если ЗначениеЗаполнено(КорСубконто) Тогда
							Продолжить;
						КонецЕсли;
						
						ТипЗначенияВидаСубконто = СвойстваСчетаДт["ВидСубконто" + НомерСубконто + "ТипЗначения"];
						
						Если ТипЗначенияВидаСубконто.СодержитТип(Тип("СправочникСсылка.Номенклатура")) Тогда
							КорСубконто = СтрокаПартии.Номенклатура;
							
						ИначеЕсли ТипЗначенияВидаСубконто.СодержитТип(Тип("СправочникСсылка.Организации")) Тогда
							КорСубконто = Реквизиты.Организация;
							
						ИначеЕсли ТипЗначенияВидаСубконто.СодержитТип(Тип("СправочникСсылка.Склады")) Тогда
							Если ЗначениеЗаполнено(СтрокаПартии.Склад) Тогда
								КорСубконто = СтрокаПартии.Склад;
							КонецЕсли;
							
						ИначеЕсли ТипЗначенияВидаСубконто.СодержитТип(Тип("СправочникСсылка.Контрагенты")) Тогда
							Если ЗначениеЗаполнено(Реквизиты.Контрагент) Тогда
								КорСубконто = Реквизиты.Контрагент;
							КонецЕсли;
							
						КонецЕсли;
						
						ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, ВидСубконто, КорСубконто);
						
					КонецЕсли;
					
				КонецЦикла;
				
				Если ЗначениеЗаполнено(Проводка.СчетДт) Тогда 
					ПроцедурыБухгалтерскогоУчета.УстановитьПодразделениеПроводки(Проводка, СтрокаПартии.КорСтруктурноеПодразделение, "Дт");
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Проводка.СчетКт) Тогда 
					ПроцедурыБухгалтерскогоУчета.УстановитьПодразделениеПроводки(Проводка, СтрокаПартии.СтруктурноеПодразделение, "Кт");
				КонецЕсли;
			
				Проводка.Сумма = СтрокаПартии.СуммаСписанияВР;
				
				ПроцедурыНалоговогоУчета.ВидУчетаНУ(Проводка, Справочники.ВидыУчетаНУ.ВР);
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Движения.Типовой.Записывать = Истина;
	Если ОтражатьВНУ Тогда 
		Движения.Налоговый.Записывать = Истина;
	КонецЕсли;

КонецПроцедуры

// КОМПЛЕКТАЦИЯ

Функция ПодготовитьТаблицуКомплектующихКомплектация(ТаблицаСписанныеТовары, ТаблицаРеквизиты, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыТаблицыКомплектующихКомплектация(ТаблицаСписанныеТовары, ТаблицаРеквизиты);
	
	Реквизиты = Параметры.Реквизиты[0];
	
	ТаблицаКомплектующие = Параметры.ТаблицаСписанныеТовары.Скопировать();
	
	ТаблицаКомплектующие.Колонки.Добавить("КоличествоДт", ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 3));
	
	Если ТаблицаКомплектующие.Количество() = 0 Тогда
		Возврат ТаблицаКомплектующие;
	КонецЕсли;
	
	ВидыУчетаДокумента = Новый Структура;
	ВидыУчетаДокумента.Вставить("ОтражатьВБухгалтерскомУчете",Истина);
	ВидыУчетаДокумента.Вставить("ОтражатьВНалоговомУчете",Реквизиты.НеобходимостьОтраженияВНУ);
	
	Для Каждого ВидУчета Из ВидыУчетаДокумента Цикл
		
		КомплектующиеПоВидуУчета = ТаблицаКомплектующие.НайтиСтроки(Новый Структура(ВидУчета.Ключ, ВидУчета.Значение));
		КоличествоОсталосьПогасить = 0;
		
		Для Каждого СтрокаКомплектующей Из КомплектующиеПоВидуУчета  Цикл
			КоличествоОсталосьПогасить = КоличествоОсталосьПогасить + СтрокаКомплектующей.Количество;
		КонецЦикла;
		
		//// Распределим количество комплектов по таблице списания
		КоличествоОсталосьПогаситьДт = Реквизиты.КоличествоКомплектов;
		
		Для Каждого СтрокаКомплектующей Из КомплектующиеПоВидуУчета Цикл
			
			Если СтрокаКомплектующей.Количество = КоличествоОсталосьПогасить Тогда
				СтрокаКомплектующей.КоличествоДт = КоличествоОсталосьПогаситьДт;
			Иначе
				СтрокаКомплектующей.КоличествоДт = КоличествоОсталосьПогаситьДт * СтрокаКомплектующей.Количество
				/ КоличествоОсталосьПогасить;
			КонецЕсли;
			КоличествоОсталосьПогасить = КоличествоОсталосьПогасить - СтрокаКомплектующей.Количество;
			КоличествоОсталосьПогаситьДт = КоличествоОсталосьПогаситьДт - СтрокаКомплектующей.КоличествоДт;
			
		КонецЦикла;
	КонецЦикла;
	
	Возврат ТаблицаКомплектующие;

КонецФункции

Функция ПодготовитьТаблицуКомплектующихРазукомплектация(ТаблицаТовары, ТаблицаСписанныеТовары,ТаблицаРеквизиты,Отказ) Экспорт

	Параметры = ПодготовитьПараметрыТаблицыКомплектующихРазукомплектация(ТаблицаТовары, ТаблицаСписанныеТовары, ТаблицаРеквизиты);
	
	ТаблицаКомплектующие = Параметры.ТаблицаСписанныеТовары.Скопировать();
	ТаблицаКомплектующие.Колонки.Добавить("КоличествоДт", ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 3));
	
	Реквизиты = Параметры.Реквизиты[0];

	Если ТаблицаКомплектующие.Количество() = 0 Тогда
		Возврат ТаблицаКомплектующие;
	КонецЕсли;
	
	ВидыУчетаДокумента = Новый Структура;
	ВидыУчетаДокумента.Вставить("ОтражатьВБухгалтерскомУчете",Истина);
	ВидыУчетаДокумента.Вставить("ОтражатьВНалоговомУчете",Реквизиты.НеобходимостьОтраженияВНУ);
	
	Для Каждого ВидУчета Из ВидыУчетаДокумента Цикл
		
		КомплектующиеПоВидуУчета = ТаблицаКомплектующие.НайтиСтроки(Новый Структура(ВидУчета.Ключ, ВидУчета.Значение));
		
		// Распределим количества комплектующих по таблице спсисания
		ТекущийНомерСтроки = -1;
		КоличествоОсталосьПогасить = 0;
		КоличествоОсталосьПогаситьДт = 0;
		Для Каждого СтрокаКомплектующей Из КомплектующиеПоВидуУчета Цикл
			Если СтрокаКомплектующей.НомерСтроки <> ТекущийНомерСтроки Тогда
				ТекущийНомерСтроки = СтрокаКомплектующей.НомерСтроки;
				СтрокаТаблицыТовары = ТаблицаТовары[ТекущийНомерСтроки - 1];
				КоличествоОсталосьПогасить = СтрокаТаблицыТовары.Количество;
				КоличествоОсталосьПогаситьДт = СтрокаТаблицыТовары.КоличествоКомплектующих;
			КонецЕсли;
			
			Если СтрокаКомплектующей.Количество = КоличествоОсталосьПогасить Тогда
				СтрокаКомплектующей.КоличествоДт = КоличествоОсталосьПогаситьДт;
			Иначе
				СтрокаКомплектующей.КоличествоДт = КоличествоОсталосьПогаситьДт * СтрокаКомплектующей.Количество
				/ КоличествоОсталосьПогасить;
			КонецЕсли;
			
			КоличествоОсталосьПогасить = КоличествоОсталосьПогасить - СтрокаКомплектующей.Количество;
			КоличествоОсталосьПогаситьДт = КоличествоОсталосьПогаситьДт - СтрокаКомплектующей.КоличествоДт;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ТаблицаКомплектующие;

КонецФункции

Процедура СформироватьДвиженияКомплектация(ТаблицаКомплектующие, ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Параметры = ПодготовитьПараметрыКомплектация(ТаблицаКомплектующие, ТаблицаРеквизиты);
	
	Если Параметры.ТаблицаКомплектующие.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = Параметры.Реквизиты[0];
	                 	
	Для каждого СтрокаПартии Из Параметры.ТаблицаКомплектующие Цикл
		ВидыУчета = Новый Структура;
		ВидыУчета.Вставить("ОтражатьВБухгалтерскомУчете",СтрокаПартии.ОтражатьВБухгалтерскомУчете);
		ВидыУчета.Вставить("ОтражатьВНалоговомУчете",    СтрокаПартии.ОтражатьВНалоговомУчете);
		
		Для Каждого ВидУчета Из ВидыУчета Цикл
			Если ВидУчета.Ключ = "ОтражатьВБухгалтерскомУчете" Тогда
				ПрефиксСчета = "БУ";
				ИмяРегистра = "Типовой";
				ВидУчетаОбрабатываемый = "ОтражатьВБухгалтерскомУчете";
			Иначе
				ПрефиксСчета = "НУ";
				ИмяРегистра = "Налоговый";
				ВидУчетаОбрабатываемый = "ОтражатьВНалоговомУчете";
			КонецЕсли;
			
			Если ВидУчетаОбрабатываемый = "ОтражатьВБухгалтерскомУчете"  Тогда			
				СпособОценкиТМЗ = УправлениеЗапасамиПовтИсп.ПолучитьСтратегиюСписанияСчета(СтрокаПартии.СчетУчетаБУ);		
				ВедетсяУчетПоПартиям = СпособОценкиТМЗ <> Перечисления.СпособыОценки.ПоСредней;
			Иначе
				ВедетсяУчетПоПартиям = Ложь;
			КонецЕсли;
			                  
			Если НЕ  СтрокаПартии[ВидУчетаОбрабатываемый] Тогда
				Продолжить;
			КонецЕсли;
								
			Проводка = Движения[ИмяРегистра].Добавить();
			Проводка.Период      = Реквизиты.Период;
			Проводка.Организация = Реквизиты.Организация;
			Проводка.Содержание  = СокрЛП(Реквизиты.Содержание);
			
			Проводка.СчетКт = СтрокаПартии["СчетУчета" + ПрефиксСчета];
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Номенклатура", СтрокаПартии.Номенклатура);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Склады", СтрокаПартии.Склад);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", Реквизиты.Контрагент);
			
			Если ВедетсяУчетПоПартиям  Тогда
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Партии", СтрокаПартии.Партия);
			КонецЕсли;       
			
			СвойстваСчетаКт = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);		
			Если СвойстваСчетаКт.Количественный Тогда
				Проводка.КоличествоКт = СтрокаПартии.Количество;
			КонецЕсли;     
			
			Если СвойстваСчетаКт.Свойство("Валютный") И СвойстваСчетаКт.Валютный Тогда
				Проводка.ВалютаКт = СтрокаПартии.ВалютаВзаиморасчетов;
				Проводка.ВалютнаяСуммаКт = СтрокаПартии.СуммаСписанияВал;
			КонецЕсли;
			
			СвойстваСчетаДт = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаПартии["КорСчетСписания" + ПрефиксСчета]);
			
			Если ВидУчетаОбрабатываемый = "ОтражатьВБухгалтерскомУчете"  Тогда
				СпособОценкиТМЗ_Дт = УправлениеЗапасамиПовтИсп.ПолучитьСтратегиюСписанияСчета(СтрокаПартии.КорСчетСписанияБУ);
				ВедетсяУчетПоПартиям_Дт = СпособОценкиТМЗ_Дт <> Перечисления.СпособыОценки.ПоСредней;
			Иначе
				ВедетсяУчетПоПартиям_Дт = Ложь;
			КонецЕсли;
									
			Проводка.СчетДт = СтрокаПартии["КорСчетСписания" + ПрефиксСчета];
			Для НомерСубконто = 1 По 3 Цикл
				ВидСубконто = СтрокаПартии["ВидКорСубконто" + ПрефиксСчета + НомерСубконто];
				Если ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоТиповые.Партии И Не ВедетсяУчетПоПартиям_Дт Тогда
					Продолжить;
				КонецЕсли;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
						ВидСубконто, СтрокаПартии["КорСубконто" + ПрефиксСчета + НомерСубконто]);
			КонецЦикла;
			
			Если СвойстваСчетаДт.Количественный Тогда
				Проводка.КоличествоДт = СтрокаПартии.КоличествоДт;
			КонецЕсли;
			
			Если СвойстваСчетаДт.Свойство("Валютный") И СвойстваСчетаДт.Валютный Тогда
				Проводка.ВалютаДт = СтрокаПартии.ВалютаВзаиморасчетов;
				Проводка.ВалютнаяСуммаДт = СтрокаПартии.СуммаСписанияВал;
			КонецЕсли;
			
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(Проводка, СтрокаПартии.КорСтруктурноеПодразделение, СтрокаПартии.СтруктурноеПодразделение);
			                            			
			Если ВидУчетаОбрабатываемый = "ОтражатьВНалоговомУчете" Тогда	
				
				Проводка.Сумма = СтрокаПартии.СуммаСписанияНУ;
				
				ПроцедурыНалоговогоУчета.ВидУчетаНУ(Проводка, Реквизиты.ВидУчетаНУ);
			Иначе
				
				Проводка.Сумма = СтрокаПартии.СуммаСписания;				
			КонецЕсли;
			
			//ВР			
			Если ВидУчетаОбрабатываемый = "ОтражатьВНалоговомУчете" И СтрокаПартии.СуммаСписанияВР <> 0 Тогда 
				Проводка = Движения.Налоговый.Добавить();
				Проводка.Период      = Реквизиты.Период;
				Проводка.Организация = Реквизиты.Организация;
				Проводка.Содержание  = СокрЛП(Реквизиты.Содержание);
				
				Проводка.СчетКт = СтрокаПартии["СчетУчетаНУ"];
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Номенклатура", СтрокаПартии.Номенклатура);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Склады", СтрокаПартии.Склад);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", Реквизиты.Контрагент);			                     				
								
				СвойстваСчетаКт = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);		
				СвойстваСчетаДт = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаПартии["КорСчетСписанияНУ"]);
				
				Проводка.СчетДт = СтрокаПартии["КорСчетСписанияНУ"];
				Для НомерСубконто = 1 По 3 Цикл
					ВидСубконто = СтрокаПартии["ВидКорСубконтоНУ" + НомерСубконто];
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
							ВидСубконто, СтрокаПартии["КорСубконтоНУ" + НомерСубконто]);
				КонецЦикла;    				
				
				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(Проводка, СтрокаПартии.КорСтруктурноеПодразделение, СтрокаПартии.СтруктурноеПодразделение);				  				
				Проводка.Сумма = СтрокаПартии.СуммаСписанияВР;       
				
				ПроцедурыНалоговогоУчета.ВидУчетаНУ(Проводка, Справочники.ВидыУчетаНУ.ВР);				
			КонецЕсли;	
			
		КонецЦикла;
		
	КонецЦикла;
	
	Движения.Типовой.Записывать = Истина;
	Если Реквизиты.НеобходимостьОтраженияВНУ Тогда
		Движения.Налоговый.Записывать = Истина;
	КонецЕсли;
	
КонецПроцедуры

// ВОЗВРАТ ТОВАРОВ ОТ ПОКУПАТЕЛЯ

Функция ПодготовитьТаблицуВозвращенныеСписанныеТовары(ТаблицаТовары, ТаблицаСчетаУчетаТоваров, ТаблицаСписокНоменклатуры, ТаблицаРеквизиты, Отказ, ВыводитьСообщения = Истина, ЭтоСторно = Ложь, КонтролироватьОстаток = Истина) Экспорт

	Параметры = ПодготовитьПараметрыТаблицыВозвращенныеСписанныеТовары(ТаблицаТовары, ТаблицаСчетаУчетаТоваров, ТаблицаСписокНоменклатуры, ТаблицаРеквизиты);
	Если Параметры.Реквизиты.Количество() = 0
		ИЛИ Параметры.ТаблицаТовары.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Реквизиты = Параметры.Реквизиты[0];
	
	ТаблицаРезультата = ПолучитьПустуюТаблицуСписанныеТовары();
	
	Если НЕ Реквизиты.УказанДокументОтгрузки Тогда
		ОбщегоНазначенияБКВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаТовары, ТаблицаРезультата);
		ТаблицаРезультата.ЗаполнитьЗначения(Истина,                              "ОтражатьВБухгалтерскомУчете");
		ТаблицаРезультата.ЗаполнитьЗначения(Реквизиты.НеобходимостьОтраженияВНУ, "ОтражатьВНалоговомУчете");
		Возврат ТаблицаРезультата;
	КонецЕсли;
	
	КонтролироватьОстаток = КонтролироватьОстаток И НЕ ПроцедурыБухгалтерскогоУчета.ОтключитьКонтрольОтрицательныхОстатков();

	СтруктураСчетовДляЗапроса = РазделитьСчетаУчетаПоПартионномуУчету(Параметры.СчетаУчетаТоваровБУ);
	
	ТекстЗапросаПартионные = "";
	ТекстЗапросаНеПартионные = "";
	ТекстЗапросаНалоговые = "";
	Если СтруктураСчетовДляЗапроса.СчетаПартионные.Количество() > 0 Тогда
		ТекстЗапросаПартионные =
		"ВЫБРАТЬ
		|	""БУ"" КАК Учет,
		|	ОборотыДтКт.СубконтоКт1 КАК Номенклатура,
		|	ОборотыДтКт.СубконтоКт2 КАК Партия,
		|	ОборотыДтКт.СчетКт КАК СчетУчета,
		|	СУММА(ОборотыДтКт.СуммаОборот) КАК Сумма,
		|	СУММА(0) КАК СуммаНУ,
		|	СУММА(ОборотыДтКт.КоличествоОборотКт) КАК Количество,
		|	ЕстьNULL(СпособыОценкиЗапасовБУ.СпособОценки, ЗНАЧЕНИЕ(Перечисление.СпособыОценки.ФИФО)) КАК СпособОценкиЗапасовБУ,
		|	ОборотыДтКт.СубконтоКт2.Дата КАК ПолеСортировки
		|
		|ПОМЕСТИТЬ ВТ_СписанныеТовары
		|ИЗ
		|	РегистрБухгалтерии.Типовой.ОборотыДтКт(
		|		,
		|		&КонДата,
		|		Регистратор,
		|		,
		|		,
		|		СчетКт В (&СчетКтПартионный),
		|		&ВидыСубконтоПартий,
		|		СубконтоКт1 В (&Товары)
		|	) КАК ОборотыДтКт
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СпособОценкиЗапасовБУ КАК СпособыОценкиЗапасовБУ
		| 		ПО ОборотыДтКт.СчетКт = СпособыОценкиЗапасовБУ.СчетЗапасов
		|
		|ГДЕ
		|	(ОборотыДтКт.Регистратор = &Регистратор
		|				И ОборотыДтКт.КоличествоОборотКт >= 0
		|			ИЛИ ОборотыДтКт.Регистратор ССЫЛКА Документ.ВозвратТоваровОтПокупателя
		|				И ОборотыДтКт.Регистратор <> &ЭтотВозврат
		|				И ОборотыДтКт.КоличествоОборотКт <= 0
		|				И ВЫРАЗИТЬ(ОборотыДтКт.Регистратор КАК Документ.ВозвратТоваровОтПокупателя).ДокументОснование = &Регистратор)
		|
		|СГРУППИРОВАТЬ ПО
		|	ОборотыДтКт.СчетКт,
		|	ОборотыДтКт.СубконтоКт1,
		|	ОборотыДтКт.СубконтоКт2,
		|	ЕстьNULL(СпособыОценкиЗапасовБУ.СпособОценки, ЗНАЧЕНИЕ(Перечисление.СпособыОценки.ФИФО))
		|";

	КонецЕсли;

	Если СтруктураСчетовДляЗапроса.СчетаНеПартионные.Количество() > 0 Тогда
		ТекстЗапросаНеПартионные =
		"ВЫБРАТЬ
		|	""БУ"" КАК Учет,
		|	ОборотыДтКт.СубконтоКт1 КАК Номенклатура,
		|	NULL КАК Партия,
		|	ОборотыДтКт.СчетКт КАК СчетУчета,
		|	СУММА(ОборотыДтКт.СуммаОборот) КАК Сумма,
		|	СУММА(0) КАК СуммаНУ,
		|	СУММА(ОборотыДтКт.КоличествоОборотКт) КАК Количество,
		|	ЗНАЧЕНИЕ(Перечисление.СпособыОценки.ПоСредней) КАК СпособОценкиЗапасовБУ,
		|	СУММА(ОборотыДтКт.КоличествоОборотКт) КАК ПолеСортировки
		|
		|ПОМЕСТИТЬ ВТ_СписанныеТовары
		|ИЗ
		|	РегистрБухгалтерии.Типовой.ОборотыДтКт(
		|		,
		|		&КонДата,
		|		Регистратор,
		|		,
		|		,
		|		СчетКт В (&СчетКтНеПартионный),
		|		ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоТиповые.Номенклатура),
		|		СубконтоКт1 В (&Товары)
		|	) КАК ОборотыДтКт
		|ГДЕ
		|	(ОборотыДтКт.Регистратор = &Регистратор
		|				И ОборотыДтКт.КоличествоОборотКт >= 0
		|			ИЛИ (ОборотыДтКт.Регистратор ССЫЛКА Документ.ВозвратТоваровОтПокупателя И ОборотыДтКт.Регистратор <> &ЭтотВозврат)
		|				И ОборотыДтКт.КоличествоОборотКт <= 0
		|				И ВЫРАЗИТЬ(ОборотыДтКт.Регистратор КАК Документ.ВозвратТоваровОтПокупателя).ДокументОснование = &Регистратор)
		|
		|СГРУППИРОВАТЬ ПО
		|	ОборотыДтКт.СчетКт,
		|	ОборотыДтКт.СубконтоКт1
		|";
		
	КонецЕсли;
	
	Если Реквизиты.НеобходимостьОтраженияВНУ И Параметры.СчетаУчетаТоваровНУ.Количество() > 0 Тогда
		ТекстЗапросаНалоговые =
		"ВЫБРАТЬ
		|	""НУ"" КАК Учет,
		|	ОборотыДтКт.СубконтоКт1 КАК Номенклатура,
		|	NULL КАК Партия,
		|	ОборотыДтКт.СчетКт КАК СчетУчета,
		|	СУММА(0) КАК Сумма,
		|	СУММА(ОборотыДтКт.СуммаОборот) КАК СуммаНУ,
		|	СУММА(ОборотыДтКт.КоличествоОборотКт) КАК Количество,
		|	ЗНАЧЕНИЕ(Перечисление.СпособыОценки.ПоСредней) КАК СпособОценкиЗапасовБУ,
		|	СУММА(ОборотыДтКт.КоличествоОборотКт) КАК ПолеСортировки
		|ИЗ
		|	РегистрБухгалтерии.Налоговый.ОборотыДтКт(
		|			,
		|			&КонДата,
		|			Регистратор,
		|			,
		|			,
		|			СчетКт В (&СчетКтНУ),
		|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоТиповые.Номенклатура),
		|			СубконтоКт1 В (&Товары)
		|				И ВидУчетаКт = &ВидУчета) КАК ОборотыДтКт
		|ГДЕ
		|	(ОборотыДтКт.Регистратор = &Регистратор
		|				И ОборотыДтКт.КоличествоОборотКт >= 0
		|			ИЛИ ОборотыДтКт.Регистратор ССЫЛКА Документ.ВозвратТоваровОтПокупателя
		|				И ОборотыДтКт.Регистратор <> &ЭтотВозврат
		|				И ОборотыДтКт.КоличествоОборотКт <= 0
		|				И ВЫРАЗИТЬ(ОборотыДтКт.Регистратор КАК Документ.ВозвратТоваровОтПокупателя).ДокументОснование = &Регистратор)
		|
		|СГРУППИРОВАТЬ ПО
		|	ОборотыДтКт.СчетКт,
		|	ОборотыДтКт.СубконтоКт1";
	КонецЕсли;
	
	Если ПустаяСтрока(ТекстЗапросаПартионные)
		 И ПустаяСтрока(ТекстЗапросаНеПартионные) Тогда
		
		ОбщегоНазначенияБКВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаТовары, ТаблицаРезультата);
		Возврат ТаблицаРезультата;
	
	ИначеЕсли НЕ ПустаяСтрока(ТекстЗапросаПартионные)
			  И ПустаяСтрока(ТекстЗапросаНеПартионные) Тогда
		
		ТекстЗапроса = ТекстЗапросаПартионные;
		
	ИначеЕсли ПустаяСтрока(ТекстЗапросаПартионные)
			  И НЕ ПустаяСтрока(ТекстЗапросаНеПартионные) Тогда
		ТекстЗапроса = ТекстЗапросаНеПартионные;
		
	Иначе
		
		ТекстЗапроса = ТекстЗапросаПартионные + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|" + СтрЗаменить(ТекстЗапросаНеПартионные, "ПОМЕСТИТЬ ВТ_СписанныеТовары", "");
		
	КонецЕсли;

	Если НЕ ПустаяСтрока(ТекстЗапросаНалоговые) Тогда 
		ТекстЗапроса = ТекстЗапроса + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|" + ТекстЗапросаНалоговые;
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса +
		"
		|;
		|
		|ВЫБРАТЬ
		|	ВТ_СписанныеТовары.Учет,
		|	ВТ_СписанныеТовары.Номенклатура,
		|	ВТ_СписанныеТовары.Партия,
		|	ВТ_СписанныеТовары.СчетУчета,
		|	ВТ_СписанныеТовары.СпособОценкиЗапасовБУ,
		|	ВТ_СписанныеТовары.ПолеСортировки,
		|	СУММА(ВТ_СписанныеТовары.Сумма) КАК Сумма,
		|	СУММА(ВТ_СписанныеТовары.СуммаНУ) КАК СуммаНУ,
		|	СУММА(ВТ_СписанныеТовары.Количество) КАК Количество
		|ИЗ
		|	ВТ_СписанныеТовары КАК ВТ_СписанныеТовары
		|
		|СГРУППИРОВАТЬ ПО
		|	Учет,
		|	Номенклатура,
		|	СчетУчета,
		|	Партия,
		|	СпособОценкиЗапасовБУ,
		|	ПолеСортировки
		|		
		|УПОРЯДОЧИТЬ ПО
		|	Учет,
		|	Номенклатура,
		|	Количество УБЫВ
		|";

	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Регистратор",        Реквизиты.ДокументОтгрузки);
	Запрос.УстановитьПараметр("СчетКтПартионный",   СтруктураСчетовДляЗапроса.СчетаПартионные);
	Запрос.УстановитьПараметр("СчетКтНеПартионный", СтруктураСчетовДляЗапроса.СчетаНеПартионные);
	Запрос.УстановитьПараметр("СчетКтНУ", 			Параметры.СчетаУчетаТоваровНУ.ВыгрузитьКолонку("СчетУчетаНУ"));
	Запрос.УстановитьПараметр("КонДата",            Реквизиты.Период);
	Запрос.УстановитьПараметр("Товары",             Параметры.СписокНоменклатуры.ВыгрузитьКолонку("Номенклатура"));
	Запрос.УстановитьПараметр("ВидУчета",           Реквизиты.ВидУчетаНУ);

	МассивВидовСубконто = Новый Массив;
	МассивВидовСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Номенклатура);
	МассивВидовСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Партии);
	Запрос.УстановитьПараметр("ВидыСубконтоПартий", МассивВидовСубконто);
	Запрос.УстановитьПараметр("ЭтотВозврат", Реквизиты.Регистратор);

	ТаблицаОтгрузок = Запрос.Выполнить().Выгрузить();
	
	// Если не ведется учет ВР балансовым методом, то предварительно обработаем таблицу отгрузок
	Если НЕ Реквизиты.ВедениеУчетаВременныхРазницБалансовымМетодом Тогда 
		
		ОтгруженныеПартииБУ = ТаблицаОтгрузок.Скопировать(Новый Структура("Учет", "БУ"));
		ОтгруженныеПартииБУ.Свернуть("Номенклатура, СчетУчета", "Сумма");
		
		Для Каждого СтрокаВозврата Из Параметры.ТаблицаТовары Цикл
			ОтгруженныеПартииНУ = ТаблицаОтгрузок.НайтиСтроки(Новый Структура("Номенклатура, СчетУчета", СтрокаВозврата.Номенклатура, СтрокаВозврата.СчетУчетаНУ));
			СтрокиОтгрузкиБУ = ОтгруженныеПартииБУ.НайтиСтроки(Новый Структура("Номенклатура, СчетУчета", СтрокаВозврата.Номенклатура, СтрокаВозврата.СчетУчетаБУ));
			СуммаСписанияБУ = 0;
			
			Для Каждого СтрокаОтгрузкиБУ Из СтрокиОтгрузкиБУ Цикл
				СуммаСписанияБУ = СуммаСписанияБУ + СтрокаОтгрузкиБУ.Сумма;
			КонецЦикла;
			
			Для Каждого СтрокаОтгрузкиНУ Из ОтгруженныеПартииНУ Цикл
				СтрокаОтгрузкиНУ.СуммаНУ = СуммаСписанияБУ;
				//СтрокаОтгрузкиНУ.СуммаВР = 0;
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
	СтруктураВидыУчета = Новый Структура("БУ, НУ", НСтр("ru = 'Бух.учет. '"), НСтр("ru = 'Нал.учет. '"));
	Для Каждого СтрокаВозврата Из Параметры.ТаблицаТовары Цикл

		Для Каждого Учет Из СтруктураВидыУчета Цикл
			
			Если Учет.Ключ = "НУ" И НЕ Реквизиты.НеобходимостьОтраженияВНУ Тогда 
				Продолжить;
			КонецЕсли;
			
			КоличествоНеПодобраноПартии = СтрокаВозврата.Количество;
			
			ОтгруженныеПартии   = ТаблицаОтгрузок.Скопировать(Новый Структура("Учет, Номенклатура, СчетУчета", Учет.Ключ, СтрокаВозврата.Номенклатура, СтрокаВозврата["СчетУчета" + Учет.Ключ]));
			Если Учет.Ключ = "НУ" Тогда
				ТаблицаРезультатБУ =  ТаблицаРезультата.Скопировать(Новый Структура("Номенклатура, СчетУчетаБУ, НомерСтроки", СтрокаВозврата.Номенклатура, СтрокаВозврата["СчетУчетаБУ"], СтрокаВозврата.НомерСтроки));
			КонецЕсли;
			
			Если ОтгруженныеПартии.Количество() > 0 Тогда 
				СтрокаОтгрузки = ОтгруженныеПартии[0];
				СтрокаНаправлениеСортировки = " УБЫВ";
				Если СтрокаОтгрузки.СпособОценкиЗапасовБУ = Перечисления.СпособыОценки.ФИФО Тогда 
					СтрокаНаправлениеСортировки = " ВОЗР";
				КонецЕсли;
				ОтгруженныеПартии.Сортировать("ПолеСортировки" + СтрокаНаправлениеСортировки);
			КонецЕсли;
			
			Для каждого СтрокаОтгрузки Из ОтгруженныеПартии Цикл

				Если СтрокаОтгрузки.Количество = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				НоваяСтрока = ТаблицаРезультата.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаВозврата);
				НоваяСтрока.Партия = СтрокаОтгрузки.Партия;
				
				Если Учет.Ключ = "БУ" Тогда 
					НоваяСтрока.ОтражатьВБухгалтерскомУчете = Истина;
					 
				Иначе 
					НоваяСтрока.ОтражатьВНалоговомУчете = Истина;
				КонецЕсли;
				
				Если КоличествоНеПодобраноПартии > СтрокаОтгрузки.Количество Тогда
					
					НоваяСтрока.Количество         = СтрокаОтгрузки.Количество;
					НоваяСтрока.СуммаСписания      = СтрокаОтгрузки.Сумма;
					
					Если Учет.Ключ = "НУ" Тогда
						НоваяСтрока.СуммаСписанияНУ    = ТаблицаРезультатБУ.Итог("СуммаСписания");
					КонецЕсли;
					
					КоличествоНеПодобраноПартии    = КоличествоНеПодобраноПартии - СтрокаОтгрузки.Количество;
				Иначе
					НоваяСтрока.Количество         = КоличествоНеПодобраноПартии;
					Коэфф                          = КоличествоНеПодобраноПартии / СтрокаОтгрузки.Количество;
					НоваяСтрока.СуммаСписания      = Окр(СтрокаОтгрузки.Сумма   * Коэфф, 2); 					
					Если Учет.Ключ = "НУ" Тогда
						НоваяСтрока.СуммаСписанияНУ    = ТаблицаРезультатБУ.Итог("СуммаСписания");
					КонецЕсли; 					
					КоличествоНеПодобраноПартии    = 0;
				КонецЕсли;
				
				НоваяСтрока.ВалютаВзаиморасчетов = Реквизиты.ВалютаВзаиморасчетов;
				
				Если Реквизиты.ВалютаВзаиморасчетов = ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета() Тогда 
					НоваяСтрока.СуммаСписанияВал = НоваяСтрока.СуммаСписания;
				Иначе 
					НоваяСтрока.СуммаСписанияВал = ?(СтрокаВозврата.Сумма = 0, НоваяСтрока.СуммаСписания, НоваяСтрока.СуммаСписания * СтрокаВозврата.СуммаВал / СтрокаВозврата.Сумма);
				КонецЕсли;
				
				СтрокаОтгрузки.Количество 	= СтрокаОтгрузки.Количество - НоваяСтрока.Количество;
				СтрокаОтгрузки.Сумма 		= СтрокаОтгрузки.Сумма - НоваяСтрока.СуммаСписания;
				СтрокаОтгрузки.СуммаНУ 		= СтрокаОтгрузки.СуммаНУ - НоваяСтрока.СуммаСписанияНУ;
							
				//уменьшим данные в самой таблице отгрузок
				СтрокаПартии = ТаблицаОтгрузок.НайтиСтроки(Новый Структура("Учет, Номенклатура, СчетУчета, Партия", Учет.Ключ, СтрокаВозврата.Номенклатура, СтрокаВозврата["СчетУчета" + Учет.Ключ], СтрокаОтгрузки.Партия));
				
				Если СтрокаПартии.Количество() <> 0 Тогда
					
					СтрокаПартии[0].Количество 	= СтрокаОтгрузки.Количество;
					СтрокаПартии[0].Сумма 		= СтрокаОтгрузки.Сумма ;
					СтрокаПартии[0].СуммаНУ 	= СтрокаОтгрузки.СуммаНУ ;
									
				КонецЕсли;
				
				Если КоличествоНеПодобраноПартии = 0 Тогда
					Прервать;
				КонецЕсли;

			КонецЦикла;

			Если КоличествоНеПодобраноПартии > 0 И ВыводитьСообщения
				И (Учет.Ключ = "БУ" ИЛИ Учет.Ключ = "НУ" И Реквизиты.ВедениеУчетаВременныхРазницБалансовымМетодом) Тогда
				
				Если Учет.Ключ = "НУ" Тогда
					ТекстСообщения = СтрШаблон(НСтр("ru = 'Нал.учет. Документом ""%1"" было реализовано ""%2"", вид учета - %3 на ""%4"" ед. меньше, чем возвращается.'"),
						СокрЛП(Реквизиты.ДокументОтгрузки),
						СтрокаВозврата.Номенклатура,
						Реквизиты.ВидУчетаНУ,
						КоличествоНеПодобраноПартии);
				Иначе
					ТекстСообщения = СтрШаблон(НСтр("ru = 'Бух.учет. Документом ""%1"" было реализовано ""%2"" на ""%3"" ед. меньше, чем возвращается.'"),
						СокрЛП(Реквизиты.ДокументОтгрузки),
						СтрокаВозврата.Номенклатура,
						КоличествоНеПодобраноПартии);
				КонецЕсли;
				
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Реквизиты.Регистратор, "Товары[" + Формат(СтрокаВозврата.НомерСтроки - 1, "ЧН=0; ЧГ=")+"].Количество", "Объект", Отказ);
				
				Если НЕ КонтролироватьОстаток Тогда
					ТекстСообщения = НСтр("ru = 'В конце месяце рекомендуется перепровести документы для получения корректного финансового результата!'");
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,Реквизиты.Регистратор);
					Отказ = Ложь;
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ТаблицаРезультата;
	
КонецФункции

Процедура ПроставитьСторноТаблицы(Таблица, СтруктураПолейДляСторно, Множитель) Экспорт
	
	Если Таблица = Неопределено
		ИЛИ Таблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Сторнируем 
	Для Каждого Строка Из Таблица Цикл
		Для каждого КолонкаСторно Из СтруктураПолейДляСторно Цикл
			Строка[КолонкаСторно.Ключ] = Множитель * Строка[КолонкаСторно.Ключ];
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура СформироватьДвиженияВозвратТоваровОтПокупателя(ТаблицаСписанныеТовары, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыСписаниеТоваров(ТаблицаСписанныеТовары, ТаблицаРеквизиты);
	
	Если Параметры.Реквизиты.Количество() = 0
		ИЛИ Параметры.ТаблицаСписанныеТовары.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты   = Параметры.Реквизиты[0];
	ОтражатьВНУ = Ложь;
	Для Каждого СтрокаПартии Из Параметры.ТаблицаСписанныеТовары Цикл
		
		Если СтрокаПартии.ОтражатьВБухгалтерскомУчете Тогда 
			
			Проводка = Движения.Типовой.Добавить();
			Проводка.Период      = СтрокаПартии.Период;
			Проводка.Организация = Реквизиты.Организация;
			
			СпособОценкиТМЗДт = УправлениеЗапасамиПовтИсп.ПолучитьСтратегиюСписанияСчета(СтрокаПартии.СчетУчетаБУ);
			ВедетсяУчетПоПартиямДт = СпособОценкиТМЗДт <> Перечисления.СпособыОценки.ПоСредней;
			
			Проводка.Содержание  = СокрЛП(Реквизиты.Содержание);
			
			Проводка.СчетДт = СтрокаПартии.СчетУчетаБУ;
			СвойстваСчетаДт = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
			
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура", СтрокаПартии.Номенклатура);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Склады", 	  СтрокаПартии.Склад);
			
			Если ВедетсяУчетПоПартиямДт Тогда
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Партии", СтрокаПартии.Партия);
			КонецЕсли;
			
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты",  Реквизиты.Контрагент);
			
			Если СвойстваСчетаДт.Количественный Тогда
				Проводка.КоличествоДт = СтрокаПартии.Количество;
			КонецЕсли;
			
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделениеПроводки(Проводка, СтрокаПартии.СтруктурноеПодразделение, "Дт"); 
			
			СвойстваСчетаКт = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаПартии.КорСчетСписанияБУ);
			Если СвойстваСчетаДт.Забалансовый = СвойстваСчетаКт.Забалансовый Тогда 
				Проводка.СчетКт	= СтрокаПартии.КорСчетСписанияБУ;
				
				СпособОценкиТМЗКт = УправлениеЗапасамиПовтИсп.ПолучитьСтратегиюСписанияСчета(СтрокаПартии.КорСчетСписанияБУ);
				ВедетсяУчетПоПартиямКт = СпособОценкиТМЗКт <> Перечисления.СпособыОценки.ПоСредней;
				
				// Цикл субконто по строке партий
				Для НомерСубконто = 1 По 3 Цикл
					ВидСубконто = СтрокаПартии["ВидКорСубконтоБУ" + НомерСубконто];
					
					КорСубконто = СтрокаПартии["КорСубконтоБУ" + НомерСубконто];
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,
						?(ВидСубконто = Неопределено, НомерСубконто, ВидСубконто) , КорСубконто);
				КонецЦикла;
				
				// Если корсубконто для списания явно не указано, подставляем совпадающие по типу значения
				// из других полей таблицы.
				
				// Цикл по видам субконто на счете Кт.
				Для НомерСубконто = 1 По 3 Цикл
					
					ВидСубконто = СвойстваСчетаКт["ВидСубконто" + НомерСубконто];
					
					Если ЗначениеЗаполнено(ВидСубконто) Тогда
						
						КорСубконто = Проводка.СубконтоКт[ВидСубконто];
						Если ЗначениеЗаполнено(КорСубконто) Тогда
							Продолжить;
						КонецЕсли;
						
						ТипЗначенияВидаСубконто = СвойстваСчетаКт["ВидСубконто" + НомерСубконто + "ТипЗначения"];
						
						Если ТипЗначенияВидаСубконто.СодержитТип(Тип("СправочникСсылка.Номенклатура")) Тогда
							КорСубконто = СтрокаПартии.Номенклатура;
							
						ИначеЕсли ТипЗначенияВидаСубконто.СодержитТип(Тип("СправочникСсылка.Организации")) Тогда
							КорСубконто = Реквизиты.Организация;
							
						ИначеЕсли ТипЗначенияВидаСубконто.СодержитТип(Тип("СправочникСсылка.Склады")) Тогда
							Если ЗначениеЗаполнено(СтрокаПартии.Склад) Тогда
								КорСубконто = СтрокаПартии.Склад;
							КонецЕсли;
							
						ИначеЕсли ТипЗначенияВидаСубконто.СодержитТип(Тип("СправочникСсылка.Контрагенты")) Тогда
							Если ЗначениеЗаполнено(Реквизиты.Контрагент) Тогда
								КорСубконто = Реквизиты.Контрагент;
							КонецЕсли;
							
						КонецЕсли;
						
						ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, ВидСубконто, КорСубконто);
						
					КонецЕсли;
					
				КонецЦикла;
				
				Если ВедетсяУчетПоПартиямКт Тогда
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Партии", СтрокаПартии.Партия);
				КонецЕсли;
				
				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделениеПроводки(Проводка, СтрокаПартии.КорСтруктурноеПодразделение, "Кт"); 
				
				Если СвойстваСчетаКт.Количественный Тогда
					Проводка.КоличествоКт = СтрокаПартии.Количество;
				КонецЕсли;
				
				Если СвойстваСчетаКт.Валютный Тогда 
					Проводка.ВалютаКт        = СтрокаПартии.ВалютаВзаиморасчетов;
					Проводка.ВалютнаяСуммаКт = СтрокаПартии.СуммаСписанияВал;
				КонецЕсли;

			КонецЕсли;
			
			Проводка.Сумма = СтрокаПартии.СуммаСписания;
			
		КонецЕсли;
		
		Если СтрокаПартии.ОтражатьВНалоговомУчете Тогда 
			ОтражатьВНУ = Истина;
			
			//НУ
			Проводка = Движения.Налоговый.Добавить();
			Проводка.Период      = СтрокаПартии.Период;
			Проводка.Организация = Реквизиты.Организация;
			
			Проводка.Содержание  = СокрЛП(Реквизиты.Содержание);
			
			Проводка.СчетДт = СтрокаПартии.СчетУчетаНУ;
			СвойстваСчетаДт = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
			
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура", СтрокаПартии.Номенклатура);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Склады", 	  СтрокаПартии.Склад);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты",  Реквизиты.Контрагент);
			
			Если СвойстваСчетаДт.Количественный Тогда
				Проводка.КоличествоДт = СтрокаПартии.Количество;
			КонецЕсли;
			
			СвойстваСчетаКт = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаПартии.КорСчетСписанияНУ);
			Проводка.СчетКт	= СтрокаПартии.КорСчетСписанияНУ;
			
			// Если корсубконто для списания явно не указано, подставляем совпадающие по типу значения
			// из других полей таблицы.
			
			Для НомерСубконто = 1 По 3 Цикл
				ВидСубконто = СтрокаПартии["ВидКорСубконтоНУ" + НомерСубконто];
				КорСубконто = СтрокаПартии["КорСубконтоНУ" + НомерСубконто];
				
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,
					?(ВидСубконто = Неопределено, НомерСубконто, ВидСубконто) , КорСубконто);
			КонецЦикла;
			
			// Цикл по видам субконто на счете Кт.
			Для НомерСубконто = 1 По 3 Цикл
				
				ВидСубконто = СвойстваСчетаКт["ВидСубконто" + НомерСубконто];
				
				Если ЗначениеЗаполнено(ВидСубконто) Тогда
					
					КорСубконто = Проводка.СубконтоКт[ВидСубконто];
					Если ЗначениеЗаполнено(КорСубконто) Тогда
						Продолжить;
					КонецЕсли;
					
					ТипЗначенияВидаСубконто = СвойстваСчетаКт["ВидСубконто" + НомерСубконто + "ТипЗначения"];
					
					Если ТипЗначенияВидаСубконто.СодержитТип(Тип("СправочникСсылка.Номенклатура")) Тогда
						КорСубконто = СтрокаПартии.Номенклатура;
						
					ИначеЕсли ТипЗначенияВидаСубконто.СодержитТип(Тип("СправочникСсылка.Организации")) Тогда
						КорСубконто = Реквизиты.Организация;
						
					ИначеЕсли ТипЗначенияВидаСубконто.СодержитТип(Тип("СправочникСсылка.Склады")) Тогда
						Если ЗначениеЗаполнено(СтрокаПартии.Склад) Тогда
							КорСубконто = СтрокаПартии.Склад;
						КонецЕсли;
						
					ИначеЕсли ТипЗначенияВидаСубконто.СодержитТип(Тип("СправочникСсылка.Контрагенты")) Тогда
						Если ЗначениеЗаполнено(Реквизиты.Контрагент) Тогда
							КорСубконто = Реквизиты.Контрагент;
						КонецЕсли;
						
					КонецЕсли;
					
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, ВидСубконто, КорСубконто);
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если ЗначениеЗаполнено(Проводка.СчетДт) Тогда 
				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделениеПроводки(Проводка, СтрокаПартии.СтруктурноеПодразделение, "Дт");
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Проводка.СчетКт) Тогда 
				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделениеПроводки(Проводка, СтрокаПартии.КорСтруктурноеПодразделение, "Кт");
			КонецЕсли;
			
			Если СвойстваСчетаКт.Количественный Тогда
				Проводка.КоличествоКт = СтрокаПартии.Количество;
			КонецЕсли;
			
			Проводка.Сумма = СтрокаПартии.СуммаСписанияНУ;
			
			ПроцедурыНалоговогоУчета.ВидУчетаНУ(Проводка, Реквизиты.ВидУчетаНУ, Ложь);
			
			// ВР
			Если  СтрокаПартии.СуммаСписанияВР <> 0 Тогда
				Проводка = Движения.Налоговый.Добавить();
				Проводка.Период      = СтрокаПартии.Период;
				Проводка.Организация = Реквизиты.Организация;
				
				Проводка.Содержание  = СокрЛП(Реквизиты.Содержание);
				
				Проводка.СчетДт = СтрокаПартии.СчетУчетаНУ;
				СвойстваСчетаДт = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура", СтрокаПартии.Номенклатура);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Склады", 	  СтрокаПартии.Склад);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты",  Реквизиты.Контрагент);
				
				
				СвойстваСчетаКт = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаПартии.КорСчетСписанияНУ);
				Проводка.СчетКт	= СтрокаПартии.КорСчетСписанияНУ;
				
				
				Для НомерСубконто = 1 По 3 Цикл
					ВидСубконто = СтрокаПартии["ВидКорСубконтоНУ" + НомерСубконто];
					КорСубконто = СтрокаПартии["КорСубконтоНУ" + НомерСубконто];
					
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,
						?(ВидСубконто = Неопределено, НомерСубконто, ВидСубконто) , КорСубконто);
				КонецЦикла;
				
				// Цикл по видам субконто на счете Кт.
				Для НомерСубконто = 1 По 3 Цикл
					
					ВидСубконто = СвойстваСчетаКт["ВидСубконто" + НомерСубконто];
					
					Если ЗначениеЗаполнено(ВидСубконто) Тогда
						
						КорСубконто = Проводка.СубконтоКт[ВидСубконто];
						Если ЗначениеЗаполнено(КорСубконто) Тогда
							Продолжить;
						КонецЕсли;
						
						ТипЗначенияВидаСубконто = СвойстваСчетаКт["ВидСубконто" + НомерСубконто + "ТипЗначения"];
						
						Если ТипЗначенияВидаСубконто.СодержитТип(Тип("СправочникСсылка.Номенклатура")) Тогда
							КорСубконто = СтрокаПартии.Номенклатура;
							
						ИначеЕсли ТипЗначенияВидаСубконто.СодержитТип(Тип("СправочникСсылка.Организации")) Тогда
							КорСубконто = Реквизиты.Организация;
							
						ИначеЕсли ТипЗначенияВидаСубконто.СодержитТип(Тип("СправочникСсылка.Склады")) Тогда
							Если ЗначениеЗаполнено(СтрокаПартии.Склад) Тогда
								КорСубконто = СтрокаПартии.Склад;
							КонецЕсли;
							
						ИначеЕсли ТипЗначенияВидаСубконто.СодержитТип(Тип("СправочникСсылка.Контрагенты")) Тогда
							Если ЗначениеЗаполнено(Реквизиты.Контрагент) Тогда
								КорСубконто = Реквизиты.Контрагент;
							КонецЕсли;
							
						КонецЕсли;
						
						ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, ВидСубконто, КорСубконто);
						
					КонецЕсли;
					
				КонецЦикла;
				
				Если ЗначениеЗаполнено(Проводка.СчетДт) Тогда 
					ПроцедурыБухгалтерскогоУчета.УстановитьПодразделениеПроводки(Проводка, СтрокаПартии.СтруктурноеПодразделение, "Дт");
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Проводка.СчетКт) Тогда 
					ПроцедурыБухгалтерскогоУчета.УстановитьПодразделениеПроводки(Проводка, СтрокаПартии.КорСтруктурноеПодразделение, "Кт");
				КонецЕсли;
			
				Проводка.Сумма = СтрокаПартии.СуммаСписанияВР;
				
				ПроцедурыНалоговогоУчета.ВидУчетаНУ(Проводка, Справочники.ВидыУчетаНУ.ВР, Ложь);
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Движения.Типовой.Записывать = Истина;
	Если ОтражатьВНУ Тогда 
		Движения.Налоговый.Записывать = Истина;
	КонецЕсли;

КонецПроцедуры

// РЕАЛИЗАЦИЯ И ВОЗВРАТ ТМЗ ПО РЕГИСТРУ "РЕАЛИЗАЦИЯ ТМЗ"

Функция ПодготовитьТаблицуРеализацияТМЗ(ТаблицаСписанныеТовары, ТаблицаДокумента, ТаблицаРеквизиты, Отказ) Экспорт
	
	Если ТаблицаДокумента <> Неопределено Тогда 
		Если  ТаблицаДокумента.Колонки.Найти("Партия") = Неопределено Тогда
			ТаблицаДокумента.Колонки.Добавить("Партия", Документы.ТипВсеСсылки());		
		КонецЕсли;   
		
		Если  ТаблицаДокумента.Колонки.Найти("Склад") = Неопределено Тогда
			ТаблицаДокумента.Колонки.Добавить("Склад",  Новый ОписаниеТипов("СправочникСсылка.Склады"));		
		КонецЕсли;  
	КонецЕсли;  
	
	Параметры = ПодготовитьПараметрыТаблицыРеализацияТМЗ(ТаблицаСписанныеТовары, ТаблицаДокумента, ТаблицаРеквизиты);
	Если Параметры.Реквизиты.Количество() = 0
		ИЛИ Параметры.ТаблицаДокумента.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Реквизиты = Параметры.Реквизиты[0];
	
	ТаблицаРеализация = ПолучитьПустуюТаблицуРеализацияТМЗ();
	
	Для Каждого СтрокаДокумента Из Параметры.ТаблицаДокумента Цикл
		
		// Услуги не содержатся в таблице списанных товаров
		Если СтрокаДокумента.ЭтоУслуга Тогда 
			
			СтрокаРеализации = ТаблицаРеализация.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаРеализации, Реквизиты);
			ЗаполнитьЗначенияСвойств(СтрокаРеализации, СтрокаДокумента);
			
			// Очистим Склад, т.к. услуги не привязаны к складам
			СтрокаРеализации.Склад = Неопределено;
			
			// Заполним ресурсы, имена колонок которых отличаются
			СтрокаРеализации.НДС   = СтрокаДокумента.СуммаНДС;
			СтрокаРеализации.Акциз = СтрокаДокумента.СуммаАкциза;
			
			// В таблице документа колонка сумма не содержит в себе сумму НДС и сумму Акциза, добавим их
			СтрокаРеализации.Сумма = СтрокаРеализации.Сумма + СтрокаРеализации.НДС + СтрокаРеализации.Акциз;
			
		Иначе 
			СтрокиСписания = Параметры.ТаблицаТовары.Скопировать(Новый Структура("НомерСтроки, ОтражатьВБухгалтерскомУчете", СтрокаДокумента.НомерСтроки, Истина));
			МассивКоэффициентов = СтрокиСписания.ВыгрузитьКолонку("Количество");
			
			СуммыВыручки = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(СтрокаДокумента.Сумма,       МассивКоэффициентов);
			СуммыНДС     = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(СтрокаДокумента.СуммаНДС,    МассивКоэффициентов);
			СуммыАкциза  = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(СтрокаДокумента.СуммаАкциза, МассивКоэффициентов);
			
			ИндексСуммы  = 0;
			Для Каждого СтрокаСписания Из СтрокиСписания Цикл
				СтрокаРеализации = ТаблицаРеализация.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаРеализации, Реквизиты);
				ЗаполнитьЗначенияСвойств(СтрокаРеализации, СтрокаСписания);
				
				// Заполним колонки, имена которых отличаются
				СтрокаРеализации.СчетУчета  = СтрокаСписания.СчетУчетаБУ;
				
				// Заполним ресурсы, имена колонок которых отличаются или рассчитываются вручную
				Если СуммыВыручки <> Неопределено Тогда 
					СтрокаРеализации.Сумма  = СуммыВыручки[ИндексСуммы];
				КонецЕсли;
				Если СуммыНДС <> Неопределено Тогда 
					СтрокаРеализации.НДС    = СуммыНДС[ИндексСуммы];
				КонецЕсли;
				Если СуммыАкциза <> Неопределено Тогда 
					СтрокаРеализации.Акциз  = СуммыАкциза[ИндексСуммы];
				КонецЕсли;
				
				СтрокаРеализации.Стоимость  = СтрокаСписания.СуммаСписания;
				
				// В таблице документа колонка сумма не содержит в себе сумму НДС и сумму Акциза, добавим их
				СтрокаРеализации.Сумма = СтрокаРеализации.Сумма + СтрокаРеализации.НДС + СтрокаРеализации.Акциз;
				
				ИндексСуммы = ИндексСуммы + 1;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаРеализация;
	
КонецФункции

Процедура СформироватьДвиженияРеализацияТМЗ(ТаблицаРеализация, Движения, Отказ) Экспорт 
	
	Если ТаблицаРеализация = Неопределено ИЛИ ТаблицаРеализация.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	Движения.РеализацияТМЗ.Загрузить(ТаблицаРеализация);
	Движения.РеализацияТМЗ.Записывать = Истина;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция ПолучитьПустуюТаблицуСписанныеТовары() Экспорт
	
	ТаблицаСписанныеТовары = Новый ТаблицаЗначений;
	ТаблицаСписанныеТовары.Колонки.Добавить("ИмяСписка",          ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповСтроки(0));
	ТаблицаСписанныеТовары.Колонки.Добавить("СинонимСписка",      ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповСтроки(0));
	ТаблицаСписанныеТовары.Колонки.Добавить("Период",             ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповДаты(ЧастиДаты.ДатаВремя));
	ТаблицаСписанныеТовары.Колонки.Добавить("НомерСтроки",        ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(5, 0));
	ТаблицаСписанныеТовары.Колонки.Добавить("СчетУчетаБУ",        Новый ОписаниеТипов("ПланСчетовСсылка.Типовой"));
	ТаблицаСписанныеТовары.Колонки.Добавить("Номенклатура",       Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаСписанныеТовары.Колонки.Добавить("Склад",              Новый ОписаниеТипов("СправочникСсылка.Склады"));
	ТаблицаСписанныеТовары.Колонки.Добавить("Партия",             Документы.ТипВсеСсылки());
	ТаблицаСписанныеТовары.Колонки.Добавить("Себестоимость",      ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаСписанныеТовары.Колонки.Добавить("Количество",         ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 3));
	ТаблицаСписанныеТовары.Колонки.Добавить("КорСчетСписанияБУ",  Новый ОписаниеТипов("ПланСчетовСсылка.Типовой"));
	ТаблицаСписанныеТовары.Колонки.Добавить("ВидКорСубконтоБУ1");
	ТаблицаСписанныеТовары.Колонки.Добавить("ВидКорСубконтоБУ2");
	ТаблицаСписанныеТовары.Колонки.Добавить("ВидКорСубконтоБУ3");
	ТаблицаСписанныеТовары.Колонки.Добавить("КорСубконтоБУ1");
	ТаблицаСписанныеТовары.Колонки.Добавить("КорСубконтоБУ2");
	ТаблицаСписанныеТовары.Колонки.Добавить("КорСубконтоБУ3");  	
	ТаблицаСписанныеТовары.Колонки.Добавить("МОЛ",					   Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ТаблицаСписанныеТовары.Колонки.Добавить("ПодразделениеОрганизации",Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	
	ТаблицаСписанныеТовары.Колонки.Добавить("КорСтруктурноеПодразделение",   Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	ТаблицаСписанныеТовары.Колонки.Добавить("СтруктурноеПодразделение",      Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	ТаблицаСписанныеТовары.Колонки.Добавить("ВалютаВзаиморасчетов",      	 Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	ТаблицаСписанныеТовары.Колонки.Добавить("СуммаСписания",      ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаСписанныеТовары.Колонки.Добавить("СуммаСписанияВал",   ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаСписанныеТовары.Колонки.Добавить("СчетУчетаНУ",        Новый ОписаниеТипов("ПланСчетовСсылка.Налоговый"));
	ТаблицаСписанныеТовары.Колонки.Добавить("КорСчетСписанияНУ",  Новый ОписаниеТипов("ПланСчетовСсылка.Налоговый"));
	ТаблицаСписанныеТовары.Колонки.Добавить("ВидКорСубконтоНУ1");
	ТаблицаСписанныеТовары.Колонки.Добавить("ВидКорСубконтоНУ2");
	ТаблицаСписанныеТовары.Колонки.Добавить("ВидКорСубконтоНУ3");
	ТаблицаСписанныеТовары.Колонки.Добавить("КорСубконтоНУ1");
	ТаблицаСписанныеТовары.Колонки.Добавить("КорСубконтоНУ2");
	ТаблицаСписанныеТовары.Колонки.Добавить("КорСубконтоНУ3");
	ТаблицаСписанныеТовары.Колонки.Добавить("СуммаСписанияНУ",    ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаСписанныеТовары.Колонки.Добавить("СуммаСписанияВР",    ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаСписанныеТовары.Колонки.Добавить("Содержание",		  ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповСтроки(0));
	
	ТаблицаСписанныеТовары.Колонки.Добавить("ОтражатьВБухгалтерскомУчете", Новый ОписаниеТипов("Булево"));
	ТаблицаСписанныеТовары.Колонки.Добавить("ОтражатьВНалоговомУчете",     Новый ОписаниеТипов("Булево") );
	
	Возврат ТаблицаСписанныеТовары;
	
КонецФункции

Процедура СортировкаСчетовУчета(СчетаУчета,
	СчетаУчетаН,
	СчетаУчетаНС,
	СчетаУчетаНП,
	СчетаУчетаНСП,
	СчетаУчетаКН,
	СчетаУчетаКНП,
	СчетаУчетаКНС,
	СчетаУчетаН_Склад,
	СчетаУчетаНП_Склад,
	СчетаУчетаНК_Склад) Экспорт

	Для каждого Счет Из СчетаУчета Цикл

		СвойстваСчета = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(Счет);

		Если ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ВедетсяСуммовойУчетПоСкладам(Счет)
			И ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.НаСчетеВедетсяПартионныйУчет(Счет) Тогда
			СчетаУчетаНСП.Добавить(Счет);
		ИначеЕсли ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.НаСчетеВедетсяПартионныйУчет(Счет)
			И ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.НаСчетеВедетсяУчетПоКонтрагентам(Счет) Тогда
			СчетаУчетаКНП.Добавить(Счет);

		ИначеЕсли ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ВедетсяСуммовойУчетПоСкладам(Счет)
			И ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.НаСчетеВедетсяУчетПоКонтрагентам(Счет) Тогда
			СчетаУчетаКНС.Добавить(Счет);

		ИначеЕсли ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.НаСчетеВедетсяПартионныйУчет(Счет) Тогда
			СчетаУчетаНП.Добавить(Счет);

			Если ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ВедетсяУчетПоСкладам(Счет) Тогда
				СчетаУчетаНП_Склад.Добавить(Счет);
			КонецЕсли;

		ИначеЕсли ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.НаСчетеВедетсяУчетПоКонтрагентам(Счет) Тогда
			СчетаУчетаКН.Добавить(Счет);

			Если ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ВедетсяУчетПоСкладам(Счет) Тогда
				СчетаУчетаНК_Склад.Добавить(Счет);
			КонецЕсли;

		ИначеЕсли ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ВедетсяСуммовойУчетПоСкладам(Счет) Тогда
			СчетаУчетаНС.Добавить(Счет);

		Иначе
			СчетаУчетаН.Добавить(Счет);

			Если ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ВедетсяУчетПоСкладам(Счет) Тогда
				СчетаУчетаН_Склад.Добавить(Счет);
			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

Процедура СортировкаСчетовУчетаНУ(СчетаУчета,
	СчетаУчетаН,
	СчетаУчетаНС,
	СчетаУчетаН_Склад,
	СчетаУчетаКН) Экспорт
	
	Для каждого Счет Из СчетаУчета Цикл

		СвойстваСчета = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(Счет);

		Если ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ВедетсяСуммовойУчетПоСкладам(Счет) Тогда
			СчетаУчетаНС.Добавить(Счет);
		ИначеЕсли ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.НаСчетеВедетсяУчетПоКонтрагентам(Счет) Тогда
			СчетаУчетаКН.Добавить(Счет);
		Иначе
			СчетаУчетаН.Добавить(Счет);

			Если ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ВедетсяУчетПоСкладам(Счет) Тогда
				СчетаУчетаН_Склад.Добавить(Счет);
			КонецЕсли;

		КонецЕсли;

	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьОстаткиТоваров(МоментВремени, Организация, СтруктурноеПодразделение, ТаблицаСписания) Экспорт
	
	МассивСчетовУчета = РазличныеЗначенияКолонкиТаблицы(ТаблицаСписания, "СчетУчетаБУ");
	
	// Получаем остатки номенклатуры
	
	МассивНоменклатуры = РазличныеЗначенияКолонкиТаблицы(ТаблицаСписания, "Номенклатура");
	МассивСкладов      = РазличныеЗначенияКолонкиТаблицы(ТаблицаСписания, "Склад");
	МассивКонтрагентов = РазличныеЗначенияКолонкиТаблицы(ТаблицаСписания, "Контрагент");

	// Сортировка счетов учета
	СчетаУчетаН   = Новый Массив; // счета с суммовым учетом только по номенклатуре
	СчетаУчетаНС  = Новый Массив; // счета с суммовым учетом по номенклатуре и складам
	СчетаУчетаНП  = Новый Массив; // счета с суммовым учетом по номенклатуре и партиям
	СчетаУчетаНСП = Новый Массив; // счета с суммовым учетом по номенклатуре, складам и партиям
	СчетаУчетаКН  = Новый Массив; // счета с суммовым учетом по контрагентам, и номенклатуре
	СчетаУчетаКНП = Новый Массив; // счета с суммовым учетом по контрагентам, номенклатуре и партиям
	СчетаУчетаКНС = Новый Массив; // счета с суммовым учетом по контрагентам, номенклатуре и складам

	СчетаУчетаН_Склад  = Новый Массив; // счета с суммовым учетом только по номенклатуре и количественным по складу
	СчетаУчетаНП_Склад = Новый Массив; // счета с суммовым учетом по номенклатуре и партиям и количественным по складу
	СчетаУчетаНК_Склад = Новый Массив; // счета с суммовым учетом по номенклатуре и контрагентам и количественным по складу

	СортировкаСчетовУчета(МассивСчетовУчета,
	                      СчетаУчетаН,
	                      СчетаУчетаНС,
	                      СчетаУчетаНП,
	                      СчетаУчетаНСП,
	                      СчетаУчетаКН,
	                      СчетаУчетаКНП,
	                      СчетаУчетаКНС,
	                      СчетаУчетаН_Склад,
	                      СчетаУчетаНП_Склад,
	                      СчетаУчетаНК_Склад);

	ВидыСубконтоН = Новый Массив;
	ВидысубконтоН.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Номенклатура);

	ВидыСубконтоНС = Новый Массив;
	ВидысубконтоНС.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Номенклатура);
	ВидысубконтоНС.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Склады);

	ВидыСубконтоНП = Новый Массив;
	ВидысубконтоНП.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Номенклатура);
	ВидысубконтоНП.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Партии);

	ВидыСубконтоНСП = Новый Массив;
	ВидысубконтоНСП.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Номенклатура);
	ВидысубконтоНСП.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Партии);
	ВидысубконтоНСП.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Склады);

	ВидыСубконтоКН = Новый Массив;
	ВидыСубконтоКН.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Номенклатура);
	ВидыСубконтоКН.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Контрагенты);
	
	ВидыСубконтоКНП = Новый Массив;
	ВидыСубконтоКНП.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Контрагенты);
	ВидыСубконтоКНП.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Номенклатура);
	ВидыСубконтоКНП.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Партии);	

	ВидыСубконтоКНС = Новый Массив;
	ВидыСубконтоКНС.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Номенклатура);
	ВидыСубконтоКНС.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Склады);
	ВидыСубконтоКНС.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Контрагенты);

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МоментВремени",      МоментВремени);
	Запрос.УстановитьПараметр("СтруктурноеПодразделение", СтруктурноеПодразделение);
	Запрос.УстановитьПараметр("Организация",        	  Организация);
	Запрос.УстановитьПараметр("МассивКонтрагентов", 	  МассивКонтрагентов);
	Запрос.УстановитьПараметр("МассивСкладов",      	  МассивСкладов);
	Запрос.УстановитьПараметр("МассивНоменклатуры", 	  МассивНоменклатуры);
	Запрос.УстановитьПараметр("СчетаУчетаН",        	  СчетаУчетаН);
	Запрос.УстановитьПараметр("СчетаУчетаНС",       	  СчетаУчетаНС);
	Запрос.УстановитьПараметр("СчетаУчетаНП",       	  СчетаУчетаНП);
	Запрос.УстановитьПараметр("СчетаУчетаНСП",      	  СчетаУчетаНСП);
	Запрос.УстановитьПараметр("СчетаУчетаКН",       	  СчетаУчетаКН);
	Запрос.УстановитьПараметр("СчетаУчетаКНП",      	  СчетаУчетаКНП);
	Запрос.УстановитьПараметр("СчетаУчетаКНС",      	  СчетаУчетаКНС);
	Запрос.УстановитьПараметр("СчетаУчетаН_Склад",  	  СчетаУчетаН_Склад);
	Запрос.УстановитьПараметр("СчетаУчетаНП_Склад", 	  СчетаУчетаНП_Склад);
	Запрос.УстановитьПараметр("СчетаУчетаНК_Склад", 	  СчетаУчетаНК_Склад);
	Запрос.УстановитьПараметр("ВидысубконтоН",      	  ВидысубконтоН);
	Запрос.УстановитьПараметр("ВидысубконтоНС",     	  ВидысубконтоНС);
	Запрос.УстановитьПараметр("ВидысубконтоНП",     	  ВидысубконтоНП);
	Запрос.УстановитьПараметр("ВидысубконтоНСП",    	  ВидысубконтоНСП);
	Запрос.УстановитьПараметр("ВидысубконтоКН",     	  ВидысубконтоКН);
	Запрос.УстановитьПараметр("ВидыСубконтоКНП",    	  ВидыСубконтоКНП);
	Запрос.УстановитьПараметр("ВидыСубконтоКНС",    	  ВидыСубконтоКНС);
	Запрос.УстановитьПараметр("ПустаяДата",         	  Дата(1,1,1));
	Запрос.УстановитьПараметр("ПустойСклад",        	  Справочники.Склады.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустаяПартия",       	  Документы.ДокументРасчетовСКонтрагентом.ПустаяСсылка());

	Текст = "";
	
	Если СчетаУчетаН.Количество() > 0 Тогда

		Текст = Текст + "
		|ВЫБРАТЬ
		|	Остатки.Счет КАК СчетУчетаБУ,
		|	Остатки.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
		|	Остатки.Субконто1 КАК Номенклатура,
		|	&ПустаяДата КАК ДокументОприходованияДата,
		|	&ПустаяПартия КАК ДокументОприходования,
		|	" + ?(СчетаУчетаН_Склад.Количество() > 0, "ОстаткиПоСкладам.Субконто2", "&ПустойСклад")+ " КАК Склад,
		|	Остатки.Организация КАК Организация,
		|	СУММА(ЕСТЬNULL(" + ?(СчетаУчетаН_Склад.Количество() > 0, "ОстаткиПоСкладам", "Остатки")+ ".КоличествоОстатокДт, 0)) КАК КоличествоПоСкладу,
		|	СУММА(ЕСТЬNULL(Остатки.КоличествоОстатокДт, 0)) КАК Количество,
		|	СУММА(ЕСТЬNULL(Остатки.СуммаОстатокДт, 0)) КАК Стоимость
		|ИЗ
		|	РегистрБухгалтерии.Типовой.Остатки(&МоментВремени, Счет В (&СчетаУчетаН), &ВидыСубконтоН, (СтруктурноеПодразделение = &СтруктурноеПодразделение ИЛИ СтруктурноеПодразделение ЕСТЬ NULL) И Субконто1 В (&МассивНоменклатуры) И Организация = &Организация) КАК Остатки
		|	" + ?(СчетаУчетаН_Склад.Количество() > 0, "ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Типовой.Остатки(&МоментВремени, Счет В (&СчетаУчетаН_Склад), &ВидыСубконтоНС, (СтруктурноеПодразделение = &СтруктурноеПодразделение ИЛИ СтруктурноеПодразделение ЕСТЬ NULL) И Субконто1 В (&МассивНоменклатуры) И Субконто2 В (&МассивСкладов) И Организация = &Организация) КАК ОстаткиПоСкладам
		|	ПО Остатки.Счет = ОстаткиПоСкладам.Счет
		|		И Остатки.Субконто1 = ОстаткиПоСкладам.Субконто1", "")+ "
		|
		|СГРУППИРОВАТЬ ПО
		|	Остатки.Счет,
		|	Остатки.СтруктурноеПодразделение,
		|	Остатки.Субконто1, " + ?(СчетаУчетаН_Склад.Количество() > 0, "
		|	ОстаткиПоСкладам.Субконто2,", "")+ "
		|	Остатки.Организация";

	КонецЕсли;

	Если СчетаУчетаНС.Количество() > 0 Тогда

		Если Текст <> "" Тогда
			Текст = Текст + "
			|
			| ОБЪЕДИНИТЬ ВСЕ
			|
			|";
		КонецЕсли;

		Текст = Текст + "ВЫБРАТЬ
		|	Остатки.Счет КАК СчетУчетаБУ,
		|	Остатки.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
		|	Остатки.Субконто1 КАК Номенклатура,
		|	&ПустаяДата КАК ДокументОприходованияДата,
		|	&ПустаяПартия КАК ДокументОприходования,
		|	Остатки.Субконто2 КАК Склад,
		|	Остатки.Организация КАК Организация,
		|	СУММА(ЕСТЬNULL(Остатки.КоличествоОстатокДт, 0)) КАК КоличествоПоСкладу,
		|	СУММА(ЕСТЬNULL(Остатки.КоличествоОстатокДт, 0)) КАК Количество,
		|	СУММА(ЕСТЬNULL(Остатки.СуммаОстатокДт, 0)) КАК Стоимость
		|ИЗ
		|	РегистрБухгалтерии.Типовой.Остатки(&МоментВремени, Счет В (&СчетаУчетаНС), &ВидыСубконтоНС, (СтруктурноеПодразделение = &СтруктурноеПодразделение ИЛИ СтруктурноеПодразделение ЕСТЬ NULL) И Субконто1 В (&МассивНоменклатуры) И Субконто2 В (&МассивСкладов) И Организация = &Организация) КАК Остатки
		|
		|СГРУППИРОВАТЬ ПО
		|	Остатки.Счет,
		|	Остатки.СтруктурноеПодразделение,
		|	Остатки.Субконто1,
		|	Остатки.Субконто2,
		|	Остатки.Организация";

	КонецЕсли;

	Если СчетаУчетаНП.Количество() > 0 Тогда

		Если Текст <> "" Тогда
			Текст = Текст + "
			|
			| ОБЪЕДИНИТЬ ВСЕ
			|
			|";
		КонецЕсли;

		Текст = Текст + "ВЫБРАТЬ
		|	Остатки.Счет КАК СчетУчетаБУ,
		|	Остатки.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
		|	Остатки.Субконто1 КАК Номенклатура,
		|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) КАК ДокументОприходованияДата,
		|	Остатки.Субконто2 КАК ДокументОприходования,
		|	" + ?(СчетаУчетаНП_Склад.Количество() > 0, "ОстаткиПоСкладам.Субконто3", "&ПустойСклад")+ " КАК Склад,
		|	Остатки.Организация КАК Организация,
		|	СУММА(ЕСТЬNULL(" + ?(СчетаУчетаНП_Склад.Количество() > 0, "ОстаткиПоСкладам", "Остатки")+ ".КоличествоОстатокДт, 0)) КАК КоличествоПоСкладу,
		|	СУММА(ЕСТЬNULL(Остатки.КоличествоОстатокДт, 0)) КАК Количество,
		|	СУММА(ЕСТЬNULL(Остатки.СуммаОстатокДт, 0)) КАК Стоимость
		|ИЗ
		|	РегистрБухгалтерии.Типовой.Остатки(&МоментВремени, Счет В (&СчетаУчетаНП), &ВидыСубконтоНП, (СтруктурноеПодразделение = &СтруктурноеПодразделение ИЛИ СтруктурноеПодразделение ЕСТЬ NULL) И Субконто1 В (&МассивНоменклатуры) И Организация = &Организация) КАК Остатки
		|	" + ?(СчетаУчетаНП_Склад.Количество() > 0, "ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Типовой.Остатки(&МоментВремени, Счет В (&СчетаУчетаНП_Склад), &ВидыСубконтоНСП, (СтруктурноеПодразделение = &СтруктурноеПодразделение ИЛИ СтруктурноеПодразделение ЕСТЬ NULL) И Субконто1 В (&МассивНоменклатуры) И Субконто3 В (&МассивСкладов) И Организация = &Организация) КАК ОстаткиПоСкладам
		|	ПО Остатки.Счет = ОстаткиПоСкладам.Счет
		|		И Остатки.Субконто1 = ОстаткиПоСкладам.Субконто1
		|		И Остатки.Субконто2 = ОстаткиПоСкладам.Субконто2", "")+ "
		|
		|СГРУППИРОВАТЬ ПО
		|	Остатки.Счет,
		|	Остатки.СтруктурноеПодразделение,
		|	Остатки.Субконто1,
		|	Остатки.Субконто2, " + ?(СчетаУчетаНП_Склад.Количество() > 0, "
		|	ОстаткиПоСкладам.Субконто3,", "")+ "
		|	Остатки.Организация";

	КонецЕсли;

	Если СчетаУчетаНСП.Количество() > 0 Тогда

		Если Текст <> "" Тогда
			Текст = Текст + "
			|
			| ОБЪЕДИНИТЬ ВСЕ
			|
			|";
		КонецЕсли;

		Текст = Текст + "ВЫБРАТЬ
		|	Остатки.Счет КАК СчетУчетаБУ,
		|	Остатки.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
		|	Остатки.Субконто1 КАК Номенклатура,
		|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) КАК ДокументОприходованияДата,
		|	Остатки.Субконто2 КАК ДокументОприходования,
		|	Остатки.Субконто3 КАК Склад,
		|	Остатки.Организация КАК Организация,
		|	СУММА(ЕСТЬNULL(Остатки.КоличествоОстатокДт, 0)) КАК КоличествоПоСкладу,
		|	СУММА(ЕСТЬNULL(Остатки.КоличествоОстатокДт, 0)) КАК Количество,
		|	СУММА(ЕСТЬNULL(Остатки.СуммаОстатокДт, 0)) КАК Стоимость
		|ИЗ
		|	РегистрБухгалтерии.Типовой.Остатки(&МоментВремени, Счет В (&СчетаУчетаНСП), &ВидысубконтоНСП, (СтруктурноеПодразделение = &СтруктурноеПодразделение ИЛИ СтруктурноеПодразделение ЕСТЬ NULL) И  Субконто1 В (&МассивНоменклатуры) И Субконто3 В (&МассивСкладов) И Организация = &Организация) КАК Остатки
		|
		|СГРУППИРОВАТЬ ПО
		|	Остатки.Счет,
		|	Остатки.СтруктурноеПодразделение,
		|	Остатки.Субконто1,
		|	Остатки.Субконто2,
		|	Остатки.Субконто3,
		|	Остатки.Организация";

	КонецЕсли;

	Если СчетаУчетаКН.Количество() > 0 Тогда // субкомиссия

		Если Текст <> "" Тогда
			Текст = Текст + "
			|
			| ОБЪЕДИНИТЬ ВСЕ
			|
			|";
		КонецЕсли;

		Текст = Текст + "ВЫБРАТЬ
		|	Остатки.Счет КАК СчетУчетаБУ,
		|	Остатки.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
		|	Остатки.Субконто1 КАК Номенклатура,
		|	&ПустаяДата КАК ДокументОприходованияДата,
		|	&ПустаяПартия КАК ДокументОприходования,
		|	&ПустойСклад КАК Склад,
		|	Остатки.Организация КАК Организация,
		|	СУММА(ЕСТЬNULL(Остатки.КоличествоОстатокДт, 0)) КАК КоличествоПоСкладу,
		|	СУММА(ЕСТЬNULL(Остатки.КоличествоОстатокДт, 0)) КАК Количество,
		|	СУММА(ЕСТЬNULL(Остатки.СуммаОстатокДт, 0)) КАК Стоимость
		|ИЗ
		|	РегистрБухгалтерии.Типовой.Остатки(&МоментВремени, Счет В (&СчетаУчетаКН), &ВидыСубконтоКН, (СтруктурноеПодразделение = &СтруктурноеПодразделение ИЛИ СтруктурноеПодразделение ЕСТЬ NULL) И Субконто1 В (&МассивНоменклатуры) И Субконто2 В (&МассивКонтрагентов) И Организация = &Организация) КАК Остатки
		|
		|СГРУППИРОВАТЬ ПО
		|	Остатки.Счет,
		|	Остатки.СтруктурноеПодразделение,
		|	Остатки.Субконто1,
		|	Остатки.Субконто2,
		|	Остатки.Организация";

	КонецЕсли;

	Если СчетаУчетаКНП.Количество() > 0 Тогда // субкомиссия

		Если Текст <> "" Тогда
			Текст = Текст + "
			|
			| ОБЪЕДИНИТЬ ВСЕ
			|
			|";
		КонецЕсли;

		Текст = Текст + "ВЫБРАТЬ
		                |	Остатки.Счет КАК СчетУчетаБУ,
		                |	Остатки.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
		                |	Остатки.Субконто2 КАК Номенклатура,
		                |	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) КАК ДокументОприходованияДата,
		                |	Остатки.Субконто3 КАК ДокументОприходования,
		                |	Остатки.Субконто1 КАК Склад,
		                |	Остатки.Организация КАК Организация,
		                |	СУММА(ЕСТЬNULL(Остатки.КоличествоОстатокДт, 0)) КАК КоличествоПоСкладу,
		                |	СУММА(ЕСТЬNULL(Остатки.КоличествоОстатокДт, 0)) КАК Количество,
		                |	СУММА(ЕСТЬNULL(Остатки.СуммаОстатокДт, 0)) КАК Стоимость
		                |ИЗ
		                |	РегистрБухгалтерии.Типовой.Остатки(
		                |			&МоментВремени,
		                |			Счет В (&СчетаУчетаКНП),
		                |			&ВидыСубконтоКНП,
		                |			(СтруктурноеПодразделение = &СтруктурноеПодразделение
		                |				ИЛИ СтруктурноеПодразделение ЕСТЬ NULL )
		                |				И Субконто1 В (&МассивКонтрагентов)
		                |				И Субконто2 В (&МассивНоменклатуры)
		                |				И Организация = &Организация) КАК Остатки
		                |
		                |СГРУППИРОВАТЬ ПО
		                |	Остатки.Счет,
		                |	Остатки.СтруктурноеПодразделение,
		                |	Остатки.Субконто1,
		                |	Остатки.Субконто2,
		                |	Остатки.Субконто3,
		                |	Остатки.Организация";

	КонецЕсли;

	Если СчетаУчетаКНС.Количество() > 0 Тогда // дав. сырье

		Если Текст <> "" Тогда
			Текст = Текст + "
			|
			| ОБЪЕДИНИТЬ ВСЕ
			|
			|";
		КонецЕсли;

		Текст = Текст + "ВЫБРАТЬ
		|	Остатки.Счет КАК СчетУчетаБУ,
		|	Остатки.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
		|	Остатки.Субконто1 КАК Номенклатура,
		|	&ПустаяДата КАК ДокументОприходованияДата,
		|	&ПустаяПартия КАК ДокументОприходования,
		|	Остатки.Субконто2 КАК Склад,
		|	Остатки.Организация КАК Организация,
		|	СУММА(ЕСТЬNULL(Остатки.КоличествоОстатокДт, 0)) КАК КоличествоПоСкладу,
		|	СУММА(ЕСТЬNULL(Остатки.КоличествоОстатокДт, 0)) КАК Количество,
		|	СУММА(ЕСТЬNULL(Остатки.СуммаОстатокДт, 0)) КАК Стоимость
		|ИЗ
		|	РегистрБухгалтерии.Типовой.Остатки(&МоментВремени, Счет В (&СчетаУчетаКНС), &ВидыСубконтоКНС, (СтруктурноеПодразделение = &СтруктурноеПодразделение ИЛИ СтруктурноеПодразделение ЕСТЬ NULL) И  Субконто1 В (&МассивНоменклатуры) И Субконто2 В (&МассивСкладов) И Субконто3 В (&МассивКонтрагентов) И Организация = &Организация) КАК Остатки
		|
		|СГРУППИРОВАТЬ ПО
		|	Остатки.Счет,
		|	Остатки.СтруктурноеПодразделение,
		|	Остатки.Субконто1,
		|	Остатки.Субконто2,
		|	Остатки.Субконто3,
		|	Остатки.Организация";

	КонецЕсли;

	Запрос.Текст = Текст;

	Запрос.Текст = Текст + "
	|ДЛЯ ИЗМЕНЕНИЯ";

	Результат = Запрос.Выполнить().Выгрузить();

	Если СчетаУчетаКНП.Количество() + СчетаУчетаНСП.Количество() + СчетаУчетаНП.Количество() <> 0 Тогда

		ОбщегоНазначенияБКВызовСервера.ДобавитьДатуДокументаКРезультатуЗапроса(Результат,"ДокументОприходования", "ДокументОприходованияДата");

		Результат.Сортировать("ДокументОприходованияДата, ДокументОприходования", Новый СравнениеЗначений);

	КонецЕсли;

	Результат.Колонки.Добавить("НомерСтроки", ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(10,0));
	НомерСтроки = 1;
	Для каждого СтрокаРезультата Из Результат Цикл
		СтрокаРезультата.НомерСтроки = НомерСтроки;
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;

	Возврат Результат;

КонецФункции 

Функция ПолучитьОстаткиТоваровНУ(МоментВремени, Организация, СтруктурноеПодразделение,ВидУчета, ТаблицаСписания) Экспорт
	
	МассивСчетовУчетаНУ = РазличныеЗначенияКолонкиТаблицы(ТаблицаСписания, "СчетУчетаНУ");
	
	// Получаем остатки номенклатуры
	
	МассивНоменклатуры = РазличныеЗначенияКолонкиТаблицы(ТаблицаСписания, "Номенклатура");
	МассивСкладов      = РазличныеЗначенияКолонкиТаблицы(ТаблицаСписания, "Склад");
	МассивКонтрагентов = РазличныеЗначенияКолонкиТаблицы(ТаблицаСписания, "Контрагент");


	// Сортировка счетов учета
	СчетаУчетаН   = Новый Массив; // счета с суммовым учетом только по номенклатуре
	СчетаУчетаНС  = Новый Массив; // счета с суммовым учетом по номенклатуре и складам
	СчетаУчетаН_Склад  = Новый Массив; // счета с суммовым учетом только по номенклатуре и количественным по складу
	СчетаУчетаКН  = Новый Массив; // счета с суммовым учетом по контрагентам, и номенклатуре

	СортировкаСчетовУчетаНУ(МассивСчетовУчетаНУ,
	                      СчетаУчетаН,
	                      СчетаУчетаНС,
						  СчетаУчетаН_Склад,
						  СчетаУчетаКН);

	ВидыСубконтоН = Новый Массив;
	ВидысубконтоН.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Номенклатура);

	ВидыСубконтоНС = Новый Массив;
	ВидысубконтоНС.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Номенклатура);
	ВидысубконтоНС.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Склады);

	ВидыСубконтоКН = Новый Массив;  
	ВидыСубконтоКН.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Контрагенты);
	ВидыСубконтоКН.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Номенклатура);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МоментВремени",      	  МоментВремени);
	Запрос.УстановитьПараметр("СтруктурноеПодразделение", СтруктурноеПодразделение);
	Запрос.УстановитьПараметр("ВидУчета",           	  ВидУчета);
	Запрос.УстановитьПараметр("Организация",        	  Организация);
	Запрос.УстановитьПараметр("МассивСкладов",      	  МассивСкладов);
	Запрос.УстановитьПараметр("МассивНоменклатуры", 	  МассивНоменклатуры);
	Запрос.УстановитьПараметр("МассивКонтрагентов", 	  МассивКонтрагентов);
	Запрос.УстановитьПараметр("СчетаУчетаН",        	  СчетаУчетаН);
	Запрос.УстановитьПараметр("СчетаУчетаНС",       	  СчетаУчетаНС);
	Запрос.УстановитьПараметр("СчетаУчетаН_Склад",  	  СчетаУчетаН_Склад);
	Запрос.УстановитьПараметр("СчетаУчетаКН",       	  СчетаУчетаКН);
	Запрос.УстановитьПараметр("ВидысубконтоН",      	  ВидысубконтоН);
	Запрос.УстановитьПараметр("ВидысубконтоНС",     	  ВидысубконтоНС);
	Запрос.УстановитьПараметр("ВидысубконтоКН",     	  ВидысубконтоКН);
	Запрос.УстановитьПараметр("ПустаяДата",         	  Дата(1,1,1));
	Запрос.УстановитьПараметр("ПустойСклад",        	  Справочники.Склады.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустаяПартия",       	  Документы.ДокументРасчетовСКонтрагентом.ПустаяСсылка());

	Текст = "";

	Если СчетаУчетаН.Количество() > 0 Тогда

		Текст = Текст + "
		|ВЫБРАТЬ
		|	Остатки.Счет КАК СчетУчетаНУ,
		|	Остатки.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
		|	Остатки.Субконто1 КАК Номенклатура,
		|	&ПустаяДата КАК ДокументОприходованияДата,
		|	&ПустаяПартия КАК ДокументОприходования,
		|	" + ?(СчетаУчетаН_Склад.Количество() > 0, "ОстаткиПоСкладам.Субконто2", "&ПустойСклад")+ " КАК Склад,
		|	Остатки.Организация КАК Организация,
		|	СУММА(ЕСТЬNULL(" + ?(СчетаУчетаН_Склад.Количество() > 0, "ОстаткиПоСкладам", "Остатки")+ ".КоличествоОстатокДт, 0)) КАК КоличествоПоСкладу,
		|	СУММА(ЕСТЬNULL(Остатки.КоличествоОстатокДт, 0)) КАК Количество,
		|	СУММА(ЕСТЬNULL(Остатки.СуммаОстатокДт, 0)) КАК Стоимость
		|ИЗ
		|	РегистрБухгалтерии.Налоговый.Остатки(&МоментВремени, Счет В (&СчетаУчетаН), &ВидыСубконтоН, (ВидУчета = &ВидУчета И СтруктурноеПодразделение = &СтруктурноеПодразделение ИЛИ СтруктурноеПодразделение ЕСТЬ NULL) И Субконто1 В (&МассивНоменклатуры) И Организация = &Организация) КАК Остатки
		|	" + ?(СчетаУчетаН_Склад.Количество() > 0, "ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Налоговый.Остатки(&МоментВремени, Счет В (&СчетаУчетаН_Склад), &ВидыСубконтоНС, (СтруктурноеПодразделение = &СтруктурноеПодразделение ИЛИ СтруктурноеПодразделение ЕСТЬ NULL) И Субконто1 В (&МассивНоменклатуры) И Субконто2 В (&МассивСкладов) И Организация = &Организация) КАК ОстаткиПоСкладам
		|	ПО Остатки.Счет = ОстаткиПоСкладам.Счет
		|		И Остатки.Субконто1 = ОстаткиПоСкладам.Субконто1", "")+ "
		|
		|СГРУППИРОВАТЬ ПО
		|	Остатки.Счет,
		|	Остатки.СтруктурноеПодразделение,
		|	Остатки.Субконто1, " + ?(СчетаУчетаН_Склад.Количество() > 0, "
		|	ОстаткиПоСкладам.Субконто2,", "")+ "
		|	Остатки.Организация";

	КонецЕсли;

	Если СчетаУчетаНС.Количество() > 0 Тогда

		Если Текст <> "" Тогда
			Текст = Текст + "
			|
			| ОБЪЕДИНИТЬ ВСЕ
			|
			|";
		КонецЕсли;

		Текст = Текст + "ВЫБРАТЬ
		|	Остатки.Счет КАК СчетУчетаНУ,
		|	Остатки.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
		|	Остатки.Субконто1 КАК Номенклатура,
		|	&ПустаяДата КАК ДокументОприходованияДата,
		|	&ПустаяПартия КАК ДокументОприходования,
		|	Остатки.Субконто2 КАК Склад,
		|	Остатки.Организация КАК Организация,
		|	СУММА(ЕСТЬNULL(Остатки.КоличествоОстатокДт, 0)) КАК КоличествоПоСкладу,
		|	СУММА(ЕСТЬNULL(Остатки.КоличествоОстатокДт, 0)) КАК Количество,
		|	СУММА(ЕСТЬNULL(Остатки.СуммаОстатокДт, 0)) КАК Стоимость
		|ИЗ
		|	РегистрБухгалтерии.Налоговый.Остатки(&МоментВремени, Счет В (&СчетаУчетаНС), &ВидыСубконтоНС, (ВидУчета = &ВидУчета И СтруктурноеПодразделение = &СтруктурноеПодразделение ИЛИ СтруктурноеПодразделение ЕСТЬ NULL) И Субконто1 В (&МассивНоменклатуры) И Субконто2 В (&МассивСкладов) И Организация = &Организация) КАК Остатки
		|
		|СГРУППИРОВАТЬ ПО
		|	Остатки.Счет,
		|	Остатки.СтруктурноеПодразделение,
		|	Остатки.Субконто1,
		|	Остатки.Субконто2,
		|	Остатки.Организация";

	КонецЕсли;
	
	Если СчетаУчетаКН.Количество() > 0 Тогда // субкомиссия

		Если Текст <> "" Тогда
			Текст = Текст + "
			|
			| ОБЪЕДИНИТЬ ВСЕ
			|
			|";
		КонецЕсли;

		Текст = Текст + "ВЫБРАТЬ
		|	Остатки.Счет КАК СчетУчетаНУ,
		|	Остатки.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
		|	Остатки.Субконто2 КАК Номенклатура,
		|	&ПустаяДата КАК ДокументОприходованияДата,
		|	&ПустаяПартия КАК ДокументОприходования,
		|	&ПустойСклад КАК Склад,
		|	Остатки.Организация КАК Организация,
		|	СУММА(ЕСТЬNULL(Остатки.КоличествоОстатокДт, 0)) КАК КоличествоПоСкладу,
		|	СУММА(ЕСТЬNULL(Остатки.КоличествоОстатокДт, 0)) КАК Количество,
		|	СУММА(ЕСТЬNULL(Остатки.СуммаОстатокДт, 0)) КАК Стоимость
		|ИЗ
		|	РегистрБухгалтерии.Налоговый.Остатки(&МоментВремени, Счет В (&СчетаУчетаКН), &ВидыСубконтоКН, (ВидУчета = &ВидУчета И СтруктурноеПодразделение = &СтруктурноеПодразделение ИЛИ СтруктурноеПодразделение ЕСТЬ NULL) И Субконто2 В (&МассивНоменклатуры) И Субконто1 В (&МассивКонтрагентов) И Организация = &Организация) КАК Остатки
		|
		|СГРУППИРОВАТЬ ПО
		|	Остатки.Счет,
		|	Остатки.СтруктурноеПодразделение,
		|	Остатки.Субконто1,
		|	Остатки.Субконто2,
		|	Остатки.Организация";

	КонецЕсли;

	Запрос.Текст = Текст + "
	|ДЛЯ ИЗМЕНЕНИЯ";

	Результат = Запрос.Выполнить().Выгрузить();

	Результат.Колонки.Добавить("НомерСтроки", ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(10,0));
	НомерСтроки = 1;
	Для каждого СтрокаРезультата Из Результат Цикл
		СтрокаРезультата.НомерСтроки = НомерСтроки;
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;

	Возврат Результат;

КонецФункции 

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// ПОСТУПЛЕНИЕ ТОВАРОВ

Функция ПодготовитьПараметрыПоступлениеТоваров(ТаблицаТовары, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаТовары

	СписокОбязательныхКолонок = ""
	+ "НомерСтроки,"       				// <Число> - номер строки в списке
	+ "Номенклатура,"      				// <СправочникСсылка.Номенклатура> - оприходуемый товар
	+ "Сумма,"             				// <Число,15,2> - сумма в тенге
	+ "СуммаВзаиморасчетов,"            // <Число,15,2> - сумма в валюте взаиморасчетов
	+ "Количество,"        				// <Число,15,3> - количество оприходуемого товара
	+ "СчетУчетаБУ,"         			// <ПланСчетовСсылка.Типовой> - счет учета, на который приходуется товар
	+ "СчетУчетаНУ,"        			// <ПланСчетовСсылка.Налоговый> - счет учета, на который приходуется товар
	+ "Содержание,"        				// <Строка,150> - содержание проводки
	+ "ВедетсяПартионныйУчет,"			// <Булево> - Признак того, что на счете присутствует субконто "Партии"
	+ "СчетУчетаБУЗабалансовый";		// <Булево> - Признак того, что счет является забалансовым

	Параметры.Вставить("ТаблицаТовары",
		ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаТовары, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Регистратор,"                  	 // <ДокументСсылка.*> - документ-регистратор движений
	+ "Период,"                       	 // <Дата> - период движений - дата документа
	+ "Организация,"                  	 // <СправочникСсылка.Организация> - организация, в которую приходуется товар
	+ "Контрагент,"                  	 // <СправочникСсылка.Контрагенты> - контрагент - поставщик
	+ "ДоговорКонтрагента,"              // <СправочникСсылка.Организация> - договор контрагента, в рамках которого выполняется поставка
	+ "НеобходимостьОтраженияВНУ,"  	 // <Булево> - определяет необходимость отражения в НУ
	+ "ВалютаВзаиморасчетов,"  			 // <СправочникСсылка.Валюты> - валюта документа
	+ "ВидУчетаНУ,"  					 // <СправочникСсылка.ВидыУчетаНУ> - вид учета, указанный в документе
	+ "СтруктурноеПодразделение,"  		 // <СправочникСсылка.ПодразделенияОрганизаций> - структурное подразделение организации
	+ "Склад,"                    		 // <СправочникСсылка.Склады> - склад, на который приходуется товар
	+ "СчетУчетаРасчетовСКонтрагентом,"  // <ПланСчетовСсылка.Типовой> - счет на котором ведутся расчеты с контрагентом по задолженности
	+ "СчетУчетаРасчетовПоАвансам";		 // <ПланСчетовСсылка.Типовой> - счет на котором ведутся расчеты с контрагентом по авансам

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

// ОПРИХОДОВАНИЕ ТОВАРОВ

Функция ПодготовитьПараметрыОприходованиеТоваров(ТаблицаТовары, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаТовары

	СписокОбязательныхКолонок = ""
	+ "НомерСтроки,"       				// <Число> - номер строки в списке
	+ "Номенклатура,"      				// <СправочникСсылка.Номенклатура> - оприходуемый товар
	+ "Склад,"                    		// <СправочникСсылка.Склады> - склад, на который приходуется товар
	+ "Сумма,"             				// <Число,15,2> - сумма в рублях
	+ "Количество,"        				// <Число,15,3> - количество оприходуемого товара
	+ "СчетУчетаБУ,"         			// <ПланСчетовСсылка.Типовой> - счет учета, на который приходуется товар
	+ "СчетУчетаНУ,"        			// <ПланСчетовСсылка.Налоговый> - счет учета, на который приходуется товар
 	+ "КорСчетОприходованияБУ,"  		// <ПланСчетовСсылка.Типовой> - счет учета, с которого приходуется товар
	+ "КорСубконтоОприходованияБУ1,"  	// <Характеристика.ВидыСубконтоТиповые> - аналитика счета , с которого приходуется товар
    + "КорСубконтоОприходованияБУ2,"  	// <Характеристика.ВидыСубконтоТиповые> - аналитика счета , с которого приходуется товар
   	+ "КорСубконтоОприходованияБУ3,"  	// <Характеристика.ВидыСубконтоТиповые> - аналитика счета , с которого приходуется товар
    + "КорСчетОприходованияНУ,"  		// <ПланСчетовСсылка.Налоговый> - счет учета, с которого приходуется товар
	+ "КорСубконтоОприходованияНУ1,"  	// <Характеристика.ВидыСубконтоТиповые> - аналитика счета , с которого приходуется товар
    + "КорСубконтоОприходованияНУ2,"  	// <Характеристика.ВидыСубконтоТиповые> - аналитика счета , с которого приходуется товар
   	+ "КорСубконтоОприходованияНУ3,"  	// <Характеристика.ВидыСубконтоТиповые> - аналитика счета , с которого приходуется товар
	+ "ОсновноеСредство,"               // <СправочникСсылка.ОсновныеСредства> - когда товар приходуется на склад при списании ОС
	+ "Содержание";        				// <Строка,150> - содержание проводки     
	
	
	Параметры.Вставить("ТаблицаТовары",
		ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаТовары, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Регистратор,"                  	 // <ДокументСсылка.*> - документ-регистратор движений
	+ "Период,"                       	 // <Дата> - период движений - дата документа
	+ "Организация,"                  	 // <СправочникСсылка.Организация> - организация, в которую приходуется товар
	+ "НеобходимостьОтраженияВНУ,"  	 // <Булево> - определяет необходимость отражения в НУ
	+ "ВалютаДокумента,"  				// <СправочникСсылка.Валюты> - валюта документа
	+ "ВидУчетаНУ,"  					// <СправочникСсылка.ВидыУчетаНУ> - вид учета, указанный в документе
	+ "СтруктурноеПодразделение,"  		// <СправочникСсылка.ПодразделенияОрганизаций> - структурное подразделение организации
	+ "НомерЖурнала";        			// <Строка,> - номер журнала


	ОбщегоНазначенияБКВызовСервера.ДобавитьКолонкуВТаблицуЗначений(ТаблицаРеквизиты, "НомерЖурнала","");

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

// ПОСТУПЛЕНИЕ ДОП. РАСХОДОВ

Функция ПодготовитьПараметрыПоступлениеДопРасходов(ТаблицаТовары, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаТовары

	СписокОбязательныхКолонок = ""
	+ "НомерСтроки,"       				// <Число> - номер строки в списке
	+ "Номенклатура,"      				// <СправочникСсылка.Номенклатура> - оприходуемый товар
	+ "Сумма,"             				// <Число,15,2> - сумма в тенге
	+ "СуммаВзаиморасчетов,"            // <Число,15,2> - сумма в валюте взаиморасчетов
	+ "СчетУчетаБУ,"         			// <ПланСчетовСсылка.Типовой> - счет учета, на который приходуется товар
	+ "СчетУчетаНУ,"        			// <ПланСчетовСсылка.Налоговый> - счет учета, на который приходуется товар
	+ "Содержание,"        				// <Строка,150> - содержание проводки
	+ "ВедетсяПартионныйУчет,"			// <Булево> - Признак того, что на счете присутствует субконто "Партии"
	+ "СчетУчетаБУЗабалансовый,"		// <Булево> - Признак того, что счет является забалансовым
	+ "Склад,"							// <СправочникСсылка.Склады> - склад оприходования
	+ "Партия";							// <ДокументСсылка> - Партия, на которую оформляется поступление доп. расходов

	Параметры.Вставить("ТаблицаТовары",
		ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаТовары, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Регистратор,"                  	 // <ДокументСсылка.*> - документ-регистратор движений
	+ "Период,"                       	 // <Дата> - период движений - дата документа
	+ "ВидОперации,"					 // <ПеречислениеСсылка.ВидыОперацийПоступлениеДопРасходов> - вид операции поступления доп. расходов
	+ "Организация,"                  	 // <СправочникСсылка.Организация> - организация, в которую приходуется товар
	+ "Контрагент,"                  	 // <СправочникСсылка.Контрагенты> - контрагент - поставщик
	+ "ДоговорКонтрагента,"              // <СправочникСсылка.Организация> - договор контрагента, в рамках которого выполняется поставка
	+ "НеобходимостьОтраженияВНУ,"  	 // <Булево> - определяет необходимость отражения в НУ
	+ "ВалютаВзаиморасчетов,"  			 // <СправочникСсылка.Валюты> - валюта документа
	+ "ВидУчетаНУ,"  					 // <СправочникСсылка.ВидыУчетаНУ> - вид учета, указанный в документе
	+ "СтруктурноеПодразделение,"  		 // <СправочникСсылка.ПодразделенияОрганизаций> - структурное подразделение организации
	+ "СчетУчетаРасчетовСКонтрагентом,"  // <ПланСчетовСсылка.Типовой> - счет на котором ведутся расчеты с контрагентом по задолженности
	+ "СчетУчетаРасчетовПоАвансам,"	 	 // <ПланСчетовСсылка.Типовой> - счет на котором ведутся расчеты с контрагентом по авансам
	+ "СчетЗатратБУ,"					 // <ПланСчетовСсылка.Типовой> - счет затрат для отражения операции внутреннего расхода
	+ "СубконтоЗатратБУ1,"				 // - значение субконто счета затрат
	+ "СубконтоЗатратБУ2,"				 // - значение субконто счета затрат
	+ "СубконтоЗатратБУ3,"				 // - значение субконто счета затрат
	+ "СчетЗатратНУ,"					 // <ПланСчетовСсылка.Налоговый> - счет затрат для отражения операции внутреннего расхода
	+ "СубконтоЗатратНУ1,"				 // - значение субконто счета затрат
	+ "СубконтоЗатратНУ2,"				 // - значение субконто счета затрат
	+ "СубконтоЗатратНУ3";				 // - значение субконто счета затрат
	
	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

// АВАНСОВЫЙ ОТЧЕТ

Функция ПодготовитьПараметрыАвансовыйОтчетТовары(ТаблицаТовары, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаТовары

	СписокОбязательныхКолонок = ""
	+ "НомерСтроки,"       				// <Число> - номер строки в списке
	+ "Номенклатура,"      				// <СправочникСсылка.Номенклатура> - оприходуемый товар
	+ "Сумма,"             				// <Число,15,2> - сумма в тенге
	+ "СуммаВзаиморасчетов,"            // <Число,15,2> - сумма в валюте взаиморасчетов
	+ "Количество,"        				// <Число,15,3> - количество оприходуемого товара
	+ "СчетУчетаБУ,"         			// <ПланСчетовСсылка.Типовой> - счет учета, на который приходуется товар
	+ "СчетУчетаНУ,"        			// <ПланСчетовСсылка.Налоговый> - счет учета, на который приходуется товар
	+ "Контрагент,"        				// <СправочникСсылка.Контрагенты> - контрагент, у которого приобретается товар
	+ "Содержание,"        				// <Строка,150> - содержание проводки
	+ "ВедетсяПартионныйУчет,"			// <Булево> - Признак того, что на счете присутствует субконто "Партии"
	+ "СчетУчетаБУЗабалансовый";		// <Булево> - Признак того, что счет является забалансовым

	Параметры.Вставить("ТаблицаТовары",
		ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаТовары, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Регистратор,"                  	 // <ДокументСсылка.*> - документ-регистратор движений
	+ "Период,"                       	 // <Дата> - период движений - дата документа
	+ "Организация,"                  	 // <СправочникСсылка.Организация> - организация, в которую приходуется товар
	+ "НеобходимостьОтраженияВНУ,"  	 // <Булево> - определяет необходимость отражения в НУ
	+ "ВалютаВзаиморасчетов,"  			 // <СправочникСсылка.Валюты> - валюта документа
	+ "ВидУчетаНУ,"  					 // <СправочникСсылка.ВидыУчетаНУ> - вид учета, указанный в документе
	+ "СтруктурноеПодразделение,"  		 // <СправочникСсылка.ПодразделенияОрганизаций> - структурное подразделение организации
	+ "Склад,"                    		 // <СправочникСсылка.Склады> - склад, на который приходуется товар
	+ "СчетРасчетовСПодотчетнымЛицом,"   // <ПланСчетовСсылка.Типовой> - счет на котором ведутся расчеты с контрагентом по задолженности
	+ "ПодотчетноеЛицо,"		 		 // <ПланСчетовСсылка.Типовой> - счет на котором ведутся расчеты с контрагентом по авансам
	+ "ВедениеУчетаВременныхРазницБалансовымМетодом"; // <Булево>
	
	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

// ГТД ПО ИМПОРТУ

Функция ПодготовитьПараметрыГТДИмпорт(ТаблицаТовары, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаТовары

	СписокОбязательныхКолонок = ""
	+ "НомерСтроки,"       				// <Число> - номер строки в списке
	+ "Номенклатура,"      				// <СправочникСсылка.Номенклатура> - оприходованный товар, на который отражается пошлина
	+ "Склад,"                          // <СправочникСсылка.Склады> - склад, на который оприходован товар
	+ "ДокументПартии,"                 // <ДокументСсылка> - партия, по которой оприходован товар
	+ "Сумма,"             				// <Число,15,2> - сумма в тенге
	+ "ВидНалога,"             			// <СправочникСсылка.НалогиСборыОтчисления> - вид налога пошлины, сбора, НДС
	+ "СуммаВзаиморасчетов,"            // <Число,15,2> - сумма в валюте взаиморасчетов
	+ "Количество,"        				// <Число,15,3> - количество оприходуемого товара
	+ "СчетУчетаБУ,"         			// <ПланСчетовСсылка.Типовой> - счет учета, на который приходуется товар
	+ "СчетУчетаНУ,"        			// <ПланСчетовСсылка.Налоговый> - счет учета, на который приходуется товар
	+ "Содержание,"        				// <Строка,150> - содержание проводки
	+ "ДоговорКонтрагента,"             // <СправочникСсылка.ДоговорыКонтрагентов> - выбранный договор контрагента
	+ "ВалютаВзаиморасчетов,"           // <СправочникСсылка.Валюты> - валюта взаиморасчетов выбранного договора
	+ "ВедетсяПартионныйУчет,"			// <Булево> - Признак того, что на счете присутствует субконто "Партии"
	+ "СчетУчетаБУЗабалансовый";		// <Булево> - Признак того, что счет является забалансовым

	Параметры.Вставить("ТаблицаТовары",
		ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаТовары, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Регистратор,"                  	 // <ДокументСсылка.*> - документ-регистратор движений
	+ "Период,"                       	 // <Дата> - период движений - дата документа
	+ "Организация,"                  	 // <СправочникСсылка.Организация> - организация, в которую приходуется товар
	+ "Контрагент,"                  	 // <СправочникСсылка.Контрагенты> - контрагент - поставщик
	+ "НеобходимостьОтраженияВНУ,"  	 // <Булево> - определяет необходимость отражения в НУ
	+ "ВалютаДокумента,"  			     // <СправочникСсылка.Валюты> - валюта документа
	+ "ВалютаВзаиморасчетов,"  			 // <СправочникСсылка.Валюты> - валюта взаиморасчетов
	+ "ВидУчетаНУ,"  					 // <СправочникСсылка.ВидыУчетаНУ> - вид учета, указанный в документе
	+ "СтруктурноеПодразделение,"  		 // <СправочникСсылка.ПодразделенияОрганизаций> - структурное подразделение организации
	+ "ВариантОтражения,"  		         // <Булево> - определяет вариант отражения
	+ "СчетУчетаРасчетовСКонтрагентом,"  // <ПланСчетовСсылка.Типовой> - счет на котором ведутся расчеты с контрагентом по задолженности
	+ "СчетУчетаРасчетовСКонтрагентомВал," // <ПланСчетовСсылка.Типовой> - счет на котором ведутся расчеты с контрагентом по задолженности в валюте взаиморасчетов
	+ "СчетУчетаНДСПоРеализации";        // <ПланСчетовСсылка.Типовой> - счет на котором ведутся расчеты по НДС по импорту

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

// ПОДГОТОВКА СПИСАНИЯ ТОВАРОВ

Функция ПодготовитьРеквизитыСписанныеТовары(ТаблицаРеквизиты)
	
	СписокОбязательныхКолонок = ""
	+ "Регистратор,"   // <ДокументСсылка.*> - документ-регистратор движений
	+ "Период,"        // <Дата> - период движений - дата документа
	+ "Организация,"   // <СправочникСсылка.Организации>
	+ "СтруктурноеПодразделение," // <Ссылка на справочник подразделений>
	+ "КорСтруктурноеПодразделение," // <Ссылка на справочник подразделений>
	+ "ВалютаВзаиморасчетов," // <Ссылка на справочник подразделений>
	+ "Контрагент,"    // <СправочникСсылка.Контрагенты>
	+ "Содержание,"    
	+ "НеобходимостьОтраженияВНУ," // <Булево>
	+ "ВидУчетаНУ," // <СправочникСсылка.ВидыУчетаНУ>	
	+ "ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль";	
	
	ОбщегоНазначенияБКВызовСервера.ДобавитьКолонкуВТаблицуЗначений(ТаблицаРеквизиты, "ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль", Ложь);   		

	Возврат ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок);
	
КонецФункции

Функция ПодготовитьПараметрыТаблицыСписанныеТовары(ТаблицаТовары, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаТовары

	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"               // <Строка,0> - имя списка в документе
	+ "СинонимСписка,"           // <Строка,0> - синоним списка
	+ "Период,"                  // <Дата> - период движения
	+ "НомерСтроки,"             // <Число> - номер строки в списке
	+ "СчетУчетаБУ,"             // <ПланСчетовСсылка.Типовой> - счет учета, с которого списывается номенклатура
	+ "СчетУчетаНУ,"             // <ПланСчетовСсылка.Налоговый> - счет учета, с которого списывается номенклатура
	+ "Номенклатура,"            // <СправочникСсылка.Номенклатура> - списываемая номенклатура
	+ "Склад,"                   // <СправочникСсылка.Склад> - склад, с которого списывается номенклатура
	+ "ДокументОприходования,"   // <ДокументСсылка.*> - документ поступления номенклатуры (партия), указанный в документе списания
	+ "Себестоимость,"           // <Число,15,2> - сумма списываемой номенклатуры, указанная в документе списания
	+ "Сумма,"                   // <Число,15,2> - сумма списываемой номенклатуры, указанная в документе списания и пересчитанная в валюту регл. учета
	+ "СуммаВал,"                // <Число,15,2> - сумма списываемой номенклатуры, указанная в документе списания в валюте взаиморасчетов
	+ "Количество,"              // <Число,15,3> - количество списываемой номенклатуры
	+ "КорСчетСписанияБУ,"       // <ПланСчетовСсылка.Типовой> - счет учета, на который списывается номенклатура
	+ "ВидКорСубконтоБУ1,"       // <Число/Строка/ПланВидовХарактеристикСсылка.ВидыСубконтоТиповые> - вид субконто счета, на который списывается номенклатура
	+ "ВидКорСубконтоБУ2,"       // <Число/Строка/ПланВидовХарактеристикСсылка.ВидыСубконтоТиповые> - вид субконто счета, на который списывается номенклатура
	+ "ВидКорСубконтоБУ3,"       // <Число/Строка/ПланВидовХарактеристикСсылка.ВидыСубконтоТиповые> - вид субконто счета, на который списывается номенклатура
	+ "КорСубконтоБУ1,"          // - значение субконто счета, на который списывается номенклатура
	+ "КорСубконтоБУ2,"          // - значение субконто счета, на который списывается номенклатура
	+ "КорСубконтоБУ3,"          // - значение субконто счета, на который списывается номенклатура
	+ "КорСчетСписанияНУ,"       // <ПланСчетовСсылка.Налоговый> - счет учета, на который списывается номенклатура
	+ "ВидКорСубконтоНУ1,"       // <Число/Строка/ПланВидовХарактеристикСсылка.ВидыСубконтоТиповые> - вид субконто счета, на который списывается номенклатура
	+ "ВидКорСубконтоНУ2,"       // <Число/Строка/ПланВидовХарактеристикСсылка.ВидыСубконтоТиповые> - вид субконто счета, на который списывается номенклатура
	+ "ВидКорСубконтоНУ3,"       // <Число/Строка/ПланВидовХарактеристикСсылка.ВидыСубконтоТиповые> - вид субконто счета, на который списывается номенклатура
	+ "КорСубконтоНУ1,"          // - значение субконто счета, на который списывается номенклатура
	+ "КорСубконтоНУ2,"          // - значение субконто счета, на который списывается номенклатура
	+ "КорСубконтоНУ3,"          // - значение субконто счета, на который списывается номенклатура
	+ "МОЛ,"
	+ "ПодразделениеОрганизации"
	;

	ОбщегоНазначенияБКВызовСервера.ДобавитьКолонкуВТаблицуЗначений(ТаблицаТовары, "МОЛ",                      Справочники.ФизическиеЛица.ПустаяСсылка());   	
	ОбщегоНазначенияБКВызовСервера.ДобавитьКолонкуВТаблицуЗначений(ТаблицаТовары, "ПодразделениеОрганизации", Справочники.ПодразделенияОрганизаций.ПустаяСсылка());  
	
	Параметры.Вставить("ТаблицаТовары",
		ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаТовары, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Регистратор,"   // <ДокументСсылка.*> - документ-регистратор движений
	+ "Период,"        // <Дата> - период движений - дата документа
	+ "Организация,"   // <СправочникСсылка.Организации>
	+ "СтруктурноеПодразделение," // <Ссылка на справочник подразделений>
	+ "КорСтруктурноеПодразделение," // <Ссылка на справочник подразделений>
	+ "ВалютаВзаиморасчетов," // <Ссылка на справочник Валюты>
	+ "Контрагент,"    // <СправочникСсылка.Контрагенты>
	+ "Содержание,"    // <Строка,150>
	+ "НеобходимостьОтраженияВНУ,"   // <Булево>
	+ "ВидУчетаНУ";     // <СправочникСсылка.ВидыУчетаНУ>

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Процедура СписатьОстаткиТоваров(ТаблицаСписаниеПоОстаткам, ТаблицаОстатки, ТаблицаСписанныеТовары,// СпособОценкиМПЗПоСредней,	КонтролироватьОстаток,
	Реквизиты, Отказ, ВыводитьСообщения = Истина, КонтролироватьОстаток)

	ПустойСклад = Справочники.Склады.ПустаяСсылка();
	
	Для каждого СтрокаДокумента Из ТаблицаСписаниеПоОстаткам Цикл
		
		КоличествоОсталосьПогасить = СтрокаДокумента.Количество;
				
		Если ТаблицаОстатки.Количество() <> 0 Тогда
		
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("Номенклатура", СтрокаДокумента.Номенклатура);
			ПараметрыОтбора.Вставить("СчетУчетаБУ", СтрокаДокумента.СчетУчетаБУ);
			
			Если ЗначениеЗаполнено(СтрокаДокумента.ДокументОприходования) Тогда
				Если ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.НаСчетеВедетсяПартионныйУчет(СтрокаДокумента.СчетУчетаБУ) Тогда
					ПараметрыОтбора.Вставить("ДокументОприходования", СтрокаДокумента.ДокументОприходования);
				КонецЕсли;
			КонецЕсли;
			
			ПартииОстатков = ТаблицаОстатки.Скопировать(ПараметрыОтбора);
			
			Если  УправлениеЗапасамиПовтИсп.ПолучитьСтратегиюСписанияСчета(СтрокаДокумента.СчетУчетаБУ) = Перечисления.СпособыОценки.ЛИФО Тогда
				ПартииОстатков.Сортировать("ДокументОприходованияДата Убыв, ДокументОприходования Убыв", Новый СравнениеЗначений);
			Иначе
				ПартииОстатков.Сортировать("ДокументОприходованияДата, ДокументОприходования ", Новый СравнениеЗначений);
			КонецЕсли;
			
			Для каждого СтрокаПартии Из ПартииОстатков Цикл
				
				Если КоличествоОсталосьПогасить <= 0 Тогда
					Прервать;
				КонецЕсли;
				
				Если СтрокаПартии.КоличествоПоСкладу <= 0
					ИЛИ СтрокаПартии.Количество <= 0 Тогда
					Продолжить;
				КонецЕсли;
				
				Если ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ВедетсяУчетПоСкладам(СтрокаДокумента.СчетУчетаБУ) Тогда
					Если СтрокаПартии.Склад <> СтрокаДокумента.Склад
						И НЕ СтрокаПартии.Склад = ПустойСклад Тогда // пустые склады могут остаться со времени, когда не было учета по складам
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				
				Количество = Мин(СтрокаПартии.КоличествоПоСкладу, КоличествоОсталосьПогасить);
				
				Стоимость = Окр(СтрокаПартии.Стоимость * Количество / СтрокаПартии.Количество, 2, 1);
				
				Если СтрокаПартии.Стоимость < 0  И ВыводитьСообщения Тогда
					
					Если ЗначениеЗаполнено(СтрокаПартии.ДокументОприходования) Тогда
						ТекстОшибки = НСтр("ru = 'Бух.учет. Строка: %1. На счете учете %2, по товару %3, на складе %4, по партии %5 обнаружен отрицательный суммовой остаток %6.
						|Списание по партии не выполнено!'");
					Иначе
						ТекстОшибки = НСтр("ru = 'Бух.учет. Строка: %1. На счете учете %2, по товару %3, на складе %4 обнаружен отрицательный суммовой остаток %6.
						|Списание не выполнено!'");
					КонецЕсли;
					
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, СтрокаДокумента.НомерСтроки, СтрокаДокумента.СчетУчетаБУ, СтрокаДокумента.Номенклатура,
					СтрокаДокумента.Склад, ?(ЗначениеЗаполнено(СтрокаПартии.ДокументОприходования), СтрокаПартии.ДокументОприходования,""), СтрокаПартии.Стоимость);
					
					ПолеНоменклатура = СтрокаДокумента.ИмяСписка + "[" + Формат(СтрокаДокумента.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].Номенклатура";
					
					ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, Реквизиты.Регистратор, ПолеНоменклатура, "Объект");
					Продолжить;
				КонецЕсли;
				КоличествоОсталосьПогасить = КоличествоОсталосьПогасить - Количество;
				
				СтрокаТаблицыОстатки = ТаблицаОстатки.Найти(СтрокаПартии.НомерСтроки, "НомерСтроки");
				СтрокаТаблицыОстатки.Количество         = СтрокаТаблицыОстатки.Количество - Количество;
				СтрокаТаблицыОстатки.Стоимость          = СтрокаТаблицыОстатки.Стоимость - Стоимость;
				СтрокаТаблицыОстатки.КоличествоПоСкладу = СтрокаТаблицыОстатки.КоличествоПоСкладу - Количество;
				
				СписаннаяПартия = ТаблицаСписанныеТовары.Добавить();
				ЗаполнитьЗначенияСвойств(СписаннаяПартия, СтрокаДокумента);
				СписаннаяПартия.СтруктурноеПодразделение	= СтрокаПартии.СтруктурноеПодразделение;
				СписаннаяПартия.КорСтруктурноеПодразделение	= Реквизиты.КорСтруктурноеПодразделение;
				СписаннаяПартия.Партия              		= СтрокаПартии.ДокументОприходования;
				СписаннаяПартия.Склад               		= СтрокаПартии.Склад;
				СписаннаяПартия.Количество          		= Количество;
				
				СписаннаяПартия.СуммаСписания       		= Стоимость;
				
				СписаннаяПартия.ВалютаВзаиморасчетов		= Реквизиты.ВалютаВзаиморасчетов;
				Если Реквизиты.ВалютаВзаиморасчетов = ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета() Тогда
					СписаннаяПартия.СуммаСписанияВал       	= Стоимость;
				Иначе 
					СписаннаяПартия.СуммаСписанияВал       	= ?(СтрокаДокумента.Сумма = 0, Стоимость, Стоимость * СтрокаДокумента.СуммаВал / СтрокаДокумента.Сумма);
				КонецЕсли;
				
				СписаннаяПартия.ОтражатьВБухгалтерскомУчете = Истина;
				
			КонецЦикла;
		КонецЕсли;
		
		// Несписанное количество добавим отдельной строкой в таблицу списанных партий.
		Если КоличествоОсталосьПогасить > 0  Тогда
			
			СписаннаяПартия                  = ТаблицаСписанныеТовары.Добавить();
			ЗаполнитьЗначенияСвойств(СписаннаяПартия, СтрокаДокумента);
			СписаннаяПартия.СчетУчетаБУ    	 = СтрокаДокумента.СчетУчетаБУ;
			СписаннаяПартия.СтруктурноеПодразделение 	= Реквизиты.СтруктурноеПодразделение;
			СписаннаяПартия.КорСтруктурноеПодразделение	= Реквизиты.КорСтруктурноеПодразделение;
			СписаннаяПартия.ВалютаВзаиморасчетов		= Реквизиты.ВалютаВзаиморасчетов;
			СписаннаяПартия.Количество	     			= КоличествоОсталосьПогасить;			
			//Если контролируем остаток, то несписанное количество не нужно отражать
			СписаннаяПартия.ОтражатьВБухгалтерскомУчете = НЕ КонтролироватьОстаток;						
		КонецЕсли;
		
		Если КоличествоОсталосьПогасить > 0 И ВыводитьСообщения Тогда
			
			Если ЗначениеЗаполнено(Реквизиты.СтруктурноеПодразделение) Тогда
				ТекстОшибки = НСтр("ru = 'Бух.учет. Строка: %1. Не списано %2 %3 товара <%4>, счет учета %5, структурное подразделение %6, склад %7'");
			Иначе
				ТекстОшибки = НСтр("ru = 'Бух.учет. Строка: %1. Не списано %2 %3 товара <%4>, счет учета %5, склад %7'");
			КонецЕсли;
			
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, СтрокаДокумента.НомерСтроки, КоличествоОсталосьПогасить, СтрокаДокумента.Номенклатура.БазоваяЕдиницаИзмерения,
				СтрокаДокумента.Номенклатура, СтрокаДокумента.СчетУчетаБУ, Реквизиты.СтруктурноеПодразделение, СтрокаДокумента.Склад);
			ПолеКоличество	= СтрокаДокумента.ИмяСписка + "[" + Формат(СтрокаДокумента.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].Количество";
			
			Если НЕ КонтролироватьОстаток Тогда
				
				Если ЗначениеЗаполнено(Реквизиты.СтруктурноеПодразделение) Тогда
					ТекстОшибки = НСтр("ru = 'Бух.учет. Строка: %1. Не найдено %2 %3 товара <%4>, счет учета %5, структурное подразделение %6, склад %7.
					|%2 %3 товара <%4> отражено как отрицательное списание. В конце месяце рекомендуется перепровести документы для получения корректного финансового результата'");
				Иначе
					ТекстОшибки = НСтр("ru = 'Бух.учет. Строка: %1. Не найдено %2 %3 товара <%4>, счет учета %5, склад %7.
					|%2 %3 товара <%4> отражено как отрицательное списание. В конце месяце рекомендуется перепровести документы для получения корректного финансового результата'");
				КонецЕсли;
				
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, СтрокаДокумента.НомерСтроки, КоличествоОсталосьПогасить, СтрокаДокумента.Номенклатура.БазоваяЕдиницаИзмерения,
					СтрокаДокумента.Номенклатура, СтрокаДокумента.СчетУчетаБУ, Реквизиты.СтруктурноеПодразделение, СтрокаДокумента.Склад);
				
				ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, , , "Объект", Отказ);
				Отказ = Ложь;
			Иначе
				ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, Реквизиты.Регистратор, ПолеКоличество, "Объект", Отказ);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СписатьОстаткиТоваровНУ(ТаблицаСписаниеПоОстаткам, ТаблицаОстатки, ТаблицаСписанныеТовары,// СпособОценкиМПЗПоСредней,	КонтролироватьОстаток,
	Реквизиты, Отказ, ВыводитьСообщения = Истина, КонтролироватьОстаток)
	
	ТаблицаСписанныхТоваровБУ = ТаблицаСписанныеТовары.Скопировать();
	             	
	ПустойСклад = Справочники.Склады.ПустаяСсылка();
	
	Если НЕ Реквизиты.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль Тогда		
		Для Каждого СтрокаДокумента Из ТаблицаСписанныхТоваровБУ Цикл			
			СписаннаяПартия = ТаблицаСписанныеТовары.Добавить();
			ЗаполнитьЗначенияСвойств(СписаннаяПартия, СтрокаДокумента);
			СписаннаяПартия.СуммаСписанияНУ    		 	= СтрокаДокумента.СуммаСписания;		
			СписаннаяПартия.СуммаСписания    		 	= 0;		
			СписаннаяПартия.ОтражатьВНалоговомУчете  	= Истина;                       
			СписаннаяПартия.ОтражатьВБухгалтерскомУчете = Ложь;                       			
		КонецЦикла;		
		Возврат;		
	КонецЕсли;
	
	ТаблицаСписанныхТоваровБУ.Свернуть("Номенклатура, Склад, СчетУчетаБУ, СчетУчетаНУ, КорСчетСписанияБУ, КорСубконтоБУ1, КорСубконтоБУ2, КорСубконтоБУ3, НомерСтроки","Количество,СуммаСписания");
	
	Для Каждого СтрокаДокумента Из ТаблицаСписаниеПоОстаткам Цикл
		
		КоличествоОсталосьПогаситьНУ = СтрокаДокумента.Количество;
		
		Если ТаблицаОстатки.Количество() <> 0 Тогда
			
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("Номенклатура", СтрокаДокумента.Номенклатура);
			ПараметрыОтбора.Вставить("СчетУчетаНУ", СтрокаДокумента.СчетУчетаНУ);
			
			ПартииОстатков = ТаблицаОстатки.Скопировать(ПараметрыОтбора);
			
			//отбор в списании БУ
			ПараметрыОтбора.Вставить("СчетУчетаБУ", СтрокаДокумента.СчетУчетаБУ);
			ПараметрыОтбора.Вставить("НомерСтроки", СтрокаДокумента.НомерСтроки);

			ПараметрыОтбора.Вставить("КорСчетСписанияБУ", 	СтрокаДокумента.КорСчетСписанияБУ);
			ПараметрыОтбора.Вставить("КорСубконтоБУ1", 		СтрокаДокумента.КорСубконтоБУ1);
			ПараметрыОтбора.Вставить("КорСубконтоБУ2", 		СтрокаДокумента.КорСубконтоБУ2);
			ПараметрыОтбора.Вставить("КорСубконтоБУ3", 		СтрокаДокумента.КорСубконтоБУ3);
			
			Если  ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ВедетсяУчетПоСкладам(СтрокаДокумента.СчетУчетаБУ) Тогда
				ПараметрыОтбора.Вставить("Склад", СтрокаДокумента.Склад);
			КонецЕсли;
						
			ТаблицаСписанныеТоварыБУ = ТаблицаСписанныхТоваровБУ.Скопировать(ПараметрыОтбора);
			
			//при поиске хоть одна строка но должна быть в БУ
			Если ТаблицаСписанныеТоварыБУ.Количество() > 0 Тогда
				СтоимостьБУ =  ТаблицаСписанныеТоварыБУ[0].СуммаСписания;
			КонецЕсли;
			
			Для каждого СтрокаПартии Из ПартииОстатков Цикл
				
				Если КоличествоОсталосьПогаситьНУ <= 0 Тогда
					Прервать;
				КонецЕсли;
				
				Если СтрокаПартии.КоличествоПоСкладу <= 0
					ИЛИ СтрокаПартии.Количество <= 0 Тогда
					Продолжить;
				КонецЕсли;
				
				Если ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ВедетсяУчетПоСкладам(СтрокаДокумента.СчетУчетаНУ) Тогда
					Если СтрокаПартии.Склад <> СтрокаДокумента.Склад
						И НЕ СтрокаПартии.Склад = ПустойСклад Тогда // пустые склады могут остаться со времени, когда не было учета по складам
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				
				Количество = Мин(СтрокаПартии.КоличествоПоСкладу, КоличествоОсталосьПогаситьНУ);
				
				СтоимостьНУ	= ?(СтрокаПартии.КоличествоПоСкладу =  КоличествоОсталосьПогаситьНУ, СтрокаПартии.Стоимость, Окр(СтрокаПартии.Стоимость * Количество / СтрокаПартии.Количество, 2, 1)); 				    						
								
				Если  СтрокаПартии.Стоимость < 0  И ВыводитьСообщения Тогда
					
					ТекстОшибки = НСтр("ru = 'Нал.учет. Строка: %1. На счете учете %2, по товару %3, на складе %4,
					               |обнаружен отрицательный суммовой остаток %5. Списание не выполнено!'");
								 
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, СтрокаДокумента.НомерСтроки, СтрокаДокумента.СчетУчетаБУ, СтрокаДокумента.Номенклатура,
								  СтрокаДокумента.Склад, СтрокаПартии.Стоимость);
				
					ПолеНоменклатура= СтрокаДокумента.ИмяСписка + "[" + Формат(СтрокаДокумента.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].Номенклатура";		
				
					ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, Реквизиты.Регистратор, ПолеНоменклатура, "Объект", );
					Продолжить;
				КонецЕсли;

				//В случае, если списывается последняя единица товара по виду учета – в проводке отражается вся сумма остатка. 
				//В остальных случаях списывается  сумма в пределах остатка на НУ.
				//Разница с суммой БУ образует ВР.
				
				Если СтрокаПартии.КоличествоПоСкладу >= КоличествоОсталосьПогаситьНУ Тогда
					КоэффСписания = КоличествоОсталосьПогаситьНУ / СтрокаПартии.КоличествоПоСкладу;
				Иначе
					КоэффСписания = 1;
				КонецЕсли;
				
				Если (СтрокаПартии.Стоимость - СтоимостьБУ)>= 0 И  КоэффСписания <> 1 Тогда
					СтоимостьНУ = СтоимостьБУ;
					СтоимостьВР = 0;
					//СтрокаПартии.Стоимость  = СтрокаПартии.Стоимость - СтоимостьБУ;
				Иначе
					СтоимостьНУ = СтоимостьНУ;
					СтоимостьВР = СтоимостьБУ - СтоимостьНУ;
					//	СтрокаПартии.Стоимость  = СтрокаПартии.Стоимость - СтоимостьНУ;
				КонецЕсли;
				
				КоличествоОсталосьПогаситьНУ = КоличествоОсталосьПогаситьНУ - Количество;
				
				СтрокаТаблицыОстатки = ТаблицаОстатки.Найти(СтрокаПартии.НомерСтроки, "НомерСтроки");								
				
				СтрокаТаблицыОстатки.Количество         = СтрокаТаблицыОстатки.Количество - Количество;
				СтрокаТаблицыОстатки.Стоимость          = СтрокаТаблицыОстатки.Стоимость - СтоимостьНУ;
				СтрокаТаблицыОстатки.КоличествоПоСкладу = СтрокаТаблицыОстатки.КоличествоПоСкладу - Количество;

				
				//Могли не списаться остатки по БУ, значит документ не должен делать движений по НУ
				Если Не Отказ Тогда
					СписаннаяПартия = ТаблицаСписанныеТовары.Добавить();
					ЗаполнитьЗначенияСвойств(СписаннаяПартия, СтрокаДокумента);
					СписаннаяПартия.СтруктурноеПодразделение 	= СтрокаПартии.СтруктурноеПодразделение;
					СписаннаяПартия.КорСтруктурноеПодразделение	= Реквизиты.КорСтруктурноеПодразделение;
					СписаннаяПартия.Партия              	 	= СтрокаПартии.ДокументОприходования;
					СписаннаяПартия.Склад              		 	= СтрокаПартии.Склад;
					СписаннаяПартия.Количество         		 	= Количество;
					СписаннаяПартия.СуммаСписанияНУ    		 	= СтоимостьНУ;
					СписаннаяПартия.СуммаСписанияВР    		 	= СтоимостьВР;
					
					СписаннаяПартия.ОтражатьВНалоговомУчете  	= Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		// Несписанное количество добавим отдельной строкой в таблицу списанных партий.
		Если КоличествоОсталосьПогаситьНУ > 0  ИЛИ Отказ Тогда
			
			СписаннаяПартия               = ТаблицаСписанныеТовары.Добавить();
			ЗаполнитьЗначенияСвойств(СписаннаяПартия, СтрокаДокумента);
			СписаннаяПартия.СчетУчетаБУ    				= СтрокаДокумента.СчетУчетаБУ;
			СписаннаяПартия.СчетУчетаНУ    				= СтрокаДокумента.СчетУчетаНУ;
			СписаннаяПартия.СтруктурноеПодразделение 	= Реквизиты.СтруктурноеПодразделение;
			СписаннаяПартия.КорСтруктурноеПодразделение	= Реквизиты.КорСтруктурноеПодразделение;
			СписаннаяПартия.Количество   			 	= КоличествоОсталосьПогаситьНУ;
			СписаннаяПартия.ОтражатьВНалоговомУчете  	= НЕ КонтролироватьОстаток;
			
		КонецЕсли;
		
		Если КоличествоОсталосьПогаситьНУ > 0 И ВыводитьСообщения Тогда
			
			Если ЗначениеЗаполнено(Реквизиты.СтруктурноеПодразделение) тогда
				ТекстОшибки = НСтр("ru = 'Нал.учет. Строка: %1. Не списано %2 %3 товара %4, счет учета %5, вид учета %6, структурное подразделение %7, склад %8'");
			Иначе
				ТекстОшибки = НСтр("ru = 'Нал.учет. Строка: %1. Не списано %2 %3 товара %4, счет учета %5, вид учета %6, склад %8'");
			КонецЕсли;
			
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, СтрокаДокумента.НомерСтроки, КоличествоОсталосьПогаситьНУ, СтрокаДокумента.Номенклатура.БазоваяЕдиницаИзмерения,
				СтрокаДокумента.Номенклатура, СтрокаДокумента.СчетУчетаНУ, Реквизиты.ВидУчетаНУ, Реквизиты.СтруктурноеПодразделение, СтрокаДокумента.Склад);
				
			ПолеКоличество	= СтрокаДокумента.ИмяСписка + "[" + Формат(СтрокаДокумента.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].Количество";
			
			Если НЕ КонтролироватьОстаток Тогда
				
				Если ЗначениеЗаполнено(Реквизиты.СтруктурноеПодразделение) Тогда
					ТекстОшибки = НСтр("ru = 'Нал.учет. Строка: %1. Не найдено %2 %3 товара <%4>, счет учета %5, вид учета %6, структурное подразделение %7, склад %8.
					|%2 %3 товара <%4> отражено как отрицательное списание. В конце месяце рекомендуется перепровести документы для получения корректного финансового результата'");
				Иначе
					ТекстОшибки = НСтр("ru = 'Нал.учет. Строка: %1. Не найдено %2 %3 товара <%4>, счет учета %5, вид учета %6, склад %8.
					|%2 %3 товара <%4> отражено как отрицательное списание. В конце месяце рекомендуется перепровести документы для получения корректного финансового результата'");
				КонецЕсли;
				
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, СтрокаДокумента.НомерСтроки, КоличествоОсталосьПогаситьНУ, СтрокаДокумента.Номенклатура.БазоваяЕдиницаИзмерения,
					СтрокаДокумента.Номенклатура, СтрокаДокумента.СчетУчетаНУ, Реквизиты.ВидУчетаНУ, Реквизиты.СтруктурноеПодразделение, СтрокаДокумента.Склад);
				
				ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, , , "Объект", Отказ);
				Отказ = Ложь;
			Иначе
				ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, Реквизиты.Регистратор, ПолеКоличество, "Объект", Отказ);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// СПИСАНИЕ ТОВАРОВ

Функция ПодготовитьПараметрыСписаниеТоваров(ТаблицаСписанныеТовары, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаСписанныеТовары

	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"        // <Строка,0> - имя списка в документе
	+ "СинонимСписка,"    // <Строка,0> - синоним списка
	+ "Период,"           // <Дата> - дата списания
	+ "НомерСтроки,"      // <Число> - номер строки в списке
	+ "СчетУчетаБУ,"        // <ПланСчетовСсылка.Типовой> - счет учета, с которого списывается номенклатура
	+ "СчетУчетаНУ,"        // <ПланСчетовСсылка.Налоговый> - счет учета, с которого списывается номенклатура
	+ "Номенклатура,"     // <СправочникСсылка.Номенклатура> - списываемая номенклатура
	+ "Склад,"            // <СправочникСсылка.Склад> - склад, с которого списывается номенклатура
	+ "Партия,"           // <ДокументСсылка.*> - документ поступления номенклатуры (партия)
	+ "Себестоимость,"    // <Число,15,2> - сумма списываемой номенклатуры, указанная в документе списания
	+ "Количество,"       // <Число,15,3> - количество списываемой номенклатуры
	+ "КорСчетСписанияБУ,"  // <ПланСчетовСсылка.Типовой> - счет учета, на который списывается номенклатура
	+ "ВидКорСубконтоБУ1,"  // <Число/Строка/ПланВидовХарактеристикСсылка.ВидыСубконтоТиповые> - вид субконто счета, на который списывается номенклатура
	+ "ВидКорСубконтоБУ2,"  // <Число/Строка/ПланВидовХарактеристикСсылка.ВидыСубконтоТиповые> - вид субконто счета, на который списывается номенклатура
	+ "ВидКорСубконтоБУ3,"  // <Число/Строка/ПланВидовХарактеристикСсылка.ВидыСубконтоТиповые> - вид субконто счета, на который списывается номенклатура
	+ "КорСубконтоБУ1,"     // - значение субконто счета, на который списывается номенклатура
	+ "КорСубконтоБУ2,"     // - значение субконто счета, на который списывается номенклатура
	+ "КорСубконтоБУ3,"     // - значение субконто счета, на который списывается номенклатура
	+ "КорСчетСписанияНУ,"  // <ПланСчетовСсылка.Налоговый> - счет учета, на который списывается номенклатура
	+ "ВидКорСубконтоНУ1,"  // <Число/Строка/ПланВидовХарактеристикСсылка.ВидыСубконтоТиповые> - вид субконто счета, на который списывается номенклатура
	+ "ВидКорСубконтоНУ2,"  // <Число/Строка/ПланВидовХарактеристикСсылка.ВидыСубконтоТиповые> - вид субконто счета, на который списывается номенклатура
	+ "ВидКорСубконтоНУ3,"  // <Число/Строка/ПланВидовХарактеристикСсылка.ВидыСубконтоТиповые> - вид субконто счета, на который списывается номенклатура
	+ "КорСубконтоНУ1,"     // - значение субконто счета, на который списывается номенклатура
	+ "КорСубконтоНУ2,"     // - значение субконто счета, на который списывается номенклатура
	+ "КорСубконтоНУ3,"     // - значение субконто счета, на который списывается номенклатура
	+ "КорСтруктурноеПодразделение," // <Ссылка на справочник подразделений> - подразделение, в которое списывается номенклатура
	+ "СтруктурноеПодразделение,"    // <Ссылка на справочник подразделений> - подразделение, из которого списывается номенклатура
	+ "СуммаСписания,"    // <Число,15,2> - сумма списываемой номенклатуры в БУ, определенная по данным остатков
	+ "СуммаСписанияНУ,"    // <Число,15,2> - сумма списываемой номенклатуры в НУ по виду учета  документа, определенная по данным остатков
	+ "СуммаСписанияВР,"    // <Число,15,2> - сумма списываемой номенклатуры по виду учета ВР, определенная по данным остатков
	+ "ОтражатьВБухгалтерскомУчете," //<Булево>  - признак отнесения записи списания к бухгалтерскому учету
    + "ОтражатьВНалоговомУчете," //<Булево>    -   признак отнесения записи списания к налоговому учету
	+ "ВалютаВзаиморасчетов," // <СправочникСсылка.Валюты> - валюта при списании в корреспонденции с валютным счетом
	+ "СуммаСписанияВал," // <Число, 15, 2> - валютная сумма.
	+ "МОЛ,"
	+ "ПодразделениеОрганизации,"
	+ "Содержание"
	;
	
	ОбщегоНазначенияБКВызовСервера.ДобавитьКолонкуВТаблицуЗначений(ТаблицаСписанныеТовары, "МОЛ",                      Справочники.ФизическиеЛица.ПустаяСсылка());
	ОбщегоНазначенияБКВызовСервера.ДобавитьКолонкуВТаблицуЗначений(ТаблицаСписанныеТовары, "ПодразделениеОрганизации", Справочники.ПодразделенияОрганизаций.ПустаяСсылка());
	ОбщегоНазначенияБКВызовСервера.ДобавитьКолонкуВТаблицуЗначений(ТаблицаСписанныеТовары, "Содержание",               "");
	
	Параметры.Вставить("ТаблицаСписанныеТовары",
		ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаСписанныеТовары, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Регистратор," // <ДокументСсылка.*> - документ-регистратор движений
	+ "Период,"      // <Дата> - период движений - дата документа
	+ "Организация," // <СправочникСсылка.Организации>
	+ "Контрагент,"  // <СправочникСсылка.Контрагенты>
	+ "Содержание,"  // <Строка,150>
	+ "ВидУчетаНУ" ;
	
	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

// КОМПЛЕКТАЦИЯ

Функция ПодготовитьПараметрыТаблицыКомплектующихКомплектация(ТаблицаСписанныеТовары, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаСписанныеТовары

	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"        // <Строка,0> - имя списка в документе
	+ "СинонимСписка,"    // <Строка,0> - синоним списка
	+ "НомерСтроки,"      // <Число> - номер строки в списке
	+ "СчетУчетаБУ,"        // <ПланСчетовСсылка.Типовой> - счет учета, с которого списывается номенклатура
	+ "Номенклатура,"     // <СправочникСсылка.Номенклатура> - списываемая номенклатура
	+ "Склад,"            // <СправочникСсылка.Склад> - склад, с которого списывается номенклатура
	+ "Партия,"           // <ДокументСсылка.*> - документ поступления номенклатуры (партия)
	+ "ВалютаВзаиморасчетов,"// <СправочникСсылка.Валюты> - валюта взаиморасчетов (тенге)
    //+ "ДокументОприходования," // <ДокументСсылка.*> - документ поступления номенклатуры (партия), указанный в документе списания
	+ "Себестоимость,"         // <Число,15,2> - сумма списываемой номенклатуры, указанная в документе списания
	+ "Количество,"       // <Число,15,3> - количество списываемой номенклатуры
	+ "КорСчетСписанияБУ,"  // <ПланСчетовСсылка.Хозрасчетный> - счет учета, на который списывается номенклатура
	+ "ВидКорСубконтоБУ1,"  // <Число/Строка/ПланВидовХарактеристикСсылка.ВидыСубконтоТиповые> - вид субконто счета, на который списывается номенклатура
	+ "ВидКорСубконтоБУ2,"  // <Число/Строка/ПланВидовХарактеристикСсылка.ВидыСубконтоТиповые> - вид субконто счета, на который списывается номенклатура
	+ "ВидКорСубконтоБУ3,"  // <Число/Строка/ПланВидовХарактеристикСсылка.ВидыСубконтоТиповые> - вид субконто счета, на который списывается номенклатура
	+ "КорСубконтоБУ1,"     // - значение субконто счета, на который списывается номенклатура
	+ "КорСубконтоБУ2,"     // - значение субконто счета, на который списывается номенклатура
	+ "КорСубконтоБУ3,"     // - значение субконто счета, на который списывается номенклатура
	+ "СтруктурноеПодразделение," // <Ссылка на справочник подразделений> - структурное подразделение, в которое списывается номенклатура
	+ "КорСтруктурноеПодразделение,"    // <Ссылка на справочник подразделений> - структурное подразделение, из которого списывается номенклатура
	+ "СчетУчетаНУ,"  			// <ПланСчетовСсылка.Типовой> - счет учета (НУ), на который списывается номенклатура
	+ "КорСчетСписанияНУ,"  // <ПланСчетовСсылка.Типовой> - счет учета, на который списывается номенклатура
	+ "ВидКорСубконтоНУ1,"  // <Число/Строка/ПланВидовХарактеристикСсылка.ВидыСубконтоТиповые> - вид субконто счета, на который списывается номенклатура
	+ "ВидКорСубконтоНУ2,"  // <Число/Строка/ПланВидовХарактеристикСсылка.ВидыСубконтоТиповые> - вид субконто счета, на который списывается номенклатура
	+ "ВидКорСубконтоНУ3,"  // <Число/Строка/ПланВидовХарактеристикСсылка.ВидыСубконтоТиповые> - вид субконто счета, на который списывается номенклатура
	+ "КорСубконтоНУ1,"     // - значение субконто счета, на который списывается номенклатура
	+ "КорСубконтоНУ2,"     // - значение субконто счета, на который списывается номенклатура
	+ "КорСубконтоНУ3,"     // - значение субконто счета, на который списывается номенклатура
	+ "ОтражатьВБухгалтерскомУчете,"  // 
	+ "ОтражатьВНалоговомУчете,"     // 
	+ "СуммаСписания,"    // <Число,15,2> - сумма списываемой номенклатуры, определенная по данным остатков
	+ "СуммаСписанияВал," // <Число,15,2> - сумма списываемой номенклатуры, определенная по данным остатков
	+ "СуммаСписанияНУ,"  // <Число,15,2> - сумма списываемой номенклатуры (НУ), определенная по данным остатков
	+ "СуммаСписанияВР";  // <Число,15,2> - сумма временных разниц  в стоимости списываемой номенклатуры, определенной по данным остатков
	
	//При разукомплектации не добавляются данные колонки
	Если  ТаблицаСписанныеТовары.Колонки.Найти("ОтражатьВБухгалтерскомУчете") = Неопределено Тогда
		ТаблицаСписанныеТовары.Колонки.Добавить("ОтражатьВБухгалтерскомУчете", Новый ОписаниеТипов("Булево"));
		ТаблицаСписанныеТовары.ЗаполнитьЗначения(Истина, "ОтражатьВБухгалтерскомУчете");
	КонецЕсли;  
	
	//При разукомплектации не добавляются данные колонки
	Если  ТаблицаСписанныеТовары.Колонки.Найти("ОтражатьВНалоговомУчете") = Неопределено Тогда
		ТаблицаСписанныеТовары.Колонки.Добавить("ОтражатьВНалоговомУчете",Новый ОписаниеТипов("Булево") ); 
		ТаблицаСписанныеТовары.ЗаполнитьЗначения(ТаблицаРеквизиты[0].НеобходимостьОтраженияВНУ, "ОтражатьВНалоговомУчете");
	КонецЕсли;  

	Параметры.Вставить("ТаблицаСписанныеТовары",
		ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаСписанныеТовары, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "КоличествоКомплектов,"           // <Число, 15, 3> - количество комплектов, которое должно получиться в результате
	+ "НеобходимостьОтраженияВНУ"; 		// 

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Функция ПодготовитьПараметрыТаблицыКомплектующихРазукомплектация(ТаблицаТовары, ТаблицаСписанныеТовары, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаТовары

	СписокОбязательныхКолонок = ""
	+ "Количество,"               // <Число,15,3> - количество исходных комплектов
	+ "КоличествоКомплектующих";  // <Число,15,2> - количество комплектующих получаемых в результате разукомплектации

	Параметры.Вставить("ТаблицаТовары",
		ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаТовары, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.ТаблицаСписанныеТовары

	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"        // <Строка,0> - имя списка в документе
	+ "СинонимСписка,"    // <Строка,0> - синоним списка
	+ "НомерСтроки,"      // <Число> - номер строки в списке
	+ "СчетУчетаБУ,"        // <ПланСчетовСсылка.Типовой> - счет учета, с которого списывается номенклатура
	+ "Номенклатура,"     // <СправочникСсылка.Номенклатура> - списываемая номенклатура
	+ "Склад,"            // <СправочникСсылка.Склад> - склад, с которого списывается номенклатура
	+ "Партия,"           // <ДокументСсылка.*> - документ поступления номенклатуры (партия)
	+ "ВалютаВзаиморасчетов,"// <СправочникСсылка.Валюты> - валюта взаиморасчетов (тенге)
   // + "ДокументОприходования," // <ДокументСсылка.*> - документ поступления номенклатуры (партия), указанный в документе списания
	+ "Себестоимость,"         // <Число,15,2> - сумма списываемой номенклатуры, указанная в документе списания
	+ "Количество,"       // <Число,15,3> - количество списываемой номенклатуры
	+ "КорСчетСписанияБУ,"  // <ПланСчетовСсылка.Хозрасчетный> - счет учета, на который списывается номенклатура
	+ "ВидКорСубконтоБУ1,"  // <Число/Строка/ПланВидовХарактеристикСсылка.ВидыСубконтоТиповые> - вид субконто счета, на который списывается номенклатура
	+ "ВидКорСубконтоБУ2,"  // <Число/Строка/ПланВидовХарактеристикСсылка.ВидыСубконтоТиповые> - вид субконто счета, на который списывается номенклатура
	+ "ВидКорСубконтоБУ3,"  // <Число/Строка/ПланВидовХарактеристикСсылка.ВидыСубконтоТиповые> - вид субконто счета, на который списывается номенклатура
	+ "КорСубконтоБУ1,"     // - значение субконто счета, на который списывается номенклатура
	+ "КорСубконтоБУ2,"     // - значение субконто счета, на который списывается номенклатура
	+ "КорСубконтоБУ3,"     // - значение субконто счета, на который списывается номенклатура
	+ "СтруктурноеПодразделение," // <Ссылка на справочник подразделений> - структурное подразделение, в которое списывается номенклатура
	+ "КорСтруктурноеПодразделение,"    // <Ссылка на справочник подразделений> - структурное подразделение, из которого списывается номенклатура
	+ "СчетУчетаНУ,"  			// <ПланСчетовСсылка.Типовой> - счет учета (НУ), на который списывается номенклатура
	+ "КорСчетСписанияНУ,"  // <ПланСчетовСсылка.Типовой> - счет учета, на который списывается номенклатура
	+ "ВидКорСубконтоНУ1,"  // <Число/Строка/ПланВидовХарактеристикСсылка.ВидыСубконтоТиповые> - вид субконто счета, на который списывается номенклатура
	+ "ВидКорСубконтоНУ2,"  // <Число/Строка/ПланВидовХарактеристикСсылка.ВидыСубконтоТиповые> - вид субконто счета, на который списывается номенклатура
	+ "ВидКорСубконтоНУ3,"  // <Число/Строка/ПланВидовХарактеристикСсылка.ВидыСубконтоТиповые> - вид субконто счета, на который списывается номенклатура
	+ "КорСубконтоНУ1,"     // - значение субконто счета, на который списывается номенклатура
	+ "КорСубконтоНУ2,"     // - значение субконто счета, на который списывается номенклатура
	+ "КорСубконтоНУ3,"     // - значение субконто счета, на который списывается номенклатура
	+ "ОтражатьВБухгалтерскомУчете," //<Булево>  - признак отнесения записи списания к бухгалтерскому учету
    + "ОтражатьВНалоговомУчете," //<Булево>    -   признак отнесения записи списания к налоговому учету
	+ "СуммаСписания,"    // <Число,15,2> - сумма списываемой номенклатуры, определенная по данным остатков
	+ "СуммаСписанияВал," // <Число,15,2> - сумма списываемой номенклатуры, определенная по данным остатков
	+ "СуммаСписанияНУ,"  // <Число,15,2> - сумма списываемой номенклатуры (НУ), определенная по данным остатков
	+ "СуммаСписанияВР";  // <Число,15,2> - сумма временных разниц  в стоимости списываемой номенклатуры, определенной по данным остатков

	//При разукомплектации не добавляются данные колонки
	Если  ТаблицаСписанныеТовары.Колонки.Найти("ОтражатьВБухгалтерскомУчете") = Неопределено Тогда
		ТаблицаСписанныеТовары.Колонки.Добавить("ОтражатьВБухгалтерскомУчете", Новый ОписаниеТипов("Булево"));
		ТаблицаСписанныеТовары.ЗаполнитьЗначения(Истина, "ОтражатьВБухгалтерскомУчете");
	КонецЕсли;  
	
	//При разукомплектации не добавляются данные колонки
	Если  ТаблицаСписанныеТовары.Колонки.Найти("ОтражатьВНалоговомУчете") = Неопределено Тогда
		ТаблицаСписанныеТовары.Колонки.Добавить("ОтражатьВНалоговомУчете",Новый ОписаниеТипов("Булево") ); 
		ТаблицаСписанныеТовары.ЗаполнитьЗначения(ТаблицаРеквизиты[0].НеобходимостьОтраженияВНУ, "ОтражатьВНалоговомУчете");
	КонецЕсли;  

	Параметры.Вставить("ТаблицаСписанныеТовары",
		ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаСписанныеТовары, СписокОбязательныхКолонок));
		
	СписокОбязательныхКолонок = ""
	+ "НеобходимостьОтраженияВНУ" ;
	
	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));


	Возврат Параметры;

КонецФункции

Функция ПодготовитьПараметрыКомплектация(ТаблицаКомплектующие, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаКомплектующие

	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"        // <Строка,0> - имя списка в документе
	+ "СинонимСписка,"    // <Строка,0> - синоним списка
	+ "НомерСтроки,"      // <Число> - номер строки в списке
	+ "СчетУчетаБУ,"        // <ПланСчетовСсылка.Типовой> - счет учета, с которого списывается номенклатура
	+ "Номенклатура,"     // <СправочникСсылка.Номенклатура> - списываемая номенклатура
	+ "Склад,"            // <СправочникСсылка.Склад> - склад, с которого списывается номенклатура
	+ "Партия,"           // <ДокументСсылка.*> - документ поступления номенклатуры (партия)
	+ "ВалютаВзаиморасчетов,"// <СправочникСсылка.Валюты> - валюта взаиморасчетов (тенге)
	+ "Себестоимость,"    // <Число,15,2> - сумма списываемой номенклатуры, указанная в документе списания
	+ "Количество,"       // <Число,15,3> - количество списываемой номенклатуры
	+ "КоличествоДт,"       // <Число,15,3> - количество списываемой номенклатуры
	+ "КорСчетСписанияБУ,"  // <ПланСчетовСсылка.Хозрасчетный> - счет учета, на который списывается номенклатура
	+ "ВидКорСубконтоБУ1,"  // <Число/Строка/ПланВидовХарактеристикСсылка.ВидыСубконтоТиповые> - вид субконто счета, на который списывается номенклатура
	+ "ВидКорСубконтоБУ2,"  // <Число/Строка/ПланВидовХарактеристикСсылка.ВидыСубконтоТиповые> - вид субконто счета, на который списывается номенклатура
	+ "ВидКорСубконтоБУ3,"  // <Число/Строка/ПланВидовХарактеристикСсылка.ВидыСубконтоТиповые> - вид субконто счета, на который списывается номенклатура
	+ "КорСубконтоБУ1,"     // - значение субконто счета, на который списывается номенклатура
	+ "КорСубконтоБУ2,"     // - значение субконто счета, на который списывается номенклатура
	+ "КорСубконтоБУ3,"     // - значение субконто счета, на который списывается номенклатура
	+ "СтруктурноеПодразделение," // <Ссылка на справочник подразделений> - структурное подразделение, в которое списывается номенклатура
	+ "КорСтруктурноеПодразделение,"    // <Ссылка на справочник подразделений> - структурное подразделение, из которого списывается номенклатура
	+ "СчетУчетаНУ,"  			// <ПланСчетовСсылка.Типовой> - счет учета (НУ), на который списывается номенклатура
	+ "КорСчетСписанияНУ,"  // <ПланСчетовСсылка.Типовой> - счет учета, на который списывается номенклатура
	+ "ВидКорСубконтоНУ1,"  // <Число/Строка/ПланВидовХарактеристикСсылка.ВидыСубконтоТиповые> - вид субконто счета, на который списывается номенклатура
	+ "ВидКорСубконтоНУ2,"  // <Число/Строка/ПланВидовХарактеристикСсылка.ВидыСубконтоТиповые> - вид субконто счета, на который списывается номенклатура
	+ "ВидКорСубконтоНУ3,"  // <Число/Строка/ПланВидовХарактеристикСсылка.ВидыСубконтоТиповые> - вид субконто счета, на который списывается номенклатура
	+ "КорСубконтоНУ1,"     // - значение субконто счета, на который списывается номенклатура
	+ "КорСубконтоНУ2,"     // - значение субконто счета, на который списывается номенклатура
	+ "КорСубконтоНУ3,"     // - значение субконто счета, на который списывается номенклатура
	+ "ОтражатьВБухгалтерскомУчете,"  // 
	+ "ОтражатьВНалоговомУчете,"     // 
	+ "СуммаСписания,"    // <Число,15,2> - сумма списываемой номенклатуры, определенная по данным остатков
	+ "СуммаСписанияВал," // <Число,15,2> - сумма списываемой номенклатуры, определенная по данным остатков
	+ "СуммаСписанияНУ,"  // <Число,15,2> - сумма списываемой номенклатуры (НУ), определенная по данным остатков
	+ "СуммаСписанияВР";  // <Число,15,2> - сумма временных разниц  в стоимости списываемой номенклатуры, определенной по данным остатков
	
	//При разукомплектации не добавляются данные колонки
	Если  ТаблицаКомплектующие.Колонки.Найти("ОтражатьВБухгалтерскомУчете") = Неопределено Тогда
		ТаблицаКомплектующие.Колонки.Добавить("ОтражатьВБухгалтерскомУчете", Новый ОписаниеТипов("Булево"));
		ТаблицаКомплектующие.ЗаполнитьЗначения(Истина, "ОтражатьВБухгалтерскомУчете");
	КонецЕсли;  
	
	//При разукомплектации не добавляются данные колонки
	Если  ТаблицаКомплектующие.Колонки.Найти("ОтражатьВНалоговомУчете") = Неопределено Тогда
		ТаблицаКомплектующие.Колонки.Добавить("ОтражатьВНалоговомУчете",Новый ОписаниеТипов("Булево") ); 
		ТаблицаКомплектующие.ЗаполнитьЗначения(ТаблицаРеквизиты[0].НеобходимостьОтраженияВНУ, "ОтражатьВНалоговомУчете");
	КонецЕсли;  

	Параметры.Вставить("ТаблицаКомплектующие",
		ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаКомплектующие, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"      // <Дата> - период движений - дата документа
	+ "Организация," // <СправочникСсылка.Организации>
	+ "Контрагент,"  // <СправочникСсылка.Контрагенты>
	+ "Содержание,"  // <Строка,150>
	+ "НеобходимостьОтраженияВНУ," // <Булево> - определяет необходимость отражения в НУ
	+ "ВидУчетаНУ";  //  <СправочникСсылка.ВидыУчетаНУ>

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

// ВОЗВРАТ ТОВАРОВ ОТ ПОКУПАТЕЛЯ

Функция ПодготовитьПараметрыТаблицыВозвращенныеСписанныеТовары(ТаблицаТовары, ТаблицаСчетаУчетаТоваров, ТаблицаСписокНоменклатуры, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаТовары

	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"        // <Строка,0> - имя списка в документе
	+ "СинонимСписка,"    // <Строка,0> - синоним списка
	+ "Период,"           // <Дата> - дата списания
	+ "НомерСтроки,"      // <Число> - номер строки в списке
	+ "СчетУчетаБУ,"      // <ПланСчетовСсылка.Типовой> - счет учета, с которого списывается номенклатура
	+ "СчетУчетаНУ,"      // <ПланСчетовСсылка.Налоговый> - счет учета, с которого списывается номенклатура
	+ "Номенклатура,"     // <СправочникСсылка.Номенклатура> - списываемая номенклатура
	+ "Склад,"            // <СправочникСсылка.Склад> - склад, с которого списывается номенклатура
	+ "Партия," // <ДокументСсылка.*> - документ поступления номенклатуры (партия)
	+ "Себестоимость,"    // <Число,15,2> - сумма списываемой номенклатуры, указанная в документе списания
	+ "Сумма,"            // <Число,15,2> - сумма списываемой номенклатуры, указанная в документе списания пересчитанная в валюту регл. учета
	+ "СуммаВал,"         // <Число,15,2> - сумма списываемой номенклатуры, указанная в документе списания пересчитанная в валюту взаиморасчетов
	+ "Количество,"       // <Число,15,3> - количество списываемой номенклатуры
	+ "КорСчетСписанияБУ,"// <ПланСчетовСсылка.Типовой> - счет учета, на который списывается номенклатура
	+ "ВидКорСубконтоБУ1,"// <Число/Строка/ПланВидовХарактеристикСсылка.ВидыСубконтоТиповые> - вид субконто счета, на который списывается номенклатура
	+ "ВидКорСубконтоБУ2,"// <Число/Строка/ПланВидовХарактеристикСсылка.ВидыСубконтоТиповые> - вид субконто счета, на который списывается номенклатура
	+ "ВидКорСубконтоБУ3,"// <Число/Строка/ПланВидовХарактеристикСсылка.ВидыСубконтоТиповые> - вид субконто счета, на который списывается номенклатура
	+ "КорСубконтоБУ1,"   // - значение субконто счета, на который списывается номенклатура
	+ "КорСубконтоБУ2,"   // - значение субконто счета, на который списывается номенклатура
	+ "КорСубконтоБУ3,"   // - значение субконто счета, на который списывается номенклатура
	+ "КорСчетСписанияНУ,"// <ПланСчетовСсылка.Типовой> - счет учета, на который списывается номенклатура
	+ "ВидКорСубконтоНУ1,"// <Число/Строка/ПланВидовХарактеристикСсылка.ВидыСубконтоТиповые> - вид субконто счета, на который списывается номенклатура
	+ "ВидКорСубконтоНУ2,"// <Число/Строка/ПланВидовХарактеристикСсылка.ВидыСубконтоТиповые> - вид субконто счета, на который списывается номенклатура
	+ "ВидКорСубконтоНУ3,"// <Число/Строка/ПланВидовХарактеристикСсылка.ВидыСубконтоТиповые> - вид субконто счета, на который списывается номенклатура
	+ "КорСубконтоНУ1,"   // - значение субконто счета, на который списывается номенклатура
	+ "КорСубконтоНУ2,"   // - значение субконто счета, на который списывается номенклатура
	+ "КорСубконтоНУ3,"   // - значение субконто счета, на который списывается номенклатура
	+ "КорСтруктурноеПодразделение," // <Ссылка на справочник подразделений> - подразделение, в которое списывается номенклатура
	+ "СтруктурноеПодразделение,"    // <Ссылка на справочник подразделений> - подразделение, из которого списывается номенклатура
	+ "ВалютаВзаиморасчетов,"   // <СправочникСсылка.Валюты>
	+ "СуммаСписания,"    // <Число,15,2> - сумма списываемой номенклатуры, определенная по данным остатков
	+ "СуммаСписанияНУ,"  // <Число,15,2> - сумма списываемой номенклатуры (НУ), определенная по данным остатков
	+ "СуммаСписанияПР,"  // <Число,15,2> - сумма постоянных разниц в стоимости списываемой номенклатуры, определенной по данным остатков
	+ "СуммаСписанияВР,"  // <Число,15,2> - сумма временных разниц в стоимости списываемой номенклатуры, определенной по данным остатков
	+ "СуммаСписанияВал"; // <Число,15,2> - сумма списываемой номенклатуры, определенная по данным остатков в валюте взаиморасчетов

	Параметры.Вставить("ТаблицаТовары",
		ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаТовары, СписокОбязательныхКолонок));

	СписокОбязательныхКолонок = ""
	+ "СчетУчетаБУ";      // <ПланСчетовСсылка.Типовой> - счет учета товаров в БУ
	
	Параметры.Вставить("СчетаУчетаТоваровБУ",
		ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаСчетаУчетаТоваров, СписокОбязательныхКолонок));

	СписокОбязательныхКолонок = ""
	+ "СчетУчетаНУ";      // <ПланСчетовСсылка.Налоговый> - счет учета товаров в НУ
	
	Параметры.Вставить("СчетаУчетаТоваровНУ",
		ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаСчетаУчетаТоваров, СписокОбязательныхКолонок));
		
	СписокОбязательныхКолонок = ""
	+ "Номенклатура";     // <СправочникСсылка.Номенклатура> - ссылка на номенклатуру, по которой будет определяться партия
	
	Параметры.Вставить("СписокНоменклатуры",
		ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаСписокНоменклатуры, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                 // <Дата> - период движений - дата документа
	+ "Регистратор,"            // <ДокументСсылка>
	+ "Организация,"            // <СправочникСсылка.Организации>
	+ "НеобходимостьОтраженияВНУ," // <Булево> - признак необходимости формирования проводок по налоговому учету
	+ "УказанДокументОтгрузки," // <Булево>
	+ "ДокументОтгрузки,"       // <ДокументСсылка>
	+ "ВалютаВзаиморасчетов,"   // <СправочникСсылка.Валюты>
	+ "ВидУчетаНУ,"             // <СправочникСсылка.ВидыУчетаНУ>
	+ "ВедениеУчетаВременныхРазницБалансовымМетодом"; // <Булево>
	
	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;
	
КонецФункции

Функция РазделитьСчетаУчетаПоПартионномуУчету(ТаблицаСчетаУчетаТоваров)

	СтруктураСчетов = Новый Структура;
	СтруктураСчетов.Вставить("СчетаПартионные",   Новый Массив);
	СтруктураСчетов.Вставить("СчетаНеПартионные", Новый Массив);

	Для каждого СтрокаСчета Из ТаблицаСчетаУчетаТоваров Цикл
		Если ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.НаСчетеВедетсяПартионныйУчет(СтрокаСчета.СчетУчетаБУ) Тогда
			СтруктураСчетов.СчетаПартионные.Добавить(СтрокаСчета.СчетУчетаБУ);
		Иначе
			СтруктураСчетов.СчетаНеПартионные.Добавить(СтрокаСчета.СчетУчетаБУ);
		КонецЕсли;
	КонецЦикла;

	Возврат СтруктураСчетов;

КонецФункции

// РЕАЛИЗАЦИЯ И ВОЗВРАТ ТМЗ ПО РЕГИСТРУ "РЕАЛИЗАЦИЯ ТМЗ"

Функция ПодготовитьПараметрыТаблицыРеализацияТМЗ(ТаблицаСписанныеТовары, ТаблицаДокумента, ТаблицаРеквизиты)
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.ТаблицаТовары
	Если ТаблицаСписанныеТовары <> Неопределено Тогда
		СписокОбязательныхКолонок = ""
		+ "НомерСтроки,"       				// <Число> - номер строки в списке
		+ "Номенклатура,"      				// <СправочникСсылка.Номенклатура> - реализуемый товар
		+ "Склад,"        					// <СправочникСсылка.Склады> - склад, с которого списывается товар
		+ "Партия,"        					// <ДокументСсылка, Неопределено> - списываемая партия товаров
		+ "СуммаСписания,"     				// <Число,15,2> - сумма в тенге
		+ "Количество,"        				// <Число,15,3> - количество оприходуемого товара
		+ "СчетУчетаБУ,"         			// <ПланСчетовСсылка.Типовой> - счет учета, на который приходуется товар
		+ "ОтражатьВБухгалтерскомУчете";    // <Булево> - признак отражения в бухгалтерском учете
		
		Параметры.Вставить("ТаблицаТовары",
		ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаСписанныеТовары, СписокОбязательныхКолонок));
	КонецЕсли;
	// Подготовка таблицы Параметры.ТаблицаДокумента
	
	СписокОбязательныхКолонок = ""
	+ "НомерСтроки,"       				// <Число> - номер строки в списке
	+ "Номенклатура,"      				// <СправочникСсылка.Номенклатура> - реализуемый товар
	+ "Склад,"        					// <СправочникСсылка.Склады> - склад, с которого списывается товар
	+ "Партия,"        					// <ДокументСсылка, Неопределено> - списываемая партия товаров
	+ "Количество,"        				// <Число,15,3> - количество оприходуемого товара
	+ "Сумма,"        					// <Число,15,2> - сумма в тенге
	+ "СуммаНДС,"        				// <Число,15,2> - сумма в тенге
	+ "СуммаАкциза,"     				// <Число,15,2> - сумма в тенге
	+ "СчетУчета,"                      // <ПланСчетовСсылка.Типовой> - счет учета, на который приходуется товар
	+ "ЭтоУслуга,"         				// <Булево> - признак услуги
	+ "Стоимость";        				// <Число,15,2> - сумма в тенге

	Параметры.Вставить("ТаблицаДокумента",
		ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаДокумента, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Регистратор,"                  	 // <ДокументСсылка.*> - документ-регистратор движений
	+ "Период,"                       	 // <Дата> - период движений - дата документа
	+ "Организация,"                  	 // <СправочникСсылка.Организация> - организация, в которую приходуется товар
	+ "СтруктурноеПодразделение,"  		 // <СправочникСсылка.ПодразделенияОрганизаций> - структурное подразделение организации
	+ "ДоговорКонтрагента";  		 	 // <СправочникСсылка.ДоговорыКонтрагентов> - договор с контрагентом

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));
	
	Возврат Параметры;
	
КонецФункции

Функция ПолучитьПустуюТаблицуРеализацияТМЗ()
	
	ТаблицаРеализацияТМЗ = Новый ТаблицаЗначений;
	ТаблицаРеализацияТМЗ.Колонки.Добавить("Период",                   ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповДаты(ЧастиДаты.ДатаВремя));
	ТаблицаРеализацияТМЗ.Колонки.Добавить("НомерСтроки",              ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(5, 0));
	ТаблицаРеализацияТМЗ.Колонки.Добавить("Организация",              Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаРеализацияТМЗ.Колонки.Добавить("СтруктурноеПодразделение", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	ТаблицаРеализацияТМЗ.Колонки.Добавить("ДоговорКонтрагента",       Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
	ТаблицаРеализацияТМЗ.Колонки.Добавить("СчетУчета",                Новый ОписаниеТипов("ПланСчетовСсылка.Типовой"));
	ТаблицаРеализацияТМЗ.Колонки.Добавить("Номенклатура",             Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаРеализацияТМЗ.Колонки.Добавить("Склад",                    Новый ОписаниеТипов("СправочникСсылка.Склады"));
	ТаблицаРеализацияТМЗ.Колонки.Добавить("Партия",                   Документы.ТипВсеСсылки());
	ТаблицаРеализацияТМЗ.Колонки.Добавить("Количество",               ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 3));
	ТаблицаРеализацияТМЗ.Колонки.Добавить("Сумма",                    ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаРеализацияТМЗ.Колонки.Добавить("НДС",                      ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаРеализацияТМЗ.Колонки.Добавить("Акциз",                    ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаРеализацияТМЗ.Колонки.Добавить("Стоимость",                ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	
	Возврат ТаблицаРеализацияТМЗ;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция РазличныеЗначенияКолонкиТаблицы(ТаблицаЗначений, ИмяКолонки)

	ВсеЗначенияКолонки = ТаблицаЗначений.ВыгрузитьКолонку(ИмяКолонки);
	РазличныеЗначения  = ОбщегоНазначенияБКВызовСервера.УдалитьПовторяющиесяЭлементыМассива(ВсеЗначенияКолонки);
	Возврат РазличныеЗначения;

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ Управления доступом

// Выполняет формирование таблицы с набором значений доступа объекта (документа), 
// содержащего ссылки на организацию, структорное подразделение и склад 
// Вызывается из процедуры ЗаполнитьНаборыЗначенийДоступа, реализованной в модуле таких 
// документов, доступ к которым выполняется через наборы значений доступа.
// Параметры:
//		Объект
//		Таблица - переданная таблица значений.
//		ПутьОрганизация - строка с именем реквизита, содержащего организацию.
//		ПутьСтруктурноеПодразделение - строка с именем реквизита, содержащего структурное подразделение.
//		ПутьСклад -  строка с именем реквизита, содержащего склад.
//
Процедура ЗаполнитьНаборыПоОрганизацииСтрутурномуПодразделениюСкладу(Объект, Таблица, ПутьОрганизация, ПутьСтруктурноеПодразделение, ПутьСклад, НомерНабора = 0) Экспорт
	
	// Логика ограничения:
	// объект доступен, если доступна организация, структурное подразделение и склад
	
	ОбщегоНазначенияБК.ЗаполнитьНаборыПоОрганизацииСтурктурномуПодразделению(Объект, Таблица, ПутьОрганизация, ПутьСтруктурноеПодразделение, НомерНабора);
	
	СтрокаТаб 					= Таблица.Добавить();
	СтрокаТаб.ЗначениеДоступа 	= Объект[ПутьСклад];
	СтрокаТаб.НомерНабора 		= НомерНабора;
		
КонецПроцедуры
