////////////////////////////////////////////////////////////////////////////////
// УчетНДСИАкциза: 
//  
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// ПОСТУПЛЕНИЕ ТОВАРОВ И УСЛУГ

Процедура СформироватьДвиженияПоступлениеТоваров(ТаблицаНДС, ТаблицаУчастникиСовместнойДеятельности, ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Если ТаблицаРеквизиты.Колонки.Найти("ОтложитьПринятиеНДСКЗачету") =  Неопределено Тогда
		ТаблицаРеквизиты.Колонки.Добавить("ОтложитьПринятиеНДСКЗачету", Новый ОписаниеТипов("Булево"));
	КонецЕсли;

	Реквизиты = ТаблицаРеквизиты[0];
	
	Если ТаблицаНДС = Неопределено Или ТаблицаНДС.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	
	   	
	Если Реквизиты.ОтложитьПринятиеНДСКЗачету Тогда
		СформироватьДвиженияНачисленияНДС(ТаблицаНДС, Реквизиты, Движения, Отказ);
		Возврат;
	КонецЕсли;
	
	// отражаем НДС на регистрах бухгалтерии
	Если НЕ Реквизиты.НДСВключенВСтоимость  Тогда 
		СформироватьДвиженияПоступлениеТоваровНДС(ТаблицаНДС, Реквизиты, Движения, Отказ);
	КонецЕсли;
	
	ИменаКолонок = "УплаченныйНДС,СуммаНДС,СуммаБезНДС";
		
	ТаблицаДляФормированияДвиженийНДС = ПодготовитьТаблицуРаспределенияПоУчастникамСовместнойДеятельности(ТаблицаНДС, ТаблицаУчастникиСовместнойДеятельности, ИменаКолонок);
	
	Если Реквизиты.НДСВключенВСтоимость Тогда 
		ТаблицаДляФормированияДвиженийНДС.Колонки.Удалить("СуммаНДС");
	КонецЕсли;
	
	Если ТаблицаДляФормированияДвиженийНДС.Колонки.Найти("КорректировкаНДС") <> Неопределено Тогда
		
		ВидыДокументовНДСВозврат = Новый Массив;
		ВидыДокументовНДСВозврат.Добавить(Тип("ДокументСсылка.ВозвратТоваровОтПокупателя"));	
		ВидыДокументовНДСВозврат.Добавить(Тип("ДокументСсылка.ВозвратТоваровПоставщику"));
		ВидыДокументовНДСВозврат.Добавить(Тип("ДокументСсылка.СписаниеТоваров"));	
		ВидыДокументовНДСВозврат.Добавить(Тип("ДокументСсылка.СписаниеОС"));
		
		Если ВидыДокументовНДСВозврат.Найти(ТипЗнч(Реквизиты.Регистратор)) <> Неопределено Тогда
			НаправлениеДвиженияНДС = -1;
		Иначе
			НаправлениеДвиженияНДС = 1;
		КонецЕсли;
		
		МассивКорректировкаНДСКВозмещению  = ТаблицаДляФормированияДвиженийНДС.НайтиСтроки(Новый Структура("КорректировкаНДС", Истина));
		ТаблицаКорректировкаНДСКВозмещению = ТаблицаДляФормированияДвиженийНДС.Скопировать(МассивКорректировкаНДСКВозмещению);
		
		МассивНДСКВозмещению  = ТаблицаДляФормированияДвиженийНДС.НайтиСтроки(Новый Структура("КорректировкаНДС", Ложь));
		ТаблицаНДСКВозмещению = ТаблицаДляФормированияДвиженийНДС.Скопировать(МассивНДСКВозмещению);
					
		Если ТаблицаНДСКВозмещению.Количество() <>  0 Тогда 
			СформироватьДвиженияПоРегиструНДС("НДСКВозмещению", ТаблицаНДСКВозмещению, Реквизиты, Движения, Отказ);
		КонецЕсли;
		
		Если ТаблицаКорректировкаНДСКВозмещению.Количество() <>  0 Тогда 
			ТаблицаКорректировкаНДСКВозмещению.Колонки.Добавить("ВидОперацииКорректировки");
			ТаблицаКорректировкаНДСКВозмещению.Колонки.Добавить("СуммаКорректировкиОборота");
			Для Каждого СтрокаТаблицыНДС Из ТаблицаКорректировкаНДСКВозмещению Цикл
				СтрокаТаблицыНДС.ВидОперацииКорректировки = СтрокаТаблицыНДС.ВидОперацииПоступления;
				СтрокаТаблицыНДС.УплаченныйНДС = СтрокаТаблицыНДС.УплаченныйНДС * НаправлениеДвиженияНДС;
				СтрокаТаблицыНДС.СуммаКорректировкиОборота = СтрокаТаблицыНДС.СуммаБезНДС * НаправлениеДвиженияНДС;
				Если НЕ Реквизиты.НДСВключенВСтоимость Тогда
					СтрокаТаблицыНДС.СуммаНДС = СтрокаТаблицыНДС.СуммаНДС * НаправлениеДвиженияНДС;
				КонецЕсли;
			КонецЦикла;
			СформироватьДвиженияПоРегиструНДС("КорректировкаНДСКВозмещению", ТаблицаКорректировкаНДСКВозмещению, Реквизиты, Движения, Отказ);
		КонецЕсли;  	
		
	Иначе
		СформироватьДвиженияПоРегиструНДС("НДСКВозмещению", ТаблицаДляФормированияДвиженийНДС, Реквизиты, Движения, Отказ);
	КонецЕсли;

КонецПроцедуры

Процедура СформироватьДвиженияНачисленияНДС(ТаблицаНДС, Реквизиты, Движения, Отказ)
	
	КолонкиРеквизитов = Реквизиты.Владелец().Колонки;
	Если КолонкиРеквизитов.Найти("Контрагент") = Неопределено Тогда
		Контрагент = Справочники.Контрагенты.ПустаяСсылка();
	Иначе
		Контрагент = Реквизиты.Контрагент;
	КонецЕсли;
	
	Если ТаблицаНДС.Колонки.Найти("Контрагент") = Неопределено Тогда
		НоваяКолонка = ТаблицаНДС.Колонки.Добавить("Контрагент", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
		ТаблицаНДС.ЗаполнитьЗначения(Контрагент, "Контрагент");
	КонецЕсли;
		
	ВидыДокументовНДСВозврат = Новый Массив;
	ВидыДокументовНДСВозврат.Добавить(Тип("ДокументСсылка.ВозвратТоваровПоставщику"));
	
	Если ВидыДокументовНДСВозврат.Найти(ТипЗнч(Реквизиты.Регистратор)) <> Неопределено Тогда
		ПрефиксДт = "Кт";
		ПрефиксКт = "Дт";
		ПрефиксСчета = "";
	Иначе
		ПрефиксДт = "Дт";
		ПрефиксКт = "Кт";
		ПрефиксСчета = "Кор";
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из ТаблицаНДС Цикл
		
		Если СтрокаТаблицы.СуммаНДС = 0 Тогда		
			Продолжить;		
		КонецЕсли; 
		
		Проводка = Движения.Типовой.Добавить();
		
		Проводка.Период       = Реквизиты.Период;
		Проводка.Организация  = Реквизиты.Организация;
		Проводка.Сумма        = СтрокаТаблицы.СуммаНДС;
		Проводка.Содержание   = НСтр("ru = 'Отложенное принятие НДС к зачету'", ОбщегоНазначения.КодОсновногоЯзыка());
		
		Проводка["Счет"+ПрефиксДт]       = ПланыСчетов.Типовой.НДСНачисленныйПриПокупке;
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка["Счет"+ПрефиксДт], Проводка["Субконто"+ПрефиксДт], 1, СтрокаТаблицы.Контрагент);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка["Счет"+ПрефиксДт], Проводка["Субконто"+ПрефиксДт], 2, Реквизиты.Регистратор);
				
		Проводка["Счет"+ПрефиксКт]       = СтрокаТаблицы[ПрефиксСчета + "Счет"];
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка["Счет"+ПрефиксКт], Проводка["Субконто"+ПрефиксКт], 1, СтрокаТаблицы[ПрефиксСчета + "Субконто1"]);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка["Счет"+ПрефиксКт], Проводка["Субконто"+ПрефиксКт], 2, СтрокаТаблицы[ПрефиксСчета + "Субконто2"]);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка["Счет"+ПрефиксКт], Проводка["Субконто"+ПрефиксКт], 3, СтрокаТаблицы[ПрефиксСчета + "Субконто3"]);
		
		ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
			Проводка, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);
			
		Если ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт).Валютный Тогда
			
			Проводка.ВалютаДт = Реквизиты.ВалютаВзаиморасчетов;
			Проводка.ВалютнаяСуммаДт = СтрокаТаблицы.СуммаНДСВал;
			
		КонецЕсли;
			
		Если ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт).Валютный Тогда
			
			Проводка.ВалютаКт = Реквизиты.ВалютаВзаиморасчетов;
			Проводка.ВалютнаяСуммаКт = СтрокаТаблицы.СуммаНДСВал;
			
		КонецЕсли;
		
		// поводки по налоговому учету
		Если Реквизиты.НеобходимостьОтраженияВНУ Тогда
			
			ПроводкаНУ = Движения.Налоговый.Добавить();
			
			ПроводкаНУ.Период       = Реквизиты.Период;
			ПроводкаНУ.Организация  = Реквизиты.Организация;
			ПроводкаНУ.Сумма        = СтрокаТаблицы.СуммаНДС;
			
			ПроводкаНУ.Содержание   = НСтр("ru = 'Отложенное принятие НДС к зачету'", ОбщегоНазначения.КодОсновногоЯзыка());
			
			ПроводкаНУ["Счет"+ПрефиксДт]       = ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьСчетУчетаНДСКНачислениюНУ(Проводка["Счет"+ПрефиксДт], Реквизиты.Период);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ["Счет"+ПрефиксДт], ПроводкаНУ["Субконто"+ПрефиксДт], 1, СтрокаТаблицы.Контрагент);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ["Счет"+ПрефиксДт], ПроводкаНУ["Субконто"+ПрефиксДт], 2, Реквизиты.Регистратор);
			
			
			ПроводкаНУ["Счет"+ПрефиксКт]       = ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьСчетРасчетовСКонтрагентомНУ(Проводка["Счет"+ПрефиксКт]);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ["Счет"+ПрефиксКт], ПроводкаНУ["Субконто"+ПрефиксКт], 1, СтрокаТаблицы[ПрефиксСчета + "Субконто1"]);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ["Счет"+ПрефиксКт], ПроводкаНУ["Субконто"+ПрефиксКт], 2, СтрокаТаблицы[ПрефиксСчета + "Субконто2"]);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ["Счет"+ПрефиксКт], ПроводкаНУ["Субконто"+ПрефиксКт], 3, СтрокаТаблицы[ПрефиксСчета + "Субконто3"]);
			
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				ПроводкаНУ, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);
			
			ПроцедурыНалоговогоУчета.ВидУчетаНУ(ПроводкаНУ, Реквизиты.ВидУчетаНУ);						
			
		КонецЕсли;	
	КонецЦикла;
	
	Движения.Типовой.Записывать = Истина;
	Если Реквизиты.НеобходимостьОтраженияВНУ Тогда
		Движения.Налоговый.Записывать = Истина;
	КонецЕсли;

КонецПроцедуры

Процедура СформироватьДвиженияКорректировкаПрочихОпераций(ТаблицаНДС, ТаблицаУчастникиСовместнойДеятельности, ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Реквизиты = ТаблицаРеквизиты[0];
	ПрочееПоступлениеНДС = ?(Реквизиты.ИмяРегистраНДС =  "НДСКВозмещению" ИЛИ Реквизиты.ИмяРегистраНДС =  "КорректировкаНДСКВозмещению", Истина, Ложь);
	
	Если ТаблицаНДС = Неопределено Или ТаблицаНДС.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// отражаем НДС на регистрах бухгалтерии
	Если Реквизиты.ОтражатьВБухгалтерскомУчете  Тогда 
		Если ПрочееПоступлениеНДС И НЕ Реквизиты.НДСВключенВСтоимость Тогда			
			СформироватьДвиженияПоступлениеТоваровНДС(ТаблицаНДС, Реквизиты, Движения, Отказ);
		Иначе
			Если ТаблицаНДС.Колонки.Найти("ЭтоАкциз") = Неопределено Тогда 
				ОбщегоНазначенияБКВызовСервера.ДобавитьКолонкуВТаблицуЗначений(ТаблицаНДС, "ЭтоАкциз", Ложь);
			КонецЕсли;
			СформироватьДвиженияРеализацияВозвратТоваровУслугНДСАкциз(ТаблицаНДС, Реквизиты, Движения, Отказ)
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ Реквизиты.УчитыватьНДС Тогда             
		Возврат;
	КонецЕсли;
	
	Если Реквизиты.КорректировкаОборота Тогда 			
		СтруктураПолейДляСторно = Новый Структура("СуммаНДС");
		УчетТоваров.ПроставитьСторноТаблицы(ТаблицаНДС, СтруктураПолейДляСторно, -1);
	КонецЕсли;
	
	Если ПрочееПоступлениеНДС Тогда
		ИменаКолонок = "УплаченныйНДС,СуммаНДС";
		Если  Реквизиты.КорректировкаОборота Тогда
			ИменаКолонок = ИменаКолонок + ",СуммаКорректировкиОборота";
		Иначе
			ИменаКолонок = ИменаКолонок + ",СуммаБезНДС";
		КонецЕсли;
				
		ТаблицаДляФормированияДвиженийНДС = ПодготовитьТаблицуРаспределенияПоУчастникамСовместнойДеятельности(ТаблицаНДС, ТаблицаУчастникиСовместнойДеятельности, ИменаКолонок);
		
		Если Реквизиты.НДСВключенВСтоимость Тогда 
			ТаблицаДляФормированияДвиженийНДС.Колонки.Удалить("СуммаНДС");
		КонецЕсли;
		
		СформироватьДвиженияПоРегиструНДС(Реквизиты.ИмяРегистраНДС, ТаблицаДляФормированияДвиженийНДС, Реквизиты, Движения, Отказ);
		
	Иначе //корректировка реализации   		
		ИменаКолонок = "СуммаНДС";
		Если  Реквизиты.КорректировкаОборота Тогда
			ИменаКолонок = ИменаКолонок + ",СуммаКорректировкиОборота";
		Иначе
			ИменаКолонок = ИменаКолонок + ",СуммаБезНДС,ОборотПоРеализации";
		КонецЕсли;
				
		ТаблицаДляФормированияДвиженийНДС = ПодготовитьТаблицуРаспределенияПоУчастникамСовместнойДеятельности(ТаблицаНДС,ТаблицаУчастникиСовместнойДеятельности, ИменаКолонок);
		СформироватьДвиженияПоРегиструНДС(Реквизиты.ИмяРегистраНДС, ТаблицаДляФормированияДвиженийНДС, Реквизиты, Движения, Отказ);
	КонецЕсли;
					
КонецПроцедуры
	
// ВОЗВРАТ ТОВАРОВ ПОСТАВЩИКУ

Процедура СформироватьДвиженияВозвратТоваровПоставщику(ТаблицаНДС, ТаблицаУчастникиСовместнойДеятельности, ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Если ТаблицаРеквизиты.Колонки.Найти("ОтложитьПринятиеНДСКЗачету") =  Неопределено Тогда
		ТаблицаРеквизиты.Колонки.Добавить("ОтложитьПринятиеНДСКЗачету", Новый ОписаниеТипов("Булево"));
	КонецЕсли;

	Реквизиты = ТаблицаРеквизиты[0];
	
	Если ТаблицаНДС = Неопределено Или ТаблицаНДС.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	Если НЕ Реквизиты.УказанСчетВозвратов И Реквизиты.ОтложитьПринятиеНДСКЗачету Тогда
		Возврат;
	КонецЕсли;
	

	Если Реквизиты.УказанСчетВозвратов И Реквизиты.ОтложитьПринятиеНДСКЗачету Тогда
		СформироватьДвиженияНачисленияНДС(ТаблицаНДС, Реквизиты, Движения, Отказ);
		Возврат;
	КонецЕсли;

	// отражаем НДС на регистрах бухгалтерии
	Если Реквизиты.УказанСчетВозвратов И НЕ Реквизиты.НДСВключенВСтоимость Тогда 
		СформироватьДвиженияПоступлениеТоваровНДС(ТаблицаНДС, Реквизиты, Движения, Отказ);
	КонецЕсли;

	ИменаКолонок = "УплаченныйНДС,СуммаНДС,СуммаКорректировкиОборота";
	
	СтруктураПолейДляСторно = Новый Структура(ИменаКолонок);
	УчетТоваров.ПроставитьСторноТаблицы(ТаблицаНДС, СтруктураПолейДляСторно, -1);
	
	ТаблицаДляФормированияДвиженийНДС = ПодготовитьТаблицуРаспределенияПоУчастникамСовместнойДеятельности(ТаблицаНДС, ТаблицаУчастникиСовместнойДеятельности, ИменаКолонок);
	
	Если Реквизиты.НДСВключенВСтоимость Тогда 
		ТаблицаДляФормированияДвиженийНДС.Колонки.Удалить("СуммаНДС");
	КонецЕсли;
	
	СформироватьДвиженияПоРегиструНДС("КорректировкаНДСКВозмещению", ТаблицаДляФормированияДвиженийНДС, Реквизиты, Движения, Отказ);
	
КонецПроцедуры

// РЕАЛИЗАЦИЯ ТОВАРОВ И УСЛУГ

Процедура СформироватьДвиженияРеализацияАктивовУслуг(ТаблицаНДС, ТаблицаУчастникиСовместнойДеятельности, ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Если ТаблицаРеквизиты.Колонки.Найти("ОтложитьНачислениеНДС") =  Неопределено Тогда
		ТаблицаРеквизиты.Колонки.Добавить("ОтложитьНачислениеНДС", Новый ОписаниеТипов("Булево"));
	КонецЕсли;

	Реквизиты = ТаблицаРеквизиты[0];
	
	Если ТаблицаНДС = Неопределено Или ТаблицаНДС.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	//Акциз
	ТаблицаДляФормированияДвиженийАкциза = ТаблицаНДС.Скопировать(Новый Структура("ЭтоАкциз", Истина));
	
	Если ТаблицаДляФормированияДвиженийАкциза.Количество() <> 0 Тогда
		
		СформироватьДвиженияПоРегиструАкциз(ТаблицаДляФормированияДвиженийАкциза, Реквизиты, Движения, Отказ);
		ТаблицаДляФормированияДвиженийАкциза.Колонки.Удалить("СуммаНДС");
		ТаблицаДляФормированияДвиженийАкциза.Колонки.Удалить("СуммаНДСВал");
		
		ТаблицаДляФормированияДвиженийАкциза.Колонки.СуммаАкциза.Имя = "СуммаНДС";
		ТаблицаДляФормированияДвиженийАкциза.Колонки.СуммаАкцизаВал.Имя = "СуммаНДСВал";
		
		СформироватьДвиженияРеализацияВозвратТоваровУслугНДСАкциз(ТаблицаДляФормированияДвиженийАкциза, Реквизиты, Движения, Отказ);
	КонецЕсли;
	
	//НДС
	ТаблицаДляФормированияДвиженийНДС    = ТаблицаНДС.Скопировать(Новый Структура("ЭтоАкциз", Ложь));
	
	Если ТаблицаДляФормированияДвиженийНДС.Количество() <> 0 Тогда
		
		СформироватьДвиженияРеализацияВозвратТоваровУслугНДСАкциз(ТаблицаДляФормированияДвиженийНДС, Реквизиты, Движения, Отказ);
		ИменаКолонок = "СуммаБезНДС,ОборотПоРеализации,СуммаНДС";
		
		Если НЕ Реквизиты.ОтложитьНачислениеНДС Тогда
			ТаблицаДляФормированияДвиженийНДС = ПодготовитьТаблицуРаспределенияПоУчастникамСовместнойДеятельности(ТаблицаДляФормированияДвиженийНДС,ТаблицаУчастникиСовместнойДеятельности, ИменаКолонок);
			СформироватьДвиженияПоРегиструНДС("НДС", ТаблицаДляФормированияДвиженийНДС, Реквизиты, Движения, Отказ);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// СПИСАНИЕ ТОВАРОВ

// дополним таблицу списанных партий данными по НДС
Функция ПодготовитьТаблицуСписанныеТоварыНДС(ТаблицаСписанныеТовары, ТаблицаРеквизиты, ТаблицаТовары,  Отказ) Экспорт
	
	Реквизиты = ТаблицаРеквизиты[0];
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ОтражатьВБухгалтерскомУчете", Истина);
	ТаблицаСписания = ТаблицаСписанныеТовары.Скопировать(ПараметрыОтбора);
	ТаблицаСписания.Свернуть("НомерСтроки, Номенклатура ","СуммаСписания");	

	ТаблицаКорректировкиНДС = ПолучитьПустуюТаблицуКорректировкиНДС();
	
	Если НЕ Реквизиты.КорректироватьНДС Тогда
		Возврат ТаблицаКорректировкиНДС;
	КонецЕсли;
	
	Для Каждого СтрокаТабличнойЧасти Из ТаблицаСписания  Цикл
	
		СтрокаДокумента = ТаблицаТовары.Получить(СтрокаТабличнойЧасти.НомерСтроки-1);

		СуммаНДС = СтрокаТабличнойЧасти.СуммаСписания*УчетНДСиАкцизаВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаДокумента.СтавкаНДС)/100;
		
		Если СуммаНДС  <> 0 Тогда
			НоваяСтрокаКорректировкиНДС = ТаблицаКорректировкиНДС.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаКорректировкиНДС, СтрокаТабличнойЧасти);
			НоваяСтрокаКорректировкиНДС.УплаченныйНДС 				= СуммаНДС;
			НоваяСтрокаКорректировкиНДС.СуммаНДС	 				= СуммаНДС;
			НоваяСтрокаКорректировкиНДС.СтавкаНДС	 				= СтрокаДокумента.СтавкаНДС;
			НоваяСтрокаКорректировкиНДС.ТМЗ			 				= СтрокаТабличнойЧасти.Номенклатура;
			НоваяСтрокаКорректировкиНДС.СуммаКорректировкиОборота	= СтрокаТабличнойЧасти.СуммаСписания;
			НоваяСтрокаКорректировкиНДС.ВидОборота					= СтрокаДокумента.НДСВидОборота;
			НоваяСтрокаКорректировкиНДС.ВидОперацииКорректировки	= СтрокаДокумента.НДСВидПоступления;
			НоваяСтрокаКорректировкиНДС.ВидНалогаНДС				= Перечисления.ВидыНДС.НДС;
			НоваяСтрокаКорректировкиНДС.СчетУчетаНДС			 	= СтрокаДокумента.СчетУчетаНДС;
			
			НоваяСтрокаКорректировкиНДС.ВалютаВзаиморасчетов        = Реквизиты.ВалютаВзаиморасчетов;
			НоваяСтрокаКорректировкиНДС.СуммаНДСВал                 = СуммаНДС;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаКорректировкиНДС;	
	
КонецФункции

Процедура СформироватьДвиженияСписаниеТоваровНДС(ТаблицаСписанныеТоварыНДС, Реквизиты, Движения, Отказ) Экспорт
	
	Если Реквизиты.КорректироватьНДС Тогда
		
		ПроводкиБУ = Движения.Типовой;
		ПроводкиНУ = Движения.Налоговый;
		
		Для Каждого СтрокаКорректировки Из ТаблицаСписанныеТоварыНДС Цикл		
			
			ПроводкаБУ = ПроводкиБУ.Добавить();
			ПроводкаБУ.Период      = Реквизиты.Период;
			ПроводкаБУ.Организация = Реквизиты.Организация;
			ПроводкаБУ.Сумма       = СтрокаКорректировки.СуммаНДС;
						
			ПроводкаБУ.СчетДт      = Реквизиты.СчетЗатратНДСБУ;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаБУ.СчетДт, ПроводкаБУ.СубконтоДт, 1,Реквизиты.СубконтоЗатратНДСБУ1);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаБУ.СчетДт, ПроводкаБУ.СубконтоДт, 2,Реквизиты.СубконтоЗатратНДСБУ2);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаБУ.СчетДт, ПроводкаБУ.СубконтоДт, 3,Реквизиты.СубконтоЗатратНДСБУ3);
			
			Если Реквизиты.СчетЗатратНДСБУ.Валютный Тогда 
				ПроводкаБУ.ВалютаДт              = СтрокаКорректировки.ВалютаВзаиморасчетов;
				ПроводкаБУ.ВалютнаяСуммаДт       = СтрокаКорректировки.СуммаНДСВал;
			КонецЕсли;
			
			ПроводкаБУ.СчетКт      = СтрокаКорректировки.СчетУчетаНДС;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаБУ.СчетКт, ПроводкаБУ.СубконтоКт, 1, Справочники.НалогиСборыОтчисления.НалогНаДобавленнуюСтоимость);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаБУ.СчетКт, ПроводкаБУ.СубконтоКт, 2, Перечисления.ВидыПлатежейВБюджетИФонды.Налог);
			
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
			ПроводкаБУ, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);
			
			
			ПроводкаБУ.Содержание  = НСтр("ru = 'Корректировка суммы НДС '", ОбщегоНазначения.КодОсновногоЯзыка());		
			// Отражение в налоговом учете
			Если Реквизиты.НеобходимостьОтраженияВНУ Тогда
				
				ПроводкаНУ = ПроводкиНУ.Добавить();
				ПроводкаНУ.Период      = Реквизиты.Период;
				ПроводкаНУ.Организация = Реквизиты.Организация;
				ПроводкаНУ.Сумма       = СтрокаКорректировки.СуммаНДС;
				
				ПроводкаНУ.СчетДт      = Реквизиты.СчетЗатратНДСНУ;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 1,Реквизиты.СубконтоЗатратНДСНУ1);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 2,Реквизиты.СубконтоЗатратНДСНУ2);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 3,Реквизиты.СубконтоЗатратНДСНУ3);
				
				ПроводкаНУ.СчетКт      = ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьСчетУчетаНДСКВозмещениюНУ(СтрокаКорректировки.СчетУчетаНДС, Реквизиты.Период);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 1, Справочники.НалогиСборыОтчисления.НалогНаДобавленнуюСтоимость);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 2, Перечисления.ВидыПлатежейВБюджетИФонды.Налог);
				
				ПроводкаНУ.Содержание  = НСтр("ru = 'Корректировка суммы НДС '", ОбщегоНазначения.КодОсновногоЯзыка());		
				ПроцедурыНалоговогоУчета.ВидУчетаНУ(ПроводкаНУ,  Реквизиты.ВидУчетаНУ);
				
				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				ПроводкаНУ, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	
	Движения.Типовой.Записывать = Истина;
	
	Если Реквизиты.НеобходимостьОтраженияВНУ Тогда
		
		Движения.Налоговый.Записывать = Истина;
		
	КонецЕсли;
	
КонецПроцедуры	

Процедура СформироватьДвиженияСписаниеТоваров(ТаблицаСписанныеТоварыНДС,СписаниеТоваровРеквизиты, Движения, Отказ) Экспорт
	
	Если СписаниеТоваровРеквизиты.Количество() = 0
		ИЛИ ТаблицаСписанныеТоварыНДС.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты =  СписаниеТоваровРеквизиты[0] ;
	
	СформироватьДвиженияСписаниеТоваровНДС(ТаблицаСписанныеТоварыНДС,  Реквизиты, Движения, Отказ);

	СтруктураПолейДляСторно = Новый Структура("СуммаНДС, УплаченныйНДС, СуммаКорректировкиОборота");
	
	УчетТоваров.ПроставитьСторноТаблицы(ТаблицаСписанныеТоварыНДС, СтруктураПолейДляСторно, -1);

	СформироватьДвиженияПоРегиструНДС("КорректировкаНДСКВозмещению", ТаблицаСписанныеТоварыНДС, Реквизиты, Движения, Отказ);
	
КонецПроцедуры

// ВОЗВРАТ ТОВАРОВ ОТ ПОКУПАТЕЛЯ

Процедура СформироватьДвиженияВозвратТоваровОтПокупателя(ТаблицаНДС, ТаблицаУчастникиСовместнойДеятельности, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Если ТаблицаРеквизиты.Колонки.Найти("ОтложитьНачислениеНДС") =  Неопределено Тогда
		ТаблицаРеквизиты.Колонки.Добавить("ОтложитьНачислениеНДС", Новый ОписаниеТипов("Булево"));
	КонецЕсли;
	
	Если ТаблицаНДС = Неопределено ИЛИ ТаблицаРеквизиты = Неопределено ИЛИ ТаблицаНДС.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Реквизиты = ТаблицаРеквизиты[0];
	
	// отражаем Акциз на регистрах накопления
	Если ТаблицаНДС <> Неопределено Тогда 
		СтруктураПолейДляСторно = Новый Структура("Количество, СуммаНДС, СуммаНДСВал, СуммаАкциза, СуммаАкцизаВал, СуммаКорректировкиОборота");
		УчетТоваров.ПроставитьСторноТаблицы(ТаблицаНДС, СтруктураПолейДляСторно, -1);
	КонецЕсли;
	
	ТаблицаДляФормированияДвиженийАкциза = ТаблицаНДС.Скопировать(Новый Структура("ЭтоАкциз", Истина));

	СформироватьДвиженияПоРегиструАкциз(ТаблицаДляФормированияДвиженийАкциза, Реквизиты, Движения, Отказ);
	
	ТаблицаДляФормированияДвиженийАкциза.Колонки.Удалить("СуммаНДС");
	ТаблицаДляФормированияДвиженийАкциза.Колонки.Удалить("СуммаНДСВал");

	ТаблицаДляФормированияДвиженийАкциза.Колонки.СуммаАкциза.Имя = "СуммаНДС";
	ТаблицаДляФормированияДвиженийАкциза.Колонки.СуммаАкцизаВал.Имя = "СуммаНДСВал";
	
	// отражаем Акциз на регистрах бухгалтерии
	Если Реквизиты.УказанСчетВозвратов Тогда
		СтруктураПолейДляСторно = Новый Структура("Количество, СуммаНДС, СуммаНДСВал,СуммаКорректировкиОборота");
		УчетТоваров.ПроставитьСторноТаблицы(ТаблицаДляФормированияДвиженийАкциза, СтруктураПолейДляСторно, -1);
		СформироватьДвиженияРеализацияВозвратТоваровУслугНДСАкциз(ТаблицаДляФормированияДвиженийАкциза, Реквизиты, Движения, Отказ);
	КонецЕсли;
	
    // отражаем НДС на регистрах накопления
	ТаблицаДляФормированияДвиженийНДС    = ТаблицаНДС.Скопировать(Новый Структура("ЭтоАкциз", Ложь));
	
	ИменаКолонок = "СуммаНДС, СуммаНДСВал, СуммаКорректировкиОборота";
	
	Если НЕ Реквизиты.ОтложитьНачислениеНДС Тогда
		
		ТаблицаДляФормированияДвиженийНДС = ПодготовитьТаблицуРаспределенияПоУчастникамСовместнойДеятельности(ТаблицаДляФормированияДвиженийНДС, ТаблицаУчастникиСовместнойДеятельности, ИменаКолонок);
		
		СформироватьДвиженияПоРегиструНДС("КорректировкаНДС", ТаблицаДляФормированияДвиженийНДС, Реквизиты, Движения, Отказ); 
		
	КонецЕсли; 
	
	// отражаем НДС на регистрах бухгалтерии
	Если Реквизиты.УказанСчетВозвратов Тогда 
		СтруктураПолейДляСторно = Новый Структура("Количество, СуммаНДС, СуммаНДСВал,СуммаКорректировкиОборота");
		УчетТоваров.ПроставитьСторноТаблицы(ТаблицаДляФормированияДвиженийНДС, СтруктураПолейДляСторно, -1);
		СформироватьДвиженияРеализацияВозвратТоваровУслугНДСАкциз(ТаблицаДляФормированияДвиженийНДС, Реквизиты, Движения, Отказ);
	КонецЕсли;

КонецПроцедуры

// ГТД ПО ИМПОРТУ

Процедура СформироватьДвиженияГТДИмпорт(ТаблицаНДС, ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Реквизиты = ТаблицаРеквизиты[0];
	
	Если ТаблицаНДС = Неопределено Или ТаблицаНДС.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// отражаем НДС на регистрах бухгалтерии
	Если НЕ Реквизиты.НДСВключенВСтоимость  Тогда 
		СформироватьДвиженияГТДИмпортНДС(ТаблицаНДС, Реквизиты, Движения, Отказ);
	КонецЕсли;
	
	Если Реквизиты.НДСВключенВСтоимость Тогда 
		ТаблицаНДС.Колонки.Удалить("СуммаНДС");
	КонецЕсли;
	
	// готовим таблицы для формирования движений по регистрам учета НДС
	ТаблицаДвиженийНДСКВозмещению      = ТаблицаНДС.Скопировать(Новый Структура("ВидНалогаНДС", Перечисления.ВидыНДС.НДС));
	ТаблицаДвиженийНДСМетодомЗачета    = ТаблицаНДС.Скопировать(Новый Структура("ВидНалогаНДС", Перечисления.ВидыНДС.НДСМетодомЗачета));
	ТаблицаДвиженийНДССоСрокомУплаты   = ТаблицаНДС.Скопировать(Новый Структура("ВидНалогаНДС", Перечисления.ВидыНДС.НДССИзменениемСрокаУплаты));
	ТаблицаНДСНачисленныйНДСПоИмпорту  = ТаблицаНДС.Скопировать(Новый Структура("ВидНалогаНДС", Перечисления.ВидыНДС.НДС));
	
	//если отражение на счетах учета расчетов с бюджетом
	//то делаем также двжиение по регистру НДС по начсиленному НДС по импорту, с видом налога "Облагаемый импорт"
	
	Если Реквизиты.ВариантОтражения = 1 Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаДвиженийНДССоСрокомУплаты, ТаблицаНДСНачисленныйНДСПоИмпорту);
		ТаблицаНДСНачисленныйНДСПоИмпорту.ЗаполнитьЗначения(Перечисления.ВидыНДС.НДСОблагаемыйИмпорт,"ВидНалогаНДС");		
		ТаблицаНДСНачисленныйНДСПоИмпорту.ЗаполнитьЗначения(Справочники.ВидыРеализации.ПрочийОблагаемыйИмпорт,"ВидОперацииРеализации");		
	КонецЕсли;

	// отражаем движения по регистру "НДСКВозмещению"
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаДвиженийНДСМетодомЗачета, ТаблицаДвиженийНДСКВозмещению);
	СформироватьДвиженияПоРегиструНДС("НДСКВозмещению", ТаблицаДвиженийНДСКВозмещению, Реквизиты, Движения, Отказ);
	
	Если Реквизиты.ВариантОтражения = 1 Тогда
		// отражаем движения по регистру "НДС" для НДС к уплате по импорту, и методом зачета
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаНДСНачисленныйНДСПоИмпорту,ТаблицаДвиженийНДСМетодомЗачета);
	КонецЕсли;
		
	СформироватьДвиженияПоРегиструНДС("НДС", ТаблицаДвиженийНДСМетодомЗачета, Реквизиты, Движения, Отказ);
		
	// отражаем движения по регистру "НДССИзмененнымСрокомУплаты" для НДС с изменением срока уплаты
	СформироватьДвиженияПоРегиструНДС("НДССИзмененнымСрокомУплаты", ТаблицаДвиженийНДССоСрокомУплаты, Реквизиты, Движения, Отказ);
		    	
КонецПроцедуры

// ЗАЯВЛЕНИЕ О ВВОЗЕ ТОВАРОВ И УПЛАТЕ КОСВЕННЫХ НАЛОГОВ

Процедура СформироватьДвиженияЗаявлениеОВвозеТоваров(ТаблицаНДС, ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Реквизиты = ТаблицаРеквизиты[0];
	
	Если ТаблицаНДС = Неопределено Или ТаблицаНДС.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// отражаем НДС на регистрах бухгалтерии
	Если НЕ Реквизиты.НДСВключенВСтоимость Тогда 
		СформироватьДвиженияЗаявлениеОВвозеТоваровНДС(ТаблицаНДС, Реквизиты, Движения, Отказ);
	КонецЕсли;
	
	ИменаКолонок = "УплаченныйНДС,СуммаНДС,СуммаБезНДС";
		
	Если Реквизиты.НДСВключенВСтоимость Тогда 
		ТаблицаНДС.Колонки.Удалить("СуммаНДС");
	КонецЕсли;
	
	СформироватьДвиженияПоРегиструНДС("НДС", ТаблицаНДС, Реквизиты, Движения, Отказ);
	
	// НДСКВозмещению
	ТаблицаНДСКВозмещению = ТаблицаНДС.Скопировать(Новый Структура("ВидНалогаНДС", Перечисления.ВидыНДС.НДСМетодомЗачета));
	Если ТаблицаНДСКВозмещению.Количество() <> 0 Тогда 
		СформироватьДвиженияПоРегиструНДС("НДСКВозмещению", ТаблицаНДСКВозмещению, Реквизиты, Движения, Отказ);
	КонецЕсли;
	
КонецПроцедуры

// СчетФактураПолученный

Процедура СформироватьДвиженияСчетФактураПолученный(ТаблицаДокумента, ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Параметры = ПодготовитьПараметрыСчетФактураПолученный(ТаблицаДокумента, ТаблицаРеквизиты);
	
	Реквизиты = ТаблицаРеквизиты[0];

	Для Каждого СтрокаТаблицы Из ТаблицаДокумента Цикл	
		
		СтрокаДвижения 		  = Движения.СведенияСчетовФактурПолученных.Добавить();           
		
		Если Реквизиты.ДатаОборотаВТабличнойЧасти И ЗначениеЗаполнено(СтрокаТаблицы.ДатаОборота) Тогда
			СтрокаДвижения.Период = СтрокаТаблицы.ДатаОборота;
		Иначе
			СтрокаДвижения.Период = Реквизиты.Период;
		КонецЕсли;
		
		СтрокаДвижения.СчетФактура = Реквизиты.Регистратор;             
		
		СтрокаДвижения.Налогоплательщик	  = Реквизиты.ПлательщикНДС;  
		СтрокаДвижения.Организация		  = Реквизиты.Организация;	 	
		СтрокаДвижения.СтруктурнаяЕдиница = Реквизиты.Организация;	 	
		
		СтрокаДвижения.СтавкаНДС  = СтрокаТаблицы.СтавкаНДС;		 
		СтрокаДвижения.Контрагент = Реквизиты.Контрагент; 
		СтрокаДвижения.ТМЗ		  = СтрокаТаблицы.Номенклатура; 
		
		СтрокаДвижения.Поставщик 					  = СтрокаТаблицы.Поставщик; 
		СтрокаДвижения.УчастникСовместнойДеятельности = СтрокаТаблицы.УчастникСовместнойДеятельности;
					
		СтрокаДвижения.СуммаВВалютеДоговора    = СтрокаТаблицы.СуммаБезНДСВал;
		СтрокаДвижения.СуммаНДСВВалютеДоговора = СтрокаТаблицы.НДСВал;
		
		СтрокаДвижения.СуммаРегл    = СтрокаТаблицы.СуммаБезНДС;
		СтрокаДвижения.СуммаНДСРегл = СтрокаТаблицы.НДС;
		
		СтрокаДвижения.ОборотПоРеализацииВВалютеДоговора = СтрокаТаблицы.ОборотПоРеализацииВал;
		СтрокаДвижения.ОборотПоРеализацииРегл = СтрокаТаблицы.ОборотПоРеализации;
		
	КонецЦикла;
	
	Движения.СведенияСчетовФактурПолученных.Записывать = Истина;
	
КонецПроцедуры	

// СчетФактураВыданный

Процедура СформироватьДвиженияСчетФактураВыданный(ТаблицаДокумента,  ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Параметры = ПодготовитьПараметрыСчетФактураВыданный(ТаблицаДокумента, ТаблицаРеквизиты);
	
	Реквизиты = ТаблицаРеквизиты[0];

	Для Каждого СтрокаТаблицы Из Параметры.ТаблицаСчетовФактур Цикл	
		
		СтрокаДвижения = Движения.СведенияСчетовФактурВыданных.Добавить();
		
		Если Реквизиты.ДатаОборотаВТабличнойЧасти И ЗначениеЗаполнено(СтрокаТаблицы.ДатаОборота) Тогда
			СтрокаДвижения.Период = СтрокаТаблицы.ДатаОборота;
		Иначе
			СтрокаДвижения.Период = Реквизиты.Период;
		КонецЕсли;
		
		СтрокаДвижения.СчетФактура = Реквизиты.Регистратор;
		
		СтрокаДвижения.Налогоплательщик	  = Реквизиты.ПлательщикНДС;
		СтрокаДвижения.Организация		  = Реквизиты.Организация;
		СтрокаДвижения.СтруктурнаяЕдиница = Реквизиты.Организация;
		
		СтрокаДвижения.СтавкаНДС	= СтрокаТаблицы.СтавкаНДС;
		СтрокаДвижения.СтавкаАкциза	= СтрокаТаблицы.СтавкаАкциза;
		СтрокаДвижения.Контрагент	= Реквизиты.Контрагент;
		СтрокаДвижения.ТМЗ		  	= СтрокаТаблицы.Номенклатура;
		
		СтрокаДвижения.Покупатель 					  = СтрокаТаблицы.Покупатель;
		СтрокаДвижения.СтранаНазначения 			  = СтрокаТаблицы.СтранаНазначения;
		СтрокаДвижения.УчастникСовместнойДеятельности = СтрокаТаблицы.УчастникСовместнойДеятельности;
		
		СтрокаДвижения.СуммаВВалютеДоговора    	  = СтрокаТаблицы.СуммаБезНДСВал;
		СтрокаДвижения.СуммаНДСВВалютеДоговора 	  = СтрокаТаблицы.НДСВал;
		СтрокаДвижения.СуммаАкцизаВВалютеДоговора = СтрокаТаблицы.АкцизВал;
		
		СтрокаДвижения.СуммаРегл    		             = СтрокаТаблицы.СуммаБезНДС;
		СтрокаДвижения.СуммаНДСРегл 		             = СтрокаТаблицы.НДС;
		СтрокаДвижения.СуммаАкцизаРегл 		             = СтрокаТаблицы.Акциз;
		СтрокаДвижения.ОборотПоРеализацииРегл            = СтрокаТаблицы.ОборотПоРеализации;
		СтрокаДвижения.ОборотПоРеализацииВВалютеДоговора = СтрокаТаблицы.ОборотПоРеализацииВал;
		
	КонецЦикла;
	
	Движения.СведенияСчетовФактурВыданных.Записывать = Истина;
	
КонецПроцедуры	


//ПЛАТЕЖНЫЕ ДОКУМЕНТЫ - НДС С ИЗМЕНЕННЫМ СРОКОМ УПЛАТЫ

Процедура СформироватьДвиженияПлатежноеПоручение(ТаблицаНДС,ТаблицаРеквизиты, Движения, Отказ) Экспорт
			
	Если ТаблицаНДС = Неопределено Или ТаблицаНДС.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизиты[0];

	// отражаем НДС на регистрах бухгалтерии
	СформироватьДвиженияПлатежноеПоручениеНДС(ТаблицаНДС, Реквизиты, Движения, Отказ);
	
	СформироватьДвиженияПоРегиструНДС("НДССИзмененнымСрокомУплаты", ТаблицаНДС, Реквизиты, Движения, Отказ);
	СформироватьДвиженияПоРегиструНДС("НДСКВозмещению", ТаблицаНДС, Реквизиты, Движения, Отказ);	
	
КонецПроцедуры

Процедура СформироватьДвиженияПлатежноеПоручениеНДС(ТаблицаНДС, Реквизиты, Движения, Отказ)
	
	Для Каждого СтрокаТаблицы Из ТаблицаНДС Цикл  
		
		Если СтрокаТаблицы.СуммаНДС = 0 Тогда		
			Продолжить;		
		КонецЕсли; 
		
		Проводка = Движения.Типовой.Добавить();
		
		Проводка.Период       = Реквизиты.Период;
		Проводка.Организация  = Реквизиты.Организация;
		Проводка.Сумма        = СтрокаТаблицы.СуммаНДС;
		Проводка.Содержание   = СтрокаТаблицы.Содержание;
		
		Проводка.СчетДт       = СтрокаТаблицы.СчетДт;
		
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаТаблицы.СубконтоДт1);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаТаблицы.СубконтоДт2);
				
		Проводка.СчетКт       = СтрокаТаблицы.СчетКт;
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтрокаТаблицы.СубконтоКт1);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтрокаТаблицы.СубконтоКт2);
				
		ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
			Проводка, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);
						
		// поводки по налоговому учету
		Если Реквизиты.НеобходимостьОтраженияВНУ Тогда
			
			ПроводкаНУ = Движения.Налоговый.Добавить();
			
			ПроводкаНУ.Период       = Реквизиты.Период;
			ПроводкаНУ.Организация  = Реквизиты.Организация;
			ПроводкаНУ.Сумма        = СтрокаТаблицы.СуммаНДС;
			
			ПроводкаНУ.Содержание   = СтрокаТаблицы.Содержание;
			
			ПроводкаНУ.СчетДт       = СтрокаТаблицы.СчетДтНУ;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 1, СтрокаТаблицы.СубконтоДтНУ1);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 2, СтрокаТаблицы.СубконтоДтНУ2);
						
			ПроводкаНУ.СчетКт       = СтрокаТаблицы.СчетКтНУ;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 1, СтрокаТаблицы.СубконтоКтНУ1);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 2, СтрокаТаблицы.СубконтоКтНУ2);
						
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				ПроводкаНУ, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);
			
			ПроцедурыНалоговогоУчета.ВидУчетаНУ(ПроводкаНУ, Реквизиты.ВидУчетаНУ);						
			
		КонецЕсли;	
	КонецЦикла;
	
	Движения.Типовой.Записывать = Истина;
	Если Реквизиты.НеобходимостьОтраженияВНУ Тогда
		Движения.Налоговый.Записывать = Истина;
	КонецЕсли;

	
КонецПроцедуры

//ОТРАЖЕНИЕ ЗАРПЛАТЫ В БУХ.УЧЕТЕ

Процедура СформироватьДвиженияОтражениеЗарплатыВБухучете(ТаблицаНДС, ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Реквизиты = ТаблицаРеквизиты[0];
	СформироватьДвиженияПоРегиструНДС("НДСКВозмещению", ТаблицаНДС, Реквизиты, Движения, Отказ);	
	
	//Для Каждого СтрокаТаблицы Из ТаблицаНДС Цикл  
	//	
	//	Если СтрокаТаблицы.СуммаНДС = 0 Тогда		
	//		Продолжить;		
	//	КонецЕсли; 
	//	
	//	Проводка = Движения.Типовой.Добавить();
	//	
	//	Проводка.Период       = Реквизиты.Период;
	//	Проводка.Организация  = Реквизиты.Организация;
	//	Проводка.Сумма        = СтрокаТаблицы.СуммаНДС;
	//	Проводка.Содержание   = СтрокаТаблицы.Содержание;
	//	
	//	Проводка.СчетДт       = СтрокаТаблицы.СчетДт;
	//	
	//	ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаТаблицы.СубконтоДт1);
	//	ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаТаблицы.СубконтоДт2);
	//			
	//	Проводка.СчетКт       = СтрокаТаблицы.СчетКт;
	//	ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтрокаТаблицы.СубконтоКт1);
	//	ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтрокаТаблицы.СубконтоКт2);
	//			
	//	ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
	//		Проводка, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);
	//					
	//	// поводки по налоговому учету
	//	Если Реквизиты.НеобходимостьОтраженияВНУ Тогда
	//		
	//		ПроводкаНУ = Движения.Налоговый.Добавить();
	//		
	//		ПроводкаНУ.Период       = Реквизиты.Период;
	//		ПроводкаНУ.Организация  = Реквизиты.Организация;
	//		ПроводкаНУ.Сумма        = СтрокаТаблицы.СуммаНДС;
	//		
	//		ПроводкаНУ.Содержание   = СтрокаТаблицы.Содержание;
	//		
	//		ПроводкаНУ.СчетДт       = СтрокаТаблицы.СчетДтНУ;
	//		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 1, СтрокаТаблицы.СубконтоДтНУ1);
	//		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 2, СтрокаТаблицы.СубконтоДтНУ2);
	//					
	//		ПроводкаНУ.СчетКт       = СтрокаТаблицы.СчетКтНУ;
	//		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 1, СтрокаТаблицы.СубконтоКтНУ1);
	//		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 2, СтрокаТаблицы.СубконтоКтНУ2);
	//					
	//		ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
	//			ПроводкаНУ, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);
	//		
	//		ПроцедурыНалоговогоУчета.ВидУчетаНУ(ПроводкаНУ, Реквизиты.ВидУчетаНУ);						
	//		
	//	КонецЕсли;	
	//КонецЦикла;
	//
	//Движения.Типовой.Записывать = Истина;
	//Если Реквизиты.НеобходимостьОтраженияВНУ Тогда
	//	Движения.Налоговый.Записывать = Истина;
	//КонецЕсли;

	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////
// ПОЛУЧЕНИЕ ДАННЫХ ПО ДОКУМЕНТАМ

// Рассчитывается сумма документа со всеми налогами
//
// Параметры: 
//  ДокументОбъект    - объект документа, сумму которого надо рассчитать
//  ИмяТабличнойЧасти - строка, имя табличной части, сумму которой надо рассчитать.
//                      Если она не заполнена, считаем по всем табличным частям, в которых есть "Сумма"
//  НеУчитыватьТару   - булево, если Истина и ИмяТабличнойЧасти неопределено, то в расчете сумм тару не учитываем
//
// Возвращаемое значение:
//  Сумма документа со всеми налогами.
//
Функция ПолучитьСуммуДокументаСНДС(ДокументОбъект, ИмяТабличнойЧасти = Неопределено, НеУчитыватьТару = Истина) Экспорт

	МетаданныеДокумента = ДокументОбъект.Метаданные();

	СуммаДокумента = 0;
	Если ИмяТабличнойЧасти <> Неопределено Тогда
		СуммаДокумента = СуммаДокумента + ДокументОбъект[ИмяТабличнойЧасти].Итог("Сумма");
		Если ОбщегоНазначенияБК.ЕстьРеквизитДокумента("УчитыватьНДС", МетаданныеДокумента)
		   И ОбщегоНазначенияБК.ЕстьРеквизитДокумента("СуммаВключаетНДС", МетаданныеДокумента)
		   И ОбщегоНазначенияБК.ЕстьРеквизитТабЧастиДокумента("СуммаНДС", МетаданныеДокумента, ИмяТабличнойЧасти)
		   И ДокументОбъект.УчитыватьНДС
		   И Не ДокументОбъект.СуммаВключаетНДС Тогда
			СуммаДокумента = СуммаДокумента + ДокументОбъект[ИмяТабличнойЧасти].Итог("СуммаНДС");
		КонецЕсли; 
		
		Если ОбщегоНазначенияБК.ЕстьРеквизитДокумента("УчитыватьАкциз", МетаданныеДокумента)
			И ОбщегоНазначенияБК.ЕстьРеквизитДокумента("СуммаВключаетАкциз", МетаданныеДокумента)
			И ОбщегоНазначенияБК.ЕстьРеквизитТабЧастиДокумента("СуммаАкциза", МетаданныеДокумента, ИмяТабличнойЧасти)
			И ДокументОбъект.УчитыватьАкциз
			И Не ДокументОбъект.СуммаВключаетАкциз Тогда
			СуммаДокумента = СуммаДокумента + ДокументОбъект[ИмяТабличнойЧасти].Итог("СуммаАкциза");
		КонецЕсли; 
		
	Иначе
		Для каждого ТЧОбъекта Из ДокументОбъект.Метаданные().ТабличныеЧасти Цикл
			Если НеУчитыватьТару И ТЧОбъекта.Имя = "ВозвратнаяТара" Тогда
				Продолжить;
			КонецЕсли;
			Если ТЧОбъекта.Имя = "ДенежныеСредства" Тогда
				Продолжить;
			КонецЕсли;
			Если ТЧОбъекта.Имя = "ПродажиПоДисконтнымКартам" Тогда
				Продолжить;
			КонецЕсли;
			Если ОбщегоНазначенияБК.ЕстьРеквизитТабЧастиДокумента("Сумма", МетаданныеДокумента, ТЧОбъекта.Имя) Тогда
				СуммаДокумента = СуммаДокумента + ДокументОбъект[ТЧОбъекта.Имя].Итог("Сумма");
				Если ОбщегоНазначенияБК.ЕстьРеквизитДокумента("УчитыватьНДС", МетаданныеДокумента)
					И ОбщегоНазначенияБК.ЕстьРеквизитДокумента("СуммаВключаетНДС", МетаданныеДокумента)
					И ОбщегоНазначенияБК.ЕстьРеквизитТабЧастиДокумента("СуммаНДС", МетаданныеДокумента, ТЧОбъекта.Имя)
					И ДокументОбъект.УчитыватьНДС
					И Не ДокументОбъект.СуммаВключаетНДС Тогда
					СуммаДокумента = СуммаДокумента + ДокументОбъект[ТЧОбъекта.Имя].Итог("СуммаНДС");
				КонецЕсли; 
				
				Если ОбщегоНазначенияБК.ЕстьРеквизитДокумента("УчитыватьАкциз", МетаданныеДокумента)
					И ОбщегоНазначенияБК.ЕстьРеквизитДокумента("СуммаВключаетАкциз", МетаданныеДокумента)
					И ОбщегоНазначенияБК.ЕстьРеквизитТабЧастиДокумента("СуммаАкциза", МетаданныеДокумента, ТЧОбъекта.Имя)
					И ДокументОбъект.УчитыватьАкциз
					И Не ДокументОбъект.СуммаВключаетАкциз Тогда
					СуммаДокумента = СуммаДокумента + ДокументОбъект[ТЧОбъекта.Имя].Итог("СуммаАкциза");
				КонецЕсли; 
			КонецЕсли; 			
		КонецЦикла;
	КонецЕсли;
	
	Возврат СуммаДокумента;

КонецФункции

// Рассчитываем сумму документа со всеми налогами в разрезе ставок НДС
//
// Параметры: 
//  ДокументОбъект    - ссылка документа, сумму которого надо рассчитать
//  ИмяТабличнойЧасти - строка, имя табличной части, сумму которой надо рассчитать.
//                      Если она не заполнена, считаем по всем табличным частям, в которых есть "Сумма"
//
// Возвращаемое значение:
//  ТаблицаЗначений 
//		Колонки:
//			Сумма		- Сумма документа со всеми налогами
//			СтавкаНДС	- ПеречислениеСсылка.СтавкиНДС
//			СуммаНДС	- Сумма НДС по ставке
//
Функция ПолучитьСуммуДокументаСНДСВРазрезеСтавокНДС(ДокументОбъект, ИмяТабличнойЧасти = Неопределено) Экспорт

	МетаданныеДокумента = ДокументОбъект.Метаданные();
	
	ТипЧисло15_2 = ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2);
	СуммаДокументаПоСтавкам = Новый ТаблицаЗначений();
	СуммаДокументаПоСтавкам.Колонки.Добавить("Сумма",     ТипЧисло15_2);
	СуммаДокументаПоСтавкам.Колонки.Добавить("СтавкаНДС", Новый ОписаниеТипов("СправочникСсылка.СтавкиНДС"));
	СуммаДокументаПоСтавкам.Колонки.Добавить("СуммаНДС",  ТипЧисло15_2);

	Если НЕ (ИмяТабличнойЧасти = Неопределено) Тогда
		
		ЕстьАкциз = ОбщегоНазначенияБК.ЕстьРеквизитДокумента("УчитыватьАкциз", МетаданныеДокумента) И ДокументОбъект.УчитыватьАкциз
		          И ОбщегоНазначенияБК.ЕстьРеквизитДокумента("СуммаВключаетАкциз", МетаданныеДокумента) И НЕ ДокументОбъект.СуммаВключаетАкциз
				  И ОбщегоНазначенияБК.ЕстьРеквизитТабЧастиДокумента("СуммаАкциза", МетаданныеДокумента, ИмяТабличнойЧасти);

		Для каждого СтрокаДокумента Из ДокументОбъект[ИмяТабличнойЧасти] Цикл

			Если ОбщегоНазначенияБК.ЕстьРеквизитТабЧастиДокумента("Сумма", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
				СуммаДокумента = СтрокаДокумента.Сумма;
			Иначе
				СуммаДокумента = 0;
			КонецЕсли; 

			СуммаНДС  = 0;
			СтавкаНДС = Справочники.СтавкиНДС.ПустаяСсылка();

			Если ОбщегоНазначенияБК.ЕстьРеквизитДокумента("УчитыватьНДС", МетаданныеДокумента)
			   И ДокументОбъект.УчитыватьНДС Тогда

				Если ОбщегоНазначенияБК.ЕстьРеквизитТабЧастиДокумента("СуммаНДС", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
					СуммаНДС = СтрокаДокумента.СуммаНДС;
				КонецЕсли;

				Если ОбщегоНазначенияБК.ЕстьРеквизитТабЧастиДокумента("СтавкаНДС", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
					СтавкаНДС = СтрокаДокумента.СтавкаНДС;
				КонецЕсли;

			КонецЕсли;

			Если ОбщегоНазначенияБК.ЕстьРеквизитДокумента("СуммаВключаетНДС", МетаданныеДокумента)
			   И Не ДокументОбъект.СуммаВключаетНДС Тогда

				СуммаДокумента = СуммаДокумента + СуммаНДС;

			КонецЕсли;
			
			Если ЕстьАкциз тогда
				СуммаАкциза = СтрокаДокумента.СуммаАкциза;
			Иначе
				СуммаАкциза = 0;
			КонецЕсли;
			
			СтрокаТаблицыИтогов = СуммаДокументаПоСтавкам.Найти(СтавкаНДС, "СтавкаНДС");

			Если СтрокаТаблицыИтогов = Неопределено тогда
				СтрокаТаблицыИтогов = СуммаДокументаПоСтавкам.Добавить();
				СтрокаТаблицыИтогов.СтавкаНДС = СтавкаНДС;
			КонецЕсли;

			СтрокаТаблицыИтогов.Сумма    = СтрокаТаблицыИтогов.Сумма    + СуммаДокумента + СуммаАкциза;
			СтрокаТаблицыИтогов.СуммаНДС = СтрокаТаблицыИтогов.СуммаНДС + СуммаНДС;
			
		КонецЦикла;

	Иначе

		Для каждого ТЧОбъекта Из ДокументОбъект.Метаданные().ТабличныеЧасти Цикл

			ИмяТабличнойЧасти = ТЧОбъекта.Имя;
			
			ЕстьАкциз = ОбщегоНазначенияБК.ЕстьРеквизитДокумента("УчитыватьАкциз", МетаданныеДокумента) И ДокументОбъект.УчитыватьАкциз
			          И ОбщегоНазначенияБК.ЕстьРеквизитДокумента("СуммаВключаетАкциз", МетаданныеДокумента) И НЕ ДокументОбъект.СуммаВключаетАкциз
					  И ОбщегоНазначенияБК.ЕстьРеквизитТабЧастиДокумента("СуммаАкциза", МетаданныеДокумента, ИмяТабличнойЧасти);

			Для каждого СтрокаДокумента  Из ДокументОбъект[ИмяТабличнойЧасти] Цикл

				Если ОбщегоНазначенияБК.ЕстьРеквизитТабЧастиДокумента("Сумма", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
					СуммаДокумента = СтрокаДокумента.Сумма;
				Иначе
					СуммаДокумента = 0;
				КонецЕсли;

				СуммаНДС  = 0;
				СтавкаНДС = Справочники.СтавкиНДС.ПустаяСсылка();

				Если ОбщегоНазначенияБК.ЕстьРеквизитДокумента("УчитыватьНДС", МетаданныеДокумента)
				   И ДокументОбъект.УчитыватьНДС Тогда

					Если ОбщегоНазначенияБК.ЕстьРеквизитТабЧастиДокумента("СуммаНДС", МетаданныеДокумента, ИмяТабличнойЧасти) тогда
						СуммаНДС = СтрокаДокумента.СуммаНДС;
					КонецЕсли;

					Если ОбщегоНазначенияБК.ЕстьРеквизитТабЧастиДокумента("СтавкаНДС", МетаданныеДокумента, ИмяТабличнойЧасти) тогда
						СтавкаНДС = СтрокаДокумента.СтавкаНДС;
					КонецЕсли;

				КонецЕсли;

				Если ОбщегоНазначенияБК.ЕстьРеквизитДокумента("СуммаВключаетНДС", МетаданныеДокумента)
				   И НЕ ДокументОбъект.СуммаВключаетНДС Тогда
					СуммаДокумента = СуммаДокумента+СуммаНДС;
				КонецЕсли;
				
				Если ЕстьАкциз тогда
					СуммаАкциза = СтрокаДокумента.СуммаАкциза;
				Иначе
					СуммаАкциза = 0;
				КонецЕсли;
				
				СтрокаТаблицыИтогов = СуммаДокументаПоСтавкам.Найти(СтавкаНДС,"СтавкаНДС");

				Если СтрокаТаблицыИтогов = Неопределено Тогда
					СтрокаТаблицыИтогов = СуммаДокументаПоСтавкам.Добавить();
					СтрокаТаблицыИтогов.СтавкаНДС = СтавкаНДС;
				КонецЕсли;

				СтрокаТаблицыИтогов.Сумма    = СтрокаТаблицыИтогов.Сумма    + СуммаДокумента + СуммаАкциза;
				СтрокаТаблицыИтогов.СуммаНДС = СтрокаТаблицыИтогов.СуммаНДС + СуммаНДС;

			КонецЦикла;                                                                
		КонецЦикла;                                                                    
	КонецЕсли;

	СтрокиКУдалению = Новый Массив;

	Для каждого СтрокаТаблицы Из СуммаДокументаПоСтавкам Цикл
		Если СтрокаТаблицы.Сумма = 0 и СтрокаТаблицы.СуммаНДС = 0  Тогда
			СтрокиКУдалению.Добавить( СтрокаТаблицы);
		КонецЕсли;
	КонецЦикла;

	Для НомерСтроки = 1 По СтрокиКУдалению.Количество() Цикл
		СуммаДокументаПоСтавкам.Удалить(СтрокиКУдалению[НомерСтроки-1]);
	КонецЦикла; 

	Возврат СуммаДокументаПоСтавкам;

КонецФункции // УчетНДСИАкциза.ПолучитьСуммуДокументаСНДС()

//////////////////////////////////////////////////////////////////////////
// РАБОТА СО СЧЕТАМИ-ФАКТУРАМИ

//заполняет табличные части счетов-фактур из документов основания
//
Процедура ЗаполнитьТабличныеЧастиИзДокументаОснования(Объект, Основание, ВозвратТоваров = Ложь, ЗаполнятьТовары = Истина, ЗаполнятьУслуги = Истина, ЗаполнятьОС = Истина) Экспорт
	
	Если Основание = Неопределено Тогда
		Возврат;
	КонецЕсли; 	
	
	ВводИзСФ       = Ложь;
	ЕстьАкциз      = Ложь;
	
	НеобходимостьПересчетаПоФлагамНалогов = Ложь;
	
	ОбъектСуммаВключаетНДС 		= Ложь;
	ОбъектСуммаВключаетАкциз 	= Ложь;
	ОснованиеСуммаВключаетНДС 	= Ложь;
	ОснованиеСуммаВключаетАкциз = Ложь;

	ВидДокументаОснования = Основание.Метаданные().Имя;
	МетаданныеДокумента	  = Объект.Ссылка.Метаданные();
	ВидОбъекта			  = МетаданныеДокумента.Имя;
	
	ДанныеДокументаДляРасчета = Новый Структура(
		"ВалютаДокумента, УчитыватьНДС, УчитыватьАкциз, СуммаВключаетНДС, СуммаВключаетАкциз, КурсВзаиморасчетов, КратностьВзаиморасчетов,Дата");
	ЗаполнитьЗначенияСвойств(ДанныеДокументаДляРасчета, Объект);
	Для Каждого ЭлементСтруктуры Из ДанныеДокументаДляРасчета Цикл
		Если ДанныеДокументаДляРасчета[ЭлементСтруктуры.Ключ] = Неопределено Тогда
			ДанныеДокументаДляРасчета.Удалить(ЭлементСтруктуры.Ключ);
		КонецЕсли;
	КонецЦикла;
	ДанныеДокументаДляРасчета.Вставить("ВалютаРегламентированногоУчета", ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
	ДанныеДокументаДляРасчета.Вставить("ЭтоЗаявлениеОВвозеТоваров"     , ВидОбъекта = "ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов");
	
	РеквизитыСтрокиТабЧасти = "Сумма, СуммаАкциза, СтавкаНДС, СуммаНДС, ОборотПоРеализации, СуммаДополнительныхРасходов, Валюта, КурсВалюты";	
	
	// При вводе документов отгрузки на основании счетов-фактур
	// необходимо заполнять данные только по недоотгруженным ТМЗ
	Если ВидДокументаОснования = "СчетФактураПолученный" ИЛИ
		 ВидДокументаОснования = "СчетФактураВыданный" Тогда
		
		Если  ТипЗНЧ(Основание) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
			ЕстьАкциз = Истина;
		КонецЕсли;
		
		СтруктураОстатков = ПолучитьСписокТоваровПодтвержденныхОтгрузками(Основание, ЕстьАкциз);
		ВводИзСФ = Истина;
	КонецЕсли;
	
	// Для операций возврата отличается знак количественно-суммовых показателей
	Если ВидДокументаОснования		= "ВозвратТоваровОтПокупателя"
		ИЛИ  ВидДокументаОснования	= "ВозвратТоваровПоставщику"
		ИЛИ  ВидДокументаОснования	= "ВозвратТоваровПоставщикуИзНТТ"
		ИЛИ  ВидОбъекта			 	= "ВозвратТоваровОтПокупателя"
		ИЛИ  ВидОбъекта 			= "ВозвратТоваровПоставщику"
		ИЛИ  ВидОбъекта				= "ВозвратТоваровПоставщикуИзНТТ"
		ИЛИ  (ВидДокументаОснования = "Сторнирование"
			  И НЕ (ТипЗнч(Основание.ДокументОснование) = Тип("ДокументСсылка.ВозвратТоваровПоставщику")
			  ИЛИ   ТипЗнч(Основание.ДокументОснование) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя"))) Тогда
		ВозвратТоваров = Истина;
	КонецЕсли;

	// При вводе на основании сторнирования базовым является документ - основание сторно
	Если ВидДокументаОснования     = "Сторнирование" Тогда
		ДокОснование = Основание.ДокументОснование;		
		Если НЕ ЗначениеЗаполнено(ДокОснование) Тогда
			Возврат;
		КонецЕсли;	
	Иначе
		ДокОснование = Основание;		
	КонецЕсли;
	
	МетаданныеДокументаОснования = ДокОснование.Метаданные();		
	ВидДокументаОснования		 = МетаданныеДокументаОснования.Имя;	
	
	//сумма включает НДС
	Если ОбщегоНазначенияБК.ЕстьРеквизитДокумента("СуммаВключаетНДС", МетаданныеДокументаОснования) Тогда
		ОснованиеСуммаВключаетНДС = ДокОснование.СуммаВключаетНДС;		
	КонецЕсли;
	
	Если ОбщегоНазначенияБК.ЕстьРеквизитДокумента("СуммаВключаетНДС", МетаданныеДокумента) Тогда
		ОбъектСуммаВключаетНДС = Объект.СуммаВключаетНДС;		
	КонецЕсли;
		
	// Сумма включает акциз
	Если ОбщегоНазначенияБК.ЕстьРеквизитДокумента("СуммаВключаетАкциз", МетаданныеДокументаОснования) Тогда
		ОснованиеСуммаВключаетАкциз = ДокОснование.СуммаВключаетАкциз;	
	КонецЕсли;
	
	Если ОбщегоНазначенияБК.ЕстьРеквизитДокумента("СуммаВключаетАкциз", МетаданныеДокумента) Тогда
		ОбъектСуммаВключаетАкциз = Объект.СуммаВключаетАкциз;	
	КонецЕсли;
	
	// Флаги включения налогов в сумму в обрабатываемых документах не совпадают
	Если (НЕ ОбъектСуммаВключаетНДС = ОснованиеСуммаВключаетНДС) ИЛИ (НЕ ОбъектСуммаВключаетАкциз  = ОснованиеСуммаВключаетАкциз) Тогда
		НеобходимостьПересчетаПоФлагамНалогов = Истина;
	КонецЕсли;	

	Если ВидДокументаОснования = "ПередачаНМА" Тогда
		НоваяСтрока = Объект.НМА.Добавить();
		НоваяСтрока.НематериальныйАктив = Основание.НематериальныйАктив;
		НоваяСтрока.СтавкаНДС           = Основание.СтавкаНДС;		
		НоваяСтрока.СуммаНДС            = Основание.СуммаНДС;
		Если НеобходимостьПересчетаПоФлагамНалогов Тогда
			НоваяСтрока.Сумма = УчетНДСИАкцизаКлиентСервер.ПересчитатьСуммуПриИзмененииФлаговНалогов(
			                                                   Основание.Сумма, НоваяСтрока.СуммаНДС, 0, ОснованиеСуммаВключаетНДС,
									                           ОснованиеСуммаВключаетАкциз, ОбъектСуммаВключаетНДС, ОбъектСуммаВключаетАкциз);
		Иначе	
			НоваяСтрока.Сумма = Основание.Сумма;
		КонецЕсли;
		
		Если ОбщегоНазначенияБК.ЕстьРеквизитТабЧастиДокумента("ОборотПоРеализации", МетаданныеДокумента, "НМА") Тогда
			ДанныеСтрокиДляРасчета = Новый Структура(РеквизитыСтрокиТабЧасти);
			ЗаполнитьЗначенияСвойств(ДанныеСтрокиДляРасчета, НоваяСтрока);
			Для Каждого ЭлементСтруктуры Из ДанныеСтрокиДляРасчета Цикл
				Если ДанныеСтрокиДляРасчета[ЭлементСтруктуры.Ключ] = Неопределено Тогда
					ДанныеСтрокиДляРасчета.Удалить(ЭлементСтруктуры.Ключ);
				КонецЕсли;
			КонецЦикла;
			
			УчетНДСиАкцизаКлиентСервер.РассчитатьОборотПоРеализацииТабЧасти(ДанныеСтрокиДляРасчета, ДанныеДокументаДляРасчета);
			НоваяСтрока.ОборотПоРеализации = ДанныеСтрокиДляРасчета.ОборотПоРеализации;
		КонецЕсли;
		
		Если МетаданныеДокумента.ТабличныеЧасти.Найти("УчастникиСовместнойДеятельности") <> Неопределено Тогда 
			Объект.УчастникиСовместнойДеятельности.Загрузить(ДокОснование.УчастникиСовместнойДеятельности.Выгрузить());
		КонецЕсли;

		Возврат;
	КонецЕсли;

	//только когда ввод данных из Авансового отчета в Счет-фактуру,
	Если ВидДокументаОснования = "АвансовыйОтчет" Тогда
		ТабЧастьТовары = Основание.Товары;
		ТабЧастьУслуги = Основание.Прочее;
		
		СтруктураОтбора = Новый Структура("СчетФактура", Объект.Ссылка);		
		СтрокиТовары    = ТабЧастьТовары.НайтиСтроки(СтруктураОтбора);
		Если СтрокиТовары.Количество() <> 0 Тогда
			
			ДанныеСтрокиДляРасчета = Новый Структура(РеквизитыСтрокиТабЧасти);
			Для Каждого ЭлементСтруктуры Из ДанныеСтрокиДляРасчета Цикл
				Если НЕ ОбщегоНазначенияБК.ЕстьРеквизитТабЧастиДокумента(ЭлементСтруктуры.Ключ, МетаданныеДокумента, "Товары") Тогда
					ДанныеСтрокиДляРасчета.Удалить(ЭлементСтруктуры.Ключ);
				КонецЕсли;
			КонецЦикла;
			
			Для Каждого СтрокаТабличнойЧастиОснования Из СтрокиТовары Цикл
				НоваяСтрока = Объект.Товары.Добавить();
				// Заполняем по документу-основания
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТабличнойЧастиОснования);
				Если НоваяСтрока.Количество = 0 Тогда
					НоваяСтрока.Количество = 1;
				КонецЕсли;	
				
				Если НЕ ЗначениеЗаполнено(НоваяСтрока.Коэффициент) Тогда
					НоваяСтрока.Коэффициент = 1;
				КонецЕсли;
				
				// При несовпадении флагов расчета налогов - пересчитываем показатели
				Если НеобходимостьПересчетаПоФлагамНалогов Тогда
					НоваяСтрока.Сумма =  УчетНДСИАкцизаКлиентСервер.ПересчитатьСуммуПриИзмененииФлаговНалогов(
					                                                    СтрокаТабличнойЧастиОснования.Сумма, НоваяСтрока.СуммаНДС, 0,
																		ОснованиеСуммаВключаетНДС, ОснованиеСуммаВключаетАкциз,
																		ОбъектСуммаВключаетНДС, ОбъектСуммаВключаетАкциз);					
					НоваяСтрока.Цена = НоваяСтрока.Сумма/НоваяСтрока.Количество;
				КонецЕсли;
				
				// Заполняем реквизит счета-фактуры "Оборот по реализации"
				Если ОбщегоНазначенияБК.ЕстьРеквизитТабЧастиДокумента("ОборотПоРеализации", МетаданныеДокумента, "Товары") Тогда
					ЗаполнитьЗначенияСвойств(ДанныеСтрокиДляРасчета, НоваяСтрока);
					УчетНДСиАкцизаКлиентСервер.РассчитатьОборотПоРеализацииТабЧасти(ДанныеСтрокиДляРасчета, ДанныеДокументаДляРасчета);
					НоваяСтрока.ОборотПоРеализации = ДанныеСтрокиДляРасчета.ОборотПоРеализации;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		СтрокиУслуги = ТабЧастьУслуги.НайтиСтроки(СтруктураОтбора);
		Если СтрокиУслуги.Количество() <> 0 Тогда
			
			ДанныеСтрокиДляРасчета = Новый Структура(РеквизитыСтрокиТабЧасти);
			Для Каждого ЭлементСтруктуры Из ДанныеСтрокиДляРасчета Цикл
				Если НЕ ОбщегоНазначенияБК.ЕстьРеквизитТабЧастиДокумента(ЭлементСтруктуры.Ключ, МетаданныеДокумента, "Услуги") Тогда
					ДанныеСтрокиДляРасчета.Удалить(ЭлементСтруктуры.Ключ);
				КонецЕсли;
			КонецЦикла;
			
			Для Каждого СтрокаТабличнойЧастиОснования Из СтрокиУслуги Цикл
				НоваяСтрока = Объект.Услуги.Добавить();
				// Заполняем по документу-основания
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТабличнойЧастиОснования);
				Если НоваяСтрока.Количество = 0 Тогда
					НоваяСтрока.Количество = 1;
				КонецЕсли;	
				
				// При несовпадении флагов расчета налогов - пересчитываем показатели
				Если НеобходимостьПересчетаПоФлагамНалогов Тогда
					НоваяСтрока.Сумма =  УчетНДСИАкцизаКлиентСервер.ПересчитатьСуммуПриИзмененииФлаговНалогов(
					                                                    СтрокаТабличнойЧастиОснования.Сумма, НоваяСтрока.СуммаНДС, 0,
																		ОснованиеСуммаВключаетНДС, ОснованиеСуммаВключаетАкциз,
																		ОбъектСуммаВключаетНДС, ОбъектСуммаВключаетАкциз);	
				КонецЕсли;
				// На закладке "Прочее" авансового отчета нет цены. Необходимо рассчитать цену
				НоваяСтрока.Цена = НоваяСтрока.Сумма/НоваяСтрока.Количество;

				Если ОбщегоНазначенияБК.ЕстьРеквизитТабЧастиДокумента("ОборотПоРеализации", МетаданныеДокумента, "Услуги") Тогда
					ЗаполнитьЗначенияСвойств(ДанныеСтрокиДляРасчета, НоваяСтрока);
					УчетНДСиАкцизаКлиентСервер.РассчитатьОборотПоРеализацииТабЧасти(ДанныеСтрокиДляРасчета, ДанныеДокументаДляРасчета);
					НоваяСтрока.ОборотПоРеализации = ДанныеСтрокиДляРасчета.ОборотПоРеализации;
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;   		
		Возврат;
	КонецЕсли;
		
	//в случае когда СФ вводится на основании поступления доп.расходов, то
	//сумма расхода должна попасть в табличную часть "Услуги"
	Если ВидДокументаОснования = "ПоступлениеДопРасходов" Тогда
		НоваяСтрока = Объект.Услуги.Добавить();
		НоваяСтрока.Номенклатура = Основание.Номенклатура;
		НоваяСтрока.Содержание = Основание.Содержание;
		НоваяСтрока.Количество = 1;
		НоваяСтрока.СтавкаНДС  = Основание.СтавкаНДС;
		НоваяСтрока.СуммаНДС   = Основание.СуммаНДС;
		НоваяСтрока.Сумма      = Основание.Сумма;		
		// При несовпадении флагов расчета налогов - пересчитываем показатели
		Если НеобходимостьПересчетаПоФлагамНалогов Тогда
			НоваяСтрока.Сумма =  УчетНДСИАкцизаКлиентСервер.ПересчитатьСуммуПриИзмененииФлаговНалогов(
			                                                    НоваяСтрока.Сумма, НоваяСтрока.СуммаНДС, 0, ОснованиеСуммаВключаетНДС,
																ОснованиеСуммаВключаетАкциз, ОбъектСуммаВключаетНДС, ОбъектСуммаВключаетАкциз);				
			НоваяСтрока.Цена  = НоваяСтрока.Сумма;
		Иначе
			НоваяСтрока.Цена  = Основание.Сумма;
			НоваяСтрока.Сумма = Основание.Сумма;
		КонецЕсли;
		
		Если ОбщегоНазначенияБК.ЕстьРеквизитТабЧастиДокумента("ОборотПоРеализации", МетаданныеДокумента, "Услуги") Тогда
			ДанныеСтрокиДляРасчета = Новый Структура(РеквизитыСтрокиТабЧасти);
			ЗаполнитьЗначенияСвойств(ДанныеСтрокиДляРасчета, НоваяСтрока);
			Для Каждого ЭлементСтруктуры Из ДанныеСтрокиДляРасчета Цикл
				Если ДанныеСтрокиДляРасчета[ЭлементСтруктуры.Ключ] = Неопределено Тогда
					ДанныеСтрокиДляРасчета.Удалить(ЭлементСтруктуры.Ключ);
				КонецЕсли;
			КонецЦикла;
			
			УчетНДСиАкцизаКлиентСервер.РассчитатьОборотПоРеализацииТабЧасти(ДанныеСтрокиДляРасчета, ДанныеДокументаДляРасчета);
			НоваяСтрока.ОборотПоРеализации = ДанныеСтрокиДляРасчета.ОборотПоРеализации;
		КонецЕсли;
	КонецЕсли;
	
	//в случае когда СФ вводится на основании документа "Отчет комиссионера о продажах", то
	//сумма вознаграждения по ТЧ "Товары" должна попасть одной строкой в табличную часть "Услуги"
	Если (ВидДокументаОснования = "ОтчетКомиссионераОПродажах" И ВидОбъекта = "СчетФактураПолученный")
		 ИЛИ (ВидДокументаОснования = "ОтчетКомитентуОПродажах" И ВидОбъекта = "СчетФактураВыданный")
		И Основание.Товары.Итог("СуммаВознаграждения") <>  0 Тогда
		НоваяСтрока = Объект.Услуги.Добавить();
		НоваяСтрока.Номенклатура = Основание.УслугаПоВознаграждению;
		НоваяСтрока.Содержание   = НСтр("ru = 'Сумма вознаграждения'", ОбщегоНазначения.КодОсновногоЯзыка());
		НоваяСтрока.Количество   = 1;
		НоваяСтрока.СтавкаНДС    = Основание.СтавкаНДСВознаграждения;
		НоваяСтрока.СуммаНДС     = Основание.Товары.Итог("СуммаНДСВознаграждения");
		НоваяСтрока.Сумма        = Основание.Товары.Итог("СуммаВознаграждения");
		
		// При несовпадении флагов расчета налогов - пересчитываем показатели
		Если НеобходимостьПересчетаПоФлагамНалогов Тогда
			НоваяСтрока.Сумма =  УчетНДСИАкцизаКлиентСервер.ПересчитатьСуммуПриИзмененииФлаговНалогов(
			                                                    НоваяСтрока.Сумма, НоваяСтрока.СуммаНДС, 0, ОснованиеСуммаВключаетНДС,
																ОснованиеСуммаВключаетАкциз, ОбъектСуммаВключаетНДС, ОбъектСуммаВключаетАкциз);				
			НоваяСтрока.Цена  = НоваяСтрока.Сумма;
		Иначе
			НоваяСтрока.Цена  = Основание.Товары.Итог("СуммаВознаграждения");
			НоваяСтрока.Сумма = Основание.Товары.Итог("СуммаВознаграждения");
		КонецЕсли;
		
		Если ОбщегоНазначенияБК.ЕстьРеквизитТабЧастиДокумента("ОборотПоРеализации", МетаданныеДокумента, "Услуги") Тогда
			ДанныеСтрокиДляРасчета = Новый Структура(РеквизитыСтрокиТабЧасти);
			ЗаполнитьЗначенияСвойств(ДанныеСтрокиДляРасчета, НоваяСтрока);
			Для Каждого ЭлементСтруктуры Из ДанныеСтрокиДляРасчета Цикл
				Если ДанныеСтрокиДляРасчета[ЭлементСтруктуры.Ключ] = Неопределено Тогда
					ДанныеСтрокиДляРасчета.Удалить(ЭлементСтруктуры.Ключ);
				КонецЕсли;
			КонецЦикла;
			
			УчетНДСиАкцизаКлиентСервер.РассчитатьОборотПоРеализацииТабЧасти(ДанныеСтрокиДляРасчета, ДанныеДокументаДляРасчета);
			НоваяСтрока.ОборотПоРеализации = ДанныеСтрокиДляРасчета.ОборотПоРеализации;
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	////////////////////////////////////////////////////////////////////////////////////////////////////
	// Общая обработка табличных частей  	

	Для Каждого ТабЧасть Из МетаданныеДокументаОснования.ТабличныеЧасти Цикл
		
		Если ВидДокументаОснования = "РеализацияУслугПоПереработке" И ТабЧасть.Имя = "Услуги" Тогда
			ИмяТабЧастиОснование = ТабЧасть.Имя;
			ИмяТабЧастиОбъекта = "Товары";			
		ИначеЕсли ВидОбъекта = "РеализацияУслугПоПереработке" И ТабЧасть.Имя = "Товары" Тогда
			ИмяТабЧастиОснование = ТабЧасть.Имя;
			ИмяТабЧастиОбъекта   = "Услуги";
		ИначеЕсли ТабЧасть.Имя = "УчастникиСовместнойДеятельности" Тогда 	
			Если МетаданныеДокумента.ТабличныеЧасти.Найти(ТабЧасть.Имя) <> Неопределено Тогда 
				Объект.УчастникиСовместнойДеятельности.Загрузить(ДокОснование.УчастникиСовместнойДеятельности.Выгрузить());
			КонецЕсли;
			Продолжить;
		Иначе
			ИмяТабЧастиОснование = ТабЧасть.Имя;
			ИмяТабЧастиОбъекта   = ИмяТабЧастиОснование;
		КонецЕсли;	
		
		Если ИмяТабЧастиОбъекта   = "Товары" и НЕ ЗаполнятьТовары Тогда
			Продолжить;
		ИначеЕсли ИмяТабЧастиОбъекта   = "Услуги" и НЕ ЗаполнятьУслуги Тогда
			Продолжить;
		ИначеЕсли ИмяТабЧастиОбъекта   = "ОС" и НЕ ЗаполнятьОС Тогда
			Продолжить;
		КонецЕсли;
		ТабличнаяЧасть = МетаданныеДокумента.ТабличныеЧасти.Найти(ИмяТабЧастиОбъекта); 
		
		Если  ТабличнаяЧасть <> Неопределено Тогда
			
			ДанныеСтрокиДляРасчета = Новый Структура(РеквизитыСтрокиТабЧасти);
			Для Каждого ЭлементСтруктуры Из ДанныеСтрокиДляРасчета Цикл
				Если НЕ ОбщегоНазначенияБК.ЕстьРеквизитТабЧастиДокумента(ЭлементСтруктуры.Ключ, МетаданныеДокумента, ИмяТабЧастиОбъекта) Тогда
					ДанныеСтрокиДляРасчета.Удалить(ЭлементСтруктуры.Ключ);
				КонецЕсли;
			КонецЦикла;
			
			Если ИмяТабЧастиОбъекта = "НомераГТД" Тогда
				Продолжить;
			КонецЕсли;
			
			ЕстьНомераГТД = МетаданныеДокумента.ТабличныеЧасти.Найти("НомераГТД") <> Неопределено;
			ЕстьНомераГТДОснования = МетаданныеДокументаОснования.ТабличныеЧасти.Найти("НомераГТД") <> Неопределено;
						
			ЕстьКоличество  	= ОбщегоНазначенияБК.ЕстьРеквизитТабЧастиДокумента("Количество", МетаданныеДокумента, ИмяТабЧастиОбъекта);
			ЕстьЦена			= ОбщегоНазначенияБК.ЕстьРеквизитТабЧастиДокумента("Цена", МетаданныеДокумента, ИмяТабЧастиОбъекта);
			ВОснованииЕстьАкциз = ОбщегоНазначенияБК.ЕстьРеквизитТабЧастиДокумента("СуммаАкциза", МетаданныеДокументаОснования, ИмяТабЧастиОснование)
			                      	И ОбщегоНазначенияБК.ЕстьРеквизитДокумента("УчитыватьАкциз", МетаданныеДокументаОснования) И ДокОснование.УчитыватьАкциз;
			ВДокументеЕстьАкциз = ОбщегоНазначенияБК.ЕстьРеквизитТабЧастиДокумента("СуммаАкциза", МетаданныеДокумента, ИмяТабЧастиОбъекта)
			                      	И ОбщегоНазначенияБК.ЕстьРеквизитДокумента("УчитыватьАкциз", МетаданныеДокумента) И Объект.УчитыватьАкциз;
								  
			ЕстьСкидкаНаценкаОбъект = ОбщегоНазначенияБК.ЕстьРеквизитТабЧастиДокумента("ПроцентАвтоматическихСкидок", МетаданныеДокумента, ИмяТабЧастиОбъекта)
			                          	И ОбщегоНазначенияБК.ЕстьРеквизитТабЧастиДокумента("ПроцентСкидкиНаценки", МетаданныеДокумента, ИмяТабЧастиОбъекта);
			ЕстьСкидкаНаценкаОснов  = ОбщегоНазначенияБК.ЕстьРеквизитТабЧастиДокумента("ПроцентАвтоматическихСкидок", МетаданныеДокументаОснования, ИмяТабЧастиОснование)
			                          	И ОбщегоНазначенияБК.ЕстьРеквизитТабЧастиДокумента("ПроцентСкидкиНаценки", МетаданныеДокументаОснования, ИмяТабЧастиОснование);								  
										
			ЕстьКоэффициент		= ОбщегоНазначенияБК.ЕстьРеквизитТабЧастиДокумента("Коэффициент", МетаданныеДокумента, ИмяТабЧастиОбъекта);
			
			ВОбъектеЕстьЕдиницаИзмерения 	= ОбщегоНазначенияБК.ЕстьРеквизитТабЧастиДокумента("ЕдиницаИзмерения", МетаданныеДокумента, ИмяТабЧастиОбъекта);
			ВОснованииЕстьЕдиницаИзмерения 	= ОбщегоНазначенияБК.ЕстьРеквизитТабЧастиДокумента("ЕдиницаИзмерения", МетаданныеДокументаОснования, ИмяТабЧастиОснование);
			ВОснованииЕстьНоменклатура 		= ОбщегоНазначенияБК.ЕстьРеквизитТабЧастиДокумента("Номенклатура", МетаданныеДокументаОснования, ИмяТабЧастиОснование);
			
			Если НЕ ВОснованииЕстьЕдиницаИзмерения И ВОбъектеЕстьЕдиницаИзмерения И ВОснованииЕстьНоменклатура Тогда 
				СведенияОСпискеНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ОбщегоНазначения.ВыгрузитьКолонку(ДокОснование[ИмяТабЧастиОснование], "Номенклатура", Истина), "БазоваяЕдиницаИзмерения");
			КонецЕсли;
			
			Если ВводИзСФ Тогда
				СвернутаяТабЧастьСФ = ДокОснование[ИмяТабЧастиОснование].Выгрузить();
				СвернутьТабличныеЧастиСФ(СвернутаяТабЧастьСФ, ИмяТабЧастиОснование, ВидДокументаОснования);
			Иначе
				СвернутаяТабЧастьСФ = Неопределено;
			КонецЕсли;
			
			Для Каждого СтрокаОснования Из ДокОснование[ИмяТабЧастиОснование] Цикл
				
				//если ввод на основании счет-фактуры, надо следить за количеством
				//и если ИмяТабЧасти = "Услуги" тогда за суммой
				Если ВводИзСФ Тогда 
					СтруктураОст = ПолучитьОстатокИзСФ(СтрокаОснования, ИмяТабЧастиОснование, СтруктураОстатков, ВозвратТоваров, ЕстьАкциз,, СвернутаяТабЧастьСФ);
					Количество   = СтруктураОст.Количество;
					Сумма        = СтруктураОст.Сумма;
					
					//для услуг контроль идет по сумме
					Если (ИмяТабЧастиОснование = "Услуги" ИЛИ ИмяТабЧастиОснование = "ОС") И Количество = 0 Тогда
						Количество = 1;						
					КонецЕсли; 											
					
					// Если позиция отгружена ранее ее не заполняем
					Если ЕстьКоличество И Количество = 0 Тогда
						Продолжить;
					ИначеЕсли Сумма = 0 И (ИмяТабЧастиОснование <> "Товары") Тогда
						Продолжить;
					КонецЕсли;			
				КонецЕсли;        				
				
				//если заполняем счет-фактуру на основании документа "Поступление доп.расходов"
				//то необходимо вычислить цену для СФ
				Если ВидДокументаОснования = "ПоступлениеДопРасходов" Тогда
					//если доп.расходов нет, то и заполнять данную строчку не стоит
					Если СтрокаОснования.Сумма = 0 Тогда
						Продолжить;
					КонецЕсли;  					
					
					НоваяСтрока = Объект[ИмяТабЧастиОбъекта].Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОснования);					
					НоваяСтрока.СтавкаНДС = Основание.СтавкаНДС;
					// При несовпадении флагов расчета налогов - пересчитываем показатели
					Если НеобходимостьПересчетаПоФлагамНалогов Тогда
						НоваяСтрока.Сумма =  УчетНДСИАкцизаКлиентСервер.ПересчитатьСуммуПриИзмененииФлаговНалогов(
						                                                    НоваяСтрока.Сумма, НоваяСтрока.СуммаНДС, 0, ОснованиеСуммаВключаетНДС,
																			ОснованиеСуммаВключаетАкциз, ОбъектСуммаВключаетНДС, ОбъектСуммаВключаетАкциз);																						  
					КонецЕсли;
															
					Если  ЕстьКоличество Тогда
						Если НоваяСтрока.Количество = 0 Тогда
							НоваяСтрока.Количество = 1;
						КонецЕсли;
																	
						НоваяСтрока.Цена = НоваяСтрока.Сумма/НоваяСтрока.Количество;
					КонецЕсли;
					
					Если ЕстьКоэффициент И НЕ ЗначениеЗаполнено(НоваяСтрока.Коэффициент) Тогда
						НоваяСтрока.Коэффициент = 1;
					КонецЕсли;
					
					Если НЕ ВОснованииЕстьЕдиницаИзмерения И ВОбъектеЕстьЕдиницаИзмерения И ВОснованииЕстьНоменклатура
						И НЕ ЗначениеЗаполнено(НоваяСтрока.ЕдиницаИзмерения) Тогда 
						НоваяСтрока.ЕдиницаИзмерения = СведенияОСпискеНоменклатуры.Получить(СтрокаОснования.Номенклатура);
					КонецЕсли;
					
				Иначе 	//общий случай
					
					ЕстьНоменклатураУслугиПереработка      = Ложь;					
					//имя табличной части определяем построчно
					Если ВидДокументаОснования = "РеализацияУслугПоПереработке" И (ВидОбъекта = "СчетФактураВыданный" ИЛИ ВидОбъекта = "РегистрацияПрочихОперацийПоРеализованнымТоварамВЦеляхНДС") Тогда																	
						Если  ЗначениеЗаполнено(СтрокаОснования.НоменклатураУслуга) Тогда
							ИмяТабЧастиОбъекта = "Услуги"; 
							ЕстьНоменклатураУслугиПереработка = Истина;  						
						Иначе                                           
							ИмяТабЧастиОбъекта = "Товары"; 
							ЕстьНоменклатураУслугиПереработка =  Ложь;
						КонецЕсли;
						ЕстьКоэффициент		              = ОбщегоНазначенияБК.ЕстьРеквизитТабЧастиДокумента("Коэффициент", МетаданныеДокумента, ИмяТабЧастиОбъекта);							
						ВОбъектеЕстьЕдиницаИзмерения 	  = ОбщегоНазначенияБК.ЕстьРеквизитТабЧастиДокумента("ЕдиницаИзмерения", МетаданныеДокумента, ИмяТабЧастиОбъекта);		
						//имя табличной части определяем построчно
					ИначеЕсли ВидДокументаОснования = "СчетФактураВыданный" И ВидОбъекта = "РеализацияУслугПоПереработке" Тогда																	
						// вэтом случае заполнить нужно рквизит НоменклатураУслуга
						Если  ИмяТабЧастиОснование = "Услуги"  Тогда
							ЕстьНоменклатураУслугиПереработка = Истина;  						
						КонецЕсли;
					КонецЕсли;
                   					
					НоваяСтрока = Объект[ИмяТабЧастиОбъекта].Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОснования);
					
					Если ЕстьНоменклатураУслугиПереработка Тогда
						Если ВидДокументаОснования = "РеализацияУслугПоПереработке" И (ВидОбъекта = "СчетФактураВыданный" ИЛИ ВидОбъекта = "РегистрацияПрочихОперацийПоРеализованнымТоварамВЦеляхНДС") Тогда
							ЗаполнитьЗначенияСвойств(НоваяСтрока, Новый Структура("Номенклатура", СтрокаОснования.НоменклатураУслуга));
						Иначе   
							ЗаполнитьЗначенияСвойств(НоваяСтрока, Новый Структура("НоменклатураУслуга", СтрокаОснования.Номенклатура));
							НоваяСтрока.Номенклатура = Справочники.Номенклатура.ПустаяСсылка();
						КонецЕсли; 					
					КонецЕсли;    
					
					Если ИмяТабЧастиОбъекта = "Товары" Тогда
						
						Если ЕстьНомераГТД Тогда
							
							НоваяСтрока.КлючСвязи = ОбщегоНазначенияБККлиентСервер.НовыйКлючСвязиСтрокиТаблицы(Объект[ИмяТабЧастиОбъекта]);
							
							Если ЕстьНомераГТДОснования Тогда
								
								ПараметрыОтбора = Новый Структура;
								ПараметрыОтбора.Вставить("КлючСвязи", СтрокаОснования.КлючСвязи);
								МассивНайденныхСтрок = ДокОснование.НомераГТД.НайтиСтроки(ПараметрыОтбора);
								
								Для Каждого НайденнаяСтрока Из МассивНайденныхСтрок Цикл
									
									НоваяСтрокаНомерГТД = Объект.НомераГТД.Добавить();
									ЗаполнитьЗначенияСвойств(НоваяСтрокаНомерГТД, НайденнаяСтрока);
									
									Если МетаданныеДокументаОснования = Метаданные.Документы.ВозвратТоваровОтПокупателя
										ИЛИ МетаданныеДокумента = Метаданные.Документы.ВозвратТоваровОтПокупателя
										ИЛИ (ВидДокументаОснования = "ОтчетОРозничныхПродажах" И ВозвратТоваров) Тогда
										НоваяСтрокаНомерГТД.Количество = (-1) * НайденнаяСтрока.Количество;
									КонецЕсли;
									
									НоваяСтрокаНомерГТД.КлючСвязи = НоваяСтрока.КлючСвязи;
									
								КонецЦикла;
								
							КонецЕсли;
							
						КонецЕсли;
						
					КонецЕсли;
					
					//В случае если у докумената основания в табличной части назначена скидка на номенклатуру
					//а в документе объекте в табличной части нет скидок то установим цену для номенклатуры с 
					//учетом скидок.
					Если ЕстьСкидкаНаценкаОснов И (Не ЕстьСкидкаНаценкаОбъект) Тогда 
						Если (СтрокаОснования.ПроцентАвтоматическихСкидок + СтрокаОснования.ПроцентСкидкиНаценки) > 0 Тогда 
							Если ЕстьКоличество И ЕстьЦена Тогда 
								НоваяСтрока.Цена = СтрокаОснования.Сумма / СтрокаОснования.Количество;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;					
					
					// При вводе документа отгрузки из счета-фактуры
					// устанавливаем только "оставшееся" количество и сумму отгрузки
					Если ВводИзСФ Тогда
						// Для возврата меняем знак количества, суммы и сумм налогов						
						Если ЕстьКоличество Тогда
							//для услуг контроль осуществляться будет по сумме
							//цена будет рассчитыватся также от суммы				
							НоваяСтрока.Количество = ?(ВозвратТоваров, -Количество, Количество); 						
							НоваяСтрока.Цена       = Сумма / Количество;
							НоваяСтрока.Сумма      = ?(ВозвратТоваров, -Сумма, Сумма);		
						Иначе //значит проверка идет для суммы
							НоваяСтрока.Сумма 	   = ?(ВозвратТоваров, -Сумма, Сумма);	
						КонецЕсли;							
						
						// Пересчет табличных частей, в случае ввода на основании документа сч.фактура
						
						ЗаполнитьЗначенияСвойств(ДанныеСтрокиДляРасчета, НоваяСтрока);
						
						ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(ДанныеСтрокиДляРасчета, ДанныеДокументаДляРасчета);
						НоваяСтрока.СуммаНДС = ДанныеСтрокиДляРасчета.СуммаНДС;
						Если ЕстьАкциз Тогда
							ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуАкцизаТабЧасти(ДанныеСтрокиДляРасчета, ДанныеДокументаДляРасчета);
							ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеСтрокиДляРасчета );
						КонецЕсли;
					КонецЕсли;
					//так как мы переопределяем для строки реализация услуги по переработке заполнение ТЧ, то при установе коээфициент смотрим
					//соотв.переменную
					Если ЕстьКоэффициент И НЕ ЗначениеЗаполнено(НоваяСтрока.Коэффициент) Тогда
						НоваяСтрока.Коэффициент = 1;
					КонецЕсли;
					
					Если НЕ ВОснованииЕстьЕдиницаИзмерения И ВОбъектеЕстьЕдиницаИзмерения И ВОснованииЕстьНоменклатура 
						И НЕ ЗначениеЗаполнено(НоваяСтрока.ЕдиницаИзмерения) Тогда 
						НоваяСтрока.ЕдиницаИзмерения = СведенияОСпискеНоменклатуры.Получить(СтрокаОснования.Номенклатура);
					КонецЕсли;
					
					// При несовпадении флагов расчета налогов между новым документов и документом основанием - пересчитываем показатели
					Если НеобходимостьПересчетаПоФлагамНалогов Тогда
						НоваяСтрока.Сумма =  УчетНДСИАкцизаКлиентСервер.ПересчитатьСуммуПриИзмененииФлаговНалогов(
						                                                    НоваяСтрока.Сумма, НоваяСтрока.СуммаНДС, ?(ВОснованииЕстьАкциз, СтрокаОснования.СуммаАкциза,0),
																		    ОснованиеСуммаВключаетНДС, ОснованиеСуммаВключаетАкциз, ОбъектСуммаВключаетНДС, ОбъектСуммаВключаетАкциз);																						  
					  	Если ЕстьКоличество Тогда												  
						  //	Если есть цена, ее так же необходимо пересчитать
						  Если НоваяСтрока.Количество = 0 Тогда
							  НоваяСтрока.Количество = 1;
						  КонецЕсли;	
						  НоваяСтрока.Цена = НоваяСтрока.Сумма/НоваяСтрока.Количество;
						КонецЕсли;	
					КонецЕсли;					
					
					// Для возврата меняем знак количества, суммы и сумм налогов						
					Если ВозвратТоваров И НЕ ВводИзСФ Тогда
						НоваяСтрока.Сумма 		= -НоваяСтрока.Сумма;
						НоваяСтрока.СуммаНДС	= -НоваяСтрока.СуммаНДС;						
						Если ЕстьКоличество Тогда
							НоваяСтрока.Количество = -НоваяСтрока.Количество;								
						КонецЕсли;
						
						Если ВДокументеЕстьАкциз Тогда
							НоваяСтрока.СуммаАкциза	= -НоваяСтрока.СуммаАкциза;
						КонецЕсли;						
					КонецЕсли;	
				КонецЕсли;
				
				Если ОбщегоНазначенияБК.ЕстьРеквизитТабЧастиДокумента("ОборотПоРеализации", МетаданныеДокумента, ИмяТабЧастиОбъекта) Тогда
					Если ВидОбъекта = "СчетФактураВыданный" И ВидДокументаОснования = "РегистрацияПрочихОперацийПоРеализованнымТоварамВЦеляхНДС"
						И НоваяСтрока.ОборотПоРеализации <> 0 Тогда
						Продолжить;
					КонецЕсли;
					ЗаполнитьЗначенияСвойств(ДанныеСтрокиДляРасчета, НоваяСтрока);
					УчетНДСиАкцизаКлиентСервер.РассчитатьОборотПоРеализацииТабЧасти(ДанныеСтрокиДляРасчета, ДанныеДокументаДляРасчета);
					НоваяСтрока.ОборотПоРеализации = ДанныеСтрокиДляРасчета.ОборотПоРеализации;
				КонецЕсли;
			КонецЦикла; 
		КонецЕсли;    
		
	КонецЦикла;		
	
КонецПроцедуры // ЗаполнитьТабличныеЧастиИзДокументаОснования()

// Для документа счет-фактура с установленным признаком УчитыватьНДС процедура проверяет
// заполнение реквизита СтавкаНДС в строках табличных частей и заполняет незаполненные.
// Параметры:
//    УчитыватьНДСОснования - Булево - признак УчитыватьНДС документа-основания.
// Приоритет определения значений ставки НДС, если УчитыватьНДСОснования=Истина:
//    1. Значение реквизита СтавкаНДС из справочника Номенклатура (для таб. частей Товары и Услуги)
//    2. ОсновнаяСтавкаНДС из настроек текущего пользователя
//    3. Ставка "Без НДС"
// Если УчитыватьНДСОснования=Ложь, тогда СтавкаНДС во всех строках заполняется значением "Без НДС"
//
Процедура ПроверитьСтавкиНДСВТабличныхЧастях(Объект, УчитыватьНДСОснования) Экспорт
	
	СтавкаБезНДС = Справочники.СтавкиНДС.ПолучитьСтавкуБезНДС();
	
	Если НЕ УчитыватьНДСОснования Тогда
		СтавкаНДС = СтавкаБезНДС;
	Иначе
		НастройкиПользователя = ПользователиБКВызовСервераПовтИсп.ЗначенияНастроекПользователя(Пользователи.ТекущийПользователь(), "ОсновнаяСтавкаНДС");
		СтавкаНДС = НастройкиПользователя.ОсновнаяСтавкаНДС;
		
		Если НЕ ЗначениеЗаполнено(СтавкаНДС) Тогда
			СтавкаНДС = СтавкаБезНДС;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("СтавкаНДС", Справочники.СтавкиНДС.ПустаяСсылка());
	
	Если Объект.Товары.Количество() > 0 Тогда
		Если УчитыватьНДСОснования Тогда
			НайденныеСтроки = Объект.Товары.НайтиСтроки(ПараметрыОтбора);
			Если НайденныеСтроки.Количество() > 0 Тогда
				// Определим ставки НДС из справочника Номенклатура
				СписокНоменклатуры = Новый Массив;
				Для Каждого НезаполненнаяСтрока Из НайденныеСтроки Цикл
					СписокНоменклатуры.Добавить(НезаполненнаяСтрока.Номенклатура);
				КонецЦикла;
				СвойстваНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(СписокНоменклатуры, "СтавкаНДС");;
				
				Для Каждого НезаполненнаяСтрока Из НайденныеСтроки Цикл
					СтавкаНДСНоменклатуры = СвойстваНоменклатуры[НезаполненнаяСтрока.Номенклатура].СтавкаНДС;
					Если ЗначениеЗаполнено(СтавкаНДСНоменклатуры) Тогда
						НезаполненнаяСтрока.СтавкаНДС = СтавкаНДСНоменклатуры;
					Иначе
						НезаполненнаяСтрока.СтавкаНДС = СтавкаНДС;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		Иначе
			// в документе-основании не установлен признак УчитыватьНДС
			Для Каждого СтрокаТабЧасти Из Объект.Товары Цикл
				СтрокаТабЧасти.СтавкаНДС = СтавкаБезНДС;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.Услуги.Количество() > 0 Тогда
		Если УчитыватьНДСОснования Тогда
			НайденныеСтроки = Объект.Услуги.НайтиСтроки(ПараметрыОтбора);
			Если НайденныеСтроки.Количество() > 0 Тогда
				// Определим ставки НДС из справочника Номенклатура
				СписокНоменклатуры = Новый Массив;
				Для Каждого НезаполненнаяСтрока Из НайденныеСтроки Цикл
					СписокНоменклатуры.Добавить(НезаполненнаяСтрока.Номенклатура);
				КонецЦикла;
				СвойстваНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(СписокНоменклатуры, "СтавкаНДС");;
				
				Для Каждого НезаполненнаяСтрока Из НайденныеСтроки Цикл
					СтавкаНДСНоменклатуры = СвойстваНоменклатуры[НезаполненнаяСтрока.Номенклатура].СтавкаНДС;
					Если ЗначениеЗаполнено(СтавкаНДСНоменклатуры) Тогда
						НезаполненнаяСтрока.СтавкаНДС = СтавкаНДСНоменклатуры;
					Иначе
						НезаполненнаяСтрока.СтавкаНДС = СтавкаНДС;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		Иначе
			// в документе-основании не установлен признак УчитыватьНДС
			Для Каждого СтрокаТабЧасти Из Объект.Услуги Цикл
				СтрокаТабЧасти.СтавкаНДС = СтавкаБезНДС;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

	Если Объект.ОС.Количество() > 0 И ЗначениеЗаполнено(СтавкаНДС) Тогда
		Если УчитыватьНДСОснования Тогда
			НайденныеСтроки = Объект.ОС.НайтиСтроки(ПараметрыОтбора);
			Если НайденныеСтроки.Количество() > 0 Тогда
				Для Каждого НезаполненнаяСтрока Из НайденныеСтроки Цикл
					НезаполненнаяСтрока.СтавкаНДС = СтавкаНДС;
				КонецЦикла;
			КонецЕсли;
		Иначе
			// в документе-основании не установлен признак УчитыватьНДС
			Для Каждого СтрокаТабЧасти Из Объект.ОС Цикл
				СтрокаТабЧасти.СтавкаНДС = СтавкаБезНДС;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

	Если Объект.НМА.Количество() > 1 И ЗначениеЗаполнено(СтавкаНДС) Тогда
		Если УчитыватьНДСОснования Тогда
			НайденныеСтроки = Объект.НМА.НайтиСтроки(ПараметрыОтбора);
			Если НайденныеСтроки.Количество() > 0 Тогда
				Для Каждого НезаполненнаяСтрока Из НайденныеСтроки Цикл
					НезаполненнаяСтрока.СтавкаНДС = СтавкаНДС;
				КонецЦикла;
			КонецЕсли;
		Иначе
			// в документе-основании не установлен признак УчитыватьНДС
			Для Каждого СтрокаТабЧасти Из Объект.НМА Цикл
				СтрокаТабЧасти.СтавкаНДС = СтавкаБезНДС;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;   

КонецПроцедуры

//Функция получает список товаров из счет-фактуры, которые уже введены в документе отгрузки.
//
Функция ПолучитьСписокТоваровПодтвержденныхОтгрузками(СчетФактура, ЕстьАкциз) Экспорт
	
	СтруктураОстатков = Новый Структура;
	
	Товары = ИнициализацияТаблицыЗначений(,Новый ОписаниеТипов("СправочникСсылка.Номенклатура"), ЕстьАкциз, "Товары");
	Услуги = ИнициализацияТаблицыЗначений(,Новый ОписаниеТипов("СправочникСсылка.Номенклатура"),,"Услуги");
	ОС     = ИнициализацияТаблицыЗначений("ОсновноеСредство",Новый ОписаниеТипов("СправочникСсылка.ОсновныеСредства"));
	НМА    = Неопределено;
	Если Метаданные.Справочники.Найти("НематериальныеАктивы") <> Неопределено Тогда
		НМА = ИнициализацияТаблицыЗначений("НематериальныйАктив", Новый ОписаниеТипов("СправочникСсылка.НематериальныеАктивы"));
	КонецЕсли;
	СтруктураОстатков.Вставить("Товары", Товары);
	СтруктураОстатков.Вставить("Услуги", Услуги);
	СтруктураОстатков.Вставить("ОС"    , ОС);
	Если НМА <> Неопределено Тогда
		СтруктураОстатков.Вставить("НМА", НМА);
	КонецЕсли;
	
	Для Каждого СтрЗначение ИЗ  СтруктураОстатков Цикл
		Для Каждого Основание ИЗ СчетФактура.ДокументыОснования Цикл
		
			Если НЕ ЗначениеЗаполнено(Основание.ДокументОснование) Тогда
				Продолжить;
			КонецЕсли;
			МетаданныеОснования   = Основание.ДокументОснование.Метаданные();
			ИмяДокументаОснования = МетаданныеОснования.Имя;
		
			Если СтрЗначение.Ключ = "Услуги" И ИмяДокументаОснования = "ПоступлениеДопРасходов"	Тогда
				НоваяСтрока = СтруктураОстатков.Услуги.Добавить();				
				НоваяСтрока.Содержание  = Основание.ДокументОснование.Содержание;
				НоваяСтрока.СтавкаНДС   = Основание.ДокументОснование.СтавкаНДС;
				НоваяСтрока.Сумма       = Основание.ДокументОснование.Сумма;									
				НоваяСтрока.СуммаНДС    = Основание.ДокументОснование.СуммаНДС;									
				НоваяСтрока.Количество  = 0;				
			ИначеЕсли СтрЗначение.Ключ = "НМА" И ИмяДокументаОснования = "ПередачаНМА" Тогда
				НоваяСтрока = СтруктураОстатков.НМА.Добавить();
				НоваяСтрока.НематериальныйАктив  = Основание.ДокументОснование.НематериальныйАктив;
				НоваяСтрока.СтавкаНДС 	= Основание.ДокументОснование.СтавкаНДС;
				НоваяСтрока.СуммаНДС    = Основание.ДокументОснование.СуммаНДС;									
				НоваяСтрока.Сумма     	= Основание.ДокументОснование.Сумма;			
			ИначеЕсли  ИмяДокументаОснования = "РеализацияУслугПоПереработке" И СтрЗначение.Ключ = "Товары" Тогда
				Для Каждого  Строка Из Основание.ДокументОснование["Услуги"] Цикл
					НоваяСтрока = СтрЗначение.Значение.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
				КонецЦикла;   				
			ИначеЕсли МетаданныеОснования.ТабличныеЧасти.Найти(СтрЗначение.Ключ) <> Неопределено Тогда
				Для Каждого  Строка Из Основание.ДокументОснование[СтрЗначение.Ключ] Цикл
					НоваяСтрока = СтрЗначение.Значение.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);

					Если  СтрЗначение.Ключ = "Товары" И ИмяДокументаОснования = "ОтчетКомиссионераОПродажах" Тогда
						НоваяСтрока.СтавкаНДС = Строка.СтавкаНДСВознаграждения;
						НоваяСтрока.Сумма     = Строка.СуммаВознаграждения;			
						НоваяСтрока.СуммаНДС  = Строка.СуммаНДСВознаграждения;
					КонецЕсли; 					
					
				КонецЦикла; 				
			КонецЕсли;			
		КонецЦикла;
	КонецЦикла;
	
	//далее необходимо свернуть по измерениям
	Если СтруктураОстатков.Товары.Количество() > 1  И ЕстьАкциз Тогда
		СтруктураОстатков.Товары.Свернуть("Номенклатура,Цена,СтавкаНДС,СтавкаАкциза, ЕдиницаИзмерения", "Количество,Сумма");
		
	ИначеЕсли СтруктураОстатков.Товары.Количество() > 1  И Не ЕстьАкциз Тогда
		СтруктураОстатков.Товары.Свернуть("Номенклатура,Цена,СтавкаНДС, ЕдиницаИзмерения", "Количество, Сумма");	
	КонецЕсли;
			
	Если СтруктураОстатков.Услуги.Количество() > 1 Тогда
		СтруктураОстатков.Услуги.Свернуть("Номенклатура,Цена,Содержание,СтавкаНДС", "Количество, Сумма");
	КонецЕсли;
	
	Если СтруктураОстатков.ОС.Количество() > 1 Тогда
		СтруктураОстатков.ОС.Свернуть("ОсновноеСредство,СтавкаНДС", "Сумма");
	КонецЕсли;
	
	Если НМА <> Неопределено Тогда
		Если СтруктураОстатков.НМА.Количество() > 1 Тогда
			СтруктураОстатков.НМА.Свернуть("НематериальныйАктив,СтавкаНДС", "Сумма");
		КонецЕсли;
	КонецЕсли;
			
	Возврат СтруктураОстатков;
	
КонецФункции

//Функция получает остаток количества(суммы) для указания их в новом документе-основания
//Данные берутся из уже заведенных документов-оснований.
//
Функция ПолучитьОстатокИзСФ(Строка, ИмяТабЧасти, СтруктураОстатков, ВозвратТоваров, ЕстьАкциз, ПоступлениеДопРасходов = Ложь, СвернутаяТаблицаСФ = Неопределено) Экспорт
	
	Перем ТабЧасть;
	
	Отбор = Новый Структура;
	ЕстьКоличество = Истина;	
	
	Если ИмяТабЧасти = "Товары" Тогда
		Отбор.Вставить("Номенклатура",Строка.Номенклатура);		
		Отбор.Вставить("СтавкаНДС",Строка.СтавкаНДС);
		Отбор.Вставить("Цена",Строка.Цена);
		Если ЕстьАкциз Тогда
			Отбор.Вставить("СтавкаАкциза",Строка.СтавкаАкциза);
		КонецЕсли;
		
		Отбор.Вставить("ЕдиницаИзмерения",Строка.ЕдиницаИзмерения);		
			
	ИначеЕсли ИмяТабЧасти = "ОС" Тогда
		Отбор.Вставить("ОсновноеСредство",Строка.ОсновноеСредство);
		Отбор.Вставить("СтавкаНДС",Строка.СтавкаНДС);
		
		ЕстьКоличество = Ложь;
		
	ИначеЕсли ИмяТабЧасти = "НМА" Тогда
		Отбор.Вставить("НематериальныйАктив",Строка.НематериальныйАктив);
		Отбор.Вставить("СтавкаНДС",Строка.СтавкаНДС);
			
		ЕстьКоличество = Ложь;
		
	ИначеЕсли ИмяТабЧасти = "Услуги" Тогда
		Если Не ПоступлениеДопРасходов Тогда
			Отбор.Вставить("Номенклатура",Строка.Номенклатура);
			Отбор.Вставить("Содержание"  ,Строка.Содержание);		
		КонецЕсли;
		
		Отбор.Вставить("СтавкаНДС",Строка.СтавкаНДС);
		Отбор.Вставить("Цена",Строка.Цена);
	КонецЕсли;
	
	//найдем строке в структуре остатков
	Если Не СтруктураОстатков.Свойство(ИмяТабЧасти, ТабЧасть) Тогда
		Возврат 0;
	КонецЕсли;
	
	СтруктураОст = Новый Структура;
	СтруктураОст.Вставить("Количество",0);
	СтруктураОст.Вставить("Сумма",0);
	
	Строки   = ТабЧасть.НайтиСтроки(Отбор);
	
	Если СвернутаяТаблицаСФ <> Неопределено Тогда
		СтрокиСФ = СвернутаяТаблицаСФ.НайтиСтроки(Отбор);
	Иначе
		СтрокиСФ = Новый Массив;
	КонецЕсли;
	
	Если Строки.Количество() = 0 Тогда
	
		Если ЕстьКоличество   Тогда			
			СтруктураОст.Количество = Строка.Количество;			
		КонецЕсли;
		СтруктураОст.Сумма  = Строка.Сумма;					
	
		Возврат СтруктураОст;
		
	КонецЕсли;
	
	Если ЕстьКоличество  Тогда
		
		Если СтрокиСФ.Количество() > 0 Тогда
			Если СтрокиСФ[0].Количество = 0 Тогда
				Возврат СтруктураОст;
			Иначе
				Количество = ?(ВозвратТоваров, СтрокиСФ[0].Количество * (-1), СтрокиСФ[0].Количество);
				Сумма      = ?(ВозвратТоваров, СтрокиСФ[0].Сумма * (-1), СтрокиСФ[0].Сумма);
			КонецЕсли;
		Иначе
			Количество = ?(ВозвратТоваров, Строка.Количество * (-1), Строка.Количество);
			Сумма      = ?(ВозвратТоваров, Строка.Сумма * (-1), Строка.Сумма);
		КонецЕсли;
		
		КоличествоВДокумент = Количество - Строки[0].Количество;
		Если КоличествоВДокумент < 0 Тогда
			КоличествоВДокумент = 0;
		КонецЕсли;
		СтруктураОст.Количество = ?(ВозвратТоваров, КоличествоВДокумент * (-1),КоличествоВДокумент);
		
		СуммаВДокумент = Сумма - Строки[0].Сумма;
		Если СуммаВДокумент < 0 Тогда
			СуммаВДокумент = 0;
		КонецЕсли;
		СтруктураОст.Сумма = ?(ВозвратТоваров, СуммаВДокумент * (-1),СуммаВДокумент);
		
		Если  ИмяТабЧасти = "Услуги" Тогда
			//Сумма  = Строка.Сумма - Строки[0].Сумма;
			Сумма  = СуммаВДокумент;
			Если Сумма < 0 Тогда
				Сумма = 0;
			КонецЕсли;	
			СтруктураОст.Сумма = Сумма;
		КонецЕсли;
		
		Если СтрокиСФ.Количество() > 0 Тогда
			СтрокиСФ[0].Количество = СтрокиСФ[0].Количество - КоличествоВДокумент - Строки[0].Количество;
			СтрокиСФ[0].Сумма      = СтрокиСФ[0].Сумма      - СуммаВДокумент      - Строки[0].Сумма;
		КонецЕсли;
		
	Иначе
		СуммаВДокумент  = Строка.Сумма - Строки[0].Сумма;
		Если СуммаВДокумент < 0 Тогда
			СуммаВДокумент = 0;
		КонецЕсли;	
		СтруктураОст.Сумма = СуммаВДокумент;
	КонецЕсли;
	
	Возврат СтруктураОст;	
КонецФункции 

Процедура ДополнитьСчетФактуруПоОснованию(СчетФактураСсылка, ОснованиеСсылка, ВидСчетаФактуры, ДанныеФормы) Экспорт
	
	Если ЗначениеЗаполнено(СчетФактураСсылка) И ЗначениеЗаполнено(ОснованиеСсылка) Тогда
		ОбъектСчетаФактуры = СчетФактураСсылка.ПолучитьОбъект();
		ОбъектСчетаФактуры.ДополнительныеСвойства.Вставить("ЗаписьИзДокументаПодтверждающегоОтгрузку", Истина);
		//добавим документ основания
		НовСтрокаОснований = ОбъектСчетаФактуры.ДокументыОснования.Добавить();
		НовСтрокаОснований.ДокументОснование = ОснованиеСсылка;
		//добавить данные из текущего документа
		ЗаполнитьТабличныеЧастиИзДокументаОснования(ОбъектСчетаФактуры, ОснованиеСсылка);		
		Документы[ВидСчетаФактуры].СвернутьТабличныеЧасти(ОбъектСчетаФактуры);
		ДанныеФормы.СчетФактура = СчетФактураСсылка;
		Попытка
			ОбъектСчетаФактуры.Записать();
			ПолучитьДанныеСчетаФактуры(ДанныеФормы, ВидСчетаФактуры);
		Исключение
			Информация = ИнформацияОбОшибке();
			ТекстСообщения = НСтр("ru='Не удалось дополнить выбранный счет-фактуру по причине: %1'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, КраткоеПредставлениеОшибки(Информация));
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ОснованиеСсылка);
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьСчетФактуруПоОснованию(ВидСчетаФактуры, ОснованиеСсылка, ДанныеФормы) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ОснованиеСсылка) ИЛИ ПустаяСтрока(ВидСчетаФактуры) ИЛИ ДанныеФормы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		СчетФактура = Документы[ВидСчетаФактуры].СоздатьДокументНаОсновании(ОснованиеСсылка, ДанныеФормы);
	Исключение
		Информация = ИнформацияОбОшибке();
		ТекстСообщения = НСтр("ru='Не удалось создать счет-фактуру по причине: %1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, КраткоеПредставлениеОшибки(Информация));
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ОснованиеСсылка);
		Возврат;
	КонецПопытки;
	
	Если ЗначениеЗаполнено(СчетФактура) Тогда
		ДанныеФормы.СчетФактура = СчетФактура;
		ПолучитьДанныеСчетаФактуры(ДанныеФормы, ВидСчетаФактуры);
	КонецЕсли;				  
	
КонецПроцедуры

Процедура ПерезаполнитьСчетФактуру(ОбъектСчетаФактуры, ДокументОтгрузки, ВидСчетаФактуры, Отказ, ИспользоватьТранзакции = Ложь) Экспорт
	
	Если ДокументОтгрузки = Неопределено Тогда
		РезультатПроверки = Истина;
		// С учетом всех документов оснований
		Для Каждого Основание Из ОбъектСчетаФактуры.ДокументыОснования Цикл
			РезультатПроверки = РезультатПроверки И ЗаполнитьРеквизитыШапкиСчетаФактуры(ОбъектСчетаФактуры, Основание.ДокументОснование, ВидСчетаФактуры, Отказ);
		КонецЦикла;	
	Иначе
		// заполнение из указанного первичного документа
		РезультатПроверки = ЗаполнитьРеквизитыШапкиСчетаФактуры(ОбъектСчетаФактуры, ДокументОтгрузки, ВидСчетаФактуры, Отказ)
	КонецЕсли;
	
	// Обнаружены нарушения в реквизитах шапки
	Если РезультатПроверки = ЛОЖЬ Тогда
		Возврат;
	КонецЕсли;
	
	// Табличная часть перезаполняется в любом случае.	
	//очистим таб.части
	ОчиститьТабЧасти(ОбъектСчетаФактуры);
	
	Для Каждого Основание Из ОбъектСчетаФактуры.ДокументыОснования Цикл
		
		ЗаполнитьТабличныеЧастиИзДокументаОснования(ОбъектСчетаФактуры, Основание.ДокументОснование);
						
		УчетНДСИАкциза.ПроверитьСтавкиНДСВТабличныхЧастях(ОбъектСчетаФактуры, Основание.ДокументОснование.УчитыватьНДС);
		
	КонецЦикла;
	
	Документы[ВидСчетаФактуры].СвернутьТабличныеЧасти(ОбъектСчетаФактуры);
	
	Попытка	
		Если ОбъектСчетаФактуры.Проведен Тогда 
			ОбъектСчетаФактуры.Записать(РежимЗаписиДокумента.Проведение);
		Иначе 
			ОбъектСчетаФактуры.Записать(РежимЗаписиДокумента.Запись);
		КонецЕсли;
		
		Если ИспользоватьТранзакции И ТранзакцияАктивна() Тогда
			ЗафиксироватьТранзакцию();
		КонецЕсли;
		
	Исключение
		Если ИспользоватьТранзакции И ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
			
		Информация = ИнформацияОбОшибке();
		
		Если НЕ КраткоеПредставлениеОшибки(Информация) = "Транзакция не активна" Тогда
			ТекстСообщения = НСтр("ru='Счет-фактура не записан по причине: %1'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, КраткоеПредставлениеОшибки(Информация));
			ОбщегоНазначенияБК.ОшибкаПриПроведении(ТекстСообщения, Отказ);
		КонецЕсли;
	КонецПопытки
	
КонецПроцедуры

Процедура ПолучитьДанныеСчетаФактуры(ДанныеФормы, ВидСчетаФактуры) Экспорт
	
	Если ЗначениеЗаполнено(ДанныеФормы.СчетФактура) Тогда
	    СчетФактура = ДанныеФормы.СчетФактура;
	Иначе
		СчетФактура = ОбщегоНазначенияБК.НайтиПодчиненныйДокумент(ДанныеФормы.Объект.Ссылка, ВидСчетаФактуры);
	КонецЕсли;
	
	ДанныеСчетаФактуры = Неопределено;
		
	Если ЗначениеЗаполнено(СчетФактура) Тогда
			
		Если ВидСчетаФактуры = "СчетФактураПолученный" Тогда
			ДополнительныеРеквизиты = " НомерВходящегоДокумента, ДатаВходящегоДокумента,";
		Иначе
			ДополнительныеРеквизиты = "";
		КонецЕсли;
		
		РеквизитыСФ = Новый Структура(
			"Ссылка, " + ДополнительныеРеквизиты + " Дата, Проведен, ПометкаУдаления",
			СчетФактура, "", "", '00010101', '00010101', Ложь, Ложь);
			
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			СчетФактура, "" + ДополнительныеРеквизиты + " Дата, Проведен, ПометкаУдаления");
		ЗаполнитьЗначенияСвойств(РеквизитыСФ, ЗначенияРеквизитов);
		
		ТекстСчетаФактуры  = ПолучитьТекстСчетаФактуры(РеквизитыСФ, ВидСчетаФактуры);
		
		ДанныеСчетаФактуры = Новый Структура("ТекстСчетаФактуры, Проведен, ПометкаУдаления",
		                                      ТекстСчетаФактуры, РеквизитыСФ.Проведен, РеквизитыСФ.ПометкаУдаления);
		
	КонецЕсли;

	ДанныеФормы.СчетФактура        = СчетФактура;
	ДанныеФормы.ДанныеСчетаФактуры = ДанныеСчетаФактуры;

КонецПроцедуры 

Функция ПолучитьТекстСчетаФактуры(ДанныеСчетаФактуры, ВидСчетаФактуры) Экспорт
	
	Текст = НСтр("ru = 'Ввести счет-фактуру'");
	
	СчетФактура = Неопределено;
	ДанныеСчетаФактуры.Свойство("Ссылка", СчетФактура);
	
	Если ЗначениеЗаполнено(СчетФактура) Тогда
		
		Текст = Строка(СчетФактура);
		
		Если ВидСчетаФактуры = "СчетФактураПолученный" И ЗначениеЗаполнено(ДанныеСчетаФактуры.НомерВходящегоДокумента) Тогда
			Если ЗначениеЗаполнено(ДанныеСчетаФактуры.ДатаВходящегоДокумента) Тогда
				Текст = Текст + " " + СтрШаблон(НСтр("ru='(№%1 от %2)'"), ДанныеСчетаФактуры.НомерВходящегоДокумента, Формат(ДанныеСчетаФактуры.ДатаВходящегоДокумента,"ДФ=dd.MM.yyyy"));
			Иначе
				Текст = Текст + " " + СтрШаблон(НСтр("ru='(№%1)'"), ДанныеСчетаФактуры.НомерВходящегоДокумента);
			КонецЕсли;
		КонецЕсли;
		
		Если ДанныеСчетаФактуры.ПометкаУдаления Тогда
			Текст = Текст + " " + НСтр("ru='(помечен на удаление)'");
		ИначеЕсли Не ДанныеСчетаФактуры.Проведен Тогда
			Текст = Текст + " " + НСтр("ru='(не проведен)'");
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Текст
	
КонецФункции

// Выполняет общие для всех документов действия связанные с пометкой на удаление
// счета-фактуры при удалении документа, являющегося основание данного счета-фактуры.
//
// Параметры:
//  ДокументОбъект  - объект документа, 
//  ВидСчетаФактуры - строка, вид счета-фактуры, по умолчанию "СчетФактураВыданный"
//
Процедура СинхронизацияПометкиНаУдалениеУСчетаФактуры(ДокументОбъект, ВидСчетаФактуры = "СчетФактураВыданный", Отказ = Ложь) Экспорт
	
	Если ДокументОбъект.ПометкаУдаления <> ДокументОбъект.Ссылка.ПометкаУдаления Тогда
		
		// Произошло изменение пометки на удаление
		// Попытаемся найти счет-фактуру
		СтруктураОтбора = Новый Структура("ПометкаУдаления", НЕ ДокументОбъект.ПометкаУдаления);
		СписокСчетФактур = НайтиПодчиненныйСчетФактуру(ДокументОбъект.Ссылка, ВидСчетаФактуры, СтруктураОтбора, ДокументОбъект.Ссылка);
		
		Если СписокСчетФактур = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		// Изменения пометки удаления необходимо соблюдать порядок удаления/отмены удаления документов
		Если ДокументОбъект.ПометкаУдаления Тогда
			// устанавливать пометку удаления нужно начиная с последнего объекта в цепочке. В противном случае сработают процедуры контроля при удалении объекта.
			СписокСчетФактур.Сортировать("ПриоритетВидаСчетаФактуры убыв, ДатаСчетаФактуры убыв, Ссылка убыв"); // СФ обычно регистрируются датой начала дня, поэтому добавляет в параметры сортировки ссылку
		Иначе
			// отменять пометку  - начиная с первого объекта в цепочке
		    СписокСчетФактур.Сортировать("ПриоритетВидаСчетаФактуры возр, ДатаСчетаФактуры возр, Ссылка возр");
		КонецЕсли;		

		НеобходимВыводСообщения = ПользователиБКВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию(Пользователи.ТекущийПользователь(), "ВыводитьСообщенияДляСчетовФактур");
		
		Для Каждого Счет Из СписокСчетФактур  Цикл
			
			СчетФактура = Счет.Ссылка;
			
			//Если потерпели неудачу, то необходимо ввести новый документ 
			Если ЗначениеЗаполнено(СчетФактура) Тогда
				Попытка
					// Есть счет-фактура, нужно установить для него пометку удаления
					СчетФактураОбъект = СчетФактура.ПолучитьОбъект();
					СчетФактураОбъект.ДополнительныеСвойства.Вставить("ЗаписьИзДокументаПодтверждающегоОтгрузку", Истина);
					
					Если ДокументОбъект.ПометкаУдаления Тогда
						// Если в счете-фаткуре несколько оснований, счет-фактура не помечается на удаление,
						// а очищается ссылка на текущее основание.
						МетаданныеДокумента = СчетФактураОбъект.Метаданные();
						
						Если НЕ МетаданныеДокумента.ТабличныеЧасти.Найти("ДокументыОснования") = Неопределено  
							И СчетФактураОбъект.ДокументыОснования.Количество() > СчетФактураОбъект.ДокументыОснования.НайтиСтроки(Новый Структура("ДокументОснование",ДокументОбъект.Ссылка)).Количество() Тогда
							
							СтрокиКУдалению = СчетФактураОбъект.ДокументыОснования.НайтиСтроки(Новый Структура("ДокументОснование",ДокументОбъект.Ссылка));
							Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
								СчетФактураОбъект.ДокументыОснования.Удалить(СтрокаКУдалению);
							КонецЦикла;
							СчетФактураОбъект.ДокументОснование = СчетФактураОбъект.ДокументыОснования[0].ДокументОснование;
							//Если счет-фактура подтверждена документами основания, тогда нужно перезаполнить документ
							Если СчетФактураОбъект.ПодтвержденДокументамиОтгрузки Тогда
								//очистим все табличные части
								ОчиститьТабЧасти(СчетФактураОбъект);
								Для Каждого ДокОснование Из СчетФактураОбъект.ДокументыОснования Цикл
									ЗаполнитьТабличныеЧастиИзДокументаОснования(СчетФактураОбъект, ДокОснование.ДокументОснование);
								КонецЦикла;
								Документы[ВидСчетаФактуры].СвернутьТабличныеЧасти(СчетФактураОбъект);
							КонецЕсли;
							
							СчетФактураОбъект.Записать();
							Если НеобходимВыводСообщения Тогда
								ТекстСообщения = НСтр("ru='Из документа «%1» удалена ссылка на «%2».'");
								ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, СчетФактура, ДокументОбъект);
								ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, СчетФактура);
							КонецЕсли;
							
							Продолжить;
						КонецЕсли; 
					КонецЕсли; 
					
					СчетФактураОбъект.УстановитьПометкуУдаления(ДокументОбъект.ПометкаУдаления);
					Если НеобходимВыводСообщения Тогда
						Если ДокументОбъект.ПометкаУдаления Тогда
							ТекстСообщения = НСтр("ru='Документ «%1» помечен на удаление.'");
							ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, СчетФактура);
							ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, СчетФактура);
						Иначе
							ТекстСообщения = НСтр("ru='У документа «%1» снята пометка на удаление.'");
							ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, СчетФактура);
							ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, СчетФактура);
						КонецЕсли;
					КонецЕсли;
					
				Исключение
					Если НеобходимВыводСообщения Тогда
						Если ДокументОбъект.ПометкаУдаления Тогда
							ТекстСообщения = НСтр("ru='Не удалось установить пометку удаления документа «%1».'");
							ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, СчетФактура);
							ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, СчетФактура);
						Иначе
							ТекстСообщения = НСтр("ru='Не удалось снять пометку удаления документа «%1».'");
							ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, СчетФактура);
							ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, СчетФактура);
						КонецЕсли;
					КонецЕсли;
					Отказ = Истина;
				КонецПопытки;
				
			КонецЕсли;
		КонецЦикла; 	
	КонецЕсли;
		
КонецПроцедуры // СинхронизацияПометкиНаУдалениеУСчетаФактуры()

// Выполняет общие для всех документов действия связанные с пометкой проведения
// счета-фактуры при проведении/отмене проведения документа, являющегося основание данного счета-фактуры.
//
// Параметры:
//  ДокументСсылка  - объект документа, 
//  ВидСчетаФактуры - строка, вид счета-фактуры, по умолчанию "СчетФактураВыданный"
//
Процедура СинхронизацияПризнакаПроведенияУСчетаФактуры(ДокументСсылка, Отказ, Провести = Истина, ВидСчетаФактуры = "СчетФактураВыданный") Экспорт
	
	// Произошло изменение признака проведения
	// Попытаемся найти счет-фактуру
	НеобходимВыводСообщения = ПользователиБКВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию(Пользователи.ТекущийПользователь(), "ВыводитьСообщенияДляСчетовФактур");
	
	// выбираем документы для перепроведения
	СписокСчетФактур = НайтиПодчиненныйСчетФактуру(ДокументСсылка, ВидСчетаФактуры, , ДокументСсылка);
	
	Если СписокСчетФактур = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Для изменения признака проведения необходимо соблюдать следования документов.
	Если Провести Тогда
		// Проводить начиная с первого объекта в цепочке.
		// СФ обычно регистрируются датой начала дня, поэтому в параметры сортировки добавлена ссылка.
		СписокСчетФактур.Сортировать("ПриоритетВидаСчетаФактуры Возр, ДатаСчетаФактуры Возр, Ссылка Возр");
	Иначе
		// Отменять проведение нужно начиная с последнего объекта в цепочке.
		// В противном случае сработают процедуры контроля при отмене проведения объекта.
		// СФ обычно регистрируются датой начала дня, поэтому в параметры сортировки добавлена ссылка.
		СписокСчетФактур.Сортировать("ПриоритетВидаСчетаФактуры Убыв, ДатаСчетаФактуры Убыв, Ссылка Убыв");
	КонецЕсли;		
	
	Для Каждого ДокументСчетФактура Из СписокСчетФактур  Цикл			
		Если ЗначениеЗаполнено(ДокументСчетФактура.Ссылка) Тогда
			// Нельзя провести документ, помеченный на удаление
			Если Провести И ДокументСчетФактура.Ссылка.ПометкаУдаления Тогда
				Если НеобходимВыводСообщения Тогда
					ТекстСообщения = НСтр("ru='Подчиненный документ «%1» помечен на удаление. Его обработка не производится ...'");
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ДокументСчетФактура.Ссылка);
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ДокументСчетФактура.Ссылка);
				КонецЕсли;
				Продолжить;
			КонецЕсли;	
			
			// Пытаемся синхронизировать режимы проведения
			ОбъектСчетФактура = ДокументСчетФактура.Ссылка.ПолучитьОбъект();
			ОбъектСчетФактура.ДополнительныеСвойства.Вставить("ЗаписьИзДокументаПодтверждающегоОтгрузку", Истина);
			РежимПроведения = ?(Провести, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.ОтменаПроведения);
		
			Если Провести Тогда
				ТекстИсключения = НСтр("ru='Документ «%1». При проведении подчиненного документа «%2» возникли ошибки. Документ не может быть записан ....'");
			Иначе
				ТекстИсключения = НСтр("ru='Документ «%1». При отмене проведения подчиненного документа «%2» возникли ошибки. Документ не может быть записан ....'");
			КонецЕсли;
			ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстИсключения,  ДокументСсылка, ДокументСчетФактура.Ссылка);
			
			Попытка
				ОбъектСчетФактура.Записать(РежимПроведения);
				Если НеобходимВыводСообщения Тогда
					Если Провести Тогда
						ТекстСообщения = НСтр("ru='Проведен подчиненный документ «%1».'");
					Иначе
						ТекстСообщения = НСтр("ru='Отменено проведение подчиненного документа «%1».'");
					КонецЕсли;
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ДокументСчетФактура.Ссылка);
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ДокументСчетФактура.Ссылка);
				КонецЕсли;
			Исключение
				ОбщегоНазначения.СообщитьПользователю(ТекстИсключения, ДокументСсылка, , , Отказ);
				// Далее продолжать не имеет смысла,
				// потому что уже произойдет откат транзакции записи для ДокументСсылка
				Возврат;
			КонецПопытки;
			
		КонецЕсли;		
	КонецЦикла;			 	
	
КонецПроцедуры	// СинхронизацияПризнакаПроведенияУСчетаФактуры

//Процедура синхронизирует данные документа отгрузки и подчинненой ему счет-фактуры
//
Процедура СинхронизироватьДанныеДокументаИСчетаФактуры(ДокументОбъект, Отказ, ВидСчетаФактуры = "СчетФактураВыданный") Экспорт
	
	//Если документ основания удален, то нет необходимости синхронизировать
	Если ДокументОбъект.ПометкаУдаления Тогда 
		Возврат;
	КонецЕсли;
		
	//Попытаемся найти счет-фактуру
	СчетФактура = ОбщегоНазначенияБК.НайтиПодчиненныйДокумент(ДокументОбъект.Ссылка, ВидСчетаФактуры);
	
	Если СчетФактура = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СчетФактура) И СчетФактура.ПодтвержденДокументамиОтгрузки Тогда
		
		НеобходимВыводСообщения = ПользователиБКВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию(Пользователи.ТекущийПользователь(), "ВыводитьСообщенияДляСчетовФактур");
		
		Если НеобходимВыводСообщения Тогда
			Если ВидСчетаФактуры = "СчетФактураВыданный" Тогда 
				ТекстСообщения = НСтр("ru='Для документа отгрузки зарегистрирован счет-фактура: «%1», данные счета-фактуры перезаполнены данными документа-основания.'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, СчетФактура);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, СчетФактура);
			Иначе 		
				ТекстСообщения = НСтр("ru='Для документа поступления зарегистрирован счет-фактура: «%1», данные счета-фактуры перезаполнены данными документа-основания.'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, СчетФактура);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, СчетФактура);
			КонецЕсли;			
		КонецЕсли;
		
		ОбъектСчетаФактуры = СчетФактура.ПолучитьОбъект();
		ОбъектСчетаФактуры.ДополнительныеСвойства.Вставить("ЗаписьИзДокументаПодтверждающегоОтгрузку", Истина);
		
		ПерезаполнитьСчетФактуру(ОбъектСчетаФактуры, ДокументОбъект, ВидСчетаФактуры, Отказ);
		
	КонецЕсли;
	
КонецПроцедуры    //СинхронизироватьДанныеДокументаИСчетаФактуры() 

// Функция производит поиск счета-фактуры (полученного или выданного), у которого в качестве документа-основания указана
// переданная ссылка.
//
// Параметры:
//  ДокументСсылка  - ссылка на документ, для которого надо найти подчиненный документ,
//  ВидСчетаФактуры - строка, вид документа, по умолчанию "СчетФактураВыданный"
//  Отбор 			- структура с именами и значениями реквизитов СФ для дополнительного отбора
//	
// Возвращаемое значение:
//  Если нашли, то возвращаем ссылку, не нашли - Неопределено
//
Функция НайтиПодчиненныйСчетФактуру(Знач ДокументСсылка, ВидДокумента = "СчетФактураВыданный", Отбор = Неопределено, МетаданныеОснования = Неопределено) Экспорт

	Если не ЗначениеЗаполнено(ДокументСсылка) Тогда
		Возврат Неопределено;
	Иначе
		Если МетаданныеОснования = Неопределено Тогда
			МетаданныеОснования = ДокументСсылка.Метаданные();
		КонецЕсли; 		
		
	КонецЕсли;
	
	НайденныйДокумент = Неопределено;

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СФ.Ссылка,
	|	СФ.Ссылка.Дата КАК ДатаСчетаФактуры,
	|	СФ.Ссылка.ПометкаУдаления КАК ПометкаУдаленияСчетаФактуры,
	|	ВЫБОР КОГДА СФ.Ссылка.ВидСчетаФактуры = Значение(Перечисление.ВидыСчетовФактур.Исправленный) Тогда 1 Иначе 0 Конец КАК ПриоритетВидаСчетаФактуры
	|ПОМЕСТИТЬ ВТ_ПодчиненныеДокументы
	|ИЗ 
	|	Документ.СчетФактураВыданный.ДокументыОснования КАК СФ
	|ГДЕ
	|	СФ.ДокументОснование = &ДокументСсылка";
	
	Если не ВидДокумента = "СчетФактураВыданный" Тогда
		Запрос.Текст = СтрЗаменитЬ(Запрос.Текст,"СчетФактураВыданный",ВидДокумента);
	КонецЕсли; 
		
	Если не Отбор = Неопределено Тогда
		Для каждого ЭлементОтбора Из Отбор Цикл
			Если ТипЗнч(ЭлементОтбора.Значение) = Тип("Булево") Тогда
			
				Запрос.Текст = Запрос.Текст + "
					|	И "+?(ЭлементОтбора.Значение," "," НЕ ")+" Ссылка."+ЭлементОтбора.Ключ;
			Иначе
				Запрос.УстановитьПараметр(ЭлементОтбора.Ключ, ЭлементОтбора.Значение);
				Запрос.Текст = Запрос.Текст + "
					|	И Ссылка."+ЭлементОтбора.Ключ+" = &"+ЭлементОтбора.Ключ;
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли; 
	Запрос.Текст = Запрос.Текст + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПодчиненныеДокументы.Ссылка КАК Ссылка,
	|	ПодчиненныеДокументы.ДатаСчетаФактуры КАК ДатаСчетаФактуры,
	|	ПодчиненныеДокументы.ПометкаУдаленияСчетаФактуры КАК ПометкаУдаленияСчетаФактуры,
	|	ПодчиненныеДокументы.ПриоритетВидаСчетаФактуры КАК ПриоритетВидаСчетаФактуры
	|ИЗ
	|	ВТ_ПодчиненныеДокументы КАК ПодчиненныеДокументы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаФактурыПрекратившиеДействие.СрезПоследних(
	|				,
	|				СчетФактура В
	|					(ВЫБРАТЬ
	|						ВТ_ПодчиненныеДокументы.Ссылка
	|					ИЗ
	|						ВТ_ПодчиненныеДокументы КАК ВТ_ПодчиненныеДокументы)) КАК СчетаФактурыПрекратившиеДействие
	|		ПО ПодчиненныеДокументы.Ссылка = СчетаФактурыПрекратившиеДействие.СчетФактура
	|ГДЕ
	|	СчетаФактурыПрекратившиеДействие.СчетФактура ЕСТЬ NULL
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПодчиненныеДокументы.Ссылка.ПометкаУдаления,
	|	ПодчиненныеДокументы.Ссылка.Проведен УБЫВ,
	|	ПодчиненныеДокументы.Ссылка.Дата";
	
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	Возврат ТаблицаЗапроса
	
КонецФункции // НайтиПодчиненныйСчетФактуру

//Процедура очищает данные табличных частей документа.
//
Процедура ОчиститьТабЧасти(ДокументОбъект, СписокТабличныхЧастей = "") Экспорт
	
	Если ДокументОбъект = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СписокТабличныхЧастей = "" Тогда 
		МетаданныеДокумента = ДокументОбъект.Ссылка.Метаданные();
		
		Для Каждого ТабличнаяЧасть Из МетаданныеДокумента.ТабличныеЧасти Цикл
			Если ТабличнаяЧасть.Имя = "ДокументыОснования" Тогда
				Продолжить;
			КонецЕсли;
			ДокументОбъект[ТабличнаяЧасть.Имя].Очистить();
		КонецЦикла;
	Иначе 
		
		МассивТабличныхЧастей = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СписокТабличныхЧастей, ",", Истина);
		Для Каждого ТабличнаяЧасть Из МассивТабличныхЧастей Цикл
			ДокументОбъект[ТабличнаяЧасть].Очистить();
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает значение плательщика НДС для Счета0фактуры, в зависимости
// от настройки "Указывать реквизиты головной организации в счете-фактуре"
// конкретного контрагента или организации
//
Функция ПолучитьПлательщикаНДСВСчетеФактуре(ОрганизацияКонтрагент) Экспорт
	
	ПлательщикНДС = ОрганизацияКонтрагент;
	// если для Организации/контрагента установлен признак  "Указывать реквизиты головной организации в счете-фактуре"
	// то возвращаем значение головной организации/головного контрагента
	Если ТипЗнч(ОрганизацияКонтрагент) = Тип("СправочникСсылка.Контрагенты")  Тогда
		Если ОрганизацияКонтрагент.УказыватьРеквизитыГоловнойОрганизацииВСчетеФактуре Тогда
			ПлательщикНДС = ОрганизацияКонтрагент.ГоловнойКонтрагент;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ОрганизацияКонтрагент) = Тип("СправочникСсылка.Организации")  Тогда
		Если ОрганизацияКонтрагент.УказыватьРеквизитыГоловнойОрганизацииВСчетеФактуре Тогда
			ПлательщикНДС = ОрганизацияКонтрагент.ГоловнаяОрганизация;
		КонецЕсли;	
	КонецЕсли; 
	
    Возврат ПлательщикНДС;
	
КонецФункции // ПолучитьПлательщикаНДСВСчетеФактуре(ОрганизацияКонтрагент)

//Процедура добавлят документ-основание в указанную счет-фактуру
//вызывается в документах-основания в процедуре формы ПослеЗаписиНаСервере()
//
//Параметры:
//	ДокументОбъект - ДокументСсылка - Объект документа, который необходимо добавить в ТЧ "ДокументыОснования" счета-фактуры.
//	Основание - ДокументСсылка.СчетФактураВыданный, ДокументСсылка.СчетФактураПолученный - Ссылка на документ "Счет-фактура (выданный)" или "Счет-фактура (полученный)".
//	ВидСчетаФактуры - Строка - Вид счета фактуры, для которого добавляется документ-основание. Принимает значения "СчетФактураВыданный" или "СчетФактураПолученный".
//
Процедура ЗаполнитьДокументОснованиеВСчетеФактуре(ДокументОбъект, Основание, ВидСчетаФактуры = "СчетФактураВыданный") Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Основание", Основание);
	Запрос.УстановитьПараметр("ДокументОбъект", ДокументОбъект.Ссылка);
	
	Запрос.Текст = "ВЫБРАТЬ
	|	1 КАК ЕстьОснование
	|ИЗ
	|	Документ." + ВидСчетаФактуры + ".ДокументыОснования КАК ДокументыОснования
	|ГДЕ
	|	ДокументыОснования.Ссылка = &Основание
	|	И ДокументыОснования.ДокументОснование = &ДокументОбъект";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	// Если переданный документ уже включен в ТЧ "ДокументыОснования" счета-фактуры, то повторно его не добавляем
	Если НЕ РезультатЗапроса.Пустой() Тогда 
		Возврат;
	КонецЕсли;
	
	СчетФактураОбъект = Основание.ПолучитьОбъект();
	СчетФактураОбъект.ДополнительныеСвойства.Вставить("ЗаписьИзДокументаПодтверждающегоОтгрузку", Истина);
	
	СчетФактураОбъект.ДокументОснование = ДокументОбъект.Ссылка;
	
	НоваяСтрока = СчетФактураОбъект.ДокументыОснования.Добавить();
	НоваяСтрока.ДокументОснование = ДокументОбъект.Ссылка;
	Попытка
		СчетФактураОбъект.Записать();
		ТекстСообщения = НСтр("ru = 'Для счета-фактуры: «%1» добавлен документ основание, соответствующий текущему документу.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Основание);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Основание);
	Исключение
		ТекстСообщения = НСтр("ru = 'Не удалось записать счет-фактуру.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Основание);
	КонецПопытки 
	
КонецПроцедуры

// Функция производит поиск счета-фактуры полученного по реквизитам
// Параметры:
//  РеквизитыСчетаФактуры - структура с реквизитами счета-фактуры полученного,
//                          структура должна обязательно содержать поля Организация, Контрагент, НомерСчетаФактуры, ДатаСчетаФактуры
//
// Возвращаемое значение:
//  Если нашли, то возвращаем ссылку, не нашли - Неопределено
//
Функция НайтиСчетФактуруПолученный(РеквизитыСчетаФактуры) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("Организация", РеквизитыСчетаФактуры.Организация);
	Запрос.Параметры.Вставить("Контрагент",  РеквизитыСчетаФактуры.Контрагент);
	Запрос.Параметры.Вставить("НомерСчетаФактурыПолученного", РеквизитыСчетаФактуры.НомерСчетаФактурыПолученного);
	Запрос.Параметры.Вставить("ДатаСчетаФактурыПолученного", РеквизитыСчетаФактуры.ДатаСчетаФактурыПолученного);
	
	Поставщик = ?(РеквизитыСчетаФактуры.Свойство("Поставщик"), РеквизитыСчетаФактуры.Поставщик, ПолучитьПлательщикаНДСВСчетеФактуре(РеквизитыСчетаФактуры.Контрагент));
	Запрос.Параметры.Вставить("Поставщик", Поставщик);
	
	ТекстЗапроса =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СчетФактураПолученный.Ссылка
	|ИЗ
	|	Документ.СчетФактураПолученный КАК СчетФактураПолученный
	|ГДЕ
	|	СчетФактураПолученный.Организация = &Организация
	|	И СчетФактураПолученный.Контрагент = &Контрагент
	|	И СчетФактураПолученный.Поставщик = &Поставщик
	|	И СчетФактураПолученный.НомерВходящегоДокумента = &НомерСчетаФактурыПолученного
	|	И СчетФактураПолученный.ДатаВходящегоДокумента = &ДатаСчетаФактурыПолученного";
	
	Если РеквизитыСчетаФактуры.Свойство("ДоговорКонтрагента") Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|	И СчетФактураПолученный.ДоговорКонтрагента = &ДоговорКонтрагента";
		Запрос.Параметры.Вставить("ДоговорКонтрагента", РеквизитыСчетаФактуры.ДоговорКонтрагента);
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ПоддержкаРаботыСоСтруктурнымиПодразделениями")
		И РеквизитыСчетаФактуры.Свойство("СтруктурноеПодразделение") Тогда 
		ТекстЗапроса = ТекстЗапроса + "
		|	И СчетФактураПолученный.СтруктурноеПодразделение = &СтруктурноеПодразделение";
		Запрос.Параметры.Вставить("СтруктурноеПодразделение", РеквизитыСчетаФактуры.СтруктурноеПодразделение);
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Процедура СвернутьТабличныеЧастиСФ(ТабличнаяЧастьСФ, ИмяТабличнойЧасти, ВидСчетаФактуры) Экспорт
	
	Если ТабличнаяЧастьСФ.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяТабличнойЧасти = "Товары" Тогда
		ТабличнаяЧастьСФ.Свернуть("Номенклатура, Цена, СтавкаНДС, ЕдиницаИзмерения, Коэффициент" + ?(ВидСчетаФактуры = "СчетФактураВыданный", ", СтавкаАкциза", ""),
		                          "Количество, Сумма, СуммаНДС, ОборотПоРеализации" + ?(ВидСчетаФактуры = "СчетФактураВыданный", ", СуммаАкциза", ""));
	КонецЕсли;
	
	Если ИмяТабличнойЧасти = "Услуги" Тогда
		ТабличнаяЧастьСФ.Свернуть("Номенклатура, Содержание, Цена, СтавкаНДС", "Количество, Сумма, СуммаНДС, ОборотПоРеализации");
	КонецЕсли;

	Если ИмяТабличнойЧасти = "ОС" Тогда
		ТабличнаяЧастьСФ.Свернуть("ОсновноеСредство, СтавкаНДС", "Сумма, СуммаНДС, ОборотПоРеализации");
	КонецЕсли;

	Если ИмяТабличнойЧасти = "НМА" Тогда
		ТабличнаяЧастьСФ.Свернуть("НематериальныйАктив, СтавкаНДС", "Сумма, СуммаНДС, ОборотПоРеализации");
	КонецЕсли;   

КонецПроцедуры

//////////////////////////////////////////////////////////////////////////
// РАБОТА С УЧАСТНИКАМИ СОВМЕСТНОЙ ДЕЯТЕЛЬНОСТИ

// Возвращает таблицу по участникам совместной деятельности 
// 
//
Функция СформироватьТаблицуНДСПоУчастникамСовместнойДеятельности(СтруктураШапкиДокумента, ТаблицаНДС, ТаблицаПоУчастникамСовместнойДеятельности, ЕстьОборотПоРеализации, ЕстьАкциз) Экспорт
	
	Таблица = ТаблицаНДС.СкопироватьКолонки();
	ЕстьПоставщик  = Таблица.Колонки.Найти("Поставщик") <> Неопределено;
	ЕстьПокупатель = Таблица.Колонки.Найти("Покупатель") <> Неопределено;
	Для Каждого СтрокаДок Из ТаблицаНДС Цикл
		// запоминаем суммы подлежащие распределению		
		НДС         	      = СтрокаДок.НДС;
		НДСВал                = СтрокаДок.НДСВал;
		Сумма    	          = СтрокаДок.Сумма;		
		СуммаВал              = СтрокаДок.СуммаВал;		
		
		Если ЕстьАкциз Тогда 
			Акциз 		= СтрокаДок.Акциз;
			АкцизВал 	= СтрокаДок.АкцизВал;
		Иначе
			Акциз = 0;
			АкцизВал = 0;
		КонецЕсли;
		
		СуммаБезНДС 	= СтрокаДок.СуммаБезНДС;
		СуммаБезНДСВал 	= СтрокаДок.СуммаБезНДСВал;

		Если ЕстьОборотПоРеализации Тогда 
			ОборотПоРеализации = СтрокаДок.ОборотПоРеализации;
			ОборотПоРеализацииВал = СтрокаДок.ОборотПоРеализацииВал;
		Иначе	
			ОборотПоРеализации = 0;
			ОборотПоРеализацииВал = 0;
		КонецЕсли;

		Количество = ТаблицаПоУчастникамСовместнойДеятельности.Количество();

		Для Каждого СтрокаДокУчастников Из ТаблицаПоУчастникамСовместнойДеятельности Цикл 
			НоваяСтрока = Таблица.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДок); 
			
			Количество = Количество - 1;
							
			Если Количество = 0 Тогда 
				// если участников СД нет или это последняя строка, то списываем всю сумму
				НоваяСтрока.СуммаБезНДС 	= СуммаБезНДС;
				НоваяСтрока.СуммаБезНДСВал 	= СуммаБезНДСВал;
				
				Если ЕстьАкциз Тогда 
					НоваяСтрока.Акциз 		= Акциз;
					НоваяСтрока.АкцизВал 	= АкцизВал;
				КонецЕсли;
								
				НоваяСтрока.НДС 	= НДС;			
				НоваяСтрока.НДСВал 	= НДСВал;			
				
				НоваяСтрока.Сумма 		= Сумма;
				НоваяСтрока.СуммаВал 	= СуммаВал;
				
				Если ЕстьОборотПоРеализации Тогда
					НоваяСтрока.ОборотПоРеализации = ОборотПоРеализации;
					НоваяСтрока.ОборотПоРеализацииВал = ОборотПоРеализацииВал;
				КонецЕсли;
				
			Иначе 
				КоэффициентУчастия = ?(СтрокаДокУчастников.СуммаДолейУчастия = 0, 0 ,СтрокаДокУчастников.ДоляУчастия/СтрокаДокУчастников.СуммаДолейУчастия);
				НоваяСтрока.СуммаБезНДС 	= Окр((СтрокаДок.СуммаБезНДС) *КоэффициентУчастия,2);
				НоваяСтрока.СуммаБезНДСВал 	= Окр((СтрокаДок.СуммаБезНДСВал) *КоэффициентУчастия,2);
			
				Если ЕстьАкциз Тогда 
					НоваяСтрока.Акциз 		= Окр(СтрокаДок.Акциз*КоэффициентУчастия,2);				
					НоваяСтрока.АкцизВал 	= Окр(СтрокаДок.АкцизВал*КоэффициентУчастия,2);				
				КонецЕсли;
				
				НоваяСтрока.Сумма 		= Окр(СтрокаДок.Сумма *КоэффициентУчастия,2);
				НоваяСтрока.СуммаВал 	= Окр(СтрокаДок.СуммаВал *КоэффициентУчастия,2);
								
				НоваяСтрока.НДС = Окр(СтрокаДок.НДС *КоэффициентУчастия, 2);			
				НоваяСтрока.НДСВал = Окр(СтрокаДок.НДСВал *КоэффициентУчастия, 2);			
								
				Если ЕстьОборотПоРеализации Тогда
					НоваяСтрока.ОборотПоРеализации = Окр(СтрокаДок.ОборотПоРеализации*КоэффициентУчастия,2);
					НоваяСтрока.ОборотПоРеализацииВал = Окр(СтрокаДок.ОборотПоРеализацииВал * КоэффициентУчастия, 2);
				КонецЕсли;							
			КонецЕсли;
			
			Если ЕстьПоставщик Тогда
				НоваяСтрока.Поставщик 					   = СтрокаДокУчастников.УчастникСовместнойДеятельности;
			КонецЕсли;
			
			Если ЕстьПокупатель Тогда 
				НоваяСтрока.Покупатель 					   = СтрокаДокУчастников.УчастникСовместнойДеятельности;
			КонецЕсли;
			
			НоваяСтрока.УчастникСовместнойДеятельности = Истина;
			
			// для обработки ошибок округления
			Сумма 		= Сумма - НоваяСтрока.Сумма;
			СуммаВал	= СуммаВал - НоваяСтрока.СуммаВал;
			
			СуммаБезНДС 	= СуммаБезНДС - НоваяСтрока.СуммаБезНДС;
			СуммаБезНДСВал 	= СуммаБезНДСВал - НоваяСтрока.СуммаБезНДСВал;
			
			НДС 		= НДС - НоваяСтрока.НДС;
			НДСВал 		= НДСВал - НоваяСтрока.НДСВал;
			
			Если ЕстьАкциз Тогда 
				Акциз 		= Акциз - НоваяСтрока.Акциз;
				АкцизВал 	= АкцизВал - НоваяСтрока.АкцизВал;
			КонецЕсли;
			
			Если ЕстьОборотПоРеализации Тогда
				ОборотПоРеализации = ОборотПоРеализации - НоваяСтрока.ОборотПоРеализации;
				ОборотПоРеализацииВал = ОборотПоРеализацииВал - НоваяСтрока.ОборотПоРеализацииВал;
			КонецЕсли;					
		КонецЦикла;		
	КонецЦикла;
	
	Возврат Таблица	
	
КонецФункции

Процедура ОчиститьДанныеПоУчастникамСовместнойДеятельности(ДокументОбъект, ДоговорКонтрагента) Экспорт
	
	ОчищатьТЧ = Ложь;  
	Если ЗначениеЗаполнено(ДоговорКонтрагента)  Тогда 		
		РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДоговорКонтрагента, "ДоговорСовместнойДеятельности,УчастникСРП");
		Если НЕ РеквизитыДоговора.ДоговорСовместнойДеятельности И НЕ РеквизитыДоговора.УчастникСРП Тогда
			ОчищатьТЧ = Истина;
		КонецЕсли;
	Иначе
		ОчищатьТЧ = Истина;		
	КонецЕсли;
	
	Если ОчищатьТЧ Тогда		
		ДокументОбъект.УчастникиСовместнойДеятельности.Очистить();
	КонецЕсли; 
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ ОТЧЕТНОСТИ ПОДСИСТЕМЫ УЧЕТА НДС

Функция СформироватьУсловиеОграниченияПоПериоду(ИмяПоля, ПараметрДатаНач, ПараметрДатаКон, ИмяПараметраДатаНач = "НачПериода", ИмяПараметраДатаКон = "КонПериода") Экспорт
		
	СтрокаУсловия = "";
	// Дополняем условие запроса отбором по периоду
	Если (ЗначениеЗаполнено(ПараметрДатаНач)) И (ЗначениеЗаполнено(ПараметрДатаКон)) Тогда
		СтрокаУсловия = " И " + ИмяПоля + " МЕЖДУ &" + ИмяПараметраДатаНач + " И &" + ИмяПараметраДатаКон + "
		|";
		
	ИначеЕсли (ЗначениеЗаполнено(ПараметрДатаНач)) И (НЕ ЗначениеЗаполнено(ПараметрДатаКон)) Тогда
		СтрокаУсловия = " И " + ИмяПоля + " >= &" + ИмяПараметраДатаНач + "
		|";
		
	ИначеЕсли (НЕ ЗначениеЗаполнено(ПараметрДатаНач)) И (ЗначениеЗаполнено(ПараметрДатаКон)) Тогда
		СтрокаУсловия = " И " + ИмяПоля + " <= &" + ИмяПараметраДатаКон + "
		|";
		
	КонецЕсли;
	
	Возврат СтрокаУсловия;
	
КонецФункции

// Функция определеяет наличие счетов-фактур, полученных по документам,
// которые могут являться основаниями для ввода счетов-фактур полученных.
//
// Применяется для контроля за наличием в ИБ информации о наличии счетов-
// фактур.
// 
// Параметры:
//  НачПериода       - Дата - Начальная дата выборки (включительно, с 00:00:00)
//  КонПериода       - Дата - Конечная дата выборки (включительно, по 23:59:59)
//  Организация      - Справочник.Ссылка - Организация, по которой
//                     осуществляется отбор. Необязательный параметр. Если не
//                     задан, отбор осуществляется по всем организациям.
//  Фильтр           - Документ.Ссылка, Массив - Документ или список документов, 
//                     по которым осуществляется отбор. Необязательный параметр. 
//                     Если не задан, отбор осуществляется по всем документам, 
//                     которые могут являться основаниями для ввода счетов-фактур 
//                     полученных.
//  ВсеКромеФильтра  - Булево - Признак отбора документов, не входящих в Фильтр. 
//                     Необязательный параметр. Значение по умолчаню - Ложь.
//                     Если не задан, отбираются документы, заданные в Фильтре.
//  НаличиеСчетаФактуры - Булево - Признак отбора документов:
//                        Истина - Отбирать документы, по которым существуют
//                        счета-фактуры.
//                        Ложь - Отбирать документы, по которым счета-фактуры
//                        отсутствуют.
//                        Необязательный параметр. Если не задан, осуществляется
//                        отбор всех документов.
// СчетФактураПроведен - Булево - Признак отбора счетов-фактур:
//                        Истина - Отбирать проведенные счета-фактуры
//                        Ложь - Отбирать непроведенные счета-фактуры
//                        Необязательный параметр. Если не задан, осуществляется
//                        отбор всех счетов-фактур.
//
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица значений - Состав колонок:
//                    Документ - Документ.Ссылка - Документ, по которому
//                               производился поиск счета-фактуры полученного
//                    СчетФактура - Документ.Ссылка - Ссылка на счет-
//                                  фактуру полученный, либо Неопределено
//
Функция ОпределитьНаличиеСчетовФактур(НачПериода = Неопределено, КонПериода = Неопределено, Организация, Фильтр = Неопределено, ВсеКромеФильтра = Ложь, НаличиеСчетаФактуры = Неопределено, ИмяСчетФактуры = "СчетФактураПолученный") Экспорт
	  
		Запрос = Новый Запрос();
		
		Запрос.УстановитьПараметр("НачПериода" , НачПериода);
		Запрос.УстановитьПараметр("КонПериода" , ?(НЕ ЗначениеЗаполнено(КонПериода), '00010101', КонецДня(КонПериода)));
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("Фильтр"     , Фильтр);
				
		// Дополняем условие запроса отбором по признаку наличия/отсутствия счета-фактуры
		УсловиеЗапроса = ?(НаличиеСчетаФактуры = Неопределено, "", " ГДЕ " + ?(НаличиеСчетаФактуры, "НЕ СчетФактура.Ссылка ЕСТЬ NULL", "СчетФактура.Ссылка ЕСТЬ NULL"));
		
		//добавим фильтр по типу регистратору, т.к. из регистров выбирается данные по документам,
		//которые не регситрируется счет-фактурой.
		СписокТиповДокументов = Новый СписокЗначений;
		МетаданныеДокумента = Документы[ИмяСчетФактуры].ПустаяСсылка().Метаданные();
		Для Каждого Документ Из МетаданныеДокумента.ТабличныеЧасти["ДокументыОснования"].Реквизиты["ДокументОснование"].Тип.Типы() Цикл
			ТипДокумента = Метаданные.НайтиПоТипу(Документ);
			СписокТиповДокументов.Добавить(ТипДокумента.Имя);
		КонецЦикла;		
		
		//признак добавление в условие соединительного "ИЛИ"
		НужноДобавлятьСоединение = Ложь;
		
		//Признак закртыия скобки после перечисления всех типов регистраторов
		НуженКонецСкобки = Ложь;
		
		Если УсловиеЗапроса = "" Тогда 
			Если СписокТиповДокументов.Количество() > 0 Тогда
				УсловиеЗапроса = " ГДЕ ";				
			КонецЕсли;			
		Иначе
			УсловиеЗапроса = УсловиеЗапроса + "  И (";      			
			НуженКонецСкобки = Истина;
		КонецЕсли;
		
		Для Каждого ТипДок Из СписокТиповДокументов Цикл 			
			УсловиеЗапроса = УсловиеЗапроса + ?(НужноДобавлятьСоединение , " ИЛИ", "") + "  ЗапросПоДокументам.ДокументОснование ССЫЛКА Документ." + ТипДок.Значение;
			НужноДобавлятьСоединение = Истина;
		КонецЦикла;

		Если НуженКонецСкобки Тогда
			УсловиеЗапроса = УсловиеЗапроса + ")";
		КонецЕсли;
		
		ЗапросПоДокументам = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		                     |	НДС.Регистратор КАК ДокументОснование,
							 |	НДС.Период КАК ДатаДокументаОснования
		                     |ИЗ
		                     |	РегистрНакопления.<<ИмяРегистраНДС>> КАК НДС
		                     |ГДЕ
		                     |	НДС.Активность
		                     |	" + СформироватьУсловиеОграниченияПоПериоду("НДС.Период", НачПериода, КонПериода)
							 + ?(НЕ ЗначениеЗаполнено(Организация), "",  " И НДС.Организация В (&Организация) ") + 
							 // Дополняем условие запроса отбором по документу-основанию или списку документов-оснований
							?(НЕ ЗначениеЗаполнено(Фильтр), "", " И НДС.Регистратор " + ?(ВсеКромеФильтра, " НЕ ", "") + " В (&Фильтр) ") +
							"
							 |ОБЪЕДИНИТЬ ВСЕ
		                     |
		                     |ВЫБРАТЬ РАЗЛИЧНЫЕ
		                     |	КорректировкаНДС.Регистратор КАК ДокументОснование,
							 |	КорректировкаНДС.Период КАК ДатаДокументаОснования
		                     |ИЗ
		                     |	РегистрНакопления.<<ИмяРегистраКорректировкаНДС>> КАК КорректировкаНДС
		                     |ГДЕ
		                     |	КорректировкаНДС.Активность 
							 |	" + СформироватьУсловиеОграниченияПоПериоду("КорректировкаНДС.Период", НачПериода, КонПериода)
							 + ?(НЕ ЗначениеЗаполнено(Организация), "",  " И КорректировкаНДС.Организация В (&Организация) ") + 
							  // Дополняем условие запроса отбором по документу-основанию или списку документов-оснований
							?(НЕ ЗначениеЗаполнено(Фильтр), "", " И КорректировкаНДС.Регистратор " + ?(ВсеКромеФильтра, " НЕ ", "") + " В (&Фильтр) ") ;
						
							
		// В зависимости от параметра ИмяСчетФактуры = "СчетФактураПолученный" заменяем имена базовых регистов
		ЗапросПоДокументам = СтрЗаменить(ЗапросПоДокументам, "<<ИмяРегистраНДС>>", ?(ИмяСчетФактуры = "СчетФактураПолученный", "НДСКВозмещению", "НДС"));
		ЗапросПоДокументам = СтрЗаменить(ЗапросПоДокументам, "<<ИмяРегистраКорректировкаНДС>>", ?(ИмяСчетФактуры = "СчетФактураПолученный", "КорректировкаНДСКВозмещению", "КорректировкаНДС"));
		
		Запрос.Текст = Запрос.Текст +
		"Выбрать РАЗРЕШЕННЫЕ
		|	ЗапросПоДокументам.ДокументОснование КАК ДокументОснование,
		|	ЗапросПоДокументам.ДатаДокументаОснования КАК ДатаДокументаОснования,
		|	ЕСТЬNULL(СчетФактура.Ссылка,Неопределено) КАК СчетФактура,
		|	ЕСТЬNULL(СчетФактура.Ссылка.Проведен, ЛОЖЬ) КАК СчетФактураПроведен
		|ИЗ(" + ЗапросПоДокументам +")КАК ЗапросПоДокументам					
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			СчетФактура.Ссылка КАК Ссылка,
		|			СчетФактура.ДокументОснование КАК ДокументОснование
		|		ИЗ
		|			Документ."+ ИмяСчетФактуры + ".ДокументыОснования КАК СчетФактура) КАК СчетФактура
		|		ПО ЗапросПоДокументам.ДокументОснование = СчетФактура.ДокументОснование  
		| " + УсловиеЗапроса + "
		| УПОРЯДОЧИТЬ ПО ЗапросПоДокументам.ДатаДокументаОснования ";
				
		Запрос.Текст =  Запрос.Текст;
				
		ТаблицаДокументов = Запрос.Выполнить().Выгрузить();
		
		Возврат ТаблицаДокументов;
		
	КонецФункции // ОпределитьНаличиеСчетовФактур()

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция	ПодготовитьТаблицуРаспределенияПоУчастникамСовместнойДеятельности(ТаблицаДляФормированияДвиженийНДС, ТаблицаУчастникиСовместнойДеятельности, ИменаКолонок)  Экспорт
	
	Если ТаблицаУчастникиСовместнойДеятельности = Неопределено Тогда
		Возврат ТаблицаДляФормированияДвиженийНДС;
	Иначе
		ТаблицаДляФормированияДвиженийНДСпоСД = ТаблицаДляФормированияДвиженийНДС.СкопироватьКолонки();
		ОбщегоНазначенияБКВызовСервера.ДобавитьКолонкуВТаблицуЗначений(ТаблицаДляФормированияДвиженийНДСпоСД, "Контрагент", Справочники.Контрагенты.ПустаяСсылка());
		
		МассивИменКолонок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИменаКолонок);
		ТаблицаРаспределений = Новый ТаблицаЗначений();
		
		ОбщегоНазначенияБКВызовСервера.ДобавитьКолонкуВТаблицуЗначений(ТаблицаРаспределений, "ИмяКолонки");
		ОбщегоНазначенияБКВызовСервера.ДобавитьКолонкуВТаблицуЗначений(ТаблицаРаспределений, "РезультатРаспределения");
		
		МассивДолиУчастия = ТаблицаУчастникиСовместнойДеятельности.ВыгрузитьКолонку("ДоляУчастия");
		
		Для Каждого СтрокаНДС ИЗ ТаблицаДляФормированияДвиженийНДС Цикл
			// подготовим массивы распределения сумм
			Для Инд = 0 По МассивИменКолонок.ВГраница() Цикл
				СтрокаРаспределения = ТаблицаРаспределений.Добавить();
				ИмяКолонки = СокрЛП(МассивИменКолонок[Инд]);
				СтрокаРаспределения.ИмяКолонки = ИмяКолонки; 
				СтрокаРаспределения.РезультатРаспределения = ОбщегоНазначенияКлиентСервер.РаспределитьСуммуПропорциональноКоэффициентам(СтрокаНДС[ИмяКолонки], МассивДолиУчастия);
			КонецЦикла; 
			
			Для Каждого СтрокаУчастникСД ИЗ ТаблицаУчастникиСовместнойДеятельности Цикл
				
				СтрокаРаспределенияНДС = ТаблицаДляФормированияДвиженийНДСпоСД.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаРаспределенияНДС, СтрокаНДС);
				СтрокаРаспределенияНДС.Контрагент = СтрокаУчастникСД.УчастникСовместнойДеятельности;
				
				Для каждого Строка Из ТаблицаРаспределений Цикл
					ИмяКолонки = Строка.ИмяКолонки;
					Если Строка.РезультатРаспределения <> Неопределено Тогда
						СтрокаРаспределенияНДС[ИмяКолонки] = ?(Строка.РезультатРаспределения[СтрокаУчастникСД.НомерСтроки-1] <> Неопределено,Строка.РезультатРаспределения[СтрокаУчастникСД.НомерСтроки-1],0) ;
					Иначе
						СтрокаРаспределенияНДС[ИмяКолонки] = 0;
					КонецЕсли;
				КонецЦикла; 
				
			КонецЦикла;
		КонецЦикла; 
		
		Возврат ТаблицаДляФормированияДвиженийНДСпоСД;
	КонецЕсли;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ ПРОЦЕДУРЫ, ОТРАЖАЮЩИЕ ХОЗЯЙСТВЕННЫЕ ОПЕРАЦИИ В ПОДСИСТЕМЕ НДС


// ПОСТУПЛЕНИЕ ТОВАРОВ

Процедура СформироватьДвиженияПоступлениеТоваровНДС(ТаблицаНДС, Реквизиты, Движения, Отказ)
	
	Для Каждого СтрокаТаблицы Из ТаблицаНДС Цикл
		
		Если СтрокаТаблицы.СуммаНДС = 0 Тогда		
			Продолжить;		
		КонецЕсли; 
		
		Проводка = Движения.Типовой.Добавить();
		
		Проводка.Период       = Реквизиты.Период;
		Проводка.Организация  = Реквизиты.Организация;
		Проводка.Сумма        = СтрокаТаблицы.СуммаНДС;
		Проводка.Содержание   = СтрокаТаблицы.Содержание;
		
		Проводка.СчетДт       = СтрокаТаблицы.Счет;
		
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаТаблицы.Субконто1);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаТаблицы.Субконто2);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтрокаТаблицы.Субконто3);
		
		Проводка.СчетКт       = СтрокаТаблицы.КорСчет;
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтрокаТаблицы.КорСубконто1);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтрокаТаблицы.КорСубконто2);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, СтрокаТаблицы.КорСубконто3);
		
		ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
			Проводка, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);
			
		Если ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы.Счет).Валютный Тогда
			
			Проводка.ВалютаДт = Реквизиты.ВалютаВзаиморасчетов;
			Проводка.ВалютнаяСуммаДт = СтрокаТаблицы.СуммаНДСВал;
			
		КонецЕсли;
			
		Если ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы.КорСчет).Валютный Тогда
			
			Проводка.ВалютаКт = Реквизиты.ВалютаВзаиморасчетов;
			Проводка.ВалютнаяСуммаКт = СтрокаТаблицы.СуммаНДСВал;
			
		КонецЕсли;
		
		// поводки по налоговому учету
		Если Реквизиты.НеобходимостьОтраженияВНУ Тогда
			
			ПроводкаНУ = Движения.Налоговый.Добавить();
			
			ПроводкаНУ.Период       = Реквизиты.Период;
			ПроводкаНУ.Организация  = Реквизиты.Организация;
			ПроводкаНУ.Сумма        = СтрокаТаблицы.СуммаНДС;
			
			ПроводкаНУ.Содержание   = СтрокаТаблицы.Содержание;
			
			ПроводкаНУ.СчетДт       = ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьСчетУчетаНДСКВозмещениюНУ(СтрокаТаблицы.Счет, Реквизиты.Период);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 1, СтрокаТаблицы.Субконто1);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 2, СтрокаТаблицы.Субконто2);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 3, СтрокаТаблицы.Субконто3);
			
			ПроводкаНУ.СчетКт       = ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьСчетРасчетовСКонтрагентомНУ(СтрокаТаблицы.КорСчет);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 1, СтрокаТаблицы.КорСубконто1);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 2, СтрокаТаблицы.КорСубконто2);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 3, СтрокаТаблицы.КорСубконто3);
			
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				ПроводкаНУ, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);
			
			ПроцедурыНалоговогоУчета.ВидУчетаНУ(ПроводкаНУ, Реквизиты.ВидУчетаНУ);						
			
		КонецЕсли;	
	КонецЦикла;
	
	Движения.Типовой.Записывать = Истина;
	Если Реквизиты.НеобходимостьОтраженияВНУ Тогда
		Движения.Налоговый.Записывать = Истина;
	КонецЕсли;

КонецПроцедуры

// ПОСТУПЛЕНИЕ ДОП. РАСХОДОВ

Функция ПодготовитьПараметрыНДСПриПоступленииДопРасходов(ТаблицаНДС, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаНДСпоРБ

	СписокОбязательныхКолонок = ""
	+ "НомерСтроки,"       				// <Число> - номер строки в списке
	+ "СуммаНДС,"             			// <Число,15,2> - сумма в тенге
	+ "СуммаНДСВал,"             		// <Число,15,2> - сумма в валюте взаиморасчетов
	+ "Счет,"         					// <ПланСчетовСсылка.Типовой> - счет учета НДС
	+ "КорСчет,"        				// <ПланСчетовСсылка.Типовой> - счет учета, корреспондирующий со счетом учета НДС
	+ "Субконто1,"        				// <Характеристика.ВидыСубконтоТиповые> - субконто 1 счета учета НДС
	+ "Субконто2,"        				// <Характеристика.ВидыСубконтоТиповые> - субконто 2 счета учета НДС
	+ "Субконто3,"        				// <Характеристика.ВидыСубконтоТиповые> - субконто 3 счета учета НДС
	+ "КорСубконто1,"        			// <Характеристика.ВидыСубконтоТиповые> - субконто 1 корреспондирующего счета
	+ "КорСубконто2,"        			// <Характеристика.ВидыСубконтоТиповые> - субконто 2 корреспондирующего счета
	+ "КорСубконто3,"        			// <Характеристика.ВидыСубконтоТиповые> - субконто 3 корреспондирующего счета
	+ "Содержание";        				// <Строка,150> - содержание проводки

	Параметры.Вставить("ТаблицаНДСпоРБ",
		ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаНДС, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.ТаблицаНДСпоРН

	СписокОбязательныхКолонок = ""
	+ "НомерСтроки,"       				// <Число> - номер строки в списке
	+ "ТМЗ,"             				// <СправочникСсылка.Номенклатура, СправочникСсылка.ОсновныеСредства, СправочникСсылка.НематериальныеАктивы>
	+ "СуммаБезНДС,"             		// <Число,15,2> - сумма в тенге
	+ "УплаченныйНДС,"             		// <Число,15,2> - сумма НДС в тенге
	+ "СуммаНДС,"             			// <Число,15,2> - сумма НДС в тенге
	+ "ВидОборота,"         			// <ПеречислениеСсылка.ВидыОборотовПоРеализации> - вид оборота по НДС
	+ "ВидОперацииПоступления,"        	// <СправочникСсылка.ВидыПоступления> - вид поступления НДС
	+ "ВидНалогаНДС,"        			// <ПеречислениеСсылка.ВидыПлатежейВБюджетИФонды> - вид налога НДС
	+ "СтавкаНДС";        				// <СправочникСсылка.СтавкиНДС> - ставка НДС

	Параметры.Вставить("ТаблицаНДСпоРН",
		ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаНДС, СписокОбязательныхКолонок));
		
	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Регистратор,"                  	 // <ДокументСсылка.*> - документ-регистратор движений
	+ "Период,"                       	 // <Дата> - период движений - дата документа
	+ "Организация,"                  	 // <СправочникСсылка.Организация> - организация, в которую приходуется товар
	+ "Налогоплательщик,"                // <СправочникСсылка.Организация> - организация, в которую приходуется товар
	+ "СтруктурноеПодразделение,"  		 // <СправочникСсылка.ПодразделенияОрганизаций> - структурное подразделение организации
	+ "Контрагент,"                		 // <СправочникСсылка.Контрагенты> - контрагент, который оказывает доп. услуги
	+ "НеобходимостьОтраженияВНУ,"  	 // <Булево> - определяет необходимость отражения в НУ
	+ "ВидУчетаНУ,"  					 // <СправочникСсылка.ВидыУчетаНУ> - вид учета, указанный в документе
	+ "ВалютаДокумента,"  				 // <СправочникСсылка.Валюты> - валюта документа
	+ "ВалютаВзаиморасчетов,"  		 	 // <СправочникСсылка.Валюты> - валюта взаиморасчетов
	+ "НДСВключенВСтоимость";			 // <Булево> - признак включения НДС в стоимость товаров

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Процедура СформироватьПроводкиПоступлениеДопРасходовНДС(ТаблицаНДС, Реквизиты, Движения, Отказ)
	
	Для Каждого СтрокаТаблицы Из ТаблицаНДС Цикл
		
		Если СтрокаТаблицы.СуммаНДС = 0 Тогда 
			Продолжить;
		КонецЕсли;
		
		Проводка = Движения.Типовой.Добавить();
		
		Проводка.Период       = Реквизиты.Период;
		Проводка.Организация  = Реквизиты.Организация;
		Проводка.Сумма        = СтрокаТаблицы.СуммаНДС;
		Проводка.Содержание   = СтрокаТаблицы.Содержание;
		
		Проводка.СчетДт       = СтрокаТаблицы.Счет;
		
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаТаблицы.Субконто1);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаТаблицы.Субконто2);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтрокаТаблицы.Субконто3);
		
		Проводка.СчетКт       = СтрокаТаблицы.КорСчет;
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтрокаТаблицы.КорСубконто1);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтрокаТаблицы.КорСубконто2);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, СтрокаТаблицы.КорСубконто3);
		
		ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
			Проводка, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);
			
		Если ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы.Счет).Валютный Тогда
			
			Проводка.ВалютаДт = Реквизиты.ВалютаВзаиморасчетов;
			Проводка.ВалютнаяСуммаДт = СтрокаТаблицы.СуммаНДСВал;
			
		КонецЕсли;
			
		Если ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы.КорСчет).Валютный Тогда
			
			Проводка.ВалютаКт = Реквизиты.ВалютаВзаиморасчетов;
			Проводка.ВалютнаяСуммаКт = СтрокаТаблицы.СуммаНДСВал;
			
		КонецЕсли;
		
		// поводки по налоговому учету
		Если Реквизиты.НеобходимостьОтраженияВНУ Тогда
			
			ПроводкаНУ = Движения.Налоговый.Добавить();
			
			ПроводкаНУ.Период       = Реквизиты.Период;
			ПроводкаНУ.Организация  = Реквизиты.Организация;
			ПроводкаНУ.Сумма        = СтрокаТаблицы.СуммаНДС;
			
			ПроводкаНУ.Содержание   = СтрокаТаблицы.Содержание;
			
			ПроводкаНУ.СчетДт       = ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьСчетУчетаНДСКВозмещениюНУ(СтрокаТаблицы.Счет, Реквизиты.Период);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 1, СтрокаТаблицы.Субконто1);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 2, СтрокаТаблицы.Субконто2);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 3, СтрокаТаблицы.Субконто3);
			
			ПроводкаНУ.СчетКт       = ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьСчетРасчетовСКонтрагентомНУ(СтрокаТаблицы.КорСчет);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 1, СтрокаТаблицы.КорСубконто1);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 2, СтрокаТаблицы.КорСубконто2);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 3, СтрокаТаблицы.КорСубконто3);
			
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				ПроводкаНУ, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);
			
			ПроцедурыНалоговогоУчета.ВидУчетаНУ(ПроводкаНУ, Реквизиты.ВидУчетаНУ);						
			
		КонецЕсли;	
	КонецЦикла;
	
	Движения.Типовой.Записывать = Истина;
	Если Реквизиты.НеобходимостьОтраженияВНУ Тогда
		Движения.Налоговый.Записывать = Истина;
	КонецЕсли;

КонецПроцедуры

// РЕАЛИЗАЦИЯ И ВОЗВРАТ ТОВАРОВ И УСЛУГ

Процедура СформироватьДвиженияРеализацияВозвратТоваровУслугНДСАкциз(ТаблицаНДС, Реквизиты, Движения, Отказ)
	
	Для Каждого СтрокаТаблицы Из ТаблицаНДС Цикл
		
		Если СтрокаТаблицы.СуммаНДС = 0 Тогда		
			Продолжить;		
		КонецЕсли; 
		
		Проводка = Движения.Типовой.Добавить();
		
		Проводка.Период       = Реквизиты.Период;
		Проводка.Организация  = Реквизиты.Организация;
		Проводка.Сумма        = СтрокаТаблицы.СуммаНДС;
		Проводка.Содержание   = СтрокаТаблицы.Содержание;
		
		Проводка.СчетДт       = СтрокаТаблицы.Счет;
		
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаТаблицы.Субконто1);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаТаблицы.Субконто2);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтрокаТаблицы.Субконто3);
		
		Проводка.СчетКт       = СтрокаТаблицы.КорСчет;
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтрокаТаблицы.КорСубконто1);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтрокаТаблицы.КорСубконто2);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, СтрокаТаблицы.КорСубконто3);
		
		ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
			Проводка, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);
		
		Если ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы.Счет).Валютный Тогда
			
			Проводка.ВалютаДт = Реквизиты.ВалютаВзаиморасчетов;
			Проводка.ВалютнаяСуммаДт = СтрокаТаблицы.СуммаНДСВал;
			
		КонецЕсли;
		
		Если ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы.КорСчет).Валютный Тогда
			
			Проводка.ВалютаКт = Реквизиты.ВалютаВзаиморасчетов;
			Проводка.ВалютнаяСуммаКт = СтрокаТаблицы.СуммаНДСВал;
			
		КонецЕсли;
		
		// поводки по налоговому учету
		Если Реквизиты.НеобходимостьОтраженияВНУ Тогда
			
			ПроводкаНУ = Движения.Налоговый.Добавить();
			
			ПроводкаНУ.Период       = Реквизиты.Период;
			ПроводкаНУ.Организация  = Реквизиты.Организация;
			ПроводкаНУ.Сумма        = СтрокаТаблицы.СуммаНДС;
			
			ПроводкаНУ.Содержание   = СтрокаТаблицы.Содержание;
			
			Если НЕ СтрокаТаблицы.ЭтоАкциз Тогда 
				ПроводкаНУ.СчетДт       = ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьСчетУчетаНДСНачисленногоНУ(СтрокаТаблицы.Счет, Реквизиты.Период);
			Иначе 
				ПроводкаНУ.СчетДт       = ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьСчетУчетаАкцизаНУ(СтрокаТаблицы.Счет, Реквизиты.Период);
			КонецЕсли;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 1, СтрокаТаблицы.Субконто1);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 2, СтрокаТаблицы.Субконто2);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 3, СтрокаТаблицы.Субконто3);
			
			ПроводкаНУ.СчетКт       = ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьСчетРасчетовСКонтрагентомНУ(СтрокаТаблицы.КорСчет);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 1, СтрокаТаблицы.КорСубконто1);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 2, СтрокаТаблицы.КорСубконто2);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 3, СтрокаТаблицы.КорСубконто3);
			
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				ПроводкаНУ, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);
			
			ПроцедурыНалоговогоУчета.ВидУчетаНУ(ПроводкаНУ, Реквизиты.ВидУчетаНУ);						
			
		КонецЕсли;	
	КонецЦикла;
	
	Движения.Типовой.Записывать = Истина;
	
	Если Реквизиты.НеобходимостьОтраженияВНУ Тогда
		
		Движения.Налоговый.Записывать = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

// ГТД ПО ИМПОРТУ

Процедура СформироватьДвиженияГТДИмпортНДС(ТаблицаНДС, Реквизиты, Движения, Отказ)
	
	Для Каждого СтрокаТаблицы Из ТаблицаНДС Цикл
		
		Если СтрокаТаблицы.СуммаНДС = 0 Тогда 
			Продолжить;
		КонецЕсли;
				
		//Когда отражение на счетах учета расчетов с бюджетом, то делаем сначала проводку по операции начисления НДС по импорту
		//1422  - 3130 (НДС по импорту)
		Если Реквизиты.ВариантОтражения = 1 И  НЕ СтрокаТаблицы.ВидНалогаНДС = Перечисления.ВидыНДС.НДСМетодомЗачета Тогда
			
			Проводка = Движения.Типовой.Добавить();
			
			Проводка.Период       = Реквизиты.Период;
			Проводка.Организация  = Реквизиты.Организация;
			Проводка.Сумма        = СтрокаТаблицы.СуммаНДС;
			Проводка.Содержание   =  НСтр("ru = 'Начисление НДС по импорту'", ОбщегоНазначения.КодОсновногоЯзыка());
			
			Проводка.СчетДт       = СтрокаТаблицы.КорСчет;		
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаТаблицы.КорСубконто1);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаТаблицы.КорСубконто2);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтрокаТаблицы.КорСубконто3);

			Проводка.СчетКт       = СтрокаТаблицы.СчетУчетаНДСПоРеализации;
			
			Если СтрокаТаблицы.ВидНалогаНДС = Перечисления.ВидыНДС.НДССИзменениемСрокаУплаты Тогда 
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,"НалогиСборыОтчисления", Справочники.НалогиСборыОтчисления.НалогНаДобавленнуюСтоимостьСИзмененнымСрокомУплаты);
			Иначе
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,"НалогиСборыОтчисления", Реквизиты.ВидНалогаНДСПоИмпорту);
			КонецЕсли; 			
			
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,"ВидыПлатежейВБюджетИФонды", Перечисления.ВидыПлатежейВБюджетИФонды.Налог);			
					
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
			Проводка, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);
			
			Если ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт).Валютный Тогда
				
				Проводка.ВалютаДт = СтрокаТаблицы.ВалютаВзаиморасчетов;
				Проводка.ВалютнаяСуммаДт = СтрокаТаблицы.СуммаНДСВал;
				
			КонецЕсли;
			
			Если ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт).Валютный Тогда
				
				Проводка.ВалютаКт = СтрокаТаблицы.ВалютаВзаиморасчетов;
				Проводка.ВалютнаяСуммаКт = СтрокаТаблицы.СуммаНДСВал;
				
			КонецЕсли;
			
			// поводки по налоговому учету
			Если Реквизиты.НеобходимостьОтраженияВНУ Тогда
				
				ПроводкаНУ = Движения.Налоговый.Добавить();
				
				ПроводкаНУ.Период       = Реквизиты.Период;
				ПроводкаНУ.Организация  = Реквизиты.Организация;
				ПроводкаНУ.Сумма        = СтрокаТаблицы.СуммаНДС;
							
				ПроводкаНУ.Содержание   =  НСтр("ru = 'Начисление НДС по импорту'", ОбщегоНазначения.КодОсновногоЯзыка());
				
				ПроводкаНУ.СчетДт       = ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьСчетУчетаНДСКНачислениюНУ(СтрокаТаблицы.КорСчет);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 1, СтрокаТаблицы.КорСубконто1);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 2, СтрокаТаблицы.КорСубконто2);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 3, СтрокаТаблицы.КорСубконто3);
				
				ПроводкаНУ.СчетКт       = ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьСчетУчетаНДСНачисленногоНУ(СтрокаТаблицы.СчетУчетаНДСПоРеализации, Реквизиты.Период);
				Если СтрокаТаблицы.ВидНалогаНДС = Перечисления.ВидыНДС.НДССИзменениемСрокаУплаты Тогда 
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт,"НалогиСборыОтчисления", Справочники.НалогиСборыОтчисления.НалогНаДобавленнуюСтоимостьСИзмененнымСрокомУплаты);
				Иначе
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт,"НалогиСборыОтчисления", Реквизиты.ВидНалогаНДСПоИмпорту);					
				КонецЕсли;
					
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт,"ВидыПлатежейВБюджетИФонды", Перечисления.ВидыПлатежейВБюджетИФонды.Налог);
				    	
				
				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				ПроводкаНУ, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);
				
				ПроцедурыНалоговогоУчета.ВидУчетаНУ(ПроводкаНУ, Реквизиты.ВидУчетаНУ);						
				
			КонецЕсли;	
		КонецЕсли;

		//Если отражение на счетах учета расчетов,
		//НДС: 1421 - 3397
		//Если отражение на счетах учета расчетов с бюджетом (Принимаесм в зачет НДС, после уплаты налога:
		//1421 - 1422
		
		Проводка = Движения.Типовой.Добавить();
		
		Проводка.Период       = Реквизиты.Период;
		Проводка.Организация  = Реквизиты.Организация;
		Проводка.Сумма        = СтрокаТаблицы.СуммаНДС;
		Проводка.Содержание   = СтрокаТаблицы.Содержание;
		
		Проводка.СчетДт       = СтрокаТаблицы.Счет;
		
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаТаблицы.Субконто1);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаТаблицы.Субконто2);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтрокаТаблицы.Субконто3);
		
		
		Проводка.СчетКт       = СтрокаТаблицы.КорСчет;
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтрокаТаблицы.КорСубконто1);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтрокаТаблицы.КорСубконто2);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, СтрокаТаблицы.КорСубконто3);
		
		
		Если СтрокаТаблицы.ВидНалогаНДС = Перечисления.ВидыНДС.НДССИзменениемСрокаУплаты Тогда
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,"НалогиСборыОтчисления", Справочники.НалогиСборыОтчисления.НалогНаДобавленнуюСтоимостьСИзмененнымСрокомУплаты);				
		Иначе 
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,"НалогиСборыОтчисления", Справочники.НалогиСборыОтчисления.НалогНаДобавленнуюСтоимость);				
		КонецЕсли;
		
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,"ВидыПлатежейВБюджетИФонды", Перечисления.ВидыПлатежейВБюджетИФонды.Налог);
		
		ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
		Проводка, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);
		
		Если ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт).Валютный Тогда
			
			Проводка.ВалютаДт = СтрокаТаблицы.ВалютаВзаиморасчетов;
			Проводка.ВалютнаяСуммаДт = СтрокаТаблицы.СуммаНДСВал;
			
		КонецЕсли;
		
			Если ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт).Валютный Тогда
				
				Проводка.ВалютаКт = СтрокаТаблицы.ВалютаВзаиморасчетов;
				Проводка.ВалютнаяСуммаКт = СтрокаТаблицы.СуммаНДСВал;
				
			КонецЕсли;
			
			// поводки по налоговому учету
			Если Реквизиты.НеобходимостьОтраженияВНУ Тогда
				
				ПроводкаНУ = Движения.Налоговый.Добавить();
				
				ПроводкаНУ.Период       = Реквизиты.Период;
				ПроводкаНУ.Организация  = Реквизиты.Организация;
				ПроводкаНУ.Сумма        = СтрокаТаблицы.СуммаНДС;
				
				ПроводкаНУ.Содержание   = СтрокаТаблицы.Содержание;
				
				ПроводкаНУ.СчетДт       = ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьСчетУчетаНДСНачисленногоНУ(СтрокаТаблицы.Счет, Реквизиты.Период);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 1, СтрокаТаблицы.Субконто1);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 2, СтрокаТаблицы.Субконто2);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 3, СтрокаТаблицы.Субконто3);
				
				Если СтрокаТаблицы.ВидНалогаНДС = Перечисления.ВидыНДС.НДССИзменениемСрокаУплаты Тогда
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт,"НалогиСборыОтчисления", Справочники.НалогиСборыОтчисления.НалогНаДобавленнуюСтоимостьСИзмененнымСрокомУплаты);				
				Иначе 
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт,"НалогиСборыОтчисления", Справочники.НалогиСборыОтчисления.НалогНаДобавленнуюСтоимость);				
				КонецЕсли;
				 				
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт,"ВидыПлатежейВБюджетИФонды", Перечисления.ВидыПлатежейВБюджетИФонды.Налог);
				
				ПроводкаНУ.СчетКт       = ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьСчетРасчетовСКонтрагентомНУ(СтрокаТаблицы.КорСчет);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 1, СтрокаТаблицы.КорСубконто1);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 2, СтрокаТаблицы.КорСубконто2);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 3, СтрокаТаблицы.КорСубконто3);
				
				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				ПроводкаНУ, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);
				
				ПроцедурыНалоговогоУчета.ВидУчетаНУ(ПроводкаНУ, Реквизиты.ВидУчетаНУ);						
				
			КонецЕсли;	
	//	КонецЕсли;
	
		
		////////////////////////////////////////////////////////////////////////////////////////////////////
		// Для метода зачета формируем также "Закрывающую корреспонденцию"
		Если СтрокаТаблицы.ВидНалогаНДС = Перечисления.ВидыНДС.НДСМетодомЗачета Тогда
			
			Проводка = Движения.Типовой.Добавить();				
			Проводка.Период      = Реквизиты.Период;
			Проводка.Организация = Реквизиты.Организация;
			
			Проводка.Сумма       = СтрокаТаблицы.СуммаНДС;
			Проводка.Содержание  = СтрШаблон(НСтр("ru = 'Зачет %1'", ОбщегоНазначения.КодОсновногоЯзыка()), СтрокаТаблицы.Содержание);
			
			// Проводка по затратной части
			Проводка.СчетДт       = СтрокаТаблицы.КорСчет;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаТаблицы.КорСубконто1);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаТаблицы.КорСубконто2);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтрокаТаблицы.КорСубконто3);
			
			Проводка.СчетКт       = СтрокаТаблицы.СчетУчетаНДСПоРеализации;			
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,"НалогиСборыОтчисления",     Справочники.НалогиСборыОтчисления.НалогНаДобавленнуюСтоимость);
		    ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,"ВидыПлатежейВБюджетИФонды", Перечисления.ВидыПлатежейВБюджетИФонды.Налог);
			
			Если ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт).Валютный Тогда
				
				Проводка.ВалютаДт = СтрокаТаблицы.ВалютаВзаиморасчетов;
				Проводка.ВалютнаяСуммаДт = СтрокаТаблицы.СуммаНДСВал;
				
			КонецЕсли;
			
			Если ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт).Валютный Тогда
				
				Проводка.ВалютаКт = СтрокаТаблицы.ВалютаВзаиморасчетов;
				Проводка.ВалютнаяСуммаКт = СтрокаТаблицы.СуммаНДСВал;
				
			КонецЕсли;
			
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
					Проводка, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);
			
			Если Реквизиты.НеобходимостьОтраженияВНУ Тогда
				
				ПроводкаНУ = Движения.Налоговый.Добавить();
				ПроводкаНУ.Период      = Реквизиты.Период;
				ПроводкаНУ.Организация = Реквизиты.Организация;
				ПроводкаНУ.Сумма       = СтрокаТаблицы.СуммаНДС;
				ПроводкаНУ.Содержание  = СтрШаблон(НСтр("ru = 'Зачет %1'", ОбщегоНазначения.КодОсновногоЯзыка()), СтрокаТаблицы.Содержание);
				
				ПроводкаНУ.СчетДт      = ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьСчетРасчетовСКонтрагентомНУ(СтрокаТаблицы.КорСчет);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 1, СтрокаТаблицы.КорСубконто1);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 2, СтрокаТаблицы.КорСубконто2);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 3, СтрокаТаблицы.КорСубконто3);
				
				ПроводкаНУ.СчетКт      = ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьСчетУчетаНДСНачисленногоНУ(СтрокаТаблицы.СчетУчетаНДСПоРеализации, Реквизиты.Период);			
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт,"НалогиСборыОтчисления",     Справочники.НалогиСборыОтчисления.НалогНаДобавленнуюСтоимость);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт,"ВидыПлатежейВБюджетИФонды", Перечисления.ВидыПлатежейВБюджетИФонды.Налог);
				
				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
					ПроводкаНУ, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);
			
				ПроцедурыНалоговогоУчета.ВидУчетаНУ(ПроводкаНУ, Реквизиты.ВидУчетаНУ);
			КонецЕсли;		
		КонецЕсли;	 // НДС методом зачета		
		
	КонецЦикла;
	
	Движения.Типовой.Записывать = Истина;
	Если Реквизиты.НеобходимостьОтраженияВНУ Тогда
		Движения.Налоговый.Записывать = Истина;
	КонецЕсли;

КонецПроцедуры

// ЗАЯВЛЕНИЕ О ВВОЗЕ ТОВАРОВ И УПЛАТЕ КОСВЕННЫХ НАЛОГОВ

Процедура СформироватьДвиженияЗаявлениеОВвозеТоваровНДС(ТаблицаНДС, Реквизиты, Движения, Отказ)
	
	Для Каждого СтрокаТаблицы Из ТаблицаНДС Цикл
		
		Если СтрокаТаблицы.СуммаНДС = 0 Тогда 
			Продолжить;
		КонецЕсли;
		
		Если СтрокаТаблицы.ВидНалогаНДС = Перечисления.ВидыНДС.НДСМетодомЗачета Тогда
			Содержание = СтрШаблон(НСтр("ru = 'НДС методом зачета начислен: %1'", ОбщегоНазначения.КодОсновногоЯзыка()), СокрЛП(Реквизиты.Комментарий));
		Иначе	
			Содержание = СтрШаблон(НСтр("ru = 'НДС по импорту: %1'", ОбщегоНазначения.КодОсновногоЯзыка()), СокрЛП(Реквизиты.Комментарий));
		КонецЕсли; 
		
		Проводка = Движения.Типовой.Добавить();
		
		Проводка.Период       = Реквизиты.Период;
		Проводка.Организация  = Реквизиты.Организация;
		Проводка.Сумма        = СтрокаТаблицы.СуммаНДС;
		Проводка.Содержание   = Содержание;
		
		Проводка.СчетКт       = СтрокаТаблицы.Счет;
		
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтрокаТаблицы.Субконто1);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтрокаТаблицы.Субконто2);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, СтрокаТаблицы.Субконто3);
		
		Проводка.СчетДт       = СтрокаТаблицы.КорСчет;
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаТаблицы.КорСубконто1);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаТаблицы.КорСубконто2);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтрокаТаблицы.КорСубконто3);
		
		// переопределяем вид налога НДС для последующего зачета
		Если СтрокаТаблицы.ВидНалогаНДС = Перечисления.ВидыНДС.НДСМетодомЗачета Тогда
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"НалогиСборыОтчисления", Справочники.НалогиСборыОтчисления.НалогНаДобавленнуюСтоимость);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"ВидыПлатежейВБюджетИФонды", Перечисления.ВидыПлатежейВБюджетИФонды.Налог);
		
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"НалогиСборыОтчисления", Справочники.НалогиСборыОтчисления.НалогНаДобавленнуюСтоимость);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ВидыПлатежейВБюджетИФонды", Перечисления.ВидыПлатежейВБюджетИФонды.Налог);
		КонецЕсли;
		
		ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
			Проводка, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);
			
		Если ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы.Счет).Валютный Тогда
			
			Проводка.ВалютаКт = Реквизиты.ВалютаРегламентированногоУчета;
			Проводка.ВалютнаяСуммаКт = СтрокаТаблицы.СуммаНДСВал;
			
		КонецЕсли;
			
		Если ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы.КорСчет).Валютный Тогда
			
			Проводка.ВалютаДт = Реквизиты.ВалютаРегламентированногоУчета;
			Проводка.ВалютнаяСуммаДт = СтрокаТаблицы.СуммаНДСВал;
			
		КонецЕсли;
		
		// поводки по налоговому учету
		Если Реквизиты.НеобходимостьОтраженияВНУ И ЗначениеЗаполнено(СтрокаТаблицы.КорСчетНУ) Тогда
			
			ПроводкаНУ = Движения.Налоговый.Добавить();
			
			ПроводкаНУ.Период       = Реквизиты.Период;
			ПроводкаНУ.Организация  = Реквизиты.Организация;
			ПроводкаНУ.Сумма        = СтрокаТаблицы.СуммаНДС;
			
			ПроводкаНУ.Содержание   = Содержание;
			
			ПроводкаНУ.СчетДт       = СтрокаТаблицы.КорСчетНУ;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 1, СтрокаТаблицы.КорСубконтоНУ1);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 2, СтрокаТаблицы.КорСубконтоНУ2);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 3, СтрокаТаблицы.КорСубконтоНУ3);
			
			ПроводкаНУ.СчетКт       = ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьСчетУчетаНДСНачисленногоНУ(СтрокаТаблицы.Счет, Реквизиты.Период);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 1, СтрокаТаблицы.Субконто1);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 2, СтрокаТаблицы.Субконто2);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 3, СтрокаТаблицы.Субконто3);
						
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				ПроводкаНУ, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);
			
			ПроцедурыНалоговогоУчета.ВидУчетаНУ(ПроводкаНУ, Реквизиты.ВидУчетаНУ);						
			
		КонецЕсли;	
		
		////////////////////////////////////////////////////////////////////////////////////////////////////
		// Для метода зачета формируем также "Закрывающую корреспонденцию"
		Если СтрокаТаблицы.ВидНалогаНДС = Перечисления.ВидыНДС.НДСМетодомЗачета Тогда
			
			Проводка = Движения.Типовой.Добавить();				
			Проводка.Период      = Реквизиты.Период;
			Проводка.Организация = Реквизиты.Организация;
			
			Проводка.Сумма       = СтрокаТаблицы.СуммаНДС;
			Проводка.Содержание  = СтрШаблон(НСтр("ru = 'НДС методом зачета принят к зачету: %1'", ОбщегоНазначения.КодОсновногоЯзыка()), СокрЛП(Реквизиты.Комментарий));
			
			// Проводка по затратной части
			Проводка.СчетКт       = СтрокаТаблицы.КорСчет;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт, 1, СтрокаТаблицы.КорСубконто1);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт, 2, СтрокаТаблицы.КорСубконто2);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт, 3, СтрокаТаблицы.КорСубконто3);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"НалогиСборыОтчисления",     Справочники.НалогиСборыОтчисления.НалогНаДобавленнуюСтоимость);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ВидыПлатежейВБюджетИФонды", Перечисления.ВидыПлатежейВБюджетИФонды.Налог);
			
			Проводка.СчетДт       = СтрокаТаблицы.СчетУчетаНДСКВозмещению;			
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"НалогиСборыОтчисления",     Справочники.НалогиСборыОтчисления.НалогНаДобавленнуюСтоимость);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"ВидыПлатежейВБюджетИФонды", Перечисления.ВидыПлатежейВБюджетИФонды.Налог);
			
			Если ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт).Валютный Тогда
				
				Проводка.ВалютаКт = Реквизиты.ВалютаРегламентированногоУчета;
				Проводка.ВалютнаяСуммаКт = СтрокаТаблицы.СуммаНДСВал;
				
			КонецЕсли;
			
			Если ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт).Валютный Тогда
				
				Проводка.ВалютаДт = Реквизиты.ВалютаРегламентированногоУчета;
				Проводка.ВалютнаяСуммаДт = СтрокаТаблицы.СуммаНДСВал;
				
			КонецЕсли;
			
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
					Проводка, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);
			
			Если Реквизиты.НеобходимостьОтраженияВНУ И ЗначениеЗаполнено(СтрокаТаблицы.КорСчетНУ) Тогда
				
				ПроводкаНУ = Движения.Налоговый.Добавить();
				ПроводкаНУ.Период      = Реквизиты.Период;
				ПроводкаНУ.Организация = Реквизиты.Организация;
				ПроводкаНУ.Сумма       = СтрокаТаблицы.СуммаНДС;
				ПроводкаНУ.Содержание  = СтрШаблон(НСтр("ru = 'НДС методом зачета принят к зачету: %1'", ОбщегоНазначения.КодОсновногоЯзыка()), СокрЛП(Реквизиты.Комментарий));
				
				ПроводкаНУ.СчетКт      = СтрокаТаблицы.КорСчетНУ;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 1,СтрокаТаблицы.КорСубконтоНУ1);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 2,СтрокаТаблицы.КорСубконтоНУ2);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 3,СтрокаТаблицы.КорСубконтоНУ3);
				
				ПроводкаНУ.СчетДт      = ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьСчетУчетаНДСКВозмещениюНУ(СтрокаТаблицы.СчетУчетаНДСКВозмещению, Реквизиты.Период);			
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт,"НалогиСборыОтчисления",     Реквизиты.ВидНалогаНДС);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт,"ВидыПлатежейВБюджетИФонды", СтрокаТаблицы.Субконто2);
				
				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
					ПроводкаНУ, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);
			
				ПроцедурыНалоговогоУчета.ВидУчетаНУ(ПроводкаНУ, Реквизиты.ВидУчетаНУ);
			КонецЕсли;		
		КонецЕсли;	 // НДС методом зачета		
		
	КонецЦикла;
	
	Движения.Типовой.Записывать = Истина;
	Если Реквизиты.НеобходимостьОтраженияВНУ Тогда
		Движения.Налоговый.Записывать = Истина;
	КонецЕсли;

КонецПроцедуры

// СПИСАНИЕ ТОВАРОВ

Функция ПолучитьПустуюТаблицуКорректировкиНДС()
	
	ТаблицаКорректировкиНДС = Новый ТаблицаЗначений;
	ТаблицаКорректировкиНДС.Колонки.Добавить("НомерСтроки",              ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(5, 0));
	ТаблицаКорректировкиНДС.Колонки.Добавить("ВидОперацииКорректировки", Новый ОписаниеТипов("СправочникСсылка.ВидыПоступления"));
	ТаблицаКорректировкиНДС.Колонки.Добавить("ВидНалогаНДС", 			 Новый ОписаниеТипов("ПеречислениеСсылка.ВидыНДС"));
	ТаблицаКорректировкиНДС.Колонки.Добавить("ВидОборота", 				 Новый ОписаниеТипов("ПеречислениеСсылка.ВидыОборотовПоРеализации"));
	ТаблицаКорректировкиНДС.Колонки.Добавить("ТМЗ",            	         Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаКорректировкиНДС.Колонки.Добавить("СтавкаНДС", 				 Новый ОписаниеТипов("СправочникСсылка.СтавкиНДС"));
	ТаблицаКорректировкиНДС.Колонки.Добавить("СчетУчетаНДС", 			 Новый ОписаниеТипов("ПланСчетовСсылка.Типовой"));

	ТаблицаКорректировкиНДС.Колонки.Добавить("УплаченныйНДС",      		  ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаКорректировкиНДС.Колонки.Добавить("СуммаКорректировкиОборота", ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаКорректировкиНДС.Колонки.Добавить("СуммаНДС",      			  ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаКорректировкиНДС.Колонки.Добавить("СуммаНДСВал",    	          ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаКорректировкиНДС.Колонки.Добавить("ВалютаВзаиморасчетов",      Новый ОписаниеТипов("СправочникСсылка.валюты"));

	
	Возврат ТаблицаКорректировкиНДС;
	
КонецФункции

//Акциз
Процедура СформироватьДвиженияПоРегиструАкциз(ТаблицаАкциз, Реквизиты, Движения, Отказ)

	Если ТаблицаАкциз.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияБКВызовСервера.ДобавитьКолонкуВТаблицуЗначений(ТаблицаАкциз, "СтруктурнаяЕдиница"	,Реквизиты.Организация);
	ОбщегоНазначенияБКВызовСервера.ДобавитьКолонкуВТаблицуЗначений(ТаблицаАкциз, "Организация"			,Реквизиты.Организация);
	ОбщегоНазначенияБКВызовСервера.ДобавитьКолонкуВТаблицуЗначений(ТаблицаАкциз, "Налогоплательщик"		,Реквизиты.НалогоплательщикАкциза);
	ОбщегоНазначенияБКВызовСервера.ДобавитьКолонкуВТаблицуЗначений(ТаблицаАкциз, "Период"				,Реквизиты.Период);

	Для Каждого СтрокаТаблицы Из ТаблицаАкциз Цикл
		СтрокаТаблицы.Количество = СтрокаТаблицы.Количество / (?(СтрокаТаблицы.КоэффициентРасчетаОблагаемойБазыАкциза = 0, 1, СтрокаТаблицы.КоэффициентРасчетаОблагаемойБазыАкциза));
	КонецЦикла;
	
	Движения.Акциз.Загрузить(ТаблицаАкциз);
	Движения.Акциз.Записывать = Истина;
	
КонецПроцедуры

// НДС
Процедура СформироватьДвиженияПоРегиструНДС(ИмяРегистра, ТаблицаНДС, Реквизиты, Движения, Отказ)   Экспорт
	
	Если ТаблицаНДС.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияБКВызовСервера.ДобавитьКолонкуВТаблицуЗначений(ТаблицаНДС, "СтруктурнаяЕдиница"	,Реквизиты.Организация);
	ОбщегоНазначенияБКВызовСервера.ДобавитьКолонкуВТаблицуЗначений(ТаблицаНДС, "Организация"		,Реквизиты.Организация);
	ОбщегоНазначенияБКВызовСервера.ДобавитьКолонкуВТаблицуЗначений(ТаблицаНДС, "Налогоплательщик"	,Реквизиты.Налогоплательщик);
	ОбщегоНазначенияБКВызовСервера.ДобавитьКолонкуВТаблицуЗначений(ТаблицаНДС, "Период"				,Реквизиты.Период);
	
	Если  Не (ИмяРегистра = "НДСВзаиморасчетыСБюджетом" 
		ИЛИ ИмяРегистра = "НДСЗаНерезидента") 
		И ТаблицаНДС.Колонки.Найти("Контрагент") = Неопределено Тогда   // регистр  НДСВзаиморасчетыСБюджетом и НДСЗаНерезидента не содержат измерения Контрагент
		ОбщегоНазначенияБКВызовСервера.ДобавитьКолонкуВТаблицуЗначений(ТаблицаНДС, "Контрагент"		,Реквизиты.Контрагент);
	КонецЕсли;

	Движения[ИмяРегистра].Загрузить(ТаблицаНДС);
	Движения[ИмяРегистра].Записывать = Истина;
	
КонецПроцедуры

// СчетФактураПолученный

Функция ПодготовитьПараметрыСчетФактураПолученный(ТаблицаСчетФактур, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы ТаблицаСчетФактур

	СписокОбязательныхКолонок = ""
	+ "СтавкаНДС,"      // <Число> - номер строки в списке
	+ "Номенклатура,"   // <СправочникСсылка.Номенклатура>
	+ "Поставщик,"  	// <СправочникСсылка.Контрагенты> - списываемая номенклатура
	+ "СуммаБезНДСВал," // <Число,15,2> - сумма без НДС в валюте документа 
	+ "НДСВал,"    		// <Число,15,2> - сумма НДС в валюте документа
	+ "СуммаБезНДС,"  	// <Число,15,2> - сумма без НДС
	+ "НДС,"  			// <Число,15,2> - сумма НДС
	+ "ДатаОборота";    // <Дата> - дата оборота по реализации
	
	Параметры.Вставить("ТаблицаСчетФактур",
		ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаСчетФактур, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период," 		// <Дата> - период движений - дата документа
	+ "ПлательщикНДС,"  // <СправочникСсылка.Организации> - Плательщик НДС
	+ "Организация," 	// <СправочникСсылка.Организации>
	+ "Контрагент";   	// <СправочникСсылка.Контрагенты>

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

// СчетФактураВыданный

Функция ПодготовитьПараметрыСчетФактураВыданный(ТаблицаСчетовФактур, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы ТаблицаСчетФактур

	СписокОбязательныхКолонок = ""
	+ "СтавкаНДС,"		// <СправочникСсылка.СтавкиНДС> - ставка НДС
	+ "СтавкаАкциза,"	// <СправочникСсылка.СтавкиАкциза> - ставка акциза
	+ "Номенклатура,"   // <СправочникСсылка.Номенклатура>
	+ "Покупатель,"  	// <СправочникСсылка.Контрагенты> - списываемая номенклатура
	+ "СуммаБезНДСВал," // <Число,15,2> - сумма без НДС в валюте документа 
	+ "НДСВал,"    		// <Число,15,2> - сумма НДС в валюте документа
	+ "АкцизВал,"    	// <Число,15,2> - сумма акциза в валюте документа
	+ "СуммаБезНДС,"  	// <Число,15,2> - сумма без НДС
	+ "НДС,"  			// <Число,15,2> - сумма НДС 
	+ "Акциз," 			// <Число,15,2> - сумма акциза
	+ "ОборотПоРеализации," // <Число,15,2> - сумма оборота по реализации
	+ "ОборотПоРеализацииВал," // <Число,15,2> - сумма оборота по реализации в валюте договора
	+ "СтранаНазначения," // <СправочникСсылка.КлассификаторСтранМира> - страна назначения
	+ "УчастникСовместнойДеятельности," // <Булево> - участник совместной деятельности
	+ "ДатаОборота";    // <Дата> - дата оборота по реализации
	
	ОбщегоНазначенияБКВызовСервера.ДобавитьКолонкуВТаблицуЗначений(ТаблицаСчетовФактур, "СтавкаАкциза", Справочники.СтавкиАкциза.ПустаяСсылка());
	ОбщегоНазначенияБКВызовСервера.ДобавитьКолонкуВТаблицуЗначений(ТаблицаСчетовФактур, "Акциз"       , 0);
	ОбщегоНазначенияБКВызовСервера.ДобавитьКолонкуВТаблицуЗначений(ТаблицаСчетовФактур, "АкцизВал"    , 0);

	Параметры.Вставить("ТаблицаСчетовФактур",
		ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаСчетовФактур, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период," 		// <Дата> - период движений - дата документа
	+ "ПлательщикНДС,"  // <СправочникСсылка.Организации> - Плательщик НДС
	+ "Организация," 	// <СправочникСсылка.Организации>
	+ "Контрагент";     // <СправочникСсылка.Контрагенты>

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

//НДС за не резидента
Процедура СформироватьДвиженияНДСЗаНерезидента(ТаблицаНДС, ТаблицаРеквизиты, Движения, Отказ) Экспорт
	Реквизиты = ТаблицаРеквизиты[0];                               
	СформироватьДвиженияПоРегиструНДС("НДСЗаНерезидента", ТаблицаНДС, Реквизиты, Движения, Отказ);
	Если Реквизиты.ВидОперации = Перечисления.ВидыОперацийРегистрацииНДСЗаНерезидента.ПринятиеНДСКЗачету Тогда
		
		ТаблицаНДС.Колонки["ВидНалогаНДС"].Имя 			= "ВидНалогаНДС1";
		ТаблицаНДС.Колонки["ВидНалогаНДСПринятие"].Имя 	= "ВидНалогаНДС";
		
		СформироватьДвиженияПоРегиструНДС("НДСКВозмещению", ТаблицаНДС, Реквизиты, Движения, Отказ);
		
		ТаблицаНДС.Колонки["ВидНалогаНДС"].Имя 	= "ВидНалогаНДСПринятие";
		ТаблицаНДС.Колонки["ВидНалогаНДС1"].Имя = "ВидНалогаНДС";
		
		
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из ТаблицаНДС Цикл
		
		Если СтрокаТаблицы.СуммаНДС = 0 Тогда 
			Продолжить;
		КонецЕсли;
		
		Проводка = Движения.Типовой.Добавить();
		
		Проводка.Период       = Реквизиты.Период;
		Проводка.Организация  = Реквизиты.Организация;
		Проводка.Сумма        = СтрокаТаблицы.СуммаНДС;
		Проводка.Содержание   = СтрокаТаблицы.Содержание;
		
		Проводка.СчетДт       = СтрокаТаблицы.Счет;
		
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаТаблицы.Субконто1);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаТаблицы.Субконто2);
		
		Проводка.СчетКт       = СтрокаТаблицы.КорСчет;
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтрокаТаблицы.КорСубконто1);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтрокаТаблицы.КорСубконто2);
		
		ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
			Проводка, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);
			
		// поводки по налоговому учету
		Если Реквизиты.НеобходимостьОтраженияВНУ Тогда
			
			ПроводкаНУ = Движения.Налоговый.Добавить();
			
			ПроводкаНУ.Период       = Реквизиты.Период;
			ПроводкаНУ.Организация  = Реквизиты.Организация;
			ПроводкаНУ.Сумма        = СтрокаТаблицы.СуммаНДС;
			
			ПроводкаНУ.Содержание   = СтрокаТаблицы.Содержание;
			
			ПроводкаНУ.СчетДт       = ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьСчетУчетаНДСНачисленногоНУ(СтрокаТаблицы.Счет, Реквизиты.Период);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 1, СтрокаТаблицы.Субконто1);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 2, СтрокаТаблицы.Субконто2);
			
			ПроводкаНУ.СчетКт       = ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьСчетУчетаНДСНачисленногоНУ(СтрокаТаблицы.КорСчет, Реквизиты.Период);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 1, СтрокаТаблицы.КорСубконто1);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 2, СтрокаТаблицы.КорСубконто2);
						
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				ПроводкаНУ, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);
			
			ПроцедурыНалоговогоУчета.ВидУчетаНУ(ПроводкаНУ, Реквизиты.ВидУчетаНУ);						
			
		КонецЕсли;	
		
	КонецЦикла;
	
	Движения.Типовой.Записывать = Истина;
	Если Реквизиты.НеобходимостьОтраженияВНУ Тогда
		Движения.Налоговый.Записывать = Истина;
	КонецЕсли;
	
	
КонецПроцедуры	

//////////////////////////////////////////////////////////////////////////
// РАБОТА СО СЧЕТАМИ-ФАКТУРАМИ

//Функиця создает структуры таблицы значений для хранения остатков товаров по счет-фактуре
//
Функция ИнициализацияТаблицыЗначений(ИмяКолонкиТовара = "Номенклатура", ТипКолонки , ЕстьАкциз = Ложь, ИмяТЧ = "")

	ТаблицаСтрок = Новый ТаблицаЗначений;
	ТаблицаСтрок.Колонки.Добавить(ИмяКолонкиТовара, ТипКолонки);
	ТаблицаСтрок.Колонки.Добавить("Сумма");
	ТаблицаСтрок.Колонки.Добавить("СуммаНДС");
	
	Если ИмяКолонкиТовара = "Номенклатура"  Тогда
		ТаблицаСтрок.Колонки.Добавить("Количество");		
		Если ИмяТЧ = "Товары" ИЛИ ИмяТЧ = "Услуги" Тогда
			ТаблицаСтрок.Колонки.Добавить("Цена");
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяТЧ = "Товары" Тогда
		Если Метаданные.Справочники.Найти("ЕдиницыИзмерения") <> Неопределено Тогда
			ТаблицаСтрок.Колонки.Добавить("ЕдиницаИзмерения", Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения"));
		Иначе
			ТаблицаСтрок.Колонки.Добавить("ЕдиницаИзмерения", Новый ОписаниеТипов("СправочникСсылка.КлассификаторЕдиницИзмерения"));
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяТЧ = "Услуги" Тогда
		ТаблицаСтрок.Колонки.Добавить("Содержание");
	КонецЕсли;

	ТаблицаСтрок.Колонки.Добавить("СтавкаНДС", Новый ОписаниеТипов("СправочникСсылка.СтавкиНДС"));      
	
	Если ЕстьАкциз Тогда
		ТаблицаСтрок.Колонки.Добавить("СтавкаАкциза", Новый ОписаниеТипов("СправочникСсылка.СтавкиАкциза"));		
		ТаблицаСтрок.Колонки.Добавить("СуммаАкциза");      
	КонецЕсли;
	
	Возврат ТаблицаСтрок;
	
КонецФункции // ИнициализацияТаблицыСтрок()

Функция ЗаполнитьРеквизитыШапкиСчетаФактуры(ОбъектСчетаФактуры, ДокументОснования, ВидСчетаФактуры, Отказ = Неопределено)
	
	РезультатПроверки = Истина;			
	
	Если ДокументОснования = Неопределено Тогда
		Возврат РезультатПроверки;
	Конецесли;	
	
	// Реквизиты шапки документа могут обновляться только в случае, если 
	// для счета-фактуры зарегистрирован единственный документ-основание.
	// В остальных случаях - просто контроллируется совпадение ключевых реквизитов при проведении счета-фактуры
	Если ОбъектСчетаФактуры.ДокументыОснования.Количество() < 2 Тогда
		
		// Заполнить реквизиты шапки.
		МетаданныеДокумента = ДокументОснования.Метаданные();
		
		// Организация.
		Если ОбщегоНазначенияБК.ЕстьРеквизитДокумента("Организация", МетаданныеДокумента) Тогда				
			ОбъектСчетаФактуры.Организация = ДокументОснования.Организация;
		КонецЕсли;
		
		// СтруктурноеПодразделение.
		Если ОбщегоНазначенияБК.ЕстьРеквизитДокумента("СтруктурноеПодразделение", МетаданныеДокумента) Тогда				
			ОбъектСчетаФактуры.СтруктурноеПодразделение = ДокументОснования.СтруктурноеПодразделение;
		КонецЕсли;
		
		// Контрагент.
		Если ОбщегоНазначенияБК.ЕстьРеквизитДокумента("Контрагент", МетаданныеДокумента) Тогда				
			ОбъектСчетаФактуры.Контрагент = ДокументОснования.Контрагент;
			// Поставщик и покупатель, с учетом возможности указания головного предприятия
			Если ВидСчетаФактуры = "СчетФактураВыданный" Тогда
				ИмяРеквизитаПокупатель = "Контрагент";
				ИмяРеквизитаПоставщик  = "Организация";
			Иначе	
				ИмяРеквизитаПокупатель = "Организация";
				ИмяРеквизитаПоставщик  = "Контрагент";
			КонецЕсли;				
			
			Если НЕ ОбъектСчетаФактуры.Покупатель = ДокументОснования[ИмяРеквизитаПокупатель] Тогда
				// проверим на указание головного предприятия. если не соответствует ни тому, ни другому - перезапишем
				Покупатель = УчетНДСИАкциза.ПолучитьПлательщикаНДСВСчетеФактуре(ДокументОснования[ИмяРеквизитаПокупатель]);
				Если НЕ ОбъектСчетаФактуры.Покупатель = Покупатель Тогда
					ОбъектСчетаФактуры.Покупатель = Покупатель;						
				КонецЕсли; 					
			КонецЕсли; 
			Если НЕ ОбъектСчетаФактуры.Поставщик = ДокументОснования[ИмяРеквизитаПоставщик] Тогда
				// проверим на указание головного предприятия. если не соответствует ни тому, ни другому - перезапишем
				Поставщик = УчетНДСИАкциза.ПолучитьПлательщикаНДСВСчетеФактуре(ДокументОснования[ИмяРеквизитаПоставщик]);
				Если НЕ ОбъектСчетаФактуры.Поставщик = Поставщик Тогда
					ОбъектСчетаФактуры.Поставщик = Поставщик;						
				КонецЕсли; 					
			КонецЕсли;
			
		КонецЕсли;
		
		// ДоговорКонтрагента.
		Если ОбщегоНазначенияБК.ЕстьРеквизитДокумента("ДоговорКонтрагента", МетаданныеДокумента) Тогда				
			ОбъектСчетаФактуры.ДоговорКонтрагента = ДокументОснования.ДоговорКонтрагента;
		КонецЕсли;	
		
		// Валюта.
		Если ОбщегоНазначенияБК.ЕстьРеквизитДокумента("ВалютаДокумента", МетаданныеДокумента) Тогда				
			ОбъектСчетаФактуры.ВалютаДокумента = ДокументОснования.ВалютаДокумента;
		КонецЕсли;
		
		// КурсВзаиморасчетов.
		Если ОбщегоНазначенияБК.ЕстьРеквизитДокумента("КурсВзаиморасчетов", МетаданныеДокумента) Тогда
			ОбъектСчетаФактуры.КурсВзаиморасчетов = ДокументОснования.КурсВзаиморасчетов;
		КонецЕсли;
		
		// КратностьВзаиморасчетов.
		Если ОбщегоНазначенияБК.ЕстьРеквизитДокумента("КратностьВзаиморасчетов", МетаданныеДокумента) Тогда
			ОбъектСчетаФактуры.КратностьВзаиморасчетов = ДокументОснования.КратностьВзаиморасчетов;
		КонецЕсли;			
		
		// Флаги налогов
		Если ОбщегоНазначенияБК.ЕстьРеквизитДокумента("СуммаВключаетНДС", МетаданныеДокумента) Тогда				
			ОбъектСчетаФактуры.СуммаВключаетНДС = ДокументОснования.СуммаВключаетНДС;
		КонецЕсли;
		
		Если ВидСчетаФактуры = "СчетФактураВыданный" Тогда
			Если ОбщегоНазначенияБК.ЕстьРеквизитДокумента("УчитыватьАкциз", МетаданныеДокумента) Тогда				
				ОбъектСчетаФактуры.УчитыватьАкциз = ДокументОснования.УчитыватьАкциз;
			КонецЕсли;
			
			Если ОбщегоНазначенияБК.ЕстьРеквизитДокумента("СуммаВключаетАкциз", МетаданныеДокумента) Тогда				
				ОбъектСчетаФактуры.СуммаВключаетАкциз = ДокументОснования.СуммаВключаетАкциз;
			КонецЕсли;
			
			Если ОбщегоНазначенияБК.ЕстьРеквизитДокумента("ДоверенностьНомер", МетаданныеДокумента) Тогда				
				ОбъектСчетаФактуры.ДоверенностьНомер = ДокументОснования.ДоверенностьНомер;
			КонецЕсли;
			
			Если ОбщегоНазначенияБК.ЕстьРеквизитДокумента("ДоверенностьДата", МетаданныеДокумента) Тогда				
				ОбъектСчетаФактуры.ДоверенностьДата = ДокументОснования.ДоверенностьДата;
			КонецЕсли;   
			
			Если ОбщегоНазначенияБК.ЕстьРеквизитДокумента("ДоверенностьЛицо", МетаданныеДокумента) Тогда				
				ОбъектСчетаФактуры.ДоверенностьЛицо = ДокументОснования.ДоверенностьЛицо;
			КонецЕсли;
			
			Если ОбщегоНазначенияБК.ЕстьРеквизитДокумента("ДоверенностьВыдана", МетаданныеДокумента) Тогда				
				ОбъектСчетаФактуры.ДоверенностьВыдана = ДокументОснования.ДоверенностьВыдана;
			КонецЕсли;  
			
			// дата оборота перезаполняется по дате подписания
			Если ОбщегоНазначенияБК.ЕстьРеквизитДокумента("ДатаПодписанияГЗ", МетаданныеДокумента) Тогда				
				ОбъектСчетаФактуры.ДатаСовершенияОборотаПоРеализации = ДокументОснования.ДатаПодписанияГЗ;
			КонецЕсли;  
			
		КонецЕсли;
		
		// ДатаСовершенияОборотаПоРеализации.
		Если НЕ ЗначениеЗаполнено(ОбъектСчетаФактуры.ДатаСовершенияОборотаПоРеализации) Тогда
			ОбъектСчетаФактуры.ДатаСовершенияОборотаПоРеализации = ДокументОснования.Дата;
		КонецЕсли;
		
	Иначе
		РезультатПроверки = ПроверитьСоответствиеРеквизитовСчетаФактурыИДокументовОснований(ОбъектСчетаФактуры, ДокументОснования, Отказ);			
		
		// ДатаСовершенияОборотаПоРеализации.
		Если НЕ ЗначениеЗаполнено(ОбъектСчетаФактуры.ДатаСовершенияОборотаПоРеализации) Тогда
			ОбъектСчетаФактуры.ДатаСовершенияОборотаПоРеализации = ОбъектСчетаФактуры.ДокументыОснования[0].ДокументОснование.Дата;
		КонецЕсли;
	КонецЕсли;	
	
	// СпособВыставления или СпособПолучения.
	ИмяРеквизитаСпособОбмена = ?(ВидСчетаФактуры = "СчетФактураВыданный", "СпособВыставления", "СпособПолучения");
	Если НЕ ЗначениеЗаполнено(ОбъектСчетаФактуры[ИмяРеквизитаСпособОбмена]) Тогда
		ОбъектСчетаФактуры[ИмяРеквизитаСпособОбмена] = Перечисления.СпособыОбменаДокументами.Бумажно;
	КонецЕсли;
	
	// ВидСчетаФактуры.
	Если НЕ ЗначениеЗаполнено(ОбъектСчетаФактуры.ВидСчетаФактуры) Тогда
		Если ОбщегоНазначенияБК.ЕстьРеквизитДокумента("УдалитьДополнительная", ОбъектСчетаФактуры.Метаданные()) 
			И ОбъектСчетаФактуры.УдалитьДополнительная Тогда
			ОбъектСчетаФактуры.ВидСчетаФактуры = Перечисления.ВидыСчетовФактур.Дополнительный;
		Иначе
			ОбъектСчетаФактуры.ВидСчетаФактуры = Перечисления.ВидыСчетовФактур.Обычный;    
		КонецЕсли;
	КонецЕсли;
	
	Возврат РезультатПроверки;
	
КонецФункции

Функция ПроверитьСоответствиеРеквизитовСчетаФактурыИДокументовОснований(ДокументСчетФактура, ДокументОснование, Отказ)
	
	// Если счет-фактура выписывался на аванс и является более первичным
	// приходные документы не котролируем, так как они не будут синхронизироваться
	// с счетом-фактурой при проведении
	
	Если НЕ ДокументСчетФактура.ПодтвержденДокументамиОтгрузки Тогда
		Возврат Истина;
	КонецЕсли;
	
	РезультатПроверки = Истина;	
	Заголовок 		  = СокрЛП(ДокументСчетФактура);
	
	// Проверка ключевых реквизитов
	
	МетаданныеДокументаОснования = ДокументОснование.Метаданные();
		
	ЕстьРеквизитОрганизация 	 		 = ОбщегоНазначенияБК.ЕстьРеквизитДокумента("Организация", 		МетаданныеДокументаОснования);
	ЕстьРеквизитСтруктурноеПодразделение = ОбщегоНазначенияБК.ЕстьРеквизитДокумента("СтруктурноеПодразделение", МетаданныеДокументаОснования);
	ЕстьРеквизитКонтрагент 		 		 = ОбщегоНазначенияБК.ЕстьРеквизитДокумента("Контрагент", 		МетаданныеДокументаОснования);
	ЕстьРеквизитДоговор 		 		 = ОбщегоНазначенияБК.ЕстьРеквизитДокумента("ДоговорКонтрагента", МетаданныеДокументаОснования);
	ЕстьРеквизитВалютаДокумента  		 = ОбщегоНазначенияБК.ЕстьРеквизитДокумента("ВалютаДокумента", 	МетаданныеДокументаОснования);
	
	Если ЕстьРеквизитОрганизация И НЕ ДокументСчетФактура.Организация = ДокументОснование.Организация Тогда
		ТекстСообщения	        = НСтр("ru = 'Значение организации: «%1» не соответствует значению, установленному в счете-фактуре - «%2»'");
		ОрганизацияОснования    = СокрЛП(ДокументОснование.Организация);
		ОрганизацияСчетаФактуры = СокрЛП(ДокументСчетФактура.Организация);
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ОрганизацияОснования, ОрганизацияСчетаФактуры);
		ОбщегоНазначенияБК.ОшибкаПриПроведении(ТекстСообщения, Отказ);
		
		РезультатПроверки = Ложь;
	КонецЕсли;	
	
	Если ЕстьРеквизитСтруктурноеПодразделение И НЕ ДокументСчетФактура.СтруктурноеПодразделение = ДокументОснование.СтруктурноеПодразделение Тогда
		ТекстСообщения	        			 = НСтр("ru = 'Значение структурного подразделения: «%1» не соответствует значению, установленному в счете-фактуре - «%2»'");
		СтруктурноеПодразделениеОснования    = ?(ЗначениеЗаполнено(ДокументОснование.СтруктурноеПодразделение)  , СокрЛП(ДокументОснование.СтруктурноеПодразделение)  , НСтр("ru = 'головное подразделение'"));
		СтруктурноеПодразделениеСчетаФактуры = ?(ЗначениеЗаполнено(ДокументСчетФактура.СтруктурноеПодразделение), СокрЛП(ДокументСчетФактура.СтруктурноеПодразделение), НСтр("ru = 'головное подразделение'"));
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, СтруктурноеПодразделениеОснования, СтруктурноеПодразделениеСчетаФактуры);
		ОбщегоНазначенияБК.ОшибкаПриПроведении(ТекстСообщения, Отказ);
		
		РезультатПроверки = Ложь;
	КонецЕсли;
	
	Если ЕстьРеквизитКонтрагент И НЕ ДокументСчетФактура.Контрагент = ДокументОснование.Контрагент Тогда
		ТекстСообщения	       = НСтр("ru = 'Значение контрагента: «%1» не соответствует значению, установленному в счете-фактуре - «%2»'");
		КонтрагентОснования    = СокрЛП(ДокументОснование.Контрагент);
		КонтрагентСчетаФактуры = СокрЛП(ДокументСчетФактура.Контрагент);
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, КонтрагентОснования, КонтрагентСчетаФактуры);
		ОбщегоНазначенияБК.ОшибкаПриПроведении(ТекстСообщения, Отказ);
		
		РезультатПроверки = Ложь;
	КонецЕсли;	
	
	Если ЕстьРеквизитДоговор И НЕ ДокументСчетФактура.ДоговорКонтрагента = ДокументОснование.ДоговорКонтрагента Тогда
		ТекстСообщения	    = НСтр("ru = 'Значение договора контрагента: «%1» не соответствует значению, установленному в счете-фактуре - «%2»'");
		ДоговорОснования    = СокрЛП(ДокументОснование.ДоговорКонтрагента);
		ДоговорСчетаФактуры = СокрЛП(ДокументСчетФактура.ДоговорКонтрагента);
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ДоговорОснования, ДоговорСчетаФактуры);
		ОбщегоНазначенияБК.ОшибкаПриПроведении(ТекстСообщения, Отказ);
		
		РезультатПроверки = Ложь;
	КонецЕсли;	
	
	Если ЕстьРеквизитВалютаДокумента И НЕ ДокументСчетФактура.ВалютаДокумента = ДокументОснование.ВалютаДокумента Тогда
		ТекстСообщения	   = НСтр("ru = 'Значение валюты документа: «%1» не соответствует значению, установленному в счете-фактуре - «%2»'");
		ВалютаОснования    = СокрЛП(ДокументОснование.ВалютаДокумента);
		ВалютаСчетаФактуры = СокрЛП(ДокументСчетФактура.ВалютаДокумента);
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ВалютаОснования, ВалютаСчетаФактуры);
		ОбщегоНазначенияБК.ОшибкаПриПроведении(ТекстСообщения, Отказ);
		
		РезультатПроверки = Ложь;
	КонецЕсли;			
		
	Возврат РезультатПроверки;
	
КонецФункции

Процедура ЗаполнитьПоставщикПокупательПоОрганизации(ДокументОбъект, НаименованиеРеквизита) Экспорт
	
	Если ДокументОбъект = Неопределено 
		ИЛИ НаименованиеРеквизита = Неопределено
		ИЛИ НаименованиеРеквизита = "" Тогда
			Возврат;
	Конецесли;
	
	Если ТипЗнч(ДокументОбъект) = Тип("Структура") ИЛИ 
		 ТипЗнч(ДокументОбъект) = Тип("ДанныеФормыСтруктура") Тогда
		МетаданныеДокумента = ДокументОбъект.Ссылка.Метаданные();
	Иначе
		МетаданныеДокумента = ДокументОбъект.Метаданные();
	КонецЕсли;
	
	Организация = Справочники.Организации.ОрганизацияПоУмолчанию();
	
	Если ОбщегоНазначенияБК.ЕстьРеквизитДокумента("Организация", МетаданныеДокумента)
		И ЗначениеЗаполнено(ДокументОбъект.Организация) Тогда
		Организация = ДокументОбъект.Организация;
	КонецЕсли;
	
	Если ОбщегоНазначенияБК.ЕстьРеквизитДокумента(НаименованиеРеквизита, МетаданныеДокумента)
		И НЕ ЗначениеЗаполнено(ДокументОбъект[НаименованиеРеквизита])
		И ТипЗнч(ДокументОбъект[НаименованиеРеквизита]) = Тип("СправочникСсылка.Организации") Тогда
		
		ДокументОбъект[НаименованиеРеквизита] = Организация;
		
	КонецЕсли;
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////
// РАБОТА С ЭДВС
Процедура НайтиЭДВСИЗаполнитьСсылку(ДокументСсылка, СсылкаНаЭДВС, СписокЭДВС) Экспорт

	Если Не ЭСФСервер.ВедетсяУчетПоТоварамНаВС(ТекущаяДата()) Тогда
		Возврат;
	КонецЕсли;

	СписокЭДВС.ЗагрузитьЗначения(ОбщегоНазначенияБК.НайтиМассивПодчиненныхДокументов(ДокументСсылка, "ЭлектронныйДокументВС"));
	
	Если СписокЭДВС.Количество() = 0 Тогда
		Возврат;	
	ИначеЕсли СписокЭДВС.Количество() > 1 Тогда
		НадписьКоличествоЭДВС = НСтр("ru='Всего ЭДВС: (%КоличествоДокументов%)'");
		СсылкаНаЭДВС.Заголовок = СтрЗаменить(НадписьКоличествоЭДВС, "%КоличествоДокументов%", СписокЭДВС.Количество());
	Иначе 
		СсылкаНаЭДВС.Заголовок = СписокЭДВС[0].Значение;
	КонецЕсли;
	
	СсылкаНаЭДВС.Видимость = Истина;
 
КонецПроцедуры

Процедура ДобавитьОбновитьСведенияПоАктамВыполненныхРабот(ДокументРеализацииУслуг, ИмяТабличнойЧасти = "Услуги", ЭтоВозврат = Ложь, ДатаРегистрацииНДС = Неопределено) Экспорт

	МетаданныеДокумента = ДокументРеализацииУслуг.Метаданные();

	Если ОбщегоНазначенияБК.ЕстьРеквизитДокумента("ОтложитьНачислениеНДС", МетаданныеДокумента)
		И (ОбщегоНазначенияБК.ЕстьРеквизитДокумента("ДатаПодписанияГЗ", МетаданныеДокумента) ИЛИ ЭтоВозврат)
		И ОбщегоНазначенияБК.ЕстьРеквизитДокумента("Организация", МетаданныеДокумента) Тогда
		//И ЗначениеЗаполнено(ДокументОбъект.ДатаПодписанияГЗ)
		//И НЕ ДокументОбъект.ОтложитьНачислениеНДС Тогда
		
		НаборЗаписей = РегистрыСведений.СведенияПоАктамВыполненныхРабот.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ДокументРеализацииУслуг.Значение = ДокументРеализацииУслуг.Ссылка; 
		НаборЗаписей.Отбор.ДокументРеализацииУслуг.Использование = Истина;
		НаборЗаписей.Прочитать();
		
		// Если документ помечен на удаление или очищена таб. часть - удаляются записи из регистра 
		Если НаборЗаписей.Количество() <> 0
			И (ДокументРеализацииУслуг.ПометкаУдаления ИЛИ ДокументРеализацииУслуг[ИмяТабличнойЧасти].Количество() = 0) Тогда
			
			НаборЗаписей.Очистить();
			
			Попытка
				НаборЗаписей.Записать();
			Исключение
				ТекстСообщения = НСтр("ru='Операция не выполнена'", ОбщегоНазначения.КодОсновногоЯзыка());
				ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
			
			Возврат;
				
		КонецЕсли;
		
		Если ДокументРеализацииУслуг[ИмяТабличнойЧасти].Количество() > 0 Тогда
			
			Если НаборЗаписей.Количество() = 0 Тогда
				Запись = НаборЗаписей.Добавить();
				Запись.Организация = ДокументРеализацииУслуг.Организация;
				Запись.ДокументРеализацииУслуг = ДокументРеализацииУслуг.Ссылка;
				
				// Для документа с признаком ОтложитьНачислениеНДС реквизит ДатаПодписания в записи не заполняется
				Если НЕ ДокументРеализацииУслуг.ОтложитьНачислениеНДС Тогда 
					Если НЕ ЭтоВозврат Тогда
						Запись.ДатаПодписания = ДокументРеализацииУслуг.ДатаПодписанияГЗ; 
					Иначе
						Запись.ДатаПодписания = ДокументРеализацииУслуг.Дата;				
					Конецесли;
				Иначе
					Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДокументРеализацииУслуг, "ДополнительныеСвойства") Тогда
						ДополнительныеСвойства = ДокументРеализацииУслуг.ДополнительныеСвойства;
						Если ДополнительныеСвойства.Свойство("ДатаПодписания") Тогда
							Запись.ДатаПодписания = ДополнительныеСвойства.ДатаПодписания;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			
				Попытка
					НаборЗаписей.Записать();
				Исключение
					ТекстСообщения = НСтр("ru='Операция не выполнена'", ОбщегоНазначения.КодОсновногоЯзыка());
					ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				КонецПопытки;

			Иначе
				Запись = НаборЗаписей[0];
				Записывать = Ложь;
				
				Если Запись.Организация <> ДокументРеализацииУслуг.Организация Тогда
					Запись.Организация = ДокументРеализацииУслуг.Организация;
					Записывать = Истина;
				КонецЕсли;
				
				// Для документа с признаком ОтложитьНачислениеНДС реквизит ДатаПодписания в записи не заполняется
				Если НЕ ДокументРеализацииУслуг.ОтложитьНачислениеНДС И ?(ЭтоВозврат, Запись.ДатаПодписания <> Дата(1,1,1,0,0,0), Запись.ДатаПодписания <> ДокументРеализацииУслуг.ДатаПодписанияГЗ) Тогда
					Если НЕ ЭтоВозврат Тогда
						Запись.ДатаПодписания = ДокументРеализацииУслуг.ДатаПодписанияГЗ; 
					Иначе
						Запись.ДатаПодписания = Дата(1,1,1,0,0,0);				
					Конецесли;
					Записывать = Истина;
				ИначеЕсли ДокументРеализацииУслуг.ОтложитьНачислениеНДС Тогда
					Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДокументРеализацииУслуг, "ДополнительныеСвойства") Тогда
						ДополнительныеСвойства = ДокументРеализацииУслуг.ДополнительныеСвойства;
						Если ДополнительныеСвойства.Свойство("ДатаПодписания") Тогда
							Запись.ДатаПодписания = ДополнительныеСвойства.ДатаПодписания;
							Записывать = Истина;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли; 
				
				//Для документа Возврат товаров от покупателя дата подписания заполняется датой документа регистрации НДС
				Если ДатаРегистрацииНДС <> Неопределено И Запись.ДатаПодписания <> ДатаРегистрацииНДС Тогда
					Запись.ДатаПодписания = ДатаРегистрацииНДС;
					Записывать = Истина;
				КонецЕсли;
				
				Если Записывать Тогда
					Попытка
						НаборЗаписей.Записать();
					Исключение
						ТекстСообщения = НСтр("ru='Операция не выполнена'", ОбщегоНазначения.КодОсновногоЯзыка());
						ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					КонецПопытки;
				КонецЕсли;
			
			КонецЕсли;
				
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

Функция ПолучитьДатуПодписанияПоАктамВыполненныхРабот(Знач ДокументРеализации) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДатаПодписания = Дата(1, 1, 1, 0, 0, 0);
	
	МетаданныеДокумента = ДокументРеализации.Метаданные();
	
	Если ОбщегоНазначенияБК.ЕстьРеквизитДокумента("ОтложитьНачислениеНДС", МетаданныеДокумента)
		//И (ОбщегоНазначенияБК.ЕстьРеквизитДокумента("ДатаПодписанияГЗ", МетаданныеДокумента))
		И ОбщегоНазначенияБК.ЕстьРеквизитДокумента("Организация", МетаданныеДокумента) Тогда 
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СведенияПоАктамВыполненныхРабот.ДатаПодписания КАК ДатаПодписания
		|ИЗ
		|	РегистрСведений.СведенияПоАктамВыполненныхРабот КАК СведенияПоАктамВыполненныхРабот
		|ГДЕ
		|	СведенияПоАктамВыполненныхРабот.ДокументРеализацииУслуг = &ДокументРеализации";
		
		Запрос.УстановитьПараметр("ДокументРеализации", ДокументРеализации);
		Результат = Запрос.Выполнить();
		
		Если НЕ Результат.Пустой() Тогда
			Выборка = Результат.Выбрать();
			Если Выборка.Следующий() Тогда
				ДатаПодписания = Выборка.ДатаПодписания;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;     
	
	Возврат ДатаПодписания;
	
КонецФункции

Процедура НайтиДокументРегистрацииНДСИЗаполнитьСсылку(ДокументСсылка, ЭлементСсылкаНаРегистрацию, СписокРегистрацийПоНДС) Экспорт
	
	//СсылкаНаРегистрацию.Видимость = Ложь;
	
	Если НЕ ЗначениеЗаполнено(ДокументСсылка) Тогда
		ЭлементСсылкаНаРегистрацию.Заголовок = НСтр("ru = 'Создать документ регистрации НДС'");
		Возврат;
	КонецЕсли;

	СписокРегистрацийПоНДС.ЗагрузитьЗначения(ОбщегоНазначенияБК.НайтиМассивПодчиненныхДокументов(ДокументСсылка, "РегистрацияПрочихОперацийПоРеализованнымТоварамВЦеляхНДС"));
	
	Если СписокРегистрацийПоНДС.Количество() = 0 Тогда
		ЭлементСсылкаНаРегистрацию.Заголовок = НСтр("ru = 'Создать документ регистрации НДС'");
		Возврат;
	ИначеЕсли СписокРегистрацийПоНДС.Количество() > 1 Тогда
		НадписьКоличествоРегистрацийПоНДС = НСтр("ru='Всего документов регистрации НДС: (%КоличествоДокументов%)'");
		ЭлементСсылкаНаРегистрацию.Заголовок = СтрЗаменить(НадписьКоличествоРегистрацийПоНДС, "%КоличествоДокументов%", СписокРегистрацийПоНДС.Количество());
	Иначе
		ЭлементСсылкаНаРегистрацию.Заголовок = НСтр("ru = 'НДС зарегистрирован от %ДатаРегистрацииНДС%'");
		СсылкаНаРегистрацию = СписокРегистрацийПоНДС[0].Значение;
		ДатаРегистрации = ?(ЗначениеЗаполнено(СсылкаНаРегистрацию), Формат(СсылкаНаРегистрацию.Дата, "ДЛФ=ДВ"), "");
		ЭлементСсылкаНаРегистрацию.Заголовок = СтрЗаменить(ЭлементСсылкаНаРегистрацию.Заголовок, "%ДатаРегистрацииНДС%", ДатаРегистрации);
	КонецЕсли;
	
	//СсылкаНаРегистрацию.Видимость = Истина;
	
КонецПроцедуры
