////////////////////////////////////////////////////////////////////////////////
// УправлениеВзаиморасчетамиСервер: в модуле должны содержаться процедуры и 
// функции связанные с получением параметров взаиморасчетов с контрагентами,
// обработка изменений реквизитов взаиморасчетов с контрагентами, функции и 
// процедуры подготовки проведения документов
//  
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

////////////////////////////////////////////////////////////////////////////////
// Получение счетов учета взаиморасчетов

// Функция возвращает возможные счета учета расчетов с контрагентом
//
// Параметры:
//  Организация - по которой выполняется поиск
//  Контрагент  - по которому выполняется поиск
//  Договор     - по которому выполняется поиск
//
// Возвращаемое значение:
//  Структура - структура содержащая счета учета расчетов
// 
Функция ПолучитьСчетаРасчетовСКонтрагентом(Организация, Контрагент, Договор, 
										   ВалютаРегламентированногоУчета = Неопределено) Экспорт

	Если НЕ ЗначениеЗаполнено(ВалютаРегламентированногоУчета) Тогда
		ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	КонецЕсли;

	Результат = Новый Структура("
	|СчетРасчетов, СчетАвансов,СчетВозвратов,
	|СчетРасчетовПокупателя, СчетАвансовПокупателя,СчетВозвратовПокупателя");
	
	Если ТипЗнч(Контрагент) <> Тип("СправочникСсылка.Контрагенты") Тогда
		Возврат Результат;
	КонецЕсли;

	//ВидРасчетовПоДоговору = УправлениеВзаиморасчетами.ОпределениеВидаРасчетовПоПараметрамДоговора(Договор, ВалютаРегламентированногоУчета);
	ВидРасчетовПоДоговору = ОпределениеВидаРасчетовПоПараметрамДоговора(Договор, ВалютаРегламентированногоУчета);

	Запрос    = Новый Запрос();
	Запрос.УстановитьПараметр("Организация",       Организация);
	Запрос.УстановитьПараметр("Контрагент",        Контрагент);
	Запрос.УстановитьПараметр("Договор",           Договор);
	Запрос.УстановитьПараметр("ВидРасчетов",       ВидРасчетовПоДоговору);
	Запрос.УстановитьПараметр("ПустаяОрганизация", Справочники.Организации.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойКонтрагент",  Справочники.Контрагенты.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойДоговор",     Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойВидРасчетов", Перечисления.ВидыРасчетовПоДоговорам.ПустаяСсылка());
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	1 КАК Приоритет,
	|	СчетУчетаРасчетовСПоставщиком,
	|	СчетУчетаАвансовВыданных,
	|	СчетУчетаРасчетовСПокупателем,
	|	СчетУчетаАвансовПолученных,
	|	СчетУчетаРасчетовСПоставщикомПоВозвратам,
	|	СчетРасчетовСПокупателемПоВозвратам
	|ИЗ
	|	РегистрСведений.СчетаУчетаРасчетовСКонтрагентами КАК СчетаУчетаРасчетовСКонтрагентами
	|ГДЕ
	|	СчетаУчетаРасчетовСКонтрагентами.Договор = &Договор И НЕ СчетаУчетаРасчетовСКонтрагентами.Договор = &ПустойДоговор
	|	И СчетаУчетаРасчетовСКонтрагентами.ВидРасчетовПоДоговору = &ВидРасчетов 
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	2 КАК Приоритет,
	|	СчетУчетаРасчетовСПоставщиком,
	|	СчетУчетаАвансовВыданных,
	|	СчетУчетаРасчетовСПокупателем,
	|	СчетУчетаАвансовПолученных,
	|	СчетУчетаРасчетовСПоставщикомПоВозвратам,
	|	СчетРасчетовСПокупателемПоВозвратам
	|ИЗ
	|	РегистрСведений.СчетаУчетаРасчетовСКонтрагентами КАК СчетаУчетаРасчетовСКонтрагентами
	|ГДЕ
	|	СчетаУчетаРасчетовСКонтрагентами.Договор = &Договор И НЕ СчетаУчетаРасчетовСКонтрагентами.Договор = &ПустойДоговор
	|   И СчетаУчетаРасчетовСКонтрагентами.ВидРасчетовПоДоговору = &ПустойВидРасчетов 
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ  
	|	3,
	|	СчетУчетаРасчетовСПоставщиком,
	|	СчетУчетаАвансовВыданных,
	|	СчетУчетаРасчетовСПокупателем,
	|	СчетУчетаАвансовПолученных,
	|	СчетУчетаРасчетовСПоставщикомПоВозвратам,
	|	СчетРасчетовСПокупателемПоВозвратам
	|ИЗ
	|	РегистрСведений.СчетаУчетаРасчетовСКонтрагентами КАК СчетаУчетаРасчетовСКонтрагентами
	|ГДЕ
	|	СчетаУчетаРасчетовСКонтрагентами.Организация = &Организация
	|	И СчетаУчетаРасчетовСКонтрагентами.Контрагент = &Контрагент
	|	И СчетаУчетаРасчетовСКонтрагентами.Договор = &ПустойДоговор
	|	И СчетаУчетаРасчетовСКонтрагентами.ВидРасчетовПоДоговору = &ВидРасчетов 
	|";
	Индекс = 3;
	СписокГрупп = ОбщегоНазначенияБКВызовСервера.ПолучитьСписокВышестоящихГрупп(Контрагент);
	Для Каждого Элемент из СписокГрупп Цикл
		
		Индекс = Индекс + 1;
		
		Запрос.УстановитьПараметр("ГруппаКонтрагентов" + Индекс, Элемент);
		Запрос.Текст = Запрос.Текст+"
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ  
		|	"+Индекс+",
		|	СчетУчетаРасчетовСПоставщиком,
		|	СчетУчетаАвансовВыданных,
		|	СчетУчетаРасчетовСПокупателем,
		|	СчетУчетаАвансовПолученных,
		|	СчетУчетаРасчетовСПоставщикомПоВозвратам,
		|	СчетРасчетовСПокупателемПоВозвратам
		|ИЗ
		|	РегистрСведений.СчетаУчетаРасчетовСКонтрагентами КАК СчетаУчетаРасчетовСКонтрагентами
		|ГДЕ
		|	СчетаУчетаРасчетовСКонтрагентами.Организация = &Организация
		|	И СчетаУчетаРасчетовСКонтрагентами.ВидРасчетовПоДоговору = &ВидРасчетов 
		|	И СчетаУчетаРасчетовСКонтрагентами.Контрагент = &ГруппаКонтрагентов"+Индекс+"
		|	И СчетаУчетаРасчетовСКонтрагентами.Договор = &ПустойДоговор
		|";
	КонецЦикла;
	
	Запрос.Текст = Запрос.Текст+"
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ  
	|	"+(Индекс+1)+",
	|	СчетУчетаРасчетовСПоставщиком,
	|	СчетУчетаАвансовВыданных,
	|	СчетУчетаРасчетовСПокупателем,
	|	СчетУчетаАвансовПолученных,
	|	СчетУчетаРасчетовСПоставщикомПоВозвратам,
	|	СчетРасчетовСПокупателемПоВозвратам
	|ИЗ
	|	РегистрСведений.СчетаУчетаРасчетовСКонтрагентами КАК СчетаУчетаРасчетовСКонтрагентами
	|ГДЕ
	|	СчетаУчетаРасчетовСКонтрагентами.Организация = &Организация
	|	И СчетаУчетаРасчетовСКонтрагентами.Контрагент = &Контрагент
	|	И СчетаУчетаРасчетовСКонтрагентами.Договор = &ПустойДоговор
	|	И СчетаУчетаРасчетовСКонтрагентами.ВидРасчетовПоДоговору = &ПустойВидРасчетов

	|";
	Индекс = Индекс+1;
	
	Запрос.Текст = Запрос.Текст+"
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ  
	|	"+(Индекс+1)+",
	|	СчетУчетаРасчетовСПоставщиком,
	|	СчетУчетаАвансовВыданных,
	|	СчетУчетаРасчетовСПокупателем,
	|	СчетУчетаАвансовПолученных,
	|	СчетУчетаРасчетовСПоставщикомПоВозвратам,
	|	СчетРасчетовСПокупателемПоВозвратам
	|ИЗ
	|	РегистрСведений.СчетаУчетаРасчетовСКонтрагентами КАК СчетаУчетаРасчетовСКонтрагентами
	|ГДЕ
	|	СчетаУчетаРасчетовСКонтрагентами.Организация = &ПустаяОрганизация
	|	И СчетаУчетаРасчетовСКонтрагентами.Контрагент = &Контрагент
	|	И СчетаУчетаРасчетовСКонтрагентами.Договор = &ПустойДоговор
	|	И СчетаУчетаРасчетовСКонтрагентами.ВидРасчетовПоДоговору = &ВидРасчетов

	|";
	Индекс = Индекс+1;

	
	Для Каждого Элемент из СписокГрупп Цикл
		
		Индекс = Индекс + 1;
		
		Запрос.УстановитьПараметр("ГруппаКонтрагентов" + Индекс, Элемент);
		
		Запрос.Текст = Запрос.Текст+"
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ  
		|	"+Индекс+",
		|	СчетУчетаРасчетовСПоставщиком,
		|	СчетУчетаАвансовВыданных,
		|	СчетУчетаРасчетовСПокупателем,
		|	СчетУчетаАвансовПолученных,
		|	СчетУчетаРасчетовСПоставщикомПоВозвратам,
		|	СчетРасчетовСПокупателемПоВозвратам
		|ИЗ
		|	РегистрСведений.СчетаУчетаРасчетовСКонтрагентами КАК СчетаУчетаРасчетовСКонтрагентами
		|ГДЕ
		|	СчетаУчетаРасчетовСКонтрагентами.Организация = &ПустаяОрганизация
		|	И СчетаУчетаРасчетовСКонтрагентами.ВидРасчетовПоДоговору = &ВидРасчетов
		|	И СчетаУчетаРасчетовСКонтрагентами.Контрагент = &ГруппаКонтрагентов"+Индекс+"
		|	И СчетаУчетаРасчетовСКонтрагентами.Договор = &ПустойДоговор";
		
		Индекс = Индекс + 1;
		Запрос.УстановитьПараметр("ГруппаКонтрагентов" + Индекс, Элемент);
		
		Запрос.Текст = Запрос.Текст+"
		
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	"+Индекс+",
		|	СчетУчетаРасчетовСПоставщиком,
		|	СчетУчетаАвансовВыданных,
		|	СчетУчетаРасчетовСПокупателем,
		|	СчетУчетаАвансовПолученных,
		|	СчетУчетаРасчетовСПоставщикомПоВозвратам,
		|	СчетРасчетовСПокупателемПоВозвратам
		|ИЗ
		|	РегистрСведений.СчетаУчетаРасчетовСКонтрагентами КАК СчетаУчетаРасчетовСКонтрагентами
		|ГДЕ
		|	СчетаУчетаРасчетовСКонтрагентами.Организация = &ПустаяОрганизация
		|	И СчетаУчетаРасчетовСКонтрагентами.ВидРасчетовПоДоговору = &ПустойВидРасчетов
		|	И СчетаУчетаРасчетовСКонтрагентами.Контрагент = &ГруппаКонтрагентов"+Индекс+"
		|	И СчетаУчетаРасчетовСКонтрагентами.Договор = &ПустойДоговор";
	КонецЦикла;
	
	
	Запрос.Текст = Запрос.Текст+"
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ 
	|	"+(Индекс+1)+",
	|	СчетУчетаРасчетовСПоставщиком,
	|	СчетУчетаАвансовВыданных,
	|	СчетУчетаРасчетовСПокупателем,
	|	СчетУчетаАвансовПолученных,
	|	СчетУчетаРасчетовСПоставщикомПоВозвратам,
	|	СчетРасчетовСПокупателемПоВозвратам
	|ИЗ
	|	РегистрСведений.СчетаУчетаРасчетовСКонтрагентами КАК СчетаУчетаРасчетовСКонтрагентами
	|ГДЕ
	|	СчетаУчетаРасчетовСКонтрагентами.Организация = &Организация
	|	И СчетаУчетаРасчетовСКонтрагентами.Контрагент = &ПустойКонтрагент
	|	И СчетаУчетаРасчетовСКонтрагентами.Договор = &ПустойДоговор
	|	И СчетаУчетаРасчетовСКонтрагентами.ВидРасчетовПоДоговору = &ВидРасчетов 
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ 
	|	"+(Индекс+2)+",
	|	СчетУчетаРасчетовСПоставщиком,
	|	СчетУчетаАвансовВыданных,
	|	СчетУчетаРасчетовСПокупателем,
	|	СчетУчетаАвансовПолученных,
	|	СчетУчетаРасчетовСПоставщикомПоВозвратам,
	|	СчетРасчетовСПокупателемПоВозвратам
	|ИЗ
	|	РегистрСведений.СчетаУчетаРасчетовСКонтрагентами КАК СчетаУчетаРасчетовСКонтрагентами
	|ГДЕ
	|	СчетаУчетаРасчетовСКонтрагентами.Организация = &Организация
	|	И СчетаУчетаРасчетовСКонтрагентами.Контрагент = &ПустойКонтрагент
	|	И СчетаУчетаРасчетовСКонтрагентами.Договор = &ПустойДоговор
	|	И СчетаУчетаРасчетовСКонтрагентами.ВидРасчетовПоДоговору = &ПустойВидРасчетов
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ 
	|	"+(Индекс+3)+",
	|	СчетУчетаРасчетовСПоставщиком,
	|	СчетУчетаАвансовВыданных,
	|	СчетУчетаРасчетовСПокупателем,
	|	СчетУчетаАвансовПолученных,
	|	СчетУчетаРасчетовСПоставщикомПоВозвратам,
	|	СчетРасчетовСПокупателемПоВозвратам
	|ИЗ
	|	РегистрСведений.СчетаУчетаРасчетовСКонтрагентами КАК СчетаУчетаРасчетовСКонтрагентами
	|ГДЕ
	|	СчетаУчетаРасчетовСКонтрагентами.Организация = &ПустаяОрганизация
	|	И СчетаУчетаРасчетовСКонтрагентами.Контрагент = &ПустойКонтрагент
	|	И СчетаУчетаРасчетовСКонтрагентами.Договор = &ПустойДоговор
	|	И СчетаУчетаРасчетовСКонтрагентами.ВидРасчетовПоДоговору = &ВидРасчетов
	|
	|ОБЪЕДИНИТЬ
	|
	|
	|ВЫБРАТЬ 
	|	"+(Индекс+4)+",
	|	СчетУчетаРасчетовСПоставщиком,
	|	СчетУчетаАвансовВыданных,
	|	СчетУчетаРасчетовСПокупателем,
	|	СчетУчетаАвансовПолученных,
	|	СчетУчетаРасчетовСПоставщикомПоВозвратам,
	|	СчетРасчетовСПокупателемПоВозвратам
	|ИЗ
	|	РегистрСведений.СчетаУчетаРасчетовСКонтрагентами КАК СчетаУчетаРасчетовСКонтрагентами
	|ГДЕ
	|	СчетаУчетаРасчетовСКонтрагентами.Организация = &ПустаяОрганизация
	|	И СчетаУчетаРасчетовСКонтрагентами.Контрагент = &ПустойКонтрагент
	|	И СчетаУчетаРасчетовСКонтрагентами.Договор = &ПустойДоговор
	|	И СчетаУчетаРасчетовСКонтрагентами.ВидРасчетовПоДоговору = &ПустойВидРасчетов
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Результат.СчетРасчетов              = Выборка.СчетУчетаРасчетовСПоставщиком;
		Результат.СчетАвансов               = Выборка.СчетУчетаАвансовВыданных;
		Результат.СчетВозвратов             = Выборка.СчетУчетаРасчетовСПоставщикомПоВозвратам;
		Результат.СчетРасчетовПокупателя    = Выборка.СчетУчетаРасчетовСПокупателем;
		Результат.СчетАвансовПокупателя     = Выборка.СчетУчетаАвансовПолученных;
		Результат.СчетВозвратовПокупателя   = Выборка.СчетРасчетовСПокупателемПоВозвратам;
	КонецЕсли;

	Возврат Результат;

КонецФункции // ПолучитьСчетаРасчетовСКонтрагентом()

// Получает список счетов взаиморасчетов
// для которых может быть установлено субконто "ДокументРасчетовСКонтрагентом"
//
// Параметры
//  нет
//
// Возвращаемое значение:
//   СписокЗначений   – список, содержащий исключаемые счета
//
Функция ПолучитьСписокСчетовВзаиморасчетов() Экспорт

	ЗапросКСчетамВзаиморасчетов = Новый Запрос("ВЫБРАТЬ
	|	Типовой.Ссылка КАК Ссылка
	|ИЗ
	|	ПланСчетов.Типовой КАК Типовой
	|ГДЕ
	|	Типовой.ВидыСубконто.ВидСубконто = (&ВидСубконтоКонтрагенты)
	|	И Типовой.ВидыСубконто.ВидСубконто = (&ВидСубконтоДоговоры)
	|   И НЕ Типовой.ПометкаУдаления");
	
	ЗапросКСчетамВзаиморасчетов.УстановитьПараметр("ВидСубконтоКонтрагенты",ПланыВидовХарактеристик.ВидыСубконтоТиповые.Контрагенты);
	ЗапросКСчетамВзаиморасчетов.УстановитьПараметр("ВидСубконтоДоговоры",	ПланыВидовХарактеристик.ВидыСубконтоТиповые.Договоры);
	
	Возврат ЗапросКСчетамВзаиморасчетов.Выполнить().Выгрузить();

КонецФункции // ПолучитьСписокСчетовВзаиморасчетов()

// Конструктор коллекции, которая описывает особенности учета расчетов в конкретном экземпляре документа.
// 
Функция НовыйОсобенностиУчетаРасчетовДокумента() Экспорт
	
	Особенности = Новый Структура;
	Особенности.Вставить("ТребуетсяУчетРасчетов",     Истина);
	Особенности.Вставить("ТребуетсяУчетАвансов",      Истина);
	Особенности.Вставить("ТребуетсяУчетСроковОплаты", Ложь);
	
	Возврат Особенности;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Получение свойств договора

// Получает договор контрагента по умолчанию с учетом условий отбора. Возвращается основной договор или единственный или пустая ссылка//
// Параметры
//  ВладелецДоговора	–	<СправочникСсылка.Контрагенты> 
//							Контрагент, договор которого нужно получить
//  ОрганизацияДоговора	–	<СправочникСсылка.Организации> 
//							Организация, договор которой нужно получить
//  СписокВидовДоговора	–	<Массив> или <СписокЗначений>, состоящий из значений типа <ПеречислениеСсылка.ВидыДоговоровКонтрагентов> 
//							Нужные виды договора
//  СтруктураПараметров	–	<Структура>
//							Структура дополнительных параметров отбора договоров по реквизитам.
//							Элементы структуры СтруктураПараметров:
//							Ключ - имя реквизита договора, Значение - еще одна структура
//							
//							Элементы структуры, которая находится в Значение:
//							Ключ - "ЗначениеОтбора", Значение - значение реквизита договора для отбора. Обязательный элемент.
//							Ключ - "ВидСравненияОтбора", Значение - <ВидСравнения>. Необязательный элемент, по умолчанию ВидСравнения.Равно
//
// Возвращаемое значение:
//   <СправочникСсылка.ДоговорыКонтрагентов> – найденный счет или пустая ссылка
//
Функция УстановитьДоговорКонтрагента(ДоговорКонтрагента,ВладелецДоговора, ОрганизацияДоговора, СписокВидовДоговора = Неопределено, СтруктураПараметров = Неопределено) Экспорт

	НовыйДоговор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();

	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
	|	ДоговорыКонтрагентов.Ссылка,
	|	ВЫБОР
	|		КОГДА СправочникВладелец.Ссылка ЕСТЬ НЕ NULL 
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК Приоритет
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК СправочникВладелец
	|		ПО ДоговорыКонтрагентов.Владелец = СправочникВладелец.Ссылка
	|			И ДоговорыКонтрагентов.Ссылка = СправочникВладелец.ОсновнойДоговорКонтрагента
	|ГДЕ
	|	&ТекстФильтра
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет";
	
	Запрос.УстановитьПараметр("ВладелецДоговора", 		ВладелецДоговора);	
	Запрос.УстановитьПараметр("ОрганизацияДоговора", 	ОрганизацияДоговора);
	Запрос.УстановитьПараметр("СписокВидовДоговора", 	СписокВидовДоговора);
	
	ИмяРеквизитаКонтрагент = ПроцедурыБухгалтерскогоУчетаКлиентСерверПереопределяемый.ПолучитьИмяРеквизитаКонтрагентДоговора();
	ИмяРеквизитаВидДоговора = ПроцедурыБухгалтерскогоУчетаКлиентСерверПереопределяемый.ПолучитьИмяРеквизитаВидДоговора();
	
	ТекстФильтра = "
	|	ДоговорыКонтрагентов." + ИмяРеквизитаКонтрагент + " = &ВладелецДоговора
	|	И ДоговорыКонтрагентов.Организация = &ОрганизацияДоговора
	|	И ДоговорыКонтрагентов.ПометкаУдаления = ЛОЖЬ"
	+ ?(СписокВидовДоговора<> Неопределено,"
	|	И ДоговорыКонтрагентов." + ИмяРеквизитаВидДоговора + " В (&СписокВидовДоговора)","");
	
	Если ТипЗнч(СтруктураПараметров) = Тип("Структура") Тогда
		Для каждого Параметр Из СтруктураПараметров Цикл
			ИмяРеквизита = Параметр.Ключ;
			СтруктураОтбора = Параметр.Значение;
			
			ВидСравненияЗапроса = "";

			Если НЕ СтруктураОтбора.Свойство("ВидСравненияОтбора") Тогда
				ВидСравненияЗапроса = "=";
			ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.Равно Тогда
				ВидСравненияЗапроса = "=";
			ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.НеРавно Тогда
				ВидСравненияЗапроса = "<>";
			ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.ВСписке Тогда
				ВидСравненияЗапроса = "В";
			ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.НеВСписке Тогда
				ВидСравненияЗапроса = "НЕ В";
			ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.ВИерархии Тогда
				ВидСравненияЗапроса = "В ИЕРАРХИИ";
			ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.ВСпискеПоИерархии Тогда
				ВидСравненияЗапроса = "В ИЕРАРХИИ";
			ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.НеВСпискеПоИерархии Тогда
				ВидСравненияЗапроса = "НЕ В ИЕРАРХИИ";
			ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.НеВИерархии Тогда
				ВидСравненияЗапроса = "НЕ В ИЕРАРХИИ";
			ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.Больше Тогда
				ВидСравненияЗапроса = ">";
			ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.БольшеИлиРавно Тогда
				ВидСравненияЗапроса = ">=";
			ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.Меньше Тогда
				ВидСравненияЗапроса = "<";
			ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.МеньшеИлиРавно Тогда
				ВидСравненияЗапроса = "<=";
			Иначе // другие варианты 
				ВидСравненияЗапроса = "=";
			КонецЕсли;
			
			ТекстФильтра = ТекстФильтра + "
			|	И ДоговорыКонтрагентов." + ИмяРеквизита + " " + ВидСравненияЗапроса + " (&" + ИмяРеквизита + ")";
			Запрос.УстановитьПараметр(ИмяРеквизита, СтруктураОтбора.ЗначениеОтбора);
		КонецЦикла;
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстФильтра", ТекстФильтра);
	
	Запрос.Текст = ТекстЗапроса;
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
	
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		НайденОсновнойДоговор = Выборка.Приоритет = 1;
		НайденОдинДоговор     = Выборка.Количество() = 1;
		
		Если НайденОсновнойДоговор ИЛИ НайденОдинДоговор Тогда
			НовыйДоговор = Выборка.Ссылка;
		КонецЕсли;
	
	КонецЕсли;
	
	РеквизитыДоговора = ПолучитьРеквизитыДоговораКонтрагента(ДоговорКонтрагента);
	
	Если (НЕ ЗначениеЗаполнено(ДоговорКонтрагента)) 
		ИЛИ (РеквизитыДоговора.Владелец <> ВладелецДоговора ИЛИ РеквизитыДоговора.Организация <> ОрганизацияДоговора)  Тогда	
		
		ДоговорКонтрагента = НовыйДоговор;
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции // УстановитьДоговорКонтрагента()

// Функция ПолучитьРеквизитыДоговора() возвращает структуру со реквизитами договора, 
// используемыми при проведении документов по регламентированному учету. Функция используется 
// для унификации имен реквизитов справочника ДоговорыКонтрагентов при обращении к ним 
// из разных конфигураций, при этом типы самих реквизитов могут различаться в разных 
// конфигурациях.
//
// Параметры:
//  ДоговорКонтрагента - СправочникСсылка.ДоговорыКонтрагентов.
//
// Возвращаемое значение:
//  Структура с ключами:
//		Ссылка				 - СправочникСсылка.ДоговорыКонтрагентов, ссылка на сам договор
//		ВалютаВзаиморасчетов - СправочникСсылка.Валюты, валюта взаиморасчетов по договору
//		Организация 		 - СправочникСсылка.Организации, организация, с которой заключен договор
//		Владелец 			 - СправочникСсылка.Контрагент, контрагент, с которым заключен договор
//		ВидДоговора 		 - ПеречислениеСсылка.ВидыДоговоровКонтрагентов  (БП)
//							   или ПеречислениеСсылка.ХозяйственныеОперации (УП) 
//		ТипЦен				 - СправочникСсылка.ТипыЦенНоменклатуры (БП)
//							   или НЕОПРЕДЕЛЕНО (УП)
//		
//		
Функция ПолучитьРеквизитыДоговораКонтрагента(ДоговорКонтрагента) Экспорт

	СтруктураРеквизиты = Новый Структура();
	СтруктураРеквизиты.Вставить("Ссылка",  				Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
	СтруктураРеквизиты.Вставить("ВалютаВзаиморасчетов",	Справочники.Валюты.ПустаяСсылка());
	СтруктураРеквизиты.Вставить("Владелец",				Справочники.Контрагенты.ПустаяСсылка());
	СтруктураРеквизиты.Вставить("Организация",			Справочники.Организации.ПустаяСсылка());
	СтруктураРеквизиты.Вставить("ТипЦен",				Справочники.ТипыЦенНоменклатуры.ПустаяСсылка());
	СтруктураРеквизиты.Вставить("ВидДоговора",			Перечисления.ВидыДоговоровКонтрагентов.ПустаяСсылка());
	
	Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		СтруктураРеквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДоговорКонтрагента,
																		"Ссылка,
																		|ВалютаВзаиморасчетов,
																		|Владелец,
																		|Организация,
																		|ТипЦен,
																		|ВидДоговора");
	КонецЕсли;
	
	Возврат СтруктураРеквизиты;

КонецФункции // ПолучитьРеквизитыДоговора()

//Функция возвращает вид расчетов по договору
// Параметры
//		ДоговорКонтрагента 				- СправочникСсылка.ДоговорыКонтраентов
//		ВалютаРегламентированногоУчета 	- СправочникСсылка.Валюты
//
// Возвращаемое значение
//      ПеречилениеСсылка.ВидыРасчетовПоДоговорам
//
Функция ОпределениеВидаРасчетовПоПараметрамДоговора(ДоговорКонтрагента, ВалютаРегламентированногоУчета) Экспорт

	Если ДоговорКонтрагента.ВалютаВзаиморасчетов = ВалютаРегламентированногоУчета 
	 ИЛИ НЕ ЗначениеЗаполнено(ДоговорКонтрагента.ВалютаВзаиморасчетов) Тогда
		ВидРасчетовПоДоговору = Перечисления.ВидыРасчетовПоДоговорам.РасчетыВВалютеРегламентированногоУчета;

	Иначе
		ВидРасчетовПоДоговору = Перечисления.ВидыРасчетовПоДоговорам.РасчетыВИностраннойВалюте;

	КонецЕсли;

	Возврат ВидРасчетовПоДоговору;

КонецФункции // ОпределениеВидаРасчетовПоПараметрамДоговора()

#Область СчетаУчетаРасчетов

Функция ОсновнойСчетРасчетов(Знач ВидРасчетов, Знач Роль) Экспорт
	
	Счета = ОсновныеСчетаРасчетов();
	
	КлассСчетов = Счета[ВидРасчетов];
	Если КлассСчетов = Неопределено Тогда
		КлассСчетов = Счета[Перечисления.ВидыРасчетовПоДоговорам.РасчетыВВалютеРегламентированногоУчета];
	КонецЕсли;
	
	Если Не ПустаяСтрока(Роль) И КлассСчетов.Свойство(Роль) Тогда
		Счет = КлассСчетов[Роль];
	Иначе
		Счет = КлассСчетов.РасчетыДругие;
	КонецЕсли;
	
	Возврат Счет;
	
КонецФункции

Функция ОсновныеСчетаРасчетов() Экспорт
	
	//!!! Заполнить счета
	СчетаРасчетов = Новый Соответствие;
	СчетаРасчетов.Вставить(Перечисления.ВидыРасчетовПоДоговорам.РасчетыВИностраннойВалюте,              Новый Структура); // Заполним эти структуры ниже
	СчетаРасчетов.Вставить(Перечисления.ВидыРасчетовПоДоговорам.РасчетыВВалютеРегламентированногоУчета, Новый Структура);
	
	КлассСчетовРасчетов = СчетаРасчетов[Перечисления.ВидыРасчетовПоДоговорам.РасчетыВВалютеРегламентированногоУчета];
	//КлассСчетовРасчетов.Вставить("РасчетыСПоставщиком",         ПланыСчетов.Типовой.РасчетыСПоставщиками);                           // 60.01
	КлассСчетовРасчетов.Вставить("РасчетыСПоставщиком",         ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПоставщикамИПодрядчикам);                                      // 3310
	КлассСчетовРасчетов.Вставить("РасчетыСПоставщикомНУ",       ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПоставщикамИПодрядчикам);                                      // 3310
	//КлассСчетовРасчетов.Вставить("АвансыПоставщику",            ПланыСчетов.Типовой.РасчетыПоАвансамВыданным);                       // 60.02
	КлассСчетовРасчетов.Вставить("АвансыПоставщику",            ПланыСчетов.Типовой.КраткосрочныеАвансыВыданные);                                                            // 1710
	//КлассСчетовРасчетов.Вставить("РасчетыСПокупателем",         ПланыСчетов.Типовой.РасчетыСПокупателями);                           // 62.01
	КлассСчетовРасчетов.Вставить("РасчетыСПокупателем",         ПланыСчетов.Типовой.КраткосрочнаяДебиторскаяЗадолженностьПокупателейИЗаказчиков);                            // 1210
	КлассСчетовРасчетов.Вставить("РасчетыСПокупателемНУ",       ПланыСчетов.Типовой.КраткосрочнаяДебиторскаяЗадолженностьПокупателейИЗаказчиков);                            // 1210
	//КлассСчетовРасчетов.Вставить("АвансыПокупателя",            ПланыСчетов.Типовой.РасчетыПоАвансамПолученным);                     // 62.02
	КлассСчетовРасчетов.Вставить("АвансыПокупателя",            ПланыСчетов.Типовой.КраткосрочныеАвансыПолученные);                                                          // 3510
	//КлассСчетовРасчетов.Вставить("РасчетыПоПретензиям",         ПланыСчетов.Типовой.РасчетыПоПретензиям);                            // 76.02
	КлассСчетовРасчетов.Вставить("РасчетыПоПретензиям",         ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПоВозвратамРеализованныхГотовойПродукцииТоваровРаботУслуг);    // 3381
	//КлассСчетовРасчетов.Вставить("РасчетыСКомитентом",          ПланыСчетов.Типовой.РасчетыСПрочимиПоставщикамиИПодрядчиками);       // 76.05
	//КлассСчетовРасчетов.Вставить("ВозвратнаяТараПолученная",    ПланыСчетов.Типовой.РасчетыСПрочимиПоставщикамиИПодрядчиками);       // 76.05
	//КлассСчетовРасчетов.Вставить("РасчетыСПрочимиПокупателями", ПланыСчетов.Типовой.РасчетыСПрочимиПокупателямиИЗаказчиками);        // 76.06
	//КлассСчетовРасчетов.Вставить("ВозвратнаяТараПереданная",    ПланыСчетов.Типовой.РасчетыСПрочимиПокупателямиИЗаказчиками);        // 76.06
	//КлассСчетовРасчетов.Вставить("РасчетыСКомитентомЗаПриобретенныеДляНегоТоварыУслуги",
	//                                                            ПланыСчетов.Типовой.РасчетыСПрочимиПокупателямиИЗаказчиками);        // 76.06
	//КлассСчетовРасчетов.Вставить("РасчетыДругие",               ПланыСчетов.Типовой.ПрочиеРасчетыСРазнымиДебиторамиИКредиторами);    // 76.09
	КлассСчетовРасчетов.Вставить("РасчетыДругие",                 ПланыСчетов.Типовой.ДолгосрочныеФинансовыеОбязательстваОцениваемыеПоСправедливойСтоимостиЧерезПрибыльУбыток);    // 76.09

	//КлассСчетовРасчетов.Вставить("АрендныеОбязательства",       ПланыСчетов.Типовой.АрендныеОбязательства);                          // 76.07.1
	//КлассСчетовРасчетов.Вставить("ЛизинговыеПлатежи",           ПланыСчетов.Типовой.ЛизинговыеПлатежи);                              // 76.07.2
	//КлассСчетовРасчетов.Вставить("РасчетыПоФакторингу",         ПланыСчетов.Типовой.РасчетыСФакторинговымиКомпаниями);               // 76.13
	
	КлассСчетовРасчетов.Вставить("РасчетыСПоставщикомПоВозвратам", ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПоВозвратамТМЗПоставщикам);                                 // 1271
	КлассСчетовРасчетов.Вставить("РасчетыСГПХ",         		  ПланыСчетов.Типовой.ПрочаяКраткосрочнаяКредиторскаяЗадолженность);	   // 3387
	КлассСчетовРасчетов.Вставить("РасчетыСГПХНУ",       		  ПланыСчетов.Налоговый.ПоступлениеИВыбытиеИмуществаработУслугПрав); // 3310Н
	
	КлассСчетовРасчетов = СчетаРасчетов[Перечисления.ВидыРасчетовПоДоговорам.РасчетыВИностраннойВалюте];
	//КлассСчетовРасчетов.Вставить("РасчетыСПоставщиком",         ПланыСчетов.Типовой.РасчетыСПоставщикамиВал);                        // 60.21
	КлассСчетовРасчетов.Вставить("РасчетыСПоставщиком",         ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПоставщикамИПодрядчикам);                                      // 3310
	КлассСчетовРасчетов.Вставить("РасчетыСПоставщикомНУ",       ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПоставщикамИПодрядчикам);                                      // 3310
	//КлассСчетовРасчетов.Вставить("АвансыПоставщику",            ПланыСчетов.Типовой.РасчетыПоАвансамВыданнымВал);                    // 60.22
	КлассСчетовРасчетов.Вставить("АвансыПоставщику",            ПланыСчетов.Типовой.КраткосрочныеАвансыВыданные);                                                            // 1710
	//КлассСчетовРасчетов.Вставить("РасчетыСПокупателем",         ПланыСчетов.Типовой.РасчетыСПокупателямиВал);                        // 62.21
	КлассСчетовРасчетов.Вставить("РасчетыСПокупателем",         ПланыСчетов.Типовой.КраткосрочнаяДебиторскаяЗадолженностьПокупателейИЗаказчиков);                            // 1210
	КлассСчетовРасчетов.Вставить("РасчетыСПокупателемНУ",       ПланыСчетов.Типовой.КраткосрочнаяДебиторскаяЗадолженностьПокупателейИЗаказчиков);                            // 1210
	//КлассСчетовРасчетов.Вставить("АвансыПокупателя",            ПланыСчетов.Типовой.РасчетыПоАвансамПолученнымВал);                  // 62.22
	КлассСчетовРасчетов.Вставить("АвансыПокупателя",            ПланыСчетов.Типовой.КраткосрочныеАвансыПолученные);                                                          // 3510
	//КлассСчетовРасчетов.Вставить("РасчетыПоПретензиям",         ПланыСчетов.Типовой.РасчетыПоПретензиямВал);                         // 76.22
	КлассСчетовРасчетов.Вставить("РасчетыПоПретензиям",         ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПоВозвратамРеализованныхГотовойПродукцииТоваровРаботУслуг);    // 3381
	//КлассСчетовРасчетов.Вставить("РасчетыСКомитентом",          ПланыСчетов.Типовой.РасчетыСПрочимиПоставщикамиИПодрядчикамиВал);    // 76.25
	//КлассСчетовРасчетов.Вставить("ВозвратнаяТараПолученная",    ПланыСчетов.Типовой.РасчетыСПрочимиПоставщикамиИПодрядчикамиВал);    // 76.25
	//КлассСчетовРасчетов.Вставить("РасчетыСПрочимиПокупателями", ПланыСчетов.Типовой.РасчетыСПрочимиПокупателямиИЗаказчикамиВал);     // 76.26
	//КлассСчетовРасчетов.Вставить("ВозвратнаяТараПереданная",    ПланыСчетов.Типовой.РасчетыСПрочимиПокупателямиИЗаказчикамиВал);     // 76.26
	//КлассСчетовРасчетов.Вставить("РасчетыСКомитентомЗаПриобретенныеДляНегоТоварыУслуги",
	//                                                            ПланыСчетов.Типовой.РасчетыСПрочимиПокупателямиИЗаказчикамиВал);     // 76.26
	//КлассСчетовРасчетов.Вставить("АрендныеОбязательства",       ПланыСчетов.Типовой.АрендныеОбязательстваВал);                       // 76.27.1
	//КлассСчетовРасчетов.Вставить("ЛизинговыеПлатежи",           ПланыСчетов.Типовой.ЛизинговыеПлатежиВал);                           // 76.27.2
	//КлассСчетовРасчетов.Вставить("РасчетыДругие",               ПланыСчетов.Типовой.ПрочиеРасчетыСРазнымиДебиторамиИКредиторамиВал); // 76.29
	
	КлассСчетовРасчетов.Вставить("РасчетыСПоставщикомПоВозвратам", ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПоВозвратамТМЗПоставщикам);                                 // 1271
	
	КлассСчетовРасчетов.Вставить("РасчетыСГПХ",         		  ПланыСчетов.Типовой.ПрочаяКраткосрочнаяКредиторскаяЗадолженность); // 3387
	КлассСчетовРасчетов.Вставить("РасчетыСГПХНУ",       		  ПланыСчетов.Налоговый.ПоступлениеИВыбытиеИмуществаработУслугПрав); // 3310Н

	Возврат СчетаРасчетов;
	
КонецФункции

Функция ВидРасчетовПоУсловиямРасчетов(Валюта = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(Валюта) Или Валюта = ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета() Тогда
		
		Возврат Перечисления.ВидыРасчетовПоДоговорам.РасчетыВВалютеРегламентированногоУчета;
		
	Иначе // в иностранной валюте
		
		Возврат Перечисления.ВидыРасчетовПоДоговорам.РасчетыВИностраннойВалюте;
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

// Возаращает вид договора с контрагентом по виду операции
//
Функция ОпределитьВидДоговораСКонтрагентом(ВидОперации = Неопределено) Экспорт
	
	СПоставщиком = Новый СписокЗначений;
	СПоставщиком.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
	СПоставщиком.Добавить(Перечисления.ВидыДоговоровКонтрагентов.Прочее);
	
	СПокупателем = Новый СписокЗначений;
	СПокупателем.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
	СПокупателем.Добавить(Перечисления.ВидыДоговоровКонтрагентов.Прочее);
	
	Прочее 		 = Новый СписокЗначений;
	Прочее.Добавить(Перечисления.ВидыДоговоровКонтрагентов.Прочее);
	
	Если ЗначениеЗаполнено(ВидОперации) Тогда

		//Определение вида операции  
		ВидДоговораПоВидуОпераций = Новый Соответствие(); 
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийРКО.ОплатаПоставщику,СПоставщиком);
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийРКО.ОплатаСтруктурномуПодразделению,СПоставщиком);
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийРКО.РасчетыПоДоходуОтРазовыхВыплатСКонтрагентами,СПоставщиком);
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИЗаймамСКонтрагентами,Прочее);
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателю,СПокупателем);		
		
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПКО.ОплатаПокупателя,СПокупателем);
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПКО.ОплатаСтруктурногоПодразделения,СПокупателем);
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПКО.РасчетыПоКредитамИЗаймамСКонтрагентами,Прочее);
        ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПоставщиком,СПоставщиком);
		
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ОплатаПоставщику,СПоставщиком);
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.РасчетыПоКредитамИЗаймам,Прочее);
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПокупателю,СПокупателем);
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПрочиеРасчетыСКонтрагентами,Прочее);
		
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПокупателя,СПокупателем);
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаСтруктурногоПодразделения,СПокупателем);
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПоставщиком,СПоставщиком);
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.РасчетыПоКредитамИЗаймам,Прочее);
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПриобретениеИностраннойВалюты,Прочее);
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты,Прочее);
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочиеРасчетыСКонтрагентами,Прочее);
		
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийППИсходящее.ОплатаПоставщику,СПоставщиком);
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийППИсходящее.ОплатаСтруктурномуПодразделению,СПоставщиком);
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийППИсходящее.РасчетыПоКредитамИЗаймамСКонтрагентами,Прочее);
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийППИсходящее.ПрочиеРасчетыСКонтрагентами,Прочее);
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийППИсходящее.ВозвратДенежныхСредствПокупателю,СПокупателем);
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийППИсходящее.РасчетыПоДоходуОтРазовыхВыплатСКонтрагентами,СПоставщиком);
		ВидДоговора = ВидДоговораПоВидуОпераций[ВидОперации];
		
		Если НЕ ВидДоговора = Неопределено Тогда
			
			Возврат ВидДоговора;
			
		Иначе
			
			Возврат Новый СписокЗначений;
			
		КонецЕсли;
		
	Иначе
		
		Возврат Новый СписокЗначений;
		
	Конецесли;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции диалогов расчетных документов

Функция ПолучитьЗначениеНеобходимостиУчетаАгентскогоНДС(ВидОперации) Экспорт
	ИспользоватьУчетАгентскогоНДС = Ложь;
	Если ТипЗнч(ВидОперации) = Тип("ПеречислениеСсылка.ВидыОперацийПоступлениеТоваровУслуг") 
		или ТипЗнч(ВидОперации) = Тип("ПеречислениеСсылка.ВидыОперацийПоступлениеДопРасходов") 
		или ТипЗнч(ВидОперации) = Тип("ПеречислениеСсылка.ВидыОперацийПоступлениеНМА") 
		или ТипЗнч(ВидОперации) = Тип("ПеречислениеСсылка.ВидыОперацийРегистрацииНДСЗаНерезидента") Тогда
		
		ИспользоватьУчетАгентскогоНДС = Истина;
	КонецЕсли;
	Если ИспользоватьУчетАгентскогоНДС  Тогда
		СписокВидовОперацийУчетАгентскогоНДС = Новый СписокЗначений;
		СписокВидовОперацийУчетАгентскогоНДС.Добавить(Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПоступлениеОтНерезидента);
		СписокВидовОперацийУчетАгентскогоНДС.Добавить(Перечисления.ВидыОперацийПоступлениеДопРасходов.ПоступлениеОтНерезидента);
		СписокВидовОперацийУчетАгентскогоНДС.Добавить(Перечисления.ВидыОперацийПоступлениеНМА.ПоступлениеОтНерезидента);
		СписокВидовОперацийУчетАгентскогоНДС.Добавить(Перечисления.ВидыОперацийРегистрацииНДСЗаНерезидента.НачислениеНДС);
		СписокВидовОперацийУчетАгентскогоНДС.Добавить(Перечисления.ВидыОперацийРегистрацииНДСЗаНерезидента.ПринятиеНДСКЗачету);
		
		УчетАгентскогоНДС = ?(СписокВидовОперацийУчетАгентскогоНДС.НайтиПоЗначению(ВидОперации) = Неопределено, Ложь, Истина); 
	Иначе
		УчетАгентскогоНДС = Неопределено;	
	КонецЕсли;
	
	Возврат УчетАгентскогоНДС;
КонецФункции	

Процедура ПриИзмененииЗначенияКонтрагента(Объект, Знач СтруктураПараметровДляПолученияДоговора = Неопределено) Экспорт

	Если СтруктураПараметровДляПолученияДоговора <> Неопределено Тогда
		// для совместимости с прежней версией процедуры проверим тип параметра - раньше был список с видами договоров
		Если ТипЗнч(СтруктураПараметровДляПолученияДоговора) = Тип("СписокЗначений") Тогда
			ВрмСписок = СтруктураПараметровДляПолученияДоговора;
			СтруктураПараметровДляПолученияДоговора = Новый Структура("СписокДопустимыхВидовДоговоров", ВрмСписок);
		КонецЕсли;
	КонецЕсли;

	ЕстьКонтрагент	      		  = Объект.Свойство("Контрагент"); 
	ЕстьДоговорКонтрагента	      = Объект.Свойство("ДоговорКонтрагента"); 
	ЕстьКонтактноеЛицоКонтрагента = Объект.Свойство("КонтактноеЛицоКонтрагента");
    ЕстьСделка 					  = Объект.Свойство("Сделка");
	ЕстьОрганизация               = Объект.Свойство("Организация");
	ЕстьТипЦен                    = Объект.Свойство("ТипЦен");
	ЕстьБанковскийСчетКонтрагента = Объект.Свойство("БанковскийСчетКонтрагента");
	ЕстьВидОперации               = Объект.Свойство("ВидОперации");
	
	Если ЕстьВидОперации Тогда 
		Если СтруктураПараметровДляПолученияДоговора = Неопределено Тогда 
			СтруктураПараметровДляПолученияДоговора = Новый Структура;	
		КонецЕсли;	
		СтруктураПараметровДляПолученияДоговора.Вставить("УчетАгентскогоНДС", ПолучитьЗначениеНеобходимостиУчетаАгентскогоНДС(Объект.ВидОперации));
	КонецЕсли;	
	
	Если ЕстьКонтрагент Тогда 
		Если Объект.Контрагент = Неопределено Тогда
			Объект.Контрагент = Справочники.Контрагенты.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли; 

	Если ЕстьКонтрагент Тогда

		// Если в документе уже выбран "правильный" договор, то не будем его менять.
		Если ЕстьДоговорКонтрагента Тогда
			Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда 
				ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
			Иначе
				Если ЗаполнениеДокументов.МожноИспользоватьДоговорДляДокумента(Объект.ДоговорКонтрагента, Объект.Контрагент, Объект.Организация, СтруктураПараметровДляПолученияДоговора) Тогда
					ДоговорКонтрагента = Объект.ДоговорКонтрагента;
				ИначеЕсли НЕ ПолучитьФункциональнуюОпцию("ВестиУчетПоДоговорам") Тогда
					Если СтруктураПараметровДляПолученияДоговора = Неопределено ИЛИ НЕ СтруктураПараметровДляПолученияДоговора.Свойство("СписокДопустимыхВидовДоговоров") Тогда
						СписокВидовДоговоров = Неопределено;
					Иначе
						СписокВидовДоговоров = СтруктураПараметровДляПолученияДоговора.СписокДопустимыхВидовДоговоров;
					КонецЕсли;
					РаботаСДоговорамиКонтрагентов.УстановитьДоговорКонтрагента(Объект.ДоговорКонтрагента,
						Объект.Контрагент, Объект.Организация, СписокВидовДоговоров);
					ДоговорКонтрагента = Объект.ДоговорКонтрагента;
				Иначе
					ДоговорКонтрагента = ЗаполнениеДокументов.ПолучитьДоговорПоОрганизацииИКонтрагенту(Объект.Организация, Объект.Контрагент, СтруктураПараметровДляПолученияДоговора);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		Если ЕстьКонтактноеЛицоКонтрагента Тогда
			Если НЕ ЗначениеЗаполнено(Объект.КонтактноеЛицоКонтрагента)
			 ИЛИ ТипЗнч(Объект.КонтактноеЛицоКонтрагента) <> Тип("СправочникСсылка.КонтактныеЛица") Тогда
				КонтактноеЛицоКонтрагента = Объект.Контрагент.ОсновноеКонтактноеЛицо;
			Иначе
				Если Объект.КонтактноеЛицоКонтрагента.Владелец <> Объект.Контрагент Тогда
					КонтактноеЛицоКонтрагента = Объект.Контрагент.ОсновноеКонтактноеЛицо;
				КонецЕсли; 
			КонецЕсли; 
		КонецЕсли; 

	КонецЕсли;

	Если ЕстьДоговорКонтрагента Тогда
		Объект.ДоговорКонтрагента = ДоговорКонтрагента;
		Если ЕстьОрганизация
		   И ДоговорКонтрагента <> Неопределено 
		   И (НЕ ЗначениеЗаполнено(Объект.Организация)) Тогда
			Объект.Организация = Объект.Организация;
		КонецЕсли;
	КонецЕсли;

	Если ЕстьКонтактноеЛицоКонтрагента 
		И КонтактноеЛицоКонтрагента <> Неопределено Тогда
		Объект.КонтактноеЛицоКонтрагента = КонтактноеЛицоКонтрагента;
	КонецЕсли; 

	Если ЕстьСделка Тогда
		Объект.Сделка = Неопределено; // Для сделки нет значения по умолчанию в договоре
	КонецЕсли;
		
	Если ЕстьБанковскийСчетКонтрагента Тогда
		Объект.БанковскийСчетКонтрагента = Объект.Контрагент.ОсновнойБанковскийСчет;
	КонецЕсли;
	
КонецПроцедуры 

Процедура ПриИзмененииЗначенияДоговора(ДанныеОбъекта, СпособЗаполненияЦен, СтарыйДоговорКонтрагента = Неопределено, ИмяТабличнойЧасти = "Товары", СтруктураРезультатаВыполнения) Экспорт

	ЕстьКурсВзаиморасчетов 	    = ДанныеОбъекта.Свойство("КурсВзаиморасчетов");
	ЕстьКратностьВзаиморасчетов = ДанныеОбъекта.Свойство("КратностьВзаиморасчетов");
	ЕстьСделка 					= ДанныеОбъекта.Свойство("Сделка");
	ЕстьВалютаДокумента 		= ДанныеОбъекта.Свойство("ВалютаДокумента");
	ЕстьОрганизация 			= ДанныеОбъекта.Свойство("Организация");
	ЕстьНомер 					= ДанныеОбъекта.Свойство("Номер");
	ЕстьТипЦен 					= ДанныеОбъекта.Свойство("ТипЦен");
	ЕстьСуммаВключаетНДС 		= ДанныеОбъекта.Свойство("СуммаВключаетНДС");
	ЕстьСуммаВключаетАкциз 		= ДанныеОбъекта.Свойство("СуммаВключаетАкциз");
	ЕстьУчитыватьНДС 			= ДанныеОбъекта.Свойство("УчитыватьНДС");
	ЕстьУчитыватьАкциз 			= ДанныеОбъекта.Свойство("УчитыватьАкциз");
	ЕстьКурсДокумента 			= ДанныеОбъекта.Свойство("КурсДокумента");
	ЕстьКратностьДокумента		= ДанныеОбъекта.Свойство("КратностьДокумента");
	
	Договор = ДанныеОбъекта.ДоговорКонтрагента;
	
	// отработка не инициализированного значения договора
	Если СтарыйДоговорКонтрагента = Неопределено Тогда
		СтарыйДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	КонецЕсли;
	
	МассивДоговоров = Новый Массив;
	МассивДоговоров.Добавить(Договор);
	МассивДоговоров.Добавить(СтарыйДоговорКонтрагента);
	РеквизитыДоговоровКонтрагентов = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивДоговоров, "Владелец, Организация, ТипЦен, ВалютаВзаиморасчетов, ВидДоговора");
	
	РеквизитыДоговора = РеквизитыДоговоровКонтрагентов.Получить(Договор);
	РеквизитыСтарогоДоговора = РеквизитыДоговоровКонтрагентов.Получить(СтарыйДоговорКонтрагента);
	
	// Если изменился контрагент, то необходимо очистить значение старого договора.
	Если ЗначениеЗаполнено(СтарыйДоговорКонтрагента) И РеквизитыСтарогоДоговора.Владелец <> ДанныеОбъекта.Контрагент Тогда 
		СтарыйДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		РеквизитыСтарогоДоговора = Неопределено;
	КонецЕсли;
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	// если договор заполнен, но не удалось получить реквизиты договора, то скорее всего это "битая" ссылка
	// установим значение договора пустым
	Если ЗначениеЗаполнено(Договор) И РеквизитыДоговора = Неопределено Тогда 
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Выбран некорректный договор. Договор был очищен.'"));
		ДанныеОбъекта.ДоговорКонтрагента = Неопределено;
		Договор = ДанныеОбъекта.ДоговорКонтрагента;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Договор) Тогда
		СтруктураКурсаДокумента = ОбщегоНазначенияБК.ПолучитьКурсВалюты(ВалютаРегламентированногоУчета, ДанныеОбъекта.Дата);

		Если ЕстьКурсВзаиморасчетов Тогда
			ДанныеОбъекта.КурсВзаиморасчетов      = СтруктураКурсаДокумента.Курс;
		КонецЕсли;

		Если ЕстьКратностьВзаиморасчетов Тогда
			ДанныеОбъекта.КратностьВзаиморасчетов = СтруктураКурсаДокумента.Кратность;
		КонецЕсли;

		Возврат;

	Иначе

		// Если СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов
		// и договор взаиморасчетов имеет тип не договор поставщика, то это неправильно и надо вернуть старый договор
		// Аналогично если СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры
		// и договор взаиморасчетов имеет тип не договор покупателя

		МожноПродолжать = Истина;
		
		Если ((СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов
				И РеквизитыДоговора.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем)
			 ИЛИ (СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры
				И РеквизитыДоговора.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком)) Тогда
			
			МожноПродолжать = Ложь;
			СтрокаВозможныхВыборов = ?(СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры,
				НСтр("ru = 'В документе можно выбирать только договора с покупателями или прочее.'"),
				НСтр("ru = 'В документе можно выбирать только договора с поставщиками или прочее.'"));
			
		КонецЕсли;
		
		Если НЕ МожноПродолжать Тогда
			
			Если ЗначениеЗаполнено(СтарыйДоговорКонтрагента) 
			   И РеквизитыСтарогоДоговора.Владелец = ДанныеОбъекта.Контрагент
			   И (ЕстьОрганизация И РеквизитыСтарогоДоговора.Организация = ДанныеОбъекта.Организация ИЛИ НЕ ЕстьОрганизация) Тогда
				ТекстПредупреждения = СтрокаВозможныхВыборов + " " + НСтр("ru = 'Был восстановлен старый договор.'");
				ДанныеОбъекта.ДоговорКонтрагента = СтарыйДоговорКонтрагента;
			Иначе
				ТекстПредупреждения = СтрокаВозможныхВыборов + " " + НСтр("ru = 'Договор был очищен.'");
				ДанныеОбъекта.ДоговорКонтрагента = Неопределено;
			КонецЕсли;
			
			ОбщегоНазначения.СообщитьПользователю(ТекстПредупреждения);
			
			// дальше ничего пересчитывать не надо
			Возврат;

		КонецЕсли;
		
	КонецЕсли;

	Если ЕстьСделка Тогда
		ДанныеОбъекта.Сделка = Неопределено; // Для сделки нет значения по умолчанию в договоре
	КонецЕсли; 

	Если НЕ ЗначениеЗаполнено(ДанныеОбъекта.Контрагент) Тогда

		ДанныеОбъекта.Контрагент = РеквизитыДоговора.Владелец;

	ИначеЕсли ЗначениеЗаполнено(Договор)
			И (ДанныеОбъекта.Контрагент <> РеквизитыДоговора.Владелец 
				ИЛИ (ЕстьОрганизация И РеквизитыДоговора.Организация <> ДанныеОбъекта.Организация)) Тогда //Владелец и организация нового договора должен совпадать с контрагентом документа.
		
		Если ЗначениеЗаполнено(СтарыйДоговорКонтрагента) 
		   И РеквизитыСтарогоДоговора.Владелец = ДанныеОбъекта.Контрагент
		   И (ЕстьОрганизация И РеквизитыСтарогоДоговора.Организация = ДанныеОбъекта.Организация ИЛИ НЕ ЕстьОрганизация) Тогда
			ТекстПредупреждения = НСтр("ru = 'Выбранный договор принадлежит другому контрагенту. Был восстановлен старый договор.'");
			ДанныеОбъекта.ДоговорКонтрагента = СтарыйДоговорКонтрагента;
		Иначе
			ТекстПредупреждения = НСтр("ru = 'Выбранный договор принадлежит другому контрагенту. Договор был очищен.'");
			ДанныеОбъекта.ДоговорКонтрагента = Неопределено;
		КонецЕсли;
		
		ОбщегоНазначения.СообщитьПользователю(ТекстПредупреждения);
		
		// дальше ничего пересчитывать не надо
		Возврат;
		
	КонецЕсли;

	//Владелец нового договора должен совпадать с контрагентом документа.
	
	Если ЕстьОрганизация
		 И НЕ ЗначениеЗаполнено(ДанныеОбъекта.Организация) Тогда
		ДанныеОбъекта.Организация = РеквизитыДоговора.Организация;
		Если ЕстьНомер И НЕ ПустаяСтрока(ДанныеОбъекта.Номер) Тогда
			ДанныеОбъекта.Номер = "";
		КонецЕсли;
	КонецЕсли;

	// если хоть в одной табличной части есть хотя бы одна строка, надо пересчитывать
	НадоПересчитывать = Ложь;
	Для Каждого ТЧ Из ДанныеОбъекта.Ссылка.Метаданные().ТабличныеЧасти Цикл
		
		Если ТЧ.Имя = "ОС" Тогда
			РеквизитНоменклатура = "ОсновноеСредство";
			РеквизитЦена         = "Сумма";

		ИначеЕсли ТЧ.Имя = "НМА" Тогда
			РеквизитНоменклатура = "НематериальныйАктив";
			РеквизитЦена         = "Сумма";

		Иначе
			РеквизитНоменклатура = "Номенклатура";
			РеквизитЦена         = "Цена";

		КонецЕсли;
		
		Если (ТЧ.Реквизиты.Найти(РеквизитЦена) <> Неопределено) И (ТЧ.Реквизиты.Найти(РеквизитНоменклатура) <> Неопределено) 
			И ДанныеОбъекта[ТЧ.Имя].Количество() > 0 Тогда
			НадоПересчитывать = Истина;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если НадоПересчитывать = Ложь Тогда

		Если ЕстьВалютаДокумента Тогда
		
			ДанныеОбъекта.ВалютаДокумента = РеквизитыДоговора.ВалютаВзаиморасчетов;
			СтруктураКурсаДокумента 	  = ОбщегоНазначенияБК.ПолучитьКурсВалюты(РеквизитыДоговора.ВалютаВзаиморасчетов, ДанныеОбъекта.Дата);

			// В некоторых документах курс и кратность документа отсутствуют.
			Если ЕстьКурсДокумента Тогда
				ДанныеОбъекта.КурсДокумента           = СтруктураКурсаДокумента.Курс;
			КонецЕсли;
			
			Если ЕстьКратностьДокумента Тогда
				ДанныеОбъекта.КратностьДокумента      = СтруктураКурсаДокумента.Кратность;
			КонецЕсли;
			
			Если ЕстьКурсВзаиморасчетов Тогда
				ДанныеОбъекта.КурсВзаиморасчетов      = СтруктураКурсаДокумента.Курс;
			КонецЕсли;
			
			Если ЕстьКратностьВзаиморасчетов Тогда
				ДанныеОбъекта.КратностьВзаиморасчетов = СтруктураКурсаДокумента.Кратность;
			КонецЕсли;
			
		КонецЕсли;

		Если ЕстьТипЦен Тогда
			Если ЗначениеЗаполнено(РеквизитыДоговора.ТипЦен) Тогда
			
				ДанныеОбъекта.ТипЦен = РеквизитыДоговора.ТипЦен;
				РеквизитыТипаЦен = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РеквизитыДоговора.ТипЦен, "ЦенаВключаетНДС, ЦенаВключаетАкциз");
				
				Если ЕстьСуммаВключаетНДС И ЕстьУчитыватьНДС И ДанныеОбъекта.УчитыватьНДС Тогда
					ДанныеОбъекта.СуммаВключаетНДС = РеквизитыТипаЦен.ЦенаВключаетНДС;
				КонецЕсли;
				
				Если ЕстьСуммаВключаетАкциз И ЕстьУчитыватьАкциз И ДанныеОбъекта.УчитыватьАкциз Тогда
					ДанныеОбъекта.СуммаВключаетАкциз = РеквизитыТипаЦен.ЦенаВключаетАкциз;
				КонецЕсли;				
			КонецЕсли;
		КонецЕсли;

	Иначе 

		// Если заполнен и по другим параметрам, то предварительно спрашиваем
		НеобходимоПересчитать = Ложь;
		ТекстВопроса = НСтр("ru = 'Договор с контрагентом предусматривает параметры взаиморасчетов,
		               |отличные от установленных в документе:'");
					   
		// Валюта документа
		НоваяВалютаДокумента = Справочники.Валюты.ПустаяСсылка();
		Если ЕстьВалютаДокумента И (ЗначениеЗаполнено(РеквизитыДоговора.ВалютаВзаиморасчетов))Тогда
		   
			НоваяВалютаДокумента    = РеквизитыДоговора.ВалютаВзаиморасчетов;   
			СтруктураКурсаДокумента = ОбщегоНазначенияБК.ПолучитьКурсВалюты(НоваяВалютаДокумента, ДанныеОбъекта.Дата);
			
			Если ДанныеОбъекта.ВалютаДокумента <> НоваяВалютаДокумента Тогда
				НеобходимоПересчитать = Истина;
				ТекстВопроса = ТекстВопроса + Символы.ПС +
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(?(ЗначениеЗаполнено(ДанныеОбъекта.ВалютаДокумента),
						НСтр("ru = 'Валюта документа: ""%1"", договора: ""%2"".'"),
						НСтр("ru = 'Валюта документа: ""Не задана"", договора: ""%2"".'")),
					СокрЛП(ДанныеОбъекта.ВалютаДокумента),
					СокрЛП(НоваяВалютаДокумента));
			КонецЕсли;
			
		КонецЕсли;

		// Тип цен
		НадоПередаватьНовыйТипЦен = Ложь;
		
		Если ЕстьТипЦен Тогда
			
			НовыйТипЦен = ДанныеОбъекта.ТипЦен;
			
			Если ЗначениеЗаполнено(РеквизитыДоговора.ТипЦен) Тогда
				НовыйТипЦен = РеквизитыДоговора.ТипЦен;
			КонецЕсли;

			Если ДанныеОбъекта.ТипЦен <> НовыйТипЦен Тогда
				НеобходимоПересчитать 		= Истина;
				НадоПередаватьНовыйТипЦен 	= Истина;
				ТекстВопроса = ТекстВопроса + Символы.ПС +
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(?(ЗначениеЗаполнено(ДанныеОбъекта.ТипЦен),
						НСтр("ru = 'Тип цен документа: ""%1"", договора: ""%2"".'"),
						НСтр("ru = 'Тип цен документа: ""Не задан"", договора: ""%2"".'")),
					СокрЛП(ДанныеОбъекта.ТипЦен),
					СокрЛП(НовыйТипЦен));
			КонецЕсли;
			
		КонецЕсли;

		Если НеобходимоПересчитать Тогда
			
			ТекстВопроса = ТекстВопроса + Символы.ПС + НСтр("ru = 'Пересчитать документ в соответствии с договором?'");

			Если ЕстьКурсВзаиморасчетов ИЛИ ЕстьКратностьВзаиморасчетов Тогда

				СтруктураКурсаВзаиморасчетов = ОбщегоНазначенияБК.ПолучитьКурсВалюты(РеквизитыДоговора.ВалютаВзаиморасчетов, ДанныеОбъекта.Дата);
				
			КонецЕсли;
			
			Если СтруктураРезультатаВыполнения = Неопределено Тогда 
				СтруктураРезультатаВыполнения = Новый Структура;
			КонецЕсли;
			
			СтруктураРезультатаВыполнения.Вставить("ЕстьВалютаДокумента", ЕстьВалютаДокумента);
			СтруктураРезультатаВыполнения.Вставить("НоваяВалютаДокумента", НоваяВалютаДокумента);
			СтруктураРезультатаВыполнения.Вставить("ЕстьКурсВзаиморасчетов", ЕстьКурсВзаиморасчетов);
			СтруктураРезультатаВыполнения.Вставить("ЕстьКратностьВзаиморасчетов", ЕстьКратностьВзаиморасчетов);
			СтруктураРезультатаВыполнения.Вставить("СтруктураКурсаВзаиморасчетов", СтруктураКурсаВзаиморасчетов);
			СтруктураРезультатаВыполнения.Вставить("ТекстВопроса", ТекстВопроса);
			
		Иначе

			// Установим курс и кратность взаиморасчетов
			Если ЕстьВалютаДокумента
			    И ЗначениеЗаполнено(РеквизитыДоговора.ВалютаВзаиморасчетов) Тогда
			   
				СтруктураКурсаВзаиморасчетов = ОбщегоНазначенияБК.ПолучитьКурсВалюты(РеквизитыДоговора.ВалютаВзаиморасчетов, ДанныеОбъекта.Дата);
				
				Если ЕстьКурсВзаиморасчетов Тогда
					ДанныеОбъекта.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
				КонецЕсли;
				
				Если ЕстьКратностьВзаиморасчетов Тогда
					ДанныеОбъекта.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли; 
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции проверки при проведении правильности заполнения документов

// Проверяет возможность проведения в БУ и НУ в зависимости от договора взаиморасчетов.
//
Функция ВозможноПроведениеВ_БУ_НУ(Реквизиты, Отказ = Ложь, ДополнениеКСообщению = "", Поле = "") Экспорт

	Если НЕ ЗначениеЗаполнено(Реквизиты.ДоговорКонтрагента) Тогда
		Возврат Истина;
	КонецЕсли;

	Если Реквизиты.ВалютаВзаиморасчетов <> Реквизиты.ВалютаДокумента 
	   И Реквизиты.ВалютаРегламентированногоУчета <> Реквизиты.ВалютаДокумента Тогда

		// Документ выписан в валюте отличной от валюты регламентированного учета и валюты расчетов. 
		// Возможно только в документах оплаты.
		// Не отражается в б.у.
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='%1 Валюта документа (%2) отличается от валюты регламентированного учета (%3) и валюты расчетов по договору ""%4"" (%5). Документ не может быть проведен по бухгалтерскому или налоговому учету.'"),
			ДополнениеКСообщению,
			Реквизиты.ВалютаДокумента,
			Реквизиты.ВалютаРегламентированногоУчета,
			Реквизиты.ДоговорКонтрагента,
			Реквизиты.ВалютаВзаиморасчетов
		);
			
		ОбщегоНазначения.СообщитьПользователю(СокрЛП(ТекстСообщения), Реквизиты.Регистратор, Поле, "Объект", Отказ);
		
		Возврат Ложь;               

	ИначеЕсли Реквизиты.ВалютаДокумента = Реквизиты.ВалютаРегламентированногоУчета
		И НЕ (Реквизиты.ВалютаВзаиморасчетов = Реквизиты.ВалютаРегламентированногоУчета) Тогда

		//Документ выписан в валюте регламентированного учета. Валюта расчетов иная. Договор не в у.е. 
		//Не отражается в б.у.
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='%1 Валюта расчетов по договору ""%2"" (%3) отличается от валюты регламентированного учета (%4). В этом случае документы могут быть выписаны в валюте регламентированного учета только при расчетах в условных единицах. Документ не может быть проведен по бухгалтерскому или налоговому учету.'"),
			ДополнениеКСообщению,
			Реквизиты.ДоговорКонтрагента,
			Реквизиты.ВалютаВзаиморасчетов,
			Реквизиты.ВалютаРегламентированногоУчета
		);
			
		ОбщегоНазначения.СообщитьПользователю(СокрЛП(ТекстСообщения), Реквизиты.Регистратор, Поле, "Объект", Отказ);
		
		Возврат Ложь;

	КонецЕсли;

	Возврат Истина;

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции подготовки проведения документов

Процедура ПодготовитьТаблицуДокументаРасчетыВВалюте(ТаблицаСуммДокумента, Реквизиты) Экспорт
	
	Если Реквизиты.ВалютаДокумента <> Реквизиты.ВалютаРегламентированногоУчета Тогда // Документ оформлен в валюте расчетов
		
		ЕстьНДС = ТаблицаСуммДокумента.Колонки.Найти("СуммаНДС") <> Неопределено И ТаблицаСуммДокумента.Колонки.Найти("СуммаНДСВзаиморасчетов") <> Неопределено;
		
		ЕстьАкциз = ТаблицаСуммДокумента.Колонки.Найти("СуммаАкциза") <> Неопределено И ТаблицаСуммДокумента.Колонки.Найти("СуммаАкцизаВзаиморасчетов") <> Неопределено;
		
		СуммаВключаетАкциз = Реквизиты.Свойство("СуммаВключаетАкциз") И Реквизиты.СуммаВключаетАкциз;
		
		ЕстьОборотПоРеализации = ТаблицаСуммДокумента.Колонки.Найти("ОборотПоРеализации") <> Неопределено И ТаблицаСуммДокумента.Колонки.Найти("ОборотПоРеализацииВзаиморасчетов") <> Неопределено;
		
		СуммаВключаетНДС = Реквизиты.Свойство("СуммаВключаетНДС") И Реквизиты.СуммаВключаетНДС;
		
		НДСВключенВСтоимость = Реквизиты.Свойство("НДСВключенВСтоимость") И Реквизиты.НДСВключенВСтоимость;
		
		ЕстьУплаченныйНДС = ТаблицаСуммДокумента.Колонки.Найти("УплаченныйНДС") <> Неопределено И ТаблицаСуммДокумента.Колонки.Найти("СуммаНДСВзаиморасчетов") <> Неопределено;

		Для Каждого СтрокаТаблицы Из ТаблицаСуммДокумента Цикл
			
			Если ЕстьАкциз Тогда
				СтрокаТаблицы.СуммаАкциза = СтрокаТаблицы.СуммаАкцизаВзаиморасчетов * Реквизиты.КурсВзаиморасчетов / Реквизиты.КратностьВзаиморасчетов;
			КонецЕсли;
			
			Если ЕстьОборотПоРеализации Тогда
				СтрокаТаблицы.ОборотПоРеализации = Окр(СтрокаТаблицы.ОборотПоРеализацииВзаиморасчетов * Реквизиты.КурсВзаиморасчетов / Реквизиты.КратностьВзаиморасчетов, 2);
			КонецЕсли;
			
			Если ЕстьНДС И СтрокаТаблицы.СуммаНДСВзаиморасчетов <> 0 Тогда
				
				СтрокаТаблицы.Сумма = Окр(СтрокаТаблицы.СуммаВзаиморасчетов * Реквизиты.КурсВзаиморасчетов / Реквизиты.КратностьВзаиморасчетов,2);
				
				Если ЕстьОборотПоРеализации Тогда
					// НДС рассчитывается от ОборотПоРеализации, ОборотПоРеализации не включает в себя НДС
					СуммаОборотТенге = СтрокаТаблицы.ОборотПоРеализации;
				Иначе
					Если НДСВключенВСтоимость Тогда
						СуммаОборотТенге = Окр((СтрокаТаблицы.СуммаВзаиморасчетов - СтрокаТаблицы.СуммаНДСВзаиморасчетов + ?(ЕстьАкциз И СуммаВключаетАкциз, СтрокаТаблицы.СуммаАкцизаВзаиморасчетов, 0)) * Реквизиты.КурсВзаиморасчетов / Реквизиты.КратностьВзаиморасчетов, 2);
					Иначе
						СуммаОборотТенге = Окр((СтрокаТаблицы.СуммаВзаиморасчетов + ?(ЕстьАкциз, СтрокаТаблицы.СуммаАкцизаВзаиморасчетов, 0)) * Реквизиты.КурсВзаиморасчетов / Реквизиты.КратностьВзаиморасчетов, 2);
					КонецЕсли;
				КонецЕсли;
							
				ПроцентНДС = УчетНДСиАкцизаВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС);
				
				СтрокаТаблицы.СуммаНДС =  Окр(СуммаОборотТенге * ПроцентНДС / 100,2);
				
				Если ЕстьУплаченныйНДС Тогда
					СтрокаТаблицы.УплаченныйНДС = СтрокаТаблицы.СуммаНДС;
				КонецЕсли;

				Если НДСВключенВСтоимость Тогда
					СтрокаТаблицы.Сумма = Окр(СуммаОборотТенге + СтрокаТаблицы.СуммаНДС - ?(ЕстьАкциз И СуммаВключаетАкциз, СтрокаТаблицы.СуммаАкциза, 0), 2);
				КонецЕсли;
				
				Если ЕстьОборотПоРеализации Тогда
					СтрокаТаблицы.ОборотПоРеализации = Окр(СтрокаТаблицы.ОборотПоРеализации, 2);
				КонецЕсли;
				
				Если ЕстьАкциз Тогда
					СтрокаТаблицы.СуммаАкциза = Окр(СтрокаТаблицы.СуммаАкциза, 2);
				КонецЕсли;
				
			Иначе
				// нет НДС
				СтрокаТаблицы.Сумма = Окр(СтрокаТаблицы.СуммаВзаиморасчетов * Реквизиты.КурсВзаиморасчетов / Реквизиты.КратностьВзаиморасчетов, 2);
				
				Если ЕстьОборотПоРеализации Тогда
					СтрокаТаблицы.ОборотПоРеализации = Окр(СтрокаТаблицы.ОборотПоРеализации, 2);
				КонецЕсли;
				
				Если ЕстьАкциз Тогда
					СтрокаТаблицы.СуммаАкциза = Окр(СтрокаТаблицы.СуммаАкциза, 2);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе // Договор в у.е., документ оформлен в тенге
		
		ИтогСуммаВзаиморасчетов = ?(Реквизиты.КурсВзаиморасчетов = 0 ИЛИ Реквизиты.КратностьВзаиморасчетов = 0, 0,
			Окр(ТаблицаСуммДокумента.Итог("Сумма") / (Реквизиты.КурсВзаиморасчетов / Реквизиты.КратностьВзаиморасчетов), 2));
		ОбщегоНазначенияБКВызовСервера.РаспределитьСуммуПоКолонкеТаблицы(
			ИтогСуммаВзаиморасчетов, ТаблицаСуммДокумента, "СуммаВзаиморасчетов", "Сумма");
		
		Если ТаблицаСуммДокумента.Колонки.Найти("СуммаНДСВзаиморасчетов") <> Неопределено 
			И ТаблицаСуммДокумента.Колонки.Найти("СуммаНДС") <> Неопределено Тогда
			// Сумма НДС в валюте рассчитывается в целом по документу и распределяется по строкам
			ИтогСуммаНДСВзаиморасчетов = ?(Реквизиты.КурсВзаиморасчетов = 0 ИЛИ Реквизиты.КратностьВзаиморасчетов = 0, 0,
				Окр(ТаблицаСуммДокумента.Итог("СуммаНДС") / (Реквизиты.КурсВзаиморасчетов / Реквизиты.КратностьВзаиморасчетов), 2));
			ОбщегоНазначенияБКВызовСервера.РаспределитьСуммуПоКолонкеТаблицы(
				ИтогСуммаНДСВзаиморасчетов, ТаблицаСуммДокумента, "СуммаНДСВзаиморасчетов", "СуммаНДС");
		КонецЕсли;
		
		Если ТаблицаСуммДокумента.Колонки.Найти("СуммаАкцизаВзаиморасчетов") <> Неопределено 
			И ТаблицаСуммДокумента.Колонки.Найти("СуммаАкциза") <> Неопределено Тогда
			// Сумма акциза в валюте рассчитывается в целом по документу и распределяется по строкам
			ИтогСуммаАкцизаВзаиморасчетов = ?(Реквизиты.КурсВзаиморасчетов = 0 ИЛИ Реквизиты.КратностьВзаиморасчетов = 0, 0,
				Окр(ТаблицаСуммДокумента.Итог("СуммаАкциза") / (Реквизиты.КурсВзаиморасчетов / Реквизиты.КратностьВзаиморасчетов), 2));
			ОбщегоНазначенияБКВызовСервера.РаспределитьСуммуПоКолонкеТаблицы(
				ИтогСуммаАкцизаВзаиморасчетов, ТаблицаСуммДокумента, "СуммаАкцизаВзаиморасчетов", "СуммаАкциза");
		КонецЕсли;   		
		
		// На момент добавления использовался только в документе РегистрацияПрочихОперацийПоРеализованнымТоварамВЦеляхНДС.
		// Документы в которых используется можно попытаться найти выполнив поиск строки ОборотПоРеализацииВзаиморасчетов.
		Если ТаблицаСуммДокумента.Колонки.Найти("ОборотПоРеализацииВзаиморасчетов") <> Неопределено 
			И ТаблицаСуммДокумента.Колонки.Найти("ОборотПоРеализации") <> Неопределено Тогда
			// Оборот по реализации в валюте рассчитывается в целом по документу и распределяется по строкам
			ИтогОборотПоРеализацииВзаиморасчетов = ?(Реквизиты.КурсВзаиморасчетов = 0 ИЛИ Реквизиты.КратностьВзаиморасчетов = 0, 0,
				Окр(ТаблицаСуммДокумента.Итог("ОборотПоРеализации") / (Реквизиты.КурсВзаиморасчетов / Реквизиты.КратностьВзаиморасчетов), 2));
			ОбщегоНазначенияБКВызовСервера.РаспределитьСуммуПоКолонкеТаблицы(
				ИтогОборотПоРеализацииВзаиморасчетов, ТаблицаСуммДокумента, "ОборотПоРеализацииВзаиморасчетов", "ОборотПоРеализации");
		КонецЕсли;		
	
	КонецЕсли;

КонецПроцедуры

Процедура ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаЗначений, ТаблицаШапкиДокумента, 
																	ВключитьНалогиВОсновнуюСумму, 
																	ВалютаРегламентированногоУчета = "") Экспорт

	Перем СуммаВключаетНДС, СуммаВключаетАкциз;

	СтруктураШапкиДокумента = ТаблицаШапкиДокумента[0];
	
	ВалютаРегламентированногоУчета = СтруктураШапкиДокумента.ВалютаРегламентированногоУчета;
	
	ИзмененоИмяКолонкиНДС 	= Ложь;
	ИзмененоИмяКолонкиАкциз = Ложь;
	
	Если   Не(ТаблицаЗначений.Колонки.Найти("СуммаНДС") = Неопределено) Тогда
	   	ТаблицаЗначений.Колонки.СуммаНДС.Имя = "НДС";
		ИзмененоИмяКолонкиНДС  			= Истина;
	КонецЕсли;
	
	Если   Не(ТаблицаЗначений.Колонки.Найти("СуммаАкциза") = Неопределено) Тогда
	   	ТаблицаЗначений.Колонки.СуммаАкциза.Имя = "Акциз";
		ИзмененоИмяКолонкиАкциз  		   = Истина;
	КонецЕсли;

	ЕстьНДС    = Не(ТаблицаЗначений.Колонки.Найти("НДС") = Неопределено);
	
	ЕстьАкциз  = Не(ТаблицаЗначений.Колонки.Найти("Акциз") = Неопределено);
	
	ЕстьВалюта = ?(ТаблицаШапкиДокумента.Колонки.Найти("ВалютаДокумента") <> Неопределено, Истина, Ложь);
	// в счетах-фактура в процедуру передается общая таблица из всех ТЧ, в том числе ТЧ ОС и НМА (в таких строках получить коэффициент из справочника нельзя)
	ЕстьКоэффициентРасчетаОблагаемойБазыАкциза = Не(ТаблицаЗначений.Колонки.Найти("КоэффициентРасчетаОблагаемойБазыАкциза") = Неопределено);;

	ЕстьОборотПоРеализации = ТаблицаЗначений.Колонки.Найти("ОборотПоРеализации") <> Неопределено; 
	
	СуммаВключаетНДС   = ?(ТаблицаШапкиДокумента.Колонки.Найти("СуммаВключаетНДС") <> Неопределено, СтруктураШапкиДокумента.СуммаВключаетНДС, Ложь);
	СуммаВключаетАкциз = ?(ТаблицаШапкиДокумента.Колонки.Найти("СуммаВключаетАкциз") <> Неопределено, СтруктураШапкиДокумента.СуммаВключаетАкциз, Ложь);
	
	СуммаВключаетНДС   = (СуммаВключаетНДС = Истина);
	СуммаВключаетАкциз = (СуммаВключаетАкциз = Истина);
		
	//Дополним колонки ТЗ при необходимости
	СтруктураОбязательныхКолонок = Новый Структура(	"Сумма" +
													?(ЕстьНДС,",НДС,СуммаБезНДС","") +
													?(ЕстьАкциз,",Акциз,СуммаБезАкциза","") +
													?(ЕстьВалюта,",СуммаВал" + ?(ЕстьНДС,",НДСВал,СуммаБезНДСВал","")+?(ЕстьАкциз,",АкцизВал,СуммаБезАкцизаВал","") + ?(ЕстьОборотПоРеализации, ",ОборотПоРеализацииВал", ""),""));

	// Колонки используемые в механизме зачета валютных авансов
	СтруктураОбязательныхКолонок.Вставить("СуммаБУ");
	Если ЕстьНДС Тогда
		СтруктураОбязательныхКолонок.Вставить("СуммаБУБезНДС");
	КонецЕсли;

	Для каждого Колонка Из СтруктураОбязательныхКолонок Цикл

		Если ТаблицаЗначений.Колонки.Найти(Колонка.Ключ) = Неопределено Тогда
			ТаблицаЗначений.Колонки.Добавить(Колонка.Ключ, ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
		КонецЕсли;

	КонецЦикла;
	
	//Определим суммы по документу (Сумму без НДС и акциза и корректную основную сумму)
	Если ЕстьНДС и ЕстьАкциз тогда

		Для каждого СтрокаТаблицы Из ТаблицаЗначений Цикл
			СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.Сумма       - ?(СуммаВключаетНДС, СтрокаТаблицы.НДС, 0) - ?(СуммаВключаетАкциз, СтрокаТаблицы.Акциз, 0);
			СтрокаТаблицы.Сумма       = СтрокаТаблицы.СуммаБезНДС + ?(ВключитьНалогиВОсновнуюСумму, СтрокаТаблицы.НДС+СтрокаТаблицы.Акциз, 0);
		КонецЦикла;
		
	ИначеЕсли ЕстьНДС Тогда
		
		Для каждого СтрокаТаблицы Из ТаблицаЗначений Цикл
			СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.Сумма       - ?(СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);
			СтрокаТаблицы.Сумма       = СтрокаТаблицы.СуммаБезНДС + ?(ВключитьНалогиВОсновнуюСумму, СтрокаТаблицы.НДС, 0);
		КонецЦикла;
		
	ИначеЕсли ЕстьАкциз Тогда
		
		Для каждого СтрокаТаблицы Из ТаблицаЗначений Цикл
			СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.Сумма       - ?(СуммаВключаетАкциз, СтрокаТаблицы.Акциз, 0);
			СтрокаТаблицы.Сумма       = СтрокаТаблицы.СуммаБезНДС + ?(ВключитьНалогиВОсновнуюСумму, СтрокаТаблицы.Акциз, 0);
		КонецЦикла;
		
	КонецЕсли;

	Если ЕстьВалюта Тогда
		
		// Заполним валютные колонки суммами документа
		Для каждого Колонка Из СтруктураОбязательныхКолонок Цикл 			
			Если Прав(Колонка.Ключ, 3) = "Вал" Тогда
				ТаблицаЗначений.ЗагрузитьКолонку(ТаблицаЗначений.ВыгрузитьКолонку(Лев(Колонка.Ключ, СтрДлина(Колонка.Ключ) - 3)), Колонка.Ключ);
			КонецЕсли;			
		КонецЦикла;
		
		Если СтруктураШапкиДокумента.ВалютаДокумента <> ВалютаРегламентированногоУчета Тогда			
			
			Если Число(СтруктураШапкиДокумента.КурсДокумента) = 0 или Число(СтруктураШапкиДокумента.КратностьДокумента)=0 тогда
				КоэффициентПересчета=1;
			Иначе
				КоэффициентПересчета = СтруктураШапкиДокумента.КурсДокумента/СтруктураШапкиДокумента.КратностьДокумента;
			КонецЕсли;			
			
			СуммаРег = Окр(ТаблицаЗначений.Итог("СуммаВал")* КоэффициентПересчета,2);
			
			//Распределение суммы по таблице
			РаспределениеРег = ОбщегоНазначенияБККлиентСервер.РаспределитьПропорционально(СуммаРег,ТаблицаЗначений.ВыгрузитьКолонку("Сумма"));
			
			Если Не РаспределениеРег = Неопределено Тогда
				ТаблицаЗначений.ЗагрузитьКолонку(РаспределениеРег,"Сумма");
			КонецЕсли;
			
			Если ЕстьНДС Тогда
					
				СуммаРег = Окр(ТаблицаЗначений.Итог("СуммаБезНДСВал")* КоэффициентПересчета,2);
				
				//Распределение суммы по таблице
				РаспределениеРег = ОбщегоНазначенияБККлиентСервер.РаспределитьПропорционально(СуммаРег,ТаблицаЗначений.ВыгрузитьКолонку("СуммаБезНДС"));
				
				Если Не РаспределениеРег = Неопределено Тогда
					ТаблицаЗначений.ЗагрузитьКолонку(РаспределениеРег,"СуммаБезНДС");
				КонецЕсли;
				
			КонецЕсли;
		
			Если ЕстьОборотПоРеализации Тогда
				
				Если СтруктураШапкиДокумента.Дата >= Дата(2014,7,1)
					И (СтруктураШапкиДокумента.ВидДокумента = "СчетФактураПолученный" 
					ИЛИ СтруктураШапкиДокумента.ВидДокумента = "СчетФактураВыданный") Тогда
					
					// С 01.07.2014 в ЭСФ разрешен валютный оборот по реалиазации.
					ОборотПоРеализацииВВалюте = Истина;
					
				Иначе
					
					ОборотПоРеализацииВВалюте = Ложь;
					
				КонецЕсли;
				
				Если ОборотПоРеализацииВВалюте Тогда
					// рассчитываем оборот в рег. валюте
					ОборотПоРеализацииРег = Окр(ТаблицаЗначений.Итог("ОборотПоРеализацииВал")* КоэффициентПересчета,2);				
					
					//Распределение суммы по таблице
					РаспределениеРег = ОбщегоНазначенияБККлиентСервер.РаспределитьПропорционально(ОборотПоРеализацииРег,ТаблицаЗначений.ВыгрузитьКолонку("ОборотПоРеализации"));
				
					Если Не РаспределениеРег = Неопределено Тогда
						ТаблицаЗначений.ЗагрузитьКолонку(РаспределениеРег,"ОборотПоРеализации");
					КонецЕсли;	
				Иначе
					// определяем валютную сумму, исходя из оборота в тенге
					Если Число(СтруктураШапкиДокумента.КурсДокумента) = 0 или Число(СтруктураШапкиДокумента.КратностьДокумента)=0 тогда
						КоэффициентПересчетаВВалюту =1;
					Иначе
						КоэффициентПересчетаВВалюту = СтруктураШапкиДокумента.КратностьДокумента/СтруктураШапкиДокумента.КурсДокумента;
					КонецЕсли;			
					
					ОборотПоРеализацииВал = Окр(ТаблицаЗначений.Итог("ОборотПоРеализацииВал")* КоэффициентПересчетаВВалюту,2);				
					
					//Распределение суммы по таблице
					РаспределениеВал = ОбщегоНазначенияБККлиентСервер.РаспределитьПропорционально(ОборотПоРеализацииВал,ТаблицаЗначений.ВыгрузитьКолонку("ОборотПоРеализации"));
				
					Если Не РаспределениеВал = Неопределено Тогда
						ТаблицаЗначений.ЗагрузитьКолонку(РаспределениеВал,"ОборотПоРеализацииВал");
					КонецЕсли;	
				КонецЕсли; 	
			КонецЕсли;
			
			РеквизитСуммаОборота = ?(ЕстьОборотПоРеализации, "ОборотПоРеализации", "СуммаБезНДС");
			
			Если ЕстьНДС И ЕстьАкциз Тогда
				
				Для каждого СтрокаТаблицы Из ТаблицаЗначений Цикл
					Если ЕстьКоэффициентРасчетаОблагаемойБазыАкциза Тогда
						КоэффициентРасчетаОблагаемойБазыАкциза = СтрокаТаблицы.КоэффициентРасчетаОблагаемойБазыАкциза;
					Иначе
						КоэффициентРасчетаОблагаемойБазыАкциза = СтрокаТаблицы.Номенклатура.КоэффициентРасчетаОблагаемойБазыАкциза;
					КонецЕсли;
					
					СтрокаТаблицы.Акциз = УчетНДСиАкцизаКлиентСервер.РассчитатьСуммуАкциза(?(СтруктураШапкиДокумента.ВидДокумента =  "ВозвратТоваровОтПокупателя" И ТаблицаЗначений.Колонки.Найти("КоличествоДок")<>Неопределено, СтрокаТаблицы.КоличествоДок, СтрокаТаблицы.Количество), ?(КоэффициентРасчетаОблагаемойБазыАкциза = 0, 1, КоэффициентРасчетаОблагаемойБазыАкциза), УчетНДСиАкцизаВызовСервераПовтИсп.ПолучитьСтавкуАкциза(СтрокаТаблицы.СтавкаАкциза), ВалютаРегламентированногоУчета, 1, 1);
					
					ПроцентНДС = УчетНДСиАкцизаВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС);
					СтрокаТаблицы.НДС = Окр(УчетНДСиАкцизаКлиентСервер.РассчитатьСуммуНДС(
												СтрокаТаблицы[РеквизитСуммаОборота],
												ЕстьНДС,
												Ложь,
												ПроцентНДС,
												СтрокаТаблицы.Акциз,
												 ?(ЕстьОборотПоРеализации, Истина, Ложь)), 2);
					
					СтрокаТаблицы.Сумма = СтрокаТаблицы.СуммаБезНДС + ?(ВключитьНалогиВОсновнуюСумму, СтрокаТаблицы.НДС, 0) + ?(ВключитьНалогиВОсновнуюСумму, СтрокаТаблицы.Акциз, 0);
				КонецЦикла; 
				
			ИначеЕсли ЕстьНДС ТОгда
				
				Для каждого СтрокаТаблицы из ТаблицаЗначений Цикл
					ПроцентНДС = УчетНДСиАкцизаВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС);
					СтрокаТаблицы.НДС = Окр(УчетНДСиАкцизаКлиентСервер.РассчитатьСуммуНДС(
												СтрокаТаблицы[РеквизитСуммаОборота],
												ЕстьНДС,
												Ложь,
												ПроцентНДС,
												0,
												СуммаВключаетАкциз), 2);
					
					СтрокаТаблицы.Сумма = СтрокаТаблицы.СуммаБезНДС + ?(ВключитьНалогиВОсновнуюСумму, СтрокаТаблицы.НДС, 0);
				КонецЦикла;
				
			ИначеЕсли ЕстьАкциз Тогда
				
				Для каждого СтрокаТаблицы Из ТаблицаЗначений Цикл
					Если ЕстьКоэффициентРасчетаОблагаемойБазыАкциза Тогда
						КоэффициентРасчетаОблагаемойБазыАкциза = СтрокаТаблицы.КоэффициентРасчетаОблагаемойБазыАкциза;
					Иначе
						КоэффициентРасчетаОблагаемойБазыАкциза = СтрокаТаблицы.Номенклатура.КоэффициентРасчетаОблагаемойБазыАкциза;
					КонецЕсли;

					СтрокаТаблицы.Акциз = УчетНДСиАкцизаКлиентСервер.РассчитатьСуммуАкциза(СтрокаТаблицы.Количество, ?(КоэффициентРасчетаОблагаемойБазыАкциза = 0, 1, КоэффициентРасчетаОблагаемойБазыАкциза), УчетНДСиАкцизаВызовСервераПовтИсп.ПолучитьСтавкуАкциза(СтрокаТаблицы.СтавкаАкциза), ВалютаРегламентированногоУчета, 1, 1);
				
				КонецЦикла; 
				
				//Расчет суммы без НДС
				Для каждого СтрокаТаблицы из ТаблицаЗначений Цикл
					СтрокаТаблицы.Сумма = СтрокаТаблицы.СуммаБезНДС + ?(ВключитьНалогиВОсновнуюСумму, СтрокаТаблицы.Акциз, 0);
				КонецЦикла;
				
			КонецЕсли;
			
			// Уберем расхождения из-за округления
			Если ЕстьВалюта И ЕстьОборотПоРеализации Тогда 
				Если ТаблицаЗначений.Итог("СуммаБезНДСВал") = ТаблицаЗначений.Итог("ОборотПоРеализацииВал") Тогда 
					КолонкаСуммаБезНДС = ТаблицаЗначений.ВыгрузитьКолонку("СуммаБезНДС"); 	
					ТаблицаЗначений.ЗагрузитьКолонку(КолонкаСуммаБезНДС, "ОборотПоРеализации"); 
				КонецЕсли;
			КонецЕсли;

		КонецЕсли;
		
	КонецЕсли;

	// На этапе подготовки таблицы суммы для БУ совпадают с суммами для остальных видов учета (НУ, НДС...).
	// При зачете авансов в иностранной валюте суммы БУ будут корректироваться с учетом курсов зачтенных авансов,
	// а суммы для других видов учета остаются прежними
	
	ТаблицаЗначений.ЗагрузитьКолонку(ТаблицаЗначений.ВыгрузитьКолонку("Сумма"), "СуммаБУ");
	Если ЕстьНДС Тогда
		ТаблицаЗначений.ЗагрузитьКолонку(ТаблицаЗначений.ВыгрузитьКолонку("СуммаБезНДС"), "СуммаБУБезНДС");
	КонецЕсли;
	
	Если ИзмененоИмяКолонкиНДС Тогда
	   	ТаблицаЗначений.Колонки.НДС.Имя = "СуммаНДС";
	КонецЕсли;
	
	Если ИзмененоИмяКолонкиАкциз Тогда
	   	ТаблицаЗначений.Колонки.Акциз.Имя = "СуммаАкциза";
	КонецЕсли ;
	
КонецПроцедуры

// ЗАЧЕТ АВАНСОВ - ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Готовится таблица для формирования проводок зачета авансов по расчетам с поставщиками и покупателями
// на основании подготовленных функцией ПодготовитьПараметрыЗачетАванса данных документа
// и остатков по счету авансов на момент проведения.
// Таблица содержит как данные по зачтенным авансам, так и данные о возникшей по документу-регистратору задолженности.
// Вызывается при проведении документов поступления и реализации.
//
// Параметры
//  ТаблицаДокумента - ТаблицаЗначений - данные документа, по которым определяется, какие движения будут сформированы.
//  ТаблицаРеквизиты - ТаблицаЗначений - реквизиты, необходимые для формирования движений.
//  Отказ 			 - Булево - флаг отказа от проведения
//
Функция ПодготовитьТаблицуВзаиморасчетовЗачетАвансов(ТаблицаДокумента, ТаблицаРеквизиты, Отказ) Экспорт
	
	Параметры = ПодготовитьПараметрыТаблицыВзаиморасчетовЗачетАвансов(ТаблицаДокумента, ТаблицаРеквизиты);

	ТаблицаВзаиморасчетов = ПустаяТаблицаВзаиморасчетовЗачетАвансов();
	
	Если Параметры.Реквизиты.Количество() = 0
		ИЛИ Параметры.ТаблицаДокумента.Количество() = 0 Тогда
		Возврат ТаблицаВзаиморасчетов;
	КонецЕсли;
	
	Реквизиты = Параметры.Реквизиты[0];

	ОстаткиАвансов = ПолучитьОстаткиАвансов(Параметры.ТаблицаДокумента, Реквизиты, Отказ);
	
	Если Параметры.ТаблицаДокумента.Колонки.Найти("Содержание") = Неопределено Тогда 
		Параметры.ТаблицаДокумента.Колонки.Добавить("Содержание", ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповСтроки(50));
	КонецЕсли;
	
	Для каждого СтрокаДокумента Из Параметры.ТаблицаДокумента Цикл

		НераспределенныйОстаток = СтрокаДокумента.СуммаВзаиморасчетов;

		ОстаткиАвансовПоДоговору = ОстаткиАвансов.НайтиСтроки(
			Новый Структура("Счет,Контрагент,ДоговорКонтрагента",
			СтрокаДокумента.СчетАвансов,
			СтрокаДокумента.Контрагент,
			СтрокаДокумента.ДоговорКонтрагента));
		
		ДобавитьСтрокиЗачтенныхАвансов(
			ТаблицаВзаиморасчетов,
			НераспределенныйОстаток,
			ОстаткиАвансовПоДоговору,
			СтрокаДокумента,
			Реквизиты);  			
					
		ДобавитьСтрокуЗадолженности(
			ТаблицаВзаиморасчетов,
			НераспределенныйОстаток,
			СтрокаДокумента,
			Реквизиты);

	КонецЦикла;
			
	Возврат ТаблицаВзаиморасчетов;
	
КонецФункции

Процедура СформироватьДвиженияПоВалютнойРазницеЗачтенныхАвансов(ТаблицаВзаиморасчетов, ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Если ТаблицаВзаиморасчетов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	   	
	Реквизиты = ТаблицаРеквизиты[0];
	СуммаКорректировкиРазницы = 0;
		
	Контрагент = ТаблицаВзаиморасчетов[0].Контрагент;
	ДоговорКонтрагента = ТаблицаВзаиморасчетов[0].ДоговорКонтрагента;
	СчетРасчетов  = ТаблицаВзаиморасчетов[0].СчетРасчетов;
	
	СпособПереоценкиСчетаРасчетов = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ОсобыйПорядокПереоценкиСчета(СчетРасчетов);	
	ПереоцениватьСчетРасчетов	  = ТаблицаВзаиморасчетов[0].РасчетыВВалюте И НЕ (СпособПереоценкиСчетаРасчетов = Перечисления.СпособыПризнанияКурсовойРазницы.НеРассчитывать ИЛИ СпособПереоценкиСчетаРасчетов = Перечисления.СпособыПризнанияКурсовойРазницы.Регламентно)
									И НЕ Реквизиты.ЭтоВозврат;
	
	Если Не ПереоцениватьСчетРасчетов Тогда
		Возврат;
	КонецЕсли;
		
	Для Каждого СтрокаРасчетов Из ТаблицаВзаиморасчетов Цикл
		
		ЗачетПоКурсуАванса = (ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ОсобыйПорядокПереоценкиСчета(СтрокаРасчетов.СчетАвансов) = Перечисления.СпособыПризнанияКурсовойРазницы.НеРассчитывать);
		
		Если СтрокаРасчетов.РасчетыВВалюте И ЗачетПоКурсуАванса Тогда
			СуммаКорректировкиРазницы = СуммаКорректировкиРазницы + СтрокаРасчетов.СуммаРеглПоКурсуАванса - СтрокаРасчетов.СуммаРегл;
		КонецЕсли;
	КонецЦикла;
	
	Если СуммаКорректировкиРазницы <> 0 Тогда
				
		ТаблицаПереоценка = Новый ТаблицаЗначений;
		ТаблицаПереоценка.Колонки.Добавить("Счет",                     Новый ОписаниеТипов("ПланСчетовСсылка.Типовой"));
		ТаблицаПереоценка.Колонки.Добавить("СчетПредставление",     ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповСтроки(8));
		ТаблицаПереоценка.Колонки.Добавить("СчетНаименование",      ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповСтроки(120));
		ТаблицаПереоценка.Колонки.Добавить("Субконто1");
		ТаблицаПереоценка.Колонки.Добавить("Субконто2");
		ТаблицаПереоценка.Колонки.Добавить("Субконто3");
		ТаблицаПереоценка.Колонки.Добавить("Валюта",                   Новый ОписаниеТипов("СправочникСсылка.Валюты"));
		ТаблицаПереоценка.Колонки.Добавить("ВалютаПредставление",   ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповСтроки(10));
		ТаблицаПереоценка.Колонки.Добавить("СуммаВВалюте",          ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
		ТаблицаПереоценка.Колонки.Добавить("Сумма",       	     	ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
		ТаблицаПереоценка.Колонки.Добавить("КурсПереоценки",        ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(10, 4));
		ТаблицаПереоценка.Колонки.Добавить("СуммаПереоценки",       ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2)); 	
		ТаблицаПереоценка.Колонки.Добавить("СуммаНУ",            	ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
		ТаблицаПереоценка.Колонки.Добавить("СуммаПР",            	ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
		ТаблицаПереоценка.Колонки.Добавить("СуммаВТенге",           ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
		ТаблицаПереоценка.Колонки.Добавить("СуммаВТенгеНУ",         ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
		ТаблицаПереоценка.Колонки.Добавить("СуммаВТенгеПР",         ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
				
		НоваяСтрока =  ТаблицаПереоценка.Добавить();
		НоваяСтрока.Счет      = СчетРасчетов;
		НоваяСтрока.Субконто1 = Контрагент;
		НоваяСтрока.Субконто2 = ДоговорКонтрагента;
		НоваяСтрока.Субконто3 = Реквизиты.Регистратор;
		НоваяСтрока.Валюта    = Реквизиты.ВалютаДокумента;
		
		Если Реквизиты.НаправлениеДвижения = "Поступление" Тогда
			НоваяСтрока.СуммаПереоценки = - СуммаКорректировкиРазницы;
		Иначе
			НоваяСтрока.СуммаПереоценки = СуммаКорректировкиРазницы;
		КонецЕсли;
			
		// Для возвратов еще раз меняем знак
		Если Реквизиты.ЭтоВозврат Тогда
			НоваяСтрока.СуммаПереоценки = - НоваяСтрока.СуммаПереоценки;
		КонецЕсли; 
		
		УчетДоходовРасходов.СформироватьДвиженияПереоценкаВалютныхОстатков(ТаблицаПереоценка,
				ТаблицаРеквизиты, Движения, Отказ);

	КонецЕсли;
	
КонецПроцедуры
		

// Формируются проводки зачета авансов по расчетам с поставщиками и покупателями.
// Вызывается при проведении документов поступления и реализации.
//
// Параметры
//  ТаблицаВзаиморасчетов - <ТаблицаЗначений> - таблица с данными по зачету авансов в разрезе документов расчетов.
//                          Создается функцией ПодготовитьТаблицуВзаиморасчетовЗачетАвансов
//  ТаблицаРеквизиты      - <ТаблицаЗначений> - реквизиты, необходимые для формирования движений.
//                          Структура таблицы описана в функции ПодготовитьПараметрыЗачетАвансов
//  Движения              - коллекция движений документа
//  Отказ                 - <Булево> - флаг отказа от проведения
//
Процедура СформироватьДвиженияЗачетАвансов(ТаблицаВзаиморасчетов, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыЗачетАвансов(ТаблицаВзаиморасчетов, ТаблицаРеквизиты);

	Если Параметры.Реквизиты.Количество() = 0
		ИЛИ Параметры.Взаиморасчеты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Реквизиты = Параметры.Реквизиты[0];
	
	ДтКтРасчетов = ?(Реквизиты.НаправлениеДвижения = "Поступление", "Дт", "Кт");
	ДтКтАвансов  = ?(ДтКтРасчетов = "Дт", "Кт", "Дт");

	ЭтоВозвратОтПокупателя = Реквизиты.ЭтоВозврат И (Реквизиты.НаправлениеДвижения = "Поступление");
	
	ЕстьСодержание = Параметры.Взаиморасчеты.Колонки.Найти("Содержание") <> Неопределено;
	
	Для Каждого СтрокаВзаиморасчетов Из Параметры.Взаиморасчеты Цикл
		
		СодержаниеОперации = СодержаниеПроводокПоЗачетуАвансов(
			Реквизиты.НаправлениеДвижения, Реквизиты.ЭтоВозврат, СтрокаВзаиморасчетов.ВидДоговора);
			
		Если (СтрокаВзаиморасчетов.ДокументРасчетов = Реквизиты.Регистратор) Тогда
			Продолжить;
		КонецЕсли;
		
		// при зачете валютного аванса для немонетарного счета используем средний курс аванса
		// иначе на счете зависнут суммы тенгового покрытия
		ЗачетПоКурсуАванса = (ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ОсобыйПорядокПереоценкиСчета(СтрокаВзаиморасчетов.СчетАвансов) = Перечисления.СпособыПризнанияКурсовойРазницы.НеРассчитывать);
		
		Проводка = Движения.Типовой.Добавить();
		
		Проводка.Период       = Реквизиты.Период;
		Проводка.Организация  = Реквизиты.Организация;
		Проводка.Содержание   = ?(ЕстьСодержание И ЗначениеЗаполнено(СтрокаВзаиморасчетов.Содержание), СтрокаВзаиморасчетов.Содержание, СодержаниеОперации);
		Проводка.НомерЖурнала = СтрокаВзаиморасчетов.НомерЖурнала;
		
		Проводка["Счет" + ДтКтРасчетов] = СтрокаВзаиморасчетов.СчетРасчетов;
		
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка["Счет" + ДтКтРасчетов], Проводка["Субконто" + ДтКтРасчетов], "Контрагенты", СтрокаВзаиморасчетов.Контрагент);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка["Счет" + ДтКтРасчетов], Проводка["Субконто" + ДтКтРасчетов], "Договоры", СтрокаВзаиморасчетов.ДоговорКонтрагента);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка["Счет" + ДтКтРасчетов], Проводка["Субконто" + ДтКтРасчетов], "ДокументыРасчетовСКонтрагентами", Реквизиты.Регистратор);
		
		СвойстваСчетаРасчетов = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка["Счет" + ДтКтРасчетов]);
		Если СвойстваСчетаРасчетов.Валютный Тогда
			Проводка["Валюта" + ДтКтРасчетов]        = СтрокаВзаиморасчетов.ВалютаВзаиморасчетов;
			Проводка["ВалютнаяСумма" + ДтКтРасчетов] = СтрокаВзаиморасчетов.СуммаВзаиморасчетов;
		КонецЕсли;
		
		Проводка["Счет" + ДтКтАвансов] = СтрокаВзаиморасчетов.СчетАвансов;
		
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка["Счет" + ДтКтАвансов], Проводка["Субконто" + ДтКтАвансов], "Контрагенты", СтрокаВзаиморасчетов.Контрагент);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка["Счет" + ДтКтАвансов], Проводка["Субконто" + ДтКтАвансов], "Договоры", СтрокаВзаиморасчетов.ДоговорКонтрагента);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка["Счет" + ДтКтАвансов], Проводка["Субконто" + ДтКтАвансов], "ДокументыРасчетовСКонтрагентами", СтрокаВзаиморасчетов.ДокументРасчетов);
		
		СвойстваСчетаАвансов = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка["Счет" + ДтКтАвансов]);
		Если СвойстваСчетаАвансов.Валютный Тогда
			Проводка["Валюта" + ДтКтАвансов]        = СтрокаВзаиморасчетов.ВалютаВзаиморасчетов;
			Проводка["ВалютнаяСумма" + ДтКтАвансов] = СтрокаВзаиморасчетов.СуммаВзаиморасчетов;
		Конецесли;
		
		Если СтрокаВзаиморасчетов.РасчетыВВалюте И (ЗачетПоКурсуАванса ИЛИ Реквизиты.ЭтоВозврат) Тогда
			Проводка.Сумма = СтрокаВзаиморасчетов.СуммаРеглПоКурсуАванса;
		Иначе
			Проводка.Сумма = СтрокаВзаиморасчетов.СуммаРегл;
		КонецЕсли;
		
		ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
			Проводка, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);
		
	КонецЦикла;

	Движения.Типовой.Записывать = Истина;
	
	ОпределятьСтоимостьПриобретенияПоКурсуАванса = УчетнаяПолитикаСервер.ОпределятьСтоимостьПриобретенияПоКурсуАванса(Реквизиты.Организация, Реквизиты.Период);
	ОпределятьДоходОтРеализацииПоКурсуАванса     = УчетнаяПолитикаСервер.ОпределятьДоходОтРеализацииПоКурсуАванса(Реквизиты.Организация, Реквизиты.Период);
	
	Если  НЕ ((Реквизиты.НаправлениеДвижения = "Поступление" И НЕ Реквизиты.ЭтоВозврат) И ОпределятьСтоимостьПриобретенияПоКурсуАванса)
		И НЕ ((Реквизиты.НаправлениеДвижения = "Выбытие" И НЕ Реквизиты.ЭтоВозврат) И ОпределятьДоходОтРеализацииПоКурсуАванса) Тогда 
		СформироватьДвиженияПоВалютнойРазницеЗачтенныхАвансов(ТаблицаВзаиморасчетов, ТаблицаРеквизиты, Движения, Отказ);
	КонецЕсли; 	
	
КонецПроцедуры

// ПОГАШЕНИЕ ЗАДОЛЖЕННОСТИ - ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Готовится таблица для формирования проводок погашения задолженности по расчетам с поставщиками и покупателями,
// на основании данных документа и остатков по счету расчетов на момент проведения.
// Вызывается при проведении документов движения денежных средств,
// а также других документов, погашающих задолженность.
//
// Параметры
//  РасшифровкаПлатежа - <ТаблицаЗначений> - данные табличной части документа, по которым определяется, какие движения будут сформированы.
//                       Создается в модуле менеджера документа
//  ТаблицаРеквизиты   - <ТаблицаЗначений> - реквизиты, необходимые для формирования движений.
//                       Создается в модуле менеджера документа
//  Отказ  - <Булево> - флаг отказа от проведения
//
Функция ПодготовитьТаблицуВзаиморасчетовПогашениеЗадолженности(РасшифровкаПлатежа, ТаблицаРеквизиты, Отказ, ВидДокумента = Неопределено) Экспорт

	Параметры = ПодготовитьПараметрыТаблицыВзаиморасчетовПогашениеЗадолженности(РасшифровкаПлатежа, ТаблицаРеквизиты, ВидДокумента);

	ТаблицаВзаиморасчетов = ПустаяТаблицаВзаиморасчетовПогашениеЗадолженности(ВидДокумента);

	Если Параметры.РасшифровкаПлатежа.Количество() = 0 Тогда
		Возврат ТаблицаВзаиморасчетов;
	КонецЕсли;
	
	Реквизиты = Параметры.Реквизиты[0];

	ОстаткиЗадолженности = ПолучитьОстаткиЗадолженности(Параметры.РасшифровкаПлатежа, Реквизиты, Отказ);

	Для каждого СтрокаПлатежа Из Параметры.РасшифровкаПлатежа Цикл

       		НераспределенныйОстаток   = СтрокаПлатежа.СуммаВзаиморасчетов;
		НераспределенныйОстатокБУ = СтрокаПлатежа.СуммаРегл;
		
		ДобавитьСтрокиПогашенияЗадолженности(
			ТаблицаВзаиморасчетов,
			НераспределенныйОстаток,
			НераспределенныйОстатокБУ,
			ОстаткиЗадолженности,
			СтрокаПлатежа,
			Реквизиты,
			Отказ);

		ДобавитьСтрокуАванса(
			ТаблицаВзаиморасчетов,
			НераспределенныйОстаток,
			НераспределенныйОстатокБУ,
			СтрокаПлатежа,
			Реквизиты);

	КонецЦикла;

	ТаблицаВзаиморасчетов.Индексы.Добавить("СчетРасчетов, Контрагент, ДоговорКонтрагента, ДокументРасчетов");

	Для каждого СтрокаОстатка Из ОстаткиЗадолженности Цикл

		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("СчетРасчетов",       СтрокаОстатка.СчетРасчетов);
		СтруктураОтбора.Вставить("Контрагент",         СтрокаОстатка.Контрагент);
		СтруктураОтбора.Вставить("ДоговорКонтрагента", СтрокаОстатка.ДоговорКонтрагента);
		СтруктураОтбора.Вставить("ДокументРасчетов",   СтрокаОстатка.ДокументРасчетов);

		СтрокиРаспределения = ТаблицаВзаиморасчетов.НайтиСтроки(СтруктураОтбора);
		ИтогоСуммаВзаиморасчетов = 0;
		Для каждого СтрокаРаспределения Из СтрокиРаспределения Цикл
			ИтогоСуммаВзаиморасчетов = ИтогоСуммаВзаиморасчетов + СтрокаРаспределения.СуммаВзаиморасчетов;
		КонецЦикла;

		Для каждого СтрокаРаспределения Из СтрокиРаспределения Цикл
			СтрокаРаспределения.ОстатокВзаиморасчетов = Окр(
				СтрокаОстатка.ОстатокВзаиморасчетов * СтрокаРаспределения.СуммаВзаиморасчетов / ИтогоСуммаВзаиморасчетов, 2);
			СтрокаОстатка.ОстатокВзаиморасчетов = СтрокаОстатка.ОстатокВзаиморасчетов - СтрокаРаспределения.ОстатокВзаиморасчетов;
			ИтогоСуммаВзаиморасчетов            = ИтогоСуммаВзаиморасчетов - СтрокаРаспределения.СуммаВзаиморасчетов;
		КонецЦикла;

	КонецЦикла;

	Возврат ТаблицаВзаиморасчетов;

КонецФункции

// Формируются проводки погашения задолженности по расчетам с поставщиками и покупателями.
// Вызывается при проведении документов движения денежных средств,
// а также других документов, погашающих задолженность.
//
// Параметры
//  ТаблицаВзаиморасчетов - <ТаблицаЗначений> - таблица с данными по погашению задолженности в разрезе документов расчетов.
//                          Создается функцией ПодготовитьТаблицуВзаиморасчетовПогашениеЗадолженности
//                          Используются колонки, описанные в функции ПодготовитьПараметрыПогашениеЗадолженности
//  ТаблицаРеквизиты      - <ТаблицаЗначений> - реквизиты, необходимые для формирования движений.
//                          Структура таблицы описана в функции ПодготовитьПараметрыПогашениеЗадолженности
//  Движения              - коллекция движений документа
//  Отказ                 - <Булево> - флаг отказа от проведения
//
Процедура СформироватьДвиженияПогашениеЗадолженности(ТаблицаВзаиморасчетов, ТаблицаРеквизиты, Движения, Отказ, СворачиватьПроводки = Истина) Экспорт

	Параметры = ПодготовитьПараметрыПогашениеЗадолженности(ТаблицаВзаиморасчетов, ТаблицаРеквизиты);

	Если Параметры.Взаиморасчеты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Реквизиты = Параметры.Реквизиты[0];

	ДтКтРасчетов = ?(Реквизиты.НаправлениеДвижения = "Поступление", "Кт", "Дт");
	ДтКтКорСчета = ?(ДтКтРасчетов = "Кт", "Дт", "Кт");

	Для каждого СтрокаВзаиморасчетов Из Параметры.Взаиморасчеты Цикл

		// Основная проводка по счету расчетов

		Проводка = Движения.Типовой.Добавить();

		Проводка.Период       = Реквизиты.Период;
		Проводка.Организация  = Реквизиты.Организация;
		Проводка.Содержание   = СтрокаВзаиморасчетов.Содержание;

		Проводка.Сумма = СтрокаВзаиморасчетов.СуммаРегл;

		Проводка["Счет" + ДтКтРасчетов] = СтрокаВзаиморасчетов.СчетРасчетов;

		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка["Счет" + ДтКтРасчетов], Проводка["Субконто" + ДтКтРасчетов],
			"Контрагенты", СтрокаВзаиморасчетов.Контрагент);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка["Счет" + ДтКтРасчетов], Проводка["Субконто" + ДтКтРасчетов],
			"Договоры", СтрокаВзаиморасчетов.ДоговорКонтрагента);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка["Счет" + ДтКтРасчетов], Проводка["Субконто" + ДтКтРасчетов],
			"ДокументыРасчетовСКонтрагентами", СтрокаВзаиморасчетов.ДокументРасчетов);

		СвойстваСчетаРасчетов = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка["Счет" + ДтКтРасчетов]);
		Если СвойстваСчетаРасчетов.Валютный Тогда
			Проводка["Валюта" + ДтКтРасчетов]        = СтрокаВзаиморасчетов.ВалютаВзаиморасчетов;
			Проводка["ВалютнаяСумма" + ДтКтРасчетов] = СтрокаВзаиморасчетов.СуммаВзаиморасчетов;
		КонецЕсли;
		
		Проводка["Счет" + ДтКтКорСчета] = СтрокаВзаиморасчетов.КорСчет;

		Для Ном = 1 по 3 Цикл
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка["Счет" + ДтКтКорСчета], Проводка["Субконто" + ДтКтКорСчета],
				Ном, СтрокаВзаиморасчетов["КорСубконто" + Ном]);
		КонецЦикла;

		СвойстваКорСчета = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка["Счет" + ДтКтКорСчета]);
		Если СвойстваКорСчета.Валютный Тогда
			Проводка["Валюта" + ДтКтКорСчета]        = Реквизиты.ВалютаДокумента;
			Проводка["ВалютнаяСумма" + ДтКтКорСчета] = СтрокаВзаиморасчетов.СуммаВзаиморасчетов;
		КонецЕсли;
		
		ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
			Проводка, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);
			
		Если Реквизиты.НеобходимостьОтраженияВНУ Тогда
			
			ПроводкаНУ = Движения.Налоговый.Добавить();

			ПроводкаНУ.Период       = Реквизиты.Период;
			ПроводкаНУ.Организация  = Реквизиты.Организация;
			
			ПроводкаНУ.Сумма = СтрокаВзаиморасчетов.СуммаРегл;

			ПроводкаНУ["Счет" + ДтКтРасчетов] = СтрокаВзаиморасчетов.СчетРасчетовНУ;

			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ["Счет" + ДтКтРасчетов], ПроводкаНУ["Субконто" + ДтКтРасчетов],
				"Контрагенты", СтрокаВзаиморасчетов.Контрагент);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ["Счет" + ДтКтРасчетов], ПроводкаНУ["Субконто" + ДтКтРасчетов],
				"Договоры", СтрокаВзаиморасчетов.ДоговорКонтрагента);
						
			ПроводкаНУ["Счет" + ДтКтКорСчета] = СтрокаВзаиморасчетов.КорСчетНУ;

			Для Ном = 1 по 3 Цикл
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ["Счет" + ДтКтКорСчета], ПроводкаНУ["Субконто" + ДтКтКорСчета],
					Ном, СтрокаВзаиморасчетов["КорСубконтоНУ" + Ном]);
			КонецЦикла;

			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				ПроводкаНУ, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);

			//в БУ содержание м.б ."Оплата", "Оплата (аванс)" в зависимости от вида платежа,
			//а в НУ только "Оплата"
			ПроводкаНУ.Содержание = ?(Найти(СтрокаВзаиморасчетов.Содержание,  НСтр("ru = 'Оплата'", ОбщегоНазначения.КодОсновногоЯзыка())),  НСтр("ru = 'Оплата'", ОбщегоНазначения.КодОсновногоЯзыка()), СтрокаВзаиморасчетов.Содержание);

			ПроцедурыНалоговогоУчета.ВидУчетаНУ(ПроводкаНУ, Реквизиты.ВидУчетаНУ);
			
		КонецЕсли;

	КонецЦикла;

	Движения.Типовой.Записывать = Истина;
	
	Если Реквизиты.НеобходимостьОтраженияВНУ  Тогда
		
		Если СворачиватьПроводки Тогда
			
			//свертка движения регистра бухгалтерии "Налоговый"
			
			//колонки таблицы значений, которые будут суммироваться
			СтрокаСуммированиеНУ = "Сумма, КоличествоДт, КоличествоКт";
			
			ТаблицаДвиженийНалоговый = Движения.Налоговый.ВыгрузитьКолонки();
			
			//колонки таблицы значений, по которым будет выполняться группировка
			СтрокаГруппировкаНУ = "";
			Для Каждого Колонка Из ТаблицаДвиженийНалоговый.Колонки Цикл
				
				Если (Найти(СтрокаСуммированиеНУ, Колонка.Имя) = 0) И (Колонка.Имя <> "НомерСтроки") Тогда
					СтрокаГруппировкаНУ = СтрокаГруппировкаНУ + ?(ПустаяСтрока(СтрокаГруппировкаНУ),"", ", ") + Колонка.Имя;
				КонецЕсли;	
				
			КонецЦикла;
			
			ОбщегоНазначенияБК.СвернутьНаборЗаписейРегистраБухгалтерии(Движения.Налоговый, СтрокаГруппировкаНУ, СтрокаСуммированиеНУ);
			
		КонецЕсли;
		
		Движения.Налоговый.Записывать = Истина;
		
	КонецЕсли;

КонецПроцедуры

// КОРРЕКТИРОВКА ДОЛГА  - ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция ПодготовитьТаблицуВзаиморасчетовЗадолженностиКорректировкаДолга(ТаблицаВзаиморасчетов, ТаблицаРеквизиты, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыТаблицыВзаиморасчетовЗадолженностиКорректировкаДолга(ТаблицаВзаиморасчетов, ТаблицаРеквизиты);

	Реквизиты = Параметры.Реквизиты[0];

	ТаблицаЗадолженности = ПустаяТаблицаВзаиморасчетовЗадолженностиКорретировкаДолга();

	ВалютаРеглУчета = Константы.ВалютаРегламентированногоУчета.Получить();

	Для Каждого СтрокаВзаиморасчетов ИЗ Параметры.Взаиморасчеты Цикл
		
		Если СтрокаВзаиморасчетов.ВалютаВзаиморасчетовСПолучателем = ВалютаРеглУчета Тогда
			КурсВалюты      = 1;
			КратностьВалюты = 1;
		Иначе
			ПараметрыКурса  = ОбщегоНазначенияБК.ПолучитьКурсВалюты(СтрокаВзаиморасчетов.ВалютаВзаиморасчетовСПолучателем, Реквизиты.Период);
			КурсВалюты      = ПараметрыКурса.Курс;
			КратностьВалюты = ПараметрыКурса.Кратность;
		КонецЕсли;

		СтрокаЗадолженности = ТаблицаЗадолженности.Добавить();

		ЗаполнитьЗначенияСвойств(СтрокаЗадолженности, СтрокаВзаиморасчетов);
		
		Если СтрокаВзаиморасчетов.ВалютаВзаиморасчетовСПолучателем = СтрокаВзаиморасчетов.ВалютаВзаиморасчетов 
			ИЛИ Реквизиты.ВидОперации <> Перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности Тогда
			
			СтрокаЗадолженности.КорВалютаВзаиморасчетов = СтрокаВзаиморасчетов.ВалютаВзаиморасчетов;			
			СтрокаЗадолженности.КорСуммаВзаиморасчетов  = СтрокаВзаиморасчетов.СуммаВзаиморасчетов;

		Иначе   
			СтрокаЗадолженности.КорВалютаВзаиморасчетов = СтрокаВзаиморасчетов.ВалютаВзаиморасчетовСПолучателем;
			СтрокаЗадолженности.КорСуммаВзаиморасчетов = ОбщегоНазначенияБККлиентСервер.ПересчитатьИзВалютыВВалюту(
																			СтрокаВзаиморасчетов.СуммаРегл,
																			ВалютаРеглУчета, СтрокаВзаиморасчетов.ВалютаВзаиморасчетовСПолучателем,
																			1, КурсВалюты,
																			1, КратностьВалюты); 
		КонецЕсли;

	КонецЦикла;

	Возврат ТаблицаЗадолженности;

КонецФункции

Процедура СформироватьДвиженияЗадолженностиКорректировкаДолга(ТаблицаВзаиморасчетов, ТаблицаРеквизиты, Движения, Отказ, ПереносЗадолженности = Ложь, ТаблицаСписаниеЗадолженностиНУ = Неопределено) Экспорт

	Параметры = ПодготовитьПараметрыЗадолженностиКорректировкаДолга(ТаблицаВзаиморасчетов, ТаблицаРеквизиты, ПереносЗадолженности);

	Если Параметры.Взаиморасчеты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Реквизиты = Параметры.Реквизиты[0];
	
	ДтКтРасчетов = ?(Реквизиты.НаправлениеДвижения = "Поступление", "Кт", "Дт");
	ДтКтКорСчета = ?(ДтКтРасчетов = "Кт", "Дт", "Кт");

	
	Если Реквизиты.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета Тогда
		ВалютаРеглУчета = ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета()
	КонецЕсли;	
	
	Для Каждого СтрокаВзаиморасчетов Из Параметры.Взаиморасчеты Цикл

		// Основная проводка по счету расчетов
		Проводка = Движения.Типовой.Добавить();

		Проводка.Период       = Реквизиты.Период;
		Проводка.Организация  = Реквизиты.Организация;
		Проводка.Содержание   = СтрокаВзаиморасчетов.Содержание;

		Проводка.Сумма = СтрокаВзаиморасчетов.СуммаРегл;

		Проводка["Счет" + ДтКтРасчетов] = СтрокаВзаиморасчетов.СчетРасчетов;

		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка["Счет" + ДтКтРасчетов], Проводка["Субконто" + ДтКтРасчетов],
			"Контрагенты", СтрокаВзаиморасчетов.Контрагент);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка["Счет" + ДтКтРасчетов], Проводка["Субконто" + ДтКтРасчетов],
			"Договоры", СтрокаВзаиморасчетов.ДоговорКонтрагента);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка["Счет" + ДтКтРасчетов], Проводка["Субконто" + ДтКтРасчетов],
			"ДокументыРасчетовСКонтрагентами", СтрокаВзаиморасчетов.ДокументРасчетов);

		СвойстваСчетаРасчетов = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка["Счет" + ДтКтРасчетов]);
		Если СвойстваСчетаРасчетов.Валютный Тогда
			Если Реквизиты.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета Тогда					
				ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаВзаиморасчетов.ДоговорКонтрагента, "ВалютаВзаиморасчетов");
				Если ЗначенияРеквизитов.ВалютаВзаиморасчетов = ВалютаРеглУчета Тогда
					Проводка["Валюта" + ДтКтРасчетов]        = ВалютаРеглУчета;
					Проводка["ВалютнаяСумма" + ДтКтРасчетов] = СтрокаВзаиморасчетов.СуммаРегл;
				Иначе
					Проводка["Валюта" + ДтКтРасчетов]        = ЗначенияРеквизитов.ВалютаВзаиморасчетов;
					Проводка["ВалютнаяСумма" + ДтКтРасчетов] = СтрокаВзаиморасчетов.СуммаВзаиморасчетов;
				КонецЕсли;	
			Иначе	
				Проводка["Валюта" + ДтКтРасчетов]        = СтрокаВзаиморасчетов.ВалютаВзаиморасчетов;
				Проводка["ВалютнаяСумма" + ДтКтРасчетов] = СтрокаВзаиморасчетов.СуммаВзаиморасчетов;
			КонецЕсли;	
		КонецЕсли;
		           		
		Проводка["Счет" + ДтКтКорСчета] = СтрокаВзаиморасчетов.КорСчет;

		Для Ном = 1 по 3 Цикл
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка["Счет" + ДтКтКорСчета], Проводка["Субконто" + ДтКтКорСчета],
				Ном, СтрокаВзаиморасчетов["КорСубконто" + Ном]);
		КонецЦикла;
		
		СвойстваКорСчета = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка["Счет" + ДтКтКорСчета]);
		
		Если НЕ ПереносЗадолженности Тогда 			
			Если СвойстваКорСчета.Валютный Тогда
				Если Реквизиты.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета 
					И Не Реквизиты.ИспользоватьВспомогательныйСчет Тогда					
					
					ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаВзаиморасчетов.КорСубконто2, "ВалютаВзаиморасчетов");
					Если ЗначенияРеквизитов.ВалютаВзаиморасчетов = ВалютаРеглУчета Тогда
						Проводка["Валюта" + ДтКтКорСчета]        = ВалютаРеглУчета;
						Проводка["ВалютнаяСумма" + ДтКтКорСчета] = СтрокаВзаиморасчетов.СуммаРегл;
					Иначе
						Проводка["Валюта" + ДтКтКорСчета]        = ЗначенияРеквизитов.ВалютаВзаиморасчетов;
						Проводка["ВалютнаяСумма" + ДтКтКорСчета] = СтрокаВзаиморасчетов.СуммаВзаиморасчетов;
					КонецЕсли;	
			
				Иначе 
					Проводка["Валюта" + ДтКтКорСчета]        = Реквизиты.ВалютаДокумента;
					Проводка["ВалютнаяСумма" + ДтКтКорСчета] = СтрокаВзаиморасчетов.СуммаВзаиморасчетов;
					
				КонецЕсли;	
			КонецЕсли;
			
		Иначе
			Если СвойстваКорСчета.Валютный Тогда
				Проводка["Валюта" + ДтКтКорСчета]        = СтрокаВзаиморасчетов.КорВалютаВзаиморасчетов;
				Проводка["ВалютнаяСумма" + ДтКтКорСчета] = СтрокаВзаиморасчетов.КорСуммаВзаиморасчетов;
			КонецЕсли;
		КонецЕсли;
		          		
		ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
		Проводка, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);
		
		Если Реквизиты.НеобходимостьОтраженияВНУ Тогда
			
			Если Реквизиты.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета
				И СтрокаВзаиморасчетов.ДоговорКонтрагента = СтрокаВзаиморасчетов.КорСубконтоНУ2 Тогда 				
				СуммаНУ = 0 
			ИначеЕсли Реквизиты.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.СписаниеЗадолженности Тогда 
				Продолжить;
			Иначе
				СуммаНУ = СтрокаВзаиморасчетов.СуммаРегл;
			КонецЕсли; 		
			
			Если СуммаНУ = 0 Тогда
				Продолжить;
			КонецЕсли;     		
			
			ПроводкаНУ = Движения.Налоговый.Добавить();
			
			ПроводкаНУ.Период       = Реквизиты.Период;
			ПроводкаНУ.Организация  = Реквизиты.Организация;
			
			Если Реквизиты.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.СписаниеЗадолженности Тогда
				ПроводкаНУ.Сумма = СтрокаВзаиморасчетов.СуммаНУ;
			Иначе
				ПроводкаНУ.Сумма = СтрокаВзаиморасчетов.СуммаРегл;
			КонецЕсли;  			
			
			ПроводкаНУ["Счет" + ДтКтРасчетов] = СтрокаВзаиморасчетов.СчетРасчетовНУ;
			
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ["Счет" + ДтКтРасчетов], ПроводкаНУ["Субконто" + ДтКтРасчетов],
			"Контрагенты", СтрокаВзаиморасчетов.Контрагент);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ["Счет" + ДтКтРасчетов], ПроводкаНУ["Субконто" + ДтКтРасчетов],
			"Договоры", СтрокаВзаиморасчетов.ДоговорКонтрагента);
			
			ПроводкаНУ["Счет" + ДтКтКорСчета] = СтрокаВзаиморасчетов.КорСчетНУ;
			
			Для Ном = 1 по 3 Цикл
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ["Счет" + ДтКтКорСчета], ПроводкаНУ["Субконто" + ДтКтКорСчета],
				Ном, СтрокаВзаиморасчетов["КорСубконтоНУ" + Ном]);
			КонецЦикла;
			
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
			ПроводкаНУ, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);
			
			ПроводкаНУ.Содержание = СтрокаВзаиморасчетов.Содержание;
			
			ПроцедурыНалоговогоУчета.ВидУчетаНУ(ПроводкаНУ, Реквизиты.ВидУчетаНУ);		
		КонецЕсли; 			
	КонецЦикла;

	//для операции списания задолженности Сумма НУ выводится в документе отдельно, проводки по ней формируются по данным табличной части 
	Если Реквизиты.НеобходимостьОтраженияВНУ И Реквизиты.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.СписаниеЗадолженности Тогда
		Для Каждого СтрокаВзаиморасчетов Из ТаблицаСписаниеЗадолженностиНУ Цикл
			
			Если СтрокаВзаиморасчетов.СуммаНУ = 0 Тогда
				Продолжить;
			КонецЕсли;     		
			
			ПроводкаНУ = Движения.Налоговый.Добавить();
			
			ПроводкаНУ.Период       = Реквизиты.Период;
			ПроводкаНУ.Организация  = Реквизиты.Организация;
			
			ПроводкаНУ.Сумма = СтрокаВзаиморасчетов.СуммаНУ;
			
			ПроводкаНУ["Счет" + ДтКтРасчетов] = СтрокаВзаиморасчетов.СчетРасчетовНУ;
			
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ["Счет" + ДтКтРасчетов], ПроводкаНУ["Субконто" + ДтКтРасчетов],
			"Контрагенты", СтрокаВзаиморасчетов.Контрагент);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ["Счет" + ДтКтРасчетов], ПроводкаНУ["Субконто" + ДтКтРасчетов],
			"Договоры", СтрокаВзаиморасчетов.ДоговорКонтрагента);
			
			ПроводкаНУ["Счет" + ДтКтКорСчета] = СтрокаВзаиморасчетов.КорСчетНУ;
			
			Для Ном = 1 по 3 Цикл
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ["Счет" + ДтКтКорСчета], ПроводкаНУ["Субконто" + ДтКтКорСчета],
				Ном, СтрокаВзаиморасчетов["КорСубконтоНУ" + Ном]);
			КонецЦикла;
			
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
			ПроводкаНУ, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);
			
			ПроводкаНУ.Содержание = СтрокаВзаиморасчетов.Содержание;
			
			ПроцедурыНалоговогоУчета.ВидУчетаНУ(ПроводкаНУ, Реквизиты.ВидУчетаНУ);
		КонецЦикла;
	КонецЕсли;
				
	Движения.Типовой.Записывать = Истина;
	Если Реквизиты.НеобходимостьОтраженияВНУ Тогда
		Движения.Налоговый.Записывать = Истина;
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция ДокументСодержитДанныеДляПересчета(ФормаДокумента)
	
	Пересчитать = Ложь;
	
	Если ФормаДокумента.Объект.Ссылка.Метаданные().Реквизиты.Найти("Сумма") <> Неопределено Тогда
		Пересчитать = Истина;
	Иначе
		КоллекцияТабличныхЧастстей = ФормаДокумента.Объект.Ссылка.Метаданные().ТабличныеЧасти;
		Для Каждого ТабличнаяЧасть Из КоллекцияТабличныхЧастстей Цикл
			Если ФормаДокумента.Объект[ТабличнаяЧасть.Имя].Количество() > 0 Тогда
				Пересчитать = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Пересчитать;
	
КонецФункции

Функция ТекстВопросаПересчитатьДокументПоДоговору(Знач ФормаДокумента, Знач РеквизитыДоговора)
	
	ТекстВопроса = "";
	
	Объект = ФормаДокумента.Объект;
	
	ОтличаетсяТипЦен = Объект.Свойство("ТипЦен") И Объект.ТипЦен <> РеквизитыДоговора.ТипЦен; 
	ОтличаетсяВалюта = Объект.Свойство("ВалютаДокумента") И Объект.ВалютаДокумента <> РеквизитыДоговора.ВалютаВзаиморасчетов; 
	
	Если ОтличаетсяТипЦен Или ОтличаетсяВалюта Тогда
		
		Если ОтличаетсяТипЦен Тогда
			Если Не ЗначениеЗаполнено(Объект.ТипЦен) И Не ЗначениеЗаполнено(РеквизитыДоговора.ТипЦен) Тогда
				ОтличияТипЦен = НСтр("ru = 'Тип цен документа: ""Не задан"", договора: ""Не задан"".'") + Символы.ПС;
			Иначе
				Если Не ЗначениеЗаполнено(Объект.ТипЦен) Тогда
					ОтличияТипЦен = НСтр("ru = 'Тип цен документа: ""Не задан"", договора: ""%2"".'");
				ИначеЕсли Не ЗначениеЗаполнено(РеквизитыДоговора.ТипЦен) Тогда
					ОтличияТипЦен = НСтр("ru = 'Тип цен документа: ""%1"", договора: ""Не задан"".'");
				Иначе
					ОтличияТипЦен = НСтр("ru = 'Тип цен документа: ""%1"", договора: ""%2"".'");
				КонецЕсли;
				ОтличияТипЦен = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ОтличияТипЦен, Объект.ТипЦен, РеквизитыДоговора.ТипЦен) + Символы.ПС;
			КонецЕсли;
		Иначе
			ОтличияТипЦен = "";
		КонецЕсли;
		
		Если ОтличаетсяВалюта Тогда
			Если Не ЗначениеЗаполнено(Объект.ВалютаДокумента) И Не ЗначениеЗаполнено(РеквизитыДоговора.ВалютаВзаиморасчетов) Тогда
				ОтличияВалюта = НСтр("ru = 'Валюта документа: ""Не задана"", договора: ""Не задана"".'") + Символы.ПС;
			Иначе
				Если Не ЗначениеЗаполнено(Объект.ВалютаДокумента) Тогда
					ОтличияВалюта = НСтр("ru = 'Валюта документа: ""Не задана"", договора: ""%2"".'");
				ИначеЕсли Не ЗначениеЗаполнено(РеквизитыДоговора.ВалютаВзаиморасчетов) Тогда
					ОтличияВалюта = НСтр("ru = 'Валюта документа: ""%1"", договора: ""Не задана"".'");
				Иначе
					ОтличияВалюта = НСтр("ru = 'Валюта документа: ""%1"", договора: ""%2"".'");
				КонецЕсли;
				ОтличияВалюта = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ОтличияВалюта, Объект.ВалютаДокумента, РеквизитыДоговора.ВалютаВзаиморасчетов) + Символы.ПС;
			КонецЕсли;
		Иначе
			ОтличияВалюта = "";
		КонецЕсли;
		
		ТекстВопроса = НСтр(
			"ru = 'Договор с контрагентом предусматривает параметры взаиморасчетов,
			|отличные от установленных в документе:
			|
			|%1%2
			|Пересчитать документ в соответствии с договором?'");
		
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстВопроса, ОтличияТипЦен, ОтличияВалюта);
		
	КонецЕсли;
	
	Возврат ТекстВопроса;
	
КонецФункции

// ЗАЧЕТ АВАНСОВ - ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Подготовка параметров для функции ПодготовитьТаблицуВзаиморасчетовЗачетАвансов
// на основании переданных документом таблиц.
//
// Параметры
//  ТаблицаДокумента - ТаблицаЗначений - данные документа, по которым определяется, какие движения будут сформированы.
//                      Создается в модуле менеджера документа
//  ТаблицаРеквизиты - ТаблицаЗначений - реквизиты, необходимые для формирования движений.
//                      Создается в модуле менеджера документа
//
// Возвращаемое значение:
//   Структура   - структура из 2 таблиц: ТаблицаДокумента, Реквизиты
//
Функция ПодготовитьПараметрыТаблицыВзаиморасчетовЗачетАвансов(ТаблицаДокумента, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаДокумента

	СписокОбязательныхКолонок = ""
	+ "Контрагент,"                    // <СправочникСсылка.Контрагенты> - контрагент, аванс по которому зачитывается
	+ "ДоговорКонтрагента,"            // <СправочникСсылка.ДоговорыКонтрагентов> - договор, аванс по которому зачитывается
	+ "ВалютаВзаиморасчетов,"          // <СправочникСсылка.Валюты> - валюта расчетов по договору
	+ "ВидДоговора,"                   // <ПеречислениеСсылка.ВидыДоговоровКонтрагентов> - вид договора контрагента
	+ "ВедениеВзаиморасчетов,"         // <ПеречислениеСсылка.ВедениеВзаиморасчетовПоДоговорам> - способ ведения взаиморасчетов с контрагентом
	+ "РасчетыВВалюте,"                // <Булево> - Истина для договора с расчетами в любой валюте, кроме тенге (в т.ч и в условных единицах)
	+ "ДокументРасчетов,"              // <ДокументСсылка> - документ-регистратор
	+ "Сделка,"                        // <ДокументСсылка> - сделка в рамках которой ведутся взаиморасчеты
	+ "СчетРасчетов,"                  // <ПланСчетовСсылка.Типовой> - счет учета расчетов с контрагентом
	+ "СчетАвансов,"                   // <ПланСчетовСсылка.Типовой> - счет учета расчетов с контрагентом по авансам
	+ "СуммаВзаиморасчетов,"           // <Число,15,2> - сумма поступления или реализации в валюте взаиморасчетов
	+ "СуммаРегл";                     // <Число,15,2> - сумма поступления или реализации в валюте регл. учета

	Если ТаблицаДокумента <> Неопределено И ТаблицаДокумента.Колонки.Найти("Содержание") <> Неопределено Тогда 
		СписокОбязательныхКолонок = СписокОбязательныхКолонок + ", Содержание";
	КонецЕсли;
	
	Параметры.Вставить("ТаблицаДокумента", ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаДокумента, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                    // <Дата> - период движений - дата документа
	+ "Регистратор,"               // <ДокументСсылка>
	+ "Организация,"               // <СправочникСсылка.Организации>
	+ "СтруктурноеПодразделение,"  // <СправочникСсылка.ПодразделенияОрганизаций>
	+ "ВалютаДокумента,"           // <СправочникСсылка.Валюты>
	+ "НаправлениеДвижения,"       // <Строка> - "Поступление" при зачете авансов, выданных поставщикам (при поступлении материальных ценностей)
	                               //          - "Выбытие" при зачете авансов, полученных от покупателей (при выбытии материальных ценностей)
	+ "ЭтоВозврат";                // <Булево> - Истина при возврате материальных ценностей (от покупателя или поставщику)

	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

// Подготовка параметров для процедуры СформироватьДвиженияЗачетАвансов
//
// Параметры
//  ТаблицаВзаиморасчетов - <ТаблицаЗначений> - данные документа, по которым определяется, какие движения будут сформированы.
//                          Создается функцией ПодготовитьТаблицуВзаиморасчетовЗачетАвансов
//  ТаблицаРеквизиты      - <ТаблицаЗначений> - реквизиты, необходимые для формирования движений.
//
// Возвращаемое значение:
//   <Структура> - структура из 2 таблиц: Взаиморасчеты, Реквизиты
//
Функция ПодготовитьПараметрыЗачетАвансов(ТаблицаВзаиморасчетов, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                    // <Дата> - период движений - дата документа
	+ "Регистратор,"               // <ДокументСсылка>
	+ "Организация,"               // <СправочникСсылка.Организации>
	+ "СтруктурноеПодразделение,"  // <СправочникСсылка.ПодразделенияОрганизаций>
	+ "ВалютаДокумента,"           // <СправочникСсылка.Валюты>
	+ "НеобходимостьОтраженияВНУ," // <Булево>
	+ "НаправлениеДвижения,"       // <Строка> - "Поступление" при зачете авансов, выданных поставщикам (при поступлении материальных ценностей)
	                               //          - "Выбытие" при зачете авансов, полученных от покупателей (при выбытии материальных ценностей)
	+ "ЭтоВозврат";                // <Булево> - Истина при возврате материальных ценностей (от покупателя или поставщику)

	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Взаиморасчеты

	СписокОбязательныхКолонок = ""
		+ "Контрагент,"                   // <СправочникСсылка.Контрагенты>
		+ "ДоговорКонтрагента,"           // <СправочникСсылка.ДоговорыКонтрагентов>
		+ "ДокументРасчетов,"             // <ДокументСсылка>
		+ "ВидДоговора,"                  //
		//+ "ВедениеВзаиморасчетов,"        // <ПеречислениеСсылка.ВедениеВзаиморасчетовПоДоговорам> - способ ведения взаиморасчетов с контрагентом
		+ "ВалютаВзаиморасчетов,"         // <СправочникСсылка.Валюты> - валюта расчетов по договору
		+ "СчетРасчетов,"                 // <ПланСчетовСсылка.Хозрасчетный> - счет учета расчетов с контрагентом
		+ "СчетАвансов,"                  // <ПланСчетовСсылка.Хозрасчетный> - счет учета расчетов по авансам
		+ "РасчетыВВалюте,"               // <Булево>  - флаг расчетов в валюте (в т.ч. и в условных единицах)
		+ "СуммаВзаиморасчетов,"          // <Число,15,2> - сумма в валюте взаиморасчетов
		+ "СуммаРеглПоКурсуАванса,"       // <Число,15,2> - сумма в рублях по курсу на дату аванса
		+ "СуммаРегл,"                    // <Число,15,2> - сумма в рублях (для валютных расчетов - по курсу на дату документа)
		+ "НомерЖурнала";                 // <Строка> - Номер журнала

	Если ТаблицаВзаиморасчетов <> Неопределено И ТаблицаВзаиморасчетов.Колонки.Найти("Содержание") <> Неопределено Тогда 
		СписокОбязательныхКолонок = СписокОбязательныхКолонок + ", Содержание";
	КонецЕсли;
			
	Параметры.Вставить("Взаиморасчеты", ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаВзаиморасчетов, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Функция ПустаяТаблицаОстаткиАвансов()

	ПустаяТаблица = Новый ТаблицаЗначений;
	ПустаяТаблица.Колонки.Добавить("Счет");
	ПустаяТаблица.Колонки.Добавить("Валюта");
	ПустаяТаблица.Колонки.Добавить("Контрагент");
	ПустаяТаблица.Колонки.Добавить("ДоговорКонтрагента");
	ПустаяТаблица.Колонки.Добавить("ДокументРасчетов");
	ПустаяТаблица.Колонки.Добавить("СуммаВзаиморасчетов");
	ПустаяТаблица.Колонки.Добавить("СуммаРегл");

	Возврат ПустаяТаблица;

КонецФункции

Функция ПустаяТаблицаВзаиморасчетовЗачетАвансов()

	ПустаяТаблица = Новый ТаблицаЗначений();

	ПустаяТаблица.Колонки.Добавить("Контрагент",                   Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ПустаяТаблица.Колонки.Добавить("ДоговорКонтрагента",           Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
	ПустаяТаблица.Колонки.Добавить("ВалютаВзаиморасчетов",         Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	ПустаяТаблица.Колонки.Добавить("ДокументРасчетов",             Документы.ТипВсеСсылки());
	ПустаяТаблица.Колонки.Добавить("ДатаДокументаРасчетов",        ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповДаты(ЧастиДаты.ДатаВремя));
	ПустаяТаблица.Колонки.Добавить("СчетРасчетов",                 Новый ОписаниеТипов("ПланСчетовСсылка.Типовой"));
	ПустаяТаблица.Колонки.Добавить("СчетАвансов",                  Новый ОписаниеТипов("ПланСчетовСсылка.Типовой"));
	ПустаяТаблица.Колонки.Добавить("ОстатокВзаиморасчетов",        ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
	ПустаяТаблица.Колонки.Добавить("СуммаВзаиморасчетов",          ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
	ПустаяТаблица.Колонки.Добавить("СуммаРегл",                    ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
	ПустаяТаблица.Колонки.Добавить("СуммаРеглПоКурсуАванса",       ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));

	ПустаяТаблица.Колонки.Добавить("ВидДоговора",                  Новый ОписаниеТипов("ПеречислениеСсылка.ВидыДоговоровКонтрагентов"));
	ПустаяТаблица.Колонки.Добавить("РасчетыВВалюте",               Новый ОписаниеТипов("Булево"));

	ПустаяТаблица.Колонки.Добавить("Содержание",                   ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповСтроки(50));
	Возврат ПустаяТаблица;

КонецФункции

Функция ПолучитьОстаткиАвансов(ТаблицаДокумента, Реквизиты, Отказ)

	Если ТаблицаДокумента.Количество() = 0 Тогда
		Возврат ПустаяТаблицаОстаткиАвансов();
	КонецЕсли;

	ТаблицаДоговоров = ТаблицаДокумента.Скопировать(, "СчетАвансов,Контрагент,ДоговорКонтрагента");
	ТаблицаДоговоров.Свернуть("СчетАвансов,Контрагент,ДоговорКонтрагента");

	СтрокиСПустымСчетом = Новый Массив;
	Для каждого СтрокаДоговора Из ТаблицаДоговоров Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаДоговора.СчетАвансов) 
			ИЛИ (НЕ ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.НаСчетеВедетсяУчетПоКонтрагентам(СтрокаДоговора.СчетАвансов) 
			И НЕ ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.НаСчетеВедетсяУчетПоДоговорам(СтрокаДоговора.СчетАвансов)) 
			ИЛИ ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.НаСчетеВедетсяУчетПоДокументамПоступления(СтрокаДоговора.СчетАвансов) Тогда
			СтрокиСПустымСчетом.Добавить(СтрокаДоговора);
		КонецЕсли;
	КонецЦикла;
	Для каждого СтрокаСПустымСчетом Из СтрокиСПустымСчетом Цикл
		ТаблицаДоговоров.Удалить(СтрокаСПустымСчетом);
	КонецЦикла;

	Если ТаблицаДоговоров.Количество() = 0 Тогда
		Возврат ПустаяТаблицаОстаткиАвансов();
	КонецЕсли;

	ТаблицаДоговоров.Индексы.Добавить("СчетАвансов");
	ТаблицаСчетов = ТаблицаДоговоров.Скопировать(, "СчетАвансов");
	ТаблицаСчетов.Свернуть("СчетАвансов");
	
	// Получаем остатки
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Организация",              Реквизиты.Организация);
	Запрос.УстановитьПараметр("СтруктурноеПодразделение", Реквизиты.СтруктурноеПодразделение);
	Запрос.УстановитьПараметр("МоментВремениОстатков",    Новый МоментВремени(Реквизиты.Период, Реквизиты.Регистратор));
	Запрос.УстановитьПараметр("Множитель",                ?(Реквизиты.НаправлениеДвижения = "Выбытие", -1, 1));
	Запрос.УстановитьПараметр("МассивКонтрагенты",        ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаДокумента, "Контрагент", Истина));
	Запрос.УстановитьПараметр("МассивДоговоры",           ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаДокумента, "ДоговорКонтрагента", Истина));
	
	МассивСчетов = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаДоговоров, "СчетАвансов", Истина);
	
	МассивСделок = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаДокумента, "Сделка", Истина);
	МассивПустыхСделок = Новый Массив;
	Для Каждого ЭлементМассива Из МассивСделок Цикл
		Если НЕ ЗначениеЗаполнено(ЭлементМассива) Тогда 
			МассивПустыхСделок.Добавить(ЭлементМассива);
		КонецЕсли;
	КонецЦикла;
	Для Каждого ПустаяСделка Из МассивПустыхСделок Цикл
		Индекс = МассивСделок.Найти(ПустаяСделка);
		Если Индекс <> Неопределено Тогда 
			МассивСделок.Удалить(Индекс);
		КонецЕсли;
	КонецЦикла;
	
	Запрос.УстановитьПараметр("МассивСделок",          МассивСделок);
	Запрос.УстановитьПараметр("ОтбиратьПоСделкам",     МассивСделок.Количество() > 0);
	
	ОстаткиАвансов = Неопределено;
	Для Каждого СчетАвансов Из МассивСчетов Цикл
		
		ПараметрыВидовСубконто = ВидыСубконтоРасчетов(СчетАвансов);
		
		Запрос.УстановитьПараметр("СчетаАвансов", СчетАвансов);
		Запрос.УстановитьПараметр("ВидыСубконтоРасчетов", ПараметрыВидовСубконто.ВидыСубконтоРасчетов);
		
		ТекстЗапроса = ТекстЗапросаОстаткиАвансов();
		
		Если НЕ ПараметрыВидовСубконто.ИспользоватьСубконто1 Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Остатки.Субконто1", "НЕОПРЕДЕЛЕНО");
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "
			|				И Субконто1 В (&МассивКонтрагенты)", "");
		КонецЕсли;
		Если НЕ ПараметрыВидовСубконто.ИспользоватьСубконто2 Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Остатки.Субконто2", "НЕОПРЕДЕЛЕНО");
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "
			|				И Субконто2 В (&МассивДоговоры)", "");
		КонецЕсли;
		Если НЕ ПараметрыВидовСубконто.ИспользоватьСубконто3 Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Остатки.Субконто3", "НЕОПРЕДЕЛЕНО");
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "
			|				И (НЕ &ОтбиратьПоСделкам
			|					ИЛИ Субконто3 В (&МассивСделок))", "");
		КонецЕсли;
		
		Запрос.Текст = ТекстЗапроса;
		
		Если ОстаткиАвансов = Неопределено Тогда 
			ОстаткиАвансов = Запрос.Выполнить().Выгрузить();
		Иначе 
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Запрос.Выполнить().Выгрузить(), ОстаткиАвансов);
		КонецЕсли;
		
	КонецЦикла;

	ОбщегоНазначенияБКВызовСервера.УпорядочитьТаблицуПоДокументу(ОстаткиАвансов, "ДокументРасчетов", "ДатаДокументаРасчетов");
	
	// Индекc используется функцией ПодготовитьТаблицуВзаиморасчетовЗачетАвансов
	ОстаткиАвансов.Индексы.Добавить("Счет,Контрагент,ДоговорКонтрагента");

	Возврат ОстаткиАвансов;

КонецФункции

Функция ТекстЗапросаОстаткиАвансов()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Остатки.Счет КАК Счет,
	|	Остатки.Валюта КАК Валюта,
	|	Остатки.Субконто1 КАК Контрагент,
	|	Остатки.Субконто2 КАК ДоговорКонтрагента,
	|	Остатки.Субконто3 КАК ДокументРасчетов,
	|	ВЫБОР
	|		КОГДА Остатки.Счет.Валютный
	|			ТОГДА Остатки.ВалютнаяСуммаОстаток * &Множитель
	|		ИНАЧЕ Остатки.СуммаОстаток * &Множитель
	|	КОНЕЦ КАК СуммаВзаиморасчетов,
	|	Остатки.СуммаОстаток * &Множитель КАК СуммаРегл
	|ИЗ
	|	РегистрБухгалтерии.Типовой.Остатки(
	|			&МоментВремениОстатков,
	|			Счет В (&СчетаАвансов),
	|			&ВидыСубконтоРасчетов,
	|			Организация = &Организация И СтруктурноеПодразделение = &СтруктурноеПодразделение
	|				И Субконто1 В (&МассивКонтрагенты)
	|				И Субконто2 В (&МассивДоговоры)
	|				И (НЕ &ОтбиратьПоСделкам
	|					ИЛИ Субконто3 В (&МассивСделок))) КАК Остатки
	|ГДЕ
	|	ВЫБОР
	|			КОГДА Остатки.Счет.Валютный
	|				ТОГДА Остатки.ВалютнаяСуммаОстаток * &Множитель
	|			ИНАЧЕ Остатки.СуммаОстаток * &Множитель
	|		КОНЕЦ > 0
	|
	|ДЛЯ ИЗМЕНЕНИЯ";
	
	Возврат ТекстЗапроса;

КонецФункции

Процедура ДобавитьСтрокиЗачтенныхАвансов(ТаблицаВзаиморасчетов, НераспределеннаяСумма, ОстаткиАвансов, СтрокаДокумента, Реквизиты)

	Для каждого СтрокаОстатка Из ОстаткиАвансов Цикл

		Если НераспределеннаяСумма <= 0 Тогда
			Прервать;
		КонецЕсли;

		ЗачитываемыйАванс = Мин(НераспределеннаяСумма, СтрокаОстатка.СуммаВзаиморасчетов);

		Если ЗачитываемыйАванс <= 0 Тогда
			Продолжить;
		КонецЕсли;

		СтрокаВзаиморасчетов = ТаблицаВзаиморасчетов.Добавить();

		ЗаполнитьЗначенияСвойств(СтрокаВзаиморасчетов, СтрокаДокумента,
			"СчетРасчетов,СчетАвансов,Контрагент,ДоговорКонтрагента,ВидДоговора,
			|ВалютаВзаиморасчетов,РасчетыВВалюте,Содержание");

		ЗаполнитьЗначенияСвойств(СтрокаВзаиморасчетов, СтрокаОстатка,
			"ДокументРасчетов,ДатаДокументаРасчетов");

		СтрокаВзаиморасчетов.ОстатокВзаиморасчетов = СтрокаОстатка.СуммаВзаиморасчетов;
		СтрокаВзаиморасчетов.СуммаВзаиморасчетов   = ЗачитываемыйАванс;

		КоэффициентКурсаАванса = ?(НЕ СтрокаДокумента.РасчетыВВалюте, 1,
			?(СтрокаОстатка.СуммаВзаиморасчетов = 0, 0, СтрокаОстатка.СуммаРегл / СтрокаОстатка.СуммаВзаиморасчетов));

		КоэффициентРегл = ?(НЕ СтрокаДокумента.РасчетыВВалюте, 1,
			?(СтрокаОстатка.СуммаВзаиморасчетов = 0, 0, СтрокаДокумента.СуммаРегл / СтрокаДокумента.СуммаВзаиморасчетов));

		СтрокаВзаиморасчетов.СуммаРеглПоКурсуАванса = Окр(ЗачитываемыйАванс * КоэффициентКурсаАванса, 2);
		СтрокаВзаиморасчетов.СуммаРегл              = Окр(ЗачитываемыйАванс * КоэффициентРегл, 2);

		НераспределеннаяСумма = НераспределеннаяСумма - ЗачитываемыйАванс;

		СтрокаОстатка.СуммаВзаиморасчетов = СтрокаОстатка.СуммаВзаиморасчетов - СтрокаВзаиморасчетов.СуммаВзаиморасчетов;
		СтрокаОстатка.СуммаРегл           = СтрокаОстатка.СуммаРегл - СтрокаВзаиморасчетов.СуммаРеглПоКурсуАванса;

		// Если зачет выполняется по курсу документа, то сумма регл. по курсу аванса должна равняться сумме регл. по курсу документа
		ЗачетПоКурсуАванса = (ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ОсобыйПорядокПереоценкиСчета(СтрокаВзаиморасчетов.СчетАвансов) = Перечисления.СпособыПризнанияКурсовойРазницы.НеРассчитывать);
		Если СтрокаДокумента.РасчетыВВалюте И НЕ ЗачетПоКурсуАванса И НЕ Реквизиты.ЭтоВозврат Тогда 
			СтрокаВзаиморасчетов.СуммаРеглПоКурсуАванса = СтрокаВзаиморасчетов.СуммаРегл;
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

Процедура ДобавитьСтрокуЗадолженности(ТаблицаВзаиморасчетов, НераспределеннаяСумма, СтрокаДокумента, Реквизиты)

	Знак = ?(СтрокаДокумента.СуммаВзаиморасчетов < 0, -1, 1);
	Если Знак * НераспределеннаяСумма <= 0 Тогда
		Возврат;
	КонецЕсли;

	СтрокаВзаиморасчетов = ТаблицаВзаиморасчетов.Добавить();

	ЗаполнитьЗначенияСвойств(СтрокаВзаиморасчетов, СтрокаДокумента,
		"СчетРасчетов,СчетАвансов,Контрагент,ДоговорКонтрагента,ВалютаВзаиморасчетов,ВидДоговора,РасчетыВВалюте,Содержание");

	СтрокаВзаиморасчетов.ДокументРасчетов      = Реквизиты.Регистратор;
	СтрокаВзаиморасчетов.ДатаДокументаРасчетов = Реквизиты.Период;

	СтрокаВзаиморасчетов.СуммаВзаиморасчетов = НераспределеннаяСумма;

	КоэффициентРегл = ?(НЕ СтрокаДокумента.РасчетыВВалюте, 1,
		?(СтрокаДокумента.СуммаВзаиморасчетов = 0, 0, СтрокаДокумента.СуммаРегл / СтрокаДокумента.СуммаВзаиморасчетов));

	СтрокаВзаиморасчетов.СуммаРегл              = Окр(НераспределеннаяСумма * КоэффициентРегл, 2);
	СтрокаВзаиморасчетов.СуммаРеглПоКурсуАванса = СтрокаВзаиморасчетов.СуммаРегл;

КонецПроцедуры

Функция СодержаниеПроводокПоЗачетуАвансов(НаправлениеДвижения, ЭтоВозврат, ВидДоговора)

	Если НаправлениеДвижения = "Поступление" Тогда

		Если ЭтоВозврат Тогда
			Содержание = НСтр("ru='Выделение аванса (оплаченная часть при возвратах)'", ОбщегоНазначения.КодОсновногоЯзыка());
		ИначеЕсли ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком Тогда
			Содержание = НСтр("ru='Зачет аванса поставщику'", ОбщегоНазначения.КодОсновногоЯзыка());
		Иначе
			Содержание = НСтр("ru='Зачет аванса'", ОбщегоНазначения.КодОсновногоЯзыка());
		КонецЕсли;

	Иначе //"Выбытие"

		Если ЭтоВозврат Тогда
			Если ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком Тогда
				Содержание = НСтр("ru='Возврат поставщику. Неоплаченная часть.'", ОбщегоНазначения.КодОсновногоЯзыка());
			Иначе
				Содержание = НСтр("ru='Возврат. Неоплаченная часть.'", ОбщегоНазначения.КодОсновногоЯзыка());
			КонецЕсли;
		ИначеЕсли ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
			Содержание = НСтр("ru='Зачет аванса покупателя'", ОбщегоНазначения.КодОсновногоЯзыка());
		Иначе
			Содержание = НСтр("ru='Зачет аванса'", ОбщегоНазначения.КодОсновногоЯзыка());
		КонецЕсли;

	КонецЕсли;

	Возврат Содержание;

КонецФункции

// ПОГАШЕНИЕ ЗАДОЛЖЕННОСТИ - ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Подготовка параметров для функции ПодготовитьТаблицуВзаиморасчетовПогашениеЗадолженности
// на основании переданных документом таблиц.
//
// Параметры
//  РасшифровкаПлатежа - <ТаблицаЗначений> - данные табличной части документа, по которым определяется, какие движения будут сформированы.
//                       Создается в модуле менеджера документа
//  ТаблицаРеквизиты   - <ТаблицаЗначений> - реквизиты, необходимые для формирования движений.
//                       Создается в модуле менеджера документа
//
// Возвращаемое значение:
//   <Структура>   - структура из 2 таблиц: РасшифровкаПлатежа и Реквизиты
//
Функция ПодготовитьПараметрыТаблицыВзаиморасчетовПогашениеЗадолженности(РасшифровкаПлатежа, ТаблицаРеквизиты, ВидДокумента)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.РасшифровкаПлатежа

	СписокОбязательныхКолонок = ""
	+ "НомерСтроки,"                      // <Число, 6,0> - номер строки документа
	+ "Контрагент,"                       // <СправочникСсылка.Контрагенты> - контрагент, задолженность по которому погашается
	+ "ДоговорКонтрагента,"               // <СправочникСсылка.ДоговорыКонтрагентов> - договор, задолженность по которому погашается
	+ "ВалютаВзаиморасчетов,"             // <СправочникСсылка.Валюты> - валюта расчетов по договору
	+ "ВедениеВзаиморасчетов,"         	  // <ПеречислениеСсылка.ВедениеВзаиморасчетовПоДоговорам> - способ ведения взаиморасчетов с контрагентом
	+ ?(ВидДокумента = Неопределено,"","ВалютаВзаиморасчетовСПолучателем,") // <СправочникСсылка.Валюты> - валюта расчетов по договору										
	+ "РасчетыВВалюте,"                   // <Булево> - Истина для договора с расчетами в любой валюте, кроме рублей (в т.ч и в условных единицах)
	+ "ДокументРасчетов,"                 // <ДокументСсылка> - документ расчетов, задолженность по которому погашается при способе "По документу"
	+ "СчетРасчетов,"                  	  // <ПланСчетовСсылка.Типовой> - счет учета расчетов с контрагентом
	+ "СчетРасчетовНУ,"                   // <ПланСчетовСсылка.Налоговый> - счет учета расчетов с контрагентом НУ
	+ "СчетАвансов,"                      // <ПланСчетовСсылка.Типовой> - счет учета расчетов с контрагентом по авансам
	+ "КорСчет,"                          // <ПланСчетовСсылка.Типовой> - счет, коррекспондирующий со счетом расчетов с контрагентом
	+ "КорСубконто1,"                     // <Характеристика.ВидыСубконтоТиповые> - субконто 1 по корсчету
	+ "КорСубконто2,"                     // <Характеристика.ВидыСубконтоТиповые> - субконто 2 по корсчету
	+ "КорСубконто3,"                     // <Характеристика.ВидыСубконтоТиповые> - субконто 3 по корсчету
	+ "КорСчетНУ,"                        // <ПланСчетовСсылка.Налоговый> - счет, коррекспондирующий со счетом расчетов с контрагентом
	+ "КорСубконтоНУ1,"                   // <Характеристика.ВидыСубконтоТиповые> - субконто 1 по корсчету НУ
	+ "КорСубконтоНУ2,"                   // <Характеристика.ВидыСубконтоТиповые> - субконто 2 по корсчету НУ
	+ "КорСубконтоНУ3,"                   // <Характеристика.ВидыСубконтоТиповые> - субконто 3 по корсчету НУ
	+ "СуммаВзаиморасчетов,"              // <Число,15,2> - сумма погашения задолженности в валюте взаиморасчетов
	+ "СуммаРегл,"                        // <Число,15,2> - сумма погашения задолженности в тенге
	+ ?(ВидДокумента = Неопределено,"","СуммаНУ,") // <Число,15,2> - сумма НУ, для списания задолженности в НУ
	+ "Содержание";		                  // <Строка,150>

	Параметры.Вставить("РасшифровкаПлатежа", ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(
		РасшифровкаПлатежа, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                    // <Дата> - период движений - дата документа
	+ "Регистратор,"               // <ДокументСсылка>
	+ "Организация,"               // <СправочникСсылка.Организации>
	+ "ВалютаДокумента,"           // <СправочникСсылка.Валюты>
	+ "СтруктурноеПодразделение,"  // <СправочникСсылка.ПодразделенияОрганизаций>
	+ "НаправлениеДвижения,"       // <Строка> - "Поступление" при погашении дебиторской задолженности (поступлении денежных средств)
	                               //          - "Выбытие" при погашении кредиторской задолженности (выбытии денежных средств)
	+ "ЭтоВозврат";                // <Булево> - Истина при возврате денежных средств (покупателю или от поставщика)
	
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

// Подготовка параметров для процедуры СформироватьДвиженияПогашениеЗадолженности
//
// Параметры
//  ТаблицаВзаиморасчетов - <ТаблицаЗначений> - данные табличной части документа, по которым определяется, какие движения будут сформированы.
//                          Создается функцией ПодготовитьТаблицуВзаиморасчетовПогашениеЗадолженности
//  ТаблицаРеквизиты      - <ТаблицаЗначений> - реквизиты, необходимые для формирования движений.
//                          Создается в модуле менеджера документа
//
// Возвращаемое значение:
//   <Структура>   - структура из 2 таблиц: Взаиморасчеты и Реквизиты
//
Функция ПодготовитьПараметрыПогашениеЗадолженности(ТаблицаВзаиморасчетов, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                    // <Дата> - период движений - дата документа
	+ "Регистратор,"               // <ДокументСсылка>
	+ "Организация,"               // <СправочникСсылка.Организации>
	+ "ВалютаДокумента,"           // <СправочникСсылка.Валюты>
	+ "СтруктурноеПодразделение,"  // <СправочникСсылка.ПодразделенияОрганизаций>
	+ "НеобходимостьОтраженияВНУ," // <Булево>
	+ "ВидУчетаНУ," 			   // <Булево>
	+ "НаправлениеДвижения";       // <Строка> - "Поступление" при погашении дебиторской задолженности (поступлении денежных средств)
	                               //          - "Выбытие" при погашении кредиторской задолженности (выбытии денежных средств)
	
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Взаиморасчеты

	СписокОбязательныхКолонок = ""
	+ "Контрагент,"                    // <СправочникСсылка.Контрагенты> - контрагент, задолженность по которому погашается
	+ "ДоговорКонтрагента,"            // <СправочникСсылка.ДоговорыКонтрагентов> - договор, задолженность по которому погашается
	+ "ДокументРасчетов,"              // <ДокументСсылка> - документ расчетов, задолженность по которому погашается
	+ "ВалютаВзаиморасчетов,"          // <СправочникСсылка.Валюты> - валюта расчетов по договору
	+ "СчетРасчетов,"                  // <ПланСчетовСсылка.Типовой> - счет расчетов, задолженность по которому погашается
	+ "СчетРасчетовНУ,"                // <ПланСчетовСсылка.Налоговый> - счет расчетов НУ, задолженность по которому погашается
	+ "КорСчет,"                       // <ПланСчетовСсылка.Типовой> - счет, корреспондирующий со счетом расчетов
	+ "КорСубконто1,"                  // <Характеристика.ВидыСубконтоТиповые>
	+ "КорСубконто2,"                  // <Характеристика.ВидыСубконтоТиповые>
	+ "КорСубконто3,"                  // <Характеристика.ВидыСубконтоТиповые>
	+ "КорСчетНУ,"                     // <ПланСчетовСсылка.Налоговый> - счет, корреспондирующий со счетом расчетов
	+ "КорСубконтоНУ1,"                // <Характеристика.ВидыСубконтоТиповые>
	+ "КорСубконтоНУ2,"                // <Характеристика.ВидыСубконтоТиповые>
	+ "КорСубконтоНУ3,"                // <Характеристика.ВидыСубконтоТиповые>
	+ "СуммаВзаиморасчетов,"           // <Число,15,2> - сумма в валюте взаиморасчетов
	+ "СуммаРегл,"                     // <Число,15,2> - сумма в тенге в оценке для бух.учета
	+ "Содержание";                    // <Строка,150>

	Параметры.Вставить("Взаиморасчеты", ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаВзаиморасчетов, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Функция ПустаяТаблицаВзаиморасчетовПогашениеЗадолженности(ВидДокумента = Неопределено)

	ПустаяТаблица = Новый ТаблицаЗначений();

	ПустаяТаблица.Колонки.Добавить("СчетРасчетов",          Новый ОписаниеТипов("ПланСчетовСсылка.Типовой"));
	ПустаяТаблица.Колонки.Добавить("СчетРасчетовНУ",          Новый ОписаниеТипов("ПланСчетовСсылка.Налоговый"));
	ПустаяТаблица.Колонки.Добавить("ВалютаВзаиморасчетов",    Новый ОписаниеТипов("СправочникСсылка.Валюты"));
		
	Если НЕ ВидДокумента = Неопределено Тогда
		ПустаяТаблица.Колонки.Добавить("ВалютаВзаиморасчетовСПолучателем",  Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	КонецЕсли;
	
	ПустаяТаблица.Колонки.Добавить("Контрагент",            Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ПустаяТаблица.Колонки.Добавить("ДоговорКонтрагента",    ПроцедурыБухгалтерскогоУчетаКлиентСерверПереопределяемый.ПолучитьОписаниеТиповДоговора());
	ПустаяТаблица.Колонки.Добавить("ДокументРасчетов",      Документы.ТипВсеСсылки());
	ПустаяТаблица.Колонки.Добавить("ДатаДокументаРасчетов", ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповДаты(ЧастиДаты.ДатаВремя));
	ПустаяТаблица.Колонки.Добавить("ОстатокВзаиморасчетов", ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
	ПустаяТаблица.Колонки.Добавить("СуммаВзаиморасчетов",   ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
	ПустаяТаблица.Колонки.Добавить("СуммаРегл",             ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
	ПустаяТаблица.Колонки.Добавить("СуммаНУ",               ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
	
	ПустаяТаблица.Колонки.Добавить("СтавкаНДС",             Новый ОписаниеТипов("СправочникСсылка.СтавкиНДС"));
	ПустаяТаблица.Колонки.Добавить("КорСчет",               Новый ОписаниеТипов("ПланСчетовСсылка.Типовой"));
	ОписаниеТипаСубконто = Метаданные.ПланыВидовХарактеристик.ВидыСубконтоТиповые.Тип;
	Для Ном = 1 По 3 Цикл
		ПустаяТаблица.Колонки.Добавить("КорСубконто" + Ном, ОписаниеТипаСубконто);
	КонецЦикла;

	ПустаяТаблица.Колонки.Добавить("КорСчетНУ",             Новый ОписаниеТипов("ПланСчетовСсылка.Налоговый"));
	ОписаниеТипаСубконто = Метаданные.ПланыВидовХарактеристик.ВидыСубконтоТиповые.Тип;
	Для Ном = 1 По 3 Цикл
		ПустаяТаблица.Колонки.Добавить("КорСубконтоНУ" + Ном, ОписаниеТипаСубконто);
	КонецЦикла;

	ПустаяТаблица.Колонки.Добавить("Содержание",            ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповСтроки(150));
    ПустаяТаблица.Колонки.Добавить("ВедениеВзаиморасчетов", Новый ОписаниеТипов("ПеречислениеСсылка.ВедениеВзаиморасчетовПоДоговорам"));
	
	Возврат ПустаяТаблица;

КонецФункции

Функция ПолучитьОстаткиЗадолженности(РасшифровкаПлатежа, Реквизиты, Отказ)

	Если РасшифровкаПлатежа.Количество() = 0 Тогда
		Возврат ПустаяТаблицаОстаткиЗадолженности();
	КонецЕсли;

	ТаблицаДоговоров = РасшифровкаПлатежа.Скопировать(, "СчетРасчетов,Контрагент,ДоговорКонтрагента");
	ТаблицаДоговоров.Свернуть("СчетРасчетов,Контрагент,ДоговорКонтрагента");

	СтрокиСПустымСчетом = Новый Массив;
	Для Каждого СтрокаДоговора Из ТаблицаДоговоров Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаДоговора.СчетРасчетов) 
			ИЛИ (НЕ ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.НаСчетеВедетсяУчетПоКонтрагентам(СтрокаДоговора.СчетРасчетов) 
			И НЕ ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.НаСчетеВедетсяУчетПоДоговорам(СтрокаДоговора.СчетРасчетов)) 
			ИЛИ ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.НаСчетеВедетсяУчетПоДокументамПоступления(СтрокаДоговора.СчетРасчетов) Тогда
			СтрокиСПустымСчетом.Добавить(СтрокаДоговора);
		КонецЕсли;
	КонецЦикла;
	Для Каждого СтрокаСПустымСчетом Из СтрокиСПустымСчетом Цикл
		ТаблицаДоговоров.Удалить(СтрокаСПустымСчетом);
	КонецЦикла;
    
	Если ТаблицаДоговоров.Количество() = 0 Тогда
		Возврат ПустаяТаблицаОстаткиЗадолженности();
	КонецЕсли;

	ТаблицаДоговоров.Индексы.Добавить("СчетРасчетов");
	ТаблицаСчетов = ТаблицаДоговоров.Скопировать(, "СчетРасчетов");
	ТаблицаСчетов.Свернуть("СчетРасчетов");
	
	// Получаем остатки
	
	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("Организация",           		Реквизиты.Организация);
	Запрос.УстановитьПараметр("СтруктурноеПодразделение", 	Реквизиты.СтруктурноеПодразделение);
	Запрос.УстановитьПараметр("МоментВремениОстатков", 		Новый МоментВремени(Реквизиты.Период, Реквизиты.Регистратор));
	
	Запрос.УстановитьПараметр("Контрагенты", ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаДоговоров, "Контрагент", Истина));
	Запрос.УстановитьПараметр("Договоры",    ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаДоговоров, "ДоговорКонтрагента", Истина));
	
	Запрос.УстановитьПараметр("Множитель", ?(Реквизиты.НаправлениеДвижения = "Выбытие", -1, 1));
	
	МассивСчетов = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаДоговоров, "СчетРасчетов", Истина);
	
	МассивСделок = ОбщегоНазначения.ВыгрузитьКолонку(РасшифровкаПлатежа, "ДокументРасчетов", Истина);
	МассивПустыхСделок = Новый Массив;
	Для Каждого ЭлементМассива Из МассивСделок Цикл
		Если НЕ ЗначениеЗаполнено(ЭлементМассива) Тогда 
			МассивПустыхСделок.Добавить(ЭлементМассива);
		КонецЕсли;
	КонецЦикла;
	Для Каждого ПустаяСделка Из МассивПустыхСделок Цикл
		Индекс = МассивСделок.Найти(ПустаяСделка);
		Если Индекс <> Неопределено Тогда 
			МассивСделок.Удалить(Индекс);
		КонецЕсли;
	КонецЦикла;

	Запрос.УстановитьПараметр("МассивСделок",          МассивСделок);
	Запрос.УстановитьПараметр("ОтбиратьПоСделкам",     МассивСделок.Количество() > 0);
	
	ОстаткиЗадолженности = Неопределено;
	Для Каждого СчетРасчетов Из МассивСчетов Цикл
		
		ПараметрыВидовСубконто = ВидыСубконтоРасчетов(СчетРасчетов);
		
		Запрос.УстановитьПараметр("СчетаРасчетов", СчетРасчетов);
		Запрос.УстановитьПараметр("ВидыСубконтоРасчетов", ПараметрыВидовСубконто.ВидыСубконтоРасчетов);
		
		ТекстЗапроса = ТекстЗапросаОстаткиЗадолженности();
		
		Если НЕ ПараметрыВидовСубконто.ИспользоватьСубконто1 Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Остатки.Субконто1", "НЕОПРЕДЕЛЕНО");
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "
			|				И Субконто1 В (&Контрагенты)", "");
		КонецЕсли;
		Если НЕ ПараметрыВидовСубконто.ИспользоватьСубконто2 Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Остатки.Субконто2", "НЕОПРЕДЕЛЕНО");
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "
			|				И Субконто2 В (&Договоры)", "");
		КонецЕсли;
		Если НЕ ПараметрыВидовСубконто.ИспользоватьСубконто3 Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Остатки.Субконто3", "НЕОПРЕДЕЛЕНО");
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "
			|				И (НЕ &ОтбиратьПоСделкам
			|					ИЛИ (&ОтбиратьПоСделкам И (Субконто3 В (&МассивСделок))))", "");
		КонецЕсли;
		
		Запрос.Текст = ТекстЗапроса;
		
		Если ОстаткиЗадолженности = Неопределено Тогда 
			ОстаткиЗадолженности = Запрос.Выполнить().Выгрузить();
		Иначе 
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Запрос.Выполнить().Выгрузить(), ОстаткиЗадолженности);
		КонецЕсли;
		
	КонецЦикла;

	ОбщегоНазначенияБКВызовСервера.УпорядочитьТаблицуПоДокументу(ОстаткиЗадолженности, "ДокументРасчетов", "ДатаДокументаРасчетов");
	
	ОстаткиЗадолженности.Колонки.Добавить(
		"ОстатокВзаиморасчетов", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ОстаткиЗадолженности.ЗагрузитьКолонку(
		ОстаткиЗадолженности.ВыгрузитьКолонку("СуммаВзаиморасчетов"), "ОстатокВзаиморасчетов");

	ОбщегоНазначенияБКВызовСервера.ПронумероватьТаблицу(ОстаткиЗадолженности, "НомерСтроки");
	ОбщегоНазначенияБКВызовСервера.УпорядочитьТаблицуПоДокументу(ОстаткиЗадолженности, "ДокументРасчетов", "ДатаДокументаРасчетов");
	
	// Индексы используются в процедуре ДобавитьСтрокиПогашенияЗадолженности
	ОстаткиЗадолженности.Индексы.Добавить("НомерСтроки");
	ОстаткиЗадолженности.Индексы.Добавить("СчетРасчетов,Контрагент,ДоговорКонтрагента");
	
	Возврат ОстаткиЗадолженности;

КонецФункции

Функция ПустаяТаблицаОстаткиЗадолженности()

	ПустаяТаблица = Новый ТаблицаЗначений;
	ПустаяТаблица.Колонки.Добавить("НомерСтроки");
	ПустаяТаблица.Колонки.Добавить("СчетРасчетов");
	ПустаяТаблица.Колонки.Добавить("Валюта");
	ПустаяТаблица.Колонки.Добавить("Контрагент");
	ПустаяТаблица.Колонки.Добавить("ДоговорКонтрагента");
	ПустаяТаблица.Колонки.Добавить("ДокументРасчетов");
	ПустаяТаблица.Колонки.Добавить("ДатаДокументаРасчетов");
	ПустаяТаблица.Колонки.Добавить("СуммаВзаиморасчетов");
	ПустаяТаблица.Колонки.Добавить("СуммаРегл");
	
	Возврат ПустаяТаблица;

КонецФункции

Функция ТекстЗапросаОстаткиЗадолженности()

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Остатки.Счет КАК СчетРасчетов,
	|	Остатки.Субконто1 КАК Контрагент,
	|	Остатки.Субконто2 КАК ДоговорКонтрагента,
	|	Остатки.Субконто3 КАК ДокументРасчетов,
	|	ЕСТЬNULL(Остатки.Валюта, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)) КАК Валюта,
	|	ВЫБОР
	|		КОГДА Остатки.Счет.Валютный
	|			ТОГДА Остатки.ВалютнаяСуммаОстаток * &Множитель
	|		ИНАЧЕ Остатки.СуммаОстаток * &Множитель
	|	КОНЕЦ КАК СуммаВзаиморасчетов,
	|	Остатки.СуммаОстаток * &Множитель КАК СуммаРегл
	|ИЗ
	|	РегистрБухгалтерии.Типовой.Остатки(
	|			&МоментВремениОстатков,
	|			Счет В (&СчетаРасчетов),
	|			&ВидыСубконтоРасчетов,
	|			Организация = &Организация И СтруктурноеПодразделение = &СтруктурноеПодразделение
	|				И Субконто1 В (&Контрагенты)
	|				И Субконто2 В (&Договоры)
	|				И (НЕ &ОтбиратьПоСделкам
	|					ИЛИ (&ОтбиратьПоСделкам И (Субконто3 В (&МассивСделок))))) КАК Остатки
	|ГДЕ
	|	ВЫБОР
	|			КОГДА Остатки.Счет.Валютный
	|				ТОГДА Остатки.ВалютнаяСуммаОстаток * &Множитель
	|			ИНАЧЕ Остатки.СуммаОстаток * &Множитель
	|		КОНЕЦ > 0
	|
	|ДЛЯ ИЗМЕНЕНИЯ
	| ";
	
	Возврат ТекстЗапроса;

КонецФункции

Процедура ДобавитьСтрокиПогашенияЗадолженности(ТаблицаВзаиморасчетов, НераспределеннаяСумма, НераспределеннаяСуммаРегл, ОстаткиЗадолженности, СтрокаПлатежа, Реквизиты, Отказ)

	РасчетыВВалюте	 = СтрокаПлатежа.ВалютаВзаиморасчетов <> Константы.ВалютаРегламентированногоУчета.Получить();
	Регистратор		 = Реквизиты.Регистратор;

	Отбор = Новый Структура("СчетРасчетов,Контрагент,ДоговорКонтрагента");
	Если СтрокаПлатежа.ВедениеВЗаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам И ЗначениеЗаполнено(СтрокаПлатежа.ДокументРасчетов) Тогда
		Отбор.Вставить("ДокументРасчетов");
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(Отбор, СтрокаПлатежа);
	
	ОстаткиЗадолженностиСОтбором = ОстаткиЗадолженности.Скопировать(Отбор);
	ОстаткиЗадолженностиСОтбором.Сортировать("ДатаДокументаРасчетов,ДокументРасчетов", Новый СравнениеЗначений);

	Для каждого СтрокаОстатка Из ОстаткиЗадолженностиСОтбором Цикл
	
		Если НераспределеннаяСумма <= 0 
			И ТипЗнч(Регистратор) <> Тип("ДокументСсылка.КорректировкаДолга")  
			Тогда
			Прервать;
		КонецЕсли;

		ПогашеннаяСумма = Мин(НераспределеннаяСумма, СтрокаОстатка.СуммаВзаиморасчетов);
		Если ПогашеннаяСумма <= 0 Тогда
			Продолжить;
		КонецЕсли;

		СтрокаВзаиморасчетов = ТаблицаВзаиморасчетов.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаВзаиморасчетов, СтрокаПлатежа);
		ЗаполнитьЗначенияСвойств(СтрокаВзаиморасчетов, СтрокаОстатка);
		
		КурсВзаиморасчетов = ?(НераспределеннаяСумма = 0, 0, Окр(НераспределеннаяСуммаРегл / НераспределеннаяСумма, 4));
		СтрокаВзаиморасчетов.СуммаВзаиморасчетов = ПогашеннаяСумма;
		
		Если РасчетыВВалюте Тогда
			// Погашение долга в валюте производится в БУ и НУ по курсу тек.документа
			СуммаПоКурсуДокумента = Окр(ПогашеннаяСумма * КурсВзаиморасчетов, 2);
			СтрокаВзаиморасчетов.СуммаРегл = СуммаПоКурсуДокумента;
		Иначе
			// Расчеты в тенге
			СтрокаВзаиморасчетов.СуммаРегл = ПогашеннаяСумма;
		КонецЕсли;

		НераспределеннаяСумма     = НераспределеннаяСумма   - СтрокаВзаиморасчетов.СуммаВзаиморасчетов;
		НераспределеннаяСуммаРегл = НераспределеннаяСуммаРегл - СтрокаВзаиморасчетов.СуммаРегл;

		// Остатки уменьшаем в строке основной таблицы остатков
		СтрокаОстаткаБезОтбора = ОстаткиЗадолженности.Найти(СтрокаОстатка.НомерСтроки, "НомерСтроки");

		СтрокаОстаткаБезОтбора.СуммаВзаиморасчетов = СтрокаОстаткаБезОтбора.СуммаВзаиморасчетов	- СтрокаВзаиморасчетов.СуммаВзаиморасчетов;
		СтрокаОстаткаБезОтбора.СуммаРегл 		   = СтрокаОстаткаБезОтбора.СуммаРегл - СтрокаВзаиморасчетов.СуммаРегл;
		
		Если ЗначениеЗаполнено(СтрокаПлатежа.Содержание) Тогда
			СодержаниеПроводки = СтрокаПлатежа.Содержание;
		ИначеЕсли Не Реквизиты.ЭтоВозврат Тогда
			СодержаниеПроводки = НСтр("ru = 'Оплата'", ОбщегоНазначения.КодОсновногоЯзыка());
		ИначеЕсли ТипЗнч(СтрокаОстатка.ДокументРасчетов) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
			СодержаниеПроводки = НСтр("ru = 'Возврат оплаты'", ОбщегоНазначения.КодОсновногоЯзыка());
		Иначе
			СодержаниеПроводки = НСтр("ru = 'Возврат аванса'", ОбщегоНазначения.КодОсновногоЯзыка());
		КонецЕсли;
		СтрокаВзаиморасчетов.Содержание = СодержаниеПроводки;
	КонецЦикла;

КонецПроцедуры

Процедура ДобавитьСтрокуАванса(ТаблицаВзаиморасчетов, НераспределеннаяСумма, НераспределеннаяСуммаРегл, СтрокаДокумента, Реквизиты)

	Регистратор = Реквизиты.Регистратор;
	
	Если НераспределеннаяСумма <= 0 
		И ТипЗнч(Регистратор) <> Тип("ДокументСсылка.КорректировкаДолга")  
		Тогда
		Возврат;
	КонецЕсли;
	Если НераспределеннаяСумма <= 0 И СтрокаДокумента.СуммаРегл >0
		Тогда
		Возврат;
	КонецЕсли;


	СтрокаВзаиморасчетов = ТаблицаВзаиморасчетов.Добавить();

	ЗаполнитьЗначенияСвойств(СтрокаВзаиморасчетов, СтрокаДокумента);
	СтрокаВзаиморасчетов.СчетРасчетов          = ?(ЗначениеЗаполнено(СтрокаДокумента.СчетАвансов), СтрокаДокумента.СчетАвансов, СтрокаДокумента.СчетРасчетов);
	СтрокаВзаиморасчетов.ДокументРасчетов      = Реквизиты.Регистратор;
	СтрокаВзаиморасчетов.ДатаДокументаРасчетов = Реквизиты.Период;

	СтрокаВзаиморасчетов.СуммаВзаиморасчетов   = НераспределеннаяСумма;
	СтрокаВзаиморасчетов.СуммаРегл 			   = НераспределеннаяСуммаРегл;

	Если ЗначениеЗаполнено(СтрокаДокумента.Содержание) Тогда
		СодержаниеПроводки = СтрокаДокумента.Содержание;
	Иначе
		СодержаниеПроводки = ?(Реквизиты.ЭтоВозврат, НСтр("ru = 'Возврат'", ОбщегоНазначения.КодОсновногоЯзыка()), НСтр("ru = 'Оплата (аванс)'", ОбщегоНазначения.КодОсновногоЯзыка()));
	КонецЕсли;
	СтрокаВзаиморасчетов.Содержание = СодержаниеПроводки;
	
КонецПроцедуры

// КОРРЕКТИРОВКА ДОЛГА - ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция ПодготовитьПараметрыТаблицыВзаиморасчетовЗадолженностиКорректировкаДолга(ТаблицаВзаиморасчетов, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                           // <Дата> - период движений - дата документа
	+ "Регистратор,"                      // <ДокументСсылка>
	+ "ВидОперации,"                      // 
	+ "Организация,"                      // <СправочникСсылка.Организации>
	+ "СтруктурноеПодразделение,"         // <СправочникСсылка.ПодразделениеОрганизации>
	+ "ВалютаДокумента,"                  // <СправочникСсылка.Валюты>
	+ "ВидУчетаНУ,"                       // <СправочникСсылка.ВидыУчетаНУ>
	+ "НеобходимостьОтраженияВНУ,"        // <Булево> - 
	+ "НаправлениеДвижения";              // <Строка> - "Поступление" при погашении дебиторской задолженности (поступлении денежных средств)
	                                      //          - "Выбытие" при погашении кредиторской задолженности (выбытии денежных средств)

	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Взаиморасчеты

	СписокОбязательныхКолонок = ""
	+ "Контрагент,"                       // <СправочникСсылка.Контрагенты> - контрагент, задолженность по которому погашается
	+ "ДоговорКонтрагента,"               // <СправочникСсылка.ДоговорыКонтрагентов> - договор, задолженность по которому погашается
	+ "ДокументРасчетов,"                 // <ДокументСсылка> - документ расчетов, задолженность по которому погашается
	+ "ВалютаВзаиморасчетов,"             // <СправочникСсылка.Валюты> - валюта расчетов по договору
	+ "ВалютаВзаиморасчетовСПолучателем," // <СправочникСсылка.Валюты>
	+ "СчетРасчетов,"                     // <ПланСчетовСсылка.Типовой> - счет расчетов, задолженность по которому погашается
	+ "СчетРасчетовНУ,"                    // <ПланСчетовСсылка.Налоговый> - счет расчетов, задолженность по которому погашается
	+ "КорСчет,"                          // <ПланСчетовСсылка.Типовой> - счет, корреспондирующий со счетом расчетов
	+ "КорСубконто1,"                     // <Характеристика.ВидыСубконтоТиповые>
	+ "КорСубконто2,"                     // <Характеристика.ВидыСубконтоТиповые>
	+ "КорСубконто3,"                     // <Характеристика.ВидыСубконтоТиповые>
	+ "КорСчетНУ,"                          // <ПланСчетовСсылка.Типовой> - счет, корреспондирующий со счетом расчетов
	+ "КорСубконтоНУ1,"                     // <Характеристика.ВидыСубконтоТиповые>
	+ "КорСубконтоНУ2,"                     // <Характеристика.ВидыСубконтоТиповые>
	+ "КорСубконтоНУ3,"                     // <Характеристика.ВидыСубконтоТиповые>
	+ "ОстатокВзаиморасчетов,"
	+ "СуммаВзаиморасчетов,"              // <Число,15,2> - сумма в валюте взаиморасчетов
	+ "СуммаРегл,"                          // <Число,15,2> - сумма в рублях в оценке для бух.учета
	+ "СуммаНУ,"                          // <Число,15,2> - сумма в рублях в оценке для налогового учета
	+ "Содержание";                       // <Строка,150>

	Параметры.Вставить("Взаиморасчеты", ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаВзаиморасчетов, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Функция ПодготовитьПараметрыЗадолженностиКорректировкаДолга(ТаблицаВзаиморасчетов, ТаблицаРеквизиты, ПереносЗадолженности)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                    // <Дата> - период движений - дата документа
	+ "Регистратор,"               // <ДокументСсылка>
	+ "ИспользоватьВспомогательныйСчет,"//<Булево> - реквизит шапки документа
	+ "Организация,"               // <СправочникСсылка.Организации>
	+ "СтруктурноеПодразделение,"  // <СправочникСсылка.ПодразделениеОрганизации>
	+ "ВидОперации,"               // <ПеречисленияСсылка.ВидыОперацийКорректировкаДолга> 
	+ "ВалютаДокумента,"           // <СправочникСсылка.Валюты>
	+ "ВидУчетаНУ," 			   // <СправочникСсылка.ВидыУчетаНУ>
	+ "НеобходимостьОтраженияВНУ," // <Булево> - Истина для расчетов с покупателями по организации, применяющей УСН патент
	+ "НаправлениеДвижения";       // <Строка> - "Поступление" при погашении дебиторской задолженности (поступлении денежных средств)
	                               //          - "Выбытие" при погашении кредиторской задолженности (выбытии денежных средств)

	ОбщегоНазначенияБКВызовСервера.ДобавитьКолонкуВТаблицуЗначений(ТаблицаРеквизиты, "ИспользоватьВспомогательныйСчет", Ложь);

	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Взаиморасчеты

	СписокОбязательныхКолонок = ""
	+ "Контрагент,"                       // <СправочникСсылка.Контрагенты> - контрагент, задолженность по которому погашается
	+ "ДоговорКонтрагента,"               // <СправочникСсылка.ДоговорыКонтрагентов> - договор, задолженность по которому погашается
	+ "ДокументРасчетов,"                 // <ДокументСсылка> - документ расчетов, задолженность по которому погашается
	+ "ВалютаВзаиморасчетов,"             // <СправочникСсылка.Валюты> - валюта расчетов по договору
	+ ?(ПереносЗадолженности = Истина,"КорВалютаВзаиморасчетов,","") // <СправочникСсылка.Валюты> - валюта расчетов по договору										
	+ ?(ПереносЗадолженности = Истина,"ВалютаВзаиморасчетовСПолучателем,","") // <СправочникСсылка.Валюты> - валюта расчетов по договору										
	+ "СчетРасчетов,"                     // <ПланСчетовСсылка.Типовой> - счет расчетов, задолженность по которому погашается
	+ "СчетРасчетовНУ,"                    // <ПланСчетовСсылка.Налоговый> - счет расчетов, задолженность по которому погашается
	+ "КорСчет,"                          // <ПланСчетовСсылка.Хозрасчетный> - счет, корреспондирующий со счетом расчетов
	+ "КорСубконто1,"                     // <Характеристика.ВидыСубконтоТиповые>
	+ "КорСубконто2,"                     // <Характеристика.ВидыСубконтоТиповые>
	+ "КорСубконто3,"                     // <Характеристика.ВидыСубконтоТиповые>
	+ "КорСчетНУ,"                        // <ПланСчетовСсылка.Типовой> - счет, корреспондирующий со счетом расчетов
	+ "КорСубконтоНУ1,"                   // <Характеристика.ВидыСубконтоТиповые>
	+ "КорСубконтоНУ2,"                   // <Характеристика.ВидыСубконтоТиповые>
	+ "КорСубконтоНУ3,"                   // <Характеристика.ВидыСубконтоТиповые>
	+ "СуммаВзаиморасчетов,"              // <Число,15,2> - сумма в валюте взаиморасчетов
	+ ?(ПереносЗадолженности = Истина,"КорСуммаВзаиморасчетов,","") // <СправочникСсылка.Валюты> - валюта расчетов по договору											
	+ "СуммаРегл,"                        // <Число,15,2> 
	+ "СуммаНУ,"                          // <Число,15,2>
	+ "Содержание"                       // <Строка,150>
	;
	
	Параметры.Вставить("Взаиморасчеты", ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаВзаиморасчетов, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Функция ПустаяТаблицаВзаиморасчетовЗадолженностиКорретировкаДолга()

	ПустаяТаблица = Новый ТаблицаЗначений();

	ПустаяТаблица.Колонки.Добавить("СчетРасчетов",          Новый ОписаниеТипов("ПланСчетовСсылка.Типовой"));
	ПустаяТаблица.Колонки.Добавить("СчетРасчетовНУ",        Новый ОписаниеТипов("ПланСчетовСсылка.Налоговый"));
	ПустаяТаблица.Колонки.Добавить("ВалютаВзаиморасчетов",  Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	ПустаяТаблица.Колонки.Добавить("ВалютаВзаиморасчетовСПолучателем",  Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	ПустаяТаблица.Колонки.Добавить("Контрагент",            Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ПустаяТаблица.Колонки.Добавить("ДоговорКонтрагента",    ПроцедурыБухгалтерскогоУчетаКлиентСерверПереопределяемый.ПолучитьОписаниеТиповДоговора());
	ПустаяТаблица.Колонки.Добавить("ДокументРасчетов",      Документы.ТипВсеСсылки());
	ПустаяТаблица.Колонки.Добавить("ДатаДокументаРасчетов", ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповДаты(ЧастиДаты.ДатаВремя));
	ПустаяТаблица.Колонки.Добавить("ОстатокВзаиморасчетов", ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
	ПустаяТаблица.Колонки.Добавить("СуммаВзаиморасчетов",   ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
	ПустаяТаблица.Колонки.Добавить("СуммаРегл",              ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
	ПустаяТаблица.Колонки.Добавить("СуммаНУ",               ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
	ПустаяТаблица.Колонки.Добавить("КорСчет",                 Новый ОписаниеТипов("ПланСчетовСсылка.Типовой"));
	ОписаниеТипаСубконто = Метаданные.ПланыВидовХарактеристик.ВидыСубконтоТиповые.Тип;
	
	Для Ном = 1 По 3 Цикл
		ПустаяТаблица.Колонки.Добавить("КорСубконто" + Ном, ОписаниеТипаСубконто);
	КонецЦикла;
	
	ПустаяТаблица.Колонки.Добавить("КорСчетНУ",             Новый ОписаниеТипов("ПланСчетовСсылка.Налоговый"));
	ОписаниеТипаСубконто = Метаданные.ПланыВидовХарактеристик.ВидыСубконтоТиповые.Тип;
	Для Ном = 1 По 3 Цикл
		ПустаяТаблица.Колонки.Добавить("КорСубконтоНУ" + Ном, ОписаниеТипаСубконто);
	КонецЦикла;

	ПустаяТаблица.Колонки.Добавить("КорВалютаВзаиморасчетов", Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	ПустаяТаблица.Колонки.Добавить("КорСуммаВзаиморасчетов", ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));	
	ПустаяТаблица.Колонки.Добавить("Содержание",                   ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповСтроки(150));

	Возврат ПустаяТаблица;

КонецФункции

Функция ПодготовитьСтруктуруТаблицВзаимозачета(ТаблицаДебиторскаяЗадолженность, ТаблицаКредиторскаяЗадолженность, ТаблицаРеквизиты, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыТаблицыВзаимозачета(ТаблицаДебиторскаяЗадолженность, 
		ТаблицаКредиторскаяЗадолженность, ТаблицаРеквизиты);

	Реквизиты = Параметры.Реквизиты[0];

	ТаблицаДебиторскаяЗадолженностьВзаимозачет = ПустаяТаблицаВзаиморасчетовПогашениеЗадолженности(Неопределено);
	ТаблицаКредиторскаяЗадолженностьВзаимозачет = ПустаяТаблицаВзаиморасчетовПогашениеЗадолженности(Неопределено);
	
	// Обход таблицы дебиторской задолженности.
	Для Каждого СтрокаДебиторскойЗадолженности Из Параметры.ТаблицаДебиторскаяЗадолженность Цикл

		Если ЗначениеЗаполнено(СтрокаДебиторскойЗадолженности.КорСчет) Тогда

			СтрокаВзаимозачета = ТаблицаДебиторскаяЗадолженностьВзаимозачет.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаВзаимозачета, СтрокаДебиторскойЗадолженности);

		Иначе

			// Обход таблицы кредиторской задолженности.
			Для Каждого СтрокаКредиторскойЗадолженности Из Параметры.ТаблицаКредиторскаяЗадолженность Цикл

				Если СтрокаДебиторскойЗадолженности.СуммаРегл = 0 Тогда
					Прервать;
				КонецЕсли;
				
				Если СтрокаКредиторскойЗадолженности.СуммаРегл = 0 Тогда
				    Продолжить;
				КонецЕсли;

			    Если ЗначениеЗаполнено(СтрокаКредиторскойЗадолженности.КорСчет) Тогда

					СтрокаВзаимозачета = ТаблицаКредиторскаяЗадолженностьВзаимозачет.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаВзаимозачета, СтрокаКредиторскойЗадолженности);

					СтрокаКредиторскойЗадолженности.СуммаРегл = 0;
					СтрокаКредиторскойЗадолженности.СуммаВзаиморасчетов = 0;

				Иначе

					СтрокаВзаимозачета = ТаблицаДебиторскаяЗадолженностьВзаимозачет.Добавить();
					ЗаполнитьПараметрыВзаимозачета(СтрокаВзаимозачета, СтрокаДебиторскойЗадолженности,
						СтрокаКредиторскойЗадолженности, Реквизиты);

				КонецЕсли;

			КонецЦикла;
		
		КонецЕсли;

	КонецЦикла;

	// Обход оставшейся кредиторской задолженности.
	Для Каждого СтрокаКредиторскойЗадолженности Из Параметры.ТаблицаКредиторскаяЗадолженность Цикл

		//если сумма взаиморасчетов = 0, а есть сумма Регл (то,сработает механизм переоценки валютных средст)
		Если  СтрокаКредиторскойЗадолженности.ВалютаВзаиморасчетов <> ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета()
                И СтрокаКредиторскойЗадолженности.СуммаВзаиморасчетов = 0 Тогда		
			Продолжить;
		КонецЕсли;

		Если СтрокаКредиторскойЗадолженности.СуммаРегл = 0 Тогда		
			Продолжить;
		КонецЕсли;

		СтрокаВзаимозачета = ТаблицаКредиторскаяЗадолженностьВзаимозачет.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаВзаимозачета, СтрокаКредиторскойЗадолженности);

	КонецЦикла;

	СтруктураТаблицВзаимозачета = Новый Структура;
	СтруктураТаблицВзаимозачета.Вставить("ТаблицаДебиторскаяЗадолженность", ТаблицаДебиторскаяЗадолженностьВзаимозачет);	
	СтруктураТаблицВзаимозачета.Вставить("ТаблицаКредиторскаяЗадолженность", ТаблицаКредиторскаяЗадолженностьВзаимозачет);	

	Возврат СтруктураТаблицВзаимозачета;

КонецФункции

Функция ПодготовитьПараметрыТаблицыВзаимозачета(ТаблицаДебиторскаяЗадолженность, 
	ТаблицаКредиторскаяЗадолженность,ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                    // <Дата> - период движений - дата документа
	+ "Регистратор,"               // <ДокументСсылка>
	+ "Организация,"               // <СправочникСсылка.Организации>
	+ "СтруктурноеПодразделение,"  // <СправочникСсылка.ПодразделенияОрганизации>
	+ "ВидУчетаНУ,"  
	+ "НеобходимостьОтраженияВНУ,"  
	+ "ВалютаДокумента";           // <СправочникСсылка.Валюты>

	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Взаиморасчеты

	СписокОбязательныхКолонок = ""
	+ "Контрагент,"                    // <СправочникСсылка.Контрагенты> - контрагент, задолженность по которому погашается
	+ "ДоговорКонтрагента,"            // <СправочникСсылка.ДоговорыКонтрагентов> - договор, задолженность по которому погашается
	+ "ДокументРасчетов,"              // <ДокументСсылка> - документ расчетов, задолженность по которому погашается
	+ "ВалютаВзаиморасчетов,"          // <СправочникСсылка.Валюты> - валюта расчетов по договору
	+ "СчетРасчетов,"                  // <ПланСчетовСсылка.Типовой> - счет расчетов, задолженность по которому погашается
	+ "СчетРасчетовНУ,"                  // <ПланСчетовСсылка.Налоговый> - счет расчетов, задолженность по которому погашается
	+ "КорСчет,"                       // <ПланСчетовСсылка.Типовой> - счет, корреспондирующий со счетом расчетов
	+ "КорСубконто1,"                  // <Характеристика.ВидыСубконтоТиповые>
	+ "КорСубконто2,"                  // <Характеристика.ВидыСубконтоТиповые>
	+ "КорСубконто3,"                  // <Характеристика.ВидыСубконтоТиповые>
	+ "КорСчетНУ,"                       // <ПланСчетовСсылка.Налоговый> - счет, корреспондирующий со счетом расчетов
	+ "КорСубконтоНУ1,"                  // <Характеристика.ВидыСубконтоТиповые>
	+ "КорСубконтоНУ2,"                  // <Характеристика.ВидыСубконтоТиповые>
	+ "КорСубконтоНУ3,"                  // <Характеристика.ВидыСубконтоТиповые>
	+ "СуммаВзаиморасчетов,"           // <Число,15,2> - сумма в валюте взаиморасчетов
	+ "СуммаРегл,"                       // <Число,15,2> - сумма в рублях в оценке для бух.учета
	+ "СуммаНУ,"                       // <Число,15,2> - сумма в рублях в оценке для налогового учета
	+ "Содержание";                   // <Строка,150>

	Параметры.Вставить("ТаблицаДебиторскаяЗадолженность", ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаДебиторскаяЗадолженность, СписокОбязательныхКолонок));

	Параметры.Вставить("ТаблицаКредиторскаяЗадолженность", ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаКредиторскаяЗадолженность, СписокОбязательныхКолонок));


	Возврат Параметры;

КонецФункции

Процедура ЗаполнитьПараметрыВзаимозачета(СтрокаВзаимозачета, СтрокаДебиторскойЗадолженности, СтрокаКредиторскойЗадолженности, Реквизиты)

	ЗаполнитьЗначенияСвойств(СтрокаВзаимозачета, СтрокаДебиторскойЗадолженности);

	Если НЕ ЗначениеЗаполнено(СтрокаВзаимозачета.КорСчет) Тогда
		СтрокаВзаимозачета.КорСчет = СтрокаКредиторскойЗадолженности.СчетРасчетов;
		СтрокаВзаимозачета.КорСубконто1 = СтрокаКредиторскойЗадолженности.Контрагент;
		СтрокаВзаимозачета.КорСубконто2 = СтрокаКредиторскойЗадолженности.ДоговорКонтрагента;
		СтрокаВзаимозачета.КорСубконто3 = СтрокаКредиторскойЗадолженности.ДокументРасчетов;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтрокаВзаимозачета.КорСчетНУ) Тогда
		СтрокаВзаимозачета.КорСчетНУ = СтрокаКредиторскойЗадолженности.СчетРасчетовНУ;
		СтрокаВзаимозачета.КорСубконтоНУ1 = СтрокаКредиторскойЗадолженности.Контрагент;
		СтрокаВзаимозачета.КорСубконтоНУ2 = СтрокаКредиторскойЗадолженности.ДоговорКонтрагента;		
	КонецЕсли;

	Если СтрокаКредиторскойЗадолженности.ВалютаВзаиморасчетов <> ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета() Тогда
		СтрокаВзаимозачета.СуммаВзаиморасчетов = Мин(СтрокаДебиторскойЗадолженности.СуммаВзаиморасчетов, СтрокаКредиторскойЗадолженности.СуммаВзаиморасчетов);
	КонецЕсли;	

	СтрокаВзаимозачета.СуммаРегл = Мин(СтрокаДебиторскойЗадолженности.СуммаРегл, СтрокаКредиторскойЗадолженности.СуммаРегл);
	
	СтрокаДебиторскойЗадолженности.СуммаРегл = СтрокаДебиторскойЗадолженности.СуммаРегл -
		СтрокаВзаимозачета.СуммаРегл;  		

	СтрокаКредиторскойЗадолженности.СуммаРегл = СтрокаКредиторскойЗадолженности.СуммаРегл -
		СтрокаВзаимозачета.СуммаРегл;	
	
		
	СтрокаДебиторскойЗадолженности.СуммаВзаиморасчетов = СтрокаДебиторскойЗадолженности.СуммаВзаиморасчетов -
		СтрокаВзаимозачета.СуммаВзаиморасчетов;  		

	СтрокаКредиторскойЗадолженности.СуммаВзаиморасчетов = СтрокаКредиторскойЗадолженности.СуммаВзаиморасчетов -
		СтрокаВзаимозачета.СуммаВзаиморасчетов;	


КонецПроцедуры


// ОБЩИЕ ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция ВидыСубконтоРасчетов(Счет)
	
	Результат = Новый Структура("ВидыСубконтоРасчетов, ИспользоватьСубконто1, ИспользоватьСубконто2, ИспользоватьСубконто3", Новый Массив, Ложь, Ложь, Ложь);
	
	Если ЗначениеЗаполнено(Счет) Тогда
		
		ШаблонВидыСубконтоРасчетов = Новый Массив;
		ШаблонВидыСубконтоРасчетов.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Контрагенты);
		ШаблонВидыСубконтоРасчетов.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Договоры);
		ШаблонВидыСубконтоРасчетов.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.ДокументыРасчетовСКонтрагентами);
		
		СвойстваСчета = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(Счет);
		ВидыСубконтоСчета = Новый Массив;
		Для НомерСубконто = 1 По 3 Цикл
			Если ЗначениеЗаполнено(СвойстваСчета["ВидСубконто" + НомерСубконто]) И Не СвойстваСчета["ВидСубконто" + НомерСубконто + "ТолькоОбороты"] Тогда
				ВидыСубконтоСчета.Добавить(СвойстваСчета["ВидСубконто" + НомерСубконто]);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого ВидСубконто Из ШаблонВидыСубконтоРасчетов Цикл
			Если ВидыСубконтоСчета.Найти(ВидСубконто) <> Неопределено Тогда 
				Результат.ВидыСубконтоРасчетов.Добавить(ВидСубконто);
				Результат.Вставить("ИспользоватьСубконто" + Результат.ВидыСубконтоРасчетов.Количество(), Истина);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат
	
КонецФункции

Функция ВидыСубконтоКонтрагентыДоговоры()

	ВидыСубконтоКонтрагентыДоговоры = Новый Массив;
	ВидыСубконтоКонтрагентыДоговоры.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Контрагенты);
	ВидыСубконтоКонтрагентыДоговоры.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Договоры);

	Возврат ВидыСубконтоКонтрагентыДоговоры;

КонецФункции

Функция РазличныеЗначенияКолонкиТаблицы(ТаблицаЗначений, ИмяКолонки)

	ВсеЗначенияКолонки = ТаблицаЗначений.ВыгрузитьКолонку(ИмяКолонки);
	РазличныеЗначения  = ОбщегоНазначенияБКВызовСервера.УдалитьПовторяющиесяЭлементыМассива(ВсеЗначенияКолонки);
	Возврат РазличныеЗначения;

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДИАЛОГОВ РАСЧЕТНЫХ ДОКУМЕНТОВ

// Определяется ведутся или нет взаиморасчеты по расчетным документам
//
// Возвращаемое значение:
//   Булево - истина - взаиморасчеты по документам учет ведется,
//			  ложь   - взаиморасчеты по документам учет не ведтся.
//
Функция ВедутсяВзаиморасчетыПоДокументам() Экспорт
	
	ЗапросКСчетамВзаиморасчетов = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	|	Типовой.Ссылка
	|ИЗ
	|	ПланСчетов.Типовой КАК Типовой
	|ГДЕ
	|	Типовой.ВидыСубконто.ВидСубконто = (&ВидСубконтоДокументыРасчетов)");
	
	ЗапросКСчетамВзаиморасчетов.УстановитьПараметр("ВидСубконтоДокументыРасчетов", ПланыВидовХарактеристик.ВидыСубконтоТиповые.ДокументыРасчетовСКонтрагентами);
	
	Возврат НЕ ЗапросКСчетамВзаиморасчетов.Выполнить().Пустой();
	
КонецФункции

