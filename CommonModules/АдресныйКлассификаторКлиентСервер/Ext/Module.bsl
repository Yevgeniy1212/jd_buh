////////////////////////////////////////////////////////////////////////////////
// АдресныйКлассификатор: содержит алгоритмы работы с адресным классификатором, 
//   исполняемые на клиенте и на сервере
//  
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Функция ставит в соответствие типу адресного элемента маску,
// через которую выделяется его значимый код
//
// Параметры:
//  ТипАдресногоЭлемента -  число - тип адресного элемента.
//
// Возвращаемое значение:
// Число - маска, при делении на которую выделяется значимый код
// адресного элемента
//
Функция ПолучитьМаскуПоТипу(ТипАдресногоЭлемента) Экспорт

	Если ТипАдресногоЭлемента = 1 Тогда
		Возврат МаскаОбласти();

	ИначеЕсли ТипАдресногоЭлемента = 2 Тогда
		Возврат МаскаРайона();

	ИначеЕсли ТипАдресногоЭлемента = 3 Тогда
		Возврат МаскаГорода();
	Иначе
		Возврат МаскаСела();
	КонецЕсли;

КонецФункции

// Функция формирует строку с названием адресного элемента,
// которое состоит из наименования и сокращения
//
// Параметры:
//  АдресныйЭлемент - элемент справочника Адресный классфикатор.
//
// Возвращаемое значение:
//  Название адресного элемента
//
Функция ПолучитьНазвание(АдресныйЭлемент) Экспорт

	Если АдресныйЭлемент.Код = 0 Тогда
		Возврат "";
	Иначе
		Возврат СокрЛП(АдресныйЭлемент.Наименование) + " " + СокрЛП(АдресныйЭлемент.Сокращение)
	КонецЕсли;

КонецФункции

// Функция возвращает тип адресного элемента исходя из кода КАТО
//  
//
// Возвращаемое значение:
// Число - тип адресного элемента
// Область -1, Район  - 2, Город - 3, сельский округ - 4, поселок, село - 5
Функция ПолучитьТипАдресногоЭлемента(КодОбласти, КодРайона = 0, КодОкруга =0 , КодНасПункта = 0, ТипЭлемента) Экспорт
	
	Если ТипЭлемента = 0 Тогда // Область
		Возврат 1;
		
	ИначеЕсли (ТипЭлемента = 2) или (ТипЭлемента = 4) Тогда
		Если (КодОкруга = 0) и (КодНасПункта = 0)Тогда // район EF HIJ = 0, k = 2,4
			Возврат 2;
		ИначеЕсли КодНасПункта = 0 Тогда 				// Сельский округ HIJ = 0, k = 2,4
			Возврат 4;		
		КонецЕсли;
		
		Если (ТипЭлемента = 2) и (КодОкруга >= 30) и (КодНасПункта > 0) Тогда // Село
			Возврат 4;
		КонецЕсли;				
		
	ИначеЕсли ТипЭлемента = 1 Тогда 
		Если (КодОбласти > 70) Тогда // города республиканского значения
			Если (КодРайона = 10) и (КодОкруга = 0) и (КодНасПункта = 0) Тогда
				Возврат 3;
			ИначеЕсли (КодРайона > 10 и КодРайона < 20) и (КодОкруга = 10) и (КодНасПункта = 0) Тогда // районы городов респ. значения
				Возврат 2;		
			КонецЕсли;	
		ИначеЕсли(КодОкруга = 10) и (КодНасПункта = 0) или
			(КодОкруга >= 20) и  (КодОкруга < 30) и (КодНасПункта > 0) Тогда // Город 			
			
			Возврат 3;		
		ИначеЕсли (КодОкруга >= 30) и (КодНасПункта > 0) Тогда               // Село
			Возврат 4;
		КонецЕсли;						
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции

// Функция ставит в соответствие типу адресного элемента маску,
// через которую выделяется его значимый код
//
// Параметры:
//  АдресныйЭлемент - элемент справочника "Адресный классификатор"
// для которого необходимо получить маску.
//
// Возвращаемое значение:
// Число - маска, при делении на которую выделяется значимый код
// адресного элемента
//
Функция ПолучитьМаску(АдресныйЭлемент) Экспорт

	Возврат ПолучитьМаскуПоТипу(АдресныйЭлемент.ТипАдресногоЭлемента);

КонецФункции

// Функция возвращает структуру с набором полей как у записи регистра сведений
//  АдресныйКлассификатор с пустым набором значений
//
// Параметры:
// Нет.
//
// Возвращаемое значение:
// Струтктура - структуру с набором полей как у записи регистра сведений
//  АдресныйКлассификатор с пустым набором значений
//
Функция ПустаяСтруктураАдреса() Экспорт
	
	СтруктураАдреса =  Новый Структура;
	СтруктураАдреса.Вставить("Код", 0);
	СтруктураАдреса.Вставить("Наименование", "");
	СтруктураАдреса.Вставить("Сокращение", "");
	СтруктураАдреса.Вставить("ТипАдресногоЭлемента", 0);
	СтруктураАдреса.Вставить("Индекс", "");
	СтруктураАдреса.Вставить("КодОбластиВКоде", 0);
	СтруктураАдреса.Вставить("КодРайонаВКоде", 0);
	СтруктураАдреса.Вставить("КодГородаВКоде", 0);
	СтруктураАдреса.Вставить("КодНаселенногоПунктаВКоде", 0);
	СтруктураАдреса.Вставить("КодУлицыВКоде", 0);
	
	Возврат СтруктураАдреса;
	
КонецФункции

// Функция определяет входимость:
//  1. Номера дома (представленного в виде строки)
//     где Номер дома, это строка вида:
//     <СтрокаДом> пример: 58А, 32/1, 50А/8
//
//  2. Номера дома и номера корпуса (строения), в виде строки:
//     <СтрокаДом>к<СтрокаКорпус>,   пример: 32к1   это дом 32 корпус 1, 
//     <СтрокаДом>/<СтрокаКорпус>,   пример: 32/1   это дом 32 корпус 1, 
//     <СтрокаДом>стр<СтрокаКорпус>, пример: 32стр1 это дом 32 корпус 1, 
//		
//  3. Числа (номера дома) в заданный интервал чисел
//     При этом интервал задается строкой вида:
//     <Диапазон>[,<Диапазон>]
//     где Диапазон, это строка вида:
//     [Ч/Н]<Число>[-<Число>]
//     Префикс Ч или Н диапазона обозначает четность и нечетность входящих в него чисел
//     Пример: в интервал Ч12-14,Н1-5,20-29 входят числа 1,3,5,12,14 и все с 20 по 29
//
// Параметры: 
//  Номер - (число, строка) номер дома с корпусом
//  Интервал - (строка), интервал чисел (домов)
//
//  Истина - если заданное число входит в диапазон,
//  Ложь   - если не входит
//
Функция НомерДомаВИнтервале(Номер, Знач Интервал) Экспорт
	
	Пока НЕ ПустаяСтрока(Интервал) Цикл

		Позиция = Найти(Интервал, ",");
		Если Позиция = 0 Тогда
			Возврат ВходитВИнтервал(Номер, Интервал);
		Иначе
			Если ВходитВИнтервал(Номер, СокрЛП(Лев(Интервал, Позиция - 1))) Тогда
				Возврат Истина;
			Иначе
				Интервал = Сред(Интервал, Позиция + 1);
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;

	Возврат Ложь;

КонецФункции

// Функция определяет входимость числа в заданный диапазон
//  При этом диапазон задается как это описано в комментарии к функции ЧислоВИнтервале
//
// Параметры: 
//  Номер - (число, строка) номер дома с корпусом
//  Интервал - (строка), интервал чисел (домов)
//
// Возвращаемое значение:
//  Истина - если заданное число входит в диапазон,
//  Ложь   - если не входит
//
Функция ВходитВИнтервал(Знач Номер, Интервал) Экспорт

	Если ПустаяСтрока("" + Номер) Тогда
		Возврат Ложь;
	КонецЕсли;

	Если НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Номер, Ложь) Тогда
		Возврат СтрЗаменить("" + Номер, " ", "") = СтрЗаменить("" + Интервал, " ", "");
	КонецЕсли;

	Номер = Число(Номер);

	ТолькоЧислоИнтервал = СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Интервал, Ложь);
	
	Если ТолькоЧислоИнтервал Тогда
		Если Номер = Число(Интервал) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;

	Если Найти(Интервал,"Ч") > 0 Тогда // диапазон четных чисел
		Интервал      = СтрЗаменить(Интервал, "Ч", "");
		Четность = 2;
		
	ИначеЕсли Найти(Интервал,"Н") > 0 Тогда // диапазон нечетных чисел
		Интервал      = СтрЗаменить(Интервал, "Н", "");
		Четность = 1;
		
	ИначеЕсли (Найти(Интервал, "-") = 0) И ТолькоЧислоИнтервал Тогда 
		// интервал это дом представленный в виде строки
		Возврат Ложь;
		
	Иначе
		Четность=0;
		
	КонецЕсли;
	
	Интервал = СтрЗаменить(Интервал, ")", ""); // на всякий случай уберем скобки
	Интервал = СтрЗаменить(Интервал, "(", "");
	Позиция  = Найти(Интервал, "-");
	Попали = 0;
	
	Если Позиция <> 0 Тогда
		МинЗначение  = Число(Лев(Интервал, Позиция - 1));
		МаксЗначение = Число(Сред(Интервал, Позиция + 1));
		Если (Номер >= МинЗначение) И (Номер <= МаксЗначение) Тогда
			Попали = 1;
		КонецЕсли;
		
	Иначе
		Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Интервал, Ложь) Тогда
			Если Номер = Число(Интервал) Тогда
				Попали = 1;
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;
	
	Если (Попали = 1) И (
	((Четность = 2) И (Номер % 2 = 0)) ИЛИ 
	((Четность = 1) И (Номер % 2 = 1)) ИЛИ 
	 (Четность = 0)) Тогда
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Поиск первого файла по маске без учета регистра (особенностей операционной системы)
//
// Параметры:
//     Каталог  - Строка - каталог, в котором ищется файл
//     ИмяФайла - Строка - имя искомого файла
//
// Возвращаемое значение:
//     Структура - описание найденного файла. Содержит поля:
//         * Существует       - Булево - флаг того, что указанный файл существует
//         * Имя              - Строка - характеристика найденного файла, см. описания типа Файл
//         * ИмяБезРасширения - Строка - характеристика найденного файла, см. описания типа Файл
//         * ПолноеИмя        - Строка - характеристика найденного файла, см. описания типа Файл
//         * Путь             - Строка - характеристика найденного файла, см. описания типа Файл
//         * Расширение       - Строка - характеристика найденного файла, см. описания типа Файл
//
Функция НайтиФайл(Знач Каталог, Знач ИмяФайла) Экспорт
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	Платформа = СистемнаяИнформация.ТипПлатформы;
	
	НеУчитыватьРегистр = Платформа = ТипПлатформы.Windows_x86 Или Платформа = ТипПлатформы.Windows_x86_64;
	
	Если НеУчитыватьРегистр Тогда
		Маска = ВРег(ИмяФайла);
	Иначе
		Маска = "";
		Для Позиция = 1 По СтрДлина(ИмяФайла) Цикл
			Символ = Сред(ИмяФайла, Позиция, 1);
			ВерхнийРегистр = ВРег(Символ);
			НижнийРегистр  = НРег(Символ);
			Если ВерхнийРегистр = НижнийРегистр Тогда
				Маска = Маска + Символ;
			Иначе
				Маска = Маска + "[" + ВерхнийРегистр + НижнийРегистр + "]";
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Результат = Новый Структура("Существует, Имя, ИмяБезРасширения, ПолноеИмя, Путь, Расширение", Ложь); 
	Варианты = НайтиФайлы(Каталог, Маска);
	Если Варианты.Количество() > 0 Тогда 
		Результат.Существует = Истина;
		ЗаполнитьЗначенияСвойств(Результат, Варианты[0]);
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Удаляет временный файл. 
// Если при попытке удаления возникает ошибка, она игнорируется - файл будет удален позднее
//
Процедура УдалитьВременныйФайл(Знач ПолноеИмяФайла) Экспорт
	
	Попытка
		УдалитьФайлы(ПолноеИмяФайла)
	Исключение
		// Дополнительная обработка не требуется
	КонецПопытки
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С АДРЕСНЫМ КОДОМ

// Маска  СС РРР ПП ППП
//        СС   		- код области
//        РР  		- код района
//        ПП ППП  	- код населенного пункта (города, села, поселка)

// Функция возвращает маску  для определения номера элемента в структуре кода 
//
// Параметры: 
// Нет
//
// Возвращаемое значение:
//  Число - маска с единица в значимых разрядах и нулями в остальных
//
Функция МаскаОбласти() Экспорт
	Возврат 10000000;
КонецФункции

// Функция возвращает маску  для определения номера элемента в структуре кода 
//
// Параметры: 
// Нет
//
// Возвращаемое значение:
//  Число - маска с единица в значимых разрядах и нулями в остальных
//
Функция МаскаРайона() Экспорт
	Возврат 100000;
КонецФункции

// Функция возвращает маску  для определения номера элемента в структуре кода 
//
// Параметры: 
// Нет
//
// Возвращаемое значение:
//  Число - маска с единица в значимых разрядах и нулями в остальных
//
Функция МаскаГорода() Экспорт
	Возврат 1;
КонецФункции

// Функция возвращает маску  для определения номера элемента в структуре кода 
//
// Параметры: 
// Нет
//
// Возвращаемое значение:
//  Число - маска с единица в значимых разрядах и нулями в остальных
//
Функция МаскаСела() Экспорт
	Возврат 1;
КонецФункции

// Функция возвращает маску  для определения номера элемента в структуре кода 
//
// Параметры: 
// Нет
//
// Возвращаемое значение:
//  Число - маска с единица в значимых разрядах и нулями в остальных
//
Функция МаскаНасПункта() Экспорт
	Возврат 1;
КонецФункции

