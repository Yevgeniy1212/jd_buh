////////////////////////////////////////////////////////////////////////////////
// УчетДоходовРасходов: модуль предназначен для реализации методов, связанных 
//   с отражением доходов и расходов на счетах учета, а также реализации 
//   механизма переоценки счетов.
//  
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// РЕАЛИЗАЦИЯ ТОВАРОВ И УСЛУГ

// Возвращает таблицы значений с выручкой от реализации собственных товаров и услуг:
//		СобственныеТоварыУслуги 		- проданные товары купленные (или собственного производства) и оказанные услуги
//
// Параметры
//  ТаблицаТоварыУслуги  - ТаблицаЗначений - товары и услуги, реализованные документом
//                       Создается в модуле менеджера документа
//  ТаблицаРеквизиты 	 - ТаблицаЗначений - содержимое шапки документа и вспомогательных значений
//                       Создается в модуле менеджера документа
//  ТаблицаВзаиморасчеты - ТаблицаЗначений - содержимое шапки документа и вспомогательных значений
//                       Является результатом функции УчетВзаиморасчетов.ПодготовитьТаблицуВзаиморасчетовПриЗачетеАванса().
//						 Заполняется после подготовки параметров мененджером документа, но до формирования движений
//  Отказ              	 - Булево - флаг отказа от проведения
//
// Возвращаемое значение:
//   Структура   - с таблицами значений
//
Функция ПодготовитьТаблицыВыручкиОтРеализации(ТаблицаТоварыУслуги, ТаблицаВзаиморасчеты, ТаблицаРеквизиты, Отказ) Экспорт
	
	Параметры = ПодготовитьПараметрыВыручкиОтРеализации(
		ТаблицаТоварыУслуги, ТаблицаВзаиморасчеты, ТаблицаРеквизиты);
		
	Возврат ТаблицыВыручкиОтРеализации(Параметры, Отказ);
	
КонецФункции

// Формируются проводки по учету выручки от реализации собственных товаров и услуг 
//
// Параметры
//  ТаблицаСобственныеТоварыУслуги  - ТаблицаЗначений - подготовленные для учета выручки данные по собственным товарам и услугам.
//                       Создается в модуле документа путем вызова функции УчетДоходовРасходов.ПодготовитьТаблицыВыручкиОтРеализации()
//  Движения           - коллекция движений документа
//  Отказ              - Булево - флаг отказа от проведения
//
Процедура СформироватьДвиженияРеализация(ТаблицаСобственныеТоварыУслуги, ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Параметры = ПодготовитьПараметрыРеализация(ТаблицаСобственныеТоварыУслуги, ТаблицаРеквизиты);
	
	Если Параметры.Реквизиты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты 	= Параметры.Реквизиты[0];
	
	// Проводки
	СформироватьДвиженияРеализацияСобственныхТоваровУслуг(
		Параметры.ТаблицаСобственныеТоварыУслуги, 
		Реквизиты, 
		Движения, 
		Отказ);

КонецПроцедуры

Функция ПолучитьТаблицуРеализацииПоКурсуАвансов(Параметры, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(Параметры.Реквизиты)
	 Или Не ЗначениеЗаполнено(Параметры.ТоварыУслуги) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Реквизиты                    = Параметры.Реквизиты[0];
	ТаблицаПоступлениеРеализация = Параметры.ТоварыУслуги;
	ТаблицаВзаиморасчеты         = Параметры.Взаиморасчеты;
	
	// Дополнительно добавим колонку суммы для последующего использования в качестве базиса.
	Если ТаблицаПоступлениеРеализация.Колонки.Найти("СуммаБазис") = Неопределено Тогда
		ТаблицаПоступлениеРеализация.Колонки.Добавить("СуммаБазис", ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
		
		ТаблицаПоступлениеРеализация.ЗагрузитьКолонку(ТаблицаПоступлениеРеализация.ВыгрузитьКолонку("Сумма"), "СуммаБазис");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТаблицаВзаиморасчеты) Тогда
		
		Возврат ТаблицаПоступлениеРеализация;
		
	КонецЕсли;
	
	Период          = Реквизиты.Период;
	ВалютаРеглУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	ТаблицаДоговоров = ТаблицаВзаиморасчеты.Скопировать(, "ДоговорКонтрагента, ВалютаВзаиморасчетов");
	ТаблицаДоговоров.Свернуть("ДоговорКонтрагента, ВалютаВзаиморасчетов");
	ТаблицаВзаиморасчеты.Индексы.Добавить("ДоговорКонтрагента");
	
	ТаблицаРезультат = ТаблицаПоступлениеРеализация.СкопироватьКолонки();
	
	Для каждого СтрокаДоговора Из ТаблицаДоговоров Цикл
		
		ВалютаВзаиморасчетов     = СтрокаДоговора.ВалютаВзаиморасчетов;
		
		Отбор = Новый Структура("ДоговорКонтрагента", СтрокаДоговора.ДоговорКонтрагента);
		ТаблицаВзаиморасчетыПоДоговору = ТаблицаВзаиморасчеты.Скопировать(Отбор);
		
		СуммаКорректировки = ТаблицаВзаиморасчетыПоДоговору.Итог("СуммаРеглПоКурсуАванса") 
			- ТаблицаВзаиморасчетыПоДоговору.Итог("СуммаРегл");
			
		Если ТаблицаПоступлениеРеализация.Колонки.Найти("ДоговорКонтрагента") = Неопределено Тогда
			ТаблицаРезультатПоДоговору = ТаблицаПоступлениеРеализация.Скопировать();
		Иначе
			ТаблицаРезультатПоДоговору = ТаблицаПоступлениеРеализация.Скопировать(Отбор);
		КонецЕсли;
		
		Если ВалютаВзаиморасчетов = ВалютаРеглУчета 
			ИЛИ СуммаКорректировки = 0 Тогда
			ОбщегоНазначенияБКВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаРезультатПоДоговору, ТаблицаРезультат);
			Продолжить;
		КонецЕсли;
		
		// БУ - корректируются значения колонки СуммаБУ.
		Сумма = ТаблицаРезультатПоДоговору.Итог("Сумма");
		ОбщегоНазначенияБКВызовСервера.РаспределитьСуммуПоКолонкеТаблицы(
			Сумма + СуммаКорректировки,
			ТаблицаРезультатПоДоговору,
			"Сумма",
			"СуммаБазис");
		
		// Результат корректировки по договору добавляем в общую таблицу.
		ОбщегоНазначенияБКВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаРезультатПоДоговору, ТаблицаРезультат);
	
	КонецЦикла;
	
	Возврат ТаблицаРезультат;
	
КонецФункции

Функция ПолучитьТаблицуПоступленияРеализацииПоКурсуАвансов(Параметры, Отказ) Экспорт
	
	Если Параметры.Реквизиты = Неопределено
		ИЛИ Параметры.Реквизиты.Количество() = 0
		ИЛИ Параметры.ТоварыУслуги = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Реквизиты                    = Параметры.Реквизиты[0];
	ТаблицаПоступлениеРеализация = Параметры.ТоварыУслуги;
	ТаблицаВзаиморасчеты         = Параметры.Взаиморасчеты;
	
	// Дополнительно добавим колонку суммы для последующего использования в качестве базиса.
	Если ТаблицаПоступлениеРеализация.Колонки.Найти("СуммаБазис") = Неопределено Тогда
		ТаблицаПоступлениеРеализация.Колонки.Добавить("СуммаБазис", ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
		
		ТаблицаПоступлениеРеализация.ЗагрузитьКолонку(ТаблицаПоступлениеРеализация.ВыгрузитьКолонку("Сумма"), "СуммаБазис");
	КонецЕсли;
	
	Если ТаблицаВзаиморасчеты = Неопределено
		ИЛИ ТаблицаВзаиморасчеты.Количество() = 0 Тогда
		
		Возврат ТаблицаПоступлениеРеализация;
		
	КонецЕсли;
	
	Период          = Реквизиты.Период;
	ВалютаРеглУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	ТаблицаДоговоров = ТаблицаВзаиморасчеты.Скопировать(, "ДоговорКонтрагента, ВалютаВзаиморасчетов");
	ТаблицаДоговоров.Свернуть("ДоговорКонтрагента, ВалютаВзаиморасчетов");
	ТаблицаВзаиморасчеты.Индексы.Добавить("ДоговорКонтрагента");
	
	ТаблицаРезультат = ТаблицаПоступлениеРеализация.СкопироватьКолонки();
	
	Для каждого СтрокаДоговора Из ТаблицаДоговоров Цикл
		
		ВалютаВзаиморасчетов     = СтрокаДоговора.ВалютаВзаиморасчетов;
		
		Отбор = Новый Структура("ДоговорКонтрагента", СтрокаДоговора.ДоговорКонтрагента);
		ТаблицаВзаиморасчетыПоДоговору = ТаблицаВзаиморасчеты.Скопировать(Отбор);
		
		СуммаКорректировки = ТаблицаВзаиморасчетыПоДоговору.Итог("СуммаРеглПоКурсуАванса") 
			- ТаблицаВзаиморасчетыПоДоговору.Итог("СуммаРегл");
			
		Если ТаблицаПоступлениеРеализация.Колонки.Найти("ДоговорКонтрагента") = Неопределено Тогда
			ТаблицаРезультатПоДоговору = ТаблицаПоступлениеРеализация.Скопировать();
		Иначе
			ТаблицаРезультатПоДоговору = ТаблицаПоступлениеРеализация.Скопировать(Отбор);
		КонецЕсли;
		
		Если ВалютаВзаиморасчетов = ВалютаРеглУчета 
			ИЛИ СуммаКорректировки = 0 Тогда
			ОбщегоНазначенияБКВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаРезультатПоДоговору, ТаблицаРезультат);
			Продолжить;
		КонецЕсли;
		
		// БУ - корректируются значения колонки Сумма
		Сумма = ТаблицаРезультатПоДоговору.Итог("Сумма");
		ОбщегоНазначенияБКВызовСервера.РаспределитьСуммуПоКолонкеТаблицы(
			Сумма + СуммаКорректировки,
			ТаблицаРезультатПоДоговору,
			"Сумма",
			"СуммаБазис");
		
		// Результат корректировки по договору добавляем в общую таблицу
		ОбщегоНазначенияБКВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаРезультатПоДоговору, ТаблицаРезультат);
	
	КонецЦикла;
	
	Возврат ТаблицаРезультат;
	
КонецФункции

Функция ПодготовитьТаблицыПоступленияПоКурсуАвансов(СтруктураТаблицДокумента, ТаблицаВзаиморасчеты, Реквизиты) Экспорт
	
	Если Реквизиты = Неопределено
		ИЛИ Реквизиты.Количество() = 0
		ИЛИ НЕ Реквизиты[0].ОпределятьСтоимостьПриобретенияПоКурсуАванса Тогда
		Возврат СтруктураТаблицДокумента;
	КонецЕсли;
	
	ТаблицыПоступленияПоКурсуАвансов = ПолучитьТаблицыПоступленияРеализацииПоКурсуАвансов(СтруктураТаблицДокумента,
		ТаблицаВзаиморасчеты, Реквизиты[0].Период);
	
	Возврат ТаблицыПоступленияПоКурсуАвансов;
	
КонецФункции

// Возвращает структуру таблиц, состав которой и список колонок совпадает с переданными в параметре ТаблицыДокумента,
// а тенговые суммы скорректированы с учетом курсов зачтенных валютных авансов
//
// Параметры
//  ТаблицыДокумента  - Структура - структура таблиц документа. Вместо таблицы может передаваться Неопределено.
//                        Если передается таблица, она обязательно должна иметь колонки:
//                        Сумма, СуммаНДС.
//                        Состав остальных колонок может быть произвольным.
//  Взаиморасчеты     - ТаблицаЗначений - таблица взаиморасчетов по документу. Обязательно должна иметь колонки:
//                        ДоговорКонтрагента, ВалютаВзаиморасчетов, СуммаРегл, СуммаРеглПоКурсуАванса
//  Период            - Дата - дата документа поступления или реализации
//
// Возвращаемое значение:
//   Структура   - структура таблиц, состав и список колонок которых совпадает с переданными в параметре ТаблицыДокумента,
//                   а рублевые суммы скорректированы с учетом курсов зачтенных валютных авансов
//
Функция ПолучитьТаблицыПоступленияРеализацииПоКурсуАвансов(ТаблицыДокумента, Взаиморасчеты, Период) Экспорт
	
	Результат = Новый Структура;
	ТаблицыЗначений = Новый Структура;
	Для каждого СтрокаТаблицы Из ТаблицыДокумента Цикл
		Если СтрокаТаблицы.Значение = Неопределено Тогда
			Результат.Вставить(СтрокаТаблицы.Ключ, Неопределено);
		Иначе
			ТаблицыЗначений.Вставить(СтрокаТаблицы.Ключ, СтрокаТаблицы.Значение);
		КонецЕсли;
	КонецЦикла;
	
	// Рассчитаем сумму базиса.
	Для каждого СтрокаТаблицы Из ТаблицыЗначений Цикл
		Если СтрокаТаблицы.Значение.Колонки.Найти("СуммаБазис") = Неопределено Тогда
			СтрокаТаблицы.Значение.Колонки.Добавить("СуммаБазис", ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
		КонецЕсли;
		
		СтрокаТаблицы.Значение.ЗагрузитьКолонку(СтрокаТаблицы.Значение.ВыгрузитьКолонку("Сумма"), "СуммаБазис");
		
	КонецЦикла;
	
	Если Взаиморасчеты.Количество() = 0 Тогда
		Для каждого СтрокаТаблицы Из ТаблицыЗначений Цикл
			Результат.Вставить(СтрокаТаблицы.Ключ, СтрокаТаблицы.Значение);
		КонецЦикла;
		Возврат Результат;
	КонецЕсли;
	
	Для каждого СтрокаТаблицы Из ТаблицыЗначений Цикл
		Результат.Вставить(СтрокаТаблицы.Ключ, СтрокаТаблицы.Значение.СкопироватьКолонки());
	КонецЦикла;
	
	ВалютаРеглУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	Договоры = Взаиморасчеты.Скопировать(, "ДоговорКонтрагента, ВалютаВзаиморасчетов");
	Договоры.Свернуть("ДоговорКонтрагента, ВалютаВзаиморасчетов");
	Взаиморасчеты.Индексы.Добавить("ДоговорКонтрагента");
	
	СводнаяТаблица = Новый ТаблицаЗначений;
	СводнаяТаблица.Колонки.Добавить("Ключ",                   Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(50)));
	СводнаяТаблица.Колонки.Добавить("Сумма",                  Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	СводнаяТаблица.Колонки.Добавить("СуммаРегл",              Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	СводнаяТаблица.Колонки.Добавить("СуммаНДС",               Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	СводнаяТаблица.Колонки.Добавить("СуммаВзаиморасчетов",    Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	СводнаяТаблица.Колонки.Добавить("СуммаНДСВзаиморасчетов", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
		
	Для каждого СтрокаДоговора Из Договоры Цикл
		
		Если СтрокаДоговора.ВалютаВзаиморасчетов = ВалютаРеглУчета Тогда
			ТребуетсяКорректировка = Ложь;
		Иначе
			Отбор = Новый Структура("ДоговорКонтрагента", СтрокаДоговора.ДоговорКонтрагента);
			ВзаиморасчетыПоДоговору = Взаиморасчеты.Скопировать(Отбор);
			СуммаКорректировки = ВзаиморасчетыПоДоговору.Итог("СуммаРеглПоКурсуАванса") - ВзаиморасчетыПоДоговору.Итог("СуммаРегл");
			ТребуетсяКорректировка = (СуммаКорректировки <> 0);
		КонецЕсли;
		
		Если НЕ ТребуетсяКорректировка Тогда
			
			Для каждого СтрокаТаблицы Из ТаблицыЗначений Цикл
				ИсходнаяТаблица = СтрокаТаблицы.Значение;
				Если ИсходнаяТаблица.Колонки.Найти("ДоговорКонтрагента") = Неопределено Тогда
					ОбщегоНазначенияБКВызовСервера.ЗагрузитьВТаблицуЗначений(ИсходнаяТаблица, Результат[СтрокаТаблицы.Ключ]);
				Иначе
					ОбщегоНазначенияБКВызовСервера.ЗагрузитьВТаблицуЗначений(ИсходнаяТаблица.Скопировать(Отбор), Результат[СтрокаТаблицы.Ключ]);
				КонецЕсли;
			КонецЦикла;
			
			Продолжить;
			
		КонецЕсли;
		
		// Корректировка требуется. Создаем структуру таблиц по договору
		
		РезультатПоДоговору = Новый Структура;
		Для каждого СтрокаТаблицы Из ТаблицыЗначений Цикл
			ИсходнаяТаблица = СтрокаТаблицы.Значение;
			Если ИсходнаяТаблица.Колонки.Найти("ДоговорКонтрагента") = Неопределено Тогда
				РезультатПоДоговору.Вставить(СтрокаТаблицы.Ключ, ИсходнаяТаблица.Скопировать());
			Иначе
				РезультатПоДоговору.Вставить(СтрокаТаблицы.Ключ, ИсходнаяТаблица.Скопировать(Отбор));
			КонецЕсли;
		КонецЦикла;
	
		// Первый этап - распределяем суммы корректировки между таблицами по договору
		
		СводнаяТаблица.Очистить();
		Для каждого СтрокаПоДоговору Из РезультатПоДоговору Цикл
			
			НоваяСтрока = СводнаяТаблица.Добавить();
			НоваяСтрока.Ключ = СтрокаПоДоговору.Ключ;
			// Заполняем колонки, по которым определяется база распределения
			НоваяСтрока.Сумма = СтрокаПоДоговору.Значение.Итог("Сумма");
			НоваяСтрока.СуммаНДС = СтрокаПоДоговору.Значение.Итог("СуммаНДС");
			НоваяСтрока.СуммаВзаиморасчетов = СтрокаПоДоговору.Значение.Итог("СуммаВзаиморасчетов");
			НоваяСтрока.СуммаНДСВзаиморасчетов = СтрокаПоДоговору.Значение.Итог("СуммаНДСВзаиморасчетов");
			
		КонецЦикла;
		
		// БУ - корректируются значения колонки СуммаРегл
		ОбщаяСуммаБУ = СводнаяТаблица.Итог("Сумма") + СуммаКорректировки;
		ОбщегоНазначенияБКВызовСервера.РаспределитьСуммуПоКолонкеТаблицы(
			ОбщаяСуммаБУ, СводнаяТаблица, "СуммаРегл", "Сумма");
		
		// Второй этап - распределяем общую сумму корректировки по каждой таблице между строками таблицы
		
		Для каждого ИтоговаяСтрока Из СводнаяТаблица Цикл
			
			ТаблицаПоДоговору = РезультатПоДоговору[ИтоговаяСтрока.Ключ];
			
			// БУ
			ОбщегоНазначенияБКВызовСервера.РаспределитьСуммуПоКолонкеТаблицы(
				ИтоговаяСтрока.СуммаРегл, ТаблицаПоДоговору, "Сумма", "СуммаБазис");
			
		КонецЦикла;
		
		// Третий этап - результаты корректировки по договору добавляем в общие таблицы результата
		
		Для каждого СтрокаПоДоговору Из РезультатПоДоговору Цикл
			ОбщегоНазначенияБКВызовСервера.ЗагрузитьВТаблицуЗначений(СтрокаПоДоговору.Значение, Результат[СтрокаПоДоговору.Ключ]);
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Возвращает таблицы значений с выручкой от реализации собственных товаров и услуг с указанием себестоимости списания:
//		СобственныеТоварыУслуги 		- проданные товары купленные (или собственного производства) и оказанные услуги
//
// Параметры
//  ТаблицыРеализация  - Структура - товары и услуги, реализованные документом
//                       Создается в модуле менеджера документа
//  ТаблицаСписанныеТовары - ТаблицаЗначений - таблица списанных товаров. 
//                       Является результатом функции УчетТоваров.ПодготовитьТаблицуСписанныеТовары().
//						 Заполняется после подготовки параметров мененджером документа, но до формирования движений
//  ТаблицаТовары        - ТаблицаЗначений - содержимое табличной части "Товары" документа и вспомогательных значений
//                       Создается в модуле менеджера документа
//  ТаблицаРеквизиты 	 - ТаблицаЗначений - содержимое шапки документа и вспомогательных значений
//                       Создается в модуле менеджера документа
//  Отказ              	 - Булево - флаг отказа от проведения
//
// Возвращаемое значение:
//   Структура - с таблицами значений
//
Процедура ПодготовитьТаблицыОтклоненияСтоимостиРеализацииОтСебестоимости(ТаблицыРеализация, ТаблицаСписанныеТовары, ТаблицаТовары, ТаблицаРеквизиты, Отказ) Экспорт
	
	Если ТаблицыРеализация = Неопределено 
		ИЛИ НЕ ТаблицыРеализация.Свойство("СобственныеТоварыУслуги")
		ИЛИ ТаблицаСписанныеТовары = Неопределено
		ИЛИ ТаблицаСписанныеТовары.Количество() = 0
		ИЛИ ТаблицаТовары = Неопределено
		ИЛИ ТаблицаТовары.Количество() = 0
		ИЛИ ТаблицаРеквизиты = Неопределено
		ИЛИ ТаблицаРеквизиты.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	Отбор = Новый Структура("ИмяСписка, НомерСтроки");
	МассивСтрокКУдалению = Новый Массив;
	Для Каждого СтрокаТаблицы Из ТаблицыРеализация.СобственныеТоварыУслуги Цикл
		ЗаполнитьЗначенияСвойств(Отбор, СтрокаТаблицы);
		
		СтрокиТаблицыТовары   = ТаблицаТовары.НайтиСтроки(Отбор);
		СтрокиСписанныеТовары = ТаблицаСписанныеТовары.НайтиСтроки(Отбор);
		Если СтрокиТаблицыТовары.Количество() = 0 ИЛИ СтрокиСписанныеТовары.Количество() = 0 Тогда 
			Продолжить;
		КонецЕсли;
		
		// подсчитаем общую стоимость списания
		ОбщаяСтоимость = 0;
		Для Каждого СтрокаСписания Из СтрокиСписанныеТовары Цикл
			ОбщаяСтоимость = ОбщаяСтоимость + СтрокаСписания.СуммаСписания;
		КонецЦикла;
		
		// определим разницу между суммой выручки без НДС и стоимостью списания и в зависимости от разницы будем определять счета отражения
		Разница = СтрокаТаблицы.Сумма - ОбщаяСтоимость;
		
		Если Разница > 0 Тогда 
			СтрокаТаблицы.Стоимость  = ОбщаяСтоимость;
			СтрокаТаблицы.Содержание = НСтр("ru='Положит. отклонение ст-ти реал-ции от себест-ти'", ОбщегоНазначения.КодОсновногоЯзыка());
			
		ИначеЕсли Разница < 0 Тогда 			
			СтрокаТоваров = СтрокиТаблицыТовары[0];
			СтрокаТаблицы.Стоимость  = ОбщаяСтоимость;
			СтрокаТаблицы.Содержание = НСтр("ru='Отрицат. отклонение ст-ти реал-ции от себест-ти'", ОбщегоНазначения.КодОсновногоЯзыка());
			
			СтрокаТаблицы.СчетДоходовБУ = СтрокаТоваров.СчетЗатратБУ;
			СтрокаТаблицы.СубконтоДоходовБУ1 = СтрокаТоваров.СубконтоЗатратБУ1;
			СтрокаТаблицы.СубконтоДоходовБУ2 = СтрокаТоваров.СубконтоЗатратБУ2;
			СтрокаТаблицы.СубконтоДоходовБУ3 = СтрокаТоваров.СубконтоЗатратБУ3;
			
			СтрокаТаблицы.СчетДоходовНУ = СтрокаТоваров.СчетЗатратНУ;
			СтрокаТаблицы.СубконтоДоходовНУ1 = СтрокаТоваров.СубконтоЗатратНУ1;
			СтрокаТаблицы.СубконтоДоходовНУ2 = СтрокаТоваров.СубконтоЗатратНУ2;
			СтрокаТаблицы.СубконтоДоходовНУ3 = СтрокаТоваров.СубконтоЗатратНУ3;
			
		ИначеЕсли Разница = 0 Тогда 
			МассивСтрокКУдалению.Добавить(СтрокаТаблицы);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого СтрокаТаблицы Из МассивСтрокКУдалению Цикл
		ТаблицыРеализация.СобственныеТоварыУслуги.Удалить(СтрокаТаблицы);
	КонецЦикла;
	
КонецПроцедуры

// ПОСТУПЛЕНИЕ УСЛУГ

Процедура СформироватьДвиженияПоступлениеУслуг(ТаблицаУслуги, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыПоступлениеУслуг(ТаблицаУслуги, ТаблицаРеквизиты);
	Если Параметры.Реквизиты.Количество() = 0
		ИЛИ Параметры.ТаблицаУслуги.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = Параметры.Реквизиты[0];
	
	Для каждого СтрокаТаблицы Из Параметры.ТаблицаУслуги Цикл

		Проводка = Движения.Типовой.Добавить();

		Проводка.Период      = Реквизиты.Период;
		Проводка.Организация = Реквизиты.Организация;
		Проводка.Содержание  = СтрокаТаблицы.Содержание;
		Проводка.Сумма       = СтрокаТаблицы.Сумма;
		
		Проводка.СчетДт      = СтрокаТаблицы.СчетЗатратБУ;
		
		СвойстваСчетаДт      = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
		
		Если СвойстваСчетаДт.Валютный Тогда
			Проводка.ВалютаДт        = Реквизиты.ВалютаВзаиморасчетов;
			Проводка.ВалютнаяСуммаДт = СтрокаТаблицы.СуммаВзаиморасчетов;
		КонецЕсли;
		
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаТаблицы.СубконтоЗатратБУ1);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаТаблицы.СубконтоЗатратБУ2);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтрокаТаблицы.СубконтоЗатратБУ3);
			
		Проводка.СчетКт = СтрокаТаблицы.КорСчет;
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, СтрокаТаблицы.ВидКорСубконто1, СтрокаТаблицы.КорСубконто1);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, СтрокаТаблицы.ВидКорСубконто2, СтрокаТаблицы.КорСубконто2);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, СтрокаТаблицы.ВидКорСубконто3, СтрокаТаблицы.КорСубконто3);
		
		СвойстваСчетаКт = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
		
		Если СвойстваСчетаКт.Валютный Тогда
			Проводка.ВалютаКт        = Реквизиты.ВалютаВзаиморасчетов;
			Проводка.ВалютнаяСуммаКт = СтрокаТаблицы.СуммаВзаиморасчетов;
		КонецЕсли;
		
		ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
			Проводка, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);
			
		// поводки по налоговому учету
		Если Реквизиты.НеобходимостьОтраженияВНУ Тогда
			
			Проводка = Движения.Налоговый.Добавить();
			
			Проводка.Период      = Реквизиты.Период;
			Проводка.Организация = Реквизиты.Организация;
			Проводка.Сумма       = СтрокаТаблицы.Сумма;
			Проводка.Содержание  = СтрокаТаблицы.Содержание;
			
			Проводка.СчетДт      = СтрокаТаблицы.СчетЗатратНУ;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаТаблицы.СубконтоЗатратНУ1);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаТаблицы.СубконтоЗатратНУ2);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтрокаТаблицы.СубконтоЗатратНУ3);
			
			Проводка.СчетКт = ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьСчетРасчетовСКонтрагентомНУ(СтрокаТаблицы.КорСчет);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, СтрокаТаблицы.ВидКорСубконто1, СтрокаТаблицы.КорСубконто1);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, СтрокаТаблицы.ВидКорСубконто2, СтрокаТаблицы.КорСубконто2);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, СтрокаТаблицы.ВидКорСубконто3, СтрокаТаблицы.КорСубконто3);
			
			ПроцедурыНалоговогоУчета.ВидУчетаНУ(Проводка, Реквизиты.ВидУчетаНУ);
			
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				Проводка, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);      
				
			ПроцедурыНалоговогоУчета.ОтразитьРасходыНаРемонтПроизводственныхОС(Движения.Налоговый,
										Новый Структура("СчетБУ, СубконтоБУ1, СубконтоБУ2,СубконтоБУ3",
										СтрокаТаблицы.СчетЗатратБУ, СтрокаТаблицы.СубконтоЗатратБУ1, СтрокаТаблицы.СубконтоЗатратБУ2, СтрокаТаблицы.СубконтоЗатратБУ3),
										Новый Структура("СчетНУ, СубконтоНУ1, СубконтоНУ2,СубконтоНУ3",
										СтрокаТаблицы.СчетЗатратНУ, СтрокаТаблицы.СубконтоЗатратНУ1, СтрокаТаблицы.СубконтоЗатратНУ2, СтрокаТаблицы.СубконтоЗатратНУ3),
										Реквизиты, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение,
										СтрокаТаблицы.Сумма, 0, Отказ);

		КонецЕсли;	
			
	КонецЦикла;
	
	Движения.Типовой.Записывать = Истина;
	
	Если Реквизиты.НеобходимостьОтраженияВНУ Тогда
		Движения.Налоговый.Записывать = Истина;
	КонецЕсли;

КонецПроцедуры

// АВАНСОВЫЙ ОТЧЕТ

Процедура СформироватьДвиженияАвансовыйОтчетПрочее(ТаблицаУслуги, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыАвансовыйОтчетПрочее(ТаблицаУслуги, ТаблицаРеквизиты);
	Если Параметры.Реквизиты.Количество() = 0
		ИЛИ Параметры.ТаблицаУслуги.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = Параметры.Реквизиты[0];
	
	Для каждого СтрокаТаблицы Из Параметры.ТаблицаУслуги Цикл

		Проводка = Движения.Типовой.Добавить();

		Проводка.Период      = Реквизиты.Период;
		Проводка.Организация = Реквизиты.Организация;
		Проводка.Содержание  = СтрокаТаблицы.Содержание;
		Проводка.Сумма       = СтрокаТаблицы.Сумма;
		
		Проводка.СчетДт      = СтрокаТаблицы.СчетЗатратБУ;
		
		СвойстваСчетаДт      = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
		
		Если СвойстваСчетаДт.Валютный Тогда
			Проводка.ВалютаДт        = Реквизиты.ВалютаВзаиморасчетов;
			Проводка.ВалютнаяСуммаДт = СтрокаТаблицы.СуммаВзаиморасчетов;
		КонецЕсли;
		
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаТаблицы.СубконтоЗатратБУ1);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаТаблицы.СубконтоЗатратБУ2);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтрокаТаблицы.СубконтоЗатратБУ3);
			
		Проводка.СчетКт      = СтрокаТаблицы.КорСчет;
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, СтрокаТаблицы.ВидКорСубконто1, СтрокаТаблицы.КорСубконто1);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, СтрокаТаблицы.ВидКорСубконто2, СтрокаТаблицы.КорСубконто2);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, СтрокаТаблицы.ВидКорСубконто3, СтрокаТаблицы.КорСубконто3);
		
		СвойстваСчетаКт      = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
		
		Если СвойстваСчетаКт.Валютный Тогда
			Проводка.ВалютаКт        = Реквизиты.ВалютаВзаиморасчетов;
			Проводка.ВалютнаяСуммаКт = СтрокаТаблицы.СуммаВзаиморасчетов;
		КонецЕсли;
		
		ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
			Проводка, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);
			
		// поводки по налоговому учету
		Если Реквизиты.НеобходимостьОтраженияВНУ Тогда
			
			Проводка = Движения.Налоговый.Добавить();
			
			Проводка.Период      = Реквизиты.Период;
			Проводка.Организация = Реквизиты.Организация;
			Проводка.Сумма       = СтрокаТаблицы.Сумма;
			Проводка.Содержание  = НСтр("ru = 'Прочие затраты'", ОбщегоНазначения.КодОсновногоЯзыка());
			
			Проводка.СчетДт      = СтрокаТаблицы.СчетЗатратНУ;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаТаблицы.СубконтоЗатратНУ1);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаТаблицы.СубконтоЗатратНУ2);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтрокаТаблицы.СубконтоЗатратНУ3);
			
			Проводка.СчетКт      = ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьСчетРасчетовСКонтрагентомНУ();
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтрокаТаблицы.Контрагент);
			
			ПроцедурыНалоговогоУчета.ВидУчетаНУ(Проводка, Реквизиты.ВидУчетаНУ);
			
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				Проводка, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);
				
			// отражение специфических затрат
			ПроцедурыНалоговогоУчета.ОтразитьРасходыНаРемонтПроизводственныхОС(Движения.Налоговый,
										Новый Структура("СчетБУ, СубконтоБУ1, СубконтоБУ2, СубконтоБУ3",
										СтрокаТаблицы.СчетЗатратБУ, СтрокаТаблицы.СубконтоЗатратБУ1, СтрокаТаблицы.СубконтоЗатратБУ2, СтрокаТаблицы.СубконтоЗатратБУ3),
										Новый Структура("СчетНУ, СубконтоНУ1, СубконтоНУ2, СубконтоНУ3",
										СтрокаТаблицы.СчетЗатратНУ, СтрокаТаблицы.СубконтоЗатратНУ1, СтрокаТаблицы.СубконтоЗатратНУ2, СтрокаТаблицы.СубконтоЗатратНУ3),
										Реквизиты, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение, СтрокаТаблицы.Сумма, 0, Отказ);
				
			//сразу сделаем погашение начисленной задолженности
			ПроводкаНУ_Погашение = Движения.Налоговый.Добавить();
			ЗаполнитьЗначенияСвойств(ПроводкаНУ_Погашение, Проводка, "Период, Организация, Сумма, Содержание") ;
			
			ПроводкаНУ_Погашение.СчетДт       = ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьСчетРасчетовСКонтрагентомНУ();
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ_Погашение.СчетДт, ПроводкаНУ_Погашение.СубконтоДт, "Контрагенты", СтрокаТаблицы.Контрагент);
			
			ПроводкаНУ_Погашение.СчетКт = ПроцедурыБухгалтерскогоУчета.ЗаполнитьСчетНалоговогоУчетаПоУмолчанию(СтрокаТаблицы.КорСчет, Реквизиты.Период, ПланыСчетов.Налоговый.ЗадолженностьПодотчетныхЛиц);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ_Погашение.СчетКт, ПроводкаНУ_Погашение.СубконтоКт, СтрокаТаблицы.ВидКорСубконто1, СтрокаТаблицы.КорСубконто1);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ_Погашение.СчетКт, ПроводкаНУ_Погашение.СубконтоКт, СтрокаТаблицы.ВидКорСубконто2, СтрокаТаблицы.КорСубконто2);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ_Погашение.СчетКт, ПроводкаНУ_Погашение.СубконтоКт, СтрокаТаблицы.ВидКорСубконто3, СтрокаТаблицы.КорСубконто3);
										
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
						ПроводкаНУ_Погашение, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);
			
			ПроцедурыНалоговогоУчета.ВидУчетаНУ(ПроводкаНУ_Погашение,  Реквизиты.ВидУчетаНУ);		
				
		КонецЕсли;	
			
	КонецЦикла;
	
	Движения.Типовой.Записывать = Истина;
	
	Если Реквизиты.НеобходимостьОтраженияВНУ Тогда
		Движения.Налоговый.Записывать = Истина;
	КонецЕсли;

КонецПроцедуры

// ВОЗВРАТ ТОВАРОВ И УСЛУГ ОТ ПОКУПАТЕЛЯ

// Формируются проводки по учету выручки от реализации собственных товаров и услуг 
//
// Параметры
//  ТаблицаСобственныеТоварыУслуги  - ТаблицаЗначений - подготовленные для учета выручки данные по собственным товарам и услугам.
//                       Создается в модуле документа путем вызова функции УчетДоходовРасходов.ПодготовитьТаблицыВыручкиОтРеализации()
//  Движения           - коллекция движений документа
//  Отказ              - Булево - флаг отказа от проведения
//
Процедура СформироватьДвиженияВозвратТоваровОтПокупателя(ТаблицаСобственныеТоварыУслуги, ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Параметры = ПодготовитьПараметрыВозвратТоваровОтПокупателя(ТаблицаСобственныеТоварыУслуги, ТаблицаРеквизиты);
	
	Если Параметры.Реквизиты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты 	= Параметры.Реквизиты[0];
	
	// Проводки
	СформироватьДвиженияВозвратОтПокупателя(
		Параметры.ТаблицаСобственныеТоварыУслуги, 
		Реквизиты, 
		Движения, 
		Отказ);

КонецПроцедуры

// ВОЗВРАТ ТОВАРОВ И УСЛУГ ПОСТАВЩИКУ

Процедура СформироватьДвиженияВозвратТоваровПоставщику(ТаблицаТоварыУслуги, ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Параметры = ПодготовитьПараметрыВозвратТоваровПоставщику(ТаблицаТоварыУслуги, ТаблицаРеквизиты);
	
	Если Параметры.Реквизиты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты 	= Параметры.Реквизиты[0];
	
	// Проводки
	СформироватьДвиженияВозвратПоставщику(
		Параметры.ТаблицаТоварыУслуги, 
		Реквизиты, 
		Движения, 
		Отказ);

КонецПроцедуры

// ПЕРЕОЦЕНКА ВАЛЮТНЫХ ОСТАТКОВ

Функция ПодготовитьТаблицуПереоценкаВалютныхОстатковПоПроводкамДокумента(ТаблицаРеквизиты, Движения, Отказ, СтруктураРегламентныхТаблиц = Неопределено) Экспорт
	
	Параметры = ПодготовитьПараметрыПереоценкаВалютныхОстатковПоПроводкамДокумента(ТаблицаРеквизиты);
	
	Если Параметры.Реквизиты.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Реквизиты = Параметры.Реквизиты[0];
	
	ПараметрыПереоценки = Новый Структура;
	ПараметрыПереоценки.Вставить("Регистратор",             Реквизиты.Регистратор);
	ПараметрыПереоценки.Вставить("Период",                  Реквизиты.Период);
	ПараметрыПереоценки.Вставить("Организация",             Реквизиты.Организация);
	ПараметрыПереоценки.Вставить("СтруктурноеПодразделение",Реквизиты.СтруктурноеПодразделение);
	ПараметрыПереоценки.Вставить("ВалютаДокумента",         Реквизиты.ВалютаДокумента);
	ПараметрыПереоценки.Вставить("ОтражатьВНУ",             Реквизиты.НеобходимостьОтраженияВНУ);
	ПараметрыПереоценки.Вставить("ВидУчетаНУ",              Реквизиты.ВидУчетаНУ);
	ПараметрыПереоценки.Вставить("КурсВзаиморасчетов",      Реквизиты.КурсВзаиморасчетов);
	ПараметрыПереоценки.Вставить("КратностьВзаиморасчетов", Реквизиты.КратностьВзаиморасчетов);
	
	РегламентнаяПереоценка = ПроцедурыБухгалтерскогоУчетаКлиентСервер.ЭтоРегламентнаяОперация(Реквизиты.Регистратор);
	ПараметрыПереоценки.Вставить("РегламентнаяПереоценка", РегламентнаяПереоценка);
	
	
	Если РегламентнаяПереоценка Тогда
		ПараметрыПереоценки.Вставить("Объект", Реквизиты.Объект);
		СтруктураВалютныхОстатков = ПодготовитьТаблицуВалютныхОстатковВсе(ПараметрыПереоценки, СтруктураРегламентныхТаблиц, Движения);
		ПараметрыПереоценки.Вставить("ТаблицаКурсовВалют", СтруктураВалютныхОстатков.ТаблицаКурсовВалют);
	Иначе
		ПараметрыПереоценки.Вставить("Объект", Неопределено);
		СтруктураВалютныхОстатков = ПодготовитьТаблицуВалютныхОстатковПоДокументу(ПараметрыПереоценки, Движения);
	КонецЕсли;
	
	ПараметрыПереоценки.Вставить("ТаблицаВалютныхОстатков", СтруктураВалютныхОстатков.ТаблицаВалютныхОстатков);
	ПараметрыПереоценки.Вставить("ТаблицаОборотногоСубконто", СтруктураВалютныхОстатков.ТаблицаОборотногоСубконто);
	   	
	ТаблицаПереоценки =  ПодготовитьТаблицуПереоценкаВалютныхОстатков(ПараметрыПереоценки, Отказ);	
	
	Возврат ТаблицаПереоценки;
	
КонецФункции

Процедура СформироватьДвиженияПереоценкаВалютныхОстатков(ТаблицаВалютныхОстатков, ТаблицаРеквизиты, Движения, Отказ) Экспорт
			
	Параметры = ПодготовитьПараметрыПереоценкаВалютныхОстатков(ТаблицаВалютныхОстатков, ТаблицаРеквизиты);
	
	Если Параметры.Реквизиты.Количество() = 0
		ИЛИ Параметры.ТаблицаПереоценка.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = Параметры.Реквизиты[0];
	
	Дата              		  = Реквизиты.Период;
	Организация       		  = Реквизиты.Организация;
	СтруктурноеПодразделение  = Реквизиты.СтруктурноеПодразделение;
	ТаблицаПереоценка 		  = Параметры.ТаблицаПереоценка;
	ОтражатьВНУ               = Реквизиты.НеобходимостьОтраженияВНУ;
	ВидУчетаНУ                = Реквизиты.ВидУчетаНУ;
	//ЕстьСтатьяДенежныхСредств = ?(Параметры.Реквизиты.Колонки.Найти("СтатьяДвиженияДенежныхСредств")<> Неопределено, Истина, Ложь);
	
	
	Если НЕ УчетнаяПолитикаСервер.Существует(Организация, Дата, "БУ", Истина) Тогда
		Отказ = Истина;
	КонецЕсли;

	ПодразделениеДляРеглОпераций = УчетнаяПолитикаСервер.ПолучитьПодразделениеДляРеглОпераций(Организация, Дата);
		
	Проводки        = Движения.Типовой;
	ПроводкиНУ      = Движения.Налоговый;

	Для каждого СтрокаПереоценка Из  ТаблицаВалютныхОстатков Цикл // ТаблицаПереоценка Цикл
		
		СчетаОтраженияКурсовойРазницы = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСчетаОтраженияКурсовойРазницы(Организация, СтрокаПереоценка.Счет, ПодразделениеДляРеглОпераций);
			
		Проводка = Проводки.Вставить(0);
		
		Проводка.Период      = Дата;
		Проводка.Организация = Организация;
		Проводка.Содержание  = НСтр("ru='Переоценка валютных средств (БУ)'",ОбщегоНазначения.КодОсновногоЯзыка());
		Проводка.ВидРегламентнойОперации  = Перечисления.ВидыРегламентныхОпераций.ПереоценкаВалютныхСредствБУ;

		ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
					Проводка, СтруктурноеПодразделение, СтруктурноеПодразделение);
	
		Если СтрокаПереоценка.СуммаПереоценки < 0 Тогда
			
			Проводка.СчетКт = СтрокаПереоценка.Счет;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(СтрокаПереоценка.Счет, Проводка.СубконтоКт, 1, СтрокаПереоценка.Субконто1);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(СтрокаПереоценка.Счет, Проводка.СубконтоКт, 2, СтрокаПереоценка.Субконто2);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(СтрокаПереоценка.Счет, Проводка.СубконтоКт, 3, СтрокаПереоценка.Субконто3);
			
			Проводка.ВалютаКт = СтрокаПереоценка.Валюта;
			
			Проводка.СчетДт = СчетаОтраженияКурсовойРазницы.СчетРасходовБУ;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(СчетаОтраженияКурсовойРазницы.СчетРасходовБУ, Проводка.СубконтоДт, 1, СчетаОтраженияКурсовойРазницы.СубконтоРасходовБУ1);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(СчетаОтраженияКурсовойРазницы.СчетРасходовБУ, Проводка.СубконтоДт, 2, СчетаОтраженияКурсовойРазницы.СубконтоРасходовБУ2);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(СчетаОтраженияКурсовойРазницы.СчетРасходовБУ, Проводка.СубконтоДт, 3, СчетаОтраженияКурсовойРазницы.СубконтоРасходовБУ3);
			
			Проводка.Сумма = -СтрокаПереоценка.СуммаПереоценки;
	
		Иначе
			
			Проводка.СчетДт = СтрокаПереоценка.Счет;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(СтрокаПереоценка.Счет, Проводка.СубконтоДт, 1, СтрокаПереоценка.Субконто1);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(СтрокаПереоценка.Счет, Проводка.СубконтоДт, 2, СтрокаПереоценка.Субконто2);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(СтрокаПереоценка.Счет, Проводка.СубконтоДт, 3, СтрокаПереоценка.Субконто3);
			
			Проводка.ВалютаДт = СтрокаПереоценка.Валюта;
			
			Проводка.СчетКт = СчетаОтраженияКурсовойРазницы.СчетДоходовБУ;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(СчетаОтраженияКурсовойРазницы.СчетДоходовБУ, Проводка.СубконтоКт, 1, СчетаОтраженияКурсовойРазницы.СубконтоДоходовБУ1);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(СчетаОтраженияКурсовойРазницы.СчетДоходовБУ, Проводка.СубконтоКт, 2, СчетаОтраженияКурсовойРазницы.СубконтоДоходовБУ2);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(СчетаОтраженияКурсовойРазницы.СчетДоходовБУ, Проводка.СубконтоКт, 3, СчетаОтраженияКурсовойРазницы.СубконтоДоходовБУ3);
	
			Проводка.Сумма = СтрокаПереоценка.СуммаПереоценки;
				
		КонецЕсли;
		
		Если ОтражатьВНУ Тогда
			
			ПроводкаНУ = ПроводкиНУ.Вставить(0);
			
			ПроводкаНУ.Период      = Дата;
			ПроводкаНУ.Организация = Организация;
			ПроводкаНУ.Содержание  = НСтр("ru='Переоценка валютных средств (НУ)'",  ОбщегоНазначения.КодОсновногоЯзыка());
			ПроводкаНУ.ВидРегламентнойОперации  = Перечисления.ВидыРегламентныхОпераций.ПереоценкаВалютныхСредствБУ;
			
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
			ПроводкаНУ, СтруктурноеПодразделение, СтруктурноеПодразделение);
			
			ВидУчета =  Справочники.ВидыУчетаНУ.НУ;
			
			Если СтрокаПереоценка.СуммаПереоценки < 0  тогда	
				
				СчетПереоценкиНУ = СтрокаПереоценка.Счет.СчетНУ;
				
				Если ЗначениеЗаполнено(СчетПереоценкиНУ) И НЕ (СчетПереоценкиНУ.ЗапретитьИспользоватьВПроводках) Тогда
					ПроводкаНУ.СчетКт = СчетПереоценкиНУ;
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(СчетПереоценкиНУ, ПроводкаНУ.СубконтоКт, 1, СтрокаПереоценка.Субконто1);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(СчетПереоценкиНУ, ПроводкаНУ.СубконтоКт, 2, СтрокаПереоценка.Субконто2);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(СчетПереоценкиНУ, ПроводкаНУ.СубконтоКт, 3, СтрокаПереоценка.Субконто3);
				КонецЕсли;
				
				ПроводкаНУ.СчетДт = СчетаОтраженияКурсовойРазницы.СчетРасходовНУ;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(СчетаОтраженияКурсовойРазницы.СчетРасходовНУ, ПроводкаНУ.СубконтоДт, 1, СчетаОтраженияКурсовойРазницы.СубконтоРасходовНУ1);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(СчетаОтраженияКурсовойРазницы.СчетРасходовНУ, ПроводкаНУ.СубконтоДт, 2, СчетаОтраженияКурсовойРазницы.СубконтоРасходовНУ2);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(СчетаОтраженияКурсовойРазницы.СчетРасходовНУ, ПроводкаНУ.СубконтоДт, 3, СчетаОтраженияКурсовойРазницы.СубконтоРасходовНУ3);
				
				ПроводкаНУ.Сумма = -СтрокаПереоценка.СуммаПереоценки;
				
				ПроцедурыНалоговогоУчета.ВидУчетаНУ(ПроводкаНУ,  ВидУчетаНУ);
				
				ВидУчета = ПроводкаНУ.ВидУчетаДт;
				
			Иначе								
				
				СчетПереоценкиНУ = СтрокаПереоценка.Счет.СчетНУ;
				
				Если ЗначениеЗаполнено(СчетПереоценкиНУ) И НЕ (СчетПереоценкиНУ.ЗапретитьИспользоватьВПроводках) Тогда
					ПроводкаНУ.СчетДт = СчетПереоценкиНУ;
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(СчетПереоценкиНУ, ПроводкаНУ.СубконтоДт, 1, СтрокаПереоценка.Субконто1);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(СчетПереоценкиНУ, ПроводкаНУ.СубконтоДт, 2, СтрокаПереоценка.Субконто2);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(СчетПереоценкиНУ, ПроводкаНУ.СубконтоДт, 3, СтрокаПереоценка.Субконто3);
				КонецЕсли;
				
				ПроводкаНУ.СчетКт = СчетаОтраженияКурсовойРазницы.СчетДоходовНУ;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(СчетаОтраженияКурсовойРазницы.СчетДоходовНУ, ПроводкаНУ.СубконтоКт, 1, СчетаОтраженияКурсовойРазницы.СубконтоДоходовНУ1);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(СчетаОтраженияКурсовойРазницы.СчетДоходовНУ, ПроводкаНУ.СубконтоКт, 2, СчетаОтраженияКурсовойРазницы.СубконтоДоходовНУ2);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(СчетаОтраженияКурсовойРазницы.СчетДоходовНУ, ПроводкаНУ.СубконтоКт, 3, СчетаОтраженияКурсовойРазницы.СубконтоДоходовНУ3);
				
				ПроводкаНУ.Сумма = СтрокаПереоценка.СуммаПереоценки;
				
				ПроцедурыНалоговогоУчета.ВидУчетаНУ(ПроводкаНУ,  ВидУчетаНУ);
				
				ВидУчета = ПроводкаНУ.ВидУчетаКт;
				
			КонецЕсли;	
			
			Если ВидУчета = Справочники.ВидыУчетаНУ.НУ Тогда
				СтрокаПереоценка.СуммаНУ        = СтрокаПереоценка.СуммаПереоценки;
				СтрокаПереоценка.СуммаПР        = 0;
				СтрокаПереоценка.СуммаВТенгеНУ  = СтрокаПереоценка.СуммаПереоценки;
				СтрокаПереоценка.СуммаВТенгеПР  = 0;           
			Иначе
				СтрокаПереоценка.СуммаНУ        = 0;
				СтрокаПереоценка.СуммаПР        = СтрокаПереоценка.СуммаПереоценки;
				СтрокаПереоценка.СуммаВТенгеНУ  = 0;
				СтрокаПереоценка.СуммаВТенгеПР  = СтрокаПереоценка.СуммаПереоценки;      
			КонецЕсли; 
			
			
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если  ТипЗнч(Реквизиты.Регистратор)= Тип("ДокументСсылка.ЗакрытиеМесяца") Тогда
		
		Движения.Типовой.Записать(Ложь);
		
		Если ОтражатьВНУ Тогда
			Движения.Налоговый.Записать(Ложь);
		КонецЕсли;
		
	Иначе
		Движения.Типовой.Записывать = Истина;
		
		Если ОтражатьВНУ Тогда
			Движения.Налоговый.Записывать = Истина;
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// РЕАЛИЗАЦИЯ ТОВАРОВ И УСЛУГ

Функция ТаблицыВыручкиОтРеализации(Параметры, Отказ)
	
	ТаблицыВыручки = Новый Структура("СобственныеТоварыУслуги");
	
	Если Параметры.Реквизиты.Количество() = 0 Тогда
		ТаблицыВыручки.СобственныеТоварыУслуги       = Неопределено;
		Возврат ТаблицыВыручки;
	КонецЕсли;
	
	Реквизиты = Параметры.Реквизиты[0];
	ОпределятьДоходОтРеализацииПоКурсуАванса = УчетнаяПолитикаСервер.ОпределятьДоходОтРеализацииПоКурсуАванса(Реквизиты.Организация, Реквизиты.Период);
	
	Если ОпределятьДоходОтРеализацииПоКурсуАванса Тогда
		ТаблицаВыручкиОтРеализации = ПолучитьТаблицуРеализацииПоКурсуАвансов(Параметры, Отказ);
	Иначе
		ТаблицаВыручкиОтРеализации = Параметры.ТоварыУслуги;
	КонецЕсли;
	
	// Собственные товары и услуги
	ТаблицыВыручки.СобственныеТоварыУслуги = ТаблицаВыручкиОтРеализации;
	
	Возврат ТаблицыВыручки;

КонецФункции

Функция ПодготовитьПараметрыРеализация(ТаблицаСобственныеТоварыУслуги, Таблицареквизиты)
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы шапки документа
	СписокОбязательныхКолонок = ""
	+ "Период,"                   // <Дата>
	+ "Регистратор,"              // <Регистратор...> - документ, записывающий движения в регистры
	+ "Организация,"              // <СправочникСсылка.Организации> - организация документа
	+ "СтруктурноеПодразделение," // <СправочникСсылка.СтруктурноеПодразделение> - организация документа
	+ "НеобходимостьОтраженияВНУ,"
	+ "ВидУчетаНУ"
	;
	
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));
	
	// Подготовка таблицы реализованных собственных товаров и услуг:
	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"
	+ "НомерСтроки,"
	+ "Номенклатура,"
	+ "Количество,"
	+ "Стоимость,"
	+ "Сумма,"
	+ "СуммаНДС,"
	+ "СуммаВзаиморасчетов,"
	+ "СуммаНДСВзаиморасчетов,"
	+ "СчетДоходовБУ,"
	+ "СубконтоДоходовБУ1,"
	+ "СубконтоДоходовБУ2,"
	+ "СубконтоДоходовБУ3,"
	+ "СчетДоходовНУ,"
	+ "СубконтоДоходовНУ1,"
	+ "СубконтоДоходовНУ2,"
	+ "СубконтоДоходовНУ3,"
	+ "КорСчет,"
	+ "КорСубконто1,"
	+ "КорСубконто2,"
	+ "КорСубконто3,"
	+ "ВалютаВзаиморасчетов,"
	+ "ЭтоУслуга,"
	+ "Содержание,"
	+ "НомерЖурнала"
	;
	
	ОбщегоНазначенияБКВызовСервера.ДобавитьКолонкуВТаблицуЗначений(ТаблицаСобственныеТоварыУслуги, "НомерЖурнала","");   	
		
	Параметры.Вставить("ТаблицаСобственныеТоварыУслуги", ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаСобственныеТоварыУслуги, СписокОбязательныхКолонок));
	
	Возврат Параметры;

КонецФункции

Функция ПодготовитьПараметрыВыручкиОтРеализации(ТаблицаТоварыУслуги, ТаблицаВзаиморасчеты, ТаблицаРеквизиты)

	Параметры = Новый Структура;
	
	// Подготовка таблицы шапки документа
	СписокОбязательныхКолонок = ""
	+ "Период,"                   // <Дата>
	+ "Регистратор,"              // <Регистратор...> - документ, записывающий движения в регистры
	+ "Организация,"              // <СправочникСсылка.Организации> - организация документа
	+ "СтруктурноеПодразделение"; // <СправочникСсылка.ПодразделенияОрганизаций> - структурное подразделение документа
	
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));
	
	// Подготовка таблицы реализованных товаров и услуг:
	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"
	+ "НомерСтроки,"
	+ "Номенклатура,"
	+ "Количество,"
	+ "Стоимость,"
	+ "Сумма,"
	+ "СуммаНДС,"
	+ "СуммаАкциза,"
	+ "СуммаВзаиморасчетов,"
	+ "СуммаНДСВзаиморасчетов,"
	+ "СуммаАкцизаВзаиморасчетов,"
	+ "СчетУчета,"
	+ "СчетДоходовБУ,"
	+ "СубконтоДоходовБУ1,"
	+ "СубконтоДоходовБУ2,"
	+ "СубконтоДоходовБУ3,"
	+ "СчетДоходовНУ,"
	+ "СубконтоДоходовНУ1,"
	+ "СубконтоДоходовНУ2,"
	+ "СубконтоДоходовНУ3,"
	+ "КорСчет,"
	+ "КорСубконто1,"
	+ "КорСубконто2,"
	+ "КорСубконто3,"
	+ "ВалютаВзаиморасчетов,"
	+ "ЭтоУслуга"
	;	
	
	Параметры.Вставить("ТоварыУслуги", ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаТоварыУслуги, СписокОбязательныхКолонок));
	
	// Подготовка таблицы взаиморасчетов:
	СписокОбязательныхКолонок = ""
	+ "Контрагент,"
	+ "ДоговорКонтрагента,"
	+ "ВалютаВзаиморасчетов,"
	+ "ДокументРасчетов,"
	+ "ДатаДокументаРасчетов,"
	+ "СчетРасчетов,"
	+ "СчетАвансов,"
	+ "ОстатокВзаиморасчетов,"
	+ "СуммаВзаиморасчетов,"
	+ "СуммаРегл,"
	+ "СуммаРеглПоКурсуАванса"
	;
	Параметры.Вставить("Взаиморасчеты", ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаВзаиморасчеты, СписокОбязательныхКолонок));
	
	Возврат Параметры;

КонецФункции

Процедура СформироватьДвиженияРеализацияСобственныхТоваровУслуг(ТаблицаВыручкиОтРеализации, ПараметрыРеализации, Движения, Отказ)

	Если ТаблицаВыручкиОтРеализации.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Период                   = ПараметрыРеализации.Период;
	Организация              = ПараметрыРеализации.Организация;
	
	Для Каждого СтрокаТаблицы Из ТаблицаВыручкиОтРеализации Цикл
		
		Если СтрокаТаблицы.Сумма = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаТаблицы.Стоимость <> 0 Тогда 
			СуммаПроводки    = СтрокаТаблицы.Сумма - СтрокаТаблицы.Стоимость;
			Если СтрокаТаблицы.СуммаВзаиморасчетов <> 0 Тогда
				СуммаПроводкиВал = СуммаПроводки / (СтрокаТаблицы.Сумма / СтрокаТаблицы.СуммаВзаиморасчетов); // отражаем по курсу взаиморасчетов документа
			Иначе
				СуммаПроводкиВал = 0;
			КонецЕсли;
		Иначе 
			СуммаПроводки    = СтрокаТаблицы.Сумма;
			СуммаПроводкиВал = СтрокаТаблицы.СуммаВзаиморасчетов;
		КонецЕсли;
		
		Если СуммаПроводки >= 0 Тогда
			ТипАналитикиДт   = "Дт";
			ТипАналитикиКт   = "Кт";
		Иначе 
			СуммаПроводки    = СуммаПроводки * (-1);
			СуммаПроводкиВал = СуммаПроводкиВал * (-1);
			ТипАналитикиДт   = "Кт";
			ТипАналитикиКт   = "Дт";
		КонецЕсли;
		
		Если СуммаПроводки = 0 Тогда 
			Продолжить;
		КонецЕсли;
		
		Проводка = Движения.Типовой.Добавить();
		
		Проводка.Период       = Период;
		Проводка.Организация  = Организация;
		Проводка.Сумма        = СуммаПроводки;
		Проводка.Содержание   = СтрокаТаблицы.Содержание;
		Проводка.НомерЖурнала = СтрокаТаблицы.НомерЖурнала;
		
		Проводка["Счет" + ТипАналитикиДт] = СтрокаТаблицы.КорСчет;
		ЗаполнитьАналитикуСчетаРасчетов(Проводка, СтрокаТаблицы, ТипАналитикиДт, , СуммаПроводкиВал);
		
		Проводка["Счет" + ТипАналитикиКт] = СтрокаТаблицы.СчетДоходовБУ;
		ЗаполнитьАналитикуСчетаДохода(Проводка, СтрокаТаблицы, ТипАналитикиКт, , СуммаПроводкиВал);
		
		ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
			Проводка, ПараметрыРеализации.СтруктурноеПодразделение, ПараметрыРеализации.СтруктурноеПодразделение);
			
		Если ПараметрыРеализации.НеобходимостьОтраженияВНУ Тогда 
			
			Проводка = Движения.Налоговый.Добавить();
			
			Проводка.Период      = Период;
			Проводка.Организация = Организация;
			Проводка.Сумма       = СуммаПроводки;
			Проводка.Содержание  = СтрокаТаблицы.Содержание;
			
			Проводка["Счет" + ТипАналитикиДт] = ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьСчетРасчетовСКонтрагентомНУ(СтрокаТаблицы.КорСчет);
			ЗаполнитьАналитикуСчетаРасчетов(Проводка, СтрокаТаблицы, ТипАналитикиДт, "НУ");
			
			Проводка["Счет" + ТипАналитикиКт] = СтрокаТаблицы.СчетДоходовНУ;
			ЗаполнитьАналитикуСчетаДохода(Проводка, СтрокаТаблицы, ТипАналитикиКт, "НУ");
			
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				Проводка, ПараметрыРеализации.СтруктурноеПодразделение, ПараметрыРеализации.СтруктурноеПодразделение);
				
			ПроцедурыНалоговогоУчета.ВидУчетаНУ(Проводка, ПараметрыРеализации.ВидУчетаНУ);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Движения.Типовой.Записывать = Истина;
	Если ПараметрыРеализации.НеобходимостьОтраженияВНУ Тогда 
		Движения.Налоговый.Записывать = Истина;
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьАналитикуСчетаРасчетов(Проводка, СтрокаТаблицы, ТипАналитики, Учет = "БУ", СуммаВзаиморасчетов = 0)
	
	Счет = Проводка["Счет"+ТипАналитики];
	СвойстваСчета = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(Счет);
	
	ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Счет,Проводка["Субконто"+ТипАналитики], 1, СтрокаТаблицы["КорСубконто1"]);
	ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Счет,Проводка["Субконто"+ТипАналитики], 2, СтрокаТаблицы["КорСубконто2"]);
	ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Счет,Проводка["Субконто"+ТипАналитики], 3, СтрокаТаблицы["КорСубконто3"]);
	
	Если СвойстваСчета.Свойство("Валютный") И СвойстваСчета.Валютный Тогда
		Проводка["Валюта"+ТипАналитики]        = СтрокаТаблицы.ВалютаВзаиморасчетов;
		Проводка["ВалютнаяСумма"+ТипАналитики] = СуммаВзаиморасчетов;
	КонецЕсли;
		
КонецПроцедуры

Процедура ЗаполнитьАналитикуСчетаДохода(Проводка, СтрокаТаблицы, ТипАналитики, Учет = "БУ", СуммаВзаиморасчетов = 0)
	
	Счет = Проводка["Счет"+ТипАналитики];
	СвойстваСчета = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(Счет);
	
	ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Счет, Проводка["Субконто"+ТипАналитики], 1, СтрокаТаблицы["СубконтоДоходов" + Учет + "1"]);
	ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Счет, Проводка["Субконто"+ТипАналитики], 2, СтрокаТаблицы["СубконтоДоходов" + Учет + "2"]);
	ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Счет, Проводка["Субконто"+ТипАналитики], 3, СтрокаТаблицы["СубконтоДоходов" + Учет + "3"]);
	
	Если СвойстваСчета.Количественный Тогда
		Проводка["Количество"+ТипАналитики] = СтрокаТаблицы.Количество;  
	КонецЕсли;
	
	Если СвойстваСчета.Свойство("Валютный") И СвойстваСчета.Валютный Тогда
		Проводка["Валюта"+ТипАналитики]        = СтрокаТаблицы.ВалютаВзаиморасчетов;
		Проводка["ВалютнаяСумма"+ТипАналитики] = СуммаВзаиморасчетов;
	КонецЕсли;
	
КонецПроцедуры

// ПОСТУПЛЕНИЕ УСЛУГ

Функция ПодготовитьПараметрыПоступлениеУслуг(ТаблицаУслуги, ТаблицаРеквизиты)

	Параметры = Новый Структура;
	
	// Подготовка таблицы шапки документа
	СписокОбязательныхКолонок = ""
	+ "Период,"                   // <Дата> - счет по дебету проводки (счет учета денежных средств)
	+ "Регистратор,"              // <ДокументСсылка> - документ, записывающий движения в регистры
	+ "Организация,"              // <СправочникСсылка.Организации> - организация документа
	+ "СтруктурноеПодразделение," // <СправочникСсылка.СтруктурноеПодразделение> - организация документа
	+ "ВалютаВзаиморасчетов,"     // <СправочникСсылка.Валюты> - валюта из договора 
	+ "НеобходимостьОтраженияВНУ,"// <Булево>
	+ "ВидУчетаНУ"                // <СправочникСсылка.ВидыУчетаНУ>
	;
	
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));
	
	// Подготовка таблицы :
	СписокОбязательныхКолонок = ""
	+ "НомерСтроки,"            // <Число,5 , 0>
	+ "СуммаВзаиморасчетов,"    // <Число, 15, 2> - сумма в валюте взаиморасчетов с учетом курса расчетов по авансам
	+ "Сумма,"                  // <Число, 15, 2> - сумма взаиморасчетов для целей БУ
	+ "СчетЗатратБУ,"           // <ПланСчетовСсылка.Типовой> - счет, на который относятся затраты по полученным услугам
	+ "СубконтоЗатратБУ1,"      // <Характеристика.ВидыСубконтоТиповые>
	+ "СубконтоЗатратБУ2,"      // <Характеристика.ВидыСубконтоТиповые>
	+ "СубконтоЗатратБУ3,"      // <Характеристика.ВидыСубконтоТиповые>
	+ "КорСчет,"                // <ПланСчетовСсылка.Типовой> - счет, с которого поступает услуга
	+ "ВидКорСубконто1,"        // <Число/Строка/ПланВидовХарактеристикСсылка.ВидыСубконтоТиповые> - вид субконто
		// счета, с которого поступает услуга
	+ "ВидКорСубконто2,"        // <Число/Строка/ПланВидовХарактеристикСсылка.ВидыСубконтоТиповые> - вид субконто
		// счета, с которого поступает услуга
	+ "ВидКорСубконто3,"        // <Число/Строка/ПланВидовХарактеристикСсылка.ВидыСубконтоТиповые> - вид субконто
		// счета, с которого поступает услага
	+ "КорСубконто1,"           // <Характеристика.ВидыСубконтоТиповые> - значение субконто счета, с которого
		// поступает услуга
	+ "КорСубконто2,"           // <Характеристика.ВидыСубконтоТиповые> - значение субконто счета, с которого
		// поступает услуга
	+ "КорСубконто3,"           // <Характеристика.ВидыСубконтоТиповые> - значение субконто счета, с которого
		// поступает услуга
	+ "СчетЗатратНУ,"           // <ПланСчетовСсылка.Налоговый> - счет, на который относятся затраты для целей НУ
	+ "СубконтоЗатратНУ1,"      // <Характеристика.ВидыСубконтоТиповые>
	+ "СубконтоЗатратНУ2,"      // <Характеристика.ВидыСубконтоТиповые>
	+ "СубконтоЗатратНУ3,"      // <Характеристика.ВидыСубконтоТиповые>
	+ "Содержание"              // <Строка, 150>
	;
	Параметры.Вставить("ТаблицаУслуги", ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаУслуги, СписокОбязательныхКолонок));
	
	Возврат Параметры;

КонецФункции

// АВАНСОВЫЙ ОТЧЕТ

Функция ПодготовитьПараметрыАвансовыйОтчетПрочее(ТаблицаУслуги, ТаблицаРеквизиты)

	Параметры = Новый Структура;
	
	// Подготовка таблицы шапки документа
	СписокОбязательныхКолонок = ""
	+ "Период,"                   // <Дата> - счет по дебету проводки (счет учета денежных средств)
	+ "Регистратор,"              // <ДокументСсылка> - документ, записывающий движения в регистры
	+ "Организация,"              // <СправочникСсылка.Организации> - организация документа
	+ "СтруктурноеПодразделение," // <СправочникСсылка.СтруктурноеПодразделение> - организация документа
	+ "ВалютаВзаиморасчетов,"     // <СправочникСсылка.Валюты> - валюта из договора 
	+ "НеобходимостьОтраженияВНУ,"// <Булево>
	+ "ВидУчетаНУ"                // <СправочникСсылка.ВидыУчетаНУ>
	;
	
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));
	
	// Подготовка таблицы :
	СписокОбязательныхКолонок = ""
	+ "НомерСтроки,"            // <Число,5 , 0>
	+ "СуммаВзаиморасчетов,"    // <Число, 15, 2> - сумма в валюте взаиморасчетов с учетом курса расчетов по авансам
	+ "Сумма,"                  // <Число, 15, 2> - сумма взаиморасчетов для целей БУ
	+ "СчетЗатратБУ,"           // <ПланСчетовСсылка.Типовой> - счет, на который относятся затраты по полученным услугам
	+ "СубконтоЗатратБУ1,"      // <Характеристика.ВидыСубконтоТиповые>
	+ "СубконтоЗатратБУ2,"      // <Характеристика.ВидыСубконтоТиповые>
	+ "СубконтоЗатратБУ3,"      // <Характеристика.ВидыСубконтоТиповые>
	+ "КорСчет,"                // <ПланСчетовСсылка.Типовой> - счет, с которого поступает услуга
	+ "ВидКорСубконто1,"        // <Число/Строка/ПланВидовХарактеристикСсылка.ВидыСубконтоТиповые> - вид субконто
		// счета, с которого поступает услуга
	+ "ВидКорСубконто2,"        // <Число/Строка/ПланВидовХарактеристикСсылка.ВидыСубконтоТиповые> - вид субконто
		// счета, с которого поступает услуга
	+ "ВидКорСубконто3,"        // <Число/Строка/ПланВидовХарактеристикСсылка.ВидыСубконтоТиповые> - вид субконто
		// счета, с которого поступает услага
	+ "КорСубконто1,"           // <Характеристика.ВидыСубконтоТиповые> - значение субконто счета, с которого
		// поступает услуга
	+ "КорСубконто2,"           // <Характеристика.ВидыСубконтоТиповые> - значение субконто счета, с которого
		// поступает услуга
	+ "КорСубконто3,"           // <Характеристика.ВидыСубконтоТиповые> - значение субконто счета, с которого
		// поступает услуга
	+ "СчетЗатратНУ,"           // <ПланСчетовСсылка.Налоговый> - счет, на который относятся затраты для целей НУ
	+ "СубконтоЗатратНУ1,"      // <Характеристика.ВидыСубконтоТиповые>
	+ "СубконтоЗатратНУ2,"      // <Характеристика.ВидыСубконтоТиповые>
	+ "СубконтоЗатратНУ3,"      // <Характеристика.ВидыСубконтоТиповые>
	+ "Контрагент,"      		// <СправочникСсылка.Контрагенты> - контрагент, который оказывает услугу
	+ "Содержание"              // <Строка, 150>
	;
	Параметры.Вставить("ТаблицаУслуги", ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаУслуги, СписокОбязательныхКолонок));
	
	Возврат Параметры;

КонецФункции

// ВОЗВРАТ ТОВАРОВ И УСЛУГ ОТ ПОКУПАТЕЛЯ

Функция ПодготовитьПараметрыВозвратТоваровОтПокупателя(ТаблицаСобственныеТоварыУслуги, ТаблицаРеквизиты)

	Параметры = Новый Структура;
	
	// Подготовка таблицы шапки документа
	СписокОбязательныхКолонок = ""
	+ "Период,"                   // <Дата>
	+ "Регистратор,"              // <Регистратор...> - документ, записывающий движения в регистры
	+ "Организация,"              // <СправочникСсылка.Организации> - организация документа
	+ "СтруктурноеПодразделение," // <СправочникСсылка.СтруктурноеПодразделение> - организация документа
	+ "УказанСчетВозвратов,"
	+ "НеобходимостьОтраженияВНУ,"
	+ "ВидУчетаНУ";
	
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));
	
	// Подготовка таблицы реализованных собственных товаров и услуг:
	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"
	+ "НомерСтроки,"
	+ "Номенклатура,"
	+ "Количество,"
	+ "Стоимость,"
	+ "Сумма,"
	+ "СуммаНДС,"
	+ "СуммаВзаиморасчетов,"
	+ "СуммаНДСВзаиморасчетов,"
	+ "СчетДоходовБУ,"
	+ "СубконтоДоходовБУ1,"
	+ "СубконтоДоходовБУ2,"
	+ "СубконтоДоходовБУ3,"
	+ "СчетДоходовНУ,"
	+ "СубконтоДоходовНУ1,"
	+ "СубконтоДоходовНУ2,"
	+ "СубконтоДоходовНУ3,"
	+ "КорСчет,"
	+ "КорСубконто1,"
	+ "КорСубконто2,"
	+ "КорСубконто3,"
	+ "ВалютаВзаиморасчетов,"
	+ "ЭтоУслуга,"
	+ "Содержание,"
	+ "СодержаниеНУ,"
	+ "ЗнакПроводкиНУ"
	;
	
	ОбщегоНазначенияБКВызовСервера.ДобавитьКолонкуВТаблицуЗначений(ТаблицаСобственныеТоварыУслуги, "ЗнакПроводкиНУ", 1);
	ОбщегоНазначенияБКВызовСервера.ДобавитьКолонкуВТаблицуЗначений(ТаблицаСобственныеТоварыУслуги, "СодержаниеНУ", "");
	
	Параметры.Вставить("ТаблицаСобственныеТоварыУслуги", ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаСобственныеТоварыУслуги, СписокОбязательныхКолонок));
	
	Возврат Параметры;

КонецФункции

Процедура СформироватьДвиженияВозвратОтПокупателя(ТаблицаВыручкиОтРеализации, ПараметрыРеализации, Движения, Отказ)

	Если ТаблицаВыручкиОтРеализации.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Период                   = ПараметрыРеализации.Период;
	Организация              = ПараметрыРеализации.Организация;
	
	Для Каждого СтрокаТаблицы Из ТаблицаВыручкиОтРеализации Цикл
		
		Если СтрокаТаблицы.Стоимость <> 0 Тогда 
			Если (СтрокаТаблицы.Сумма - СтрокаТаблицы.Стоимость) = 0 Тогда 
				Продолжить;
			КонецЕсли;

			СуммаПроводки    = СтрокаТаблицы.Сумма - СтрокаТаблицы.Стоимость;
			СуммаПроводкиВал = СуммаПроводки / (СтрокаТаблицы.Сумма / СтрокаТаблицы.СуммаВзаиморасчетов); // отражаем по курсу взаиморасчетов документа
		Иначе 
			СуммаПроводки    = СтрокаТаблицы.Сумма;
			СуммаПроводкиВал = СтрокаТаблицы.СуммаВзаиморасчетов;
		КонецЕсли;
		
		Если ПараметрыРеализации.УказанСчетВозвратов Тогда 
			Если СуммаПроводки >= 0 Тогда
				ТипАналитикиДт   = "Дт";
				ТипАналитикиКт   = "Кт";
			Иначе 
				СуммаПроводки    = СуммаПроводки * (-1);
				СуммаПроводкиВал = СуммаПроводкиВал * (-1);
				ТипАналитикиДт   = "Кт";
				ТипАналитикиКт   = "Дт";
			КонецЕсли;
		Иначе 
			СуммаПроводки    = СуммаПроводки * (-1);
			СуммаПроводкиВал = СуммаПроводкиВал * (-1);
			ТипАналитикиДт   = "Кт";
			ТипАналитикиКт   = "Дт";
		КонецЕсли;
		
		Если СуммаПроводки <> 0 Тогда 
			Проводка = Движения.Типовой.Добавить();
			
			Проводка.Период      = Период;
			Проводка.Организация = Организация;
			Проводка.Сумма       = СуммаПроводки;
			Проводка.Содержание  = СтрокаТаблицы.Содержание;
			
			Проводка["Счет" + ТипАналитикиДт] = СтрокаТаблицы.КорСчет;
			ЗаполнитьАналитикуСчетаРасчетов(Проводка, СтрокаТаблицы, ТипАналитикиДт, , СуммаПроводкиВал);
			
			Проводка["Счет" + ТипАналитикиКт] = СтрокаТаблицы.СчетДоходовБУ;
			ЗаполнитьАналитикуСчетаДохода(Проводка, СтрокаТаблицы, ТипАналитикиКт, , СуммаПроводкиВал);
			
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				Проводка, ПараметрыРеализации.СтруктурноеПодразделение, ПараметрыРеализации.СтруктурноеПодразделение);
		КонецЕсли;
			
		Если ПараметрыРеализации.НеобходимостьОтраженияВНУ Тогда 
			
			Если ПараметрыРеализации.УказанСчетВозвратов Тогда 
				Если СуммаПроводки = 0 Тогда 
					Продолжить;
				КонецЕсли;
				
				Проводка = Движения.Налоговый.Добавить();
				
				Проводка.Период      = Период;
				Проводка.Организация = Организация;
				Проводка.Сумма       = -СуммаПроводки;
				Проводка.Содержание  = НСтр("ru='Сторно выручки от реализации'", ОбщегоНазначения.КодОсновногоЯзыка());
				
				Проводка["Счет" + ТипАналитикиКт] = ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьСчетРасчетовСКонтрагентомНУ(СтрокаТаблицы.КорСчет);
				ЗаполнитьАналитикуСчетаРасчетов(Проводка, СтрокаТаблицы, ТипАналитикиКт, "НУ");
				
				Проводка["Счет" + ТипАналитикиДт] = СтрокаТаблицы.СчетДоходовНУ;
				ЗаполнитьАналитикуСчетаДохода(Проводка, СтрокаТаблицы, ТипАналитикиДт, "НУ");
				
				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
					Проводка, ПараметрыРеализации.СтруктурноеПодразделение, ПараметрыРеализации.СтруктурноеПодразделение);
					
				ПроцедурыНалоговогоУчета.ВидУчетаНУ(Проводка, ПараметрыРеализации.ВидУчетаНУ);
			Иначе 
				Если СтрокаТаблицы.Стоимость <> 0 Тогда 
					Если (СтрокаТаблицы.Сумма - СтрокаТаблицы.Стоимость) = 0 Тогда 
						Продолжить;
					КонецЕсли;
					
					СуммаПроводки    = СтрокаТаблицы.Сумма - СтрокаТаблицы.Стоимость;
					СуммаПроводкиВал = СуммаПроводки / (СтрокаТаблицы.Сумма / СтрокаТаблицы.СуммаВзаиморасчетов); // отражаем по курсу взаиморасчетов документа
				Иначе 
					СуммаПроводки    = СтрокаТаблицы.Сумма;
					СуммаПроводкиВал = СтрокаТаблицы.СуммаВзаиморасчетов;
				КонецЕсли;
				Если СтрокаТаблицы.ЗнакПроводкиНУ >= 0 Тогда
					СуммаПроводки    = СуммаПроводки;
					СуммаПроводкиВал = СуммаПроводкиВал;
					ТипАналитикиДт   = "Кт";
					ТипАналитикиКт   = "Дт";
					Содержание       = НСтр("ru='Сторно выручки от реализации'", ОбщегоНазначения.КодОсновногоЯзыка());
				Иначе
					СуммаПроводки    = СуммаПроводки * (-1);
					СуммаПроводкиВал = СуммаПроводкиВал * (-1);
					ТипАналитикиДт   = "Дт";
					ТипАналитикиКт   = "Кт";
					Содержание       = СтрокаТаблицы.Содержание;
					Если ЗначениеЗаполнено(СтрокаТаблицы.СодержаниеНУ) Тогда
						Содержание   = СтрокаТаблицы.СодержаниеНУ;
					КонецЕсли;
				КонецЕсли;

				Если СуммаПроводки = 0 Тогда 
					Продолжить;
				КонецЕсли;
				
				Проводка = Движения.Налоговый.Добавить();
				
				Проводка.Период      = Период;
				Проводка.Организация = Организация;
				Проводка.Сумма       = СуммаПроводки;
				Проводка.Содержание  = Содержание;
				
				Проводка["Счет" + ТипАналитикиКт] = ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьСчетРасчетовСКонтрагентомНУ(СтрокаТаблицы.КорСчет);
				ЗаполнитьАналитикуСчетаРасчетов(Проводка, СтрокаТаблицы, ТипАналитикиКт, "НУ");
				
				Проводка["Счет" + ТипАналитикиДт] = СтрокаТаблицы.СчетДоходовНУ;
				ЗаполнитьАналитикуСчетаДохода(Проводка, СтрокаТаблицы, ТипАналитикиДт, "НУ");
				
				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
					Проводка, ПараметрыРеализации.СтруктурноеПодразделение, ПараметрыРеализации.СтруктурноеПодразделение);
					
				ПроцедурыНалоговогоУчета.ВидУчетаНУ(Проводка, ПараметрыРеализации.ВидУчетаНУ);
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Движения.Типовой.Записывать = Истина;
	Если ПараметрыРеализации.НеобходимостьОтраженияВНУ Тогда 
		Движения.Налоговый.Записывать = Истина;
	КонецЕсли;

КонецПроцедуры

// ВОЗВРАТ ТОВАРОВ И УСЛУГ ПОСТАВЩИКУ

Функция ПодготовитьПараметрыВозвратТоваровПоставщику(ТаблицаТоварыУслуги, ТаблицаРеквизиты)

	Параметры = Новый Структура;
	
	// Подготовка таблицы шапки документа
	СписокОбязательныхКолонок = ""
	+ "Период,"                   // <Дата>
	+ "Регистратор,"              // <Регистратор...> - документ, записывающий движения в регистры
	+ "Организация,"              // <СправочникСсылка.Организации> - организация документа
	+ "СтруктурноеПодразделение," // <СправочникСсылка.СтруктурноеПодразделение> - организация документа
	+ "УказанСчетВозвратов,"
	+ "НеобходимостьОтраженияВНУ,"
	+ "ВидУчетаНУ";
	
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));
	
	// Подготовка таблицы возвращаемых товаров и услуг:
	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"
	+ "НомерСтроки,"
	+ "Номенклатура,"
	+ "Количество,"
	+ "Стоимость,"
	+ "СтоимостьНУ,"
	+ "Сумма,"
	+ "СуммаНДС,"
	+ "СуммаВзаиморасчетов,"
	+ "СуммаНДСВзаиморасчетов,"
	+ "СчетДоходовБУ,"
	+ "СубконтоДоходовБУ1,"
	+ "СубконтоДоходовБУ2,"
	+ "СубконтоДоходовБУ3,"
	+ "СчетДоходовНУ,"
	+ "СубконтоДоходовНУ1,"
	+ "СубконтоДоходовНУ2,"
	+ "СубконтоДоходовНУ3,"
	+ "КорСчет,"
	+ "КорСубконто1,"
	+ "КорСубконто2,"
	+ "КорСубконто3,"
	+ "КорСчетНУ,"
	+ "КорСубконтоНУ1,"
	+ "КорСубконтоНУ2,"
	+ "КорСубконтоНУ3,"
	+ "ВалютаВзаиморасчетов,"
	+ "НоменклатурнаяГруппа,"
	+ "ЭтоУслуга,"
	+ "ЭтоОС,"
	+ "Содержание"
	;	

	ОбщегоНазначенияБКВызовСервера.ДобавитьКолонкуВТаблицуЗначений(ТаблицаТоварыУслуги, "ЗнакПроводкиНУ", 1);
	
	Параметры.Вставить("ТаблицаТоварыУслуги", ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаТоварыУслуги, СписокОбязательныхКолонок));
	
	Возврат Параметры;

КонецФункции

Процедура СформироватьДвиженияВозвратПоставщику(ЗНАЧ ТаблицаТоварыУслуги, Реквизиты, Движения, Отказ)

	Если ТаблицаТоварыУслуги.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Период                   = Реквизиты.Период;
	Организация              = Реквизиты.Организация;
	
	Для Каждого СтрокаТаблицы Из ТаблицаТоварыУслуги Цикл
		
		Если СтрокаТаблицы.ЭтоОС Тогда 
			Продолжить;
		КонецЕсли;
		
		Если СтрокаТаблицы.Стоимость <> 0 Тогда 
			Если (СтрокаТаблицы.Сумма - СтрокаТаблицы.Стоимость) = 0 Тогда 
				Продолжить;
			КонецЕсли;
			
			СуммаПроводки    = (-1) * (СтрокаТаблицы.Сумма - СтрокаТаблицы.Стоимость);
			СуммаПроводкиВал = СуммаПроводки / ?(СтрокаТаблицы.Сумма = 0 ИЛИ СтрокаТаблицы.СуммаВзаиморасчетов = 0, 1, (СтрокаТаблицы.Сумма / СтрокаТаблицы.СуммаВзаиморасчетов));  // отражаем по курсу взаиморасчетов документа
			ТипАналитикиДт   = "Кт";
			ТипАналитикиКт   = "Дт";
		Иначе 
			ТипАналитикиДт   = "Дт";
			ТипАналитикиКт   = "Кт";
			СуммаПроводки    = СтрокаТаблицы.Сумма;
			СуммаПроводкиВал = СтрокаТаблицы.СуммаВзаиморасчетов;
		КонецЕсли;

		Если СуммаПроводки = 0 Тогда 
			Продолжить;
		КонецЕсли;
		
		Проводка = Движения.Типовой.Добавить();
		
		Проводка.Период      = Период;
		Проводка.Организация = Организация;
		Проводка.Сумма       = СуммаПроводки;
		Проводка.Содержание  = СтрокаТаблицы.Содержание;
		
		Проводка["Счет" + ТипАналитикиДт] = СтрокаТаблицы.КорСчет;
		
		СвойстваСчета = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы.КорСчет);
		Для ИндексСубконто = 1 По СвойстваСчета.КоличествоСубконто Цикл
			Если СвойстваСчета["ВидСубконто" + ИндексСубконто] = ПланыВидовХарактеристик.ВидыСубконтоТиповые.Номенклатура И ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура) Тогда
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(СтрокаТаблицы.КорСчет, Проводка["Субконто" + ТипАналитикиДт], "Номенклатура", СтрокаТаблицы.Номенклатура);
			ИначеЕсли СвойстваСчета["ВидСубконто" + ИндексСубконто] = ПланыВидовХарактеристик.ВидыСубконтоТиповые.НоменклатурныеГруппы И ЗначениеЗаполнено(СтрокаТаблицы.НоменклатурнаяГруппа) Тогда
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(СтрокаТаблицы.КорСчет, Проводка["Субконто" + ТипАналитикиДт], "НоменклатурныеГруппы", СтрокаТаблицы.НоменклатурнаяГруппа);
			Иначе
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(СтрокаТаблицы.КорСчет, Проводка["Субконто" + ТипАналитикиДт], ИндексСубконто, СтрокаТаблицы["КорСубконто" + ИндексСубконто]);
			КонецЕсли;
		КонецЦикла;
		
		Если СвойстваСчета.Свойство("Валютный") И СвойстваСчета.Валютный Тогда
			Проводка["Валюта" + ТипАналитикиДт]        = СтрокаТаблицы.ВалютаВзаиморасчетов;
			Проводка["ВалютнаяСумма" + ТипАналитикиДт] = СуммаПроводкиВал;
		КонецЕсли;
		
		Проводка["Счет" + ТипАналитикиКт] = СтрокаТаблицы.СчетДоходовБУ;
		СвойстваСчета = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы.СчетДоходовБУ);
		Для ИндексСубконто = 1 По СвойстваСчета.КоличествоСубконто Цикл
			Если СвойстваСчета["ВидСубконто" + ИндексСубконто] = ПланыВидовХарактеристик.ВидыСубконтоТиповые.Номенклатура И ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура) 
				И НЕ ЗначениеЗаполнено(СтрокаТаблицы["СубконтоДоходовБУ" + ИндексСубконто]) Тогда
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(СтрокаТаблицы.СчетДоходовБУ, Проводка["Субконто" + ТипАналитикиКт], "Номенклатура", СтрокаТаблицы.Номенклатура);
			ИначеЕсли СвойстваСчета["ВидСубконто" + ИндексСубконто] = ПланыВидовХарактеристик.ВидыСубконтоТиповые.НоменклатурныеГруппы И ЗначениеЗаполнено(СтрокаТаблицы.НоменклатурнаяГруппа)
				И НЕ ЗначениеЗаполнено(СтрокаТаблицы["СубконтоДоходовБУ" + ИндексСубконто]) Тогда
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(СтрокаТаблицы.СчетДоходовБУ, Проводка["Субконто" + ТипАналитикиКт], "НоменклатурныеГруппы", СтрокаТаблицы.НоменклатурнаяГруппа);
			Иначе
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(СтрокаТаблицы.СчетДоходовБУ, Проводка["Субконто" + ТипАналитикиКт], ИндексСубконто, СтрокаТаблицы["СубконтоДоходовБУ" + ИндексСубконто]);
			КонецЕсли;
		КонецЦикла;
		
		Если СвойстваСчета.Свойство("Валютный") И СвойстваСчета.Валютный Тогда
			Проводка["Валюта" + ТипАналитикиКт]        = СтрокаТаблицы.ВалютаВзаиморасчетов;
			Проводка["ВалютнаяСумма" + ТипАналитикиКт] = СуммаПроводкиВал;
		КонецЕсли;
		
		ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
			Проводка, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);
			
	КонецЦикла;
	
	Если Реквизиты.НеобходимостьОтраженияВНУ Тогда 
		
		ИменаКолонокГруппировки  = "ИмяСписка, НомерСтроки, Номенклатура, СчетДоходовНУ, СубконтоДоходовНУ1, СубконтоДоходовНУ2, СубконтоДоходовНУ3,
								   |КорСчет, КорСчетНУ, КорСубконтоНУ1, КорСубконтоНУ2, КорСубконтоНУ3, 
								   |ВалютаВзаиморасчетов, НоменклатурнаяГруппа, ЭтоУслуга, ЭтоОС, Содержание";
		
		ИменаКолонокСуммирования = "Количество, СтоимостьНУ, Сумма, СуммаНДС, СуммаВзаиморасчетов, СуммаНДСВзаиморасчетов";
		
		ТаблицаТоварыУслуги.Свернуть(ИменаКолонокГруппировки, ИменаКолонокСуммирования);
		
		Для Каждого СтрокаТаблицы Из ТаблицаТоварыУслуги Цикл
			
			Если СтрокаТаблицы.ЭтоОС Тогда 
				Продолжить;
			КонецЕсли;
			
			Если СтрокаТаблицы.СтоимостьНУ <> 0 Тогда 
				Если (СтрокаТаблицы.Сумма - СтрокаТаблицы.СтоимостьНУ) = 0 Тогда 
					Продолжить;
				КонецЕсли;
				
				СуммаПроводки    = (-1) * (СтрокаТаблицы.Сумма - СтрокаТаблицы.СтоимостьНУ);
				СуммаПроводкиВал = СуммаПроводки / ?(СтрокаТаблицы.Сумма = 0 ИЛИ СтрокаТаблицы.СуммаВзаиморасчетов = 0, 1, (СтрокаТаблицы.Сумма / СтрокаТаблицы.СуммаВзаиморасчетов));  // отражаем по курсу взаиморасчетов документа
				ТипАналитикиДт   = "Кт";
				ТипАналитикиКт   = "Дт";
			Иначе 
				ТипАналитикиДт   = "Дт";
				ТипАналитикиКт   = "Кт";
				СуммаПроводки    = СтрокаТаблицы.Сумма;
				СуммаПроводкиВал = СтрокаТаблицы.СуммаВзаиморасчетов;
			КонецЕсли;
			
			Если СуммаПроводки = 0 Тогда 
				Продолжить;
			КонецЕсли;
			
			Проводка = Движения.Налоговый.Добавить();
			
			Проводка.Период      = Период;
			Проводка.Организация = Организация;
			Проводка.Сумма       = СуммаПроводки;
			Проводка.Содержание  = СтрокаТаблицы.Содержание;
			
			Проводка["Счет" + ТипАналитикиДт] = ?(ЗначениеЗаполнено(СтрокаТаблицы.КорСчетНУ), СтрокаТаблицы.КорСчетНУ, ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьСчетРасчетовСКонтрагентомНУ(СтрокаТаблицы.КорСчет));
			СвойстваСчета = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка["Счет" + ТипАналитикиДт]);
			Для ИндексСубконто = 1 По СвойстваСчета.КоличествоСубконто Цикл
				Если СвойстваСчета["ВидСубконто" + ИндексСубконто] = ПланыВидовХарактеристик.ВидыСубконтоТиповые.Номенклатура И ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура) Тогда
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка["Счет" + ТипАналитикиДт], Проводка["Субконто" + ТипАналитикиДт], "Номенклатура", СтрокаТаблицы.Номенклатура);
				ИначеЕсли СвойстваСчета["ВидСубконто" + ИндексСубконто] = ПланыВидовХарактеристик.ВидыСубконтоТиповые.НоменклатурныеГруппы И ЗначениеЗаполнено(СтрокаТаблицы.НоменклатурнаяГруппа) Тогда
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка["Счет" + ТипАналитикиДт], Проводка["Субконто" + ТипАналитикиДт], "НоменклатурныеГруппы", СтрокаТаблицы.НоменклатурнаяГруппа);
				Иначе
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка["Счет" + ТипАналитикиДт], Проводка["Субконто" + ТипАналитикиДт], ИндексСубконто, СтрокаТаблицы["КорСубконтоНУ" + ИндексСубконто]);
				КонецЕсли;
			КонецЦикла;
			
			Проводка["Счет" + ТипАналитикиКт] = СтрокаТаблицы.СчетДоходовНУ;
			СвойстваСчета = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы.СчетДоходовНУ);
			Для ИндексСубконто = 1 По СвойстваСчета.КоличествоСубконто Цикл
				Если СвойстваСчета["ВидСубконто" + ИндексСубконто] = ПланыВидовХарактеристик.ВидыСубконтоТиповые.Номенклатура И ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура)
					И НЕ ЗначениеЗаполнено(СтрокаТаблицы["СубконтоДоходовНУ" + ИндексСубконто]) Тогда
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(СтрокаТаблицы.СчетДоходовНУ, Проводка["Субконто" + ТипАналитикиКт], "Номенклатура", СтрокаТаблицы.Номенклатура);
				ИначеЕсли СвойстваСчета["ВидСубконто" + ИндексСубконто] = ПланыВидовХарактеристик.ВидыСубконтоТиповые.НоменклатурныеГруппы И ЗначениеЗаполнено(СтрокаТаблицы.НоменклатурнаяГруппа)
					И НЕ ЗначениеЗаполнено(СтрокаТаблицы["СубконтоДоходовНУ" + ИндексСубконто]) Тогда
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(СтрокаТаблицы.СчетДоходовНУ, Проводка["Субконто" + ТипАналитикиКт], "НоменклатурныеГруппы", СтрокаТаблицы.НоменклатурнаяГруппа);
				Иначе
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(СтрокаТаблицы.СчетДоходовНУ, Проводка["Субконто" + ТипАналитикиКт], ИндексСубконто, СтрокаТаблицы["СубконтоДоходовНУ" + ИндексСубконто]);
				КонецЕсли;
			КонецЦикла;
			
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				Проводка, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);
				
			ПроцедурыНалоговогоУчета.ВидУчетаНУ(Проводка, Реквизиты.ВидУчетаНУ);
			
		КонецЦикла;
		
		Движения.Налоговый.Записывать = Истина;
		
	КонецЕсли;
	
	Движения.Типовой.Записывать = Истина;

КонецПроцедуры

// ПЕРЕОЦЕНКА ВАЛЮТНЫХ ОСТАТКОВ

Функция ПодготовитьПараметрыПереоценкаВалютныхОстатковПоПроводкамДокумента(ТаблицаРеквизиты)

	Параметры = Новый Структура;
	
	// Подготовка таблицы шапки документа
	СписокОбязательныхКолонок = ""
	+ "Период,"				// <Дата> - счет по дебету проводки (счет учета денежных средств)
	+ "Регистратор,"		// <ДокументСсылка...> - документ, записывающий движения в регистры
	+ "Организация,"		// <СправочникСсылка.Организации> - организация документа
	+ "СтруктурноеПодразделение,"		// <СправочникСсылка.Организации> - организация документа
	+ "ВалютаДокумента,"		//
	+ "НеобходимостьОтраженияВНУ,"
	+ "ВидУчетаНУ,"
	+ "КурсВзаиморасчетов,"
	+ "КратностьВзаиморасчетов";
	
	Если ТипЗнч(ТаблицаРеквизиты) = Тип("ТаблицаЗначений") Тогда
		Если ТаблицаРеквизиты.Колонки.Найти("Объект") <> Неопределено Тогда
			СписокОбязательныхКолонок = СписокОбязательныхКолонок + ",Объект";	
		КонецЕсли;
	КонецЕсли;
	
	ОбщегоНазначенияБКВызовСервера.ДобавитьКолонкуВТаблицуЗначений(ТаблицаРеквизиты, "КурсВзаиморасчетов", 0);
	ОбщегоНазначенияБКВызовСервера.ДобавитьКолонкуВТаблицуЗначений(ТаблицаРеквизиты, "КратностьВзаиморасчетов", 0);
	
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Функция ПодготовитьПараметрыПереоценкаВалютныхОстатков(ТаблицаВалютныхОстатков, ТаблицаРеквизиты)

	Параметры = Новый Структура;
	
	// Подготовка таблицы шапки документа
	СписокОбязательныхКолонок = ""
	+ "Период,"			// <Дата> - счет по дебету проводки (счет учета денежных средств)
	+ "Регистратор,"	// <ДокументСсылка...> - документ, записывающий движения в регистры
	+ "Организация,"		// <СправочникСсылка.Организации> - организация документа
	+ "СтруктурноеПодразделение,"              // <Ссылка на справочник подразделений> - подразделение, по которому учитывается переоценка
	+ "НеобходимостьОтраженияВНУ,"
	+ "ВидУчетаНУ ";
		
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));
	
	// Подготовка таблицы :
	СписокОбязательныхКолонок = ""
	+ "Счет,"                       // <ПланСчетовСсылка.Типовой> - переоцениваемый счет
	+ "Субконто1,"                   // <> - значение аналитики переоцениваемого счета
	+ "Субконто2,"                   // <> - значение аналитики переоцениваемого счета
	+ "Субконто3,"					// <> - значение аналитики переоцениваемого счета
	+ "Валюта,"						// <СправочникСсылка.Валюты> - переоцениваемая валюта
	+ "СуммаВВалюте,"               // <Число(15,2)> - 
	+ "КурсПереоценки,"             // <Число(10,4)> - 
	+ "СуммаПереоценки,"            // <Число(15,2)> -
	+ "СуммаНУ,"            		// <Число(15,2)> - 	
	+ "СуммаПР,"            		// <Число(15,2)> - 	
	+ "СуммаВТенгеНУ,"            		// <Число(15,2)> - 
    + "СуммаВТенгеПР"            		// <Число(15,2)> - 
	;
	Параметры.Вставить("ТаблицаПереоценка", ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаВалютныхОстатков, СписокОбязательныхКолонок));
	

	Возврат Параметры;

КонецФункции

Функция ПодготовитьТаблицуВалютныхОстатковВсе(СтруктураПараметров, СтруктураРегламентныхТаблиц, Движения)
	
	Ссылка          			= СтруктураПараметров.Регистратор;
	Дата            			= СтруктураПараметров.Период;
	Организация     			= СтруктураПараметров.Организация;
	СтруктурноеПодразделение    = СтруктураПараметров.СтруктурноеПодразделение;
	Проводки        			= Движения.Типовой;
	
	ВидыСубконтоСчетов          = Новый Соответствие;
	
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	ТаблицаВалютныхОстатков		= Новый ТаблицаЗначений;
	ТаблицаКурсовВалют  		= Новый ТаблицаЗначений;
	
	ТаблицаОборотныхСубконтоСчета = Новый ТаблицаЗначений;
	ТаблицаОборотныхСубконтоСчета.Колонки.Добавить("Счет",      Новый ОписаниеТипов("ПланСчетовСсылка.Типовой"));	
	ТаблицаОборотныхСубконтоСчета.Колонки.Добавить("Субконто1");
	ТаблицаОборотныхСубконтоСчета.Колонки.Добавить("Субконто2");
	ТаблицаОборотныхСубконтоСчета.Колонки.Добавить("Субконто3");
	ТаблицаОборотныхСубконтоСчета.Колонки.Добавить("Сумма");	
	
	
	Если СтруктураРегламентныхТаблиц  = Неопределено ИЛИ НЕ СтруктураРегламентныхТаблиц.Свойство("ТаблицаВалютныхОстатков") Тогда		
	
		СчетаПодлежащиеПереоценке 			= ПроцедурыБухгалтерскогоУчета.СчетаПодлежащиеПереоценке(Истина);	
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Организация",				Организация);
		Запрос.УстановитьПараметр("СтруктурноеПодразделение",	СтруктурноеПодразделение);
		
		Запрос.УстановитьПараметр("СчетаПодлежащиеПереоценке",	СчетаПодлежащиеПереоценке);
		Запрос.УстановитьПараметр("ГраницаОстатков",			Новый Граница(КонецМесяца(Дата), ВидГраницы.Включая));
		
			
		// Получение всех остатков по всем счетам, подлежащим переоценке
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ТиповойОстатки.Счет КАК Счет,
		|	ПРЕДСТАВЛЕНИЕ(ТиповойОстатки.Счет) КАК СчетПредставление,
		|	ТиповойОстатки.Счет.Наименование КАК СчетНаименование,
		|	ТиповойОстатки.Субконто1 КАК Субконто1,
		|	ТиповойОстатки.Субконто2 КАК Субконто2,
		|	ТиповойОстатки.Субконто3 КАК Субконто3,
		|	ТиповойОстатки.Валюта КАК Валюта,
		|	ПРЕДСТАВЛЕНИЕ(ТиповойОстатки.Валюта) КАК ВалютаПредставление,
		|	ТиповойОстатки.ВалютнаяСуммаОстаток,
		|	ТиповойОстатки.СуммаОстаток,
		|	ТиповойОстатки.СтруктурноеПодразделение
		|ИЗ
		|	РегистрБухгалтерии.Типовой.Остатки(
		|			&ГраницаОстатков,
		|			Счет В (&СчетаПодлежащиеПереоценке),
		|			,
		|			Организация = &Организация
		|				И СтруктурноеПодразделение = &СтруктурноеПодразделение) КАК ТиповойОстатки
		|
		|УПОРЯДОЧИТЬ ПО
		|	Счет,
		|	Субконто1,
		|	Субконто2,
		|	Субконто3,
		|	Валюта"; 	
		
		ТаблицаВалютныхОстатков = Запрос.Выполнить().Выгрузить();
	Иначе //если вызываем из закрытия месяца, там уже таблица готовая
		ТаблицаВалютныхОстатков = СтруктураРегламентныхТаблиц.ТаблицаВалютныхОстатков;		
		Если СтруктураРегламентныхТаблиц.Свойство("ТаблицаКурсовВалют") Тогда
			ТаблицаКурсовВалют = СтруктураРегламентныхТаблиц.ТаблицаКурсовВалют;
		КонецЕсли;		
	КонецЕсли; 
	
	Для Каждого СтрокаДляПереоценки Из ТаблицаВалютныхОстатков Цикл
		
		ВидыСубконтоСчета = ВидыСубконтоСчетов[СтрокаДляПереоценки.Счет];
		Если ВидыСубконтоСчета = Неопределено Тогда
			ВидыСубконтоСчета = СтрокаДляПереоценки.Счет.ВидыСубконто;
			ВидыСубконтоСчетов.Вставить(СтрокаДляПереоценки.Счет, ВидыСубконтоСчета);
		КонецЕсли;
		
		СчетСОборотнымСубконто = Ложь;			
		
		Для Каждого СтрокаВидаСубконто Из ВидыСубконтоСчета Цикл
			Если СтрокаВидаСубконто.ТолькоОбороты Тогда
				СчетСОборотнымСубконто = Истина;
				Прервать;
			КонецЕсли;					
		КонецЦикла;
		
		Если СчетСОборотнымСубконто Тогда
			СтруктураПоиска = Новый Структура("Счет", СтрокаДляПереоценки.Счет);
			Для Каждого СтрокаВидаСубконто ИЗ ВидыСубконтоСчета Цикл
				НомерСубконто = СтрокаВидаСубконто.НомерСтроки;
				Если СтрокаДляПереоценки["Субконто" + НомерСубконто] <> Неопределено И СтрокаДляПереоценки["Субконто" + НомерСубконто] <> NULL Тогда
					СтруктураПоиска.Вставить("Субконто" + НомерСубконто, СтрокаДляПереоценки["Субконто" + НомерСубконто]);
				КонецЕсли;
			КонецЦикла;
			
			ТаблицаВалютныхОборотов = СтруктураРегламентныхТаблиц.ТаблицаВалютныхОборотов;
			ОборотыСчета = ТаблицаВалютныхОборотов.НайтиСтроки(СтруктураПоиска);
			Для Каждого СтрокаОборотов Из ОборотыСчета Цикл
				НоваяСтрокаТаблицыОборотногоСубконто = ТаблицаОборотныхСубконтоСчета.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаТаблицыОборотногоСубконто, СтрокаОборотов);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	СтруктураТаблицПереоценки = Новый Структура;
	
	СтруктураТаблицПереоценки.Вставить("ТаблицаВалютныхОстатков",  ТаблицаВалютныхОстатков);
	СтруктураТаблицПереоценки.Вставить("ТаблицаОборотногоСубконто",ТаблицаОборотныхСубконтоСчета);	
	СтруктураТаблицПереоценки.Вставить("ТаблицаКурсовВалют",		ТаблицаКурсовВалют);	
	
	
	Возврат СтруктураТаблицПереоценки;   
	             	
КонецФункции // ПодготовитьТаблицуВалютныхОстатковВсе()

Функция ПодготовитьТаблицуВалютныхОстатковПоДокументу(СтруктураПараметров, Движения)
	
	Ссылка          		 = СтруктураПараметров.Регистратор;
	Дата            		 = СтруктураПараметров.Период;
	Организация     		 = СтруктураПараметров.Организация;
	СтруктурноеПодразделение = СтруктураПараметров.СтруктурноеПодразделение;
	ВалютаДокумента 		 = СтруктураПараметров.ВалютаДокумента;
	Проводки        		 = Движения.Типовой;
	
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	ТаблицаВалютныхОстатков = Новый ТаблицаЗначений;
	
		
	ТаблицаОборотныхСубконтоСчета = Новый ТаблицаЗначений;
	ТаблицаОборотныхСубконтоСчета.Колонки.Добавить("Счет",            Новый ОписаниеТипов("ПланСчетовСсылка.Типовой"));	
	ТаблицаОборотныхСубконтоСчета.Колонки.Добавить("Субконто1");
	ТаблицаОборотныхСубконтоСчета.Колонки.Добавить("Субконто2");
	ТаблицаОборотныхСубконтоСчета.Колонки.Добавить("Субконто3");
	ТаблицаОборотныхСубконтоСчета.Колонки.Добавить("Сумма");

	СтруктураТаблицПереоценки = Новый Структура;
	СтруктураТаблицПереоценки.Вставить("ТаблицаВалютныхОстатков",ТаблицаВалютныхОстатков);
	СтруктураТаблицПереоценки.Вставить("ТаблицаОборотногоСубконто",ТаблицаОборотныхСубконтоСчета);	

	Если ВалютаДокумента = ВалютаРегламентированногоУчета Тогда		
		
		Возврат СтруктураТаблицПереоценки;
				
	КонецЕсли;
	
	МоментВремени = Новый МоментВремени(Дата, Ссылка);
	
	СчетаПодлежащиеПереоценке = ПроцедурыБухгалтерскогоУчета.СчетаПодлежащиеПереоценке();	
	СчетаПодлежащиеПереоценкеПриПогашении = ПроцедурыБухгалтерскогоУчета.СчетаПодлежащиеПереоценкеПриПогашении();
	
	ВидыСубконтоСчетов = Новый Соответствие; // виды субконто счетов кэшируются
	
	// Получение остатков только по счетам и субконто, которые уже содержатся в переданном наборе записей регистра "Типовой"
	// Оборотные субконто переданного набора записей пропускаются
	
	// Формирование таблицы счетов и субконто для переоценки
	// Заполнение полей ИспользоватьСубконтоХ:
	// 		- если субконто с номером Х нет на счете - Ложь
	// 		- если субконто с номером Х есть и оно необоротное - Истина
	// 		- если субконто с номером Х есть и оно оборотное - Ложь
	
	ТаблицаДляПереоценки = Новый ТаблицаЗначений;
	ТаблицаДляПереоценки.Колонки.Добавить("Счет",                     Новый ОписаниеТипов("ПланСчетовСсылка.Типовой"));
	ТаблицаДляПереоценки.Колонки.Добавить("Валюта",                   Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	ТаблицаДляПереоценки.Колонки.Добавить("ИспользоватьСубконто1",    Новый ОписаниеТипов("Булево")); 
	ТаблицаДляПереоценки.Колонки.Добавить("ИспользоватьСубконто2",    Новый ОписаниеТипов("Булево"));
	ТаблицаДляПереоценки.Колонки.Добавить("ИспользоватьСубконто3",    Новый ОписаниеТипов("Булево"));
	ТаблицаДляПереоценки.Колонки.Добавить("Субконто1");
	ТаблицаДляПереоценки.Колонки.Добавить("Субконто2");
	ТаблицаДляПереоценки.Колонки.Добавить("Субконто3");
	ТаблицаДляПереоценки.Колонки.Добавить("Сумма");
	ТаблицаДляПереоценки.Колонки.Добавить("СпособПризнанияКурсовойРазницы", Новый ОписаниеТипов("ПеречислениеСсылка.СпособыПризнанияКурсовойРазницы"));
	
	Для каждого Проводка Из Проводки Цикл
		
		СчетДтПереоценивается = СчетаПодлежащиеПереоценке.Найти(Проводка.СчетДт) <> Неопределено;
		Если СчетДтПереоценивается  И Проводка.СчетДт.Валютный Тогда
			СчетДтСВидомПоОперациямПриПогашении = СчетаПодлежащиеПереоценкеПриПогашении.Найти(Проводка.СчетДт); 
				
			//если задолженность идет на увеличение, то не нужно переоценивать когда способ переоценки = "По операция (при погашении)
			Если СчетДтСВидомПоОперациямПриПогашении <> Неопределено 
				И Проводка.СчетДт.Вид = ВидСчета.Активный Тогда 
				Продолжить;
			КонецЕсли;	
			
			СтрокаДляПереоценки = ТаблицаДляПереоценки.Добавить();
			
			СтрокаДляПереоценки.Счет          = Проводка.СчетДт;
			СтрокаДляПереоценки.Валюта        = Проводка.ВалютаДт;
			
			СтрокаДляПереоценки.Сумма         = Проводка.ВалютнаяСуммаДт;
			
			СтрокаДляПереоценки.СпособПризнанияКурсовойРазницы  = ?(СчетДтСВидомПоОперациямПриПогашении = Неопределено, Перечисления.СпособыПризнанияКурсовойРазницы.ПустаяСсылка(), Перечисления.СпособыПризнанияКурсовойРазницы.ПоОперациямПриПогашении);
			
			ВидыСубконтоСчета = ВидыСубконтоСчетов[Проводка.СчетДт];
			Если ВидыСубконтоСчета = Неопределено Тогда
				ВидыСубконтоСчета = Проводка.СчетДт.ВидыСубконто;
				ВидыСубконтоСчетов.Вставить(Проводка.СчетДт, ВидыСубконтоСчета);
			КонецЕсли;
			
			СчетСОборотнымСубконто = Ложь;			
			
			Для Каждого СтрокаВидаСубконто Из ВидыСубконтоСчета Цикл
				НомерСубконто        = СтрокаВидаСубконто.НомерСтроки;
				ИспользоватьСубконто = НЕ СтрокаВидаСубконто.ТолькоОбороты;
				СтрокаДляПереоценки["ИспользоватьСубконто" + НомерСубконто] = ИспользоватьСубконто;
				Если ИспользоватьСубконто Тогда
					СтрокаДляПереоценки["Субконто" + НомерСубконто] = Проводка.СубконтоДт[СтрокаВидаСубконто.ВидСубконто];
				Иначе
					СчетСОборотнымСубконто = Истина;
					СтрокаДляПереоценки["Субконто" + НомерСубконто] = Неопределено;
				КонецЕсли;					
			КонецЦикла;
			
			Если СчетСОборотнымСубконто Тогда
				НоваяСтрокаТаблицыОборотногоСубконто = ТаблицаОборотныхСубконтоСчета.Добавить();
				НоваяСтрокаТаблицыОборотногоСубконто.Счет = СтрокаДляПереоценки.Счет;
				НоваяСтрокаТаблицыОборотногоСубконто.Сумма 	 = Проводка.ВалютнаяСуммаДт;									
				Для Каждого СтрокаВидаСубконто ИЗ ВидыСубконтоСчета Цикл
					НомерСубконто        = СтрокаВидаСубконто.НомерСтроки;
					НоваяСтрокаТаблицыОборотногоСубконто["Субконто" + НомерСубконто] = Проводка.СубконтоДт[СтрокаВидаСубконто.ВидСубконто];
				КонецЦикла;					
			КонецЕсли;
		КонецЕсли;
					
		СчетКтПереоценивается = СчетаПодлежащиеПереоценке.Найти(Проводка.СчетКт) <> Неопределено;
		Если СчетКтПереоценивается И Проводка.СчетКт.Валютный Тогда
			
			СчетКтСВидомПоОперациямПриПогашении = СчетаПодлежащиеПереоценкеПриПогашении.Найти(Проводка.СчетКт); 
				
			//если задолженность идет на увеличение, то не нужно переоценивать когда способ переоценки = "По операция (при погашении)
			Если СчетКтСВидомПоОперациямПриПогашении <> Неопределено 
				И Проводка.СчетКт.Вид = ВидСчета.Пассивный Тогда 
				Продолжить;
			КонецЕсли;	  
			
			СтрокаДляПереоценки = ТаблицаДляПереоценки.Добавить();
			
			СтрокаДляПереоценки.Счет          = Проводка.СчетКт;
			СтрокаДляПереоценки.Валюта        = Проводка.ВалютаКт;
			СтрокаДляПереоценки.Сумма         = Проводка.ВалютнаяСуммаКт;
			
			СтрокаДляПереоценки.СпособПризнанияКурсовойРазницы  = ?(СчетКтСВидомПоОперациямПриПогашении = Неопределено, Перечисления.СпособыПризнанияКурсовойРазницы.ПустаяСсылка(), Перечисления.СпособыПризнанияКурсовойРазницы.ПоОперациямПриПогашении);
			
			ВидыСубконтоСчета = ВидыСубконтоСчетов[Проводка.СчетКт];
			Если ВидыСубконтоСчета = Неопределено Тогда
				ВидыСубконтоСчета = Проводка.СчетКт.ВидыСубконто;
				ВидыСубконтоСчетов.Вставить(Проводка.СчетКт, ВидыСубконтоСчета);
			КонецЕсли;
			
			СчетСОборотнымСубконто = Ложь;			
			
			Для Каждого СтрокаВидаСубконто Из ВидыСубконтоСчета Цикл
				НомерСубконто        = СтрокаВидаСубконто.НомерСтроки;
				ИспользоватьСубконто = НЕ СтрокаВидаСубконто.ТолькоОбороты;
				СтрокаДляПереоценки["ИспользоватьСубконто" + НомерСубконто] = ИспользоватьСубконто;
				Если ИспользоватьСубконто Тогда
					СтрокаДляПереоценки["Субконто" + НомерСубконто] = Проводка.СубконтоКт[СтрокаВидаСубконто.ВидСубконто];
				Иначе
					СчетСОборотнымСубконто = Истина;
					СтрокаДляПереоценки["Субконто" + НомерСубконто] = Неопределено;
				КонецЕсли;
			КонецЦикла;    			
			
			Если СчетСОборотнымСубконто Тогда
				НоваяСтрокаТаблицыОборотногоСубконто = ТаблицаОборотныхСубконтоСчета.Добавить();
				НоваяСтрокаТаблицыОборотногоСубконто.Счет    = СтрокаДляПереоценки.Счет;
				НоваяСтрокаТаблицыОборотногоСубконто.Сумма 	 = Проводка.ВалютнаяСуммаКт;									
				Для Каждого СтрокаВидаСубконто ИЗ ВидыСубконтоСчета Цикл
					НомерСубконто        = СтрокаВидаСубконто.НомерСтроки;
					НоваяСтрокаТаблицыОборотногоСубконто["Субконто" + НомерСубконто] = Проводка.СубконтоКт[СтрокаВидаСубконто.ВидСубконто];
				КонецЦикла;					
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ТаблицаДляПереоценки.Количество() = 0 Тогда // В проводках нет счетов для переоценки
		Возврат СтруктураТаблицПереоценки;
	КонецЕсли;

	ТаблицаДляПереоценки.Свернуть(
		"Счет, Субконто1, Субконто2, Субконто3, ИспользоватьСубконто1, ИспользоватьСубконто2, ИспользоватьСубконто3, Валюта, СпособПризнанияКурсовойРазницы", "Сумма");
		
	ТаблицаОборотныхСубконтоСчета.Свернуть("Счет,Субконто1,Субконто2,Субконто3", "Сумма");

	// По строкам подготовленной таблицы для переоценки выполняются запросы к остаткам
	ШаблонТекстаЗапроса =
	"ВЫБРАТЬ
	|	ТиповойОстатки.Счет КАК Счет,
	|	ПРЕДСТАВЛЕНИЕ(ТиповойОстатки.Счет) КАК СчетПредставление,
	|	ТиповойОстатки.Счет.Наименование КАК СчетНаименование,
	|	ЕСТЬNULL(ТиповойОстатки.СтруктурноеПодразделение, &ПустоеСтруктурноеПодразделение) КАК СтруктурноеПодразделение,
	|	ТиповойОстатки.Субконто1 КАК Субконто1,
	|	ТиповойОстатки.Субконто2 КАК Субконто2,
	|	ТиповойОстатки.Субконто3 КАК Субконто3,
	|	ТиповойОстатки.Валюта,
	|	ПРЕДСТАВЛЕНИЕ(ТиповойОстатки.Валюта) КАК ВалютаПредставление,
	|	ТиповойОстатки.ВалютнаяСуммаОстаток,
	|	ТиповойОстатки.СуммаОстаток,
	|	&СпособПризнанияКурсовойРазницы  КАК СпособПризнанияКурсовойРазницы,
	|	ЕстьNull(&СуммаОперации,0)  КАК СуммаОперации
	|ИЗ
	|	РегистрБухгалтерии.Типовой.Остатки(
	|			&МоментВремени,
	|			Счет = &Счет,
	|			&ВидыСубконто,
	|			Организация = &Организация
	|				И (СтруктурноеПодразделение = &СтруктурноеПодразделение
	|					ИЛИ СтруктурноеПодразделение ЕСТЬ NULL )
	|				И Валюта = &Валюта
	|				И Субконто1 = &Субконто1
	|				И Субконто2 = &Субконто2
	|				И Субконто3 = &Субконто3) КАК ТиповойОстатки
	|
	|ДЛЯ ИЗМЕНЕНИЯ
	|	РегистрБухгалтерии.Типовой.Остатки";
	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МоментВремени", МоментВремени);
	Запрос.УстановитьПараметр("Организация",   Организация);
	Запрос.УстановитьПараметр("ПустоеСтруктурноеПодразделение", Справочники.ПодразделенияОрганизаций.ПустаяСсылка());
	Запрос.УстановитьПараметр("СтруктурноеПодразделение", 		СтруктурноеПодразделение);

	Для Каждого СтрокаДляПереоценки Из ТаблицаДляПереоценки Цикл
		
		Запрос.УстановитьПараметр("Счет",          СтрокаДляПереоценки.Счет);
		Запрос.УстановитьПараметр("Валюта",        СтрокаДляПереоценки.Валюта);
		Запрос.УстановитьПараметр("Субконто1",     СтрокаДляПереоценки.Субконто1);
		Запрос.УстановитьПараметр("Субконто2",     СтрокаДляПереоценки.Субконто2);
		Запрос.УстановитьПараметр("Субконто3",     СтрокаДляПереоценки.Субконто3); 		
		Запрос.УстановитьПараметр("СпособПризнанияКурсовойРазницы",     СтрокаДляПереоценки.СпособПризнанияКурсовойРазницы);
		Запрос.УстановитьПараметр("СуммаОперации", СтрокаДляПереоценки.Сумма);
		
		ВидыСубконтоСчета = ВидыСубконтоСчетов[СтрокаДляПереоценки.Счет];
		Запрос.УстановитьПараметр("ВидыСубконто", ВидыСубконтоСчета.ВыгрузитьКолонку("ВидСубконто"));
		
		ТекстЗапроса = ШаблонТекстаЗапроса;
		
		Если НЕ СтрокаДляПереоценки.ИспользоватьСубконто1 Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТиповойОстатки.Субконто1", "НЕОПРЕДЕЛЕНО");
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "
			|				И Субконто1 = &Субконто1", "");
		КонецЕсли;
		Если НЕ СтрокаДляПереоценки.ИспользоватьСубконто2 Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТиповойОстатки.Субконто2", "НЕОПРЕДЕЛЕНО");
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "
			|				И Субконто2 = &Субконто2", "");
		КонецЕсли;
		Если НЕ СтрокаДляПереоценки.ИспользоватьСубконто3 Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТиповойОстатки.Субконто3", "НЕОПРЕДЕЛЕНО");
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "
			|				И Субконто3 = &Субконто3", "");
		КонецЕсли;
		
		Запрос.Текст = ТекстЗапроса;
		Результат = Запрос.Выполнить();
		
		Если Результат.Пустой() Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТаблицаВалютныхОстатков.Количество() = 0 Тогда
			ТаблицаВалютныхОстатков = Результат.Выгрузить();
		Иначе
			ТаблицаРезультата = Результат.Выгрузить();
			Для каждого СтрокаРезультата Из ТаблицаРезультата Цикл
				СтрокаОстатка = ТаблицаВалютныхОстатков.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаОстатка, СтрокаРезультата);
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураТаблицПереоценки.Вставить("ТаблицаВалютныхОстатков",  ТаблицаВалютныхОстатков);
	СтруктураТаблицПереоценки.Вставить("ТаблицаОборотногоСубконто",ТаблицаОборотныхСубконтоСчета);	
	
	Возврат СтруктураТаблицПереоценки;
	
КонецФункции

Функция ПодготовитьТаблицуПереоценкаВалютныхОстатков(СтруктураПараметров, Отказ)
	
	Ссылка          		= СтруктураПараметров.Регистратор;
	Дата            		= СтруктураПараметров.Период;
	Организация     		= СтруктураПараметров.Организация;
	ВалютныеОстатки		 	= СтруктураПараметров.ТаблицаВалютныхОстатков;
	КурсВзаиморасчетов 		= ?(СтруктураПараметров.Свойство("КурсВзаиморасчетов"), СтруктураПараметров.КурсВзаиморасчетов, 0);
	КратностьВзаиморасчетов = ?(СтруктураПараметров.Свойство("КратностьВзаиморасчетов"), СтруктураПараметров.КратностьВзаиморасчетов, 0);
	
	ТаблицаОборотногоСубконто = СтруктураПараметров.ТаблицаОборотногоСубконто;	
	РегламентнаяПереоценка    = СтруктураПараметров.РегламентнаяПереоценка;
	
	ТаблицаПереоценка = Новый ТаблицаЗначений;
	ТаблицаПереоценка.Колонки.Добавить("Счет",                  Новый ОписаниеТипов("ПланСчетовСсылка.Типовой"));
	ТаблицаПереоценка.Колонки.Добавить("СчетПредставление",     ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповСтроки(8));
	ТаблицаПереоценка.Колонки.Добавить("СчетНаименование",      ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповСтроки(120));
	ТаблицаПереоценка.Колонки.Добавить("Субконто1");
	ТаблицаПереоценка.Колонки.Добавить("Субконто2");
	ТаблицаПереоценка.Колонки.Добавить("Субконто3");
	ТаблицаПереоценка.Колонки.Добавить("Валюта",                Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	ТаблицаПереоценка.Колонки.Добавить("ВалютаПредставление",   ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповСтроки(10));
	ТаблицаПереоценка.Колонки.Добавить("СуммаВВалюте",          ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаПереоценка.Колонки.Добавить("Сумма",       	     	ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаПереоценка.Колонки.Добавить("КурсПереоценки",        ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(10, 4));
	ТаблицаПереоценка.Колонки.Добавить("СуммаПереоценки",       ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2)); 	
	ТаблицаПереоценка.Колонки.Добавить("СуммаНУ",            	ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаПереоценка.Колонки.Добавить("СуммаПР",            	ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаПереоценка.Колонки.Добавить("СуммаВТенге",           ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаПереоценка.Колонки.Добавить("СуммаВТенгеНУ",         ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаПереоценка.Колонки.Добавить("СуммаВТенгеПР",         ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	
	Если ВалютныеОстатки.Количество() = 0 Тогда
		Возврат ТаблицаПереоценка;
	КонецЕсли;
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	ВидыСубконтоСчетов = Новый Соответствие; // виды субконто счетов кэшируются
	
	Если  ЗначениеЗаполнено(КурсВзаиморасчетов) Тогда
		СтруктураКурсаДокумента = Новый Структура();
		СтруктураКурсаДокумента.Вставить("Курс", КурсВзаиморасчетов);
		СтруктураКурсаДокумента.Вставить("Кратность", КратностьВзаиморасчетов);
	КонецЕсли;	
	
	Для каждого СтрокаОстатка Из ВалютныеОстатки Цикл
		
		ОбнаруженаОшибка = Ложь;
		Если НЕ ЗначениеЗаполнено(СтрокаОстатка.Валюта) Тогда
										
			ТекстОшибки = НСтр("ru='Ошибка переоценки валютных счетов.
				|Обнаружены остатки по валютным счетам без указания валюты. Переоценка остатка не производится.
				|Рекомендуется указать валюту в проводках по указанным данным:
				|	- счет: %1 <%2>'");
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, 
				СтрокаОстатка.Счет,
				СтрокаОстатка.Счет.Наименование);
				
			ОбнаруженаОшибка = Истина;
		КонецЕсли;
		
		Если СтрокаОстатка.Валюта = ВалютаРегламентированногоУчета И 
			НЕ СтрокаОстатка.СуммаОстаток= СтрокаОстатка.ВалютнаяСуммаОстаток Тогда
			
			ТекстОшибки = НСтр("ru='Обнаружены остатки в валюте регламентированного учета, не совпадающие с суммой счета. 
				|Переоценка остатка не производится.
				|	- счет: %1 <%2>'");

			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, 
				СтрокаОстатка.Счет,
				СтрокаОстатка.Счет.Наименование);  
			
			ОбнаруженаОшибка = Истина;
		КонецЕсли;
		
		Если ОбнаруженаОшибка Тогда
			ВидыСубконтоСчета = ВидыСубконтоСчетов[СтрокаОстатка.Счет];
			Если ВидыСубконтоСчета = Неопределено Тогда
				ВидыСубконтоСчета = СтрокаОстатка.Счет.ВидыСубконто;
				ВидыСубконтоСчетов.Вставить(СтрокаОстатка.Счет, ВидыСубконтоСчета);
			КонецЕсли;
			
			Для НомерСубконто = 1 по ВидыСубконтоСчета.Количество() Цикл
				Если ВидыСубконтоСчета[НомерСубконто-1].ТолькоОбороты Тогда
					Продолжить;
				КонецЕсли;
				ТекстОшибки = ТекстОшибки + НСтр("ru='
					|		- субконто <%1> : ""%2""'");
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, 
					Строка(ВидыСубконтоСчета[НомерСубконто-1].ВидСубконто),
					СтрокаОстатка["Субконто" + НомерСубконто]);
			КонецЦикла;
			ТекстОшибки = ТекстОшибки + НСтр("ru='
				|		валютный остаток: %1 , тенговый остаток: %2	'");
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, 
				Формат(СтрокаОстатка.ВалютнаяСуммаОстаток, "ЧЦ=15; ЧДЦ=2; ЧН=-"),
				Формат(СтрокаОстатка.СуммаОстаток, "ЧЦ=15; ЧДЦ=2; ЧН=-"));
				
			ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации(ТекстОшибки,,, СтруктураПараметров.Объект, Перечисления.ВидыРегламентныхОпераций.ПереоценкаВалютныхСредствБУ);
			Продолжить;		
		КонецЕсли;  
		          			
		КэшКурсовВалют = Новый Соответствие;
		СтруктураКурса = Новый Структура();

		ПереоцениватьОстатокБУ = Истина;
		
 		Если  РегламентнаяПереоценка  И СтруктураПараметров.ТаблицаКурсовВалют.Количество() <> 0 Тогда			
			СтрокаВалюты = СтруктураПараметров.ТаблицаКурсовВалют.Найти(СтрокаОстатка.Валюта, "Валюта");
			Если СтрокаВалюты <> Неопределено  Тогда
				СтруктураКурсаЗакрытия = Новый Структура();
				СтруктураКурсаЗакрытия.Вставить("Валюта",    СтрокаВалюты.Валюта);
				СтруктураКурсаЗакрытия.Вставить("Курс",      СтрокаВалюты.Курс);
				СтруктураКурсаЗакрытия.Вставить("Кратность", СтрокаВалюты.Кратность);	
				КэшКурсовВалют.Вставить(СтрокаОстатка.Валюта, СтруктураКурсаЗакрытия);
			КонецЕсли; 
		ИначеЕсли СтруктураКурсаДокумента <> Неопределено Тогда
			КэшКурсовВалют.Вставить(СтрокаОстатка.Валюта, СтруктураКурсаДокумента);
		КонецЕсли;       
				
		// иначе из  регистра сведений
		СтруктураКурса = КэшКурсовВалют[СтрокаОстатка.Валюта];
		Если СтруктураКурса = Неопределено  Тогда
			СтруктураКурса = ОбщегоНазначенияБК.ПолучитьКурсВалюты(СтрокаОстатка.Валюта, Дата);
			КэшКурсовВалют.Вставить(СтрокаОстатка.Валюта, СтруктураКурса);
		КонецЕсли;
		
		ОстатокВал = СтрокаОстатка.ВалютнаяСуммаОстаток;
		Остаток    = СтрокаОстатка.СуммаОстаток;
		
		Если НЕ РегламентнаяПереоценка И СтрокаОстатка.СпособПризнанияКурсовойРазницы = Перечисления.СпособыПризнанияКурсовойРазницы.ПоОперациямПриПогашении Тогда
			
			КурсОстатка = 0;
			Если ОстатокВал <> 0 Тогда
				КурсОстатка = Остаток/ОстатокВал;					
			КонецЕсли; 				
			
			ЗнакПереоценки = 1;
			Если СтрокаОстатка.Счет.Вид = ВидСчета.Пассивный Тогда
				ЗнакПереоценки = -1;
			КонецЕсли;
			
			//берем только ту часть суммы, которая идет на погашение
			СуммаДляПереоценки  = ЗнакПереоценки * Мин(ЗнакПереоценки*ОстатокВал, СтрокаОстатка.СуммаОперации);
			СуммаПереоценкиПоКурсуОстатка = СуммаДляПереоценки * КурсОстатка;
			
			РасчетныйОстаток = ОбщегоНазначенияБККлиентСервер.ПересчитатьИзВалютыВВалюту(СуммаДляПереоценки, 
									СтрокаОстатка.Валюта, ВалютаРегламентированногоУчета,
									СтруктураКурса.Курс, 1,
									СтруктураКурса.Кратность, 1);			
			
			Если ПереоцениватьОстатокБУ Тогда
				СуммаПереоценки = Окр(РасчетныйОстаток - СуммаПереоценкиПоКурсуОстатка,2);
			Иначе
				СуммаПереоценки = 0;
			КонецЕсли;
			
		Иначе
			
			РасчетныйОстаток = Окр(ОбщегоНазначенияБККлиентСервер.ПересчитатьИзВалютыВВалюту(ОстатокВал, 
								СтрокаОстатка.Валюта, ВалютаРегламентированногоУчета,
								СтруктураКурса.Курс, 1,
								СтруктураКурса.Кратность, 1), 2); 			        			
			
			Если ПереоцениватьОстатокБУ Тогда
				СуммаПереоценки = РасчетныйОстаток - Остаток;
			Иначе
				СуммаПереоценки = 0;
			КонецЕсли;   
			
		КонецЕсли;
		
		Если СуммаПереоценки = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураПоиска = Новый Структура("Счет",СтрокаОстатка.Счет);
		Индекс = 1;
		Пока Индекс <= 3 Цикл
			Если СтрокаОстатка["Субконто" + Индекс] <> Неопределено И СтрокаОстатка["Субконто" + Индекс] <> NULL Тогда
				СтруктураПоиска.Вставить("Субконто" + Индекс,СтрокаОстатка["Субконто" + Индекс]);				
			КонецЕсли;
			Индекс = Индекс + 1;
		КонецЦикла;
		 		
		МассивОборотныхСубконто = ТаблицаОборотногоСубконто.НайтиСтроки(СтруктураПоиска);
		
		Если МассивОборотныхСубконто.Количество() = 0 Тогда
			СтрокаПереоценка = ТаблицаПереоценка.Добавить();
			СтрокаПереоценка.Счет                     = СтрокаОстатка.Счет;
			СтрокаПереоценка.СчетПредставление        = СтрокаОстатка.СчетПредставление;
			СтрокаПереоценка.СчетНаименование         = СтрокаОстатка.СчетНаименование;
			СтрокаПереоценка.Субконто1                = СтрокаОстатка.Субконто1;
			СтрокаПереоценка.Субконто2                = СтрокаОстатка.Субконто2;
			СтрокаПереоценка.Субконто3                = СтрокаОстатка.Субконто3;
			СтрокаПереоценка.Валюта                   = СтрокаОстатка.Валюта;
			СтрокаПереоценка.ВалютаПредставление      = СтрокаОстатка.ВалютаПредставление;
			СтрокаПереоценка.КурсПереоценки           = СтруктураКурса.Курс;
			СтрокаПереоценка.СуммаПереоценки          = СуммаПереоценки;
			СтрокаПереоценка.Сумма          		  = СуммаПереоценки;
			Если РегламентнаяПереоценка Тогда  
				СтрокаПереоценка.СуммаВВалюте             = ОстатокВал;
				СтрокаПереоценка.СуммаВТенге              = Остаток;
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		ОбщаяСуммаПоОборотнымСубконтоСчета = 0 ;
		
		Для Каждого Элемент Из МассивОборотныхСубконто Цикл   			
			ОбщаяСуммаПоОборотнымСубконтоСчета =  ОбщаяСуммаПоОборотнымСубконтоСчета + Элемент.Сумма;										
		КонецЦикла;
			        							
		РаспределеннаяСуммаПоОборотнымСубконтоСчета     = 0;
		РаспределеннаяСуммаПоОборотнымСубконтоСчетаРегл = 0;
		РаспределеннаяСуммаПоОборотнымСубконтоСчетаВал  = 0;
		
		Для Каждого СтрОборотногоСубконто Из  МассивОборотныхСубконто Цикл
			СуммаПереоценкиПоСтроке = Окр(?(ОбщаяСуммаПоОборотнымСубконтоСчета = 0, 0,СтрОборотногоСубконто.Сумма/ОбщаяСуммаПоОборотнымСубконтоСчета * СуммаПереоценки),2);
			РаспределеннаяСуммаПоОборотнымСубконтоСчета = РаспределеннаяСуммаПоОборотнымСубконтоСчета  + СуммаПереоценкиПоСтроке;
			
			Если РегламентнаяПереоценка Тогда  				
				РеглСуммаПоСтроке = Окр(?(ОбщаяСуммаПоОборотнымСубконтоСчета = 0, 0,СтрОборотногоСубконто.Сумма/ОбщаяСуммаПоОборотнымСубконтоСчета * Остаток),2);
				РаспределеннаяСуммаПоОборотнымСубконтоСчетаРегл = РаспределеннаяСуммаПоОборотнымСубконтоСчетаРегл  + РеглСуммаПоСтроке;
						
				ВалСуммаПоСтроке = Окр(?(ОбщаяСуммаПоОборотнымСубконтоСчета = 0, 0,СтрОборотногоСубконто.Сумма/ОбщаяСуммаПоОборотнымСубконтоСчета * ОстатокВал),2);
				РаспределеннаяСуммаПоОборотнымСубконтоСчетаВал = РаспределеннаяСуммаПоОборотнымСубконтоСчетаВал + ВалСуммаПоСтроке;								
			КонецЕсли; 	
			    						
			СтрокаПереоценка = ТаблицаПереоценка.Добавить();
			СтрокаПереоценка.Счет                     = СтрокаОстатка.Счет;
			СтрокаПереоценка.СчетПредставление        = СтрокаОстатка.СчетПредставление;
			СтрокаПереоценка.СчетНаименование         = СтрокаОстатка.СчетНаименование;
			СтрокаПереоценка.Субконто1                = СтрОборотногоСубконто.Субконто1;
			СтрокаПереоценка.Субконто2                = СтрОборотногоСубконто.Субконто2;
			СтрокаПереоценка.Субконто3                = СтрОборотногоСубконто.Субконто3;
			СтрокаПереоценка.Валюта                   = СтрокаОстатка.Валюта;
			СтрокаПереоценка.ВалютаПредставление      = СтрокаОстатка.ВалютаПредставление;
			СтрокаПереоценка.КурсПереоценки           = СтруктураКурса.Курс;
			
			Если РегламентнаяПереоценка Тогда  
				СтрокаПереоценка.СуммаВВалюте             = ВалСуммаПоСтроке;
				СтрокаПереоценка.СуммаВТенге              = РеглСуммаПоСтроке;
			КонецЕсли;   	
			
			СтрокаПереоценка.СуммаПереоценки          = СуммаПереоценкиПоСтроке;
			СтрокаПереоценка.Сумма          		  = СуммаПереоценкиПоСтроке;			
		КонецЦикла;
		
		// Обшибки Округления   (отнесем на последнюю запись по обортному субконто
		ПогрешностьОкругления = Окр(СуммаПереоценки - РаспределеннаяСуммаПоОборотнымСубконтоСчета,2);		
		
		Если Не ПогрешностьОкругления = 0 Тогда
			
			СтрокаПереоценка = ТаблицаПереоценка.Добавить();
			СтрокаПереоценка.Счет                     = СтрокаОстатка.Счет;
			СтрокаПереоценка.СчетПредставление        = СтрокаОстатка.СчетПредставление;
			СтрокаПереоценка.СчетНаименование         = СтрокаОстатка.СчетНаименование;
			СтрокаПереоценка.Субконто1                = СтрОборотногоСубконто.Субконто1;
			СтрокаПереоценка.Субконто2                = СтрОборотногоСубконто.Субконто2;
			СтрокаПереоценка.Субконто3                = СтрОборотногоСубконто.Субконто3;
			СтрокаПереоценка.Валюта                   = СтрокаОстатка.Валюта;
			СтрокаПереоценка.ВалютаПредставление      = СтрокаОстатка.ВалютаПредставление;
			СтрокаПереоценка.КурсПереоценки           = СтруктураКурса.Курс;
			СтрокаПереоценка.СуммаПереоценки          = ПогрешностьОкругления;
			СтрокаПереоценка.Сумма          		  = ПогрешностьОкругления; 			
			
			Если РегламентнаяПереоценка Тогда  
				СтрокаПереоценка.СуммаВВалюте             = Окр(ОстатокВал - РаспределеннаяСуммаПоОборотнымСубконтоСчетаВал,2);
				СтрокаПереоценка.СуммаВТенге              = Окр(Остаток    - РаспределеннаяСуммаПоОборотнымСубконтоСчетаРегл,2);;
			КонецЕсли;			
			
		КонецЕсли;	
		
	КонецЦикла;
	
	Возврат ТаблицаПереоценка;
	
КонецФункции

// Определяет, есть ли в проводках документа хоть один валютный счет
Функция ЕстьВалютныеСчета(Проводки)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Проводки", Проводки);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Проводки.СчетДт КАК СчетДт,
	|	Проводки.СчетКт КАК СчетКт
	|ПОМЕСТИТЬ ТаблицаСчетовДтКт
	|ИЗ
	|	&Проводки КАК Проводки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаСчетовДтКт.СчетДт КАК Счет
	|ПОМЕСТИТЬ ТаблицаСчетов
	|ИЗ
	|	ТаблицаСчетовДтКт КАК ТаблицаСчетовДтКт
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаСчетовДтКт.СчетКт
	|ИЗ
	|	ТаблицаСчетовДтКт КАК ТаблицаСчетовДтКт
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Типовой.Ссылка
	|ИЗ
	|	ПланСчетов.Типовой КАК Типовой
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаСчетов КАК ТаблицаСчетов
	|		ПО Типовой.Ссылка = ТаблицаСчетов.Счет
	|ГДЕ
	|	Типовой.Валютный";
	
	Результат = Запрос.Выполнить();
	Возврат НЕ Результат.Пустой();
	
КонецФункции
