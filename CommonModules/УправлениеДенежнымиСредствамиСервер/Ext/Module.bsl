////////////////////////////////////////////////////////////////////////////////
// УправлениеДенежнымиСредствамиСервер: 
//  
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

Функция ПолучитьОсновнойБанковскийСчетДокумента(ДанныеОбъекта) Экспорт
	
	МетаданныеДокумента = ДанныеОбъекта.Ссылка.Метаданные();
	
	БанковскийСчетПоУмолчанию = Справочники.БанковскиеСчета.ПустаяСсылка();
	
	Если МетаданныеДокумента.Имя = "ПлатежноеПоручениеВходящее" 
		ИЛИ МетаданныеДокумента.Имя = "ПлатежныйОрдерПоступлениеДенежныхСредств"
		ИЛИ МетаданныеДокумента.Имя = "ПриходныйКассовыйОрдер" Тогда
		
		ИмяРеквизитаСП = "СтруктурноеПодразделениеПолучатель";
	ИначеЕсли МетаданныеДокумента.Имя = "ПлатежноеПоручениеИсходящее"
		ИЛИ МетаданныеДокумента.Имя = "ПлатежныйОрдерСписаниеДенежныхСредств"
		ИЛИ МетаданныеДокумента.Имя = "РасходныйКассовыйОрдер" Тогда
		
		ИмяРеквизитаСП = "СтруктурноеПодразделениеОтправитель";
	Иначе 
		ИмяРеквизитаСП = "СтруктурноеПодразделение";
	КонецЕсли;
	
	Если  ОбщегоНазначенияБК.ЕстьРеквизитДокумента(ИмяРеквизитаСП, МетаданныеДокумента) Тогда
		
		Если ЗначениеЗаполнено(ДанныеОбъекта[ИмяРеквизитаСП]) Тогда
			// Касса структурного подразделения
			БанковскийСчетПоУмолчанию = ДанныеОбъекта[ИмяРеквизитаСП].ОсновнойБанковскийСчет;
		Иначе
			// Касса структурного организации
			БанковскийСчетПоУмолчанию = ДанныеОбъекта.Организация.ОсновнойБанковскийСчет;
		КонецЕсли;
	КонецЕсли;	

	Возврат БанковскийСчетПоУмолчанию; 
		
КонецФункции

// Устанавливает банковский счет по умолчанию. Возвращает состояние установлен/не установлен
//
// Параметры
//  Счет				-	Текущее значение счета
//  ВладелецСчета  		–	<СправочникСсылка.Контрагенты (.Организации)> 
//							Контрагент (организация), счет которого нужно получить
//  Валюта  			–	<СправочникСсылка.Валюты>
//							Валюта регламентированного учета
//  СовпадениеВалюты	–	<Булево>
//                          признак совпадения нужной валюты с указанной, либо исключения ее из поиска
//							По умолчанию ищем счет с указанной валютой.
//
// Возвращаемое значение:
//   <СправочникСсылка.БанковскиеСчета> – найденный счет или пустая ссылка
//
Функция УстановитьБанковскийСчет(Счет, ВладелецСчета, Валюта, СовпадениеВалюты = Истина) Экспорт
	
	Если ТипЗнч(Счет) <> Тип("СправочникСсылка.БанковскиеСчета") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	НовыйСчет = Справочники.БанковскиеСчета.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
	|	БанковскиеСчета.Ссылка,
	|	ВЫБОР
	|		КОГДА СправочникВладелец.Ссылка ЕСТЬ НЕ NULL 
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК Приоритет
	|ИЗ
	|	Справочник.БанковскиеСчета КАК БанковскиеСчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК СправочникВладелец
	|		ПО БанковскиеСчета.Владелец = СправочникВладелец.Ссылка
	|			И БанковскиеСчета.Ссылка = СправочникВладелец.ОсновнойБанковскийСчет
	|ГДЕ
	|	БанковскиеСчета.Владелец = &ВладелецСчета
	|	И БанковскиеСчета.ПометкаУдаления = ЛОЖЬ
	|	И (БанковскиеСчета.ВалютаДенежныхСредств = &Валюта
	|				И &СовпадениеВалюты = ИСТИНА
	|			ИЛИ (НЕ БанковскиеСчета.ВалютаДенежныхСредств = &Валюта)
	|				И &СовпадениеВалюты = ЛОЖЬ)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет";
	
	Запрос.УстановитьПараметр("ВладелецСчета",    ВладелецСчета);
	Запрос.УстановитьПараметр("Валюта",           Валюта);
	Запрос.УстановитьПараметр("СовпадениеВалюты", СовпадениеВалюты);
	
	Если ТипЗнч(ВладелецСчета) = Тип("СправочникСсылка.Контрагенты") Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Справочник.Организации", "Справочник.Контрагенты");
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	Результат    = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		НайденОсновнойСчет = Выборка.Приоритет = 1;
		НайденОдинСчет     = Выборка.Количество() = 1;
		
		Если НайденОсновнойСчет ИЛИ НайденОдинСчет Тогда
			НовыйСчет = Выборка.Ссылка;
		КонецЕсли;
		
	КонецЕсли;
	
	ПолучитьНовыйСчет = Счет <> НовыйСчет;
	Если ПолучитьНовыйСчет Тогда
		Если НЕ ЗначениеЗаполнено(Счет) Тогда
			Счет = НовыйСчет;
		Иначе
			СвойствоСчета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Счет, "Владелец, ВалютаДенежныхСредств");
			Если СвойствоСчета.Владелец <> ВладелецСчета
				ИЛИ СовпадениеВалюты И СвойствоСчета.ВалютаДенежныхСредств <> Валюта Тогда
				Счет = НовыйСчет;
			Иначе
				ПолучитьНовыйСчет = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПолучитьНовыйСчет;
	
КонецФункции // УстановитьБанковскийСчет

// Заполняет реквизиты расчетного документа значениями по умолчанию
//
Процедура ЗаполнитьРеквизитыРасчетногоДокумента(ДокументОбъект, РасшифровкаПлатежа) Экспорт

	Перем ТипЦен;

	ТекПользователь = Пользователи.ТекущийПользователь();
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	МетаданныеДокумента = ДокументОбъект.Метаданные();
	
	мОтображатьСтруктурныеПодразделения = ПолучитьФункциональнуюОпцию("ПоддержкаРаботыСоСтруктурнымиПодразделениями");
	
	Если РасшифровкаПлатежа.Количество() = 0 Тогда
		СтрокаПлатеж = РасшифровкаПлатежа.Добавить();
	Иначе
		СтрокаПлатеж = РасшифровкаПлатежа[0];
	КонецЕсли;

	//заполнение даты
	Если НЕ ЗначениеЗаполнено(ДокументОбъект.Дата) Тогда
	  	ДокументОбъект.Дата = НачалоДня(ОбщегоНазначения.ТекущаяДатаПользователя());
	КонецЕсли;

	// Устанавливаем булевы переменные. Заполнеям их только в том случае, 
	// если не указан вид операции (новый объект)
	Если ОбщегоНазначенияБК.ЕстьРеквизитДокумента("ВидОперации", МетаданныеДокумента) И НЕ ЗначениеЗаполнено(ДокументОбъект.ВидОперации) Тогда

		Если ОбщегоНазначенияБК.ЕстьРеквизитДокумента("АвтоРезервирование", МетаданныеДокумента) Тогда
			ДокументОбъект.АвтоРезервирование = ПользователиБКВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "АвтоРезервирование");
		КонецЕсли;

		Если ОбщегоНазначенияБК.ЕстьРеквизитДокумента("АвтоРазмещение", МетаданныеДокумента) Тогда
			ДокументОбъект.АвтоРазмещение = ПользователиБКВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "АвтоРазмещение");
		КонецЕсли;

	КонецЕсли;

	Если ОбщегоНазначенияБК.ЕстьРеквизитДокумента("Организация", МетаданныеДокумента) 
	   И (НЕ ЗначениеЗаполнено(ДокументОбъект.Организация)) Тогда
		ДокументОбъект.Организация = Справочники.Организации.ОрганизацияПоУмолчанию();
	КонецЕсли;

	Если ОбщегоНазначенияБК.ЕстьРеквизитДокумента("Подразделение", МетаданныеДокумента)
	   И (НЕ ЗначениеЗаполнено(ДокументОбъект.Подразделение)) Тогда
		ДокументОбъект.Подразделение = ПользователиБКВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОсновноеПодразделение");
	КонецЕсли;
	
	Если ОбщегоНазначенияБК.ЕстьРеквизитДокумента("СтруктурноеПодразделение", МетаданныеДокумента)
	   И (НЕ ЗначениеЗаполнено(ДокументОбъект.СтруктурноеПодразделение))
	   	И мОтображатьСтруктурныеПодразделения Тогда
	   	СтруктурноеПодразделение = ПользователиБКВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОсновноеСтруктурноеПодразделениеОрганизации");
		Если СтруктурноеПодразделение = Неопределено Тогда
			ДокументОбъект.СтруктурноеПодразделение = ДокументОбъект.Организация;
		ИначеЕсли ТипЗнч(СтруктурноеПодразделение) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
			ДокументОбъект.СтруктурноеПодразделение = СтруктурноеПодразделение;
		Иначе
			ДокументОбъект.СтруктурноеПодразделение = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();							
		КонецЕсли;
	КонецЕсли;
	
	Если ОбщегоНазначенияБК.ЕстьРеквизитДокумента("СтруктурноеПодразделениеОтправитель", МетаданныеДокумента)
	   И (НЕ ЗначениеЗаполнено(ДокументОбъект.СтруктурноеПодразделениеОтправитель))
	   	И мОтображатьСтруктурныеПодразделения Тогда
	   	СтруктурноеПодразделениеОтправитель = ПользователиБКВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОсновноеСтруктурноеПодразделениеОрганизации");
		Если СтруктурноеПодразделениеОтправитель = Неопределено Тогда
			ДокументОбъект.СтруктурноеПодразделениеОтправитель = ДокументОбъект.Организация;
		ИначеЕсли ТипЗнч(СтруктурноеПодразделениеОтправитель) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
			ДокументОбъект.СтруктурноеПодразделениеОтправитель = СтруктурноеПодразделениеОтправитель;
		Иначе
			ДокументОбъект.СтруктурноеПодразделениеОтправитель = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();							
		КонецЕсли;
	КонецЕсли;
	
	Если ОбщегоНазначенияБК.ЕстьРеквизитДокумента("СтруктурноеПодразделениеПолучатель", МетаданныеДокумента)
	   И (НЕ ЗначениеЗаполнено(ДокументОбъект.СтруктурноеПодразделениеПолучатель))
	   	И мОтображатьСтруктурныеПодразделения Тогда
	   	СтруктурноеПодразделениеПолучатель = ПользователиБКВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОсновноеСтруктурноеПодразделениеОрганизации");
		Если СтруктурноеПодразделениеПолучатель = Неопределено Тогда
			ДокументОбъект.СтруктурноеПодразделениеПолучатель = ДокументОбъект.Организация;
		ИначеЕсли ТипЗнч(СтруктурноеПодразделениеПолучатель) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
			ДокументОбъект.СтруктурноеПодразделениеПолучатель = СтруктурноеПодразделениеПолучатель;
		Иначе
			ДокументОбъект.СтруктурноеПодразделениеПолучатель = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();							
		КонецЕсли;
	КонецЕсли;
					   	
	Если ОбщегоНазначенияБК.ЕстьРеквизитДокумента("УчитыватьКПН", МетаданныеДокумента) Тогда
		
		ТекЗначениеПлательщикаНаПрибыль = ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(ДокументОбъект.Организация, ДокументОбъект.Дата);
		
		ДокументОбъект.УчитыватьКПН = ТекЗначениеПлательщикаНаПрибыль;
				
		Если ОбщегоНазначенияБК.ЕстьРеквизитДокумента("ВидУчетаНУ", МетаданныеДокумента) И ДокументОбъект.УчитыватьКПН Тогда								
			ОтражатьДокументыВНалоговомУчете = ПользователиБКВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОтражатьДокументыВНалоговомУчете"); 
			ДокументОбъект.ВидУчетаНУ  = ?(ОтражатьДокументыВНалоговомУчете, Справочники.ВидыУчетаНУ.НУ, Справочники.ВидыУчетаНУ.НеОтражаетсяВНУ);					
		КонецЕсли; 
	КонецЕсли;

	Если ОбщегоНазначенияБК.ЕстьРеквизитДокумента("Ответственный", МетаданныеДокумента)
	   И (НЕ ЗначениеЗаполнено(ДокументОбъект.Ответственный)) Тогда
		ДокументОбъект.Ответственный = ПользователиБКВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОсновнойОтветственный");
	КонецЕсли;

	Если ОбщегоНазначенияБК.ЕстьРеквизитДокумента("Автор", МетаданныеДокумента)
	   И (НЕ ЗначениеЗаполнено(ДокументОбъект.Автор)) Тогда
		ДокументОбъект.Автор = ТекПользователь;
	КонецЕсли;
	
	Если ОбщегоНазначенияБК.ЕстьРеквизитДокумента("ВидОперации", МетаданныеДокумента)
	   И (НЕ ЗначениеЗаполнено(ДокументОбъект.ВидОперации)) Тогда
		ДокументОбъект.ВидОперации = Перечисления[ДокументОбъект.ВидОперации.Метаданные().Имя][0];
	КонецЕсли;

	Если ОбщегоНазначенияБК.ЕстьРеквизитДокумента("ФормаОплаты", МетаданныеДокумента)
		И (НЕ ЗначениеЗаполнено(ДокументОбъект.ФормаОплаты)) Тогда
		
		Если ОбщегоНазначенияБК.ЕстьРеквизитДокумента("БанковскийСчетКасса", МетаданныеДокумента)
			И НЕ ЗначениеЗаполнено(ДокументОбъект.БанковскийСчетКасса)
			И (ЗначениеЗаполнено(ДокументОбъект.Организация)) Тогда
			ДокументОбъект.БанковскийСчетКасса = ПолучитьОсновнойБанковскийСчетДокумента(ДокументОбъект);
			ДокументОбъект.ВалютаДокумента = ДокументОбъект.БанковскийСчетКасса.ВалютаДенежныхСредств;
		КонецЕсли;
		
		ДокументОбъект.ФормаОплаты = Перечисления["ВидыДенежныхСредств"].Наличные;
		
	ИначеЕсли ОбщегоНазначенияБК.ЕстьРеквизитДокумента("Касса", МетаданныеДокумента)
			И ЗначениеЗаполнено(ДокументОбъект.Организация)
			И НЕ ЗначениеЗаполнено(ДокументОбъект.Касса) Тогда			
			
			КассаПоУмолчанию  = Справочники.Кассы.КассаПоУмолчанию(ДокументОбъект);
					
			Если НЕ ЗначениеЗаполнено(ДокументОбъект.ВалютаДокумента) Тогда	
				ДокументОбъект.Касса 			= КассаПоУмолчанию;
				ДокументОбъект.ВалютаДокумента	= КассаПоУмолчанию.ВалютаДенежныхСредств;			
			ИначеЕсли КассаПоУмолчанию.ВалютаДенежныхСредств = ДокументОбъект.ВалютаДокумента Тогда
				ДокументОбъект.Касса = КассаПоУмолчанию;
			КонецЕсли;
	КонецЕсли;

	Если ОбщегоНазначенияБК.ЕстьРеквизитДокумента("КассаККМ", МетаданныеДокумента)
	   И (НЕ ЗначениеЗаполнено(ДокументОбъект.КассаККМ)) Тогда
		ДокументОбъект.КассаККМ = ПользователиБКВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОсновнаяКассаККМ");
	КонецЕсли;

	Если ОбщегоНазначенияБК.ЕстьРеквизитТабЧастиДокумента("СтавкаНДС", МетаданныеДокумента, "РасшифровкаПлатежа") 
	   И (НЕ ЗначениеЗаполнено(СтрокаПлатеж.СтавкаНДС)) Тогда
		СтрокаПлатеж.СтавкаНДС = ПользователиБКВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОсновнаяСтавкаНДС");
	КонецЕсли;

	Если ОбщегоНазначенияБК.ЕстьРеквизитДокумента("СчетОрганизации", МетаданныеДокумента)
	   И НЕ ЗначениеЗаполнено(ДокументОбъект.СчетОрганизации)
	   И (ЗначениеЗаполнено(ДокументОбъект.Организация)) Тогда
	   
	   	СчетПоУмолчанию  = ПолучитьОсновнойБанковскийСчетДокумента(ДокументОбъект);						
			
		Если НЕ ЗначениеЗаполнено(ДокументОбъект.ВалютаДокумента)
		 ИЛИ СчетПоУмолчанию.ВалютаДенежныхСредств = ДокументОбъект.ВалютаДокумента Тогда
		   	ДокументОбъект.СчетОрганизации = СчетПоУмолчанию;
			ДокументОбъект.ВалютаДокумента = СчетПоУмолчанию.ВалютаДенежныхСредств;
		КонецЕсли;
	КонецЕсли;

	ЕстьРасчетыСКонтрагентами					= ЕстьРасчетыСКонтрагентами(ДокументОбъект.ВидОперации);
	ЕстьРасчетыПоКредитам						= ЕстьРасчетыПоКредитам(ДокументОбъект.ВидОперации);
	
	Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
		
		Если ОбщегоНазначенияБК.ЕстьРеквизитДокумента("СчетКонтрагента", МетаданныеДокумента)
		   И НЕ ЗначениеЗаполнено(ДокументОбъект.СчетКонтрагента)
		   И ЗначениеЗаполнено(ДокументОбъект.Контрагент.ОсновнойБанковскийСчет) 
		   И ДокументОбъект.Контрагент.ОсновнойБанковскийСчет.ВалютаДенежныхСредств = ДокументОбъект.СчетОрганизации.ВалютаДенежныхСредств Тогда

			ДокументОбъект.СчетКонтрагента = ДокументОбъект.Контрагент.ОсновнойБанковскийСчет;

		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента)
		   И ЗначениеЗаполнено(ДокументОбъект.Контрагент) Тогда 

			ДоступныйОсновнойДоговорКонтрагента = ОбщегоНазначенияБК.ДоступныйДоговорКонтрагента(ДокументОбъект.Контрагент.ОсновнойДоговорКонтрагента);
			Если НЕ УправлениеВзаиморасчетамиСервер.ОпределитьВидДоговораСКонтрагентом(ДокументОбъект.ВидОперации).НайтиПоЗначению(ДоступныйОсновнойДоговорКонтрагента.ВидДоговора) = Неопределено Тогда

				Если ДокументОбъект.Организация.Пустая() Тогда
					СтрокаПлатеж.ДоговорКонтрагента	= ДоступныйОсновнойДоговорКонтрагента;
					Организация						= ДоступныйОсновнойДоговорКонтрагента.Организация;
				ИначеЕсли ДоступныйОсновнойДоговорКонтрагента.Организация.Пустая()
					  ИЛИ ДоступныйОсновнойДоговорКонтрагента.Организация = ДокументОбъект.Организация Тогда
					СтрокаПлатеж.ДоговорКонтрагента	= ДоступныйОсновнойДоговорКонтрагента;
				КонецЕсли;

			КонецЕсли;

			СтруктураКурсаВзаиморасчетов = ОбщегоНазначенияБК.ПолучитьКурсВалюты(	СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, 
																ОбщегоНазначения.ТекущаяДатаПользователя());
			СтрокаПлатеж.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
			СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;

			Если ОбщегоНазначенияБК.ЕстьРеквизитДокумента("ВалютаДокумента", МетаданныеДокумента)
			   И (НЕ ЗначениеЗаполнено(ДокументОбъект.ВалютаДокумента)) Тогда

				ДокументОбъект.ВалютаДокумента = СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;

			КонецЕсли;

		КонецЕсли; // Договор

	КонецЕсли; // Контрагент

	Если НЕ ЗначениеЗаполнено(ДокументОбъект.ВалютаДокумента) Тогда
		ДокументОбъект.ВалютаДокумента = ВалютаРегламентированногоУчета;
	КонецЕсли;

	Если ОбщегоНазначенияБК.ЕстьРеквизитДокумента("ДатаРасхода", МетаданныеДокумента) Тогда
		ДокументОбъект.ДатаРасхода = ОбщегоНазначения.ТекущаяДатаПользователя();
	КонецЕсли;

	Если ОбщегоНазначенияБК.ЕстьРеквизитДокумента("ДатаПоступления", МетаданныеДокумента) Тогда
		ДокументОбъект.ДатаПоступления = ОбщегоНазначения.ТекущаяДатаПользователя();
	КонецЕсли;

	Если ОбщегоНазначенияБК.ЕстьРеквизитДокумента("Состояние", МетаданныеДокумента) Тогда
		ДокументОбъект.Состояние = Перечисления["СостоянияОбъектов"].Подготовлен;
	КонецЕсли;

КонецПроцедуры // ЗаполнитьРеквизитыРасчетногоДокумента()

// Определяет вид действия документа расчета с контрагентами
//
Функция ОпределениеНаправленияДвиженияДляДокументаДвиженияДенежныхСредств(ВидДокумента, ВидОперации = Неопределено) Экспорт

	ВидДействийДокумента = Новый Структура("Направление,РасчетыВозврат");
	ВидыДокументовДДС    = Новый Соответствие();

	ВидыДокументовДДС.Вставить("ПлатежноеПоручениеИсходящее",				"Выбытие");	
	ВидыДокументовДДС.Вставить("ПлатежныйОрдерСписаниеДенежныхСредств",		"Выбытие");
	ВидыДокументовДДС.Вставить("РасходныйКассовыйОрдер",					"Выбытие");
	ВидыДокументовДДС.Вставить("АвансовыйОтчет",							"Выбытие");	
	
	ВидыДокументовДДС.Вставить("ПлатежноеПоручениеВходящее",				"Поступление");	
	ВидыДокументовДДС.Вставить("ПлатежныйОрдерПоступлениеДенежныхСредств",	"Поступление");
	ВидыДокументовДДС.Вставить("ПриходныйКассовыйОрдер",					"Поступление");

	ВидыДокументовДДС.Вставить("ОплатаОтПокупателяПлатежнойКартой",			"Поступление");

	Если ТипЗнч(ВидДокумента) = Тип("Строка") Тогда
		// Получен непосредственно вид документа
		// Дополнительные действия не требуются
		
		ВидДействийДокумента.Вставить("Направление", ВидыДокументовДДС[ВидДокумента]);
		
	ИначеЕсли Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(ВидДокумента)) Тогда
		
		ТипСсылки = ТипЗнч(ВидДокумента);
		// Получена ссылка на документ. Необходимо определить его вид.
	    Для Каждого ТекущееЗначениеСоответсвия Из ВидыДокументовДДС Цикл
			Если ТипСсылки = Тип("ДокументСсылка." + ТекущееЗначениеСоответсвия.Ключ) Тогда
				ВидДействийДокумента.Вставить("Направление", ТекущееЗначениеСоответсвия.Значение);
				Прервать;
			КонецЕсли; 
		КонецЦикла; 
		
	КонецЕсли; 

	ВидОперацииРасчет  = Перечисления.РасчетыВозврат.Расчеты;
	ВидОперацииВозврат = Перечисления.РасчетыВозврат.Возврат;

	Если ЗначениеЗаполнено(ВидОперации) Тогда
		
		//Определение вида операции
		РасчетВозвратПоВидуОпераций = Новый Соответствие();

		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийРКО.ОплатаПоставщику,ВидОперацииРасчет);
		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийРКО.РасчетыПоДоходуОтРазовыхВыплатСКонтрагентами,ВидОперацииРасчет);
		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателю,ВидОперацииВозврат);

		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПКО.ОплатаПокупателя,ВидОперацииРасчет);
		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПоставщиком,ВидОперацииВозврат);

		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ОплатаПоставщику,ВидОперацииРасчет);
		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПокупателю,ВидОперацииВозврат);

		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПокупателя,ВидОперацииРасчет);
		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПоставщиком,ВидОперацииВозврат);

		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийППИсходящее.ОплатаПоставщику,ВидОперацииРасчет);
		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийППИсходящее.ВозвратДенежныхСредствПокупателю,ВидОперацииВозврат);

		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийОплатаОтПокупателяПлатежнойКартой.ОплатаПокупателя, ВидОперацииРасчет);
		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийОплатаОтПокупателяПлатежнойКартой.ВозвратДенежныхСредствПокупателю,ВидОперацииВозврат);

		ВидДействийДокумента.Вставить("РасчетыВозврат",РасчетВозвратПоВидуОпераций[ВидОперации]);

		Если ВидОперации = Перечисления.ВидыОперацийОплатаОтПокупателяПлатежнойКартой.ВозвратДенежныхСредствПокупателю Тогда
			ВидДействийДокумента.Вставить("Направление", "Выбытие");
		КонецЕсли;
		
	ИначеЕсли ВидДокумента="АвансовыйОтчет" тогда
		ВидДействийДокумента.Вставить("РасчетыВозврат", ВидОперацииРасчет);
	КонецЕсли;

	Возврат ВидДействийДокумента;

КонецФункции

Процедура СтруктурноеПодразделениеПриИзменении(Объект, СтруктураПараметров, Сторона = "Дт") Экспорт
	
	Если НЕ СтруктураПараметров.ИзмененаОрганизация Тогда 
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("СтруктурноеПодразделение", Объект.СтруктурноеПодразделениеОтправитель);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПодразделенияОрганизаций.Ссылка
	               |ИЗ
	               |	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
	               |ГДЕ
	               |	ПодразделенияОрганизаций.Владелец = &Организация
	               |	И ПодразделенияОрганизаций.Ссылка В ИЕРАРХИИ(&СтруктурноеПодразделение)";
				   
	СписокПодразделений = Новый СписокЗначений;
	СписокПодразделений.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));			   
	
	ПустаяСсылкаПодразделения = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
	
	ДанныеСчетаБУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(Объект.СчетУчетаРасчетовСКонтрагентомБУ);
	
	Для Счетчик = 1 по 3 Цикл			
		
		Если ДанныеСчетаБУ.КоличествоСубконто >= Счетчик Тогда
			
			Если ДанныеСчетаБУ["ВидСубконто" + Счетчик + "ТипЗначения"].СодержитТип(Тип("СправочникСсылка.ПодразделенияОрганизаций")) Тогда
				
				Если СписокПодразделений.НайтиПоЗначению(Объект["Субконто" + Сторона + "БУ" + Счетчик]) <> Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				Объект["Субконто" + Сторона + "БУ" + Счетчик] = ПустаяСсылкаПодразделения;
				
			Иначе
				
				Объект["Субконто" + Сторона + "БУ" + Счетчик] = Неопределено;	

			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;				
	
	ДанныеСчетаНУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(Объект.СчетУчетаРасчетовСКонтрагентомНУ);
	
	Для Счетчик = 1 по 3 Цикл			
		
		Если ДанныеСчетаНУ.КоличествоСубконто >= Счетчик Тогда
			
			Если ДанныеСчетаНУ["ВидСубконто" + Счетчик + "ТипЗначения"].СодержитТип(Тип("СправочникСсылка.ПодразделенияОрганизаций")) Тогда
				
				Если СписокПодразделений.НайтиПоЗначению(Объект["Субконто" + Сторона + "НУ" + Счетчик]) <> Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				Объект["Субконто" + Сторона + "НУ" + Счетчик] = ПустаяСсылкаПодразделения;
				
			Иначе
				
				Объект["Субконто" + Сторона + "НУ" + Счетчик] = Неопределено;	

			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;				
	
КонецПроцедуры

Процедура ПроверитьСоответствиеОрганизацииДоговора(Объект, СтруктураПараметров, ТабличнаяЧасть = "РасшифровкаПлатежа") Экспорт
	
	Если НЕ СтруктураПараметров.ИзмененаОрганизация ИЛИ Объект[ТабличнаяЧасть].Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;

	Для Каждого Строка Из Объект[ТабличнаяЧасть] Цикл
		
		ОрганизацияДоговораКонтрагента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Строка.ДоговорКонтрагента, "Организация");
		
		Если НЕ Объект.Организация = ОрганизацияДоговораКонтрагента Тогда
			
			Строка.ДоговорКонтрагента = Неопределено;
			
			Если ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ВводНачальныхОстатков") Тогда
				Строка.Документ = Неопределено;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОПЛАТЫ
					   
// Возвращает признак расчетов с контрагентами
//
Функция ЕстьРасчетыСКонтрагентами(ВидОперации = Неопределено) Экспорт

	Если ВидОперации = Неопределено Тогда 
		
		ЕстьРасчеты  = Ложь;
		
	Иначе

		ЕстьРасчеты = (ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаПоставщику
	 	ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаСтруктурномуПодразделению
	 	ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.РасчетыПоДоходуОтРазовыхВыплатСКонтрагентами
	 	ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателю
		
		
	 	ИЛИ ВидОперации = Перечисления.ВидыОперацийПКО.ОплатаПокупателя
	 	ИЛИ ВидОперации = Перечисления.ВидыОперацийПКО.ОплатаСтруктурногоПодразделения
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПоставщиком
		
		
		ИЛИ ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ОплатаПоставщику
		ИЛИ ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПокупателю
		ИЛИ ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПрочиеРасчетыСКонтрагентами
		
		ИЛИ ВидОперации = Перечисления.ВидыОперацийППИсходящее.ОплатаПоставщику
		ИЛИ ВидОперации = Перечисления.ВидыОперацийППИсходящее.ОплатаСтруктурномуПодразделению
		ИЛИ ВидОперации = Перечисления.ВидыОперацийППИсходящее.ВозвратДенежныхСредствПокупателю
		ИЛИ ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПрочиеРасчетыСКонтрагентами
		ИЛИ ВидОперации = Перечисления.ВидыОперацийППИсходящее.РасчетыПоДоходуОтРазовыхВыплатСКонтрагентами
		
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПокупателя
	 	ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаСтруктурногоПодразделения
	 	ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПоставщиком
	 	ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочиеРасчетыСКонтрагентами
	 	ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты 
	 	ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПриобретениеИностраннойВалюты);
		
	КонецЕсли;

	Возврат ЕстьРасчеты;

КонецФункции

// Возвращает признак расчетов с контрагентами по кредитам
//
Функция ЕстьРасчетыПоКредитам(ВидОперации = Неопределено) Экспорт
	
	Если ВидОперации = Неопределено Тогда 
		
		ЕстьРасчеты  = Ложь;
		
	Иначе
		
		ЕстьРасчеты = (ВидОперации = Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИЗаймамСКонтрагентами
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПКО.РасчетыПоКредитамИЗаймамСКонтрагентами
		ИЛИ ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.РасчетыПоКредитамИЗаймам
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.РасчетыПоКредитамИЗаймам
		ИЛИ ВидОперации = Перечисления.ВидыОперацийППИсходящее.РасчетыПоКредитамИЗаймамСКонтрагентами);
	
	КонецЕсли;
	
	Возврат ЕстьРасчеты;
	
КонецФункции 

///////////////////////////////////////////////////////////////////////////////
// ПРОВЕДЕНИЕ ДОКУМЕНТОВ

// ПРИОБРЕТЕНИЕ ВАЛЮТЫ

// Формируются бухгалтерские проводки по операции поступления приобретенной у банка иностранной валюты
//
// Параметры
//  РасшифровкаПлатежа - <ТаблицаЗначений> - данные табличной части документа
//                       Создается в модуле менеджера документа
//  ТаблицаРеквизиты   - <ТаблицаЗначений> - реквизиты документа, необходимые для формирования движений.
//                       Создается в модуле менеджера документа
//  Движения           - коллекция движений документа
//  Отказ              - <Булево> - флаг отказа от проведения
//
Процедура СформироватьДвиженияПриобретениеВалюты(РасшифровкаПлатежа, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыПриобретениеПродажаВалюты(РасшифровкаПлатежа, ТаблицаРеквизиты);
	
	Если Параметры.РасшифровкаПлатежа.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = Параметры.Реквизиты[0];
	
	Для каждого СтрокаПлатежа Из Параметры.РасшифровкаПлатежа Цикл
		
		//Проводки по БУ
		ДобавитьПроводкуПриобретениеВалюты(СтрокаПлатежа, Движения, Реквизиты);
		
		//Проводки по НУ
		Если Реквизиты.НеобходимостьОтраженияВНУ Тогда
			ДобавитьПроводкуПриобретениеВалюты(СтрокаПлатежа, Движения, Реквизиты, "НУ");
		КонецЕсли;
		
	КонецЦикла;

	Движения.Типовой.Записывать = Истина;
	Если Реквизиты.НеобходимостьОтраженияВНУ Тогда
		Движения.Налоговый.Записывать = Истина;
	КонецЕсли;	

КонецПроцедуры

Процедура ДобавитьПроводкуПриобретениеВалюты(СтрокаПлатежа, Движения, Реквизиты, ВидУчета = "БУ")
	
	Если ВидУчета = "БУ" Тогда
		ИмяРегистраБухгалтерии 	 = "Типовой";
		КорСчет 				 = СтрокаПлатежа.КорСчет;
		СчетРасчетов			 = СтрокаПлатежа.СчетРасчетов;
		СчетПрочихДоходов		 = ПланыСчетов.Типовой.ПрочиеДоходы;
		СчетПрочихРасходов		 = ПланыСчетов.Типовой.ПрочиеРасходы;
	Иначе
		ИмяРегистраБухгалтерии 	 = "Налоговый";
		КорСчет				     = СтрокаПлатежа.КорСчетНУ;
		СчетРасчетов			 = СтрокаПлатежа.СчетРасчетовНУ;
		СчетПрочихДоходов		 = ПланыСчетов.Налоговый.ПрочиеДоходы;
		СчетПрочихРасходов		 = ПланыСчетов.Налоговый.ПрочиеРасходы;
		СчетРасчетовСКонтрагентом= ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьСчетРасчетовСКонтрагентомНУ(); //3310Н - используется при отражении дохода/убытка курсовых разниц,
																													  // т.к. корреспонденция идет не напрямую (н-р 1022Н), а через счета взаиморасчетов
	КонецЕсли;	

	//взаиморасчеты в НУ отражаются только при балансовом методе
	Если ВидУчета = "БУ" Или (ВидУчета = "НУ" И Реквизиты.ВедениеУчетаВременныхразницБалансовымМетодом) Тогда
		// Поступление на валютный счет отражается по рыночному курсу 
		Проводка = Движения[ИмяРегистраБухгалтерии].Добавить();
		Проводка.Период      = Реквизиты.Период;
		Проводка.Организация = Реквизиты.Организация;
		Проводка.Содержание  = СтрокаПлатежа.Содержание;
			
		//Дт
		Проводка.СчетДт = КорСчет;
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 
			"ДенежныеСредства", СтрокаПлатежа.БанковскийСчет);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 
			"СтатьиДвиженияДенежныхСредств", Реквизиты.СтатьяДвиженияДенежныхСредств); 
																						
		СвойстваСчетаДт = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
		Если ВидУчета = "БУ" И СвойстваСчетаДт.Валютный Тогда
			Проводка.ВалютаДт        = Реквизиты.ВалютаДокумента;
			Проводка.ВалютнаяСуммаДт = СтрокаПлатежа.ВалютнаяСумма;
		КонецЕсли;
		
		//Кт
		Проводка.СчетКт = СчетРасчетов;
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 
			"Контрагенты", СтрокаПлатежа.Контрагент);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 
			"СтатьиДвиженияДенежныхСредств", СтрокаПлатежа.СтатьяДвиженияДенежныхСредств); 
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 
			"ДенежныеСредства", СтрокаПлатежа.БанковскийСчет);																							
		
		Проводка.Сумма = СтрокаПлатежа.СуммаРеглПоКурсуБанка;
		
		СвойстваСчетаКт = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
		Если ВидУчета = "БУ" И СвойстваСчетаКт.Валютный Тогда
			Проводка.ВалютаКт        = СтрокаПлатежа.ВалютаВзаиморасчетов;
			Проводка.ВалютнаяСуммаКт = СтрокаПлатежа.СуммаРегл;
		КонецЕсли;

		
		ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
			Проводка, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);

		Если ВидУчета = "НУ" Тогда
			ПроцедурыНалоговогоУчета.ВидУчетаНУ(Проводка, Реквизиты.ВидУчетаНУ);
		КонецЕсли;	
		
	КонецЕсли;
	
	// Доходы / расходы по приобретению валюты в БУ и НУ - разница между суммой тенговой оценки валюты по рыночному курсу 
	// и фактически потраченной на приобретение тенковой суммой (по курсу банка)
	// Доходы / расходы отражаются по счету 6280/7470
	СуммаРазницы = СтрокаПлатежа.СуммаРеглПокурсуБанка - СтрокаПлатежа.СуммаРегл;
	
	Если СуммаРазницы > 0 Тогда // Доходы
		
		Проводка = Движения[ИмяРегистраБухгалтерии].Добавить();

		Проводка.Период      = Реквизиты.Период;
		Проводка.Организация = Реквизиты.Организация;
		Проводка.Содержание  = НСтр("ru = 'Прибыль от покупки валюты'",  ОбщегоНазначения.КодОсновногоЯзыка());
		
		//Дт
		Проводка.СчетДт = ?(ВидУчета = "БУ", СчетРасчетов, СчетРасчетовСКонтрагентом);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 
			"Контрагенты", СтрокаПлатежа.Контрагент);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 
			"ДенежныеСредства", СтрокаПлатежа.БанковскийСчет);			
		Если ВидУчета = "БУ" Тогда
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 
				"СтатьиДвиженияДенежныхСредств", Реквизиты.СтатьяДвиженияДенежныхСредств); 
				                                                                               
		Иначе																					
		    ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 
				"Договоры", СтрокаПлатежа.ДоговорКонтрагента);
			КонецЕсли;
		
		Если ВидУчета = "БУ" И СвойстваСчетаКт.Валютный Тогда
			Проводка.ВалютаДт        = СтрокаПлатежа.ВалютаВзаиморасчетов;				
		КонецЕсли;
			
		//Кт	
		Проводка.СчетКт = СчетПрочихДоходов;
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 
			"Доходы", Справочники.Доходы.ДоходыПриОбменеВалюты);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 
			"Подразделения", Реквизиты.ПодразделениеДляРеглОпераций);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 
			"ДенежныеСредства", СтрокаПлатежа.БанковскийСчет);			
			
		Проводка.Сумма = СуммаРазницы;
		
		ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
			Проводка, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);

		Если ВидУчета = "НУ" Тогда
			ПроцедурыНалоговогоУчета.ВидУчетаНУ(Проводка, Реквизиты.ВидУчетаНУ);
		КонецЕсли;	
		
	ИначеЕсли СуммаРазницы < 0 Тогда // Расходы
			
		Проводка = Движения[ИмяРегистраБухгалтерии].Добавить();

		Проводка.Период      = Реквизиты.Период;
		Проводка.Организация = Реквизиты.Организация;
		Проводка.Содержание  = НСтр("ru = 'Убыток от покупки валюты'", ОбщегоНазначения.КодОсновногоЯзыка());
		
		//Дт
		Проводка.СчетДт = СчетПрочихРасходов;
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 
			"СтатьиЗатрат", Справочники.СтатьиЗатрат.РасходыПриОбменеВалюты);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 
			"Подразделения", Реквизиты.ПодразделениеДляРеглОпераций);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 
			"ДенежныеСредства", СтрокаПлатежа.БанковскийСчет);			
			
		//Кт	
		Проводка.СчетКт = ?(ВидУчета = "БУ", СчетРасчетов, СчетРасчетовСКонтрагентом);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 
			"Контрагенты", СтрокаПлатежа.Контрагент);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 
			"ДенежныеСредства", СтрокаПлатежа.БанковскийСчет);	
			
		Если ВидУчета = "БУ" Тогда	
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 
				"СтатьиДвиженияДенежныхСредств", СтрокаПлатежа.СтатьяДвиженияДенежныхСредств); 
				                                                                               
		Иначе
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 
				"Договоры", СтрокаПлатежа.ДоговорКонтрагента);
		КонецЕсли;
			
		Проводка.Сумма = -СуммаРазницы;
		
		Если ВидУчета = "БУ" И СвойстваСчетаКт.Валютный Тогда
			Проводка.ВалютаКт        = СтрокаПлатежа.ВалютаВзаиморасчетов;				
		КонецЕсли;

		ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
			Проводка, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);

		Если ВидУчета = "НУ" Тогда
			ПроцедурыНалоговогоУчета.ВидУчетаНУ(Проводка, Реквизиты.ВидУчетаНУ);
		КонецЕсли;
		
	КонецЕсли;
	
	// закрытие взаиморасчетов в НУ при балансовом методе
	Если ВидУчета = "НУ" И СуммаРазницы <> 0 Тогда
		
		Проводка = Движения[ИмяРегистраБухгалтерии].Добавить();
		Проводка.Период      = Реквизиты.Период;
		Проводка.Организация = Реквизиты.Организация;
		
		Если СуммаРазницы > 0 Тогда // Доходы
			Проводка.Содержание  = НСтр("ru = 'Прибыль от покупки валюты'", ОбщегоНазначения.КодОсновногоЯзыка());
			
			//Дт
			Проводка.СчетДт = СчетРасчетов;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 
				"Контрагенты", СтрокаПлатежа.Контрагент);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 
				"СтатьиДвиженияДенежныхСредств", Реквизиты.СтатьяДвиженияДенежныхСредств); 
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 
				"ДенежныеСредства", СтрокаПлатежа.БанковскийСчет);
			
			//Кт
			Проводка.СчетКт = СчетРасчетовСКонтрагентом;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 
				"Контрагенты", СтрокаПлатежа.Контрагент);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 
				"Договоры", СтрокаПлатежа.ДоговорКонтрагента);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 
				"ДенежныеСредства", СтрокаПлатежа.БанковскийСчет);
				
			Проводка.Сумма = СуммаРазницы;
									
		ИначеЕсли СуммаРазницы < 0 Тогда // Расходы
			Проводка.Содержание  = НСтр("ru = 'Убыток от покупки валюты'", ОбщегоНазначения.КодОсновногоЯзыка());
			
			//Дт
			Проводка.СчетДт = СчетРасчетовСКонтрагентом;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 
				"Контрагенты", СтрокаПлатежа.Контрагент);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
				"Договоры", СтрокаПлатежа.ДоговорКонтрагента);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 
				"ДенежныеСредства", СтрокаПлатежа.БанковскийСчет);
				
			//Кт
			Проводка.СчетКт = СчетРасчетов;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 
				"Контрагенты", СтрокаПлатежа.Контрагент);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 
				"СтатьиДвиженияДенежныхСредств", СтрокаПлатежа.СтатьяДвиженияДенежныхСредств); 
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 
				"ДенежныеСредства", СтрокаПлатежа.БанковскийСчет);																								
			
			Проводка.Сумма = -СуммаРазницы;
			
			Если ВидУчета = "БУ" И СвойстваСчетаКт.Валютный Тогда
				Проводка.ВалютаКт        = СтрокаПлатежа.ВалютаВзаиморасчетов;				
			КонецЕсли;

		КонецЕсли;
		
		ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				Проводка, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);

		ПроцедурыНалоговогоУчета.ВидУчетаНУ(Проводка, Реквизиты.ВидУчетаНУ);
	КонецЕсли;	

КонецПроцедуры

// ПРОДАЖА ВАЛЮТЫ

// Формируются бухгалтерские проводки по операции поступления тенговых средств от продажи банку иностранной валюты
//
// Параметры
//  РасшифровкаПлатежа - <ТаблицаЗначений> - данные табличной части документа
//                       Создается в модуле менеджера документа
//  ТаблицаРеквизиты   - <ТаблицаЗначений> - реквизиты документа, необходимые для формирования движений.
//                       Создается в модуле менеджера документа
//  Движения           - коллекция движений документа
//  Отказ              - <Булево> - флаг отказа от проведения
//
Процедура СформироватьДвиженияПродажаВалюты(РасшифровкаПлатежа, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыПриобретениеПродажаВалюты(РасшифровкаПлатежа, ТаблицаРеквизиты);
	
	Если Параметры.РасшифровкаПлатежа.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = Параметры.Реквизиты[0];
	
	Для каждого СтрокаПлатежа Из Параметры.РасшифровкаПлатежа Цикл
		
		//Проводки по БУ
		ДобавитьПроводкуПродажаВалюты(СтрокаПлатежа, Движения, Реквизиты);
		
		//Проводки по НУ
		Если Реквизиты.НеобходимостьОтраженияВНУ Тогда
			ДобавитьПроводкуПродажаВалюты(СтрокаПлатежа, Движения, Реквизиты, "НУ");
		КонецЕсли;
		
	КонецЦикла;

	Движения.Типовой.Записывать = Истина;
	Если Реквизиты.НеобходимостьОтраженияВНУ Тогда
		Движения.Налоговый.Записывать = Истина;
	КонецЕсли;	

КонецПроцедуры

Процедура ДобавитьПроводкуПродажаВалюты(СтрокаПлатежа, Движения, Реквизиты, ВидУчета = "БУ")
	
	Если ВидУчета = "БУ" Тогда
		ИмяРегистраБухгалтерии 	 = "Типовой";
		КорСчет				     = СтрокаПлатежа.КорСчет;
		СчетРасчетов			 = СтрокаПлатежа.СчетРасчетов;  //обычно 1022
		СчетПрочихДоходов		 = ПланыСчетов.Типовой.ПрочиеДоходы;
		СчетПрочихРасходов		 = ПланыСчетов.Типовой.ПрочиеРасходы;
	Иначе
		ИмяРегистраБухгалтерии 	 = "Налоговый";
		КорСчет				     = СтрокаПлатежа.КорСчетНУ;
		СчетРасчетов			 = СтрокаПлатежа.СчетРасчетовНУ; //обычно 1022Н
		СчетПрочихДоходов		 = ПланыСчетов.Налоговый.ПрочиеДоходы;
		СчетПрочихРасходов		 = ПланыСчетов.Налоговый.ПрочиеРасходы;
		СчетРасчетовСКонтрагентом= ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьСчетРасчетовСКонтрагентомНУ(); //3310Н - используется при отражении дохода/убытка курсовых разниц,
																													  // т.к. корреспонденция идет не напрямую (н-р 1022Н), а через счета взаиморасчетов
	КонецЕсли;	

	//взаиморасчеты в НУ отражаются только при балансовом методе
	Если ВидУчета = "БУ" Или (ВидУчета = "НУ" И Реквизиты.ВедениеУчетаВременныхразницБалансовымМетодом) Тогда
		// Поступление на валютный счет отражается по рыночному курсу 
		Проводка = Движения[ИмяРегистраБухгалтерии].Добавить();
		Проводка.Период      = Реквизиты.Период;
		Проводка.Организация = Реквизиты.Организация;
		Проводка.Содержание  = СтрокаПлатежа.Содержание;
			
		//Дт
		Проводка.СчетДт = КорСчет;
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 
			"ДенежныеСредства", СтрокаПлатежа.БанковскийСчет);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 
			"СтатьиДвиженияДенежныхСредств", Реквизиты.СтатьяДвиженияДенежныхСредств); 
																					
		СвойстваСчетаДт = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
		Если ВидУчета = "БУ" И СвойстваСчетаДт.Валютный Тогда
			Проводка.ВалютаДт        = Реквизиты.ВалютаДокумента;
			Проводка.ВалютнаяСуммаДт = СтрокаПлатежа.СуммаРегл;
		КонецЕсли;
		
		//Кт
		Проводка.СчетКт = СчетРасчетов;
		СвойстваСчетаКт = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);

		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 
			"Контрагенты", СтрокаПлатежа.Контрагент);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 
			"СтатьиДвиженияДенежныхСредств", СтрокаПлатежа.СтатьяДвиженияДенежныхСредств); 			
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 
			"ДенежныеСредства", СтрокаПлатежа.БанковскийСчет);
		
		Проводка.Сумма = СтрокаПлатежа.СуммаРегл;
		
		ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
			Проводка, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);

		Если ВидУчета = "НУ" Тогда
			ПроцедурыНалоговогоУчета.ВидУчетаНУ(Проводка, Реквизиты.ВидУчетаНУ);
		КонецЕсли;	
		
		Если ВидУчета = "БУ" И СвойстваСчетаКт.Валютный Тогда
			Проводка.ВалютаКт        = СтрокаПлатежа.ВалютаВзаиморасчетов;
			Проводка.ВалютнаяСуммаКт = СтрокаПлатежа.ВалютнаяСумма;
		КонецЕсли;   
		
	КонецЕсли;
	
	// Доходы / расходы по приобретению валюты в БУ и НУ - разница между суммой тенговой оценки валюты по рыночному курсу 
	// и фактически потраченной на приобретение тенковой суммой (по курсу банка)
	// Доходы / расходы отражаются по счету 6280/7470
	СуммаРазницы = СтрокаПлатежа.СуммаРегл - СтрокаПлатежа.СуммаРеглПокурсуБанка;
	
	Если СуммаРазницы > 0 Тогда // Доходы
		
		Проводка = Движения[ИмяРегистраБухгалтерии].Добавить();

		Проводка.Период      = Реквизиты.Период;
		Проводка.Организация = Реквизиты.Организация;
		Проводка.Содержание  = НСтр("ru = 'Прибыль от продажи валюты'", ОбщегоНазначения.КодОсновногоЯзыка());
		
		//Дт
		Проводка.СчетДт = ?(ВидУчета = "БУ", СчетРасчетов, СчетРасчетовСКонтрагентом);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 
			"Контрагенты", СтрокаПлатежа.Контрагент);
		Если ВидУчета = "БУ" Тогда
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 
				"СтатьиДвиженияДенежныхСредств", Реквизиты.СтатьяДвиженияДенежныхСредств); 
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 
			"ДенежныеСредства", СтрокаПлатежа.БанковскийСчет);

				                                                                              
		Иначе																					
		    ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 
				"Договоры", СтрокаПлатежа.ДоговорКонтрагента);
		КонецЕсли;
		
		Если ВидУчета = "БУ" И СвойстваСчетаКт.Валютный Тогда
			Проводка.ВалютаДт   = СтрокаПлатежа.ВалютаВзаиморасчетов;			
		КонецЕсли;

		//Кт	
		Проводка.СчетКт = СчетПрочихДоходов;
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 
			"Доходы", Справочники.Доходы.ДоходыПриОбменеВалюты);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 
			"Подразделения", Реквизиты.ПодразделениеДляРеглОпераций);
			
		Проводка.Сумма = СуммаРазницы;
		
		ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
			Проводка, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);

		Если ВидУчета = "НУ" Тогда
			ПроцедурыНалоговогоУчета.ВидУчетаНУ(Проводка, Реквизиты.ВидУчетаНУ);
		КонецЕсли;	
		
	ИначеЕсли СуммаРазницы < 0 Тогда // Расходы
			
		Проводка = Движения[ИмяРегистраБухгалтерии].Добавить();

		Проводка.Период      = Реквизиты.Период;
		Проводка.Организация = Реквизиты.Организация;
		Проводка.Содержание  = НСтр("ru = 'Убыток от продажи валюты'", ОбщегоНазначения.КодОсновногоЯзыка());
		
		//Дт
		Проводка.СчетДт = СчетПрочихРасходов;
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 
			"СтатьиЗатрат", Справочники.СтатьиЗатрат.РасходыПриОбменеВалюты);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 
			"Подразделения", Реквизиты.ПодразделениеДляРеглОпераций);
			
		//Кт	
		Проводка.СчетКт = ?(ВидУчета = "БУ", СчетРасчетов, СчетРасчетовСКонтрагентом);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 
			"Контрагенты", СтрокаПлатежа.Контрагент);
		Если ВидУчета = "БУ" Тогда	
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 
				"СтатьиДвиженияДенежныхСредств", СтрокаПлатежа.СтатьяДвиженияДенежныхСредств);
				
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 
			"ДенежныеСредства", СтрокаПлатежа.БанковскийСчет);

				                                                                              
		Иначе
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 
				"Договоры", СтрокаПлатежа.ДоговорКонтрагента);
		КонецЕсли;	
						
		Проводка.Сумма = -СуммаРазницы;
		
		Если ВидУчета = "БУ" И СвойстваСчетаКт.Валютный Тогда
			Проводка.ВалютаКт   = СтрокаПлатежа.ВалютаВзаиморасчетов;			
		КонецЕсли;
		
		ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
			Проводка, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);

		Если ВидУчета = "НУ" Тогда
			ПроцедурыНалоговогоУчета.ВидУчетаНУ(Проводка, Реквизиты.ВидУчетаНУ);
		КонецЕсли;
		
	КонецЕсли;
	
	// закрытие взаиморасчетов в НУ при балансовом методе
	Если ВидУчета = "НУ" И СуммаРазницы <> 0 Тогда
		
		Проводка = Движения[ИмяРегистраБухгалтерии].Добавить();
		Проводка.Период      = Реквизиты.Период;
		Проводка.Организация = Реквизиты.Организация;
		
		Если СуммаРазницы > 0 Тогда //Доходы
			Проводка.Содержание  = НСтр("ru = 'Прибыль от продажи валюты'", ОбщегоНазначения.КодОсновногоЯзыка());
			
			//Дт
			Проводка.СчетДт = СчетРасчетов;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 
				"Контрагенты", СтрокаПлатежа.Контрагент);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 
				"СтатьиДвиженияДенежныхСредств", Реквизиты.СтатьяДвиженияДенежныхСредств); 
																							
			//Кт
			Проводка.СчетКт = СчетРасчетовСКонтрагентом;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 
				"Контрагенты", СтрокаПлатежа.Контрагент);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 
				"Договоры", СтрокаПлатежа.ДоговорКонтрагента);
			
			Проводка.Сумма = СуммаРазницы;
			
		ИначеЕсли СуммаРазницы < 0 Тогда //Расходы
			Проводка.Содержание  = НСтр("ru = 'Убыток от продажи валюты'", ОбщегоНазначения.КодОсновногоЯзыка());
			
			//Дт
			Проводка.СчетДт = СчетРасчетовСКонтрагентом;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 
				"Контрагенты", СтрокаПлатежа.Контрагент);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
				"Договоры", СтрокаПлатежа.ДоговорКонтрагента);
			
			//Кт
			Проводка.СчетКт = СчетРасчетов;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 
				"Контрагенты", СтрокаПлатежа.Контрагент);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 
				"СтатьиДвиженияДенежныхСредств", СтрокаПлатежа.СтатьяДвиженияДенежныхСредств);
																							
			
			Проводка.Сумма = -СуммаРазницы;
		КонецЕсли;
		
		ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				Проводка, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);

		ПроцедурыНалоговогоУчета.ВидУчетаНУ(Проводка, Реквизиты.ВидУчетаНУ);
		
	КонецЕсли;
	
КонецПроцедуры

// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ - ПРИОБРЕТЕНИЕ и ПРОДАЖА ВАЛЮТЫ

Функция ПодготовитьПараметрыПриобретениеПродажаВалюты(РасшифровкаПлатежа, ТаблицаРеквизиты)

	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.РасшифровкаПлатежа
	
	СписокОбязательныхКолонок = ""
	+ "КорСчет,"      				   // <ПланСчетовСсылка.Типовой> - счет учета БУ приобретенной валюты
	+ "КорСчетНУ,"    				   // <ПланСчетовСсылка.Налоговый> - счет учета НУ приобретенной валюты
	+ "БанковскийСчет,"                // <СправочникСсылка.БанковскиеСчета> - счет, куда поступила валюта
	+ "СтатьяДвиженияДенежныхСредств," // <СправочникСсылка.СтатьиДвиженияДенежныхСредств> 
	+ "СчетРасчетов,"                  // <ПланСчетовСсылка.Типовой> - теновый счет расчетов с банком (обычно 1022)
	+ "СчетРасчетовНУ,"                // <ПланСчетовСсылка.Налоговый> - тенговый счет расчетов с банком (обычно 1022Н)
	+ "Контрагент,"                    // <СправочникСсылка.Контрагенты> - банк, через который приобретается валюта
	+ "ДоговорКонтрагента,"            // <СправочникСсылка.ДоговорыКонтрагентов> - тенговый договор с банком вида "Прочее"
	+ "ВалютнаяСумма,"                 // <Число,15,2> - сумма приобретенной валюты
	+ "СуммаРегл,"                    // <Число,15,2> - тенговая сумма, потраченная на покупку валюты, по курсу банка
	+ "СуммаРеглПоКурсуБанка,"        // <Число,15,2> - тенговая оценка приобретенной валюты, по рыночному курсу на дату покупки валюты
	+ "Содержание,"	            		// <Строка,150> - содержание проводок
	+ "ВалютаВзаиморасчетов";
	
	Параметры.Вставить("РасшифровкаПлатежа", ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(
		РасшифровкаПлатежа, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
	+ "Период,"                			// <Дата> - период движений - дата документа
	+ "Организация,"           			// <СправочникСсылка.Организации>
	+ "ВалютаДокумента,"       			// <СправочникСсылка.Валюты>
	+ "НеобходимостьОтраженияВНУ,"      // <Булево>
	+ "ВедениеУчетаВременныхразницБалансовымМетодом," // <Булево>
	+ "ПодразделениеДляРеглОпераций,"   // <СправочникСсылка.ПодразделенияОрганизаций> - подразделение, использующееся при отражении регл.операций
	+ "СтруктурноеПодразделение,"       // <СправочникСсылка.ПодразделенияОрганизаций> - структурное подразделение
	+ "СтатьяДвиженияДенежныхСредств,"  // <СправочникСсылка.СтатьиДвиженияДенежныхСредств>
	+ "ВидУчетаНУ";       				// <СправочникСсылка.ВидыУчетаНУ>
	
	
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));
	
	Возврат Параметры;

КонецФункции

// ПРОЧЕЕ ПОСТУПЛЕНИЕ

// Формируются бухгалтерские проводки по операциям поступления денежных средств в кассу или на расчетный счет, 
// не связанных с расчетами с покупателями и поставщиками, а также с приобретением или продажей иностранной валюты
//
// Параметры
//  РасшифровкаПлатежа - <ТаблицаЗначений> - данные табличной части документа
//                       Создается в модуле менеджера документа
//  ТаблицаРеквизиты   - <ТаблицаЗначений> - реквизиты документа, необходимые для формирования движений.
//                       Создается в модуле менеджера документа
//  Движения           - коллекция движений документа
//  Отказ              - <Булево> - флаг отказа от проведения
//
Процедура СформироватьДвиженияПрочееПоступление(ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Если ТаблицаРеквизиты = Неопределено ИЛИ ТаблицаРеквизиты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизиты[0];
	
	//Проводки по БУ
	ДобавитьПроводкуПоступлениеДС(Реквизиты, Движения);
		
	//Проводки по НУ
	Если Реквизиты.НеобходимостьОтраженияВНУ Тогда
		ДобавитьПроводкуПоступлениеДС(Реквизиты, Движения, "НУ");
	КонецЕсли;
		
	Движения.Типовой.Записывать = Истина;
	Если Реквизиты.НеобходимостьОтраженияВНУ Тогда
		Движения.Налоговый.Записывать = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьПроводкуПоступлениеДС(Реквизиты, Движения, ВидУчета = "БУ")

	Если ВидУчета = "БУ" Тогда
		ИмяРегистраБухгалтерии 	 = "Типовой";
	Иначе
		ИмяРегистраБухгалтерии 	 = "Налоговый";
	КонецЕсли;	

	Проводка = Движения[ИмяРегистраБухгалтерии].Добавить();

	Проводка.Период      = Реквизиты.Период;
	Проводка.Организация = Реквизиты.Организация;
	Проводка.Содержание  = Реквизиты.Содержание;
	Проводка.Сумма       = Реквизиты.СуммаРегл;

	//Дт
	Если ВидУчета = "НУ" И ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ВлияетНаНалогооблагаемыйДоход(Реквизиты.СчетКтБУ) Тогда
		Проводка.СчетДт = ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьСчетРасчетовСКонтрагентомНУ();
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", Реквизиты.Контрагент);
	Иначе	
		Проводка.СчетДт = Реквизиты["СчетДт" + ВидУчета];
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, Реквизиты["СубконтоДт" + ВидУчета + 1]);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, Реквизиты["СубконтоДт" + ВидУчета + 2]);
	КонецЕсли;
	
	СвойстваСчетаДт = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
	Если ВидУчета = "БУ" И СвойстваСчетаДт.Валютный Тогда
		Проводка.ВалютаДт        = Реквизиты.ВалютаДокумента;
		Проводка.ВалютнаяСуммаДт = Реквизиты.ВалютнаяСумма;
	КонецЕсли;
	
	//Кт
	Проводка.СчетКт = Реквизиты["СчетКт" + ВидУчета];
	ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, Реквизиты["СубконтоКт" + ВидУчета + 1]);
	ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, Реквизиты["СубконтоКт" + ВидУчета + 2]);
	ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, Реквизиты["СубконтоКт" + ВидУчета + 3]);
	СвойстваСчетаКт = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
	
	Если ВидУчета = "БУ" И СвойстваСчетаКт.Валютный Тогда
		Проводка.ВалютаКт        = Реквизиты.ВалютаДокумента;
		Проводка.ВалютнаяСуммаКт = Реквизиты.ВалютнаяСумма;
	КонецЕсли;
	
	ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
		Проводка, Реквизиты.СтруктурноеПодразделениеПолучатель, Реквизиты.СтруктурноеПодразделениеОтправитель);	
	
	Если ВидУчета = "НУ" Тогда
		
		ПроцедурыНалоговогоУчета.ВидУчетаНУ(Проводка, Реквизиты.ВидУчетаНУ);
		
		Если ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ВлияетНаНалогооблагаемыйДоход(Реквизиты.СчетКтБУ) Тогда
		 	//если выбран счет затрат или доходов, то сделаем еще одну проводку
			//погашение начисленной выше задолженности
			Проводка = Движения.Налоговый.Добавить();
		
			Проводка.Период      = Реквизиты.Период;
			Проводка.Организация = Реквизиты.Организация;
			Проводка.Содержание  = Реквизиты.Содержание;
			Проводка.Сумма       = Реквизиты.СуммаРегл;

			//Дт
			Проводка.СчетДт = Реквизиты.СчетДтНУ;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, Реквизиты.СубконтоДтНУ1);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, Реквизиты.СубконтоДтНУ2);

			//Кт
			Проводка.СчетКт = ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьСчетРасчетовСКонтрагентомНУ();
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", Реквизиты.Контрагент);
			
			//СП = СП-получатель, так как мы с 3310Н(СП-получатель) переносим  на 1010Н также на СП-получатель
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				Проводка, Реквизиты.СтруктурноеПодразделениеПолучатель, Реквизиты.СтруктурноеПодразделениеПолучатель);
			
			ПроцедурыНалоговогоУчета.ВидУчетаНУ(Проводка, Реквизиты.ВидУчетаНУ);
			
		КонецЕсли; 
	КонецЕсли;		
	
КонецПроцедуры

// ПРОЧЕЕ СПИСАНИЕ

Процедура СформироватьДвиженияПрочееСписание(ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Если ТаблицаРеквизиты = Неопределено ИЛИ ТаблицаРеквизиты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизиты[0];
	
	//Проводки по БУ
	ДобавитьПроводкуСписаниеДС(Реквизиты, Движения);
		
	//Проводки по НУ
	Если Реквизиты.НеобходимостьОтраженияВНУ Тогда
		ДобавитьПроводкуСписаниеДС(Реквизиты, Движения, "НУ");
	КонецЕсли;
		
	Движения.Типовой.Записывать = Истина;
	Если Реквизиты.НеобходимостьОтраженияВНУ Тогда
		Движения.Налоговый.Записывать = Истина;
	КонецЕсли;
	
КонецПроцедуры


// КОМИССИЯ БАНКА

Процедура СформироватьДвиженияКомиссияБанка(ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Если ТаблицаРеквизиты = Неопределено ИЛИ ТаблицаРеквизиты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизиты[0];
	 	
	//Проводки по БУ
	ДобавитьПроводкуСписаниеДС(Реквизиты, Движения,,Истина);
		
	//Проводки по НУ
	Если Реквизиты.НеобходимостьОтраженияВНУ Тогда
		ДобавитьПроводкуСписаниеДС(Реквизиты, Движения, "НУ", Истина);
	КонецЕсли;
		
	Движения.Типовой.Записывать = Истина;
	Если Реквизиты.НеобходимостьОтраженияВНУ Тогда
		Движения.Налоговый.Записывать = Истина;
	КонецЕсли;
	
КонецПроцедуры


// ПЕРЕЧИСЛЕНИЕ В ПОДОТЧЕТ

Процедура СформироватьДвиженияПеречислениеВПодотчет(ТаблицаПеречислениеВПодотчет, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Если ТаблицаПеречислениеВПодотчет = Неопределено ИЛИ ТаблицаПеречислениеВПодотчет.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты   = ТаблицаРеквизиты[0];
	
	Для Каждого СтрокаПодотчет ИЗ ТаблицаПеречислениеВПодотчет Цикл
		
			Если  СтрокаПодотчет.СуммаРегл = 0 Тогда
				Продолжить;
			КонецЕсли;	
			
			Проводка = Движения.Типовой.Добавить();		
			Проводка.Период      = Реквизиты.Период;
			Проводка.Организация = Реквизиты.Организация;
			Проводка.Содержание  = СтрокаПодотчет.Содержание;
			
			Проводка.СчетДт = СтрокаПодотчет.СчетДтБУ;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаПодотчет.СубконтоДтБУ1);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаПодотчет.СубконтоДтБУ2);					
			
			Проводка.СчетКт = СтрокаПодотчет.СчетКтБУ;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтрокаПодотчет.СубконтоКтБУ1);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтрокаПодотчет.СубконтоКтБУ2);					
			
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				Проводка, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);

				
			СвойстваСчетаДт = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
			Если СвойстваСчетаДт.Валютный Тогда
				Проводка.ВалютаДт        = Реквизиты.ВалютаДокумента;
				Проводка.ВалютнаяСуммаДт = СтрокаПодотчет.ВалютнаяСумма;					
			КонецЕсли;         				
			
			СвойстваСчетаКт = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
			Если СвойстваСчетаКт.Валютный Тогда
				Проводка.ВалютаКт        = Реквизиты.ВалютаДокумента;
				Проводка.ВалютнаяСуммаКт = СтрокаПодотчет.ВалютнаяСумма;					
			КонецЕсли;
			
			Проводка.Сумма = СтрокаПодотчет.СуммаРегл;
											
			Если Реквизиты.НеобходимостьОтраженияВНУ Тогда
				ПроводкаНУ = Движения.Налоговый.Добавить();
				
				ПроводкаНУ.Период      = Реквизиты.Период;
				ПроводкаНУ.Организация = Реквизиты.Организация;
				ПроводкаНУ.Содержание  = СтрокаПодотчет.Содержание;
				
				ПроводкаНУ.СчетДт = СтрокаПодотчет.СчетДтНУ;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 1, СтрокаПодотчет.СубконтоДтНУ1);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 2, СтрокаПодотчет.СубконтоДтНУ2);					
				
				ПроводкаНУ.СчетКт = СтрокаПодотчет.СчетКтНУ;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 1, СтрокаПодотчет.СубконтоКтНУ1);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 2, СтрокаПодотчет.СубконтоКтНУ2);					
				
				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
								ПроводкаНУ, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);
				
				
				ПроцедурыНалоговогоУчета.ВидУчетаНУ(ПроводкаНУ, Реквизиты.ВидУчетаНУ);
				
				ПроводкаНУ.Сумма = СтрокаПодотчет.СуммаРегл;
				
			КонецЕсли;
			
		КонецЦикла; 				
				
	Движения.Типовой.Записывать = Истина;
	Если Реквизиты.НеобходимостьОтраженияВНУ Тогда
		Движения.Налоговый.Записывать = Истина;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура ДобавитьПроводкуСписаниеДС(СтрокаДанных, Движения, ВидУчета = "БУ", ЭтоКомиссия = Ложь)

	Если СтрокаДанных.СуммаРегл = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ВидУчета = "БУ" Тогда
		ИмяРегистраБухгалтерии 	 = "Типовой";
	Иначе
		ИмяРегистраБухгалтерии 	 = "Налоговый";
	КонецЕсли;	

	Проводка = Движения[ИмяРегистраБухгалтерии].Добавить();

	Проводка.Период      = СтрокаДанных.Период;
	Проводка.Организация = СтрокаДанных.Организация;
	Проводка.Содержание  = СтрокаДанных.Содержание;
	Проводка.Сумма       = СтрокаДанных.СуммаРегл;

	//Кт
	Если ВидУчета = "НУ" И ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ВлияетНаНалогооблагаемыйДоход(СтрокаДанных.СчетДтБУ) Тогда
		Проводка.СчетКт = ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьСчетРасчетовСКонтрагентомНУ();
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтрокаДанных.Контрагент);
		Если ЭтоКомиссия Тогда
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры", СтрокаДанных.ДоговорКонтрагента);
		КонецЕсли;
		
	Иначе	
		Проводка.СчетКт = СтрокаДанных["СчетКт" + ВидУчета];
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтрокаДанных["СубконтоКт" + ВидУчета + 1]);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтрокаДанных["СубконтоКт" + ВидУчета + 2]);
	КонецЕсли;
	
	СвойстваСчетаКт = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
	Если ВидУчета = "БУ" И СвойстваСчетаКт.Валютный Тогда
		Проводка.ВалютаКт        = СтрокаДанных.ВалютаДокумента;
		Проводка.ВалютнаяСуммаКт = СтрокаДанных.ВалютнаяСумма;
	КонецЕсли;
	
	//Дт
	Проводка.СчетДт = СтрокаДанных["СчетДт" + ВидУчета];
	ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаДанных["СубконтоДт" + ВидУчета + 1]);
	ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаДанных["СубконтоДт" + ВидУчета + 2]);
	ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтрокаДанных["СубконтоДт" + ВидУчета + 3]);
	СвойстваСчетаДт = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
	
	Если ВидУчета = "БУ" И СвойстваСчетаДт.Валютный Тогда
		Проводка.ВалютаДт        = СтрокаДанных.ВалютаДокумента;
		Проводка.ВалютнаяСуммаДт = СтрокаДанных.ВалютнаяСумма;
	КонецЕсли;
	
	ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
		Проводка, СтрокаДанных.СтруктурноеПодразделениеПолучатель, СтрокаДанных.СтруктурноеПодразделениеОтправитель);	
	
	Если ВидУчета = "НУ" Тогда
		
		ПроцедурыНалоговогоУчета.ВидУчетаНУ(Проводка, СтрокаДанных.ВидУчетаНУ);
		
		Если ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ВлияетНаНалогооблагаемыйДоход(СтрокаДанных.СчетДтБУ) Тогда
		 	//если выбран счет затрат или доходов, то сделаем еще одну проводку
			//погашение начисленной выше задолженности
			Проводка = Движения.Налоговый.Добавить();
		
			Проводка.Период      = СтрокаДанных.Период;
			Проводка.Организация = СтрокаДанных.Организация;
			Проводка.Содержание  = СтрокаДанных.Содержание;
			Проводка.Сумма       = СтрокаДанных.СуммаРегл;

			//Кт
			Проводка.СчетКт = СтрокаДанных.СчетКтНУ;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтрокаДанных.СубконтоКтНУ1);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтрокаДанных.СубконтоКтНУ2);

			//Дт
			Проводка.СчетДт = ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьСчетРасчетовСКонтрагентомНУ();
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтрокаДанных.Контрагент);
			Если ЭтоКомиссия Тогда
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры", СтрокаДанных.ДоговорКонтрагента);
			КонецЕсли; 
			
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				Проводка, СтрокаДанных.СтруктурноеПодразделениеОтправитель, СтрокаДанных.СтруктурноеПодразделениеОтправитель);
			
			ПроцедурыНалоговогоУчета.ВидУчетаНУ(Проводка, СтрокаДанных.ВидУчетаНУ);
			
		КонецЕсли; 
	КонецЕсли;		
	
КонецПроцедуры

Функция ИспользоватьФорматMX() Экспорт
	Возврат Истина;
КонецФункции

Функция ИспользоватьПечатныеФормыПП2024() Экспорт
	Возврат Истина;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ Управления доступом

// Выполняет формирование таблицы с набором значений доступа объекта (документа), 
// содержащего ссылки на организацию, структорное подразделение и кассе 
// Вызывается из процедуры ЗаполнитьНаборыЗначенийДоступа, реализованной в модуле таких 
// документов, доступ к которым выполняется через наборы значений доступа.
// Параметры:
//		Объект
//		Таблица - переданная таблица значений.
//		ПутьОрганизация - строка с именем реквизита, содержащего организацию.
//		ПутьСтруктурноеПодразделение - строка с именем реквизита, содержащего структурное подразделение.
//		ПутьКасса -  строка с именем реквизита, содержащего склад.
//
Процедура ЗаполнитьНаборыПоОрганизацииСтрутурномуПодразделениюСкладу(Объект, Таблица, ПутьОрганизация, ПутьСтруктурноеПодразделение, ПутьКасса, НомерНабора = 0) Экспорт
	
	// Логика ограничения:
	// объект доступен, если доступна организация, структурное подразделение и склад
	
	ОбщегоНазначенияБК.ЗаполнитьНаборыПоОрганизацииСтурктурномуПодразделению(Объект, Таблица, ПутьОрганизация, ПутьСтруктурноеПодразделение, НомерНабора);
	
	СтрокаТаб 					= Таблица.Добавить();
	СтрокаТаб.ЗначениеДоступа 	= Объект[ПутьКасса];
	СтрокаТаб.НомерНабора 		= НомерНабора;
		
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
//ПЕЧАТЬ ЧЕКОВ

Функция ПараметрыОперацииФискализацииЧека(Реквизиты, ДанныеПечатиЧека, ВерсияФормата, СообщениеОбОшибке) Экспорт
	
	//Шапка чека
	ОбщиеПараметры = МенеджерОборудованияКлиентСерверПереопределяемый.ПараметрыОперацииФискализацииЧека();
	
	ОбщиеПараметры.ТипРасчета        = Реквизиты.ТипРасчета;
	ОбщиеПараметры.ДокументОснование = Реквизиты.ДокументОснование;	
	ОбщиеПараметры.Электронно        = Ложь;
	
	ОбщиеПараметры.НомерКассы     = "00001";
	ОбщиеПараметры.НомерЧека      = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(Реквизиты.Номер, Реквизиты.ДокументОснование);
	ОбщиеПараметры.НомерСмены     = 1;
	
	Сведения = ОбщегоНазначенияБКВызовСервера.СведенияОЮрФизЛице(Реквизиты.Организация,Реквизиты.Дата);
	
	ОбщиеПараметры.ОрганизацияНазвание       = Сведения.ПолноеНаименование;
	ОбщиеПараметры.ОрганизацияИНН            = Сведения.БИН_ИИН;
	ОбщиеПараметры.АдресМагазина             = Сведения.ЮридическийАдрес;
	ОбщиеПараметры.СерияСвидетельстваПоНДС   = Сведения.СерияСвидетельстваПоНДС;
	ОбщиеПараметры.НомерСвидетельстваПоНДС   = Сведения.НомерСвидетельстваПоНДС;
	ОбщиеПараметры.ПолучательИИН             = Реквизиты.ПолучательИИН;
	
	ДанныеКассира = ОбщегоНазначенияБКВызовСервера.ДанныеФизЛицаТекущегоПользователя(Реквизиты.Организация, Реквизиты.Дата);
	ПозицииЧека   = ОбщиеПараметры.ПозицииЧека;
	
	Если ДанныеКассира.Представление <> Неопределено Тогда
		ОбщиеПараметры.Кассир = СокрЛП(СтрШаблон("%1 %2", Строка(ДанныеКассира.Должность), ДанныеКассира.Представление));
	КонецЕсли;
			
	ЭтоВерсия105 = ЗначениеЗаполнено(ВерсияФормата) И НЕ (ОбщегоНазначенияКлиентСервер.СравнитьВерсии("1.0.5.0", ВерсияФормата) > 0);
	ЭтоВерсия110 = ЗначениеЗаполнено(ВерсияФормата) И НЕ (ОбщегоНазначенияКлиентСервер.СравнитьВерсии("1.1.0.0", ВерсияФормата) > 0);
	
	ДокументРасшифровкиПозиций = Неопределено;
	Реквизиты.Свойство("ДокументРасшифровкиПозиций", ДокументРасшифровкиПозиций);
	
	ИтогоСуммаЧеков = 0;
	
	Если ЗначениеЗаполнено(ДокументРасшифровкиПозиций) Тогда
		
		ТекстЗапроса = ТекстЗапросаОплаченныеПозицииНоменклатуры10(ДокументРасшифровкиПозиций);
		
		Если ТекстЗапроса <> "" Тогда
					
			ДокументыОснования = Новый Массив;
			ДокументыОснования.Добавить(ДокументРасшифровкиПозиций);
			
			Запрос = Новый Запрос;
			Запрос.Текст = ТекстЗапроса;
			Запрос.УстановитьПараметр("МассивДокументов", ДокументыОснования);
			Запрос.УстановитьПараметр("ДатаДокумента"   , Реквизиты.Дата);
			Запрос.УстановитьПараметр("ВалютаДокумента" , Реквизиты.ВалютаДокумента);
			Запрос.УстановитьПараметр("ПустаяСтавкаНДС" , Справочники.СтавкиНДС.ПустаяСсылка());
			
			ТаблицаПозицииЧека = Запрос.Выполнить().Выгрузить();
			
			Если ТаблицаПозицииЧека.Итог("Сумма") = Реквизиты.СуммаДокумента Тогда

				Для Каждого Позиция Из ТаблицаПозицииЧека Цикл
					
					СтрокаПозицииЧека = МенеджерОборудованияКлиентСерверПереопределяемый.ПараметрыФискальнойСтрокиЧека();
					ЗаполнитьЗначенияСвойств(СтрокаПозицииЧека, Позиция);
					
					СтрокаПозицииЧека.Наименование = Позиция.НоменклатураНаименование;
					СтрокаПозицииЧека.СтавкаНДС    = УчетНДСиАкцизаВызовСервераПовтИсп.ПолучитьСтавкуНДС(Позиция.СтавкаНДС);
					СтрокаПозицииЧека.НомерСекции  = 1;
					
					СтрокаПозицииЧека.КодЕдиницыИзмерения          = СокрЛП(Позиция.КодЕдиницыИзмерения);
					СтрокаПозицииЧека.НаименованиеЕдиницыИзмерения = Позиция.НаименованиеЕдиницыИзмерения;
					
					СтрокаПозицииЧека.Вставить("СтавкаНДССсылка", Позиция.СтавкаНДС);
					Если НЕ ЗначениеЗаполнено(Позиция.СтавкаНДС) Тогда
						СтрокаПозицииЧека.ОсвобожденныйОборотНДС = Истина;
					Иначе
						СтавкаНДС = Позиция.СтавкаНДС;
						СтрокаПозицииЧека.ОсвобожденныйОборотНДС = СтавкаНДС.ДляОсвобожденногоОборота ИЛИ СтавкаНДС.МестоРеализацииНеРК;
					КонецЕсли;
					
					ПозицииЧека.Добавить(СтрокаПозицииЧека);
					ИтогоСуммаЧеков = ИтогоСуммаЧеков + СтрокаПозицииЧека.Сумма;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИтогоСуммаЧеков <> Реквизиты.СуммаДокумента И ПозицииЧека.Количество() = 0  Тогда	
		
		ИтогоСуммаЧеков = 0;
		
		Отбор = Новый Структура("СтавкаНДС");
		РасшифровкаПлатежа = ДанныеПечатиЧека.РасшифровкаПлатежа;
		РасшифровкаПлатежа.Свернуть("СтавкаНДС", "СуммаПлатежа, СуммаВзаиморасчетов, СуммаНДС");
		
		ЕдиницаИзмеренияПоУмолчанию = Новый Структура("КодЕдиницыИзмерения, НаименованиеЕдиницыИзмерения", 796, "шт");
		
		Для Каждого ОплачиваемыйДокумент  Из РасшифровкаПлатежа Цикл
			
			СтрокаПозицииЧека = МенеджерОборудованияКлиентСерверПереопределяемый.ПараметрыФискальнойСтрокиЧека(); 
			СтрокаПозицииЧека.Наименование           = Реквизиты.НаименованиеВСтрокеЧека;
			СтрокаПозицииЧека.Количество             = 1;
			СтрокаПозицииЧека.Цена                   = ОплачиваемыйДокумент.СуммаПлатежа;
			СтрокаПозицииЧека.ЦенаСоСкидками         = ОплачиваемыйДокумент.СуммаПлатежа;
			СтрокаПозицииЧека.Сумма                  = ОплачиваемыйДокумент.СуммаПлатежа;
			СтрокаПозицииЧека.СтавкаНДС              = УчетНДСиАкцизаВызовСервераПовтИсп.ПолучитьСтавкуНДС(ОплачиваемыйДокумент.СтавкаНДС);
			СтрокаПозицииЧека.СуммаНДС               = ОплачиваемыйДокумент.СуммаНДС;
			СтрокаПозицииЧека.ПризнакСпособаРасчета  = Неопределено;
			СтрокаПозицииЧека.ПризнакПредметаРасчета = Неопределено;
			СтрокаПозицииЧека.НомерСекции            = Реквизиты.НомерСекции;
			СтрокаПозицииЧека.КодЕдиницыИзмерения    = ЕдиницаИзмеренияПоУмолчанию.КодЕдиницыИзмерения;
			СтрокаПозицииЧека.НаименованиеЕдиницыИзмерения = ЕдиницаИзмеренияПоУмолчанию.НаименованиеЕдиницыИзмерения;
			
			СтрокаПозицииЧека.Вставить("СтавкаНДССсылка", ОплачиваемыйДокумент.СтавкаНДС);
			Если НЕ ЗначениеЗаполнено(ОплачиваемыйДокумент.СтавкаНДС) Тогда
				СтрокаПозицииЧека.ОсвобожденныйОборотНДС = Истина;
			Иначе
				СтавкаНДС = ОплачиваемыйДокумент.СтавкаНДС;
				СтрокаПозицииЧека.ОсвобожденныйОборотНДС = СтавкаНДС.ДляОсвобожденногоОборота ИЛИ СтавкаНДС.МестоРеализацииНеРК;
			КонецЕсли;
			
			ПозицииЧека.Добавить(СтрокаПозицииЧека);
			
			ИтогоСуммаЧеков = ИтогоСуммаЧеков + ОплачиваемыйДокумент.СуммаПлатежа;
			
		КонецЦикла;
		
	КонецЕсли;
	
	СтрокаОплаты = Новый Структура();
	СтрокаОплаты.Вставить("ТипОплаты", Реквизиты.ТипОплаты);
	СтрокаОплаты.Вставить("Сумма", Реквизиты.СуммаДокумента);
	ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);
	
	Возврат ОбщиеПараметры;
	
КонецФункции

Функция ТекстЗапросаОплаченныеПозицииНоменклатуры10(ДокументРасшифровкиПозиций)
	
	ТекстЗапроса = "";
	ТипДокумента = ТипЗнч(ДокументРасшифровкиПозиций);
	
	Если ТипДокумента = Тип("ДокументСсылка.АктОбОказанииПроизводственныхУслуг") Тогда
		
		ТекстЗапроса = ТекстЗапроса + "ВЫБРАТЬ
		|	ТаблицаДокумента.Номенклатура КАК Номенклатура,
		|	ТаблицаДокумента.Количество КАК Количество,
		|	ТаблицаДокумента.Цена КАК Цена,
		|	ВЫБОР
		|		КОГДА (ТаблицаДокумента.Ссылка.УчитыватьНДС И ТаблицаДокумента.Ссылка.СуммаВключаетНДС) ИЛИ НЕ ТаблицаДокумента.Ссылка.УчитыватьНДС
		|			ТОГДА ТаблицаДокумента.Сумма
		|		ИНАЧЕ ТаблицаДокумента.Сумма + ТаблицаДокумента.СуммаНДС
		|	КОНЕЦ КАК Сумма,
		|	ВЫБОР
		|		КОГДА ТаблицаДокумента.Ссылка.УчитыватьНДС
		|			ТОГДА ТаблицаДокумента.СтавкаНДС
		|		ИНАЧЕ &ПустаяСтавкаНДС
		|	КОНЕЦ КАК СтавкаНДС,
		|	ВЫБОР
		|		КОГДА ТаблицаДокумента.Ссылка.УчитыватьНДС
		|			ТОГДА ТаблицаДокумента.СуммаНДС
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СуммаНДС,
		|	ТаблицаДокумента.Ссылка.ВалютаДокумента КАК Валюта,
		|	ТаблицаДокумента.Ссылка.СуммаВключаетНДС КАК ЦенаВключаетНДС,
		|	ТаблицаДокумента.ЕдиницаИзмерения.Код КАК КодЕдиницыИзмерения,
		|	ПРЕДСТАВЛЕНИЕ(ТаблицаДокумента.ЕдиницаИзмерения) КАК НаименованиеЕдиницыИзмерения
		|ПОМЕСТИТЬ ТаблицаНоменклатуры
		|ИЗ
		|	Документ.АктОбОказанииПроизводственныхУслуг.Услуги КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка В(&МассивДокументов)
		|;";
		
	КонецЕсли;
	
	Если ТипДокумента = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
		
		ТекстЗапроса = ТекстЗапроса + "ВЫБРАТЬ
		|	ТаблицаДокумента.Номенклатура КАК Номенклатура,
		|	ТаблицаДокумента.Количество КАК Количество,
		|	ТаблицаДокумента.Цена КАК Цена,
		|	ВЫБОР
		|		КОГДА (ТаблицаДокумента.Ссылка.УчитыватьНДС И ТаблицаДокумента.Ссылка.СуммаВключаетНДС) ИЛИ НЕ ТаблицаДокумента.Ссылка.УчитыватьНДС
		|			ТОГДА ВЫБОР
		|					КОГДА ТаблицаДокумента.Ссылка.УчитыватьАкциз И ТаблицаДокумента.Ссылка.СуммаВключаетАкциз
		|						ТОГДА ТаблицаДокумента.Сумма
		|					ИНАЧЕ ТаблицаДокумента.Сумма + ТаблицаДокумента.СуммаАкциза
		|				КОНЕЦ
		|		ИНАЧЕ ВЫБОР
		|				КОГДА ТаблицаДокумента.Ссылка.УчитыватьАкциз И ТаблицаДокумента.Ссылка.СуммаВключаетАкциз
		|					ТОГДА ТаблицаДокумента.Сумма + ТаблицаДокумента.СуммаНДС
		|				ИНАЧЕ ТаблицаДокумента.Сумма + ТаблицаДокумента.СуммаНДС + ТаблицаДокумента.СуммаАкциза
		|			КОНЕЦ
		|	КОНЕЦ КАК Сумма,
		|	ВЫБОР
		|		КОГДА ТаблицаДокумента.Ссылка.УчитыватьНДС
		|			ТОГДА ТаблицаДокумента.СтавкаНДС
		|		ИНАЧЕ &ПустаяСтавкаНДС
		|	КОНЕЦ КАК СтавкаНДС,
		|	ВЫБОР
		|		КОГДА ТаблицаДокумента.Ссылка.УчитыватьНДС
		|			ТОГДА ТаблицаДокумента.СуммаНДС
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СуммаНДС,
		|	ТаблицаДокумента.Ссылка.ВалютаДокумента КАК Валюта,
		|	ТаблицаДокумента.Ссылка.СуммаВключаетНДС КАК ЦенаВключаетНДС,
		|	ТаблицаДокумента.ЕдиницаИзмерения.Код КАК КодЕдиницыИзмерения,
		|	ПРЕДСТАВЛЕНИЕ(ТаблицаДокумента.ЕдиницаИзмерения) КАК НаименованиеЕдиницыИзмерения
		|ПОМЕСТИТЬ ТаблицаНоменклатуры
		|ИЗ
		|	Документ.ВозвратТоваровОтПокупателя.Товары КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка В(&МассивДокументов)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаДокумента.Номенклатура,
		|	ТаблицаДокумента.Количество,
		|	ТаблицаДокумента.Цена,
		|	ВЫБОР
		|		КОГДА (ТаблицаДокумента.Ссылка.УчитыватьНДС И ТаблицаДокумента.Ссылка.СуммаВключаетНДС) ИЛИ НЕ ТаблицаДокумента.Ссылка.УчитыватьНДС
		|			ТОГДА ТаблицаДокумента.Сумма
		|		ИНАЧЕ ТаблицаДокумента.Сумма + ТаблицаДокумента.СуммаНДС
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ТаблицаДокумента.Ссылка.УчитыватьНДС
		|			ТОГДА ТаблицаДокумента.СтавкаНДС
		|		ИНАЧЕ &ПустаяСтавкаНДС
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ТаблицаДокумента.Ссылка.УчитыватьНДС
		|			ТОГДА ТаблицаДокумента.СуммаНДС
		|		ИНАЧЕ 0
		|	КОНЕЦ,
		|	ТаблицаДокумента.Ссылка.ВалютаДокумента,
		|	ТаблицаДокумента.Ссылка.СуммаВключаетНДС,
		|	&ТекстЕдиницыНоменклатура
		|ИЗ
		|	Документ.ВозвратТоваровОтПокупателя.Услуги КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка В(&МассивДокументов)
		|;";
		
	КонецЕсли;
	
	Если ТипДокумента = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
		
		ТекстЗапроса = ТекстЗапроса + "ВЫБРАТЬ
		|	ТаблицаДокумента.Номенклатура КАК Номенклатура,
		|	ТаблицаДокумента.Количество КАК Количество,
		|	ТаблицаДокумента.Цена КАК Цена,
		|	ВЫБОР
		|		КОГДА (ТаблицаДокумента.Ссылка.УчитыватьНДС И ТаблицаДокумента.Ссылка.СуммаВключаетНДС) ИЛИ НЕ ТаблицаДокумента.Ссылка.УчитыватьНДС
		|			ТОГДА ТаблицаДокумента.Сумма
		|		ИНАЧЕ ТаблицаДокумента.Сумма + ТаблицаДокумента.СуммаНДС
		|	КОНЕЦ КАК Сумма,
		|	ВЫБОР
		|		КОГДА ТаблицаДокумента.Ссылка.УчитыватьНДС
		|			ТОГДА ТаблицаДокумента.СтавкаНДС
		|		ИНАЧЕ &ПустаяСтавкаНДС
		|	КОНЕЦ КАК СтавкаНДС,
		|	ВЫБОР
		|		КОГДА ТаблицаДокумента.Ссылка.УчитыватьНДС
		|			ТОГДА ТаблицаДокумента.СуммаНДС
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СуммаНДС,
		|	ТаблицаДокумента.Ссылка.ВалютаДокумента КАК Валюта,
		|	ТаблицаДокумента.Ссылка.СуммаВключаетНДС КАК ЦенаВключаетНДС,
		|	ТаблицаДокумента.ЕдиницаИзмерения.Код КАК КодЕдиницыИзмерения,
		|	ПРЕДСТАВЛЕНИЕ(ТаблицаДокумента.ЕдиницаИзмерения) КАК НаименованиеЕдиницыИзмерения
		|ПОМЕСТИТЬ ТаблицаНоменклатуры
		|ИЗ
		|	Документ.ВозвратТоваровПоставщику.Товары КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка В(&МассивДокументов)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаДокумента.Номенклатура,
		|	ТаблицаДокумента.Количество,
		|	ТаблицаДокумента.Цена,
		|	ВЫБОР
		|		КОГДА (ТаблицаДокумента.Ссылка.УчитыватьНДС И ТаблицаДокумента.Ссылка.СуммаВключаетНДС) ИЛИ НЕ ТаблицаДокумента.Ссылка.УчитыватьНДС
		|			ТОГДА ТаблицаДокумента.Сумма
		|		ИНАЧЕ ТаблицаДокумента.Сумма + ТаблицаДокумента.СуммаНДС
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ТаблицаДокумента.Ссылка.УчитыватьНДС
		|			ТОГДА ТаблицаДокумента.СтавкаНДС
		|		ИНАЧЕ &ПустаяСтавкаНДС
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ТаблицаДокумента.Ссылка.УчитыватьНДС
		|			ТОГДА ТаблицаДокумента.СуммаНДС
		|		ИНАЧЕ 0
		|	КОНЕЦ,
		|	ТаблицаДокумента.Ссылка.ВалютаДокумента,
		|	ТаблицаДокумента.Ссылка.СуммаВключаетНДС,
		|	&ТекстЕдиницыНоменклатура
		|ИЗ
		|	Документ.ВозвратТоваровПоставщику.Услуги КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка В(&МассивДокументов)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаДокумента.ОсновноеСредство,
		|	1,
		|	ВЫБОР
		|		КОГДА (ТаблицаДокумента.Ссылка.УчитыватьНДС И ТаблицаДокумента.Ссылка.СуммаВключаетНДС) ИЛИ НЕ ТаблицаДокумента.Ссылка.УчитыватьНДС
		|			ТОГДА ТаблицаДокумента.Сумма
		|		ИНАЧЕ ТаблицаДокумента.Сумма + ТаблицаДокумента.СуммаНДС
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА (ТаблицаДокумента.Ссылка.УчитыватьНДС И ТаблицаДокумента.Ссылка.СуммаВключаетНДС) ИЛИ НЕ ТаблицаДокумента.Ссылка.УчитыватьНДС
		|			ТОГДА ТаблицаДокумента.Сумма
		|		ИНАЧЕ ТаблицаДокумента.Сумма + ТаблицаДокумента.СуммаНДС
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ТаблицаДокумента.Ссылка.УчитыватьНДС
		|			ТОГДА ТаблицаДокумента.СтавкаНДС
		|		ИНАЧЕ &ПустаяСтавкаНДС
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ТаблицаДокумента.Ссылка.УчитыватьНДС
		|			ТОГДА ТаблицаДокумента.СуммаНДС
		|		ИНАЧЕ 0
		|	КОНЕЦ,
		|	ТаблицаДокумента.Ссылка.ВалютаДокумента,
		|	ТаблицаДокумента.Ссылка.СуммаВключаетНДС,
		|	&ТекстЕдиницыПоУмолчанию
		|ИЗ
		|	Документ.ВозвратТоваровПоставщику.ОС КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка В(&МассивДокументов)
		|;";
		
	КонецЕсли;
	
	Если ТипДокумента = Тип("ДокументСсылка.ПередачаНМА") Тогда
		
		ТекстЗапроса = ТекстЗапроса + "ВЫБРАТЬ
		|	ТаблицаДокумента.НематериальныйАктив КАК Номенклатура,
		|	1 КАК Количество,
		|	ВЫБОР
		|		КОГДА (ТаблицаДокумента.Ссылка.УчитыватьНДС И ТаблицаДокумента.Ссылка.СуммаВключаетНДС) ИЛИ НЕ ТаблицаДокумента.Ссылка.УчитыватьНДС
		|			ТОГДА ТаблицаДокумента.Сумма
		|		ИНАЧЕ ТаблицаДокумента.Сумма + ТаблицаДокумента.СуммаНДС
		|	КОНЕЦ КАК Цена,
		|	ВЫБОР
		|		КОГДА (ТаблицаДокумента.Ссылка.УчитыватьНДС И ТаблицаДокумента.Ссылка.СуммаВключаетНДС) ИЛИ НЕ ТаблицаДокумента.Ссылка.УчитыватьНДС
		|			ТОГДА ТаблицаДокумента.Сумма
		|		ИНАЧЕ ТаблицаДокумента.Сумма + ТаблицаДокумента.СуммаНДС
		|	КОНЕЦ КАК Сумма,
		|	ВЫБОР
		|		КОГДА ТаблицаДокумента.Ссылка.УчитыватьНДС
		|			ТОГДА ТаблицаДокумента.СтавкаНДС
		|		ИНАЧЕ &ПустаяСтавкаНДС
		|	КОНЕЦ КАК СтавкаНДС,
		|	ВЫБОР
		|		КОГДА ТаблицаДокумента.Ссылка.УчитыватьНДС
		|			ТОГДА ТаблицаДокумента.СуммаНДС
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СуммаНДС,
		|	ТаблицаДокумента.ВалютаДокумента КАК Валюта,
		|	ТаблицаДокумента.СуммаВключаетНДС КАК ЦенаВключаетНДС,
		|	&ТекстЕдиницыПоУмолчанию
		|ПОМЕСТИТЬ ТаблицаНоменклатуры
		|ИЗ
		|	Документ.ПередачаНМА КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка В(&МассивДокументов)
		|;";
		
	КонецЕсли;
	
	Если ТипДокумента = Тип("ДокументСсылка.ПередачаОС") Тогда
		
		ТекстЗапроса = ТекстЗапроса + "ВЫБРАТЬ
		|	ТаблицаДокумента.ОсновноеСредство КАК Номенклатура,
		|	1 КАК Количество,
		|	ВЫБОР
		|		КОГДА (ТаблицаДокумента.Ссылка.УчитыватьНДС И ТаблицаДокумента.Ссылка.СуммаВключаетНДС) ИЛИ НЕ ТаблицаДокумента.Ссылка.УчитыватьНДС
		|			ТОГДА ТаблицаДокумента.Сумма
		|		ИНАЧЕ ТаблицаДокумента.Сумма + ТаблицаДокумента.СуммаНДС
		|	КОНЕЦ КАК Цена,
		|	ВЫБОР
		|		КОГДА (ТаблицаДокумента.Ссылка.УчитыватьНДС И ТаблицаДокумента.Ссылка.СуммаВключаетНДС) ИЛИ НЕ ТаблицаДокумента.Ссылка.УчитыватьНДС
		|			ТОГДА ТаблицаДокумента.Сумма
		|		ИНАЧЕ ТаблицаДокумента.Сумма + ТаблицаДокумента.СуммаНДС
		|	КОНЕЦ КАК Сумма,
		|	ВЫБОР
		|		КОГДА ТаблицаДокумента.Ссылка.УчитыватьНДС
		|			ТОГДА ТаблицаДокумента.СтавкаНДС
		|		ИНАЧЕ &ПустаяСтавкаНДС
		|	КОНЕЦ КАК СтавкаНДС,
		|	ВЫБОР
		|		КОГДА ТаблицаДокумента.Ссылка.УчитыватьНДС
		|			ТОГДА ТаблицаДокумента.СуммаНДС
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СуммаНДС,
		|	ТаблицаДокумента.Ссылка.ВалютаДокумента КАК Валюта,
		|	ТаблицаДокумента.Ссылка.СуммаВключаетНДС КАК ЦенаВключаетНДС,
		|	&ТекстЕдиницыПоУмолчанию
		|ПОМЕСТИТЬ ТаблицаНоменклатуры
		|ИЗ
		|	Документ.ПередачаОС.ОС КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка В(&МассивДокументов)
		|;";
		
	КонецЕсли;

	Если ТипДокумента = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		
		ТекстЗапроса = ТекстЗапроса + "ВЫБРАТЬ
		|	ТаблицаДокумента.Номенклатура КАК Номенклатура,
		|	ТаблицаДокумента.Количество КАК Количество,
		|	ТаблицаДокумента.Цена КАК Цена,
		|	ВЫБОР
		|		КОГДА (ТаблицаДокумента.Ссылка.УчитыватьНДС И ТаблицаДокумента.Ссылка.СуммаВключаетНДС) ИЛИ НЕ ТаблицаДокумента.Ссылка.УчитыватьНДС
		|			ТОГДА ВЫБОР
		|					КОГДА ТаблицаДокумента.Ссылка.УчитыватьАкциз И ТаблицаДокумента.Ссылка.СуммаВключаетАкциз
		|						ТОГДА ТаблицаДокумента.Сумма
		|					ИНАЧЕ ТаблицаДокумента.Сумма + ТаблицаДокумента.СуммаАкциза
		|				КОНЕЦ
		|		ИНАЧЕ ВЫБОР
		|				КОГДА ТаблицаДокумента.Ссылка.УчитыватьАкциз И ТаблицаДокумента.Ссылка.СуммаВключаетАкциз
		|					ТОГДА ТаблицаДокумента.Сумма + ТаблицаДокумента.СуммаНДС
		|				ИНАЧЕ ТаблицаДокумента.Сумма + ТаблицаДокумента.СуммаНДС + ТаблицаДокумента.СуммаАкциза
		|			КОНЕЦ
		|	КОНЕЦ КАК Сумма,
		|	ВЫБОР
		|		КОГДА ТаблицаДокумента.Ссылка.УчитыватьНДС
		|			ТОГДА ТаблицаДокумента.СтавкаНДС
		|		ИНАЧЕ &ПустаяСтавкаНДС
		|	КОНЕЦ КАК СтавкаНДС,
		|	ВЫБОР
		|		КОГДА ТаблицаДокумента.Ссылка.УчитыватьНДС
		|			ТОГДА ТаблицаДокумента.СуммаНДС
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СуммаНДС,
		|	ТаблицаДокумента.Ссылка.ВалютаДокумента КАК Валюта,
		|	ТаблицаДокумента.Ссылка.СуммаВключаетНДС КАК ЦенаВключаетНДС,
		|	ТаблицаДокумента.ЕдиницаИзмерения.Код КАК КодЕдиницыИзмерения,
		|	ПРЕДСТАВЛЕНИЕ(ТаблицаДокумента.ЕдиницаИзмерения) КАК НаименованиеЕдиницыИзмерения
		|ПОМЕСТИТЬ ТаблицаНоменклатуры
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Товары КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка В(&МассивДокументов)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаДокумента.Номенклатура,
		|	ТаблицаДокумента.Количество,
		|	ТаблицаДокумента.Цена,
		|	ВЫБОР
		|		КОГДА (ТаблицаДокумента.Ссылка.УчитыватьНДС И ТаблицаДокумента.Ссылка.СуммаВключаетНДС) ИЛИ НЕ ТаблицаДокумента.Ссылка.УчитыватьНДС
		|			ТОГДА ТаблицаДокумента.Сумма
		|		ИНАЧЕ ТаблицаДокумента.Сумма + ТаблицаДокумента.СуммаНДС
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ТаблицаДокумента.Ссылка.УчитыватьНДС
		|			ТОГДА ТаблицаДокумента.СтавкаНДС
		|		ИНАЧЕ &ПустаяСтавкаНДС
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ТаблицаДокумента.Ссылка.УчитыватьНДС
		|			ТОГДА ТаблицаДокумента.СуммаНДС
		|		ИНАЧЕ 0
		|	КОНЕЦ,
		|	ТаблицаДокумента.Ссылка.ВалютаДокумента,
		|	ТаблицаДокумента.Ссылка.СуммаВключаетНДС,
		|	&ТекстЕдиницыНоменклатура
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Услуги КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка В(&МассивДокументов)
		|;";
		
	КонецЕсли;
	
	Если ТипДокумента = Тип("ДокументСсылка.РеализацияУслугПоПереработке") Тогда
		
		ТекстЗапроса = ТекстЗапроса + "ВЫБРАТЬ
		|	ТаблицаДокумента.Номенклатура КАК Номенклатура,
		|	ТаблицаДокумента.Количество КАК Количество,
		|	ТаблицаДокумента.Цена КАК Цена,
		|	ВЫБОР
		|		КОГДА (ТаблицаДокумента.Ссылка.УчитыватьНДС И ТаблицаДокумента.Ссылка.СуммаВключаетНДС) ИЛИ НЕ ТаблицаДокумента.Ссылка.УчитыватьНДС
		|			ТОГДА ТаблицаДокумента.Сумма
		|		ИНАЧЕ ТаблицаДокумента.Сумма + ТаблицаДокумента.СуммаНДС
		|	КОНЕЦ КАК Сумма,
		|	ВЫБОР
		|		КОГДА ТаблицаДокумента.Ссылка.УчитыватьНДС
		|			ТОГДА ТаблицаДокумента.СтавкаНДС
		|		ИНАЧЕ &ПустаяСтавкаНДС
		|	КОНЕЦ КАК СтавкаНДС,
		|	ВЫБОР
		|		КОГДА ТаблицаДокумента.Ссылка.УчитыватьНДС
		|			ТОГДА ТаблицаДокумента.СуммаНДС
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СуммаНДС,
		|	ТаблицаДокумента.Ссылка.ВалютаДокумента КАК Валюта,
		|	ТаблицаДокумента.Ссылка.СуммаВключаетНДС КАК ЦенаВключаетНДС,
		|	&ТекстЕдиницыНоменклатура
		|ПОМЕСТИТЬ ТаблицаНоменклатуры
		|ИЗ
		|	Документ.РеализацияУслугПоПереработке.Услуги КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка В(&МассивДокументов)
		|;";
		
	КонецЕсли;
	
	Если ТипДокумента = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
		
		ТекстЗапроса = ТекстЗапроса + "ВЫБРАТЬ
		|	ТаблицаДокумента.Номенклатура КАК Номенклатура,
		|	ТаблицаДокумента.Количество КАК Количество,
		|	ТаблицаДокумента.Цена КАК Цена,
		|	ВЫБОР
		|		КОГДА (ТаблицаДокумента.Ссылка.УчитыватьНДС И ТаблицаДокумента.Ссылка.СуммаВключаетНДС) ИЛИ НЕ ТаблицаДокумента.Ссылка.УчитыватьНДС
		|			ТОГДА ВЫБОР
		|					КОГДА ТаблицаДокумента.Ссылка.УчитыватьАкциз И ТаблицаДокумента.Ссылка.СуммаВключаетАкциз
		|						ТОГДА ТаблицаДокумента.Сумма
		|					ИНАЧЕ ТаблицаДокумента.Сумма + ТаблицаДокумента.СуммаАкциза
		|				КОНЕЦ
		|		ИНАЧЕ ВЫБОР
		|				КОГДА ТаблицаДокумента.Ссылка.УчитыватьАкциз И ТаблицаДокумента.Ссылка.СуммаВключаетАкциз
		|					ТОГДА ТаблицаДокумента.Сумма + ТаблицаДокумента.СуммаНДС
		|				ИНАЧЕ ТаблицаДокумента.Сумма + ТаблицаДокумента.СуммаНДС + ТаблицаДокумента.СуммаАкциза
		|			КОНЕЦ
		|	КОНЕЦ КАК Сумма,
		|	ВЫБОР
		|		КОГДА ТаблицаДокумента.Ссылка.УчитыватьНДС
		|			ТОГДА ТаблицаДокумента.СтавкаНДС
		|		ИНАЧЕ &ПустаяСтавкаНДС
		|	КОНЕЦ КАК СтавкаНДС,
		|	ВЫБОР
		|		КОГДА ТаблицаДокумента.Ссылка.УчитыватьНДС
		|			ТОГДА ТаблицаДокумента.СуммаНДС
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СуммаНДС,
		|	ТаблицаДокумента.Ссылка.ВалютаДокумента КАК Валюта,
		|	ТаблицаДокумента.Ссылка.СуммаВключаетНДС КАК ЦенаВключаетНДС,
		|	ТаблицаДокумента.ЕдиницаИзмерения.Код КАК КодЕдиницыИзмерения,
		|	ПРЕДСТАВЛЕНИЕ(ТаблицаДокумента.ЕдиницаИзмерения) КАК НаименованиеЕдиницыИзмерения
		|ПОМЕСТИТЬ ТаблицаНоменклатуры
		|ИЗ
		|	Документ.СчетНаОплатуПокупателю.Товары КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка В(&МассивДокументов)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаДокумента.Номенклатура,
		|	ТаблицаДокумента.Количество,
		|	ТаблицаДокумента.Цена,
		|	ВЫБОР
		|		КОГДА (ТаблицаДокумента.Ссылка.УчитыватьНДС И ТаблицаДокумента.Ссылка.СуммаВключаетНДС) ИЛИ НЕ ТаблицаДокумента.Ссылка.УчитыватьНДС
		|			ТОГДА ТаблицаДокумента.Сумма
		|		ИНАЧЕ ТаблицаДокумента.Сумма + ТаблицаДокумента.СуммаНДС
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ТаблицаДокумента.Ссылка.УчитыватьНДС
		|			ТОГДА ТаблицаДокумента.СтавкаНДС
		|		ИНАЧЕ &ПустаяСтавкаНДС
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ТаблицаДокумента.Ссылка.УчитыватьНДС
		|			ТОГДА ТаблицаДокумента.СуммаНДС
		|		ИНАЧЕ 0
		|	КОНЕЦ,
		|	ТаблицаДокумента.Ссылка.ВалютаДокумента,
		|	ТаблицаДокумента.Ссылка.СуммаВключаетНДС,
		|	&ТекстЕдиницыНоменклатура
		|ИЗ
		|	Документ.СчетНаОплатуПокупателю.Услуги КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка В(&МассивДокументов)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаДокумента.ОсновноеСредство,
		|	1,
		|	ВЫБОР
		|		КОГДА (ТаблицаДокумента.Ссылка.УчитыватьНДС И ТаблицаДокумента.Ссылка.СуммаВключаетНДС) ИЛИ НЕ ТаблицаДокумента.Ссылка.УчитыватьНДС
		|			ТОГДА ТаблицаДокумента.Сумма
		|		ИНАЧЕ ТаблицаДокумента.Сумма + ТаблицаДокумента.СуммаНДС
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА (ТаблицаДокумента.Ссылка.УчитыватьНДС И ТаблицаДокумента.Ссылка.СуммаВключаетНДС) ИЛИ НЕ ТаблицаДокумента.Ссылка.УчитыватьНДС
		|			ТОГДА ТаблицаДокумента.Сумма
		|		ИНАЧЕ ТаблицаДокумента.Сумма + ТаблицаДокумента.СуммаНДС
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ТаблицаДокумента.Ссылка.УчитыватьНДС
		|			ТОГДА ТаблицаДокумента.СтавкаНДС
		|		ИНАЧЕ &ПустаяСтавкаНДС
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ТаблицаДокумента.Ссылка.УчитыватьНДС
		|			ТОГДА ТаблицаДокумента.СуммаНДС
		|		ИНАЧЕ 0
		|	КОНЕЦ,
		|	ТаблицаДокумента.Ссылка.ВалютаДокумента,
		|	ТаблицаДокумента.Ссылка.СуммаВключаетНДС,
		|	&ТекстЕдиницыПоУмолчанию
		|ИЗ
		|	Документ.СчетНаОплатуПокупателю.ОС КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка В(&МассивДокументов)
		|;";
		
	КонецЕсли;
	
	Если ТекстЗапроса <> "" Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КурсВалюты.Валюта КАК Валюта,
		|	КурсВалюты.Курс * КурсВалютыДокумента.Кратность / (КурсВалюты.Кратность * КурсВалютыДокумента.Курс) КАК КоэффициентПересчета
		|ПОМЕСТИТЬ КурсыВалют
		|ИЗ
		|	РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДокумента, ) КАК КурсВалюты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДокумента, Валюта = &ВалютаДокумента) КАК КурсВалютыДокумента
		|		ПО (ИСТИНА)
		|ГДЕ
		|	КурсВалюты.Кратность <> 0
		|	И КурсВалютыДокумента.Курс <> 0
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Валюта
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаНоменклатуры.Количество             КАК Количество,
		|	ТаблицаНоменклатуры.Сумма * ЕСТЬNULL(КурсыВалют.КоэффициентПересчета, 1) КАК Сумма,
		|	ТаблицаНоменклатуры.СтавкаНДС              КАК СтавкаНДС,
		|	ТаблицаНоменклатуры.СуммаНДС * ЕСТЬNULL(КурсыВалют.КоэффициентПересчета, 1) КАК СуммаНДС,
		|	ТаблицаНоменклатуры.Валюта                 КАК Валюта,
		|	ВЫРАЗИТЬ(ВЫБОР
		|		КОГДА ТаблицаНоменклатуры.ЦенаВключаетНДС ТОГДА
		|			ТаблицаНоменклатуры.Цена
		|		КОГДА ТаблицаНоменклатуры.Количество = 0 ТОГДА
		|			ТаблицаНоменклатуры.Сумма
		|		ИНАЧЕ
		|			ТаблицаНоменклатуры.Сумма / ТаблицаНоменклатуры.Количество
		|	КОНЕЦ * ЕСТЬNULL(КурсыВалют.КоэффициентПересчета, 1) КАК ЧИСЛО(15, 2)) КАК Цена,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ТаблицаНоменклатуры.Номенклатура) = ТИП(Строка) ТОГДА
		|			ТаблицаНоменклатуры.Номенклатура
		|		ИНАЧЕ
		|			ВЫРАЗИТЬ(ТаблицаНоменклатуры.Номенклатура.НаименованиеПолное КАК Строка(255))
		|	КОНЕЦ КАК НоменклатураНаименование,
		|	ТаблицаНоменклатуры.КодЕдиницыИзмерения КАК КодЕдиницыИзмерения,
		|	ТаблицаНоменклатуры.НаименованиеЕдиницыИзмерения КАК НаименованиеЕдиницыИзмерения
		|
		|ИЗ
		|	ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют
		|		ПО ТаблицаНоменклатуры.Валюта = КурсыВалют.Валюта
		|";
		
		ТекстЕдиницыПоУмолчанию = "796 КАК КодЕдиницыИзмерения,
		| ""шт"" КАК НаименованиеЕдиницыИзмерения
		|";
		
		ТекстЕдиницыНоменклатура = "ТаблицаДокумента.Номенклатура.БазоваяЕдиницаИзмерения.Код КАК КодЕдиницыИзмерения,
		|	ПРЕДСТАВЛЕНИЕ(ТаблицаДокумента.Номенклатура.БазоваяЕдиницаИзмерения) КАК НаименованиеЕдиницыИзмерения
		|";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЕдиницыПоУмолчанию" , ТекстЕдиницыПоУмолчанию);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЕдиницыНоменклатура", ТекстЕдиницыНоменклатура);
			
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции
