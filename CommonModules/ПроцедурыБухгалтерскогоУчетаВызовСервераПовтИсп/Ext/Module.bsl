////////////////////////////////////////////////////////////////////////////////
// ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп:
//  
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

Функция ПолучитьСвойстваСчета(Знач Счет) Экспорт

	Если Тип("ПланСчетовСсылка.Типовой") = ТипЗнч(Счет) Тогда
		ПланСчетов = "Типовой";
	Иначе
		ПланСчетов = "Налоговый";
	КонецЕсли;
	
	ДанныеСчета = Новый Структура;
	ДанныеСчета.Вставить("Ссылка"                         , ПланыСчетов[ПланСчетов].ПустаяСсылка());
	ДанныеСчета.Вставить("Наименование"                   , "");
	ДанныеСчета.Вставить("Код"                            , "");
	ДанныеСчета.Вставить("Родитель"                       , ПланыСчетов[ПланСчетов].ПустаяСсылка());
	ДанныеСчета.Вставить("Вид"                            , Неопределено);
	ДанныеСчета.Вставить("Забалансовый"                   , Ложь);
	ДанныеСчета.Вставить("ЗапретитьИспользоватьВПроводках", Ложь);
	Если ПланСчетов = "Типовой" Тогда
		ДанныеСчета.Вставить("Валютный"                   , Ложь);
		ДанныеСчета.Вставить("СчетНУ"                     , ПланыСчетов.Налоговый.ПустаяСсылка());
	Иначе
		ДанныеСчета.Вставить("ВестиУчетВременныхРазниц"   , Ложь);
	КонецЕсли;
	ДанныеСчета.Вставить("Количественный"                 , Ложь);
	ДанныеСчета.Вставить("КоличествоСубконто"             , 0);
	
	МаксКоличествоСубконто	= ПолучитьМаксКоличествоСубконто(ПланСчетов);
	
	Для ИндексСубконто = 1 По МаксКоличествоСубконто Цикл
		ДанныеСчета.Вставить("ВидСубконто" + ИндексСубконто,                   Неопределено);
		ДанныеСчета.Вставить("ВидСубконто" + ИндексСубконто + "Наименование",  Неопределено);
		ДанныеСчета.Вставить("ВидСубконто" + ИндексСубконто + "ТипЗначения",   Неопределено);
		ДанныеСчета.Вставить("ВидСубконто" + ИндексСубконто + "Суммовой",      Ложь);
		ДанныеСчета.Вставить("ВидСубконто" + ИндексСубконто + "ТолькоОбороты", Ложь);
	КонецЦикла;
	
	Если НЕ ЗначениеЗаполнено(Счет) Тогда
		Возврат ДанныеСчета;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Счет", Счет);
	
	Запрос.Текст = 
	"ВЫБРАТЬ                                                    
	|	ПланСчетов.Ссылка,
	|	ПланСчетов.Родитель,
	|	ПланСчетов.Код,
	|	ПланСчетов.Наименование,
	|	ПланСчетов.Вид,
	|	ПланСчетов.Забалансовый,
	|	ПланСчетов.ЗапретитьИспользоватьВПроводках," 
	+ ?(ПланСчетов = "Налоговый", "ПланСчетов.ВестиУчетВременныхРазниц", "ПланСчетов.Валютный") + ",
	|
	|	ПланСчетов.Количественный
	|ИЗ
	|	ПланСчетов." + ПланСчетов + " КАК ПланСчетов
	|ГДЕ
	|	ПланСчетов.Ссылка = &Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВидыСубконто.НомерСтроки КАК НомерСтроки,
	|	ВидыСубконто.ВидСубконто КАК ВидСубконто,
	|	ВидыСубконто.ВидСубконто.Наименование КАК Наименование,
	|	ВидыСубконто.ВидСубконто.ТипЗначения КАК ТипЗначения,
	|	ВидыСубконто.ТолькоОбороты КАК ТолькоОбороты,
	|	ВидыСубконто.Суммовой КАК Суммовой
	|ИЗ
	|	ПланСчетов." + ПланСчетов + ".ВидыСубконто КАК ВидыСубконто
	|ГДЕ
	|	ВидыСубконто.Ссылка = &Счет
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВидыСубконто.НомерСтроки";
	
	Если ПланСчетов = "Типовой" Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"ПланСчетов.Забалансовый,", 
		"ПланСчетов.Забалансовый, ПланСчетов.СчетНУ,");
	КонецЕсли;										
	
	МассивРезультатов	= Запрос.ВыполнитьПакет();
	
	Выборка = МассивРезультатов[0].Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ДанныеСчета, Выборка);
	КонецЕсли;
		
	ВыборкаВидыСубконто	= МассивРезультатов[1].Выбрать();
		
	ДанныеСчета.КоличествоСубконто	= ВыборкаВидыСубконто.Количество();
		
	ИндексСубконто	= 0;
		
	Пока ВыборкаВидыСубконто.Следующий() Цикл
		
		ИндексСубконто	= ИндексСубконто + 1;
		
		ДанныеСчета.Вставить("ВидСубконто" + ИндексСубконто,                   ВыборкаВидыСубконто.ВидСубконто);
		ДанныеСчета.Вставить("ВидСубконто" + ИндексСубконто + "Наименование",  ВыборкаВидыСубконто.Наименование);
		ДанныеСчета.Вставить("ВидСубконто" + ИндексСубконто + "ТипЗначения",   ВыборкаВидыСубконто.ТипЗначения);
		ДанныеСчета.Вставить("ВидСубконто" + ИндексСубконто + "Суммовой",      ВыборкаВидыСубконто.Суммовой);
		ДанныеСчета.Вставить("ВидСубконто" + ИндексСубконто + "ТолькоОбороты", ВыборкаВидыСубконто.ТолькоОбороты);
		
	КонецЦикла;
	
	Возврат ДанныеСчета;
	
КонецФункции

Функция ПолучитьМаксКоличествоСубконто(ПланСчетов) Экспорт

	Возврат Метаданные.ПланыСчетов[ПланСчетов].МаксКоличествоСубконто;

КонецФункции

Функция СчетВИерархии(Счет, Эталон) Экспорт

	Если ЗначениеЗаполнено(Счет) Тогда
		Возврат Счет = Эталон ИЛИ Счет.ПринадлежитЭлементу(Эталон);
	Иначе
		Возврат Ложь;
	КонецЕсли;

КонецФункции

Функция СчетаВИерархии(СчетГруппа) Экспорт
	
	Если НЕ ЗначениеЗаполнено(СчетГруппа) Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СчетГруппа", СчетГруппа);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Типовой.Ссылка КАК Счет
	|ИЗ
	|	ПланСчетов.Типовой КАК Типовой
	|ГДЕ
	|	Типовой.Ссылка В ИЕРАРХИИ(&СчетГруппа)";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Счет");

КонецФункции

Функция НаСчетеВедетсяУчетПоДокументамРасчетов(Счет) Экспорт

	СвойстваСчета = ПолучитьСвойстваСчета(Счет);

	УчетПоДокументамРасчетов = СвойстваСчета.ВидСубконто3 = ПланыВидовХарактеристик.ВидыСубконтоТиповые.ДокументыРасчетовСКонтрагентами
		ИЛИ СвойстваСчета.ВидСубконто2 = ПланыВидовХарактеристик.ВидыСубконтоТиповые.ДокументыРасчетовСКонтрагентами
		ИЛИ СвойстваСчета.ВидСубконто1 = ПланыВидовХарактеристик.ВидыСубконтоТиповые.ДокументыРасчетовСКонтрагентами;

	Возврат УчетПоДокументамРасчетов;

КонецФункции

Функция НаСчетеВедетсяУчетПоКонтрагентам(Счет) Экспорт

	СвойстваСчета = ПолучитьСвойстваСчета(Счет);

	УчетПоКонтрагентам = СвойстваСчета.ВидСубконто3 = ПланыВидовХарактеристик.ВидыСубконтоТиповые.Контрагенты
		ИЛИ СвойстваСчета.ВидСубконто2 = ПланыВидовХарактеристик.ВидыСубконтоТиповые.Контрагенты
		ИЛИ СвойстваСчета.ВидСубконто1 = ПланыВидовХарактеристик.ВидыСубконтоТиповые.Контрагенты;

	Возврат УчетПоКонтрагентам;

КонецФункции 

Функция НаСчетеВедетсяУчетПоДоговорам(Счет) Экспорт

	СвойстваСчета = ПолучитьСвойстваСчета(Счет);

	УчетПоДоговорам = СвойстваСчета.ВидСубконто3 = ПланыВидовХарактеристик.ВидыСубконтоТиповые.Договоры
		ИЛИ СвойстваСчета.ВидСубконто2 = ПланыВидовХарактеристик.ВидыСубконтоТиповые.Договоры
		ИЛИ СвойстваСчета.ВидСубконто1 = ПланыВидовХарактеристик.ВидыСубконтоТиповые.Договоры;

	Возврат УчетПоДоговорам;

КонецФункции

Функция НаСчетеВедетсяУчетПоДокументамПоступления(Счет) Экспорт

	СвойстваСчета = ПолучитьСвойстваСчета(Счет);

	УчетПоДокументамПоступления = СвойстваСчета.ВидСубконто3 = ПланыВидовХарактеристик.ВидыСубконтоТиповые.ДокументыПоступления
		ИЛИ СвойстваСчета.ВидСубконто2 = ПланыВидовХарактеристик.ВидыСубконтоТиповые.ДокументыПоступления
		ИЛИ СвойстваСчета.ВидСубконто1 = ПланыВидовХарактеристик.ВидыСубконтоТиповые.ДокументыПоступления;

	Возврат УчетПоДокументамПоступления;

КонецФункции

Функция ВедетсяУчетПоСкладам(Счет) Экспорт

	СвойстваСчета = ПолучитьСвойстваСчета(Счет);

	УчетПоСкладам = СвойстваСчета.ВидСубконто1 = ПланыВидовХарактеристик.ВидыСубконтоТиповые.Склады
		ИЛИ СвойстваСчета.ВидСубконто2 = ПланыВидовХарактеристик.ВидыСубконтоТиповые.Склады
		ИЛИ СвойстваСчета.ВидСубконто3 = ПланыВидовХарактеристик.ВидыСубконтоТиповые.Склады;

	Возврат УчетПоСкладам;

КонецФункции 

Функция ВедетсяСуммовойУчетПоСкладам(Счет) Экспорт

	СвойстваСчета      = ПолучитьСвойстваСчета(Счет);

	Если СвойстваСчета.ВидСубконто1 = ПланыВидовХарактеристик.ВидыСубконтоТиповые.Склады Тогда
		Возврат СвойстваСчета.ВидСубконто1Суммовой;
	ИначеЕсли СвойстваСчета.ВидСубконто2 = ПланыВидовХарактеристик.ВидыСубконтоТиповые.Склады Тогда
		Возврат СвойстваСчета.ВидСубконто2Суммовой;
	ИначеЕсли СвойстваСчета.ВидСубконто3 = ПланыВидовХарактеристик.ВидыСубконтоТиповые.Склады Тогда
		Возврат СвойстваСчета.ВидСубконто3Суммовой;
	Иначе
		Возврат Ложь;
	КонецЕсли;

КонецФункции

Функция НаСчетеВедетсяПартионныйУчет(Счет) Экспорт

	СвойстваСчета  = ПолучитьСвойстваСчета(Счет);

	ПартионныйУчет = СвойстваСчета.ВидСубконто1 = ПланыВидовХарактеристик.ВидыСубконтоТиповые.Партии
		ИЛИ СвойстваСчета.ВидСубконто2 = ПланыВидовХарактеристик.ВидыСубконтоТиповые.Партии
		ИЛИ СвойстваСчета.ВидСубконто3 = ПланыВидовХарактеристик.ВидыСубконтоТиповые.Партии;

	Возврат ПартионныйУчет;

КонецФункции 

Функция НаСчетеВедетсяУчетНоменклатуры(Счет) Экспорт
	
	Если ЗначениеЗаполнено(Счет) Тогда
		
		СвойстваСчета  = ПолучитьСвойстваСчета(Счет);

		УчетПоНоменклатуре = СвойстваСчета.ВидСубконто1 = ПланыВидовХарактеристик.ВидыСубконтоТиповые.Номенклатура
			ИЛИ СвойстваСчета.ВидСубконто2 = ПланыВидовХарактеристик.ВидыСубконтоТиповые.Номенклатура
			ИЛИ СвойстваСчета.ВидСубконто3 = ПланыВидовХарактеристик.ВидыСубконтоТиповые.Номенклатура;
			
	Иначе
			
		УчетПоНоменклатуре = Истина;
		
	КонецЕсли;
		
	Возврат УчетПоНоменклатуре;
	
КонецФункции

Функция НаСчетеВедетсяУчетПоПодразделениям(Счет) Экспорт
	
	Если ЗначениеЗаполнено(Счет) Тогда
		
		СвойстваСчета  = ПолучитьСвойстваСчета(Счет);

		УчетПоПодразделениям = СвойстваСчета.ВидСубконто1 = ПланыВидовХарактеристик.ВидыСубконтоТиповые.Подразделения
			ИЛИ СвойстваСчета.ВидСубконто2 = ПланыВидовХарактеристик.ВидыСубконтоТиповые.Подразделения
			ИЛИ СвойстваСчета.ВидСубконто3 = ПланыВидовХарактеристик.ВидыСубконтоТиповые.Подразделения;
			
	Иначе
			
		УчетПоПодразделениям = Истина;
		
	КонецЕсли;
		
	Возврат УчетПоПодразделениям;
	
КонецФункции

Функция НаСчетеВедетсяУчетПоРаботникамОрганизаций(Счет) Экспорт
	
	СвойстваСчета = ПолучитьСвойстваСчета(Счет);

	УчетПоРаботникамОрганизаций = СвойстваСчета.ВидСубконто1 = ПланыВидовХарактеристик.ВидыСубконтоТиповые.РаботникиОрганизаций
		ИЛИ СвойстваСчета.ВидСубконто2 = ПланыВидовХарактеристик.ВидыСубконтоТиповые.РаботникиОрганизаций
		ИЛИ СвойстваСчета.ВидСубконто3 = ПланыВидовХарактеристик.ВидыСубконтоТиповые.РаботникиОрганизаций;

	Возврат УчетПоРаботникамОрганизаций;
	
КонецФункции

Функция ПреобразоватьСчетаБУвСчетНУ(СтруктураДанных, Тип = "НУ", ССубконто = Ложь, Знач ДатаСреза = Неопределено) Экспорт

	Перем ТекстУсловий;
	
	Если ССубконто Тогда
		Результат = Новый Структура("Счет"+Тип+", Субконто"+Тип+"1,Субконто"+Тип+"2,Субконто"+Тип+"3");
	Иначе	
		Результат = ПланыСчетов.Налоговый.ПустаяСсылка();
	КонецЕсли;	
	
	Если НЕ Тип = "НУ" Тогда
		ТекстСообщения = НСтр("ru = 'Неверный тип преобразования счета БУ в счет НУ'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат Неопределено;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтруктураДанных) Тогда
		Возврат Результат;
	КонецЕсли;
	
	//если необходимо получать соответтсвие счета и субконто, то данные будем брать из регситра сведений
	//Соответствие счетов БУ и НУ
	Если ССубконто Тогда
		// наивысший приоритет у записи
		// в которой совпадают все измерения, далее по убывающий в порядке расположения измерений
		СтруктураИзмерений = Новый Структура("СчетБУ, СчетКоррБУ, СубконтоБУ1, СубконтоБУ2, СубконтоБУ3, ВидЗатратНУ",
		ПланыСчетов.Типовой.ПустаяСсылка(),
		ПланыСчетов.Типовой.ПустаяСсылка(),
		ПланыВидовХарактеристик.ВидыСубконтоТиповые.ПустаяСсылка(),
		ПланыВидовХарактеристик.ВидыСубконтоТиповые.ПустаяСсылка(),
		ПланыВидовХарактеристик.ВидыСубконтоТиповые.ПустаяСсылка(),
		Неопределено);
		
		Запрос = Новый Запрос();	
		
		ПовторяемыйФрагментТекстаНачало =  "
		|	СоответствиеСчетовБУиНУ.СчетБУ,
		|	СоответствиеСчетовБУиНУ.СчетКоррБУ,
		|	СоответствиеСчетовБУиНУ.СубконтоБУ1,
		|	СоответствиеСчетовБУиНУ.СубконтоБУ2,
		|	СоответствиеСчетовБУиНУ.СубконтоБУ3,
		|	СоответствиеСчетовБУиНУ.ВидЗатратНУ,
		|	СоответствиеСчетовБУиНУ.СчетНУ,
		|	СоответствиеСчетовБУиНУ.СубконтоНУ1,
		|	СоответствиеСчетовБУиНУ.СубконтоНУ2,
		|	СоответствиеСчетовБУиНУ.СубконтоНУ3
		|ИЗ
		|	РегистрСведений.СоответствиеСчетовБУиНУ.СрезПоследних(&ДатаСреза, ";
		ПовторяемыйФрагментТекстаКонец = ") КАК СоответствиеСчетовБУиНУ
		|ГДЕ
		|	СоответствиеСчетовБУиНУ.Учитывается";	
		
		Запрос.УстановитьПараметр("ДатаСреза", ДатаСреза);	
		Запрос.УстановитьПараметр("СписокПустыхЗначений", ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.СформироватьСписокПустыхСсылокТиповСубконто());	 
		// в регистре 5 измерений, соответственно
		// наивысший приоритет у записи
		// в которой совпадают все измерения, далее по убывающий в порядке расположения измерений
		// Запрос по Счету Дт
		Счетчик = СтруктураДанных.Количество();
		ТекстЗапроса = "";
		Пока Счетчик >=1 Цикл 		
			Если не ТекстЗапроса = "" Тогда 
				ТекстЗапроса = ТекстЗапроса + "
				|ОБЪЕДИНИТЬ ВСЕ ";
			КонецЕсли;		
			ТекстУсловия = "СчетБУ = &СчетБУ ";
			НомерПараметра = 0;		
			Для каждого ПолеСтруктуры из СтруктураИзмерений Цикл
				ПараметрЕстьВСтруктуреДанных = СтруктураДанных.Свойство(ПолеСтруктуры.Ключ);
				Если ПараметрЕстьВСтруктуреДанных Тогда				
					НомерПараметра = НомерПараметра + 1;
				КонецЕсли;			
				// если по данному полю задано значение отбора - ищем по нему, в противном случае ищем запись с пустым значением данного параметра
				ТекстУсловия = ТекстУсловия + Символы.ПС + "	И (" + ПолеСтруктуры.Ключ + " = &" + ?(ПараметрЕстьВСтруктуреДанных и НомерПараметра<=Счетчик, ПолеСтруктуры.Ключ,"Пустой" + ПолеСтруктуры.Ключ + " или " +  ПолеСтруктуры.Ключ +" = Неопределено или "+ ПолеСтруктуры.Ключ +" в (&СписокПустыхЗначений)") + ")";			
			КонецЦикла;						
			Счетчик = Счетчик - 1;
			ТекстЗапроса = ТекстЗапроса + ?(ТекстЗапроса = "", "ВЫБРАТЬ РАЗРЕШЕННЫЕ ","ВЫБРАТЬ " ) + ПовторяемыйФрагментТекстаНачало + ТекстУсловия + ПовторяемыйФрагментТекстаКонец;	
		КонецЦикла;	
		
		Если ТекстЗапроса = "" Тогда
			Возврат Результат
		КонецЕсли;	
		
		Запрос.Текст = ТекстЗапроса;
		
		// Установим параметры запроса
		Для каждого ПолеСтруктуры из СтруктураИзмерений Цикл
			Если СтруктураДанных.Свойство(ПолеСтруктуры.Ключ) Тогда
				Запрос.УстановитьПараметр(ПолеСтруктуры.Ключ, СтруктураДанных[ПолеСтруктуры.Ключ]);
			иначе
				Запрос.УстановитьПараметр(ПолеСтруктуры.Ключ, ПолеСтруктуры.Значение);
			КонецЕсли;	
			// установим пустой параметр
			Запрос.УстановитьПараметр("Пустой"+ПолеСтруктуры.Ключ, ПолеСтруктуры.Значение);		
		КонецЦикла;			
		
		РезультатВыполненияЗапроса = Запрос.Выполнить();
		
		Если НЕ РезультатВыполненияЗапроса.Пустой() Тогда 
			
			Выборка = РезультатВыполненияЗапроса.Выбрать();
						
			Если Выборка.Следующий() Тогда
				
				Результат = Новый Структура("Счет"+Тип+", Субконто"+Тип+"1,Субконто"+Тип+"2,Субконто"+Тип+"3");
				Результат.СчетНУ      = Выборка["Счет"     + Тип];
				Результат.СубконтоНУ1 = Выборка["Субконто" + Тип + "1"];
				Результат.СубконтоНУ2 = Выборка["Субконто" + Тип + "2"];
				Результат.СубконтоНУ3 = Выборка["Субконто" + Тип + "3"];
				
				Возврат Результат;	
				
			КонецЕсли;
		
		Иначе 
			//соответствие берется из плана счетов "Типовой"
			
			Запрос = Новый Запрос;
			Запрос.Текст =  "ВЫБРАТЬ
			|	Типовой.СчетНУ
			|ИЗ
			|	ПланСчетов.Типовой КАК Типовой
			|ГДЕ
			|	Типовой.Ссылка = &СчетБУ" ; 					
			
			// Установим параметры запроса
			Запрос.УстановитьПараметр("СчетБУ", СтруктураДанных.СчетБУ);
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда 		
				Результат = Новый Структура("Счет"+Тип+", Субконто"+Тип+"1,Субконто"+Тип+"2,Субконто"+Тип+"3");
				// возвращаем только счет
				Результат.СчетНУ = Выборка["Счет" + Тип];
				
				Возврат Результат; 			
				
			КонецЕсли; 
					
		КонецЕсли;
				
	Иначе  //соответствие только счета НУ - берется из плана счетов "Типовой"
		
		Запрос = Новый Запрос;
		Запрос.Текст =  "ВЫБРАТЬ
		|	Типовой.СчетНУ
		|ИЗ
		|	ПланСчетов.Типовой КАК Типовой
		|ГДЕ
		|	Типовой.Ссылка = &СчетБУ" ; 					
		
		// Установим параметры запроса
		Запрос.УстановитьПараметр("СчетБУ", СтруктураДанных.СчетБУ);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда 		
			Возврат Выборка["Счет" + Тип]; 			
		КонецЕсли; 
	КонецЕсли; 	
	
	Возврат Результат;

КонецФункции

Функция ОсобыйПорядокПереоценкиСчета(Счет) Экспорт
	
	Результат = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СчетаСОсобымПорядкомПереоценкиБУ.СпособПризнанияКурсовойРазницы
	|ИЗ
	|	РегистрСведений.СчетаСОсобымПорядкомПереоценкиБУ КАК СчетаСОсобымПорядкомПереоценкиБУ
	|ГДЕ
	|	СчетаСОсобымПорядкомПереоценкиБУ.Счет = &Счет";
	
	Запрос.УстановитьПараметр("Счет", Счет);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда 
		Результат = Выборка.СпособПризнанияКурсовойРазницы;
	КонецЕсли; 
	
	Возврат Результат;
	
КонецФункции

// Функция проверяет счет на его принадлежность к блоку производственных счетов
// 
// Параметры:
//  Счет - ПланСчетовСсылка.Типовой - счет, который необходимо проверить
//  СписокСчетовПроизводства - кешируемый перечень производственных счетов
//
Функция СчетЯвляетсяПроизводственным(Счет, СписокСчетовПроизводства = Неопределено) Экспорт
	
	Результат  = Ложь;
	Если СписокСчетовПроизводства = Неопределено Тогда
		// Если вызвать функцию ПолучитьСписокСчетовПроизводственногоУчета() напрямую, то результат функции не кэшируется
		СписокСчетовПроизводства = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСписокСчетовПроизводственногоУчета();
	КонецЕсли;
	
	Если СписокСчетовПроизводства.Найти(Счет) <> Неопределено Тогда		
		Результат  = Истина;			
	КонецЕсли;	 
	
	Возврат Результат
	
КонецФункции

// Функция проверяет счет на его принадлежность к блоку производственных счетов
// 
// Параметры:
//  Счет - ПланСчетовСсылка.Налоговый - счет, который необходимо проверить
//  СписокСчетовПроизводства - кешируемый перечень производственных счетов
//
Функция СчетЯвляетсяПроизводственнымНУ(Счет, СписокСчетовПроизводства = Неопределено) Экспорт
	
	Результат  = Ложь;
	Если СписокСчетовПроизводства = Неопределено Тогда
		// Если вызвать функцию ПолучитьСписокСчетовПроизводственногоУчетаНУ() напрямую, то результат функции не кэшируется
		СписокСчетовПроизводства = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСписокСчетовПроизводственногоУчетаНУ();
	КонецЕсли;
	
	Если СписокСчетовПроизводства.Найти(Счет) <> Неопределено Тогда		
		Результат  = Истина;			
	КонецЕсли;	 
	
	Возврат Результат
	
КонецФункции

// Функция проверяет счет на его принадлежность к блоку счетов учета внеоборотных активов
// 
// Параметры:
//  Счет - ПланСчетовСсылка.Налоговый - счет, который необходимо проверить
//  СписокСчетовВА - Массив - список счетов учета внеоборотных активов (необязательный)
//
Функция СчетЯвляетсяВАНУ(Счет, СписокСчетовВА = Неопределено) Экспорт
	
	Результат = Ложь;
	Если СписокСчетовВА = Неопределено Тогда
		// Если вызвать функцию ПолучитьСписокСчетовВАУчетаНУ() напрямую, то результат функции не кэшируется
		СписокСчетовВА = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСписокСчетовВАУчетаНУ();
	КонецЕсли;
	
	Если СписокСчетовВА.Найти(Счет) <> Неопределено Тогда		
		Результат = Истина;			
	КонецЕсли;	 
	
	Возврат Результат;
	
КонецФункции

// Функция возвращает счета доходов и расходов для отражения курсовой разницы при переоценке
// валютных счетов бухгалтерского учета.
//
// Параметры:
//  Организация - СправочникСсылка.Организации - организация, по которой определяются счета учета
//  Счет - ПланСчетовСсылка.Типовой - счет, по которому производится переоценка валюты
//  ПодразделениеДляРеглОпераций - СправочникСсылка.ПодразделенияОрганизаций - подразделение для отражения курсовой разницы
//
// Возвращаемое значение:
//  Структура - структура, содержащая счета отражения доходов и расходов по курсовой разницы
// 
Функция ПолучитьСчетаОтраженияКурсовойРазницы(Организация = Неопределено, Счет = Неопределено, ПодразделениеДляРеглОпераций = Неопределено) Экспорт
	
	ПустойСчетБУ = ПланыСчетов.Типовой.ПустаяСсылка();
	ПустойСчетНУ = ПланыСчетов.Налоговый.ПустаяСсылка();
	
	СтруктураВозврата = Новый Структура("
							|СчетДоходовБУ, СубконтоДоходовБУ1, СубконтоДоходовБУ2, СубконтоДоходовБУ3,
							|СчетДоходовНУ, СубконтоДоходовНУ1, СубконтоДоходовНУ2, СубконтоДоходовНУ3,
							|СчетРасходовБУ, СубконтоРасходовБУ1, СубконтоРасходовБУ2, СубконтоРасходовБУ3,
							|СчетРасходовНУ, СубконтоРасходовНУ1, СубконтоРасходовНУ2, СубконтоРасходовНУ3",
							ПустойСчетБУ, Неопределено, Неопределено, Неопределено, 
							ПустойСчетНУ, Неопределено, Неопределено, Неопределено, 
							ПустойСчетБУ, Неопределено, Неопределено, Неопределено, 
							ПустойСчетНУ, Неопределено, Неопределено, Неопределено);
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ПустаяОрганизация", Справочники.Организации.ПустаяСсылка());
	Запрос.УстановитьПараметр("Счет", Счет);
	Запрос.УстановитьПараметр("ПустойСчет", ПустойСчетБУ);
	
		
	СписокГрупп = Новый Массив;
	Если не Счет = Неопределено и не Счет.Пустая() Тогда
		СписокГрупп = ОбщегоНазначенияБКВызовСервера.ПолучитьСписокВышестоящихГрупп(Счет);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("СписокГруппСчетов", СписокГрупп);
	// Система расчета приоритетов записей запроса:
	// 1 			- соответствуют организация и счет
	// 2 ... N +1  	- соответствует организация, выбранный счет - являетс субсчетом счета-группы в записи(Где N - количество вышестоящих счетов-групп) 
	// N + 2		- соответствует организация, счет не выбран
	// N + 3 		- организация не выбрана, счет соответствует
	// N + 4... 3 + 2*N  -  организация не выбрана, выбранный счет - является субсчетом счета-группы в записи(Где N - количество вышестоящих счетов-групп) 
	// 4 + 2*N  	-  организация не выбрана, счет  не выбран 
	    	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	СпособыОтраженияКурсовойРазницы.СчетДоходовБУ,
	               |	СпособыОтраженияКурсовойРазницы.СубконтоДоходовБУ1,
	               |	СпособыОтраженияКурсовойРазницы.СубконтоДоходовБУ2,
	               |	СпособыОтраженияКурсовойРазницы.СубконтоДоходовБУ3,
	               |	СпособыОтраженияКурсовойРазницы.СчетРасходовБУ,
	               |	СпособыОтраженияКурсовойРазницы.СубконтоРасходовБУ1,
	               |	СпособыОтраженияКурсовойРазницы.СубконтоРасходовБУ2,
	               |	СпособыОтраженияКурсовойРазницы.СубконтоРасходовБУ3,
	               |	СпособыОтраженияКурсовойРазницы.СчетДоходовНУ,
	               |	СпособыОтраженияКурсовойРазницы.СубконтоДоходовНУ1,
	               |	СпособыОтраженияКурсовойРазницы.СубконтоДоходовНУ2,
	               |	СпособыОтраженияКурсовойРазницы.СубконтоДоходовНУ3,
	               |	СпособыОтраженияКурсовойРазницы.СчетРасходовНУ,
	               |	СпособыОтраженияКурсовойРазницы.СубконтоРасходовНУ1,
	               |	СпособыОтраженияКурсовойРазницы.СубконтоРасходовНУ2,
	               |	СпособыОтраженияКурсовойРазницы.СубконтоРасходовНУ3,
	               |	ВЫБОР
	               |		КОГДА СпособыОтраженияКурсовойРазницы.Организация = &Организация
	               |				И СпособыОтраженияКурсовойРазницы.Счет = &Счет
	               |			ТОГДА 1 ";
   Индекс = 0;
   
   // приоритеты для записей счетов-групп, родителей выбранного элемента
   КоличествоГруппСчетов = СписокГрупп.Количество(); 
   Для каждого Элемент Из СписокГрупп Цикл
	   // приоритеты для записей с заполненной организацией
	   	Индекс = Индекс + 1;
	   	ИмяПараметра = "ГруппаСчетов" + Индекс;
		Запрос.УстановитьПараметр(ИмяПараметра, Элемент);
		Запрос.Текст = Запрос.Текст + "
					|		КОГДА СпособыОтраженияКурсовойРазницы.Организация = &Организация
	                |				И СпособыОтраженияКурсовойРазницы.Счет = &" + ИмяПараметра +"
	                |			ТОГДА " + Строка(Индекс +1);
					
					// приоритеты для записей с заполненной организацией
		Запрос.Текст = Запрос.Текст + "
					|		КОГДА СпособыОтраженияКурсовойРазницы.Организация = &ПустаяОрганизация
	                |				И СпособыОтраженияКурсовойРазницы.Счет = &" + ИмяПараметра +"
	                |			ТОГДА " + Строка(Индекс +3);
	КонецЦикла;	   					   
	// остальные вариации			
	Запрос.Текст = Запрос.Текст + "
					|	            
	                |		КОГДА СпособыОтраженияКурсовойРазницы.Организация = &Организация
	                |				И СпособыОтраженияКурсовойРазницы.Счет = &ПустойСчет
	                |			ТОГДА " + Строка(2 + КоличествоГруппСчетов)+ "
	                |		КОГДА СпособыОтраженияКурсовойРазницы.Организация = &ПустаяОрганизация
	                |				И СпособыОтраженияКурсовойРазницы.Счет = &Счет
	                |			ТОГДА " + Строка(3 + КоличествоГруппСчетов)+ "	                
	                |		КОГДА СпособыОтраженияКурсовойРазницы.Организация = &ПустаяОрганизация
	                |				И СпособыОтраженияКурсовойРазницы.Счет = &ПустойСчет
	                |			ТОГДА " + Строка(4 + КоличествоГруппСчетов*2)+ "					
	                |	КОНЕЦ КАК Приоритет
	                |ИЗ
	                |	РегистрСведений.СпособыОтраженияКурсовойРазницы КАК СпособыОтраженияКурсовойРазницы
	                |ГДЕ
	                |	(СпособыОтраженияКурсовойРазницы.Организация = &Организация
	                |			ИЛИ СпособыОтраженияКурсовойРазницы.Организация = &ПустаяОрганизация)
	                |	И (СпособыОтраженияКурсовойРазницы.Счет =&Счет
					|			ИЛИ СпособыОтраженияКурсовойРазницы.Счет в (&СписокГруппСчетов)
	                |			ИЛИ СпособыОтраженияКурсовойРазницы.Счет = &ПустойСчет)
	                |
	                |УПОРЯДОЧИТЬ ПО
	                |	Приоритет";
					
	Результат = Запрос.Выполнить();
				
	Если НЕ Результат.Пустой() Тогда		
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Для Каждого КлючИЗначение из СтруктураВозврата Цикл
			СтруктураВозврата[КлючИЗначение.Ключ]= Выборка[КлючИЗначение.Ключ];
		КонецЦикла;	             
		
	КонецЕсли;
	
	// Установка значений по умолчанию	
	Если СтруктураВозврата.СчетДоходовБУ.Пустая() Тогда
		СтруктураВозврата.СчетДоходовБУ 		= ПланыСчетов.Типовой.ДоходыОтКурсовойРазницы;
		СтруктураВозврата.СубконтоДоходовБУ1 	= Справочники.Доходы.КурсовыеРазницы;
		
		Для Каждого Субконто ИЗ СтруктураВозврата.СчетДоходовБУ.ВидыСубконто Цикл
			Если Субконто.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоТиповые.Подразделения Тогда
				Если Субконто.НомерСтроки = 2 Тогда
					СтруктураВозврата.СубконтоДоходовБУ2 = ПодразделениеДляРеглОпераций;
				ИначеЕсли Субконто.НомерСтроки = 3 Тогда
					СтруктураВозврата.СубконтоДоходовБУ3 = ПодразделениеДляРеглОпераций;
				КонецЕсли;
			КонецЕсли;	
		КонецЦикла;	
		
	КонецЕсли;	
	
	Если СтруктураВозврата.СчетДоходовНУ.Пустая() Тогда
		СтруктураВозврата.СчетДоходовНУ 		= ПланыСчетов.Налоговый.ДоходОтКурсовойРазницы;
		СтруктураВозврата.СубконтоДоходовНУ1 	= Справочники.Доходы.КурсовыеРазницы;
	КонецЕсли;	
	
	Если СтруктураВозврата.СчетРасходовБУ.Пустая() Тогда
		СтруктураВозврата.СчетРасходовБУ 		= ПланыСчетов.Типовой.РасходыПоКурсовойРазнице;
		СтруктураВозврата.СубконтоРасходовБУ1 	= Справочники.СтатьиЗатрат.КурсовыеРазницы;
		
		Для Каждого Субконто ИЗ СтруктураВозврата.СчетРасходовБУ.ВидыСубконто Цикл
			Если Субконто.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоТиповые.Подразделения Тогда
				Если Субконто.НомерСтроки = 2 Тогда
					СтруктураВозврата.СубконтоРасходовБУ2 = ПодразделениеДляРеглОпераций;
				ИначеЕсли Субконто.НомерСтроки = 3 Тогда
					СтруктураВозврата.СубконтоРасходовБУ3 = ПодразделениеДляРеглОпераций;
				КонецЕсли;
			КонецЕсли;	
		КонецЦикла;	
	КонецЕсли;	
	
	Если СтруктураВозврата.СчетРасходовНУ.Пустая() Тогда
		СтруктураВозврата.СчетРасходовНУ 		= ПланыСчетов.Налоговый.РасходыПоКурсовойРазнице;
		СтруктураВозврата.СубконтоРасходовНУ1 	= Справочники.СтатьиЗатрат.КурсовыеРазницы;
	КонецЕсли;			                
    	
	Возврат СтруктураВозврата;
	
КонецФункции

// Функция возвращает массив счетов, которые необходимо регламентно переоценивать.
// 
// Параметры:
//	РегламентнаяОперация - Булево - признак переоценки счетов в рамках регламентной операции
//
Функция СчетаПодлежащиеПереоценке(РегламентнаяОперация = Ложь) Экспорт
	
	// Валютные счета, подлежащие переоценке
	// Все балансовые валютные счета
	// Счета, переоцениваемые в особом порядке, исключаются
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Типовой.Ссылка КАК Счет
	|ИЗ
	|	ПланСчетов.Типовой КАК Типовой
	|ГДЕ
	|	Типовой.Валютный
	|	И НЕ Типовой.Забалансовый
	|	И НЕ Типовой.Ссылка В
	|				(ВЫБРАТЬ
	|					СчетаСОсобымПорядкомПереоценки.Счет
	|				ИЗ
	|					РегистрСведений.СчетаСОсобымПорядкомПереоценкиБУ КАК СчетаСОсобымПорядкомПереоценки
	|				ГДЕ
	|					(СчетаСОсобымПорядкомПереоценки.Счет ЕСТЬ NULL 
	|						ИЛИ СчетаСОсобымПорядкомПереоценки.СпособПризнанияКурсовойРазницы В (&СпособПризнанияКурсовойРазницы)))";
	
	СпособПризнанияКурсовойРазницы = Новый Массив;						
	Если РегламентнаяОперация Тогда
		СпособПризнанияКурсовойРазницы.Добавить(Перечисления.СпособыПризнанияКурсовойРазницы.Регламентно);		 
		СпособПризнанияКурсовойРазницы.Добавить(Перечисления.СпособыПризнанияКурсовойРазницы.ПоОперациямПриПогашении);		 
	Иначе
		СпособПризнанияКурсовойРазницы.Добавить(Перечисления.СпособыПризнанияКурсовойРазницы.ПоОперациям);
		СпособПризнанияКурсовойРазницы.Добавить(Перечисления.СпособыПризнанияКурсовойРазницы.ПоОперациямПриПогашении);	
	КонецЕсли;
	
	Запрос.УстановитьПараметр("СпособПризнанияКурсовойРазницы", СпособПризнанияКурсовойРазницы);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Счет");

КонецФункции

Функция ОпределитьСчетЗатратНЗП(ПрефиксУчета = "БУ", СчетПроизводства)
	
	СписокСоответствийСчетов = ПолучитьСписокСчетовНЗП(ПрефиксУчета);
	
	СчетНЗП = СписокСоответствийСчетов[СчетПроизводства];
	
	Если СчетНЗП = Неопределено Тогда
		Если ПрефиксУчета = "БУ"   Тогда
			СчетНЗП = ПланыСчетов.Типовой.НезавершенноеПроизводство_ОсновноеПроизводство;
		Иначе
			СчетНЗП = ПланыСчетов.Налоговый.НезавершенноеПроизводство_ОсновноеПроизводство;
		КонецЕсли;
	КонецЕсли;	
	
	Возврат СчетНЗП;
	
КонецФункции

// Функция возвращает соответствие счетов НЗП для всех возможных счетов производственного учета
//
// Параметры:
//  ПрефиксУчета - Строка - префикс учета, для которого необходимо заполнить соответствие счетов
//
Функция ЗаполнитьСоответствиеСчетовБУСчетамНЗП(ПрефиксУчета = "БУ") Экспорт

	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	СоответствиеСчетовПроизводстваСчетамНезавершенногоПроизводства.СчетЗатрат"+ПрефиксУчета+",
	               |	СоответствиеСчетовПроизводстваСчетамНезавершенногоПроизводства.СчетНЗП"+ПрефиксУчета+"
	               |ИЗ
	               |	РегистрСведений.СоответствиеСчетовПроизводстваСчетамНезавершенногоПроизводства КАК СоответствиеСчетовПроизводстваСчетамНезавершенногоПроизводства";
				   
	ТаблицаСоответствий = Запрос.Выполнить().Выгрузить();
	
	ОбщегоНазначенияБКВызовСервера.ДобавитьКолонкуВТаблицуЗначений(ТаблицаСоответствий, "СчетЗатратПоУмолчанию"+ПрефиксУчета);
	
	Если  ПрефиксУчета = "БУ" Тогда
		СписокСчетовПроизводства = ПолучитьСписокСчетовПроизводственногоУчета();
	Иначе
		СписокСчетовПроизводства = ПолучитьСписокСчетовПроизводственногоУчетаНУ();
	КонецЕсли;
	
	Для Инд = 0 По СписокСчетовПроизводства.Количество() -1 Цикл
		СтрокаСоответствия = ТаблицаСоответствий.Найти(СписокСчетовПроизводства[Инд], "СчетЗатрат"+ПрефиксУчета+"");
		
		Если СтрокаСоответствия <> Неопределено Тогда
			СтрокаСоответствия["СчетЗатратПоУмолчанию"+ПрефиксУчета] = ОпределитьСчетЗатратНЗП(ПрефиксУчета, СписокСчетовПроизводства[Инд]);
		Иначе
			НоваяСтрока = ТаблицаСоответствий.Добавить();
			НоваяСтрока["СчетЗатрат"+ПрефиксУчета] = СписокСчетовПроизводства[Инд];
			НоваяСтрока["СчетЗатратПоУмолчанию"+ПрефиксУчета] = ОпределитьСчетЗатратНЗП(ПрефиксУчета, СписокСчетовПроизводства[Инд]);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаСоответствий;

КонецФункции

Функция ОпределитьСчетНЗП(СчетЗатрат, ПрефиксУчета = "БУ")  Экспорт
	
	ТаблицаСоотвествийСчетов = ЗаполнитьСоответствиеСчетовБУСчетамНЗП(ПрефиксУчета);
	
	СтрокаСчета = ТаблицаСоотвествийСчетов.Найти(СчетЗатрат, "СчетЗатрат"+ПрефиксУчета);
	
	Если СтрокаСчета <> Неопределено Тогда
		СчетНЗП = ?(ЗначениеЗаполнено(СтрокаСчета["СчетНЗП"+ПрефиксУчета]),СтрокаСчета["СчетНЗП"+ПрефиксУчета], СтрокаСчета["СчетЗатратПоУмолчанию"+ПрефиксУчета]); 
	Иначе
		СчетНЗП = ПланыСчетов.Типовой.НезавершенноеПроизводство_ОсновноеПроизводство;
	КонецЕсли;	
	
	Возврат СчетНЗП;
	
КонецФункции

// Формируется список счетов учета номенклатуры
//
// Параметры:
//  ПрефиксУчета - Строка - префикс учета, для которого необходимо получить список счетов
//
Функция ПолучитьСписокСчетовУчетаТМЗ(ПрефиксУчета = "БУ") Экспорт
	
	Если ПрефиксУчета = "НУ" Тогда
		ИмяПланаСчетов = "Налоговый";
	Иначе 		
		ИмяПланаСчетов = "Типовой";
	КонецЕсли;
	
	СписокСчетов = Новый Массив;
	СписокСчетов.Добавить(ПланыСчетов[ИмяПланаСчетов].СырьеИМатериалы);
	СписокСчетов.Добавить(ПланыСчетов[ИмяПланаСчетов].ГотоваяПродукция);
	СписокСчетов.Добавить(ПланыСчетов[ИмяПланаСчетов].Товары);
	СписокСчетов.Добавить(ПланыСчетов[ИмяПланаСчетов].ПроизводствоИзДавальческогоСырья);
	СписокСчетов.Добавить(ПланыСчетов[ИмяПланаСчетов].ПрочиеЗапасы);		
	
	Возврат СписокСчетов;
	
КонецФункции
           
// Формируется список счетов на которых ведутся расчеты с контрагентами.
//
Функция ПолучитьСписокСчетовРасчетов() Экспорт

	СписокСчетов= Новый Массив;
	СписокСчетов.Добавить(ПланыСчетов.Типовой.КраткосрочнаяДебиторскаяЗадолженность);
	СписокСчетов.Добавить(ПланыСчетов.Типовой.ДолгосрочнаяДебиторскаяЗадолженность);
	СписокСчетов.Добавить(ПланыСчетов.Типовой.КраткосрочнаяКредиторскаяЗадолженность);
	СписокСчетов.Добавить(ПланыСчетов.Типовой.ДолгосрочнаяКредиторскаяЗадолженность);
	СписокСчетов.Добавить(ПланыСчетов.Типовой.СебестоимостьРеализованнойПродукцииИОказанныхУслуг_);
	СписокСчетов.Добавить(ПланыСчетов.Типовой.РасходыПоРеализацииПродукцииИОказаниюУслуг_);
	СписокСчетов.Добавить(ПланыСчетов.Типовой.АдминистративныеРасходы_);
	
	Возврат СписокСчетов;

КонецФункции

//Формирует список счетов у которых в зависимости от пармаметра настройки учета "Вести учет по сотрудникам" отключаеться / включаеться аналитика Работники организаций
Функция ПолучитьСписокСчетовСОтключаемойАналитикойРаботникиОрганизации() Экспорт
	
	// инициализация списка счетов, на которых можно устанавливать дополнительную аналитику "Работники организации"
	СчетаЗП = Новый СписокЗначений;
	
	// счета кредиторской задолженности
	СчетаЗП.Добавить(ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПоОплатеТруда); //3350
	СчетаЗП.Добавить(ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПоДепонированнойЗаработнойПлате); //3394
	СчетаЗП.Добавить(ПланыСчетов.Типовой.ОбязательстваПоСоциальномуСтрахованию); //3211
	СчетаЗП.Добавить(ПланыСчетов.Типовой.ОбязательстваПоВзносамОСМС); //3212
	СчетаЗП.Добавить(ПланыСчетов.Типовой.ОбязательстваПоОтчислениямОСМС); //3213
	СчетаЗП.Добавить(ПланыСчетов.Типовой.ОбязательстваПоПенсионнымОтчислениям); //3220
	СчетаЗП.Добавить(ПланыСчетов.Типовой.КраткосрочныеОценочныеОбязательстваПоВознаграждениямРаботникам); //3430
	СчетаЗП.Добавить(ПланыСчетов.Налоговый.КраткосрочныеОценочныеОбязательстваПоВознаграждениямРаботникам); //3430Н
	СчетаЗП.Добавить(ПланыСчетов.Типовой.ДолгосрочнаяЗадолженностьПоДепонированнойЗаработнойПлате); //4174
	СчетаЗП.Добавить(ПланыСчетов.Типовой.ДолгосрочныеОценочныеОбязательстваПоВознаграждениямРаботникам); //4230
	СчетаЗП.Добавить(ПланыСчетов.Типовой.ОбязательстваПоЕдиномуПлатежу); //3231
	
	// счета дебиторской задолженности
	СчетаЗП.Добавить(ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПоВыплаченнойЗаработнойПлате); //1252
	СчетаЗП.Добавить(ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПоПредоставленнымРаботникамЗаймам); //1253
	СчетаЗП.Добавить(ПланыСчетов.Типовой.ПрочаяКраткосрочнаяЗадолженностьРаботников); //1254
	СчетаЗП.Добавить(ПланыСчетов.Типовой.КраткосрочныеВознагражденияКПолучениюРаботникам); //1272
	СчетаЗП.Добавить(ПланыСчетов.Типовой.ДолгосрочнаяЗадолженностьПоВыплаченнойЗаработнойПлате); //2152
	СчетаЗП.Добавить(ПланыСчетов.Налоговый.ВзаиморасчетыСРаботниками); //3350Н (Н460)
	СчетаЗП.Добавить(ПланыСчетов.Налоговый.ОбязательстваПоСоциальномуСтрахованию); // 3211Н
	СчетаЗП.Добавить(ПланыСчетов.Налоговый.ОбязательстваПоВзносамОСМС); // 3212Н
	СчетаЗП.Добавить(ПланыСчетов.Налоговый.ОбязательстваПоОтчислениямОСМС); // 3213Н
	СчетаЗП.Добавить(ПланыСчетов.Налоговый.ОбязательстваПоПенсионнымОтчислениям);  // 3220Н
	СчетаЗП.Добавить(ПланыСчетов.Налоговый.ОбязательстваПоЕдиномуПлатежу); //3231Н
	
	// счета учета ОПВР
	СчетаЗП.Добавить(ПланыСчетов.Типовой.ОбязательстваПоОбязательнымПенсионнымВзносамРаботодателя);  // 3250
	СчетаЗП.Добавить(ПланыСчетов.Налоговый.ОбязательстваПоОбязательнымПенсионнымВзносамРаботодателя);  // 3250Н

	//не забудьте проверить список счетов с постоянной аналитикой Работники организации ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСписокСчетовСпостояннойАналитикойРаботникиОрганизации()
	
	Возврат СчетаЗП;
КонецФункции	

#Область ИспользованиеОднойНоменклатурнойГруппы

// Функция возвращает признак использования одной номенклатурной группы.
//
Функция ИспользоватьОднуНоменклатурнуюГруппу() Экспорт

	Возврат Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоНоменклатурныхГрупп") 
		И ЗначениеЗаполнено(ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ОсновнаяНоменклатурнаяГруппа());

КонецФункции

// Функция получает единственную номенклатурную группу.
//
// Возвращаемое значение:
//		Основная номенклатурная группа - Тип НоменклатурныеГруппы, если ничего не найдено, то возвращается пустая ссылка.
Функция ОсновнаяНоменклатурнаяГруппа() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 2
	|	НоменклатурныеГруппы.Ссылка
	|ИЗ
	|	Справочник.НоменклатурныеГруппы КАК НоменклатурныеГруппы
	|ГДЕ
	|	НЕ НоменклатурныеГруппы.ПометкаУдаления
	|	И НЕ НоменклатурныеГруппы.ЭтоГруппа";
	Выборка = Запрос.Выполнить().Выбрать();
	// Если опция ВестиУчетПоНесколькимНоменклатурнымГруппам выключена, но номенклатурная группа одна,
	// то все равно подставляем эту номенклатурную группу.
	Если Выборка.Количество() = 1 Тогда
		Выборка.Следующий();
		ОсновнаяНоменклатурнаяГруппа = Выборка.Ссылка;
	Иначе
		ОсновнаяНоменклатурнаяГруппа = Справочники.НоменклатурныеГруппы.ПустаяСсылка();
	КонецЕсли;
	
	Возврат ОсновнаяНоменклатурнаяГруппа;

КонецФункции

#КонецОбласти

#Область ИспользованиеОдногоСклада

Функция ИспользуетсяНесколькоСкладов() Экспорт

	Возврат Справочники.Склады.ИспользуетсяНесколькоСкладов();

КонецФункции

Функция ПолучитьСкладПоУмолчанию() Экспорт

	Возврат Справочники.Склады.ПолучитьСкладПоУмолчанию();

КонецФункции

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция ПолучитьСписокСчетовПроизводственногоУчета() Экспорт
	                               	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	Типовой.Ссылка КАК Счет
	                      |ИЗ
	                      |	ПланСчетов.Типовой КАК Типовой
	                      |ГДЕ
	                      |	(Типовой.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Типовой.ОсновноеПроизводство_),
	                      |								ЗНАЧЕНИЕ(ПланСчетов.Типовой.ПолуфабрикатыСобственногоПроизводства_),
	                      |								ЗНАЧЕНИЕ(ПланСчетов.Типовой.ВспомогательныеПроизводства_),
	                      |								ЗНАЧЕНИЕ(ПланСчетов.Типовой.НакладныеРасходы_)))");
						  
	Результат = Запрос.Выполнить();					  
	Если Не Результат.Пустой()Тогда
		Возврат Результат.Выгрузить().ВыгрузитьКолонку("Счет");
	Иначе
		Возврат Новый Массив;
	КонецЕсли;
							  
КонецФункции

Функция ПолучитьСписокСчетовПроизводственногоУчетаНУ() Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	Налоговый.Ссылка КАК Счет
	                      |ИЗ
	                      |	ПланСчетов.Налоговый КАК Налоговый
	                      |ГДЕ
	                      |	(Налоговый.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ОсновноеПроизводство_),
	                      |								  ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ПолуфабрикатыСобственногоПроизводства),
	                      |								  ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ВспомогательныеПроизводства),
	                      |								  ЗНАЧЕНИЕ(ПланСчетов.Налоговый.НакладныеРасходы)))");
						  
	Результат = Запрос.Выполнить();					  
	Если Не Результат.Пустой()Тогда
		Возврат Результат.Выгрузить().ВыгрузитьКолонку("Счет");
	Иначе
		Возврат Новый Массив;
	КонецЕсли;
							  
КонецФункции

Функция ПолучитьСписокСчетовВАУчетаНУ() Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	Налоговый.Ссылка КАК Счет
	                      |ИЗ
	                      |	ПланСчетов.Налоговый КАК Налоговый
	                      |ГДЕ
	                      |	(Налоговый.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ВАПодлежащиеАмортизации), 
						  |								  ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ВАНеПодлежащиеАмортизации), 
						  |								  ЗНАЧЕНИЕ(ПланСчетов.Налоговый.НезавершенноеСтроительство), 
						  |								  ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ПреренцииДоВводаВЭксплуатацию)))");
						  
	Результат = Запрос.Выполнить();					  
	Если Не Результат.Пустой()Тогда
		Возврат Результат.Выгрузить().ВыгрузитьКолонку("Счет");
	Иначе
		Возврат Новый Массив;
	КонецЕсли;
							  
КонецФункции

Функция ПолучитьСписокСчетовУчетаВА() Экспорт
	
	Счета = Новый СписокЗначений();
	Счета.Добавить("ДолгосрочныеАктивыДляПродажи_");
	Счета.Добавить("ДолгосрочныеАктивыДляПродажи");
	Счета.Добавить("ГруппаНаВыбытиеДляПродажи");

	Счета.Добавить("ИнвестицииВНедвижимость_");
	Счета.Добавить("ИнвестицииВНедвижимость");
	Счета.Добавить("АмортизацияИнвестицийВНедвижимость");
	Счета.Добавить("УбытокОтОбесцененияИнвестицийВНедвижимость");
	Счета.Добавить("ОсновныеСредства_");
	Счета.Добавить("ОсновныеСредства");
	Счета.Добавить("АмортизацияОсновныхСредств");
	Счета.Добавить("УбытокОтОбесцененияОсновныхСредств");

	//Счета.Добавить("НематериальныеАктивы");
	//Счета.Добавить("Гудвилл");
	//Счета.Добавить("ОбесценениеГудвилла");
	//Счета.Добавить("ПрочиеНематериальныеАктивы");
	//Счета.Добавить("АмортизацияПрочихНематериальныхАктивов");
	//Счета.Добавить("УбытокОтОбесцененияПрочихНематериальныхАктивов");
	
	Возврат Счета;
	
КонецФункции	

Функция ПолучитьСписокСчетовНЗП(ПрефиксУчета = "БУ")
	
	СписокСоответствийСчетов = Новый Соответствие();
	
	Если ПрефиксУчета = "БУ"  Тогда
		СписокСоответствийСчетов.Вставить(ПланыСчетов.Типовой.ОсновноеПроизводство, 
		ПланыСчетов.Типовой.НезавершенноеПроизводство_ОсновноеПроизводство);
		СписокСоответствийСчетов.Вставить(ПланыСчетов.Типовой.ПолуфабрикатыСобственногоПроизводства, 
		ПланыСчетов.Типовой.НезавершенноеПроизводство_ПолуфабрикатыСобственногоПроизводства);
		СписокСоответствийСчетов.Вставить(ПланыСчетов.Типовой.ВспомогательныеПроизводства, 
		ПланыСчетов.Типовой.НезавершенноеПроизводство_ВспомогательныеПроизводства);
	Иначе
		СписокСоответствийСчетов.Вставить(ПланыСчетов.Налоговый.ОсновноеПроизводство, 
		ПланыСчетов.Налоговый.НезавершенноеПроизводство_ОсновноеПроизводство);
		СписокСоответствийСчетов.Вставить(ПланыСчетов.Налоговый.ПолуфабрикатыСобственногоПроизводства, 
		ПланыСчетов.Налоговый.НезавершенноеПроизводство_ПолуфабрикатыСобственногоПроизводства);
		СписокСоответствийСчетов.Вставить(ПланыСчетов.Налоговый.ВспомогательныеПроизводства, 
		ПланыСчетов.Налоговый.НезавершенноеПроизводство_ВспомогательныеПроизводства);
	КонецЕсли;
	
	Возврат  СписокСоответствийСчетов;
	
КонецФункции
	
//Функция возвращает типы значений субконто, связанных с именами реквизитов.
//
// Возвращаемое значение:
//   Соответствие   - ключ - имя реквизита, значение - описание типов связанных значений субконто.
//
Функция ВсеТипыСвязанныхСубконто() Экспорт
	
	СвязанныеСубконто = Новый Соответствие;
	
	ПроцедурыБухгалтерскогоУчета.УстановитьТипыСвязанныхСубконто(СвязанныеСубконто);
	
	СвязанныеСубконто.Вставить("Организация", ПроцедурыБухгалтерскогоУчета.ТипыСвязанныеСОрганизацией());
	
	Возврат СвязанныеСубконто;
	
КонецФункции

