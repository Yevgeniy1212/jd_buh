////////////////////////////////////////////////////////////////////////////////
// УправлениеЦенообразованием: 
//  
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Функция возвращает цену компании для требуемой номенклатуры в указанном типе цен , 
// на заданную дату, за заданную единицу измерения, пересчитанную в требуемую валюту по заданному курсу.
//
// Параметры: 
//  Номенклатура         - ссылка на элемент справочника "Номенклатура", для которого надо получить цену,
//  ТипЦен               - ссылка на элемент справочника "Типы цен", определяет цену какого типа надо получить,
//  Дата                 - дата, на которую надо получить цену, если не заполнено, то берется рабочая дата
//  ЕдиницаИзмерения     - ссылка на элемент справочника "Единицы измерения", определяет для какой единицы надо получить 
//                         цену, если не заполнен, то заполняется единицей цены
//  Валюта               - ссылка на элемент справочника "Валюты", определяет валюту. в которой надо вернуть цену,
//                         если не заполнен, то заполняется валютой цены
//  Курс                 - число, курс требуемой валюты, если не заполнен, берется курс из регистра 
//                         сведений "Курсы валют",
//  Кратность            - число, кратность требуемой валюты, если не заполнена, берется курс из регистра 
//                         сведений "Курсы валют",
//
// Возвращаемое значение:
//  Число, рассчитанное значение цены.
//
Функция ПолучитьЦенуНоменклатуры(Номенклатура, ТипЦен, Дата, Валюта = Неопределено, Курс = 0, Кратность = 1, Организация) Экспорт

	Если Не ЗначениеЗаполнено(Организация) Тогда
		Возврат 0;
	КонецЕсли;
	
	ПолученнаяЦена = 0;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата",         Дата);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("ТипЦен",       ТипЦен);
	Запрос.УстановитьПараметр("Организация",  Организация);
	
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЦеныНоменклатуры.Цена,
	|	ЦеныНоменклатуры.Валюта
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&Дата, Номенклатура = &Номенклатура И ТипЦен = &ТипЦен И Организация = &Организация) КАК ЦеныНоменклатуры";

	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ПолученнаяЦена = Выборка.Цена;
		ВалютаЦены     = Выборка.Валюта;
	КонецЕсли;

	Если НЕ (ВалютаЦены = Валюта) И НЕ (Валюта = Неопределено) И НЕ (ВалютаЦены = Неопределено) Тогда

		СтруктураКурсаЦены = ОбщегоНазначенияБК.ПолучитьКурсВалюты(ВалютаЦены, Дата);
		ПолученнаяЦена     = ОбщегоНазначенияБККлиентСервер.ПересчитатьИзВалютыВВалюту(
			ПолученнаяЦена, ВалютаЦены, Валюта, 
		    СтруктураКурсаЦены.Курс, Курс, 
		    СтруктураКурсаЦены.Кратность, Кратность);

	ИначеЕсли Валюта = Неопределено Тогда
		Валюта = ВалютаЦены;
	КонецЕсли;

	Возврат ПолученнаяЦена;

КонецФункции // ПолучитьЦенуНоменклатуры()

Функция ПолучитьЦенуПоДокументам(Номенклатура, СпособЗаполненияЦены, Дата, Валюта = Неопределено, Курс = 0, Кратность = 1) Экспорт
	
	ОписаниеЦены = Новый Структура;
	ОписаниеЦены.Вставить("Цена",            0);
	ОписаниеЦены.Вставить("ЦенаВключаетНДС", Ложь);
	
	Если Не ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ЦеныНоменклатурыДокументов) Тогда
		Возврат ОписаниеЦены;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Номенклатура",     	  Номенклатура);
	Запрос.УстановитьПараметр("СпособЗаполненияЦены", СпособЗаполненияЦены);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЦеныНоменклатурыДокументов.Цена КАК Цена,
	|	ЦеныНоменклатурыДокументов.Валюта КАК Валюта,
	|	ЦеныНоменклатурыДокументов.ЦенаВключаетНДС КАК ЦенаВключаетНДС
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатурыДокументов КАК ЦеныНоменклатурыДокументов
	|ГДЕ
	|	ЦеныНоменклатурыДокументов.Номенклатура = &Номенклатура
	|	И ЦеныНоменклатурыДокументов.СпособЗаполненияЦены = &СпособЗаполненияЦены";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Не Выборка.Следующий() Тогда
		Возврат ОписаниеЦены;
	КонецЕсли;
	
	ОписаниеЦены.Цена            = Выборка.Цена;
	ОписаниеЦены.ЦенаВключаетНДС = Выборка.ЦенаВключаетНДС;
	
	ВалютаЦены = Выборка.Валюта;
	
	Если Не ЗначениеЗаполнено(Валюта) Тогда
		
		// Вернем валюту, в которой выражена цена
		Валюта = ВалютаЦены;
		
	ИначеЕсли ВалютаЦены <> Валюта И ЗначениеЗаполнено(ВалютаЦены) Тогда
		
		// Пересчитаем в переданную валюту
		
		СтруктураКурсаЦены = ОбщегоНазначенияБК.ПолучитьКурсВалюты(ВалютаЦены, Дата);
		ОписаниеЦены.Цена  = ОбщегоНазначенияБККлиентСервер.ПересчитатьИзВалютыВВалюту(
			ОписаниеЦены.Цена,
			ВалютаЦены,                   Валюта,
			СтруктураКурсаЦены.Курс,      Курс,
			СтруктураКурсаЦены.Кратность, Кратность);
		
	КонецЕсли;
	
	Возврат ОписаниеЦены;
	
КонецФункции

// Возвращает таблицу цен номенклатуры
//
// Параметры:
//  МассивНоменклатуры - массив номенклатуры
//  ТипЦен             - тип цен
//  Дата               - дата цен
//
// Возвращаемое значение:
//  Таблица значений, содержащая цены, валюты цен и курсы валют на переданную дату
//
Функция ПолучитьТаблицуЦенНоменклатуры(МассивНоменклатуры, ТипЦен, Дата, Организация) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период",				Дата);
	Запрос.УстановитьПараметр("ТипЦен",				ТипЦен);
	Запрос.УстановитьПараметр("Организация",		Организация);
	Запрос.УстановитьПараметр("МассивНоменклатуры",	МассивНоменклатуры);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
	|	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена,
	|	ЦеныНоменклатурыСрезПоследних.Валюта КАК Валюта
	|ПОМЕСТИТЬ ЦеныНоменклатуры
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|			&Период,
	|			Организация = &Организация
	|			И ТипЦен = &ТипЦен
	|				И Номенклатура В (&МассивНоменклатуры)) КАК ЦеныНоменклатурыСрезПоследних
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Валюта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КурсыВалютСрезПоследних.Валюта КАК Валюта,
	|	КурсыВалютСрезПоследних.Курс КАК Курс,
	|	КурсыВалютСрезПоследних.Кратность КАК Кратность
	|ПОМЕСТИТЬ КурсыВалют
	|ИЗ
	|	РегистрСведений.КурсыВалют.СрезПоследних(
	|			&Период,
	|			Валюта В
	|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					ЦеныНоменклатуры.Валюта
	|				ИЗ
	|					ЦеныНоменклатуры)) КАК КурсыВалютСрезПоследних
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Валюта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЦеныНоменклатуры.Номенклатура КАК Номенклатура,
	|	ЦеныНоменклатуры.Цена КАК Цена,
	|	ЦеныНоменклатуры.Валюта КАК Валюта,
	|	ЕСТЬNULL(КурсыВалют.Курс, 1) КАК Курс,
	|	ЕСТЬNULL(КурсыВалют.Кратность, 1) КАК Кратность
	|ИЗ
	|	ЦеныНоменклатуры КАК ЦеныНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалют
	|		ПО ЦеныНоменклатуры.Валюта = КурсыВалют.Валюта";
	
	ТаблицаЦенНоменклатуры = Запрос.Выполнить().Выгрузить();
	ТаблицаЦенНоменклатуры.Индексы.Добавить("Номенклатура");
	
	Возврат ТаблицаЦенНоменклатуры;
	
КонецФункции

Функция ПолучитьТаблицуЦенНоменклатурыДокументов(МассивНоменклатуры, СпособЗаполненияЦены, Дата) Экспорт
	
	ЦеныНоменклатуры = НовыйЦеныНоменклатуры();
	
	Если Не ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ЦеныНоменклатурыДокументов) Тогда
		Возврат ЦеныНоменклатуры;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период",					Дата);	
	Запрос.УстановитьПараметр("СпособЗаполненияЦены",	СпособЗаполненияЦены);
	Запрос.УстановитьПараметр("МассивНоменклатуры",		МассивНоменклатуры);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЦеныНоменклатурыДокументов.Номенклатура КАК Номенклатура,
	|	ЦеныНоменклатурыДокументов.Цена КАК Цена,
	|	ЦеныНоменклатурыДокументов.Валюта КАК Валюта,
	|	ЦеныНоменклатурыДокументов.ЦенаВключаетНДС
	|ПОМЕСТИТЬ ЦеныНоменклатуры
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатурыДокументов КАК ЦеныНоменклатурыДокументов
	|ГДЕ
	|	ЦеныНоменклатурыДокументов.Номенклатура В(&МассивНоменклатуры)
	|	И ЦеныНоменклатурыДокументов.СпособЗаполненияЦены = &СпособЗаполненияЦены
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Валюта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КурсыВалютСрезПоследних.Валюта КАК Валюта,
	|	КурсыВалютСрезПоследних.Курс КАК Курс,
	|	КурсыВалютСрезПоследних.Кратность КАК Кратность
	|ПОМЕСТИТЬ КурсыВалют
	|ИЗ
	|	РегистрСведений.КурсыВалют.СрезПоследних(&Период, ) КАК КурсыВалютСрезПоследних
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Валюта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЦеныНоменклатуры.Номенклатура КАК Номенклатура,
	|	ЦеныНоменклатуры.Цена КАК Цена,
	|	ЦеныНоменклатуры.Валюта КАК Валюта,
	|	ЕСТЬNULL(КурсыВалют.Курс, 1) КАК Курс,
	|	ЕСТЬNULL(КурсыВалют.Кратность, 1) КАК Кратность,
	|	ЦеныНоменклатуры.ЦенаВключаетНДС
	|ИЗ
	|	ЦеныНоменклатуры КАК ЦеныНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалют
	|		ПО ЦеныНоменклатуры.Валюта = КурсыВалют.Валюта";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(ЦеныНоменклатуры.Добавить(), Выборка);
	КонецЦикла;
	
	Возврат ЦеныНоменклатуры;
	
КонецФункции

// Пересчитывает цену в другую валюту
//
//  Цена            - число, значение цены, которое надо пересчитать,
//  ВалютаЦены      - ссылка на справочник "Валюты", определяет валюту, в которой назначена Цена
//  НоваяВалюта     - ссылка на справочник "Валюты", определяет валюту, в которой надо получить
//                    новое значение цены. Если не заполнено, то устанавливается равной ВалютаЦены без пересчета,
//  КурсНовойВалюты - курс новой валюты, по которому надо пересчитать цену, если не задан, то берем курс по справочнику
//  КратностьНовойВалюты - кратность новой валюты, по которой надо пересчитать цену, если не задана, то берем курс по справочнику
//  Дата            - дата, на которую надо пересчитать цену.
//
// Возвращаемое значение:
//  Новое значение цены.
//
Функция ПересчитатьЦенуПриИзмененииВалюты(Цена, ВалютаЦены, НоваяВалюта, КурсНовойВалюты = 0, 
											КратностьНовойВалюты = 1, Дата = Неопределено ) Экспорт

	НовоеЗначениеЦены = Цена;

	Если НЕ ЗначениеЗаполнено(НоваяВалюта) Тогда // параметр валюты не задан, значить надо возвращать в валюте цены
		НоваяВалюта = ВалютаЦены;
	Иначе

		Если НоваяВалюта <> ВалютаЦены Тогда // если валюта цены не совпадает с параметром, то надо пересчитать

			Если НЕ ЗначениеЗаполнено(ВалютаЦены) Тогда // если не задана валюта цены, то будем счатать цену нулевой
				НовоеЗначениеЦены = 0;
			Иначе // валюты заданы и не совпадают, надо пересчитывать

				СтруктураКурсЦены = ОбщегоНазначенияБК.ПолучитьКурсВалюты(ВалютаЦены, Дата);
				КурсЦены          = СтруктураКурсЦены.Курс;
				КратностьЦены     = СтруктураКурсЦены.Кратность;

				Если НЕ ЗначениеЗаполнено(КурсНовойВалюты) Тогда 
					// если не задан курс, то курс берем по справочнику
					СтруктураКурсНовойВалюты = ОбщегоНазначенияБК.ПолучитьКурсВалюты(НоваяВалюта, Дата);
					КурсНовойВалюты          = СтруктураКурсНовойВалюты.Курс;
					КратностьНовойВалюты     = СтруктураКурсНовойВалюты.Кратность;
				КонецЕсли; 

				НовоеЗначениеЦены = ОбщегоНазначенияБККлиентСервер.ПересчитатьИзВалютыВВалюту(НовоеЗначениеЦены, ВалютаЦены, НоваяВалюта, 
												КурсЦены, КурсНовойВалюты,КратностьЦены,КратностьНовойВалюты);

			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	Возврат НовоеЗначениеЦены;

КонецФункции // ПересчитатьЦенуПриИзмененииВалюты()

Процедура ОбновитьЦеныНоменклатуры(ДокументСсылка, СпособЗаполненияЦены, Валюта = Неопределено, СуммаВключаетНДС = Ложь) Экспорт	
	
	Если Не ПравоДоступа("Изменение", Метаданные.РегистрыСведений.ЦеныНоменклатурыДокументов) Тогда
		Возврат;
	КонецЕсли;
	
	Если Константы.НастройкаЗаполненияЦеныПродажи.Получить() = Перечисления.НастройкаЗаполненияЦеныПродажи.Номенклатура Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Валюта) Тогда 
		Валюта = ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	КонецЕсли;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("СпособЗаполненияЦены", СпособЗаполненияЦены);
	Запрос.УстановитьПараметр("ЦенаВключаетНДС",	  СуммаВключаетНДС);
	Запрос.УстановитьПараметр("Валюта",				  Валюта);
	Запрос.УстановитьПараметр("Ссылка",				  ДокументСсылка);
	
	Запрос.Текст = Документы[ДокументСсылка.Метаданные().Имя].ТекстЗапросаДанныеДляОбновленияЦенДокументов()
	+ "ВЫБРАТЬ
	  |	ТаблицаНоменклатуры.Номенклатура,
	  |	МАКСИМУМ(ТаблицаНоменклатуры.Цена) КАК Цена,
	  |	ТаблицаНоменклатуры.Валюта,
	  |	ТаблицаНоменклатуры.СпособЗаполненияЦены,
	  |	ТаблицаНоменклатуры.ЦенаВключаетНДС
	  |ПОМЕСТИТЬ ТаблицаНоменклатурыСМаксимальнойЦеной
	  |ИЗ
	  |	ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
	  |
	  |СГРУППИРОВАТЬ ПО
	  |	ТаблицаНоменклатуры.Номенклатура,
	  |	ТаблицаНоменклатуры.Валюта,
	  |	ТаблицаНоменклатуры.СпособЗаполненияЦены,
	  |	ТаблицаНоменклатуры.ЦенаВключаетНДС
	  |;
	  |
	  |////////////////////////////////////////////////////////////////////////////////
	  |ВЫБРАТЬ
	  |	ТаблицаНоменклатурыСМаксимальнойЦеной.Номенклатура,
	  |	ТаблицаНоменклатурыСМаксимальнойЦеной.Цена КАК Цена,
	  |	ТаблицаНоменклатурыСМаксимальнойЦеной.Валюта,
	  |	ТаблицаНоменклатурыСМаксимальнойЦеной.СпособЗаполненияЦены КАК СпособЗаполненияЦены,
	  |	ТаблицаНоменклатурыСМаксимальнойЦеной.ЦенаВключаетНДС
	  |ИЗ
	  |	ТаблицаНоменклатурыСМаксимальнойЦеной КАК ТаблицаНоменклатурыСМаксимальнойЦеной
	  |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатурыДокументов КАК ЦеныНоменклатурыДокументов
	  |		ПО ТаблицаНоменклатурыСМаксимальнойЦеной.Номенклатура = ЦеныНоменклатурыДокументов.Номенклатура
	  |			И ТаблицаНоменклатурыСМаксимальнойЦеной.Валюта = ЦеныНоменклатурыДокументов.Валюта
	  |			И ТаблицаНоменклатурыСМаксимальнойЦеной.СпособЗаполненияЦены = ЦеныНоменклатурыДокументов.СпособЗаполненияЦены
	  |			И ТаблицаНоменклатурыСМаксимальнойЦеной.ЦенаВключаетНДС = ЦеныНоменклатурыДокументов.ЦенаВключаетНДС
	  |ГДЕ
	  |	ТаблицаНоменклатурыСМаксимальнойЦеной.Цена <> ЕСТЬNULL(ЦеныНоменклатурыДокументов.Цена, 0)
	  |	И ТаблицаНоменклатурыСМаксимальнойЦеной.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)";
	
	ТаблицаЦенНоменклатуры = Запрос.Выполнить().Выгрузить();
	
	Если ТаблицаЦенНоменклатуры.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ЦеныНоменклатурыДокументов");
	ЭлементБлокировки.УстановитьЗначение("СпособЗаполненияЦены", СпособЗаполненияЦены);
	ЭлементБлокировки.ИсточникДанных = ТаблицаЦенНоменклатуры;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Номенклатура", "Номенклатура");
	Блокировка.Заблокировать();
	
	Попытка
		
		Для Каждого Стр Из ТаблицаЦенНоменклатуры Цикл
			
			МенеджерЗаписи = РегистрыСведений.ЦеныНоменклатурыДокументов.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Стр);
			МенеджерЗаписи.Записать();
			
		КонецЦикла;			
		ЗафиксироватьТранзакцию();
		
	Исключение
		//Обновленные данные о ценах записываюся полностью по документу или не записываются вообще.
		ОтменитьТранзакцию();
	КонецПопытки;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура ЗаполнитьРассчитатьСуммы(Форма, 
			Знач ВалютаДоИзменения, 
			КурсДоИзменения, 
			КратностьДоИзменения, 
			ПерезаполнитьЦены = Ложь, 
			ПересчитатьЦены = Ложь, 
			ПересчитатьНДС = Неопределено) Экспорт
	
	Объект = Форма.Объект;
	
	ТаблицаЦенНоменклатуры = Неопределено;
	
	Если ПерезаполнитьЦены Тогда 
		
		СписокНоменклатуры	= Новый Массив;
		
		Если Объект.Свойство("Товары") Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СписокНоменклатуры,
			ОбщегоНазначения.ВыгрузитьКолонку(Объект.Товары, "Номенклатура"), Истина);
		КонецЕсли;
		
		Если Объект.Свойство("Услуги") Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СписокНоменклатуры,
			ОбщегоНазначения.ВыгрузитьКолонку(Объект.Услуги, "Номенклатура"), Истина);
		КонецЕсли;
		
		Если Объект.Свойство("ОС") Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СписокНоменклатуры,
			ОбщегоНазначения.ВыгрузитьКолонку(Объект.ОС, "ОсновноеСредство"), Истина);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.ТипЦен) Тогда
			ТаблицаЦенНоменклатуры = УправлениеЦенообразованием.ПолучитьТаблицуЦенНоменклатуры(
			СписокНоменклатуры,
			Объект.ТипЦен,
			Объект.Дата);
		КонецЕсли;
		
	ИначеЕсли ПересчитатьЦены Тогда
		
		Если КурсДоИзменения <> 0 И КратностьДоИзменения <> 0 Тогда
			СтруктураКурса = Новый Структура("Курс, Кратность", КурсДоИзменения, КратностьДоИзменения);
		Иначе
			СтруктураКурса = ОбщегоНазначенияБК.ПолучитьКурсВалюты(ВалютаДоИзменения, Объект.Дата);
		КонецЕсли;
		
	КонецЕсли;

	Если Объект.Свойство("Товары") Тогда
		Для Каждого Строка Из Объект.Товары Цикл
			ЗаполнитьРассчитатьСуммыВСтроке(
				Форма, Строка, ТаблицаЦенНоменклатуры, ВалютаДоИзменения, СтруктураКурса, ПерезаполнитьЦены, ПересчитатьЦены, ПересчитатьНДС, Истина, 0, Объект.УчитыватьНДС);
		КонецЦикла;
	КонецЕсли;
	
	Если Объект.Свойство("ВозвратнаяТара") Тогда
		Для Каждого Строка Из Объект.ВозвратнаяТара Цикл
			ЗаполнитьРассчитатьСуммыВСтроке(
				Форма, Строка, ТаблицаЦенНоменклатуры, ВалютаДоИзменения, СтруктураКурса, ПерезаполнитьЦены, ПересчитатьЦены, ПересчитатьНДС, Ложь, 0, Объект.УчитыватьНДС);
		КонецЦикла;
	КонецЕсли;
	
	Если Объект.Свойство("Услуги") Тогда
		Для Каждого Строка Из Объект.Услуги Цикл
			ЗаполнитьРассчитатьСуммыВСтроке(
				Форма, Строка, ТаблицаЦенНоменклатуры, ВалютаДоИзменения, СтруктураКурса, ПерезаполнитьЦены, ПересчитатьЦены, ПересчитатьНДС, Истина, 1, Объект.УчитыватьНДС);
		КонецЦикла;
	КонецЕсли;
	
	Если Объект.Свойство("АгентскиеУслуги") Тогда
		Для Каждого Строка Из Объект.АгентскиеУслуги Цикл
			ЗаполнитьРассчитатьСуммыВСтроке(
				Форма, Строка, ТаблицаЦенНоменклатуры, ВалютаДоИзменения, СтруктураКурса, ПерезаполнитьЦены, ПересчитатьЦены, ПересчитатьНДС, Истина, 1, Объект.УчитыватьНДС);
		КонецЦикла;
	КонецЕсли;
	
	Если Объект.Свойство("ОС") Тогда
		Для Каждого Строка Из Объект.ОС Цикл
			ЗаполнитьРассчитатьСуммыВСтроке(
				Форма, Строка, ТаблицаЦенНоменклатуры, ВалютаДоИзменения, СтруктураКурса, ПерезаполнитьЦены, ПересчитатьЦены, ПересчитатьНДС, Истина, 1, Объект.УчитыватьНДС);
		КонецЦикла;
	КонецЕсли;
	
	Если Объект.Свойство("НМА") Тогда
		Для Каждого Строка Из Объект.НМА Цикл
			ЗаполнитьРассчитатьСуммыВСтроке(
				Форма, Строка, ТаблицаЦенНоменклатуры, ВалютаДоИзменения, СтруктураКурса, ПерезаполнитьЦены, ПересчитатьЦены, ПересчитатьНДС, Истина, 1, Объект.УчитыватьНДС);
		КонецЦикла;
	КонецЕсли;
	
	Форма.ЗаполнитьДобавленныеКолонкиТаблицНаСервере(Объект);
	
	Форма.ОбновитьИтогиНаСервере();
	
КонецПроцедуры

Процедура ЗаполнитьРассчитатьСуммыВСтроке(Форма, Строка, ТаблицаЦенНоменклатуры, ВалютаПередИзменением, СтруктураКурса,
										ПерезаполнитьЦены, ПересчитатьЦены, ПересчитатьНДС, ЕстьНДС, 
										ЗначениеПустогоКоличества, УчитыватьНДС)

	Объект = Форма.Объект;

	Если ПерезаполнитьЦены И ТаблицаЦенНоменклатуры <> Неопределено Тогда
		
		НайденнаяСтрока	= ТаблицаЦенНоменклатуры.Найти(Строка.Номенклатура, "Номенклатура");
		Если НайденнаяСтрока <> Неопределено Тогда
			Цена = ОбщегоНазначенияБККлиентСервер.ПересчитатьИзВалютыВВалюту(
				НайденнаяСтрока.Цена, НайденнаяСтрока.Валюта, Объект.ВалютаДокумента, НайденнаяСтрока.Курс,
				Объект.КурсВзаиморасчетов, НайденнаяСтрока.Кратность, Объект.КратностьВзаиморасчетов);
			ЦенаВключаетНДС = НайденнаяСтрока.ЦенаВключаетНДС;
		Иначе
			Цена = 0;
			ЦенаВключаетНДС = Ложь;
			УстановитьЦенаВключаетНДСПоТипуЦен(ЦенаВключаетНДС, Объект.ТипЦен);
		КонецЕсли;
		
	Иначе
		Если ПересчитатьЦены Тогда

			Если Строка.Свойство("Цена") Тогда
				ЦенаПоСтроке = Строка.Цена;
			Иначе
				ЦенаПоСтроке = Строка.Сумма;	
			КонецЕсли;
					
		Цена = ОбщегоНазначенияБККлиентСервер.ПересчитатьИзВалютыВВалюту(
					ЦенаПоСтроке, ВалютаПередИзменением, Объект.ВалютаДокумента, СтруктураКурса.Курс,
					Объект.КурсВзаиморасчетов, СтруктураКурса.Кратность, Объект.КратностьВзаиморасчетов);
					
		Иначе
			Если Строка.Свойство("Цена") Тогда
				Цена = Строка.Цена;
			Иначе 
				Цена = Строка.Сумма;
			КонецЕсли;
		КонецЕсли;
		
		ИзменилсяУчет		= ПересчитатьНДС.ИзменилсяУчет;
		ИзменилосьВхождение = ПересчитатьНДС.ИзменилосьВхождение;
		
		Если ИзменилосьВхождение И Не ИзменилсяУчет Тогда
			// НДС (в т.ч) -> НДС (сверху) 
			// НДС (сверху) -> НДС (в т.ч)  
			ЦенаВключаетНДС = ?(Объект.СуммаВключаетНДС, Ложь, Истина);
		ИначеЕсли Не ИзменилосьВхождение И ИзменилсяУчет Тогда
			// НДС (сверху) -> Без НДС  
			ЦенаВключаетНДС = Ложь;
		ИначеЕсли ИзменилосьВхождение И ИзменилсяУчет Тогда
			// Без НДС -> НДС (сверху) 
			// Без НДС -> НДС (в т.ч)  
			// НДС (в т.ч) -> Без НДС  
			ЦенаВключаетНДС = ?(Не УчитыватьНДС, Истина, Ложь);
		КонецЕсли;
			
	КонецЕсли;

	Если ЕстьНДС Тогда
		
		ЦенаРасчет = ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена, 
																									Неопределено, 
																									ЦенаВключаетНДС, 
																									Объект.УчитыватьНДС, 
																									Объект.СуммаВключаетНДС, 
																									УчетНДСиАкцизаВызовСервераПовтИсп.ПолучитьСтавкуНДС(Строка.СтавкаНДС));
																									
		Если Строка.Свойство("Цена") Тогда
			Строка.Цена = ЦенаРасчет;
			Строка.Сумма = Строка.Цена * ?(Строка.Количество = 0, ЗначениеПустогоКоличества, Строка.Количество);
		Иначе 
			Строка.Сумма = ЦенаРасчет;
		КонецЕсли;
				
		Строка.СуммаНДС = УчетНДСИАкцизаКлиентСервер.РассчитатьСуммуНДС(Строка.Сумма, Объект.УчитыватьНДС, Объект.СуммаВключаетНДС, УчетНДСиАкцизаВызовСервераПовтИсп.ПолучитьСтавкуНДС(Строка.СтавкаНДС));

	Иначе
		Если Строка.Свойство("Цена") Тогда
			Строка.Цена = Цена;
			Строка.Сумма = Строка.Цена * ?(Строка.Количество = 0, ЗначениеПустогоКоличества, Строка.Количество);
		Иначе
			Строка.Сумма = Строка.Сумма;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

Процедура УстановитьЦенаВключаетНДСПоТипуЦен(ЦенаВключаетНДС, ТипЦен)
	
	// Признак того, что цена включает НДС, хранится в реквизите ЦенаВключаетНДС типа цен
	
	Если Не ЗначениеЗаполнено(ТипЦен) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПравоДоступа("Чтение", Метаданные.Справочники.ТипыЦенНоменклатуры) Тогда
		Возврат;
	КонецЕсли;
	
	ЦенаВключаетНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТипЦен, "ЦенаВключаетНДС");
	
КонецПроцедуры

Функция НовыйЦеныНоменклатуры()
	
	МетаданныеЦеныНоменклатуры = Метаданные.РегистрыСведений.ЦеныНоменклатуры;
	МетаданныеКурсыВалют       = Метаданные.РегистрыСведений.КурсыВалют;
	
	ЦеныНоменклатуры = Новый ТаблицаЗначений;
	ЦеныНоменклатуры.Колонки.Добавить("Номенклатура",    МетаданныеЦеныНоменклатуры.Измерения.Номенклатура.Тип);
	ЦеныНоменклатуры.Колонки.Добавить("Цена",            МетаданныеЦеныНоменклатуры.Ресурсы.Цена.Тип);
	ЦеныНоменклатуры.Колонки.Добавить("Валюта",          МетаданныеЦеныНоменклатуры.Ресурсы.Валюта.Тип);
	ЦеныНоменклатуры.Колонки.Добавить("Курс",            МетаданныеКурсыВалют.Ресурсы.Курс.Тип);
	ЦеныНоменклатуры.Колонки.Добавить("Кратность",       МетаданныеКурсыВалют.Ресурсы.Кратность.Тип);
	ЦеныНоменклатуры.Колонки.Добавить("ЦенаВключаетНДС", Новый ОписаниеТипов("Булево"));
	
	ЦеныНоменклатуры.Индексы.Добавить("Номенклатура");
	
	Возврат ЦеныНоменклатуры;
	
КонецФункции

