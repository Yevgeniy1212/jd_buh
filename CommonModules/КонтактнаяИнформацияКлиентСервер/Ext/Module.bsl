////////////////////////////////////////////////////////////////////////////////
// КонтактнаяИнформация: содержит алгоритмы работы с контактной информацией, 
//   исполняемые на клиенте и на сервере
//  
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Функция формирует структуру записи регистра.
//
// Параметры:
//  Запись - запись набора записей регистра сведений
//
Функция ПолучитьСтруктуруЗаписиРегистра(Запись) Экспорт

	Если ТипЗнч(Запись) = Тип("ДанныеФормыЭлементКоллекции")
	 ИЛИ ТипЗнч(Запись) = Тип("ДанныеФормыСтруктура")
	 ИЛИ ТипЗнч(Запись) = Тип("РегистрСведенийЗапись.КонтактнаяИнформация")
	 ИЛИ ТипЗнч(Запись) = Тип("РегистрСведенийМенеджерЗаписи.КонтактнаяИнформация") Тогда
	 
		СтруктураЗаписи = Новый Структура;
		СтруктураЗаписи.Вставить("Объект"       , Запись.Объект);
		СтруктураЗаписи.Вставить("Тип"          , Запись.Тип);
		СтруктураЗаписи.Вставить("Вид"          , Запись.Вид);
		СтруктураЗаписи.Вставить("Представление", Запись.Представление);
		СтруктураЗаписи.Вставить("Комментарий"  , Запись.Комментарий);
		
		Для а = 1 По 10 Цикл
			СтруктураЗаписи.Вставить("Поле" + Строка(а), Запись["Поле" + Строка(а)]);
		КонецЦикла;
		
		Возврат СтруктураЗаписи;
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли; 

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры преобазования значений

// Телефон

// Процедура формирует строковое представление телефона
//
Процедура СформироватьПредставлениеТелефона(НаборПолей) Экспорт

	НаборПолей.Представление = НаборПолей.Поле1;
	НаборПолей.Представление = НаборПолей.Представление + ?((Не ПустаяСтрока(НаборПолей.Поле2)),(ПроверкаПустойСтроки(НаборПолей.Представление, Ложь)+"(" + НаборПолей.Поле2 + ")"),"");
	НаборПолей.Представление = НаборПолей.Представление + ?((Не ПустаяСтрока(НаборПолей.Поле3)),(ПроверкаПустойСтроки(НаборПолей.Представление, ПустаяСтрока(НаборПолей.Поле2)) + ПривестиНомерТелефонаКШаблону(НаборПолей.Поле3)),"");
	
	Если НЕ ПустаяСтрока(НаборПолей.Представление) Тогда
		НаборПолей.Представление = НаборПолей.Представление + ?((Не ПустаяСтрока(НаборПолей.Поле4)),(ПроверкаПустойСтроки(НаборПолей.Представление) + НСтр("ru = 'доб. '") + ПривестиНомерТелефонаКШаблону(НаборПолей.Поле4)),"");
	Иначе
		НаборПолей.Представление = ПривестиНомерТелефонаКШаблону(НаборПолей.Поле4);
	КонецЕсли; 

КонецПроцедуры

// Функция раскладывает номер телефона, по полям для записи в КИ объекта
//
// Параметры
//  
//  НомерТелефона - строка, номер телефона для преобразования
//
// Возвращаемое значение:
//   Список значений
//
Функция РазложитьТелефонПоПолям(НомерТелефона) Экспорт

	КодСтраны			= "";
	НачалоКодаСтраны	= Найти(НомерТелефона, "+");
	
	Если НачалоКодаСтраны > 0 Тогда
		Для а = (НачалоКодаСтраны + 1) По СтрДлина(НомерТелефона) Цикл
			
			Если Сред(НомерТелефона, а, 1) = " " Тогда
				Прервать;
			КонецЕсли; 
			
			КодСтраны = КодСтраны + Сред(НомерТелефона, а, 1);
			
		КонецЦикла; 
	КонецЕсли; 
	
	КодСтраны = СокрЛП(КодСтраны);
	КодГорода = "";
	
	Если СтрЧислоВхождений(НомерТелефона, "(") = 1 И СтрЧислоВхождений(НомерТелефона, ")") = 1 Тогда
		
		НачалоКодаГорода = Найти(НомерТелефона, "(");
		КонецКодаГорода = Найти(НомерТелефона, ")");
		
		Если КонецКодаГорода > НачалоКодаГорода Тогда
			КодГорода = Сред(НомерТелефона, (НачалоКодаГорода + 1), (КонецКодаГорода - НачалоКодаГорода - 1));
		КонецЕсли;
		
	КонецЕсли;
	
	КодГорода	= СокрЛП(КодГорода);
	СамТелефон	= НомерТелефона;
	
	Если НЕ ПустаяСтрока(КодСтраны) Тогда
		СамТелефон = СтрЗаменить(СамТелефон, ("+" + КодСтраны), "");
		СамТелефон = СокрЛП(СамТелефон);
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(КодГорода) Тогда
		СамТелефон = СтрЗаменить(СамТелефон, ("(" + КодГорода + ")"), "");
		СамТелефон = СокрЛП(СамТелефон);
	КонецЕсли;
	
	а = 1;
	Пока а <= СтрДлина(СамТелефон) Цикл
		
		Если (КодСимвола(Сред(СамТелефон, а, 1)) >= 48 И КодСимвола(Сред(СамТелефон, а, 1)) <= 57) 
		 ИЛИ КодСимвола(Сред(СамТелефон, а, 1)) = 32 Тогда
			а = а + 1;
			Продолжить;
		КонецЕсли;
		
		СамТелефон = Сред(СамТелефон, 1, (а - 1)) + Сред(СамТелефон, (а + 1));
		
	КонецЦикла; 

	Если НЕ ПустаяСтрока(КодСтраны) И Лев(СокрЛ(КодСтраны), 1) <> "+" Тогда
		
		КодСтраны = СокрЛП(КодСтраны);
		
		Пока Лев(КодСтраны, 1) = "0" Цикл
			КодСтраны = Сред(КодСтраны, 2);
		КонецЦикла;
		
		Если НЕ ПустаяСтрока(КодСтраны) Тогда
			КодСтраны = "+" + КодСтраны;
		КонецЕсли;
		
	КонецЕсли; 
	
	СтруктураПолейТелефона = Новый Структура("КодСтраны,КодГорода,СамТелефон", КодСтраны, КодГорода, ПривестиНомерТелефонаКШаблону(СамТелефон));
	
	Возврат СтруктураПолейТелефона;

КонецФункции

// Функция приводит телефонный номер к одному из указанных в настройке шаблонов
//
// Параметры
//  НомерТЛФ – строка, номер телефона, который надо преобразовывать
//
// Возвращаемое значение:
//   Приведенный номер – строка, номер, приведенный к одному из шаблонов
//
Функция ПривестиНомерТелефонаКШаблону(НомерТЛФ) Экспорт
	
	ТолькоЦифрыНомера		= "";
	КоличествоЦифрНомера	= 0;
	
	Для а = 1 По СтрДлина(НомерТЛФ) Цикл
		
		Если СтрЧислоВхождений("1234567890",Сред(НомерТЛФ,а,1)) > 0 Тогда
			КоличествоЦифрНомера	= КоличествоЦифрНомера + 1;
			ТолькоЦифрыНомера		= ТолькоЦифрыНомера + Сред(НомерТЛФ,а,1);
		КонецЕсли;
		
	КонецЦикла;
	
	Если КоличествоЦифрНомера = 0 Тогда
		Возврат НомерТЛФ;
	КонецЕсли;
	
	СтруктураШаблонов = КонтактнаяИнформацияКлиентСерверПовтИсп.ШаблоныТелефонныхНомеров();
	
	Если ТипЗнч(СтруктураШаблонов) <> Тип("Соответствие") Тогда
		Возврат НомерТЛФ;
	КонецЕсли;
	
	ПолученныйШаблон = СтруктураШаблонов.Получить(КоличествоЦифрНомера);
	
	Если ПолученныйШаблон = Неопределено Тогда
		Возврат НомерТЛФ;
	КонецЕсли;
	
	ПриведенныйНомер	= "";
	НомерЦифры			= 0;
	
	Для а=1 По СтрДлина(ПолученныйШаблон) Цикл
		
		Если Сред(ПолученныйШаблон,а,1) = "9" Тогда
			НомерЦифры = НомерЦифры + 1;
			ПриведенныйНомер = ПриведенныйНомер + Сред(ТолькоЦифрыНомера,НомерЦифры,1);
		Иначе
			ПриведенныйНомер = ПриведенныйНомер + Сред(ПолученныйШаблон,а,1);
		КонецЕсли;
		
	КонецЦикла; 

	Возврат ПриведенныйНомер;
	
КонецФункции

// Адрес

// Функция возвращает представление адреса собранного из полей значений Поле1 - Поле10
//
// Параметры
//  ПроизвольныйАдрес - Булево, определяет принадлежность к Республики Казахстан
//
// Возвращаемое значение:
//   Строка
//
Функция ПолучитьПредставлениеАдреса(Запись, ПроизвольныйАдрес = Ложь) Экспорт

	ТекПредставление = "";
	
	Если НЕ ПроизвольныйАдрес Тогда
		Если СокрЛП(Запись.Поле1) <> "" Тогда
			ТекПредставление = ТекПредставление + ", " + СокрЛП(Запись.Поле1) + ", " + НСтр("ru = 'Республика Казахстан'");
		Иначе
			ТекПредставление =  ", " + НСтр("ru = 'Республика Казахстан'");
		КонецЕсли;
	Иначе
		Если СокрЛП(Запись.Поле1) <> "" Тогда
			ТекПредставление = ТекПредставление + ", " + СокрЛП(Запись.Поле1);
		КонецЕсли;
	КонецЕсли;

	Если СокрЛП(Запись.Поле2) <> "" Тогда
		ТекПредставление = ТекПредставление + ", " + СокрЛП(Запись.Поле2);
	КонецЕсли;

	Если СокрЛП(Запись.Поле3) <> "" Тогда
		ТекПредставление = ТекПредставление + ", " + СокрЛП(Запись.Поле3);
	КонецЕсли;

	Если СокрЛП(Запись.Поле4) <> "" Тогда
		ТекПредставление = ТекПредставление + ", " + СокрЛП(Запись.Поле4);
	КонецЕсли;

	Если СокрЛП(Запись.Поле5) <> "" Тогда
		ТекПредставление = ТекПредставление + ", " + СокрЛП(Запись.Поле5);
	КонецЕсли;

	Если СокрЛП(Запись.Поле6) <> "" Тогда
		ТекПредставление = ТекПредставление + ", " + СокрЛП(Запись.Поле6);
	КонецЕсли;

	Если СокрЛП(Запись.Поле7) <> "" Тогда
		ТекПредставление = ТекПредставление + НСтр("ru = ', дом № '") + СокрЛП(Запись.Поле7);
	КонецЕсли;

	Если СокрЛП(Запись.Поле8) <> "" Тогда
		ТекПредставление = ТекПредставление + НСтр("ru = ', корпус '") + СокрЛП(Запись.Поле8);
	КонецЕсли;

	Если СокрЛП(Запись.Поле9) <> "" Тогда
		ТекПредставление = ТекПредставление + НСтр("ru = ', к.'") + СокрЛП(Запись.Поле9);
	КонецЕсли;

	Если СтрДлина(ТекПредставление) > 2 Тогда
		ТекПредставление = Сред(ТекПредставление, 3);
	КонецЕсли;
	
	Возврат ТекПредставление;

КонецФункции

//Функция раскладывает строку с данными об адресе (в формате 9 запятых) на элементы структуры
Функция РазложитьАдрес(Знач СтрокаАдрес) Экспорт
	
	СтруктураВозврата = Новый Структура("Страна, Индекс, Регион, Район, Город, НаселенныйПункт, Улица, Дом, Корпус, Квартира", 
										"", "", "", "", "", "", "", "", "", "");

	МассивАдрес       = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаАдрес);
	ЭлементовВМассиве = МассивАдрес.Количество();   

	Если ЭлементовВМассиве	>	0	Тогда
		СтруктураВозврата.Страна	=	СокрЛП(МассивАдрес[0]);
	КонецЕсли;
	Если ЭлементовВМассиве	>	1	Тогда
		СтруктураВозврата.Индекс	=	СокрЛП(МассивАдрес[1]);
	КонецЕсли;
	Если ЭлементовВМассиве	>	2	Тогда
		СтруктураВозврата.Регион	=	СокрЛП(МассивАдрес[2]);
	КонецЕсли;
	Если ЭлементовВМассиве	>	3	Тогда
		СтруктураВозврата.Район	=	СокрЛП(МассивАдрес[3]);
	КонецЕсли;
	Если ЭлементовВМассиве	>	4	Тогда
		СтруктураВозврата.Город	=	СокрЛП(МассивАдрес[4]);
	КонецЕсли;
	Если ЭлементовВМассиве	>	5	Тогда
		СтруктураВозврата.НаселенныйПункт	=	СокрЛП(МассивАдрес[5]);
	КонецЕсли;
	Если ЭлементовВМассиве	>	6	Тогда
		СтруктураВозврата.Улица	=	СокрЛП(МассивАдрес[6]);
	КонецЕсли;
	Если ЭлементовВМассиве	>	7	Тогда
		СтруктураВозврата.Дом	=	СокрЛП(МассивАдрес[7]);
	КонецЕсли;
	Если ЭлементовВМассиве	>	8	Тогда
		СтруктураВозврата.Корпус	=	СокрЛП(МассивАдрес[8]);
	КонецЕсли;
	Если ЭлементовВМассиве	>	9	Тогда
		СтруктураВозврата.Квартира=	СокрЛП(МассивАдрес[9]);
	КонецЕсли;

	Возврат СтруктураВозврата;
	
КонецФункции	 

//Собирает из элементов структуры адреса строку записи адреса в формате 9 запятых
Функция СобратьАдрес(Знач СтруктураАдрес) Экспорт

	Возврат "" + СтруктураАдрес.Страна + "," + СтруктураАдрес.Индекс + ","+ СтруктураАдрес.Регион + ","
	+ СтруктураАдрес.Район  + "," + СтруктураАдрес.Город  + ","+ СтруктураАдрес.НаселенныйПункт + ","
	+ СтруктураАдрес.Улица  + "," + СтруктураАдрес.Дом    + ","+ СтруктураАдрес.Корпус + "," + СтруктураАдрес.Квартира

КонецФункции	 

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Функция проверяет строку на наличие значимых символов
//
// Параметры
//  ВыбСтрока  – строка для проверки
// Возвращаемое значение:
//   Строка - пробел или пустое значение строки
//
Функция ПроверкаПустойСтроки(ВыбСтрока, ПризнакЗапятой = Истина)
	
	Если ПустаяСтрока(ВыбСтрока) Тогда
		Возврат "";
	Иначе
		Возврат ?(ПризнакЗапятой,",","")+" ";
	КонецЕсли; 
	
КонецФункции

// Возвращает аккуратно построеное наименование через запятую по парам "Название" + "Сокращение"
//
Функция ПолноеНаименование(Знач н0 = "", Знач с0 = "", Знач н1 = "", Знач с1 = "", Знач н2 = "", Знач с2 = "", Знач н3 = "", Знач с3 = "", Знач н4 = "", Знач с4 = "", Знач н5 = "", Знач с5 = "", Знач н6 = "", Знач с6 = "", Знач н7 = "", Знач с7 = "", Знач н8 = "", Знач с8 = "", Знач н9 = "", Знач с9 = "") Экспорт
	
	// Часть 0
	Результат = ?(ПустаяСтрока(н0), "", СокрЛП( СокрП(н0) + " " + СокрЛ(с0)) );
	
	// Часть 1
	ТекН = СокрЛП(н1);
	Наименование = ?(ТекН = "", "", СокрЛП(ТекН + " " + СокрЛ(с1)));
	Если Наименование = "" Или Результат = "" Тогда
		Результат = Результат + Наименование;
	Иначе
		Результат = Результат + ", " + Наименование;
	КонецЕсли;
	
	// Часть 2
	ТекН = СокрЛП(н2);
	Наименование = ?(ТекН = "", "", СокрЛП(ТекН + " " + СокрЛ(с2)));
	Если Наименование = "" Или Результат = "" Тогда
		Результат = Результат + Наименование;
	Иначе
		Результат = Результат + ", " + Наименование;
	КонецЕсли;
	
	// Часть 3
	ТекН = СокрЛП(н3);
	Наименование = ?(ТекН = "", "", СокрЛП(ТекН + " " + СокрЛ(с3)));
	Если Наименование = "" Или Результат = "" Тогда
		Результат = Результат + Наименование;
	Иначе
		Результат = Результат + ", " + Наименование;
	КонецЕсли;
	
	// Часть 4
	ТекН = СокрЛП(н4);
	Наименование = ?(ТекН = "", "", СокрЛП(ТекН + " " + СокрЛ(с4)));
	Если Наименование = "" Или Результат = "" Тогда
		Результат = Результат + Наименование;
	Иначе
		Результат = Результат + ", " + Наименование;
	КонецЕсли;
	
	// Часть 5
	ТекН = СокрЛП(н5);
	Наименование = ?(ТекН = "", "", СокрЛП(ТекН + " " + СокрЛ(с5)));
	Если Наименование = "" Или Результат = "" Тогда
		Результат = Результат + Наименование;
	Иначе
		Результат = Результат + ", " + Наименование;
	КонецЕсли;
	
	// Часть 6
	ТекН = СокрЛП(н6);
	Наименование = ?(ТекН = "", "", СокрЛП(ТекН + " " + СокрЛ(с6)));
	Если Наименование = "" Или Результат = "" Тогда
		Результат = Результат + Наименование;
	Иначе
		Результат = Результат + ", " + Наименование;
	КонецЕсли;
	
	// Часть 7
	ТекН = СокрЛП(н7);
	Наименование = ?(ТекН = "", "", СокрЛП(ТекН + " " + СокрЛ(с7)));
	Если Наименование = "" Или Результат = "" Тогда
		Результат = Результат + Наименование;
	Иначе
		Результат = Результат + ", " + Наименование;
	КонецЕсли;
	
	// Часть 8
	ТекН = СокрЛП(н8);
	Наименование = ?(ТекН = "", "", СокрЛП(ТекН + " " + СокрЛ(с8)));
	Если Наименование = "" Или Результат = "" Тогда
		Результат = Результат + Наименование;
	Иначе
		Результат = Результат + ", " + Наименование;
	КонецЕсли;
	
	// Часть 9
	ТекН = СокрЛП(н9);
	Наименование = ?(ТекН = "", "", СокрЛП(ТекН + " " + СокрЛ(с9)));
	Если Наименование = "" Или Результат = "" Тогда
		Результат = Результат + Наименование;
	Иначе
		Результат = Результат + ", " + Наименование;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Возвращает структуру с наименованием и сокращением от значения
//
// Параметры:
//     Текст - Строка - Полное наименование
//
// Возвращаемое значение:
//     Структура - результат обработки
//         * Наименование - Строка - часть текста
//         * Сокращение   - Строка - часть текста
//
Функция НаименованиеСокращение(Знач Текст) Экспорт
	Результат = Новый Структура("Наименование, Сокращение");
	Части = ЧастиАдреса(Текст, Истина);
	Если Части.Количество() > 0 Тогда
		ЗаполнитьЗначенияСвойств(Результат, Части[0]);
	Иначе
		Результат.Наименование = Текст;
	КонецЕсли;
	Возврат Результат;
КонецФункции

// Возвращает отдельно сокращение от значения
//
// Параметры:
//     Текст - Строка - Полное наименования
//
// Возвращаемое значение:
//     Строка - выделенное сокращение
//
Функция Сокращение(Знач Текст) Экспорт
	Части = НаименованиеСокращение(Текст);
	Возврат Части.Сокращение;
КонецФункции

// Разделяет текст на слова по указанным разделителям. По умолчанию разделители - пробельные символы
//
// Параметры:
//     Текст       - Строка - Разделяемая строка
//     Разделители - Строка - Необязательная строка символов-разделителей
//
// Возвращаемое значение:
//     Массив - строки, слова
//
Функция СловаТекста(Знач Текст, Знач Разделители = Неопределено) Экспорт
	
	НачалоСлова = 0;
	Состояние   = 0;
	Результат   = Новый Массив;
	
	Для Позиция = 1 По СтрДлина(Текст) Цикл
		ТекущийСимвол = Сред(Текст, Позиция, 1);
		ЭтоРазделитель = ?(Разделители = Неопределено, ПустаяСтрока(ТекущийСимвол), Найти(Разделители, ТекущийСимвол) > 0);
		
		Если Состояние = 0 И (Не ЭтоРазделитель) Тогда
			НачалоСлова = Позиция;
			Состояние   = 1;
		ИначеЕсли Состояние = 1 И ЭтоРазделитель Тогда
			Результат.Добавить(Сред(Текст, НачалоСлова, Позиция-НачалоСлова));
			Состояние = 0;
		КонецЕсли;
	КонецЦикла;
	
	Если Состояние = 1 Тогда
		Результат.Добавить(Сред(Текст, НачалоСлова, Позиция-НачалоСлова));    
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Разделяет текст, разделенный запятыми
//
// Параметры:
//     Текст              - Срока  - Разделяемый текст
//     ВыделятьСокращения - Булево - Опциональный параметр режима работы
//
// Возвращаемое значение:
//     Массив - содердит стурктуры "Наименование, Сокращение"
//
Функция ЧастиАдреса(Знач Текст, Знач ВыделятьСокращения = Истина) Экспорт
	
	Результат = Новый Массив;
	Для Каждого Часть Из СловаТекста(Текст, ",") Цикл
		СтрокаЧасти = СокрЛП(Часть);
		Если ПустаяСтрока(СтрокаЧасти) Тогда
			Продолжить;
		КонецЕсли;
		
		Позиция = ?(ВыделятьСокращения, СтрДлина(СтрокаЧасти), 0);
		Пока Позиция > 0 Цикл
			Если Сред(СтрокаЧасти, Позиция, 1) = " " Тогда
				Результат.Добавить(Новый Структура("Наименование, Сокращение",
					СокрЛП(Лев(СтрокаЧасти, Позиция-1)), СокрЛП(Сред(СтрокаЧасти, Позиция))));
				Позиция = -1;
				Прервать;
			КонецЕсли;
			Позиция = Позиция - 1;
		КонецЦикла;
		Если Позиция = 0 Тогда
			Результат.Добавить(Новый Структура("Наименование, Сокращение", СтрокаЧасти));
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
КонецФункции    

// Возвращает или пустую структуру-заготовку, или заполненную структуру по коду
Функция ПустойСписокРеквизитовАдреса() Экспорт
	
	// Первый уровень - внутренние идентификаторы
	Результат = Новый Структура;
	Результат.Вставить("Область",         ЭлементАдреснойСтруктуры(НСтр("ru = 'Область'")) );
	Результат.Вставить("Район",           ЭлементАдреснойСтруктуры(НСтр("ru = 'Район'")) );
	Результат.Вставить("Город",           ЭлементАдреснойСтруктуры(НСтр("ru = 'Город'")) );
	Результат.Вставить("НаселенныйПункт", ЭлементАдреснойСтруктуры(НСтр("ru = 'Нас.пункт'")));
	Результат.Вставить("Улица",           ЭлементАдреснойСтруктуры(НСтр("ru = 'Улица'")));
	
	// Поля объекта формы ввода адреса
	Результат.Область.Вставить        ("ПолеФормы", "Поле2");
	Результат.Район.Вставить          ("ПолеФормы", "Поле3");
	Результат.Город.Вставить          ("ПолеФормы", "Поле4");
	Результат.НаселенныйПункт.Вставить("ПолеФормы", "Поле5");
	Результат.Улица.Вставить          ("ПолеФормы", "Поле6");
	
	Возврат Результат;
КонецФункции

// Конструктор внутренней структуры элемента адреса
Функция ЭлементАдреснойСтруктуры(Заголовок, Значение = Неопределено, Предопределенный = Ложь)
	Возврат Новый Структура("Заголовок, Значение, Предопределенный, Наименование, Сокращение, КодКлассификатора", 
		Заголовок, Значение, Предопределенный);
КонецФункции
