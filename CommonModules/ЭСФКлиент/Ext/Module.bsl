
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Проверяет корректность заполнения ЭСФ и показывает сообщения.
//
// Параметры:
//  МассивИсходящихЭСФ - Массив - Массив документов ЭСФ, которые необходимо отправить в ИС ЭСФ.
//   Каждый элемент массива должен иметь тип ДокументСсылка.ЭСФ.
//
Процедура ПроверитьИсходящиеЭСФ(Знач МассивИсходящихЭСФ) Экспорт
	
	Контейнер = ЭСФКлиентСервер.КонтейнерМетодов();	
	Контейнер.ПроверитьИсходящиеЭСФ(МассивИсходящихЭСФ);
		
КонецПроцедуры

// Выполняет методы syncInvoice() API ИС ЭСФ.
// Если отправляются исправленные ЭСФ, то дополнительно выполняет метод еrevokeInvoiceById() API ИС ЭСФ.
//
// Параметры:
//  МассивИсходящихЭСФ - Массив - Массив документов ЭСФ, которые необходимо отправить в ИС ЭСФ.
//   Каждый элемент массива должен иметь тип ДокументСсылка.ЭСФ.
//
// Возвращаемое значение:
//  См. ЭСФСервер.ОтправитьИсходящиеInvoice().
//
Процедура ОтправитьИсходящиеЭСФ(Знач МассивИсходящихЭСФ, Знач ДополнительныеПараметры) Экспорт
	
	Контейнер = ЭСФКлиентСервер.КонтейнерМетодов();	
	Контейнер.ОтправитьИсходящиеЭСФ(МассивИсходящихЭСФ, ДополнительныеПараметры);
	
КонецПроцедуры

// Выполняет Выгрузку данных ЭСФ в XML-файл
//
// Параметры:
//  МассивИсходящихЭСФ - Массив - Массив документов ЭСФ, которые необходимо выгрузить в XML файл.
//   Каждый элемент массива должен иметь тип ДокументСсылка.ЭСФ.
//
Процедура ВыгрузитьИсходящиеЭСФ(Знач МассивИсходящихЭСФ) Экспорт
	
	Контейнер = ЭСФКлиентСервер.КонтейнерМетодов();	
	Контейнер.ВыгрузитьИсходящиеЭСФ(МассивИсходящихЭСФ);
		
КонецПроцедуры

Процедура ОбновитьИОтправитьИсходящиеЭСФ(Знач МассивИсходящихЭСФ, Знач ДополнительныеПараметры) Экспорт
	
	Контейнер = ЭСФКлиентСервер.КонтейнерМетодов();	
	Контейнер.ОбновитьИОтправитьИсходящиеЭСФ(МассивИсходящихЭСФ, ДополнительныеПараметры);
	
КонецПроцедуры

// См. ЭСФСервер.ОбновитьСтатусыЭСФПоИдентификаторам()
Процедура ОбновитьСтатусыЭСФПоИдентификаторам(Знач МассивЭСФ, Знач НаправлениеЭСФ, Знач ЗапускатьФоновоеЗадание) Экспорт
	
	Контейнер = ЭСФКлиентСервер.КонтейнерМетодов();	
	Контейнер.ОбновитьСтатусыЭСФПоИдентификаторам(МассивЭСФ, НаправлениеЭСФ, ЗапускатьФоновоеЗадание);
	
КонецПроцедуры

Процедура ОбновитьДокументыЭСФИзИСЭСФ(Знач МассивЭСФ, Знач ДополнительныеПараметры) Экспорт
	
	Контейнер = ЭСФКлиентСервер.КонтейнерМетодов();	
	Контейнер.ОбновитьДокументыЭСФИзИСЭСФ(МассивЭСФ, ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ОбновитьДокументыЭСФПоНомеруИДате(Знач МассивЭСФ, Знач ДополнительныеПараметры) Экспорт
	
	Контейнер = ЭСФКлиентСервер.КонтейнерМетодов();	
	Контейнер.ОбновитьДокументыЭСФИзИСЭСФПоНомеруИДате(МассивЭСФ, ДополнительныеПараметры);
	
КонецПроцедуры

// Устанавливает надпись "Электронно" или "Бумажно" в колонках "Отправлен" или "Получен".
//
// Параметры:
//  ЭтоСчетФактураВыданный - Булево - Истина - Выданный, Ложь - Полученный.
//  СписокСчетовФактур - ТабличноеПоле - Табличное поле счетов-фактур.
//  ОформленияСтрок - ОформленияСтрок - Оформление строк табличного поля.
//
Процедура УстановитьПредставлениеСпособаОбменаПриПолученииДанных(Знач ЭтоСчетФактураВыданный, Знач СписокСчетовФактур, ОформленияСтрок)
	
	ЭСФКлиентПереопределяемый.УстановитьПредставлениеСпособаОбменаПриПолученииДанных(ЭтоСчетФактураВыданный, СписокСчетовФактур, ОформленияСтрок);

КонецПроцедуры

// Заполняет колонку "Состояние ЭСФ" текущим состоянием связанного ЭСФ.
//
// Параметры:
//  ЭтоСчетФактураВыданный - Булево - Истина - Выданный, Ложь - Полученный.
//  СписокСчетовФактур - ТабличноеПоле - Табличное поле счетов-фактур.
//  ОформленияСтрок - ОформленияСтрок - Оформление строк табличного поля.
//
Процедура ЗаполнитьКолонкуСостояниеЭСФПриПолученииДанных(Знач ЭтоСчетФактураВыданный, Знач СписокСчетовФактур, ОформленияСтрок)
	
	Если НЕ СписокСчетовФактур.Колонки.СостояниеЭСФ.Видимость Тогда
		Возврат;
	КонецЕсли;
	
	ИмяКолонкиСпособОбмена = ?(ЭтоСчетФактураВыданный, "СпособВыставления", "СпособПолучения");
	ВидимостьКолонкиСпособОбмена = СписокСчетовФактур.Колонки[ИмяКолонкиСпособОбмена].Видимость;
	
	// Заполнить массив данных счетов-фактур.
	МассивДанныхСчетовФактур = Новый Массив;
	Для Каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		ДанныеСчетаФактуры = Новый Структура;
		ДанныеСчетаФактуры.Вставить("СчетФактура", ОформлениеСтроки.ДанныеСтроки.Ссылка);
		Если ВидимостьКолонкиСпособОбмена Тогда
			ДанныеСчетаФактуры.Вставить("СпособОтправкиПолучения", ОформлениеСтроки.ДанныеСтроки[ИмяКолонкиСпособОбмена]);
		Иначе
			ДанныеСчетаФактуры.Вставить("СпособОтправкиПолучения", ОформлениеСтроки.ДанныеСтроки.Ссылка[ИмяКолонкиСпособОбмена]);	
		КонецЕсли;
		МассивДанныхСчетовФактур.Добавить(ДанныеСчетаФактуры);
	КонецЦикла;
	
	// Получить состояния связанных документов ЭСФ.
	КоллекцияСостоянийЭСФ = ЭСФВызовСервера.НоваяКоллекцияСостоянийЭСФ(МассивДанныхСчетовФактур);
	
	// Заполнить колонку "Состояние ЭСФ".
	Для Каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		ОформлениеСтроки.Ячейки.СостояниеЭСФ.ОтображатьТекст = Истина;
		СостояниеЭСФ = КоллекцияСостоянийЭСФ.Получить(ОформлениеСтроки.ДанныеСтроки.Ссылка);
		Если СостояниеЭСФ <> Неопределено Тогда 
			ОформлениеСтроки.Ячейки.СостояниеЭСФ.Текст = СостояниеЭСФ.Представление;
			ОформлениеСтроки.Ячейки.СостояниеЭСФ.ЦветТекста = ЭСФКлиентСервер.ЦветСостоянияЭСФ(СостояниеЭСФ.Состояние); 
		Иначе
			ОформлениеСтроки.Ячейки.СостояниеЭСФ.Текст = "";	
		КонецЕсли;
	КонецЦикла
	
КонецПроцедуры

Процедура ОткрытьФормуСпискаИсходящихЭСФ() Экспорт
	СписокЭСФ(ПредопределенноеЗначение("Перечисление.НаправленияЭСФ.Исходящий"));	
КонецПроцедуры

Процедура ОткрытьФормуСпискаВходящихЭСФ() Экспорт
	СписокЭСФ(ПредопределенноеЗначение("Перечисление.НаправленияЭСФ.Входящий"));	
КонецПроцедуры

// Заполняет массив профилей и паролей доступа к ИС ЭСФ в разрезе организаций
// если не хватает данных, то будем отображать форму ввода данных пользователю
Функция ПолучитьНастройкиПараметровИСЭСФ(Знач КоллекцияСгруппированныхЭСФ) Экспорт
	
	// Использовать текущего пользователя ИБ, если он не задан явно.
	ПользовательИБ = ЭСФКлиентСерверПереопределяемый.ТекущийПользователь();	
	
	НеобходимоВводДанныхПользователем = Ложь;

	СоответствиеОрганизацийИНастроек = Новый Соответствие;
	
	Для Каждого СгруппированныеЭСФ Из КоллекцияСгруппированныхЭСФ Цикл
		
		СтруктурнаяЕдиница = СгруппированныеЭСФ.Ключ;
		МассивПрофилейИСЭСФ = ЭСФВызовСервераПовтИсп.ПрофилиИСЭСФ(СтруктурнаяЕдиница, Неопределено, ПользовательИБ);
		ПрофильИСЭСФ = Неопределено;

		Если МассивПрофилейИСЭСФ.Количество() > 1 Тогда
			НеобходимоВводДанныхПользователем = Истина;
		ИначеЕсли МассивПрофилейИСЭСФ.Количество() = 1 Тогда
			ПрофильИСЭСФ = МассивПрофилейИСЭСФ[0];
			ДанныеПрофиляИСЭСФ = ЭСФВызовСервера.ДанныеПрофиляИСЭСФ(ПрофильИСЭСФ);
			Если НЕ ЗначениеЗаполнено(ДанныеПрофиляИСЭСФ.ТекущийПарольАутентификации) Тогда
				ПарольИСЭСФСеанса = ЭСФКлиент.ПолучитьСеансовыеДанные(ЭСФКлиент.ИмяСеансовыхДанныхПарольАутентификацииИСЭСФ(), ДанныеПрофиляИСЭСФ.ПрофильИСЭСФ.ПользовательИСЭСФ, "");
				Если ЗначениеЗаполнено(ПарольИСЭСФСеанса) Тогда
					НеобходимоВводДанныхПользователем = Ложь;	
					СоответствиеОрганизацийИНастроек.Вставить(СтруктурнаяЕдиница, Новый Структура("ПрофильИСЭСФ, ПарольИСЭСФ", ДанныеПрофиляИСЭСФ.ПрофильИСЭСФ.Ссылка, ПарольИСЭСФСеанса));
				Иначе
					НеобходимоВводДанныхПользователем = Истина;	
				КонецЕсли;
			Иначе
				СоответствиеОрганизацийИНастроек.Вставить(СтруктурнаяЕдиница, Новый Структура("ПрофильИСЭСФ, ПарольИСЭСФ", ДанныеПрофиляИСЭСФ.ПрофильИСЭСФ.Ссылка, ДанныеПрофиляИСЭСФ.ТекущийПарольАутентификации));
			КонецЕсли;
		Иначе
			
			// если не назначен профиль ЭСФ для отправки, то необходимо очистить очередь, тк далее вызываем исключение
			Для Каждого СгруппированныеЭСФ Из КоллекцияСгруппированныхЭСФ Цикл
				ЭСФВызовСервера.ОчиститьОчередьОтправкиЭСФ(СгруппированныеЭСФ.Значение);
				ЭСФКлиент.ОповеститьФормы(ЭСФКлиентСервер.ИмяСобытияЗаписьЭСФ(), СгруппированныеЭСФ.Значение);
			КонецЦикла;
			
			Текст = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(НСтр("ru = 'Невозможно выполнить действие, т.к. для пользователя ""%1"" не задан профиль ИС ЭСФ для работы с предприятием ""%2"".'"),ПользовательИБ,СтруктурнаяЕдиница);
			ВызватьИсключение Текст;
		КонецЕсли;
		
	КонецЦикла;

	Если НеобходимоВводДанныхПользователем Тогда
		СоответствиеОрганизацийИНастроек = Неопределено;
	КонецЕсли;
	
	Возврат СоответствиеОрганизацийИНастроек;
	
КонецФункции

// Определяет необходимость запроса данных у пользователя (сертификатов, паролей) для операция с ИС ЭСФ.
//  В зависимости от установленных параметров может открываться окно ввода данных ИС ЭСФ, либо сразу переходить в процедуре обработчика оповещения.
//
// Параметры 
//  КоллекцияСгруппированныхДокументов - Соответствие - Сгруппированные по структурным единицам документы
//  ОбработчикОповещения - Процедура выполяемая после получения данных
//  ВызвавшийМодуль - модуль подсистемы (ВС/ЭСФ) для формы ввода данных
//  Действие - параметр подсистемы ЭАВР для указания действия при смене статуса документов ЭАВР
//  ОтправкаАВР - параметр подсистемы ЭАВР для указания действия отправки документа
//  ДолжностьВыписывающегоАВР - параметр подсистемы ЭАВР для указания для указание должности при оправки ЭАВР
Процедура ОпределитьНеобходимостьВводаДанныхИСЭСФ(КоллекцияСгруппированныхДокументов, ОбработчикОповещения, ВызвавшийМодуль = Неопределено, Действие = Неопределено, ОтправкаАВР = Ложь, ДолжностьВыписывающегоАВР = Неопределено) Экспорт
	
	ТребуютсяОбаСертификата = ЭСФВызовСервера.ИспользоватьОткрытиеСессииСПодписью() И ЭСФВызовСервера.ИспользоватьВнешнююКриптографиюДляКомпоненты();
	ЗапросСертификатаНеТребуется = ЭСФВызовСервера.ИспользоватьПодписьНовойКомпоненты() И НЕ ЭСФВызовСервера.ИспользоватьВнешнююКриптографиюДляКомпоненты();
	
	Если ЗапросСертификатаНеТребуется Тогда
		
		МассивПрофилейИСЭСФ = ЭСФКлиент.ПолучитьНастройкиПараметровИСЭСФ(КоллекцияСгруппированныхДокументов);
		
		Если МассивПрофилейИСЭСФ <> Неопределено И НЕ ОтправкаАВР И (Действие <> "Подтверждение" И Действие <> "Отклонение") Тогда
			ВыполнитьОбработкуОповещения(ОбработчикОповещения, МассивПрофилейИСЭСФ);
		Иначе
			ПараметрыФормы = Новый Структура("СписокСтруктурныхЕдиниц, ВызвавшийМодуль", КоллекцияСгруппированныхДокументов, ВызвавшийМодуль);
			
			Если Действие = "Подтверждение" ИЛИ Действие = "Отклонение" ИЛИ ОтправкаАВР Тогда
				ПараметрыФормы.Вставить("ТребуетсяУказаниеДолжности", Истина);
			КонецЕсли;
			
			Если ОтправкаАВР = Истина Тогда
				// Получение должности из документа
				ПараметрыФормы.Вставить("ДолжностьИзДокумента", ДолжностьВыписывающегоАВР);
			КонецЕсли;
			
			ЭСФКлиент.ОткрытьФормуВводаДанныхИСЭСФ(ОбработчикОповещения, ПараметрыФормы);
		КонецЕсли;
		
	Иначе
		
		Если ТребуютсяОбаСертификата Тогда
			ПараметрыФормы = Новый Структура("СписокСтруктурныхЕдиниц, ТребуетсяВыборСертификата, ТребуетсяВыборСертификатаВхода, ВызвавшийМодуль", 
			КоллекцияСгруппированныхДокументов, Истина, Истина, ВызвавшийМодуль);
		Иначе
			ПараметрыФормы = Новый Структура("СписокСтруктурныхЕдиниц, ТребуетсяВыборСертификата, ВызвавшийМодуль", 
			КоллекцияСгруппированныхДокументов, Истина, ВызвавшийМодуль);
		КонецЕсли;
		
		Если Действие = "Подтверждение" ИЛИ Действие = "Отклонение" ИЛИ ОтправкаАВР = Истина Тогда
			ПараметрыФормы.Вставить("ТребуетсяУказаниеДолжности", Истина);
		КонецЕсли;
		
		Если ОтправкаАВР = Истина Тогда
			// Получение должности из документа
			ПараметрыФормы.Вставить("ДолжностьИзДокумента", ДолжностьВыписывающегоАВР);
		КонецЕсли;
		
		ЭСФКлиент.ОткрытьФормуВводаДанныхИСЭСФ(ОбработчикОповещения, ПараметрыФормы);
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Обработчики команд подменю ЭСФ в формах счетов-фактур

// Открывает формы создания новых ЭСФ, связанных со счетами-фактурами.
//
// Параметры:
//  Параметр - См. ЭСФКлиент.МассивСчетовФактур().
//
Процедура СоздатьЭСФ(Знач Параметр) Экспорт
	
	Контейнер = ЭСФКлиентСервер.КонтейнерМетодов();	
	Контейнер.СоздатьЭСФ(Параметр);
	
КонецПроцедуры

// Перезаполняет актуальные ЭСФ, связанные со счетами-фактурами.
//
// Параметры:
//  Параметр - См. ЭСФКлиент.МассивСчетовФактур().
//
Процедура ПерезаполнитьЭСФ(Знач Параметр) Экспорт
	
	Контейнер = ЭСФКлиентСервер.КонтейнерМетодов();	
	Контейнер.ПерезаполнитьЭСФ(Параметр);
	
КонецПроцедуры

Процедура ОбновитьЭСФ(Знач Параметр) Экспорт
	
	Контейнер = ЭСФКлиентСервер.КонтейнерМетодов();	
	Контейнер.ОбновитьЭСФ(Параметр);
	
КонецПроцедуры

// Открывает форму отзыва актуальных ЭСФ, связанных со счетами-фактурами.
//
// Параметры:
//  Параметр - См. ЭСФКлиент.МассивСчетовФактур().
//
Процедура ОтозватьЭСФ(Знач Параметр, Знач ЗапускатьФоновоеЗадание) Экспорт
	
	Контейнер = ЭСФКлиентСервер.КонтейнерМетодов();	
	Контейнер.ОтозватьЭСФ(Параметр, ЗапускатьФоновоеЗадание);
	
КонецПроцедуры

Процедура ОткрытьФормуИзменениеСтатусовЭСФ(Знач Действие, Знач МассивЭСФ, Знач ЗапускатьФоновоеЗадание) Экспорт
	
	Контейнер = ЭСФКлиентСервер.КонтейнерМетодов();	
	Контейнер.ОткрытьФормуИзменениеСтатусовЭСФ(Действие, МассивЭСФ, ЗапускатьФоновоеЗадание);
	
КонецПроцедуры

Процедура ОткрытьФормуВводаДанныхИСЭСФ(ОбработчикОповещения = Неопределено, ПараметрыФормы = Неопределено) Экспорт
	
	ИмяОбработки = "Обработка.ОбменЭСФ.Форма.ВводДанныхИСЭСФ";
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		
		Результат = ОткрытьФормуМодально(ИмяОбработки, ПараметрыФормы);
		ВыполнитьОбработкуОповещения(ОбработчикОповещения, Результат);
	
	#ИначеЕсли ТонкийКлиент ИЛИ ВебКлиент ИЛИ ТолстыйКлиентУправляемоеПриложение Тогда
		
		ИспользоватьВнешнююОбработку = ЭСФВызовСервера.ИспользоватьВнешнююОбработку();	
		
		// Это точно клиент на управляемые формы.
		
		Если ИспользоватьВнешнююОбработку Тогда
			ВнешняяОбработкаИмя = ЭСФВызовСервера.ПодключитьВнешнююОбработку();
			ИмяОбработки = "ВнешняяОбработка." + ВнешняяОбработкаИмя + ".Форма.ВводДанныхИСЭСФ";
		КонецЕсли;
		
		ОткрытьФорму(ИмяОбработки, ПараметрыФормы,,,,,ОбработчикОповещения);
		
	#КонецЕсли
	
КонецПроцедуры

Процедура ОткрытьФормуОчередиЭСФ(ОбработчикОповещения = Неопределено, ПараметрыФормы = Неопределено) Экспорт
	
	ИмяОбработки = "Обработка.ОбменЭСФ.Форма.ОчередьОтправкиЭСФ";
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		
		Результат = ОткрытьФорму(ИмяОбработки, ПараметрыФормы);
		ВыполнитьОбработкуОповещения(ОбработчикОповещения, Результат);
	
	#ИначеЕсли ТонкийКлиент ИЛИ ВебКлиент ИЛИ ТолстыйКлиентУправляемоеПриложение Тогда
		
		ИспользоватьВнешнююОбработку = ЭСФВызовСервера.ИспользоватьВнешнююОбработку();	
		
		// Это точно клиент на управляемые формы.
		
		Если ИспользоватьВнешнююОбработку Тогда
			ВнешняяОбработкаИмя = ЭСФВызовСервера.ПодключитьВнешнююОбработку();
			ИмяОбработки = "ВнешняяОбработка." + ВнешняяОбработкаИмя + ".Форма.ОчередьОтправкиЭСФ";
		КонецЕсли;
		
		ОткрытьФорму(ИмяОбработки, ПараметрыФормы,,,,,ОбработчикОповещения);
		
	#КонецЕсли
	
КонецПроцедуры

// Открывает формы актуальных ЭСФ, связанных со счетами-фактурами.
//
// Параметры:
//  Параметр - См. ЭСФКлиент.МассивСчетовФактур().
//
Процедура ОткрытьЭСФ(Знач Параметр) Экспорт
	
	Контейнер = ЭСФКлиентСервер.КонтейнерМетодов();	
	Контейнер.ОткрытьЭСФ(Параметр);
	
КонецПроцедуры

// Открывает форму, в которой отображаются ЭСФ, связанные со счетами-фактурами.
//
// Параметры:
//  Параметр - См. ЭСФКлиент.МассивСчетовФактур().
//
Процедура СвязанныеЭСФ(Знач Параметр) Экспорт
	
	Контейнер = ЭСФКлиентСервер.КонтейнерМетодов();	
	Контейнер.СвязанныеЭСФ(Параметр);
	
КонецПроцедуры

// Открывает форму списка документов ЭСФ.
//
// Параметры:
//  Направление - ПеречислениеСсылка.НаправленияЭСФ, Неопределено - 
//   Влияет на то, какая страница будет видима в форме списка.
//   Если не задан, то будут видимы обе страницы.
//
Процедура СписокЭСФ(Знач Направление = Неопределено) Экспорт
	
	Контейнер = ЭСФКлиентСервер.КонтейнерМетодов();	
	Контейнер.СписокЭСФ(Направление);
	
КонецПроцедуры

// Открывает форму оповещений ИС ЭСФ.
//
// Параметры:
//  ОбработчикОповещения - описание процедуры, которая будет вызвана при закрытии формы
//  ПараметрыФормы - параметры открываемой формы
//
Процедура ОткрытьФормуОповещенийИСЭСФ(ОбработчикОповещения = Неопределено, ПараметрыФормы = Неопределено) Экспорт
	
	ИмяФормы = "РегистрСведений.ОповещенияИСЭСФ.Форма.ФормаСпискаОповещений";
	ОткрытьФорму(ИмяФормы, ПараметрыФормы,,,,,ОбработчикОповещения);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Обработчики событий, в формах счетов-фактур

// Обработчик события ПередЗаписью формы счета-фактуры.
//
// Параметры:
//  Форма - Форма, УправляемаяФорма - Форма документа счета-фактуры.
//
Процедура ФормаСчетаФактурыПередЗаписью(Форма, Отказ) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Ссылка = ?(ЭСФКлиентСервер.ЭтоОбычнаяФорма(Форма), Форма.Ссылка, Форма.Объект.Ссылка);
	Форма.РеквизитыЭСФ.ЗаписатьЭСФ = Ложь;
	
	Если Ссылка.Пустая() И ЗначениеЗаполнено(Форма.РеквизитыЭСФ.СсылкаЭСФ) Тогда
		
		ЭСФ_СчетФактура = ЭСФВызовСервера.ПолучитьЗначениеРеквизита(Форма.РеквизитыЭСФ.СсылкаЭСФ, "СчетФактура");
		
		Если НЕ ЗначениеЗаполнено(ЭСФ_СчетФактура) Тогда
			
			Форма.РеквизитыЭСФ.ЗаписатьЭСФ = Истина;
			
		ИначеЕсли ЭСФ_СчетФактура <> Ссылка Тогда
			
			Форма.РеквизитыЭСФ.ЗаписатьЭСФ = Истина;	
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события ПослеЗаписи формы счета-фактуры.
//
// Параметры:
//  Форма - Форма, УправляемаяФорма - Форма документа счета-фактуры.
//
Процедура ФормаСчетаФактурыПослеЗаписи(Форма) Экспорт
	
	Если Форма.РеквизитыЭСФ.ЗаписатьЭСФ Тогда
		ОповеститьФормы(ЭСФКлиентСервер.ИмяСобытияЗаписьЭСФ(), Форма.РеквизитыЭСФ.СсылкаЭСФ);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик нажатия на гиперссылку ЭСФ в форме счета-фактуры.
//
// Параметры:
//  Форма - Форма, УправляемаяФорма - Форма счета-фактуры, 
//   в которой была нажата гиперссылка ЭСФ.
//
Процедура ПредставлениеЭСФНажатие(Форма) Экспорт
	
	Ссылка = ?(ЭСФКлиентСервер.ЭтоОбычнаяФорма(Форма), Форма.Ссылка, Форма.Объект.Ссылка);
	
	Если ЗначениеЗаполнено(Форма.РеквизитыЭСФ.СсылкаЭСФ) Тогда
		
		ПоказатьЗначение(, Форма.РеквизитыЭСФ.СсылкаЭСФ);
		
	ИначеЕсли ТипЗнч(Ссылка) = ЭСФКлиентСерверПереопределяемый.ТипДокументСсылкаСчетФактураВыданный() Тогда
		
		СоздатьЭСФ(Форма); 
		
	ИначеЕсли ТипЗнч(Ссылка) = ЭСФКлиентСерверПереопределяемый.ТипДокументСсылкаСчетФактураПолученный() Тогда
		
		Если ДокументЗаписан(Форма) Тогда
			
			//++ НЕ ЭСФ
			НайденныеДокументыЭДВС = ЭСФВызовСервера.НаличиеЭДВС(Ссылка);

			Если НайденныеДокументыЭДВС.Количество() > 0 Тогда	
				
				Для Каждого НайденныйДокумент Из НайденныедокументыЭДВС Цикл
					ТекстОшибки = НСтр("ru='На основании учетного документа уже введен %1. Рекомендуем отвязать ЭДВС от документа ""%2"", в противном случае образуются некорректные остатки!'");
					ТекстОшибки = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстОшибки, НайденныйДокумент, ЭСФКлиентПереопределяемый.ИмяДокументаПоступленияТоваровУслуг());
					ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстОшибки);
				КонецЦикла;
			Иначе
			//-- НЕ ЭСФ	
				ПараметрыФормы = Новый Структура;
				
				СтруктураОтборов = ЭСФВызовСервера.НовыйОтборФормыВыбораЭСФ(Ссылка);
				ПараметрыФормы.Вставить("Отбор", СтруктураОтборов.Отбор);
				ПараметрыФормы.Вставить("ПользовательскиеНастройки", СтруктураОтборов.ПользовательскиеНастройки);
				ОткрытьФорму("Документ.ЭСФ.ФормаВыбора", ПараметрыФормы, Форма);
			//++ НЕ ЭСФ	
			КонецЕсли;			
			//-- НЕ ЭСФ
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик выбора в форме счета-фактуры.
//
// Параметры:
//  Форма - Форма, УправляемаяФорма - Форма счета-фактуры, 
//   в которой обрабатывается выбор.
//
Процедура ПредставлениеЭСФОбработкаВыбора(Форма, ЗначениеВыбора, Источник) Экспорт
	
	ЭСФ = ЗначениеВыбора;
	
	Если ТипЗнч(ЭСФ) <> Тип("ДокументСсылка.ЭСФ") Тогда
		Возврат;
	КонецЕсли;
	
	СчетФактура = ?(ЭСФКлиентСервер.ЭтоОбычнаяФорма(Форма), Форма.Ссылка, Форма.Объект.Ссылка);
	
	Если ЭСФКлиентСерверПереопределяемый.ЭтоДокументСсылкаСчетФактураПолученный(ТипЗнч(СчетФактура)) Тогда	
		ЭСФВызовСервера.СвязатьЭСФСоСчетомФактурой(СчетФактура, ЭСФ);
		ЭСФКлиент.ОповеститьФормы(ЭСФКлиентСервер.ИмяСобытияЗаписьЭСФ());
	КонецЕсли;
	
КонецПроцедуры

// Обработчик нажатия на гиперссылку "Сторно" в форме счета-фактуры.
//
// Параметры:
//  Форма - Форма, УправляемаяФорма - Форма счета-фактуры, 
//   в которой была нажата гиперссылка "Сторно".
//
Процедура ПредставлениеСторноНажатие(Форма) Экспорт
	
	СчетФактура = ?(ЭСФКлиентСервер.ЭтоОбычнаяФорма(Форма), Форма.Ссылка, Форма.Объект.Ссылка);
	
	Если Форма.РеквизитыЭСФ.МассивСторнирований.Количество() = 0 Тогда
		ЭСФКлиентПереопределяемый.ОткрытьФормуНовогоСторнирующегоДокумента(СчетФактура);
	ИначеЕсли Форма.РеквизитыЭСФ.МассивСторнирований.Количество() = 1 Тогда
		ПоказатьЗначение(, Форма.РеквизитыЭСФ.МассивСторнирований[0]);
	ИначеЕсли Форма.РеквизитыЭСФ.МассивСторнирований.Количество() > 1 Тогда
		ОткрытьФормуСпискаСторнирований(СчетФактура);	
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события ОбработкаОповещения в формах списков и выбора счетов-фактур.
//
// Параметры:
//  Форма - Форма, УправляемаяФорма - Форма списка или выбора счета-фактуры, в которой обрабатывается оповещение.
//  ИмяТаблицы - Строка - Имя элемента управления, в котором необходимо обновить строки.
//
Процедура СписокСчетовФактурОбработкаОповещения(Форма, ИмяТаблицы, ИмяСобытия, Параметр, Источник) Экспорт
	
	Если ИмяСобытия = ЭСФКлиентСервер.ИмяСобытияЗаписьЭСФ() Тогда
		
		Если ЭСФКлиентСервер.ЭтоОбычнаяФорма(Форма) Тогда
			Форма.ЭлементыФормы[ИмяТаблицы].ОбновитьСтроки();
		Иначе
			Форма.Элементы[ИмяТаблицы].Обновить();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события ПриПолученииДанных списка счетов-фактур.
// Заполняет колонки Способ<Выставления/Получения> и СостояниеЭСФ.
//
// Параметры:
//  ЭтоСчетФактураВыданный - Булево - Истина - Выданный, Ложь - Полученный.
//  СписокСчетовФактур - ТабличноеПоле - Табличное поле счетов-фактур.
//  ОформленияСтрок - ОформленияСтрок - Оформления строк, которые будут заполнены.
//
Процедура СписокСчетовФактурПриПолученииДанных(Знач ЭтоСчетФактураВыданный, Знач СписокСчетовФактур, ОформленияСтрок) Экспорт
	
	УстановитьПредставлениеСпособаОбменаПриПолученииДанных(ЭтоСчетФактураВыданный, СписокСчетовФактур, ОформленияСтрок);	
	ЗаполнитьКолонкуСостояниеЭСФПриПолученииДанных(ЭтоСчетФактураВыданный, СписокСчетовФактур, ОформленияСтрок);
	
КонецПроцедуры

Процедура ПослеЗаписиСторнирующегоДокумента(Форма) Экспорт
	
	Оповестить(ЭСФКлиентСервер.ИмяСобытияЗаписьСторно());
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// См. ЭСФСервер.ВыполнитьЗапросНаИзменениеСтатусов()
Функция ИзменитьСтатусыЭСФ(Знач Действие, Знач КоллецияДляИзмененияСтатусов, Знач ДанныеПрофиляИСЭСФ, Знач ДанныеКлючаЭЦП, Знач УникальныйИдентификатор, Знач ЗапускатьФоновоеЗадание) Экспорт
	
	Контейнер = ЭСФКлиентСервер.КонтейнерМетодов();	
	Возврат Контейнер.ИзменитьСтатусыЭСФ(Действие, КоллецияДляИзмененияСтатусов, ДанныеПрофиляИСЭСФ, ДанныеКлючаЭЦП, УникальныйИдентификатор, ЗапускатьФоновоеЗадание);
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// Работа с паролями

// Возврашает пароль аутентификации ИС ЭСФ.
//
// Если пароль указан в элементе справочника, то возвращает его.
//
// Если пароль сохранен в сеансовых данных и в форме ввода пароля,   
// для этого пользователя, был установлен флажок НеПоказыватьНаВремяСеанса,
// тогда пароль будет получен из сеасновых данных.
//
// Если пароля нет в сеансовых данных или он есть, но в форме ввода пароля,
// для этого пользователя, снят флажок НеПоказыватьНаВремяСеанса,
// то будет открыта форма ввода пароля.
//
// Параметры:
//  ОбработчикОповщенияВыбораДанных
//  ПользователиИСЭСФ - Массив - Пользователи ИС ЭСФ, для которого необходимо получить пароль.
//
// Возвращаемое значение:
//  Строка, Неопределено - Пароль аутентификации ИС ЭСФ.
//   Если пароль найден или введен пользователем, то Строка.
//   Если пользователь отказался от ввода пароля, закрыв форму ввода пароля, то Неопределено. 
//
Процедура ПаролиАутентификации(ОбработчикОповщенияВыбораДанных, ПользователиИСЭСФ, ВызвавшийМодуль = Неопределено) Экспорт
	
	ПользователиПарольИСЭСФ = Новый Соответствие;
	
	МассивПользователейБезПаролей = Новый Массив;
	
	Для Каждого ПользовательИСЭСФ Из ПользователиИСЭСФ Цикл
		
		Пароль = ЭСФВызовСервераПовтИсп.ПарольАутентификации(ПользовательИСЭСФ);
		
		Если ПустаяСтрока(Пароль) Тогда
			
			ИмяСеансовыхДанных = ЭСФКлиент.ИмяСеансовыхДанныхПарольАутентификацииИСЭСФ();
			Пароль = ЭСФКлиент.ПолучитьСеансовыеДанные(ИмяСеансовыхДанных, ПользовательИСЭСФ, "");
			
			ИмяСеансовыхДанных = ЭСФКлиент.ИмяСеансовыхДанныхПоказыватьФормуВводаПароляАутентификации();
			ПоказыватьФормуВводаПароляАутентификации = ЭСФКлиент.ПолучитьСеансовыеДанные(ИмяСеансовыхДанных, ПользовательИСЭСФ, Истина);
			
			Если ПустаяСтрока(Пароль) ИЛИ ПоказыватьФормуВводаПароляАутентификации Тогда
				МассивПользователейБезПаролей.Добавить(ПользовательИСЭСФ);	
			КонецЕсли;
			
		КонецЕсли;
		
		ПользователиПарольИСЭСФ.Вставить(ПользовательИСЭСФ, Пароль);
		
	КонецЦикла;
	
	ПараметрыФормы = Новый Структура;
	// передаем все данные учетных записей
	ПараметрыФормы.Вставить("СписокПользователейИСЭСФ", ПользователиИСЭСФ);
	ПараметрыФормы.Вставить("ВызвавшийМодуль", ВызвавшийМодуль);	
	
	Если МассивПользователейБезПаролей.Количество() > 0 Тогда
		
		ЭСФКлиент.ОткрытьФормуВводаДанныхИСЭСФ(ОбработчикОповщенияВыбораДанных, ПараметрыФормы);
		
	Иначе
		
		ВыполнитьОбработкуОповещения(ОбработчикОповщенияВыбораДанных, ПользователиПарольИСЭСФ);
		
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Работа с данными подсистемы, сохраняемыми на время текущего сеанса

Процедура СохранитьСеансовыеДанные(Знач Имя, Знач Параметр, Знач Значение) Экспорт
	
	ИнициализироватьСеансовыеДанные();	
	СеансовыеДанныеЭСФ[Имя].Вставить(Параметр, Значение);
	
КонецПроцедуры

Процедура УдалитьСеансовыеДанные(Знач Имя, Знач Параметр) Экспорт
	
	ИнициализироватьСеансовыеДанные();
	СеансовыеДанныеЭСФ[Имя].Удалить(Параметр);
	
КонецПроцедуры

Функция ПолучитьСеансовыеДанные(Знач Имя, Знач Параметр, Знач ПустоеЗначение = Неопределено) Экспорт
	
	ИнициализироватьСеансовыеДанные();
	
	Значение = СеансовыеДанныеЭСФ[Имя][Параметр];
	
	Если Значение = Неопределено Тогда
		Значение = ПустоеЗначение;
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

Функция ИмяСеансовыхДанныхПарольКлючевогоКонтейнераЭЦП() Экспорт 
	Возврат "ПарольКлючевогоКонтейнераЭЦП";
КонецФункции

Функция ИмяСеансовыхДанныхПарольАутентификацииИСЭСФ() Экспорт
	Возврат "ПарольАутентификацииИСЭСФ";	
КонецФункции

Функция ИмяСеансовыхДанныхПоказыватьФормуВводаПароляАутентификации() Экспорт
	Возврат "ПоказыватьФормуВводаПароляАутентификации";	
КонецФункции

Функция ИмяСеансовыхДанныхКлючBase64() Экспорт
	Возврат "КлючBase64"; // Ключ ЭЦП в формате Base64.	
КонецФункции

Функция ИмяСеансовыхДанныхПарольКлючевогоКонтейнераВходаЭЦП() Экспорт 
	Возврат "ПарольКлючевогоКонтейнераВходаЭЦП";
КонецФункции

Функция ИмяСеансовыхДанныхКлючВходаBase64() Экспорт
	Возврат "КлючВходаBase64"; // Ключ ЭЦП в формате Base64.	
КонецФункции

Функция ИнициализироватьСеансовыеДанные()
	
	Если СеансовыеДанныеЭСФ = Неопределено Тогда
		СеансовыеДанныеЭСФ = Новый Структура;
		СеансовыеДанныеЭСФ.Вставить(ИмяСеансовыхДанныхПарольКлючевогоКонтейнераЭЦП(), Новый Соответствие);
		СеансовыеДанныеЭСФ.Вставить(ИмяСеансовыхДанныхПарольАутентификацииИСЭСФ(), Новый Соответствие);
		СеансовыеДанныеЭСФ.Вставить(ИмяСеансовыхДанныхПоказыватьФормуВводаПароляАутентификации(), Новый Соответствие);
		СеансовыеДанныеЭСФ.Вставить(ИмяСеансовыхДанныхКлючBase64(), Новый Соответствие);
		СеансовыеДанныеЭСФ.Вставить(ИмяСеансовыхДанныхПарольКлючевогоКонтейнераВходаЭЦП(), Новый Соответствие);
		СеансовыеДанныеЭСФ.Вставить(ИмяСеансовыхДанныхКлючВходаBase64(), Новый Соответствие);
	КонецЕсли;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// Прочие служебные процедуры и функции

// Оповещает формы подсистемы о происхождении события.
//
// Параметры:
//  ИмяСобытия - Строка - Имя произошедшего события, ЭСФКлиентСервер.ИмяСобытия<Имя>().
//  Параметр - Массив, Неопределено - Массив ссылок на измененные или созданные объекты. 
//   Неопределено, если невозможно определить какие объекты были изменены или созданы.
//
Процедура ОповеститьФормы(Знач ИмяСобытия, Знач Параметр = Неопределено, Знач Источник = Неопределено) Экспорт
	
	Оповестить(ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

Процедура ПриНачалеРаботыСистемыЭСФ() Экспорт
	
	Попытка
		
		Параметры = ЭСФВызовСервера.ПараметрыПриНачалеРаботыСистемы();
		
		Если Параметры[ЭСФКлиентСервер.ИмяПараметраСинхронизацияСИСЭСФПриЗапуске()] Тогда
			ОткрытьФорму("Обработка.ОбменЭСФ.Форма.СинхронизацияСИСЭСФ");	
		КонецЕсли;
		
	Исключение
		
		Сообщить(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), СтатусСообщения.Внимание);
		
	КонецПопытки;
	
КонецПроцедуры

Функция ДокументЗаписан(Форма) Экспорт
	
	ТекстВопроса = НСтр(
		"ru = 'Перед выполнением необходимо записать документ.
		|Записать документ?'");	
	
	Возврат ОбъектЗаписан(Форма);
	
КонецФункции

Функция ЭлементСправочникаЗаписан(Форма) Экспорт
	
	ТекстВопроса = НСтр(
		"ru = 'Перед выполнением необходимо записать элемент.
		|Записать элемент?'");
	
	Возврат ОбъектЗаписан(Форма);
	
КонецФункции

Процедура ВопросЗаписатьОбъектПередВыполнением(ОписаниеОповещенияЗавершения, ВидОбъекта = "документ", ИмяСобытия = "Записать") Экспорт
	
	ТекстВопроса = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(НСтр(
		"ru = 'Перед выполнением необходимо %1 %2.
		|%3 документ?'"),НРег(ИмяСобытия),ВидОбъекта, ИмяСобытия);	
		
	ПоказатьВопрос(ОписаниеОповещенияЗавершения, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		
КонецПроцедуры

Функция ОбъектЗаписан(Форма) Экспорт
	
	Ссылка = ?(ЭСФКлиентСервер.ЭтоОбычнаяФорма(Форма), Форма.Ссылка, Форма.Объект.Ссылка);
	
	Если Ссылка.Пустая() ИЛИ Форма.Модифицированность Тогда
		
		Форма.Записать();	
		
	КонецЕсли;
	
	Ссылка = ?(ЭСФКлиентСервер.ЭтоОбычнаяФорма(Форма), Форма.Ссылка, Форма.Объект.Ссылка);
	
	ОбъектЗаписан = (НЕ Ссылка.Пустая()) И (НЕ Форма.Модифицированность);	
	
	Возврат ОбъектЗаписан;
	
КонецФункции

// Возвращает массив счетов-фактур, полученный из формы документа или списка.
//
// Параметры:
//  Параметр - УправляемаяФорма, Форма, Массив, ВыделенныеСтрокиТабличногоПоля - 
//   Форма документа счета-фактуры или выделенные строки списка счетов-фактур.
//
// Возвращаемое значение:
//  Массив, Неопределено - Массив ссылок на счета-фактуры.
//   Если форма документа модифицирована и пользователь отказался от записи, то Неопределено.
//
Функция МассивСчетовФактур(Знач Параметр) Экспорт
	
	ЭтоФорма = Ложь;
	ЭтоКоллекция = Ложь;
	
	#Если ТолстыйКлиентУправляемоеПриложение ИЛИ ТолстыйКлиентОбычноеПриложение Тогда
		Если ТипЗнч(Параметр) = ЭСФКлиентПереопределяемый.ПолучитьТипФормаКлиентскогоПриложения() ИЛИ ТипЗнч(Параметр) = Тип("Форма") Тогда
			ЭтоФорма = Истина;
		ИначеЕсли ТипЗнч(Параметр) = Тип("Массив") ИЛИ ТипЗнч(Параметр) = Тип("ВыделенныеСтрокиТабличногоПоля") Тогда
			ЭтоКоллекция = Истина;	
		КонецЕсли;
	#Иначе
		Если ТипЗнч(Параметр) = ЭСФКлиентПереопределяемый.ПолучитьТипФормаКлиентскогоПриложения() Тогда
			ЭтоФорма = Истина;	
		ИначеЕсли ТипЗнч(Параметр) = Тип("Массив") Тогда
			ЭтоКоллекция = Истина;	
		КонецЕсли;
	#КонецЕсли
	
	Если ЭтоФорма Тогда
		Форма = Параметр;
		// производим запись без вопроса
		Если ЭСФКлиент.ОбъектЗаписан(Форма) Тогда
			СсылкаСчетФактура = ?(ЭСФКлиентСервер.ЭтоОбычнаяФорма(Форма), Форма.Ссылка, Форма.Объект.Ссылка);
			МассивСчетовФактур = Новый Массив;
			МассивСчетовФактур.Добавить(СсылкаСчетФактура);
		Иначе
			МассивСчетовФактур = Неопределено;
		КонецЕсли;	
	ИначеЕсли ЭтоКоллекция Тогда
		КоллекцияСчетовФактур = Параметр;
		МассивСчетовФактур = Новый Массив;
		Для Каждого СсылкаСчетФактура Из КоллекцияСчетовФактур Цикл
			МассивСчетовФактур.Добавить(СсылкаСчетФактура);
		КонецЦикла;			
	КонецЕсли;
	
	Возврат МассивСчетовФактур;
	
КонецФункции

Процедура ОткрытьФормуСпискаСторнирований(Знач СчетФактура = Неопределено) Экспорт
	
	ИмяФормыСписка = "Документ." + ЭСФКлиентСерверПереопределяемый.ИмяСторнирующегоДокумента() + ".ФормаСписка";
	ИмяРеквизита = ЭСФКлиентСерверПереопределяемый.ИмяРеквизитаСчетФактураСторнирующегоДокумента();
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		
		ФормаСписка = ПолучитьФорму(ИмяФормыСписка);
		Если СчетФактура <> Неопределено Тогда
			ФормаСписка.Отбор[ИмяРеквизита].Установить(СчетФактура);
		КонецЕсли;
		ФормаСписка.Открыть();
		
	#Иначе
		
		Если СчетФактура <> Неопределено Тогда
			Отбор = Новый Структура;
			Отбор.Вставить(ИмяРеквизита, СчетФактура);
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Отбор", Отбор);
			ОткрытьФорму(ИмяФормыСписка, ПараметрыФормы);
		Иначе
			ОткрытьФорму(ИмяФормыСписка);
		КонецЕсли;
		
	#КонецЕсли
	
КонецПроцедуры

// Проверяет даты отправляемых ЭСФ, если они отличаются от текущих, то предлагает изменить даты.
// Если пользователь согласится, то изменяет даты документов ЭСФ и связанных счетов-фактур.
//
// Параметры:
//  МассивЭСФ - Массив - Массив ЭСФ, для которых необходимо установить текущую дату.
//   Каждый элемент массива должен иметь тип ДокументСсылка.ЭСФ.
//  Действие - Строка - ЭСФКлиентСервер.ДействиеОтправка(), ЭСФКлиентСервер.ДействиеВыгрузка().
//
// Возвращаемое значение:
//  Булево - Истина - Можно продолжить отправку, Ложь - в противном случае.
//
Процедура УстановитьТекущуюДатуДляЭСФИСчетовФакутурВопрос(Знач МассивЭСФ, Знач Действие, Знач ОписаниеОповещения) Экспорт
	
	ТекущаяДата = НачалоДня(ЭСФВызовСервера.ТекущаяДатаНаСервере());	
	ИзмененГод  = Ложь;
	МассивЭСФДругаяДата = ЭСФВызовСервера.МассивЭСФДругаяДата(МассивЭСФ, ТекущаяДата, ИзмененГод);
	
	Если ИзмененГод Тогда
		СообщениеОСменеНомеровДокументов = Символы.ПС + НСтр("ru = 'ВНИМАНИЕ!!! При изменении года будут изменены номера документов!'");
	Иначе
		СообщениеОСменеНомеровДокументов = "";
	КонецЕсли;
	
	Если Действие = ЭСФКлиентСервер.ДействиеОтправка() Тогда
		ТекстТипЭСФ = НСтр("ru = 'Отправляемый'");
	Иначе
		ТекстТипЭСФ = НСтр("ru = 'Выгружаемый'");
	КонецЕсли;
	
	Если МассивЭСФДругаяДата.Количество() = 1 Тогда
		
		Если МассивЭСФДругаяДата[0].ПризнакВыписки И МассивЭСФДругаяДата[0].ДатаЭСФОтличнаОтТекущей Тогда
			ТекстВопроса = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(НСтр(
			"ru = 'Дата ""%1"" отличается от текущей (%2).
			|%3 электронный счет-фактура должен иметь текущую дату.
			|Изменить дату электронного счета-фактуры на текущую (%2)? %4'"),
			ЭСФКлиентСервер.КраткоеПредставлениеЭСФ(МассивЭСФДругаяДата[0].ЭСФ),Формат(ТекущаяДата, "ДФ=dd.MM.yyyy"),ТекстТипЭСФ,СообщениеОСменеНомеровДокументов);
		Иначе
			ТекстДокументов = "";
				
			Если МассивЭСФДругаяДата[0].ДатаЭСФОтличнаОтТекущей Тогда
				
				ТекстЭСФ = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(НСтр("ru='Дата ""%1"" отличается от текущей (%2).'"),
					ЭСФКлиентСервер.КраткоеПредставлениеЭСФ(МассивЭСФДругаяДата[0].ЭСФ),Формат(ТекущаяДата, "ДФ=dd.MM.yyyy"));
			    				
				ТекстДокументов = ТекстДокументов + ТекстЭСФ + Символы.ПС +
				ТекстТипЭСФ + НСтр("ru=' электронный счет-фактура должен иметь текущую дату.'") + Символы.ПС;
			КонецЕсли;
			
			Если МассивЭСФДругаяДата[0].ДатаСФОтличнаОтТекущей Тогда				
				ТекстСФ = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(НСтр("ru='Дата ""%1"" отличается от текущей (%2).'"),МассивЭСФДругаяДата[0].СФ,Формат(ТекущаяДата, "ДФ=dd.MM.yyyy"));
				ТекстДокументов = ТекстДокументов + ТекстСФ;				
			КонецЕсли;

			Если МассивЭСФДругаяДата[0].ДатаЭСФОтличнаОтТекущей и МассивЭСФДругаяДата[0].ДатаСФОтличнаОтТекущей Тогда
				ВопросЗаменыДаты = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(НСтр("ru='Изменить дату электронного счета-фактуры и связанного счета-фактуры на текущую (%1)?'"),Формат(ТекущаяДата, "ДФ=dd.MM.yyyy"));
			ИначеЕсли МассивЭСФДругаяДата[0].ДатаЭСФОтличнаОтТекущей Тогда
				ВопросЗаменыДаты = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(НСтр("ru='Изменить дату электронного счета-фактуры на текущую (%1)?'"),Формат(ТекущаяДата, "ДФ=dd.MM.yyyy"));
			Иначе
				ВопросЗаменыДаты = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(НСтр("ru='Изменить дату связанного счета-фактуры на текущую (%1)?'"),Формат(ТекущаяДата, "ДФ=dd.MM.yyyy"));
			КонецЕсли;
			
			ТекстВопроса = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(НСтр(
			"ru = '%1
			|%2 %3'"), ТекстДокументов, ВопросЗаменыДаты, СообщениеОСменеНомеровДокументов);
			
		КонецЕсли;
	
		ОписаниеОповещения.ДополнительныеПараметры.Вставить("ТекущаяДата", ТекущаяДата);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
				
	ИначеЕсли МассивЭСФДругаяДата.Количество() > 1 Тогда
		
		ТекстВопроса = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(НСтр(
			"ru = 'Даты %1 связанных счетов-фактур / электронных счетов-фактур отличаются от текущей (%2):
			|%3 электронные счета-фактуры должны иметь текущую дату.
			|Изменить даты электронных счетов-фактур и связанных счетов-фактур на текущую (%2)? %4'"),
			МассивЭСФДругаяДата.Количество(),Формат(ТекущаяДата, "ДФ=dd.MM.yyyy"),ТекстТипЭСФ,СообщениеОСменеНомеровДокументов);
		
		ОписаниеОповещения.ДополнительныеПараметры.Вставить("ТекущаяДата", ТекущаяДата);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
		
	Иначе
		
		ОписаниеОповещения.ДополнительныеПараметры.Вставить("ТекущаяДата", ТекущаяДата);
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, Новый Структура("Ответ, ТекущаяДата", КодВозвратаДиалога.Пропустить, ТекущаяДата));
		
	КонецЕсли;
	
КонецПроцедуры

// Сохраняет XML строку, содержащую пакет ЭСФ, в файл.
//
// Параметры:
//  XML - Строка - Пакет ЭСФ для импорта в ИС ЭСФ.
//
Процедура СохранитьXMLДляИмпортаВИСЭСФ(XML) Экспорт
	
	ИмяФайла = НСтр("ru = '%ДатаФормирования% Пакет счетов-фактур'");
	ИмяФайла = СтрЗаменить(ИмяФайла, "%ДатаФормирования%", Формат(ЭСФВызовСервера.ТекущаяДатаНаСервере(), "ДФ=yyyy-MM-dd"));
	
	#Если ВебКлиент Тогда
		
		ПолучитьФайл(ЭСФВызовСервера.ПоместитьДанныеВоВременноеХранилище(XML), ИмяФайла + ".xml");
		
		Сообщить(НСтр("ru = 'Выгруженные счета-фактуры можно импортировать в ИС ЭСФ, а затем отправить получателю средствами ИС ЭСФ.'"));
		
	#Иначе
		
		ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
		
		ДиалогВыбораФайла.ПолноеИмяФайла = ИмяФайла;	
		ДиалогВыбораФайла.Расширение = "xml";
		ДиалогВыбораФайла.Фильтр = "Пакет электронных счетов-фактур (*.xml)|*.xml";
		
		ДополнительныеПараметры = Новый Структура("XML", XML);
		СохранитьXMLДляИмпортаВИСЭСФЗав = Новый ОписаниеОповещения("СохранитьXMLДляИмпортаВИСЭСФЗавершение", ЭСФКлиент, ДополнительныеПараметры);
		ДиалогВыбораФайла.Показать(СохранитьXMLДляИмпортаВИСЭСФЗав);
		
	#КонецЕсли
	
КонецПроцедуры

Процедура СохранитьXMLДляИмпортаВИСЭСФЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ВыбранныеФайлы.Количество() = 1 Тогда

		ЗаписьТекста = Новый ЗаписьТекста();
		ЗаписьТекста.Открыть(ВыбранныеФайлы[0], "UTF-8");			
		ЗаписьТекста.Записать(ДополнительныеПараметры.XML);
		ЗаписьТекста.Закрыть();	
		
		ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(НСтр(
			"ru = 'Выгрузка электронных счетов-фактур успешно завершена.
			|Выгруженные счета-фактуры можно импортировать в ИС ЭСФ, а затем отправить получателю средствами ИС ЭСФ.'"));
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОткрытьНавигационнуюСсылку(Ссылка) Экспорт
	
	ОбщегоНазначенияКлиент.ОткрытьНавигационнуюСсылку(Ссылка);
	
КонецПроцедуры

Процедура ПоказатьПредупреждениеМестоУстановкиБиблиотеки(МестоУстановкиБиблиотеки) Экспорт
	
	Если МестоУстановкиБиблиотеки <> ПредопределенноеЗначение("Перечисление.МестаВыполненияКриптографическихОпераций.НаСервере")
		ИЛИ НЕ ЭСФКлиентСерверПереопределяемый.ПоказыватьОповещенияСервернаяКриптография() Тогда
		Возврат;
	КонецЕсли;
	
	ТекстОповещения = НСтр("ru = 'Место выполнения криптографических операций установлено в режим ""На сервере 1С:Предприятие"", поддержка которого будет прекращена в последующих релизах.
	|Рекомендуется перейти на вариант ""На компьютерах пользователей"".'");
	
	Сообщение = Новый СообщениеПользователю();
	Сообщение.Текст = ТекстОповещения;
	Сообщение.Сообщить();
	
КонецПроцедуры

Функция ТекстВопросаМестоУстановкиБиблиотекиПриИзменении() Экспорт
	Возврат НСтр("ru='При использовании варианта ""На компьютерах пользователей"" возможно потребуется настройка клиентской среды.
			|После сохранения настроек, включение варианта ""На сервере 1С:Предприятие"" будет недоступно. Продолжить?'");
КонецФункции

Процедура ОбработкаНавигационнойСсылкиМестоУстановкиБиблиотеки(НавигационнаяСсылка, СтандартнаяОбработка, Владелец) Экспорт
	
	Если НавигационнаяСсылка = "ОткрытьНастройкиЭСФ" Тогда
		
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму("Обработка.ОбменЭСФ.Форма.НастройкиОбменаЭСФ", , Владелец);
		
	КонецЕсли;
	
КонецПроцедуры

#Область ЗагрузкаНоменклатурыГСВС

//Загружает номенклатуру ГСВС из файла
Процедура ЗагрузитьНоменклатуруГСВСИзФайла(ПараметрыВызова) Экспорт
	Контейнер = ВСКлиентСервер.КонтейнерМетодов();	
	Контейнер.ЗагрузитьНоменклатуруГСВСИзФайла(ПараметрыВызова);	
КонецПроцедуры

#КонецОбласти

#Область ПодписьДанных

// Открывает сессии с подписью для переданных данных с профилей ИСЭСФ.
//
// Параметры:
//  ДанныеПрофилейИСЭСФ - Массив или Соответствие, или Ссылка  на справочник ПрофилиИСЭСФ,
//   по которым(му) происходит открытие сессий.
//  ПараметрыОткрытияСессии - Структура - параметры для открытия сессии с подписью,
//   функция для получения параметров - ЭСФКлиентСервер.ПолучитьПараметрыОткрытияСессииСПодписьюПоУмолчанию().
//
// Возвращаемое значение:
//  <Булево> - Результат работы функции.
//
Функция ОткрытьСессиюСПодписьюДляПрофилей(ДанныеПрофилейИСЭСФ,ПараметрыОткрытияСессии = Неопределено) Экспорт
	
	Если ДанныеПрофилейИСЭСФ = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ПараметрыОткрытияСессии = Неопределено Тогда
		ПараметрыОткрытияСессии = ЭСФКлиентСервер.ПолучитьПараметрыОткрытияСессииСПодписьюПоУмолчанию();
	КонецЕсли;
	
	Если ЭСФВызовСервера.ИспользоватьОткрытиеСессииСПодписью() Тогда
		
		Если ТипЗнч(ДанныеПрофилейИСЭСФ) = Тип("Массив") Тогда
			
			Для каждого ДанныеПрофиля Из ДанныеПрофилейИСЭСФ Цикл
				
				ДанныеКлючаЭЦП = Новый Структура;
				Если ЭСФВызовСервера.ИспользоватьВнешнююКриптографиюДляКомпоненты() Тогда
					ДанныеКлючаЭЦП = Новый Структура;
					ДанныеКлючаЭЦП.Вставить("КлючBase64", ДанныеПрофиля.КлючВходаBase64);
					ДанныеКлючаЭЦП.Вставить("Пароль", ДанныеПрофиля.ПарольВхода);
				КонецЕсли;
				
				ИдентификаторСессии = ОткрытьСессиюСПодписьюПользователя(ДанныеПрофиля, ПараметрыОткрытияСессии, ДанныеКлючаЭЦП);
				Если ИдентификаторСессии = Неопределено Тогда
					ТекстСообщения = нСтр("ru='При открытии сессии возникла ошибка.'") ;
					ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
					Возврат Ложь;
				КонецЕсли;
				
			КонецЦикла;
			
		ИначеЕсли ТипЗнч(ДанныеПрофилейИСЭСФ) = Тип("СправочникСсылка.ПрофилиИСЭСФ") Тогда
			
			ИдентификаторСессии = ОткрытьСессиюСПодписьюПользователя(ДанныеПрофилейИСЭСФ, ПараметрыОткрытияСессии);
			Если ИдентификаторСессии = Неопределено Тогда
				ТекстСообщения = нСтр("ru='При открытии сессии возникла ошибка.'") ;
				ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
				Возврат Ложь;
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(ДанныеПрофилейИСЭСФ) = Тип("Соответствие") Тогда
			Для каждого ДанныеПрофиля Из ДанныеПрофилейИСЭСФ Цикл
				
				ДанныеКлючаЭЦП = Новый Структура;
				Если ЭСФВызовСервера.ИспользоватьВнешнююКриптографиюДляКомпоненты() Тогда
					ДанныеКлючаЭЦП = Новый Структура;
					ДанныеКлючаЭЦП.Вставить("КлючBase64", ДанныеПрофиля.Значение.КлючВходаBase64);
					ДанныеКлючаЭЦП.Вставить("Пароль", ДанныеПрофиля.Значение.ПарольВхода);
					ДанныеКлючаЭЦП.Вставить("АдресКлюча", ДанныеПрофиля.Значение.АдресКлючаВхода);
				
				КонецЕсли; 
				
				ИдентификаторСессии = ОткрытьСессиюСПодписьюПользователя(ДанныеПрофиля.Значение.ПрофильИСЭСФ, ПараметрыОткрытияСессии, ДанныеКлючаЭЦП);
				Если ИдентификаторСессии = Неопределено Тогда
					ТекстСообщения = нСтр("ru='При открытии сессии возникла ошибка.'") ;
					ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
					Возврат Ложь;
				КонецЕсли;
			КонецЦикла;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

//Функция открытия сессии с подписью авторизационного тикета.
//Выполнена только на клиенте так как подпись через NCA Layer с которым обмен может идти только на клиенте
Функция ОткрытьСессиюСПодписьюПользователя(ПрофильИСЭСФ, ПараметрыОткрытияСессии = Неопределено, ДанныеКлючаЭЦП = Неопределено) Экспорт
	
	Если ПараметрыОткрытияСессии = Неопределено Тогда
		ПараметрыОткрытияСессии = ЭСФКлиентСервер.ПолучитьПараметрыОткрытияСессииСПодписьюПоУмолчанию();
	КонецЕсли;
	
	ИдентификаторСессии = Неопределено;
	ИдентификаторСессииВС = Неопределено;
	
	ДанныеПрофиляИСЭСФ = ЭСФВызовСервера.ДанныеПрофиляИСЭСФ(ПрофильИСЭСФ);
	
	Если ПараметрыОткрытияСессии.ОткрытьСессиюБезПроверок Тогда
		//++ НЕ ЭСФ
		Если ПараметрыОткрытияСессии.ТребуетсяДополнительноеОткрытиеСессииВС
			И ПараметрыОткрытияСессии.ВедетсяУчетПоИдентификаторамТоваровВС Тогда
			ИдентификаторСессии = ОткрытьСессииСПодписьюЭСФИВС(ПрофильИСЭСФ, ПараметрыОткрытияСессии, ДанныеКлючаЭЦП);
		Иначе
		//-- НЕ ЭСФ
			ИдентификаторСессии = ОткрытьСессиюСПодписью(ПрофильИСЭСФ, ПараметрыОткрытияСессии, ДанныеКлючаЭЦП);
		//++ НЕ ЭСФ
		КонецЕсли;
		//-- НЕ ЭСФ
		Возврат ИдентификаторСессии;
	Иначе
		//++ НЕ ЭСФ
		Если ПараметрыОткрытияСессии.ТребуетсяДополнительноеОткрытиеСессииВС
			И ПараметрыОткрытияСессии.ВедетсяУчетПоИдентификаторамТоваровВС Тогда
			ИдентификаторСессии = ЭСФВызовСервера.ОткрытьСессиюСПодписьюПредварительно(ДанныеПрофиляИСЭСФ,ПараметрыОткрытияСессии);
			ИдентификаторСессииВС = ВСВызовСервера.ОткрытьСессиюСПодписьюПредварительно(ДанныеПрофиляИСЭСФ,ПараметрыОткрытияСессии);
		Иначе
		//-- НЕ ЭСФ
			
			Если ПараметрыОткрытияСессии.ИмяМодуля = "ESF" Тогда
				ИдентификаторСессии = ЭСФВызовСервера.ОткрытьСессиюСПодписьюПредварительно(ДанныеПрофиляИСЭСФ,ПараметрыОткрытияСессии);
			//++ НЕ ЭСФ
			Иначе
				ИдентификаторСессии = ВСВызовСервера.ОткрытьСессиюСПодписьюПредварительно(ДанныеПрофиляИСЭСФ,ПараметрыОткрытияСессии);
			//-- НЕ ЭСФ
			КонецЕсли;
			
		//++ НЕ ЭСФ
		КонецЕсли;
		//-- НЕ ЭСФ
	КонецЕсли;
	
	//++ НЕ ЭСФ
	Если ПараметрыОткрытияСессии.ТребуетсяДополнительноеОткрытиеСессииВС
		И ПараметрыОткрытияСессии.ВедетсяУчетПоИдентификаторамТоваровВС Тогда
		Если Не ЗначениеЗаполнено(ИдентификаторСессии)
			 ИЛИ Не ЗначениеЗаполнено(ИдентификаторСессииВС) Тогда
			
			ИдентификаторСессии = ОткрытьСессииСПодписьюЭСФИВС(ПрофильИСЭСФ, ПараметрыОткрытияСессии, ДанныеКлючаЭЦП);
			
		КонецЕсли;
	Иначе
	//-- НЕ ЭСФ
			
		Если Не ЗначениеЗаполнено(ИдентификаторСессии) Тогда
			ИдентификаторСессии = ОткрытьСессиюСПодписью(ПрофильИСЭСФ, ПараметрыОткрытияСессии, ДанныеКлючаЭЦП);
		КонецЕсли;
	//++ НЕ ЭСФ
	КонецЕсли;
	//-- НЕ ЭСФ
	
	Возврат ИдентификаторСессии;
	
КонецФункции

//Функция открытия сессии с подписью авторизационного тикета.
//Выполнена только на клиенте так как подпись через NCA Layer с которым обмен может идти только на клиенте
Функция ОткрытьСессиюСПодписью(ПрофильИСЭСФ, ПараметрыОткрытияСессии = Неопределено, ДанныеКлючаЭЦП = Неопределено) Экспорт
	
	ИдентфикаторСессии = Неопределено;
	
	Если ПараметрыОткрытияСессии = Неопределено Тогда
		ПараметрыОткрытияСессии = ЭСФКлиентСервер.ПолучитьПараметрыОткрытияСессииСПодписьюПоУмолчанию();
	КонецЕсли;
	
	Если ЭСФВызовСервера.ИспользоватьОткрытиеСессииСПодписью() Тогда
		ДанныеПрофиляИСЭСФ = ЭСФВызовСервера.ДанныеПрофиляИСЭСФ(ПрофильИСЭСФ);
		Если ПараметрыОткрытияСессии.ИмяМодуля = "ESF" Тогда
			АвторизационныйТикет = ЭСФВызовСервера.ПолучитьАвторизационныйТикет(ДанныеПрофиляИСЭСФ);
		//++ НЕ ЭСФ
		ИначеЕсли ПараметрыОткрытияСессии.ИмяМодуля = "VS" Тогда
			АвторизационныйТикет = ВСВызовСервера.ПолучитьАвторизационныйТикет(ДанныеПрофиляИСЭСФ);
		//-- НЕ ЭСФ
		Иначе
			//неизвестный модуль - Исключение
		КонецЕсли;
		
		ДанныеДляПодписиJSON = ЭСФВызовСервера.ЭСФ_ЗаписатьЗначениеJSON(АвторизационныйТикет);
		
		ПараметрыКлюча = ЭСФКлиентСервер.ПодготовитьПараметрыКлючаДляПодписи(ДанныеКлючаЭЦП);
		
		БИН = ДанныеПрофиляИСЭСФ.СтруктурнаяЕдиница.ИдентификационныйНомер;
		ИмяАутентификации = ДанныеПрофиляИСЭСФ.ПользовательИСЭСФ.ИмяАутентификации;
		ПредставлениеОрганизации = ДанныеПрофиляИСЭСФ.СтруктурнаяЕдиница.Представление;
		ИмяСервиса = "1CService";
		
		ПараметрыПодписи = ЭлектронноеВзаимодействиеССервисамиВызовСервера.ПолучитьПараметрыКомпонентыЭСФ(БИН, Истина, ИмяАутентификации, Истина, ДанныеПрофиляИСЭСФ.СтруктурнаяЕдиница.Ссылка, ПараметрыКлюча);
		
		Если Не ЗначениеЗаполнено(ПараметрыПодписи) Тогда
			ЭСФКлиентСервер.УдалитьВременныйФайлКлюча(ПараметрыКлюча);
			Возврат ИдентфикаторСессии;
		КонецЕсли;
		
		СлужебнаяМеткаКомпоненты = "";
		
		Если ЭСФВызовСервера.ИспользоватьВнешнююКриптографиюДляКомпоненты() Тогда
			Если ЭСФВызовСервераПовтИсп.ВыполнятьКриптографическиеОперацииНаКлиенте() Тогда
				ПодписьВФорматеJSON = ЭСФКлиентСервер.СоздатьЭЦПXML(ДанныеДляПодписиJSON, БИН, ИмяСервиса, ПараметрыПодписи, ПредставлениеОрганизации, СлужебнаяМеткаКомпоненты);
			Иначе
				ПодписьВФорматеJSON = ЭСФВызовСервера.СоздатьЭЦПXML(ДанныеДляПодписиJSON, БИН, ИмяСервиса, ПараметрыПодписи, ПредставлениеОрганизации, СлужебнаяМеткаКомпоненты);
			КонецЕсли;
		Иначе
			ПодписьВФорматеJSON = СоздатьЭЦПXML(ДанныеДляПодписиJSON, БИН, ИмяСервиса, ПараметрыПодписи, ПредставлениеОрганизации, СлужебнаяМеткаКомпоненты);
		КонецЕсли;
		
		Попытка
			ЭлектронноеВзаимодействиеССервисамиВызовСервера.ОбработкаВызоваКомпоненты(ДанныеПрофиляИСЭСФ.СтруктурнаяЕдиница.Ссылка, СлужебнаяМеткаКомпоненты);
		Исключение
			ЭСФВызовСервера.СоздатьЗаписьЖурналаРегистрации(
				НСтр("ru = 'Ошибка обработки данных вызова компоненты'"), "Ошибка", , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
		ЭСФКлиентСервер.УдалитьВременныйФайлКлюча(ПараметрыКлюча);
		
		Если ПодписьВФорматеJSON.Свойство("Code") и ПодписьВФорматеJSON.code = "200" Тогда
			РезультатПодписиXML = ПодписьВФорматеJSON.responseObject;
			Если ПараметрыОткрытияСессии.ИмяМодуля = "ESF" Тогда
				ИдентфикаторСессии = ЭСФВызовСервера.ОткрытьСессиюСПодписью(ДанныеПрофиляИСЭСФ,,РезультатПодписиXML);
				//++ НЕ ЭСФ
			ИначеЕсли ПараметрыОткрытияСессии.ИмяМодуля = "VS" Тогда
				ИдентфикаторСессии = ВСВызовСервера.ОткрытьСессиюСПодписью(ДанныеПрофиляИСЭСФ,,РезультатПодписиXML);
				//-- НЕ ЭСФ
			Иначе
				//неизвестный модуль - Исключение
			КонецЕсли;	
			//Иначе
			//	// возврат ошибки от ВК
			//	ЭСФКлиентСервер.СообщитьПользователю(ОбработатьСообщениеОбОшибке(ПодписьВФорматеJSON));
		КонецЕсли;
	КонецЕсли;
	
	Возврат ИдентфикаторСессии;
	
КонецФункции

//Функция предназначена для обработки сообщений об ошибке, полученных со стороны компоненты
Функция ОбработатьСообщениеОбОшибке(ОтветСокетаJson) Экспорт
	СообщениеОбОшибке = "";
	Если ОтветСокетаJson = Неопределено Тогда
		СообщениеОбОшибке = НСтр("ru='Возникла проблема при использовании NCALayer. Возможно, программа не запущена, или не установлен модуль ""1С-Рейтинг ЭДО""'");
	Иначе
		Если ОтветСокетаJson.Свойство("Code") Тогда
			Если ОтветСокетаJson.code = "500" Тогда
				Если ОтветСокетаJson.Свойство("message") Тогда
					Если ОтветСокетаJson.message = "action.canceled" Тогда
						СообщениеОбОшибке = Нстр("ru='Отмена выбора ключа подписи.'");
					Иначе
						СообщениеОбОшибке = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(Нстр("ru='Тех. информация: %1'"),ОтветСокетаJson.message);						
					КонецЕсли;
				Иначе
					СообщениеОбОшибке = НСтр("ru='Неквалифицированная ошибка вызова внешней компоненты.'");
				КонецЕсли;
			ИначеЕсли ОтветСокетаJson.code = "101" Тогда
				СообщениеОбОшибке = НСтр("ru='Ошибка перекодировки данных.'");
			ИначеЕсли ОтветСокетаJson.code = "201" Тогда
				СообщениеОбОшибке = НСтр("ru='Ошибка входных параметров.'");
			ИначеЕсли ОтветСокетаJson.code = "300" Тогда
				СообщениеОбОшибке = НСтр("ru='Ошибка при работе с сокетом.'");
			ИначеЕсли ОтветСокетаJson.Свойство("message") Тогда
				СообщениеОбОшибке = ОтветСокетаJson.message;
			КонецЕсли;
		Иначе
			СообщениеОбОшибке = НСтр("ru='Ошибка вызова внешней компоненты.'");
		КонецЕсли;
	КонецЕсли;
	
	//обработка пустого сообщения
	Если СообщениеОбОшибке = "" Тогда
		СообщениеОбОшибке = НСтр("ru='Ошибка при работе внешней компоненты.'");
	КонецЕсли;
	Возврат СообщениеОбОшибке;
КонецФункции

//++ НЕ ЭСФ
//Функция открытия сессии с подписью авторизационных тикетов ЭСФ И ВС.
//Выполнена только на клиенте так как подпись через NCA Layer с которым обмен может идти только на клиенте
Функция ОткрытьСессииСПодписьюЭСФИВС(ПрофильИСЭСФ, ПараметрыОткрытияСессии = Неопределено, ДанныеКлючаЭЦП = Неопределено) Экспорт
	
	ИдентфикаторСессии = Неопределено;
	
	Если ЭСФВызовСервера.ИспользоватьОткрытиеСессииСПодписью() Тогда
		ДанныеПрофиляИСЭСФ = ЭСФВызовСервера.ДанныеПрофиляИСЭСФ(ПрофильИСЭСФ);
		АвторизационныйТикет   = ЭСФВызовСервера.ПолучитьАвторизационныйТикет(ДанныеПрофиляИСЭСФ);
		АвторизационныйТикетВС = ВСВызовСервера.ПолучитьАвторизационныйТикет(ДанныеПрофиляИСЭСФ);
		
		МассивТикетов = Новый Массив;
		МассивТикетов.Добавить(АвторизационныйТикет);
		МассивТикетов.Добавить(АвторизационныйТикетВС);
		
		ДанныеДляПодписиJSON = ЭСФВызовСервера.ЭСФ_ЗаписатьЗначениеJSON(МассивТикетов);
		
		ПараметрыКлюча = ЭСФКлиентСервер.ПодготовитьПараметрыКлючаДляПодписи(ДанныеКлючаЭЦП);
		
		БИН = ДанныеПрофиляИСЭСФ.СтруктурнаяЕдиница.ИдентификационныйНомер;
		ИмяАутентификации = ДанныеПрофиляИСЭСФ.ПользовательИСЭСФ.ИмяАутентификации;
		ПредставлениеОрганизации = ДанныеПрофиляИСЭСФ.СтруктурнаяЕдиница.Представление;
		ИмяСервиса = "1CService";
		
		ПараметрыПодписи = ЭлектронноеВзаимодействиеССервисамиВызовСервера.ПолучитьПараметрыКомпонентыЭСФ(БИН, Истина, ИмяАутентификации, Истина, ДанныеПрофиляИСЭСФ.СтруктурнаяЕдиница.Ссылка, ПараметрыКлюча);
		
		Если Не ЗначениеЗаполнено(ПараметрыПодписи) Тогда
			ЭСФКлиентСервер.УдалитьВременныйФайлКлюча(ПараметрыКлюча);
			Возврат ИдентфикаторСессии;
		КонецЕсли;
		
		СлужебнаяМеткаКомпоненты = "";
		
		Если ЭСФВызовСервера.ИспользоватьВнешнююКриптографиюДляКомпоненты() Тогда
			Если ЭСФВызовСервераПовтИсп.ВыполнятьКриптографическиеОперацииНаКлиенте() Тогда
				ПодписьВФорматеJSON = ЭСФКлиентСервер.СоздатьЭЦПXMLs(ДанныеДляПодписиJSON, БИН, ИмяСервиса, ПараметрыПодписи, ПредставлениеОрганизации, СлужебнаяМеткаКомпоненты);
			Иначе
				ПодписьВФорматеJSON = ЭСФВызовСервера.СоздатьЭЦПXMLs(ДанныеДляПодписиJSON, БИН, ИмяСервиса, ПараметрыПодписи, ПредставлениеОрганизации, СлужебнаяМеткаКомпоненты);
			КонецЕсли;
		Иначе
			ПодписьВФорматеJSON = СоздатьЭЦПXMLs(ДанныеДляПодписиJSON, БИН, ИмяСервиса, ПараметрыПодписи, ПредставлениеОрганизации, СлужебнаяМеткаКомпоненты);
		КонецЕсли;
		
		Попытка
			ЭлектронноеВзаимодействиеССервисамиВызовСервера.ОбработкаВызоваКомпоненты(ДанныеПрофиляИСЭСФ.СтруктурнаяЕдиница.Ссылка, СлужебнаяМеткаКомпоненты);
		Исключение
			ЭСФВызовСервера.СоздатьЗаписьЖурналаРегистрации(
				НСтр("ru = 'Ошибка обработки данных вызова компоненты'"), "Ошибка", , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
		ЭСФКлиентСервер.УдалитьВременныйФайлКлюча(ПараметрыКлюча);
		
		Если ПодписьВФорматеJSON.Свойство("Code") и ПодписьВФорматеJSON.code = "200" Тогда
			
			ИдентификаторыСессийЭСФИВС = Новый Структура;
			
			РезультатПодписиXML = ПодписьВФорматеJSON.responseObject[0];
			ИдентификаторыСессийЭСФИВС.Вставить("ИдентфикаторСессии",
			ЭСФВызовСервера.ОткрытьСессиюСПодписью(ДанныеПрофиляИСЭСФ,,РезультатПодписиXML));
			
			РезультатПодписиXML = ПодписьВФорматеJSON.responseObject[1];
			ИдентификаторыСессийЭСФИВС.Вставить("ИдентфикаторСессииВС",
			ВСВызовСервера.ОткрытьСессиюСПодписью(ДанныеПрофиляИСЭСФ,,РезультатПодписиXML));
			
			Возврат ИдентификаторыСессийЭСФИВС;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат ИдентфикаторСессии;
	
КонецФункции
//-- НЕ ЭСФ

Функция СоздатьЭЦПXML(Знач ДанныеДляПодписиJSON, БИН, Сервис, ДополнительныеПараметры = Неопределено, ПредставлениеОрганизации = "", СлужебныеДанные = "") Экспорт
	
	ИспользоватьВнешнююКриптографиюДляКомпоненты = ЭСФВызовСервера.ИспользоватьВнешнююКриптографиюДляКомпоненты();
	
	Если Не ИспользоватьВнешнююКриптографиюДляКомпоненты Тогда
		ОткрытьФормуБлокировкиИнтерфейса(НСтр("ru='Выберите ключ для аутентификации (AUTH)'"), ПредставлениеОрганизации);
	КонецЕсли;
	
	Попытка
		
		Криптопровайдер = КриптографияКлиентСервер.НовыйКриптопровайдерWSSocket();
		ОтветСокета = КриптоПровайдер.GetXMLSign(БИН, Сервис, ДополнительныеПараметры , ДанныеДляПодписиJSON, "","");
		СлужебныеДанные = КриптоПровайдер.ServiceDataTicket;
		
		Если Не ИспользоватьВнешнююКриптографиюДляКомпоненты Тогда
			ОповеститьОЗавершенииБлокировкиИнтерфейса();
		КонецЕсли;
		
		ОтветСокета = ОбработатьОтветСокета(ОтветСокета, Криптопровайдер);
		
		Возврат ОтветСокета;
		//обработать помимо ответа криптосокета - КриптоПровайдер.КодОшибки, КриптоПровайдер.ТекстОшибки
		//то есть предлагаю возвращать не только ответ сокета, но ещё и кодОшибки + ТекстОшибки криптопровайдера, например структурой и уже там его анализировать
		//а на выходе уже анализировать как в процедуре ОбработатьОтветСокета (если есть Code и он 200 - порядок, иначе проанализировать и ответ сокета и крипто)
	Исключение
		
		Если Не ИспользоватьВнешнююКриптографиюДляКомпоненты Тогда
			ОповеститьОЗавершенииБлокировкиИнтерфейса();
		КонецЕсли;
		
		Ошибка = ОшибкаКриптопровайдера(Криптопровайдер, ИнформацияОбОшибке());
		
		ЭСФВызовСервера.СоздатьЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка выполнения'"), "Ошибка", , , Ошибка.ПодробноеПредставление);
		
		ТекстИсключения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(НСтр(
		"ru = 'Не удалось сформировать XML подпись.
		|%1'"), Ошибка.КраткоеПредставление);
		
		ВызватьИсключение ТекстИсключения;
		
	КонецПопытки;
	
КонецФункции

Функция СоздатьЭЦПXMLs(Знач ДанныеДляПодписиJSON, БИН, Сервис, ДополнительныеПараметры = Неопределено, ПредставлениеОрганизации = "", СлужебныеДанные = "") Экспорт
	
	ИспользоватьВнешнююКриптографиюДляКомпоненты = ЭСФВызовСервера.ИспользоватьВнешнююКриптографиюДляКомпоненты();
	
	Если Не ИспользоватьВнешнююКриптографиюДляКомпоненты Тогда
		ОткрытьФормуБлокировкиИнтерфейса(НСтр("ru='Выберите ключ для аутентификации (AUTH)'"), ПредставлениеОрганизации);
	КонецЕсли;
	
	Попытка
		
		Криптопровайдер = КриптографияКлиентСервер.НовыйКриптопровайдерWSSocket();
		ОтветСокета = КриптоПровайдер.GetXMLsSign(БИН, Сервис, ДополнительныеПараметры , ДанныеДляПодписиJSON, "","");
		СлужебныеДанные = КриптоПровайдер.ServiceDataTicket;
		
		Если Не ИспользоватьВнешнююКриптографиюДляКомпоненты Тогда
			ОповеститьОЗавершенииБлокировкиИнтерфейса();
		КонецЕсли;
		
		ОтветСокета = ОбработатьОтветСокета(ОтветСокета, Криптопровайдер);
		
		Возврат ОтветСокета;
		
	Исключение
		
		Если Не ИспользоватьВнешнююКриптографиюДляКомпоненты Тогда
			ОповеститьОЗавершенииБлокировкиИнтерфейса();
		КонецЕсли;
		
		Ошибка = ОшибкаКриптопровайдера(Криптопровайдер, ИнформацияОбОшибке());
		
		ЭСФВызовСервера.СоздатьЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка выполнения'"), "Ошибка", , , Ошибка.ПодробноеПредставление);
		
		ТекстИсключения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(НСтр(
		"ru = 'Не удалось сформировать XML подпись.
		|%1'"), Ошибка.КраткоеПредставление);
		
		ВызватьИсключение ТекстИсключения;
		
	КонецПопытки;
	
КонецФункции

Функция СоздатьЭЦПСырая(Знач ДанныеДляПодписиJSON, БИН, Сервис, ДополнительныеПараметры = Неопределено, ПредставлениеОрганизации = "", СлужебныеДанные = "") Экспорт
	
	ИспользоватьВнешнююКриптографиюДляКомпоненты = ЭСФВызовСервера.ИспользоватьВнешнююКриптографиюДляКомпоненты();
	
	Если Не ИспользоватьВнешнююКриптографиюДляКомпоненты Тогда
		ОткрытьФормуБлокировкиИнтерфейса(НСтр("ru='Выберите ключ для подписи (RSA или GOSTKNCA)'"), ПредставлениеОрганизации);
	КонецЕсли;
	
	Попытка
		
		Криптопровайдер = КриптографияКлиентСервер.НовыйКриптопровайдерWSSocket();
		ОтветСокета = КриптоПровайдер.GetRawSign(БИН, Сервис, ДополнительныеПараметры , ДанныеДляПодписиJSON);
		СлужебныеДанные = КриптоПровайдер.ServiceDataTicket;
		
		Если Не ИспользоватьВнешнююКриптографиюДляКомпоненты Тогда
			ОповеститьОЗавершенииБлокировкиИнтерфейса();
		КонецЕсли;
		
		ОтветСокета = ОбработатьОтветСокета(ОтветСокета, Криптопровайдер);
		
		Возврат ОтветСокета;
		
	Исключение
		
		Если Не ИспользоватьВнешнююКриптографиюДляКомпоненты Тогда
			ОповеститьОЗавершенииБлокировкиИнтерфейса();
		КонецЕсли;
		
		Ошибка = ОшибкаКриптопровайдера(Криптопровайдер, ИнформацияОбОшибке());
		
		ЭСФВызовСервера.СоздатьЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка выполнения'"), "Ошибка", , , Ошибка.ПодробноеПредставление);
		
		ТекстИсключения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(НСтр(
		"ru = 'Не удалось сформировать XML подпись.
		|%1'"), Ошибка.КраткоеПредставление);
		
		ВызватьИсключение ТекстИсключения;
		
	КонецПопытки;
	
КонецФункции

Функция СоздатьЭЦПСыраяМассив(Знач ДанныеДляПодписиJSON, БИН, Сервис, ДополнительныеПараметры = Неопределено, ПредставлениеОрганизации = "", СлужебныеДанные = "") Экспорт
	
	ИспользоватьВнешнююКриптографиюДляКомпоненты = ЭСФВызовСервера.ИспользоватьВнешнююКриптографиюДляКомпоненты();
	
	Если Не ИспользоватьВнешнююКриптографиюДляКомпоненты Тогда
		ОткрытьФормуБлокировкиИнтерфейса(НСтр("ru='Выберите ключ для подписи (RSA или GOSTKNCA)'"), ПредставлениеОрганизации);
	КонецЕсли;
	
	Попытка
		
		Криптопровайдер = КриптографияКлиентСервер.НовыйКриптопровайдерWSSocket();
		ОтветСокета = КриптоПровайдер.GetRawsSign(БИН, Сервис, ДополнительныеПараметры , ДанныеДляПодписиJSON);
		СлужебныеДанные = КриптоПровайдер.ServiceDataTicket;
		
		Если Не ИспользоватьВнешнююКриптографиюДляКомпоненты Тогда
			ОповеститьОЗавершенииБлокировкиИнтерфейса();
		КонецЕсли;
		
		ОтветСокета = ОбработатьОтветСокета(ОтветСокета, Криптопровайдер);
		
		Возврат ОтветСокета;
		
	Исключение
		
		Если Не ИспользоватьВнешнююКриптографиюДляКомпоненты Тогда
			ОповеститьОЗавершенииБлокировкиИнтерфейса();
		КонецЕсли;
		
		Ошибка = ОшибкаКриптопровайдера(Криптопровайдер, ИнформацияОбОшибке());
		
		ЭСФВызовСервера.СоздатьЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка выполнения'"), "Ошибка", , , Ошибка.ПодробноеПредставление);
		
		ТекстИсключения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(НСтр(
		"ru = 'Не удалось сформировать XML подпись.
		|%1'"), Ошибка.КраткоеПредставление);
		
		ВызватьИсключение ТекстИсключения;
		
	КонецПопытки;
	
КонецФункции

Процедура ОповеститьОЗавершенииБлокировкиИнтерфейса()	
	Оповестить("БлокировкаИнтерфейсаВыборКлючаИСЭСФ");
КонецПроцедуры

Процедура ОткрытьФормуБлокировкиИнтерфейса(ТекстСообщения = "", ПредставлениеОрганизации = "")
	ПараметрыФормы = Новый Структура("ТекстСообщения, ПредставлениеОрганизации", ТекстСообщения, ПредставлениеОрганизации);
	ОткрытьФорму("Обработка.ОбменЭСФ.Форма.ФормаВыполненияОпераций", ПараметрыФормы,ЭтотОбъект,,,,,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
КонецПроцедуры

Функция ОшибкаКриптопровайдера(Криптопровайдер, ИнформацияОбОшибке) Экспорт
	
	Ошибка = Новый Структура;
	
	Если Криптопровайдер = Неопределено Тогда
		Ошибка.Вставить("Версия", "");
		Ошибка.Вставить("КодОшибки", "");
		Ошибка.Вставить("ОписаниеОшибки", "");		
	Иначе
		Ошибка.Вставить("Версия", Криптопровайдер.Версия);
		Ошибка.Вставить("КодОшибки", Криптопровайдер.КодОшибки);
		Ошибка.Вставить("ОписаниеОшибки", Криптопровайдер.ТекстОшибки);
	КонецЕсли;
	
	Ошибка.Вставить("ИнформацияОбОшибке", ИнформацияОбОшибке);
	
	ТипОшибки = ТипОшибкиКриптопровайдера(Ошибка);
	Ошибка.Вставить("ТипОшибки", ТипОшибки);
	
	ПредставленияОшибки = ПредставленияОшибкиКриптопровайдера(Ошибка);
	Ошибка.Вставить("КраткоеПредставление", ПредставленияОшибки.КраткоеПредставление);
	Ошибка.Вставить("ПодробноеПредставление", ПредставленияОшибки.ПодробноеПредставление);
	
	Возврат Ошибка;
	
КонецФункции

Функция ПолучитьДанныеСертификатаЧерезНЦА(БИН, Сервис, ДополнительныеПараметры = "") Экспорт
	
	ОткрытьФормуБлокировкиИнтерфейса(НСтр("ru='Выберите ключ'"));
	
	Попытка
		
		Криптопровайдер = КриптографияКлиентСервер.НовыйКриптопровайдерWSSocket();
		ОтветСокета = КриптоПровайдер.ПолучитьСвойстваСертификата(БИН, Сервис, ДополнительныеПараметры);
		
		Если ПустаяСтрока(ОтветСокета) Тогда
		    ТекстСообщения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(НСтр("ru='При получении данных о сертификате возникла ошибка: %1'"),Криптопровайдер.ТекстОшибки);
			ЭСФКлиентСервер.СообщитьПользователю(ТекстСообщения);	
			Возврат Неопределено;		
		КонецЕсли;
				
		ОповеститьОЗавершенииБлокировкиИнтерфейса();
		
		ОтветСтруктура = ЭСФВызовСервера.ЭСФ_ПрочитатьЗначениеJSON(ОтветСокета);
		
		Если ОтветСтруктура.code <> "200" Тогда
			ЭСФКлиентСервер.СообщитьПользователю(ЭСФКлиент.ОбработатьСообщениеОбОшибке(ОтветСтруктура));
			Возврат Неопределено;
		КонецЕсли;
		
		Возврат ОтветСтруктура;
		
	Исключение
		
		ОповеститьОЗавершенииБлокировкиИнтерфейса();
		
		Ошибка = ОшибкаКриптопровайдера(Криптопровайдер, ИнформацияОбОшибке());
		
		ЭСФВызовСервера.СоздатьЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка выполнения'"), "Ошибка", , , Ошибка.ПодробноеПредставление);
		
		ТекстИсключения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(НСтр(
		"ru = 'Не удалось получить данные по сертификату.
		|%1'"),Ошибка.КраткоеПредставление);
		
		ВызватьИсключение ТекстИсключения;
		
	КонецПопытки;	
	
КонецФункции

#Область ОшибкиКриптографии

//Обрабатывает ответ от криптопровайдера
//
Функция ОбработатьОтветСокета(ОтветСокетаJson, КриптоПровайдер)
		
	Если ТипЗнч(ОтветСокетаJson) = Тип("Строка") И Не ПустаяСтрока(ОтветСокетаJson) Тогда
		ОтветСокетаJson = ЭСФВызовСервера.ЭСФ_ПрочитатьЗначениеJSON(ОтветСокетаJson);
	ИначеЕсли ТипЗнч(ОтветСокетаJson) = Тип("Строка") И ПустаяСтрока(ОтветСокетаJson) Тогда
		ОтветСокетаJson = Новый Структура;
	ИначеЕсли Не ТипЗнч(ОтветСокетаJson) = Тип("Структура") Тогда
		ТекстСообщения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(НСтр("ru = 'Операция не выполнена. %1 %2'"),СокрЛП(Строка(КриптоПровайдер.КодОшибки)), КриптоПровайдер.ТекстОшибки);
		ЭСФКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат ОтветСокетаJson;
	КонецЕсли;
	
	ОтветСокетаJson.Вставить("ТекстОшибкиКриптопровайдера", КриптоПровайдер.ТекстОшибки);
	
	Если КриптоПровайдер.КодОшибки > 0 Тогда
		ОтветСокетаJson.ТекстОшибкиКриптопровайдера = ОтветСокетаJson.ТекстОшибкиКриптопровайдера + " Код ВК: " + Строка(КриптоПровайдер.КодОшибки) + ".";	
	КонецЕсли;
	
	Если ОтветСокетаJson.Свойство("Code") и ОтветСокетаJson.code = "200" Тогда						
		Возврат ОтветСокетаJson;
	ИначеЕсли НЕ ОтветСокетаJson.Свойство("Code") Тогда
		ТекстСообщения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(НСтр("ru = 'Операция не выполнена. %1'"),СокрЛП(ОтветСокетаJson.ТекстОшибкиКриптопровайдера));
		ЭСФКлиентСервер.СообщитьПользователю(ТекстСообщения);			
	Иначе
		ЭСФКлиентСервер.СообщитьПользователю(СокрЛП(ОтветСокетаJson.ТекстОшибкиКриптопровайдера + " " + ОбработатьСообщениеОбОшибке(ОтветСокетаJson)));// 			
	КонецЕсли;
	
	Возврат ОтветСокетаJson;
	
КонецФункции

Функция ТипОшибкиКриптопровайдера(Ошибка)
	
	ТипОшибки = Ошибка_НеизвестнаяОшибка();
	
	Если Найти(Ошибка.ОписаниеОшибки, "0D0680A8") Тогда
		ТипОшибки = Ошибка_НеверныйФайл();		
	ИначеЕсли Найти(Ошибка.ОписаниеОшибки, "23076071") Тогда
		ТипОшибки = Ошибка_НеверныйПароль();	
	Иначе
		ТипОшибки = Ошибка_НеизвестнаяОшибка();	
	КонецЕсли;
	
	Возврат ТипОшибки;
	
КонецФункции

Функция ПредставленияОшибкиКриптопровайдера(Ошибка)
	
	ПредставленияОшибки = Новый Структура;
	
	КраткоеПредставление = КраткоеПредставлениеОшибкиКриптопровайдера(Ошибка);
	ТекстСообщения =       ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 . Подробности ошибки смотрите в журнале регистрации.'"),КраткоеПредставление);
	ПредставленияОшибки.Вставить("КраткоеПредставление", ТекстСообщения);
	
	ПодробноеПредставление = ПодробноеПредставлениеОшибкиКриптопровайдера(Ошибка);
	ПредставленияОшибки.Вставить("ПодробноеПредставление", ПодробноеПредставление);
	
	Возврат ПредставленияОшибки;
	
КонецФункции

Функция КраткоеПредставлениеОшибкиКриптопровайдера(Ошибка)
	
	КраткоеПредставление = "";
	
	Если Ошибка.ТипОшибки = Ошибка_НеверныйФайл() Тогда
		КраткоеПредставление = НСтр("ru = 'Возможно выбранный файл не является файлом сертификата ""*.p12"".'");		
	ИначеЕсли Ошибка.ТипОшибки = Ошибка_НеверныйПароль() Тогда
		КраткоеПредставление = НСтр("ru = 'Возможно был введен некорректный пароль для файла сертификата.'");				
	Иначе	
		КраткоеПредставление = КраткоеПредставлениеОшибки(Ошибка.ИнформацияОбОшибке);					
	КонецЕсли;
	
	Возврат КраткоеПредставление;
	
КонецФункции

Функция ПодробноеПредставлениеОшибкиКриптопровайдера(Ошибка)
			
	КраткоеПредставление = КраткоеПредставлениеОшибкиКриптопровайдера(Ошибка);	
		
	Если ПустаяСтрока(Ошибка.Версия) И ПустаяСтрока(Ошибка.КодОшибки) И ПустаяСтрока(Ошибка.ОписаниеОшибки) Тогда
		ИнформацияИзКриптопровайдера = "";
	Иначе
		ИнформацияИзКриптопровайдера = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(НСтр("ru = 'Версия криптографии: %1, Код ошибки: %2, Описание ошибки: %3'"),Ошибка.Версия,Ошибка.КодОшибки,Ошибка.ОписаниеОшибки);
	КонецЕсли;	
		
	ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(Ошибка.ИнформацияОбОшибке);
		
	ПодробноеПредставление = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(НСтр(
	"ru = '%1
	|%2
	|%3'"),КраткоеПредставление,ИнформацияИзКриптопровайдера, ПодробноеПредставлениеОшибки);
	
	Возврат ПодробноеПредставление;
	
КонецФункции

Функция Ошибка_НеверныйПароль() Экспорт
	Возврат "НеверныйПароль";	
КонецФункции

Функция Ошибка_НеверныйФайл() Экспорт
	Возврат "НеверныйФайл";	
КонецФункции

Функция Ошибка_НеизвестнаяОшибка() Экспорт
	Возврат "НеизвестнаяОшибка";	
КонецФункции

#КонецОбласти

#Область ПодписьДокументовКомпонентой

Функция НоваяКоллекцияПодписей(Знач КоллекцияSignedContent, Знач ДанныеКлючаЭЦП, ДанныеПрофиляИСЭСФ) Экспорт
	
	МассивДокументовДляПодписи = Новый Массив;
	
	КоллекцияПодписейЭСФ = Новый Соответствие;

	Для Каждого Элемент Из КоллекцияSignedContent Цикл
		Если ТипЗнч(КоллекцияSignedContent) = Тип("Соответствие") Тогда
			Base64ДокументДляПодписи = Base64Строка(ПолучитьДвоичныеДанныеИзСтроки(Элемент.Значение, КодировкаТекста.UTF8, Ложь));
		ИначеЕсли ТипЗнч(КоллекцияSignedContent) = Тип("Массив") Тогда // массив возвращается при изменении статуса докумета
			Если ТипЗнч(Элемент) = Тип("Структура") Тогда
				СтрокаДляПодписи = Элемент.СтрокаДляПодписи;
			Иначе
				СтрокаДляПодписи = Элемент;
			КонецЕсли;
			Base64ДокументДляПодписи = Base64Строка(ПолучитьДвоичныеДанныеИзСтроки(СтрокаДляПодписи, КодировкаТекста.UTF8, Ложь));
		КонецЕсли;
		Base64ДокументДляПодписи = СтрЗаменить(Base64ДокументДляПодписи,Символы.ПС,"");
		Base64ДокументДляПодписи = СтрЗаменить(Base64ДокументДляПодписи,Символы.ВК,"");
		
		МассивДокументовДляПодписи.Добавить(Base64ДокументДляПодписи);
		
	КонецЦикла;
	
	ИмяСервиса = "1CService";
	БИН = ДанныеПрофиляИСЭСФ.СтруктурнаяЕдиница.ИдентификационныйНомер;
	ИмяАутентификации = ДанныеПрофиляИСЭСФ.ПользовательИСЭСФ.ИмяАутентификации;
	ПредставлениеОрганизации = ДанныеПрофиляИСЭСФ.СтруктурнаяЕдиница.Представление;
	
	ПараметрыКлюча = ЭСФКлиентСервер.ПодготовитьПараметрыКлючаДляПодписи(ДанныеКлючаЭЦП);
	
	ПараметрыПодписи = ЭлектронноеВзаимодействиеССервисамиВызовСервера.ПолучитьПараметрыКомпонентыЭСФ(БИН, Истина, ИмяАутентификации, ,ДанныеПрофиляИСЭСФ.СтруктурнаяЕдиница.Ссылка, ПараметрыКлюча);
	
	Если Не ЗначениеЗаполнено(ПараметрыПодписи) Тогда
		ТекстИсключения = НСтр(
		"ru = 'Не удалось получить параметры для подписи документов.'");
		ЭСФКлиентСервер.СообщитьПользователю(ТекстИсключения);
		ЭСФКлиентСервер.УдалитьВременныйФайлКлюча(ПараметрыКлюча);
		Возврат КоллекцияПодписейЭСФ;
	КонецЕсли;
	
	СлужебнаяМеткаКомпоненты = "";
	
	Если КоллекцияSignedContent.Количество() > 1 Тогда
		ДанныеДляПодписиJSON = ЭСФВызовСервера.ЭСФ_ЗаписатьЗначениеJSON(МассивДокументовДляПодписи);
		ПодписьВФорматеJSON = СоздатьЭЦПСыраяМассив(ДанныеДляПодписиJSON, БИН, ИмяСервиса, ПараметрыПодписи, ПредставлениеОрганизации, СлужебнаяМеткаКомпоненты);
	ИначеЕсли КоллекцияSignedContent.Количество() = 1 Тогда
		ДанныеДляПодписиJSON = ЭСФВызовСервера.ЭСФ_ЗаписатьЗначениеJSON(МассивДокументовДляПодписи[0]);
		ПодписьВФорматеJSON = СоздатьЭЦПСырая(ДанныеДляПодписиJSON, БИН, ИмяСервиса, ПараметрыПодписи, ПредставлениеОрганизации, СлужебнаяМеткаКомпоненты);
	Иначе
		// Ошибка - массив документов пустой
	КонецЕсли;
	
	Попытка
		ЭлектронноеВзаимодействиеССервисамиВызовСервера.ОбработкаВызоваКомпоненты(ДанныеПрофиляИСЭСФ.СтруктурнаяЕдиница.Ссылка, СлужебнаяМеткаКомпоненты);
	Исключение
		ЭСФВызовСервера.СоздатьЗаписьЖурналаРегистрации(
			НСтр("ru = 'Ошибка обработки данных вызова компоненты'"), "Ошибка", , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	ЭСФКлиентСервер.УдалитьВременныйФайлКлюча(ПараметрыКлюча);
	
	Если ПодписьВФорматеJSON.Свойство("Code") и ПодписьВФорматеJSON.code = "200" Тогда
		
		Если КоллекцияSignedContent.Количество() > 1 Тогда 
			НомерЭлемента = 0;
			МассивПодписей = ЭСФВызовСервера.ЭСФ_ПрочитатьЗначениеJSON(ПодписьВФорматеJSON.responseObject.signResult);
			Для Каждого Элемент Из КоллекцияSignedContent Цикл
				
				Если МассивПодписей[НомерЭлемента] = "" Тогда
					ТекстСообщения = НСтр("ru = 'Криптопровайдер вернул пустое значение подписи.'");
					ЭСФКлиентСервер.СообщитьПользователю(ТекстСообщения);
					Возврат Новый Соответствие;
				КонецЕсли;
				
				Если ТипЗнч(КоллекцияSignedContent) = Тип("Соответствие") Тогда
					КоллекцияПодписейЭСФ.Вставить(Элемент.Ключ, МассивПодписей[НомерЭлемента]);
				ИначеЕсли ТипЗнч(КоллекцияSignedContent) = Тип("Массив") Тогда
					Если ТипЗнч(Элемент) = Тип("Структура") Тогда
						Ключ = Элемент.ИД;
					Иначе
						Ключ = Элемент
					КонецЕсли;
					КоллекцияПодписейЭСФ.Вставить(Ключ, МассивПодписей[НомерЭлемента]);
				КонецЕсли;
				СертификатПодписавшего = ПодписьВФорматеJSON.responseObject.signerCert;
				ЗначениеТэгов = РазобратьПоУзламKeyInfo(СертификатПодписавшего);
				Если ЗначениеТэгов.Свойство("pem") Тогда
					ДанныеПрофиляИСЭСФ.Вставить("ОткрытыйСертификатBase64", ЗначениеТэгов.pem);
				КонецЕсли;
				Если ЗначениеТэгов.Свойство("algorithm") Тогда
					ДанныеПрофиляИСЭСФ.Вставить("ТипКлюча", Сертификат_ТипКлючаИзСвойствНовый(ЗначениеТэгов.algorithm));
				КонецЕсли;
				НомерЭлемента = НомерЭлемента + 1;
			КонецЦикла;
		ИначеЕсли КоллекцияSignedContent.Количество() = 1 Тогда
			
			Если ПодписьВФорматеJSON.responseObject.signResult = "" Тогда
				ТекстСообщения = НСтр("ru = 'Криптопровайдер вернул пустое значение подписи.'");
				ЭСФКлиентСервер.СообщитьПользователю(ТекстСообщения);
				Возврат Новый Соответствие;
			КонецЕсли;
			
			Для Каждого Элемент Из КоллекцияSignedContent Цикл
				Если ТипЗнч(КоллекцияSignedContent) = Тип("Соответствие") Тогда
					КоллекцияПодписейЭСФ.Вставить(Элемент.Ключ, ПодписьВФорматеJSON.responseObject.signResult);
				ИначеЕсли ТипЗнч(КоллекцияSignedContent) = Тип("Массив") Тогда
					Если ТипЗнч(Элемент) = Тип("Структура") Тогда
						Ключ = Элемент.ИД;
					Иначе
						Ключ = Элемент
					КонецЕсли;
					КоллекцияПодписейЭСФ.Вставить(Ключ, ПодписьВФорматеJSON.responseObject.signResult);
				КонецЕсли;
				СертификатПодписавшего = ПодписьВФорматеJSON.responseObject.signerCert;
				ЗначениеТэгов = РазобратьПоУзламKeyInfo(СертификатПодписавшего);
				Если ЗначениеТэгов.Свойство("pem") Тогда
					ДанныеПрофиляИСЭСФ.Вставить("ОткрытыйСертификатBase64", ЗначениеТэгов.pem);
				КонецЕсли;
				Если ЗначениеТэгов.Свойство("algorithm") Тогда
					ДанныеПрофиляИСЭСФ.Вставить("ТипКлюча", Сертификат_ТипКлючаИзСвойствНовый(ЗначениеТэгов.algorithm));
				КонецЕсли;
			КонецЦикла;
		Иначе
			//Ошибка - массив документов пустой
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат КоллекцияПодписейЭСФ;
	
КонецФункции

Функция РазобратьПоУзламKeyInfo(KeyInfo, Узел = Неопределено)

	ЗначенияКлючей = Новый Структура;
	KeyInfo = СтрЗаменить(KeyInfo, "KeyInfo(", ""); // Убрали KeyInfo(, для чтения с сразу с тега
	МассивKeyInfo = СтрРазделить(KeyInfo, ",", Ложь); // Так как разделитель между тэгами запятая, так понимаем что начался новый тэг
	
	Для каждого Узел Из МассивKeyInfo Цикл
	
		Поз = СтрНайти(Узел, "=",,,1);
		
		Если Поз <> 0 Тогда
		
			Ключ = СокрЛП(Лев(Узел, Поз-1));
			Значение = Сред(Узел, Поз+1, СтрДлина(Узел) - (Поз));
			
			// Именно в тэге "pem" содержится сертификат подписи и у него надо обрезать лишнее
			Если Ключ = "pem" Тогда
				// 30 начальная позиция среза-----BEGIN CERTIFICATE-----¶
				// 64 конечная позиция среза¶-----END CERTIFICATE-----¶)
				НачалоСертификата = 0;
				КонецСертификата = 0;
				Если СтрНайти(Значение, "-----BEGIN CERTIFICATE-----") <> 0 Тогда
					НачалоСертификата = СтрНайти(Значение, "-----BEGIN CERTIFICATE-----") + СтрДлина("-----BEGIN CERTIFICATE-----") + 1;
					КонецСертификата = СтрНайти(Значение, "-----END CERTIFICATE-----") - НачалоСертификата - 1;
				КонецЕсли;
				Значение = ?(НачалоСертификата = 0, СокрЛП(Значение), СокрЛП(Сред(Значение, НачалоСертификата, КонецСертификата)));
			КонецЕсли; 
			
			// Чтоб в структуру не включались пустые тэги и их значение
			Если ЗначениеЗаполнено(Ключ) И ЗначениеЗаполнено(Значение) Тогда
				ЗначенияКлючей.Вставить(Ключ, Значение);
			КонецЕсли;
			
		КонецЕсли;
	
	КонецЦикла;
	
	Возврат ЗначенияКлючей;

КонецФункции

Функция РазобратьСтрокуСертификата(СоставнаяСтрокаДанных) Экспорт
	
	Возврат ЭСФКлиентСервер.РазобратьСтрокуСертификата(СоставнаяСтрокаДанных);
	
КонецФункции

Функция Сертификат_ТипКлючаИзСвойствНовый(Знач ИмяАлгоритма) Экспорт
	
	ТипКлюча = "";
	
	Если ИмяАлгоритма <> Неопределено Тогда
		Если Найти(ВРег(ИмяАлгоритма), "RSA") <> 0 Тогда
			ТипКлюча = КлючRSA();
		ИначеЕсли Найти(ВРег(ИмяАлгоритма), "GOST") <> 0 Тогда
			ТипКлюча = КлючGOST();	
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТипКлюча;
	
КонецФункции

Функция КлючGOST() Экспорт 
	
	Возврат "GOST";
	
КонецФункции

Функция КлючRSA() Экспорт
	
	Возврат "RSA";
	
КонецФункции

Функция ПолучитьФИОИзОписанияСертификата(ОписаниеСертификата) Экспорт
	
	Возврат ЭСФКлиентСервер.ПолучитьФИОИзОписанияСертификата(ОписаниеСертификата);
	
КонецФункции

#КонецОбласти

#КонецОбласти