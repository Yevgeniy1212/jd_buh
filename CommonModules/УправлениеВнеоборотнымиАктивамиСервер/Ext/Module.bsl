////////////////////////////////////////////////////////////////////////////////
// УправлениеВнеоборотнымиАктивамиСервер: 
//  
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Функция возвращает счета учета по выбранному ОС
// Параметры:
//  Организация - по которой выполняется поиск
//  ОС      	- по которому выполняется поиск
//
// Возвращаемое значение:
//  Структура - структура содержащая счета учета 
// 
Функция ПолучитьСчетаУчетаОС(Организация, ОС, ДатаСведений) Экспорт

	Результат = Новый Структура("СчетУчетаБУ, СчетНачисленияАмортизацииБУ, СчетУчетаНДСПоПриобретению, 
								 |СчетУчетаНДСПоРеализации,СчетУчетаНДСУплаченногоНаТаможне,
								 |СчетДоходовОтРеализацииБУ, СчетСебестоимостиПриРеализацииБУ, СчетУчетаЗатратПоМодернизацииБУ,
								 |СчетУчетаНУ,СчетНачисленияАмортизацииНУ,СчетДоходовОтРеализацииНУ,
								 |СчетСебестоимостиПриРеализацииНУ, СчетПоложительныхОтклонений, СчетОтрицательныхОтклонений");

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр ("ДатаСведений", ДатаСведений);
	Запрос.УстановитьПараметр("Организация",   Организация);
	Запрос.УстановитьПараметр("ОС",            ОС);
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
				   |	СчетаУчетаОССрезПоследних.СчетУчетаБУ,
				   |	СчетаУчетаОССрезПоследних.СчетНачисленияАмортизацииБУ,
				   |    СчетаУчетаОССрезПоследних.СчетУчетаЗатратПоМодернизацииБУ,
				   |	СчетаУчетаОССрезПоследних.СчетУчетаНДСПоПриобретению,
				   |	СчетаУчетаОССрезПоследних.СчетУчетаНДСПоРеализации,
				   |	СчетаУчетаОССрезПоследних.СчетУчетаНДСУплаченногоНаТаможне,
				   |	СчетаУчетаОССрезПоследних.СчетДоходовОтРеализацииБУ,
				   |	СчетаУчетаОССрезПоследних.СчетСебестоимостиПриРеализацииБУ,
				   |	СчетаУчетаОССрезПоследних.СчетУчетаНУ,
				   |	СчетаУчетаОССрезПоследних.СчетНачисленияАмортизацииНУ,
				   |	СчетаУчетаОССрезПоследних.СчетДоходовОтРеализацииНУ,
				   |	СчетаУчетаОССрезПоследних.СчетСебестоимостиПриРеализацииНУ,
				   |	СчетаУчетаОССрезПоследних.СчетПоложительныхОтклоненийПриПередачеСтруктурнымПодразделениямБУ,
				   |	СчетаУчетаОССрезПоследних.СчетОтрицательныхОтклоненийПриПередачеСтруктурнымПодразделениямБУ
				   |ИЗ
				   |	РегистрСведений.СчетаУчетаОС.СрезПоследних(
				   |		&ДатаСведений,
				   |		Организация = &Организация
				   |		    И ОсновноеСредство = &ОС) КАК СчетаУчетаОССрезПоследних";
	 
	Выборка = Запрос.Выполнить().Выбрать();

	Если Выборка.Следующий() Тогда
  		Результат.СчетУчетаБУ						= Выборка.СчетУчетаБУ;
		Результат.СчетНачисленияАмортизацииБУ		= Выборка.СчетНачисленияАмортизацииБУ;
		Результат.СчетУчетаЗатратПоМодернизацииБУ	= Выборка.СчетУчетаЗатратПоМодернизацииБУ;
		Результат.СчетУчетаНДСПоПриобретению		= Выборка.СчетУчетаНДСПоПриобретению;
		Результат.СчетУчетаНДСПоРеализации			= Выборка.СчетУчетаНДСПоРеализации;
		Результат.СчетУчетаНДСУплаченногоНаТаможне	= Выборка.СчетУчетаНДСУплаченногоНаТаможне;
		Результат.СчетДоходовОтРеализацииБУ			= Выборка.СчетДоходовОтРеализацииБУ;
		Результат.СчетСебестоимостиПриРеализацииБУ	= Выборка.СчетСебестоимостиПриРеализацииБУ;
		
		Результат.СчетУчетаНУ						= Выборка.СчетУчетаНУ;
		Результат.СчетНачисленияАмортизацииНУ		= Выборка.СчетНачисленияАмортизацииНУ;
		Результат.СчетДоходовОтРеализацииНУ			= Выборка.СчетДоходовОтРеализацииНУ;
		Результат.СчетСебестоимостиПриРеализацииНУ	= Выборка.СчетСебестоимостиПриРеализацииНУ;
		
		Результат.СчетПоложительныхОтклонений		= Выборка.СчетПоложительныхОтклоненийПриПередачеСтруктурнымПодразделениямБУ;
		Результат.СчетОтрицательныхОтклонений		= Выборка.СчетОтрицательныхОтклоненийПриПередачеСтруктурнымПодразделениямБУ;
	Иначе
		ПустойСчет = ПланыСчетов.Типовой.ПустаяСсылка();
		Результат.СчетУчетаБУ						= ПустойСчет;
		Результат.СчетНачисленияАмортизацииБУ		= ПустойСчет;
		Результат.СчетУчетаЗатратПоМодернизацииБУ   = ПустойСчет;
		Результат.СчетУчетаНДСПоПриобретению		= ПустойСчет;	
		Результат.СчетУчетаНДСПоРеализации			= ПустойСчет;	
		Результат.СчетУчетаНДСУплаченногоНаТаможне	= ПустойСчет;	
		Результат.СчетДоходовОтРеализацииБУ			= ПустойСчет;	
		Результат.СчетСебестоимостиПриРеализацииБУ	= ПустойСчет;	
		Результат.СчетПоложительныхОтклонений		= ПустойСчет;
		Результат.СчетОтрицательныхОтклонений		= ПустойСчет;
		
		ПустойСчетНУ = ПланыСчетов.Налоговый.ПустаяСсылка();
		Результат.СчетУчетаНУ						= ПустойСчетНУ;
		Результат.СчетНачисленияАмортизацииНУ		= ПустойСчетНУ;
		Результат.СчетДоходовОтРеализацииНУ			= ПустойСчетНУ;
		Результат.СчетСебестоимостиПриРеализацииНУ	= ПустойСчетНУ;
		
  	КонецЕсли;

	Возврат Результат;

КонецФункции //ПолучитьСчетаУчетаОС()

Функция ПолучитьСчетаУчетаСпискаОС(Организация, СписокОС, ДатаСведений) Экспорт
	
	Результат	= Новый Соответствие;
	Если СписокОС.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	Для Каждого ОсновноеСредство Из СписокОС Цикл
		Если ОсновноеСредство = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		СтруктураВозврата = Новый Структура("СчетУчетаБУ, СчетНачисленияАмортизацииБУ, СчетУчетаНДСПоПриобретению, 
								 |СчетУчетаНДСПоРеализации,СчетУчетаНДСУплаченногоНаТаможне,
								 |СчетДоходовОтРеализацииБУ, СчетСебестоимостиПриРеализацииБУ, СчетУчетаЗатратПоМодернизацииБУ,
								 |СчетУчетаНУ,СчетНачисленияАмортизацииНУ,СчетДоходовОтРеализацииНУ,
								 |СчетСебестоимостиПриРеализацииНУ, СчетПоложительныхОтклонений, СчетОтрицательныхОтклонений");
		
		Результат.Вставить(ОсновноеСредство, СтруктураВозврата);
	КонецЦикла;

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Организация",  Организация);
	Запрос.УстановитьПараметр("МассивОС",     СписокОС);
	Запрос.УстановитьПараметр("ДатаСведений", ДатаСведений);
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
				   |	СчетаУчетаОССрезПоследних.ОсновноеСредство,
				   |	СчетаУчетаОССрезПоследних.СчетУчетаБУ,
				   |	СчетаУчетаОССрезПоследних.СчетНачисленияАмортизацииБУ,
				   |    СчетаУчетаОССрезПоследних.СчетУчетаЗатратПоМодернизацииБУ,
				   |	СчетаУчетаОССрезПоследних.СчетУчетаНДСПоПриобретению,
				   |	СчетаУчетаОССрезПоследних.СчетУчетаНДСПоРеализации,
				   |	СчетаУчетаОССрезПоследних.СчетУчетаНДСУплаченногоНаТаможне,
				   |	СчетаУчетаОССрезПоследних.СчетДоходовОтРеализацииБУ,
				   |	СчетаУчетаОССрезПоследних.СчетСебестоимостиПриРеализацииБУ,
				   |	СчетаУчетаОССрезПоследних.СчетУчетаНУ,
				   |	СчетаУчетаОССрезПоследних.СчетНачисленияАмортизацииНУ,
				   |	СчетаУчетаОССрезПоследних.СчетДоходовОтРеализацииНУ,
				   |	СчетаУчетаОССрезПоследних.СчетСебестоимостиПриРеализацииНУ,
				   |	СчетаУчетаОССрезПоследних.СчетПоложительныхОтклоненийПриПередачеСтруктурнымПодразделениямБУ,
				   |	СчетаУчетаОССрезПоследних.СчетОтрицательныхОтклоненийПриПередачеСтруктурнымПодразделениямБУ
				   |ИЗ
				   |	РегистрСведений.СчетаУчетаОС.СрезПоследних(
				   |		&ДатаСведений,
				   |		Организация = &Организация
				   |		    И ОсновноеСредство В (&МассивОС)) КАК СчетаУчетаОССрезПоследних";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	
	ТаблицаСчетовУчета = Запрос.Выполнить().Выгрузить();
	ТаблицаСчетовУчета.Индексы.Добавить("ОсновноеСредство");
	
	ОтборСчетовУчета = Новый Структура("ОсновноеСредство");
	
	ПустоеОсновноеСредство = Справочники.ОсновныеСредства.ПустаяСсылка();
	
	Для Каждого ОсновноеСредство Из СписокОС Цикл
		
		СтруктураВозврата = Результат.Получить(ОсновноеСредство);
		
		ОтборСчетовУчета.ОсновноеСредство = ОсновноеСредство;
		
		НайденныеСтроки = ТаблицаСчетовУчета.НайтиСтроки(ОтборСчетовУчета);
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			ЗаполнитьЗначенияСвойств(СтруктураВозврата, НайденныеСтроки[0]);
		Иначе
			
			ОтборСчетовУчета.ОсновноеСредство = ПустоеОсновноеСредство;
			
			НайденныеСтроки = ТаблицаСчетовУчета.НайтиСтроки(ОтборСчетовУчета);
			Если НайденныеСтроки.Количество() > 0 Тогда
				ЗаполнитьЗначенияСвойств(СтруктураВозврата, НайденныеСтроки[0]);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Функция возвращает счета учета по выбранному НМА
// Параметры:
//  Организация - по которой выполняется поиск
//  НМА      	- по которому выполняется поиск
//
// Возвращаемое значение:
//  Структура - структура содержащая счета учета 
// 
Функция ПолучитьСчетаУчетаНМА(Организация, НМА, ДатаСведений) Экспорт

	Результат = Новый Структура("СчетУчетаБУ, СчетНачисленияАмортизацииБУ");

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр ("ДатаСведений", ДатаСведений);
	Запрос.УстановитьПараметр ("Организация",  Организация);
	Запрос.УстановитьПараметр ("НМА",          НМА);
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	СчетаУчетаНМАСрезПоследних.СчетУчетаБУ,
	               |	СчетаУчетаНМАСрезПоследних.СчетНачисленияАмортизацииБУ
	               |ИЗ
	               |	РегистрСведений.СчетаУчетаНМА.СрезПоследних(
	               |		&ДатаСведений,
	               |		Организация = &Организация
	               |		И НематериальныйАктив = &НМА) КАК СчетаУчетаНМАСрезПоследних";
	 
	Выборка = Запрос.Выполнить().Выбрать();

	Если Выборка.Следующий() Тогда
  		Результат.СчетУчетаБУ						= Выборка.СчетУчетаБУ;
		Результат.СчетНачисленияАмортизацииБУ		= Выборка.СчетНачисленияАмортизацииБУ;
	Иначе
		Результат.СчетУчетаБУ						= ПланыСчетов.Типовой.ПустаяСсылка();
		Результат.СчетНачисленияАмортизацииБУ		= ПланыСчетов.Типовой.ПустаяСсылка();	
  	КонецЕсли;

	Возврат Результат;

КонецФункции //ПолучитьСчетаУчетаНМА()

// Функция возвращает счета учета по выбранному НМА
// Параметры:
//  Организация - по которой выполняется поиск
//  НМА      	- по которому выполняется поиск
//
// Возвращаемое значение:
//  Структура - структура содержащая счета учета 
// 
Функция ПолучитьСчетаУчетаСпискаНМА(Организация, СписокНМА, ДатаСведений) Экспорт

	Результат	= Новый Соответствие;
	Если СписокНМА.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	Для Каждого НематериальныйАктив Из СписокНМА Цикл
		Если НематериальныйАктив = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		СтруктураВозврата = Новый Структура("СчетУчетаБУ, СчетНачисленияАмортизацииБУ");
		
		Результат.Вставить(НематериальныйАктив, СтруктураВозврата);
	КонецЦикла;

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр ("ДатаСведений", ДатаСведений);
	Запрос.УстановитьПараметр ("Организация",  Организация);
	Запрос.УстановитьПараметр ("НМА",          СписокНМА);
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	СчетаУчетаНМАСрезПоследних.НематериальныйАктив,
	               |	СчетаУчетаНМАСрезПоследних.СчетУчетаБУ,
	               |	СчетаУчетаНМАСрезПоследних.СчетНачисленияАмортизацииБУ
	               |ИЗ
	               |	РегистрСведений.СчетаУчетаНМА.СрезПоследних(
	               |		&ДатаСведений,
	               |		Организация = &Организация
	               |		И НематериальныйАктив В (&НМА)) КАК СчетаУчетаНМАСрезПоследних";
	 
	Выборка = Запрос.Выполнить().Выбрать();
	
	ТаблицаСчетовУчета = Запрос.Выполнить().Выгрузить();
	ТаблицаСчетовУчета.Индексы.Добавить("НематериальныйАктив");
	
	ОтборСчетовУчета = Новый Структура("НематериальныйАктив");
	
	ПустойНематериальныйАктив = Справочники.НематериальныеАктивы.ПустаяСсылка();
	
	Для Каждого НематериальныйАктив Из СписокНМА Цикл
		
		СтруктураВозврата = Результат.Получить(НематериальныйАктив);
		
		ОтборСчетовУчета.НематериальныйАктив = ПустойНематериальныйАктив;
		
		НайденныеСтроки = ТаблицаСчетовУчета.НайтиСтроки(ОтборСчетовУчета);
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			ЗаполнитьЗначенияСвойств(СтруктураВозврата, НайденныеСтроки[0]);
		Иначе
			
			ОтборСчетовУчета.НематериальныйАктив = ПустойНематериальныйАктив;
			
			НайденныеСтроки = ТаблицаСчетовУчета.НайтиСтроки(ОтборСчетовУчета);
			Если НайденныеСтроки.Количество() > 0 Тогда
				ЗаполнитьЗначенияСвойств(СтруктураВозврата, НайденныеСтроки[0]);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;

КонецФункции //ПолучитьСчетаУчетаНМА()

// Функция возвращает признак ведения аналитического учета ОС 
// по подразделениям в период даты, переданной в функцию.
//
Функция ВедетсяАналитическийУчетОСПоПодразделениям(ДатаПроверки) Экспорт
	
	ДатаНачалаВеденияУчетаОСПоПодразделениям = Константы.ДатаНачалаВеденияВБУУчетаОСВРазрезеПодразделений.Получить();
	
	Возврат (ДатаНачалаВеденияУчетаОСПоПодразделениям <> Дата(1,1,1) И ДатаПроверки >= ДатаНачалаВеденияУчетаОСПоПодразделениям);
	
КонецФункции

// Функция возвращает признак ведения аналитического учета ОС 
// по МОЛ в период даты, переданной в функцию.
//
Функция ВедетсяАналитическийУчетОСПоМОЛ(ДатаПроверки) Экспорт
	
	ДатаНачалаВеденияУчетаОСПоМОЛ = Константы.ДатаНачалаВеденияВБУУчетаОСВРазрезеМОЛ.Получить();
	
	Возврат (ДатаНачалаВеденияУчетаОСПоМОЛ <> Дата(1,1,1) И ДатаПроверки >= ДатаНачалаВеденияУчетаОСПоМОЛ);
	
КонецФункции

Процедура УстановитьАналитикуПоМестонахождениюОС(ВедетсяАналитУчетОсПоМОЛ, ВедетсяАналитУчетОсПоПодразделениям, Проводка, ТекОС, ТаблицаТекМестонахождение, УстановитьДТ = Ложь, УстановитьКТ = Ложь) Экспорт
	
	Если ВедетсяАналитУчетОсПоМОЛ Или ВедетсяАналитУчетОсПоПодразделениям Тогда
		СтрокаТекМестонахождение = ТаблицаТекМестонахождение.Найти(ТекОС,"ОсновноеСредство");
		
		Если СтрокаТекМестонахождение <> Неопределено Тогда
			Если ВедетсяАналитУчетОсПоПодразделениям Тогда
				Если УстановитьДТ Тогда
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Подразделения", СтрокаТекМестонахождение.ПодразделениеОрганизации);
				КонецЕсли;
				Если УстановитьКТ Тогда
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Подразделения", СтрокаТекМестонахождение.ПодразделениеОрганизации);
				КонецЕсли;
									
			КонецЕсли;
			
			Если ВедетсяАналитУчетОсПоМОЛ Тогда
				Если УстановитьДТ Тогда
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "РаботникиОрганизаций", СтрокаТекМестонахождение.МОЛОрганизации);
				КонецЕсли;
				
				Если УстановитьКТ Тогда
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "РаботникиОрганизаций", СтрокаТекМестонахождение.МОЛОрганизации);
				КонецЕсли;
				
			КонецЕсли;	
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Позволяет определить есть ли в табличной части документа строки с дублирующимеся
// значениями заданных реквизитов (всех одновременно).
// При нахождении дублей формирует сообщения пользователю.
//
// Параметры
//  Объект            - Объект ссылочного типа
//  ИмяТабличнойЧасти - Имя табличной части, в которой нужно искать дубли
//  ПоляПроверки      - Структура с перечнем реквизитов, по которым нужно искать дубли.
//                      Ключ структуры - имя реквизита, значение - признак необходимости
//                      поиска дублей в том числе по пустым значениям. Истина - искать
//                      дубли по пустым значениям реквизита, любое другое значение - 
//                      игнорировать строки, в которых реквизит не заполнен
//  Отказ             - Признак отказа от дальнейшей обработки. В случае нахождения дублей
//                      выставляется в Истина.
//
// Возвращаемое значение:
//   Булево - Истина - ошибок (дублей) не обнаружено, Ложь - в противном случае.
//
Функция ПроверитьОтсутствиеДублейВТабличнойЧасти(Объект, ИмяТабличнойЧасти, ПоляПроверки, Отказ) Экспорт
	
	СтруктураОтбора = Новый Структура;
	
	ПоляПроверкиСтрокой = "";
	Для Каждого КлючИЗначение Из ПоляПроверки Цикл
		ПоляПроверкиСтрокой = ПоляПроверкиСтрокой + ", " + КлючИЗначение.Ключ;
		СтруктураОтбора.Вставить(КлючИЗначение.Ключ);
	КонецЦикла;
	ПоляПроверкиСтрокой = Сред(ПоляПроверкиСтрокой, 3);
	
	НаборыЗначений = Объект[ИмяТабличнойЧасти].Выгрузить(, ПоляПроверкиСтрокой);
	НаборыЗначений.Колонки.Добавить("__КоличествоВхождений", ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(10));
	НаборыЗначений.ЗаполнитьЗначения(1, "__КоличествоВхождений");
	НаборыЗначений.Свернуть(ПоляПроверкиСтрокой, "__КоличествоВхождений");
	
	НайденыДубли = Ложь;
	
	Если ПоляПроверки.Количество() > 1 Тогда
		ШаблонСообщенияОбОшибке = НСтр("ru = 'Значения %1 повторяются в строках %2.'");
	Иначе
		ШаблонСообщенияОбОшибке = НСтр("ru = 'Значение %1 повторяется в строках %2.'");
	КонецЕсли;
	ТекстСообщения = "";
	
	Если НаборыЗначений.Количество() <> Объект[ИмяТабличнойЧасти].Количество() Тогда
		// Есть дубли
		Для Каждого НаборЗначений Из НаборыЗначений Цикл
			Если НаборЗначений.__КоличествоВхождений = 1 Тогда
				Продолжить;
			КонецЕсли;
			
			ЗначенияСтрокой = "";
			
			ПропуститьНаборЗначений = Ложь;
			Для Каждого КлючИЗначение Из ПоляПроверки Цикл
				Если КлючИЗначение.Значение <> Истина Тогда
					Если НЕ ЗначениеЗаполнено(НаборЗначений[КлючИЗначение.Ключ]) Тогда
						ПропуститьНаборЗначений = Истина;
						Прервать;
					КонецЕсли;
				КонецЕсли;
				
				ЗначенияСтрокой = ЗначенияСтрокой + ", """ + НаборЗначений[КлючИЗначение.Ключ] + """";
			КонецЦикла;
			Если ПропуститьНаборЗначений Тогда
				Продолжить;
			КонецЕсли;
			
			НайденыДубли = Истина;
			
			ЗначенияСтрокой = Сред(ЗначенияСтрокой, 3);
			
			НомераСтрок = "";
			ЗаполнитьЗначенияСвойств(СтруктураОтбора, НаборЗначений);
			СтрокиДубли = Объект[ИмяТабличнойЧасти].НайтиСтроки(СтруктураОтбора);
			Для Каждого СтрокаДубль Из СтрокиДубли Цикл
				НомераСтрок = НомераСтрок + ", " + Формат(СтрокаДубль.НомерСтроки, "ЧГ=");
			КонецЦикла;
			НомераСтрок = Сред(НомераСтрок, 3);
			
			ТекстСообщения = ТекстСообщения + Символы.ПС + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонСообщенияОбОшибке, ЗначенияСтрокой, НомераСтрок);
		КонецЦикла;
	КонецЕсли;
	
	Если НайденыДубли Тогда
		ПредставленияРеквизитов = "";
		МетаданныеТабличнойЧасти = Объект.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти];
		Для Каждого КлючИЗначение Из ПоляПроверки Цикл
			ПредставленияРеквизитов = ПредставленияРеквизитов + ", """
				+ МетаданныеТабличнойЧасти.Реквизиты[КлючИЗначение.Ключ].Представление() + """";
		КонецЦикла;
		ПредставленияРеквизитов = Сред(ПредставленияРеквизитов, 3);
		
		Если ПоляПроверки.Количество() > 1 Тогда
			ШаблонСообщения = НСтр("ru = 'Значения в колонках %1 не должны повторяться.'");
		Иначе
			ШаблонСообщения = НСтр("ru = 'Значения в колонке %1 не должны повторяться.'");
		КонецЕсли;
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ПредставленияРеквизитов)
			+ ТекстСообщения;
		ТекстСообщения = ОбщегоНазначенияБККлиентСервер.ПолучитьТекстСообщения("СПИСОК", "КОРРЕКТНОСТЬ", , ,
			МетаданныеТабличнойЧасти.Представление(), ТекстСообщения);
			
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект, ИмяТабличнойЧасти);
		
		Отказ = Истина;
	КонецЕсли;
	
	Возврат НЕ НайденыДубли;
	
КонецФункции // ПроверитьОтсутствиеДублейВТабличнойЧасти()

// Функция возвращает таблицу значений с инвентарными номерами ОС.
//
// Параметры
//  ТаблицаОС   - Таблица значений со списком ОС, для которой нужно получить инвентарные номера.
//                Обязательные колонки: НомерСтроки, ОсновноеСредство
//  Организация - Организация, по которой требуется получить инвентарные номера.
//  Дата        - Дата, на которую требуется получить инвентарные номера.
//
// Возвращаемое значение:
//   ТаблицаЗначений - Таблица с инвентарными номерами. Колонки: НомерСтроки, ОсновноеСредство, ИнвентарныйНомер
//
Функция ПолучитьТаблицуИнвентарныхНомеровОС(ТаблицаОС, Организация, Дата) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("МассивОС"   , ТаблицаОС.ВыгрузитьКолонку("ОсновноеСредство"));
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Дата"	   , Дата);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство КАК ОсновноеСредство,
	|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ИнвентарныйНомер,
	|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.Период
	|ИЗ
	|	РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(
	|			&Дата,
	|			Организация = &Организация
	|				И ОсновноеСредство В (&МассивОС)) КАК ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних
	|";
	
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();;
	
	ТаблицаРезультата = ТаблицаОС.Скопировать();
	Если ТаблицаРезультата.Колонки.Найти("ИнвентарныйНомер") = Неопределено Тогда 
		ТаблицаРезультата.Колонки.Добавить("ИнвентарныйНомер", ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповСтроки(9));
	КонецЕсли;
	ТаблицаРезультата.Колонки.Добавить("Период", ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповДаты(ЧастиДаты.ДатаВремя));
	ТаблицаРезультата.Индексы.Добавить("ОсновноеСредство");
	
	Для Каждого СтрокаЗапроса Из ТаблицаЗапроса Цикл
		
		СтрокаРезультата = ТаблицаРезультата.Найти(СтрокаЗапроса.ОсновноеСредство, "ОсновноеСредство");
		Если СтрокаРезультата <> Неопределено Тогда
			СтрокаРезультата.ИнвентарныйНомер 	= СтрокаЗапроса.ИнвентарныйНомер;
			СтрокаРезультата.Период 			= СтрокаЗапроса.Период;
		КонецЕсли;
	
	КонецЦикла;
	
	Возврат ТаблицаРезультата;
	
КонецФункции // ПолучитьТаблицуИнвентарныхНомеровОС()

// Функция возвращает структуру сведений об инвентарном номере ОС.
//
// Параметры
//  ОсновноеСредство - Объект основных средств, для которого требуется получить инвентарный номер.
//  Организация      - Организация, по которой требуется получить инвентарный номер.
//  Дата             - Дата, на которую требуется получить инвентарный номер.
//
// Возвращаемое значение:
//  Структура
//		ИнвентарныйНомер 	-	Инвентарный номер переданного ОС
//		Период				-   Дата и время установки 
//
Функция СведенияОбИнвентарномНомереОСЗ(Знач ОсновноеСредство, Знач Организация, Знач Дата) Экспорт
	
	Результат = Новый Структура();
	Результат.Вставить("ИнвентарныйНомер", 	"");
	Результат.Вставить("Период", 			'0001-01-01');

	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ОсновноеСредство", ОсновноеСредство);
	Запрос.УстановитьПараметр("Организация"		, Организация);
	Запрос.УстановитьПараметр("Дата"			, Дата);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ИнвентарныйНомер КАК ИнвентарныйНомер,
	|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.Период КАК Период
	|	
	|ИЗ
	|	РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(
	|			&Дата,
	|			Организация = &Организация
	|				И ОсновноеСредство = &ОсновноеСредство) КАК ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних";
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Результат.Вставить("ИнвентарныйНомер", 	Выборка.ИнвентарныйНомер);
		Результат.Вставить("Период",			Выборка.Период);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // СведенияОбИнвентарномНомереОС()

//  Функция дозаполняет табличную часть основных средств документа основными средствами
// с наименованием совпадающим с заданным основным средством. В случае отсутствия основных
// средств с подходящим наименованием, выдает сообщение об ошибке.
//
// Параметры
//  ПараметрыФормы   - Структура с параметрами заполнения, ключи структуры:
//  	Форма             - форма заполняемого документа
//  	Объект            - Значение основного реквизита формы - документа для заполнения
//  	ИмяТабличнойЧасти - Имя табличной части основных средств документа, значение по умолчанию "ОС"
//  	ПолучатьИнвентарныйНомерИзКода - Флаг необходимости получения основного средства из кода 
//  		справочника (в противном случае, по данным регистра сведений). Значение по умолчанию Ложь.
//  
//  ОсновноеСредство - Основное средство по наименованию которого требуется дозаполнить табличную часть.
//
// Возвращаемое значение:
//   Булево - Истина - в табличную часть добавлены строки с подходящими ОС, Ложь - подходящих ОС не найдено
//
Функция ДозаполнитьТабличнуюЧастьОсновнымиСредствамиПоНаименованию(ПараметрыФормы, ОсновноеСредство) Экспорт
	
	Форма = ПараметрыФормы.Форма;
	Объект = ПараметрыФормы.Объект;
	Если ПараметрыФормы.Свойство("ИмяТабличнойЧасти") Тогда
		ИмяТабличнойЧасти = ПараметрыФормы.ИмяТабличнойЧасти;
	Иначе
		ИмяТабличнойЧасти = "ОС";
	КонецЕсли;
	Если ПараметрыФормы.Свойство("ПолучатьИнвентарныйНомерИзКода") Тогда
		ПолучатьИнвентарныйНомерИзКода = ПараметрыФормы.ПолучатьИнвентарныйНомерИзКода;
	Иначе
		ПолучатьИнвентарныйНомерИзКода = Ложь;
	КонецЕсли;
	
	ОсновноеСредствоНаименование = Строка(ОсновноеСредство);
	
	СписокОС = Объект[ИмяТабличнойЧасти].Выгрузить(, "ОсновноеСредство");
	
	Запрос = Новый Запрос();
	
	Запрос.УстановитьПараметр("СписокОС"	, СписокОС);
	Запрос.УстановитьПараметр("Наименование", ОсновноеСредствоНаименование);
	Запрос.УстановитьПараметр("Организация"	, Объект.Организация);
	Запрос.УстановитьПараметр("Дата"		, Объект.Дата);
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОсновныеСредства.Ссылка КАК ОсновноеСредство,
	|	ОсновныеСредства.Код КАК Код
	|ПОМЕСТИТЬ ТаблицаОС
	|ИЗ
	|	Справочник.ОсновныеСредства КАК ОсновныеСредства
	|ГДЕ
	|	ОсновныеСредства.Наименование = &Наименование
	|	И (НЕ ОсновныеСредства.Ссылка В (&СписокОС))
	|	И ОсновныеСредства.ПометкаУдаления = ЛОЖЬ
	|	И ОсновныеСредства.ЭтоГруппа = ЛОЖЬ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство";
	Запрос.Выполнить();
	
	Если НЕ ПолучатьИнвентарныйНомерИзКода Тогда
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство КАК ОсновноеСредство,
		|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ИнвентарныйНомер
		|ПОМЕСТИТЬ ИнвентарныеНомера
		|ИЗ
		|	РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(
		|			&Дата,
		|			Организация = &Организация
		|				И ОсновноеСредство В
		|					(ВЫБРАТЬ
		|						ТаблицаОС.ОсновноеСредство
		|					ИЗ
		|						ТаблицаОС КАК ТаблицаОС)) КАК ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ОсновноеСредство";
		Запрос.Выполнить();
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаОС.ОсновноеСредство КАК ОсновноеСредство,
	|	" + ?(ПолучатьИнвентарныйНомерИзКода, "ТаблицаОС.Код", "ЕСТЬNULL(ИнвентарныеНомера.ИнвентарныйНомер, """")") + " КАК ИнвентарныйНомер
	|ИЗ
	|	ТаблицаОС КАК ТаблицаОС" + ?(ПолучатьИнвентарныйНомерИзКода, "", "
	|		ЛЕВОЕ СОЕДИНЕНИЕ ИнвентарныеНомера КАК ИнвентарныеНомера
	|		ПО ТаблицаОС.ОсновноеСредство = ИнвентарныеНомера.ОсновноеСредство") + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОсновноеСредство,
	|	ИнвентарныйНомер
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		ШаблонСообщения = НСтр("ru = 'Другие элементы справочника с наименованием ""%1"" в справочнике ""%2"" отсутствуют.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ОсновноеСредствоНаименование, Метаданные.Справочники.ОсновныеСредства.Представление());
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , "Объект");
		Возврат Ложь;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = Объект[ИмяТабличнойЧасти].Добавить();
		НоваяСтрока.ОсновноеСредство = Выборка.ОсновноеСредство;
		Если НоваяСтрока.Свойство("ИнвентарныйНомерРегл") Тогда
			НоваяСтрока.ИнвентарныйНомерРегл = Выборка.ИнвентарныйНомер;
		ИначеЕсли НоваяСтрока.Свойство("ИнвентарныйНомер") Тогда
			НоваяСтрока.ИнвентарныйНомер = Выборка.ИнвентарныйНомер;
		КонецЕсли;
	КонецЦикла;
	
	Форма.Модифицированность = Истина;
	
	Возврат Истина;
	
КонецФункции // ДозаполнитьТабличнуюЧастьОсновнымиСредствамиПоНаименованию()

// Функция возвращает таблицу значений с инвентарными номерами ОС.
//
// Параметры
//  ТаблицаОС   - Таблица значений со списком ОС, для которой нужно получить МОЛ.
//                Обязательные колонки: НомерСтроки, ОсновноеСредство
//  Организация 			 - Организация, по которой требуется получить МОЛ.
// 	СтруктурноеПодразделение - Структурное подразделение, по которой требуется получить МОЛ.
//  Дата        			 - Дата, на которую требуется получить МОЛ.
//
//  ПоддержкаРаботыСоСтруктурнымиПодразделениями - Параметр использованя структурных подразделений.
//
// Возвращаемое значение:
//   ТаблицаЗначений - Таблица с МОЛ. Колонки: НомерСтроки, ОсновноеСредство, МОЛ
//
Функция ПолучитьТаблицуМОЛ(ТаблицаОС, Организация, СтруктурноеПодразделение, Дата, ПоддержкаРаботыСоСтруктурнымиПодразделениями) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ОсновноеСредство", ТаблицаОС.ВыгрузитьКолонку("ОсновноеСредство"));
	Запрос.УстановитьПараметр("Организация",      Организация);
	Запрос.УстановитьПараметр("Дата",             Дата);
	
	Если ПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
		Запрос.УстановитьПараметр("СтруктурноеПодразделение", СтруктурноеПодразделение);
		УчетПоСтруктурнымПодразделениям = " И СтруктурноеПодразделение = &СтруктурноеПодразделение ";
	Иначе
		УчетПоСтруктурнымПодразделениям = "";
	КонецЕсли;
		
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МестонахождениеОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство КАК ОсновноеСредство,
	|	МестонахождениеОСБухгалтерскийУчетСрезПоследних.МОЛ,
	|	МестонахождениеОСБухгалтерскийУчетСрезПоследних.Период
	|ИЗ
	|	РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних(&Дата, Организация = &Организация " + УчетПоСтруктурнымПодразделениям + "И ОсновноеСредство В (&ОсновноеСредство)) КАК МестонахождениеОСБухгалтерскийУчетСрезПоследних";
	
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();;

	ТаблицаРезультата = ТаблицаОС.Скопировать();
	Если ТаблицаРезультата.Колонки.Найти("МОЛ") = Неопределено Тогда 
		ТаблицаРезультата.Колонки.Добавить("МОЛ", ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповСтроки(50));
	КонецЕсли;
	ТаблицаРезультата.Колонки.Добавить("Период", ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповДаты(ЧастиДаты.ДатаВремя));
	ТаблицаРезультата.Индексы.Добавить("ОсновноеСредство");
	
	Для Каждого СтрокаЗапроса Из ТаблицаЗапроса Цикл
		
		СтрокаРезультата = ТаблицаРезультата.Найти(СтрокаЗапроса.ОсновноеСредство, "ОсновноеСредство");
		Если СтрокаРезультата <> Неопределено Тогда
			СтрокаРезультата.МОЛ 	= СтрокаЗапроса.МОЛ;
			СтрокаРезультата.Период = СтрокаЗапроса.Период;
		КонецЕсли;
	
	КонецЦикла;
	
	Возврат ТаблицаРезультата;

КонецФункции 

// Функция возвращает структуру сведений об МОЛ ОС.
//
// Параметры
//  ОсновноеСредство - Объект основных средств, для которого требуется получить МОЛ.
//  Организация      - Организация, по которой требуется получить МОЛ.
// 	СтруктурноеПодразделение - Структурное подразделение, по которой требуется получить МОЛ.
//  Дата             - Дата, на которую требуется получить МОЛ.
//  ПоддержкаРаботыСоСтруктурнымиПодразделениями - Параметр использованя структурных подразделений.
//
// Возвращаемое значение:
//  Структура
//		МОЛ 	-	МОЛ переданного ОС
//		Период	-   Дата и время установки 
//
Функция СведенияОбМОЛОСЗ(Знач ОсновноеСредство, Знач Организация, Знач СтруктурноеПодразделение, Знач Дата, Знач ПоддержкаРаботыСоСтруктурнымиПодразделениями) Экспорт
	
	Результат = Новый Структура();
	Результат.Вставить("МОЛ", 	 "");
	Результат.Вставить("Период", '0001-01-01');

	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ОсновноеСредство", ОсновноеСредство);
	Запрос.УстановитьПараметр("Организация"		, Организация);
	Запрос.УстановитьПараметр("Дата"			, Дата);
	
	Если ПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
		Запрос.УстановитьПараметр("СтруктурноеПодразделение", СтруктурноеПодразделение);
		УчетПоСтруктурнымПодразделениям = " И СтруктурноеПодразделение = &СтруктурноеПодразделение ";
	Иначе
		УчетПоСтруктурнымПодразделениям = "";
	КонецЕсли;
		
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МестонахождениеОСБухгалтерскийУчетСрезПоследних.МОЛ,
	|	МестонахождениеОСБухгалтерскийУчетСрезПоследних.Период
	|ИЗ
	|	РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних(&Дата, Организация = &Организация " + УчетПоСтруктурнымПодразделениям + "И ОсновноеСредство В (&ОсновноеСредство)) КАК МестонахождениеОСБухгалтерскийУчетСрезПоследних";
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Результат.Вставить("МОЛ", 	 Выборка.МОЛ);
		Результат.Вставить("Период", Выборка.Период);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // СведенияОбИнвентарномНомереОС()

Функция ПолучитьПризнакПримененияПараметровАмортизацииВТекМесяце(Организация, Знач Дата) Экспорт
	
	Результат = ПолучитьФункциональнуюОпцию("ПрименятьПараметрыНачисленияАмортизацииВМесяцеИзменения", 
		Новый Структура("Организация, Период", Организация, НачалоМесяца(Дата)));
	
	Возврат Результат;
	
КонецФункции

// Функция определяет фактический срок использования актива (в месяцах)
// исходя из даты принятия актива к учету и даты выбытия
//
// Параметры:
//   ДатаПринятияКУчету - дата принятия актива к учету
//   ДатаВыбытия - дата выбытия актива
//
// Возвращаемое значение:
//   Число месяцев.
//
Функция ОпределитьФактическийСрокИспользования(ДатаПринятияКУчету, ДатаВыбытия) Экспорт
	
	КоличествоЛет     = Год(ДатаВыбытия) - Год(ДатаПринятияКУчету);
	КоличествоМесяцев = Месяц(ДатаВыбытия) - Месяц(ДатаПринятияКУчету);
	
	Возврат КоличествоЛет * 12 + КоличествоМесяцев;
	
КонецФункции // ОпределитьФактическийСрокИспользования()

// Функция определяет объем выработки ОС начиная с указанной даты
//
// Параметры:
//   НачальнаяДата - дата, начиная с которой нам необходимо определить объем выработки принятия актива к учету
//   КонечнаяДата - дата, по которую нам необходим проанализировать объем выработки
//   ОсновноеСредство - актив, для которого мы определяем объем выработки
// Возвращаемое значение:
//   Число - объем выработки 
//
Функция ОпределитьОбъемВыработкиОС(НачальнаяДата, КонечнаяДата, ОсновноеСредство) Экспорт
	
	ОбъемВыработки = 0;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
				   |	ВыработкаОСОбороты.КоличествоОборот
				   |ИЗ
				   |	РегистрНакопления.ВыработкаОС.Обороты(&НачДата, &КонДата, , ОсновноеСредство = &ОсновноеСредство) КАК ВыработкаОСОбороты";
				   
	Запрос.УстановитьПараметр("НачДата", НачальнаяДата);
	Запрос.УстановитьПараметр("КонДата", КонечнаяДата);
	Запрос.УстановитьПараметр("ОсновноеСредство", ОсновноеСредство);
	
	ВыборкаОС = Запрос.Выполнить().Выбрать();
	Если ВыборкаОС.Следующий() Тогда
		ОбъемВыработки = ВыборкаОС.КоличествоОборот;
	КонецЕсли;	
	
	Возврат ОбъемВыработки;
	
КонецФункции // ОпределитьФактическийСрокИспользования()


///////////////////////////////////////////////////////////////////////////////
// ОПРЕДЕЛЕНИЕ СТОИМОСТИ АКТИВОВ

// Функция расчитывает стоимость объекта строительства по разным видам учета.
// Возвращает структуру со значениями стоимостей по видам учета, поля:
// - СтоимостьБУ
// - СтоимостьНУ
//
Функция РасчитатьСтоимостьОбъектаСтроительства(ОтражатьВБухгалтерскомУчете,
											   ОтражатьВНалоговомУчете = Ложь,
											   СчетУчетаОбъектаСтроительстваБУ,
											   СчетУчетаОбъектаСтроительстваНУ = Неопределено,
											   ОбъектСтроительства,
											   Организация,
											   Период) Экспорт

	СтруктураСтоимость = Новый Структура;
	СтруктураСтоимость.Вставить("СтоимостьБУ",    0);
	СтруктураСтоимость.Вставить("СтоимостьНУ",    0);

	ПорядокСубконто = Новый Массив();
	ПорядокСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.ОбъектыСтроительства);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекОрганизация",      Организация);
	Запрос.УстановитьПараметр("ТекСчетБУ",           СчетУчетаОбъектаСтроительстваБУ);
	Запрос.УстановитьПараметр("ТекСчетНУ",           СчетУчетаОбъектаСтроительстваНУ);
	Запрос.УстановитьПараметр("ОбъектСтроительства", ОбъектСтроительства);
	Запрос.УстановитьПараметр("ПорядокСубконто",     ПорядокСубконто);
	Запрос.УстановитьПараметр("Период",              Период);
	
	Запрос.Текст = "
	|ВЫБРАТЬ 
	|	ТиповойОстатки.СуммаОстатокДт КАК СтоимостьБУ,
	|	НалоговыйОстаткиНУ.СуммаОстатокДт КАК СтоимостьНУ
	|ИЗ
	|	РегистрБухгалтерии.Типовой.Остатки(&Период, Счет = &ТекСчетБУ, &ПорядокСубконто, Субконто1 = &ОбъектСтроительства И Организация = &ТекОрганизация) КАК ТиповойОстатки	
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Налоговый.Остатки(&Период, Счет = &ТекСчетНУ, &ПорядокСубконто, Субконто1 = &ОбъектСтроительства И Организация = &ТекОрганизация) КАК НалоговыйОстаткиНУ
	|		ПО ТиповойОстатки.Субконто1 = НалоговыйОстаткиНУ.Субконто1";
	
	ТЗ = Запрос.Выполнить().Выгрузить();

	Если ТЗ.Количество() > 0 Тогда

		СтруктураСтоимость.Вставить("СтоимостьБУ" , ТЗ.Итог("СтоимостьБУ"));
		СтруктураСтоимость.Вставить("СтоимостьНУ" , ТЗ.Итог("СтоимостьНУ"));
		
	КонецЕсли;

	Возврат СтруктураСтоимость;

КонецФункции // РасчитатьСтоимостьОбъектаСтроительства()

// Функция расчитывает стоимость объекта модернизации по разным видам учета.
// Возвращает структуру со значениями стоимостей по видам учета, поля:
// - СтоимостьБУ
// - СтоимостьНУ
//
Функция РасчитатьСтоимостьОбъектаМодернизации(ОтражатьВБухгалтерскомУчете,
											   ОтражатьВНалоговомУчете = Ложь,
											   СчетУчетаОбъектаМодернизацииБУ,
											   СчетУчетаОбъектаМодернизацииНУ = Неопределено,
											   ОбъектМодернизации,
											   Организация,
											   Период) Экспорт

	СтруктураСтоимость = Новый Структура;
	СтруктураСтоимость.Вставить("СтоимостьБУ",    0);
	СтруктураСтоимость.Вставить("СтоимостьНУ",    0);

	ПорядокСубконто = Новый Массив();
	ПорядокСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.ОсновныеСредства);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекОрганизация",      Организация);
	Запрос.УстановитьПараметр("ТекСчетБУ",           СчетУчетаОбъектаМодернизацииБУ);
	Запрос.УстановитьПараметр("ТекСчетНУ",           СчетУчетаОбъектаМодернизацииНУ);
	Запрос.УстановитьПараметр("ОбъектМодернизации",  ОбъектМодернизации);
	Запрос.УстановитьПараметр("ПорядокСубконто",     ПорядокСубконто);
	Запрос.УстановитьПараметр("Период",              Период);
	
	Запрос.Текст = "
	|ВЫБРАТЬ 
	|	ТиповойОстатки.СуммаОстатокДт КАК СтоимостьБУ,
	|	НалоговыйОстаткиНУ.СуммаОстатокДт КАК СтоимостьНУ
	|ИЗ
	|	РегистрБухгалтерии.Типовой.Остатки(&Период, Счет = &ТекСчетБУ, &ПорядокСубконто, Субконто1 = &ОбъектМодернизации И Организация = &ТекОрганизация) КАК ТиповойОстатки	
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Налоговый.Остатки(&Период, Счет = &ТекСчетНУ, &ПорядокСубконто, Субконто1 = &ОбъектМодернизации И Организация = &ТекОрганизация) КАК НалоговыйОстаткиНУ
	|		ПО ТиповойОстатки.Субконто1 = НалоговыйОстаткиНУ.Субконто1";
	
	ТЗ = Запрос.Выполнить().Выгрузить();

	Если ТЗ.Количество() > 0 Тогда

		СтруктураСтоимость.Вставить("СтоимостьБУ" , ТЗ.Итог("СтоимостьБУ"));
		СтруктураСтоимость.Вставить("СтоимостьНУ" , ТЗ.Итог("СтоимостьНУ"));
		
	КонецЕсли;

	Возврат СтруктураСтоимость;

КонецФункции // РасчитатьСтоимостьОбъектаМодернизации()

///////////////////////////////////////////////////////////////////////////////
// ОПРЕДЕЛЕНИЕ СОСТОЯНИЯ ОС

// Функция определяет текущее местонахождение для списка ОС
// 
// Параметры:
//  Дата - Дата, дата определения параметров
//  Организация - СправочникСсылка.Организации, организация в которой приняты ОС
//  ОсновныеСредства - СписокЗначений/СправочникСсылка.ОсновныеСредства,
//						ОС, для которых определяется местонахождение
//
// Возвращаемое значение:
//  ТаблицаЗначений, состоит из колонок "ОсновноеСредство", "МОЛОрганизации", "ПодразделениеОрганизации"
//
Функция ОпределитьТекущееМестонахождениеДляСпискаОС(Дата, Организация, ОсновныеСредства, ОпределятьНаКонецДня = Истина) Экспорт
	
	Запрос = Новый Запрос();
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	МестонахождениеОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство,
	               |	МестонахождениеОСБухгалтерскийУчетСрезПоследних.СтруктурноеПодразделение,
	               |	МестонахождениеОСБухгалтерскийУчетСрезПоследних.МОЛ КАК МОЛОрганизации,
	               |	МестонахождениеОСБухгалтерскийУчетСрезПоследних.Местонахождение КАК ПодразделениеОрганизации
	               |ИЗ
	               |	РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних(
	               |			&ТекДата,
	               |			Организация = &Организация
	               |				И ОсновноеСредство В (&ОсновныеСредства)) КАК МестонахождениеОСБухгалтерскийУчетСрезПоследних";
				   
				   
	Запрос.УстановитьПараметр("ТекДата", ?(ОпределятьНаКонецДня, КонецДня(Дата), Дата));
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ОсновныеСредства", ОсновныеСредства);
	
	Результат = Запрос.Выполнить();
	
	ТаблицаМестонахождений = Результат.Выгрузить();
	
	Возврат ТаблицаМестонахождений;
		
КонецФункции	

// Возвращает из справочника событий ОС первую найденную запись с заданным видом события,
// иначе возвращает пустую ссылку на справочник
//
// Параметры
//  ВидСобытия (Перечисление ВидыСобытийОС): вид события
//
// Возвращаемое значение:
//   элемент справочника событий ОС
//
Функция ПолучитьСобытиеПоОСИзСправочника(ВидСобытия) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВидСобытияОС", ВидСобытия);
	Запрос.Текст = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Ссылка,
	|	ВидСобытияОС
	|ИЗ
	|	Справочник.СобытияОС КАК СобытияОС
	|
	|ГДЕ
	|	ВидСобытияОС = &ВидСобытияОС";
	ТаблицаСобытий = Запрос.Выполнить().Выгрузить();

	Если ТаблицаСобытий.Количество()>0 Тогда
		Возврат ТаблицаСобытий[0].Ссылка;

	Иначе
		Возврат Справочники.СобытияОС.ПустаяСсылка();

	КонецЕсли;

КонецФункции // ПолучитьСобытиеПоОСИзСправочника()

//Функция получает стоимость и сумму начисленной амортизации ОС по переданному списку
//возвращает таблицу значений с полученными значениями сумм стоимости и амортизации
//
Функция ОпределитьСтоимостьПоСпискуОС(Организация, СписокОС, Период, ПериодПолученияСтоимостиИАмортизации = Неопределено) Экспорт

	Если ПериодПолученияСтоимостиИАмортизации = Неопределено Тогда
		ПериодПолученияСтоимостиИАмортизации = Период;
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",      Организация);
	Запрос.УстановитьПараметр("СписокОС",         СписокОС);
	Запрос.УстановитьПараметр("Период",    		  ПериодПолученияСтоимостиИАмортизации);
	Запрос.УстановитьПараметр("НачалоПериода",    Период);
	Запрос.УстановитьПараметр("ДатаНачалаПериода",?(ТипЗнч(Период) = Тип("МоментВремени"), 
												  Период.Дата, 
												  Период));
	Запрос.УстановитьПараметр("СубконтоОС",       ПланыВидовХарактеристик.ВидыСубконтоТиповые.ОсновныеСредства);
	Запрос.УстановитьПараметр("СубконтоВА",       ПланыВидовХарактеристик.ВидыСубконтоТиповые.ВнеоборотныеАктивы);
	Запрос.УстановитьПараметр("СнятоСУчета",      Перечисления.ВидыСостоянийОС.СнятоСУчета);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
				   |	СостоянияОСОрганизацииСрезПоследних.ОсновноеСредство КАК ОсновноеСредство
				   |ПОМЕСТИТЬ ВТ_ОС_СнятыеСУчета
				   |ИЗ
				   |	РегистрСведений.СостоянияОСОрганизаций.СрезПоследних(
				   |			&ДатаНачалаПериода,
				   |			Организация = &Организация
				   |				И ОсновноеСредство В (&СписокОС)) КАК СостоянияОСОрганизацииСрезПоследних
				   |ГДЕ
				   |	СостоянияОСОрганизацииСрезПоследних.Состояние = &СнятоСУчета
				   |
				   |ИНДЕКСИРОВАТЬ ПО
				   |	ОсновноеСредство
				   |;
				   |
				   |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ РАЗРЕШЕННЫЕ
				   |	ТиповойОстатки.Счет КАК Счет,
				   |	ТиповойОстатки.Субконто1 КАК Субконто1,
				   |	ТиповойОстатки.СуммаОстатокДт КАК СуммаОстатокДт,
				   |	ТиповойОстатки.СуммаОстатокКт КАК СуммаОстатокКт
				   |ПОМЕСТИТЬ ВТ_ОС_ТиповойОстатки
				   |ИЗ
				   |	РегистрБухгалтерии.Типовой.Остатки(
				   |			&Период,
				   |			,
				   |			&СубконтоОС,
				   |			Организация = &Организация
				   |				И Субконто1 В (&СписокОС)) КАК ТиповойОстатки
				   |
				   |ОБЪЕДИНИТЬ
				   |
				   |ВЫБРАТЬ
				   |	ТиповойОстатки.Счет КАК Счет,
				   |	ТиповойОстатки.Субконто1 КАК Субконто1,
				   |	ТиповойОстатки.СуммаОстатокДт КАК СуммаОстатокДт,
				   |	ТиповойОстатки.СуммаОстатокКт КАК СуммаОстатокКт
				   |ИЗ
				   |	РегистрБухгалтерии.Типовой.Остатки(
				   |			&Период,
				   |			,
				   |			&СубконтоВА,
				   |			Организация = &Организация
				   |				И Субконто1 В (&СписокОС)) КАК ТиповойОстатки
				   |
				   //|ИНДЕКСИРОВАТЬ ПО
				   //|	Счет,
				   //|	Субконто1
				   |;
				   |
				   |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ РАЗРЕШЕННЫЕ
				   |	ОС_БУ.ОсновноеСредство КАК ОС_БУ,
				   |	ЕСТЬNULL(ВТ_СтоимостьОС_БУ.СуммаОстатокДт, 0) КАК СтоимостьБУ,
				   |	ЕСТЬNULL(ВТ_АмортизацияОС_БУ.СуммаОстатокКт, 0) КАК АмортизацияБУ,
				   |	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ПервоначальнаяСтоимость,
				   |	ВЫБОР
				   |		КОГДА ОС_СнятыеСУчета.ОсновноеСредство ЕСТЬ NULL 
				   |			ТОГДА ЛОЖЬ
				   |		ИНАЧЕ ИСТИНА
				   |	КОНЕЦ КАК СнятоСУчета,
				   |	ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.ЛиквидационнаяСтоимость КАК ЛиквидационнаяСтоимостьБУ
				   |ИЗ
				   |	РегистрСведений.СчетаУчетаОС.СрезПоследних(
				   |			&НачалоПериода,
				   |			Организация = &Организация
				   |				И ОсновноеСредство В (&СписокОС)) КАК ОС_БУ
				   |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(
				   |				&НачалоПериода,
				   |				Организация = &Организация
				   |					И ОсновноеСредство В (&СписокОС)) КАК ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних
				   |		ПО ОС_БУ.ОсновноеСредство = ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
				   |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОС_СнятыеСУчета КАК ОС_СнятыеСУчета
				   |		ПО ОС_БУ.ОсновноеСредство = ОС_СнятыеСУчета.ОсновноеСредство
				   |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыАмортизацииОСБухгалтерскийУчет.СрезПоследних(
				   |				&НачалоПериода,
				   |				Организация = &Организация
				   |					И ОсновноеСредство В (&СписокОС)) КАК ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних
				   |		ПО ОС_БУ.ОсновноеСредство = ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
				   |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОС_ТиповойОстатки КАК ВТ_СтоимостьОС_БУ
				   |		ПО ОС_БУ.ОсновноеСредство = ВТ_СтоимостьОС_БУ.Субконто1
				   |			И ОС_БУ.СчетУчетаБУ = ВТ_СтоимостьОС_БУ.Счет
				   |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОС_ТиповойОстатки КАК ВТ_АмортизацияОС_БУ
				   |		ПО ОС_БУ.ОсновноеСредство = ВТ_АмортизацияОС_БУ.Субконто1
				   |			И ОС_БУ.СчетНачисленияАмортизацииБУ = ВТ_АмортизацияОС_БУ.Счет";
		
	ТЗ = Запрос.Выполнить().Выгрузить();

	Возврат ТЗ;

КонецФункции // ОпределитьСтоимостьПоСпискуОС()

//Получает документ и дату для указанного состояния основного средства по бух учету
//
// Параметры
//
//
// Вовзаращаемое значение
//  Дата и документ - через указанные параметры процедуры.
//
Процедура ПолучитьДокументБухСостоянияОС(ОсновноеСредство, Организация, Состояние, ДатаСведений, 
											ДокРегистратор, ДатаДокРегистратора) Экспорт
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СостояниеОС", Состояние);
	Запрос.УстановитьПараметр("ОсновноеСредство", ОсновноеСредство);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ДатаСведений", ДатаСведений);
	
	УсловиеОрганизация = "";
	Если ЗначениеЗаполнено(Организация)Тогда
		УсловиеОрганизация = " И СостоянияОСОрганизаций.Организация = &Организация ";		
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СостоянияОСОрганизаций.ДатаСостояния КАК Дата,
	|	СостоянияОСОрганизаций.Регистратор КАК Документ
	|ИЗ
	|	РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОСОрганизаций
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			СостоянияОСОрганизаций.ОсновноеСредство КАК ОсновноеСредство,
	|			СостоянияОСОрганизаций.Организация КАК Организация,
	|			СостоянияОСОрганизаций.Состояние КАК Состояние,
	|			МАКСИМУМ(СостоянияОСОрганизаций.ДатаСостояния) КАК ДатаСостояния
	|		ИЗ
	|			РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОСОрганизаций
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|					СостоянияОСОрганизацийСрезПоследних.ОсновноеСредство КАК ОсновноеСредство,
	|					СостоянияОСОрганизацийСрезПоследних.Организация КАК Организация,
	|					СостоянияОСОрганизацийСрезПоследних.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	|					СостоянияОСОрганизацийСрезПоследних.Состояние КАК Состояние,
	|					СостоянияОСОрганизацийСрезПоследних.ДатаСостояния КАК ДатаСостояния
	|				ИЗ
	|					РегистрСведений.СостоянияОСОрганизаций.СрезПоследних(
	|							&ДатаСведений,
	|							ОсновноеСредство = &ОсновноеСредство
	|								" + СтрЗаменить(УсловиеОрганизация, "СостоянияОСОрганизаций.", "") + ") КАК СостоянияОСОрганизацийСрезПоследних
	|				ГДЕ
	|					СостоянияОСОрганизацийСрезПоследних.Состояние = ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийОС.СнятоСУчета)) КАК СнятыеСУчетаОС
	|				ПО СостоянияОСОрганизаций.Организация = СнятыеСУчетаОС.Организация
	|					И СостоянияОСОрганизаций.ОсновноеСредство = СнятыеСУчетаОС.ОсновноеСредство
	|					И СостоянияОСОрганизаций.ДатаСостояния < СнятыеСУчетаОС.ДатаСостояния
	|		ГДЕ
	|			СостоянияОСОрганизаций.Состояние = ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийОС.СнятоСУчета)
	|			И СостоянияОСОрганизаций.ОсновноеСредство = &ОсновноеСредство
	|			" + УсловиеОрганизация + "
	|		
	|		СГРУППИРОВАТЬ ПО
	|			СостоянияОСОрганизаций.ОсновноеСредство,
	|			СостоянияОСОрганизаций.Организация,
	|			СостоянияОСОрганизаций.Состояние
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			СостоянияОСОрганизаций.ОсновноеСредство,
	|			СостоянияОСОрганизаций.Организация,
	|			СостоянияОСОрганизаций.Состояние,
	|			МАКСИМУМ(СостоянияОСОрганизаций.ДатаСостояния)
	|		ИЗ
	|			РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОСОрганизаций
	|		ГДЕ
	|			СостоянияОСОрганизаций.ДатаСостояния <= &ДатаСведений
	|			И (НЕ СостоянияОСОрганизаций.ОсновноеСредство В
	|						(ВЫБРАТЬ
	|							СостоянияОСОрганизаций.ОсновноеСредство
	|						ИЗ
	|							РегистрСведений.СостоянияОСОрганизаций.СрезПоследних(
	|									&ДатаСведений, 
	|									ОсновноеСредство = &ОсновноеСредство
	|									" + СтрЗаменить(УсловиеОрганизация, "СостоянияОСОрганизаций.", "") + ") КАК СостоянияОСОрганизаций
	|						ГДЕ
	|							СостоянияОСОрганизаций.Состояние = ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийОС.СнятоСУчета)))
	|			И СостоянияОСОрганизаций.Состояние = ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийОС.СнятоСУчета)
	|			" + УсловиеОрганизация + "
	|		
	|		СГРУППИРОВАТЬ ПО
	|			СостоянияОСОрганизаций.ОсновноеСредство,
	|			СостоянияОСОрганизаций.Организация,
	|			СостоянияОСОрганизаций.Состояние) КАК РанееСнятыеСУчета
	|		ПО СостоянияОСОрганизаций.Организация = РанееСнятыеСУчета.Организация
	|			И СостоянияОСОрганизаций.ОсновноеСредство = РанееСнятыеСУчета.ОсновноеСредство
	|ГДЕ
	|	ВЫБОР
	|			КОГДА РанееСнятыеСУчета.ДатаСостояния ЕСТЬ NULL 
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ВЫБОР
	|					КОГДА СостоянияОСОрганизаций.ДатаСостояния > РанееСнятыеСУчета.ДатаСостояния
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ ЛОЖЬ
	|				КОНЕЦ
	|		КОНЕЦ
	|	И СостоянияОСОрганизаций.ОсновноеСредство = &ОсновноеСредство
	|	" + УсловиеОрганизация + "
	|	И СостоянияОСОрганизаций.ДатаСостояния <= &ДатаСведений
	|	И СостоянияОСОрганизаций.Состояние = &СостояниеОС
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата";
	
	ВыборкаДоков = Запрос.Выполнить().Выбрать();

	Если ВыборкаДоков.Следующий()  Тогда
		ДокРегистратор      = ВыборкаДоков.Документ;
		ДатаДокРегистратора = ВыборкаДоков.Дата;
	Иначе
		ДокРегистратор      = Неопределено;
		ДатаДокРегистратора = '00010101';
	КонецЕсли;

КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБРАБОТКИ ЗАПОЛНЕНИ ДОКУМЕНТОВ ПО ОС

// Функция заполняет краткий состав МОЛ или подразделений.
//  
// Параметры:
//  ТЧДокумента 		- Табличная часть документа 
//  КолонкаЗаполнения   - Строка, наименование колокни заполнения
//
Функция ЗаполнитьКраткийСоставДокументаОСМОЛПодразделения(ТЧДокумента, КолонкаЗаполнения, ЗаполнятьПоМол) Экспорт

	КраткийСоставДокумента = "";
	
	Если ЗаполнятьПоМол Тогда 
		Для каждого СтрокаТЧ Из ТЧДокумента Цикл
			
			ФИОФизЛица = ОбщегоНазначенияБК.ФамилияИнициалыФизЛица(СтрокаТЧ[КолонкаЗаполнения]);
			Если Найти(КраткийСоставДокумента, ФИОФизЛица) = 0 Тогда
				
				Если СтрДлина(КраткийСоставДокумента) < 250 Тогда
					КраткийСоставДокумента = КраткийСоставДокумента + ", " + ФИОФизЛица;
				Иначе
					КраткийСоставДокумента = Сред(КраткийСоставДокумента,3,95) + "...";
					Прервать;
				КонецЕсли;
				
			КонецЕсли; 
			
		КонецЦикла;
	Иначе 
		Для каждого СтрокаТЧ Из ТЧДокумента Цикл
			
			Подразделение = СокрЛП(СтрокаТЧ[КолонкаЗаполнения].Наименование);
			Если Найти(КраткийСоставДокумента, Подразделение) = 0 Тогда
				
				Если СтрДлина(КраткийСоставДокумента) < 250 Тогда
					КраткийСоставДокумента = КраткийСоставДокумента + ", " + Подразделение;
				Иначе
					КраткийСоставДокумента = Сред(КраткийСоставДокумента,3,95) + "...";
					Прервать;
				КонецЕсли;
				
			КонецЕсли; 
			
		КонецЦикла;

	КонецЕсли;
	
	Если Лев(КраткийСоставДокумента,2) = ", " Тогда
		ДлинаСтроки = СтрДлина(КраткийСоставДокумента);
		Если ДлинаСтроки < 250 Тогда
			КраткийСоставДокумента = Сред(КраткийСоставДокумента,3)
		Иначе
			КраткийСоставДокумента = Сред(КраткийСоставДокумента,3,95) + "...";
		КонецЕсли; 
		
	КонецЕсли;
	
	Возврат КраткийСоставДокумента;
	
КонецФункции // ЗаполнитьКраткийСоставДокумента()

/////////////////////////////////////////////////////////////////////////////////
// ОПРЕДЕЛЕНИЕ СОСТОЯНИЯ НМА

//Функция получает стоимость и сумму начисленной амортизации НМА по переданному списку
//возвращает таблицу значений с полученными значениями сумм стоимости и амортизации
//
Функция ОпределитьСтоимостьПоСпискуНМА(Организация, СтруктурноеПодразделение, СписокНМА, Период) Экспорт

	СубконтоНМА = Новый массив();
	СубконтоНМА.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.НематериальныеАктивы);

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",				Организация);
	Запрос.УстановитьПараметр("СтруктурноеПодразделение",	СтруктурноеПодразделение);
	Запрос.УстановитьПараметр("СписокНМА",					СписокНМА);
	Запрос.УстановитьПараметр("НачалоПериода",				Период);
	Запрос.УстановитьПараметр("СубконтоНМА",				СубконтоНМА);
	
	Если СтруктурноеПодразделение <> Неопределено Тогда
		УсловиеСтруктурноеПодразделение = " И СтруктурноеПодразделение = &СтруктурноеПодразделение ";
	Иначе
		УсловиеСтруктурноеПодразделение = "";
	КонецЕсли;
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НМА_БУ.НематериальныйАктив КАК НМА_БУ,
	|	НМА_БУ.СчетУчетаБУ КАК СчетУчетаБУ,
	|	НМА_БУ.СчетНачисленияАмортизацииБУ КАК СчетАмортизацииБУ,
	|	СтоимостьНМА_БУ.СуммаОстатокДт КАК СтоимостьБУ,
	|	АмортизацияНМА_БУ.СуммаОстатокКт КАК АмортизацияБУ
	|ИЗ
	|	РегистрСведений.СчетаУчетаНМА.СрезПоследних(
	|			&НачалоПериода,
	|			Организация = &Организация
	|				И НематериальныйАктив В (&СписокНМА)) КАК НМА_БУ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Типовой.Остатки(
	|				&НачалоПериода,
	|				,
	|				&СубконтоНМА,
	|				Организация = &Организация " + УсловиеСтруктурноеПодразделение + "
	|					И Субконто1 В (&СписокНМА)) КАК СтоимостьНМА_БУ
	|		ПО НМА_БУ.НематериальныйАктив = СтоимостьНМА_БУ.Субконто1
	|			И НМА_БУ.СчетУчетаБУ = СтоимостьНМА_БУ.Счет
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Типовой.Остатки(
	|				&НачалоПериода,
	|				,
	|				&СубконтоНМА,
	|				Организация = &Организация   " + УсловиеСтруктурноеПодразделение + "
	|					И Субконто1 В (&СписокНМА)) КАК АмортизацияНМА_БУ
	|		ПО НМА_БУ.НематериальныйАктив = АмортизацияНМА_БУ.Субконто1
	|			И НМА_БУ.СчетНачисленияАмортизацииБУ = АмортизацияНМА_БУ.Счет
	|";
	
	ТЗ = Запрос.Выполнить().Выгрузить();

	ЧисловыеКолонки = Новый Структура("СтоимостьБУ, АмортизацияБУ");

	Для каждого СтрокаТЗ из ТЗ цикл

		Для каждого Колонка из ЧисловыеКолонки цикл

			Если СтрокаТЗ[Колонка.Ключ] = Null тогда
				СтрокаТЗ[Колонка.Ключ] = 0;
			КонецЕсли;

		КонецЦикла;

	КонецЦикла;

	Возврат ТЗ;

КонецФункции

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ АМОРТИЗАЦИИ ОС

// Расчитывает сумму амортизации по указаному основному средству по бух учету
//
// Параметры
//  ОсновноеСредство                            - СправочникСсылка.ОсновныеСредства - ОС, по которому 
//                                                нужно рассчитать амортизацию.
//  ДатаРасчета                                 - Дата - Дата расчета амортизации
//
// Возвращаемое значение:
//   Число - Сумма начисленной амортизации
//
Функция РасчетАмортизацииБухРегл(ДатаРасчета, Организация, СтруктурноеПодразделение, ОсновноеСредство = Неопределено, 
									ВыдаватьСообщения = Истина, ДокОбъект = Неопределено) Экспорт

	ТаблицаАмортизации = Новый ТаблицаЗначений();

	ТаблицаАмортизации.Колонки.Добавить("ОС",							Новый ОписаниеТипов("СправочникСсылка.ОсновныеСредства"));
    ТаблицаАмортизации.Колонки.Добавить("СтруктурноеПодразделение",		Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	ТаблицаАмортизации.Колонки.Добавить("СчетУчетаБУ",					Новый ОписаниеТипов("ПланСчетовСсылка.Типовой"));
	ТаблицаАмортизации.Колонки.Добавить("СчетАмортизацииБУ",			Новый ОписаниеТипов("ПланСчетовСсылка.Типовой"));
	ТаблицаАмортизации.Колонки.Добавить("НаправлениеАмортизации", 		Новый ОписаниеТипов("СправочникСсылка.СпособыОтраженияРасходовПоАмортизации"));
	ТаблицаАмортизации.Колонки.Добавить("ПризнакФиксированногоАктива",  Новый ОписаниеТипов("Булево"));
	ТаблицаАмортизации.Колонки.Добавить("Бух",                    		ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
	
	// колонка ТекущееПодразделение содержит подразделение, в котором числится ОС.
	// подставляется в качестве аналитики при отражении расходов по амортизации, если соответствующая
	// аналитика в справочнике не заполнена
	ТаблицаАмортизации.Колонки.Добавить("ТекущееПодразделение",			Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	ТаблицаАмортизации.Колонки.Добавить("ТекущийМОЛ",					Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	
	// определим признак применения параметров амортизации в тек. месяце
	ПрименятьПараметрыАмортизацииВТекМесяце = ПолучитьПризнакПримененияПараметровАмортизацииВТекМесяце(Организация, ДатаРасчета); 
	ПериодПараметровАмортизации = ?(ПрименятьПараметрыАмортизацииВТекМесяце, Новый Граница(КонецМесяца(ДатаРасчета)), НачалоМесяца(ДатаРасчета));
	
	Запрос = Новый Запрос();
	
	Запрос.УстановитьПараметр("НачалоГода",                  НачалоГода(ДатаРасчета));
	Запрос.УстановитьПараметр("Организация",                 Организация);
	Запрос.УстановитьПараметр("СтруктурноеПодразделение",    СтруктурноеПодразделение);
	Запрос.УстановитьПараметр("НачалоПериода",               НачалоМесяца(ДатаРасчета));
	Запрос.УстановитьПараметр("КонецПериода",              	 Новый Граница(КонецМесяца(ДатаРасчета)));
	Запрос.УстановитьПараметр("Период",                    	 ДатаРасчета);
	Запрос.УстановитьПараметр("СнятоСУчета",                 Перечисления.ВидыСостоянийОС.СнятоСУчета);
	Запрос.УстановитьПараметр("ПериодПараметровАмортизации", ПериодПараметровАмортизации);
	
	// Выбывший актив может иметь стоимостной баланс и участвовать в учете ст. 
	СостоянияФА = Новый СписокЗначений();	
	СостоянияФА.Добавить(Перечисления.ВидыСостоянийФА.ПринятКУчету);
	СостоянияФА.Добавить(Перечисления.ВидыСостоянийФА.Выбыл);                  	
	Запрос.УстановитьПараметр("СостоянияФА", СостоянияФА);	
	
	Если ОсновноеСредство = Неопределено Тогда
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
		               |ИЗ
		               |	РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(&Период, ) КАК ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних
		               |ГДЕ
		               |	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.Организация = &Организация
		               |	И ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.СтруктурноеПодразделение = &СтруктурноеПодразделение";
		ОсновноеСредство = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ОсновноеСредство");
	КонецЕсли;

	Запрос.УстановитьПараметр("ОсновноеСредство", ОсновноеСредство);
	ТекстУсловия = " И ОсновноеСредство В (&ОсновноеСредство)";
	ТекстУсловияПереоценки = " И ВнеоборотныйАктив В (&ОсновноеСредство)"; 
	
	СубконтоОС = Новый Массив();
	СубконтоОС.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.ОсновныеСредства);
	Запрос.УстановитьПараметр("СубконтоОС", СубконтоОС);
     
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СостоянияОСОрганизаций.ОсновноеСредство КАК ОсновноеСредство
	|ПОМЕСТИТЬ СнятыеСУчета
	|ИЗ
	|	РегистрСведений.СостоянияОСОрганизаций.СрезПоследних(
	|			&Период,
	|			Организация = &Организация) КАК СостоянияОСОрганизаций
	|ГДЕ
	|	СостоянияОСОрганизаций.Состояние = &СнятоСУчета
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НачислениеАмортизацииБухгалтерскийУчетСрезПоследних.ОсновноеСредство КАК ОсновноеСредство
	|ПОМЕСТИТЬ СписокОС
	|ИЗ
	|	РегистрСведений.НачислениеАмортизацииОСБухгалтерскийУчет.СрезПоследних(
	|			&ПериодПараметровАмортизации,
	|			Организация = &Организация " + ТекстУсловия + " 
	|				И (НЕ ОсновноеСредство В
	|						(ВЫБРАТЬ
	|							СнятыеСУчета.ОсновноеСредство
	|						ИЗ
	|							СнятыеСУчета))) КАК НачислениеАмортизацииБухгалтерскийУчетСрезПоследних
	|ГДЕ
	|	НачислениеАмортизацииБухгалтерскийУчетСрезПоследних.НачислятьАмортизацию = ИСТИНА
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних.ОсновноеСредство КАК ОсновноеСредство,
	|	ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних.ИнвентарныйНомер,
	|	ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних.СпособНачисленияАмортизации,
	|	ЕСТЬNULL(ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних.ПервоначальнаяСтоимость, 0) КАК ПервоначальнаяСтоимость,
	|	ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних.ПараметрВыработки
	|ПОМЕСТИТЬ ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних
	|ИЗ
	|	РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(&ПериодПараметровАмортизации, Организация = &Организация) КАК ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СписокОС КАК СписокОС
	|		ПО ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних.ОсновноеСредство = СписокОС.ОсновноеСредство
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство,
	|	ПараметрВыработки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВыработкаОСОбороты.ОсновноеСредство КАК ОсновноеСредство,
	|	ВыработкаОСОбороты.ПараметрВыработки,
	|	ЕСТЬNULL(ВыработкаОСОбороты.КоличествоОборот, 0) КАК КоличествоОборот
	|ПОМЕСТИТЬ ВыработкаОСОбороты
	|ИЗ
	|	РегистрНакопления.ВыработкаОС.Обороты(&НачалоПериода, &КонецПериода, , ) КАК ВыработкаОСОбороты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СписокОС КАК СписокОС
	|		ПО ВыработкаОСОбороты.ОсновноеСредство = СписокОС.ОсновноеСредство
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних КАК ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних
	|		ПО ВыработкаОСОбороты.ПараметрВыработки = ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних.ПараметрВыработки
	|			И ВыработкаОСОбороты.ОсновноеСредство = ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних.ОсновноеСредство
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство КАК ОсновноеСредство,
	|	ЕСТЬNULL(ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.СрокИспользованияДляВычисленияАмортизации, 0) КАК СрокИспользованияДляВычисленияАмортизации,
	|	ЕСТЬNULL(ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.СтоимостьДляВычисленияАмортизации, 0) КАК СтоимостьДляВычисленияАмортизации,
	|	ЕСТЬNULL(ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.ЛиквидационнаяСтоимость, 0) КАК ЛиквидационнаяСтоимость,
	|	ЕСТЬNULL(ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.ОбъемПродукцииРаботДляВычисленияАмортизации, 0) КАК ОбъемПродукцииРаботДляВычисленияАмортизации,
	|	ЕСТЬNULL(ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.КоэффициентАмортизации, 0) КАК КоэффициентАмортизации,
	|	ЕСТЬNULL(ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.КоэффициентУскорения, 0) КАК КоэффициентУскорения,
	|	ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.Период
	|ПОМЕСТИТЬ ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних
	|ИЗ
	|	РегистрСведений.ПараметрыАмортизацииОСБухгалтерскийУчет.СрезПоследних(&ПериодПараметровАмортизации, Организация = &Организация) КАК ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СписокОС КАК СписокОС
	|		ПО ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство = СписокОС.ОсновноеСредство
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ГрафикиАмортизацииБухгалтерскийУчетСрезПоследних.ОсновноеСредство КАК ОсновноеСредство,
	|	ГрафикиАмортизацииБухгалтерскийУчетСрезПоследних.ГрафикАмортизации
	|ПОМЕСТИТЬ ГрафикиАмортизацииБухгалтерскийУчетСрезПоследних
	|ИЗ
	|	РегистрСведений.ГрафикиАмортизацииОСБухгалтерскийУчет.СрезПоследних(&ПериодПараметровАмортизации, Организация = &Организация) КАК ГрафикиАмортизацииБухгалтерскийУчетСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СписокОС КАК СписокОС
	|		ПО ГрафикиАмортизацииБухгалтерскийУчетСрезПоследних.ОсновноеСредство = СписокОС.ОсновноеСредство
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство КАК ОсновноеСредство,
	|	СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетСрезПоследних.СпособОтраженияРасходовПоАмортизации
	|ПОМЕСТИТЬ СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетСрезПоследних
	|ИЗ
	|	РегистрСведений.СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчет.СрезПоследних(&ПериодПараметровАмортизации, Организация = &Организация) КАК СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СписокОС КАК СписокОС
	|		ПО СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство = СписокОС.ОсновноеСредство
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СчетаУчетаОсновныхСредствСрезПоследних.ОсновноеСредство КАК ОсновноеСредство,
	|	СчетаУчетаОсновныхСредствСрезПоследних.СчетУчетаБУ,
	|	СчетаУчетаОсновныхСредствСрезПоследних.СчетНачисленияАмортизацииБУ
	|ПОМЕСТИТЬ СчетаУчетаОсновныхСредствСрезПоследних
	|ИЗ
	|	РегистрСведений.СчетаУчетаОС.СрезПоследних(&ПериодПараметровАмортизации, Организация = &Организация) КАК СчетаУчетаОсновныхСредствСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СписокОС КАК СписокОС
	|		ПО СчетаУчетаОсновныхСредствСрезПоследних.ОсновноеСредство = СписокОС.ОсновноеСредство
	|				
	|
	//|ИНДЕКСИРОВАТЬ ПО
	//|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СтоимостьОСНачалоПериода.Субконто1 КАК ОсновноеСредство,
	|	ЕСТЬNULL(СтоимостьОСНачалоПериода.СуммаОстатокДт, 0) КАК СтоимостьНачальныйОстаток
	|ПОМЕСТИТЬ СтоимостьОСНачалоПериода
	|ИЗ
	|	РегистрБухгалтерии.Типовой.Остатки(
	|			&НачалоПериода,
	|			Счет В
	|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					СчетаУчетаОсновныхСредствСрезПоследних.СчетУчетаБУ
	|				ИЗ
	|					СчетаУчетаОсновныхСредствСрезПоследних),
	|			&СубконтоОС,
	|			Организация = &Организация) КАК СтоимостьОСНачалоПериода
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СписокОС КАК СписокОС
	|		ПО СтоимостьОСНачалоПериода.Субконто1 = СписокОС.ОсновноеСредство
	|			
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СчетаУчетаОсновныхСредствСрезПоследних КАК СчетаУчетаОсновныхСредствСрезПоследних
	|		ПО СтоимостьОСНачалоПериода.Субконто1 = СчетаУчетаОсновныхСредствСрезПоследних.ОсновноеСредство	
	|		И СтоимостьОСНачалоПериода.Счет 	  = СчетаУчетаОсновныхСредствСрезПоследних.СчетУчетаБУ
	|
	//|ИНДЕКСИРОВАТЬ ПО
	//|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СтоимостьОСКонецПериода.Субконто1 КАК ОсновноеСредство,
	|	ЕСТЬNULL(СтоимостьОСКонецПериода.СуммаОстатокДт, 0) КАК СтоимостьКонечныйОстаток
	|ПОМЕСТИТЬ СтоимостьОСКонецПериода
	|ИЗ
	|	РегистрБухгалтерии.Типовой.Остатки(
	|			&КонецПериода,
	|			Счет В
	|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					СчетаУчетаОсновныхСредствСрезПоследних.СчетУчетаБУ
	|				ИЗ
	|					СчетаУчетаОсновныхСредствСрезПоследних),
	|			&СубконтоОС,
	|			Организация = &Организация) КАК СтоимостьОСКонецПериода
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СписокОС КАК СписокОС
	|		ПО СтоимостьОСКонецПериода.Субконто1 = СписокОС.ОсновноеСредство
	|			
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СчетаУчетаОсновныхСредствСрезПоследних КАК СчетаУчетаОсновныхСредствСрезПоследних
	|		ПО СтоимостьОСКонецПериода.Субконто1 = СчетаУчетаОсновныхСредствСрезПоследних.ОсновноеСредство	
	|		И СтоимостьОСКонецПериода.Счет 	  = СчетаУчетаОсновныхСредствСрезПоследних.СчетУчетаБУ
    |
	//|ИНДЕКСИРОВАТЬ ПО
	//|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	АмортизацияОСНачалоПериода.Субконто1 КАК ОсновноеСредство,
	|	ЕСТЬNULL(АмортизацияОСНачалоПериода.СуммаОстатокКт, 0) КАК АмортизацияНачальныйОстаток
	|ПОМЕСТИТЬ АмортизацияОСНачалоПериода
	|ИЗ
	|	РегистрБухгалтерии.Типовой.Остатки(
	|			&НачалоПериода,
	|			Счет В
	|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					СчетаУчетаОсновныхСредствСрезПоследних.СчетНачисленияАмортизацииБУ
	|				ИЗ
	|					СчетаУчетаОсновныхСредствСрезПоследних),
	|			&СубконтоОС,
	|			Организация = &Организация) КАК АмортизацияОСНачалоПериода
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СписокОС КАК СписокОС
	|		ПО АмортизацияОСНачалоПериода.Субконто1 = СписокОС.ОсновноеСредство
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СчетаУчетаОсновныхСредствСрезПоследних КАК СчетаУчетаОсновныхСредствСрезПоследних
	|		ПО АмортизацияОСНачалоПериода.Субконто1 = СчетаУчетаОсновныхСредствСрезПоследних.ОсновноеСредство	
	|		И АмортизацияОСНачалоПериода.Счет 	  = СчетаУчетаОсновныхСредствСрезПоследних.СчетНачисленияАмортизацииБУ
	|
	//|ИНДЕКСИРОВАТЬ ПО
	//|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	АмортизацияОСКонецПериода.Субконто1 КАК ОсновноеСредство,
	|	ЕСТЬNULL(АмортизацияОСКонецПериода.СуммаОстатокКт, 0) КАК АмортизацияКонечныйОстаток
	|ПОМЕСТИТЬ АмортизацияОСКонецПериода
	|ИЗ
	|	РегистрБухгалтерии.Типовой.Остатки(
	|			&КонецПериода,
	|			Счет В
	|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					СчетаУчетаОсновныхСредствСрезПоследних.СчетНачисленияАмортизацииБУ
	|				ИЗ
	|					СчетаУчетаОсновныхСредствСрезПоследних),
	|			&СубконтоОС,
	|			Организация = &Организация) КАК АмортизацияОСКонецПериода
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СписокОС КАК СписокОС
	|		ПО АмортизацияОСКонецПериода.Субконто1 = СписокОС.ОсновноеСредство
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СчетаУчетаОсновныхСредствСрезПоследних КАК СчетаУчетаОсновныхСредствСрезПоследних
	|		ПО АмортизацияОСКонецПериода.Субконто1 = СчетаУчетаОсновныхСредствСрезПоследних.ОсновноеСредство	
	|		И АмортизацияОСКонецПериода.Счет 	  = СчетаУчетаОсновныхСредствСрезПоследних.СчетНачисленияАмортизацииБУ
	|
	//|ИНДЕКСИРОВАТЬ ПО
	//|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	АмортизацияОСОбороты.Субконто1 КАК ОсновноеСредство,
	|	ЕСТЬNULL(АмортизацияОСОбороты.СуммаОборотКт, 0) КАК АмортизацияОборот
	|ПОМЕСТИТЬ АмортизацияОСОбороты
	|ИЗ
	|	РегистрБухгалтерии.Типовой.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			Период,
	|			Счет В
	|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					СчетаУчетаОсновныхСредствСрезПоследних.СчетНачисленияАмортизацииБУ
	|				ИЗ
	|					СчетаУчетаОсновныхСредствСрезПоследних),
	|			&СубконтоОС,
	|			Организация = &Организация,
	|			,
	|			) КАК АмортизацияОСОбороты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СписокОС КАК СписокОС
	|		ПО АмортизацияОСОбороты.Субконто1 = СписокОС.ОсновноеСредство
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СчетаУчетаОсновныхСредствСрезПоследних КАК СчетаУчетаОсновныхСредствСрезПоследних
	|		ПО АмортизацияОСОбороты.Субконто1 = СчетаУчетаОсновныхСредствСрезПоследних.ОсновноеСредство	
	|		И АмортизацияОСОбороты.Счет 	  = СчетаУчетаОсновныхСредствСрезПоследних.СчетНачисленияАмортизацииБУ

	|
	//|ИНДЕКСИРОВАТЬ ПО
	//|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СчетаУчетаОсновныхСредствСрезПоследнихНаНачалоГода.ОсновноеСредство КАК ОсновноеСредство,
	|	СчетаУчетаОсновныхСредствСрезПоследнихНаНачалоГода.СчетУчетаБУ КАК СчетУчетаБУ,
	|	СчетаУчетаОсновныхСредствСрезПоследнихНаНачалоГода.СчетНачисленияАмортизацииБУ КАК СчетНачисленияАмортизацииБУ
	|ПОМЕСТИТЬ СчетаУчетаОсновныхСредствСрезПоследнихНаНачалоГода
	|ИЗ
	|	РегистрСведений.СчетаУчетаОС.СрезПоследних(&НачалоГода, Организация = &Организация) КАК СчетаУчетаОсновныхСредствСрезПоследнихНаНачалоГода
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СписокОС КАК СписокОС
	|		ПО СчетаУчетаОсновныхСредствСрезПоследнихНаНачалоГода.ОсновноеСредство = СписокОС.ОсновноеСредство
	|
	//|ИНДЕКСИРОВАТЬ ПО
	//|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СтоимостьНаНачалоГода.Субконто1 КАК ОсновноеСредство,
	|	ЕСТЬNULL(СтоимостьНаНачалоГода.СуммаОстатокДт, 0) КАК СтоимостьОстатокНаНачалоГода
	|ПОМЕСТИТЬ СтоимостьНаНачалоГода
	|ИЗ
	|	РегистрБухгалтерии.Типовой.Остатки(
	|			&НачалоГода,
	|			Счет В
	|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					СчетаУчетаОсновныхСредствСрезПоследнихНаНачалоГода.СчетУчетаБУ
	|				ИЗ
	|					СчетаУчетаОсновныхСредствСрезПоследнихНаНачалоГода),
	|			&СубконтоОС,
	|			Организация = &Организация) КАК СтоимостьНаНачалоГода
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СписокОС КАК СписокОС
	|		ПО СтоимостьНаНачалоГода.Субконто1 = СписокОС.ОсновноеСредство
	|			
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СчетаУчетаОсновныхСредствСрезПоследнихНаНачалоГода КАК СчетаУчетаОсновныхСредствСрезПоследнихНаНачалоГода
	|		ПО СтоимостьНаНачалоГода.Субконто1 = СчетаУчетаОсновныхСредствСрезПоследнихНаНачалоГода.ОсновноеСредство	
	|		И СтоимостьНаНачалоГода.Счет 	   = СчетаУчетаОсновныхСредствСрезПоследнихНаНачалоГода.СчетУчетаБУ
	|
	//|ИНДЕКСИРОВАТЬ ПО
	//|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	АмортизацияНаНачалоГода.Субконто1 КАК ОсновноеСредство,
	|	ЕСТЬNULL(АмортизацияНаНачалоГода.СуммаОстатокКт, 0) КАК АмортизацияОстатокНаНачалоГода
	|ПОМЕСТИТЬ АмортизацияНаНачалоГода
	|ИЗ
	|	РегистрБухгалтерии.Типовой.Остатки(
	|			&НачалоГода,
	|			Счет В
	|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					СчетаУчетаОсновныхСредствСрезПоследнихНаНачалоГода.СчетНачисленияАмортизацииБУ
	|				ИЗ
	|					СчетаУчетаОсновныхСредствСрезПоследнихНаНачалоГода),
	|			&СубконтоОС,
	|			Организация = &Организация) КАК АмортизацияНаНачалоГода
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СписокОС КАК СписокОС
	|		ПО АмортизацияНаНачалоГода.Субконто1 = СписокОС.ОсновноеСредство
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СчетаУчетаОсновныхСредствСрезПоследнихНаНачалоГода КАК СчетаУчетаОсновныхСредствСрезПоследнихНаНачалоГода
	|		ПО АмортизацияНаНачалоГода.Субконто1 = СчетаУчетаОсновныхСредствСрезПоследнихНаНачалоГода.ОсновноеСредство	
	|		И АмортизацияНаНачалоГода.Счет 	  = СчетаУчетаОсновныхСредствСрезПоследнихНаНачалоГода.СчетНачисленияАмортизацииБУ
	|
	//|ИНДЕКСИРОВАТЬ ПО
	//|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПоложительныеПереоценкиОС.ВнеоборотныйАктив КАК ОсновноеСредство,
	|	СУММА(ПоложительныеПереоценкиОС.СуммаПереоценкиАмортизацииПриход) КАК СуммаПереоценкиАмортизации
	|ПОМЕСТИТЬ ПоложительныеПереоценкиОС
	|ИЗ
	|	РегистрНакопления.ПереоценкаВнеоборотныхАктивов.Обороты(&НачалоПериода, &КонецПериода, , Организация = &Организация и СтруктурноеПодразделение = &СтруктурноеПодразделение" + ТекстУсловияПереоценки + ") КАК ПоложительныеПереоценкиОС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СписокОС КАК СписокОС
	|		ПО ПоложительныеПереоценкиОС.ВнеоборотныйАктив = СписокОС.ОсновноеСредство
	|
	|СГРУППИРОВАТЬ ПО
	|	ПоложительныеПереоценкиОС.ВнеоборотныйАктив
	|
	//|ИНДЕКСИРОВАТЬ ПО
	//|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫРАЗИТЬ(ОбъектыНалоговогоУчетаФА.ФиксированныйАктив КАК Справочник.ОсновныеСредства) КАК ОсновноеСредство
	|ПОМЕСТИТЬ ОбъектыНалоговогоУчетаФА
	|ИЗ
	|	РегистрСведений.ОбъектыНалоговогоУчетаФА.СрезПоследних(
	|			&КонецПериода,
	|			Организация = &Организация
	|				И СостояниеФиксированногоАктива В (&СостоянияФА)) КАК ОбъектыНалоговогоУчетаФА
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СписокОС КАК СписокОС
	|		ПО ОбъектыНалоговогоУчетаФА.ФиксированныйАктив = СписокОС.ОсновноеСредство
	|
	//|ИНДЕКСИРОВАТЬ ПО
	//|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МестонахождениеОССрезПоследних.ОсновноеСредство КАК ОсновноеСредство,
	|	МестонахождениеОССрезПоследних.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	|	МестонахождениеОССрезПоследних.Местонахождение КАК ТекущееПодразделение,
	|	МестонахождениеОССрезПоследних.МОЛ КАК МОЛ
	|ПОМЕСТИТЬ МестонахождениеОС
	|ИЗ
	|	РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних(
	|			&ПериодПараметровАмортизации,
	|			Организация = &Организация)МестонахождениеОССрезПоследних
	|
	//|ИНДЕКСИРОВАТЬ ПО
	//|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СписокОС.ОсновноеСредство,
	|	СписокОС.ОсновноеСредство.Код КАК Код,
	|	ЕСТЬNULL(СтоимостьОСНачалоПериода.СтоимостьНачальныйОстаток, 0) КАК СтоимостьНачальныйОстаток,
	|	ЕСТЬNULL(СтоимостьОСКонецПериода.СтоимостьКонечныйОстаток, 0) КАК СтоимостьКонечныйОстаток,
	|	ЕСТЬNULL(АмортизацияОСНачалоПериода.АмортизацияНачальныйОстаток, 0) КАК АмортизацияНачальныйОстаток,
	|	ЕСТЬNULL(АмортизацияОСКонецПериода.АмортизацияКонечныйОстаток, 0) КАК АмортизацияКонечныйОстаток,
	|	ЕСТЬNULL(АмортизацияОСОбороты.АмортизацияОборот, 0) КАК АмортизацияОборот,
	|	ЕСТЬNULL(ПоложительныеПереоценкиОС.СуммаПереоценкиАмортизации, 0) КАК СуммаПереоценкиАмортизации,
	|	ЕСТЬNULL(ВыработкаОСОбороты.КоличествоОборот, 0) КАК Количество,
	|	ЕСТЬNULL(ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.СрокИспользованияДляВычисленияАмортизации, 0) КАК СрокИспользованияДляВычисленияАмортизации,
	|	ЕСТЬNULL(ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.СтоимостьДляВычисленияАмортизации, 0) КАК СтоимостьДляВычисленияАмортизации,
	|	ЕСТЬNULL(ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.ЛиквидационнаяСтоимость, 0) КАК ЛиквидационнаяСтоимость,
	|	ЕСТЬNULL(ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.ОбъемПродукцииРаботДляВычисленияАмортизации, 0) КАК ОбъемПродукцииРаботДляВычисленияАмортизации,
	|	ЕСТЬNULL(ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.КоэффициентАмортизации, 0) КАК КоэффициентАмортизации,
	|	ЕСТЬNULL(ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.КоэффициентУскорения, 0) КАК КоэффициентУскорения,
	|	ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.Период,
	|	ГрафикиАмортизацииБухгалтерскийУчетСрезПоследних.ГрафикАмортизации,
	|	СчетаУчетаОсновныхСредствСрезПоследних.СчетУчетаБУ,
	|	СчетаУчетаОсновныхСредствСрезПоследних.СчетНачисленияАмортизацииБУ,
	|	ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних.СпособНачисленияАмортизации,
	|	ЕСТЬNULL(ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних.ПервоначальнаяСтоимость, 0) КАК ПервоначальнаяСтоимость,
	|	СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетСрезПоследних.СпособОтраженияРасходовПоАмортизации,
	|	ЕСТЬNULL(СтоимостьНаНачалоГода.СтоимостьОстатокНаНачалоГода, 0) - ЕСТЬNULL(АмортизацияНаНачалоГода.АмортизацияОстатокНаНачалоГода, 0) КАК СтоимостьНаНачалоГода,
	|	ВЫБОР
	|		КОГДА ОбъектыНалоговогоУчетаФА.ОсновноеСредство ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ПризнакФиксированногоАктива,
	|	МестонахождениеОС.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	|	МестонахождениеОС.ТекущееПодразделение КАК ТекущееПодразделение,
	|	МестонахождениеОС.МОЛ КАК ТекущийМОЛ
	|ИЗ
	|	СписокОС КАК СписокОС
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних КАК ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних
	|		ПО СписокОС.ОсновноеСредство = ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ ГрафикиАмортизацииБухгалтерскийУчетСрезПоследних КАК ГрафикиАмортизацииБухгалтерскийУчетСрезПоследних
	|		ПО СписокОС.ОсновноеСредство = ГрафикиАмортизацииБухгалтерскийУчетСрезПоследних.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних КАК ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних
	|		ПО СписокОС.ОсновноеСредство = ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетСрезПоследних КАК СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетСрезПоследних
	|		ПО СписокОС.ОсновноеСредство = СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ СчетаУчетаОсновныхСредствСрезПоследних КАК СчетаУчетаОсновныхСредствСрезПоследних
	|		ПО СписокОС.ОсновноеСредство = СчетаУчетаОсновныхСредствСрезПоследних.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ СтоимостьОСНачалоПериода КАК СтоимостьОСНачалоПериода
	|		ПО СписокОС.ОсновноеСредство = СтоимостьОСНачалоПериода.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ СтоимостьОСКонецПериода КАК СтоимостьОСКонецПериода
	|		ПО СписокОС.ОсновноеСредство = СтоимостьОСКонецПериода.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ АмортизацияОСНачалоПериода КАК АмортизацияОСНачалоПериода
	|		ПО СписокОС.ОсновноеСредство = АмортизацияОСНачалоПериода.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ АмортизацияОСКонецПериода КАК АмортизацияОСКонецПериода
	|		ПО СписокОС.ОсновноеСредство = АмортизацияОСКонецПериода.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ АмортизацияОСОбороты КАК АмортизацияОСОбороты
	|		ПО СписокОС.ОсновноеСредство = АмортизацияОСОбороты.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВыработкаОСОбороты КАК ВыработкаОСОбороты
	|		ПО СписокОС.ОсновноеСредство = ВыработкаОСОбороты.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ СтоимостьНаНачалоГода КАК СтоимостьНаНачалоГода
	|		ПО СписокОС.ОсновноеСредство = СтоимостьНаНачалоГода.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ АмортизацияНаНачалоГода КАК АмортизацияНаНачалоГода
	|		ПО СписокОС.ОсновноеСредство = АмортизацияНаНачалоГода.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПоложительныеПереоценкиОС КАК ПоложительныеПереоценкиОС
	|		ПО СписокОС.ОсновноеСредство = ПоложительныеПереоценкиОС.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОбъектыНалоговогоУчетаФА КАК ОбъектыНалоговогоУчетаФА
	|		ПО СписокОС.ОсновноеСредство = ОбъектыНалоговогоУчетаФА.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ МестонахождениеОС КАК МестонахождениеОС
	|		ПО СписокОС.ОсновноеСредство = МестонахождениеОС.ОсновноеСредство";
	
	ВыборкаПоОС = Запрос.Выполнить().Выбрать();

	ТаблицаГрафиков = ПолучитьТаблицуГрафиков();
	ВидРегламентнойОперации = Перечисления.ВидыРегламентныхОпераций.АмортизацияОСБУ;

	Пока ВыборкаПоОС.Следующий() Цикл
		
		Если (ВыборкаПоОС.АмортизацияОборот + ВыборкаПоОС.СуммаПереоценкиАмортизации) <> 0 Тогда
			Если ВыдаватьСообщения = Истина И ОсновноеСредство <> Неопределено Тогда
				ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации(СтрШаблон(НСтр("ru = 'Бух. расчет амортизации: для основного средства <%1> код <%2> амортизация в этом месяце уже начислялась'"),
					ВыборкаПоОС.ОсновноеСредство, СокрЛП(ВыборкаПоОС.Код)),
					ВыборкаПоОС.ОсновноеСредство, , ДокОбъект, ВидРегламентнойОперации, Ложь);
			КонецЕсли;
			Продолжить; // по указанному ОС в этом месяце уже начисляли амортизацию 
		КонецЕсли;
		
		СуммаАмортизации = 0;
		
		Если Не ЗначениеЗаполнено(ВыборкаПоОС.СчетНачисленияАмортизацииБУ) Тогда
			Если ВыдаватьСообщения = Истина Тогда
				ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации(СтрШаблон(НСтр("ru = 'Бух. расчет амортизации: для основного средства <%1> код <%2> не указан счет для начисления амортизации'"),
					ВыборкаПоОС.ОсновноеСредство, СокрЛП(ВыборкаПоОС.Код)),
					ВыборкаПоОС.ОсновноеСредство, , ДокОбъект, ВидРегламентнойОперации);
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ВыборкаПоОС.СпособНачисленияАмортизации) Тогда
			Если ВыдаватьСообщения = Истина Тогда
				ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации(СтрШаблон(НСтр("ru = 'Бух. расчет амортизации: для основного средства <%1> код <%2> не указан способ амортизации'"),
					ВыборкаПоОС.ОсновноеСредство, СокрЛП(ВыборкаПоОС.Код)),
					ВыборкаПоОС.ОсновноеСредство, , ДокОбъект, ВидРегламентнойОперации);
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ВыборкаПоОС.СтоимостьДляВычисленияАмортизации) Тогда
			Если ВыдаватьСообщения = Истина Тогда
				ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации(СтрШаблон(НСтр("ru = 'Бух. расчет амортизации: для основного средства <%1> код <%2> стоимость равна 0'"),
					ВыборкаПоОС.ОсновноеСредство, СокрЛП(ВыборкаПоОС.Код)),
					ВыборкаПоОС.ОсновноеСредство, , ДокОбъект, ВидРегламентнойОперации);
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		// Для способов начисления амортизации Производственный и ЛинейныйПроцентом
		// не нужна информация о сроке использования, для остальных нужна.
		Если ВыборкаПоОС.СпособНачисленияАмортизации <> Перечисления.СпособыНачисленияАмортизацииОС.Производственный
			И ВыборкаПоОС.СпособНачисленияАмортизации <> Перечисления.СпособыНачисленияАмортизацииОС.ЛинейныйПроцентом
			И Не ЗначениеЗаполнено(ВыборкаПоОС.СрокИспользованияДляВычисленияАмортизации) Тогда
			Если ВыдаватьСообщения = Истина Тогда
				ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации(СтрШаблон(НСтр("ru = 'Бух. расчет амортизации: для основного средства <%1> код <%2> срок использования равен 0'"),
					ВыборкаПоОС.ОсновноеСредство, СокрЛП(ВыборкаПоОС.Код)),
					ВыборкаПоОС.ОсновноеСредство, , ДокОбъект, ВидРегламентнойОперации);
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		Если ВыборкаПоОС.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.ЛинейныйПроцентом
			И Не ЗначениеЗаполнено(ВыборкаПоОС.КоэффициентАмортизации) Тогда
			Если ВыдаватьСообщения = Истина Тогда
				ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации(СтрШаблон(НСтр("ru = 'Бух. расчет амортизации: для основного средства <%1> код <%2> не указан процент годовой амортизации'"),
					ВыборкаПоОС.ОсновноеСредство, СокрЛП(ВыборкаПоОС.Код)),
					ВыборкаПоОС.ОсновноеСредство, , ДокОбъект, ВидРегламентнойОперации);
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		СуммаАмортизации = 0;
		
		Если ВыборкаПоОС.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.Линейный Тогда
			
			СуммаГодовойАмортизации = ВыборкаПоОС.СтоимостьДляВычисленияАмортизации/ВыборкаПоОС.СрокИспользованияДляВычисленияАмортизации * 12;
			
			Если НЕ ЗначениеЗаполнено(ВыборкаПоОС.ГрафикАмортизации) Тогда
				СуммаАмортизации   = СуммаГодовойАмортизации / 12;
			Иначе
				КоэффициентПериода = ПолучитьКоэффициентАмортизацииИзГрафика(ТаблицаГрафиков, ВыборкаПоОС.ГрафикАмортизации, ДатаРасчета);
				СуммаАмортизации   = СуммаГодовойАмортизации * КоэффициентПериода;
			КонецЕсли;
			
		ИначеЕсли ВыборкаПоОС.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.Производственный Тогда
			
			Если НЕ ЗначениеЗаполнено(ВыборкаПоОС.Количество) Тогда
				Продолжить;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ВыборкаПоОС.ОбъемПродукцииРаботДляВычисленияАмортизации) Тогда
				Если ВыдаватьСообщения = Истина Тогда
					ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации(СтрШаблон(НСтр("ru = 'Бух. расчет амортизации: для основного средства <%1> код <%2> объем продукции для вычисления не определен'"),
						ВыборкаПоОС.ОсновноеСредство, СокрЛП(ВыборкаПоОС.Код)),
						ВыборкаПоОС.ОсновноеСредство, , ДокОбъект, ВидРегламентнойОперации);
				КонецЕсли;
				Продолжить;
			КонецЕсли;
		
			СуммаАмортизации = ВыборкаПоОС.СтоимостьДляВычисленияАмортизации * ВыборкаПоОС.Количество / ВыборкаПоОС.ОбъемПродукцииРаботДляВычисленияАмортизации;

		ИначеЕсли ВыборкаПоОС.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.УменьшаемогоОстатка Тогда

			Если Год(ВыборкаПоОС.Период) = Год(ДатаРасчета) Тогда
				СтоимостьИтоговая = ВыборкаПоОС.СтоимостьДляВычисленияАмортизации;
			Иначе
				СтоимостьИтоговая = ВыборкаПоОС.СтоимостьНаНачалоГода;
			КонецЕсли;
			
			СтоимостьИтоговая		= ?(СтоимостьИтоговая = NULL, 0, СтоимостьИтоговая);
			СуммаГодовойАмортизации = СтоимостьИтоговая / ВыборкаПоОС.СрокИспользованияДляВычисленияАмортизации * 12;

			Если НЕ ЗначениеЗаполнено(ВыборкаПоОС.ГрафикАмортизации) Тогда
				СуммаАмортизации	= СуммаГодовойАмортизации / 12;
			Иначе
				КоэффициентПериода	= ПолучитьКоэффициентАмортизацииИзГрафика(ТаблицаГрафиков, ВыборкаПоОС.ГрафикАмортизации, ДатаРасчета);
				СуммаАмортизации	= СуммаГодовойАмортизации * КоэффициентПериода;
			КонецЕсли;
			
			КоэффициентУскорения	= ВыборкаПоОС.КоэффициентУскорения;
			
			Если НЕ ЗначениеЗаполнено(ВыборкаПоОС.КоэффициентУскорения) Тогда
				
				КоэффициентУскорения = 1;
				
				Если ВыдаватьСообщения = Истина Тогда
					ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации(СтрШаблон(НСтр("ru = 'Бух. расчет амортизации: для основного средства <%1> код <%2> коэффициент ускорения не заполнен'"),
						ВыборкаПоОС.ОсновноеСредство, СокрЛП(ВыборкаПоОС.Код)),
						ВыборкаПоОС.ОсновноеСредство, , ДокОбъект, ВидРегламентнойОперации, Ложь);
				КонецЕсли;
			КонецЕсли;

			СуммаАмортизации = СуммаАмортизации * КоэффициентУскорения;

		ИначеЕсли ВыборкаПоОС.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.ПоСуммеЧиселЛетИспользования Тогда

			//Дата последнего изменения параметров
			Если ВыборкаПоОС.Период = Null Тогда
				ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации(СтрШаблон(НСтр("ru = 'Бух. расчет амортизации: для основного средства <%1> код <%2> не определилась дата начала использования (изменения параметров)!'"),
					ВыборкаПоОС.ОсновноеСредство, СокрЛП(ВыборкаПоОС.Код)),
					ВыборкаПоОС.ОсновноеСредство, , ДокОбъект, ВидРегламентнойОперации);
				Продолжить;
			КонецЕсли; 
			
			ДатаНачалаРасчета = НачалоМесяца(ДобавитьМесяц(ВыборкаПоОС.Период,1));

			ЧислоЛетПользования       = ?(ВыборкаПоОС.СрокИспользованияДляВычисленияАмортизации = NULL, 0, ВыборкаПоОС.СрокИспользованияДляВычисленияАмортизации) / 12;
			ЧислоЛетПользования       = Цел(Макс( 1, ЧислоЛетПользования));
			СуммаЧислеЛет             = 0;
			ГодИспользования          = Год(ДатаРасчета) - Год(ДатаНачалаРасчета);
			ГодовщинаНачалаИспользования = Дата(Год(ДатаРасчета), Месяц(ДатаНачалаРасчета), День(ДатаНачалаРасчета));
			
			Если КонецМесяца(ДатаРасчета) >= КонецМесяца(ГодовщинаНачалаИспользования) Тогда
				ГодИспользования = ГодИспользования + 1;
			КонецЕсли;    

			ГодИспользования = Макс(ГодИспользования,1);

			// Формула суммы чисел от 1 до N
			//		S = (N + 1) * N / 2
			СуммаЧислеЛет = (ЧислоЛетПользования + 1) * ЧислоЛетПользования / 2;
			
			ПроцентГодовойАмортизации	= Макс((ЧислоЛетПользования - ГодИспользования + 1),1) / СуммаЧислеЛет;
			СуммаГодовойАмортизации		= ?(ВыборкаПоОС.СтоимостьДляВычисленияАмортизации = NULL, 0, ВыборкаПоОС.СтоимостьДляВычисленияАмортизации) *
			                              ПроцентГодовойАмортизации;

			Если НЕ ЗначениеЗаполнено(ВыборкаПоОС.ГрафикАмортизации) Тогда
				СуммаАмортизации		= СуммаГодовойАмортизации / 12;
			Иначе
				КоэффициентПериода		= ПолучитьКоэффициентАмортизацииИзГрафика(ТаблицаГрафиков, ВыборкаПоОС.ГрафикАмортизации, ДатаРасчета);
				СуммаАмортизации		= СуммаГодовойАмортизации * КоэффициентПериода;
			КонецЕсли;

		ИначеЕсли ВыборкаПоОС.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.ЛинейныйПроцентом Тогда
 
			СуммаГодовойАмортизации = ВыборкаПоОС.СтоимостьДляВычисленияАмортизации * ВыборкаПоОС.КоэффициентАмортизации / 100;

			Если НЕ ЗначениеЗаполнено(ВыборкаПоОС.ГрафикАмортизации) Тогда
				СуммаАмортизации   = СуммаГодовойАмортизации / 12;
			Иначе
				КоэффициентПериода = ПолучитьКоэффициентАмортизацииИзГрафика(ТаблицаГрафиков, ВыборкаПоОС.ГрафикАмортизации, ДатаРасчета);
				СуммаАмортизации   = СуммаГодовойАмортизации * КоэффициентПериода;
			КонецЕсли;  

		КонецЕсли;
		
		Если ПрименятьПараметрыАмортизацииВТекМесяце Тогда 
			СтоимостьОстаток   = ВыборкаПоОС.СтоимостьКонечныйОстаток;
			АмортизацияОстаток = ВыборкаПоОС.АмортизацияКонечныйОстаток;
		Иначе 
			СтоимостьОстаток   = ВыборкаПоОС.СтоимостьНачальныйОстаток;
			АмортизацияОстаток = ВыборкаПоОС.АмортизацияНачальныйОстаток;
		КонецЕсли;
		
		ВсегоОсталосьСписать = СтоимостьОстаток - АмортизацияОстаток - ВыборкаПоОС.ЛиквидационнаяСтоимость;
		
		//Списываем остаток если он есть
		Разница = 0;
		Разница = Цел(ВсегоОсталосьСписать - СуммаАмортизации);
		
		Если Разница = 0 Тогда 
			СуммаАмортизации  = ВсегоОсталосьСписать;
		Иначе 
			СуммаАмортизации  = Макс(0,Мин(СуммаАмортизации, ВсегоОсталосьСписать));
		КонецЕсли;
			
		СтрокаАмортизации = ТаблицаАмортизации.Добавить();

		СтрокаАмортизации.ОС							= ВыборкаПоОС.ОсновноеСредство;
		СтрокаАмортизации.СтруктурноеПодразделение		= ВыборкаПоОС.СтруктурноеПодразделение;
		СтрокаАмортизации.СчетУчетаБУ					= ВыборкаПоОС.СчетУчетаБУ;
		СтрокаАмортизации.СчетАмортизацииБУ				= ВыборкаПоОС.СчетНачисленияАмортизацииБУ;
		СтрокаАмортизации.НаправлениеАмортизации		= ВыборкаПоОС.СпособОтраженияРасходовПоАмортизации;
		СтрокаАмортизации.ПризнакФиксированногоАктива 	= ВыборкаПоОС.ПризнакФиксированногоАктива;		
		СтрокаАмортизации.Бух							= СуммаАмортизации;
        СтрокаАмортизации.ТекущееПодразделение			= ВыборкаПоОС.ТекущееПодразделение;
		СтрокаАмортизации.ТекущийМОЛ					= ВыборкаПоОС.ТекущийМОЛ;
		
	КонецЦикла;

	Возврат ТаблицаАмортизации;

КонецФункции // РасчетАмортизацииБухРегл()

// Получает сводную таблицу графиков - годовых и индивидуальных одним запросом - чтобы потом можно было 
// данные ез нее дергать, а не лазить в справочник за каждым значеним
//
Функция ПолучитьТаблицуГрафиков()

	Запрос = Новый Запрос();
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Ссылка КАК График,
	|	Коэффициент1,
	|	Коэффициент2,
	|	Коэффициент3,
	|	Коэффициент4,
	|	Коэффициент5,
	|	Коэффициент6,
	|	Коэффициент7,
	|	Коэффициент8,
	|	Коэффициент9,
	|	Коэффициент10,
	|	Коэффициент11,
	|	Коэффициент12,
	|	Коэффициент1 + Коэффициент2 + Коэффициент3 + Коэффициент4 + Коэффициент5 + Коэффициент6 + Коэффициент7 + Коэффициент8 + Коэффициент9 + Коэффициент10 + Коэффициент11 + Коэффициент12 КАК СуммаКоэффициентов
	|ИЗ
	|	Справочник.ГодовыеГрафикиАмортизацииОС КАК ГодовыеГрафикиАмортизацииОС";

	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции // ПолучитьТаблицуГрафиков()

Функция ПолучитьКоэффициентАмортизацииИзГрафика(ТаблицаГрафиков, График, ДатаРасчета)

	КоэффициентАммортизации = 0;

	СтрокаТЧ = ТаблицаГрафиков.Найти(График, "График");
	Если СтрокаТЧ = Неопределено Тогда
		Возврат 0;
	КонецЕсли;
	
	СуммаВсех   = СтрокаТЧ.СуммаКоэффициентов;
	СуммаОдного = СтрокаТЧ["Коэффициент" + Месяц(ДатаРасчета)];

	КоэффициентАммортизации = СуммаОдного / ?(СуммаВсех = 0 ИЛИ СуммаВсех = NULL, 1, СуммаВсех);

	Возврат КоэффициентАммортизации;

КонецФункции // ПолучитьКоэффициентАмортизацииИзГрафика()

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАСЧЕТА СУММЫ СПИСАНИЯ РЕЗЕРВА ПО ПЕРЕОЦЕНКЕ

// Получает амортизацию за период и остаточную стоимость основного средства.
//
// Параметры
//  ДатаРасчета                                 - Дата - Дата расчета амортизации
//  Организация									- СправочникСсылка.Организации - организация,
//												  	для основных средств которго будет получена информация.	
//  ОсновноеСредство                            - СправочникСсылка.ОсновныеСредства - ОС, по которому 
//                                                	нужно рассчитать амортизацию.
// Возвращаемое значение:
//  ТаблицаЗначений - таблица с данными об амортизации ОС, состоит из колонок:
//		ОС				 			- СправочникСсылка.ОсновныеСредства
//		АмортизацияЗаМесяц 			- Число, амортизация за месяц
//		СтоимостьОС				 	- Число, остаточная стоимость основного средства.
//
Функция ПолучитьТекДанныеОСБУ(ДатаРасчета, Организация, СтруктурноеПодразделение, ОсновноеСредство = Неопределено) Экспорт

	ТаблицаАмортизации = Новый ТаблицаЗначений();

	ТаблицаАмортизации.Колонки.Добавить("ОС",						Новый ОписаниеТипов("СправочникСсылка.ОсновныеСредства"));
	ТаблицаАмортизации.Колонки.Добавить("АмортизацияЗаМесяц",      	ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаАмортизации.Колонки.Добавить("СтоимостьОС",     			ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаАмортизации.Колонки.Добавить("СтоимостьОСНаКонецМесяца", ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15,2)); // для списания резерва в случае, если параметры амортизации применяются в месяце их изменения и для списания остатка резерва в случае если ОС полностью самортизировано
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("НачалоГода",               НачалоГода(ДатаРасчета));
	Запрос.УстановитьПараметр("Организация",              Организация);
	Запрос.УстановитьПараметр("СтруктурноеПодразделение", СтруктурноеПодразделение);
	
	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(ДатаРасчета));
	Запрос.УстановитьПараметр("КонецПериода",  КонецМесяца(ДатаРасчета));
	Запрос.УстановитьПараметр("Период",        ДатаРасчета);
	Запрос.УстановитьПараметр("СнятоСУчета",   Перечисления.ВидыСостоянийОС.СнятоСУчета);
	
	Если ОсновноеСредство = Неопределено Тогда
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
					   |	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
					   |ИЗ
					   |	РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(&Период, ) КАК ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних
					   |ГДЕ
					   |	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.Организация = &Организация
					   |	И ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.СтруктурноеПодразделение = &СтруктурноеПодразделение";
		ОсновноеСредство = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ОсновноеСредство");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ОсновноеСредство", ОсновноеСредство);
	ТекстУсловия		   = " И ОсновноеСредство В (&ОсновноеСредство)";
	ТекстУсловияПереоценки = " И ВнеоборотныйАктив В (&ОсновноеСредство)"; 
	
	СубконтоОС = Новый Массив();
	СубконтоОС.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.ОсновныеСредства);
	Запрос.УстановитьПараметр("СубконтоОС", СубконтоОС);
	 
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПоложительныеПереоценкиОС.ВнеоборотныйАктив КАК ОсновноеСредство,
	|	СУММА(ПоложительныеПереоценкиОС.СуммаПереоценкиАмортизацииПриход) КАК СуммаПереоценкиАмортизации
	|ПОМЕСТИТЬ ВТ_ПоложительныеПереоценкиОС
	|ИЗ
	|	РегистрНакопления.ПереоценкаВнеоборотныхАктивов.Обороты(&НачалоПериода, &КонецПериода, , Организация = &Организация И СтруктурноеПодразделение = &СтруктурноеПодразделение" +ТекстУсловияПереоценки+ ") КАК ПоложительныеПереоценкиОС
	|
	|СГРУППИРОВАТЬ ПО
	|	ПоложительныеПереоценкиОС.ВнеоборотныйАктив
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СостоянияОСОрганизаций.ОсновноеСредство КАК ОсновноеСредство
	|ПОМЕСТИТЬ ВТ_СнятыеСУчета
	|ИЗ
	|	РегистрСведений.СостоянияОСОрганизаций.СрезПоследних(
	|			&Период,
	|			Организация = &Организация) КАК СостоянияОСОрганизаций
	|ГДЕ
	|	СостоянияОСОрганизаций.Состояние = &СнятоСУчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НачислениеАмортизацииБухгалтерскийУчетСрезПоследних.ОсновноеСредство,
	|	ЕСТЬNULL(СтоимостьОС_БУ.СуммаНачальныйОстатокДт, 0) КАК СтоимостьНачальныйОстаток,
	|	ЕСТЬNULL(СтоимостьОС_БУ.СуммаКонечныйОстатокДт, 0) КАК СтоимостьКонечныйОстаток,
	|	ЕСТЬNULL(АмортизацияОС_БУ.СуммаНачальныйОстатокКт, 0) КАК АмортизацияНачальныйОстаток,
	|	ЕСТЬNULL(АмортизацияОС_БУ.СуммаКонечныйОстатокКт, 0) КАК АмортизацияКонечныйОстаток,
	|	ЕСТЬNULL(ПоложительныеПереоценкиОС.СуммаПереоценкиАмортизации, 0) КАК СуммаПереоценкиАмортизации,
	|	ЕСТЬNULL(АмортизацияОС_БУ.СуммаОборотКт, 0) КАК АмортизацияОборот,
	|//	(ЕСТЬNULL(СтоимостьОС_БУ.СуммаНачальныйОстатокДт, 0) - ЕСТЬNULL(АмортизацияОС_БУ.СуммаНачальныйОстатокКт, 0) - ЕСТЬNULL(АмортизацияОС_БУ.СуммаОборотКт, 0) - ЕСТЬNULL(ПоложительныеПереоценкиОС.СуммаПереоценкиАмортизации, 0)) КАК СтоимостьБУ
	|	(ЕСТЬNULL(СтоимостьОС_БУ.СуммаНачальныйОстатокДт, 0) - ЕСТЬNULL(АмортизацияОС_БУ.СуммаНачальныйОстатокКт, 0)) КАК СтоимостьБУ,
	|	(ЕСТЬNULL(СтоимостьОС_БУ.СуммаКонечныйОстатокДт, 0) - ЕСТЬNULL(АмортизацияОС_БУ.СуммаКонечныйОстатокКт, 0)) КАК СтоимостьБУНаКонецМесяца
	|
	|ИЗ
	|	РегистрСведений.НачислениеАмортизацииОСБухгалтерскийУчет.СрезПоследних(&НачалоПериода, Организация = &Организация" + ТекстУсловия + ") КАК НачислениеАмортизацииБухгалтерскийУчетСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(&НачалоПериода, Организация = &Организация) КАК ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних
	|		ПО НачислениеАмортизацииБухгалтерскийУчетСрезПоследних.ОсновноеСредство = ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаУчетаОС.СрезПоследних(&НачалоПериода, Организация = &Организация) КАК СчетаУчетаОсновныхСредствСрезПоследних
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Типовой.ОстаткиИОбороты(&НачалоПериода, &КонецПериода, Период, , , &СубконтоОС, Организация = &Организация) КАК СтоимостьОС_БУ
	|			ПО СчетаУчетаОсновныхСредствСрезПоследних.ОсновноеСредство = СтоимостьОС_БУ.Субконто1 И СчетаУчетаОсновныхСредствСрезПоследних.СчетУчетаБУ = СтоимостьОС_БУ.Счет
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Типовой.ОстаткиИОбороты(&НачалоПериода, &КонецПериода, Период, , , &СубконтоОС, Организация = &Организация) КАК АмортизацияОС_БУ
	|			ПО СчетаУчетаОсновныхСредствСрезПоследних.ОсновноеСредство = АмортизацияОС_БУ.Субконто1 И СчетаУчетаОсновныхСредствСрезПоследних.СчетНачисленияАмортизацииБУ = АмортизацияОС_БУ.Счет
	|		ПО НачислениеАмортизацииБухгалтерскийУчетСрезПоследних.ОсновноеСредство = СчетаУчетаОсновныхСредствСрезПоследних.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СнятыеСУчета КАК СнятыеСУчета
	|		ПО НачислениеАмортизацииБухгалтерскийУчетСрезПоследних.ОсновноеСредство = СнятыеСУчета.ОсновноеСредство
	|ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПоложительныеПереоценкиОС  КАК ПоложительныеПереоценкиОС
	|   	ПО НачислениеАмортизацииБухгалтерскийУчетСрезПоследних.ОсновноеСредство = ПоложительныеПереоценкиОС.ОсновноеСредство
   	|
	|ГДЕ
	|	(НачислениеАмортизацииБухгалтерскийУчетСрезПоследних.НачислятьАмортизацию = ИСТИНА) И
	|	ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних.Организация = &Организация И
	|	((СнятыеСУчета.ОсновноеСредство) ЕСТЬ NULL )";
	
	ВыборкаПоОС = Запрос.Выполнить().Выбрать();

	Пока ВыборкаПоОС.Следующий() Цикл

		СтрокаАмортизации = ТаблицаАмортизации.Добавить();

		СтрокаАмортизации.ОС					   = ВыборкаПоОС.ОсновноеСредство;
		СтрокаАмортизации.СтоимостьОС			   = ВыборкаПоОС.СтоимостьБУ;
		СтрокаАмортизации.СтоимостьОСНаКонецМесяца = ВыборкаПоОС.СтоимостьБУНаКонецМесяца;
		
		// т.к. сумма переоценки амортизации всегда идет с минусом, нужно вычесть амортизация с минусом
		СтрокаАмортизации.АмортизацияЗаМесяц = ВыборкаПоОС.АмортизацияОборот - (- ВыборкаПоОС.СуммаПереоценкиАмортизации);								
	КонецЦикла;	
		
	Возврат ТаблицаАмортизации;

КонецФункции // ПолучитьТекДанныеОСБУ()

// Функция рассчитывает сумму списываемого резерва по переоценке основных средств.
//  
// Параметры:
//  Дата 		- Дата, период расчета
//  Организация - СправочникСсылка.Организации, организация, 
//					по основным средствам которого будет производиться расчет.
//  ТаблицаОС 	- ТаблицаЗначений, таблица, содержащая информацию об основных средствах,
//					для которых будет производится расчет
//     Должна содержать колонки:
//       ОС 				 - СправочникССылка.ОсновынеСредства,
//       АмортизацияЗаМесяц  - Число, сумма амортизации за период,
//       СтоимостьОС		 - Число, сумма остаточной стоимости основного средства. 
//
// Возвращаемое значение:
//  ТаблицаЗначений, состоит из
//   ОС 					- СправочникСсылка.ОсновныеСредства
//   СуммаРезерваКСписанию 	- Число, рассчитанная сума резерва.
//
Функция РасчетСуммыСписываемогоРезерваПоПереоценке(Дата, Организация, ТаблицаОС, ВыдаватьСообщения = Ложь, ДокОбъект = Неопределено) Экспорт
	
	ТаблицаРезервКСписанию = Новый ТаблицаЗначений;
	ТаблицаРезервКСписанию.Колонки.Добавить("ОС", 					 Новый ОписаниеТипов("СправочникСсылка.ОсновныеСредства"));
	ТаблицаРезервКСписанию.Колонки.Добавить("СуммаРезерваКСписанию", ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
	
	СписокОС = ТаблицаОС.ВыгрузитьКолонку("ОС");
			
	// получим сумму списанного резерва за тек. месяц
	//
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачПериода",  НачалоМесяца(Дата));
	Запрос.УстановитьПараметр("КонПериода",  КонецМесяца(Дата));
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("СписокОС", 	 СписокОС);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТиповойОбороты.Субконто1 КАК ОС,
	|	ТиповойОбороты.СуммаОборотДт КАК СписанныйРезервЗаМесяц
	|
	|ИЗ
	|	РегистрБухгалтерии.Типовой.Обороты(&НачПериода, &КонПериода, , 
	|		Счет = ЗНАЧЕНИЕ(ПланСчетов.Типовой.РезервНаПереоценкуОсновныхСредств), , 
	|		Организация = &Организация И Субконто1 В (&СписокОС), 
	|		КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Типовой.НераспределеннаяПрибыльНепокрытыйУбытокОтчетногоГода), ) КАК ТиповойОбороты
	|";
	
	ТаблицаСписанныйРезерв 					= Запрос.Выполнить().Выгрузить();
	ПрименятьПараметрыАмортизацииВТекМесяце = ПолучитьПризнакПримененияПараметровАмортизацииВТекМесяце(Организация, Дата); 
	
	// получим остаток резерва на переоценку   	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТиповойОстаткиИОбороты.Субконто1 КАК ОС,
	|	ТиповойОстаткиИОбороты.СуммаНачальныйОстатокКт КАК ОстатокРезерваНаНачало,
	|	ТиповойОстаткиИОбороты.СуммаКонечныйОстатокКт КАК ОстатокРезерваНаКонец
	|
	|ИЗ
	|	РегистрБухгалтерии.Типовой.ОстаткиИОбороты(&НачПериода, &КонПериода, , , 
	|		Счет = ЗНАЧЕНИЕ(ПланСчетов.Типовой.РезервНаПереоценкуОсновныхСредств), , 
	|		Организация = &Организация И Субконто1 В (&СписокОС)) КАК ТиповойОстаткиИОбороты
	|";
	
	Выборка = Запрос.Выполнить().Выбрать();	
	
	//установим вид регламентной операции, в случае если проуедура вызывается из 
	//документа "Закрытие месяца", в ошибки записывалась соответсвующая операция
	
	ВидРегламентнойОперации = Перечисления.ВидыРегламентныхОпераций.СписаниеРезерваПоПереоценкеОСБУ;	
	
	Пока Выборка.Следующий() Цикл
		
		ТекОС = Выборка.ОС;
		
		СтрокаСписанныйРезерв = ТаблицаСписанныйРезерв.Найти(ТекОС, "ОС");
		
		Если СтрокаСписанныйРезерв <> Неопределено Тогда
			Если СтрокаСписанныйРезерв.СписанныйРезервЗаМесяц <> 0 Тогда
				ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации(СтрШаблон(НСтр("ru = 'Для основного средства ""%1"" уже выполнялось списание резерва по переоценке!'"),
					ТекОС),
					ТекОС, , ДокОбъект,ВидРегламентнойОперации, Ложь);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Если Выборка.ОстатокРезерваНаНачало <= 0 И Выборка.ОстатокРезерваНаКонец<= 0 Тогда
			// нет положительного остатка резерва по переоценке, значит переходим к следующему ОС
			Продолжить;
		КонецЕсли;
		
		СтрокаОС = ТаблицаОС.Найти(ТекОС, "ОС");
		// В случае если ПрименятьПараметрыАмортизацииВТекМесяце = истина, амортизация объекта уже закончена, а последняя сумма резерва еще имеется
		Если СтрокаОС.АмортизацияЗаМесяц = 0 И НЕ ПрименятьПараметрыАмортизацииВТекМесяце Тогда
			Если ВыдаватьСообщения Тогда
				ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации(СтрШаблон(НСтр("ru = 'Списание резерва по переоценке: Для основного средства ""%1"" не начислена амортизация за текущий месяц!'"),
					СтрокаОС.ОС),
					ТекОС,,ДокОбъект,ВидРегламентнойОперации);
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		Если ПрименятьПараметрыАмортизацииВТекМесяце Тогда
			// коэффициент не изменяется в зависимости от настройки применяетбпараметрыАмортизацииВтекМесяце
			// (так как такой расчет был реализован изначально и мы не изменяем его сейчас), но в последнем месяце мы должны списать всю сумму остатка,
			// поскольку дальнейшеного начисления амортизации не будет
			Если СтрокаОС.СтоимостьОСНаКонецМесяца = 0 Тогда
				КоэффициентРаспределения = 1;
			Иначе	
				КоэффициентРаспределения = ?(СтрокаОС.СтоимостьОС<>0, СтрокаОС.АмортизацияЗаМесяц/СтрокаОС.СтоимостьОС, 1);
			КонецЕсли;
		Иначе	
			КоэффициентРаспределения = ?(СтрокаОС.СтоимостьОС<>0, СтрокаОС.АмортизацияЗаМесяц/СтрокаОС.СтоимостьОС, 1);
		КонецЕсли;
		
		СуммаРезерваКСписанию = 0;
		СуммаРезерваКСписанию = КоэффициентРаспределения * Выборка.ОстатокРезерваНаНачало;
		
		СтрокаРезервОС = ТаблицаРезервКСписанию.Добавить();
		СтрокаРезервОС.ОС					 = ТекОС;
		СтрокаРезервОС.СуммаРезерваКСписанию = СуммаРезерваКСписанию;
						
	КонецЦикла;	
	
	Возврат ТаблицаРезервКСписанию;
	
КонецФункции	


// ОБЪЕКТЫ НАЛОГОВОГО УЧЕТА ФА

Процедура СформироватьДвиженияОбъектыНалоговогоУчетаФА(ТаблицаВА, ТаблицаРеквизиты,  Движения, Отказ) Экспорт
	
	Если ТаблицаРеквизиты = Неопределено ИЛИ ТаблицаВА = Неопределено  Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыОбъектыНалоговогоУчетаФА(ТаблицаРеквизиты, ТаблицаВА);
	Если Параметры.ОбъектыНалоговогоУчетаФА.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Движения.ОбъектыНалоговогоУчетаФА.Загрузить(Параметры.ОбъектыНалоговогоУчетаФА);
	Движения.ОбъектыНалоговогоУчетаФА.Записывать = Истина;
	
КонецПроцедуры

Функция ПодготовитьПараметрыОбъектыНалоговогоУчетаФА(ТаблицаРеквизиты, ТаблицаВА)
	
	Параметры = Новый Структура;
	
	СписокОбязательныхКолонок = ""
	+ "ФиксированныйАктив,"	      
	+ "ГруппаНУ,"                  
	+ "СостояниеФиксированногоАктива," 
	+ "ПорядокПогашенияСтоимостиНУ"
	;
	
	ОбъектыНалоговогоУчетаФА = ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаВА, СписокОбязательныхКолонок);
	
	// Подготовка реквизитов
	СписокОбязательныхКолонок = ""
	+ "Период,"                 // <Дата> - Дата движения
	+ "Организация";			// <СправочникСсылка.Организации> - организация документа
	
	Реквизиты = ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок);
	
	ОбъектыНалоговогоУчетаФА.Колонки.Добавить("Организация", Реквизиты.Колонки.Организация.ТипЗначения);
	ОбъектыНалоговогоУчетаФА.Колонки.Добавить("Период", Реквизиты.Колонки.Период.ТипЗначения);
	ОбъектыНалоговогоУчетаФА.ЗаполнитьЗначения(Реквизиты[0].Организация, "Организация");
	ОбъектыНалоговогоУчетаФА.ЗаполнитьЗначения(Реквизиты[0].Период, "Период");
	
	Параметры.Вставить("ОбъектыНалоговогоУчетаФА", ОбъектыНалоговогоУчетаФА);
	
	Возврат Параметры;
	
КонецФункции

// ДВИЖЕНИЯ ПО ФА, УЧИТЫВАЕМЫХ ОТДЕЛЬНО

Процедура СформироватьДвиженияФАУчитываемыхОтдельно(ТаблицаВА, ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Если ТаблицаРеквизиты = Неопределено ИЛИ ТаблицаВА = Неопределено  Тогда
		Возврат;
	КонецЕсли;

	Параметры = ПодготовитьПараметрыФАУчитываемыеОтдельно(ТаблицаВА, ТаблицаРеквизиты);
	Если Параметры.ФАУчитываемыеОтдельно.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	
	Движения.ФиксированныеАктивыУчитываемыеОтдельно.Загрузить(Параметры.ФАУчитываемыеОтдельно);
	Движения.ФиксированныеАктивыУчитываемыеОтдельно.Записывать = Истина;
	
КонецПроцедуры

Функция ПодготовитьПараметрыФАУчитываемыеОтдельно(ТаблицаВА, ТаблицаРеквизиты)
	
	Параметры = Новый Структура;
	
	СписокОбязательныхКолонок = ""
	+ "ФиксированныйАктив,"	      
	+ "Событие,"                  
	+ "ВидЛьготыФА" 
	;               	
	ФАУчитываемыеОтдельно = ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаВА, СписокОбязательныхКолонок);
	
	// Подготовка реквизитов
	СписокОбязательныхКолонок = ""
	+ "Период,"                 // <Дата> - Дата движения
	+ "Организация";			// <СправочникСсылка.Организации> - организация документа
	
	Реквизиты = ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок);
	
	ФАУчитываемыеОтдельно.Колонки.Добавить("Организация", Реквизиты.Колонки.Организация.ТипЗначения);
	ФАУчитываемыеОтдельно.Колонки.Добавить("Период", Реквизиты.Колонки.Период.ТипЗначения);
	ФАУчитываемыеОтдельно.ЗаполнитьЗначения(Реквизиты[0].Организация, "Организация");
	ФАУчитываемыеОтдельно.ЗаполнитьЗначения(Реквизиты[0].Период, "Период");
	
	Параметры.Вставить("ФАУчитываемыеОтдельно", ФАУчитываемыеОтдельно);
	
	Возврат Параметры;
	
КонецФункции

// ДВИЖЕНИЯ ПО ПЕРЕОЦЕНКЕ ВНЕОБОРОТНЫХ АКТИВОВ

Процедура СформироватьДвиженияПереоценкаВнеоборотныхАктивов(СписокПереоцененныхОC, ТаблицаДокументовПереоценкиВА, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Если СписокПереоцененныхОC = Неопределено ИЛИ ТаблицаДокументовПереоценкиВА = Неопределено ИЛИ ТаблицаРеквизиты = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыПереоценкаВнеоборотныхАктивов(СписокПереоцененныхОC, ТаблицаДокументовПереоценкиВА, ТаблицаРеквизиты);

	Если Параметры.СписокПереоцененныхОC.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 
	
	КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();

	Реквизиты = Параметры.Реквизиты[0];
	
	СписокПереоцененныхОC = Параметры.СписокПереоцененныхОC;
	
	ТаблицаДокументовПереоценкиВА = Параметры.ТаблицаДокументовПереоценкиВА;
	
	Для Каждого СтрокаОС Из СписокПереоцененныхОC Цикл
		
		ТаблицаТекМестонахождение = Новый ТаблицаЗначений;
	
		Если Реквизиты.ВедетсяАналитУчетОсПоМОЛ Или Реквизиты.ВедетсяАналитУчетОсПоПодразделениям Тогда
			СписокОС = СписокПереоцененныхОC.ВыгрузитьКолонку("ОсновноеСредство");
			ТаблицаТекМестонахождение = УправлениеВнеоборотнымиАктивамиСервер.ОпределитьТекущееМестонахождениеДляСпискаОС(Реквизиты.Дата, Реквизиты.Организация, СписокОС);
		КонецЕсли;

		Если СтрокаОС.СуммаПереоценки = 0 Тогда
			ТекстСообщения = НСтр("ru='<%1> - сумма переоценки равна 0, переоценка не будет произведена.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, СокрЛП(СтрокаОС.ОсновноеСредство));
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения); 
			Продолжить;	
		Иначе
			
			ТекОС = СтрокаОС.ОсновноеСредство;
			
			//рассчитываем новую стоимость для вычисления амортизации, а также суммы переоценки 
			СтоимостьДляВычисленияАмортизации = 0;
			СуммаПереоценкиСтоимости		  = 0;
			СуммаПереоценкиАмортизации		  = 0;
			СписываемаяСуммаРезерваЗаМесяц    = 0;
			
			СтоимостьДляВычисленияАмортизации = СтрокаОС.ПереоцененнаяСтоимостьБУ - СтрокаОС.ЛиквидационнаяСтоимостьБУ;
			СписываемаяСуммаРезерваЗаМесяц    = СтрокаОС.СписываемаяСуммаРезерваЗаМесяцБУ;
			
			Если Реквизиты.МетодПереоценки = Перечисления.МетодыПереоценкиВнеоборотныхАктивов.ПропорциональнаяПереоценкаНакопленнойАмортизации Тогда
				СуммаПереоценкиСтоимости   = Окр(СтрокаОС.СуммаПереоценкиСтоимости, 2);
				СуммаПереоценкиАмортизации = Окр(СтрокаОС.СуммаПереоценкиАмортизации, 2);
				
				ТекстСообщения = НСтр("ru='<%1> , сумма корректировки стоимости: <%2> /сумма корректировки амортизации: <%3>'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Строка(ТекОС), Строка(СуммаПереоценкиСтоимости),Строка(СуммаПереоценкиАмортизации));
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения); 
			
			Иначе
				СуммаПереоценкиСтоимости = Окр(СтрокаОС.СуммаПереоценки, 2);
				
				ТекстСообщения = НСтр("ru='<%1> , сумма корректировки стоимости: <%2>'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Строка(ТекОС), Строка(СуммаПереоценкиСтоимости));
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения); 

			КонецЕсли;
				
			//закрываем сумму накопленной амортизации, если  выбран метод переоценки  СписаниеАмортизацииПриПереоценке
			Если Реквизиты.МетодПереоценки = Перечисления.МетодыПереоценкиВнеоборотныхАктивов.СписаниеАмортизацииПриПереоценке Тогда
				Если  (СтрокаОС.АмортизацияБУ) <> 0 Тогда
					Проводка = Движения.Типовой.Добавить();
					Проводка.Период       = Реквизиты.Период;
					Проводка.Организация  = Реквизиты.Организация;
					Проводка.Содержание   = НСтр("ru='Списана амортизация при переоценке'", КодОсновногоЯзыка);
					Проводка.НомерЖурнала = НСтр("ru = 'ОС'", ОбщегоНазначения.КодОсновногоЯзыка());
					Проводка.Сумма        = (СтрокаОС.АмортизацияБУ);
					
					ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
							Проводка, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);
	        
					Проводка.СчетДт = СтрокаОС.СчетНачисленияАмортизацииБУ;
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", ТекОС);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ВнеоборотныеАктивы", ТекОС);
					Проводка.СчетКт = СтрокаОС.СчетУчетаБУ ;
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", ТекОС);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ВнеоборотныеАктивы", ТекОС);
					
					УправлениеВнеоборотнымиАктивамиСервер.УстановитьАналитикуПоМестонахождениюОС(Реквизиты.ВедетсяАналитУчетОсПоМОЛ, Реквизиты.ВедетсяАналитУчетОсПоПодразделениям, Проводка, ТекОС, ТаблицаТекМестонахождение, Истина, Истина);
					
				КонецЕсли;	
			КонецЕсли;
			
			Отбор = Новый Структура();
			Отбор.Вставить("ВнеоборотныйАктив",ТекОС);
			Строки = ТаблицаДокументовПереоценкиВА.НайтиСтроки(Отбор);
            			
			Если Строки.Количество() <> 0 Тогда
				// были записи по переоценкам ВА, выбираем в цикле все партии переоценок и делаем корректировки	

				
				Для Каждого СписокПереоценокОС Из Строки Цикл
					
				Если ((СуммаПереоценкиСтоимости <> 0) или (СуммаПереоценкиАмортизации <>0)) Тогда 
						
					//При дооценки ОС делаем реверс имеющегося убытка по переоценки данного ОС 
					Если (СуммаПереоценкиСтоимости > 0)  или (СуммаПереоценкиАмортизации > 0) Тогда
						//выбираем все не закрытые отрицательные остатки по переоценкам
						Если (СписокПереоценокОС.СуммаПереоценкиСтоимости < 0) или (СписокПереоценокОС.СуммаПереоценкиАмортизации > 0)  Тогда
							
							// находим сумму убытка партии, которую можем реверсировать 
							РеверсируемаяСумма = СписокПереоценокОС.СуммаПереоценкиСтоимости + СписокПереоценокОС.СуммаПереоценкиАмортизации;
							
							Если РеверсируемаяСумма = 0 Тогда
								Продолжить;
							КонецЕсли;
							
							ТекРеверсируемаяСумма = МИН(-РеверсируемаяСумма, (СуммаПереоценкиСтоимости-СуммаПереоценкиАмортизации));
							
							Если СуммаПереоценкиАмортизации <> 0 Тогда
								ПроцентСтоимости = СписокПереоценокОС.СуммаПереоценкиСтоимости / (СписокПереоценокОС.СуммаПереоценкиСтоимости + СписокПереоценокОС.СуммаПереоценкиАмортизации);
								
								СуммаЗакрытияПереоценкиСтоимости = ПроцентСтоимости * ТекРеверсируемаяСумма;
								СуммаЗакрытияПереоценкиАмортизации = СуммаЗакрытияПереоценкиСтоимости - ТекРеверсируемаяСумма;
							Иначе
								СуммаЗакрытияПереоценкиСтоимости = ТекРеверсируемаяСумма;
								СуммаЗакрытияПереоценкиАмортизации = 0;
							КонецЕсли;	
							
							// может оказаться так, что поссчитанная применяя коэффициент, СуммаЗакрытияПереоценкиАмортизации больше суммы переоценки амортизации, тогда нужно 
							// в качестве СуммаЗакрытияПереоценкиАмортизации взять сумму переоценки амортизации
							Если СуммаЗакрытияПереоценкиАмортизации > СуммаПереоценкиАмортизации Тогда
								Разница = СуммаЗакрытияПереоценкиАмортизации - СуммаПереоценкиАмортизации;
								СуммаЗакрытияПереоценкиАмортизации = СуммаПереоценкиАмортизации;
								СуммаЗакрытияПереоценкиСтоимости = СуммаЗакрытияПереоценкиСтоимости - Разница;
							КонецЕсли;	
							
							//// так как сумма переоценки распределяется на переоценку стоимости и амортизации, нужно учесть сумму переоценки амортизации... 
							//РеверсируемаяСумма = РеверсируемаяСумма - СуммаПереоценкиАмортизации;
							//
							//СуммаЗакрытияПереоценкиСтоимости   = Мин(- СписокПереоценокОС.СуммаПереоценкиСтоимости,  СуммаПереоценкиСтоимости, -РеверсируемаяСумма);
							//СуммаЗакрытияПереоценкиАмортизации = Мин( СписокПереоценокОС.СуммаПереоценкиАмортизации, СуммаПереоценкиАмортизации);
							 							 
							// по бух. учету реверс дохода/убытка
							Если СуммаЗакрытияПереоценкиСтоимости <> 0 Тогда
								Проводка = Движения.Типовой.Добавить();
								Проводка.Период       = Реквизиты.Период;
								Проводка.Организация  = Реквизиты.Организация;
								Проводка.Содержание   = НСтр("ru='Реверс убытка от  переоценки стоимости ОС'", КодОсновногоЯзыка);
								Проводка.НомерЖурнала = НСтр("ru = 'ОС'", ОбщегоНазначения.КодОсновногоЯзыка());
								Проводка.Сумма        = СуммаЗакрытияПереоценкиСтоимости;
								
								ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
									Проводка, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);
	                
								Проводка.СчетДт = СтрокаОС.СчетУчетаБУ;
								ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", ТекОС);
								ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ВнеоборотныеАктивы", ТекОС);
								УправлениеВнеоборотнымиАктивамиСервер.УстановитьАналитикуПоМестонахождениюОС(Реквизиты.ВедетсяАналитУчетОсПоМОЛ, Реквизиты.ВедетсяАналитУчетОсПоПодразделениям, Проводка, ТекОС, ТаблицаТекМестонахождение, Истина);
								
								Проводка.СчетКт = СписокПереоценокОС.СчетРасходовБУ;
								ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СписокПереоценокОС.СубконтоРасходовБУ1);
								ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СписокПереоценокОС.СубконтоРасходовБУ2);
								ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, СписокПереоценокОС.СубконтоРасходовБУ3);
								ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства",   ТекОС);
								ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ВнеоборотныеАктивы", ТекОС);
						 	КонецЕсли;	
						 
							// Если СуммаПереоценкиАмортизации <> 0 Тогда
							
							// проверяем не равна ли сумма переоценки аморртизации нулю, если равна значит метод переоценки СписаниеАмортизацииПриПереоценке
							// и в этом случае не нужно делать реверс по амортизации...
							//
							Если СуммаЗакрытияПереоценкиАмортизации <> 0 И СуммаПереоценкиАмортизации <> 0 Тогда
								//делаем переоценку амортизации
								Проводка = Движения.Типовой.Добавить();
								Проводка.Период       = Реквизиты.Период;
								Проводка.Организация  = Реквизиты.Организация;
								Проводка.Содержание   = НСтр("ru='Реверс дохода от  переоценки амортизации ОС'", КодОсновногоЯзыка);
								Проводка.НомерЖурнала = НСтр("ru = 'ОС'", ОбщегоНазначения.КодОсновногоЯзыка());  
								Проводка.Сумма        = СуммаЗакрытияПереоценкиАмортизации;
								
								ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
									Проводка, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);
									
								Проводка.СчетДт = СписокПереоценокОС.СчетДоходовБУ;
								ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СписокПереоценокОС.СубконтоДоходовБУ1);
								ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СписокПереоценокОС.СубконтоДоходовБУ2);
								ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СписокПереоценокОС.СубконтоДоходовБУ3 );
								ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства",   ТекОС);
								ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ВнеоборотныеАктивы", ТекОС);
							 
								Проводка.СчетКт = СтрокаОС.СчетНачисленияАмортизацииБУ;
								ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", ТекОС);		
								ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ВнеоборотныеАктивы", ТекОС);		
								УправлениеВнеоборотнымиАктивамиСервер.УстановитьАналитикуПоМестонахождениюОС(Реквизиты.ВедетсяАналитУчетОсПоМОЛ, Реквизиты.ВедетсяАналитУчетОсПоПодразделениям, Проводка, ТекОС, ТаблицаТекМестонахождение, , Истина);
							КонецЕсли;	

							 // по регистру ПереоценкаВнеоборотныхАктивов гасим предыдущие переоценки
							 ДвижениеПереоценкаВА = Движения.ПереоценкаВнеоборотныхАктивов.ДобавитьПриход();
							 ДвижениеПереоценкаВА.Период				 	= Реквизиты.Период;
							 ДвижениеПереоценкаВА.Организация 		     	= Реквизиты.Организация;
							 ДвижениеПереоценкаВА.СтруктурноеПодразделение	= Реквизиты.СтруктурноеПодразделение;							 
							 ДвижениеПереоценкаВА.ВнеоборотныйАктив   	 	= ТекОС;
							 ДвижениеПереоценкаВА.ДокументПереоценки	 	= СписокПереоценокОС.ДокументПереоценки;
							 ДвижениеПереоценкаВА.СуммаПереоценкиСтоимости  = СуммаЗакрытияПереоценкиСтоимости;
							 ДвижениеПереоценкаВА.СуммаПереоценкиАмортизации= ?(СуммаПереоценкиАмортизации = 0, 0, - СуммаЗакрытияПереоценкиАмортизации);  
							 
							 ДвижениеПереоценкаВА.СчетДоходовБУ		 = СписокПереоценокОС.СчетДоходовБУ;
							 ДвижениеПереоценкаВА.СубконтоДоходовБУ1 = СписокПереоценокОС.СубконтоДоходовБУ1;
							 ДвижениеПереоценкаВА.СубконтоДоходовБУ2 = СписокПереоценокОС.СубконтоДоходовБУ2;
							 ДвижениеПереоценкаВА.СубконтоДоходовБУ3 = СписокПереоценокОС.СубконтоДоходовБУ3;
							 
							 ДвижениеПереоценкаВА.СчетРасходовБУ	  = СписокПереоценокОС.СчетРасходовБУ;
							 ДвижениеПереоценкаВА.СубконтоРасходовБУ1 = СписокПереоценокОС.СубконтоРасходовБУ1;
							 ДвижениеПереоценкаВА.СубконтоРасходовБУ2 = СписокПереоценокОС.СубконтоРасходовБУ2;
							 ДвижениеПереоценкаВА.СубконтоРасходовБУ3 = СписокПереоценокОС.СубконтоРасходовБУ3;
							 
							 СуммаПереоценкиСтоимости 	= СуммаПереоценкиСтоимости - СуммаЗакрытияПереоценкиСтоимости;
							 СуммаПереоценкиАмортизации = ?(СуммаПереоценкиАмортизации = 0, 0, (СуммаПереоценкиАмортизации - СуммаЗакрытияПереоценкиАмортизации));
						КонецЕсли; 
						
					//Закрытие имеющегося положительного резервам на переоценки данного вида ОС 
					ИначеЕсли (СуммаПереоценкиСтоимости < 0) или (СуммаПереоценкиАмортизации < 0)  Тогда
						//выбираем все не закрытые положительные переоценки	
						Если (СписокПереоценокОС.СуммаПереоценкиСтоимости > 0) или (СписокПереоценокОС.СуммаПереоценкиАмортизации < 0)  Тогда
							
							// найдем сумму резерва партии, которую можем закрыть
							ЗакрываемаяСумма = СписокПереоценокОС.СуммаПереоценкиСтоимости + СписокПереоценокОС.СуммаПереоценкиАмортизации;
							
							Если ЗакрываемаяСумма = 0 Тогда
								Продолжить;
							КонецЕсли;
							
							// теперь учтем сумму списываемого в текущем месяце резерва
							ЗакрываемаяСумма = ЗакрываемаяСумма - СписываемаяСуммаРезерваЗаМесяц;
							
							//ТекЗакрываемаяСумма = МИН(ЗакрываемаяСумма, (-СуммаПереоценкиСтоимости+СуммаПереоценкиАмортизации));
							ТекЗакрываемаяСумма = МИН(МАКС(0,ЗакрываемаяСумма), (-СуммаПереоценкиСтоимости+СуммаПереоценкиАмортизации));
							
							//если ЗакрываемаяСумма = 0, значит списываемая сумма резерва полностью пойдет на погашение этой партии
							//    к тому же остаток по партии ПОЛНОСТЬЮ покроется суммой резерва, которая будет поссчитана за текущий месяц
							//если ЗакрываемаяСумма < 0, значит часть суммы резерва, которая будет поссчитана за тек.месяц пойдет на погашение текущей партии, 
							//    а остаток пойдет на погашение след. партии
							//если ЗакрываемаяСумма > 0, значит списываемая сумма резерва полностью пойдет на погашение этой партии
							//    к тому же остаток по партии ЧАСТИЧНО покроется суммой резерва, которая будет поссчитана за текущий месяц 
							СписываемаяСуммаРезерваЗаМесяц = МАКС(0, - ЗакрываемаяСумма);

							Если СуммаПереоценкиАмортизации <> 0 Тогда
								ПроцентСтоимости = СписокПереоценокОС.СуммаПереоценкиСтоимости / (СписокПереоценокОС.СуммаПереоценкиСтоимости + СписокПереоценокОС.СуммаПереоценкиАмортизации);
								СуммаЗакрытияПереоценкиСтоимости = ПроцентСтоимости * ТекЗакрываемаяСумма;
								СуммаЗакрытияПереоценкиАмортизации = ТекЗакрываемаяСумма - СуммаЗакрытияПереоценкиСтоимости;
							Иначе
								СуммаЗакрытияПереоценкиСтоимости = ТекЗакрываемаяСумма;
								СуммаЗакрытияПереоценкиАмортизации = 0;
							КонецЕсли;	
							
							// может оказаться так, что поссчитанная применяя коэффициент, СуммаЗакрытияПереоценкиАмортизации больше суммы переоценки амортизации, тогда нужно 
							// в качестве СуммаЗакрытияПереоценкиАмортизации взять сумму переоценки амортизации
							Если -СуммаЗакрытияПереоценкиАмортизации > -СуммаПереоценкиАмортизации Тогда
								Разница = -СуммаЗакрытияПереоценкиАмортизации - (- СуммаПереоценкиАмортизации);
								СуммаЗакрытияПереоценкиАмортизации = СуммаПереоценкиАмортизации;
								СуммаЗакрытияПереоценкиСтоимости = СуммаЗакрытияПереоценкиСтоимости - Разница;
							КонецЕсли;	
							
							//// так как сумма переоценки распределяется на переоценку стоимости и амортизации, нужно учесть сумму переоценки амортизации... 
							//ЗакрываемаяСумма = ЗакрываемаяСумма - СуммаПереоценкиАмортизации;
							
							//СуммаЗакрытияПереоценкиСтоимости   = Мин ( СписокПереоценокОС.СуммаПереоценкиСтоимости,   - СуммаПереоценкиСтоимости, ЗакрываемаяСумма);
							//СуммаЗакрытияПереоценкиАмортизации = -Мин ( -СписокПереоценокОС.СуммаПереоценкиАмортизации, - СуммаПереоценкиАмортизации);
							
							 // если нечего корректировать для этой партии, т.е. итоговые суммы корректировок равны 0, тогда движения не делаем
							 Если СуммаЗакрытияПереоценкиСтоимости <> 0 Или СуммаЗакрытияПереоценкиАмортизации <> 0 Тогда
						
								Если СуммаЗакрытияПереоценкиСтоимости <> 0 Тогда
									// по бух. учету реверс дохода/убытка
								 	Проводка = Движения.Типовой.Добавить();
								 	Проводка.Период       = Реквизиты.Период;
								 	Проводка.Организация  = Реквизиты.Организация;
								 	Проводка.Содержание   = НСтр("ru='Погашение резерва переоценки стоимости ОС'", КодОсновногоЯзыка);
								 	Проводка.НомерЖурнала = НСтр("ru = 'ОС'", ОбщегоНазначения.КодОсновногоЯзыка()); 								 	Проводка.Сумма        = СуммаЗакрытияПереоценкиСтоимости;
									
									ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
										Проводка, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);
								
								 	Проводка.СчетДт = ПланыСчетов.Типовой.РезервНаПереоценкуОсновныхСредств;
								 	ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", ТекОС);
									ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ВнеоборотныеАктивы", ТекОС);
								 	ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ВидыИзмененийВСобственномКапитале", Перечисления.ВидыИзмененийВСобственномКапитале.ПереоценкаОсновныхСредств);
								 
								 	Проводка.СчетКт = СтрокаОС.СчетУчетаБУ;
								 	ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", ТекОС);
									ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ВнеоборотныеАктивы", ТекОС);
									УправлениеВнеоборотнымиАктивамиСервер.УстановитьАналитикуПоМестонахождениюОС(Реквизиты.ВедетсяАналитУчетОсПоМОЛ, Реквизиты.ВедетсяАналитУчетОсПоПодразделениям, Проводка, ТекОС, ТаблицаТекМестонахождение, , Истина);
								 КонецЕсли;	
							 
								 // проверяем не равна ли сумма переоценки амортизации нулю, если равна значит метод переоценки СписаниеАмортизацииПриПереоценке
								 // и в этом случае не нужно делать погашение резерва по амортизации...
								 // 
								 Если (СуммаЗакрытияПереоценкиАмортизации <> 0) И (СуммаПереоценкиАмортизации <> 0) Тогда
									 //делаем переоценку амортизации
									 Проводка = Движения.Типовой.Добавить();
									 Проводка.Период       = Реквизиты.Период;
									 Проводка.Организация  = Реквизиты.Организация;
									 Проводка.Содержание   = НСтр("ru='Погашение резерва переоценки стоимости ОС'", КодОсновногоЯзыка);
									 Проводка.НомерЖурнала = НСтр("ru = 'ОС'", ОбщегоНазначения.КодОсновногоЯзыка());
									 Проводка.Сумма        =  - СуммаЗакрытияПереоценкиАмортизации;
									 
									 ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
									 	Проводка, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);
								
									 Проводка.СчетДт = СтрокаОС.СчетНачисленияАмортизацииБУ;
									 ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", ТекОС);		
									 ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ВнеоборотныеАктивы", ТекОС);		
									 УправлениеВнеоборотнымиАктивамиСервер.УстановитьАналитикуПоМестонахождениюОС(Реквизиты.ВедетсяАналитУчетОсПоМОЛ, Реквизиты.ВедетсяАналитУчетОсПоПодразделениям, Проводка, ТекОС, ТаблицаТекМестонахождение, Истина);
									 
									 Проводка.СчетКт = ПланыСчетов.Типовой.РезервНаПереоценкуОсновныхСредств;
									 ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", ТекОС);
									 ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ВнеоборотныеАктивы", ТекОС);
									 ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ВидыИзмененийВСобственномКапитале", Перечисления.ВидыИзмененийВСобственномКапитале.ПереоценкаОсновныхСредств);
								 КонецЕсли;	

								 // по регистру ПереоценкаВнеоборотныхАктивов гасим предыдущие переоценки
								 ДвижениеПереоценкаВА = Движения.ПереоценкаВнеоборотныхАктивов.ДобавитьРасход();
								 ДвижениеПереоценкаВА.Период				 	= Реквизиты.Период;
								 ДвижениеПереоценкаВА.Организация 		     	= Реквизиты.Организация;
								 ДвижениеПереоценкаВА.СтруктурноеПодразделение 	= Реквизиты.СтруктурноеПодразделение;
								 
								 ДвижениеПереоценкаВА.ВнеоборотныйАктив   	 	= ТекОС;
								 ДвижениеПереоценкаВА.ДокументПереоценки	 	= СписокПереоценокОС.ДокументПереоценки;;
								 ДвижениеПереоценкаВА.СуммаПереоценкиСтоимости  = СуммаЗакрытияПереоценкиСтоимости;
								 ДвижениеПереоценкаВА.СуммаПереоценкиАмортизации= ?(СуммаПереоценкиАмортизации = 0, 0, СуммаЗакрытияПереоценкиАмортизации);  
								 
								 ДвижениеПереоценкаВА.СчетДоходовБУ		  = ПланыСчетов.Типовой.РезервНаПереоценкуОсновныхСредств;
								 ДвижениеПереоценкаВА.СубконтоДоходовБУ1  = ТекОС;
								 ДвижениеПереоценкаВА.СубконтоДоходовБУ2  = Перечисления.ВидыИзмененийВСобственномКапитале.ПереоценкаОсновныхСредств;
								 ДвижениеПереоценкаВА.СчетРасходовБУ	  = ПланыСчетов.Типовой.РезервНаПереоценкуОсновныхСредств;
								 ДвижениеПереоценкаВА.СубконтоРасходовБУ1 = ТекОС;
								 ДвижениеПереоценкаВА.СубконтоРасходовБУ2 = Перечисления.ВидыИзмененийВСобственномКапитале.ПереоценкаОсновныхСредств;
								 
							 КонецЕсли;
							 
							 СуммаПереоценкиСтоимости   = СуммаПереоценкиСтоимости + СуммаЗакрытияПереоценкиСтоимости;
							 СуммаПереоценкиАмортизации = ?(СуммаПереоценкиАмортизации = 0, 0, (СуммаПереоценкиАмортизации - СуммаЗакрытияПереоценкиАмортизации)); 
							
						КонецЕсли;	
					КонецЕсли; //Если СуммаПереоценкиСтоимости > 0 Тогда
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;	
			
			//закрываем оставшиеся суммы на прямые движения по переоценке
			
			//дооценка ВА
			Если (СуммаПереоценкиСтоимости > 0) или (СуммаПереоценкиАмортизации > 0)Тогда
				//оставшуюся сумму закрываем за счет резерва на переоценку
				// по бух. учету
				Если СуммаПереоценкиСтоимости <> 0 Тогда
					Проводка = Движения.Типовой.Добавить();
					Проводка.Период       = Реквизиты.Период;
					Проводка.Организация  = Реквизиты.Организация;
					Проводка.Содержание   = НСтр("ru='Переоценка стоимости ОС'", КодОсновногоЯзыка);
					Проводка.НомерЖурнала = НСтр("ru = 'ОС'", ОбщегоНазначения.КодОсновногоЯзыка());
					Проводка.Сумма        = СуммаПереоценкиСтоимости;
					
					ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
						Проводка, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);
								
					Проводка.СчетДт = СтрокаОС.СчетУчетаБУ;
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", ТекОС);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ВнеоборотныеАктивы", ТекОС);
				
					Проводка.СчетКт = ПланыСчетов.Типовой.РезервНаПереоценкуОсновныхСредств;
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", ТекОС);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ВнеоборотныеАктивы", ТекОС);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ВидыИзмененийВСобственномКапитале", Перечисления.ВидыИзмененийВСобственномКапитале.ПереоценкаОсновныхСредств);
					
					УправлениеВнеоборотнымиАктивамиСервер.УстановитьАналитикуПоМестонахождениюОС(Реквизиты.ВедетсяАналитУчетОсПоМОЛ, Реквизиты.ВедетсяАналитУчетОсПоПодразделениям, Проводка, ТекОС, ТаблицаТекМестонахождение, Истина);
				КонецЕсли; 	
				
				Если СуммаПереоценкиАмортизации <> 0 Тогда
					//закрываем на резерв сумму переоценки амортизации
					Проводка = Движения.Типовой.Добавить();
					Проводка.Период       = Реквизиты.Период;
					Проводка.Организация  = Реквизиты.Организация;
					Проводка.Содержание   = НСтр("ru='Переоценка амортизации ОС'", КодОсновногоЯзыка);
					Проводка.НомерЖурнала = "ОС";
					Проводка.Сумма        = СуммаПереоценкиАмортизации;
					
					ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
						Проводка, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);
								
					Проводка.СчетДт = ПланыСчетов.Типовой.РезервНаПереоценкуОсновныхСредств;
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", ТекОС);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ВнеоборотныеАктивы", ТекОС);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ВидыИзмененийВСобственномКапитале", Перечисления.ВидыИзмененийВСобственномКапитале.ПереоценкаОсновныхСредств);		
															
					Проводка.СчетКт = СтрокаОС.СчетНачисленияАмортизацииБУ;
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", ТекОС);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ВнеоборотныеАктивы", ТекОС);
					УправлениеВнеоборотнымиАктивамиСервер.УстановитьАналитикуПоМестонахождениюОС(Реквизиты.ВедетсяАналитУчетОсПоМОЛ, Реквизиты.ВедетсяАналитУчетОсПоПодразделениям, Проводка, ТекОС, ТаблицаТекМестонахождение, , Истина);
				КонецЕсли; 	
				
				// по регистру ПереоценкаВнеоборотныхАктивов
				ДвижениеПереоценкаВА = Движения.ПереоценкаВнеоборотныхАктивов.ДобавитьПриход();
				ДвижениеПереоценкаВА.Период				 		= Реквизиты.Период;
				ДвижениеПереоценкаВА.Организация 		 		= Реквизиты.Организация;
				ДвижениеПереоценкаВА.СтруктурноеПодразделение 	= Реквизиты.СтруктурноеПодразделение;
				
				ДвижениеПереоценкаВА.ВнеоборотныйАктив   = ТекОС;
				ДвижениеПереоценкаВА.ДокументПереоценки	 = Реквизиты.Ссылка;
				ДвижениеПереоценкаВА.СуммаПереоценкиСтоимости   = СуммаПереоценкиСтоимости;
				ДвижениеПереоценкаВА.СуммаПереоценкиАмортизации = - СуммаПереоценкиАмортизации;  
				ДвижениеПереоценкаВА.СчетДоходовБУ		 = ПланыСчетов.Типовой.РезервНаПереоценкуОсновныхСредств;
				ДвижениеПереоценкаВА.СубконтоДоходовБУ1  = ТекОС;
				ДвижениеПереоценкаВА.СубконтоДоходовБУ2  = Перечисления.ВидыИзмененийВСобственномКапитале.ПереоценкаОсновныхСредств;
				ДвижениеПереоценкаВА.СчетРасходовБУ		 = ПланыСчетов.Типовой.РезервНаПереоценкуОсновныхСредств;
				ДвижениеПереоценкаВА.СубконтоРасходовБУ1 = ТекОС;
				ДвижениеПереоценкаВА.СубконтоРасходовБУ2 = Перечисления.ВидыИзмененийВСобственномКапитале.ПереоценкаОсновныхСредств;
				
			ИначеЕсли (СуммаПереоценкиСтоимости < 0) или (СуммаПереоценкиАмортизации < 0) Тогда//уценка ВА
				
				Если СуммаПереоценкиСтоимости <> 0 Тогда
					// при уценки оставшуюся сумму закрываем на счета доходов/расходов
					Проводка = Движения.Типовой.Добавить();
					Проводка.Период       = Реквизиты.Дата;
					Проводка.Организация  = Реквизиты.Организация;
					Проводка.Содержание   = НСтр("ru='Переоценка стоимости ОС'", КодОсновногоЯзыка);
					Проводка.НомерЖурнала = НСтр("ru = 'ОС'", ОбщегоНазначения.КодОсновногоЯзыка());
					Проводка.Сумма        = -СуммаПереоценкиСтоимости;
					
					ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
						Проводка, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);
								
					Проводка.СчетДт = Реквизиты.СчетРасходовБУ;
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, Реквизиты.СубконтоРасходовБУ1);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, Реквизиты.СубконтоРасходовБУ2);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, Реквизиты.СубконтоРасходовБУ3 );
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства",   ТекОС);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ВнеоборотныеАктивы", ТекОС);
				
					Проводка.СчетКт = СтрокаОС.СчетУчетаБУ;
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", ТекОС);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ВнеоборотныеАктивы", ТекОС);
					УправлениеВнеоборотнымиАктивамиСервер.УстановитьАналитикуПоМестонахождениюОС(Реквизиты.ВедетсяАналитУчетОсПоМОЛ, Реквизиты.ВедетсяАналитУчетОсПоПодразделениям, Проводка, ТекОС, ТаблицаТекМестонахождение, , Истина);
				КонецЕсли;	
				
				Если СуммаПереоценкиАмортизации <> 0 Тогда
					//делаем переоценку амортизации
					Проводка = Движения.Типовой.Добавить();
					Проводка.Период       = Реквизиты.Период;
					Проводка.Организация  = Реквизиты.Организация;
					Проводка.Содержание   = НСтр("ru='Переоценка амортизации ОС'", КодОсновногоЯзыка);
					Проводка.НомерЖурнала = НСтр("ru = 'ОС'", ОбщегоНазначения.КодОсновногоЯзыка());
					Проводка.Сумма        = -СуммаПереоценкиАмортизации;
					
					ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
						Проводка, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);
								
					Проводка.СчетДт = СтрокаОС.СчетНачисленияАмортизацииБУ;
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", ТекОС);		
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ВнеоборотныеАктивы", ТекОС);		
					УправлениеВнеоборотнымиАктивамиСервер.УстановитьАналитикуПоМестонахождениюОС(Реквизиты.ВедетсяАналитУчетОсПоМОЛ, Реквизиты.ВедетсяАналитУчетОсПоПодразделениям, Проводка, ТекОС, ТаблицаТекМестонахождение, Истина);
					
					Проводка.СчетКт = Реквизиты.СчетДоходовБУ;
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, Реквизиты.СубконтоДоходовБУ1);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, Реквизиты.СубконтоДоходовБУ2);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, Реквизиты.СубконтоДоходовБУ3 );
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства",   ТекОС);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ВнеоборотныеАктивы", ТекОС);
				КонецЕсли;	
				
				// по регистру ПереоценкаВнеоборотныхАктивов
				ДвижениеПереоценкаВА = Движения.ПереоценкаВнеоборотныхАктивов.ДобавитьРасход();
				ДвижениеПереоценкаВА.Период				 		= Реквизиты.Период;
				ДвижениеПереоценкаВА.Организация 		 		= Реквизиты.Организация;
				ДвижениеПереоценкаВА.СтруктурноеПодразделение 	= Реквизиты.СтруктурноеПодразделение;
				
				ДвижениеПереоценкаВА.ВнеоборотныйАктив   = ТекОС;
				ДвижениеПереоценкаВА.ДокументПереоценки	 = Реквизиты.Ссылка;
				ДвижениеПереоценкаВА.СуммаПереоценкиСтоимости   = - СуммаПереоценкиСтоимости;
				ДвижениеПереоценкаВА.СуммаПереоценкиАмортизации =   СуммаПереоценкиАмортизации;  
				ДвижениеПереоценкаВА.СчетДоходовБУ		 = Реквизиты.СчетДоходовБУ;
				ДвижениеПереоценкаВА.СубконтоДоходовБУ1  = Реквизиты.СубконтоДоходовБУ1;
				ДвижениеПереоценкаВА.СубконтоДоходовБУ2  = Реквизиты.СубконтоДоходовБУ2;
				ДвижениеПереоценкаВА.СубконтоДоходовБУ3  = Реквизиты.СубконтоДоходовБУ3;
				ДвижениеПереоценкаВА.СчетРасходовБУ		 = Реквизиты.СчетРасходовБУ;
				ДвижениеПереоценкаВА.СубконтоРасходовБУ1 = Реквизиты.СубконтоРасходовБУ1;
				ДвижениеПереоценкаВА.СубконтоРасходовБУ2 = Реквизиты.СубконтоРасходовБУ2;
				ДвижениеПереоценкаВА.СубконтоРасходовБУ3 = Реквизиты.СубконтоРасходовБУ3;
			КонецЕсли;//Если СуммаПереоценкиСтоимости > 0 Тогда
			
		КонецЕсли; //Если СтрокаОС.СуммаПереоценки = 0 Тогда	
		
	КонецЦикла;//Для Каждого СтрокаОС Из СписокПереоцененныхОC Цикл
	
	Если Реквизиты.НеобходимостьОтраженияВНУ Тогда
		
		Для Каждого СтрокаОС из  СписокПереоцененныхОC Цикл
			//рассчитываем новую стоимость для вычисления амортизации, а также суммы переоценки 
			СтоимостьДляВычисленияАмортизации 	= 0;
			СуммаПереоценкиСтоимости		  	= 0;
			СуммаПереоценкиАмортизации		  	= 0;
			ТекОС 								= СтрокаОС.ОсновноеСредство;
			
			Если Реквизиты.МетодПереоценки = Перечисления.МетодыПереоценкиВнеоборотныхАктивов.ПропорциональнаяПереоценкаНакопленнойАмортизации Тогда
				СуммаПереоценкиСтоимости   = Окр(СтрокаОС.СуммаПереоценкиСтоимости, 2) - Окр(СтрокаОС.СуммаПереоценкиАмортизации, 2);			
			Иначе
				СуммаПереоценкиСтоимости = Окр(СтрокаОС.СуммаПереоценки, 2);
			КонецЕсли;
			
			// дооценка
			Если СуммаПереоценкиСтоимости > 0 Тогда
				ПроводкаНУ = Движения.Налоговый.Добавить();
				ПроводкаНУ.Период       = Реквизиты.Период;
				ПроводкаНУ.Организация  = Реквизиты.Организация;
				ПроводкаНУ.Содержание   = НСтр("ru='Реверс убытка от  переоценки стоимости ОС'",КодОсновногоЯзыка);
				ПроводкаНУ.НомерЖурнала = НСтр("ru = 'ОС'", ОбщегоНазначения.КодОсновногоЯзыка());
				ПроводкаНУ.Сумма        = СуммаПереоценкиСтоимости;
				
				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				ПроводкаНУ, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);
				
				ПроводкаНУ.СчетДт 		= ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьСчетУчетаНУВнеоборотногоАктива(ТекОС, Реквизиты.Организация, Реквизиты.Дата);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "ВнеоборотныеАктивы", ТекОС);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "ВидыДвиженияСтоимостиФА", Перечисления.ВидыДвиженияСтоимостиФА.Поступление);	
				
				ПроводкаНУ.СчетКт 		= Реквизиты.СчетДоходовНУ;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 1, Реквизиты.СубконтоДоходовНУ1);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 2, Реквизиты.СубконтоДоходовНУ2);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 3, Реквизиты.СубконтоДоходовНУ3);			
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "ВнеоборотныеАктивы", ТекОС);
				
				ПроцедурыНалоговогоУчета.ВидУчетаНУ(ПроводкаНУ, Реквизиты.ВидУчета);					
			КонецЕсли;
			
			// уценка
			Если СуммаПереоценкиСтоимости < 0 Тогда
				ПроводкаНУ = Движения.Налоговый.Добавить();
				ПроводкаНУ.Период       = Реквизиты.Период;
				ПроводкаНУ.Организация  = Реквизиты.Организация;
				ПроводкаНУ.Содержание   = НСтр("ru='Переоценка стоимости ОС'", КодОсновногоЯзыка);
				ПроводкаНУ.НомерЖурнала = НСтр("ru = 'ОС'", ОбщегоНазначения.КодОсновногоЯзыка());
				
				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				ПроводкаНУ, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);
				
				ПроводкаНУ.СчетДт = Реквизиты.СчетРасходовНУ;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 1, Реквизиты.СубконтоРасходовНУ1);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 2, Реквизиты.СубконтоРасходовНУ2);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 3, Реквизиты.СубконтоРасходовНУ3);			
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "ВнеоборотныеАктивы", ТекОС);
				
				ПроводкаНУ.СчетКт = ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьСчетУчетаНУВнеоборотногоАктива(ТекОС, Реквизиты.Организация, Реквизиты.Дата);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "ВнеоборотныеАктивы", ТекОС);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "ВидыДвиженияСтоимостиФА", Перечисления.ВидыДвиженияСтоимостиФА.Поступление);
				
				ПроводкаНУ.Сумма = -СуммаПереоценкиСтоимости;		
				
				ПроцедурыНалоговогоУчета.ВидУчетаНУ(ПроводкаНУ, Реквизиты.ВидУчета);
			КонецЕсли;			
		КонецЦикла;
	КонецЕсли;
	
    Движения.Типовой.Записывать = Истина;
	Движения.Налоговый.Записывать = Истина;
	Движения.ПереоценкаВнеоборотныхАктивов.Записывать = Истина;
	
КонецПроцедуры

Функция ПодготовитьПараметрыПереоценкаВнеоборотныхАктивов(СписокПереоцененныхОC, ТаблицаДокументовПереоценкиВА, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.СписокПереоцененныхОC

	СписокОбязательныхКолонок = ""
	+ "АмортизацияБУ," 
	+ "АмортизацияЗаМесяцБУ," 
	+ "ЛиквидационнаяСтоимостьБУ," 
	+ "ОсновноеСредство," 
	+ "ПереоцененнаяСтоимостьБУ," 
	+ "СписываемаяСуммаРезерваЗаМесяцБУ," 
	+ "СтоимостьБУ," 
	+ "СуммаПереоценки," 
	+ "СуммаПереоценкиАмортизации," 
	+ "СуммаПереоценкиСтоимости," 
	+ "СчетНачисленияАмортизацииБУ," 
	+ "СчетУчетаБУ"; 

	Параметры.Вставить("СписокПереоцененныхОC",
		ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(СписокПереоцененныхОC, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.ТаблицаДокументовПереоценкиВА

	СписокОбязательныхКолонок = ""
	+ "ВнеоборотныйАктив," 
	+ "ДокументПереоценки," 
	+ "СубконтоДоходовБУ1," 
	+ "СубконтоДоходовБУ2," 
	+ "СубконтоДоходовБУ3," 
	+ "СубконтоРасходовБУ1," 
	+ "СубконтоРасходовБУ2," 
	+ "СубконтоРасходовБУ3," 
	+ "СуммаПереоценкиАмортизации," 
	+ "СуммаПереоценкиСтоимости," 
	+ "СчетДоходовБУ," 
	+ "СчетРасходовБУ"; 

	Параметры.Вставить("ТаблицаДокументовПереоценкиВА",
		ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаДокументовПереоценкиВА, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "ВедетсяАналитУчетОсПоМОЛ,"
	+ "ВедетсяАналитУчетОсПоПодразделениям,"
	+ "ВидУчета,"
	+ "Дата,"
	+ "МетодПереоценки,"
	+ "НеобходимостьОтраженияВНУ,"
	+ "Организация,"
	+ "Период,"
	+ "Ссылка,"
	+ "СтруктурноеПодразделение,"
	+ "СубконтоДоходовБУ1,"
	+ "СубконтоДоходовБУ2,"
	+ "СубконтоДоходовБУ3,"
	+ "СубконтоДоходовНУ1,"
	+ "СубконтоДоходовНУ2,"
	+ "СубконтоДоходовНУ3,"
	+ "СубконтоРасходовБУ1,"
	+ "СубконтоРасходовБУ2,"
	+ "СубконтоРасходовБУ3,"
	+ "СубконтоРасходовНУ1,"
	+ "СубконтоРасходовНУ2,"
	+ "СубконтоРасходовНУ3,"
	+ "СчетДоходовБУ,"
	+ "СчетДоходовНУ,"
	+ "СчетРасходовБУ,"
	+ "СчетРасходовНУ";

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

///////////////////////////////////////////////////////////////////////////////
// РАСПРЕДЕЛЕНИЕ АМОРТИЗАЦИИ

Процедура СформироватьДвиженияАмортизацииПоНаправлениямРегл(ТаблицаВА, ТаблицаРеквизиты, Движения, Отказ) Экспорт	

	Если ТаблицаВА = Неопределено ИЛИ ТаблицаРеквизиты = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыАмортизацииПоНаправлениямРегл(ТаблицаВА, ТаблицаРеквизиты);

	Если Параметры.ТаблицаВА.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	
	Реквизиты = Параметры.Реквизиты[0];
	
	Если ТаблицаРеквизиты.Колонки.Найти("Объект") = Неопределено Тогда
		РегистраторОбъект = Неопределено;
	Иначе
		РегистраторОбъект = ТаблицаРеквизиты[0].Объект;
	КонецЕсли;
	
	//формирование проводок
	Проводки 	= Движения.Типовой;
	ПроводкиНУ 	= Движения.Налоговый;

	Для каждого СтрокаТаблицы Из Параметры.ТаблицаВА Цикл
		
		КолонкиДокумента = СтрокаТаблицы.Владелец().Колонки;
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Сумма) тогда
			Продолжить;
		КонецЕсли;
		
		Проводка = Проводки.Добавить();
		
		Проводка.Период					 = Реквизиты.Период;
		Проводка.Содержание				 = ?(НЕ ЗначениеЗаполнено(Реквизиты.Содержание), НСтр("ru = 'Начислена амортизация'", КодОсновногоЯзыка), Реквизиты.Содержание);
		Проводка.НомерЖурнала			 = Реквизиты.НомерЖурнала;
		Проводка.ВидРегламентнойОперации = Реквизиты.ВидРегламентнойОперации;
		Проводка.Организация			 = Реквизиты.Организация;
		Проводка.Сумма					 = СтрокаТаблицы.Сумма;
		
		Проводка.СчетДт = СтрокаТаблицы.СчетЗатрат;
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(СтрокаТаблицы.СчетЗатрат, Проводка.СубконтоДт, 1, СтрокаТаблицы.Субконто1);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(СтрокаТаблицы.СчетЗатрат, Проводка.СубконтоДт, 2, СтрокаТаблицы.Субконто2);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(СтрокаТаблицы.СчетЗатрат, Проводка.СубконтоДт, 3, СтрокаТаблицы.Субконто3);
		
		Проводка.СчетКт	= СтрокаТаблицы.СчетАмортизации;
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(СтрокаТаблицы.СчетАмортизации, Проводка.СубконтоКт, 1, СтрокаТаблицы.ОбъектУчета);
		
		ПроцедурыБухгалтерскогоУчета.УстановитьПодразделениеПроводки(Проводка, СтрокаТаблицы.СтруктурноеПодразделение, "Кт");
		
		ПроцедурыБухгалтерскогоУчета.УстановитьПодразделениеПроводки(Проводка, СтрокаТаблицы.КорСтруктурноеПодразделение, "Дт");
			
		Если ТипЗнч(СтрокаТаблицы.ОбъектУчета) = Тип("СправочникСсылка.ОсновныеСредства") Тогда
			Если Реквизиты.ВедетсяАналитическийУчетОСПоПодразделениям Тогда
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Подразделения", СтрокаТаблицы.ТекПодразделение);
			КонецЕсли;	
			
			Если Реквизиты.ВедетсяАналитическийУчетОСПоМОЛ Тогда
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "РаботникиОрганизаций", СтрокаТаблицы.ТекМОЛ);
			КонецЕсли;
		КонецЕсли;	
		
		// Отражение в НУ
		// по объектам, являющимся ФА, образуется ВР
		// по прочим ОС - ПР
		Если Реквизиты.НеобходимостьОтраженияВНУ Тогда
			ПроводкаНУ = ПроводкиНУ.Добавить();
			
			ПроводкаНУ.Период				   = Реквизиты.Период;
			ПроводкаНУ.Содержание			   = ?(НЕ ЗначениеЗаполнено(Реквизиты.Содержание), НСтр("ru = 'Начислена амортизация по бухг. учету'", КодОсновногоЯзыка), Реквизиты.Содержание);
			ПроводкаНУ.НомерЖурнала			   = Реквизиты.НомерЖурнала;
			ПроводкаНУ.ВидРегламентнойОперации = Реквизиты.ВидРегламентнойОперации;
			ПроводкаНУ.Организация			   = Реквизиты.Организация;
			ПроводкаНУ.Сумма				   = СтрокаТаблицы.Сумма;
			
			ПроводкаНУ.СчетДт	  = ПланыСчетов.Налоговый.ПрочиеРасходы;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 1, Справочники.СтатьиЗатрат.АмортизацияФА);
			ПроводкаНУ.ВидУчетаДт = ?(СтрокаТаблицы.ПризнакФиксированногоАктива, Справочники.ВидыУчетаНУ.ВР,Справочники.ВидыУчетаНУ.НеОтражаетсяВНУ);								
						
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделениеПроводки(ПроводкаНУ, СтрокаТаблицы.КорСтруктурноеПодразделение, "Дт");
					
			// Заполняем кредитовую часть проводки
			Если Реквизиты.ВедениеУчетаВременныхРазницБалансовымМетодом Тогда
				Если СтрокаТаблицы.ПризнакФиксированногоАктива Тогда
					СчетКт = ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьСчетУчетаНУВнеоборотногоАктива(СтрокаТаблицы.ОбъектУчета,Реквизиты.Организация,Реквизиты.Период);
					Если Не ЗначениеЗаполнено(СчетКт) Тогда
						СчетКт = ПланыСчетов.Налоговый.ВАВключенныеВСтоимостнойБаланс;
					КонецЕсли;
				Иначе
					СчетКт = ПланыСчетов.Налоговый.ВАНеПодлежащиеАмортизации;
				КонецЕсли;				

				ПроводкаНУ.СчетКт	  = СчетКт;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 1, СтрокаТаблицы.ОбъектУчета);					
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 2, Перечисления.ВидыДвиженияСтоимостиФА.Амортизация);					
				
				ПроводкаНУ.ВидУчетаКт = ?(СтрокаТаблицы.ПризнакФиксированногоАктива, Справочники.ВидыУчетаНУ.ВР,Справочники.ВидыУчетаНУ.НеОтражаетсяВНУ);																			
				
				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделениеПроводки(ПроводкаНУ, СтрокаТаблицы.СтруктурноеПодразделение, "Кт");
				
			КонецЕсли;	
			
			// Амортизация, входящая в производственные затраты относится на вычеты через реализованные товары, услуги.
			// Поэтому для производственных затрат по амортизации Формируем дополнительную проводку по включению амортизация в сумму производственных затрат с видом НУ
			Если СтрокаТаблицы.ПризнакПроизводственныхЗатрат  И Реквизиты.ВедениеУчетаВременныхРазницБалансовымМетодом Тогда
				СчетЗатратНУ =  ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ",СтрокаТаблицы.СчетЗатрат));
				Если НЕ ЗначениеЗаполнено(СчетЗатратНУ) Тогда
					ТекстСообщения = НСтр("ru='Для счета <%1> не указан соответствующий ему счет НУ.'");
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения,
																							СтрокаТаблицы.СчетЗатрат);
				
					ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации(
						ТекстСообщения, СтрокаТаблицы.ОбъектУчета,, РегистраторОбъект, Реквизиты.ВидРегламентнойОперации);

					Продолжить;					
				КонецЕсли;						
				
				ПроводкаНУ = ПроводкиНУ.Добавить();
				
				ПроводкаНУ.Период				   = Реквизиты.Период;
				ПроводкаНУ.Содержание			   = ?(НЕ ЗначениеЗаполнено(Реквизиты.Содержание), НСтр("ru = 'Амортизация (БУ) включена в производственные затраты'", КодОсновногоЯзыка), Реквизиты.Содержание);
				ПроводкаНУ.НомерЖурнала			   = Реквизиты.НомерЖурнала;
				ПроводкаНУ.ВидРегламентнойОперации = Реквизиты.ВидРегламентнойОперации;
				ПроводкаНУ.Организация			   = Реквизиты.Организация;
				ПроводкаНУ.Сумма				   = СтрокаТаблицы.Сумма;
				
				ПроводкаНУ.СчетДт	  = СчетЗатратНУ;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 1, СтрокаТаблицы.Субконто1);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 2, СтрокаТаблицы.Субконто2);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 3, СтрокаТаблицы.Субконто3);
				ПроводкаНУ.ВидУчетаДт = ?(СтрокаТаблицы.ПризнакФиксированногоАктива, Справочники.ВидыУчетаНУ.НУ,Справочники.ВидыУчетаНУ.НеОтражаетсяВНУ);								
				
				ПроводкаНУ.СчетКт	  = ПланыСчетов.Налоговый.ПрочиеРасходы;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 1, Справочники.СтатьиЗатрат.АмортизацияФА);
				ПроводкаНУ.ВидУчетаКт = ПроводкаНУ.ВидУчетаДт;
				
				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделениеПроводки(ПроводкаНУ, СтрокаТаблицы.СтруктурноеПодразделение, "Кт");
				
				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделениеПроводки(ПроводкаНУ, СтрокаТаблицы.КорСтруктурноеПодразделение, "Дт");
			
			КонецЕсли;					
		КонецЕсли;	                                                
	КонецЦикла;

	Если ПроцедурыБухгалтерскогоУчетаКлиентСервер.ЭтоРегламентнаяОперация(Реквизиты.Регистратор) Тогда
		Движения.Типовой.Записать(Ложь);
		Если Реквизиты.НеобходимостьОтраженияВНУ Тогда
			Движения.Налоговый.Записать(Ложь);
		КонецЕсли;
	Иначе      	
		Движения.Типовой.Записывать   = Истина;
		Если Реквизиты.НеобходимостьОтраженияВНУ Тогда
			Движения.Налоговый.Записывать = Истина;
		КонецЕсли;
	КонецЕсли; 
	
КонецПроцедуры 

Функция ПодготовитьПараметрыАмортизацииПоНаправлениямРегл(ТаблицаВА, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаВА

	СписокОбязательныхКолонок = ""
	+ "Сумма," 					
	+ "СчетЗатрат," 					
	+ "Субконто1," 					
	+ "Субконто2," 					  
	+ "Субконто3,"
	+ "СчетАмортизации," 					
	+ "ОбъектУчета," 					
	+ "ТекПодразделение," 					
	+ "ТекМОЛ," 					
	+ "ПризнакФиксированногоАктива,"
	+ "ПризнакПроизводственныхЗатрат,"
	+ "КорСтруктурноеПодразделение," 					
	+ "СтруктурноеПодразделение";
	
	Параметры.Вставить("ТаблицаВА",
		ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаВА, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"             						  
	+ "Организация,"   								  
	+ "Регистратор,"   								  
	+ "ВидРегламентнойОперации,"
	+ "НомерЖурнала,"
	+ "НеобходимостьОтраженияВНУ,"
	+ "ВедениеУчетаВременныхРазницБалансовымМетодом,"
	+ "ВедетсяАналитическийУчетОСПоПодразделениям,"
	+ "ВедетсяАналитическийУчетОСПоМОЛ,"
	+ "Содержание";  					  
	
	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Функция ПодготовитьТаблицуРаспределениеАмортизацииПоНаправлениямРегл(ТаблицаВА, ТаблицаРеквизиты, Отказ) Экспорт

	// определим структуру выходной таблицы
	ТабЗатрат = Новый ТаблицаЗначений;
	ТабЗатрат.Колонки.Добавить("Сумма", ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла( 15, 2));
	ТабЗатрат.Колонки.Добавить("ПризнакФиксированногоАктива", 	Новый ОписаниеТипов("Булево"));	
	ТабЗатрат.Колонки.Добавить("ПризнакПроизводственныхЗатрат", Новый ОписаниеТипов("Булево"));	
	ТабЗатрат.Колонки.Добавить("СчетЗатрат");
	ТабЗатрат.Колонки.Добавить("СчетАмортизации");
	ТабЗатрат.Колонки.Добавить("ОбъектУчета");
	ТабЗатрат.Колонки.Добавить("Субконто1");
	ТабЗатрат.Колонки.Добавить("Субконто2");
	ТабЗатрат.Колонки.Добавить("Субконто3");
	ТабЗатрат.Колонки.Добавить("ТекПодразделение");
    ТабЗатрат.Колонки.Добавить("ТекМОЛ");
	
	ТабЗатрат.Колонки.Добавить("СтруктурноеПодразделение");
    ТабЗатрат.Колонки.Добавить("КорСтруктурноеПодразделение");
	ТабЗатрат.Колонки.Добавить("Регистратор");
	
	Если ТаблицаВА = Неопределено  Тогда
		Возврат ТабЗатрат;
	КонецЕсли;
	
	Параметры =  ПодготовитьПараметрыРаспределениеАмортизацииПоНаправлениямРегл(ТаблицаВА);
	
	Если Параметры.ТаблицаВА.Количество() = 0 Тогда
		Возврат ТабЗатрат;
	КонецЕсли;

	МассивКоэф = Новый Массив;
    СписокСчетовПроизводства =	ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСписокСчетовПроизводственногоУчета();
	
	Реквизиты = ТаблицаРеквизиты[0];
	Если ТаблицаРеквизиты.Колонки.Найти("Объект") = Неопределено Тогда
		РегистраторОбъект = Неопределено;
	Иначе
		РегистраторОбъект = Реквизиты.Объект;
	КонецЕсли;
	Если ТаблицаРеквизиты.Колонки.Найти("ВидРегламентнойОперации") = Неопределено Тогда
		ВидРегламентнойОперации = Неопределено;
	Иначе
		ВидРегламентнойОперации = Реквизиты.ВидРегламентнойОперации;
	КонецЕсли;
 
   // цикл по Объектам из ТаблицаВА
	Для Каждого СтрокаТЗ Из Параметры.ТаблицаВА Цикл

		Если СтрокаТЗ.Сумма = 0 тогда
			//Распределять амортизацию не надо, так как распределять нечего.
			Продолжить;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаТЗ.НаправлениеАмортизации) Тогда
			
			
			ТекстСообщения = НСтр("ru='Для объекта <%1> не указаны способы отражения расходов по амортизации.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения,
				СтрокаТЗ.ОбъектУчета);
				
			ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации(
				ТекстСообщения, СтрокаТЗ.ОбъектУчета,, РегистраторОбъект, ВидРегламентнойОперации);
			
			Продолжить;
		КонецЕсли;

		Если СтрокаТЗ.НаправлениеАмортизации.Способы.Количество() = 0 Тогда
			
			ТекстСообщения = НСтр("ru='Для объекта <%1> в способах отражения затрат по амортизации нет записей.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения,
				СтрокаТЗ.ОбъектУчета);
				
			ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации(
				ТекстСообщения, СтрокаТЗ.ОбъектУчета,, РегистраторОбъект, ВидРегламентнойОперации);

			Продолжить;
		КонецЕсли;

		МассивКоэф.Очистить();
		Для Каждого СтрокаНапр Из СтрокаТЗ.НаправлениеАмортизации.Способы Цикл
			МассивКоэф.Добавить(СтрокаНапр.Коэффициент);
		КонецЦикла;

		МассивСумм = ОбщегоНазначенияБККлиентСервер.РаспределитьПропорционально(СтрокаТЗ.Сумма, МассивКоэф, 2);
		Если МассивСумм = Неопределено Тогда
			
			ТекстСообщения = НСтр("ru='Для объекта <%1> в способах отражения расходов по амортизации не проставлены коэффициенты.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения,
				СтрокаТЗ.ОбъектУчета);
				
			ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации(
				ТекстСообщения, СтрокаТЗ.ОбъектУчета,, РегистраторОбъект, ВидРегламентнойОперации);

			Продолжить;
		КонецЕсли;

		Если МассивСумм.Количество() <> МассивКоэф.Количество() Тогда
			
			ТекстСообщения = НСтр("ru='Для объекта <%1> в способах отражения затрат по амортизации есть нулевые коэффициенты.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения,
				СтрокаТЗ.ОбъектУчета);
				
			ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации(
				ТекстСообщения, СтрокаТЗ.ОбъектУчета,, РегистраторОбъект, ВидРегламентнойОперации);
			
			Продолжить;
		КонецЕсли;

		КолонкиДокумента = СтрокаТЗ.Владелец().Колонки;
		
		Если Не СтрокаТЗ.НаправлениеАмортизации = Неопределено Тогда			
			
			Для Каждого СтрокаНапр Из СтрокаТЗ.НаправлениеАмортизации.Способы Цикл
				НоваяСтрока = ТабЗатрат.Добавить();
				НоваяСтрока.СчетЗатрат						= СтрокаНапр.СчетЗатрат;
				НоваяСтрока.ОбъектУчета						= СтрокаТЗ.ОбъектУчета;
				НоваяСтрока.СчетАмортизации					= СтрокаТЗ.СчетАмортизации;
				НоваяСтрока.ПризнакПроизводственныхЗатрат 	= ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.СчетЯвляетсяПроизводственным(НоваяСтрока.СчетЗатрат);
				
				Если ТипЗнч(СтрокаТЗ.ОбъектУчета) = Тип("СправочникСсылка.ОсновныеСредства") Тогда
					// среди субконто счета ищем, есть ли субконто с типом Подразделения
					Для Каждого ВидСубконтоСчета Из СтрокаНапр.СчетЗатрат.ВидыСубконто Цикл
						
						Индекс = СтрокаНапр.СчетЗатрат.ВидыСубконто.Индекс(ВидСубконтоСчета) + 1;
						
						Если ВидСубконтоСчета.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоТиповые.Подразделения Тогда
							НоваяСтрока["Субконто" + Индекс] = ?(ЗначениеЗаполнено(СтрокаНапр["Субконто" + Индекс]), СтрокаНапр["Субконто" + Индекс], СтрокаТЗ.ТекущееПодразделение);
						Иначе
							НоваяСтрока["Субконто" + Индекс] = СтрокаНапр["Субконто" + Индекс];
						КонецЕсли;					
						
					КонецЦикла;
					
					НоваяСтрока.ТекПодразделение= СтрокаТЗ.ТекущееПодразделение;
					НоваяСтрока.ТекМОЛ			= СтрокаТЗ.ТекущееМОЛ;
					
				Иначе
					НоваяСтрока.Субконто1		= СтрокаНапр.Субконто1;
					НоваяСтрока.Субконто2		= СтрокаНапр.Субконто2;
					НоваяСтрока.Субконто3		= СтрокаНапр.Субконто3;
				КонецЕсли;			
				
				Если НЕ КолонкиДокумента.Найти("КорСтруктурноеПодразделение") = Неопределено Тогда
					НоваяСтрока.СтруктурноеПодразделение 	= СтрокаТЗ.СтруктурноеПодразделение;
					НоваяСтрока.КорСтруктурноеПодразделение	= СтрокаТЗ.КорСтруктурноеПодразделение;
				Иначе
					НоваяСтрока.СтруктурноеПодразделение 	= СтрокаТЗ.СтруктурноеПодразделение;
					НоваяСтрока.КорСтруктурноеПодразделение	= СтрокаТЗ.СтруктурноеПодразделение;
				КонецЕсли;
				
				НоваяСтрока.ПризнакФиксированногоАктива	= СтрокаТЗ.ПризнакФиксированногоАктива;                				
				НоваяСтрока.Сумма = МассивСумм[СтрокаНапр.НомерСтроки - 1];
				НоваяСтрока.Регистратор	= СтрокаТЗ.Регистратор;
			КонецЦикла; 
		КонецЕсли;	
	КонецЦикла;
	
	Возврат ТабЗатрат;
	
КонецФункции

Функция ПодготовитьПараметрыРаспределениеАмортизацииПоНаправлениямРегл(ТаблицаВА)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаВА

	СписокОбязательныхКолонок = ""
	+ "ИмяСписка," 					
	+ "СинонимСписка,"		
	+ "Период," 					
	+ "Регистратор," 					
	+ "Организация," 					  
	+ "СтруктурноеПодразделение,"
	+ "КорСтруктурноеПодразделение," 					
	+ "НомерСтроки," 					
	+ "ОбъектУчета," 					
	+ "Сумма," 					
	+ "ТекущееПодразделение,"
	+ "ТекущееМОЛ,"
	+ "НаправлениеАмортизации," 					
	+ "СчетАмортизации," 					
	+ "ПризнакФиксированногоАктива";
	
	Параметры.Вставить("ТаблицаВА",
		ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаВА, СписокОбязательныхКолонок));

	
	Возврат Параметры;

КонецФункции

// СПИСАНИЕ РЕЗЕРВА ПО ПЕРЕОЦЕНКЕ ОС


Функция ПодготовитьТаблицуСписываемогоРезерваПоПереоценке(ТаблицаРеквизиты, СписокОС = Неопределено, ВыдаватьСообщения = Ложь) Экспорт
	
	ТаблицаРезервКСписанию = Новый ТаблицаЗначений;
	ТаблицаРезервКСписанию.Колонки.Добавить("ОсновноеСредство", 	 Новый ОписаниеТипов("СправочникСсылка.ОсновныеСредства"));
	ТаблицаРезервКСписанию.Колонки.Добавить("СуммаРезерваКСписанию", ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));

	Если ТаблицаРеквизиты = Неопределено Тогда
		Возврат ТаблицаРезервКСписанию;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыРасчетаСуммыСписываемогоРезерваПоПереоценке(ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];
	
	Запрос = Новый Запрос;
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("НачалоГода",                	НачалоГода(Реквизиты.Период));
	Запрос.УстановитьПараметр("Организация",              	Реквизиты.Организация);
	Запрос.УстановитьПараметр("СтруктурноеПодразделение", 	Реквизиты.СтруктурноеПодразделение);
	
	Запрос.УстановитьПараметр("НачалоПериода",             НачалоМесяца(Реквизиты.Период));
	Запрос.УстановитьПараметр("КонецПериода",              КонецМесяца(Реквизиты.Период));
	Запрос.УстановитьПараметр("Период",                    Реквизиты.Период);
	Запрос.УстановитьПараметр("СписокОС",                  СписокОС);
	Запрос.УстановитьПараметр("Регистратор",               Реквизиты.Регистратор);
	Запрос.УстановитьПараметр("СубконтоОС",                ПланыВидовХарактеристик.ВидыСубконтоТиповые.ОсновныеСредства);
	
	Запрос.Текст = ТекстЗапросаРасчетСуммыСписываемогоРезерваПоПереоценке(СписокОС);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ВидРегламентнойОперации = Перечисления.ВидыРегламентныхОпераций.СписаниеРезерваПоПереоценкеОСБУ;
	
	ПрименятьПараметрыАмортизацииВТекМесяце = ПолучитьПризнакПримененияПараметровАмортизацииВТекМесяце(Реквизиты.Организация, Реквизиты.Период); 
		
	Пока Выборка.Следующий() Цикл
		
		ТекОС = Выборка.ОС;
		
		Если Выборка.УжеСписанРезерв Тогда
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Для основного средства %1 уже выполнялось списание резерва по переоценке!'"),
			                                                                         ТекОС) ;
			ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации(ТекстСообщения,
														ТекОС,, Реквизиты.Объект, ВидРегламентнойОперации, Ложь);
				
			Продолжить;
			
		КонецЕсли;	
			
		Если Выборка.ОстатокРезерваНаНачало <= 0 И Выборка.ОстатокРезерваНаКонец<= 0 Тогда
			// нет положительного остатка резерва по переоценке, значит переходим к следующему ОС
			Продолжить;
		КонецЕсли;
		
		// В случае если ПрименятьПараметрыАмортизацииВТекМесяце = истина, амортизация объекта уже закончена, а последняя сумма резерва еще имеется
		Если Выборка.АмортизацияЗаМесяц = 0 И НЕ ПрименятьПараметрыАмортизацииВТекМесяце Тогда
			Если ВыдаватьСообщения Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Списание резерва по переоценке: Для основного средства %1 не начислена амортизация за текущий месяц!'"),
			                                                                         ТекОС) ;

				ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации(ТекстСообщения,
														ТекОС,,Реквизиты.Объект,ВидРегламентнойОперации);
				
			КонецЕсли;	
			Продолжить;
		КонецЕсли;
		
		СуммаРезерваКСписанию = 0;
		
		Если ПрименятьПараметрыАмортизацииВТекМесяце Тогда
			// коэффициент не изменяется в зависимости от настройки применяетбпараметрыАмортизацииВтекМесяце
			// (так как такой расчет был реализован изначально и мы не изменяем его сейчас), но в последнем месяце мы должны списать всю сумму остатка,
			// поскольку дальнейшеного начисления амортизации не будет
			Если Выборка.СтоимостьОСНаКонецМесяца = 0 Тогда
				КоэффициентРаспределения = 1;
			Иначе	
				КоэффициентРаспределения = ?(Выборка.СтоимостьОСНаКонецМесяца <> 0, Выборка.АмортизацияЗаМесяц/Выборка.СтоимостьОСНаКонецМесяца, 1);
			КонецЕсли;
			
			СуммаРезерваКСписанию = Мин(КоэффициентРаспределения * Выборка.ОстатокРезерваНаКонец, Выборка.ОстатокРезерваНаКонец);
			
		Иначе
			//Если остаток резерва уже списан, то сумма резерва к списанию будет нулевой
			Если Выборка.ОстатокРезерваНаКонец<= 0 Тогда
				Продолжить;
			КонецЕсли;
			
			КоэффициентРаспределения = ?(Выборка.СтоимостьОС<>0, Выборка.АмортизацияЗаМесяц/Выборка.СтоимостьОС, 1);
			СуммаРезерваКСписанию = КоэффициентРаспределения * Выборка.ОстатокРезерваНаНачало;
			
		КонецЕсли;
		
		СтрокаРезервОС = ТаблицаРезервКСписанию.Добавить();
		СтрокаРезервОС.ОсновноеСредство = ТекОС;
		СтрокаРезервОС.СуммаРезерваКСписанию = СуммаРезерваКСписанию;
						
	КонецЦикла;	   
	
	Возврат  ТаблицаРезервКСписанию;	
	
КонецФункции

Функция ПодготовитьПараметрыРасчетаСуммыСписываемогоРезерваПоПереоценке(ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.Реквизиты
	СписокОбязательныхКолонок = ""
	+ "Период,"             						  
	+ "Организация,"   								  
	+ "СтруктурноеПодразделение,"   								  
	+ "Регистратор"   								  	
	;  					  
	
	Если ТипЗнч(ТаблицаРеквизиты) = Тип("ТаблицаЗначений") Тогда
		Если ТаблицаРеквизиты.Колонки.Найти("Объект") <> Неопределено Тогда
			СписокОбязательныхКолонок = СписокОбязательныхКолонок + ",Объект";	
		КонецЕсли;
	КонецЕсли;
	
	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Функция ТекстЗапросаРасчетСуммыСписываемогоРезерваПоПереоценке(СписокОС)
								 
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
	|ПОМЕСТИТЬ ТаблицаОС
	|ИЗ
	|	РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(&Период, ) КАК ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних
	|ГДЕ
	|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.Организация = &Организация
	|	И ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.СтруктурноеПодразделение = &СтруктурноеПодразделение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПоложительныеПереоценкиОС.ВнеоборотныйАктив КАК ОсновноеСредство,
	|	СУММА(ПоложительныеПереоценкиОС.СуммаПереоценкиАмортизацииПриход) КАК СуммаПереоценкиАмортизации
	|ПОМЕСТИТЬ ВТ_ПоложительныеПереоценкиОС
	|ИЗ
	|	РегистрНакопления.ПереоценкаВнеоборотныхАктивов.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			,
	|			Организация = &Организация
	|				И СтруктурноеПодразделение = &СтруктурноеПодразделение
	|				И ВнеоборотныйАктив В
	|					(ВЫБРАТЬ
	|						ТаблицаОС.ОсновноеСредство
	|					ИЗ
	|						ТаблицаОС)) КАК ПоложительныеПереоценкиОС
	|
	|СГРУППИРОВАТЬ ПО
	|	ПоложительныеПереоценкиОС.ВнеоборотныйАктив
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СостоянияОСОрганизаций.ОсновноеСредство КАК ОсновноеСредство
	|ПОМЕСТИТЬ ВТ_СнятыеСУчета
	|ИЗ
	|	РегистрСведений.СостоянияОСОрганизаций.СрезПоследних(
	|			&Период,
	|			Организация = &Организация
	|				И ОсновноеСредство В
	|					(ВЫБРАТЬ
	|						ТаблицаОС.ОсновноеСредство
	|					ИЗ
	|						ТаблицаОС)
	|				И Регистратор <> &Регистратор) КАК СостоянияОСОрганизаций
	|ГДЕ
	|	СостоянияОСОрганизаций.Состояние = ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийОС.СнятоСУчета)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НачислениеАмортизацииБухгалтерскийУчетСрезПоследних.ОсновноеСредство,
	|	АмортизацияОС_БУ.Счет КАК Счет,
	|	СУММА(ЕСТЬNULL(АмортизацияОС_БУ.СуммаОборотДт, 0)) КАК АмортизацияОборотПеремещения
	|ПОМЕСТИТЬ вт_ОборотПеремещения
	|ИЗ
	|	РегистрСведений.НачислениеАмортизацииОСБухгалтерскийУчет.СрезПоследних(
	|			&НачалоПериода,
	|			Организация = &Организация
	|				И ОсновноеСредство В
	|					(ВЫБРАТЬ
	|						ТаблицаОС.ОсновноеСредство
	|					ИЗ
	|						ТаблицаОС)) КАК НачислениеАмортизацииБухгалтерскийУчетСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаУчетаОС.СрезПоследних(&НачалоПериода, Организация = &Организация) КАК СчетаУчетаОсновныхСредствСрезПоследних
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Типовой.ОстаткиИОбороты(&НачалоПериода, &КонецПериода, Период, , , &СубконтоОС, Организация = &Организация) КАК СтоимостьОС_БУ
	|			ПО СчетаУчетаОсновныхСредствСрезПоследних.ОсновноеСредство = СтоимостьОС_БУ.Субконто1
	|				И СчетаУчетаОсновныхСредствСрезПоследних.СчетУчетаБУ = СтоимостьОС_БУ.Счет
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Типовой.ОстаткиИОбороты(&НачалоПериода, &КонецПериода, Регистратор, , , &СубконтоОС, Организация = &Организация) КАК АмортизацияОС_БУ
	|			ПО СчетаУчетаОсновныхСредствСрезПоследних.ОсновноеСредство = АмортизацияОС_БУ.Субконто1
	|				И СчетаУчетаОсновныхСредствСрезПоследних.СчетНачисленияАмортизацииБУ = АмортизацияОС_БУ.Счет
	|		ПО НачислениеАмортизацииБухгалтерскийУчетСрезПоследних.ОсновноеСредство = СчетаУчетаОсновныхСредствСрезПоследних.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СнятыеСУчета КАК СнятыеСУчета
	|		ПО НачислениеАмортизацииБухгалтерскийУчетСрезПоследних.ОсновноеСредство = СнятыеСУчета.ОсновноеСредство
	|ГДЕ
	|	НачислениеАмортизацииБухгалтерскийУчетСрезПоследних.НачислятьАмортизацию = ИСТИНА
	|	И СнятыеСУчета.ОсновноеСредство ЕСТЬ NULL 
	|	И АмортизацияОС_БУ.Регистратор ССЫЛКА Документ.ПеремещениеОС
	|
	|СГРУППИРОВАТЬ ПО
	|	НачислениеАмортизацииБухгалтерскийУчетСрезПоследних.ОсновноеСредство,
	|	АмортизацияОС_БУ.Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НачислениеАмортизацииБухгалтерскийУчетСрезПоследних.ОсновноеСредство,
	|	ЕСТЬNULL(СтоимостьОС_БУ.СуммаНачальныйОстатокДт, 0) - ЕСТЬNULL(АмортизацияОС_БУ.СуммаНачальныйОстатокКт, 0) КАК СтоимостьОС,
	|	ЕСТЬNULL(СтоимостьОС_БУ.СуммаКонечныйОстатокДт, 0) - ЕСТЬNULL(АмортизацияОС_БУ.СуммаКонечныйОстатокКт, 0) КАК СтоимостьОСНаКонецМесяца,
	|	ЕСТЬNULL(АмортизацияОС_БУ.СуммаОборотКт, 0) - ЕСТЬNULL(ВТ_ОборотПеремещения.АмортизацияОборотПеремещения, 0) - -ЕСТЬNULL(ПоложительныеПереоценкиОС.СуммаПереоценкиАмортизации, 0) КАК АмортизацияЗаМесяц
	|ПОМЕСТИТЬ ТаблицаАмортизации
	|ИЗ
	|	РегистрСведений.НачислениеАмортизацииОСБухгалтерскийУчет.СрезПоследних(
	|			&НачалоПериода,
	|			Организация = &Организация
	|				И ОсновноеСредство В
	|					(ВЫБРАТЬ
	|						ТаблицаОС.ОсновноеСредство
	|					ИЗ
	|						ТаблицаОС)) КАК НачислениеАмортизацииБухгалтерскийУчетСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаУчетаОС.СрезПоследних(&НачалоПериода, Организация = &Организация) КАК СчетаУчетаОсновныхСредствСрезПоследних
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Типовой.ОстаткиИОбороты(&НачалоПериода, &КонецПериода, Период, , , &СубконтоОС, Организация = &Организация) КАК СтоимостьОС_БУ
	|			ПО СчетаУчетаОсновныхСредствСрезПоследних.ОсновноеСредство = СтоимостьОС_БУ.Субконто1
	|				И СчетаУчетаОсновныхСредствСрезПоследних.СчетУчетаБУ = СтоимостьОС_БУ.Счет
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Типовой.ОстаткиИОбороты(&НачалоПериода, &КонецПериода, Период, , , &СубконтоОС, Организация = &Организация) КАК АмортизацияОС_БУ
	|			ПО СчетаУчетаОсновныхСредствСрезПоследних.ОсновноеСредство = АмортизацияОС_БУ.Субконто1
	|				И СчетаУчетаОсновныхСредствСрезПоследних.СчетНачисленияАмортизацииБУ = АмортизацияОС_БУ.Счет
	|			ЛЕВОЕ СОЕДИНЕНИЕ вт_ОборотПеремещения КАК ВТ_ОборотПеремещения
	|			ПО СчетаУчетаОсновныхСредствСрезПоследних.ОсновноеСредство = ВТ_ОборотПеремещения.ОсновноеСредство
	|				И СчетаУчетаОсновныхСредствСрезПоследних.СчетНачисленияАмортизацииБУ = ВТ_ОборотПеремещения.Счет
	|		ПО НачислениеАмортизацииБухгалтерскийУчетСрезПоследних.ОсновноеСредство = СчетаУчетаОсновныхСредствСрезПоследних.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СнятыеСУчета КАК СнятыеСУчета
	|		ПО НачислениеАмортизацииБухгалтерскийУчетСрезПоследних.ОсновноеСредство = СнятыеСУчета.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПоложительныеПереоценкиОС КАК ПоложительныеПереоценкиОС
	|		ПО НачислениеАмортизацииБухгалтерскийУчетСрезПоследних.ОсновноеСредство = ПоложительныеПереоценкиОС.ОсновноеСредство
	|ГДЕ
	|	НачислениеАмортизацииБухгалтерскийУчетСрезПоследних.НачислятьАмортизацию = ИСТИНА
	|	И СнятыеСУчета.ОсновноеСредство ЕСТЬ NULL 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТиповойОбороты.Субконто1 КАК ОС,
	|	ТиповойОбороты.СуммаОборотДт КАК СписанныйРезервЗаМесяц
	|ПОМЕСТИТЬ ТаблицаСписанныхРезервов
	|ИЗ
	|	РегистрБухгалтерии.Типовой.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			,
	|			Счет = ЗНАЧЕНИЕ(ПланСчетов.Типовой.РезервНаПереоценкуОсновныхСредств),
	|			,
	|			Организация = &Организация
	|				И Субконто1 В
	|					(ВЫБРАТЬ
	|						ТаблицаАмортизации.ОсновноеСредство
	|					ИЗ
	|						ТаблицаАмортизации),
	|			КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Типовой.НераспределеннаяПрибыльНепокрытыйУбытокОтчетногоГода),
	|			) КАК ТиповойОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТиповойОстаткиИОбороты.Субконто1 КАК ОС,
	|	ВЫБОР
	|		КОГДА НЕ ТаблицаСписанныхРезервов.ОС ЕСТЬ NULL 
	|				И ТаблицаСписанныхРезервов.СписанныйРезервЗаМесяц <> 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК УжеСписанРезерв,
	|	ТиповойОстаткиИОбороты.СуммаНачальныйОстатокКт КАК ОстатокРезерваНаНачало,
	|	ТиповойОстаткиИОбороты.СуммаКонечныйОстатокКт КАК ОстатокРезерваНаКонец,
	|	ЕСТЬNULL(ТаблицаАмортизации.АмортизацияЗаМесяц, 0) КАК АмортизацияЗаМесяц,
	|	ЕСТЬNULL(ТаблицаАмортизации.СтоимостьОС, 0) КАК СтоимостьОС,
	|	ЕСТЬNULL(ТаблицаАмортизации.СтоимостьОСНаКонецМесяца, 0) КАК СтоимостьОСНаКонецМесяца
	|ИЗ
	|	РегистрБухгалтерии.Типовой.ОстаткиИОбороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			,
	|			,
	|			Счет = ЗНАЧЕНИЕ(ПланСчетов.Типовой.РезервНаПереоценкуОсновныхСредств),
	|			,
	|			Организация = &Организация
	|				И Субконто1 В
	|					(ВЫБРАТЬ
	|						ТаблицаАмортизации.ОсновноеСредство
	|					ИЗ
	|						ТаблицаАмортизации)) КАК ТиповойОстаткиИОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСписанныхРезервов КАК ТаблицаСписанныхРезервов
	|		ПО ТиповойОстаткиИОбороты.Субконто1 = ТаблицаСписанныхРезервов.ОС
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаАмортизации КАК ТаблицаАмортизации
	|		ПО ТиповойОстаткиИОбороты.Субконто1 = ТаблицаАмортизации.ОсновноеСредство";
				   
				   Если НЕ СписокОС = Неопределено Тогда
					   ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.Организация = &Организация", 
					   "| И ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство В (&СписокОС) ");
				   КонецЕсли;

	Возврат ТекстЗапроса;

КонецФункции


////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// СЧЕТА УЧЕТА В ДОКУМЕНТАХ 

Процедура ОграничитьВыборСчетамиУчетаОС(ЭлементФормы, ВключатьАрендованныеОС = Ложь) Экспорт
	
	СчетаУчета = Новый Массив();
	
	СчетаУчета.Добавить(ПланыСчетов.Типовой.ОсновныеСредства);
	СчетаУчета.Добавить(ПланыСчетов.Типовой.ИнвестицииВНедвижимость);
	СчетаУчета.Добавить(ПланыСчетов.Типовой.ДолгосрочныеАктивыДляПродажи);
	СчетаУчета.Добавить(ПланыСчетов.Типовой.АрендованноеИмущество);
	
	УсловияОтбора = ПроцедурыБухгалтерскогоУчета.НовыеУсловияОтбораСубсчетов();
	
	Если ВключатьАрендованныеОС Тогда	
		СчетаУчета.Добавить(ПланыСчетов.Типовой.АрендованныеОсновныеСредства);
	Иначе
		УсловияОтбора.Забалансовый           = Ложь;   // Исключить забалансовые
	КонецЕсли;
		
	УсловияОтбора.ИспользоватьВПроводках = Истина; // Исключить запрещенные для использования в проводках
	УсловияОтбора.Валютный               = Неопределено; // Не важно, валютные или нет
	 			
	СчетаДляОтбора = ПроцедурыБухгалтерскогоУчета.СформироватьМассивСубсчетовПоОтбору(СчетаУчета, УсловияОтбора);
	
	ЭлементФормы.СписокВыбора.Очистить();
	Для Каждого ЭлементСчета Из СчетаДляОтбора Цикл 
		ЭлементФормы.СписокВыбора.Добавить(ЭлементСчета, ЭлементСчета.Код + " (" + ЭлементСчета.Наименование + ")");
	КонецЦикла;   
	
КонецПроцедуры

Процедура ОграничитьВыборСчетамиУчетаНачисленияАмортизацииОС(ЭлементФормы, ВключатьАрендованныеОС = Ложь) Экспорт
	
	СчетаУчета = Новый Массив();	
	УсловияОтбора = ПроцедурыБухгалтерскогоУчета.НовыеУсловияОтбораСубсчетов();
	СчетаУчета.Добавить(ПланыСчетов.Типовой.АмортизацияИнвестицийВНедвижимость);
	СчетаУчета.Добавить(ПланыСчетов.Типовой.АмортизацияОсновныхСредств);
	СчетаУчета.Добавить(ПланыСчетов.Типовой.АмортизацияАрендованногоИмущества);
	
	Если ВключатьАрендованныеОС Тогда
		СчетаУчета.Добавить(ПланыСчетов.Типовой.АмортизацияАрендованныхОсновныхСредств);
	Иначе
		УсловияОтбора.Забалансовый           = Ложь;   // Исключить забалансовые
	КонецЕсли;
	
	УсловияОтбора.ИспользоватьВПроводках = Истина; // Исключить запрещенные для использования в проводках
	УсловияОтбора.Валютный               = Неопределено; // Не важно, валютные или нет
	
	СчетаДляОтбора = ПроцедурыБухгалтерскогоУчета.СформироватьМассивСубсчетовПоОтбору(СчетаУчета, УсловияОтбора);
	
	ЭлементФормы.СписокВыбора.Очистить();
	Для Каждого ЭлементСчета Из СчетаДляОтбора Цикл 
		ЭлементФормы.СписокВыбора.Добавить(ЭлементСчета, ЭлементСчета.Код + " (" + ЭлементСчета.Наименование + ")");
	КонецЦикла;
	
КонецПроцедуры
