
#Область ЗаполнениеДокументовИСМПТ

// Возвращает номер документа на печать.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.<Имя> - Ссылка на документ, для которого необходимо получить номер на печать.
//
// Возвращаемое значение:
//  Строка - Номер документа, который может использоваться для печати.
//
Функция ПолучитьНомерНаПечать(ДокументСсылка) Экспорт
	
	Если ДокументСсылка.Направление = ПредопределенноеЗначение("Перечисление.НаправленияДокументовИСМПТК.Исходящий") Тогда
		Если СтрНайти(ДокументСсылка.Номер,"-И-") > 0 Тогда
			Возврат ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(СтрЗаменить(ДокументСсылка.Номер,"-И-",""), Истина, Истина);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

//Вызов из первичных документов (РТУ, ПТУ и т.д.), проверяет наличие в ТЧ Товары маркируемой продукции (по реквизитам Номенклатура.ТабачнаяПродукция, Номенклатура.ОбувнаяПродукция и т.д.)
//В зависимости от наличия такой продукции устанавливается видимость группы создания документов ИС МПТ в документах-основаниях
Функция ПроверитьНаличиеМаркированногоТовараДляВводаДокументаИСМПТ(ПервичныйДокумент, ИмяКоманды = Неопределено) Экспорт
	
	ИмяТЧТовары = ПолучитьИмяТЧТовары(ПервичныйДокумент);
	ТаблицаТовары = ПервичныйДокумент[ИмяТЧТовары];
	
	Если ТаблицаТовары.Количество() = 0 Тогда
		Возврат Ложь;
	Иначе
		Для Каждого СтрокаТовар Из ТаблицаТовары Цикл
			
			//ПЕРЕОПРЕДЕЛЕНИЕ//
			Если Не ИмяКоманды = Неопределено
				И ИмяКоманды = "СоздатьЭкспортЕАЭС" Тогда 
				// Увед.Экспорт ЕАЭС - только для обувной продукции по схеме взаимного призанния
				Если СтрокаТовар.Номенклатура.ОсобенностьУчета = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.ОбувнаяПродукция") Тогда
					ЕстьМарки = Истина;
					Прервать;
				Иначе
					ЕстьМарки = Ложь;
				КонецЕсли;
				
			Иначе
				// Ввод прочих документов ИС МПТ - исключается фарм.продукция контура ЦЭДМ
				Если СтрокаТовар.Номенклатура.ОсобенностьУчета = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.ТабачнаяПродукция") 
					ИЛИ СтрокаТовар.Номенклатура.ОсобенностьУчета = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.ОбувнаяПродукция") 
					ИЛИ СтрокаТовар.Номенклатура.ОсобенностьУчета = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.МолочнаяПродукция")
					ИЛИ СтрокаТовар.Номенклатура.ОсобенностьУчета = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.АлкогольнаяПродукция")
					ИЛИ СтрокаТовар.Номенклатура.ОсобенностьУчета = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.ЛегкаяПромышленность") Тогда
					ЕстьМарки = Истина;
					Прервать;
				Иначе
					ЕстьМарки = Ложь;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		Возврат ЕстьМарки;
		
	КонецЕсли;
	
КонецФункции

Функция ПолучитьКодСтраныДляУведомленияОввозе(СтранаОтправления) Экспорт
	
	Возврат СтранаОтправления.КодАльфа2;
	
КонецФункции

// Возвращает ссылку на элемент справочника страны мира по коду.
// Если элемент справочника не найден, то он будет создан на основании данных заполнения.
//
// Параметры:
//  КодСтраны - Строка    - Код страны, код альфа2, код альфа3.
// 
// Возвращаемое значение:
//  СправочникСсылка.СтраныМира - Ссылка на элемент справочника СтраныМиры.
//                                Если найдено несколько значений, то будет возвращено первое.
//                                Если ничего не найдено, данные заполнения не указаны, то возвращается пустая ссылка.
//
Функция ПолучитьСтрануПоКоду(КодСтраны) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтраныМира.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.КлассификаторСтранМира КАК СтраныМира
	|ГДЕ
	|	(СтраныМира.Код = &КодСтраны
	|			ИЛИ СтраныМира.КодАльфа2 = &КодСтраны
	|			ИЛИ СтраныМира.КодАльфа3 = &КодСтраны)";
	
	Запрос.УстановитьПараметр("КодСтраны", КодСтраны);
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	
	Если РезультатЗапроса.Следующий() Тогда
		Возврат РезультатЗапроса.Ссылка;
	Иначе
		Возврат Справочники.КлассификаторСтранМира.ПустаяСсылка();
	КонецЕсли;
		
КонецФункции

Функция ПолучитьКодТНВЭДПоНоменклатуре(Номенклатура) Экспорт
	
	Возврат Строка(Номенклатура.КодТНВЭД);
	
КонецФункции

Функция ПолучитьЗначениеОрганизацииПоТипу(Организация) Экспорт
	
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	Возврат ?(ТипЗнч(Организация) = Тип("СправочникСсылка.ПодразделенияОрганизаций"), Организация.Владелец, Организация);
	///////////////////
	
КонецФункции

Функция ПолучитьВидОперацииАПППооснованию(ВидОперации) Экспорт
	
	Возврат ВидОперации;	
	
КонецФункции

Функция ЗаполнитьСтрануПоУмолчаниюПризнаниеКодовЕАЭС() Экспорт
	
	//Значение по умолчанию для документа Экспорта ЕАЭС
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	Возврат Справочники.КлассификаторСтранМира.НайтиПоКоду("643");  // Россия;
	///////////////////
	
Конецфункции

Функция ЭтоФормированиеУведомленияОВвозеИзТретьихСтран(ДокументОснование, ТипДокументаИСМПТ = Неопределено) Экспорт
	
	Если ТипЗнч(ТипДокументаИСМПТ) = Тип("ДокументСсылка.УведомлениеОВвозеИзЕАЭСИСМПТК") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") 
		И ДокументОснование.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.Импорт") Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

//Универсальная функция для перезаполнения некоторых сведений в документе ИС МПТ по выбранному в нем документу-основанию
//
Функция ПолучитьДанныеДокументаОснованияДляПерезаполненияИСМПТ_Общий(ДокументОснование, ДокументИСМПТ) Экспорт
	
	ИмяДокументаОснования = ПолучитьИмяДокументаДляПроверкиПоТипу(ДокументОснование);
	ТекстЗапроса = ТекстЗапросаОбщиеДанныеОснования("ИСМПТ", ИмяДокументаОснования);
	Запрос = Новый Запрос();
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("МассивДокументов", ДокументОснование);
	
	РезультатЗапроса  = Запрос.ВыполнитьПакет();
	КоличествоПакетов = РезультатЗапроса.Количество();
	
	ТаблицаРеквизиты = РезультатЗапроса[КоличествоПакетов - 3].Выгрузить();
	Реквизиты = Новый Структура();
	
	Для Каждого Строка Из ТаблицаРеквизиты Цикл
		
		Реквизиты.Вставить("Организация", Строка.Организация);
		Если Не ДокументИСМПТ = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОВвозеИзЕАЭСИСМПТК()
			И Не ДокументИСМПТ = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОВвозеИзТретьихСтранИСМПТК() Тогда
			
			Реквизиты.Вставить("Поставщик", Строка.Поставщик);
			Реквизиты.Вставить("ПоставщикИдентификационныйНомер", Строка.ПоставщикИдентификационныйНомер);
			Реквизиты.Вставить("ПоставщикНаименование", Строка.ПоставщикНаименование);
		Иначе
			//У ввоза заполнение наоборот
			Реквизиты.Вставить("Получатель", Строка.Поставщик);
			Реквизиты.Вставить("ПолучательИдентификационныйНомер", Строка.ПоставщикИдентификационныйНомер);
			Реквизиты.Вставить("ПолучательНаименование", Строка.ПоставщикНаименование);
			Реквизиты.Вставить("Контрагент", Строка.Контрагент);
			Реквизиты.Вставить("Поставщик",  Строка.Получатель);
			Реквизиты.Вставить("ПоставщикИдентификационныйНомер", Строка.ПолучательИдентификационныйНомер);
			Реквизиты.Вставить("ПоставщикНаименование", Строка.ПолучательНаименование);
		КонецЕсли;
		
		Если Не ДокументИСМПТ = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОВыводеИзОборотаИСМПТК()
			И Не ДокументИСМПТ = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОВводеВОборотИСМПТК() 
			И Не ДокументИСМПТ = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОВвозеИзЕАЭСИСМПТК()
			И Не ДокументИСМПТ = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОВвозеИзТретьихСтранИСМПТК() Тогда
			Реквизиты.Вставить("Контрагент", Строка.Контрагент);
			Реквизиты.Вставить("Получатель", Строка.Получатель);
			Реквизиты.Вставить("ПолучательИдентификационныйНомер", Строка.ПолучательИдентификационныйНомер);
			Реквизиты.Вставить("ПолучательНаименование", Строка.ПолучательНаименование);
		КонецЕсли;
		
		Если ДокументИСМПТ = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОВвозеИзЕАЭСИСМПТК()
			ИЛИ ДокументИСМПТ = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОВвозеИзТретьихСтранИСМПТК() Тогда
			Реквизиты.Вставить("СтранаОтправления", ПолучитьСтрануОтправленияВвозИзЕАЭС(Строка.Контрагент));
		ИначеЕсли ДокументИСМПТ = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОбЭкспортеЕАЭСИСМПТК() Тогда
			Реквизиты.Вставить("СтранаПолучатель",  ПолучитьСтрануОтправленияВвозИзЕАЭС(Строка.Контрагент));
		КонецЕсли;
		
		Реквизиты.Вставить("ДокументОснование", Строка.ДокументОснование);
		
	КонецЦикла;
	
	ТаблицаТовары = РезультатЗапроса[КоличествоПакетов - 2].Выгрузить(); 
	Товары = Новый Массив();
	
	Для Каждого Строка Из ТаблицаТовары Цикл
		
		СтрокаТовары = Новый Структура();
		СтрокаТовары.Вставить("Номенклатура", 	    Строка.Номенклатура);
		СтрокаТовары.Вставить("КоличествоИсточник", Строка.КоличествоИсточник);
		СтрокаТовары.Вставить("ЕдиницаИзмерения",   Строка.ЕдиницаИзмеренияБазовая);
		СтрокаТовары.Вставить("ВидПродукции",	    Строка.ВидПродукции);
		Товары.Добавить(СтрокаТовары);
		
	КонецЦикла;
			
	ДанныеДокументаОснования = Новый Структура();
	ДанныеДокументаОснования.Вставить("Реквизиты", Реквизиты);
	ДанныеДокументаОснования.Вставить("Товары",	   Товары);
		
	Возврат ДанныеДокументаОснования;
	
КонецФункции

#КонецОбласти

#Область ДокументыОснования

Процедура ОчиститьЗначенияРеквизитовИСМПТВПервичномДокументе(Форма) Экспорт
	
	Если ЗначениеЗаполнено(Форма.СписокДокументовИСМПТ) Тогда
		Для Каждого ДокументИСМПТ Из Форма.СписокДокументовИСМПТ Цикл
			ОтсоединитьДокументИСМПТ(ДокументИСМПТ);
		КонецЦикла;
	ИначеЕсли ЗначениеЗаполнено(Форма.ДокументИСМПТ) Тогда
		ОтсоединитьДокументИСМПТ(Форма.ДокументИСМПТ);
	КонецЕсли;		
	
	Форма.ДокументИСМПТ = Неопределено;
	Форма.СписокДокументовИСМПТ = Неопределено;
	Форма.НадписьДокументИСМПТ = "";
	
КонецПроцедуры

Процедура ОтсоединитьДокументИСМПТ(ДокументИСМПТ)
	
	ДокументОбъект = ДокументИСМПТ.ПолучитьОбъект();
	ДокументОбъект.ДокументОснование = Неопределено;
	ДокументОбъект.Записать();
	
КонецПроцедуры

Функция ИмяГруппыДляВключенияИСМПТ(ДанныеФормы) Экспорт
	
	Если ДанныеФормы.Элементы.Найти("ГруппаПодвалЛевая") <> Неопределено Тогда
		Возврат "ГруппаПодвалЛевая";
	ИначеЕсли ДанныеФормы.Элементы.Найти("Подвал") <> Неопределено Тогда 
		Возврат "Подвал";
	ИначеЕсли ДанныеФормы.Элементы.Найти("ГруппаКомментарийАвтор") <> Неопределено Тогда 
		Возврат "ГруппаКомментарийАвтор";
	Иначе
		Возврат "ГруппаИнтеграция";
	КонецЕсли;
	
КонецФункции

Функция ИмяПослеГруппыИСМПТ(Форма, ГруппаДляВключенияМеню) Экспорт
	
	Если Форма.Элементы.Найти("ГруппаСсылкаНаЭДВС") <> Неопределено Тогда
		Возврат "ГруппаСсылкаНаЭДВС";
	ИначеЕсли Форма.Элементы.Найти("ГруппаПодвалДополнительно") <> Неопределено Тогда 
		Возврат "ГруппаПодвалДополнительно";
	ИначеЕсли Форма.Элементы.Найти("ГруппаДополнительноПодвал") <> Неопределено Тогда 
		Возврат "ГруппаДополнительноПодвал";
	ИначеЕсли Форма.Элементы.Найти("ГруппаПечатьДополнительно") <> Неопределено Тогда 
		Возврат "ГруппаПечатьДополнительно";
	ИначеЕсли Форма.Элементы.Найти("ГруппаКомментарийАвтор") <> Неопределено Тогда 
		Возврат "ГруппаКомментарийАвтор";
	Иначе
		Возврат "";
	КонецЕсли;
		
КонецФункции

Функция ПолучитьСтрануОтправленияВвозИзЕАЭС(Контрагент) Экспорт
	
	 ТекстЗапроса = "";
	 Если ТипЗнч(Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
	     ТекстЗапроса = "ВЫБРАТЬ
	     |	Контрагенты.СтранаРезидентства КАК СтранаРегистрации
	     |ИЗ
	     |	Справочник.Контрагенты КАК Контрагенты
	     |ГДЕ
	     |	Контрагенты.Ссылка = &Ссылка";
	 ИначеЕсли ТипЗнч(Контрагент) = Тип("СправочникСсылка.Организации") Тогда
	     ТекстЗапроса = "ВЫБРАТЬ
	     |	Организации.СтранаРегистрации КАК СтранаРегистрации
	     |ИЗ
	     |	Справочник.Организации КАК Организации
	     |ГДЕ
	     |	Организации.Ссылка = &Ссылка";
	 Иначе
	     Возврат Справочники.КлассификаторСтранМира.ПустаяСсылка();
	 КонецЕсли;
	 
	 Запрос = Новый Запрос();
	 Запрос.Текст = ТекстЗапроса;
	 Запрос.УстановитьПараметр("Ссылка", Контрагент);
	 
	 Выборка = Запрос.Выполнить().Выбрать();
	 Пока Выборка.Следующий() Цикл
	     Возврат Выборка.СтранаРегистрации;
	 КонецЦикла;
	 
	 Возврат Справочники.КлассификаторСтранМира.ПустаяСсылка();
		
КонецФункции

//С помощью данной функции можно скрывать в формах документов ИС МПТ и ИС ЦЭДМ группу Отражение в учете,
//если конфигурация не поддерживает ввод на основании для данного документа.
Функция ПроверитьВозможностьОтраженияДокументаВУчете(ИмяДокумента) Экспорт
	
	Если ИмяДокумента = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаАгрегацияВнеПроизводстваИСЦЭДМ() 
		Или ИмяДокумента = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаАгрегацияКодовМаркировкиСУЗИСМПТК()
		Или ИмяДокумента = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаОтчетОПередачеКИОтНерезидентаРКИСЦЭДМ() Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

#Область ПроверкаОснований

Функция ПроверитьДокументыОснованияПриСозданииИСМПТ(МассивДокументов, ТипДокумента, ЭтоВыборАПП = Ложь, ИмяКоманды = "") Экспорт
	
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	Если ТипДокумента = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		Если ЭтоВыборАПП Тогда
			//При установке связи Вход.АПП + ПТУ
			Возврат ПроверитьОснованияДокументаИСМПТОбщая("АктПриемаПередачи_ПТУ", МассивДокументов);
		Иначе
			Возврат ПроверитьОснованияДокументаИСМПТОбщая("ВвозТоваров", МассивДокументов);
		КонецЕсли;
		
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя")
		И ЭтоВыборАПП Тогда
		
		//При установке связи Вход.АПП + Возврат от клиента
		Возврат ПроверитьОснованияДокументаИСМПТОбщая("АктПриемаПередачи_Возврат", МассивДокументов);
		
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		//Из РТУ могут быть созданы 2 документа маркировки: АПП и Увед.о выводе из оборота (интернет-торговля).
		//Т.к. ограничения по виду опрерации РТУ у них одинаковые, проверяем общей проверкой.
		
		Возврат ПроверитьОснованияДокументаИСМПТОбщая("АктПриемаПередачиИсх_РТУ", МассивДокументов);
		
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
		
		//При создании АПП исход по Возврату поставщику
		Возврат ПроверитьОснованияДокументаИСМПТОбщая("АктПриемаПередачиИсх_Возврат", МассивДокументов);
		
	Иначе
		
		//Для Оприходования и Списания проверки не выполняем, т.к. там нет вида операции
		Возврат Новый Массив();
		
	КонецЕсли;
   	
КонецФункции

Функция ПроверитьОснованияЗаказКМ(МассивДокументов)
	
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	МассивДокументовПроверки = Новый Массив();
	Возврат МассивДокументовПроверки;
	///////////////////
	
КонецФункции

Функция ПроверитьОснованияАППИсходРеализация(МассивДокументов)
	
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	Возврат ПроверитьОснованияДокументаИСМПТОбщая("АктПриемаПередачиИсх_РТУ", МассивДокументов);
	///////////////////
	
КонецФункции

Функция ПроверитьОснованияАППИсходВозврат(МассивДокументов)
	
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	Возврат ПроверитьОснованияДокументаИСМПТОбщая("АктПриемаПередачиИсх_Возврат", МассивДокументов);
	///////////////////
	
КонецФункции

Функция ПроверитьОснованияВвозТоваров(МассивДокументов)
	
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	Возврат ПроверитьОснованияДокументаИСМПТОбщая("ВвозТоваров", МассивДокументов);
	///////////////////
	
КонецФункции

Функция ПроверитьОснованияАППВходПоПТУ(МассивДокументов)
	
	Возврат ПроверитьОснованияДокументаИСМПТОбщая("АктПриемаПередачи_ПТУ", МассивДокументов);
	
КонецФункции

Функция ПроверитьОснованияАППВходПоВозврату(МассивДокументов)
	
	Возврат ПроверитьОснованияДокументаИСМПТОбщая("АктПриемаПередачи_Возврат", МассивДокументов);
	
КонецФункции

Функция ПроверитьОснованияДокументаИСМПТОбщая(ИмяДокументаИСМПТ, МассивДокументов)
	
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	ТекстЗапросаНачало = 	
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДокументИСМПТ.Ссылка КАК Ссылка
	|ИЗ
	|";
	
	ТекстЗапросаИсточник = "";
	Если ИмяДокументаИСМПТ = "АктПриемаПередачиИсх_РТУ" Тогда
		ТекстЗапросаИсточник = "Документ.РеализацияТоваровУслуг КАК ДокументИСМПТ
		|";
	ИначеЕсли ИмяДокументаИСМПТ = "АктПриемаПередачиИсх_Возврат" Тогда 
		ТекстЗапросаИсточник = "Документ.ВозвратТоваровПоставщику КАК ДокументИСМПТ
		|";
	ИначеЕсли ИмяДокументаИСМПТ = "АктПриемаПередачи_Возврат" Тогда 
		ТекстЗапросаИсточник = "Документ.ВозвратТоваровОтПокупателя КАК ДокументИСМПТ
		|";
	ИначеЕсли ИмяДокументаИСМПТ = "ВвозТоваров" 
		Или ИмяДокументаИСМПТ = "АктПриемаПередачи_ПТУ" Тогда 
		ТекстЗапросаИсточник = "Документ.ПоступлениеТоваровУслуг КАК ДокументИСМПТ
		|";
	КонецЕсли;
	
	ТекстЗапросаУсловия = "";
	Если ИмяДокументаИСМПТ = "АктПриемаПередачиИсх_РТУ" Тогда
		ТекстЗапросаУсловия = "ГДЕ
		|	ДокументИСМПТ.Ссылка В(&Основание)
		|	И НЕ(ДокументИСМПТ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРеализацияТоваров.ПродажаКомиссия)
		|			ИЛИ ДокументИСМПТ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРеализацияТоваров.Товары)
		|			ИЛИ ДокументИСМПТ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРеализацияТоваров.ПередачаСтруктурномуПодразделению))";
		
	ИначеЕсли ИмяДокументаИСМПТ = "АктПриемаПередачиИсх_Возврат" Тогда
		ТекстЗапросаУсловия = "ГДЕ
		|	ДокументИСМПТ.Ссылка В(&Основание)
		|	И НЕ(ДокументИСМПТ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВозвратТоваровПоставщику.Покупка))";
		
	ИначеЕсли ИмяДокументаИСМПТ = "АктПриемаПередачи_Возврат" Тогда
		ТекстЗапросаУсловия = "ГДЕ
		|	ДокументИСМПТ.Ссылка В(&Основание)
		|	И НЕ(ДокументИСМПТ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВозвратТоваровОтПокупателя.ВозвратТоваров))";
		
	ИначеЕсли ИмяДокументаИСМПТ = "АктПриемаПередачи_ПТУ" Тогда
		ТекстЗапросаУсловия = "ГДЕ
		|	ДокументИСМПТ.Ссылка В(&Основание)
		|	И НЕ(ДокументИСМПТ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомисия)
		|				ИЛИ ДокументИСМПТ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеТоваровУслуг.Товары)
		|				ИЛИ ДокументИСМПТ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеТоваровУслуг.ОтСтруктурногоПодразделения))";
		
	ИначеЕсли ИмяДокументаИСМПТ = "ВвозТоваров" Тогда
		ТекстЗапросаУсловия = "ГДЕ
		|	ДокументИСМПТ.Ссылка В(&Основание)
		|	И НЕ(ДокументИСМПТ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеТоваровУслуг.Импорт))";
	КонецЕсли;
	
	ТекстЗапросаОбщий = ТекстЗапросаНачало + ТекстЗапросаИсточник + ТекстЗапросаУсловия;
	
	МассивДокументовПроверки = Новый Массив();
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаОбщий;
	Запрос.УстановитьПараметр("Основание", МассивДокументов);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		МассивДокументовПроверки.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат МассивДокументовПроверки;
	
КонецФункции

Функция ПроверитьВидВвозаИзОснованияПТУ(ПТУ) Экспорт
	
	Если ПТУ.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.Импорт") Тогда
		Возврат ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОВвозеИзЕАЭСИСМПТК();
	КонецЕсли;
		
КонецФункции

#КонецОбласти

#Область СсылкаНаИСМПТ

Процедура ОбновитьРеквизитыИСМПТ(ДанныеФормы, РеквизитНадписьИСМПТ = "НадписьДокументИСМПТ", ТребуетсяИСМПТ = Истина, ГруппаДляВключенияМеню = Неопределено, ПослеГруппы = "") Экспорт
	
	Если ПолучитьДанныеИСМПТ(ДанныеФормы, ГруппаДляВключенияМеню, ПослеГруппы) Тогда 
		ЗаполнитьТекстПроИСМПТ(ДанныеФормы, РеквизитНадписьИСМПТ, ТребуетсяИСМПТ);
		УправлениеГруппойИСМПТ(ДанныеФормы, ТребуетсяИСМПТ);
	КонецЕсли;	
	
КонецПроцедуры

Функция ПолучитьДанныеИСМПТ(ДанныеФормы, ГруппаДляВключенияМеню, ПослеГруппы = "") Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ВестиУчетМаркируемойПродукцииИСМПТК") Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	//1.Создаем элементы маркировки на форме документа-основания
	Если ДанныеФормы.Элементы.Найти("НадписьДокументИСМПТ") = Неопределено Тогда
		Если ГруппаДляВключенияМеню = Неопределено 
			И НЕ ДанныеФормы.Элементы.Найти("ГруппаПрочиеЭлектронныеДокументы") = Неопределено Тогда
			//Используем группу формы по умолчанию
			СоздатьЭлементыФормыДляВводаИСМПТ(ДанныеФормы, "ГруппаПрочиеЭлектронныеДокументы", ПослеГруппы);
		ИначеЕсли Не ГруппаДляВключенияМеню = Неопределено Тогда
			//Размещаем элементы в группе типовой формы
			СоздатьЭлементыФормыДляВводаИСМПТ(ДанныеФормы, ГруппаДляВключенияМеню, ПослеГруппы);
		Иначе
			ТекстОшибки = НСтр("ru='Невозможно разместить элементы подсистемы ИС МПТ на форме документа, т.к. не назначена группа формы для включения!'");
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстОшибки);
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	//2. Заполняем созданные реквизиты
	ДокументОснование = ДанныеФормы.Объект.Ссылка; 
	
	//Находим ссылки на связанные документы маркировки
	Если ЗначениеЗаполнено(ДанныеФормы.ДокументИСМПТСсылка) Тогда
		ДокументИСМПТСсылка = ДанныеФормы.ДокументИСМПТСсылка;
	Иначе
		СвязанныеДокументыМаркировки = ПроверитьНаличиеСвязанногоДокументаИСМПТ(ДанныеФормы.Объект.Ссылка, Истина);
		
		Если ТипЗнч(СвязанныеДокументыМаркировки) <> Тип("СписокЗначений") И СвязанныеДокументыМаркировки <> Неопределено Тогда //Связанный документ прямая ссылка на документ
			
			ДокументИСМПТСсылка = СвязанныеДокументыМаркировки.Ссылка;
			
		ИначеЕсли ТипЗнч(СвязанныеДокументыМаркировки) = Тип("СписокЗначений") И СвязанныеДокументыМаркировки.Количество() = 1 Тогда
			
			ДокументИСМПТСсылка = СвязанныеДокументыМаркировки[0].Значение;
			
		ИначеЕсли ТипЗнч(СвязанныеДокументыМаркировки) = Тип("СписокЗначений") И СвязанныеДокументыМаркировки.Количество()> 1 Тогда
			
			Если ДанныеФормы.СписокДокументыИСМПТСсылка.Количество() = 0 Тогда
				Для Каждого СтрокаТаблицыИсточник Из СвязанныеДокументыМаркировки Цикл
					ЗаполнитьЗначенияСвойств(ДанныеФормы.СписокДокументыИСМПТСсылка.Добавить(), СтрокаТаблицыИсточник);
				КонецЦикла;
			КонецЕсли;
			
		Иначе 
			
			//Если не нашлось связанных документов
			ДокументИСМПТСсылка = Неопределено;
			ДанныеФормы.СписокДокументыИСМПТСсылка.Очистить();
			
		КонецЕсли;
		
	КонецЕсли;
	
	ДанныеДокументаИСМПТ = Неопределено;
	
	Если ЗначениеЗаполнено(ДокументИСМПТСсылка) Тогда
		
		РеквизитыИСМПТ = Новый Структура("Ссылка, Дата, ПометкаУдаления", ДокументИСМПТСсылка, '00010101', Ложь);
		
		ЗначенияРеквизитов = ОбщегоНазначенияИСМПТК.ЗначенияРеквизитовОбъекта(ДокументИСМПТСсылка, "Дата, ПометкаУдаления");
		ЗаполнитьЗначенияСвойств(РеквизитыИСМПТ, ЗначенияРеквизитов);
		
		ТекстИСМПТ  = ПолучитьТекстИСМПТ(РеквизитыИСМПТ);
		
		ДанныеДокументаИСМПТ = Новый Структура("ИСМПТ, ТекстИСМПТ, ПометкаУдаления", ДокументИСМПТСсылка, ТекстИСМПТ, РеквизитыИСМПТ.ПометкаУдаления);
		ДанныеФормы.ДокументИСМПТСсылка  = ДокументИСМПТСсылка;
		ДанныеФормы.ДанныеДокументаИСМПТ = ДанныеДокументаИСМПТ;
		
	ИначеЕсли ДанныеФормы.СписокДокументыИСМПТСсылка.Количество() <> 0 Тогда
		
		СписокСсылокИСМПТ = Новый СписокЗначений;
		
		Для каждого СсылкаИСМПТ Из ДанныеФормы.СписокДокументыИСМПТСсылка Цикл
			
			РеквизитыИСМПТ 	   = Новый Структура("Ссылка, Дата, ПометкаУдаления", СсылкаИСМПТ.Значение, '00010101', Ложь);
			ЗначенияРеквизитов = ОбщегоНазначенияИСМПТК.ЗначенияРеквизитовОбъекта(СсылкаИСМПТ.Значение, "Дата, ПометкаУдаления");
			ЗаполнитьЗначенияСвойств(РеквизитыИСМПТ, ЗначенияРеквизитов);
			
			СписокСсылокИСМПТ.Добавить(РеквизитыИСМПТ);
			
		КонецЦикла; 
		
		ТекстИСМПТ = ПолучитьТекстИСМПТ(СписокСсылокИСМПТ);
		
		Если СписокСсылокИСМПТ.Количество() <> 0 Тогда
			
			СписокДокументыИСМПТСсылка = Новый СписокЗначений;
			
			Для каждого Ссылки Из СписокСсылокИСМПТ Цикл
				СсылкаИСМПТ = Ссылки.Значение.Ссылка;
				СписокДокументыИСМПТСсылка.Добавить(СсылкаИСМПТ);
			КонецЦикла; 
			
			ДанныеДокументаИСМПТ = Новый Структура("ИСМПТ, ТекстИСМПТ, ПометкаУдаления", СписокДокументыИСМПТСсылка, ТекстИСМПТ, РеквизитыИСМПТ.ПометкаУдаления);
			ДанныеФормы.СписокДокументыИСМПТСсылка = СписокДокументыИСМПТСсылка;
			ДанныеФормы.ДанныеДокументаИСМПТ = ДанныеДокументаИСМПТ;
			
		КонецЕсли;
	Иначе
		ДанныеФормы.ДокументИСМПТСсылка  = ДокументИСМПТСсылка;
		ДанныеФормы.ДанныеДокументаИСМПТ = ДанныеДокументаИСМПТ;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ПолучитьТекстИСМПТ(ДанныеДокументовИСМПТ) Экспорт
	
	Если ТипЗнч(ДанныеДокументовИСМПТ) = Тип("СписокЗначений") Тогда
		
		НадписьКоличествоИСМПТ = НСтр("ru='Всего документов ИС МПТ: (%КоличествоДокументов%)'");
		Текст = СтрЗаменить(НадписьКоличествоИСМПТ, "%КоличествоДокументов%", ДанныеДокументовИСМПТ.Количество());
		
	Иначе
		
		ДокументИСМПТ = ?(ДанныеДокументовИСМПТ.Свойство("Ссылка"), ДанныеДокументовИСМПТ.Ссылка, Неопределено);
		Если Не ДокументИСМПТ = Неопределено Тогда
			ПредставлениеДокумента = Строка(ДокументИСМПТ);
		Иначе
			ПредставлениеДокумента = "";
		КонецЕсли;
		
		ДополнительныйТекст = "";
		Если ДанныеДокументовИСМПТ.ПометкаУдаления Тогда
			ДополнительныйТекст = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияПомеченНаУдаление();
		КонецЕсли;
		
		Текст = ПредставлениеДокумента + ДополнительныйТекст;
		
	КонецЕсли;
	
	Возврат Текст;
	
КонецФункции 

Процедура ЗаполнитьТекстПроИСМПТ(Форма, РеквизитНадписьИСМПТ = "НадписьДокументИСМПТ", ТребуетсяИСМПТ = Истина) Экспорт
	
	ДанныеДокументаИСМПТ = Форма.ДанныеДокументаИСМПТ;
	
	Если ТребуетсяИСМПТ И ДанныеДокументаИСМПТ = Неопределено Тогда
		Форма[РеквизитНадписьИСМПТ] = "";
		Возврат;
	КонецЕсли;
	
	Если НЕ ТребуетсяИСМПТ Тогда
		Форма[РеквизитНадписьИСМПТ] = НСтр("ru='Не требуется'");
		Форма.Элементы[РеквизитНадписьИСМПТ].ЦветТекста = Новый Цвет(51, 51, 51); // текст формы
	Иначе
		Форма[РеквизитНадписьИСМПТ] = ДанныеДокументаИСМПТ.ТекстИСМПТ;
		
		Если ТребуетсяИСМПТ И (ДанныеДокументаИСМПТ.ПометкаУдаления) Тогда
			Форма.Элементы[РеквизитНадписьИСМПТ].ЦветТекста = Новый Цвет(255, 0, 0);  // красный
			
		ИначеЕсли ТипЗнч(ДанныеДокументаИСМПТ.ИСМПТ) = Тип("СписокЗначений") Тогда
			//Если связанных документов несколько, их состояние может быть разным. 
			//Поэтому выводим общую ссылку в нейтральном цвете.
			Форма.Элементы[РеквизитНадписьИСМПТ].ЦветТекста = Новый Цвет(51, 51, 51); // текст формы
			
		ИначеЕсли (Не ТипЗнч(ДанныеДокументаИСМПТ.ИСМПТ) = Тип("ДокументСсылка.ЗаказКодовМаркировкиСУЗИСМПТК")
			И Не ТипЗнч(ДанныеДокументаИСМПТ.ИСМПТ) = Тип("ДокументСсылка.НанесениеКодовМаркировкиСУЗИСМПТК")
			И Не ТипЗнч(ДанныеДокументаИСМПТ.ИСМПТ) = Тип("ДокументСсылка.АгрегацияКодовМаркировкиСУЗИСМПТК")
			И Не ТипЗнч(ДанныеДокументаИСМПТ.ИСМПТ) = Тип("ДокументСсылка.УведомлениеОбОтгрузкеЕАЭСИСМПТК")
			И Не ТипЗнч(ДанныеДокументаИСМПТ.ИСМПТ) = Тип("ДокументСсылка.УведомлениеОПриемкеЕАЭСИСМПТК"))
			И Не ЗначениеЗаполнено(ДанныеДокументаИСМПТ.ИСМПТ.НомерИСМПТ) Тогда
			
			//Документ не отправлен на сервер ИС МПТ
			Форма.Элементы[РеквизитНадписьИСМПТ].ЦветТекста = Новый Цвет(51, 51, 51); // текст формы
			
		ИначеЕсли (ТипЗнч(ДанныеДокументаИСМПТ.ИСМПТ) = Тип("ДокументСсылка.ЗаказКодовМаркировкиСУЗИСМПТК")
			Или ТипЗнч(ДанныеДокументаИСМПТ.ИСМПТ) = Тип("ДокументСсылка.АгрегацияКодовМаркировкиСУЗИСМПТК")
			Или ТипЗнч(ДанныеДокументаИСМПТ.ИСМПТ) = Тип("ДокументСсылка.НанесениеКодовМаркировкиСУЗИСМПТК"))
			И Не ЗначениеЗаполнено(ДанныеДокументаИСМПТ.ИСМПТ.OrderID) Тогда
			Форма.Элементы[РеквизитНадписьИСМПТ].ЦветТекста = Новый Цвет(51, 51, 51); // текст формы
		Иначе
			Форма.Элементы[РеквизитНадписьИСМПТ].ЦветТекста = Новый Цвет(0, 100, 0); // зеленый
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УправлениеГруппойИСМПТ(Форма, ТребуетсяИСМПТ = Истина) Экспорт
	
	Элементы = Форма.Элементы;
	
	Если ТребуетсяИСМПТ И (ЗначениеЗаполнено(Форма.СписокДокументыИСМПТСсылка) ИЛИ ЗначениеЗаполнено(Форма.ДокументИСМПТСсылка)) Тогда
		Элементы.ГруппаИСМПТ.ТекущаяСтраница = Элементы.ГруппаСсылкаИСМПТ;
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьЭлементыФормыДляВводаИСМПТ(Форма, ГруппаДляВключенияМеню, ПослеГруппы = "") Экспорт
	
	ДокументИсточник = Форма.Объект.Ссылка;
	СвойстваДокументИСМПТ = СформироватьСвойстваДокументаИСМПТ(ДокументИсточник);
	Если СвойстваДокументИСМПТ.ОписаниеТиповДокументИСМПТ = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	//Подготовим описание необходимых реквизитов маркировки
	ДобавляемыеРеквизиты = Новый Массив;
	
	//Реквизит-представление ссылки документа маркировки на форме
	НовыйРеквизитНадписиДокументаИСМПТ = Новый РеквизитФормы("НадписьДокументИСМПТ", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(500))); 
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизитНадписиДокументаИСМПТ);
	
	//Реквизит для хранения данных документа маркировки
	НовыйРеквизитДанныеДокументаИСМПТ = Новый РеквизитФормы("ДанныеДокументаИСМПТ", Новый ОписаниеТипов());
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизитДанныеДокументаИСМПТ);
	
	//Реквизит, хранящий ссылку на связанный документ маркировки
	НовыйРеквизитДокументМаркировка = Новый РеквизитФормы("ДокументИСМПТСсылка", СвойстваДокументИСМПТ.ОписаниеТиповДокументИСМПТ);
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизитДокументМаркировка);
	
	//Реквизит, хранящий список ссылок, если связанных документов маркировки несколько
	НовыйРеквизитСписокДокументовМаркировки = Новый РеквизитФормы("СписокДокументыИСМПТСсылка", Новый ОписаниеТипов("СписокЗначений"));
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизитСписокДокументовМаркировки);
	
	//Создаем реквизиты по описанию на типовой форме
	Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	Если ЗначениеЗаполнено(ПослеГруппы) Тогда
		//Создадим группу страниц для работы с ИСМПТ
		ГруппаИСМПТ = Форма.Элементы.Вставить("ГруппаИСМПТ", Тип("ГруппаФормы"),, Форма.Элементы[ПослеГруппы]);
		ГруппаИСМПТ.Вид = ВидГруппыФормы.Страницы;
		ГруппаИСМПТ.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	Иначе 
		//Получим группу в котороую встроим элементы
		ПодменюРазмещения = Форма.Элементы[ГруппаДляВключенияМеню];
		//Создадим группу страниц для работы с ИСМПТ
		ГруппаИСМПТ = Форма.Элементы.Добавить("ГруппаИСМПТ", Тип("ГруппаФормы"), ПодменюРазмещения);
		ГруппаИСМПТ.Вид = ВидГруппыФормы.Страницы;
		ГруппаИСМПТ.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	КонецЕсли;
	
	//Создадим страницу ссылки ИСМПТ
	ГруппаСсылкаИСМПТ = Форма.Элементы.Добавить("ГруппаСсылкаИСМПТ", Тип("ГруппаФормы"), ГруппаИСМПТ);
	ГруппаСсылкаИСМПТ.Вид = ВидГруппыФормы.Страница;
	
	ПолеНадписиИСМПТ = Форма.Элементы.Добавить("НадписьДокументИСМПТ", Тип("ПолеФормы"), ГруппаСсылкаИСМПТ);
	ПолеНадписиИСМПТ.Вид = ВидПоляФормы.ПолеНадписи;
	ПолеНадписиИСМПТ.Гиперссылка = Истина;
	ПолеНадписиИСМПТ.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	ПолеНадписиИСМПТ.ПутьКДанным = "НадписьДокументИСМПТ";
	
	ПолеНадписиИСМПТ.УстановитьДействие("Нажатие", "НадписьИСМПТНажатие");
	
КонецПроцедуры

#КонецОбласти

#Область ВводНаОснованииИСМПТК

Функция ПолучитьИмяТЧТовары(Документ) Экспорт
	
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.ТребованиеНакладная") Тогда
		Возврат "Материалы";
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументОбъект.ТребованиеНакладная") Тогда
		Возврат "Материалы";
	Иначе
		Возврат "Товары";
	КонецЕсли;
			
КонецФункции

Функция ПолучитьПараметрыОткрытияФормыВыбораАПП(ДокументОбъект, ПараметрыОткрытия) Экспорт
	
	Отборы = Новый Структура;
	Отборы.Вставить("Организация", ДокументОбъект.Организация);
	Отборы.Вставить("Контрагент",  ДокументОбъект.Контрагент);
	Отборы.Вставить("Направление", ПредопределенноеЗначение("Перечисление.НаправленияДокументовИСМПТК.Входящий"));
	
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	///////////////////
	
	Отборы.Вставить("ПометкаУдаления", Ложь);
	Отборы.Вставить("ДокументОснование", Неопределено);
	
	ПараметрыОткрытия.Вставить("Отбор", Отборы);
	
	Возврат ПараметрыОткрытия;
	
КонецФункции

Функция ВключатьТаблицуМарок(Основание) Экспорт
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.УведомлениеОРасхожденииИСМПТК") 
		ИЛИ ТипЗнч(Основание) = Тип("ДокументСсылка.АктПриемаПередачиИСМПТК")
		ИЛИ ТипЗнч(Основание) = Тип("ДокументСсылка.УведомлениеОбОтгрузкеЕАЭСИСМПТК") Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Процедура ЗаполнитьМассивПервичныхДокументов_Общая(ЭлементМассива, СписокПервичныхДокументов, Отказ, ФормироватьСписокДокументов, ПроводитьСозданныеДокументы, ТипСоздаваемогоДокумента, ЗаписьПрошлаУспешно) Экспорт
	
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	ДокументИС = ЭлементМассива.Реквизиты[0].ДокументОснование;
	
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	ТипОперацииСоздаваемогоДокумента = "";
			
    СписокВидовДоговоров = Новый Массив;
    СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.Прочее);
	
	ВвозИмпорт = Ложь;
	Если ТипСоздаваемогоДокумента = "ПоступлениеТоваровУслуг" Тогда
		
		СозданныйДокумент = Документы.ПоступлениеТоваровУслуг.СоздатьДокумент();
		ЗаполнитьЗначенияСвойств(СозданныйДокумент, ЭлементМассива.Реквизиты[0]);
				
		СозданныйДокумент.ВалютаДокумента = ВалютаРегламентированногоУчета;
		СозданныйДокумент.КурсВзаиморасчетов = 1;
		СозданныйДокумент.КратностьВзаиморасчетов = 1;

		Если ТипЗнч(ДокументИС) = Тип("ДокументСсылка.УведомлениеОВвозеИзЕАЭСИСЦЭДМ") Тогда
			СозданныйДокумент.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.Импорт");
		ИначеЕсли ТипЗнч(ДокументИС) = Тип("ДокументСсылка.УведомлениеОВвозеИзТретьихСтранИСЦЭДМ") Тогда
			СозданныйДокумент.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.Импорт");
		ИначеЕсли ТипЗнч(ДокументИС) = Тип("ДокументСсылка.УведомлениеОВвозеИзЕАЭСИСМПТК") Тогда
			СозданныйДокумент.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.Импорт");
		ИначеЕсли ТипЗнч(ДокументИС) = Тип("ДокументСсылка.УведомлениеОВвозеИзТретьихСтранИСМПТК") Тогда
			СозданныйДокумент.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.Импорт");
		Иначе
			СозданныйДокумент.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.Товары");
		КонецЕсли;
		
	    СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
		
	ИначеЕсли ТипСоздаваемогоДокумента = "ВозвратТоваровОтПокупателя" Тогда
		
		СозданныйДокумент = Документы.ВозвратТоваровОтПокупателя.СоздатьДокумент();
		ЗаполнитьЗначенияСвойств(СозданныйДокумент, ЭлементМассива.Реквизиты[0]);
		
		СозданныйДокумент.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВозвратТоваровОтПокупателя.ВозвратТоваров");
		СозданныйДокумент.ВалютаДокумента = ВалютаРегламентированногоУчета;
		СозданныйДокумент.КурсВзаиморасчетов = 1;
		СозданныйДокумент.КратностьВзаиморасчетов = 1;
		ТипОперацииСоздаваемогоДокумента = "Продажа";
				
	    СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
		
	ИначеЕсли ТипСоздаваемогоДокумента = "РеализацияТоваровУслуг" Тогда
		
		СозданныйДокумент = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
		ЗаполнитьЗначенияСвойств(СозданныйДокумент, ЭлементМассива.Реквизиты[0]);
						
		СозданныйДокумент.ВалютаДокумента = ВалютаРегламентированногоУчета;
		СозданныйДокумент.КурсВзаиморасчетов = 1;
		СозданныйДокумент.КратностьВзаиморасчетов = 1;
		СозданныйДокумент.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРеализацияТоваров.Товары");
		СозданныйДокумент.СпособВыпискиАктовВыполненныхРабот = ПредопределенноеЗначение("Перечисление.СпособыВыпискиАктовВыполненныхРабот.ВБумажномВиде");
		
	    СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
		
	ИначеЕсли ТипСоздаваемогоДокумента = "ВозвратТоваровПоставщику" Тогда
		
		СозданныйДокумент = Документы.ВозвратТоваровПоставщику.СоздатьДокумент();
		ЗаполнитьЗначенияСвойств(СозданныйДокумент, ЭлементМассива.Реквизиты[0]);
		
		СозданныйДокумент.ВалютаДокумента = ВалютаРегламентированногоУчета;
		СозданныйДокумент.КурсВзаиморасчетов = 1;
		СозданныйДокумент.КратностьВзаиморасчетов = 1;
		СозданныйДокумент.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВозвратТоваровПоставщику.Покупка");				
		
	    СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
		
	ИначеЕсли ТипСоздаваемогоДокумента = "ОприходованиеТоваров" Тогда
		
		СозданныйДокумент = Документы.ОприходованиеТоваров.СоздатьДокумент();
		ЗаполнитьЗначенияСвойств(СозданныйДокумент, ЭлементМассива.Реквизиты[0]);
		
	ИначеЕсли ТипСоздаваемогоДокумента = "СписаниеТоваров" Тогда
		
		СозданныйДокумент = Документы.СписаниеТоваров.СоздатьДокумент();
		ЗаполнитьЗначенияСвойств(СозданныйДокумент, ЭлементМассива.Реквизиты[0]);
		
	ИначеЕсли ТипСоздаваемогоДокумента = "ТребованиеНакладная" Тогда
		
		СозданныйДокумент = Документы.ТребованиеНакладная.СоздатьДокумент();
		ЗаполнитьЗначенияСвойств(СозданныйДокумент, ЭлементМассива.Реквизиты[0]);
		
	ИначеЕсли ТипСоздаваемогоДокумента = "ПеремещениеТоваров" Тогда
		
		СозданныйДокумент = Документы.ПеремещениеТоваров.СоздатьДокумент();
		ЗаполнитьЗначенияСвойств(СозданныйДокумент, ЭлементМассива.Реквизиты[0]);

	Иначе
		ТекстСообщения = НСтр("ru = 'При создании документа произошла ошибка: тип документа не определен.'");
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(СозданныйДокумент, ВалютаРегламентированногоУчета, ТипОперацииСоздаваемогоДокумента);
	
	МетаданныеПервичногоДокумента = СозданныйДокумент.Метаданные();
	Если ОбщегоНазначенияБК.ЕстьРеквизитДокумента("ДоговорКонтрагента", МетаданныеПервичногоДокумента) Тогда
		
		СтруктураПараметровДляПолученияДоговора = Новый Структура;
		СтруктураПараметровДляПолученияДоговора.Вставить("СписокДопустимыхВидовДоговоров", СписокВидовДоговоров);
		СтруктураПараметровДляПолученияДоговора.Вставить("ВалютаВзаиморасчетовДоговора"  , СозданныйДокумент.ВалютаДокумента);
		
		ДоговорКонтрагента = ЗаполнениеДокументов.ПолучитьДоговорПоОрганизацииИКонтрагенту(
			СозданныйДокумент.Организация, СозданныйДокумент.Контрагент, СтруктураПараметровДляПолученияДоговора);
			
		Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
			СозданныйДокумент.ДоговорКонтрагента = ДоговорКонтрагента;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОбщегоНазначенияБК.ЕстьРеквизитДокумента("Склад", МетаданныеПервичногоДокумента)
	   И (НЕ ЗначениеЗаполнено(СозданныйДокумент.Склад)) Тогда
		СозданныйДокумент.Склад = ПользователиБКВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию(Пользователи.ТекущийПользователь(), "ОсновнойСклад");
	КонецЕсли;
	
	//Заполняем табличную часть "Товары"
	ИмяТЧТовары = ПолучитьИмяТЧТовары(СозданныйДокумент);
	ЕстьСтавкаНДС = ОбщегоНазначенияБК.ЕстьРеквизитТабЧастиДокумента("СтавкаНДС", МетаданныеПервичногоДокумента, ИмяТЧТовары);
	ОсновнаяСтавкаНДС = ПользователиБКВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию(Пользователи.ТекущийПользователь(), "ОсновнаяСтавкаНДС");
	Для Каждого СтрокаТЧ Из ЭлементМассива.Товары Цикл
		
		НоваяСтрокаТЧ = СозданныйДокумент[ИмяТЧТовары].Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТЧ, СтрокаТЧ);
		
		Если ЕстьСтавкаНДС И НЕ ЗначениеЗаполнено(НоваяСтрокаТЧ.СтавкаНДС) Тогда
			Если ЗначениеЗаполнено(ОсновнаяСтавкаНДС) Тогда
				НоваяСтрокаТЧ.СтавкаНДС = ОсновнаяСтавкаНДС;
			Иначе
				НоваяСтрокаТЧ.СтавкаНДС = НоваяСтрокаТЧ.Номенклатура.СтавкаНДС;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;	
	
	Если НЕ ТипСоздаваемогоДокумента = "ТребованиеНакладная" Тогда
		СчетаУчетаВДокументах.ЗаполнитьПередОтображениемПользователю(СозданныйДокумент);
	КонецЕсли;
	
	Попытка 
		СозданныйДокумент.Записать(РежимЗаписиДокумента.Запись);
	Исключение
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаПриЗаписиДокументаСПараметром()
					   + Символы.ПС
				 	   + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
		ТекстСообщения = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, СозданныйДокумент);
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		ЗаписьПрошлаУспешно = Ложь;
		Возврат;
	КонецПопытки;
	
	Если ПроводитьСозданныеДокументы Тогда  
		
		Попытка 
			СозданныйДокумент.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			Отказ = Истина;
		КонецПопытки;
		
		Если Отказ Тогда
			ТекстСообщения = НСтр("ru = 'При проведении документа ""%1"" произошла ошибка. Выполнение ввода документов прервано.'");
			ТекстСообщения = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, СозданныйДокумент);
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
			ЗаписьПрошлаУспешно = Ложь;
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Попытка
		Если ЗначениеЗаполнено(ДокументИС) Тогда
			
			ДокументИСМПТОбъект = ДокументИС.ПолучитьОбъект();
			ДокументИСМПТОбъект.ДокументОснование = СозданныйДокумент.Ссылка;
			ДокументИСМПТОбъект.Записать(РежимЗаписиДокумента.Запись);
			
		КонецЕсли;
	Исключение
		
		ТекстСообщения = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(
						НСтр("ru='Ошибка при записи документа %1: %2.'"),
						ЭлементМассива.ДокументОснование,
						ИнформацияОбОшибке().Описание);
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		ЗаписьПрошлаУспешно = Ложь;
		
	КонецПопытки;
	
	Если ФормироватьСписокДокументов И ЗаписьПрошлаУспешно Тогда
		СписокПервичныхДокументов.Добавить(СозданныйДокумент.Ссылка);
	КонецЕсли;		
		
КонецПроцедуры

Функция ПолучитьМассивТиповДокументовМаркировки();
	
	МассивДокументовМаркировки = Новый Массив();
	//ИС МПТ
	МассивДокументовМаркировки.Добавить(Тип("ДокументСсылка.АктПриемаПередачиИСМПТК"));
	МассивДокументовМаркировки.Добавить(Тип("ДокументСсылка.УведомлениеОВводеВОборотИСМПТК"));
	МассивДокументовМаркировки.Добавить(Тип("ДокументСсылка.УведомлениеОВыводеИзОборотаИСМПТК"));
	МассивДокументовМаркировки.Добавить(Тип("ДокументСсылка.УведомлениеОВвозеИзЕАЭСИСМПТК"));
	МассивДокументовМаркировки.Добавить(Тип("ДокументСсылка.УведомлениеОВвозеИзТретьихСтранИСМПТК"));
	МассивДокументовМаркировки.Добавить(Тип("ДокументСсылка.УведомлениеОбЭкспортеЕАЭСИСМПТК"));
	МассивДокументовМаркировки.Добавить(Тип("ДокументСсылка.УведомлениеОПриемкеЕАЭСИСМПТК")); 
	//СУЗ
	МассивДокументовМаркировки.Добавить(Тип("ДокументСсылка.ЗаказКодовМаркировкиСУЗИСМПТК"));
	
	Возврат МассивДокументовМаркировки;
	
КонецФункции

Функция СформироватьСвойстваДокументаИСМПТ(ДокументИсточник, ВидОперацииВФорме = Неопределено) Экспорт
	
	МассивДокументовМаркировки = ПолучитьМассивТиповДокументовМаркировки();	
	СвойстваДокументИСМПТ = Новый Структура();
	СвойстваДокументИСМПТ.Вставить("ОписаниеТиповДокументИСМПТ", Новый ОписаниеТипов(МассивДокументовМаркировки));
	СвойстваДокументИСМПТ.Вставить("ПредставлениеСоздатьДокументИСМПТ", НСтр("ru = 'Ввести новый документ маркировки (ИС МПТ)'"));
	
	Возврат СвойстваДокументИСМПТ;
	
КонецФункции

Функция ПолучитьПустуюСсылкуДокументИСМПТПоОснованию(ДокументОснование, ИмяДокумента = Неопределено) Экспорт
	
	МассивДокументовМаркировки = ПолучитьМассивТиповДокументовМаркировки();	
	Возврат Новый ОписаниеТипов(МассивДокументовМаркировки);
	
КонецФункции

Функция ПроверитьИмяДокументаПриСозданииЭлементовФормыДляВводаДокументаИСМПТ(ИмяФормы) Экспорт
	
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	Возврат ?(СтрНайти(ИмяФормы, "ПоступлениеТоваровУслуг") <> 0, Истина, Ложь);
	///////////////////
	
КонецФункции

Функция ПроверитьНаличиеМаркируемогоТовара(ВыбранноеЗначение) Экспорт
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("ДокументСсылка.РеализацияТоваровУслуг")
		ИЛИ ТипЗнч(ВыбранноеЗначение) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя")
		ИЛИ ТипЗнч(ВыбранноеЗначение) = Тип("ДокументСсылка.ОприходованиеТоваров")
		ИЛИ ТипЗнч(ВыбранноеЗначение) = Тип("ДокументСсылка.СписаниеТоваров")
		ИЛИ ТипЗнч(ВыбранноеЗначение) = Тип("ДокументСсылка.ТребованиеНакладная")
		ИЛИ ТипЗнч(ВыбранноеЗначение) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") 
		ИЛИ ТипЗнч(ВыбранноеЗначение) = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
		
		//ИС МПТ
		ВДокументеЕстьМаркируемаяПродукция = ПроверитьТоварыОбщийЗапросИСМПТ(ВыбранноеЗначение);
		
	Иначе
		ВДокументеЕстьМаркируемаяПродукция = Ложь;
	КонецЕсли;	
	
	Возврат ВДокументеЕстьМаркируемаяПродукция;
	
КонецФункции

Функция ПроверитьТоварыОбщийЗапросИСМПТ(ДокументДляПроверки)
	
	//Для ИС МПТ - все ТГ, кроме Фармы
	Запрос = Новый Запрос();
	Текст = "ВЫБРАТЬ
	|	ДокументПроверки.Номенклатура КАК Номенклатура
	|ИЗ
	|	Документ." + ДокументДляПроверки.Ссылка.Метаданные().Имя + ".Товары КАК ДокументПроверки
	|ГДЕ
	|	ДокументПроверки.Ссылка = &Ссылка
	|	И (ДокументПроверки.Номенклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ТабачнаяПродукция)
	|	ИЛИ ДокументПроверки.Номенклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ОбувнаяПродукция)
	|	ИЛИ ДокументПроверки.Номенклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.МолочнаяПродукция)  
	|	ИЛИ ДокументПроверки.Номенклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.АлкогольнаяПродукция)
	|	ИЛИ ДокументПроверки.Номенклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ЛегкаяПромышленность))";
	
	Если ТипЗнч(ДокументДляПроверки) = Тип("ДокументСсылка.ТребованиеНакладная") Тогда
		Текст = СтрЗаменить(Текст, ".Товары КАК ДокументПроверки", ".Материалы КАК ДокументПроверки");	
	КонецЕсли;
	
	Запрос.Текст = Текст;
	Запрос.УстановитьПараметр("Ссылка", ДокументДляПроверки);
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат ?(Результат.Количество() = 0, Ложь, Истина);
	
КонецФункции

Функция ПроверитьТоварыОбщийЗапросСУЗ(ДокументДляПроверки)
	
	//Для СУЗ - все доступные ТГ
	Запрос = Новый Запрос();
	Текст = "ВЫБРАТЬ
	|	ДокументПроверки.Номенклатура КАК Номенклатура
	|ИЗ
	|	Документ." + ДокументДляПроверки.Ссылка.Метаданные().Имя + ".Товары КАК ДокументПроверки
	|ГДЕ
	|	ДокументПроверки.Ссылка = &Ссылка
	|	И (ДокументПроверки.Номенклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ТабачнаяПродукция)
	|	ИЛИ ДокументПроверки.Номенклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ОбувнаяПродукция)
	|	ИЛИ ДокументПроверки.Номенклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ЛекарственныеПрепараты)
	|	ИЛИ ДокументПроверки.Номенклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.МолочнаяПродукция)  
	|	ИЛИ ДокументПроверки.Номенклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.АлкогольнаяПродукция)
	|	ИЛИ ДокументПроверки.Номенклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ЛегкаяПромышленность))";
	
	Если ТипЗнч(ДокументДляПроверки) = Тип("ДокументСсылка.ТребованиеНакладная") Тогда
		Текст = СтрЗаменить(Текст, ".Товары КАК ДокументПроверки", ".Материалы КАК ДокументПроверки");	
	КонецЕсли;
	
	Запрос.Текст = Текст;
	Запрос.УстановитьПараметр("Ссылка", ДокументДляПроверки);
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат ?(Результат.Количество() = 0, Ложь, Истина);
	
КонецФункции

Функция ПодготовитьТекстЗапросаДляЗаполненияПервичныхДокументов(ПараметрыЗаполнения) Экспорт
	
    ДокументИСМПТК = Неопределено;
	Если ПараметрыЗаполнения.ТипДокументаИСМПТ = Тип("ДокументСсылка.УведомлениеОВводеВОборотИСМПТК") Тогда
		ДокументИСМПТК = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОВводеВОборотИСМПТК();
	ИначеЕсли ПараметрыЗаполнения.ТипДокументаИСМПТ = Тип("ДокументСсылка.УведомлениеОВыводеИзОборотаИСМПТК") Тогда
		ДокументИСМПТК = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОВыводеИзОборотаИСМПТК();
	ИначеЕсли ПараметрыЗаполнения.ТипДокументаИСМПТ = Тип("ДокументСсылка.АктПриемаПередачиИСМПТК") Тогда
		ДокументИСМПТК = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаАктПриемаПередачиИСМПТК();
	ИначеЕсли ПараметрыЗаполнения.ТипДокументаИСМПТ = Тип("ДокументСсылка.УведомлениеОВвозеИзЕАЭСИСМПТК") Тогда
		ДокументИСМПТК = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОВвозеИзЕАЭСИСМПТК();
	ИначеЕсли ПараметрыЗаполнения.ТипДокументаИСМПТ = Тип("ДокументСсылка.УведомлениеОВвозеИзТретьихСтранИСМПТК") Тогда
		ДокументИСМПТК = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОВвозеИзТретьихСтранИСМПТК();
	ИначеЕсли ПараметрыЗаполнения.ТипДокументаИСМПТ = Тип("ДокументСсылка.УведомлениеОбЭкспортеЕАЭСИСМПТК") Тогда
		ДокументИСМПТК = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОбЭкспортеЕАЭСИСМПТК();
	КонецЕсли;
	
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДокументТЧ.Ссылка КАК Ссылка,
	|	СУММА(ДокументТЧ.Количество) КАК КоличествоУпаковок,
	|	ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка) КАК Упаковка,
	|	"""" КАК Характеристика,
	|	ШтрихкодыНоменклатуры.Номенклатура КАК Номенклатура,
	|	ДокументТЧ.Номенклатура.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ДокументТЧ.Номенклатура.КодТНВЭД КАК КодТНВЭД
	|ПОМЕСТИТЬ ВТ_Товары
	|ИЗ
	|	Документ.%ИмяДокумента%.%ИмяТаблицыДанных% КАК ДокументТЧ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|		ПО ДокументТЧ.EAN = ШтрихкодыНоменклатуры.Штрихкод
	|ГДЕ
	|	ДокументТЧ.Ссылка В (&МассивИСМПТДляСозданияПервичныхДокументов)
	|
	|СГРУППИРОВАТЬ ПО
	|	ДокументТЧ.Ссылка,
	|	ШтрихкодыНоменклатуры.Номенклатура,
	|	ДокументТЧ.Номенклатура.КодТНВЭД,
	|	ДокументТЧ.Номенклатура.БазоваяЕдиницаИзмерения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Товары.Ссылка КАК ДокументОснование,
	|	ВТ_Товары.КоличествоУпаковок КАК КоличествоУпаковок,
	|	ВТ_Товары.КоличествоУпаковок КАК Количество,
	|	ВТ_Товары.Упаковка КАК Упаковка,
	|	ВТ_Товары.Номенклатура КАК Номенклатура,
	|	ВТ_Товары.Характеристика КАК Характеристика,
	|	ВТ_Товары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВТ_Товары.КодТНВЭД КАК КодТНВЭД,
	|	ДокументИСМПТК.Дата КАК Дата,
	|	ДокументИСМПТК.Организация КАК Организация,
	|	%Контрагент%
	|	ДокументИСМПТК.Автор КАК Автор,
	|	"""" КАК ВидОперации,
	|	"""" КАК Партнер	
	|ПОМЕСТИТЬ ВТ_ДанныеДокумента
	|ИЗ
	|	ВТ_Товары КАК ВТ_Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.%ИмяДокумента% КАК ДокументИСМПТК
	|		ПО ВТ_Товары.Ссылка = ДокументИСМПТК.Ссылка
	|ГДЕ
	|	ДокументИСМПТК.Ссылка В (&МассивИСМПТДляСозданияПервичныхДокументов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ДанныеДокумента.ДокументОснование КАК ДокументОснование,
	|	ВТ_ДанныеДокумента.Организация КАК Организация,
	|	ВТ_ДанныеДокумента.Контрагент КАК Контрагент,
	|	ВТ_ДанныеДокумента.Партнер КАК Партнер,
	|	ВТ_ДанныеДокумента.ВидОперации КАК ВидОперации,
	|	ВТ_ДанныеДокумента.Автор КАК Автор,
	|	ВТ_ДанныеДокумента.Дата КАК Дата,
	|	ВТ_ДанныеДокумента.Номенклатура КАК Номенклатура,
	|	ВТ_ДанныеДокумента.Характеристика КАК Характеристика,
	|	ВТ_ДанныеДокумента.Упаковка КАК Упаковка,
	|	ВТ_ДанныеДокумента.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВТ_ДанныеДокумента.КодТНВЭД КАК КодТНВЭД,
	|	ВТ_ДанныеДокумента.Количество КАК Количество,
	|	ВТ_ДанныеДокумента.КоличествоУпаковок КАК КоличествоУпаковок,
	|	1 КАК Коэффициент
	|ПОМЕСТИТЬ вт_ДанныеДляЗаполнения
	|ИЗ
	|	вт_ДанныеДокумента КАК ВТ_ДанныеДокумента
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	вт_ДанныеДляЗаполнения.ДокументОснование КАК ДокументОснование,
	|	вт_ДанныеДляЗаполнения.Организация КАК Организация,
	|	вт_ДанныеДляЗаполнения.Контрагент КАК Контрагент,
	|	вт_ДанныеДляЗаполнения.Партнер КАК Партнер,
	|	вт_ДанныеДляЗаполнения.ВидОперации КАК ВидОперации,
	|	вт_ДанныеДляЗаполнения.Автор КАК Автор,
	|	вт_ДанныеДляЗаполнения.Дата КАК Дата
	|ИЗ
	|	вт_ДанныеДляЗаполнения КАК вт_ДанныеДляЗаполнения
	|
	|	УПОРЯДОЧИТЬ ПО
	|		ДокументОснование
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ 
	|	вт_ДанныеДляЗаполнения.ДокументОснование КАК ДокументОснование,
	|	вт_ДанныеДляЗаполнения.Организация КАК Организация,
	|	вт_ДанныеДляЗаполнения.Номенклатура КАК Номенклатура,
	|	вт_ДанныеДляЗаполнения.Характеристика КАК Характеристика,
	|	вт_ДанныеДляЗаполнения.Упаковка КАК Упаковка,
	|	вт_ДанныеДляЗаполнения.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	вт_ДанныеДляЗаполнения.КодТНВЭД КАК КодТНВЭД,
	|	вт_ДанныеДляЗаполнения.Количество КАК Количество,
	|	вт_ДанныеДляЗаполнения.КоличествоУпаковок КАК КоличествоУпаковок,
	|	вт_ДанныеДляЗаполнения.Коэффициент КАК Коэффициент
	|ИЗ
	|	вт_ДанныеДляЗаполнения КАК вт_ДанныеДляЗаполнения
	|
	|	УПОРЯДОЧИТЬ ПО
	|		ДокументОснование";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ИмяДокумента%", 	   ДокументИСМПТК);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ИмяТаблицыДанных%", "Марки");
	
	Если ДокументИСМПТК = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаАктПриемаПередачиИСМПТК()
		Или ДокументИСМПТК = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОВвозеИзЕАЭСИСМПТК()
		Или ДокументИСМПТК = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОбЭкспортеЕАЭСИСМПТК() Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%Контрагент%", "ДокументИСМПТК.Контрагент КАК Контрагент,");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%Контрагент%", "Неопределено КАК Контрагент,");
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПолучитьПустуюСтруктуруДокументаОснованияДляИСМПТ(Параметры = Неопределено) Экспорт
	
	Если Не Параметры = Неопределено Тогда
		ТипДокумента = Параметры.ТипСоздаваемогоДокумента;
	Иначе
		ТипДокумента = Параметры;
	КонецЕсли;
	
	СтруктураДокумента = Новый Структура;
	
	// Подготовка таблицы шапки документа
	СписокОбязательныхКолонок = "Организация," 
	+ "Контрагент,"
	+ "Партнер,"
	+ "ДокументОснование," 
	+ "ВидОперации,"
	+ "Дата,"
	+ "Автор,"
	;
	
	СтруктураДокумента.Вставить("Реквизиты", ИнтеграцияИСМПТКВызовСервера.ПолучитьТаблицуПараметров(СписокОбязательныхКолонок));
	
	СписокОбязательныхКолонок = 
	"Организация,"
	+ "Номенклатура,"
	+ "Цена,"
	+ "КодТНВЭД,"
	+ "Характеристика,"
	+ "Количество,"
	+ "Упаковка,"
	+ "КоличествоУпаковок,"
	+ "ЕдиницаИзмерения,"
	+ "Коэффициент,"
	+ "ДокументОснование"
	;
	
	СтруктураДокумента.Вставить("Товары", ИнтеграцияИСМПТКВызовСервера.ПолучитьТаблицуПараметров(СписокОбязательныхКолонок));
	
	Возврат СтруктураДокумента;
	
КонецФункции

//Универсальный запрос к первичным документам для получения данных для заполнения создаваемого документа ИС ЦЭДМ
//
Функция ПодготовитьТекстЗапросаДляЗаполненияДокументаИСМПТ_Общий(ПараметрыЗаполнения) Экспорт
	
	ДокументОснования = ?(ТипЗнч(ПараметрыЗаполнения.МассивДокументов) = Тип("Массив"), ПараметрыЗаполнения.МассивДокументов[0], ПараметрыЗаполнения.МассивДокументов);
	
	Если ТипЗнч(ДокументОснования) = Тип("ДокументСсылка.УведомлениеОРасхожденииИСМПТК") Тогда
		//Нужно получить дополнительную информацию о кодах маркировки для ввода АПП корректировочного
		ТекстЗапроса = ТекстЗапросаДляСхемыКорректировкиАПП(ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОРасхожденииИСМПТК());
		Возврат ТекстЗапроса;		
	КонецЕсли;
	
	Если ТипЗнч(ДокументОснования) = Тип("ДокументСсылка.АктПриемаПередачиИСМПТК") Тогда
		//Нужно получить дополнительную информацию о кодах маркировки для ввода УОР или Вывода из оборота
		Если Не ДокументОснования.Расхождения.Количество() = 0 Тогда
			ТекстЗапроса = ТекстЗапросаДляСхемыКорректировкиАПП(ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаАктПриемаПередачиИСМПТК());
		Иначе
			ТекстЗапроса = ТекстЗапросаДляВыводаИзОборотаПоАПП(ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаАктПриемаПередачиИСМПТК());
		КонецЕсли;
		Возврат ТекстЗапроса;		
	КонецЕсли;
	
	Если ТипЗнч(ДокументОснования) = Тип("ДокументСсылка.УведомлениеОбОтгрузкеЕАЭСИСМПТК") Тогда
		//Нужно получить дополнительную информацию о кодах маркировки для ввода Уведомления о приемке
		ТекстЗапроса = ТекстЗапросаУведомлениеОбОтгрузке(ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОбОтгрузкеЕАЭСИСМПТК());
		Возврат ТекстЗапроса;		
	КонецЕсли;
	
	Если ТипЗнч(ДокументОснования) = Тип("ДокументСсылка.УведомлениеОВвозеИзЕАЭСИСМПТК") Тогда
		ТекстЗапроса = ТекстЗапросаУведомлениеОВвозеЕАЭС(ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОВвозеИзЕАЭСИСМПТК());
		Возврат ТекстЗапроса;		
	КонецЕсли;
	
	ИмяДокументаОснования = ПолучитьИмяДокументаДляПроверкиПоТипу(ДокументОснования);
	ТекстЗапроса = ТекстЗапросаОбщиеДанныеОснованияИСМПТ(ИмяДокументаОснования); 
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаОбщиеДанныеОснованияИСМПТ(ИмяДокумента)
	
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	ИнфСистема = "ИСМПТ";
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТиповойДокумент.Ссылка КАК ДокументОснование,
	|	ТиповойДокумент.Склад КАК Склад,
	//Данные Поставщика и получателя
	|	ТиповойДокумент.Организация КАК Организация,
	|	ТиповойДокумент.Организация КАК Поставщик, 
	|	ВЫБОР
	|		КОГДА (ВЫРАЗИТЬ(Организации.НаименованиеПолное КАК СТРОКА(200))) <> """"
	|			ТОГДА ВЫРАЗИТЬ(Организации.НаименованиеПолное КАК СТРОКА(200))
	|		ИНАЧЕ Организации.Наименование
	|	КОНЕЦ КАК ПоставщикНаименование,
	|	ТиповойДокумент.Организация.%ОрганизацияИНН КАК ПоставщикИдентификационныйНомер,
	|";
	
	//Контрагент
	Если ИмяДокумента = "СписаниеТоваров"
		Или ИмяДокумента = "ТребованиеНакладная"
		Или ИмяДокумента = "ОприходованиеТоваров" Тогда
		
		ТекстЗапроса = ТекстЗапроса + 
		"Неопределено КАК Контрагент,
		|	Неопределено КАК Получатель,
		|	Неопределено КАК ПолучательИдентификационныйНомер,
		|	Неопределено КАК ПолучательНаименование,
		|";
		
	Иначе
		ТекстЗапроса = ТекстЗапроса + 
		"ТиповойДокумент.Контрагент КАК Контрагент,
		|	ТиповойДокумент.Контрагент КАК Получатель,
		|	ТиповойДокумент.Контрагент.%КонтрагентИНН КАК ПолучательИдентификационныйНомер,
		|	ВЫБОР
		|		КОГДА (ВЫРАЗИТЬ(Контрагенты.НаименованиеПолное КАК СТРОКА(200))) <> """"
		|			ТОГДА ВЫРАЗИТЬ(Контрагенты.НаименованиеПолное КАК СТРОКА(200))
		|		ИНАЧЕ Контрагенты.Наименование
		|	КОНЕЦ КАК ПолучательНаименование,
		|";
	КонецЕсли;
	
	//Хозяйственная операция
	Если ИмяДокумента = "СписаниеТоваров"
		Или ИмяДокумента = "ТребованиеНакладная"
		Или ИмяДокумента = "ОприходованиеТоваров" Тогда
		ТекстЗапроса = ТекстЗапроса + 
		"Неопределено КАК ВидОперации,
		|";
	Иначе
		ТекстЗапроса = ТекстЗапроса + 
		//"ТиповойДокумент.ХозяйственнаяОперация КАК ВидОперации,
		"ТиповойДокумент.ВидОперации КАК ВидОперации,
		|";
	КонецЕсли;
	
	//Таблица товаров
	ТекстЗапроса = ТекстЗапроса +
	"ТаблицаТовары.Номенклатура КАК Номенклатура,
	//|	ТаблицаТовары.Характеристика КАК Характеристика,
	|	"""" КАК Характеристика,
	|	СУММА(ТаблицаТовары.Количество) КАК КоличествоИсточник,
	|";
	
	Если ИмяДокумента = "СписаниеТоваров"
		Или ИмяДокумента = "ТребованиеНакладная" Тогда
		ТекстЗапроса = ТекстЗапроса + 
		"Неопределено КАК Цена,
		|";
	Иначе
		ТекстЗапроса = ТекстЗапроса + 
		"ТаблицаТовары.Цена КАК Цена,
		|";
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса +    
	"	СправочникНоменклатура.%ЕдиницаИзмерения КАК ЕдиницаИзмеренияБазовая,
	|	ВЫБОР
	|		КОГДА СправочникНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ТабачнаяПродукция)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИСМПТК.Табачная)
	|		КОГДА СправочникНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ОбувнаяПродукция)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИСМПТК.Обувная)
	|		КОГДА СправочникНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.МолочнаяПродукция)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИСМПТК.МолочнаяПродукция)
	|		КОГДА СправочникНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.АлкогольнаяПродукция)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИСМПТК.Алкогольная)
	|		КОГДА СправочникНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ЛегкаяПромышленность)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИСМПТК.ЛегкаяПромышленность)
	|		КОГДА СправочникНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ЛекарственныеПрепараты)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИСМПТК.ЛекарственныеПрепараты)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИСМПТК.ПустаяСсылка)
	|	КОНЕЦ КАК ВидПродукции
	|ПОМЕСТИТЬ вт_ДанныеДокумента
	|
	|ИЗ
	|	Документ.%ИмяДокумента%.Товары КАК ТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.%ИмяДокумента% КАК ТиповойДокумент
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|			ПО ТиповойДокумент.Организация = Организации.Ссылка
	|";
	
	Если Не ИмяДокумента = "СписаниеТоваров"
		И Не ИмяДокумента = "ТребованиеНакладная"
		И Не ИмяДокумента = "ОприходованиеТоваров" Тогда
		
		ТекстЗапроса = ТекстЗапроса + 
		"	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
		|		ПО ТиповойДокумент.Контрагент = Контрагенты.Ссылка
		|";
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса +
	"		ПО ТаблицаТовары.Ссылка = ТиповойДокумент.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО ТаблицаТовары.Номенклатура = СправочникНоменклатура.Ссылка
	|ГДЕ
	|	ТиповойДокумент.Ссылка В(&МассивДокументов)
	|";
	
	ТекстЗапроса = ТекстЗапроса +  ПолучитьКусокТекстаЗапросаПоВидуПродукции(ИнфСистема) + "
	|		
	|	СГРУППИРОВАТЬ ПО
	|	ТиповойДокумент.Ссылка,
	|	ТиповойДокумент.Склад,
	|	ТиповойДокумент.Организация,
	|	ВЫБОР
	|		КОГДА (ВЫРАЗИТЬ(Организации.НаименованиеПолное КАК СТРОКА(200))) <> """"
	|			ТОГДА ВЫРАЗИТЬ(Организации.НаименованиеПолное КАК СТРОКА(200))
	|		ИНАЧЕ Организации.Наименование
	|	КОНЕЦ,
	|	ТиповойДокумент.Организация.%ОрганизацияИНН,
	|";
	
	Если ИмяДокумента = "СписаниеТоваров"
		Или ИмяДокумента = "ТребованиеНакладная"
		Или ИмяДокумента = "ОприходованиеТоваров" Тогда
		ТекстЗапроса = ТекстЗапроса + 
		"Неопределено,
		|	Неопределено,
		|	Неопределено,
		|	Неопределено,
		|";
	Иначе
		ТекстЗапроса = ТекстЗапроса + 
		"ТиповойДокумент.Контрагент,
		|	ТиповойДокумент.Контрагент,
		|	ТиповойДокумент.Контрагент.%КонтрагентИНН,
		|	ВЫБОР
		|		КОГДА (ВЫРАЗИТЬ(Контрагенты.НаименованиеПолное КАК СТРОКА(200))) <> """"
		|			ТОГДА ВЫРАЗИТЬ(Контрагенты.НаименованиеПолное КАК СТРОКА(200))
		|		ИНАЧЕ Контрагенты.Наименование
		|	КОНЕЦ,
		|";
	КонецЕсли;
	
	Если ИмяДокумента = "СписаниеТоваров"
		Или ИмяДокумента = "ТребованиеНакладная"
		Или ИмяДокумента = "ОприходованиеТоваров" Тогда
		ТекстЗапроса = ТекстЗапроса +
		"	НЕОПРЕДЕЛЕНО,
		|";
	Иначе
		ТекстЗапроса = ТекстЗапроса + 
		"ТиповойДокумент.ВидОперации,
		//"ТиповойДокумент.ХозяйственнаяОперация,
		|";
	КонецЕсли;	
	
	ТекстЗапроса = ТекстЗапроса + 
	"	ТаблицаТовары.Номенклатура,
	|	"""",
	|	СправочникНоменклатура.%ЕдиницаИзмерения,
	|	ВЫБОР
	|		КОГДА СправочникНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ТабачнаяПродукция)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИСМПТК.Табачная)
	|		КОГДА СправочникНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ОбувнаяПродукция)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИСМПТК.Обувная)
	|		КОГДА СправочникНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.МолочнаяПродукция)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИСМПТК.МолочнаяПродукция)
	|		КОГДА СправочникНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.АлкогольнаяПродукция)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИСМПТК.Алкогольная)
	|		КОГДА СправочникНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ЛегкаяПромышленность)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИСМПТК.ЛегкаяПромышленность)
	|		КОГДА СправочникНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ЛекарственныеПрепараты)
	|		ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИСМПТК.ЛекарственныеПрепараты)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИСМПТК.ПустаяСсылка)
	|	КОНЕЦ,
	|";	
	
	Если ИмяДокумента = "СписаниеТоваров"
		Или ИмяДокумента = "ТребованиеНакладная" Тогда
		ТекстЗапроса = ТекстЗапроса + 
		"Неопределено,
		|";
	Иначе
		ТекстЗапроса = ТекстЗапроса + 
		"ТаблицаТовары.Цена,
		|";
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + 
	"	ТиповойДокумент.Организация
	|	
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация
	|
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	вт_ДанныеДокумента.ДокументОснование КАК ДокументОснование,
	|	вт_ДанныеДокумента.Склад КАК Склад,
	|	вт_ДанныеДокумента.Организация КАК Организация,
	|	вт_ДанныеДокумента.Поставщик КАК Поставщик,
	|	вт_ДанныеДокумента.ПоставщикНаименование КАК ПоставщикНаименование,
	|	вт_ДанныеДокумента.ПоставщикИдентификационныйНомер КАК ПоставщикИдентификационныйНомер,
	|	вт_ДанныеДокумента.Контрагент КАК Контрагент,
	|	вт_ДанныеДокумента.Получатель КАК Получатель,
	|	вт_ДанныеДокумента.ПолучательНаименование КАК ПолучательНаименование,
	|	вт_ДанныеДокумента.ПолучательИдентификационныйНомер КАК ПолучательИдентификационныйНомер,
	|	вт_ДанныеДокумента.ВидОперации КАК ВидОперации,
	|	вт_ДанныеДокумента.Номенклатура КАК Номенклатура,
	|	вт_ДанныеДокумента.Характеристика КАК Характеристика,
	|	вт_ДанныеДокумента.Цена КАК Цена,
	|	вт_ДанныеДокумента.КоличествоИсточник КАК КоличествоИсточник,
	|	вт_ДанныеДокумента.ЕдиницаИзмеренияБазовая КАК ЕдиницаИзмеренияБазовая,
	|	вт_ДанныеДокумента.ВидПродукции КАК ВидПродукции
	|ПОМЕСТИТЬ вт_ДанныеДляЗаполнения
	|
	|ИЗ
	|	вт_ДанныеДокумента КАК вт_ДанныеДокумента
	|ГДЕ
	|	вт_ДанныеДокумента.КоличествоИсточник > 0 
	|
	|;
	|
	//Таблица реквизитов
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	вт_ДанныеДляЗаполнения.ДокументОснование КАК ДокументОснование,
	|	вт_ДанныеДляЗаполнения.Склад КАК Склад,
	|	вт_ДанныеДляЗаполнения.Организация КАК Организация,
	|	вт_ДанныеДляЗаполнения.Поставщик КАК Поставщик,
	|	вт_ДанныеДляЗаполнения.ПоставщикНаименование КАК ПоставщикНаименование,
	|	вт_ДанныеДляЗаполнения.ПоставщикИдентификационныйНомер КАК ПоставщикИдентификационныйНомер,
	|	вт_ДанныеДляЗаполнения.Контрагент КАК Контрагент,
	|	вт_ДанныеДляЗаполнения.Получатель КАК Получатель,
	|	вт_ДанныеДляЗаполнения.ПолучательНаименование КАК ПолучательНаименование,
	|	вт_ДанныеДляЗаполнения.ПолучательИдентификационныйНомер КАК ПолучательИдентификационныйНомер,
	|	вт_ДанныеДляЗаполнения.ВидОперации КАК ВидОперации
	|
	|ИЗ
	|	вт_ДанныеДляЗаполнения КАК вт_ДанныеДляЗаполнения
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДокументОснование
	|
	|;
	| 
	//Таблица товаров
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	вт_ДанныеДляЗаполнения.ДокументОснование КАК ДокументОснование,
	|	вт_ДанныеДляЗаполнения.Организация КАК Организация,
	|	вт_ДанныеДляЗаполнения.Номенклатура КАК Номенклатура,
	|	вт_ДанныеДляЗаполнения.Характеристика КАК Характеристика,
	|	СУММА(вт_ДанныеДляЗаполнения.КоличествоИсточник) КАК КоличествоИсточник,
	|	вт_ДанныеДляЗаполнения.ЕдиницаИзмеренияБазовая КАК ЕдиницаИзмеренияБазовая,
	|	вт_ДанныеДляЗаполнения.ВидПродукции КАК ВидПродукции
	|ИЗ
	|	вт_ДанныеДляЗаполнения КАК вт_ДанныеДляЗаполнения
	|
	|СГРУППИРОВАТЬ ПО
	|	вт_ДанныеДляЗаполнения.ДокументОснование,
	|	вт_ДанныеДляЗаполнения.Организация,
	|	вт_ДанныеДляЗаполнения.Номенклатура,
	|	вт_ДанныеДляЗаполнения.Характеристика,
	|	вт_ДанныеДляЗаполнения.ЕдиницаИзмеренияБазовая,
	|	вт_ДанныеДляЗаполнения.ВидПродукции
	|УПОРЯДОЧИТЬ ПО
	|	ДокументОснование
	|
	|;
	| 
	//Таблица итогов
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	вт_ДанныеДляЗаполнения.ДокументОснование КАК ДокументОснование,
	|	вт_ДанныеДляЗаполнения.Организация КАК Организация,
	|	вт_ДанныеДляЗаполнения.Номенклатура КАК Номенклатура,
	|	вт_ДанныеДляЗаполнения.КоличествоИсточник КАК КоличествоИсточник
	|ИЗ
	|	вт_ДанныеДляЗаполнения КАК вт_ДанныеДляЗаполнения
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДокументОснование";
	
	Если ИмяДокумента = "ТребованиеНакладная" Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Документ.%ИмяДокумента%.Товары КАК ТаблицаТовары", "Документ.%ИмяДокумента%.Материалы КАК ТаблицаТовары");
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ИмяДокумента%", ИмяДокумента); 
	
	СоответствиеИменРеквизитов = Новый Соответствие;
	СоответствиеИменРеквизитов.Вставить("%КонтрагентИНН", "");
	СоответствиеИменРеквизитов.Вставить("%ОрганизацияИНН", ""); 
	СоответствиеИменРеквизитов.Вставить("%ЕдиницаИзмерения", ""); 
	
	РаботаСДокументамиИСМПТКПереопределяемый.ЗаполнитьСоответсвиеИменРеквизитовПолейЗапросов(СоответствиеИменРеквизитов);
	                                  
	РаботаСДокументамиИСМПТК.ЗаменитьИменаРеквизитовПолейЗапросов(ТекстЗапроса, СоответствиеИменРеквизитов);
    
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаДляСхемыКорректировкиАПП(ИмяДокумента)

	//ПЕРЕОПРЕДЕЛЕНИЕ//
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДокументИСМПТ.Ссылка КАК ДокументОснование,
	|	ДокументИСМПТ.Организация КАК Организация,
	|	ДокументИСМПТ.Контрагент КАК Контрагент,
	|	ДокументИСМПТ.Поставщик КАК Поставщик,
	|	ДокументИСМПТ.ПоставщикНаименование КАК ПоставщикНаименование,
	|	ДокументИСМПТ.ПоставщикИдентификационныйНомер КАК ПоставщикИдентификационныйНомер,
	|	ДокументИСМПТ.Получатель КАК Получатель,
	|	ДокументИСМПТ.ПолучательИдентификационныйНомер КАК ПолучательИдентификационныйНомер,
	|	ДокументИСМПТ.ПолучательНаименование КАК ПолучательНаименование,
	|	ДокументИСМПТ.ВидОперации КАК ВидОперации
	|ПОМЕСТИТЬ вт_ДанныеДокумента
	|ИЗ
	|	Документ.%ИмяДокумента% КАК ДокументИСМПТ
	|ГДЕ
	|	ДокументИСМПТ.Ссылка В(&МассивДокументов)
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Если ИмяДокумента = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОРасхожденииИСМПТК() Тогда
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаМарки.КодМаркировки КАК КодМаркировки,
		|	ТаблицаМарки.ВидУпаковки КАК ВидУпаковки,
		|	ТаблицаМарки.Количество КАК Количество,
		|	ТаблицаМарки.GTIN КАК GTIN,
		|	ТаблицаМарки.Номенклатура КАК Номенклатура,
		|	ТаблицаМарки.КоличествоИсточник КАК КоличествоИсточник,
		|	ТаблицаМарки.EAN КАК EAN,
		|	ТаблицаМарки.КодИдентификации КАК КодИдентификации,
		|	Неопределено КАК СтатусСверкиКода,
		|	ТаблицаМарки.ВидПродукции КАК ВидПродукции,
		|	ТаблицаМарки.GTINВерхнегоУровня КАК GTINВерхнегоУровня
		|ПОМЕСТИТЬ вт_Марки
		|ИЗ
		|	Документ.УведомлениеОРасхожденииИСМПТК.Марки КАК ТаблицаМарки
		|ГДЕ
		|	ТаблицаМарки.Ссылка В(&МассивДокументов)
		|	И (ТаблицаМарки.СтатусСверкиКода = ЗНАЧЕНИЕ(Перечисление.СтатусыСверкиКодаИСМПТК.Найден)
		|			ИЛИ ТаблицаМарки.СтатусСверкиКода = ЗНАЧЕНИЕ(Перечисление.СтатусыСверкиКодаИСМПТК.Добавлен))
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|";
	Иначе
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаМарки.КодМаркировки КАК КодМаркировки,
		|	ТаблицаМарки.ВидУпаковки КАК ВидУпаковки,
		|	ТаблицаМарки.Количество КАК Количество,
		|	ТаблицаМарки.GTIN КАК GTIN,
		|	ТаблицаМарки.Номенклатура КАК Номенклатура,
		|	Неопределено КАК КоличествоИсточник,
		|	ТаблицаМарки.EAN КАК EAN,
		|	ТаблицаМарки.КодИдентификации КАК КодИдентификации,
		|	ТаблицаМарки.СтатусСверкиКода КАК СтатусСверкиКода,
		|	ТаблицаМарки.ВидПродукции КАК ВидПродукции,
		|	ТаблицаМарки.GTINВерхнегоУровня КАК GTINВерхнегоУровня
		|ПОМЕСТИТЬ вт_Марки
		|ИЗ
		|	Документ.АктПриемаПередачиИСМПТК.Расхождения КАК ТаблицаМарки
		|ГДЕ
		|	ТаблицаМарки.Ссылка В(&МассивДокументов)
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|";
	КонецЕсли;
		
	ТекстЗапроса = ТекстЗапроса +
	"ВЫБРАТЬ
	//Реквизиты
	|	вт_ДанныеДокумента.ДокументОснование КАК ДокументОснование,
	|	вт_ДанныеДокумента.Организация КАК Организация,
	|	вт_ДанныеДокумента.Контрагент КАК Контрагент,
	|	вт_ДанныеДокумента.Поставщик КАК Поставщик,
	|	вт_ДанныеДокумента.ПоставщикНаименование КАК ПоставщикНаименование,
	|	вт_ДанныеДокумента.ПоставщикИдентификационныйНомер КАК ПоставщикИдентификационныйНомер,
	|	вт_ДанныеДокумента.Получатель КАК Получатель,
	|	вт_ДанныеДокумента.ПолучательИдентификационныйНомер КАК ПолучательИдентификационныйНомер,
	|	вт_ДанныеДокумента.ПолучательНаименование КАК ПолучательНаименование,
	|	вт_ДанныеДокумента.ВидОперации КАК ВидОперации
	|ИЗ
	|	вт_ДанныеДокумента КАК вт_ДанныеДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
    //Товары
	|ВЫБРАТЬ
	|	вт_Марки.Номенклатура КАК Номенклатура,
	|	вт_Марки.КоличествоИсточник КАК КоличествоИсточник,
	|	вт_Марки.Количество КАК Количество
	|ИЗ
	|	вт_Марки КАК вт_Марки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	//Марки
	|ВЫБРАТЬ
	|	вт_Марки.КодМаркировки КАК КодМаркировки,
	|	вт_Марки.ВидУпаковки КАК ВидУпаковки,
	|	вт_Марки.Количество КАК Количество,
	|	вт_Марки.GTIN КАК GTIN,
	|	вт_Марки.Номенклатура КАК Номенклатура,
	|	вт_Марки.КоличествоИсточник КАК КоличествоИсточник,
	|	вт_Марки.EAN КАК EAN,
	|	вт_Марки.КодИдентификации КАК КодИдентификации,
	|	вт_Марки.СтатусСверкиКода КАК СтатусСверкиКода,
	|	вт_Марки.ВидПродукции КАК ВидПродукции,
	|	вт_Марки.GTINВерхнегоУровня КАК GTINВерхнегоУровня
	|ИЗ
	|	вт_Марки КАК вт_Марки";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ИмяДокумента%", ИмяДокумента);
	
	Возврат ТекстЗапроса;
	
КонецФункции	

Функция ТекстЗапросаДляВыводаИзОборотаПоАПП(ИмяДокумента)
	
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДокументИСМПТ.Ссылка КАК ДокументОснование,
	|	ДокументИСМПТ.Организация КАК Организация,
	|	ДокументИСМПТ.Контрагент КАК Контрагент,
	|	ДокументИСМПТ.Поставщик КАК Поставщик,
	|	ДокументИСМПТ.ПоставщикНаименование КАК ПоставщикНаименование,
	|	ДокументИСМПТ.ПоставщикИдентификационныйНомер КАК ПоставщикИдентификационныйНомер,
	|	ДокументИСМПТ.Получатель КАК Получатель,
	|	ДокументИСМПТ.ПолучательИдентификационныйНомер КАК ПолучательИдентификационныйНомер,
	|	ДокументИСМПТ.ПолучательНаименование КАК ПолучательНаименование,
	|	ДокументИСМПТ.ВидОперации КАК ВидОперации
	|ПОМЕСТИТЬ вт_ДанныеДокумента
	|ИЗ
	|	Документ.АктПриемаПередачиИСМПТК КАК ДокументИСМПТ
	|ГДЕ
	|	ДокументИСМПТ.Ссылка В(&МассивДокументов)
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаМарки.КодМаркировки КАК КодМаркировки,
	|	ТаблицаМарки.ВидУпаковки КАК ВидУпаковки,
	|	ТаблицаМарки.Количество КАК Количество,
	|	ТаблицаМарки.GTIN КАК GTIN,
	|	ТаблицаМарки.Номенклатура КАК Номенклатура,
	|	Неопределено КАК КоличествоИсточник,
	|	ТаблицаМарки.EAN КАК EAN,
	|	ТаблицаМарки.КодИдентификации КАК КодИдентификации,
	|	ТаблицаМарки.ВидПродукции КАК ВидПродукции,
	|	ТаблицаМарки.GTINВерхнегоУровня КАК GTINВерхнегоУровня
	|ПОМЕСТИТЬ вт_Марки
	|ИЗ
	|	Документ.АктПриемаПередачиИСМПТК.Марки КАК ТаблицаМарки
	|ГДЕ
	|	ТаблицаМарки.Ссылка В(&МассивДокументов)
	|;
	|////////////////////////////////////////////////////////////////////////////////
	//Реквизиты
	|ВЫБРАТЬ
	|	вт_ДанныеДокумента.ДокументОснование КАК ДокументОснование,
	|	вт_ДанныеДокумента.Организация КАК Организация,
	|	вт_ДанныеДокумента.Контрагент КАК Контрагент,
	|	вт_ДанныеДокумента.Поставщик КАК Поставщик,
	|	вт_ДанныеДокумента.ПоставщикНаименование КАК ПоставщикНаименование,
	|	вт_ДанныеДокумента.ПоставщикИдентификационныйНомер КАК ПоставщикИдентификационныйНомер,
	|	вт_ДанныеДокумента.Получатель КАК Получатель,
	|	вт_ДанныеДокумента.ПолучательИдентификационныйНомер КАК ПолучательИдентификационныйНомер,
	|	вт_ДанныеДокумента.ПолучательНаименование КАК ПолучательНаименование,
	|	вт_ДанныеДокумента.ВидОперации КАК ВидОперации
	|ИЗ
	|	вт_ДанныеДокумента КАК вт_ДанныеДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	//Товары
	|ВЫБРАТЬ
	|	вт_Марки.Номенклатура КАК Номенклатура,
	|	вт_Марки.КоличествоИсточник КАК КоличествоИсточник,
	|	вт_Марки.Количество КАК Количество
	|ИЗ
	|	вт_Марки КАК вт_Марки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	//Марки
	|ВЫБРАТЬ
	|	вт_Марки.КодМаркировки КАК КодМаркировки,
	|	вт_Марки.ВидУпаковки КАК ВидУпаковки,
	|	вт_Марки.Количество КАК Количество,
	|	вт_Марки.GTIN КАК GTIN,
	|	вт_Марки.Номенклатура КАК Номенклатура,
	|	вт_Марки.КоличествоИсточник КАК КоличествоИсточник,
	|	вт_Марки.EAN КАК EAN,
	|	вт_Марки.КодИдентификации КАК КодИдентификации,
	|	вт_Марки.ВидПродукции КАК ВидПродукции,
	|	вт_Марки.GTINВерхнегоУровня КАК GTINВерхнегоУровня
	|ИЗ
	|	вт_Марки КАК вт_Марки";
		
	Возврат ТекстЗапроса;
	
КонецФункции	

Функция ТекстЗапросаУведомлениеОбОтгрузке(ИмяДокумента)
	
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДокументИСМПТ.Ссылка КАК ДокументОснование,
	|	ДокументИСМПТ.Организация КАК Организация,
	|	ДокументИСМПТ.Контрагент КАК Контрагент,
	|	ДокументИСМПТ.Поставщик КАК Поставщик,
	|	ДокументИСМПТ.ПоставщикНаименование КАК ПоставщикНаименование,
	|	ДокументИСМПТ.ПоставщикИдентификационныйНомер КАК ПоставщикИдентификационныйНомер,
	|	ДокументИСМПТ.Получатель КАК Получатель,
	|	ДокументИСМПТ.ПолучательИдентификационныйНомер КАК ПолучательИдентификационныйНомер,
	|	ДокументИСМПТ.ПолучательНаименование КАК ПолучательНаименование,
	|	ДокументИСМПТ.СтранаОтправления КАК СтранаОтправления,
	|	ДокументИСМПТ.Идентификатор КАК Идентификатор,
	|	ДокументИСМПТ.НомерПервичногоДокумента КАК НомерПервичногоДокумента,
	|	ДокументИСМПТ.ДатаПервичногоДокумента КАК ДатаПервичногоДокумента
	|ПОМЕСТИТЬ вт_ДанныеДокумента
	|ИЗ
	|	Документ.УведомлениеОбОтгрузкеЕАЭСИСМПТК КАК ДокументИСМПТ
	|ГДЕ
	|	ДокументИСМПТ.Ссылка В(&МассивДокументов)
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаМарки.КодИдентификации КАК КодИдентификации,
	|	ТаблицаМарки.ВидУпаковки КАК ВидУпаковки,
	|	ТаблицаМарки.GTIN КАК GTIN,
	|	ТаблицаМарки.EAN КАК EAN,
	|	ТаблицаМарки.Номенклатура КАК Номенклатура,
	|	ТаблицаМарки.ВидПродукции КАК ВидПродукции,
	|	ТаблицаМарки.GTINВерхнегоУровня КАК GTINВерхнегоУровня,
	|	ТаблицаМарки.Количество КАК Количество,
	|	ТаблицаМарки.ЦенаЗаЕдиницу КАК ЦенаЗаЕдиницу,
	|	ТаблицаМарки.СуммаНДС КАК СуммаНДС	
	|ПОМЕСТИТЬ вт_Марки
	|ИЗ
	|	Документ.УведомлениеОбОтгрузкеЕАЭСИСМПТК.Марки КАК ТаблицаМарки
	|ГДЕ
	|	ТаблицаМарки.Ссылка В(&МассивДокументов)
	|;
	|////////////////////////////////////////////////////////////////////////////////
	//Реквизиты
	|ВЫБРАТЬ
	|	вт_ДанныеДокумента.ДокументОснование КАК ДокументОснование,
	|	вт_ДанныеДокумента.Организация КАК Организация,
	|	вт_ДанныеДокумента.Контрагент КАК Контрагент,
	|	вт_ДанныеДокумента.Поставщик КАК Поставщик,
	|	вт_ДанныеДокумента.ПоставщикНаименование КАК ПоставщикНаименование,
	|	вт_ДанныеДокумента.ПоставщикИдентификационныйНомер КАК ПоставщикИдентификационныйНомер,
	|	вт_ДанныеДокумента.Получатель КАК Получатель,
	|	вт_ДанныеДокумента.ПолучательИдентификационныйНомер КАК ПолучательИдентификационныйНомер,
	|	вт_ДанныеДокумента.ПолучательНаименование КАК ПолучательНаименование,
	|	вт_ДанныеДокумента.СтранаОтправления КАК СтранаОтправления,
	|	вт_ДанныеДокумента.Идентификатор КАК ИдентификаторДокументаОтгрузки,
	|	вт_ДанныеДокумента.НомерПервичногоДокумента КАК НомерПервичногоДокумента,
	|	вт_ДанныеДокумента.ДатаПервичногоДокумента КАК ДатаПервичногоДокумента
	|ИЗ
	|	вт_ДанныеДокумента КАК вт_ДанныеДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	//Товары
	|ВЫБРАТЬ
	|	вт_Марки.Номенклатура КАК Номенклатура,
	|	вт_Марки.Количество КАК Количество
	|ИЗ
	|	вт_Марки КАК вт_Марки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	//Марки
	|ВЫБРАТЬ
	|	вт_Марки.КодИдентификации КАК КодИдентификации,
	|	вт_Марки.ВидУпаковки КАК ВидУпаковки,
	|	вт_Марки.GTIN КАК GTIN,
	|	вт_Марки.EAN КАК EAN,
	|	вт_Марки.Номенклатура КАК Номенклатура,
	|	вт_Марки.ВидПродукции КАК ВидПродукции,
	|	вт_Марки.GTINВерхнегоУровня КАК GTINВерхнегоУровня,
	|	вт_Марки.Количество КАК Количество,
	|	вт_Марки.ЦенаЗаЕдиницу КАК ЦенаЗаЕдиницу,
	|	вт_Марки.СуммаНДС КАК СуммаНДС
	|ИЗ
	|	вт_Марки КАК вт_Марки";
			
	Возврат ТекстЗапроса;
	
КонецФункции	

Функция ТекстЗапросаУведомлениеОВвозеЕАЭС(ИмяДокумента)
	
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	ТекстЗапроса =  "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДокументИСМПТ.Ссылка КАК Ссылка,
	|	ДокументИСМПТ.ДокументОснование КАК ДокументОснование,
	|	ДокументИСМПТ.Идентификатор КАК Идентификатор,
	|	ДокументИСМПТ.НомерИСМПТ КАК НомерИСМПТ,
	|	ДокументИСМПТ.Организация КАК Организация,
	|	ДокументИСМПТ.Контрагент КАК Контрагент,
	|	ДокументИСМПТ.Поставщик КАК Поставщик,
	|	ДокументИСМПТ.ПоставщикНаименование КАК ПоставщикНаименование,
	|	ДокументИСМПТ.ПоставщикИдентификационныйНомер КАК ПоставщикИдентификационныйНомер,
	|	ДокументИСМПТ.Получатель КАК Получатель,
	|	ДокументИСМПТ.ПолучательНаименование КАК ПолучательНаименование,
	|	ДокументИСМПТ.ПолучательИдентификационныйНомер КАК ПолучательИдентификационныйНомер,
	|	ДокументИСМПТ.СтранаОтправления КАК СтранаОтправления,
	|	ДокументИСМПТ.ДатаУплатыАкциза КАК ДатаУплатыАкциза,
	|	ДокументИСМПТ.НомерКвитанцииАкциза КАК НомерКвитанцииАкциза,
	|	ДокументИСМПТ.СуммаАкциза КАК СуммаАкциза
	|ПОМЕСТИТЬ вт_ДанныеДокумента
	|ИЗ
	|	Документ.УведомлениеОВвозеИзЕАЭСИСМПТК КАК ДокументИСМПТ
	|ГДЕ
	|	ДокументИСМПТ.Ссылка В(&МассивДокументов)
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаМарки.Ссылка.ДокументОснование КАК ДокументОснование,
	|	ТаблицаМарки.Ссылка.Организация КАК Организация,
	|	ТаблицаМарки.КодМаркировки КАК КодМаркировки,
	|	ТаблицаМарки.КодИдентификации КАК КодИдентификации,
	|	ТаблицаМарки.ВидУпаковки КАК ВидУпаковки,
	|	ТаблицаМарки.GTIN КАК GTIN,
	|	ТаблицаМарки.EAN КАК EAN,
	|	ТаблицаМарки.Номенклатура КАК Номенклатура,
	|	ТаблицаМарки.ВидПродукции КАК ВидПродукции,
	|	ТаблицаМарки.GTINВерхнегоУровня КАК GTINВерхнегоУровня,
	|	ТаблицаМарки.КоличествоИсточник КАК КоличествоИсточник,
	|	ТаблицаМарки.Количество КАК Количество
	|ПОМЕСТИТЬ вт_Марки
	|ИЗ
	|	Документ.УведомлениеОВвозеИзЕАЭСИСМПТК.Марки КАК ТаблицаМарки
	|ГДЕ
	|	ТаблицаМарки.Ссылка В(&МассивДокументов)
	|;
	|////////////////////////////////////////////////////////////////////////////////
	//Реквизиты
	|ВЫБРАТЬ
	|	вт_ДанныеДокумента.ДокументОснование КАК ДокументОснование,
	|	вт_ДанныеДокумента.Идентификатор КАК Идентификатор,
	|	вт_ДанныеДокумента.НомерИСМПТ КАК НомерИСМПТ,
	|	вт_ДанныеДокумента.Организация КАК Организация,
	|	вт_ДанныеДокумента.Контрагент КАК Контрагент,
	|	вт_ДанныеДокумента.Поставщик КАК Поставщик,
	|	вт_ДанныеДокумента.ПоставщикНаименование КАК ПоставщикНаименование,
	|	вт_ДанныеДокумента.ПоставщикИдентификационныйНомер КАК ПоставщикИдентификационныйНомер,
	|	вт_ДанныеДокумента.Получатель КАК Получатель,
	|	вт_ДанныеДокумента.ПолучательНаименование КАК ПолучательНаименование,
	|	вт_ДанныеДокумента.ПолучательИдентификационныйНомер КАК ПолучательИдентификационныйНомер,
	|	вт_ДанныеДокумента.СтранаОтправления КАК СтранаОтправления,
	|	вт_ДанныеДокумента.ДатаУплатыАкциза КАК ДатаУплатыАкциза,
	|	вт_ДанныеДокумента.НомерКвитанцииАкциза КАК НомерКвитанцииАкциза,
	|	вт_ДанныеДокумента.СуммаАкциза КАК СуммаАкциза
	|ИЗ
	|	вт_ДанныеДокумента КАК вт_ДанныеДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	//Товары
	|ВЫБРАТЬ
	|	вт_Марки.ДокументОснование КАК ДокументОснование,
	|	вт_Марки.Организация КАК Организация,
	|	вт_Марки.Номенклатура КАК Номенклатура,
	|	вт_Марки.Количество КАК Количество
	|ИЗ
	|	вт_Марки КАК вт_Марки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	//Марки
	|ВЫБРАТЬ
	|	вт_Марки.ДокументОснование КАК ДокументОснование,
	|	вт_Марки.Организация КАК Организация,
	|	вт_Марки.КодИдентификации КАК КодИдентификации,
	|	вт_Марки.КодМаркировки КАК КодМаркировки,
	|	вт_Марки.ВидУпаковки КАК ВидУпаковки,
	|	вт_Марки.GTIN КАК GTIN,
	|	вт_Марки.EAN КАК EAN,
	|	вт_Марки.Номенклатура КАК Номенклатура,
	|	вт_Марки.ВидПродукции КАК ВидПродукции,
	|	вт_Марки.GTINВерхнегоУровня КАК GTINВерхнегоУровня,
	|	вт_Марки.КоличествоИсточник КАК КоличествоИсточник,
	|	вт_Марки.Количество КАК Количество
	|ИЗ
	|	вт_Марки КАК вт_Марки";
		
	Возврат ТекстЗапроса;
	
КонецФункции	

#КонецОбласти

Функция ПолучитьКусокТекстаЗапросаПоВидуПродукции(ИнфСистема)
	
	Если ИнфСистема = "ИСМПТ" Тогда
		Возврат "И (СправочникНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ТабачнаяПродукция)
		|ИЛИ СправочникНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ОбувнаяПродукция)
		|ИЛИ СправочникНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.МолочнаяПродукция)
		|ИЛИ СправочникНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.АлкогольнаяПродукция)
		|ИЛИ СправочникНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ЛегкаяПромышленность))";
	ИначеЕсли ИнфСистема = "ИСЦЭДМ" Тогда
		Возврат "И СправочникНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ЛекарственныеПрепараты)";
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

Функция ПолучитьТекстЗапросаДляПечатиКМ(КоличествоКПечатиПоКаждомуШК = 0) Экспорт
	
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	ТекстЗапросаШаблон = "ВЫБРАТЬ 
	|	ПулКодовМаркировкиСУЗИСМПТК.GTIN КАК GTIN,
	|	ПулКодовМаркировкиСУЗИСМПТК.ВидПродукции КАК ВидПродукции,
	|	ПулКодовМаркировкиСУЗИСМПТК.ЗаказНаЭмиссию КАК ЗаказНаЭмиссию,
	|	ПулКодовМаркировкиСУЗИСМПТК.КодИдентификации КАК КодИдентификации,
	|	ПулКодовМаркировкиСУЗИСМПТК.Номенклатура КАК Номенклатура,
	|	ПулКодовМаркировкиСУЗИСМПТК.Организация КАК Организация,
	|	ПулКодовМаркировкиСУЗИСМПТК.СпособВводаВОборот КАК СпособВводаВОборот,
	|	ПулКодовМаркировкиСУЗИСМПТК.Характеристика КАК Характеристика,
	|	ПулКодовМаркировкиСУЗИСМПТК.ХешСуммаКодаИдентификации КАК ХешСуммаКодаИдентификации,
	|	ПулКодовМаркировкиСУЗИСМПТК.Шаблон КАК Шаблон,
	|	ПулКодовМаркировкиСУЗИСМПТК.ТипШтрихкода КАК ТипШтрихкода,
	|	ПулКодовМаркировкиСУЗИСМПТК.КодМаркировки КАК Штрихкод
	|	ПОМЕСТИТЬ ВТКодыПромежуточная
	|ИЗ
	|	РегистрСведений.ПулКодовМаркировкиСУЗИСМПТК КАК ПулКодовМаркировкиСУЗИСМПТК
	|ГДЕ
	//Отбор только не распечатанных по дате
	|	ПулКодовМаркировкиСУЗИСМПТК.ДатаПечати = ДАТАВРЕМЯ(1, 1, 1)  
	//Отбор только готовых к печати по статусу
	|	И Не ПулКодовМаркировкиСУЗИСМПТК.Статус В (&НедоступныеСтатусы)
	|	И (";
	
	ТекстЗапросаДопУсловиеШаблон = "%ИЛИ (ПулКодовМаркировкиСУЗИСМПТК.GTIN В(&GTIN)
	|	И ПулКодовМаркировкиСУЗИСМПТК.ЗаказНаЭмиссию = &ЗаказНаЭмиссию)%ЗакрывющаяСкобка
	|";
	
	ТекстЗаказаОбщееУсловие = "";
	СчетчикЦикла = 0;
	
	Пока Не СчетчикЦикла = КоличествоКПечатиПоКаждомуШК Цикл
		
		ИмяПараметрGTIN = "&GTIN" + Строка(СчетчикЦикла + 1);
		ИмяПараметрЗаказНаЭмиссию = "&ЗаказНаЭмиссию" + Строка(СчетчикЦикла + 1);
		
		ТекстЗапросаЭтойСвязки = СтрЗаменить(ТекстЗапросаДопУсловиеШаблон, "&GTIN", 	  	  ИмяПараметрGTIN);
		ТекстЗапросаЭтойСвязки = СтрЗаменить(ТекстЗапросаЭтойСвязки, 	   "&ЗаказНаЭмиссию", ИмяПараметрЗаказНаЭмиссию);
		
		Если СчетчикЦикла = 0 Тогда 
			ТекстЗапросаЭтойСвязки = СтрЗаменить(ТекстЗапросаЭтойСвязки, "%ИЛИ", "");
		Иначе
			ТекстЗапросаЭтойСвязки = СтрЗаменить(ТекстЗапросаЭтойСвязки, "%ИЛИ", "ИЛИ");
		КонецЕсли;
		
		Если СчетчикЦикла = КоличествоКПечатиПоКаждомуШК - 1 Тогда
			ТекстЗапросаЭтойСвязки = СтрЗаменить(ТекстЗапросаЭтойСвязки, "%ЗакрывющаяСкобка", ")");
		Иначе
			ТекстЗапросаЭтойСвязки = СтрЗаменить(ТекстЗапросаЭтойСвязки, "%ЗакрывющаяСкобка", "");
		КонецЕсли;
		
		ТекстЗаказаОбщееУсловие = ТекстЗаказаОбщееУсловие + ТекстЗапросаЭтойСвязки;
		СчетчикЦикла = СчетчикЦикла + 1;
		
	КонецЦикла;
	
	ТекстЗаказаОбщий = ТекстЗапросаШаблон + ТекстЗаказаОбщееУсловие;
	
	ТекстЗапросаСвязкаПакета = ";
	|	///////////////////////////////////////////////////////////////////////////////
	|";
	
	ТекстЗапросаСвязка = "
	|ОБЪЕДИНИТЬ ВСЕ
	|";
	
	ТекстЗапросаКоличествоШаблон = "ВЫБРАТЬ ПЕРВЫЕ %КоличествоКПечати
	|	ВТКодыПромежуточная.GTIN КАК GTIN,
	|	ВТКодыПромежуточная.ВидПродукции КАК ВидПродукции,
	|	ВТКодыПромежуточная.ЗаказНаЭмиссию КАК ЗаказНаЭмиссию,
	|	ВТКодыПромежуточная.КодИдентификации КАК КодИдентификации,
	|	ВТКодыПромежуточная.Номенклатура КАК Номенклатура,
	|	ВТКодыПромежуточная.Организация КАК Организация,
	|	ВТКодыПромежуточная.СпособВводаВОборот КАК СпособВводаВОборот,
	|	ВТКодыПромежуточная.Характеристика КАК Характеристика,
	|	ВТКодыПромежуточная.ХешСуммаКодаИдентификации КАК ХешСуммаКодаИдентификации,
	|	ВТКодыПромежуточная.Шаблон КАК Шаблон,
	|	ВТКодыПромежуточная.ТипШтрихкода КАК ТипШтрихкода,
	|	ВТКодыПромежуточная.Штрихкод КАК Штрихкод,
	|	ИСТИНА КАК ДляПечати
	|ИЗ
	|	ВТКодыПромежуточная КАК ВТКодыПромежуточная
	|ГДЕ
	|	ВТКодыПромежуточная.GTIN = &GTIN
	|	И ВТКодыПромежуточная.ЗаказНаЭмиссию = &ЗаказНаЭмиссию";
	
	ТекстЗаказаКоличествоОбщий = "";
	СчетчикЦикла = 0;
	
	Пока Не СчетчикЦикла = КоличествоКПечатиПоКаждомуШК Цикл
		
		ИмяПараметраКоличество 	  = "КоличествоКПечати" + Строка(СчетчикЦикла + 1);
		ИмяПараметрGTIN 	      = "&GTIN" 		    + Строка(СчетчикЦикла + 1);
		ИмяПараметрЗаказНаЭмиссию = "&ЗаказНаЭмиссию"   + Строка(СчетчикЦикла + 1);
		
		ТекстЗапросаЭтойСвязки = СтрЗаменить(ТекстЗапросаКоличествоШаблон, "КоличествоКПечати", ИмяПараметраКоличество);
		ТекстЗапросаЭтойСвязки = СтрЗаменить(ТекстЗапросаЭтойСвязки, 	   "&GTIN", 			ИмяПараметрGTIN);
		ТекстЗапросаЭтойСвязки = СтрЗаменить(ТекстЗапросаЭтойСвязки, 	   "&ЗаказНаЭмиссию",   ИмяПараметрЗаказНаЭмиссию);
		ТекстЗаказаКоличествоОбщий = ТекстЗаказаКоличествоОбщий + ТекстЗапросаЭтойСвязки;
		
		Если Не СчетчикЦикла = КоличествоКПечатиПоКаждомуШК - 1 Тогда
			ТекстЗаказаКоличествоОбщий = ТекстЗаказаКоличествоОбщий + ТекстЗапросаСвязка;
		КонецЕсли;
		
		СчетчикЦикла = СчетчикЦикла + 1;
		
	КонецЦикла;
	
	ТекстЗаказаОбщий = ТекстЗаказаОбщий + ТекстЗапросаСвязкаПакета + ТекстЗаказаКоличествоОбщий;
	
	Возврат ТекстЗаказаОбщий;
	
КонецФункции

#Область ПроверкаЗаполненияДокументовИСМПТ

Функция ТабличныеЧастиДокументаИСМПТ(ДокументИСМПТ)
	
	ТабличныеЧастиВыбора = Новый СписокЗначений;	
	
	Если ТипЗнч(ДокументИСМПТ.Ссылка) = Тип("ДокументСсылка.УведомлениеОВвозеИзТретьихСтранИСМПТК") Тогда
		ТабличныеЧастиВыбора.Добавить("Марки"                , НСтр("ru = 'Марки'"));
		ТабличныеЧастиВыбора.Добавить("ДокументыСоответствия", НСтр("ru = 'Документы соответствия'"));
	КонецЕсли;
	
	Возврат ТабличныеЧастиВыбора;	
	
КонецФункции

Процедура ДокументАПП_ОбработкаПроверкиЗаполнения(ДокументИСМПТ, Отказ, ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов) Экспорт
	
	Возврат;
	
КонецПроцедуры

Процедура ДокументЭкспортЕАЭС_ОбработкаПроверкиЗаполнения(ДокументИСМПТ, Отказ, ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов) Экспорт
	
	Возврат;
	
КонецПроцедуры

Процедура ДокументПриемкаЕАЭС_ОбработкаПроверкиЗаполнения(ДокументИСМПТ, Отказ, ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов) Экспорт
	
	Возврат;
	
КонецПроцедуры

Процедура ДокументУОР_ОбработкаПроверкиЗаполнения(ДокументИСМПТ, Отказ, ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов) Экспорт
	
	ЕстьТовары = Ложь;
	ПроверяемыеТабличныеЧасти = ТабличныеЧастиДокументаИСМПТ(ДокументИСМПТ);
	Для Каждого ТабличнаяЧасть Из ПроверяемыеТабличныеЧасти Цикл
		Если ДокументИСМПТ[ТабличнаяЧасть.Значение] <> Неопределено Тогда
			ДокументИСМПТ_ПроверитьЗаполнениеТабличнойЧастиПострочно(ДокументИСМПТ, ДокументИСМПТ[ТабличнаяЧасть.Значение], ТабличнаяЧасть.Значение, ТабличнаяЧасть.Представление, Отказ, ЕстьТовары);
		КонецЕсли;
	КонецЦикла; 
		
КонецПроцедуры

Процедура ДокументВВО_ОбработкаПроверкиЗаполнения(ДокументИСМПТ, Отказ, ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов) Экспорт
	
	ПроверяемыеРеквизиты.Добавить("ПричинаВводаВОборот");
	
КонецПроцедуры

Процедура ДокументВИО_ОбработкаПроверкиЗаполнения(ДокументИСМПТ, Отказ, ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов) Экспорт
	
	Возврат;
	
КонецПроцедуры

Процедура УведомлениеОВвозеЕАЭС_ОбработкаПроверкиЗаполнения(ДокументИСМПТ, Отказ, ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов) Экспорт
	
	Возврат;
	
КонецПроцедуры

Процедура УведомлениеОВвозеТретьиСтраны_ОбработкаПроверкиЗаполнения(ДокументИСМПТ, Отказ, ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов) Экспорт
	
	Возврат;
	
КонецПроцедуры

Процедура ДокументИСМПТ_ПроверитьЗаполнениеТабличнойЧастиПострочно(ОбъектДокумент, ПроверяемаяТабличнаяЧасть, ИмяТабличнойЧасти, ПредставлениеИмяТабличнойЧасти, Отказ, ЕстьТовары = Ложь)
	
	Если ПроверяемаяТабличнаяЧасть.Количество() = 0 Тогда
		ТекстСообщения = СтрШаблон(НСтр("ru = '%1. Данные не заполнены.'"), ПредставлениеИмяТабличнойЧасти);
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения,,,, Отказ);
		Возврат;
	КонецЕсли;
	
	МетаданныеДокумента = ОбъектДокумент.Метаданные();
	
	Для Каждого СтрокаТабличнойЧасти Из ПроверяемаяТабличнаяЧасть Цикл
		
		ЕстьТовары = Истина;
		
		ПроверяемыеРеквизиты = Новый Массив;
		Если ИмяТабличнойЧасти = "Товары" Тогда
			ПроверяемыеРеквизиты.Добавить("Номенклатура");
			ПроверяемыеРеквизиты.Добавить("ТНВЭД");
			ПроверяемыеРеквизиты.Добавить("КоличествоИсточник");
			ПроверяемыеРеквизиты.Добавить("СтранаПроизводства");
			ПроверяемыеРеквизиты.Добавить("НомерПозицииВДекларацииИлиЗаявлении");
		ИначеЕсли ИмяТабличнойЧасти = "Марки" Тогда
			ПроверяемыеРеквизиты.Добавить("КодИдентификации");
			ПроверяемыеРеквизиты.Добавить("Количество");
			ПроверяемыеРеквизиты.Добавить("GTIN");
		ИначеЕсли ИмяТабличнойЧасти = "ДокументыСоответствия" Тогда
			ПроверяемыеРеквизиты.Добавить("ТипДокумента");
			ПроверяемыеРеквизиты.Добавить("ДатаДокумента");
			ПроверяемыеРеквизиты.Добавить("НомерДокумента");
		КонецЕсли;
		
		Для Каждого ПроверяемыйРеквизит Из ПроверяемыеРеквизиты Цикл
			Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти[ПроверяемыйРеквизит]) Тогда
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Не заполнена колонка ""%1"" в строке %2 списка ""%3""'"),
					МетаданныеДокумента.ТабличныеЧасти[ИмяТабличнойЧасти].Реквизиты[ПроверяемыйРеквизит].Представление(),
					Формат(СтрокаТабличнойЧасти.НомерСтроки, "ЧН=0; ЧГ="),
					ПредставлениеИмяТабличнойЧасти);
				Поле = ИмяТабличнойЧасти + "[" + Формат(ПроверяемаяТабличнаяЧасть.Индекс(СтрокаТабличнойЧасти), "ЧН=0; ЧГ=") + "]." + ПроверяемыйРеквизит;
				ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения, ОбъектДокумент, Поле, "Объект", Отказ);
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

Процедура ЗаполнитьСоответсвиеИменРеквизитовПолейЗапросов(СоответсвиеИменРеквизитовПолейЗапросов) Экспорт
	
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	Для Каждого ЭлементСоответсвия Из СоответсвиеИменРеквизитовПолейЗапросов Цикл
		Значение = "";
		Если ЭлементСоответсвия.Ключ = "%ТекстПоляТипИзмеряемойВеличины" Тогда	
			
		ИначеЕсли ЭлементСоответсвия.Ключ = "%ДанныеДокументаЕдиницаИзмерения" Тогда	
			
		ИначеЕсли ЭлементСоответсвия.Ключ = "%СтруктурнаяЕдиницаИдентификационныйНомер"	Тогда	
			Значение = "ИдентификационныйНомер";
			
		ИначеЕсли ЭлементСоответсвия.Ключ = "%КонтрагентИНН"	Тогда	
			Значение = "ИдентификационныйКодЛичности";
			
		ИначеЕсли ЭлементСоответсвия.Ключ = "%ОрганизацияИНН"	Тогда	
			Значение = "ИдентификационныйНомер";
			
		ИначеЕсли ЭлементСоответсвия.Ключ = "%БуквенныйКодВалюты"	Тогда	
			Значение = "БуквенныйКод";
			
		ИначеЕсли ЭлементСоответсвия.Ключ = "%ИмяРеквизитаВладелецДоговора"	Тогда	
			Значение = "Контрагент";
			
		ИначеЕсли ЭлементСоответсвия.Ключ = "%ИмяРеквизитаОрганизацияДоговора"	Тогда	
			Значение = "Организация";
			
		ИначеЕсли ЭлементСоответсвия.Ключ = "%ДоговорНомер"	Тогда	
			Значение = "НомерДоговора";
			
		ИначеЕсли ЭлементСоответсвия.Ключ = "%ДоговорДата"	Тогда	
			Значение = "ДатаДоговора";
			
		ИначеЕсли ЭлементСоответсвия.Ключ = "%ЕдиницаИзмерения"	Тогда
			Значение = "БазоваяЕдиницаИзмерения";			
			
		ИначеЕсли ЭлементСоответсвия.Ключ = "%КодТНВЭД"	Тогда
			Значение = "ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.Номенклатура).КодТНВЭД"
			
		ИначеЕсли ЭлементСоответсвия.Ключ = "%КлассификаторСтранМира" Тогда
			Значение = "Справочник.КлассификаторСтранМира"

		КонецЕсли;
		
		СоответсвиеИменРеквизитовПолейЗапросов.Вставить(ЭлементСоответсвия.Ключ, Значение);
	КонецЦикла;
	
КонецПроцедуры

Функция ПроверитьНаличиеСвязанногоДокументаИСМПТ(Основание, ЭтоПроверкаИзОснования = Ложь, ИмяКоманды = Неопределено) Экспорт
	
	Возврат РаботаСДокументамиИСМПТК.ПроверитьНаличиеСвязанногоДокументаМаркировки_Общая(Основание, ЭтоПроверкаИзОснования, ИмяКоманды);
	
КонецФункции

Процедура ЗаписатьШтрихкодНоменклатуры(Номенклатура, ШтрихкодEAN, ЕИ = Неопределено, Характеристика) Экспорт
	
	ОбщегоНазначенияИСМПТКПереопределяемый.ЗаписатьШтрихкодНоменклатуры(Номенклатура, ШтрихкодEAN, ЕИ, Характеристика);
	
КонецПроцедуры

Функция ПолучитьЕдиницуИзмерения(Номенклатура) Экспорт 
	
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	ЕдиницаИзмерения = ОбщегоНазначенияИСМПТК.ЗначениеРеквизитаОбъекта(Номенклатура, "БазоваяЕдиницаИзмерения");
	///////////////////
	
	Возврат ЕдиницаИзмерения;
	
КонецФункции

Функция ЭтоДокументПТУ(Ссылка) Экспорт
	
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	Возврат ?(ТипЗнч(Ссылка) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг"), Истина, Ложь);
	///////////////////
	
КонецФункции

Функция ДокументНеПоддерживаетСозданиеНовогоДляИСМПТ(Документ) Экспорт
	
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.ОприходованиеТоваров")
		ИЛИ ТипЗнч(Документ) = Тип("ДокументСсылка.СписаниеТоваров")
		ИЛИ ТипЗнч(Документ) = Тип("ДокументСсылка.ТребованиеНакладная")
		ИЛИ ТипЗнч(Документ) = Тип("ДокументСсылка.РеализацияТоваровУслуг") 
		ИЛИ ТипЗнч(Документ) = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ВидОперации = Документ.ВидОперации;
	Если (ТипЗнч(Документ) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") 
		И Не ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.Импорт"))
		Или ТипЗнч(Документ) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
		Возврат Истина;
	КонецЕсли;
	///////////////////
	
	Возврат Ложь;
	
КонецФункции

Функция ВДокументеНужноЗаполнятьМаркиИзОснованияИСМПТ(ИмяДокументаИСМПТ, ДокументОснованиеДляЗаполнения) Экспорт
	
	Возврат (ИмяДокументаИСМПТ = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОВыводеИзОборотаИСМПТК()
			И ТипЗнч(ДокументОснованиеДляЗаполнения) = Тип("ДокументСсылка.АктПриемаПередачиИСМПТК"))
		ИЛИ (ИмяДокументаИСМПТ = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаАктПриемаПередачиИСМПТК()
			И ТипЗнч(ДокументОснованиеДляЗаполнения) = Тип("ДокументСсылка.УведомлениеОРасхожденииИСМПТК"))
		ИЛИ (ИмяДокументаИСМПТ = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОРасхожденииИСМПТК()
			И ТипЗнч(ДокументОснованиеДляЗаполнения) = Тип("ДокументСсылка.АктПриемаПередачиИСМПТК"))
		ИЛИ (ИмяДокументаИСМПТ = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОПриемкеЕАЭСИСМПТК()
			И ТипЗнч(ДокументОснованиеДляЗаполнения) = Тип("ДокументСсылка.УведомлениеОбОтгрузкеЕАЭСИСМПТК"))
		ИЛИ (ИмяДокументаИСМПТ = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОВвозеИзЕАЭСИСМПТК()
			И ТипЗнч(ДокументОснованиеДляЗаполнения) = Тип("ДокументСсылка.УведомлениеОВвозеИзЕАЭСИСМПТК"));
			
КонецФункции

#Область ЗаполнениеЗначенийПоУмолчаниюПриСозданииИСМПТ

//Получение значений некоторых реквизитов документа ИС МПТ, которые могут зависеть от выбранного документа-основания.
//Вызывается из обработки заполнения документа ИС МПТ в модуле объекта.
Функция ПолучитьЗначенияПоУмолчаниюДляСозданияАктаПриемаПередачиИСМПТ(ДокументыОснования) Экспорт

	//ПЕРЕОПРЕДЕЛЕНИЕ//
	СтруктураРеквизитов = Новый Структура();
	СтруктураРеквизитов.Вставить("ВидОперации",    ПредопределенноеЗначение("Перечисление.ХозяйственныеОперацииИСМПТК.Реализация"));
	СтруктураРеквизитов.Вставить("ТипАкта", 	   ПредопределенноеЗначение("Перечисление.ВидыДокументаИСМПТК.Исходный"));
	СтруктураРеквизитов.Вставить("Направление",    ПредопределенноеЗначение("Перечисление.НаправленияДокументовИСМПТК.Исходящий"));
	СтруктураРеквизитов.Вставить("Автор",  		   ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ТекущийПользователь());
	СтруктураРеквизитов.Вставить("ТоварнаяГруппа", ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.ПустаяСсылка"));
	СтруктураРеквизитов.Вставить("ЭтапОформления", ПредопределенноеЗначение("Перечисление.ЭтапыОформленияДокументовИСЦЭДМ.ВРаботе"));
	
	Возврат СтруктураРеквизитов;
	
КонецФункции

//Получение значений некоторых реквизитов документа ИС МПТ, которые могут зависеть от выбранного документа-основания.
//Вызывается из обработки заполнения документа ИС МПТ в модуле объекта.
Функция ПолучитьЗначенияПоУмолчаниюДляСозданияУведомленияОВводеИСМПТ(ДокументыОснования) Экспорт

	//ПЕРЕОПРЕДЕЛЕНИЕ//
	СтруктураРеквизитов = Новый Структура();
	СтруктураРеквизитов.Вставить("ПричинаВводаВОборот", ПредопределенноеЗначение("Перечисление.ПричиныПовторногоВводаКМВОборотИСМПТК.Излишки"));
	СтруктураРеквизитов.Вставить("Автор",  		   ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ТекущийПользователь());
	СтруктураРеквизитов.Вставить("ТоварнаяГруппа", ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.ПустаяСсылка"));
	СтруктураРеквизитов.Вставить("ЭтапОформления", ПредопределенноеЗначение("Перечисление.ЭтапыОформленияДокументовИСЦЭДМ.ВРаботе"));
	СтруктураРеквизитов.Вставить("Направление",    ПредопределенноеЗначение("Перечисление.НаправленияДокументовИСМПТК.Исходящий"));
	
	ДанныеДляРазбора = ДокументыОснования[0]; 
	СтруктураРеквизитов.Вставить("ДокументОснованиеНаименование", Строка(ТипЗнч(ДанныеДляРазбора)));
	СтруктураРеквизитов.Вставить("ДокументОснованиеДата",  ДанныеДляРазбора.Дата);
	СтруктураРеквизитов.Вставить("ДокументОснованиеНомер", ДанныеДляРазбора.Номер);
	
	Возврат СтруктураРеквизитов;
	
КонецФункции

//Получение значений некоторых реквизитов документа ИС МПТ, которые могут зависеть от выбранного документа-основания.
//Вызывается из обработки заполнения документа ИС МПТ в модуле объекта.
Функция ПолучитьЗначенияПоУмолчаниюДляСозданияУведомленияОВыводеИСМПТ(ДокументыОснования) Экспорт
	
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	СтруктураРеквизитов = Новый Структура();
	СтруктураРеквизитов.Вставить("ПричинаВыводаИзОборота", ПредопределенноеЗначение("Перечисление.ПричиныВыводаКМИзОборотаИСМПТК.Другое"));
	СтруктураРеквизитов.Вставить("Автор",  		   ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ТекущийПользователь());
	СтруктураРеквизитов.Вставить("ТоварнаяГруппа", ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.ПустаяСсылка"));
	СтруктураРеквизитов.Вставить("ЭтапОформления", ПредопределенноеЗначение("Перечисление.ЭтапыОформленияДокументовИСЦЭДМ.ВРаботе"));
	СтруктураРеквизитов.Вставить("Направление",    ПредопределенноеЗначение("Перечисление.НаправленияДокументовИСМПТК.Исходящий"));
	
	ДанныеДляРазбора = ДокументыОснования[0]; 
	СтруктураРеквизитов.Вставить("ДокументОснованиеНаименование", Строка(ТипЗнч(ДанныеДляРазбора)));
	СтруктураРеквизитов.Вставить("ДокументОснованиеДата",  ДанныеДляРазбора.Дата);
	СтруктураРеквизитов.Вставить("ДокументОснованиеНомер", ДанныеДляРазбора.Номер);
	
	Возврат СтруктураРеквизитов;
	
КонецФункции

//Получение значений некоторых реквизитов документа ИС МПТ, которые могут зависеть от выбранного документа-основания.
//Вызывается из обработки заполнения документа ИС МПТ в модуле объекта.
Функция ПолучитьЗначенияПоУмолчаниюДляСозданияУведомленияОВвозеЕАЭСИСМПТ(ДокументыОснования) Экспорт

	//ПЕРЕОПРЕДЕЛЕНИЕ//
	СтруктураРеквизитов = Новый Структура();
	СтруктураРеквизитов.Вставить("Автор",          ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ТекущийПользователь());
	СтруктураРеквизитов.Вставить("ТоварнаяГруппа", ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.ПустаяСсылка"));
	СтруктураРеквизитов.Вставить("Направление",    ПредопределенноеЗначение("Перечисление.НаправленияДокументовИСМПТК.Исходящий"));
	
	ДанныеДляРазбора = ДокументыОснования[0];
	СтруктураРеквизитов.Вставить("СтранаОтправления", РаботаСДокументамиИСМПТКПереопределяемый.ПолучитьСтрануОтправленияВвозИзЕАЭС(ДанныеДляРазбора.Контрагент));
	
	Возврат СтруктураРеквизитов;
	
КонецФункции

//Получение значений некоторых реквизитов документа ИС МПТ, которые могут зависеть от выбранного документа-основания.
//Вызывается из обработки заполнения документа ИС МПТ в модуле объекта.
Функция ПолучитьЗначенияПоУмолчаниюДляСозданияУведомленияОВвозеИмпортИСМПТ(ДокументыОснования) Экспорт
	
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	СтруктураРеквизитов = Новый Структура();
	СтруктураРеквизитов.Вставить("Автор",          ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ТекущийПользователь());
	СтруктураРеквизитов.Вставить("ТоварнаяГруппа", ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.ПустаяСсылка"));
	СтруктураРеквизитов.Вставить("Направление",    ПредопределенноеЗначение("Перечисление.НаправленияДокументовИСМПТК.Исходящий"));
	
	ДанныеДляРазбора = ДокументыОснования[0];
	СтруктураРеквизитов.Вставить("СтранаОтправления", РаботаСДокументамиИСМПТКПереопределяемый.ПолучитьСтрануОтправленияВвозИзЕАЭС(ДанныеДляРазбора.Контрагент));
		
	Возврат СтруктураРеквизитов;
	
КонецФункции

//Получение значений некоторых реквизитов документа ИС МПТ, которые могут зависеть от выбранного документа-основания.
//Вызывается из обработки заполнения документа ИС МПТ в модуле объекта.
Функция ПолучитьЗначенияПоУмолчаниюДляСозданияУведомленияОбЭкспортеИСМПТ(ДокументыОснования) Экспорт
	
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	СтруктураРеквизитов = Новый Структура();
	СтруктураРеквизитов.Вставить("Автор", 		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ТекущийПользователь());
	СтруктураРеквизитов.Вставить("Направление", ПредопределенноеЗначение("Перечисление.НаправленияДокументовИСМПТК.Исходящий"));
	СтруктураРеквизитов.Вставить("ТоварнаяГруппа", 	 ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.Обувная"));
	СтруктураРеквизитов.Вставить("СтранаПолучатель", ЗаполнитьСтрануПоУмолчаниюПризнаниеКодовЕАЭС());
		
	Возврат СтруктураРеквизитов;
	
КонецФункции

//Получение значений некоторых реквизитов документа ИС МПТ, которые могут зависеть от выбранного документа-основания.
//Вызывается из обработки заполнения документа ИС МПТ в модуле объекта.
Функция ПолучитьЗначенияПоУмолчаниюДляСозданияУведомленияОПриемкеИСМПТ(ДокументыОснования) Экспорт
	
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	СтруктураРеквизитов = Новый Структура();
	СтруктураРеквизитов.Вставить("Автор", 		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ТекущийПользователь());
	СтруктураРеквизитов.Вставить("Направление", ПредопределенноеЗначение("Перечисление.НаправленияДокументовИСМПТК.Исходящий"));
	СтруктураРеквизитов.Вставить("ТоварнаяГруппа", 	   ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.Обувная"));
	СтруктураРеквизитов.Вставить("ОтклонитьВсеТовары", Ложь);
	СтруктураРеквизитов.Вставить("ДатаПриемки", ТекущаяДатаСеанса());
			
	Возврат СтруктураРеквизитов;
	
КонецФункции

//Получение значений некоторых реквизитов документа ИС МПТ, которые могут зависеть от выбранного документа-основания.
//Вызывается из обработки заполнения документа ИС МПТ в модуле объекта.
Функция ПолучитьЗначенияПоУмолчаниюДляСозданияУведомленияОРасхожденияхИСМПТ(ДокументыОснования) Экспорт

	//ПЕРЕОПРЕДЕЛЕНИЕ//
	СтруктураРеквизитов = Новый Структура();
	СтруктураРеквизитов.Вставить("Направление",  ПредопределенноеЗначение("Перечисление.НаправленияДокументовИСМПТК.Исходящий"));
	СтруктураРеквизитов.Вставить("Автор",  		 ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ТекущийПользователь());
	
	ДанныеДляРазбора = ДокументыОснования[0];
	СтруктураРеквизитов.Вставить("ВидОперации",  ДанныеДляРазбора.ВидОперации);
	
	Возврат СтруктураРеквизитов;
	
КонецФункции

#КонецОбласти

#Область ЗаказКодовВСУЗ

Функция ПолучитьДанныеДокументаОснованияЗаказаКМНаСервере(ДокументОснование) Экспорт
	
	ТекстЗапроса = "";
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	///////////////////
	
	ТекстЗапроса = ДополнитьТекстЗапросЗаполненияЗаказКодов(ТекстЗапроса);
	
	Запрос = Новый Запрос();
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("МассивДокументов", ДокументОснование);
	
	РезультатЗапроса  = Запрос.ВыполнитьПакет();
	КоличествоПакетов = РезультатЗапроса.Количество();
	
	ТаблицаРеквизиты = РезультатЗапроса[КоличествоПакетов - 2].Выгрузить();
	Реквизиты = Новый Структура();
	
	Для Каждого Строка Из ТаблицаРеквизиты Цикл
		
		Реквизиты.Вставить("Организация", 		 Строка.Организация);
		Реквизиты.Вставить("ВидПродукции", 		 Строка.ВидПродукции);
		Реквизиты.Вставить("Ответственный", 	 Строка.Ответственный);
		Реквизиты.Вставить("ДокументОснование",  Строка.ДокументОснование);
		Реквизиты.Вставить("СпособВводаВОборот", Строка.СпособВводаВОборот);
		
	КонецЦикла;
	
	ТаблицаТовары = РезультатЗапроса[КоличествоПакетов - 1].Выгрузить(); 
	Товары = Новый Массив();
	
	Для Каждого Строка Из ТаблицаТовары Цикл
		
		//Из запроса получаем EAN, а для заполнения в документе нужно указывать GTIN 
		GTIN = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.GTINПоШтрихкодуEAN(Строка.GTIN);
		
		СтрокаТовары = Новый Структура();
		СтрокаТовары.Вставить("Номенклатура", 	  	  	 Строка.Номенклатура);
		СтрокаТовары.Вставить("Характеристика",   		 Строка.Характеристика);
		СтрокаТовары.Вставить("Упаковка", 	 			 Строка.Упаковка);
		СтрокаТовары.Вставить("КоличествоУпаковок", 	 Строка.КоличествоУпаковок);
		СтрокаТовары.Вставить("Количество", 	  		 Строка.Количество);
		СтрокаТовары.Вставить("ЕдиницаИзмеренияБазовая", Строка.ЕдиницаИзмеренияБазовая);
		СтрокаТовары.Вставить("GTIN", 					 GTIN);
		
		Товары.Добавить(СтрокаТовары);
		
	КонецЦикла;
	
	ДанныеДокументаОснования = Новый Структура();
	ДанныеДокументаОснования.Вставить("Реквизиты", Реквизиты);
	ДанныеДокументаОснования.Вставить("Товары",	   Товары);
	
	Возврат ДанныеДокументаОснования;
	
КонецФункции

Функция ПолучитьТекстЗапросаДляМассиваЗаказКодов(МассивВидовДокумента)
	
	ТекстЗапроса = "";
	Для Каждого ЭлементМассива Из МассивВидовДокумента Цикл
		
		ТекстЗапросаДокумента = "";
		
		//ПЕРЕОПРЕДЕЛЕНИЕ//
		///////////////////
		
		Если ТекстЗапроса <> "" И ТекстЗапросаДокумента <> "" Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|"  
		КонецЕсли;	
		
		ТекстЗапроса = ТекстЗапроса + ТекстЗапросаДокумента;
		
	КонецЦикла;	
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПодготовитьТекстЗапросаДляЗаполненияЗаказКодов(ПараметрыЗаполнения) Экспорт
	
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	ЭтоТорговоеРешение = ОбщегоНазначенияИСМПТКПереопределяемый.ПроверитьЭтоТорговоеРешение();
			
	ДокументыОснования 	 = ПараметрыЗаполнения.МассивДокументов;
	МассивВидовДокумента = ПараметрыЗаполнения.МассивВидовДокумента;
	
	Если ТипЗнч(ДокументыОснования) = Тип("Массив") Тогда
		ТекстЗапроса = ПолучитьТекстЗапросаДляМассиваЗаказКодов(МассивВидовДокумента);
		Если ТекстЗапроса = "" Тогда
			Возврат Неопределено;
		КонецЕсли;	   
	///////////////////	
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ДополнитьТекстЗапросЗаполненияЗаказКодов(ТекстЗапроса) Экспорт
	
	ТекстЗапроса = ТекстЗапроса + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	вт_ДанныеДокумента.Организация,
	|	вт_ДанныеДокумента.ВидПродукции,
	|	вт_ДанныеДокумента.Ответственный,
	|	вт_ДанныеДокумента.ДокументОснование,
	|	вт_ДанныеДокумента.Номенклатура,
	|	вт_ДанныеДокумента.Характеристика,
	|	вт_ДанныеДокумента.Упаковка,
	|	вт_ДанныеДокумента.КоличествоУпаковок,
	|	вт_ДанныеДокумента.Количество,
	|	вт_ДанныеДокумента.ЕдиницаИзмеренияБазовая,
	|	вт_ДанныеДокумента.СпособВводаВОборот,
	|	вт_ДанныеДокумента.GTIN
	|ПОМЕСТИТЬ вт_ДанныеДляЗаполнения
	|ИЗ
	|	вт_ДанныеДокумента КАК вт_ДанныеДокумента
	|ГДЕ
	|	вт_ДанныеДокумента.Количество > 0
	|";
	
	Возврат ТекстЗапроса + РаботаСДокументамиИСМПТК.ПолучитьТекстПакетовЗапросаДляЗаполненияЗаказКодов();
	
КонецФункции

// Используется в документе ЗаказНаЭмиссиюКодовМаркировкиСУЗ при заполнении ТЧ. 
// Функция возвращает значение GTIN из РС ШтрихкодыНоменклатуры по совпадению полей Номенклатура, Характеристика (если используются), Упаковка (если заполнена),
// если штрихкод не найден, если найден, но не EAN13 или если  
// 
Функция ПодобратьGTINДляЗаказа(Номенклатура, Упаковка, Характеристика, ХарактеристикиИспользуются, ЭтоТабак = Ложь) Экспорт
	
	Возврат РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйПереопределяемый.ПодобратьGTINДляЗаказа(Номенклатура, Упаковка, Характеристика, ХарактеристикиИспользуются, ЭтоТабак);
	
КонецФункции

Функция ПолучитьСписокВсехGTINНоменклатуры(Номенклатура) Экспорт
	
	Запрос = Новый Запрос();
	ТекстЗапроса = "ВЫБРАТЬ
	|	ШтрихкодыНоменклатуры.Штрихкод КАК Штрихкод,
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	|	ШтрихкодыНоменклатуры.Номенклатура КАК Номенклатура,
	|	ШтрихкодыНоменклатуры.Номенклатура.Представление КАК ПредставлениеНоменклатура,
	|	"""" КАК Характеристика,
	|	ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка) КАК Упаковка,
	|	"""" КАК ПредставлениеХарактеристика,
	|	"""" КАК ПредставлениеУпаковка
	|ИЗ
	|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|ГДЕ
	|	ШтрихкодыНоменклатуры.Номенклатура = &Номенклатура";
	///////////////////
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	СпискоЗначенийШтрихКодов = Новый СписокЗначений;
	
	Пока Выборка.Следующий() Цикл
		GTIN 				= РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.GTINПоШтрихкодуEAN(Выборка.Штрихкод);
		ПредставлениеКода 	= "" + GTIN + " / " + Выборка.ПредставлениеНоменклатура + " / " + Выборка.ПредставлениеХарактеристика + " / " + Выборка.ПредставлениеУпаковка;
		
		СпискоЗначенийШтрихКодов.Добавить(GTIN, ПредставлениеКода);
	КонецЦикла;
	
	Возврат СпискоЗначенийШтрихКодов;
	
КонецФункции

Функция ПодобратьДанныеПоGTINДляЗаказа(МассивGTIN) Экспорт
	
	Возврат ОбщегоНазначенияИСМПТКПереопределяемый.ПодобратьДанныеПоGTINДляЗаказа(МассивGTIN);
	
КонецФункции

Функция ПолучитьДанныеОНоменклатуреПоGTIN(ТаблицаШК) Экспорт
	
	Возврат ОбщегоНазначенияИСМПТКПереопределяемый.ПолучитьДанныеОНоменклатуреПоGTIN(ТаблицаШК);
	
КонецФункции

Функция МассивGTINМаркированногоТовара(Номенклатура, Характеристика, Упаковка) Экспорт
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	ШтрихкодыНоменклатуры.Штрихкод
	|ИЗ
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|ГДЕ
	|	ШтрихкодыНоменклатуры.Номенклатура = &Номенклатура
	///////////////////
	|	<Упаковка>";
	
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "<Упаковка>", "");
	///////////////////
	
	Запрос = Новый Запрос();
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Номенклатура",   Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", Характеристика);
	Если ЗначениеЗаполнено(Упаковка) Тогда
		Запрос.УстановитьПараметр("Упаковка",   Упаковка);
	КонецЕсли;
	
	МассивШтрихкодов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Штрихкод");
	СписокGTIN =  Новый Массив;
	
	Для Каждого Штрихкод Из МассивШтрихкодов Цикл
		
		Если РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ПроверитьКорректностьGTIN(Штрихкод) Тогда
			СписокGTIN.Добавить(Штрихкод);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СписокGTIN;
	
КонецФункции

Функция ЗаполнитьЗаказИзПодбора(ТаблицаТоваров, ВидПродукции, АдресТоваровВХранилище) Экспорт
	
	ТаблицаПодбора = ПолучитьИзВременногоХранилища(АдресТоваровВХранилище);
	ПроверятьВидПродукции = Не ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.ПустаяСсылка");
	
	Для Каждого СтрокаТоваров Из ТаблицаПодбора Цикл
		
		ВидПродукцииНоменклатуры = ОбщегоНазначенияИСМПТКПереопределяемый.ПолучитьВидПродукцииПоНоменклатуре(СтрокаТоваров.Номенклатура);
		
		Если Не ВидПродукцииНоменклатуры = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.ПустаяСсылка") 
			И (Не ПроверятьВидПродукции Или ВидПродукции = ВидПродукцииНоменклатуры)Тогда
			
			Характеристика = "";
			ХарактеристикиИспользуются = Ложь;
			
			УпаковкаНеШтучная = ОбщегоНазначенияИСМПТКПереопределяемый.УпаковкаНеШтучная(СтрокаТоваров.Номенклатура, "");
			
			Если ВидПродукцииНоменклатуры = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.Табачная") Тогда 
				//Для табака важна конкретная упаковка в регистре, т.к. от этого зависит шаблон кода: на базовую ЕИ выставляется пачка сигарет, на упаковку - блок.
				ДанныеШтрихкодов = ПодобратьGTINДляЗаказа(СтрокаТоваров.Номенклатура, "", Характеристика, ХарактеристикиИспользуются, Истина);
			Иначе
				//Для остальных ТГ не принципиально значение упаковки, т.к. групповых не поддерживается или они имеют такой же шаблон кода, как потребительские.
				ДанныеШтрихкодов = ПодобратьGTINДляЗаказа(СтрокаТоваров.Номенклатура, "", Характеристика, ХарактеристикиИспользуются);
			КонецЕсли;
			
			Если ДанныеШтрихкодов.Количество() = 0 Тогда
				ТекстСообщения = НСтр("ru='Для номенклатуры %1 не зарегистрирован штрихкод! Добавление невозможно.'");
				ТекстСообщения = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, СтрокаТоваров.Номенклатура);
				ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения, , , "Форма.Объект");
				Продолжить;
			ИначеЕсли ДанныеШтрихкодов.Количество() = 1 Тогда
				GTIN = ДанныеШтрихкодов[0];
			Иначе
				GTIN = "";
			КонецЕсли;
			
			Если ВидПродукцииНоменклатуры = Перечисления.ВидыПродукцииИСМПТК.Обувная Тогда
				Шаблон = Перечисления.ШаблоныКодовМаркировкиСУЗИСМПТК.Обувь;
				
			ИначеЕсли ВидПродукцииНоменклатуры = Перечисления.ВидыПродукцииИСМПТК.МолочнаяПродукция Тогда
				Шаблон = Перечисления.ШаблоныКодовМаркировкиСУЗИСМПТК.МолочнаяПродукция;
				
			ИначеЕсли ВидПродукцииНоменклатуры = Перечисления.ВидыПродукцииИСМПТК.ЛекарственныеПрепараты Тогда
				Шаблон = Перечисления.ШаблоныКодовМаркировкиСУЗИСМПТК.ЛекарственныеПрепараты;
				
			ИначеЕсли ВидПродукцииНоменклатуры = Перечисления.ВидыПродукцииИСМПТК.ЛегкаяПромышленность Тогда
				Шаблон = Перечисления.ШаблоныКодовМаркировкиСУЗИСМПТК.ЛегкаяПромышленность;
				
			ИначеЕсли ВидПродукцииНоменклатуры = Перечисления.ВидыПродукцииИСМПТК.Табачная Тогда
				Шаблон = Перечисления.ШаблоныКодовМаркировкиСУЗИСМПТК.ТабачнаяПачка;
			Иначе
				//Значение по умолчанию
				Шаблон = ИнтеграцияИСМПТКВызовСервера.ПолучитьШаблонДляНоменклатурыЗаказа(СтрокаТоваров.Номенклатура);
			КонецЕсли;
			
			НоваяСтрока = ТаблицаТоваров.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТоваров,,"Количество");
			
			НоваяСтрока.Количество 		   = СтрокаТоваров.Количество;
			НоваяСтрока.КоличествоУпаковок = СтрокаТоваров.Количество;
			
			НоваяСтрока.GTIN = GTIN;
			Если GTIN = "" Тогда
				ТекстСообщения = НСтр("ru='В строке %1 требуется уточнение GTIN.'");
				ТекстСообщения = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, НоваяСтрока.НомерСтроки);
				ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения, , , "Форма.Объект");
			КонецЕсли;
			
			НоваяСтрока.Шаблон = Шаблон;
			НоваяСтрока.СпособФормированияСерийногоНомера = ПредопределенноеЗначение("Перечисление.СпособыФормированияСерийногоНомераСУЗИСМПТК.Автоматически");
			
		Иначе
			ТекстСообщения = НСтр("ru='Особенности учета номенклатуры %1 не соответствуют указанному в документе виду продукции! Добавление невозможно.'");
			ТекстСообщения = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, СтрокаТоваров.Номенклатура);
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения, , , "Форма.Объект");
		КонецЕсли;
		
	КонецЦикла;
	
КонецФункции

#КонецОбласти

#Область НанесениеКодов

Функция ПодготовитьТекстЗапросаДляЗаполненияНанесенияКодов(ПараметрыЗаполнения) Экспорт
	
	ДокументыОснования 	 = ПараметрыЗаполнения.МассивДокументов;
	МассивВидовДокумента = ПараметрыЗаполнения.МассивВидовДокумента;
	
	Если ТипЗнч(ДокументыОснования) = Тип("Массив") Тогда
		ТекстЗапроса = ПолучитьТекстЗапросаДляМассиваНанесениеКодов(МассивВидовДокумента);
		Если ТекстЗапроса = "" Тогда
			Возврат Неопределено;
		КонецЕсли;	   
	ИначеЕсли ТипЗнч(ДокументыОснования) = Тип("ДокументСсылка.ЗаказКодовМаркировкиСУЗИСМПТК") Тогда
		ТекстЗапроса = ТекстЗапросаЗаказКМДляНанесения();
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПолучитьТекстЗапросаДляМассиваНанесениеКодов(МассивВидовДокумента)
	
	ТекстЗапроса = "";
	Для Каждого ЭлементМассива Из МассивВидовДокумента Цикл
		ТекстЗапросаДокумента = "";
		Если ЭлементМассива = Тип("ДокументСсылка.ЗаказКодовМаркировкиСУЗИСМПТК") Тогда
			ТекстЗапросаДокумента = ТекстЗапросаЗаказКМДляНанесения(ТекстЗапроса = "");
		КонецЕсли;
		
		Если ТекстЗапроса <> "" И ТекстЗапросаДокумента <> "" Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|"  
		КонецЕсли;	
		
		ТекстЗапроса = ТекстЗапроса + ТекстЗапросаДокумента;
		
	КонецЦикла;	
	
	Возврат ТекстЗапроса;
	
КонецФункции

//Документ НанесениеКодовМаркировкиСУЗИСМПТК вводится на основании ЗаказКодовМаркировкиСУЗИСМПТК 
//для ТГ Молочная продукция, Лекарственные препараты (т.к. для Обуви нанесение происходит автоматически при получении КМ)
//
Функция ТекстЗапросаЗаказКМДляНанесения(ПервыйЗапрос = Истина)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ЗаказКодовМаркировкиСУЗИСМПТК.Ссылка КАК ДокументОснование,
	|	ЗаказКодовМаркировкиСУЗИСМПТК.Организация КАК Организация,
	|	ЗаказКодовМаркировкиСУЗИСМПТК.ВидПродукции КАК ВидПродукции,
	|	ЗаказКодовМаркировкиСУЗИСМПТК.Ответственный КАК Ответственный,
	|	ЗаказКодовМаркировкиСУЗИСМПТК.ИдентификаторПроизводственнойЛинии КАК ИдентификаторПроизводственнойЛинии,
	|	ПулКодовМаркировкиСУЗИСМПТК.КодИдентификации КАК КодИдентификации,
	|	ПулКодовМаркировкиСУЗИСМПТК.Номенклатура КАК Номенклатура,
	|	ПулКодовМаркировкиСУЗИСМПТК.Характеристика КАК Характеристика,
	|	ПулКодовМаркировкиСУЗИСМПТК.КодМаркировки КАК КодМаркировки,
	|	ПулКодовМаркировкиСУЗИСМПТК.GTIN КАК GTIN
	|ПОМЕСТИТЬ вт_ДанныеДокумента
	|ИЗ
	|	Документ.ЗаказКодовМаркировкиСУЗИСМПТК КАК ЗаказКодовМаркировкиСУЗИСМПТК
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПулКодовМаркировкиСУЗИСМПТК КАК ПулКодовМаркировкиСУЗИСМПТК
	|		ПО ЗаказКодовМаркировкиСУЗИСМПТК.Ссылка = ПулКодовМаркировкиСУЗИСМПТК.ЗаказНаЭмиссию
	|ГДЕ
	|	ЗаказКодовМаркировкиСУЗИСМПТК.Ссылка В(&МассивДокументов)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПулКодовМаркировкиСУЗИСМПТК.КодМаркировки,
	|	ЗаказКодовМаркировкиСУЗИСМПТК.Ссылка,
	|	ПулКодовМаркировкиСУЗИСМПТК.Номенклатура,
	|	ПулКодовМаркировкиСУЗИСМПТК.Характеристика,
	|	ПулКодовМаркировкиСУЗИСМПТК.КодИдентификации,
	|	ПулКодовМаркировкиСУЗИСМПТК.GTIN,
	|	ЗаказКодовМаркировкиСУЗИСМПТК.Организация,
	|	ЗаказКодовМаркировкиСУЗИСМПТК.ВидПродукции,
	|	ЗаказКодовМаркировкиСУЗИСМПТК.ИдентификаторПроизводственнойЛинии,
	|	ЗаказКодовМаркировкиСУЗИСМПТК.Ответственный";    
	
	Если Не ПервыйЗапрос Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПОМЕСТИТЬ вт_ДанныеДокумента", "");	
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "РАЗРЕШЕННЫЕ", "");
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции	

Функция ДополнитьТекстЗапросЗаполненияНанесениеКодов(ТекстЗапроса) Экспорт
	
	ТекстЗапроса = ТекстЗапроса + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	вт_ДанныеДокумента.ДокументОснование,
	|	вт_ДанныеДокумента.Организация,
	|	вт_ДанныеДокумента.ВидПродукции,
	|	вт_ДанныеДокумента.Ответственный,
	|	вт_ДанныеДокумента.ИдентификаторПроизводственнойЛинии,
	|	вт_ДанныеДокумента.КодИдентификации,
	|	вт_ДанныеДокумента.Номенклатура,
	|	вт_ДанныеДокумента.Характеристика,
	|	вт_ДанныеДокумента.КодМаркировки,
	|	вт_ДанныеДокумента.GTIN
	|ПОМЕСТИТЬ вт_ДанныеДляЗаполнения
	|ИЗ
	|	вт_ДанныеДокумента КАК вт_ДанныеДокумента
	|";
	
	Возврат ТекстЗапроса + РаботаСДокументамиИСМПТК.ПолучитьТекстПакетовЗапросаДляЗаполненияНанесенияКодов();
	
КонецФункции

Функция ПолучитьДанныеДокументаОснованияНанесениеКМНаСервере(ДокументОснование) Экспорт
	
	ТекстЗапроса = "";
	
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ЗаказКодовМаркировкиСУЗИСМПТК") Тогда
		ТекстЗапроса = ТекстЗапросаЗаказКМДляНанесения(ТекстЗапроса = "");
		ЗаполнятьТоварыПолностью = Ложь;
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация";
	
	ТекстЗапроса = ДополнитьТекстЗапросЗаполненияНанесениеКодов(ТекстЗапроса);
	
	Запрос = Новый Запрос();
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("МассивДокументов", ДокументОснование);
	
	РезультатЗапроса  = Запрос.ВыполнитьПакет();
	КоличествоПакетов = РезультатЗапроса.Количество();
	
	ТаблицаРеквизиты = РезультатЗапроса[КоличествоПакетов - 2].Выгрузить();
	Реквизиты = Новый Структура();
	
	Для Каждого Строка Из ТаблицаРеквизиты Цикл
		
		Реквизиты.Вставить("Организация", 		Строка.Организация);
		Реквизиты.Вставить("ДокументОснование", Строка.ДокументОснование);
		Реквизиты.Вставить("ВидПродукции", 		Строка.ВидПродукции);
		Реквизиты.Вставить("Ответственный",  	Строка.Ответственный);
		
	КонецЦикла;
	
	ТаблицаТовары = РезультатЗапроса[КоличествоПакетов - 1].Выгрузить(); 
	Товары = Новый Массив();
	
	Для Каждого Строка Из ТаблицаТовары Цикл
		
		СтрокаТовары = Новый Структура();
		СтрокаТовары.Вставить("Номенклатура", 	  Строка.Номенклатура);
		СтрокаТовары.Вставить("Характеристика",   Строка.Характеристика);
		СтрокаТовары.Вставить("GTIN", 			  Строка.GTIN);
		СтрокаТовары.Вставить("КодИдентификации", Строка.КодИдентификации);
		СтрокаТовары.Вставить("КодМаркировки", 	  Строка.КодМаркировки);
		
		Товары.Добавить(СтрокаТовары);
		
	КонецЦикла;
	
	ДанныеДокументаОснования = Новый Структура();
	ДанныеДокументаОснования.Вставить("Реквизиты", Реквизиты);
	ДанныеДокументаОснования.Вставить("Товары",	   Товары);
	
	Возврат ДанныеДокументаОснования;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ОбменИСЦЭДМ

#Область СсылкаНаИСЦЭДМ

Процедура ОбновитьРеквизитыИСЦЭДМ(ДанныеФормы, РеквизитНадписьИСЦЭДМ = "НадписьДокументИСЦЭДМ", ТребуетсяИСЦЭДМ = Истина, ГруппаДляВключенияМеню = Неопределено, ПослеГруппы = "") Экспорт
	
	Если ПолучитьДанныеИСЦЭДМ(ДанныеФормы, ГруппаДляВключенияМеню, ПослеГруппы) Тогда 
		ЗаполнитьТекстПроИСЦЭДМ(ДанныеФормы, РеквизитНадписьИСЦЭДМ, ТребуетсяИСЦЭДМ);
		УправлениеГруппойИСЦЭДМ(ДанныеФормы, ТребуетсяИСЦЭДМ);
	КонецЕсли;	
	
КонецПроцедуры

Функция ПолучитьДанныеИСЦЭДМ(ДанныеФормы, ГруппаДляВключенияМеню, ПослеГруппы = "") Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ВестиУчетМаркируемыхЛекарствИСМПТК") Тогда //ИСЦЭДМ Работает только с фармой
		Возврат Ложь;
	КонецЕсли;
	
	//1.Создаем элементы маркировки на форме документа-основания
	Если ДанныеФормы.Элементы.Найти("НадписьДокументИСЦЭДМ") = Неопределено Тогда
		Если ГруппаДляВключенияМеню = Неопределено 
			И НЕ ДанныеФормы.Элементы.Найти("ГруппаПрочиеЭлектронныеДокументы") = Неопределено Тогда
			//Используем группу формы по умолчанию
			СоздатьЭлементыФормыДляВводаИСЦЭДМ(ДанныеФормы, "ГруппаПрочиеЭлектронныеДокументы", ПослеГруппы);
		ИначеЕсли Не ГруппаДляВключенияМеню = Неопределено Тогда
			//Размещаем элементы в группе типовой формы
			СоздатьЭлементыФормыДляВводаИСЦЭДМ(ДанныеФормы, ГруппаДляВключенияМеню, ПослеГруппы);
		Иначе
			ТекстОшибки = НСтр("ru='Невозможно разместить элементы подсистемы ИС ЦЭДМ на форме документа: не назначена группа формы для включения!'");
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстОшибки);
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	//2. Заполняем созданные реквизиты
	ДокументОснование = ДанныеФормы.Объект.Ссылка; 
	
	//Находим ссылки на связанные документы маркировки
	Если ЗначениеЗаполнено(ДанныеФормы.ДокументИСЦЭДМСсылка) Тогда
		ДокументИСЦЭДМСсылка = ДанныеФормы.ДокументИСЦЭДМСсылка;
	Иначе
		СвязанныеДокументыМаркировки = ПроверитьНаличиеСвязанногоДокументаИСЦЭДМ(ДанныеФормы.Объект.Ссылка, Истина);
		
		Если ТипЗнч(СвязанныеДокументыМаркировки) <> Тип("СписокЗначений") И СвязанныеДокументыМаркировки <> Неопределено Тогда //Связанный документ прямая ссылка на документ
			
			ДокументИСЦЭДМСсылка = СвязанныеДокументыМаркировки.Ссылка;
			
		ИначеЕсли ТипЗнч(СвязанныеДокументыМаркировки) = Тип("СписокЗначений") И СвязанныеДокументыМаркировки.Количество() = 1 Тогда
			
			ДокументИСЦЭДМСсылка = СвязанныеДокументыМаркировки[0].Значение;
			
		ИначеЕсли ТипЗнч(СвязанныеДокументыМаркировки) = Тип("СписокЗначений") И СвязанныеДокументыМаркировки.Количество()> 1 Тогда
			
			Если ДанныеФормы.СписокДокументыИСЦЭДМСсылка.Количество() = 0 Тогда
				Для Каждого СтрокаТаблицыИсточник Из СвязанныеДокументыМаркировки Цикл
					ЗаполнитьЗначенияСвойств(ДанныеФормы.СписокДокументыИСЦЭДМСсылка.Добавить(), СтрокаТаблицыИсточник);
				КонецЦикла;
			КонецЕсли;
			
		Иначе 
			
			//Если не нашлось связанных документов
			ДокументИСЦЭДМСсылка = Неопределено;
			ДанныеФормы.СписокДокументыИСЦЭДМСсылка.Очистить();
			
		КонецЕсли;
		
	КонецЕсли;
	
	ДанныеДокументаИСЦЭДМ = Неопределено;
	
	Если ЗначениеЗаполнено(ДокументИСЦЭДМСсылка) Тогда
		
		РеквизитыИСЦЭДМ = Новый Структура("Ссылка, Дата, ПометкаУдаления", ДокументИСЦЭДМСсылка, '00010101', Ложь);
		
		ЗначенияРеквизитов = ОбщегоНазначенияИСМПТК.ЗначенияРеквизитовОбъекта(ДокументИСЦЭДМСсылка, "Дата, ПометкаУдаления");
		ЗаполнитьЗначенияСвойств(РеквизитыИСЦЭДМ, ЗначенияРеквизитов);
		
		ТекстИСЦЭДМ  = ПолучитьТекстИСЦЭДМ(РеквизитыИСЦЭДМ);
		
		ДанныеДокументаИСЦЭДМ = Новый Структура("ИСЦЭДМ, ТекстИСЦЭДМ, ПометкаУдаления", ДокументИСЦЭДМСсылка, ТекстИСЦЭДМ, РеквизитыИСЦЭДМ.ПометкаУдаления);
		ДанныеФормы.ДокументИСЦЭДМСсылка  = ДокументИСЦЭДМСсылка;
		ДанныеФормы.ДанныеДокументаИСЦЭДМ = ДанныеДокументаИСЦЭДМ;
		
	ИначеЕсли ДанныеФормы.СписокДокументыИСЦЭДМСсылка.Количество() <> 0 Тогда
		
		СписокСсылокИСЦЭДМ = Новый СписокЗначений;
		
		Для каждого СсылкаИСЦЭДМ Из ДанныеФормы.СписокДокументыИСЦЭДМСсылка Цикл
			
			РеквизитыИСЦЭДМ    = Новый Структура("Ссылка, Дата, ПометкаУдаления", СсылкаИСЦЭДМ.Значение, '00010101', Ложь);
			ЗначенияРеквизитов = ОбщегоНазначенияИСМПТК.ЗначенияРеквизитовОбъекта(СсылкаИСЦЭДМ.Значение, "Дата, ПометкаУдаления");
			ЗаполнитьЗначенияСвойств(РеквизитыИСЦЭДМ, ЗначенияРеквизитов);
			
			СписокСсылокИСЦЭДМ.Добавить(РеквизитыИСЦЭДМ);
			
		КонецЦикла; 
		
		ТекстИСЦЭДМ = ПолучитьТекстИСЦЭДМ(СписокСсылокИСЦЭДМ);
		
		Если СписокСсылокИСЦЭДМ.Количество() <> 0 Тогда
			
			СписокДокументыИСЦЭДМСсылка = Новый СписокЗначений;
			
			Для каждого Ссылки Из СписокСсылокИСЦЭДМ Цикл
				СсылкаИСЦЭДМ = Ссылки.Значение.Ссылка;
				СписокДокументыИСЦЭДМСсылка.Добавить(СсылкаИСЦЭДМ);
			КонецЦикла; 
			
			ДанныеДокументаИСЦЭДМ = Новый Структура("ИСЦЭДМ, ТекстИСЦЭДМ, ПометкаУдаления", СписокДокументыИСЦЭДМСсылка, ТекстИСЦЭДМ, РеквизитыИСЦЭДМ.ПометкаУдаления);
			ДанныеФормы.СписокДокументыИСЦЭДМСсылка = СписокДокументыИСЦЭДМСсылка;
			ДанныеФормы.ДанныеДокументаИСЦЭДМ = ДанныеДокументаИСЦЭДМ;
			
		КонецЕсли;
	Иначе
		ДанныеФормы.ДокументИСЦЭДМСсылка  = ДокументИСЦЭДМСсылка;
		ДанныеФормы.ДанныеДокументаИСЦЭДМ = ДанныеДокументаИСЦЭДМ;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ПолучитьТекстИСЦЭДМ(ДанныеДокументовИСЦЭДМ) Экспорт
	
	Если ТипЗнч(ДанныеДокументовИСЦЭДМ) = Тип("СписокЗначений") Тогда
		
		НадписьКоличествоИСЦЭДМ = НСтр("ru='Всего документов ИС ЦЭДМ: (%КоличествоДокументов%)'");
		Текст = СтрЗаменить(НадписьКоличествоИСЦЭДМ, "%КоличествоДокументов%", ДанныеДокументовИСЦЭДМ.Количество());
		
	Иначе
		
		ДокументИСЦЭДМ = ?(ДанныеДокументовИСЦЭДМ.Свойство("Ссылка"), ДанныеДокументовИСЦЭДМ.Ссылка, Неопределено);
		Если Не ДокументИСЦЭДМ = Неопределено Тогда
			ПредставлениеДокумента = Строка(ДокументИСЦЭДМ);
		Иначе
			ПредставлениеДокумента = "";
		КонецЕсли;
		
		ДополнительныйТекст = "";
		Если ДанныеДокументовИСЦЭДМ.ПометкаУдаления Тогда
			ДополнительныйТекст = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияПомеченНаУдаление();
		КонецЕсли;
		
		Текст = ПредставлениеДокумента + ДополнительныйТекст;
		
	КонецЕсли;
	
	Возврат Текст;
	
КонецФункции 

Процедура ЗаполнитьТекстПроИСЦЭДМ(Форма, РеквизитНадписьИСЦЭДМ = "НадписьДокументИСЦЭДМ", ТребуетсяИСЦЭДМ = Истина) Экспорт
	
	ДанныеДокументаИСЦЭДМ = Форма.ДанныеДокументаИСЦЭДМ;
	
	Если ТребуетсяИСЦЭДМ И ДанныеДокументаИСЦЭДМ = Неопределено Тогда
		Форма[РеквизитНадписьИСЦЭДМ] = "";
		Возврат;
	КонецЕсли;
	
	Если НЕ ТребуетсяИСЦЭДМ Тогда
		Форма[РеквизитНадписьИСЦЭДМ] = НСтр("ru='Не требуется'");
		Форма.Элементы[РеквизитНадписьИСЦЭДМ].ЦветТекста = Новый Цвет(51, 51, 51); // текст формы
	Иначе
		Форма[РеквизитНадписьИСЦЭДМ] = ДанныеДокументаИСЦЭДМ.ТекстИСЦЭДМ;
		
		Если ТребуетсяИСЦЭДМ И (ДанныеДокументаИСЦЭДМ.ПометкаУдаления) Тогда
			Форма.Элементы[РеквизитНадписьИСЦЭДМ].ЦветТекста = Новый Цвет(255, 0, 0);  // красный
			
		ИначеЕсли ТипЗнч(ДанныеДокументаИСЦЭДМ.ИСЦЭДМ) = Тип("СписокЗначений") Тогда
			//Если связанных документов несколько, их состояние может быть разным. 
			//Поэтому выводим общую ссылку в нейтральном цвете.
			Форма.Элементы[РеквизитНадписьИСЦЭДМ].ЦветТекста = Новый Цвет(51, 51, 51); // текст формы
			
		ИначеЕсли Не ЗначениеЗаполнено(ДанныеДокументаИСЦЭДМ.ИСЦЭДМ.НомерИСЦЭДМ) Тогда
			
			//Документ не отправлен на сервер ИС МПТ
			Форма.Элементы[РеквизитНадписьИСЦЭДМ].ЦветТекста = Новый Цвет(51, 51, 51); // текст формы
		Иначе
			Форма.Элементы[РеквизитНадписьИСЦЭДМ].ЦветТекста = Новый Цвет(0, 100, 0); // зеленый
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УправлениеГруппойИСЦЭДМ(Форма, ТребуетсяИСЦЭДМ = Истина) Экспорт
	
	Элементы = Форма.Элементы;
	
	Если ТребуетсяИСЦЭДМ И (ЗначениеЗаполнено(Форма.СписокДокументыИСЦЭДМСсылка) ИЛИ ЗначениеЗаполнено(Форма.ДокументИСЦЭДМСсылка)) Тогда
		Элементы.ГруппаИСЦЭДМ.ТекущаяСтраница = Элементы.ГруппаСсылкаИСЦЭДМ;
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьЭлементыФормыДляВводаИСЦЭДМ(Форма, ГруппаДляВключенияМеню, ПослеГруппы = "") Экспорт
	
	ДокументИсточник = Форма.Объект.Ссылка;
	СвойстваДокументИСЦЭДМ = СформироватьСвойстваДокументаИСЦЭДМ(ДокументИсточник);
	Если СвойстваДокументИСЦЭДМ.ОписаниеТиповДокументИСЦЭДМ = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	//Подготовим описание необходимых реквизитов маркировки
	ДобавляемыеРеквизиты = Новый Массив;
	
	//Реквизит-представление ссылки документа маркировки на форме
	НовыйРеквизитНадписиДокументаИСЦЭДМ = Новый РеквизитФормы("НадписьДокументИСЦЭДМ", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(500))); 
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизитНадписиДокументаИСЦЭДМ);
	
	//Реквизит для хранения данных документа маркировки
	НовыйРеквизитДанныеДокументаИСЦЭДМ = Новый РеквизитФормы("ДанныеДокументаИСЦЭДМ", Новый ОписаниеТипов());
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизитДанныеДокументаИСЦЭДМ);
	
	//Реквизит, хранящий ссылку на связанный документ маркировки
	НовыйРеквизитДокументМаркировка = Новый РеквизитФормы("ДокументИСЦЭДМСсылка", СвойстваДокументИСЦЭДМ.ОписаниеТиповДокументИСЦЭДМ);
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизитДокументМаркировка);
	
	//Реквизит, хранящий список ссылок, если связанных документов маркировки несколько
	НовыйРеквизитСписокДокументовМаркировки = Новый РеквизитФормы("СписокДокументыИСЦЭДМСсылка", Новый ОписаниеТипов("СписокЗначений"));
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизитСписокДокументовМаркировки);
	
	//Создаем реквизиты по описанию на типовой форме
	Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	Если ЗначениеЗаполнено(ПослеГруппы) Тогда
		//Создадим группу страниц для работы с ИСЦЭДМ
		ГруппаИСЦЭДМ = Форма.Элементы.Вставить("ГруппаИСЦЭДМ", Тип("ГруппаФормы"),, Форма.Элементы[ПослеГруппы]);
		ГруппаИСЦЭДМ.Вид = ВидГруппыФормы.Страницы;
		ГруппаИСЦЭДМ.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	Иначе 
		//Получим группу в котороую встроим элементы
		ПодменюРазмещения = Форма.Элементы[ГруппаДляВключенияМеню];
		//Создадим группу страниц для работы с ИСЦЭДМ
		ГруппаИСЦЭДМ = Форма.Элементы.Добавить("ГруппаИСЦЭДМ", Тип("ГруппаФормы"), ПодменюРазмещения);
		ГруппаИСЦЭДМ.Вид = ВидГруппыФормы.Страницы;
		ГруппаИСЦЭДМ.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	КонецЕсли;
	
	//Создадим страницу ссылки ИСЦЭДМ
	ГруппаСсылкаИСЦЭДМ = Форма.Элементы.Добавить("ГруппаСсылкаИСЦЭДМ", Тип("ГруппаФормы"), ГруппаИСЦЭДМ);
	ГруппаСсылкаИСЦЭДМ.Вид = ВидГруппыФормы.Страница;
	
	ПолеНадписиИСЦЭДМ = Форма.Элементы.Добавить("НадписьДокументИСЦЭДМ", Тип("ПолеФормы"), ГруппаСсылкаИСЦЭДМ);
	ПолеНадписиИСЦЭДМ.Вид = ВидПоляФормы.ПолеНадписи;
	ПолеНадписиИСЦЭДМ.Гиперссылка = Истина;
	ПолеНадписиИСЦЭДМ.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	ПолеНадписиИСЦЭДМ.ПутьКДанным = "НадписьДокументИСЦЭДМ";
	
	ПолеНадписиИСЦЭДМ.УстановитьДействие("Нажатие", "НадписьИСЦЭДМНажатие");
	
КонецПроцедуры

Функция СформироватьСвойстваДокументаИСЦЭДМ(ДокументИсточник, ВидОперацииВФорме = Неопределено) Экспорт
	
	МассивДокументовМаркировки = ПолучитьМассивТиповДокументовМаркировкиИСЦЭДМ();	
	СвойстваДокументИС = Новый Структура();
	СвойстваДокументИС.Вставить("ОписаниеТиповДокументИСЦЭДМ", Новый ОписаниеТипов(МассивДокументовМаркировки));
	СвойстваДокументИС.Вставить("ПредставлениеСоздатьДокументИСЦЭДМ", НСтр("ru = 'Ввести новый документ маркировки (ИС ЦЭДМ)'"));
	
	Возврат СвойстваДокументИС;
	
КонецФункции

Функция ПолучитьМассивТиповДокументовМаркировкиИСЦЭДМ();
	
	МассивДокументовМаркировки = Новый Массив();
	//ИС ЦЭДМ
	МассивДокументовМаркировки.Добавить(Тип("ДокументСсылка.АктПриемаПередачиИСЦЭДМ"));
	МассивДокументовМаркировки.Добавить(Тип("ДокументСсылка.УведомлениеОВыводеИзОборотаИСЦЭДМ"));
	МассивДокументовМаркировки.Добавить(Тип("ДокументСсылка.УведомлениеОВводеВОборотИСЦЭДМ"));
	МассивДокументовМаркировки.Добавить(Тип("ДокументСсылка.АктВнутреннегоПеремещенияИСЦЭДМ"));
	
	Возврат МассивДокументовМаркировки;
	
КонецФункции

#КонецОбласти

#Область ПроверкаЗаполненияДокументовИСЦЭДМ

Процедура ДокументАПП_ОбработкаПроверкиЗаполненияИСЦЭДМ(АПП, Отказ, ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов) Экспорт
	
	Возврат;
	
КонецПроцедуры

Процедура ДокументВВО_ОбработкаПроверкиЗаполненияИСЦЭДМ(ВВО, Отказ, ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов) Экспорт
	
	ПроверяемыеРеквизиты.Добавить("ПричинаВводаВОборот");
	
КонецПроцедуры

Процедура ДокументВИО_ОбработкаПроверкиЗаполненияИСЦЭДМ(ВИО, Отказ, ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов) Экспорт
	
	ПроверяемыеРеквизиты.Добавить("ПричинаВыводаИзОборота");
	
КонецПроцедуры

Процедура ДокументАгрегацияВнеПроизводства_ОбработкаПроверкиЗаполненияИСЦЭДМ(АПП, Отказ, ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов) Экспорт
	
	Возврат;
	
КонецПроцедуры

Процедура ДокументАктВнутреннегоПеремещения_ОбработкаПроверкиЗаполненияИСЦЭДМ(АПП, Отказ, ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов) Экспорт
	
	Возврат;
	
КонецПроцедуры

Процедура ДокументВвозЕАЭС_ОбработкаПроверкиЗаполненияИСЦЭДМ(АПП, Отказ, ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов) Экспорт
	
	Возврат;
	
КонецПроцедуры

Процедура ДокументввозИмпорт_ОбработкаПроверкиЗаполненияИСЦЭДМ(АПП, Отказ, ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов) Экспорт
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкиПриВводеНаОсновании

Функция ПроверитьДокументыОснованияПриСозданииИСЦЭДМ(МассивДокументов, ТипДокумента, ЭтоВыборАПП = Ложь, ИмяКоманды = "") Экспорт
	
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	Если ТипДокумента = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		Если ЭтоВыборАПП Тогда
			//При установке связи Вход.АПП + ПТУ
			Возврат ПроверитьОснованияДокументаИСЦЭДМОбщая("АктПриемаПередачи_ПТУ", МассивДокументов);
		Иначе
			Если ИмяКоманды = "СоздатьВвозИмпорт_ЦЭДМ" Тогда
				Возврат ПроверитьОснованияДокументаИСЦЭДМОбщая("ВвозТоваровИмпорт", МассивДокументов);
			Иначе
				Возврат ПроверитьОснованияДокументаИСЦЭДМОбщая("ВвозТоваровЕАЭС",   МассивДокументов);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя")
		И ЭтоВыборАПП Тогда
		
		//При установке связи Вход.АПП + Возврат от клиента
		Возврат ПроверитьОснованияДокументаИСЦЭДМОбщая("АктПриемаПередачи_Возврат", МассивДокументов);
		
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		//Из РТУ могут быть созданы 2 документа маркировки: АПП и Увед.о выводе из оборота (интернет-торговля).
		//Т.к. ограничения по виду опрерации РТУ у них одинаковые, проверяем общей проверкой.
		
		Возврат ПроверитьОснованияДокументаИСЦЭДМОбщая("АктПриемаПередачиИсх_РТУ", МассивДокументов);
		
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
		
		//При создании АПП исход по Возврату поставщику
		Возврат ПроверитьОснованияДокументаИСЦЭДМОбщая("АктПриемаПередачиИсх_Возврат", МассивДокументов);
		
	//ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
	//	
	//	//При создании АПП исход по Возврату поставщику
	//	Возврат ПроверитьОснованияДокументаИСЦЭДМОбщая("АктВнутреннегоПеремещения", МассивДокументов);
		
	Иначе
		
		//Для Оприходования и Списания проверки не выполняем, т.к. там нет вида операции
		Возврат Новый Массив();
		
	КонецЕсли;
	
КонецФункции

Функция ПроверитьОснованияДокументаИСЦЭДМОбщая(ИмяДокументаИСЦЭДМ, МассивДокументов)
	
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	
	ТекстЗапросаНачало = 	
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДокументИСЦЭДМ.Ссылка КАК Ссылка
	|ИЗ
	|";
	
	ТекстЗапросаИсточник = "";
	Если ИмяДокументаИСЦЭДМ = "АктПриемаПередачиИсх_РТУ" Тогда
		ТекстЗапросаИсточник = "Документ.РеализацияТоваровУслуг КАК ДокументИСЦЭДМ
		|";
		
	ИначеЕсли ИмяДокументаИСЦЭДМ = "АктПриемаПередачиИсх_Возврат" Тогда 
		ТекстЗапросаИсточник = "Документ.ВозвратТоваровПоставщику КАК ДокументИСЦЭДМ
		|";
	ИначеЕсли ИмяДокументаИСЦЭДМ = "АктПриемаПередачи_Возврат" Тогда 
		ТекстЗапросаИсточник = "Документ.ВозвратТоваровОтПокупателя КАК ДокументИСЦЭДМ
		|";
		
	ИначеЕсли ИмяДокументаИСЦЭДМ = "ВвозТоваровЕАЭС" 
		Или ИмяДокументаИСЦЭДМ = "ВвозТоваровИмпорт" 
		Или ИмяДокументаИСЦЭДМ = "АктПриемаПередачи_ПТУ" Тогда 
		ТекстЗапросаИсточник = "Документ.ПоступлениеТоваровУслуг КАК ДокументИСЦЭДМ
		|";
		
	//ИначеЕсли ИмяДокументаИСЦЭДМ = "АктВнутреннегоПеремещения" Тогда 
	//	ТекстЗапросаИсточник = "Документ.ПеремещениеТоваров КАК ДокументИСЦЭДМ
	//	|";
		
	КонецЕсли;
	
	ТекстЗапросаУсловия = "";
	Если ИмяДокументаИСЦЭДМ = "АктПриемаПередачиИсх_РТУ" Тогда
		ТекстЗапросаУсловия = "ГДЕ
		|	ДокументИСЦЭДМ.Ссылка В(&Основание)
		|	И НЕ(ДокументИСЦЭДМ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРеализацияТоваров.ПродажаКомиссия)
		|			ИЛИ ДокументИСЦЭДМ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРеализацияТоваров.Товары)
		|			ИЛИ ДокументИСЦЭДМ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРеализацияТоваров.ПередачаСтруктурномуПодразделению))";
		
	ИначеЕсли ИмяДокументаИСЦЭДМ = "АктПриемаПередачиИсх_Возврат" Тогда
		ТекстЗапросаУсловия = "ГДЕ
		|	ДокументИСЦЭДМ.Ссылка В(&Основание)
		|	И НЕ(ДокументИСЦЭДМ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВозвратТоваровПоставщику.Покупка))";
		
	ИначеЕсли ИмяДокументаИСЦЭДМ = "АктПриемаПередачи_Возврат" Тогда
		ТекстЗапросаУсловия = "ГДЕ
		|	ДокументИСЦЭДМ.Ссылка В(&Основание)
		|	И НЕ(ДокументИСЦЭДМ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВозвратТоваровОтПокупателя.ВозвратТоваров))";
		
	ИначеЕсли ИмяДокументаИСЦЭДМ = "АктПриемаПередачи_ПТУ" Тогда
		ТекстЗапросаУсловия = "ГДЕ
		|	ДокументИСЦЭДМ.Ссылка В(&Основание)
		|	И НЕ(ДокументИСЦЭДМ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомисия)
		|				ИЛИ ДокументИСЦЭДМ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеТоваровУслуг.Товары)
		|				ИЛИ ДокументИСЦЭДМ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеТоваровУслуг.ОтСтруктурногоПодразделения))";
		
	ИначеЕсли ИмяДокументаИСЦЭДМ = "ВвозТоваровЕАЭС" Тогда
		ТекстЗапросаУсловия = "ГДЕ
		|	ДокументИСЦЭДМ.Ссылка В(&Основание)
		|	И НЕ(ДокументИСЦЭДМ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеТоваровУслуг.Импорт))";
		
	ИначеЕсли ИмяДокументаИСЦЭДМ = "ВвозТоваровИмпорт" Тогда
		ТекстЗапросаУсловия = "ГДЕ
		|	ДокументИСЦЭДМ.Ссылка В(&Основание)
		|	И НЕ(ДокументИСЦЭДМ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеТоваровУслуг.Импорт))";
		
	//ИначеЕсли ИмяДокументаИСЦЭДМ = "АктВнутреннегоПеремещения" Тогда
	//	ТекстЗапросаУсловия = "ГДЕ
	//	|	ДокументИСЦЭДМ.Ссылка В(&Основание)
	//	|	И НЕ ДокументИСЦЭДМ.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеремещениеТоваров)";
	КонецЕсли;
	
	ТекстЗапросаОбщий = ТекстЗапросаНачало + ТекстЗапросаИсточник + ТекстЗапросаУсловия;
	
	МассивДокументовПроверки = Новый Массив();
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаОбщий;
	Запрос.УстановитьПараметр("Основание", МассивДокументов);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		МассивДокументовПроверки.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат МассивДокументовПроверки;
	
КонецФункции

Функция ПроверитьНаличиеСвязанногоДокументаИСЦЭДМ(Основание, ЭтоПроверкаИзОснования = Ложь, ИмяДокумента = Неопределено) Экспорт
	
	Возврат РаботаСДокументамиИСМПТК.ПроверитьНаличиеСвязанногоДокументаМаркировки_ОбщаяИСЦЭДМ(Основание, ЭтоПроверкаИзОснования);
	
КонецФункции

Функция ПроверитьНаличиеМаркируемогоТовараИСЦЭДМ(ВыбранноеЗначение) Экспорт
	
	//ПЕРЕОПРЕДЕЛЕНИЕ//	
	//Для ИС ЦЭДМ важно наличие в исходном документе товара с признаком Лекарственная продукция.
	Если ТипЗнч(ВыбранноеЗначение) = Тип("ДокументСсылка.РеализацияТоваровУслуг") 
		ИЛИ ТипЗнч(ВыбранноеЗначение) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя")
		ИЛИ ТипЗнч(ВыбранноеЗначение) = Тип("ДокументСсылка.ОприходованиеТоваров")
		ИЛИ ТипЗнч(ВыбранноеЗначение) = Тип("ДокументСсылка.СписаниеТоваров")
		ИЛИ ТипЗнч(ВыбранноеЗначение) = Тип("ДокументСсылка.ТребованиеНакладная")
		ИЛИ ТипЗнч(ВыбранноеЗначение) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг")
		ИЛИ ТипЗнч(ВыбранноеЗначение) = Тип("ДокументСсылка.ВозвратТоваровПоставщику")
		ИЛИ ТипЗнч(ВыбранноеЗначение) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
		
		ВДокументеЕстьМаркируемаяПродукция = ПроверитьНаличиеМаркируемойФармы(ВыбранноеЗначение);
		
	Иначе
		ВДокументеЕстьМаркируемаяПродукция = Ложь;
	КонецЕсли;
	
	Возврат ВДокументеЕстьМаркируемаяПродукция;
	
КонецФункции

Функция ПроверитьНаличиеМаркируемойФармы(ДокументДляПроверки)
	
	//Для ИС ЦЭДМ - только фарма
	Запрос = Новый Запрос();
	Текст = "ВЫБРАТЬ
	|	ДокументПроверки.Номенклатура КАК Номенклатура
	|ИЗ
	|	Документ." + ДокументДляПроверки.Ссылка.Метаданные().Имя + ".Товары КАК ДокументПроверки
	|ГДЕ
	|	ДокументПроверки.Ссылка = &Ссылка
	|	И ДокументПроверки.Номенклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ЛекарственныеПрепараты)";
	
	Запрос.Текст = Текст;
	Запрос.УстановитьПараметр("Ссылка", ДокументДляПроверки);
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат ?(Результат.Количество() = 0, Ложь, Истина);
	
КонецФункции

//Вызов из первичных документов (РТУ, ПТУ и т.д.), проверяет наличие в ТЧ Товары маркируемой продукции (по реквизитам Номенклатура.ТабачнаяПродукция, Номенклатура.ОбувнаяПродукция и т.д.)
//В зависимости от наличия такой продукции устанавливается видимость группы создания документов ИС ЦЭДМ в документах-основаниях
Функция ПроверитьНаличиеМаркированногоТовараДляВводаДокументаИСЦЭДМ(ПервичныйДокумент) Экспорт
	
	ИмяТЧТовары   = ПолучитьИмяТЧТовары(ПервичныйДокумент);
	ТаблицаТовары = ПервичныйДокумент[ИмяТЧТовары];
	
	Если ТаблицаТовары.Количество() = 0 Тогда
		Возврат Ложь;
	Иначе
		Для Каждого СтрокаТовар Из ТаблицаТовары Цикл
			
			Если СтрокаТовар.Номенклатура.ОсобенностьУчета = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.ЛекарственныеПрепараты") Тогда
				ЕстьМарки = Истина;
				Прервать;
			Иначе
				ЕстьМарки = Ложь;
			КонецЕсли;
			
		КонецЦикла;
		
		Возврат ЕстьМарки;
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

//Универсальный запрос к документам ИС ЦЭДМ для получения данных для заполнения создаваемого документа-основания
//
Функция ПодготовитьТекстЗапросаДляЗаполненияПервичныхДокументовИСЦЭДМ_Общий(ПараметрыЗаполнения, ИмяТаблицыДанных = "Марки") Экспорт
	
	ДокументИСЦЭДМ = Неопределено;
	Если ПараметрыЗаполнения.ТипДокументаИСМПТ  = Тип("ДокументСсылка.УведомлениеОВводеВОборотИСЦЭДМ") Тогда
		ДокументИСЦЭДМ = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОВводеВОборотИСЦЭДМ();
	ИначеЕсли ПараметрыЗаполнения.ТипДокументаИСМПТ  = Тип("ДокументСсылка.УведомлениеОВыводеИзОборотаИСЦЭДМ") Тогда
		ДокументИСЦЭДМ = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОВыводеИзОборотаИСЦЭДМ();
	ИначеЕсли ПараметрыЗаполнения.ТипДокументаИСМПТ  = Тип("ДокументСсылка.АктПриемаПередачиИСЦЭДМ") Тогда
		ДокументИСЦЭДМ = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаАктПриемаПередачиИСЦЭДМ();
	ИначеЕсли ПараметрыЗаполнения.ТипДокументаИСМПТ  = Тип("ДокументСсылка.АгрегацияВнеПроизводстваИСЦЭДМ") Тогда
		ДокументИСЦЭДМ = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаАгрегацияВнеПроизводстваИСЦЭДМ();
	ИначеЕсли ПараметрыЗаполнения.ТипДокументаИСМПТ  = Тип("ДокументСсылка.АктВнутреннегоПеремещенияИСЦЭДМ") Тогда
		ДокументИСЦЭДМ = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаАктВнутреннегоПеремещенияИСЦЭДМ();
	ИначеЕсли ПараметрыЗаполнения.ТипДокументаИСМПТ  = Тип("ДокументСсылка.УведомлениеОВвозеИзЕАЭСИСЦЭДМ") Тогда
		ДокументИСЦЭДМ = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОВвозеИзЕАЭСИСЦЭДМ();
	ИначеЕсли ПараметрыЗаполнения.ТипДокументаИСМПТ  = Тип("ДокументСсылка.УведомлениеОВвозеИзТретьихСтранИСЦЭДМ") Тогда
		ДокументИСЦЭДМ = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОВвозеИзТретьихСтранИСЦЭДМ();
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДокументТЧ.Ссылка КАК Ссылка,
	|	СУММА(ДокументТЧ.Количество) КАК КоличествоУпаковок,
	|	ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка) КАК Упаковка,
	|	"""" КАК Характеристика,
	|	ШтрихкодыНоменклатуры.Номенклатура КАК Номенклатура,
	|	ДокументТЧ.Номенклатура.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ДокументТЧ.Номенклатура.КодТНВЭД КАК КодТНВЭД
	|ПОМЕСТИТЬ ВТ_Товары
	|ИЗ
	|	Документ.%ИмяДокумента%.%ИмяТаблицыДанных% КАК ДокументТЧ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|		ПО ДокументТЧ.EAN = ШтрихкодыНоменклатуры.Штрихкод
	|ГДЕ
	|	ДокументТЧ.Ссылка В (&МассивИСЦЭДМДляСозданияПервичныхДокументов)
	|
	|СГРУППИРОВАТЬ ПО
	|	ДокументТЧ.Ссылка,
	|	ШтрихкодыНоменклатуры.Номенклатура,
	|	ДокументТЧ.Номенклатура.КодТНВЭД,
	|	ДокументТЧ.Номенклатура.БазоваяЕдиницаИзмерения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Товары.Ссылка КАК ДокументОснование,
	|	ВТ_Товары.КоличествоУпаковок КАК КоличествоУпаковок,
	|	ВТ_Товары.КоличествоУпаковок КАК Количество,
	|	ВТ_Товары.Упаковка КАК Упаковка,
	|	ВТ_Товары.Номенклатура КАК Номенклатура,
	|	ВТ_Товары.Характеристика КАК Характеристика,
	|	ВТ_Товары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВТ_Товары.КодТНВЭД КАК КодТНВЭД,
	|	ДокументИСЦЭДМ.Дата КАК Дата,
	|	ДокументИСЦЭДМ.Организация КАК Организация,
	|	ДокументИСЦЭДМ.Склад КАК Склад,
	|	%Контрагент%
	|	ДокументИСЦЭДМ.Автор КАК Автор,
	|	"""" КАК ВидОперации,
	|	"""" КАК Партнер	
	|ПОМЕСТИТЬ ВТ_ДанныеДокумента
	|ИЗ
	|	ВТ_Товары КАК ВТ_Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.%ИмяДокумента% КАК ДокументИСЦЭДМ
	|		ПО ВТ_Товары.Ссылка = ДокументИСЦЭДМ.Ссылка
	|ГДЕ
	|	ДокументИСЦЭДМ.Ссылка В (&МассивИСЦЭДМДляСозданияПервичныхДокументов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ДанныеДокумента.ДокументОснование КАК ДокументОснование,
	|	ВТ_ДанныеДокумента.Организация КАК Организация,
	|	ВТ_ДанныеДокумента.Склад КАК Склад,
	|	ВТ_ДанныеДокумента.Контрагент КАК Контрагент,
	|	ВТ_ДанныеДокумента.Партнер КАК Партнер,
	|	ВТ_ДанныеДокумента.ВидОперации КАК ВидОперации,
	|	ВТ_ДанныеДокумента.Автор КАК Автор,
	|	ВТ_ДанныеДокумента.Дата КАК Дата,
	|	ВТ_ДанныеДокумента.Номенклатура КАК Номенклатура,
	|	ВТ_ДанныеДокумента.Характеристика КАК Характеристика,
	|	ВТ_ДанныеДокумента.Упаковка КАК Упаковка,
	|	ВТ_ДанныеДокумента.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВТ_ДанныеДокумента.КодТНВЭД КАК КодТНВЭД,
	|	ВТ_ДанныеДокумента.Количество КАК Количество,
	|	ВТ_ДанныеДокумента.КоличествоУпаковок КАК КоличествоУпаковок,
	|	1 КАК Коэффициент
	|ПОМЕСТИТЬ вт_ДанныеДляЗаполнения
	|ИЗ
	|	вт_ДанныеДокумента КАК ВТ_ДанныеДокумента
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	вт_ДанныеДляЗаполнения.ДокументОснование КАК ДокументОснование,
	|	вт_ДанныеДляЗаполнения.Организация КАК Организация,
	|	вт_ДанныеДляЗаполнения.Склад КАК Склад,
	|	вт_ДанныеДляЗаполнения.Контрагент КАК Контрагент,
	|	вт_ДанныеДляЗаполнения.Партнер КАК Партнер,
	|	вт_ДанныеДляЗаполнения.ВидОперации КАК ВидОперации,
	|	вт_ДанныеДляЗаполнения.Автор КАК Автор,
	|	вт_ДанныеДляЗаполнения.Дата КАК Дата
	|ИЗ
	|	вт_ДанныеДляЗаполнения КАК вт_ДанныеДляЗаполнения
	|
	|	УПОРЯДОЧИТЬ ПО
	|		ДокументОснование
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ 
	|	вт_ДанныеДляЗаполнения.ДокументОснование КАК ДокументОснование,
	|	вт_ДанныеДляЗаполнения.Организация КАК Организация,
	|	вт_ДанныеДляЗаполнения.Номенклатура КАК Номенклатура,
	|	вт_ДанныеДляЗаполнения.Характеристика КАК Характеристика,
	|	вт_ДанныеДляЗаполнения.Упаковка КАК Упаковка,
	|	вт_ДанныеДляЗаполнения.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	вт_ДанныеДляЗаполнения.КодТНВЭД КАК КодТНВЭД,
	|	вт_ДанныеДляЗаполнения.Количество КАК Количество,
	|	вт_ДанныеДляЗаполнения.КоличествоУпаковок КАК КоличествоУпаковок,
	|	вт_ДанныеДляЗаполнения.Коэффициент КАК Коэффициент
	|ИЗ
	|	вт_ДанныеДляЗаполнения КАК вт_ДанныеДляЗаполнения
	|
	|	УПОРЯДОЧИТЬ ПО
	|		ДокументОснование";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ИмяДокумента%", ДокументИСЦЭДМ);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ИмяТаблицыДанных%", ИмяТаблицыДанных);
	
	// В документе УведомлениеОВвозеИзТретьихСтранИСЦЭДМ нет реквизита Контрагент
	Если ДокументИСЦЭДМ = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаАктПриемаПередачиИСЦЭДМ()
		Или ДокументИСЦЭДМ = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОВвозеИзЕАЭСИСЦЭДМ() Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%Контрагент%", "ДокументИСЦЭДМ.Контрагент КАК Контрагент,");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%Контрагент%", "Неопределено КАК Контрагент,");
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПодготовитьТекстЗапросаДляЗаполненияПервичныхДокументовИСЦЭДМ_Перемещение(ПараметрыЗаполнения, ИмяТаблицыДанных = "Марки") Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДокументТЧ.Ссылка КАК Ссылка,
	|	СУММА(ДокументТЧ.Количество) КАК КоличествоУпаковок,
	|	ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка) КАК Упаковка,
	|	"""" КАК Характеристика,
	|	ШтрихкодыНоменклатуры.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ ВТ_Товары
	|ИЗ
	|	Документ.АктВнутреннегоПеремещенияИСЦЭДМ.%ИмяТаблицыДанных% КАК ДокументТЧ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|		ПО ДокументТЧ.EAN = ШтрихкодыНоменклатуры.Штрихкод
	|ГДЕ
	|	ДокументТЧ.Ссылка В (&МассивИСЦЭДМДляСозданияПервичныхДокументов)
	|
	|СГРУППИРОВАТЬ ПО
	|	ДокументТЧ.Ссылка,
	|	ШтрихкодыНоменклатуры.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Товары.Ссылка КАК ДокументОснование,
	|	ВТ_Товары.КоличествоУпаковок КАК КоличествоУпаковок,
	|	ВТ_Товары.КоличествоУпаковок КАК Количество,
	|	ВТ_Товары.Упаковка КАК Упаковка,
	|	ВТ_Товары.Номенклатура КАК Номенклатура,
	|	ВТ_Товары.Характеристика КАК Характеристика,
	|	ДокументИСЦЭДМ.Дата КАК Дата,
	|	ДокументИСЦЭДМ.Организация КАК Организация,
	|	ДокументИСЦЭДМ.СкладПоставщик КАК СкладОтправитель,
	|	ДокументИСЦЭДМ.СкладПолучатель КАК СкладПолучатель,
	|	ДокументИСЦЭДМ.Автор КАК Ответственный,
	|	"""" КАК ВидОперации	
	|ПОМЕСТИТЬ ВТ_ДанныеДокумента
	|ИЗ
	|	ВТ_Товары КАК ВТ_Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.АктВнутреннегоПеремещенияИСЦЭДМ КАК ДокументИСЦЭДМ
	|		ПО ВТ_Товары.Ссылка = ДокументИСЦЭДМ.Ссылка
	|ГДЕ
	|	ДокументИСЦЭДМ.Ссылка В (&МассивИСЦЭДМДляСозданияПервичныхДокументов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ДанныеДокумента.ДокументОснование КАК ДокументОснование,
	|	ВТ_ДанныеДокумента.Организация КАК Организация,
	|	ВТ_ДанныеДокумента.СкладОтправитель КАК СкладОтправитель,
	|	ВТ_ДанныеДокумента.СкладПолучатель КАК СкладПолучатель,
	|	ВТ_ДанныеДокумента.Ответственный КАК Ответственный,
	|	ВТ_ДанныеДокумента.ВидОперации КАК ВидОперации,
	|	ВТ_ДанныеДокумента.Дата КАК Дата,
	|	ВТ_ДанныеДокумента.Номенклатура КАК Номенклатура,
	|	ВТ_ДанныеДокумента.Характеристика КАК Характеристика,
	|	ВТ_ДанныеДокумента.Упаковка КАК Упаковка,
	|	ВТ_ДанныеДокумента.Количество КАК Количество,
	|	ВТ_ДанныеДокумента.КоличествоУпаковок КАК КоличествоУпаковок,
	|	1 КАК Коэффициент
	|ПОМЕСТИТЬ вт_ДанныеДляЗаполнения
	|ИЗ
	|	вт_ДанныеДокумента КАК ВТ_ДанныеДокумента
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	вт_ДанныеДляЗаполнения.ДокументОснование КАК ДокументОснование,
	|	вт_ДанныеДляЗаполнения.Организация КАК Организация,
	|	вт_ДанныеДляЗаполнения.СкладОтправитель КАК СкладОтправитель,
	|	вт_ДанныеДляЗаполнения.СкладПолучатель КАК СкладПолучатель,
	|	вт_ДанныеДляЗаполнения.ВидОперации КАК ВидОперации,
	|	вт_ДанныеДляЗаполнения.Ответственный КАК Ответственный,
	|	вт_ДанныеДляЗаполнения.Дата КАК Дата
	|ИЗ
	|	вт_ДанныеДляЗаполнения КАК вт_ДанныеДляЗаполнения
	|
	|	УПОРЯДОЧИТЬ ПО
	|		ДокументОснование
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ 
	|	вт_ДанныеДляЗаполнения.ДокументОснование КАК ДокументОснование,
	|	вт_ДанныеДляЗаполнения.Организация КАК Организация,
	|	вт_ДанныеДляЗаполнения.Номенклатура КАК Номенклатура,
	|	вт_ДанныеДляЗаполнения.Характеристика КАК Характеристика,
	|	вт_ДанныеДляЗаполнения.Упаковка КАК Упаковка,
	|	вт_ДанныеДляЗаполнения.Количество КАК Количество,
	|	вт_ДанныеДляЗаполнения.КоличествоУпаковок КАК КоличествоУпаковок,
	|	вт_ДанныеДляЗаполнения.Коэффициент КАК Коэффициент
	|ИЗ
	|	вт_ДанныеДляЗаполнения КАК вт_ДанныеДляЗаполнения
	|
	|	УПОРЯДОЧИТЬ ПО
	|		ДокументОснование";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ИмяТаблицыДанных%", ИмяТаблицыДанных);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПодготовитьТекстЗапросаПоИтогамДокументаЦЭДМ(ПараметрыЗаполнения) Экспорт
	
	ДокументИСЦЭДМ = Неопределено;
	Если ПараметрыЗаполнения.ТипДокументаИСМПТ = Тип("ДокументСсылка.УведомлениеОВводеВОборотИСЦЭДМ") Тогда
		ДокументИСЦЭДМ = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОВводеВОборотИСЦЭДМ();
	ИначеЕсли ПараметрыЗаполнения.ТипДокументаИСМПТ = Тип("ДокументСсылка.УведомлениеОВыводеИзОборотаИСЦЭДМ") Тогда
		ДокументИСЦЭДМ = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОВыводеИзОборотаИСЦЭДМ();
	ИначеЕсли ПараметрыЗаполнения.ТипДокументаИСМПТ = Тип("ДокументСсылка.АктПриемаПередачиИСЦЭДМ") Тогда
		ДокументИСЦЭДМ = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаАктПриемаПередачиИСЦЭДМ();
	ИначеЕсли ПараметрыЗаполнения.ТипДокументаИСМПТ = Тип("ДокументСсылка.УведомлениеОВвозеИзЕАЭСИСЦЭДМ") Тогда
		ДокументИСЦЭДМ = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОВвозеИзЕАЭСИСЦЭДМ();
	ИначеЕсли ПараметрыЗаполнения.ТипДокументаИСМПТ = Тип("ДокументСсылка.УведомлениеОВвозеИзТретьихСтранИСЦЭДМ") Тогда
		ДокументИСЦЭДМ = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОВвозеИзТретьихСтранИСЦЭДМ();
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДокументТЧ.Ссылка КАК Ссылка,
	|	МАКСИМУМ(ДокументТЧ.Цена) КАК Цена,
	|	ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка) КАК Упаковка,
	|	"""" КАК Характеристика,
	|	ШтрихкодыНоменклатуры.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ ВТ_Товары
	|ИЗ
	|	Документ.%ИмяДокумента%.Итоги КАК ДокументТЧ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|		ПО ДокументТЧ.EAN = ШтрихкодыНоменклатуры.Штрихкод
	|ГДЕ
	|	ДокументТЧ.Ссылка В (&МассивИСЦЭДМДляСозданияПервичныхДокументов)
	|
	|СГРУППИРОВАТЬ ПО
	|	ДокументТЧ.Ссылка,
	|	ШтрихкодыНоменклатуры.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Товары.Ссылка КАК ДокументОснование,
	|	ВТ_Товары.Номенклатура КАК Номенклатура,
	|	ВТ_Товары.Характеристика КАК Характеристика,
	|	ВТ_Товары.Упаковка КАК Упаковка,
	|	ВТ_Товары.Цена КАК Цена
	|ИЗ
	|	ВТ_Товары КАК ВТ_Товары
	|
	|	УПОРЯДОЧИТЬ ПО
	|		ДокументОснование";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ИмяДокумента%", ДокументИСЦЭДМ);
	
	Возврат ТекстЗапроса;
	
КонецФункции

//Универсальный запрос к первичным документам для получения данных для заполнения создаваемого документа ИС ЦЭДМ
//
Функция ПодготовитьТекстЗапросаДляЗаполненияДокументаИСЦЭДМ_Общий(ПараметрыЗаполнения) Экспорт
	
	ДокументыОснования 	 = ПараметрыЗаполнения.МассивДокументов;
	
	Если ТипЗнч(ДокументыОснования) = Тип("ДокументСсылка.ОтчетОПередачеКИОтНерезидентаРКИСЦЭДМ") Тогда
		ТекстЗапроса = ТекстЗапросаПоОтчетуОПередачеКИ();
		Возврат ТекстЗапроса;		
	КонецЕсли;

	ИмяДокументаОснования = ПолучитьИмяДокументаДляПроверкиПоТипу(ДокументыОснования);
	ТекстЗапроса = ТекстЗапросаОбщиеДанныеОснования("ИСЦЭДМ", ИмяДокументаОснования); 
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПодготовитьТекстЗапросаДляЗаполненияДокументаИСЦЭДМ_Перемещение(ПараметрыЗаполнения) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТиповойДокумент.Ссылка КАК ДокументОснование,
	|	ТиповойДокумент.СкладОтправитель КАК СкладОтправитель,
	|	ТиповойДокумент.СкладПолучатель КАК СкладПолучатель,
	//Данные Поставщика и получателя
	|	ТиповойДокумент.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА (ВЫРАЗИТЬ(Организации.НаименованиеПолное КАК СТРОКА(200))) <> """"
	|			ТОГДА ВЫРАЗИТЬ(Организации.НаименованиеПолное КАК СТРОКА(200))
	|		ИНАЧЕ Организации.Наименование
	|	КОНЕЦ КАК ОрганизацияНаименование,
	|	ТиповойДокумент.Организация.ИдентификационныйНомер КАК ОрганизацияИдентификационныйНомер,
	|	Неопределено КАК ВидОперации,
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.Количество КАК КоличествоИсточник,
	|	СправочникНоменклатура.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмеренияБазовая,
	|	ВЫБОР
	|		КОГДА СправочникНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ТабачнаяПродукция)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИСМПТК.Табачная)
	|		КОГДА СправочникНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ОбувнаяПродукция)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИСМПТК.Обувная)
	|		КОГДА СправочникНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.МолочнаяПродукция)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИСМПТК.МолочнаяПродукция)
	|		КОГДА СправочникНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.АлкогольнаяПродукция)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИСМПТК.Алкогольная)
	|		КОГДА СправочникНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ЛегкаяПромышленность)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИСМПТК.ЛегкаяПромышленность)
	|		КОГДА СправочникНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ЛекарственныеПрепараты)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИСМПТК.ЛекарственныеПрепараты)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИСМПТК.ПустаяСсылка)
	|	КОНЕЦ КАК ВидПродукции
	|ПОМЕСТИТЬ вт_ДанныеДокумента
	|
    |ИЗ
	|	Документ.ПеремещениеТоваров.Товары КАК ТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПеремещениеТоваров КАК ТиповойДокумент
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|			ПО ТиповойДокумент.Организация = Организации.Ссылка
	|		ПО ТаблицаТовары.Ссылка = ТиповойДокумент.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО ТаблицаТовары.Номенклатура = СправочникНоменклатура.Ссылка
	|ГДЕ
	|	ТиповойДокумент.Ссылка В(&МассивДокументов)
	|	И СправочникНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ЛекарственныеПрепараты)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация
	|
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	вт_ДанныеДокумента.ДокументОснование КАК ДокументОснование,
	|	вт_ДанныеДокумента.СкладОтправитель КАК СкладОтправитель,
	|	вт_ДанныеДокумента.СкладПолучатель КАК СкладПолучатель,
	|	вт_ДанныеДокумента.Организация КАК Организация,
	|	вт_ДанныеДокумента.ОрганизацияНаименование КАК ОрганизацияНаименование,
	|	вт_ДанныеДокумента.ОрганизацияИдентификационныйНомер КАК ОрганизацияИдентификационныйНомер,
    |	вт_ДанныеДокумента.ВидОперации КАК ВидОперации,
 	|	вт_ДанныеДокумента.Номенклатура КАК Номенклатура,
	|	вт_ДанныеДокумента.КоличествоИсточник КАК КоличествоИсточник,
	|	вт_ДанныеДокумента.ЕдиницаИзмеренияБазовая КАК ЕдиницаИзмеренияБазовая,
	|	вт_ДанныеДокумента.ВидПродукции КАК ВидПродукции
	|ПОМЕСТИТЬ вт_ДанныеДляЗаполнения
	|
	|ИЗ
	|	вт_ДанныеДокумента КАК вт_ДанныеДокумента
	|ГДЕ
	|	вт_ДанныеДокумента.КоличествоИсточник > 0 
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	вт_ДанныеДляЗаполнения.ДокументОснование КАК ДокументОснование,
	|	вт_ДанныеДляЗаполнения.СкладОтправитель КАК СкладОтправитель,
	|	вт_ДанныеДляЗаполнения.СкладПолучатель КАК СкладПолучатель,
	|	вт_ДанныеДляЗаполнения.Организация КАК Организация,
	|	вт_ДанныеДляЗаполнения.ОрганизацияНаименование КАК ОрганизацияНаименование,
	|	вт_ДанныеДляЗаполнения.ОрганизацияИдентификационныйНомер КАК ОрганизацияИдентификационныйНомер,
    |	вт_ДанныеДляЗаполнения.ВидОперации КАК ВидОперации
	|
	|ИЗ
	|	вт_ДанныеДляЗаполнения КАК вт_ДанныеДляЗаполнения
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДокументОснование
	|
	|;
	| 
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	вт_ДанныеДляЗаполнения.ДокументОснование КАК ДокументОснование,
	|	вт_ДанныеДляЗаполнения.Организация КАК Организация,
	|	вт_ДанныеДляЗаполнения.Номенклатура КАК Номенклатура,
	|	вт_ДанныеДляЗаполнения.КоличествоИсточник КАК КоличествоИсточник,
	|	вт_ДанныеДляЗаполнения.ЕдиницаИзмеренияБазовая КАК ЕдиницаИзмеренияБазовая,
	|	вт_ДанныеДляЗаполнения.ВидПродукции КАК ВидПродукции
	|ИЗ
	|	вт_ДанныеДляЗаполнения КАК вт_ДанныеДляЗаполнения
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДокументОснование";
	
	Возврат ТекстЗапроса;
		
КонецФункции

Функция ТекстЗапросаОбщиеДанныеОснования(ИнфСистема = "", ИмяДокумента)
	
	Если ИнфСистема = "" Тогда 
		ИнфСистема = "ИСМПТ";
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТиповойДокумент.Ссылка КАК ДокументОснование,
	|	ТиповойДокумент.Склад КАК Склад,
	//Данные Поставщика и получателя
	|	ТиповойДокумент.Организация КАК Организация,
	|	ТиповойДокумент.Организация КАК Поставщик, 
	|	ВЫБОР
	|		КОГДА (ВЫРАЗИТЬ(Организации.НаименованиеПолное КАК СТРОКА(200))) <> """"
	|			ТОГДА ВЫРАЗИТЬ(Организации.НаименованиеПолное КАК СТРОКА(200))
	|		ИНАЧЕ Организации.Наименование
	|	КОНЕЦ КАК ПоставщикНаименование,
	|	ТиповойДокумент.Организация.ИдентификационныйНомер КАК ПоставщикИдентификационныйНомер,
	|";
	
	//Контрагент
	Если ИмяДокумента = "СписаниеТоваров"
		Или ИмяДокумента = "ТребованиеНакладная"
		Или ИмяДокумента = "ОприходованиеТоваров" Тогда
		
		ТекстЗапроса = ТекстЗапроса + 
		"Неопределено КАК Контрагент,
		|	Неопределено КАК Получатель,
		|	Неопределено КАК ПолучательИдентификационныйНомер,
		|	Неопределено КАК ПолучательНаименование,
		|";
		
	Иначе
		ТекстЗапроса = ТекстЗапроса + 
		"ТиповойДокумент.Контрагент КАК Контрагент,
		|	ТиповойДокумент.Контрагент КАК Получатель,
		|	ТиповойДокумент.Контрагент.ИдентификационныйКодЛичности КАК ПолучательИдентификационныйНомер,
		|	ВЫБОР
		|		КОГДА (ВЫРАЗИТЬ(Контрагенты.НаименованиеПолное КАК СТРОКА(200))) <> """"
		|			ТОГДА ВЫРАЗИТЬ(Контрагенты.НаименованиеПолное КАК СТРОКА(200))
		|		ИНАЧЕ Контрагенты.Наименование
		|	КОНЕЦ КАК ПолучательНаименование,
		|";
	КонецЕсли;
	
	//Хозяйственная операция
	Если ИмяДокумента = "СписаниеТоваров"
		Или ИмяДокумента = "ТребованиеНакладная"
		Или ИмяДокумента = "ОприходованиеТоваров" Тогда
		ТекстЗапроса = ТекстЗапроса + 
		"Неопределено КАК ВидОперации,
		|";
	Иначе
		ТекстЗапроса = ТекстЗапроса + 
		"ТиповойДокумент.ВидОперации КАК ВидОперации,
		|";
	КонецЕсли;
	
	//Таблица товаров
	ТекстЗапроса = ТекстЗапроса +
	"ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	СУММА(ТаблицаТовары.Количество) КАК КоличествоИсточник,
	|";
	
	Если ИмяДокумента = "СписаниеТоваров"
		Или ИмяДокумента = "ТребованиеНакладная" Тогда
		ТекстЗапроса = ТекстЗапроса + 
		"Неопределено КАК Цена,
		|";
	Иначе
		ТекстЗапроса = ТекстЗапроса + 
		"ТаблицаТовары.Цена КАК Цена,
		|";
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса +
	"	СправочникНоменклатура.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмеренияБазовая,
	|	ВЫБОР
	|		КОГДА СправочникНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ТабачнаяПродукция)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИСМПТК.Табачная)
	|		КОГДА СправочникНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ОбувнаяПродукция)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИСМПТК.Обувная)
	|		КОГДА СправочникНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.МолочнаяПродукция)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИСМПТК.МолочнаяПродукция)
	|		КОГДА СправочникНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.АлкогольнаяПродукция)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИСМПТК.Алкогольная)
	|		КОГДА СправочникНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ЛегкаяПромышленность)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИСМПТК.ЛегкаяПромышленность)
	|		КОГДА СправочникНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ЛекарственныеПрепараты)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИСМПТК.ЛекарственныеПрепараты)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИСМПТК.ПустаяСсылка)
	|	КОНЕЦ КАК ВидПродукции
	|ПОМЕСТИТЬ вт_ДанныеДокумента
	|
	|ИЗ
	|	Документ.%ИмяДокумента%.Товары КАК ТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.%ИмяДокумента% КАК ТиповойДокумент
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|			ПО ТиповойДокумент.Организация = Организации.Ссылка
	|";
	
	Если Не ИмяДокумента = "СписаниеТоваров"
		И Не ИмяДокумента = "ТребованиеНакладная"
		И Не ИмяДокумента = "ОприходованиеТоваров" Тогда
		
		ТекстЗапроса = ТекстЗапроса + 
		"	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
		|		ПО ТиповойДокумент.Контрагент = Контрагенты.Ссылка
		|";
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса +
	"		ПО ТаблицаТовары.Ссылка = ТиповойДокумент.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО ТаблицаТовары.Номенклатура = СправочникНоменклатура.Ссылка
	|ГДЕ
	|	ТиповойДокумент.Ссылка В(&МассивДокументов)
	|";
	
	ТекстЗапроса = ТекстЗапроса +  ПолучитьКусокТекстаЗапросаПоВидуПродукции(ИнфСистема) + "
	|		
	|	СГРУППИРОВАТЬ ПО
	|	ТиповойДокумент.Ссылка,
	|	ТиповойДокумент.Склад,
	|	ТиповойДокумент.Организация,
	|	ВЫБОР
	|		КОГДА (ВЫРАЗИТЬ(Организации.НаименованиеПолное КАК СТРОКА(200))) <> """"
	|			ТОГДА ВЫРАЗИТЬ(Организации.НаименованиеПолное КАК СТРОКА(200))
	|		ИНАЧЕ Организации.Наименование
	|	КОНЕЦ,
	|	ТиповойДокумент.Организация.ИдентификационныйНомер,
	|";
	
	Если ИмяДокумента = "СписаниеТоваров"
		Или ИмяДокумента = "ТребованиеНакладная"
		Или ИмяДокумента = "ОприходованиеТоваров" Тогда
		ТекстЗапроса = ТекстЗапроса + 
		"Неопределено,
		|	Неопределено,
		|	Неопределено,
		|	Неопределено,
		|";
	Иначе
		ТекстЗапроса = ТекстЗапроса + 
		"ТиповойДокумент.Контрагент,
		|	ТиповойДокумент.Контрагент,
		|	ТиповойДокумент.Контрагент.ИдентификационныйКодЛичности,
		|	ВЫБОР
		|		КОГДА (ВЫРАЗИТЬ(Контрагенты.НаименованиеПолное КАК СТРОКА(200))) <> """"
		|			ТОГДА ВЫРАЗИТЬ(Контрагенты.НаименованиеПолное КАК СТРОКА(200))
		|		ИНАЧЕ Контрагенты.Наименование
		|	КОНЕЦ,
		|";
	КонецЕсли;
	
	Если ИмяДокумента = "СписаниеТоваров"
		Или ИмяДокумента = "ТребованиеНакладная"
		Или ИмяДокумента = "ОприходованиеТоваров" Тогда
		ТекстЗапроса = ТекстЗапроса +
		"	НЕОПРЕДЕЛЕНО,
		|";
	Иначе
		ТекстЗапроса = ТекстЗапроса + 
		"ТиповойДокумент.ВидОперации,
		|";
	КонецЕсли;	
	
	ТекстЗапроса = ТекстЗапроса + 
	"	ТаблицаТовары.Номенклатура,
	|	СправочникНоменклатура.БазоваяЕдиницаИзмерения,
	|	ВЫБОР
	|		КОГДА СправочникНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ТабачнаяПродукция)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИСМПТК.Табачная)
	|		КОГДА СправочникНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ОбувнаяПродукция)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИСМПТК.Обувная)
	|		КОГДА СправочникНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.МолочнаяПродукция)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИСМПТК.МолочнаяПродукция)
	|		КОГДА СправочникНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.АлкогольнаяПродукция)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИСМПТК.Алкогольная)
	|		КОГДА СправочникНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ЛегкаяПромышленность)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИСМПТК.ЛегкаяПромышленность)
	|		КОГДА СправочникНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ЛекарственныеПрепараты)
	|		ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИСМПТК.ЛекарственныеПрепараты)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИСМПТК.ПустаяСсылка)
	|	КОНЕЦ,
	|";	
	
	Если ИмяДокумента = "СписаниеТоваров"
		Или ИмяДокумента = "ТребованиеНакладная" Тогда
		ТекстЗапроса = ТекстЗапроса + 
		"Неопределено,
		|";
	Иначе
		ТекстЗапроса = ТекстЗапроса + 
		"ТаблицаТовары.Цена,
		|";
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + 
	"	ТиповойДокумент.Организация
	|	
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация
	|
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	вт_ДанныеДокумента.ДокументОснование КАК ДокументОснование,
	|	вт_ДанныеДокумента.Склад КАК Склад,
	|	вт_ДанныеДокумента.Организация КАК Организация,
	|	вт_ДанныеДокумента.Поставщик КАК Поставщик,
	|	вт_ДанныеДокумента.ПоставщикНаименование КАК ПоставщикНаименование,
	|	вт_ДанныеДокумента.ПоставщикИдентификационныйНомер КАК ПоставщикИдентификационныйНомер,
	|	вт_ДанныеДокумента.Контрагент КАК Контрагент,
	|	вт_ДанныеДокумента.Получатель КАК Получатель,
	|	вт_ДанныеДокумента.ПолучательНаименование КАК ПолучательНаименование,
	|	вт_ДанныеДокумента.ПолучательИдентификационныйНомер КАК ПолучательИдентификационныйНомер,
	|	вт_ДанныеДокумента.ВидОперации КАК ВидОперации,
	|	вт_ДанныеДокумента.Номенклатура КАК Номенклатура,
	|	вт_ДанныеДокумента.Цена КАК Цена,
	|	вт_ДанныеДокумента.КоличествоИсточник КАК КоличествоИсточник,
	|	вт_ДанныеДокумента.ЕдиницаИзмеренияБазовая КАК ЕдиницаИзмеренияБазовая,
	|	вт_ДанныеДокумента.ВидПродукции КАК ВидПродукции
	|ПОМЕСТИТЬ вт_ДанныеДляЗаполнения
	|
	|ИЗ
	|	вт_ДанныеДокумента КАК вт_ДанныеДокумента
	|ГДЕ
	|	вт_ДанныеДокумента.КоличествоИсточник > 0 
	|
	|;
	|
	//Таблица реквизитов
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	вт_ДанныеДляЗаполнения.ДокументОснование КАК ДокументОснование,
	|	вт_ДанныеДляЗаполнения.Склад КАК Склад,
	|	вт_ДанныеДляЗаполнения.Организация КАК Организация,
	|	вт_ДанныеДляЗаполнения.Поставщик КАК Поставщик,
	|	вт_ДанныеДляЗаполнения.ПоставщикНаименование КАК ПоставщикНаименование,
	|	вт_ДанныеДляЗаполнения.ПоставщикИдентификационныйНомер КАК ПоставщикИдентификационныйНомер,
	|	вт_ДанныеДляЗаполнения.Контрагент КАК Контрагент,
	|	вт_ДанныеДляЗаполнения.Получатель КАК Получатель,
	|	вт_ДанныеДляЗаполнения.ПолучательНаименование КАК ПолучательНаименование,
	|	вт_ДанныеДляЗаполнения.ПолучательИдентификационныйНомер КАК ПолучательИдентификационныйНомер,
	|	вт_ДанныеДляЗаполнения.ВидОперации КАК ВидОперации
	|
	|ИЗ
	|	вт_ДанныеДляЗаполнения КАК вт_ДанныеДляЗаполнения
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДокументОснование
	|
	|;
	| 
	//Таблица товаров
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	вт_ДанныеДляЗаполнения.ДокументОснование КАК ДокументОснование,
	|	вт_ДанныеДляЗаполнения.Организация КАК Организация,
	|	вт_ДанныеДляЗаполнения.Номенклатура КАК Номенклатура,
	|	СУММА(вт_ДанныеДляЗаполнения.КоличествоИсточник) КАК КоличествоИсточник,
	|	вт_ДанныеДляЗаполнения.ЕдиницаИзмеренияБазовая КАК ЕдиницаИзмеренияБазовая,
	|	вт_ДанныеДляЗаполнения.ВидПродукции КАК ВидПродукции
	|ИЗ
	|	вт_ДанныеДляЗаполнения КАК вт_ДанныеДляЗаполнения
	|
	|СГРУППИРОВАТЬ ПО
	|	вт_ДанныеДляЗаполнения.ДокументОснование,
	|	вт_ДанныеДляЗаполнения.Организация,
	|	вт_ДанныеДляЗаполнения.Номенклатура,
	|	вт_ДанныеДляЗаполнения.ЕдиницаИзмеренияБазовая,
	|	вт_ДанныеДляЗаполнения.ВидПродукции
	|УПОРЯДОЧИТЬ ПО
	|	ДокументОснование
	|
	|;
	| 
	//Таблица итогов
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	вт_ДанныеДляЗаполнения.ДокументОснование КАК ДокументОснование,
	|	вт_ДанныеДляЗаполнения.Организация КАК Организация,
	|	вт_ДанныеДляЗаполнения.Номенклатура КАК Номенклатура,
	|	вт_ДанныеДляЗаполнения.Цена КАК Цена,
	|	вт_ДанныеДляЗаполнения.КоличествоИсточник КАК Количество
	|ИЗ
	|	вт_ДанныеДляЗаполнения КАК вт_ДанныеДляЗаполнения
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДокументОснование";
	
	Если ИмяДокумента = "ТребованиеНакладная" Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Документ.%ИмяДокумента%.Товары КАК ТаблицаТовары", "Документ.%ИмяДокумента%.Материалы КАК ТаблицаТовары");
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ИмяДокумента%", ИмяДокумента);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаОбщиеДанныеОснования_Перемещение()
	
	Возврат ПодготовитьТекстЗапросаДляЗаполненияДокументаИСЦЭДМ_Перемещение(Неопределено); 
	
КонецФункции

Функция ТекстЗапросаПоОтчетуОПередачеКИ()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОтчетОПередаче.Ссылка КАК ДокументОснование,
	|	НЕОПРЕДЕЛЕНО КАК Склад,
	|	ОтчетОПередаче.Организация КАК Организация,
	|	ОтчетОПередаче.Поставщик КАК Поставщик,
	|	ОтчетОПередаче.ПоставщикНаименование КАК ПоставщикНаименование,
	|	ОтчетОПередаче.ПоставщикИдентификационныйНомер КАК ПоставщикИдентификационныйНомер,
	|	НЕОПРЕДЕЛЕНО КАК Контрагент,
	|	ОтчетОПередаче.Получатель КАК Получатель,
	|	ОтчетОПередаче.ПолучательИдентификационныйНомер КАК ПолучательИдентификационныйНомер,
	|	ОтчетОПередаче.ПолучательНаименование КАК ПолучательНаименование,
	|	НЕОПРЕДЕЛЕНО КАК ВидОперации,
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.Количество КАК КоличествоИсточник,
	|	НЕОПРЕДЕЛЕНО КАК Цена,
	|	СправочникНоменклатура.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмеренияБазовая,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИСМПТК.ЛекарственныеПрепараты) КАК ВидПродукции
	|ПОМЕСТИТЬ вт_ДанныеДокумента
	|ИЗ
	|	Документ.ОтчетОПередачеКИОтНерезидентаРКИСЦЭДМ.Марки КАК ТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтчетОПередачеКИОтНерезидентаРКИСЦЭДМ КАК ОтчетОПередаче
	|		ПО ТаблицаТовары.Ссылка = ОтчетОПередаче.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО ТаблицаТовары.Номенклатура = СправочникНоменклатура.Ссылка
	|ГДЕ
	|	ОтчетОПередаче.Ссылка В(&МассивДокументов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	вт_ДанныеДокумента.ДокументОснование КАК ДокументОснование,
	|	вт_ДанныеДокумента.Склад КАК Склад,
	|	вт_ДанныеДокумента.Организация КАК Организация,
	|	вт_ДанныеДокумента.Поставщик КАК Поставщик,
	|	вт_ДанныеДокумента.ПоставщикНаименование КАК ПоставщикНаименование,
	|	вт_ДанныеДокумента.ПоставщикИдентификационныйНомер КАК ПоставщикИдентификационныйНомер,
	|	вт_ДанныеДокумента.Контрагент КАК Контрагент,
	|	вт_ДанныеДокумента.Получатель КАК Получатель,
	|	вт_ДанныеДокумента.ПолучательНаименование КАК ПолучательНаименование,
	|	вт_ДанныеДокумента.ПолучательИдентификационныйНомер КАК ПолучательИдентификационныйНомер,
	|	вт_ДанныеДокумента.ВидОперации КАК ВидОперации,
	|	вт_ДанныеДокумента.Номенклатура КАК Номенклатура,
	|	вт_ДанныеДокумента.Цена КАК Цена,
	|	вт_ДанныеДокумента.КоличествоИсточник КАК КоличествоИсточник,
	|	вт_ДанныеДокумента.ЕдиницаИзмеренияБазовая КАК ЕдиницаИзмеренияБазовая,
	|	вт_ДанныеДокумента.ВидПродукции КАК ВидПродукции
	|ПОМЕСТИТЬ вт_ДанныеДляЗаполнения
	|ИЗ
	|	вт_ДанныеДокумента КАК вт_ДанныеДокумента
	|ГДЕ
	|	вт_ДанныеДокумента.КоличествоИсточник > 0
	|;
	|
	//Реквизиты
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	вт_ДанныеДляЗаполнения.ДокументОснование КАК ДокументОснование,
	|	вт_ДанныеДляЗаполнения.Склад КАК Склад,
	|	вт_ДанныеДляЗаполнения.Организация КАК Организация,
	|	вт_ДанныеДляЗаполнения.Поставщик КАК Поставщик,
	|	вт_ДанныеДляЗаполнения.ПоставщикНаименование КАК ПоставщикНаименование,
	|	вт_ДанныеДляЗаполнения.ПоставщикИдентификационныйНомер КАК ПоставщикИдентификационныйНомер,
	|	вт_ДанныеДляЗаполнения.Контрагент КАК Контрагент,
	|	вт_ДанныеДляЗаполнения.Получатель КАК Получатель,
	|	вт_ДанныеДляЗаполнения.ПолучательНаименование КАК ПолучательНаименование,
	|	вт_ДанныеДляЗаполнения.ПолучательИдентификационныйНомер КАК ПолучательИдентификационныйНомер,
	|	вт_ДанныеДляЗаполнения.ВидОперации КАК ВидОперации
	|ИЗ
	|	вт_ДанныеДляЗаполнения КАК вт_ДанныеДляЗаполнения
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДокументОснование
	|;
	|
	//Товары
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	вт_ДанныеДляЗаполнения.ДокументОснование КАК ДокументОснование,
	|	вт_ДанныеДляЗаполнения.Организация КАК Организация,
	|	вт_ДанныеДляЗаполнения.Номенклатура КАК Номенклатура,
	|	вт_ДанныеДляЗаполнения.Цена КАК Цена,
	|	СУММА(вт_ДанныеДляЗаполнения.КоличествоИсточник) КАК КоличествоИсточник,
	|	вт_ДанныеДляЗаполнения.ЕдиницаИзмеренияБазовая КАК ЕдиницаИзмеренияБазовая,
	|	вт_ДанныеДляЗаполнения.ВидПродукции КАК ВидПродукции
	|ИЗ
	|	вт_ДанныеДляЗаполнения КАК вт_ДанныеДляЗаполнения
	|
	|СГРУППИРОВАТЬ ПО
	|	вт_ДанныеДляЗаполнения.Организация,
	|	вт_ДанныеДляЗаполнения.Цена,
	|	вт_ДанныеДляЗаполнения.Номенклатура,
	|	вт_ДанныеДляЗаполнения.ЕдиницаИзмеренияБазовая,
	|	вт_ДанныеДляЗаполнения.ВидПродукции,
	|	вт_ДанныеДляЗаполнения.ДокументОснование
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДокументОснование
	|;
	|
	//итоги (для документа не нужны, сохраняются для общего запроса)
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	вт_ДанныеДляЗаполнения.ДокументОснование КАК ДокументОснование,
	|	вт_ДанныеДляЗаполнения.Организация КАК Организация,
	|	вт_ДанныеДляЗаполнения.Номенклатура КАК Номенклатура,
	|	вт_ДанныеДляЗаполнения.Цена КАК Цена,
	|	СУММА(вт_ДанныеДляЗаполнения.КоличествоИсточник) КАК КоличествоИсточник,
	|	вт_ДанныеДляЗаполнения.ЕдиницаИзмеренияБазовая КАК ЕдиницаИзмеренияБазовая,
	|	вт_ДанныеДляЗаполнения.ВидПродукции КАК ВидПродукции
	|ИЗ
	|	вт_ДанныеДляЗаполнения КАК вт_ДанныеДляЗаполнения
	|
	|СГРУППИРОВАТЬ ПО
	|	вт_ДанныеДляЗаполнения.Организация,
	|	вт_ДанныеДляЗаполнения.Цена,
	|	вт_ДанныеДляЗаполнения.Номенклатура,
	|	вт_ДанныеДляЗаполнения.ЕдиницаИзмеренияБазовая,
	|	вт_ДанныеДляЗаполнения.ВидПродукции,
	|	вт_ДанныеДляЗаполнения.ДокументОснование
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДокументОснование";
	
	Возврат ТекстЗапроса;
	
КонецФункции

#Область ЗаполнениеЗначенийПоУмолчаниюПриСозданииИСЦЭДМ

//Получение значений некоторых реквизитов документа ИС ЦЭДМ, которые могут зависеть от выбранного документа-основания.
//Вызывается из обработки заполнения документа ИС ЦЭДМ в модуле объекта.
Функция ПолучитьЗначенияПоУмолчаниюДляСозданияАктаПриемаПередачиИСЦЭДМ(ДокументыОснованияМассив) Экспорт
	
	СтруктураРеквизитов = Новый Структура();
	СтруктураРеквизитов.Вставить("ВидОперации",  ПредопределенноеЗначение("Перечисление.ХозяйственныеОперацииИСЦЭДМ.РеализацияОтКонтрагента"));
	СтруктураРеквизитов.Вставить("ТипАкта", 	 ПредопределенноеЗначение("Перечисление.ВидыДокументаИСМПТК.Исходный"));
	СтруктураРеквизитов.Вставить("Направление",  ПредопределенноеЗначение("Перечисление.НаправленияДокументовИСМПТК.Исходящий"));
	СтруктураРеквизитов.Вставить("Автор",  		 ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ТекущийПользователь());
	СтруктураРеквизитов.Вставить("ТоварнаяГруппа", ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.ЛекарственныеПрепараты"));
	СтруктураРеквизитов.Вставить("ЭтапОформления", ПредопределенноеЗначение("Перечисление.ЭтапыОформленияДокументовИСЦЭДМ.ВРаботе"));
	
	Возврат СтруктураРеквизитов;
	
КонецФункции

//Получение значений некоторых реквизитов документа ИС ЦЭДМ, которые могут зависеть от выбранного документа-основания.
//Вызывается из обработки заполнения документа ИС ЦЭДМ в модуле объекта.
Функция ПолучитьЗначенияПоУмолчаниюДляСозданияУведомленияОВводеИСЦЭДМ(ДокументыОснования) Экспорт
	
	СтруктураРеквизитов = Новый Структура();
	СтруктураРеквизитов.Вставить("ПричинаВводаВОборот", ПредопределенноеЗначение("Перечисление.ПричиныПовторногоВводаКМВОборотИСЦЭДМ.Излишки"));
	СтруктураРеквизитов.Вставить("Автор",  		   ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ТекущийПользователь());
	СтруктураРеквизитов.Вставить("ТоварнаяГруппа", ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.ЛекарственныеПрепараты"));
	СтруктураРеквизитов.Вставить("ЭтапОформления", ПредопределенноеЗначение("Перечисление.ЭтапыОформленияДокументовИСЦЭДМ.ВРаботе"));
	
	Если ТипЗнч(ДокументыОснования) = Тип("Массив") Тогда
		ДанныеДляРазбора = ДокументыОснования[0]; 
	Иначе
		ДанныеДляРазбора = ДокументыОснования;
	КонецЕсли;
	
	СтруктураРеквизитов.Вставить("ДокументОснованиеНаименование", Строка(ТипЗнч(ДанныеДляРазбора)));
	СтруктураРеквизитов.Вставить("ДокументОснованиеДата",  ДанныеДляРазбора.Дата);
	СтруктураРеквизитов.Вставить("ДокументОснованиеНомер", ДанныеДляРазбора.Номер);
	
	Возврат СтруктураРеквизитов;
	
КонецФункции

//Получение значений некоторых реквизитов документа ИС ЦЭДМ, которые могут зависеть от выбранного документа-основания.
//Вызывается из обработки заполнения документа ИС ЦЭДМ в модуле объекта.
Функция ПолучитьЗначенияПоУмолчаниюДляСозданияУведомленияОВыводеИСЦЭДМ(ДокументыОснования) Экспорт
	
	СтруктураРеквизитов = Новый Структура();
	СтруктураРеквизитов.Вставить("ПричинаВыводаИзОборота", ПредопределенноеЗначение("Перечисление.ПричиныВыводаКМИзОборотаИСЦЭДМ.МедицинскоеНазначение"));
	СтруктураРеквизитов.Вставить("Автор",  		   ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ТекущийПользователь());
	СтруктураРеквизитов.Вставить("ТоварнаяГруппа", ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.ЛекарственныеПрепараты"));
	СтруктураРеквизитов.Вставить("ЭтапОформления", ПредопределенноеЗначение("Перечисление.ЭтапыОформленияДокументовИСЦЭДМ.ВРаботе"));
	
	Если ТипЗнч(ДокументыОснования) = Тип("Массив") Тогда
		ДанныеДляРазбора = ДокументыОснования[0]; 
	Иначе
		ДанныеДляРазбора = ДокументыОснования;
	КонецЕсли;
	
	СтруктураРеквизитов.Вставить("ДокументОснованиеНаименование", Строка(ТипЗнч(ДанныеДляРазбора)));
	СтруктураРеквизитов.Вставить("ДокументОснованиеДата",  ДанныеДляРазбора.Дата);
	СтруктураРеквизитов.Вставить("ДокументОснованиеНомер", ДанныеДляРазбора.Номер);
	
	Возврат СтруктураРеквизитов;
	
КонецФункции

//Получение значений некоторых реквизитов документа ИС ЦЭДМ, которые могут зависеть от выбранного документа-основания.
//Вызывается из обработки заполнения документа ИС ЦЭДМ в модуле объекта.
Функция ПолучитьЗначенияПоУмолчаниюДляСозданияАктаВнутреннегоПеремещенияИСЦЭДМ(ДокументыОснованияМассив) Экспорт
	
	СтруктураРеквизитов = Новый Структура();
	СтруктураРеквизитов.Вставить("ВидОперации",    ПредопределенноеЗначение("Перечисление.ХозяйственныеОперацииИСЦЭДМ.ВнутреннееПеремещение"));
	СтруктураРеквизитов.Вставить("Автор",  		   ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ТекущийПользователь());
	СтруктураРеквизитов.Вставить("ЭтапОформления", ПредопределенноеЗначение("Перечисление.ЭтапыОформленияДокументовИСЦЭДМ.ВРаботе"));
	
	Возврат СтруктураРеквизитов;
	
КонецФункции

//Получение значений некоторых реквизитов документа ИС ЦЭДМ, которые могут зависеть от выбранного документа-основания.
//Вызывается из обработки заполнения документа ИС ЦЭДМ в модуле объекта.
Функция ПолучитьЗначенияПоУмолчаниюДляСозданияУведомленияОВвозеЕАЭСИСЦЭДМ(ДокументыОснования) Экспорт
	
	СтруктураРеквизитов = Новый Структура();
	СтруктураРеквизитов.Вставить("Автор",  ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ТекущийПользователь());
	
	Возврат СтруктураРеквизитов;
	
КонецФункции

//Получение значений некоторых реквизитов документа ИС ЦЭДМ, которые могут зависеть от выбранного документа-основания.
//Вызывается из обработки заполнения документа ИС ЦЭДМ в модуле объекта.
Функция ПолучитьЗначенияПоУмолчаниюДляСозданияУведомленияОВвозеИмпортИСЦЭДМ(ДокументыОснования) Экспорт
	
	СтруктураРеквизитов = Новый Структура();
	СтруктураРеквизитов.Вставить("Автор", ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ТекущийПользователь());
	
	Возврат СтруктураРеквизитов;
	
КонецФункции

#КонецОбласти

//Универсальная функция для перезаполнения некоторых сведений в документе ИС ЦЭДМ по выбранному в нем документу-основанию
//
Функция ПолучитьДанныеДокументаОснованияДляПерезаполненияИСЦЭДМ_Общий(ДокументОснование, ДокументЦЭДМ) Экспорт
	
	ИмяДокументаОснования = ПолучитьИмяДокументаДляПроверкиПоТипу(ДокументОснование);
	ТекстЗапроса = ТекстЗапросаОбщиеДанныеОснования("ИСЦЭДМ", ИмяДокументаОснования);
	Запрос = Новый Запрос();
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("МассивДокументов", ДокументОснование);
	
	РезультатЗапроса  = Запрос.ВыполнитьПакет();
	КоличествоПакетов = РезультатЗапроса.Количество();
	
	ТаблицаРеквизиты = РезультатЗапроса[КоличествоПакетов - 3].Выгрузить();
	Реквизиты = Новый Структура();
	
	Для Каждого Строка Из ТаблицаРеквизиты Цикл
		
		Реквизиты.Вставить("Организация", Строка.Организация);
		Реквизиты.Вставить("Склад", 	  Строка.Склад); 
		ДанныеСкладаЦЭДМ = ПолучитьДанныеСкладаЦЭДМПоСкладуУчета(Строка.Склад, Строка.Организация);
		Если Не ДанныеСкладаЦЭДМ = Неопределено Тогда
			Реквизиты.Вставить("СкладЦЭДМ", ДанныеСкладаЦЭДМ.СкладЦЭДМ);
			Если Не ДокументЦЭДМ = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОВвозеИзЕАЭСИСЦЭДМ()
				И Не ДокументЦЭДМ = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОВвозеИзТретьихСтранИСЦЭДМ() Тогда
				Реквизиты.Вставить("ПоставщикСкладЦЭДМИдентификационныйНомер",  ДанныеСкладаЦЭДМ.ИдентификаторСклада);
			Иначе
				Реквизиты.Вставить("ПолучательСкладЦЭДМИдентификационныйНомер", ДанныеСкладаЦЭДМ.ИдентификаторСклада);
			КонецЕсли;
		КонецЕсли;
		
		Если Не ДокументЦЭДМ = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОВвозеИзЕАЭСИСЦЭДМ()
			И Не ДокументЦЭДМ = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОВвозеИзТретьихСтранИСЦЭДМ() Тогда
			
			Реквизиты.Вставить("Поставщик",  Строка.Поставщик);
			Реквизиты.Вставить("ПоставщикИдентификационныйНомер", Строка.ПоставщикИдентификационныйНомер);
			Реквизиты.Вставить("ПоставщикНаименование", Строка.ПоставщикНаименование);
		Иначе
			//У ввоза заполнение наоборот
			Реквизиты.Вставить("Получатель", Строка.Поставщик);
			Реквизиты.Вставить("ПолучательИдентификационныйНомер", Строка.ПоставщикИдентификационныйНомер);
			Реквизиты.Вставить("ПолучательНаименование", Строка.ПоставщикНаименование);
			Реквизиты.Вставить("Контрагент", Строка.Контрагент);
			Реквизиты.Вставить("Поставщик",  Строка.Получатель);
			Реквизиты.Вставить("ПоставщикИдентификационныйНомер", Строка.ПолучательИдентификационныйНомер);
			Реквизиты.Вставить("ПоставщикНаименование", Строка.ПолучательНаименование);
		КонецЕсли;
		
		Если Не ДокументЦЭДМ = "УведомлениеОВыводеИзОборота"
			И Не ДокументЦЭДМ = "УведомлениеОВводеВОборот" 
			И Не ДокументЦЭДМ = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОВвозеИзЕАЭСИСЦЭДМ()
			И Не ДокументЦЭДМ = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОВвозеИзТретьихСтранИСЦЭДМ() Тогда
			Реквизиты.Вставить("Контрагент", Строка.Контрагент);
			Реквизиты.Вставить("Получатель", Строка.Получатель);
			Реквизиты.Вставить("ПолучательИдентификационныйНомер", Строка.ПолучательИдентификационныйНомер);
			Реквизиты.Вставить("ПолучательНаименование", Строка.ПолучательНаименование);
		КонецЕсли;
		
		Если ДокументЦЭДМ = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОВвозеИзЕАЭСИСЦЭДМ()
			ИЛИ ДокументЦЭДМ = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОВвозеИзТретьихСтранИСЦЭДМ() Тогда
			Реквизиты.Вставить("СтранаОтправления", ПолучитьСтрануОтправленияВвозИзЕАЭС(Строка.Контрагент));
		КонецЕсли;
		
		Реквизиты.Вставить("ДокументОснование", Строка.ДокументОснование);
		
	КонецЦикла;
	
	ТаблицаТовары = РезультатЗапроса[КоличествоПакетов - 2].Выгрузить(); 
	Товары = Новый Массив();
	
	Для Каждого Строка Из ТаблицаТовары Цикл
		
		СтрокаТовары = Новый Структура();
		СтрокаТовары.Вставить("Номенклатура", 	    Строка.Номенклатура);
		СтрокаТовары.Вставить("КоличествоИсточник", Строка.КоличествоИсточник);
		СтрокаТовары.Вставить("ЕдиницаИзмерения",   Строка.ЕдиницаИзмеренияБазовая);
		СтрокаТовары.Вставить("ВидПродукции",	    Строка.ВидПродукции);
		Товары.Добавить(СтрокаТовары);
		
	КонецЦикла;
	
	ТаблицаИтогов = РезультатЗапроса[КоличествоПакетов - 1].Выгрузить(); 
	Итоги = Новый Массив();
	Для Каждого Строка Из ТаблицаИтогов Цикл
		
		СтрокаИтоги = Новый Структура();
		СтрокаИтоги.Вставить("Номенклатура", 	  Строка.Номенклатура);
		СтрокаИтоги.Вставить("ДокументОснование", Строка.ДокументОснование);
		СтрокаИтоги.Вставить("Организация", 	  Строка.Организация);
		СтрокиДубли = ТаблицаИтогов.НайтиСтроки(Новый Структура("Номенклатура", Строка.Номенклатура));
		Если Не СтрокиДубли.Количество() = 1 Тогда
			СтрокаИтоги.Вставить("Цена", 0); //однозначно определить не можем, поэтому не заполняем вообще 
		Иначе
			СтрокаИтоги.Вставить("Цена", Строка.Цена);
		КонецЕсли;
		Итоги.Добавить(СтрокаИтоги);
		
	КонецЦикла;
	
	ДанныеДокументаОснования = Новый Структура();
	ДанныеДокументаОснования.Вставить("Реквизиты", Реквизиты);
	ДанныеДокументаОснования.Вставить("Товары",	   Товары);
	ДанныеДокументаОснования.Вставить("Итоги",	   Итоги);
	
	Возврат ДанныеДокументаОснования;
	
КонецФункции

Функция ПолучитьДанныеДокументаОснованияДляПерезаполненияИСЦЭДМ_Перемещение(ДокументОснование, ДокументЦЭДМ) Экспорт
	
	ТекстЗапроса = ТекстЗапросаОбщиеДанныеОснования_Перемещение();
	Запрос = Новый Запрос();
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("МассивДокументов", ДокументОснование);
	
	РезультатЗапроса  = Запрос.ВыполнитьПакет();
	КоличествоПакетов = РезультатЗапроса.Количество();
	
	ТаблицаРеквизиты = РезультатЗапроса[КоличествоПакетов - 2].Выгрузить();
	Реквизиты = Новый Структура();
	
	Для Каждого Строка Из ТаблицаРеквизиты Цикл
		
		СкладОтправительПоОснованию = Строка.СкладОтправитель;
		СкладПолучательПоОснованию  = Строка.СкладПолучатель;
		Реквизиты.Вставить("СкладПоставщик",  СкладОтправительПоОснованию);
		Реквизиты.Вставить("СкладПолучатель", СкладПолучательПоОснованию);
		//Пробуем найти соответствие складов ЦЭДМ
		СкладЦЭДМОтправитель = ПолучитьДанныеСкладаЦЭДМПоСкладуУчета(СкладОтправительПоОснованию, Строка.Организация);
		СкладЦЭДМПолучатель  = ПолучитьДанныеСкладаЦЭДМПоСкладуУчета(СкладПолучательПоОснованию,  Строка.Организация);
		Если Не СкладЦЭДМОтправитель = Неопределено Тогда
			Реквизиты.Вставить("Поставщик", 					  СкладЦЭДМОтправитель.СкладЦЭДМ);
			Реквизиты.Вставить("ПоставщикНаименование", 		  СкладЦЭДМОтправитель.Представление);
			Реквизиты.Вставить("ПоставщикИдентификационныйНомер", СкладЦЭДМОтправитель.ИдентификаторСклада);
		Иначе
			//заполняем данными организации
			Реквизиты.Вставить("Поставщик", 					  Строка.Организация);
			Реквизиты.Вставить("ПоставщикНаименование", 		  Строка.ОрганизацияНаименование);
			Реквизиты.Вставить("ПоставщикИдентификационныйНомер", Строка.ОрганизацияИдентификационныйНомер);	
		КонецЕсли;
		Если Не СкладЦЭДМПолучатель = Неопределено Тогда
			Реквизиты.Вставить("Получатель", 					   СкладЦЭДМПолучатель.СкладЦЭДМ);
			Реквизиты.Вставить("ПолучательНаименование", 		   СкладЦЭДМПолучатель.Представление);
			Реквизиты.Вставить("ПолучательИдентификационныйНомер", СкладЦЭДМПолучатель.ИдентификаторСклада);
		Иначе
			//заполняем данными организации
			Реквизиты.Вставить("Получатель", 					   Строка.Организация);
			Реквизиты.Вставить("ПолучательНаименование", 		   Строка.ОрганизацияНаименование);
			Реквизиты.Вставить("ПолучательИдентификационныйНомер", Строка.ОрганизацияИдентификационныйНомер);
		КонецЕсли;
		
		Реквизиты.Вставить("Организация", Строка.Организация);
		Реквизиты.Вставить("ВидОперации", ПредопределенноеЗначение("Перечисление.ХозяйственныеОперацииИСЦЭДМ.ВнутреннееПеремещение"));
		Реквизиты.Вставить("ДокументОснование", Строка.ДокументОснование);
		
	КонецЦикла;
	
	ТаблицаТовары = РезультатЗапроса[КоличествоПакетов - 1].Выгрузить(); 
	Товары = Новый Массив();
	
	Для Каждого Строка Из ТаблицаТовары Цикл
		
		СтрокаТовары = Новый Структура();
		СтрокаТовары.Вставить("Номенклатура", 	    Строка.Номенклатура);
		СтрокаТовары.Вставить("КоличествоИсточник", Строка.КоличествоИсточник);
		СтрокаТовары.Вставить("ЕдиницаИзмерения",   Строка.ЕдиницаИзмеренияБазовая);
		Товары.Добавить(СтрокаТовары);
		
	КонецЦикла;
	
	ДанныеДокументаОснования = Новый Структура();
	ДанныеДокументаОснования.Вставить("Реквизиты", Реквизиты);
	ДанныеДокументаОснования.Вставить("Товары",	   Товары);
	
	Возврат ДанныеДокументаОснования;
	
КонецФункции

//Проверяем, может ли первичный документ, из которого инициировали создание документа ИС ЦЭДМ, 
//служить основнаием для ввода этого документа. В некоторых случаях поддерживается только 
//установка связи документов через выбор существующего, а не ввод нового.
Функция ДокументНеПоддерживаетСозданиеНовогоДляИСЦЭДМ(Документ, ИмяКоманды = Неопределено) Экспорт
	
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.ОприходованиеТоваров")
		ИЛИ ТипЗнч(Документ) = Тип("ДокументСсылка.СписаниеТоваров")
		ИЛИ ТипЗнч(Документ) = Тип("ДокументСсылка.ТребованиеНакладная")
		ИЛИ ТипЗнч(Документ) = Тип("ДокументСсылка.РеализацияТоваровУслуг") 
		ИЛИ ТипЗнч(Документ) = Тип("ДокументСсылка.ВозвратТоваровПоставщику")
		ИЛИ ТипЗнч(Документ) = Тип("ДокументСсылка.ПеремещениеТоваров") 
		
		Или ТипЗнч(Документ) = Тип("ДокументСсылка.ОтчетОПередачеКИОтНерезидентаРКИСЦЭДМ") Тогда
		//Для этих документов всегда можем ввести новый документ маркировки
		Возврат Ложь;
	КонецЕсли;
	
	ВидОперации = Документ.ВидОперации;
	Если (ТипЗнч(Документ) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") 
		//В решениях, где нет возможности проверять ВО, проверяем только тип документа, прочие проверки делаются в месте вызова функции
		И Не ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.Импорт"))
		Или ТипЗнч(Документ) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
		//Данные документы могут быть связаны со входящим АПП, но для него новый документ не создаем
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

//Получение универсальной структуры заполнения первичного документа при вводе на основании документа ИС ЦЭДМ
//
Функция ПолучитьПустуюСтруктуруДокументаОснованияДляИСЦЭДМ(Параметры = Неопределено) Экспорт
	
	Если Не Параметры = Неопределено Тогда
		ТипДокумента = Параметры.ТипСоздаваемогоДокумента;
	Иначе
		ТипДокумента = Параметры;
	КонецЕсли;
	
	СтруктураДокумента = Новый Структура;
	
	// Подготовка таблицы шапки документа
	СписокОбязательныхКолонок = "Организация," 
	+ "Контрагент,"
	+ "Партнер,"
	+ "Склад,"
	+ "ДокументОснование," 
	+ "ВидОперации,"
	+ "Дата,"
	+ "Автор,"
	;
	
	СтруктураДокумента.Вставить("Реквизиты", ИнтеграцияИСМПТКВызовСервера.ПолучитьТаблицуПараметров(СписокОбязательныхКолонок));
	
	СписокОбязательныхКолонок = 
	"Организация,"
	+ "Номенклатура,"
	+ "Цена,"
	+ "КодТНВЭД,"
	+ "Характеристика,"
	+ "Количество,"
	+ "Упаковка,"
	+ "КоличествоУпаковок,"
	+ "ЕдиницаИзмерения,"
	+ "Коэффициент,"
	+ "ДокументОснование"
	;
	
	СтруктураДокумента.Вставить("Товары", ИнтеграцияИСМПТКВызовСервера.ПолучитьТаблицуПараметров(СписокОбязательныхКолонок));
	
	Возврат СтруктураДокумента;
	
КонецФункции	

Функция ПолучитьПустуюСтруктуруДокументаОснованияДляИСЦЭДМ_Перемещение(Параметры = Неопределено) Экспорт
	
	Если Не Параметры = Неопределено Тогда
		ТипДокумента = Параметры.ТипСоздаваемогоДокумента;
	Иначе
		ТипДокумента = Параметры;
	КонецЕсли;
	
	СтруктураДокумента = Новый Структура;
	
	// Подготовка таблицы шапки документа
	СписокОбязательныхКолонок = "Организация," 
	+ "СкладОтправитель,"
	+ "СкладПолучатель,"
	+ "ДокументОснование," 
	//+ "ХозяйственнаяОперация,"
	+ "ВидОперации,"
	+ "Дата,"
	+ "Ответственный,"
	;
	
	СтруктураДокумента.Вставить("Реквизиты", ИнтеграцияИСМПТКВызовСервера.ПолучитьТаблицуПараметров(СписокОбязательныхКолонок));
	
	СписокОбязательныхКолонок = 
	"Организация,"
	+ "Номенклатура,"
	+ "Характеристика,"
	+ "Количество,"
	+ "Упаковка,"
	+ "КоличествоУпаковок,"
	+ "ЕдиницаИзмерения,"
	+ "Коэффициент,"
	+ "ДокументОснование"
	;
	
	СтруктураДокумента.Вставить("Товары", ИнтеграцияИСМПТКВызовСервера.ПолучитьТаблицуПараметров(СписокОбязательныхКолонок));
	
	Возврат СтруктураДокумента;
	
КонецФункции

//Заполняем созданный первичный документ полученными сведениями из документа ИС ЦЭДМ
//
Процедура ЗаполнитьМассивПервичныхДокументовИСЦЭДМ(ПараметрыСоздания, МассивДанныхДляЗаполнения, СписокПервичныхДокументов, Отказ, ВидДвижения = "", ТипСоздаваемогоДокумента = "") Экспорт
	
	ПроводитьСозданныеДокументы	= ПараметрыСоздания.ПроводитьСозданныеДокументы;
	ФормироватьСписокДокументов = ПараметрыСоздания.ФормироватьСписокДокументов;
	
	Если МассивДанныхДляЗаполнения.Количество() = 0 Тогда
		
		ТекстСообщения = НСтр("ru = 'В документе недостаточно данных для заполнения нового основания: проверьте таблицу ""Марки""!'");
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		Отказ = Истина;
	Иначе
		
		Для Каждого ЭлементМассива Из МассивДанныхДляЗаполнения Цикл
			
			ТипСоздаваемогоДокумента = ПараметрыСоздания.ТипСоздаваемогоДокумента;
			ЗаписьПрошлаУспешно = Истина;
			ЗаполнитьМассивПервичныхДокументов_Общая(ЭлементМассива, СписокПервичныхДокументов, Отказ, ФормироватьСписокДокументов, ПроводитьСозданныеДокументы, ТипСоздаваемогоДокумента, ЗаписьПрошлаУспешно);
			Если Не ЗаписьПрошлаУспешно Тогда
				Продолжить;
			КонецЕсли;		
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры	

//Функция позволяет получить информацию о СкладеЦЭДМ по переданной ссылке на типовой Склад. 
//
Функция ПолучитьДанныеСкладаЦЭДМПоСкладуУчета(Склад, Организация) Экспорт
	
	Если Не ЗначениеЗаполнено(Склад) 
		ИЛИ Не ЗначениеЗаполнено(Организация) Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СоответствиеСкладовИСЦЭДМ.СкладИСЦЭДМ КАК СкладИСЦЭДМ,
	|	СоответствиеСкладовИСЦЭДМ.СкладИСЦЭДМ.ИИНБИНСклада КАК ИИНБИНСклада,
	|	СоответствиеСкладовИСЦЭДМ.СкладИСЦЭДМ.Представление КАК СкладИСЦЭДМПредставление
	|ИЗ
	|	РегистрСведений.СоответствиеСкладовИСЦЭДМ КАК СоответствиеСкладовИСЦЭДМ
	|ГДЕ
	|	СоответствиеСкладовИСЦЭДМ.Склад = &Склад
	|	И СоответствиеСкладовИСЦЭДМ.Организация = &Организация";
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Склад", 		 Склад);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() <> 1 Тогда
		ДанныеСклада = Неопределено;
	Иначе
		Пока Выборка.Следующий() Цикл
			ДанныеСклада = Новый Структура();
			ДанныеСклада.Вставить("ИдентификаторСклада", Выборка.ИИНБИНСклада);
			ДанныеСклада.Вставить("СкладЦЭДМ", 			 Выборка.СкладИСЦЭДМ);
			ДанныеСклада.Вставить("Представление",		 Выборка.СкладИСЦЭДМПредставление);
		КонецЦикла;
	КонецЕсли;
	
	Возврат ДанныеСклада;
	
КонецФункции 

//Функция позволяет получить полную информацию о СкладеЦЭДМ, а также соответствующем ему типовом Складе,
//по переданной ссылке на СкладЦЭДМ.
Функция ПолучитьРеквизитыСкладаЦЭДМ(СкладЦЭДМ, Организация) Экспорт
	
	Если Не ЗначениеЗаполнено(СкладЦЭДМ) 
		ИЛИ Не ЗначениеЗаполнено(Организация) Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СкладыИСЦЭДМ.Ссылка КАК СкладИСЦЭДМ,
	|	СкладыИСЦЭДМ.ИИНБИНСклада КАК ИИНБИНСклада,
	|	СкладыИСЦЭДМ.Представление КАК СкладИСЦЭДМПредставление,
	|	ЕСТЬNULL(СоответствиеСкладовИСЦЭДМ.Склад, НЕОПРЕДЕЛЕНО) КАК Склад,
	|	&Организация КАК Организация,
	|	СкладыИСЦЭДМ.Идентификатор КАК СкладИСЦЭДМИдентификатор
	|ИЗ
	|	РегистрСведений.СоответствиеСкладовИСЦЭДМ КАК СоответствиеСкладовИСЦЭДМ
	|		ПРАВОЕ СОЕДИНЕНИЕ Справочник.СкладыИСЦЭДМ КАК СкладыИСЦЭДМ
	|		ПО СоответствиеСкладовИСЦЭДМ.СкладИСЦЭДМ = СкладыИСЦЭДМ.Ссылка
	|			И (СоответствиеСкладовИСЦЭДМ.Организация = &Организация)
	|ГДЕ
	|	СкладыИСЦЭДМ.Ссылка = &Склад";
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Склад", 		 СкладЦЭДМ);
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда 
		
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		ДанныеСклада = Новый Структура();
		ДанныеСклада.Вставить("СкладЦЭДМ", 		Выборка.СкладИСЦЭДМ);
		ДанныеСклада.Вставить("ИИНБИНСклада",	Выборка.ИИНБИНСклада);
		ДанныеСклада.Вставить("Представление",	Выборка.СкладИСЦЭДМПредставление);
		ДанныеСклада.Вставить("Идентификатор",	Выборка.СкладИСЦЭДМИдентификатор);
		ДанныеСклада.Вставить("Организация",	Выборка.Организация);
		
		Если Выборка.Количество() = 1 Тогда
			ДанныеСклада.Вставить("Склад",		Выборка.Склад);
		Иначе
			ДанныеСклада.Вставить("Склад", 		Неопределено);
		КонецЕсли;
		
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ДанныеСклада;
	
КонецФункции 

//Данная функция позволяет по переданному идентификатору СкладаЦЭДМ подобрать ссылку на СкладЦЭДМ, 
//а также ссылку на соответствующий ТИПОВОЙ Склад. 
Функция ПолучитьДанныеСкладаПоИдентификаторуЦЭДМ(ИИНБИНСкладаЦЭДМ, Организация) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕСТЬNULL(СоответствиеСкладовИСЦЭДМ.Склад, ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)) КАК Склад,
	|	СкладыИСЦЭДМ.Организация КАК Организация,
	|	СкладыИСЦЭДМ.Ссылка КАК СкладЦЭДМ
	|ИЗ
	|	Справочник.СкладыИСЦЭДМ КАК СкладыИСЦЭДМ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеСкладовИСЦЭДМ КАК СоответствиеСкладовИСЦЭДМ
	|		ПО (СоответствиеСкладовИСЦЭДМ.СкладИСЦЭДМ = СкладыИСЦЭДМ.Ссылка)
	|ГДЕ
	|	СкладыИСЦЭДМ.Организация = &Организация
	|	И СкладыИСЦЭДМ.ИИНБИНСклада = &ИИНБИНСкладаЦЭДМ";
	
	Запрос.УстановитьПараметр("Организация", 	  Организация);
	Запрос.УстановитьПараметр("ИИНБИНСкладаЦЭДМ", ИИНБИНСкладаЦЭДМ);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() <> 1 Тогда
		ДанныеСклада = Неопределено;
	Иначе
		Пока Выборка.Следующий() Цикл
			ДанныеСклада = Новый Структура();
			ДанныеСклада.Вставить("Склад",		 Выборка.Склад);
			ДанныеСклада.Вставить("Организация", Выборка.Организация);
			ДанныеСклада.Вставить("СкладЦЭДМ",   Выборка.СкладЦЭДМ);
		КонецЦикла;
	КонецЕсли;
	
	Возврат ДанныеСклада;
	
КонецФункции 

Функция ПолучитьОрганизациюДляПользователяПриСинхронизации() Экспорт
	
	// Возможность подобрать организацию в форму получения документов из настроек пользователя 
	// или взять организацию по-умолчанию, если в базе не ведется учет нескольких организаций.
	
	Возврат Справочники.Организации.ПустаяСсылка();
	
КонецФункции

Функция ПолучитьИнформациюОЦенахИзОснования(ДокументОснование, ШтрихкодыДокумента) Экспорт
	
	СоответствиеЦен = Новый Соответствие();
	
	Если ДокументОснование = Неопределено Тогда
		Возврат СоответствиеЦен; 
	КонецЕсли;
	
	Если ДокументОснование.Товары.Выгрузить().Колонки.Найти("Цена") = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'В выбранном основании отсутствуют данные по ценам товаров, заполнение невозможно.'");
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);	
		Возврат СоответствиеЦен; 
	КонецЕсли;
	
	ИмяДокумента = ДокументОснование.Метаданные().Имя;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДокОснование.Цена КАК Цена,
	|	ЕСТЬNULL(ШтрихкодыНоменклатуры.Штрихкод, """") КАК Штрихкод,
	|	ДокОснование.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ ВТ_Предварительная
	|ИЗ
	|	Документ." + ИмяДокумента + ".Товары КАК ДокОснование
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|		ПО ДокОснование.Номенклатура = ШтрихкодыНоменклатуры.Номенклатура
	//|			И ДокОснование.Характеристика = ШтрихкодыНоменклатуры.Характеристика
	|ГДЕ
	|	ДокОснование.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_Предварительная.Цена КАК Цена,
	|	ВТ_Предварительная.Штрихкод КАК Штрихкод,
	|	ВТ_Предварительная.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ ВТ_Общая
	|ИЗ
	|	ВТ_Предварительная КАК ВТ_Предварительная
	//|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	//|		ПО ВТ_Предварительная.Номенклатура.ВидНоменклатуры = ВидыНоменклатуры.Ссылка
	//|ГДЕ
	//|	ВидыНоменклатуры.ОсобенностьУчета = &ОсобенностьУчета
	//|	И ВТ_Предварительная.Штрихкод В(&Штрихкоды)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	|		ПО ВТ_Предварительная.Номенклатура = СпрНоменклатура.Ссылка
	|ГДЕ
	|	СпрНоменклатура.ОсобенностьУчета = &ОсобенностьУчета
	|	И ВТ_Предварительная.Штрихкод В(&Штрихкоды)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Общая.Штрихкод КАК Штрихкод,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТ_Общая.Цена) КАК КоличествоЦен
	|ПОМЕСТИТЬ ВТ_ЦеныРазличные
	|ИЗ
	|	ВТ_Общая КАК ВТ_Общая
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Общая.Штрихкод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Общая.Штрихкод КАК Штрихкод,
	|	ВТ_Общая.Цена КАК Цена,
	|	ВТ_ЦеныРазличные.КоличествоЦен КАК КоличествоЦен
	|ИЗ
	|	ВТ_Общая КАК ВТ_Общая
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ЦеныРазличные КАК ВТ_ЦеныРазличные
	|		ПО ВТ_Общая.Штрихкод = ВТ_ЦеныРазличные.Штрихкод";	
	
	Запрос.УстановитьПараметр("Ссылка",    ДокументОснование);
	Запрос.УстановитьПараметр("ОсобенностьУчета", ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.ЛекарственныеПрепараты"));
	Запрос.УстановитьПараметр("Штрихкоды", ШтрихкодыДокумента);
	Выборка = Запрос.Выполнить().Выбрать();
	
	НужноОповестить = Новый Массив();
	Если Выборка.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Не удалось получить информацию о ценах товаров в указанном документе-основании.'");
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
	Иначе	
		Пока Выборка.Следующий() Цикл
			
			Если ЗначениеЗаполнено(Выборка.Штрихкод) Тогда
				GTIN = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.GTINПоШтрихкодуEAN(Выборка.Штрихкод);
				Если Выборка.КоличествоЦен = 1 Тогда
					Если Не Выборка.Цена = 0 Тогда
						СоответствиеЦен.Вставить(GTIN, Выборка.Цена);
					Иначе
						ТекстСообщения = НСтр("ru = 'Для GTIN %1 в документе-основании указана нулевая цена!'");
						ТекстСообщения = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, GTIN); 
						ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
					КонецЕсли;
				Иначе
					Если НужноОповестить.Найти(GTIN) = Неопределено Тогда
						НужноОповестить.Добавить(GTIN);
					КонецЕсли;
					Продолжить;
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если Не НужноОповестить.Количество() = 0 Тогда
		Для Каждого GTIN Из НужноОповестить Цикл
			ТекстСообщения = НСтр("ru = 'Для GTIN %1 не удалось однозначно определить цену по документу-основанию. Данные в строке таблицы ""Итоги"" для этого штрихкода нужно заполнить самостоятельно.'");
			ТекстСообщения = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, GTIN); 
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		КонецЦикла;
	КонецЕсли;
	
	Возврат СоответствиеЦен;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьВалютуРегламентированногоУчета() Экспорт
	
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	Возврат Константы.ВалютаРегламентированногоУчета.Получить();
	///////////////////
	
КонецФункции

Функция ПолучитьСписокСтранЕАЭС() Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст =  "ВЫБРАТЬ
	|	СтраныМира.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.КлассификаторСтранМира КАК СтраныМира
	|ГДЕ
	|	СтраныМира.УчастникТаможенногоСоюза <> &ПустойУчастникТС";
	
	Запрос.УстановитьПараметр("ПустойУчастникТС", Справочники.СтраныУчастникиТаможенногоСоюза.ПустаяСсылка());
	
	МассивСтранЕАЭС = Новый Массив();
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		МассивСтранЕАЭС.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат МассивСтранЕАЭС;
	
КонецФункции

Функция ПолучитьКодСтраны(Страна) Экспорт
	
	Возврат Страна.Код;
	
КонецФункции

Функция ПолучитьКонтактноеЛицо(ТекущийПользователь) Экспорт
	
	Если ЗначениеЗаполнено(ТекущийПользователь) Тогда
		ФизЛицо = ТекущийПользователь.ФизическоеЛицо;
		//ПЕРЕОПРЕДЕЛЕНИЕ//
		Возврат ?(ЗначениеЗаполнено(ФизЛицо), ФизЛицо.Наименование, "");
		///////////////////
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

Функция ТаблицаЗначенийВМассив(ТаблицаЗначений) Экспорт
	
	Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(ТаблицаЗначений);
	
КонецФункции

Процедура УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов) Экспорт
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

функция ВыводитьПодробнуюИнформациюПриЗагрузкеДанныхИСМПТ() Экспорт
	
	Возврат Константы.ВыводитьПодробнуюИнформациюПриОбменеССерверомИСМПТК.Получить();
	
КонецФункции

функция ВыводитьПодробнуюИнформациюПриЗагрузкеДанныхИСЦЭДМ() Экспорт
	
	Возврат Константы.ВыводитьПодробнуюИнформациюПриОбменеССерверомИСЦЭДМ.Получить();
	
КонецФункции

Функция ПроверитьДоступностьРоли(ИменаРолей, Пользователь, УчитыватьПривилегированныйРежим = Истина) Экспорт 
	
	Возврат Пользователи.РолиДоступны(ИменаРолей, Пользователь);
	
КонецФункции

Функция ПолучитьТипОрганизации() Экспорт
	
	Возврат Тип("СправочникСсылка.Организации");
	
КонецФункции

Функция ПолучитьПустоеЗначениеСтруктурнойЕдиницы() Экспорт
	
	Возврат Справочники.Организации.ПустаяСсылка();
	
КонецФункции

Функция ДополнитьТекстЗапросаПереопределяемымиУсловиями(ТекстЗапроса) Экспорт

	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПолучитьИмяДокументаДляПроверкиПоТипу(СсылкаДокумент)
	
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	Если ТипЗнч(СсылкаДокумент) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		Возврат "РеализацияТоваровУслуг";
	ИначеЕсли ТипЗнч(СсылкаДокумент) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		Возврат "ПоступлениеТоваровУслуг";
	ИначеЕсли ТипЗнч(СсылкаДокумент) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
		Возврат "ВозвратТоваровОтПокупателя";
	ИначеЕсли ТипЗнч(СсылкаДокумент) = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
		Возврат "ВозвратТоваровПоставщику";
	ИначеЕсли ТипЗнч(СсылкаДокумент) = Тип("ДокументСсылка.ОприходованиеТоваров") Тогда
		Возврат "ОприходованиеТоваров";
	ИначеЕсли ТипЗнч(СсылкаДокумент) = Тип("ДокументСсылка.СписаниеТоваров") Тогда
		Возврат "СписаниеТоваров";
	ИначеЕсли ТипЗнч(СсылкаДокумент) = Тип("ДокументСсылка.ТребованиеНакладная") Тогда
		Возврат "ТребованиеНакладная";
	ИначеЕсли ТипЗнч(СсылкаДокумент) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
		Возврат "ПеремещениеТоваров"; 
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

Функция ПолучитьСсылкаСтранаКазахастан() Экспорт
	
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	Возврат Справочники.КлассификаторСтранМира.Казахстан;
	
КонецФункции
	
#Область СтандартныеПодсистемы

Процедура ПриЗаполненииОграниченияДоступа(Ограничение, ИмяДокумента) Экспорт
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Переопределяемые

#Область Интерфейс

Функция ПолучитьВидимостьСсылкиДокументОснованиеВЗаказе() Экспорт
	
	Возврат Ложь;
	
КонецФункции

Функция ПолучитьВидимостьПодбораНоменклатурыВЗаказе() Экспорт
	
	Возврат Истина;
	
КонецФункции

Функция ПолучитьВидимостьСсылкиНаВидыНоменклатуры() Экспорт
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#КонецОбласти
