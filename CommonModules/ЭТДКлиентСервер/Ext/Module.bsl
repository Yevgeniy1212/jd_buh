#Область ПрограммныйИнтерфейс

Функция АдресТестовогоСтенда() Экспорт
	
	Возврат "test-etd.1capp.kz";
	
КонецФункции

Функция АдресПродуктивногоСтенда() Экспорт
	
	Возврат "etd.1capp.kz";
	
КонецФункции

Функция ПроверкаСтатусаСервиса(Адрес, СтрокаЗапроса) Экспорт
	
	#Если ВебКлиент Тогда
		Возврат ЭТДВызовСервера.ПроверкаСтатусаСервиса(Адрес, СтрокаЗапроса);
	#Иначе
		ЗащищенноеСоединение = ОбщегоНазначенияКлиентСервер.НовоеЗащищенноеСоединение();
		
		Соединение = Новый HTTPСоединение(Адрес,443,,,,1,ЗащищенноеСоединение);
		
		Запрос = Новый HTTPЗапрос(СтрокаЗапроса);
		Запрос.Заголовки.Вставить("Content-type", "application/json");
		
		Попытка
			Ответ = Соединение.Получить(Запрос);
		Исключение
			Возврат Ложь;
		КонецПопытки;

		Если Ответ.КодСостояния = 200 Тогда
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	#КонецЕсли
	
КонецФункции

Процедура ЗаполнитьУсловияТруда(УсловияТруда, УсловиеЗначение) Экспорт
	
	УсловияТруда.Очистить();
	
	СтрокаУсловийТруда = УсловияТруда.Добавить();
	СтрокаУсловийТруда.УсловиеТруда = УсловиеЗначение;
	
КонецПроцедуры

Функция ЭТД_ЗаписатьЗначениеJSON(Значение) Экспорт
	
	Результат = Неопределено;
	#Если ВебКлиент Тогда
		Результат = ЭТДВызовСервера.ЭТД_ЗаписатьЗначениеJSON(Значение);
	#Иначе
		Запись = Новый ЗаписьJSON;
		Запись.УстановитьСтроку();
		ЗаписатьJSON(Запись, Значение);
		Результат = Запись.Закрыть();
	#КонецЕсли
	
	Возврат Результат;
	
КонецФункции

Функция ЭТД_ПрочитатьЗначениеJSON(Значение, СвойстваДаты = "") Экспорт
	
	Результат = Неопределено;
	#Если ВебКлиент Тогда
		Результат = ЭТДВызовСервера.ЭТД_ПрочитатьЗначениеJSON(Значение, СвойстваДаты);
	#Иначе
		Чтение = Новый ЧтениеJSON;
		Чтение.УстановитьСтроку(Значение);
		Результат = ПрочитатьJSON(Чтение, Ложь, СвойстваДаты);
		Чтение.Закрыть();
	#КонецЕсли
	
	Возврат Результат;
	
КонецФункции

#Область Криптобиблиотека

Функция ПолучитьТекущуюВерсиюМакета() Экспорт
	
	// Версия макета криптобиблиотеки
	Возврат "5.41";
	
КонецФункции

Функция КонтейнерМетодов() Экспорт
	
	Контейнер = Неопределено;
	
	#Если ТонкийКлиент ИЛИ ВебКлиент ИЛИ ТолстыйКлиентУправляемоеПриложение Тогда
		
		Контейнер = ПолучитьФорму("Обработка.ОбменЭТД.Форма.КлиентУправляемая");
		
	#ИначеЕсли ТолстыйКлиентОбычноеПриложение Тогда
		
		ВызватьИсключение(НСтр("ru = 'Криптокомпонента не предназначена для использования в обычном приложении'"));
		
	#ИначеЕсли Сервер ИЛИ ВнешнееСоединение Тогда
		
		Контейнер = Обработки.ОбменЭТД.Создать();
		
	#КонецЕсли
	
	Возврат Контейнер;
	
КонецФункции

Функция НовыйЭкземплярКриптопровайдера(УникальныйИдентификаторФормыКлиента = Неопределено, РежимТишины = Ложь, ТолькоПодключение = Ложь) Экспорт
	
	Возврат ЭТДКлиентСерверПовтИсп.НовыйЭкземплярКриптопровайдера(УникальныйИдентификаторФормыКлиента, РежимТишины, ТолькоПодключение);
	
КонецФункции

Функция СоздатьЭЦП_XML_Криптопровайдер(Знач ДанныеXML, ИдентификаторКлиента = "", ПараметрыКлюча = Неопределено) Экспорт
	
	СтрокаДляПодписи = ЭТД_ЗаписатьЗначениеJSON(ДанныеXML);
	
	Попытка
		
		Криптопровайдер = НовыйЭкземплярКриптопровайдера();
		
		Если Криптопровайдер = Неопределено Тогда
			ТекстСообщения = НСтр("ru = 'Не удалось подключить криптокомпоненту.'");
			Возврат ТекстСообщения;
		КонецЕсли;
		
		ИмяСервиса = "1CService";
		ПараметрыПодписи = ЭлектронноеВзаимодействиеССервисамиВызовСервера.ПолучитьПараметрыКомпонентыЭТД(ИдентификаторКлиента, ДанныеXML, ПараметрыКлюча);
		
		ОтветОтКриптопровайдера = Криптопровайдер.GetXMLSign(ИдентификаторКлиента, ИмяСервиса, ПараметрыПодписи, СтрокаДляПодписи, "", "");
		
	Исключение
		
		Если ЗначениеЗаполнено(ПараметрыКлюча) Тогда
			УдалитьВременныйФайлКлюча(ПараметрыКлюча);
		КонецЕсли;
		
		Ошибка = ОшибкаКриптопровайдера(Криптопровайдер, ИнформацияОбОшибке());
		
		ЭТДВызовСервера.СоздатьЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка выполнения'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), "Ошибка", , , Ошибка.ПодробноеПредставление);
		
		ТекстИсключения = НСтр("ru = 'Не удалось сформировать ЭЦП в формате XML.
									  |[ОписаниеОшибки]
									  |[КраткоеПредставление]'");
		Если ТипЗнч(Ошибка.ОписаниеОшибки) = Тип("Строка")
			И ЗначениеЗаполнено(Ошибка.ОписаниеОшибки) Тогда
			ТекстИсключения = СтрЗаменить(ТекстИсключения, "[ОписаниеОшибки]", Ошибка.ОписаниеОшибки);
		Иначе
			ТекстИсключения = СтрЗаменить(ТекстИсключения, "[ОписаниеОшибки]", "");
		КонецЕсли;
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "[КраткоеПредставление]", Ошибка.КраткоеПредставление);
		
		ВызватьИсключение ТекстИсключения;
		
	КонецПопытки;
	
	Если ЗначениеЗаполнено(ПараметрыКлюча) Тогда
		УдалитьВременныйФайлКлюча(ПараметрыКлюча);
	КонецЕсли;
	
	Если ОтветОтКриптопровайдера = "" ИЛИ ОтветОтКриптопровайдера = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Возникла проблема при использовании NCALayer. Возможно, программа не запущена, или не установлен модуль ""1С-Рейтинг ЭДО""'");
		Возврат ТекстСообщения;
	КонецЕсли;
	
	Попытка
		
		ПодписанныеДанныеСтруктура = ЭТД_ПрочитатьЗначениеJSON(ОтветОтКриптопровайдера);
		
		ПодписанныеДанные = Неопределено;
		ТекстСообщения = "";
		Если ПодписанныеДанныеСтруктура.Свойство("responseobject") И ПодписанныеДанныеСтруктура.Свойство("Code")
			И ПодписанныеДанныеСтруктура.code = "200" Тогда
			ПодписанныеДанные =  ПодписанныеДанныеСтруктура.responseObject;
		ИначеЕсли НЕ ПодписанныеДанныеСтруктура.Свойство("Code") Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Операция не выполнена. %1'"), СокрЛП(Криптопровайдер.ТекстОшибки));
		Иначе
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"%1. %2",СокрЛП(Криптопровайдер.ТекстОшибки), ОбработатьСообщениеОбОшибке(ПодписанныеДанныеСтруктура));
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекстСообщения) Тогда
			ПодписанныеДанные = ТекстСообщения;
		КонецЕсли;
		
		Возврат ПодписанныеДанные;
		
	Исключение
		
		Возврат НСтр("ru = 'Не удалось прочитать ответ:'") + Символы.ПС + СокрЛП(ОтветОтКриптопровайдера);
		
	КонецПопытки;

КонецФункции

Функция СоздатьЭЦП_XML_КриптопровайдерДляСписка(Знач МассивXML, ИдентификаторКлиента = "", ПараметрыКлюча = Неопределено) Экспорт
	
	СтрокаДляПодписи = ЭТД_ЗаписатьЗначениеJSON(МассивXML);
	
	Попытка
		
		Криптопровайдер = НовыйЭкземплярКриптопровайдера();
		
		Если Криптопровайдер = Неопределено Тогда
			ТекстСообщения = НСтр("ru = 'Не удалось подключить криптокомпоненту.'");
			Возврат ТекстСообщения;
		КонецЕсли;
		
		ИмяСервиса = "1CService";
		ПараметрыПодписи = ЭлектронноеВзаимодействиеССервисамиВызовСервера.ПолучитьПараметрыКомпонентыЭТД(ИдентификаторКлиента, МассивXML, ПараметрыКлюча);
		
		ОтветОтКриптопровайдера = Криптопровайдер.GetXMLsSign(ИдентификаторКлиента, ИмяСервиса, ПараметрыПодписи, СтрокаДляПодписи, "", "");
		
	Исключение
		
		Если ЗначениеЗаполнено(ПараметрыКлюча) Тогда
			УдалитьВременныйФайлКлюча(ПараметрыКлюча);
		КонецЕсли;
		
		Ошибка = ОшибкаКриптопровайдера(Криптопровайдер, ИнформацияОбОшибке());
		
		ЭТДВызовСервера.СоздатьЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка выполнения'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), "Ошибка", , , Ошибка.ПодробноеПредставление);
		
		ТекстИсключения = НСтр("ru = 'Не удалось сформировать ЭЦП в формате XML.
									  |[ОписаниеОшибки]
									  |[КраткоеПредставление]'");
		Если ТипЗнч(Ошибка.ОписаниеОшибки) = Тип("Строка")
			И ЗначениеЗаполнено(Ошибка.ОписаниеОшибки) Тогда
			ТекстИсключения = СтрЗаменить(ТекстИсключения, "[ОписаниеОшибки]", Ошибка.ОписаниеОшибки);
		Иначе
			ТекстИсключения = СтрЗаменить(ТекстИсключения, "[ОписаниеОшибки]", "");
		КонецЕсли;
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "[КраткоеПредставление]", Ошибка.КраткоеПредставление);
		
		ВызватьИсключение ТекстИсключения;
		
	КонецПопытки;
	
	Если ЗначениеЗаполнено(ПараметрыКлюча) Тогда
		УдалитьВременныйФайлКлюча(ПараметрыКлюча);
	КонецЕсли;
	
	Если ОтветОтКриптопровайдера = "" ИЛИ ОтветОтКриптопровайдера = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Возникла проблема при использовании NCALayer. Возможно, программа не запущена, или не установлен модуль ""1С-Рейтинг ЭДО""'");
		Возврат ТекстСообщения;
	КонецЕсли;
	
	Попытка
		
		ПодписанныеДанныеСтруктура = ЭТД_ПрочитатьЗначениеJSON(ОтветОтКриптопровайдера);
		
		ПодписанныеДанные = Неопределено;
		ТекстСообщения = "";
		Если ПодписанныеДанныеСтруктура.Свойство("responseobject") И ПодписанныеДанныеСтруктура.Свойство("Code")
			И ПодписанныеДанныеСтруктура.code = "200" Тогда
			ПодписанныеДанные =  ПодписанныеДанныеСтруктура.responseObject;
		ИначеЕсли НЕ ПодписанныеДанныеСтруктура.Свойство("Code") Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Операция не выполнена. %1'"), СокрЛП(Криптопровайдер.ТекстОшибки));
		Иначе
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"%1. %2",СокрЛП(Криптопровайдер.ТекстОшибки), ОбработатьСообщениеОбОшибке(ПодписанныеДанныеСтруктура));
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекстСообщения) Тогда
			ПодписанныеДанные = ТекстСообщения;
		КонецЕсли;
		
		Возврат ПодписанныеДанные;
		
	Исключение
		
		Возврат НСтр("ru = 'Не удалось прочитать ответ:'") + Символы.ПС + СокрЛП(ОтветОтКриптопровайдера);
		
	КонецПопытки;
	
КонецФункции

Функция ОшибкаКриптопровайдера(Криптопровайдер, ИнформацияОбОшибке) Экспорт
	
	Ошибка = Новый Структура;
	
	Если Криптопровайдер = Неопределено Тогда
		Ошибка.Вставить("Версия", "");
		Ошибка.Вставить("КодОшибки", "");
		Ошибка.Вставить("ОписаниеОшибки", "");		
	Иначе
		Ошибка.Вставить("Версия", Криптопровайдер.Версия);
		Ошибка.Вставить("КодОшибки", Криптопровайдер.КодОшибки);
		Ошибка.Вставить("ОписаниеОшибки", Криптопровайдер.ТекстОшибки);
	КонецЕсли;
	
	Ошибка.Вставить("ИнформацияОбОшибке", ИнформацияОбОшибке);
	
	ТипОшибки = ТипОшибкиКриптопровайдера(Ошибка);
	Ошибка.Вставить("ТипОшибки", ТипОшибки);
	
	ПредставленияОшибки = ПредставленияОшибкиКриптопровайдера(Ошибка);
	Ошибка.Вставить("КраткоеПредставление", ПредставленияОшибки.КраткоеПредставление);
	Ошибка.Вставить("ПодробноеПредставление", ПредставленияОшибки.ПодробноеПредставление);
	
	Возврат Ошибка;
	
КонецФункции

Функция ПодготовитьПараметрыКлючаДляПодписи(ДанныеКлючаЭЦП) Экспорт
	
	ПараметрыКлюча = Неопределено;
	Если ЭТДВызовСервера.ВыполнятьКриптографическиеОперацииНаКлиенте() Тогда
		ПараметрыКлюча = Новый Структура;
		ПараметрыКлюча.Вставить("АдресКлюча" , ДанныеКлючаЭЦП.АдресКлюча);
		ПараметрыКлюча.Вставить("ПарольКлюча", ДанныеКлючаЭЦП.Пароль);
	Иначе
		ПараметрыКлюча = ЭТДВызовСервера.СохранитьКлючВФайл(ДанныеКлючаЭЦП);
	КонецЕсли;
	
	Возврат ПараметрыКлюча;
	
КонецФункции

Функция СохранитьКлючВФайл(ДанныеКлючаЭЦП) Экспорт
	
	ПараметрыКлюча = Неопределено;
	
	#Если Не ВебКлиент Тогда
		ДвоичныеДанныеКлюча = Base64Значение(ДанныеКлючаЭЦП.КлючBase64);
		ИмяФайлаКлюча = ПолучитьИмяВременногоФайла("p12");
		ДвоичныеДанныеКлюча.Записать(ИмяФайлаКлюча);
		ПараметрыКлюча = Новый Структура;
		ПараметрыКлюча.Вставить("АдресКлюча" , ИмяФайлаКлюча);
		ПараметрыКлюча.Вставить("ПарольКлюча", ДанныеКлючаЭЦП.Пароль);
	#КонецЕсли
	
	Возврат ПараметрыКлюча;
	
КонецФункции
 
Процедура УдалитьВременныйФайлКлюча(ДанныеКлючаЭЦП) Экспорт
	// временный файл только на сервере
	Если НЕ ЭТДВызовСервера.ВыполнятьКриптографическиеОперацииНаКлиенте() Тогда
		ЭТДВызовСервера.УдалитьФайлКлюча(ДанныеКлючаЭЦП);
	КонецЕсли;
	
КонецПроцедуры

Процедура УдалитьФайлКлюча(ДанныеКлючаЭЦП) Экспорт
	
	Если ЗначениеЗаполнено(ДанныеКлючаЭЦП) И ДанныеКлючаЭЦП.Свойство("АдресКлюча") Тогда
		УдалитьВременныеФайлы(ДанныеКлючаЭЦП.АдресКлюча);
	КонецЕсли;
	
КонецПроцедуры 

Процедура УдалитьВременныеФайлы(ПутьКФайлам) Экспорт
	
	Попытка
		УдалитьФайлы(ПутьКФайлам);
	Исключение
		ЗаписьЖурналаРегистрацииОшибкаУдаленияФайла(ПутьКФайлам, ИнформацияОбОшибке());
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Криптобиблиотека

Функция ТипОшибкиКриптопровайдера(Ошибка)
	
	ТипОшибки = Ошибка_НеизвестнаяОшибка();
	
	Если Найти(Ошибка.ОписаниеОшибки, "0D0680A8") Тогда
		ТипОшибки = Ошибка_НеверныйФайл();		
	ИначеЕсли Найти(Ошибка.ОписаниеОшибки, "23076071") Тогда
		ТипОшибки = Ошибка_НеверныйПароль();	
	Иначе
		ТипОшибки = Ошибка_НеизвестнаяОшибка();	
	КонецЕсли;
	
	Возврат ТипОшибки;
	
КонецФункции

Функция ПредставленияОшибкиКриптопровайдера(Ошибка)
	
	ПредставленияОшибки = Новый Структура;
	
	КраткоеПредставление = КраткоеПредставлениеОшибкиКриптопровайдера(Ошибка);
	ПредставленияОшибки.Вставить("КраткоеПредставление", КраткоеПредставление);
	
	ПодробноеПредставление = ПодробноеПредставлениеОшибкиКриптопровайдера(Ошибка);
	ПредставленияОшибки.Вставить("ПодробноеПредставление", ПодробноеПредставление);
	
	Возврат ПредставленияОшибки;
	
КонецФункции

Функция КраткоеПредставлениеОшибкиКриптопровайдера(Ошибка)
	
	КраткоеПредставление = "";
	
	Если Ошибка.ТипОшибки = Ошибка_НеверныйФайл() Тогда
		КраткоеПредставление = НСтр("ru = 'Возможно выбранный файл не является файлом сертификата ""*.p12"".'");		
	ИначеЕсли Ошибка.ТипОшибки = Ошибка_НеверныйПароль() Тогда
		КраткоеПредставление = НСтр("ru = 'Возможно был введен некорректный пароль для файла сертификата.'");				
	Иначе	
		КраткоеПредставление = КраткоеПредставлениеОшибки(Ошибка.ИнформацияОбОшибке);					
	КонецЕсли;
	
	Возврат КраткоеПредставление;
	
КонецФункции

Функция ПодробноеПредставлениеОшибкиКриптопровайдера(Ошибка)
	
	ПодробноеПредставление = НСтр(
	"ru = '[КраткоеПредставление]
	|[ИнформацияИзКриптопровайдера]
	|[ПодробноеПредставлениеОшибки]'");
	
	КраткоеПредставление = КраткоеПредставлениеОшибкиКриптопровайдера(Ошибка);	
	ПодробноеПредставление = СтрЗаменить(ПодробноеПредставление, "[КраткоеПредставление]", КраткоеПредставление);
	
	Если ПустаяСтрока(Ошибка.Версия) И ПустаяСтрока(Ошибка.КодОшибки) И ПустаяСтрока(Ошибка.ОписаниеОшибки) Тогда
		ИнформацияИзКриптопровайдера = "";
	Иначе
		ИнформацияИзКриптопровайдера = НСтр("ru = 'Версия криптографии: %1, Код ошибки: %2, Описание ошибки: %3'");
		ИнформацияИзКриптопровайдера = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ИнформацияИзКриптопровайдера, Ошибка.Версия, Ошибка.КодОшибки, Ошибка.ОписаниеОшибки);
	КонецЕсли;	
	ПодробноеПредставление = СтрЗаменить(ПодробноеПредставление, "[ИнформацияИзКриптопровайдера]", ИнформацияИзКриптопровайдера);
	
	ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(Ошибка.ИнформацияОбОшибке);
	ПодробноеПредставление = СтрЗаменить(ПодробноеПредставление, "[ПодробноеПредставлениеОшибки]", ПодробноеПредставлениеОшибки);
	
	Возврат ПодробноеПредставление;
	
КонецФункции

Функция Ошибка_НеверныйПароль()
	Возврат "НеверныйПароль";	
КонецФункции

Функция Ошибка_НеверныйФайл()
	Возврат "НеверныйФайл";	
КонецФункции

Функция Ошибка_НеизвестнаяОшибка()
	Возврат "НеизвестнаяОшибка";	
КонецФункции

Процедура ЗаписьЖурналаРегистрацииОшибкаУдаленияФайла(ИмяФайла, ИнформацияОбОшибке)
	
	Комментарий = НСтр(
		"ru = 'Не удалось удалить файл %ИмяФайла% по причине:
		|
		|%ПодробноеПредставлениеОшибки%'");
		
	Комментарий = СтрЗаменить(Комментарий, "%ИмяФайла%", ИмяФайла);
	Комментарий = СтрЗаменить(Комментарий, "%ПодробноеПредставлениеОшибки%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
	
	ЭТДВызовСервера.СоздатьЗаписьЖурналаРегистрации("ЭТДКлиентСервер.УдалитьВременныеФайлы", "Ошибка", , , Комментарий);
	
КонецПроцедуры

//Функция предназначена для обработки сообщений об ошибке, полученных со стороны компоненты
Функция ОбработатьСообщениеОбОшибке(ОтветСокетаJson)
	СообщениеОбОшибке = "";
	Если НЕ ОтветСокетаJson = Неопределено Тогда
		Если ОтветСокетаJson.Свойство("Code") Тогда
			Если ОтветСокетаJson.code = "500" Тогда
				Если ОтветСокетаJson.Свойство("message") Тогда
					Если ОтветСокетаJson.message = "action.canceled" Тогда
						СообщениеОбОшибке = НСтр("ru = 'Отмена выбора ключа подписи.'");
					Иначе
						СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Тех. информация: %1'"), ОтветСокетаJson.message);
					КонецЕсли;
				Иначе
					СообщениеОбОшибке = НСтр("ru = 'Неквалифицированная ошибка вызова внешней компоненты.'");
				КонецЕсли;
			ИначеЕсли ОтветСокетаJson.code = "101" Тогда
				СообщениеОбОшибке = НСтр("ru = 'Ошибка перекодировки данных.'");
			ИначеЕсли ОтветСокетаJson.code = "201" Тогда
				СообщениеОбОшибке = НСтр("ru = 'Ошибка входных параметров.'");
			ИначеЕсли ОтветСокетаJson.code = "300" Тогда
				СообщениеОбОшибке = НСтр("ru = 'Ошибка при работе с сокетом.'");
			ИначеЕсли ОтветСокетаJson.Свойство("message") Тогда
				СообщениеОбОшибке = ОтветСокетаJson.message;
			КонецЕсли;
		Иначе
			СообщениеОбОшибке = НСтр("ru = 'Ошибка вызова внешней компоненты.'");
		КонецЕсли;
	КонецЕсли;
	
	//обработка пустого сообщения
	Если СообщениеОбОшибке = "" Тогда
		СообщениеОбОшибке = НСтр("ru = 'Ошибка при работе внешней компоненты.'");
	КонецЕсли;
	Возврат СообщениеОбОшибке;
КонецФункции

//Получает дополнительную информацию компоненты криптографии
//
Функция ПолучитьДополнительныеСведенияКриптопровайдера() Экспорт
	
	Попытка
		
		Криптопровайдер = НовыйЭкземплярКриптопровайдера();
		ОтветСокета = КриптоПровайдер.ДополнительныеСведения();
		
		Если ПустаяСтрока(ОтветСокета) Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'При получении данных о сертификате возникла ошибка: %1'"),Криптопровайдер.ТекстОшибки);
		КонецЕсли;
		
		ОтветСтруктура = ЭТДВызовСервера.ЭТД_ПрочитатьЗначениеJSON(ОтветСокета);
		
		Возврат ОтветСтруктура;
		
	Исключение
		
		Ошибка = ОшибкаКриптопровайдера(Криптопровайдер, ИнформацияОбОшибке());
		
		ЭТДВызовСервера.СоздатьЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка выполнения'"), "Ошибка", , , Ошибка.ПодробноеПредставление);
		
		ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
		"ru = 'Не удалось получить данные по сертификату.
		|%1'"),Ошибка.КраткоеПредставление);
		
		ВызватьИсключение ТекстИсключения;
		
	КонецПопытки;	
	
КонецФункции

#КонецОбласти

#КонецОбласти
