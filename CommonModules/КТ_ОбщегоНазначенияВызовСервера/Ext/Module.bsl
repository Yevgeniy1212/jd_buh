////////////////////////////////////////////////////////////////////////////////
// ОбщегоНазначенияБКВызовСервера:
//  
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ УПРАВЛЕНИЯ ГРУППАМИ СПРАВОЧНИКОВ

// Функция возвращает массив вышестоящих групп указанного элемента.
//
// Параметры:
//  МассивЭлементовСправочника      - Массив элементов справочника, для которого ищются родители
//                                    Все элементы массива должны быть одного вида!
//
// Возвращаемое значение
//  Соответствие массивов вышестоящих групп
//
Функция ПолучитьСписокВышеСтоящихГруппЭлементов(МассивЭлементовСправочника) Экспорт

	Результат = Новый Соответствие;
	
	Если МассивЭлементовСправочника.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	Для Каждого ЭлементСправочника Из МассивЭлементовСправочника Цикл
		Результат.Вставить(ЭлементСправочника, Новый Массив);
	КонецЦикла;
	
	МетаданныеСправочника = МассивЭлементовСправочника[0].Метаданные();
	Если НЕ МетаданныеСправочника.Иерархический Тогда
		Возврат Результат;
	КонецЕсли;
	
	ИмяСправочника = МетаданныеСправочника.Имя;
	
	Запрос = Новый Запрос;
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Справочник1.Ссылка КАК Элемент,
	|	Справочник1.Родитель КАК Родитель1,
	|	Справочник2.Родитель КАК Родитель2,
	|	Справочник3.Родитель КАК Родитель3,
	|	Справочник4.Родитель КАК Родитель4,
	|	Справочник5.Родитель КАК Родитель5
	|ИЗ
	|	Справочник.Номенклатура КАК Справочник1
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Справочник2
	|		ПО (Справочник2.Ссылка = Справочник1.Родитель)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Справочник3
	|		ПО (Справочник3.Ссылка = Справочник2.Родитель)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Справочник4
	|		ПО (Справочник4.Ссылка = Справочник3.Родитель)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Справочник5
	|		ПО (Справочник5.Ссылка = Справочник4.Родитель)
	|ГДЕ
	|	Справочник1.Ссылка В(&МассивСсылок)";
	
	Запрос.Текст = СтрЗаменить(ТекстЗапроса, "Номенклатура", ИмяСправочника);
	
	//	Таблица соответствия групп и элементов (начальной точки иерархии):
	//		Родитель - группа справочника
	//		Элемент - элемент справочника, для которого строится иерархия
	СоответствиеГруппИЭлементов = Новый ТаблицаЗначений;
	СоответствиеГруппИЭлементов.Колонки.Добавить("Родитель",	Новый ОписаниеТипов("СправочникСсылка." + ИмяСправочника));
	СоответствиеГруппИЭлементов.Колонки.Добавить("Элемент",		Новый ОписаниеТипов("СправочникСсылка." + ИмяСправочника));
	СоответствиеГруппИЭлементов.Индексы.Добавить("Родитель");
	Для Каждого ЭлементСправочника Из МассивЭлементовСправочника Цикл
		НовоеСоответствие = СоответствиеГруппИЭлементов.Добавить();
		НовоеСоответствие.Родитель	= ЭлементСправочника;
		НовоеСоответствие.Элемент	= ЭлементСправочника;
	КонецЦикла;
	
	Отбор	= Новый Структура("Родитель");
	
	ТекущийМассивСсылок = МассивЭлементовСправочника;
	
	Пока ТекущийМассивСсылок.Количество() > 0 Цикл
		
		Запрос.УстановитьПараметр("МассивСсылок", УдалитьПовторяющиесяЭлементыМассива(ТекущийМассивСсылок));
		Выборка = Запрос.Выполнить().Выбрать();
		
		ТекущийМассивСсылок	= Новый Массив;
		
		Пока Выборка.Следующий() Цикл
			
			Отбор.Родитель = Выборка.Элемент;
			
			НайденныеСтроки = СоответствиеГруппИЭлементов.НайтиСтроки(Отбор);
			Для Каждого СоответствиеГруппыИЭлемента Из НайденныеСтроки Цикл
				
				ЭлементСправочника	= СоответствиеГруппыИЭлемента.Элемент;
				
				МассивВышеСтоящихГруп	= Результат.Получить(ЭлементСправочника);
				
				Для Индекс = 1 по 5 Цикл
					
					Родитель = Выборка["Родитель" + Индекс];
					Если ЗначениеЗаполнено(Родитель) Тогда
						
						МассивВышеСтоящихГруп.Добавить(Родитель);
						Если Индекс = 5 Тогда
							ТекущийМассивСсылок.Добавить(Родитель);
							НовоеСоответствие = СоответствиеГруппИЭлементов.Добавить();
							НовоеСоответствие.Родитель	= Родитель;
							НовоеСоответствие.Элемент	= ЭлементСправочника;
						КонецЕсли;
						
					Иначе
						Прервать;
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

// Функция возвращает массив вышестоящих групп указанного элемента.
// 
// Переметры:
//  Элемент      - Элемент справочника, для которого ищется родитель
//
// Возвращаемое значение
//  Массив вышестояших групп
//
Функция ПолучитьСписокВышеСтоящихГрупп(ЭлементСправочника) Экспорт
	
	Результат = Новый Массив;		
	
	МетаданныеЭлемента = ЭлементСправочника.Метаданные();
	
	ИмяОбъектаМетаданных = МетаданныеЭлемента.Имя;
	
	ТипОбъектаМетаданных = "";
	Если Метаданные.Справочники.Содержит(МетаданныеЭлемента) Тогда
		ТипОбъектаМетаданных = "Справочник";
	ИначеЕсли Метаданные.ПланыСчетов.Содержит(МетаданныеЭлемента) Тогда
		ТипОбъектаМетаданных = "ПланСчетов";
	ИначеЕсли Метаданные.ПланыВидовХарактеристик.Содержит(МетаданныеЭлемента) Тогда
		ТипОбъектаМетаданных = "ПланВидовХарактеристик";
	КонецЕсли;
		
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Справочник1.Родитель КАК Родитель1,
	|	Справочник2.Родитель КАК Родитель2,
	|	Справочник3.Родитель КАК Родитель3,
	|	Справочник4.Родитель КАК Родитель4,
	|	Справочник5.Родитель КАК Родитель5
	|ИЗ
	|	" + ТипОбъектаМетаданных + "." + ИмяОбъектаМетаданных + " КАК Справочник1
	|		ЛЕВОЕ СОЕДИНЕНИЕ " + ТипОбъектаМетаданных + "." + ИмяОбъектаМетаданных + " КАК Справочник2
	|		ПО (Справочник2.Ссылка = Справочник1.Родитель)
	|		ЛЕВОЕ СОЕДИНЕНИЕ " + ТипОбъектаМетаданных + "." + ИмяОбъектаМетаданных + " КАК Справочник3
	|		ПО (Справочник3.Ссылка = Справочник2.Родитель)
	|		ЛЕВОЕ СОЕДИНЕНИЕ " + ТипОбъектаМетаданных + "." + ИмяОбъектаМетаданных + " КАК Справочник4
	|		ПО (Справочник4.Ссылка = Справочник3.Родитель)
	|		ЛЕВОЕ СОЕДИНЕНИЕ " + ТипОбъектаМетаданных + "." + ИмяОбъектаМетаданных + " КАК Справочник5
	|		ПО (Справочник5.Ссылка = Справочник4.Родитель)
	|ГДЕ
	|	Справочник1.Ссылка = &Ссылка";
	
	ТекущийЭлемент = ЭлементСправочника;
	
	Пока ЗначениеЗаполнено(ТекущийЭлемент) Цикл		
		Запрос.УстановитьПараметр("Ссылка", ТекущийЭлемент);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Для Индекс = 1 по 5 Цикл
				ТекущийЭлемент = Выборка["Родитель" + Индекс];
				Если ЗначениеЗаполнено(ТекущийЭлемент) Тогда
					Результат.Добавить(ТекущийЭлемент);
				Иначе
					Прервать;
				КонецЕсли;				
			КонецЦикла;
		Иначе
			ТекущийЭлемент = Неопределено;
		КонецЕсли;
	КонецЦикла;	
	
	Возврат Результат;
	
КонецФункции // ПолучитьСписокВышеСтоящихГрупп()

//Удаляет повторяющиеся элементы массива.
Функция УдалитьПовторяющиесяЭлементыМассива(Массив, НеИспользоватьНеопределено = Ложь) Экспорт

	ОписаниеТиповСправочники  = Справочники.ТипВсеСсылки();
	ОписаниеТиповДокументы    = Документы.ТипВсеСсылки();
	ОписаниеТиповПВХ          = ПланыВидовХарактеристик.ТипВсеСсылки();
	ОписаниеТиповПланыСчетов  = ПланыСчетов.ТипВсеСсылки();
	ОписаниеТиповПланыРасчета = ПланыВидовРасчета.ТипВсеСсылки();

	Если ТипЗнч(Массив) = Тип("Массив") Тогда

		УжеВМассиве = Новый Соответствие;
		БылоНеопределено = Ложь;

		КолвоЭлементовВМассиве = Массив.Количество();

		Для ОбратныйИндекс = 1 По КолвоЭлементовВМассиве Цикл
			ЭлементМассива = Массив[КолвоЭлементовВМассиве - ОбратныйИндекс];
			ТипЭлемента = ТипЗнч(ЭлементМассива);
			Если ЭлементМассива = Неопределено Тогда
				Если БылоНеопределено или НеИспользоватьНеопределено Тогда
					Массив.Удалить(КолвоЭлементовВМассиве - ОбратныйИндекс);
				Иначе
					БылоНеопределено = Истина;
				КонецЕсли;
				Продолжить;
			ИначеЕсли ОписаниеТиповСправочники.СодержитТип(ТипЭлемента)
				ИЛИ ОписаниеТиповДокументы.СодержитТип(ТипЭлемента)
				ИЛИ ОписаниеТиповПВХ.СодержитТип(ТипЭлемента)
				ИЛИ ОписаниеТиповПланыСчетов.СодержитТип(ТипЭлемента)
				ИЛИ ОписаниеТиповПланыРасчета.СодержитТип(ТипЭлемента) Тогда

				ИДЭлемента = Строка(ЭлементМассива.УникальныйИдентификатор());

			Иначе

				ИДЭлемента = ЭлементМассива;

			КонецЕсли;

			Если УжеВМассиве[ИДЭлемента] = Истина Тогда
				Массив.Удалить(КолвоЭлементовВМассиве - ОбратныйИндекс);
			Иначе
				УжеВМассиве[ИДЭлемента] = Истина;
			КонецЕсли;
		КонецЦикла;

	КонецЕсли;

	Возврат Массив;

КонецФункции

// Выполняет установку отбора по указанной организации в динамических списках.
// Вызывать необходимо из обработчика формы ПриСозданииНаСервере.
// Если в форму при открытии был передан отбор по организации, то функция не будет выполнена.
//
// Параметры
//  Форма          - УправляемаяФорма  - форма, в которой необходимо установить отбор
//  ИмяСписка      - Строка - имя реквизита формы типа ДинамическийСписок.
//  ИмяРеквизита   - Строка - имя поля-организации в динамическом списке.
//  ЗначениеОтбора - СправочникСсылка.Организации, СписокЗначений, Массив - значение отбора.
//                   Если значение не задано, то будет подставлена основная организация из
//                   настроек пользователя.
//
// Возвращаемое значение:
//   СправочникСсылка.Организации - Если отбор установлен, то вернет значение отбора.
//
Функция УстановитьОтборПоОсновнойОрганизации(Форма, ИмяСписка = "Список", ИмяРеквизита = "Организация", ЗначениеОтбора = Неопределено) Экспорт

	УчетПоВсемОрганизациям = ПользователиБКВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию(ПользователиКлиентСервер.АвторизованныйПользователь(), "УчетПоВсемОрганизациям");
	Если Форма.Параметры.Свойство("Отбор") И Форма.Параметры.Отбор.Свойство(ИмяРеквизита) Тогда
		// Если значение отбора передается в параметрах формы - берем его оттуда, параметр при этом удаляем
		ОсновнаяОрганизация = Форма.Параметры.Отбор[ИмяРеквизита];
		Форма.Параметры.Отбор.Удалить(ИмяРеквизита);
	ИначеЕсли ТипЗнч(ЗначениеОтбора) = Тип("СправочникСсылка.Организации") 
		ИЛИ ТипЗнч(ЗначениеОтбора) = Тип("СписокЗначений") 
		ИЛИ ТипЗнч(ЗначениеОтбора) = Тип("Массив") Тогда
		ОсновнаяОрганизация = ЗначениеОтбора;
	Иначе
		ОсновнаяОрганизация = Справочники.Организации.ОрганизацияПоУмолчанию(ЗначениеОтбора);
	КонецЕсли;
	
	Если ТипЗнч(ОсновнаяОрганизация) = Тип("СправочникСсылка.Организации") Тогда
		ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.Равно;
	Иначе
		ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.ВСписке;
	КонецЕсли;
	
	ИспользованиеОтбора = ЗначениеЗаполнено(ОсновнаяОрганизация);
	
	Представление = "";
	Если УчетПоВсемОрганизациям Тогда
		РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ;
	Иначе 
		Представление = НСтр("ru = 'Отбор по основной организации (%1)'");
		Представление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Представление, Строка(ОсновнаяОрганизация));
		РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		Форма[ИмяСписка].КомпоновщикНастроек.Настройки.Отбор, ИмяРеквизита, ОсновнаяОрганизация, ВидСравненияОтбора, , ИспользованиеОтбора, РежимОтображения);
	
	Возврат ОсновнаяОрганизация;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ДОКУМЕНТАМИ

// Стандартная для данной конфигурации функция форматирования прописи количества
//
// Параметры: 
//  Количество - число, которое мы хотим форматировать
//
// Возвращаемое значение:
//  Отформатированная должным образом строковое представление количества.
//
Функция КоличествоПрописью(Количество) Экспорт

	ЦелаяЧасть   = Цел(Количество);
	ДробнаяЧасть = Окр(Количество - ЦелаяЧасть, 3);

	Если ДробнаяЧасть = Окр(ДробнаяЧасть,0) Тогда
		ПараметрыПрописи = ", , , , , , , , 0";
	ИначеЕсли ДробнаяЧасть = Окр(ДробнаяЧасть, 1) Тогда
		ПараметрыПрописи = "целая, целых, целых, ж, десятая, десятых, десятых, м, 1";
	ИначеЕсли ДробнаяЧасть = Окр(ДробнаяЧасть, 2) Тогда
		ПараметрыПрописи = "целая, целых, целых, ж, сотая, сотых, сотых, м, 2";
	Иначе
		ПараметрыПрописи = "целая, целых, целых, ж, тысячная, тысячных, тысячных, м, 3";
	КонецЕсли;

	Возврат ЧислоПрописью(Количество, ,ПараметрыПрописи);

КонецФункции // КоличествоПрописью()

// Стандартная для данной конфигурации функция форматирования сумм
//
// Параметры: 
//  Сумма  - число, которое мы хотим форматировать, 
//  Валюта - ссылка на элемент справочника валют, если задан, то к в результирующую строку
//           будет добавлено представление валюты
//  ЧН     - строка, представляющая нулевое значение числа,
//  ЧРГ    - символ-разделитель групп целой части числа.
//
// Возвращаемое значение:
//  Отформатированная должным образом строковое представление суммы.
//
Функция ФорматСумм(Сумма, Валюта = Неопределено, ЧН = "", ЧРГ = "", ЧРД = "", ВалютаПрописью = Ложь) Экспорт

	ФорматнаяСтрока = "ЧЦ=15;ЧДЦ=2" +
					?(НЕ ЗначениеЗаполнено(ЧН), "", ";" + "ЧН=" + ЧН) +
					?(НЕ ЗначениеЗаполнено(ЧРГ),"", ";" + "ЧРГ=" + ЧРГ)+
					?(НЕ ЗначениеЗаполнено(ЧРД),"", ";" + "ЧРД=" + ЧРД);
					
	РезультирующаяСтрока = СокрЛ(Формат(Сумма, ФорматнаяСтрока));
	
	Если ЗначениеЗаполнено(Валюта) Тогда
		Если ВалютаПрописью и НЕ СокрЛП(Валюта.ПараметрыПрописиНаРусском) = "" Тогда 
			СтрокаПараметров = СтрЗаменить(Валюта.ПараметрыПрописиНаРусском, ",", Символы.ПС);
			НовыеПараметрыПрописи = СокрЛП(СтрПолучитьСтроку(СтрокаПараметров, 1))+","+
									СокрЛП(СтрПолучитьСтроку(СтрокаПараметров, 2))+","+
									СокрЛП(СтрПолучитьСтроку(СтрокаПараметров, 3))+","+
									СокрЛП(СтрПолучитьСтроку(СтрокаПараметров, 4))+","+
									СокрЛП(СтрПолучитьСтроку(СтрокаПараметров, 5))+","+
									СокрЛП(СтрПолучитьСтроку(СтрокаПараметров, 6))+","+
									СокрЛП(СтрПолучитьСтроку(СтрокаПараметров, 7))+","+
									СокрЛП(СтрПолучитьСтроку(СтрокаПараметров, 8))+","+ 0;
	
	
			ЗначимаяЧасть = ЧислоПрописью(Цел(Сумма),"ru_RU; НП = Ложь; ДП = Ложь", НовыеПараметрыПрописи);
			ЧисловаяЧасть = ЧислоПрописью(Цел(Сумма),"ru_RU; НП = Ложь; ДП = Ложь", ",,,,,,,,0");
			РезультирующаяСтрока = СтрЗаменить(ЗначимаяЧасть, ЧисловаяЧасть, РезультирующаяСтрока + " ");
		Иначе			
			РезультирующаяСтрока = РезультирующаяСтрока + " " + СокрП(Валюта);
		КонецЕсли;	
	КонецЕсли;

	Возврат РезультирующаяСтрока;

КонецФункции // ФорматСумм()

// Функция формирует представление суммы прописью в указанной валюте
//
// Возвращаемое значение:
//  Строка - сумма прописью
//
Функция СформироватьСуммуПрописью(Сумма, Валюта) Экспорт

	Если Валюта.ПараметрыПрописиНаРусском = "" Тогда
		Возврат ФорматСумм(Сумма);
	Иначе
		Возврат ЧислоПрописью(Сумма, "L=ru_RU", Валюта.ПараметрыПрописиНаРусском);
	КонецЕсли;

КонецФункции // СформироватьСуммуПрописью()

// Определяет в форме документа первую страницу с максимальным
// количеством строк в табличной части.
// Проверяется также видимость элемента.
// Если количество строк в табличных частях одинаково,
// то функция вернет имя первой табличной части из СписокТабличныхПолей. 
//
// Параметры:
//   Форма                - форма документа, который открывается;
//   СписокТабличныхПолей - Список значений - табличных полей, где
//                            Значение - имя элемента формы,
//                            Представление - имя табличной части (в метаданных)
//
Функция ПолучитьТекущуюВидимуюТабличнуюЧасть(Форма, СписокТабличныхПолей) Экспорт
	
	Если СписокТабличныхПолей.Количество() > 0 Тогда
		МаксКоличествоСтрок = 0;
		ИмяТабличнойЧасти   = "";
		Для Каждого Элемент из СписокТабличныхПолей Цикл
			Если Форма.Элементы[Элемент.Значение].Видимость Тогда
				ИмяТабличнойЧасти       = ?(ИмяТабличнойЧасти = "", Элемент.Значение, ИмяТабличнойЧасти);
				КоличествоСтрокТабЧасти = Форма.Объект[Элемент.Представление].Количество();
				Если КоличествоСтрокТабЧасти > МаксКоличествоСтрок Тогда
					МаксКоличествоСтрок = КоличествоСтрокТабЧасти;
					ИмяТабличнойЧасти   = Элемент.Значение;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Возврат ИмяТабличнойЧасти;
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

// Формирует структуру дерева значений, содержащего имена полей, которые
// нужно заполнить в запросе по шапке документа.
//
// Параметры: 
//  УчастникиСовместнойДеятельности из документа
//
// Возвращаемое значение:
//  Таблица
//
Функция СформироватьТаблицуУчастниковСовместнойДеятельности(УчастникиСовместнойДеятельности)  Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УчастникиСовместнойДеятельности.НомерСтроки,
		|	УчастникиСовместнойДеятельности.УчастникСовместнойДеятельности,
		|	УчастникиСовместнойДеятельности.ДоляУчастия
		|ПОМЕСТИТЬ ВТ_УчастникиСовместнойДеятельности
		|ИЗ
		|	&УчастникиСовместнойДеятельности КАК УчастникиСовместнойДеятельности
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СУММА(ВТ_УчастникиСовместнойДеятельности.ДоляУчастия) КАК СуммаДолейУчастия
		|ПОМЕСТИТЬ ВТ_Суммы
		|ИЗ
		|	ВТ_УчастникиСовместнойДеятельности КАК ВТ_УчастникиСовместнойДеятельности
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_УчастникиСовместнойДеятельности.НомерСтроки КАК НомерСтроки,
		|	ВТ_УчастникиСовместнойДеятельности.УчастникСовместнойДеятельности,
		|	ВТ_УчастникиСовместнойДеятельности.ДоляУчастия,
		|	ВТ_Суммы.СуммаДолейУчастия
		|ИЗ
		|	ВТ_УчастникиСовместнойДеятельности КАК ВТ_УчастникиСовместнойДеятельности,
		|	ВТ_Суммы КАК ВТ_Суммы
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
    Запрос.УстановитьПараметр("УчастникиСовместнойДеятельности", УчастникиСовместнойДеятельности);
	Результат = Запрос.Выполнить();

	Если НЕ Результат.Пустой() Тогда 
		Возврат Результат.Выгрузить();
	Иначе 
		Возврат Неопределено;
	КонецЕсли;

КонецФункции // СформироватьДеревоПолейЗапросаПоШапке()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ДВИЖЕНИЯМИ ДОКУМЕНТОВ

Функция ПолучитьСтруктуруИзРезультатаЗапроса(РезультатЗапроса) Экспорт

	СтруктураПараметров = Новый Структура;

	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	Для каждого КолонкаРезультата Из РезультатЗапроса.Колонки Цикл
		СтруктураПараметров.Вставить(КолонкаРезультата.Имя, Выборка[КолонкаРезультата.Имя]);
	КонецЦикла;

    Возврат СтруктураПараметров;

КонецФункции

Функция ТекстРазделителяЗапросовПакета() Экспорт

	ТекстРазделителя =
	"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";

	Возврат ТекстРазделителя;

КонецФункции

Функция ПолучитьТаблицуПараметровПроведения(ИсходнаяТаблица, СписокКолонок) Экспорт

	Если ИсходнаяТаблица = Неопределено Тогда
		
		ТаблицаРезультат = Новый ТаблицаЗначений;
		Колонки = Новый Структура(СписокКолонок);
		Для каждого Колонка Из Колонки Цикл
			ТаблицаРезультат.Колонки.Добавить(Колонка.Ключ);
		КонецЦикла;
		Возврат ТаблицаРезультат;

	Иначе

		Возврат ИсходнаяТаблица.Скопировать(, СписокКолонок);

	КонецЕсли;

КонецФункции

Процедура РаспределитьСуммуПоКолонкеТаблицы(РаспределяемаяСумма, Таблица, ИмяКолонки, ИмяКолонкиБазы = "") Экспорт

	Если РаспределяемаяСумма <> 0 Тогда
		Если ПустаяСтрока(ИмяКолонкиБазы) Тогда
			МассивСтарыхСумм = Таблица.ВыгрузитьКолонку(ИмяКолонки);
		Иначе
			МассивСтарыхСумм = Таблица.ВыгрузитьКолонку(ИмяКолонкиБазы);
		КонецЕсли;
		МассивНовыхСумм = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(РаспределяемаяСумма, МассивСтарыхСумм);
		Если МассивНовыхСумм <> Неопределено Тогда
	 		Таблица.ЗагрузитьКолонку(МассивНовыхСумм, ИмяКолонки);
		КонецЕсли; 
	Иначе
		Таблица.ЗаполнитьЗначения(0, ИмяКолонки);
	КонецЕсли;

КонецПроцедуры

// Возвращает головную организацию для заданной организации
// Если для организации реквизит ГоловнаяОрганизация не заполнен 
// это значит, что сама организация является головной
// Определение головной организации осуществляется в зависимости от настройки
// учетной политики по персоналу организаций "Вести учет по головной организации"
//
// Параметры
//  Организация – СправочникСсылка.Организации
//
// Возвращаемое значение:
//   СправочникСсылка.Организации
//
Функция ГоловнаяОрганизацияДляУчетаЗарплаты(Организация) Экспорт

	ВедениеУчетаПоГоловнойОрганизации = УчетнаяПолитикаСервер.ПолучитьПризнакВеденияУчетаПоГоловнойОрганизации(Организация);
	
	Если ВедениеУчетаПоГоловнойОрганизации Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВЫБОР
		|		КОГДА Организации.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|			ТОГДА Организации.Ссылка
		|		ИНАЧЕ Организации.ГоловнаяОрганизация
		|	КОНЕЦ КАК ГоловнаяОрганизация
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	Организации.Ссылка = &Организация
		|";
		
		Выборка = Запрос.Выполнить().Выбрать();

		Если Выборка.Следующий() Тогда
			Возврат Выборка.ГоловнаяОрганизация;
		Иначе
			Возврат Организация;
		КонецЕсли;
	Иначе
		Возврат Организация;
	КонецЕсли;

КонецФункции // ГоловнаяОрганизацияДляУчетаЗарплаты()

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ФИЗЛИЦАМИ

// Функция формирует фамилию и инициалы
//
// Параметры
//  Фамилия  - фамилия физ. лица.
//  Имя      - имя физ. лица.
//  Отчество - отчество физ. лица.
//
// Возвращаемое значение 
//  Фамилия, имя, отчество одной строкой.
//
Функция ПолучитьФамилиюИмяОтчество(Фамилия = " ", Имя = " ", Отчество = " ") Экспорт

	Возврат ?(НЕ ПустаяСтрока(Фамилия), Фамилия + ?(НЕ ПустаяСтрока(Имя)," " + Лев(Имя,1) + "." + 
			?(НЕ ПустаяСтрока(Отчество) , 
			Лев(Отчество,1)+".", ""), ""), "");

КонецФункции // ПолучитьФамилиюИмяОтчество()

// Процедура возвращает паспортные данные физлица в виде строки
//
// Параметры: 
//  ФизЛицо - ссылка на элемент справочника "Физические лица",по которму необходимо
//            получить паспортные данные.
//
// Возвращаемое значение:
//  Строка с данными об удостоверении личности физичского лица
//
Функция ПолучитьПаспортныеДанныеСтрокой(ФизЛицо, ПериодСреза = Неопределено) Экспорт

	СтруктураПаспортныхДанных = РегистрыСведений.ПаспортныеДанныеФизЛиц.ПолучитьПоследнее(?(ПериодСреза = Неопределено, ОбщегоНазначения.ТекущаяДатаПользователя(), ПериодСреза), Новый Структура("ФизЛицо",ФизЛицо));

	ВидДокумента       = СтруктураПаспортныхДанных.ДокументВид;
	Серия              = СтруктураПаспортныхДанных.ДокументСерия;
	Номер              = СтруктураПаспортныхДанных.ДокументНомер;
	ДатаВыдачи         = СтруктураПаспортныхДанных.ДокументДатаВыдачи;
	КемВыдан           = СтруктураПаспортныхДанных.ДокументКемВыдан;

	Если НЕ (НЕ ЗначениеЗаполнено(ДатаВыдачи)
		   И НЕ ЗначениеЗаполнено(ВидДокумента)
		   И НЕ ЗначениеЗаполнено(Серия + Номер + КемВыдан)) Тогда

		Возврат ?(ВидДокумента.Пустая(),"","" + ВидДокумента + ", ") 
				+ ?(ЗначениеЗаполнено(Серия), "Серия: "   + Серия + ", ","") + "№ " + Номер 
				+ ", Выдан: " + Формат(ДатаВыдачи,"ДФ='дд ММММ гггг'") + " года, " 
				+ КемВыдан;

	Иначе

		Возврат "Отсутствуют данные об удостоверении личности."

	КонецЕсли;

КонецФункции // ПолучитьПаспорныеДанныеСтрокой()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ОРГАНИЗАЦИЯМ, КОНТРАГЕНТАМИ И ФИЗЛИЦАМИ
		 
//  Функция формирует сведения об указанном ЮрФизЛице. К сведениям относятся -
// наименование, адрес, номер телефона, банковские реквизиты.
//
// Параметры: 
//  ЮрФизЛицо   - организация, контрагент или физическое лицо, о котором собираются сведения.
//  ДатаПериода - дата, на которую выбираются сведения о ЮрФизЛице.
//  ДляФизЛицаТолькоИнициалы - Для физ. лица выводить только инициалы имени и отчества.
//  БанковскийСчет - Банковский счет, если счет не основной.
//
// Возвращаемое значение:
//  Сведения - собранные сведения.
//
Функция СведенияОЮрФизЛице(ЮрФизЛицо, ДатаПериода = '20200101', ДляФизЛицаТолькоИнициалы = Истина, БанковскийСчет = Неопределено) Экспорт

	Сведения = Новый Структура("Представление, 
								|ПолноеНаименование, 
								|КодПоОКПО, 
								|РНН, 
								|БИН_ИИН,
								|КБЕ,  
								|Телефоны, 
								|ЮридическийАдрес, 
								|Банк, 
								|БИК, 
								|КоррСчет, 
								|НомерСчета, 
								|АдресБанка,
								|ДатаСвидетельстваПоНДС,
								|НомерСвидетельстваПоНДС,
								|СерияСвидетельстваПоНДС,
								|СвидетельствоПоНДС,
								|ЮрФизЛицо,
								|НомерРегистрацииВСтранеРезидентства,
								|СтранаРезидентстваУчастникТаможенногоСоюза");
	Запрос   = Новый Запрос;
	Данные   = Неопределено;

	Если ЮрФизЛицо = Неопределено ИЛИ ЮрФИзЛицо = NULL Тогда
		Возврат Сведения;
	ИначеЕсли ТипЗнч(ЮрФизЛицо) = Тип("Строка") Тогда
		Сведения.Вставить("Представление",      ЮрФизЛицо);
		Сведения.Вставить("ПолноеНаименование", ЮрФизЛицо);
		
		Возврат Сведения;
	КонецЕсли;

	Если БанковскийСчет = Неопределено ИЛИ БанковскийСчет.Пустая() Тогда
		ТекБанковскийСчет = ЮрФизЛицо.ОсновнойБанковскийСчет;
	Иначе
		ТекБанковскийСчет = БанковскийСчет;
	КонецЕсли;

	// Выберем основные сведения о контрагенте и банковском счете
	Если ТекБанковскийСчет = Неопределено ИЛИ ТекБанковскийСчет.БанкДляРасчетов.Пустая() Тогда
		ИмяРеквизитаБанка = "Банк";
	Иначе
		ИмяРеквизитаБанка = "БанкДляРасчетов";
	КонецЕсли;

	Если ТипЗнч(ЮрФизЛицо) = Тип("СправочникСсылка.Организации")  Тогда
		ИмяСправочника = "Организации";
		ИмяСправочникаПодразделенияОрганизаций = "Организации";
		ИмяРеквизитаБИН_ИИН = "ИдентификационныйНомер";
		ИмяРеквизитаНомерРегистрацииВСтранеРезидентства = "КодВСтранеРегистрации";
		ИмяРеквизитаСтранаРезидентстваУчастникТаможенногоСоюза = "СтранаРегистрации.УчастникТаможенногоСоюза";
		
		Запрос.УстановитьПараметр("ПарЮрФизЛицо", ЮрФизЛицо);

	ИначеЕсли ТипЗнч(ЮрФизЛицо) = Тип("СправочникСсылка.Контрагенты") Тогда
		ИмяСправочника = "Контрагенты";
		ИмяСправочникаПодразделенияОрганизаций = "Организации";
		ИмяРеквизитаБИН_ИИН = "ИдентификационныйКодЛичности";
		ИмяРеквизитаНомерРегистрацииВСтранеРезидентства = "НомерНалоговойРегистрацииВСтранеРезидентства";
		ИмяРеквизитаСтранаРезидентстваУчастникТаможенногоСоюза = "СтранаРезидентства.УчастникТаможенногоСоюза";
		
		Запрос.УстановитьПараметр("ПарЮрФизЛицо", ЮрФизЛицо);

	ИначеЕсли ТипЗнч(ЮрФизЛицо) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
		ИмяСправочника = "Организации";
		ИмяСправочникаПодразделенияОрганизаций = "ПодразделенияОрганизаций";
		ИмяРеквизитаБИН_ИИН = "ИдентификационныйНомер";
		ИмяРеквизитаНомерРегистрацииВСтранеРезидентства = "КодВСтранеРегистрации";
		ИмяРеквизитаСтранаРезидентстваУчастникТаможенногоСоюза = "СтранаРегистрации.УчастникТаможенногоСоюза";
		
		Запрос.УстановитьПараметр("ПарСтруктурноеПодразделение", ЮрФизЛицо);
		Запрос.УстановитьПараметр("ПарЮрФизЛицо", ЮрФизЛицо.Владелец);
	Иначе
		Возврат Сведения;
	КонецЕсли;

	МетаданныеСправочника = Метаданные.Справочники[ИмяСправочника];

	Запрос.УстановитьПараметр("ПарБанковскийСчет", ТекБанковскийСчет);

	Если НЕ ЗначениеЗаполнено(ТекБанковскийСчет) Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	" + ИмяСправочникаПодразделенияОрганизаций + ".Представление           						 КАК Наименование,
		|	ВЫРАЗИТЬ(" + ИмяСправочникаПодразделенияОрганизаций + ".НаименованиеПолное КАК СТРОКА(1000)) КАК ПолноеНаименование,
		|	" + ИмяСправочникаПодразделенияОрганизаций + ".РНН                     						 КАК РНН,
		
		|	Организации." + ИмяРеквизитаНомерРегистрацииВСтранеРезидентства + "							КАК НомерРегистрацииВСтранеРезидентства,
		|	Организации." + ИмяРеквизитаСтранаРезидентстваУчастникТаможенногоСоюза + " 					КАК СтранаРезидентстваУчастникТаможенногоСоюза,
		|	Организации.КБЕ                     														КАК КБЕ,
		|	Организации.ЮрФизЛицо                     													КАК ЮрФизЛицо,
		|	" + ИмяСправочникаПодразделенияОрганизаций + "." + ИмяРеквизитаБИН_ИИН + "                  КАК БИН_ИИН,";
		Если МетаданныеСправочника.Реквизиты.Найти("ДатаСвидетельстваПоНДС") <> Неопределено Тогда
			Запрос.Текст = Запрос.Текст + "
			|	Организации.ДатаСвидетельстваПоНДС  КАК ДатаСвидетельстваПоНДС,
			|	Организации.НомерСвидетельстваПоНДС КАК НомерСвидетельстваПоНДС,
			|	Организации.СерияСвидетельстваПоНДС КАК СерияСвидетельстваПоНДС,";
		КонецЕсли;
		
		Запрос.Текст = Запрос.Текст + "
		|	" + ИмяСправочникаПодразделенияОрганизаций + ".КодПоОКПО КАК КодПоОКПО,
		|	""""                                КАК НомерСчета,
		|	""""                                КАК Банк,
		|	""""                                КАК БИК,
		|	""""                                КАК БИКДоРеформыБанковскихСчетов,
		|	""""                                КАК КоррСчет,
		|	""""                                КАК АдресБанка
		|ИЗ
		|	Справочник." + ИмяСправочника + " КАК Организации " + ?(ИмяСправочникаПодразделенияОрганизаций = "ПодразделенияОрганизаций", 
																		", Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций", "") + "
		|
		|ГДЕ
		|	Организации.Ссылка = &ПарЮрФизЛицо" + ?(ИмяСправочникаПодразделенияОрганизаций = "ПодразделенияОрганизаций", " И ПодразделенияОрганизаций.Ссылка = &ПарСтруктурноеПодразделение", "");
	Иначе
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	" + ИмяСправочникаПодразделенияОрганизаций + ".Представление           						 КАК Наименование,
		|	ВЫРАЗИТЬ(" + ИмяСправочникаПодразделенияОрганизаций + ".НаименованиеПолное КАК СТРОКА(1000)) КАК ПолноеНаименование,
		|	" + ИмяСправочникаПодразделенияОрганизаций + ".РНН                     						 КАК РНН,
		|	Организации.КБЕ                     														 КАК КБЕ,
		
		|	Организации." + ИмяРеквизитаНомерРегистрацииВСтранеРезидентства + "	КАК НомерРегистрацииВСтранеРезидентства,
		|	Организации." + ИмяРеквизитаСтранаРезидентстваУчастникТаможенногоСоюза + " КАК СтранаРезидентстваУчастникТаможенногоСоюза,
		|	" + ИмяСправочникаПодразделенияОрганизаций + "." + ИмяРеквизитаБИН_ИИН + "                  КАК БИН_ИИН,
		
		|	" + ИмяСправочникаПодразделенияОрганизаций + ".КодПоОКПО               						КАК КодПоОКПО,
		|	Организации.ЮрФизЛицо                     													КАК ЮрФизЛицо,";
		Если МетаданныеСправочника.Реквизиты.Найти("ДатаСвидетельстваПоНДС") <> Неопределено Тогда
			Запрос.Текст = Запрос.Текст + "
			|	Организации.ДатаСвидетельстваПоНДС  КАК ДатаСвидетельстваПоНДС,
			|	Организации.НомерСвидетельстваПоНДС КАК НОмерСвидетельстваПоНДС,
			|	Организации.СерияСвидетельстваПоНДС КАК СерияСвидетельстваПоНДС,";
		КонецЕсли;
		Запрос.Текст = Запрос.Текст + "
	   	|	БанковскиеСчета.НомерСчета                     	   КАК НомерСчета,
		|	БанковскиеСчета." + ИмяРеквизитаБанка + "          КАК Банк,
		|	БанковскиеСчета." + ИмяРеквизитаБанка + ".БИК      КАК БИК,
		|	БанковскиеСчета." + ИмяРеквизитаБанка + ".БИКДоРеформыБанковскихСчетов  КАК БИКДоРеформыБанковскихСчетов,
		|	БанковскиеСчета." + ИмяРеквизитаБанка + ".КоррСчет КАК КоррСчет,
		|	БанковскиеСчета." + ИмяРеквизитаБанка + ".Адрес    КАК АдресБанка
		|ИЗ
		|	Справочник." + ИмяСправочника + " КАК Организации,
		|	Справочник.БанковскиеСчета    КАК БанковскиеСчета" + ?(ИмяСправочникаПодразделенияОрганизаций = "ПодразделенияОрганизаций", 
																		", Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций", "") + "
		|
		|ГДЕ
		|	Организации.Ссылка       = &ПарЮрФизЛицо
		|	И БанковскиеСчета.Ссылка = &ПарБанковскийСчет" + ?(ИмяСправочникаПодразделенияОрганизаций = "ПодразделенияОрганизаций", " И ПодразделенияОрганизаций.Ссылка = &ПарСтруктурноеПодразделение", "");;
	КонецЕсли;

	РезультатЗапроса = Запрос.Выполнить();
	Данные = РезультатЗапроса.Выбрать();
	Данные.Следующий();

	Сведения.Вставить("ПолноеНаименование", СокрЛП(Данные.ПолноеНаименование));

	Если Данные <> Неопределено Тогда
		Сведения.Вставить("Представление",    СокрЛП(Данные.Наименование));
		Сведения.Вставить("РНН",              Данные.РНН);
		Сведения.Вставить("БИН_ИИН",          Данные.БИН_ИИН);
		Сведения.Вставить("КБЕ",              Данные.КБЕ);
		Сведения.Вставить("ЮрФизЛицо",        Данные.ЮрФизЛицо);		
		Сведения.Вставить("КодПоОКПО", 		  Данные.КодПоОКПО);
		Сведения.Вставить("Телефоны",         КонтактнаяИнформация.ПолучитьТелефонИзКонтактнойИнформации(ЮрФизЛицо));
		Сведения.Вставить("НомерСчета",       СокрЛП(Данные.НомерСчета));
		Сведения.Вставить("Банк",             Данные.Банк);
		Сведения.Вставить("НомерРегистрацииВСтранеРезидентства", Данные.НомерРегистрацииВСтранеРезидентства);
		Сведения.Вставить("СтранаРезидентстваУчастникТаможенногоСоюза", Данные.СтранаРезидентстваУчастникТаможенногоСоюза);		
		
		// С 07.06.2010 изменились коды банков.
		ДатаСведенийБИК = ?(ЗначениеЗаполнено(ДатаПериода), ДатаПериода, ТекущаяДата()); 
		Если ДатаСведенийБИК >= Дата(2010,06,07) Тогда
			Сведения.Вставить("БИК",              СокрЛП(Данные.БИК));
		Иначе	
			Сведения.Вставить("БИК",              СокрЛП(Данные.БИКДоРеформыБанковскихСчетов));
		КонецЕсли; 
			
		Сведения.Вставить("АдресБанка",       СокрЛП(Данные.АдресБанка));
		Сведения.Вставить("КоррСчет",         СокрЛП(Данные.КоррСчет));
		Сведения.Вставить("ЮридическийАдрес", КонтактнаяИнформация.ПолучитьАдресИзКонтактнойИнформации(ЮрФизЛицо, "Юридический"));
		Сведения.Вставить("ФактическийАдрес", КонтактнаяИнформация.ПолучитьАдресИзКонтактнойИнформации(ЮрФизЛицо, "Фактический"));
		Если РезультатЗапроса.Колонки.Найти("ДатаСвидетельстваПоНДС") <> Неопределено Тогда
			Сведения.Вставить("ДатаСвидетельстваПоНДС", Данные.ДатаСвидетельстваПоНДС);
			Сведения.Вставить("НомерСвидетельстваПоНДС", Данные.НомерСвидетельстваПоНДС);
			Сведения.Вставить("СерияСвидетельстаПоНДС", Данные.СерияСвидетельстваПоНДС);
			Сведения.Вставить("СвидетельствоПоНДС", " серия " + Данные.СерияСвидетельстваПоНДС + ",  № " + Данные.НомерСвидетельстваПоНДС 
													 + ", от " + Формат(Данные.ДатаСвидетельстваПоНДС,"ДФ=dd.MM.yyyy"));
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Сведения.ПолноеНаименование) Тогда
			Сведения.ПолноеНаименование = Сведения.Представление;
		КонецЕсли;
		
	КонецЕсли;

	Возврат Сведения;

КонецФункции // СведенияОЮрФизЛице()

// Возвращает структуру данных со сводным описанием контрагента
//
// Параметры: 
//  СписокСведений - список значений со значенийми параметров организации
//   СписокСведений формируется функцией СведенияОЮрФизЛице
//  Список         - список запрашиваемых параметров организаиии
//  СПрефиксом     - Признак выводить или нет префикс параметра организации
//
// Возвращаемое значение:
//  Строка - описатель организации / контрагента / физ.лица.
//
Функция ОписаниеОрганизации(СписокСведений, Список = "", СПрефиксом = Истина, Дата = Неопределено, КодЯзыка = "ru") Экспорт
	
	Если ПустаяСтрока(Список) Тогда
		Список = "ПолноеНаименование,ИдентификационныйНомер,ЮридическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет";
	КонецЕсли; 
	
	ВыводитьРНН = Истина;
	
	Если Не Дата = Неопределено Тогда 
		ДатаПрекращенияВыводаРНН 	= Константы.ДатаПрекращенияВыводаРННВПервичныхДокументах.Получить();
		
		ВыводитьРНН = НЕ ЗначениеЗаполнено(ДатаПрекращенияВыводаРНН) ИЛИ Дата<ДатаПрекращенияВыводаРНН;
	КонецЕсли;
	
	Результат = "";

	СоответствиеПараметров = Новый Соответствие();
	СоответствиеПараметров.Вставить("ПолноеНаименование", " ");
	
	Если Найти(Список, "ИдентификационныйНомер") > 0 Тогда 
		Если ВыводитьРНН Тогда 
			Список = СтрЗаменить(Список, "ИдентификационныйНомер", "РНН");
		Иначе
			Список = СтрЗаменить(Список, "ИдентификационныйНомер", "БИН_ИИН");			
		КонецЕсли;		
	КонецЕсли;
	
	СоответствиеПараметров.Вставить("РНН",            	  "ru = "" РНН ""; kz = "" СТН """);
	СоответствиеПараметров.Вставить("БИН_ИИН",            "ru = "" БИН / ИИН ""; kz = "" БСН / ЖСН """);

	СоответствиеПараметров.Вставить("ЮридическийАдрес",   " ");
	СоответствиеПараметров.Вставить("Телефоны",           "ru = "" тел.: ""; kz = "" тел.: """);
	СоответствиеПараметров.Вставить("НомерСчета",         "ru = """"; kz = """"");
	СоответствиеПараметров.Вставить("Банк",               "ru = "" в банке ""; kz = "" банктегі """);
	СоответствиеПараметров.Вставить("БИК",                "ru = "" БИК ""; kz = "" БСК """);
	СоответствиеПараметров.Вставить("КоррСчет",           "ru = "" к/с ""; kz = "" к/ш """);
	СоответствиеПараметров.Вставить("КодПоОКПО",          "ru = "" Код по ОКПО ""; kz = "" ҚҰЖЖ бойынша коды """);
	СоответствиеПараметров.Вставить("НомерРегистрацииВСтранеРезидентства", "ru = "" ИНН/УНП ""; kz = "" ИНН/УНП """); // Учетные данные контрагентов из РФ и РБ

	ЧислоПараметров = СтрЧислоВхождений(Список, ",");

	Для Счетчик = 1 по ЧислоПараметров Цикл

		ПозЗапятой = Найти(Список, ",");

		Если ПозЗапятой > 0  Тогда
			ИмяПараметра = Лев(Список, ПозЗапятой - 1);
			Список = Сред(Список, ПозЗапятой + 1, СтрДлина(Список));

			Попытка
				СтрокаДополнения = "";
				СписокСведений.Свойство(ИмяПараметра, СтрокаДополнения);

				Если ПустаяСтрока(СтрокаДополнения) Тогда
					Продолжить;
				КонецЕсли;

				Префикс = СоответствиеПараметров[ИмяПараметра];
				Если Не ПустаяСтрока(Результат)  Тогда
					Результат = Результат + ",";
				КонецЕсли; 

				Если ИмяПараметра = "Банк" И КодЯзыка = "kz" Тогда 
					Результат = Результат + " " + СтрокаДополнения + ?(СПрефиксом = Истина, НСтр(Префикс, КодЯзыка), "");
				Иначе 
					Результат = Результат + ?(СПрефиксом = Истина, НСтр(Префикс, КодЯзыка), "") + СтрокаДополнения;
				КонецЕсли;

			Исключение

				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("Не удалось определить значение параметра организации: " + ИмяПараметра));

			КонецПопытки;

		КонецЕсли; 

	КонецЦикла;

	Возврат Результат;
	
КонецФункции // ОписаниеОрганизации()

//Функция возвращает информацию об ответственных лицах организации и их должностях 
//
Функция ОтветственныеЛицаОрганизаций(Организация, ДатаСреза, Исполнитель = Неопределено, Результат = Неопределено, ВыводитьФИОПолностью = Ложь) Экспорт

	Результат = Новый Структура("Руководитель, 
								|РуководительФИзЛицо,
								|РуководительДолжность, 
								|РуководительДолжностьСсылка,
								|ГлавныйБухгалтер, 
								|ГлавныйБухгалтерФИзЛицо,
								|ГлавныйБухгалтерДолжность, 
								|ГлавныйБухгалтерДолжностьСсылка,
								|КоммерческийДиректор, 
								|КоммерческийДиректорФИзЛицо,
								|КоммерческийДиректорДолжность, 
								|КоммерческийДиректорДолжностьСсылка,
								|ФинансовыйДиректор, 
								|ФинансовыйДиректорФИзЛицо,
								|ФинансовыйДиректорДолжность, 
								|ФинансовыйДиректорДолжностьСсылка,
								|ГлавныйБухгалтерДляПодписиБанковскихДокументов,
								|ГлавныйБухгалтерДляПодписиБанковскихДокументовДолжность,
								|УполномоченныйПодписыватьСчетаФактурыЗаГлавногоБухгалтера,
								|УполномоченныйПодписыватьСчетаФактурыЗаГлавногоБухгалтераДолжность,
								|УполномоченныйПодписыватьСчетаФактурыЗаРуководителя,
								|УполномоченныйПодписыватьСчетаФактурыЗаРуководителяДолжность,
								|Кассир, 
								|КассирФИзЛицо,								
								|КассирДолжность, 
								|КассирДолжностьСсылка,
								|УполномоченныйПредставитель, 
								|УполномоченныйПредставительФИзЛицо,								
								|УполномоченныйПредставительДолжность, 
								|УполномоченныйПредставительДолжностьСсылка,
								|Исполнитель, 
								|ИсполнительДолжность, 
								|ОтветственныйЗаРегистры,
								|ОтветственныйЗаРегистрыДолжность,
								|РуководительКадровойСлужбы,
								|РуководительКадровойСлужбыДолжность,
								|РуководительКадровойСлужбыДолжностьСсылка,
								|РуководительКадровойСлужбыФизЛицо");

								
	Если Организация <> Неопределено Тогда

		ЗапросПоЛицам = Новый Запрос();
		ЗапросПоЛицам.УстановитьПараметр("Организация", Организация);
		ЗапросПоЛицам.УстановитьПараметр("ДатаСреза",   ДатаСреза);
		ЗапросПоЛицам.УстановитьПараметр("ВыводитьФИОПолностью",   ВыводитьФИОПолностью);
		ЗапросПоЛицам.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		                      |	ОтветственныеЛицаОрганизацииСрезПоследних.ОтветственноеЛицо,
		                      |	ОтветственныеЛицаОрганизацииСрезПоследних.Должность.Наименование КАК Должность,
		                      |	ОтветственныеЛицаОрганизацииСрезПоследних.Должность КАК ДолжностьСсылка,
		                      |	ОтветственныеЛицаОрганизацииСрезПоследних.ФизическоеЛицо КАК ФизЛицо,
		                      |	ВЫБОР
		                      |		КОГДА ФИОФизЛицСрезПоследних.ФизЛицо ЕСТЬ NULL 
		                      |			ТОГДА ОтветственныеЛицаОрганизацииСрезПоследних.ФизическоеЛицо.Наименование
		                      |		ИНАЧЕ ВЫБОР
		                      |				КОГДА &ВыводитьФИОПолностью
		                      |					ТОГДА ФИОФизЛицСрезПоследних.Фамилия + "" "" + ФИОФизЛицСрезПоследних.Имя + "" "" + ФИОФизЛицСрезПоследних.Отчество
		                      |				ИНАЧЕ ФИОФизЛицСрезПоследних.Фамилия + ВЫБОР
		                      |						КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) <> """"
		                      |							ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) + "".""
		                      |						ИНАЧЕ """"
		                      |					КОНЕЦ + ВЫБОР
		                      |						КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) <> """"
		                      |							ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) + "".""
		                      |						ИНАЧЕ """"
		                      |					КОНЕЦ
		                      |			КОНЕЦ
		                      |	КОНЕЦ КАК ФИОПолное
		                      |ИЗ
		                      |	РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(&ДатаСреза, СтруктурнаяЕдиница = &Организация) КАК ОтветственныеЛицаОрганизацииСрезПоследних
		                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаСреза, ) КАК ФИОФизЛицСрезПоследних
		                      |		ПО ОтветственныеЛицаОрганизацииСрезПоследних.ФизическоеЛицо = ФИОФизЛицСрезПоследних.ФизЛицо";
		Выборка = ЗапросПоЛицам.Выполнить().Выбрать();

		Пока Выборка.Следующий() Цикл

			Если Выборка.ОтветственноеЛицо = Перечисления.ОтветственныеЛицаОрганизаций.Руководитель Тогда
				Результат.Руководитель            		= Выборка.ФИОПолное;
				Результат.РуководительФизЛицо     		= Выборка.ФизЛицо;
				Результат.РуководительДолжность   		= Выборка.Должность;
				Результат.РуководительДолжностьСсылка   = Выборка.ДолжностьСсылка;
			ИначеЕсли Выборка.ОтветственноеЛицо = Перечисления.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер Тогда
				Результат.ГлавныйБухгалтер        			= Выборка.ФИОПолное;
				Результат.ГлавныйБухгалтерФизЛицо    		= Выборка.ФизЛицо;
				Результат.ГлавныйБухгалтерДолжность 		= Выборка.Должность;
				Результат.ГлавныйБухгалтерДолжностьСсылка   = Выборка.ДолжностьСсылка;
				//ПервыйБИТ
			ИначеЕсли Выборка.ОтветственноеЛицо = Перечисления.ОтветственныеЛицаОрганизаций.КоммерческийДиректор Тогда
				Результат.КоммерческийДиректор        			= Выборка.ФИОПолное;
				Результат.КоммерческийДиректорФизЛицо    		= Выборка.ФизЛицо;
				Результат.КоммерческийДиректорДолжность 		= Выборка.Должность;
				Результат.КоммерческийДиректорДолжностьСсылка   = Выборка.ДолжностьСсылка;	
				//ПервыйБИТ
				//Контротек
			ИначеЕсли Выборка.ОтветственноеЛицо = Перечисления.ОтветственныеЛицаОрганизаций.ФинансовыйДиректор Тогда
				Результат.ФинансовыйДиректор        			= Выборка.ФИОПолное;
				Результат.ФинансовыйДиректорФизЛицо    			= Выборка.ФизЛицо;
				Результат.ФинансовыйДиректорДолжность 			= Выборка.Должность;
				Результат.ФинансовыйДиректорДолжностьСсылка   	= Выборка.ДолжностьСсылка;	
				//Контротек
			ИначеЕсли Выборка.ОтветственноеЛицо = Перечисления.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтерДляПодписиБанковскихДокументов Тогда
				Результат.ГлавныйБухгалтерДляПодписиБанковскихДокументов		  = Выборка.ФИОПолное;
				Результат.ГлавныйБухгалтерДляПодписиБанковскихДокументовДолжность = Выборка.Должность;
			ИначеЕсли Выборка.ОтветственноеЛицо = Перечисления.ОтветственныеЛицаОрганизаций.Кассир Тогда
				Результат.Кассир                  = Выборка.ФИОПолное;
				Результат.КассирФизЛицо 		  = Выборка.ФизЛицо;
				Результат.КассирДолжность         = Выборка.Должность;
				Результат.КассирДолжностьСсылка   = Выборка.ДолжностьСсылка;
			ИначеЕсли Метаданные.Перечисления.ОтветственныеЛицаОрганизаций.ЗначенияПеречисления.Найти("ОтветственныйЗаНалоговыеРегистры") <> Неопределено
						И Выборка.ОтветственноеЛицо = Перечисления.ОтветственныеЛицаОрганизаций.ОтветственныйЗаНалоговыеРегистры Тогда
				Результат.ОтветственныйЗаРегистры = Выборка.ФИОПолное;
				Результат.ОтветственныйЗаРегистрыДолжность = Выборка.Должность;
			ИначеЕсли Метаданные.Перечисления.ОтветственныеЛицаОрганизаций.ЗначенияПеречисления.Найти("РуководительКадровойСлужбы") <> Неопределено
						И Выборка.ОтветственноеЛицо = Перечисления.ОтветственныеЛицаОрганизаций.РуководительКадровойСлужбы Тогда
				Результат.РуководительКадровойСлужбы 				= Выборка.ФИОПолное;
				Результат.РуководительКадровойСлужбыДолжность 		= Выборка.Должность;
				Результат.РуководительКадровойСлужбыДолжностьСсылка	= Выборка.ДолжностьСсылка;
				Результат.РуководительКадровойСлужбыФизЛицо			= Выборка.ФизЛицо;
			ИначеЕсли Метаданные.Перечисления.ОтветственныеЛицаОрганизаций.ЗначенияПеречисления.Найти("УполномоченныйПодписыватьСчетаФактурыЗаГлавногоБухгалтера") <> Неопределено 
						И Выборка.ОтветственноеЛицо = Перечисления.ОтветственныеЛицаОрганизаций.УполномоченныйПодписыватьСчетаФактурыЗаГлавногоБухгалтера Тогда
				Результат.УполномоченныйПодписыватьСчетаФактурыЗаГлавногоБухгалтера        	 = Выборка.ФИОПолное;
				Результат.УполномоченныйПодписыватьСчетаФактурыЗаГлавногоБухгалтераДолжность = Выборка.Должность;
			ИначеЕсли Метаданные.Перечисления.ОтветственныеЛицаОрганизаций.ЗначенияПеречисления.Найти("УполномоченныйПодписыватьСчетаФактурыЗаРуководителя") <> Неопределено
						И Выборка.ОтветственноеЛицо = Перечисления.ОтветственныеЛицаОрганизаций.УполномоченныйПодписыватьСчетаФактурыЗаРуководителя Тогда
				Результат.УполномоченныйПодписыватьСчетаФактурыЗаРуководителя        	 = Выборка.ФИОПолное;
				Результат.УполномоченныйПодписыватьСчетаФактурыЗаРуководителяДолжность   = Выборка.Должность;
			ИначеЕсли Метаданные.Перечисления.ОтветственныеЛицаОрганизаций.ЗначенияПеречисления.Найти("УполномоченныйПредставитель") <> Неопределено
						И Выборка.ОтветственноеЛицо = Перечисления.ОтветственныеЛицаОрганизаций.УполномоченныйПредставитель Тогда
				Результат.УполномоченныйПредставитель                  	= Выборка.ФИОПолное;
				Результат.УполномоченныйПредставительФизЛицо 		  	= Выборка.ФизЛицо;
				Результат.УполномоченныйПредставительДолжность         	= Выборка.Должность;
				Результат.УполномоченныйПредставительДолжностьСсылка	= Выборка.ДолжностьСсылка;
			КонецЕсли;

		КонецЦикла;

		Если Исполнитель <> Неопределено И Метаданные.РегистрыСведений.Найти("РаботникиОрганизаций") <> Неопределено тогда

			ЗапросПоИсполнителям = Новый Запрос();
			ЗапросПоИсполнителям.УстановитьПараметр("Организация",         ?(ТипЗнч(Организация) = Тип("СправочникСсылка.ПодразделенияОрганизаций"), Организация.Владелец, Организация));
			ЗапросПоИсполнителям.УстановитьПараметр("ГоловнаяОрганизация", ГоловнаяОрганизацияДляУчетаЗарплаты(?(ТипЗнч(Организация) = Тип("СправочникСсылка.ПодразделенияОрганизаций"), Организация.Владелец, Организация)));
			ЗапросПоИсполнителям.УстановитьПараметр("ДатаСреза",           ДатаСреза);
			ЗапросПоИсполнителям.УстановитьПараметр("Исполнитель",         Исполнитель);
			ЗапросПоИсполнителям.УстановитьПараметр("ВнутреннееСовместительство", Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство);
			ЗапросПоИсполнителям.УстановитьПараметр("ВыводитьФИОПолностью",ВыводитьФИОПолностью);
			ЗапросПоИсполнителям.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	РаботникиОрганизацииСрезПоследних.Должность.Наименование КАК Должность,
			|	ВЫБОР
			|		КОГДА ФИОФизЛицСрезПоследних.ФизЛицо ЕСТЬ NULL 
			|			ТОГДА РаботникиОрганизацииСрезПоследних.Сотрудник.Физлицо.Наименование
			|		ИНАЧЕ ВЫБОР
			|				КОГДА &ВыводитьФИОПолностью
			|					ТОГДА ФИОФизЛицСрезПоследних.Фамилия + "" "" + ФИОФизЛицСрезПоследних.Имя + "" "" + ФИОФизЛицСрезПоследних.Отчество
			|				ИНАЧЕ ФИОФизЛицСрезПоследних.Фамилия + ВЫБОР
			|						КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) <> """"
			|							ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) + "".""
			|						ИНАЧЕ """"
			|					КОНЕЦ + ВЫБОР
			|						КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) <> """"
			|							ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) + "".""
			|						ИНАЧЕ """"
			|					КОНЕЦ
			|			КОНЕЦ
			|	КОНЕЦ КАК ФИОПолное
			|ИЗ
			|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(
			|			&ДатаСреза,
			|			Организация = &ГоловнаяОрганизация
			|				И Сотрудник.ФизЛицо = &Исполнитель
			|				И Сотрудник.ВидЗанятости <> &ВнутреннееСовместительство) КАК РаботникиОрганизацииСрезПоследних
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаСреза, ФизЛицо = &Исполнитель) КАК ФИОФизЛицСрезПоследних
			|		ПО РаботникиОрганизацииСрезПоследних.Сотрудник.Физлицо = ФИОФизЛицСрезПоследних.ФизЛицо
			|ГДЕ
			|	РаботникиОрганизацииСрезПоследних.ПодразделениеОрганизации.Владелец = &Организация
			|
			|УПОРЯДОЧИТЬ ПО
			|	РаботникиОрганизацииСрезПоследних.Период УБЫВ";
			ВыборкаИсполнителей = ЗапросПоИсполнителям.Выполнить().Выбрать();

			Если ВыборкаИсполнителей.Следующий() Тогда
				Результат.ИсполнительДолжность = ВыборкаИсполнителей.Должность;
				Результат.Исполнитель          = ВыборкаИсполнителей.ФиоПолное;
			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	Возврат Результат;

КонецФункции // ОтветственныеЛицаОрганизации()

////////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ РАБОТЫ С ДАННЫМИ В БАЗЕ

// Процедура активизирует элемент формы.
// Если это - табличная часть, то тогда анализируется,
// может табличная часть на закладке и если так,
// то закладка становится текущей, но табличная часть не активизируется
//
// Параметры:
//  Форма            - Управляемая форма
//  ИмяЭлементаФормы - Строка - имя элемента, который необходимо активизировать
//
Процедура АктивизироватьЭлементФормы(Форма, ИмяЭлементаФормы) Экспорт

	Если НЕ ПустаяСтрока(ИмяЭлементаФормы) Тогда
		НайденныйЭлементФормы = Форма.Элементы.Найти(ИмяЭлементаФормы);
		Если НайденныйЭлементФормы <> Неопределено Тогда
			Если ТипЗнч(НайденныйЭлементФормы) = Тип("ТаблицаФормы") Тогда
				// Для таблицы определить - если она находится на закладке, то не активизировать элемент,
				// а сделать активной страницу, на которой находится эта табличная часть
				Страница = НайденныйЭлементФормы.Родитель;
				Пока Страница <> Неопределено И ТипЗнч(Страница) = Тип("ГруппаФормы") И Страница.Вид = ВидГруппыФормы.ОбычнаяГруппа Цикл
					// Таблица может быть внутри группы, а группа на странице
					Страница = Страница.Родитель;
				КонецЦикла;
				Если (Страница <> Неопределено) И ТипЗнч(Страница) = Тип("ГруппаФормы") И (Страница.Вид = ВидГруппыФормы.Страница) Тогда
					// Определим владельца этой страницы и активизируем эту страницу
					ПанельСтраниц = Страница.Родитель;
					Если (ПанельСтраниц <> Неопределено) И (ПанельСтраниц.Вид = ВидГруппыФормы.Страницы) Тогда
						ПанельСтраниц.ТекущаяСтраница = Страница;
					Иначе
						Форма.ТекущийЭлемент = НайденныйЭлементФормы;
					КонецЕсли;
				Иначе
					Форма.ТекущийЭлемент = НайденныйЭлементФормы;
				КонецЕсли;
			Иначе
				Форма.ТекущийЭлемент = НайденныйЭлементФормы;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ДобавитьДатуДокументаКРезультатуЗапроса(Результат, КолонкаДокумента, КолонкаСДатой) Экспорт

	КэшПоТипам = Новый Соответствие;
	
	Для каждого СтрокаТаблицы из Результат Цикл
		//Для каждого СтрокаТаблицы из Строка.строки Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы[КолонкаДокумента]) тогда
			Продолжить;
		КонецЕсли;
		
		ТипТекущегоДокумента = ТипЗнч(СтрокаТаблицы[КолонкаДокумента]);
		МассивТипа = КэшПоТипам[ТипТекущегоДокумента];
		Если МассивТипа = Неопределено Тогда
			МассивТипа = Новый Массив;
			КэшПоТипам.Вставить(ТипТекущегоДокумента, МассивТипа);
		КонецЕсли;
		МассивТипа.Добавить(СтрокаТаблицы[КолонкаДокумента]);
		//КонецЦикла;
	КонецЦикла;
	
	Если КэшПоТипам.Количество()=0 тогда
		Возврат;
	КонецЕсли;
	
	Запрос = новый запрос;
	
	Для Каждого КлючИЗначение ИЗ КэшПоТипам Цикл
		ИмяМетаданных = Метаданные.НайтиПоТипу(КлючИЗначение.Ключ).Имя;
		
		Запрос.Текст = Запрос.Текст+
		?(Запрос.Текст="","",
		"
		|Объединить все")+
		"
		|	ВЫБРАТЬ "+ ?(Запрос.Текст=""," РАЗРЕШЕННЫЕ", "") + "
		|		Док.Ссылка Как Ссылка,
		|		Док.Дата
		|	ИЗ Документ."+ИмяМетаданных+" КАК Док
		|	Где Док.ссылка в  (&ДокументыТипа_"+ИмяМетаданных+")";
		УдалитьПовторяющиесяЭлементыМассива(КлючИЗначение.Значение);
		Запрос.УстановитьПараметр("ДокументыТипа_"+ИмяМетаданных, КлючИЗначение.Значение);
		
	КонецЦикла;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить(КолонкаДокумента, Выборка.Ссылка);
		
		НайденныеСтроки = Результат.НайтиСтроки(ПараметрыОтбора);
		Для Каждого строка ИЗ НайденныеСтроки Цикл
			строка[КолонкаСДатой] = Выборка.Дата;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры // ДобавитьДатуДокументаКРезультатуЗапроса()

///////////////////////////////////////////////////////////////////////////////
// Процедуры и функции работы с таблицами.

// Добавляет в таблицу значений строки из другой таблицы значений и
// в них значения колонок с совпадающими наименованиями.
//
// Параметры:
//  ТаблицаИсточник - таблица значений, откуда берутся значения.
//  ТаблицаПриемник - таблица значений, куда добавляются строки.
//
Процедура ЗагрузитьВТаблицуЗначений(ТаблицаИсточник, ТаблицаПриемник) Экспорт

	Для Каждого СтрокаТаблицыИсточника Из ТаблицаИсточник Цикл

		СтрокаТаблицыПриемника = ТаблицаПриемник.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыПриемника, СтрокаТаблицыИсточника);

	КонецЦикла;

КонецПроцедуры

Процедура УпорядочитьТаблицуПоДокументу(ТаблицаЗначений, КолонкаДокумента, КолонкаДаты, Направление = "Возр") Экспорт

	Если ТаблицаЗначений.Колонки.Найти(КолонкаДаты) = Неопределено Тогда
		ТаблицаЗначений.Колонки.Добавить(КолонкаДаты, ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповДаты(ЧастиДаты.ДатаВремя));
	КонецЕсли;
	
	Если ТаблицаЗначений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьДатуДокументаКРезультатуЗапроса(ТаблицаЗначений, КолонкаДокумента, КолонкаДаты);
	
	СписокКолонок = КолонкаДаты + " " + Направление + ", " + КолонкаДокумента + " " + Направление;
	ТаблицаЗначений.Сортировать(СписокКолонок, Новый СравнениеЗначений);
	
КонецПроцедуры

// Добавляет в таблицу значений колонку и заполняет ее переданным значением
//
// Параметры:
//  ТаблицаЗначений - ТаблицаЗначений - таблица значений, в которую необходимо добавить колонку
//  ИмяКолонки      - Строка          - имя добавляемой колонки
//  Значение        - Произвольный    - значение, которое необходимо заполнить в добавляемой колонке
//
Процедура ДобавитьКолонкуВТаблицуЗначений(ТаблицаЗначений, ИмяКолонки, Значение = Неопределено) Экспорт
	
	Если ТаблицаЗначений = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТаблицаЗначений.Колонки.Найти(ИмяКолонки) = Неопределено Тогда
		Если Значение = Неопределено Тогда 
			ТаблицаЗначений.Колонки.Добавить(ИмяКолонки);
		Иначе 
			ТаблицаЗначений.Колонки.Добавить(ИмяКолонки, Новый ОписаниеТипов(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТипЗнч(Значение))));
			ТаблицаЗначений.ЗаполнитьЗначения(Значение, ИмяКолонки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПронумероватьТаблицу(ТаблицаЗначений, ИмяКолонкиНомера = "НомерСтроки") Экспорт

	Если ТаблицаЗначений.Колонки.Найти(ИмяКолонкиНомера) = Неопределено Тогда
		ТаблицаЗначений.Колонки.Добавить(ИмяКолонкиНомера, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0)));
	КонецЕсли;

	Ном = 1;
	Для каждого СтрокаТаблицы Из ТаблицаЗначений Цикл
		СтрокаТаблицы[ИмяКолонкиНомера] = Ном;
		Ном = Ном + 1;
	КонецЦикла;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция ПроверитьНеобходимостьЗапускаСтартовогоПомощника() Экспорт 
	
	Если РольДоступна("ПолныеПрава") Тогда
		ОрганизацияСсылка = Справочники.Организации.НайтиПоНаименованию(НСтр("ru = 'Укажите наименование Вашей организации'"), Истина);
		Если НЕ ОрганизацияСсылка = Справочники.Организации.ПустаяСсылка() Тогда
			Наименование = СокрЛП(ОрганизацияСсылка.Наименование);
			Если Наименование = НСтр("ru = 'Укажите наименование Вашей организации'") Тогда
				
				КоличествоОрганизаций = 1;
				Запрос = Новый Запрос();
				Запрос.Текст = 
				"ВЫБРАТЬ 
				|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Организации.Ссылка) КАК КоличествоОрганизаций
				|ИЗ
				|	Справочник.Организации КАК Организации";
				Выборка = Запрос.Выполнить().Выбрать();
				Если Выборка.Следующий() Тогда
					КоличествоОрганизаций = Выборка.КоличествоОрганизаций;
				КонецЕсли;
				
				Если (КоличествоОрганизаций = 1) Тогда
					
					Возврат Истина;
					
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции 

// Функция используется только в форме справочника Пользователи.
// После встраивания подсистемы КонтактнаяИнформация из БСП функция будет удалена.
//
Функция СлужебныйАдресЭлектроннойПочтыПользователя(Знач Пользователь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КонтактнаяИнформация.Представление КАК АдресЭлектроннойПочты
	|ИЗ
	|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	КонтактнаяИнформация.Объект = &Объект
	|	И КонтактнаяИнформация.Тип = &Тип
	|	И КонтактнаяИнформация.Вид = &Вид";
	
	Запрос.УстановитьПараметр("Вид", Справочники.ВидыКонтактнойИнформации.СлужебныйАдресЭлектроннойПочтыПользователя);
	Запрос.УстановитьПараметр("Объект", Пользователь);
	Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		АдресЭлектроннойПочты = Выборка.АдресЭлектроннойПочты;
	Иначе
		АдресЭлектроннойПочты = Неопределено;
	КонецЕсли;
	
	Возврат АдресЭлектроннойПочты;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ДИНАМИЧЕСКИМИ СПИСКАМИ

// Возвращает отборы динамического списка как значения заполнения при программном вводе новой строки в список
//
// Параметры:
//  КомпоновщикНастроек  - КомпоновщикНастроекДинамическогоСписка - компоновщик настроек списка
//
// Возвращаемое значение:
//   Структура   - значения отборов для заполнения нового элемента списка
//
Функция ЗначенияЗаполненияДинамическогоСписка(Знач КомпоновщикНастроек) Экспорт
	
	ЗначенияЗаполнения = Новый Структура;
	
	НастройкиСписка = КомпоновщикНастроек.ПолучитьНастройки();
	ДобавитьЗначенияЗаполнения(НастройкиСписка.Отбор.Элементы, ЗначенияЗаполнения);
	
	Возврат ЗначенияЗаполнения;

КонецФункции 

Процедура ДобавитьЗначенияЗаполнения(КоллекцияОтборов, ЗначенияЗаполнения)

	Для каждого ЭлементОтбора Из КоллекцияОтборов Цикл
	
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") 
			И ЭлементОтбора.Использование 
			И ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда
			
			НаименованиеОтбора = Строка(ЭлементОтбора.ЛевоеЗначение);
			Если СтрНайти(НаименованиеОтбора, ".") = 0 Тогда
				ЗначенияЗаполнения.Вставить(НаименованиеОтбора, ЭлементОтбора.ПравоеЗначение);
			КонецЕсли;
		ИначеЕсли ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") 
			И ЭлементОтбора.Использование Тогда
		    ДобавитьЗначенияЗаполнения(ЭлементОтбора, ЗначенияЗаполнения);
		КонецЕсли;
	
	КонецЦикла;

КонецПроцедуры

// Проверяет, что включена ф.о "Использовать подключаемое оборудование" и авторизовался пользователь,
// а не внешний пользователь.
Функция ИспользоватьПодключаемоеОборудование() Экспорт
	
	Возврат ПолучитьФункциональнуюОпцию("ИспользоватьПодключаемоеОборудование") И ТипЗнч(Пользователи.АвторизованныйПользователь()) = Тип("СправочникСсылка.Пользователи");
	
КонецФункции

//Бучинский кибернетика 10 04 23 + отправляет расчетные листы сотрудникам
Процедура ОтправитьВсем(НаборПараметров) Экспорт
	Письмо		= Новый ИнтернетПочтовоеСообщение;
	Письмо.Тема = "Расчетный лист";
	Письмо.Тексты.Добавить("Расчетный лист на "+Формат(ТекущаяДата(), "ДФ='MMMM yyyy ''г.'''"));
	Письмо.Получатели.Добавить(НаборПараметров[1]);
	Письмо.Вложения.Добавить(Строка(КаталогВременныхФайлов()+НаборПараметров[0]+".xls"),Строка(НаборПараметров[0]));
	РаботаСПочтовымиСообщениями.ОтправитьПисьмо(Справочники.УчетныеЗаписиЭлектроннойПочты.СистемнаяУчетнаяЗаписьЭлектроннойПочты,Письмо);
КонецПроцедуры
