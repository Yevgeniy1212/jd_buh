
#Область ПрограммныйИнтерфейс

// Обработчик события вызывается при получении имени кассира.
//
// Параметры:
//  ИмяКассира - Строка, Неопределено - Текст, используемый для заполнения документа
//  СтандартнаяОбработка - Булево
//
Процедура ОбработкаЗаполненияИмяКассира(ИмяКассира, СтандартнаяОбработка) Экспорт
	
	ТипыОборудования = Новый Массив;
	
	ТипыОборудования.Добавить("ФискальныйРегистратор");
	
	Организация   = ОбщегоНазначенияБКВызовСервера.ОрганизацияПодключаемогоОборудованияПоУмолчанию(ТипыОборудования);
	ДанныеКассира = ОбщегоНазначенияБКВызовСервера.ДанныеФизЛицаТекущегоПользователя(Организация);
	
	Если ДанныеКассира.Представление <> Неопределено Тогда
		ИмяКассира = СокрЛП(СтрШаблон("%1 %2", Строка(ДанныеКассира.Должность), ДанныеКассира.Представление));
		СтандартнаяОбработка = Ложь;
	КонецЕсли;

КонецПроцедуры

// Обработчик события вызывается при получении ИНН кассира.
//
// Параметры:
//  ИННКассира - Строка, Неопределено - Текст, используемый для заполнения документа
//  СтандартнаяОбработка - Булево
//
Процедура ОбработкаЗаполненияИННКассира(ИННКассира, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры
// Функция возвращает поддерживаемые форматы ФФД в прикладном решении.
//
Функция ПолучитьПоддерживаемыйФорматыФФД() Экспорт
	
	ФорматыФФД = Новый СписокЗначений();
	ФорматыФФД.Добавить("1.0");
	ФорматыФФД.Добавить("1.0.5");
	ФорматыФФД.Добавить("1.1");
	Возврат ФорматыФФД;
	
КонецФункции

// Заполняет структуру параметров операции фискализации чека.
//
// Возвращаемое значение:
// 	Структура - Описание:
// * ДанныеКоррекции - Структура -:
// ** НомерПредписания 
// ** ДатаКоррекции 
// ** ОписаниеКоррекции 
// ** ТипКоррекции - Число -
// * НеприменениеККТ - Булево -
// * КорректируемыйДокумент 
// * ЕстьПерсональныеДанные - Булево -
// * ИндивидуальныйРежимПодготовкиДанныхКПередачеВОФД - Булево -
// * ДопустимоеРасхождениеФорматноЛогическогоКонтроля - Число -
// * СпособФорматноЛогическогоКонтроля - Неопределено -
// * СформироватьЧекКоррекции - Булево -
// * ДополнительныйРеквизитПользователя - Структура -:
// ** Значение 
// ** Наименование 
// * ДополнительныйРеквизит - Неопределено -
// * НефискальныеДокументы - Массив -
// * КассаККМ 
// * ШаблонЧека 
// * ТаблицаОплат - Массив -
// * ПозицииЧека - Массив -
// * КопийЧека - Число -
// * ТекстПодвала - Строка -
// * ТекстШапки - Строка -
// * ДатаВремя - Дата -
// * НомерСмены 
// * НомерЧека 
// * НомерКассы 
// * НаименованиеМагазина 
// * АдресМагазина 
// * ОрганизацияКПП 
// * ОрганизацияИНН 
// * ОрганизацияНазвание 
// * СерийныйНомер 
// * ПолучательИНН 
// * Получатель 
// * ДанныеПоставщика - Структура -:
// ** ИНН 
// ** Наименование 
// ** Телефон 
// * ДанныеАгента - Структура -:
// ** ОператорПоПриемуПлатежей - Структура -:
// *** Телефон - Неопределено -
// ** ОператорПеревода - Структура -:
// *** Телефон - Строка -
// *** Наименование - Строка -
// *** Адрес - Строка -
// *** ИНН - Строка -
// ** ПлатежныйАгент - Структура -:
// *** Операция - Строка -
// *** Телефон - Строка -
// * ПризнакАгента - Неопределено -
// * ПокупательНомер 
// * ПокупательEmail 
// * ОтправительEmail 
// * МестоРасчетов 
// * АдресРасчетов 
// * СистемаНалогообложения - ПеречислениеСсылка.ТипыСистемНалогообложенияККТ -
// * Отправляет1СEmail - Булево -
// * Отправляет1СSMS - Булево -
// * ТипРасчета - ПеречислениеСсылка.ТипыРасчетаДенежнымиСредствами -
// * Электронно - Булево -
// * ТорговыйОбъект - Неопределено -
// * Организация - Неопределено -
// * ИдентификаторФискальнойЗаписи - Неопределено -
// * ДокументОснование - Неопределено -
// * КассирИНН - Неопределено -
// * Кассир - Строка -
Функция ПараметрыОперацииФискализацииЧека() Экспорт;
	
	ПараметрыЧека = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперации();
	// Общие реквизиты для всех типов оборудования.
	ПараметрыЧека.Вставить("ДокументОснование" , Неопределено); // Ссылка,Обязательно. Документ по которому пробивается чек.
	ПараметрыЧека.Вставить("ИдентификаторФискальнойЗаписи", Неопределено); // Строка,Необязательно. Идентификатор фискальной записи. 
	ПараметрыЧека.Вставить("Организация"       , Неопределено); // Ссылка,Обязательно. Организация по которому пробивается чек.
	ПараметрыЧека.Вставить("ТорговыйОбъект"    , Неопределено); // Ссылка,Необязательно. Объект по которому пробивается чек.
	ПараметрыЧека.Вставить("Электронно"        , Ложь); // Булево,Обязательно - Чек будет предоставлен в электронной форме, без печати. Ложь-Значение по умолчанию.
	ПараметрыЧека.Вставить("ТипРасчета"        , ПредопределенноеЗначение("Перечисление.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств")); // Обязательно.
	ПараметрыЧека.Вставить("Отправляет1СSMS"   , Ложь); // Булево,Обязательно - SMS отправляет средствами 1C.   Ложь-Значение по умолчанию.
	ПараметрыЧека.Вставить("Отправляет1СEmail" , Ложь); // Булево,Обязательно - Email отправляет средствами 1C. Ложь-Значение по умолчанию.
	
	// Системы налогообложения - "Перечисление.ТипыСистемНалогообложенияККТ"
	ПараметрыЧека.Вставить("СистемаНалогообложения", ПредопределенноеЗначение("Перечисление.ТипыСистемНалогообложенияККТ.ОСН")); // Обязательно. Заполняется значением по умолчанию.  
	ПараметрыЧека.Вставить("АдресРасчетов"     ); // Строка,Необязательно - Адрес расчетов (Тег 1009).
	ПараметрыЧека.Вставить("МестоРасчетов"     ); // Строка,Необязательно - Место расчетов (Тег 1187).
	ПараметрыЧека.Вставить("ОтправительEmail"  ); // Строка,Необязательно - Адрес электронной почты отправителя чека (Тег 1117).
	ПараметрыЧека.Вставить("ПокупательEmail"   ); // Строка,Необязательно - Адрес электронной почты покупателя.
	ПараметрыЧека.Вставить("ПокупательНомер"   ); // Строка,Необязательно - Телефонный номер покупателя. В формате +{Ц}.
	
	// Признак агента - "Перечисление.ПризнакиАгента", (ФФД, Тег 1057, Расшифровка - таблица 10)
	ПараметрыЧека.Вставить("ПризнакАгента"     , Неопределено); // Перечисление - Признак агента (Тег 1057).
	ПараметрыЧека.Вставить("ДанныеАгента"      , МенеджерОборудованияКлиентСервер.ПараметрыДанныеАгента());     // Структура,Заполнение необязательно - Данные агента.
	ПараметрыЧека.Вставить("ДанныеПоставщика"  , МенеджерОборудованияКлиентСервер.ПараметрыДанныеПоставщика()); // Структура,Заполнение необязательно - Данные поставщика.
	
	// Реквизиты начиная с ФФД 1.1 (Введены приказом от 9 апреля 2018 г. N ММВ-7-20/207@)
	ПараметрыЧека.Вставить("Получатель"         );  // Строка,Необязательно - Получатель (покупатель)	
	ПараметрыЧека.Вставить("ПолучательИНН"      );  // Строка,Необязательно - ИНН получателя (ИНН покупателя)	
	
	// Параметры необходимые для ФР
	ПараметрыЧека.Вставить("СерийныйНомер"       ); // Строка,Необязательно - Заводской номер ККМ (совместимость с ФР).
	// Параметры необходимые для чека ЕНВД на принтере чеков
	ПараметрыЧека.Вставить("ОрганизацияНазвание" ); // Строка,Необязательно - Название организации (Для чека ЕНВД).
	ПараметрыЧека.Вставить("ОрганизацияИНН"      ); // Строка,Необязательно - ИНН организации (Для чека ЕНВД).
	ПараметрыЧека.Вставить("ОрганизацияКПП"      ); // Строка,Необязательно - КПП организации (Для чека ЕНВД).
	ПараметрыЧека.Вставить("АдресМагазина"       ); // Строка,Необязательно - Адрес магазина (Для чека ЕНВД).
	ПараметрыЧека.Вставить("НаименованиеМагазина"); // Строка,Необязательно - Наименование магазина (Для чека ЕНВД).
	ПараметрыЧека.Вставить("НомерКассы"          ); // Строка,Необязательно - Номер кассы (Для чека ЕНВД).
	ПараметрыЧека.Вставить("НомерЧека"           ); // Строка,Необязательно - Номер чека  (Для чека ЕНВД).
	ПараметрыЧека.Вставить("НомерСмены"          ); // Строка,Необязательно - Номер смены (Для чека ЕНВД).
	ПараметрыЧека.Вставить("ДатаВремя", ТекущаяДата()); // ДатаВремя, Необязательно - Дата время в чеке (Для чека ЕНВД).
	ПараметрыЧека.Вставить("ТекстШапки"   , НСтр("ru='ДОБРО ПОЖАЛОВАТЬ!'"));   // Строка - заполняется значением по умолчанию. 
	ПараметрыЧека.Вставить("ТекстПодвала" , НСтр("ru='СПАСИБО ЗА ПОКУПКУ!'")); // Строка - заполняется значением по умолчанию. 
	ПараметрыЧека.Вставить("КопийЧека"    , 1); // Число,Необязательно - Сколько печатать копий чеков ЕНВД на принтере чеков.

	// Позиции чека для фискализациию
	ПараметрыЧека.Вставить("ПозицииЧека"  , Новый Массив()); // Массив элементов "Структура". Обязательно.
	// Таблица оплаты чека
	ПараметрыЧека.Вставить("ТаблицаОплат" , Новый Массив()); // Массив элементов "Структура". Обязательно.
	// Пример заполнения строки оплаты:
	// СтрокаОплаты = Новый Структура();
	// СтрокаОплаты.Вставить("ТипОплаты", ПредопределенноеЗначение("Перечисление.ТипыОплатыККТ.Наличные")); // Наличные
	// СтрокаОплаты.Вставить("Сумма", СуммаВидаОплаты);
	// ПараметрыЧека.ТаблицаОплат.Добавить(СтрокаОплаты);
	
	// Параметры для печати чека по шаблону.
	ПараметрыЧека.Вставить("ШаблонЧека"            ); // Ссылка,Необязательно - Пользовательский шаблон для формирования чека.
	ПараметрыЧека.Вставить("КассаККМ"              ); // Ссылка,Необязательно - Касса ККМ. 
	ПараметрыЧека.Вставить("НефискальныеДокументы" , Новый Массив()); // Массив нефискальных документов. Необязательно.
	
	// Строка,Необязательно - Дополнительный реквизит чека (Тег 1192).
	ПараметрыЧека.Вставить("ДополнительныйРеквизит"  , Неопределено); 
	// Структура,Заполнение необязательно - дополнительный реквизит пользователя (Тег 1084).
	ПараметрыЧека.Вставить("ДополнительныйРеквизитПользователя", МенеджерОборудованияКлиентСервер.ПараметрыДополнительногоРеквизитаПользователя());
	
	ПараметрыЧека.Вставить("СформироватьЧекКоррекции", Ложь); // Булево,Необязательно - сформировать чек коррекции, только для ФФД 1.1.
	
	// Форматно-логический контроль - "ПеречислениеСсылка.СпособыФорматноЛогическогоКонтроля"
	ПараметрыЧека.Вставить("СпособФорматноЛогическогоКонтроля", Неопределено);     // Перечисление,Необязательно - Способ форматно-логического контроля. 
	ПараметрыЧека.Вставить("ДопустимоеРасхождениеФорматноЛогическогоКонтроля", 0.01); // Число,Необязательно - устанавливается значение по умолчанию. 
	ПараметрыЧека.Вставить("ИндивидуальныйРежимПодготовкиДанныхКПередачеВОФД", Ложь); // Булево,Необязательно - устанавливается значение по умолчанию. 
	ПараметрыЧека.Вставить("ЕстьПерсональныеДанные", Ложь); // Булево,Необязательно - Параметры чека содержат персональные данные.
	ПараметрыЧека.Вставить("СубъектПерсональныхДанных"); // Необязательно  - Физическое лицо, которое прямо или косвенно определено или определяемо с помощью персональных данных.
	
	ПараметрыЧека.Вставить("ЕдиныйЧек", Ложь);  // Булево,Необязательно - Одна фискальная операция привязана к нескольким документам.
	
	// Дополнительные параметры
	ПараметрыЧека.Вставить("СерияСвидетельстваПоНДС", Неопределено);
	ПараметрыЧека.Вставить("НомерСвидетельстваПоНДС", Неопределено);
	
	//Выбытие товаров ВС через чеки ККМ
	ПараметрыЧека.Вставить("ПолучательИИН");  // Строка,Необязательно - ИИН/БИН покупателя
	
	Возврат ПараметрыЧека;
	
КонецФункции

// Заполняет структуру параметров фискальной строки для фискализации чека.
//
// Возвращаемое значение:
// 	Структура - Описание:
// * Штрихкод 
// * НомерСекции - Число -
// * ДополнительныйРеквизит 
// * СуммаАкциза 
// * НомерТаможеннойДекларации 
// * КодСтраныПроисхожденияТовара 
// * ДанныеКодаТоварнойНоменклатуры - Структура -:
// ** КодКонтрольнойМарки 
// ** СерийныйНомер 
// ** ГлобальныйИдентификаторТорговойЕдиницы 
// ** КонтрольныйИдентификационныйЗнак 
// ** ТипМаркировки 
// * ЕдиницаИзмерения 
// * ДанныеПоставщика - Структура -:
// ** ИНН 
// ** Наименование 
// ** Телефон 
// * ДанныеАгента - Структура -:
// ** ОператорПоПриемуПлатежей - Структура -:
// *** Телефон - Неопределено -
// ** ОператорПеревода 
// ** ПлатежныйАгент 
// * ПризнакАгентаПоПредметуРасчета 
// * ПризнакПредметаРасчета - Неопределено -
// * ПризнакСпособаРасчета - Неопределено -
// * СуммаНДС - Неопределено -
// * СтавкаНДС - Неопределено -
// * СуммаСкидок 
// * Сумма - Число -
// * ЦенаСоСкидками - Число -
// * Цена - Число -
// * Количество - Число -
// * Наименование 
// * НомерСтрокиТовара 
// * ФискальнаяСтрока.
// 
Функция ПараметрыФискальнойСтрокиЧека() Экспорт;
	
	ПараметрыСтроки = Новый Структура();
	ПараметрыСтроки.Вставить("ФискальнаяСтрока");  // Строка,Обязательно - Тип строки. Исходящий служебный параметр. 
	ПараметрыСтроки.Вставить("НомерСтрокиТовара"); // Число,Обязательно  - Дополнительный параметр для обработки строк чека для форматно-логического контроля.
	// Обязательные реквизиты
	ПараметрыСтроки.Вставить("Наименование");        // Строка,Обязательно  - Наименование предмета расчета
	ПараметрыСтроки.Вставить("Количество"     , 0);  // Число,Обязательно   - Количество предмета расчета 
	ПараметрыСтроки.Вставить("Цена"           , 0);  // Число,Обязательно   - Цена без учета скидок и наценок (Необходимо для ФР и ФФД 1.0)
	ПараметрыСтроки.Вставить("ЦенаСоСкидками" , 0);  // Число,Обязательно   - Цена с учета скидок и наценок (Необходимо начиная с ФФД 1.0.5 и выше)
	ПараметрыСтроки.Вставить("Сумма"          , 0);  // Число,Обязательно   - Стоимость предмета расчета с учетом скидок и наценок
	ПараметрыСтроки.Вставить("СуммаСкидок");         // Число,Необязательно - Сумма скидок и наценок, не входит в ФФД.
	ПараметрыСтроки.Вставить("СтавкаНДС", Неопределено); // Число,Обязательно   - Ставка НДС (Значения: Неопределено-БезНДС, 0, 10, 18, 110, 118)
	ПараметрыСтроки.Вставить("СуммаНДС");            // Число,Необязательно - Сумма НДС
	
	// Реквизиты начиная с ФФД 1.0.5
	// Перечисление - ПризнакиСпособаРасчета - (ФФД, Тег 1214, Расшифровка - таблица 28)
	ПараметрыСтроки.Вставить("ПризнакСпособаРасчета", Неопределено); // Признак способа расчета. Обязательно для ФФД 1.0.5 и выше.
	                                         
	// Реквизиты начиная с ФФД 1.1
	// Перечисление - ПризнакиПредметаРасчета - (ФФД, Тег 1030, Расшифровка - таблица 29)
	ПараметрыСтроки.Вставить("ПризнакПредметаРасчета", Неопределено); // Признак предмета расчета. Обязательно для ФФД 1.1 и выше.
	
	// Перечисление - ПризнакиАгента - (ФФД, Тег 1222, Расшифровка - таблица 21)
	ПараметрыСтроки.Вставить("ПризнакАгентаПоПредметуРасчета");  // Необязательно, Признак агента по предмету расчета, Тег 1222.
	ПараметрыСтроки.Вставить("ДанныеАгента"     , МенеджерОборудованияКлиентСервер.ПараметрыДанныеАгента());     // Структура - Данные агента, Тег 1223. Заполнение необязательно.
	ПараметрыСтроки.Вставить("ДанныеПоставщика" , МенеджерОборудованияКлиентСервер.ПараметрыДанныеПоставщика()); // Структура - Данные агента, Тег 1224. Заполнение необязательно.
	
	ПараметрыСтроки.Вставить("ЕдиницаИзмерения");         // Необязательно, Единица измерения предмета расчета. 
	ПараметрыСтроки.Вставить("КодТоварнойНоменклатуры");  // Необязательно, Код товарной номенклатуры.
	ПараметрыСтроки.Вставить("ДанныеКодаТоварнойНоменклатуры", МенеджерОборудованияКлиентСервер.ПараметрыДанныеКодаТоварнойНоменклатуры());  // Коды товарной номенклатуры.
	
	// Реквизиты начиная с ФФД 1.1 (Введены приказом от 9 апреля 2018 г. N ММВ-7-20/207@)
	ПараметрыСтроки.Вставить("КодСтраныПроисхожденияТовара"); // Строка,Необязательно - Цифровой код страны происхождения товара в соответствии с Общероссийским классификатором стран мира.
	ПараметрыСтроки.Вставить("НомерТаможеннойДекларации");    // Строка,Необязательно - Регистрационный номер таможенной декларации.
	ПараметрыСтроки.Вставить("СуммаАкциза");                  // Число,Необязательно  - Сумма акциза, включенная в стоимость предмета расчета.
	
	ПараметрыСтроки.Вставить("ДополнительныйРеквизит"); // Строка,Необязательно - Дополнительный реквизит предмета расчета, Тег 1191.
	
	// Дополнительные реквизиты не входящие в ФФД.
	ПараметрыСтроки.Вставить("НомерСекции" , 0);   // Число,Необязательно  - Номер секции ФР (для совместимости), 0-Значение по умолчанию.
	ПараметрыСтроки.Вставить("Штрихкод");          // Строка,Необязательно - Штрихкод
	
	//Дополнительные ревизиты по единицам измерения
	ПараметрыСтроки.Вставить("КодЕдиницыИзмерения");          // Необязательно, Единица измерения код. 
	ПараметрыСтроки.Вставить("НаименованиеЕдиницыИзмерения"); // Необязательно, Единица измерения наименование. 
	
	ПараметрыСтроки.Вставить("ОсвобожденныйОборотНДС", Ложь); // Булево,Необязательно - Для освобожденного оборота по НДС
	//Выбытие товаров ВС через чеки ККМ
	ПараметрыСтроки.Вставить("ТоварВС", Ложь); // Булево,Необязательно - определяет, является ли товаром модуля Виртуальный склад ИС ЭСФ.
	ПараметрыСтроки.Вставить("GTIN", ""); // Строка,Необязательно - штрих-код GTIN (Обязательно для товаров ВС, если не задано поле ИдентификаторВС).
	ПараметрыСтроки.Вставить("ИдентификаторВС", 0); // Число,Необязательно - Сквозной идентификатор товара ВС (Обязательно для товаров ВС, если не задано поле GTIN).
	
	Возврат ПараметрыСтроки; 
	
КонецФункции

// Функция формирует текст нефискального документа по шаблону.
//
Функция СформироватьТекстНефискальногоДокумента(ТипДокумента, ОбщиеПараметры, ШиринаСтроки = 32, ДополнительныйТекст = Неопределено, ФорматФФД = "1.1") Экспорт
	
	ПозицииЧека  = ?(ОбщиеПараметры.Свойство("ПозицииЧека"), ОбщиеПараметры.ПозицииЧека, Неопределено);
	ТаблицаОплат = ?(ОбщиеПараметры.Свойство("ТаблицаОплат"), ОбщиеПараметры.ТаблицаОплат, Неопределено);
	
	Если ТипДокумента = 0 Тогда
		ТипыЧеков = Новый Соответствие();
		ТипыЧеков.Вставить(1, НСтр("ru='ПРИХОД'"));          // Чек продажи     
		ТипыЧеков.Вставить(2, НСтр("ru='ВОЗВРАТ ПРИХОДА'")); // Чек возврата продажи 
		ТипыЧеков.Вставить(3, НСтр("ru='РАСХОД'"));          // Чек покупки 
		ТипыЧеков.Вставить(4, НСтр("ru='ВОЗВРАТ РАСХОДА'")); // Чек возврата покупки 
		ТипЧека = ТипыЧеков.Получить(МенеджерОборудованияКлиентСервер.КодРасчетаДенежнымиСредствами(ОбщиеПараметры.ТипРасчета))
	ИначеЕсли ТипДокумента = 1 Тогда
		ТипЧека = НСтр("ru='ОТКРЫТИЕ СМЕНЫ'");  
	ИначеЕсли ТипДокумента = 2 Тогда
		ТипЧека = НСтр("ru='ВНЕСЕНИЕ'");  
	ИначеЕсли ТипДокумента = 3 Тогда
		ТипЧека = НСтр("ru='ВЫЕМКА'");  
	ИначеЕсли ТипДокумента = 4 Тогда
		ТипЧека = НСтр("ru='ОТЧЕТ БЕЗ ГАШЕНИЯ'");   
	ИначеЕсли ТипДокумента = 5 Тогда
		ТипЧека = НСтр("ru='ОТЧЕТ С ГАШЕНИЕМ'");  
	КонецЕсли;
	
	ПечатьКлише = Истина;
	
	Разделитель = ПостроитьПоле("", ШиринаСтроки, "=") + Символы.ПС;
	РазделительВнут = ПостроитьПоле("", ШиринаСтроки, "-") + Символы.ПС;
	
	Текст = Разделитель;
	
	Если ПечатьКлише Тогда 
		// Сформировать шапку чека.
		Если ОбщиеПараметры.Свойство("ОрганизацияНазвание") И НЕ ПустаяСтрока(ОбщиеПараметры.ОрганизацияНазвание) Тогда
			Текст = Текст + ПостроитьПолеПереносом(ОбщиеПараметры.ОрганизацияНазвание, ШиринаСтроки, , Истина) + Символы.ПС;
		КонецЕсли;
		
		Если ОбщиеПараметры.Свойство("АдресРасчетов") Тогда
			АдресРасчетов = ОбщиеПараметры.АдресРасчетов;
			Если НЕ ПустаяСтрока(АдресРасчетов) Тогда
				Текст = Текст + ПостроитьПолеПереносом(АдресРасчетов, ШиринаСтроки, , Истина) + Символы.ПС;
				Если ОбщиеПараметры.Свойство("МестоРасчетов") И НЕ ПустаяСтрока(ОбщиеПараметры.МестоРасчетов) Тогда
					Текст = Текст + ПостроитьПолеПереносом(ОбщиеПараметры.МестоРасчетов, ШиринаСтроки, , Истина) + Символы.ПС;
				КонецЕсли;
			ИначеЕсли ОбщиеПараметры.Свойство("АдресМагазина") И НЕ ПустаяСтрока(ОбщиеПараметры.АдресМагазина) Тогда
				Текст = Текст + ПостроитьПолеПереносом(ОбщиеПараметры.АдресМагазина, ШиринаСтроки) + Символы.ПС;
			КонецЕсли;
		КонецЕсли;
			
		Если ОбщиеПараметры.Свойство("ТекстШапки") И НЕ ПустаяСтрока(ОбщиеПараметры.ТекстШапки) Тогда
			Текст = Текст + ВыстроитьПоля(ОбщиеПараметры.ТекстШапки, , ШиринаСтроки) + Символы.ПС;
		КонецЕсли;
		
		Если ТипДокумента = 0 Тогда 
			Текст = Текст +  ВыстроитьПоля(НСтр("ru='КАССОВЫЙ ЧЕК'"), , ШиринаСтроки) + Символы.ПС;
		КонецЕсли;
		
		ОрганизацияИНН = ?(ОбщиеПараметры.Свойство("ОрганизацияИНН") И НЕ ПустаяСтрока(ОбщиеПараметры.ОрганизацияИНН), 
			НСтр("ru='ИИН/БИН'") + Символы.НПП + ОбщиеПараметры.ОрганизацияИНН, "");
			
		НомерЧека = ?(ОбщиеПараметры.Свойство("НомерЧека") И НЕ ПустаяСтрока(ОбщиеПараметры.НомерЧека),
			НСтр("ru='ЧЕК №'") + ОбщиеПараметры.НомерЧека, "");
			
		Если Не ПустаяСтрока(ОрганизацияИНН) Тогда
			Текст = Текст + ВыстроитьПоля(ТипЧека, ОрганизацияИНН, ШиринаСтроки) + Символы.ПС;
		Иначе
			Текст = Текст + ПостроитьПоле(ТипЧека, ШиринаСтроки) + Символы.ПС;
		КонецЕсли;
		
		ДатаВремя = ?(ОбщиеПараметры.Свойство("ДатаВремя") И НЕ ПустаяСтрока(ОбщиеПараметры.ДатаВремя), ОбщиеПараметры.ДатаВремя, ТекущаяДата());
		ДатаВремя = Формат(ДатаВремя, "ДФ=""дд.ММ.гггг ЧЧ:мм""");
		Текст = Текст + ВыстроитьПоля(НомерЧека, ДатаВремя, ШиринаСтроки) + Символы.ПС;
		
		Текст = Текст + РазделительВнут;
		
		ПолучательИИН = ?(ОбщиеПараметры.Свойство("ПолучательИИН") И НЕ ПустаяСтрока(ОбщиеПараметры.ПолучательИИН), 
			ОбщиеПараметры.ПолучательИИН, "");
		Если Не ПустаяСтрока(ПолучательИИН) Тогда
			Текст = Текст + ВыстроитьПоля(НСтр("ru='ИИН/БИН покупателя: '"), ПолучательИИН, ШиринаСтроки) + Символы.ПС;
			Текст = Текст + РазделительВнут;
		КонецЕсли;
		
	КонецЕсли;
	
	ФорматЧисла = "ЧРД=.;ЧЦ=12;ЧДЦ=2;ЧН=0.00;ЧГ=0";
	СуммаЧека   = 0;
	СуммаНДС0   = 0;
	СуммаНДС10  = 0;
	СуммаНДС18  = 0;
	СуммаНДС110 = 0;
	СуммаНДС118 = 0;
	СуммаБезНДС = 0;
	СуммаНДС12  = 0;
	СуммаНДС8   = 0;
	
	СуммаНДСИтого = 0;
	
	// Формируем строки чека.
	Если ПозицииЧека <> Неопределено Тогда
		
		Для ИндексМассива = 0 По ПозицииЧека.Количество() - 1 Цикл
			
			ПозицияЧека = ПозицииЧека[ИндексМассива];
			
			Если ПозицияЧека.Свойство("ФискальнаяСтрока") Тогда
				
				Наименование = ?(ПозицияЧека.Свойство("Наименование"), ПозицияЧека.Наименование, "");
				Количество   = ?(ПозицияЧека.Свойство("Количество")  , ПозицияЧека.Количество  , 1);
				Цена         = ?(ПозицияЧека.Свойство("Цена")        , ПозицияЧека.Цена        , 0);
				Сумма        = ?(ПозицияЧека.Свойство("Сумма")       , ПозицияЧека.Сумма       , 0);
				НомерСекции  = ?(ПозицияЧека.Свойство("НомерСекции") , ПозицияЧека.НомерСекции , 0);
				СтавкаНДС    = ?(ПозицияЧека.Свойство("СтавкаНДС")   , ПозицияЧека.СтавкаНДС   , 0);
				СуммаСкидок  = ?(ПозицияЧека.Свойство("СуммаСкидок") , ?(ПустаяСтрока(ПозицияЧека.СуммаСкидок), 0, ПозицияЧека.СуммаСкидок), 0);
				СуммаНДС     = ?(ПозицияЧека.Свойство("СуммаНДС")    , ПозицияЧека.СуммаНДС    , 0);
				
				ОсвобожденныйОборотНДС = ?(ПозицияЧека.Свойство("ОсвобожденныйОборотНДС"), ПозицияЧека.ОсвобожденныйОборотНДС, Ложь);
				
				Если ПозицияЧека.Свойство("ПризнакСпособаРасчета") И НЕ ПустаяСтрока(ПозицияЧека.ПризнакСпособаРасчета) И ФорматФФД = "1.0" Тогда
					Если НЕ ПозицияЧека.ПризнакСпособаРасчета = ПредопределенноеЗначение("Перечисление.ПризнакиСпособаРасчета.ПередачаСПолнойОплатой") Тогда // Не отображаем для полной оплаты.
						Наименование = МенеджерОборудованияКлиентСервер.ПризнакСпособаРасчетаПоКоду(ПозицияЧека.ПризнакСпособаРасчета) + " " + Наименование;
					КонецЕсли;
				КонецЕсли;
				
				ТекстСтроки  = ПостроитьПолеПереносом(Наименование, ШиринаСтроки) + Символы.ПС;
				ЦенаДляПечати = Окр(Сумма / Количество , 2);
				
				НаименованиеЕдиницыИзмерения = "";
				Если ПозицияЧека.Свойство("НаименованиеЕдиницыИзмерения") И ЗначениеЗаполнено(ПозицияЧека.НаименованиеЕдиницыИзмерения) Тогда
					НаименованиеЕдиницыИзмерения = " " + ПозицияЧека.НаименованиеЕдиницыИзмерения;
				КонецЕсли;
				
				СтрокаТовара = Формат(Количество, "ЧРД=.;ЧЦ=12;ЧДЦ=3;ЧН=0.000;ЧГ=0") + НаименованиеЕдиницыИзмерения + " х " 
					+ Формат(ЦенаДляПечати, ФорматЧисла) + " =" + Формат(Сумма, ФорматЧисла);
				ТекстСтроки = ТекстСтроки + ВыстроитьПоля( , СтрокаТовара, ШиринаСтроки) + Символы.ПС;
				
				Если СуммаСкидок > 0 Тогда
					ТекстСкидки = НСтр("ru='СКИДКА'") + "=" + Формат(СуммаСкидок, ФорматЧисла);
				ИначеЕсли СуммаСкидок < 0 Тогда
					ТекстСкидки = НСтр("ru='НАДБАВКА'") + "=" + Формат(СуммаСкидок, ФорматЧисла);
				Иначе
					ТекстСкидки = "";
				КонецЕсли;
				
				ТекстНалога = "";
				Если ПозицияЧека.Свойство("СтавкаНДС") Тогда
					Если СтавкаНДС <> Неопределено Тогда
						Если ОсвобожденныйОборотНДС Тогда
							ТекстНалога = НСтр("ru='БЕЗ НДС'");
						Иначе
							ТекстНалога = НСтр("ru='НДС '") + ПозицияЧека.СтавкаНДС + "%" + " =" + Формат(СуммаНДС, ФорматЧисла);
							СуммаНДСИтого = СуммаНДСИтого + СуммаНДС;
						КонецЕсли;
					Иначе 
						ТекстНалога = НСтр("ru='БЕЗ НДС'");
					КонецЕсли;
				КонецЕсли;
				
				Если ПустаяСтрока(ТекстСкидки) Тогда
					ТекстСтроки = ТекстСтроки + ВыстроитьПоля(, ТекстНалога, ШиринаСтроки) + Символы.ПС;
				Иначе
					ТекстСтроки = ТекстСтроки + ВыстроитьПоля(" " + ТекстНалога, ТекстСкидки, ШиринаСтроки) + Символы.ПС;
				КонецЕсли;
				Текст = Текст + ТекстСтроки; 
				
				Если ПозицияЧека.Свойство("ПризнакПредметаРасчета") И НЕ ПустаяСтрока(ПозицияЧека.ПризнакПредметаРасчета) И ФорматФФД = "1.1" Тогда
					ПризнакПредметаРасчета = МенеджерОборудованияКлиентСервер.КодПризнакаПредметаРасчета(ПозицияЧека.ПризнакПредметаРасчета);
					ПризнакПредметаРасчетаНаименование = МенеджерОборудованияКлиентСервер.ПолучитьНаименованиеПризнакаПредметаРасчета(ПризнакПредметаРасчета);
					Текст = Текст + ПостроитьПоле(" " + ПризнакПредметаРасчетаНаименование, ШиринаСтроки) + Символы.ПС;
				КонецЕсли;
				
				Если ПозицияЧека.Свойство("ПризнакСпособаРасчета") И НЕ ПустаяСтрока(ПозицияЧека.ПризнакСпособаРасчета) И ФорматФФД <> "1.0" Тогда
					ПризнакСпособаРасчета = МенеджерОборудованияКлиентСервер.ПризнакСпособаРасчетаПоКоду(ПозицияЧека.ПризнакСпособаРасчета);
					ПризнакСпособаРасчетаНаименование = МенеджерОборудованияКлиентСервер.НаименованиеПризнакаСпособаРасчета(ПризнакСпособаРасчета);
					Текст = Текст + ПостроитьПоле(" " + ПризнакСпособаРасчетаНаименование, ШиринаСтроки) + Символы.ПС;
				КонецЕсли;
				
				СуммаЧека = СуммаЧека + Сумма;
			ИначеЕсли ПозицияЧека.Свойство("ТекстоваяСтрока") Тогда
				ТекстСтроки = ?(ПозицияЧека.Свойство("Текст"), ПозицияЧека.Текст, "");
				Текст = Текст + ТекстСтроки + Символы.ПС;
			ИначеЕсли ПозицияЧека.Свойство("ШтрихКод") Тогда
				СтрокаШтрихкода = "|ШтрихКод|" + ПозицияЧека.ТипШтрихкода + "|" + ПозицияЧека.ШтрихКод; 
				Текст = Текст + СтрокаШтрихкода + Символы.ПС; 
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Формируем подвал чека
	Если ТаблицаОплат <> Неопределено Тогда
		
		СуммаНаличными       = 0;
		СуммаЭлектронными    = 0;
		СуммаМобильный       = 0;
		СуммаПостоплатой     = 0;
		СуммаПредоплатой     = 0;
		СуммаПредоставлением = 0;
		Для ИндексОплаты = 0 По ТаблицаОплат.Количество() - 1 Цикл
			Если ТаблицаОплат[ИндексОплаты].ТипОплаты = ПредопределенноеЗначение("Перечисление.ТипыОплатыККТ.Электронно") Тогда
				СуммаЭлектронными = СуммаЭлектронными + ТаблицаОплат[ИндексОплаты].Сумма;
			ИначеЕсли ТаблицаОплат[ИндексОплаты].ТипОплаты = ПредопределенноеЗначение("Перечисление.ТипыОплатыККТ.МобильныйПлатеж") Тогда
				СуммаМобильный = СуммаМобильный + ТаблицаОплат[ИндексОплаты].Сумма;
			ИначеЕсли ТаблицаОплат[ИндексОплаты].ТипОплаты = ПредопределенноеЗначение("Перечисление.ТипыОплатыККТ.Предоплата") Тогда
				СуммаПредоплатой = СуммаПредоплатой + ТаблицаОплат[ИндексОплаты].Сумма;
			ИначеЕсли ТаблицаОплат[ИндексОплаты].ТипОплаты = ПредопределенноеЗначение("Перечисление.ТипыОплатыККТ.Постоплата") Тогда
				СуммаПостоплатой = СуммаПостоплатой + ТаблицаОплат[ИндексОплаты].Сумма;
			ИначеЕсли ТаблицаОплат[ИндексОплаты].ТипОплаты = ПредопределенноеЗначение("Перечисление.ТипыОплатыККТ.ВстречноеПредоставление") Тогда
				СуммаПредоставлением = СуммаПредоставлением + ТаблицаОплат[ИндексОплаты].Сумма;
			Иначе
				СуммаНаличными = СуммаНаличными + ТаблицаОплат[ИндексОплаты].Сумма;
			КонецЕсли;
		КонецЦикла;
		
		СуммаОплаты = СуммаНаличными + СуммаЭлектронными + СуммаМобильный + СуммаПостоплатой + СуммаПредоплатой + СуммаПредоставлением;
	
		Текст = Текст + РазделительВнут;
		Текст = Текст + ВыстроитьПоля(НСтр("ru='ИТОГ'"), "=" + Формат(СуммаЧека, ФорматЧисла), ШиринаСтроки) + Символы.ПС;
		Текст = Текст + РазделительВнут;
		
		Текст = Текст + НСтр("ru='ОПЛАТА'") + Символы.ПС;
		
		Если ФорматФФД = "1.0" Тогда // ФФД 1.0
			Если СуммаНаличными > 0 Тогда
				Текст = Текст + ВыстроитьПоля(" " + НСтр("ru='НАЛИЧНЫМИ'"), "=" + Формат(СуммаНаличными, ФорматЧисла), ШиринаСтроки) + Символы.ПС;
			КонецЕсли;
			Если СуммаЭлектронными > 0 Тогда
				Текст = Текст + ВыстроитьПоля(" " + НСтр("ru='ЭЛЕКТРОННЫМИ'"), "=" + Формат(СуммаЭлектронными, ФорматЧисла), ШиринаСтроки) + Символы.ПС;
			КонецЕсли;
			Если СуммаМобильный > 0 Тогда
				Текст = Текст + ВыстроитьПоля(" " + НСтр("ru='МОБИЛЬНЫЙ'"), "=" + Формат(СуммаМобильный, ФорматЧисла), ШиринаСтроки) + Символы.ПС;
			КонецЕсли;
			Если СуммаПостоплатой > 0 Тогда
				Текст = Текст + ВыстроитьПоля(" " + НСтр("ru='ЭЛЕКТРОННЫМИ'"), "=" + Формат(СуммаПостоплатой, ФорматЧисла), ШиринаСтроки) + Символы.ПС;
			КонецЕсли;
			Если СуммаПредоплатой > 0 Тогда
				Текст = Текст + ВыстроитьПоля(" " + НСтр("ru='ЭЛЕКТРОННЫМИ'"), "=" + Формат(СуммаПредоплатой, ФорматЧисла), ШиринаСтроки) + Символы.ПС;
			КонецЕсли;          
			Если СуммаПредоставлением > 0 Тогда
				Текст = Текст + ВыстроитьПоля(" " + НСтр("ru='ЭЛЕКТРОННЫМИ'"), "=" + Формат(СуммаПредоставлением, ФорматЧисла), ШиринаСтроки) + Символы.ПС;
			КонецЕсли;          
		Иначе // ФФД 1.0.5 & ФФД 1.1
			Если СуммаНаличными > 0 Тогда
				Текст = Текст + ВыстроитьПоля(" " + НСтр("ru='НАЛИЧНЫМИ'"), "=" + Формат(СуммаНаличными, ФорматЧисла), ШиринаСтроки) + Символы.ПС;
			КонецЕсли;
			Если СуммаЭлектронными > 0 Тогда
				Текст = Текст + ВыстроитьПоля(" " + НСтр("ru='ЭЛЕКТРОННЫМИ'"), "=" + Формат(СуммаЭлектронными, ФорматЧисла), ШиринаСтроки) + Символы.ПС;
			КонецЕсли;
			Если СуммаМобильный > 0 Тогда
				Текст = Текст + ВыстроитьПоля(" " + НСтр("ru='МОБИЛЬНЫЙ'"), "=" + Формат(СуммаМобильный, ФорматЧисла), ШиринаСтроки) + Символы.ПС;
			КонецЕсли;
			Если СуммаПостоплатой > 0 Тогда
				Текст = Текст + ВыстроитьПоля(" " + НСтр("ru='ПОСТОПЛАТОЙ'"), "=" + Формат(СуммаПостоплатой, ФорматЧисла), ШиринаСтроки) + Символы.ПС;
			КонецЕсли;
			Если СуммаПредоплатой > 0 Тогда
				Текст = Текст + ВыстроитьПоля(" " + НСтр("ru='ЗАЧЕТ АВАНСА'"), "=" + Формат(СуммаПредоплатой, ФорматЧисла), ШиринаСтроки) + Символы.ПС;
			КонецЕсли;          
			Если СуммаПредоставлением > 0 Тогда
				Текст = Текст + ВыстроитьПоля(" " + НСтр("ru='ВСТР.ПРЕДОСТ.'"), "=" + Формат(СуммаПредоставлением, ФорматЧисла), ШиринаСтроки) + Символы.ПС;
			КонецЕсли;          
		КонецЕсли; 
		
		Текст = Текст + ВыстроитьПоля(НСтр("ru='ПОЛУЧЕНО'"), "=" + Формат(СуммаОплаты, ФорматЧисла), ШиринаСтроки) + Символы.ПС;
		Текст = Текст + ВыстроитьПоля(" " + НСтр("ru='СДАЧА'"), "=" + Формат(СуммаОплаты - СуммаЧека, ФорматЧисла), ШиринаСтроки) + Символы.ПС;
		
		Если Ложь Тогда //ОтключенныйФункционал
			Если ОбщиеПараметры.Свойство("СистемаНалогообложения") Тогда
				СистемаНалогообложенияКод = МенеджерОборудованияКлиентСервер.КодСистемыНалогообложенияККТ(ОбщиеПараметры.СистемаНалогообложения);
				СистемаНалогообложения = МенеджерОборудованияКлиентСервер.НаименованиеСистемыНалогообложения(СистемаНалогообложенияКод, Истина);
				Текст = Текст + ВыстроитьПоля(НСтр("ru='СНО:'"), СистемаНалогообложения, ШиринаСтроки) + Символы.ПС;
			КонецЕсли;          
			
			Если СуммаБезНДС > 0 Тогда
				Текст = Текст + ВыстроитьПоля(НСтр("ru=' СУММА БЕЗ НДС'"), "=" + Формат(СуммаБезНДС, ФорматЧисла), ШиринаСтроки) + Символы.ПС;
			КонецЕсли;
			Если СуммаНДС0 > 0 Тогда
				Текст = Текст + ВыстроитьПоля(НСтр("ru=' СУММА C НДС 0%'")  , "=" + Формат(СуммаНДС0, ФорматЧисла), ШиринаСтроки) + Символы.ПС;
			КонецЕсли;
			Если СуммаНДС10 > 0 Тогда
				Текст = Текст + ВыстроитьПоля(НСтр("ru=' СУММА НДС 10%'"), "=" + Формат(СуммаНДС10 / 110 * 10, ФорматЧисла), ШиринаСтроки) + Символы.ПС;
			КонецЕсли;
			Если СуммаНДС18 > 0 Тогда
				Текст = Текст + ВыстроитьПоля(НСтр("ru=' СУММА НДС 18%'"), "=" + Формат(СуммаНДС18 / 118 * 18, ФорматЧисла), ШиринаСтроки) + Символы.ПС;
			КонецЕсли;
			Если СуммаНДС110 > 0 Тогда
				Текст = Текст + ВыстроитьПоля(НСтр("ru=' СУММА НДС 10/110%'"), "=" + Формат(СуммаНДС110 / 110 * 10, ФорматЧисла), ШиринаСтроки) + Символы.ПС;
			КонецЕсли;
			Если СуммаНДС118 > 0 Тогда
				Текст = Текст + ВыстроитьПоля(НСтр("ru=' СУММА НДС 18/118%'"), "=" + Формат(СуммаНДС118 / 118 * 18, ФорматЧисла), ШиринаСтроки) + Символы.ПС;
			КонецЕсли;
		КонецЕсли;
	
		Текст = Текст + ВыстроитьПоля(НСтр("ru='СУММА НДС'"), "=" + Формат(СуммаНДСИтого, ФорматЧисла), ШиринаСтроки) + Символы.ПС;
	
		Кассир = ?(ОбщиеПараметры.Свойство("Кассир"), ОбщиеПараметры.Кассир, "");
		Текст = Текст + ПостроитьПоле(НСтр("ru='КАССИР'") + ":" + Символы.НПП + Кассир, ШиринаСтроки) + Символы.ПС + Символы.ПС;                        
		Текст = Текст + ПостроитьПоле(НСтр("ru='ПОДПИСЬ'") + ":", ШиринаСтроки, "_") + Символы.ПС;
		
		Если ОбщиеПараметры.Свойство("ТекстПодвала") И НЕ ПустаяСтрока(ОбщиеПараметры.ТекстПодвала) Тогда
			Текст = Текст + ВыстроитьПоля(ОбщиеПараметры.ТекстПодвала, , ШиринаСтроки) + Символы.ПС;
		КонецЕсли;
	
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ДополнительныйТекст) Тогда
		Текст = Текст + ДополнительныйТекст + Символы.ПС;
	КонецЕсли;
	
	Текст = Текст + Разделитель + Символы.ПС;
	
	Возврат Текст;
	
КонецФункции

// Функция формирует текст нефискального чека по шаблону.
//
Функция СформироватьТекстНефискальногоЧека(ОбщиеПараметры, ШиринаСтроки = 32, ФорматФФД = "1.1") Экспорт
	
	Возврат СформироватьТекстНефискальногоДокумента(0, ОбщиеПараметры, ШиринаСтроки, , ФорматФФД);
	
КонецФункции

// Выстраивает строку по длине поля, если поле длинное - переносит на следующую строку.
//
Функция ПостроитьПолеПереносом(Знач Текст, Знач ДлинаПоля, ДобСимвол = "", ПоЦентру = Ложь) Экспорт
	
	ДобСимвол = ?(ПустаяСтрока(ДобСимвол), " ", ДобСимвол);
	
	Если СтрДлина(Текст) > ДлинаПоля Тогда 
		ТекстПолный = "";
		Пока СтрДлина(Текст) > ДлинаПоля Цикл
			ТекстПолный = ТекстПолный + ?(ПустаяСтрока(ТекстПолный), "", Символы.ПС) +  Лев(Текст, ДлинаПоля);
			Текст = Сред(Текст, ДлинаПоля + 1);
		КонецЦикла;
		ТекстПолный = ТекстПолный + ?(ПустаяСтрока(Текст), "", Символы.ПС + Текст);
	Иначе
		Если ПоЦентру Тогда
			ТекстПолный = Текст;
			ДобавлятьСправа = Истина; 
			Пока СтрДлина(ТекстПолный) < ДлинаПоля Цикл
				Если ДобавлятьСправа Тогда
					ТекстПолный = ТекстПолный + ДобСимвол;
				Иначе
					ТекстПолный = ДобСимвол + ТекстПолный;
				КонецЕсли;
				ДобавлятьСправа = Не ДобавлятьСправа;
			КонецЦикла;
		Иначе
			ТекстПолный = Текст;
		КонецЕсли;
	КонецЕсли;
		
	Возврат ТекстПолный;
	
КонецФункции

// Обрезает передаваемую строку по длине поля, если поле слишком короткое - дополняет символами.
//
Функция ПостроитьПоле(Знач Текст, Знач ДлинаПоля, ДобСимвол = "", ДобавлятьСправа = Истина) Экспорт
	
	ДобСимвол = ?(ПустаяСтрока(ДобСимвол), " ", ДобСимвол);
	
	ТекстПолный = Лев(Текст, ДлинаПоля);
	Пока СтрДлина(ТекстПолный) < ДлинаПоля Цикл
		Если ДобавлятьСправа Тогда
			ТекстПолный = ТекстПолный + ДобСимвол;
		Иначе
			ТекстПолный = ДобСимвол + ТекстПолный;
		КонецЕсли;
	КонецЦикла;
	          
	Возврат ТекстПолный;
	
КонецФункции

// Формирует строку из двух полей, если передается одно поле дополняет символами до нужного размера.
//
Функция ВыстроитьПоля(Знач Текст1, Знач Текст2 = "", Знач ДлинаПоля) Экспорт
	
	Если ПустаяСтрока(Текст2) Тогда
		ТекстПолный = ПостроитьПоле(Текст1, СтрДлина(Текст1) + Цел((ДлинаПоля - СтрДлина(Текст1))/2), , Ложь);
		ТекстПолный = ПостроитьПоле(ТекстПолный, ДлинаПоля);
	ИначеЕсли СтрДлина(Текст1) + СтрДлина(Текст2) < ДлинаПоля Тогда
		ТекстПолный = ПостроитьПоле(Текст1, ДлинаПоля - СтрДлина(Текст2)) + Текст2;
	Иначе
		ТекстПолный = ПостроитьПоле(Текст1, ДлинаПоля) + Символы.ПС + ПостроитьПоле(Текст2, ДлинаПоля, ,Ложь)
	КонецЕсли;
	
	Возврат ТекстПолный;
	
КонецФункции

//  Выравнить передаваемую строку по длине поля, если поле слишком короткое - дополняет символами.
//
Функция ВыравнитьПоле(Знач Текст, Знач ДлинаПоля = 32, Знач Выравнивание = "Лево", ДобСимвол = "") Экспорт
	
	ДобСимвол = ?(ПустаяСтрока(ДобСимвол), " ", ДобСимвол);
	НачПозиция = Истина;
	ТекстПолный = Лев(Текст, ДлинаПоля);
	Пока СтрДлина(ТекстПолный) < ДлинаПоля Цикл
		Если Выравнивание = "Лево" Тогда
			ТекстПолный = ТекстПолный + ДобСимвол;
		ИначеЕсли Выравнивание = "Право" Тогда
			ТекстПолный = ДобСимвол + ТекстПолный;
		Иначе
			Если НачПозиция Тогда
				ТекстПолный = ТекстПолный + ДобСимвол;
				НачПозиция = Ложь;
			Иначе
				ТекстПолный = ДобСимвол + ТекстПолный;
				НачПозиция = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	          
	Возврат ТекстПолный;
	
КонецФункции


#КонецОбласти