////////////////////////////////////////////////////////////////////////////////
// ПоступлениеТоваровУслугФормы: серверные процедуры и функции, вызываемые из форм
// документа "Поступление (акт, накладная)".
//  
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЙ ПРОГРАММНЫЙ ИНТЕРФЕЙС

// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

Процедура ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(Форма);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(Форма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	ОбщегоНазначенияБКВызовСервера.НастроитьПодключаемоеОборудование(Форма);
	
	Если Форма.Параметры.Ключ.Пустая() Тогда
		Форма.ПодготовитьФормуНаСервере();
		РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(Форма.Объект.ВидОперации), Форма.Объект.Ссылка, Форма);
		//Если НЕ ЗначениеЗаполнено(Форма.Параметры.ЗначениеКопирования) Тогда
		//	Документы.ПоступлениеТоваровУслуг.ЗаполнитьСчетаУчетаРасчетов(Форма.Объект);
		//КонецЕсли;
	КонецЕсли;
	
	// Если форма вызвана в режиме смена вида операции - модифицируем сразу при открытии, 
	// чтобы можно было подтвердить или отказаться от изменения путем сохранения или 
	// отказа от сохранения документа.
	Если Форма.Параметры.Свойство("ИзменитьВидОперации")
		И Форма.Параметры.ИзменитьВидОперации Тогда
		
		// Не кэшируем переменную Объект, т.к. может вызываться Форма.ИзменитьРеквизиты(),
		// которая меняет Объект.
		Форма.Объект.ВидОперации = Форма.Параметры.ЗначенияЗаполнения.ВидОперации;
		Если Форма.Объект.ВидОперации <> Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Товары
			И Форма.Объект.ВидОперации <> Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Услуги
			И Форма.Объект.ВидОперации <> Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ОсновныеСредства Тогда
			Форма.ВидОперацииПриИзмененииНаСервере();	
		КонецЕсли;
		РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(Форма.Объект.ВидОперации), Форма.Объект.Ссылка, Форма);
		Форма.ОбновитьИтогиНаСервере();
		Форма.УправлениеФормойНаСервере();
		Форма.Модифицированность = Истина;
	КонецЕсли;
	
	Форма.УстановитьВидимостьСчетовУчета();
	
	// Активизировать табличную часть
	Форма.УстановитьТекущуюСтраницуОсновнойПанели();
	
	Форма.УправлениеФормойНаСервере();
	
	ЗапретРедактированияРеквизитовОбъектовПереопределяемый.ЗаблокироватьРеквизиты(Форма, Форма.Объект.Проведен);
	
КонецПроцедуры

Процедура ПриЧтенииНаСервере(Форма, ТекущийОбъект) Экспорт

	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(Форма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения	
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(Форма, Форма.Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	// РедактированиеДокументовПользователей
	ПраваДоступаКОбъектам.ОбъектПриЧтенииНаСервере(Форма, ТекущийОбъект);
	// Конец РедактированиеДокументовПользователей
	
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(Форма.Объект.ВидОперации), Форма.Объект.Ссылка, Форма);
	
	//АВР
	Форма.НайтиАВРИЗаполнитьСсылкуНаСервере();
	//Конец АВР

	Форма.ПодготовитьФормуНаСервере();
	
	Форма.НайтиЭДВСИЗаполнитьСсылкуНаСервере();

КонецПроцедуры

Процедура ПослеЗаписиНаСервере(Форма, ТекущийОбъект, ПараметрыЗаписи) Экспорт

	Объект = Форма.Объект;
	
	ЗапретРедактированияРеквизитовОбъектовПереопределяемый.ЗаблокироватьРеквизиты(Форма, Объект.Проведен);
	
	Форма.УстановитьДоступностьСубконто();
	Форма.ЗаполнитьДобавленныеКолонкиТаблиц();
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(Объект.ВидОперации), Объект.Ссылка, Форма);
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) И ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда 
		УчетНДСИАкциза.ЗаполнитьДокументОснованиеВСчетеФактуре(Объект, Объект.ДокументОснование, "СчетФактураПолученный");
	КонецЕсли;
	
	Если Форма.ТребуетсяСчетФактура И ЗначениеЗаполнено(Форма.СчетФактура) И ЗначениеЗаполнено(Форма.ДанныеСчетаФактуры) Тогда
		УчетНДСИАкциза.ПолучитьДанныеСчетаФактуры(Форма, "СчетФактураПолученный");
		УчетНДСИАкцизаКлиентСервер.ЗаполнитьТекстПроСчетФактуру(Форма, Форма.ДанныеСчетаФактуры, "НадписьСчетФактура", Форма.ТребуетсяСчетФактура);
		УчетНДСиАкцизаКлиентСервер.УправлениеГруппойСчетаФактуры(Форма);
	КонецЕсли;
	
КонецПроцедуры


// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

Процедура ДатаПриИзменении(Форма, СтруктураРезультатаВыполненияПриИзмененииДаты)Экспорт
	
	Объект = Форма.Объект;

	УстановитьФункциональныеОпцииФормы(Форма);
	
	ИзменятьУчетНДС = Истина;
	Если Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку 
		ИЛИ  Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ОтСтруктурногоПодразделения
		ИЛИ  Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Импорт 
		ИЛИ  Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПоступлениеОтНерезидента Тогда
		
		ИзменятьУчетНДС = Ложь;
	КонецЕсли;	
	
	РаботаСДиалогами.ПриИзмененииЗначенияДатыДокумента(Объект, Форма.ВалютаРегламентированногоУчета, , ИзменятьУчетНДС, СтруктураРезультатаВыполненияПриИзмененииДаты);
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку Тогда
		Объект.УчитыватьКПН  = Ложь;
	Иначе 
		ПроцедурыНалоговогоУчета.ПриИзмененииПризнакаОтраженияВНалоговомУчете(Объект.Организация, Объект.Дата, Объект.УчитыватьКПН, Истина);
	КонецЕсли;
	
	ПроцедурыНалоговогоУчета.ЗаполнитьВидУчетаНУ(Объект.УчитыватьКПН, Объект.ВидУчетаНУ);
	
КонецПроцедуры

Процедура СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(Форма, СтруктураПараметров = Неопределено, СтруктураРезультатаВыполнения)Экспорт
	
	Объект = Форма.Объект;
	
	Если СтруктураПараметров = Неопределено 
		ИЛИ (СтруктураПараметров.Свойство("НеобходимоИзменитьЗначенияРеквизитовОбъекта") 
				И СтруктураПараметров.НеобходимоИзменитьЗначенияРеквизитовОбъекта) Тогда 
		РаботаСДиалогами.СтруктурноеПодразделениеПриИзменении(Форма.СтруктурноеПодразделениеОрганизация, Объект.Организация, Объект.СтруктурноеПодразделение, СтруктураПараметров);
	КонецЕсли;
	
	ПриИзмененииЗначенияОрганизацииСервер(Форма, СтруктураПараметров, СтруктураРезультатаВыполнения);
	
КонецПроцедуры

Процедура ПриИзмененииЗначенияОрганизацииСервер(Форма, СтруктураПараметров, СтруктураРезультатаВыполнения) Экспорт
	
	Объект = Форма.Объект;
	
	Если НЕ СтруктураПараметров.ИзмененаОрганизация И НЕ СтруктураПараметров.ИзмененоСтруктурноеПодразделение Тогда
		Возврат;
	КонецЕсли;
	
	ПричиныИзмененияСчетовУчета = Новый Массив;
	Если СтруктураПараметров.ИзмененаОрганизация Тогда
		ПричиныИзмененияСчетовУчета.Добавить("Организация");
	КонецЕсли;
	
	ПриИзмененииЗначенияСтруктурногоПодразделенияСервер(Форма, СтруктураПараметров);
	
	УстановитьФункциональныеОпцииФормы(Форма);
	
	УчетАгентскогоНДС = УправлениеВзаиморасчетамиСервер.ПолучитьЗначениеНеобходимостиУчетаАгентскогоНДС(Объект.ВидОперации);
	Если УчетАгентскогоНДС <> Неопределено
	Тогда	
		РаботаСДиалогами.ПриИзмененииЗначенияОрганизации(Объект, Новый Структура("УчетАгентскогоНДС", УчетАгентскогоНДС), СтруктураРезультатаВыполнения);
	Иначе
		РаботаСДиалогами.ПриИзмененииЗначенияОрганизации(Объект, , СтруктураРезультатаВыполнения);
	КонецЕсли;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку Тогда			
		Объект.УчитыватьКПН = Ложь;
	Иначе
		ПроцедурыНалоговогоУчета.ПриИзмененииПризнакаОтраженияВНалоговомУчете(Объект.Организация, Объект.Дата, Объект.УчитыватьКПН, Истина);
	КонецЕсли;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Импорт
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ОтСтруктурногоПодразделения 
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПоступлениеОтНерезидента Тогда			
		// НДС по импорту вводится отдельными документами: ГТД по импорту/Заявление о ввозе товаров
		// НДС за нерезидента вводится отдельными документами: Регистрация НДС за нерезидента
		Объект.УчитыватьНДС         = Ложь;
		Объект.СуммаВключаетНДС     = Ложь;
	КонецЕсли;
	
	ПроцедурыНалоговогоУчета.ЗаполнитьВидУчетаНУ(Объект.УчитыватьКПН, Объект.ВидУчетаНУ);

	Если Объект.ДоговорКонтрагента <> Форма.ТекущийДоговорКонтрагента Тогда 
		ДоговорКонтрагентаОбработатьИзменение(Форма,СтруктураРезультатаВыполнения, ПричиныИзмененияСчетовУчета);
	Иначе
		Форма.УправлениеФормойНаСервере();
	КонецЕсли;
	
	РаботаСДиалогами.УстановитьЗаголовокЭлементуУправленияУчитыватьКПН(Объект.Организация, Форма.Элементы.УчитыватьКПН);
	
	Если Объект.Услуги.Количество() > 0 Тогда
		ПоступлениеТоваровУслугФормыКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(Форма, "ЗатратБУ", "СчетЗатратБУ");
		ПоступлениеТоваровУслугФормыКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(Форма, "ЗатратНУ", "СчетЗатратНУ");
	КонецЕсли;
	
	Если ПричиныИзмененияСчетовУчета.Количество() > 0 Тогда
		ЗаполнитьСчетаУчета(Форма,ПричиныИзмененияСчетовУчета, "Организация");
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриИзмененииЗначенияСтруктурногоПодразделенияСервер(Форма,СтруктураПараметров)
	
	Объект = Форма.Объект;
	
	Если СтруктураПараметров.Свойство("ОчищатьНекорректныеЗначения") И НЕ СтруктураПараметров.ОчищатьНекорректныеЗначения Тогда 
		Возврат;
	КонецЕсли;
	
	Если Объект.Услуги.Количество() = 0 И Объект.ОС.Количество() = 0 Тогда
		Возврат;
	Конецесли;
        
	СписокТабличныхЧастей = Новый СписокЗначений;
	СписокАналитикиСчетов = Новый СписокЗначений;

	СписокАналитикиСчетов.Добавить("ЗатратБУ");     // СчетЗатратБУ
	СписокАналитикиСчетов.Добавить("ЗатратНУ");     // СчетЗатратНУ

	СтруктураРеквизитов = Новый Структура("ТабличнаяЧасть, СписокАналитикиСчетов", Объект.Услуги, СписокАналитикиСчетов); 
	СписокТабличныхЧастей.Добавить(СтруктураРеквизитов);

	СписокРеквизитовПодразделения = Новый СписокЗначений;
	СписокРеквизитовПодразделения.Добавить("ПодразделениеОрганизации");

	СтруктураРеквизитов = Новый Структура("ТабличнаяЧасть, СписокРеквизитовПодразделения", Объект.ОС, СписокРеквизитовПодразделения);
	СписокТабличныхЧастей.Добавить(СтруктураРеквизитов);

	РаботаСДиалогами.ПроверитьСоответствиеПодразделения(Объект.Организация, Объект.СтруктурноеПодразделение, , СписокТабличныхЧастей);
		
КонецПроцедуры

Процедура УчитыватьКПНПриИзмененииНаСервере(Форма)Экспорт
	
	Объект = Форма.Объект;
	
	ПроцедурыНалоговогоУчета.ЗаполнитьВидУчетаНУ(Объект.УчитыватьКПН, Объект.ВидУчетаНУ);
	
	Форма.УправлениеФормойНаСервере();
	
КонецПроцедуры

Процедура КонтрагентПриИзмененииНаСервере(Форма, СтруктураРезультатаВыполнения) Экспорт
	
	Объект = Форма.Объект;
	
	ИсходныйДоговор = Объект.ДоговорКонтрагента;
	
	КонтрагентОбработатьИзменение(Форма,СтруктураРезультатаВыполнения, Новый Массив);
	
	ТекущийКонтрагент = ?(ЗначениеЗаполнено(Объект.Контрагент), Объект.Контрагент, Неопределено);
	
КонецПроцедуры

// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ Товары

Процедура ОбработкаОповещенияОбработкиТабличнойЧастиТоварыНаСервере(Форма, Параметры)Экспорт
	
	Объект = Форма.Объект;

	СтрокиДляДополнительнойОбработки = Обработки.ОбработкаТабличнойЧастиТовары.ЗагрузитьТабличнуюЧастьВДанныеФормы(Объект.Товары, Параметры);
	
	СчетаУчетаВДокументах.ЗаполнитьСтроки(СтрокиДляДополнительнойОбработки, "Товары", Объект, Документы.ПоступлениеТоваровУслуг, Истина);
	
КонецПроцедуры

Процедура ТоварыНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, ПараметрыОбъекта, СчетаУчетаКЗаполнению) Экспорт
	
	МетаданныеДокумента = ПараметрыОбъекта.Ссылка.Метаданные();
	
	СведенияОНоменклатуре = ОбработкаТабличныхЧастей.ПолучитьСведенияОНоменклатуре(СтрокаТабличнойЧасти.Номенклатура, ПараметрыОбъекта);
	
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.ЕдиницаИзмерения  = СведенияОНоменклатуре.БазоваяЕдиницаИзмерения;
	СтрокаТабличнойЧасти.Коэффициент	   = СведенияОНоменклатуре.Коэффициент;
	СтрокаТабличнойЧасти.Цена			   = СведенияОНоменклатуре.Цена;
	СтрокаТабличнойЧасти.СтавкаНДС         = СведенияОНоменклатуре.СтавкаНДС;
	
	ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуЦенуПокупкиТабЧасти(СтрокаТабличнойЧасти, ПараметрыОбъекта, "Товары", МетаданныеДокумента); 
	
	// Рассчитываем реквизиты табличной части.
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ПараметрыОбъекта);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВсегоТабЧасти(СтрокаТабличнойЧасти, ПараметрыОбъекта.СуммаВключаетНДС);
	
	ЗаполненныеСчета = СчетаУчетаВДокументах.ЗаполнитьРеквизитыПриИзменении(
		Документы.ПоступлениеТоваровУслуг,
		СчетаУчетаКЗаполнению,
		ПараметрыОбъекта,
		"Товары",
		СтрокаТабличнойЧасти);
	
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ЗаполненныеСчета);
	
КонецПроцедуры

// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ Услуги

Процедура УслугиНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, ПараметрыОбъекта, СчетаУчетаКЗаполнению) Экспорт
	
	МетаданныеДокумента = ПараметрыОбъекта.Ссылка.Метаданные();
	
	СведенияОНоменклатуре = ОбработкаТабличныхЧастей.ПолучитьСведенияОНоменклатуре(СтрокаТабличнойЧасти.Номенклатура, ПараметрыОбъекта);
	
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыОбъекта.Свойство("ДокументОснование") 
		И ТипЗнч(ПараметрыОбъекта.ДокументОснование) <> Тип("ДокументСсылка.ОплатаОтПокупателяПлатежнойКартой") Тогда
		СтрокаТабличнойЧасти.Цена       = СведенияОНоменклатуре.Цена;
	КонецЕсли;
	СтрокаТабличнойЧасти.СтавкаНДС  = СведенияОНоменклатуре.СтавкаНДС;
	СтрокаТабличнойЧасти.Содержание = СведенияОНоменклатуре.НаименованиеПолное;
	
	// Рассчитываем реквизиты табличной части.
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ПараметрыОбъекта);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВсегоТабЧасти(СтрокаТабличнойЧасти, ПараметрыОбъекта.СуммаВключаетНДС);
	
	ЗаполненныеСчета = СчетаУчетаВДокументах.ЗаполнитьРеквизитыПриИзменении(
		Документы.ПоступлениеТоваровУслуг,
		СчетаУчетаКЗаполнению,
		ПараметрыОбъекта,
		"Услуги",
		СтрокаТабличнойЧасти);
	
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ЗаполненныеСчета);

	ПоляОбъектаСубконто	  = Новый Структура("Субконто1, Субконто2, Субконто3",
		"СубконтоЗатратБУ1", "СубконтоЗатратБУ2", "СубконтоЗатратБУ3");
	ПоляОбъектаСубконтоНУ = Новый Структура("Субконто1, Субконто2, Субконто3",
		"СубконтоЗатратНУ1", "СубконтоЗатратНУ2", "СубконтоЗатратНУ3");
	
	ПроцедурыБухгалтерскогоУчетаКлиентСервер.УстановитьДоступностьИЗаголовкиСубконто(СтрокаТабличнойЧасти.СчетЗатратБУ, СтрокаТабличнойЧасти, ПоляОбъектаСубконто);
	ПроцедурыБухгалтерскогоУчетаКлиентСервер.УстановитьДоступностьИЗаголовкиСубконто(СтрокаТабличнойЧасти.СчетЗатратНУ, СтрокаТабличнойЧасти, ПоляОбъектаСубконтоНУ);
	
КонецПроцедуры 

Процедура УслугиСчетЗатратБУПриИзмененииНаСервере(СтрокаТабличнойЧасти, ДанныеОбъекта) Экспорт
	
	ПроцедурыБухгалтерскогоУчета.ПроверитьВладельцаСубконтоПодразделение(СтрокаТабличнойЧасти, 
	                                        ДанныеОбъекта.Организация, 
	                                        Новый Структура("НазваниеСубконтоБУ1, НазваниеСубконтоБУ2, НазваниеСубконтоБУ3, 
	                                                        |СубконтоБУ1, СубконтоБУ2, СубконтоБУ3",
	                                                        "СубконтоЗатратБУ1", "СубконтоЗатратБУ2", "СубконтоЗатратБУ3", 
	                                                        СтрокаТабличнойЧасти.СубконтоЗатратБУ1, СтрокаТабличнойЧасти.СубконтоЗатратБУ2, СтрокаТабличнойЧасти.СубконтоЗатратБУ3));
															
	СчетаУчета = Новый Структура("СчетЗатратБУ, СубконтоЗатратБУ1,
								 |СубконтоЗатратБУ2, СубконтоЗатратБУ3", СтрокаТабличнойЧасти.СчетЗатратБУ,
								 СтрокаТабличнойЧасти.СубконтоЗатратБУ1, СтрокаТабличнойЧасти.СубконтоЗатратБУ2,
								 СтрокаТабличнойЧасти.СубконтоЗатратБУ3);

	ПроцедурыБухгалтерскогоУчета.ЗаполнитьАналитикуСчетаТабличнойЧасти(СтрокаТабличнойЧасти, СчетаУчета, "СубконтоЗатратБУ", "СчетЗатратБУ", "СубконтоЗатратБУ");
															
	ПроцедурыБухгалтерскогоУчета.ПроверитьВладельцаСубконтоПодразделение(СтрокаТабличнойЧасти, 
	                                        ДанныеОбъекта.Организация, 
	                                        Новый Структура("НазваниеСубконтоБУ1, НазваниеСубконтоБУ2, НазваниеСубконтоБУ3, 
	                                                        |СубконтоБУ1, СубконтоБУ2, СубконтоБУ3",
	                                                        "СубконтоЗатратНУ1", "СубконтоЗатратНУ2", "СубконтоЗатратНУ3", 
	                                                        СтрокаТабличнойЧасти.СубконтоЗатратНУ1, СтрокаТабличнойЧасти.СубконтоЗатратНУ2, СтрокаТабличнойЧасти.СубконтоЗатратНУ3));
															
	СчетаУчета = Новый Структура("СчетЗатратНУ, СубконтоЗатратНУ1,
								 |СубконтоЗатратНУ2, СубконтоЗатратНУ3", СтрокаТабличнойЧасти.СчетЗатратНУ,
								 СтрокаТабличнойЧасти.СубконтоЗатратНУ1, СтрокаТабличнойЧасти.СубконтоЗатратНУ2,
								 СтрокаТабличнойЧасти.СубконтоЗатратНУ3);

	ПроцедурыБухгалтерскогоУчета.ЗаполнитьАналитикуСчетаТабличнойЧасти(СтрокаТабличнойЧасти, СчетаУчета, "СубконтоЗатратНУ", "СчетЗатратНУ", "СубконтоЗатратНУ");

КонецПроцедуры

Процедура УслугиСчетЗатратНУПриИзмененииНаСервере(СтрокаТабличнойЧасти, ДанныеОбъекта) Экспорт
	
	ПроцедурыБухгалтерскогоУчета.ПроверитьВладельцаСубконтоПодразделение(СтрокаТабличнойЧасти, 
	                                        ДанныеОбъекта.Организация, 
	                                        Новый Структура("НазваниеСубконтоБУ1, НазваниеСубконтоБУ2, НазваниеСубконтоБУ3, 
	                                                        |СубконтоБУ1, СубконтоБУ2, СубконтоБУ3",
	                                                        "СубконтоЗатратНУ1", "СубконтоЗатратНУ2", "СубконтоЗатратНУ3", 
	                                                        СтрокаТабличнойЧасти.СубконтоЗатратНУ1, СтрокаТабличнойЧасти.СубконтоЗатратНУ2, СтрокаТабличнойЧасти.СубконтоЗатратНУ3));
															
	СчетаУчета = Новый Структура("СчетЗатратНУ, СубконтоЗатратНУ1,
								 |СубконтоЗатратНУ2, СубконтоЗатратНУ3", СтрокаТабличнойЧасти.СчетЗатратНУ,
								 СтрокаТабличнойЧасти.СубконтоЗатратНУ1, СтрокаТабличнойЧасти.СубконтоЗатратНУ2,
								 СтрокаТабличнойЧасти.СубконтоЗатратНУ3);

	ПроцедурыБухгалтерскогоУчета.ЗаполнитьАналитикуСчетаТабличнойЧасти(СтрокаТабличнойЧасти, СчетаУчета, "СубконтоЗатратНУ", "СчетЗатратНУ", "СубконтоЗатратНУ");

КонецПроцедуры

// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ОС

Процедура ОСОсновноеСредствоПриИзмененииНаСервере(СтрокаТабличнойЧасти, ПараметрыОбъекта, СчетаУчетаКЗаполнению) Экспорт
	
	МетаданныеДокумента = ПараметрыОбъекта.Ссылка.Метаданные();
	
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Основноесредство) Тогда
		СтрокаТабличнойЧасти.СтавкаНДС = ПользователиБКВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию(
			Пользователи.ТекущийПользователь(), "ОсновнаяСтавкаНДС");
	Иначе
		СтрокаТабличнойЧасти.СтавкаНДС = Справочники.СтавкиНДС.ПустаяСсылка();
		СтрокаТабличнойЧасти.Сумма     = 0;
	КонецЕсли;
	
	ЗаполненныеСчета = СчетаУчетаВДокументах.ЗаполнитьРеквизитыПриИзменении(
		Документы.ПоступлениеТоваровУслуг,
		СчетаУчетаКЗаполнению,
		ПараметрыОбъекта,
		"ОС",
		СтрокаТабличнойЧасти);
	
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ЗаполненныеСчета);
	
	// Рассчитываем реквизиты табличной части.
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ПараметрыОбъекта);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВсегоТабЧасти(СтрокаТабличнойЧасти, ПараметрыОбъекта.СуммаВключаетНДС);
	
КонецПроцедуры

// ПРОЧИЕ ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМ ДОКУМЕНТА ПоступлениеТоваровУслуг

Процедура СформироватьШтрихкодаНаСервере(Объект)Экспорт
	
	МассивОС = Объект.ОС.Выгрузить().ВыгрузитьКолонку("ОсновноеСредство");
	
	Если МассивОС.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Не заполнена табличная часть ""ОС""'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;	
	
	ПодключаемоеОборудованиеБКВызовСервера.СформироватьШтрихкодаМассиваОС(МассивОС)
	
КонецПроцедуры	

Процедура ОбработкаОповещенияОбработкиТабличнойЧастиНаСервере(Форма,Параметры)Экспорт

	Объект = Форма.Объект;
	
	ТаблицаОбработки  = ПолучитьИзВременногоХранилища(Параметры.АдресОбработаннойТабличнойЧастиВХранилище);
	ИмяТабличнойЧасти = Параметры.ИмяТаблицы;
	
	Объект[ИмяТабличнойЧасти].Загрузить(ТаблицаОбработки);
	
КонецПроцедуры

Процедура ОбработкаОповещенияЗаписиСчетаФактурыНаСервере(Форма)Экспорт
	
	// Может быть проведен исправленный счет-фактура,
	// в этом случае нужно обновить ссылку на счет-фактуру.	
	Форма.СчетФактура = Неопределено;
	
	УчетНДСИАкциза.ПолучитьДанныеСчетаФактуры(Форма, "СчетФактураПолученный");
	УчетНДСИАкцизаКлиентСервер.ЗаполнитьТекстПроСчетФактуру(Форма, Форма.ДанныеСчетаФактуры, "НадписьСчетФактура", Форма.ТребуетсяСчетФактура);
	УчетНДСиАкцизаКлиентСервер.УправлениеГруппойСчетаФактуры(Форма, , Форма.ТребуетсяСчетФактура);
	
КонецПроцедуры

Процедура ОбработкаВыбораПодборНаСервере(Форма, ЭтоВставкаИзБуфера, ВыбранноеЗначение, ИмяТаблицы)Экспорт
	
	Объект = Форма.Объект;  
	
	ЭтоПодборПоШтрихкоду = ВыбранноеЗначение.Свойство("Штрихкод");
	
	СписокСвойств = Неопределено;	
	Если ЭтоВставкаИзБуфера Тогда		
		ТаблицаТоваров = ВыбранноеЗначение.Данные;
		СписокСвойств = ВыбранноеЗначение.СписокСвойств;		
	Иначе                                               		
		ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресПодобраннойНоменклатурыВХранилище);		
	КонецЕсли; 	
	
	СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов;
	
	ДанныеОбъекта = Новый Структура("Дата, Организация, ВидОперации, УчитыватьКПН, УчитыватьНДС");
	
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	СведенияОСпискеНоменклатуры = ОбработкаТабличныхЧастей.ПолучитьСведенияОСпискеНоменклатуры(
	ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаТоваров, "Номенклатура", Истина), Объект);
	
	СтрокиДляЗаполненияСчетов = Новый Массив;
	
	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		СтрокаТабличнойЧасти = Неопределено;
		Если НЕ ЭтоВставкаИзБуфера Тогда
			
			// Ищем выбранную позицию в таблице подобранной номенклатуры.
			//  Если найдем - увеличим количество; не найдем - добавим новую строку.
			СтруктураОтбора = Новый Структура();
			СтруктураОтбора.Вставить("Номенклатура", СтрокаТовара.Номенклатура);
			Если ИмяТаблицы = "Товары" Тогда
				СтруктураОтбора.Вставить("ЕдиницаИзмерения", СтрокаТовара.ЕдиницаИзмерения);
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаТовара.Цена) Тогда
				СтруктураОтбора.Вставить("Цена", СтрокаТовара.Цена);
			КонецЕсли;
			
			СтрокаТабличнойЧасти = ОбработкаТабличныхЧастейКлиентСервер.НайтиСтрокуТабЧасти(Объект, ИмяТаблицы, СтруктураОтбора);
		КонецЕсли;
		
		Если СтрокаТабличнойЧасти <> Неопределено Тогда
			// Нашли, увеличиваем количество в первой найденной строке.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + СтрокаТовара.Количество;
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Объект);			
			
		Иначе
			
			СведенияОНоменклатуре = СведенияОСпискеНоменклатуры.Получить(СтрокаТовара.Номенклатура);
			
			Если ЭтоВставкаИзБуфера 
				И СведенияОНоменклатуре <> Неопределено
				И ЗначениеЗаполнено(СведенияОНоменклатуре.Услуга) Тогда
				
				Если СведенияОНоменклатуре.Услуга Тогда
					
					Если ИмяТаблицы = "Товары" Тогда
						
						Продолжить;
						
					КонецЕсли;
					
				Иначе
					
					Если ИмяТаблицы = "Услуги" Тогда
						
						Продолжить;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
			// Не нашли - добавляем новую строку.
			СтрокаТабличнойЧасти = Объект[ИмяТаблицы].Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТовара, СписокСвойств);
			СтрокиДляЗаполненияСчетов.Добавить(СтрокаТабличнойЧасти);
			
			СведенияОНоменклатуре = СведенияОСпискеНоменклатуры.Получить(СтрокаТабличнойЧасти.Номенклатура);
			
			Если ИмяТаблицы = "Товары" Тогда
				СтрокаТабличнойЧасти.Коэффициент = СведенияОНоменклатуре.Коэффициент;
			КонецЕсли;
			Если ИмяТаблицы = "Услуги" Тогда
				СтрокаТабличнойЧасти.Содержание  = СведенияОНоменклатуре.НаименованиеПолное;
			КонецЕсли;
			
			СтрокаТабличнойЧасти.СтавкаНДС = СведенияОНоменклатуре.СтавкаНДС;
			
			Если ЭтоВставкаИзБуфера ИЛИ ЭтоПодборПоШтрихкоду Тогда  
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
			КонецЕсли;
				
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Объект);			
			
		КонецЕсли;
		
	КонецЦикла;
	
	СчетаУчетаВДокументах.ЗаполнитьСтроки(СтрокиДляЗаполненияСчетов, ИмяТаблицы, Объект, Документы.ПоступлениеТоваровУслуг);
	
	Если ЭтоВставкаИзБуфера Тогда
		
		ВыбранноеЗначение.КоличествоДобавленныхСтрок = СтрокиДляЗаполненияСчетов.Количество();
		
	КонецЕсли;

КонецПроцедуры



////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура ДоговорКонтрагентаОбработатьИзменение(Форма, СтруктураРезультатаВыполнения, ПричиныИзмененияСчетовУчета) Экспорт
	
	Объект = Форма.Объект;

	Если НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		Объект.Сделка = Неопределено;
		Объект.УчастникиСовместнойДеятельности.Очистить();
		Форма.УправлениеФормойНаСервере();
		ТекущийДоговорКонтрагента = Неопределено;
		Форма.Элементы.Сделка.Доступность = Ложь;
		Форма.Элементы.КнопкаУСД.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку Тогда
		СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры;
	Иначе
		СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов;
	КонецЕсли;
	
	УправлениеВзаиморасчетамиСервер.ПриИзмененииЗначенияДоговора(Объект, СпособЗаполненияЦен, ТекущийДоговорКонтрагента, , СтруктураРезультатаВыполнения);
	
	Объект.Сделка = Неопределено;
	Объект.УчастникиСовместнойДеятельности.Очистить();
	
	Если НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		Форма.УправлениеФормойНаСервере();
		ТекущийДоговорКонтрагента = Неопределено;
		Форма.Элементы.Сделка.Доступность = Ложь;
		Возврат;
	КонецЕсли;

	ПричиныИзмененияСчетовУчета.Добавить("ДоговорКонтрагента");
	
	Если СтруктураРезультатаВыполнения <> Неопределено Тогда 
		СтруктураРезультатаВыполнения.Вставить("ИзмененДоговорКонтрагента", Истина);
	КонецЕсли;
	
	РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Объект.ДоговорКонтрагента, "ВалютаВзаиморасчетов, ТипЦен, ВедениеВзаиморасчетов");
	
	ЗаполнениеДокументов.ЗаполнитьТабличнуюЧастьУчастникиСовместнойДеятельности(Объект.ДоговорКонтрагента, Объект.УчастникиСовместнойДеятельности);
	Форма.Элементы.КнопкаУСД.Видимость = ОбщегоНазначенияБК.ЭтоДоговорСДСРП(Объект.ДоговорКонтрагента);
	Форма.Элементы.ДоговорКонтрагента.МаксимальнаяШирина = ПолучитьШиринуПоляДоговор(ОбщегоНазначенияБК.ЭтоДоговорСДСРП(Объект.ДоговорКонтрагента));
	
	Форма.Элементы.Сделка.Доступность = (РеквизитыДоговора.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам);
	
	ТекущийДоговорКонтрагента = Объект.ДоговорКонтрагента;
	
	ЗаполнитьСчетаУчета(Форма, ПричиныИзмененияСчетовУчета, "ДоговорКонтрагента");
	
	Форма.УправлениеФормойНаСервере();
	
КонецПроцедуры

Процедура КонтрагентОбработатьИзменение(Форма, СтруктураРезультатаВыполнения, ПричиныИзмененияСчетовУчета)Экспорт
	
	Объект = Форма.Объект;
	
	ПричиныИзмененияСчетовУчета.Добавить("Контрагент");
	
	УправлениеВзаиморасчетамиСервер.ПриИзмененииЗначенияКонтрагента(Объект, СтруктураДоступныхВидовДоговоров(Объект.ВидОперации));
	
	ОтказОтВыбранного = Ложь;
	ПроверитьСоответсвиеКонтрагентаВидуОперации(Объект.ВидОперации, Объект.Контрагент, Объект.ДоговорКонтрагента, ОтказОтВыбранного);
	Если ОтказОтВыбранного Тогда
		ТекущийДоговорКонтрагента = Неопределено;
		ТекущийКонтрагент         = Неопределено;
		Возврат;
	КонецЕсли;
	
	ДоговорКонтрагентаОбработатьИзменение(Форма, СтруктураРезультатаВыполнения, ПричиныИзмененияСчетовУчета);
	
	ЗаполнитьСчетаУчета(Форма,ПричиныИзмененияСчетовУчета, "Контрагент");
	
КонецПроцедуры

Процедура УстановитьФункциональныеОпцииФормы(Форма)Экспорт

	Объект = Форма.Объект;

	ОбщегоНазначенияБККлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(Форма);
	
	Форма.ОрганизацияПлательщикНалогаНаПрибыль = ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Объект.Организация, Объект.Дата);
	
	Форма.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль = Форма.ОрганизацияПлательщикНалогаНаПрибыль И ПроцедурыНалоговогоУчета.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль(Объект.Организация, Объект.Дата);
	
	Форма.ВедетсяУчетПоТоварамОрганизацийБУ = НомераГТДСервер.ВедетсяУчетПоТоварамОрганизаций(Объект.Дата);
		
КонецПроцедуры 

Процедура ЗаполнитьСчетаУчета(Форма, ПричиныИзмененияСчетовУчета, ИмяРеквизита)Экспорт
	
	Если ПричиныИзмененияСчетовУчета.Найти("КопированиеДокумента") <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Объект = Форма.Объект;

	Если Не СчетаУчетаВДокументахКлиентСервер.МожноНачатьЗаполнениеСчетовУчета(ИмяРеквизита, ПричиныИзмененияСчетовУчета) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗаполнения = ПоступлениеТоваровУслугФормыКлиентСервер.НачатьЗаполнениеСчетовУчета(ПричиныИзмененияСчетовУчета, Объект);
	ИзмененныеЗначения = СчетаУчетаВДокументах.ЗаполнитьОбъектПриИзменении(ПараметрыЗаполнения);
	
	Если ЗначениеЗаполнено(ИзмененныеЗначения)
		И СчетаУчетаВДокументахВызовСервераПовтИсп.ПользовательУправляетСчетамиУчета() Тогда
		ПоказатьСообщениеОЗаполненииСчетовУчета(Объект.Ссылка);
		ПоступлениеТоваровУслугФормыКлиентСервер.СформироватьЗаголовокСчетаУчета(Форма);
	КонецЕсли;
	
	Если СчетаУчетаВДокументахВызовСервераПовтИсп.ПользовательУправляетСчетамиУчета() Тогда
		Для Каждого ИмяТабличнойЧасти Из СчетаУчетаВДокументахКлиентСервер.ТабличныеЧастиКЗаполнению(ПараметрыЗаполнения.КЗаполнению) Цикл
			
			Если ИмяТабличнойЧасти = "Услуги" Тогда
				
				ПоляОбъектаЗатратыБУ = Новый Структура("Субконто1, Субконто2, Субконто3",
											 "СубконтоЗатратБУ1", "СубконтоЗатратБУ2", "СубконтоЗатратБУ3");
				ПоляОбъектаЗатратыНУ = Новый Структура("Субконто1, Субконто2, Субконто3",
											 "СубконтоЗатратНУ1", "СубконтоЗатратНУ2", "СубконтоЗатратНУ3");
				
				УслугиСчетЗатратБУ = ПараметрыЗаполнения.КЗаполнению.Получить("Услуги.СчетЗатратБУ") <> Неопределено;
				УслугиСчетЗатратНУ = ПараметрыЗаполнения.КЗаполнению.Получить("Услуги.СчетЗатратНУ") <> Неопределено;
				
				Если НЕ (УслугиСчетЗатратБУ ИЛИ УслугиСчетЗатратНУ) Тогда
					Продолжить;
				КонецЕсли;
				
				Для Каждого СтрокаТабличнойЧасти Из Объект.Услуги Цикл
					Если УслугиСчетЗатратБУ Тогда 
						ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриИзмененииСчета(СтрокаТабличнойЧасти.СчетЗатратБУ, СтрокаТабличнойЧасти, ПоляОбъектаЗатратыБУ, Истина);
					КонецЕсли;
					Если УслугиСчетЗатратНУ Тогда 
						ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриИзмененииСчета(СтрокаТабличнойЧасти.СчетЗатратНУ, СтрокаТабличнойЧасти, ПоляОбъектаЗатратыНУ, Истина);
					КонецЕсли;
				КонецЦикла;

			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПоказатьСообщениеОЗаполненииСчетовУчета(ОбъектСсылка) Экспорт
	
	ТекстСообщения = НСтр("ru = 'Счета учета изменены в соответствии со значениями по умолчанию.'");
	ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ОбъектСсылка, , "Объект");
	
КонецПроцедуры

Функция СтруктураДоступныхВидовДоговоров(ВидОперации)
        
    СписокВидовДоговоров = Новый Массив;
	Если ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку") Тогда
		СписокВидовДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПокупателем"));
		СписокВидовДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.Прочее"));
	Иначе
		СписокВидовДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком"));
		СписокВидовДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.Прочее"));
	КонецЕсли;
    
    СтруктураВидовДоговоров = Новый Структура("СписокДопустимыхВидовДоговоров", СписокВидовДоговоров);
    
    Возврат СтруктураВидовДоговоров;

КонецФункции

Процедура ПроверитьСоответсвиеКонтрагентаВидуОперации(ВидОперации, Контрагент, ДоговорКонтрагента, ОтказОтВыбранного = Неопределено, ПричиныИзмененияСчетовУчета = Неопределено) Экспорт
	
	Если ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.ОтСтруктурногоПодразделения") Тогда
		
		Если ЗначениеЗаполнено(Контрагент) Тогда
			
			Если Не ПоступлениеТоваровУслугФормы.КонтрагентКакОрганизация(Контрагент) Тогда
				
				Контрагент = ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");
				ОтказОтВыбранного = Истина;
				
				Если ПричиныИзмененияСчетовУчета <> Неопределено Тогда
					ПричиныИзмененияСчетовУчета.Добавить("Контрагент");
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
					ДоговорКонтрагента = ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка");
					Если ПричиныИзмененияСчетовУчета <> Неопределено Тогда
						ПричиныИзмененияСчетовУчета.Добавить("Контрагент");
					КонецЕсли;
				КонецЕсли;
				
				ТекстСообщения  = НСтр("ru = 'При выбранном виде операции ""Поступление от структурного подразделения"" может быть выбран только контрагент, 
											 |соответствующий какому-либо структурному подразделению.
											 |Контрагент будет очищен.'");
						 
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , "Объект.Контрагент");
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция КонтрагентКакОрганизация(Контрагент)Экспорт
	
	СобственныйКонтрагент = Ложь;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СобственныеКонтрагенты.Контрагент
	|ИЗ
	|	РегистрСведений.СобственныеКонтрагенты КАК СобственныеКонтрагенты
	|ГДЕ
	|	СобственныеКонтрагенты.Контрагент = &ЭтотКонтрагент");
	Запрос.УстановитьПараметр("ЭтотКонтрагент", Контрагент);
	
	Если Не Запрос.Выполнить().Пустой() Тогда
		СобственныйКонтрагент = Истина;
	КонецЕсли;
	
	Возврат СобственныйКонтрагент;
	
КонецФункции

Функция ПолучитьПараметрыОбработкиТабличнойЧасти(Форма, ИмяТабличнойЧасти, СинонимТабличнойЧасти,АдресХранилищаТабличнойЧасти, УникальныйИдентификатор)Экспорт
	
	Объект = Форма.Объект;
	
	ПараметрыОбработки = Новый Структура;
	
	ПараметрыОбработки.Вставить("АдресХранилищаТабличнойЧасти", АдресХранилищаТабличнойЧасти);
	ПараметрыОбработки.Вставить("ДокументСсылка"              , Объект.Ссылка);                                                                                                     
	ПараметрыОбработки.Вставить("ДокументДата"                , Объект.Дата);
	ПараметрыОбработки.Вставить("ДокументВалюта"              , Объект.ВалютаДокумента);
	ПараметрыОбработки.Вставить("ДокументКурс"                , Объект.КурсВзаиморасчетов);
	ПараметрыОбработки.Вставить("ДокументКратность"           , Объект.КратностьВзаиморасчетов);
	ПараметрыОбработки.Вставить("ДокументСуммаВключаетНДС"    , Объект.СуммаВключаетНДС);
	ПараметрыОбработки.Вставить("ДокументУчитыватьНДС"        , Объект.УчитыватьНДС);
	ПараметрыОбработки.Вставить("ДокументНДСВключенВСтоимость", Объект.НДСВключенВСтоимость);
	ПараметрыОбработки.Вставить("ИмяТаблицы"                  , ИмяТабличнойЧасти);
	ПараметрыОбработки.Вставить("Заголовок"                   , СинонимТабличнойЧасти);
	
	СтруктураРеквизитов          = Новый Структура;
	СтруктураСвязанныхРеквизитов = Новый Структура;
	
	Если ИмяТабличнойЧасти = "ОС" Тогда
		СтруктураРеквизитов.Вставить("СтавкаНДС");
		СтруктураРеквизитов.Вставить("СчетУчетаБУ");
		СтруктураРеквизитов.Вставить("СчетУчетаНДС");
		СтруктураРеквизитов.Вставить("НДСВидОборота");
		СтруктураРеквизитов.Вставить("НДСВидПоступления");
	ИначеЕсли ИмяТабличнойЧасти = "Услуги" Тогда
		СтруктураРеквизитов.Вставить("Количество");
		СтруктураРеквизитов.Вставить("Цена");
		СтруктураРеквизитов.Вставить("СтавкаНДС");
		СтруктураРеквизитов.Вставить("СчетУчетаНДС");
		СтруктураРеквизитов.Вставить("НДСВидОборота");
		СтруктураРеквизитов.Вставить("НДСВидПоступления");
		
		СтруктураРеквизитов.Вставить("СчетЗатратБУ");
		СтруктураРеквизитов.Вставить("СубконтоЗатратБУ1");
		СтруктураРеквизитов.Вставить("СубконтоЗатратБУ2");
		СтруктураРеквизитов.Вставить("СубконтоЗатратБУ3");
		
		СтруктураРеквизитов.Вставить("СчетЗатратНУ");
		СтруктураРеквизитов.Вставить("СубконтоЗатратНУ1");
		СтруктураРеквизитов.Вставить("СубконтоЗатратНУ2");
		СтруктураРеквизитов.Вставить("СубконтоЗатратНУ3");
		
		СтруктураСвязанныхРеквизитов.Вставить("СчетЗатратБУ", "СубконтоЗатратБУ1, СубконтоЗатратБУ2, СубконтоЗатратБУ3");
		СтруктураСвязанныхРеквизитов.Вставить("СчетЗатратНУ", "СубконтоЗатратНУ1, СубконтоЗатратНУ2, СубконтоЗатратНУ3");
	КонецЕсли;
	
	ПараметрыОбработки.Вставить("СтруктураРеквизитов", СтруктураРеквизитов);
	ПараметрыОбработки.Вставить("СтруктураСвязанныхРеквизитов", СтруктураСвязанныхРеквизитов);
	
	ВидимыеКолонки = Новый Массив;
	ПолучитьВидимыеКолонкиТабличнойЧасти(Форма.Элементы[ИмяТабличнойЧасти], Форма.Элементы[ИмяТабличнойЧасти].ПутьКДанным + ".", ВидимыеКолонки);
	ПараметрыОбработки.Вставить("ВидимыеКолонки", ВидимыеКолонки);

	Возврат ПараметрыОбработки;
	
КонецФункции

Функция ПолучитьВидимыеКолонкиТабличнойЧасти(ЭлементТабличнаяЧасть, ПутьКДаннымТаблицы, МассивКолонок)Экспорт
	
	Для Каждого Элемент Из ЭлементТабличнаяЧасть.ПодчиненныеЭлементы Цикл
		Если ТипЗнч(Элемент) = Тип("ГруппаФормы") Тогда
			ПолучитьВидимыеКолонкиТабличнойЧасти(Элемент, ПутьКДаннымТаблицы, МассивКолонок);
		ИначеЕсли ТипЗнч(Элемент) = Тип("ПолеФормы") И Элемент.Видимость Тогда
			МассивКолонок.Добавить(СтрЗаменить(Элемент.ПутьКДанным, ПутьКДаннымТаблицы, ""));
		КонецЕсли;
	КонецЦикла;

КонецФункции

Процедура ОпределитьСписокДоступныхВидовДоговоровПоОперации(Форма)Экспорт
	
	Объект = Форма.Объект;
	
	НовыеПараметры = Новый Массив;
	
	Форма.СписокВидовДоговоров.Очистить();
	Если Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку Тогда
		Форма.СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
		Форма.СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.Прочее);
		НовыеПараметры.Добавить(Новый ПараметрВыбора("Отбор.ВидДоговора", Форма.СписокВидовДоговоров.ВыгрузитьЗначения()));
		НовыеПараметры.Добавить(Новый ПараметрВыбора("Отбор.ВедениеВзаиморасчетов", Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом));
		НовыеПараметры.Добавить(Новый ПараметрВыбора("Отбор.УчетАгентскогоНДС", Ложь));
		
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПоступлениеОтНерезидента Тогда
		Форма.СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);		
		Форма.СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.Прочее);
		НовыеПараметры.Добавить(Новый ПараметрВыбора("Отбор.ВидДоговора", Форма.СписокВидовДоговоров.ВыгрузитьЗначения()));
		НовыеПараметры.Добавить(Новый ПараметрВыбора("Отбор.УчетАгентскогоНДС", Истина));
		
	Иначе
		Форма.СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);		
		Форма.СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.Прочее);
		НовыеПараметры.Добавить(Новый ПараметрВыбора("Отбор.ВидДоговора", Форма.СписокВидовДоговоров.ВыгрузитьЗначения()));
		НовыеПараметры.Добавить(Новый ПараметрВыбора("Отбор.УчетАгентскогоНДС", Ложь));
		
	КонецЕсли;
	
	Форма.Элементы.ДоговорКонтрагента.ПараметрыВыбора = Новый ФиксированныйМассив(НовыеПараметры);
		
КонецПроцедуры

&НаСервере
Процедура РазблокироватьРеквизиты(Форма) Экспорт
	
	Если Форма.Элементы.Найти("Товары") <> Неопределено Тогда
		Форма.Элементы.Товары.ТолькоПросмотр       = Ложь;
		Форма.Элементы.Товары.ИзменятьСоставСтрок  = Ложь;
		Форма.Элементы.Товары.ИзменятьПорядокСтрок = Ложь;
	КонецЕсли;
	
	Если Форма.Элементы.Найти("ОС") <> Неопределено Тогда
		Форма.Элементы.ОС.ТолькоПросмотр           = Ложь;
		Форма.Элементы.ОС.ИзменятьСоставСтрок      = Ложь;
		Форма.Элементы.ОС.ИзменятьПорядокСтрок     = Ложь;
	КонецЕсли;
	
	Если Форма.Элементы.Найти("Услуги") <> Неопределено Тогда
		Форма.Элементы.Услуги.ТолькоПросмотр          = Ложь;
		Форма.Элементы.Услуги.ИзменятьСоставСтрок     = Ложь;
		Форма.Элементы.Услуги.ИзменятьПорядокСтрок    = Ложь;
	КонецЕсли;
	
	Форма.Элементы.ЦеныИВалюта.ТолькоПросмотр  = Истина;
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыНалоговогоУчета(ПараметрыОбъекта, СтрокаТабличнойЧасти, ИмяТабличнойЧасти, СчетаУчетаКЗаполнению) Экспорт
		
	ЗаполненныеСчета = СчетаУчетаВДокументах.ЗаполнитьРеквизитыПриИзменении(
		Документы.ПоступлениеТоваровУслуг,
		СчетаУчетаКЗаполнению,
		ПараметрыОбъекта,
		ИмяТабличнойЧасти,
		СтрокаТабличнойЧасти);
	
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ЗаполненныеСчета);
	
КонецПроцедуры

Функция ПолучитьШиринуПоляДоговор(ПоказыватьУчастников = Истина)
	
	Если ПоказыватьУчастников Тогда
	   МаксимальнаяШирина = 24;
	Иначе	
	   МаксимальнаяШирина = 28;
	КонецЕсли; 

	Возврат МаксимальнаяШирина;

КонецФункции
