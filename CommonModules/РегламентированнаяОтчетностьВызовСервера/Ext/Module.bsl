
////////////////////////////////////////////////////////////////////////////////
// РегламентированнаяОтчетностьВызовСервера: 
//  
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Функция определяет возможность использования регламентированного отчета текущим пользователем.
//
// Параметры:
//	ИдентификаторОтчета - Строка - уникальный идентификатор регламентированного отчета.
//
// Возвращаемое значение:
//	Булево. Истина - пользователь имеет право использовать отчет.
//			Ложь - пользователь не имеет право использовать отчет.
//			Неопределено - указанный отчет не зарегистрирован в системе.
//
Функция ПравоДоступаКРегламентированномуОтчету(ИдентификаторОтчета) Экспорт
	
	Если НЕ РегламентированнаяОтчетность.ЭтоВнешнийОтчет(ИдентификаторОтчета) Тогда // это внутренний отчет
		
		Если Метаданные.Документы.Найти(ИдентификаторОтчета) <> Неопределено Тогда // это документ
			
			Если НЕ ПравоДоступа("Изменение", Метаданные.Документы[ИдентификаторОтчета]) Тогда
				Возврат Ложь;
			КонецЕсли;
			
		ИначеЕсли Метаданные.Отчеты.Найти(ИдентификаторОтчета) <> Неопределено Тогда // это отчет
			
			Если НЕ ПравоДоступа("Использование", Метаданные.Отчеты[ИдентификаторОтчета]) Тогда
				Возврат Ложь;
			КонецЕсли;
			
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции	


// Функция возвращает значение интервала автосохранения отчетов (в минутах)
// для пользователя текущего сеанса.
//
// Функция не имеет параметров.
// Возвращаемое значение: Число - интервал автосохранения регламентированных отчетов.
Функция ЗначениеИнтервалаАвтосохраненияРегламентированнойОтчетности() Экспорт
	
	ИнтервалАвтосохраненияРегламентированнойОтчетности = ХранилищеНастроекДанныхФорм.Загрузить("Обработка.ОбщиеОбъектыРегламентированнойОтчетности.Форма.УправлениеОтчетностьюФормаНастройки", "ФормаРеглИФинОтчетности_ИнтервалАвтосохраненияРегламентированнойОтчетности");
	Если ИнтервалАвтосохраненияРегламентированнойОтчетности = Неопределено Тогда
		ИнтервалАвтосохранения = 10;
	Иначе
		ИнтервалАвтосохранения = ИнтервалАвтосохраненияРегламентированнойОтчетности;
	КонецЕсли;
	
	Возврат ИнтервалАвтосохранения;
	
КонецФункции

// Функция возвращает значение интервала напоминания для календаря (в днях)
//
// Функция не имеет параметров.
// Возвращаемое значение: Число - интервал напоминаний регламентированных отчетов.
//
Функция ЗначениеИнтервалаНапоминанийРегламентированнойОтчетности() Экспорт

	ИнтервалНапоминанийРегламентированнойОтчетности = ХранилищеНастроекДанныхФорм.Загрузить("Обработка.КалендарьБухгалтера.Форма.ФормаКалендаря", "КалендарьБухгалтера_ИнтервалНапоминанийРегламентированнойОтчетности");
	Если ИнтервалНапоминанийРегламентированнойОтчетности = Неопределено Тогда
		ИнтервалНапоминаний = 3;
	Иначе
		ИнтервалНапоминаний = ИнтервалНапоминанийРегламентированнойОтчетности;
	КонецЕсли;
	
	Возврат ИнтервалНапоминаний;

КонецФункции

Функция ИзменитьПорядокЭлементов(Ссылка, УстановленныеОтборы, ОтображениеСписком, Вверх) Экспорт
	
	Информация = РегламентированнаяОтчетность.ПолучитьИнформациюДляПеремещенияОМетаданных(Ссылка);
	
	// Для иерархических справочников может быть установлен отбор по родителю, если нет,
	// то способ отображения должен быть иерархический или в виде дерева
	Если Информация.ЕстьРодитель И ОтображениеСписком И Не УстановленныеОтборы.ЕстьОтборПоРодителю Тогда
		Возврат НСтр("ru = 'Перед перемещением необходимо установить отображение в виде дерева или иерархического списка!'");
	КонецЕсли;
	
	// Для подчиненных справочников должен быть установлен отбор по владельцу
	Если Информация.ЕстьВладелец И НЕ УстановленныеОтборы.ЕстьОтборПоВладельцу Тогда
		Возврат НСтр("ru = 'Перед перемещением необходимо установить отбор по владельцу!'");
	КонецЕсли;
	
	// Проверим, есть ли у выбранного объекта реквизит доп. упорядочивания
	Если Информация.ЕстьГруппы Тогда
		ЭтоГруппа = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "ЭтоГруппа");
		Если ЭтоГруппа И Не Информация.ДляГрупп Тогда
			// Это группа, но для группа порядок не назначается
			Возврат "";
		ИначеЕсли Не ЭтоГруппа И Не Информация.ДляЭлементов Тогда
			// Это элемент, но для элементов порядок не назначается
			Возврат "";
		КонецЕсли;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	масУсловия = Новый Массив;
	
	// Добавим условие по родителю
	Если Информация.ЕстьРодитель Тогда
		масУсловия.Добавить("Таблица.Родитель = &Родитель");
		Запрос.УстановитьПараметр("Родитель", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "Родитель"));
	КонецЕсли;
	
	// Добавим условие по владельцу
	Если Информация.ЕстьВладелец Тогда
		масУсловия.Добавить("Таблица.Владелец = &Владелец");
		Запрос.УстановитьПараметр("Владелец", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "Владелец"));
	КонецЕсли;
	
	// Добавим условие на группу
	Если Информация.ЕстьГруппы Тогда
		Если Информация.ДляГрупп И Не Информация.ДляЭлементов Тогда
			масУсловия.Добавить("Таблица.ЭтоГруппа");
		ИначеЕсли Не Информация.ДляГрупп И Информация.ДляЭлементов Тогда
			масУсловия.Добавить("НЕ Таблица.ЭтоГруппа");
		КонецЕсли;
	КонецЕсли;
	
	// Составим строку со всеми условиями
	СтрУсловия = "";
	СтрДобавка = "
	|ГДЕ
	|	";
	Для Каждого Условие Из масУсловия Цикл
		СтрУсловия = СтрУсловия + СтрДобавка + Условие;
		СтрДобавка = "
		|	И ";
	КонецЦикла;
	
	// Составим текст запроса
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Таблица.Ссылка,
	|	Таблица.Код КАК ПорядокСтарый,
	|	Таблица.Код КАК ПорядокНовый
	|ИЗ
	|	" + Ссылка.Метаданные().ПолноеИмя() + " КАК Таблица
	|" + СтрУсловия + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	Код";
	
	
	Запрос.Текст = ТекстЗапроса;
	ТабЭлементы = Запрос.Выполнить().Выгрузить();
	
	Стр1 = ТабЭлементы.Найти(Ссылка, "Ссылка");
	Если Стр1 = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	Смещение = ?(Вверх, -1, 1);
	Индекс1 = ТабЭлементы.Индекс(Стр1);
	Индекс2 = Индекс1 + Смещение;
	Если (Индекс2 < 0) ИЛИ (Индекс2 >= ТабЭлементы.Количество()) Тогда
		Возврат "";
	КонецЕсли;
	Стр2 = ТабЭлементы[Индекс2];
	
	Стр1.ПорядокНовый = Стр2.ПорядокСтарый;
	Стр2.ПорядокНовый = Стр1.ПорядокСтарый;
	
	ТабЭлементы.Сдвинуть(Стр1, Смещение);
	
	предПорядок = 0;
	НачатьТранзакцию();
	
	Для Каждого Стр Из ТабЭлементы Цикл
		
		Если Число(предПорядок) >= Число(Стр.ПорядокНовый) Тогда
			Стр.ПорядокНовый = предПорядок + 1;
		КонецЕсли;
		предПорядок = Стр.ПорядокНовый;
		
		Если Стр.ПорядокНовый <> Стр.ПорядокСтарый Тогда
			Объект = Стр.Ссылка.ПолучитьОбъект();
			ЗаблокироватьДанныеДляРедактирования(Объект.Ссылка);
			Объект.Код = Стр.ПорядокНовый;
			Объект.Записать();
		КонецЕсли;
		
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
	Возврат "";
	
КонецФункции

Функция ДокументыСУчетомКритериевОтбораКалендарь(ИсточникОтчета, ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, ОрганизацияОтбор, Периодичность) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИсточникОтчета", ИсточникОтчета);
	Запрос.УстановитьПараметр("Организация", ОрганизацияОтбор);
	ДатаОконч = ?(НЕ ЗначениеЗаполнено(ДатаКонцаПериодаОтчета), '20291231', ДатаКонцаПериодаОтчета);
	Запрос.УстановитьПараметр("ДатаОкончания", НачалоДня(ДатаОконч));
	Запрос.УстановитьПараметр("ДатаОкончанияКон", КонецДня(ДатаОконч));
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	РегламентированныйОтчет.Ссылка
	               |ИЗ
	               |	Документ.РегламентированныйОтчет КАК РегламентированныйОтчет
	               |ГДЕ
	               |	РегламентированныйОтчет.ИсточникОтчета = &ИсточникОтчета
			   	   |	И РегламентированныйОтчет.Организация = &Организация
				   |	И (РегламентированныйОтчет.ДатаОкончания МЕЖДУ &ДатаОкончания И &ДатаОкончанияКон)";
	Если Периодичность = "Квартальная" Тогда
		Запрос.Текст = Запрос.Текст + "
					   |	И (РегламентированныйОтчет.Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Квартал))";
	КонецЕсли;
	Если Периодичность = "Месячная" Тогда
		Запрос.Текст = Запрос.Текст + "
					   |	И (РегламентированныйОтчет.Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Месяц))";
	КонецЕсли;
	
	ТаблРез = Запрос.Выполнить().Выгрузить();
	КолТаблРез = ТаблРез.Количество();
	Если КолТаблРез = 0 Тогда
		Возврат 0;
	Иначе
		Возврат КолТаблРез;
	КонецЕсли;
	
КонецФункции

Процедура ПроверитьДоступностьОтчета(ИсточникОтчета, ДатаНач, ДатаКон, Периодичность, ОрганизацияОтбор) Экспорт
	
	ТекОтчет = РегламентированнаяОтчетность.РеглОтчеты(ИсточникОтчета);
	Если ТекОтчет = Неопределено Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Не удалось открыть отчет!'");
		Сообщение.Сообщить();
		
		Возврат;
	КонецЕсли;
	
	ТекФорма = РегламентированнаяОтчетность.ФормаРеглОтчета(ИсточникОтчета);
	Если ТекФорма = Неопределено Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Не удалось открыть отчет!'");
		Сообщение.Сообщить();
		
		Возврат;
	КонецЕсли;

	Попытка
		ТекФорма.Организация =  ОрганизацияОтбор;
	Исключение
	КонецПопытки;

	Попытка
		ТекФорма.мДатаНачалаПериодаОтчета = ДатаНач;
		ТекФорма.мДатаКонцаПериодаОтчета = ДатаКон;
	Исключение
	КонецПопытки;

	Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ТекФорма, "мПериодичность") Тогда
		Если Периодичность <> Неопределено Тогда
			ТекФорма.мПериодичность = Периодичность;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Функция заполняет документ отражения налоговой отчетности в регламентированном учете
//
// Параметры:  РеглОтчет - ссылка на документ "РегламентированныйОтчет", если из вызвана из списка отчетов
//                      - объект-отчет "Регламентированный отчет", если вызван из отчета.
//             ДанныеФормы - реквизит "Объект" формы документа "Отражение налоговой отчетности ...", тип - ДанныеФормыСтруктура
//
// Возвращаемое значение: ПроцедураЗавершена = Истина, в случае если не требуются 
//							дальнейшие действия
//                        ПроцедураЗавершена = ложь, если необходимо продолжить процедуру, которая вызвала фунцию
//
Функция ЗаполнитьДокументОтражениеНалоговойОтчетностиВРеглУчете(РеглОтчет, ДанныеФормы, ДополнительныеПараметрыОтражения = Неопределено, ВнешнийОтчет = Ложь) Экспорт
	
	// ключ структуры должен полностью соответствовать значениям в колонке "Вид налога"
	// ключ - может принимать значение одного из предопред.элементов справочника "Налоги, сборы и отчисления"
	// значение - соответствующий счет налога
	// макета "Отражене в учете"
	СтруктураСоответствияВидовНалоговСчетам = Новый Структура;
	СтруктураСоответствияВидовНалоговСчетам.Вставить("ЗемельныйНалог",ПланыСчетов.Типовой.ЗемельныйНалог);
	СтруктураСоответствияВидовНалоговСчетам.Вставить("НалогНаИмущество",ПланыСчетов.Типовой.НалогНаИмущество);
	СтруктураСоответствияВидовНалоговСчетам.Вставить("ИндивидуальныйПодоходныйНалог",ПланыСчетов.Типовой.ИндивидуальныйПодоходныйНалог);
	СтруктураСоответствияВидовНалоговСчетам.Вставить("ИндивидуальныйПодоходныйНалогИностранныеГраждане",ПланыСчетов.Типовой.ИндивидуальныйПодоходныйНалог);
	СтруктураСоответствияВидовНалоговСчетам.Вставить("НалогНаДобавленнуюСтоимость",ПланыСчетов.Типовой.НалогНаДобавленнуюСтоимость);
	СтруктураСоответствияВидовНалоговСчетам.Вставить("НалогНаДобавленнуюСтоимостьСИзмененнымСрокомУплаты",ПланыСчетов.Типовой.НалогНаДобавленнуюСтоимость);
	СтруктураСоответствияВидовНалоговСчетам.Вставить("Акциз",ПланыСчетов.Типовой.Акцизы);
	СтруктураСоответствияВидовНалоговСчетам.Вставить("НалогНаПрибыль",ПланыСчетов.Типовой.КорпоративныйПодоходныйНалогПодлежащийУплате);
	СтруктураСоответствияВидовНалоговСчетам.Вставить("НалогНаТранспорт",ПланыСчетов.Типовой.НалогНаТранспортныеСредства);	
	СтруктураСоответствияВидовНалоговСчетам.Вставить("ОбязательныеСоциальныеОтчисления",ПланыСчетов.Типовой.ОбязательстваПоСоциальномуСтрахованию);
	СтруктураСоответствияВидовНалоговСчетам.Вставить("ОбязательныеПенсионныеВзносы",ПланыСчетов.Типовой.ОбязательстваПоПенсионнымОтчислениям);
	СтруктураСоответствияВидовНалоговСчетам.Вставить("СоциальныйНалог",ПланыСчетов.Типовой.СоциальныйНалог);
	СтруктураСоответствияВидовНалоговСчетам.Вставить("СоциальныйНалогИнвалиды",ПланыСчетов.Типовой.СоциальныйНалог);
	СтруктураСоответствияВидовНалоговСчетам.Вставить("СоциальныйНалогИностранныеСпециалисты",ПланыСчетов.Типовой.СоциальныйНалог);
	
	ПредставлениеДокументаОтражения = Метаданные.Документы.ОтражениеНалоговойОтчетностиВРеглУчете.Представление();
	
	Если ТипЗнч(РеглОтчет) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
		
		СохраненныйДок = РеглОтчет;
		
		НазваниеОтчета = СохраненныйДок.ИсточникОтчета;
		
		Макет = РегламентированнаяОтчетность.ПолучитьМакетРеглОтчета(НазваниеОтчета, "ОтражениевУчете", ВнешнийОтчет);
		
		Если Макет = Неопределено Тогда
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось сформировать документ «%1».'"), ПредставлениеДокументаОтражения);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			Возврат Ложь;
		КонецЕсли;
		
		СписокСохранения = СохраненныйДок.ДанныеОтчета.Получить();
		СписокФормБезИерархии   = Неопределено;
		СписокСтруктурныхЕдиниц = Неопределено;
		Если СписокСохранения.Свойство("ПоказателиОтчета") Тогда // Используется старая версия отчета
			СписокСохранения.Свойство("ПоказателиОтчета", СписокФормБезИерархии);
			СписокСохранения.Свойство("СписокСтруктурныхЕдиниц", СписокСтруктурныхЕдиниц); 
		ИначеЕсли СписокСохранения.Свойство("СтруктураДополнительныхРеквизитовФормы") Тогда
			СтруктураДополнительныхРеквизитовФормы = СписокСохранения.СтруктураДополнительныхРеквизитовФормы;
			СтруктураДополнительныхРеквизитовФормы.Свойство("мСписокФормБезИерархии", СписокФормБезИерархии);
			СтруктураДополнительныхРеквизитовФормы.Свойство("мСписокСтруктурныхЕдиниц", СписокСтруктурныхЕдиниц); 
		Иначе
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Документ «%1» не предназначен для текущего отчета.'"), ПредставлениеДокументаОтражения);
	 		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);	
			Возврат Документы.ОтражениеНалоговойОтчетностиВРеглУчете.ПустаяСсылка();
		КонецЕсли;
		Если СписокСтруктурныхЕдиниц = Неопределено Тогда
			СписокСтруктурныхЕдиниц = Новый СписокЗначений;
		КонецЕсли;
		
	Иначе
		
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Документ «%1» не предназначен для текущего отчета.'"), ПредставлениеДокументаОтражения);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат Ложь;
		
	КонецЕсли;
	
	ОбластьОтражениеВУчетеДляТекущегоОтчета = Макет.Области.Найти(СохраненныйДок.ВыбраннаяФорма);
	
	Если ОбластьОтражениеВУчетеДляТекущегоОтчета = Неопределено Тогда 
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Документ «%1» не предназначен для текущего отчета.'"), ПредставлениеДокументаОтражения);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат Документы.ОтражениеНалоговойОтчетностиВРеглУчете.ПустаяСсылка();
	КонецЕсли;
	
	ТаблицаОтраженияВУчете = РегламентированнаяОтчетность.ПолучитьТаблицуОтраженияВУчете(СохраненныйДок, Макет, СписокФормБезИерархии, СписокСтруктурныхЕдиниц, ДополнительныеПараметрыОтражения);
	
	КолонкиГруппировок = "";
	КолонкиСуммирования = "";
	
	Если ДополнительныеПараметрыОтражения <> Неопределено Тогда
		
		// Для обработки дополнительных данных
		ПоказателиОтчета = Новый Структура;
		ПараметрыОтчета  = Новый Структура;
		
		ДополнительныеПараметрыОтражения.Свойство("ПоказателиОтчета", ПоказателиОтчета);
		ДополнительныеПараметрыОтражения.Свойство("ПараметрыОтчета",  ПараметрыОтчета);
		
		Для Каждого Показатель Из ПоказателиОтчета Цикл
			КолонкиСуммирования = КолонкиСуммирования + ", " + Показатель.Ключ;
		КонецЦикла;
		
		Для Каждого Параметр Из ПараметрыОтчета Цикл
			КолонкиГруппировок = КолонкиГруппировок + ", " + Параметр.Ключ;
		КонецЦикла;
		
	КонецЕсли;
	
	// проверим есть ли данные для отражения
	ОбщаяСуммаОтраженияВУчете = ТаблицаОтраженияВУчете.Итог("Значение");
	
	Если ОбщаяСуммаОтраженияВУчете <> Неопределено И ОбщаяСуммаОтраженияВУчете <> 0 Тогда
		// создадим документ и покажем пользователю
		Если ДополнительныеПараметрыОтражения = Неопределено ИЛИ Не ДополнительныеПараметрыОтражения.Свойство("ТаблицаДобавленныхПриложенийДляОтражения") Тогда
			ТаблицаОтраженияВУчете.Свернуть("ВидНалога, ДатаУплаты, КБК, ДатаНачалаОтчета, 
			|ДатаОкончанияОтчета, Организация, СтруктурнаяЕдиница, РННПлательщика, Комментарий" + КолонкиГруппировок, "Значение" + КолонкиСуммирования);
			ТаблицаОтраженияВУчете.Сортировать("ДатаУплаты Возр, КБК Возр");
		Иначе
			//Для Формы 700 
			ТаблицаОтраженияВУчете.Сортировать("ДатаУплаты Возр, КБК Возр");
		КонецЕсли;
		
		// здесь передадим данные в документ
		ДанныеЗаполнения = Новый Структура;
		ДанныеЗаполнения.Вставить("Дата"             , ТекущаяДата());
		ДанныеЗаполнения.Вставить("ВидУчетаНУ"       , Справочники.ВидыУчетаНУ.НУ);
		ДанныеЗаполнения.Вставить("Организация"      , СохраненныйДок.Организация);
		ДанныеЗаполнения.Вставить("УчитыватьКПН"     , Истина);
		ДанныеЗаполнения.Вставить("СуммаДокумента"   , ОбщаяСуммаОтраженияВУчете);
		ДанныеЗаполнения.Вставить("НалоговыйКомитет" , СохраненныйДок.НалоговыйКомитет);
		ДанныеЗаполнения.Вставить("ДокументОснование", СохраненныйДок);
		
		ДанныеЗаполнения.Вставить("ТаблицаОтраженияВУчете"          , ТаблицаОтраженияВУчете);
		ДанныеЗаполнения.Вставить("ДополнительныеПараметрыОтражения", ДополнительныеПараметрыОтражения);
		
		ДанныеЗаполнения.Вставить("СтруктураСоответствияВидовНалоговСчетам", СтруктураСоответствияВидовНалоговСчетам);
		
		ДанныеЗаполнения.Вставить("Комментарий", СохраненныйДок.НаименованиеОтчета + "; " + СохраненныйДок.ПредставлениеПериода);
		
		ДокументОбъект = ДанныеФормыВЗначение(ДанныеФормы, Тип("ДокументОбъект.ОтражениеНалоговойОтчетностиВРеглУчете"));
		ДокументОбъект.Заполнить(ДанныеЗаполнения);
		ЗначениеВДанныеФормы(ДокументОбъект, ДанныеФормы);
		
		Возврат Истина;

	Иначе
		ТекстСообщения = НСтр("ru='Нет данных для отражения в учете!'");
 		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат Ложь;
		
	КонецЕсли;	
		
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция ВерсияФормыСовпадаетСВерсиейСохраненногоОтчета(Док, ВерсияФормы) Экспорт
	
	ВерсияФормыДанных = Док.ДанныеОтчета.Получить().ВерсияФормы;
	
	Если НЕ РегламентированнаяОтчетность.ПродолжитьПриНесоответствииВерсийФорм(ВерсияФормыДанных, ВерсияФормы) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ИнициализироватьОтчет(ИсточникОтчета) Экспорт
	ТекОтчет = РегламентированнаяОтчетность.РеглОтчеты(ИсточникОтчета);
	Возврат ТекОтчет;
КонецФункции

Функция ПолныйПутьКФорме(ИсточникОтчета, ВыбраннаяФорма) Экспорт
	
	ЭтоВнешнийОтчет = РегламентированнаяОтчетность.ЭтоВнешнийОтчет(ИсточникОтчета);
	Возврат ?(ЭтоВнешнийОтчет, "ВнешнийОтчет.", "Отчет.") + ИсточникОтчета + ".Форма." + ВыбраннаяФорма;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Выгрузка отчетов

Функция ПолучитьПараметрыФормыИзСохраненногоОтчета(Док, ПредставлениеДокументаРеглОтч) Экспорт
	
	ПредставлениеДокументаРеглОтч = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеДокументаРеглОтч(Док.Ссылка);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("мДатаНачалаПериодаОтчета", НачалоДня(Док.ДатаНачала));
	ПараметрыФормы.Вставить("мДатаКонцаПериодаОтчета",  КонецДня(Док.ДатаОкончания));
	ПараметрыФормы.Вставить("мСохраненныйДок",          Док.Ссылка);
	ПараметрыФормы.Вставить("мПериодичность",           Док.Периодичность);
	ПараметрыФормы.Вставить("мВыбраннаяФорма",          Док.ВыбраннаяФорма);
	ПараметрыФормы.Вставить("ИсточникОтчета",           Док.ИсточникОтчета);
	ПараметрыФормы.Вставить("Организация",              Док.Организация);
			
	Возврат ПараметрыФормы;
	
КонецФункции

Функция ПроверитьВозможностьВыгрузки(Доки) Экспорт
	
	Для Каждого Док Из Доки Цикл
		Если Док.Значение.Организация <> Доки.Получить(0).Значение.Организация Тогда
			Возврат 1;
		КонецЕсли;
		Если КонецДня(Док.Значение.ДатаОкончания) <> КонецДня(Доки.Получить(0).Значение.ДатаОкончания) Тогда
			Возврат 2;
		КонецЕсли;
	КонецЦикла;
		
	Возврат 0;
	
КонецФункции

