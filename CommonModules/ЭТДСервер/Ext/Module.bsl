
#Область ПрограммныйИнтерфейс

Функция ФоновоеЗаданиеЗапущено(Знач ИмяПроцедуры) Экспорт
	
	Возврат ЭТДСерверПереопределяемый.ФоновоеЗаданиеЗапущено(ИмяПроцедуры);

КонецФункции

Функция ПараметрыВыполненияВФоне(Знач ИдентификаторФормы = Неопределено) Экспорт
	
	Возврат ЭТДСерверПереопределяемый.ПараметрыВыполненияВФоне(ИдентификаторФормы);
	
КонецФункции

Функция ВыполнитьВФоне(Знач ИмяПроцедуры, Знач ПараметрыПроцедуры, Знач ПараметрыВыполнения) Экспорт
	
	Возврат ЭТДСерверПереопределяемый.ВыполнитьВФоне(ИмяПроцедуры, ПараметрыПроцедуры, ПараметрыВыполнения);
	
КонецФункции

Процедура ПриСозданииНаСервереЭТД(Форма) Экспорт
	
	ЭТДСерверПереопределяемый.ПриСозданииНаСервереЭТД(Форма);
	
КонецПроцедуры

Процедура ПриСозданииНаСервереФормыСпискаЭТД(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	ЭТДСерверПереопределяемый.ПриСозданииНаСервереФормыСпискаЭТД(Форма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ПриСозданииНаСервереФормыСпискаРегистраСведений(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	ЭТДСерверПереопределяемый.ПриСозданииНаСервереФормыСпискаРегистраСведений(Форма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ПриСозданииНаСервереРабочееМестоЭТД(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	ЭТДСерверПереопределяемый.ПриСозданииНаСервереРабочееМестоЭТД(Форма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ПриСозданииНаСервереСопоставлениеДолжностей(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	ЭТДСерверПереопределяемый.ПриСозданииНаСервереСопоставлениеДолжностей(Форма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ПриСозданииНаСервереСопоставлениеДолжностейЭТД(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	ЭТДСерверПереопределяемый.ПриСозданииНаСервереСопоставлениеДолжностейЭТД(Форма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ПриСозданииНаСервереСопоставлениеПричинРасторженияЭТД(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	ЭТДСерверПереопределяемый.ПриСозданииНаСервереСопоставлениеПричинРасторженияЭТД(Форма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ПриСозданииНаСервереСопоставлениеПрофилейНавыковЭТД(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	ЭТДСерверПереопределяемый.ПриСозданииНаСервереСопоставлениеПрофилейНавыковЭТД(Форма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

Функция ПолучитьДанныеДляАвтозаполненияЭТД(Организация, Период) Экспорт
	
	Возврат ЭТДСерверПереопределяемый.ПолучитьДанныеДляАвтозаполненияЭТД(Организация, Период);
	
КонецФункции

Функция ПолучитьДолжностьОрганизации(ДолжностьПоШтатномуРасписанию) Экспорт
	
	Возврат ЭТДСерверПереопределяемый.ПолучитьДолжностьОрганизации(ДолжностьПоШтатномуРасписанию)
	
КонецФункции

// Возвращает код должности республиканского справочника должностей и дату начала действия этого кода
//
// Параметры:
//  Должность	 - СправочникСсылка.ДолжностиОрганизаций - Для какой должности получить код должности
//  Организация	 - СправочникСсылка.Организации			 - Организация
// 
// Возвращаемое значение:
//  Структура - Код должности и дата начала его действия. 
//				В случае отсутствия сопоставления возвращает структуру с пустыми значениями
//
Функция ПолучитьИнформациюОКодеДолжности(Период, Должность, ДолжностьПоШтатномуРасписанию, Организация) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("КодДолжности", "");
	Результат.Вставить("НаименованиеДолжности", "");
	
	ИспользоватьШтатноеРасписание = ИспользоватьШтатноеРасписание();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЕСТЬNULL(СопоставлениеДолжностейЭТД.КодДолжностиЭТД, СопоставлениеДолжностейЭТДАктуальное.КодДолжностиЭТД) КАК КодДолжности,
		|	ЕСТЬNULL(СопоставлениеДолжностейЭТД.НаименованиеЭТД, СопоставлениеДолжностейЭТДАктуальное.НаименованиеЭТД) КАК НаименованиеДолжности
		|ИЗ
		|	РегистрСведений.СопоставлениеДолжностейЭТД.СрезПоследних(
		|			&ТекущаяДата,
		|			Организация = &Организация
		|				"+?(ИспользоватьШтатноеРасписание,"И ДолжностьПоШтатномуРасписанию = &ДолжностьПоШтатномуРасписанию","")+"
		|				"+?(ИспользоватьШтатноеРасписание,"","И ДолжностьОрганизации = &Должность")+") КАК СопоставлениеДолжностейЭТДАктуальное
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СопоставлениеДолжностейЭТД.СрезПоследних(
		|			&Период,
		|			Организация = &Организация
		|				"+?(ИспользоватьШтатноеРасписание,"И ДолжностьПоШтатномуРасписанию = &ДолжностьПоШтатномуРасписанию","")+"
		|				"+?(ИспользоватьШтатноеРасписание,"","И ДолжностьОрганизации = &Должность")+") КАК СопоставлениеДолжностейЭТД
		|		ПО СопоставлениеДолжностейЭТДАктуальное.ДолжностьОрганизации = СопоставлениеДолжностейЭТД.ДолжностьОрганизации
		|			И СопоставлениеДолжностейЭТДАктуальное.ДолжностьПоШтатномуРасписанию = СопоставлениеДолжностейЭТД.ДолжностьПоШтатномуРасписанию";
	
	Запрос.УстановитьПараметр("Период", ?(ЗначениеЗаполнено(Период), Период, ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("Должность", Должность);
	Запрос.УстановитьПараметр("ДолжностьПоШтатномуРасписанию", ДолжностьПоШтатномуРасписанию);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Результат, Выборка);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьПрофильНавыков(Период, ДолжностьПоШтатномуРасписанию, Сотрудник, Организация) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СопоставлениеПрофилейНавыковЭТДСрезПоследних.ПрофильНавыков КАК ПрофильНавыков
		|ИЗ
		|	РегистрСведений.СопоставлениеПрофилейНавыковЭТД.СрезПоследних(
		|			&Период,
		|			Организация = &Организация
		|				И (ВладелецПрофиля = &ДолжностьПоШтатномуРасписанию
		|					ИЛИ ВладелецПрофиля = &Сотрудник)) КАК СопоставлениеПрофилейНавыковЭТДСрезПоследних";
	
	Запрос.УстановитьПараметр("Период", ?(ЗначениеЗаполнено(Период), Период, ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	Запрос.УстановитьПараметр("ДолжностьПоШтатномуРасписанию", ДолжностьПоШтатномуРасписанию);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ПрофильНавыков;
	КонецЕсли;
	
	Возврат Справочники.ПрофилиНавыковЭТД.ПустаяСсылка();
	
КонецФункции

Функция ПолучитьДанныеПрофилейПоНастройкам(Период, Сотрудник, Должность, ДолжностьПоШтатномуРасписанию, Организация) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 	
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СопоставлениеПрофилейНавыковЭТДСрезПоследних.ПрофильНавыков КАК ПрофильНавыков,
	|	1 КАК Приоритет
	|ПОМЕСТИТЬ ВТ_ПрофилиПоПриоритетам
	|ИЗ
	|	РегистрСведений.СопоставлениеПрофилейНавыковЭТД.СрезПоследних(
	|			&Период,
	|			Организация = &Организация
	|				И ВладелецПрофиля = &Сотрудник) КАК СопоставлениеПрофилейНавыковЭТДСрезПоследних
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СопоставлениеПрофилейНавыковЭТДСрезПоследних.ПрофильНавыков,
	|	2
	|ИЗ
	|	РегистрСведений.СопоставлениеПрофилейНавыковЭТД.СрезПоследних(
	|			&Период,
	|			Организация = &Организация
	|				И (ВладелецПрофиля = &Должность
	|					ИЛИ ВладелецПрофиля = &ДолжностьПоШтатномуРасписанию)) КАК СопоставлениеПрофилейНавыковЭТДСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ПрофилиПоПриоритетам.Приоритет КАК Приоритет
	|ПОМЕСТИТЬ ВТ_МаксимумыПриоритетов
	|ИЗ
	|	ВТ_ПрофилиПоПриоритетам КАК ВТ_ПрофилиПоПриоритетам
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПрофилиНавыковЭТДОбщиеНавыки.КодНавыка КАК КодНавыка,
	|	ПрофилиНавыковЭТДОбщиеНавыки.Наименование КАК Наименование
	|ИЗ
	|	ВТ_ПрофилиПоПриоритетам КАК ВТ_ПрофилиПоПриоритетам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_МаксимумыПриоритетов КАК ВТ_МаксимумыПриоритетов
	|		ПО ВТ_ПрофилиПоПриоритетам.Приоритет = ВТ_МаксимумыПриоритетов.Приоритет
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПрофилиНавыковЭТД.ОбщиеНавыки КАК ПрофилиНавыковЭТДОбщиеНавыки
	|		ПО ВТ_ПрофилиПоПриоритетам.ПрофильНавыков = ПрофилиНавыковЭТДОбщиеНавыки.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПрофилиНавыковЭТДОбщиеНавыки.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПрофилиНавыковЭТДПрофессиональныеНавыки.КодНавыка КАК КодНавыка,
	|	ПрофилиНавыковЭТДПрофессиональныеНавыки.Наименование КАК Наименование
	|ИЗ
	|	ВТ_ПрофилиПоПриоритетам КАК ВТ_ПрофилиПоПриоритетам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_МаксимумыПриоритетов КАК ВТ_МаксимумыПриоритетов
	|		ПО ВТ_ПрофилиПоПриоритетам.Приоритет = ВТ_МаксимумыПриоритетов.Приоритет
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПрофилиНавыковЭТД.ПрофессиональныеНавыки КАК ПрофилиНавыковЭТДПрофессиональныеНавыки
	|		ПО ВТ_ПрофилиПоПриоритетам.ПрофильНавыков = ПрофилиНавыковЭТДПрофессиональныеНавыки.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПрофилиНавыковЭТДПрофессиональныеНавыки.НомерСтроки";
	
	Запрос.УстановитьПараметр("Период", Период);
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	Запрос.УстановитьПараметр("Должность", Должность);
	Запрос.УстановитьПараметр("ДолжностьПоШтатномуРасписанию", ДолжностьПоШтатномуРасписанию);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	ВыгрузкаНавыков = Запрос.ВыполнитьПакет();
	
	НавыкиПоВидам = Новый Структура();
	
	НавыкиПоВидам.Вставить("ОбщиеНавыки", ВыгрузкаНавыков[2].Выгрузить());
	НавыкиПоВидам.Вставить("ПрофессиональныеНавыки", ВыгрузкаНавыков[3].Выгрузить());
		
	Возврат НавыкиПоВидам;
	
КонецФункции

// Возвращает код причины расторжения договора республиканского справочника и дату начала действия этого кода
//
// Параметры:
//	ОснованиеУвольнения - СправочникСсылка.ОснованиеУвольненияИзОрганизации - Для какого основания увольнения получить код причины
//	Дата                - Дата - На какую дату получить код причины
//
// Возвращаемое значение:
//	Структура           - Код причины расторжения и дата начала его действия. В случае отсутствия сопоставления возвращает структуру с пустыми значениями
//
Функция ПолучитьИнформациюОПричинеРасторжения(Период, Организация, ОснованиеУвольнения) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("КодПричиныРасторженияЭТД", "");
	Результат.Вставить("Дата", '00010101');
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	1 КАК Приоритет,
		|	СопоставлениеПричинРасторженияЭТДСрезПоследних.КодПричиныРасторженияЭТД КАК КодПричиныРасторженияЭТД,
		|	СопоставлениеПричинРасторженияЭТДСрезПоследних.Период КАК Дата,
		|	СопоставлениеПричинРасторженияЭТДСрезПоследних.ОснованиеУвольнения КАК ОснованиеУвольнения
		|ПОМЕСТИТЬ ВТПричиныРасторженияЭТД
		|ИЗ
		|	РегистрСведений.СопоставлениеПричинРасторженияЭТД.СрезПоследних(
		|			&Период,
		|			Организация = &Организация
		|				И ОснованиеУвольнения = &ОснованиеУвольнения) КАК СопоставлениеПричинРасторженияЭТДСрезПоследних
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	2,
		|	СопоставлениеПричинРасторженияЭТДСрезПоследних.КодПричиныРасторженияЭТД,
		|	СопоставлениеПричинРасторженияЭТДСрезПоследних.Период,
		|	СопоставлениеПричинРасторженияЭТДСрезПоследних.ОснованиеУвольнения
		|ИЗ
		|	РегистрСведений.СопоставлениеПричинРасторженияЭТД.СрезПоследних(
		|			&Период,
		|			Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|				И ОснованиеУвольнения = &ОснованиеУвольнения) КАК СопоставлениеПричинРасторженияЭТДСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МИНИМУМ(ВТПричиныРасторженияЭТД.Приоритет) КАК Приоритет,
		|	ВТПричиныРасторженияЭТД.ОснованиеУвольнения КАК ОснованиеУвольнения
		|ПОМЕСТИТЬ ВТПриоритетыПричинРасторжения
		|ИЗ
		|	ВТПричиныРасторженияЭТД КАК ВТПричиныРасторженияЭТД
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТПричиныРасторженияЭТД.ОснованиеУвольнения
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТПричиныРасторженияЭТД.КодПричиныРасторженияЭТД КАК КодПричиныРасторженияЭТД,
		|	ВТПричиныРасторженияЭТД.Дата КАК Дата
		|ИЗ
		|	ВТПриоритетыПричинРасторжения КАК ВТПриоритетыПричинРасторжения
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПричиныРасторженияЭТД КАК ВТПричиныРасторженияЭТД
		|		ПО ВТПриоритетыПричинРасторжения.Приоритет = ВТПричиныРасторженияЭТД.Приоритет
		|			И ВТПриоритетыПричинРасторжения.ОснованиеУвольнения = ВТПричиныРасторженияЭТД.ОснованиеУвольнения";
	
	Запрос.УстановитьПараметр("Период", Период);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ОснованиеУвольнения", ОснованиеУвольнения);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Результат, Выборка);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьИнформациюОбОснованииРасторжения(Период, Организация, КодПричиныРасторженияЭТД) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ОснованиеУвольнения", Неопределено);
	Результат.Вставить("Дата", '00010101');
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	1 КАК Приоритет,
		|	СопоставлениеПричинРасторженияЭТДСрезПоследних.КодПричиныРасторженияЭТД КАК КодПричиныРасторженияЭТД,
		|	СопоставлениеПричинРасторженияЭТДСрезПоследних.Период КАК Дата,
		|	СопоставлениеПричинРасторженияЭТДСрезПоследних.ОснованиеУвольнения КАК ОснованиеУвольнения
		|ПОМЕСТИТЬ ВТПричиныРасторженияЭТД
		|ИЗ
		|	РегистрСведений.СопоставлениеПричинРасторженияЭТД.СрезПоследних(
		|			&Период,
		|			Организация = &Организация
		|				И КодПричиныРасторженияЭТД = &КодПричиныРасторженияЭТД) КАК СопоставлениеПричинРасторженияЭТДСрезПоследних
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	2,
		|	СопоставлениеПричинРасторженияЭТДСрезПоследних.КодПричиныРасторженияЭТД,
		|	СопоставлениеПричинРасторженияЭТДСрезПоследних.Период,
		|	СопоставлениеПричинРасторженияЭТДСрезПоследних.ОснованиеУвольнения
		|ИЗ
		|	РегистрСведений.СопоставлениеПричинРасторженияЭТД.СрезПоследних(
		|			&Период,
		|			Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|				И КодПричиныРасторженияЭТД = &КодПричиныРасторженияЭТД) КАК СопоставлениеПричинРасторженияЭТДСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МИНИМУМ(ВТПричиныРасторженияЭТД.Приоритет) КАК Приоритет,
		|	ВТПричиныРасторженияЭТД.КодПричиныРасторженияЭТД КАК КодПричиныРасторженияЭТД
		|ПОМЕСТИТЬ ВТПриоритетыПричинРасторжения
		|ИЗ
		|	ВТПричиныРасторженияЭТД КАК ВТПричиныРасторженияЭТД
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТПричиныРасторженияЭТД.КодПричиныРасторженияЭТД
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТПричиныРасторженияЭТД.ОснованиеУвольнения КАК ОснованиеУвольнения,
		|	ВТПричиныРасторженияЭТД.Дата КАК Дата
		|ИЗ
		|	ВТПриоритетыПричинРасторжения КАК ВТПриоритетыПричинРасторжения
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПричиныРасторженияЭТД КАК ВТПричиныРасторженияЭТД
		|		ПО ВТПриоритетыПричинРасторжения.Приоритет = ВТПричиныРасторженияЭТД.Приоритет
		|			И ВТПриоритетыПричинРасторжения.КодПричиныРасторженияЭТД = ВТПричиныРасторженияЭТД.КодПричиныРасторженияЭТД";
	
	Запрос.УстановитьПараметр("Период", Период);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("КодПричиныРасторженияЭТД", КодПричиныРасторженияЭТД);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Результат, Выборка);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает организацию по умолчанию
// 
// Возвращаемое значение:
//  СправочникСсылка.Организации - Организация по умолчанию
//
Функция ОрганизацияПоУмолчанию() Экспорт
	
	Возврат ЭТДСерверПереопределяемый.ОрганизацияПоУмолчанию();
	
КонецФункции

// Возвращает БИН организации
//
// Параметры:
//  Организация	- СправочникСсылка.Организации - Организация
// 
// Возвращаемое значение:
//  Строка - БИН
//
Функция БИНОрганизации(Организация) Экспорт
	
	Возврат ЭТДСерверПереопределяемый.БИНОрганизации(Организация);
	
КонецФункции

// Возвращает ИИН работника
//
// Параметры:
//  ФизическоеЛицо	- СправочникСсылка.ФизическиеЛица - физическое лицо
// 
// Возвращаемое значение:
//  Строка - ИИН
//
Функция ИИНРаботника(ФизическоеЛицо) Экспорт
	
	Возврат ЭТДСерверПереопределяемый.ИИНРаботника(ФизическоеЛицо);
	
КонецФункции

Функция ИдентификаторЭТД(Документ) Экспорт
	
	Возврат ЭТДСерверПереопределяемый.ИдентификаторЭТД(Документ);
	
КонецФункции

Функция ПолучитьДанныеСотрудника(Период, Сотрудник) Экспорт
	
	Возврат ЭТДСерверПереопределяемый.ПолучитьДанныеСотрудника(Период, Сотрудник);
	
КонецФункции

Функция ПолучитьПерезаполняемыеДанныеСотрудника() Экспорт
	
	Возврат ЭТДСерверПереопределяемый.ПолучитьПерезаполняемыеДанныеСотрудника();
	
КонецФункции

Функция ПолучитьТекущегоПользователя() Экспорт

	Возврат ЭТДСерверПереопределяемый.ПолучитьТекущегоПользователя();
	
КонецФункции

Функция ИспользоватьШтатноеРасписание() Экспорт
	
	Возврат ЭТДСерверПереопределяемый.ИспользоватьШтатноеРасписание();
	
КонецФункции

// Возвращает текст запроса для получения основных договоров
// 
// Возвращаемое значение:
//  Строка - Текст запроса
//
Процедура СформироватьЗапросОсновныеДоговоры(Запрос) Экспорт
	
	ЭТДСерверПереопределяемый.СформироватьЗапросОсновныеДоговоры(Запрос);
	
КонецПроцедуры

// Возвращает текст запроса для получения дополнительных соглашений
// 
// Возвращаемое значение:
//  Строка - Текст запроса
//
Процедура СформироватьЗапросДопСоглашения(Запрос) Экспорт
	
	ЭТДСерверПереопределяемый.СформироватьЗапросДопСоглашения(Запрос);
	
КонецПроцедуры

// Возвращает текст запроса для получения договоров ранее уволенных сотрудников
// 
// Возвращаемое значение:
//  Строка - Текст запроса
//
Процедура СформироватьЗапросДоговорыУволенных(Запрос) Экспорт
	
	ЭТДСерверПереопределяемый.СформироватьЗапросДоговорыУволенных(Запрос);
	
КонецПроцедуры

// Возвращает текст запроса для сопоставления должностей
// 
// Возвращаемое значение:
//  Строка - Текст запроса
//
Процедура СформироватьЗапросСопоставлениеДолжностей(Запрос) Экспорт
	
	ЭТДСерверПереопределяемый.СформироватьЗапросСопоставлениеДолжностей(Запрос);
	
КонецПроцедуры

// Возвращает текст запроса для получения договоров с просроченным сроком действия
// 
// Возвращаемое значение:
//  Строка - Текст запроса
//
Процедура СформироватьЗапросПросроченныеДоговоры(Запрос) Экспорт
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЭТД.Ссылка КАК Ссылка,
		|	ЭТД.ДатаНачала КАК ДатаНачала,
		|	ЭТД.ДатаОкончания КАК ДатаОкончания,
		|	ЭТД.СрокДействия КАК СрокДействия
		|ПОМЕСТИТЬ ВТ_ВсеСрокиДействия
		|ИЗ
		|	Документ.ЭТД КАК ЭТД
		|ГДЕ
		|	ЭТД.Организация = &Организация
		|	И НЕ ЭТД.ЭтоДополнительноеСоглашение
		|	И ЭТД.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЭТД.Зарегистрирован)
		|	И НЕ ЭТД.ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЭТДПролонгацияДоговора.Ссылка,
		|	ЭТДПролонгацияДоговора.ДатаПролонгации,
		|	ЭТДПролонгацияДоговора.ДатаОкончанияПролонгации,
		|	ЭТДПролонгацияДоговора.СрокДействияПролонгации
		|ИЗ
		|	Документ.ЭТД.ПролонгацияДоговора КАК ЭТДПролонгацияДоговора
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭТД КАК ЭТД
		|		ПО ЭТДПролонгацияДоговора.Ссылка = ЭТД.Ссылка
		|ГДЕ
		|	ЭТД.Организация = &Организация
		|	И НЕ ЭТД.ЭтоДополнительноеСоглашение
		|	И ЭТД.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЭТД.Зарегистрирован)
		|	И НЕ ЭТД.ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЭТД.ОсновнойЭТД,
		|	ЭТД.ДатаНачала,
		|	ЭТД.ДатаОкончанияДоговора,
		|	ЭТД.СрокДействия
		|ИЗ
		|	Документ.ЭТД КАК ЭТД
		|ГДЕ
		|	ЭТД.Организация = &Организация
		|	И ЭТД.ЭтоДополнительноеСоглашение
		|	И ЭТД.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЭТД.Зарегистрирован)
		|	И НЕ ЭТД.ПометкаУдаления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ВсеСрокиДействия.Ссылка КАК Ссылка,
		|	МАКСИМУМ(ВТ_ВсеСрокиДействия.ДатаНачала) КАК ДатаНачала
		|ПОМЕСТИТЬ ВТ_ПоследнийСрокДействия
		|ИЗ
		|	ВТ_ВсеСрокиДействия КАК ВТ_ВсеСрокиДействия
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_ВсеСрокиДействия.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЭТД.Ссылка КАК ЭТДСсылка,
		|	ЭТД.Сотрудник КАК Сотрудник,
		|	ЭТД.ДатаЗаключения КАК ДатаНачала,
		|	ЕСТЬNULL(ВсеСрокиДействия.ДатаОкончания, ЭТД.ДатаОкончания) КАК ДатаОкончанияДействия,
		|	ЭТД.НомерДоговора КАК НомерДоговора
		|ИЗ
		|	Документ.ЭТД КАК ЭТД
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ВсеСрокиДействия КАК ВсеСрокиДействия
		|		ПО ЭТД.Ссылка = ВсеСрокиДействия.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПоследнийСрокДействия КАК ПоследнийСрокДействия
		|		ПО (ВсеСрокиДействия.Ссылка = ПоследнийСрокДействия.Ссылка)
		|			И (ВсеСрокиДействия.ДатаНачала = ПоследнийСрокДействия.ДатаНачала)
		|ГДЕ
		|	ЭТД.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЭТД.Зарегистрирован)
		|	И ВсеСрокиДействия.ДатаОкончания <> ДАТАВРЕМЯ(1,1,1)
		|	И ЕСТЬNULL(ВсеСрокиДействия.ДатаОкончания, ЭТД.ДатаОкончания) < НАЧАЛОПЕРИОДА(&ТекущаяДата, ДЕНЬ)
		|	И НЕ ЭТД.ПометкаУдаления
		|	И НЕ ЭТД.ЭтоДополнительноеСоглашение";
	
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	
КонецПроцедуры

// Возвращает текст запроса для получения расторгнутых договоров работающих сотрудников
// 
// Возвращаемое значение:
//  Строка - Текст запроса
//
Процедура СформироватьЗапросВосстановленныеДоговоры(Запрос) Экспорт
	
	ЭТДСерверПереопределяемый.СформироватьЗапросВосстановленныеДоговоры(Запрос);
	
КонецПроцедуры

// Функция возвращает дерево значений с данными.
//
Функция ПолучитьДанныеКлассификатора(ВидКлассификатора) Экспорт
	
	Текст = Новый ТекстовыйДокумент;
	Текст = Обработки.ОбменЭТД.ПолучитьМакет("Классификатор"+ВидКлассификатора);
	ТекстМакета = Текст.ПолучитьТекст();
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(ТекстМакета);
		
	Возврат ЗначениеИзСтрокиXML(ТекстМакета);
	
КонецФункции

Функция ЭТД_ЗаписатьЗначениеJSON(Значение) Экспорт
	
	Запись = Новый ЗаписьJSON;
	Запись.УстановитьСтроку();
	ЗаписатьJSON(Запись, Значение);
	
	Возврат Запись.Закрыть();
	
КонецФункции

Функция ЭТД_ПрочитатьЗначениеJSON(Значение, СвойстваДаты = "") Экспорт
	
	Чтение = Новый ЧтениеJSON;
	Чтение.УстановитьСтроку(Значение);
	Результат = ПрочитатьJSON(Чтение, Ложь, СвойстваДаты);
	Чтение.Закрыть();
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьСотрудникаПоИИН(ИИН, Организация, ДатаЗаключения) Экспорт
	
	Возврат ЭТДСерверПереопределяемый.ПолучитьСотрудникаПоИИН(ИИН, Организация, ДатаЗаключения);
	
КонецФункции

Функция ПолучитьИИНПоСотруднику(Сотрудник) Экспорт
	
	Возврат ЭТДСерверПереопределяемый.ПолучитьИИНПоСотруднику(Сотрудник);
	
КонецФункции

Функция ТекстЗапросаКоличествоДляНумерации() Экспорт 

	Результат =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЭТД.Ссылка) КАК Количество
		|ИЗ
		|	Документ.ЭТД КАК ЭТД
		|ГДЕ
		|	ЭТД.ОсновнойЭТД = &ОсновнойДоговор";
	
	Возврат Результат;

КонецФункции

Процедура ЗаполнитьПараметрыЭТД(Перезаписать = Ложь, ПараметрыЗаполнения) Экспорт
	
	ПараметрыЭТДКонстанта = Константы.ПараметрыЭТД.Получить();
	Если НЕ ЗначениеЗаполнено(ПараметрыЭТДКонстанта) ИЛИ Перезаписать Тогда
		ПараметрыЭТД = Новый Структура();
		Если ПараметрыЗаполнения.Свойство("АдресСервисаЭТД") Тогда
			ПараметрыЭТД.Вставить("АдресСервисаЭТД", ПараметрыЗаполнения.АдресСервисаЭТД);
		Иначе
			ПараметрыЭТД.Вставить("АдресСервисаЭТД", ЭТДКлиентСервер.АдресПродуктивногоСтенда());
		КонецЕсли;
		ПараметрыЭТД.Вставить("АдресОтправкиДоговоров", "/etd/api/input/sign-contract");
		ПараметрыЭТД.Вставить("АдресОтправкиМассиваДоговоров", "/etd/group/add");
		ПараметрыЭТД.Вставить("АдресПодготовкиНовыхДоговоров", "/etd/api/input/contract");
		ПараметрыЭТД.Вставить("АдресПодготовкиНовыхДопСоглашений", "/etd/api/input/supply");
		ПараметрыЭТД.Вставить("АдресПодготовкиИзменяемыхДоговоров", "/etd/api/edit/contract");
		ПараметрыЭТД.Вставить("АдресПодготовкиИзменяемыхДопСоглашений", "/etd/api/edit/supply");
		ПараметрыЭТД.Вставить("АдресПодготовкиРасторгаемыхДоговоров", "/etd/api/terminate/contract");
		ПараметрыЭТД.Вставить("АдресПодготовкиИмпортаДоговоров", "/etd/sync/input/contract");
		ПараметрыЭТД.Вставить("АдресЗагрузкиДанныхИмпортаДоговоров", "/etd/sync/signed/contract");
		ПараметрыЭТД.Вставить("АдресПроверкиДоступностиСервиса", "/availability");
		ПараметрыЭТД.Вставить("АдресПроверкиДоступностиЕСУТД", "/etd/availability");
		ПараметрыЭТД.Вставить("АдресГрупповогоПолученияДоговоров", "/etd/group/get/contract/");
		ПараметрыЭТД.Вставить("АдресГрупповогоПолученияДопСоглашений", "/etd/group/get/supply/");
		ПараметрыЭТД.Вставить("АдресЗагрузкиДанныхДоговора", "/etd/sync/get/contract");
		ПараметрыЭТД.Вставить("АдресПодготовкиРегистрацииСоциальногоОтпуска", "/etd/api/socialleave/contract");
		ПараметрыЭТД.Вставить("АдресПодготовкиУдаленияСоциальногоОтпуска", "/etd/api/deletesocialleave/contract");
		ПараметрыЭТД.Вставить("АдресРегистрацииСоциальногоОтпуска", "/etd/api/sign/socialleave/contract");
		ПараметрыЭТД.Вставить("АдресУдаленияСоциальногоОтпуска", "/etd/api/sign/deletesocialleave/contract");
		ПараметрыЭТД.Вставить("АдресПодготовкиРегистрацииПролонгации", "/etd/api/prolongation/contract");
		ПараметрыЭТД.Вставить("АдресРегистрацииПролонгации", "/etd/api/sign/prolongation/contract");
		ПараметрыЭТД.Вставить("АдресПодготовкиРегистрацииВосстановления", "/etd/api/restore/contract");
		ПараметрыЭТД.Вставить("АдресРегистрацииВосстановления", "/etd/api/sign/restore/contract");
		Если ПараметрыЗаполнения.Свойство("ИспользоватьВнешнююКриптографиюДляКомпоненты") Тогда
			ПараметрыЭТД.Вставить("ИспользоватьВнешнююКриптографиюДляКомпоненты", ПараметрыЗаполнения.ИспользоватьВнешнююКриптографиюДляКомпоненты);
		Иначе
			ПараметрыЭТД.Вставить("ИспользоватьВнешнююКриптографиюДляКомпоненты", Ложь);
		КонецЕсли;
		
		ХранилищеПараметров = Новый ХранилищеЗначения(ПараметрыЭТД);
		Константы.ПараметрыЭТД.Установить(ХранилищеПараметров);
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьЗаписьЖурналаРегистрации(
	ИмяСобытия, 
	УровеньСтрокой = "", 
	ОбъектМетаданных = Неопределено, 
	Данные = Неопределено, 
	Комментарий = "") Экспорт
	
	ЭТДСерверПереопределяемый.СоздатьЗаписьЖурналаРегистрации(ИмяСобытия, УровеньСтрокой, ОбъектМетаданных, Данные, Комментарий);
	
КонецПроцедуры

Процедура ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения(ИсточникиДанных) Экспорт
	
	ЭТДСерверПереопределяемый.ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения(ИсточникиДанных);
	
КонецПроцедуры

Процедура ПриЗаполненииВидовОграниченийПравОбъектовМетаданных(Описание) Экспорт
	
	ЭТДСерверПереопределяемый.ПриЗаполненииВидовОграниченийПравОбъектовМетаданных(Описание);
	
КонецПроцедуры

Процедура ПриЗаполненииСписковСОграничениемДоступа(Списки) Экспорт
	
	ЭТДСерверПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа(Списки);
	
КонецПроцедуры

Процедура ПриЗаполненииОграниченияДоступаРегистраСведений(Ограничение, НаименованиеОбъекта) Экспорт
	
	ЭТДСерверПереопределяемый.ПриЗаполненииОграниченияДоступаРегистраСведений(Ограничение, НаименованиеОбъекта);
	
КонецПроцедуры

Процедура ПриЗаполненииОграниченияДоступаЭТД(Ограничение) Экспорт
	
	ЭТДСерверПереопределяемый.ПриЗаполненииОграниченияДоступаЭТД(Ограничение);
	
КонецПроцедуры

Процедура ПриЧтенииНаСервереРегистраСведений(Форма, ТекущийОбъект) Экспорт
	
	ЭТДСерверПереопределяемый.ПриЧтенииНаСервереРегистраСведений(Форма, ТекущийОбъект);
	
КонецПроцедуры

Процедура ПослеЗаписиНаСервереРегистраСведений(Форма, ТекущийОбъект, ПараметрыЗаписи) Экспорт
	
	ЭТДСерверПереопределяемый.ПослеЗаписиНаСервереРегистраСведений(Форма, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

Процедура ПриЧтенииНаСервереЭТД(Форма, ТекущийОбъект) Экспорт
	
	ЭТДСерверПереопределяемый.ПриЧтенииНаСервереЭТД(Форма, ТекущийОбъект);
	
КонецПроцедуры

Процедура ПослеЗаписиНаСервереЭТД(Форма, ТекущийОбъект, ПараметрыЗаписи) Экспорт
	
	ЭТДСерверПереопределяемый.ПослеЗаписиНаСервереЭТД(Форма, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

Функция ПолучитьМассивВыбораВладельцыПрофиля() Экспорт
	
	Возврат ЭТДСерверПереопределяемый.ПолучитьМассивВыбораВладельцыПрофиля();
	
КонецФункции

Процедура ЗаполнитьНаборыЗначенийДоступа(ЭтотОбъект, Таблица) Экспорт
	
	ЭТДСерверПереопределяемый.ЗаполнитьНаборыЗначенийДоступа(ЭтотОбъект, Таблица);
	
КонецПроцедуры

Функция ПолучитьУсловияТрудаПоУмолчанию(ПараметрыПодбора = Неопределено) Экспорт
	
	Возврат ЭТДСерверПереопределяемый.ПолучитьУсловияТрудаПоУмолчанию(ПараметрыПодбора);
	
КонецФункции

Функция ПолучитьНаименованиеДолжности(КодДолжности) Экспорт
	
	Если КодДолжности = "" Тогда
		Возврат "";
	КонецЕсли;
	
	КлассификаторСтрокой = Обработки.ОбменЭТД.ПолучитьМакет("КлассификаторПрофессийXML").ПолучитьТекст();
	
	КодДолжностиЗначение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("<Value>%1</Value>", КодДолжности);
	Если Найти(КлассификаторСтрокой, КодДолжностиЗначение) = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	ИндексДолжности = Найти(КлассификаторСтрокой, КодДолжностиЗначение) + СтрДлина(КодДолжностиЗначение);
	ДолжностиСтрокой = Сред(КлассификаторСтрокой, ИндексДолжности);
	ДолжностьСтрокой = СокрП(Лев(ДолжностиСтрокой, Найти(ДолжностиСтрокой, "</row>") - 1));
	ДолжностьСтрокой = СокрЛ(СтрЗаменить(ДолжностьСтрокой, "</Value>", ""));
	ДолжностьСтрокой = СтрЗаменить(ДолжностьСтрокой, "<Value>", "");
	ДолжностьНаРусском = Лев(ДолжностьСтрокой, Найти(ДолжностьСтрокой, Символы.ПС) - 1);
	
	Если Найти(ДолжностьНаРусском, "xml") > 0 Тогда
		ДолжностьНаРусском = "";
	КонецЕсли;

	Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("ru = '%1'", ДолжностьНаРусском);
	
	Возврат НСтр(Текст);
	
КонецФункции

Функция ПолучитьНаименованиеТяжелыхУсловийТруда(КодУсловийТруда) Экспорт
	
	Если КодУсловийТруда = "" Тогда
		Возврат "";
	КонецЕсли;
	
	КлассификаторСтрокой = Обработки.ОбменЭТД.ПолучитьМакет("КлассификаторВредныхУсловийТруда").ПолучитьТекст();
	
	КодУсловийТрудаЗначение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("<Value>%1</Value>", КодУсловийТруда);
	Если Найти(КлассификаторСтрокой, КодУсловийТрудаЗначение) = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	ИндексУсловийТруда = Найти(КлассификаторСтрокой, КодУсловийТрудаЗначение) + СтрДлина(КодУсловийТрудаЗначение);
	УсловияТрудаСтрокой = Сред(КлассификаторСтрокой, ИндексУсловийТруда);
	УсловиеТрудаСтрокой = СокрП(Лев(УсловияТрудаСтрокой, Найти(УсловияТрудаСтрокой, "</row>") - 1));
	УсловиеТрудаСтрокой = СокрЛ(СтрЗаменить(УсловиеТрудаСтрокой, "</Value>", ""));
	УсловиеТрудаСтрокой = СтрЗаменить(УсловиеТрудаСтрокой, "<Value>", "");
	УсловиеТрудаНаРусском = Лев(УсловиеТрудаСтрокой, Найти(УсловиеТрудаСтрокой, Символы.ПС) - 1);
	
	Если Найти(УсловиеТрудаНаРусском, "xml") > 0 Тогда
		УсловиеТрудаНаРусском = "";
	КонецЕсли;

	Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("ru = '%1'", УсловиеТрудаНаРусском);
	
	Возврат НСтр(Текст);
	
КонецФункции

Функция ПолучитьНаименованиеОбразованияИностранца(КодОбразования) Экспорт
	
	Если КодОбразования = "" Тогда
		Возврат "";
	КонецЕсли;
	
	КлассификаторСтрокой = Обработки.ОбменЭТД.ПолучитьМакет("КлассификаторОбразованияИностранцев").ПолучитьТекст();
	
	КодОбразованияЗначение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("<Value>%1</Value>", КодОбразования);
	Если Найти(КлассификаторСтрокой, КодОбразованияЗначение) = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	ИндексОбразования = Найти(КлассификаторСтрокой, КодОбразованияЗначение) + СтрДлина(КодОбразованияЗначение);
	ОбразованиеСтрокой = Сред(КлассификаторСтрокой, ИндексОбразования);
	ОбразованиеСтрокой = СокрП(Лев(ОбразованиеСтрокой, Найти(ОбразованиеСтрокой, "</row>") - 1));
	ОбразованиеСтрокой = СокрЛ(СтрЗаменить(ОбразованиеСтрокой, "</Value>", ""));
	ОбразованиеСтрокой = СтрЗаменить(ОбразованиеСтрокой, "<Value>", "");
	ОбразованиеНаРусском = Лев(ОбразованиеСтрокой, Найти(ОбразованиеСтрокой, Символы.ПС) - 1);
	
	Если Найти(ОбразованиеНаРусском, "xml") > 0 Тогда
		ОбразованиеНаРусском = "";
	КонецЕсли;

	Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("ru = '%1'", ОбразованиеНаРусском);
	
	Возврат НСтр(Текст);
	
КонецФункции

Функция ПолучитьНаименованиеОснованияПривлеченияИностранца(КодОснованияПривлеченияИностранца) Экспорт
	
	Если КодОснованияПривлеченияИностранца = "" Тогда
		Возврат "";
	КонецЕсли;
	
	КлассификаторСтрокой = Обработки.ОбменЭТД.ПолучитьМакет("КлассификаторОснованияДляПривлеченияИностранца").ПолучитьТекст();
	
	КодОснованияПривлеченияИностранцаЗначение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("<Value>%1</Value>", КодОснованияПривлеченияИностранца);
	Если Найти(КлассификаторСтрокой, КодОснованияПривлеченияИностранцаЗначение) = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	ИндексОснования = Найти(КлассификаторСтрокой, КодОснованияПривлеченияИностранцаЗначение) + СтрДлина(КодОснованияПривлеченияИностранцаЗначение);
	ОснованиеСтрокой = Сред(КлассификаторСтрокой, ИндексОснования);
	ОснованиеСтрокой = СокрП(Лев(ОснованиеСтрокой, Найти(ОснованиеСтрокой, "</row>") - 1));
	ОснованиеСтрокой = СокрЛ(СтрЗаменить(ОснованиеСтрокой, "</Value>", ""));
	ОснованиеСтрокой = СтрЗаменить(ОснованиеСтрокой, "<Value>", "");
	ОснованиеНаРусском = Лев(ОснованиеСтрокой, Найти(ОснованиеСтрокой, Символы.ПС) - 1);
	
	Если Найти(ОснованиеНаРусском, "xml") > 0 Тогда
		ОснованиеНаРусском = "";
	КонецЕсли;

	Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("ru = '%1'", ОснованиеНаРусском);
	
	Возврат НСтр(Текст);
	
КонецФункции

Функция ПолучитьНаименованиеСуда(КодСуда) Экспорт
	
	Если КодСуда = "" Тогда
		Возврат "";
	КонецЕсли;
	
	КлассификаторСтрокой = Обработки.ОбменЭТД.ПолучитьМакет("КлассификаторСудов").ПолучитьТекст();
	
	КодСудаЗначение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("<Value>%1</Value>", КодСуда);
	Если Найти(КлассификаторСтрокой, КодСудаЗначение) = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	ИндексСуда = Найти(КлассификаторСтрокой, КодСудаЗначение) + СтрДлина(КодСудаЗначение);
	СудСтрокой = Сред(КлассификаторСтрокой, ИндексСуда);
	СудСтрокой = СокрП(Лев(СудСтрокой, Найти(СудСтрокой, "</row>") - 1));
	СудСтрокой = СокрЛ(СтрЗаменить(СудСтрокой, "</Value>", ""));
	СудСтрокой = СтрЗаменить(СудСтрокой, "<Value>", "");
	СудНаРусском = Лев(СудСтрокой, Найти(СудСтрокой, Символы.ПС) - 1);
	
	Если Найти(СудНаРусском, "xml") > 0 Тогда
		СудНаРусском = "";
	КонецЕсли;

	Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("ru = '%1'", СудНаРусском);
	
	Возврат НСтр(Текст);
	
КонецФункции

Функция СотрудникПодходитДляПрофессиональнойВыплаты(Сотрудник, ПериодДанных) Экспорт
	
	Возврат ЭТДСерверПереопределяемый.СотрудникПодходитДляПрофессиональнойВыплаты(Сотрудник, ПериодДанных);
	
КонецФункции

Функция ПолучитьПризнакГражданстваРК(Сотрудник, ПериодДанных) Экспорт
	
	Возврат ЭТДСерверПереопределяемый.ПолучитьПризнакГражданстваРК(Сотрудник, ПериодДанных);
	
КонецФункции

Процедура ПрисоединенныеФайлыПриЗаполненииНастроекОбработчиковПравилРегистрации(Настройки) Экспорт
	
	ЭТДСерверПереопределяемый.ПрисоединенныеФайлыПриЗаполненииНастроекОбработчиковПравилРегистрации(Настройки);
	
КонецПроцедуры

Функция ПолучитьДанныеДляСозданияИзмененияДоговораВФорматеJSON(Объект, ЭтоИзменениеДоговора) Экспорт
		
	ИнформацияОРаботодателе  = Новый Структура();
	ИнформацияОРаботодателе.Вставить("bin", Объект.БИНОрганизации);
	ИнформацияОРаботодателе.Вставить("kato", Объект.КодРегиона);
	Если ЗначениеЗаполнено(Объект.ТипРаботодателя) Тогда
		ИнформацияОРаботодателе.Вставить("employerType", Объект.ТипРаботодателя);
	КонецЕсли;
	ИнформацияОРаботнике     = Новый Структура("iin", Объект.ИИНРаботника);
	
	ДанныеДоговора  = Новый Структура;
	
	ДанныеДоговора.Вставить("contractNumber" , Объект.НомерДоговора);
	ДанныеДоговора.Вставить("contractDate"   , Объект.ДатаЗаключения);
	ДанныеДоговора.Вставить("beginDate"      , Объект.ДатаНачала);
	ДанныеДоговора.Вставить("endDate"        , Объект.ДатаОкончания);
	ДанныеДоговора.Вставить("position"       , Объект.КодДолжности);
	ДанныеДоговора.Вставить("dContractDate"  , Объект.СрокДействия);
	ДанныеДоговора.Вставить("establishedPost", Строка(Объект.Должность));
	ДанныеДоговора.Вставить("WorkPlace"      , Объект.МестоРаботы);
	ДанныеДоговора.Вставить("WorkPlaceKato"  , Объект.КодРегионаРабочегоМеста);
	ДанныеДоговора.Вставить("partTime"       , ?(Объект.ПоСовместительству, 1, 2));
	ДанныеДоговора.Вставить("workingHours"   , Объект.РежимРабочегоВремени);
	Если Объект.РежимРабочегоВремени = "3" Тогда
		ДанныеДоговора.Вставить("tariffRate" , Число(Объект.ДоляНеполногоРабочегоВремени));
	КонецЕсли;
	
	УсловияТруда = Новый Массив;
	
	Для Каждого СтрокаУсловий Из Объект.УсловияТруда Цикл
		Если ЗначениеЗаполнено(СтрокаУсловий.УсловиеТруда) Тогда
			УсловияТруда.Добавить(Число(СтрокаУсловий.УсловиеТруда));
		КонецЕсли;
	КонецЦикла;
	
	ДанныеДоговора.Вставить("workingConditionList", УсловияТруда);
	
	Если ЗначениеЗаполнено(Объект.КодТяжелыхУсловийТруда) Тогда
		ДанныеДоговора.Вставить("harmfulCondition", Объект.КодТяжелыхУсловийТруда);
		
		ДобавитьПодтверждающиеДокументы(ДанныеДоговора, Объект);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ДистанционнаяРабота) Тогда
		ДанныеДоговора.Вставить("remoteWork", Объект.ДистанционнаяРабота);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.КодСтраныМестаРаботы) Тогда
		ДанныеДоговора.Вставить("workPlaceCountry", Объект.КодСтраныМестаРаботы);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ДолжностьНАОМСУ) Тогда
		ДанныеДоговора.Вставить("dEstablishedPost", Объект.ДолжностьНАОМСУ);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ОснованиеПривлеченияИностранца) Тогда
		ДанныеДоговора.Вставить("dNonresidentAttractingBasis", Объект.ОснованиеПривлеченияИностранца);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.НомерРазрешенияИностранца) Тогда
		ДанныеДоговора.Вставить("nonresidentPermitNumber", Объект.НомерРазрешенияИностранца);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ДатаРазрешенияИностранца) Тогда
		ДанныеДоговора.Вставить("nonresidentPermitDate", Объект.ДатаРазрешенияИностранца);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ОбразованиеИностранца) Тогда
		ДанныеДоговора.Вставить("dNonresidentEducation", Объект.ОбразованиеИностранца);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ЯвляетсяЭТД) Тогда
		ДанныеДоговора.Вставить("eContract", Объект.ЯвляетсяЭТД);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ДатаНачалаРазрешенияИностранца) Тогда
		ДанныеДоговора.Вставить("nonresidentBeginDate", Объект.ДатаНачалаРазрешенияИностранца);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ДатаОкончанияРазрешенияИностранца) Тогда
		ДанныеДоговора.Вставить("nonresidentEndDate", Объект.ДатаОкончанияРазрешенияИностранца);
	КонецЕсли;
	
	ДанныеДляJSON = Новый Структура;
	ДанныеДляJSON.Вставить("employerData", ИнформацияОРаботодателе);
	
	Если ЭтоИзменениеДоговора Тогда
 		// contractId - ID ЕСУТД, передается для редактирования данных существующего договора
		ДанныеДляJSON.Вставить("contractId", Объект.Идентификатор);
	КонецЕсли;
	
	ДанныеДляJSON.Вставить("employeeData", ИнформацияОРаботнике);
	ДанныеДляJSON.Вставить("contractData", ДанныеДоговора);
	
	Если Объект.СпециальныеНавыки.Количество() > 0 ИЛИ Объект.ОбщиеНавыки.Количество() > 0 ИЛИ ЗначениеЗаполнено(Объект.ОтношениеКВоинскойСлужбе) Тогда
		ДанныеДокумента = Новый Структура;
		
		Если ЗначениеЗаполнено(Объект.ОтношениеКВоинскойСлужбе) Тогда
			ДанныеДокумента.Вставить("conscript", Объект.ОтношениеКВоинскойСлужбе);
		КонецЕсли;
		
		Если Объект.ОбщиеНавыки.Количество() > 0 Тогда
			СписокНавыков = Новый Массив;
			Для Каждого ОбщийНавык Из Объект.ОбщиеНавыки Цикл
				СписокНавыков.Добавить(ОбщийНавык.КодНавыка);
			КонецЦикла;
			ДанныеДокумента.Вставить("competenceList", СписокНавыков);
		КонецЕсли;
		
		Если Объект.СпециальныеНавыки.Количество() > 0 Тогда
			СписокНавыков = Новый Массив;
			Для Каждого СпециальныйНавык Из Объект.СпециальныеНавыки Цикл
				СписокНавыков.Добавить(СпециальныйНавык.КодНавыка);
			КонецЦикла;
			ДанныеДокумента.Вставить("competenceSpecList", СписокНавыков);
		КонецЕсли;
		
		ДанныеДляJSON.Вставить("documentData", ДанныеДокумента);
	КонецЕсли;
	
	Возврат ЭТД_ЗаписатьЗначениеJSON(ДанныеДляJSON);
	
КонецФункции

Функция ПолучитьДанныеДляСозданияИзмененияДопСоглашенияВФорматеJSON(Объект, ЭтоИзменениеДоговора) Экспорт
	
	ИнформацияОРаботодателе  = Новый Структура("bin, kato, employerType", Объект.БИНОрганизации, Объект.КодРегиона, Объект.ТипРаботодателя);
	ИнформацияОРаботнике     = Новый Структура("iin", Объект.ИИНРаботника);
	
	ДанныеДоговора  = Новый Структура;
	ДанныеДоговора.Вставить("contractId"              , Объект.ИдентификаторОсновногоЭТД);
	ДанныеДоговора.Вставить("subsidiaryContractNumber", Объект.НомерДоговора);
	ДанныеДоговора.Вставить("subsidiaryContractDate"  , Объект.ДатаЗаключения);
	ДанныеДоговора.Вставить("beginDate"               , Объект.ДатаНачала);
	Если Число(Объект.СрокДействия) = 8 Тогда
		ДанныеДоговора.Вставить("endDate"             , '00010101');
	Иначе
		ДанныеДоговора.Вставить("endDate"             , Объект.ДатаОкончания);
	КонецЕсли;
	ДанныеДоговора.Вставить("contractEndDate"         , Объект.ДатаОкончанияДоговора);
	ДанныеДоговора.Вставить("position"                , Объект.КодДолжности);
	ДанныеДоговора.Вставить("dContractDate"           , Объект.СрокДействия);
	ДанныеДоговора.Вставить("establishedPost"         , Строка(Объект.Должность));
	ДанныеДоговора.Вставить("WorkPlace"               , Объект.МестоРаботы);
	ДанныеДоговора.Вставить("WorkPlaceKato"           , Объект.КодРегионаРабочегоМеста);
	ДанныеДоговора.Вставить("partTime"                , ?(Объект.ПоСовместительству, 1, 2));
	ДанныеДоговора.Вставить("workingHours"            , Объект.РежимРабочегоВремени);
	Если Объект.РежимРабочегоВремени = "3" Тогда
		ДанныеДоговора.Вставить("tariffRate" , Число(Объект.ДоляНеполногоРабочегоВремени));
	КонецЕсли;
	
	УсловияТруда = Новый Массив;
	
	Для Каждого СтрокаУсловий Из Объект.УсловияТруда Цикл
		Если ЗначениеЗаполнено(СтрокаУсловий.УсловиеТруда) Тогда
			УсловияТруда.Добавить(Число(СтрокаУсловий.УсловиеТруда));
		КонецЕсли;
	КонецЦикла;
	
	ДанныеДоговора.Вставить("workingConditionList", УсловияТруда);
	
	Если ЗначениеЗаполнено(Объект.КодТяжелыхУсловийТруда) Тогда
		ДанныеДоговора.Вставить("harmfulCondition", Объект.КодТяжелыхУсловийТруда);
		
		ДобавитьПодтверждающиеДокументы(ДанныеДоговора, Объект);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ИныеИзмененияУсловийТруда) Тогда
		ДанныеДоговора.Вставить("otherConditions", Объект.ИныеИзмененияУсловийТруда);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ДистанционнаяРабота) Тогда
		ДанныеДоговора.Вставить("remoteWork", Объект.ДистанционнаяРабота);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.КодСтраныМестаРаботы) Тогда
		ДанныеДоговора.Вставить("workPlaceCountry", Объект.КодСтраныМестаРаботы);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ДолжностьНАОМСУ) Тогда
		ДанныеДоговора.Вставить("dEstablishedPost", Объект.ДолжностьНАОМСУ);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.НаличиеЗаявленияРаботника) Тогда
		ДанныеДоговора.Вставить("isEmployeeRequest", Объект.НаличиеЗаявленияРаботника);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.СогласиеРаботника) Тогда
		ДанныеДоговора.Вставить("isEmployeeConsent", Объект.СогласиеРаботника);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.СогласиеРаботодателя) Тогда
		ДанныеДоговора.Вставить("isEmployerApprove", Объект.СогласиеРаботодателя);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.НомерТелефонаРаботника) Тогда
		ДанныеДоговора.Вставить("employeePhone", Объект.НомерТелефонаРаботника);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.НомерТелефонаМенеджера) Тогда
		ДанныеДоговора.Вставить("hrManagerPhone", Объект.НомерТелефонаМенеджера);
	КонецЕсли;
	
	ДанныеБанковскогоСчетаРаботника = Новый Структура();
	Если ЗначениеЗаполнено(Объект.НаименованиеБанка) Тогда
		ДанныеБанковскогоСчетаРаботника.Вставить("bankName", Объект.НаименованиеБанка);
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.БИКБанка) Тогда
		ДанныеБанковскогоСчетаРаботника.Вставить("bik", Объект.БИКБанка);
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.БанковскийСчетРаботника) Тогда
		ДанныеБанковскогоСчетаРаботника.Вставить("accountNumber", Объект.БанковскийСчетРаботника);
	КонецЕсли;
	Если ЗначениеЗаполнено(ДанныеБанковскогоСчетаРаботника) Тогда
		ДанныеДоговора.Вставить("employeeAccountData", ДанныеБанковскогоСчетаРаботника);
	КонецЕсли;

	ДанныеДляJSON = Новый Структура;
	ДанныеДляJSON.Вставить("employerData", ИнформацияОРаботодателе);
	
	Если ЭтоИзменениеДоговора Тогда
 		// contractId - ID ЕСУТД, передается для редактирования данных существующего договора
		ДанныеДляJSON.Вставить("contractId" , Объект.Идентификатор);
	КонецЕсли;
	
	ДанныеДляJSON.Вставить("employeeData", ИнформацияОРаботнике);
	
	Если Объект.СпециальныеНавыки.Количество() > 0 ИЛИ Объект.ОбщиеНавыки.Количество() > 0 Тогда
		Если Объект.ОбщиеНавыки.Количество() > 0 Тогда
			СписокНавыков = Новый Массив;
			Для Каждого ОбщийНавык Из Объект.ОбщиеНавыки Цикл
				СписокНавыков.Добавить(ОбщийНавык.КодНавыка);
			КонецЦикла;
			ДанныеДоговора.Вставить("competenceList", СписокНавыков);
		КонецЕсли;
		
		Если Объект.СпециальныеНавыки.Количество() > 0 Тогда
			СписокНавыков = Новый Массив;
			Для Каждого СпециальныйНавык Из Объект.СпециальныеНавыки Цикл
				СписокНавыков.Добавить(СпециальныйНавык.КодНавыка);
			КонецЦикла;
			ДанныеДоговора.Вставить("competenceSpecList", СписокНавыков);
		КонецЕсли;
	КонецЕсли;
	
	ДанныеДляJSON.Вставить("subsidiaryContractData", ДанныеДоговора);
	
	Возврат ЭТД_ЗаписатьЗначениеJSON(ДанныеДляJSON);
	
КонецФункции

Функция ПолучитьДанныеДляРасторженияДоговораВФорматеJSON(Объект) Экспорт
	
	ИнформацияОРаботодателе  = Новый Структура("bin", Объект.БИНОрганизации);
	ИнформацияОРаботодателе.Вставить("kato", Объект.КодРегиона);
	Если ЗначениеЗаполнено(Объект.ТипРаботодателя) Тогда
		ИнформацияОРаботодателе.Вставить("employerType", Объект.ТипРаботодателя);
	КонецЕсли;
	
	ДанныеДоговора  = Новый Структура;
	ДанныеДоговора.Вставить("contractId"       , Объект.Идентификатор);
	ДанныеДоговора.Вставить("terminationDate"  , Объект.ДатаРасторжения);
	ДанныеДоговора.Вставить("terminationReason", Объект.КодПричиныРасторжения);
	Если Объект.КодПричиныРасторжения = "03-002" И Объект.ПричинаРасторженияЦифровизация = "true" Тогда
		// согласно документации веб-сервиса 1С ЭТД нужно отправлять положительное значение только при данных условиях
		ДанныеДоговора.Вставить("termReasonDigitalization", "true");
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.НаличиеЗаявленияРаботника) Тогда
		ДанныеДоговора.Вставить("isEmployeeRequest", Объект.НаличиеЗаявленияРаботника);
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.СогласиеРаботника) Тогда
		ДанныеДоговора.Вставить("isEmployeeConsent", Объект.СогласиеРаботника);
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.СогласиеРаботодателя) Тогда
		ДанныеДоговора.Вставить("isEmployerApprove", Объект.СогласиеРаботодателя);
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.НомерТелефонаРаботника) Тогда
		ДанныеДоговора.Вставить("employeePhone", Объект.НомерТелефонаРаботника);
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.НомерТелефонаМенеджера) Тогда
		ДанныеДоговора.Вставить("hrManagerPhone", Объект.НомерТелефонаМенеджера);
	КонецЕсли;
	ДанныеБанковскогоСчетаРаботника = Новый Структура();
	Если ЗначениеЗаполнено(Объект.НаименованиеБанка) Тогда
		ДанныеБанковскогоСчетаРаботника.Вставить("bankName", Объект.НаименованиеБанка);
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.БИКБанка) Тогда
		ДанныеБанковскогоСчетаРаботника.Вставить("bik", Объект.БИКБанка);
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.БанковскийСчетРаботника) Тогда
		ДанныеБанковскогоСчетаРаботника.Вставить("accountNumber", Объект.БанковскийСчетРаботника);
	КонецЕсли;
	Если ЗначениеЗаполнено(ДанныеБанковскогоСчетаРаботника) Тогда
		ДанныеДоговора.Вставить("employeeAccountData", ДанныеБанковскогоСчетаРаботника);
	КонецЕсли;
	
	ДанныеДляJSON  = Новый Структура;
	ДанныеДляJSON.Вставить("employerData"           , ИнформацияОРаботодателе);
	ДанныеДляJSON.Вставить("terminationContractData", ДанныеДоговора);
	
	Возврат ЭТД_ЗаписатьЗначениеJSON(ДанныеДляJSON);
	
КонецФункции

Процедура ПерезаполнитьЭТДПоДаннымЕСУТД(ЭТДОбъект, ДанныеАутентификации, ЗапросДоговора, ИдентификаторДоговора) Экспорт
	
	ДанныеЕСУТД = ЭлектронноеВзаимодействиеССервисами.ПолучитьДанныеЕСУТДПоЭТД(ДанныеАутентификации, ЗапросДоговора, ИдентификаторДоговора);
	
	СтруктураОтвета = ЭТД_ПрочитатьЗначениеJSON(ДанныеЕСУТД);
	
	Если НЕ ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтруктураОтвета,"contractData")
		ИЛИ НЕ ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтруктураОтвета.contractData,"contract") Тогда
		ШаблонСообщения = "ru = 'Данные договора не были получены из ЕСУТД. Содержимое полученных данных:
		|%1'";
		ШаблонСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ДанныеЕСУТД);
		ТекстСообщения = НСтр(ШаблонСообщения);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		Возврат;
	КонецЕсли;
	
	Договор = СтруктураОтвета.contractData.contract;
	
	Если ЭТДОбъект.Идентификатор = ИдентификаторДоговора Тогда
		ЗаполнитьЭТДПолученнымиДанными(Договор, ЭТДОбъект);
	ИначеЕсли ЭТДОбъект.ИдентификаторОсновногоЭТД = ИдентификаторДоговора Тогда
		ПерезаполнитьЭТДСоглашение(Договор, ЭТДОбъект);
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьПараметрыСотрудникаДляСоциальногоОтпуска(Сотрудник, ДатаПолученияДанных = Неопределено) Экспорт
	
	Возврат ЭТДСерверПереопределяемый.ПолучитьПараметрыСотрудникаДляСоциальногоОтпуска(Сотрудник, ДатаПолученияДанных);
	
КонецФункции

Функция СписокВыборкаТипыСоциальногоОтпуска() Экспорт
	
	Результат = Новый СписокЗначений;
	Результат.Добавить("1", НСтр("ru = 'В связи с беременностью и рождением ребенка, усыновления/удочерения новорожденного ребенка (детей)'"));
	Результат.Добавить("2", НСтр("ru = 'Без сохранения заработной платы по уходу за ребенком до достижения им возраста 3 лет'"));
	
	Возврат Результат;
	
КонецФункции

Функция СписокВыборкаСрокиДействия(ЭтоДополнительноеСоглашение) Экспорт
	
	Результат = Новый СписокЗначений;
	Результат.Добавить("1", НСтр("ru = 'На неопределенный срок'"));
	Результат.Добавить("2", НСтр("ru = 'На определенный срок не менее одного года'"));
	Результат.Добавить("3", НСтр("ru = 'На определенный срок (для субьектов малого предпринимательства)'"));
	Результат.Добавить("4", НСтр("ru = 'На время выполнения определенной работы'"));
	Результат.Добавить("5", НСтр("ru = 'На время замещения временно отсутствующего работника'"));
	Результат.Добавить("6", НСтр("ru = 'На время выполнения сезонной работы'"));
	Результат.Добавить("7", НСтр("ru = 'В пределах срока ИРС'"));
	Если ЭтоДополнительноеСоглашение Тогда
		Результат.Добавить("8", НСтр("ru = 'По день окончания отпуска по уходу за ребенком'"));
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция СписокВыборкаТипыГосударственногоОргана() Экспорт
	
	Результат = Новый СписокЗначений;
	Результат.Добавить("1", НСтр("ru = 'Суд'"));
	Результат.Добавить("2", НСтр("ru = 'Согласительная комиссия'"));
	Результат.Добавить("3", НСтр("ru = 'Ошибочное расторжение'"));
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьКоличествоВыходныхДнейЗаПериод(Сотрудник, НачалоПериода, КонецПериода) Экспорт
	
	Возврат ЭТДСерверПереопределяемый.ПолучитьКоличествоВыходныхДнейЗаПериод(Сотрудник, НачалоПериода, КонецПериода);
	
КонецФункции

Функция ПолучитьНаименованиеПричиныРасторжения(КодПричиныРасторжения) Экспорт
	
	Если КодПричиныРасторжения = "" Тогда
		Возврат "";
	КонецЕсли;
	
	КлассификаторСтрокой = Обработки.ОбменЭТД.ПолучитьМакет("КлассификаторОснованияУвольнения").ПолучитьТекст();
	
	КодПричиныРасторженияЗначение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("<Value>%1</Value>", КодПричиныРасторжения);
	Если Найти(КлассификаторСтрокой, КодПричиныРасторженияЗначение) = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	ИндексПричиныРасторжения = Найти(КлассификаторСтрокой, КодПричиныРасторженияЗначение) + СтрДлина(КодПричиныРасторженияЗначение);
	ПричиныРасторженияСтрокой = Сред(КлассификаторСтрокой, ИндексПричиныРасторжения);
	ПричинаРасторженияСтрокой = СокрП(Лев(ПричиныРасторженияСтрокой, Найти(ПричиныРасторженияСтрокой, "</row>") - 1));
	ПричинаРасторженияСтрокой = СокрЛ(СтрЗаменить(ПричинаРасторженияСтрокой, "</Value>", ""));
	ПричинаРасторженияСтрокой = СтрЗаменить(ПричинаРасторженияСтрокой, "<Value>", "");
	ПричинаРасторженияНаРусском = Лев(ПричинаРасторженияСтрокой, Найти(ПричинаРасторженияСтрокой, Символы.ПС) - 1);
	
	Если Найти(ПричинаРасторженияНаРусском, "xml") > 0 Тогда
		ПричинаРасторженияНаРусском = "";
	КонецЕсли;

	Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("ru = '%1'", ПричинаРасторженияНаРусском);
	
	Возврат НСтр(Текст);
	
КонецФункции

Функция ПолучитьДанныеАутентификации(ДанныеОрганизации) Экспорт
	
	Если ТипЗнч(ДанныеОрганизации) = Тип("Строка") Тогда
		БИНОрганизации = ДанныеОрганизации;
	Иначе
		БИНОрганизации = БИНОрганизации(ДанныеОрганизации);
	КонецЕсли;
	
	БИНОрганизацииДляСервиса = "";
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		БИНОрганизацииДляСервиса = БИНОрганизации;
	КонецЕсли;
	
	ДанныеАутентификации = ЭлектронноеВзаимодействиеССервисами.ПолучитьДанныеАутентификацииЭТД(БИНОрганизацииДляСервиса);
	
	Возврат ДанныеАутентификации;
	
КонецФункции

Функция РезультатВыполненияОперацииЭТД(ТелоОтвета, НаименованиеОперации) Экспорт
	
	СтруктураОтвета = ЭТД_ПрочитатьЗначениеJSON(ТелоОтвета);
	ШаблонСтруктурыРезультата = "response%1";
	СтруктураРезультата = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСтруктурыРезультата, НаименованиеОперации);
	РезультатОперации = Новый Структура;
	
	Если СтруктураОтвета.Свойство(СтруктураРезультата) Тогда
		СтруктураРезультата = СтруктураОтвета[СтруктураРезультата];
		
		Если СтруктураРезультата.Свойство("id") Тогда
			ИдентификаторЗарегистрированнойОперации = СтруктураРезультата.id;
		Иначе
			ИдентификаторЗарегистрированнойОперации = "";
		КонецЕсли;
		Статус = СтруктураРезультата.status;
		ТекстОшибки = СтруктураРезультата.error;
	Иначе
		ИдентификаторЗарегистрированнойОперации = "";
		Статус = "";
		ТекстОшибки = НСтр("ru = 'В ответе сервиса не обнаружен результат операции'");
	КонецЕсли;
	
	РезультатОперации.Вставить("ИдентификаторЗарегистрированнойОперации", ИдентификаторЗарегистрированнойОперации);
	РезультатОперации.Вставить("Статус", Статус);
	РезультатОперации.Вставить("ТекстОшибки", ТекстОшибки);
	
	Возврат РезультатОперации;
	
КонецФункции

Процедура ЗаполнитьЭТДПолученнымиДанными(Договор, ЭТД, Форма = Неопределено) Экспорт
	
	Если Форма <> Неопределено Тогда
		// загрузка данных из ЕСУТД
		Организация = Форма.Организация;
		БИНОрганизации = Форма.БИНОрганизации;
		ПерезаполнитьСуществующиеЭТД = Форма.ПерезаполнитьСуществующиеЭТД;
		ТаблицыЭТД = Форма;
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Договор,"dWorkingConditions") Тогда
			ЭТД.УсловиеТруда = Договор.dWorkingConditions;
		Иначе
			ЭТД.УсловиеТруда = "0";
		КонецЕсли;
		ЭТД.ИИНДляПроверки  = Договор.iin;
		ЭТД.КодДолжностиДляПроверки = Договор.dPosition;
	Иначе
		// перезаполнение ЭТД из ЕСУТД
		Организация = ЭТД.Организация;
		БИНОрганизации = ЭТД.БИНОрганизации;
		ПерезаполнитьСуществующиеЭТД = Истина;
		ТаблицыЭТД = ЭТД;
		
		ЭТД.УсловияТруда.Очистить();
		УсловияТруда = ЭТД.УсловияТруда.Добавить();
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Договор,"dWorkingConditions") Тогда
			УсловияТруда.УсловиеТруда = Договор.dWorkingConditions;
		Иначе
			УсловияТруда.УсловиеТруда = "0";
		КонецЕсли;
	КонецЕсли;
	
	ДатаЗаключения = Дата(СтрЗаменить(Договор.contractDate,"-",""));
	КодТяжелыхУсловийТруда = "";
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Договор,"dHarmfulConditionsType") Тогда
		КодТяжелыхУсловийТруда = Договор.dHarmfulConditionsType;
	КонецЕсли;
	ОбразованиеИностранца = "";
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Договор,"dNonresidentEducation") Тогда
		ОбразованиеИностранца = Договор.dNonresidentEducation;
	КонецЕсли;
	ОснованиеПривлеченияИностранца = "";
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Договор,"dNonresidentAttractingBasis") Тогда
		ОснованиеПривлеченияИностранца = Договор.dNonresidentAttractingBasis;
	КонецЕсли;
	ДатаРасторжения = Дата('00010101');
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Договор,"terminationDate") Тогда
		ДатаРасторжения = Дата(СтрЗаменить(Договор.terminationDate,"-",""));
	КонецЕсли;
	КодПричиныРасторжения = "";
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Договор,"dTerminationReason") Тогда
		КодПричиныРасторжения = Договор.dTerminationReason;
	КонецЕсли;
	
	ПериодДанных = ?(ЗначениеЗаполнено(ДатаЗаключения), ДатаЗаключения, Неопределено);
	Если ЗначениеЗаполнено(ЭТД.Сотрудник) Тогда
		ИИН = ""; // не меняем ранее заполненные
	Иначе
		ИИН = Договор.iin;
	КонецЕсли;
	ДанныеДляЗаполненияЭТД = ПолучитьДанныеДляЗаполненияЭТД(ИИН, Договор.contractId, Договор.dPosition, КодТяжелыхУсловийТруда, ОбразованиеИностранца, ОснованиеПривлеченияИностранца, Организация, ПериодДанных, ДатаРасторжения, КодПричиныРасторжения);
	
	Если НЕ ПерезаполнитьСуществующиеЭТД И ЗначениеЗаполнено(ДанныеДляЗаполненияЭТД.ДоговорЭТД) Тогда
		Возврат; // не добавляем ранее загруженные
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ЭТД, ДанныеДляЗаполненияЭТД);
	ЭТД.ИИНРаботника	= Договор.iin;
	ЭТД.Идентификатор   = Договор.contractId;
	ЭТД.МестоРаботы	 = Договор.workPlace;
	ЭТД.ДатаНачала	  = Дата(СтрЗаменить(Договор.beginDate,"-",""));
	ЭТД.ДатаЗаключения  = ДатаЗаключения;
	ЭТД.КодДолжности	= Договор.dPosition;
	ЭТД.НомерДоговора   = Договор.contractNumber;
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Договор,"dContractDate") Тогда
		ЭТД.СрокДействия = Договор.dContractDate;
	КонецЕсли;
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Договор,"partTime") Тогда
		ЭТД.ПоСовместительству = ?(Договор.partTime = "1", Истина, Ложь);
	Иначе
		ЭТД.ПоСовместительству = Ложь;
	КонецЕсли;
	ЭТД.Организация = Организация;
	ЭТД.БИНОрганизации  = БИНОрганизации;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Договор,"employerKato") Тогда
		ЭТД.КодРегиона = Договор.employerKato;
	ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Договор,"workPlaceKato") Тогда
		ЭТД.КодРегиона = Договор.workPlaceKato;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Договор,"workPlaceKato") Тогда
		ЭТД.КодРегионаРабочегоМеста = Договор.workPlaceKato;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Договор,"dWorkingHours") Тогда
		ЭТД.РежимРабочегоВремени = Договор.dWorkingHours;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Договор,"tariffRate") Тогда
		ЭТД.ДоляНеполногоРабочегоВремени = Договор.tariffRate;
	КонецЕсли;
	
	ЭТД.КодТяжелыхУсловийТруда = КодТяжелыхУсловийТруда;
	
	ЭТД.ДатаРасторжения = ДатаРасторжения;
	
	ЭТД.КодПричиныРасторжения = КодПричиныРасторжения;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Договор,"dRemoteWork") Тогда
		ЭТД.ДистанционнаяРабота = Договор.dRemoteWork;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Договор,"workPlaceCountry")
		И ТипЗнч(Договор.workPlaceCountry) = Тип("Строка") Тогда
		ЭТД.КодСтраныМестаРаботы = Договор.workPlaceCountry;
	КонецЕсли;
	
	ЭТД.ОснованиеПривлеченияИностранца = ОснованиеПривлеченияИностранца;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Договор,"nonresidentPermitNumber") Тогда
		ЭТД.НомерРазрешенияИностранца = Договор.nonresidentPermitNumber;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Договор,"nonresidentPermitDate") Тогда
		ЭТД.ДатаРазрешенияИностранца = Дата(СтрЗаменить(Договор.nonresidentPermitDate,"-",""));
	КонецЕсли;
	
	ЭТД.ОбразованиеИностранца = ОбразованиеИностранца;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Договор,"dEstablishedPost") Тогда
		ЭТД.ДолжностьНАОМСУ = Договор.dEstablishedPost;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Договор,"eContract") Тогда
		Если Договор.eContract = "1" ИЛИ Договор.eContract = "true" Тогда
			ЭТД.ЯвляетсяЭТД = "true";
		Иначе
			ЭТД.ЯвляетсяЭТД = "false";
		КонецЕсли;
	Иначе
		ЭТД.ЯвляетсяЭТД = "false";
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Договор,"termReasonDigitalization") Тогда
		Если Договор.termReasonDigitalization = "1" ИЛИ Договор.termReasonDigitalization = "true" Тогда
			ЭТД.ПричинаРасторженияЦифровизация = "true";
		Иначе
			ЭТД.ПричинаРасторженияЦифровизация = "false";
		КонецЕсли;
	Иначе
		ЭТД.ПричинаРасторженияЦифровизация = "false";
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Договор,"isEmployeeRequest") Тогда
		Если Договор.isEmployeeRequest = "1" Тогда
			ЭТД.НаличиеЗаявленияРаботника = "1";
		Иначе
			ЭТД.НаличиеЗаявленияРаботника = "0";
		КонецЕсли;
	Иначе
		ЭТД.НаличиеЗаявленияРаботника = "0";
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Договор,"isEmployeeConsent") Тогда
		Если Договор.isEmployeeConsent = "1" Тогда
			ЭТД.СогласиеРаботника = "1";
		Иначе
			ЭТД.СогласиеРаботника = "0";
		КонецЕсли;
	Иначе
		ЭТД.СогласиеРаботника = "0";
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Договор,"isEmployerApprove") Тогда
		Если Договор.isEmployerApprove = "1" Тогда
			ЭТД.СогласиеРаботодателя = "1";
		Иначе
			ЭТД.СогласиеРаботодателя = "0";
		КонецЕсли;
	Иначе
		ЭТД.СогласиеРаботодателя = "0";
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Договор,"employeePhone") Тогда
		ЭТД.НомерТелефонаРаботника = Договор.employeePhone;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Договор,"hrManagerPhone") Тогда
		ЭТД.НомерТелефонаМенеджера = Договор.hrManagerPhone;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Договор,"bankName") Тогда
		ЭТД.НаименованиеБанка = Договор.bankName;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Договор,"bik") Тогда
		ЭТД.БИКБанка = Договор.bik;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Договор,"accountNumber") Тогда
		ЭТД.БанковскийСчетРаботника = Договор.accountNumber;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Договор,"Conscript") Тогда
		ЭТД.ОтношениеКВоинскойСлужбе = Договор.Conscript;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Договор,"endDate") Тогда
		ЭТД.ДатаОкончания = Дата(СтрЗаменить(Договор.endDate,"-",""));
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Договор,"employerType") Тогда
		ЭТД.ТипРаботодателя = Договор.employerType;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Договор,"nonresidentBeginDate") Тогда
		ЭТД.ДатаНачалаРазрешенияИностранца = Дата(СтрЗаменить(Договор.nonresidentBeginDate,"-",""));
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Договор,"nonresidentEndDate") Тогда
		ЭТД.ДатаОкончанияРазрешенияИностранца = Дата(СтрЗаменить(Договор.nonresidentEndDate,"-",""));
	КонецЕсли;
	
	Если Форма = Неопределено Тогда
		ТаблицыЭТД.ОбщиеНавыки.Очистить();
		ТаблицыЭТД.СпециальныеНавыки.Очистить();
		ТаблицыЭТД.ИзмененияИИНРаботника.Очистить();
		ТаблицыЭТД.ВосстановленияНаРаботе.Очистить();
		ТаблицыЭТД.РеорганизацияРаботодателя.Очистить();
		ТаблицыЭТД.ПролонгацияДоговора.Очистить();
		ТаблицыЭТД.СоциальныеОтпуска.Очистить();
	КонецЕсли;
	
	Если Договор.competenceList.Количество() > 0 Тогда
		
		Если НЕ ТипЗнч(Договор.competenceList.competence) = Тип("Массив")  Тогда
			СтрокаНавыки =  ТаблицыЭТД.ОбщиеНавыки.Добавить();
			СтрокаНавыки.КодНавыка	 = Договор.competenceList.competence;
			Если Форма <> Неопределено Тогда
				СтрокаНавыки.Идентификатор = Договор.contractId;
			КонецЕсли;
			МассивНавыков = Новый Массив;
			МассивНавыков.Добавить(Договор.competenceList.competence);
			СписокНавыков = ПолучитьНаименованиеНавыков("КлассификаторОбщиеНавыки", МассивНавыков);
			СтрокаНавыки.Наименование  = СписокНавыков.Получить(Договор.competenceList.competence);
		Иначе 
			
			СписокНавыков = ПолучитьНаименованиеНавыков("КлассификаторОбщиеНавыки", Договор.competenceList.competence);
			Для Каждого Навык Из Договор.competenceList.competence Цикл
				СтрокаНавыки =  ТаблицыЭТД.ОбщиеНавыки.Добавить();
				СтрокаНавыки.КодНавыка	 = Навык;
				Если Форма <> Неопределено Тогда
					СтрокаНавыки.Идентификатор = Договор.contractId;
				КонецЕсли;
				СтрокаНавыки.Наименование  = СписокНавыков.Получить(Навык);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
		
	Если Договор.competenceSpecList.Количество() > 0 Тогда
		
		Если НЕ ТипЗнч(Договор.competenceSpecList.competence) = Тип("Массив") Тогда
			СтрокаНавыки =  ТаблицыЭТД.СпециальныеНавыки.Добавить();
			СтрокаНавыки.КодНавыка	 = Договор.competenceSpecList.competence;
			Если Форма <> Неопределено Тогда
				СтрокаНавыки.Идентификатор = Договор.contractId;
			КонецЕсли;
			МассивНавыков = Новый Массив;
			МассивНавыков.Добавить(Договор.competenceSpecList.competence);
			СписокНавыков = ПолучитьНаименованиеНавыков("КлассификаторПрофессиональныеНавыки", МассивНавыков);
			СтрокаНавыки.Наименование  = СписокНавыков.Получить(Договор.competenceSpecList.competence);
		Иначе
			
			СписокНавыков = ПолучитьНаименованиеНавыков("КлассификаторПрофессиональныеНавыки", Договор.competenceSpecList.competence);
			Для Каждого Навык Из Договор.competenceSpecList.competence Цикл
				СтрокаНавыки =  ТаблицыЭТД.СпециальныеНавыки.Добавить();
				СтрокаНавыки.КодНавыка	 = Навык;
				Если Форма <> Неопределено Тогда
					СтрокаНавыки.Идентификатор = Договор.contractId;
				КонецЕсли;
				СтрокаНавыки.Наименование  = СписокНавыков.Получить(Навык);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Договор.changeIinData.Количество() > 0
		И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Договор.changeIinData, "changeIin") Тогда
		
		ДанныеСменыИИН = Договор.changeIinData.changeIin;
		Если ТипЗнч(ДанныеСменыИИН) = Тип("Структура") Тогда
			СтрокаСменаИИН = ТаблицыЭТД.ИзмененияИИНРаботника.Добавить();
			СтрокаСменаИИН.ИИНРаботника	 = ДанныеСменыИИН.iin;
			Если Форма <> Неопределено Тогда
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеСменыИИН, "contractId") Тогда
					СтрокаСменаИИН.Идентификатор = ДанныеСменыИИН.contractId;
				Иначе
					СтрокаСменаИИН.Идентификатор = Договор.contractId;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ТипЗнч(ДанныеСменыИИН) = Тип("Массив") Тогда
			
			Для Каждого СменаИИН Из ДанныеСменыИИН Цикл
				СтрокаСменаИИН = ТаблицыЭТД.ИзмененияИИНРаботника.Добавить();
				СтрокаСменаИИН.ИИНРаботника	 = СменаИИН.iin;
				Если Форма <> Неопределено Тогда
					Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СменаИИН, "contractId") Тогда
						СтрокаСменаИИН.Идентификатор = СменаИИН.contractId;
					Иначе
						СтрокаСменаИИН.Идентификатор = Договор.contractId;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Договор.contractRestoreData.Количество() > 0
		И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Договор.contractRestoreData, "contractRestore") Тогда
		
		ДанныеВосстановленияНаРаботе = Договор.contractRestoreData.contractRestore;
		Если ТипЗнч(ДанныеВосстановленияНаРаботе) = Тип("Структура") Тогда
			СтрокаВосстановленияНаРаботе = ТаблицыЭТД.ВосстановленияНаРаботе.Добавить();
			СтрокаВосстановленияНаРаботе.ДатаРасторжения = Дата(СтрЗаменить(ДанныеВосстановленияНаРаботе.terminationDate,"-",""));
			СтрокаВосстановленияНаРаботе.ДатаВосстановления = Дата(СтрЗаменить(ДанныеВосстановленияНаРаботе.restoreDate,"-",""));
			СтрокаВосстановленияНаРаботе.КодПричиныРасторжения = ДанныеВосстановленияНаРаботе.dTerminationReason;
			СтрокаВосстановленияНаРаботе.КодГосударственногоОргана = ДанныеВосстановленияНаРаботе.dRestoreOrganizationType;
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеВосстановленияНаРаботе, "orderNumber") Тогда
				СтрокаВосстановленияНаРаботе.НомерПриказа = ДанныеВосстановленияНаРаботе.orderNumber;
			КонецЕсли;
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеВосстановленияНаРаботе, "restoreNote") Тогда
				СтрокаВосстановленияНаРаботе.КомментарийОшибочногоРасторжения = ДанныеВосстановленияНаРаботе.restoreNote;
			КонецЕсли;
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеВосстановленияНаРаботе, "court") Тогда
				СтрокаВосстановленияНаРаботе.КодСуда = ДанныеВосстановленияНаРаботе.court;
				СтрокаВосстановленияНаРаботе.НаименованиеСуда = ЭТДВызовСервера.ПолучитьНаименованиеСуда(ДанныеВосстановленияНаРаботе.court);
			КонецЕсли;
			Если Форма <> Неопределено Тогда
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеВосстановленияНаРаботе, "contractId") Тогда
					СтрокаВосстановленияНаРаботе.Идентификатор = ДанныеВосстановленияНаРаботе.contractId;
				Иначе
					СтрокаВосстановленияНаРаботе.Идентификатор = Договор.contractId;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ТипЗнч(ДанныеВосстановленияНаРаботе) = Тип("Массив") Тогда
			
			Для Каждого ВосстановлениеНаРаботе Из ДанныеВосстановленияНаРаботе Цикл
				СтрокаВосстановленияНаРаботе = ТаблицыЭТД.ВосстановленияНаРаботе.Добавить();
				СтрокаВосстановленияНаРаботе.ДатаРасторжения = Дата(СтрЗаменить(ВосстановлениеНаРаботе.terminationDate,"-",""));
				СтрокаВосстановленияНаРаботе.ДатаВосстановления = Дата(СтрЗаменить(ВосстановлениеНаРаботе.restoreDate,"-",""));
				СтрокаВосстановленияНаРаботе.КодПричиныРасторжения = ВосстановлениеНаРаботе.dTerminationReason;
				СтрокаВосстановленияНаРаботе.КодГосударственногоОргана = ВосстановлениеНаРаботе.dRestoreOrganizationType;
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ВосстановлениеНаРаботе, "orderNumber") Тогда
					СтрокаВосстановленияНаРаботе.НомерПриказа = ВосстановлениеНаРаботе.orderNumber;
				КонецЕсли;
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ВосстановлениеНаРаботе, "restoreNote") Тогда
					СтрокаВосстановленияНаРаботе.КомментарийОшибочногоРасторжения = ВосстановлениеНаРаботе.restoreNote;
				КонецЕсли;
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ВосстановлениеНаРаботе, "court") Тогда
					СтрокаВосстановленияНаРаботе.КодСуда = ВосстановлениеНаРаботе.court;
					СтрокаВосстановленияНаРаботе.НаименованиеСуда = ЭТДВызовСервера.ПолучитьНаименованиеСуда(ВосстановлениеНаРаботе.court);
				КонецЕсли;
				Если Форма <> Неопределено Тогда
					Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ВосстановлениеНаРаботе, "contractId") Тогда
						СтрокаВосстановленияНаРаботе.Идентификатор = ВосстановлениеНаРаботе.contractId;
					Иначе
						СтрокаВосстановленияНаРаботе.Идентификатор = Договор.contractId;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Договор.reorganizationData.Количество() > 0
		И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Договор.reorganizationData, "reorganization") Тогда
		
		ДанныеРеорганизации = Договор.reorganizationData.reorganization;
		Если ТипЗнч(ДанныеРеорганизации) = Тип("Структура") Тогда
			СтрокаРеорганизации = ТаблицыЭТД.РеорганизацияРаботодателя.Добавить();
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеРеорганизации, "oldEmployerData")
				И ТипЗнч(ДанныеРеорганизации.oldEmployerData) = Тип("Структура") Тогда
				СтрокаРеорганизации.БИНПредыдущейОрганизации = ДанныеРеорганизации.oldEmployerData.bin;
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеРеорганизации.oldEmployerData, "kato") Тогда
					СтрокаРеорганизации.КодРегионаПредыдущейОрганизации = ДанныеРеорганизации.oldEmployerData.kato;
				КонецЕсли;
			ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеРеорганизации, "oldEmployerDataBin") Тогда
				СтрокаРеорганизации.БИНПредыдущейОрганизации = ДанныеРеорганизации.oldEmployerDataBin;
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеРеорганизации, "oldEmployerDataKato") Тогда
					СтрокаРеорганизации.КодРегионаПредыдущейОрганизации = ДанныеРеорганизации.oldEmployerDataKato;
				КонецЕсли;
			ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеРеорганизации, "oldEmployer")
				И ТипЗнч(ДанныеРеорганизации.oldEmployer) = Тип("Структура") Тогда
				СтрокаРеорганизации.БИНПредыдущейОрганизации = ДанныеРеорганизации.oldEmployer.bin;
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеРеорганизации.oldEmployer, "kato") Тогда
					СтрокаРеорганизации.КодРегионаПредыдущейОрганизации = ДанныеРеорганизации.oldEmployer.kato;
				КонецЕсли;
			ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеРеорганизации, "oldEmployerBin") Тогда
				СтрокаРеорганизации.БИНПредыдущейОрганизации = ДанныеРеорганизации.oldEmployerBin;
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеРеорганизации, "oldEmployerKato") Тогда
					СтрокаРеорганизации.КодРегионаПредыдущейОрганизации = ДанныеРеорганизации.oldEmployerKato;
				КонецЕсли;
			КонецЕсли;
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеРеорганизации, "newEmployerData")
				И ТипЗнч(ДанныеРеорганизации.newEmployerData) = Тип("Структура") Тогда
				СтрокаРеорганизации.БИНОрганизации = ДанныеРеорганизации.newEmployerData.bin;
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеРеорганизации.newEmployerData, "kato") Тогда
					СтрокаРеорганизации.КодРегиона = ДанныеРеорганизации.newEmployerData.kato;
				КонецЕсли;
			ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеРеорганизации, "newEmployerDataBin") Тогда
				СтрокаРеорганизации.БИНОрганизации = ДанныеРеорганизации.newEmployerDataBin;
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеРеорганизации, "newEmployerDataKato") Тогда
					СтрокаРеорганизации.КодРегиона = ДанныеРеорганизации.newEmployerDataKato;
				КонецЕсли;
			ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеРеорганизации, "newEmployer")
				И ТипЗнч(ДанныеРеорганизации.newEmployer) = Тип("Структура") Тогда
				СтрокаРеорганизации.БИНОрганизации = ДанныеРеорганизации.newEmployer.bin;
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеРеорганизации.newEmployer, "kato") Тогда
					СтрокаРеорганизации.КодРегиона = ДанныеРеорганизации.newEmployer.kato;
				КонецЕсли;
			ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеРеорганизации, "newEmployerBin") Тогда
				СтрокаРеорганизации.БИНОрганизации = ДанныеРеорганизации.newEmployerBin;
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеРеорганизации, "newEmployerKato") Тогда
					СтрокаРеорганизации.КодРегиона = ДанныеРеорганизации.newEmployerKato;
				КонецЕсли;
			КонецЕсли;
			СтрокаРеорганизации.ДатаРеорганизации = Дата(СтрЗаменить(ДанныеРеорганизации.reorganizationDate,"-",""));
			Если Форма <> Неопределено Тогда
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеРеорганизации, "contractId") Тогда
					СтрокаРеорганизации.Идентификатор = ДанныеРеорганизации.contractId;
				Иначе
					СтрокаРеорганизации.Идентификатор = Договор.contractId;
				КонецЕсли;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(СтрокаРеорганизации.БИНПредыдущейОрганизации)
				И НЕ ЗначениеЗаполнено(СтрокаРеорганизации.КодРегионаПредыдущейОрганизации)
				И НЕ ЗначениеЗаполнено(СтрокаРеорганизации.БИНОрганизации)
				И НЕ ЗначениеЗаполнено(СтрокаРеорганизации.КодРегиона) Тогда
				ТаблицыЭТД.РеорганизацияРаботодателя.Удалить(СтрокаРеорганизации);
			КонецЕсли;
		ИначеЕсли ТипЗнч(ДанныеРеорганизации) = Тип("Массив") Тогда
			
			Для Каждого Реорганизация Из ДанныеРеорганизации Цикл
				СтрокаРеорганизации = ТаблицыЭТД.РеорганизацияРаботодателя.Добавить();
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Реорганизация, "oldEmployerData")
					И ТипЗнч(Реорганизация.oldEmployerData) = Тип("Структура") Тогда
					СтрокаРеорганизации.БИНПредыдущейОрганизации = Реорганизация.oldEmployerData.bin;
					Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Реорганизация.oldEmployerData, "kato") Тогда
						СтрокаРеорганизации.КодРегионаПредыдущейОрганизации = Реорганизация.oldEmployerData.kato;
					КонецЕсли;
				ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Реорганизация, "oldEmployerDataBin") Тогда
					СтрокаРеорганизации.БИНПредыдущейОрганизации = Реорганизация.oldEmployerDataBin;
					Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Реорганизация, "oldEmployerDataKato") Тогда
						СтрокаРеорганизации.КодРегионаПредыдущейОрганизации = Реорганизация.oldEmployerDataKato;
					КонецЕсли;
				ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Реорганизация, "oldEmployer")
					И ТипЗнч(Реорганизация.oldEmployer) = Тип("Структура") Тогда
					СтрокаРеорганизации.БИНПредыдущейОрганизации = Реорганизация.oldEmployer.bin;
					Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Реорганизация.oldEmployer, "kato") Тогда
						СтрокаРеорганизации.КодРегионаПредыдущейОрганизации = Реорганизация.oldEmployer.kato;
					КонецЕсли;
				ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Реорганизация, "oldEmployerBin") Тогда
					СтрокаРеорганизации.БИНПредыдущейОрганизации = Реорганизация.oldEmployerBin;
					Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Реорганизация, "oldEmployerKato") Тогда
						СтрокаРеорганизации.КодРегионаПредыдущейОрганизации = Реорганизация.oldEmployerKato;
					КонецЕсли;
				КонецЕсли;
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Реорганизация, "newEmployerData")
					И ТипЗнч(Реорганизация.newEmployerData) = Тип("Структура") Тогда
					СтрокаРеорганизации.БИНОрганизации = Реорганизация.newEmployerData.bin;
					Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Реорганизация.newEmployerData, "kato") Тогда
						СтрокаРеорганизации.КодРегиона = Реорганизация.newEmployerData.kato;
					КонецЕсли;
				ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Реорганизация, "newEmployerDataBin") Тогда
					СтрокаРеорганизации.БИНОрганизации = Реорганизация.newEmployerDataBin;
					Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Реорганизация, "newEmployerDataKato") Тогда
						СтрокаРеорганизации.КодРегиона = Реорганизация.newEmployerDataKato;
					КонецЕсли;
				ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Реорганизация, "newEmployer")
					И ТипЗнч(Реорганизация.newEmployer) = Тип("Структура") Тогда
					СтрокаРеорганизации.БИНОрганизации = Реорганизация.newEmployer.bin;
					Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Реорганизация.newEmployer, "kato") Тогда
						СтрокаРеорганизации.КодРегиона = Реорганизация.newEmployer.kato;
					КонецЕсли;
				ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Реорганизация, "newEmployerBin") Тогда
					СтрокаРеорганизации.БИНОрганизации = Реорганизация.newEmployerBin;
					Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Реорганизация, "newEmployerKato") Тогда
						СтрокаРеорганизации.КодРегиона = Реорганизация.newEmployerKato;
					КонецЕсли;
				КонецЕсли;
				СтрокаРеорганизации.ДатаРеорганизации = Дата(СтрЗаменить(Реорганизация.reorganizationDate,"-",""));
				Если Форма <> Неопределено Тогда
					Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Реорганизация, "contractId") Тогда
						СтрокаРеорганизации.Идентификатор = Реорганизация.contractId;
					Иначе
						СтрокаРеорганизации.Идентификатор = Договор.contractId;
					КонецЕсли;
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(СтрокаРеорганизации.БИНПредыдущейОрганизации)
					И НЕ ЗначениеЗаполнено(СтрокаРеорганизации.КодРегионаПредыдущейОрганизации)
					И НЕ ЗначениеЗаполнено(СтрокаРеорганизации.БИНОрганизации)
					И НЕ ЗначениеЗаполнено(СтрокаРеорганизации.КодРегиона) Тогда
					ТаблицыЭТД.РеорганизацияРаботодателя.Удалить(СтрокаРеорганизации);
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Договор.prolongationData.Количество() > 0
		И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Договор.prolongationData, "prolongation") Тогда
		
		ДанныеПролонгации = Договор.prolongationData.prolongation;
		Если ТипЗнч(ДанныеПролонгации) = Тип("Структура") Тогда
			СтрокаПролонгации = ТаблицыЭТД.ПролонгацияДоговора.Добавить();
			СтрокаПролонгации.ДатаПролонгации = Дата(СтрЗаменить(ДанныеПролонгации.prolongationDate,"-",""));
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеПролонгации, "endDate") Тогда
				СтрокаПролонгации.ДатаОкончанияПролонгации = Дата(СтрЗаменить(ДанныеПролонгации.endDate,"-",""));
			КонецЕсли;
			СтрокаПролонгации.СрокДействияПролонгации = ДанныеПролонгации.dContractDate;
			Если Форма <> Неопределено Тогда
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеПролонгации, "contractId") Тогда
					СтрокаПролонгации.Идентификатор = ДанныеПролонгации.contractId;
				Иначе
					СтрокаПролонгации.Идентификатор = Договор.contractId;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ТипЗнч(ДанныеПролонгации) = Тип("Массив") Тогда
			
			Для Каждого Пролонгация Из ДанныеПролонгации Цикл
				СтрокаПролонгации = ТаблицыЭТД.ПролонгацияДоговора.Добавить();
				СтрокаПролонгации.ДатаПролонгации = Дата(СтрЗаменить(Пролонгация.prolongationDate,"-",""));
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Пролонгация, "endDate") Тогда
					СтрокаПролонгации.ДатаОкончанияПролонгации = Дата(СтрЗаменить(Пролонгация.endDate,"-",""));
				КонецЕсли;
				СтрокаПролонгации.СрокДействияПролонгации = Пролонгация.dContractDate;
				Если Форма <> Неопределено Тогда
					Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Пролонгация, "contractId") Тогда
						СтрокаПролонгации.Идентификатор = Пролонгация.contractId;
					Иначе
						СтрокаПролонгации.Идентификатор = Договор.contractId;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Договор.socialLeaveData.Количество() > 0
		И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Договор.socialLeaveData, "socialLeave") Тогда
		
		ДанныеСоциальногоОтпуска = Договор.socialLeaveData.socialLeave;
		Если ТипЗнч(ДанныеСоциальногоОтпуска) = Тип("Структура") Тогда
			СтрокаСоциальногоОтпуска = ТаблицыЭТД.СоциальныеОтпуска.Добавить();
			СтрокаСоциальногоОтпуска.ИдентификаторСоциальногоОтпуска = ДанныеСоциальногоОтпуска.socialLeaveId;
			СтрокаСоциальногоОтпуска.НеРаботалС = Дата(СтрЗаменить(ДанныеСоциальногоОтпуска.beginDate,"-",""));
			СтрокаСоциальногоОтпуска.НеРаботалПо = Дата(СтрЗаменить(ДанныеСоциальногоОтпуска.endDate,"-",""));
			СтрокаСоциальногоОтпуска.КодСоциальногоОтпуска = ДанныеСоциальногоОтпуска.dSocialLeaveType;
			СтрокаСоциальногоОтпуска.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДополнительныхДокументовЭТД.Подписан");
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеСоциальногоОтпуска, "sheetNumber") Тогда
				СтрокаСоциальногоОтпуска.НомерТабеля = ДанныеСоциальногоОтпуска.sheetNumber;
			КонецЕсли;
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеСоциальногоОтпуска, "daysOffCount") Тогда
				СтрокаСоциальногоОтпуска.ВыходныеДниЗаПериодНетрудоспособности = ДанныеСоциальногоОтпуска.daysOffCount;
			КонецЕсли;
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеСоциальногоОтпуска, "workDate") Тогда
				СтрокаСоциальногоОтпуска.ДатаПервогоРабочегоДня = Дата(СтрЗаменить(ДанныеСоциальногоОтпуска.workDate,"-",""));
			КонецЕсли;
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеСоциальногоОтпуска, "departmentNameRu") Тогда
				СтрокаСоциальногоОтпуска.ПодразделениеНаРусскомЯзыке = ДанныеСоциальногоОтпуска.departmentNameRu;
			КонецЕсли;
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеСоциальногоОтпуска, "departmentNameKz") Тогда
				СтрокаСоциальногоОтпуска.ПодразделениеНаКазахскомЯзыке = ДанныеСоциальногоОтпуска.departmentNameKz;
			КонецЕсли;
			Если Форма <> Неопределено Тогда
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеСоциальногоОтпуска, "contractId") Тогда
					СтрокаСоциальногоОтпуска.Идентификатор = ДанныеСоциальногоОтпуска.contractId;
				Иначе
					СтрокаСоциальногоОтпуска.Идентификатор = Договор.contractId;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ТипЗнч(ДанныеСоциальногоОтпуска) = Тип("Массив") Тогда
			
			Для Каждого СоциальныйОтпуск Из ДанныеСоциальногоОтпуска Цикл
				СтрокаСоциальногоОтпуска = ТаблицыЭТД.СоциальныеОтпуска.Добавить();
				СтрокаСоциальногоОтпуска.ИдентификаторСоциальногоОтпуска = СоциальныйОтпуск.socialLeaveId;
				СтрокаСоциальногоОтпуска.НеРаботалС = Дата(СтрЗаменить(СоциальныйОтпуск.beginDate,"-",""));
				СтрокаСоциальногоОтпуска.НеРаботалПо = Дата(СтрЗаменить(СоциальныйОтпуск.endDate,"-",""));
				СтрокаСоциальногоОтпуска.КодСоциальногоОтпуска = СоциальныйОтпуск.dSocialLeaveType;
				СтрокаСоциальногоОтпуска.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДополнительныхДокументовЭТД.Подписан");
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СоциальныйОтпуск, "sheetNumber") Тогда
					СтрокаСоциальногоОтпуска.НомерТабеля = СоциальныйОтпуск.sheetNumber;
				КонецЕсли;
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СоциальныйОтпуск, "daysOffCount") Тогда
					СтрокаСоциальногоОтпуска.ВыходныеДниЗаПериодНетрудоспособности = СоциальныйОтпуск.daysOffCount;
				КонецЕсли;
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СоциальныйОтпуск, "workDate") Тогда
					СтрокаСоциальногоОтпуска.ДатаПервогоРабочегоДня = Дата(СтрЗаменить(СоциальныйОтпуск.workDate,"-",""));
				КонецЕсли;
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СоциальныйОтпуск, "departmentNameRu") Тогда
					СтрокаСоциальногоОтпуска.ПодразделениеНаРусскомЯзыке = СоциальныйОтпуск.departmentNameRu;
				КонецЕсли;
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СоциальныйОтпуск, "departmentNameKz") Тогда
					СтрокаСоциальногоОтпуска.ПодразделениеНаКазахскомЯзыке = СоциальныйОтпуск.departmentNameKz;
				КонецЕсли;
				Если Форма <> Неопределено Тогда
					Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СоциальныйОтпуск, "contractId") Тогда
						СтрокаСоциальногоОтпуска.Идентификатор = СоциальныйОтпуск.contractId;
					Иначе
						СтрокаСоциальногоОтпуска.Идентификатор = Договор.contractId;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Договор,"file") Тогда
		
		Если НЕ ТипЗнч(Договор.file) = Тип("Массив") Тогда
			ФайлЭТД = Договор.file;
			ПараметрыОтбора = Новый Структура();
			ПараметрыОтбора.Вставить("НаименованиеФайла", ФайлЭТД.name);
			ПараметрыОтбора.Вставить("ФорматФайла", ФайлЭТД.format);
			СтрокиПрисоединенныхФайлов = ТаблицыЭТД.ПрисоединенныеФайлыЭТД.НайтиСтроки(ПараметрыОтбора);
			Если СтрокиПрисоединенныхФайлов.Количество() = 0 Тогда
				СтрокаПрисоединенныхФайлов = ТаблицыЭТД.ПрисоединенныеФайлыЭТД.Добавить();
			Иначе
				СтрокаПрисоединенныхФайлов = СтрокиПрисоединенныхФайлов[0];
			КонецЕсли;
			СтрокаПрисоединенныхФайлов.ИдентификаторФайлаЭТД = ФайлЭТД.id;
			СтрокаПрисоединенныхФайлов.НаименованиеФайла = ФайлЭТД.name;
			СтрокаПрисоединенныхФайлов.ФорматФайла = ФайлЭТД.format;
			СтрокаПрисоединенныхФайлов.ТипДокумента = ПредопределенноеЗначение("Перечисление.ТипыПрисоединенныхФайловЭТД.ВредныеУсловияТруда");
			Если Форма <> Неопределено Тогда
				СтрокаПрисоединенныхФайлов.Идентификатор = Договор.contractId;
			КонецЕсли;
		Иначе
			
			ПараметрыОтбора = Новый Структура();
			Для Каждого ФайлЭТД Из Договор.file Цикл
				ПараметрыОтбора.Вставить("НаименованиеФайла", ФайлЭТД.name);
				ПараметрыОтбора.Вставить("ФорматФайла", ФайлЭТД.format);
				СтрокиПрисоединенныхФайлов = ТаблицыЭТД.ПрисоединенныеФайлыЭТД.НайтиСтроки(ПараметрыОтбора);
				Если СтрокиПрисоединенныхФайлов.Количество() = 0 Тогда
					СтрокаПрисоединенныхФайлов = ТаблицыЭТД.ПрисоединенныеФайлыЭТД.Добавить();
				Иначе
					СтрокаПрисоединенныхФайлов = СтрокиПрисоединенныхФайлов[0];
				КонецЕсли;
				СтрокаПрисоединенныхФайлов.ИдентификаторФайлаЭТД = ФайлЭТД.id;
				СтрокаПрисоединенныхФайлов.НаименованиеФайла = ФайлЭТД.name;
				СтрокаПрисоединенныхФайлов.ФорматФайла = ФайлЭТД.format;
				СтрокаПрисоединенныхФайлов.ТипДокумента = ПредопределенноеЗначение("Перечисление.ТипыПрисоединенныхФайловЭТД.ВредныеУсловияТруда");
				Если Форма <> Неопределено Тогда
					СтрокаПрисоединенныхФайлов.Идентификатор = Договор.contractId;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Форма = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Дополнительные соглашения
	
	Если Договор.subContractData.Количество() > 0 Тогда
		
		ДополнительныеСоглашенияДоговора = Договор.subContractData.subContract;
		
		Если НЕ ТипЗнч(ДополнительныеСоглашенияДоговора) = Тип("Массив") Тогда
			
			СтрокаСоглашение = Форма.ДополнительныеСоглашения.Добавить();
			ЗаполнитьЭТДСоглашениеПолученнымиДанными(ДополнительныеСоглашенияДоговора, Договор, СтрокаСоглашение, Форма);
			
		Иначе 
			
			Для Каждого Соглашение Из ДополнительныеСоглашенияДоговора Цикл
				СтрокаСоглашение = Форма.ДополнительныеСоглашения.Добавить();
				ЗаполнитьЭТДСоглашениеПолученнымиДанными(Соглашение, Договор, СтрокаСоглашение, Форма);
			КонецЦикла;
			
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьЭТДСоглашениеПолученнымиДанными(Соглашение, Договор, ЭТДСоглашение, Форма = Неопределено) Экспорт
	
	Если Форма <> Неопределено Тогда
		// загрузка данных из ЕСУТД
		Организация = Форма.Организация;
		БИНОрганизации = Форма.БИНОрганизации;
		ПерезаполнитьСуществующиеЭТД = Форма.ПерезаполнитьСуществующиеЭТД;
		ТаблицыЭТД = Форма;
		
		ОбщиеНавыки = ТаблицыЭТД.ОбщиеНавыкиДоп;
		СпециальныеНавыки = ТаблицыЭТД.СпециальныеНавыкиДоп;
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Соглашение,"dWorkingConditions") Тогда
			ЭТДСоглашение.УсловиеТруда = Соглашение.dWorkingConditions;
		Иначе
			ЭТДСоглашение.УсловиеТруда = "0";
		КонецЕсли;
		ЭТДСоглашение.ИИНДляПроверки  = Договор.iin;
		ЭТДСоглашение.КодДолжностиДляПроверки = Соглашение.dPosition;
	Иначе
		// перезаполнение ЭТД из ЕСУТД
		Организация = ЭТДСоглашение.Организация;
		БИНОрганизации = ЭТДСоглашение.БИНОрганизации;
		ПерезаполнитьСуществующиеЭТД = Истина;
		ТаблицыЭТД = ЭТДСоглашение;
		
		ОбщиеНавыки = ТаблицыЭТД.ОбщиеНавыки;
		СпециальныеНавыки = ТаблицыЭТД.СпециальныеНавыки;
		
		ЭТДСоглашение.УсловияТруда.Очистить();
		УсловияТруда = ЭТДСоглашение.УсловияТруда.Добавить();
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Соглашение,"dWorkingConditions") Тогда
			УсловияТруда.УсловиеТруда = Соглашение.dWorkingConditions;
		Иначе
			УсловияТруда.УсловиеТруда = "0";
		КонецЕсли;
	КонецЕсли;
	
	ДатаЗаключения = Дата(СтрЗаменить(Соглашение.subContractDate,"-",""));
	КодТяжелыхУсловийТруда = "";
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Соглашение,"dHarmfulConditionsType") Тогда
		КодТяжелыхУсловийТруда = Соглашение.dHarmfulConditionsType;
	КонецЕсли;
	ДатаРасторжения = Дата('00010101');
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Договор,"terminationDate") Тогда
		ДатаРасторжения = Дата(СтрЗаменить(Договор.terminationDate,"-",""));
	КонецЕсли;
	
	ПериодДанных = ?(ЗначениеЗаполнено(ДатаЗаключения), ДатаЗаключения, Неопределено);
	Если ЗначениеЗаполнено(ЭТДСоглашение.Сотрудник) Тогда
		ИИН = ""; // не меняем ранее заполненные
	Иначе
		ИИН = Договор.iin;
	КонецЕсли;
	ДанныеДляЗаполненияЭТД = ПолучитьДанныеДляЗаполненияЭТД(ИИН, Соглашение.subContractId, Соглашение.dPosition, КодТяжелыхУсловийТруда,,, Организация, ПериодДанных, ДатаРасторжения,, Договор.contractId);
	
	Если НЕ ПерезаполнитьСуществующиеЭТД И ЗначениеЗаполнено(ДанныеДляЗаполненияЭТД.ДоговорЭТД) Тогда
		Возврат; // не добавляем ранее загруженные
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ЭТДСоглашение, ДанныеДляЗаполненияЭТД);
	ЭТДСоглашение.ЭтоДополнительноеСоглашение   = Истина;
	ЭТДСоглашение.НомерДоговора   = Соглашение.subContractNumber;
	ЭТДСоглашение.Идентификатор   = Соглашение.subContractId;
	ЭТДСоглашение.ИдентификаторОсновногоЭТД = Договор.contractId;
	ЭТДСоглашение.ДатаНачала	  = Дата(СтрЗаменить(Соглашение.beginDate,"-",""));
	ЭТДСоглашение.ДатаЗаключения  = ДатаЗаключения;
	ЭТДСоглашение.КодДолжности	= Соглашение.dPosition;
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Соглашение,"dContractDate") Тогда
		ЭТДСоглашение.СрокДействия = Соглашение.dContractDate;
	КонецЕсли;
	ЭТДСоглашение.МестоРаботы	 = Соглашение.workPlace;
	ЭТДСоглашение.ИИНРаботника	= Договор.iin;
	ЭТДСоглашение.Организация = Организация;
	ЭТДСоглашение.БИНОрганизации  = БИНОрганизации;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Соглашение,"employerKato") Тогда
		ЭТДСоглашение.КодРегиона = Соглашение.employerKato;
	ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Соглашение,"workPlaceKato") Тогда
		ЭТДСоглашение.КодРегиона = Соглашение.workPlaceKato;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Соглашение,"workPlaceKato") Тогда
		ЭТДСоглашение.КодРегионаРабочегоМеста = Соглашение.workPlaceKato;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Соглашение,"dWorkingHours") Тогда
		ЭТДСоглашение.РежимРабочегоВремени = Соглашение.dWorkingHours;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Соглашение,"tariffRate") Тогда
		ЭТДСоглашение.ДоляНеполногоРабочегоВремени = Соглашение.tariffRate;
	КонецЕсли;
	
	ЭТДСоглашение.КодТяжелыхУсловийТруда = КодТяжелыхУсловийТруда;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Соглашение,"dRemoteWork") Тогда
		ЭТДСоглашение.ДистанционнаяРабота = Соглашение.dRemoteWork;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Соглашение,"workPlaceCountry")
		И ТипЗнч(Соглашение.workPlaceCountry) = Тип("Строка") Тогда
		ЭТДСоглашение.КодСтраныМестаРаботы = Соглашение.workPlaceCountry;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Соглашение,"otherConditions") Тогда
		ЭТДСоглашение.ИныеИзмененияУсловийТруда = Соглашение.otherConditions;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Соглашение,"dEstablishedPost") Тогда
		ЭТДСоглашение.ДолжностьНАОМСУ = Соглашение.dEstablishedPost;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Соглашение,"partTime") Тогда
		ЭТДСоглашение.ПоСовместительству = ?(Соглашение.partTime = "1", Истина, Ложь);
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Соглашение,"contractEndDate") Тогда
		ЭТДСоглашение.ДатаОкончанияДоговора = Дата(СтрЗаменить(Соглашение.contractEndDate,"-",""));
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Соглашение,"endDate") Тогда
		ЭТДСоглашение.ДатаОкончания = Дата(СтрЗаменить(Соглашение.endDate,"-",""));
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Соглашение,"isEmployeeRequest") Тогда
		Если Соглашение.isEmployeeRequest = "1" Тогда
			ЭТДСоглашение.НаличиеЗаявленияРаботника = "1";
		Иначе
			ЭТДСоглашение.НаличиеЗаявленияРаботника = "0";
		КонецЕсли;
	Иначе
		ЭТДСоглашение.НаличиеЗаявленияРаботника = "0";
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Соглашение,"isEmployeeConsent") Тогда
		Если Соглашение.isEmployeeConsent = "1" Тогда
			ЭТДСоглашение.СогласиеРаботника = "1";
		Иначе
			ЭТДСоглашение.СогласиеРаботника = "0";
		КонецЕсли;
	Иначе
		ЭТДСоглашение.СогласиеРаботника = "0";
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Соглашение,"isEmployerApprove") Тогда
		Если Соглашение.isEmployerApprove = "1" Тогда
			ЭТДСоглашение.СогласиеРаботодателя = "1";
		Иначе
			ЭТДСоглашение.СогласиеРаботодателя = "0";
		КонецЕсли;
	Иначе
		ЭТДСоглашение.СогласиеРаботодателя = "0";
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Соглашение,"employeePhone") Тогда
		ЭТДСоглашение.НомерТелефонаРаботника = Соглашение.employeePhone;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Соглашение,"hrManagerPhone") Тогда
		ЭТДСоглашение.НомерТелефонаМенеджера = Соглашение.hrManagerPhone;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Соглашение,"bankName") Тогда
		ЭТДСоглашение.НаименованиеБанка = Соглашение.bankName;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Соглашение,"bik") Тогда
		ЭТДСоглашение.БИКБанка = Соглашение.bik;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Соглашение,"accountNumber") Тогда
		ЭТДСоглашение.БанковскийСчетРаботника = Соглашение.accountNumber;
	КонецЕсли;
	
	Если Форма = Неопределено Тогда
		ОбщиеНавыки.Очистить();
		СпециальныеНавыки.Очистить();
	КонецЕсли;

	Если Соглашение.competenceList.Количество() > 0 Тогда
		
		Если НЕ ТипЗнч(Соглашение.competenceList.competence) = Тип("Массив")  Тогда
			СтрокаНавыки =  ОбщиеНавыки.Добавить();
			СтрокаНавыки.КодНавыка	 = Соглашение.competenceList.competence;
			Если Форма <> Неопределено Тогда
				СтрокаНавыки.Идентификатор = Соглашение.subContractId;
			КонецЕсли;
			МассивНавыков = Новый Массив;
			МассивНавыков.Добавить(Соглашение.competenceList.competence);
			СписокНавыков = ПолучитьНаименованиеНавыков("КлассификаторОбщиеНавыки", МассивНавыков);
			СтрокаНавыки.Наименование  = СписокНавыков.Получить(Соглашение.competenceList.competence);
		Иначе 
			
			СписокНавыков = ПолучитьНаименованиеНавыков("КлассификаторОбщиеНавыки", Соглашение.competenceList.competence);
			Для Каждого Навык Из Соглашение.competenceList.competence Цикл
				СтрокаНавыки =  ОбщиеНавыки.Добавить();
				СтрокаНавыки.КодНавыка	 = Навык;
				Если Форма <> Неопределено Тогда
					СтрокаНавыки.Идентификатор = Соглашение.subContractId;
				КонецЕсли;
				СтрокаНавыки.Наименование  = СписокНавыков.Получить(Навык);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
		
	Если Соглашение.competenceSpecList.Количество() > 0 Тогда
		
		Если НЕ ТипЗнч(Соглашение.competenceSpecList.competence) = Тип("Массив") Тогда
			СтрокаНавыки =  СпециальныеНавыки.Добавить();
			СтрокаНавыки.КодНавыка	 = Соглашение.competenceSpecList.competence;
			Если Форма <> Неопределено Тогда
				СтрокаНавыки.Идентификатор = Соглашение.subContractId;
			КонецЕсли;
			МассивНавыков = Новый Массив;
			МассивНавыков.Добавить(Соглашение.competenceSpecList.competence);
			СписокНавыков = ПолучитьНаименованиеНавыков("КлассификаторПрофессиональныеНавыки", МассивНавыков);
			СтрокаНавыки.Наименование  = СписокНавыков.Получить(Соглашение.competenceSpecList.competence);
		Иначе
			
			СписокНавыков = ПолучитьНаименованиеНавыков("КлассификаторПрофессиональныеНавыки", Соглашение.competenceSpecList.competence);
			Для Каждого Навык Из Соглашение.competenceSpecList.competence Цикл
				СтрокаНавыки =  СпециальныеНавыки.Добавить();
				СтрокаНавыки.КодНавыка	 = Навык;
				Если Форма <> Неопределено Тогда
					СтрокаНавыки.Идентификатор = Соглашение.subContractId;
				КонецЕсли;
				СтрокаНавыки.Наименование  = СписокНавыков.Получить(Навык);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Соглашение,"file") Тогда
		
		Если НЕ ТипЗнч(Соглашение.file) = Тип("Массив") Тогда
			ФайлЭТД = Соглашение.file;
			СтрокаПрисоединенныхФайлов = ТаблицыЭТД.ПрисоединенныеФайлыЭТД.Добавить();
			СтрокаПрисоединенныхФайлов.ИдентификаторФайлаЭТД = ФайлЭТД.id;
			СтрокаПрисоединенныхФайлов.НаименованиеФайла = ФайлЭТД.name;
			СтрокаПрисоединенныхФайлов.ФорматФайла = ФайлЭТД.format;
			Если Форма <> Неопределено Тогда
				СтрокаПрисоединенныхФайлов.Идентификатор = Соглашение.subContractId;
			КонецЕсли;
			СтрокаПрисоединенныхФайлов.ТипДокумента = ПредопределенноеЗначение("Перечисление.ТипыПрисоединенныхФайловЭТД.ВредныеУсловияТруда");
		Иначе
			
			Для Каждого ФайлЭТД Из Соглашение.file Цикл
				СтрокаПрисоединенныхФайлов = ТаблицыЭТД.ПрисоединенныеФайлыЭТД.Добавить();
				СтрокаПрисоединенныхФайлов.ИдентификаторФайлаЭТД = ФайлЭТД.id;
				СтрокаПрисоединенныхФайлов.НаименованиеФайла = ФайлЭТД.name;
				СтрокаПрисоединенныхФайлов.ФорматФайла = ФайлЭТД.format;
				Если Форма <> Неопределено Тогда
					СтрокаПрисоединенныхФайлов.Идентификатор = Соглашение.subContractId;
				КонецЕсли;
				СтрокаПрисоединенныхФайлов.ТипДокумента = ПредопределенноеЗначение("Перечисление.ТипыПрисоединенныхФайловЭТД.ВредныеУсловияТруда");
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьЭТДПоИдентификатору(Идентификатор) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЭТД.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ЭТД КАК ЭТД
		|ГДЕ
		|	ЭТД.Идентификатор = &Идентификатор
		|	И НЕ ЭТД.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ПолучитьДолжностьПоКоду(КодДолжности, Организация, Период) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СопоставлениеДолжностейЭТД.ДолжностьОрганизации КАК Должность,
	|	СопоставлениеДолжностейЭТД.ДолжностьПоШтатномуРасписанию КАК ДолжностьПоШтатномуРасписанию
	|ИЗ
	|	РегистрСведений.СопоставлениеДолжностейЭТД.СрезПоследних(&Период) КАК СопоставлениеДолжностейЭТД
	|ГДЕ
	|	СопоставлениеДолжностейЭТД.Организация = &Организация
	|	И СопоставлениеДолжностейЭТД.КодДолжностиЭТД = &КодДолжности";
	
	Запрос.УстановитьПараметр("КодДолжности", КодДолжности);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Период", Период);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Должности = Новый Структура();
	Должности.Вставить("Должность", Неопределено);
	Должности.Вставить("ДолжностьПоШтатномуРасписанию", Неопределено);
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		ЗаполнитьЗначенияСвойств(Должности, Выборка);
		Возврат Должности;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
		
КонецФункции

Функция ПолучитьАктуальныйСрокДействияЭТД(Ссылка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЭТД.ДатаНачала КАК ДатаНачала,
		|	ЭТД.ДатаОкончания КАК ДатаОкончания,
		|	ЭТД.СрокДействия КАК СрокДействия
		|ПОМЕСТИТЬ ВТ_ВсеСрокиДействия
		|ИЗ
		|	Документ.ЭТД КАК ЭТД
		|ГДЕ
		|	ЭТД.Ссылка = &Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЭТДПролонгацияДоговора.ДатаПролонгации,
		|	ЭТДПролонгацияДоговора.ДатаОкончанияПролонгации,
		|	ЭТДПролонгацияДоговора.СрокДействияПролонгации
		|ИЗ
		|	Документ.ЭТД.ПролонгацияДоговора КАК ЭТДПролонгацияДоговора
		|ГДЕ
		|	ЭТДПролонгацияДоговора.Ссылка = &Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЭТД.ДатаНачала,
		|	ЭТД.ДатаОкончанияДоговора,
		|	ЭТД.СрокДействия
		|ИЗ
		|	Документ.ЭТД КАК ЭТД
		|ГДЕ
		|	ЭТД.ОсновнойЭТД = &Ссылка
		|	И ЭТД.ЭтоДополнительноеСоглашение
		|	И ЭТД.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЭТД.Зарегистрирован)
		|	И НЕ ЭТД.ПометкаУдаления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(ВТ_ВсеСрокиДействия.ДатаНачала) КАК ДатаНачала
		|ПОМЕСТИТЬ ВТ_ПоследнийСрокДействия
		|ИЗ
		|	ВТ_ВсеСрокиДействия КАК ВТ_ВсеСрокиДействия
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ВсеСрокиДействия.ДатаНачала КАК ДатаНачала,
		|	ВТ_ВсеСрокиДействия.ДатаОкончания КАК ДатаОкончания,
		|	ВТ_ВсеСрокиДействия.СрокДействия КАК СрокДействия
		|ИЗ
		|	ВТ_ВсеСрокиДействия КАК ВТ_ВсеСрокиДействия
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПоследнийСрокДействия КАК ВТ_ПоследнийСрокДействия
		|		ПО ВТ_ВсеСрокиДействия.ДатаНачала = ВТ_ПоследнийСрокДействия.ДатаНачала";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	АктуальныйСрокДействия = Новый Структура("ДатаНачала,ДатаОкончания,СрокДействия");
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(АктуальныйСрокДействия, ВыборкаДетальныеЗаписи);
	КонецЦикла;
	
	Возврат АктуальныйСрокДействия;
	
КонецФункции

#Область Криптобиблиотека

Функция ПолучитьВерсиюВнешнегоМодуляЭТД() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат Константы.ВерсияВнешнегоМодуляЭТД.Получить();
	
КонецФункции

Функция ИспользоватьВнешнююКриптографиюДляКомпоненты() Экспорт
	
	ПараметрыЭТД = ЭТДСерверПовтИсп.ПолучитьПараметрыЭТД();
	Возврат ПараметрыЭТД.ИспользоватьВнешнююКриптографиюДляКомпоненты;
	
КонецФункции

Функция ИнформационнаяБазаФайловая() Экспорт
	
	Возврат ЭТДСерверПереопределяемый.ИнформационнаяБазаФайловая();
	
КонецФункции

Процедура ПроверитьИспользованиеСервернойКриптографии(Форма) Экспорт
	
	МестоУстановкиБиблиотеки = Константы.МестоВыполненияКриптографическихОпераций.Получить();
	ГруппаКомментарийМестоУстановкиБиблиотекиНаСервере = Форма.Элементы.Найти("ГруппаКомментарийМестоУстановкиБиблиотекиНаСервере");
	КомментарийМестоУстановкиБиблиотекиНаСервере = Форма.Элементы.Найти("КомментарийМестоУстановкиБиблиотекиНаСервере");
	
	Если МестоУстановкиБиблиотеки = Перечисления.МестаВыполненияКриптографическихОпераций.НаСервере
		И ЭТДСерверПереопределяемый.ПоказыватьОповещенияСервернаяКриптография() Тогда
		
		Если ГруппаКомментарийМестоУстановкиБиблиотекиНаСервере <> Неопределено Тогда
			ГруппаКомментарийМестоУстановкиБиблиотекиНаСервере.Видимость = Истина;
			Если КомментарийМестоУстановкиБиблиотекиНаСервере <> Неопределено Тогда
				ЧастиСтроки = Новый Массив;
				ЧастиСтроки.Добавить(НСтр("ru = 'Место выполнения криптографических операций установлено в режим ""На сервере 1С:Предприятие"", поддержка которого будет прекращена в последующих релизах.'"));
				ЧастиСтроки.Добавить(Символы.ПС);
				ЧастиСтроки.Добавить(НСтр("ru = 'Рекомендуется изменить место выполнения криптографических операций на вариант ""На компьютерах пользователей"" '"));
				Если ЭТДСерверПереопределяемый.ДоступнаРольИзмененияНастроекЭТД() Тогда
					ЧастиСтроки.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'в настройках ЭТД.'"),,,,"ОткрытьНастройкиЭТД"));
				Иначе
					ЧастиСтроки.Добавить(НСтр("ru = 'в настройках ЭТД.'"));
				КонецЕсли;
				КомментарийМестоУстановкиБиблиотекиНаСервере.Заголовок = Новый ФорматированнаяСтрока(ЧастиСтроки);
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		
		Если ГруппаКомментарийМестоУстановкиБиблиотекиНаСервере <> Неопределено Тогда
			ГруппаКомментарийМестоУстановкиБиблиотекиНаСервере.Видимость = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьИспользованиеСервернойКриптографииФормыНастройки(Форма, МестоУстановкиБиблиотеки) Экспорт
	
	ЭлементМестоУстановкиБиблиотеки = Форма.Элементы.Найти("МестоУстановкиБиблиотеки");
	ГруппаКомментарийМестоУстановкиБиблиотекиНаСервере = Форма.Элементы.Найти("ГруппаКомментарийМестоУстановкиБиблиотекиНаСервере");
	КомментарийМестоУстановкиБиблиотекиНаСервере = Форма.Элементы.Найти("КомментарийМестоУстановкиБиблиотекиНаСервере");
	ГруппаКомментарийМестоУстановкиБиблиотекиНаКлиенте = Форма.Элементы.Найти("ГруппаКомментарийМестоУстановкиБиблиотекиНаКлиенте");
	КомментарийМестоУстановкиБиблиотекиНаКлиенте = Форма.Элементы.Найти("КомментарийМестоУстановкиБиблиотекиНаКлиенте");
	
	Если ЭлементМестоУстановкиБиблиотеки = Неопределено
		ИЛИ ГруппаКомментарийМестоУстановкиБиблиотекиНаСервере = Неопределено
		ИЛИ ГруппаКомментарийМестоУстановкиБиблиотекиНаКлиенте = Неопределено
		ИЛИ КомментарийМестоУстановкиБиблиотекиНаСервере = Неопределено
		ИЛИ КомментарийМестоУстановкиБиблиотекиНаКлиенте = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЭТДСерверПереопределяемый.ПоказыватьОповещенияСервернаяКриптография() Тогда
		Возврат;
	КонецЕсли;
	
	ГруппаКомментарийМестоУстановкиБиблиотекиНаСервере.ЦветФона = Новый Цвет(251, 212, 212);
	КомментарийМестоУстановкиБиблиотекиНаСервере.Заголовок = НСтр("ru = 'Место выполнения криптографических операций установлено в режим ""На сервере 1С:Предприятие"", поддержка которого будет прекращена в последующих релизах.
	|Рекомендуется перейти на вариант ""На компьютерах пользователей"".'");
	КомментарийМестоУстановкиБиблиотекиНаКлиенте.Заголовок = НСтр("ru = 'Поддержка варианта ""На сервере 1С:Предприятие"" будет прекращена в последующих релизах.
	|Включение данного варианта недоступно.'");
	
	Если МестоУстановкиБиблиотеки = Перечисления.МестаВыполненияКриптографическихОпераций.НаКлиенте Тогда
		ЭлементМестоУстановкиБиблиотеки.ТолькоПросмотр = Истина;
		ГруппаКомментарийМестоУстановкиБиблиотекиНаКлиенте.Видимость = ЭлементМестоУстановкиБиблиотеки.Видимость;
		ГруппаКомментарийМестоУстановкиБиблиотекиНаСервере.Видимость = Ложь;
	ИначеЕсли МестоУстановкиБиблиотеки = Перечисления.МестаВыполненияКриптографическихОпераций.НаСервере Тогда
		ГруппаКомментарийМестоУстановкиБиблиотекиНаСервере.Видимость = ЭлементМестоУстановкиБиблиотеки.Видимость;
		ГруппаКомментарийМестоУстановкиБиблиотекиНаКлиенте.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Выполняет преобразование (десериализацию) XML-строки в значение.
// См. также ЗначениеВСтрокуXML.
//
// Параметры:
//  СтрокаXML - Строка - XML-строка, с сериализованным объектом..
//
// Возвращаемое значение:
//  Произвольный - значение, полученное из переданной XML-строки.
//
Функция ЗначениеИзСтрокиXML(СтрокаXML)
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(СтрокаXML);
	
	Возврат СериализаторXDTO.ПрочитатьXML(ЧтениеXML);
КонецФункции

Процедура ДобавитьПодтверждающиеДокументы(ДанныеДоговора, Объект)
	
	ПрисоединяемыеФайлы = Новый Массив;
	
	Для Каждого СтрокаПрисоединенныхФайлов Из Объект.ПрисоединенныеФайлыЭТД Цикл
		Если СтрокаПрисоединенныхФайлов.ТипДокумента = Перечисления.ТипыПрисоединенныхФайловЭТД.ВредныеУсловияТруда
			И Найти("jpg, jpeg, png, pdf", СтрокаПрисоединенныхФайлов.ФорматФайла) = 0 Тогда
			ТекстСообщения = НСтр("ru = 'Отправка ЭТД приостановлена по причине ошибки при обработке файла под номером %1. Возможно, он не соответствует формату jpg, jpeg, png, pdf.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, СтрокаПрисоединенныхФайлов.НомерСтроки);
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;
		
		ПрисоединяемыйФайл = Новый Структура;
		ДвоичныеДанныеФайла = РаботаСФайлами.ДвоичныеДанныеФайла(СтрокаПрисоединенныхФайлов.СсылкаНаФайл);
		ПрисоединяемыйФайл.Вставить("fileBase64", Base64Строка(ДвоичныеДанныеФайла));
		ПрисоединяемыйФайл.Вставить("format", СтрокаПрисоединенныхФайлов.ФорматФайла);
		ПрисоединяемыйФайл.Вставить("name", СтрокаПрисоединенныхФайлов.НаименованиеФайла);
		ПрисоединяемыеФайлы.Добавить(ПрисоединяемыйФайл);
	КонецЦикла;
	
	ДанныеДоговора.Вставить("fileList", ПрисоединяемыеФайлы);
	
КонецПроцедуры

Процедура ПерезаполнитьЭТДСоглашение(Договор, ЭТДСоглашение)
	
	Идентификатор = ЭТДСоглашение.Идентификатор;
	
	Если Договор.subContractData.Количество() > 0 Тогда
		
		ДополнительныеСоглашенияДоговора = Договор.subContractData.subContract;
		
		Если НЕ ТипЗнч(ДополнительныеСоглашенияДоговора) = Тип("Массив") Тогда
			
			ЗаполнитьЭТДСоглашениеПолученнымиДанными(ДополнительныеСоглашенияДоговора, Договор, ЭТДСоглашение);
			
		Иначе
			
			Для Каждого Соглашение Из ДополнительныеСоглашенияДоговора Цикл
				Если Соглашение.subContractId <> Идентификатор Тогда
					Продолжить;
				КонецЕсли;
				ЗаполнитьЭТДСоглашениеПолученнымиДанными(Соглашение, Договор, ЭТДСоглашение);
			КонецЦикла;
			
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьДанныеДляЗаполненияЭТД(ИИН, Идентификатор, КодДолжности, КодУсловийТруда, КодОбразования, КодОснованияПривлеченияИностранца, Организация, Период, ДатаРасторжения, КодПричиныРасторжения = Неопределено, ИдентификаторОсновногоДоговора = Неопределено)
	
	ДанныеДляЗаполнения = Новый Структура;
	
	Если Период = Неопределено Тогда
		Период = ТекущаяДатаСеанса();
	КонецЕсли;
	Если ЗначениеЗаполнено(ИИН) Тогда
		ДанныеДляЗаполнения.Вставить("Сотрудник", ЭТДСервер.ПолучитьСотрудникаПоИИН(ИИН, Организация, Период));
	КонецЕсли;
	ДанныеДляЗаполнения.Вставить("ДоговорЭТД", ПолучитьЭТДПоИдентификатору(Идентификатор));
	Если ЗначениеЗаполнено(ИдентификаторОсновногоДоговора) Тогда
		ДанныеДляЗаполнения.Вставить("ОсновнойЭТД", ПолучитьЭТДПоИдентификатору(ИдентификаторОсновногоДоговора));
	КонецЕсли;
	Должности = ПолучитьДолжностьПоКоду(КодДолжности, Организация, Период);
	Если Должности <> Неопределено Тогда
		ДанныеДляЗаполнения.Вставить("Должность", Должности.Должность);
		ДанныеДляЗаполнения.Вставить("ДолжностьПоШтатномуРасписанию", Должности.ДолжностьПоШтатномуРасписанию);
		ДанныеДляЗаполнения.Вставить("КодДолжностиДляПроверки", КодДолжности);
	КонецЕсли;
	Если ЗначениеЗаполнено(ДатаРасторжения) И ЗначениеЗаполнено(КодПричиныРасторжения) Тогда
		ИнформацияОбОснованииРасторжения = ЭТДСервер.ПолучитьИнформациюОбОснованииРасторжения(ДатаРасторжения, Организация, КодПричиныРасторжения);
		ДанныеДляЗаполнения.Вставить("ОснованиеУвольнения", ИнформацияОбОснованииРасторжения.ОснованиеУвольнения);
		ДанныеДляЗаполнения.Вставить("НаименованиеПричиныРасторжения", ЭТДСервер.ПолучитьНаименованиеПричиныРасторжения(КодПричиныРасторжения));
	КонецЕсли;
	ДанныеДляЗаполнения.Вставить("НаименованиеДолжности", ЭТДСервер.ПолучитьНаименованиеДолжности(КодДолжности));
	ДанныеДляЗаполнения.Вставить("НаименованиеТяжелыхУсловийТруда", ЭТДСервер.ПолучитьНаименованиеТяжелыхУсловийТруда(КодУсловийТруда));
	ДанныеДляЗаполнения.Вставить("НаименованиеОбразованияИностранца", ЭТДСервер.ПолучитьНаименованиеОбразованияИностранца(КодОбразования));
	ДанныеДляЗаполнения.Вставить("НаименованиеОснованияПривлеченияИностранца", ЭТДСервер.ПолучитьНаименованиеОснованияПривлеченияИностранца(КодОснованияПривлеченияИностранца));
	Если ЗначениеЗаполнено(ДатаРасторжения) Тогда
		ДанныеДляЗаполнения.Вставить("Статус", Перечисления.СтатусыЭТД.Расторгнут);
	Иначе
		ДанныеДляЗаполнения.Вставить("Статус", Перечисления.СтатусыЭТД.Зарегистрирован);
	КонецЕсли;
	Если ЗначениеЗаполнено(ДанныеДляЗаполнения.ДоговорЭТД) Тогда
		ДанныеДляЗаполнения.Вставить("ДокументОснование", ДанныеДляЗаполнения.ДоговорЭТД.ДокументОснование);
	КонецЕсли;
	
	Возврат ДанныеДляЗаполнения;
	
КонецФункции

Функция ПолучитьНаименованиеНавыков(Классификатор, КодыНавыков)
	
	СписокНавыков = Новый Соответствие;
	
	КлассификаторСтрокой = Обработки.ОбменЭТД.ПолучитьМакет(Классификатор).ПолучитьТекст();
	Для Каждого КодНавыка Из КодыНавыков Цикл
		ИндексНавыка = Найти(КлассификаторСтрокой, КодНавыка) + СтрДлина(КодНавыка);
		НавыкиСтрокой = Сред(КлассификаторСтрокой, ИндексНавыка);
		НавыкСтрокой = СокрП(Лев(НавыкиСтрокой, Найти(НавыкиСтрокой, "</row>") - 1));
		НавыкСтрокой = СокрЛ(СтрЗаменить(НавыкСтрокой, "</Value>", ""));
		НавыкСтрокой = СтрЗаменить(НавыкСтрокой, "<Value>", "");
		НавыкНаРусском = Лев(НавыкСтрокой, Найти(НавыкСтрокой, Символы.ПС) - 1);
	
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1'"), НавыкНаРусском);
		СписокНавыков.Вставить(КодНавыка, НавыкНаРусском);
	КонецЦикла;
	
	Возврат СписокНавыков;
	
КонецФункции

#КонецОбласти
