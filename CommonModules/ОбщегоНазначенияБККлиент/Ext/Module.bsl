////////////////////////////////////////////////////////////////////////////////
// ОбщегоНазначенияБККлиент: 
//  
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Выполняется перед интерактивным началом работы пользователя с областью данных или в локальном режиме.
//
// Соответствует обработчику ПередНачаломРаботыСистемы.
//
// Параметры:
//  Параметры - Структура - структура со свойствами:
//              Отказ                  - Булево - Возвращаемое значение. Если установить Истина,
//                                       то работа программы будет прекращена.
//              Перезапустить          - Булево - Возвращаемое значение. Если установить Истина и параметр
//                                       Отказ тоже установлен в Истина, то выполняется перезапуск программы.
//              ДополнительныеПараметрыКоманднойСтроки - Строка - Возвращаемое значение. Имеет смысл
//                                       когда Отказ и Перезапустить установлены Истина.
//              ИнтерактивнаяОбработка - ОписаниеОповещения - Возвращаемое значение. Для открытия окна,
//                                       блокирующего вход в программу, следует присвоить в этот параметр
//                                       описание обработчика оповещения, который открывает окно.
//                                       См. пример ниже.
//              ОбработкаПродолжения   - ОписаниеОповещения - если открывается окно, блокирующее вход
//                                       в программу, то в обработке закрытия этого окна необходимо
//                                       выполнить оповещение ОбработкаПродолжения.
//                                       См. пример ниже.
//
// Пример открытия окна, блокирующего вход в программу:
//
//		Если ОткрытьОкноПриЗапуске Тогда
//			Параметры.ИнтерактивнаяОбработка = Новый ОписаниеОповещения("ОткрытьОкно", ЭтотОбъект);
//		КонецЕсли;
//
//	Процедура ОткрытьОкно(Параметры, ДополнительныеПараметры) Экспорт
//		// Показываем окно, по закрытию которого вызывается обработчик оповещения ОткрытьОкноЗавершение
//		Оповещение = Новый ОписаниеОповещения("ОткрытьОкноЗавершение", ЭтотОбъект, Параметры);
//		Форма = ОткрытьФорму(... ,,, ... Оповещение);
//		Если Не Форма.Открыта() Тогда // Если ПриСозданииНаСервере Отказ установлен Истина.
//			ВыполнитьОбработкуОповещения(Параметры.ОбработкаПродолжения);
//		КонецЕсли;
//	КонецПроцедуры
//
//	Процедура ОткрытьОкноЗавершение(Результат, Параметры) Экспорт
//		...
//		ВыполнитьОбработкуОповещения(Параметры.ОбработкаПродолжения);
//		
//	КонецПроцедуры
//
Процедура ПередНачаломРаботыСистемы(Параметры) Экспорт
	
	ПараметрыКлиента = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиентаПриЗапуске();
	
	Если ПараметрыКлиента.Свойство("РолиПользователяНастроеныНекорректно") Тогда
		Параметры.Отказ = Истина;
		Параметры.ИнтерактивнаяОбработка = Новый ОписаниеОповещения(
			"ПоказатьПредупреждениеИПродолжить",
			СтандартныеПодсистемыКлиент.ЭтотОбъект,
			ПараметрыКлиента.РолиПользователяНастроеныНекорректно);
	КонецЕсли;
		
КонецПроцедуры

// Выполняется при интерактивном начале работы пользователя с областью данных или в локальном режиме.
//
// Соответствует обработчику ПриНачалеРаботыСистемы.
//
// Параметры:
//  Параметры - Структура - структура со свойствами:
//              Отказ                  - Булево - Возвращаемое значение. Если установить Истина,
//                                       то работа программы будет прекращена.
//              Перезапустить          - Булево - Возвращаемое значение. Если установить Истина и параметр
//                                       Отказ тоже установлен в Истина, то выполняется перезапуск программы.
//              ДополнительныеПараметрыКоманднойСтроки - Строка - Возвращаемое значение. Имеет смысл
//                                       когда Отказ и Перезапустить установлены Истина.
//              ИнтерактивнаяОбработка - ОписаниеОповещения - Возвращаемое значение. Для открытия окна,
//                                       блокирующего вход в программу, следует присвоить в этот параметр
//                                       описание обработчика оповещения, который открывает окно.
//                                       См. пример выше (для обработчика ПередНачаломРаботыСистемы).
//              ОбработкаПродолжения   - ОписаниеОповещения - если открывается окно, блокирующее вход
//                                       в программу, то в обработке закрытия этого окна необходимо
//                                       выполнить оповещение ОбработкаПродолжения.
//                                       См. пример выше (для обработчика ПередНачаломРаботыСистемы).
//
Процедура ПриНачалеРаботыСистемы(Параметры) Экспорт
	
	ЭСФКлиент.ПриНачалеРаботыСистемыЭСФ();
	
КонецПроцедуры

// Выполняется при интерактивном начале работы пользователя с областью данных или в локальном режиме.
// Вызывается после завершения действий ПриНачалеРаботыСистемы.
// Используется для подключения обработчиков ожидания, которые не должны вызываться
// в случае интерактивных действий перед и при начале работы системы.
//
// Интерактивные взаимодействия с пользователем запрещены.
//
Процедура ПослеНачалаРаботыСистемы() Экспорт
	
	ПараметрыРаботыКлиента = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиентаПриЗапуске();
	
	// Формы должны открываться только при входе в разделенную область данных
	// или при входе в локальную базу.		
	// Формы не должны показываться, если выполнен вход в базу, опубликованную в модели сервиса,
	// под неразделенным пользователем (АдминистраторСистемы).
	Если ПараметрыРаботыКлиента.ДоступноИспользованиеРазделенныхДанных Тогда
			
		Если ПараметрыРаботыКлиента.ПоказатьОписаниеИзмененийСистемы И ПараметрыРаботыКлиента.ПоказатьЗапускОбработокОбновления Тогда
			ОткрытьФорму("Обработка.ОбновлениеИнформационнойБазыБК.Форма.ЗапускОбработчиковОбновления");
		КонецЕсли;
		
		Если ОбщегоНазначенияБКВызовСервера.ПроверитьНеобходимостьЗапускаСтартовогоПомощника() Тогда 
			ОбщегоНазначенияБКВызовСервера.УстановитьИнтерфейсНачалаРаботы("БыстрыйСтарт");
			ОбновитьИнтерфейс();
		Иначе
			// ИнтернетПоддержкаПользователей
			ИнтернетПоддержкаПользователейКлиент.ПриНачалеРаботыСистемы(Неопределено);
			// Конец ИнтернетПоддержкаПользователей
		КонецЕсли;
		
		Если ПараметрыРаботыКлиента.ПоказатьСвертку Тогда
			ПодключитьОбработчикОжидания("ОткрытьСверткуБазы", 0.3, Истина);			
		КонецЕсли;
				
	КонецЕсли;
	
КонецПроцедуры

// Функция возвращает Истина, если при изменении даты документа требуется перечитать 
// настройки из базы данных на сервере.
//
Функция ТребуетсяВызовСервераПриИзмененииДатыДокумента(НоваяДата, ПредыдущаяДата,
			ВалютаДокумента = Неопределено, ВалютаРегламентированногоУчета = Неопределено) Экспорт

	Результат = Ложь;
	
	Если НачалоДня(НоваяДата) = НачалоДня(ПредыдущаяДата) Тогда
		// Ничего не изменилось либо изменилось только время, от которого ничего не зависит
		Возврат Ложь;
	Иначе 		
		Результат = Истина; 
	КонецЕсли;
	
	//Если НачалоМесяца(НоваяДата) <> НачалоМесяца(ПредыдущаяДата) Тогда
	//	// Учетная политика задается с периодичностью до месяца,
	//	// поэтому в пределах месяца изменения даты не учитываем.
	//	Результат = Истина;
	//КонецЕсли;
	
	Если НЕ Результат
		И ЗначениеЗаполнено(ВалютаДокумента) 
		И ЗначениеЗаполнено(ВалютаРегламентированногоУчета) Тогда
		
		Если ВалютаРегламентированногоУчета <> ВалютаДокумента Тогда
			// Для валютных документов необходимо получение курсов валют на новую дату
			Результат = Истина;
		КонецЕсли;

	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Изменяет значение отбора в динамическом списке.
// Поиск производится по представлению в элементах отборов верхнего уровня.
//
// Надо анализировать возвращаемое значение - и если вернется
//  Неопределено (т.е. отбор не установлен по причине того, что в списке
//  нет отбора по основной организации (он исправлен вручную и т.п.)), то не надо
//  присваивать Неопределено специальному полю "ОтборПоОрганизации" в форме списка.
//
// Параметры
//  Список         - ДинамическийСписок - список, в котором необходимо изменить значение отбора.
//  ИмяРеквизита   - Строка - имя поля-организации в динамическом списке.
//  ЗначениеОтбора - СправочникСсылка.Организации, СписокЗначений, Массив - значение отбора.
//
// Возвращаемое значение:
//   СправочникСсылка.Организации - Если отбор установлен, то вернет значение отбора.
//
Функция ИзменитьОтборПоОсновнойОрганизации(Список, ИмяРеквизита = "Организация", ЗначениеОтбора = Неопределено) Экспорт

	Представление = НСтр("ru = 'Отбор по основной организации'");
	
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(Список.КомпоновщикНастроек.Настройки.Отбор, ИмяРеквизита);
	
	Если ЗначениеЗаполнено(ЗначениеОтбора) Тогда
		Если ТипЗнч(ЗначениеОтбора) <> Тип("СправочникСсылка.Организации")
			И ТипЗнч(ЗначениеОтбора) <> Тип("Массив")
			И ТипЗнч(ЗначениеОтбора) <> Тип("СписокЗначений") Тогда
			ЗначениеОтбора = ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка");
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(ЗначениеОтбора) = Тип("Массив")
		ИЛИ ТипЗнч(ЗначениеОтбора) = Тип("СписокЗначений") Тогда
		ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.ВСписке;
	Иначе
		ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.Равно;
	КонецЕсли;
	
	ИспользованиеОтбора = ЗначениеЗаполнено(ЗначениеОтбора);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список, ИмяРеквизита, ЗначениеОтбора, ВидСравненияОтбора, , ИспользованиеОтбора, 
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
	
	Возврат ЗначениеОтбора;

КонецФункции

Процедура НачалоВыбораЗначенияВидУчетаНУ(Элемент, ВидУчетаНУ, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;

	МассивСчетов = Новый Массив;
	МассивСчетов.Добавить(ПредопределенноеЗначение("Справочник.ВидыУчетаНУ.НУ"));
	МассивСчетов.Добавить(ПредопределенноеЗначение("Справочник.ВидыУчетаНУ.ПР"));
	МассивСчетов.Добавить(ПредопределенноеЗначение("Справочник.ВидыУчетаНУ.НеОтражаетсяВНУ"));
	МассивСчетов.Добавить(ПредопределенноеЗначение("Справочник.ВидыУчетаНУ.НеCвязаноСПолучениемСГД"));
	МассивСчетов.Добавить(ПредопределенноеЗначение("Справочник.ВидыУчетаНУ.БезвозмезднаяПередачаВыполнение"));
	МассивСчетов.Добавить(ПредопределенноеЗначение("Справочник.ВидыУчетаНУ.Прочее"));
	МассивСчетов.Добавить(ПредопределенноеЗначение("Справочник.ВидыУчетаНУ.РасходыСверхНорм"));
	МассивСчетов.Добавить(ПредопределенноеЗначение("Справочник.ВидыУчетаНУ.ШтрафыПениВБюджет"));
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", Новый Структура("Ссылка", Новый ФиксированныйМассив(МассивСчетов)));
	ПараметрыФормы.Вставить("ТекущаяСтрока", ВидУчетаНУ);
	
	ОткрытьФорму("Справочник.ВидыУчетаНУ.ФормаВыбора", ПараметрыФормы, Элемент);
	
КонецПроцедуры

Процедура НачалоВыбораЗначенияСубконто(Форма, Элемент, СтандартнаяОбработка, СписокПараметров) Экспорт

	ДанныеСчета = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(СписокПараметров.СчетУчета);
	ПараметрыВыбора = Новый Структура();

	Для Индекс = 1 По ДанныеСчета.КоличествоСубконто Цикл
		Если ДанныеСчета["ВидСубконто" + Индекс] = ПредопределенноеЗначение(
			"ПланВидовХарактеристик.ВидыСубконтоТиповые.ДокументыРасчетовСКонтрагентами") 
			И ДанныеСчета["ВидСубконто" + Индекс + "ТипЗначения"] = Элемент.ОграничениеТипа Тогда

			СтандартнаяОбработка = Ложь;

			СтруктураПараметров  = Новый Структура;
			Если ТипЗнч(СписокПараметров) = Тип("Структура") Тогда
				СтруктураПараметров.Вставить("Организация", СписокПараметров.Организация);
				Если СписокПараметров.Свойство("Контрагент") Тогда
					СтруктураПараметров.Вставить("Контрагент", СписокПараметров.Контрагент);
				КонецЕсли;
				Если СписокПараметров.Свойство("ДоговорКонтрагента") Тогда
					СтруктураПараметров.Вставить("ДоговорКонтрагента", СписокПараметров.ДоговорКонтрагента);
				КонецЕсли;
				Если СписокПараметров.Свойство("Дата") Тогда
					СтруктураПараметров.Вставить("Дата", Форма.Объект.Дата);
				КонецЕсли;
				Если СписокПараметров.Свойство("СчетУчета") Тогда
					СтруктураПараметров.Вставить("СчетУчета", СписокПараметров.СчетУчета);
				КонецЕсли;
				Если СписокПараметров.Свойство("ОстаткиОбороты") Тогда
					СтруктураПараметров.Вставить("ОстаткиОбороты", СписокПараметров.ОстаткиОбороты);
				КонецЕсли;
				Если СписокПараметров.Свойство("РежимОтбораДокументов") Тогда
					СтруктураПараметров.Вставить("РежимОтбораДокументов", СписокПараметров.РежимОтбораДокументов);
				КонецЕсли;
				Если СписокПараметров.Свойство("ТипыДокументов") Тогда
					СтруктураПараметров.Вставить("ТипыДокументов", СписокПараметров.ТипыДокументов);
				Иначе
					СтруктураПараметров.Вставить("ТипыДокументов", Элемент.ОграничениеТипа);
				КонецЕсли;
			КонецЕсли;
			ПараметрыФормы = Новый Структура("ПараметрыОбъекта", СтруктураПараметров);
			ОткрытьФорму("Документ.ДокументРасчетовСКонтрагентом.ФормаВыбора", ПараметрыФормы, Элемент);
		ИначеЕсли ДанныеСчета["ВидСубконто" + Индекс] = ПредопределенноеЗначение(
			"ПланВидовХарактеристик.ВидыСубконтоТиповые.Партии") 
			И ДанныеСчета["ВидСубконто" + Индекс + "ТипЗначения"] = Элемент.ОграничениеТипа Тогда

			СтандартнаяОбработка = Ложь;

			СтруктураПараметров  = Новый Структура;
			СтруктураПараметров.Вставить("Организация", СписокПараметров.Организация);
			Если СписокПараметров.Свойство("Номенклатура") Тогда
				СтруктураПараметров.Вставить("Номенклатура", СписокПараметров.Номенклатура);
			КонецЕсли;
			Если СписокПараметров.Свойство("Склад") Тогда
				СтруктураПараметров.Вставить("Склад", СписокПараметров.Склад);
			КонецЕсли;
			Если СписокПараметров.Свойство("Дата") Тогда
				СтруктураПараметров.Вставить("КонецПериода", Форма.Объект.Дата);
			КонецЕсли;
			Если СписокПараметров.Свойство("СчетУчета") Тогда
				СтруктураПараметров.Вставить("СчетУчета", СписокПараметров.СчетУчета);
			КонецЕсли;
			СтруктураПараметров.Вставить("ТипыДокументов", Элемент.ОграничениеТипа);

			ПараметрыФормы = Новый Структура("ПараметрыОбъекта", СтруктураПараметров);
			ОткрытьФорму("Документ.Партия.ФормаВыбора", ПараметрыФормы, Элемент);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

// Процедура вызывается из модуля формы документов при обработке оповещения
//
// Параметры:
//   Форма - Управляемая форма, для которой производится обработка оповещения
//   ДокументСсылка - ссылка на документ формы
//   ИмяСобытия - имя обрабатываемого события
//   Параметр - параметр, переданный в обработку оповещения
//   Источник - источник, переданный в обработку оповещения
Процедура ОбработкаОповещенияФормыДокумента(Форма, ДокументСсылка, ИмяСобытия, Параметр, Источник) Экспорт

	Если Параметр = Неопределено
		ИЛИ НЕ ТипЗнч(Параметр) = Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяСобытия = "ВыполненаЗаписьДокумента" Тогда
		Если Параметр.Свойство("ДокументСсылка") И ДокументСсылка = Параметр.ДокументСсылка Тогда 
			Форма.Прочитать();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры	

// Проверяет соответствие РНН требованиям
// Параметры:
//		РНН - строка - проверяемый регистрационный номер налогоплательщика
//		
Функция РННСоответствуетТребованиям(Знач РНН, ВыводитьСообщение = Истина) Экспорт

	РНН		 = СокрЛП(РНН);
	ДлинаРНН = СтрДлина(РНН);
	
	//Проверка на длину РНН
	Если ДлинаРНН < 12 Тогда
		Если ВыводитьСообщение Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru='Количество знаков в РНН меньше 12!'"));
		КонецЕсли;
		Возврат Ложь;
	КонецЕсли;
	
	// В РНН имеются символы, отличные от цифр (0..9)
	РННБезНулей = СтрЗаменить(РНН,"0","1");
	Попытка
	    ЧислоРНН = Число(РННБезНулей);
		Если ЧислоРНН <> Цел(ЧислоРНН) Тогда // Есть символ "." или ","
			Если ВыводитьСообщение Тогда
				ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru='РНН содержит символы отличные от цифр!'"));
			КонецЕсли;
			Возврат Ложь;
		КонецЕсли;
	Исключение
		Если ВыводитьСообщение Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru='РНН содержит символы отличные от цифр!'"));
		КонецЕсли;
		Возврат Ложь;
	КонецПопытки; 
		
	// Проверка на одинаковость всех цифр
	Если СтрЧислоВхождений(РНН, Лев(РНН, 1)) = 12 Тогда 
		Если ВыводитьСообщение Тогда
			ТекстСообщения = НСтр("ru='Цифра %1 повторяется 12 раз!'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Лев(РНН, 1));
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		Возврат Ложь;
	КонецЕсли;
	
	// Проверка РНН на корректность   
	ПодстрокаРНН11 	 = Лев(РНН, 11);	// копируем первые 11 символов
	КонтрольнаяСумма = Прав(РНН, 1);	// контрольная сумма РНН
	
	Для СчетчикЦикла1 = 1 По 10 Цикл
		
		СуммаПроизведений = 0;
		Вес = СчетчикЦикла1 - 1;
		
		// Накапливаем сумму произведений
		Для СчетчикЦикла2 = 1 По 11 Цикл
			
			Вес = Вес + 1;
			
			Если Вес = 11 Тогда 
				Вес = 1; //сбросили вес на единицу
			КонецЕсли;
			
			СуммаПроизведений =  СуммаПроизведений + Вес * Число(Сред(ПодстрокаРНН11, СчетчикЦикла2, 1));
			
		КонецЦикла;
		
		//Рассчитываем коэфиициент для проверка РНН 
		Коэффициент = СуммаПроизведений - Цел((СуммаПроизведений) / 11) * 11;
		
		Если Коэффициент < 10 Тогда 
			
			Если Коэффициент <> Число(КонтрольнаяСумма) Тогда // Проверка равенства полученного коэффициента Контрольной сумме
				Если ВыводитьСообщение Тогда
					ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru='Введенный РНН не корректен!'"));
				КонецЕсли;
				Возврат Ложь;
			КонецЕсли; 
			
			Прервать;
			
		КонецЕсли;        			
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции // РННСоответствуетТребованиям()

// Проверяет соответствие БИН или ИИН требованиям
// Параметры:
//		ИдентификационныйНомер - строка - проверяемый БИН или ИИН налогоплательщика
//		
Функция БИНИИНСоответствуетТребованиям(Знач ИИН_БИН, ВыводитьСообщение = Истина) Экспорт

	ИИН_БИН	     = СокрЛП(ИИН_БИН);
	ДлинаИИН_БИН = СтрДлина(ИИН_БИН);
	
	//Проверка на длину ИИН/БИН
	Если ДлинаИИН_БИН < 12 Тогда
		
		Если ВыводитьСообщение Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru='Количество знаков в ИИН/БИН меньше 12!'"));
		КонецЕсли;
		
		Возврат Ложь;
		
	КонецЕсли;

	// В ИИН/БИН имеются символы, отличные от цифр (0..9)
	ИИН_БИНБезНулей = СтрЗаменить(ИИН_БИН, "0", "1");
	
	Попытка
	    ЧислоИИН_БИН = Число(ИИН_БИНБезНулей);
		
		Если ЧислоИИН_БИН <> Цел(ЧислоИИН_БИН) Тогда // Есть символ "." или ","
			Если ВыводитьСообщение Тогда
				ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru='ИИН/БИН содержит символы отличные от цифр!'"));
			КонецЕсли;
			Возврат Ложь;
		КонецЕсли;		

	Исключение
		
		Если ВыводитьСообщение Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru='ИИН/БИН содержит символы отличные от цифр!'"));
		КонецЕсли;
		
		Возврат Ложь;
		
	КонецПопытки; 

	// Проверка на одинаковость всех цифр
	Если СтрЧислоВхождений(ИИН_БИН, Лев(ИИН_БИН, 1)) = 12 Тогда
		
		Если ВыводитьСообщение Тогда
			ТекстСообщения = НСтр("ru='Цифра %1 повторяется 12 раз!'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Лев(ИИН_БИН, 1));
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
		Возврат Ложь;
		
	КонецЕсли;

	// а12=(а1*b1+а2*b2+а3*b3+а4*b4+а5*b5+а6*b6+а7*b7+а8*b8+а9*b9+a10*b10+a11*b11) mod 11
	ПодстрокаИН11 		= Лев(ИИН_БИН, 11);	// копируем первые 11 символов
	КонтрольноеЗначение = Прав(ИИН_БИН, 1);	// контрольная сумма ИИН/БИН
	         
	//разряд ИИН:  1 2 3 4 5 6 7 8 9 10 11
	//вес разряда: 1 2 3 4 5 6 7 8 9 10 11.

	СуммаРазрядов = 1 * Сред(ИИН_БИН, 1, 1) + 2 * Сред(ИИН_БИН, 2, 1) + 3 * Сред(ИИН_БИН, 3, 1) + 4 * Сред(ИИН_БИН, 4, 1) + 5 * Сред(ИИН_БИН, 5, 1) + 6 * Сред(ИИН_БИН, 6, 1)
					+ 7 * Сред(ИИН_БИН, 7, 1)+ 8 * Сред(ИИН_БИН, 8, 1) + 9 * Сред(ИИН_БИН, 9, 1) + 10 * Сред(ИИН_БИН, 10, 1) + 11 * Сред(ИИН_БИН, 11, 1);
					
	ВычисленноеКонтрольноеЗначение = СуммаРазрядов - Цел(СуммаРазрядов / 11) * 11; // mod - остаток от деления Суммы разрядов на 11.
	
	Если ВычисленноеКонтрольноеЗначение = 10 Тогда
		//разряд ИИН:  1 2 3 4 5 6 7 8 9 10 11 
		//вес разряда: 3 4 5 6 7 8 9 10 11 1 2.

		СуммаРазрядов = 3 * Сред(ИИН_БИН, 1, 1) + 4 * Сред(ИИН_БИН, 2, 1) + 5 * Сред(ИИН_БИН, 3, 1) + 6 * Сред(ИИН_БИН, 4, 1) + 7 * Сред(ИИН_БИН, 5, 1) + 8 * Сред(ИИН_БИН, 6, 1)
						+ 9 * Сред(ИИН_БИН, 7, 1) + 10 * Сред(ИИН_БИН, 8, 1) + 11 * Сред(ИИН_БИН, 9, 1) + 1*Сред(ИИН_БИН, 10, 1) + 2 * Сред(ИИН_БИН, 11, 1);
		ВычисленноеКонтрольноеЗначение = СуммаРазрядов - Цел(СуммаРазрядов / 11) * 11;   
		
	КонецЕсли;
	
	Если ВычисленноеКонтрольноеЗначение <> Число(КонтрольноеЗначение) Тогда
		
		Если ВыводитьСообщение Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru='Введенный ИИН/БИН не корректен!'"));
		КонецЕсли;
		
		Возврат Ложь;
		
	КонецЕсли;	
	
	Возврат Истина;
	
КонецФункции // РННСоответствуетТребованиям()

// Проверяет соответствие СИК требованиям
// Параметры:
//		СИК - строка - проверяемый социальный индивидуальный код
//		
Функция СИКСоответствуетТребованиям(Знач СИК, ВыводитьСообщение = Истина) Экспорт

	СИК		 = СокрЛП(СИК);
	ДлинаСИК = СтрДлина(СИК);
	
	//Проверка на длину СИК
	Если ДлинаСИК < 16 Тогда
		Если ВыводитьСообщение Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru='Количество знаков в СИК меньше 16!'"));
		КонецЕсли;
		Возврат Ложь;
	КонецЕсли;
	
	// Проверка на одинаковость всех цифр
	Если СтрЧислоВхождений(СИК, Лев(СИК, 1)) = 16 Тогда 
		Если ВыводитьСообщение Тогда
			ТекстСообщения = НСтр("ru='Цифра %1 повторяется 16 раз!'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Лев(СИК, 1));
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		Возврат Ложь;
	КонецЕсли;

	// Проверка на наличие символов, отличных от букв латинского алфавита
	Для Н = 1 По ДлинаСИК Цикл
		Если Найти("ABCDEFGHIJKLMNPQRSTUVWXYZ0123456789", Сред(СИК, Н, 1)) = 0 Тогда
			Если ВыводитьСообщение Тогда
				ТекстСообщения = НСтр("ru='Недопустимый символ %1 (позиция %2)'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Сред(СИК, Н, 1), Н);
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;

	Возврат Истина;
	
КонецФункции

// Подбирает массив номеров месяцев, соответствующих переданной строке
// например, для строки "ма" это будут 3 и 5, для "а" - 4 и 8
// используется в ПодобратьДатуПоТексту
//
Функция СписокМесяцевПоСтроке(Текст) Экспорт
	
	СписокМесяцев = Новый СписокЗначений;
	Месяцы = Новый Соответствие;
	МесяцыВозврата = Новый Массив;
	
	Для Счетчик = 1 По 12 Цикл
		Представление = Формат(Дата(2000, Счетчик, 1), "ДФ='ММММ'");
		СписокМесяцев.Добавить(Счетчик, Представление);
		Представление = Формат(Дата(2000, Счетчик, 1), "ДФ='МММ'");
		СписокМесяцев.Добавить(Счетчик, Представление);
	КонецЦикла;
	
	Для Каждого ЭлементСписка Из СписокМесяцев Цикл
		Если ВРег(Текст) = ВРег(Лев(ЭлементСписка.Представление, СтрДлина(Текст))) Тогда
			Месяцы[ЭлементСписка.Значение] = 0;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Элемент Из Месяцы Цикл
		МесяцыВозврата.Добавить(Элемент.Ключ);
	КонецЦикла;
	
	Возврат МесяцыВозврата;
	
КонецФункции // СписокМесяцевПоСтроке()

// Открывает форму печать произвольного табличного документа.
// Рекомендуется использовать, когда требуется установить заголовок формы печати.
// Во всех остальных случаях рекомендуется использовать УправлениеПечатьюКлиент.ПечатьДокументов().
Процедура ОткрытьФормуПечати(ПараметрыПечати) Экспорт
	
	//////////////////////////////////////////////////////////////////////////////
	// Создать и заполнить переменную КоллекцияПечатныхФорм.
	
	Идентификатор = "Идентификатор";
	Наименование = НСтр("ru = 'Наименование'");
	
	КоллекцияПечатныхФорм = УправлениеПечатьюКлиент.НоваяКоллекцияПечатныхФорм(Идентификатор);
	
	ПечатнаяФорма = УправлениеПечатьюКлиент.ОписаниеПечатнойФормы(КоллекцияПечатныхФорм, Идентификатор);
	ПечатнаяФорма.СинонимМакета = Наименование;
	ПечатнаяФорма.ТабличныйДокумент = ПараметрыПечати.ТабличныйДокумент;
	ПечатнаяФорма.ИмяФайлаПечатнойФормы = Наименование;
	
	
	
	//////////////////////////////////////////////////////////////////////////////
	// Подготовить параметры открытия формы ПечатьДокументов.
		
	ПараметрыОткрытия = Новый Структура("ИмяМенеджераПечати,ИменаМакетов,ПараметрКоманды,ПараметрыПечати");
	
	ПараметрыОткрытия.ПараметрКоманды = Новый Массив;
	
	ПараметрыОткрытия.ПараметрыПечати = Новый Структура;
	ПараметрыОткрытия.Вставить("КоллекцияПечатныхФорм", КоллекцияПечатныхФорм);
	//ПараметрыОткрытия.Вставить("ОбъектыПечати", ОбъектыПечати);
	
	Если ПараметрыПечати.ЗаголовокФормы <> Неопределено Тогда
		ПараметрыОткрытия.ПараметрыПечати.Вставить("ЗаголовокФормы", ПараметрыПечати.ЗаголовокФормы);
	КонецЕсли;	
	
	КлючУникальности = ?(ПараметрыПечати.КлючУникальности <> Неопределено, ПараметрыПечати.КлючУникальности, Строка(Новый УникальныйИдентификатор));
	
	
	
	//////////////////////////////////////////////////////////////////////////////
	// Открыть форму ПечатьДокументов.
	
	ОткрытьФорму("ОбщаяФорма.ПечатьДокументов", ПараметрыОткрытия, ПараметрыПечати.ВладелецФормы, КлючУникальности);
	
КонецПроцедуры 

Функция ПустыеПараметрыПечати() Экспорт
	
	ПараметрыПечати = Новый Структура;
	
	// Обязательные:
	ПараметрыПечати.Вставить("ТабличныйДокумент", Неопределено);
	
	// Не обязательные:
	ПараметрыПечати.Вставить("ВладелецФормы", Неопределено);
	ПараметрыПечати.Вставить("ЗаголовокФормы", Неопределено);
	ПараметрыПечати.Вставить("КлючУникальности", Неопределено);
	
	Возврат ПараметрыПечати;
	
КонецФункции

// Функция проверяет возможность печати чека на фискальном регистраторе.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - Форма документа
//
// Возвращаемое значение:
//	Булево - Признак возможности печати
//
Функция ПроверитьВозможностьПечатиЧека(Форма) Экспорт
	
	ПечататьЧек = Истина;
	
	// Если объект не проведен или модифицирован - сообщим пользователю, что печать не возможна.
	Если НЕ Форма.Объект.Проведен
		ИЛИ Форма.Модифицированность Тогда
		
		ПоказатьПредупреждение( , НСтр("ru = 'Операция возможна только после проведения документа'"));

		ПечататьЧек = Ложь;
		
	КонецЕсли;
	
	Возврат ПечататьЧек;

КонецФункции // ПроверитьВозможностьПечатиЧека()

#Область ЗагрузкаДанныхИзФайла
Функция НовыйПараметрыЗагрузкиВТабЧасть() Экспорт
	
	ПараметрыЗагрузкиДанных = Новый Структура;
	
	//ПараметрыЗагрузкиДанных.Вставить("ИмяТабличнойЧасти", ""); // в следующем виде: Справочник.СпецификацииНоменклатуры.ИсходныеКомплектующие
	//ПараметрыЗагрузкиДанных.Вставить("Заголовок", "");
	//ПараметрыЗагрузкиДанных.Вставить("Пояснение", ""); // поясняющий текст/текст инструкции для пользователя на форме, можно форматированной строкой (см. СтроковыеФункцииКлиент.ФорматированнаяСтрока())
	//ПараметрыЗагрузкиДанных.Вставить("РеквизитыДляСопоставления", ""); // адрес во временном хранилище имен реквизитов, используемых при сопоставлении с элементами справочника (например: "Номенклатура.Артикул")
	//ПараметрыЗагрузкиДанных.Вставить("Оповещение", Неопределено);
	//
	//ПараметрыЗагрузкиДанных.Вставить("ПрикладнаяЗагрузка", Ложь);
	//ПараметрыЗагрузкиДанных.Вставить("ПараметрыПрикладнойЗагрузки", НовыйПараметрыПрикладнойЗагрузки());   
	
	ПараметрыЗагрузки = Новый Структура();
	ПараметрыЗагрузки.Вставить("ПолноеИмяТабличнойЧасти");
	ПараметрыЗагрузки.Вставить("Заголовок");
	ПараметрыЗагрузки.Вставить("ИмяМакетаСШаблоном");
	ПараметрыЗагрузки.Вставить("ДополнительныеПараметры");
	ПараметрыЗагрузки.Вставить("КолонкиМакета");

	
	Возврат ПараметрыЗагрузки;
	
КонецФункции

Функция НовыйПараметрыПрикладнойЗагрузки()
	
	ПараметрыЗагрузкиДанных = Новый Структура;
	
	ПараметрыЗагрузкиДанных.Вставить("ОбъектДляЗагрузки", Неопределено); // ссылка на документ/справочник, в который происходит прикладная загрузка
	ПараметрыЗагрузкиДанных.Вставить("ИмяМакета", ""); // макет, содержащий колонки табличной части для загрузки
	ПараметрыЗагрузкиДанных.Вставить("ПострочнаяОбработка", Ложь); // признак того, что данные сопоставляются не по ячейкам, а построчно менеджером объекта загрузки
	ПараметрыЗагрузкиДанных.Вставить("СопоставлятьКолонки", Ложь); // используется ли дополнительное сопоставление колонок табичной части и колонок загружаемого файла менеджером объекта загрузки
	ПараметрыЗагрузкиДанных.Вставить("Период", Неопределено);
	ПараметрыЗагрузкиДанных.Вставить("Организация", Неопределено);
	ПараметрыЗагрузкиДанных.Вставить("ТолькоПоследнийЛист", Ложь); // используется, если в файле несколько листов и нужно загрузить только последний
	ПараметрыЗагрузкиДанных.Вставить("ПоказатьИнформациюОжидания", Ложь); // используется, если при загрузке нужно показать информацию в ожидании длительной операции
	ПараметрыЗагрузкиДанных.Вставить("ТекстИнформацииОжидания", ""); // текст, который показывается в ожидании длительной операции
	ПараметрыЗагрузкиДанных.Вставить("ОграничениеТипов", ""); // строка, массив типов которые не могут быть выбраны в обработке
	
	Возврат ПараметрыЗагрузкиДанных;
	
КонецФункции 

// Открывает форму загрузки данных для заполнения табличной части.
//
// Параметры: 
//   ПараметрыЗагрузки   - Структура           - см. ЗагрузкаДанныхИзФайлаКлиент.ПараметрыЗагрузкиДанных.
//   ОповещениеОЗагрузке - ОписаниеОповещения  - оповещение, которое будет вызвано для добавления загруженных данных в
//                                               табличную часть.
//
Процедура ПоказатьФормуЗагрузки(ПараметрыЗагрузки, ОповещениеОЗагрузке) Экспорт
	
	ОткрытьФорму("Обработка.ЗагрузкаДанныхИзФайла.Форма", ПараметрыЗагрузки, 
		ОповещениеОЗагрузке.Модуль, , , , ОповещениеОЗагрузке);
		
КонецПроцедуры

#КонецОбласти
