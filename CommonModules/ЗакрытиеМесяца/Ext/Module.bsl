////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция СоставГруппыРегОпераций(Группа, Организация,СтруктурноеПодразделение, Период, ВидОперации = Неопределено) Экспорт
	
	КонецКвартала = (Месяц(Период) = 3 Или Месяц(Период) = 6 Или Месяц(Период) = 9 Или Месяц(Период) = 12);
	КонецГода     = (Месяц(Период) = 12);
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНач", 				НачалоМесяца(Период));
	Запрос.УстановитьПараметр("ДатаКон", 				КонецМесяца(Период));
	Запрос.УстановитьПараметр("ОперацияВыполнена", 		Перечисления.ВидыСостоянийРегламентныхОпераций.Выполнено);
	Запрос.УстановитьПараметр("ОперацияНЕВыполнена", 	Перечисления.ВидыСостоянийРегламентныхОпераций.НЕВыполнено);
	Запрос.УстановитьПараметр("НеВыполнено",       		Перечисления.ВидыСостоянийРегламентныхОпераций.НеВыполнено);
	Запрос.УстановитьПараметр("Выполнено",         		Перечисления.ВидыСостоянийРегламентныхОпераций.Выполнено);
	Запрос.УстановитьПараметр("ВидСубконтоНМА",			ПланыВидовХарактеристик.ВидыСубконтоТиповые.НематериальныеАктивы);
	Запрос.УстановитьПараметр("ВидСубконтоРБП", 		ПланыВидовХарактеристик.ВидыСубконтоТиповые.РасходыБудущихПериодов);
	
	Запрос.УстановитьПараметр("КонецГода", (Месяц(Период) = 12));
	Запрос.УстановитьПараметр("КонецГодаДо2019", (Месяц(Период) = 12 И Год(Период) < 2019));
		
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("СтруктурноеПодразделение", СтруктурноеПодразделение);
			
	
	Запрос.Текст =  "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВложенныйЗапрос.Организация КАК Организация,
		|	&СтруктурноеПодразделение КАК СтруктурноеПодразделение,
		|	ВложенныйЗапрос.ВидОперации КАК ВидОперации,
		|	ВложенныйЗапрос.ВидДокумента КАК ВидДокумента,
		|	ВложенныйЗапрос.Требуется КАК Требуется,
		|	ВложенныйЗапрос.РучнаяКорректировка КАК РучнаяКорректировка,
		|	ВложенныйЗапрос.Состояние КАК Состояние
		|ИЗ
		|	(";
		
	Если Группа = 1 Или Группа = "Все" Тогда
		
	Запрос.Текст = Запрос.Текст + "ВЫБРАТЬ
	                              |	АмортизацияОС.Организация КАК Организация,
	                              |	АмортизацияОС.ВидОперации КАК ВидОперации,
	                              |	""РегламентнаяОперация"" КАК ВидДокумента,
	                              |	ЕСТЬNULL(ОстаткиИОбороты.Требуется, ЛОЖЬ) КАК Требуется,
	                              |	ЕСТЬNULL(РегламентнаяОперация.РучнаяКорректировка, ЛОЖЬ) КАК РучнаяКорректировка,
	                              |	ЕСТЬNULL(РегламентнаяОперация.Состояние, &НеВыполнено) КАК Состояние
	                              |ИЗ
	                              |	(ВЫБРАТЬ
	                              |		ЗНАЧЕНИЕ(Перечисление.ВидыРегламентныхОпераций.АмортизацияОСБУ) КАК ВидОперации,
	                              |		Организации.Ссылка КАК Организация,
	                              |		ПодразделенияОрганизаций.Ссылка КАК СтруктурноеПодразделение
	                              |	ИЗ
	                              |		Справочник.Организации КАК Организации
	                              |			Левое СОЕДИНЕНИЕ Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
	                              |			ПО Организации.Ссылка = ПодразделенияОрганизаций.Владелец
	                              |	ГДЕ
	                              |		Организации.Ссылка = &Организация) КАК АмортизацияОС
	                              |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	                              |			РегламентнаяОперация.РучнаяКорректировка КАК РучнаяКорректировка,
	                              |			РегламентнаяОперация.Состояние КАК Состояние,
	                              |			РегламентнаяОперация.Организация КАК Организация
	                              |		ИЗ
	                              |			Документ.ЗакрытиеМесяца КАК РегламентнаяОперация
	                              |		ГДЕ
	                              |			РегламентнаяОперация.Организация = &Организация
	                              |			И РегламентнаяОперация.СтруктурноеПодразделение = &СтруктурноеПодразделение
	                              |			И РегламентнаяОперация.Дата МЕЖДУ &ДатаНач И &ДатаКон
	                              |			И РегламентнаяОперация.АмортизацияОСБУ
	                              |			И (НЕ РегламентнаяОперация.ПометкаУдаления)) КАК РегламентнаяОперация
	                              |		ПО АмортизацияОС.Организация = РегламентнаяОперация.Организация
	                              |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	                              |			ВЫБОР
	                              |				КОГДА (НЕ ТиповойОстаткиИОбороты.СуммаНачальныйОстаток = 0)
	                              |					ТОГДА ИСТИНА
	                              |				ИНАЧЕ ЛОЖЬ
	                              |			КОНЕЦ КАК Требуется,
	                              |			ТиповойОстаткиИОбороты.Организация КАК Организация
	                              |		ИЗ
	                              |			РегистрБухгалтерии.Типовой.ОстаткиИОбороты(
	                              |					&ДатаНач,
	                              |					&ДатаКон,
	                              |					,
	                              |					,
	                              |					Счет В
	                              |						(ВЫБРАТЬ РАЗЛИЧНЫЕ
	                              |							СчетаУчетаОССрезПоследних.СчетУчетаБУ
	                              |						ИЗ
	                              |							РегистрСведений.СчетаУчетаОС.СрезПоследних(&ДатаКон, Организация = &Организация) КАК СчетаУчетаОССрезПоследних),
	                              |					,
	                              |					Организация = &Организация
	                              |						И СтруктурноеПодразделение = &СтруктурноеПодразделение) КАК ТиповойОстаткиИОбороты) КАК ОстаткиИОбороты
	                              |		ПО АмортизацияОС.Организация = ОстаткиИОбороты.Организация
	                              |
	                              |ОБЪЕДИНИТЬ ВСЕ
	                              |
	                              |ВЫБРАТЬ
	                              |	АмортизацияНМА.Организация,
	                              |	АмортизацияНМА.ВидОперации,
	                              |	""РегламентнаяОперация"",
	                              |	ЕСТЬNULL(ОстаткиИОбороты.Требуется, ЛОЖЬ),
	                              |	ЕСТЬNULL(РегламентнаяОперация.РучнаяКорректировка, ЛОЖЬ),
	                              |	ЕСТЬNULL(РегламентнаяОперация.Состояние, &НеВыполнено)
	                              |ИЗ
	                              |	(ВЫБРАТЬ
	                              |		ЗНАЧЕНИЕ(Перечисление.ВидыРегламентныхОпераций.АмортизацияНМАБУ) КАК ВидОперации,
	                              |		Организации.Ссылка КАК Организация
	                              |	ИЗ
	                              |		Справочник.Организации КАК Организации
	                              |	ГДЕ
	                              |		Организации.Ссылка = &Организация) КАК АмортизацияНМА
	                              |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	                              |			РегламентнаяОперация.РучнаяКорректировка КАК РучнаяКорректировка,
	                              |			ВЫБОР
	                              |				КОГДА РегламентнаяОперация.Состояние = ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийРегламентныхОпераций.ВыполненоСОшибками)
	                              |						И ЕСТЬNULL(ОшибкиРегламентнойОперации.КоличествоОшибок, 0) = 0
	                              |					ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийРегламентныхОпераций.Выполнено)
	                              |				ИНАЧЕ РегламентнаяОперация.Состояние
	                              |			КОНЕЦ КАК Состояние,
	                              |			РегламентнаяОперация.Организация КАК Организация
	                              |		ИЗ
	                              |			Документ.ЗакрытиеМесяца КАК РегламентнаяОперация
	                              |				ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	                              |					ЗакрытиеМесяцаОшибки.Ссылка КАК Ссылка,
	                              |					КОЛИЧЕСТВО(ЗакрытиеМесяцаОшибки.НомерСтроки) КАК КоличествоОшибок
	                              |				ИЗ
	                              |					Документ.ЗакрытиеМесяца.Ошибки КАК ЗакрытиеМесяцаОшибки
	                              |				ГДЕ
	                              |					ЗакрытиеМесяцаОшибки.ВидРегламентнойОперации = ЗНАЧЕНИЕ(Перечисление.ВидыРегламентныхОпераций.АмортизацияНМАБУ)
	                              |				
	                              |				СГРУППИРОВАТЬ ПО
	                              |					ЗакрытиеМесяцаОшибки.Ссылка) КАК ОшибкиРегламентнойОперации
	                              |				ПО РегламентнаяОперация.Ссылка = ОшибкиРегламентнойОперации.Ссылка
	                              |		ГДЕ
	                              |			РегламентнаяОперация.Организация = &Организация
	                              |			И РегламентнаяОперация.СтруктурноеПодразделение = &СтруктурноеПодразделение
	                              |			И РегламентнаяОперация.Дата МЕЖДУ &ДатаНач И &ДатаКон
	                              |			И РегламентнаяОперация.АмортизацияНМАБУ
	                              |			И (НЕ РегламентнаяОперация.ПометкаУдаления)) КАК РегламентнаяОперация
	                              |		ПО АмортизацияНМА.Организация = РегламентнаяОперация.Организация
	                              |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	                              |			ВЫБОР
	                              |				КОГДА (НЕ ТиповойОстаткиИОбороты.СуммаНачальныйОстаток = 0)
	                              |					ТОГДА ИСТИНА
	                              |				ИНАЧЕ ЛОЖЬ
	                              |			КОНЕЦ КАК Требуется,
	                              |			ТиповойОстаткиИОбороты.Организация КАК Организация
	                              |		ИЗ
	                              |			РегистрБухгалтерии.Типовой.ОстаткиИОбороты(
	                              |					&ДатаНач,
	                              |					&ДатаКон,
	                              |					Период,
	                              |					,
	                              |					,
	                              |					&ВидСубконтоНМА,
	                              |					Организация = &Организация
	                              |						И СтруктурноеПодразделение = &СтруктурноеПодразделение) КАК ТиповойОстаткиИОбороты) КАК ОстаткиИОбороты
	                              |		ПО АмортизацияНМА.Организация = ОстаткиИОбороты.Организация
	                              |
	                              |ОБЪЕДИНИТЬ ВСЕ
	                              |
	                              |ВЫБРАТЬ
	                              |	СписаниеРезерваПоПереоценкеОС.Организация,
	                              |	СписаниеРезерваПоПереоценкеОС.ВидОперации,
	                              |	""РегламентнаяОперация"",
	                              |	ЕСТЬNULL(ОстаткиИОбороты.Требуется, ЛОЖЬ),
	                              |	ЕСТЬNULL(РегламентнаяОперация.РучнаяКорректировка, ЛОЖЬ),
	                              |	ЕСТЬNULL(РегламентнаяОперация.Состояние, &НеВыполнено)
	                              |ИЗ
	                              |	(ВЫБРАТЬ
	                              |		ЗНАЧЕНИЕ(Перечисление.ВидыРегламентныхОпераций.СписаниеРезерваПоПереоценкеОСБУ) КАК ВидОперации,
	                              |		Организации.Ссылка КАК Организация
	                              |	ИЗ
	                              |		Справочник.Организации КАК Организации
	                              |	ГДЕ
	                              |		Организации.Ссылка = &Организация) КАК СписаниеРезерваПоПереоценкеОС
	                              |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	                              |			РегламентнаяОперация.РучнаяКорректировка КАК РучнаяКорректировка,
	                              |			РегламентнаяОперация.Состояние КАК Состояние,
	                              |			РегламентнаяОперация.Организация КАК Организация
	                              |		ИЗ
	                              |			Документ.ЗакрытиеМесяца КАК РегламентнаяОперация
	                              |		ГДЕ
	                              |			РегламентнаяОперация.Организация = &Организация
	                             |			И РегламентнаяОперация.СтруктурноеПодразделение = &СтруктурноеПодразделение
	                              |			И РегламентнаяОперация.Дата МЕЖДУ &ДатаНач И &ДатаКон
	                              |			И РегламентнаяОперация.СписаниеРезерваПоПереоценкеОСБУ
	                              |			И (НЕ РегламентнаяОперация.ПометкаУдаления)) КАК РегламентнаяОперация
	                              |		ПО СписаниеРезерваПоПереоценкеОС.Организация = РегламентнаяОперация.Организация
	                              |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	                              |			ВЫБОР
	                              |				КОГДА (НЕ ТиповойОстаткиИОбороты.СуммаНачальныйОстатокКт = 0)
	                              |					ТОГДА ИСТИНА
	                              |				ИНАЧЕ ЛОЖЬ
	                              |			КОНЕЦ КАК Требуется,
	                              |			ТиповойОстаткиИОбороты.Организация КАК Организация
	                              |		ИЗ
	                              |			РегистрБухгалтерии.Типовой.ОстаткиИОбороты(
	                              |					&ДатаНач,
	                              |					&ДатаКон,
	                              |					,
	                              |					,
	                              |					Счет = ЗНАЧЕНИЕ(ПланСчетов.Типовой.РезервНаПереоценкуОсновныхСредств),
	                              |					,
	                              |					Организация = &Организация
	                              |						И СтруктурноеПодразделение = &СтруктурноеПодразделение) КАК ТиповойОстаткиИОбороты) КАК ОстаткиИОбороты
	                              |		ПО СписаниеРезерваПоПереоценкеОС.Организация = ОстаткиИОбороты.Организация
	                              |
	                              |ОБЪЕДИНИТЬ ВСЕ
	                              |
	                              |ВЫБРАТЬ
	                              |	ПереоценкаВалютныхСредств.Организация,
	                              |	ПереоценкаВалютныхСредств.ВидОперации,
	                              |	""РегламентнаяОперация"",
	                              |	ЕСТЬNULL(ПереоценкаОстатки.Требуется, ЛОЖЬ),
	                              |	ЕСТЬNULL(РегламентнаяОперация.РучнаяКорректировка, ЛОЖЬ),
	                              |	ЕСТЬNULL(РегламентнаяОперация.Состояние, &НеВыполнено)
	                              |ИЗ
	                              |	(ВЫБРАТЬ
	                              |		ЗНАЧЕНИЕ(Перечисление.ВидыРегламентныхОпераций.ПереоценкаВалютныхСредствБУ) КАК ВидОперации,
	                              |		Организации.Ссылка КАК Организация
	                              |	ИЗ
	                              |		Справочник.Организации КАК Организации
	                              |	ГДЕ
	                              |		Организации.Ссылка = &Организация) КАК ПереоценкаВалютныхСредств
	                              |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	                              |			РегламентнаяОперация.РучнаяКорректировка КАК РучнаяКорректировка,
	                              |			РегламентнаяОперация.Состояние КАК Состояние,
	                              |			РегламентнаяОперация.Организация КАК Организация
	                              |		ИЗ
	                              |			Документ.ЗакрытиеМесяца КАК РегламентнаяОперация
	                              |		ГДЕ
	                              |			РегламентнаяОперация.Организация = &Организация
	                              |			И РегламентнаяОперация.СтруктурноеПодразделение = &СтруктурноеПодразделение
	                              |			И РегламентнаяОперация.Дата МЕЖДУ &ДатаНач И &ДатаКон
	                              |			И РегламентнаяОперация.ПереоценкаВалютныхСредствБУ
	                              |			И (НЕ РегламентнаяОперация.ПометкаУдаления)) КАК РегламентнаяОперация
	                              |		ПО ПереоценкаВалютныхСредств.Организация = РегламентнаяОперация.Организация
	                              |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	                              |			ВЫБОР
	                              |				КОГДА (НЕ ТиповойОстатки.СуммаОстаток = 0)
	                              |						ИЛИ (НЕ ТиповойОстатки.ВалютнаяСуммаОстаток = 0)
	                              |					ТОГДА ИСТИНА
	                              |				ИНАЧЕ ЛОЖЬ
	                              |			КОНЕЦ КАК Требуется,
	                              |			ТиповойОстатки.Организация КАК Организация
	                              |		ИЗ
	                              |			РегистрБухгалтерии.Типовой.Остатки(
	                              |					&ДатаКон,
	                              |					Счет В
	                              |						(ВЫБРАТЬ
	                              |							Типовой.Ссылка КАК СчетПереоценки
	                              |						ИЗ
	                              |							ПланСчетов.Типовой КАК Типовой ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаСОсобымПорядкомПереоценкиБУ КАК СчетаСОсобымПорядкомПереоценкиБУ
	                              |								ПО
	                              |									СчетаСОсобымПорядкомПереоценкиБУ.Счет = Типовой.Ссылка
	                              |						ГДЕ
	                              |							Типовой.Валютный = ИСТИНА
	                              |							И (СчетаСОсобымПорядкомПереоценкиБУ.Счет ЕСТЬ NULL 
	                              |								ИЛИ СчетаСОсобымПорядкомПереоценкиБУ.СпособПризнанияКурсовойРазницы = ЗНАЧЕНИЕ(Перечисление.СпособыПризнанияКурсовойРазницы.Регламентно))),
	                              |					,
	                              |					Организация = &Организация
	                              |						И СтруктурноеПодразделение = &СтруктурноеПодразделение) КАК ТиповойОстатки) КАК ПереоценкаОстатки
	                              |		ПО ПереоценкаВалютныхСредств.Организация = ПереоценкаОстатки.Организация
	                              |
	                              |ОБЪЕДИНИТЬ ВСЕ
	                              |
	                              |ВЫБРАТЬ
	                              |	СписаниеРБП.Организация,
	                              |	СписаниеРБП.ВидОперации,
	                              |	""РегламентнаяОперация"",
	                              |	ЕСТЬNULL(РБПОстатки.Требуется, ЛОЖЬ),
	                              |	ЕСТЬNULL(РегламентнаяОперация.РучнаяКорректировка, ЛОЖЬ),
	                              |	ЕСТЬNULL(РегламентнаяОперация.Состояние, &НеВыполнено)
	                              |ИЗ
	                              |	(ВЫБРАТЬ
	                              |		ЗНАЧЕНИЕ(Перечисление.ВидыРегламентныхОпераций.СписаниеРБПБУ) КАК ВидОперации,
	                              |		Организации.Ссылка КАК Организация
	                              |	ИЗ
	                              |		Справочник.Организации КАК Организации
	                              |	ГДЕ
	                              |		Организации.Ссылка = &Организация) КАК СписаниеРБП
	                              |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	                              |			РегламентнаяОперация.РучнаяКорректировка КАК РучнаяКорректировка,
	                              |			РегламентнаяОперация.Состояние КАК Состояние,
	                              |			РегламентнаяОперация.Организация КАК Организация
	                              |		ИЗ
	                              |			Документ.ЗакрытиеМесяца КАК РегламентнаяОперация
	                              |		ГДЕ
	                              |			РегламентнаяОперация.Организация = &Организация
	                              |			И РегламентнаяОперация.СтруктурноеПодразделение = &СтруктурноеПодразделение
	                              |			И РегламентнаяОперация.Дата МЕЖДУ &ДатаНач И &ДатаКон
	                              |			И РегламентнаяОперация.СписаниеРБПБУ
	                              |			И (НЕ РегламентнаяОперация.ПометкаУдаления)) КАК РегламентнаяОперация
	                              |		ПО СписаниеРБП.Организация = РегламентнаяОперация.Организация
	                              |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	                              |			ВЫБОР
	                              |				КОГДА (НЕ ТиповойОстатки.СуммаОстаток = 0)
	                              |					ТОГДА ИСТИНА
	                              |				ИНАЧЕ ЛОЖЬ
	                              |			КОНЕЦ КАК Требуется,
	                              |			ТиповойОстатки.Организация КАК Организация
	                              |		ИЗ
	                              |			РегистрБухгалтерии.Типовой.Остатки(
	                              |					&ДатаКон,
	                              |					Счет В (ЗНАЧЕНИЕ(ПланСчетов.Типовой.КраткосрочныеРасходыБудущихПериодов), ЗНАЧЕНИЕ(ПланСчетов.Типовой.ДолгосрочныеРасходыБудущихПериодов)),
	                              |					&ВидСубконтоРБП,
	                              |					Организация = &Организация
	                              |						И СтруктурноеПодразделение = &СтруктурноеПодразделение
	                              |						И (НЕ Субконто1.СпособСписания = ЗНАЧЕНИЕ(Перечисление.СпособыСписанияРБП.НеРассчитывать))) КАК ТиповойОстатки) КАК РБПОстатки
	                              |		ПО СписаниеРБП.Организация = РБПОстатки.Организация";  
	КонецЕсли;
							  
	Если Группа = 2 Или Группа = "Все"  Тогда
		Если Группа = "Все"  Тогда
			Запрос.Текст = Запрос.Текст + "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|";
		КонецЕсли;
		
		Запрос.Текст = Запрос.Текст +  "ВЫБРАТЬ
		                          |	РасчетСтоимостиПродукцииБУ.Организация КАК Организация,
	                              |	РасчетСтоимостиПродукцииБУ.ВидОперации КАК ВидОперации,
	                              |	""РегламентнаяОперация"" КАК ВидДокумента,
	                              |	ЕстьNULL(ПроизводствоОбороты.Требуется,ЛОЖЬ)КАК Требуется,
	                              |	ЕСТЬNULL(РегламентнаяОперация.РучнаяКорректировка, ЛОЖЬ) КАК РучнаяКорректировка,
	                              |	ЕСТЬNULL(РегламентнаяОперация.Состояние, &НеВыполнено) КАК Состояние
                                  |ИЗ
	                              |	(ВЫБРАТЬ
	                              |		Значение(Перечисление.ВидыРегламентныхОпераций.РасчетСтоимостиПродукцииБУ) КАК ВидОперации,
	                              |		Организации.Ссылка КАК Организация
	                              |	ИЗ
	                              |		Справочник.Организации КАК Организации
	                              |	ГДЕ
	                              |		 Организации.Ссылка = &Организация) КАК РасчетСтоимостиПродукцииБУ
	                              |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	                              |			РегламентнаяОперация.РучнаяКорректировка КАК РучнаяКорректировка,
	                              |			РегламентнаяОперация.Состояние КАК Состояние,
	                              |			РегламентнаяОперация.Организация КАК Организация
								  
	                              |		ИЗ
	                              |			Документ.ЗакрытиеМесяца КАК РегламентнаяОперация
	                              |		ГДЕ
	                              |			РегламентнаяОперация.Организация = &Организация
								  |			И РегламентнаяОперация.Дата МЕЖДУ &ДатаНач И &ДатаКон
	                              |			И РегламентнаяОперация.РасчетСтоимостиПродукцииБУ
	                              |			И (НЕ РегламентнаяОперация.ПометкаУдаления)) КАК РегламентнаяОперация
	                              |		ПО РасчетСтоимостиПродукцииБУ.Организация = РегламентнаяОперация.Организация
								  |ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
								  |			ВЫБОР
	                              |				КОГДА (НЕ ТиповойОбороты.СуммаОборотДт = 0)
	                              |					ТОГДА ИСТИНА
	                              |				ИНАЧЕ ЛОЖЬ
	                              |			КОНЕЦ КАК Требуется,
	                              |			ТиповойОбороты.Организация КАК Организация
	                              |ИЗ
	                              |		РегистрБухгалтерии.Типовой.Обороты(
	                              |				&ДатаНач, &ДатаКон,,
	                              |				Счет В Иерархии(ЗНАЧЕНИЕ(ПланСчетов.Типовой.ОсновноеПроизводство_), ЗНАЧЕНИЕ(ПланСчетов.Типовой.ПолуфабрикатыСобственногоПроизводства_),ЗНАЧЕНИЕ(ПланСчетов.Типовой.ВспомогательныеПроизводства_),ЗНАЧЕНИЕ(ПланСчетов.Типовой.НакладныеРасходы_) ),
	                              |				,
	                              |				Организация = &Организация ) КАК ТиповойОбороты) КАК ПроизводствоОбороты
								  |		ПО РасчетСтоимостиПродукцииБУ.Организация = ПроизводствоОбороты.Организация
								  |
								  |ОБЪЕДИНИТЬ ВСЕ
								  |
								  |ВЫБРАТЬ
		                          |	РасчетСтоимостиПродукцииНУ.Организация КАК Организация,
	                              |	РасчетСтоимостиПродукцииНУ.ВидОперации КАК ВидОперации,
	                              |	""РегламентнаяОперация"" КАК ВидДокумента,
	                              |	ЕстьNULL(ПроизводствоОбороты.Требуется,ЛОЖЬ)КАК Требуется,
	                              |	ЕСТЬNULL(РегламентнаяОперация.РучнаяКорректировка, ЛОЖЬ) КАК РучнаяКорректировка,
	                              |	ЕСТЬNULL(РегламентнаяОперация.Состояние, &НеВыполнено) КАК Состояние
                                  |ИЗ
	                              |	(ВЫБРАТЬ
	                              |		Значение(Перечисление.ВидыРегламентныхОпераций.РасчетСтоимостиПродукцииНУ) КАК ВидОперации,
	                              |		Организации.Ссылка КАК Организация
	                              |	ИЗ
	                              |		Справочник.Организации КАК Организации
	                              |	ГДЕ
	                              |		 Организации.Ссылка = &Организация) КАК РасчетСтоимостиПродукцииНУ
	                              |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	                              |			РегламентнаяОперация.РучнаяКорректировка КАК РучнаяКорректировка,
	                              |			РегламентнаяОперация.Состояние КАК Состояние,
	                              |			РегламентнаяОперация.Организация КАК Организация
								  
	                              |		ИЗ
	                              |			Документ.ЗакрытиеМесяца КАК РегламентнаяОперация
	                              |		ГДЕ
	                              |			РегламентнаяОперация.Организация = &Организация
								  |			И РегламентнаяОперация.Дата МЕЖДУ &ДатаНач И &ДатаКон
	                              |			И РегламентнаяОперация.РасчетСтоимостиПродукцииНУ
	                              |			И (НЕ РегламентнаяОперация.ПометкаУдаления)) КАК РегламентнаяОперация
	                              |		ПО РасчетСтоимостиПродукцииНУ.Организация = РегламентнаяОперация.Организация
								  |ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
								  |			ВЫБОР
	                              |				КОГДА (НЕ НалоговыйОбороты.СуммаОборотДт = 0)
	                              |					ТОГДА ИСТИНА
	                              |				ИНАЧЕ ЛОЖЬ
	                              |			КОНЕЦ КАК Требуется,
	                              |			НалоговыйОбороты.Организация КАК Организация
	                              |ИЗ
	                              |		РегистрБухгалтерии.Налоговый.Обороты(
	                              |				&ДатаНач, &ДатаКон,,
	                              |				Счет В Иерархии(ЗНАЧЕНИЕ(ПланСчетов.Налоговый.Производство_)),
	                              |				,
	                              |				Организация = &Организация) КАК НалоговыйОбороты) КАК ПроизводствоОбороты
								  |		ПО РасчетСтоимостиПродукцииНУ.Организация = ПроизводствоОбороты.Организация
								  |ОБЪЕДИНИТЬ ВСЕ
								  |
                                  |ВЫБРАТЬ
	                              |	ПереносНЗПБУ.Организация КАК Организация,
	                              |	ПереносНЗПБУ.ВидОперации КАК ВидОперации,
	                              |	""РегламентнаяОперация"" КАК ВидДокумента,
	                              | ИСТИНА КАК Требуется,
	                              |	ЕСТЬNULL(РегламентнаяОперация.РучнаяКорректировка, ЛОЖЬ) КАК РучнаяКорректировка,
	                              |	ЕСТЬNULL(РегламентнаяОперация.Состояние, &НеВыполнено) КАК Состояние
                                  |ИЗ
	                              |	(ВЫБРАТЬ
	                              |		Значение(Перечисление.ВидыРегламентныхОпераций.ПереносНЗПБУ) КАК ВидОперации,
	                              |		Организации.Ссылка КАК Организация
	                              |	ИЗ
	                              |		Справочник.Организации КАК Организации
	                              |	ГДЕ
	                              |		 Организации.Ссылка = &Организация) КАК ПереносНЗПБУ
	                              |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	                              |			РегламентнаяОперация.РучнаяКорректировка КАК РучнаяКорректировка,
	                              |			РегламентнаяОперация.Состояние КАК Состояние,
	                              |			РегламентнаяОперация.Организация КАК Организация								  
	                              |		ИЗ
	                              |			Документ.ЗакрытиеМесяца КАК РегламентнаяОперация
	                              |		ГДЕ
	                              |			РегламентнаяОперация.Организация = &Организация
								  |			И РегламентнаяОперация.Дата МЕЖДУ &ДатаНач И &ДатаКон
	                              |			И РегламентнаяОперация.ПереносНЗПБУ
	                              |			И (НЕ РегламентнаяОперация.ПометкаУдаления)) КАК РегламентнаяОперация
	                              |		ПО ПереносНЗПБУ.Организация = РегламентнаяОперация.Организация
								  |ОБЪЕДИНИТЬ ВСЕ
								  |
                                  |ВЫБРАТЬ
	                              |	ПереносНЗПНУ.Организация КАК Организация,
	                              |	ПереносНЗПНУ.ВидОперации КАК ВидОперации,
	                              |	""РегламентнаяОперация"" КАК ВидДокумента,
	                              | ИСТИНА КАК Требуется,
	                              |	ЕСТЬNULL(РегламентнаяОперация.РучнаяКорректировка, ЛОЖЬ) КАК РучнаяКорректировка,
	                              |	ЕСТЬNULL(РегламентнаяОперация.Состояние, &НеВыполнено) КАК Состояние
                                  |ИЗ
	                              |	(ВЫБРАТЬ
	                              |		Значение(Перечисление.ВидыРегламентныхОпераций.ПереносНЗПНУ) КАК ВидОперации,
	                              |		Организации.Ссылка КАК Организация
	                              |	ИЗ
	                              |		Справочник.Организации КАК Организации
	                              |	ГДЕ
	                              |		 Организации.Ссылка = &Организация) КАК ПереносНЗПНУ
	                              |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	                              |			РегламентнаяОперация.РучнаяКорректировка КАК РучнаяКорректировка,
	                              |			РегламентнаяОперация.Состояние КАК Состояние,
	                              |			РегламентнаяОперация.Организация КАК Организация								  
	                              |		ИЗ
	                              |			Документ.ЗакрытиеМесяца КАК РегламентнаяОперация
	                              |		ГДЕ
	                              |			РегламентнаяОперация.Организация = &Организация
								  |			И РегламентнаяОперация.Дата МЕЖДУ &ДатаНач И &ДатаКон
	                              |			И РегламентнаяОперация.ПереносНЗПНУ
	                              |			И (НЕ РегламентнаяОперация.ПометкаУдаления)) КАК РегламентнаяОперация
	                              |		ПО ПереносНЗПНУ.Организация = РегламентнаяОперация.Организация"; 								  

	КонецЕсли;
	
	Если Группа = 3 Или Группа = "Все" Тогда
		
		Если Группа = "Все"  Тогда
			Запрос.Текст = Запрос.Текст + "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|";
		КонецЕсли;
		Запрос.УстановитьПараметр("КонецКвартала", КонецКвартала);
		Запрос.Текст = Запрос.Текст + "ВЫБРАТЬ
		                              |	РасчетНДСКЗачету.Организация КАК Организация,
		                              |	РасчетНДСКЗачету.ВидОперации КАК ВидОперации,
		                              |	""РегламентнаяОперация"" КАК ВидДокумента,
		                              |	&КонецКвартала КАК Требуется,
		                              |	ЕСТЬNULL(РегламентнаяОперация.РучнаяКорректировка, ЛОЖЬ) КАК РучнаяКорректировка,
		                              |	ЕСТЬNULL(РегламентнаяОперация.Состояние, &НеВыполнено) КАК Состояние
		                              |ИЗ
		                              |	(ВЫБРАТЬ
		                              |		ЗНАЧЕНИЕ(Перечисление.ВидыРегламентныхОпераций.РасчетНДСКЗачету) КАК ВидОперации,
		                              |		Организации.Ссылка КАК Организация
		                              |	ИЗ
		                              |		Справочник.Организации КАК Организации
		                              |	ГДЕ
		                              |		Организации.Ссылка = &Организация) КАК РасчетНДСКЗачету
		                              |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		                              |			РегламентнаяОперация.РучнаяКорректировка КАК РучнаяКорректировка,
		                              |			РегламентнаяОперация.Состояние КАК Состояние,
		                              |			РегламентнаяОперация.Организация КАК Организация
		                              |		ИЗ
		                              |			Документ.ЗакрытиеМесяца КАК РегламентнаяОперация
		                              |		ГДЕ
		                              |			РегламентнаяОперация.Организация = &Организация									
		                              |			И РегламентнаяОперация.Дата МЕЖДУ &ДатаНач И &ДатаКон
		                              |			И РегламентнаяОперация.РасчетНДСКЗачету
		                              |			И (НЕ РегламентнаяОперация.ПометкаУдаления)) КАК РегламентнаяОперация
		                              |		ПО РасчетНДСКЗачету.Организация = РегламентнаяОперация.Организация
		                              |
		                              |ОБЪЕДИНИТЬ ВСЕ
		                              |
									  |ВЫБРАТЬ
									  |	ЗачетАвансовИПереплатПоНДС.Организация КАК Организация,
		                              |	ЗачетАвансовИПереплатПоНДС.ВидОперации КАК ВидОперации,
		                              |	""РегламентнаяОперация"" КАК ВидДокумента,
		                              |	&КонецКвартала КАК Требуется,
		                              |	ЕСТЬNULL(РегламентнаяОперация.РучнаяКорректировка, ЛОЖЬ) КАК РучнаяКорректировка,
		                              |	ЕСТЬNULL(РегламентнаяОперация.Состояние, &НеВыполнено) КАК Состояние
		                              |ИЗ
		                              |	(ВЫБРАТЬ
		                              |		ЗНАЧЕНИЕ(Перечисление.ВидыРегламентныхОпераций.ЗачетАвансовИПереплатПоНДС) КАК ВидОперации,
		                              |		Организации.Ссылка КАК Организация
		                              |	ИЗ
		                              |		Справочник.Организации КАК Организации
		                              |	ГДЕ
		                              |		Организации.Ссылка = &Организация) КАК ЗачетАвансовИПереплатПоНДС
		                              |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		                              |			РегламентнаяОперация.РучнаяКорректировка КАК РучнаяКорректировка,
		                              |			РегламентнаяОперация.Состояние КАК Состояние,
		                              |			РегламентнаяОперация.Организация КАК Организация
		                              |		ИЗ
		                              |			Документ.ЗакрытиеМесяца КАК РегламентнаяОперация
		                              |		ГДЕ
		                              |			РегламентнаяОперация.Организация = &Организация									
		                              |			И РегламентнаяОперация.Дата МЕЖДУ &ДатаНач И &ДатаКон
		                              |			И РегламентнаяОперация.ЗачетАвансовИПереплатПоНДС
		                              |			И (НЕ РегламентнаяОперация.ПометкаУдаления)) КАК РегламентнаяОперация
		                              |		ПО ЗачетАвансовИПереплатПоНДС.Организация = РегламентнаяОперация.Организация
 									  |
		                              |ОБЪЕДИНИТЬ ВСЕ
		                              |
		                              |ВЫБРАТЬ
		                              |	ЗакрытиеПодотчетныхСумм.Организация,
		                              |	ЗакрытиеПодотчетныхСумм.ВидОперации,
		                              |	""РегламентнаяОперация"",
		                              |	ИСТИНА,
		                              |	ЕСТЬNULL(РегламентнаяОперация.РучнаяКорректировка, ЛОЖЬ),
		                              |	ЕСТЬNULL(РегламентнаяОперация.Состояние, &НеВыполнено)
		                              |ИЗ
		                              |	(ВЫБРАТЬ
		                              |		ЗНАЧЕНИЕ(Перечисление.ВидыРегламентныхОпераций.ЗакрытиеПодотчетныхСуммБУ) КАК ВидОперации,
		                              |		Организации.Ссылка КАК Организация
		                              |	ИЗ
		                              |		Справочник.Организации КАК Организации
		                              |	ГДЕ
		                              |		Организации.Ссылка = &Организация) КАК ЗакрытиеПодотчетныхСумм
		                              |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		                              |			РегламентнаяОперация.РучнаяКорректировка КАК РучнаяКорректировка,
		                              |			РегламентнаяОперация.Состояние КАК Состояние,
		                              |			РегламентнаяОперация.Организация КАК Организация
		                              |		ИЗ
		                              |			Документ.ЗакрытиеМесяца КАК РегламентнаяОперация
		                              |		ГДЕ
		                              |			РегламентнаяОперация.Организация = &Организация
									  |			И РегламентнаяОперация.СтруктурноеПодразделение = &СтруктурноеПодразделение									  
		                              |			И РегламентнаяОперация.Дата МЕЖДУ &ДатаНач И &ДатаКон
		                              |			И РегламентнаяОперация.ЗакрытиеПодотчетныхСуммБУ
		                              |			И (НЕ РегламентнаяОперация.ПометкаУдаления)) КАК РегламентнаяОперация
		                              |		ПО ЗакрытиеПодотчетныхСумм.Организация = РегламентнаяОперация.Организация
		                              |
		                              |ОБЪЕДИНИТЬ ВСЕ
		                              |
		                              |ВЫБРАТЬ
		                              |	ЗачетАвансовыхПлатежейПоНалогамИСборамБУ.Организация,
		                              |	ЗачетАвансовыхПлатежейПоНалогамИСборамБУ.ВидОперации,
		                              |	""РегламентнаяОперация"",
		                              |	ИСТИНА,
		                              |	ЕСТЬNULL(РегламентнаяОперация.РучнаяКорректировка, ЛОЖЬ),
		                              |	ЕСТЬNULL(РегламентнаяОперация.Состояние, &НеВыполнено)
		                              |ИЗ
		                              |	(ВЫБРАТЬ
		                              |		ЗНАЧЕНИЕ(Перечисление.ВидыРегламентныхОпераций.ЗачетАвансовыхПлатежейПоНалогамИСборамБУ) КАК ВидОперации,
		                              |		Организации.Ссылка КАК Организация
		                              |	ИЗ
		                              |		Справочник.Организации КАК Организации
		                              |	ГДЕ
		                              |		Организации.Ссылка = &Организация) КАК ЗачетАвансовыхПлатежейПоНалогамИСборамБУ
		                              |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		                              |			РегламентнаяОперация.РучнаяКорректировка КАК РучнаяКорректировка,
		                              |			РегламентнаяОперация.Состояние КАК Состояние,
		                              |			РегламентнаяОперация.Организация КАК Организация
		                              |		ИЗ
		                              |			Документ.ЗакрытиеМесяца КАК РегламентнаяОперация
		                              |		ГДЕ
		                              |			РегламентнаяОперация.Организация = &Организация
									  |			И РегламентнаяОперация.СтруктурноеПодразделение = &СтруктурноеПодразделение
		                              |			И РегламентнаяОперация.Дата МЕЖДУ &ДатаНач И &ДатаКон
		                              |			И РегламентнаяОперация.ЗачетАвансовыхПлатежейПоНалогамИСборамБУ
		                              |			И (НЕ РегламентнаяОперация.ПометкаУдаления)) КАК РегламентнаяОперация
		                              |		ПО ЗачетАвансовыхПлатежейПоНалогамИСборамБУ.Организация = РегламентнаяОперация.Организация
									  |
		                              |ОБЪЕДИНИТЬ ВСЕ
		                              |
		                              |ВЫБРАТЬ
		                              |	ЗачетАвансовыхПлатежейПоНалогамИСборамНУ.Организация,
		                              |	ЗачетАвансовыхПлатежейПоНалогамИСборамНУ.ВидОперации,
		                              |	""РегламентнаяОперация"",
		                              |	ИСТИНА,
		                              |	ЕСТЬNULL(РегламентнаяОперация.РучнаяКорректировка, ЛОЖЬ),
		                              |	ЕСТЬNULL(РегламентнаяОперация.Состояние, &НеВыполнено)
		                              |ИЗ
		                              |	(ВЫБРАТЬ
		                              |		ЗНАЧЕНИЕ(Перечисление.ВидыРегламентныхОпераций.ЗачетАвансовыхПлатежейПоНалогамИСборамНУ) КАК ВидОперации,
		                              |		Организации.Ссылка КАК Организация
		                              |	ИЗ
		                              |		Справочник.Организации КАК Организации
		                              |	ГДЕ
		                              |		Организации.Ссылка = &Организация) КАК ЗачетАвансовыхПлатежейПоНалогамИСборамНУ
		                              |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		                              |			РегламентнаяОперация.РучнаяКорректировка КАК РучнаяКорректировка,
		                              |			РегламентнаяОперация.Состояние КАК Состояние,
		                              |			РегламентнаяОперация.Организация КАК Организация
		                              |		ИЗ
		                              |			Документ.ЗакрытиеМесяца КАК РегламентнаяОперация
		                              |		ГДЕ
		                              |			РегламентнаяОперация.Организация = &Организация
									  |			И РегламентнаяОперация.СтруктурноеПодразделение = &СтруктурноеПодразделение
		                              |			И РегламентнаяОперация.Дата МЕЖДУ &ДатаНач И &ДатаКон
		                              |			И РегламентнаяОперация.ЗачетАвансовыхПлатежейПоНалогамИСборамНУ
		                              |			И (НЕ РегламентнаяОперация.ПометкаУдаления)) КАК РегламентнаяОперация
		                              |		ПО ЗачетАвансовыхПлатежейПоНалогамИСборамНУ.Организация = РегламентнаяОперация.Организация";  
								  

	КонецЕсли;
	
	Если Группа = 4 Или Группа = "Все" Тогда
		
		Если Группа = "Все"  Тогда
			Запрос.Текст = Запрос.Текст + "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|";
		КонецЕсли;
		
		Запрос.УстановитьПараметр("КонецКвартала", КонецКвартала);
		Запрос.Текст = Запрос.Текст + "ВЫБРАТЬ
		                              |	РасчетИтоговогоДоходаУбыткаБУ.Организация КАК Организация,
		                              |	РасчетИтоговогоДоходаУбыткаБУ.ВидОперации КАК ВидОперации,
		                              |	""РегламентнаяОперация"" КАК ВидДокумента,
		                              |	ИСТИНА КАК Требуется,
		                              |	ЕСТЬNULL(РегламентнаяОперация.РучнаяКорректировка, ЛОЖЬ) КАК РучнаяКорректировка,									  
									  |	ЕСТЬNULL(РегламентнаяОперация.Состояние, &НеВыполнено) КАК Состояние
		                              |ИЗ
		                              |	(ВЫБРАТЬ
		                              |		ЗНАЧЕНИЕ(Перечисление.ВидыРегламентныхОпераций.РасчетИтоговогоДоходаУбыткаБУ) КАК ВидОперации,
		                              |		Организации.Ссылка КАК Организация
		                              |	ИЗ
		                              |		Справочник.Организации КАК Организации
		                              |	ГДЕ
		                              |		Организации.Ссылка = &Организация) КАК РасчетИтоговогоДоходаУбыткаБУ
		                              |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		                              |			РегламентнаяОперация.РучнаяКорректировка КАК РучнаяКорректировка,
		                              |			РегламентнаяОперация.Состояние КАК Состояние,
		                              |			РегламентнаяОперация.Организация КАК Организация
		                              |		ИЗ
		                              |			Документ.ЗакрытиеМесяца КАК РегламентнаяОперация
		                              |		ГДЕ
		                              |			РегламентнаяОперация.Организация = &Организация
									  |			И РегламентнаяОперация.СтруктурноеПодразделение = &СтруктурноеПодразделение
		                              |			И РегламентнаяОперация.Дата МЕЖДУ &ДатаНач И &ДатаКон
		                              |			И РегламентнаяОперация.РасчетИтоговогоДоходаУбыткаБУ
		                              |			И (НЕ РегламентнаяОперация.ПометкаУдаления)) КАК РегламентнаяОперация
		                              |		ПО РасчетИтоговогоДоходаУбыткаБУ.Организация = РегламентнаяОперация.Организация
		                              |
		                              |ОБЪЕДИНИТЬ ВСЕ
		                              |
		                              |ВЫБРАТЬ
		                              |	РеформацияБалансаБУ.Организация,
		                              |	РеформацияБалансаБУ.ВидОперации,
		                              |	""РегламентнаяОперация"",
		                              |	ИСТИНА,
		                              |	ЕСТЬNULL(РегламентнаяОперация.РучнаяКорректировка, ЛОЖЬ),
		                              |	ЕСТЬNULL(РегламентнаяОперация.Состояние, &НеВыполнено)
		                              |ИЗ
		                              |	(ВЫБРАТЬ
		                              |		ЗНАЧЕНИЕ(Перечисление.ВидыРегламентныхОпераций.РеформацияБалансаБУ) КАК ВидОперации,
		                              |		Организации.Ссылка КАК Организация
		                              |	ИЗ
		                              |		Справочник.Организации КАК Организации
		                              |	ГДЕ
		                              |		Организации.Ссылка = &Организация) КАК РеформацияБалансаБУ
		                              |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		                              |			РегламентнаяОперация.РучнаяКорректировка КАК РучнаяКорректировка,
		                              |			РегламентнаяОперация.Состояние КАК Состояние,
		                              |			РегламентнаяОперация.Организация КАК Организация
		                              |		ИЗ
		                              |			Документ.ЗакрытиеМесяца КАК РегламентнаяОперация
		                              |		ГДЕ
		                              |			РегламентнаяОперация.Организация = &Организация
									  |			И РегламентнаяОперация.СтруктурноеПодразделение = &СтруктурноеПодразделение
		                              |			И РегламентнаяОперация.Дата МЕЖДУ &ДатаНач И &ДатаКон
		                              |			И РегламентнаяОперация.РеформацияБалансаБУ
		                              |			И (НЕ РегламентнаяОперация.ПометкаУдаления)) КАК РегламентнаяОперация
		                              |		ПО РеформацияБалансаБУ.Организация = РегламентнаяОперация.Организация";

		
	КонецЕсли;
	
	Если Группа = 5 Или Группа = "Все" Тогда
		
		Если Группа = "Все"  Тогда
			Запрос.Текст = Запрос.Текст + "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|";
		КонецЕсли;

	Запрос.УстановитьПараметр("КонецГода", КонецГода);		
	
	Запрос.УстановитьПараметр("КонецГодаДляЗакрытияСчетовНУ", КонецГода);
	
			
	Запрос.Текст = Запрос.Текст +  "ВЫБРАТЬ
	                               |	РасчетДоходаОтПревышенияСтоимостиВыбывшихФА.Организация КАК Организация,
	                               |	РасчетДоходаОтПревышенияСтоимостиВыбывшихФА.ВидОперации КАК ВидОперации,
	                               |	""РегламентнаяОперация"" КАК ВидДокумента,
	                               |	&КонецГода КАК Требуется,
	                               |	ЕСТЬNULL(РегламентнаяОперация.РучнаяКорректировка, ЛОЖЬ) КАК РучнаяКорректировка,
	                               |	ЕСТЬNULL(РегламентнаяОперация.Состояние, &НеВыполнено) КАК Состояние
	                               |ИЗ
	                               |	(ВЫБРАТЬ
	                               |		ЗНАЧЕНИЕ(Перечисление.ВидыРегламентныхОпераций.РасчетДоходаОтПревышенияСтоимостиВыбывшихФА) КАК ВидОперации,
	                               |		Организации.Ссылка КАК Организация
	                               |	ИЗ
	                               |		Справочник.Организации КАК Организации
	                               |	ГДЕ
	                               |		Организации.Ссылка = &Организация) КАК РасчетДоходаОтПревышенияСтоимостиВыбывшихФА
	                               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	                               |			РегламентнаяОперация.РучнаяКорректировка КАК РучнаяКорректировка,
	                               |			РегламентнаяОперация.Состояние КАК Состояние,
	                               |			РегламентнаяОперация.Организация КАК Организация
	                               |		ИЗ
	                               |			Документ.ЗакрытиеМесяца КАК РегламентнаяОперация
	                               |		ГДЕ
	                               |			РегламентнаяОперация.Организация = &Организация
	                               |			И РегламентнаяОперация.Дата МЕЖДУ &ДатаНач И &ДатаКон
	                               |			И РегламентнаяОперация.РасчетДоходаОтПревышенияСтоимостиВыбывшихФА
	                               |			И (НЕ РегламентнаяОперация.ПометкаУдаления)) КАК РегламентнаяОперация
	                               |		ПО РасчетДоходаОтПревышенияСтоимостиВыбывшихФА.Организация = РегламентнаяОперация.Организация
	                               |
	                               |ОБЪЕДИНИТЬ ВСЕ
	                               |
	                               |ВЫБРАТЬ
	                               |	СписаниеПриВыбытииВсехФАГруппы.Организация,
	                               |	СписаниеПриВыбытииВсехФАГруппы.ВидОперации,
	                               |	""РегламентнаяОперация"",
	                               |	&КонецГода,
	                               |	ЕСТЬNULL(РегламентнаяОперация.РучнаяКорректировка, ЛОЖЬ),
	                               |	ЕСТЬNULL(РегламентнаяОперация.Состояние, &НеВыполнено)
	                               |ИЗ
	                               |	(ВЫБРАТЬ
	                               |		ЗНАЧЕНИЕ(Перечисление.ВидыРегламентныхОпераций.СписаниеПриВыбытииВсехФАГруппы) КАК ВидОперации,
	                               |		Организации.Ссылка КАК Организация
	                               |	ИЗ
	                               |		Справочник.Организации КАК Организации
	                               |	ГДЕ
	                               |		Организации.Ссылка = &Организация) КАК СписаниеПриВыбытииВсехФАГруппы
	                               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	                               |			РегламентнаяОперация.РучнаяКорректировка КАК РучнаяКорректировка,
	                               |			РегламентнаяОперация.Состояние КАК Состояние,
	                               |			РегламентнаяОперация.Организация КАК Организация
	                               |		ИЗ
	                               |			Документ.ЗакрытиеМесяца КАК РегламентнаяОперация
	                               |		ГДЕ
	                               |			РегламентнаяОперация.Организация = &Организация
	                               |			И РегламентнаяОперация.Дата МЕЖДУ &ДатаНач И &ДатаКон
	                               |			И РегламентнаяОперация.СписаниеПриВыбытииВсехФАГруппы
	                               |			И (НЕ РегламентнаяОперация.ПометкаУдаления)) КАК РегламентнаяОперация
	                               |		ПО СписаниеПриВыбытииВсехФАГруппы.Организация = РегламентнаяОперация.Организация
	                               |
	                               |ОБЪЕДИНИТЬ ВСЕ
	                               |
	                               |ВЫБРАТЬ
	                               |	СписаниеСтоимостногоБалансаГруппыМенееМинимума.Организация,
	                               |	СписаниеСтоимостногоБалансаГруппыМенееМинимума.ВидОперации,
	                               |	""РегламентнаяОперация"",
	                               |	&КонецГода,
	                               |	ЕСТЬNULL(РегламентнаяОперация.РучнаяКорректировка, ЛОЖЬ),
	                               |	ЕСТЬNULL(РегламентнаяОперация.Состояние, &НеВыполнено)
	                               |ИЗ
	                               |	(ВЫБРАТЬ
	                               |		ЗНАЧЕНИЕ(Перечисление.ВидыРегламентныхОпераций.СписаниеСтоимостногоБалансаГруппыМенееМинимума) КАК ВидОперации,
	                               |		Организации.Ссылка КАК Организация
	                               |	ИЗ
	                               |		Справочник.Организации КАК Организации
	                               |	ГДЕ
	                               |		Организации.Ссылка = &Организация) КАК СписаниеСтоимостногоБалансаГруппыМенееМинимума
	                               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	                               |			РегламентнаяОперация.РучнаяКорректировка КАК РучнаяКорректировка,
	                               |			РегламентнаяОперация.Состояние КАК Состояние,
	                               |			РегламентнаяОперация.Организация КАК Организация
	                               |		ИЗ
	                               |			Документ.ЗакрытиеМесяца КАК РегламентнаяОперация
	                               |		ГДЕ
	                               |			РегламентнаяОперация.Организация = &Организация
	                               |			И РегламентнаяОперация.Дата МЕЖДУ &ДатаНач И &ДатаКон
	                               |			И РегламентнаяОперация.СписаниеСтоимостногоБалансаГруппыМенееМинимума
	                               |			И (НЕ РегламентнаяОперация.ПометкаУдаления)) КАК РегламентнаяОперация
	                               |		ПО СписаниеСтоимостногоБалансаГруппыМенееМинимума.Организация = РегламентнаяОперация.Организация
	                               |
	                               |ОБЪЕДИНИТЬ ВСЕ
	                               |
	                               |ВЫБРАТЬ
	                               |	АмортизацияФАНУ.Организация,
	                               |	АмортизацияФАНУ.ВидОперации,
	                               |	""РегламентнаяОперация"",
	                               |	&КонецГода,
	                               |	ЕСТЬNULL(РегламентнаяОперация.РучнаяКорректировка, ЛОЖЬ),
	                               |	ЕСТЬNULL(РегламентнаяОперация.Состояние, &НеВыполнено)
	                               |ИЗ
	                               |	(ВЫБРАТЬ
	                               |		ЗНАЧЕНИЕ(Перечисление.ВидыРегламентныхОпераций.АмортизацияФАНУ) КАК ВидОперации,
	                               |		Организации.Ссылка КАК Организация
	                               |	ИЗ
	                               |		Справочник.Организации КАК Организации
	                               |	ГДЕ
	                               |		Организации.Ссылка = &Организация) КАК АмортизацияФАНУ
	                               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	                               |			РегламентнаяОперация.РучнаяКорректировка КАК РучнаяКорректировка,
	                               |			РегламентнаяОперация.Состояние КАК Состояние,
	                               |			РегламентнаяОперация.Организация КАК Организация
	                               |		ИЗ
	                               |			Документ.ЗакрытиеМесяца КАК РегламентнаяОперация
	                               |		ГДЕ
	                               |			РегламентнаяОперация.Организация = &Организация
	                               |			И РегламентнаяОперация.Дата МЕЖДУ &ДатаНач И &ДатаКон
	                               |			И РегламентнаяОперация.АмортизацияФАНУ
	                               |			И (НЕ РегламентнаяОперация.ПометкаУдаления)) КАК РегламентнаяОперация
	                               |		ПО АмортизацияФАНУ.Организация = РегламентнаяОперация.Организация
	                               |
	                               |ОБЪЕДИНИТЬ ВСЕ
	                               |
	                               |ВЫБРАТЬ
	                               |	РасчетВычетовПоРасходамНаРемонт.Организация,
	                               |	РасчетВычетовПоРасходамНаРемонт.ВидОперации,
	                               |	""РегламентнаяОперация"",
	                               |	&КонецГода,
	                               |	ЕСТЬNULL(РегламентнаяОперация.РучнаяКорректировка, ЛОЖЬ),
	                               |	ЕСТЬNULL(РегламентнаяОперация.Состояние, &НеВыполнено)
	                               |ИЗ
	                               |	(ВЫБРАТЬ
	                               |		ЗНАЧЕНИЕ(Перечисление.ВидыРегламентныхОпераций.РасчетВычетовПоРасходамНаРемонт) КАК ВидОперации,
	                               |		Организации.Ссылка КАК Организация
	                               |	ИЗ
	                               |		Справочник.Организации КАК Организации
	                               |	ГДЕ
	                               |		Организации.Ссылка = &Организация) КАК РасчетВычетовПоРасходамНаРемонт
	                               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	                               |			РегламентнаяОперация.РучнаяКорректировка КАК РучнаяКорректировка,
	                               |			РегламентнаяОперация.Состояние КАК Состояние,
	                               |			РегламентнаяОперация.Организация КАК Организация
	                               |		ИЗ
	                               |			Документ.ЗакрытиеМесяца КАК РегламентнаяОперация
	                               |		ГДЕ
	                               |			РегламентнаяОперация.Организация = &Организация
	                               |			И РегламентнаяОперация.Дата МЕЖДУ &ДатаНач И &ДатаКон
	                               |			И РегламентнаяОперация.РасчетВычетовПоРасходамНаРемонт
	                               |			И (НЕ РегламентнаяОперация.ПометкаУдаления)) КАК РегламентнаяОперация
	                               |		ПО РасчетВычетовПоРасходамНаРемонт.Организация = РегламентнаяОперация.Организация
	                               |
	                               |ОБЪЕДИНИТЬ ВСЕ
	                               |
	                               |ВЫБРАТЬ
	                               |	РасчетВычетовПоПреференциям.Организация,
	                               |	РасчетВычетовПоПреференциям.ВидОперации,
	                               |	""РегламентнаяОперация"",
	                               |	&КонецГода,
	                               |	ЕСТЬNULL(РегламентнаяОперация.РучнаяКорректировка, ЛОЖЬ),
	                               |	ЕСТЬNULL(РегламентнаяОперация.Состояние, &НеВыполнено)
	                               |ИЗ
	                               |	(ВЫБРАТЬ
	                               |		ЗНАЧЕНИЕ(Перечисление.ВидыРегламентныхОпераций.РасчетВычетовПоПреференциям) КАК ВидОперации,
	                               |		Организации.Ссылка КАК Организация
	                               |	ИЗ
	                               |		Справочник.Организации КАК Организации
	                               |	ГДЕ
	                               |		Организации.Ссылка = &Организация) КАК РасчетВычетовПоПреференциям
	                               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	                               |			РегламентнаяОперация.РучнаяКорректировка КАК РучнаяКорректировка,
	                               |			РегламентнаяОперация.Состояние КАК Состояние,
	                               |			РегламентнаяОперация.Организация КАК Организация
	                               |		ИЗ
	                               |			Документ.ЗакрытиеМесяца КАК РегламентнаяОперация
	                               |		ГДЕ
	                               |			РегламентнаяОперация.Организация = &Организация
	                               |			И РегламентнаяОперация.Дата МЕЖДУ &ДатаНач И &ДатаКон
	                               |			И РегламентнаяОперация.РасчетВычетовПоПреференциям
	                               |			И (НЕ РегламентнаяОперация.ПометкаУдаления)) КАК РегламентнаяОперация
	                               |		ПО РасчетВычетовПоПреференциям.Организация = РегламентнаяОперация.Организация
	                               |
	                               |ОБЪЕДИНИТЬ ВСЕ
	                               |
	                               |ВЫБРАТЬ
	                               |	ВключениеВСтоимостныйБалансАктивовУчитываемыхОтдельно.Организация,
	                               |	ВключениеВСтоимостныйБалансАктивовУчитываемыхОтдельно.ВидОперации,
	                               |	""РегламентнаяОперация"",
	                               |	&КонецГода,
	                               |	ЕСТЬNULL(РегламентнаяОперация.РучнаяКорректировка, ЛОЖЬ),
	                               |	ЕСТЬNULL(РегламентнаяОперация.Состояние, &НеВыполнено)
	                               |ИЗ
	                               |	(ВЫБРАТЬ
	                               |		ЗНАЧЕНИЕ(Перечисление.ВидыРегламентныхОпераций.ВключениеВСтоимостныйБалансАктивовУчитываемыхОтдельно) КАК ВидОперации,
	                               |		Организации.Ссылка КАК Организация
	                               |	ИЗ
	                               |		Справочник.Организации КАК Организации
	                               |	ГДЕ
	                               |		Организации.Ссылка = &Организация) КАК ВключениеВСтоимостныйБалансАктивовУчитываемыхОтдельно
	                               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	                               |			РегламентнаяОперация.РучнаяКорректировка КАК РучнаяКорректировка,
	                               |			РегламентнаяОперация.Состояние КАК Состояние,
	                               |			РегламентнаяОперация.Организация КАК Организация
	                               |		ИЗ
	                               |			Документ.ЗакрытиеМесяца КАК РегламентнаяОперация
	                               |		ГДЕ
	                               |			РегламентнаяОперация.Организация = &Организация
	                               |			И РегламентнаяОперация.Дата МЕЖДУ &ДатаНач И &ДатаКон
	                               |			И РегламентнаяОперация.ВключениеВСтоимостныйБалансАктивовУчитываемыхОтдельно
	                               |			И (НЕ РегламентнаяОперация.ПометкаУдаления)) КАК РегламентнаяОперация
	                               |		ПО ВключениеВСтоимостныйБалансАктивовУчитываемыхОтдельно.Организация = РегламентнаяОперация.Организация
	                               |
	                               |ОБЪЕДИНИТЬ ВСЕ
	                               |
	                               |ВЫБРАТЬ
	                               |	РасчетВычетаПоРеализованнымТоварам.Организация,
	                               |	РасчетВычетаПоРеализованнымТоварам.ВидОперации,
	                               |	""РегламентнаяОперация"",
	                               |	&КонецГодаДо2019,
	                               |	ЕСТЬNULL(РегламентнаяОперация.РучнаяКорректировка, ЛОЖЬ),
	                               |	ЕСТЬNULL(РегламентнаяОперация.Состояние, &НеВыполнено)
	                               |ИЗ
	                               |	(ВЫБРАТЬ
	                               |		ЗНАЧЕНИЕ(Перечисление.ВидыРегламентныхОпераций.РасчетВычетаПоРеализованнымТоварам) КАК ВидОперации,
	                               |		Организации.Ссылка КАК Организация
	                               |	ИЗ
	                               |		Справочник.Организации КАК Организации
	                               |	ГДЕ
	                               |		Организации.Ссылка = &Организация) КАК РасчетВычетаПоРеализованнымТоварам
	                               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	                               |			РегламентнаяОперация.РучнаяКорректировка КАК РучнаяКорректировка,
	                               |			РегламентнаяОперация.Состояние КАК Состояние,
	                               |			РегламентнаяОперация.Организация КАК Организация
	                               |		ИЗ
	                               |			Документ.ЗакрытиеМесяца КАК РегламентнаяОперация
	                               |		ГДЕ
	                               |			РегламентнаяОперация.Организация = &Организация
								   |			И РегламентнаяОперация.СтруктурноеПодразделение = &СтруктурноеПодразделение
	                               |			И РегламентнаяОперация.Дата МЕЖДУ &ДатаНач И &ДатаКон
	                               |			И РегламентнаяОперация.РасчетВычетаПоРеализованнымТоварам
	                               |			И (НЕ РегламентнаяОперация.ПометкаУдаления)) КАК РегламентнаяОперация
	                               |		ПО РасчетВычетаПоРеализованнымТоварам.Организация = РегламентнаяОперация.Организация
	                               |
	                               |ОБЪЕДИНИТЬ ВСЕ
	                               |
	                               |ВЫБРАТЬ
	                               |	ЗакрытиеСчетовНУ.Организация,
	                               |	ЗакрытиеСчетовНУ.ВидОперации,
	                               |	""РегламентнаяОперация"",
	                               |	&КонецГодаДляЗакрытияСчетовНУ,
	                               |	ЕСТЬNULL(РегламентнаяОперация.РучнаяКорректировка, ЛОЖЬ),
	                               |	ЕСТЬNULL(РегламентнаяОперация.Состояние, &НеВыполнено)
	                               |ИЗ
	                               |	(ВЫБРАТЬ
	                               |		ЗНАЧЕНИЕ(Перечисление.ВидыРегламентныхОпераций.ЗакрытиеСчетовНУ) КАК ВидОперации,
	                               |		Организации.Ссылка КАК Организация
	                               |	ИЗ
	                               |		Справочник.Организации КАК Организации
	                               |	ГДЕ
	                               |		Организации.Ссылка = &Организация) КАК ЗакрытиеСчетовНУ
	                               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	                               |			РегламентнаяОперация.РучнаяКорректировка КАК РучнаяКорректировка,
	                               |			РегламентнаяОперация.Состояние КАК Состояние,
	                               |			РегламентнаяОперация.Организация КАК Организация
	                               |		ИЗ
	                               |			Документ.ЗакрытиеМесяца КАК РегламентнаяОперация
	                               |		ГДЕ
	                               |			РегламентнаяОперация.Организация = &Организация
	                               |			И РегламентнаяОперация.Дата МЕЖДУ &ДатаНач И &ДатаКон
	                               |			И РегламентнаяОперация.ЗакрытиеСчетовНУ
	                               |			И (НЕ РегламентнаяОперация.ПометкаУдаления)) КАК РегламентнаяОперация
	                               |		ПО ЗакрытиеСчетовНУ.Организация = РегламентнаяОперация.Организация
								   |
	                               |ОБЪЕДИНИТЬ ВСЕ
	                               |
	                               |ВЫБРАТЬ
	                               |	РасчетВычетовПоНалогам.Организация,
	                               |	РасчетВычетовПоНалогам.ВидОперации,
	                               |	""РегламентнаяОперация"",
	                               |	&КонецГода,
	                               |	ЕСТЬNULL(РегламентнаяОперация.РучнаяКорректировка, ЛОЖЬ),
	                               |	ЕСТЬNULL(РегламентнаяОперация.Состояние, &НеВыполнено)
	                               |ИЗ
	                               |	(ВЫБРАТЬ
	                               |		ЗНАЧЕНИЕ(Перечисление.ВидыРегламентныхОпераций.РасчетВычетовПоНалогам) КАК ВидОперации,
	                               |		Организации.Ссылка КАК Организация
	                               |	ИЗ
	                               |		Справочник.Организации КАК Организации
	                               |	ГДЕ
	                               |		Организации.Ссылка = &Организация) КАК РасчетВычетовПоНалогам
	                               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	                               |			РегламентнаяОперация.РучнаяКорректировка КАК РучнаяКорректировка,
	                               |			РегламентнаяОперация.Состояние КАК Состояние,
	                               |			РегламентнаяОперация.Организация КАК Организация
	                               |		ИЗ
	                               |			Документ.ЗакрытиеМесяца КАК РегламентнаяОперация
	                               |		ГДЕ
	                               |			РегламентнаяОперация.Организация = &Организация
	                               |			И РегламентнаяОперация.Дата МЕЖДУ &ДатаНач И &ДатаКон
	                               |			И РегламентнаяОперация.РасчетВычетовПоНалогам
	                               |			И (НЕ РегламентнаяОперация.ПометкаУдаления)) КАК РегламентнаяОперация
	                               |		ПО РасчетВычетовПоНалогам.Организация = РегламентнаяОперация.Организация"; 	

	КонецЕсли;
	
	Если Группа = 6 ИЛИ Группа = "Все" Тогда
		
		Если Группа = "Все"  Тогда
			Запрос.Текст = Запрос.Текст + "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|";
		КонецЕсли;

	Запрос.Текст = Запрос.Текст +  "ВЫБРАТЬ
	                               |	РасчетИтоговогоДоходаУбыткаНУ.Организация КАК Организация,
	                               |	РасчетИтоговогоДоходаУбыткаНУ.ВидОперации КАК ВидОперации,
	                               |	""РегламентнаяОперация"" КАК ВидДокумента,
	                               |	&КонецГода КАК Требуется,
	                               |	ЕСТЬNULL(РегламентнаяОперация.РучнаяКорректировка, ЛОЖЬ) КАК РучнаяКорректировка,
	                               |	ЕСТЬNULL(РегламентнаяОперация.Состояние, &НеВыполнено) КАК Состояние
	                               |ИЗ
	                               |	(ВЫБРАТЬ
	                               |		ЗНАЧЕНИЕ(Перечисление.ВидыРегламентныхОпераций.РасчетИтоговогоДоходаУбыткаНУ) КАК ВидОперации,
	                               |		Организации.Ссылка КАК Организация
	                               |	ИЗ
	                               |		Справочник.Организации КАК Организации
	                               |	ГДЕ
	                               |		Организации.Ссылка = &Организация) КАК РасчетИтоговогоДоходаУбыткаНУ
	                               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	                               |			РегламентнаяОперация.РучнаяКорректировка КАК РучнаяКорректировка,
	                               |			РегламентнаяОперация.Состояние КАК Состояние,
	                               |			РегламентнаяОперация.Организация КАК Организация
	                               |		ИЗ
	                               |			Документ.ЗакрытиеМесяца КАК РегламентнаяОперация
	                               |		ГДЕ
	                               |			РегламентнаяОперация.Организация = &Организация
	                               |			И РегламентнаяОперация.Дата МЕЖДУ &ДатаНач И &ДатаКон
	                               |			И РегламентнаяОперация.РасчетИтоговогоДоходаУбыткаНУ
	                               |			И (НЕ РегламентнаяОперация.ПометкаУдаления)) КАК РегламентнаяОперация
	                               |		ПО РасчетИтоговогоДоходаУбыткаНУ.Организация = РегламентнаяОперация.Организация
	                               |	                             
	                               |
	                               |ОБЪЕДИНИТЬ ВСЕ
	                               |
	                               |ВЫБРАТЬ
	                               |	РасчетВременныхРазниц.Организация,
	                               |	РасчетВременныхРазниц.ВидОперации,
	                               |	""РегламентнаяОперация"",
	                               |	&КонецГода,
	                               |	ЕСТЬNULL(РегламентнаяОперация.РучнаяКорректировка, ЛОЖЬ),
	                               |	ЕСТЬNULL(РегламентнаяОперация.Состояние, &НеВыполнено)
	                               |ИЗ
	                               |	(ВЫБРАТЬ
	                               |		ЗНАЧЕНИЕ(Перечисление.ВидыРегламентныхОпераций.РасчетВременныхРазниц) КАК ВидОперации,
	                               |		Организации.Ссылка КАК Организация
	                               |	ИЗ
	                               |		Справочник.Организации КАК Организации
	                               |	ГДЕ
	                               |		Организации.Ссылка = &Организация) КАК РасчетВременныхРазниц
	                               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	                               |			РегламентнаяОперация.РучнаяКорректировка КАК РучнаяКорректировка,
	                               |			РегламентнаяОперация.Состояние КАК Состояние,
	                               |			РегламентнаяОперация.Организация КАК Организация
	                               |		ИЗ
	                               |			Документ.ЗакрытиеМесяца КАК РегламентнаяОперация
	                               |		ГДЕ
	                               |			РегламентнаяОперация.Организация = &Организация
	                               |			И РегламентнаяОперация.Дата МЕЖДУ &ДатаНач И &ДатаКон
	                               |			И РегламентнаяОперация.РасчетВременныхРазниц
	                               |			И (НЕ РегламентнаяОперация.ПометкаУдаления)) КАК РегламентнаяОперация
	                               |		ПО РасчетВременныхРазниц.Организация = РегламентнаяОперация.Организация
	                               |
	                               |ОБЪЕДИНИТЬ ВСЕ
	                               |
	                               |ВЫБРАТЬ
	                               |	РасчетНалогаНаПрибыль.Организация,
	                               |	РасчетНалогаНаПрибыль.ВидОперации,
	                               |	""РегламентнаяОперация"",
	                               |	&КонецГода,
	                               |	ЕСТЬNULL(РегламентнаяОперация.РучнаяКорректировка, ЛОЖЬ),
	                               |	ЕСТЬNULL(РегламентнаяОперация.Состояние, &НеВыполнено)
	                               |ИЗ
	                               |	(ВЫБРАТЬ
	                               |		ЗНАЧЕНИЕ(Перечисление.ВидыРегламентныхОпераций.РасчетНалогаНаПрибыль) КАК ВидОперации,
	                               |		Организации.Ссылка КАК Организация
	                               |	ИЗ
	                               |		Справочник.Организации КАК Организации
	                               |	ГДЕ
	                               |		Организации.Ссылка = &Организация) КАК РасчетНалогаНаПрибыль
	                               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	                               |			РегламентнаяОперация.РучнаяКорректировка КАК РучнаяКорректировка,
	                               |			РегламентнаяОперация.Состояние КАК Состояние,
	                               |			РегламентнаяОперация.Организация КАК Организация
	                               |		ИЗ
	                               |			Документ.ЗакрытиеМесяца КАК РегламентнаяОперация
	                               |		ГДЕ
	                               |			РегламентнаяОперация.Организация = &Организация
	                               |			И РегламентнаяОперация.Дата МЕЖДУ &ДатаНач И &ДатаКон
	                               |			И РегламентнаяОперация.РасчетНалогаНаПрибыль
	                               |			И (НЕ РегламентнаяОперация.ПометкаУдаления)) КАК РегламентнаяОперация
	                               |		ПО РасчетНалогаНаПрибыль.Организация = РегламентнаяОперация.Организация";
		        
	КонецЕсли;
	
	
	Запрос.Текст = Запрос.Текст + ") КАК ВложенныйЗапрос	
	    |СГРУППИРОВАТЬ ПО
		|   ВложенныйЗапрос.Организация,
		|	&СтруктурноеПодразделение,
		|	ВложенныйЗапрос.ВидДокумента,
		|	ВложенныйЗапрос.ВидОперации,
		|	ВложенныйЗапрос.Требуется,
		|	ВложенныйЗапрос.Состояние,
		|	ВложенныйЗапрос.РучнаяКорректировка";

  
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Функция определяет перечень операций закрытия месяца, которые должны выполняться в целом по организации.
// Операци, не входящие в этот перечень выполняются отдельно по каждому структурному подразделению.
//
Функция ПолучитьСписокОперацийЗакрытияМесяцаПоОрганизации() Экспорт 
	
	СписокОперацийПоОрганизации = Новый СписокЗначений;
	СписокОперацийПоОрганизации.Добавить(Перечисления.ВидыРегламентныхОпераций.РасчетДоходаОтПревышенияСтоимостиВыбывшихФА);
	СписокОперацийПоОрганизации.Добавить(Перечисления.ВидыРегламентныхОпераций.СписаниеСтоимостногоБалансаГруппыМенееМинимума);
	СписокОперацийПоОрганизации.Добавить(Перечисления.ВидыРегламентныхОпераций.СписаниеПриВыбытииВсехФАГруппы);
	СписокОперацийПоОрганизации.Добавить(Перечисления.ВидыРегламентныхОпераций.АмортизацияФАНУ);
	СписокОперацийПоОрганизации.Добавить(Перечисления.ВидыРегламентныхОпераций.ВключениеВСтоимостныйБалансАктивовУчитываемыхОтдельно);
	СписокОперацийПоОрганизации.Добавить(Перечисления.ВидыРегламентныхОпераций.РасчетВычетовПоРасходамНаРемонт);
	СписокОперацийПоОрганизации.Добавить(Перечисления.ВидыРегламентныхОпераций.РасчетВычетовПоПреференциям);
	СписокОперацийПоОрганизации.Добавить(Перечисления.ВидыРегламентныхОпераций.РасчетВычетовПоНалогам);	
	СписокОперацийПоОрганизации.Добавить(Перечисления.ВидыРегламентныхОпераций.ЗакрытиеСчетовНУ);
	СписокОперацийПоОрганизации.Добавить(Перечисления.ВидыРегламентныхОпераций.РасчетСтоимостиПродукцииБУ);
	СписокОперацийПоОрганизации.Добавить(Перечисления.ВидыРегламентныхОпераций.РасчетСтоимостиПродукцииНУ);
	СписокОперацийПоОрганизации.Добавить(Перечисления.ВидыРегламентныхОпераций.ПереносНЗПБУ);
	СписокОперацийПоОрганизации.Добавить(Перечисления.ВидыРегламентныхОпераций.ПереносНЗПНУ);
	СписокОперацийПоОрганизации.Добавить(Перечисления.ВидыРегламентныхОпераций.РасчетНДСКЗачету);
	СписокОперацийПоОрганизации.Добавить(Перечисления.ВидыРегламентныхОпераций.РасчетНалогаНаПрибыль);
	СписокОперацийПоОрганизации.Добавить(Перечисления.ВидыРегламентныхОпераций.РасчетВременныхРазниц);
	
	Возврат СписокОперацийПоОрганизации;
	
КонецФункции

Процедура ЗаполнитьСпискиРегламентныхОперацийПоПериодамПроверки(ПериодПроверки, Организация,РегламентнаяОперация, СтруктураВыбранныхОперацийПоОрганизации, СтруктураВыбранныхОперацийПоСтруктурномуПодразделению, ОбщийСписокОперацийПоОрганизации = Неопределено) Экспорт
	
	// Проверка отмеченных операций
	ОбщийСписокОперацийПоОрганизации  = ПолучитьСписокОперацийЗакрытияМесяцаПоОрганизации();
	
	// Получаем текстовое представление рег. операции для заполнения списка
	ИндексВидаОперации = Перечисления.ВидыРегламентныхОпераций.Индекс(РегламентнаяОперация); 	
	ИмяРегламентнойОперации = РегламентнаяОперация.Метаданные().ЗначенияПеречисления.Получить(ИндексВидаОперации).Имя;
		
	ДатаНачалаПроверки = НачалоМесяца(ПериодПроверки); // Для операций, которые не могут повторяться в более длительных периодах, чем месяц	
	
	// Зачет по НДС
	Если РегламентнаяОперация = Перечисления.ВидыРегламентныхОпераций.РасчетНДСКЗачету Тогда
		Если УчетнаяПолитикаСервер.ПолучитьПериодОтнесенияНДСВЗачет(Организация, ПериодПроверки) = Перечисления.Периодичность.Месяц Тогда
			ДатаНачалаПериодаЗачета = НачалоМесяца(ПериодПроверки);
		Иначе
			ДатаНачалаПериодаЗачета = НачалоКвартала(ПериодПроверки);
		КонецЕсли;	
		
		ДатаНачалаПроверки = ДатаНачалаПериодаЗачета;				
		
		///////////////////////////////////////////////////////////////////////////////
		// Операции налогового учета. Периодичность - год		
	ИначеЕсли РегламентнаяОперация = Перечисления.ВидыРегламентныхОпераций.АмортизацияФАНУ 
		ИЛИ РегламентнаяОперация = Перечисления.ВидыРегламентныхОпераций.РасчетВычетовПоРасходамНаРемонт
		ИЛИ РегламентнаяОперация = Перечисления.ВидыРегламентныхОпераций.РасчетДоходаОтПревышенияСтоимостиВыбывшихФА
		ИЛИ РегламентнаяОперация = Перечисления.ВидыРегламентныхОпераций.СписаниеПриВыбытииВсехФАГруппы
		ИЛИ РегламентнаяОперация = Перечисления.ВидыРегламентныхОпераций.СписаниеСтоимостногоБалансаГруппыМенееМинимума
		ИЛИ РегламентнаяОперация = Перечисления.ВидыРегламентныхОпераций.РасчетВычетовПоПреференциям
		ИЛИ РегламентнаяОперация = Перечисления.ВидыРегламентныхОпераций.РасчетВременныхРазниц
		ИЛИ РегламентнаяОперация = Перечисления.ВидыРегламентныхОпераций.РасчетВычетаПоРеализованнымТоварам
		ИЛИ РегламентнаяОперация = Перечисления.ВидыРегламентныхОпераций.РасчетВычетовПоНалогам
		ИЛИ РегламентнаяОперация = Перечисления.ВидыРегламентныхОпераций.ВключениеВСтоимостныйБалансАктивовУчитываемыхОтдельно
		ИЛИ РегламентнаяОперация = Перечисления.ВидыРегламентныхОпераций.РасчетНалогаНаПрибыль Тогда
		
		ДатаНачалаПроверки = НачалоГода(ПериодПроверки);						
		
	КонецЕсли;		
	
	Если ОбщийСписокОперацийПоОрганизации.НайтиПоЗначению(РегламентнаяОперация) <> Неопределено  Тогда
		СтруктураВыбранныхОперацийПоОрганизации.Вставить(ИмяРегламентнойОперации, ДатаНачалаПроверки);	
	Иначе
		СтруктураВыбранныхОперацийПоСтруктурномуПодразделению.Вставить(ИмяРегламентнойОперации, ДатаНачалаПроверки); 		
	КонецЕсли;  
	
КонецПроцедуры // ЗаполнитьСпискиРегламентныхОперацийПоПериодамПроверки

// Проверяет дублирование рег. операций в заданном периоде
// Врзвращает:
// текст с описанием сведений о дублировании 
// а также перечень дублируемых операций в переменной СписокОперацийКОтмене
Функция ПроверитьПовторОперацииВОтчетномПериоде(ДатаНачалаПериода, ДатаОкончанияПериода, Организация, СтруктураВидовОперации, СтруктурноеПодразделение = Неопределено, ПроверятьСУчетомСП = Ложь, СписокОперацийКОтмене = Неопределено) Экспорт
	
	Если СтруктураВидовОперации.Количество() = 0 Тогда
		Возврат "";
	КонецЕсли;
	Если СписокОперацийКОтмене = Неопределено Тогда
		СписокОперацийКОтмене = Новый СписокЗначений;
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачалаПериода", 	  ДатаНачалаПериода);
	Запрос.УстановитьПараметр("ДатаОкончанияПериода", ДатаОкончанияПериода);
	Запрос.УстановитьПараметр("Организация",  		  Организация);
	Если ПроверятьСУчетомСП Тогда
		Запрос.УстановитьПараметр("СтруктурноеПодразделение",  СтруктурноеПодразделение);
	КонецЕсли;
	
	// временная таблица для выборки документов
	Запрос.Текст = "ВЫБРАТЬ ";	
	Для Каждого ВидОперации Из СтруктураВидовОперации Цикл
		ИмяОперации 	= ВидОперации.Ключ;
		Запрос.Текст 	= Запрос.Текст + "
	               |	ЗакрытиеМесяца." + ИмяОперации + " КАК " + ИмяОперации + ","
	КонецЦикла;
	Запрос.Текст 	= Запрос.Текст + "
				|	ЗакрытиеМесяца.Ссылка,
	            |	ЗакрытиеМесяца.Представление,
				|	ЗакрытиеМесяца.Дата
	            |ПОМЕСТИТЬ ВТ_СписокЗакрытияМесяца
	            |ИЗ
	            |	Документ.ЗакрытиеМесяца КАК ЗакрытиеМесяца
	            |ГДЕ
	            |	ЗакрытиеМесяца.Организация = &Организация " + ?(ПроверятьСУчетомСП, " И ЗакрытиеМесяца.СтруктурноеПодразделение = &СтруктурноеПодразделение ", "")+ "	            
	            |	И ЗакрытиеМесяца.Дата >= &ДатаНачалаПериода
	            |	И ЗакрытиеМесяца.Дата <= &ДатаОкончанияПериода
	            |	И ЗакрытиеМесяца.Проведен
	            |	И (НЕ ЗакрытиеМесяца.ПометкаУдаления); ";
	
	// Строим запрос с учетом группировки по виду операции, чтобы показывать пользвателю дубли в разрезе видов документа
	ПерваяОперация = Истина; // для первой записи не нужно ключевое слово ОБЪЕДИНИТЬ
	Для Каждого ВидОперации из СтруктураВидовОперации Цикл
		ИмяОперации 		 = ВидОперации.Ключ;
		ДатаПроверкиОперации = ВидОперации.Значение;
		Если НЕ ПерваяОперация Тогда
			Запрос.Текст = Запрос.Текст +	"
			            |ОБЪЕДИНИТЬ ВСЕ ";		
			
		КонецЕсли;      		
		ПерваяОперация = Ложь;			
		Запрос.Текст = Запрос.Текст +	" 
	               |ВЫБРАТЬ
	               |	""" + ИмяОперации + """ КАК ВидОперации,
	               |	1 КАК КоличествоОпераций,	               
				   |	ЗакрытиеМесяца.Ссылка КАК Ссылка,
	               |	ЗакрытиеМесяца.Представление  КАК ПредставлениеДокумента
	               |ИЗ
	               |	ВТ_СписокЗакрытияМесяца КАК ЗакрытиеМесяца
	               |ГДЕ
	               |	ЗакрытиеМесяца." + ИмяОперации;
		СтрокаДаты = "ДатаВремя(" + Формат(Год(ДатаПроверкиОперации),"ЧГ=0") + "," + Месяц(ДатаПроверкиОперации) + ","+День(ДатаПроверкиОперации) + ")";
		Запрос.Текст = Запрос.Текст + "			
			|	И ЗакрытиеМесяца.Дата >= " + СтрокаДаты; 		   
	               
	КонецЦикла;
	// добавляем Итоги по виду операции	
	Запрос.Текст = Запрос.Текст + "	               
	               |ИТОГИ
	               |	СУММА(КоличествоОпераций)
	               |ПО
	               |	ВидОперации";
				   
				   
	ВыборкаВидовОпераций = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);	
	ТекстСообщения = "";
	ЗакрытиеМесяцаМД = Документы.ЗакрытиеМесяца.ПустаяСсылка().Метаданные();
	Пока ВыборкаВидовОпераций.Следующий() Цикл

		Если ВыборкаВидовОпераций.КоличествоОпераций > 1 Тогда
			
			ТекстСообщения = ТекстСообщения + СтрШаблон(НСтр("ru = 'Повторение операции: ""%1"" в документах'"), СокрЛП(ЗакрытиеМесяцаМД.Реквизиты[ВыборкаВидовОпераций.ВидОперации].Синоним));
			СписокОперацийКОтмене.Добавить(ВыборкаВидовОпераций.ВидОперации);
			
			// показываем пользователю перечень документов
			ВыборкаДетали = ВыборкаВидовОпераций.Выбрать();
			Пока ВыборкаДетали.Следующий() Цикл
				ТекстСообщения = ТекстСообщения + "
					|   " + СокрЛП(ВыборкаДетали.ПредставлениеДокумента);
			КонецЦикла;			
		   ТекстСообщения = ТекстСообщения + "
			| ";
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТекстСообщения;	
	
КонецФункции

Функция ПолучитьТаблицаРасчетСписанияРБП()
	
	ОписаниеТипаДата      		= Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя));
	ОписаниеТипаЧисла15_2 		= ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2);
	ОписаниеТипаСчетТиповой  	= Новый ОписаниеТипов("ПланСчетовСсылка.Типовой");
	ОписаниеТипаСчетНалоговый  	= Новый ОписаниеТипов("ПланСчетовСсылка.Налоговый");

	ТаблицаРасчетСписанияРБП = Новый ТаблицаЗначений;
	ТаблицаРасчетСписанияРБП.Колонки.Добавить("ОтражатьВБухУчете",	Новый ОписаниеТипов("Булево"));
	ТаблицаРасчетСписанияРБП.Колонки.Добавить("ОтражатьВНалУчете",	Новый ОписаниеТипов("Булево"));
	ТаблицаРасчетСписанияРБП.Колонки.Добавить("ВидУчета",			Новый ОписаниеТипов("СправочникСсылка.ВидыУчетаНУ"));

	ТаблицаРасчетСписанияРБП.Колонки.Добавить("РБП", 				Новый ОписаниеТипов("СправочникСсылка.РасходыБудущихПериодов"));
	ТаблицаРасчетСписанияРБП.Колонки.Добавить("СчетУчетаБУ",    	ОписаниеТипаСчетТиповой);
	ТаблицаРасчетСписанияРБП.Колонки.Добавить("СчетСписанияБУ", 	ОписаниеТипаСчетТиповой);
	ТаблицаРасчетСписанияРБП.Колонки.Добавить("СубконтоЗатратБУ1");
	ТаблицаРасчетСписанияРБП.Колонки.Добавить("СубконтоЗатратБУ2");
	ТаблицаРасчетСписанияРБП.Колонки.Добавить("СубконтоЗатратБУ3");
	
	ТаблицаРасчетСписанияРБП.Колонки.Добавить("СчетУчетаНУ",    	ОписаниеТипаСчетНалоговый);
	ТаблицаРасчетСписанияРБП.Колонки.Добавить("СчетСписанияНУ", 	ОписаниеТипаСчетНалоговый);
	ТаблицаРасчетСписанияРБП.Колонки.Добавить("СубконтоЗатратНУ1");
	ТаблицаРасчетСписанияРБП.Колонки.Добавить("СубконтоЗатратНУ2");
	ТаблицаРасчетСписанияРБП.Колонки.Добавить("СубконтоЗатратНУ3");

	ТаблицаРасчетСписанияРБП.Колонки.Добавить("Сумма",         		ОписаниеТипаЧисла15_2);
	ТаблицаРасчетСписанияРБП.Колонки.Добавить("СуммаНУ",       		ОписаниеТипаЧисла15_2);
	
	ТаблицаРасчетСписанияРБП.Колонки.Добавить("ДатаНачала",   		ОписаниеТипаДата);
	ТаблицаРасчетСписанияРБП.Колонки.Добавить("ДатаОкончания",   	ОписаниеТипаДата);
	ТаблицаРасчетСписанияРБП.Колонки.Добавить("СпособСписания",   	Новый ОписаниеТипов("ПеречислениеСсылка.СпособыСписанияРБП"));
	
	ТаблицаРасчетСписанияРБП.Колонки.Добавить("КоличествоМесяцев",  ОписаниеТипаЧисла15_2);
	ТаблицаРасчетСписанияРБП.Колонки.Добавить("СуммаДоговора",  	ОписаниеТипаЧисла15_2);
	ТаблицаРасчетСписанияРБП.Колонки.Добавить("НачОстаток",  		ОписаниеТипаЧисла15_2);
	ТаблицаРасчетСписанияРБП.Колонки.Добавить("КонОстаток",  		ОписаниеТипаЧисла15_2);

	Возврат ТаблицаРасчетСписанияРБП;
	
КонецФункции

Функция ПодготовитьПараметрыРасчетСписанияРБП(РасчетСписанияРБП, ТаблицаРеквизиты)
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.ТаблицаРасчетСписанияРБП
	
	СписокОбязательныхКолонок = ""
	+ "РБП,"                     		// <СправочникСсылка.РасходыБудущихПериодов>
	+ "СчетУчетаБУ,"                  	// <ПланСчетовСсылка.Типовой>
	+ "СчетСписанияБУ,"               	// <ПланСчетовСсылка.Типовой>
	+ "СубконтоЗатратБУ1,"
	+ "СубконтоЗатратБУ2,"
	+ "СубконтоЗатратБУ3,"
	+ "СчетУчетаНУ,"                  	// <ПланСчетовСсылка.Налоговый>
	+ "СчетСписанияНУ,"               	// <ПланСчетовСсылка.Налоговый>
	+ "СубконтоЗатратНУ1,"
	+ "СубконтоЗатратНУ2,"
	+ "СубконтоЗатратНУ3,"
	+ "ОтражатьВБухУчете,"
	+ "ОтражатьВНалУчете,"
	+ "ВидУчета,"
	+ "Сумма,"                       	// <Число, 15, 2>
	+ "СуммаНУ,"                    	// <Число, 15, 2>
	+ "ДатаНачала,"
	+ "ДатаОкончания,"  
	+ "СпособСписания,"  
	+ "КоличествоМесяцев,"  
	+ "СуммаДоговора,"  
	+ "НачОстаток,"  
	+ "КонОстаток,"  
	;
	
	Параметры.Вставить("ТаблицаРасчетСписанияРБП", 
		ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(РасчетСписанияРБП, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
	+ "Период,"           				// <Дата>
	+ "Организация,"      				// <СправочникСсылка.Организации>
	+ "СтруктурноеПодразделение,"      	// <СправочникСсылка.Организации>
	+ "ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль," 
	+ "УчитыватьКПН," 
	+ "Регистратор"      				// <ДокументСсылка.*>
	;
	
	Если ТипЗнч(ТаблицаРеквизиты) = Тип("ТаблицаЗначений") Тогда
		Если ТаблицаРеквизиты.Колонки.Найти("Объект") <> Неопределено Тогда
			СписокОбязательныхКолонок = СписокОбязательныхКолонок + ",Объект";	
		КонецЕсли;
	КонецЕсли;
	
	Параметры.Вставить("Реквизиты", 
		ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));
	
	Возврат Параметры;
	
КонецФункции // ПодготовитьПараметрыРасчетСписанияРБП()

Функция РазностьДатВДнях(Дата1, Дата2)

	мДлинаСуток = 86400; // в секундах

	Возврат Окр((НачалоДня(Дата1) - НачалоДня(Дата2)) / мДлинаСуток);

КонецФункции

Процедура СообщитьОбОшибкеРегОперации(Знач ТекстСообщения, ДокументСообщения = Неопределено, Отказ = Ложь, РегОперация, ВидРегламентнойОперации, Ошибка = Истина) Экспорт
	
	Отказ = Истина;
	
	Если (ТипЗнч(РегОперация)=Тип("ДокументОбъект.ЗакрытиеМесяца") ИЛИ ТипЗнч(РегОперация)=Тип("ДокументСсылка.ЗакрытиеМесяца"))
		И ЗначениеЗаполнено(РегОперация.Ссылка) Тогда
		ОшибкиСтрока 						 = РегОперация.Ошибки.Добавить();
		ОшибкиСтрока.Описание 				 = ТекстСообщения;
		ОшибкиСтрока.ВидРегламентнойОперации = ВидРегламентнойОперации;
		ОшибкиСтрока.Комментарий 		     = НЕ Ошибка;
	Иначе
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры // СообщитьОбОшибке()

Функция СуммаСписанияЗаМесяц(Реквизиты, СтатьяРасходовБудущихПериодов, СпособСписания, Знач ДатаНачалаСписания, Знач ДатаОкончанияСписания, Сумма)
	
	СтруктураРезультатаРасчета = Новый Структура("СуммаТекущегоМесяца, СуммаПервогоМесяца,
  												|СуммаПоследнегоМесяца, КоличествоМесяцев,
												|СуммаПризнания, ДатаНачалаСписания",
												0,0,0,0,0, Дата(1,1,1));
	Если Сумма =  0 Тогда
		Возврат СтруктураРезультатаРасчета;
	КонецЕсли;

	ДатаНачалаСписания    = НачалоДня(ДатаНачалаСписания);
	ДатаОкончанияСписания = КонецДня(ДатаОкончанияСписания);

	Если НЕ ЗначениеЗаполнено(ДатаНачалаСписания) Тогда
		Возврат СтруктураРезультатаРасчета;

	ИначеЕсли ДатаНачалаСписания > КонецМесяца(Реквизиты.Период) Тогда
		Возврат СтруктураРезультатаРасчета;

	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(ДатаОкончанияСписания) Тогда
		Возврат СтруктураРезультатаРасчета;

	ИначеЕсли ДатаОкончанияСписания < НачалоМесяца(Реквизиты.Период) Тогда
		Возврат СтруктураРезультатаРасчета;

	ИначеЕсли ДатаОкончанияСписания < ДатаНачалаСписания Тогда
		Возврат СтруктураРезультатаРасчета;

	КонецЕсли;

	Если ДатаНачалаСписания < НачалоМесяца(ДатаОкончанияСписания) Тогда

		Если ДатаНачалаСписания > НачалоМесяца(ДатаНачалаСписания) Тогда
			ДатаНачалаПолногоМесяцаСписания = НачалоМесяца(ДобавитьМесяц(ДатаНачалаСписания, 1));
		Иначе
			ДатаНачалаПолногоМесяцаСписания = ДатаНачалаСписания;
		КонецЕсли;

		Если ДатаОкончанияСписания < КонецМесяца(ДатаОкончанияСписания) Тогда
			ДатаОкончанияПолногоМесяцаСписания = КонецМесяца(ДобавитьМесяц(ДатаОкончанияСписания, -1));
		Иначе
			ДатаОкончанияПолногоМесяцаСписания = ДатаОкончанияСписания;
		КонецЕсли;

		Если ДатаОкончанияПолногоМесяцаСписания >= ДатаНачалаПолногоМесяцаСписания Тогда
			КоличествоПолныхМесяцев = (Год(ДатаОкончанияПолногоМесяцаСписания) - Год(ДатаНачалаПолногоМесяцаСписания)) * 12 
									+ Месяц(ДатаОкончанияПолногоМесяцаСписания) - Месяц(ДатаНачалаПолногоМесяцаСписания) + 1;
		Иначе
			КоличествоПолныхМесяцев = 0;
		КонецЕсли;

		ПериодСписанияВ_Днях          = РазностьДатВДнях(ДатаОкончанияСписания, ДатаНачалаСписания)+ 1;
		СуммаСписанияПервогоМесяца    = Окр(Сумма * РазностьДатВДнях(ДатаНачалаПолногоМесяцаСписания, ДатаНачалаСписания) / ПериодСписанияВ_Днях, 2);
		СуммаСписанияПоследнегоМесяца = Окр(Сумма * РазностьДатВДнях(ДатаОкончанияСписания, ДатаОкончанияПолногоМесяцаСписания) / ПериодСписанияВ_Днях, 2);

		Если КоличествоПолныхМесяцев > 0 Тогда
			СуммаСписанияПолногоМесяца = Окр((Сумма - СуммаСписанияПервогоМесяца - СуммаСписанияПоследнегоМесяца) / КоличествоПолныхМесяцев, 2);
		Иначе
			СуммаСписанияПолногоМесяца = 0;
		КонецЕсли;

		СуммаСписанияПоследнегоМесяца = Сумма - СуммаСписанияПервогоМесяца - СуммаСписанияПолногоМесяца * КоличествоПолныхМесяцев;

		Если ДатаНачалаПолногоМесяцаСписания > КонецМесяца(Реквизиты.Период)  Тогда
			СуммаСписания = СуммаСписанияПервогоМесяца;
			
		ИначеЕсли ДатаОкончанияПолногоМесяцаСписания < НачалоМесяца(Реквизиты.Период) Тогда
			СуммаСписания = СуммаСписанияПоследнегоМесяца;
			
		ИначеЕсли КонецМесяца(Реквизиты.Период) = КонецМесяца(ДатаОкончанияСписания) Тогда
			СуммаСписания = СуммаСписанияПолногоМесяца + СуммаСписанияПоследнегоМесяца;
			
		Иначе
			СуммаСписания = СуммаСписанияПолногоМесяца;
		КонецЕсли;

	Иначе
		СуммаСписания = Сумма;
	КонецЕсли;
												
    СтруктураРезультатаРасчета.СуммаТекущегоМесяца 		= СуммаСписания;
	
	СтруктураРезультатаРасчета.СуммаПервогоМесяца 		= СуммаСписанияПервогоМесяца;
	СтруктураРезультатаРасчета.СуммаПоследнегоМесяца 	= СуммаСписанияПоследнегоМесяца;
	СтруктураРезультатаРасчета.КоличествоМесяцев 		= КоличествоПолныхМесяцев;
	СтруктураРезультатаРасчета.ДатаНачалаСписания		= ДатаНачалаСписания;
	СтруктураРезультатаРасчета.СуммаПризнания 			= Сумма;
	
	Возврат СтруктураРезультатаРасчета;

КонецФункции // СуммаСписанияЗаМесяц()

Функция ПодготовитьТаблицуРасчетСписанияРБП(ТаблицаРеквизиты, Отказ) Экспорт
	
	РасчетСписанияРБП = ПолучитьТаблицаРасчетСписанияРБП();
	Параметры = ПодготовитьПараметрыРасчетСписанияРБП(РасчетСписанияРБП, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];
	ТаблицаРасчетСписанияРБП = Параметры.ТаблицаРасчетСписанияРБП;
	
	СписокСчетовРБП = Новый Массив;
	СписокСчетовРБП.Добавить(ПланыСчетов.Типовой.КраткосрочныеРасходыБудущихПериодов);
	СписокСчетовРБП.Добавить(ПланыСчетов.Типовой.ДолгосрочныеРасходыБудущихПериодов);
	
	КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("КонецМесяца", 	Новый Граница(КонецМесяца(Реквизиты.Период), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("СчетУчетаБУ", 	СписокСчетовРБП);	
	Запрос.УстановитьПараметр("СчетУчетаНУ", 	ПланыСчетов.Налоговый.РасходыБудущихПериодов);
	Запрос.УстановитьПараметр("ВидУчетаНУ",  	Справочники.ВидыУчетаНУ.НУ);
	Запрос.УстановитьПараметр("ВидУчетаПР",  	Справочники.ВидыУчетаНУ.ПР);
	Запрос.УстановитьПараметр("Организация", 	Реквизиты.Организация);    
	Запрос.УстановитьПараметр("ВидСубконтоРБП", ПланыВидовХарактеристик.ВидыСубконтоТиповые.РасходыБудущихПериодов);
	Запрос.УстановитьПараметр("СтруктурноеПодразделение", Реквизиты.СтруктурноеПодразделение);	
    		
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеУчета.ВидДанных КАК ВидДанных,
	|	ДанныеУчета.Субконто1 КАК Субконто1,
	|	ПРЕДСТАВЛЕНИЕ(ДанныеУчета.Субконто1) КАК ПредставлениеСубконто1,
	|	ДанныеУчета.Субконто1.ДатаНачалаСписания КАК ДатаНачалаСписания,
	|	ДанныеУчета.Субконто1.ДатаОкончанияСписания КАК ДатаОкончанияСписания,
	|	ДанныеУчета.Субконто1.СпособСписания КАК СпособСписания,
	|	ДанныеУчета.Субконто1.Сумма КАК СуммаПервоначальногоПризнания,
	|	ДанныеУчета.Субконто1.СчетБУ КАК СчетЗатратБУ,
	|	ДанныеУчета.Субконто1.СубконтоБУ1 КАК СубконтоЗатратБУ1,
	|	ДанныеУчета.Субконто1.СубконтоБУ2 КАК СубконтоЗатратБУ2,
	|	ДанныеУчета.Субконто1.СубконтоБУ3 КАК СубконтоЗатратБУ3,
	|	ДанныеУчета.СчетУчетаБУ КАК СчетУчетаБУ,
	|	ДанныеУчета.СуммаОстатокДтБУ КАК СуммаОстатокДтБУ,
	|	ДанныеУчета.СчетУчетаНУ КАК СчетУчетаНУ,
	|	ДанныеУчета.СуммаОстатокДтНУ КАК СуммаОстатокДтНУ,
	|	ДанныеУчета.Субконто1.СчетНУ КАК СчетЗатратНУ,
	|	ДанныеУчета.Субконто1.СубконтоНУ1 КАК СубконтоЗатратНУ1,
	|	ДанныеУчета.Субконто1.СубконтоНУ2 КАК СубконтоЗатратНУ2,
	|	ДанныеУчета.Субконто1.СубконтоНУ3 КАК СубконтоЗатратНУ3,
	|	ДанныеУчета.СуммаОстатокДтПР КАК СуммаОстатокДтПР,
	|	ДанныеУчета.ВидУчетаНУ КАК ВидУчетаНУ,
	|	ДанныеУчета.Субконто1.Код КАК Код
	|ИЗ
	|	(ВЫБРАТЬ
	|		""БУ"" КАК ВидДанных,
	|		ТиповойОстатки.Субконто1 КАК Субконто1,
	|		ТиповойОстатки.Счет КАК СчетУчетаБУ,
	|		ЕСТЬNULL(ТиповойОстатки.СуммаРазвернутыйОстатокДт, 0) КАК СуммаОстатокДтБУ,
	|		NULL КАК СчетУчетаНУ,
	|		0 КАК СуммаОстатокДтНУ,
	|		0 КАК СуммаОстатокДтПР,
	|		NULL КАК ВидУчетаНУ
	|	ИЗ
	|		РегистрБухгалтерии.Типовой.Остатки(
	|				&КонецМесяца,
	|				Счет В (&СчетУчетаБУ),
	|				&ВидСубконтоРБП,
	|				Организация = &Организация
	|					И СтруктурноеПодразделение = &СтруктурноеПодразделение
	|					И НЕ Субконто1.СпособСписания = ЗНАЧЕНИЕ(Перечисление.СпособыСписанияРБП.НеРассчитывать)) КАК ТиповойОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		""НУ"",
	|		НалоговыйОстатки.Субконто1,
	|		NULL,
	|		0,
	|		НалоговыйОстатки.СчетУчетаНУ,
	|		СУММА(НалоговыйОстатки.СуммаОстатокДтНУ),
	|		СУММА(НалоговыйОстатки.СуммаОстатокДтПР),
	|		НалоговыйОстатки.ВидУчета
	|	ИЗ
	|		(ВЫБРАТЬ
	|			НалоговыйОстатки.Субконто1.Сумма КАК Сумма,
	|			НалоговыйОстатки.Субконто1 КАК Субконто1,
	|			НалоговыйОстатки.Счет КАК СчетУчетаНУ,
	|			ВЫБОР
	|				КОГДА НалоговыйОстатки.ВидУчета = &ВидУчетаНУ
	|					ТОГДА НалоговыйОстатки.СуммаОстатокДт
	|				ИНАЧЕ 0
	|			КОНЕЦ КАК СуммаОстатокДтНУ,
	|			ВЫБОР
	|				КОГДА НалоговыйОстатки.ВидУчета В ИЕРАРХИИ (&ВидУчетаПР)
	|					ТОГДА НалоговыйОстатки.СуммаОстатокДт
	|				ИНАЧЕ 0
	|			КОНЕЦ КАК СуммаОстатокДтПР,
	|			НалоговыйОстатки.ВидУчета КАК ВидУчета
	|		ИЗ
	|			РегистрБухгалтерии.Налоговый.Остатки(
	|					&КонецМесяца,
	|					Счет В (&СчетУчетаНУ),
	|					&ВидСубконтоРБП,
	|					Организация = &Организация
	|						И СтруктурноеПодразделение = &СтруктурноеПодразделение
	|						И НЕ Субконто1.СпособСписания = ЗНАЧЕНИЕ(Перечисление.СпособыСписанияРБП.НеРассчитывать)) КАК НалоговыйОстатки) КАК НалоговыйОстатки
	|	
	|	СГРУППИРОВАТЬ ПО
	|		НалоговыйОстатки.СчетУчетаНУ,
	|		НалоговыйОстатки.ВидУчета,
	|		НалоговыйОстатки.Субконто1) КАК ДанныеУчета
	|ИТОГИ
	|	МАКСИМУМ(СпособСписания),
	|	СУММА(СуммаОстатокДтБУ),
	|	СУММА(СуммаОстатокДтНУ),
	|	СУММА(СуммаОстатокДтПР)
	|ПО
	|	Субконто1";
	
	Результат = Запрос.Выполнить();
	
	ВидРО = Перечисления.ВидыРегламентныхОпераций.СписаниеРБПБУ;
	
	ВыборкаРБП = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Субконто1");
	
	Пока ВыборкаРБП.Следующий() Цикл
		
		РБП              = ВыборкаРБП.Субконто1;
		ПредставлениеРБП = СокрЛП(ВыборкаРБП.ПредставлениеСубконто1);
		
		Если Не ЗначениеЗаполнено(РБП) ИЛИ РБП.ПометкаУдаления Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ВыборкаРБП.ДатаНачалаСписания) Или Не ЗначениеЗаполнено(ВыборкаРБП.ДатаОкончанияСписания) Тогда
			ТекстСообщения = СтрШаблон(НСтр("ru = 'В справочнике ""Расходы будущих периодов"" для статьи ""%1"" (код %2) не заполнен период списания расходов!'", КодОсновногоЯзыка), 
						ПредставлениеРБП, ВыборкаРБП.Код);
			СообщитьОбОшибкеРегОперации(ТекстСообщения,ПредставлениеРБП, , Реквизиты.Объект, ВидРО);
			Продолжить;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ВыборкаРБП.СпособСписания) Тогда
			ТекстСообщения = СтрШаблон(НСтр("ru = 'В справочнике ""Расходы будущих периодов"" для статьи ""%1"" (код %2) не заполнен способ списания расходов!'", КодОсновногоЯзыка), 
						ПредставлениеРБП, ВыборкаРБП.Код);
			СообщитьОбОшибкеРегОперации(ТекстСообщения,ПредставлениеРБП, , Реквизиты.Объект, ВидРО);
			Продолжить;
		КонецЕсли;
		
		Если ВыборкаРБП.СпособСписания = Перечисления.СпособыСписанияРБП.Равномерно И Не ЗначениеЗаполнено(ВыборкаРБП.СуммаПервоначальногоПризнания) Тогда
			ТекстСообщения = СтрШаблон(НСтр("ru = 'В справочнике ""Расходы будущих периодов"" для статьи ""%1"" (код %2) не указана сумма затрат!'", КодОсновногоЯзыка), 
						ПредставлениеРБП, ВыборкаРБП.Код);
			СообщитьОбОшибкеРегОперации(ТекстСообщения,ПредставлениеРБП, , Реквизиты.Объект, ВидРО);
			Продолжить;
		КонецЕсли;
		
		Если ВыборкаРБП.СпособСписания = Перечисления.СпособыСписанияРБП.Равномерно И ВыборкаРБП.СуммаПервоначальногоПризнания < ВыборкаРБП.СуммаОстатокДтБУ Тогда
			ТекстСчетУчета = ?(ВыборкаРБП.СчетУчетаБУ <> Null, "( " + ВыборкаРБП.СчетУчетаБУ + " ) ", "");
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Сумма затрат (%1) в бухгалтерском учете %2для статьи ""%3"" (код %4) превышает сумму, указанную в справочнике ""Расходы будущих периодов"" (%5)!'", КодОсновногоЯзыка),
				ВыборкаРБП.СуммаОстатокДтБУ,
				ТекстСчетУчета,
				ПредставлениеРБП,
				ВыборкаРБП.Код,
				ВыборкаРБП.СуммаПервоначальногоПризнания);
			СообщитьОбОшибкеРегОперации(ТекстСообщения,ПредставлениеРБП, , Реквизиты.Объект, ВидРО);
			Продолжить;
		КонецЕсли;
		
		Если ВыборкаРБП.СпособСписания = Перечисления.СпособыСписанияРБП.Равномерно Тогда
			// Для равномерного способа сумма списания определяется исходя из реквизитов справочника
			СтруктураРезультатаРасчета 	= СуммаСписанияЗаМесяц(Реквизиты, ВыборкаРБП.Субконто1, ВыборкаРБП.СпособСписания, ВыборкаРБП.ДатаНачалаСписания, ВыборкаРБП.ДатаОкончанияСписания, ВыборкаРБП.СуммаПервоначальногоПризнания);
			ОбщаяСуммаСписанияБУ 		= Мин(СтруктураРезультатаРасчета.СуммаТекущегоМесяца, ВыборкаРБП.СуммаОстатокДтБУ);
			// Суммы в НУ определяются по данным списания в БУ
			ОбщаяСуммаСписанияНУ = Мин(ОбщаяСуммаСписанияБУ, ВыборкаРБП.СуммаОстатокДтНУ);
			ОбщаяСуммаСписанияПР = ?(ВыборкаРБП.СуммаОстатокДтБУ = 0, ВыборкаРБП.СуммаОстатокДтПР, ВыборкаРБП.СуммаОстатокДтПР * ОбщаяСуммаСписанияБУ/ВыборкаРБП.СуммаОстатокДтБУ);
			ОбщаяСуммаСписанияВР = ОбщаяСуммаСписанияБУ - ОбщаяСуммаСписанияНУ - ОбщаяСуммаСписанияПР;
		Иначе
			// для способа ПоОстаточнойСтоимости сумма списания определяется исходя из остатка счета и оставшегося периода списания			
			СтруктураРезультатаРасчета = СуммаСписанияЗаМесяц(Реквизиты, ВыборкаРБП.Субконто1, ВыборкаРБП.СпособСписания, Макс(ВыборкаРБП.ДатаНачалаСписания, НачалоМесяца(Реквизиты.Период)), ВыборкаРБП.ДатаОкончанияСписания, ВыборкаРБП.СуммаОстатокДтБУ);
			ОбщаяСуммаСписанияБУ 	   = СтруктураРезультатаРасчета.СуммаТекущегоМесяца;
			// Суммы в НУ определяются по остаткам в НУ с учетом ВР по разнице между итоговым списанием за месяц в БУ и НУ
			СтруктураРезультатаРасчетаНУ = СуммаСписанияЗаМесяц(Реквизиты,ВыборкаРБП.Субконто1, ВыборкаРБП.СпособСписания, Макс(ВыборкаРБП.ДатаНачалаСписания, НачалоМесяца(Реквизиты.Период)), ВыборкаРБП.ДатаОкончанияСписания, ВыборкаРБП.СуммаОстатокДтНУ);
			ОбщаяСуммаСписанияНУ = СтруктураРезультатаРасчетаНУ.СуммаТекущегоМесяца;
			
			СтруктураРезультатаРасчетаПР = СуммаСписанияЗаМесяц(Реквизиты, ВыборкаРБП.Субконто1, ВыборкаРБП.СпособСписания, Макс(ВыборкаРБП.ДатаНачалаСписания, НачалоМесяца(Реквизиты.Период)), ВыборкаРБП.ДатаОкончанияСписания, ВыборкаРБП.СуммаОстатокДтПР);
			ОбщаяСуммаСписанияПР = СтруктураРезультатаРасчетаПР.СуммаТекущегоМесяца;						
			
			ОбщаяСуммаСписанияВР = ОбщаяСуммаСписанияБУ - ОбщаяСуммаСписанияНУ - ОбщаяСуммаСписанияПР;
		КонецЕсли;
		
		ПризнакСписанияСуммыОстатка = Ложь;
		Если КонецМесяца(ВыборкаРБП.ДатаОкончанияСписания) = КонецМесяца(Реквизиты.Период) Тогда
			// Если это последний период списания РБП, то списываем всю сумму
			ПризнакСписанияСуммыОстатка = Истина;
		КонецЕсли;	
		
		// Временные разницы
		ИсточникОтнесенияВР  = ?(ОбщаяСуммаСписанияНУ = 0 и ОбщаяСуммаСписанияПР = 0, "БУ","НУ");
		
		ВыборкаПоСчетам = ВыборкаРБП.Выбрать();
		Пока ВыборкаПоСчетам.Следующий() Цикл					
			// Отражение в бухгалтерском учете
			Если ВыборкаПоСчетам.ВидДанных = "БУ" Тогда
				Если ОбщаяСуммаСписанияБУ = 0 Тогда
					Продолжить;
				КонецЕсли;	
				
				СуммаСписанияБУ = ?(ВыборкаРБП.СуммаОстатокДтБУ = 0, ВыборкаПоСчетам.СуммаОстатокДтБУ,ОбщаяСуммаСписанияБУ * ВыборкаПоСчетам.СуммаОстатокДтБУ/ВыборкаРБП.СуммаОстатокДтБУ);
				
				Если ПризнакСписанияСуммыОстатка Тогда
					// списываем в последнем месяце все
					СуммаСписанияБУ = ВыборкаПоСчетам.СуммаОстатокДтБУ;					
				КонецЕсли;	
				
				СчетБУ = ВыборкаПоСчетам.СчетЗатратБУ;				
							
				//Сформировать проводку БУ				
				Если (ВыборкаПоСчетам.СуммаОстатокДтБУ = 0) ИЛИ (СуммаСписанияБУ = 0) Тогда
					Продолжить;
				КонецЕсли;
								
				
				Если Не ЗначениеЗаполнено(СчетБУ) Тогда
					ТекстСообщения = СтрШаблон(НСтр("ru = 'В справочнике ""Расходы будущих периодов"" для статьи ""%1"" (код %2)  не заполнен реквизит ""Счет"" !'", КодОсновногоЯзыка), 
							ПредставлениеРБП, ВыборкаПоСчетам.Код);
					СообщитьОбОшибкеРегОперации(ТекстСообщения,ПредставлениеРБП, , Реквизиты.Объект, ВидРО);
					Продолжить;
				КонецЕсли;
				
				// Запись во вспомогательный регистр сведений
				СтрокаЗаписьРасчетаРБП = ТаблицаРасчетСписанияРБП.Добавить();
				СтрокаЗаписьРасчетаРБП.ОтражатьВБухУчете 	= Истина;
				СтрокаЗаписьРасчетаРБП.СпособСписания		= ВыборкаРБП.СпособСписания;
				СтрокаЗаписьРасчетаРБП.ДатаНачала 			= СтруктураРезультатаРасчета.ДатаНачалаСписания;				
				СтрокаЗаписьРасчетаРБП.ДатаОкончания 		= ВыборкаРБП.ДатаОкончанияСписания;				
				СтрокаЗаписьРасчетаРБП.КоличествоМесяцев	= СтруктураРезультатаРасчета.КоличествоМесяцев;		
				
				СтрокаЗаписьРасчетаРБП.СчетУчетаБУ 			= ВыборкаПоСчетам.СчетУчетаБУ;
				СтрокаЗаписьРасчетаРБП.СчетСписанияБУ 		= СчетБУ;
				СтрокаЗаписьРасчетаРБП.Сумма 				= СуммаСписанияБУ;
				СтрокаЗаписьРасчетаРБП.РБП	 				= РБП;
				СтрокаЗаписьРасчетаРБП.СуммаДоговора 		= ВыборкаРБП.СуммаПервоначальногоПризнания;
				СтрокаЗаписьРасчетаРБП.НачОстаток	 		= ВыборкаПоСчетам.СуммаОстатокДтБУ;
				СтрокаЗаписьРасчетаРБП.КонОстаток 			= ВыборкаПоСчетам.СуммаОстатокДтБУ - СуммаСписанияБУ;
				
				СтрокаЗаписьРасчетаРБП.СубконтоЗатратБУ1	= ВыборкаПоСчетам.СубконтоЗатратБУ1;
				СтрокаЗаписьРасчетаРБП.СубконтоЗатратБУ2	= ВыборкаПоСчетам.СубконтоЗатратБУ2;
				СтрокаЗаписьРасчетаРБП.СубконтоЗатратБУ3	= ВыборкаПоСчетам.СубконтоЗатратБУ3;
				
				// Временные разницы
				Если Реквизиты.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль  и ИсточникОтнесенияВР = "БУ" Тогда
					СуммаСписанияВР = ?(ВыборкаРБП.СуммаОстатокДтБУ = 0, 0, ОбщаяСуммаСписанияВР * ВыборкаПоСчетам.СуммаОстатокДтБУ/ВыборкаРБП.СуммаОстатокДтБУ);
					Если СуммаСписанияВР = 0  Тогда
						Продолжить;
					КонецЕсли;	
					
					СчетНУСоответствующийСчетуБУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", ВыборкаПоСчетам.СчетУчетаБУ), , , Реквизиты.Период);
					Если Не ЗначениеЗаполнено(СчетНУСоответствующийСчетуБУ) Тогда
						ТекстСообщения = СтрШаблон(НСтр("ru = 'Для РБП ""%1"" (код %2) не найдено соответствие для счета БУ %3, разницы между БУ и НУ не рассчитаны'", КодОсновногоЯзыка),
							ПредставлениеРБП,
							ВыборкаПоСчетам.Код,
							ВыборкаПоСчетам.СчетУчетаБУ);
						СообщитьОбОшибкеРегОперации(ТекстСообщения, ПредставлениеРБП, , Реквизиты.Объект, ВидРО);
						Продолжить;
					КонецЕсли;
					
					Если Не ЗначениеЗаполнено(ВыборкаПоСчетам.СчетЗатратНУ) Тогда
						ТекстСообщения = СтрШаблон(НСтр("ru = 'Для РБП ""%1"" (код %2) не указан счет отнесения затрат в НУ. Разницы между БУ и НУ не рассчитаны'", КодОсновногоЯзыка),
							ПредставлениеРБП,
							ВыборкаПоСчетам.Код);
						СообщитьОбОшибкеРегОперации(ТекстСообщения, ПредставлениеРБП, , Реквизиты.Объект, ВидРО);
						Продолжить;
					КонецЕсли;
					
					СтрокаЗаписьРасчетаРБП = ТаблицаРасчетСписанияРБП.Добавить();
					СтрокаЗаписьРасчетаРБП.ОтражатьВНалУчете 	= Истина;
					СтрокаЗаписьРасчетаРБП.ВидУчета 			= Справочники.ВидыУчетаНУ.ВР;

					СтрокаЗаписьРасчетаРБП.СчетУчетаНУ 			= ВыборкаПоСчетам.СчетЗатратНУ;
					СтрокаЗаписьРасчетаРБП.СчетСписанияНУ 		= СчетНУСоответствующийСчетуБУ;
					СтрокаЗаписьРасчетаРБП.СубконтоЗатратНУ1	= ВыборкаПоСчетам.СубконтоЗатратНУ1;
					СтрокаЗаписьРасчетаРБП.СубконтоЗатратНУ2	= ВыборкаПоСчетам.СубконтоЗатратНУ2;
					СтрокаЗаписьРасчетаРБП.СубконтоЗатратНУ3	= ВыборкаПоСчетам.СубконтоЗатратНУ3;
					СтрокаЗаписьРасчетаРБП.СуммаНУ 				= СуммаСписанияВР;
					СтрокаЗаписьРасчетаРБП.РБП	 				= РБП;
					
				КонецЕсли;
			КонецЕсли;
			
			Если ВыборкаПоСчетам.ВидДанных = "НУ" И Реквизиты.УчитыватьКПН Тогда
				
				Если Не ЗначениеЗаполнено(ВыборкаПоСчетам.СчетЗатратНУ) Тогда
					ТекстСообщения = СтрШаблон(НСтр("ru ='Для РБП ""%1"" (код %2) не указан счет отнесения затрат в НУ. Отражение в НУ невозможно.'", КодОсновногоЯзыка), 
							ПредставлениеРБП, ВыборкаПоСчетам.Код);
					СообщитьОбОшибкеРегОперации(ТекстСообщения, ПредставлениеРБП, , Реквизиты.Объект, ВидРО);
					Продолжить;
				КонецЕсли;
				
				ВидУчетаНУ 	= ВыборкаПоСчетам.ВидУчетаНУ;
				СчетНУ 		= ВыборкаПоСчетам.СчетЗатратНУ;
				Если  ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ Тогда
					СуммаСписанияНУ = ?(ВыборкаРБП.СуммаОстатокДтНУ = 0, ВыборкаПоСчетам.СуммаОстатокДтНУ,ОбщаяСуммаСписанияНУ * ВыборкаПоСчетам.СуммаОстатокДтНУ/ВыборкаРБП.СуммаОстатокДтНУ);
					Если СуммаСписанияНУ = 0 Тогда
						Продолжить;
					КонецЕсли;
					Если ПризнакСписанияСуммыОстатка Тогда
						// списываем в последнем месяце все
						СуммаСписанияНУ= ВыборкаПоСчетам.СуммаОстатокДтНУ;
					КонецЕсли;
					
					// Запись во вспомогательный регистр сведений
					СтрокаЗаписьРасчетаРБП = ТаблицаРасчетСписанияРБП.Добавить();
					СтрокаЗаписьРасчетаРБП.ВидУчета				= ВидУчетаНУ;
					СтрокаЗаписьРасчетаРБП.ОтражатьВНалУчете	= Истина;

					СтрокаЗаписьРасчетаРБП.СпособСписания		= ВыборкаРБП.СпособСписания;
					СтрокаЗаписьРасчетаРБП.ДатаНачала 			= СтруктураРезультатаРасчета.ДатаНачалаСписания;				
					СтрокаЗаписьРасчетаРБП.ДатаОкончания 		= ВыборкаРБП.ДатаОкончанияСписания;				
					СтрокаЗаписьРасчетаРБП.КоличествоМесяцев	= СтруктураРезультатаРасчета.КоличествоМесяцев;		
					
					СтрокаЗаписьРасчетаРБП.СчетУчетаНУ 			= ВыборкаПоСчетам.СчетУчетаНУ;
					СтрокаЗаписьРасчетаРБП.СубконтоЗатратНУ1	= ВыборкаПоСчетам.СубконтоЗатратНУ1;
					СтрокаЗаписьРасчетаРБП.СубконтоЗатратНУ2	= ВыборкаПоСчетам.СубконтоЗатратНУ2;
					СтрокаЗаписьРасчетаРБП.СубконтоЗатратНУ3	= ВыборкаПоСчетам.СубконтоЗатратНУ3;

					СтрокаЗаписьРасчетаРБП.СчетСписанияНУ 		= СчетНУ;
					СтрокаЗаписьРасчетаРБП.СуммаНУ 				= СуммаСписанияНУ;
					СтрокаЗаписьРасчетаРБП.РБП	 				= РБП;
					СтрокаЗаписьРасчетаРБП.СуммаДоговора 		= ВыборкаРБП.СуммаПервоначальногоПризнания;
					
					СтрокаЗаписьРасчетаРБП.НачОстаток	 		= ВыборкаПоСчетам.СуммаОстатокДтНУ;
					СтрокаЗаписьРасчетаРБП.КонОстаток 			= ВыборкаПоСчетам.СуммаОстатокДтНУ - СуммаСписанияНУ;
				
					// списываем Постоянную разницу 
				Иначе
					СуммаСписанияПР = ?(ВыборкаРБП.СуммаОстатокДтПР = 0, ВыборкаПоСчетам.СуммаОстатокДтПР,ОбщаяСуммаСписанияПР * ВыборкаПоСчетам.СуммаОстатокДтПР/ВыборкаРБП.СуммаОстатокДтПР);										
										
					Если СуммаСписанияПР = 0 Тогда
						Продолжить;
					КонецЕсли;	
					
					Если ПризнакСписанияСуммыОстатка Тогда
						// списываем в последнем месяце все
						СуммаСписанияПР = ВыборкаПоСчетам.СуммаОстатокДтПР;					
					КонецЕсли;	
					
					// Запись во вспомогательный регистр сведений
					СтрокаЗаписьРасчетаРБП = ТаблицаРасчетСписанияРБП.Добавить();
					СтрокаЗаписьРасчетаРБП.ВидУчета				= ВидУчетаНУ;
					СтрокаЗаписьРасчетаРБП.ОтражатьВНалУчете	= Истина;
					СтрокаЗаписьРасчетаРБП.СпособСписания		= ВыборкаРБП.СпособСписания;
					СтрокаЗаписьРасчетаРБП.ДатаНачала 			= СтруктураРезультатаРасчета.ДатаНачалаСписания;				
					СтрокаЗаписьРасчетаРБП.ДатаОкончания 		= ВыборкаРБП.ДатаОкончанияСписания;				
					СтрокаЗаписьРасчетаРБП.КоличествоМесяцев	= СтруктураРезультатаРасчета.КоличествоМесяцев;		
					
					СтрокаЗаписьРасчетаРБП.СчетУчетаНУ 			= ВыборкаПоСчетам.СчетУчетаНУ;
					
					СтрокаЗаписьРасчетаРБП.СубконтоЗатратНУ1	= ВыборкаПоСчетам.СубконтоЗатратНУ1;
					СтрокаЗаписьРасчетаРБП.СубконтоЗатратНУ2	= ВыборкаПоСчетам.СубконтоЗатратНУ2;
					СтрокаЗаписьРасчетаРБП.СубконтоЗатратНУ3	= ВыборкаПоСчетам.СубконтоЗатратНУ3;

					СтрокаЗаписьРасчетаРБП.СчетСписанияНУ 		= СчетНУ;
					СтрокаЗаписьРасчетаРБП.СуммаНУ 				= СуммаСписанияПР;
					СтрокаЗаписьРасчетаРБП.РБП 				= РБП;
					СтрокаЗаписьРасчетаРБП.СуммаДоговора 		= ВыборкаРБП.СуммаПервоначальногоПризнания;
					СтрокаЗаписьРасчетаРБП.НачОстаток	 		= ВыборкаПоСчетам.СуммаОстатокДтПР;
					СтрокаЗаписьРасчетаРБП.КонОстаток 			= ВыборкаПоСчетам.СуммаОстатокДтПР - СуммаСписанияПР;
				КонецЕсли;	// Если  ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ Тогда
				
				// Временные разницы
				Если Реквизиты.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль И ИсточникОтнесенияВР = "НУ" Тогда
					СуммаСписанияВР = ?((ВыборкаРБП.СуммаОстатокДтПР + ВыборкаРБП.СуммаОстатокДтНУ) = 0,0, ОбщаяСуммаСписанияВР * (ВыборкаПоСчетам.СуммаОстатокДтПР + ВыборкаПоСчетам.СуммаОстатокДтНУ)/(ВыборкаРБП.СуммаОстатокДтПР + ВыборкаРБП.СуммаОстатокДтНУ));
					
					Если СуммаСписанияВР = 0 Тогда
						Продолжить;
					КонецЕсли;
					
					// Запись во вспомогательный регистр сведений
					СтрокаЗаписьРасчетаРБП = ТаблицаРасчетСписанияРБП.Добавить();
					СтрокаЗаписьРасчетаРБП.ВидУчета				= ВидУчетаНУ;
					СтрокаЗаписьРасчетаРБП.ОтражатьВНалУчете	= Истина;
					СтрокаЗаписьРасчетаРБП.СпособСписания		= ВыборкаРБП.СпособСписания;
					СтрокаЗаписьРасчетаРБП.ДатаНачала 			= СтруктураРезультатаРасчета.ДатаНачалаСписания;				
					СтрокаЗаписьРасчетаРБП.ДатаОкончания 		= ВыборкаРБП.ДатаОкончанияСписания;				
					СтрокаЗаписьРасчетаРБП.КоличествоМесяцев	= СтруктураРезультатаРасчета.КоличествоМесяцев;		
					
					СтрокаЗаписьРасчетаРБП.СчетУчетаНУ 			= ВыборкаПоСчетам.СчетУчетаНУ;
					СтрокаЗаписьРасчетаРБП.СчетСписанияНУ 		= СчетНУ;
					СтрокаЗаписьРасчетаРБП.Сумма 				= СуммаСписанияВР;
					СтрокаЗаписьРасчетаРБП.РБП	 				= РБП;
					СтрокаЗаписьРасчетаРБП.СуммаДоговора 		= ВыборкаРБП.СуммаПервоначальногоПризнания;
					СтрокаЗаписьРасчетаРБП.НачОстаток	 		= ВыборкаРБП.СуммаОстатокДтБУ - (ВыборкаРБП.СуммаОстатокДтПР + ВыборкаРБП.СуммаОстатокДтНУ);
					СтрокаЗаписьРасчетаРБП.КонОстаток 			= СтрокаЗаписьРасчетаРБП.НачОстаток - СуммаСписанияВР;
				КонецЕсли;	// Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ  и ИсточникОтнесенияВР = "НУ" Тогда

			КонецЕсли; // Если ВыборкаПоСчетам.ВидДанных = "НУ" и СтруктураШапкиДокумента.УчитыватьКПН Тогда												
			
		КонецЦикла; // Выборка по счетам		
		
	КонецЦикла; // Выборка по Субконто1
	
	Возврат ТаблицаРасчетСписанияРБП;
	
КонецФункции // ПодготовитьТаблицуРасчетСписанияРБП()

Процедура СформироватьДвиженияРасчетСписанияРБП(РасчетСписанияРБП, ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Параметры = ПодготовитьПараметрыРасчетСписанияРБП(РасчетСписанияРБП, ТаблицаРеквизиты);
	
	Если Параметры.ТаблицаРасчетСписанияРБП.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = Параметры.Реквизиты[0];
	
	КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	
	Для каждого СтрокаРасчетРБП Из Параметры.ТаблицаРасчетСписанияРБП Цикл
		
		Если СтрокаРасчетРБП.ОтражатьВБухУчете Тогда
			
			Проводка              = Движения.Типовой.Добавить();
			Проводка.Период       = Реквизиты.Период;
			Проводка.Организация  = Реквизиты.Организация;
			Проводка.СчетДт       = СтрокаРасчетРБП.СчетСписанияБУ;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаРасчетРБП.СубконтоЗатратБУ1);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаРасчетРБП.СубконтоЗатратБУ2);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтрокаРасчетРБП.СубконтоЗатратБУ3);
			Проводка.СчетКт       = СтрокаРасчетРБП.СчетУчетаБУ;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтрокаРасчетРБП.РБП);
			Проводка.Сумма        = СтрокаРасчетРБП.Сумма;
			Проводка.Содержание   = СтрШаблон(НСтр("ru = 'РБП за %1'", КодОсновногоЯзыка), ПредставлениеПериода(НачалоМесяца(Реквизиты.Период), КонецМесяца(Реквизиты.Период), "Л=" + КодОсновногоЯзыка + "; ФП=Истина"));
			Проводка.НомерЖурнала = НСтр("ru = 'ФР'", КодОсновногоЯзыка);
			Проводка.ВидРегламентнойОперации = Перечисления.ВидыРегламентныхОпераций.СписаниеРБПБУ;
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(Проводка, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);
			
		КонецЕсли;
		
		Если СтрокаРасчетРБП.ОтражатьВНалУчете Тогда
			
			Проводка             = Движения.Налоговый.Добавить();
			Проводка.Период      = Реквизиты.Период;
			Проводка.Организация = Реквизиты.Организация;
			Проводка.СчетДт      = СтрокаРасчетРБП.СчетСписанияНУ;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаРасчетРБП.СубконтоЗатратНУ1);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаРасчетРБП.СубконтоЗатратНУ2);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтрокаРасчетРБП.СубконтоЗатратНУ3);
			Проводка.СчетКт      = СтрокаРасчетРБП.СчетУчетаНУ;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтрокаРасчетРБП.РБП);
			Проводка.Сумма       = СтрокаРасчетРБП.СуммаНУ;
			ПроцедурыНалоговогоУчета.ВидУчетаНУ(Проводка,  СтрокаРасчетРБП.ВидУчета);
			
			Если СтрокаРасчетРБП.ВидУчета = Справочники.ВидыУчетаНУ.ВР Тогда
				Проводка.Содержание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Временная разница по РБП (%1) за %2'", КодОсновногоЯзыка),
					СтрокаРасчетРБП.РБП,
					ПредставлениеПериода(НачалоМесяца(Реквизиты.Период), КонецМесяца(Реквизиты.Период), "Л=" + КодОсновногоЯзыка + "; ФП=Истина"));
			Иначе
				Проводка.Содержание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'РБП за %1'", КодОсновногоЯзыка),
					ПредставлениеПериода(НачалоМесяца(Реквизиты.Период), КонецМесяца(Реквизиты.Период), "Л=" + КодОсновногоЯзыка + "; ФП=Истина"));
			КонецЕсли;
			
			Проводка.НомерЖурнала = НСтр("ru = 'ФР'", КодОсновногоЯзыка);
			Проводка.ВидРегламентнойОперации = Перечисления.ВидыРегламентныхОпераций.СписаниеРБПБУ;
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(Проводка, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);
			
		КонецЕсли;

	КонецЦикла;
	
	Движения.Типовой.Записать(Ложь);
	Движения.Налоговый.Записать(Ложь);
	
КонецПроцедуры // СформироватьДвиженияРасчетСписанияРБП()

Функция ПодготовитьПараметрыТаблицаРеквизиты(ТаблицаРеквизиты)
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
	+ "Период,"       // <Дата>
	+ "Организация,"  // <СправочникСсылка.Организации>
	+ "СтруктурноеПодразделение,"  // <СправочникСсылка.ПодразделенияОрганизаций>
	+ "Регистратор"   // <ДокументСсылка.*>
	;
	
	Если ТипЗнч(ТаблицаРеквизиты) = Тип("ТаблицаЗначений") Тогда
		Если ТаблицаРеквизиты.Колонки.Найти("Объект") <> Неопределено Тогда
			СписокОбязательныхКолонок = СписокОбязательныхКолонок + ",Объект";	
		КонецЕсли;
	КонецЕсли;
	
	Параметры.Вставить("Реквизиты", 
		ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));
	
	Возврат Параметры;
	
КонецФункции // ПодготовитьПараметрыТаблицаРеквизиты()

Процедура ЗаписьВоВспомогательныеРегистрыСведений(Движения, ТаблицаДвижений, ТаблицаРеквизиты,
										ВспомогательныйРегистр, СтрокаГруппировки = Неопределено, СтрокаСуммирования = Неопределено) Экспорт
	
	Если ТаблицаДвижений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ВспомогательныйРасчет = Движения[ВспомогательныйРегистр];
	Параметры = ПодготовитьПараметрыТаблицаРеквизиты(ТаблицаРеквизиты);
	
	Если Параметры.Реквизиты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = Параметры.Реквизиты[0];
	
	Если ТаблицаДвижений.Колонки.Найти("Организация") = Неопределено Тогда
		ТаблицаДвижений.Колонки.Добавить("Организация",
			Новый ОписаниеТипов("СправочникСсылка.Организации"));
	КонецЕсли;
		
		
	Если ТаблицаДвижений.Колонки.Найти("СтруктурноеПодразделение") = Неопределено Тогда
		ТаблицаДвижений.Колонки.Добавить("СтруктурноеПодразделение",
			Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	КонецЕсли;
	
	Если ТаблицаДвижений.Колонки.Найти("ПериодРасчета") = Неопределено Тогда
		ТаблицаДвижений.Колонки.Добавить("ПериодРасчета",
		Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	КонецЕсли;
	
	
	Если ТаблицаДвижений.Колонки.Найти("Организация") = Неопределено Тогда
		ТаблицаДвижений.Колонки.Добавить("Организация",
			Новый ОписаниеТипов("СправочникСсылка.Организации"));
	КонецЕсли;

	ТаблицаДвижений.ЗаполнитьЗначения(Реквизиты.Организация, "Организация");
	
	ТаблицаДвижений.ЗаполнитьЗначения(Реквизиты.Период, "ПериодРасчета");

	ТаблицаДвижений.ЗаполнитьЗначения(Реквизиты.СтруктурноеПодразделение, "СтруктурноеПодразделение");

	Если СтрокаГруппировки <> Неопределено И СтрокаСуммирования <> Неопределено Тогда
		ТаблицаДвижений.Свернуть(СтрокаГруппировки, СтрокаСуммирования);
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из ТаблицаДвижений Цикл
		ВспомогательныйРасчетЗапись = ВспомогательныйРасчет.Добавить();
		Если  НЕ СтрокаТаблицы.ВидУчета = Справочники.ВидыУчетаНУ.ВР Тогда
			
			ВспомогательныйРасчетЗапись.Статья  = СтрокаТаблицы.РБП;
			ВспомогательныйРасчетЗапись.СтруктурноеПодразделение  = Реквизиты.СтруктурноеПодразделение;
			ЗаполнитьЗначенияСвойств(ВспомогательныйРасчетЗапись, СтрокаТаблицы);
			
			Если СтрокаТаблицы.ОтражатьВБухУчете Тогда
				ВспомогательныйРасчетЗапись.СчетУчета = СтрокаТаблицы.СчетУчетаБУ;
				ВспомогательныйРасчетЗапись.СчетСписания = СтрокаТаблицы.СчетСписанияБУ;
			Иначе
				ВспомогательныйРасчетЗапись.СчетУчета = СтрокаТаблицы.СчетУчетаНУ;
				ВспомогательныйРасчетЗапись.СчетСписания = СтрокаТаблицы.СчетСписанияНУ;
				ВспомогательныйРасчетЗапись.Сумма = СтрокаТаблицы.СуммаНУ;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ВспомогательныйРасчет.Записать(Ложь);
	
КонецПроцедуры // ЗаписьВоВспомогательныеРегистрыСведений()

Функция ПодготовитьПараметрыЗакрытияНДСПоСП(ТаблицаЗакрытияНДСПоСП, ТаблицаРеквизиты) 
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.ТаблицаРасчетСписанияРБП
	
	СписокОбязательныхКолонок = ""
	+ "Счет,"                  	// <ПланСчетовСсылка.Типовой>
	+ "СчетНУ,"                	// <ПланСчетовСсылка.Налоговый>
	+ "Субконто1,"
	+ "Субконто2,"
	+ "Субконто3,"
	+ "СтруктурноеПодразделение,"
	+ "Организация,"
	+ "Сумма,"                 	// <Число, 15, 2>
	+ "ДтПроводка,"            	// <Число, 1, 0>
	;
	
	Параметры.Вставить("ТаблицаЗакрытияНДСПоСП", 
		ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаЗакрытияНДСПоСП, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
	+ "Период,"           				// <Дата>
	+ "Организация,"      				// <СправочникСсылка.Организации>
	+ "ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль," 
	+ "УчитыватьКПН," 
	+ "Регистратор"      				// <ДокументСсылка.*>
	;
	
	Если ТипЗнч(ТаблицаРеквизиты) = Тип("ТаблицаЗначений") Тогда
		Если ТаблицаРеквизиты.Колонки.Найти("Объект") <> Неопределено Тогда
			СписокОбязательныхКолонок = СписокОбязательныхКолонок + ",Объект";	
		КонецЕсли;
	КонецЕсли;
	
	Параметры.Вставить("Реквизиты", 
		ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));
	
	Возврат Параметры;
	
КонецФункции // ПодготовитьПараметрыРасчетСписанияРБП()

Функция ПолучитьТаблицуЗакрытияНДСПоСП()
	
	ОписаниеТипаЧисла15_2 		= ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2);
	ОписаниеТипаСчетТиповой  	= Новый ОписаниеТипов("ПланСчетовСсылка.Типовой");
	ОписаниеТипаСчетНалоговый  	= Новый ОписаниеТипов("ПланСчетовСсылка.Налоговый");

	ТаблицаЗакрытияНДСПоСП = Новый ТаблицаЗначений;
	ТаблицаЗакрытияНДСПоСП.Колонки.Добавить("Счет",    					ОписаниеТипаСчетТиповой);
	ТаблицаЗакрытияНДСПоСП.Колонки.Добавить("СчетНУ",    				ОписаниеТипаСчетНалоговый);
	ТаблицаЗакрытияНДСПоСП.Колонки.Добавить("Субконто1");
	ТаблицаЗакрытияНДСПоСП.Колонки.Добавить("Субконто2");
	ТаблицаЗакрытияНДСПоСП.Колонки.Добавить("Субконто3");
	ТаблицаЗакрытияНДСПоСП.Колонки.Добавить("ДтПроводка",				ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(1,0));
	ТаблицаЗакрытияНДСПоСП.Колонки.Добавить("СтруктурноеПодразделение",	Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	ТаблицаЗакрытияНДСПоСП.Колонки.Добавить("Организация",	            Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаЗакрытияНДСПоСП.Колонки.Добавить("Сумма",         			ОписаниеТипаЧисла15_2);

	Возврат ТаблицаЗакрытияНДСПоСП;
	
КонецФункции

Функция ПодготовитьТаблицуЗакрытияНДСПоСП(ТаблицаРеквизиты, Отказ)   Экспорт
		
	ТаблицаЗакрытияНДСПоСП = ПолучитьТаблицуЗакрытияНДСПоСП();

	Параметры = ПодготовитьПараметрыЗакрытияНДСПоСП(ТаблицаЗакрытияНДСПоСП, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];
	ТаблицаЗакрытияНДСПоСП = Параметры.ТаблицаЗакрытияНДСПоСП;

	Если Константы.ПоддержкаРаботыСоСтруктурнымиПодразделениями.Получить() Тогда
		// Получим список Организаций, Налогоплательщиком для которых является наша организация
		СписокСтруктурныхЕдиниц = ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.СформироватьСписокОрганизацийНалогоплательщика(Реквизиты.Организация, Перечисления.РазделыНалоговогоУчета.НДС)
	Иначе
		СписокСтруктурныхЕдиниц = Новый СписокЗначений;
		СписокСтруктурныхЕдиниц.Добавить(Реквизиты.Организация);		
	КонецЕсли;
	
	СписокСчетовНДС = Новый СписокЗначений();
	СписокСчетовНДС.Добавить(ПланыСчетов.Типовой.НалогНаДобавленнуюСтоимость);
	СписокСчетовНДС.Добавить(ПланыСчетов.Типовой.НалогНаДобавленнуюСтоимостьКВозмещению);
	СписокСчетовНДС.Добавить(ПланыСчетов.Типовой.ИзлишнеУплаченныеВБюджетСуммыНДС);
	
	ГоловноеПодразделение = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
	Запрос.УстановитьПараметр("ГоловноеСтруктурноеПодразделение", ГоловноеПодразделение);
	Запрос.УстановитьПараметр("СписокСтруктурныхЕдиниц", СписокСтруктурныхЕдиниц);
	Запрос.УстановитьПараметр("СчетаНДС", СписокСчетовНДС);
	Запрос.УстановитьПараметр("ДатаКон", Новый Граница(КонецМесяца(Реквизиты.Период), ВидГраницы.Включая));
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТиповойОстатки.Счет,
	               |	ТиповойОстатки.Субконто1,
	               |	ТиповойОстатки.Субконто2,
	               |	ТиповойОстатки.Субконто3,
	               |	ТиповойОстатки.Организация,
	               |	ТиповойОстатки.СтруктурноеПодразделение,
	               |	ТиповойОстатки.СуммаОстаток КАК Сумма,
	               |	ВЫБОР
	               |		КОГДА ТиповойОстатки.Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Типовой.НалогНаДобавленнуюСтоимость))
	               |			ТОГДА 0
	               |		ИНАЧЕ 1
	               |	КОНЕЦ КАК ДтПроводка,
	               |	ТиповойОстатки.Счет.СчетНУ КАК СчетНУ
	               |ИЗ
	               |	РегистрБухгалтерии.Типовой.Остатки(
	               |			&ДатаКон,
	               |			Счет В ИЕРАРХИИ (&СчетаНДС),
	               |			,
	               |			Организация В (&СписокСтруктурныхЕдиниц)
	               |				И СтруктурноеПодразделение <> &ГоловноеСтруктурноеПодразделение) КАК ТиповойОстатки";
						  
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
		        НоваяСтрока =  ТаблицаЗакрытияНДСПоСП.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			КонецЦикла;
	КонецЕсли;	
	
	Возврат   ТаблицаЗакрытияНДСПоСП;
	
КонецФункции

Процедура СформироватьДвиженияЗакрытияНДСПоСП(ТаблицаЗакрытияНДСПоСП, ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Параметры = ПодготовитьПараметрыЗакрытияНДСПоСП(ТаблицаЗакрытияНДСПоСП, ТаблицаРеквизиты);
	
	Если Параметры.ТаблицаЗакрытияНДСПоСП.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты       = Параметры.Реквизиты[0];
	
	КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	
	ГоловноеПодразделение = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
	
	Для Каждого СтрокаРасчетНДС Из Параметры.ТаблицаЗакрытияНДСПоСП Цикл
		
		Проводка             = Движения.Типовой.Добавить();
		Проводка.Период      = Реквизиты.Период;				
		Проводка.СчетДт      = СтрокаРасчетНДС.Счет;							
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаРасчетНДС.Субконто1);			
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаРасчетНДС.Субконто2);			
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтрокаРасчетНДС.Субконто3);			
		
		Проводка.СчетКт    = СтрокаРасчетНДС.Счет;			
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт, 1, СтрокаРасчетНДС.Субконто1);			
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт, 2, СтрокаРасчетНДС.Субконто2);			
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт, 3, СтрокаРасчетНДС.Субконто3);			
		
		Проводка.Содержание               = НСтр("ru = 'Перенос начисленных сумм НДС на головное предприятие'", КодОсновногоЯзыка);				
		Проводка.ВидРегламентнойОперации  = Перечисления.ВидыРегламентныхОпераций.РасчетНДСКЗачету;	
		
		// По 1420 проводка в Дт 1420 головного подразделения НП
		Если СтрокаРасчетНДС.ДтПроводка = 1 Тогда
			Проводка.Сумма                = СтрокаРасчетНДС.Сумма;
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(Проводка, ГоловноеПодразделение,
			СтрокаРасчетНДС.СтруктурноеПодразделение);			
		Иначе											
			Проводка.Сумма                    = -СтрокаРасчетНДС.Сумма;
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(Проводка, СтрокаРасчетНДС.СтруктурноеПодразделение,
			ГоловноеПодразделение);
		КонецЕсли;				
		
		Проводка.Организация              = СтрокаРасчетНДС.Организация;				
		
		// по налоговому учету
		Если Реквизиты.УчитыватьКПН И Реквизиты.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль Тогда
			// трансляция счетов
			
			Если Не ЗначениеЗаполнено(СтрокаРасчетНДС.СчетНУ) Тогда
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Для счета %1 не указан соответствующий ему счет налогового учета.'", ОбщегоНазначения.КодОсновногоЯзыка()), СтрокаРасчетНДС.Счет.Код);
				ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации(ТекстСообщения, , Отказ, Реквизиты.Объект, Перечисления.ВидыРегламентныхОпераций.РасчетНДСКЗачету);
				Продолжить;
			КонецЕсли;
			
			Проводка	= Движения.Налоговый.Добавить();
			Проводка.Период                   = Реквизиты.Период;
			Проводка.Организация              = СтрокаРасчетНДС.Организация;
			Проводка.СчетДт                   = СтрокаРасчетНДС.СчетНУ;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаРасчетНДС.Субконто1);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаРасчетНДС.Субконто2);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтрокаРасчетНДС.Субконто3);
			
			Проводка.СчетКт                   = СтрокаРасчетНДС.СчетНУ;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт, 1, СтрокаРасчетНДС.Субконто1);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт, 2, СтрокаРасчетНДС.Субконто2);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт, 3, СтрокаРасчетНДС.Субконто3);
			
			Проводка.Содержание               = НСтр("ru = 'Перенос начисленных сумм НДС на головное предприятие'", КодОсновногоЯзыка);
			Проводка.ВидРегламентнойОперации  = Перечисления.ВидыРегламентныхОпераций.РасчетНДСКЗачету;
			// По 1420 проводка в Дт 1420 головного подразделения НП
			Если СтрокаРасчетНДС.ДтПроводка = 1 Тогда
				Проводка.Сумма                = СтрокаРасчетНДС.Сумма;
				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(Проводка, ГоловноеПодразделение,
				СтрокаРасчетНДС.СтруктурноеПодразделение);
			Иначе
				Проводка.Сумма                = -СтрокаРасчетНДС.Сумма;
				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(Проводка, СтрокаРасчетНДС.СтруктурноеПодразделение,
				ГоловноеПодразделение);
			КонецЕсли;
			Проводка.ВидУчетаДт = Справочники.ВидыУчетаНУ.НУ;
			Проводка.ВидУчетаКт = Справочники.ВидыУчетаНУ.НУ;
		КонецЕсли;
	КонецЦикла;
	
	Движения.Типовой.Записать(Ложь);
	
	Если Реквизиты.УчитыватьКПН И Реквизиты.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль Тогда
		Движения.Налоговый.Записать(Ложь);
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьДолюОблагаемогоОборота(Реквизиты, ДатаНачалаПериода) Экспорт
	
	// Долю облагаемого оборота рассчитываем как 	
	// отношение (Облагаемого оборота по реализации с учетом корректировок, к общему обороту по реализации)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВЫБОР
	               |		КОГДА (НЕ НДСОбороты.СтавкаНДС.ДляОсвобожденногоОборота И НЕ НДСОбороты.СтавкаНДС.МестоРеализацииНеРК)
	               |			ТОГДА ЕСТЬNULL(НДСОбороты.ОборотПоРеализацииОборот, 0)
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК ОблагаемыйОборот,
	               |	НДСОбороты.ОборотПоРеализацииОборот КАК ОбщийОборотПоРеализации
	               |ИЗ
	               |	РегистрНакопления.НДС.Обороты(
	               |			&ДатаНачала,
	               |			&ДатаОкончания,
	               |			,
	               |			Налогоплательщик = &Налогоплательщик	               
				   |				И (НЕ ВидНалогаНДС = ЗНАЧЕНИЕ(Перечисление.ВидыНДС.НДСМетодомЗачета))
	               |				И (НЕ ВидНалогаНДС = ЗНАЧЕНИЕ(Перечисление.ВидыНДС.НДСОблагаемыйИмпорт))) КАК НДСОбороты	               
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
				   |	ВЫБОР
	               |		КОГДА (НЕ КорректировкаНДСОбороты.СтавкаНДС.ДляОсвобожденногоОборота И НЕ КорректировкаНДСОбороты.СтавкаНДС.МестоРеализацииНеРК)
	               |			ТОГДА ЕСТЬNULL(КорректировкаНДСОбороты.СуммаКорректировкиОборотаОборот, 0)
	               |		ИНАЧЕ 0
	               |	КОНЕЦ, 	               
	               |	ЕСТЬNULL(КорректировкаНДСОбороты.СуммаКорректировкиОборотаОборот, 0)
	               |ИЗ
	               |	РегистрНакопления.КорректировкаНДС.Обороты(
	               |			&ДатаНачала,
	               |			&ДатаОкончания,
	               |			,
	               |			Налогоплательщик = &Налогоплательщик	               
				   |				И (НЕ ВидНалогаНДС = ЗНАЧЕНИЕ(Перечисление.ВидыНДС.НДСМетодомЗачета))
	               |				И (НЕ ВидНалогаНДС = ЗНАЧЕНИЕ(Перечисление.ВидыНДС.НДСОблагаемыйИмпорт))) КАК КорректировкаНДСОбороты
	               |ИТОГИ
	               |	СУММА(ОблагаемыйОборот),
	               |	СУММА(ОбщийОборотПоРеализации)
	               |ПО
	               |	ОБЩИЕ";
	
	Запрос.УстановитьПараметр("ДатаНачала", 		ДатаНачалаПериода);
	Запрос.УстановитьПараметр("ДатаОкончания", 		КонецМесяца(Реквизиты.Период));
	Запрос.УстановитьПараметр("Налогоплательщик", 	Реквизиты.Организация);
	
	ДоляОблагаемогоОборота = 1;
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		ДоляОблагаемогоОборота = ?(Выборка.ОбщийОборотПоРеализации <> 0, Выборка.ОблагаемыйОборот/Выборка.ОбщийОборотПоРеализации, 1);
		ТекстКомментарияРасчета = СтрШаблон(НСтр("ru = 'Зачет по НДС. Доля облагаемого оборота в общем обороте: %1
			|				Облагаемый оборот по реализации = %2
			|				Общий оборот по реализации = %3'", ОбщегоНазначения.КодОсновногоЯзыка()),
			СокрЛП(Окр(ДоляОблагаемогоОборота, 2)),
			СокрЛП(Выборка.ОблагаемыйОборот),
			СокрЛП(Выборка.ОбщийОборотПоРеализации));
		
		ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации(ТекстКомментарияРасчета, , , Реквизиты.Объект, Перечисления.ВидыРегламентныхОпераций.РасчетНДСКЗачету, Ложь);
	КонецЕсли;
	
	Возврат ДоляОблагаемогоОборота;
	
КонецФункции // ПолучитьДолюОблагаемогоОборота

Функция ПолучитьТаблицуПоОтсроченномуНДС()
	
	ОписаниеТипаЧисла15_2 		= ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2);
	ОписаниеТипаСчетТиповой  	= Новый ОписаниеТипов("ПланСчетовСсылка.Типовой");

	ТаблицаПоОтсроченномуНДС = Новый ТаблицаЗначений;
	ТаблицаПоОтсроченномуНДС.Колонки.Добавить("ВидОперацииПоступления", Новый ОписаниеТипов("СправочникСсылка.ВидыПоступления"));
	ТаблицаПоОтсроченномуНДС.Колонки.Добавить("ВидНалогаНДС", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыНДС"));
	ТаблицаПоОтсроченномуНДС.Колонки.Добавить("ВидДвижения");
	ТаблицаПоОтсроченномуНДС.Колонки.Добавить("СпособПогашения",Новый ОписаниеТипов("ПеречислениеСсылка.ВидыВзаиморасчетовСБюджетом"));
	ТаблицаПоОтсроченномуНДС.Колонки.Добавить("ГТД", Новый ОписаниеТипов("СправочникСсылка.НомераГТД"));
	ТаблицаПоОтсроченномуНДС.Колонки.Добавить("СрокПлатежа", ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата));
	ТаблицаПоОтсроченномуНДС.Колонки.Добавить("СуммаНДС", ОписаниеТипаЧисла15_2);
	ТаблицаПоОтсроченномуНДС.Колонки.Добавить("СуммаНДСОстаток", ОписаниеТипаЧисла15_2);
	ТаблицаПоОтсроченномуНДС.Колонки.Добавить("Контрагент", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ТаблицаПоОтсроченномуНДС.Колонки.Добавить("Договор",	Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
	ТаблицаПоОтсроченномуНДС.Колонки.Добавить("СчетУчетаРасчетовСКонтрагентом", ОписаниеТипаСчетТиповой);
	ТаблицаПоОтсроченномуНДС.Колонки.Добавить("СчетУчетаНДС", ОписаниеТипаСчетТиповой);

	Возврат ТаблицаПоОтсроченномуНДС;
	
КонецФункции

Функция ПодготовитьПараметрыЗакрытияПоНДССИзмСрокомУплаты(ТаблицаПоОтсроченномуНДС, ТаблицаРеквизиты) 
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.ТаблицаРасчетСписанияРБП
	
	СписокОбязательныхКолонок = ""
	+ "ВидОперацииПоступления,"        
	+ "ВидНалогаНДС,"                	
	+ "ВидДвижения,"
	+ "СпособПогашения,"
	+ "ГТД,"
	+ "СрокПлатежа,"
	+ "СуммаНДС," 
	+ "СуммаНДСОстаток," 
	+ "Договор,"                 	
	+ "СчетУчетаРасчетовСКонтрагентом,"  
	+ "СчетУчетаНДС,"                 	
	+ "Контрагент,"            	
	;
	
	Параметры.Вставить("ТаблицаЗакрытияНДССИзмененнымСрокомУплаты", 
		ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаПоОтсроченномуНДС, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
	+ "Период,"           				// <Дата>
	+ "Организация,"      				// <СправочникСсылка.Организации>
	+ "ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль," 
	+ "УчитыватьКПН," 
	+ "Регистратор"      				// <ДокументСсылка.*>
	;
	
	Если ТипЗнч(ТаблицаРеквизиты) = Тип("ТаблицаЗначений") Тогда
		Если ТаблицаРеквизиты.Колонки.Найти("Объект") <> Неопределено Тогда
			СписокОбязательныхКолонок = СписокОбязательныхКолонок + ",Объект";	
		КонецЕсли;
	КонецЕсли;
	
	Параметры.Вставить("Реквизиты", 
		ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));
	
	Возврат Параметры;
	
КонецФункции // ПодготовитьПараметрыРасчетСписанияРБП()

Функция ПодготовитьТаблицуПоНДССИзмененнымСрокомУплаты(ТаблицаРеквизиты, ПараметрыЗачетаНДС, Отказ)Экспорт
	
	ТаблицаПоОтсроченномуНДС = ПолучитьТаблицуПоОтсроченномуНДС();

	Параметры = ПодготовитьПараметрыЗакрытияПоНДССИзмСрокомУплаты(ТаблицаПоОтсроченномуНДС, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];
	РеквизитыНДС = ПараметрыЗачетаНДС[0];

	ТаблицаЗакрытияПоОтсроченномуНДС = Параметры.ТаблицаЗакрытияНДССИзмененнымСрокомУплаты;
	
	СуммаНДСРазрешенногоКЗачету  = РеквизитыНДС.НДСНачисленныйЗаПериод;
	// отсутствует сумма к распределению
	Если СуммаНДСРазрешенногоКЗачету = 0 Тогда
		Возврат ТаблицаПоОтсроченномуНДС;	
	КонецЕсли;			
		
	ЗапросПоОтсроченномуНДС = Новый Запрос;
	ЗапросПоОтсроченномуНДС.Текст = "ВЫБРАТЬ
	                                |	НДССИзмененнымСрокомУплатыОстатки.ВидОперацииПоступления,
	                                |	НДССИзмененнымСрокомУплатыОстатки.ВидНалогаНДС,
	                                |	НДССИзмененнымСрокомУплатыОстатки.ГТД,
	                                |	НДССИзмененнымСрокомУплатыОстатки.СрокПлатежа КАК СрокПлатежа,
	                                |	ЕСТЬNULL(НДССИзмененнымСрокомУплатыОстатки.СуммаНДСОстаток, 0) КАК СуммаНДСОстаток,
	                                |	НДССИзмененнымСрокомУплатыОстатки.Контрагент,
	                                |	НДССИзмененнымСрокомУплатыОстатки.Договор,
	                                |	НДССИзмененнымСрокомУплатыОстатки.СчетУчетаРасчетовСКонтрагентом,
	                                |	НДССИзмененнымСрокомУплатыОстатки.СчетУчетаНДС
	                                |ИЗ
	                                |	РегистрНакопления.НДССИзмененнымСрокомУплаты.Остатки(&Дата, Налогоплательщик = &Налогоплательщик) КАК НДССИзмененнымСрокомУплатыОстатки
	                                |ГДЕ
	                                |	НДССИзмененнымСрокомУплатыОстатки.СуммаНДСОстаток > 0
	                                |
	                                |УПОРЯДОЧИТЬ ПО
	                                |	СрокПлатежа
	                                |ИТОГИ
	                                |	СУММА(СуммаНДСОстаток)
	                                |ПО
	                                |	ОБЩИЕ";
									
	ЗапросПоОтСроченномуНДС.УстановитьПараметр("Дата", 				КонецМесяца(Реквизиты.Период));								
	ЗапросПоОтСроченномуНДС.УстановитьПараметр("Налогоплательщик", 	Реквизиты.Организация);
	
	Результат = ЗапросПоОтСроченномуНДС.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат ТаблицаПоОтсроченномуНДС;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	СуммаНДСКРаспределению = Выборка.СуммаНДСОстаток;	
	
	Пока Выборка.Следующий() и (СуммаНДСРазрешенногоКЗачету > 0) Цикл
		
		СуммаЗачета = Мин(СуммаНДСРазрешенногоКЗачету, Выборка.СуммаНДСОстаток);
		СуммаНДСРазрешенногоКЗачету = СуммаНДСРазрешенногоКЗачету - СуммаЗачета;
		
		Если СуммаЗачета = 0 тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаПоОтсроченномуНДС.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		НоваяСтрока.ВидДвижения  = ВидДвиженияНакопления.Расход;
		НоваяСтрока.СуммаНДС 	 = СуммаЗачета;
		НоваяСтрока.СпособПогашения = Перечисления.ВидыВзаиморасчетовСБюджетом.Зачет;		
		
	КонецЦикла;										

	Возврат ТаблицаПоОтсроченномуНДС;
	
КонецФункции

Процедура СформироватьДвиженияПоНДССИзмененнымСрокомУплаты(ТаблицаЗакрытияНДССИзмененнымСрокомУплаты, ТаблицаРеквизиты, ТаблицаРеквизитыЗачетаНДС, Движения, Отказ) Экспорт
	
	Параметры = ПодготовитьПараметрыЗакрытияПоНДССИзмСрокомУплаты(ТаблицаЗакрытияНДССИзмененнымСрокомУплаты, ТаблицаРеквизиты);
	
	Если Параметры.ТаблицаЗакрытияНДССИзмененнымСрокомУплаты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыЗачетаНДС = ТаблицаРеквизитыЗачетаНДС[0];
	Реквизиты = ТаблицаРеквизиты[0];
	
	КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	
	СуммаНДСРазрешенногоКЗачету  = РеквизитыЗачетаНДС.НДСНачисленныйЗаПериод;
	
	Если СуммаНДСРазрешенногоКЗачету > 0 Тогда
		УчетНДСИАкциза.СформироватьДвиженияПоРегиструНДС("НДССИзмененнымСрокомУплаты", ТаблицаЗакрытияНДССИзмененнымСрокомУплаты, Реквизиты, Движения, Отказ);
	КонецЕсли;
	
	Для Каждого СтрокаНДС ИЗ ТаблицаЗакрытияНДССИзмененнымСрокомУплаты Цикл
					
		Если СтрокаНДС.СуммаНДС  <> 0 Тогда
									
			Проводка 						 = Движения.Типовой.Добавить();
			Проводка.Период                  = Реквизиты.Период;
			Проводка.Организация             = Реквизиты.Организация;				
			Проводка.СчетДт                  = СтрокаНДС.СчетУчетаРасчетовСКонтрагентом;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтрокаНДС.Контрагент);			
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры", 	СтрокаНДС.Договор);
			//если отражение на счетах учета расчетов с бюджетом
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НалогиСборыОтчисления", Справочники.НалогиСборыОтчисления.НалогНаДобавленнуюСтоимостьСИзмененнымСрокомУплаты);			
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ВидыПлатежейВБюджетИФонды", Перечисления.ВидыПлатежейВБюджетИФонды.Налог);			

			
			Проводка.СчетКт                  = СтрокаНДС.СчетУчетаНДС;				
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"НалогиСборыОтчисления", Справочники.НалогиСборыОтчисления.НалогНаДобавленнуюСтоимостьСИзмененнымСрокомУплаты);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ВидыПлатежейВБюджетИФонды", Перечисления.ВидыПлатежейВБюджетИФонды.Налог);
			
			Проводка.Сумма                   = СтрокаНДС.СуммаНДС;
			Проводка.ВидРегламентнойОперации = Перечисления.ВидыРегламентныхОпераций.РасчетНДСКЗачету;
			
			Если Проводка.СчетДт.Валютный Тогда				
				Проводка.ВалютаДт        = Константы.ВалютаРегламентированногоУчета.Получить();
				Проводка.ВалютнаяСуммаДт = СтрокаНДС.СуммаНДС;				
			КонецЕсли;
			
			Проводка.Содержание               = НСтр("ru = 'Взаимозачет с бюджетом по НДС, с измененным сроком уплаты'", КодОсновногоЯзыка);
			Проводка.НомерЖурнала             = НСтр("ru = 'НУ'", КодОсновногоЯзыка);
			
			// по налоговому учету
			Если Реквизиты.УчитыватьКПН И Реквизиты.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль Тогда
				
				Проводка	= Движения.Налоговый.Добавить();					
				Проводка.Период                   = Реквизиты.Период;
				Проводка.Организация              = Реквизиты.Организация;				
				Проводка.СчетДт                   = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СтрокаНДС.СчетУчетаРасчетовСКонтрагентом));
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтрокаНДС.Контрагент);			
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры", 	СтрокаНДС.Договор);			
				
				//если отражение на счетах учета расчетов с бюджетом
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НалогиСборыОтчисления", Справочники.НалогиСборыОтчисления.НалогНаДобавленнуюСтоимостьСИзмененнымСрокомУплаты);			
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ВидыПлатежейВБюджетИФонды", Перечисления.ВидыПлатежейВБюджетИФонды.Налог);			
				
				Проводка.СчетКт                   = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СтрокаНДС.СчетУчетаНДС));
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"НалогиСборыОтчисления", Справочники.НалогиСборыОтчисления.НалогНаДобавленнуюСтоимостьСИзмененнымСрокомУплаты);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ВидыПлатежейВБюджетИФонды", Перечисления.ВидыПлатежейВБюджетИФонды.Налог);
				
				Проводка.Содержание               = НСтр("ru = 'Взаимозачет с бюджетом по НДС, с измененным сроком уплаты'", КодОсновногоЯзыка);
				Проводка.НомерЖурнала             = НСтр("ru = 'НУ'", КодОсновногоЯзыка);
				
				Проводка.ВидРегламентнойОперации  = Перечисления.ВидыРегламентныхОпераций.РасчетНДСКЗачету;	
				Проводка.Сумма                   = СтрокаНДС.СуммаНДС;
				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(Проводка, Реквизиты.СтруктурноеПодразделение,
				Реквизиты.СтруктурноеПодразделение);			
				
				Проводка.ВидУчетаДт = Справочники.ВидыУчетаНУ.НУ;
				Проводка.ВидУчетаКт = Справочники.ВидыУчетаНУ.НУ;
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ТаблицаЗакрытияНДССИзмененнымСрокомУплаты.Количество() > 0 Тогда
		ТекстКомментарияРасчета = СтрШаблон(НСтр("ru = 'Зачет по НДС. Существует непогашенная задолженность по НДС, с измененным сроком уплаты на сумму %1
			|Выполнен взаимозачет с бюджетом по НДС, с измененным сроком уплаты на сумму %2'", КодОсновногоЯзыка),
			ТаблицаЗакрытияНДССИзмененнымСрокомУплаты.Итог("СуммаНДСОстаток"),
			ТаблицаЗакрытияНДССИзмененнымСрокомУплаты.Итог("СуммаНДС"));
		
		ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации(ТекстКомментарияРасчета, , , Реквизиты.Объект, Перечисления.ВидыРегламентныхОпераций.РасчетНДСКЗачету, Ложь);
	КонецЕсли;
	
	Движения.Типовой.Записать(Ложь);
	
	Если Реквизиты.УчитыватьКПН И Реквизиты.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль Тогда
		Движения.Налоговый.Записать(Ложь);
	КонецЕсли;
	
КонецПроцедуры 

Функция ПолучитьТаблицуРаспределенияНДС()
	
	ОписаниеТипаСчетТиповой  	= Новый ОписаниеТипов("ПланСчетовСсылка.Типовой");
	ОписаниеТипаЧисла15_2 		= ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2);

	ТаблицаРаспределенияНДСКВозмещению = Новый ТаблицаЗначений;
	ТаблицаРаспределенияНДСКВозмещению.Колонки.Добавить("Счет", ОписаниеТипаСчетТиповой);
	ТаблицаРаспределенияНДСКВозмещению.Колонки.Добавить("Сумма", ОписаниеТипаЧисла15_2);

	Возврат ТаблицаРаспределенияНДСКВозмещению;
	
КонецФункции

Функция ПодготовитьПараметрыРаспределенияНДС(ТаблицаРаспределенияНДС, ТаблицаРеквизиты) 
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.ТаблицаРасчетСписанияРБП
	
	СписокОбязательныхКолонок = ""
	+ "Счет,"        
	+ "Сумма,"                	
	;
	
	Параметры.Вставить("ТаблицаРаспределенияНДС", 
		ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРаспределенияНДС, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
	+ "Период,"           				// <Дата>
	+ "Организация,"      				// <СправочникСсылка.Организации>
	+ "ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль," 
	+ "УчитыватьКПН," 
	+ "Регистратор"      				// <ДокументСсылка.*>
	;
	
	Если ТипЗнч(ТаблицаРеквизиты) = Тип("ТаблицаЗначений") Тогда
		Если ТаблицаРеквизиты.Колонки.Найти("Объект") <> Неопределено Тогда
			СписокОбязательныхКолонок = СписокОбязательныхКолонок + ",Объект";	
		КонецЕсли;
	КонецЕсли;
	
	Параметры.Вставить("Реквизиты", 
		ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));
	
	Возврат Параметры;
	
КонецФункции // ПодготовитьПараметрыРасчетСписанияРБП()

Функция ПодготовитьТаблицуРаспределенияНДСКВозмещению(ТаблицаРеквизиты, ПараметрыЗачетаНДС,Отказ)   Экспорт
		
	ТаблицаРаспределенияНДСКВозмещению = ПолучитьТаблицуРаспределенияНДС();
	Параметры = ПодготовитьПараметрыРаспределенияНДС(ТаблицаРаспределенияНДСКВозмещению, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];
	ТаблицаЗакрытияНДСКВозмещению  = Параметры.ТаблицаРаспределенияНДС;
	
	Запрос = Новый Запрос;
	Запрос.Текст =  "ВЫБРАТЬ
					|	ТиповойОстаткиИОбороты.Счет,
					|	ЕСТЬNULL(ТиповойОстаткиИОбороты.СуммаНачальныйОстатокДт + ТиповойОстаткиИОбороты.СуммаОборотДт, 0) КАК Сумма
					|ИЗ
					|	РегистрБухгалтерии.Типовой.ОстаткиИОбороты(
					|		&ДатаНачала,
					|		&ДатаОкончания, , ,
					|		Счет В ИЕРАРХИИ (&СчетНДСКВозмещению)
					|			И (НЕ Счет.ЗапретитьИспользоватьВПроводках),
					|		&ВидСубконтоНалоги,
					|		Организация = &Организация
					|			И (НЕ Субконто1 = &НДСОтсроченный)) КАК ТиповойОстаткиИОбороты";
					
					
	Если УчетнаяПолитикаСервер.ПолучитьПериодОтнесенияНДСВЗачет(Реквизиты.Организация, Реквизиты.Период) = Перечисления.Периодичность.Месяц Тогда
		ДатаНачалаПериодаЗачета = НачалоМесяца(Реквизиты.Период);
	Иначе
		ДатаНачалаПериодаЗачета = НачалоКвартала(Реквизиты.Период);
	КонецЕсли;	
	
	Запрос.УстановитьПараметр("ДатаНачала", 		ДатаНачалаПериодаЗачета);
	Запрос.УстановитьПараметр("ДатаОкончания", 		КонецМесяца(Реквизиты.Период));
	Запрос.УстановитьПараметр("Организация", 		Реквизиты.Организация);		
	Запрос.УстановитьПараметр("СчетНДСКВозмещению", ПланыСчетов.Типовой.НалогНаДобавленнуюСтоимостьКВозмещению);
	Запрос.УстановитьПараметр("ВидСубконтоНалоги", 	ПланыВидовХарактеристик.ВидыСубконтоТиповые.НалогиСборыОтчисления);		
	Запрос.УстановитьПараметр("НДСОтсроченный", 	Справочники.НалогиСборыОтчисления.НалогНаДобавленнуюСтоимостьСИзмененнымСрокомУплаты);
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			НоваяСтрока =  ТаблицаЗакрытияНДСКВозмещению.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		КонецЦикла;
	КонецЕсли;	
	
	Возврат   ТаблицаЗакрытияНДСКВозмещению;
	
КонецФункции

Функция ПодготовитьТаблицуРаспределенияНДС(ТаблицаРеквизиты, ПараметрыЗачетаНДС,Отказ)   Экспорт
		
	ТаблицаРаспределенияНДС = ПолучитьТаблицуРаспределенияНДС();
	Параметры = ПодготовитьПараметрыРаспределенияНДС(ТаблицаРаспределенияНДС, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];
	ТаблицаЗакрытияНДС  = Параметры.ТаблицаРаспределенияНДС;
	
	Если УчетнаяПолитикаСервер.ПолучитьПериодОтнесенияНДСВЗачет(Реквизиты.Организация, Реквизиты.Период) = Перечисления.Периодичность.Месяц Тогда
		ДатаНачалаПериодаЗачета = НачалоМесяца(Реквизиты.Период);
	Иначе
		ДатаНачалаПериодаЗачета = НачалоКвартала(Реквизиты.Период);
	КонецЕсли;	

	Запрос = Новый Запрос;
		// Распределяем сумму закрытия пропорционально данным субсчетов НДС
		Запрос.Текст = "ВЫБРАТЬ
		                      |	ДанныеСчетов.Счет,
		                      |	СУММА(ДанныеСчетов.Сумма) КАК Сумма
		                      |ИЗ
		                      |	(ВЫБРАТЬ
		                      |		ТиповойОбороты.Счет КАК Счет,
		                      |		ТиповойОбороты.СуммаОборотКт КАК Сумма
		                      |	ИЗ
		                      |		РегистрБухгалтерии.Типовой.Обороты(
		                      |				&ДатаНачала,
		                      |				&ДатаОкончания,
		                      |				,
		                      |				Счет В ИЕРАРХИИ (&СчетНДС)
		                      |					И (НЕ Счет.ЗапретитьИспользоватьВПроводках),
		                      |				,
		                      |				Организация = &Организация,
		                      |				,
		                      |				) КАК ТиповойОбороты
		                      |	ГДЕ
		                      |		ТиповойОбороты.СуммаОборотКт > 0
		                      |	
		                      |	ОБЪЕДИНИТЬ ВСЕ
		                      |	
		                      |	ВЫБРАТЬ
		                      |		ТиповойОбороты.Счет,
		                      |		-ТиповойОбороты.СуммаОборотДт
		                      |	ИЗ
		                      |		РегистрБухгалтерии.Типовой.Обороты(
		                      |				&ДатаНачала,
		                      |				&ДатаОкончания,
		                      |				Регистратор,
		                      |				Счет В ИЕРАРХИИ (&СчетНДС)
		                      |					И (НЕ Счет.ЗапретитьИспользоватьВПроводках),
		                      |				,
		                      |				Организация = &Организация,
		                      |				,
		                      |				) КАК ТиповойОбороты
		                      |	ГДЕ
		                      |		ТиповойОбороты.СуммаОборотДт < 0) КАК ДанныеСчетов
		                      |
		                      |СГРУППИРОВАТЬ ПО
		                      |	ДанныеСчетов.Счет";
	  
	  Запрос.УстановитьПараметр("ДатаНачала", 	ДатаНачалаПериодаЗачета);
	  Запрос.УстановитьПараметр("ДатаОкончания",КонецМесяца(Реквизиты.Период));
	  Запрос.УстановитьПараметр("Организация", 	Реквизиты.Организация);		
	  Запрос.УстановитьПараметр("СчетНДС", 		ПланыСчетов.Типовой.НалогНаДобавленнуюСтоимость);
	  
	  Результат = Запрос.Выполнить();
	  Если НЕ Результат.Пустой() Тогда
		  Выборка = Результат.Выбрать();
		  Пока Выборка.Следующий() Цикл
			  НоваяСтрока =  ТаблицаРаспределенияНДС.Добавить();
			  ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		  КонецЦикла;
	  КонецЕсли;	
	  
	  Возврат   ТаблицаРаспределенияНДС;
	
КонецФункции

Процедура СформироватьДвиженияПоНДСНеРазрешенномуВЗачет(ТаблицаРаспределенияНДСКВозмещению, ТаблицаРеквизиты, ПараметрыЗачетаНДС, Движения, Отказ)  Экспорт
	
	Если ТаблицаРаспределенияНДСКВозмещению.Количество() = 0  Тогда
		Возврат;
	КонецЕсли;
	
	ОбщаяСуммаЗачета = ТаблицаРаспределенияНДСКВозмещению.Итог("Сумма");
	
	Если ОбщаяСуммаЗачета = 0 Тогда
		Возврат;
	КонецЕсли;      
	
	ПараметрыНДС  = ПараметрыЗачетаНДС[0];
	Реквизиты = ТаблицаРеквизиты[0];
	
	КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	
	ПроцентРаспределения = ПараметрыНДС.СуммаНДСНеРазрешенногоКЗачету/ТаблицаРаспределенияНДСКВозмещению.Итог("Сумма");
	
	Для Каждого СтрокаТаблицыНДСКВозмещению из ТаблицаРаспределенияНДСКВозмещению Цикл 
		
		СуммаКСписанию = Окр(СтрокаТаблицыНДСКВозмещению.Сумма*ПроцентРаспределения,2);
		
		Если Не СуммаКСписанию = 0 Тогда
			
			// найдем подразделение для регл. операций, чтобы подставить в качестве соотв. субконто
			ПодразделениеДляРеглОпераций = УчетнаяПолитикаСервер.ПолучитьПодразделениеДляРеглОпераций(Реквизиты.Организация, Реквизиты.Период);
			
			// если получили отказ, тогда дальше не идем
			Если Отказ Тогда
				Возврат;
			КонецЕсли;	
			
			Проводка = Движения.Типовой.Добавить();
			Проводка.Период                   = Реквизиты.Период;
			Проводка.Организация              = Реквизиты.Организация;				
			Проводка.СчетДт                   = ПланыСчетов.Типовой.АдминистративныеРасходы;			
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтатьиЗатрат", Справочники.СтатьиЗатрат.НДСНеПринятыйКЗачету);			
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Подразделения", ПодразделениеДляРеглОпераций);			
			
			Проводка.СчетКт                   = СтрокаТаблицыНДСКВозмещению.Счет;				
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"НалогиСборыОтчисления", Справочники.НалогиСборыОтчисления.НалогНаДобавленнуюСтоимость);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ВидыПлатежейВБюджетИФонды", Перечисления.ВидыПлатежейВБюджетИФонды.Налог);
				
			Проводка.Сумма                    = СуммаКСписанию;
			Проводка.Содержание               = НСтр("ru = 'Отнесение на затраты суммы НДС, не разрешенного к зачету'", КодОсновногоЯзыка);
			Проводка.НомерЖурнала             = НСтр("ru = 'НУ'", КодОсновногоЯзыка);	
			Проводка.ВидРегламентнойОперации  = Перечисления.ВидыРегламентныхОпераций.РасчетНДСКЗачету;
			
			
			// по налоговому учету
			Если Реквизиты.УчитыватьКПН Тогда
				
				СчетДтНУ = 	ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", ПланыСчетов.Типовой.АдминистративныеРасходы));
				СчетКтНУ = 	ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СтрокаТаблицыНДСКВозмещению.Счет));

				Проводка	= Движения.Налоговый.Добавить();
				
				Проводка.Период                   = Реквизиты.Период;
				Проводка.Организация              = Реквизиты.Организация;				
							
				Проводка.СчетДт                   = ?(ЗначениеЗаполнено(СчетДтНУ),СчетДтНУ,ПланыСчетов.Налоговый.ПрочиеРасходы);			
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтатьиЗатрат", Справочники.СтатьиЗатрат.НДСНеПринятыйКЗачету);			
				Проводка.ВидУчетаДт 				= ?(Справочники.СтатьиЗатрат.НДСНеПринятыйКЗачету.ПринятиеКНалоговомуУчету = Истина, Справочники.ВидыУчетаНУ.НУ, Справочники.ВидыУчетаНУ.НеОтражаетсяВНУ);

				
				Проводка.СчетКт                     = ?(ЗначениеЗаполнено(СчетКтНУ), СчетКтНУ,ПланыСчетов.Налоговый.ПрочиеНалоги);				
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,"НалогиСборыОтчисления", Справочники.НалогиСборыОтчисления.НалогНаДобавленнуюСтоимость);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,"ВидыПлатежейВБюджетИФонды", Перечисления.ВидыПлатежейВБюджетИФонды.Налог);
				Проводка.ВидУчетаКт 				= Проводка.ВидУчетаДт;
				
				Проводка.Сумма                    = СуммаКСписанию;
				Проводка.Содержание               = НСтр("ru = 'Отнесение на затраты суммы НДС, не разрешенного к зачету'", КодОсновногоЯзыка);
				Проводка.НомерЖурнала             = НСтр("ru = 'НУ'", КодОсновногоЯзыка);	
				Проводка.ВидРегламентнойОперации    = Перечисления.ВидыРегламентныхОпераций.РасчетНДСКЗачету;
			КонецЕсли;			
		КонецЕсли;
	КонецЦикла;	
	
	Движения.Типовой.Записать(Ложь);

	Если Реквизиты.УчитыватьКПН  Тогда
		Движения.Налоговый.Записать(Ложь);
	КонецЕсли;	

КонецПроцедуры // СформироватьДвиженияПоНДСНеРазрешенномуВЗачет()

Процедура СформироватьДвиженияПоЗачетуНДС(ТаблицаРаспределенияНДСКВозмещению, ТаблицаРаспределенияНДС, ТаблицаРеквизиты, ПараметрыЗачетаНДС, Движения, Отказ)  Экспорт
	
	Если ТаблицаРаспределенияНДСКВозмещению.Количество() = 0  Тогда
		Возврат;
	КонецЕсли;
	
	ОбщаяСуммаЗачета = ТаблицаРаспределенияНДСКВозмещению.Итог("Сумма");
	
	Если ОбщаяСуммаЗачета = 0 Тогда
		Возврат;
	КонецЕсли; 
	
	ПараметрыНДС  = ПараметрыЗачетаНДС[0];
	Реквизиты = ТаблицаРеквизиты[0];
	СуммаНДСКЗачету = Мин(ПараметрыНДС.ОбщаяСуммаНДСРазрешенногоКЗачету, ПараметрыНДС.НДСНачисленныйЗаПериод);
	
	КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	
	Для каждого СтрокаТаблицыНДСКВозмещению из ТаблицаРаспределенияНДСКВозмещению Цикл 
		ПроцентРаспределения = СтрокаТаблицыНДСКВозмещению.Сумма/ОбщаяСуммаЗачета;
		СуммаЗачетаПоСчетуВозмещения = Окр(СуммаНДСКЗачету * ПроцентРаспределения,2);
		
		// распределяем по счетам НДС начисленного		
		Для каждого СтрокаТаблицыНДС из ТаблицаРаспределенияНДС Цикл 
			
			СуммаЗачета	 					= Мин(СтрокаТаблицыНДС.Сумма, СуммаЗачетаПоСчетуВозмещения);
			СуммаЗачетаПоСчетуВозмещения 	= Окр(СуммаЗачетаПоСчетуВозмещения - СуммаЗачета, 2);
			
			Если Не СуммаЗачета = 0 Тогда
				Проводка = Движения.Типовой.Добавить();
				Проводка.Период                = Реквизиты.Период;
				Проводка.Организация           = Реквизиты.Организация;				
				Проводка.СчетДт                = СтрокаТаблицыНДС.Счет;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"НалогиСборыОтчисления", Справочники.НалогиСборыОтчисления.НалогНаДобавленнуюСтоимость);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"ВидыПлатежейВБюджетИФонды", Перечисления.ВидыПлатежейВБюджетИФонды.Налог);	
				
				Проводка.СчетКт                = СтрокаТаблицыНДСКВозмещению.Счет;				
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"НалогиСборыОтчисления", Справочники.НалогиСборыОтчисления.НалогНаДобавленнуюСтоимость);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ВидыПлатежейВБюджетИФонды", Перечисления.ВидыПлатежейВБюджетИФонды.Налог);
				
				Проводка.Сумма                    = СуммаЗачета;
				Проводка.Содержание               = НСтр("ru = 'Зачет по НДС'", КодОсновногоЯзыка);
				Проводка.НомерЖурнала          	  = НСтр("ru = 'НУ'", КодОсновногоЯзыка);
				Проводка.ВидРегламентнойОперации  = Перечисления.ВидыРегламентныхОпераций.РасчетНДСКЗачету;
				                      				
				СтрокаТаблицыНДС.Сумма 		   = СтрокаТаблицыНДС.Сумма - СуммаЗачета;
				
				// по налоговому учету
				Если Реквизиты.УчитыватьКПН И Реквизиты.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль Тогда
					// трансляция счетов
					СчетНДСНУ			 = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СтрокаТаблицыНДС.Счет));
					
					СчетНДСКВозмещениюНУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СтрокаТаблицыНДСКВозмещению.Счет));
					
					Если Не ЗначениеЗаполнено(СчетНДСНУ) Тогда
						ТекстСообщения = СтрШаблон(НСтр("ru = 'Для счета %1 не указан соответствующий ему счет налогового учета.'", КодОсновногоЯзыка), СтрокаТаблицыНДС.Счет.Код);
						ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации(ТекстСообщения, Реквизиты.Объект, Отказ, , Перечисления.ВидыРегламентныхОпераций.РасчетНДСКЗачету);
						Продолжить;
					КонецЕсли;
					
					Если Не ЗначениеЗаполнено(СчетНДСКВозмещениюНУ) Тогда
						ТекстСообщения = СтрШаблон(НСтр("ru = 'Для счета %1 не указан соответствующий ему счет налогового учета.'", КодОсновногоЯзыка), СтрокаТаблицыНДСКВозмещению.Счет.Код);
						ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации(ТекстСообщения, Реквизиты.Объект, Отказ, , Перечисления.ВидыРегламентныхОпераций.РасчетНДСКЗачету);
						Продолжить;
					КонецЕсли;
					
					Проводка = Движения.Налоговый.Добавить();
					Проводка.Период                   	= Реквизиты.Период;
					Проводка.Организация              	= Реквизиты.Организация;
					Проводка.СчетДт                   	= СчетНДСНУ;
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"НалогиСборыОтчисления", Справочники.НалогиСборыОтчисления.НалогНаДобавленнуюСтоимость);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"ВидыПлатежейВБюджетИФонды", Перечисления.ВидыПлатежейВБюджетИФонды.Налог);	
					
					
					Проводка.ВидУчетаДт 			  	= Справочники.ВидыУчетаНУ.НУ;
					Проводка.СчетКт                   	= СчетНДСКВозмещениюНУ;
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,"НалогиСборыОтчисления", 		Справочники.НалогиСборыОтчисления.НалогНаДобавленнуюСтоимость);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,"ВидыПлатежейВБюджетИФонды", 	Перечисления.ВидыПлатежейВБюджетИФонды.Налог);
				
					Проводка.ВидУчетаКт 			  	= Проводка.ВидУчетаДт;
					
					Проводка.Сумма                    	= СуммаЗачета;
					Проводка.Содержание               	= НСтр("ru = 'Зачет по НДС'", КодОсновногоЯзыка);
					Проводка.НомерЖурнала           	= НСтр("ru = 'НУ'", КодОсновногоЯзыка);	
					Проводка.ВидРегламентнойОперации    = Перечисления.ВидыРегламентныхОпераций.РасчетНДСКЗачету;
					
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
		
		Если СуммаЗачетаПоСчетуВозмещения <> 0 Тогда
			ТекстСообщения = СтрШаблон(НСтр("ru = 'По счету %1 не распределена сумма зачета по НДС в размере %2'", КодОсновногоЯзыка), СтрокаТаблицыНДСКВозмещению.Счет.Код, СокрЛП(СуммаЗачетаПоСчетуВозмещения));
			ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации(ТекстСообщения, , , Реквизиты.Объект, Перечисления.ВидыРегламентныхОпераций.РасчетНДСКЗачету);
		КонецЕсли;
	КонецЦикла;
	
	Движения.Типовой.Записать(Ложь);
	
	Если Реквизиты.УчитыватьКПН И Реквизиты.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль Тогда
		Движения.Налоговый.Записать(Ложь);
	КонецЕсли;
	
КонецПроцедуры // СформироватьДвиженияПоНДСНеРазрешенномуВЗачет()

Функция ПолучитьТаблицуПоВзаиморасчетовСБюджетом()
	
	ОписаниеТипаЧисла15_2 		= ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2);

	ТаблицаПоВзаиморасчетовСБюджетом = Новый ТаблицаЗначений;
	ТаблицаПоВзаиморасчетовСБюджетом.Колонки.Добавить("СпособПогашения",Новый ОписаниеТипов("ПеречислениеСсылка.ВидыВзаиморасчетовСБюджетом"));
	ТаблицаПоВзаиморасчетовСБюджетом.Колонки.Добавить("СуммаНДС", ОписаниеТипаЧисла15_2);

	Возврат ТаблицаПоВзаиморасчетовСБюджетом;
	
КонецФункции

Функция ПодготовитьПараметрыЗакрытияНДСВзаиморасчетовСБюджетом(ТаблицаНДСВзаиморасчетовСБюджетом, ТаблицаРеквизиты) 
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.ТаблицаРасчетСписанияРБП
	
	СписокОбязательныхКолонок = ""
	+ "СпособПогашения,"
	+ "СуммаНДС,"          
	;
	
	Параметры.Вставить("ТаблицаНДСВзаиморасчетовСБюджетом", 
		ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаНДСВзаиморасчетовСБюджетом, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
	+ "Период,"           				// <Дата>
	+ "Организация,"      				// <СправочникСсылка.Организации>
	+ "ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль," 
	+ "УчитыватьКПН," 
	+ "Регистратор"      				// <ДокументСсылка.*>
	;
	
	Если ТипЗнч(ТаблицаРеквизиты) = Тип("ТаблицаЗначений") Тогда
		Если ТаблицаРеквизиты.Колонки.Найти("Объект") <> Неопределено Тогда
			СписокОбязательныхКолонок = СписокОбязательныхКолонок + ",Объект";	
		КонецЕсли;
	КонецЕсли;
	
	Параметры.Вставить("Реквизиты", 
		ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));
	
	Возврат Параметры;
	
КонецФункции 

Функция ПодготовитьТаблицуНДСВзаиморасчетовСБюджетом(ТаблицаРеквизиты, ПараметрыЗачетаНДС, Отказ) Экспорт
	
	ТаблицаНДСВзаиморасчетовСБюджетом = ПолучитьТаблицуПоВзаиморасчетовСБюджетом();

	Параметры = ПодготовитьПараметрыЗакрытияНДСВзаиморасчетовСБюджетом(ТаблицаНДСВзаиморасчетовСБюджетом, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];
	РеквизитыНДС = ПараметрыЗачетаНДС[0];

	ТаблицаЗакрытияНДСВзаиморасчетовСБюджетом = Параметры.ТаблицаНДСВзаиморасчетовСБюджетом;
	
	ЗачетПереносимыйНаСледующийПериод = Макс(0, РеквизитыНДС.ОбщаяСуммаНДСРазрешенногоКЗачету - РеквизитыНДС.НДСНачисленныйЗаПериод);
	
	СуммаВзаиморасчетовСБюджетом = Окр(ЗачетПереносимыйНаСледующийПериод - РеквизитыНДС.ПереносимыйЗачетПоНДС, 2);
	
	Если СуммаВзаиморасчетовСБюджетом =0 Тогда
		
		Возврат ТаблицаЗакрытияНДСВзаиморасчетовСБюджетом;
		
	КонецЕсли;
	
	НоваяСтрока = ТаблицаЗакрытияНДСВзаиморасчетовСБюджетом.Добавить();

	НоваяСтрока.СуммаНДС = СуммаВзаиморасчетовСБюджетом;
	НоваяСтрока.СпособПогашения = Перечисления.ВидыВзаиморасчетовСБюджетом.Зачет;

	Возврат ТаблицаЗакрытияНДСВзаиморасчетовСБюджетом;
	
КонецФункции

Процедура СформироватьДвиженияПоНДСВзаиморасчетыСБюджетом(Реквизиты, ТаблицаНДСВзаиморасчетыСБюджетом, Движения, Отказ) Экспорт
	
	Если ТаблицаНДСВзаиморасчетыСБюджетом.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	УчетНДСИАкциза.СформироватьДвиженияПоРегиструНДС("НДСВзаиморасчетыСБюджетом", ТаблицаНДСВзаиморасчетыСБюджетом, Реквизиты[0], Движения, Отказ);
	
	ТекстСообщения = СтрШаблон(НСтр("ru = '-------------------------------------------------------------------------------------
		|Зачет по НДС. Сумма НДС, переносимая в счет предстоящих платежей (переносимый зачет) = %1'", ОбщегоНазначения.КодОсновногоЯзыка()), ТаблицаНДСВзаиморасчетыСБюджетом[0].СуммаНДС);
	
	ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации(ТекстСообщения, , , Реквизиты[0].Объект, Перечисления.ВидыРегламентныхОпераций.РасчетНДСКЗачету, Ложь);
	
КонецПроцедуры

// перенос отрицательных остатков счета 3130

Функция ПолучитьТаблицуОтрицательныхОстатковНДС()
	
	ОписаниеТипаЧисла15_2 		= ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2);

	ОтрицательныхОстатковНДС = Новый ТаблицаЗначений;
	ОтрицательныхОстатковНДС.Колонки.Добавить("Счет",		Новый ОписаниеТипов("ПланСчетовСсылка.Типовой"));
	ОтрицательныхОстатковНДС.Колонки.Добавить("ВидНалога", 	Новый ОписаниеТипов("СправочникСсылка.НалогиСборыОтчисления"));
	ОтрицательныхОстатковНДС.Колонки.Добавить("ВидПлатежейВБюджетИФонды", 	Новый ОписаниеТипов("ПеречислениеСсылка.ВидыПлатежейВБюджетИФонды"));
	ОтрицательныхОстатковНДС.Колонки.Добавить("Сумма", 		ОписаниеТипаЧисла15_2);

	Возврат ОтрицательныхОстатковНДС;

КонецФункции

Функция ПодготовитьПараметрыПереносаОтрицательныхОстатковНДС(ТаблицаОтрицательныхОстатковНДС, ТаблицаРеквизиты) 
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.ТаблицаРасчетСписанияРБП
	
	СписокОбязательныхКолонок = ""
	+ "Счет,"
	+ "ВидНалога,"
	+ "ВидПлатежейВБюджетИФонды,"
	+ "Сумма,"          
	;
	 
	Параметры.Вставить("ТаблицаОтрицательныхОстатковНДС", 
		ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаОтрицательныхОстатковНДС, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
	+ "Период,"           				// <Дата>
	+ "Организация,"      				// <СправочникСсылка.Организации>
	+ "СтруктурноеПодразделение,"     	// <СправочникСсылка.Организации>
	+ "ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль," 
	+ "УчитыватьКПН," 
	+ "Регистратор"      				// <ДокументСсылка.*>
	;
	
	Если ТипЗнч(ТаблицаРеквизиты) = Тип("ТаблицаЗначений") Тогда
		Если ТаблицаРеквизиты.Колонки.Найти("Объект") <> Неопределено Тогда
			СписокОбязательныхКолонок = СписокОбязательныхКолонок + ",Объект";	
		КонецЕсли;
	КонецЕсли;	
	
	Параметры.Вставить("Реквизиты", 
		ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));
	
	Возврат Параметры;
	
КонецФункции 

Функция ПодготовитьТаблицуОтрицательныхОстатковНДС(ТаблицаРеквизиты, Отказ) Экспорт
	
	ТаблицаОтрицательныхОстатковНДС = ПолучитьТаблицуОтрицательныхОстатковНДС();

	Параметры = ПодготовитьПараметрыПереносаОтрицательныхОстатковНДС(ТаблицаОтрицательныхОстатковНДС, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];

	ТаблицаПереносаОтрицательныхОстатковНДС = Параметры.ТаблицаОтрицательныхОстатковНДС;
	
	Запрос = Новый Запрос;
	Запрос.Текст =  "ВЫБРАТЬ
	                |	ТиповойОстатки.Счет,
	                |	ТиповойОстатки.Субконто1 КАК ВидНалога,
					|	ТиповойОстатки.Субконто2 КАК ВидПлатежейВБюджетИФонды,
	                |	ТиповойОстатки.Организация,
	                |	ТиповойОстатки.СуммаОстаток КАК Сумма,
	                |	ТиповойОстатки.СтруктурноеПодразделение
	                |ИЗ
	                |	РегистрБухгалтерии.Типовой.Остатки(&ДатаОстатков, Счет В (&СписокСчетов), , Организация = &Организация И СтруктурноеПодразделение = &СтруктурноеПодразделение) КАК ТиповойОстатки
	                |ГДЕ
	                |	ТиповойОстатки.СуммаОстаток > 0";
					
	СписокСчетов = Новый СписокЗначений;
	СписокСчетов.Добавить(ПланыСчетов.Типовой.НалогНаДобавленнуюСтоимость);
	
	Запрос.УстановитьПараметр("СписокСчетов", СписокСчетов);
	Запрос.УстановитьПараметр("ДатаОстатков", Новый Граница(КонецМесяца(Реквизиты.Период), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Организация",  Реквизиты.Организация);
	Запрос.УстановитьПараметр("СтруктурноеПодразделение", Реквизиты.СтруктурноеПодразделение);
	
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			НоваяСтрока =  ТаблицаПереносаОтрицательныхОстатковНДС.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		КонецЦикла;
	КонецЕсли;	
	
	Возврат   ТаблицаПереносаОтрицательныхОстатковНДС;
	
КонецФункции

Процедура СформироватьДвиженияПоПереносуОтрицательныхОстатковНДС(ТаблицаПереносаОтрицательныхОстатковНДС, ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Если ТаблицаПереносаОтрицательныхОстатковНДС.Количество() = 0  Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизиты[0];
	ОбщаяСумма = 0;
	
	КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	
	Для Каждого СтрокаЗакрытия ИЗ ТаблицаПереносаОтрицательныхОстатковНДС Цикл
		
		Проводка = Движения.Типовой.Добавить();
		Проводка.Период                = Реквизиты.Период;
		Проводка.Организация           = Реквизиты.Организация;				
		Проводка.СчетДт                = ПланыСчетов.Типовой.ИзлишнеУплаченныеВБюджетСуммыНДС;			
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"НалогиСборыОтчисления", СтрокаЗакрытия.ВидНалога);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"ВидыПлатежейВБюджетИФонды", СтрокаЗакрытия.ВидПлатежейВБюджетИФонды);
		
		Проводка.СчетКт                = СтрокаЗакрытия.Счет;
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"НалогиСборыОтчисления", СтрокаЗакрытия.ВидНалога);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ВидыПлатежейВБюджетИФонды", СтрокаЗакрытия.ВидПлатежейВБюджетИФонды);

		Проводка.Сумма                   = СтрокаЗакрытия.Сумма;
		Проводка.Содержание              = НСтр("ru='Зачет авансов и переплат по НДС'", КодОсновногоЯзыка);
		Проводка.НомерЖурнала          	 = НСтр("ru = 'БУ'", КодОсновногоЯзыка);
		Проводка.ВидРегламентнойОперации = Перечисления.ВидыРегламентныхОпераций.РасчетНДСКЗачету;
		ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(Проводка, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);
		
		ОбщаяСумма = ОбщаяСумма + СтрокаЗакрытия.Сумма;
		
		Если Реквизиты.УчитыватьКПН И Реквизиты.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль Тогда
			
			СчетДтНУ = 	ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", ПланыСчетов.Типовой.ИзлишнеУплаченныеВБюджетСуммыНДС));
			СчетКтНУ = 	ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СтрокаЗакрытия.Счет));
			
			Проводка	= Движения.Налоговый.Добавить();
			
			Проводка.Период                   = Реквизиты.Период;
			Проводка.Организация              = Реквизиты.Организация;				
			
			Проводка.СчетДт                   = ?(ЗначениеЗаполнено(СчетДтНУ),СчетДтНУ,ПланыСчетов.Налоговый.НалоговыеАктивыПрочее);			
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"НалогиСборыОтчисления", СтрокаЗакрытия.ВидНалога);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"ВидыПлатежейВБюджетИФонды", СтрокаЗакрытия.ВидПлатежейВБюджетИФонды);
			Проводка.ВидУчетаДт = Справочники.ВидыУчетаНУ.НУ;
			
			Проводка.СчетКт                     = ?(ЗначениеЗаполнено(СчетКтНУ), СчетКтНУ,ПланыСчетов.Налоговый.ПрочиеНалоги);				
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"НалогиСборыОтчисления", СтрокаЗакрытия.ВидНалога);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ВидыПлатежейВБюджетИФонды", СтрокаЗакрытия.ВидПлатежейВБюджетИФонды);
			Проводка.ВидУчетаКт = Справочники.ВидыУчетаНУ.НУ;
			Проводка.Сумма                    = СтрокаЗакрытия.Сумма;
			Проводка.Содержание               = НСтр("ru = 'Зачет авансов и переплат по НДС'", КодОсновногоЯзыка);
			Проводка.НомерЖурнала             = НСтр("ru = 'НУ'", КодОсновногоЯзыка);	
			Проводка.ВидРегламентнойОперации    = Перечисления.ВидыРегламентныхОпераций.РасчетНДСКЗачету;
		КонецЕсли;
		
	КонецЦикла;
	
	Движения.Типовой.Записать(Ложь);
	
	Если Реквизиты.УчитыватьКПН И Реквизиты.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль Тогда
		Движения.Налоговый.Записать(Ложь);
	КонецЕсли;
	
	ТекстСообщения = СтрШаблон(НСтр("ru = '-------------------------------------------------------------------------------------
		|Зачет авансов и переплат по НДС. 
		|Перенос авансов и переплат по НДС. Итого сумма : %1'", ОбщегоНазначения.КодОсновногоЯзыка()), ОбщаяСумма);
	
	ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации(ТекстСообщения, , , Реквизиты.Объект, Перечисления.ВидыРегламентныхОпераций.ЗачетАвансовИПереплатПоНДС, Ложь);
	
КонецПроцедуры

// закрытие счета 1424, уменьшение суммы НДС

Функция ПолучитьТаблицуУменьшенияСуммыНДС()
	
	ОписаниеТипаЧисла15_2 		= ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2);

	ТаблицаУменьшенияСуммыНДС = Новый ТаблицаЗначений;
	ТаблицаУменьшенияСуммыНДС.Колонки.Добавить("Счет",			Новый ОписаниеТипов("ПланСчетовСсылка.Типовой"));
	ТаблицаУменьшенияСуммыНДС.Колонки.Добавить("ВидНалога", 	Новый ОписаниеТипов("СправочникСсылка.НалогиСборыОтчисления"));
	ТаблицаУменьшенияСуммыНДС.Колонки.Добавить("ВидПлатежейВБюджетИФонды", 	Новый ОписаниеТипов("ПеречислениеСсылка.ВидыПлатежейВБюджетИФонды"));
	ТаблицаУменьшенияСуммыНДС.Колонки.Добавить("Сумма", 		ОписаниеТипаЧисла15_2);

	Возврат ТаблицаУменьшенияСуммыНДС;

КонецФункции

Функция ПодготовитьПараметрыУменьшенияСуммыНДС(ТаблицаУменьшенияСуммыНДС, ТаблицаРеквизиты) 
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.ТаблицаРасчетСписанияРБП
	
	СписокОбязательныхКолонок = ""
	+ "Счет,"
	+ "ВидНалога,"
	+ "ВидПлатежейВБюджетИФонды,"
	+ "Сумма,"          
	;
	 
	Параметры.Вставить("ТаблицаУменьшенияСуммыНДС", 
		ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаУменьшенияСуммыНДС, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
	+ "Период,"           				// <Дата>
	+ "Организация,"      				// <СправочникСсылка.Организации>
	+ "СтруктурноеПодразделение,"     	// <СправочникСсылка.Организации>
	+ "ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль," 
	+ "УчитыватьКПН," 
	+ "Регистратор"      				// <ДокументСсылка.*>
	;
	
	Если ТипЗнч(ТаблицаРеквизиты) = Тип("ТаблицаЗначений") Тогда
		Если ТаблицаРеквизиты.Колонки.Найти("Объект") <> Неопределено Тогда
			СписокОбязательныхКолонок = СписокОбязательныхКолонок + ",Объект";	
		КонецЕсли;
	КонецЕсли;	
	
	Параметры.Вставить("Реквизиты", 
		ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));
	
	Возврат Параметры;
	
КонецФункции 

Функция ПодготовитьТаблицуУменьшенияСуммыНДС(ТаблицаРеквизиты, Отказ) Экспорт
	
	ТаблицаУменьшенияСуммыНДС = ПолучитьТаблицуУменьшенияСуммыНДС();
	
	Параметры = ПодготовитьПараметрыУменьшенияСуммыНДС(ТаблицаУменьшенияСуммыНДС, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];
	
	ТаблицаПереносаУменьшенияСуммыНДС = Параметры.ТаблицаУменьшенияСуммыНДС;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
		|	ТиповойОстаткиНДС.Организация КАК Организация,
		|	ТиповойОстаткиНДС.Субконто1 КАК ВидНалога,
		|	ТиповойОстаткиНДС.Субконто2 КАК ВидПлатежейВБюджетИФонды,
		|	СУММА(ВЫБОР
		|			КОГДА ТиповойОстаткиНДС.СуммаОстаток * -1 < ТиповойОстатки.СуммаОстаток
		|				ТОГДА ТиповойОстаткиНДС.СуммаОстаток * -1
		|			ИНАЧЕ ТиповойОстатки.СуммаОстаток
		|		КОНЕЦ) КАК Сумма,
		|	ТиповойОстаткиНДС.СтруктурноеПодразделение КАК СтруктурноеПодразделение
		|ИЗ
		|	РегистрБухгалтерии.Типовой.Остатки(
		|			&ДатаОстатков,
		|			Счет В (&СписокСчетовНДС),
		|			,
		|			Организация = &Организация
		|				И СтруктурноеПодразделение = &СтруктурноеПодразделение) КАК ТиповойОстаткиНДС
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Типовой.Остатки(
		|				&ДатаОстатков,
		|				Счет В (&СписокСчетов),
		|				,
		|				Организация = &Организация
		|					И СтруктурноеПодразделение = &СтруктурноеПодразделение) КАК ТиповойОстатки
		|		ПО (ТиповойОстаткиНДС.Организация = ТиповойОстатки.Организация)
		|			И (ТиповойОстаткиНДС.СтруктурноеПодразделение = ТиповойОстатки.СтруктурноеПодразделение)
		|			И (ТиповойОстаткиНДС.Субконто1 = ТиповойОстатки.Субконто1)
		|			И (ТиповойОстаткиНДС.Субконто2 = ТиповойОстатки.Субконто2)
		|			И (ТиповойОстаткиНДС.СуммаОстаток < 0)
		|			И (ТиповойОстатки.СуммаОстаток > 0)
		|
		|СГРУППИРОВАТЬ ПО
		|	ТиповойОстаткиНДС.Организация,
		|	ТиповойОстаткиНДС.СтруктурноеПодразделение,
		|	ТиповойОстаткиНДС.Субконто1,
		|	ТиповойОстаткиНДС.Субконто2";

	СписокСчетов = Новый СписокЗначений;
	СписокСчетов.Добавить(ПланыСчетов.Типовой.ИзлишнеУплаченныеВБюджетСуммыНДС);
	СписокСчетовНДС = Новый СписокЗначений;
	СписокСчетовНДС.Добавить(ПланыСчетов.Типовой.НалогНаДобавленнуюСтоимость);
	
	Запрос.УстановитьПараметр("СписокСчетов", СписокСчетов);
	Запрос.УстановитьПараметр("СписокСчетовНДС", СписокСчетовНДС);
	Запрос.УстановитьПараметр("ДатаОстатков", Новый Граница(КонецМесяца(Реквизиты.Период), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Организация",  Реквизиты.Организация);
	Запрос.УстановитьПараметр("СтруктурноеПодразделение", Реквизиты.СтруктурноеПодразделение);
	
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			НоваяСтрока =  ТаблицаПереносаУменьшенияСуммыНДС.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		КонецЦикла;
	КонецЕсли;	
	
	Возврат   ТаблицаПереносаУменьшенияСуммыНДС;
	
КонецФункции

Процедура СформироватьДвиженияПоУменьшениюСуммыНДС(ТаблицаПереносаУменьшенияСуммыНДС, ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Если ТаблицаПереносаУменьшенияСуммыНДС.Количество() = 0  Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизиты[0];
	
	КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	
	ОбщаяСумма = 0;
	
	Для Каждого СтрокаЗакрытия ИЗ ТаблицаПереносаУменьшенияСуммыНДС Цикл
		
		Если СтрокаЗакрытия.Сумма  <> 0 Тогда
			
			Проводка = Движения.Типовой.Добавить();
			Проводка.Период                = Реквизиты.Период;
			Проводка.Организация           = Реквизиты.Организация;				
			Проводка.СчетДт                = ПланыСчетов.Типовой.НалогНаДобавленнуюСтоимость;			
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"НалогиСборыОтчисления", СтрокаЗакрытия.ВидНалога);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"ВидыПлатежейВБюджетИФонды", СтрокаЗакрытия.ВидПлатежейВБюджетИФонды);
			
			Проводка.СчетКт                = ПланыСчетов.Типовой.ИзлишнеУплаченныеВБюджетСуммыНДС;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"НалогиСборыОтчисления",  СтрокаЗакрытия.ВидНалога);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ВидыПлатежейВБюджетИФонды", СтрокаЗакрытия.ВидПлатежейВБюджетИФонды);

			
			Проводка.Сумма                   = СтрокаЗакрытия.Сумма;
			Проводка.Содержание              = НСтр("ru='Уменьшение суммы НДС за счет аванса'", КодОсновногоЯзыка);
			Проводка.НомерЖурнала          	 = НСтр("ru = 'БУ'", КодОсновногоЯзыка);
			Проводка.ВидРегламентнойОперации = Перечисления.ВидыРегламентныхОпераций.РасчетНДСКЗачету;
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(Проводка, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);
			
			ОбщаяСумма = ОбщаяСумма + СтрокаЗакрытия.Сумма;
			
			Если Реквизиты.УчитыватьКПН И Реквизиты.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль Тогда
				
				СчетДтНУ = 	ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", ПланыСчетов.Типовой.НалогНаДобавленнуюСтоимость));
				СчетКтНУ = 	ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", ПланыСчетов.Типовой.ИзлишнеУплаченныеВБюджетСуммыНДС));
				
				Проводка	= Движения.Налоговый.Добавить();
				
				Проводка.Период                   = Реквизиты.Период;
				Проводка.Организация              = Реквизиты.Организация;				
				
				Проводка.СчетДт                   = ?(ЗначениеЗаполнено(СчетДтНУ),СчетДтНУ,ПланыСчетов.Налоговый.ПрочиеНалоги);			
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"НалогиСборыОтчисления",  СтрокаЗакрытия.ВидНалога);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"ВидыПлатежейВБюджетИФонды", СтрокаЗакрытия.ВидПлатежейВБюджетИФонды);

				Проводка.ВидУчетаДт = Справочники.ВидыУчетаНУ.НУ;
				
				Проводка.СчетКт                     = ?(ЗначениеЗаполнено(СчетКтНУ), СчетКтНУ,ПланыСчетов.Налоговый.НалоговыеАктивыПрочее);				
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"НалогиСборыОтчисления",  СтрокаЗакрытия.ВидНалога);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ВидыПлатежейВБюджетИФонды", СтрокаЗакрытия.ВидПлатежейВБюджетИФонды);

				Проводка.ВидУчетаКт = Справочники.ВидыУчетаНУ.НУ;
				Проводка.Сумма                    = СтрокаЗакрытия.Сумма;
				Проводка.Содержание               = НСтр("ru = 'Уменьшение суммы НДС за счет аванса'", КодОсновногоЯзыка);
				Проводка.НомерЖурнала             = НСтр("ru = 'НУ'", КодОсновногоЯзыка);	
				Проводка.ВидРегламентнойОперации    = Перечисления.ВидыРегламентныхОпераций.РасчетНДСКЗачету;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Движения.Типовой.Записать(Ложь);
	
	Если Реквизиты.УчитыватьКПН  И Реквизиты.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль Тогда
		Движения.Налоговый.Записать(Ложь);
	КонецЕсли;
	
	ТекстСообщения = СтрШаблон(НСтр("ru = '-------------------------------------------------------------------------------------
		|Зачет авансов и переплат по НДС. 
		|Уменьшение суммы НДС за счет аванса. Итого сумма : %1'", ОбщегоНазначения.КодОсновногоЯзыка()), ОбщаяСумма);
	
	ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации(ТекстСообщения, , , Реквизиты.Объект, Перечисления.ВидыРегламентныхОпераций.ЗачетАвансовИПереплатПоНДС, Ложь);
	
КонецПроцедуры

// закрытие подотчетных сумм

Функция ПолучитьТаблицуПодотчетныхСумм(ПоДаннымНУ)
	
	ОписаниеТипаЧисла15_2 		= ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2);

	ТаблицаПодотчетныхСумм = Новый ТаблицаЗначений;
	ТаблицаПодотчетныхСумм.Колонки.Добавить("Счет",			?(ПоДаннымНУ = Ложь,Новый ОписаниеТипов("ПланСчетовСсылка.Типовой"), Новый ОписаниеТипов("ПланСчетовСсылка.Налоговый")));
	ТаблицаПодотчетныхСумм.Колонки.Добавить("Работник", 	Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ТаблицаПодотчетныхСумм.Колонки.Добавить("Валюта",		Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	ТаблицаПодотчетныхСумм.Колонки.Добавить("Сумма", 		ОписаниеТипаЧисла15_2);
	ТаблицаПодотчетныхСумм.Колонки.Добавить("ВалютнаяСумма",ОписаниеТипаЧисла15_2);

	Возврат ТаблицаПодотчетныхСумм;

КонецФункции

Функция ПодготовитьПараметрыЗакрытияПодотчетныхСумм(ТаблицаПодотчетныхСумм, ТаблицаРеквизиты) 
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.ТаблицаРасчетСписанияРБП
	
	СписокОбязательныхКолонок = ""
	+ "Счет,"
	+ "Работник,"     
	+ "Валюта,"          
	+ "Сумма,"          
	+ "ВалютнаяСумма,"          
	;
	
	Параметры.Вставить("ТаблицаПодотчетныхСумм", 
		ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаПодотчетныхСумм, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
	+ "Период,"           				// <Дата>
	+ "Организация,"      				// <СправочникСсылка.Организации>
	+ "СтруктурноеПодразделение,"     	// <СправочникСсылка.Организации>
	+ "ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль," 
	+ "УчитыватьКПН," 
	+ "Регистратор"      				// <ДокументСсылка.*>
	;
	
	Если ТипЗнч(ТаблицаРеквизиты) = Тип("ТаблицаЗначений") Тогда
		Если ТаблицаРеквизиты.Колонки.Найти("Объект") <> Неопределено Тогда
			СписокОбязательныхКолонок = СписокОбязательныхКолонок + ",Объект";	
		КонецЕсли;
	КонецЕсли;	
	
	Параметры.Вставить("Реквизиты", 
		ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));
	
	Возврат Параметры;
	
КонецФункции 

Функция ПодготовитьТаблицуПодотчетныхСумм(ТаблицаРеквизиты, ПоДаннымНУ = Ложь, Отказ) Экспорт
	
	ТаблицаПодотчетныхСумм = ПолучитьТаблицуПодотчетныхСумм(ПоДаннымНУ);

	Параметры = ПодготовитьПараметрыЗакрытияПодотчетныхСумм(ТаблицаПодотчетныхСумм, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];

	ТаблицаЗакрытияПодотчетныхСумм = Параметры.ТаблицаПодотчетныхСумм;
	
	Запрос = Новый Запрос;
	Запрос.Текст =  "ВЫБРАТЬ
	                |	ТиповойОстатки.Счет,
	                |	ТиповойОстатки.Субконто1 КАК Работник,
	                |	ТиповойОстатки.Организация,
	                |	ТиповойОстатки.Валюта,
	                |	ТиповойОстатки.СуммаОстаток КАК Сумма,
	                |	ТиповойОстатки.ВалютнаяСуммаОстаток КАК ВалютнаяСумма,
	                |	ТиповойОстатки.СтруктурноеПодразделение
	                |ИЗ
	                |	РегистрБухгалтерии.Типовой.Остатки(&ДатаОстатков, Счет В (&СписокСчетов), , Организация = &Организация И СтруктурноеПодразделение = &СтруктурноеПодразделение) КАК ТиповойОстатки
	                |ГДЕ
	                |	ТиповойОстатки.СуммаОстаток < 0";
					
	СписокСчетов = Новый СписокЗначений;
	СписокСчетов.Добавить(ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПодотчетныхЛиц);
	СписокСчетов.Добавить(ПланыСчетов.Типовой.ДолгосрочнаяЗадолженностьПодотчетныхЛиц);
	
	Запрос.УстановитьПараметр("СписокСчетов", СписокСчетов);
	Запрос.УстановитьПараметр("ДатаОстатков", Новый Граница(КонецМесяца(Реквизиты.Период), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Организация",  Реквизиты.Организация);
	Запрос.УстановитьПараметр("СтруктурноеПодразделение", Реквизиты.СтруктурноеПодразделение);
	
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			НоваяСтрока =  ТаблицаЗакрытияПодотчетныхСумм.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		КонецЦикла;
	КонецЕсли;	
	
	Возврат   ТаблицаЗакрытияПодотчетныхСумм;
	
КонецФункции

Процедура СформироватьДвиженияПоЗакрытиюПодотчетныхСуммБУ(ТаблицаЗакрытияПодотчетныхСумм, ТаблицаРеквизиты, Движения, Отказ) Экспорт
	  	
	Если ТаблицаЗакрытияПодотчетныхСумм.Количество() = 0  Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизиты[0];
	
	КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	
	Для Каждого СтрокаЗакрытия ИЗ ТаблицаЗакрытияПодотчетныхСумм Цикл
		
		Проводка = Движения.Типовой.Добавить();
		Проводка.Период                = Реквизиты.Период;
		Проводка.Организация           = Реквизиты.Организация;				
		Проводка.СчетДт                = СтрокаЗакрытия.Счет;				
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"РаботникиОрганизаций", СтрокаЗакрытия.Работник);
		
		Проводка.СчетКт                = ?(СтрокаЗакрытия.Счет = ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПодотчетныхЛиц, ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПередПодотчетнымиЛицами, ПланыСчетов.Типовой.ДолгосрочнаяЗадолженностьПередПодотчетнымиЛицами);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"РаботникиОрганизаций", СтрокаЗакрытия.Работник);
		
		Если СтрокаЗакрытия.ВалютнаяСумма <> 0 Тогда
			Проводка.ВалютаДт 			   = СтрокаЗакрытия.Валюта;
			Проводка.ВалютнаяСуммаДт	   = -СтрокаЗакрытия.ВалютнаяСумма;
			Проводка.ВалютаКт 			   = СтрокаЗакрытия.Валюта;
			Проводка.ВалютнаяСуммаКт	   = -СтрокаЗакрытия.ВалютнаяСумма;
		КонецЕсли;
		
		Проводка.Сумма                   = -СтрокаЗакрытия.Сумма;
		Проводка.Содержание              = НСтр("ru='Закрытие подотчетных сумм'", КодОсновногоЯзыка);
		Проводка.НомерЖурнала          	 = НСтр("ru = 'БУ'", КодОсновногоЯзыка);
		Проводка.ВидРегламентнойОперации = Перечисления.ВидыРегламентныхОпераций.ЗакрытиеПодотчетныхСуммБУ;
		ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(Проводка, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);
		
	КонецЦикла;
	
	Движения.Типовой.Записать(Ложь);

КонецПроцедуры


// зачет авансовых платежей по налогам

Функция ПолучитьТаблицуНачисленийПоНалогам(ПоДаннымНУ)
	
	ТаблицаНачисленийПоНалогам = Новый ТаблицаЗначений;
	
	ТаблицаНачисленийПоНалогам.Колонки.Добавить("Счет",			?(ПоДаннымНУ = Ложь,Новый ОписаниеТипов("ПланСчетовСсылка.Типовой"), Новый ОписаниеТипов("ПланСчетовСсылка.Налоговый")));
	ТаблицаНачисленийПоНалогам.Колонки.Добавить("НалогСбор", 	Новый ОписаниеТипов("СправочникСсылка.НалогиСборыОтчисления"));
	ТаблицаНачисленийПоНалогам.Колонки.Добавить("Субконто2");
	ТаблицаНачисленийПоНалогам.Колонки.Добавить("Субконто3");
	ТаблицаНачисленийПоНалогам.Колонки.Добавить("Сумма", ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));

	Если ПоДаннымНУ Тогда
		ТаблицаНачисленийПоНалогам.Колонки.Добавить("ВидУчета", 	Новый ОписаниеТипов("СправочникСсылка.ВидыУчетаНУ"));
	КонецЕсли;
	
	Возврат ТаблицаНачисленийПоНалогам;

КонецФункции

Функция ПодготовитьПараметрыНачисленийПоНалогам(ТаблицаНачисленийПоНалогам, ТаблицаРеквизиты, ПоДаннымНУ) 
	
	Параметры = Новый Структура;
	
	СписокОбязательныхКолонок = ""
	+ "Счет,"
	+ "НалогСбор,"     
	+ "Субконто2,"          
	+ "Субконто3,"          
	+ "Сумма,"     
	+?(ПоДаннымНУ, "ВидУчета,", "")
	;
	
	Параметры.Вставить("ТаблицаНачисленийПоНалогам", 
		ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаНачисленийПоНалогам, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
	+ "Период,"           				// <Дата>
	+ "Организация,"      				// <СправочникСсылка.Организации>
	+ "СтруктурноеПодразделение,"     	// <СправочникСсылка.Организации>
	+ "ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль," 
	+ "УчитыватьКПН," 
	+ "Регистратор"      				// <ДокументСсылка.*>
	;
	
	Если ТипЗнч(ТаблицаРеквизиты) = Тип("ТаблицаЗначений") Тогда
		Если ТаблицаРеквизиты.Колонки.Найти("Объект") <> Неопределено Тогда
			СписокОбязательныхКолонок = СписокОбязательныхКолонок + ",Объект";	
		КонецЕсли;
	КонецЕсли;
	
	Параметры.Вставить("Реквизиты", 
		ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));
	
	Возврат Параметры;
	
КонецФункции 

Функция ПодготовитьТаблицуНачисленийПоНалогам(ТаблицаРеквизитов, ПоДаннымНУ, Отказ) Экспорт
	
	ТаблицаНачисленийПоНалогам = ПолучитьТаблицуНачисленийПоНалогам(ПоДаннымНУ);

	Параметры = ПодготовитьПараметрыНачисленийПоНалогам(ТаблицаНачисленийПоНалогам, ТаблицаРеквизитов, ПоДаннымНУ);
	Реквизиты = Параметры.Реквизиты[0];

	ТаблицаНачисленийПоНалогам = Параметры.ТаблицаНачисленийПоНалогам;

	Если ПоДаннымНУ И  НЕ Реквизиты.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль Тогда
		Возврат ТаблицаНачисленийПоНалогам;		
	КонецЕсли;	

	Запрос = Новый Запрос;
	Запрос.Текст =  "ВЫБРАТЬ
					|	Начисления.Субконто1 КАК НалогСбор,
					|	Начисления.Счет КАК Счет,	
					|	Начисления.СуммаОстатокКт КАК Сумма,
					|	Начисления.Субконто2,
					|	Начисления.Субконто3"+
					?(ПоДаннымНУ, ", Начисления.ВидУчета", " ") +"
					|ИЗ
					|	РегистрБухгалтерии.Типовой.Остатки(&ДатаЗапроса, Счет В ИЕРАРХИИ (&СписокСчетов), , Организация = &Организация И СтруктурноеПодразделение = &СтруктурноеПодразделение) КАК Начисления
					|
					|УПОРЯДОЧИТЬ ПО
					|	НалогСбор";
					
	
	СписокСчетов = Новый СписокЗначений;
	
	Если  ПоДаннымНУ Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Типовой","Налоговый");
		СписокСчетов.Добавить(ПланыСчетов.Налоговый.КорпоративныйПодоходныйНалог);
		СписокСчетов.Добавить(ПланыСчетов.Налоговый.ИндивидуальныйПодоходныйНалог);
		СписокСчетов.Добавить(ПланыСчетов.Налоговый.ПрочиеНалоги);
	Иначе
		СписокСчетов.Добавить(ПланыСчетов.Типовой.КорпоративныйПодоходныйНалогПодлежащийУплате);
		СписокСчетов.Добавить(ПланыСчетов.Типовой.ИндивидуальныйПодоходныйНалог);
		СписокСчетов.Добавить(ПланыСчетов.Типовой.Акцизы);
		СписокСчетов.Добавить(ПланыСчетов.Типовой.СоциальныйНалог);
		СписокСчетов.Добавить(ПланыСчетов.Типовой.ЗемельныйНалог);
		СписокСчетов.Добавить(ПланыСчетов.Типовой.НалогНаТранспортныеСредства);
		СписокСчетов.Добавить(ПланыСчетов.Типовой.НалогНаИмущество);
		СписокСчетов.Добавить(ПланыСчетов.Типовой.ПрочиеНалоги);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ДатаЗапроса", 			Новый Граница(КонецМесяца(Реквизиты.Период), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Организация", 			Реквизиты.Организация);
	Запрос.УстановитьПараметр("СтруктурноеПодразделение", Реквизиты.СтруктурноеПодразделение);
	Запрос.УстановитьПараметр("СписокСчетов", 			СписокСчетов);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = ТаблицаНачисленийПоНалогам.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Выборка);		
	КонецЦикла;
	
	Возврат  ТаблицаНачисленийПоНалогам;
	
КонецФункции

Функция ПодготовитьТаблицуАвансовыхПлатежейПоНалогам(ТаблицаРеквизитов, ПоДаннымНУ, Отказ) Экспорт
	
	ТаблицаАвансовПоНалогам = ПолучитьТаблицуНачисленийПоНалогам(ПоДаннымНУ);

	Параметры = ПодготовитьПараметрыНачисленийПоНалогам(ТаблицаАвансовПоНалогам, ТаблицаРеквизитов, ПоДаннымНУ);
	Реквизиты = Параметры.Реквизиты[0];

	ТаблицаАвансовПоНалогам = Параметры.ТаблицаНачисленийПоНалогам;
	
	Если ПоДаннымНУ И  НЕ Реквизиты.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль Тогда
		Возврат ТаблицаАвансовПоНалогам;		
	КонецЕсли;	

	Запрос = Новый Запрос;
	Запрос.Текст =  "ВЫБРАТЬ
					|	Авансы.Субконто1 КАК НалогСбор,
					|	Авансы.Счет КАК Счет,	
					|	Авансы.СуммаОстатокДт КАК Сумма,
					|	Авансы.Субконто2,
					|	ЕстьNull(Авансы.Субконто3, Неопределено) КАК Субконто3"+
					?(ПоДаннымНУ, ", Авансы.ВидУчета", " ") +"
					|ИЗ
					|	РегистрБухгалтерии.Типовой.Остатки(&ДатаЗапроса, Счет В ИЕРАРХИИ (&СписокСчетов), , Организация = &Организация И СтруктурноеПодразделение = &СтруктурноеПодразделение) КАК Авансы
					|
					|УПОРЯДОЧИТЬ ПО
					|	НалогСбор";
								
	
	СписокСчетов = Новый СписокЗначений;
	
	Если  ПоДаннымНУ Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Типовой","Налоговый");
		СписокСчетов.Добавить(ПланыСчетов.Налоговый.КорпоративныйПодоходныйНалогАвансы);
		СписокСчетов.Добавить(ПланыСчетов.Налоговый.НалоговыеАктивыПрочее);
	Иначе
		СписокСчетов.Добавить(ПланыСчетов.Типовой.КорпоративныйПодоходныйНалог);
		СписокСчетов.Добавить(ПланыСчетов.Типовой.ПрочиеНалогиИДругиеОбязательныеПлатежиВБюджет);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ДатаЗапроса", 				Новый Граница(КонецМесяца(Реквизиты.Период), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Организация", 				Реквизиты.Организация);
	Запрос.УстановитьПараметр("СтруктурноеПодразделение",   Реквизиты.СтруктурноеПодразделение);
	Запрос.УстановитьПараметр("СписокСчетов", 				СписокСчетов);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = ТаблицаАвансовПоНалогам.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Выборка);		
	КонецЦикла;
	
	Возврат  ТаблицаАвансовПоНалогам;
	
КонецФункции

Процедура СформироватьДвиженияПоЗачетуАвансовыхПлатежейБУ(ТаблицаНачисленийПоНалогам, ТаблицаАвансовыхПлатежейПоНалогам, ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Если ТаблицаНачисленийПоНалогам.Количество() = 0  Тогда
		Возврат;
	КонецЕсли;
	
	Если ТаблицаАвансовыхПлатежейПоНалогам.Количество() = 0  Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты       = ТаблицаРеквизиты[0];
	
	КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	
	Для Каждого СтрокаНачислений ИЗ ТаблицаНачисленийПоНалогам Цикл
		СуммаНачислений = СтрокаНачислений.Сумма;
		
		Для Каждого СтрокаАвансов Из ТаблицаАвансовыхПлатежейПоНалогам Цикл
			
			Если СуммаНачислений = 0 Тогда
				Прервать;
			КонецЕсли;
			
			Если (СтрокаНачислений.НалогСбор = СтрокаАвансов.НалогСбор) И 
				(СтрокаНачислений.Субконто2 = СтрокаАвансов.Субконто2) И 
				(СтрокаНачислений.Субконто3 = СтрокаАвансов.Субконто3 ИЛИ СтрокаАвансов.Субконто3 = Неопределено) И
				(СтрокаАвансов.Сумма > 0) Тогда
				
				СуммаЗачета = 0;
				Если СуммаНачислений >= СтрокаАвансов.Сумма Тогда
					СуммаЗачета = СтрокаАвансов.Сумма;
					СуммаНачислений = СуммаНачислений - СуммаЗачета;
					СтрокаАвансов.Сумма = 0;
				Иначе
					СуммаЗачета = СуммаНачислений;
					СтрокаАвансов.Сумма = СтрокаАвансов.Сумма - СуммаЗачета;
					СуммаНачислений = 0;
				КонецЕсли;
				
				Если СуммаЗачета = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				Проводка = Движения.Типовой.Добавить();
				Проводка.Период                = Реквизиты.Период;
				Проводка.Организация           = Реквизиты.Организация;				
				Проводка.СчетДт                = СтрокаНачислений.Счет;				
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,1, СтрокаНачислений.НалогСбор);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,2, СтрокаНачислений.Субконто2);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,3, СтрокаНачислений.Субконто3);
				
				Проводка.СчетКт                = СтрокаАвансов.Счет;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,1, СтрокаНачислений.НалогСбор);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,2, СтрокаНачислений.Субконто2);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,3, СтрокаНачислений.Субконто3);
				
				Проводка.Сумма                   = СуммаЗачета;
				Проводка.Содержание              = НСтр("ru='Зачет авансовых платежей по налогам и сборам'", КодОсновногоЯзыка);
				
				Проводка.НомерЖурнала          	 = НСтр("ru = 'БУ'", КодОсновногоЯзыка);
				Проводка.ВидРегламентнойОперации = Перечисления.ВидыРегламентныхОпераций.ЗачетАвансовыхПлатежейПоНалогамИСборамБУ;
				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(Проводка, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

	Движения.Типовой.Записать(Ложь);
КонецПроцедуры

Процедура СформироватьДвиженияПоЗачетуАвансовыхПлатежейНУ(ТаблицаНачисленийПоНалогам, ТаблицаАвансовыхПлатежейПоНалогам, ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Если ТаблицаНачисленийПоНалогам.Количество() = 0  Тогда
		Возврат;
	КонецЕсли;
	
	Если ТаблицаАвансовыхПлатежейПоНалогам.Количество() = 0  Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты       = ТаблицаРеквизиты[0];
	
	КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	
	Для Каждого СтрокаНачислений ИЗ ТаблицаНачисленийПоНалогам Цикл
		СуммаНачислений = СтрокаНачислений.Сумма;
		
		Для Каждого СтрокаАвансов Из ТаблицаАвансовыхПлатежейПоНалогам Цикл
			
			Если СуммаНачислений = 0 Тогда
				Прервать;
			КонецЕсли;
			Если (СтрокаНачислений.НалогСбор <> СтрокаАвансов.НалогСбор) 
				ИЛИ (СтрокаНачислений.Субконто2 <> СтрокаАвансов.Субконто2)  Тогда
				Продолжить;
			КонецЕсли;
			
			// Если на есть налога есть ВР, то это означает, что в прошлых периодах
			// имелась задолженность по налогу. В этом случае зачет может быть выполнен (есть начисленный ранее налог),
			Если СтрокаАвансов.ВидУчета <> СтрокаНачислений.ВидУчета
				И СтрокаНачислений.ВидУчета <> Справочники.ВидыУчетаНУ.ВР Тогда
				Продолжить;
			КонецЕсли;	
			
			// Зачет в пределах соответствующего НК. Допускаем так же возможность незаполненности
			// субконто на счете аванса.
			Если  (СтрокаНачислений.Субконто3 = СтрокаАвансов.Субконто3 ИЛИ СтрокаАвансов.Субконто3 = Неопределено) И
				(СтрокаАвансов.Сумма > 0) Тогда
				
				СуммаЗачета = 0;
				Если СуммаНачислений >= СтрокаАвансов.Сумма Тогда
					СуммаЗачета = СтрокаАвансов.Сумма;
					СуммаНачислений = СуммаНачислений - СуммаЗачета;
					СтрокаАвансов.Сумма = 0;
				Иначе
					СуммаЗачета = СуммаНачислений;
					СтрокаАвансов.Сумма = СтрокаАвансов.Сумма - СуммаЗачета;
					СуммаНачислений = 0;
				КонецЕсли;
				
				Если СуммаЗачета = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				Проводка = Движения.Налоговый.Добавить();
				Проводка.Период                = Реквизиты.Период;
				Проводка.Организация           = Реквизиты.Организация;				
				Проводка.СчетДт                = СтрокаНачислений.Счет;				
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,1, СтрокаНачислений.НалогСбор);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,2, СтрокаНачислений.Субконто2);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,3, СтрокаНачислений.Субконто3);
				
				// Если на есть налога есть ВР, то это означает, что в прошлых периодах
				// имелась задолженность по налогу. В этом случае зачет может быть выполнен (есть начисленный ранее налог),
				// но отражаем его с видом учета НУ со стороны счета налога. Для того чтобы учесть в последующих корректировках вычета.
				// Виды учета ПР и НУ отражаем с исходным видом учета.				
				Проводка.ВидУчетаДт            = ?(СтрокаНачислений.ВидУчета = Справочники.ВидыУчетаНУ.ВР, Справочники.ВидыУчетаНУ.НУ,СтрокаНачислений.ВидУчета);
				
				Проводка.СчетКт                = СтрокаАвансов.Счет;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,1, СтрокаНачислений.НалогСбор);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,2, СтрокаНачислений.Субконто2);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,3, СтрокаНачислений.Субконто3);
				Проводка.ВидУчетаКт            = СтрокаАвансов.ВидУчета;				
				
				Проводка.Сумма                   = СуммаЗачета;
				Проводка.Содержание              = НСтр("ru='Зачет авансовых платежей по налогам и сборам'", КодОсновногоЯзыка);
				Проводка.НомерЖурнала            = НСтр("ru = 'НУ'", КодОсновногоЯзыка);
				Проводка.ВидРегламентнойОперации = Перечисления.ВидыРегламентныхОпераций.ЗачетАвансовыхПлатежейПоНалогамИСборамНУ;
				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(Проводка, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
//	Движения.Налоговый.Записывать = Истина;
	Движения.Налоговый.Записать(Ложь);

КонецПроцедуры
	
// ОС в НУ

Процедура РасчетВычетовПоРасходамНаРемонтФАНУ(ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Реквизиты = ТаблицаРеквизиты[0];
	
	КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	
	Запрос = Новый Запрос;		
	
	// отбираем данные только по ФА, находящимся на учете.
	// Выбывший актив может иметь стоимостной баланс и участвовать в учете ст. 
	СостоянияФА = Новый СписокЗначений();	
	СостоянияФА.Добавить(Перечисления.ВидыСостоянийФА.ПринятКУчету);
	СостоянияФА.Добавить(Перечисления.ВидыСостоянийФА.Выбыл);
	
	Запрос.УстановитьПараметр("СостоянияФА", 	СостоянияФА);		
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ОбъектыНалоговогоУчетаФА.Организация КАК Организация,
	               |	ОбъектыНалоговогоУчетаФА.ФиксированныйАктив КАК ФиксированныйАктив,
	               |	ОбъектыНалоговогоУчетаФА.ГруппаНУ КАК ГруппаФА,
	               |	ОбъектыНалоговогоУчетаФА.СостояниеФиксированногоАктива КАК СостояниеФиксированногоАктива,
	               |	ВЫБОР
	               |		КОГДА ФиксированныеАктивыУчитываемыеОтдельно.Событие ЕСТЬ NULL 
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК ВходитВСтоимостныйБалансГруппы
	               |ПОМЕСТИТЬ ВТ_ОбъектыНалоговогоУчетаФА
	               |ИЗ
	               |	РегистрСведений.ОбъектыНалоговогоУчетаФА.СрезПоследних(
	               |			&ДатаОкончания,
	               |			Организация В (&СписокОрганизаций)
	               |				И СостояниеФиксированногоАктива В (&СостоянияФА)) КАК ОбъектыНалоговогоУчетаФА
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФиксированныеАктивыУчитываемыеОтдельно.СрезПоследних(&ДатаОкончания, Организация В (&СписокОрганизаций)) КАК ФиксированныеАктивыУчитываемыеОтдельно
	               |		ПО ОбъектыНалоговогоУчетаФА.Организация = ФиксированныеАктивыУчитываемыеОтдельно.Организация
	               |			И ОбъектыНалоговогоУчетаФА.ФиксированныйАктив = ФиксированныеАктивыУчитываемыеОтдельно.ФиксированныйАктив
	               |			И ((НЕ ФиксированныеАктивыУчитываемыеОтдельно.Событие = ЗНАЧЕНИЕ(Перечисление.СобытияФАУчитываемыхОтдельно.ВключениеВСоставГруппы)))
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СтоимостьВА_НУ.Организация КАК Организация,
	               |	СтоимостьВА_НУ.Субконто1 КАК ФиксированныйАктив,
	               |	СтоимостьВА_НУ.Счет КАК Счет,
	               |	СУММА(ВЫБОР
	               |			КОГДА СтоимостьВА_НУ.Субконто2 В (&ДвижениеПоступления)
	               |				ТОГДА СтоимостьВА_НУ.СуммаОборотДт - СтоимостьВА_НУ.СуммаОборотКт
	               |		КОНЕЦ) КАК Поступление,
	               |	СУММА(ВЫБОР
	               |			КОГДА СтоимостьВА_НУ.Субконто2 = ЗНАЧЕНИЕ(Перечисление.ВидыДвиженияСтоимостиФА.Выбытие) ИЛИ СтоимостьВА_НУ.Субконто2 = ЗНАЧЕНИЕ(Перечисление.ВидыДвиженияСтоимостиФА.Перемещение)
	               |				ТОГДА СтоимостьВА_НУ.СуммаОборотКт - СтоимостьВА_НУ.СуммаОборотДт
	               |		КОНЕЦ) КАК Выбытие,
	               |	МАКСИМУМ(СтоимостьВА_НУ.СуммаНачальныйОстатокДт) КАК НачальныйОстаток,
	               |	МАКСИМУМ(СтоимостьВА_НУ.СуммаКонечныйОстатокДт) КАК КонечныйОстаток
	               |ПОМЕСТИТЬ ВТ_СтоимостьВА_НУ
	               |ИЗ
	               |	РегистрБухгалтерии.Налоговый.ОстаткиИОбороты(
	               |			&ДатаНачала,
	               |			&ДатаОкончания,
	               |			,
	               |			,
	               |			Счет В ИЕРАРХИИ (&СчетУчетаВА),
	               |			,
	               |			((СУБКОНТО1, ОРГАНИЗАЦИЯ) В
	               |					(ВЫБРАТЬ
	               |						ВЫРАЗИТЬ(ВТ_ОбъектыНалоговогоУчетаФА.ФиксированныйАктив КАК Справочник.ОсновныеСредства),
	               |						ВТ_ОбъектыНалоговогоУчетаФА.Организация
	               |					ИЗ
	               |						ВТ_ОбъектыНалоговогоУчетаФА)
	               |				ИЛИ (СУБКОНТО1, ОРГАНИЗАЦИЯ) В
	               |					(ВЫБРАТЬ
	               |						ВЫРАЗИТЬ(ВТ_ОбъектыНалоговогоУчетаФА.ФиксированныйАктив КАК Справочник.НематериальныеАктивы),
	               |						ВТ_ОбъектыНалоговогоУчетаФА.Организация
	               |					ИЗ
	               |						ВТ_ОбъектыНалоговогоУчетаФА))
	               |				И ВидУчета = ЗНАЧЕНИЕ(Справочник.ВидыУчетаНУ.НУ)) КАК СтоимостьВА_НУ
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	СтоимостьВА_НУ.Организация,
	               |	СтоимостьВА_НУ.Субконто1,
	               |	СтоимостьВА_НУ.Счет
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЗатратыНаРемонтВА_НУ.СубконтоДт1 КАК ФиксированныйАктив,
	               |	ЗатратыНаРемонтВА_НУ.СубконтоДт3 КАК СтатьяЗатрат,
	               |	ЗатратыНаРемонтВА_НУ.Организация КАК Организация,
	               |	ЗатратыНаРемонтВА_НУ.СуммаОборот КАК СуммаОборотДт
	               |ПОМЕСТИТЬ ВТ_ЗатратыНаРемонтВА_НУ
	               |ИЗ
	               |	РегистрБухгалтерии.Налоговый.ОборотыДтКт(
	               |			&ДатаНачала,
	               |			&ДатаОкончания,
	               |			,
	               |			СчетДт В ИЕРАРХИИ (&СчетРемонтаВА_НУ),
	               |			&СписокСубконтоСчетаРемонта,
	               |			,
	               |			,
	               |			Организация В (&СписокОрганизаций)
	               |				И ((СУБКОНТОДт1, ОРГАНИЗАЦИЯ) В
	               |						(ВЫБРАТЬ
	               |							ВЫРАЗИТЬ(ВТ_ОбъектыНалоговогоУчетаФА.ФиксированныйАктив КАК Справочник.ОсновныеСредства),
	               |							ВТ_ОбъектыНалоговогоУчетаФА.Организация
	               |						ИЗ
	               |							ВТ_ОбъектыНалоговогоУчетаФА)
	               |					ИЛИ (СУБКОНТОДт1, ОРГАНИЗАЦИЯ) В
	               |						(ВЫБРАТЬ
	               |							ВЫРАЗИТЬ(ВТ_ОбъектыНалоговогоУчетаФА.ФиксированныйАктив КАК Справочник.НематериальныеАктивы),
	               |							ВТ_ОбъектыНалоговогоУчетаФА.Организация
	               |						ИЗ
	               |							ВТ_ОбъектыНалоговогоУчетаФА))
	               |				И СубконтоДт2 = ЗНАЧЕНИЕ(Перечисление.ВидыРемонтаВА.Капитальный)
	               |				И ВидУчетаДт = ЗНАЧЕНИЕ(Справочник.ВидыУчетаНУ.НУ)) КАК ЗатратыНаРемонтВА_НУ
	               |
	               |ОБЪЕДИНИТЬ
	               |
	               |ВЫБРАТЬ
	               |	ЗатратыНаРемонтВА_НУ.СубконтоКт1,
	               |	ЗатратыНаРемонтВА_НУ.СубконтоКт3,
	               |	ЗатратыНаРемонтВА_НУ.Организация,
	               |	ЗатратыНаРемонтВА_НУ.СуммаОборот * -1
	               |ИЗ
	               |	РегистрБухгалтерии.Налоговый.ОборотыДтКт(
	               |			&ДатаНачала,
	               |			&ДатаОкончания,
	               |			,
	               |			НЕ СчетДт В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ИтоговаяПрибыльИтоговыйУбыток_), ЗНАЧЕНИЕ(ПланСчетов.Налоговый.Производство_)),
	               |			,
	               |			СчетКт В ИЕРАРХИИ (&СчетРемонтаВА_НУ),
	               |			&СписокСубконтоСчетаРемонта,
	               |			Организация В (&СписокОрганизаций)
	               |				И ((СУБКОНТОКт1, ОРГАНИЗАЦИЯ) В
	               |						(ВЫБРАТЬ
	               |							ВЫРАЗИТЬ(ВТ_ОбъектыНалоговогоУчетаФА.ФиксированныйАктив КАК Справочник.ОсновныеСредства),
	               |							ВТ_ОбъектыНалоговогоУчетаФА.Организация
	               |						ИЗ
	               |							ВТ_ОбъектыНалоговогоУчетаФА)
	               |					ИЛИ (СУБКОНТОКт1, ОРГАНИЗАЦИЯ) В
	               |						(ВЫБРАТЬ
	               |							ВЫРАЗИТЬ(ВТ_ОбъектыНалоговогоУчетаФА.ФиксированныйАктив КАК Справочник.НематериальныеАктивы),
	               |							ВТ_ОбъектыНалоговогоУчетаФА.Организация
	               |						ИЗ
	               |							ВТ_ОбъектыНалоговогоУчетаФА))
	               |				И ВидУчетаКт = ЗНАЧЕНИЕ(Справочник.ВидыУчетаНУ.НУ)) КАК ЗатратыНаРемонтВА_НУ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ОбъектыНалоговогоУчетаФА.ГруппаФА КАК ГруппаФА,
	               |	СУММА(ЕСТЬNULL(СтоимостьВА_НУ.НачальныйОстаток, 0) + ЕСТЬNULL(СтоимостьВА_НУ.Поступление, 0) - ЕСТЬNULL(СтоимостьВА_НУ.Выбытие, 0)) КАК СтоимостьНУ,
	               |	ВЫБОР
	               |		КОГДА ОбъектыНалоговогоУчетаФА.ГруппаФА.ВидУчетаВГруппеФА = ЗНАЧЕНИЕ(Перечисление.ВидыНалоговогоУчетаВГруппахФА.ПоОбъектам)
	               |			ТОГДА ОбъектыНалоговогоУчетаФА.ФиксированныйАктив
	               |		ИНАЧЕ ОбъектыНалоговогоУчетаФА.ГруппаФА
	               |	КОНЕЦ КАК ГруппаУчетаФА,
	               |	СУММА(ЕСТЬNULL(ЗатратыНаРемонтВА_НУ.СуммаОборотДт, 0)) КАК ЗатратыНаРемонтНУ
	               |ПОМЕСТИТЬ ВТ_ИтогиПоГруппамНУ
	               |ИЗ
	               |	ВТ_ОбъектыНалоговогоУчетаФА КАК ОбъектыНалоговогоУчетаФА
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			СУММА(ЗатратыНаРемонтВА_НУ.СуммаОборотДт) КАК СуммаОборотДт,
	               |			ЗатратыНаРемонтВА_НУ.Организация КАК Организация,
	               |			ЗатратыНаРемонтВА_НУ.ФиксированныйАктив КАК ФиксированныйАктив
	               |		ИЗ
	               |			ВТ_ЗатратыНаРемонтВА_НУ КАК ЗатратыНаРемонтВА_НУ
	               |		
	               |		СГРУППИРОВАТЬ ПО
	               |			ЗатратыНаРемонтВА_НУ.Организация,
	               |			ЗатратыНаРемонтВА_НУ.ФиксированныйАктив) КАК ЗатратыНаРемонтВА_НУ
	               |		ПО ОбъектыНалоговогоУчетаФА.Организация = ЗатратыНаРемонтВА_НУ.Организация
	               |			И ОбъектыНалоговогоУчетаФА.ФиксированныйАктив = ЗатратыНаРемонтВА_НУ.ФиксированныйАктив
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СтоимостьВА_НУ КАК СтоимостьВА_НУ
	               |		ПО (СтоимостьВА_НУ.Организация = ОбъектыНалоговогоУчетаФА.Организация)
	               |			И (СтоимостьВА_НУ.ФиксированныйАктив = ОбъектыНалоговогоУчетаФА.ФиксированныйАктив)
	               |			И (ОбъектыНалоговогоУчетаФА.ВходитВСтоимостныйБалансГруппы = ИСТИНА)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ОбъектыНалоговогоУчетаФА.ГруппаФА,
	               |	ВЫБОР
	               |		КОГДА ОбъектыНалоговогоУчетаФА.ГруппаФА.ВидУчетаВГруппеФА = ЗНАЧЕНИЕ(Перечисление.ВидыНалоговогоУчетаВГруппахФА.ПоОбъектам)
	               |			ТОГДА ОбъектыНалоговогоУчетаФА.ФиксированныйАктив
	               |		ИНАЧЕ ОбъектыНалоговогоУчетаФА.ГруппаФА
	               |	КОНЕЦ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВЫБОР
	               |		КОГДА ОбъектыНалоговогоУчетаФА.ФиксированныйАктив = СведенияОГруппахФиксированныхАктивовСрезПоследних.ФиксированныйАктив
	               |				И СведенияОГруппахФиксированныхАктивовСрезПоследних.Организация = ОбъектыНалоговогоУчетаФА.Организация
	               |			ТОГДА 1
	               |		КОГДА ОбъектыНалоговогоУчетаФА.ФиксированныйАктив = СведенияОГруппахФиксированныхАктивовСрезПоследних.ФиксированныйАктив
	               |				И СведенияОГруппахФиксированныхАктивовСрезПоследних.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	               |			ТОГДА 2						   
	               |		КОГДА СведенияОГруппахФиксированныхАктивовСрезПоследних.Организация = ОбъектыНалоговогоУчетаФА.Организация
	               |			ТОГДА 3
	               |		КОГДА СведенияОГруппахФиксированныхАктивовСрезПоследних.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	               |			ТОГДА 4
	               |		ИНАЧЕ 5
	               |	КОНЕЦ КАК Приоритет,
	               |	ОбъектыНалоговогоУчетаФА.ГруппаФА КАК ГруппаФА,
	               |	ОбъектыНалоговогоУчетаФА.Организация КАК Организация,
	               |	ОбъектыНалоговогоУчетаФА.ФиксированныйАктив КАК ФиксированныйАктив,
	               |	ОбъектыНалоговогоУчетаФА.СостояниеФиксированногоАктива КАК СостояниеФиксированногоАктива,
	               |	СведенияОГруппахФиксированныхАктивовСрезПоследних.ГруппаФА.ВидУчетаВГруппеФА КАК ВидУчетаВГруппеФА,
	               |	СведенияОГруппахФиксированныхАктивовСрезПоследних.ВычетНаРемонт КАК ВычетНаРемонт
	               |ПОМЕСТИТЬ ВТ_СведенияОГруппахФА
	               |ИЗ
	               |	ВТ_ОбъектыНалоговогоУчетаФА КАК ОбъектыНалоговогоУчетаФА
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОГруппахФиксированныхАктивов.СрезПоследних(&ДатаОкончания, ) КАК СведенияОГруппахФиксированныхАктивовСрезПоследних
	               |		ПО (ОбъектыНалоговогоУчетаФА.Организация = СведенияОГруппахФиксированныхАктивовСрезПоследних.Организация
	               |				ИЛИ СведенияОГруппахФиксированныхАктивовСрезПоследних.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
	               |			И (ОбъектыНалоговогоУчетаФА.ГруппаФА = СведенияОГруппахФиксированныхАктивовСрезПоследних.ГруппаФА
	               |					И СведенияОГруппахФиксированныхАктивовСрезПоследних.ФиксированныйАктив = НЕОПРЕДЕЛЕНО
	               |				ИЛИ СведенияОГруппахФиксированныхАктивовСрезПоследних.ГруппаФА.ВидУчетаВГруппеФА = ЗНАЧЕНИЕ(Перечисление.ВидыНалоговогоУчетаВГруппахФА.ПоОбъектам)
	               |					И ОбъектыНалоговогоУчетаФА.ФиксированныйАктив = СведенияОГруппахФиксированныхАктивовСрезПоследних.ФиксированныйАктив)
	               |ГДЕ
	               |	(НЕ ОбъектыНалоговогоУчетаФА.ГруппаФА = ЗНАЧЕНИЕ(Справочник.ГруппыНалоговогоУчетаФА.ПустаяСсылка))
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ГруппыФА.ГруппаФА КАК ГруппаФА,
	               |	ГруппыФА.Организация КАК Организация,
	               |	ГруппыФА.ФиксированныйАктив КАК ФиксированныйАктив,
	               |	ГруппыФА.СостояниеФиксированногоАктива КАК СостояниеФиксированногоАктива,
	               |	СведенияОГруппахФА.ГруппаФА.ВидУчетаВГруппеФА КАК ВидУчетаВГруппеФА,
	               |	СведенияОГруппахФА.ВычетНаРемонт КАК ВычетНаРемонт,
	               |	ВЫБОР
	               |		КОГДА ГруппыФА.ГруппаФА.ВидУчетаВГруппеФА = ЗНАЧЕНИЕ(Перечисление.ВидыНалоговогоУчетаВГруппахФА.ПоОбъектам)
	               |			ТОГДА ГруппыФА.ФиксированныйАктив
	               |		ИНАЧЕ ГруппыФА.ГруппаФА
	               |	КОНЕЦ КАК ГруппаУчетаФА
	               |ПОМЕСТИТЬ ВТ_ГруппыФА
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		ГруппыФА.ГруппаФА КАК ГруппаФА,
	               |		ГруппыФА.Организация КАК Организация,
	               |		ГруппыФА.ФиксированныйАктив КАК ФиксированныйАктив,
	               |		МИНИМУМ(ГруппыФА.Приоритет) КАК Приоритет,
	               |		ГруппыФА.СостояниеФиксированногоАктива КАК СостояниеФиксированногоАктива
	               |	ИЗ
	               |		ВТ_СведенияОГруппахФА КАК ГруппыФА
	               |	
	               |	СГРУППИРОВАТЬ ПО
	               |		ГруппыФА.ФиксированныйАктив,
	               |		ГруппыФА.Организация,
	               |		ГруппыФА.ГруппаФА,
	               |		ГруппыФА.СостояниеФиксированногоАктива) КАК ГруппыФА
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СведенияОГруппахФА КАК СведенияОГруппахФА
	               |		ПО ГруппыФА.Организация = СведенияОГруппахФА.Организация
	               |			И ГруппыФА.ФиксированныйАктив = СведенияОГруппахФА.ФиксированныйАктив
	               |			И ГруппыФА.Приоритет = СведенияОГруппахФА.Приоритет
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ГруппыФА.Организация КАК Организация,
	               |	ГруппыФА.ГруппаФА КАК ГруппаФА,
	               |	ГруппыФА.ФиксированныйАктив КАК ФиксированныйАктив,
	               |	ГруппыФА.ВидУчетаВГруппеФА КАК ВидУчетаВГруппеФА,
	               |	ГруппыФА.СостояниеФиксированногоАктива,
	               |	ГруппыФА.ВычетНаРемонт КАК ВычетНаРемонт,
	               |	ЗатратыНаРемонтВА_НУ.СтатьяЗатрат КАК СтатьяЗатрат,
	               |	ЕСТЬNULL(ЗатратыНаРемонтВА_НУ.СуммаОборотДт, 0) КАК ЗатратыНаРемонтНУ,
	               |	СтоимостьВА_НУ.Счет КАК СчетУчетаФА,
	               |	ЕСТЬNULL(ИтогиПоГруппамНУ.СтоимостьНУ, 0) КАК ИтоговаяСтоимостьГруппыНУ,
	               |	ЕСТЬNULL(ИтогиПоГруппамНУ.ЗатратыНаРемонтНУ, 0) КАК ИтоговыеЗатратыНаРемонтГруппыНУ,
	               |	ВЫБОР
	               |		КОГДА ЕСТЬNULL(ИтогиПоГруппамНУ.СтоимостьНУ * ГруппыФА.ВычетНаРемонт / 100, 0) > ИтогиПоГруппамНУ.ЗатратыНаРемонтНУ
	               |			ТОГДА ЕСТЬNULL(ИтогиПоГруппамНУ.ЗатратыНаРемонтНУ, 0)
	               |		ИНАЧЕ ЕСТЬNULL(ИтогиПоГруппамНУ.СтоимостьНУ * ГруппыФА.ВычетНаРемонт / 100, 0)
	               |	КОНЕЦ КАК РазмерДопустимогоВычетаПоГруппе,
	               |	ЕСТЬNULL(СтоимостьВА_НУ.НачальныйОстаток, 0) + ЕСТЬNULL(СтоимостьВА_НУ.Поступление, 0) - ЕСТЬNULL(СтоимостьВА_НУ.Выбытие, 0) КАК СтоимостьНУ,
	               |	ГруппыФА.ГруппаУчетаФА КАК ГруппаУчетаФА
	               |ИЗ
	               |	ВТ_ГруппыФА КАК ГруппыФА
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СтоимостьВА_НУ КАК СтоимостьВА_НУ
	               |		ПО ГруппыФА.Организация = СтоимостьВА_НУ.Организация
	               |			И ГруппыФА.ФиксированныйАктив = СтоимостьВА_НУ.ФиксированныйАктив
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ЗатратыНаРемонтВА_НУ КАК ЗатратыНаРемонтВА_НУ
	               |		ПО ГруппыФА.Организация = ЗатратыНаРемонтВА_НУ.Организация
	               |			И ГруппыФА.ФиксированныйАктив = ЗатратыНаРемонтВА_НУ.ФиксированныйАктив
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ИтогиПоГруппамНУ КАК ИтогиПоГруппамНУ
	               |		ПО ГруппыФА.ГруппаУчетаФА = ИтогиПоГруппамНУ.ГруппаУчетаФА
	               |ИТОГИ
	               |	МАКСИМУМ(ВидУчетаВГруппеФА),
	               |	МАКСИМУМ(ВычетНаРемонт),
	               |	СУММА(ЗатратыНаРемонтНУ),
	               |	МАКСИМУМ(ИтоговаяСтоимостьГруппыНУ),
	               |	МАКСИМУМ(ИтоговыеЗатратыНаРемонтГруппыНУ),
	               |	МАКСИМУМ(РазмерДопустимогоВычетаПоГруппе),
	               |	МАКСИМУМ(СтоимостьНУ)
	               |ПО
	               |	ГруппаУчетаФА,
	               |	ФиксированныйАктив";
					   
	Запрос.УстановитьПараметр("СостоянияФА", 		СостоянияФА);					   
	Запрос.УстановитьПараметр("ДатаНачала",			НачалоГода(Реквизиты.Период));			
	
	Запрос.УстановитьПараметр("ДатаОкончания", 		КонецМесяца(Реквизиты.Период));			
	Запрос.УстановитьПараметр("СписокОрганизаций",	ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.СформироватьСписокСтруктурныхЕдиниц(Перечисления.РазделыНалоговогоУчета.КПН, , Реквизиты.Организация));
	
	Запрос.УстановитьПараметр("СубконтоВА",			ПланыВидовХарактеристик.ВидыСубконтоТиповые.ВнеоборотныеАктивы);	
	Запрос.УстановитьПараметр("СчетУчетаВА",		ПланыСчетов.Налоговый.ВнеоборотныеАктивы);	
	
	Запрос.УстановитьПараметр("СчетРемонтаВА_НУ",	ПланыСчетов.Налоговый.РасходыНаРемонтВА);
	
	СписокВидовДвиженияПоступления = Новый СписокЗначений;
	СписокВидовДвиженияПоступления.Добавить(Перечисления.ВидыДвиженияСтоимостиФА.Поступление);
	// Этот вид движения участвует в стоимостном балансе начиная с 01.01.2009, ст. 117 НК
	Если НачалоГода(КонецМесяца(Реквизиты.Период)) >= Дата(2009,1,1)Тогда
		СписокВидовДвиженияПоступления.Добавить(Перечисления.ВидыДвиженияСтоимостиФА.УвеличениеСтоимостиЗаСчетРемонта);
	КонецЕсли;	
	
	Запрос.УстановитьПараметр("ДвижениеПоступления",	СписокВидовДвиженияПоступления);
				
	МассивСубконтоЗатратНаРемонт = Новый Массив;
	МассивСубконтоЗатратНаРемонт.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.ВнеоборотныеАктивы);
	МассивСубконтоЗатратНаРемонт.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.ВидыРемонтаВА);
	МассивСубконтоЗатратНаРемонт.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.СтатьиЗатрат);
	
	Запрос.УстановитьПараметр("СписокСубконтоСчетаРемонта",	МассивСубконтоЗатратНаРемонт);
		
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() ТОгда
		Возврат;
	КонецЕсли;
	/////////////////////////////////////////////////////////////////////////////////////////////////////////
	ВыборкаГрупп = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);	
	Пока  ВыборкаГрупп.Следующий() Цикл				
			
		ДопустимыйВычетПоГруппе = Мин(Макс(0,Окр(ВыборкаГрупп.РазмерДопустимогоВычетаПоГруппе,2)), ВыборкаГрупп.ЗатратыНаРемонтНУ);		
		
		ВыборкаФА = ВыборкаГрупп.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока  ВыборкаФА.Следующий() Цикл	
			Если КонецМесяца(Реквизиты.Период) >= Дата(2009,1,1) Тогда
				// с 2009 года весь капитальный ремонт относим на увеличение стоимости
				ДоляОтнесенияЗатратПоАктиву = 0;
				ЗатратыНаРемонтКВычету = 0;
			Иначе	
				// до 2009 года капитальный ремонт принимали к вычету в указанном размере от стоимостного баланса
				// группы. Превышение - на увеличение стоимости
				///////////////////////////////////////////////////////
				// Если в группе ведется по-объектный учет			
				// Допустимый вычет рассчитываем по каждому объекту			
				Если ВыборкаФА.ВидУчетаВГруппеФА = Перечисления.ВидыНалоговогоУчетаВГруппахФА.ПоОбъектам Тогда				
					ДоляОтнесенияЗатратПоАктиву = 1;
					ЗатратыНаРемонтКВычету = ДопустимыйВычетПоГруппе;
				Иначе	
					ДоляОтнесенияЗатратПоАктиву = ?(ВыборкаГрупп.ЗатратыНаРемонтНУ = 0, 0,ДопустимыйВычетПоГруппе/ВыборкаГрупп.ЗатратыНаРемонтНУ);
					ЗатратыНаРемонтКВычету = Окр(ДоляОтнесенияЗатратПоАктиву * ВыборкаФА.ЗатратыНаРемонтНУ, 2);			
				КонецЕсли;							
			КонецЕсли;	
			ЗатратыНаУвеличениеСтоимости  = Окр(ВыборкаФА.ЗатратыНаРемонтНУ - ЗатратыНаРемонтКВычету, 2);					
			ОсталосьСписать = ЗатратыНаУвеличениеСтоимости;
			
			ВыборкаДетали = ВыборкаФА.Выбрать();
			// списываем расходы по статьям затрат			
			ЕстьЗаписи = ВыборкаДетали.Следующий();
			Пока ЕстьЗаписи и Не ОсталосьСписать = 0 Цикл			
					ДоляСтатьиЗатрат 		= ?(ВыборкаФА.ЗатратыНаРемонтНУ = 0, 0, ВыборкаДетали.ЗатратыНаРемонтНУ/ВыборкаФА.ЗатратыНаРемонтНУ);			
					ВидУчетаВПроводку 		= Справочники.ВидыУчетаНУ.НУ;					
					
					ПроводкаНУ 				= Движения.Налоговый.Добавить();
					ПроводкаНУ.Период 		= Реквизиты.Период;
					ПроводкаНУ.Организация 	= ВыборкаДетали.Организация;
					
					// По активам I Группы, если актив Выбыл - расходы на ремонт
					// уменьшают доход от реализации ФА в кодексе до 2009 года
					Если Реквизиты.Период < Дата(2009,1,1) И ВыборкаДетали.ВидУчетаВГруппеФА = Перечисления.ВидыНалоговогоУчетаВГруппахФА.ПоОбъектам И 
						ВыборкаДетали.СостояниеФиксированногоАктива = Перечисления.ВидыСостоянийФА.Выбыл Тогда						
						
						ПроводкаНУ.СчетДт 		= ПланыСчетов.Налоговый.ДоходыОтРеализацииВнеоборотныхАктивов;				
						
						ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 1, Справочники.Доходы.ДоходыОтВыбытияФА);
						ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 2, ВыборкаДетали.ФиксированныйАктив);				
						ПроводкаНУ.ВидУчетаДт 	= ВидУчетаВПроводку;
					Иначе					
						ПроводкаНУ.СчетДт 		= ВыборкаДетали.СчетУчетаФА;				
						ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 1, ВыборкаДетали.ФиксированныйАктив);
						ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 2, Перечисления.ВидыДвиженияСтоимостиФА.УвеличениеСтоимостиЗаСчетРемонта);				
						ПроводкаНУ.ВидУчетаДт 	= ВидУчетаВПроводку;
					КонецЕсли;
				
					ПроводкаНУ.СчетКт 		= ПланыСчетов.Налоговый.РасходыНаРемонтВА;
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 1, ВыборкаДетали.СтатьяЗатрат);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 2, ВыборкаДетали.ФиксированныйАктив);				
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 3, Перечисления.ВидыРемонтаВА.Капитальный);				
					ПроводкаНУ.ВидУчетаКт 	= ВидУчетаВПроводку;		
					
					СуммаВПроводку = Окр(ОсталосьСписать *ДоляСтатьиЗатрат, 2);
					
					// так как смещается курсор выборки запомним значение в переменные
					СтатьяЗатратВПроводку = ВыборкаДетали.СтатьяЗатрат;
					ОрганизацияВПроводку = ВыборкаДетали.Организация;
					
					ЕстьЗаписи = ВыборкаДетали.Следующий();
					Если не ЕстьЗаписи Тогда
						СуммаВПроводку = ОсталосьСписать;
					КонецЕсли;	
						
					
					ПроводкаНУ.Сумма 		= СуммаВПроводку;
					ПроводкаНУ.Содержание 	= НСтр("ru='Затраты по капитальному ремонту отнесены на увеличение стоимости(НУ)'", КодОсновногоЯзыка);									
					ПроводкаНУ.ВидРегламентнойОперации 	= Перечисления.ВидыРегламентныхОпераций.РасчетВычетовПоРасходамНаРемонт;									
												
					
					///////////////////////////////////////////////////////////////////////////////////////////////
					// Поскольку данная сумма будет отнесена на вычеты через амортизационные отчисления
					// ФА в последующие периоды, то в текущем периоде она классифицируется как временная разница
					ПроводкаНУ 				= Движения.Налоговый.Добавить();
					ПроводкаНУ.Период 		= Реквизиты.Период;					
					ПроводкаНУ.Организация 	= ОрганизацияВПроводку;
					ПроводкаНУ.СчетДт 		= ПланыСчетов.Налоговый.РасходыНаРемонтВА;
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 1, СтатьяЗатратВПроводку);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 2, ВыборкаФА.ФиксированныйАктив);				
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 3, Перечисления.ВидыРемонтаВА.Капитальный);				
					ПроводкаНУ.ВидУчетаДт 	= Справочники.ВидыУчетаНУ.ВР;		
					
					ПроводкаНУ.Сумма 		= СуммаВПроводку;
					ПроводкаНУ.Содержание 	= НСтр("ru='ВР по затратам на кап. ремонт, отнесенных на увеличение стоимости ФА(НУ)'", КодОсновногоЯзыка);				
					ПроводкаНУ.ВидРегламентнойОперации 	= Перечисления.ВидыРегламентныхОпераций.РасчетВычетовПоРасходамНаРемонт;									
					
					ОсталосьСписать = ОсталосьСписать - СуммаВПроводку;	
				КонецЦикла;	// Детальные записи				
				
			КонецЦикла; // Выборка ФА
		КонецЦикла; // Выборка ФА	
		
	Движения.Налоговый.Записать(Ложь);

КонецПроцедуры // РасчетВычетовПоРасходамНаРемонтФАНУ

Процедура ВключениеВСтоимостныйБалансАктивовУчитываемыхОтдельно_НУ(ТаблицаРеквизиты, Движения, Отказ) Экспорт	
	
	Реквизиты = ТаблицаРеквизиты[0];

	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	ФиксированныеАктивыУчитываемыеОтдельноСрезПоследних.ФиксированныйАктив КАК ФиксированныйАктив,
	               |	ФиксированныеАктивыУчитываемыеОтдельноСрезПоследних.ВидЛьготыФА КАК ВидЛьготыФА,
				   |	ФиксированныеАктивыУчитываемыеОтдельноСрезПоследних.Организация КАК Организация
	               |ПОМЕСТИТЬ ВТ_ФиксированныеАктивыУчитываемыеОтдельно
	               |ИЗ
	               |	РегистрСведений.ФиксированныеАктивыУчитываемыеОтдельно.СрезПоследних(&ДатаКон, Организация В (&СписокОрганизаций)) КАК ФиксированныеАктивыУчитываемыеОтдельноСрезПоследних
	               |ГДЕ
	               |	ФиксированныеАктивыУчитываемыеОтдельноСрезПоследних.Событие = &УчитываетсяОтдельноОтСтоимостногоБаланса
	               |	И (ФиксированныеАктивыУчитываемыеОтдельноСрезПоследних.ВидЛьготыФА = ЗНАЧЕНИЕ(Перечисление.ВидыФАУчитываемыхОтдельно.ДвойнаяНормаАмортизации)
	               |				И ФиксированныеАктивыУчитываемыеОтдельноСрезПоследних.Период < &ДатаНач
	               |			ИЛИ ФиксированныеАктивыУчитываемыеОтдельноСрезПоследних.ВидЛьготыФА = ЗНАЧЕНИЕ(Перечисление.ВидыФАУчитываемыхОтдельно.ОбъектыПреференций)
	               |				И ДОБАВИТЬКДАТЕ(ФиксированныеАктивыУчитываемыеОтдельноСрезПоследних.Период, ГОД, 3) < &ДатаНач)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
				   |	ФиксированныеАктивыУчитываемыеОтдельноСрезПоследних.Организация КАК Организация,
	               |	ФиксированныеАктивыУчитываемыеОтдельноСрезПоследних.ФиксированныйАктив КАК ФиксированныйАктив,
	               |	ФиксированныеАктивыУчитываемыеОтдельноСрезПоследних.ВидЛьготыФА КАК ВидЛьготыФА,
	               |	СтоимостьВА_НУ.Счет КАК СчетУчетаФА,
	               |	ЕСТЬNULL(СтоимостьВА_НУ.НачальныйОстаток, 0) + ЕСТЬNULL(СтоимостьВА_НУ.Поступление, 0) - ЕСТЬNULL(СтоимостьВА_НУ.Выбытие, 0) КАК СтоимостьФА_НУ
	               |ИЗ
	               |	ВТ_ФиксированныеАктивыУчитываемыеОтдельно КАК ФиксированныеАктивыУчитываемыеОтдельноСрезПоследних
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			СтоимостьВА_НУ.Организация КАК Организация,
	               |			СтоимостьВА_НУ.Субконто1 КАК Субконто1,
	               |			СтоимостьВА_НУ.Счет КАК Счет,
	               |			СУММА(ВЫБОР
	               |					КОГДА СтоимостьВА_НУ.Субконто2 В (&ДвижениеПоступления)
	               |						ТОГДА СтоимостьВА_НУ.СуммаОборотДт - СтоимостьВА_НУ.СуммаОборотКт
	               |				КОНЕЦ) КАК Поступление,
	               |			СУММА(ВЫБОР
	               |					КОГДА СтоимостьВА_НУ.Субконто2 = ЗНАЧЕНИЕ(Перечисление.ВидыДвиженияСтоимостиФА.Выбытие) ИЛИ СтоимостьВА_НУ.Субконто2 = ЗНАЧЕНИЕ(Перечисление.ВидыДвиженияСтоимостиФА.Перемещение)
	               |						ТОГДА СтоимостьВА_НУ.СуммаОборотКт - СтоимостьВА_НУ.СуммаОборотДт
	               |				КОНЕЦ) КАК Выбытие,
	               |			МАКСИМУМ(СтоимостьВА_НУ.СуммаНачальныйОстатокДт) КАК НачальныйОстаток,
	               |			МАКСИМУМ(СтоимостьВА_НУ.СуммаКонечныйОстатокДт) КАК КонечныйОстаток
	               |		ИЗ
	               |			РегистрБухгалтерии.Налоговый.ОстаткиИОбороты(
	               |					&ДатаНач,
	               |					&ДатаКон,
	               |					,
	               |					,
	               |					Счет В ИЕРАРХИИ (&СчетУчетаВА),
	               |					,
	               |					ВидУчета = &ВидУчетаНУ
	               |						И Организация В(&СписокОрганизаций)) КАК СтоимостьВА_НУ
	               |		
	               |		СГРУППИРОВАТЬ ПО
	               |			СтоимостьВА_НУ.Организация,
	               |			СтоимостьВА_НУ.Субконто1,
	               |			СтоимостьВА_НУ.Счет) КАК СтоимостьВА_НУ
	               |		ПО ФиксированныеАктивыУчитываемыеОтдельноСрезПоследних.ФиксированныйАктив = СтоимостьВА_НУ.Субконто1
				   |			И ФиксированныеАктивыУчитываемыеОтдельноСрезПоследних.Организация = СтоимостьВА_НУ.Организация
	               |ИТОГИ
	               |	МАКСИМУМ(ВидЛьготыФА),
	               |	СУММА(СтоимостьФА_НУ)
	               |ПО
				   |	Организация,
				   |	ФиксированныйАктив,				   
	               |	СчетУчетаФА";
			   
	Запрос.УстановитьПараметр("ДатаНач", 									НачалоГода(Реквизиты.Период));			   
	Запрос.УстановитьПараметр("ДатаКон", 									КонецМесяца(Реквизиты.Период));	
	Запрос.УстановитьПараметр("УчитываетсяОтдельноОтСтоимостногоБаланса",	Перечисления.СобытияФАУчитываемыхОтдельно.ПринятиеКУчету);	
	Запрос.УстановитьПараметр("СписокОрганизаций",							ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.СформироватьСписокСтруктурныхЕдиниц(Перечисления.РазделыНалоговогоУчета.КПН, , Реквизиты.Организация));
	Запрос.УстановитьПараметр("ВидУчетаНУ",									Справочники.ВидыУчетаНУ.НУ);
	
	СписокВидовДвиженияПоступления = Новый СписокЗначений;
	СписокВидовДвиженияПоступления.Добавить(Перечисления.ВидыДвиженияСтоимостиФА.Поступление);
	// Этот вид движения участвует в стоимостном балансе начиная с 01.01.2009, ст. 117 НК
	Если НачалоГода(КонецМесяца(Реквизиты.Период)) >= Дата(2009,1,1)Тогда
		СписокВидовДвиженияПоступления.Добавить(Перечисления.ВидыДвиженияСтоимостиФА.УвеличениеСтоимостиЗаСчетРемонта);
	КонецЕсли;	
	
	Запрос.УстановитьПараметр("ДвижениеПоступления",	СписокВидовДвиженияПоступления);
	
	Запрос.УстановитьПараметр("СчетУчетаВА",			ПланыСчетов.Налоговый.ВАНеВключенныеВСтоимостнойБаланс);	
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	ВыборкаОрганизация = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаОрганизация.Следующий() Цикл
		ВыборкаФА = ВыборкаОрганизация.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаФА.Следующий() Цикл
			Движение 					= Движения.ФиксированныеАктивыУчитываемыеОтдельно.Добавить();
			Движение.Период 			= Реквизиты.Период;
			Движение.Организация 		= ВыборкаОрганизация.Организация;
			Движение.ФиксированныйАктив = ВыборкаФА.ФиксированныйАктив;
			Движение.Событие 			= Перечисления.СобытияФАУчитываемыхОтдельно.ВключениеВСоставГруппы;		
			Движение.ВидЛьготыФА 		= ВыборкаФА.ВидЛьготыФА;		
			
			ВыборкаДетали 				= ВыборкаФА.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаДетали.Следующий() Цикл
				Если ВыборкаДетали.СтоимостьФА_НУ = 0 ТОгда
					Продолжить;
				КонецЕсли;	
				ПроводкаНУ 				= Движения.Налоговый.Добавить();
				ПроводкаНУ.Период 		= Реквизиты.Период;
				ПроводкаНУ.Организация  = ВыборкаОрганизация.Организация;
				
				ПроводкаНУ.СчетДт 		= ПланыСчетов.Налоговый.ВАВключенныеВСтоимостнойБаланс;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 1, ВыборкаДетали.ФиксированныйАктив);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 2, Перечисления.ВидыДвиженияСтоимостиФА.Поступление);
				ПроводкаНУ.ВидУчетаДт 	= Справочники.ВидыУчетаНУ.НУ;
				
				ПроводкаНУ.СчетКт 		= ВыборкаДетали.СчетУчетаФА;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 1, ВыборкаДетали.ФиксированныйАктив);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 2, Перечисления.ВидыДвиженияСтоимостиФА.Выбытие);
				ПроводкаНУ.ВидУчетаКт 	= Справочники.ВидыУчетаНУ.НУ;
				
				ПроводкаНУ.Сумма 		= ВыборкаДетали.СтоимостьФА_НУ;
				ПроводкаНУ.Содержание 	= НСтр("ru='Активы, учитываемые отдельно, включены в стоимостный баланс групп (НУ)'", ОбщегоНазначения.КодОсновногоЯзыка());
				ПроводкаНУ.ВидРегламентнойОперации = Перечисления.ВидыРегламентныхОпераций.ВключениеВСтоимостныйБалансАктивовУчитываемыхОтдельно;
			КонецЦикла;	
		КонецЦикла;	
	КонецЦикла;	
	
	Движения.Налоговый.Записать(Ложь);

	Движения.ФиксированныеАктивыУчитываемыеОтдельно.Записать(Ложь);
	
КонецПроцедуры // ВключениеВСтоимостныйБалансАктивовУчитываемыхОтдельно_НУ

// отнесение накопленных затрат по счету н340 на вычету текущего периода
//
Процедура РасчетВычетовПоПреференциямФАНУ_ВычетДоВводаВэксплуатацию(ТаблицаРеквизиты, Движения, Отказ)	
	
	Реквизиты = ТаблицаРеквизиты[0];
	
	КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
					|	НалоговыйОстатки.Субконто1,
					|	НалоговыйОстатки.Субконто2,
					|	НалоговыйОстатки.Субконто3,
					|	НалоговыйОстатки.Организация,
					|	НалоговыйОстатки.ВидУчета,
					|	НалоговыйОстатки.СуммаОстатокДт,
					|	НалоговыйОстатки.Счет
					|ИЗ
					|	РегистрБухгалтерии.Налоговый.Остатки(&ДатаКон, Счет = &СчетН340, , Организация В (&СписокОрганизаций)) КАК НалоговыйОстатки";
	
	Запрос.УстановитьПараметр("ДатаКон", 				Новый Граница(КонецМесяца(Реквизиты.Период), ВидГраницы.Включая));	
	Запрос.УстановитьПараметр("СчетН340",				ПланыСчетов.Налоговый.ПреренцииДоВводаВЭксплуатацию);
	Запрос.УстановитьПараметр("СписокОрганизаций",		ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.СформироватьСписокСтруктурныхЕдиниц(Перечисления.РазделыНалоговогоУчета.КПН, , Реквизиты.Организация));
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ВыборкаФА = Результат.Выбрать();
	Пока ВыборкаФА.Следующий() Цикл				
		
		ПроводкаНУ 				= Движения.Налоговый.Добавить();
		ПроводкаНУ.Период 		= Реквизиты.Период;
		ПроводкаНУ.Организация  = ВыборкаФА.Организация;
		
		ПроводкаНУ.СчетДт 		= ПланыСчетов.Налоговый.ПрочиеРасходыПоВнеоборотнымАктивам;
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "ВнеоборотныеАктивы", ВыборкаФА.Субконто1);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "СтатьиЗатрат", ВыборкаФА.Субконто2);
		
		ПроводкаНУ.ВидУчетаДт 	= ВыборкаФА.ВидУчета;
		
		ПроводкаНУ.СчетКт 		= ВыборкаФА.Счет;
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 1, ВыборкаФА.Субконто1);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 2, ВыборкаФА.Субконто2);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 3, ВыборкаФА.Субконто3);
		
		ПроводкаНУ.ВидУчетаКт 	= ВыборкаФА.ВидУчета;
		
		ПроводкаНУ.Сумма 		 			= ВыборкаФА.СуммаОстатокДт ;
		ПроводкаНУ.Содержание 	 			= НСтр("ru='Отнесение на вычеты стоимости объекта преференций(НУ) до ввода в эксплуатацию'", КодОсновногоЯзыка);	
		ПроводкаНУ.ВидРегламентнойОперации	= Перечисления.ВидыРегламентныхОпераций.РасчетВычетовПоПреференциям;	
		
	КонецЦикла;	
	
	Движения.Налоговый.Записать(Ложь);

КонецПроцедуры // РасчетВычетовПоПреференциямФАНУ_ВычетДоВводаВэксплуатацию

Процедура РасчетВычетовПоПреференциямФАНУ_РавномерноеСписание(ТаблицаРеквизиты,Движения, Отказ)	
	
	Реквизиты = ТаблицаРеквизиты[0];
	
	КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
					|	ФиксированныеАктивыУчитываемыеОтдельноСрезПоследних.ФиксированныйАктив КАК ФиксированныйАктив,
					|	ФиксированныеАктивыУчитываемыеОтдельноСрезПоследних.ВидЛьготыФА,
					|	ФиксированныеАктивыУчитываемыеОтдельноСрезПоследних.Период
					|ПОМЕСТИТЬ ВТ_ФиксированныеАктивыУчитываемыеОтдельно
					|ИЗ
					|	РегистрСведений.ФиксированныеАктивыУчитываемыеОтдельно.СрезПоследних(&ДатаКон, Организация В (&СписокОрганизаций)) КАК ФиксированныеАктивыУчитываемыеОтдельноСрезПоследних
					|ГДЕ
					|	ФиксированныеАктивыУчитываемыеОтдельноСрезПоследних.Событие = &УчитываетсяОтдельноОтСтоимостногоБаланса
					|	И ФиксированныеАктивыУчитываемыеОтдельноСрезПоследних.ВидЛьготыФА = &ВидЛьготыФАОбъектПреференций
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ
					|	ФиксированныеАктивыОрганизации.ФиксированныйАктив КАК ФиксированныйАктив,
					|	ФиксированныеАктивыОрганизации.ПорядокПогашенияСтоимостиНУ КАК ПорядокПогашенияСтоимостиНУ
					|ПОМЕСТИТЬ ВТ_ФиксированныеАктивыОрганизации
					|ИЗ
					|	РегистрСведений.ОбъектыНалоговогоУчетаФА.СрезПоследних(
					|			&ДатаКон,
					|			Организация В (&СписокОрганизаций)
					|				И ФиксированныйАктив В
					|					(ВЫБРАТЬ
					|						ВТ_ФиксированныеАктивыУчитываемыеОтдельно.ФиксированныйАктив
					|					ИЗ
					|						ВТ_ФиксированныеАктивыУчитываемыеОтдельно)) КАК ФиксированныеАктивыОрганизации
					|ГДЕ
					|	ФиксированныеАктивыОрганизации.ПорядокПогашенияСтоимостиНУ = ЗНАЧЕНИЕ(Перечисление.ПорядокПогашенияСтоимостиФА.ПреференцияОтнесениеНаВычетыРавнымиДолями)
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ
					|	ФиксированныеАктивыУчитываемыеОтдельноСрезПоследних.ФиксированныйАктив КАК ФиксированныйАктив,
					|	ФиксированныеАктивыУчитываемыеОтдельноСрезПоследних.Период КАК ДатаНачалаПреференции,
					|	СтоимостьВА_НУ.Счет КАК СчетУчетаФА,
					|	СтоимостьВА_НУ.Организация КАК Организация,
					|	ЕСТЬNULL(СтоимостьВА_НУ.НачальныйОстаток, 0) + ЕСТЬNULL(СтоимостьВА_НУ.Поступление, 0) - ЕСТЬNULL(СтоимостьВА_НУ.Выбытие, 0) КАК СтоимостьФА_НУ,
					|	ФиксированныеАктивыУчитываемыеОтдельноСрезПоследних.ВидЛьготыФА,
					|	ВТ_ФиксированныеАктивыОрганизации.ПорядокПогашенияСтоимостиНУ КАК ПорядокПогашенияСтоимостиНУ
					|ИЗ
					|	ВТ_ФиксированныеАктивыОрганизации КАК ВТ_ФиксированныеАктивыОрганизации
					|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ФиксированныеАктивыУчитываемыеОтдельно КАК ФиксированныеАктивыУчитываемыеОтдельноСрезПоследних
					|		ПО (ФиксированныеАктивыУчитываемыеОтдельноСрезПоследних.ФиксированныйАктив = ВТ_ФиксированныеАктивыОрганизации.ФиксированныйАктив)
					|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
					|			СтоимостьВА_НУ.Организация КАК Организация,
					|			СтоимостьВА_НУ.Субконто1 КАК Субконто1,
					|			СтоимостьВА_НУ.Счет КАК Счет,
					|			СУММА(ВЫБОР
					|					КОГДА СтоимостьВА_НУ.Субконто2 В (&ДвижениеПоступления)
					|						ТОГДА СтоимостьВА_НУ.СуммаОборотДт - СтоимостьВА_НУ.СуммаОборотКт
					|				КОНЕЦ) КАК Поступление,
					|			СУММА(ВЫБОР
					|					КОГДА  СтоимостьВА_НУ.Субконто2 = ЗНАЧЕНИЕ(Перечисление.ВидыДвиженияСтоимостиФА.Выбытие) ИЛИ  СтоимостьВА_НУ.Субконто2 = ЗНАЧЕНИЕ(Перечисление.ВидыДвиженияСтоимостиФА.Перемещение)
					|						ТОГДА СтоимостьВА_НУ.СуммаОборотКт - СтоимостьВА_НУ.СуммаОборотДт
					|				КОНЕЦ) КАК Выбытие,
					|			МАКСИМУМ(СтоимостьВА_НУ.СуммаНачальныйОстатокДт) КАК НачальныйОстаток,
					|			МАКСИМУМ(СтоимостьВА_НУ.СуммаКонечныйОстатокДт) КАК КонечныйОстаток
					|		ИЗ
					|			РегистрБухгалтерии.Налоговый.ОстаткиИОбороты(
					|					&ДатаНач,
					|					&ДатаКон,
					|					,
					|					,
					|					Счет В ИЕРАРХИИ (&СчетУчетаВА),
					|					,
					|					ВидУчета = &ВидУчетаНУ
					|						И Организация В (&СписокОрганизаций)
					|						И Субконто1 В
					|							(ВЫБРАТЬ
					|								ВТ_ФиксированныеАктивыУчитываемыеОтдельно.ФиксированныйАктив
					|							ИЗ
					|								ВТ_ФиксированныеАктивыУчитываемыеОтдельно)) КАК СтоимостьВА_НУ
					|		
					|		СГРУППИРОВАТЬ ПО
					|			СтоимостьВА_НУ.Организация,
					|			СтоимостьВА_НУ.Субконто1,
					|			СтоимостьВА_НУ.Счет) КАК СтоимостьВА_НУ
					|		ПО (ФиксированныеАктивыУчитываемыеОтдельноСрезПоследних.ФиксированныйАктив = СтоимостьВА_НУ.Субконто1)
					|ИТОГИ
					|	СУММА(СтоимостьФА_НУ)
					|ПО
					|	ФиксированныйАктив,
					|	СчетУчетаФА";
					
	Запрос.УстановитьПараметр("ДатаНач", НачалоГода(Реквизиты.Период));			   	
	Запрос.УстановитьПараметр("ДатаКон", КонецМесяца(Реквизиты.Период));
	Запрос.УстановитьПараметр("УчитываетсяОтдельноОтСтоимостногоБаланса",	Перечисления.СобытияФАУчитываемыхОтдельно.ПринятиеКУчету);	
	Запрос.УстановитьПараметр("Организация", 			Реквизиты.Организация);
	Запрос.УстановитьПараметр("СписокОрганизаций",		ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.СформироватьСписокСтруктурныхЕдиниц(Перечисления.РазделыНалоговогоУчета.КПН, , Реквизиты.Организация));
	Запрос.УстановитьПараметр("ВидУчетаНУ",				Справочники.ВидыУчетаНУ.НУ);
	
	СписокВидовДвиженияПоступления = Новый СписокЗначений;
	СписокВидовДвиженияПоступления.Добавить(Перечисления.ВидыДвиженияСтоимостиФА.Поступление);
	// Этот вид движения участвует в стоимостном балансе начиная с 01.01.2009, ст. 117 НК
	Если НачалоГода(КонецМесяца(Реквизиты.Период)) >= Дата(2009,1,1)Тогда
		СписокВидовДвиженияПоступления.Добавить(Перечисления.ВидыДвиженияСтоимостиФА.УвеличениеСтоимостиЗаСчетРемонта);
	КонецЕсли;	
	
	Запрос.УстановитьПараметр("ДвижениеПоступления",	СписокВидовДвиженияПоступления);
	
	Запрос.УстановитьПараметр("СчетУчетаВА",			ПланыСчетов.Налоговый.ВАНеВключенныеВСтоимостнойБаланс);
	Запрос.УстановитьПараметр("ВидЛьготыФАОбъектПреференций", Перечисления.ВидыФАУчитываемыхОтдельно.ОбъектыПреференций);
	
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	ВыборкаФА = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаФА.Следующий() Цикл		
		
		ВыборкаСчетУчета	= ВыборкаФА.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаСчетУчета.Следующий() Цикл
			Если ВыборкаСчетУчета.СтоимостьФА_НУ = 0 Тогда
				Продолжить;
			КонецЕсли;	
			СуммаФАНУ = ВыборкаСчетУчета.СтоимостьФА_НУ;
			
			ВыборкаДетали 				= ВыборкаСчетУчета.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаДетали.Следующий() Цикл			
				
				КоличествоПериодовСписания = 3 - (Год(КонецМесяца(Реквизиты.Период)) - Год(ВыборкаДетали.ДатаНачалаПреференции));
				
				ПроводкаНУ 				= Движения.Налоговый.Добавить();
				ПроводкаНУ.Период 		= Реквизиты.Период;
				ПроводкаНУ.Организация  = ВыборкаДетали.Организация;
				
				ПроводкаНУ.СчетДт 		= ПланыСчетов.Налоговый.ПрочиеРасходыПоВнеоборотнымАктивам;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "ВнеоборотныеАктивы", ВыборкаДетали.ФиксированныйАктив);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "СтатьиЗатрат", Справочники.СтатьиЗатрат.СписаниеСтоимостиОбъектаПреференций);
				
				ПроводкаНУ.ВидУчетаДт 	= Справочники.ВидыУчетаНУ.НУ;
				
				ПроводкаНУ.СчетКт 		= ВыборкаДетали.СчетУчетаФА;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 1, ВыборкаДетали.ФиксированныйАктив);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 2, Перечисления.ВидыДвиженияСтоимостиФА.РавномерноеСписаниеСтоимостиОбъектаПреференций);
				ПроводкаНУ.ВидУчетаКт 	= Справочники.ВидыУчетаНУ.НУ;
				
				ПроводкаНУ.Сумма 					= ?(КоличествоПериодовСписания <= 1, СуммаФАНУ, Окр(СуммаФАНУ/КоличествоПериодовСписания,2)) ;
				ПроводкаНУ.Содержание 				= НСтр("ru='Отнесение на вычеты стоимости объекта преференций(НУ)'", КодОсновногоЯзыка);
				ПроводкаНУ.ВидРегламентнойОперации 	= Перечисления.ВидыРегламентныхОпераций.РасчетВычетовПоПреференциям;
				
				Если Реквизиты.ВедениеУчетаВременныхРазницБалансовымМетодом Тогда    
					ПроводкаНУ 				= Движения.Налоговый.Добавить();
					ПроводкаНУ.Период 		= Реквизиты.Период;
					ПроводкаНУ.Организация  = ВыборкаДетали.Организация;
					
					ПроводкаНУ.СчетДт 		= ПланыСчетов.Налоговый.ПрочиеРасходыПоВнеоборотнымАктивам;
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "ВнеоборотныеАктивы", ВыборкаДетали.ФиксированныйАктив);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "СтатьиЗатрат", Справочники.СтатьиЗатрат.СписаниеСтоимостиОбъектаПреференций);
												
					ПроводкаНУ.СчетКт 		= ВыборкаДетали.СчетУчетаФА;
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 1, ВыборкаДетали.ФиксированныйАктив);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 2, Перечисления.ВидыДвиженияСтоимостиФА.РавномерноеСписаниеСтоимостиОбъектаПреференций);
					ПроводкаНУ.ВидУчетаКт 	= Справочники.ВидыУчетаНУ.НУ;
					
					ПроводкаНУ.Сумма 					= -1* ?(КоличествоПериодовСписания <= 1, СуммаФАНУ, Окр(СуммаФАНУ/КоличествоПериодовСписания,2)) ;
					ПроводкаНУ.Содержание 				= НСтр("ru='Отнесение на вычеты стоимости объекта преференций(НУ)'", КодОсновногоЯзыка);
					ПроводкаНУ.ВидРегламентнойОперации 	= Перечисления.ВидыРегламентныхОпераций.РасчетВычетовПоПреференциям;					
					ПроводкаНУ.ВидУчетаДт 	= Справочники.ВидыУчетаНУ.ВР;
					ПроводкаНУ.ВидУчетаКт 	= Справочники.ВидыУчетаНУ.ВР;					
				КонецЕсли;
				
			КонецЦикла;	                                                                                                    
			
		КонецЦикла;	
	КонецЦикла;	
	
	Движения.Налоговый.Записать(Ложь);
	
КонецПроцедуры // РасчетВычетовПоПреференциямФАНУ_РавномерноеСписание

Процедура РасчетВычетовПоПреференциямФАНУ(ТаблицаРеквизиты, Движения, Отказ)Экспорт
	
	РасчетВычетовПоПреференциямФАНУ_ВычетДоВводаВэксплуатацию(ТаблицаРеквизиты, Движения, Отказ);
	
	РасчетВычетовПоПреференциямФАНУ_РавномерноеСписание(ТаблицаРеквизиты, Движения, Отказ);		

КонецПроцедуры

Процедура ВыполнитьПризнаниеДоходаОтПревышенияСтоимостиВыбывшегоАктива_НУ(ВыборкаВидовОпераций, Реквизиты, Движения, Отказ)
	
	КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	
	ВыборкаГрупп = ВыборкаВидовОпераций.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока  ВыборкаГрупп.Следующий() Цикл
		ВыборкаФА = ВыборкаГрупп.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока  ВыборкаФА.Следующий() Цикл		
			ВыборкаДетали = ВыборкаФА.Выбрать();			
			
			Пока ВыборкаДетали.Следующий() Цикл
				Если ВыборкаДетали.СтоимостьНУ = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				ПроводкаНУ 				= Движения.Налоговый.Добавить();
				ПроводкаНУ.Период 		= Реквизиты.Период;
				ПроводкаНУ.Организация 	= ВыборкаДетали.Организация;
				
				ПроводкаНУ.СчетДт 		= ВыборкаДетали.СчетУчетаФА;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 1, ВыборкаДетали.ФиксированныйАктив);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 2, Перечисления.ВидыДвиженияСтоимостиФА.СписаниеОтрицательногоБалансаГруппы);
				ПроводкаНУ.ВидУчетаДт 	= Справочники.ВидыУчетаНУ.НУ;
				
				ПроводкаНУ.СчетКт 		= ПланыСчетов.Налоговый.ДоходыОтРеализацииВнеоборотныхАктивов;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 1, Справочники.Доходы.ДоходыОтВыбытияФА);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 2, ВыборкаДетали.ФиксированныйАктив);
				ПроводкаНУ.ВидУчетаКт 	= Справочники.ВидыУчетаНУ.НУ;
				
				ПроводкаНУ.Сумма 				   = -ВыборкаДетали.СтоимостьНУ;
				ПроводкаНУ.Содержание 			   = НСтр("ru='Признан доход от превышения доходов выбывших ФА над стоимостным балансом группы/подгруппы'", КодОсновногоЯзыка);
				ПроводкаНУ.ВидРегламентнойОперации = Перечисления.ВидыРегламентныхОпераций.РасчетДоходаОтПревышенияСтоимостиВыбывшихФА;
				
				// отражаем временные разницы по НУ
				Если Реквизиты.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль Тогда
					ПроводкаНУ 				= Движения.Налоговый.Добавить();
					ПроводкаНУ.Период 		= Реквизиты.Период;					
					ПроводкаНУ.Организация 	= ВыборкаДетали.Организация;
					
					ПроводкаНУ.СчетДт 		= ВыборкаДетали.СчетУчетаФА;
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 1, ВыборкаДетали.ФиксированныйАктив);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 2, Перечисления.ВидыДвиженияСтоимостиФА.СписаниеОтрицательногоБалансаГруппы);					
					ПроводкаНУ.ВидУчетаДт 	= Справочники.ВидыУчетаНУ.ВР;

										
					ПроводкаНУ.СчетКт 		= ПланыСчетов.Налоговый.ДоходыОтРеализацииВнеоборотныхАктивов;
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 1, Справочники.Доходы.ДоходыОтВыбытияФА);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 2, ВыборкаДетали.ФиксированныйАктив);
					ПроводкаНУ.ВидУчетаКт 	= Справочники.ВидыУчетаНУ.ВР;
					
					ПроводкаНУ.Сумма 		 		   = ВыборкаДетали.СтоимостьНУ;
					ПроводкаНУ.Содержание 			   = НСтр("ru='Признан доход от превышения доходов выбывших ФА над стоимостным балансом группы/подгруппы'", КодОсновногоЯзыка);
				
					ПроводкаНУ.ВидРегламентнойОперации = Перечисления.ВидыРегламентныхОпераций.РасчетДоходаОтПревышенияСтоимостиВыбывшихФА;
				КонецЕсли;	
			КонецЦикла;	
		КонецЦикла;		
	КонецЦикла;	
	
	Движения.Налоговый.Записать(Ложь);

КонецПроцедуры	

// Процедура формирует корреспонденции в НУ по списанию стоимостного
// баланса группы при выбытии всех, входищих в нее, активов
//
// Параметры:
// 	ВыборкаВидовОпераций - выборка из результата запроса, содержаща группировки по ГРуппамФА и ФА.
// 	Содержит поля
//		ГруппаУчетаФА 	- Группа НУ (если учет в целом по группе)	либо ФА, если учет в группе ведется по объектам
//		ГруппаФА 		- 	Группа налогового учета
//		ФиксированныйАктив  - Фиксирвоанный актив
//		СчетУчетаФА			- Счет учета фиксированного актива в НУ
//		ВидУчетаВГруппеФА	- Вид учета в группе: "по объектам"/ "по группе в целом"
//		СостояниеФиксированногоАктива - состояние актива в налоговом учете:	"принят к учету"/"выбыл"/ "снят с учета"
//		ИтоговаяСтоимостьГруппыНУ	 - Стоимостный баланс по ГруппеУчетаФА
//		СтоимостьНУ					 - Стоимостный баланс по фиксированному активу
//		ВидОперацииПоАктиву			 - Вид регламентой операции (из числа взаимоисключающих), которая выполняется с активом в документе:
//									 1 - Признание дохода от превышения стоимости выбывших активов над стоимостным балансом группы
//									 2 - Списание стоимостного баланса при выбытии всех активов группы
//									 3 - Списание стоимостного баланса группы, если величина баланса менее установленого минимума (с. 111, п.2)
//									 4 - Начисление амортизации по активу
//		ПрименяемаяНормаАмортизации - Применяемая норма амортизации
//		РасчетнаяАмортизацияФА		- Сумма расчетной амортизации по активу
//		УчитыватьОтдельно			- Признак того, что данный актив учитывается отдельно от стоимостного баланса группы
//
Процедура ВыполнитьСписаниеПриВыбытииВсехАктивовГруппы_НУ(ВыборкаВидовОпераций, Реквизиты, Движения, Отказ)
	
	КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	
	ВыборкаГрупп = ВыборкаВидовОпераций.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока  ВыборкаГрупп.Следующий() Цикл		
		ВыборкаФА = ВыборкаГрупп.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока  ВыборкаФА.Следующий() Цикл		
			ВыборкаДетали = ВыборкаФА.Выбрать();
			Пока ВыборкаДетали.Следующий() Цикл
				ПроводкаНУ 				= Движения.Налоговый.Добавить();
				ПроводкаНУ.Период 		= Реквизиты.Период;
				ПроводкаНУ.Организация 	= ВыборкаДетали.Организация;
				
				ПроводкаНУ.СчетДт 		= ПланыСчетов.Налоговый.ПрочиеРасходы;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоДт, 1, Справочники.СтатьиЗатрат.СписаниеПриВыбытииВсехФАГруппы);			
				ПроводкаНУ.ВидУчетаДт 	= Справочники.ВидыУчетаНУ.НУ;
				
				ПроводкаНУ.СчетКт 		= ВыборкаДетали.СчетУчетаФА;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 1, ВыборкаДетали.ФиксированныйАктив);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 2, Перечисления.ВидыДвиженияСтоимостиФА.СписаниеПриВыбытииВсехАктивовГруппы);
				ПроводкаНУ.ВидУчетаКт 	= Справочники.ВидыУчетаНУ.НУ;
				
				ПроводкаНУ.Сумма 				   = ВыборкаДетали.СтоимостьНУ;
				ПроводкаНУ.Содержание 			   = НСтр("ru='Стоимость группы, все активы которой выбыли, отнесена на вычеты'", КодОсновногоЯзыка);
				ПроводкаНУ.ВидРегламентнойОперации = Перечисления.ВидыРегламентныхОпераций.СписаниеПриВыбытииВсехФАГруппы;
				// отражаем временные разницы по НУ
				Если Реквизиты.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль Тогда
					ПроводкаНУ 				= Движения.Налоговый.Добавить();

					ПроводкаНУ.Период 		= Реквизиты.Период;
					ПроводкаНУ.Организация 	= ВыборкаДетали.Организация;
										
					ПроводкаНУ.СчетДт 		= ПланыСчетов.Налоговый.ПрочиеРасходы;
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоДт, 1, Справочники.СтатьиЗатрат.СписаниеПриВыбытииВсехФАГруппы);			
					ПроводкаНУ.ВидУчетаДт 	= Справочники.ВидыУчетаНУ.ВР;
					
					ПроводкаНУ.СчетКт 		= ВыборкаДетали.СчетУчетаФА;
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 1, ВыборкаДетали.ФиксированныйАктив);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 2, Перечисления.ВидыДвиженияСтоимостиФА.СписаниеПриВыбытииВсехАктивовГруппы);
					ПроводкаНУ.ВидУчетаКт 	= Справочники.ВидыУчетаНУ.ВР;
					
					ПроводкаНУ.Сумма 				   = -ВыборкаДетали.СтоимостьНУ;
					ПроводкаНУ.Содержание 			   = НСтр("ru='Стоимость группы, все активы которой выбыли, отнесена на вычеты'", КодОсновногоЯзыка);
					ПроводкаНУ.ВидРегламентнойОперации = Перечисления.ВидыРегламентныхОпераций.СписаниеПриВыбытииВсехФАГруппы;
				КонецЕсли;	
			КонецЦикла;	
		КонецЦикла;		
	КонецЦикла;	

Движения.Налоговый.Записать(Ложь);

КонецПроцедуры // ВыполнитьСписаниеПриВыбытииВсехАктивовГруппы_НУ

// Процедура формирует корреспонденции по отражению амортизации в налоговом учете
//
// Параметры:
// 	ВыборкаВидовОпераций - выборка из результата запроса, содержаща группировки по ГРуппамФА и ФА.
// 	Содержит поля
//		ГруппаУчетаФА 	- Группа НУ (если учет в целом по группе)	либо ФА, если учет в группе ведется по объектам
//		ГруппаФА 		- 	Группа налогового учета
//		ФиксированныйАктив  - Фиксирвоанный актив
//		СчетУчетаФА			- Счет учета фиксированного актива в НУ
//		ВидУчетаВГруппеФА	- Вид учета в группе: "по объектам"/ "по группе в целом"
//		СостояниеФиксированногоАктива - состояние актива в налоговом учете:	"принят к учету"/"выбыл"/ "снят с учета"
//		ИтоговаяСтоимостьГруппыНУ	 - Стоимостный баланс по ГруппеУчетаФА
//		СтоимостьНУ					 - Стоимостный баланс по фиксированному активу
//		ВидОперацииПоАктиву			 - Вид регламентой операции (из числа взаимоисключающих), которая выполняется с активом в документе:
//									 1 - Признание дохода от превышения стоимости выбывших активов над стоимостным балансом группы
//									 2 - Списание стоимостного баланса при выбытии всех активов группы
//									 3 - Списание стоимостного баланса группы, если величина баланса менее установленого минимума (с. 111, п.2)
//									 4 - Начисление амортизации по активу
//		ПрименяемаяНормаАмортизации - Применяемая норма амортизации
//		РасчетнаяАмортизацияФА		- Сумма расчетной амортизации по активу
//		УчитыватьОтдельно			- Признак того, что данный актив учитывается отдельно от стоимостного баланса группы
//
Процедура ВыполнитьРасчетАмортизации_НУ(ВыборкаВидовОпераций, Реквизиты, Движения, Отказ)
	
	КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	
	ВыборкаГрупп = ВыборкаВидовОпераций.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока  ВыборкаГрупп.Следующий() Цикл		
		ВыборкаФА = ВыборкаГрупп.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока  ВыборкаФА.Следующий() Цикл		
			ВыборкаДетали = ВыборкаФА.Выбрать();
			Пока ВыборкаДетали.Следующий() Цикл
				Если Не ВыборкаДетали.РасчетнаяАмортизацияФА = 0 Тогда				
					ПроводкаНУ 				= Движения.Налоговый.Добавить();
					ПроводкаНУ.Период 		= Реквизиты.Период;
					ПроводкаНУ.Организация 	= ВыборкаДетали.Организация;
					ПроводкаНУ.СчетДт 		= ПланыСчетов.Налоговый.ПрочиеРасходы;
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 1, Справочники.СтатьиЗатрат.АмортизацияФА);
					ПроводкаНУ.ВидУчетаДт 	= Справочники.ВидыУчетаНУ.НУ;
					
					ПроводкаНУ.СчетКт 		= ВыборкаДетали.СчетУчетаФА;
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 1, ВыборкаДетали.ФиксированныйАктив);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 2, Перечисления.ВидыДвиженияСтоимостиФА.Амортизация);
					ПроводкаНУ.ВидУчетаКт 	= Справочники.ВидыУчетаНУ.НУ;
					ПроводкаНУ.Сумма 		= ВыборкаДетали.РасчетнаяАмортизацияФА;
					ПроводкаНУ.Содержание 	= НСтр("ru='Начислена амортизация (НУ)'", КодОсновногоЯзыка);	
					
					ПроводкаНУ.ВидРегламентнойОперации = Перечисления.ВидыРегламентныхОпераций.АмортизацияФАНУ;
					// отражаем временные разницы по НУ
					Если Реквизиты.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль Тогда
						ПроводкаНУ 				= Движения.Налоговый.Добавить();
						ПроводкаНУ.Период 		= Реквизиты.Период;
						ПроводкаНУ.Организация 	= ВыборкаДетали.Организация;
						ПроводкаНУ.СчетДт 		= ПланыСчетов.Налоговый.ПрочиеРасходы;
						ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 1, Справочники.СтатьиЗатрат.АмортизацияФА);
						
						ПроводкаНУ.ВидУчетаДт 	= Справочники.ВидыУчетаНУ.ВР;						
						ПроводкаНУ.Сумма 		= - ВыборкаДетали.РасчетнаяАмортизацияФА;
						ПроводкаНУ.Содержание 	= НСтр("ru='Начислена амортизация (НУ)'", КодОсновногоЯзыка);						
						ПроводкаНУ.ВидРегламентнойОперации = Перечисления.ВидыРегламентныхОпераций.АмортизацияФАНУ;
						// Заполняем кредитовую часть проводки
						Если Реквизиты.ВедениеУчетаВременныхРазницБалансовымМетодом Тогда
							ПроводкаНУ.СчетКт		= ПланыСчетов.Налоговый.ВАВключенныеВСтоимостнойБаланс;
							ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 1, ВыборкаДетали.ФиксированныйАктив);					
							ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 2, Перечисления.ВидыДвиженияСтоимостиФА.Амортизация);					
							
							ПроводкаНУ.ВидУчетаКт   = Справочники.ВидыУчетаНУ.ВР;
						КонецЕсли;	
					КонецЕсли;	
				КонецЕсли;	
			КонецЦикла;		
		КонецЦикла;		
	КонецЦикла;	
	
	Движения.Налоговый.Записать(Ложь);

КонецПроцедуры	// ВыполнитьРасчетАмортизации_НУ

// Процедура формирует корреспонденции в НУ по списанию стоимостного
// баланса группы, если данная величина менее установленной налоговым законодательством (ст. 111, п.2)
//
// Параметры:
// 	ВыборкаВидовОпераций - выборка из результата запроса, содержаща группировки по ГРуппамФА и ФА.
// 	Содержит поля
//		ГруппаУчетаФА 	- Группа НУ (если учет в целом по группе)	либо ФА, если учет в группе ведется по объектам
//		ГруппаФА 		- 	Группа налогового учета
//		ФиксированныйАктив  - Фиксирвоанный актив
//		СчетУчетаФА			- Счет учета фиксированного актива в НУ
//		ВидУчетаВГруппеФА	- Вид учета в группе: "по объектам"/ "по группе в целом"
//		СостояниеФиксированногоАктива - состояние актива в налоговом учете:	"принят к учету"/"выбыл"/ "снят с учета"
//		ИтоговаяСтоимостьГруппыНУ	 - Стоимостный баланс по ГруппеУчетаФА
//		СтоимостьНУ					 - Стоимостный баланс по фиксированному активу
//		ВидОперацииПоАктиву			 - Вид регламентой операции (из числа взаимоисключающих), которая выполняется с активом в документе:
//									 1 - Признание дохода от превышения стоимости выбывших активов над стоимостным балансом группы
//									 2 - Списание стоимостного баланса при выбытии всех активов группы
//									 3 - Списание стоимостного баланса группы, если величина баланса менее установленого минимума (с. 111, п.2)
//									 4 - Начисление амортизации по активу
//		ПрименяемаяНормаАмортизации - Применяемая норма амортизации
//		РасчетнаяАмортизацияФА		- Сумма расчетной амортизации по активу
//		УчитыватьОтдельно			- Признак того, что данный актив учитывается отдельно от стоимостного баланса группы
//
Процедура ВыполнитьСписаниеГруппМенееМинимума_НУ(ВыборкаВидовОпераций, Реквизиты, Движения, Отказ)

	КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	
	ВыборкаГрупп = ВыборкаВидовОпераций.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока  ВыборкаГрупп.Следующий() Цикл		
		ВыборкаФА = ВыборкаГрупп.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока  ВыборкаФА.Следующий() Цикл		
			ВыборкаДетали = ВыборкаФА.Выбрать();
			Пока ВыборкаДетали.Следующий() Цикл
				Если ВыборкаДетали.СтоимостьНУ = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				ПроводкаНУ 				= Движения.Налоговый.Добавить();
				ПроводкаНУ.Период 		= Реквизиты.Период;				
				ПроводкаНУ.Организация 	= ВыборкаДетали.Организация;
				
				ПроводкаНУ.СчетДт 		= ПланыСчетов.Налоговый.ПрочиеРасходы;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 1, Справочники.СтатьиЗатрат.СписаниеСтоимостногоБалансаГруппыМенееМинимума);			
				ПроводкаНУ.ВидУчетаДт 	= Справочники.ВидыУчетаНУ.НУ;
				
				ПроводкаНУ.СчетКт 		= ВыборкаДетали.СчетУчетаФА;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 1, ВыборкаДетали.ФиксированныйАктив);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 2, Перечисления.ВидыДвиженияСтоимостиФА.СписаниеСтоимостногоБалансаГруппыМенееМинимума);
				ПроводкаНУ.ВидУчетаКт 	= Справочники.ВидыУчетаНУ.НУ;
				
				ПроводкаНУ.Сумма 				   = ВыборкаДетали.СтоимостьНУ;
				ПроводкаНУ.Содержание 			   = НСтр("ru='Стоимость группы менее минимума отнесена на вычеты'", КодОсновногоЯзыка);
				ПроводкаНУ.ВидРегламентнойОперации = Перечисления.ВидыРегламентныхОпераций.СписаниеСтоимостногоБалансаГруппыМенееМинимума;
				// отражаем временные разницы по НУ
				Если Реквизиты.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль Тогда
					ПроводкаНУ 				= Движения.Налоговый.Добавить();
					ПроводкаНУ.Период 		= Реквизиты.Период;					
					ПроводкаНУ.Организация 	= ВыборкаДетали.Организация;
										
					ПроводкаНУ.СчетДт 		= ПланыСчетов.Налоговый.ПрочиеРасходы;
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 1, Справочники.СтатьиЗатрат.СписаниеСтоимостногоБалансаГруппыМенееМинимума);								
					ПроводкаНУ.ВидУчетаДт 	= Справочники.ВидыУчетаНУ.ВР;
					
					ПроводкаНУ.СчетКт 		= ВыборкаДетали.СчетУчетаФА;
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 1, ВыборкаДетали.ФиксированныйАктив);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 2, Перечисления.ВидыДвиженияСтоимостиФА.СписаниеСтоимостногоБалансаГруппыМенееМинимума);
					ПроводкаНУ.ВидУчетаКт 	= Справочники.ВидыУчетаНУ.ВР;
				                                                    					
					ПроводкаНУ.Сумма 				   = -ВыборкаДетали.СтоимостьНУ;
					ПроводкаНУ.Содержание 			   = НСтр("ru='Стоимость группы менее минимума отнесена на вычеты'", КодОсновногоЯзыка);
					ПроводкаНУ.ВидРегламентнойОперации = Перечисления.ВидыРегламентныхОпераций.СписаниеСтоимостногоБалансаГруппыМенееМинимума;
				КонецЕсли;	
				
			КонецЦикла;	
		КонецЦикла;		
	КонецЦикла;	
	
	Движения.Налоговый.Записать(Ложь);

КонецПроцедуры	// ВыполнитьСписаниеГруппМенееМинимума_НУ

Процедура РегламентныеОперацииПоСтоимостиФАВНУ(ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Реквизиты = ТаблицаРеквизиты[0];

	Запрос = Новый Запрос;		
	Запрос.УстановитьПараметр("ДатаКон", 		КонецМесяца(Реквизиты.Период));		
	
	Запрос.УстановитьПараметр("РазмерДопустимогоМинимумаДляВычета", 0);
	
	Если Реквизиты.СписаниеСтоимостногоБалансаГруппыМенееМинимума Тогда
		РазмерМинимумаДляВычетаТекст = "ВЫБРАТЬ
				|	ЕстьNull(РасчетныеПоказатели.РазмерМРП,0) КАК МРП
				|ИЗ
				|	РегистрСведений.РегламентированныеРасчетныеПоказатели.СрезПоследних(&ДатаКон) КАК РасчетныеПоказатели
				|";
				
		Запрос.Текст = РазмерМинимумаДляВычетаТекст;		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Запрос.УстановитьПараметр("РазмерДопустимогоМинимумаДляВычета",	300*Выборка.МРП);	
		КонецЕсли;
	КонецЕсли;	
	// отбираем данные только по ФА, находящимся на учете.
	// Выбывший актив может иметь стоимостной баланс и участвовать в учете ст. 
	СостоянияФА = Новый СписокЗначений();	
	СостоянияФА.Добавить(Перечисления.ВидыСостоянийФА.ПринятКУчету);
	СостоянияФА.Добавить(Перечисления.ВидыСостоянийФА.Выбыл);
	
	Запрос.УстановитьПараметр("СостоянияФА", 	СостоянияФА);		
	
	Запрос.Текст = "
	////////////////////// ОБЪЕКТЫ НАЛОГОВОГО УЧЕТА ФА /////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОбъектыНалоговогоУчетаФА.Организация КАК Организация,
		|	ОбъектыНалоговогоУчетаФА.ФиксированныйАктив КАК ФиксированныйАктив,
		|	ОбъектыНалоговогоУчетаФА.ГруппаНУ КАК ГруппаФА,		
		|	ОбъектыНалоговогоУчетаФА.ПорядокПогашенияСтоимостиНУ КАК ПорядокПогашенияСтоимостиНУ,
		|	ВЫБОР
		|		КОГДА ОбъектыНалоговогоУчетаФА.ГруппаНУ.ВидУчетаВГруппеФА = ЗНАЧЕНИЕ(Перечисление.ВидыНалоговогоУчетаВГруппахФА.ПоОбъектам)
		|			ТОГДА ОбъектыНалоговогоУчетаФА.ФиксированныйАктив
		|		ИНАЧЕ ОбъектыНалоговогоУчетаФА.ГруппаНУ	КОНЕЦ КАК ГруппаУчетаФА,
		|	ОбъектыНалоговогоУчетаФА.СостояниеФиксированногоАктива КАК СостояниеФиксированногоАктива,
		|	ВЫБОР КОГДА 
		|		ФиксированныеАктивыУчитываемыеОтдельно.Событие ЕСТЬ NULL 
		|	Тогда  ИСТИНА Иначе Ложь 
		|	КОНЕЦ КАК ВходитВСтоимостныйБалансГруппы	
		|	
		|ПОМЕСТИТЬ ВТ_ОбъектыНалоговогоУчетаФА
		|ИЗ
		|	РегистрСведений.ОбъектыНалоговогоУчетаФА.СрезПоследних(
		|			&ДатаОкончания,
		|			Организация В (&СписокОрганизаций)
		|			И СостояниеФиксированногоАктива В (&СостоянияФА)) КАК ОбъектыНалоговогоУчетаФА
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.ФиксированныеАктивыУчитываемыеОтдельно.СрезПоследних(
		|			&ДатаОкончания,
		|			Организация В (&СписокОрганизаций)) КАК ФиксированныеАктивыУчитываемыеОтдельно
		|ПО 			
		|ОбъектыНалоговогоУчетаФА.Организация = ФиксированныеАктивыУчитываемыеОтдельно.Организация
		|И ОбъектыНалоговогоУчетаФА.ФиксированныйАктив = ФиксированныеАктивыУчитываемыеОтдельно.ФиксированныйАктив
		|И НЕ ФиксированныеАктивыУчитываемыеОтдельно.Событие = Значение(Перечисление.СобытияФАУчитываемыхОтдельно.ВключениеВСоставГруппы);
		|
		|/////////////////////// ВРЕМЕННАЯ ДЛЯ РАСЧЕТА ПОКАЗАТЕЛЕЙ ГРУПП НУ ////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ОбъектыНалоговогоУчетаФА.ФиксированныйАктив = СведенияОГруппахФиксированныхАктивовСрезПоследних.ФиксированныйАктив
		|				И СведенияОГруппахФиксированныхАктивовСрезПоследних.Организация = ОбъектыНалоговогоУчетаФА.Организация
		|			ТОГДА 1
		|		КОГДА ОбъектыНалоговогоУчетаФА.ФиксированныйАктив = СведенияОГруппахФиксированныхАктивовСрезПоследних.ФиксированныйАктив
		|				И СведенияОГруппахФиксированныхАктивовСрезПоследних.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|			ТОГДА 2		
		|		КОГДА СведенияОГруппахФиксированныхАктивовСрезПоследних.Организация = ОбъектыНалоговогоУчетаФА.Организация
		|			ТОГДА 3
		|		КОГДА СведенияОГруппахФиксированныхАктивовСрезПоследних.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|			ТОГДА 4
		|		ИНАЧЕ 5
		|	КОНЕЦ КАК Приоритет,
		|	ОбъектыНалоговогоУчетаФА.ГруппаФА КАК ГруппаФА,
		|	ОбъектыНалоговогоУчетаФА.ГруппаУчетаФА КАК ГруппаУчетаФА,
		|	ОбъектыНалоговогоУчетаФА.Организация КАК Организация,
		|	ОбъектыНалоговогоУчетаФА.ФиксированныйАктив КАК ФиксированныйАктив,
		|	ОбъектыНалоговогоУчетаФА.СостояниеФиксированногоАктива КАК СостояниеФиксированногоАктива,
		|	СведенияОГруппахФиксированныхАктивовСрезПоследних.ГруппаФА.ВидУчетаВГруппеФА КАК ВидУчетаВГруппеФА,
		|	ОбъектыНалоговогоУчетаФА.ВходитВСтоимостныйБалансГруппы КАК ВходитВСтоимостныйБалансГруппы,
		|	ВЫБОР КОГДА НЕ ОбъектыНалоговогоУчетаФА.ВходитВСтоимостныйБалансГруппы  И ОбъектыНалоговогоУчетаФА.ПорядокПогашенияСтоимостиНУ = ЗНАЧЕНИЕ(Перечисление.ПорядокПогашенияСтоимостиФА.НачислениеАмортизацииПоДвойнойНорме)
		|		Тогда (СведенияОГруппахФиксированныхАктивовСрезПоследних.ПрименяемаяНормаАмортизации)*2 
		|       КОГДА НЕ ОбъектыНалоговогоУчетаФА.ВходитВСтоимостныйБалансГруппы Тогда 0		
		|		Иначе СведенияОГруппахФиксированныхАктивовСрезПоследних.ПрименяемаяНормаАмортизации КОНЕЦ КАК ПрименяемаяНормаАмортизации
		|ПОМЕСТИТЬ ВТ_СведенияОГруппахФА
		|ИЗ
		|	ВТ_ОбъектыНалоговогоУчетаФА КАК ОбъектыНалоговогоУчетаФА
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОГруппахФиксированныхАктивов.СрезПоследних(&ДатаОкончания, ) КАК СведенияОГруппахФиксированныхАктивовСрезПоследних
		|		ПО (ОбъектыНалоговогоУчетаФА.Организация = СведенияОГруппахФиксированныхАктивовСрезПоследних.Организация
		|				ИЛИ СведенияОГруппахФиксированныхАктивовСрезПоследних.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
		|			И (ОбъектыНалоговогоУчетаФА.ГруппаФА = СведенияОГруппахФиксированныхАктивовСрезПоследних.ГруппаФА
		|					И СведенияОГруппахФиксированныхАктивовСрезПоследних.ФиксированныйАктив = НЕОПРЕДЕЛЕНО
		|				ИЛИ СведенияОГруппахФиксированныхАктивовСрезПоследних.ГруппаФА.ВидУчетаВГруппеФА = ЗНАЧЕНИЕ(Перечисление.ВидыНалоговогоУчетаВГруппахФА.ПоОбъектам)
		|					И ОбъектыНалоговогоУчетаФА.ФиксированныйАктив = СведенияОГруппахФиксированныхАктивовСрезПоследних.ФиксированныйАктив)
		|ГДЕ
		|	(НЕ ОбъектыНалоговогоУчетаФА.ГруппаФА = ЗНАЧЕНИЕ(Справочник.ГруппыНалоговогоУчетаФА.ПустаяСсылка))
		|;
		|
		|////////////////////////////// ПОКАЗАТЕЛИ ГРУПП НУ //////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ГруппыФА.ГруппаФА КАК ГруппаФА,
		|	ГруппыФА.ГруппаУчетаФА КАК ГруппаУчетаФА,
		|	ГруппыФА.Организация КАК Организация,
		|	ГруппыФА.ФиксированныйАктив КАК ФиксированныйАктив,
		|	ГруппыФА.СостояниеФиксированногоАктива КАК СостояниеФиксированногоАктива,
		|	СведенияОГруппахФА.ГруппаФА.ВидУчетаВГруппеФА КАК ВидУчетаВГруппеФА,
		|	СведенияОГруппахФА.ПрименяемаяНормаАмортизации КАК ПрименяемаяНормаАмортизации,
		|	СведенияОГруппахФА.ВходитВСтоимостныйБалансГруппы КАК ВходитВСтоимостныйБалансГруппы
		|ПОМЕСТИТЬ ВТ_ГруппыФА
		|ИЗ
		|	(ВЫБРАТЬ
		|		ГруппыФА.ГруппаФА КАК ГруппаФА,
		|		ГруппыФА.ГруппаУчетаФА КАК ГруппаУчетаФА,
		|		ГруппыФА.Организация КАК Организация,
		|		ГруппыФА.ФиксированныйАктив КАК ФиксированныйАктив,		
		|		МИНИМУМ(ГруппыФА.Приоритет) КАК Приоритет,
		|		ГруппыФА.СостояниеФиксированногоАктива КАК СостояниеФиксированногоАктива
		|	ИЗ
		|		ВТ_СведенияОГруппахФА КАК ГруппыФА
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ГруппыФА.ФиксированныйАктив,
		|		ГруппыФА.Организация,
		|		ГруппыФА.ГруппаФА,
		|		ГруппыФА.ГруппаУчетаФА,
		|		ГруппыФА.СостояниеФиксированногоАктива) КАК ГруппыФА
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СведенияОГруппахФА КАК СведенияОГруппахФА
		|		ПО ГруппыФА.Организация = СведенияОГруппахФА.Организация
		|			И ГруппыФА.ФиксированныйАктив = СведенияОГруппахФА.ФиксированныйАктив
		|			И ГруппыФА.Приоритет = СведенияОГруппахФА.Приоритет
		|;
		|
		|///////////////// СТОИМОСТЬ ФА В НУ /////////////////////////////////////
		|ВЫБРАТЬ
		|	СтоимостьВА_НУ.Организация КАК Организация,
		|	СтоимостьВА_НУ.Субконто1 КАК ФиксированныйАктив,
		|	СтоимостьВА_НУ.Счет КАК Счет,
		|	СУММА(ВЫБОР
		|			КОГДА СтоимостьВА_НУ.Субконто2 В (&ДвижениеПоступления)
		|				ТОГДА СтоимостьВА_НУ.СуммаОборотДт - СтоимостьВА_НУ.СуммаОборотКт
		|		КОНЕЦ) КАК Поступление,
		|	СУММА(ВЫБОР
		|			КОГДА СтоимостьВА_НУ.Субконто2 = ЗНАЧЕНИЕ(Перечисление.ВидыДвиженияСтоимостиФА.Выбытие) ИЛИ СтоимостьВА_НУ.Субконто2 = ЗНАЧЕНИЕ(Перечисление.ВидыДвиженияСтоимостиФА.Перемещение)
		|				ТОГДА СтоимостьВА_НУ.СуммаОборотКт - СтоимостьВА_НУ.СуммаОборотДт
		|		КОНЕЦ) КАК Выбытие,
		|	МАКСИМУМ(СтоимостьВА_НУ.СуммаНачальныйОстатокДт) КАК НачальныйОстаток,
		|	МАКСИМУМ(СтоимостьВА_НУ.СуммаКонечныйОстатокДт) КАК КонечныйОстаток,
		|	СУММА(ВЫБОР
		|			КОГДА СтоимостьВА_НУ.Субконто2 = ЗНАЧЕНИЕ(Перечисление.ВидыДвиженияСтоимостиФА.Амортизация)
		|				ТОГДА СтоимостьВА_НУ.СуммаОборотКт
		|		КОНЕЦ) КАК АмортизацияУчетная,
		|	СУММА(ВЫБОР
		|			КОГДА СтоимостьВА_НУ.Субконто2 = ЗНАЧЕНИЕ(Перечисление.ВидыДвиженияСтоимостиФА.СписаниеСтоимостногоБалансаГруппыМенееМинимума)
		|				ТОГДА СтоимостьВА_НУ.СуммаОборотКт
		|		КОНЕЦ) КАК СписаниеМенееМинимумаУчетное	
		|	ПОМЕСТИТЬ ВТ_СтоимостьВА_НУ
		|ИЗ
		|	РегистрБухгалтерии.Налоговый.ОстаткиИОбороты(&ДатаНачала, &ДатаОкончания, , ,
		|			Счет В ИЕРАРХИИ (&СчетУчетаВА),	,
		|			((СУБКОНТО1, ОРГАНИЗАЦИЯ) В
		|					(ВЫБРАТЬ
		|						ВЫРАЗИТЬ(ВТ_ОбъектыНалоговогоУчетаФА.ФиксированныйАктив КАК Справочник.ОсновныеСредства),
		|						ВТ_ОбъектыНалоговогоУчетаФА.Организация
		|					ИЗ
		|						ВТ_ОбъектыНалоговогоУчетаФА)
		|				ИЛИ (СУБКОНТО1, ОРГАНИЗАЦИЯ) В
		|					(ВЫБРАТЬ
		|						ВЫРАЗИТЬ(ВТ_ОбъектыНалоговогоУчетаФА.ФиксированныйАктив КАК Справочник.НематериальныеАктивы),
		|						ВТ_ОбъектыНалоговогоУчетаФА.Организация
		|					ИЗ
		|						ВТ_ОбъектыНалоговогоУчетаФА))
		|				И ВидУчета = ЗНАЧЕНИЕ(Справочник.ВидыУчетаНУ.НУ)) КАК СтоимостьВА_НУ
		|
		|СГРУППИРОВАТЬ ПО
		|	СтоимостьВА_НУ.Организация,
		|	СтоимостьВА_НУ.Субконто1,
		|	СтоимостьВА_НУ.Счет;
		|	
		|//////////// ИТОГИ ПО ГРУППАМ ФА //////////////////////////////////////
		|ВЫБРАТЬ
		|	ОбъектыНалоговогоУчетаФА.ГруппаФА КАК ГруппаФА,
		|	СУММА(ЕСТЬNULL(СтоимостьВА_НУ.НачальныйОстаток, 0) + ЕСТЬNULL(СтоимостьВА_НУ.Поступление, 0) - ЕСТЬNULL(СтоимостьВА_НУ.Выбытие, 0)) КАК СтоимостьНУ,
		|	ОбъектыНалоговогоУчетаФА.ГруппаУчетаФА КАК ГруппаУчетаФА,	
		|	СУММА(СтоимостьВА_НУ.АмортизацияУчетная) КАК АмортизацияУчетная,
		|	СУММА(ВЫБОР
		|			КОГДА ОбъектыНалоговогоУчетаФА.СостояниеФиксированногоАктива = ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийФА.ПринятКУчету)
		|				ТОГДА 1
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК КоличествоНеВыбывшихВГруппе,
		|	СУММА(СтоимостьВА_НУ.СписаниеМенееМинимумаУчетное) КАК СписаниеМенееМинимумаУчетное
		|ПОМЕСТИТЬ ВТ_ИтогиПоГруппамНУ
		|ИЗ
		|	ВТ_ОбъектыНалоговогоУчетаФА КАК ОбъектыНалоговогоУчетаФА		
		|ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СтоимостьВА_НУ КАК СтоимостьВА_НУ
		|		ПО (СтоимостьВА_НУ.Организация = ОбъектыНалоговогоУчетаФА.Организация)
		|			И (СтоимостьВА_НУ.ФиксированныйАктив = ОбъектыНалоговогоУчетаФА.ФиксированныйАктив)
		|			И ОбъектыНалоговогоУчетаФА.ВходитВСтоимостныйБалансГруппы = Истина
		|
		|СГРУППИРОВАТЬ ПО
		|	ОбъектыНалоговогоУчетаФА.ГруппаФА,
		|	ОбъектыНалоговогоУчетаФА.ГруппаУчетаФА;
		|
		|//////////// Итоговый ЗАПРОС /////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИтогиПоГруппамНУ.ГруппаУчетаФА КАК ГруппаУчетаФА,
		|	ГруппыФА.ГруппаФА КАК ГруппаФА,		
		|	ГруппыФА.Организация КАК Организация,		
		|	ГруппыФА.ФиксированныйАктив КАК ФиксированныйАктив,
		|	СтоимостьВА_НУ.Счет КАК СчетУчетаФА,
		|	ГруппыФА.ВидУчетаВГруппеФА КАК ВидУчетаВГруппеФА,
		|	ГруппыФА.СостояниеФиксированногоАктива,
		|	ИтогиПоГруппамНУ.СтоимостьНУ КАК ИтоговаяСтоимостьГруппыНУ,
		|	ЕСТЬNULL(СтоимостьВА_НУ.НачальныйОстаток, 0) + ЕСТЬNULL(СтоимостьВА_НУ.Поступление, 0) - ЕСТЬNULL(СтоимостьВА_НУ.Выбытие, 0) КАК СтоимостьНУ,
		|	ВЫБОР
		|		КОГДА НЕ ГруппыФА.ВходитВСтоимостныйБалансГруппы
		|			ТОГДА 4
		|		КОГДА ЕСТЬNULL(ИтогиПоГруппамНУ.СтоимостьНУ, 0) < 0
		|			ТОГДА 1
		|		КОГДА ЕСТЬNULL(ИтогиПоГруппамНУ.КоличествоНеВыбывшихВГруппе, 0) = 0
		|			ТОГДА 2
		|		КОГДА &СписыватьГруппыМенееМинимума
		|				И ЕСТЬNULL(ИтогиПоГруппамНУ.СтоимостьНУ, 0) < &РазмерДопустимогоМинимумаДляВычета
		|				И (&НачислятьАмортизацию
		|					ИЛИ ЕСТЬNULL(ИтогиПоГруппамНУ.АмортизацияУчетная, 0) = 0)
		|			ТОГДА 3
		|		КОГДА ЕСТЬNULL(ИтогиПоГруппамНУ.СписаниеМенееМинимумаУчетное, 0) = 0
		|			ТОГДА 4
		|		ИНАЧЕ 5
		|	КОНЕЦ КАК ВидОперацииПоАктиву,
		|	ГруппыФА.ПрименяемаяНормаАмортизации КАК ПрименяемаяНормаАмортизации,
		|	(ЕСТЬNULL(СтоимостьВА_НУ.НачальныйОстаток, 0) + ЕСТЬNULL(СтоимостьВА_НУ.Поступление, 0) - ЕСТЬNULL(СтоимостьВА_НУ.Выбытие, 0)) * ЕСТЬNULL(ГруппыФА.ПрименяемаяНормаАмортизации, 0)
		|	/ 100 КАК РасчетнаяАмортизацияФА,
		|	НЕ ГруппыФА.ВходитВСтоимостныйБалансГруппы КАК УчитыватьОтдельно
		|ИЗ
		|	ВТ_ГруппыФА КАК ГруппыФА
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ИтогиПоГруппамНУ КАК ИтогиПоГруппамНУ
		|		ПО ГруппыФА.ГруппаУчетаФА = ИтогиПоГруппамНУ.ГруппаУчетаФА
		|ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СтоимостьВА_НУ КАК СтоимостьВА_НУ
		|		ПО (ГруппыФА.Организация = СтоимостьВА_НУ.Организация)
		|			И (ГруппыФА.ФиксированныйАктив = СтоимостьВА_НУ.ФиксированныйАктив)	
		|			
		|ИТОГИ
		|МАКСИМУМ(ИтоговаяСтоимостьГруппыНУ),
		|	МАКСИМУМ(СтоимостьНУ),
		|	СУММА(РасчетнаяАмортизацияФА)
		|ПО
		|	ВидОперацииПоАктиву,
		|	ГруппаУчетаФА,
		|ФиксированныйАктив";

		
	Запрос.УстановитьПараметр("ДатаНачала",		НачалоГода(Реквизиты.Период));		
		
	Запрос.УстановитьПараметр("ДатаОкончания", 	КонецМесяца(Реквизиты.Период));			
	Запрос.УстановитьПараметр("ВидУчетаНУ",			Справочники.ВидыУчетаНУ.НУ);
		
	Запрос.УстановитьПараметр("СубконтоВА",			ПланыВидовХарактеристик.ВидыСубконтоТиповые.ВнеоборотныеАктивы);	
	Запрос.УстановитьПараметр("СчетУчетаВА",		ПланыСчетов.Налоговый.ВнеоборотныеАктивы);	
	
	Запрос.УстановитьПараметр("УчитываетсяОтдельноОтСтоимостногоБаланса",	Перечисления.СобытияФАУчитываемыхОтдельно.ПринятиеКУчету);	
	Запрос.УстановитьПараметр("СписыватьГруппыМенееМинимума",	Реквизиты.СписаниеСтоимостногоБалансаГруппыМенееМинимума);	
	Запрос.УстановитьПараметр("НачислятьАмортизацию",			Реквизиты.АмортизацияФАНУ);	
	Запрос.УстановитьПараметр("СписокОрганизаций",	ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.СформироватьСписокСтруктурныхЕдиниц(Перечисления.РазделыНалоговогоУчета.КПН, , Реквизиты.Организация));
	
	СписокВидовДвиженияПоступления = Новый СписокЗначений;
	СписокВидовДвиженияПоступления.Добавить(Перечисления.ВидыДвиженияСтоимостиФА.Поступление);
	// Этот вид движения участвует в стоимостном балансе начиная с 01.01.2009, ст. 117 НК
	Если НачалоГода(Реквизиты.Период) >= Дата(2009,1,1)Тогда
		СписокВидовДвиженияПоступления.Добавить(Перечисления.ВидыДвиженияСтоимостиФА.УвеличениеСтоимостиЗаСчетРемонта);
	КонецЕсли;	
	
	Запрос.УстановитьПараметр("ДвижениеПоступления",	СписокВидовДвиженияПоступления);
	
	МассивСубконтоЗатратНаРемонт = Новый Массив;
	МассивСубконтоЗатратНаРемонт.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.ВнеоборотныеАктивы);
	МассивСубконтоЗатратНаРемонт.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.ВидыРемонтаВА);
	МассивСубконтоЗатратНаРемонт.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.СтатьиЗатрат);
	
	Запрос.УстановитьПараметр("СписокСубконтоСчетаРемонта",	МассивСубконтоЗатратНаРемонт);
		
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() ТОгда
		Возврат;
	КонецЕсли;
	
	ВыборкаВидовОпераций	 = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам); // по Видам операций
	Пока ВыборкаВидовОпераций.Следующий() Цикл		
		
		Если Реквизиты.РасчетДоходаОтПревышенияСтоимостиВыбывшихФА И ВыборкаВидовОпераций.ВидОперацииПоАктиву = 1 Тогда
			ВыполнитьПризнаниеДоходаОтПревышенияСтоимостиВыбывшегоАктива_НУ(ВыборкаВидовОпераций, Реквизиты, Движения, Отказ);
		КонецЕсли;	
		
		Если Реквизиты.СписаниеПриВыбытииВсехФАГруппы И ВыборкаВидовОпераций.ВидОперацииПоАктиву = 2 Тогда
			ВыполнитьСписаниеПриВыбытииВсехАктивовГруппы_НУ(ВыборкаВидовОпераций, Реквизиты, Движения, Отказ);
		КонецЕсли;	
		
		Если Реквизиты.СписаниеСтоимостногоБалансаГруппыМенееМинимума И ВыборкаВидовОпераций.ВидОперацииПоАктиву = 3 Тогда
			ВыполнитьСписаниеГруппМенееМинимума_НУ(ВыборкаВидовОпераций, Реквизиты, Движения, Отказ);
		КонецЕсли;	
		
		Если Реквизиты.АмортизацияФАНУ И ВыборкаВидовОпераций.ВидОперацииПоАктиву = 4 Тогда
			ВыполнитьРасчетАмортизации_НУ(ВыборкаВидовОпераций, Реквизиты, Движения, Отказ);
		КонецЕсли;		
		
	КонецЦикла;	// Выборка ВидовОпераций	
	
	
КонецПроцедуры

Функция ПодготовитьТаблицуРасчетаВычета()
	
	ТаблицаРасчетаВычета = Новый ТаблицаЗначений;
	
	ТаблицаРасчетаВычета.Колонки.Добавить("Номенклатура",	Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаРасчетаВычета.Колонки.Добавить("СуммаПриходПР", 	ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаРасчетаВычета.Колонки.Добавить("СуммаРасходПР", 	ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаРасчетаВычета.Колонки.Добавить("СуммаУменьшенияПР", 	ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаРасчетаВычета.Колонки.Добавить("Вычет", 			ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаРасчетаВычета.Колонки.Добавить("РасчетнаяСуммаДляВычета", 	ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаРасчетаВычета.Колонки.Добавить("СНДБУ", 			ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаРасчетаВычета.Колонки.Добавить("СКДБУ", 			ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаРасчетаВычета.Колонки.Добавить("ОборотДтБУ", 	ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
   	ТаблицаРасчетаВычета.Колонки.Добавить("ОборотДтПР", 	ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаРасчетаВычета.Колонки.Добавить("ОборотКтНУ", 	ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));

	Возврат ТаблицаРасчетаВычета;
	
КонецФункции

Процедура РасчетВычетаПоРеализованнымТоварам (ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Реквизиты = ТаблицаРеквизиты[0];	
	
	КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	
	ТаблицаРасчетаВычета = ПодготовитьТаблицуРасчетаВычета();
    
	//признаем поступление ПР в НУ в отчетном периоде		 
	Запрос = Новый Запрос;
	Запрос.Текст =  "ВЫБРАТЬ
					|	ЕСТЬNULL(НалоговыйОбороты.СуммаОборотДт, 0) КАК СуммаПР,
					|	НалоговыйОбороты.Счет,
					|	НалоговыйОбороты.Субконто1,
					|	НалоговыйОбороты.Субконто2,
					|	НалоговыйОбороты.Субконто3,
					|	НалоговыйОбороты.КорСчет,
					|	НалоговыйОбороты.КорСубконто1,
					|	НалоговыйОбороты.КорСубконто2,
					|	НалоговыйОбороты.КорСубконто3
					|ИЗ
					|	РегистрБухгалтерии.Налоговый.Обороты(
					|			&НачалоГода,
					|			&КонецГода,
					|			,
					|			Счет В ИЕРАРХИИ (&СчетНУ),
					|			,
					|			СтруктурноеПодразделение = &СтруктурноеПодразделение
					|				И Организация = &Организация
					|				И ВидУчета В Иерархии (ЗНАЧЕНИЕ(Справочник.ВидыУчетаНУ.ПР)),
					|			,
					|			) КАК НалоговыйОбороты
					|ГДЕ
					|	НалоговыйОбороты.СуммаОборотДт <> 0";
	
	Запрос.УстановитьПараметр("НачалоГода",   НачалоГода(Реквизиты.Период));
	Запрос.УстановитьПараметр("КонецГода",    КонецГода(Реквизиты.Период));	
	Запрос.УстановитьПараметр("Организация",  Реквизиты.Организация);
	Запрос.УстановитьПараметр("СтруктурноеПодразделение",Реквизиты.СтруктурноеПодразделение);
	
	МассивСчетовНУ = Новый Массив;
	МассивСчетовНУ.Добавить(ПланыСчетов.Налоговый.Товары);
	МассивСчетовНУ.Добавить(ПланыСчетов.Налоговый.СырьеИМатериалы);
	МассивСчетовНУ.Добавить(ПланыСчетов.Налоговый.ГотоваяПродукция);
	МассивСчетовНУ.Добавить(ПланыСчетов.Налоговый.МатериалыПереданныеВПереработку);
	
	Запрос.УстановитьПараметр("СчетНУ", МассивСчетовНУ);
	
	Результат = Запрос.Выполнить();
	ТЗПР = Результат.Выгрузить();
	
	Выборка = Результат.Выбрать();
	
	Пока  Выборка.Следующий() Цикл
		
		Проводка = Движения.Налоговый.Добавить();
		Проводка.Период       = Реквизиты.Период;
		Проводка.Организация  = Реквизиты.Организация;
		
		Проводка.СчетДт       = ПланыСчетов.Налоговый.ПрочиеРасходы;		
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, Справочники.СтатьиЗатрат.УменьшениеВычетаПоПР);
		
		Проводка.СчетКт       = Выборка.Счет;
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, Выборка.Субконто1);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, Выборка.Субконто2);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, Выборка.Субконто3);		
		
		Проводка.ВидУчетаДт = Справочники.ВидыУчетаНУ.НУ;
		Проводка.ВидУчетаКт = Проводка.ВидУчетаДт;
		
		Проводка.Сумма      = -Выборка.СуммаПР;
		Проводка.Содержание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Признание ПР в отчетном периоде %1'", КодОсновногоЯзыка),
			ПредставлениеПериода(НачалоГода(Реквизиты.Период), КонецГода(Реквизиты.Период), "Л=" + КодОсновногоЯзыка + "; ФП=Истина"));
		Проводка.ВидРегламентнойОперации = Перечисления.ВидыРегламентныхОпераций.РасчетВычетаПоРеализованнымТоварам;	
		
		ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(Проводка, Реквизиты.СтруктурноеПодразделение,
		Реквизиты.СтруктурноеПодразделение);
		
		//запишем в вспомогательный регистр
		СтрокаЗаписьРасчетаВычета = ТаблицаРасчетаВычета.Добавить();
		СтрокаЗаписьРасчетаВычета.Номенклатура		= Выборка.Субконто1;  				
		СтрокаЗаписьРасчетаВычета.СуммаПриходПР    	= Выборка.СуммаПР;
		
		//отразим сразу ее как ВР
		Проводка = Движения.Налоговый.Добавить();
		Проводка.Период       = Реквизиты.Период;
		Проводка.Организация  = Реквизиты.Организация;
		
		Проводка.СчетДт       = ПланыСчетов.Налоговый.ПрочиеРасходы;		
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, Справочники.СтатьиЗатрат.УменьшениеВычетаПоПР);
		
		
		Проводка.СчетКт       = Выборка.Счет;
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, Выборка.Субконто1);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, Выборка.Субконто2);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, Выборка.Субконто3);		
		
		ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(Проводка, Реквизиты.СтруктурноеПодразделение,
		Реквизиты.СтруктурноеПодразделение);
		
		Проводка.ВидУчетаДт = Справочники.ВидыУчетаНУ.ВР;
		Проводка.ВидУчетаКт = Проводка.ВидУчетаДт;
		
		Проводка.Сумма        = Выборка.СуммаПР;
		Проводка.Содержание   = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Признание ПР в отчетном периоде %1'", КодОсновногоЯзыка),
			ПредставлениеПериода(НачалоГода(Реквизиты.Период), КонецГода(Реквизиты.Период), "Л=" + КодОсновногоЯзыка + "; ФП=Истина"));
		Проводка.ВидРегламентнойОперации = Перечисления.ВидыРегламентныхОпераций.РасчетВычетаПоРеализованнымТоварам;	
	КонецЦикла;
	
	//расчитаем вычет по реализованным товарам
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоГода",   НачалоГода(Реквизиты.Период));
	Запрос.УстановитьПараметр("КонецГода",    КонецГода(Реквизиты.Период));	
	Запрос.УстановитьПараметр("Организация",  Реквизиты.Организация);
	Запрос.УстановитьПараметр("Субконто",     ПланыВидовХарактеристик.ВидыСубконтоТиповые.Номенклатура);
	Запрос.УстановитьПараметр("СтруктурноеПодразделение",Реквизиты.СтруктурноеПодразделение);
	
	МассивСчетовНУ = Новый Массив;
	МассивСчетовНУ.Добавить(ПланыСчетов.Налоговый.Товары);
	МассивСчетовНУ.Добавить(ПланыСчетов.Налоговый.СырьеИМатериалы);
	МассивСчетовНУ.Добавить(ПланыСчетов.Налоговый.ГотоваяПродукция);
	МассивСчетовНУ.Добавить(ПланыСчетов.Налоговый.МатериалыПереданныеВПереработку);
	
	Запрос.УстановитьПараметр("СчетНУ", МассивСчетовНУ);  
	
	Запрос.Текст = "ВЫБРАТЬ
	|	НалоговыйОбороты.Субконто1 КАК Субконто1,
	|	НалоговыйОбороты.Счет,
	|	НалоговыйОбороты.Субконто2,
	|	НалоговыйОбороты.Субконто3,
	|	НалоговыйОбороты.КорСубконто1,
	|	НалоговыйОбороты.КорСубконто2,
	|	НалоговыйОбороты.КорСубконто3,
	|	НалоговыйОбороты.СуммаОборотКт КАК СуммаПР,
	|	НалоговыйОбороты.КорСчет
	|ИЗ
	|	РегистрБухгалтерии.Налоговый.Обороты(
	|			&НачалоГода,
	|			&КонецГода,
	|			,
	|			Счет В ИЕРАРХИИ (&СчетНУ),
	|			,
	|			СтруктурноеПодразделение = &СтруктурноеПодразделение
	|				И Организация = &Организация
	|				И ВидУчета В Иерархии (ЗНАЧЕНИЕ(Справочник.ВидыУчетаНУ.ПР)),
	|			,
	|			) КАК НалоговыйОбороты
	|ГДЕ
	|	НалоговыйОбороты.СуммаОборотКт <> 0"
	;
	РезультатПрРеализации = Запрос.Выполнить();
	
	Если НЕ РезультатПрРеализации.Пустой() Тогда 		
		
		ТаблицаПрРеализации = РезультатПрРеализации.Выгрузить();
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("НачалоГода",   НачалоГода(Реквизиты.Период));
		Запрос.УстановитьПараметр("КонецГода",    КонецГода(Реквизиты.Период));	
		Запрос.УстановитьПараметр("Организация",  Реквизиты.Организация);
		Запрос.УстановитьПараметр("СтруктурноеПодразделение",  Реквизиты.СтруктурноеПодразделение);
		Запрос.УстановитьПараметр("Субконто",    ПланыВидовХарактеристик.ВидыСубконтоТиповые.Номенклатура);
		Запрос.УстановитьПараметр("СчетНУ",       МассивСчетовНУ);
		Запрос.УстановитьПараметр("МассивНоменклатуры", ТаблицаПрРеализации.ВыгрузитьКолонку("Субконто1")); 	
		Запрос.УстановитьПараметр("ТЗПР", ТЗПР); 	
		
		МассивСчетовБУ = Новый Массив;
		МассивСчетовБУ.Добавить(ПланыСчетов.Типовой.Товары);
		МассивСчетовБУ.Добавить(ПланыСчетов.Типовой.СырьеИМатериалы);
		МассивСчетовБУ.Добавить(ПланыСчетов.Типовой.ГотоваяПродукция);
		МассивСчетовБУ.Добавить(ПланыСчетов.Типовой.МатериалыПереданныеВПереработку);
		МассивСчетовБУ.Добавить(ПланыСчетов.Типовой.МонтажОборудования);
		
		Запрос.УстановитьПараметр("СчетБУ",       МассивСчетовБУ);
		
		Запрос.Текст = "ВЫБРАТЬ
		|	ПРВНУ.Субконто1 КАК Субконто1,
		|	-ПРВНУ.СуммаПР КАК СуммаПРВНУ
		|ПОМЕСТИТЬ ПРВНУ
		|ИЗ
		|	&ТЗПР КАК ПРВНУ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(ТиповойОстаткиИОбороты.СуммаНачальныйОстатокДт, 0) КАК СуммаНачальныйОстатокДт,
		|	ЕСТЬNULL(ТиповойОстаткиИОбороты.СуммаКонечныйОстатокДт, 0) КАК СуммаКонечныйОстатокДт,
		|	ЕСТЬNULL(ТиповойОстаткиИОбороты.СуммаОборотДт, 0) КАК СуммаОборотДт,
		|	ЕСТЬNULL(ПР.СуммаОборотДт, 0) КАК СуммаОборотДтПР,
		|	ЕСТЬNULL(НУ.СуммаОборотКт, 0) КАК СуммаОборотКтНУ,
		|	ТиповойОстаткиИОбороты.Субконто1,
		|	ЕСТЬNULL(ПРВНУ.СуммаПРВНУ, 0) КАК СуммаПРВНУ
		|ИЗ
		|	РегистрБухгалтерии.Типовой.ОстаткиИОбороты(
		|			&НачалоГода,
		|			&КонецГода,
		|			,
		|			,
		|			Счет В ИЕРАРХИИ (&СчетБУ),
		|			&Субконто,
		|			СтруктурноеПодразделение = &СтруктурноеПодразделение
		|				И Организация = &Организация
		|				И Субконто1 В (&МассивНоменклатуры)) КАК ТиповойОстаткиИОбороты
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Налоговый.Обороты(
		|				&НачалоГода,
		|				&КонецГода,
		|				,
		|				Счет В ИЕРАРХИИ (&СчетНУ),
		|				&Субконто,
		|				СтруктурноеПодразделение = &СтруктурноеПодразделение
		|					И Организация = &Организация
		|					И ВидУчета В ИЕРАРХИИ (ЗНАЧЕНИЕ(Справочник.ВидыУчетаНУ.ПР))
		|					И Субконто1 В (&МассивНоменклатуры),
		|				,
		|				) КАК ПР
		|		ПО ТиповойОстаткиИОбороты.Субконто1 = ПР.Субконто1
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Налоговый.Обороты(
		|				&НачалоГода,
		|				&КонецГода,
		|				,
		|				Счет В ИЕРАРХИИ (&СчетНУ),
		|				&Субконто,
		|				СтруктурноеПодразделение = &СтруктурноеПодразделение
		|					И Организация = &Организация
		|					И ВидУчета = ЗНАЧЕНИЕ(Справочник.ВидыУчетаНУ.НУ)
		|					И Субконто1 В (&МассивНоменклатуры),
		|				,
		|				) КАК НУ
		|		ПО ТиповойОстаткиИОбороты.Субконто1 = НУ.Субконто1
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПРВНУ КАК ПРВНУ
		|		ПО ТиповойОстаткиИОбороты.Субконто1 = ПРВНУ.Субконто1
		|ИТОГИ
		|	СУММА(СуммаНачальныйОстатокДт),
		|	СУММА(СуммаКонечныйОстатокДт),
		|	СУММА(СуммаОборотДт),
		|	СУММА(СуммаОборотДтПР),
		|	СУММА(СуммаОборотКтНУ),
		|	СУММА(СуммаПРВНУ)
		|ПО
		|	ОБЩИЕ";
		
		Результат = Запрос.Выполнить();
		
		Если НЕ Результат.Пустой() Тогда 				
			ТаблицаСуммПоНУ = Результат.Выгрузить();
			СтрокаПоВычету = ТаблицаСуммПоНУ[0];
			ВычетПоЗатратам	 = СтрокаПоВычету.СуммаНачальныйОстатокДт - СтрокаПоВычету.СуммаКонечныйОстатокДт + СтрокаПоВычету.СуммаОборотДт - СтрокаПоВычету.СуммаОборотДтПР;
			ВычетВНУ		 = ВычетПоЗатратам - (СтрокаПоВычету.СуммаОборотКтНУ + СтрокаПоВычету.СуммаПРВНУ);
			
			Если НЕ ВычетВНУ = 0 Тогда
				
				ОбщаяСуммаРаспределения = ВычетВНУ;
				
				//запишем в вспомогательный регистр даные по вычету
				СтрокаЗаписьРасчетаВычета = ТаблицаРасчетаВычета.Добавить();
				СтрокаЗаписьРасчетаВычета.Вычет  					= ВычетПоЗатратам;
				СтрокаЗаписьРасчетаВычета.РасчетнаяСуммаДляВычета   = ОбщаяСуммаРаспределения;
				СтрокаЗаписьРасчетаВычета.СНДБУ   					= СтрокаПоВычету.СуммаНачальныйОстатокДт;
				СтрокаЗаписьРасчетаВычета.СКДБУ   					= СтрокаПоВычету.СуммаКонечныйОстатокДт;
				СтрокаЗаписьРасчетаВычета.ОборотДтБУ   				= СтрокаПоВычету.СуммаОборотДт;
				СтрокаЗаписьРасчетаВычета.ОборотДтПР   				= СтрокаПоВычету.СуммаОборотДтПР;
				СтрокаЗаписьРасчетаВычета.ОборотКтНУ   				= СтрокаПоВычету.СуммаОборотКтНУ;
				
				КоличествоСтрокПР = ТаблицаПрРеализации.Количество() - 1;
				БазисРаспределенияПР = Новый Массив(); 	
				
				Для Индекс = 0 по КоличествоСтрокПР Цикл			
					БазисРаспределенияПР.Добавить(ТаблицаПрРеализации[Индекс].СуммаПР);			
				КонецЦикла;
				
				РаспределеннаСуммаПоПозициям = ОбщегоНазначенияБККлиентСервер.РаспределитьПропорционально(ОбщаяСуммаРаспределения, БазисРаспределенияПР);
				
				Для НомерСтроки = 0 по РаспределеннаСуммаПоПозициям.ВГраница() цикл
					СтрокаКПроводке = ТаблицаПрРеализации[НомерСтроки];
					СуммаПроводки   = РаспределеннаСуммаПоПозициям[НомерСтроки] ;
					
					//проводки по вычету НУ  			
					Проводка = Движения.Налоговый.Добавить();
					Проводка.Период       = Реквизиты.Период;
					Проводка.Организация  = Реквизиты.Организация;
					
					Проводка.СчетДт       = СтрокаКПроводке.КорСчет;		
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаКПроводке.КорСубконто1);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаКПроводке.КорСубконто2);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтрокаКПроводке.КорСубконто3);
					
					Проводка.СчетКт       = СтрокаКПроводке.Счет;
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтрокаКПроводке.Субконто1);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтрокаКПроводке.Субконто2);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, СтрокаКПроводке.Субконто3);		
					
					ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(Проводка, Реквизиты.СтруктурноеПодразделение,
					Реквизиты.СтруктурноеПодразделение);
					
					Проводка.ВидУчетаДт = Справочники.ВидыУчетаНУ.НУ;
					Проводка.ВидУчетаКт = Проводка.ВидУчетаДт;
					
					Проводка.Сумма      = СуммаПроводки;
					Проводка.Содержание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Уменьшение вычета в отчетном периоде по ПР %1'", КодОсновногоЯзыка),
						ПредставлениеПериода(НачалоГода(Реквизиты.Период), КонецГода(Реквизиты.Период), "Л=" + КодОсновногоЯзыка + "; ФП=Истина"));
					Проводка.ВидРегламентнойОперации = Перечисления.ВидыРегламентныхОпераций.РасчетВычетаПоРеализованнымТоварам;	
					
					//Уменьшение ВР			
					Проводка = Движения.Налоговый.Добавить();
					Проводка.Период       = Реквизиты.Период;
					Проводка.Организация  = Реквизиты.Организация;
					
					Проводка.СчетДт       = СтрокаКПроводке.КорСчет;		
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаКПроводке.КорСубконто1);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаКПроводке.КорСубконто2);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтрокаКПроводке.КорСубконто3);
					
					Проводка.СчетКт       = СтрокаКПроводке.Счет;
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтрокаКПроводке.Субконто1);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтрокаКПроводке.Субконто2);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, СтрокаКПроводке.Субконто3);		
					
					ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(Проводка, Реквизиты.СтруктурноеПодразделение,
					Реквизиты.СтруктурноеПодразделение);
					
					Проводка.ВидУчетаДт = Справочники.ВидыУчетаНУ.ВР;
					Проводка.ВидУчетаКт = Проводка.ВидУчетаДт;
					
					Проводка.Сумма      = -СуммаПроводки;
					Проводка.Содержание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Уменьшение вычета в отчетном периоде по ПР %1'", КодОсновногоЯзыка),
						ПредставлениеПериода(НачалоГода(Реквизиты.Период), КонецГода(Реквизиты.Период), "Л=" + КодОсновногоЯзыка + "; ФП=Истина"));
					
					Проводка.ВидРегламентнойОперации = Перечисления.ВидыРегламентныхОпераций.РасчетВычетаПоРеализованнымТоварам;
					
					//запишем в вспомогательный регистр даные по вычету
					СтрокаЗаписьРасчетаВычета = ТаблицаРасчетаВычета.Добавить();
					СтрокаЗаписьРасчетаВычета.Номенклатура  = СтрокаКПроводке.Субконто1;
					СтрокаЗаписьРасчетаВычета.СуммаРасходПР = СтрокаКПроводке.СуммаПР;
					СтрокаЗаписьРасчетаВычета.СуммаУменьшенияПР = СуммаПроводки; 
					
					//найдем первоначальные данные
					СтрокаДанных = ТаблицаСуммПоНУ.НайтиСтроки(Новый Структура("Субконто1",СтрокаКПроводке.Субконто1));
					Если СтрокаДанных.Количество() <> 0 Тогда 			
						СтрокаЗаписьРасчетаВычета.СНДБУ   	   = СтрокаДанных[0].СуммаНачальныйОстатокДт;
						СтрокаЗаписьРасчетаВычета.СКДБУ  	   = СтрокаДанных[0].СуммаКонечныйОстатокДт;
						СтрокаЗаписьРасчетаВычета.ОборотДтБУ   = СтрокаДанных[0].СуммаОборотДт;
						СтрокаЗаписьРасчетаВычета.ОборотДтПР   = СтрокаДанных[0].СуммаОборотДтПР;
						СтрокаЗаписьРасчетаВычета.ОборотКтНУ   = СтрокаДанных[0].СуммаОборотКтНУ; 
					КонецЕсли; 	
					
				КонецЦикла;	
			КонецЕсли;//Если НЕ РезультатПрРеализации.Пустой()
		КонецЕсли;  //Если НЕ Результат.Пустой()
	КонецЕсли;      // Если НЕ ВычетНУ = 0 
	
	Движения.Налоговый.Записать(Ложь);
		
	РасчетСебестоимости.ЗаписьВВспомогательныеРегистрыСведений(Реквизиты, ТаблицаРасчетаВычета,
		РегистрыСведений.РасчетВычетаПоРеализованнымТоварам,
		"Активность,Организация,СтруктурноеПодразделение,ПериодРасчета,Активность,Регистратор,Номенклатура",											
		"Вычет,СуммаПриходПР,СуммаРасходПР,СуммаУменьшенияПР,РасчетнаяСуммаДляВычета, СНДБУ,СКДБУ, ОборотДтБУ, ОборотДтПР, ОборотКтНУ ");
	
КонецПроцедуры

Процедура ЗакрытиеСчетовВА(ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Реквизиты = ТаблицаРеквизиты[0];	
	
	// выберем остатки по всем счетам налогового учета, Кроме счетов ВА по которым уже велся балансовый учет		
	// запрос выполняется на дату документа, чтобы не затрагивать последующие по времени движения по вводу остатков НУ.
	Запрос = Новый Запрос; 
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТиповойОстатки.Организация,
	               |	ТиповойОстатки.Субконто1,
	               |	ТиповойОстатки.СуммаОстаток КАК СуммаБУ,
	               |	0 КАК СуммаНУ
	               |ПОМЕСТИТЬ ВТ_СтоимостьВАПредварительная
	               |ИЗ
	               |	РегистрБухгалтерии.Типовой.Остатки(&КонГраница, Счет В ИЕРАРХИИ (&СчетаБУ), , Организация = &Организация) КАК ТиповойОстатки
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	НалоговыйОстатки.Организация,
	               |	НалоговыйОстатки.Субконто1,
	               |	0,
	               |	НалоговыйОстатки.СуммаОстаток
	               |ИЗ
	               |	РегистрБухгалтерии.Налоговый.Остатки(&КонГраница, Счет В ИЕРАРХИИ (&СчетаНУ), , Организация = &Организация) КАК НалоговыйОстатки
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_СтоимостьВАПредварительная.Организация,
	               |	ВТ_СтоимостьВАПредварительная.Субконто1,
	               |	СУММА(ВТ_СтоимостьВАПредварительная.СуммаБУ) КАК СуммаБУ,
	               |	СУММА(ВТ_СтоимостьВАПредварительная.СуммаНУ) КАК СуммаНУ
	               |ПОМЕСТИТЬ ВТ_СтоимостьВА
	               |ИЗ
	               |	ВТ_СтоимостьВАПредварительная КАК ВТ_СтоимостьВАПредварительная
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТ_СтоимостьВАПредварительная.Организация,
	               |	ВТ_СтоимостьВАПредварительная.Субконто1
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_СтоимостьВА.Организация,
	               |	ВТ_СтоимостьВА.Субконто1 КАК Субконто1,
	               |	ВТ_СтоимостьВА.Субконто1.Код,
	               |	ЕСТЬNULL(НалоговыйОстатки.Счет, ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ВАНеВключенныеВСтоимостнойБаланс)) КАК СчетУчета,
	               |	ВТ_СтоимостьВА.СуммаБУ КАК СуммаБУ,
	               |	ВТ_СтоимостьВА.СуммаНУ КАК СуммаНУ,
	               |	ВЫБОР
	               |		КОГДА ВТ_СтоимостьВА.СуммаНУ = 0
	               |			ТОГДА 1
	               |		ИНАЧЕ НалоговыйОстатки.СуммаОстаток / ВТ_СтоимостьВА.СуммаНУ
	               |	КОНЕЦ КАК Коэффициент,
	               |	ВТ_СтоимостьВА.СуммаБУ * ВЫБОР
	               |		КОГДА ВТ_СтоимостьВА.СуммаНУ = 0
	               |			ТОГДА 1
	               |		ИНАЧЕ НалоговыйОстатки.СуммаОстаток / ВТ_СтоимостьВА.СуммаНУ
	               |	КОНЕЦ - ЕСТЬNULL(НалоговыйОстатки.СуммаОстаток, 0) КАК СуммаВР
	               |ИЗ
	               |	ВТ_СтоимостьВА КАК ВТ_СтоимостьВА
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Налоговый.Остатки(&КонГраница, Счет В ИЕРАРХИИ (&СчетаНУ), , Организация = &Организация) КАК НалоговыйОстатки
	               |		ПО ВТ_СтоимостьВА.Организация = НалоговыйОстатки.Организация
	               |			И ВТ_СтоимостьВА.Субконто1 = НалоговыйОстатки.Субконто1
	               |ИТОГИ
	               |	МАКСИМУМ(СуммаБУ),
	               |	МАКСИМУМ(СуммаНУ),
	               |	СУММА(СуммаВР)
	               |ПО
	               |	Субконто1";
				   
	СписокСчетовВА_БУ= Новый СписокЗначений;
	СписокСчетовВА_БУ.Добавить(ПланыСчетов.Типовой.ИнвестицииВНедвижимость_);
	СписокСчетовВА_БУ.Добавить(ПланыСчетов.Типовой.ОсновныеСредства_);
    СписокСчетовВА_БУ.Добавить(ПланыСчетов.Типовой.БиологическиеАктивы);	
	СписокСчетовВА_БУ.Добавить(ПланыСчетов.Типовой.НематериальныеАктивы);	
	
	Запрос.УстановитьПараметр("КонГраница",   Новый Граница (КонецМесяца(Реквизиты.Период), ВидГраницы.Включая));			
	Запрос.УстановитьПараметр("Организация",  Реквизиты.Организация);
	Запрос.УстановитьПараметр("СчетаБУ", 	  СписокСчетовВА_БУ);			
	Запрос.УстановитьПараметр("СчетаНУ", 	  ПланыСчетов.Налоговый.ВнеоборотныеАктивы);			

	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ВыборкаПоФА = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоФА.Следующий() Цикл
		ИтогоВР = ВыборкаПоФА.СуммаБУ - ВыборкаПоФА.СуммаНУ;
		Если ИтогоВР = 0 Тогда
			Продолжить;
			// по активу не выявлены разницы в стоимости БУ и НУ
		КонецЕсли;	
		
		ВыборкаДетали = ВыборкаПоФА.Выбрать();
		Пока ВыборкаДетали.Следующий() Цикл
			Проводка = Движения.Налоговый.Добавить();
			Проводка.Период       = Реквизиты.Период;
			Проводка.Организация  = Реквизиты.Организация;
			
			Проводка.СчетДт	 	= ВыборкаДетали.СчетУчета;
			Если НЕ ВыборкаДетали.Субконто1 = NULL Тогда
				Проводка["СубконтоДт"].Вставить(Проводка.СчетДт.ВидыСубконто[0].ВидСубконто, ВыборкаДетали.Субконто1);
			КонецЕсли;

			Проводка.ВидУчетаДт = Справочники.ВидыУчетаНУ.ВР;
			
			Проводка.СчетКт	 	= ПланыСчетов.Налоговый.Вспомогательный;
			Проводка.ВидУчетаКт = Справочники.ВидыУчетаНУ.ВР;
			
			Проводка.Сумма 		= ВыборкаДетали.СуммаВР;
			
			Проводка.Содержание = НСтр("ru = 'Закрытие счетов налогового учета ВА'", ОбщегоНазначения.КодОсновногоЯзыка());
			// для обработки ошибок округления
			ИтогоВР = ИтогоВР - Проводка.Сумма;
		КонецЦикла;	
		
		// обработка ошибок округления
		Если ИтогоВР <> 0 Тогда
			Проводка.Сумма = Проводка.Сумма + ИтогоВР;
		КонецЕсли;
	КонецЦикла;
	
	Движения.Налоговый.Записать(Ложь);
	
КонецПроцедуры

Процедура ЗакрытиеПрочихСчетов(ТаблицаРеквизиты, Движения, Отказ) Экспорт 

	Реквизиты = ТаблицаРеквизиты[0];	
	
	КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	
	//выберем остатки по всем счетам налогового учета, Кроме счетов ВА по которым уже велся балансовый учет		
	// запрос выполняется на дату документа, чтобы не затрагивать последующие по времени движения по вводу остатков НУ.
		Запрос = Новый Запрос; 
		Запрос.Текст = "ВЫБРАТЬ
		               |	ИтогоБезУчетаНовыхОстатков.Счет,
		               |	ИтогоБезУчетаНовыхОстатков.Субконто1,
		               |	ИтогоБезУчетаНовыхОстатков.Субконто2,
		               |	ИтогоБезУчетаНовыхОстатков.Субконто3,
		               |	ИтогоБезУчетаНовыхОстатков.ВидУчета,
		               |	СУММА(ИтогоБезУчетаНовыхОстатков.СуммаОстаток) КАК СуммаОстаток,
		               |	СУММА(ИтогоБезУчетаНовыхОстатков.СуммаОстатокДт) КАК СуммаОстатокДт,
		               |	СУММА(ИтогоБезУчетаНовыхОстатков.СуммаОстатокКт) КАК СуммаОстатокКт,
		               |	СУММА(ИтогоБезУчетаНовыхОстатков.КоличествоОстаток) КАК КоличествоОстаток,
		               |	СУММА(ИтогоБезУчетаНовыхОстатков.КоличествоОстатокДт) КАК КоличествоОстатокДт,
		               |	СУММА(ИтогоБезУчетаНовыхОстатков.КоличествоОстатокКт) КАК КоличествоОстатокКт,
		               |	ИтогоБезУчетаНовыхОстатков.СтруктурноеПодразделение
		               |ИЗ
		               |	(ВЫБРАТЬ
		               |		НалоговыйОстатки.Счет КАК Счет,
		               |		НалоговыйОстатки.Субконто1 КАК Субконто1,
		               |		НалоговыйОстатки.Субконто2 КАК Субконто2,
		               |		НалоговыйОстатки.Субконто3 КАК Субконто3,
		               |		НалоговыйОстатки.ВидУчета КАК ВидУчета,
		               |		ЕСТЬNULL(НалоговыйОстатки.СуммаОстаток, 0) КАК СуммаОстаток,
		               |		ЕСТЬNULL(НалоговыйОстатки.СуммаОстатокДт, 0) КАК СуммаОстатокДт,
		               |		ЕСТЬNULL(НалоговыйОстатки.СуммаОстатокКт, 0) КАК СуммаОстатокКт,
		               |		ЕСТЬNULL(НалоговыйОстатки.КоличествоОстаток, 0) КАК КоличествоОстаток,
		               |		ЕСТЬNULL(НалоговыйОстатки.КоличествоОстатокДт, 0) КАК КоличествоОстатокДт,
		               |		ЕСТЬNULL(НалоговыйОстатки.КоличествоОстатокКт, 0) КАК КоличествоОстатокКт,
		               |		НалоговыйОстатки.СтруктурноеПодразделение КАК СтруктурноеПодразделение
		               |	ИЗ
		               |		РегистрБухгалтерии.Налоговый.Остатки(
		               |				&КонГраница,
		               |				(НЕ Счет В ИЕРАРХИИ (&СчетаВА))
		               |					ИЛИ Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Налоговый.НезавершенноеСтроительство)),
		               |				,
		               |				Организация = &Организация) КАК НалоговыйОстатки
		               |	ГДЕ
		               |		(ЕСТЬNULL(НалоговыйОстатки.СуммаОстаток, 0) <> 0
		               |				ИЛИ ЕСТЬNULL(НалоговыйОстатки.КоличествоОстаток, 0) <> 0)
		               |	
		               |	ОБЪЕДИНИТЬ ВСЕ
		               |	
		               |	ВЫБРАТЬ
		               |		НалоговыйОбороты.Счет,
		               |		НалоговыйОбороты.Субконто1,
		               |		НалоговыйОбороты.Субконто2,
		               |		НалоговыйОбороты.Субконто3,
		               |		НалоговыйОбороты.ВидУчета,
		               |		СУММА(-ЕСТЬNULL(НалоговыйОбороты.СуммаОборот, 0)),
		               |		СУММА(-ЕСТЬNULL(НалоговыйОбороты.СуммаОборот, 0)),
		               |		СУММА(ЕСТЬNULL(НалоговыйОбороты.СуммаОборот, 0)),
		               |		СУММА(-ЕСТЬNULL(НалоговыйОбороты.КоличествоОборот, 0)),
		               |		СУММА(-ЕСТЬNULL(НалоговыйОбороты.КоличествоОборот, 0)),
		               |		СУММА(ЕСТЬNULL(НалоговыйОбороты.КоличествоОборот, 0)),
		               |		НалоговыйОбороты.СтруктурноеПодразделение
		               |	ИЗ
		               |		РегистрБухгалтерии.Налоговый.Обороты(
		               |				&ДатаНач,
		               |				&ДатаКон,
		               |				Регистратор,
		               |				(НЕ Счет В ИЕРАРХИИ (&СчетаВА))
		               |					ИЛИ Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Налоговый.НезавершенноеСтроительство)),
		               |				,
		               |				Организация = &Организация,
		               |				,
		               |				) КАК НалоговыйОбороты
		               |	ГДЕ
		               |		(НалоговыйОбороты.Регистратор ССЫЛКА Документ.ВводНачальныхОстатков
		               |				ИЛИ НалоговыйОбороты.Регистратор ССЫЛКА Документ.ВводНачальныхОстатковОС
		               |				ИЛИ НалоговыйОбороты.Регистратор ССЫЛКА Документ.ВводНачальныхОстатковПоЗарплате)
		               |	
		               |	СГРУППИРОВАТЬ ПО
		               |		НалоговыйОбороты.Счет,
		               |		НалоговыйОбороты.Субконто1,
		               |		НалоговыйОбороты.Субконто2,
		               |		НалоговыйОбороты.Субконто3,
		               |		НалоговыйОбороты.ВидУчета,
		               |		НалоговыйОбороты.СтруктурноеПодразделение) КАК ИтогоБезУчетаНовыхОстатков
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	ИтогоБезУчетаНовыхОстатков.Счет,
		               |	ИтогоБезУчетаНовыхОстатков.Субконто1,
		               |	ИтогоБезУчетаНовыхОстатков.Субконто2,
		               |	ИтогоБезУчетаНовыхОстатков.Субконто3,
		               |	ИтогоБезУчетаНовыхОстатков.ВидУчета,
		               |	ИтогоБезУчетаНовыхОстатков.СтруктурноеПодразделение"  ; 		
					   
		КонГраница = Новый Граница(КонецМесяца(Реквизиты.Период), ВидГраницы.Включая);
		Запрос.УстановитьПараметр("КонГраница", КонГраница);	
		Запрос.УстановитьПараметр("ДатаНач", 	НачалоДня(КонецМесяца(Реквизиты.Период)));	
		Запрос.УстановитьПараметр("ДатаКон", 	КонецМесяца(Реквизиты.Период));	
		Запрос.УстановитьПараметр("СчетаВА", 	ПланыСчетов.Налоговый.ВнеоборотныеАктивы);			
		Запрос.УстановитьПараметр("Организация",  Реквизиты.Организация);
				
		Результат = Запрос.Выполнить();

		Если Результат.Пустой() Тогда
			Возврат;
		КонецЕсли;
		
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			Проводка = Движения.Налоговый.Добавить();
			Проводка.Период       = Реквизиты.Период;
			Проводка.Организация  = Реквизиты.Организация;		

			Если Выборка.Счет.Вид = ВидСчета.Активный Тогда
				Префикс 	= "Дт";
				Префикс000 	= "Кт";
			ИначеЕсли Выборка.Счет.Вид = ВидСчета.Пассивный Тогда
				Префикс 	= "Кт";
				Префикс000 	= "Дт";
				
			ИначеЕсли Выборка.Счет.Вид = ВидСчета.АктивноПассивный Тогда
				Если Выборка.СуммаОстаток > 0 Тогда
					Префикс 	= "Дт";     				
					Префикс000 	= "Кт";
				Иначе           					
					Префикс 	= "Кт";    
					Префикс000 	= "Дт";
				КонецЕсли;
			КонецЕсли;
			Проводка["Счет" + Префикс000] = ПланыСчетов.Налоговый.Вспомогательный;
			Проводка["ВидУчета" + Префикс000]  = Справочники.ВидыУчетаНУ.НУ;
			
			Проводка["Счет" + Префикс] = Выборка.Счет;	
			// могут быть значения NULL и Неопределено на счетах с измененной аналитикой
			// поэтому устанавливаем субконто в зависимости от исходного значения без стандартной процедуры
			Если НЕ Выборка.Субконто1 = NULL Тогда
				Проводка["Субконто" + Префикс].Вставить(Выборка.Счет.ВидыСубконто[0].ВидСубконто, Выборка.Субконто1);
			КонецЕсли;
			Если НЕ Выборка.Субконто2 = NULL Тогда
				Проводка["Субконто" + Префикс].Вставить(Выборка.Счет.ВидыСубконто[1].ВидСубконто, Выборка.Субконто2);
			КонецЕсли;
			Если НЕ Выборка.Субконто3 = NULL Тогда
				Проводка["Субконто" + Префикс].Вставить(Выборка.Счет.ВидыСубконто[2].ВидСубконто, Выборка.Субконто3);
			КонецЕсли;
            				
			Если  Выборка.Счет.Количественный Тогда
				Если Выборка.Счет.Вид = ВидСчета.АктивноПассивный Тогда
					Если Выборка.КоличествоОстаток > 0 Тогда
						Проводка["Количество"+ Префикс] = - Выборка["КоличествоОстаток"];
					Иначе
						Проводка["Количество"+ Префикс] =  Выборка["КоличествоОстаток"];
					КонецЕсли;
				Иначе	
					Проводка["Количество"+ Префикс] = - Выборка["КоличествоОстаток" + Префикс];
				КонецЕсли;
			КонецЕсли;
			
			Если Выборка.Счет.Вид = ВидСчета.АктивноПассивный Тогда
				Если Выборка.СуммаОстаток > 0 Тогда
					Проводка["Сумма"] = - Выборка["СуммаОстаток"];
				Иначе
					Проводка["Сумма"] = Выборка["СуммаОстаток"];
				КонецЕсли;
			Иначе
				Проводка["Сумма"] = - Выборка["СуммаОстаток" + Префикс];
			КонецЕсли;
			
			Проводка["СтруктурноеПодразделение" + Префикс] = Выборка.СтруктурноеПодразделение;
			
			Проводка["ВидУчета" + Префикс]  = Выборка.ВидУчета;
			
			Проводка.Содержание = НСтр("ru = 'Закрытие счетов налогового учета'", КодОсновногоЯзыка);
			Проводка.ВидРегламентнойОперации = Перечисления.ВидыРегламентныхОпераций.ЗакрытиеСчетовНУ;
			
		КонецЦикла;
		
		//Движения.Налоговый.Записывать = Истина;
		Движения.Налоговый.Записать(Ложь);
		
		/// Закрытие счета 00
		Запрос.Текст = "ВЫБРАТЬ
		               |	ЕСТЬNULL(НалоговыйОстатки.СуммаОстаток, 0) КАК СуммаОстаток
					   |ИЗ
		               |	РегистрБухгалтерии.Налоговый.Остатки(&ДатаК, Счет  = Значение(ПланСчетов.Налоговый.Вспомогательный), , Организация = &Организация) КАК НалоговыйОстатки";  
					   
		Запрос.УстановитьПараметр("ДатаК", КонГраница);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		Если ЗначениеЗаполнено(Выборка.СуммаОстаток) Тогда
			ПроводкаНУ = Движения.Налоговый.Добавить();
			ПроводкаНУ.Период       	= Реквизиты.Период;
			ПроводкаНУ.Организация  	= Реквизиты.Организация;		
			ПроводкаНУ.СчетКт 			= ПланыСчетов.Налоговый.Вспомогательный;
			ПроводкаНУ.ВидУчетаКт 		= Справочники.ВидыУчетаНУ.НУ;
			ПроводкаНУ.Сумма 			= Выборка.СуммаОстаток;		
			Движения.Налоговый.Записать(Ложь);
		КонецЕсли;

КонецПроцедуры
 
Процедура РасчетВычетовПоНалогамВБюджет(ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Реквизиты = ТаблицаРеквизиты[0];
	
	КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	
	Если Не Реквизиты.ВедениеУчетаВременныхРазницБалансовымМетодом Тогда
		
		ТекстСообщения = НСтр("ru = 'Для предприятия, не ведущего учет временных разниц балансовым методом, расчет вычета по налогам не поддерживается. Операция не выполнена.'", ОбщегоНазначения.КодОсновногоЯзыка());
		ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации(ТекстСообщения, , , Реквизиты.Объект, Перечисления.ВидыРегламентныхОпераций.РасчетВычетовПоНалогам, Ложь);
		
		Возврат
		
	КонецЕсли;
	
	// Получаем сумму затрат по статье "Налоги в бюджет" за отчетный год
	// Сумма вычета = Мин(СальдоНачПоНалогу + Начисление; Сумма уплаты)
	// Невычет образует ВР
	// При получении сальдо налога, считаем его в полном объеме НУ
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	НастройкиВидовНалогов.ВидНалога КАК ВидНалога,
	|	НастройкиВидовНалогов.ОтноситьНаВычетыВПределахУплаченнойСуммыНалога КАК ОтноситьНаВычетыВПределахУплаченнойСуммыНалога
	|ПОМЕСТИТЬ ВТ_НастройкиВидовНалогов
	|ИЗ
	|	РегистрСведений.НастройкиВидовНалоговВНалоговомУчете.СрезПоследних(&Период, ) КАК НастройкиВидовНалогов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидНалога
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НалогиСборыОтчисления.Ссылка КАК Налог,
	|	НалогиСборыОтчисления.СчетУчетаРасчетовСКонтрагентомНУ КАК СчетУчетаРасчетовСКонтрагентомНУ,
	|	НалогиСборыОтчисления.СтатьяЗатрат КАК СтатьяЗатрат
	|ПОМЕСТИТЬ ВТ_СписокНалогов
	|ИЗ
	|	Справочник.НалогиСборыОтчисления КАК НалогиСборыОтчисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_НастройкиВидовНалогов КАК НастройкиВидовНалогов
	|		ПО (НастройкиВидовНалогов.ВидНалога = НалогиСборыОтчисления.Ссылка)
	|ГДЕ
	|	ЕСТЬNULL(НастройкиВидовНалогов.ОтноситьНаВычетыВПределахУплаченнойСуммыНалога, ЛОЖЬ)
	|	И НалогиСборыОтчисления.Ссылка <> ЗНАЧЕНИЕ(Справочник.НалогиСборыОтчисления.ОтчисленияОбязательноеСоциальноеМедицинскоеСтрахование)
	|	И НалогиСборыОтчисления.Ссылка <> ЗНАЧЕНИЕ(Справочник.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносыРаботодателя)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НалогиСборыОтчисления.Ссылка КАК Налог,
	|	ВЫБОР
	|		КОГДА НалогиСборыОтчисления.СчетУчетаРасчетовСКонтрагентомНУ = ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ПустаяСсылка)
	|			И НалогиСборыОтчисления.Ссылка = ЗНАЧЕНИЕ(Справочник.НалогиСборыОтчисления.ОтчисленияОбязательноеСоциальноеМедицинскоеСтрахование)
	|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ОбязательстваПоОтчислениямОСМС)
	|		КОГДА НалогиСборыОтчисления.СчетУчетаРасчетовСКонтрагентомНУ = ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ПустаяСсылка)
	|			И НалогиСборыОтчисления.Ссылка = ЗНАЧЕНИЕ(Справочник.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносыРаботодателя)
	|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ОбязательстваПоОбязательнымПенсионнымВзносамРаботодателя)
	|		ИНАЧЕ НалогиСборыОтчисления.СчетУчетаРасчетовСКонтрагентомНУ
	|	КОНЕЦ КАК СчетУчетаРасчетовСКонтрагентомНУ,
	|	НалогиСборыОтчисления.СтатьяЗатрат КАК СтатьяЗатрат
	|ПОМЕСТИТЬ ВТ_СписокНалоговПоОСМС_ОПВР
	|ИЗ
	|	Справочник.НалогиСборыОтчисления КАК НалогиСборыОтчисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_НастройкиВидовНалогов КАК НастройкиВидовНалогов
	|		ПО (НастройкиВидовНалогов.ВидНалога = НалогиСборыОтчисления.Ссылка)
	|ГДЕ
	|	(НалогиСборыОтчисления.Ссылка = ЗНАЧЕНИЕ(Справочник.НалогиСборыОтчисления.ОтчисленияОбязательноеСоциальноеМедицинскоеСтрахование)
	|		ИЛИ НалогиСборыОтчисления.Ссылка = ЗНАЧЕНИЕ(Справочник.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносыРаботодателя))
	|	И ЕСТЬNULL(НастройкиВидовНалогов.ОтноситьНаВычетыВПределахУплаченнойСуммыНалога, ЛОЖЬ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Общий.Счет КАК Счет,
	|	Общий.Организация КАК Организация,
	|	Общий.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	|	Общий.Субконто1 КАК Субконто1,
	|	Общий.Субконто2 КАК Субконто2,
	|	Общий.Субконто3 КАК Субконто3,
	|	СУММА(Общий.НачисленныйНалог) КАК НачисленныйНалог,
	|	Общий.СтатьяЗатратНалога КАК СтатьяЗатратНалога,
	|	СУММА(Общий.СуммаОстаток) КАК СуммаОстаток,
	|	СУММА(Общий.СуммаОплаты) КАК УплаченныйНалог
	|ИЗ
	|	(ВЫБРАТЬ
	|		НачисленныйНалог.Счет КАК Счет,
	|		НачисленныйНалог.Организация КАК Организация,
	|		НачисленныйНалог.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	|		НачисленныйНалог.Субконто1 КАК Субконто1,
	|		НачисленныйНалог.Субконто2 КАК Субконто2,
	|		НачисленныйНалог.Субконто3 КАК Субконто3,
	|		НачисленныйНалог.СуммаОборотКт КАК НачисленныйНалог,
	|		НачисленныйНалог.Субконто1.СтатьяЗатрат КАК СтатьяЗатратНалога,
	|		0 КАК СуммаОстаток,
	|		0 КАК СуммаОплаты
	|	ИЗ
	|		РегистрБухгалтерии.Налоговый.Обороты(
	|				&ДатаНачала,
	|				&ДатаОкончания,
	|				,
	|				Счет В
	|					(ВЫБРАТЬ
	|						НалогиСборыОтчисления.СчетУчетаРасчетовСКонтрагентомНУ
	|					ИЗ
	|						ВТ_СписокНалогов КАК НалогиСборыОтчисления),
	|				,
	|				Организация В (&СписокОрганизаций)
	|					И ВидУчета = ЗНАЧЕНИЕ(Справочник.ВидыУчетаНУ.НУ)
	|					И Субконто1 В
	|						(ВЫБРАТЬ
	|							НалогиСборыОтчисления.Налог
	|						ИЗ
	|							ВТ_СписокНалогов КАК НалогиСборыОтчисления)
	|					И НЕ Субконто2 В (&СписокИсключаемыхПлатежей)
	|					И (КорСубконто1 ССЫЛКА Справочник.СтатьиЗатрат
	|						ИЛИ КорСубконто2 ССЫЛКА Справочник.СтатьиЗатрат
	|						ИЛИ КорСубконто3 ССЫЛКА Справочник.СтатьиЗатрат),
	|				,
	|				) КАК НачисленныйНалог
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		НачисленныйНалог.Счет,
	|		НачисленныйНалог.Организация,
	|		НачисленныйНалог.СтруктурноеПодразделение,
	|		НачисленныйНалог.Субконто1,
	|		НачисленныйНалог.Субконто2,
	|		НачисленныйНалог.Субконто3,
	|		НачисленныйНалог.СуммаОборотКт,
	|		СписокНалоговПоОСМС_ОПВР.СтатьяЗатрат,
	|		0,
	|		0
	|	ИЗ
	|		РегистрБухгалтерии.Налоговый.Обороты(
	|				&ДатаНачала,
	|				&ДатаОкончания,
	|				,
	|				Счет В
	|					(ВЫБРАТЬ
	|						НалогиСборыОтчисления.СчетУчетаРасчетовСКонтрагентомНУ
	|					ИЗ
	|						ВТ_СписокНалоговПоОСМС_ОПВР КАК НалогиСборыОтчисления),
	|				,
	|				Организация В (&СписокОрганизаций)
	|					И ВидУчета = ЗНАЧЕНИЕ(Справочник.ВидыУчетаНУ.НУ)
	|					И НЕ Субконто1 В (&СписокИсключаемыхПлатежей)
	|					И (КорСубконто1 ССЫЛКА Справочник.СтатьиЗатрат
	|						ИЛИ КорСубконто2 ССЫЛКА Справочник.СтатьиЗатрат
	|						ИЛИ КорСубконто3 ССЫЛКА Справочник.СтатьиЗатрат),
	|				,
	|				) КАК НачисленныйНалог
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СписокНалоговПоОСМС_ОПВР КАК СписокНалоговПоОСМС_ОПВР
	|			ПО (НачисленныйНалог.Счет = СписокНалоговПоОСМС_ОПВР.СчетУчетаРасчетовСКонтрагентомНУ)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		НалоговыйОстатки.Счет,
	|		НалоговыйОстатки.Организация,
	|		НалоговыйОстатки.СтруктурноеПодразделение,
	|		НалоговыйОстатки.Субконто1,
	|		НалоговыйОстатки.Субконто2,
	|		НалоговыйОстатки.Субконто3,
	|		0,
	|		НалоговыйОстатки.Субконто1.СтатьяЗатрат,
	|		ВЫБОР
	|			КОГДА НалоговыйОстатки.СуммаОстатокКт > 0
	|				ТОГДА НалоговыйОстатки.СуммаОстатокКт
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА НалоговыйОстатки.СуммаОстатокКт < 0
	|				ТОГДА -НалоговыйОстатки.СуммаОстатокКт
	|			ИНАЧЕ 0
	|		КОНЕЦ
	|	ИЗ
	|		РегистрБухгалтерии.Налоговый.Остатки(
	|				&ДатаНачала,
	|				Счет В
	|					(ВЫБРАТЬ
	|						НалогиСборыОтчисления.СчетУчетаРасчетовСКонтрагентомНУ
	|					ИЗ
	|						ВТ_СписокНалогов КАК НалогиСборыОтчисления),
	|				,
	|				Организация В (&СписокОрганизаций)
	|					И (ВидУчета = ЗНАЧЕНИЕ(Справочник.ВидыУчетаНУ.НУ)
	|						ИЛИ ВидУчета = ЗНАЧЕНИЕ(Справочник.ВидыУчетаНУ.ВР))
	|					И Субконто1 В
	|						(ВЫБРАТЬ
	|							НалогиСборыОтчисления.Налог
	|						ИЗ
	|							ВТ_СписокНалогов КАК НалогиСборыОтчисления)
	|					И НЕ Субконто2 В (&СписокИсключаемыхПлатежей)) КАК НалоговыйОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		НалоговыйОстатки.Счет,
	|		НалоговыйОстатки.Организация,
	|		НалоговыйОстатки.СтруктурноеПодразделение,
	|		НалоговыйОстатки.Субконто1,
	|		НалоговыйОстатки.Субконто2,
	|		НалоговыйОстатки.Субконто3,
	|		0,
	|		СписокНалоговПоОСМС_ОПВР.СтатьяЗатрат,
	|		ВЫБОР
	|			КОГДА НалоговыйОстатки.СуммаОстатокКт > 0
	|				ТОГДА НалоговыйОстатки.СуммаОстатокКт
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА НалоговыйОстатки.СуммаОстатокКт < 0
	|				ТОГДА -НалоговыйОстатки.СуммаОстатокКт
	|			ИНАЧЕ 0
	|		КОНЕЦ
	|	ИЗ
	|		РегистрБухгалтерии.Налоговый.Остатки(
	|				&ДатаНачала,
	|				Счет В
	|					(ВЫБРАТЬ
	|						НалогиСборыОтчисления.СчетУчетаРасчетовСКонтрагентомНУ
	|					ИЗ
	|						ВТ_СписокНалоговПоОСМС_ОПВР КАК НалогиСборыОтчисления),
	|				,
	|				Организация В (&СписокОрганизаций)
	|					И (ВидУчета = ЗНАЧЕНИЕ(Справочник.ВидыУчетаНУ.НУ)
	|						ИЛИ ВидУчета = ЗНАЧЕНИЕ(Справочник.ВидыУчетаНУ.ВР))
	|					И НЕ Субконто1 В (&СписокИсключаемыхПлатежей)) КАК НалоговыйОстатки
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СписокНалоговПоОСМС_ОПВР КАК СписокНалоговПоОСМС_ОПВР
	|			ПО (НалоговыйОстатки.Счет = СписокНалоговПоОСМС_ОПВР.СчетУчетаРасчетовСКонтрагентомНУ)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		УплаченныйНалог.Счет,
	|		УплаченныйНалог.Организация,
	|		УплаченныйНалог.СтруктурноеПодразделение,
	|		УплаченныйНалог.Субконто1,
	|		УплаченныйНалог.Субконто2,
	|		УплаченныйНалог.Субконто3,
	|		0,
	|		УплаченныйНалог.Субконто1.СтатьяЗатрат,
	|		0,
	|		УплаченныйНалог.СуммаОборот
	|	ИЗ
	|		РегистрБухгалтерии.Налоговый.Обороты(
	|				&ДатаНачала,
	|				&ДатаОкончания,
	|				,
	|				Счет В
	|					(ВЫБРАТЬ
	|						НалогиСборыОтчисления.СчетУчетаРасчетовСКонтрагентомНУ
	|					ИЗ
	|						ВТ_СписокНалогов КАК НалогиСборыОтчисления),
	|				,
	|				Организация В (&СписокОрганизаций)
	|					И Субконто1 В
	|						(ВЫБРАТЬ
	|							НалогиСборыОтчисления.Налог
	|						ИЗ
	|							ВТ_СписокНалогов КАК НалогиСборыОтчисления)
	|					И НЕ КорСубконто1 ССЫЛКА Справочник.СтатьиЗатрат
	|					И НЕ ЕСТЬNULL(КорСубконто2, 0) ССЫЛКА Справочник.СтатьиЗатрат
	|					И НЕ ЕСТЬNULL(КорСубконто3, 0) ССЫЛКА Справочник.СтатьиЗатрат
	|					И ВидУчета = ЗНАЧЕНИЕ(Справочник.ВидыУчетаНУ.НУ)
	|					И НЕ Субконто2 В (&СписокИсключаемыхПлатежей),
	|				,
	|				) КАК УплаченныйНалог
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		УплаченныйНалог.Счет,
	|		УплаченныйНалог.Организация,
	|		УплаченныйНалог.СтруктурноеПодразделение,
	|		УплаченныйНалог.Субконто1,
	|		УплаченныйНалог.Субконто2,
	|		УплаченныйНалог.Субконто3,
	|		0,
	|		СписокНалоговПоОСМС_ОПВР.СтатьяЗатрат,
	|		0,
	|		УплаченныйНалог.СуммаОборот
	|	ИЗ
	|		РегистрБухгалтерии.Налоговый.Обороты(
	|				&ДатаНачала,
	|				&ДатаОкончания,
	|				,
	|				Счет В
	|					(ВЫБРАТЬ
	|						НалогиСборыОтчисления.СчетУчетаРасчетовСКонтрагентомНУ
	|					ИЗ
	|						ВТ_СписокНалоговПоОСМС_ОПВР КАК НалогиСборыОтчисления),
	|				,
	|				Организация В (&СписокОрганизаций)
	|					И НЕ КорСубконто1 ССЫЛКА Справочник.СтатьиЗатрат
	|					И НЕ ЕСТЬNULL(КорСубконто2, 0) ССЫЛКА Справочник.СтатьиЗатрат
	|					И НЕ ЕСТЬNULL(КорСубконто3, 0) ССЫЛКА Справочник.СтатьиЗатрат
	|					И ВидУчета = ЗНАЧЕНИЕ(Справочник.ВидыУчетаНУ.НУ)
	|					И НЕ Субконто1 В (&СписокИсключаемыхПлатежей),
	|				,
	|				) КАК УплаченныйНалог
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СписокНалоговПоОСМС_ОПВР КАК СписокНалоговПоОСМС_ОПВР
	|			ПО (УплаченныйНалог.Счет = СписокНалоговПоОСМС_ОПВР.СчетУчетаРасчетовСКонтрагентомНУ)) КАК Общий
	|
	|СГРУППИРОВАТЬ ПО
	|	Общий.Счет,
	|	Общий.Организация,
	|	Общий.СтруктурноеПодразделение,
	|	Общий.Субконто1,
	|	Общий.Субконто2,
	|	Общий.Субконто3,
	|	Общий.СтатьяЗатратНалога");
	
	Запрос.УстановитьПараметр("Период"                 , Реквизиты.Период);
	Запрос.УстановитьПараметр("ДатаНачала"             , НачалоГода(Реквизиты.Период));
	Запрос.УстановитьПараметр("ДатаОкончания"          , КонецМесяца(Реквизиты.Период));
	Запрос.УстановитьПараметр("ВидСубконтоСтатьиЗатрат", ПланыВидовХарактеристик.ВидыСубконтоТиповые.СтатьиЗатрат);
	Запрос.УстановитьПараметр("Счет000"                , ПланыСчетов.Налоговый.Вспомогательный);
	Запрос.УстановитьПараметр("СписокОрганизаций"      , ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.СформироватьСписокСтруктурныхЕдиниц(Перечисления.РазделыНалоговогоУчета.КПН, , Реквизиты.Организация));
	
	// Штрафы и пени не разрешены к вычету, поэтому игнорируем их
	СписокИсключаемыхПлатежей = Новый СписокЗначений;
	СписокИсключаемыхПлатежей.Добавить(Перечисления.ВидыПлатежейВБюджетИФонды.ПениАкт);
	СписокИсключаемыхПлатежей.Добавить(Перечисления.ВидыПлатежейВБюджетИФонды.ПениСам);
	СписокИсключаемыхПлатежей.Добавить(Перечисления.ВидыПлатежейВБюджетИФонды.Штраф);
	Запрос.УстановитьПараметр("СписокИсключаемыхПлатежей", СписокИсключаемыхПлатежей);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СуммаКВычету = Мин(Макс(Выборка.СуммаОстаток,0) + Выборка.НачисленныйНалог, Макс(Выборка.УплаченныйНалог,0));
		СуммаНеРазрешеннаяКВычету = Выборка.НачисленныйНалог - СуммаКВычету;
		// не разрешенная к вычету сумма образует ВР на счете учета налога и счете затрат
		Если СуммаНеРазрешеннаяКВычету <> 0 Тогда
			// уменьшаем затраты периода на сумму ВР
			// переворачиваем проводку, чтобы в справке расчете были видны исходные данные расчета по НУ
			Проводка = Движения.Налоговый.Добавить();
			Проводка.Период 		= Реквизиты.Период;
			Проводка.Организация 	= Выборка.Организация;
			
			Проводка.СчетДт 		= Выборка.Счет;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, Выборка.Субконто1);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, Выборка.Субконто2);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, Выборка.Субконто3);
			
			Проводка.СчетКт 		= ПланыСчетов.Налоговый.ПрочиеРасходы;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтатьиЗатрат", Выборка.СтатьяЗатратНалога);
			
			Проводка.Сумма 		    = СуммаНеРазрешеннаяКВычету;
			Проводка.ВидУчетаДт 	= Справочники.ВидыУчетаНУ.НУ;
			Проводка.ВидУчетаКт 	= Справочники.ВидыУчетаНУ.НУ;
			Проводка.Содержание 	= НСтр("ru = 'Уменьшение вычета на сумму неоплаченной части налога'", КодОсновногоЯзыка);
			
			Проводка.ВидРегламентнойОперации = Перечисления.ВидыРегламентныхОпераций.РасчетВычетовПоНалогам;
			
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(Проводка, Выборка.СтруктурноеПодразделение,
																		Выборка.СтруктурноеПодразделение);
			
			// Образуем ВР
			Проводка = Движения.Налоговый.Добавить();
			Проводка.Период = Реквизиты.Период;
			Проводка.Организация 	= Выборка.Организация;
			
			Проводка.СчетДт = ПланыСчетов.Налоговый.ПрочиеРасходы;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтатьиЗатрат", Выборка.СтатьяЗатратНалога);
			Проводка.СчетКт = Выборка.Счет;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, Выборка.Субконто1);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, Выборка.Субконто2);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, Выборка.Субконто3);
			Проводка.Сумма = СуммаНеРазрешеннаяКВычету;
			Проводка.ВидУчетаДт = Справочники.ВидыУчетаНУ.ВР;
			Проводка.ВидУчетаКт = Справочники.ВидыУчетаНУ.ВР;
			Проводка.Содержание = НСтр("ru = 'ВР на сумму неоплаченной части налога'", КодОсновногоЯзыка);
			
			Проводка.ВидРегламентнойОперации = Перечисления.ВидыРегламентныхОпераций.РасчетВычетовПоНалогам;
			
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(Проводка, Выборка.СтруктурноеПодразделение,
																		Выборка.СтруктурноеПодразделение);
		КонецЕсли;
	КонецЦикла;	  	
	Движения.Налоговый.Записать(Ложь);
	
КонецПроцедуры

Процедура РасчетВременныхРазницБалансовымМетодом(ТаблицаРеквизиты, Движения, СтавкаНалогаНаПрибыль, Отказ) Экспорт
	
	Реквизиты = ТаблицаРеквизиты.Реквизиты[0];
	МассивРассматриваемыхСчетов = Новый Массив;
	МассивРассматриваемыхСчетов.Добавить(ПланыСчетов.Налоговый.ОборотныеАктивы);
	МассивРассматриваемыхСчетов.Добавить(ПланыСчетов.Налоговый.ВнеоборотныеАктивы);
	МассивРассматриваемыхСчетов.Добавить(ПланыСчетов.Налоговый.РасчетыСКонтрагентамиИПрочиеВзаиморасчеты);
	МассивРассматриваемыхСчетов.Добавить(ПланыСчетов.Налоговый.СобственныйКапитал);
	
	КонГраница = Новый Граница(КонецМесяца(Реквизиты.Период), ВидГраницы.Включая);
	
	КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	
	// Найдем расчетное значение ОНО и ОНА по результатам года
	Запрос = Новый Запрос;                                           	
	Запрос.УстановитьПараметр("ДатаКон",    				КонГраница);
	Запрос.УстановитьПараметр("СписокСтруктурныхЕдиниц",    ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.СформироватьСписокСтруктурныхЕдиниц(Перечисления.РазделыНалоговогоУчета.КПН, , Реквизиты.Организация));
	Запрос.УстановитьПараметр("СписокСчетов",   			МассивРассматриваемыхСчетов);
	Запрос.УстановитьПараметр("ВидУчетаВР", 				Справочники.ВидыУчетаНУ.ВР);
		
	Запрос.Текст = "ВЫБРАТЬ
	               |	НалоговыйОстатки.Счет,
	               |	НалоговыйОстатки.Счет.Представление КАК СчетПредставление,
	               |	НалоговыйОстатки.СуммаОстатокДт КАК СуммаОстатокДт,
	               |	НалоговыйОстатки.СуммаОстатокКт КАК СуммаОстатокКт,
	               |	НалоговыйОстатки.СуммаОстаток КАК СуммаОНО
	               |ИЗ
	               |	РегистрБухгалтерии.Налоговый.Остатки(
	               |			&ДатаКон,
	               |			Счет В ИЕРАРХИИ (&СписокСчетов),
	               |			,
	               |			Организация В (&СписокСтруктурныхЕдиниц)
	               |				И ВидУчета = &ВидУчетаВР) КАК НалоговыйОстатки
	               |ИТОГИ
	               |	СУММА(СуммаОстатокДт),
	               |	СУММА(СуммаОстатокКт),
	               |	СУММА(СуммаОНО)
	               |ПО
	               |	ОБЩИЕ";

    Результат = Запрос.Выполнить();
	РасчетнаяСумаОНА_ОНО = 0;
	Если НЕ Результат.Пустой() Тогда		
	    ПодразделениеДляРеглОпераций = УчетнаяПолитикаСервер.ПолучитьПодразделениеДляРеглОпераций(Реквизиты.Организация, Реквизиты.Период);		
		ВыборкаИтогов = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		ВыборкаИтогов.Следующий();
		
		ВыборкаПоСчетам = ВыборкаИтогов.Выбрать();
		ТекстСообщения = НСтр("ru = 'Полный расчет величины ВР по данным налогового баланса:'", КодОсновногоЯзыка);
		Пока ВыборкаПоСчетам.Следующий() Цикл
			ТекстСообщения = ТекстСообщения + СтрШаблон(НСтр("ru = '
			|				Счет %1 = %2'", КодОсновногоЯзыка), ВыборкаПоСчетам.СчетПредставление, СокрЛП(ВыборкаПоСчетам.СуммаОНО));
		КонецЦикла;
		ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации(ТекстСообщения, , , Реквизиты.Объект, Перечисления.ВидыРегламентныхОпераций.РасчетВременныхРазниц, Ложь);
		
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Итоговая величина ВР по данным налогового баланса: %1'", КодОсновногоЯзыка), СокрЛП(ВыборкаИтогов.СуммаОНО));
		ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации(ТекстСообщения, , , Реквизиты.Объект, Перечисления.ВидыРегламентныхОпераций.РасчетВременныхРазниц, Ложь);
		РасчетнаяСумаОНА_ОНО = Окр(ВыборкаИтогов.СуммаОНО* СтавкаНалогаНаПрибыль/100, 2);
	КонецЕсли;
	
	ПризнакОНО = РасчетнаяСумаОНА_ОНО > 0;
	ТекстСообщения = СтрШаблон(НСтр("ru = 'Ставка налога на прибыль: %1%%'", КодОсновногоЯзыка), СокрЛП(СтавкаНалогаНаПрибыль));
	ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации(ТекстСообщения, , , Реквизиты.Объект, Перечисления.ВидыРегламентныхОпераций.РасчетВременныхРазниц, Ложь);
	
	Если ПризнакОНО Тогда
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Расчетная величина ОНО по итогам года: %1'", КодОсновногоЯзыка), СокрЛП(РасчетнаяСумаОНА_ОНО));
	Иначе
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Расчетная величина ОНА по итогам года: %1'", КодОсновногоЯзыка), СокрЛП(-РасчетнаяСумаОНА_ОНО));
	КонецЕсли;
	ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации(ТекстСообщения, , , Реквизиты.Объект, Перечисления.ВидыРегламентныхОпераций.РасчетВременныхРазниц, Ложь);
	
	// Найдем текущие данные по отражению ОНО и ОНА в балансе
	Запрос.Текст  = "ВЫБРАТЬ
		                |	ТиповойОстатки.Счет,
		                |	ТиповойОстатки.СуммаОстаток КАК СуммаОстаток
		                |ИЗ
		                |	РегистрБухгалтерии.Типовой.Остатки(&ДатаКон, Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Типовой.ОтложенныеНалоговыеАктивыПоКорпоративномуПодоходномуНалогу), ЗНАЧЕНИЕ(ПланСчетов.Типовой.ОтложенныеНалоговыеОбязательстваПоКорпоративномуПодоходномуНалогу)), , Организация В (&СписокСтруктурныхЕдиниц)) КАК ТиповойОстатки";
		
		Результат = Запрос.Выполнить();
		ТекущаяСуммаОНА_ОНО = РасчетнаяСумаОНА_ОНО; // будем корректировать имеющиеся остатки ОНО_ОНА. Оставшуюся величину - признаем в балансе 
		Если НЕ Результат.Пустой() Тогда
			Выборка  = Результат.Выбрать();
			Пока Выборка.Следующий() Цикл			
				// ОНО. Списываем имеющееся ОНА. Корректируем размер ОНО
				Если Выборка.СуммаОстаток > 0 Тогда
					// в балансе отражено ОНА. Списываем его
					Проводка = Движения.Типовой.Добавить();
					Проводка.Период       = Реквизиты.Период;
					Проводка.Организация  = Реквизиты.Организация;
					
					Проводка.СчетДт       = ПланыСчетов.Типовой.РасходыПоКорпоративномуПодоходномуНалогу;
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,1, Справочники.СтатьиЗатрат.УсловныеРасходыПоНалогуНаПрибыль);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Подразделения", ПодразделениеДляРеглОпераций);
					
					Проводка.СчетКт       = Выборка.Счет;		
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, Справочники.НалогиСборыОтчисления.НалогНаПрибыль);
					Проводка.Сумма        = Выборка.СуммаОстаток;
					
					Проводка.Содержание   = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Списан имеющийся отложенный налоговый актив %1'", КодОсновногоЯзыка),
						ПредставлениеПериода(НачалоГода(Реквизиты.Период), КонецГода(Реквизиты.Период), "Л=" + КодОсновногоЯзыка + "; ФП=Истина"));
					Проводка.НомерЖурнала = НСтр("ru = 'ФР'", КодОсновногоЯзыка);
					Проводка.ВидРегламентнойОперации = Перечисления.ВидыРегламентныхОпераций.РасчетВременныхРазниц;
					
				Иначе	
					// в балансе отражено ОНО. Списываем его
					Проводка = Движения.Типовой.Добавить();
					Проводка.Период       = Реквизиты.Период;
					Проводка.Организация  = Реквизиты.Организация;
					
					Проводка.СчетДт       = Выборка.Счет;		
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, Справочники.НалогиСборыОтчисления.НалогНаПрибыль);
					
					Проводка.СчетКт       = ПланыСчетов.Типовой.РасходыПоКорпоративномуПодоходномуНалогу;
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,1, Справочники.СтатьиЗатрат.УсловныеРасходыПоНалогуНаПрибыль);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Подразделения", ПодразделениеДляРеглОпераций);
					
					Проводка.Сумма        = - Выборка.СуммаОстаток;
					
					Проводка.Содержание   = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Списано имеющееся отложенное налоговое обязательство %1'", КодОсновногоЯзыка),
						ПредставлениеПериода(НачалоГода(Реквизиты.Период), КонецГода(Реквизиты.Период), "Л=" + КодОсновногоЯзыка + "; ФП=Истина"));
					
					Проводка.НомерЖурнала = НСтр("ru = 'ФР'", КодОсновногоЯзыка);
					Проводка.ВидРегламентнойОперации = Перечисления.ВидыРегламентныхОпераций.РасчетВременныхРазниц;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если РасчетнаяСумаОНА_ОНО <> 0 Тогда
			
			Если ПризнакОНО Тогда
				// отложенное налоговое обязательство
				Проводка = Движения.Типовой.Добавить();
				Проводка.Период       = Реквизиты.Период;
				Проводка.Организация  = Реквизиты.Организация;
				
				Проводка.СчетДт       = ПланыСчетов.Типовой.РасходыПоКорпоративномуПодоходномуНалогу;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, Справочники.СтатьиЗатрат.УсловныеРасходыПоНалогуНаПрибыль);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Подразделения", ПодразделениеДляРеглОпераций);
				
				Проводка.СчетКт       = ПланыСчетов.Типовой.ОтложенныеНалоговыеОбязательстваПоКорпоративномуПодоходномуНалогу;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,1, Справочники.НалогиСборыОтчисления.НалогНаПрибыль);
				Проводка.Сумма        = РасчетнаяСумаОНА_ОНО;
				
				Проводка.Содержание   = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Признано отложенное налоговое обязательство за период %1'", КодОсновногоЯзыка),
					ПредставлениеПериода(НачалоГода(Реквизиты.Период), КонецГода(Реквизиты.Период), "Л=" + КодОсновногоЯзыка + "; ФП=Истина"));
				
				Проводка.НомерЖурнала = НСтр("ru = 'ФР'", КодОсновногоЯзыка);
				Проводка.ВидРегламентнойОперации = Перечисления.ВидыРегламентныхОпераций.РасчетВременныхРазниц;
				
			Иначе
				// отложенный налоговый актив, так как сумма вычетов по налоговому учету превысила полученные доходы
				Проводка = Движения.Типовой.Добавить();
				Проводка.Период       = Реквизиты.Период;
				Проводка.Организация  = Реквизиты.Организация;
				
				Проводка.СчетДт       = ПланыСчетов.Типовой.ОтложенныеНалоговыеАктивыПоКорпоративномуПодоходномуНалогу;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, Справочники.НалогиСборыОтчисления.НалогНаПрибыль);
				
				Проводка.СчетКт       = ПланыСчетов.Типовой.РасходыПоКорпоративномуПодоходномуНалогу;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,1, Справочники.СтатьиЗатрат.УсловныеРасходыПоНалогуНаПрибыль);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Подразделения", ПодразделениеДляРеглОпераций);
				
				Проводка.Сумма        = - РасчетнаяСумаОНА_ОНО;
				
				Проводка.Содержание   = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Признан отложенный налоговый актив за период %1'", КодОсновногоЯзыка),
					ПредставлениеПериода(НачалоГода(Реквизиты.Период), КонецГода(Реквизиты.Период), "Л=" + КодОсновногоЯзыка + "; ФП=Истина"));
				Проводка.НомерЖурнала = НСтр("ru = 'ФР'", КодОсновногоЯзыка);
				Проводка.ВидРегламентнойОперации = Перечисления.ВидыРегламентныхОпераций.РасчетВременныхРазниц;
			КонецЕсли;
		КонецЕсли;
		
		Движения.Типовой.Записать(Ложь);
	
КонецПроцедуры

Процедура РасчетВременныхРазницМетодомПиБ(ТаблицаРеквизиты, Движения, СтавкаНалогаНаПрибыль, Отказ) Экспорт
	
	Реквизиты = ТаблицаРеквизиты.Реквизиты[0];

	КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	
	МассивРассматриваемыхСчетов = Новый Массив;	
	МассивРассматриваемыхСчетов.Добавить(ПланыСчетов.Налоговый.Доходы);
	МассивРассматриваемыхСчетов.Добавить(ПланыСчетов.Налоговый.Расходы);
	
	КонГраница = Новый Граница(КонецМесяца(Реквизиты.Период), ВидГраницы.Включая);

	// Сумма налогооблагаемого дохода по временным разницам
	Запрос = Новый Запрос;                                           
	Запрос.УстановитьПараметр("НачалоГода",   	НачалоГода(Реквизиты.Период));
	Запрос.УстановитьПараметр("КонецГода",    	КонГраница);
	Запрос.УстановитьПараметр("Организация",    Реквизиты.Организация);
	Запрос.УстановитьПараметр("СписокСчетов",   МассивРассматриваемыхСчетов);
	Запрос.УстановитьПараметр("ВидУчетаВР", 	Справочники.ВидыУчетаНУ.ВР);
		
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЕстьNUll(НалоговыйОбороты.СуммаОборот,0) как УбытокВР
	               |ИЗ
	               |	РегистрБухгалтерии.Налоговый.Обороты(&НачалоГода, &КонецГода,, 
				   |				Счет В ИЕРАРХИИ (&СписокСчетов),, ВидУчета = &ВидУчетаВР	И Организация = &Организация,,) КАК НалоговыйОбороты
	               |ИТОГИ
	               |	СУММА(УбытокВР)
	               |ПО
	               |	ОБЩИЕ";

    Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ПодразделениеДляРеглОпераций = УчетнаяПолитикаСервер.ПолучитьПодразделениеДляРеглОпераций(Реквизиты.Организация, Реквизиты.Период);
	ВыборкаИтогов = Результат.Выбрать();
	ВыборкаИтогов.Следующий();
	
	Если ВыборкаИтогов.УбытокВР > 0 Тогда
		// отложенный налоговый актив, так как сумма вычетов по налоговому учету превысила полученные доходы
		Проводка = Движения.Типовой.Добавить();
		Проводка.Период       = Реквизиты.Период;
		Проводка.Организация  = Реквизиты.Организация;
				
		Проводка.СчетДт       = ПланыСчетов.Типовой.ОтложенныеНалоговыеАктивыПоКорпоративномуПодоходномуНалогу;		
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, Справочники.НалогиСборыОтчисления.НалогНаПрибыль);
		
		Проводка.СчетКт       = ПланыСчетов.Типовой.РасходыПоКорпоративномуПодоходномуНалогу;
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,1, Справочники.СтатьиЗатрат.УсловныеРасходыПоНалогуНаПрибыль);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Подразделения", ПодразделениеДляРеглОпераций);

		Проводка.Сумма        = ВыборкаИтогов.УбытокВР*СтавкаНалогаНаПрибыль/100;
				
		Проводка.Содержание   = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Признан отложенный налоговый актив за период %1'", КодОсновногоЯзыка),
			ПредставлениеПериода(НачалоГода(Реквизиты.Период), КонецГода(Реквизиты.Период), "Л=" + КодОсновногоЯзыка + "; ФП=Истина"));
		Проводка.НомерЖурнала = НСтр("ru = 'ФР'", КодОсновногоЯзыка);
		Проводка.ВидРегламентнойОперации = Перечисления.ВидыРегламентныхОпераций.РасчетВременныхРазниц;
	КонецЕсли;
	
	Если ВыборкаИтогов.УбытокВР < 0 Тогда
		Если Отказ Тогда
			Возврат;
		КонецЕсли;	
		// отложенное налоговое обязательство, так как сумма доходов по налоговому учету превысила вычеты
		Проводка = Движения.Типовой.Добавить();
		Проводка.Период       = Реквизиты.Период;
		Проводка.Организация  = Реквизиты.Организация;
				
		Проводка.СчетДт       = ПланыСчетов.Типовой.РасходыПоКорпоративномуПодоходномуНалогу;		
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, Справочники.СтатьиЗатрат.УсловныеРасходыПоНалогуНаПрибыль);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Подразделения", ПодразделениеДляРеглОпераций);
		
		Проводка.СчетКт       = ПланыСчетов.Типовой.ОтложенныеНалоговыеОбязательстваПоКорпоративномуПодоходномуНалогу;
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,1, Справочники.НалогиСборыОтчисления.НалогНаПрибыль);
		Проводка.Сумма        = -ВыборкаИтогов.УбытокВР*СтавкаНалогаНаПрибыль/100;
				
		Проводка.Содержание   = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Признано отложенное налоговое обязательство за период %1'", КодОсновногоЯзыка),
			ПредставлениеПериода(НачалоГода(Реквизиты.Период), КонецГода(Реквизиты.Период), "Л=" + КодОсновногоЯзыка + "; ФП=Истина"));
		Проводка.НомерЖурнала = НСтр("ru = 'ФР'", КодОсновногоЯзыка);
		Проводка.ВидРегламентнойОперации = Перечисления.ВидыРегламентныхОпераций.РасчетВременныхРазниц;
		
	КонецЕсли;
	
	Движения.Типовой.Записать(Ложь);
	
КонецПроцедуры

Процедура РасчетНалогаНаПрибыль(ТаблицаРеквизиты, Движения, СтавкаНалогаНаПрибыль, Отказ) Экспорт
	
	Реквизиты = ТаблицаРеквизиты[0];
	
	КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	
	МассивРассматриваемыхСчетов = новый Массив;	
	МассивРассматриваемыхСчетов.Добавить(ПланыСчетов.Налоговый.Доходы);
	МассивРассматриваемыхСчетов.Добавить(ПланыСчетов.Налоговый.Расходы);
	
	КонГраница = Новый Граница(КонецМесяца(Реквизиты.Период), ВидГраницы.Включая);

	Запрос = Новый Запрос;                                           
	Запрос.УстановитьПараметр("НачалоГода",   	НачалоГода(Реквизиты.Период));
	Запрос.УстановитьПараметр("КонецГода",      КонГраница);
	Запрос.УстановитьПараметр("Организация",    Реквизиты.Организация);
	Запрос.УстановитьПараметр("СписокСчетов",   МассивРассматриваемыхСчетов);
	Запрос.УстановитьПараметр("ВидУчетаНУ", 	Справочники.ВидыУчетаНУ.НУ);
		
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЕСТЬNULL(НалоговыйОбороты.СуммаОборотКт - НалоговыйОбороты.СуммаОборотДт, 0) КАК ДоходНУ
	               |ИЗ
	               |	РегистрБухгалтерии.Налоговый.Обороты(&НачалоГода,&КонецГода,,Счет В ИЕРАРХИИ (&СписокСчетов),,
	               |		ВидУчета = &ВидУчетаНУ И Организация = &Организация,,) КАК НалоговыйОбороты
	               |ИТОГИ
	               |	СУММА(ДоходНУ)
	               |ПО
	               |	ОБЩИЕ";

    Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ВыборкаИтогов = Результат.Выбрать();
	ВыборкаИтогов.Следующий();
	
	Если ВыборкаИтогов.ДоходНУ > 0 Тогда
		// есть налогооблагаемый доход		
		ПодразделениеДляРеглОпераций = УчетнаяПолитикаСервер.ПолучитьПодразделениеДляРеглОпераций(Реквизиты.Организация, Реквизиты.Период);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		ПроводкаБУ = Движения.Типовой.Добавить();
		ПроводкаБУ.Период       = Реквизиты.Период;
		ПроводкаБУ.Организация  = Реквизиты.Организация;
				
		ПроводкаБУ.СчетДт       = ПланыСчетов.Типовой.РасходыПоКорпоративномуПодоходномуНалогу;		
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаБУ.СчетДт, ПроводкаБУ.СубконтоДт, 1, Справочники.СтатьиЗатрат.РасходыПоНалогуНаПрибыль);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаБУ.СчетДт, ПроводкаБУ.СубконтоДт, "Подразделения", ПодразделениеДляРеглОпераций);
		
		ПроводкаБУ.СчетКт       = ПланыСчетов.Типовой.КорпоративныйПодоходныйНалогПодлежащийУплате;
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаБУ.СчетКт, ПроводкаБУ.СубконтоКт,1, Справочники.НалогиСборыОтчисления.НалогНаПрибыль);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаБУ.СчетКт, ПроводкаБУ.СубконтоКт,"ВидыПлатежейВБюджетИФонды", Перечисления.ВидыПлатежейВБюджетИФонды.Налог);
		ПроводкаБУ.Сумма        = ВыборкаИтогов.ДоходНУ * СтавкаНалогаНаПрибыль/100;
				
		ПроводкаБУ.Содержание   = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Начислен налог на прибыль за период %1'", КодОсновногоЯзыка),
			ПредставлениеПериода(НачалоГода(Реквизиты.Период), КонецМесяца(Реквизиты.Период), "Л=" + КодОсновногоЯзыка + "; ФП=Истина"));
		ПроводкаБУ.НомерЖурнала = НСтр("ru = 'ФР'", КодОсновногоЯзыка);
		ПроводкаБУ.ВидРегламентнойОперации = Перечисления.ВидыРегламентныхОпераций.РасчетНалогаНаПрибыль;
	КонецЕсли;
	
	Движения.Типовой.Записать(Ложь);
	
КонецПроцедуры  // РасчетНалогаНаПрибыль

Функция СформироватьСписокСчетовДоходовРасходов(ПоДаннымБУ)
	
	МассивСчетовДоходовРасходов = Новый Массив;
	Если ПоДаннымБУ Тогда
		// Счета доходов
		МассивСчетовДоходовРасходов.Добавить(ПланыСчетов.Типовой.ДоходОтРеализацииПродукцииИОказанияУслуг_);
		МассивСчетовДоходовРасходов.Добавить(ПланыСчетов.Типовой.ДоходыОтФинансирования);
		МассивСчетовДоходовРасходов.Добавить(ПланыСчетов.Типовой.ПрочиеДоходы_);
		МассивСчетовДоходовРасходов.Добавить(ПланыСчетов.Типовой.ДоходыСвязанныеСПрекращаемойДеятельностью_);
		МассивСчетовДоходовРасходов.Добавить(ПланыСчетов.Типовой.ДоляПрибылиОрганизацийУчитываемыхПоМетодуДолевогоУчастия);
		// Счета расходов
		МассивСчетовДоходовРасходов.Добавить(ПланыСчетов.Типовой.СебестоимостьРеализованнойПродукцииИОказанныхУслуг_);
		МассивСчетовДоходовРасходов.Добавить(ПланыСчетов.Типовой.РасходыПоРеализацииПродукцииИОказаниюУслуг_);
		МассивСчетовДоходовРасходов.Добавить(ПланыСчетов.Типовой.АдминистративныеРасходы_);
		МассивСчетовДоходовРасходов.Добавить(ПланыСчетов.Типовой.РасходыНаФинансирование);
		МассивСчетовДоходовРасходов.Добавить(ПланыСчетов.Типовой.ПрочиеРасходы_);
		МассивСчетовДоходовРасходов.Добавить(ПланыСчетов.Типовой.РасходыСвязанныеСПрекращаемойДеятельностью_);
		МассивСчетовДоходовРасходов.Добавить(ПланыСчетов.Типовой.ДоляВУбыткеОрганизацийУчитываемыхМетодомДолевогоУчастия);
		МассивСчетовДоходовРасходов.Добавить(ПланыСчетов.Типовой.РасходыПоКорпоративномуПодоходномуНалогу_);	
	Иначе
		МассивСчетовДоходовРасходов.Добавить(ПланыСчетов.Налоговый.Доходы);
		МассивСчетовДоходовРасходов.Добавить(ПланыСчетов.Налоговый.Расходы);
	КонецЕсли;
	
	Возврат МассивСчетовДоходовРасходов;
КонецФункции // СформироватьСписокСчетовДоходовРасходов

Процедура РасчетИтоговогоДоходаУбытка(ПараметрыПроведения, ПоДаннымБУ, Движения, Отказ) Экспорт
	
	Реквизиты = ПараметрыПроведения.Реквизиты[0];
	
	КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	
	Если ПоДаннымБУ Тогда
		ИмяРегистра 		= "Типовой";
		ВыборВидаУчета 		= "";
		ИмяРеглОперации 	= "РасчетИтоговогоДоходаУбыткаБУ";
		Проводки 			= Движения.Типовой;
	Иначе
		ИмяРегистра 		= "Налоговый";
		ВыборВидаУчета 		= ", ТиповойОстатки.ВидУчета ";
		ИмяРеглОперации		= "РасчетИтоговогоДоходаУбыткаНУ";
		Проводки 			= Движения.Налоговый;
	КонецЕсли;
	
 	// Закрытие 6000 и 7000 счетов в БУ
		СписокСчетовДоходовИРасходов = СформироватьСписокСчетовДоходовРасходов(ПоДаннымБУ);
		
		Запрос = Новый Запрос;
		КонГраница = Новый Граница( КонецМесяца(Реквизиты.Период), ВидГраницы.Включая);
		Запрос.УстановитьПараметр("ДатаКон",     				КонГраница);
		Запрос.УстановитьПараметр("Организация", 				Реквизиты.Организация);
		Запрос.УстановитьПараметр("СтруктурноеПодразделение", 	Реквизиты.СтруктурноеПодразделение);
		Запрос.УстановитьПараметр("Счет",      					СписокСчетовДоходовИРасходов);
				
		Запрос.Текст =  "ВЫБРАТЬ
						|	ТиповойОстатки.Счет КАК Счет,
						|	ЕСТЬNULL(ТиповойОстатки.СуммаОстатокДт, 0) КАК СуммаДт,
						|	ЕСТЬNULL(ТиповойОстатки.СуммаОстатокКт, 0) КАК СуммаКт,
						|	ТиповойОстатки.Субконто1,
						|	ТиповойОстатки.Субконто2,
						|	ТиповойОстатки.Субконто3"+ ВыборВидаУчета +"
						|ИЗ
						|	РегистрБухгалтерии." + ИмяРегистра + ".Остатки(&ДатаКон, Счет В ИЕРАРХИИ (&Счет), , Организация = &Организация И СтруктурноеПодразделение = &СтруктурноеПодразделение) КАК ТиповойОстатки
						|ГДЕ
						|	(НЕ ЕСТЬNULL(ТиповойОстатки.СуммаОстатокДт, 0) = 0)
						|	Или (НЕ ЕСТЬNULL(ТиповойОстатки.СуммаОстатокКт, 0) = 0)";
		
		Результат = Запрос.Выполнить();
		
		Если Результат.Пустой() ТОгда
			Возврат;
		КонецЕсли;
		
		Выборка   = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			Если Выборка.СуммаДт <> 0 Тогда
				// Списываем расходы
				Проводка = Проводки.Добавить();
				Проводка.Период                    = Реквизиты.Период;
				Проводка.Организация               = Реквизиты.Организация;								
				Проводка.СчетДт                    = ?(ПоДаннымБУ, ПланыСчетов.Типовой.ИтоговаяПрибыльИтоговыйУбыток, ПланыСчетов.Налоговый.ИтоговаяПрибыльИтоговыйУбытокОтчетногоГода);
				Проводка.СчетКт                    = Выборка.Счет;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, Выборка.Субконто1);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, Выборка.Субконто2);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, Выборка.Субконто3);
				
				Проводка.Сумма                     = Выборка.СуммаДт;
				Проводка.Содержание                = НСтр("ru = 'Расчет итогового дохода/убытка'", КодОсновногоЯзыка);
				Проводка.ВидРегламентнойОперации   = Перечисления.ВидыРегламентныхОпераций[ИмяРеглОперации];
				Проводка.НомерЖурнала              = НСтр("ru = 'ФР'", КодОсновногоЯзыка);
				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(Проводка, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);
				
				Если Не ПоДаннымБУ Тогда
					Проводка.ВидУчетаДт = Выборка.ВидУчета;
					Проводка.ВидУчетаКт = Выборка.ВидУчета;
					// По филиалам выполняем закрытие на головное подразделение
					// Закрываем на головное
					Если ЗначениеЗаполнено(Реквизиты.СтруктурноеПодразделение) Тогда
						Проводка = Проводки.Добавить();
						Проводка.Период                   = Реквизиты.Период;
						Проводка.Организация              = Реквизиты.Организация;				
						Проводка.СчетДт                   = ПланыСчетов.Налоговый.ИтоговаяПрибыльИтоговыйУбытокОтчетногоГода;
						
						Проводка.СчетКт                   = ПланыСчетов.Налоговый.ИтоговаяПрибыльИтоговыйУбытокОтчетногоГода;
						Проводка.Сумма                    = Выборка.СуммаДт;
						Проводка.Содержание               = НСтр("ru = 'Расчет итогового дохода/убытка'", КодОсновногоЯзыка);
						Проводка.НомерЖурнала             = НСтр("ru = 'ФР'", КодОсновногоЯзыка);
						Проводка.ВидРегламентнойОперации  = Перечисления.ВидыРегламентныхОпераций[ИмяРеглОперации];
						
						Проводка.ВидУчетаДт = Выборка.ВидУчета;
						Проводка.ВидУчетаКт = Выборка.ВидУчета;
						
						ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(Проводка, Справочники.ПодразделенияОрганизаций.ПустаяСсылка(), Реквизиты.СтруктурноеПодразделение);
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
			Если Выборка.СуммаКт <> 0 Тогда
				// Списываем Доходы
				Проводка = Проводки.Добавить();
				Проводка.Период                   = Реквизиты.Период;
				Проводка.Организация              = Реквизиты.Организация;				
				Проводка.СчетДт                   = Выборка.Счет;
				
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, Выборка.Субконто1);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, Выборка.Субконто2);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, Выборка.Субконто3);
				
				Проводка.СчетКт                   = ?(ПоДаннымБУ, ПланыСчетов.Типовой.ИтоговаяПрибыльИтоговыйУбыток, ПланыСчетов.Налоговый.ИтоговаяПрибыльИтоговыйУбытокОтчетногоГода);
				
				Проводка.Сумма                    = Выборка.СуммаКТ;
				Проводка.Содержание               = НСтр("ru = 'Расчет итогового дохода/убытка'", КодОсновногоЯзыка);
				Проводка.НомерЖурнала             = НСтр("ru = 'ФР'", КодОсновногоЯзыка);
				Проводка.ВидРегламентнойОперации  = Перечисления.ВидыРегламентныхОпераций[ИмяРеглОперации];
				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(Проводка, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);
				Если НЕ ПоДаннымБУ Тогда
					Проводка.ВидУчетаДт = Выборка.ВидУчета;
					Проводка.ВидУчетаКт = Выборка.ВидУчета;
					// По филиалам выполняем закрытие на головное подразделение
					// Закрываем на головное
					Если ЗначениеЗаполнено(Реквизиты.СтруктурноеПодразделение) Тогда
						Проводка = Проводки.Добавить();
						Проводка.Период                   = Реквизиты.Период;
						Проводка.Организация              = Реквизиты.Организация;
						Проводка.СчетДт                   = ПланыСчетов.Налоговый.ИтоговаяПрибыльИтоговыйУбытокОтчетногоГода;
						
						Проводка.СчетКт                   = ПланыСчетов.Налоговый.ИтоговаяПрибыльИтоговыйУбытокОтчетногоГода;
						Проводка.Сумма                    = Выборка.СуммаКТ;
						Проводка.Содержание               = НСтр("ru = 'Расчет итогового дохода/убытка'", КодОсновногоЯзыка);
						Проводка.НомерЖурнала             = НСтр("ru = 'ФР'", КодОсновногоЯзыка);
						Проводка.ВидРегламентнойОперации  = Перечисления.ВидыРегламентныхОпераций[ИмяРеглОперации];
						
						Проводка.ВидУчетаДт = Выборка.ВидУчета;
						Проводка.ВидУчетаКт = Выборка.ВидУчета;
						ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(Проводка, Реквизиты.СтруктурноеПодразделение, Справочники.ПодразделенияОрганизаций.ПустаяСсылка());
					КонецЕсли;
				КонецЕсли;

			КонецЕсли;				
		КонецЦикла;	
		
		Если ПоДаннымБУ Тогда			
			Движения.Типовой.Записать(Ложь);
		Иначе
			Движения.Налоговый.Записать(Ложь);
		КонецЕсли;
		
КонецПроцедуры

Процедура ПроведениеРеформацииБаланса(ПараметрыПроведения, Движения, Отказ) Экспорт 
	
	Реквизиты = ПараметрыПроведения.Реквизиты[0];
	
	КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	
	Запрос = Новый Запрос;
	
	КонГраница = Новый Граница(КонецМесяца(Реквизиты.Период), ВидГраницы.Включая);
	Запрос.УстановитьПараметр("ДатаКон",     	КонГраница);
	Запрос.УстановитьПараметр("Организация", 	Реквизиты.Организация);
	Запрос.УстановитьПараметр("Счет",      		ПланыСчетов.Типовой.ИтоговаяПрибыльИтоговыйУбыток);
	
	Запрос.УстановитьПараметр("СтруктурноеПодразделение", 	Реквизиты.СтруктурноеПодразделение);
	
	Запрос.Текст =	"ВЫБРАТЬ		
					|	ТиповойОстатки.Счет,
					|	ЕСТЬNULL(ТиповойОстатки.СуммаОстатокКт, 0) КАК СуммаКт,
					|	ТиповойОстатки.Субконто1,
					|	ТиповойОстатки.Субконто2,
					|	ТиповойОстатки.Субконто3
					|ИЗ
					|	РегистрБухгалтерии.Типовой.Остатки(&ДатаКон, Счет В ИЕРАРХИИ (&Счет), , Организация = &Организация И СтруктурноеПодразделение = &СтруктурноеПодразделение) КАК ТиповойОстатки";
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Движения.Типовой.Записать(Ложь);
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.СуммаКт = 0 Тогда
			Продолжить;
		КонецЕсли;
		// Реформация итогового дохода/убытка
		Проводка = Движения.Типовой.Добавить();
		Проводка.Период                   = Реквизиты.Период;
		Проводка.Организация              = Реквизиты.Организация;				
		Проводка.СчетДт                   = Выборка.Счет;
		
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, Выборка.Субконто1);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, Выборка.Субконто2);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, Выборка.Субконто3);
		
		Проводка.СчетКт                   = ПланыСчетов.Типовой.НераспределеннаяПрибыльНепокрытыйУбытокОтчетногоГода;				
		
		Проводка.Сумма                    = Выборка.СуммаКТ;
		Проводка.Содержание               = НСтр("ru = 'Реформация баланса'", КодОсновногоЯзыка);
		Проводка.НомерЖурнала             = НСтр("ru = 'ФР'", КодОсновногоЯзыка);
		Проводка.ВидРегламентнойОперации  = Перечисления.ВидыРегламентныхОпераций.РеформацияБалансаБУ;
		// Закрываем на головное
		ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(Проводка, Реквизиты.СтруктурноеПодразделение, Справочники.ПодразделенияОрганизаций.ПустаяСсылка());
	КонецЦикла;	
	                           	
	Движения.Типовой.Записать(Ложь);

КонецПроцедуры

//Списание резерва по переоценке ОС

Функция  ПодготовитьТаблицуСписаниеРезерваПоПереоценкеОС(ТаблицаРеквизиты, ТаблицаРезервКСписанию, Отказ) Экспорт
	
	Параметры = ПодготовитьПараметрыСписаниеРезерваПоПереоценкеОС(ТаблицаРеквизиты);
	
	Реквизиты = Параметры.Реквизиты[0];
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТаблицаРезервКСписанию.ОсновноеСредство,
	               |	ТаблицаРезервКСписанию.СуммаРезерваКСписанию КАК СуммаРезерваКСписанию
	               |ПОМЕСТИТЬ ТаблицаРезервКСписанию
	               |ИЗ
	               |	&ТаблицаРезервКСписанию КАК ТаблицаРезервКСписанию
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ПереоценкаВнеоборотныхАктивовОстатки.ДокументПереоценки КАК ДокументПереоценки,
	               |	ПереоценкаВнеоборотныхАктивовОстатки.СуммаПереоценкиСтоимостиОстаток КАК СуммаПереоценкиСтоимости,
	               |	ПереоценкаВнеоборотныхАктивовОстатки.СуммаПереоценкиАмортизацииОстаток КАК СуммаПереоценкиАмортизации,
	               |	ПереоценкаВнеоборотныхАктивовОстатки.ДокументПереоценки.СчетДоходовБУ КАК СчетДоходовБУ,
	               |	ПереоценкаВнеоборотныхАктивовОстатки.ДокументПереоценки.СубконтоДоходовБУ1 КАК СубконтоДоходовБУ1,
	               |	ПереоценкаВнеоборотныхАктивовОстатки.ДокументПереоценки.СубконтоДоходовБУ2 КАК СубконтоДоходовБУ2,
	               |	ПереоценкаВнеоборотныхАктивовОстатки.ДокументПереоценки.СубконтоДоходовБУ3 КАК СубконтоДоходовБУ3,
	               |	ПереоценкаВнеоборотныхАктивовОстатки.ДокументПереоценки.СчетРасходовБУ КАК СчетРасходовБУ,
	               |	ПереоценкаВнеоборотныхАктивовОстатки.ДокументПереоценки.СубконтоРасходовБУ1 КАК СубконтоРасходовБУ1,
	               |	ПереоценкаВнеоборотныхАктивовОстатки.ДокументПереоценки.СубконтоРасходовБУ2 КАК СубконтоРасходовБУ2,
	               |	ПереоценкаВнеоборотныхАктивовОстатки.ДокументПереоценки.СубконтоРасходовБУ3 КАК СубконтоРасходовБУ3,
	               |	ПереоценкаВнеоборотныхАктивовОстатки.ВнеоборотныйАктив
	               |ИЗ
	               |	РегистрНакопления.ПереоценкаВнеоборотныхАктивов.Остатки(
	               |			&Период,
	               |			ВнеоборотныйАктив В
	               |					(ВЫБРАТЬ
	               |						ТаблицаРезервКСписанию.ОсновноеСредство
	               |					ИЗ
	               |						ТаблицаРезервКСписанию)
	               |				И Организация = &Организация
	               |				И СтруктурноеПодразделение = &СтруктурноеПодразделение) КАК ПереоценкаВнеоборотныхАктивовОстатки
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ДокументПереоценки
	               |ИТОГИ
	               |	СУММА(СуммаПереоценкиСтоимости),
	               |	СУММА(СуммаПереоценкиАмортизации)
	               |ПО
	               |	ПереоценкаВнеоборотныхАктивовОстатки.ВнеоборотныйАктив";
		
	    ПрименятьПараметрыАмортизацииВТекМесяце = УправлениеВнеоборотнымиАктивамиСервер.ПолучитьПризнакПримененияПараметровАмортизацииВТекМесяце(Реквизиты.Организация, Реквизиты.Период); 
		
		ПериодПереоценки = ?(ПрименятьПараметрыАмортизацииВТекМесяце, Реквизиты.Период, ДобавитьМесяц(Реквизиты.Период,-1));
		
		Запрос.УстановитьПараметр("Период", 					КонецМесяца(ПериодПереоценки));
		Запрос.УстановитьПараметр("Организация", 				Реквизиты.Организация);
		Запрос.УстановитьПараметр("СтруктурноеПодразделение", 	Реквизиты.СтруктурноеПодразделение);	
		Запрос.УстановитьПараметр("ТаблицаРезервКСписанию", 	ТаблицаРезервКСписанию);	
				                                                        		
		Результат = Запрос.Выполнить();
		ТаблицаПереоценки = Результат.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
		
		Возврат ТаблицаПереоценки;	
КонецФункции	

Функция ПодготовитьПараметрыСписаниеРезерваПоПереоценкеОС(ТаблицаРеквизиты) 
	
	Параметры = Новый Структура;	
			
	
	// Подготовка таблицы Параметры.Реквизиты	
	СписокОбязательныхКолонок = ""
	+ "Период,"           				// <Дата>
	+ "Организация,"      				// <СправочникСсылка.Организации>
	+ "СтруктурноеПодразделение,"     	// <СправочникСсылка.Организации>
	+ "Регистратор"      				// <ДокументСсылка.*>
	;
	
	Если ТипЗнч(ТаблицаРеквизиты) = Тип("ТаблицаЗначений") Тогда
		Если ТаблицаРеквизиты.Колонки.Найти("Объект") <> Неопределено Тогда
			СписокОбязательныхКолонок = СписокОбязательныхКолонок + ",Объект";	
		КонецЕсли;
	КонецЕсли;
	
	Параметры.Вставить("Реквизиты", 
		ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));
	
	Возврат Параметры;
	
КонецФункции 

Процедура СформироватьДвиженияПоСписаниюРезерваПоПереоценкеОС(ТаблицаРезервКСписанию, ТаблицаСписаниеРезерваПоПереоценкеОС, ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Параметры = ПодготовитьПараметрыДвиженияПоСписаниюРезерваПоПереоценкеОС(ТаблицаРезервКСписанию, ТаблицаРеквизиты);
	ПереоценкаВА = Движения.ПереоценкаВнеоборотныхАктивов;
	
	Реквизиты = Параметры.Реквизиты[0];
	
	КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	
	Для Каждого СтрокаРезерва Из Параметры.ТаблицаРезервКСписанию Цикл
		
			СуммаРезерваКСписанию = СтрокаРезерва.СуммаРезерваКСписанию;
			
			Если СуммаРезерваКСписанию = 0 Тогда
				Продолжить;
			КонецЕсли;	
			
			// сначала спишем часть резерва по БУ
			Если СуммаРезерваКСписанию <> 0 Тогда
				// по бух. учету списание резерва переоценки
				Проводка = Движения.Типовой.Добавить();
				Проводка.Период       = Реквизиты.Период;
				Проводка.Организация  = Реквизиты.Организация;
				Проводка.ВидРегламентнойОперации  = Перечисления.ВидыРегламентныхОпераций.СписаниеРезерваПоПереоценкеОСБУ;
				Проводка.Содержание   = НСтр("ru = 'Списание резерва переоценки стоимости ОС'", КодОсновногоЯзыка);
				Проводка.НомерЖурнала = НСтр("ru = 'ОС'", КодОсновногоЯзыка);
				Проводка.Сумма        = СуммаРезерваКСписанию;
				
				Проводка.СчетДт = ПланыСчетов.Типовой.РезервНаПереоценкуОсновныхСредств;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", СтрокаРезерва.ОсновноеСредство);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ВидыИзмененийВСобственномКапитале", Перечисления.ВидыИзмененийВСобственномКапитале.ПереоценкаОсновныхСредств);
				
				Проводка.СчетКт = ПланыСчетов.Типовой.НераспределеннаяПрибыльНепокрытыйУбытокОтчетногоГода; //5510
				
				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(Проводка, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);				
			КонецЕсли;
			
			СтрокаСписаниеРезерваПереоценки = ТаблицаСписаниеРезерваПоПереоценкеОС.Строки.Найти(СтрокаРезерва.ОсновноеСредство,"ВнеоборотныйАктив");
			
			Если Не СтрокаСписаниеРезерваПереоценки = Неопределено Тогда
				
				Для Каждого СтрокаТЧ Из СтрокаСписаниеРезерваПереоценки.Строки Цикл					
					Если (СуммаРезерваКСписанию <> 0) И
						((СтрокаТЧ.СуммаПереоценкиСтоимости > 0) ИЛИ (СтрокаТЧ.СуммаПереоценкиАмортизации < 0))  Тогда
						
						// найдем сумму резерва партии, которую можем закрыть 
						ОстатокРезерваПартии = СтрокаТЧ.СуммаПереоценкиСтоимости + СтрокаТЧ.СуммаПереоценкиАмортизации;
						
						СуммаЗакрытияПартии = МИН(ОстатокРезерваПартии, СуммаРезерваКСписанию);
						
						Если СуммаЗакрытияПартии = 0 Тогда
							Продолжить;
						КонецЕсли;
						
						// находим, какую часть составляет сумма резерва стоимости от общей суммы резерва
						КоэфРаспределенияСуммы = СтрокаТЧ.СуммаПереоценкиСтоимости / ОстатокРезерваПартии;
						
						СуммаЗакрытияРезерваСтоимости	 = КоэфРаспределенияСуммы * СуммаЗакрытияПартии;
						СуммаЗакрытияРезерваАмортизации = СуммаЗакрытияПартии - СуммаЗакрытияРезерваСтоимости;
						
						// по регистру ПереоценкаВнеоборотныхАктивов гасим резервы
						ДвижениеПереоценкаВА = Движения.ПереоценкаВнеоборотныхАктивов.ДобавитьРасход();
						ДвижениеПереоценкаВА.Период				 		= Реквизиты.Период;
						ДвижениеПереоценкаВА.Организация 		     	= Реквизиты.Организация;
						ДвижениеПереоценкаВА.СтруктурноеПодразделение  	= Реквизиты.СтруктурноеПодразделение;
						
						ДвижениеПереоценкаВА.ВнеоборотныйАктив   	 	= СтрокаРезерва.ОсновноеСредство;
						ДвижениеПереоценкаВА.ДокументПереоценки	 		= СтрокаТЧ.ДокументПереоценки;;
						ДвижениеПереоценкаВА.СуммаПереоценкиСтоимости   = СуммаЗакрытияРезерваСтоимости;
						ДвижениеПереоценкаВА.СуммаПереоценкиАмортизации = СуммаЗакрытияРезерваАмортизации;  
						
						ДвижениеПереоценкаВА.СчетДоходовБУ		 = ПланыСчетов.Типовой.РезервНаПереоценкуОсновныхСредств;
						ДвижениеПереоценкаВА.СубконтоДоходовБУ1  = СтрокаРезерва.ОсновноеСредство;
						ДвижениеПереоценкаВА.СубконтоДоходовБУ2  = Перечисления.ВидыИзмененийВСобственномКапитале.ПереоценкаОсновныхСредств;
						ДвижениеПереоценкаВА.СчетРасходовБУ	  	 = ПланыСчетов.Типовой.РезервНаПереоценкуОсновныхСредств;
						ДвижениеПереоценкаВА.СубконтоРасходовБУ1 = СтрокаРезерва.ОсновноеСредство;
						ДвижениеПереоценкаВА.СубконтоРасходовБУ2 = Перечисления.ВидыИзмененийВСобственномКапитале.ПереоценкаОсновныхСредств;
						
						СуммаРезерваКСписанию = СуммаРезерваКСписанию - СуммаЗакрытияПартии;
					КонецЕсли;											
				КонецЦикла;	
			КонецЕсли;
		КонецЦикла;	          
		
	Движения.ПереоценкаВнеоборотныхАктивов.Записывать = Истина;		
	Движения.Типовой.Записать(Ложь);
	
КонецПроцедуры

Функция ПодготовитьПараметрыДвиженияПоСписаниюРезерваПоПереоценкеОС(ТаблицаРезервКСписанию, ТаблицаРеквизиты) 
	
	Параметры = Новый Структура;
	
	СписокОбязательныхКолонок = ""
	+ "ОсновноеСредство,"           			
	+ "СуммаРезерваКСписанию"      				
	;
	
	Параметры.Вставить("ТаблицаРезервКСписанию", 
		ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРезервКСписанию, СписокОбязательныхКолонок));
		
	// Подготовка таблицы Параметры.Реквизиты	
	СписокОбязательныхКолонок = ""
	+ "Период,"           				// <Дата>
	+ "Организация,"      				// <СправочникСсылка.Организации>
	+ "СтруктурноеПодразделение,"     	// <СправочникСсылка.Организации>
	+ "Регистратор"      				// <ДокументСсылка.*>
	;
	
	Если ТипЗнч(ТаблицаРеквизиты) = Тип("ТаблицаЗначений") Тогда
		Если ТаблицаРеквизиты.Колонки.Найти("Объект") <> Неопределено Тогда
			СписокОбязательныхКолонок = СписокОбязательныхКолонок + ",Объект";	
		КонецЕсли;
	КонецЕсли;
	
	Параметры.Вставить("Реквизиты", 
		ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));
	
	Возврат Параметры;
	
КонецФункции 

Функция СуществуетСправкаРасчет(ВидОперации) Экспорт
	
	Если ВидОперации = Перечисления.ВидыРегламентныхОпераций.СписаниеРБПБУ 
		ИЛИ ВидОперации = Перечисления.ВидыРегламентныхОпераций.РасчетСтоимостиПродукцииБУ 
		ИЛИ ВидОперации = Перечисления.ВидыРегламентныхОпераций.ПереоценкаВалютныхСредствБУ
		ИЛИ ВидОперации = Перечисления.ВидыРегламентныхОпераций.РасчетВычетаПоРеализованнымТоварам 
		ИЛИ ВидОперации = Перечисления.ВидыРегламентныхОпераций.РасчетВычетовПоНалогам Тогда
		
		Возврат Истина;
		
	Иначе
		
		Возврат Ложь;
		
	КонецЕсли;
	
КонецФункции