
#Область ПрограммныйИнтерфейс

#Область ЗаполнениеПоОстаткамТабличнойЧастиНомераГТД

Функция ПустыеПараметрыДляЗаполненияНомеровГТДПоОстаткам() Экспорт
	
	ПараметрыЗаполнения = Новый Структура;
	
	ПараметрыЗаполнения.Вставить("Дата");
	ПараметрыЗаполнения.Вставить("Регистратор");
	ПараметрыЗаполнения.Вставить("Организация");
	ПараметрыЗаполнения.Вставить("АдресТовары");
	ПараметрыЗаполнения.Вставить("СтруктурноеПодразделение");
	ПараметрыЗаполнения.Вставить("Склад");
	ПараметрыЗаполнения.Вставить("СпособЗаполнения");
		
	Возврат ПараметрыЗаполнения;	
	
КонецФункции

Процедура ЗаполнитьПараметрыДляЗаполненияНомеровГТДПоОстаткам(ПараметрыЗаполнения, Объект, Товары) Экспорт
		
	ПараметрыЗаполнения.Дата = Объект.Дата;
	ПараметрыЗаполнения.Регистратор = Объект.Ссылка;
	ПараметрыЗаполнения.Организация = Объект.Организация;
	ПараметрыЗаполнения.АдресТовары = ПоместитьВоВременноеХранилище(Товары);	
	
	ВедетсяУчетПоСкладам  = ?(ПланыСчетов.Типовой.Товары.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Склады, "ВидСубконто") = Неопределено, Ложь, Истина);	
	
	Если ТипЗнч(Объект) = Тип("Структура") Тогда
		ПараметрыЗаполнения.СтруктурноеПодразделение = Объект.СтруктурноеПодразделение;
		
		Если ВедетсяУчетПоСкладам Тогда
			ПараметрыЗаполнения.Склад = Объект.Склад;
		КонецЕсли;
		
	Иначе 		
		Если ОбщегоНазначенияБК.ЕстьРеквизитДокумента("СтруктурноеПодразделениеОтправитель", Объект.Метаданные()) Тогда
			ПараметрыЗаполнения.СтруктурноеПодразделение = Объект.СтруктурноеПодразделениеОтправитель;	
		Иначе		
			ПараметрыЗаполнения.СтруктурноеПодразделение = Объект.СтруктурноеПодразделение;
		КонецЕсли;		
		
		Если ВедетсяУчетПоСкладам Тогда
			
			Если ОбщегоНазначенияБК.ЕстьРеквизитДокумента("СкладОтправитель", Объект.Метаданные()) Тогда
				ПараметрыЗаполнения.Склад = Объект.СкладОтправитель;	
			Иначе		
				ПараметрыЗаполнения.Склад = Объект.Склад;
			КонецЕсли;	
		КонецЕсли; 
		
	КонецЕсли;
	
	Если Товары.Колонки.Найти("Склад") = Неопределено Тогда
		КолонкаСклад = Товары.Колонки.Добавить("Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"));
		Если ВедетсяУчетПоСкладам Тогда
			Товары.ЗаполнитьЗначения(ПараметрыЗаполнения.Склад, "Склад");
		КонецЕсли;
	КонецЕсли; 
	
КонецПроцедуры

Процедура ЗаполнитьТаблицуНомераГТД(Объект, Товары, НомераГТД, СпособЗаполнения = Неопределено, ПоказыватьСообщения = Ложь) Экспорт
	
	Если СпособЗаполнения = Неопределено Тогда
		СпособЗаполнения = НомераГТДКлиентСервер.СпособЗаполнения_СначалаПустыми();
	КонецЕсли;
	
	Если НЕ ВедетсяУчетПоТоварамОрганизаций(Объект.Дата) Тогда
		Возврат;
	КонецЕсли;
				
	УдалитьНомераГТДСНесуществующимКлючомСвязи(Товары, НомераГТД);	
	УменьшитьКоличествоВНомерахГТДДоКоличестваВТоварах(Товары, НомераГТД);
	УдалитьНомераГТДСНулевымКоличеством(Товары, НомераГТД);
	
	// Заполнить параметры для дозаполнения табличной части НомераГТД
	// по данным табличных частей активов (например табличной части Товары).
	ПараметрыЗаполнения = ПустыеПараметрыДляЗаполненияНомеровГТДПоОстаткам();
	ЗаполнитьПараметрыДляЗаполненияНомеровГТДПоОстаткам(ПараметрыЗаполнения, Объект, Товары);
	ПараметрыЗаполнения.СпособЗаполнения = СпособЗаполнения;
	
	ДобавитьНедостающееКоличествоНомеровГТДПоОстаткам(ПараметрыЗаполнения, Товары, НомераГТД, ПоказыватьСообщения);	
	
	СгруппироватьТаблицуНомеровГТД(НомераГТД);
	
	Если ТипЗнч(Объект.НомераГТД) <> Тип("ТаблицаЗначений") Тогда
		Объект.НомераГТД.Загрузить(НомераГТД);
	КонецЕсли;
	
КонецПроцедуры

Процедура УдалитьНомераГТДСНесуществующимКлючомСвязи(Товары, НомераГТД) Экспорт
	
	// Создать массив ключей связи, которые указаны в таблице Товары.
	МассивКлючейСвязиТоваров = Новый Массив;
	Для Каждого СтрокаТовары Из Товары Цикл
		МассивКлючейСвязиТоваров.Добавить(СтрокаТовары.КлючСвязи);	
	КонецЦикла;
	
	// Удалить из таблицы НомераГТД строки, в которых указаны ключи связи, которых нет в таблице Товары.
	Пока Истина Цикл
		
		БылаУдаленаСтрока = Ложь;
		
		Для Каждого СтрокаНомерГТД Из НомераГТД Цикл
			Если МассивКлючейСвязиТоваров.Найти(СтрокаНомерГТД.КлючСвязи) = Неопределено Тогда
				БылаУдаленаСтрока = Истина;
				НомераГТД.Удалить(СтрокаНомерГТД);
			КонецЕсли;			
		КонецЦикла;
		
		Если НЕ БылаУдаленаСтрока Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УменьшитьКоличествоВНомерахГТДДоКоличестваВТоварах(Товары, НомераГТД) Экспорт
	
	Для Каждого СтрокаТовары Из Товары Цикл
		
		ТребуемоеКоличество = СтрокаТовары.Количество;
		НакопленноеКоличество = 0;
		
		ПараметрыОтбора = Новый Структура();
		ПараметрыОтбора.Вставить("КлючСвязи", СтрокаТовары.КлючСвязи);
		МассивСтрокНомеровГТД = НомераГТД.НайтиСтроки(ПараметрыОтбора);		
		
		Для Каждого СтрокаНомерГТД Из МассивСтрокНомеровГТД Цикл
			
			НакопленноеКоличество = НакопленноеКоличество + СтрокаНомерГТД.Количество;
			
			Если ТребуемоеКоличество < НакопленноеКоличество Тогда
				УменьшениеКоличестваНомераГТД = НакопленноеКоличество - ТребуемоеКоличество;
				Если УменьшениеКоличестваНомераГТД < СтрокаНомерГТД.Количество Тогда 
					СтрокаНомерГТД.Количество = СтрокаНомерГТД.Количество - УменьшениеКоличестваНомераГТД;
				Иначе
					СтрокаНомерГТД.Количество = 0;	
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УдалитьНомераГТДСНулевымКоличеством(Товары, НомераГТД) Экспорт
	
	Пока Истина Цикл
		
		УдаленНомерГТД = Ложь;
		
		Для Каждого СтрокаНомерГТД Из НомераГТД Цикл
			Если СтрокаНомерГТД.Количество = 0 Тогда
				НомераГТД.Удалить(СтрокаНомерГТД);
				УдаленНомерГТД = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ УдаленНомерГТД Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьНедостающееКоличествоНомеровГТДПоОстаткам(ПараметрыЗаполнения, Товары, НомераГТД, ПоказыватьСообщения) Экспорт
	     			
	ОстаткиПоНомерамГТД = ПолучитьОстаткиПоНомерамГТД(Товары, ПараметрыЗаполнения);
	
	УменьшитьВОстаткахКоличествоПоНомерамГТДКоторыеЕстьВДокументе(ОстаткиПоНомерамГТД, НомераГТД);
	
	УвеличитьКоличествоВНомерахГТДДоКоличестваВТоварах(Товары, НомераГТД, ОстаткиПоНомерамГТД, ПоказыватьСообщения);
	
КонецПроцедуры

Функция ПолучитьОстаткиПоНомерамГТД(Товары, Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТоварыОрганизацийОстатки.Товар КАК Номенклатура,
	|	ТоварыОрганизацийОстатки.Склад КАК Склад,
	|	ТоварыОрганизацийОстатки.НомерГТД КАК НомерГТД,
	|	ТоварыОрганизацийОстатки.КоличествоОстаток,
	|	ВЫБОР
	|		КОГДА ТоварыОрганизацийОстатки.НомерГТД = ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка)
	|			ТОГДА 1
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ТоварыОрганизацийОстатки.НомерГТД.ПризнакПроисхождения = """"
	|					ТОГДА 2
	|				ИНАЧЕ 3
	|			КОНЕЦ
	|	КОНЕЦ КАК Приоритет
	|ПОМЕСТИТЬ ВТ_Остатки
	|ИЗ
	|	РегистрНакопления.ТоварыОрганизацийБУ.Остатки(
	|			&Период,
	|			Организация = &Организация
	|				И СтруктурноеПодразделение = &СтруктурноеПодразделение
	|				И &УсловиеНаТовары) КАК ТоварыОрганизацийОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Остатки.Номенклатура,
	|	ВТ_Остатки.Склад,
	|	ВТ_Остатки.НомерГТД,
	|	ВТ_Остатки.КоличествоОстаток
	|ИЗ
	|	ВТ_Остатки КАК ВТ_Остатки
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВТ_Остатки.Приоритет УБЫВ,
	|	ВТ_Остатки.НомерГТД";
	
	ТекстЗапросаВременнойТаблицы = 
	"ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,	
	|	&Склад КАК Склад
	|ПОМЕСТИТЬ ВТ
	|ИЗ
	|	&Товары КАК Товары";
	
	ТекстРазделительПакетаЗапроса =	
	"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
		
	ВедетсяУчетПоСкладам  = ?(ПланыСчетов.Типовой.Товары.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Склады, "ВидСубконто") = Неопределено, Ложь, Истина);
		
	Если ВедетсяУчетПоСкладам Тогда
		Запрос.Текст = ТекстЗапросаВременнойТаблицы + ТекстРазделительПакетаЗапроса + Запрос.Текст;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Товары", Товары);
	
	Если ВедетсяУчетПоСкладам Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеНаТовары", "(Товар, Склад) В (ВЫБРАТЬ ВТ.Номенклатура, ВТ.Склад ИЗ ВТ КАК ВТ)");		
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеНаТовары", "Товар В (&МассивТоварв)");
		Запрос.УстановитьПараметр("МассивТоварв", Товары.ВыгрузитьКолонку("Номенклатура"));			
	КонецЕсли;
	
	Если СтрНайти(Запрос.Текст, "ВТ_Остатки.Приоритет УБЫВ") = 0 Тогда
		ВызватьИсключение НСтр("ru = 'В тексте запроса отсутствует требуемая строка.'");
	КонецЕсли;
	
	Если Параметры.СпособЗаполнения = НомераГТДКлиентСервер.СпособЗаполнения_СначалаПустыми() Тогда		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТ_Остатки.Приоритет УБЫВ", "ВТ_Остатки.Приоритет ВОЗР");  	
	ИначеЕсли Параметры.СпособЗаполнения = НомераГТДКлиентСервер.СпособЗаполнения_СначалаЗаполненными() Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТ_Остатки.Приоритет УБЫВ", "ВТ_Остатки.Приоритет УБЫВ");  	
	Иначе		
		ВызватьИсключение НСтр("ru = 'Необрабатываемое значение параметра ""СпособЗаполнения"".'");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Склад", Параметры.Склад);
	Запрос.УстановитьПараметр("Организация", Параметры.Организация); 
	Запрос.УстановитьПараметр("СтруктурноеПодразделение", Параметры.СтруктурноеПодразделение); 
	
	МоментВремени = Новый МоментВремени(Параметры.Дата, Параметры.Регистратор);	
	Если ЗначениеЗаполнено(Параметры.Регистратор) Тогда
		Запрос.УстановитьПараметр("Период", Новый Граница(МоментВремени, ВидГраницы.Исключая));
	Иначе  	
		Запрос.УстановитьПараметр("Период", Новый Граница(МоментВремени, ВидГраницы.Включая));
	КонецЕсли;
	
	ОстаткиПоНомерамГТД = Запрос.Выполнить().Выгрузить();
	
	Возврат ОстаткиПоНомерамГТД;
	
КонецФункции

Процедура УменьшитьВОстаткахКоличествоПоНомерамГТДКоторыеЕстьВДокументе(ОстаткиПоНомерамГТД, НомераГТД) Экспорт
	
	ВедетсяУчетПоСкладам  = ?(ПланыСчетов.Типовой.Товары.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Склады, "ВидСубконто") = Неопределено, Ложь, Истина);
	
	Для Каждого СтрокаНомераГТД Из НомераГТД Цикл
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Номенклатура", СтрокаНомераГТД.Номенклатура);
		ПараметрыОтбора.Вставить("НомерГТД", СтрокаНомераГТД.НомерГТД);
		
		Если ВедетсяУчетПоСкладам Тогда
			ПараметрыОтбора.Вставить("Склад", СтрокаНомераГТД.Склад);
		КонецЕсли; 

		МассивСтрокОстатковПоНомерамГТД = ОстаткиПоНомерамГТД.НайтиСтроки(ПараметрыОтбора);
		
		Если МассивСтрокОстатковПоНомерамГТД.Количество() > 0 Тогда
			
			СтрокаОстаткиПоНомерамГТД = МассивСтрокОстатковПоНомерамГТД[0];
			СтрокаОстаткиПоНомерамГТД.КоличествоОстаток = СтрокаОстаткиПоНомерамГТД.КоличествоОстаток - (СтрокаНомераГТД.Количество * СтрокаНомераГТД.Коэффициент);
			
			// Условие ниже никогда не должно выполняться.
			// Добавлено для повышения надежности системы.
			Если СтрокаОстаткиПоНомерамГТД.КоличествоОстаток < 0 Тогда
				СтрокаОстаткиПоНомерамГТД.КоличествоОстаток = 0;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УвеличитьКоличествоВНомерахГТДДоКоличестваВТоварах(Товары, НомераГТД, ОстаткиПоНомерамГТД, ПоказыватьСообщения) Экспорт
		
	ЕстьРеквизитНовыйНомерГТД = (НомераГТД.Колонки.Найти("НовыйНомерГТД") <> Неопределено);
	ЕстьКоэффициент 		  = (Товары.Колонки.Найти("Коэффициент") <> Неопределено);
	ВедетсяУчетПоСкладам  = ?(ПланыСчетов.Типовой.Товары.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Склады, "ВидСубконто") = Неопределено, Ложь, Истина);	
	
	Для Каждого СтрокаТовары Из Товары Цикл		
		
		Коэффициент = 1;
		Если ЕстьКоэффициент Тогда
			Коэффициент = СтрокаТовары.Коэффициент;
		КонецЕсли;
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("КлючСвязи", СтрокаТовары.КлючСвязи);
		МассивСтрокНомераГТД = НомераГТД.НайтиСтроки(ПараметрыОтбора);
		
		КоличествоВНомерахГТД = 0;
		Для Каждого СтрокаНомераГТД Из МассивСтрокНомераГТД Цикл
			КоличествоВНомерахГТД = КоличествоВНомерахГТД + (СтрокаНомераГТД.Количество * Коэффициент);	
		КонецЦикла;	 		
		
		КоличествоОсталосьПогасить = (СтрокаТовары.Количество * Коэффициент) - КоличествоВНомерахГТД;
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Номенклатура", СтрокаТовары.Номенклатура);
		
		ОстаткиПоТовару = ОстаткиПоНомерамГТД.НайтиСтроки(ПараметрыОтбора);
				
		Для Каждого СтрокаОстаткиПоТовару Из ОстаткиПоТовару Цикл
			
			Если СтрокаОстаткиПоТовару.КоличествоОстаток > 0 Тогда
				
				Если КоличествоОсталосьПогасить > 0 Тогда
					
					КоличествоСписать = Мин(КоличествоОсталосьПогасить, СтрокаОстаткиПоТовару.КоличествоОстаток);				
					
					СтрокаНомераГТД = НомераГТД.Добавить();
					СтрокаНомераГТД.КлючСвязи    = СтрокаТовары.КлючСвязи;
					СтрокаНомераГТД.Номенклатура = СтрокаТовары.Номенклатура;
					СтрокаНомераГТД.НомерГТД     = СтрокаОстаткиПоТовару.НомерГТД;
					СтрокаНомераГТД.Коэффициент  = Коэффициент;
					СтрокаНомераГТД.Количество   = КоличествоСписать / Коэффициент;
					СтрокаНомераГТД.Склад        = СтрокаОстаткиПоТовару.Склад;
					
					Если ЕстьРеквизитНовыйНомерГТД Тогда
						СтрокаНомераГТД.НовыйНомерГТД = СтрокаНомераГТД.НомерГТД;
					КонецЕсли;
											
					КоличествоОсталосьПогасить = КоличествоОсталосьПогасить - КоличествоСписать;
					СтрокаОстаткиПоТовару.КоличествоОстаток = СтрокаОстаткиПоТовару.КоличествоОстаток - КоличествоСписать;

				Иначе
					
					Прервать;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		// Если на остатках больше ничего нет, то дополнить таблицу пустыми номерами ГТД.
		Если КоличествоОсталосьПогасить > 0 Тогда
			
			СтрокаНомераГТД = НомераГТД.Добавить();
			СтрокаНомераГТД.КлючСвязи    = СтрокаТовары.КлючСвязи;
			СтрокаНомераГТД.Номенклатура = СтрокаТовары.Номенклатура;
			СтрокаНомераГТД.НомерГТД     = Справочники.НомераГТД.ПустаяСсылка();
			СтрокаНомераГТД.Коэффициент  = Коэффициент;
			СтрокаНомераГТД.Количество   = КоличествоОсталосьПогасить / Коэффициент;
			СтрокаНомераГТД.Склад		 = СтрокаТовары.Склад;
			
			Если ЕстьРеквизитНовыйНомерГТД Тогда
				СтрокаНомераГТД.НовыйНомерГТД = СтрокаНомераГТД.НомерГТД;
			КонецЕсли;
			
			Если ПоказыватьСообщения Тогда
				
				ТекстСообщения = НСтр("ru = 'Товар ""%1"". Недостаточно остатков по регистру ""Товары организаций (БУ)"" для заполнения всех номеров ГТД. Недостача: %2.'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, СтрокаНомераГТД.Номенклатура, СтрокаНомераГТД.Количество);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры

Процедура СгруппироватьТаблицуНомеровГТД(НомераГТД) Экспорт
	
	//////////////////////////////////////////////////////////////////////////////
	// Установить номера строк, т.к. они нужны для сортировки.
	НомерСтроки = 1;
	
	ЕстьРеквизитНовыйНомерГТД = (НомераГТД.Колонки.Найти("НовыйНомерГТД") <> Неопределено);
	Для Каждого СтрокаНомераГТД Из НомераГТД Цикл
		СтрокаНомераГТД.НомерСтроки = НомерСтроки;
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	
	//////////////////////////////////////////////////////////////////////////////
	// Сначала списываются товары, у которых в регистре ТоварыОрганизаций пустой номер ГТД.
	// Поэтому данные строки должны быть всегда для каждого ключа связи в таблице НомераГТД.
	// Если в регистре ТоварыОрганизаций не хватает остатков по товару, то таблица НомераГТД
	// добивается пустыми номерами ГТД, эти строки должны быть всегда внизу таблицы НомераГТД.
	
	НомераГТД.Колонки.Добавить("ПервыйПустойНомерГТД", Новый ОписаниеТипов("Булево"));
	
	КоллекцияКлючейСвязи = Новый Соответствие;
	Для Каждого СтрокаНомераГТД Из НомераГТД Цикл
		КоллекцияКлючейСвязи.Вставить(СтрокаНомераГТД.КлючСвязи);
	КонецЦикла;
	
	Для Каждого КлючСвязи Из КоллекцияКлючейСвязи Цикл
		ПараметрыОтборка = Новый Структура;
		ПараметрыОтборка.Вставить("КлючСвязи", КлючСвязи.Ключ);
		МассивНайденныхСтрок = НомераГТД.НайтиСтроки(ПараметрыОтборка);
		Если МассивНайденныхСтрок.Количество() > 0 Тогда
			Для Каждого СтрокаНоменГТД Из МассивНайденныхСтрок Цикл
				Если СтрокаНоменГТД.НомерГТД.Пустая() Тогда
					СтрокаНоменГТД.ПервыйПустойНомерГТД = Истина;
				Иначе
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	//////////////////////////////////////////////////////////////////////////////
	// Сгруппировать таблицу НомераГТД.
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НомераГТД.НомерСтроки,
	|	НомераГТД.КлючСвязи,
	|	НомераГТД.Номенклатура,
	|	НомераГТД.НомерГТД, " + ?(ЕстьРеквизитНовыйНомерГТД, "
	|	НомераГТД.НовыйНомерГТД, ", "") + "	
	|	НомераГТД.Коэффициент,
	|	НомераГТД.Количество,
	|	НомераГТД.ПервыйПустойНомерГТД
	|ПОМЕСТИТЬ ВТ_НомераГТД
	|ИЗ
	|	&НомераГТД КАК НомераГТД
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(ВТ_НомераГТД.НомерСтроки) КАК НомерСтроки,
	|	ВТ_НомераГТД.КлючСвязи КАК КлючСвязи,
	|	ВТ_НомераГТД.Номенклатура,
	|	ВТ_НомераГТД.НомерГТД, " + ?(ЕстьРеквизитНовыйНомерГТД,"
	|	ВТ_НомераГТД.НовыйНомерГТД, ", "") + "	
	|	ВТ_НомераГТД.Коэффициент,
	|	СУММА(ВТ_НомераГТД.Количество) КАК Количество,
	|	ВТ_НомераГТД.ПервыйПустойНомерГТД КАК ПервыйПустойНомерГТД
	|ИЗ
	|	ВТ_НомераГТД КАК ВТ_НомераГТД
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_НомераГТД.КлючСвязи,
	|	ВТ_НомераГТД.Номенклатура,
	|	ВТ_НомераГТД.НомерГТД, " + ?(ЕстьРеквизитНовыйНомерГТД,"
	|	ВТ_НомераГТД.НовыйНомерГТД, ", "") + "	
	|	ВТ_НомераГТД.НомерГТД,
	|	ВТ_НомераГТД.Коэффициент,
	|	ВТ_НомераГТД.ПервыйПустойНомерГТД
	|
	|УПОРЯДОЧИТЬ ПО
	|	КлючСвязи,
	|	ПервыйПустойНомерГТД УБЫВ,
	|	НомерСтроки";
	
	Запрос.УстановитьПараметр("НомераГТД", НомераГТД);	
	СгруппированныеНомераГТД = Запрос.Выполнить().Выгрузить();	
	
	НомераГТД.Колонки.Удалить("ПервыйПустойНомерГТД");
	
	НомераГТД.Очистить();
	Для Каждого СтрокаСгруппированныеНомераГТД Из СгруппированныеНомераГТД Цикл
		СтрокаНомераГТД = НомераГТД.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаНомераГТД, СтрокаСгруппированныеНомераГТД, , "НомерСтроки"); 
	КонецЦикла;
	
КонецПроцедуры

Функция ИзмениласьТЧТоварыОтносительноТЧНомеровГТД(Товары, НомераГТД) Экспорт
	
		Запрос = Новый Запрос;		
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТоваров.КлючСвязи КАК КлючСвязи,
	|	ТаблицаТоваров.Количество  КАК Количество
	|ПОМЕСТИТЬ ВТ_Товары
	|ИЗ
	|	&Товары КАК ТаблицаТоваров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаНомераГТД.КлючСвязи,
	|	ТаблицаНомераГТД.Количество КАК Количество
	|ПОМЕСТИТЬ ВТ_НомераГТД
	|ИЗ
	|	&НомераГТД КАК ТаблицаНомераГТД
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки,
	|	ТаблицаТоваров.КлючСвязи КАК КлючСвязи,
	|	ЕСТЬNULL(ТаблицаТоваров.Количество, 0) - ЕСТЬNULL(ТаблицаНомераГТД.Количество, 0) КАК Количество
	|ИЗ
	|	ВТ_Товары КАК ТаблицаТоваров
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ТаблицаНомераГТД.КлючСвязи КАК КлючСвязи,
	|			СУММА(ТаблицаНомераГТД.Количество) КАК Количество
	|		ИЗ
	|			ВТ_НомераГТД КАК ТаблицаНомераГТД
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ТаблицаНомераГТД.КлючСвязи) КАК ТаблицаНомераГТД
	|		ПО ТаблицаТоваров.КлючСвязи = ТаблицаНомераГТД.КлючСвязи
	|ГДЕ
	|	ЕСТЬNULL(ТаблицаТоваров.Количество, 0) - ЕСТЬNULL(ТаблицаНомераГТД.Количество, 0) <> 0";
	
	Запрос.УстановитьПараметр("Товары", Товары); 
	Запрос.УстановитьПараметр("НомераГТД", НомераГТД); 
	
	ТаблицаПоРахождениямТоваровИНомеровГТД = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаПоРахождениямТоваровИНомеровГТД;
	
КонецФункции

#КонецОбласти

#Область ЗаполнениеПоДокументамОснования

Функция ЗаполнитьТабличныеЧастиСУчетомНомеровГТД(СтруктураПоиска, СтрокаТоваров, ТабличнаяЧасть, ТабличнаяЧастьГТД, ЗаполнятьНомераГТД = Ложь) Экспорт
	     	
	СтрокиТовары = ТабличнаяЧасть.НайтиСтроки(СтруктураПоиска);
	
	Если СтрокиТовары.Количество() = 0 Тогда
		КлючСвязи = ОбщегоНазначенияБККлиентСервер.НовыйКлючСвязиСтрокиТаблицы(ТабличнаяЧасть);
		СтрокаТабличнойЧасти = ТабличнаяЧасть.Добавить();			
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТоваров);
		СтрокаТабличнойЧасти.КлючСвязи = КлючСвязи;
	Иначе 
		СтрокаТабличнойЧасти = СтрокиТовары[0]; 
		СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + СтрокаТоваров.Количество;
	КонецЕсли;  
	
	Если ЗаполнятьНомераГТД Тогда		
		
		СтрокаТабличнойЧастиГТД = ТабличнаяЧастьГТД.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧастиГТД, СтрокаТоваров);
		СтрокаТабличнойЧастиГТД.КлючСвязи = СтрокаТабличнойЧасти.КлючСвязи;		
		
	КонецЕсли;
	
	Возврат СтрокаТабличнойЧасти; 
	
КонецФункции

Функция ПустыеПараметрыФормыРедактированияНомеровГТД() Экспорт
	
	ПараметрыФормы = Новый Структура;
	
	ПараметрыФормы.Вставить("ДокументМодифицирован");
	
	ПараметрыФормы.Вставить("АдресТовары");
	ПараметрыФормы.Вставить("АдресНомераГТД");
	ПараметрыФормы.Вставить("ПоказыватьТолькоОстатки");
	
	ПараметрыФормы.Вставить("Ссылка");
	ПараметрыФормы.Вставить("Дата");
	ПараметрыФормы.Вставить("Организация");
	ПараметрыФормы.Вставить("СтруктурноеПодразделение");
	ПараметрыФормы.Вставить("Склад");
	
	ПараметрыФормы.Вставить("ТолькоПросмотр");
	ПараметрыФормы.Вставить("ЗаполнятьОстатки", Истина);
		
	Возврат ПараметрыФормы;
	
КонецФункции

Функция ЗаполнитьПараметрыФормыРедактированияНомеровГТД(Объект, Форма, ИмяТаблицы = "Товары", ИмяТаблицыНомерГТД = "НомераГТД") Экспорт
	
	ПараметрыФормы = ПустыеПараметрыФормыРедактированияНомеровГТД();
		
	ЗаполнитьЗначенияСвойств(ПараметрыФормы, Объект);
	
	Если Объект.Свойство("СтруктурноеПодразделениеОтправитель") Тогда
		ПараметрыФормы.СтруктурноеПодразделение = Объект.СтруктурноеПодразделениеОтправитель;	
	КонецЕсли;
	
	Если Объект.Свойство("СкладОтправитель") Тогда
		ПараметрыФормы.Склад = Объект.СкладОтправитель;	
	КонецЕсли;
	
	Для Каждого СтрокаТовары Из Объект[ИмяТаблицы] Цикл
		Если ЗначениеЗаполнено(СтрокаТовары.КлючСвязи) Тогда
			Продолжить;
		КонецЕсли;
		 СтрокаТовары.КлючСвязи = ОбщегоНазначенияБККлиентСервер.НовыйКлючСвязиСтрокиТаблицы(Объект[ИмяТаблицы]);
	КонецЦикла;
	
	ПараметрыФормы.АдресТовары = РаботаСДиалогами.АдресТаблицыЗначений(Форма, ИмяТаблицы);
	ПараметрыФормы.АдресНомераГТД = РаботаСДиалогами.АдресТаблицыЗначений(Форма, ИмяТаблицыНомерГТД);
	ПараметрыФормы.ПоказыватьТолькоОстатки = Истина;
	ПараметрыФормы.ДокументМодифицирован = Форма.Модифицированность;
	
	ПараметрыФормы.ТолькоПросмотр = Форма.ТолькоПросмотр;
	
	Возврат ПараметрыФормы;
	
КонецФункции

#КонецОбласти

#Область ТоварыОрганизацийБУ
Функция ТекстЗапросаТоварыОрганизацийРасход(ИмяСписка = "Товары", ИмяВТ = "ТаблицаТовары") Экспорт
	
	ТекстЗапроса = ТекстЗапросаТоварыОрганизаций(ИмяСписка, ИмяВТ); 
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ВидДвижения", "ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)");		
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТоварыОрганизацийПриход(ИмяСписка = "Товары", ИмяВТ = "ТаблицаТовары") Экспорт
	
	ТекстЗапроса = ТекстЗапросаТоварыОрганизаций(ИмяСписка, ИмяВТ); 
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ВидДвижения", "ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)");
		
	Возврат ТекстЗапроса;
			
КонецФункции

Функция ТекстЗапросаТоварыОрганизаций(ИмяСписка, ИмяВТ) Экспорт
	
	ТекстЗапроса ="ВЫБРАТЬ
	|	МИНИМУМ(НомераГТД.НомерСтроки) КАК НомерСтроки,
	|	&ИмяСписка КАК ИмяСписка,
	|	ТаблицаТовары.Номенклатура КАК Товар,
	|	Реквизиты.Склад КАК Склад,
	|	НомераГТД.НомерГТД КАК НомерГТД,
	|	СУММА(ВЫРАЗИТЬ(НомераГТД.Количество * ТаблицаТовары.Коэффициент КАК ЧИСЛО(19, 3))) КАК Количество,
	|	&ВидДвижения КАК ВидДвижения
	|ИЗ
	|	&ТаблицаТовары КАК ТаблицаТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|		ПО (Реквизиты.Ссылка = ТаблицаТовары.Ссылка)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаНомераГТД КАК НомераГТД
	|		ПО ТаблицаТовары.КлючСвязи = НомераГТД.КлючСвязи
	|ГДЕ
	|	НЕ ТаблицаТовары.СчетУчетаБУ.Забалансовый
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТовары.Номенклатура,
	|	Реквизиты.Склад,
	|	НомераГТД.НомерГТД
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки"
	+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТаблицаТовары", ИмяВт);		
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяСписка", """" + ИмяСписка + """");
	
	Возврат ТекстЗапроса;	
   		
КонецФункции

Функция ВедетсяУчетПоТоварамОрганизаций(ДатаДокумента) Экспорт
	
	ДатаПереходаНаУчетПоТоварамОрганизацийВРазрезеНомеровГТДБУ = Константы.ДатаПереходаНаУчетПоТоварамОрганизацийВРазрезеНомеровГТДБУ.Получить();
		
	УчетПоИсточникамПроисхождения = ДатаПереходаНаУчетПоТоварамОрганизацийВРазрезеНомеровГТДБУ <> Дата(1,1,1) И ДатаДокумента >= ДатаПереходаНаУчетПоТоварамОрганизацийВРазрезеНомеровГТДБУ;	
	УчетТоваровНаВС  = ВедетсяУчетПоТоварамНаВС(ДатаДокумента);
	
	Возврат УчетПоИсточникамПроисхождения И Не УчетТоваровНаВС;
	
КонецФункции

Функция ВедетсяУчетПоТоварамНаВС(ДатаДокумента) Экспорт
	
	ДатаПереходаНаУчетПоТоварамОрганизацийНаВС = Константы.ДатаПереходаНаУчетПоТоварамОрганизацийНаВиртуальныхСкладах.Получить();
	
	УчетТоваровНаВС  = (ДатаПереходаНаУчетПоТоварамОрганизацийНаВС <> Дата(1,1,1) И ДатаДокумента >= ДатаПереходаНаУчетПоТоварамОрганизацийНаВС);
	
	Возврат УчетТоваровНаВС;
	
КонецФункции

Функция ПодготовитьТаблицуТоварыОрганизаций(ТаблицаТовары,ТаблицаРеквизиты, Отказ) Экспорт
	
	Параметры = Новый Структура;    
	
	СписокОбязательныхКолонок = ""
	+ "Регистратор,"                  	 // <ДокументСсылка.*> - документ-регистратор движений
	+ "Период,"                       	 // <Дата> - период движений - дата документа
	+ "Организация,"                  	 // <СправочникСсылка.Организация> - организация, в которую приходуется товар
	+ "СтруктурноеПодразделение" ;
	
	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

		
	СписокОбязательныхКолонок = ""
	+ "НомерСтроки,"       				// <Число> - номер строки в списке
	+ "Товар,"      				    // <СправочникСсылка.Номенклатура>                      
	+ "НомерГТД,"        				// <СправочникСсылка.НомераГТД> 
	+ "Количество,"                     // <Число,15,3> - количество 
	+ "ВидДвижения,"
	+ "ИмяСписка,"
	+ "Склад";
	
	Параметры.Вставить("ТаблицаТовары",
		ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаТовары, СписокОбязательныхКолонок));
	
	Возврат Параметры; 
		
КонецФункции

Процедура СформироватьДвиженияТоварыОрганизаций(ТаблицаТовары, ТаблицаРеквизиты, Движения, Отказ) Экспорт 
		
	Параметры = ПодготовитьТаблицуТоварыОрганизаций(ТаблицаТовары,ТаблицаРеквизиты,  Отказ);
		
	Если Параметры.ТаблицаТовары.Количество() = 0 ИЛИ  Параметры.Реквизиты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = Параметры.Реквизиты[0];
	
	Если НЕ ВедетсяУчетПоТоварамОрганизаций(Реквизиты.Период) Тогда
		Возврат;
	КонецЕсли;
			
	ВедетсяУчетПоСкладам  = ?(ПланыСчетов.Типовой.Товары.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Склады, "ВидСубконто") = Неопределено, Ложь, Истина);
	
	Для Каждого СтрокаТаблицы Из Параметры.ТаблицаТовары Цикл
		Движение = Движения.ТоварыОрганизацийБУ.Добавить();
		Движение.Период 				  = Реквизиты.Период;
		Движение.Организация 			  = Реквизиты.Организация;
		Движение.СтруктурноеПодразделение = Реквизиты.СтруктурноеПодразделение;  
		ЗаполнитьЗначенияСвойств(Движение, СтрокаТаблицы);
		//если не ведется учет по складам на счетах ТМЗ, то склад очищаем
		Если Не ВедетсяУчетПоСкладам Тогда
			Движение.Склад = Справочники.Склады.ПустаяСсылка();
		КонецЕсли;   				
	КонецЦикла;

	Движения.ТоварыОрганизацийБУ.Записывать = Истина;

КонецПроцедуры

Процедура ВыполнитьКонтрольТоварыОрганизаций(ТаблицаТовары, ТаблицаРеквизиты, ВыводитьСообщения = Истина, Отказ) Экспорт
	
	Если ТаблицаТовары = Неопределено ИЛИ ТаблицаТовары.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Параметры =  ПодготовитьТаблицуТоварыОрганизаций(ТаблицаТовары, ТаблицаРеквизиты, Отказ);
		
	Реквизиты = Параметры.Реквизиты[0];

	Если НЕ ВедетсяУчетПоТоварамОрганизаций(Реквизиты.Период) Тогда
		Возврат;
	КонецЕсли;
	
	КонтролироватьОстаток = НЕ ПроцедурыБухгалтерскогоУчета.ОтключитьКонтрольОтрицательныхОстатков();
		        	  	
	Запрос = Новый Запрос;
	
	ВедетсяУчетПоСкладам  = ?(ПланыСчетов.Типовой.Товары.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Склады, "ВидСубконто") = Неопределено, Ложь, Истина);
	
	Запрос.Текст = 	
	"ВЫБРАТЬ
	|	ТаблицаТовары.Товар КАК Товар,
	|	ТаблицаТовары.Склад КАК Склад,
	|	ТаблицаТовары.НомерГТД КАК НомерГТД
	|ПОМЕСТИТЬ Вт_Товары
	|ИЗ
	|	&ТаблицаТовары КАК ТаблицаТовары
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Товар,
	|	НомерГТД
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыОрганизацийОстатки.Товар,
	|	ТоварыОрганизацийОстатки.Склад,
	|	ТоварыОрганизацийОстатки.НомерГТД,
	|	ТоварыОрганизацийОстатки.КоличествоОстаток
	|ИЗ
	|	РегистрНакопления.ТоварыОрганизацийБУ.Остатки(
	|			&ДатаОстатка,
	|			Организация = &Организация
	|				И СтруктурноеПодразделение = &СтруктурноеПодразделение
	|				И &УсловиеНаТовары) КАК ТоварыОрганизацийОстатки";
	
	УсловиеНаТовары = 
		"(Товар, НомерГТД " 
		+ ?(ВедетсяУчетПоСкладам, ", Склад", "") + ") В
		|	(ВЫБРАТЬ
		|		ВТ_Товары.Товар,
		|		ВТ_Товары.НомерГТД "
				+ ?(ВедетсяУчетПоСкладам, ", ВТ_Товары.Склад", "") + "
		|	ИЗ
		|		ВТ_Товары)";	
		
	Запрос.УстановитьПараметр("ТаблицаТовары", ТаблицаТовары);
	Запрос.УстановитьПараметр("ДатаОстатка", Новый МоментВремени(Реквизиты.Период, Реквизиты.Регистратор));
	Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
	Запрос.УстановитьПараметр("СтруктурноеПодразделение", Реквизиты.СтруктурноеПодразделение);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеНаТовары",УсловиеНаТовары); 
		
	ТаблицаОстатков = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаДокумента Из ТаблицаТовары Цикл
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Товар", СтрокаДокумента.Товар);
		СтруктураПоиска.Вставить("НомерГТД", СтрокаДокумента.НомерГТД);
		
		Если ВедетсяУчетПоСкладам Тогда
			СтруктураПоиска.Вставить("Склад", СтрокаДокумента.Склад);	
		КонецЕсли;  		
		СтрокиОстатка = ТаблицаОстатков.НайтиСтроки(СтруктураПоиска);
		КоличествоОсталосьПогасить = СтрокаДокумента.Количество;	
		
		Для Каждого СтрокаОстатка Из СтрокиОстатка Цикл
			
			Если КоличествоОсталосьПогасить <= 0 Тогда
				Прервать;
			КонецЕсли;
			
			Если СтрокаОстатка.КоличествоОстаток <= 0 Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаОстатка = СтрокиОстатка[0];
			КоличествоДок = МИН(КоличествоОсталосьПогасить,СтрокаОстатка.КоличествоОстаток);			
			
			Если СтрокаОстатка.КоличествоОстаток <= КоличествоДок Тогда
				СтрокаОстатка.КоличествоОстаток = 0;
			Иначе
				СтрокаОстатка.КоличествоОстаток = СтрокаОстатка.КоличествоОстаток - КоличествоДок;
			КонецЕсли;
			
			КоличествоОсталосьПогасить = КоличествоОсталосьПогасить - КоличествоДок;
				
		КонецЦикла;
		
		Если КоличествоОсталосьПогасить > 0 И ВыводитьСообщения Тогда
			
			Если СтрокаДокумента.НомерГТД.Пустая() Тогда
				ПредставлениеНомераГТД = НСтр("ru = 'Пустой источник происхождения'");
			Иначе
				ПредставлениеНомераГТД = СтрокаДокумента.НомерГТД;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Реквизиты.СтруктурноеПодразделение) Тогда
				ТекстОшибки = НСтр("ru = 'Товары организаций (БУ). По организации %1 не списано %2 %3 товара <%4>, источник происхождения: <%5>, склад %6, структурное подразделение: %7.'");
			Иначе
				ТекстОшибки = НСтр("ru = 'Товары организаций (БУ). По организации %1 не списано %2 %3 товара <%4>, источник происхождения: <%5>, склад %6.'");
			КонецЕсли;
			
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ТекстОшибки,
				Реквизиты.Организация,
				КоличествоОсталосьПогасить,
				СтрокаДокумента.Товар.БазоваяЕдиницаИзмерения,
				СтрокаДокумента.Товар,
				ПредставлениеНомераГТД,
				СтрокаДокумента.Склад,
				Реквизиты.СтруктурноеПодразделение,
				);
				
			ПолеКоличество	= СтрокаДокумента.ИмяСписка + "[" + Формат(СтрокаДокумента.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].Количество";		
			
			Если НЕ КонтролироватьОстаток Тогда
												
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , , "Объект", Отказ);
				Отказ = Ложь;
				
			Иначе
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, Реквизиты.Регистратор, ПолеКоличество, "Объект", Отказ);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла; 	
	
КонецПроцедуры

Функция ПодготовитьТаблицуТоваровСУчетомСкладовВТЧ(ТаблицаОбъекта, ИспользоватьСкладИзШапки, СкладШапки) Экспорт
	ТаблицаТовары = ТаблицаОбъекта.Выгрузить();
	
	Если ТаблицаТовары.Колонки.Найти("Склад") = Неопределено Тогда
		ТаблицаТовары.Колонки.Добавить("Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"));
	КонецЕсли;
	
	Если ТаблицаТовары.Колонки.Найти("Коэффициент") = Неопределено Тогда
		ТаблицаТовары.Колонки.Добавить("Коэффициент", Новый ОписаниеТипов("Число"));
		ТаблицаТовары.ЗаполнитьЗначения(1, "Коэффициент");
	КонецЕсли; 
	           	
	ВедетсяУчетПоСкладам  = ?(ПланыСчетов.Типовой.Товары.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Склады, "ВидСубконто") = Неопределено, Ложь, Истина);
	
	Для Каждого СтрокаТовары Из ТаблицаТовары Цикл  		
		Если Не ЗначениеЗаполнено(СтрокаТовары.КлючСвязи) Тогда
			СтрокаТовары.КлючСвязи = ОбщегоНазначенияБККлиентСервер.НовыйКлючСвязиСтрокиТаблицы(ТаблицаТовары);
		КонецЕсли;	 
		
		Если  ВедетсяУчетПоСкладам Тогда			
			Если НЕ ЗначениеЗаполнено(СтрокаТовары.Склад) ИЛИ ИспользоватьСкладИзШапки Тогда
				СтрокаТовары.Склад = СкладШапки;		
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла; 
	
	Возврат ТаблицаТовары;
	
КонецФункции

Функция ПодготовитьТаблицуНомеровГТД(Товары, НомераГТД) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Товары", Товары);  	
	Запрос.УстановитьПараметр("НомераГТД", НомераГТД);
	Запрос.Текст = "ВЫБРАТЬ
	               |	Товары.Номенклатура,
	               |	Товары.КлючСвязи,
	               |	Товары.Склад,
	               |	Товары.Коэффициент,
	               |	Товары.НомерСтроки КАК НомерСтроки
	               |ПОМЕСТИТЬ Товары
	               |ИЗ
	               |	&Товары КАК Товары
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	НомераГТД.КлючСвязи,
	               |	НомераГТД.НомерГТД,
	               |	НомераГТД.НовыйНомерГТД,
	               |	НомераГТД.Количество
	               |ПОМЕСТИТЬ НомераГТД
	               |ИЗ
	               |	&НомераГТД КАК НомераГТД
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	НомераГТД.НомерГТД,
	               |	НомераГТД.Количество,
	               |	НомераГТД.КлючСвязи,
	               |	НомераГТД.НовыйНомерГТД,
	               |	Товары.Номенклатура,
	               |	Товары.Склад,
	               |	Товары.Коэффициент,
	               |	Товары.НомерСтроки КАК НомерСтроки
	               |ИЗ
	               |	НомераГТД КАК НомераГТД
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Товары КАК Товары
	               |		ПО НомераГТД.КлючСвязи = Товары.КлючСвязи
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	НомерСтроки,
	               |	Товары.КлючСвязи";
			   
		
	Если НомераГТД.Колонки.Найти("НовыйНомерГТД") = Неопределено  Тогда			
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "НомераГТД.НовыйНомерГТД,", "");		
	КонецЕсли;      	
	
	ТаблицаНомераГТД = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаНомераГТД;			   
	
КонецФункции


#КонецОбласти

#КонецОбласти

		