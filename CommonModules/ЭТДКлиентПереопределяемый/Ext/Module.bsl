
#Область ПрограммныйИнтерфейс

Процедура ОповеститьОЗавершенииДлительнойОперацииЭТД(Результат, ПараметрыОповещения) Экспорт

	Если ПараметрыОповещения.ИмяФормы = "Обработка.ОбменЭТД.Форма.РабочееМестоЭТД"
		ИЛИ ПараметрыОповещения.ИмяФормы = "Документ.ЭТД.Форма.ФормаДокумента" Тогда
		
		Если ПараметрыОповещения.Свойство("ДополнительныеОповещения") Тогда
			
			Для Каждого ДополнительноеОповещение Из ПараметрыОповещения.ДополнительныеОповещения Цикл
				Оповестить(ДополнительноеОповещение.Ключ, Результат, ПараметрыОповещения.ИмяФормы);
			КонецЦикла;
			
		Иначе
			
			Оповестить("ФоновоеЗаданиеЭТД", Результат, ПараметрыОповещения.ИмяФормы);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверятьОповещенияФоновогоЗадания(ЭтаФорма, РезультатРаботыЗадания) Экспорт

	Если РезультатРаботыЗадания = Неопределено
		ИЛИ НЕ ТипЗнч(РезультатРаботыЗадания) = Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если РезультатРаботыЗадания.Статус = "Выполнено" Тогда
		
		СообщенияПользователю = РезультатРаботыЗадания.Сообщения;
		
		Если СообщенияПользователю <> Неопределено Тогда
			Для Каждого СообщениеФоновогоЗадания Из СообщенияПользователю Цикл
				СообщениеФоновогоЗадания.ИдентификаторНазначения = ЭтаФорма.УникальныйИдентификатор;
				СообщениеФоновогоЗадания.Сообщить();
			КонецЦикла;
		КонецЕсли;
		
		ДополнительныеОповещения = ?(РезультатРаботыЗадания.Свойство("ДополнительныеОповещения"), РезультатРаботыЗадания.ДополнительныеОповещения, Новый Структура);
		Для Каждого ДополнительноеОповещение Из ДополнительныеОповещения Цикл
			Оповестить(ДополнительноеОповещение.Ключ, РезультатРаботыЗадания, ЭтаФорма);
		КонецЦикла;

	Иначе
	
		ПараметрыДлительнойОперации = Новый Структура;
		ПараметрыДлительнойОперации.Вставить("ИдентификаторЗадания", РезультатРаботыЗадания.ИдентификаторЗадания);
		ПараметрыДлительнойОперации.Вставить("ВыводитьОкноОжидания", Истина);
		ПараметрыДлительнойОперации.Вставить("АдресРезультата", РезультатРаботыЗадания.АдресРезультата);
		ПараметрыДлительнойОперации.Вставить("ВыводитьСообщения", Истина);
		
		Если РезультатРаботыЗадания.Свойство("ТекстСообщения") Тогда
			ПараметрыДлительнойОперации.Вставить("ТекстСообщения", РезультатРаботыЗадания.ТекстСообщения);
		КонецЕсли;
		
		ПараметрыОповещения = Новый Структура("ИмяФормы", ЭтаФорма.ИмяФормы);
		
		Если РезультатРаботыЗадания.Свойство("ДополнительныеОповещения") Тогда
			ПараметрыОповещения.Вставить("ДополнительныеОповещения", РезультатРаботыЗадания.ДополнительныеОповещения);
		КонецЕсли;
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОповеститьОЗавершенииДлительнойОперацииЭТД", ЭТДКлиентПереопределяемый, ПараметрыОповещения);
		
		ОткрытьФорму("ОбщаяФорма.ДлительнаяОперация", ПараметрыДлительнойОперации, ЭтаФорма,,,, ОписаниеОповещения);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнительныеСоглашенияМестоРаботыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка, Форма) Экспорт
	
	// БК
	СтандартнаяОбработка = Ложь;
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	ТекущиеДанные = Элементы.ДополнительныеСоглашения.ТекущиеДанные;
	
	СтруктураЗаписи = Новый Структура;
	
	СтруктураЗаписи.Вставить("Тип", ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Адрес"));
	
	СтруктураПредустановленныхЗначений = Новый Структура;
	СтруктураПредустановленныхЗначений.Вставить("Представление", ТекущиеДанные.МестоРаботы);
	СтруктураПредустановленныхЗначений.Свойство("Вид", НСтр("ru = 'Место работы сотрудника ЭТД'"));
	СтруктураПредустановленныхЗначений.Вставить("Объект", Объект.Автор);
	
	КонтактнаяИнформацияКлиент.ОткрытьФормуРедактированияЗаписиРегистра(
		  СтруктураЗаписи
		, Ложь
		, Форма
		, СтруктураПредустановленныхЗначений
		, Ложь
		, "ПослеЗакрытияРедактированиеМестоРаботыДополнительный");
	
КонецПроцедуры

Процедура ОсновныеДоговорыМестоРаботыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка, Форма) Экспорт
	
	// БК
	СтандартнаяОбработка = Ложь;
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	ТекущиеДанные = Элементы.ОсновныеДоговоры.ТекущиеДанные;
	
	СтруктураЗаписи = Новый Структура;
	СтруктураЗаписи.Вставить("Тип", ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Адрес"));
	
	СтруктураПредустановленныхЗначений = Новый Структура;
	СтруктураПредустановленныхЗначений.Вставить("Представление", ТекущиеДанные.МестоРаботы);
	СтруктураПредустановленныхЗначений.Вставить("Вид", НСтр("ru = 'Место работы сотрудника для ЭТД'"));
	СтруктураПредустановленныхЗначений.Вставить("Объект", Объект.Автор);
	
	КонтактнаяИнформацияКлиент.ОткрытьФормуРедактированияЗаписиРегистра(
		  СтруктураЗаписи
		, Ложь
		, Форма
		, СтруктураПредустановленныхЗначений
		, Ложь
		, "ПослеЗакрытияРедактированиеМестоРаботыОсновной");
	
КонецПроцедуры

Функция ПолучитьСписокВыбораДокументОснованиеЭТД() Экспорт
	
	Возврат ПолучитьСписокВыбораДокументОснованиеЭТДБК();
	
КонецФункции

Процедура ОткрытиеФормыВыбораВладельцаПрофиля(ВыбранныйЭлемент, Организация, Форма) Экспорт
	
	ОткрытиеФормыВыбораВладельцаПрофиляБК(ВыбранныйЭлемент, Организация, Форма);
	
КонецПроцедуры

Процедура ОткрытиеФормыВыбораСотрудника(Организация, Элемент) Экспорт
	
	ОткрытиеФормыВыбораСотрудникаБК(Организация, Элемент);
	
КонецПроцедуры

Процедура ОткрытиеФормыВыбораДокументаОснования(ВыбранныйЭлемент, Организация, Сотрудник, Форма) Экспорт
	
	ИмяОткрываемойФормы = ПолучитьИмяФормыВыбораДокументаОснованияБК(ВыбранныйЭлемент);
	Владелец = Неопределено;
	ТекущийЭлементИмя = Форма.ТекущийЭлемент.Имя;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма.Элементы, "ДокументОснование") Тогда
		Владелец = Форма.Элементы.ДокументОснование;
	ИначеЕсли ТекущийЭлементИмя = "ОсновныеДоговоры" Тогда
		Владелец = Форма.Элементы.ОсновныеДоговорыДокументОснование;
	ИначеЕсли ТекущийЭлементИмя = "ДополнительныеСоглашения" Тогда
		Владелец = Форма.Элементы.ДополнительныеСоглашенияДокументОснование;
	КонецЕсли;
	
	ФормаВыбора = ПолучитьФорму(ИмяОткрываемойФормы, , Владелец);

	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		ФормаВыбора.Список.КомпоновщикНастроек.Настройки.Отбор, "РаботникиОрганизации.Сотрудник", Сотрудник, , , Истина);

	ФормаВыбора.Открыть();
	
КонецПроцедуры

Процедура ОткрытиеФормыВыбораДолжностиПоШтатномуРасписанию(Организация, Элемент) Экспорт
	
	
	
КонецПроцедуры

Процедура УстановитьКомпонентуWSCrypto(СсылкаНаМодуль) Экспорт
	
	УстановитьКомпонентуWSCryptoБК(СсылкаНаМодуль);
	
КонецПроцедуры

Процедура ОсновныеДоговорыДокументОснованиеОбработкаВыбора(Элемент, ВыбранноеЗначение, ДополнительныеДанные, СтандартнаяОбработка, Форма) Экспорт
	
	ОсновныеДоговорыДокументОснованиеОбработкаВыбораБК(Элемент, ВыбранноеЗначение, ДополнительныеДанные, СтандартнаяОбработка, Форма);
	
КонецПроцедуры

Процедура ДополнительныеСоглашенияДокументОснованиеОбработкаВыбора(Элемент, ВыбранноеЗначение, ДополнительныеДанные, СтандартнаяОбработка, Форма) Экспорт
	
	ДополнительныеСоглашенияДокументОснованиеОбработкаВыбораБК(Элемент, ВыбранноеЗначение, ДополнительныеДанные, СтандартнаяОбработка, Форма);
	
КонецПроцедуры

// Возвращает признак необходимости отображать информацию о включенной серверной криптографии.
//
Функция ПоказыватьОповещенияСервернаяКриптография() Экспорт
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьСписокВыбораДокументОснованиеЭТДБК()
	
	СписокТипов = Новый СписокЗначений;
	СписокТипов.Добавить(Тип("ДокументСсылка.ПриемНаРаботуВОрганизацию"));
	СписокТипов.Добавить(Тип("ДокументСсылка.КадровоеПеремещениеОрганизаций"));
	
	Возврат СписокТипов;
	
КонецФункции

Процедура ОткрытиеФормыВыбораВладельцаПрофиляБК(ВыбранныйЭлемент, Организация, Форма)
	
	ПолеОтбора = "";
	Если ВыбранныйЭлемент.Значение = Тип("СправочникСсылка.СотрудникиОрганизаций") Тогда
		ИмяОткрываемойФормы = "Справочник.СотрудникиОрганизаций.ФормаВыбора";
		ПолеОтбора = "Организация";
	ИначеЕсли ВыбранныйЭлемент.Значение = Тип("СправочникСсылка.ДолжностиОрганизаций") Тогда
		ИмяОткрываемойФормы = "Справочник.ДолжностиОрганизаций.ФормаВыбора";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПолеОтбора) Тогда
		ПараметрыОтбора = Новый Структура(ПолеОтбора, Организация);
		ПараметрыФормы = Новый Структура("РежимВыбора, Отбор", Истина, ПараметрыОтбора);
	Иначе
		ПараметрыФормы = Новый Структура("РежимВыбора", Истина);
	КонецЕсли;
	Оповещение = Новый ОписаниеОповещения("ОбработкаВыбораВладельцаПрофиля", Форма);
	
	ОткрытьФорму(ИмяОткрываемойФормы, ПараметрыФормы, Форма, , , , Оповещение);
	
КонецПроцедуры

Процедура ОткрытиеФормыВыбораСотрудникаБК(Организация, Элемент)
	
	ПараметрыФормы = Новый Структура("РежимВыбора, ОтборОрганизация", Истина, Организация);
	ОткрытьФорму("Справочник.СотрудникиОрганизаций.ФормаСписка", ПараметрыФормы, Элемент);
	
КонецПроцедуры

Функция ПолучитьИмяФормыВыбораДокументаОснованияБК(ВыбранныйЭлемент)
	
	ИмяОткрываемойФормы = "";
	
	Если ВыбранныйЭлемент.Значение = Тип("ДокументСсылка.ПриемНаРаботуВОрганизацию") Тогда
		ИмяОткрываемойФормы = "Документ.ПриемНаРаботуВОрганизацию.ФормаВыбора";
	ИначеЕсли ВыбранныйЭлемент.Значение = Тип("ДокументСсылка.КадровоеПеремещениеОрганизаций") Тогда
		ИмяОткрываемойФормы = "Документ.КадровоеПеремещениеОрганизаций.ФормаВыбора";
	КонецЕсли;
	
	Возврат ИмяОткрываемойФормы;
	
КонецФункции

Процедура УстановитьКомпонентуWSCryptoБК(СсылкаНаМодуль)
	
	НачатьУстановкуВнешнейКомпоненты(Неопределено, СсылкаНаМодуль);
	
КонецПроцедуры

Процедура ОсновныеДоговорыДокументОснованиеОбработкаВыбораБК(Элемент, ВыбранноеЗначение, ДополнительныеДанные, СтандартнаяОбработка, Форма)
	
	СтандартнаяОбработка = Ложь;
	Элементы = Форма.Элементы;
	
	ОсновныеДоговорыТекущиеДанные = Элементы.ОсновныеДоговоры.ТекущиеДанные;
	ОсновныеДоговорыТекущиеДанные.ДокументОснование = ВыбранноеЗначение;
	
КонецПроцедуры

Процедура ДополнительныеСоглашенияДокументОснованиеОбработкаВыбораБК(Элемент, ВыбранноеЗначение, ДополнительныеДанные, СтандартнаяОбработка, Форма)
	
	СтандартнаяОбработка = Ложь;
	Элементы = Форма.Элементы;
	
	ДополнительныеСоглашенияТекущиеДанные = Элементы.ДополнительныеСоглашения.ТекущиеДанные;
	ДополнительныеСоглашенияТекущиеДанные.ДокументОснование = ВыбранноеЗначение;
	
КонецПроцедуры

#КонецОбласти
