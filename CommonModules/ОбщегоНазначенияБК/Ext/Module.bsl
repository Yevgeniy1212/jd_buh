////////////////////////////////////////////////////////////////////////////////
// ОбщегоНазначенияБК: 
//  
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Возвращает структуру параметров, необходимых для работы клиентского кода
// при запуске конфигурации, т.е. в обработчиках событий
// - ПередНачаломРаботыСистемы,
// - ПриНачалеРаботыСистемы
//
// Важно: при запуске недопустимо использовать команды сброса кэша
// повторно используемых модулей, иначе запуск может привести
// к непредсказуемым ошибкам и лишним серверным вызовам
//
// Параметры:
//   Параметры - Структура - (возвращаемое значение) структура параметров работы клиента при запуске.
//
// Пример реализации:
//   Для установки параметров работы клиента можно использовать шаблон:
//
//     Параметры.Вставить(<ИмяПараметра>, <код получения значения параметра>);
//
//
Процедура ПараметрыРаботыКлиентаПриЗапуске(Параметры) Экспорт
	
	Параметры.Вставить("ПоказатьЗапускОбработокОбновления", Обработки.ОбновлениеИнформационнойБазыБК.ЕстьРучныеОбработчикиОбновленияТребуещиеВыполнения());
	Параметры.Вставить("СинонимКонфигурации", Метаданные.Синоним);
	
	// Проверка ролей пользователей.
	ОписаниеОшибки = РолиПользователяНастроеныНекорректно();
	Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		Параметры.Вставить("РолиПользователяНастроеныНекорректно", ОписаниеОшибки);
		ВызватьИсключение ОписаниеОшибки;
	КонецЕсли;
	
	// Свертка базы (продолжение работы)
	Параметры.Вставить("ПоказатьСвертку", ТребуетсяОткрытьСверткуБазы());
	
КонецПроцедуры

// Возвращает головную организацию для заданной организации
// Если для организации реквизит ГоловнаяОрганизация не заполнен 
// это значит, что сама организация является голвной
//
// Параметры
//  Организация – СправочникСсылка.Организации
//
// Возвращаемое значение:
//   СправочникСсылка.Организации
//
Функция ГоловнаяОрганизация(Организация) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫБОР
	|		КОГДА Организации.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА Организации.Ссылка
	|		ИНАЧЕ Организации.ГоловнаяОрганизация
	|	КОНЕЦ КАК ГоловнаяОрганизация
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.Ссылка = &Организация
	|";
	
	Выборка = Запрос.Выполнить().Выбрать();

	Если Выборка.Следующий() Тогда
		Возврат Выборка.ГоловнаяОрганизация;

	Иначе
		Возврат Организация;

	КонецЕсли;

КонецФункции // ГоловнаяОрганизация()

// НЕ ИСПОЛЬЗОВАТЬ! Функция определяет необходимость отображать структурные подразделения
//
// Возвращаемое значение:
//     Булево - истина, если необходимо отображать структурные подразделения
//              ложь, если нет необходимости отображать структурные подразделения
Функция ПолучитьПризнакОтображенияСтруктурныхПодразделений() Экспорт
	
	ОтображениеСтруктурныхПодразделений = Константы.ПоддержкаРаботыСоСтруктурнымиПодразделениями.Получить();
	
	Возврат ОтображениеСтруктурныхПодразделений;
	
КонецФункции

// Функция определяет реквизиты организации или структурного подразделения
// 
Функция ПолучитьСтруктурнуюЕдиницу(Организация, СтруктурноеПодразделение, КадровыйДокумент = Ложь) Экспорт
	
	ВозвращаемаяОрганизация = Организация;
	Если КадровыйДокумент Тогда
		ГоловнаяОрганизация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ГоловнаяОрганизация");
		УчетПоГоловнойОрганизации = УчетнаяПолитикаСервер.ПолучитьПризнакВеденияУчетаПоГоловнойОрганизации(Организация);
		Если Организация <> ГоловнаяОрганизация И УчетПоГоловнойОрганизации Тогда
			ВозвращаемаяОрганизация = ГоловнаяОрганизация;
		КонецЕсли;

	Иначе
		УчетПоГоловнойОрганизации = Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктурноеПодразделение) Тогда
		Если УчетПоГоловнойОрганизации Тогда
			Возврат ВозвращаемаяОрганизация;
		Иначе
			Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктурноеПодразделение, "УказыватьРеквизитыГоловнойОрганизации") Тогда
				Возврат ВозвращаемаяОрганизация;
			Иначе
				Возврат СтруктурноеПодразделение;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Возврат ВозвращаемаяОрганизация;
	КонецЕсли;
		
КонецФункции // ПолучитьСтруктурнуюЕдиницу()

// Возвращает курс валюты на дату
//
// Параметры:
//  Валюта     - Валюта (элемент справочника "Валюты")
//  ДатаКурса  - Дата, на которую следует получить курс
//
// Возвращаемое значение: 
//  Структура, содержащая:
//   Курс      - курс валюты
//   Кратность - кратность валюты
//
Функция ПолучитьКурсВалюты(Валюта, ДатаКурса) Экспорт

	Структура = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(ДатаКурса, Новый Структура("Валюта", Валюта));
	Возврат Структура;
	
КонецФункции // ПолучитьКурсВалюты()

// функция получает рабочую дату
//
Функция ПолучитьРабочуюДату() Экспорт 
	
	Возврат ОбщегоНазначения.ТекущаяДатаПользователя();
	
КонецФункции // ПолучитьРабочуюДату() 

// Позволяет определить есть ли среди реквизитов шапки документа
// реквизит с переданным именем.
//
// Параметры: 
//  ИмяРеквизита - строковое имя искомого реквизита, 
//  МетаданныеДокумента - объект описания метаданных документа, среди реквизитов которого производится поиск.
//
// Возвращаемое значение:
//  Булево: Истина - нашли реквизит с таким именем, Ложь - не нашли.
//
Функция ЕстьРеквизитДокумента(ИмяРеквизита, МетаданныеДокумента) Экспорт

	Возврат НЕ (МетаданныеДокумента.Реквизиты.Найти(ИмяРеквизита) = Неопределено);

КонецФункции // ЕстьРеквизитДокумента()

// Позволяет определить есть ли среди реквизитов табличной части документа
// реквизит с переданным именем.
//
// Параметры: 
//  ИмяРеквизита - строковое имя искомого реквизита, 
//  МетаданныеДокумента - объект описания метаданных документа, среди реквизитов которого производится поиск.
//  ИмяТабЧасти  - строковое имя табличной части документа, среди реквизитов которого производится поиск
//
// Возвращаемое значение:
//  Истина - нашли реквизит с таким именем, Ложь - не нашли.
//
Функция ЕстьРеквизитТабЧастиДокумента(ИмяРеквизита, МетаданныеДокумента, ИмяТабЧасти) Экспорт

	ТабЧасть = МетаданныеДокумента.ТабличныеЧасти.Найти(ИмяТабЧасти);

	Если ТабЧасть = Неопределено Тогда // Нет такой таб. части в документе
		Возврат Ложь;

	Иначе
		Возврат НЕ (ТабЧасть.Реквизиты.Найти(ИмяРеквизита) = Неопределено);

	КонецЕсли;

КонецФункции // ЕстьРеквизитТабЧастиДокумента()

// Функция возвращает имя табличной части, к которой принадлежит переданная строка
//
// Параметры
//  СтрокаТабличнойЧасти - ссылка на строку табличной части
//
// Возвращаемое значение:
//   Строка - имя табличной части, как оно задано в конфигураторе
//
Функция ПолучитьИмяТабличнойЧастиПоСсылкеНаСтроку(СтрокаТабличнойЧасти) Экспорт

	Возврат Метаданные.НайтиПоТипу(ТипЗнч(СтрокаТабличнойЧасти)).Имя;

КонецФункции // ПолучитьИмяТабличнойЧастиПоСсылкеНаСтроку()

// Функция возвращает Истина, если в указанном объекте (плане/справочнике) существует 
// предопределенный элемент с заданным именем (план видов расчета, план видов характеристик, 
// план счетов, справочник)
//
// Параметры:
//	МетаданныеОбъекта - метаданные объекта, в котором искать
//	ИмяПредопределенного - строка с именем предопределенного вида для поиска
//
// Возвращаемое значение:
//	Истина, если предопределенный элемент есть, иначе Ложь
//
Функция ЕстьПредопределенныйЭлемент(ИмяПредопределенного, МетаданныеОбъекта) Экспорт

	ИмяОбъекта = ВРег(МетаданныеОбъекта.Имя);
	Если Метаданные.ПланыВидовРасчета.Найти(ИмяОбъекта) <> Неопределено Тогда
		ВидОбъекта = "ПланВидовРасчета";
		МенеджерОбъекта = ПланыВидовРасчета[ИмяОбъекта];
	ИначеЕсли Метаданные.ПланыВидовХарактеристик.Найти(ИмяОбъекта) <> Неопределено Тогда
		ВидОбъекта = "ПланВидовХарактеристик";
		МенеджерОбъекта = ПланыВидовХарактеристик[ИмяОбъекта];
	ИначеЕсли Метаданные.ПланыСчетов.Найти(ИмяОбъекта) <> Неопределено Тогда
		ВидОбъекта = "ПланСчетов";
		МенеджерОбъекта = ПланыСчетов[ИмяОбъекта];
	ИначеЕсли Метаданные.Справочники.Найти(ИмяОбъекта) <> Неопределено Тогда
		ВидОбъекта = "Справочник";
		МенеджерОбъекта = Справочники[ИмяОбъекта];
	Иначе
		Возврат Ложь;
	КонецЕсли;
		
	// составим запрос для выбора всех предопределенных элементов объекта
	Запрос = Новый Запрос;
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОбъектМетаданных.Ссылка
	|ИЗ
	|	" + ВидОбъекта + "." + ИмяОбъекта + " КАК ОбъектМетаданных
	|ГДЕ
	|	ОбъектМетаданных.Предопределенный
	|";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ИмяОчередногоПредопределенного = ВРег(МенеджерОбъекта.ПолучитьИмяПредопределенного(Выборка.Ссылка));
		Если ВРег(ИмяПредопределенного) = ИмяОчередногоПредопределенного Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;

	Возврат Ложь;

КонецФункции // ЕстьПредопределенныйЭлемент

// Выполняет движение по регистру.
//
// Параметры:
//  НаборДвижений   - набор движений регистра. 
//
Процедура ВыполнитьДвижениеПоРегистру(НаборДвижений, ВидДвижения = Неопределено,
									  ПустыеКолонкиСоставногоТипа = Неопределено, ЗаполнитьПериод = истина) Экспорт

	ТаблицаДвижений = НаборДвижений.мТаблицаДвижений;
	Если ТаблицаДвижений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ПустыеКолонкиСоставногоТипа = Неопределено Тогда
		ПустыеКолонкиСоставногоТипа = Новый Структура;
	КонецЕсли;
	
	//
	КолонкиТаблицы = ТаблицаДвижений.Колонки;
	
	//
	МетаРег = НаборДвижений.Метаданные();
	ИзмеренияСостТипа = Новый Структура;
	ИзмеренияСостТипаСтр = "";
	Для Каждого МетаИзм Из МетаРег.Измерения Цикл
		Если (МетаИзм.Тип.Типы().Количество() > 1)
		   И НЕ (ПустыеКолонкиСоставногоТипа.Свойство(МетаИзм.Имя)) Тогда
			Если не КолонкиТаблицы.Найти(МетаИзм.Имя)=Неопределено Тогда
				ИзмеренияСостТипа.Вставить(МетаИзм.Имя);
				ИзмеренияСостТипаСтр = ИзмеренияСостТипаСтр + ", " + МетаИзм.Имя;
			КонецЕсли; 
		КонецЕсли;
	КонецЦикла;
	Для Каждого МетаРек Из МетаРег.Реквизиты Цикл
		Если (МетаРек.Тип.Типы().Количество() > 1)
		   И НЕ (ПустыеКолонкиСоставногоТипа.Свойство(МетаРек.Имя)) Тогда
			Если не КолонкиТаблицы.Найти(МетаРек.Имя)=Неопределено Тогда
				ИзмеренияСостТипа.Вставить(МетаРек.Имя);
				ИзмеренияСостТипаСтр = ИзмеренияСостТипаСтр + ", " + МетаРек.Имя;
			КонецЕсли; 
			
		КонецЕсли;
	КонецЦикла;
	Для Каждого МетаРес Из МетаРег.Ресурсы Цикл
		Если (МетаРес.Тип.Типы().Количество() > 1)
		   И НЕ (ПустыеКолонкиСоставногоТипа.Свойство(МетаРес.Имя)) Тогда
			Если не КолонкиТаблицы.Найти(МетаРес.Имя)=Неопределено Тогда
				ИзмеренияСостТипа.Вставить(МетаРес.Имя);
				ИзмеренияСостТипаСтр = ИзмеренияСостТипаСтр + ", " + МетаРес.Имя;
			КонецЕсли; 
		КонецЕсли;
	КонецЦикла;
	
	Если ИзмеренияСостТипаСтр <> "" Тогда
		ИзмеренияСостТипаСтр = Сред(ИзмеренияСостТипаСтр, 3);
	КонецЕсли;
	
	ТипЧисло = Тип("Число");
	ТипСтрока = Тип("Строка");
	ТипДата = Тип("Дата");
	
	ЕстьПериод = НЕ ТаблицаДвижений.Колонки.Найти("Период") = Неопределено;

	Для Каждого СтрокаДвижения ИЗ ТаблицаДвижений Цикл
		Движение = НаборДвижений.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, СтрокаДвижения, ,ИзмеренияСостТипаСтр);
		
		Если ВидДвижения <> Неопределено Тогда
			Движение.ВидДвижения = ВидДвижения;
		КонецЕсли;
		
		Если НЕ ЗаполнитьПериод И ЕстьПериод И НЕ СтрокаДвижения.Период = '00010101000000' Тогда
			Движение.Период = СтрокаДвижения.Период;
		Иначе
			Движение.Период = НаборДвижений.мПериод;
		КонецЕсли; 
		Движение.Активность = Истина;
		
		Для Каждого КлючИЗначение ИЗ ИзмеренияСостТипа Цикл
			ЗначениеВКолонке = СтрокаДвижения[КлючИЗначение.Ключ];
			
			Если ЗначениеВКолонке = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ТипЗначенияВКолонке = ТипЗнч(ЗначениеВКолонке);
			
			Если ТипЗначенияВКолонке = ТипЧисло Тогда
				Если ЗначениеВКолонке = 0 Тогда
					Продолжить;
				КонецЕсли;
			ИначеЕсли ТипЗначенияВКолонке = ТипСтрока Тогда
				Если ЗначениеВКолонке = "" Тогда
					Продолжить;
				КонецЕсли;
			ИначеЕсли ТипЗначенияВКолонке = ТипДата Тогда
				Если ЗначениеВКолонке = '00010101000000' Тогда
					Продолжить;
				КонецЕсли;
			ИначеЕсли ЗначениеВКолонке.Пустая() Тогда
				Продолжить;
			КонецЕсли;
			
			Движение[КлючИЗначение.Ключ] = ЗначениеВКолонке;
			
		КонецЦикла;
		
	КонецЦикла;

КонецПроцедуры // ВыполнитьДвижениеПоРегистру()

// Формирует структуру, содержащую значения реквизитов шапки документа.
//
// Параметры: 
//  ДокументОбъект - объект документа для формирования структуры шапки, 
//
// Возвращаемое значение:
//  Сформированная структура.
//
Функция СформироватьСтруктуруШапкиДокумента(ДокументОбъект) Экспорт
	
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();

	//Первоначальные данные о документе
	СтруктураШапкиДокумента = Новый Структура;
	СтруктураШапкиДокумента.Вставить("Ссылка", ДокументОбъект.Ссылка);
	СтруктураШапкиДокумента.Вставить("Дата",   ДокументОбъект.Дата);
	СтруктураШапкиДокумента.Вставить("Номер",  ДокументОбъект.Номер);

	МетаданныеДокумента = ДокументОбъект.Метаданные();
	СтруктураШапкиДокумента.Вставить("ВидДокумента",  МетаданныеДокумента.Имя);
	СтруктураШапкиДокумента.Вставить("ПредставлениеВидаДокумента",  МетаданныеДокумента.Представление());
	
	Для каждого Реквизит из МетаданныеДокумента.Реквизиты Цикл
		СтруктураШапкиДокумента.Вставить(Реквизит.Имя, ДокументОбъект[Реквизит.Имя]);
		Если Реквизит.Имя = "Организация" Тогда
			СтруктураШапкиДокумента.Вставить("ГоловнаяОрганизация", ГоловнаяОрганизация(ДокументОбъект[Реквизит.Имя]));
		КонецЕсли;	
	КонецЦикла;

	//Отображение данных о валютах
	СтруктураШапкиДокумента.Вставить("ВалютаРегламентированногоУчета", ВалютаРегламентированногоУчета);	

	Если СтруктураШапкиДокумента.Свойство("ВалютаДокумента") Тогда
		СтруктураШапкиДокумента.Вставить("КурсДокумента",      КурсДокумента(ДокументОбъект, ВалютаРегламентированногоУчета));
		СтруктураШапкиДокумента.Вставить("КратностьДокумента", КратностьДокумента(ДокументОбъект, ВалютаРегламентированногоУчета));

	КонецЕсли;
	
	//Отображение обязательных данных о договоре
	Если СтруктураШапкиДокумента.Свойство("ДоговорКонтрагента") Тогда

		Если ТипЗнч(СтруктураШапкиДокумента.ДоговорКонтрагента) = Тип("СправочникСсылка.ДоговорыКонтрагентов") тогда

			СтруктураШапкиДокумента.Вставить("ВедениеВзаиморасчетов",    СтруктураШапкиДокумента.ДоговорКонтрагента.ВедениеВзаиморасчетов);
			СтруктураШапкиДокумента.Вставить("ВалютаВзаиморасчетов",     СтруктураШапкиДокумента.ДоговорКонтрагента.ВалютаВзаиморасчетов);

		КонецЕсли;

	КонецЕсли;

	Возврат СтруктураШапкиДокумента;

КонецФункции // СформироватьСтруктуруШапкиДокумента()

// Функция производит поиск документа заданного вида, имеющего значение реквизита "ДокументОснование", равное
// переданной ссылке.
//
// Параметры:
//  ДокументСсылка  - ссылка на документ, для которого надо найти подчиненный документ,
//  ВидСчетаФактуры - строка, вид документа, по умолчанию "СчетФактураВыданный"
//
// Возвращаемое значение:
//  Если нашли, то возвращаем ссылку, не нашли - Неопределено
//
Функция НайтиПодчиненныйДокумент(ДокументСсылка, ВидДокумента = "СчетФактураВыданный") Экспорт

	НайденныйДокумент = Неопределено;
	
	Если ЗначениеЗаполнено(ДокументСсылка) Тогда 
		Запрос = Новый Запрос;
		
		// Установим параметры запроса
		Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
		
		Если ВидДокумента = "СчетФактураВыданный"  ИЛИ ВидДокумента = "СчетФактураПолученный" Тогда
			// исключаем из данных неактуальные (аннулированные и отозванные СФ)
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ТЧ_Документов.Ссылка
			|ПОМЕСТИТЬ ВТ_ПодчиненныеДокументы
			|ИЗ
			|	Документ." + ВидДокумента + ".ДокументыОснования КАК ТЧ_Документов
			|ГДЕ
			|	ТЧ_Документов.ДокументОснование = &ДокументСсылка
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ПодчиненныеДокументы.Ссылка
			|ИЗ
			|	ВТ_ПодчиненныеДокументы КАК ПодчиненныеДокументы
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаФактурыПрекратившиеДействие.СрезПоследних(
			|				,
			|				СчетФактура В
			|					(ВЫБРАТЬ
			|						ВТ_ПодчиненныеДокументы.Ссылка
			|					ИЗ
			|						ВТ_ПодчиненныеДокументы КАК ВТ_ПодчиненныеДокументы)) КАК СчетаФактурыПрекратившиеДействие
			|		ПО ПодчиненныеДокументы.Ссылка = СчетаФактурыПрекратившиеДействие.СчетФактура
			|ГДЕ
			|	СчетаФактурыПрекратившиеДействие.СчетФактура ЕСТЬ NULL ";
		Иначе
			Запрос.Текст = 
			
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Ссылка 
			|ИЗ
			|	Документ." + ВидДокумента + "
			|
			|ГДЕ
			|	ДокументОснование = &ДокументСсылка";
			
		КонецЕсли;
		
		ВыборкаИзЗапроса = Запрос.Выполнить().Выбрать();
		
		Если ВыборкаИзЗапроса.Следующий() Тогда
			НайденныйДокумент = ВыборкаИзЗапроса.Ссылка;
		КонецЕсли;
		
	КонецЕсли;

	Возврат НайденныйДокумент;

КонецФункции // НайтиПодчиненныйДокумент()

// Функция производит поиск массива документов заданного вида, имеющего значение реквизита "ДокументОснование", равное
// переданной ссылке.
//
// Параметры:
//  ДокументСсылка  - ссылка на документ, для которого надо найти подчиненный документ,
//  ВидДокумента - строка, вид документа
// Возвращаемое значение:
//  Если нашли, то возвращаем массив ссылок, не нашли - Неопределено
//
Функция НайтиМассивПодчиненныхДокументов(ДокументСсылка, ВидДокумента, ТолькоНеУдаленные = Ложь) Экспорт
	
	Запрос = Новый Запрос;
		
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);

	Запрос.Текст = 
	
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Ссылка 
			|ИЗ
			|	Документ." + ВидДокумента + "
			|
			|ГДЕ
			|	ДокументОснование = &ДокументСсылка"
			+ ?(ТолькоНеУдаленные, " И НЕ ПометкаУдаления", "");
			
	РезультатЗапроса = Запрос.Выполнить();
	МассивДокументов = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка"); 	
	
	Возврат МассивДокументов;

КонецФункции

// Формирует сообщение при ошибках проведения документов.
//
// Параметры: 
//  ТекстСообщения - Исходный текст, выводимого сообщения,
//  Отказ          - Флаг отказа в проведении докумета,
//  Заголовок      - Заголовок начала серии сообщений об ошибках проведения (не обязательный)
//
Процедура ОшибкаПриПроведении(ТекстСообщения, Отказ, Заголовок="") Экспорт

	ОбщегоНазначенияБККлиентСервер.СообщитьОбОшибке(ТекстСообщения, Отказ, Заголовок);

КонецПроцедуры // ОшибкаПриПроведении()

// Проверяет принадлежность документа к видам учета
//
// Параметры: 
//  СтруктураШапкиДокумента - структура, содержащая реквизиты шапки документа
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//  МожетБытьТолькоНалоговый- строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок, МожетБытьТолькоНалоговый = Ложь) Экспорт
	
	Перем Упр, Бух, Нал;
	
	ЕстьУпр = СтруктураШапкиДокумента.Свойство("ОтражатьВУправленческомУчете", Упр);
	ЕстьБух = СтруктураШапкиДокумента.Свойство("ОтражатьВБухгалтерскомУчете", Бух);
	Если Не ЕстьБух Тогда
		Бух = Истина;
	КонецЕсли;
	ЕстьНал = СтруктураШапкиДокумента.Свойство("УчитыватьКПН", Нал);
	
	Если ЕстьУпр ИЛИ ЕстьБух ИЛИ ЕстьНал Тогда
		Если НЕ МожетБытьТолькоНалоговый Тогда
			Если Упр <> Истина И Бух <> Истина  Тогда
				ОшибкаПриПроведении(НСтр("ru = 'Документ должен принадлежать хотя бы одному из видов учета: ""Управленческий"" и (или)  ""Бухгалтерский"".'"), Отказ, Заголовок);
			ИначеЕсли Бух <> Истина И Нал = Истина Тогда
				ОшибкаПриПроведении(НСтр("ru = 'Документ не может проводиться  по налоговому учету, если он не проводится по бухгалтерскому учету.'") , Отказ, Заголовок);
			КонецЕсли;
		Иначе
			Если Упр <> Истина И Бух <> Истина И Нал <> Истина Тогда
				ОшибкаПриПроведении(НСтр("ru = 'Документ должен принадлежать хотя бы одному из видов учета: ""Управленческий"", ""Бухгалтерский"", ""Налоговый"".'"), Отказ, Заголовок);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  ДокументОбъект             - объект проводимого документа, 
//  СтруктураОбязательныхПолей - структура, содержащая имена полей, которые собственно и надо проверить.
//  Отказ                      - флаг отказа в проведении.
//  Заголовок                  - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапкиДокумента(ДокументОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок) Экспорт

	ТипыПланыСчетов     = ПланыСчетов.ТипВсеСсылки();
	МетаданныеРеквизиты = ДокументОбъект.Метаданные().Реквизиты;

	Для каждого КлючЗначение Из СтруктураОбязательныхПолей Цикл

		Значение = ДокументОбъект[КлючЗначение.Ключ];
		ПредставлениеРеквизита = МетаданныеРеквизиты[КлючЗначение.Ключ].Представление();

		Если НЕ ЗначениеЗаполнено(Значение) Тогда // надо ругаться

			Если НЕ ЗначениеЗаполнено(КлючЗначение.Значение) Тогда //стандартное ругательство
				СтрокаСообщения = СтрШаблон(НСтр("ru = 'Не заполнено значение реквизита ""%1""!'"), СокрЛП(ПредставлениеРеквизита));
			Иначе
				СтрокаСообщения = КлючЗначение.Значение;
			КонецЕсли;

			ОшибкаПриПроведении(СтрокаСообщения, Отказ, Заголовок);

		ИначеЕсли ТипыПланыСчетов.СодержитТип(ТипЗнч(Значение)) тогда

			Если Значение.ЗапретитьИспользоватьВПроводках Тогда
				СтрокаСообщения = СтрШаблон(НСтр("ru = 'Реквизит ""%1"" : счет %2 ""%3"" нельзя использовать в проводках.'"), СокрЛП(ПредставлениеРеквизита), СокрЛП(Значение), Значение.Наименование);
				ОшибкаПриПроведении(СтрокаСообщения, Отказ, Заголовок);

			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

	Если СтруктураОбязательныхПолей.Свойство("Организация") и СтруктураОбязательныхПолей.Свойство("ДоговорКонтрагента") тогда

		// Если в документе есть организация и договор - провести проверку на соответствие
		//Организация в документе должна совпадать с организацией, указанной в договоре взаиморасчетов.
		Организация = ДокументОбъект.Организация;
		ДоговорКонтрагента = ДокументОбъект.ДоговорКонтрагента;
		Если ТипЗнч(ДоговорКонтрагента) = Тип("СправочникСсылка.ДоговорыКонтрагентов") тогда
			ПроверитьСоответствиеОрганизацииДоговоруВзаиморасчетов(Организация, ДоговорКонтрагента, ДоговорКонтрагента.Организация, Отказ, Заголовок);
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеШапкиДокумента()

// Проверяет правильность заполнения строк табличной части документа.
// Если какой-то из реквизтов, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
//
// Параметры:
//  ДокументОбъект             - объект проводимого документа, 
//  ИмяТабличнойЧасти          - табличная часть документа,
//  СтруктураОбязательныхПолей - структура, содержащая имена полей, которые собственно и надо проверить.
//  Отказ                      - флаг отказа в проведении.
//  Заголовок                  - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧасти(ДокументОбъект, ИмяТабличнойЧасти, СтруктураОбязательныхПолей, 
											Отказ, Заголовок, ВыводитьНомераСтрокВСообщении = Истина) Экспорт

	ПредставлениеТабличнойЧасти = ДокументОбъект.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Представление();

	ТабличнаяЧасть      = ДокументОбъект[ИмяТабличнойЧасти];
	МетаданныеРеквизиты = ДокументОбъект.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Реквизиты;
		
	СтрокаНачалаСообщенияОбОшибке = "";
	
	// Цикл по строкам табличной части.
	Для каждого СтрокаТаблицы Из ТабличнаяЧасть Цикл    
		СтрокаНачалаСообщенияОбОшибке = СтрШаблон(НСтр("ru = 'В строке номер ""%1"" табличной части ""%2"": '"), СокрЛП(СтрокаТаблицы.НомерСтроки), ПредставлениеТабличнойЧасти);
		// Цикл по проверяемым полям
		Для каждого КлючЗначение Из СтруктураОбязательныхПолей Цикл

			Значение = СтрокаТаблицы[КлючЗначение.Ключ];
			Если НЕ ЗначениеЗаполнено(Значение) Тогда // надо ругаться

				Если НЕ ЗначениеЗаполнено(КлючЗначение.Значение) Тогда //стандартное ругательство
					ПредставлениеРеквизита = МетаданныеРеквизиты[КлючЗначение.Ключ].Представление();
					СтрокаСообщения = СтрШаблон(НСтр("ru = 'Не заполнено значение реквизита ""%1""!'"), СокрЛП(ПредставлениеРеквизита));

				Иначе
					СтрокаСообщения = КлючЗначение.Значение;

				КонецЕсли;

				ОшибкаПриПроведении(?(ВыводитьНомераСтрокВСообщении, СтрокаНачалаСообщенияОбОшибке, "")
										+ СтрокаСообщения, Отказ, Заголовок);

			КонецЕсли;

		КонецЦикла;		

	КонецЦикла;

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧасти()

// Проверяет, что организация в документе совпадает с организацией, указанной в договоре взаиморасчетов.
//  при несовпадении устанавливается флаг отказа в проведении.
//
// Параметры:
//  Организация			- ссылка на организацию, выбранную в документе,
//  ДоговорКонтрагента	- ссылка на договор, выбранный в документе,
//  ДоговорОрганизация	- ссылка на Организацию, выбранную в договоре,
//  Отказ				- флаг отказа в проведении.
//  Заголовок			- строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьСоответствиеОрганизацииДоговоруВзаиморасчетов(Организация, ДоговорКонтрагента, 
																 ДоговорОрганизация, Отказ, Заголовок) Экспорт

	// Если не заполнен договор или организация, то не ругаемся
	Если ЗначениеЗаполнено(Организация) 
	   И ЗначениеЗаполнено(ДоговорКонтрагента)
	   И Организация <> ДоговорОрганизация Тогда

		ОбщегоНазначенияБККлиентСервер.СообщитьОбОшибке(НСтр("ru = 'Выбран договор контрагента, не соответстветствующий организации, указанной в документе!'"), Отказ, Заголовок);

	КонецЕсли;

КонецПроцедуры // ПроверитьСоответствиеОрганизацииДоговоруВзаиморасчетов()

// Процедура устанавливает номер документа.
//
// Параметры:
//  ДокументОбъект  - ДокументОбъект. Экземпляр документа, которому 
//                    необходимо присвоить новый номер
//
Процедура УстановитьНомерДокумента(ДокументОбъект) Экспорт

	// Если  нет реквизита "Организация" или для нее не задан префикс, то 
	// используем пустой префикс,
	// иначе используем префикс организации.
	МетаданныеДокумента = ДокументОбъект.Метаданные();

	Если Не ЕстьРеквизитДокумента("Организация", МетаданныеДокумента)
	 Или НЕ ЗначениеЗаполнено(ДокументОбъект.Организация.Префикс) Тогда

		ДокументОбъект.УстановитьНовыйНомер("00");

	Иначе

		ДокументОбъект.УстановитьНовыйНомер(ДокументОбъект.Организация.Префикс);

	КонецЕсли;

КонецПроцедуры // УстановитьНомерДокумента()
					 
// Процедура обрабатывает событие ПриКопирование документа
// Перднозначена для очистки общих реквизитов при копировании документа
Процедура ПриКопированиеДокументаОчисткаОбщихРеквизитов(Источник, ОбъектКопирования) Экспорт
	
	Если Источник.Метаданные().Реквизиты.Найти("Автор") <> Неопределено Тогда 
		Источник.Автор = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	Если Источник.Метаданные().Реквизиты.Найти("РучнаяКорректировка") <> Неопределено Тогда 
		Источник.РучнаяКорректировка = Ложь
	КонецЕсли;
	
	Если Источник.Метаданные().Реквизиты.Найти("ДокументОснование") <> Неопределено Тогда 
		Источник.ДокументОснование = Неопределено
	КонецЕсли;
	
	Если Источник.Метаданные().Реквизиты.Найти("СтруктурноеПодразделение") <> Неопределено Тогда 
		Если НЕ ПолучитьПризнакОтображенияСтруктурныхПодразделений() Тогда 
			Источник.СтруктурноеПодразделение = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура обрабатывает событие ПередЗаписью документа
// Перднозначена для очистки реквизита РучнаяКорректировка в случае отмены проведения документа
//
Процедура ПередЗаписьюДокументаОчисткаРеквизитаРучнаяКорректировка(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если (Источник.РучнаяКорректировка) И (РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения) Тогда 
		Источник.РучнаяКорректировка = Ложь
	КонецЕсли;	
	
КонецПроцедуры

// Определяет курс документа, который равен либо курсу документа (если в документе он существует),
// либо курсу взаиморасчетов, либо 1.
//
// Параметры: 
//  ДокументОбъект                 - объект документа, курс которого надо получить
//  ВалютаРегламентированногоУчета - валюта регламентированного учета
//
// Возвращаемое значение:
//  Число - курс документа.
//
Функция КурсДокумента(ДокументОбъект, ВалютаРегламентированногоУчета) Экспорт

	МетаданныеДокумента = ДокументОбъект.Ссылка.Метаданные();

	// Если валюта документа совпадает с валютой регл. учета, то курс 1.
	Если ЕстьРеквизитДокумента("ВалютаДокумента", МетаданныеДокумента) Тогда
		
		Если ДокументОбъект.ВалютаДокумента <> ВалютаРегламентированногоУчета Тогда
		
			// Если есть реквизит КурсДокумента - его и вернем
			Если ЕстьРеквизитДокумента("КурсДокумента", МетаданныеДокумента) Тогда
				Возврат ДокументОбъект.КурсДокумента;
			КонецЕсли;

			// Если нет КурсДокумента и валюта документа не совпадает с валютой регл. учета, 
			// то такой документ может быть выписан только в валюте взаиморасчетов,
			// если есть реквизит КурсВзаиморасчетов - его и вернем.
			Если ЕстьРеквизитДокумента("КурсВзаиморасчетов", МетаданныеДокумента) Тогда
				Возврат ДокументОбъект.КурсВзаиморасчетов;
			КонецЕсли;

			// Если нет КурсВзаиморасчетов и валюта документа не совпадает с валютой регл. учета, 
			// то КурсВзаиморасчетов долежн быть в табличной части документа или может вообще отсутсвовать.
			// Тогда возьмем курс из справочника на дату документа.
			Возврат ПолучитьКурсВалюты(ДокументОбъект.ВалютаДокумента,ДокументОбъект.Дата).Курс;

		КонецЕсли;
		
	КонецЕсли;

	Возврат 1;

КонецФункции // КурсДокумента()

// Определяет кратность документа, которая равен либо кратности документа (если в документе она существует),
// либо кратности взаиморасчетов, либо 1.
//
// Параметры: 
//  ДокументОбъект - объект документа, курс которого надо получить
//  ВалютаРегламентированногоУчета - валюта регламентированного учета
//
// Возвращаемое значение:
//  Число - кратность валюты в документе.
//
Функция КратностьДокумента(ДокументОбъект, ВалютаРегламентированногоУчета) Экспорт

	МетаданныеДокумента = ДокументОбъект.Ссылка.Метаданные();

	Если ЕстьРеквизитДокумента("ВалютаДокумента", МетаданныеДокумента) Тогда

		// Если валюта документа совпадает с валютой регл. учета, то кратность 1.
		Если ДокументОбъект.ВалютаДокумента <> ВалютаРегламентированногоУчета Тогда

			// Если есть реквизит КратностьДокумента - его и вернем
			Если ЕстьРеквизитДокумента("КратностьДокумента", МетаданныеДокумента) Тогда
				Возврат ДокументОбъект.КратностьДокумента;
			КонецЕсли;

			// Если нет КратностьДокумента и валюта документа не совпадает с валютой регл. учета, 
			// то такой документ может быть выписан только в валюте взаиморасчетов,
			// если есть реквизит КратностьВзаиморасчетов - его и вернем.
			Если ЕстьРеквизитДокумента("КратностьВзаиморасчетов", МетаданныеДокумента) Тогда
				Возврат ДокументОбъект.КратностьВзаиморасчетов;
			КонецЕсли;

			// Если нет КратностьВзаиморасчетов и валюта документа не совпадает с валютой регл. учета, 
			// то КратностьВзаиморасчетов должна быть в табличной части документа или может вообще отсутсвовать.
			// Тогда возьмем Кратность из справочника на дату документа.
			Возврат ПолучитьКурсВалюты(ДокументОбъект.ВалютаДокумента,ДокументОбъект.Дата).Кратность;

		КонецЕсли;
	
	КонецЕсли;

	Возврат 1;

КонецФункции // КратностьДокумента()

// В качестве параметра КонтрагентОрганизация может выступать
// Ссылка на элемент справочника Контрагенты, ссылка на элемент справочника Организация либо Структура (подготовленная с помошью функции ОписаниеОрганизации)
//
Функция ПолучитьРегистрационныйНомерОрганизацииКонтрагентаВПечатнуюФорму(КонтрагентОрганизация, Дата, ВыводитьОписание = Истина, ПредставлениеРНН_БИН = "", КодЯзыка = "ru", ВыводитьРННиБИН = Ложь, ВыводитьБИНИИНВместе = Ложь) Экспорт
	
	РегистрационныйНомерСтрока = "";
	ЗначениеБИН = "";
	ЗначениеЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо;
	ПризнакВыводаРеквизитовНЕрезидентов = Ложь;
	ЗначениеНомераРегистрацииВСтранеРезидентства = "";
	ЗначениеСтраныТС = Справочники.СтраныУчастникиТаможенногоСоюза.ПустаяСсылка();
	
	Если ТипЗнч(КонтрагентОрганизация) = Тип("СправочникСсылка.Организации") Тогда
		ЗначениеБИН			= КонтрагентОрганизация.ИдентификационныйНомер;
		ЗначениеЮрФизЛицо 	= КонтрагентОрганизация.ЮрФизЛицо;
		ЗначениеНомераРегистрацииВСтранеРезидентства = СокрЛП(КонтрагентОрганизация.КодВСтранеРегистрации);
		ЗначениеСтраныТС	= КонтрагентОрганизация.СтранаРегистрации.УчастникТаможенногоСоюза;
	ИначеЕсли	ТипЗнч(КонтрагентОрганизация) = Тип("СправочникСсылка.Контрагенты")   Тогда
		ЗначениеБИН			= КонтрагентОрганизация.ИдентификационныйКодЛичности;
		ЗначениеЮрФизЛицо 	= КонтрагентОрганизация.ЮрФизЛицо;		
		ЗначениеНомераРегистрацииВСтранеРезидентства = СокрЛП(КонтрагентОрганизация.НомерНалоговойРегистрацииВСтранеРезидентства);
		ЗначениеСтраныТС							 = КонтрагентОрганизация.СтранаРезидентства.УчастникТаможенногоСоюза;
	ИначеЕсли	ТипЗнч(КонтрагентОрганизация) = Тип("Структура") И  КонтрагентОрганизация.Свойство("БИН_ИИН")  И  КонтрагентОрганизация.Свойство("ЮрФизЛицо") Тогда	
		ЗначениеБИН			= КонтрагентОрганизация.БИН_ИИН;
		ЗначениеЮрФизЛицо 	= КонтрагентОрганизация.ЮрФизЛицо;		
		Если КонтрагентОрганизация.Свойство("НомерРегистрацииВСтранеРезидентства") Тогда
			ЗначениеНомераРегистрацииВСтранеРезидентства = КонтрагентОрганизация.НомерРегистрацииВСтранеРезидентства;
		КонецЕсли;	
		Если КонтрагентОрганизация.Свойство("СтранаРезидентстваУчастникТаможенногоСоюза") Тогда
			ЗначениеСтраныТС = КонтрагентОрганизация.СтранаРезидентстваУчастникТаможенногоСоюза;
		КонецЕсли;	
	Иначе
		// не соответствующий тип в параметрах функции
		Возврат РегистрационныйНомерСтрока;
	КонецЕсли;	
	//
	
	// Проверка настроек системы по выводу РНН и БИН
	ДатаПрекращенияВыводаРНН 	= Константы.ДатаПрекращенияВыводаРННВПервичныхДокументах.Получить();
	ДатаНачалаВыводаБИН_ИИН 	= Константы.ДатаНачалаВыводаБИН_ИИНВПервичныхДокументах.Получить();
	
	ВыводитьРНН = НЕ ЗначениеЗаполнено(ДатаПрекращенияВыводаРНН) ИЛИ Дата<ДатаПрекращенияВыводаРНН;
	ВыводитьБИНвСФ = ЗначениеЗаполнено(ДатаНачалаВыводаБИН_ИИН) И Дата>=ДатаНачалаВыводаБИН_ИИН И ВыводитьРННиБИН;
	ВыводитьБИН = НЕ ВыводитьРНН;
	ВыводитьИНН_УНП = Ложь;
	
	ТекстРНН = "ru = ""РНН""; kz = ""СТН""";
	ТекстБИН = "ru = ""БИН""; kz = ""БСН""";
	ТекстИИН = "ru = ""ИИН""; kz = ""ЖСН""";
	ТекстИНН_УНП = "ru = ""ИИН""; kz = ""ЖСН""";
		
	Если Дата >= Дата(2010,7,1) Тогда // с 1 июля выводим данные о УНП, ИНН/КПП для РБ и РФ
		Если ЗначениеСтраныТС = Справочники.СтраныУчастникиТаможенногоСоюза.Беларусь Тогда
			ВыводитьИНН_УНП = Истина;
			ТекстИНН_УНП = "ru = ""УНП""; kz = ""УНП""";
		ИначеЕсли ЗначениеСтраныТС = Справочники.СтраныУчастникиТаможенногоСоюза.Россия Тогда
			ВыводитьИНН_УНП = Истина;
			ТекстИНН_УНП = "ru = ""ИНН/КПП""; kz = ""ИНН/КПП""";
		КонецЕсли;
		Если ВыводитьИНН_УНП = Истина Тогда
			// Для РФ и РБ выводим ЬИН только если они указаны для контрагента
			ВыводитьРНН = ВыводитьРНН И ЗначениеЗаполнено(КонтрагентОрганизация.РНН);
			ВыводитьБИН = ВыводитьБИН И ЗначениеЗаполнено(ЗначениеБИН);
			
			ПредставлениеИНН_УНП = НСТР(ТекстИНН_УНП, КодЯзыка);
		КонецЕсли;	
	КонецЕсли; 
	
	// Вывод стандартных РНН и БИН
	Если ВыводитьРНН Тогда
		РегистрационныйНомерСтрока = ?(ВыводитьОписание, НСТР(ТекстРНН, КодЯзыка) + ": ","") + КонтрагентОрганизация.РНН;
		ПредставлениеРНН_БИН = НСТР(ТекстРНН, КодЯзыка);
	КонецЕсли;	
	
	Если ВыводитьБИН ИЛИ (ВыводитьБИНвСФ И НЕ ВыводитьБИН) Тогда
		// Вывод разделительной запятой
		Если ЗначениеЗаполнено(РегистрационныйНомерСтрока) Тогда
			РегистрационныйНомерСтрока = РегистрационныйНомерСтрока + ", ";
			ПредставлениеРНН_БИН = ПредставлениеРНН_БИН + ", ";
		КонецЕсли;
				
		Если ВыводитьБИНИИНВместе Тогда
			НазваниеИдентификационногоНомера = НСТР(ТекстИИН, КодЯзыка) + " (" + НСТР(ТекстБИН, КодЯзыка) + ")";
		Иначе
			НазваниеИдентификационногоНомера = НСТР(ТекстБИН, КодЯзыка);
			Если ЗначениеЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
				НазваниеИдентификационногоНомера = НСТР(ТекстИИН, КодЯзыка);
			КонецЕсли;				
		КонецЕсли;
					
		Если ВыводитьОписание Тогда
			РегистрационныйНомерСтрока = РегистрационныйНомерСтрока +  НазваниеИдентификационногоНомера + ": ";
		КонецЕсли;
		
		ПредставлениеРНН_БИН = ПредставлениеРНН_БИН + НазваниеИдентификационногоНомера;		
		
		РегистрационныйНомерСтрока = РегистрационныйНомерСтрока + ЗначениеБИН;			
	КонецЕсли;		
		
	// с 1 июля выводим данные о УНП, ИНН/КПП для РБ и РФ
	Если ВыводитьИНН_УНП Тогда
		// Вывод разделительной запятой
		Если ЗначениеЗаполнено(РегистрационныйНомерСтрока) Тогда
			РегистрационныйНомерСтрока = РегистрационныйНомерСтрока + ", ";
			ПредставлениеРНН_БИН = ПредставлениеРНН_БИН + ", ";
		КонецЕсли;
		НазваниеИдентификационногоНомера = НСТР(ТекстИНН_УНП, КодЯзыка);
		
		Если ВыводитьОписание Тогда
			РегистрационныйНомерСтрока = РегистрационныйНомерСтрока +  НазваниеИдентификационногоНомера + ": ";
		КонецЕсли;
		
		ПредставлениеРНН_БИН = ПредставлениеРНН_БИН + НазваниеИдентификационногоНомера;		
		
		РегистрационныйНомерСтрока = РегистрационныйНомерСтрока + ЗначениеНомераРегистрацииВСтранеРезидентства;			
	КонецЕсли;	
		
	Возврат РегистрационныйНомерСтрока;
	
КонецФункции // ПолучитьРегистрационныйНомерОрганизацииКонтрагентаВПечатнуюФорму

// Функция возвращает Истина, если в базе существует хотя бы один проведенный документ,
// в котором содержится ссылка на переданный документ ДокументПоиска
//
Функция СуществуютПроведенныеДокументыВведенныеНаОсновании(ДокументПоиска) Экспорт

	ТекстЗапроса = "";
	ТипДокументаПоиска = ТипЗнч(ДокументПоиска);

	МетаданныеДокументы = Метаданные.Документы;
	Для Каждого Док Из МетаданныеДокументы Цикл
		
		Если НЕ ПравоДоступа("Чтение", Док) Тогда
			Продолжить;
		КонецЕсли;
	
		// просмотр всех реквизитов на возможность наличия ссылки на ДокументПоиска
		ТекстГде = "";
	
		РеквизитыДокумента = Док.Реквизиты;
		Для Каждого Реквизит Из РеквизитыДокумента Цикл
			Если Реквизит.Тип.СодержитТип(ТипДокументаПоиска) Тогда
				
				Если НЕ ПустаяСтрока(ТекстГде) Тогда
					ТекстГде = ТекстГде + " ИЛИ ";
				КонецЕсли;
				
				ТекстГде = ТекстГде + " Док." + Реквизит.Имя + " = &ДокументПоиска";
			
			КонецЕсли;
		КонецЦикла;
		
		Если Не ПустаяСтрока(ТекстГде) Тогда
			Если ПустаяСтрока(ТекстЗапроса) Тогда
				ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ";
			Иначе
				ТекстЗапроса = ТекстЗапроса + "
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|";
			КонецЕсли;
			
			ТекстЗапроса = ТекстЗапроса + "
			|	Док.Ссылка
			|ИЗ
			|	Документ." + Док.Имя + " КАК Док
			|ГДЕ
			|	Док.Проведен 
			|	И (" + ТекстГде + ")";
		КонецЕсли;
	
		// просмотр реквизитов табличных частей на наличие ссылки на ДокументПоиска
		ТабличныеЧастиДокумента = Док.ТабличныеЧасти;
		Для Каждого ТЧ Из ТабличныеЧастиДокумента Цикл
			ТекстГде = "";
			РеквизитыТЧ = ТЧ.Реквизиты;

			Для Каждого Реквизит Из РеквизитыТЧ Цикл
				Если Реквизит.Тип.СодержитТип(ТипДокументаПоиска) Тогда
					
					Если НЕ ПустаяСтрока(ТекстГде) Тогда
						ТекстГде = ТекстГде + " ИЛИ ";
					КонецЕсли;
					
					ТекстГде = ТекстГде + " Док." + Реквизит.Имя + " = &ДокументПоиска";
				
				КонецЕсли;
			КонецЦикла;
			
			Если Не ПустаяСтрока(ТекстГде) Тогда
				Если ПустаяСтрока(ТекстЗапроса) Тогда
					ТекстЗапроса = "ВЫБРАТЬ ПЕРВЫЕ 1 РАЗРЕШЕННЫЕ";
				Иначе
					ТекстЗапроса = ТекстЗапроса + "
					|
					|ОБЪЕДИНИТЬ ВСЕ
					|
					|ВЫБРАТЬ
					|";
				КонецЕсли;
				
				ТекстЗапроса = ТекстЗапроса + "
				|	Док.Ссылка
				|ИЗ
				|	Документ." + Док.Имя + "." + ТЧ.Имя + " КАК Док
				|ГДЕ
				|	Док.Ссылка.Проведен 
				|	И (" + ТекстГде + ")";
			КонецЕсли;

		КонецЦикла;
		
	КонецЦикла;
	
	Если ПустаяСтрока(ТекстЗапроса) Тогда
		Возврат Ложь; // на документ поиска вообще не существует в других документа
	Иначе
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ДокументПоиска", ДокументПоиска);
		Запрос.Текст = ТекстЗапроса + "
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Возврат ?(Выборка.Количество() <> 0, Истина, Ложь);
	КонецЕсли;

КонецФункции // СуществуютПроведенныеДокументыВведенныеНаОсновании

// Сравнивает содержимое двух таблиц значений по списку полей либо по всем полям
//
// Параметры:
// 	ТаблицаЗначений1, ТаблицаЗначений2 - сравниваемые таблицы значений
// 	РежимВключенияПолей: 
//              Истина       - сравниваются только поля из СписокПолей
//              Ложь         - сравниваются поля кроме СписокПолей
//              Неопределено.- сравниваются все поля
//
// Возвращаемое значение
//	Истина, если в таблицы по переданному списку полей (по всем полям) идентичны, иначе - Ложь
//
Функция СравнитьТаблицыНаборовЗаписей(ТаблицаЗначений1, ТаблицаЗначений2) Экспорт

	Если ТипЗнч(ТаблицаЗначений1) <> Тип("ТаблицаЗначений") ИЛИ ТипЗнч(ТаблицаЗначений2) <> Тип("ТаблицаЗначений") Тогда
		Возврат Ложь;
	КонецЕсли; 
	
	Если ТаблицаЗначений1.Количество() <> ТаблицаЗначений2.Количество() Тогда
		Возврат Ложь;
	КонецЕсли; 

	Если ТаблицаЗначений1.Колонки.Количество() <> ТаблицаЗначений2.Колонки.Количество() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Проверим поля
	Для каждого Колонка Из ТаблицаЗначений1.Колонки Цикл
		Если ТаблицаЗначений2.Колонки.Найти(Колонка.Имя) = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла; 
	Для каждого Колонка Из ТаблицаЗначений2.Колонки Цикл
		Если ТаблицаЗначений1.Колонки.Найти(Колонка.Имя) = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла; 
	
	// сформируем строку индекса для оптимизации поиска по таблице значений
	СтрокаИндекса = "";
	Для каждого Колонка Из ТаблицаЗначений1.Колонки Цикл
		Если СтрокаИндекса = "" Тогда
			СтрокаИндекса = Колонка.Имя;
		Иначе
			СтрокаИндекса = СтрокаИндекса+","+Колонка.Имя;
		КонецЕсли;
	КонецЦикла;
	// добавим индекс
	ТаблицаЗначений2.Индексы.Добавить(СтрокаИндекса);
	
	// Проверим записи
	Для каждого СтрокаТаблицы Из ТаблицаЗначений1 Цикл
		СтруктураПоиска = Новый Структура;
		Для каждого Колонка Из ТаблицаЗначений1.Колонки Цикл
			СтруктураПоиска.Вставить(Колонка.Имя, СтрокаТаблицы[Колонка.Имя]);
		КонецЦикла;
		СтрокиТаблицы2 = ТаблицаЗначений2.НайтиСтроки(СтруктураПоиска);
		Если СтрокиТаблицы2.Количество() <> 1 Тогда
			Возврат Ложь;
		КонецЕсли; 
	КонецЦикла;
	
	// сформируем строку индекса для оптимизации поиска по таблице значений
	СтрокаИндекса = "";
	Для каждого Колонка Из ТаблицаЗначений2.Колонки Цикл
		Если СтрокаИндекса = "" Тогда
			СтрокаИндекса = Колонка.Имя;
		Иначе
			СтрокаИндекса = СтрокаИндекса+","+Колонка.Имя;
		КонецЕсли;
	КонецЦикла;
	// добавим индекс
	ТаблицаЗначений1.Индексы.Добавить(СтрокаИндекса);
	
	Для каждого СтрокаТаблицы Из ТаблицаЗначений2 Цикл
		СтруктураПоиска = Новый Структура;
		Для каждого Колонка Из ТаблицаЗначений2.Колонки Цикл
			СтруктураПоиска.Вставить(Колонка.Имя, СтрокаТаблицы[Колонка.Имя]);
		КонецЦикла;
		СтрокиТаблицы1 = ТаблицаЗначений1.НайтиСтроки(СтруктураПоиска);
		Если СтрокиТаблицы1.Количество() <> 1 Тогда
			Возврат Ложь;
		КонецЕсли; 
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

// Группирует массив объектов (значений) по типу и возвращает их в виде соответствия.
//
// Параметры:
//  МассивОбъектов - Массив - Массив любых объектов (значений), которые необходимо сгруппировать по типу.
//
// Возвращаемое значение:
//  Соответствие - Значения, сгруппированные по типу.
//   Ключ - ТипЗначения - Тип, по которому выполнена группировка.
//   Значение - Массив - Массив объектов, сгруппированных по данному типу.
//
Функция СгруппироватьОбъектыПоТипу(Знач МассивОбъектов) Экспорт
	
	СгруппированныеОбъекты = Новый Соответствие;
	
	Для Каждого Объект Из МассивОбъектов Цикл
		
		Тип = ТипЗнч(Объект);
		
		МассивОбъектовДанногоТипа = СгруппированныеОбъекты.Получить(Тип);
		
		Если МассивОбъектовДанногоТипа = Неопределено Тогда
			МассивОбъектовДанногоТипа = Новый Массив;
			СгруппированныеОбъекты.Вставить(Тип, МассивОбъектовДанногоТипа);
		КонецЕсли;
		
		МассивОбъектовДанногоТипа.Добавить(Объект);
		
	КонецЦикла;
	
	Возврат СгруппированныеОбъекты;
	
КонецФункции

// См. ИнтеграцияСТехнологиейСервиса.ПриОпределенииИсключенийНеразделенныхДанных.
Процедура ПриОпределенииИсключенийНеразделенныхДанных(Исключения) Экспорт
	
	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// РАБОТА С ОРГАНИЗАЦИЯМИ, КОНТРАГЕНТАМИ И ФИЗЛИЦАМИ

// Функция формирует фамилию и инициалы либо по наименованию элемента спр-ка ФизическиеЛица
//  либо по переданным строкам.
//  Если передан Объект, то извлеченная из него строка считается совокупностью 
//  Фамилия + Имя + Отчество, разделенными пробелами.
//
// Параметры
//  Объект		- строка или ссылка или объект элемента спр-ка ФизическиеЛица.
//  Фамилия		- фамилия физ. лица.
//  Имя			- имя физ. лица.
//  Отчество	- отчество физ. лица.
//
// Возвращаемое значение 
//  Фамилия и Инициалы одной строкой. Побочные эффекты - переданная целая строка 
//  Побочные эффекты - переданная целая строка разбивается на подстроки, соответствующие
//  отдельным Фамилии,Имени и Отчеству
//
Функция ФамилияИнициалыФизЛица(Объект = "", Фамилия = " ", Имя = " ", Отчество = " ") Экспорт

	ТипОбъекта = ТипЗнч(Объект);
	
	
	МассивТиповСсылок = Новый Массив;
	МассивТиповСсылок.Добавить(Тип("СправочникСсылка.ФизическиеЛица"));
	МассивТиповСсылок.Добавить(Тип("СправочникСсылка.СотрудникиОрганизаций"));

	СписокТиповСсылок	= Новый ОписаниеТипов(МассивТиповСсылок);
	
	МассивТиповОбъектов = Новый Массив;
	МассивТиповОбъектов.Добавить(Тип("СправочникОбъект.ФизическиеЛица"));
	МассивТиповОбъектов.Добавить(Тип("СправочникОбъект.СотрудникиОрганизаций"));

	СписокТиповОбъектов	= Новый ОписаниеТипов(МассивТиповОбъектов);
	
	Если ТипОбъекта = Тип("Строка") Тогда
		ФИО = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СокрЛП(Объект)," ");
	ИначеЕсли ТипОбъекта <> Тип("Неопределено") И (СписокТиповСсылок.СодержитТип(ТипОбъекта) Или СписокТиповОбъектов.СодержитТип(ТипОбъекта)) Тогда 
		Если СписокТиповСсылок.СодержитТип(ТипОбъекта) Тогда
			Попытка
			   Наименование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект, "Наименование");
			Исключение
			   НаименованиеОбъекта = "";
			КонецПопытки;
		Иначе
			Попытка
			   НаименованиеОбъекта = Объект.Наименование	
			Исключение
			   НаименованиеОбъекта = "";
			КонецПопытки;
		КонецЕсли;

		// Избавление от возможных выражений в скобках, например (осн.), (вн. совм.).
		НачальнаяПозиция	= Найти(Наименование,"(");
		КонечнаяПозиция		= Найти(Наименование,")");
		ДлинаСтроки			= СтрДлина(Наименование);
		Если НачальнаяПозиция > 0 Тогда
			СтрокаДляОбработки = Лев(Наименование, НачальнаяПозиция - 1) + ?(КонечнаяПозиция > 0,Прав(Наименование, ДлинаСтроки - КонечнаяПозиция),"")
		Иначе
			СтрокаДляОбработки = Наименование;
		КонецЕсли; 

		ФИО = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СокрЛП(СтрокаДляОбработки)," ");
	Иначе

		// используем возможно переданные отдельные строки
		Возврат ?(НЕ ПустаяСтрока(Фамилия), 
				Фамилия + ?(НЕ ПустаяСтрока(Имя)," " + Лев(Имя,1) + "." + ?(НЕ ПустаяСтрока(Отчество),Лев(Отчество,1)+".", ""), ""),
				"")

	КонецЕсли;

	КоличествоПодстрок = ФИО.Количество();
	Фамилия  = ?(КоличествоПодстрок > 0,ФИО[0],"");
	Имя      = ?(КоличествоПодстрок > 1,ФИО[1],"");
	Отчество = ?(КоличествоПодстрок > 2,ФИО[2],"");
	
	Возврат ?(НЕ ПустаяСтрока(Фамилия), 
				Фамилия + ?(НЕ ПустаяСтрока(Имя)," " + Лев(Имя,1) + "." + ?(НЕ ПустаяСтрока(Отчество),Лев(Отчество,1)+".", ""), ""),
				"");

КонецФункции // ФамилияИнициалыФизЛица()

// Формирует список обособленных структурных подразделений организации
// Из списка обособленных подразделений организации исключаются те организации
// которые ведут учет зарплаты самостоятельно и не являются в данном случае ОП
//
Функция ПолучитьСписокОбособленныхПодразделенийОрганизацииДляУчетаЗарплаты(Организация) Экспорт 
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
						  |	Организации.Ссылка,
						  |	Организации.Наименование
						  |ИЗ
						  |	Справочник.Организации КАК Организации
						  |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаПоПерсоналуОрганизаций КАК УчетнаяПолитикаПоПерсоналуОрганизации
						  |		ПО Организации.Ссылка = УчетнаяПолитикаПоПерсоналуОрганизации.Организация
						  |ГДЕ
						  |	Организации.ГоловнаяОрганизация = &Организация
						  |	И ВЫБОР
						  |			КОГДА Организации.Ссылка <> &Организация   // организация-филиал
						  |				ТОГДА ЕСТЬNULL(УчетнаяПолитикаПоПерсоналуОрганизации.ВестиУчетПоГоловнойОрганизации, ИСТИНА)
						  |			ИНАЧЕ ИСТИНА
						  |		КОНЕЦ");
						  
	Запрос.УстановитьПараметр("Организация", Организация);

	СписокОрганизаций = Новый СписокЗначений;
	Выборка = Запрос.Выполнить().Выбрать(); 

	Пока Выборка.Следующий() Цикл
		СписокОрганизаций.Добавить(Выборка.Ссылка, Выборка.Наименование);
	КонецЦикла;

	Возврат СписокОрганизаций;

КонецФункции // ПолучитьСписокОбособленныхПодразделенийОрганизации()

// Функция получает значение организации по умолчанию, с учетом использования головной организации и налогоплательщика. 
// Используется для отбора в объектах подсистемы заработной платы.
//
// Параметры
//  ИспользоватьГоловнуюОрганизацию - Булево, использовать или нет головную организацию
//  ТекущийПользователь - СправочникСсылка.Пользователи, текущий пользователь
//  ИспользоватьНалогоплательщика - Булево, использовать или нет налогоплательщика 
//  ИсчислениеНалоговСтруктурныхЕдиниц - значение глобальной переменной
//  РазделНалоговогоУчета - ПеречислениеСсылка.РазделыНалоговогоУчета, раздел по которому нужно определить налогоплательщика
//
// Возвращаемое значение
//  Организация - СправочникСсылка.Организации
//
Функция ПолучитьОрганизациюПоУмолчанию(ИспользоватьГоловнуюОрганизацию = Истина, 
										ТекущийПользователь, 
										ИспользоватьНалогоплательщика = Ложь, 
										ИсчислениеНалоговСтруктурныхЕдиниц = Неопределено,
										РазделНалоговогоУчета = Неопределено) Экспорт
													
	Организация = Справочники.Организации.ОрганизацияПоУмолчанию();
		
	Если ИспользоватьГоловнуюОрганизацию Тогда 
		Организация = ОбщегоНазначенияБКВызовСервера.ГоловнаяОрганизацияДляУчетаЗарплаты(Организация);
	ИначеЕсли ИспользоватьНалогоплательщика Тогда
		Организация = ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(Организация,
																		Организация,
																		РазделНалоговогоУчета);
	КонецЕсли;
	
	Возврат Организация;
	
КонецФункции

// Функция возвращает основной договор контрагента, если он доступен для чтения
//
Функция ПолучитьОсновнойДоговорКонтрагента(Контрагент) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ДоговорыКонтрагентов.Ссылка КАК ДоступныйДоговорКонтрагента
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|		ПО (Контрагенты.Ссылка = &Контрагент)
	|			И Контрагенты.ОсновнойДоговорКонтрагента = ДоговорыКонтрагентов.Ссылка
	|ГДЕ
	|	ДоговорыКонтрагентов.Владелец = &Контрагент
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВЫБОР
	|		КОГДА Контрагенты.ОсновнойДоговорКонтрагента ЕСТЬ NULL 
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ";
	
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ДоступныйДоговорКонтрагента;		
	Иначе
		Возврат Справочники.ДоговорыКонтрагентов.ПустаяСсылка();		
	КонецЕсли;	
		
КонецФункции // ПолучитьОсновнойДоговорКонтрагента()

// Возвращает договор контрагента, если организация, указанная
// в данном договоре доступна пользователю
Функция ДоступныйДоговорКонтрагента(ДоговорСсылка, ДополнительныйОтбор = Неопределено) Экспорт
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДоговорСсылка", ДоговорСсылка);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДоговорыКонтрагентов.Ссылка КАК Договор,
	|	ДоговорыКонтрагентов.Организация
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.Ссылка = &ДоговорСсылка";
	
	Если НЕ ДополнительныйОтбор = Неопределено И ТипЗнч(ДополнительныйОтбор) = Тип("Структура") Тогда
		
		ТекстОтбор = "";
	    ТекстСоединения = " И ";
	   
	    Для Каждого ЭлементСтруктуры Из ДополнительныйОтбор Цикл
		   
		   ВидСравненияВЗапрос = " = ";

			Если ТипЗнч(ЭлементСтруктуры.Значение) = Тип("Массив") Тогда
			   ВидСравненияВЗапрос = " В ";
			КонецЕсли;

			ТекстОтбор = ТекстОтбор + ТекстСоединения + ЭлементСтруктуры.Ключ + ВидСравненияВЗапрос + " (&Параметр" + ЭлементСтруктуры.Ключ + ")";

			Запрос.УстановитьПараметр("Параметр" + ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
			   		   			   
		КонецЦикла;
		
	   Запрос.Текст = Запрос.Текст + ТекстОтбор;
	   
	КонецЕсли;		
	      		
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ДоговорКонтрагента = Выборка.Договор;
	Иначе
		ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	КонецЕсли;
	
	Возврат ДоговорКонтрагента;
	
КонецФункции // ДоступныйДоговорКонтрагента()

// Функция возвращает признак ведения учета по сотрудникам на счете
// т.е. проверяет наличие субконто "Работники организации" на счете
// по умолчанию используется счет 3350 по бух.учету
//
Функция ПолучитьПризнакВеденияУчетаПоСотрудникам(Счет = Неопределено) Экспорт
	
	Если Счет = Неопределено Тогда
		Счет = ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПоОплатеТруда; //3350
	КонецЕсли;
		
	Субконто = Счет.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоТиповые.РаботникиОрганизаций);
	Если Субконто = Неопределено Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
		
КонецФункции // ПолучитьПризнакВеденияУчетаПоСотрудникам()

// Формирует список структурных подразделений организации
//
Функция ПолучитьСписокСтруктурныхПодразделенийОрганизации(Организация) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
				   |	ПодразделенияОрганизаций.Ссылка,
				   |	ПодразделенияОрганизаций.Наименование
				   |ИЗ
				   |	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
				   |ГДЕ
				   |	ПодразделенияОрганизаций.Владелец = &Организация
				   |	И ПодразделенияОрганизаций.ЯвляетсяСтруктурнымПодразделением = ИСТИНА
				   |	И ПодразделенияОрганизаций.ПометкаУдаления = ЛОЖЬ";
	Запрос.УстановитьПараметр("Организация", Организация);
	
	СписокОрганизаций = Новый СписокЗначений;
	Выборка = Запрос.Выполнить().Выбрать(); 

	Пока Выборка.Следующий() Цикл
		СписокОрганизаций.Добавить(Выборка.Ссылка, Выборка.Наименование);
	КонецЦикла;

	Возврат СписокОрганизаций;
	
КонецФункции

Процедура ЗаполнитьДанныеДоверенностиВПечатнойФорме(ДанныеДоверенности,ОбластьПечати, ПараметрДоверенность = "Доверенность", ПараметрДоверенностьЛицо = "ДоверенностьЛицо",
																					  ПараметрДоверенностьВыдана = "ДоверенностьВыдана", ВыводитьВыданаВОдномПараметре = Ложь, ВыводитьДанныеДоверенностиВОдномПараметре = Ложь,
																					  КодЯзыка = "ru") Экспорт
	
	Если НЕ (ДанныеДоверенности.Свойство("ДоверенностьНомер") ИЛИ  ДанныеДоверенности.Свойство("ДоверенностьДата")
		ИЛИ  ДанныеДоверенности.Свойство("ДоверенностьЛицо") ИЛИ  ДанныеДоверенности.Свойство("ДоверенностьВыдана")) Тогда
		Возврат;
	КонецЕсли;
	
	Если НРег(КодЯзыка) = "ru" Тогда
		ТекстВыданной = НСтр("ru = 'выданной'", КодЯзыка);		
	Иначе
		ТекстВыданной = НСтр("ru = 'берілген'");
	КонецЕсли;
		
	ТекстДоверенности = ПолучитьТекстДоверенности(ДанныеДоверенности, КодЯзыка);
	
	Если ВыводитьДанныеДоверенностиВОдномПараметре Тогда 				
		ТекстВыданна = ПолучитьТекстДоверенностиВыданной(ДанныеДоверенности, ТекстВыданной); 			
		ОбластьПечати.Параметры.Доверенность = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1%2",ТекстДоверенности, 
		?(ЗначениеЗаполнено(ТекстДоверенности) И ЗначениеЗаполнено(ТекстВыданна), ", " + ТекстВыданна, ТекстВыданна));		
	Иначе		
		Если ЗначениеЗаполнено(ТекстДоверенности)  Тогда
			ОбластьПечати.Параметры[ПараметрДоверенность] = ТекстДоверенности;
			
			ОбластьДоверенности = ОбластьПечати.Области.Найти("Доверенность") ;
			Если ОбластьДоверенности <> Неопределено Тогда
				ОбластьПечати.Области.Найти("Доверенность").ГраницаСнизу = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная) ;			
			КонецЕсли;  		
		Иначе    		
			Если НРег(КодЯзыка) = "ru" Тогда
				ОбластьПечати.Параметры[ПараметрДоверенность] =  НСтр("ru = '№_____________ от ""____""_____________________ 20___ года'", КодЯзыка);
			Иначе
				ОбластьПечати.Параметры[ПараметрДоверенность] =  НСтр("ru = '20___ жылғы ""____""_____________________ №_____________'");
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;  
	
	//Если данные о выдаче доверенности выводится в одном параметре, то используется параметр "ПараметрДоверенностьВыдана"
	Если ВыводитьВыданаВОдномПараметре Тогда
		ОбластьПечати.Параметры[ПараметрДоверенностьВыдана]    = ПолучитьТекстДоверенностиВыданной(ДанныеДоверенности, "");
	ИначеЕсли НЕ ВыводитьДанныеДоверенностиВОдномПараметре Тогда
		ОбластьПечати.Параметры[ПараметрДоверенностьЛицо]    = СокрЛП(ДанныеДоверенности.ДоверенностьЛицо);
		ОбластьПечати.Параметры[ПараметрДоверенностьВыдана]  = СокрЛП(ДанныеДоверенности.ДоверенностьВыдана);
	КонецЕсли;  	
	
КонецПроцедуры

Функция ПолучитьТекстДоверенности(ДанныеДоверенности, КодЯзыка = "ru") Экспорт
	
	ТекстДоверенности = "";
	
	Если ЗначениеЗаполнено(ДанныеДоверенности.ДоверенностьНомер) ИЛИ ЗначениеЗаполнено(ДанныеДоверенности.ДоверенностьДата) Тогда			
		ТекстДоверенности = НСтр("ru = '№%1 от %2 года'; kz = '%2 жылғы №%1'", КодЯзыка);
		
		ТекстДоверенности = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстДоверенности, СокрЛП(ДанныеДоверенности.ДоверенностьНомер), 
					Формат(ДанныеДоверенности.ДоверенностьДата, "ДФ=dd.MM.yyyy"));
	Иначе
		ТекстДоверенности = СокрЛП(ДанныеДоверенности.УдалитьДоверенность);			
	КонецЕсли; 
	
	Возврат ТекстДоверенности;
	
КонецФункции

Функция ПолучитьТекстДоверенностиВыданной(ДанныеДоверенности,ТекстВыданной = "выданной") Экспорт
	
	Если НЕ (ДанныеДоверенности.Свойство("ДоверенностьЛицо") И ДанныеДоверенности.Свойство("ДоверенностьВыдана")) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстВыданна = "";
	Если ЗначениеЗаполнено(ДанныеДоверенности.ДоверенностьВыдана) ИЛИ ЗначениеЗаполнено(ДанныеДоверенности.ДоверенностьЛицо) Тогда
		ТекстВыданна = ТекстВыданна +  НСтр("ru='%1 %2%3'");
		ПараметрВыдана = "";
		ПараметрЛицо   = "";
		Если ЗначениеЗаполнено(ДанныеДоверенности.ДоверенностьВыдана) Тогда
			ПараметрВыдана = СокрЛП(ДанныеДоверенности.ДоверенностьВыдана);
		КонецЕсли;
		Если ЗначениеЗаполнено(ДанныеДоверенности.ДоверенностьЛицо)Тогда
			Если ЗначениеЗаполнено(ПараметрВыдана) Тогда
				ПараметрЛицо = ", " + СокрЛП(ДанныеДоверенности.ДоверенностьЛицо);
			Иначе
				ПараметрЛицо = СокрЛП(ДанныеДоверенности.ДоверенностьЛицо);
			КонецЕсли;
		КонецЕсли;
		
		ТекстВыданна = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстВыданна, ТекстВыданной,ПараметрВыдана, ПараметрЛицо)
	КонецЕсли;      
	
	Возврат ТекстВыданна;	
	
КонецФункции

// Процедура обрабатывает событие ПередЗаписью документа
// Проверяется возможность перепроведения документов
//
Процедура ПередЗаписьюДокументаПроверкаВозможностиПроведения(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	ИсточникПроведен = ПроцедурыБухгалтерскогоУчета.ДокументПроведен(Источник.Ссылка);
	Если НЕ ИсточникПроведен Тогда
		Возврат;
	КонецЕсли;

	Если НЕ ЭтоПростаяВерсияКонфигурации() Тогда
		Возврат;
	КонецЕсли;

	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	Если РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения ИЛИ Источник.ПометкаУдаления Тогда
		Если НЕ (Источник.ДополнительныеСвойства.Свойство("ПринудительнаяОтменаПроведения") И Источник.ДополнительныеСвойства.ПринудительнаяОтменаПроведения) Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;	

	Если Отказ Тогда
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Удаление и отмена проведения документов запрещено!'"));
	КонецЕсли;	
	
КонецПроцедуры

// Возвращает признак, является ли конфигурация Простой.
// Возвращаемое значение:
//   Булево - Истина, если конфигурация - Простая.
//
Функция ЭтоПростаяВерсияКонфигурации() Экспорт
	
	Возврат СтрНайти(ВРег(Метаданные.Имя), "ТИС") > 0;
	
КонецФункции

//Функция возвращает признак, является ли договор участником СРП или СД
Функция ЭтоДоговорСДСРП(ДоговорКонтрагента = Неопределено) Экспорт
	
	ПризнакДоговорСДСРП = Ложь;
	
	Если ДоговорКонтрагента <> Неопределено Тогда
		Если  ДоговорКонтрагента.УчастникСРП Или ДоговорКонтрагента.ДоговорСовместнойДеятельности Тогда
			ПризнакДоговорСДСРП = Истина;
		КонецЕсли; 
	КонецЕсли;
	
	Возврат ПризнакДоговорСДСРП;

КонецФункции // ЭтоДоговорСДСРП()

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ, ПРЕДНАЗНАЧЕННЫЕ ДЛЯ СВЕРТКИ ЗАПИСЕЙ В РЕГИСТРАХ

// Процедура сворачивает переданный набор записей регистра бухгалтерии по измерениям и реквизитам
// Параметры: НаборЗаписейРегистраБухгалтерии, тип - набор записей регистров бухгалтерии Налоговый или Типовой
//            СтрокаГруппировка, тип - строка - список колонок таблицы значений по которым будет выполняться группировка
//            СтрокаСуммирование, тип - строка - список колонок таблицы значений которые будут суммироваться
Процедура СвернутьНаборЗаписейРегистраБухгалтерии(НаборЗаписейРегистраБухгалтерии, СтрокаГруппировка, СтрокаСуммирование) Экспорт
	
	Перем ТаблицаЗаписейРегистраБухгалтерии;
	
	КоличествоЗаписейНабораЗаписей = НаборЗаписейРегистраБухгалтерии.Количество();
	//Если количество записей не больше 1 - не требуется выполнять сворачивание
	Если КоличествоЗаписейНабораЗаписей<=1 Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаЗаписейРегистраБухгалтерии = НаборЗаписейРегистраБухгалтерии.Выгрузить();
	//Данная колонка в таблице не нужна
	ТаблицаЗаписейРегистраБухгалтерии.Колонки.Удалить("НомерСтроки");
	
	ТаблицаЗаписейРегистраБухгалтерии.Свернуть(СтрокаГруппировка,СтрокаСуммирование);
	//ничего не свернулось, количество записей осталось без изменений 
	//	- не требуется загружать свернутую таблицу в набор записей 
	Если ТаблицаЗаписейРегистраБухгалтерии.Количество()=КоличествоЗаписейНабораЗаписей Тогда
		Возврат;
	КонецЕсли;
	
	//поиск и удаление проводок с пустым  количеством и суммой
	
	//готовим структуру поиска - нулевые значения колонок, которые входят в список суммируемых колонок
	СтруктураПоиска = Новый Структура(СтрокаСуммирование);
	Для Каждого ЭлементСтруктуры Из СтруктураПоиска Цикл
		СтруктураПоиска[ЭлементСтруктуры.Ключ]=0;
	КонецЦикла;
	
	МассивСтрокКУдалению = ТаблицаЗаписейРегистраБухгалтерии.НайтиСтроки(СтруктураПоиска);
	//удаление строк с пустыми значениями суммируемых колонок
	Если МассивСтрокКУдалению.Количество()>0 Тогда
		Для каждого ЭлементМассива из МассивСтрокКУдалению цикл
			 ТаблицаЗаписейРегистраБухгалтерии.Удалить(ЭлементМассива);
		конецЦикла;
	КонецЕсли;
	
	НаборЗаписейРегистраБухгалтерии.Загрузить(ТаблицаЗаписейРегистраБухгалтерии);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ВАЛЮТАМИ

// Проверяет наличие установленного курса и кратности валюты на 1 января 1980 года.
// В случае отсутствия устанавливает курс и кратность равными единице.
//
// Параметры:
//  Валюта - ссылка на элемент справочника Валют
//
Процедура ПроверитьКорректностьКурсаНа01_01_1980(Валюта) Экспорт

	ДатаКурса = Дата(1980, 1, 1);
	СтруктураКурса = ПолучитьКурсВалюты(Валюта, ДатаКурса);

	Если (СтруктураКурса.Курс = 0) Или (СтруктураКурса.Кратность = 0) Тогда

		// установим курс и кратность = 1 на 01.01.1980, чтобы не было ошибок при создании документов

		РегистрКурсыВалют = РегистрыСведений.КурсыВалют.СоздатьНаборЗаписей();
		РегистрКурсыВалют.Отбор.Валюта.Установить(Валюта, Истина);
		РегистрКурсыВалют.Отбор.Период.Установить(ДатаКурса, Истина);

		НоваяЗапись = РегистрКурсыВалют.Добавить();
		НоваяЗапись.Период    = ДатаКурса;
		НоваяЗапись.Валюта    = Валюта;
		НоваяЗапись.Курс      = 1;
		НоваяЗапись.Кратность = 1;
		
		РегистрКурсыВалют.ОбменДанными.Загрузка = Истина; // чтобы не проверять дату запрета редактирования
		РегистрКурсыВалют.Записать();
		
		Если Метаданные.РегистрыСведений.Найти("КурсыВалютДляРасчетовСПерсоналом") <> Неопределено Тогда
			РегистрКурсыВалют = РегистрыСведений["КурсыВалютДляРасчетовСПерсоналом"].СоздатьНаборЗаписей();
			РегистрКурсыВалют.Отбор.Валюта.Установить(Валюта, Истина);
			РегистрКурсыВалют.Отбор.Период.Установить(ДатаКурса, Истина);

			НоваяЗапись = РегистрКурсыВалют.Добавить();
			НоваяЗапись.Период    = ДатаКурса;
			НоваяЗапись.Валюта    = Валюта;
			НоваяЗапись.Курс      = 1;
			НоваяЗапись.Кратность = 1;
			
			РегистрКурсыВалют.ОбменДанными.Загрузка = Истина; // чтобы не проверять дату запрета редактирования
			РегистрКурсыВалют.Записать();
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ПроверитьКорректностьКурсаНа01_01_1980()

// Выполняет проверку данных информационной базы (проводок и договоров) на наличие ссылок на валюты.
//
// Параметры:
//  ПроверятьВсеВалюты - Булево - если Ложь, то валюты с пометкой на удаление не проверяются. Иначе проверяются все.
//
// Возвращаемое значение:
//   Булево      - Ложь, если нигде в учете валюты не используются, даже если существуют элементы справочника.
//
Функция ИспользуетсяВалютныйУчет(ПроверятьВсеВалюты = Ложь) Экспорт
	
	// Если идут обмены с другими базами, то считаем, что валюты могут быть в любой момент использованы.
	Если Обработки.ФункциональностьПрограммы.ИспользуетсяСинхронизацияДанных() Тогда
		Возврат Истина;
	КонецЕсли;
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	
	// Если нет ни одной валюты, то нет и валютного учета.
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", ВалютаРегламентированногоУчета);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Валюты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Валюты КАК Валюты
	|ГДЕ
	|	Валюты.Ссылка <> &ВалютаРегламентированногоУчета"
	+ ?(ПроверятьВсеВалюты, "", "
	|	И НЕ Валюты.ПометкаУдаления");
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;
	СуществующиеВалюты = Результат.Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	// Проверяем использование валюты хотя бы в одной активной проводке.
	Запрос.УстановитьПараметр("СуществующиеВалюты", СуществующиеВалюты);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК ИспользоватьВалютныйУчет
	|ИЗ
	|	РегистрБухгалтерии.Типовой КАК Типовой
	|ГДЕ
	|	(Типовой.ВалютаДт В (&СуществующиеВалюты)
	|			ИЛИ Типовой.ВалютаКт В (&СуществующиеВалюты))
	|	И Типовой.Активность";
	Если НЕ Запрос.Выполнить().Пустой() Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Проверяем использование валюты хотя бы в одном элементе из наиболее вероятных справочников.
	ШаблонТекстаЗапроса =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК ЗагрузкаКурсовВалют
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК МестоИспользованияВалюты
	|ГДЕ
	|	МестоИспользованияВалюты.ВалютаВзаиморасчетов В (&СуществующиеВалюты)
	|	И НЕ МестоИспользованияВалюты.ПометкаУдаления";
	
	МестаИспользованияВалюты = Новый Структура;
	МестаИспользованияВалюты.Вставить("ДоговорыКонтрагентов", "ВалютаВзаиморасчетов");
	МестаИспользованияВалюты.Вставить("БанковскиеСчета",      "ВалютаДенежныхСредств");
	МестаИспользованияВалюты.Вставить("ТипыЦенНоменклатуры",  "ВалютаЦены");
	
	Для Каждого МестоИспользования Из МестаИспользованияВалюты Цикл
		
		ТекстЗапроса = СтрЗаменить(ШаблонТекстаЗапроса, "ДоговорыКонтрагентов", МестоИспользования.Ключ);
		Запрос.Текст = СтрЗаменить(ТекстЗапроса, "ВалютаВзаиморасчетов", МестоИспользования.Значение);
		Если НЕ Запрос.Выполнить().Пустой() Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЦикла;

	// Поиск использования валют по всей информационной базе.
	ПропускаемыеТаблицы = Новый Массив;
	ПропускаемыеТаблицы.Добавить(Метаданные.Справочники.ДоговорыКонтрагентов);
	ПропускаемыеТаблицы.Добавить(Метаданные.Справочники.БанковскиеСчета);
	ПропускаемыеТаблицы.Добавить(Метаданные.Справочники.ТипыЦенНоменклатуры);
	ПропускаемыеТаблицы.Добавить(Метаданные.РегистрыСведений.КурсыВалют);
	ПропускаемыеТаблицы.Добавить(Метаданные.РегистрыСведений.ДанныеМонитораРуководителя);
	ИспользованияВалют = НайтиПоСсылкам(СуществующиеВалюты, Новый Массив, Новый Массив, ПропускаемыеТаблицы);
	Если ИспользованияВалют.Количество() > 0 Тогда
		Возврат Истина;
	КонецЕсли;	
	
	// Использований валюты не найдено.
	Возврат Ложь;
	
КонецФункции

// При необходимости изменяем значение функциональной опции "ИспользоватьВалютныйУчет", от которой зависит активность
// регламетного задания "ЗагрузкаКурсовВалют".
//
// Параметры:
//  Источник     - КонстантаМенеджерЗначения.ИспользоватьВалютныйУчет, СправочникОбъект.Валюты - или напрямую устанавливаем
//					значение функциональной опции, или оно устанавливается при записи валюты.
//  Отказ        - Булево - признак отказа от записи.
//
Процедура ПриИзмененииФункциональнойОпцииВалютныйУчет(Источник, Отказ) Экспорт
    
    Если Источник.ОбменДанными.Загрузка Тогда
    	Возврат;
    КонецЕсли;
	
	ФункциональнаяОпцияИзменена = Ложь;
	
	Если ТипЗнч(Источник) = Тип("КонстантаМенеджерЗначения.ИспользоватьВалютныйУчет") Тогда
		
		// Проверим, что валютный учет можно отключить.
		Если Не Источник.Значение И ОбщегоНазначенияБК.ИспользуетсяВалютныйУчет() Тогда
			
			ТекстСообщенияОбОШибке = НСтр("ru = 'Нельзя отключать валютный учет. Валюты используются в проводках или справочниках.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщенияОбОШибке, , , , Отказ);
			
			ЗаписьЖурналаРегистрации("ИспользоватьВалютныйУчет",
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.Константы.ИспользоватьВалютныйУчет,
				,
				ТекстСообщенияОбОШибке);
			
		Иначе
			
			ФункциональнаяОпцияИзменена = Истина;
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Источник) = Тип("СправочникОбъект.Валюты") Тогда
		
		ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();

		// Изменение валюты регламентированного учета не учитываем.
		Если Источник.Ссылка = ВалютаРегламентированногоУчета ИЛИ Источник.Код = "398" Тогда
			// В некоторых случаях тенге может создаваться из кода библиотек до того момента,
			// пока будет заполнена константа БК, поэтому проверяем в том числе по коду валюты.
			Возврат;
		КонецЕсли;
	
		Если Обработки.ФункциональностьПрограммы.ИспользуетсяСинхронизацияДанных() Тогда
			// В базе настроены обмены, по которым может прийти валюта.
			ИспользуетсяВалютныйУчет = Истина;

		ИначеЕсли Источник.ПометкаУдаления Тогда
		   	// Единственная валюта помечается на удаление.
			ЗапросСостояния = Новый Запрос;
			ЗапросСостояния.УстановитьПараметр("Ссылка", Источник.Ссылка);
			ЗапросСостояния.УстановитьПараметр("ВалютаРегламентированногоУчета", ВалютаРегламентированногоУчета);
			ЗапросСостояния.Текст =
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ИСТИНА
			|ИЗ
			|	Справочник.Валюты КАК Валюты
			|ГДЕ
			|	НЕ Валюты.ПометкаУдаления
			|	И Валюты.Ссылка <> &Ссылка
			|	И Валюты.Ссылка <> &ВалютаРегламентированногоУчета";
			ИспользуетсяВалютныйУчет = Не ЗапросСостояния.Выполнить().Пустой();
			
		Иначе
			// Записывается актуальная валюта.
			ИспользуетсяВалютныйУчет = Истина;
			
		КонецЕсли;
		
		ФункциональнаяОпцияИзменена = (ИспользуетсяВалютныйУчет <> Константы.ИспользоватьВалютныйУчет.Получить());
		Если ФункциональнаяОпцияИзменена Тогда
			
			// Проверим, что валютный учет можно отключить.
			Если Не ИспользуетсяВалютныйУчет И ОбщегоНазначенияБК.ИспользуетсяВалютныйУчет(Истина) Тогда
				
				ТекстСообщенияОбОШибке = НСтр("ru = 'Необходимо оставить хотя бы одну валюту, т.к. валюты уже использовались в проводках или справочниках.'");
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщенияОбОШибке, Источник.Ссылка, , , Отказ);
				
				ЗаписьЖурналаРегистрации("ИспользоватьВалютныйУчет",
					УровеньЖурналаРегистрации.Ошибка,
					Метаданные.Константы.ИспользоватьВалютныйУчет,
					,
					ТекстСообщенияОбОШибке);

				ФункциональнаяОпцияИзменена = Ложь;
				
			Иначе
				УстановитьПривилегированныйРежим(Истина);
				Константы.ИспользоватьВалютныйУчет.Установить(ИспользуетсяВалютныйУчет);
				УстановитьПривилегированныйРежим(Ложь);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры 

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ МЕХАНИЗМА СВОЙСТВ И КАТЕГОРИЙ ОБЪЕКТОВ

//Функция возвращает список доступных назначений для "Свойств и категорий объектов" 
//по переданной ссылке
// Параметры:
//Ссылка - Ссылка на справочник или документ
//
// Возвращаемое значение:
// Список значений: доступные назначения для свойств и категорий
Функция ПолучитьСписокНазначенийСвойствКатегорийОбъектовПоСсылке(Ссылка) Экспорт

	Результат = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	
	ТипСсылки = ТипЗнч(Ссылка);
	
	Если Метаданные.Справочники.Найти("ХарактеристикиНоменклатуры") <> Неопределено Тогда
		ЭтоХарактеристика = Вычислить("(ТипСсылки = Тип(""СправочникСсылка.ХарактеристикиНоменклатуры""))");
		Запрос.УстановитьПараметр("НазначениеХарактеристика", Вычислить("ПланыВидовХарактеристик.УдалитьНазначенияСвойствКатегорийОбъектов.Справочник_ХарактеристикиНоменклатуры"));
	Иначе
		ЭтоХарактеристика = Ложь;
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Назначения.Ссылка КАК Ссылка,
	|	Назначения.ТипЗначения КАК ТипЗначения
	|ИЗ
	|	ПланВидовХарактеристик.УдалитьНазначенияСвойствКатегорийОбъектов КАК Назначения
	|ГДЕ
	|	НЕ Назначения.ПометкаУдаления
	|	И НЕ Назначения.ЭтоГруппа
	|";

	Если ЭтоХарактеристика Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|	И Назначения.Ссылка = &НазначениеХарактеристика
		|";
	ИначеЕсли Метаданные.Справочники.Найти("ХарактеристикиНоменклатуры") <> Неопределено Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|	И Назначения.Ссылка <> &НазначениеХарактеристика
		|";
	КонецЕсли;

	Запрос.Текст = ТекстЗапроса;

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ЭтоХарактеристика Или Выборка.ТипЗначения.СодержитТип(ТипСсылки) Тогда
			Результат.Добавить(Выборка.Ссылка);
		КонецЕсли;
	КонецЦикла;

	Возврат Результат;

КонецФункции // ПолучитьСписокНазначенийСвойствКатегорийОбъектовПоСсылке()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПО РАБОТЕ С ПРАВАМИ ПОЛЬЗОВАТЕЛЕЙ

// Функция проверяет, есть ли доступ к объекту метаданных.
// 
// Параметры:
//  ОбъектМетаданных    - объект метаданных, к которому нужно проверить доступ.
//  Право               - Строка, название права, которое необходимо проверить.
//                        необязательный параметр, значение по умолчанию - "Чтение".  
//  флВыводитьСообщения - Булево, признак вывода сообщения, с текстом о нарушении прав доступа к объекту,
//                        необязательный параметр, значение по умолчанию - Истина.
//
// Возвращаемое значение:
//   Булево - Истина - есть право доступа
//            Ложь   - нет права доступа  
//
Функция ПроверитьПравоДоступа(ОбъектМетаданных, Право = "Чтение", флВыводитьСообщения = Истина) Экспорт
	
	ЕстьПраво = ПравоДоступа(Право, ОбъектМетаданных);
	
	ПолноеИмяобъекта = ОбъектМетаданных.ПолноеИмя();
	ВидОбъекта = Сред(ПолноеИмяобъекта, 1, Найти(ПолноеИмяобъекта, ".")-1);
	
	Если НЕ ЕстьПраво Тогда
		
		Если флВыводитьСообщения Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Нарушение прав доступа! %1: %2'"), 
				                                                        ВидОбъекта,
																		ОбъектМетаданных.Синоним);

			#Если Клиент Тогда
				ПоказатьПредупреждение(, ТекстСообщения);
				
			#Иначе
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);				
			#КонецЕсли
		КонецЕсли;	
	
	КонецЕсли; 

	Возврат ЕстьПраво;
	
КонецФункции // ПроверитьПравоДоступа()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПО РАБОТЕ С СООБЩЕНИЯМИ В ДЛИТЕЛЬНЫХ ОПЕРАЦИЯХ

Процедура ПолучитьИзДлительнойОперацииСообщенияПользователю(ИдентификаторЗадания, ИдентификаторНазначения = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		Возврат;
	КонецЕсли;
	
	ФоновоеЗадание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ИдентификаторЗадания);
	Если ФоновоеЗадание = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Сообщения = ФоновоеЗадание.ПолучитьСообщенияПользователю(Истина);
	
	Если Сообщения = Неопределено Тогда
		// Вместо пустого массива возвращается Неопределено
		Возврат;
	КонецЕсли;
	
	// Сообщения фонового задания могут повторяться из-за особенностей технической реализации
	// заполнения списка Ошибки регламентной операции.
	// Также они могут содержать служебные сообщения.
	// См. ДополнитьИнформациюОбОшибкахСообщениямиПользователю()
	УникальныеТекстыСообщений = Новый Массив;
	УникальныеСообщения = Новый Массив;
	Для Каждого Сообщение Из Сообщения Цикл
		
		Если ЭтоСлужебноеСообщение(Сообщение) Тогда
			// Такие не показываем пользователю
			Продолжить;
		КонецЕсли;
		
		Если УникальныеТекстыСообщений.Найти(Сообщение.Текст) = Неопределено Тогда
			УникальныеТекстыСообщений.Добавить(Сообщение.Текст);
			УникальныеСообщения.Добавить(Сообщение);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Сообщение Из УникальныеСообщения Цикл
		Если ИдентификаторНазначения <> Неопределено Тогда
			Сообщение.ИдентификаторНазначения = ИдентификаторНазначения;
		КонецЕсли;
		Сообщение.Сообщить();
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОДНОИМЕННЫХ ОБРАБОТЧИКОВ СОБЫТИЙ ФОРМ

// Процедура, вызываемая из одноименного обработчика события формы списка.
//
// Параметры:
//  Форма					- ФормаКлиентскогоПриложения - форма, из обработчика события которой происходит вызов процедуры.
//  Отказ					- Булево - признак отказа от создания формы.
//  СтандартнаяОбработка	- Булево - признак выполнения стандартной (системной) обработки события
//  ДополнительныеПараметры	- Структура - дополнительные параметры.
//
Процедура ФормаСпискаПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка, ДополнительныеПараметры = Неопределено) Экспорт
	
	ГрупповоеИзменениеОбъектовПереопределяемый.ВидимостьЭлементовГрупповоеИзменение(Форма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

///////////////////////////////////////////////////////////////////////////////
// Установка параметров сеанса

Процедура УстановитьПараметрыСеансаОбщиеЗначения(ИмяПараметра, УстановленныеПараметры) Экспорт 
	
	Если ИмяПараметра = "ОбщиеЗначения" Тогда
				
		ПараметрыСеанса.ОбщиеЗначения = Новый ХранилищеЗначения(Новый Структура);
		
		УстановленныеПараметры.Добавить("ОбщиеЗначения");
				
	КонецЕсли;
	
КонецПроцедуры


///////////////////////////////////////////////////////////////////////////////
// Прочие служебные процедуры и функции

// Устанавливает дату актуальности учета, перепроводя документы на установленную дату.
// Используется как обработчик регламентного задания УстановкаДатыАктуальностиУчета.
//
Процедура УстановкаДатыАктуальностиУчета() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания();

	// попытаемся найти фоновое задание, которое вызвало обработку
	Организация = Неопределено;
	МассивФоновыхЗаданий = ФоновыеЗадания.ПолучитьФоновыеЗадания(Новый Структура("Состояние, ИмяМетода",СостояниеФоновогоЗадания.Активно, "ОбщегоНазначенияБК.УстановкаДатыАктуальностиУчета"));
	Если МассивФоновыхЗаданий.Количество()<>0 Тогда
		
		// в качестве ключа фоновых заданий этого типа выступает
		// строковое представление уникального идентификатора организации
		Ключ = МассивФоновыхЗаданий[0].Ключ;
		// попробуем найти организацию по ключу
		ВыборкаПоОрганизации = Справочники.Организации.Выбрать();
		Пока ВыборкаПоОрганизации.Следующий() Цикл
			Если Ключ = Строка(ВыборкаПоОрганизации.Ссылка.УникальныйИдентификатор()) Тогда
				Организация = ВыборкаПоОрганизации.Ссылка;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Проверка фоновых заданий'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Информация, , ,
			СтрШаблон(НСтр("ru = 'Запуск фонового задания %1 в %2'", ОбщегоНазначения.КодОсновногоЯзыка()), Ключ, ТекущаяДата()));
		
	КонецЕсли;
	
	// для проведения документов сначала необходимо будет установить
	// дату актуальности учета как текущую, однако во время проведения
	// документов может произойти ошибка и необходимо будет вернуть дату
	// актуальности в исходное состояние. В этом нам поможет таблица
	ТаблицаАктуальности = Новый ТаблицаЗначений;
	ТаблицаАктуальности.Колонки.Добавить("Организация");
	ТаблицаАктуальности.Колонки.Добавить("РазделУчета");
	ТаблицаАктуальности.Колонки.Добавить("Дата");
	ТаблицаАктуальности.Индексы.Добавить("Организация, РазделУчета");
	
	ДатаАктуальностиУчета = РегистрыСведений.ДатаАктуальностиУчета;
	Выборка = ДатаАктуальностиУчета.Выбрать();
	ДатаВыполнения = ТекущаяДата();
	ДатаНачала = ДатаВыполнения;
	// определяем дату, с которой необходимо перепроводить документы
	// параллельно устанавливаем для существующих записей новую дату
	Пока Выборка.Следующий() Цикл
		Если ЗначениеЗаполнено(Организация) Тогда
			Если Выборка.Организация<>Организация Тогда
				продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Запись = Выборка.ПолучитьМенеджерЗаписи();
		
		Для Каждого РазделУчета Из Метаданные.РегистрыСведений.ДатаАктуальностиУчета.Ресурсы Цикл
			
			Если ДатаНачала > Выборка[РазделУчета.Имя] ТОгда
				ДатаНачала = Выборка[РазделУчета.Имя];
			КонецЕсли;
			
			СтрокаТаблицы = ТаблицаАктуальности.Добавить();
			СтрокаТаблицы.Организация = Выборка.Организация;
			СтрокаТаблицы.РазделУчета = РазделУчета.Имя;
			СтрокаТаблицы.Дата = Выборка[РазделУчета.Имя];
			
			Запись[РазделУчета.Имя] = ДатаВыполнения;
		
		КонецЦикла;
		
		Запись.Записать();
		
	КонецЦикла;
	
	// формируем текст запроса по документам
	Если НЕ ДатаНачала = ДатаВыполнения Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Организация", Организация);
		
		Для Каждого ДокументМетаданные ИЗ Метаданные.Документы Цикл
			
			Запрос.Текст = Запрос.Текст + ?(Запрос.Текст = "", "", "
			|ОБЪЕДИНИТЬ ВСЕ
			|") + "ВЫБРАТЬ """ + ДокументМетаданные.Имя + """ КАК ИмяДокумента, Представление КАК Представление, Ссылка КАК Ссылка, Дата КАК Дата ИЗ Документ." + ДокументМетаданные.Имя + "
			|ГДЕ Проведен И Дата >= &ДатаНач";
			
			Запрос.Текст = Запрос.Текст + " И Дата <= &ДатаКон";
			
			Если Организация <> Неопределено И ДокументМетаданные.Реквизиты.Найти("Организация") <> Неопределено Тогда
				Если ТипЗнч(Организация) = Тип("Массив") Тогда
					Запрос.Текст = Запрос.Текст + " И Организация В (&Организация)";
				Иначе
					Запрос.Текст = Запрос.Текст + " И Организация = &Организация";
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		Запрос.Текст = Запрос.Текст + "
		|УПОРЯДОЧИТЬ ПО Дата, Ссылка";
		
		Запрос.УстановитьПараметр("ДатаНач", ДатаНачала);
		Запрос.УстановитьПараметр("ДатаКон", КонецДня(ДатаВыполнения));
		
		ТаблицаДокументов = Запрос.Выполнить().Выгрузить();
		ТаблицаДокументов.Колонки.Добавить("БылаОшибка", Новый ОписаниеТипов("Булево"));
		ВсегоДокументов = ТаблицаДокументов.Количество();
		
		// очищаем движения документов
		Для Каждого СтрокаДокумента ИЗ ТаблицаДокументов Цикл
			
			Регистратор = СтрокаДокумента.Ссылка;
			КоллекцияДвижений = Метаданные.Документы[СтрокаДокумента.ИмяДокумента].Движения;
			НачатьТранзакцию();
			
			Для Каждого НаборМетаданные ИЗ КоллекцияДвижений Цикл
				
				Если Метаданные.РегистрыСведений.Содержит(НаборМетаданные) Тогда
					Набор = РегистрыСведений[НаборМетаданные.Имя].СоздатьНаборЗаписей();	
				ИначеЕсли Метаданные.РегистрыНакопления.Содержит(НаборМетаданные) Тогда
					Набор = РегистрыНакопления[НаборМетаданные.Имя].СоздатьНаборЗаписей();
				ИначеЕсли Метаданные.РегистрыБухгалтерии.Содержит(НаборМетаданные) Тогда
					Набор = РегистрыБухгалтерии[НаборМетаданные.Имя].СоздатьНаборЗаписей();
				ИначеЕсли Метаданные.РегистрыРасчета.Содержит(НаборМетаданные) Тогда
					Набор = РегистрыРасчета[НаборМетаданные.Имя].СоздатьНаборЗаписей();
				КонецЕсли;
				
				Набор.Отбор.Регистратор.Установить(Регистратор);
				Набор.Записать();
				Запрос.УстановитьПараметр(СтрокаДокумента.ИмяДокумента + "Ссылка", Регистратор);
				Запрос.УстановитьПараметр(СтрокаДокумента.ИмяДокумента + "Дата", СтрокаДокумента.Дата);
				
			КонецЦикла;
			
			ЗафиксироватьТранзакцию();
			
		КонецЦикла;	
		
		ЗавершеноСОшибкой = Ложь;
		
		Для индекс = 0 ПО ВсегоДокументов - 1 Цикл
			СтрокаДокумента = ТаблицаДокументов[индекс];
			
			ДокументОбъект = СтрокаДокумента.Ссылка.ПолучитьОбъект();
			
			// попытаемся записать и провести документ
			Попытка
				ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
			// прервем цикл и установим признак невозможности завершения
			Исключение
				
				ЗавершеноСОшибкой = Истина;
				Прервать;
				
			КонецПопытки;
			
		КонецЦикла;
		// в случае невозможности проведения документов, вернем старые
		// значения даты актуальности
		Если ЗавершеноСОшибкой Тогда
			Выборка = ДатаАктуальностиУчета.Выбрать();
			Пока Выборка.Следующий() Цикл
				Если ЗначениеЗаполнено(Организация) Тогда
					Если Выборка.Организация<>Организация Тогда
						продолжить;
					КонецЕсли;
				КонецЕсли;
				
				Запись = Выборка.ПолучитьМенеджерЗаписи();
				
				Для Каждого РазделУчета Из Метаданные.РегистрыСведений.ДатаАктуальностиУчета.Ресурсы Цикл
					
					СтрокиАктуальности = ТаблицаАктуальности.НайтиСтроки(Новый Структура("организация,РазделУчета",Выборка.Организация, РазделУчета.Имя));
					Запись[РазделУчета.Имя] = СтрокиАктуальности[0].Дата;
					
				КонецЦикла;
				
				Запись.Записать();
				
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
Конецпроцедуры

Функция РолиПользователяНастроеныНекорректно()
	
	ТекущийПользовательИБ = ПользователиИнформационнойБазы.ТекущийПользователь();
	Если ПустаяСтрока(ТекущийПользовательИБ.Имя) Тогда
		// Авторизуется пользователь по умолчанию.
		Возврат "";
	КонецЕсли;
	
	Если Пользователи.ЭтоПолноправныйПользователь(ТекущийПользовательИБ) Тогда
		// Авторизуется пользователь с полными правами.
		Возврат "";
	КонецЕсли;
	
	Если ПользователиКлиентСервер.ЭтоСеансВнешнегоПользователя() Тогда
		ИмяРолиБазовыеПрава = Метаданные.Роли.БазовыеПраваВнешнихПользователейБСП.Имя;
		ПредставлениеРолиБазовыеПрава = НСтр("ru = 'Базовые права внешнего пользователя'");
	Иначе
		ИмяРолиБазовыеПрава = Метаданные.Роли.БазовыеПраваБСП.Имя;
		ПредставлениеРолиБазовыеПрава = НСтр("ru = 'Базовые права'");
	КонецЕсли;
	
	Если РольДоступна(ИмяРолиБазовыеПрава) Тогда // Не заменять на РолиДоступны.
		Возврат "";
	КонецЕсли;
	
	ТекстСообщения = НСтр("ru = 'Вам не назначена роль ""%РольБазовыеПраваПредставление%"". Запуск конфигурации невозможен!'");
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%РольБазовыеПраваПредставление%", ПредставлениеРолиБазовыеПрава);
	
	Возврат ТекстСообщения;
	
КонецФункции

// Определяет, является ли сообщение служебным.
//
// Параметры:
//  Сообщение - проверяемое сообщение
//
// Возвращаемое значение:
//  Булево - является ли сообщение служебным
//
// Возвращаемые параметры:
//  ТекстДляПользователя - часть текста сообщения, предназначенная для пользователя
//  СсылкаДляПерехода    - часть текста сообщения, не предназначенная для пользователя
//
Функция ЭтоСлужебноеСообщение(Сообщение, ТекстДляПользователя = Неопределено, СсылкаДляПерехода = Неопределено)
	
	ТекстСообщения = Сообщение.Текст;
	ПозицияНавигационнойСсылки = Найти(Сообщение.Текст, "e1cib");
	
	Если ПозицияНавигационнойСсылки = 0 Тогда
		ТекстДляПользователя = ТекстСообщения;
		Возврат Ложь;
	КонецЕсли;
	
	ТекстДляПользователя = Лев(ТекстСообщения, ПозицияНавигационнойСсылки - 1);
	СсылкаДляПерехода    = Сред(ТекстСообщения, ПозицияНавигационнойСсылки);
	
	Возврат Истина;
	
КонецФункции

Процедура УстановитьТекстАвтора(НадписьАвтор, Автор) Экспорт
	
	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить(НСтр("ru = 'Автор: '"));
	МассивСтрок.Добавить(Новый ФорматированнаяСтрока(Строка(Автор), , ЦветаСтиля.ЦветГиперссылки, , ПолучитьНавигационнуюСсылку(Автор)));
	НадписьАвтор = Новый ФорматированнаяСтрока(МассивСтрок);
	
КонецПроцедуры
	

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПРОВЕРКИ НЕОБХОДИМОСТИ ВЫПОЛНЕНИЯ ДЕЙСТВИЙ ПРИ ЗАПУСКЕ

// Возвращает значение: требуется ли запускать обработку "Свертка информационной базы" или нет.
// 
Функция ТребуетсяОткрытьСверткуБазы()
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не РольДоступна("ПолныеПрава") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЗначениеХранилища = Константы.СтатусСверткиИнформационнойБазы.Получить();
	
	ПоказыватьПриСтарте	= Ложь;
	
	Если ЗначениеХранилища <> Неопределено Тогда
		Статус = ЗначениеХранилища.Получить();
		Если Статус <> Неопределено Тогда
			ПоказыватьПриСтарте	= Статус.ПоказыватьПриСтарте;
		КонецЕсли;
	Иначе
		ПоказыватьПриСтарте	= Ложь;
	КонецЕсли;
	
	Возврат ПоказыватьПриСтарте;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ Управления доступом

// Выполняет формирование таблицы с набором значений доступа объекта (документа), 
// содержащего ссылки на организацию и структурное подразделени.
// Вызывается из процедуры ЗаполнитьНаборыЗначенийДоступа, реализованной в модуле таких 
// документов, доступ к которым выполняется через наборы значений доступа.
// Параметры:
//		Объект
//		Таблица - переданная таблица значений.
//		ПутьОрганизация - строка с именем реквизита, содержащего организацию.
//		ПутьСтруктурноеПодразделение - строка с именем реквизита, содержащего структурное подразделение.
//
Процедура ЗаполнитьНаборыПоОрганизацииСтурктурномуПодразделению(Объект, Таблица, ПутьОрганизация, ПутьСтруктурноеПодразделение, НомерНабора = 0) Экспорт
	
	// Логика ограничения:
	// объект доступен, если доступна организация
	
	СтрокаТаб = Таблица.Добавить();
	СтрокаТаб.ЗначениеДоступа = Объект[ПутьОрганизация];
	СтрокаТаб.НомерНабора = НомерНабора;
	
	// объект доступен, если доступно структурное подразделение
	
	СтрокаТаб = Таблица.Добавить();
	СтрокаТаб.ЗначениеДоступа = Объект[ПутьСтруктурноеПодразделение];
	СтрокаТаб.НомерНабора = НомерНабора;
	
КонецПроцедуры 

////////////////////////////////////////////////////////////////////////////////
// Локализация макетов   

// Возвращает локализованное имя макета
Функция ПолучитьИмяМакетаНаТекущемЯзыкеПользователя(ИмяОбъекта, ИмяМакета) Экспорт

	ОбъектСМакетами = Метаданные.НайтиПоПолномуИмени(ИмяОбъекта);   
	
	Если НЕ ОбъектСМакетами = Неопределено Тогда
		КоллекцияМакетов = ОбъектСМакетами.Макеты; 
		
		Если КоллекцияМакетов.Количество() > 0 Тогда			
			ЛокализованноеИмяМакета = ИмяМакета + "_" + ТекущийЯзык().КодЯзыка;
			Макет                   = КоллекцияМакетов.Найти(ЛокализованноеИмяМакета);
			Если Макет = Неопределено Тогда
				ЛокализованноеИмяМакета = ИмяМакета + "_" + ОбщегоНазначения.КодОсновногоЯзыка();
				Макет                   = КоллекцияМакетов.Найти(ЛокализованноеИмяМакета);
			КонецЕсли;
			
			Если Макет = Неопределено Тогда
				ЛокализованноеИмяМакета = ИмяМакета;
			КонецЕсли;	
						
			Возврат ЛокализованноеИмяМакета;			
		Иначе			
			Возврат "";			
		КонецЕсли;	
	Иначе		
		Возврат "";	
	КонецЕсли;
	
КонецФункции
