
#Область Печать

// Заполняет список команд печати. Подключаемая команда.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ЭлектронныйАктВыполненныхРабот";
	КомандаПечати.Представление = НСтр("ru = 'Электронный акт выполненных работ'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБККлиент.ВыполнитьКомандуПечати";
	КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.Порядок = 50;
	
КонецПроцедуры

// Формирует печатные формы. Печать документа АВР.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура ПечатьАВР(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ЭлектронныйАктВыполненныхРабот") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ЭлектронныйАктВыполненныхРабот",
			НСтр("ru = 'Электронный акт выполненных работ'"),
			Документы.ЭлектронныйАктВыполненныхРабот.ПечатьАВР(МассивОбъектов, ОбъектыПечати),
			,
			"Обработка.ОбменЭСФ.ПФ_MXL_АВР");
		КонецЕсли;
	
КонецПроцедуры

Функция МакетПечатнойФормы(ИмяМакета) Экспорт
	
	Макет = УправлениеПечатью.МакетПечатнойФормы(ИмяМакета);
	Возврат Макет;
	
КонецФункции	

#КонецОбласти 

#Область ПроцедурыИФункцииФоновыхЗаданий

Функция ВыполнитьВФоне(Знач ИмяЭкспортнойПроцедуры, Знач ПараметрыПроцедуры, Знач ПараметрыВыполнения) Экспорт
	
	// Код вынесен в переопределяемый модуль, процедуры запуска фонового задания должна передавать КлючЗадания - ПараметрыВыполнения.УникальныйИдентификатор
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, ПараметрыВыполнения.ИдентификаторФормы);
	НаименованиеЗадания = ПараметрыВыполнения.НаименованиеФоновогоЗадания;
	
	Если Не ЗначениеЗаполнено(НаименованиеЗадания) Тогда
		НаименованиеЗадания = ИмяЭкспортнойПроцедуры;
	КонецЕсли;
	
	ПараметрыЭкспортнойПроцедуры = Новый Массив;
	ПараметрыЭкспортнойПроцедуры.Добавить(ПараметрыПроцедуры);
	ПараметрыЭкспортнойПроцедуры.Добавить(АдресХранилища);
	
	ПараметрыЗадания = Новый Массив;
	ПараметрыЗадания.Добавить(ИмяЭкспортнойПроцедуры);
	ПараметрыЗадания.Добавить(ПараметрыЭкспортнойПроцедуры);
	
	ПараметрыЗадания.Добавить(Неопределено);
	Задание = ФоновыеЗадания.Выполнить(ИмяЭкспортнойПроцедуры, ПараметрыЭкспортнойПроцедуры, ПараметрыВыполнения.КлючФоновогоЗадания, НаименованиеЗадания);
	Попытка
		Задание.ОжидатьЗавершения(ПараметрыВыполнения.ОжидатьЗавершение);
	Исключение		
		// Специальная обработка не требуется, возможно исключение вызвано истечением времени ожидания.
	КонецПопытки;
	
	Результат = Новый Структура;
	Результат.Вставить("АдресХранилища",       АдресХранилища);
	Результат.Вставить("ЗаданиеВыполнено",     ДлительныеОперации.ЗаданиеВыполнено(Задание.УникальныйИдентификатор));
	Результат.Вставить("ИдентификаторЗадания", Задание.УникальныйИдентификатор);
	
	Возврат Результат;
	
КонецФункции

Функция ФоновоеЗаданиеЗапущено(Знач ИмяПроцедуры) Экспорт
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("ЗаданиеАктивно", Ложь);
	
	МассивФоновыхЗаданий = ФоновыеЗадания.ПолучитьФоновыеЗадания(Новый Структура("ИмяМетода, Состояние", ИмяПроцедуры, СостояниеФоновогоЗадания.Активно));
		
	Если МассивФоновыхЗаданий.Количество() > 0 Тогда
		СтруктураВозврата.Вставить("ЗаданиеАктивно", Истина);
		СтруктураВозврата.Вставить("Расположение", МассивФоновыхЗаданий[0].Расположение);
		СтруктураВозврата.Вставить("Начало",  МассивФоновыхЗаданий[0].Начало);
	КонецЕсли;		
	
	Возврат СтруктураВозврата;

КонецФункции

#КонецОбласти

#Область СинхронизацияИСЭСФ

// Получение ЭАВР при автосинхронизации с ИС ЭСФ
Процедура ПолучитьАВРРегламентноеЗадание(ДанныеПрофиляИСЭСФ, ИдентификаторСессии, ВерсияИСЭСФ) Экспорт
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьЭлектронныеАВР") Тогда
		
		ДанныеПрофиля = ДанныеПрофиляИСЭСФ.ПрофильИСЭСФ;
		
		ПараметрыМетодаАВР = ЭСФСервер.ПолучитьПараметрыМетода(ДанныеПрофиля.СтруктурнаяЕдиница.Ссылка, ВРег("awpQueryUpdates"), Перечисления.НаправленияЭСФ.ПустаяСсылка());
		
		ЭтоПоследняяПорция = Ложь;
		МассивИдентификаторовДляОбновленияСтатусаПриема = Новый Массив(); // накапливаем идентификаторы, чтобы отправить уведомление после получения всех документов
		
		Пока НЕ ЭтоПоследняяПорция Цикл
			ЭтоПоследняяПорция = ПолучитьДанныеНовыхАВР(Перечисления.НаправленияЭСФ.ПустаяСсылка(), ДанныеПрофиляИСЭСФ, Ложь, Ложь, ИдентификаторСессии, ВерсияИСЭСФ, ПараметрыМетодаАВР, МассивИдентификаторовДляОбновленияСтатусаПриема);
		КонецЦикла;
		
		ПодтвердитьПолучениеВходящихАВР(МассивИдентификаторовДляОбновленияСтатусаПриема, ДанныеПрофиляИСЭСФ, ИдентификаторСессии); // Отправка уведомления о приеме
		
	КонецЕсли;
	
КонецПроцедуры
	
Функция ПолучитьДанныеНовыхАВР(Знач НаправлениеАВР, Знач ПрофильИСЭСФ, Знач ПолучитьОднуПорцию, Знач ТолькоСоздатьОбновитьФайлы, ИдентификаторСессии, ВерсияИСЭСФ, ПараметрыМетода, МассивИдентификаторовДляОбновленияСтатусаПриема = Неопределено, МассивАВРДляПолученияИдентификаторовТоваров = Неопределено) Экспорт
	
	Возврат ЭСФСерверПовтИсп.ОбработкаОбменЭСФ().ПолучитьДанныеНовыхАВР(НаправлениеАВР, ПрофильИСЭСФ, ПолучитьОднуПорцию, ТолькоСоздатьОбновитьФайлы, ИдентификаторСессии, ВерсияИСЭСФ, ПараметрыМетода, МассивИдентификаторовДляОбновленияСтатусаПриема);
	
КонецФункции

Процедура ПодтвердитьПолучениеВходящихАВР(МассивИдентификаторовАВР, Знач ПрофильИСЭСФ, ИдентификаторСессии) Экспорт
	
	ЭСФСерверПовтИсп.ОбработкаОбменЭСФ().ПодтвердитьПолучениеВходящихАВР(МассивИдентификаторовАВР, ПрофильИСЭСФ, ИдентификаторСессии);
	
КонецПроцедуры

#КонецОбласти

#Область ОбщиеФункцииПоЗаполнениюАктов

Функция СоздатьСписокИсходящихАВР(ПараметрыСоздания) Экспорт
	
	СписокСозданныхЭАВР = Новый Массив;
	
	МассивДокументов = ПараметрыСоздания.МассивОснований;
	ЭтоИсправленныйЭАВР = ПараметрыСоздания.ЭтоИсправленныйЭАВР;
	
	СтруктураДанных = Новый Структура;
	РеквизитыДокументов = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивДокументов, "ВалютаДокумента, Дата, ДатаПодписанияГЗ");
	СтруктураДанных.Вставить("ДанныеКурсаИОснования", РеквизитыДокументов);
	
	ДанныеДляЗаполненияЭАВР = ПолучитьДанныеДляЗаполненияЭАВР(МассивДокументов);
	
	СтруктураДанных.Вставить("ДанныеДляЗаполненияЭАВР", ДанныеДляЗаполненияЭАВР);
	СтруктураДанных.Вставить("ЭтоИсправленныйЭАВР", ЭтоИсправленныйЭАВР);
	
	Для Каждого ДокументОснование Из МассивДокументов Цикл
		
		Попытка
			
			ДанныеЗаполнения = Новый Структура("ДокументОснование, СтруктураДанных", ДокументОснование, СтруктураДанных);
			
			НовыйДокументЭАВР = Документы.ЭлектронныйАктВыполненныхРабот.СоздатьДокумент();
			НовыйДокументЭАВР.Заполнить(ДанныеЗаполнения);
			
			НовыйДокументЭАВР.Записать();
			СписокСозданныхЭАВР.Добавить(НовыйДокументЭАВР.Ссылка);
			
		Исключение
			
			ТекстСообщения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(
				НСтр("ru='Ошибка при создании документа ЭАВР: %1.'"),
				ИнформацияОбОшибке().Описание);
				
			ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
			
		КонецПопытки;
		
	КонецЦикла;
	
	Возврат СписокСозданныхЭАВР;
	
КонецФункции

Процедура ЗаполнитьИсходящийАВР(Знач ДанныеЗаполнения, ОбъектАВР, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(ОбъектАВР) <> Тип("ДокументОбъект.ЭлектронныйАктВыполненныхРабот") Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураЗаполнения = АВРСервер.ПолучитьСтруктуруДанныхЗаполнения();
	
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") И ДополнительныеПараметры.ЭтоИсправленныйЭАВР Тогда
		СтруктураЗаполнения.Реквизиты.Вставить("СвязанныйАВР");
	КонецЕсли;
	
	СобратьДанныеДляЗаполненияИсходящегоАВР(ДанныеЗаполнения, СтруктураЗаполнения);
	
	Если СтруктураЗаполнения.Реквизиты.Ссылка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//Заполняем шапку документа
	ЗаполнитьЗначенияСвойств(ОбъектАВР, СтруктураЗаполнения.Реквизиты);
	//	
	ОбъектАВР.Номер = АВРСерверПереопределяемый.ПолучитьНомерНаПечатьЭАВР(СтруктураЗаполнения.Реквизиты.Номер);
	ОбъектАВР.ДокументОснование = СтруктураЗаполнения.Реквизиты.Ссылка;
	ОбъектАВР.Дата = ТекущаяДатаСеанса();
	ОбъектАВР.Направление = Перечисления.НаправленияЭСФ.Исходящий;
	
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") И ДополнительныеПараметры.ЭтоИсправленныйЭАВР Тогда
		ОбъектАВР.ТипАВР = Перечисления.ТипыАВР.Исправленный;
	Иначе
		ОбъектАВР.ТипАВР = Перечисления.ТипыАВР.Первичный;
		ОбъектАВР.СвязанныйАВР = Документы.ЭлектронныйАктВыполненныхРабот.ПустаяСсылка();
		ОбъектАВР.ДатаОсновногоАВР = Дата(1,1,1);
		ОбъектАВР.НомерОсновногоАВР = "";
		ОбъектАВР.РегистрационныйНомерОсновногоАВР = "";
	КонецЕсли;
	//	
	СтруктураДанныхЗаполнения = СтруктураЗаполнения.Реквизиты;
	//	
	Если НЕ АВРСерверПереопределяемый.ПроверитьРегистрациюДоговора(СтруктураДанныхЗаполнения) Тогда
		ОбъектАВР.БезДоговора = Истина;
	КонецЕсли;
	
	//Заполняем табличную часть "Поставщики"
	Если ОбъектАВР.Поставщики.Количество() = 0 Тогда
		СтрокаПоставщики = ОбъектАВР.Поставщики.Добавить();
	Иначе
		СтрокаПоставщики = ОбъектАВР.Поставщики[0];
	КонецЕсли;
	
	СтруктураДанных = СтруктураЗаполнения.СтруктураДанныхПоставщики;
	
	Если НЕ СтруктураДанных = Неопределено Тогда
		ЗаполнитьЗначенияСвойств(СтрокаПоставщики, СтруктураДанных, "Поставщик, ПоставщикНаименование, ПоставщикИдентификатор, Адрес, НомерСвидетельстваПоНДС, СерияСвидетельстваПоНДС, КБе, ИИК, НаименованиеБанка, БИК, ТипРегистрации");
	КонецЕсли;
	
	//Заполняем табличную часть "Получатели"
	Если ОбъектАВР.Получатели.Количество() = 0 Тогда
		СтрокаПолучатели = ОбъектАВР.Получатели.Добавить();
	Иначе
		СтрокаПолучатели = ОбъектАВР.Получатели[0];
	КонецЕсли;
	СтруктураДанных = СтруктураЗаполнения.СтруктураДанныхПолучатели;
	Если НЕ СтруктураДанных = Неопределено Тогда 
		ЗаполнитьЗначенияСвойств(СтрокаПолучатели, СтруктураДанных, "Получатель, ПолучательНаименование, ПолучательИдентификатор, Адрес, КБе, ИИК, НаименованиеБанка, БИК, ТипРегистрации");
		СтрокаПолучатели.Нерезидент = АВРСерверПереопределяемый.Нерезидент(СтрокаПолучатели.Получатель);
		//Портал ИС ЭСФ не принимает АВР с получателем Нерезидент и указанной категорией, поэтому очистим в случае нерезидента
		Если СтрокаПолучатели.Нерезидент Тогда
			СтрокаПолучатели.ТипРегистрации = Перечисления.ТипыРегистрацииНПАВР.ПустаяСсылка();
		КонецЕсли;
			
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("ДокументОснование") Тогда
		УчитыватьНДС = ДанныеЗаполнения.ДокументОснование.УчитыватьНДС;
	Иначе
		УчитыватьНДС = ДанныеЗаполнения.УчитыватьНДС;
	КонецЕсли;
	
	//Заполняем табличную часть "Услуги"
	Для Каждого СтрокаТЧ Из СтруктураЗаполнения.Услуги Цикл
		
		БезНДС = СтрокаТЧ.БезНДС;
		
		Если НЕ УчитыватьНДС И БезНДС Тогда 
			СтрокаТЧ.СтавкаНДС = ЭСФВызовСервераПовтИсп.ПолучитьПредопределенноеЗначениеСтавкиНДС(Истина);
		КонецЕсли;

		НоваяСтрокаТЧ = ОбъектАВР.Услуги.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТЧ, СтрокаТЧ);
		
	КонецЦикла;
	
	//Заполняем итоговые суммы
	ОбъектАВР.ИтогоРазмерОборота = ОбъектАВР.Услуги.Итог("РазмерОборота");
	ОбъектАВР.ИтогоСтоимостьБезУчетаКосвенныхНалогов = ОбъектАВР.Услуги.Итог("СтоимостьБезУчетаКосвенныхНалогов");
	ОбъектАВР.ИтогоСуммаНДС = ОбъектАВР.Услуги.Итог("СуммаНДС");
	ОбъектАВР.ИтогоСтоимостьСУчетомКосвенныхНалогов = ОбъектАВР.Услуги.Итог("СтоимостьСУчетомКосвенныхНалогов");
	
	ОбъектАВР.Состояние = АВРСервер.СостояниеАВР(ОбъектАВР);
	
	Если НЕ ЗначениеЗаполнено(ОбъектАВР.Автор) Тогда
		ОбъектАВР.Автор = ЭСФКлиентСерверПереопределяемый.ТекущийПользователь();
	КонецЕсли;
	
КонецПроцедуры

Процедура СобратьДанныеДляЗаполненияИсходящегоАВР(ДанныеЗаполнения, СтруктураЗаполнения) Экспорт
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
			СсылкаНаДокументИБ = ДанныеЗаполнения.ДокументОснование;
			РеквизитыДокумента = ДанныеЗаполнения.СтруктураДанных.ДанныеКурсаИОснования.Получить(СсылкаНаДокументИБ);
			КурсВалюты = 1;
			Если РеквизитыДокумента.ВалютаДокумента <> ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета() Тогда
				СтруктураКурса = ОбщегоНазначенияБК.ПолучитьКурсВалюты(РеквизитыДокумента.ВалютаДокумента, РеквизитыДокумента.Дата);
				КурсВалюты = СтруктураКурса.Курс * СтруктураКурса.Кратность;
			КонецЕсли;
			
			СтруктураДанных = ДанныеЗаполнения.СтруктураДанных.ДанныеДляЗаполненияЭАВР;
		
	Иначе
			СсылкаНаДокументИБ = ДанныеЗаполнения;
			РеквизитыДокумента = ЭСФСерверПереопределяемый.ЗначенияРеквизитовОбъекта(СсылкаНаДокументИБ, "ВалютаДокумента, Дата, ДатаПодписанияГЗ");
			КурсВалюты = 1;
			Если РеквизитыДокумента.ВалютаДокумента <> ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета() Тогда
				СтруктураКурса = ОбщегоНазначенияБК.ПолучитьКурсВалюты(РеквизитыДокумента.ВалютаДокумента, РеквизитыДокумента.Дата);
				КурсВалюты = СтруктураКурса.Курс * СтруктураКурса.Кратность;
			КонецЕсли;
			МассивОбъектов = Новый Массив;
			МассивОбъектов.Добавить(СсылкаНаДокументИБ);
		
			СтруктураДанных = ПолучитьДанныеДляЗаполненияЭАВР(МассивОбъектов);
		
	КонецЕсли;
	
	ДанныеШапки = СтруктураДанных.РезультатПоШапке.Выбрать();
	Если НЕ ДанныеШапки.НайтиСледующий(Новый Структура("Ссылка", СсылкаНаДокументИБ)) Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(СтруктураЗаполнения.Реквизиты, ДанныеШапки);
	
	Если СтруктураЗаполнения.Реквизиты.Свойство("СвязанныйАВР") Тогда
		ДанныеСвязанныхАВР = СтруктураДанных.РезультатПоСвязаннымАВР.Выбрать();
		Если ДанныеСвязанныхАВР.НайтиСледующий(Новый Структура("Ссылка", СсылкаНаДокументИБ)) Тогда
			ЗаполнитьЗначенияСвойств(СтруктураЗаполнения.Реквизиты, ДанныеСвязанныхАВР);
		КонецЕсли;
	КонецЕсли;
	
	Поставщик = СтруктураЗаполнения.Реквизиты.Поставщик;
	
	Если ЗначениеЗаполнено(Поставщик) Тогда
		СтруктураДанныхПоставщики = АВРСерверПереопределяемый.ПолучитьРеквизитыОрганизации(Поставщик, "Поставщик", СтруктураЗаполнения.Реквизиты);
	Иначе
		СтруктураДанныхПоставщики = Неопределено;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(СтруктураЗаполнения.СтруктураДанныхПоставщики, СтруктураДанныхПоставщики);
	
	Получатель = СтруктураЗаполнения.Реквизиты.Контрагент;
	Если ЗначениеЗаполнено(Получатель) Тогда
		СтруктураДанныхПолучатели = АВРСерверПереопределяемый.ПолучитьРеквизитыКонтрагента(СтруктураЗаполнения.Реквизиты.Контрагент, "Получатель", СтруктураЗаполнения.Реквизиты);
	Иначе
		СтруктураДанныхПолучатели = Неопределено;
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(СтруктураЗаполнения.СтруктураДанныхПолучатели, СтруктураДанныхПолучатели);
	
	
	ВыборкаУслугиИтоги = СтруктураДанных.РезультатПоТабличнойЧасти.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Если ВыборкаУслугиИтоги.НайтиСледующий(Новый Структура("Ссылка", СсылкаНаДокументИБ)) Тогда
		ВыборкаУслуги = ВыборкаУслугиИтоги.Выбрать();
		Пока ВыборкаУслуги.Следующий() Цикл
			СтрокаУслуги = СтруктураЗаполнения.Услуги.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаУслуги, ВыборкаУслуги);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьДанныеДляЗаполненияЭАВР(МассивОснований)
	
	//БК
	Запрос = Новый Запрос;
	
	Если ТипЗнч(МассивОснований[0]) = Тип("ДокументСсылка.АктОбОказанииПроизводственныхУслуг") Тогда
		Запрос.Текст = ТекстЗапросаАктОбОказанииПроизводственныхУслуг();
		Запрос.УстановитьПараметр("СтавкаБезНДС",
			ЭСФВызовСервераПовтИсп.ПолучитьПредопределенноеЗначениеСтавкиНДС(Истина));
	ИначеЕсли ТипЗнч(МассивОснований[0]) = Тип("ДокументСсылка.РеализацияУслугПоПереработке") Тогда
		Запрос.Текст = ТекстЗапросаРеализацияУслугПоПереработке();
	ИначеЕсли ТипЗнч(МассивОснований[0]) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		Запрос.Текст = ТекстЗапросаРеализацияТоваровУслуг();
	Иначе
		Запрос.Текст = "ВЫБРАТЬ """" КАК Ссылка;ВЫБРАТЬ """" КАК Ссылка";
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ДатаСреза"		, КонецДня(ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("МассивОснований"	, МассивОснований);
	Запрос.УстановитьПараметр("ПустаяДата"      , '00010101');
	Запрос.УстановитьПараметр("ПервичныйАВР"    , Перечисления.ТипыАВР.Первичный);
	
	СтатусыАВР = Новый Массив;
	СтатусыАВР.Добавить(Перечисления.СтатусыАВР.Подтвержденный);
	СтатусыАВР.Добавить(Перечисления.СтатусыАВР.НаСтадииРасторжения);
	Запрос.УстановитьПараметр("СтатусыАВР"      , СтатусыАВР);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
		
	Возврат Новый Структура(
		"РезультатПоШапке, РезультатПоТабличнойЧасти, РезультатПоСвязаннымАВР",
		МассивРезультатов[МассивРезультатов.Количество()- 3],
		МассивРезультатов[МассивРезультатов.Количество()- 2],
		МассивРезультатов[МассивРезультатов.Количество()- 1]
	);
	
КонецФункции

Процедура ЗаполнитьСоответсвиеИменРеквизитовПолейЗапросов(СоответсвиеИменРеквизитовПолейЗапросов) Экспорт
	
	Для Каждого ЭлементСоответсвия Из СоответсвиеИменРеквизитовПолейЗапросов Цикл
		Значение = "";
		Если ЭлементСоответсвия.Ключ = "%ДокументОснованиеДата" Тогда
			Значение = "Дата" ;			
		КонецЕсли;
		
		СоответсвиеИменРеквизитовПолейЗапросов.Вставить(ЭлементСоответсвия.Ключ, Значение);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСсылкиЕдиницИзмеренияАВР(МассивАВР) Экспорт
	
	Если МассивАВР.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МассивСсылокАВР = Новый Массив;
	Для Каждого Документ Из МассивАВР Цикл
		МассивСсылокАВР.Добавить(Документ.Ссылка);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЭлектронныйАктВыполненныхРаботУслуги.ЕдиницаИзмеренияКод КАК Код,
		|	МАКСИМУМ(КлассификаторЕдиницИзмерения.Ссылка) КАК Ссылка
		|ИЗ
		|	Документ.ЭлектронныйАктВыполненныхРабот.Услуги КАК ЭлектронныйАктВыполненныхРаботУслуги
		//БК3
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторЕдиницИзмерения КАК КлассификаторЕдиницИзмерения
		|		ПО ЭлектронныйАктВыполненныхРаботУслуги.ЕдиницаИзмеренияКод = КлассификаторЕдиницИзмерения.КодЭСФ
		|ГДЕ
		|	ЭлектронныйАктВыполненныхРаботУслуги.Ссылка В(&МассивАВР)
		|
		|СГРУППИРОВАТЬ ПО
		|	ЭлектронныйАктВыполненныхРаботУслуги.ЕдиницаИзмеренияКод";
		
	Запрос.УстановитьПараметр("МассивАВР", МассивСсылокАВР);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	СоответствиеЕдиницИзмерения = Новый Соответствие;
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СоответствиеЕдиницИзмерения.Вставить(ВыборкаДетальныеЗаписи.Код, ВыборкаДетальныеЗаписи.Ссылка);
	КонецЦикла;
	
	Для Каждого Документ из МассивАВР Цикл
		Для Каждого Строка Из Документ.Услуги Цикл
			Строка.ЕдиницаИзмерения = СоответствиеЕдиницИзмерения[Строка.ЕдиницаИзмеренияКод];
			Строка.ЕдиницаИзмеренияНаименование = ЭСФСерверПереопределяемый.ЗначениеРеквизитаОбъекта(Строка.ЕдиницаИзмерения, "Наименование")
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьНаименованияЕдиницИзмерений(ТаблицаСоответствий) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаСоответствий.Контрагент,
	|	ТаблицаСоответствий.ЕдиницаИзмеренияКод,
	|	ТаблицаСоответствий.УслугаНаименование,
	|	ТаблицаСоответствий.Услуга,
	|	ТаблицаСоответствий.ЕдиницаИзмерения,
	|	ТаблицаСоответствий.КоэффициентПересчета
	|ПОМЕСТИТЬ ТаблицаСоответствий
	|ИЗ
	|	&ТаблицаСоответствий КАК ТаблицаСоответствий
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСоответствий.Контрагент,
	|	ТаблицаСоответствий.ЕдиницаИзмеренияКод,
	|	ТаблицаСоответствий.УслугаНаименование,
	|	ТаблицаСоответствий.Услуга,
	|	ТаблицаСоответствий.ЕдиницаИзмерения,
	|	ТаблицаСоответствий.КоэффициентПересчета,
	|	КлассификаторЕдиницИзмерения.Наименование КАК ЕдиницаИзмеренияНаименование
	|ИЗ
	|	ТаблицаСоответствий КАК ТаблицаСоответствий
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторЕдиницИзмерения КАК КлассификаторЕдиницИзмерения
	|		ПО КлассификаторЕдиницИзмерения.Ссылка = ТаблицаСоответствий.ЕдиницаИзмерения";
	
	Запрос.Параметры.Вставить("ТаблицаСоответствий", ТаблицаСоответствий);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаСоответствий = РезультатЗапроса.Выгрузить();
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыКонтрагентаАВР(Знач ОбъектАВР, Знач ПоставщикиСтрока) Экспорт
		
	НачатьТранзакцию();
	
	Попытка                                                              
		
		ТекстКомментария = АВРКлиентСервер.ТекстКомментарияСозданПоДаннымАВР(ОбъектАВР.Ссылка);		
		ОбъектКонтрагент = ПоставщикиСтрока.Поставщик.ПолучитьОбъект();
		
		//Проверяем заполнение поля Наименование: если не заполнено, записать новые данные поставщика не можем.
		Если Не ЗначениеЗаполнено(ПоставщикиСтрока.ПоставщикНаименование) Тогда
			ОтменитьТранзакцию();
			ТекстСообщения = НСтр("ru = 'Невозможно заполнить реквизиты по данным АВР, так как не заполнено поле ""Наименование исполнителя (поставщика)"".'");
			ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецЕсли;
		
		/////////////////////////////////////////////////////////////////////////////
		// Заполнить реквизиты контрагента.
		Если ТипЗнч(ПоставщикиСтрока.Поставщик) = Тип("СправочникСсылка.Контрагенты") Тогда
			ОбъектКонтрагент.ИдентификационныйКодЛичности = ПоставщикиСтрока.ПоставщикИдентификатор;
			ОбъектКонтрагент.Комментарий = ТекстКомментария;
		Иначе
			ОбъектКонтрагент.ИдентификационныйНомер = ПоставщикиСтрока.ПоставщикИдентификатор;
		КонецЕсли;
		ОбъектКонтрагент.Наименование = ПоставщикиСтрока.ПоставщикНаименование;	
		ОбъектКонтрагент.НаименованиеПолное = ПоставщикиСтрока.ПоставщикНаименование;
		Если Не ТипЗнч(ПоставщикиСтрока.Поставщик) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда 
			ОбъектКонтрагент.СерияСвидетельстваПоНДС = ПоставщикиСтрока.СерияСвидетельстваПоНДС;
			ОбъектКонтрагент.НомерСвидетельстваПоНДС = ПоставщикиСтрока.НомерСвидетельстваПоНДС;
			ОбъектКонтрагент.КБЕ = ПоставщикиСтрока.КБе;
		КонецЕсли;
				
		/////////////////////////////////////////////////////////////////////////////
		// Создать и записать адрес контрагента.
		Запись = РегистрыСведений.КонтактнаяИнформация.СоздатьМенеджерЗаписи();
		Запись.Объект = ОбъектКонтрагент.Ссылка;
		Запись.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
		Запись.Вид = Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента;
		Запись.Представление = ПоставщикиСтрока.Адрес;
		Запись.Записать();	
		
		/////////////////////////////////////////////////////////////////////////////
		// Создать и записать банковский счет контрагента.
		Если ЗначениеЗаполнено(ПоставщикиСтрока.ИИК)
			И ЗначениеЗаполнено(ПоставщикиСтрока.БИК)
			И ЗначениеЗаполнено(ПоставщикиСтрока.НаименованиеБанка) Тогда
			
			/////////////////////////////////////////////////////////////////////////////
			// Найти банк по БИК, если его нет, то создать.
			СсылкаБанк = НайтиБанкПоБИК(ПоставщикиСтрока.БИК);			
			Если НЕ ЗначениеЗаполнено(СсылкаБанк) Тогда
				ОбъектБанк = Справочники.Банки.СоздатьЭлемент();
				ОбъектБанк.Наименование = ПоставщикиСтрока.НаименованиеБанка;
				ОбъектБанк.БИК = ПоставщикиСтрока.БИК;
				ОбъектБанк.Записать();
				СсылкаБанк = ОбъектБанк.Ссылка;
			КонецЕсли;
			
			/////////////////////////////////////////////////////////////////////////////
			// Проверить, что такого банковского счета контрагента нет.
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	БанковскиеСчета.Ссылка
			|ИЗ
			|	Справочник.БанковскиеСчета КАК БанковскиеСчета
			|ГДЕ
			|	БанковскиеСчета.Владелец = &Контрагент
			|	И БанковскиеСчета.Банк = &Банк
			|	И БанковскиеСчета.ВалютаДенежныхСредств = &Валюта
			|	И БанковскиеСчета.ПометкаУдаления = ЛОЖЬ";
			
			Запрос.УстановитьПараметр("Банк", СсылкаБанк);
			Запрос.УстановитьПараметр("Валюта", ОбъектАВР.Валюта);
			Запрос.УстановитьПараметр("Контрагент", ОбъектКонтрагент.Ссылка);
			
			Результат = Запрос.Выполнить();
			
			/////////////////////////////////////////////////////////////////////////////
			// Создать и записать банковский счет контрагента.			
			Если Результат.Пустой() Тогда
				
				ОбъектСчет = Справочники.БанковскиеСчета.СоздатьЭлемент();
				НаименованиеСчета = НСтр("ru = '[НомерСчета] в [Банк]'");
				НаименованиеСчета = СтрЗаменить(НаименованиеСчета, "[НомерСчета]", ПоставщикиСтрока.ИИК);
				НаименованиеСчета = СтрЗаменить(НаименованиеСчета, "[Банк]", СсылкаБанк);
				ОбъектСчет.Наименование = НаименованиеСчета;
				Если ТипЗнч(ПоставщикиСтрока.Поставщик) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда 
					ОбъектСчет.Владелец = ЭСФСерверПереопределяемый.ЗначениеРеквизитаОбъекта(ОбъектКонтрагент.Ссылка, "Владелец");
				Иначе
					ОбъектСчет.Владелец = ОбъектКонтрагент.Ссылка;			
				КонецЕсли;
				ОбъектСчет.ВалютаДенежныхСредств = ОбъектАВР.Валюта;
				ОбъектСчет.ВидСчета = "Расчетный";
				ОбъектСчет.МесяцПрописью = Истина;
				ОбъектСчет.НомерСчета = ПоставщикиСтрока.ИИК;
				ОбъектСчет.Банк = СсылкаБанк; 
				
				ОбъектСчет.Записать();
				
				Если НЕ ЗначениеЗаполнено(ОбъектКонтрагент.ОсновнойБанковскийСчет) Тогда
					ОбъектКонтрагент.ОсновнойБанковскийСчет = ОбъектСчет.Ссылка;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		// С договорами работаем, только если выбран элемент справочника Контрагенты.
		Если ТипЗнч(ПоставщикиСтрока.Поставщик) = Тип("СправочникСсылка.Контрагенты") Тогда
			/////////////////////////////////////////////////////////////////////////////
			// Проверить, что такого договора контрагента нет.
			МассивДоговоров = НайтиДоговорыПоставкиПоДаннымАВР(ОбъектАВР, ПоставщикиСтрока, "Поставщики");
			
			/////////////////////////////////////////////////////////////////////////////
			// Создать, заполнить и записать договор контрагента.
			Если МассивДоговоров.Количество() = 0 Тогда
				
				ОбъектДоговор = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
				
				ОбъектДоговор.Наименование = АВРКлиентСервер.НаименованиеДоговора(ОбъектАВР);
				ОбъектДоговор.Владелец = ОбъектКонтрагент.Ссылка;
				ОбъектДоговор.ВалютаВзаиморасчетов = ОбъектАВР.Валюта;
				ОбъектДоговор.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом;
				ОбъектДоговор.Комментарий = ТекстКомментария;
				ОбъектДоговор.Организация = ОбъектАВР.Организация;
				ОбъектДоговор.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком;
				ОбъектДоговор.НомерДоговора = ОбъектАВР.НомерДоговора;
				ОбъектДоговор.ДатаДоговора = ОбъектАВР.ДатаДоговора;
				
				ОбъектДоговор.Записать();
				
				Если НЕ ЗначениеЗаполнено(ОбъектКонтрагент.ОсновнойДоговорКонтрагента) Тогда
					ОбъектКонтрагент.ОсновнойДоговорКонтрагента = ОбъектДоговор.Ссылка;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		/////////////////////////////////////////////////////////////////////////////
		// Повторно записать контрагента и зафиксировать транзакцию.
		ОбъектКонтрагент.Записать();
		ЗафиксироватьТранзакцию();
				
	Исключение
		
		ОтменитьТранзакцию();
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ВызватьИсключение ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		
	КонецПопытки;
		
КонецПроцедуры

Функция ПроверитьРегистрациюДоговора(ДанныеЗаполнения) Экспорт
	
	ДоговорЗарегистрирован = Истина;
	
	//БК3
	Если ДанныеЗаполнения.Договор.ДатаДоговора = Дата('00010101') ИЛИ НЕ ЗначениеЗаполнено(ДанныеЗаполнения.Договор.НомерДоговора) Тогда
		ДоговорЗарегистрирован = Ложь;
	КонецЕсли;
	
	Возврат ДоговорЗарегистрирован;
	
КонецФункции

Функция Нерезидент(ПоставщикПолучатель) Экспорт
	
	//БК3
	СтранаРезидентства = ЭСФСерверПереопределяемый.ЗначениеРеквизитаОбъекта(ПоставщикПолучатель,"СтранаРезидентства");
	Если СтранаРезидентства = Справочники.КлассификаторСтранМира.ПустаяСсылка()
		ИЛИ СтранаРезидентства = Справочники.КлассификаторСтранМира.Казахстан Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьРеквизитыОрганизации(Организация, ПоставщикПолучатель, РеквизитыДокументаОснования = Неопределено)  Экспорт
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить(ПоставщикПолучатель, "");	
	СтруктураДанных.Вставить(ПоставщикПолучатель+"Наименование", "");
	СтруктураДанных.Вставить(ПоставщикПолучатель+"Идентификатор", "");
	СтруктураДанных.Вставить("Адрес", "");
	СтруктураДанных.Вставить("НомерСвидетельстваПоНДС", "");
	СтруктураДанных.Вставить("СерияСвидетельстваПоНДС", "");
	СтруктураДанных.Вставить("КБе", "");
	СтруктураДанных.Вставить("БанковскийСчет", "");
	СтруктураДанных.Вставить("ИИК", "");
	СтруктураДанных.Вставить("НаименованиеБанка", "");
	СтруктураДанных.Вставить("БИК", "");
	СтруктураДанных.Вставить("ТипРегистрации", "");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫБОР
	|		КОГДА Организации.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ФизЛицо)
	|			ТОГДА Организации.ИндивидуальныйПредприниматель
	|		ИНАЧЕ Организации.Ссылка
	|	КОНЕЦ КАК ОбъектДляПоискаАдреса,
	|	ВЫБОР
	|		КОГДА (ВЫРАЗИТЬ(Организации.НаименованиеПолное КАК СТРОКА(200))) <> """"
	|			ТОГДА ВЫРАЗИТЬ(Организации.НаименованиеПолное КАК СТРОКА(200))
	|		ИНАЧЕ Организации.Наименование
	|	КОНЕЦ КАК Наименование,
	|	Организации.ИдентификационныйНомер КАК ИдентификационныйНомер,
	|	Организации.НомерСвидетельстваПоНДС КАК НомерСвидетельстваПоНДС,
	|	Организации.СерияСвидетельстваПоНДС КАК СерияСвидетельстваПоНДС,
	|	Организации.Ссылка КАК Ссылка,
	|	Организации.КБЕ КАК КБЕ,
	|	ВЫБОР
	|		КОГДА Организации.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ФизЛицо)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыРегистрацииНПАВР.ИндивидуальныйПредприниматель)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыРегистрацииНПАВР.ЮридическоеЛицо)
	|	КОНЕЦ КАК ТипРегистрации
	|ПОМЕСТИТЬ ОбъектыДляПоискаАдресов
	|ИЗ
	|	Справочник.Организации КАК Организации
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.БанковскиеСчета КАК БанковскиеСчета
	|		ПО Организации.ОсновнойБанковскийСчет = БанковскиеСчета.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФЛ
	|		ПО Организации.ИндивидуальныйПредприниматель = ФЛ.Ссылка
	|ГДЕ
	|	Организации.Ссылка = &Организация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПодразделенияОрганизаций.Ссылка,
	|	ВЫБОР
	|		КОГДА (ВЫРАЗИТЬ(ПодразделенияОрганизаций.НаименованиеПолное КАК СТРОКА(200))) <> """"
	|			ТОГДА ВЫРАЗИТЬ(ПодразделенияОрганизаций.НаименованиеПолное КАК СТРОКА(200))
	|		ИНАЧЕ ПодразделенияОрганизаций.Наименование
	|	КОНЕЦ,
	|	ПодразделенияОрганизаций.ИдентификационныйНомер,
	|	"""",
	|	"""",
	|	ПодразделенияОрганизаций.Ссылка,
	|	"""",
	|	""""
	|ИЗ
	|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.БанковскиеСчета КАК БанковскиеСчета
	|		ПО ПодразделенияОрганизаций.ОсновнойБанковскийСчет = БанковскиеСчета.Ссылка
	|ГДЕ
	|	ПодразделенияОрганизаций.Ссылка = &Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ОбъектыДляПоискаАдресов.ОбъектДляПоискаАдреса КАК Объект,
	|	ВЫРАЗИТЬ(КонтактнаяИнформация.Представление КАК СТРОКА(400)) КАК Адрес,
	|	ОбъектыДляПоискаАдресов.ИдентификационныйНомер КАК Идентификатор,
	|	ОбъектыДляПоискаАдресов.Наименование КАК Наименование,
	|	ОбъектыДляПоискаАдресов.НомерСвидетельстваПоНДС КАК НомерСвидетельстваПоНДС,
	|	ОбъектыДляПоискаАдресов.СерияСвидетельстваПоНДС КАК СерияСвидетельстваПоНДС,
	|	ОбъектыДляПоискаАдресов.Ссылка КАК Ссылка,
	|	ОбъектыДляПоискаАдресов.КБЕ КАК КБЕ,
	|	ОбъектыДляПоискаАдресов.ТипРегистрации КАК ТипРегистрации
	|ИЗ
	|	ОбъектыДляПоискаАдресов КАК ОбъектыДляПоискаАдресов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|		ПО (КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес))
	|			И ОбъектыДляПоискаАдресов.ОбъектДляПоискаАдреса = КонтактнаяИнформация.Объект
	|			И (КонтактнаяИнформация.Вид В (ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ЮрАдресКонтрагента), ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ЮрАдресОрганизации), ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ЮрАдресФизЛица)))";
	
	РезультатЗапроса		= Запрос.Выполнить();
	ВыборкаДетальныеЗаписи	= РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий()Тогда
		СтруктураДанных.Вставить(ПоставщикПолучатель, ВыборкаДетальныеЗаписи.Ссылка);
		СтруктураДанных.Вставить(ПоставщикПолучатель+"Наименование", ВыборкаДетальныеЗаписи.Наименование);
		СтруктураДанных.Вставить(ПоставщикПолучатель+"Идентификатор", ВыборкаДетальныеЗаписи.Идентификатор);
		СтруктураДанных.Вставить("Адрес", ВыборкаДетальныеЗаписи.Адрес);
		СтруктураДанных.Вставить("НомерСвидетельстваПоНДС", ВыборкаДетальныеЗаписи.НомерСвидетельстваПоНДС);
		СтруктураДанных.Вставить("СерияСвидетельстваПоНДС", ВыборкаДетальныеЗаписи.СерияСвидетельстваПоНДС);
		СтруктураДанных.Вставить("КБе", ВыборкаДетальныеЗаписи.КБЕ);
		СтруктураДанных.Вставить("ТипРегистрации", ВыборкаДетальныеЗаписи.ТипРегистрации);
	КонецЕсли;
	
	Если РеквизитыДокументаОснования <> Неопределено Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("БанковскийСчетОрганизации", РеквизитыДокументаОснования.БанковскийСчетОрганизации);
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	БанковскиеСчета.Ссылка КАК Счет,
		|	Банки.Наименование КАК НаименованиеБанка,
		|	БанковскиеСчета.НомерСчета КАК ИИК,
		|	Банки.БИК КАК БИК
		|ИЗ
		|	Справочник.БанковскиеСчета КАК БанковскиеСчета
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Банки КАК Банки
		|		ПО БанковскиеСчета.Банк = Банки.Ссылка
		|ГДЕ
		|	БанковскиеСчета.Ссылка = &БанковскийСчетОрганизации
		|";
		
		РезультатЗапроса		= Запрос.Выполнить();
		ВыборкаДетальныеЗаписи	= РезультатЗапроса.Выбрать();
		
		Если ВыборкаДетальныеЗаписи.Следующий()Тогда
			СтруктураДанных.Вставить("БанковскийСчет", ВыборкаДетальныеЗаписи.Счет);
			СтруктураДанных.Вставить("ИИК", ВыборкаДетальныеЗаписи.ИИК);
			СтруктураДанных.Вставить("НаименованиеБанка", ВыборкаДетальныеЗаписи.НаименованиеБанка);
			СтруктураДанных.Вставить("БИК", ВыборкаДетальныеЗаписи.БИК);		
		КонецЕсли;
	КонецЕсли;

	Возврат СтруктураДанных;
	
КонецФункции

Функция ПолучитьРеквизитыКонтрагента(Контрагент, ПоставщикПолучатель, РеквизитыДокументаОснования = Неопределено)  Экспорт
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить(ПоставщикПолучатель, "");
	СтруктураДанных.Вставить(ПоставщикПолучатель+"Наименование", "");
	СтруктураДанных.Вставить(ПоставщикПолучатель+"Идентификатор", "");
	СтруктураДанных.Вставить("Адрес", "");
	СтруктураДанных.Вставить("НомерСвидетельстваПоНДС", "");
	СтруктураДанных.Вставить("СерияСвидетельстваПоНДС", "");
	СтруктураДанных.Вставить("КБе", "");
	СтруктураДанных.Вставить("БанковскийСчет", "");
	СтруктураДанных.Вставить("ИИК", "");
	СтруктураДанных.Вставить("НаименованиеБанка", "");
	СтруктураДанных.Вставить("БИК", "");
	СтруктураДанных.Вставить("ТипРегистрации", "");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Контрагенты.Ссылка КАК Контрагент,
	|	ВЫБОР
	|		КОГДА (ВЫРАЗИТЬ(Контрагенты.НаименованиеПолное КАК СТРОКА(200))) <> """"
	|			ТОГДА ВЫРАЗИТЬ(Контрагенты.НаименованиеПолное КАК СТРОКА(200))
	|		ИНАЧЕ Контрагенты.Наименование
	|	КОНЕЦ КАК Наименование,
	|	Контрагенты.НомерСвидетельстваПоНДС КАК НомерСвидетельстваПоНДС,
	|	Контрагенты.СерияСвидетельстваПоНДС КАК СерияСвидетельстваПоНДС,
	|	БанковскиеСчета.Ссылка КАК Счет,
	|	Банки.Наименование КАК НаименованиеБанка,
	|	БанковскиеСчета.НомерСчета КАК ИИК,
	|	Банки.БИК КАК БИК,
	|	Контрагенты.Ссылка КАК Ссылка,
	|	Контрагенты.ИдентификационныйКодЛичности КАК ИдентификационныйКодЛичности,
	|	Контрагенты.КБЕ КАК КБЕ,
	|	ВЫБОР
	|		КОГДА Контрагенты.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ЮрЛицо)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыРегистрацииНПАВР.ЮридическоеЛицо)
	|		ИНАЧЕ ВЫБОР
	|				КОГДА Контрагенты.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ФизЛицо)
	|						И НЕ Контрагенты.ИндивидуальныйПредпринимательАдвокатЧастныйНотариус
	|					ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыРегистрацииНПАВР.ФизическоеЛицо)
	|				ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыРегистрацииНПАВР.ИндивидуальныйПредприниматель)
	|			КОНЕЦ
	|	КОНЕЦ КАК ТипРегистрации
	|ПОМЕСТИТЬ ОбъектыДляПоискаАдресов
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.БанковскиеСчета КАК БанковскиеСчета
	|		ПО Контрагенты.ОсновнойБанковскийСчет = БанковскиеСчета.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Банки КАК Банки
	|		ПО (БанковскиеСчета.Банк = Банки.Ссылка)
	|ГДЕ
	|	Контрагенты.Ссылка = &Контрагент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
	|	ВЫРАЗИТЬ(КонтактнаяИнформация.Представление КАК СТРОКА(400)) КАК Адрес,
	|	ОбъектыДляПоискаАдресов.Наименование КАК Наименование,
	|	ОбъектыДляПоискаАдресов.НомерСвидетельстваПоНДС КАК НомерСвидетельстваПоНДС,
	|	ОбъектыДляПоискаАдресов.СерияСвидетельстваПоНДС КАК СерияСвидетельстваПоНДС,
	|	ОбъектыДляПоискаАдресов.Счет КАК Счет,
	|	ОбъектыДляПоискаАдресов.НаименованиеБанка КАК НаименованиеБанка,
	|	ОбъектыДляПоискаАдресов.ИИК КАК ИИК,
	|	ОбъектыДляПоискаАдресов.БИК КАК БИК,
	|	ОбъектыДляПоискаАдресов.ИдентификационныйКодЛичности КАК Идентификатор,
	|	ОбъектыДляПоискаАдресов.Ссылка КАК Ссылка,
	|	ОбъектыДляПоискаАдресов.КБЕ КАК КБЕ,
	|	ОбъектыДляПоискаАдресов.ТипРегистрации КАК ТипРегистрации,
	|	ВЫБОР
	|		КОГДА КонтактнаяИнформация.Вид В (ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ЮрАдресКонтрагента), ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ЮрАдресОрганизации), ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ЮрАдресФизЛица))
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК Приоритет
	|ИЗ
	|	ОбъектыДляПоискаАдресов КАК ОбъектыДляПоискаАдресов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|		ПО (КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес))
	|			И ОбъектыДляПоискаАдресов.Контрагент = КонтактнаяИнформация.Объект
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет";
	
	РезультатЗапроса		= Запрос.Выполнить();
	ВыборкаДетальныеЗаписи	= РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий()Тогда
		СтруктураДанных.Вставить(ПоставщикПолучатель, ВыборкаДетальныеЗаписи.Ссылка);
		СтруктураДанных.Вставить(ПоставщикПолучатель+"Наименование", ВыборкаДетальныеЗаписи.Наименование);
		СтруктураДанных.Вставить(ПоставщикПолучатель+"Идентификатор", ВыборкаДетальныеЗаписи.Идентификатор);
		СтруктураДанных.Вставить("Адрес", ВыборкаДетальныеЗаписи.Адрес);
		СтруктураДанных.Вставить("НомерСвидетельстваПоНДС", ВыборкаДетальныеЗаписи.НомерСвидетельстваПоНДС);
		СтруктураДанных.Вставить("СерияСвидетельстваПоНДС", ВыборкаДетальныеЗаписи.СерияСвидетельстваПоНДС);
		СтруктураДанных.Вставить("КБе", ВыборкаДетальныеЗаписи.КБЕ);
		СтруктураДанных.Вставить("БанковскийСчет", ВыборкаДетальныеЗаписи.Счет);
		СтруктураДанных.Вставить("ИИК", ВыборкаДетальныеЗаписи.ИИК);
		СтруктураДанных.Вставить("НаименованиеБанка", ВыборкаДетальныеЗаписи.НаименованиеБанка);
		СтруктураДанных.Вставить("БИК", ВыборкаДетальныеЗаписи.БИК);
		СтруктураДанных.Вставить("ТипРегистрации", ВыборкаДетальныеЗаписи.ТипРегистрации);
	КонецЕсли;
	
	Возврат СтруктураДанных;

КонецФункции

Функция НайтиБанкПоБИК(БИК) Экспорт
	
	СсылкаБанк = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	//БК3
	"ВЫБРАТЬ
	|	Банки.Ссылка
	|ИЗ
	|	Справочник.Банки КАК Банки
	|ГДЕ
	|	Банки.БИК = &БИК
	|	И Банки.ПометкаУдаления = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("БИК", БИК);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		СсылкаБанк = Выборка.Ссылка;	
	Иначе
		СсылкаБанк = Неопределено;	
	КонецЕсли;
	
	Возврат СсылкаБанк;
	
КонецФункции

Функция НайтиДоговорыПоставкиПоДаннымАВР(Знач Объект, Знач СтрокаКонтрагент, Знач ИмяТаблицыКонтрагента) Экспорт
	
	МассивДоговоров = Новый Массив;
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	//БК3
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДоговорыКонтрагентов.Ссылка
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.НомерДоговора = &НомерДоговора
	|	И ДоговорыКонтрагентов.ДатаДоговора = &ДатаДоговора
	|	И ДоговорыКонтрагентов.Владелец = &Контрагент
	|	И ДоговорыКонтрагентов.Организация = &Организация
	|	И ДоговорыКонтрагентов.ВалютаВзаиморасчетов = &ВалютаВзаиморасчетов
	|	И ДоговорыКонтрагентов.ПометкаУдаления = ЛОЖЬ";
	
	СоответсвиеИменРеквизитов = Новый Соответствие;
	СоответсвиеИменРеквизитов.Вставить("%УсловиеДоговорыКонтрагентовУчастникСРП", "");
	
	ЭСФСерверПереопределяемый.ЗаполнитьСоответсвиеИменРеквизитовПолейЗапросов(СоответсвиеИменРеквизитов);
	
	ЭСФСервер.ЗаменитьИменаРеквизитовПолейЗапросов(ТекстЗапроса, СоответсвиеИменРеквизитов);
	
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("НомерДоговора", Объект.НомерДоговора);
	Запрос.УстановитьПараметр("ДатаДоговора", Объект.ДатаДоговора);
	
	Если ИмяТаблицыКонтрагента = "Поставщики" Тогда
		Запрос.УстановитьПараметр("Контрагент", СтрокаКонтрагент.Поставщик);
	Иначе // ИмяТаблицыКонтрагента = "Получатели"
		Запрос.УстановитьПараметр("Контрагент", СтрокаКонтрагент.Получатель);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("ВалютаВзаиморасчетов", Объект.Валюта);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		МассивДоговоров.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат МассивДоговоров;
	
КонецФункции

Функция ПолучитьКурсВалюты(Валюта, Дата) Экспорт
	
	//БК3
	КурсНаДату = ОбщегоНазначенияБК.ПолучитьКурсВалюты(Валюта, Дата);	
	
	КурсВалюты = КурсНаДату.Курс;
	Если КурсВалюты <> 0 Тогда
		Возврат КурсВалюты;
	Иначе 
		Возврат 1 ;
	КонецЕсли;
	
КонецФункции

Функция ДоступнаРольРедактированияАВР() Экспорт
	
	Возврат РольДоступна("ПолныеПрава")
		ИЛИ РольДоступна("ДобавлениеИзменениеЭлектронныхАВР");
			
КонецФункции

Функция ПолучитьНомерНаПечатьЭАВР(НомерУчетногоДокумента) Экспорт
	
	Возврат НомерУчетногоДокумента;
	
КонецФункции

Функция ТекстЗапросаРеализацияТоваровУслуг()
	
	ТекстЗапроса = ТекстЗапросаСведенияОНоменклатуреГСВС("РеализацияТоваровУслуг") +
	"ВЫБРАТЬ
	|	Док.Ссылка КАК Ссылка,
	|	Док.Организация КАК Организация,
	|	Док.Дата КАК ДатаВыполненияРабот,
	|	Док.Номер КАК Номер,
	|	Док.Контрагент КАК Контрагент,
	|	Док.ДоговорКонтрагента КАК Договор,
	|	Док.ДоговорКонтрагента.НомерДоговора КАК НомерДоговора,
	|	Док.ДоговорКонтрагента.ДатаДоговора КАК ДатаДоговора,
	|	Док.ВалютаДокумента КАК Валюта,
	|	ЕСТЬNULL(Валюты.БуквенныйКод, """") КАК КодВалюты,
	|	Док.КурсВзаиморасчетов КАК КурсВалюты,
	|	ЗНАЧЕНИЕ(Перечисление.НаправленияЭСФ.Исходящий) КАК Направление,
	|	Док.БанковскийСчетОрганизации КАК БанковскийСчетОрганизации,
	|	Док.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	|	ВЫБОР
	|		КОГДА Док.СтруктурноеПодразделение = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	|			ТОГДА Док.Организация
	|		ИНАЧЕ ВЫБОР
	|				КОГДА Док.СтруктурноеПодразделение.УказыватьРеквизитыГоловнойОрганизации
	|					ТОГДА Док.Организация
	|				ИНАЧЕ Док.СтруктурноеПодразделение
	|			КОНЕЦ
	|	КОНЕЦ КАК Поставщик,
	|	ВЫРАЗИТЬ(Док.ПереченьДокументации КАК СТРОКА(150)) КАК ПереченьДокументации
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК Док
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Валюты КАК Валюты
	|		ПО Док.ВалютаДокумента = Валюты.Ссылка
	|ГДЕ
	|	Док.Ссылка В (&МассивОснований)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументРеализацииУслуги.Ссылка КАК Ссылка,
	|	ДокументРеализацииУслуги.Номенклатура КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СведенияОНоменклатуреГСВСПоКодуИзНоменклатуры.НаименованиеНоменклатурыГСВС, """") ПОДОБНО """"
	|			ТОГДА
	|				ВЫБОР
	|					КОГДА НЕ ДокументРеализацииУслуги.Содержание ПОДОБНО """"
	|						ТОГДА ВЫРАЗИТЬ(ДокументРеализацииУслуги.Содержание КАК СТРОКА(400))
	|					КОГДА НЕ НоменклатураУслуг.НаименованиеПолное ПОДОБНО """"
	|						ТОГДА ВЫРАЗИТЬ(НоменклатураУслуг.НаименованиеПолное КАК СТРОКА(1000))
	|					ИНАЧЕ НоменклатураУслуг.Наименование
	|				КОНЕЦ
	|			ИНАЧЕ СведенияОНоменклатуреГСВСПоКодуИзНоменклатуры.НаименованиеНоменклатурыГСВС
	|	КОНЕЦ КАК УслугаНаименование,
	|	ВЫБОР
	|		КОГДА НЕ ДокументРеализацииУслуги.Содержание ПОДОБНО """"
	|			ТОГДА ВЫРАЗИТЬ(ДокументРеализацииУслуги.Содержание КАК СТРОКА(400))
	|		КОГДА НЕ НоменклатураУслуг.НаименованиеПолное ПОДОБНО """"
	|			ТОГДА ВЫРАЗИТЬ(НоменклатураУслуг.НаименованиеПолное КАК СТРОКА(1000))
	|		ИНАЧЕ НоменклатураУслуг.Наименование
	|	КОНЕЦ КАК НаименованиеУслугиВСистеме,
	|	НоменклатураУслуг.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	НоменклатураУслуг.БазоваяЕдиницаИзмерения.КодЭСФ КАК ЕдиницаИзмеренияКод,
	|	НоменклатураУслуг.БазоваяЕдиницаИзмерения.Наименование КАК ЕдиницаИзмеренияНаименование,
	|	ДокументРеализацииУслуги.Количество КАК Количество,
	|	ВЫБОР
	|		КОГДА ДокументРеализацииУслуги.Ссылка.СуммаВключаетНДС
	|				И ДокументРеализацииУслуги.Ссылка.УчитыватьНДС
	|			ТОГДА ВЫБОР
	|					КОГДА ДокументРеализацииУслуги.Цена = 0
	|						ТОГДА 0
	|					ИНАЧЕ (ДокументРеализацииУслуги.Сумма - ДокументРеализацииУслуги.СуммаНДС) / ДокументРеализацииУслуги.Количество
	|				КОНЕЦ
	|		ИНАЧЕ ДокументРеализацииУслуги.Цена
	|	КОНЕЦ КАК Цена,
	|	ВЫБОР
	|		КОГДА ДокументРеализацииУслуги.Ссылка.СуммаВключаетНДС
	|				И ДокументРеализацииУслуги.Ссылка.УчитыватьНДС
	|			ТОГДА ДокументРеализацииУслуги.Сумма - ДокументРеализацииУслуги.СуммаНДС
	|		ИНАЧЕ ДокументРеализацииУслуги.Сумма
	|	КОНЕЦ КАК СтоимостьБезУчетаКосвенныхНалогов,
	|	ВЫБОР
	|		КОГДА ДокументРеализацииУслуги.Ссылка.СуммаВключаетНДС
	|				ИЛИ НЕ ДокументРеализацииУслуги.Ссылка.УчитыватьНДС
	|			ТОГДА ДокументРеализацииУслуги.Сумма
	|		ИНАЧЕ ДокументРеализацииУслуги.Сумма * (1 + ЕСТЬNULL(СтавкиНДС.Ставка, 0) * 0.01)
	|	КОНЕЦ КАК СтоимостьСУчетомКосвенныхНалогов,
	|	ВЫБОР
	|		КОГДА ДокументРеализацииУслуги.Ссылка.СуммаВключаетНДС
	|				И ДокументРеализацииУслуги.Ссылка.УчитыватьНДС
	|			ТОГДА ДокументРеализацииУслуги.Сумма - ДокументРеализацииУслуги.СуммаНДС
	|		ИНАЧЕ ДокументРеализацииУслуги.Сумма
	|	КОНЕЦ КАК РазмерОборота,
	|	ВЫБОР
	|		КОГДА ДокументРеализацииУслуги.Ссылка.УчитыватьНДС
	|			ТОГДА ДокументРеализацииУслуги.СтавкаНДС
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СтавкиНДС.ПустаяСсылка)
	|	КОНЕЦ КАК СтавкаНДС,
	|	ВЫБОР
	|		КОГДА ДокументРеализацииУслуги.Ссылка.УчитыватьНДС
	|			ТОГДА СтавкиНДС.Ставка
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СтавкаНДСЧисло,
	|	ВЫБОР
	|		КОГДА ДокументРеализацииУслуги.Ссылка.УчитыватьНДС
	|			ТОГДА ЕСТЬNULL(СтавкиНДС.ДляОсвобожденногоОборота, ЛОЖЬ)
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК БезНДС,
	|	ДокументРеализацииУслуги.СуммаНДС КАК СуммаНДС,
	|	ЕСТЬNULL(СведенияОНоменклатуреГСВСПоКодуИзНоменклатуры.ПолныйКодГСВС, """") КАК СоставнойКодГСВС
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Услуги КАК ДокументРеализацииУслуги
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК НоменклатураУслуг
	|		ПО ДокументРеализацииУслуги.Номенклатура = НоменклатураУслуг.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтавкиНДС КАК СтавкиНДС
	|		ПО ДокументРеализацииУслуги.СтавкаНДС = СтавкиНДС.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_КодыГСВСАктуальные КАК СведенияОНоменклатуреГСВСПоКодуИзНоменклатуры
	|		ПО НоменклатураУслуг.КодКПВЭД = СведенияОНоменклатуреГСВСПоКодуИзНоменклатуры.КодГСВСПервичный
	|ГДЕ
	|	ДокументРеализацииУслуги.Ссылка В (&МассивОснований)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	НомерСтроки
	|ИТОГИ
	|	СУММА(РазмерОборота)
	|ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументРеализацииУслуги.Ссылка КАК Ссылка,
	//|	ДокументРеализацииУслуги.ДокументОснование КАК ДокументОснование,
	|	ЕСТЬNULL(ЭлектронныйАктВыполненныхРабот.Ссылка, ЗНАЧЕНИЕ(Документ.ЭлектронныйАктВыполненныхРабот.ПустаяСсылка)) КАК СвязанныйАВР,
	|	ЕСТЬNULL(ЭлектронныйАктВыполненныхРабот.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыАВР.ПустаяСсылка)) КАК СтатусАВР,
	|	ЕСТЬNULL(ЭлектронныйАктВыполненныхРабот.Дата, &ПустаяДата) КАК ДатаОсновногоАВР,
	|	ЕСТЬNULL(ЭлектронныйАктВыполненныхРабот.ДатаПринятияСтатуса, &ПустаяДата) КАК ДатаСтатусаАВР,
	|	ЕСТЬNULL(ЭлектронныйАктВыполненныхРабот.Номер, """") КАК НомерОсновногоАВР,
	|	ЕСТЬNULL(ЭлектронныйАктВыполненныхРабот.РегистрационныйНомер, """") КАК РегистрационныйНомерОсновногоАВР,
	|	1 КАК Приоритет
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК ДокументРеализацииУслуги
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭлектронныйАктВыполненныхРабот КАК ЭлектронныйАктВыполненныхРабот
	|		ПО (ДокументРеализацииУслуги.ДокументОснование = ЭлектронныйАктВыполненныхРабот.ДокументОснование)
	|			И (ЭлектронныйАктВыполненныхРабот.ТипАВР = &ПервичныйАВР)
	|			И (НЕ ЭлектронныйАктВыполненныхРабот.ПометкаУдаления)
	|ГДЕ
	|	ДокументРеализацииУслуги.Ссылка В(&МассивОснований)
	|	И ДокументРеализацииУслуги.ДокументОснование ССЫЛКА Документ.РеализацияТоваровУслуг
	|	И ЕСТЬNULL(ЭлектронныйАктВыполненныхРабот.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыАВР.ПустаяСсылка)) В (&СтатусыАВР)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ДокументРеализацииУслуги.Ссылка КАК Ссылка,
	//|	ДокументРеализацииУслуги.ДокументОснование КАК ДокументОснование,
	|	ЕСТЬNULL(ЭлектронныйАктВыполненныхРабот.Ссылка, ЗНАЧЕНИЕ(Документ.ЭлектронныйАктВыполненныхРабот.ПустаяСсылка)),
	|	ЕСТЬNULL(ЭлектронныйАктВыполненныхРабот.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыАВР.ПустаяСсылка)),
	|	ЕСТЬNULL(ЭлектронныйАктВыполненныхРабот.Дата, &ПустаяДата),
	|	ЕСТЬNULL(ЭлектронныйАктВыполненныхРабот.ДатаПринятияСтатуса, &ПустаяДата),
	|	ЕСТЬNULL(ЭлектронныйАктВыполненныхРабот.Номер, """"),
	|	ЕСТЬNULL(ЭлектронныйАктВыполненныхРабот.РегистрационныйНомер, """"),
	|	2
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК ДокументРеализацииУслуги
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭлектронныйАктВыполненныхРабот КАК ЭлектронныйАктВыполненныхРабот
	|		ПО (ДокументРеализацииУслуги.Ссылка = ЭлектронныйАктВыполненныхРабот.ДокументОснование)
	|			И (ЭлектронныйАктВыполненныхРабот.ТипАВР = &ПервичныйАВР)
	|			И (НЕ ЭлектронныйАктВыполненныхРабот.ПометкаУдаления)
	|ГДЕ
	|	ДокументРеализацииУслуги.Ссылка В(&МассивОснований)
	//|	И ДокументРеализацииУслуги.ДокументОснование ССЫЛКА Документ.АктОбОказанииПроизводственныхУслуг
	|	И ЕСТЬNULL(ЭлектронныйАктВыполненныхРабот.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыАВР.ПустаяСсылка)) В (&СтатусыАВР)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет,
	|	Ссылка,
	|	ДатаОсновногоАВР УБЫВ,
	|	ДатаСтатусаАВР УБЫВ";
	
	Возврат ТекстЗапроса;
	
КонецФункции	

Функция ТекстЗапросаАктОбОказанииПроизводственныхУслуг()
	
	ТекстЗапроса = ТекстЗапросаСведенияОНоменклатуреГСВС("АктОбОказанииПроизводственныхУслуг") +
	"ВЫБРАТЬ
	|	Док.Ссылка КАК Ссылка,
	|	Док.Организация КАК Организация,
	|	Док.Дата КАК ДатаВыполненияРабот,
	|	Док.Номер КАК Номер,
	|	Док.Контрагент КАК Контрагент,
	|	Док.ДоговорКонтрагента КАК Договор,
	|	Док.ДоговорКонтрагента.НомерДоговора КАК НомерДоговора,
	|	Док.ДоговорКонтрагента.ДатаДоговора КАК ДатаДоговора,
	|	Док.ВалютаДокумента КАК Валюта,
	|	ЕСТЬNULL(Валюты.БуквенныйКод, """") КАК КодВалюты,
	|	Док.КурсВзаиморасчетов КАК КурсВалюты,
	|	ЗНАЧЕНИЕ(Перечисление.НаправленияЭСФ.Исходящий) КАК Направление,
	|	Док.БанковскийСчетОрганизации КАК БанковскийСчетОрганизации,
	|	Док.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	|	ВЫБОР
	|		КОГДА Док.СтруктурноеПодразделение = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	|			ТОГДА Док.Организация
	|		ИНАЧЕ ВЫБОР
	|				КОГДА Док.СтруктурноеПодразделение.УказыватьРеквизитыГоловнойОрганизации
	|					ТОГДА Док.Организация
	|				ИНАЧЕ Док.СтруктурноеПодразделение
	|			КОНЕЦ
	|	КОНЕЦ КАК Поставщик,
	|	ВЫРАЗИТЬ(Док.ПереченьДокументации КАК СТРОКА(150)) КАК ПереченьДокументации
	|ИЗ
	|	Документ.АктОбОказанииПроизводственныхУслуг КАК Док
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Валюты КАК Валюты
	|		ПО Док.ВалютаДокумента = Валюты.Ссылка
	|ГДЕ
	|	Док.Ссылка В (&МассивОснований)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументРеализацииУслуги.Ссылка КАК Ссылка,
	|	ДокументРеализацииУслуги.Номенклатура КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СведенияОНоменклатуреГСВСПоКодуИзНоменклатуры.НаименованиеНоменклатурыГСВС, """") ПОДОБНО """"
	|			ТОГДА
	|				ВЫБОР
	|					КОГДА НЕ НоменклатураУслуг.НаименованиеПолное ПОДОБНО """"
	|						ТОГДА ВЫРАЗИТЬ(НоменклатураУслуг.НаименованиеПолное КАК СТРОКА(1000))
	|					ИНАЧЕ НоменклатураУслуг.Наименование
	|				КОНЕЦ
	|			ИНАЧЕ СведенияОНоменклатуреГСВСПоКодуИзНоменклатуры.НаименованиеНоменклатурыГСВС
	|	КОНЕЦ КАК УслугаНаименование,
	|	ВЫБОР
	|		КОГДА (ВЫРАЗИТЬ(НоменклатураУслуг.НаименованиеПолное КАК СТРОКА(400))) <> """"
	|			ТОГДА НоменклатураУслуг.НаименованиеПолное
	|		ИНАЧЕ НоменклатураУслуг.Наименование
	|	КОНЕЦ КАК НаименованиеУслугиВСистеме,
	|	НоменклатураУслуг.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	НоменклатураУслуг.БазоваяЕдиницаИзмерения.КодЭСФ КАК ЕдиницаИзмеренияКод,
	|	НоменклатураУслуг.БазоваяЕдиницаИзмерения.Наименование КАК ЕдиницаИзмеренияНаименование,
	|	ДокументРеализацииУслуги.Количество КАК Количество,
	|	ВЫБОР
	|		КОГДА ДокументРеализацииУслуги.Ссылка.СуммаВключаетНДС
	|				И ДокументРеализацииУслуги.Ссылка.УчитыватьНДС
	|			ТОГДА ВЫБОР
	|					КОГДА ДокументРеализацииУслуги.Цена = 0
	|						ТОГДА 0
	|					ИНАЧЕ (ДокументРеализацииУслуги.Сумма - ДокументРеализацииУслуги.СуммаНДС) / ДокументРеализацииУслуги.Количество
	|				КОНЕЦ
	|		ИНАЧЕ ДокументРеализацииУслуги.Цена
	|	КОНЕЦ КАК Цена,
	|	ВЫБОР
	|		КОГДА ДокументРеализацииУслуги.Ссылка.СуммаВключаетНДС
	|				И ДокументРеализацииУслуги.Ссылка.УчитыватьНДС
	|			ТОГДА ДокументРеализацииУслуги.Сумма - ДокументРеализацииУслуги.СуммаНДС
	|		ИНАЧЕ ДокументРеализацииУслуги.Сумма
	|	КОНЕЦ КАК СтоимостьБезУчетаКосвенныхНалогов,
	|	ВЫБОР
	|		КОГДА ДокументРеализацииУслуги.Ссылка.СуммаВключаетНДС
	|				ИЛИ НЕ ДокументРеализацииУслуги.Ссылка.УчитыватьНДС
	|			ТОГДА ДокументРеализацииУслуги.Сумма
	|		ИНАЧЕ ДокументРеализацииУслуги.Сумма * (1 + ЕСТЬNULL(СтавкиНДС.Ставка, 0) * 0.01)
	|	КОНЕЦ КАК СтоимостьСУчетомКосвенныхНалогов,
	|	ВЫБОР
	|		КОГДА ДокументРеализацииУслуги.Ссылка.СуммаВключаетНДС
	|				И ДокументРеализацииУслуги.Ссылка.УчитыватьНДС
	|			ТОГДА ДокументРеализацииУслуги.Сумма - ДокументРеализацииУслуги.СуммаНДС
	|		ИНАЧЕ ДокументРеализацииУслуги.Сумма
	|	КОНЕЦ КАК РазмерОборота,
	|	ВЫБОР
	|		КОГДА ДокументРеализацииУслуги.Ссылка.УчитыватьНДС
	|			ТОГДА ДокументРеализацииУслуги.СтавкаНДС
	|		ИНАЧЕ &СтавкаБезНДС
	|	КОНЕЦ КАК СтавкаНДС,
	|	ВЫБОР
	|		КОГДА ДокументРеализацииУслуги.Ссылка.УчитыватьНДС
	|			ТОГДА СтавкиНДС.Ставка
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СтавкаНДСЧисло,
	|	ВЫБОР
	|		КОГДА ДокументРеализацииУслуги.Ссылка.УчитыватьНДС
	|			ТОГДА ЕСТЬNULL(СтавкиНДС.ДляОсвобожденногоОборота, ЛОЖЬ)
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК БезНДС,
	|	ДокументРеализацииУслуги.СуммаНДС КАК СуммаНДС,
	|	ЕСТЬNULL(СведенияОНоменклатуреГСВСПоКодуИзНоменклатуры.ПолныйКодГСВС, """") КАК СоставнойКодГСВС
	|	
	|ИЗ
	|	Документ.АктОбОказанииПроизводственныхУслуг.Услуги КАК ДокументРеализацииУслуги
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК НоменклатураУслуг
	|		ПО ДокументРеализацииУслуги.Номенклатура = НоменклатураУслуг.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтавкиНДС КАК СтавкиНДС
	|		ПО ДокументРеализацииУслуги.СтавкаНДС = СтавкиНДС.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_КодыГСВСАктуальные КАК СведенияОНоменклатуреГСВСПоКодуИзНоменклатуры
	|		ПО НоменклатураУслуг.КодКПВЭД = СведенияОНоменклатуреГСВСПоКодуИзНоменклатуры.КодГСВСПервичный
	|ГДЕ
	|	ДокументРеализацииУслуги.Ссылка В (&МассивОснований)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	НомерСтроки
	|ИТОГИ
	|	СУММА(РазмерОборота)
	|ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументРеализацииУслуги.Ссылка КАК Ссылка,
	//|	ДокументРеализацииУслуги.ДокументОснование КАК ДокументОснование,
	|	ЕСТЬNULL(ЭлектронныйАктВыполненныхРабот.Ссылка, ЗНАЧЕНИЕ(Документ.ЭлектронныйАктВыполненныхРабот.ПустаяСсылка)) КАК СвязанныйАВР,
	|	ЕСТЬNULL(ЭлектронныйАктВыполненныхРабот.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыАВР.ПустаяСсылка)) КАК СтатусАВР,
	|	ЕСТЬNULL(ЭлектронныйАктВыполненныхРабот.Дата, &ПустаяДата) КАК ДатаОсновногоАВР,
	|	ЕСТЬNULL(ЭлектронныйАктВыполненныхРабот.ДатаПринятияСтатуса, &ПустаяДата) КАК ДатаСтатусаАВР,
	|	ЕСТЬNULL(ЭлектронныйАктВыполненныхРабот.Номер, """") КАК НомерОсновногоАВР,
	|	ЕСТЬNULL(ЭлектронныйАктВыполненныхРабот.РегистрационныйНомер, """") КАК РегистрационныйНомерОсновногоАВР,
	|	1 КАК Приоритет
	|ИЗ
	|	Документ.АктОбОказанииПроизводственныхУслуг КАК ДокументРеализацииУслуги
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭлектронныйАктВыполненныхРабот КАК ЭлектронныйАктВыполненныхРабот
	|		ПО (ДокументРеализацииУслуги.ДокументОснование = ЭлектронныйАктВыполненныхРабот.ДокументОснование)
	|			И (ЭлектронныйАктВыполненныхРабот.ТипАВР = &ПервичныйАВР)
	|			И (НЕ ЭлектронныйАктВыполненныхРабот.ПометкаУдаления)
	|ГДЕ
	|	ДокументРеализацииУслуги.Ссылка В(&МассивОснований)
	|	И ДокументРеализацииУслуги.ДокументОснование ССЫЛКА Документ.АктОбОказанииПроизводственныхУслуг
	|	И ЕСТЬNULL(ЭлектронныйАктВыполненныхРабот.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыАВР.ПустаяСсылка)) В (&СтатусыАВР)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ДокументРеализацииУслуги.Ссылка КАК Ссылка,
	//|	ДокументРеализацииУслуги.ДокументОснование КАК ДокументОснование,
	|	ЕСТЬNULL(ЭлектронныйАктВыполненныхРабот.Ссылка, ЗНАЧЕНИЕ(Документ.ЭлектронныйАктВыполненныхРабот.ПустаяСсылка)),
	|	ЕСТЬNULL(ЭлектронныйАктВыполненныхРабот.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыАВР.ПустаяСсылка)),
	|	ЕСТЬNULL(ЭлектронныйАктВыполненныхРабот.Дата, &ПустаяДата),
	|	ЕСТЬNULL(ЭлектронныйАктВыполненныхРабот.ДатаПринятияСтатуса, &ПустаяДата),
	|	ЕСТЬNULL(ЭлектронныйАктВыполненныхРабот.Номер, """"),
	|	ЕСТЬNULL(ЭлектронныйАктВыполненныхРабот.РегистрационныйНомер, """"),
	|	2
	|ИЗ
	|	Документ.АктОбОказанииПроизводственныхУслуг КАК ДокументРеализацииУслуги
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭлектронныйАктВыполненныхРабот КАК ЭлектронныйАктВыполненныхРабот
	|		ПО (ДокументРеализацииУслуги.Ссылка = ЭлектронныйАктВыполненныхРабот.ДокументОснование)
	|			И (ЭлектронныйАктВыполненныхРабот.ТипАВР = &ПервичныйАВР)
	|			И (НЕ ЭлектронныйАктВыполненныхРабот.ПометкаУдаления)
	|ГДЕ
	|	ДокументРеализацииУслуги.Ссылка В(&МассивОснований)
	//|	И ДокументРеализацииУслуги.ДокументОснование ССЫЛКА Документ.АктОбОказанииПроизводственныхУслуг
	|	И ЕСТЬNULL(ЭлектронныйАктВыполненныхРабот.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыАВР.ПустаяСсылка)) В (&СтатусыАВР)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет,
	|	Ссылка,
	|	ДатаОсновногоАВР УБЫВ,
	|	ДатаСтатусаАВР УБЫВ";
	
	Возврат ТекстЗапроса;
	
КонецФункции	

Функция ТекстЗапросаРеализацияУслугПоПереработке()
	
	ТекстЗапроса = ТекстЗапросаСведенияОНоменклатуреГСВС("РеализацияУслугПоПереработке") +
	"ВЫБРАТЬ
	|	Док.Ссылка КАК Ссылка,
	|	Док.Организация КАК Организация,
	|	Док.Дата КАК ДатаВыполненияРабот,
	|	Док.Номер КАК Номер,
	|	Док.Контрагент КАК Контрагент,
	|	Док.ДоговорКонтрагента КАК Договор,
	|	Док.ДоговорКонтрагента.НомерДоговора КАК НомерДоговора,
	|	Док.ДоговорКонтрагента.ДатаДоговора КАК ДатаДоговора,
	|	Док.ВалютаДокумента КАК Валюта,
	|	ЕСТЬNULL(Валюты.БуквенныйКод, """") КАК КодВалюты,
	|	Док.КурсВзаиморасчетов КАК КурсВалюты,
	|	ЗНАЧЕНИЕ(Перечисление.НаправленияЭСФ.Исходящий) КАК Направление,
	|	Док.БанковскийСчетОрганизации КАК БанковскийСчетОрганизации,
	|	Док.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	|	ВЫБОР
	|		КОГДА Док.СтруктурноеПодразделение = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	|			ТОГДА Док.Организация
	|		ИНАЧЕ ВЫБОР
	|				КОГДА Док.СтруктурноеПодразделение.УказыватьРеквизитыГоловнойОрганизации
	|					ТОГДА Док.Организация
	|				ИНАЧЕ Док.СтруктурноеПодразделение
	|			КОНЕЦ
	|	КОНЕЦ КАК Поставщик,
	|	ВЫРАЗИТЬ(Док.ПереченьДокументации КАК СТРОКА(150)) КАК ПереченьДокументации
	|ИЗ
	|	Документ.РеализацияУслугПоПереработке КАК Док
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Валюты КАК Валюты
	|		ПО Док.ВалютаДокумента = Валюты.Ссылка
	|ГДЕ
	|	Док.Ссылка В(&МассивОснований)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументРеализацияУслугПоПереработке.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА ДокументРеализацияУслугПоПереработке.НоменклатураУслуга ЕСТЬ NULL  ИЛИ ДокументРеализацияУслугПоПереработке.НоменклатураУслуга = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|			ТОГДА ДокументРеализацияУслугПоПереработке.Номенклатура
	|		ИНАЧЕ ДокументРеализацияУслугПоПереработке.НоменклатураУслуга
	|	КОНЕЦ КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СведенияОНоменклатуреГСВСПоКодуИзНоменклатуры.НаименованиеНоменклатурыГСВС, """") ПОДОБНО """"
	|			ТОГДА ВЫБОР
	|					КОГДА НЕ ДокументРеализацияУслугПоПереработке.Содержание ПОДОБНО """"
	|						ТОГДА ВЫРАЗИТЬ(ДокументРеализацияУслугПоПереработке.Содержание КАК СТРОКА(250))
	|					КОГДА НЕ НоменклатураУслуг.НаименованиеПолное ПОДОБНО """"
	|						ТОГДА ВЫРАЗИТЬ(НоменклатураУслуг.НаименованиеПолное КАК СТРОКА(1000))
	|					ИНАЧЕ НоменклатураУслуг.Наименование
	|				КОНЕЦ
	|		ИНАЧЕ СведенияОНоменклатуреГСВСПоКодуИзНоменклатуры.НаименованиеНоменклатурыГСВС
	|	КОНЕЦ КАК УслугаНаименование,
	|	ВЫБОР
	|		КОГДА НЕ ДокументРеализацияУслугПоПереработке.Содержание ПОДОБНО """"
	|			ТОГДА ВЫРАЗИТЬ(ДокументРеализацияУслугПоПереработке.Содержание КАК СТРОКА(250))
	|		КОГДА НЕ НоменклатураУслуг.НаименованиеПолное ПОДОБНО """"
	|			ТОГДА ВЫРАЗИТЬ(НоменклатураУслуг.НаименованиеПолное КАК СТРОКА(1000))
	|		ИНАЧЕ НоменклатураУслуг.Наименование
	|	КОНЕЦ КАК НаименованиеУслугиВСистеме,
	|	НоменклатураУслуг.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	НоменклатураУслуг.БазоваяЕдиницаИзмерения.КодЭСФ КАК ЕдиницаИзмеренияКод,
	|	НоменклатураУслуг.БазоваяЕдиницаИзмерения.Наименование КАК ЕдиницаИзмеренияНаименование,
	|	ДокументРеализацияУслугПоПереработке.Количество КАК Количество,
	|	ВЫБОР
	|		КОГДА ДокументРеализацияУслугПоПереработке.Ссылка.СуммаВключаетНДС
	|				И ДокументРеализацияУслугПоПереработке.Ссылка.УчитыватьНДС
	|			ТОГДА ВЫБОР
	|					КОГДА ДокументРеализацияУслугПоПереработке.Цена = 0
	|						ТОГДА 0
	|					ИНАЧЕ (ДокументРеализацияУслугПоПереработке.Сумма - ДокументРеализацияУслугПоПереработке.СуммаНДС) / ДокументРеализацияУслугПоПереработке.Количество
	|				КОНЕЦ
	|		ИНАЧЕ ДокументРеализацияУслугПоПереработке.Цена
	|	КОНЕЦ КАК Цена,
	|	ВЫБОР
	|		КОГДА ДокументРеализацияУслугПоПереработке.Ссылка.СуммаВключаетНДС
	|				И ДокументРеализацияУслугПоПереработке.Ссылка.УчитыватьНДС
	|			ТОГДА ДокументРеализацияУслугПоПереработке.Сумма - ДокументРеализацияУслугПоПереработке.СуммаНДС
	|		ИНАЧЕ ДокументРеализацияУслугПоПереработке.Сумма
	|	КОНЕЦ КАК СтоимостьБезУчетаКосвенныхНалогов,
	|	ВЫБОР
	|		КОГДА ДокументРеализацияУслугПоПереработке.Ссылка.СуммаВключаетНДС
	|				ИЛИ НЕ ДокументРеализацияУслугПоПереработке.Ссылка.УчитыватьНДС
	|			ТОГДА ДокументРеализацияУслугПоПереработке.Сумма
	|		ИНАЧЕ ДокументРеализацияУслугПоПереработке.Сумма * (1 + ЕСТЬNULL(СтавкиНДС.Ставка, 0) * 0.01)
	|	КОНЕЦ КАК СтоимостьСУчетомКосвенныхНалогов,
	|	ВЫБОР
	|		КОГДА ДокументРеализацияУслугПоПереработке.Ссылка.СуммаВключаетНДС
	|				И ДокументРеализацияУслугПоПереработке.Ссылка.УчитыватьНДС
	|			ТОГДА ДокументРеализацияУслугПоПереработке.Сумма - ДокументРеализацияУслугПоПереработке.СуммаНДС
	|		ИНАЧЕ ДокументРеализацияУслугПоПереработке.Сумма
	|	КОНЕЦ КАК РазмерОборота,
	|	ДокументРеализацияУслугПоПереработке.СтавкаНДС КАК СтавкаНДС,
	|	СтавкиНДС.Ставка КАК СтавкаНДСЧисло,
	|	ЕСТЬNULL(СтавкиНДС.ДляОсвобожденногоОборота, ЛОЖЬ) КАК БезНДС,
	|	ДокументРеализацияУслугПоПереработке.СуммаНДС КАК СуммаНДС,
	|	ЕСТЬNULL(СведенияОНоменклатуреГСВСПоКодуИзНоменклатуры.ПолныйКодГСВС, """") КАК СоставнойКодГСВС
	|ИЗ
	|	Документ.РеализацияУслугПоПереработке.Услуги КАК ДокументРеализацияУслугПоПереработке
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК НоменклатураУслуг
	|		ПО (ВЫБОР
	|				КОГДА ДокументРеализацияУслугПоПереработке.НоменклатураУслуга ЕСТЬ NULL  ИЛИ ДокументРеализацияУслугПоПереработке.НоменклатураУслуга = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|					ТОГДА ДокументРеализацияУслугПоПереработке.Номенклатура
	|				ИНАЧЕ ДокументРеализацияУслугПоПереработке.НоменклатураУслуга
	|			КОНЕЦ = НоменклатураУслуг.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтавкиНДС КАК СтавкиНДС
	|		ПО ДокументРеализацияУслугПоПереработке.СтавкаНДС = СтавкиНДС.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_КодыГСВСАктуальные КАК СведенияОНоменклатуреГСВСПоКодуИзНоменклатуры
	|		ПО (НоменклатураУслуг.КодКПВЭД = СведенияОНоменклатуреГСВСПоКодуИзНоменклатуры.КодГСВСПервичный)
	|ГДЕ
	|	ДокументРеализацияУслугПоПереработке.Ссылка В(&МассивОснований)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	ДокументРеализацияУслугПоПереработке.НомерСтроки
	|ИТОГИ
	|	СУММА(РазмерОборота)
	|ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументРеализацииУслуги.Ссылка КАК Ссылка,
	|	ЕСТЬNULL(ЭлектронныйАктВыполненныхРабот.Ссылка, ЗНАЧЕНИЕ(Документ.ЭлектронныйАктВыполненныхРабот.ПустаяСсылка)) КАК СвязанныйАВР,
	|	ЕСТЬNULL(ЭлектронныйАктВыполненныхРабот.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыАВР.ПустаяСсылка)) КАК СтатусАВР,
	|	ЕСТЬNULL(ЭлектронныйАктВыполненныхРабот.Дата, &ПустаяДата) КАК ДатаОсновногоАВР,
	|	ЕСТЬNULL(ЭлектронныйАктВыполненныхРабот.ДатаПринятияСтатуса, &ПустаяДата) КАК ДатаСтатусаАВР,
	|	ЕСТЬNULL(ЭлектронныйАктВыполненныхРабот.Номер, """") КАК НомерОсновногоАВР,
	|	ЕСТЬNULL(ЭлектронныйАктВыполненныхРабот.РегистрационныйНомер, """") КАК РегистрационныйНомерОсновногоАВР,
	|	1 КАК Приоритет
	|ИЗ
	|	Документ.РеализацияУслугПоПереработке КАК ДокументРеализацииУслуги
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭлектронныйАктВыполненныхРабот КАК ЭлектронныйАктВыполненныхРабот
	|		ПО ДокументРеализацииУслуги.ДокументОснование = ЭлектронныйАктВыполненныхРабот.ДокументОснование
	|			И (ЭлектронныйАктВыполненныхРабот.ТипАВР = &ПервичныйАВР)
	|			И (НЕ ЭлектронныйАктВыполненныхРабот.ПометкаУдаления)
	|ГДЕ
	|	ДокументРеализацииУслуги.Ссылка В(&МассивОснований)
	|	И ДокументРеализацииУслуги.ДокументОснование ССЫЛКА Документ.РеализацияУслугПоПереработке
	|	И ЕСТЬNULL(ЭлектронныйАктВыполненныхРабот.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыАВР.ПустаяСсылка)) В (&СтатусыАВР)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ДокументРеализацииУслуги.Ссылка,
	|	ЕСТЬNULL(ЭлектронныйАктВыполненныхРабот.Ссылка, ЗНАЧЕНИЕ(Документ.ЭлектронныйАктВыполненныхРабот.ПустаяСсылка)),
	|	ЕСТЬNULL(ЭлектронныйАктВыполненныхРабот.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыАВР.ПустаяСсылка)),
	|	ЕСТЬNULL(ЭлектронныйАктВыполненныхРабот.Дата, &ПустаяДата),
	|	ЕСТЬNULL(ЭлектронныйАктВыполненныхРабот.ДатаПринятияСтатуса, &ПустаяДата),
	|	ЕСТЬNULL(ЭлектронныйАктВыполненныхРабот.Номер, """"),
	|	ЕСТЬNULL(ЭлектронныйАктВыполненныхРабот.РегистрационныйНомер, """"),
	|	2
	|ИЗ
	|	Документ.РеализацияУслугПоПереработке КАК ДокументРеализацииУслуги
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭлектронныйАктВыполненныхРабот КАК ЭлектронныйАктВыполненныхРабот
	|		ПО ДокументРеализацииУслуги.Ссылка = ЭлектронныйАктВыполненныхРабот.ДокументОснование
	|			И (ЭлектронныйАктВыполненныхРабот.ТипАВР = &ПервичныйАВР)
	|			И (НЕ ЭлектронныйАктВыполненныхРабот.ПометкаУдаления)
	|ГДЕ
	|	ДокументРеализацииУслуги.Ссылка В(&МассивОснований)
	|	И ЕСТЬNULL(ЭлектронныйАктВыполненныхРабот.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыАВР.ПустаяСсылка)) В (&СтатусыАВР)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет,
	|	Ссылка,
	|	ДатаОсновногоАВР УБЫВ,
	|	ДатаСтатусаАВР УБЫВ";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПолучитьСтавкуНДС(СтавкаНДС) Экспорт 
	
	Возврат УчетНДСиАкцизаВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтавкаНДС);
	
КонецФункции

Функция ТекстЗапросаСведенияОНоменклатуреГСВС(ИмяДокумента = "")
	
	Если Не ЗначениеЗаполнено(ИмяДокумента) Тогда
		Возврат ""
	Иначе
		ТекстЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ "
		 + ?(ИмяДокумента = "РеализацияУслугПоПереработке", "ВЫБОР 
		|      КОГДА  ДокументРеализации.НоменклатураУслуга ЕСТЬ NULL ИЛИ ДокументРеализации.НоменклатураУслуга = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|	        ТОГДА 
		|			    ДокументРеализации.Номенклатура.КодКПВЭД
		|		    ИНАЧЕ 
		|			    ДокументРеализации.НоменклатураУслуга.КодКПВЭД КОНЕЦ", "ДокументРеализации.Номенклатура.КодКПВЭД ") + " КАК КодКПВЭД
		|ПОМЕСТИТЬ ВТ_ДанныеДокумента
		|ИЗ
		|	Документ.%ИмяДокумента%.Услуги КАК ДокументРеализации
		|ГДЕ
		|	ДокументРеализации.Ссылка В(&МассивОснований)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	КодКПВЭД
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НоменклатураГСВС.Ссылка КАК НоменклатураГСВС,
		|	1 КАК ПриоритетПоискаНоменклатурыГСВС,
		|	НоменклатураГСВС.КодГСВС КАК КодГСВС
		|ПОМЕСТИТЬ ВТ_НоменклатураГСВС
		|ИЗ
		|	Справочник.НоменклатураГСВС КАК НоменклатураГСВС
		|ГДЕ
		|	НоменклатураГСВС.КодГСВС В
		|			(ВЫБРАТЬ
		|				ДанныеДокумента.КодКПВЭД
		|			ИЗ
		|				ВТ_ДанныеДокумента КАК ДанныеДокумента)
		|	И НоменклатураГСВС.ТипКодаГСВС = ЗНАЧЕНИЕ(Перечисление.ТипыКодовГСВС.КПВЭД)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СведенияОНоменклатуреГСВС.НоменклатураГСВС,
		|	ВЫБОР
		|		КОГДА СведенияОНоменклатуреГСВС.ПризнакАктивности
		|				И &ДатаСреза >= НАЧАЛОПЕРИОДА(СведенияОНоменклатуреГСВС.ДействиеЗаписиНачальнаяДата, ДЕНЬ)
		|				И &ДатаСреза <= ВЫБОР
		|					КОГДА СведенияОНоменклатуреГСВС.ДействиеЗаписиКонечнаяДата = ДАТАВРЕМЯ(1, 1, 1)
		|						ТОГДА &ДатаСреза
		|					ИНАЧЕ СведенияОНоменклатуреГСВС.ДействиеЗаписиКонечнаяДата
		|				КОНЕЦ
		|			ТОГДА 2
		|		ИНАЧЕ 3
		|	КОНЕЦ,
		|	ПОДСТРОКА(СведенияОНоменклатуреГСВС.ПолныйКодГСВС, 1, 11)
		|ИЗ
		|	РегистрСведений.СведенияОНоменклатуреГСВС КАК СведенияОНоменклатуреГСВС
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ДанныеДокумента КАК ДанныеДокумента
		|		ПО (ПОДСТРОКА(СведенияОНоменклатуреГСВС.ПолныйКодГСВС, 1, 11) = ДанныеДокумента.КодКПВЭД)
		|			И (СведенияОНоменклатуреГСВС.НоменклатураГСВС.ТипКодаГСВС = ЗНАЧЕНИЕ(Перечисление.ТипыКодовГСВС.КПВЭД))
		|			И (СведенияОНоменклатуреГСВС.Период <= &ДатаСреза)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ПриоритетПоискаНоменклатурыГСВС,
		|	КодГСВС
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_НоменклатураГСВС.КодГСВС КАК КодГСВС,
		|	МИНИМУМ(ВТ_НоменклатураГСВС.ПриоритетПоискаНоменклатурыГСВС) КАК ПриоритетПоискаНоменклатурыГСВС
		|ПОМЕСТИТЬ ВТ_НоменклатураГСВСМинимум
		|ИЗ
		|	ВТ_НоменклатураГСВС КАК ВТ_НоменклатураГСВС
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_НоменклатураГСВС.КодГСВС
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	КодГСВС,
		|	ПриоритетПоискаНоменклатурыГСВС
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МИНИМУМ(ВТ_НоменклатураГСВС.НоменклатураГСВС) КАК НоменклатураГСВС,
		|	ВТ_НоменклатураГСВС.КодГСВС КАК КодГСВСПервичный
		|ПОМЕСТИТЬ ВТ_НоменклатураГСВССгруппированная
		|ИЗ
		|	ВТ_НоменклатураГСВС КАК ВТ_НоменклатураГСВС
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_НоменклатураГСВСМинимум КАК ВТ_НоменклатураГСВСМинимум
		|		ПО ВТ_НоменклатураГСВС.КодГСВС = ВТ_НоменклатураГСВСМинимум.КодГСВС
		|			И ВТ_НоменклатураГСВС.ПриоритетПоискаНоменклатурыГСВС = ВТ_НоменклатураГСВСМинимум.ПриоритетПоискаНоменклатурыГСВС
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_НоменклатураГСВС.КодГСВС
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	НоменклатураГСВС
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СведенияОНоменклатуреГСВССрезПоследних.НоменклатураГСВС КАК НоменклатураГСВС,
		|	СведенияОНоменклатуреГСВССрезПоследних.ПолныйКодГСВС КАК ПолныйКодГСВС,
		|	НоменклатураГСВССгруппированная.КодГСВСПервичный КАК КодГСВСПервичный
		|ПОМЕСТИТЬ ВТ_КодыГСВС
		|ИЗ
		|	РегистрСведений.СведенияОНоменклатуреГСВС.СрезПоследних(
		|			&ДатаСреза,
		|			НоменклатураГСВС В
		|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|					Т.НоменклатураГСВС
		|				ИЗ
		|					ВТ_НоменклатураГСВССгруппированная КАК Т)) КАК СведенияОНоменклатуреГСВССрезПоследних
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_НоменклатураГСВССгруппированная КАК НоменклатураГСВССгруппированная
		|		ПО (НоменклатураГСВССгруппированная.НоменклатураГСВС = СведенияОНоменклатуреГСВССрезПоследних.НоменклатураГСВС)
		|			И (СведенияОНоменклатуреГСВССрезПоследних.ПризнакАктивности)
		|			И (&ДатаСреза >= НАЧАЛОПЕРИОДА(СведенияОНоменклатуреГСВССрезПоследних.ДействиеЗаписиНачальнаяДата, ДЕНЬ))
		|			И (&ДатаСреза <= ВЫБОР
		|				КОГДА СведенияОНоменклатуреГСВССрезПоследних.ДействиеЗаписиКонечнаяДата = ДАТАВРЕМЯ(1, 1, 1)
		|					ТОГДА &ДатаСреза
		|				ИНАЧЕ СведенияОНоменклатуреГСВССрезПоследних.ДействиеЗаписиКонечнаяДата
		|			КОНЕЦ)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	КодГСВСПервичный
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_КодыГСВС.КодГСВСПервичный КАК КодГСВСПервичный,
		|	ВТ_КодыГСВС.ПолныйКодГСВС КАК ПолныйКодГСВС,
		|	ВТ_КодыГСВС.НоменклатураГСВС.ПолноеНаименованиеRu КАК НаименованиеНоменклатурыГСВС
		|ПОМЕСТИТЬ ВТ_КодыГСВСАктуальные
		|ИЗ
		|	ВТ_КодыГСВС КАК ВТ_КодыГСВС
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	КодГСВСПервичный
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|";
		
		Возврат СтрЗаменить(ТекстЗапроса,"%ИмяДокумента%", ИмяДокумента);
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ВводДокументовОснованияПоАВР

//Запоняет документ - основание документа АВР 
Функция ЗаполнитьДокументОснованиеПоДокументуАВР(ОбъектАВР, ИмяДокумента) Экспорт
		
	ДанныеАВР = АВРСервер.ПодготовитьДанныеДляЗаполненияПервичныхДокументовИзАВР(ОбъектАВР);
	
	СтатусАВР = ОбъектАВР.Статус;
	ДатаПринятияСтатуса = ОбъектАВР.ДатаПринятияСтатуса;
	
	НовыйДокумент = Документы[ИмяДокумента].СоздатьДокумент();
	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("Реквизиты"        , ДанныеАВР.ТаблицаРеквизиты);
	Запрос.УстановитьПараметр("ТаблицаУслуги"    , ДанныеАВР.ТаблицаУслуги);
	Запрос.УстановитьПараметр("ТаблицаПоставщики", ДанныеАВР.ТаблицаПоставщики);
	Запрос.УстановитьПараметр("СтатусАВР"          , СтатусАВР);
	Запрос.УстановитьПараметр("ДатаПринятияСтатуса", ДатаПринятияСтатуса);
	
	Если ИмяДокумента = "ПоступлениеТоваровУслуг" Тогда
		Запрос.Текст = ДанныеДляЗаполненияПоступлениеТоваровУслуг();
		ТабличнаяЧастьДокумента = НовыйДокумент.Услуги;
	
	ИначеЕсли ИмяДокумента = "ПоступлениеДопРасходов" Тогда
		
		Если ДанныеАВР.ТаблицаУслуги.Количество() = 1 Тогда
			Запрос.Текст = ДанныеДляЗаполненияПоступлениеТоваровУслуг();
		Иначе
			//Возврат Неопределено;
			Если ДанныеАВР.ТаблицаУслуги.Количество() > 1 Тогда
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Количество строк услуг больше одного, ввод документа ""%1"" невозможен!'"), Метаданные.Документы.ПоступлениеДопРасходов.Представление());
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;	
	
	Результат = Запрос.ВыполнитьПакет();
	ЗаполнитьЗначенияСвойств(НовыйДокумент, Результат[Результат.Количество()-3].Выгрузить()[0]);
	ТаблицаУслуги = Результат[Результат.Количество()-2].Выгрузить();
	Если ИмяДокумента = "ПоступлениеДопРасходов" Тогда
		
		ЗаполнитьЗначенияСвойств(НовыйДокумент, ТаблицаУслуги[0], "Номенклатура, Сумма, СуммаНДС, СтавкаНДС");
		
	ИначеЕсли ИмяДокумента = "ПоступлениеТоваровУслуг" Тогда
		
		Для Каждого Услуга Из ТаблицаУслуги Цикл
			СтрокаТабличнойЧасти = ТабличнаяЧастьДокумента.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, Услуга);
			Если Услуга.Количество = 0 Тогда
				СтрокаТабличнойЧасти.Цена = Услуга.Цена;
			Иначе
				СтрокаТабличнойЧасти.Цена = Услуга.Сумма / Услуга.Количество;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
			
	РеквизитыНовогоДокумента = Новый Структура;
	РеквизитыНовогоДокумента.Вставить("ВидОперации", ?(ИмяДокумента = "ПоступлениеТоваровУслуг", Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Услуги, Перечисления.ВидыОперацийПоступлениеДопРасходов.УслугаСтороннейОрганизации));
	РеквизитыНовогоДокумента.Вставить("УчитыватьНДС", Истина);
	РеквизитыНовогоДокумента.Вставить("СуммаВключаетНДС", Ложь);
	РеквизитыНовогоДокумента.Вставить("КратностьВзаиморасчетов", 1);
	ТекПользователь = Пользователи.ТекущийПользователь();
	РеквизитыНовогоДокумента.Вставить("Склад", ПользователиБКВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОсновнойСклад"));
	
	// Получаем данные по организации, является ли плательщиком налога на прибыль.
	ПроцедурыНалоговогоУчета.ПриИзмененииПризнакаОтраженияВНалоговомУчете(НовыйДокумент.Организация, НовыйДокумент.Дата, НовыйДокумент.УчитыватьКПН, Истина);
	// Заполняем реквизит "ВидУчетаНУ".
	ПроцедурыНалоговогоУчета.ЗаполнитьВидУчетаНУ(НовыйДокумент.УчитыватьКПН, НовыйДокумент.ВидУчетаНУ);
		
	ДанныеСтрокиТаблицы = Новый Структура("Номенклатура, Содержание, 
	|СчетЗатратБУ, СубконтоЗатратБУ1, СубконтоЗатратБУ2, СубконтоЗатратБУ3, 
	|СчетЗатратНУ, СубконтоЗатратНУ1, СубконтоЗатратНУ2, СубконтоЗатратНУ3, 
	|СчетУчетаНДС, НДСВидОборота, НДСВидПоступления,
	|ВидСубконтоЗатратБУ1, ВидСубконтоЗатратБУ2, ВидСубконтоЗатратБУ3,
	|ВидСубконтоЗатратНУ1, ВидСубконтоЗатратНУ2, ВидСубконтоЗатратНУ3,
	|СубконтоЗатратБУ1Доступность, СубконтоЗатратБУ2Доступность, СубконтоЗатратБУ3Доступность,
	|СубконтоЗатратНУ1Доступность, СубконтоЗатратНУ2Доступность, СубконтоЗатратНУ3Доступность");
	
	Если ИмяДокумента = "ПоступлениеТоваровУслуг" Тогда
		
		Документы.ПоступлениеТоваровУслуг.ЗаполнитьСчетаУчетаРасчетов(НовыйДокумент);
		Для Каждого СтрокаТабличнойЧасти Из ТабличнаяЧастьДокумента Цикл
			
			ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, СтрокаТабличнойЧасти);
			
			ПараметрыОбъекта = Новый Структура("Организация, СтруктурноеПодразделение, Дата, Ссылка, ТипЦен, УчитыватьНДС, СуммаВключаетНДС, УчитыватьКПН, ВидОперации,
			|ВалютаДокумента, КурсВзаиморасчетов, КратностьВзаиморасчетов, Склад, ДоговорКонтрагента");
			ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, НовыйДокумент);
			
			// Получаем данные по всем Субконто,НДСВидОборота,НДСВидПоступления 
			ЗаполнитьДанныеСтрокиУслуг(ДанныеСтрокиТаблицы, ПараметрыОбъекта);
			
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ДанныеСтрокиТаблицы);
		КонецЦикла;
		
	ИначеЕсли ИмяДокумента = "ПоступлениеДопРасходов" Тогда
		
		НовыйДокумент.СпособРаспределения = Перечисления.СпособыРаспределенияДопРасходов.ПоСумме;
		Документы.ПоступлениеДопРасходов.ЗаполнитьСчетаУчетаРасчетов(НовыйДокумент);
		
		ДанныеОбъекта = Новый Структура("Дата, Организация, ВидОперации, УчитыватьКПН, УчитыватьНДС");
		
		ЗаполнитьЗначенияСвойств(ДанныеОбъекта, НовыйДокумент);
		
		СведенияОНоменклатуре = ОбработкаТабличныхЧастей.ПолучитьСведенияОНоменклатуре(НовыйДокумент.Номенклатура, ДанныеОбъекта);
		
		Если СведенияОНоменклатуре <> Неопределено Тогда
			НовыйДокумент.Содержание = СведенияОНоменклатуре.НаименованиеПолное;
		КонецЕсли;
		
	КонецЕсли;
			
	Если ЗначениеЗаполнено(НовыйДокумент.ДоговорКонтрагента) Тогда
		РеквизитыНовогоДокумента.Вставить("Контрагент", НовыйДокумент.ДоговорКонтрагента.Владелец);
	Иначе
		ТаблицаПоставщики = Результат[Результат.Количество()-1].Выгрузить();
		Если ТаблицаПоставщики.Количество() > 0 Тогда
			РеквизитыНовогоДокумента.Вставить("Контрагент", ТаблицаПоставщики[0].Контрагент);
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(НовыйДокумент, РеквизитыНовогоДокумента);
	
	ЗаписатьДокумент(НовыйДокумент);
	
	НовыйДокумент.Записать();
	
	Возврат НовыйДокумент.Ссылка;
	
КонецФункции

Процедура ЗаписатьДокумент(ДокументОбъект)
	Попытка
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		ДокументОбъект.Записать();
	Исключение
		ТекстСообщения = НСтр("ru='Не удалось создать документ!'");
		ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения)
	КонецПопытки;	
КонецПроцедуры

Функция ДанныеДляЗаполненияПоступлениеТоваровУслуг()
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	Реквизиты.Организация,
	|	ВЫБОР
	|		КОГДА &СтатусАВР = ЗНАЧЕНИЕ(Перечисление.СтатусыАВР.Подтвержденный)
	|			ТОГДА &ДатаПринятияСтатуса
	|		ИНАЧЕ Реквизиты.Дата
	|	КОНЕЦ КАК Дата,
	|	Реквизиты.Валюта КАК ВалютаДокумента,
	|	Реквизиты.КурсВалюты КАК КурсВзаиморасчетов,
	|	Реквизиты.Договор КАК ДоговорКонтрагента
	|ПОМЕСТИТЬ Реквизиты
	|ИЗ
	|	&Реквизиты КАК Реквизиты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаУслуги.Номенклатура,
	|	ТаблицаУслуги.УслугаНаименование,
	|	ТаблицаУслуги.ЕдиницаИзмерения,
	|	ТаблицаУслуги.Количество,
	|	ТаблицаУслуги.Цена,
	|	ТаблицаУслуги.РазмерОборота,
	|	ТаблицаУслуги.СтоимостьБезУчетаКосвенныхНалогов,
	|	ТаблицаУслуги.СтоимостьСУчетомКосвенныхНалогов,
	|	ТаблицаУслуги.СтавкаНДС,
	|	ТаблицаУслуги.СуммаНДС
	|ПОМЕСТИТЬ ТаблицаУслуги
	|ИЗ
	|	&ТаблицаУслуги КАК ТаблицаУслуги
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПоставщики.Поставщик КАК Контрагент
	|ПОМЕСТИТЬ ТаблицаПоставщики
	|ИЗ
	|	&ТаблицаПоставщики КАК ТаблицаПоставщики
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Организация,
	|	Реквизиты.Дата,
	|	Реквизиты.ДоговорКонтрагента,
	|	Реквизиты.ВалютаДокумента,
	|	Реквизиты.КурсВзаиморасчетов
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаУслуги.Номенклатура,
	|	ТаблицаУслуги.УслугаНаименование КАК Содержание,
	|	ТаблицаУслуги.ЕдиницаИзмерения,
	|	ТаблицаУслуги.Количество,
	|	ТаблицаУслуги.Цена,
	|	ТаблицаУслуги.РазмерОборота,
	|	ТаблицаУслуги.СтоимостьБезУчетаКосвенныхНалогов КАК Сумма,
	|	ТаблицаУслуги.СтоимостьСУчетомКосвенныхНалогов,
	|	ТаблицаУслуги.СтавкаНДС,
	|	ТаблицаУслуги.СуммаНДС
	|ИЗ
	|	ТаблицаУслуги КАК ТаблицаУслуги
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПоставщики.Контрагент
	|ИЗ
	|	ТаблицаПоставщики КАК ТаблицаПоставщики";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ЗаполнитьДанныеСтрокиУслуг(СтрокаТабличнойЧасти, ПараметрыОбъекта)
	
	МетаданныеДокумента = ПараметрыОбъекта.Ссылка.Метаданные();
	
	СведенияОНоменклатуре = ОбработкаТабличныхЧастей.ПолучитьСведенияОНоменклатуре(СтрокаТабличнойЧасти.Номенклатура, ПараметрыОбъекта);
	
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.Содержание = СведенияОНоменклатуре.НаименованиеПолное;
	
	Документы.ПоступлениеТоваровУслуг.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ПараметрыОбъекта, СтрокаТабличнойЧасти, "Услуги", СведенияОНоменклатуре);
	
	ОбработкаТабличныхЧастей.ЗаполнитьНДСВидОборотаТабЧасти(СтрокаТабличнойЧасти, ПараметрыОбъекта, "Услуги", МетаданныеДокумента);
	ОбработкаТабличныхЧастей.ЗаполнитьНДСВидПоступленияТабЧасти(СтрокаТабличнойЧасти, "Услуги", МетаданныеДокумента, Пользователи.ТекущийПользователь(), Ложь);
	
	ПоляОбъектаСубконто	  = Новый Структура("Субконто1, Субконто2, Субконто3", "СубконтоЗатратБУ1", "СубконтоЗатратБУ2", "СубконтоЗатратБУ3");
	ПоляОбъектаСубконтоНУ = Новый Структура("Субконто1, Субконто2, Субконто3", "СубконтоЗатратНУ1", "СубконтоЗатратНУ2", "СубконтоЗатратНУ3");
	
	ПроцедурыБухгалтерскогоУчетаКлиентСервер.УстановитьДоступностьИЗаголовкиСубконто(СтрокаТабличнойЧасти.СчетЗатратБУ, СтрокаТабличнойЧасти, ПоляОбъектаСубконто);
	ПроцедурыБухгалтерскогоУчетаКлиентСервер.УстановитьДоступностьИЗаголовкиСубконто(СтрокаТабличнойЧасти.СчетЗатратНУ, СтрокаТабличнойЧасти, ПоляОбъектаСубконтоНУ);
	
КонецПроцедуры

#КонецОбласти 

#Область РаботаСФормами

// Обработчик события ПриСозданииНаСервере в форме списка документа АВР.
//
// Параметры:
//  Форма - УправляемаяФорма - Форма документа АВР.
//
Процедура АВРФормаСпискаИВыбораПриСозданииНаСервере(Форма) Экспорт
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(Форма);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	УстановитьОтборПоОсновнойОрганизации(Форма);

КонецПроцедуры

Функция ПараметрыВыбораНоменклатурыАВРНаСервере() Экспорт
	
	Отбор = Новый Структура;
	
	//БК3
	Отбор.Вставить("Услуга", Истина);
	ПараметрыФормы = Новый Структура("Отбор", Отбор);
	
	Возврат ПараметрыФормы;

КонецФункции

Функция ПолучитьИсключаемыеТипыОснованийЭАВР() Экспорт
	СписокИсключений = Новый СписокЗначений;
	СписокИсключений.Добавить(Тип("ДокументСсылка.ПоступлениеТоваровУслуг"));
	СписокИсключений.Добавить(Тип("ДокументСсылка.ПоступлениеДопРасходов"));
	Возврат СписокИсключений;
КонецФункции

Функция УстановитьОтборПоОсновнойОрганизации(Форма, ИмяСписка = "Список", ИмяРеквизита = "Организация", ЗначениеОтбора = Неопределено) Экспорт
	
	Если Справочники.Организации.ИспользуетсяНесколькоОрганизаций() Тогда
		
		УчетПоВсемОрганизациям = ПользователиБКВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию(ПользователиКлиентСервер.АвторизованныйПользователь(), "УчетПоВсемОрганизациям");
		ОсновнаяОрганизация = Справочники.Организации.ОрганизацияПоУмолчанию(ЗначениеОтбора);
		
		Форма.Организация = ОсновнаяОрганизация;
		
		Если Форма.ИмяФормы = "Документ.ЭлектронныйАктВыполненныхРабот.Форма.ФормаСпискаДокументов" Тогда
			ЭСФКлиентСерверПереопределяемый.ИзменитьЭлементОтбораСписка(Форма.СписокДокументовКОформлению, "Организация", ОсновнаяОрганизация, ЗначениеЗаполнено(ОсновнаяОрганизация));
		Иначе
			ЭСФКлиентСерверПереопределяемый.ИзменитьЭлементОтбораСписка(Форма.Список, "Организация", ОсновнаяОрганизация, ЗначениеЗаполнено(ОсновнаяОрганизация));
		КонецЕсли;
		
	Иначе
		
		ОсновнаяОрганизация = Справочники.Организации.ПустаяСсылка();
		
	КонецЕсли;
	
	Возврат ОсновнаяОрганизация;
	
КонецФункции

#КонецОбласти

#Область ЗаполнениеПолучаемыхАВР

Функция ОпределитьНаправлениеАВР(АВР, СтруктурнаяЕдиница) Экспорт
	
	//БК3
	БинСтруктурнойЕдиницы = СтруктурнаяЕдиница.ИдентификационныйНомер;
	  
	ПрисутствуетВПоставщиках = ?(НЕ АВР.Поставщики.Найти(БинСтруктурнойЕдиницы, "ПоставщикИдентификатор") = Неопределено, Истина, Ложь); 
	ПрисутствуетВПолучателях = ?(НЕ АВР.Получатели.Найти(БинСтруктурнойЕдиницы, "ПолучательИдентификатор") = Неопределено, Истина, Ложь);
	
	Если ПрисутствуетВПоставщиках Тогда
		Возврат Перечисления.НаправленияЭСФ.Исходящий;
	ИначеЕсли ПрисутствуетВПолучателях Тогда
		Возврат Перечисления.НаправленияЭСФ.Входящий;
	Иначе
		Возврат Перечисления.НаправленияЭСФ.ПустаяСсылка();
	КонецЕсли;
		
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытийФорм

Процедура ПриСозданииНаСервере(Форма) Экспорт
		
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(Форма);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды	
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
 	ВерсионированиеОбъектов.ПриСозданииНаСервере(Форма);
 	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
КонецПроцедуры

Процедура ПриЧтенииНаСервере(ТекущийОбъект, Форма) Экспорт

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(Форма, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
 	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(Форма, ТекущийОбъект);
 	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
КонецПроцедуры

#КонецОбласти

#Область РаботаАВРИзПервчиныхДокументов
Процедура НайтиАВРИЗаполнитьСсылку(Форма, Объект) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЭлектронныеАВР") Тогда
		Возврат;
	КонецЕсли;
	
	Элементы = Форма.Элементы;

	Элементы.СсылкаНаЭлектронныеАВР.Видимость = Ложь;

	Форма.СписокЭлектронныхАВР.ЗагрузитьЗначения(ОбщегоНазначенияБК.НайтиМассивПодчиненныхДокументов(Объект.Ссылка, "ЭлектронныйАктВыполненныхРабот"));
	
	Если Форма.СписокЭлектронныхАВР.Количество() = 0 Тогда
		Возврат;
	ИначеЕсли Форма.СписокЭлектронныхАВР.Количество() > 1 Тогда
		НадписьКоличествоЭлектронныхАВР = НСтр("ru='Всего АВР(электронных): (%КоличествоДокументов%)'");
		Элементы.СсылкаНаЭлектронныеАВР.Заголовок = СтрЗаменить(НадписьКоличествоЭлектронныхАВР, "%КоличествоДокументов%", Форма.СписокЭлектронныхАВР.Количество());
	Иначе
		// Установить текст гиперссылки ЭАВР
		Элементы.СсылкаНаЭлектронныеАВР.Заголовок = НСтр("ru = '%ЭАВР% (%СостояниеЭАВР%)'");
		Элементы.СсылкаНаЭлектронныеАВР.Заголовок = СтрЗаменить(Элементы.СсылкаНаЭлектронныеАВР.Заголовок, "%ЭАВР%", Форма.СписокЭлектронныхАВР[0].Значение);
		Элементы.СсылкаНаЭлектронныеАВР.Заголовок = СтрЗаменить(Элементы.СсылкаНаЭлектронныеАВР.Заголовок, "%СостояниеЭАВР%", Форма.СписокЭлектронныхАВР[0].Значение.Состояние);
		
		ПолучитьЦветСсылкиЭАВР(Элементы.СсылкаНаЭлектронныеАВР, Форма.СписокЭлектронныхАВР);
		
	КонецЕсли;
	
	Элементы.СсылкаНаЭлектронныеАВР.Видимость = Истина;
	
КонецПроцедуры

Процедура ПолучитьЦветСсылкиЭАВР(ЭлементыФормы, МассивЭАВР) Экспорт
		
	Для каждого ОбъектЭАВР Из МассивЭАВР Цикл
		
		Если ОбъектЭАВР.Значение.Состояние = Перечисления.СостоянияАВР.ДоставленПолучателю ИЛИ ОбъектЭАВР.Значение.Состояние = Перечисления.СостоянияАВР.ПринятСервером 
			ИЛИ ОбъектЭАВР.Значение.Состояние = Перечисления.СостоянияАВР.ПодтвержденПолучателем
			ИЛИ ОбъектЭАВР.Значение.Состояние = Перечисления.СостоянияАВР.ПринятОтПоставщика Тогда
			
			ЭлементыФормы.ЦветТекста = ЭСФКлиентСервер.ЦветЗеленый();
			
		КонецЕсли;
		
		Если ОбъектЭАВР.Значение.Состояние = Перечисления.СостоянияАВР.Аннулирован ИЛИ ОбъектЭАВР.Значение.Состояние = Перечисления.СостоянияАВР.ОтклоненПолучателем 
			ИЛИ ОбъектЭАВР.Значение.Состояние = Перечисления.СостоянияАВР.ОтклоненСервером
			ИЛИ ОбъектЭАВР.Значение.Состояние = Перечисления.СостоянияАВР.Отозван
			ИЛИ ОбъектЭАВР.Значение.Состояние = Перечисления.СостоянияАВР.Расторжен Тогда
			
			ЭлементыФормы.ЦветТекста = ЭСФКлиентСервер.ЦветКрасный();
			
		КонецЕсли;
		
		Если ОбъектЭАВР.Значение.Состояние = Перечисления.СостоянияАВР.Сформирован Тогда
			
			ЭлементыФормы.ЦветТекста = ЭСФКлиентСервер.ЦветСиний();
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьЭлектронныйАВР(СсылкаДокументОснование) Экспорт
	
	Если Не ЗначениеЗаполнено(СсылкаДокументОснование) Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЭлектронныйАктВыполненныхРабот.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ЭлектронныйАктВыполненныхРабот КАК ЭлектронныйАктВыполненныхРабот
		|ГДЕ
		|	ЭлектронныйАктВыполненныхРабот.ДокументОснование = &ДокументОснование
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЭлектронныйАктВыполненныхРабот.Дата";
	
	Запрос.УстановитьПараметр("ДокументОснование", СсылкаДокументОснование);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

Функция ПроверитьНаличиеРанееВведеныхЭАВР(Основание) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Основание", Основание);
	
	СтатусыАВР = Новый Массив;
	СтатусыАВР.Добавить(Перечисления.СтатусыАВР.Подтвержденный);
	СтатусыАВР.Добавить(Перечисления.СтатусыАВР.НаСтадииРасторжения);
	Запрос.УстановитьПараметр("СтатусыАВР", СтатусыАВР);
	Запрос.УстановитьПараметр("ПустаяДата"   , '00010101');
	Запрос.УстановитьПараметр("ДатаВводаИспр", '20230203');

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Документы.Ссылка КАК Документ
	|ПОМЕСТИТЬ вт_документыОснования
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК Документы
	|ГДЕ
	|	Документы.Ссылка В(&Основание)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Документ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	вт_документыОснования.Документ КАК ДокументОснование,
	|	ЭлектронныйАктВыполненныхРабот.Ссылка КАК ЭАВР,
	|	ЕСТЬNULL(ЭлектронныйАктВыполненныхРабот.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыАВР.ПустаяСсылка)) КАК СтатусАВР,
	|	ЕСТЬNULL(ЭлектронныйАктВыполненныхРабот.Дата, &ПустаяДата) КАК ДатаАВР
	|ПОМЕСТИТЬ вт_ДокументыЭАВР
	|ИЗ
	|	вт_документыОснования КАК вт_документыОснования
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭлектронныйАктВыполненныхРабот КАК ЭлектронныйАктВыполненныхРабот
	|		ПО вт_документыОснования.Документ = ЭлектронныйАктВыполненныхРабот.ДокументОснование
	|ГДЕ
	|	НЕ ЭлектронныйАктВыполненныхРабот.Ссылка ЕСТЬ NULL
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	вт_документыОснования.Документ КАК Документ,
	|	СУММА(ВЫБОР
	|			КОГДА ЭлектронныйАктВыполненныхРабот.ЭАВР ЕСТЬ NULL
	|				ТОГДА 0
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК КоличествоЭАВР
	|ПОМЕСТИТЬ вт_КоличествоЭАВР
	|ИЗ
	|	вт_документыОснования КАК вт_документыОснования
	|		ЛЕВОЕ СОЕДИНЕНИЕ вт_ДокументыЭАВР КАК ЭлектронныйАктВыполненныхРабот
	|		ПО вт_документыОснования.Документ = ЭлектронныйАктВыполненныхРабот.ДокументОснование
	|
	|СГРУППИРОВАТЬ ПО
	|	вт_документыОснования.Документ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДокументыОснования.Документ КАК Документ
	|ИЗ
	|	вт_документыОснования КАК ДокументыОснования
	|ГДЕ
	|	%УсловиеИсключенияОснования%
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументыБезЭАВР.Документ КАК Документ
	|ИЗ
	|	вт_КоличествоЭАВР КАК ДокументыБезЭАВР
	|ГДЕ
	|	ДокументыБезЭАВР.КоличествоЭАВР = 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ДокументыБезЭАВР.Документ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументыСЭАВР.Документ КАК Документ
	|ИЗ
	|	вт_КоличествоЭАВР КАК ДокументыСЭАВР
	|ГДЕ
	|	ДокументыСЭАВР.КоличествоЭАВР <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументыЭАВР.ДокументОснование КАК Документ
	|ИЗ
	|	вт_ДокументыЭАВР КАК ДокументыЭАВР
	|ГДЕ
	|	ДокументыЭАВР.СтатусАВР В (&СтатусыАВР)
	|	И ДокументыЭАВР.ДатаАВР >= &ДатаВводаИспр";
	
	Если ТипЗнч(Основание) = Тип("Массив") Тогда
		ДокументОснования = Основание[0];
	Иначе
		ДокументОснования = Основание;
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Документ.РеализацияТоваровУслуг", "Документ." + ДокументОснования.Метаданные().Имя);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%УсловиеИсключенияОснования%", "Ложь");
	Запрос.Текст = ТекстЗапроса;
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	МассивДокументовНедопустимыхОснований = РезультатЗапроса[3].Выгрузить().ВыгрузитьКолонку("Документ");
	МассивДокументовБезЭАВР = РезультатЗапроса[4].Выгрузить().ВыгрузитьКолонку("Документ");
	МассивДокументовСЭАВР = РезультатЗапроса[5].Выгрузить().ВыгрузитьКолонку("Документ");
	МассивПодтвержденныхИВпроцессеРасторжения = РезультатЗапроса[6].Выгрузить().ВыгрузитьКолонку("Документ");
	
	МассивыОбрабатываемыхДокументов = Новый Структура;
	МассивыОбрабатываемыхДокументов.Вставить("МассивДокументовНедопустимыхОснований"	 , МассивДокументовНедопустимыхОснований);
	МассивыОбрабатываемыхДокументов.Вставить("МассивДокументовБезЭАВР"					 , МассивДокументовБезЭАВР);
	МассивыОбрабатываемыхДокументов.Вставить("МассивДокументовСЭАВР"					 , МассивДокументовСЭАВР);
	МассивыОбрабатываемыхДокументов.Вставить("МассивПодтвержденныхИВпроцессеРасторжения" , МассивПодтвержденныхИВпроцессеРасторжения);
	
	Возврат МассивыОбрабатываемыхДокументов;
	
КонецФункции

Функция ПроверитьДокументОснованияЭАВР(ДокументОснования) Экспорт
	
	Если НЕ ПроверитьСпособВыпискиОснованияЭАВР(ДокументОснования) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'В документе ""%1"" необходимо указать способ выписки ""%2"", ввод ЭАВР невозможен.'"),
		ДокументОснования.Ссылка, Перечисления.СпособыВыпискиАктовВыполненныхРабот.НаПорталеИСЭСФ));
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ТребуетсяОформлениеЭлектронныхДокументов

Процедура ПриЗаписиОснованийЭАВР(Источник, Отказ) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьЭлектронныеАВР") Тогда
		Возврат;
	КонецЕсли;
	
	Если ПроверитьТипИсточникаДляОформленияЭАВР(Источник) Тогда
		
		Если ПолучитьЭлектронныйАВР(Источник.Ссылка).Количество() = 0 Тогда
			
			Набор = РегистрыСведений.ТребуетсяОформлениеЭАВР.СоздатьНаборЗаписей();
			Набор.Отбор.Основание.Установить(Источник.Ссылка);
			Набор.Прочитать();
			Набор.Очистить();
			
			КонтрольПроведенияПервичных = АВРКлиентСерверПереопределяемый.КонтрольПроведенияДокументаОснования();
			Если ПроверитьОснованиеДляОформленияЭАВР(Источник)
				И ((КонтрольПроведенияПервичных И Источник.Проведен) 
					ИЛИ НЕ КонтрольПроведенияПервичных)  Тогда
					НоваяЗапись = Набор.Добавить();
					НоваяЗапись.Организация = Источник.Организация;
					НоваяЗапись.Контрагент = Источник.Контрагент;
					НоваяЗапись.Основание = Источник.Ссылка;
			КонецЕсли;

			
						
			Набор.Записать(Истина);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПроверитьТипИсточникаДляОформленияЭАВР(Источник) Экспорт
	
	Возврат ТипЗнч(Источник) = Тип("ДокументОбъект.АктОбОказанииПроизводственныхУслуг")
		ИЛИ ТипЗнч(Источник) = Тип("ДокументСсылка.АктОбОказанииПроизводственныхУслуг")
		ИЛИ ТипЗнч(Источник) = Тип("ДокументОбъект.РеализацияТоваровУслуг")
		ИЛИ ТипЗнч(Источник) = Тип("ДокументСсылка.РеализацияТоваровУслуг")
		ИЛИ ТипЗнч(Источник) = Тип("ДокументОбъект.РеализацияУслугПоПереработке")
		ИЛИ ТипЗнч(Источник) = Тип("ДокументСсылка.РеализацияУслугПоПереработке");
	
КонецФункции

Функция ПроверитьОснованиеДляОформленияЭАВР(Основание) Экспорт
	
	Если ПроверитьСпособВыпискиОснованияЭАВР(Основание) Тогда
			Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция ПроверитьСпособВыпискиОснованияЭАВР(Основание) Экспорт
	
	Если ТипЗнч(Основание) = Тип("ДокументОбъект.АктОбОказанииПроизводственныхУслуг")
		 ИЛИ ТипЗнч(Основание) = Тип("ДокументСсылка.АктОбОказанииПроизводственныхУслуг")
		 ИЛИ ТипЗнч(Основание) = Тип("ДокументОбъект.РеализацияТоваровУслуг")
		 ИЛИ ТипЗнч(Основание) = Тип("ДокументСсылка.РеализацияТоваровУслуг")
		 ИЛИ ТипЗнч(Основание) = Тип("ДокументОбъект.РеализацияУслугПоПереработке")
		 ИЛИ ТипЗнч(Основание) = Тип("ДокументСсылка.РеализацияУслугПоПереработке") Тогда
		Возврат Основание.СпособВыпискиАктовВыполненныхРабот = Перечисления.СпособыВыпискиАктовВыполненныхРабот.НаПорталеИСЭСФ;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция ТекстЗапросаДокументовКОформлениюЭАВР() Экспорт
	
	Возврат "ВЫБРАТЬ
	|	ТребуетсяОформлениеЭАВР.Организация КАК Организация,
	|	ТребуетсяОформлениеЭАВР.Контрагент КАК Контрагент,
	|	ДокументОснованиеЭАВР.Ссылка КАК Ссылка,
	|	ДокументОснованиеЭАВР.Автор КАК Автор,
	|	ДокументОснованиеЭАВР.Номер КАК Номер,
	|	НАЧАЛОПЕРИОДА(ДокументОснованиеЭАВР.Дата, ДЕНЬ) КАК ДатаОформления,
	|	ДокументОснованиеЭАВР.ВалютаДокумента КАК Валюта,
	|	ДокументОснованиеЭАВР.СуммаДокумента КАК Сумма,
	|	ТИПЗНАЧЕНИЯ(ДокументОснованиеЭАВР.Ссылка) КАК ВидОснования,
	|	РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ДокументОснованиеЭАВР.Дата, ДЕНЬ), &НачалоТекущегоДня, ДЕНЬ) КАК Срок,
	|	НАЧАЛОПЕРИОДА(ДокументОснованиеЭАВР.Дата, МЕСЯЦ) КАК МесяцОформления
	|ИЗ
	|	РегистрСведений.ТребуетсяОформлениеЭАВР КАК ТребуетсяОформлениеЭАВР
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.АктОбОказанииПроизводственныхУслуг КАК ДокументОснованиеЭАВР
	|		ПО ТребуетсяОформлениеЭАВР.Основание = ДокументОснованиеЭАВР.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТребуетсяОформлениеЭАВР.Организация,
	|	ТребуетсяОформлениеЭАВР.Контрагент,
	|	ДокументОснованиеЭАВР.Ссылка,
	|	ДокументОснованиеЭАВР.Автор КАК Автор,
	|	ДокументОснованиеЭАВР.Номер,
	|	НАЧАЛОПЕРИОДА(ДокументОснованиеЭАВР.Дата, ДЕНЬ),
	|	ДокументОснованиеЭАВР.ВалютаДокумента,
	|	ДокументОснованиеЭАВР.СуммаДокумента,
	|	ТИПЗНАЧЕНИЯ(ДокументОснованиеЭАВР.Ссылка),
	|	РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ДокументОснованиеЭАВР.Дата, ДЕНЬ), &НачалоТекущегоДня, ДЕНЬ),
	|	НАЧАЛОПЕРИОДА(ДокументОснованиеЭАВР.Дата, МЕСЯЦ)
	|ИЗ
	|	РегистрСведений.ТребуетсяОформлениеЭАВР КАК ТребуетсяОформлениеЭАВР
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК ДокументОснованиеЭАВР
	|		ПО ТребуетсяОформлениеЭАВР.Основание = ДокументОснованиеЭАВР.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТребуетсяОформлениеЭАВР.Организация,
	|	ТребуетсяОформлениеЭАВР.Контрагент,
	|	ДокументОснованиеЭАВР.Ссылка,
	|	ДокументОснованиеЭАВР.Автор КАК Автор,
	|	ДокументОснованиеЭАВР.Номер,
	|	НАЧАЛОПЕРИОДА(ДокументОснованиеЭАВР.Дата, ДЕНЬ),
	|	ДокументОснованиеЭАВР.ВалютаДокумента,
	|	ДокументОснованиеЭАВР.СуммаДокумента,
	|	ТИПЗНАЧЕНИЯ(ДокументОснованиеЭАВР.Ссылка),
	|	РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ДокументОснованиеЭАВР.Дата, ДЕНЬ), &НачалоТекущегоДня, ДЕНЬ),
	|	НАЧАЛОПЕРИОДА(ДокументОснованиеЭАВР.Дата, МЕСЯЦ)
	|ИЗ
	|	РегистрСведений.ТребуетсяОформлениеЭАВР КАК ТребуетсяОформлениеЭАВР
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияУслугПоПереработке КАК ДокументОснованиеЭАВР
	|		ПО ТребуетсяОформлениеЭАВР.Основание = ДокументОснованиеЭАВР.Ссылка";
	
КонецФункции

#КонецОбласти

#Область РаботаСПервичнымиДокументами

Процедура ОбновлениеДанныхПервичныхДокументов(ОбъектАВР) Экспорт
	
	Если Не ЗначениеЗаполнено(ОбъектАВР.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	МетаданныеДокумента = ОбъектАВР.ДокументОснование.Метаданные();
	Если ОбщегоНазначенияБК.ЕстьРеквизитДокумента("ОтложитьНачислениеНДС", МетаданныеДокумента) Тогда
		СтрокаРеквизитов = "ДатаПодписанияГЗ,Проведен, ОтложитьНачислениеНДС";
	Иначе
		СтрокаРеквизитов = "ДатаПодписанияГЗ,Проведен";
	КонецЕсли;
	
	РеквизитыОснования = ЭСФСерверПереопределяемый.ЗначенияРеквизитовОбъекта(ОбъектАВР.ДокументОснование, СтрокаРеквизитов);
	
	Если РеквизитыОснования.Свойство("ОтложитьНачислениеНДС") И РеквизитыОснования.ОтложитьНачислениеНДС Тогда
		
		НаборЗаписей = РегистрыСведений.СведенияПоАктамВыполненныхРабот.СоздатьНаборЗаписей();					
		НаборЗаписей.Отбор.ДокументРеализацииУслуг.Установить(ОбъектАВР.ДокументОснование);						
		НаборЗаписей.Прочитать();					
		
		Если НаборЗаписей.Количество() > 0 Тогда  
			Для Каждого СтрокаНабораЗаписей Из НаборЗаписей Цикл
				СтрокаНабораЗаписей.ДатаПодписания = ОбъектАВР.ДатаПринятияСтатуса;
			КонецЦикла;
		Иначе
			Запись = НаборЗаписей.Добавить();
			Запись.Организация = ОбъектАВР.Организация;
			Запись.ДокументРеализацииУслуг = ОбъектАВР.ДокументОснование;
			Запись.ДатаПодписания = ОбъектАВР.ДатаПринятияСтатуса;
		КонецЕсли;

			
		Попытка
			НаборЗаписей.Записать();
		Исключение
			ТекстСообщения = НСтр("ru='При обновлении документа %1 произошла ошибка: %2'");
			ТекстСообщения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, ОбъектАВР, ОписаниеОшибки());
			ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));				
		КонецПопытки;

	Иначе
		
		Если РеквизитыОснования.ДатаПодписанияГЗ <> ОбъектАВР.ДатаПринятияСтатуса Тогда
			
			Если РеквизитыОснования.Проведен Тогда
				
				ТекстСообщения = НСтр("ru = 'В документе ""[ДокументОснование]"" поле ""Дата подписи"" отличается от документа ""[АВР]"".'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "[АВР]", АВРКлиентСервер.КраткоеПредставлениеАВР(ОбъектАВР.Ссылка));
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ДокументОснование]", АВРКлиентСервер.КраткоеПредставлениеАВР(ОбъектАВР.ДокументОснование));
				ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
				
			Иначе
				
				Попытка
					
					ДокументОбъект = ОбъектАВР.ДокументОснование.ПолучитьОбъект();
					
					ДокументОбъект.ДатаПодписанияГЗ = ОбъектАВР.ДатаПринятияСтатуса;
					
					ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
					
					Если ЗначениеЗаполнено(РеквизитыОснования.ДатаПодписанияГЗ) Тогда
						ТекстСообщения = НСтр("ru = 'В документе ""[ДокументОснование]"" скорректировано поле ""Дата подписи"" по документу ""[АВР]"". Документ проведен.'");
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "[АВР]", АВРКлиентСервер.КраткоеПредставлениеАВР(ОбъектАВР.Ссылка));
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ДокументОснование]", АВРКлиентСервер.КраткоеПредставлениеАВР(ОбъектАВР.ДокументОснование));
						ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
					Иначе
						ТекстСообщения = НСтр("ru = 'В документе ""[ДокументОснование]"" заполнено поле ""Дата подписи"" по документу ""[АВР]"". Документ проведен.'");
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "[АВР]", АВРКлиентСервер.КраткоеПредставлениеАВР(ОбъектАВР.Ссылка));
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ДокументОснование]", АВРКлиентСервер.КраткоеПредставлениеАВР(ОбъектАВР.ДокументОснование));
						ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
					КонецЕсли;
					
				Исключение
					
					ЗаписьЖурналаРегистрации(
					АВРКлиентСервер.КраткоеПредставлениеАВР(ОбъектАВР.ДокументОснование),
					УровеньЖурналаРегистрации.Ошибка,,,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					
				КонецПопытки;
				
			КонецЕсли;
			
		КонецЕсли; 
			
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьДатыПервичныхДокументовПриОтправкеАВР(МассивОснований) Экспорт
	
	Для Каждого Основание Из МассивОснований Цикл
		
			ДокументОснование = Основание.ПолучитьОбъект();
			ДокументОснование.Дата = ТекущаяДатаСеанса();
			ДокументОснование.Записать();
		
	КонецЦикла;

КонецПроцедуры

Функция МожноИзменитьДатуСвязанногоДокументаАВР(Основание) Экспорт
	
	Возврат ?(Основание.Проведен, Ложь, Истина);

КонецФункции

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

// Заполняет список обработчиков обновления информационной базы.
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики, ЗавершениеОбновления = Ложь) Экспорт
	

	
КонецПроцедуры

#КонецОбласти

#Область ГСВС

Функция ПолучитьГСВС(КодКПВЭД = "") Экспорт
	
	Если НЕ ЗначениеЗаполнено(КодКПВЭД) Тогда
		Возврат Справочники.НоменклатураГСВС.ПустаяСсылка();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	0 КАК Приоритет,
	|	НоменклатураГСВС.Ссылка КАК СсылкаГСВС
	|ПОМЕСТИТЬ ВТ_КодыГСВС
	|ИЗ
	|	Справочник.НоменклатураГСВС КАК НоменклатураГСВС
	|ГДЕ
	|	НоменклатураГСВС.ПризнакВозможностиВыбора = ИСТИНА
	|	И НоменклатураГСВС.КодГСВС = &КодКПВЭД
	|	И НоменклатураГСВС.ТипКодаГСВС = Значение(Перечисление.ТипыКодовГСВС.КПВЭД)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	1,
	|	СведенияОНоменклатуреГСВС.НоменклатураГСВС
	|ИЗ
	|	РегистрСведений.СведенияОНоменклатуреГСВС КАК СведенияОНоменклатуреГСВС
	|ГДЕ
	|	СведенияОНоменклатуреГСВС.НоменклатураГСВС.ПризнакВозможностиВыбора = ИСТИНА
	|	И СведенияОНоменклатуреГСВС.ПолныйКодГСВС ПОДОБНО ""%"" + &КодКПВЭД
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(ВТ_КодыГСВС.Приоритет) КАК Приоритет,
	|	ВТ_КодыГСВС.СсылкаГСВС КАК ГСВС
	|ИЗ
	|	ВТ_КодыГСВС КАК ВТ_КодыГСВС
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_КодыГСВС.СсылкаГСВС";
	
	Запрос.УстановитьПараметр("КодКПВЭД", КодКПВЭД);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		ГСВС = Выборка.ГСВС;
	КонецЕсли;
	
	Возврат ГСВС;
	
КонецФункции

#КонецОбласти