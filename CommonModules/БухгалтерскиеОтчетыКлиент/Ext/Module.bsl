////////////////////////////////////////////////////////////////////////////////
// Функции и процедуры обеспечения формирования бухгалтерских отчетов.
//  
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

Процедура ПриОткрытии(Форма, Отказ) Экспорт
	
	// Установка модифицированности пользовательских настроек 
	// для их автоматического сохранения при закрытии формы
	// не требуется
	Форма.ПользовательскиеНастройкиМодифицированы = Ложь;
	
КонецПроцедуры

Процедура ПередЗакрытием(Форма, Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка, РежимРасшифровки = Ложь) Экспорт
	
	// Структура отчета задается динамически, поэтому в сохранении Варианта нет необходимости
	Форма.ВариантМодифицирован = Ложь;
	
	// Настройки редактируются без использования элементов формы, связанными с пользовательскими настройками.
	// Поэтому форма не может сообщить, редактировались ли фактически настройки или нет:
	// всегда даем команду на сохранение настроек.
	// В то же время, в режиме расшифровки сохранять настройки не следует, поскольку часть этих настроек ситуативная,
	// предназначена для расшифровки конкретного показателя.
	Форма.ПользовательскиеНастройкиМодифицированы = Не РежимРасшифровки;
	
КонецПроцедуры

Процедура ОбработкаРасшифровкиСтандартногоОтчета(ФормаОтчета, Элемент, Расшифровка, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Если (ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ФормаОтчета, "ОткрытИзРассылки") И ФормаОтчета.ОткрытИзРассылки) Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторОбъекта = БухгалтерскиеОтчетыКлиентСервер.ПолучитьИдентификаторОбъекта(ФормаОтчета);
	
	ПараметрыРасшифровки = БухгалтерскиеОтчетыВызовСервера.ПолучитьПараметрыРасшифровкиОтчета(ФормаОтчета.ДанныеРасшифровки, ИдентификаторОбъекта, Расшифровка);
	
	Если Не ЗначениеЗаполнено(ПараметрыРасшифровки) Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполняемыеНастройки = Новый Структура("Показатели, Группировка, Отбор, ВыводимыеДанные", Ложь, Истина, Ложь, Истина);
	Если ПараметрыРасшифровки.ОткрытьОбъект Тогда
		ПоказатьЗначение( ,ПараметрыРасшифровки.Значение);
	ИначеЕсли ПараметрыРасшифровки.Свойство("ОткрытьФорму") И ПараметрыРасшифровки.ОткрытьФорму Тогда
		ОткрытьФорму(ПараметрыРасшифровки.Форма, ПараметрыРасшифровки.ПараметрыФормы);		
	Иначе
		СписокПунктовМеню = ПараметрыРасшифровки.СписокПунктовМеню;
		Если СписокПунктовМеню.Количество() = 1 Тогда
			ИДРасшифровки = СписокПунктовМеню[0].Значение;
			Если ТипЗнч(ИДРасшифровки) = Тип("Строка") Тогда
				ИмяФормы = ПолучитьИмяФормыПоИДРасшифровки(ИДРасшифровки);
				ПараметрыФормы = Новый Структура("ВидРасшифровки, АдресНастроек, СформироватьПриОткрытии, ИДРасшифровки, ЗаполняемыеНастройки",
												 1, ФормаОтчета.ДанныеРасшифровки, Истина, ИДРасшифровки, ЗаполняемыеНастройки);
				ОткрытьФорму(ИмяФормы, ПараметрыФормы,, Истина);
			Иначе
				ПоказатьЗначение(, ИДРасшифровки);
			КонецЕсли;
		ИначеЕсли СписокПунктовМеню.Количество() > 0 Тогда
			Параметры = Новый Структура("ЗаполняемыеНастройки, ФормаОтчета", ЗаполняемыеНастройки, ФормаОтчета);
			Если ПараметрыРасшифровки.Свойство("РодителиПоля") Тогда
				Параметры.Вставить("РодителиПоля", ПараметрыРасшифровки.РодителиПоля);
				Параметры.Вставить("ИдентификаторОбъекта", ИдентификаторОбъекта);
			КонецЕсли;
			Оповещение = Новый ОписаниеОповещения("ВыбратьИзМенюЗавершение", ЭтотОбъект, Параметры);
			ФормаОтчета.ПоказатьВыборИзМеню(Оповещение, СписокПунктовМеню, Элемент);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыбратьИзМенюЗавершение(ВыбранноеДействие, Параметры) Экспорт
	
	ЗаполняемыеНастройки = Параметры.ЗаполняемыеНастройки;
	ФормаОтчета          = Параметры.ФормаОтчета;
	
	Если ВыбранноеДействие <> Неопределено Тогда
		Если ТипЗнч(ВыбранноеДействие.Значение) = Тип("Строка") Тогда
			Если ВыбранноеДействие.Значение = "Расшифровать" Тогда
				ПараметрыФормы = Новый Структура;
				ПараметрыФормы.Вставить("СхемаКомпоновкиДанных" , ФормаОтчета.СхемаКомпоновкиДанных);
				ПараметрыФормы.Вставить("Режим"                 , "");
				ПараметрыФормы.Вставить("ИсключенныеПоля"       , Параметры.РодителиПоля);
				ПараметрыФормы.Вставить("ТекущаяСтрока"         , Неопределено);
				
				ОповещениеОЗакрытии = Новый ОписаниеОповещения("ВыборПоляРасшифровкиЗавершение", ФормаОтчета, Параметры);
				ОткрытьФорму("ОбщаяФорма.ФормаВыбораДоступногоПоля", ПараметрыФормы,,,,, ОповещениеОЗакрытии);
				
			Иначе
				ИДРасшифровки = ВыбранноеДействие.Значение;
				Если ИДРасшифровки = "СверкаДанныхБУ_НУ" Тогда
					ГруппировкиРасшифровки = Новый Массив;
					Если ВыбранноеДействие.Представление = НСтр("ru = 'Расшифровать по первичным документам'") Тогда
						ГруппировкиРасшифровки.Добавить(Новый Структура("Поле, Представление, ТипГруппировки",
						                                                "ДокументДвижения", НСтр("ru = 'Документ'"), ПредопределенноеЗначение("Перечисление.ТипДетализацииСтандартныхОтчетов.Элементы")));
					ИначеЕсли ВыбранноеДействие.Представление = НСтр("ru = 'Расшифровать по субконто'") Тогда
						ГруппировкиРасшифровки.Добавить(Новый Структура("Поле, Представление, ТипГруппировки",
						                                                "СчетНУ", НСтр("ru = 'Счет НУ'"), ПредопределенноеЗначение("Перечисление.ТипДетализацииСтандартныхОтчетов.Иерархия")));
						ГруппировкиРасшифровки.Добавить(Новый Структура("Поле, Представление, ТипГруппировки",
						                                                "Субконто1", НСтр("ru = 'Субконто1'"), ПредопределенноеЗначение("Перечисление.ТипДетализацииСтандартныхОтчетов.Элементы")));
					КонецЕсли;
					ЗаполняемыеНастройки.Вставить("ГруппировкиРасшифровки", ГруппировкиРасшифровки);
					ЗаполняемыеНастройки.Вставить("ДополнительныеПоля", Истина);
				КонецЕсли;
				ИмяФормы = ПолучитьИмяФормыПоИДРасшифровки(ИДРасшифровки);
				ПараметрыФормы = Новый Структура("ВидРасшифровки, АдресНастроек, СформироватьПриОткрытии, ИДРасшифровки, ЗаполняемыеНастройки",
												 1, ФормаОтчета.ДанныеРасшифровки, Истина, ИДРасшифровки, ЗаполняемыеНастройки);
				ОткрытьФорму(ИмяФормы, ПараметрыФормы,, Истина);
			КонецЕсли;
		Иначе
			ПоказатьЗначение(, ВыбранноеДействие.Значение);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыборПоляРасшифровкиЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = Неопределено ИЛИ РезультатЗакрытия = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	ФормаОтчета = ДополнительныеПараметры.ФормаОтчета;
	
	ИДРасшифровки = ДополнительныеПараметры.ИдентификаторОбъекта;

    ИмяФормы = ПолучитьИмяФормыПоИДРасшифровки(ИДРасшифровки);
	
	ПараметрыФормы = Новый Структура("ВидРасшифровки, АдресНастроек, СформироватьПриОткрытии, ИДРасшифровки",
									 1, ФормаОтчета.ДанныеРасшифровки, Истина, ИДРасшифровки);
	ОткрытьФорму(ИмяФормы, ПараметрыФормы,, Истина);
		
КонецПроцедуры

Процедура ОбработкаРасшифровкиСпециализированногоОтчета(ФормаОтчета, Элемент, Расшифровка, СтандартнаяОбработка, ПланСчетов = "Типовой") Экспорт
	
	Перем ВыполненноеДействие, ПараметрВыполненногоДействия;
	
	// Запретим стандартную обработку расшифровки
	СтандартнаяОбработка = Ложь;
	
	ИдентификаторОбъекта = БухгалтерскиеОтчетыКлиентСервер.ПолучитьИдентификаторОбъекта(ФормаОтчета);
	
	ПараметрыРасшифровки = БухгалтерскиеОтчетыВызовСервера.ПолучитьПараметрыРасшифровкиСпециализированногоОтчета(ФормаОтчета.ДанныеРасшифровки, ИдентификаторОбъекта, Расшифровка);
	
	Если Не ЗначениеЗаполнено(ПараметрыРасшифровки) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВычислитьСуммуВыделенныхЯчеекТабличногоДокумента(ПолеСумма, Результат, КэшВыделеннойОбласти, НеобходимоВычислятьНаСервере) Экспорт
	
	Если НеобходимоОбновитьСумму(Результат, КэшВыделеннойОбласти) Тогда
		ПолеСумма = 0;
		КоличествоВыделенныхОбластей = КэшВыделеннойОбласти.Количество();
		Если КоличествоВыделенныхОбластей = 0      // Ничего не выделено
			ИЛИ КэшВыделеннойОбласти.Свойство("T") // Выделен весь табличный документ (Ctrl+A)
			Тогда
			КэшВыделеннойОбласти.Вставить("Сумма", 0);
		ИначеЕсли КоличествоВыделенныхОбластей = 1 Тогда
			// Если выделено небольшое количество ячейек, то получим сумму на клиенте
			Для каждого КлючИЗначение Из КэшВыделеннойОбласти Цикл
				СтруктураАдресВыделеннойОбласти = КлючИЗначение.Значение;
			КонецЦикла;
			
			РазмерОбластиПоВертикали   = СтруктураАдресВыделеннойОбласти.Низ   - СтруктураАдресВыделеннойОбласти.Верх;
			РазмерОбластиПоГоризонтали = СтруктураАдресВыделеннойОбласти.Право - СтруктураАдресВыделеннойОбласти.Лево;
			
			// В некоторых отчетах показатели (да и аналитика на котрую может встать пользователь
			// выводятся в "объединенных" ячейках - не желательно в этом случае делать сервереный вызов. 
			// Выделенная область из 10 ячеек закрывает все такие случае и скорее всего всегда будет доступна на клиенте.
			// Максимум, может быть сделан один неявный серверный вызов
			ВычислитьНаКлиенте = (РазмерОбластиПоВертикали + РазмерОбластиПоГоризонтали) < 12;
			Если ВычислитьНаКлиенте Тогда
				СуммаВЯчейках = 0;
				Для ИндексСтрока = СтруктураАдресВыделеннойОбласти.Верх По СтруктураАдресВыделеннойОбласти.Низ Цикл
					Для ИндексКолонка = СтруктураАдресВыделеннойОбласти.Лево По СтруктураАдресВыделеннойОбласти.Право Цикл
						Попытка
							Ячейка = Результат.Область(ИндексСтрока, ИндексКолонка, ИндексСтрока, ИндексКолонка);
							Если Ячейка.Видимость = Истина Тогда
								Если Ячейка.СодержитЗначение И ТипЗнч(Ячейка.Значение) = Тип("Число") Тогда
									СуммаВЯчейках = СуммаВЯчейках + Ячейка.Значение;
								ИначеЕсли ЗначениеЗаполнено(Ячейка.Текст) Тогда
									ЧислоВЯчейке  = Вычислить("Число(СтрЗаменить(Ячейка.Текст, Символ(32), Символ(0)))");
									СуммаВЯчейках = СуммаВЯчейках + ЧислоВЯчейке;
								КонецЕсли;
							КонецЕсли;
						Исключение
						КонецПопытки;
					КонецЦикла;
				КонецЦикла;
				
				ПолеСумма = СуммаВЯчейках;
				КэшВыделеннойОбласти.Вставить("Сумма", ПолеСумма);
			Иначе
				// Если ячеек много, то лучше вычислим сумму ячеек на сервере за один вызов,
				// т.к. неявных серверных вызовов может быть гораздо больше
				НеобходимоВычислятьНаСервере = Истина;
			КонецЕсли;
		Иначе
			// Вычислим сумму ячеек на сервере
			НеобходимоВычислятьНаСервере = Истина;
		КонецЕсли;
	Иначе	
		ПолеСумма = КэшВыделеннойОбласти.Сумма;
	КонецЕсли;
	
КонецПроцедуры

Процедура ГруппировкаПередНачаломДобавления(Форма, Элемент, Отказ, Копирование, Родитель, Группа, ТабЧастьГруппировка = "Группировка") Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СхемаКомпоновкиДанных", Форма.СхемаКомпоновкиДанных);
	ПараметрыФормы.Вставить("Режим"                , "Группировка");
	ПараметрыФормы.Вставить("ИсключенныеПоля"      , Форма.ПолучитьЗапрещенныеПоля(ТабЧастьГруппировка));
	ПараметрыФормы.Вставить("ТекущаяСтрока"        , Неопределено);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", Форма);
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения(ТабЧастьГруппировка + "ПередНачаломДобавленияЗавершение", Форма, ДополнительныеПараметры);
	
	ОткрытьФорму("ОбщаяФорма.ФормаВыбораДоступногоПоля", ПараметрыФормы, Форма, Истина, , , ОповещениеОЗакрытии);
	
	Отказ = Истина;
	
КонецПроцедуры

Процедура ГруппировкаПередНачаломДобавленияЗавершение(РезультатЗакрытия, ДополнительныеПараметры, ТабЧастьГруппировка = "Группировка") Экспорт
	
	Форма =   ДополнительныеПараметры.Форма;
	
	Если ТипЗнч(РезультатЗакрытия) = Тип("Структура") Тогда
		НоваяСтрока = Форма.Отчет[ТабЧастьГруппировка].Добавить();
		НоваяСтрока.Использование  = Истина;
		НоваяСтрока.Поле           = РезультатЗакрытия.Поле;
		НоваяСтрока.Представление  = РезультатЗакрытия.Заголовок;
		НоваяСтрока.ТипГруппировки = ПредопределенноеЗначение("Перечисление.ТипДетализацииСтандартныхОтчетов.Элементы");
		
		Если Не ЗначениеЗаполнено(Форма.ИдентификаторЗадания) Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Форма.Элементы.Результат, "НеАктуальность");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ГруппировкаПередНачаломИзменения(Форма, Элемент, Отказ, ТабЧастьГруппировка = "Группировка") Экспорт
	
	Если Элемент.ТекущийЭлемент = Форма.Элементы[ТабЧастьГруппировка + "Представление"] Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("СхемаКомпоновкиДанных", Форма.СхемаКомпоновкиДанных);
		ПараметрыФормы.Вставить("Режим"          , "Группировка");
		ПараметрыФормы.Вставить("ИсключенныеПоля", Форма.ПолучитьЗапрещенныеПоля(ТабЧастьГруппировка));
		ПараметрыФормы.Вставить("ТекущаяСтрока"  , Элемент.ТекущиеДанные.Поле);
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Форма", Форма);
		ДополнительныеПараметры.Вставить("Элемент", Элемент);
			
		ОповещениеОЗакрытии = Новый ОписаниеОповещения(ТабЧастьГруппировка + "ПередНачаломИзмененияЗавершение", Форма, ДополнительныеПараметры);
		
		ОткрытьФорму("ОбщаяФорма.ФормаВыбораДоступногоПоля", ПараметрыФормы, Форма, Истина, , , ОповещениеОЗакрытии);
		
		Отказ = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ГруппировкаПередНачаломИзмененияЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Форма =   ДополнительныеПараметры.Форма;
	Элемент = ДополнительныеПараметры.Элемент;
	
	Если ТипЗнч(РезультатЗакрытия) = Тип("Структура") Тогда
		НоваяСтрока = Элемент.ТекущиеДанные;
		НоваяСтрока.Использование = Истина;
		НоваяСтрока.Поле          = РезультатЗакрытия.Поле;
		НоваяСтрока.Представление = РезультатЗакрытия.Заголовок;
		
		Если Не ЗначениеЗаполнено(Форма.ИдентификаторЗадания) Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Форма.Элементы.Результат, "НеАктуальность");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтборыПриИзменении(Форма, Элемент, ЕстьРеквизитПодразделение = Истина) Экспорт
	
	Отчет = Форма.Отчет;
	
	ТекущийОтбор = Элемент.ТекущиеДанные;
	
	Если ТекущийОтбор = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ТекущийОтбор.Использование Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущийОтбор.ЛевоеЗначение <> Неопределено Тогда
		Если ТекущийОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Организация") Тогда
			Если Отчет.Свойство("Организация") Тогда
				ТекущийОтбор.ПравоеЗначение = Отчет.Организация;
			ИначеЕсли Отчет.Свойство("ПредставлениеСпискаОрганизаций") И ЗначениеЗаполнено(Форма.СписокСтруктурныхЕдиниц) Тогда
				Форма.СписокСтруктурныхЕдиниц.Очистить();
				Отчет.ПредставлениеСпискаОрганизаций = "";
				Если Отчет.Свойство("ПредставлениеСпискаПодразделений")  Тогда
					Форма.СписокПодразделений.Очистить();
					Форма.СписокВладельцевГоловныхПодразделений.Очистить();
					Отчет.ПредставлениеСпискаПодразделений = "";
				КонецЕсли;
			ИначеЕсли Отчет.Свойство("ПредставлениеСпискаСтруктурныхЕдиниц") И ЗначениеЗаполнено(Форма.СписокСтруктурныхЕдиниц) Тогда
				Форма.СписокСтруктурныхЕдиниц.Очистить();
				Отчет.ПредставлениеСпискаСтруктурныхЕдиниц = "";
			КонецЕсли;
		ИначеЕсли ТекущийОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Подразделение") Тогда 
			Если Отчет.Свойство("Подразделение") Тогда
				ТекущийОтбор.ПравоеЗначение = Отчет.Подразделение;
			ИначеЕсли Отчет.Свойство("ПредставлениеСпискаПодразделений")  Тогда
				Форма.СписокПодразделений.Очистить();
				Форма.СписокВладельцевГоловныхПодразделений.Очистить();
				Отчет.ПредставлениеСпискаПодразделений = "";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ОтборыПередНачаломДобавления(Форма, Элемент, Отказ, Копирование, Родитель, Группа) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СхемаКомпоновкиДанных", Форма.СхемаКомпоновкиДанных);
	ПараметрыФормы.Вставить("Режим"                , "Отбор");
	ПараметрыФормы.Вставить("ИсключенныеПоля"      , Форма.ПолучитьЗапрещенныеПоля("Отбор"));
	ПараметрыФормы.Вставить("ТекущаяСтрока"        , Неопределено);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", Форма);
	ДополнительныеПараметры.Вставить("Элемент", Элемент);
		
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ОтборыПередНачаломДобавленияЗавершение", Форма, ДополнительныеПараметры);
	
	ОткрытьФорму("ОбщаяФорма.ФормаВыбораДоступногоПоля", ПараметрыФормы, Форма, Истина, , , ОповещениеОЗакрытии);
	
	Отказ = Истина;
	
КонецПроцедуры

Процедура ОтборыПередНачаломДобавленияЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Форма =   ДополнительныеПараметры.Форма;
	Элемент = ДополнительныеПараметры.Элемент;
	
	ПараметрыВыбранногоПоля = РезультатЗакрытия;
	
	Если ТипЗнч(ПараметрыВыбранногоПоля) = Тип("Структура") Тогда
		
		Если Элемент.ТекущаяСтрока = Неопределено Тогда
			ТекущаяСтрока = Неопределено;
		Иначе
			ТекущаяСтрока = Форма.Отчет.КомпоновщикНастроек.Настройки.Отбор.ПолучитьОбъектПоИдентификатору(Элемент.ТекущаяСтрока);
		КонецЕсли;

		Если ТипЗнч(ТекущаяСтрока) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			ЭлементОтбора = ТекущаяСтрока.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ИначеЕсли ТипЗнч(ТекущаяСтрока) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			Если ТекущаяСтрока.Родитель <> Неопределено Тогда
				ЭлементОтбора = ТекущаяСтрока.Родитель.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			Иначе
				ЭлементОтбора = Форма.Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			КонецЕсли;
		Иначе
			ЭлементОтбора = Форма.Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		КонецЕсли;
		
		ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ПараметрыВыбранногоПоля.Поле);
		Если ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Организация") Тогда
			Если Форма.Отчет.Свойство("Организация") Тогда
				ЭлементОтбора.ПравоеЗначение = Форма.Отчет.Организация;
			ИначеЕсли Форма.Отчет.Свойство("ПредставлениеСпискаОрганизаций") И ЗначениеЗаполнено(Форма.СписокСтруктурныхЕдиниц) Тогда
				Форма.СписокСтруктурныхЕдиниц.Очистить();
				Форма.Отчет.ПредставлениеСпискаОрганизаций = "";
				Если Форма.Отчет.Свойство("ПредставлениеСпискаПодразделений")  Тогда
					Форма.СписокПодразделений.Очистить();
					Форма.СписокВладельцевГоловныхПодразделений.Очистить();
					Форма.Отчет.ПредставлениеСпискаПодразделений = "";
				КонецЕсли;
			ИначеЕсли Форма.Отчет.Свойство("ПредставлениеСпискаСтруктурныхЕдиниц") И ЗначениеЗаполнено(Форма.СписокСтруктурныхЕдиниц) Тогда
				Форма.СписокСтруктурныхЕдиниц.Очистить();
				Форма.Отчет.ПредставлениеСпискаСтруктурныхЕдиниц = "";
			КонецЕсли;
		ИначеЕсли ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Подразделение") Тогда 
			Если Форма.Отчет.Свойство("Подразделение") Тогда
				ЭлементОтбора.ПравоеЗначение = Форма.Отчет.Подразделение;
			ИначеЕсли Форма.Отчет.Свойство("ПредставлениеСпискаПодразделений")  Тогда
				Форма.СписокПодразделений.Очистить();
				Форма.СписокВладельцевГоловныхПодразделений.Очистить();
				Форма.Отчет.ПредставлениеСпискаПодразделений = "";
			КонецЕсли;
		КонецЕсли;
		ЭлементОтбора.ВидСравнения = ПараметрыВыбранногоПоля.ВидСравнения;
		
		Элемент.ТекущаяСтрока = Форма.Отчет.КомпоновщикНастроек.Настройки.Отбор.ПолучитьИдентификаторПоОбъекту(ЭлементОтбора);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтборыПередНачаломИзменения(Форма, Элемент, Отказ) Экспорт
	
	Если (Найти(Элемент.ТекущийЭлемент.Имя, "ОтборыЛевоеЗначение") > 0 И ТипЗнч(Элемент.ТекущиеДанные.ЛевоеЗначение) = Тип("ПолеКомпоновкиДанных")) Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("СхемаКомпоновкиДанных", Форма.СхемаКомпоновкиДанных);
		ПараметрыФормы.Вставить("Режим"                , "Отбор");
		ПараметрыФормы.Вставить("ИсключенныеПоля"      , Форма.ПолучитьЗапрещенныеПоля("Отбор"));
		ПараметрыФормы.Вставить("ТекущаяСтрока"        , Элемент.ТекущиеДанные.ЛевоеЗначение);
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Форма", Форма);
		ДополнительныеПараметры.Вставить("Элемент", Элемент);
		
		ОповещениеОЗакрытии = Новый ОписаниеОповещения("ОтборыПередНачаломИзмененияЗавершение", Форма, ДополнительныеПараметры);
		
		ОткрытьФорму("ОбщаяФорма.ФормаВыбораДоступногоПоля", ПараметрыФормы, Форма, Истина, , , ОповещениеОЗакрытии);
			
		Отказ = Истина;
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура ОтборыПередНачаломИзмененияЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Форма =   ДополнительныеПараметры.Форма;
	Элемент = ДополнительныеПараметры.Элемент;
	
	ПараметрыВыбранногоПоля = РезультатЗакрытия;
	
	Если ТипЗнч(ПараметрыВыбранногоПоля) = Тип("Структура") Тогда
		
		ТекущаяСтрока = Форма.Отчет.КомпоновщикНастроек.Настройки.Отбор.ПолучитьОбъектПоИдентификатору(Элемент.ТекущаяСтрока);
		
		Если Найти(Элемент.ТекущийЭлемент.Имя, "ОтборыЛевоеЗначение") > 0 Тогда
			
			ТекущаяСтрока.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПараметрыВыбранногоПоля.Поле);
			
			Если ТекущаяСтрока.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Организация") Тогда
				Если Форма.Отчет.Свойство("ПредставлениеСпискаОрганизаций") И ЗначениеЗаполнено(Форма.СписокСтруктурныхЕдиниц) Тогда
					Форма.СписокСтруктурныхЕдиниц.Очистить();
					Форма.Отчет.ПредставлениеСпискаОрганизаций = "";
					Если Форма.Отчет.Свойство("ПредставлениеСпискаПодразделений")  Тогда
						Форма.СписокПодразделений.Очистить();
						Форма.СписокВладельцевГоловныхПодразделений.Очистить();
						Форма.Отчет.ПредставлениеСпискаПодразделений = "";
					КонецЕсли;
				ИначеЕсли Форма.Отчет.Свойство("ПредставлениеСпискаСтруктурныхЕдиниц") И ЗначениеЗаполнено(Форма.СписокСтруктурныхЕдиниц) Тогда
					Форма.СписокСтруктурныхЕдиниц.Очистить();
					Форма.Отчет.ПредставлениеСпискаСтруктурныхЕдиниц = "";
				КонецЕсли;
			ИначеЕсли ТекущаяСтрока.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Подразделение") Тогда 
				Если Форма.Отчет.Свойство("ПредставлениеСпискаПодразделений")  Тогда
					Форма.СписокПодразделений.Очистить();
					Форма.СписокВладельцевГоловныхПодразделений.Очистить();
					Форма.Отчет.ПредставлениеСпискаПодразделений = "";
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтборОбработатьВыборЗначения(Форма, Элемент, СтандартнаяОбработка, Значение, СписокПараметров, ТипПоля, Поле) Экспорт
	
	ОписанияТиповВидовСубконто = Форма.ОписанияТиповВидовСубконто;
	
	Если ТипЗнч(ТипПоля) <> Тип("ОписаниеТипов") Тогда
		
		Возврат;
		
	ИначеЕсли ТипПоля.Типы().Количество() > 0 Тогда
		
		ТипЭлемента = ТипЗнч(Значение);
		Если ?(ТипЭлемента = Тип("Неопределено"), Истина, НЕ ТипПоля.СодержитТип(ТипЭлемента)) Тогда
			ТипЭлемента = ТипПоля.Типы()[0];
		КонецЕсли; 
	Иначе
		Возврат;
	КонецЕсли;
	
	Если ТипЭлемента = ПроцедурыБухгалтерскогоУчетаКлиентСерверПереопределяемый.ТипЗначенияБанковскогоСчетаОрганизации()
		ИЛИ ТипЭлемента = Тип("СправочникСсылка.Кассы") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Если ТипПоля.Типы().Количество() > 1 Тогда
			
			СписокТиповЭлемента = Новый СписокЗначений;
			Для Каждого ТекущийТип Из ТипПоля.Типы() Цикл
				СписокТиповЭлемента.Добавить(ТекущийТип);
			КонецЦикла;
			
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("Элемент", Элемент);
			ДополнительныеПараметры.Вставить("Организация", СписокПараметров.Организация);
			Оповещение = Новый ОписаниеОповещения("ТипЭлементаЗавершениеВыбора", ЭтотОбъект, ДополнительныеПараметры);
			
			СписокТиповЭлемента.ПоказатьВыборЭлемента(Оповещение, НСтр("ru = 'Выбор типа данных'"));
			
		Иначе
			
			ЗначенияОтборов = Новый Структура;
			Если ЗначениеЗаполнено(СписокПараметров.Организация) Тогда
				ЗначенияОтборов.Вставить("Владелец", СписокПараметров.Организация);
			КонецЕсли;
			
			ПараметрыФормы = Новый Структура("Отбор", ЗначенияОтборов);
			ПараметрыФормы.Вставить("ВыборВОтчет", Истина);
			ПараметрыФормы.Вставить("РежимВыбора", Истина);
			
			Если ТипЭлемента = Тип("СправочникСсылка.Кассы") Тогда
				ОткрытьФорму("Справочник.Кассы.ФормаВыбора", ПараметрыФормы, Элемент);
			Иначе
				ПроцедурыБухгалтерскогоУчетаКлиентПереопределяемый.ОткрытьФормуВыбораБанковскогоСчетОрганизации(ПараметрыФормы, Элемент);
			КонецЕсли;

		КонецЕсли;
				
	ИначеЕсли ТипЭлемента = ПроцедурыБухгалтерскогоУчетаКлиентСерверПереопределяемый.ТипПодразделения() Тогда
		
		Если Форма.Отчет.Свойство("ПредставлениеСпискаОрганизаций") ИЛИ Форма.Отчет.Свойство("ПредставлениеСпискаСтруктурныхЕдиниц") Тогда
			
			СтандартнаяОбработка = Ложь;
			
			ЗначенияОтборов = Новый Структура;
			ИмяРеквизитаОрганизации = ПроцедурыБухгалтерскогоУчетаКлиентСерверПереопределяемый.ИмяРеквизитаОрганизацияПодразделения();
			Если ЗначениеЗаполнено(ИмяРеквизитаОрганизации) Тогда
				Если СписокПараметров.Свойство("Организация") И ЗначениеЗаполнено(СписокПараметров.Организация) Тогда
					ЗначенияОтборов.Вставить(ИмяРеквизитаОрганизации, СписокПараметров.Организация);
				КонецЕсли;
			КонецЕсли;
			
			Если СписокПараметров.Свойство("ПоддержкаРаботыСоСтруктурнымиПодразделениями") И СписокПараметров.ПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
				ИмяПоля = Строка(Поле);
				Если ИмяПоля = "Подразделение" ИЛИ ИмяПоля = "ПодразделениеДт" ИЛИ ИмяПоля = "ПодразделениеКт"
					ИЛИ ИмяПоля = "КорПодразделение" ИЛИ ИмяПоля = "ПодразделениеКор" ИЛИ ИмяПоля = "ПодразделениеНУ"
					ИЛИ ИмяПоля = "СтруктурноеПодразделение" ИЛИ ИмяПоля = "СтруктурнаяЕдиница"
					ИЛИ ИмяПоля = "СтруктурноеПодразделениеКор" ИЛИ ИмяПоля = "КорСтруктурноеПодразделение" Тогда
					ЗначенияОтборов.Вставить("ЯвляетсяСтруктурнымПодразделением", Истина);
				КонецЕсли;
			КонецЕсли;
			
			ПараметрыФормы = Новый Структура("Отбор", ЗначенияОтборов);
			ПроцедурыБухгалтерскогоУчетаКлиентПереопределяемый.ОткрытьФормуВыбораПодразделения(ПараметрыФормы, Элемент);
				
		КонецЕсли;
		
	ИначеЕсли ТипЭлемента = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
		
		СтандартнаяОбработка = Ложь;
				
		ЗначенияОтборов = Новый Структура;
		ИмяРеквизитаКонтрагента = ПроцедурыБухгалтерскогоУчетаКлиентСерверПереопределяемый.ПолучитьИмяРеквизитаКонтрагентДоговора();
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Элемент", Элемент);
		ОбработчикОповещения = Новый ОписаниеОповещения("КонтрагентЗавершениеВыбора", ЭтотОбъект, ДополнительныеПараметры);
		
		ОткрытьФорму("Справочник.Контрагенты.ФормаВыбора",, Элемент,,,, ОбработчикОповещения);
		
	ИначеЕсли ТипПоля = ОписанияТиповВидовСубконто["Партия"] 
		ИЛИ ТипЭлемента = Тип("ДокументСсылка.Партия") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ПараметрыОбъекта  = Новый Структура;
		Если СписокПараметров.Свойство("Номенклатура") И ЗначениеЗаполнено(СписокПараметров.Номенклатура) Тогда
			ПараметрыОбъекта.Вставить("Номенклатура", СписокПараметров.Номенклатура);
		КонецЕсли;
		Если СписокПараметров.Свойство("Склад") И ЗначениеЗаполнено(СписокПараметров.Склад) Тогда
			ПараметрыОбъекта.Вставить("Склад", СписокПараметров.Склад);
		КонецЕсли;
		Если СписокПараметров.Свойство("Дата") И ЗначениеЗаполнено(СписокПараметров.Дата) Тогда
			ПараметрыОбъекта.Вставить("КонецПериода", СписокПараметров.Дата);
		КонецЕсли;
		Если СписокПараметров.Свойство("СчетУчета") И ЗначениеЗаполнено(СписокПараметров.СчетУчета) Тогда
			ПараметрыОбъекта.Вставить("СчетУчета", СписокПараметров.СчетУчета);
		КонецЕсли;
		ПараметрыОбъекта.Вставить("ТипыДокументов", ТипПоля);
		
		ПараметрыФормы = Новый Структура("ПараметрыОбъекта", ПараметрыОбъекта);
		ОткрытьФорму("Документ.Партия.ФормаВыбора", ПараметрыФормы, Элемент);
		
	ИначеЕсли ТипПоля = ОписанияТиповВидовСубконто.ДокументРасчетовСКонтрагентами 
		ИЛИ ТипЭлемента = Тип("ДокументСсылка.ДокументРасчетовСКонтрагентом") Тогда
		СтандартнаяОбработка = Ложь;
		
		ПараметрыОбъекта  = Новый Структура;
		Если СписокПараметров.Свойство("Контрагент") И ЗначениеЗаполнено(СписокПараметров.Контрагент) Тогда
			ПараметрыОбъекта.Вставить("Контрагент", СписокПараметров.Контрагент);
		КонецЕсли;
		Если СписокПараметров.Свойство("ДоговорКонтрагента") И ЗначениеЗаполнено(СписокПараметров.ДоговорКонтрагента) Тогда
			ПараметрыОбъекта.Вставить("ДоговорКонтрагента", СписокПараметров.ДоговорКонтрагента);
		КонецЕсли;
		Если СписокПараметров.Свойство("Дата") И ЗначениеЗаполнено(СписокПараметров.Дата) Тогда
			ПараметрыОбъекта.Вставить("Дата", СписокПараметров.Дата);
		КонецЕсли;
		Если СписокПараметров.Свойство("СчетУчета") И ЗначениеЗаполнено(СписокПараметров.СчетУчета) Тогда
			ПараметрыОбъекта.Вставить("СчетУчета", СписокПараметров.СчетУчета);
		КонецЕсли;
		ПараметрыОбъекта.Вставить("ТипыДокументов", ТипПоля);
		
		ПараметрыФормы = Новый Структура("ПараметрыОбъекта", ПараметрыОбъекта);
		
		ОткрытьФорму("Документ.ДокументРасчетовСКонтрагентом.ФормаВыбора", ПараметрыФормы, Элемент);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура КонтрагентЗавершениеВыбора(ВыбранноеЗначение, Параметры) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВыборГруппИЭлементов", ИспользованиеГруппИЭлементов.ГруппыИЭлементы);
		
	Если ВыбранноеЗначение = Неопределено Тогда
		ОткрытьФорму("Справочник.ДоговорыКонтрагентов.ФормаВыбора", ПараметрыФормы, Параметры.Элемент);
	Иначе
		ЗначенияОтборов = Новый Структура;
		ИмяРеквизитаКонтрагента = ПроцедурыБухгалтерскогоУчетаКлиентСерверПереопределяемый.ПолучитьИмяРеквизитаКонтрагентДоговора();
		ЗначенияОтборов.Вставить(ИмяРеквизитаКонтрагента, ВыбранноеЗначение);
		ПараметрыФормы.Вставить("Отбор", ЗначенияОтборов);
		
		ОткрытьФорму("Справочник.ДоговорыКонтрагентов.ФормаВыбора", ПараметрыФормы, Параметры.Элемент);
	КонецЕсли;
	
КонецПроцедуры

Процедура ТипЭлементаЗавершениеВыбора(ВыбранноеЗначение, Параметры) Экспорт
	
	Если ВыбранноеЗначение = Неопределено Тогда
		
		Возврат;
		
	ИначеЕсли ВыбранноеЗначение.Значение = Тип("СправочникСсылка.БанковскиеСчета") Тогда
		
			ЗначенияОтборов = Новый Структура;
			Если ЗначениеЗаполнено(Параметры.Организация) Тогда
				ЗначенияОтборов.Вставить("Владелец", Параметры.Организация);
			КонецЕсли;
			
			ПараметрыФормы = Новый Структура("Отбор", ЗначенияОтборов);
			ПараметрыФормы.Вставить("ВыборВОтчет", Истина);
			ПараметрыФормы.Вставить("РежимВыбора", Истина);
			
			ПроцедурыБухгалтерскогоУчетаКлиентПереопределяемый.ОткрытьФормуВыбораБанковскогоСчетОрганизации(ПараметрыФормы, Параметры.Элемент);
			
	ИначеЕсли ВыбранноеЗначение.Значение = Тип("СправочникСсылка.Кассы") Тогда
		
			ЗначенияОтборов = Новый Структура;
			Если ЗначениеЗаполнено(Параметры.Организация) Тогда
				ЗначенияОтборов.Вставить("Владелец", Параметры.Организация);
			КонецЕсли;
			
			ПараметрыФормы = Новый Структура("Отбор", ЗначенияОтборов);
			ПараметрыФормы.Вставить("ВыборВОтчет", Истина);
			ПараметрыФормы.Вставить("РежимВыбора", Истина);
			
			ОткрытьФорму("Справочник.Кассы.ФормаВыбора", ПараметрыФормы, Параметры.Элемент);
			
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтборыПравоеЗначениеНачалоВыбора(Форма, Элемент, ДанныеВыбора, СтандартнаяОбработка, СписокПараметров) Экспорт
	
	Элементы = Форма.Элементы;
	Отчет    = Форма.Отчет;
	
	ОписанияТиповВидовСубконто = Форма.ОписанияТиповВидовСубконто;
	
	Если Элементы.Отборы.ТекущиеДанные <> Неопределено Тогда
		Поле     = Элементы.Отборы.ТекущиеДанные.ЛевоеЗначение;
		Значение = Элементы.Отборы.ТекущиеДанные.ПравоеЗначение;
		
		ВидСравненияСтрока = Элементы.Отборы.ТекущиеДанные.ВидСравнения;
		
		ТипПоля = БухгалтерскиеОтчетыКлиентСервер.ПолучитьСвойствоПоля(Отчет.КомпоновщикНастроек.Настройки.Отбор.ДоступныеПоляОтбора, Поле, "Тип");
		
		// Принятая в конфигурации обработка работает только для равенства или вхождения в группу.
		Если    Строка(ВидСравненияСтрока) = Строка(ВидСравненияКомпоновкиДанных.Равно)
			Или Строка(ВидСравненияСтрока) = Строка(ВидСравненияКомпоновкиДанных.НеРавно)
			Или Строка(ВидСравненияСтрока) = Строка(ВидСравненияКомпоновкиДанных.ВИерархии)
			Или Строка(ВидСравненияСтрока) = Строка(ВидСравненияКомпоновкиДанных.НеВИерархии) Тогда
		
			Для Каждого СтрокаОтбора Из Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
				Если ТипЗнч(СтрокаОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
					Если ТипЗнч(СтрокаОтбора.ПравоеЗначение) <> Тип("ПолеКомпоновкиДанных") Тогда
						Если ТипЗнч(СтрокаОтбора.ПравоеЗначение) = Тип("СписокЗначений") И СтрокаОтбора.ПравоеЗначение.Количество() > 0 Тогда
							ЗначениеОтбора = СтрокаОтбора.ПравоеЗначение[0].Значение;
						Иначе
							ЗначениеОтбора = СтрокаОтбора.ПравоеЗначение;
						КонецЕсли;	

						ТипЗначенияПоля = БухгалтерскиеОтчетыКлиентСервер.ПолучитьСвойствоПоля(Отчет.КомпоновщикНастроек.Настройки.Отбор.ДоступныеПоляОтбора, СтрокаОтбора.ЛевоеЗначение, "Тип");
						
						Если ТипЗначенияПоля = ОписанияТиповВидовСубконто.Номенклатура Тогда
							СписокПараметров.Вставить("Номенклатура", ЗначениеОтбора);
						ИначеЕсли ТипЗначенияПоля = ОписанияТиповВидовСубконто.Склад Тогда
							СписокПараметров.Вставить("Склад", ЗначениеОтбора);
						ИначеЕсли ТипЗначенияПоля = ОписанияТиповВидовСубконто.Контрагент Тогда
							СписокПараметров.Вставить("Контрагент", ЗначениеОтбора);
						ИначеЕсли ТипЗначенияПоля = ОписанияТиповВидовСубконто.ДоговорКонтрагента Тогда
							СписокПараметров.Вставить("ДоговорКонтрагента", ЗначениеОтбора);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			ОтборОбработатьВыборЗначения(Форма, Элемент, СтандартнаяОбработка, Значение, СписокПараметров, ТипПоля, Поле);
		
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнительныеПоляПередНачаломДобавления(Форма, Элемент, Отказ, Копирование, Родитель, Группа) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СхемаКомпоновкиДанных", Форма.СхемаКомпоновкиДанных);
	ПараметрыФормы.Вставить("Режим"                , "Выбор");
	ПараметрыФормы.Вставить("ИсключенныеПоля"      , Форма.ПолучитьЗапрещенныеПоля("Выбор"));
	ПараметрыФормы.Вставить("ТекущаяСтрока"        , Неопределено);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", Форма);
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ДополнительныеПоляПередНачаломДобавленияЗавершение", Форма, ДополнительныеПараметры);
	
	ОткрытьФорму("ОбщаяФорма.ФормаВыбораДоступногоПоля", ПараметрыФормы, Форма, Истина, , , ОповещениеОЗакрытии);
	
	Отказ = Истина;
	
КонецПроцедуры

Процедура ДополнительныеПоляПередНачаломДобавленияЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Форма = ДополнительныеПараметры.Форма;
	
	ПараметрыВыбранногоПоля = РезультатЗакрытия;
	
	Если ТипЗнч(ПараметрыВыбранногоПоля) = Тип("Структура") Тогда
		НоваяСтрока = Форма.Отчет.ДополнительныеПоля.Добавить();
		НоваяСтрока.Использование = Истина;
		НоваяСтрока.Поле          = ПараметрыВыбранногоПоля.Поле;
		НоваяСтрока.Представление = ПараметрыВыбранногоПоля.Заголовок;
		
		Если Не ЗначениеЗаполнено(Форма.ИдентификаторЗадания) Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Форма.Элементы.Результат, "НеАктуальность");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнительныеПоляПередНачаломИзменения(Форма, Элемент, Отказ) Экспорт
	
	Если Элемент.ТекущийЭлемент = Форма.Элементы.ДополнительныеПоляПредставление Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("СхемаКомпоновкиДанных", Форма.СхемаКомпоновкиДанных);
		ПараметрыФормы.Вставить("Режим"                , "Выбор");
		ПараметрыФормы.Вставить("ИсключенныеПоля"      , Форма.ПолучитьЗапрещенныеПоля("Выбор"));
		ПараметрыФормы.Вставить("ТекущаяСтрока"        , Элемент.ТекущиеДанные.Поле);
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Форма"  , Форма);
		ДополнительныеПараметры.Вставить("Элемент", Элемент);
	
		ОповещениеОЗакрытии = Новый ОписаниеОповещения("ДополнительныеПоляПередНачаломИзмененияЗавершение", Форма, ДополнительныеПараметры);
		
		ОткрытьФорму("ОбщаяФорма.ФормаВыбораДоступногоПоля", ПараметрыФормы, Форма, Истина, , , ОповещениеОЗакрытии);
		
		Отказ = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнительныеПоляПередНачаломИзмененияЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Форма =   ДополнительныеПараметры.Форма;
	Элемент = ДополнительныеПараметры.Элемент;
	
	ПараметрыВыбранногоПоля = РезультатЗакрытия;
	
	Если ТипЗнч(ПараметрыВыбранногоПоля) = Тип("Структура") Тогда
		НоваяСтрока = Элемент.ТекущиеДанные;
		НоваяСтрока.Использование = Истина;
		НоваяСтрока.Поле          = ПараметрыВыбранногоПоля.Поле;
		НоваяСтрока.Представление = ПараметрыВыбранногоПоля.Заголовок;
		
		Если Не ЗначениеЗаполнено(Форма.ИдентификаторЗадания) Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Форма.Элементы.Результат, "НеАктуальность");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура СортировкаПередНачаломДобавления(Форма, Элемент, Отказ, Копирование, Родитель, Группа) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СхемаКомпоновкиДанных", Форма.СхемаКомпоновкиДанных);
	ПараметрыФормы.Вставить("Режим"                , "Порядок");
	ПараметрыФормы.Вставить("ИсключенныеПоля"      , Форма.ПолучитьЗапрещенныеПоля("Порядок"));
	ПараметрыФормы.Вставить("ТекущаяСтрока"        , Неопределено);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", Форма);
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("СортировкаПередНачаломДобавленияЗавершение", Форма, ДополнительныеПараметры);
	  	
	ОткрытьФорму("ОбщаяФорма.ФормаВыбораДоступногоПоля", ПараметрыФормы, Форма, Истина, , , ОповещениеОЗакрытии);
		
	Отказ = Истина;
	
КонецПроцедуры

Процедура СортировкаПередНачаломДобавленияЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Форма = ДополнительныеПараметры.Форма;
	
	ПараметрыВыбранногоПоля = РезультатЗакрытия;
	
	Если ТипЗнч(ПараметрыВыбранногоПоля) = Тип("Структура") Тогда
		НоваяСтрока = Форма.Отчет.КомпоновщикНастроек.Настройки.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
		НоваяСтрока.Использование     = Истина;
		НоваяСтрока.Поле              = Новый ПолеКомпоновкиДанных(ПараметрыВыбранногоПоля.Поле);
		НоваяСтрока.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр;
	КонецЕсли;
	
КонецПроцедуры

Процедура СортировкаПередНачаломИзменения(Форма, Элемент, Отказ) Экспорт
	
	Если Найти(Элемент.ТекущийЭлемент.Имя, "СортировкаПоле") = 1 Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("СхемаКомпоновкиДанных", Форма.СхемаКомпоновкиДанных);
		ПараметрыФормы.Вставить("Режим"                , "Порядок");
		ПараметрыФормы.Вставить("ИсключенныеПоля"      , Форма.ПолучитьЗапрещенныеПоля("Порядок"));
		ПараметрыФормы.Вставить("ТекущаяСтрока"        , Элемент.ТекущиеДанные.Поле);
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Форма"  , Форма);
		ДополнительныеПараметры.Вставить("Элемент", Элемент);
	
		ОповещениеОЗакрытии = Новый ОписаниеОповещения("СортировкаПередНачаломИзмененияЗавершение", Форма, ДополнительныеПараметры);
		
		ОткрытьФорму("ОбщаяФорма.ФормаВыбораДоступногоПоля", ПараметрыФормы, Форма, Истина, , , ОповещениеОЗакрытии);
		
		Отказ = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СортировкаПередНачаломИзмененияЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Форма =   ДополнительныеПараметры.Форма;
	Элемент = ДополнительныеПараметры.Элемент;
	
	ПараметрыВыбранногоПоля = РезультатЗакрытия;
	
	Если ТипЗнч(ПараметрыВыбранногоПоля) = Тип("Структура") Тогда
		РедактируемаяСтрока = Форма.Отчет.КомпоновщикНастроек.Настройки.Порядок.ПолучитьОбъектПоИдентификатору(Элемент.ТекущаяСтрока);
		
		РедактируемаяСтрока.Использование = Истина;
		РедактируемаяСтрока.Поле          = Новый ПолеКомпоновкиДанных(ПараметрыВыбранногоПоля.Поле);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьПоляРесурсовВЗапрещенныеПоля(Форма, СписокПолей) Экспорт
	
	Попытка
		НаборПоказателей = Форма.НаборПоказателей;
	Исключение
		НаборПоказателей = Неопределено;
	КонецПопытки;
	
	Если НаборПоказателей = Неопределено Тогда
		Для Каждого ДоступноеПоле Из Форма.Отчет.КомпоновщикНастроек.Настройки.ДоступныеПоляГруппировок.Элементы Цикл
			Если ДоступноеПоле.Ресурс Тогда
				СписокПолей.Добавить(Строка(ДоступноеПоле.Поле));
			КонецЕсли;
		КонецЦикла;
	Иначе
		Для Каждого ИмяПоказателя Из Форма.НаборПоказателей Цикл
			Если Форма.Отчет["Показатель" + ИмяПоказателя] Тогда 
				ВидОстатка = "";
				Если Форма.Отчет.Свойство("РазвернутоеСальдо") Тогда
					Если ТипЗнч(Форма.Отчет.РазвернутоеСальдо) = Тип("Булево") Тогда
						Если Форма.Отчет.РазвернутоеСальдо Тогда
							ВидОстатка = "";
						Иначе
							ВидОстатка = "Развернутый";
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				СписокПолей.Добавить("СальдоНаНачалоПериода." + ИмяПоказателя + "Начальный" + ВидОстатка + "ОстатокДт");
				СписокПолей.Добавить("СальдоНаНачалоПериода." + ИмяПоказателя + "Начальный" + ВидОстатка + "ОстатокКт");
				СписокПолей.Добавить("СальдоНаКонецПериода." + ИмяПоказателя + "Конечный" + ВидОстатка + "ОстатокДт");
				СписокПолей.Добавить("СальдоНаКонецПериода." + ИмяПоказателя + "Конечный" + ВидОстатка + "ОстатокКт");
			Иначе
				СписокПолей.Добавить("СальдоНаНачалоПериода." + ИмяПоказателя + "НачальныйОстатокДт");
				СписокПолей.Добавить("СальдоНаНачалоПериода." + ИмяПоказателя + "НачальныйОстатокКт");
				СписокПолей.Добавить("ОборотыЗаПериод." + ИмяПоказателя + "ОборотДт");
				СписокПолей.Добавить("ОборотыЗаПериод." + ИмяПоказателя + "ОборотКт");
				СписокПолей.Добавить("СальдоНаКонецПериода." + ИмяПоказателя + "КонечныйОстатокДт");
				СписокПолей.Добавить("СальдоНаКонецПериода." + ИмяПоказателя + "КонечныйОстатокКт");
				СписокПолей.Добавить("СальдоНаНачалоПериода." + ИмяПоказателя + "НачальныйРазвернутыйОстатокДт");
				СписокПолей.Добавить("СальдоНаНачалоПериода." + ИмяПоказателя + "НачальныйРазвернутыйОстатокКт");
				СписокПолей.Добавить("СальдоНаКонецПериода." + ИмяПоказателя + "КонечныйРазвернутыйОстатокДт");
				СписокПолей.Добавить("СальдоНаКонецПериода." + ИмяПоказателя + "КонечныйРазвернутыйОстатокКт");
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;	
		
КонецПроцедуры

Процедура ОрганизацияПриИзменении(Форма, Элемент) Экспорт 
	
	Организации = Форма.СписокСтруктурныхЕдиниц;
	
	КомпоновщикНастроек = Форма.Отчет.КомпоновщикНастроек;
	
	Для Каждого ЭлементОтбора Из КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") И ЭлементОтбора.Использование Тогда
			Если ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Организация") Тогда
				
				КомпоновщикНастроек.Настройки.Отбор.Элементы.Удалить(ЭлементОтбора);			
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПодразделениеПриИзменении(Форма, Элемент) Экспорт
	
	КомпоновщикНастроек = Форма.Отчет.КомпоновщикНастроек;
	
	Для Каждого ЭлементОтбора Из КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") И ЭлементОтбора.Использование Тогда
			Если ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Подразделение") Тогда
				
				КомпоновщикНастроек.Настройки.Отбор.Элементы.Удалить(ЭлементОтбора);
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПредставлениеСпискаОрганизацийНачалоВыбора(Форма, СтандартнаяОбработка, ДополнительныеПараметры) Экспорт

	СтандартнаяОбработка = Ложь;
	
	РежимРаботы = "ПодборВОтчет";
	
	Если ДополнительныеПараметры.Свойство("СписокСтруктурныхЕдиниц")
		И ТипЗнч(ДополнительныеПараметры.СписокСтруктурныхЕдиниц) = Тип("СписокЗначений") Тогда
		СписокСтруктурныхЕдиниц = ДополнительныеПараметры.СписокСтруктурныхЕдиниц;
	Иначе
		СписокСтруктурныхЕдиниц = Новый СписокЗначений;
	КонецЕсли;
	
	Если ДополнительныеПараметры.Свойство("СписокПодразделений")
		И ТипЗнч(ДополнительныеПараметры.СписокПодразделений) = Тип("СписокЗначений") Тогда
		СписокПодразделений = ДополнительныеПараметры.СписокПодразделений;
	Иначе
		СписокПодразделений = Новый СписокЗначений;
	КонецЕсли;
	
	Если ДополнительныеПараметры.Свойство("СписокВладельцевГоловныхПодразделений")
		И ТипЗнч(ДополнительныеПараметры.СписокВладельцевГоловныхПодразделений) = Тип("СписокЗначений") Тогда
		СписокВладельцевГоловныхПодразделений = ДополнительныеПараметры.СписокВладельцевГоловныхПодразделений;
	Иначе
		СписокВладельцевГоловныхПодразделений = Новый СписокЗначений;
	КонецЕсли;
	
	ВыборСтруктурныхПодразделений = ДополнительныеПараметры.Свойство("ВыборСтруктурныхПодразделений")
	                                И ТипЗнч(ДополнительныеПараметры.ВыборСтруктурныхПодразделений) = Тип("Булево")
	                                И ДополнительныеПараметры.ВыборСтруктурныхПодразделений;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВыбораСтруктурногоПодразделения", Форма, Новый Структура);
	ОткрытьФорму("ОбщаяФорма.ФормаВыбораСтруктурногоПодразделения",
				 Новый Структура("Организация, СтруктурноеПодразделение, ДоступноИзменениеОрганизации, РежимРаботы, СписокСтруктурныхЕдиниц,
				                 |СписокПодразделений, СписокВладельцевГоловныхПодразделений, ВыборСтруктурныхПодразделений",
								 ,, Истина, РежимРаботы, СписокСтруктурныхЕдиниц, СписокПодразделений, СписокВладельцевГоловныхПодразделений, ВыборСтруктурныхПодразделений),
	             Форма, Истина,,, ОписаниеОповещения);

КонецПроцедуры

Процедура ПослеВыбораСтруктурногоПодразделения(Форма, РезультатВыбора) Экспорт
	
	Если РезультатВыбора <> Неопределено Тогда
		
		Отчет = Форма.Отчет;	
		
		Форма.СписокСтруктурныхЕдиниц = РезультатВыбора.СписокСтруктурныхЕдиниц;
		Отчет.ПредставлениеСпискаОрганизаций = БухгалтерскиеОтчетыКлиентСервер.ВыгрузитьСписокВСтроку(Форма.СписокСтруктурныхЕдиниц);
		БухгалтерскиеОтчетыКлиент.ОрганизацияПриИзменении(Форма, Отчет.ПредставлениеСпискаОрганизаций);
		
		Если Отчет.Свойство("ПредставлениеСпискаПодразделений") Тогда
			Форма.СписокПодразделений = РезультатВыбора.СписокПодразделений;
			Форма.СписокВладельцевГоловныхПодразделений = РезультатВыбора.СписокВладельцевГоловныхПодразделений;
			
			Отчет.ПредставлениеСпискаПодразделений = БухгалтерскиеОтчетыКлиентСервер.ВыгрузитьСписокВСтроку(Форма.СписокПодразделений);
			БухгалтерскиеОтчетыКлиент.ПодразделениеПриИзменении(Форма, Отчет.ПредставлениеСпискаПодразделений);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Тип - определяет для кого надо получить настройку: 1 - покупатель, 2 - поставщик
// ПолучательОповещения - объект, в котором будет производиться обработка оповещения ( Тип - ФормаКлиентскогоПриложения, ОбщийМодуль, КомандаКомандногоИнтерфейса)
//
Процедура РедактироватьСписокСчетовИсключаемыхИзРасчетаЗадолженности(Форма, Тип = 1, Краткосрочная = Истина, Долгосрочная = Истина, ПолучательОповещения = Неопределено, СписокСчетовРасчета = Неопределено) Экспорт
	
	ПараметрыФормы = Новый Структура("Тип,Краткосрочная,Долгосрочная,СписокСчетовРасчета", Тип, Краткосрочная, Долгосрочная, СписокСчетовРасчета);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", Форма);
	
	Если ПолучательОповещения = Неопределено Тогда
		ПолучательОповещения = ЭтотОбъект;
	КонецЕсли;
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("РедактироватьСписокСчетовИсключаемыхИзРасчетаЗадолженностиЗавершение", ПолучательОповещения, ДополнительныеПараметры);
	
	ОткрытьФорму("ОбщаяФорма.НастройкаСчетовУчетаРасчетов", ПараметрыФормы,,,,,ОповещениеОЗакрытии);
	
КонецПроцедуры

Процедура РедактироватьСписокСчетовИсключаемыхИзРасчетаЗадолженностиЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Форма = ДополнительныеПараметры.Форма;
	
	ЭлементРезультат = Форма.Элементы.Найти("Результат");
	Если ЭлементРезультат = Неопределено Тогда
		ЭлементРезультат = Форма.Элементы.Найти("ОтчетТабличныйДокумент");
	КонецЕсли;
	
	СписокИзменен = РезультатЗакрытия;
	
	Если ТипЗнч(СписокИзменен) = Тип("Булево") И СписокИзменен И ЭлементРезультат <> Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(ЭлементРезультат, "НеАктуальность");
	КонецЕсли;	
	
КонецПроцедуры

Процедура ТабличноеПолеПоСчетамГруппировкаПередНачаломДобавления(ФормаОтчета, ИмяЭлемента, Элемент, Отказ, Копирование, Родитель, Группа) Экспорт
	
	Отказ = Истина;
	НоваяСтрока = ФормаОтчета.Отчет[ИмяЭлемента].Добавить();
	НоваяСтрока.Использование = Истина;
	
КонецПроцедуры

Процедура ТабличноеПолеПоСчетамСчетПриИзменении(ФормаОтчета, ИмяЭлемента, Элемент) Экспорт
	
	ТекущиеДанные = ФормаОтчета.Элементы[ИмяЭлемента].ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		Если ЗначениеЗаполнено(ТекущиеДанные.Счет) Тогда
			ДанныеСчета = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(ТекущиеДанные.Счет);
			ТекущиеДанные.ПоСубсчетам = ДанныеСчета.КоличествоСубконто = 0;

			СтрокаПоСубконто    = "";
			СтрокаПредставление = "";
			
			Если ДанныеСчета.КоличествоСубконто > 0 Тогда
				Для Индекс = 1 По ДанныеСчета.КоличествоСубконто Цикл
					СтрокаПоСубконто    = СтрокаПоСубконто + "+" + Индекс;
					СтрокаПредставление = СтрокаПредставление + ДанныеСчета["ВидСубконто" + Индекс + "Наименование"] + ", ";
				КонецЦикла;
				СтрокаПредставление = Лев(СтрокаПредставление, СтрДлина(СтрокаПредставление) - 2);
			КонецЕсли;
			ТекущиеДанные.ПоСубконто    = СтрокаПоСубконто;
			ТекущиеДанные.Представление = СтрокаПредставление;

		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ТабличноеПолеПоСчетамПоСубсчетамПриИзменении(ФормаОтчета, ИмяЭлемента, Элемент) Экспорт
	
	ТекущиеДанные = ФормаОтчета.Элементы[ИмяЭлемента].ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		ДанныеСчета = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(ТекущиеДанные.Счет);
		
		Если НЕ ДанныеСчета.ЗапретитьИспользоватьВПроводках Тогда
			ТекущиеДанные.ПоСубсчетам = ДанныеСчета.КоличествоСубконто = 0;
		КонецЕсли;
		
		Если ТекущиеДанные.ПоСубсчетам Тогда
			Если ИмяЭлемента = "РазвернутоеСальдо" Тогда
				ТабличноеПолеПоСчетамПредставлениеОчистка(ФормаОтчета, ИмяЭлемента, Элемент, Ложь);
			КонецЕсли; 
		Иначе
			Если ПустаяСтрока(ТекущиеДанные.Представление) И ПустаяСтрока(ТекущиеДанные.ПоСубконто) Тогда
				ТекущиеДанные.ПоСубсчетам = Истина;
				Возврат;
			КонецЕсли;
			ТекущиеДанные.ПоСубконто    = СтрЗаменить(ТекущиеДанные.ПоСубконто, "-", "+");
			ТекущиеДанные.Представление = "";
			СтрокаПоСубконто    = "";
			СтрокаПредставление = "";
			
			Для Индекс = 1 По ДанныеСчета.КоличествоСубконто Цикл
				СтрокаПоСубконто    = СтрокаПоСубконто + "+" + Индекс;
				СтрокаПредставление = СтрокаПредставление + ДанныеСчета["ВидСубконто" + Индекс + "Наименование"] + ", ";
			КонецЦикла;
			СтрокаПредставление = Лев(СтрокаПредставление, СтрДлина(СтрокаПредставление) - 2);
			ТекущиеДанные.ПоСубконто    = СтрокаПоСубконто;
			ТекущиеДанные.Представление = СтрокаПредставление;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ТабличноеПолеПоСчетамПредставлениеНачалоВыбора(ФормаОтчета, ИмяЭлемента, Элемент, ДанныеВыбора, СтандартнаяОбработка) Экспорт
	
	СтрокаПоСубконто = ФормаОтчета.Элементы[ИмяЭлемента].ТекущиеДанные.ПоСубконто;
	Счет = ФормаОтчета.Элементы[ИмяЭлемента].ТекущиеДанные.Счет;
	ДанныеСчета = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(Счет);
	СписокВидовСубконто = Новый СписокЗначений;
	Если ПустаяСтрока(СтрокаПоСубконто) Тогда		
		Для Индекс = 1 По ДанныеСчета.КоличествоСубконто Цикл
			СписокВидовСубконто.Добавить(ДанныеСчета["ВидСубконто" + Индекс], ДанныеСчета["ВидСубконто" + Индекс + "Наименование"]);
		КонецЦикла;
	Иначе
		КоличествоСубконто = СтрДлина(СтрокаПоСубконто) / 2;
		Для Индекс = 1 По КоличествоСубконто Цикл
			ИндексСубконто = Сред(СтрокаПоСубконто, Индекс*2, 1);
			СписокВидовСубконто.Добавить(ДанныеСчета["ВидСубконто" + Сред(СтрокаПоСубконто, Индекс*2, 1)], ДанныеСчета["ВидСубконто" + Сред(СтрокаПоСубконто, Индекс*2, 1) + "Наименование"], ?(Сред(СтрокаПоСубконто, Индекс * 2 - 1, 1) = "+", Истина, Ложь));
		КонецЦикла;
	КонецЕсли;	
	ОткрытьФорму("ОбщаяФорма.ФормаНастройкаПоСубконто", Новый Структура("СписокВидовСубконто", СписокВидовСубконто), Элемент);
	
КонецПроцедуры

Процедура ТабличноеПолеПоСчетамПредставлениеОчистка(ФормаОтчета, ИмяЭлемента, Элемент, СтандартнаяОбработка) Экспорт
	
	ТекущиеДанные = ФормаОтчета.Элементы[ИмяЭлемента].ТекущиеДанные;
		
	Если ТекущиеДанные <> Неопределено Тогда
		
		ДанныеСчета = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(ТекущиеДанные.Счет);
		
		Если ДанныеСчета.ЗапретитьИспользоватьВПроводках Тогда
			ТекущиеДанные.ПоСубконто    = СтрЗаменить(ТекущиеДанные.ПоСубконто, "+", "-");
			ТекущиеДанные.Представление = "";
			ТекущиеДанные.ПоСубсчетам   = Истина;
		Иначе
			ТекущиеДанные.ПоСубсчетам = ДанныеСчета.КоличествоСубконто = 0;
			СтандартнаяОбработка      = Ложь;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

Процедура ТабличноеПолеПоСчетамПредставлениеОбработкаВыбора(ФормаОтчета, ИмяЭлемента, Элемент, ВыбранноеЗначение, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = ФормаОтчета.Элементы[ИмяЭлемента].ТекущиеДанные;
	ДанныеСчета = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(ТекущиеДанные.Счет);
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СписокЗначений") Тогда 
		СтрокаПоСубконто = "";
		СтрокаПредставление = "";
		Для Каждого ЭлементСписка Из ВыбранноеЗначение Цикл
			Если ЭлементСписка.Пометка Тогда
				СтрокаПоСубконто    = СтрокаПоСубконто + "+";
				СтрокаПредставление = СтрокаПредставление + Строка(ЭлементСписка.Значение) + ", ";
			Иначе
				СтрокаПоСубконто = СтрокаПоСубконто + "-";
			КонецЕсли;
			
			Если ТипЗнч(ЭлементСписка.Значение) = Тип("ПланВидовХарактеристикСсылка.ВидыСубконтоТиповые") Тогда
				Для Индекс = 1 По ДанныеСчета.КоличествоСубконто Цикл 
					Если ДанныеСчета["ВидСубконто" + Индекс] = ЭлементСписка.Значение Тогда
						СтрокаПоСубконто = СтрокаПоСубконто + Индекс;
					КонецЕсли;
				КонецЦикла;
			Иначе
				СтрокаПоСубконто = СтрокаПоСубконто + "0";
			КонецЕсли;
		КонецЦикла;
		СтрокаПредставление = Лев(СтрокаПредставление, СтрДлина(СтрокаПредставление) - 2);
		
		Если ПустаяСтрока(СтрокаПредставление) И Не ДанныеСчета.ЗапретитьИспользоватьВПроводках Тогда
			Возврат;
		КонецЕсли;
		ТекущиеДанные.ПоСубконто    = СтрокаПоСубконто;
		ТекущиеДанные.Представление = СтрокаПредставление;
		
		Если ПустаяСтрока(СтрокаПредставление) Тогда
			ТекущиеДанные.ПоСубсчетам = Истина;
		Иначе
			Если ИмяЭлемента = "РазвернутоеСальдо" Тогда
				ТекущиеДанные.ПоСубсчетам = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Отправка отчетов по электронной почте

Процедура ОтправитьОтчетыПоПочтеНастройкаУчетнойЗаписиПредложена(УчетнаяЗаписьНастроена, ДополнительныеПараметры) Экспорт
	
	Если УчетнаяЗаписьНастроена <> Истина Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ИмяОткрываемойФормы = "ОбщаяФорма.ВыборФорматаВложений";
	
	ОткрытьФорму(ИмяОткрываемойФормы, ПараметрыФормы, ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ОтправитьОтчетыПоПочтеОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора, ФормаОтчета, ИмяТабличногоДокумента = "Результат") Экспорт
	
	Если ВРег(ИсточникВыбора.ИмяФормы) = ВРег("ОбщаяФорма.ВыборФорматаВложений")
		Или ВРег(ИсточникВыбора.ИмяФормы) = ВРег("ОбщаяФорма.ПодготовкаНовогоПисьма") Тогда
		
		Если ВыбранноеЗначение <> Неопределено И ВыбранноеЗначение <> КодВозвратаДиалога.Отмена Тогда
			
			ПараметрыОтчета = Новый Структура(
				"Заголовок, ТабличныйДокумент, УникальныйИдентификатор",
				ФормаОтчета.Заголовок, ПоместитьВоВременноеХранилище(ФормаОтчета[ИмяТабличногоДокумента]), ФормаОтчета.УникальныйИдентификатор);
			
			ПараметрыОтправки = БухгалтерскиеОтчетыВызовСервера.ПараметрыОтправкиПисьма(ВыбранноеЗначение, ПараметрыОтчета);
			РаботаСПочтовымиСообщениямиКлиент.СоздатьНовоеПисьмо(ПараметрыОтправки);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция НеобходимоОбновитьСумму(Результат, КэшВыделеннойОбласти)
	Перем СтруктураАдресВыделеннойОбласти;
	
	ВыделенныеОбласти    = Результат.ВыделенныеОбласти;
	КоличествоВыделенных = ВыделенныеОбласти.Количество();
	
	Если КоличествоВыделенных = 0 Тогда
		КэшВыделеннойОбласти = Новый Структура();
		Возврат Истина;
	КонецЕсли;
	
	ВозвращаемоеЗначение = Ложь;
	Если ТипЗнч(КэшВыделеннойОбласти) <> Тип("Структура") Тогда
		КэшВыделеннойОбласти = Новый Структура();
		ВозвращаемоеЗначение = Истина;
	ИначеЕсли ВыделенныеОбласти.Количество() <> КэшВыделеннойОбласти.Количество() Тогда
		КэшВыделеннойОбласти = Новый Структура();
		ВозвращаемоеЗначение = Истина;
	Иначе
		Для ИндексОбласти = 0 По КоличествоВыделенных - 1 Цикл
			ВыделеннаяОбласть = ВыделенныеОбласти[ИндексОбласти];
			ИмяОбласти = СтрЗаменить(ВыделеннаяОбласть.Имя, ":", "_");
			КэшВыделеннойОбласти.Свойство(ИмяОбласти, СтруктураАдресВыделеннойОбласти);
			
			// не нашли нужную область в кэше, поэтому переинициализируем кэш
			Если ТипЗнч(СтруктураАдресВыделеннойОбласти) <> Тип("Структура") Тогда
				КэшВыделеннойОбласти = Новый Структура();
				ВозвращаемоеЗначение = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Для ИндексОбласти = 0 По КоличествоВыделенных - 1 Цикл
		ВыделеннаяОбласть = ВыделенныеОбласти[ИндексОбласти];
		ИмяОбласти = СтрЗаменить(ВыделеннаяОбласть.Имя, ":", "_");
		
		Если ТипЗнч(ВыделеннаяОбласть) <> Тип("ОбластьЯчеекТабличногоДокумента") Тогда
			СтруктураАдресВыделеннойОбласти = Новый Структура("Верх, Низ, Лево, Право", 0, 0, 0, 0);
			КэшВыделеннойОбласти.Вставить(ИмяОбласти, СтруктураАдресВыделеннойОбласти);
			ВозвращаемоеЗначение = Истина;
			Продолжить;
		КонецЕсли;
		
		КэшВыделеннойОбласти.Свойство(ИмяОбласти, СтруктураАдресВыделеннойОбласти);
		Если ТипЗнч(СтруктураАдресВыделеннойОбласти) <> Тип("Структура") Тогда
			СтруктураАдресВыделеннойОбласти = Новый Структура("Верх, Низ, Лево, Право", 0, 0, 0, 0);
			КэшВыделеннойОбласти.Вставить(ИмяОбласти, СтруктураАдресВыделеннойОбласти);
			ВозвращаемоеЗначение = Истина;
		КонецЕсли;
		
		Если СтруктураАдресВыделеннойОбласти.Верх <> ВыделеннаяОбласть.Верх
			ИЛИ СтруктураАдресВыделеннойОбласти.Низ <> ВыделеннаяОбласть.Низ
			ИЛИ СтруктураАдресВыделеннойОбласти.Лево <> ВыделеннаяОбласть.Лево
			ИЛИ СтруктураАдресВыделеннойОбласти.Право <> ВыделеннаяОбласть.Право Тогда
				СтруктураАдресВыделеннойОбласти = Новый Структура("Верх, Низ, Лево, Право",
					ВыделеннаяОбласть.Верх, ВыделеннаяОбласть.Низ, ВыделеннаяОбласть.Лево, ВыделеннаяОбласть.Право);
				КэшВыделеннойОбласти.Вставить(ИмяОбласти, СтруктураАдресВыделеннойОбласти);
				ВозвращаемоеЗначение = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ПолучитьИмяФормыПоИДРасшифровки(ИДРасшифровки)
	
	ИмяОбъекта = ИДРасшифровки;
	ШаблонИмениФормы = "Отчет.%ИмяОбъекта%.Форма.ФормаОтчета";
	
	Если ИДРасшифровки = "ОборотыСчетаТиповойПоДням" 
		Или ИДРасшифровки = "ОборотыСчетаТиповойПоМесяцам" Тогда
		ИмяОбъекта = "ОборотыСчетаТиповой";
	КонецЕсли;
	
	Если ИДРасшифровки = "ОборотыСчетаНалоговыйПоДням" 
		Или ИДРасшифровки = "ОборотыСчетаНалоговыйПоМесяцам" Тогда
		ИмяОбъекта = "ОборотыСчетаНалоговый";
	КонецЕсли;
	
	Возврат СтрЗаменить(ШаблонИмениФормы, "%ИмяОбъекта%", ИмяОбъекта);
	
КонецФункции



