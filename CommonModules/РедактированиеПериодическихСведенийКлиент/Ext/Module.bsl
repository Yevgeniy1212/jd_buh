
////////////////////////////////////////////////////////////////////////////////
// РедактированиеПериодическихСведенийКлиент
//  
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

Процедура ОткрытьФормуРедактированияИстории(ИмяРегистра, ВедущийОбъект, Форма, ОписаниеОповещенияОЗакрытии = Неопределено) Экспорт
	
	ТолькоПросмотрИстории = Форма.ТолькоПросмотр;
	Если Не ТолькоПросмотрИстории Тогда
		Попытка
			Форма.ЗаблокироватьДанныеФормыДляРедактирования();
			ТолькоПросмотрИстории = Ложь;
		Исключение
			ТолькоПросмотрИстории = Истина;
		КонецПопытки
	КонецЕсли;
	
	ДатаЗапрета = Форма.ДатаЗапретаИзмененияДанных;		
	
	ОткрытьИсторию(ИмяРегистра, ВедущийОбъект, Форма, ТолькоПросмотрИстории, ОписаниеОповещенияОЗакрытии, ДатаЗапрета);
	
КонецПроцедуры

Процедура ОткрытьИсторию(ИмяРегистра, ВедущийОбъект, Форма, ТолькоПросмотр, ОписаниеОповещенияОЗакрытии = Неопределено, ДатаЗапрета = Неопределено) Экспорт
	
	МассивЗаписей = РедактированиеПериодическихСведенийКлиентСервер.МассивЗаписейИстории(Форма, ИмяРегистра, ВедущийОбъект);
	ПараметрыФормы = Новый Структура("МассивЗаписей,ВедущийОбъект,ТолькоПросмотр", МассивЗаписей, ВедущийОбъект, ТолькоПросмотр);
	Если ДатаЗапрета <> Неопределено Тогда
		ПараметрыФормы.Вставить("ДатаЗапретаИзмененияДанных", ДатаЗапрета);	
	КонецЕсли;
	
	Если ОписаниеОповещенияОЗакрытии = Неопределено Тогда
		ОткрытьФорму("РегистрСведений." + ИмяРегистра + ".Форма.РедактированиеИстории" , ПараметрыФормы, Форма);
	Иначе 
		ОткрытьФорму("РегистрСведений." + ИмяРегистра + ".Форма.РедактированиеИстории" , ПараметрыФормы, Форма,,,,ОписаниеОповещенияОЗакрытии);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОповеститьОЗавершении(Форма, ИмяРегистра, ВедущийОбъект) Экспорт
	
	ПараметрОповещения = Новый Структура("ИмяРегистра, НаборЗаписейНовый, ИмяФормыВладельца", ИмяРегистра, Форма.НаборЗаписей, Форма.ВладелецФормы.ИмяФормы);
	Оповестить("ОтредактированаИстория", ПараметрОповещения, ВедущийОбъект);
	Форма.Закрыть();
	
КонецПроцедуры

Процедура ОбработкаОповещения(Форма, ВедущийОбъект, ИмяСобытия, Параметр, Источник) Экспорт
	
	// Проверим возможность модифицирования
	Если Форма.ТолькоПросмотр ИЛИ ИмяСобытия <> "ОтредактированаИстория" Тогда
		Возврат;
	КонецЕсли;
	
	// Наш ли это источник? 
	Если ВедущийОбъект <> Источник Тогда
		Возврат;
	КонецЕсли;
	
	Если Форма.ИмяФормы <> Параметр.ИмяФормыВладельца Тогда
		Возврат;
	КонецЕсли;
	
	КоллекцииИдентичны = КоллекцииНаборовИдентичны(Форма[Параметр.ИмяРегистра + "НаборЗаписей"], Параметр.НаборЗаписейНовый, Форма[Параметр.ИмяРегистра + "КлючСтруктуры"]);
	Если КоллекцииИдентичны Тогда
		// Ничего не изменили
		Возврат;
	КонецЕсли;
	
	НаборЗаписей = Форма[Параметр.ИмяРегистра + "НаборЗаписей"];
	НаборЗаписей.Очистить();
	Для Каждого Строка Из Параметр.НаборЗаписейНовый Цикл
		ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Строка);
	КонецЦикла;
	НаборЗаписей.Сортировать("Период");
	
	Если НаборЗаписей.Количество() > 0 Тогда
		ПоследняяЗапись = НаборЗаписей[НаборЗаписей.Количество()-1];
		ЗаполнитьЗначенияСвойств(Форма[Параметр.ИмяРегистра], ПоследняяЗапись);
	Иначе
		ЗаполнитьЗначенияСвойств(Форма[Параметр.ИмяРегистра], Новый Структура(Форма[Параметр.ИмяРегистра + "КлючСтруктуры"]));
	КонецЕсли;

	Форма.Модифицированность = Истина;

КонецПроцедуры

Процедура УпорядочитьНаборЗаписейВФорме(Форма, ИмяНабора = "НаборЗаписей") Экспорт
	
	ИдентификаторТекущейСтроки = Форма.Элементы[ИмяНабора].ТекущаяСтрока;
	Если ИдентификаторТекущейСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НаборЗаписей = Форма[ИмяНабора];
	ТекущаяСтрока = НаборЗаписей.НайтиПоИдентификатору(ИдентификаторТекущейСтроки);
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ИндексТекущейСтроки = НаборЗаписей.Индекс(ТекущаяСтрока);
	КоличествоЗаписей = НаборЗаписей.Количество();
	СдвигаемаяЗапись = НаборЗаписей[ИндексТекущейСтроки];
	
	Смещение = 0;
	
	Если ИндексТекущейСтроки > 0 Тогда
		Для СдвигИндексаЗаписи = КоличествоЗаписей - ИндексТекущейСтроки По КоличествоЗаписей - 1 Цикл
			Запись = НаборЗаписей[КоличествоЗаписей - 1 - СдвигИндексаЗаписи];
			Если СдвигаемаяЗапись.Период > Запись.Период Тогда
				Прервать;
			КонецЕсли; 
			Смещение = Смещение - 1;
		КонецЦикла;
	КонецЕсли;
	
	Если Смещение = 0 И ИндексТекущейСтроки < КоличествоЗаписей - 1 Тогда
		Для ИндексЗаписи = ИндексТекущейСтроки + 1 По КоличествоЗаписей - 1 Цикл
			Запись = НаборЗаписей[ИндексЗаписи];
			Если СдвигаемаяЗапись.Период < Запись.Период Тогда
				Прервать;
			КонецЕсли; 
			Смещение = Смещение + 1;
		КонецЦикла;
	КонецЕсли;
	
	Если Смещение <> 0 Тогда
		НаборЗаписей.Сдвинуть(ИндексТекущейСтроки, Смещение);
	КонецЕсли; 
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция КоллекцииНаборовИдентичны(Набор1, Набор2, СписокПолей)
	
	Если Набор1.Количество() <> Набор2.Количество() Тогда
		Возврат Ложь;
	КонецЕсли; 
	
	Для Каждого СтрокаНабор1 Из Набор1 Цикл
		
		СтрокиНабор2 = Набор2.НайтиСтроки(Новый Структура("Период", СтрокаНабор1.Период));
		Если СтрокиНабор2.Количество() = 0 Тогда
			Возврат Ложь;
		КонецЕсли; 
		СтрокаНабор2 = СтрокиНабор2[0];
		
		СтруктураСтрокиНабор1 = Новый Структура(СписокПолей);
		ЗаполнитьЗначенияСвойств(СтруктураСтрокиНабор1, СтрокаНабор1);
		
		СтруктураСтрокиНабор2 = Новый Структура(СписокПолей);
		ЗаполнитьЗначенияСвойств(СтруктураСтрокиНабор2, СтрокаНабор2);
		
		Для Каждого ЭлементСтруктуры Из СтруктураСтрокиНабор1 Цикл
			Если ЭлементСтруктуры.Значение <> СтруктураСтрокиНабор2[ЭлементСтруктуры.Ключ] Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции
