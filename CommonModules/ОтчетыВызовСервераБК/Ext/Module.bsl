////////////////////////////////////////////////////////////////////////////////
// Подсистема "Варианты отчетов" (вызов сервера).
//
////////////////////////////////////////////////////////////////////////////////

Процедура ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	Параметры = Форма.Параметры;
	
	Если ЗначениеЗаполнено(Параметры.КлючВарианта) Тогда
		Форма.КлючТекущегоВарианта = Параметры.КлючВарианта;
	КонецЕсли;
	
	//ПриЗагрузкеПользовательскихНастроекНаСервере(Форма);
	
КонецПроцедуры

Процедура ПриЗагрузкеВариантаНаСервере(ФормаОтчета, Настройки = Неопределено) Экспорт

	Отчет = ФормаОтчета.Отчет;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ФормаОтчета, "ОткрытИзРассылки") И ФормаОтчета.ОткрытИзРассылки Тогда
		Если ФормаОтчета.Параметры.Свойство("ПользовательскиеНастройки") Тогда
			Отчет.КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(ФормаОтчета.Параметры.ПользовательскиеНастройки);
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ФормаОтчета, "НастройкиОтчета") И ТипЗнч(ФормаОтчета.НастройкиОтчета) = Тип("Структура") Тогда
				ФормаОтчета.НастройкиОтчета.Вставить("ПользовательскиеНастройки", ФормаОтчета.Параметры.ПользовательскиеНастройки);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	НастройкиКомпоновщика = Отчет.КомпоновщикНастроек.Настройки;
	
	НастройкиКомпоновщика.Выбор.ИдентификаторПользовательскойНастройки = "";
	НастройкиКомпоновщика.Порядок.ИдентификаторПользовательскойНастройки = "";
	
	НастройкиКомпоновщика.Отбор.ИдентификаторПользовательскойНастройки = "";
	Для Каждого ЭлементОтбора Из НастройкиКомпоновщика.Отбор.Элементы Цикл
		ЭлементОтбора.ИдентификаторПользовательскойНастройки = "";
	КонецЦикла;
	
	НастройкиКомпоновщика.УсловноеОформление.ИдентификаторПользовательскойНастройки = "";
	Для Каждого ЭлементОформления Из НастройкиКомпоновщика.УсловноеОформление.Элементы Цикл
		ЭлементОформления.ИдентификаторПользовательскойНастройки = "";
	КонецЦикла;
	
	Для Каждого ЭлементПараметровВывода Из НастройкиКомпоновщика.ПараметрыВывода.Элементы Цикл
		ЭлементПараметровВывода.ИдентификаторПользовательскойНастройки = "";
		Для Каждого ВложенныйПараметр Из ЭлементПараметровВывода.ЗначенияВложенныхПараметров Цикл
			ВложенныйПараметр.ИдентификаторПользовательскойНастройки = "";
			ОбработатьСтруктуруНастроек(ВложенныйПараметр);
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого ЭлементПараметровДанных Из НастройкиКомпоновщика.ПараметрыДанных.Элементы Цикл
		Если Строка(ЭлементПараметровДанных.Параметр) = "ПериодОтчета" Тогда
			Продолжить;
		КонецЕсли;
		ЭлементПараметровДанных.ИдентификаторПользовательскойНастройки = "";
		Для Каждого ВложенныйПараметр Из ЭлементПараметровДанных.ЗначенияВложенныхПараметров Цикл
			ВложенныйПараметр.ИдентификаторПользовательскойНастройки = "";
			ОбработатьСтруктуруНастроек(ВложенныйПараметр);
		КонецЦикла;
	КонецЦикла;
	
	НастройкиКомпоновщика.Структура.ИдентификаторПользовательскойНастройки = "";
	Для Каждого ЭлементСтруктуры Из НастройкиКомпоновщика.Структура Цикл
		ЭлементСтруктуры.ИдентификаторПользовательскойНастройки = "";
		ОбработатьСтруктуруНастроек(ЭлементСтруктуры);
	КонецЦикла;
		
КонецПроцедуры

Процедура ОбработатьСтруктуруНастроек(Структура) Экспорт
	
	Если ТипЗнч(Структура) = Тип("ГруппировкаКомпоновкиДанных")
		ИЛИ ТипЗнч(Структура) = Тип("ГруппировкаТаблицыКомпоновкиДанных")
		ИЛИ ТипЗнч(Структура) = Тип("ГруппировкаДиаграммыКомпоновкиДанных") Тогда
		Для Каждого ЭлементСтруктуры Из Структура.Структура Цикл
			ЭлементСтруктуры.ИдентификаторПользовательскойНастройки = "";
			ОбработатьСтруктуруНастроек(ЭлементСтруктуры);
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(Структура) = Тип("ТаблицаКомпоновкиДанных") Тогда
		Структура.Колонки.ИдентификаторПользовательскойНастройки = "";
		Для Каждого ЭлементСтруктуры Из Структура.Колонки Цикл
			ЭлементСтруктуры.ИдентификаторПользовательскойНастройки = "";
			ОбработатьСтруктуруНастроек(ЭлементСтруктуры);
		КонецЦикла;
		Структура.Строки.ИдентификаторПользовательскойНастройки = "";
		Для Каждого ЭлементСтруктуры Из Структура.Строки Цикл
			ЭлементСтруктуры.ИдентификаторПользовательскойНастройки = "";
			ОбработатьСтруктуруНастроек(ЭлементСтруктуры);
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(Структура) = Тип("ДиаграммаКомпоновкиДанных") Тогда
		Структура.Серии.ИдентификаторПользовательскойНастройки = "";
		Для Каждого ЭлементСтруктуры Из Структура.Серии Цикл
			ЭлементСтруктуры.ИдентификаторПользовательскойНастройки = "";
			ОбработатьСтруктуруНастроек(ЭлементСтруктуры);
		КонецЦикла;
		Структура.Точки.ИдентификаторПользовательскойНастройки = "";
		Для Каждого ЭлементСтруктуры Из Структура.Точки Цикл
			ЭлементСтруктуры.ИдентификаторПользовательскойНастройки = "";
			ОбработатьСтруктуруНастроек(ЭлементСтруктуры);
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(Структура) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
		Для Каждого ЭлементСтруктуры Из Структура.ЗначенияВложенныхПараметров Цикл
			ЭлементСтруктуры.ИдентификаторПользовательскойНастройки = "";
			ОбработатьСтруктуруНастроек(ЭлементСтруктуры);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОчиститьИменаСтруктуры(Структура) Экспорт
	
	Структура.Имя = "";
	
	Если ТипЗнч(Структура) = Тип("ГруппировкаКомпоновкиДанных")
		ИЛИ ТипЗнч(Структура) = Тип("ГруппировкаТаблицыКомпоновкиДанных")
		ИЛИ ТипЗнч(Структура) = Тип("ГруппировкаДиаграммыКомпоновкиДанных") Тогда
		Для Каждого ЭлементСтруктуры Из Структура.Структура Цикл
			ЭлементСтруктуры.Имя = "";
			ОчиститьИменаСтруктуры(ЭлементСтруктуры);
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(Структура) = Тип("ТаблицаКомпоновкиДанных") Тогда
		Для Каждого ЭлементСтруктуры Из Структура.Колонки Цикл
			ЭлементСтруктуры.Имя = "";
			ОчиститьИменаСтруктуры(ЭлементСтруктуры);
		КонецЦикла;
		Для Каждого ЭлементСтруктуры Из Структура.Строки Цикл
			ЭлементСтруктуры.Имя = "";
			ОчиститьИменаСтруктуры(ЭлементСтруктуры);
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(Структура) = Тип("ДиаграммаКомпоновкиДанных") Тогда
		Для Каждого ЭлементСтруктуры Из Структура.Серии Цикл
			ЭлементСтруктуры.Имя = "";
			ОчиститьИменаСтруктуры(ЭлементСтруктуры);
		КонецЦикла;
		Для Каждого ЭлементСтруктуры Из Структура.Точки Цикл
			ЭлементСтруктуры.Имя = "";
			ОчиститьИменаСтруктуры(ЭлементСтруктуры);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполняет список значений с ключами отчетов, которые поддерживаются подсистемой
//
Процедура СписокОтчетовПоддерживаемыхПодсистемой(СписокОтчетов) Экспорт
	
	СписокОтчетов.Добавить("АнализНачисленийРаботникамОрганизаций");
	СписокОтчетов.Добавить("ДинамикаЗадолженностиПокупателей");
	СписокОтчетов.Добавить("ДинамикаЗадолженностиПоставщикам");
	СписокОтчетов.Добавить("ДоходыРасходы");
	СписокОтчетов.Добавить("ЗадолженностьПокупателей");
	СписокОтчетов.Добавить("ЗадолженностьПоставщикам");
	СписокОтчетов.Добавить("ЗадолженностьПокупателейПоСрокамДолга");	
	СписокОтчетов.Добавить("ЗадолженностьПоставщикамПоСрокамДолга");	
	СписокОтчетов.Добавить("КонтрольнаяВедомостьОтраженияЗарплатыВРегУчете");
	СписокОтчетов.Добавить("ОборотныеСредства");
	СписокОтчетов.Добавить("ОстаткиДенежныхСредств");
	СписокОтчетов.Добавить("ОтчетОРеализацииТоваровУслуг");
	СписокОтчетов.Добавить("ОтчетПоДвижениюСтоимостиФАНУ");
	СписокОтчетов.Добавить("ОтчетПоРасчетуПениОПВиСО");
	СписокОтчетов.Добавить("ПоступлениеДенежныхСредств");
	СписокОтчетов.Добавить("ПросроченнаяЗадолженностьПокупателей");	
	СписокОтчетов.Добавить("ПросроченнаяЗадолженностьПоставщикам");	
	СписокОтчетов.Добавить("РасходДенежныхСредств");
	СписокОтчетов.Добавить("РегистрНалоговогоУчетаПоИПНиСН");
	СписокОтчетов.Добавить("РегистрНалоговогоУчетаПоПрименениюИнвестиционныхПреференций");
	СписокОтчетов.Добавить("РегистрНалоговогоУчетаПоСчетамФактурам");
	СписокОтчетов.Добавить("РегистрНалоговогоУчетаПоФА");
	СписокОтчетов.Добавить("СпискиРаботниковОрганизаций");
	СписокОтчетов.Добавить("СтруктураЗадолженностиОрганизацийПередПолучателямиИЛ");
	СписокОтчетов.Добавить("СтруктураЗадолженностиОрганизацийПередРаботниками");
	СписокОтчетов.Добавить("СтруктураЗадолженностиОрганизацийПоВзносамОСМС");
	СписокОтчетов.Добавить("СтруктураЗадолженностиОрганизацийПоОПВ");
	СписокОтчетов.Добавить("СтруктураЗадолженностиОрганизацийПоОППВ");
	СписокОтчетов.Добавить("СтруктураЗадолженностиОрганизацийПоОПВР");
	СписокОтчетов.Добавить("СтруктураЗадолженностиОрганизацийПоОтчислениямОСМС");
	СписокОтчетов.Добавить("СтруктураЗадолженностиОрганизацийПоСО"); 
	СписокОтчетов.Добавить("СтруктураЗадолженностиОрганизацийПоЕП");
	//СписокОтчетов.Добавить("РасчетныеЛисткиОрганизаций");
	СписокОтчетов.Добавить("АнализОстатковТоваровНаВиртуальномСкладе");
	СписокОтчетов.Добавить("ДвижениеТоваров");
	СписокОтчетов.Добавить("ОборачиваемостьТоваров");
	СписокОтчетов.Добавить("СведенияПоАктамВыполненныхРабот");
	СписокОтчетов.Добавить("АнализНеоплаченныхСчетовПокупателям");
	СписокОтчетов.Добавить("АнализНеоплаченныхСчетовПоставщиков");
	
КонецПроцедуры

Функция ПолучитьРежимВыполненияОтчета(ИмяОтчета) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОтчетыВРежимеВариантыОтчетов.Отчет,
		|	ОтчетыВРежимеВариантыОтчетов.Пользователь
		|ИЗ
		|	РегистрСведений.ОтчетыВРежимеВариантыОтчетов КАК ОтчетыВРежимеВариантыОтчетов
		|ГДЕ
		|	ОтчетыВРежимеВариантыОтчетов.Отчет = &Отчет
		|	И ОтчетыВРежимеВариантыОтчетов.Пользователь = &Пользователь";
	
	Запрос.УстановитьПараметр("Отчет", ИмяОтчета);
	Запрос.УстановитьПараметр("Пользователь", Пользователи.ТекущийПользователь());
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	
	Если РезультатЗапроса.Следующий() Тогда
		Возврат Истина;
	Иначе
		ИмяОтчетаСокр = СтрЗаменить(ИмяОтчета, "ВнешнийОтчет.", "");
		ИмяОтчетаСокр = СтрЗаменить(ИмяОтчетаСокр, "Отчет.", "");
		СписокОтчетов = Новый СписокЗначений;
		ОтчетыВызовСервераБК.СписокОтчетовВсегдаВРежимеВариантыотчетов(СписокОтчетов);
		Если СписокОтчетов.НайтиПоЗначению(ИмяОтчетаСокр) <> Неопределено Тогда
			// Отчет всегда работает в режиме "Варианты отчетов"
		    Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;
		
		
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Процедура СписокОтчетовВсегдаВРежимеВариантыотчетов(СписокОтчетов) Экспорт
	
	СписокОтчетов.Добавить("СведенияПоАктамВыполненныхРабот");
	
КонецПроцедуры
