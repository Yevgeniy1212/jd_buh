
#Область ПрограммныйИнтерфейс

#Область СубконтоВФорме
// Конструктор описания субконто, связанных со счетом затрат в конкретной форме документа.
// Используется в качестве параметра других процедур, функций этого модуля и СчетаУчетаВДокументахКлиент
// Параметры:
//  ИмяСчета - Строка - Имя реквизита, в котором хранится счет учета
// Возвращаемое значение:
//  Структура 
Функция НовыйОписаниеСубконтоЗатрат(ИмяСчета) Экспорт
	
	Описание = Новый Структура;
	Описание.Вставить("ИмяСчета", ИмяСчета);
	Описание.Вставить("ИмяПоляСубконто");
	Описание.Вставить("ИмяЗаголовкаСубконто");
	Описание.Вставить("ИмяПоляПодразделение");
	Описание.Вставить("ИмяЗаголовкаПодразделение");
	
	Возврат Описание;
	
КонецФункции

// Настраивает на форме свойства элементов, связанные с субконто счета затрат.
//
// Параметры:
//  Форма			 - ФормаКлиентскогоПриложения - форма, которую требуется настроить
//  ОписаниеСубконто - см. НовыйОписаниеСубконтоЗатрат()
Процедура НастроитьСубконтоЗатрат(Форма, ОписаниеСубконто) Экспорт
	
	Если Не СчетаУчетаВДокументахВызовСервераПовтИсп.ПользовательУправляетСчетамиУчета() Тогда
		Возврат;
	КонецЕсли;
	
	ПоляФормы      = Новый Структура;
	ЗаголовкиПолей = Новый Структура;
	
	Для НомерСубконто = 1 По 3 Цикл
		
		ПоляФормы.Вставить("Субконто" + НомерСубконто,      ОписаниеСубконто.ИмяПоляСубконто + НомерСубконто);
		
		
		ЗаголовкиПолей.Вставить("Субконто" + НомерСубконто, ОписаниеСубконто.ИмяЗаголовкаСубконто + НомерСубконто);
		
	КонецЦикла;
	
	Если ОписаниеСубконто.ИмяПоляПодразделение <> Неопределено Тогда
		ПоляФормы.Вставить("Подразделение",  ОписаниеСубконто.ИмяПоляПодразделение);
	КонецЕсли;
	
	Если ОписаниеСубконто.ИмяЗаголовкаПодразделение <> Неопределено Тогда
		ЗаголовкиПолей.Вставить("Подразделение", ОписаниеСубконто.ИмяЗаголовкаПодразделение);
	КонецЕсли;
	
	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриВыбореСчета(Форма.Объект[ОписаниеСубконто.ИмяСчета], Форма, ПоляФормы, ЗаголовкиПолей);
	
	НастроитьПараметрыВыбораСубконтоЗатрат(Форма, ОписаниеСубконто.ИмяСчета, ОписаниеСубконто.ИмяПоляСубконто);
	
КонецПроцедуры

// Настраивает параметры выбора для полей формы, связанных с субконто затрат
//
// Параметры:
//  Форма			 - ФормаКлиентскогоПриложения - форма, которую требуется настроить
//  ИмяСчета		 - Строка - Имя реквизита, в котором хранится счет
//  ИмяПоляСубконто	 - Строка - Имя поля, которое нужно настроить
Процедура НастроитьПараметрыВыбораСубконтоЗатрат(Форма, ИмяСчета, ИмяПоляСубконто) Экспорт
	
	Если Не СчетаУчетаВДокументахВызовСервераПовтИсп.ПользовательУправляетСчетамиУчета() Тогда
		Возврат;
	КонецЕсли;
	
	ШаблонПоляСубконто = ИмяПоляСубконто + "%Индекс%";
	
	ПараметрыВыбораСубконто = ПараметрыВыбораСубконтоЗатрат(Форма, ШаблонПоляСубконто, ИмяСчета);
	
	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(
		Форма, 
		Форма.Объект, 
		ШаблонПоляСубконто, 
		ШаблонПоляСубконто, 
		ПараметрыВыбораСубконто);

КонецПроцедуры

// Описывает параметры выбора субконто для счетов затрат затрат
//
// Параметры:
//  Форма				 - ФормаКлиентскогоПриложения - форма, отображающая объект, данные которого учитываются в параметрах выбора
//  ШаблонИмяПоляОбъекта - Строка - Шаблон имени поля для субконто, в котором для номера субконто указывается "%Индекс%"
//  ИмяСчета			 - Строка - Имя реквизита объекта, значение которого - счет учета затрат
// Возвращаемое значение:
//  Структура - описывает параметры выбора в формате, приемлемом для БухгалтерскийУчетКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто()
Функция ПараметрыВыбораСубконтоЗатрат(Форма, ШаблонИмяПоляОбъекта, ИмяСчета) Экспорт

	ПараметрыВыбора = Новый Структура;
	
	Объект = Форма.Объект;
	
	Для Индекс = 1 По 3 Цикл
		
		ИмяПоля = СтрЗаменить(ШаблонИмяПоляОбъекта, "%Индекс%", Индекс);
		Если ТипЗнч(Объект[ИмяПоля]) = Тип("СправочникСсылка.Контрагенты") Тогда
			ПараметрыВыбора.Вставить("Контрагент", Объект[ИмяПоля]);
		ИначеЕсли ТипЗнч(Объект[ИмяПоля]) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			ПараметрыВыбора.Вставить("ДоговорКонтрагента", Объект[ИмяПоля]);
		ИначеЕсли ТипЗнч(Объект[ИмяПоля]) = Тип("СправочникСсылка.Номенклатура") Тогда
			ПараметрыВыбора.Вставить("Номенклатура", Объект[ИмяПоля]);
		ИначеЕсли ТипЗнч(Объект[ИмяПоля]) = Тип("СправочникСсылка.Склады") Тогда
			ПараметрыВыбора.Вставить("Склад", Объект[ИмяПоля]);
		КонецЕсли;
		
	КонецЦикла;
	
	ПараметрыВыбора.Вставить("Организация", Объект.Организация);
	ПараметрыВыбора.Вставить("СчетУчета"  , Объект[ИмяСчета]);
	
	Возврат ПараметрыВыбора;

КонецФункции

#КонецОбласти

#Область ЗаполнениеВФорме

// Конструктор коллекции, которая описывает параметры (особенности) заполнения счетов учета при интерактивных изменениях в форме.
//
// Параметры:
//  ИмяДокумента			 - Строка - Имя документа
//  ПричиныИзменения		 - Массив, Строка - полные имена реквизитов, которые изменены пользователем
//  Объект					 - ДанныеФормыСтруктура - данные формы, отображающие документа
//  СтрокаСписка			 - ДанныеФормыЭлементКоллекции - данные формы, отображающие строку табличной части
//  КонтейнерОбъект			 - Структура - контейнер для передачи данных шапки объекта на сервер в ходе неконтекстного вызова
//  КонтейнерСтрокаСписка	 - Структура - контейнер для передачи данных строки табличной части на сервер в ходе неконтекстного вызова
// Возвращаемое значение:
//  Структура 
Функция НовыйПараметрыЗаполнения(ИмяДокумента, ПричиныИзменения, Объект, СтрокаСписка, КонтейнерОбъект, КонтейнерСтрокаСписка) Экспорт
	
	ПараметрыЗаполнения = Новый Структура;
	
	ПараметрыЗаполнения.Вставить("ИмяДокумента",     ИмяДокумента);
	ПараметрыЗаполнения.Вставить("ПричиныИзменения");
	ПараметрыЗаполнения.Вставить("КЗаполнению",      Новый Соответствие);
	
	ПараметрыЗаполнения.Вставить("Заполнять",        СчетаУчетаВДокументахВызовСервераПовтИсп.ПользовательУправляетСчетамиУчета());
	
	ПараметрыЗаполнения.Вставить("ДанныеФормы",      Новый Структура); // Данные, доступные на клиенте
	ПараметрыЗаполнения.ДанныеФормы.Вставить("Объект", Объект);
	ПараметрыЗаполнения.ДанныеФормы.Вставить("Строка", СтрокаСписка);
	
	ПараметрыЗаполнения.Вставить("НакапливатьИзмененияВФорме", Ложь);
	
	#Если Клиент Тогда
	// Контейнер служит для передачи на сервер нужных данных объекта
	Если ПараметрыЗаполнения.Заполнять Тогда
		
		ПараметрыЗаполнения.Вставить("Контейнер", Новый Структура);
		ПараметрыЗаполнения.Контейнер.Вставить("Объект");
		ПараметрыЗаполнения.Контейнер.Вставить("Строка");
		
	КонецЕсли;
	#КонецЕсли
	
	// Все элементы структуры добавлены; далее они заполняются.
	
	Если ТипЗнч(ПричиныИзменения) = Тип("Массив") Тогда
		ПараметрыЗаполнения.ПричиныИзменения = ПричиныИзменения;
	ИначеЕсли ТипЗнч(ПричиныИзменения) = Тип("Строка") Тогда
		ПараметрыЗаполнения.ПричиныИзменения = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПричиныИзменения, ",", Истина, Истина);
	Иначе
		ПараметрыЗаполнения.ПричиныИзменения = Новый Массив;
	КонецЕсли;
	
	Если ПараметрыЗаполнения.Свойство("Контейнер") Тогда
	
		Если КонтейнерОбъект = Неопределено Тогда
			ПараметрыЗаполнения.Контейнер.Объект = Новый Структура;
		Иначе
			ПараметрыЗаполнения.Контейнер.Объект = КонтейнерОбъект;
		КонецЕсли;
	
		Если КонтейнерСтрокаСписка = Неопределено Тогда
			ПараметрыЗаполнения.Контейнер.Строка = Новый Структура;
		Иначе
			ПараметрыЗаполнения.Контейнер.Строка = КонтейнерСтрокаСписка;
		КонецЕсли;
		
	КонецЕсли;

	Возврат ПараметрыЗаполнения;
	
КонецФункции

// Выполняет на клиенте часть или все действия, необходимые для заполнения счета
// - если счета отображаются в документах - дополняет параметры заполнения, указывает, что реквизит нужно заполнить
// - если счета не отображаются в документах - очищает реквизит, в котором хранится счет, с тем, чтобы он был заполнен перед записью
//
// Параметры:
//  ПараметрыЗаполнения	 - См. НовыйПараметрыЗаполнения()
//  ПолноеИмяРеквизита	 - Строка - полное имя заполняемого реквизита
Процедура НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, ПолноеИмяРеквизита) Экспорт
	
	ИмяРеквизитаДетально = ОбщегоНазначенияБККлиентСервер.РазложитьПолноеИмяРеквизита(ПолноеИмяРеквизита);
	
	// Убедимся, что этот реквизит присутствует в форме
	Если ПустаяСтрока(ИмяРеквизитаДетально.ТабличнаяЧасть) Тогда
		Если Не ПараметрыЗаполнения.ДанныеФормы.Объект.Свойство(ИмяРеквизитаДетально.Реквизит) Тогда
			Возврат;
		КонецЕсли;
	ИначеЕсли ПараметрыЗаполнения.ДанныеФормы.Строка = Неопределено Тогда
		Если Не ПараметрыЗаполнения.ДанныеФормы.Объект.Свойство(ИмяРеквизитаДетально.ТабличнаяЧасть) Тогда
			Возврат;
		Иначе
			ТабличнаяЧасть = ПараметрыЗаполнения.ДанныеФормы.Объект[ИмяРеквизитаДетально.ТабличнаяЧасть];
			Если ТабличнаяЧасть.Количество() = 0 Тогда
				Возврат;
			ИначеЕсли Не ТабличнаяЧасть[0].Свойство(ИмяРеквизитаДетально.Реквизит) Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если Не ПараметрыЗаполнения.ДанныеФормы.Строка.Свойство(ИмяРеквизитаДетально.Реквизит) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыЗаполнения.Заполнять Тогда
		// Сообщим, что нужно его заполнить
		ПараметрыЗаполнения.КЗаполнению.Вставить(ПолноеИмяРеквизита, Истина);
	Иначе
		// Очистим
		Если ПустаяСтрока(ИмяРеквизитаДетально.ТабличнаяЧасть) Тогда
			ОчиститьЗначениеРеквизита(ПараметрыЗаполнения.ДанныеФормы.Объект, ИмяРеквизитаДетально.Реквизит);
		ИначеЕсли ПараметрыЗаполнения.ДанныеФормы.Строка = Неопределено Тогда
			Для Каждого Строка Из ПараметрыЗаполнения.ДанныеФормы.Объект[ИмяРеквизитаДетально.ТабличнаяЧасть] Цикл
				ОчиститьЗначениеРеквизита(Строка, ИмяРеквизитаДетально.Реквизит);
			КонецЦикла;
		Иначе
			ОчиститьЗначениеРеквизита(ПараметрыЗаполнения.ДанныеФормы.Строка, ИмяРеквизитаДетально.Реквизит);
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

Процедура ОчиститьЗначениеРеквизита(Элемент, ИмяРеквизита)
	
	Если ЗначениеЗаполнено(Элемент[ИмяРеквизита]) Тогда
		Элемент[ИмяРеквизита] = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

// Выполняет на клиенте часть действий, необходимых для заполнения счета, если счета отображаются в документах.
// А именно, готовит для передачи на сервер данные, необходимые для заполнения - 
// помещает их в соответствующие свойства коллекции ПараметрыЗаполнения.
//
// Параметры:
//  ПараметрыЗаполнения	 - См. НовыйПараметрыЗаполнения()
//  ЭлементДанных		 - Строка - "Строка", если речь идет о строке табличной части, "Объект" - если о шапке
//  ИмяРеквизита		 - Строка - имя реквизита, данные из которого нужны для заполнения
Процедура ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, ЭлементДанных, ИмяРеквизита) Экспорт
	
	Если ПараметрыЗаполнения.ДанныеФормы[ЭлементДанных] = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПараметрыЗаполнения.ДанныеФормы[ЭлементДанных].Свойство(ИмяРеквизита) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗаполнения.Контейнер[ЭлементДанных].Вставить(ИмяРеквизита, ПараметрыЗаполнения.ДанныеФормы[ЭлементДанных][ИмяРеквизита]);
	
КонецПроцедуры

// Используется для того, чтобы определить целесообразно ли сейчас заполнять счета
// или это действие можно отложить к концу стека вызовов.
//
// Параметры:
//  ПричинаИзменения - Строка - Полное имя реквизита, который изменен пользователем и может повлечь изменение счетов учета
//  ПричиныИзменения - Массив - содержит строки, полные имена реквизитов, которые изменены в рамках стека вызовов.
//                     Например, если пользователь изменил значение Организации и при обработке этого изменения был изменен ДоговорКонтрагента,
//                     то массив должен содержать строки "Организация", "ДоговорКонтрагента"
// Возвращаемое значение:
//  Булево - Истина, если функция вызвана для первой из причин изменения в стеке вызовов. Или, другими словами - в конце стека вызовов.
Функция МожноНачатьЗаполнениеСчетовУчета(ПричинаИзменения, ПричиныИзменения) Экспорт
	
	ИндексПричины = ПричиныИзменения.Найти(ПричинаИзменения);
	
	Если ИндексПричины = Неопределено Тогда
		ПричиныИзменения.Добавить(ПричинаИзменения);
		Возврат Истина;
	ИначеЕсли ИндексПричины > 0 Тогда
		// Изменение реквизита <ИмяРеквизита> - не первое в цепочке изменений.
		// Поэтому заполнять здесь ничего не будем: заполним, когда обойдем всю цепочку и вернемся по стеку к ее началу.
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

// Определяет перечень табличных частей, реквизиты которых содержатся в списке к заполнению.
//
// Параметры:
//  КЗаполнению	 - Соответствие - перечень полных имен реквизитов (содержит имя табличной части)
// Возвращаемое значение:
// Массив - имена табличных частей из КЗаполнению
Функция ТабличныеЧастиКЗаполнению(КЗаполнению) Экспорт
	
	ТабличныеЧасти = Новый Структура;
	Для Каждого ПолноеИмяРеквизита Из КЗаполнению Цикл
		ИмяРеквизитаДетально = ОбщегоНазначенияБККлиентСервер.РазложитьПолноеИмяРеквизита(ПолноеИмяРеквизита.Ключ);
		Если Не ПустаяСтрока(ИмяРеквизитаДетально.ТабличнаяЧасть) Тогда
			ТабличныеЧасти.Вставить(ИмяРеквизитаДетально.ТабличнаяЧасть);
		КонецЕсли;
	КонецЦикла;
	
	Результат = Новый Массив;
	Для Каждого КлючИЗначение Из ТабличныеЧасти Цикл
		Результат.Добавить(КлючИЗначение.Ключ);
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ФормаСчетаУчета

&НаКлиенте
Процедура ОткрытьФормуСчетаУчета(Форма, СтруктураДополнительныхПараметров = Неопределено) Экспорт
	
	Объект = Форма.Объект;
	
	Если НЕ Форма.ТолькоПросмотр Тогда
		Форма.ЗаблокироватьДанныеФормыДляРедактирования();
	КонецЕсли;
	
	// Основная масса документов содержит 2 счета:
	СтруктураПараметров = Новый Структура();
	Если Объект.Свойство("СчетУчетаРасчетовПоАвансам") Тогда
		СтруктураПараметров.Вставить("СчетУчетаРасчетовПоАвансам",     		Объект.СчетУчетаРасчетовПоАвансам);
	ИначеЕсли Объект.Свойство("СчетУчетаРасчетовПоВозвратам") Тогда
		СтруктураПараметров.Вставить("СчетУчетаРасчетовПоВозвратам",   		Объект.СчетУчетаРасчетовПоВозвратам);
	КонецЕсли;
	
	Если Объект.Свойство("СчетУчетаРасчетовСКонтрагентом") Тогда
		СтруктураПараметров.Вставить("СчетУчетаРасчетовСКонтрагентом", 		Объект.СчетУчетаРасчетовСКонтрагентом);
	КонецЕсли;
		
	// Для документа Возврат поставщику:
	Если ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда 
		СтруктураПараметров.Вставить("СчетОтнесенияСебестоимостиБУ", 	  	Объект.СчетОтнесенияСебестоимостиБУ);
		СтруктураПараметров.Вставить("СубконтоОтнесенияСебестоимостиБУ1", 	Объект.СубконтоОтнесенияСебестоимостиБУ1);
		СтруктураПараметров.Вставить("СубконтоОтнесенияСебестоимостиБУ2", 	Объект.СубконтоОтнесенияСебестоимостиБУ2);
		СтруктураПараметров.Вставить("СубконтоОтнесенияСебестоимостиБУ3",	Объект.СубконтоОтнесенияСебестоимостиБУ3);
		
		СтруктураПараметров.Вставить("СчетОтнесенияСебестоимостиНУ", 	  	Объект.СчетОтнесенияСебестоимостиНУ);
		СтруктураПараметров.Вставить("СубконтоОтнесенияСебестоимостиНУ1", 	Объект.СубконтоОтнесенияСебестоимостиНУ1);
		СтруктураПараметров.Вставить("СубконтоОтнесенияСебестоимостиНУ2", 	Объект.СубконтоОтнесенияСебестоимостиНУ2);
		СтруктураПараметров.Вставить("СубконтоОтнесенияСебестоимостиНУ3", 	Объект.СубконтоОтнесенияСебестоимостиНУ3);
		
		СтруктураПараметров.Вставить("ВидимостьНалоговогоУчета", 			Форма.ВидимостьНалоговогоУчета);
		СтруктураПараметров.Вставить("ПоказыватьВДокументахСчетаУчета", 	Форма.ПоказыватьВДокументахСчетаУчета);
		
		СтруктураПараметров.Вставить("СтруктурноеПодразделение", 			Объект.СтруктурноеПодразделение);
		СтруктураПараметров.Вставить("ВидОперации", 						Объект.ВидОперации);
					
	КонецЕсли;
	
	СтруктураПараметров.Вставить("Организация", 							Объект.Организация);
	СтруктураПараметров.Вставить("ТолькоПросмотр", 							Форма.ТолькоПросмотр);
	
	Если НЕ СтруктураДополнительныхПараметров = Неопределено Тогда
		Для Каждого ЭлементСтруктуры Из  СтруктураДополнительныхПараметров Цикл
			СтруктураПараметров.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение)
		КонецЦикла;
	КонецЕсли;
	
	ПараметрыОповещения = Новый Структура("ФормаДокумента", Форма);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеЗакрытияФормыСчетаУчета", Форма, ПараметрыОповещения);
		
	ОткрытьФорму("ОбщаяФорма.ФормаСчетаУчета", СтруктураПараметров, Форма,,,, ОписаниеОповещения);
	
КонецПроцедуры

Процедура ПослеЗакрытияФормыСчетаУчета(Результат, Параметры) Экспорт
	
	ФормаДокумента = Параметры.ФормаДокумента;
	
	Если Результат <> Неопределено Тогда
		
		ЗаполнитьЗначенияСвойств(ФормаДокумента.Объект, Результат.ЗначенияПриЗакрытии);
		ФормаДокумента.Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьЗаголовокСчетаУчетаРасчетов(Форма) Экспорт
	
	Элементы = Форма.Элементы;
	Если Элементы.Найти("ДекорацияРасчеты") = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	ОбщегоНазначенияБККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДекорацияРасчеты", "Заголовок", НСтр("ru = 'Счета расчетов:'"));
		
КонецПроцедуры

Функция СформироватьНадписьСчетаУчета(ДанныеДокумента) Экспорт
	
	СчетаУчета = Новый Массив();
	
	Если ДанныеДокумента.Свойство("СчетУчетаРасчетовСКонтрагентом") Тогда
		СчетаУчета.Добавить(ДанныеДокумента.СчетУчетаРасчетовСКонтрагентом);
	КонецЕсли;
	
	Если ДанныеДокумента.Свойство("СчетУчетаРасчетовПоАвансам") Тогда
		СчетаУчета.Добавить(ДанныеДокумента.СчетУчетаРасчетовПоАвансам);
	КонецЕсли;
	
	Если ДанныеДокумента.Свойство("СчетУчетаРасчетовПоВозвратам") Тогда
		СчетаУчета.Добавить(ДанныеДокумента.СчетУчетаРасчетовПоВозвратам);
	КонецЕсли;
	
	Если ДанныеДокумента.Свойство("СчетОтнесенияСебестоимостиБУ") Тогда
		СчетаУчета.Добавить(ДанныеДокумента.СчетОтнесенияСебестоимостиБУ);
	КонецЕсли;
	
	Если ДанныеДокумента.Свойство("СчетОтнесенияСебестоимостиНУ") Тогда
		СчетаУчета.Добавить(ДанныеДокумента.СчетОтнесенияСебестоимостиНУ);
	КонецЕсли;
	
	Возврат УстановитьТекстСчетаУчета(СчетаУчета);
	
КонецФункции

Функция УстановитьТекстСчетаУчета(СчетаУчета) Экспорт
	
	МассивСтрок = Новый Массив;
	
	ПорядокСчета = 1;
	
	Для Каждого СчетУчета Из СчетаУчета Цикл
		Если СчетУчета.Пустая() Тогда
			МассивСтрок.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = '<не указан>'")));
		Иначе
			МассивСтрок.Добавить(Новый ФорматированнаяСтрока(Строка(СчетУчета)));
		КонецЕсли;
		
		Если ПорядокСчета < СчетаУчета.Количество() Тогда
			МассивСтрок.Добавить(", ");
			ПорядокСчета = ПорядокСчета + 1;
	    КонецЕсли;
	КонецЦикла;
	
	НадписьСчетаУчета = Новый ФорматированнаяСтрока(МассивСтрок); 
	
	Возврат НадписьСчетаУчета;
	 
КонецФункции

#КонецОбласти

#Область ФормаСчетаУчетаЗатрат

&НаКлиенте
Процедура ОткрытьФормуСчетаЗатрат(Форма, СтруктураДополнительныхПараметров = Неопределено) Экспорт
	
	Объект = Форма.Объект;
	
	Если НЕ Форма.ТолькоПросмотр Тогда
		Форма.ЗаблокироватьДанныеФормыДляРедактирования();
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура();
	
	Если ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ПоступлениеДопРасходов") Тогда 
		
		СтруктураПараметров.Вставить("ТипДокумента", "ПоступлениеДопРасходов");
		СтруктураПараметров.Вставить("СчетБУ", 	  	 Объект.СчетБУ);
		СтруктураПараметров.Вставить("СубконтоБУ1",  Объект.СубконтоБУ1);
		СтруктураПараметров.Вставить("СубконтоБУ2",  Объект.СубконтоБУ2);
		СтруктураПараметров.Вставить("СубконтоБУ3",	 Объект.СубконтоБУ3);
		
		СтруктураПараметров.Вставить("СчетНУ", 	  	 Объект.СчетНУ);
		СтруктураПараметров.Вставить("СубконтоНУ1",  Объект.СубконтоНУ1);
		СтруктураПараметров.Вставить("СубконтоНУ2",  Объект.СубконтоНУ2);
		СтруктураПараметров.Вставить("СубконтоНУ3",  Объект.СубконтоНУ3);
							
	КонецЕсли;
	
	Если ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.РегистрацияПрочихОперацийПоПриобретеннымТоварамВЦеляхНДС") ИЛИ
		ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов") Тогда 
		
		Если ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.РегистрацияПрочихОперацийПоПриобретеннымТоварамВЦеляхНДС") Тогда
			СтруктураПараметров.Вставить("ТипДокумента", "РегистрацияПрочихОперацийПоПриобретеннымТоварамВЦеляхНДС");
			СтруктураПараметров.Вставить("ОтражатьВБухгалтерскомУчете", Объект.ОтражатьВБухгалтерскомУчете);
		Иначе
			СтруктураПараметров.Вставить("ТипДокумента", "ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов");
		КонецЕсли;
		
		СтруктураПараметров.Вставить("СчетБУ", 	  	 Объект.СчетЗатратНДСБУ);
		СтруктураПараметров.Вставить("СубконтоБУ1",  Объект.СубконтоЗатратНДСБУ1);
		СтруктураПараметров.Вставить("СубконтоБУ2",  Объект.СубконтоЗатратНДСБУ2);
		СтруктураПараметров.Вставить("СубконтоБУ3",	 Объект.СубконтоЗатратНДСБУ3);
		
		СтруктураПараметров.Вставить("СчетНУ", 	  	 Объект.СчетЗатратНДСНУ);
		СтруктураПараметров.Вставить("СубконтоНУ1",  Объект.СубконтоЗатратНДСНУ1);
		СтруктураПараметров.Вставить("СубконтоНУ2",  Объект.СубконтоЗатратНДСНУ2);
		СтруктураПараметров.Вставить("СубконтоНУ3",  Объект.СубконтоЗатратНДСНУ3);
								
	КонецЕсли;
	
	Если Не ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов") Тогда
		СтруктураПараметров.Вставить("ВидОперации",  Объект.ВидОперации);
	КонецЕсли;
	
	СтруктураПараметров.Вставить("УчитыватьКПН", 	 Объект.УчитыватьКПН);
	СтруктураПараметров.Вставить("Организация", 	 Объект.Организация);
	СтруктураПараметров.Вставить("СтруктурноеПодразделение", Объект.СтруктурноеПодразделение);
	СтруктураПараметров.Вставить("ТолькоПросмотр", 	 Форма.ТолькоПросмотр);
	
	Если НЕ СтруктураДополнительныхПараметров = Неопределено Тогда
		Для Каждого ЭлементСтруктуры Из  СтруктураДополнительныхПараметров Цикл
			СтруктураПараметров.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение)
		КонецЦикла;
	КонецЕсли;
	
	ПараметрыОповещения = Новый Структура("ФормаДокумента", Форма);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеЗакрытияФормыСчетаУчетаЗатрат", Форма, ПараметрыОповещения);
		
	ОткрытьФорму("ОбщаяФорма.ФормаСчетаУчетаЗатрат", СтруктураПараметров, Форма,,,, ОписаниеОповещения);
	
КонецПроцедуры

Процедура ПослеЗакрытияФормыСчетаУчетаЗатрат(Результат, Параметры) Экспорт
	
	ФормаДокумента = Параметры.ФормаДокумента;
	
	Если Результат <> Неопределено Тогда
		
		ЗаполнитьЗначенияСвойств(ФормаДокумента.Объект, Результат);
		ФормаДокумента.Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьЗаголовокСчетаУчетаЗатрат(Форма) Экспорт
	
	Элементы = Форма.Элементы;
	Если Элементы.Найти("ДекорацияЗатраты") = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	ОбщегоНазначенияБККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДекорацияЗатраты", "Заголовок", НСтр("ru = 'Счета затрат:'"));
		
КонецПроцедуры

Функция СформироватьНадписьСчетаУчетаЗатрат(ДанныеДокумента) Экспорт
	
	СчетаУчета = Новый Массив();
		
	Если ДанныеДокумента.Свойство("СчетБУ") Тогда
		СчетаУчета.Добавить(ДанныеДокумента.СчетБУ);
	ИначеЕсли ДанныеДокумента.Свойство("СчетЗатратНДСБУ") Тогда
		СчетаУчета.Добавить(ДанныеДокумента.СчетЗатратНДСБУ);
	КонецЕсли;
	
	Если ДанныеДокумента.Свойство("СчетНУ") Тогда
		СчетаУчета.Добавить(ДанныеДокумента.СчетНУ);
	ИначеЕсли ДанныеДокумента.Свойство("СчетЗатратНДСНУ") Тогда
		СчетаУчета.Добавить(ДанныеДокумента.СчетЗатратНДСНУ);
	КонецЕсли;
	
	Возврат УстановитьТекстСчетаУчета(СчетаУчета);
	
КонецФункции

#КонецОбласти

#КонецОбласти
