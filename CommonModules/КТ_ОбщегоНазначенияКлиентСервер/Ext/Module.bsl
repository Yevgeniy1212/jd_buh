
Процедура УстановитьНедоступныйОтборСписка(Список, ИмяПоля, Значение, ВидСравнения = Неопределено) Экспорт
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, ИмяПоля, Значение, ?(ВидСравнения = Неопределено, ВидСравненияКомпоновкиДанных.Равно, ВидСравнения), ИмяПоля, Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
	
КонецПроцедуры


// Контротек 
//
// Аналог метода НайтиСтроки коллекции строк дерева значений, используемый в случае использования дерева значений в управляемых формах.
//
//Параметры:
// КоллекцияСтрок – ДанныеФормыКоллекцияЭлементовДерева – Коллекция подчиненных строк элемента дерева значений, используемого в управляемых формах.
// ПараметрыОтбора - Структура - Структура с критериями поиска.
//                               Задает условия поиска: ключ структуры определяет имя колонки, по которой будет осуществляться поиск,
//                               а значение структуры - искомое значение.
//                               Структура без полей означает "выбрать все подчиненные строки".
// ВключатьПодчиненные - Булево - Определяет, будет ли производиться поиск также в подчиненных коллекциях (если таковые имеются).
//                                Истина - поиск будет произведен.
//
//Возвращаемое значение:
// Массив(ДанныеФормыЭлементДерева) – Массив из строк дерева значений, соответствующих заданному условию поиска.
//
Функция ДанныеФормыКоллекцияЭлементовДереваНайтиСтроки(КоллекцияСтрок, ПараметрыОтбора, ВключатьПодчиненные = Ложь) Экспорт
	
	Результат = Новый Массив;
	Для Каждого СтрокаТекущая Из КоллекцияСтрок Цикл
		СтрокаНайдена = Истина;
		Для Каждого КлючИЗначение Из ПараметрыОтбора Цикл
			Если СтрокаТекущая[КлючИЗначение.Ключ] <> КлючИЗначение.Значение Тогда
				СтрокаНайдена = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если СтрокаНайдена Тогда
			Результат.Добавить(СтрокаТекущая);
		КонецЕсли;
		Если ВключатьПодчиненные Тогда
			ПодчиненныеСтроки = ДанныеФормыКоллекцияЭлементовДереваНайтиСтроки(СтрокаТекущая.ПолучитьЭлементы(), ПараметрыОтбора, ВключатьПодчиненные);
			Для Каждого НайденнаяСтрока Из ПодчиненныеСтроки Цикл
				Результат.Добавить(НайденнаяСтрока);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

Процедура ПересчетПоКолонке(ЭтаСтрока, ИмяКолонки, показатели) Экспорт
	
	ТекСтрока = ЭтаСтрока;
	Родитель = ТекСтрока.ПолучитьРодителя();
	Пока Родитель <> Неопределено Цикл
		ДанныеСтроки = Новый Структура;
		ДанныеСтроки.Вставить("РодительСтатьиЗатрат", Родитель.СтатьяЗатрат);

		
		Строки = ДанныеФормыКоллекцияЭлементовДереваНайтиСтроки(показатели.ПолучитьЭлементы(),ДанныеСтроки, Истина);
		Сумма = 0;
		Для Каждого Стр Из Строки Цикл
			Сумма = Сумма + Стр[ИмяКолонки];
		КонецЦикла;
		Родитель[ИмяКолонки] = Сумма;
		Родитель = Родитель.ПолучитьРодителя();
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗначениеКонстанты(ИмяКонстанты, ЗначениеКонстанты) Экспорт
	
	Попытка
		Константы[ИмяКонстанты].Установить(ЗначениеКонстанты);
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;	
	
КонецПроцедуры

&НаСервере
Функция ПолучитьЗначениеКонстанты(ИмяКонстанты) Экспорт 
	
	Попытка
		Возврат Константы[ИмяКонстанты].Получить();
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;	
	
КонецФункции
	

