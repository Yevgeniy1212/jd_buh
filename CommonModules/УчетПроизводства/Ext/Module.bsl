////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// УЧЕТ ПЛАНОВОЙ СТОИМОСТИ ВЫПУЩЕННЫХ ТОВАРОВ УСЛУГ

Процедура СформироватьДвиженияПлановаяСтоимостьВыпущенныхУслуг(ТаблицаУслуги, ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Параметры = ПодготовитьПараметрыПлановаяСтоимостьВыпущенныхУслуг(ТаблицаУслуги, ТаблицаРеквизиты);
	
	Если Параметры.Реквизиты.Количество() = 0
		ИЛИ Параметры.ТаблицаУслуги.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = Параметры.Реквизиты[0];
	
	Для Каждого СтрокаТаблицы Из Параметры.ТаблицаУслуги Цикл
		
		Проводка = Движения.Типовой.Добавить();
		
		Проводка.Период = Реквизиты.Период;
		Проводка.Организация = Реквизиты.Организация;
		
		Проводка.Содержание = СтрокаТаблицы.Содержание; 
		
		Проводка.СчетДт	= СтрокаТаблицы.СчетБУ;
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаТаблицы.СубконтоБУ1);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаТаблицы.СубконтоБУ2);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтрокаТаблицы.СубконтоБУ3);
		
		ДанныеСчетаБУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
		
		Если ДанныеСчетаБУ.Количественный Тогда
			Проводка.КоличествоДт = СтрокаТаблицы.Количество;
		КонецЕсли;
		
		Если  СтрокаТаблицы.ВедетсяПартионныйУчет Тогда
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтрокаТаблицы.СубконтоБУ3);
		КонецЕсли;
		
		Проводка.СчетКт = СтрокаТаблицы.СчетЗатратБУ;
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтрокаТаблицы.СубконтоЗатратБУ1);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтрокаТаблицы.СубконтоЗатратБУ2);
		
		Проводка.Сумма = СтрокаТаблицы.СуммаПлановая;
		

		ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
		Проводка, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);
		
		// поводки по налоговому учету
		Если Реквизиты.НеобходимостьОтраженияВНУ  И Реквизиты.ВедениеУчетаВременныхРазницБалансовымМетодом Тогда
			
			Проводка = Движения.Налоговый.Добавить();
			
			Проводка.Период      = Реквизиты.Период;
			Проводка.Организация = Реквизиты.Организация;
			Проводка.Содержание  = СтрокаТаблицы.Содержание;
			
			Проводка.СчетДт	= СтрокаТаблицы.СчетНУ;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаТаблицы.СубконтоНУ1);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаТаблицы.СубконтоНУ2);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтрокаТаблицы.СубконтоНУ3);

			
			Проводка.СчетКт = СтрокаТаблицы.СчетЗатратНУ;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтрокаТаблицы.СубконтоЗатратНУ1);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтрокаТаблицы.СубконтоЗатратНУ2);
			
			Проводка.Сумма = СтрокаТаблицы.СуммаПлановая;
			
			ДанныеСчетаБУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
			
			Если ДанныеСчетаБУ.Количественный Тогда
				Проводка.КоличествоДт = СтрокаТаблицы.Количество;
			КонецЕсли;
			
			ПроцедурыНалоговогоУчета.ВидУчетаНУ(Проводка, Реквизиты.ВидУчетаНУ);
			
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
			Проводка, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);
			
		КонецЕсли;	
		
	КонецЦикла;
	
	Движения.Типовой.Записывать = Истина;
	
	Если Реквизиты.НеобходимостьОтраженияВНУ Тогда
		Движения.Налоговый.Записывать = Истина;
	КонецЕсли;
	
	
КонецПроцедуры

Процедура СформироватьДвиженияПлановаяСтоимостьВыпущенныхТоваров(ТаблицаТовары, ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Параметры = ПодготовитьПараметрыПлановаяСтоимостьВыпущенныхТоваров(ТаблицаТовары, ТаблицаРеквизиты);
	
	Если Параметры.Реквизиты.Количество() = 0
		ИЛИ Параметры.ТаблицаТовары.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = Параметры.Реквизиты[0];
	
	Для Каждого СтрокаТаблицы Из Параметры.ТаблицаТовары Цикл
		
		Проводка = Движения.Типовой.Добавить();
		
		Проводка.Период = Реквизиты.Период;
		Проводка.Организация = Реквизиты.Организация;
		
		Проводка.Содержание = СтрокаТаблицы.Содержание; 
		
		Проводка.СчетДт	= СтрокаТаблицы.СчетБУ;
		
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура", СтрокаТаблицы.Номенклатура);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Склады",       Реквизиты.Склад);

		Если СтрокаТаблицы.ВедетсяПартионныйУчет Тогда 
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Партии",   Реквизиты.Регистратор);
		КонецЕсли;                                                                                                             		
		
		ДанныеСчетаБУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
		
		Если ДанныеСчетаБУ.Количественный Тогда
			Проводка.КоличествоДт = СтрокаТаблицы.Количество;
		КонецЕсли;
						
		Проводка.СчетКт = СтрокаТаблицы.СчетЗатратБУ;
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтрокаТаблицы.СубконтоЗатратБУ1);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтрокаТаблицы.СубконтоЗатратБУ2);
		
		Проводка.Сумма = СтрокаТаблицы.СуммаПлановая;
		                           
		ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
		Проводка, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);
		
		// поводки по налоговому учету
		Если Реквизиты.НеобходимостьОтраженияВНУ  И Реквизиты.ВедениеУчетаВременныхРазницБалансовымМетодом Тогда
			
			Проводка = Движения.Налоговый.Добавить();
			
			Проводка.Период      = Реквизиты.Период;
			Проводка.Организация = Реквизиты.Организация;
			Проводка.Содержание  = СтрокаТаблицы.Содержание;
			
			Проводка.СчетДт	= СтрокаТаблицы.СчетНУ;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура", СтрокаТаблицы.Номенклатура);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Склады",       Реквизиты.Склад);

			
			Проводка.СчетКт = СтрокаТаблицы.СчетЗатратНУ;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтрокаТаблицы.СубконтоЗатратНУ1);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтрокаТаблицы.СубконтоЗатратНУ2);
			
			Проводка.Сумма = СтрокаТаблицы.СуммаПлановая;
			
			ДанныеСчетаБУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
			
			Если ДанныеСчетаБУ.Количественный Тогда
				Проводка.КоличествоДт = СтрокаТаблицы.Количество;
			КонецЕсли;
			
			ПроцедурыНалоговогоУчета.ВидУчетаНУ(Проводка, Реквизиты.ВидУчетаНУ);
			
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
			Проводка, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);
			
		КонецЕсли;	
		
	КонецЦикла;
	
	Движения.Типовой.Записывать = Истина;
	
	Если Реквизиты.НеобходимостьОтраженияВНУ Тогда
		Движения.Налоговый.Записывать = Истина;
	КонецЕсли;
	              	
КонецПроцедуры

// ВЫПУСК ПРОДУКЦИИ, УСЛУГ

Процедура СформироватьДвиженияВыпускПродукцииУслуг(ТаблицаВыпуск, ПрефиксРегистра = "БухгалтерскийУчет",ТаблицаРеквизиты, Движения, Отказ) Экспорт
	

	Если ТаблицаВыпуск = Неопределено ИЛИ ТаблицаВыпуск.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизиты[0];

	Если ПрефиксРегистра = "НалоговыйУчет"  И  НЕ (Реквизиты.НеобходимостьОтраженияВНУ И Реквизиты.ВедениеУчетаВременныхРазницБалансовымМетодом)  Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияБКВызовСервера.ДобавитьКолонкуВТаблицуЗначений(ТаблицаВыпуск, "СтруктурноеПодразделение",Реквизиты.СтруктурноеПодразделение);
	ОбщегоНазначенияБКВызовСервера.ДобавитьКолонкуВТаблицуЗначений(ТаблицаВыпуск, "Организация"			,Реквизиты.Организация);
	ОбщегоНазначенияБКВызовСервера.ДобавитьКолонкуВТаблицуЗначений(ТаблицаВыпуск, "Период"				,Реквизиты.Период);
	
	Если ПрефиксРегистра = "НалоговыйУчет" Тогда
		ОбщегоНазначенияБКВызовСервера.ДобавитьКолонкуВТаблицуЗначений(ТаблицаВыпуск, "ВидУчета"	,Реквизиты.ВидУчетаНУ);
	КонецЕсли;
	
	ДвиженияРегистра = Движения["ВыпускПродукцииУслуг"+ПрефиксРегистра].Выгрузить();
	
	Если ДвиженияРегистра.Количество() > 0 Тогда
		ОбщегоНазначенияБКВызовСервера.ЗагрузитьВТаблицуЗначений(ДвиженияРегистра,ТаблицаВыпуск);
	КонецЕсли;
	
	Движения["ВыпускПродукцииУслуг"+ПрефиксРегистра].Загрузить(ТаблицаВыпуск);

	Движения["ВыпускПродукцииУслуг"+ПрефиксРегистра].Записывать = Истина;
	
КонецПроцедуры

// ВЫПУСК ВОЗВРАТНЫХ ОТХОДОВ

Процедура СформироватьДвиженияВыпускОтходов(ТаблицаОтходы, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыВыпускОтходов(ТаблицаОтходы, ТаблицаРеквизиты);

	Если Параметры.Реквизиты.Количество() = 0
		ИЛИ Параметры.ТаблицаОтходы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Реквизиты = Параметры.Реквизиты[0];

	Для Каждого СтрокаТаблицы Из Параметры.ТаблицаОтходы Цикл
		
		Проводка = Движения.Типовой.Добавить();
		
		Проводка.Период 		= Реквизиты.Период;
		Проводка.Организация 	= Реквизиты.Организация;
		Проводка.Содержание 	= НСтр("ru = 'Выпуск возвратных отходов'", ОбщегоНазначения.КодОсновногоЯзыка());
		
		Проводка.СчетКт = СтрокаТаблицы.СчетУчетаБУ;
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Номенклатура", СтрокаТаблицы.Номенклатура);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Склады", СтрокаТаблицы.Склад);
		
		Если СтрокаТаблицы.ВедетсяПартионныйУчет Тогда
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Партии", Реквизиты.Регистратор);
		КонецЕсли;
		
		Проводка.КоличествоКт = - СтрокаТаблицы.Количество;
		
		Проводка.СчетДт = СтрокаТаблицы.СчетЗатратБУ;
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Подразделения", СтрокаТаблицы.ПодразделениеОрганизации);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НоменклатурныеГруппы", СтрокаТаблицы.НоменклатурнаяГруппа);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтатьиЗатрат", СтрокаТаблицы.СтатьяЗатрат);
			
		Проводка.Сумма = - СтрокаТаблицы.Сумма;
		
		ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
		Проводка, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);
		
		// поводки по налоговому учету
		Если Реквизиты.НеобходимостьОтраженияВНУ Тогда
			
			Проводка = Движения.Налоговый.Добавить();
			
			Проводка.Период 		= Реквизиты.Период;
			Проводка.Организация 	= Реквизиты.Организация;
			Проводка.Содержание 	= НСтр("ru = 'Выпуск возвратных отходов'", ОбщегоНазначения.КодОсновногоЯзыка());
	
			Проводка.СчетКт = СтрокаТаблицы.СчетУчетаНУ;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Номенклатура", СтрокаТаблицы.Номенклатура);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Склады", СтрокаТаблицы.Склад);
			
			Проводка.КоличествоКт = - СтрокаТаблицы.Количество;
			
			Проводка.СчетДт = СтрокаТаблицы.СчетЗатратНУ;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Подразделения", СтрокаТаблицы.ПодразделениеОрганизации);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НоменклатурныеГруппы", СтрокаТаблицы.НоменклатурнаяГруппа);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтатьиЗатрат", СтрокаТаблицы.СтатьяЗатрат);
			
			Проводка.Сумма = - СтрокаТаблицы.Сумма;
			
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
			Проводка, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);
			
			ПроцедурыНалоговогоУчета.ВидУчетаНУ(Проводка, Реквизиты.ВидУчетаНУ);
			
		КонецЕсли;	
		
	КонецЦикла;
	
	Движения.Типовой.Записывать = Истина;
	
	Если Реквизиты.НеобходимостьОтраженияВНУ Тогда
		Движения.Налоговый.Записывать = Истина;
	КонецЕсли;
	
КонецПроцедуры


// УЧЕТ ПЛАНОВОЙ СТОИМОСТИ ВЫПУЩЕННЫХ УСЛУГ ПО ПЕРЕРАБОТКЕ

Процедура СформироватьДвиженияПлановаяСтоимостьУслугПоПереработке(ТаблицаУслуги, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыПлановаяСтоимостьУслугПоПереработке(ТаблицаУслуги, ТаблицаРеквизиты);

	Если Параметры.ТаблицаУслуги.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Реквизиты = Параметры.Реквизиты[0];

	Для Каждого СтрокаТаблицы Из Параметры.ТаблицаУслуги Цикл
	
		Проводка = Движения.Типовой.Добавить();
		
		Проводка.Период      = Реквизиты.Период;
		Проводка.Организация = Реквизиты.Организация;
		Проводка.Содержание  = СтрокаТаблицы.Содержание;
		Проводка.Сумма       = СтрокаТаблицы.Сумма;
		
		Проводка.СчетДт	= СтрокаТаблицы.СчетСписанияСебестоимостиБУ;
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаТаблицы.СубконтоСписанияСебестоимостиБУ1);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаТаблицы.СубконтоСписанияСебестоимостиБУ2);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтрокаТаблицы.СубконтоСписанияСебестоимостиБУ3);
		
		Проводка.СчетКт = СтрокаТаблицы.СчетЗатратБУ;
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Номенклатура", СтрокаТаблицы.Номенклатура);

		СвойстваСчетаКт = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
		
		Если СвойстваСчетаКт.Количественный Тогда
			Проводка.КоличествоКт = СтрокаТаблицы.Количество;
		КонецЕсли;
		
		ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
			Проводка, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);
		
		// поводки по налоговому учету
		Если Реквизиты.НеобходимостьОтраженияВНУ И Реквизиты.ВедениеУчетаВременныхРазницБалансовымМетодом Тогда
			
			Проводка = Движения.Налоговый.Добавить();
			
			Проводка.Период      = Реквизиты.Период;
			Проводка.Организация = Реквизиты.Организация;
			Проводка.Содержание  = СтрокаТаблицы.Содержание;
			Проводка.Сумма       = СтрокаТаблицы.Сумма;
			
			Проводка.СчетДт = СтрокаТаблицы.СчетСписанияСебестоимостиНУ;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаТаблицы.СубконтоСписанияСебестоимостиНУ1);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаТаблицы.СубконтоСписанияСебестоимостиНУ2);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтрокаТаблицы.СубконтоСписанияСебестоимостиНУ3);

			Проводка.СчетКт = СтрокаТаблицы.СчетЗатратНУ;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Номенклатура", СтрокаТаблицы.Номенклатура);
			
			Проводка.КоличествоКт = СтрокаТаблицы.Количество;
			
			Проводка.Сумма =  СтрокаТаблицы.Сумма;
			
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				Проводка, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);
			
			ПроцедурыНалоговогоУчета.ВидУчетаНУ(Проводка, Реквизиты.ВидУчетаНУ);
			
		КонецЕсли;	
		
	КонецЦикла;
	
	Движения.Типовой.Записывать = Истина;
	
	Если Реквизиты.НеобходимостьОтраженияВНУ Тогда
		Движения.Налоговый.Записывать = Истина;
	КонецЕсли;

КонецПроцедуры

//ДВИЖЕНИЕ НЗП БУ

Процедура СформироватьДвиженияНЗПБУ(ТаблицаНЗПБУ, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыНЗПБУ(ТаблицаНЗПБУ, ТаблицаРеквизиты);
	
	Если Параметры.ТаблицаНЗПБУ.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = Параметры.Реквизиты[0];
	
	Если Реквизиты.ОтражатьВБухгалтерскомУчете Тогда
		
		Для Каждого СтрокаТаблицы Из Параметры.ТаблицаНЗПБУ Цикл
			
			Проводка = Движения.Типовой.Добавить();
			
			Проводка.Период      = Реквизиты.Период;
			Проводка.Организация = Реквизиты.Организация;
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
			Проводка, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);
			Проводка.Сумма       = СтрокаТаблицы.Сумма;
			
			Если Реквизиты.ВидОперации = Перечисления.ВидыОперацийДвиженияНЗП.ОтнесениеНаНЗП Тогда
				СчетДебетаПроводки 	= ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ОпределитьСчетНЗП(СтрокаТаблицы.СчетЗатратБУ);
				СчетКредитаПроводки = СтрокаТаблицы.СчетЗатратБУ;
				СодержаниеПроводки  = НСтр("ru = 'Отнесение затрат на счета НЗП'", ОбщегоНазначения.КодОсновногоЯзыка());
			Иначе
				СчетДебетаПроводки 	= СтрокаТаблицы.СчетЗатратБУ;
				СчетКредитаПроводки = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ОпределитьСчетНЗП(СтрокаТаблицы.СчетЗатратБУ);
				СодержаниеПроводки  = НСтр("ru = 'Возврат НЗП на счета затрат'", ОбщегоНазначения.КодОсновногоЯзыка());
			КонецЕсли;
			
			Проводка.Содержание  = СодержаниеПроводки;
			
			Проводка.ВидРегламентнойОперации  = Перечисления.ВидыРегламентныхОпераций.ПереносНЗПБУ;
			
			Проводка.СчетДт         = СчетДебетаПроводки;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Подразделения", 			Реквизиты.ПодразделениеОрганизации);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НоменклатурныеГруппы", 	СтрокаТаблицы.НоменклатурнаяГруппа);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтатьиЗатрат", 			СтрокаТаблицы.СтатьяЗатрат);
			
			Проводка.СчетКт         = СчетКредитаПроводки;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Подразделения", 			Реквизиты.ПодразделениеОрганизации);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "НоменклатурныеГруппы", 	СтрокаТаблицы.НоменклатурнаяГруппа);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтатьиЗатрат", 			СтрокаТаблицы.СтатьяЗатрат);
			
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
			Проводка, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);
			
			
		КонецЦикла;
	КонецЕсли;
	
	Движения.Типовой.Записывать = Истина;
	
КонецПроцедуры

//ДВИЖЕНИЕ НЗП НУ

Процедура СформироватьДвиженияНЗПНУ(ТаблицаНЗПНУ, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыНЗПНУ(ТаблицаНЗПНУ, ТаблицаРеквизиты);
	
	Если Параметры.ТаблицаНЗПНУ.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = Параметры.Реквизиты[0];
	
	Если Реквизиты.НеобходимостьОтраженияВНУ Тогда
		
		Для Каждого СтрокаТаблицы Из Параметры.ТаблицаНЗПНУ Цикл
			
			Проводка = Движения.Налоговый.Добавить();
			
			Проводка.Период      = Реквизиты.Период;
			Проводка.Организация = Реквизиты.Организация;
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
			Проводка, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);
			Проводка.Сумма       = СтрокаТаблицы.Сумма;
			
			Если Реквизиты.ВидОперации = Перечисления.ВидыОперацийДвиженияНЗП.ОтнесениеНаНЗП Тогда
				СчетДебетаПроводки 	= ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ОпределитьСчетНЗП(СтрокаТаблицы.СчетЗатратНУ, "НУ");
				СчетКредитаПроводки = СтрокаТаблицы.СчетЗатратНУ;
				СодержаниеПроводки  = НСтр("ru = 'Отнесение затрат на счета НЗП'", ОбщегоНазначения.КодОсновногоЯзыка());
			Иначе
				СчетДебетаПроводки 	= СтрокаТаблицы.СчетЗатратНУ;
				СчетКредитаПроводки = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ОпределитьСчетНЗП(СтрокаТаблицы.СчетЗатратНУ, "НУ");
				СодержаниеПроводки  = НСтр("ru = 'Возврат НЗП на счета затрат'", ОбщегоНазначения.КодОсновногоЯзыка());
			КонецЕсли;
			
			Проводка.Содержание  = СодержаниеПроводки;
			
			Проводка.ВидРегламентнойОперации  = Перечисления.ВидыРегламентныхОпераций.ПереносНЗПБУ;
			
			Проводка.СчетДт         = СчетДебетаПроводки;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Подразделения", 			Реквизиты.ПодразделениеОрганизации);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НоменклатурныеГруппы", 	СтрокаТаблицы.НоменклатурнаяГруппа);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтатьиЗатрат", 			СтрокаТаблицы.СтатьяЗатрат);
			
			Проводка.СчетКт         = СчетКредитаПроводки;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Подразделения", 			Реквизиты.ПодразделениеОрганизации);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "НоменклатурныеГруппы", 	СтрокаТаблицы.НоменклатурнаяГруппа);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтатьиЗатрат", 			СтрокаТаблицы.СтатьяЗатрат);
			
			ПроцедурыНалоговогоУчета.ВидУчетаНУ(Проводка, СтрокаТаблицы.ВидУчетаНУ, Ложь, Ложь);
			
		КонецЦикла;
	КонецЕсли;
	
	Движения.Налоговый.Записывать = Истина;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ


// УЧЕТ ПЛАНОВОЙ СТОИМОСТИ ВЫПУЩЕННЫХ ТОВАРОВ УСЛУГ

Функция ПодготовитьПараметрыПлановаяСтоимостьВыпущенныхУслуг(ТаблицаУслуги, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаУслуги

	СписокОбязательныхКолонок = ""
	+ "Номенклатура,"               		// <СправочникСсылка.Номенклатура> - номенклатура оказанных услуг
	+ "СчетЗатратБУ,"                 		// <ПланСчетовСсылка.Типовой> - счет учета затрат на выпуск услуг
	+ "СубконтоЗатратБУ1,"        			// <Ссылка на справочник подразделений> - производственное подразделение, оказавшее услуги
	+ "СубконтоЗатратБУ2," 					// <СправочникСсылка.НомеклатурныеГруппы> - номеклатурная группа оказанных услуг
	+ "СчетЗатратНУ,"                   	// <ПланСчетовСсылка.Типовой> - счет учета затрат на выпуск услуг
	+ "СубконтоЗатратНУ1,"        			// <Ссылка на справочник подразделений> - производственное подразделение, оказавшее услуги
	+ "СубконтоЗатратНУ2," 					// <СправочникСсылка.НомеклатурныеГруппы> - номеклатурная группа оказанных услуг
	+ "СчетБУ,"        						// <ПланСчетовСсылка.Типовой> - счет списания плановой стоимости услуг
	+ "СубконтоБУ1,"   						// <Ссылка на справочник подразделений> - подразделение, для списания плановой стоимости услуг
	+ "СубконтоБУ2,"   						// <Число/Строка/ПланВидовХарактеристикСсылка.Типовой> - вид субконто счета списания
	+ "СубконтоБУ3,"   						// <Число/Строка/ПланВидовХарактеристикСсылка.Типовой> - вид субконто счета списания
	+ "СчетНУ,"       						// <ПланСчетовСсылка.Типовой> - счет списания плановой стоимости услуг
	+ "СубконтоНУ1,"  						// <Ссылка на справочник подразделений> - подразделение, для списания плановой стоимости услуг
	+ "СубконтоНУ2,"   						// <Число/Строка/ПланВидовХарактеристикСсылка.Типовой> - вид субконто счета списания
	+ "СубконтоНУ3,"   						// <Число/Строка/ПланВидовХарактеристикСсылка.Типовой> - вид субконто счета списания
	+ "Количество,"               		    // <Число,15,3> - объем оказанных услуг, выраженный в количественном выражении
	+ "СуммаПлановая,"              		// <Число,15,2> - плановая стоимость оказанных услуг
	+ "ВедетсяПартионныйУчет,"             	// <Булево> - признак ведения на счете партионного учета
	+ "Содержание";              			// <Число,15,2> - плановая стоимость оказанных услуг


	Параметры.Вставить("ТаблицаУслуги", ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаУслуги, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                     					 // <Дата> - период движений - дата документа
	+ "Организация,"              						// <СправочникСсылка.Организации>
	+ "СтруктурноеПодразделение,"   					// <СправочникСсылка.Организации>
	+ "ВидУчетаНУ,"   									// <СправочникСсылка.ВидыУчетаНУ>
	+ "НеобходимостьОтраженияВНУ,"  				   	// <Булево> - необходимость отражения в НУ
	+ "ВедениеУчетаВременныхРазницБалансовымМетодом";  	// <Булево> - признак учета ВР балансовым методом
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Функция ПодготовитьПараметрыПлановаяСтоимостьВыпущенныхТоваров(ТаблицаТовары, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаУслуги

	СписокОбязательныхКолонок = ""
	+ "Номенклатура,"               		// <СправочникСсылка.Номенклатура> - номенклатура оказанных услуг
	+ "СчетЗатратБУ,"                 		// <ПланСчетовСсылка.Типовой> - счет учета затрат на выпуск услуг
	+ "СубконтоЗатратБУ1,"        			// <Ссылка на справочник подразделений> - производственное подразделение, оказавшее услуги
	+ "СубконтоЗатратБУ2," 					// <СправочникСсылка.НомеклатурныеГруппы> - номеклатурная группа оказанных услуг
	+ "СчетЗатратНУ,"                   	// <ПланСчетовСсылка.Типовой> - счет учета затрат на выпуск услуг
	+ "СубконтоЗатратНУ1,"        			// <Ссылка на справочник подразделений> - производственное подразделение, оказавшее услуги
	+ "СубконтоЗатратНУ2," 					// <СправочникСсылка.НомеклатурныеГруппы> - номеклатурная группа оказанных услуг
	+ "СчетБУ,"        						// <ПланСчетовСсылка.Типовой> - счет списания плановой стоимости услуг
	+ "СчетНУ,"       						// <ПланСчетовСсылка.Типовой> - счет списания плановой стоимости услуг
	+ "Количество,"               		    // <Число,15,3> - объем оказанных услуг, выраженный в количественном выражении
	+ "СуммаПлановая,"              		// <Число,15,2> - плановая стоимость оказанных услуг
	+ "ВедетсяПартионныйУчет,"             	// <Булево> - признак ведения на счете партионного учета
	+ "Содержание";              			// <Число,15,2> - плановая стоимость оказанных услуг


	Параметры.Вставить("ТаблицаТовары", ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаТовары, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                     					// <Дата> - период движений - дата документа
	+ "Организация,"              						// <СправочникСсылка.Организации>
	+ "Регистратор,"              						// <СправочникСсылка.Организации>
	+ "Склад,"              						    // <СправочникСсылка.Организации>
	+ "СтруктурноеПодразделение,"   					// <СправочникСсылка.Организации>
	+ "ВидУчетаНУ,"   									// <СправочникСсылка.ВидыУчетаНУ>
	+ "НеобходимостьОтраженияВНУ,"  				   	// <Булево> - необходимость отражения в НУ
	+ "ВедениеУчетаВременныхРазницБалансовымМетодом";  	// <Булево> - признак учета ВР балансовым методом
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции


// ВЫПУСК ВОЗВРАТНЫХ ОТХОДОВ

Функция ПодготовитьПараметрыВыпускОтходов(ТаблицаОтходы, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаОтходы

	СписокОбязательныхКолонок = ""
	+ "Номенклатура,"               // <СправочникСсылка.Номенклатура> - номенклатура выпущенных возвратных отходов
	+ "СчетЗатратБУ,"               // <ПланСчетовСсылка.Типовой> - счет учета затрат на выпуск продукции
	+ "ПодразделениеОрганизации,"   // <Ссылка на справочник подразделений> - подразделение, выпустившее продукцию
	+ "СчетЗатратНУ,"               // <ПланСчетовСсылка.Налоговый> - счет учета затрат на выпуск продукции
	+ "НоменклатурнаяГруппа," 		// <СправочникСсылка.НомеклатурныеГруппы> - номеклатурная группа выпущенной продукции
	+ "СтатьяЗатрат,"               // <СправочникСсылка.СтатьяЗатрат> - статья учета затрат на выпуск продукции
	+ "СчетУчетаБУ,"                // <ПланСчетовСсылка.Типовой> - счет учета возвратных отходов
	+ "СчетУчетаНУ,"                // <ПланСчетовСсылка.Налоговый> - счет учета возвратных отходов
	+ "Склад,"                      // <СправочникСсылка.Склады> - склад, на который поступают отходы
	+ "Количество,"                 // <Число,15,3> - количество выпущенных возвратных отходов
	+ "ВедетсяПартионныйУчет,"      // <Булево> - признак ведения на счете партионного учета
	+ "Сумма";                      // <Число,15,2> - себестоимость выпущенных возвратных отходов

	Параметры.Вставить("ТаблицаОтходы", ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаОтходы, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Регистратор,"                // <ДокументСсылка.*> - документ-регистратор движений
	+ "Период,"                     // <Дата> - период движений - дата документа
	+ "Организация,"                // <СправочникСсылка.Организации>
	+ "СтруктурноеПодразделение,"   // <СправочникСсылка.Организации>
	+ "ВидУчетаНУ,"   				// <СправочникСсылка.ВидыУчетаНУ>
	+ "НеобходимостьОтраженияВНУ";  // <Булево> - необходимость отражения в НУ
	
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

// УЧЕТ ПЛАНОВОЙ СТОИМОСТИ ВЫПУЩЕННЫХ УСЛУГ ПО ПЕРЕРАБОТКЕ

Функция ПодготовитьПараметрыПлановаяСтоимостьУслугПоПереработке(ТаблицаУслуги, ТаблицаРеквизиты)
	
	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаУслуги

	СписокОбязательныхКолонок = ""
	
	+ "Номенклатура,"               	// <СправочникСсылка.Номенклатура> - номенклатура оказанных услуг
	+ "СчетЗатратБУ,"               	// <ПланСчетовСсылка.Типовой> - счет учета затрат на выпуск услуг
	+ "СчетЗатратНУ,"               	// <ПланСчетовСсылка.Налоговый> - счет учета затрат на выпуск услуг
	+ "СчетСписанияСебестоимостиБУ,"	// <ПланСчетовСсылка.Типовой> - счет учета расходов
	+ "СубконтоСписанияСебестоимостиБУ1,"// Характеристика.ВидыСубконтоТиповые> - счет учета расходов
	+ "СубконтоСписанияСебестоимостиБУ2,"// Характеристика.ВидыСубконтоТиповые> - счет учета расходов
	+ "СубконтоСписанияСебестоимостиБУ3,"// Характеристика.ВидыСубконтоТиповые> - счет учета расходов
	+ "СчетСписанияСебестоимостиНУ,"	// <ПланСчетовСсылка.Налоговый> - счет учета расходов
	+ "СубконтоСписанияСебестоимостиНУ1,"// Характеристика.ВидыСубконтоТиповые> - счет учета расходов
	+ "СубконтоСписанияСебестоимостиНУ2,"// Характеристика.ВидыСубконтоТиповые> - счет учета расходов
	+ "СубконтоСписанияСебестоимостиНУ3,"// Характеристика.ВидыСубконтоТиповые> - счет учета расходов
	+ "Количество,"                 // <Число,15,3> - объем оказанных услуг в количественном выражении
	+ "Сумма,"                      // <Число,15,2> - плановая стоимость оказанных услуг
	+ "Содержание";                 // <Строка,150> - содержание проводки

	Параметры.Вставить("ТаблицаУслуги", ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаУслуги, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	
	+ "Период,"                     // <Дата> - период движений - дата документа
	+ "Организация,"                // <СправочникСсылка.Организации>
	+ "СтруктурноеПодразделение,"   // <СправочникСсылка.Организации>
	+ "ВидУчетаНУ,"   				// <СправочникСсылка.ВидыУчетаНУ>
	+ "НеобходимостьОтраженияВНУ,"  // <Булево> - необходимость отражения в НУ
	+ "ВедениеУчетаВременныхРазницБалансовымМетодом";  // <Булево> - ведение ВР балансовым методом
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

//ДВИЖЕНИЕ НЗП БУ

Функция ПодготовитьПараметрыНЗПБУ(ТаблицаНЗП, ТаблицаРеквизиты)
	
	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаУслуги

	СписокОбязательныхКолонок = ""
	
	+ "СчетЗатратБУ,"           // <ПланСчетовСсылка.Типовой> - счет учета затрат на выпуск услуг
	+ "НоменклатурнаяГруппа,"	// <СправочникСсылка.НоменклатурныеГруппы> - номенклатурная группа затрат
	+ "СтатьяЗатрат,"			// <СправочникСсылка.СтатьяЗатрат> - статья затрат
	+ "Сумма";                 	// <Число,15,2> - сумма НЗП

	Параметры.Вставить("ТаблицаНЗПБУ", ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаНЗП, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	
	+ "Период,"                     // <Дата> - период движений - дата документа
	+ "Организация,"                // <СправочникСсылка.Организации>
	+ "СтруктурноеПодразделение,"   // <СправочникСсылка.Организации>
	+ "ПодразделениеОрганизации,"   // <СправочникСсылка.ПодразделенияОрганизаций>
	+ "ВидОперации,"   				// <ПеречислениеСсылка.ВидыОперацийДвиженияНЗП>
	+ "ОтражатьВБухгалтерскомУчете";// <Булево> - признак отражения документа в бухгалтерском учете


	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

//ДВИЖЕНИЕ НЗП НУ

Функция ПодготовитьПараметрыНЗПНУ(ТаблицаНЗП, ТаблицаРеквизиты)
	
	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаУслуги

	СписокОбязательныхКолонок = ""
	
	+ "СчетЗатратНУ,"           // <ПланСчетовСсылка.Типовой> - счет учета затрат на выпуск услуг
	+ "НоменклатурнаяГруппа,"	// <СправочникСсылка.НоменклатурныеГруппы> - номенклатурная группа затрат
	+ "СтатьяЗатрат,"			// <СправочникСсылка.СтатьяЗатрат> - статья затрат
	+ "ВидУчетаНУ,"   				// <СправочникСсылка.ВидыУчетаНУ>
	+ "Сумма";               	// <Число,15,2> - сумма НЗП

	Параметры.Вставить("ТаблицаНЗПНУ", ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаНЗП, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	
	+ "Период,"                     // <Дата> - период движений - дата документа
	+ "Организация,"                // <СправочникСсылка.Организации>
	+ "СтруктурноеПодразделение,"   // <СправочникСсылка.Организации>
	+ "ПодразделениеОрганизации,"   // <СправочникСсылка.ПодразделенияОрганизаций>
	+ "ВидОперации,"   				// <ПеречислениеСсылка.ВидыОперацийДвиженияНЗП>
	+ "НеобходимостьОтраженияВНУ";// <Булево> - признак отражения документа в налоговом учете


	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

// СЧЕТА УЧЕТА В ДОКУМЕНТАХ 

Процедура ОграничитьВыборСчетамиПроизводственныхРасходов(ЭлементФормы, ИмяПланаСчетов = "Типовой") Экспорт
	
	СчетаРасходов = Новый Массив();
	УсловияОтбора = ПроцедурыБухгалтерскогоУчета.НовыеУсловияОтбораСубсчетов();
	УсловияОтбора.ИспользоватьВПроводках = Истина; // Исключить запрещенные для использования в проводках
	УсловияОтбора.Валютный               = Неопределено; // Не важно, валютные или нет
	
	Если ИмяПланаСчетов = "Типовой" Тогда
		СчетаРасходов.Добавить(ПланыСчетов.Типовой.ОсновноеПроизводство_);
		СчетаРасходов.Добавить(ПланыСчетов.Типовой.ВспомогательныеПроизводства_);
		СчетаРасходов.Добавить(ПланыСчетов.Типовой.ПолуфабрикатыСобственногоПроизводства_);
		СчетаРасходов.Добавить(ПланыСчетов.Типовой.НакладныеРасходы_);
		Исключения = Новый Массив;
		Исключения.Добавить(ПланыСчетов.Типовой.ПроизводствоИзДавальческогоСырья);
		УсловияОтбора.СчетаИсключения = Исключения;		
		УсловияОтбора.Забалансовый           = Ложь;   // Исключить забалансовые
	Иначе
		СчетаРасходов.Добавить(ПланыСчетов.Налоговый.ОсновноеПроизводство_);
		СчетаРасходов.Добавить(ПланыСчетов.Налоговый.ВспомогательныеПроизводства);
		СчетаРасходов.Добавить(ПланыСчетов.Налоговый.НакладныеРасходы);
		СчетаРасходов.Добавить(ПланыСчетов.Налоговый.ПолуфабрикатыСобственногоПроизводства);
		Исключения = Новый Массив;
		Исключения.Добавить(ПланыСчетов.Налоговый.ПроизводствоИзДавальческогоСырья);
		УсловияОтбора.СчетаИсключения = Исключения;		
	КонецЕсли;	
		
	СчетаДляОтбора = ПроцедурыБухгалтерскогоУчета.СформироватьМассивСубсчетовПоОтбору(СчетаРасходов, УсловияОтбора, ИмяПланаСчетов);
		
	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ИзменитьПараметрыВыбораСчета(ЭлементФормы, СчетаДляОтбора);
	
КонецПроцедуры

Процедура ОграничитьВыборСчетамиНакладныхРасходов(ЭлементФормы, ИмяПланаСчетов = "Типовой") Экспорт
	
	СчетаРасходов = Новый Массив();
	УсловияОтбора = ПроцедурыБухгалтерскогоУчета.НовыеУсловияОтбораСубсчетов();
	УсловияОтбора.ИспользоватьВПроводках = Истина; // Исключить запрещенные для использования в проводках
	УсловияОтбора.Валютный               = Неопределено; // Не важно, валютные или нет
	
	Если ИмяПланаСчетов = "Типовой" Тогда
		СчетаРасходов.Добавить(ПланыСчетов.Типовой.НакладныеРасходы_);
		УсловияОтбора.Забалансовый           = Ложь;   // Исключить забалансовые
	Иначе
		СчетаРасходов.Добавить(ПланыСчетов.Налоговый.НакладныеРасходы);
	КонецЕсли;	
		
	СчетаДляОтбора = ПроцедурыБухгалтерскогоУчета.СформироватьМассивСубсчетовПоОтбору(СчетаРасходов, УсловияОтбора, ИмяПланаСчетов);
		
	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ИзменитьПараметрыВыбораСчета(ЭлементФормы, СчетаДляОтбора);
	
КонецПроцедуры


