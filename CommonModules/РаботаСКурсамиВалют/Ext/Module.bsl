////////////////////////////////////////////////////////////////////////////////
// Подсистема "Валюты"
// 
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Загружает курсы валют из Интернета и записывает их в регистр сведений КурсыВалют
//
// Параметры:
//  МассивВалютДляЗагрузкиКуров - Массив - Содержит ссылки на валюты, для которых будут загружены курсы
//  НачалоПериодаЗагрузки - Дата - Дата, начиная с которой будут загружены курсы
//  КонецПериодаЗагрузки - Дата - Дата, по которую будут загружены курсы
//
// Возвращаемое значение:
//  Структура
//     |- ВсеКурсыУспешноЗагружены - Булево - Истина - если все курсы были успешно загружены
//     |                                      Ложь - если хотя бы один курс не удалось загрузить
//     |- Ошибки - Массив - Содержит описание всех ошибок.
//
Функция ЗагрузитьКурсыИзИнтернета(Знач МассивВалютДляЗагрузкиКуров, Знач НачалоПериодаЗагрузки, Знач КонецПериодаЗагрузки) Экспорт
	
	НачатьТранзакцию();
	
	// Массив содержит даты на которые не удалось загрузить файлы курсов
	ОшибкиЗагрузкиФайловКурсов = Новый Массив();
	
	// Массив содержит даты на которые не удалось разобрать загруженные файлы курсов
	ОшибкиРазбораФайловКурсов = Новый Массив();
	
	// Таблица содержит валюты, курсы которых отсутствовали в загруженных файлах курсов
	ТабЗначВалютыБезКурсов = Новый ТаблицаЗначений();
	ТабЗначВалютыБезКурсов.Колонки.Добавить("Дата");
	ТабЗначВалютыБезКурсов.Колонки.Добавить("Валюта");
	МассивВалютыБезКурса = Новый Массив();
	
	ДатаЗагрузки = НачалоДня(НачалоПериодаЗагрузки);
	КонецПериодаЗагрузки = НачалоДня(КонецПериодаЗагрузки);
	
	Пока ДатаЗагрузки <= КонецПериодаЗагрузки Цикл
		
		URLФайлаКурсовВалют = СформироватьURLФайлаКурсовВалют(ДатаЗагрузки);
		
		ФайлУспешноЗагружен = Неопределено; 
		ПолноеИмяФайла = Неопределено; 
		
		ЗагрузитьФайлКурсовВалют(
			URLФайлаКурсовВалют,
			ДатаЗагрузки, 
			ФайлУспешноЗагружен, 
			ПолноеИмяФайла);
		
		Если ФайлУспешноЗагружен Тогда		
				
			ТабЗначКурсыВалют = СоздатьТаблицуЗначенийИзФайлаКурсовВалют(ПолноеИмяФайла);
			
			Если ЗначениеЗаполнено(ТабЗначКурсыВалют) Тогда
				
				МассивВалютыБезКурса.Очистить();				
				
				ЗаписатьКурсыВРегистрКурсыВалют(
					МассивВалютДляЗагрузкиКуров, 
					ДатаЗагрузки, 
					ТабЗначКурсыВалют,
					МассивВалютыБезКурса);
					
				Для Каждого ВалютаБезКурса Из МассивВалютыБезКурса Цикл
					СтрокаТабЗначВалютыБезКурса = ТабЗначВалютыБезКурсов.Добавить();
					СтрокаТабЗначВалютыБезКурса.Дата = ДатаЗагрузки;
					СтрокаТабЗначВалютыБезКурса.Валюта = ВалютаБезКурса;
				КонецЦикла;
					
			Иначе	
				ОшибкиРазбораФайловКурсов.Добавить(ДатаЗагрузки);
			КонецЕсли;	
			
		Иначе
			ОшибкиЗагрузкиФайловКурсов.Добавить(ДатаЗагрузки);	
		КонецЕсли;
		
		ДатаЗагрузки = ДатаЗагрузки + 86400;	
		
	КонецЦикла;
		
	Если ОшибкиЗагрузкиФайловКурсов.Количество() = 0
	   И ОшибкиРазбораФайловКурсов.Количество() = 0
	   И ТабЗначВалютыБезКурсов.Количество() = 0 Тогда
		ВсеКурсыУспешноЗагружены = Истина;
	Иначе
		ВсеКурсыУспешноЗагружены = Ложь;	
	КонецЕсли;
	
	Ошибки = СформироватьСообщенияОбОшибкахЗагрузкиКурсовИзИнтернета(
		ОшибкиЗагрузкиФайловКурсов, 
		ОшибкиРазбораФайловКурсов, 
		ТабЗначВалютыБезКурсов);
	
	Результат = Новый Структура();	
	Результат.Вставить("ВсеКурсыУспешноЗагружены", ВсеКурсыУспешноЗагружены);
	Результат.Вставить("Ошибки", Ошибки);
	
	Если ВсеКурсыУспешноЗагружены Тогда
		ЗафиксироватьТранзакцию();
	Иначе
		ОтменитьТранзакцию();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Загружает курсы валют из файлов и записывает их в регистр сведений КурсыВалют
//
// Параметры:
//  МассивВалют - Массив - Содержит ссылки на валюты, для которых будут загружены курсы
//  МассивАдресовФайлов - Массив - Содержит файлы, из которых необходимо загрузить курсы.
//                        Каждый элемент массива имеет тип "ОписаниеПередаваемогоФайла". // Элвис. Разберись.
//
// Возвращаемое значение:
//  Структура
//     |- ВсеКурсыУспешноЗагружены - Булево - Истина - если все курсы были успешно загружены.
//     |                                      Ложь - если хотя бы один курс не удалось загрузить.
//     |- Ошибки - Соответствие - Содержит описание всех ошибок. // Элвис. Разберись.
//
Функция ЗагрузитьКурсыИзФайлов(Знач МассивВалют, Знач МассивАдресовФайлов) Экспорт
	
	НачатьТранзакцию();
	
	// Массив содержит даты на которые не удалось разобрать загруженные файлы курсов
	ОшибкиРазбораФайловКурсов = Новый Массив();

	// Таблица содержит валюты, курсы которых отсутствовали в загруженных файлах курсов
	ТабЗначВалютыБезКурса = Новый ТаблицаЗначений();
	ТабЗначВалютыБезКурса.Колонки.Добавить("Файл");
	ТабЗначВалютыБезКурса.Колонки.Добавить("Валюта");
	МассивВалютыБезКурса = Новый Массив();
	
	Для Каждого Файл Из МассивАдресовФайлов Цикл
		
		ПолноеИмяФайла = ПолучитьПолноеИмяФайла(Файл.Хранение);
		ДатаКурса = ПолучитьДатуИзФайлаКурсовВалют(ПолноеИмяФайла);
		
		Если ЗначениеЗаполнено(ДатаКурса) Тогда
			
			ТабЗначКурсыВалют = СоздатьТаблицуЗначенийИзФайлаКурсовВалют(ПолноеИмяФайла);
			
			Если ЗначениеЗаполнено(ТабЗначКурсыВалют) Тогда
				
				МассивВалютыБезКурса.Очистить();
				
				ЗаписатьКурсыВРегистрКурсыВалют(
					МассивВалют, 
					ДатаКурса, 
					ТабЗначКурсыВалют,
					МассивВалютыБезКурса);
					
				Для Каждого ВалютаБезКурса Из МассивВалютыБезКурса Цикл
					СтрокаТабЗначВалютыБезКурса = ТабЗначВалютыБезКурса.Добавить();
					СтрокаТабЗначВалютыБезКурса.Файл = Файл;
					СтрокаТабЗначВалютыБезКурса.Валюта = ВалютаБезКурса;
				КонецЦикла;
					
			Иначе
				ОшибкиРазбораФайловКурсов.Добавить(Файл);	
			КонецЕсли;
			
		Иначе
			ОшибкиРазбораФайловКурсов.Добавить(Файл);	
		КонецЕсли;
		
		УдалитьФайлы(ПолноеИмяФайла);
		
	КонецЦикла;
	
	Если ОшибкиРазбораФайловКурсов.Количество() = 0 И ТабЗначВалютыБезКурса.Количество() = 0 Тогда
		ВсеКурсыУспешноЗагружены = Истина;
	Иначе
		ВсеКурсыУспешноЗагружены = Ложь;	
	КонецЕсли;
	
	Ошибки = СформироватьСообщенияОбОшибкахЗагрузкиКурсовИзФайлов(ОшибкиРазбораФайловКурсов, ТабЗначВалютыБезКурса);
	
	Результат = Новый Структура();	
	Результат.Вставить("ВсеКурсыУспешноЗагружены", ВсеКурсыУспешноЗагружены);
	Результат.Вставить("Ошибки", Ошибки);
	
	Если ВсеКурсыУспешноЗагружены Тогда
		ЗафиксироватьТранзакцию();
	Иначе
		ОтменитьТранзакцию();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает массив валют, у которох установлен флаг ЗагружатьКурсИзИнтернета
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  Массив, каждый элемент массива имеет тип СправочникСсылка.Валюты
//
Функция ПолучитьМассивЗагружаемыхВалют() Экспорт	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Валюты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Валюты КАК Валюты
	|ГДЕ
	|	Валюты.ЗагружатьКурсИзИнтернета = ИСТИНА
	|	И Валюты.ПометкаУдаления = ЛОЖЬ";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Экспортные служебные процедуры и функции

// Получает дату, которая указывается в файле курсов валют
//
// Параметры:
//  ПолноеИмяФайлаКурсовВалют - Строка - Полное имя файла курсов валют
//
// Возвращаемое значение:
//  Дата, если файл корректен и дата найдена
//  Неопределено, если файл не корректен или дата не найдена
//
Функция ПолучитьДатуИзФайлаКурсовВалют(Знач ПолноеИмяФайлаИлиАдресВоВременномХранилище) Экспорт
	
	Перем Дата;
	
	ПолноеИмяФайлаКурсовВалют = ПолучитьПолноеИмяФайла(ПолноеИмяФайлаИлиАдресВоВременномХранилище);
	
	ДокументDOM = ПолучитьDOM(ПолноеИмяФайлаКурсовВалют);
	
	Если ДокументDOM = Неопределено Тогда
		Возврат Неопределено;	
	КонецЕсли;

	Разыменователь = Новый РазыменовательПространствИменDOM("", "");	
	РезультатПоиска = ДокументDOM.ВычислитьВыражениеXPath("/rates/date", ДокументDOM, Разыменователь);	
	УзелДата = РезультатПоиска.ПолучитьСледующий();
	
	Если УзелДата = Неопределено Тогда
		Возврат Неопределено;	
	Иначе
		ДатаТекст = УзелДата.ТекстовоеСодержимое;
		Если СтрДлина(ДатаТекст) = 10 Тогда
			День = Лев(ДатаТекст, 2);
			Месяц = Сред(ДатаТекст, 4, 2);
			Год = Прав(ДатаТекст, 4);
			Попытка 
				Дата = Дата(Год, Месяц, День);
			Исключение
				Возврат Неопределено;	
			КонецПопытки;
		Иначе
			Возврат Неопределено;	
		КонецЕсли;
	КонецЕсли;
	
	Возврат Дата;
	
КонецФункции

// Загружает курсы валют на текущую дату.
// Используется в регламентном задании ЗагрузкаКурсовВалют.
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  Нет.
//
Процедура ЗагрузитьАктуальныеКурсыПоРасписанию() Экспорт
	
	ЗаписьЖурналаРегистрации(
		НСтр("ru = 'Валюты. Загрузка курсов валют.'", ОбщегоНазначения.КодОсновногоЯзыка()),
		УровеньЖурналаРегистрации.Информация,
		Метаданные.РегламентныеЗадания.ЗагрузкаКурсовВалют,
		Неопределено,
		НСтр("ru = 'Начата регламентная загрузка курсов валют.'", ОбщегоНазначения.КодОсновногоЯзыка()));
	
	ТекущаяДата = НачалоДня(ТекущаяДата());
	
	Результат = ЗагрузитьКурсыИзИнтернета(
		ПолучитьМассивЗагружаемыхВалют(),
		ТекущаяДата,
		ТекущаяДата);
		
	ЗаписатьВЖурналРегистрацииРезультатыЗакрузкиКурсовВалютПоРасписанию(Результат);		

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Локальные служебные процедуры и функции

// Создает массив сообщений об ошибках..
//
// Параметры:
//  ОшибкиЗагрузкиФайловКурсов - Массив - Содержит даты на которые не удалось загрузить файлы курсов
//  ОшибкиРазбораФайловКурсов - Массив - Содержит даты на которые не удалось разобрать загруженные файлы курсов
//  ВалютыБезКурсов - ТаблицаЗначений - Содержит валюты, курсы которых отсутствовали в загруженных файлах курсов
//
// Возвращаемое значение:
//  Массив, содержащий тексты сообщений об ошибках
//
Функция СформироватьСообщенияОбОшибкахЗагрузкиКурсовИзИнтернета(
	Знач ОшибкиЗагрузкиФайловКурсов, 
	Знач ОшибкиРазбораФайловКурсов, 
	Знач ВалютыБезКурсов)
	
	СообщенияОбОшибках = Новый Массив();
	
	// Шаг 1. Формирование сообщений о неудачных загрузках файлов курсов
	
	Если ОшибкиЗагрузкиФайловКурсов.Количество() <> 0 Тогда
		
		СтрокаПериодов = СформироватьСтрокуПериодов(ОшибкиЗагрузкиФайловКурсов);
		
		ТекстСообщения = 
		НСтр("ru = 'Не удалось получить курсы валют на: %СтрокаПериодов%.
		|Возможные причины:
		|  Отсутствует соединение с Интернетом;
		|  Некорректные настройки параметров прокси-сервера;
		|  Недоступен сайт НБ РК.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СтрокаПериодов%", СтрокаПериодов);	
		
		СообщенияОбОшибках.Добавить(ТекстСообщения);
		
	КонецЕсли;
	
	// Шаг 2. Формирование сообщений о неудачных разборах файлов курсов
	
	Если ОшибкиРазбораФайловКурсов.Количество() <> 0 Тогда
		
		СтрокаПериодов = СформироватьСтрокуПериодов(ОшибкиРазбораФайловКурсов);
		
		ТекстСообщения = 
		НСтр("ru = 'Не удалось получить курсы валют на: %СтрокаПериодов%.
		|Возможные причины:
		|  На сайте НБ РК не опубликованы курсы на эту дату;
		|  Изменился формат файла курсов валют.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СтрокаПериодов%", СтрокаПериодов);	
		
		СообщенияОбОшибках.Добавить(ТекстСообщения);
		
	КонецЕсли;
	
	// Шаг 3. Формирование сообщений для валют, курсы которых отсутствовали в загруженных файлах курсов
	
	Если ВалютыБезКурсов.Количество() <> 0 Тогда
		
		СгруппированныеВалюты = ВалютыБезКурсов.Скопировать();
		СгруппированныеВалюты.Свернуть("Валюта");
		СгруппированныеВалюты = СгруппированныеВалюты.ВыгрузитьКолонку("Валюта"); 
		
		Для Каждого Валюта Из СгруппированныеВалюты Цикл
			
			Отбор = Новый Структура("Валюта", Валюта);
			ВалютаБезКурсов = ВалютыБезКурсов.Скопировать(Отбор);		
			МассивДат = ВалютаБезКурсов.ВыгрузитьКолонку("Дата");
			
			СтрокаПериодов = СформироватьСтрокуПериодов(МассивДат);
			
			ТекстСообщения = 
			НСтр("ru = 'Не удалось загрузить курс валюты: ""%КодБуквенный%"" на: %СтрокаПериодов%.
			|Возможные причины:
			|  На сайте НБ РК не публикуется курс данной валюты;
			|  На сайте НБ РК данная валюта имеет другой символьный код.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КодБуквенный%", Валюта);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СтрокаПериодов%", СтрокаПериодов);
			
			СообщенияОбОшибках.Добавить(ТекстСообщения);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат СообщенияОбОшибках;
	
КонецФункции

// Создает массив сообщений об ошибках
//
// Параметры:
//  ОшибкиРазбораФайловКурсов - Массив - Содержит даты на которые не удалось разобрать загруженные файлы курсов
//  ТабЗначВалютыБезКурса - ТаблицаЗначений - Содержит валюты, курсы которых отсутствовали в загруженных файлах курсов
//
// Возвращаемое значение:
//  Соответствие, содержащее тексты всех ошибок. Ключ - это файл, Значение - это текст сообщения об ошибке.
//
Функция СформироватьСообщенияОбОшибкахЗагрузкиКурсовИзФайлов(
	Знач ОшибкиРазбораФайловКурсов, 
	Знач ТабЗначВалютыБезКурса)
	
	СообщенияОбОшибках = Новый Соответствие();

	// Шаг 1. Формирование сообщений о неудачных разборах файлов курсов
	
	Для Каждого Файл Из ОшибкиРазбораФайловКурсов Цикл
		ТекстСообщения = 
		НСтр("ru = 'Не удалось загрузить курсы валют из файла:
		|%ИмяФайла%
		|Файл имеет некорректную структуру.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИмяФайла%", Файл.Имя);	
		СообщенияОбОшибках.Вставить(Файл, ТекстСообщения);	
	КонецЦикла;
	
	// Шаг 2. Формирование сообщений для валют, курсы которых отсутствовали в файлах	
	
	Если ТабЗначВалютыБезКурса.Количество() <> 0 Тогда
		
		СгруппированныеФайлы = ТабЗначВалютыБезКурса.Скопировать();
		СгруппированныеФайлы.Свернуть("Файл");
		СгруппированныеФайлы = СгруппированныеФайлы.ВыгрузитьКолонку("Файл"); 
		
		Для Каждого Файл Из СгруппированныеФайлы Цикл
			
			Отбор = Новый Структура("Файл", Файл);
			ТабЗначВалютыФайлаБезКурса = ТабЗначВалютыБезКурса.Скопировать(Отбор);
			МассивВалют = ТабЗначВалютыФайлаБезКурса.ВыгрузитьКолонку("Валюта");
			СписокВалют = "";
			Для Каждого Валюта Из МассивВалют Цикл
				СписокВалют = СписокВалют + """" + Валюта + """" + ", ";	
			КонецЦикла;
			СписокВалют = Лев(СписокВалют, СтрДлина(СписокВалют) - 2); 
			
			ТекстСообщения = 
			НСтр("ru = 'Курс %СписокВалют% отсутствует в файле:
			|%ИмяФайла%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СписокВалют%", СписокВалют);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИмяФайла%", Файл.Имя);
			
			СообщенияОбОшибках.Вставить(Файл, ТекстСообщения);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат СообщенияОбОшибках;
	
КонецФункции

// Формирует строку вида: "01.01.2012 - 05.01.2012, 07.01.2012".
//
// Параметры:
//  МассивДат - Массив - Массив, на основе которого формируется строка.
//
// Возвращаемое значение:
//  Строка
//
Функция СформироватьСтрокуПериодов(Знач МассивДат)
	
	СтрокаПериодов = "";
	
	ТабЗначДаты = Новый ТаблицаЗначений();
	ТабЗначДаты.Колонки.Добавить("Дата");
	
	Для Каждого Дата Из МассивДат Цикл
		СтрокаТабЗначДаты = ТабЗначДаты.Добавить();
		СтрокаТабЗначДаты.Дата = Дата;
	КонецЦикла;
	
	ТабЗначДаты.Свернуть("Дата");
	ТабЗначДаты.Сортировать("Дата Возр");	
		
	ТекущаяДата       = Неопределено;
	ДатаНачалаПериода = Неопределено;
	ДатаКонцаПериода  = Неопределено;
	
	Для Каждого СтрокаТабЗначДаты Из ТабЗначДаты Цикл
		
		ДатаСтроки = СтрокаТабЗначДаты.Дата;
		
		Если ДатаНачалаПериода = Неопределено Тогда
			
			ТекущаяДата       = ДатаСтроки;
			ДатаНачалаПериода = ДатаСтроки;
			ДатаКонцаПериода  = ДатаСтроки;
			
		ИначеЕсли ТекущаяДата + 86400 = ДатаСтроки Тогда
			
			ТекущаяДата      = ДатаСтроки;
			ДатаКонцаПериода = ДатаСтроки;
			
		Иначе
			
			Если ДатаНачалаПериода = ДатаКонцаПериода Тогда
				СтрокаПериодов = СтрокаПериодов + Формат(ДатаНачалаПериода, "ДФ=dd.MM.yyyy") + ", ";	
			Иначе
				СтрокаПериодов = СтрокаПериодов + Формат(ДатаНачалаПериода, "ДФ=dd.MM.yyyy") +  
				                 " - " + Формат(ДатаКонцаПериода, "ДФ=dd.MM.yyyy") + ", ";		
			КонецЕсли;
			
			ТекущаяДата       = ДатаСтроки;
			ДатаНачалаПериода = ДатаСтроки;
			ДатаКонцаПериода  = ДатаСтроки;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ДатаНачалаПериода = ДатаКонцаПериода Тогда
		СтрокаПериодов = СтрокаПериодов + Формат(ДатаНачалаПериода, "ДФ=dd.MM.yyyy") + ", ";	
	Иначе
		СтрокаПериодов = СтрокаПериодов + Формат(ДатаНачалаПериода, "ДФ=dd.MM.yyyy") + 
		                 " - " + Формат(ДатаКонцаПериода, "ДФ=dd.MM.yyyy") + ", ";		
	КонецЕсли;
	
	СтрокаПериодов = Сред(СтрокаПериодов, 1, СтрДлина(СтрокаПериодов) - 2); 	
	             
	Возврат СтрокаПериодов;
	
КонецФункции

// Создает URL, который указывает на файл хранящий курсы валют на указанную дату.
//
// Параметры:
//  Дата - Дата - Дата, на которую необходимо сформировать URL файла курсов валют.
//
// Возвращаемое значение:
//  Строка, URL файла хранящего курсы валют на указанную дату 
//
Функция СформироватьURLФайлаКурсовВалют(Знач Дата)
		
	Перем АдресФайлаКурсовВалют;
	
	АдресФайлаКурсовВалют = "http://www.nationalbank.kz/rss/get_rates.cfm?fdate=%Дата%";
	
	СтрокаДатаЗагрузкиКурса = Формат(Дата, "ДФ=dd.MM.yyyy"); // Дата должна быть в формате 01.11.2012
	
	АдресФайлаКурсовВалют = СтрЗаменить(АдресФайлаКурсовВалют, "%Дата%", СтрокаДатаЗагрузкиКурса);
	
	Возврат АдресФайлаКурсовВалют;
	
КонецФункции

// Загружает файл курсов валют из Интернета.
//
// Параметры:
//  URL - Строка - Входящий параметр. Адрес загружаемого файла на веб-сервере;
//  ДатаДляСообщенияОбОшибке - Дата - Входящий параметр. Дата на которую загружается курс.
//                             Используется для формирования сообщения об ошибке.
//  ФайлУспешноЗагружен - Булево - Возвращаемый параметр;
//                        Истина - если файл успешно загружен и помещен во временное хранилище;
//                        Ложь   - если не удалось загрузить файл.
//  АдресФайлаВоВременномХранилище - Строка - Возвращаемый параметр.
//                                   Если ФайлУспешноЗагружен, то содержит адрес файла во временном хранилище.
//
Процедура ЗагрузитьФайлКурсовВалют(
	Знач URL, 
	Знач ДатаДляСообщенияОбОшибке = Неопределено, 
	ФайлУспешноЗагружен, 
	ПолноеИмяФайла)
		
	Результат = ПолучениеФайловИзИнтернета.СкачатьФайлНаСервере(URL);	
	
	ФайлУспешноЗагружен = Результат.Статус;	
	
	Если ФайлУспешноЗагружен Тогда
		ПолноеИмяФайла = Результат.Путь;
	Иначе
		ПолноеИмяФайла = Неопределено;	
	КонецЕсли;
			
КонецПроцедуры

// Создает таблицу значений из файла курсов валют.
//
// Параметры:
//  ПолноеИмяФайлаКурсовВалют - Текст - Полное имя файла, который содержит курсы валют.
//
// Возвращаемое значение:
//  ТаблицаЗначений, которая имеет колонки СимвольныйКод, Курс, Кратность.
//  Если файл курсов валют не удалось разобрать, то будет возвращена пустая таблица значений.
//
Функция СоздатьТаблицуЗначенийИзФайлаКурсовВалют(Знач ПолноеИмяФайлаИлиАдресВоВременномХранилище)
	
	Перем ТабЗначКурсыВалют;
	
	ПолноеИмяФайлаКурсовВалют = ПолучитьПолноеИмяФайла(ПолноеИмяФайлаИлиАдресВоВременномХранилище);
	
	ТабЗначКурсыВалют = Новый ТаблицаЗначений();
	ТабЗначКурсыВалют.Колонки.Добавить("СимвольныйКод");
	ТабЗначКурсыВалют.Колонки.Добавить("Курс");
	ТабЗначКурсыВалют.Колонки.Добавить("Кратность");
	
	ДокументDOM = ПолучитьDOM(ПолноеИмяФайлаКурсовВалют);
	
	Если ДокументDOM = Неопределено Тогда
		Возврат ТабЗначКурсыВалют; // Возвращается пустая таблица значений	
	КонецЕсли;
	
	Разыменователь = Новый РазыменовательПространствИменDOM("", "");	
	ВсеКурсыВалют = ДокументDOM.ВычислитьВыражениеXPath("/rates/item", ДокументDOM, Разыменователь);		
	
	Пока Истина Цикл
		
		ЭлементКурсВалюты = ВсеКурсыВалют.ПолучитьСледующий();
		
		Если ЭлементКурсВалюты = Неопределено Тогда
			Прервать;	
		КонецЕсли;
		
		Попытка
			СимвольныйКод = ЭлементКурсВалюты.ПолучитьЭлементыПоИмени("title").Элемент(0).ТекстовоеСодержимое;
			Курс          = ЭлементКурсВалюты.ПолучитьЭлементыПоИмени("description").Элемент(0).ТекстовоеСодержимое;
			Кратность     = ЭлементКурсВалюты.ПолучитьЭлементыПоИмени("quant").Элемент(0).ТекстовоеСодержимое;
		Исключение
			Продолжить;	
		КонецПопытки;
			
		СтрокаКурсВалюты = ТабЗначКурсыВалют.Добавить();
		СтрокаКурсВалюты.СимвольныйКод = СимвольныйКод;
		СтрокаКурсВалюты.Курс          = Число(Курс);
		СтрокаКурсВалюты.Кратность     = Число(Кратность);
		
	КонецЦикла;
	
	Возврат ТабЗначКурсыВалют;
	
КонецФункции

Функция ПолучитьПолноеИмяФайла(Знач ПолноеИмяФайлаИлиАдресВоВременномХранилище)
	
	Перем ПолноеИмяФайла;
	
	Если ЭтоАдресВременногоХранилища(ПолноеИмяФайлаИлиАдресВоВременномХранилище) Тогда
		ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(ПолноеИмяФайлаИлиАдресВоВременномХранилище);
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
		ДвоичныеДанныеФайла.Записать(ИмяВременногоФайла);
		ПолноеИмяФайла = ИмяВременногоФайла;
	Иначе
		ПолноеИмяФайла = ПолноеИмяФайлаИлиАдресВоВременномХранилище; 
	КонецЕсли;

	Возврат ПолноеИмяФайла;
	
КонецФункции

// Записывает курсы валют в регистр сведений КурсыВалют
//
// Параметры:
//  МассивВалют - Массив - Каждый элемент массива имеет тип: СправочникСсылка.Валюты.
//                Содержит валюты для которых необходимо сохранить курс в регистре сведений КурсыВалют;
//  Дата - Дата - Дата, на которую необходимо загрузить курс;
//  ТабЗначКурсыВалют - ТаблицаЗначений - Таблица значений, которая является разобранным файлом курсов валют,  
//                      файл курсов валют скачивается с сайта Национального Банка РК
//  МассивВалютБезКурса - Массив - В массив записываются валюты, курсы которых отсутствуют в ТабЗначКурсыВалют
//
Функция ЗаписатьКурсыВРегистрКурсыВалют(
	Знач МассивВалют, 
	Знач Дата, 
	Знач ТабЗначКурсыВалют, 
	МассивВалютБезКурса)
	
	Для Каждого Валюта Из МассивВалют Цикл
		
		СтрокаКурсВалюты = ТабЗначКурсыВалют.Найти(Валюта.БуквенныйКод, "СимвольныйКод");
		
		Если СтрокаКурсВалюты = Неопределено Тогда
			МассивВалютБезКурса.Добавить(Валюта);
		Иначе
			КурсыВалютЗапись = РегистрыСведений.КурсыВалют.СоздатьМенеджерЗаписи();
			КурсыВалютЗапись.Период    = Дата;
			КурсыВалютЗапись.Валюта    = Валюта;
			КурсыВалютЗапись.Курс      = СтрокаКурсВалюты.Курс;
			КурсыВалютЗапись.Кратность = СтрокаКурсВалюты.Кратность;
			КурсыВалютЗапись.Записать();
		КонецЕсли;
		
	КонецЦикла;
	
КонецФункции

// Создает ДокументDOM для переданного XML файла.
//
// Параметры:
//  ПолноеИмяXMLФайла - Текст - Имя XML Файла на основе которого будет создан ДокументDOM.
//
// Возвращаемое значение:
//  ДокументDOM - если XML файл корректно сформирован; 
//  Неопределено - если XML файл сформирован некорректно.
//
Функция ПолучитьDOM(Знач ПолноеИмяФайла)
	
	Перем ДокументDOM;
	
	ЧтениеXML = Новый ЧтениеXML();
	ЧтениеXML.ОткрытьФайл(ПолноеИмяФайла);
	ПостроительDOM = Новый ПостроительDOM();
	
	Попытка
		ДокументDOM = ПостроительDOM.Прочитать(ЧтениеXML);
	Исключение
		ДокументDOM = Неопределено;
	КонецПопытки;
	
	Возврат ДокументDOM;
	
КонецФункции

// Записывает в журнал регистрации сведения о результатах выполнения  регламентного задания "ЗагрузкаКурсовВалют".
//
// Параметры:
//  Результат - Структура - Структура возвращается методом РаботаСКурсамиВалют.ЗагрузитьАктуальныеКурсыПоРасписанию().
//
// Возвращаемое значение:
//  Нет.
//
Процедура ЗаписатьВЖурналРегистрацииРезультатыЗакрузкиКурсовВалютПоРасписанию(Знач Результат)
	                        
	ВсеКурсыУспешноЗагружены = Результат.ВсеКурсыУспешноЗагружены;
	
	ТекстыВсехОшибок = НСтр("ru = 'При регламентной загрузке курсов валют возникли ошибки:'") + Символы.ПС + Символы.ПС;
	
	Если НЕ ВсеКурсыУспешноЗагружены Тогда
		Для Каждого ТекстОшибки Из Результат.Ошибки Цикл
			ТекстыВсехОшибок = ТекстыВсехОшибок + ТекстОшибки + Символы.ПС + Символы.ПС;
		КонецЦикла;			
	КонецЕсли;
	
	ТекстыВсехОшибок = СокрЛП(ТекстыВсехОшибок);
	
	Если ВсеКурсыУспешноЗагружены Тогда
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Валюты. Загрузка курсов валют.'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Информация,
			Метаданные.РегламентныеЗадания.ЗагрузкаКурсовВалют,
			Неопределено,
			НСтр("ru = 'Регламентная загрузка курсов валют успешно завершена.'", ОбщегоНазначения.КодОсновногоЯзыка()));
			
	Иначе
				
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Валюты. Загрузка курсов валют.'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.РегламентныеЗадания.ЗагрузкаКурсовВалют,
			Неопределено,
			ТекстыВсехОшибок);
			
	КонецЕсли;
		
КонецПроцедуры
