////////////////////////////////////////////////////////////////////////////////
// ЗаполнениеДокументов: 
//  
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Процедура предназначена для заполнения общих реквизитов документов по документу основанию,
//	вызывается в обработчиках событий "ОбработкаЗаполнения" в модулях документов.
//
// Параметры:
//  ДокументОбъект  - объект редактируемого документа,
//  ДокументОснование - объект документа основания
//  КопироватьПодразделение - булево - если да - подразделение организации берется из документа-основания,
//										если нет - из реквизита СчетОрганизации или настройки пользователя
//
Процедура ЗаполнитьПоОснованию(ДокументОбъект, ДокументОснование, КопироватьПодразделение = Истина) Экспорт
	ЗаполнитьШапкуДокументаПоОснованию(ДокументОбъект, ДокументОснование);	
КонецПроцедуры

// Процедура предназначена для заполнения общих реквизитов документов,
// вызывается в обработчиках событий "ПриОткрытии" в модулех форм всех документов.
//
// Параметры:
//  ДокументОбъект                 - объект редактируемого документа,
//  ТекПользователь                - ссылка на справочник, определяет текущего пользователя  
//  ВалютаРегламентированногоУчета - валюта регламентированного учета
//  ТипОперации                    - необязаетельный, строка вида операции ("Покупка" или "Продажа"),
//                                   если не передан, то реквизиты, зависящие от вида операции, не заполняются
//
Процедура ЗаполнитьШапкуДокумента(ДокументОбъект, ВалютаРегламентированногоУчета = Неопределено, ТипОперации = "", НеИзменятьРеквизитыПоНДС = Ложь,ПараметрОбъектКопирования = Неопределено, ПараметрОснование = Неопределено) Экспорт

	Перем ТипЦен;
	
	ТекПользователь = Пользователи.ТекущийПользователь();

	Если ТипЗнч(ДокументОбъект) = Тип("Структура") ИЛИ 
		 ТипЗнч(ДокументОбъект) = Тип("ДанныеФормыСтруктура") Тогда 
		МетаданныеДокумента = ДокументОбъект.Ссылка.Метаданные();
	Иначе 
		МетаданныеДокумента = ДокументОбъект.Метаданные();
	КонецЕсли;
	
	//заполнение даты
	Если НЕ ЗначениеЗаполнено(ДокументОбъект.Дата) Тогда
	  	ДокументОбъект.Дата = НачалоДня(ОбщегоНазначения.ТекущаяДатаПользователя());
	КонецЕсли;
	
	// Флаги принадлежности к учету заполняем, только если оба не заполнены
	Если ОбщегоНазначенияБК.ЕстьРеквизитДокумента("ОтражатьВУправленческомУчете", МетаданныеДокумента) 
		И ОбщегоНазначенияБК.ЕстьРеквизитДокумента("ОтражатьВБухгалтерскомУчете", МетаданныеДокумента) Тогда
		
		//По умолчанию все документы требуют отражения в бухгалтерском учете
		Если ЗначениеЗаполнено(ПараметрОбъектКопирования) Тогда
			ДокументОбъект.ОтражатьВБухгалтерскомУчете  = ПараметрОбъектКопирования.ОтражатьВБухгалтерскомУчете;
			ДокументОбъект.ОтражатьВУправленческомУчете = ПараметрОбъектКопирования.ОтражатьВБухгалтерскомУчете;
		Иначе
			Если НЕ (ДокументОбъект.ОтражатьВУправленческомУчете 
				ИЛИ ДокументОбъект.ОтражатьВБухгалтерскомУчете) Тогда
				
				ДокументОбъект.ОтражатьВУправленческомУчете = Ложь;
				ДокументОбъект.ОтражатьВБухгалтерскомУчете  = Истина;				
			КонецЕсли;
		КонецЕсли;   	
		
	ИначеЕсли ОбщегоНазначенияБК.ЕстьРеквизитДокумента("ОтражатьВБухгалтерскомУчете", МетаданныеДокумента) Тогда

		//По умолчанию все документы требуют отражения в бухгалтерском учете
		Если ЗначениеЗаполнено(ПараметрОбъектКопирования) Тогда
			ДокументОбъект.ОтражатьВБухгалтерскомУчете = ПараметрОбъектКопирования.ОтражатьВБухгалтерскомУчете;
		Иначе
			//По умолчанию все документы требуют отражения в бухгалтерском учете
			ДокументОбъект.ОтражатьВБухгалтерскомУчете = Истина
		КонецЕсли;

	КонецЕсли; 
	
	Если ОбщегоНазначенияБК.ЕстьРеквизитДокумента("Организация", МетаданныеДокумента) 
	  И (НЕ ЗначениеЗаполнено(ДокументОбъект.Организация)) Тогда
		ДокументОбъект.Организация = Справочники.Организации.ОрганизацияПоУмолчанию();
	КонецЕсли;

	Если ОбщегоНазначенияБК.ЕстьРеквизитДокумента("ПодразделениеОрганизации", МетаданныеДокумента)
	   И (НЕ ЗначениеЗаполнено(ДокументОбъект.ПодразделениеОрганизации)) Тогда
		ПодразделениеОрганизации = ПользователиБКВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОсновноеПодразделениеОрганизации");
		Если Не ОбщегоНазначенияБК.ЕстьРеквизитДокумента("Организация", МетаданныеДокумента) Или Не ЗначениеЗаполнено(ДокументОбъект.Организация) Или ПодразделениеОрганизации.Владелец = ДокументОбъект.Организация Тогда
			ДокументОбъект.ПодразделениеОрганизации = ПодразделениеОрганизации;
		КонецЕсли;
	КонецЕсли;
	
	Если ОбщегоНазначенияБК.ЕстьРеквизитДокумента("СтруктурноеПодразделение", МетаданныеДокумента)
	   И (НЕ ЗначениеЗаполнено(ДокументОбъект.СтруктурноеПодразделение)) Тогда
		 СтруктурноеПодразделение = ПользователиБКВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОсновноеСтруктурноеПодразделениеОрганизации");
		Если СтруктурноеПодразделение = Неопределено Тогда
			ДокументОбъект.СтруктурноеПодразделение = ДокументОбъект.Организация;
		ИначеЕсли ТипЗнч(СтруктурноеПодразделение) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
			ДокументОбъект.СтруктурноеПодразделение = СтруктурноеПодразделение;
		Иначе
			ДокументОбъект.СтруктурноеПодразделение = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();							
		КонецЕсли;
	КонецЕсли;

	Если ОбщегоНазначенияБК.ЕстьРеквизитДокумента("СтруктурноеПодразделениеОтправитель", МетаданныеДокумента)
	   И (НЕ ЗначениеЗаполнено(ДокументОбъект.СтруктурноеПодразделениеОтправитель)) Тогда
		СтруктурноеПодразделение = ПользователиБКВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОсновноеСтруктурноеПодразделениеОрганизации");
		Если СтруктурноеПодразделение = Неопределено Тогда
			ДокументОбъект.СтруктурноеПодразделениеОтправитель = ДокументОбъект.Организация;
		ИначеЕсли ТипЗнч(СтруктурноеПодразделение) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
			ДокументОбъект.СтруктурноеПодразделениеОтправитель = СтруктурноеПодразделение;
		Иначе
			ДокументОбъект.СтруктурноеПодразделениеОтправитель = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();							
		КонецЕсли;
	КонецЕсли;

	Если ОбщегоНазначенияБК.ЕстьРеквизитДокумента("СтруктурнаяЕдиница", МетаданныеДокумента)
	   И НЕ ЗначениеЗаполнено(ДокументОбъект.СтруктурнаяЕдиница) 
	   И ОбщегоНазначенияБК.ЕстьРеквизитДокумента("Организация", МетаданныеДокумента) Тогда
		ДокументОбъект.СтруктурнаяЕдиница = ДокументОбъект.Организация.ОсновнойБанковскийСчет;
	КонецЕсли;

	Если ОбщегоНазначенияБК.ЕстьРеквизитДокумента("Ответственный", МетаданныеДокумента)
	   И (НЕ ЗначениеЗаполнено(ДокументОбъект.Ответственный)) Тогда
		ДокументОбъект.Ответственный = ПользователиБКВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОсновнойОтветственный");
	КонецЕсли;

	Если ОбщегоНазначенияБК.ЕстьРеквизитДокумента("Автор", МетаданныеДокумента)
	   И (НЕ ЗначениеЗаполнено(ДокументОбъект.Автор)) Тогда
		ДокументОбъект.Автор = ТекПользователь;
	КонецЕсли;
	
	Если ОбщегоНазначенияБК.ЕстьРеквизитДокумента("ВидОперации", МетаданныеДокумента)
	   И (НЕ ЗначениеЗаполнено(ДокументОбъект.ВидОперации)) Тогда
		ДокументОбъект.ВидОперации = Перечисления[ДокументОбъект.ВидОперации.Метаданные().Имя][0];
	КонецЕсли;

	Если ОбщегоНазначенияБК.ЕстьРеквизитДокумента("Склад", МетаданныеДокумента)
	   И (НЕ ЗначениеЗаполнено(ДокументОбъект.Склад)) Тогда
		ДокументОбъект.Склад = ПользователиБКВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОсновнойСклад");
	КонецЕсли;

	Если ОбщегоНазначенияБК.ЕстьРеквизитДокумента("СкладОрдер", МетаданныеДокумента)
	   И НЕ ЗначениеЗаполнено(ДокументОбъект.СкладОрдер) Тогда
		ДокументОбъект.СкладОрдер = ПользователиБКВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОсновнойСклад");
	КонецЕсли;

	Если ОбщегоНазначенияБК.ЕстьРеквизитДокумента("СтавкаНДС", МетаданныеДокумента)
	   И (НЕ ЗначениеЗаполнено(ДокументОбъект.СтавкаНДС)) Тогда
		ДокументОбъект.СтавкаНДС = ПользователиБКВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОсновнаяСтавкаНДС");
	КонецЕсли;

	Если ОбщегоНазначенияБК.ЕстьРеквизитДокумента("БанковскийСчетОрганизации", МетаданныеДокумента)
	   И НЕ ЗначениеЗаполнено(ДокументОбъект.БанковскийСчетОрганизации)
	   И (ЗначениеЗаполнено(ДокументОбъект.Организация)) Тогда
	    СчетПоУмолчанию = ДокументОбъект.Организация.ОсновнойБанковскийСчет;
		ДокументОбъект.БанковскийСчетОрганизации = СчетПоУмолчанию;
		Если ОбщегоНазначенияБК.ЕстьРеквизитДокумента("ВалютаДокумента", МетаданныеДокумента) Тогда
			ДокументОбъект.ВалютаДокумента = СчетПоУмолчанию.ВалютаДенежныхСредств;
		КонецЕсли;
	КонецЕсли;

	Если ОбщегоНазначенияБК.ЕстьРеквизитДокумента("СчетОрганизации", МетаданныеДокумента)
	   И НЕ ЗначениеЗаполнено(ДокументОбъект.СчетОрганизации)
	   И (ЗначениеЗаполнено(ДокументОбъект.Организация)) Тогда
		СчетПоУмолчанию = ДокументОбъект.Организация.ОсновнойБанковскийСчет;
		ДокументОбъект.СчетОрганизации = СчетПоУмолчанию;
		Если ОбщегоНазначенияБК.ЕстьРеквизитДокумента("ВалютаДокумента", МетаданныеДокумента) Тогда
			ДокументОбъект.ВалютаДокумента =  СчетПоУмолчанию.ВалютаДенежныхСредств;
		КонецЕсли;
	КонецЕсли;

	Если ОбщегоНазначенияБК.ЕстьРеквизитДокумента("ВалютаДокумента", МетаданныеДокумента)
	   И (НЕ ЗначениеЗаполнено(ДокументОбъект.ВалютаДокумента)) Тогда
		ДокументОбъект.ВалютаДокумента = ВалютаРегламентированногоУчета;
	КонецЕсли;

	Если ОбщегоНазначенияБК.ЕстьРеквизитДокумента("КурсДокумента", МетаданныеДокумента)
	   И (НЕ ЗначениеЗаполнено(ДокументОбъект.КурсДокумента)) Тогда
		СтруктураКурсаДокумента      = ОбщегоНазначенияБК.ПолучитьКурсВалюты(ДокументОбъект.ВалютаДокумента, ДокументОбъект.Дата);
		ДокументОбъект.КурсДокумента = СтруктураКурсаДокумента.Курс;

		Если ОбщегоНазначенияБК.ЕстьРеквизитДокумента("КратностьДокумента", МетаданныеДокумента) Тогда
			ДокументОбъект.КратностьДокумента = СтруктураКурсаДокумента.Кратность;
		КонецЕсли;
	КонецЕсли;

	// Если тип цен оказался не заполненным, то берем его из установок пользователя
	Если ОбщегоНазначенияБК.ЕстьРеквизитДокумента("ТипЦен", МетаданныеДокумента)
	   И (НЕ ЗначениеЗаполнено(ДокументОбъект.ТипЦен)) Тогда
	    Если ТипОперации = "Продажа" Тогда
			ДокументОбъект.ТипЦен = ПользователиБКВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОсновнойТипЦенПродажи");
		КонецЕсли;
	КонецЕсли;
	
	Если ОбщегоНазначенияБК.ЕстьРеквизитДокумента("НоменклатурнаяГруппа", МетаданныеДокумента)
		И Не ЗначениеЗаполнено(ПараметрОбъектКопирования)
		И Не ЗначениеЗаполнено(ДокументОбъект.НоменклатурнаяГруппа)
		И ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ИспользоватьОднуНоменклатурнуюГруппу() Тогда
		ДокументОбъект.НоменклатурнаяГруппа = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ОсновнаяНоменклатурнаяГруппа();
	КонецЕсли;
	
	//если документ скопирован, флаги учета переносим как есть
	Если ЗначениеЗаполнено(ПараметрОбъектКопирования) Тогда
		
		// Флаги учета налогов заполняем, только если флаг УчитыватьНДС не заполнен.
		Если ОбщегоНазначенияБК.ЕстьРеквизитДокумента("УчитыватьНДС", МетаданныеДокумента) Тогда
			ДокументОбъект.УчитыватьНДС =  ПараметрОбъектКопирования.УчитыватьНДС ;	
			Если ОбщегоНазначенияБК.ЕстьРеквизитДокумента("СуммаВключаетНДС", МетаданныеДокумента) Тогда
				ДокументОбъект.СуммаВключаетНДС =  ПараметрОбъектКопирования.СуммаВключаетНДС ;	
			КонецЕсли;			
		КонецЕсли;
		
		Если ОбщегоНазначенияБК.ЕстьРеквизитДокумента("УчитыватьАкциз", МетаданныеДокумента) Тогда
			ДокументОбъект.УчитыватьАкциз =  ПараметрОбъектКопирования.УчитыватьАкциз;
			Если ОбщегоНазначенияБК.ЕстьРеквизитДокумента("СуммаВключаетАкциз", МетаданныеДокумента) Тогда			
				ДокументОбъект.СуммаВключаетАкциз = ПараметрОбъектКопирования.СуммаВключаетАкциз;
			КонецЕсли;				
		КонецЕсли;
		
		// Не используемый реквизит не заполняем
		Если ОбщегоНазначенияБК.ЕстьРеквизитДокумента("УдалитьДоверенность", МетаданныеДокумента) Тогда
			ДокументОбъект.УдалитьДоверенность =  "";
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(ПараметрОснование) И ТипЗнч(ПараметрОснование) <> Тип("Структура") Тогда
		
		Если Метаданные.Документы.Найти(ПараметрОснование.Метаданные().Имя) <> Неопределено Тогда
			
			МетаданныеОснования = ПараметрОснование.Метаданные();
			
			// если в основании есть реквизит Учитывать НДС, подставляем оттуда
			Если ОбщегоНазначенияБК.ЕстьРеквизитДокумента("УчитыватьНДС", МетаданныеДокумента) И
				ОбщегоНазначенияБК.ЕстьРеквизитДокумента("УчитыватьНДС", МетаданныеОснования) Тогда
				
				ДокументОбъект.УчитыватьНДС = ПараметрОснование.УчитыватьНДС ;	
				
			// Флаги учета налогов заполняем, только если флаг УчитыватьНДС не заполнен.
			ИначеЕсли ОбщегоНазначенияБК.ЕстьРеквизитДокумента("УчитыватьНДС", МетаданныеДокумента) И (НЕ НеИзменятьРеквизитыПоНДС) Тогда
				
				ДокументОбъект.УчитыватьНДС =  ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНДС(ДокументОбъект.Организация, ДокументОбъект.Дата);		
				
			КонецЕсли;
			
			// если в основании есть реквизит Учитывать акциз, подставляем оттуда
			Если ОбщегоНазначенияБК.ЕстьРеквизитДокумента("УчитыватьАкциз", МетаданныеДокумента) 
				И ОбщегоНазначенияБК.ЕстьРеквизитДокумента("УчитыватьАкциз", МетаданныеОснования) Тогда
				
				ДокументОбъект.УчитыватьАкциз =  ПараметрОснование.УчитыватьАкциз;
				
			ИначеЕсли ОбщегоНазначенияБК.ЕстьРеквизитДокумента("УчитыватьАкциз", МетаданныеДокумента) Тогда
				
				ДокументОбъект.УчитыватьАкциз =  ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаАкциза(ДокументОбъект.Организация, ДокументОбъект.Дата);
				
			КонецЕсли;
			
			Если (ОбщегоНазначенияБК.ЕстьРеквизитДокумента("ТипЦен", МетаданныеДокумента))
				И (ЗначениеЗаполнено(ДокументОбъект.ТипЦен)) Тогда
				
				УстановитьПризнакиИзТипаЦен = Истина;
				// Если ТипЦен - элемент справочника ТипыЦенНоменклатуры и цены выбранного типа расчетные, 
				// то флаги включения налогов надо брать из базовой цены
				Если ДокументОбъект.ТипЦен.Метаданные().Реквизиты.Найти("Рассчитывается") <> Неопределено Тогда
					ТипЦен = ?(ДокументОбъект.ТипЦен.Рассчитывается, ДокументОбъект.ТипЦен.БазовыйТипЦен, ДокументОбъект.ТипЦен);
				Иначе
					ТипЦен = ДокументОбъект.ТипЦен;
				КонецЕсли;
				
			Иначе
				
				УстановитьПризнакиИзТипаЦен = Ложь;
				
			КонецЕсли;
			
			Если ОбщегоНазначенияБК.ЕстьРеквизитДокумента("СуммаВключаетНДС", МетаданныеДокумента) 
				И ОбщегоНазначенияБК.ЕстьРеквизитДокумента("СуммаВключаетНДС", МетаданныеОснования) Тогда
				
				ДокументОбъект.СуммаВключаетНДС =  ПараметрОснование.СуммаВключаетНДС ;	
				
			ИначеЕсли ОбщегоНазначенияБК.ЕстьРеквизитДокумента("УчитыватьНДС", МетаданныеДокумента) 
				И ДокументОбъект.УчитыватьНДС И ОбщегоНазначенияБК.ЕстьРеквизитДокумента("СуммаВключаетНДС", МетаданныеДокумента) Тогда
				
				Если УстановитьПризнакиИзТипаЦен Тогда
					ДокументОбъект.СуммаВключаетНДС = ТипЦен.ЦенаВключаетНДС;
				Иначе
					ДокументОбъект.СуммаВключаетНДС = Истина;
				КонецЕсли;
				
			КонецЕсли;
			
			Если ОбщегоНазначенияБК.ЕстьРеквизитДокумента("СуммаВключаетАкциз", МетаданныеДокумента) 
				И ОбщегоНазначенияБК.ЕстьРеквизитДокумента("СуммаВключаетАкциз", МетаданныеОснования) Тогда			
				
				ДокументОбъект.СуммаВключаетАкциз = ПараметрОснование.СуммаВключаетАкциз;
				
			ИначеЕсли ОбщегоНазначенияБК.ЕстьРеквизитДокумента("УчитыватьАкциз", МетаданныеДокумента) 
				И ДокументОбъект.УчитыватьАкциз И ОбщегоНазначенияБК.ЕстьРеквизитДокумента("СуммаВключаетАкциз", МетаданныеДокумента) Тогда
				
				Если УстановитьПризнакиИзТипаЦен Тогда
					ДокументОбъект.СуммаВключаетАкциз = ТипЦен.ЦенаВключаетАкциз;
				Иначе
					ДокументОбъект.СуммаВключаетАкциз = Истина;
				КонецЕсли;
				
			КонецЕсли;							
		КонецЕсли;
		
	Иначе
		
		// Флаги учета налогов заполняем, только если флаг УчитыватьНДС не заполнен.
		Если ОбщегоНазначенияБК.ЕстьРеквизитДокумента("УчитыватьНДС", МетаданныеДокумента) 
			И (НЕ НеИзменятьРеквизитыПоНДС) Тогда
			ДокументОбъект.УчитыватьНДС = ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНДС(ДокументОбъект.Организация, ДокументОбъект.Дата);		
		КонецЕсли; 
		
		// Флаги учета налогов заполняем, только если флаг УчитыватьНДС не заполнен.
		Если ОбщегоНазначенияБК.ЕстьРеквизитДокумента("УчитыватьАкциз", МетаданныеДокумента) Тогда
			ДокументОбъект.УчитыватьАкциз =  ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаАкциза(ДокументОбъект.Организация, ДокументОбъект.Дата);		
		КонецЕсли; 
		
		Если (ОбщегоНазначенияБК.ЕстьРеквизитДокумента("ТипЦен", МетаданныеДокумента))
			И (ЗначениеЗаполнено(ДокументОбъект.ТипЦен)) Тогда
			
			// Если ТипЦен - элемент справочника ТипыЦенНоменклатуры и цены выбранного типа расчетные, 
			// то флаги включения налогов надо брать из базовой цены
			ТипЦен = ДокументОбъект.ТипЦен;
			
			// Флаги учета налогов заполняем, только если флаг УчитыватьНДС заполнен.
			Если ОбщегоНазначенияБК.ЕстьРеквизитДокумента("УчитыватьНДС", МетаданныеДокумента)
				И ДокументОбъект.УчитыватьНДС И ОбщегоНазначенияБК.ЕстьРеквизитДокумента("СуммаВключаетНДС", МетаданныеДокумента) И (НЕ НеИзменятьРеквизитыПоНДС) Тогда
				ДокументОбъект.СуммаВключаетНДС = ТипЦен.ЦенаВключаетНДС;
			КонецЕсли; 
			
			// Флаги учета налогов заполняем, только если флаг УчитыватьАкциз заполнен.
			Если ОбщегоНазначенияБК.ЕстьРеквизитДокумента("УчитыватьАкциз", МетаданныеДокумента) 
				И ДокументОбъект.УчитыватьАкциз И ОбщегоНазначенияБК.ЕстьРеквизитДокумента("СуммаВключаетАкциз", МетаданныеДокумента)Тогда			
				ДокументОбъект.СуммаВключаетАкциз = ТипЦен.ЦенаВключаетАкциз;
			КонецЕсли; 		
		Иначе          
			// Заполним значениями по умолчанию (нет, либо не заполнен ТипЦен).
			// Флаги учета налогов заполняем, только если флаг УчитыватьНДС не заполнен.
			Если ОбщегоНазначенияБК.ЕстьРеквизитДокумента("УчитыватьНДС", МетаданныеДокумента) 
				И ДокументОбъект.УчитыватьНДС И ОбщегоНазначенияБК.ЕстьРеквизитДокумента("СуммаВключаетНДС", МетаданныеДокумента) И (НЕ НеИзменятьРеквизитыПоНДС) Тогда			
				ДокументОбъект.СуммаВключаетНДС = Истина;
			КонецЕсли; 
			
			// Заполним значениями по умолчанию (нет, либо не заполнен ТипЦен).
			// Флаги учета налогов заполняем, только если флаг УчитыватьНДС не заполнен.
			Если ОбщегоНазначенияБК.ЕстьРеквизитДокумента("УчитыватьАкциз", МетаданныеДокумента) И ДокументОбъект.УчитыватьАкциз И ОбщегоНазначенияБК.ЕстьРеквизитДокумента("СуммаВключаетАкциз", МетаданныеДокумента)Тогда			
				ДокументОбъект.СуммаВключаетАкциз = Истина;
			КонецЕсли;		
		КонецЕсли;
	КонецЕсли;
	
	
	Если ОбщегоНазначенияБК.ЕстьРеквизитДокумента("УчитыватьКПН", МетаданныеДокумента) Тогда
		ТекЗначениеПлательщикаНаПрибыль = УчетнаяПолитикаСервер.ПлательщикНалогаНаПрибыль(ДокументОбъект.Организация, ДокументОбъект.Дата);
		Если ЗначениеЗаполнено(ПараметрОбъектКопирования) Тогда			
			Если ТекЗначениеПлательщикаНаПрибыль Тогда
				ДокументОбъект.УчитыватьКПН = ПараметрОбъектКопирования.УчитыватьКПН;
			Иначе
				ДокументОбъект.УчитыватьКПН = Ложь;            
			КонецЕсли;			
		Иначе
			ДокументОбъект.УчитыватьКПН = ТекЗначениеПлательщикаНаПрибыль;
		КонецЕсли;
		
		Если ОбщегоНазначенияБК.ЕстьРеквизитДокумента("ВидУчетаНУ", МетаданныеДокумента) И ДокументОбъект.УчитыватьКПН Тогда
			ОтражатьДокументыВНалоговомУчете = ПользователиБКВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОтражатьДокументыВНалоговомУчете"); 
			Если ЗначениеЗаполнено(ПараметрОбъектКопирования) Тогда	
				ДокументОбъект.ВидУчетаНУ = ПараметрОбъектКопирования.ВидУчетаНУ;
			Иначе
				ДокументОбъект.ВидУчетаНУ  = ?(ОтражатьДокументыВНалоговомУчете, Справочники.ВидыУчетаНУ.НУ, Справочники.ВидыУчетаНУ.НеОтражаетсяВНУ);			
			КонецЕсли;			
		КонецЕсли; 
	КонецЕсли;


	Если ОбщегоНазначенияБК.ЕстьРеквизитДокумента("ЗанимаемыхСтавок", МетаданныеДокумента)
		И (НЕ ЗначениеЗаполнено(ДокументОбъект.ЗанимаемыхСтавок)) Тогда
		ДокументОбъект.ЗанимаемыхСтавок = 1;
	КонецЕсли;

	Если ОбщегоНазначенияБК.ЕстьРеквизитДокумента("ДатаС", МетаданныеДокумента)
	   И (НЕ ЗначениеЗаполнено(ДокументОбъект.ДатаС)) Тогда
		ДокументОбъект.ДатаС = ДокументОбъект.Дата;
	КонецЕсли;

	Если ОбщегоНазначенияБК.ЕстьРеквизитДокумента("ПериодРегистрации", МетаданныеДокумента)
	   И (НЕ ЗначениеЗаполнено(ДокументОбъект.ПериодРегистрации)) Тогда
		ДокументОбъект.ПериодРегистрации = НачалоМесяца(ОбщегоНазначения.ТекущаяДатаПользователя());
	КонецЕсли; 
	
	Если ОбщегоНазначенияБК.ЕстьРеквизитДокумента("ПериодВзаиморасчетов", МетаданныеДокумента)
	   И (НЕ ЗначениеЗаполнено(ДокументОбъект.ПериодВзаиморасчетов)) Тогда
		ДокументОбъект.ПериодВзаиморасчетов = НачалоМесяца(ОбщегоНазначения.ТекущаяДатаПользователя());
	КонецЕсли;
	
	Если ОбщегоНазначенияБК.ЕстьРеквизитДокумента("ПериодНачисленияЗарплаты", МетаданныеДокумента)
	   И (НЕ ЗначениеЗаполнено(ДокументОбъект.ПериодНачисленияЗарплаты)) Тогда
		ДокументОбъект.ПериодНачисленияЗарплаты = НачалоМесяца(ТекущаяДатаСеанса());
	КонецЕсли;

	СтруктураДокументовПоступления = Новый Структура;
	СтруктураДокументовПоступления.Вставить("ПоступлениеТоваровУслуг");
	СтруктураДокументовПоступления.Вставить("Доверенность");
	СтруктураДокументовПоступления.Вставить("ПоступлениеДопРасходов");
	СтруктураДокументовПоступления.Вставить("ПоступлениеНМА");
	СтруктураДокументовПоступления.Вставить("ВозвратТоваровПоставщику");
	СтруктураДокументовПоступления.Вставить("СчетНаОплатуПоставщика");
	СтруктураДокументовРеализации = Новый Структура;
	СтруктураДокументовРеализации.Вставить("РеализацияТоваровУслуг");
	СтруктураДокументовРеализации.Вставить("АктОбОказанииПроизводственныхУслуг");
	СтруктураДокументовРеализации.Вставить("РеализацияУслугПоПереработке");
	СтруктураДокументовРеализации.Вставить("ВозвратТоваровОтПокупателя");
	СтруктураДокументовРеализации.Вставить("СчетНаОплатуПокупателю");
	
	Если ОбщегоНазначенияБК.ЕстьРеквизитДокумента("Контрагент", МетаданныеДокумента)
	   И (НЕ ЗначениеЗаполнено(ДокументОбъект.Контрагент)) Тогда
	    Если СтруктураДокументовРеализации.Свойство(МетаданныеДокумента.Имя) Тогда
			ДокументОбъект.Контрагент = ПользователиБКВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОсновнойПокупатель");
		ИначеЕсли СтруктураДокументовПоступления.Свойство(МетаданныеДокумента.Имя) Тогда
			ДокументОбъект.Контрагент = ПользователиБКВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОсновнойПоставщик");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьШапкуДокумента()

// Процедура предназначена для заполнения общих реквизитов документов по документу основанию,
//	вызывается в обработчиках событий "ОбработкаЗаполнения" в модулях документов.
//
// Параметры:
//  ДокументОбъект  - объект редактируемого документа,
//  ДокументОснование - объект документа основания
//
Процедура ЗаполнитьШапкуДокументаПоОснованию(ДокументОбъект, ДокументОснование) Экспорт

	Если ТипЗнч(ДокументОбъект) = Тип("Структура") ИЛИ 
		ТипЗнч(ДокументОбъект) = Тип("ДанныеФормыСтруктура") Тогда 
		МетаданныеДокумента          = ДокументОбъект.Ссылка.Метаданные();
	Иначе 
		МетаданныеДокумента          = ДокументОбъект.Метаданные();
	КонецЕсли;
	
	Если ТипЗнч(ДокументОснование) = Тип("Структура") ИЛИ 
		ТипЗнч(ДокументОснование) = Тип("ДанныеФормыСтруктура") Тогда 
		МетаданныеДокументаОснования  = ДокументОснование.Ссылка.Метаданные();
	Иначе 
		МетаданныеДокументаОснования  = ДокументОснование.Метаданные();
	КонецЕсли;
	мОтображатьСтруктурныеПодразделения = ОбщегоНазначенияБК.ПолучитьПризнакОтображенияСтруктурныхПодразделений();

	//заполнение даты
	Если НЕ ЗначениеЗаполнено(ДокументОбъект.Дата) Тогда
	  	ДокументОбъект.Дата = НачалоДня(ОбщегоНазначения.ТекущаяДатаПользователя());
	КонецЕсли;
	
	// Организация.
	Если ОбщегоНазначенияБК.ЕстьРеквизитДокумента("Организация", МетаданныеДокумента)
	   И ОбщегоНазначенияБК.ЕстьРеквизитДокумента("Организация", МетаданныеДокументаОснования) Тогда
		ДокументОбъект.Организация = ДокументОснование.Организация;
	КонецЕсли;

	
	// Подразделение.
	Если ОбщегоНазначенияБК.ЕстьРеквизитДокумента("Подразделение", МетаданныеДокумента)
	   И ОбщегоНазначенияБК.ЕстьРеквизитДокумента("Подразделение", МетаданныеДокументаОснования) Тогда
		ДокументОбъект.Подразделение = ДокументОснование.Подразделение;
	КонецЕсли;

	// ПодразделениеОрганизации.
	Если ОбщегоНазначенияБК.ЕстьРеквизитДокумента("ПодразделениеОрганизации", МетаданныеДокумента)
	   И ОбщегоНазначенияБК.ЕстьРеквизитДокумента("ПодразделениеОрганизации", МетаданныеДокументаОснования) Тогда
		ДокументОбъект.ПодразделениеОрганизации = ДокументОснование.ПодразделениеОрганизации;
	КонецЕсли;

	// СтруктурноеПодразделение.
	Если ОбщегоНазначенияБК.ЕстьРеквизитДокумента("СтруктурноеПодразделение", МетаданныеДокумента)
	   И ОбщегоНазначенияБК.ЕстьРеквизитДокумента("СтруктурноеПодразделение", МетаданныеДокументаОснования)
	   	И мОтображатьСтруктурныеПодразделения Тогда
		ДокументОбъект.СтруктурноеПодразделение = ДокументОснование.СтруктурноеПодразделение;
	КонецЕсли;
	
	// СтруктурноеПодразделение-отправитель.
	Если ОбщегоНазначенияБК.ЕстьРеквизитДокумента("СтруктурноеПодразделениеОтправитель", МетаданныеДокумента)
	   И ОбщегоНазначенияБК.ЕстьРеквизитДокумента("СтруктурноеПодразделениеОтправитель", МетаданныеДокументаОснования)
	   	И мОтображатьСтруктурныеПодразделения Тогда
		ДокументОбъект.СтруктурноеПодразделениеОтправитель = ДокументОснование.СтруктурноеПодразделениеОтправитель;
	КонецЕсли;
	
	// СтруктурноеПодразделение-отправитель.
	Если ОбщегоНазначенияБК.ЕстьРеквизитДокумента("СтруктурноеПодразделениеОтправитель", МетаданныеДокумента)
	   И ОбщегоНазначенияБК.ЕстьРеквизитДокумента("СтруктурноеПодразделение", МетаданныеДокументаОснования)
	   	И мОтображатьСтруктурныеПодразделения Тогда
		ДокументОбъект.СтруктурноеПодразделениеОтправитель = ДокументОснование.СтруктурноеПодразделение;
	КонецЕсли;

	// СтруктурноеПодразделение-отправитель.
	Если ОбщегоНазначенияБК.ЕстьРеквизитДокумента("СтруктурноеПодразделение", МетаданныеДокумента)
	   И ОбщегоНазначенияБК.ЕстьРеквизитДокумента("СтруктурноеПодразделениеОтправитель", МетаданныеДокументаОснования)
	   	И мОтображатьСтруктурныеПодразделения Тогда
		ДокументОбъект.СтруктурноеПодразделение = ДокументОснование.СтруктурноеПодразделениеОтправитель;
	КонецЕсли;
	
	// СтруктурноеПодразделение-получатель.
	Если ОбщегоНазначенияБК.ЕстьРеквизитДокумента("СтруктурноеПодразделениеПолучатель", МетаданныеДокумента)
	   И ОбщегоНазначенияБК.ЕстьРеквизитДокумента("СтруктурноеПодразделениеПолучатель", МетаданныеДокументаОснования)
	   	И мОтображатьСтруктурныеПодразделения Тогда
		ДокументОбъект.СтруктурноеПодразделениеПолучатель = ДокументОснование.СтруктурноеПодразделениеПолучатель;
	КонецЕсли; 
	
	// СтруктурноеПодразделение-получатель.
	Если ОбщегоНазначенияБК.ЕстьРеквизитДокумента("СтруктурноеПодразделениеПолучатель", МетаданныеДокумента)
	   И ОбщегоНазначенияБК.ЕстьРеквизитДокумента("СтруктурноеПодразделение", МетаданныеДокументаОснования)
	   	И мОтображатьСтруктурныеПодразделения Тогда
		ДокументОбъект.СтруктурноеПодразделениеПолучатель = ДокументОснование.СтруктурноеПодразделение;
	КонецЕсли;	
	
	// Склад.
	Если ОбщегоНазначенияБК.ЕстьРеквизитДокумента("Склад", МетаданныеДокумента)
	   И ОбщегоНазначенияБК.ЕстьРеквизитДокумента("Склад", МетаданныеДокументаОснования) Тогда
		ДокументОбъект.Склад = ДокументОснование.Склад;
	КонецЕсли;
	
	// Ответственный.
	Если ОбщегоНазначенияБК.ЕстьРеквизитДокумента("Ответственный", МетаданныеДокумента)
	   И ОбщегоНазначенияБК.ЕстьРеквизитДокумента("Ответственный", МетаданныеДокументаОснования) Тогда
		ДокументОбъект.Ответственный = ДокументОснование.Ответственный;
	КонецЕсли;

	//Автор
	Если ОбщегоНазначенияБК.ЕстьРеквизитДокумента("Автор", МетаданныеДокумента)
	   И (НЕ ЗначениеЗаполнено(ДокументОбъект.Автор)) Тогда
		ДокументОбъект.Автор = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	// Контрагент.
	Если ОбщегоНазначенияБК.ЕстьРеквизитДокумента("Контрагент", МетаданныеДокумента)
	   И ОбщегоНазначенияБК.ЕстьРеквизитДокумента("Контрагент", МетаданныеДокументаОснования) Тогда
		ДокументОбъект.Контрагент = ДокументОснование.Контрагент;
	КонецЕсли;

	// ДоговорКонтрагента.
	Если ОбщегоНазначенияБК.ЕстьРеквизитДокумента("ДоговорКонтрагента", МетаданныеДокумента)
	   И ОбщегоНазначенияБК.ЕстьРеквизитДокумента("ДоговорКонтрагента", МетаданныеДокументаОснования) 
	   И (НЕ ОбщегоНазначенияБК.ЕстьРеквизитДокумента("Организация", МетаданныеДокумента) 
	      ИЛИ ДокументОбъект.Организация = ДокументОснование.ДоговорКонтрагента.Организация) Тогда

		ДокументОбъект.ДоговорКонтрагента = ДокументОснование.ДоговорКонтрагента;

		// КурсВзаиморасчетов.
		Если ОбщегоНазначенияБК.ЕстьРеквизитДокумента("КурсВзаиморасчетов", МетаданныеДокумента) Тогда
			// Определим дату получения курсов
			ДатаСреза = ?(ЗначениеЗаполнено(ДокументОбъект.Дата), ДокументОбъект.Дата, ОбщегоНазначения.ТекущаяДатаПользователя());
						
			СтруктураКурсаВзаиморасчетов = ОбщегоНазначенияБК.ПолучитьКурсВалюты(ДокументОбъект.ДоговорКонтрагента.ВалютаВзаиморасчетов, ДатаСреза);
			ДокументОбъект.КурсВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Курс;

			// КратностьВзаиморасчетов.
			Если ОбщегоНазначенияБК.ЕстьРеквизитДокумента("КратностьВзаиморасчетов", МетаданныеДокумента) Тогда
				ДокументОбъект.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;

	// Касса
	Если ОбщегоНазначенияБК.ЕстьРеквизитДокумента("Касса", МетаданныеДокумента) Тогда

		// Если в документе-основании есть структурная единица(или касса), то берем ее оттуда
		Если ОбщегоНазначенияБК.ЕстьРеквизитДокумента("СтруктурнаяЕдиница", МетаданныеДокументаОснования) Тогда
			Если ЗначениеЗаполнено(ДокументОснование.СтруктурнаяЕдиница) 
			   И ТипЗнч(ДокументОснование.СтруктурнаяЕдиница) = Тип("СправочникСсылка.Кассы") Тогда
				ДокументОбъект.Касса = ДокументОснование.СтруктурнаяЕдиница;
			КонецЕсли;
		ИначеЕсли ОбщегоНазначенияБК.ЕстьРеквизитДокумента("Касса", МетаданныеДокументаОснования) Тогда
			Если ЗначениеЗаполнено(ДокументОснование.Касса) Тогда
				ДокументОбъект.Касса = ДокументОснование.Касса;
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;

	// Банковский счет 
	Если ОбщегоНазначенияБК.ЕстьРеквизитДокумента("БанковскийСчет", МетаданныеДокумента) Тогда

		// Если в документе-основании есть структурная единица(или касса), то берем ее оттуда
		Если ОбщегоНазначенияБК.ЕстьРеквизитДокумента("СтруктурнаяЕдиница", МетаданныеДокументаОснования) Тогда
			Если ЗначениеЗаполнено(ДокументОснование.СтруктурнаяЕдиница) 
			   И ТипЗнч(ДокументОснование.СтруктурнаяЕдиница) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
				ДокументОбъект.БанковскийСчет = ДокументОснование.СтруктурнаяЕдиница;
			КонецЕсли;
		ИначеЕсли ОбщегоНазначенияБК.ЕстьРеквизитДокумента("БанковскийСчет", МетаданныеДокументаОснования) Тогда
			Если ЗначениеЗаполнено(ДокументОснование.БанковскийСчет) Тогда
				ДокументОбъект.БанковскийСчет = ДокументОснование.БанковскийСчет;
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;

	// Банковский счет организации
	Если ОбщегоНазначенияБК.ЕстьРеквизитДокумента("БанковскийСчетОрганизации", МетаданныеДокумента)
	   И ОбщегоНазначенияБК.ЕстьРеквизитДокумента("БанковскийСчет", МетаданныеДокументаОснования) Тогда

		Если НЕ ЗначениеЗаполнено(ДокументОбъект.БанковскийСчетОрганизации)
		  И ЗначениеЗаполнено(ДокументОбъект.БанковскийСчет)Тогда
			ДокументОбъект.БанковскийСчетОрганизации = ДокументОснование.БанковскийСчет;
		КонецЕсли;
	КонецЕсли;

	// Структурная единица
	Если ОбщегоНазначенияБК.ЕстьРеквизитДокумента("СтруктурнаяЕдиница", МетаданныеДокумента)
	   И ОбщегоНазначенияБК.ЕстьРеквизитДокумента("СтруктурнаяЕдиница", МетаданныеДокументаОснования) Тогда

		Если НЕ ЗначениеЗаполнено(ДокументОбъект.СтруктурнаяЕдиница)
		  И ЗначениеЗаполнено(ДокументОснование.СтруктурнаяЕдиница)Тогда
			ДокументОбъект.СтруктурнаяЕдиница = ДокументОснование.СтруктурнаяЕдиница;
		КонецЕсли;
	КонецЕсли;

	// ВалютаДокумента.
	Если ОбщегоНазначенияБК.ЕстьРеквизитДокумента("ВалютаДокумента", МетаданныеДокумента)
	   И ОбщегоНазначенияБК.ЕстьРеквизитДокумента("ВалютаДокумента", МетаданныеДокументаОснования) Тогда

		// Если есть касса или банковский счет, то валюта должна браться только оттуда
		Если ОбщегоНазначенияБК.ЕстьРеквизитДокумента("Касса", МетаданныеДокумента) Тогда
			Если ЗначениеЗаполнено(ДокументОбъект.Касса) Тогда
				ДокументОбъект.ВалютаДокумента = ДокументОбъект.Касса.ВалютаДенежныхСредств;
			КонецЕсли;
		ИначеЕсли ОбщегоНазначенияБК.ЕстьРеквизитДокумента("БанковскийСчет", МетаданныеДокумента) Тогда
			Если ЗначениеЗаполнено(ДокументОбъект.БанковскийСчет) Тогда
				ДокументОбъект.ВалютаДокумента = ДокументОбъект.БанковскийСчет.ВалютаДенежныхСредств;
		    КонецЕсли;
		Иначе
			ДокументОбъект.ВалютаДокумента = ДокументОснование.ВалютаДокумента;
		КонецЕсли;

		// КурсДокумента.
		Если ОбщегоНазначенияБК.ЕстьРеквизитДокумента("КурсДокумента", МетаданныеДокумента) Тогда
			// Определим дату получения курсов
			ДатаСреза = ?(ЗначениеЗаполнено(ДокументОбъект.Дата), ДокументОбъект.Дата, ОбщегоНазначения.ТекущаяДатаПользователя());
			
			СтруктураКурсаДокумента = ОбщегоНазначенияБК.ПолучитьКурсВалюты(ДокументОбъект.ВалютаДокумента, ДатаСреза);
			ДокументОбъект.КурсДокумента = СтруктураКурсаДокумента.Курс;

			// КратностьДокумента.
			Если ОбщегоНазначенияБК.ЕстьРеквизитДокумента("КратностьДокумента", МетаданныеДокумента) Тогда
				ДокументОбъект.КратностьДокумента = СтруктураКурсаДокумента.Кратность;
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;
	
	// ТипЦен.
	Если ОбщегоНазначенияБК.ЕстьРеквизитДокумента("ТипЦен", МетаданныеДокумента)
	   И ОбщегоНазначенияБК.ЕстьРеквизитДокумента("ТипЦен", МетаданныеДокументаОснования) Тогда
		ДокументОбъект.ТипЦен = ДокументОснование.ТипЦен;
	КонецЕсли;

	// Тип скидки.
	Если ОбщегоНазначенияБК.ЕстьРеквизитДокумента("ТипСкидкиНаценки", МетаданныеДокумента)
	   И ОбщегоНазначенияБК.ЕстьРеквизитДокумента("ТипСкидкиНаценки", МетаданныеДокументаОснования) Тогда
		ДокументОбъект.ТипСкидкиНаценки = ДокументОснование.ТипСкидкиНаценки;
	КонецЕсли;
	
	// Дисконтная карта
	Если ОбщегоНазначенияБК.ЕстьРеквизитДокумента("ДисконтнаяКарта", МетаданныеДокумента)
	   И ОбщегоНазначенияБК.ЕстьРеквизитДокумента("ДисконтнаяКарта", МетаданныеДокументаОснования) Тогда
		ДокументОбъект.ДисконтнаяКарта = ДокументОснование.ДисконтнаяКарта;
	КонецЕсли;

	// УчитыватьНДС.
	Если ОбщегоНазначенияБК.ЕстьРеквизитДокумента("УчитыватьНДС", МетаданныеДокумента)
	   И ОбщегоНазначенияБК.ЕстьРеквизитДокумента("УчитыватьНДС", МетаданныеДокументаОснования) Тогда
		ДокументОбъект.УчитыватьНДС = ДокументОснование.УчитыватьНДС;
	КонецЕсли;

	// СуммаВключаетНДС.
	Если ОбщегоНазначенияБК.ЕстьРеквизитДокумента("СуммаВключаетНДС", МетаданныеДокумента)
	   И ОбщегоНазначенияБК.ЕстьРеквизитДокумента("СуммаВключаетНДС", МетаданныеДокументаОснования) Тогда
		ДокументОбъект.СуммаВключаетНДС = ДокументОснование.СуммаВключаетНДС;
	КонецЕсли;
    		
		// УчитыватьАкциз.
	Если ОбщегоНазначенияБК.ЕстьРеквизитДокумента("УчитыватьАкциз", МетаданныеДокумента)
	   И ОбщегоНазначенияБК.ЕстьРеквизитДокумента("УчитыватьАкциз", МетаданныеДокументаОснования) Тогда
		ДокументОбъект.УчитыватьАкциз = ДокументОснование.УчитыватьАкциз;
	КонецЕсли;

	// СуммаВключаетАкциз.
	Если ОбщегоНазначенияБК.ЕстьРеквизитДокумента("СуммаВключаетАкциз", МетаданныеДокумента)
	   И ОбщегоНазначенияБК.ЕстьРеквизитДокумента("СуммаВключаетАкциз", МетаданныеДокументаОснования) Тогда
		ДокументОбъект.СуммаВключаетАкциз = ДокументОснование.СуммаВключаетАкциз;
	КонецЕсли;
    
	// ОтражатьВУправленческомУчете.
	// Если есть в основании, копируем из основания, иначе - Истина.
	Если ОбщегоНазначенияБК.ЕстьРеквизитДокумента("ОтражатьВУправленческомУчете", МетаданныеДокумента) Тогда
		Если ОбщегоНазначенияБК.ЕстьРеквизитДокумента("ОтражатьВУправленческомУчете", МетаданныеДокументаОснования) Тогда
			ДокументОбъект.ОтражатьВУправленческомУчете = ДокументОснование.ОтражатьВУправленческомУчете;
		Иначе
			ДокументОбъект.ОтражатьВУправленческомУчете = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ОбщегоНазначенияБК.ЕстьРеквизитДокумента("ОтражатьВБухгалтерскомУчете", МетаданныеДокумента) Тогда
		Если ОбщегоНазначенияБК.ЕстьРеквизитДокумента("ОтражатьВБухгалтерскомУчете", МетаданныеДокументаОснования) Тогда
			ДокументОбъект.ОтражатьВБухгалтерскомУчете = ДокументОснование.ОтражатьВБухгалтерскомУчете;
		Иначе
			ДокументОбъект.ОтражатьВБухгалтерскомУчете = Истина;
		КонецЕсли;
	КонецЕсли;

	//установка признака "УчитыватьКПН"
	Если ОбщегоНазначенияБК.ЕстьРеквизитДокумента("УчитыватьКПН", МетаданныеДокумента) Тогда

		ТекЗначениеПлательщикаНаПрибыль = ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(ДокументОбъект.Организация, ДокументОбъект.Дата);
		
		ДокументОбъект.УчитыватьКПН = ТекЗначениеПлательщикаНаПрибыль;		
		
		Если ОбщегоНазначенияБК.ЕстьРеквизитДокумента("УчитыватьКПН", МетаданныеДокументаОснования) Тогда
			Если ТекЗначениеПлательщикаНаПрибыль Тогда
				ДокументОбъект.УчитыватьКПН = ДокументОснование.УчитыватьКПН;
			Иначе
				ДокументОбъект.УчитыватьКПН = Ложь;            
			КонецЕсли;			
		КонецЕсли;
				                                                                         
		Если ОбщегоНазначенияБК.ЕстьРеквизитДокумента("ВидУчетаНУ", МетаданныеДокумента) Тогда								
			Если ОбщегоНазначенияБК.ЕстьРеквизитДокумента("ВидУчетаНУ", МетаданныеДокументаОснования) Тогда				
				ДокументОбъект.ВидУчетаНУ = ?(ДокументОбъект.УчитыватьКПН, ДокументОснование.ВидУчетаНУ, Справочники.ВидыУчетаНУ.НеОтражаетсяВНУ);
			Иначе			                                                                                         
				ОтражатьДокументыВНалоговомУчете = ПользователиБКВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию(Пользователи.ТекущийПользователь(), "ОтражатьДокументыВНалоговомУчете"); 
				Если ДокументОбъект.УчитыватьКПН Тогда
					ДокументОбъект.ВидУчетаНУ  = ?(ОтражатьДокументыВНалоговомУчете, Справочники.ВидыУчетаНУ.НУ, Справочники.ВидыУчетаНУ.НеОтражаетсяВНУ);			
				Иначе
					ДокументОбъект.ВидУчетаНУ  = Справочники.ВидыУчетаНУ.НеОтражаетсяВНУ;				
				КонецЕсли;			
			КонецЕсли; 
		КонецЕсли;
	КонецЕсли;
	
	//данные по доверенности
	Если ОбщегоНазначенияБК.ЕстьРеквизитДокумента("ДоверенностьНомер", МетаданныеДокумента)
	   И ОбщегоНазначенияБК.ЕстьРеквизитДокумента("ДоверенностьНомер", МетаданныеДокументаОснования) Тогда
		ДокументОбъект.ДоверенностьНомер = ДокументОснование.ДоверенностьНомер;
	КонецЕсли;

	Если ОбщегоНазначенияБК.ЕстьРеквизитДокумента("ДоверенностьДата", МетаданныеДокумента)
	   И ОбщегоНазначенияБК.ЕстьРеквизитДокумента("ДоверенностьДата", МетаданныеДокументаОснования) Тогда
		ДокументОбъект.ДоверенностьДата = ДокументОснование.ДоверенностьДата;
	КонецЕсли;

	Если ОбщегоНазначенияБК.ЕстьРеквизитДокумента("ДоверенностьЛицо", МетаданныеДокумента)
	   И ОбщегоНазначенияБК.ЕстьРеквизитДокумента("ДоверенностьЛицо", МетаданныеДокументаОснования) Тогда
		ДокументОбъект.ДоверенностьЛицо = ДокументОснование.ДоверенностьЛицо;
	КонецЕсли;
	
	Если ОбщегоНазначенияБК.ЕстьРеквизитДокумента("ДоверенностьВыдана", МетаданныеДокумента)
	   И ОбщегоНазначенияБК.ЕстьРеквизитДокумента("ДоверенностьВыдана", МетаданныеДокументаОснования) Тогда
		ДокументОбъект.ДоверенностьВыдана = ДокументОснование.ДоверенностьВыдана;
	КонецЕсли;     
	
	Если ОбщегоНазначенияБК.ЕстьРеквизитДокумента("НоменклатурнаяГруппа", МетаданныеДокумента)
	   И ОбщегоНазначенияБК.ЕстьРеквизитДокумента("НоменклатурнаяГруппа", МетаданныеДокументаОснования) Тогда
		ДокументОбъект.НоменклатурнаяГруппа = ДокументОснование.НоменклатурнаяГруппа;
	КонецЕсли;

КонецПроцедуры // ЗаполнитьШапкуДокументаПоОснованию()

// Функция предназначена для заполнения табличных частей документов "Участники совместной деятельности".
// Возвращает измененную табличную часть.
//
// Параметры:
//  ДоговорКонтрагента  - договор с контрагентом, по которому должна быть заполнена таб часть,
//  ТабЧастьУчастникиСовместнойДеятельности - табличная часть документа
//
Функция ЗаполнитьТабличнуюЧастьУчастникиСовместнойДеятельности(ДоговорКонтрагента, ТабЧастьУчастникиСовместнойДеятельности) Экспорт

	РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДоговорКонтрагента, "ДоговорСовместнойДеятельности,УчастникСРП");
	ТабЧастьУчастникиСовместнойДеятельности.Очистить();
	Если Не ЗначениеЗаполнено(ДоговорКонтрагента) ИЛИ (НЕ РеквизитыДоговора.ДоговорСовместнойДеятельности И НЕ РеквизитыДоговора.УчастникСРП)	Тогда
		Возврат  ТабЧастьУчастникиСовместнойДеятельности;
	КонецЕсли;
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
	Запрос.Текст = "ВЫБРАТЬ
				   |	ДоговорыКонтрагентовУчастникиСовместнойДеятельности.НомерСтроки КАК НомерСтроки,
				   |	ДоговорыКонтрагентовУчастникиСовместнойДеятельности.УчастникСовместнойДеятельности,
				   |	ДоговорыКонтрагентовУчастникиСовместнойДеятельности.ДоляУчастия
				   |ИЗ
				   |	Справочник.ДоговорыКонтрагентов.УчастникиСовместнойДеятельности КАК ДоговорыКонтрагентовУчастникиСовместнойДеятельности
				   |ГДЕ
				   |	ДоговорыКонтрагентовУчастникиСовместнойДеятельности.Ссылка = &ДоговорКонтрагента
				   |
				   |УПОРЯДОЧИТЬ ПО
				   |	НомерСтроки";
				   
	Результат = Запрос.Выполнить();			   
	
	Если Результат.Пустой() Тогда 
		Возврат ТабЧастьУчастникиСовместнойДеятельности;
	КонецЕсли;	
	
	ЗаписиРезультата = Результат.Выбрать();
	
	Пока ЗаписиРезультата.Следующий() Цикл 
		
		Строка = ТабЧастьУчастникиСовместнойДеятельности.Добавить();
		Строка.УчастникСовместнойДеятельности = ЗаписиРезультата.УчастникСовместнойДеятельности;
		Строка.ДоляУчастия					  = ЗаписиРезультата.ДоляУчастия;
				
	КонецЦикла;
	
	Возврат ТабЧастьУчастникиСовместнойДеятельности;
	
КонецФункции

// Проверяет, можно ли использовать переданный договор в соответствии с переданными параметрами.
//
// Параметры
//  Договор                                 – ссылка на договор, который нужно проверить,
//  Контрагент                              - ссылка на контрагента, которому должен принадлежать договор,
//  Организация                             - ссылка на организацию, от имени которой должен быть выписан договор,
//  СтруктураПараметровДляПолученияДоговора - структура, содержащая параметры для определения договора:
//                                            список допустимых видов договоров и
//                                            список допустимых способов ведения взаиморасчетов.
//
// Возвращаемое значение:
//   Логическое, Истина - можно использовать, ложь - нельзя.
//
Функция МожноИспользоватьДоговорДляДокумента(Договор, Контрагент, Организация, СтруктураПараметровДляПолученияДоговора) Экспорт

	Перем СписокДопустимыхВидовДоговоров, СписокДопустимыхВидовВзаиморасчетов, ВалютаВзаиморасчетовДоговора, ВидСравненияВалютыВзаиморасчетов, УчетАгентскогоНДС;

	Если НЕ ЗначениеЗаполнено(Договор) Тогда
		Возврат Ложь; // Если не передали параметры, то считаем, что нельзя использовать.
	КонецЕсли;

	Если СтруктураПараметровДляПолученияДоговора <> Неопределено Тогда
		СтруктураПараметровДляПолученияДоговора.Свойство("СписокДопустимыхВидовДоговоров"	  , СписокДопустимыхВидовДоговоров);
		СтруктураПараметровДляПолученияДоговора.Свойство("СписокДопустимыхВидовВзаиморасчетов", СписокДопустимыхВидовВзаиморасчетов);
		СтруктураПараметровДляПолученияДоговора.Свойство("ВалютаВзаиморасчетовДоговора"		  , ВалютаВзаиморасчетовДоговора);
		СтруктураПараметровДляПолученияДоговора.Свойство("ВидСравненияВалютыВзаиморасчетов"	  , ВидСравненияВалютыВзаиморасчетов);
		СтруктураПараметровДляПолученияДоговора.Свойство("УчетАгентскогоНДС"	  				, УчетАгентскогоНДС);
	КонецЕсли;

	// Организация должна совпадать.
	Если ЗначениеЗаполнено(Организация)
	   И Организация <> Договор.Организация Тогда
		Возврат Ложь;
	КонецЕсли;

	// Контрагент должен совпадать, если в документе невыбран контрагент, то любой договор не подходит.
	Если Контрагент <> Договор.Владелец Тогда
		Возврат Ложь;
	КонецЕсли;

	//Проверка по учет агентского НДС
	Если УчетАгентскогоНДС <> Неопределено Тогда
		Если Договор.УчетАгентскогоНДС <> УчетАгентскогоНДС Тогда
			Возврат Ложь;
		КонецЕсли;	
	КонецЕсли;	
	
	// Проверка по виду договора.
	Если СписокДопустимыхВидовДоговоров <> Неопределено Тогда
		Если (ТипЗнч(СписокДопустимыхВидовДоговоров) = Тип("СписокЗначений") 
				И СписокДопустимыхВидовДоговоров.НайтиПоЗначению(Договор.ВидДоговора) = Неопределено)
			ИЛИ (ТипЗнч(СписокДопустимыхВидовДоговоров) = Тип("Массив") 
				И СписокДопустимыхВидовДоговоров.Найти(Договор.ВидДоговора) = Неопределено) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;

	// Проверка по виду взаиморасчетов.
	Если СписокДопустимыхВидовВзаиморасчетов <> Неопределено Тогда
		Если (ТипЗнч(СписокДопустимыхВидовВзаиморасчетов) = Тип("СписокЗначений") 
				И СписокДопустимыхВидовВзаиморасчетов.НайтиПоЗначению(Договор.ВедениеВзаиморасчетов) = Неопределено)
			ИЛИ (ТипЗнч(СписокДопустимыхВидовВзаиморасчетов) = Тип("Массив") 
				И СписокДопустимыхВидовВзаиморасчетов.Найти(Договор.ВедениеВзаиморасчетов) = Неопределено) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;

	// Проверка по валюте взаиморасчетов.
	Если ВалютаВзаиморасчетовДоговора <> Неопределено
	   И ВидСравненияВалютыВзаиморасчетов <> Неопределено Тогда
		Если ВидСравненияВалютыВзаиморасчетов = "=" Тогда
			Если Договор.ВалютаВзаиморасчетов <> ВалютаВзаиморасчетовДоговора Тогда
				Возврат Ложь;
			КонецЕсли;
		Иначе // ВидСравненияВалютыВзаиморасчетов может принимать только два значения: "=" и "<>".
			Если Договор.ВалютаВзаиморасчетов = ВалютаВзаиморасчетовДоговора Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Возврат Истина;

КонецФункции 

// Функция определяет договор, соответствующий указанным значениям
// организации и контрагента, а также переданным параметрам.
// Если всем параметрам удовлетворяет основной договор, то выбирается он.
//
// Параметры
//  Организация                             - организация, по которой определяется договор
//  Контрагент                              - конрагент, по которому определяется договор
//  СтруктураПараметровДляПолученияДоговора - структура, содержащая параметры для определения договора:
//                                            список допустимых видов договоров и
//                                            список допустимых способов ведения взаиморасчетов, не обязательный.
//
// Возвращаемое значение:
//  Договор - договор контрагентов
//
Функция ПолучитьДоговорПоОрганизацииИКонтрагенту(Организация, Контрагент, СтруктураПараметровДляПолученияДоговора = Неопределено) Экспорт

	Перем СписокДопустимыхВидовДоговоров, СписокДопустимыхВидовВзаиморасчетов, ВалютаВзаиморасчетовДоговора, ВидСравненияВалютыВзаиморасчетов;

	Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
		Возврат Неопределено;
	КонецЕсли;

	// Если не передана организация, то проверим, можно ли использовать основной договор. 
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Договор = ОбщегоНазначенияБК.ПолучитьОсновнойДоговорКонтрагента(Контрагент);
		Если МожноИспользоватьДоговорДляДокумента(Договор, Контрагент, Организация, СтруктураПараметровДляПолученияДоговора) Тогда
			Возврат Договор;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;

	РезультатЗапроса = ПолучитьДоступныеДоговорыКонтрагента(Контрагент, СтруктураПараметровДляПолученияДоговора, Истина, Организация );
	ТаблицаДоговоров = РезультатЗапроса.Выгрузить();

	Если ТаблицаДоговоров.Количество() = 1 Тогда
		Возврат ТаблицаДоговоров[0].Договор;
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции 

// Функция возвращает таблицу договоров данного контрагента, доступных для выбора
//
// Параметры
//  Контрагент                              - конрагент, по которому определяется договор
//  СтруктураПараметровДляПолученияДоговора - структура, содержащая параметры для определения договора:
//                                            список допустимых видов договоров и
//                                            список допустимых способов ведения взаиморасчетов, не обязательный.
// 	ВозвращатьТолькоПервые                  - булево, Истина - нужно вернуть только первые два договора,
//                                          - ложь - нужно вернуть весь список.
//  Организация                             - необязательный, организация, по которой определяется договор,
//                                            если не передана, то возвращается список договоров по всем орагнизациям.
//  ДополнительныеРеквизиты                 - необязательный, массив дополнительных реквизитов договора,
//                                            которые необходимо вернуть в результате запроса.
//
// Возвращаемое значение:
//  Результат запроса.
//
Функция ПолучитьДоступныеДоговорыКонтрагента(Контрагент, СтруктураПараметровДляПолученияДоговора, ВозвращатьТолькоПервые, Организация = Неопределено, ДополнительныеРеквизиты = Неопределено) Экспорт

	Перем СписокДопустимыхВидовДоговоров, СписокДопустимыхВидовВзаиморасчетов, ВалютаВзаиморасчетовДоговора, ВидСравненияВалютыВзаиморасчетов, УчетАгентскогоНДС;

	Если СтруктураПараметровДляПолученияДоговора <> Неопределено Тогда
		СтруктураПараметровДляПолученияДоговора.Свойство("СписокДопустимыхВидовДоговоров"	  , СписокДопустимыхВидовДоговоров);
		СтруктураПараметровДляПолученияДоговора.Свойство("СписокДопустимыхВидовВзаиморасчетов", СписокДопустимыхВидовВзаиморасчетов);
		СтруктураПараметровДляПолученияДоговора.Свойство("ВалютаВзаиморасчетовДоговора"		  , ВалютаВзаиморасчетовДоговора);
		СтруктураПараметровДляПолученияДоговора.Свойство("ВидСравненияВалютыВзаиморасчетов"	  , ВидСравненияВалютыВзаиморасчетов);
		СтруктураПараметровДляПолученияДоговора.Свойство("УчетАгентскогоНДС"	  			  , УчетАгентскогоНДС);
	КонецЕсли;

	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("ПарКонтрагент"		   , Контрагент);
	Запрос.УстановитьПараметр("ПарВидДоговора"		   , СписокДопустимыхВидовДоговоров);
	Запрос.УстановитьПараметр("ПарВидВзаиморасчетов"   , СписокДопустимыхВидовВзаиморасчетов);
	Запрос.УстановитьПараметр("ПарВалютаВзаиморасчетов", ВалютаВзаиморасчетовДоговора);
	Запрос.УстановитьПараметр("ПарОрганизация"		   , Организация);
	Запрос.УстановитьПараметр("ПарУчетАгентскогоНДС"   , УчетАгентскогоНДС);

	ПсевдонимТаблицы = "ДоговорыКонтрагентов"; 
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ"
	+?(ВозвращатьТолькоПервые," ПЕРВЫЕ 2","") + "
	|	ДоговорыКонтрагентов.Ссылка КАК Договор";
	
	Если ЗначениеЗаполнено(ДополнительныеРеквизиты) Тогда
		
		Для Каждого НаименованиеРеквизита Из ДополнительныеРеквизиты Цикл
		
			Запрос.Текст = Запрос.Текст  + ", " + ПсевдонимТаблицы + "." + НаименованиеРеквизита;
		
		КонецЦикла; 		
	
	КонецЕсли; 
	
	Запрос.Текст = Запрос.Текст  + "
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК " + ПсевдонимТаблицы + "
	|ГДЕ
	|	(НЕ ДоговорыКонтрагентов.ПометкаУдаления)"
	+?(ЗначениеЗаполнено(Организация), "	И ДоговорыКонтрагентов.Организация = &ПарОрганизация", "") + "
	|	И ДоговорыКонтрагентов.Владелец    = &ПарКонтрагент"
	+?(ВалютаВзаиморасчетовДоговора = Неопределено, "", "
	|	И ДоговорыКонтрагентов.ВалютаВзаиморасчетов " 
	+?(ВидСравненияВалютыВзаиморасчетов = Неопределено, "=", ВидСравненияВалютыВзаиморасчетов) + "(&ПарВалютаВзаиморасчетов)
	|")
	+?(СписокДопустимыхВидовДоговоров = Неопределено, "", "
	|	И ДоговорыКонтрагентов.ВидДоговора В (&ПарВидДоговора)
	|")
	+?(СписокДопустимыхВидовВзаиморасчетов = Неопределено, "", "
	|	И ДоговорыКонтрагентов.ВедениеВзаиморасчетов В (&ПарВидВзаиморасчетов)
	|")
	+?(УчетАгентскогоНДС = Неопределено, "", "
	|	И ДоговорыКонтрагентов.УчетАгентскогоНДС = &ПарУчетАгентскогоНДС
	|");

	Если ЗначениеЗаполнено(Организация) Тогда 

		Запрос.Текст = Запрос.Текст + "
		|	И (ВЫБОР КОГДА ДоговорыКонтрагентов.Владелец.ОсновнойДоговорКонтрагента.Организация = &ПарОрганизация"
		+?(ВалютаВзаиморасчетовДоговора = Неопределено, "", "
		|	И ДоговорыКонтрагентов.Владелец.ОсновнойДоговорКонтрагента.ВалютаВзаиморасчетов " 
		+?(ВидСравненияВалютыВзаиморасчетов = Неопределено, "=", ВидСравненияВалютыВзаиморасчетов) + "&ПарВалютаВзаиморасчетов
		|")
		+?(СписокДопустимыхВидовДоговоров = Неопределено, "", "
		|	И ДоговорыКонтрагентов.Владелец.ОсновнойДоговорКонтрагента.ВидДоговора В (&ПарВидДоговора)
		|")
		+?(СписокДопустимыхВидовВзаиморасчетов = Неопределено, "", "
		|	И ДоговорыКонтрагентов.Владелец.ОсновнойДоговорКонтрагента.ВедениеВзаиморасчетов В (&ПарВидВзаиморасчетов)
		|")
		+?(УчетАгентскогоНДС = Неопределено, "", "
		|	И ДоговорыКонтрагентов.Владелец.ОсновнойДоговорКонтрагента.УчетАгентскогоНДС = &ПарУчетАгентскогоНДС
		|")
		+ "
		|	         ТОГДА ДоговорыКонтрагентов.Ссылка  = ДоговорыКонтрагентов.Владелец.ОсновнойДоговорКонтрагента
		|	         ИНАЧЕ ДоговорыКонтрагентов.Ссылка <> ДоговорыКонтрагентов.Владелец.ОсновнойДоговорКонтрагента КОНЕЦ)";

	КонецЕсли;

	Возврат Запрос.Выполнить();

КонецФункции 

// Заполняет реквизиты объекта значениями, полученными в структуре ДанныхЗаполнения.
//	Заполнение возможно только в случае, когда в качестве ДанныхЗаполнения получена структура.
//	Заполнены будут только те реквизиты, для которых в метаданных установлен флаг "ЗаполнятьИзДанныхЗаполнения"
//
//
// Параметры
//  <Объект>  - <СправочникОбъект>, <ДокументОбъект> и т.д. - Заполняемый объект
//  <ДанныеЗаполнения>  - <произвольный тип> - параметр, полученный в ОбработкеЗаполнения объекта
//  <МетаданныеОбъекта>  - <Метаданные> -
//
//
Процедура ЗаполнитьПоСтруктуре(Объект, ДанныеЗаполнения, МетаданныеОбъекта = Неопределено)	Экспорт
	
	Если Объект = Неопределено
		ИЛИ ТипЗнч(ДанныеЗаполнения) <> Тип("Структура")
		ИЛИ ДанныеЗаполнения.Количество() = 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если МетаданныеОбъекта = Неопределено Тогда
		МетаданныеОбъекта = Объект.Метаданные();
	КонецЕсли;
	
	Если Метаданные.Справочники.Содержит(МетаданныеОбъекта)
		ИЛИ Метаданные.ПланыВидовХарактеристик.Содержит(МетаданныеОбъекта) Тогда
		РазличатьГруппыИЭлементы = МетаданныеОбъекта.Иерархический;
	Иначе
		РазличатьГруппыИЭлементы = Ложь;
	КонецЕсли;
	
	СтруктураЗаполнения = Новый Структура;
	Для Каждого Реквизит Из МетаданныеОбъекта.СтандартныеРеквизиты Цикл
		Если Реквизит.ЗаполнятьИзДанныхЗаполнения
			И ДанныеЗаполнения.Свойство(Реквизит.Имя) Тогда
			СтруктураЗаполнения.Вставить(Реквизит.Имя);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Реквизит Из МетаданныеОбъекта.Реквизиты Цикл
		Если Реквизит.ЗаполнятьИзДанныхЗаполнения
			И ДанныеЗаполнения.Свойство(Реквизит.Имя) Тогда
			Если РазличатьГруппыИЭлементы Тогда
				Если (Объект.ЭтоГруппа
						И Реквизит.Использование <> Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляЭлемента)
					ИЛИ (НЕ Объект.ЭтоГруппа
						И Реквизит.Использование <> Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляГруппы) Тогда
					СтруктураЗаполнения.Вставить(Реквизит.Имя);
				КонецЕсли;
			Иначе
				СтруктураЗаполнения.Вставить(Реквизит.Имя);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого ЗаполняемыйЭлемент Из СтруктураЗаполнения Цикл
		ЗначениеЗаполнения = ДанныеЗаполнения[ЗаполняемыйЭлемент.Ключ];
		Если ТипЗнч(ЗначениеЗаполнения) = Тип("Массив")
			ИЛИ ТипЗнч(ЗначениеЗаполнения) = Тип("ФиксированныйМассив") Тогда
			СтруктураЗаполнения[ЗаполняемыйЭлемент.Ключ] = ЗначениеЗаполнения[0];
		Иначе
			СтруктураЗаполнения[ЗаполняемыйЭлемент.Ключ] = ЗначениеЗаполнения;
		КонецЕсли;
	КонецЦикла;
	
	ЗаполнитьЗначенияСвойств(Объект, СтруктураЗаполнения);
	
КонецПроцедуры

 ////////////////////////////////////////////////////////////////////////////////
 // СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Процедура предназначена для заполнения общих реквизитов документов
//	вызывается в обработчиках событий "ПередЗаписью" документов.
Процедура ПередЗаписьюДокументаУстановкаАвтораПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначенияБК.ЕстьРеквизитДокумента("Автор", Источник.Метаданные())
	   И (НЕ ЗначениеЗаполнено(Источник.Автор)) Тогда
		Источник.Автор = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
КонецПроцедуры
