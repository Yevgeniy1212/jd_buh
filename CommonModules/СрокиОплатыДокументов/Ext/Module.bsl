#Область ПрограммныйИнтерфейс

// Возвращает таблицу с просроченной задолженностью поставщикам
// Параметры:
//   Организация - СправочникСсылка.Организации - отбор по организации (может быть пустой).
//   ДатаЗадолженности - Дата - на какую дату будет получена задолженность.
//   ВключатьОбособленныеПодразделения - Булево - по-умолчанию Ложь.
//
// Возвращаемое значение:
//   ТаблицаЗначений - см. ПросроченнаяЗадолженность().
//
Функция ПросроченнаяЗадолженностьПоставщикам(Организация, ДатаЗадолженности, ВключатьОбособленныеПодразделения = Ложь) Экспорт
	
	Возврат ПросроченнаяЗадолженность(2, Организация, ДатаЗадолженности, ВключатьОбособленныеПодразделения);

КонецФункции

// Возвращает таблицу с просроченной задолженностью покупателей
// Параметры:
//   Организация - СправочникСсылка.Организации - отбор по организации (может быть пустой).
//   ДатаЗадолженности - Дата - на какую дату будет получена задолженность.
//   ВключатьОбособленныеПодразделения - Булево - по-умолчанию Ложь.
//
// Возвращаемое значение:
//   ТаблицаЗначений - см. ПросроченнаяЗадолженность().
//
Функция ПросроченнаяЗадолженностьПокупателей(Организация, ДатаЗадолженности, ВключатьОбособленныеПодразделения = Ложь) Экспорт
	
	Возврат ПросроченнаяЗадолженность(1, Организация, ДатаЗадолженности, ВключатьОбособленныеПодразделения);
	
КонецФункции

// Возвращает таблицу с просроченной задолженностью поставщикам
// Параметры:
//   Тип         - Число - определяет для кого надо получить данные: 1 - покупатель, 2 - поставщик
//   Организация - СправочникСсылка.Организации - отбор по организации (может быть пустой).
//   ДатаЗадолженности - Дата - на какую дату будет получена задолженность
//   ВключатьОбособленныеПодразделения - Булево - признак добавления данных обособленных подразделений.
//
// Возвращаемое значение:
//   ТаблицаЗначений
//     *Организация                    - СправочникСсылка.Организации
//     *ОрганизацияГоловнаяОрганизация - СправочникСсылка.Организации
//     *Подразделение                  - СправочникСсылка.ПодразделенияОрганизаций
//     *Контрагент                     - СправочникСсылка.Контрагенты
//     *Договор                        - СправочникСсылка.ДоговорыКонтрагентов
//     *Документ                       - Документ расчетов с контрагентом
//     *ПросроченнаяЗадолженность      - Число
//
Функция ПросроченнаяЗадолженность(Тип, Организация, ДатаЗадолженности, ВключатьОбособленныеПодразделения)
	
	СписокОрганизаций = БухгалтерскиеОтчеты.СписокДоступныхОрганизаций(Организация);
	
	Запрос = НовыйЗапросПросроченнаяЗадолженность(Тип, СписокОрганизаций, ДатаЗадолженности);
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ПросроченнаяЗадолженность = РезультатЗапроса[3].Выгрузить(); // учтены сроки оплаты документов
	
	СрокиОплаты = РезультатЗапроса[4].Выгрузить().ВыгрузитьКолонку("СрокОплаты"); // сроки оплаты долгов без документов
	
	// Не для всех задолженностей можно определить документ расчетов, и, как следствие - дату возникновения долга.
	// Поэтому для долгов без документов используется следующая методика:
	// Получаем сумму долга на дату задолженности, из этой суммы вычитаем сумму увеличения долга за период отсрочки.
	// Например, долг, который был вчера, это долг, который есть сегодня, минус увеличение долга за этот один день.
	// Таким образом, получаем сумму просроченной задолженностью.
	Если СрокиОплаты.Количество() > 0 Тогда
		
		ДлинаСуток = 86400;
		ТекстЗапросаУвеличениеДолга = "";
		
		Для Индекс = 0 По СрокиОплаты.ВГраница() Цикл
			
			СрокОплаты             = СрокиОплаты[Индекс];
			ДатаНачалаИнтервала    = НачалоДня(ДатаЗадолженности - ДлинаСуток * СрокОплаты);
			ГраницаНачалаИнтервала = Новый Граница(ДатаНачалаИнтервала, ВидГраницы.Включая);
			
			Запрос.УстановитьПараметр("НачалоИнтервала" + (Индекс+1), ГраницаНачалаИнтервала);
			Запрос.УстановитьПараметр("СрокОплаты"      + (Индекс+1), СрокОплаты);
			
			Если НЕ ПустаяСтрока(ТекстЗапросаУвеличениеДолга) Тогда
				ТекстЗапросаУвеличениеДолга = ТекстЗапросаУвеличениеДолга + Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС;
			КонецЕсли;
			
			ТекстЗапросаУвеличениеДолга = ТекстЗапросаУвеличениеДолга + ТекстЗапросаУвеличениеДолгаЗаПериодСрока(Тип, Индекс+1);
			
		КонецЦикла;
		
		Запрос.Текст = ТекстЗапросаУвеличениеДолга + ОбщегоНазначения.РазделительПакетаЗапросов()
					 + ТекстЗапросаПодсчетПросроченногоДолгаБезДокументов();
		
		ОстальнаяПросроченнаяЗадолженность = Запрос.Выполнить().Выгрузить();
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ОстальнаяПросроченнаяЗадолженность, ПросроченнаяЗадолженность);
		
	КонецЕсли;
	
	Возврат ПросроченнаяЗадолженность;
	
КонецФункции

Функция ПредставлениеСрокаОплаты(СрокОплаты) Экспорт
	
	ТекстСрокОплаты = НСтр("ru = 'Срок %1'");
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСрокОплаты, Формат(СрокОплаты, "ДФ=dd.MM.yyyy"));
	
КонецФункции

// Возвращает срок оплаты выставленного счета по умолчанию
// Возвращаемое значение:
//   СрокОплаты - Число
//
Функция СрокОплатыСчетаПокупателюПоУмолчанию() Экспорт
	
	Возврат 3;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция НовыйЗапросПросроченнаяЗадолженность(Тип, СписокОрганизаций, ДатаЗадолженности)
	
	Если Тип = 1 Тогда
		
		ВидыДоговоров = Новый Массив;
		ВидыДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
		ВидыДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.Прочее);
		
		СчетаУчетаРасчетов       = БухгалтерскиеОтчеты.СчетаУчетаРасчетовПокупателей();
		СрокОплатыПараметрыУчета = Константы.СрокОплатыПокупателей.Получить();
				
	ИначеЕсли Тип = 2 Тогда
		
		ВидыДоговоров = Новый Массив;
		ВидыДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
		ВидыДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.Прочее);
		
		СчетаУчетаРасчетов       = БухгалтерскиеОтчеты.СчетаУчетаРасчетовПоставщиков();
		СрокОплатыПараметрыУчета = Константы.СрокОплатыПоставщикам.Получить();
		
	КонецЕсли;
	
	ВидСубконтоКонтрагенты = ПланыВидовХарактеристик.ВидыСубконтоТиповые.Контрагенты;
	ВидСубконтоДоговоры    = ПланыВидовХарактеристик.ВидыСубконтоТиповые.Договоры;
	
	ВидыСубконтоКД = Новый СписокЗначений;
	ВидыСубконтоКД.Добавить(ВидСубконтоКонтрагенты);
	ВидыСубконтоКД.Добавить(ВидСубконтоДоговоры);
	
	ВидыСубконтоКДД = Новый СписокЗначений;
	ВидыСубконтоКДД.Добавить(ВидСубконтоКонтрагенты);
	ВидыСубконтоКДД.Добавить(ВидСубконтоДоговоры);
	ВидыСубконтоКДД.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.ДокументыРасчетовСКонтрагентами);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("СписокОрганизаций",         СписокОрганизаций);
	Запрос.УстановитьПараметр("ВидыДоговоров",             ВидыДоговоров);
	Запрос.УстановитьПараметр("КонецИнтервала",            КонецДня(ДатаЗадолженности));
	Запрос.УстановитьПараметр("ВидыСубконтоКД",            ВидыСубконтоКД);
	Запрос.УстановитьПараметр("ВидыСубконтоКДД",           ВидыСубконтоКДД);
	Запрос.УстановитьПараметр("ГраницаОстатков",           Новый Граница(КонецДня(ДатаЗадолженности), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ДатаЗадолженности",         НачалоДня(ДатаЗадолженности));
	Запрос.УстановитьПараметр("СтандартныйСрокОплаты",     СрокОплатыПараметрыУчета);
	Запрос.УстановитьПараметр("СчетаСДокументомРасчетов",  СчетаУчетаРасчетов.СчетаСДокументомРасчетов);
	Запрос.УстановитьПараметр("СчетаБезДокументаРасчетов", СчетаУчетаРасчетов.СчетаБезДокументаРасчетов);
	
	Запрос.Текст = ТекстЗапросаДолгиПоДокументамИСрокиДолговБезДокументов(Тип);
	
	Возврат Запрос;
	
КонецФункции

Функция ТекстЗапросаДолгиПоДокументамИСрокиДолговБезДокументов(Тип)
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВзаиморасчетыОстатки.Организация КАК Организация,
	|	ВзаиморасчетыОстатки.Организация.ГоловнаяОрганизация КАК ОрганизацияГоловнаяОрганизация,
	|	ВзаиморасчетыОстатки.СтруктурноеПодразделение КАК Подразделение,
	|	ВЫРАЗИТЬ(ВзаиморасчетыОстатки.Субконто1 КАК Справочник.Контрагенты) КАК Контрагент,
	|	ВЫРАЗИТЬ(ВзаиморасчетыОстатки.Субконто2 КАК Справочник.ДоговорыКонтрагентов) КАК Договор,
	|	ВЫБОР
	|		КОГДА ВЫРАЗИТЬ(ВзаиморасчетыОстатки.Субконто2 КАК Справочник.ДоговорыКонтрагентов).УстановленСрокОплаты
	|			ТОГДА ВЫРАЗИТЬ(ВзаиморасчетыОстатки.Субконто2 КАК Справочник.ДоговорыКонтрагентов).СрокОплаты
	|		ИНАЧЕ &СтандартныйСрокОплаты
	|	КОНЕЦ КАК СрокОплаты,
	|	ВзаиморасчетыОстатки.Субконто3 КАК Документ,
	|	ВзаиморасчетыОстатки.СуммаРазвернутыйОстатокДт КАК ОстатокДолга
	|ПОМЕСТИТЬ ОстаткиДолгаПоДокументам
	|ИЗ
	|	РегистрБухгалтерии.Типовой.Остатки(
	|			&ГраницаОстатков,
	|			Счет В (&СчетаСДокументомРасчетов),
	|			&ВидыСубконтоКДД,
	//|			ВЫРАЗИТЬ(Субконто2 КАК Справочник.ДоговорыКонтрагентов).ВидДоговора В (&ВидыДоговоров)
	|				 Организация В (&СписокОрганизаций)) КАК ВзаиморасчетыОстатки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Контрагент,
	|	Договор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВзаиморасчетыОстатки.Организация КАК Организация,
	|	ВзаиморасчетыОстатки.Организация.ГоловнаяОрганизация КАК ОрганизацияГоловнаяОрганизация,
	|	ВзаиморасчетыОстатки.СтруктурноеПодразделение КАК Подразделение,
	|	ВЫРАЗИТЬ(ВзаиморасчетыОстатки.Субконто1 КАК Справочник.Контрагенты) КАК Контрагент,
	|	ВЫРАЗИТЬ(ВзаиморасчетыОстатки.Субконто2 КАК Справочник.ДоговорыКонтрагентов) КАК Договор,
	|	ВЫБОР
	|		КОГДА ВЫРАЗИТЬ(ВзаиморасчетыОстатки.Субконто2 КАК Справочник.ДоговорыКонтрагентов).УстановленСрокОплаты
	|			ТОГДА ВЫРАЗИТЬ(ВзаиморасчетыОстатки.Субконто2 КАК Справочник.ДоговорыКонтрагентов).СрокОплаты
	|		ИНАЧЕ &СтандартныйСрокОплаты
	|	КОНЕЦ КАК СрокОплаты,
	|	ВзаиморасчетыОстатки.СуммаРазвернутыйОстатокДт КАК ОстатокДолга
	|ПОМЕСТИТЬ ОстаткиДолгаБезДокументовБезГруппировки
	|ИЗ
	|	РегистрБухгалтерии.Типовой.Остатки(
	|			&ГраницаОстатков,
	|			Счет В (&СчетаБезДокументаРасчетов),
	|			&ВидыСубконтоКД,
	//|			ВЫРАЗИТЬ(Субконто2 КАК Справочник.ДоговорыКонтрагентов).ВидДоговора В (&ВидыДоговоров)
	|				 Организация В (&СписокОрганизаций)) КАК ВзаиморасчетыОстатки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОстаткиДолгаПоДокументам.Организация,
	|	ОстаткиДолгаПоДокументам.ОрганизацияГоловнаяОрганизация,
	|	ОстаткиДолгаПоДокументам.Подразделение,
	|	ОстаткиДолгаПоДокументам.Контрагент,
	|	ОстаткиДолгаПоДокументам.Договор,
	|	ОстаткиДолгаПоДокументам.СрокОплаты,
	|	ОстаткиДолгаПоДокументам.ОстатокДолга
	|ИЗ
	|	ОстаткиДолгаПоДокументам КАК ОстаткиДолгаПоДокументам
	|ГДЕ
	|	ОстаткиДолгаПоДокументам.Документ = НЕОПРЕДЕЛЕНО
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОстаткиДолгаБезДокументовБезГруппировки.Организация КАК Организация,
	|	ОстаткиДолгаБезДокументовБезГруппировки.ОрганизацияГоловнаяОрганизация,
	|	ЕСТЬNULL(ОстаткиДолгаБезДокументовБезГруппировки.Подразделение, НЕОПРЕДЕЛЕНО) КАК Подразделение,
	|	ОстаткиДолгаБезДокументовБезГруппировки.Контрагент КАК Контрагент,
	|	ОстаткиДолгаБезДокументовБезГруппировки.Договор КАК Договор,
	|	ОстаткиДолгаБезДокументовБезГруппировки.СрокОплаты,
	|	СУММА(ОстаткиДолгаБезДокументовБезГруппировки.ОстатокДолга) КАК ОстатокДолга
	|ПОМЕСТИТЬ ОстаткиДолгаБезДокументов
	|ИЗ
	|	ОстаткиДолгаБезДокументовБезГруппировки КАК ОстаткиДолгаБезДокументовБезГруппировки
	|
	|СГРУППИРОВАТЬ ПО
	|	ОстаткиДолгаБезДокументовБезГруппировки.Договор,
	|	ОстаткиДолгаБезДокументовБезГруппировки.ОрганизацияГоловнаяОрганизация,
	|	ОстаткиДолгаБезДокументовБезГруппировки.Организация,
	|	ОстаткиДолгаБезДокументовБезГруппировки.Контрагент,
	|	ОстаткиДолгаБезДокументовБезГруппировки.Подразделение,
	|	ОстаткиДолгаБезДокументовБезГруппировки.СрокОплаты
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	Контрагент,
	|	Договор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОстаткиДолгаПоДокументам.Организация,
	|	ОстаткиДолгаПоДокументам.ОрганизацияГоловнаяОрганизация,
	|	ЕСТЬNULL(ОстаткиДолгаПоДокументам.Подразделение, НЕОПРЕДЕЛЕНО) КАК Подразделение,
	|	ОстаткиДолгаПоДокументам.Контрагент,
	|	ОстаткиДолгаПоДокументам.Договор,
	|	ОстаткиДолгаПоДокументам.Документ,
	|	ОстаткиДолгаПоДокументам.ОстатокДолга КАК ПросроченнаяЗадолженность
	|ИЗ
	|	ОстаткиДолгаПоДокументам КАК ОстаткиДолгаПоДокументам
	|ГДЕ
	|	ОстаткиДолгаПоДокументам.Документ <> НЕОПРЕДЕЛЕНО
	|	И ДОБАВИТЬКДАТЕ(ОстаткиДолгаПоДокументам.Документ.Дата, ДЕНЬ, ОстаткиДолгаПоДокументам.СрокОплаты) < &ДатаЗадолженности
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОстаткиДолгаБезДокументов.СрокОплаты КАК СрокОплаты
	|ИЗ
	|	ОстаткиДолгаБезДокументов КАК ОстаткиДолгаБезДокументов";
	
	Если Тип = 2 Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "СуммаРазвернутыйОстатокДт", "СуммаРазвернутыйОстатокКт");
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаУвеличениеДолгаЗаПериодСрока(Тип, Индекс)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВзаиморасчетыОбороты.Организация КАК Организация,
	|	ЕСТЬNULL(ВзаиморасчетыОбороты.СтруктурноеПодразделение, НЕОПРЕДЕЛЕНО) КАК Подразделение,
	|	ВзаиморасчетыОбороты.Субконто1 КАК Контрагент,
	|	ВзаиморасчетыОбороты.Субконто2 КАК Договор,
	|	&ПолеУвеличениеДолга КАК УвеличениеДолга"
	+
	?(Индекс = 1, Символы.ПС + "ПОМЕСТИТЬ УвеличениеДолгаБезГруппировки" + Символы.ПС, Символы.ПС)
	+
	"ИЗ
	|	РегистрБухгалтерии.Типовой.Обороты(
	|			&НачалоИнтервала0,
	|			&ГраницаОстатков,
	|			,
	|			Счет В (&СчетаБезДокументаРасчетов),
	|			&ВидыСубконтоКД,
	|			ВЫБОР
	|					КОГДА ВЫРАЗИТЬ(Субконто2 КАК Справочник.ДоговорыКонтрагентов).УстановленСрокОплаты
	|						ТОГДА ВЫРАЗИТЬ(Субконто2 КАК Справочник.ДоговорыКонтрагентов).СрокОплаты
	|					ИНАЧЕ &СтандартныйСрокОплаты
	|				КОНЕЦ = &СрокОплаты0
	|				И Организация В(&СписокОрганизаций),
	|			,
	|			) КАК ВзаиморасчетыОбороты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВзаиморасчетыОбороты.Организация,
	|	ЕСТЬNULL(ВзаиморасчетыОбороты.СтруктурноеПодразделение, НЕОПРЕДЕЛЕНО),
	|	ВзаиморасчетыОбороты.Субконто1,
	|	ВзаиморасчетыОбороты.Субконто2,
	|	&ПолеУвеличениеДолга
	|ИЗ
	|	РегистрБухгалтерии.Типовой.Обороты(
	|			&НачалоИнтервала0,
	|			&ГраницаОстатков,
	|			,
	|			Счет В (&СчетаСДокументомРасчетов),
	|			&ВидыСубконтоКДД,
	|			ВЫБОР
	|					КОГДА ВЫРАЗИТЬ(Субконто2 КАК Справочник.ДоговорыКонтрагентов).УстановленСрокОплаты
	|						ТОГДА ВЫРАЗИТЬ(Субконто2 КАК Справочник.ДоговорыКонтрагентов).СрокОплаты
	|					ИНАЧЕ &СтандартныйСрокОплаты
	|				КОНЕЦ = &СрокОплаты0
	|				И Субконто3 = НЕОПРЕДЕЛЕНО
	|				И Организация В(&СписокОрганизаций),
	|			,
	|			) КАК ВзаиморасчетыОбороты";
	
	Если Тип = 1 Тогда
		ТекстПоляУвеличениеДолга = 
		"ВЫБОР
		|	КОГДА ВзаиморасчетыОбороты.СуммаОборотДт > 0
		|		ТОГДА ВзаиморасчетыОбороты.СуммаОборотДт
		|	ИНАЧЕ 0
		|КОНЕЦ - ВЫБОР
		|	КОГДА ВзаиморасчетыОбороты.СуммаОборотДт < 0
		|		ТОГДА ВзаиморасчетыОбороты.СуммаОборотДт
		|	ИНАЧЕ 0
		|КОНЕЦ";
	ИначеЕсли Тип = 2 Тогда
		ТекстПоляУвеличениеДолга = 
		"ВЫБОР
		|	КОГДА ВзаиморасчетыОбороты.СуммаОборотКт > 0
		|		ТОГДА ВзаиморасчетыОбороты.СуммаОборотКт
		|	ИНАЧЕ 0
		|КОНЕЦ - ВЫБОР
		|	КОГДА ВзаиморасчетыОбороты.СуммаОборотДт < 0
		|		ТОГДА ВзаиморасчетыОбороты.СуммаОборотДт
		|	ИНАЧЕ 0
		|КОНЕЦ";
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПолеУвеличениеДолга", ТекстПоляУвеличениеДолга);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "НачалоИнтервала0"    , "НачалоИнтервала" + Индекс);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "СрокОплаты0"         , "СрокОплаты"      + Индекс);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаПодсчетПросроченногоДолгаБезДокументов()
	
	Возврат
	"ВЫБРАТЬ
	|	УвеличениеДолгаБезГруппировки.Организация КАК Организация,
	|	УвеличениеДолгаБезГруппировки.Подразделение КАК Подразделение,
	|	УвеличениеДолгаБезГруппировки.Контрагент КАК Контрагент,
	|	УвеличениеДолгаБезГруппировки.Договор КАК Договор,
	|	СУММА(УвеличениеДолгаБезГруппировки.УвеличениеДолга) КАК УвеличениеДолга
	|ПОМЕСТИТЬ УвеличениеДолгаДляВсехСроков
	|ИЗ
	|	УвеличениеДолгаБезГруппировки КАК УвеличениеДолгаБезГруппировки
	|
	|СГРУППИРОВАТЬ ПО
	|	УвеличениеДолгаБезГруппировки.Подразделение,
	|	УвеличениеДолгаБезГруппировки.Договор,
	|	УвеличениеДолгаБезГруппировки.Организация,
	|	УвеличениеДолгаБезГруппировки.Контрагент
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	УвеличениеДолгаБезГруппировки.Подразделение,
	|	Контрагент,
	|	Договор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОстаткиДолгаБезДокументов.Организация,
	|	ОстаткиДолгаБезДокументов.ОрганизацияГоловнаяОрганизация,
	|	ОстаткиДолгаБезДокументов.Подразделение КАК Подразделение,
	|	ОстаткиДолгаБезДокументов.Контрагент,
	|	ОстаткиДолгаБезДокументов.Договор,
	|	ВЫБОР
	|		КОГДА ОстаткиДолгаБезДокументов.ОстатокДолга > ЕСТЬNULL(УвеличениеДолгаДляВсехСроков.УвеличениеДолга, 0)
	|			ТОГДА ОстаткиДолгаБезДокументов.ОстатокДолга - ЕСТЬNULL(УвеличениеДолгаДляВсехСроков.УвеличениеДолга, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПросроченнаяЗадолженность
	|ИЗ
	|	ОстаткиДолгаБезДокументов КАК ОстаткиДолгаБезДокументов
	|		ЛЕВОЕ СОЕДИНЕНИЕ УвеличениеДолгаДляВсехСроков КАК УвеличениеДолгаДляВсехСроков
	|		ПО ОстаткиДолгаБезДокументов.Организация = УвеличениеДолгаДляВсехСроков.Организация
	|			И ОстаткиДолгаБезДокументов.Контрагент = УвеличениеДолгаДляВсехСроков.Контрагент
	|			И ОстаткиДолгаБезДокументов.Договор = УвеличениеДолгаДляВсехСроков.Договор
	|			И ОстаткиДолгаБезДокументов.Подразделение = УвеличениеДолгаДляВсехСроков.Подразделение";
	
КонецФункции

#КонецОбласти
