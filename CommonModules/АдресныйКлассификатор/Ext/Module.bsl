////////////////////////////////////////////////////////////////////////////////
// АдресныйКлассификатор: содержит алгоритмы работы с адресным классификатором, 
//   исполняемые на сервере
//  
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Функция формирует строку с полным названием адресного элемента,
// которое состоит из наименования и сокращения самого адресного
// элемента и его "родителей"
//
// Параметры:
//  КодЭлемента - Код адресного элемента.
//
// Возвращаемое значение:
//  Название адресного элемента и его родителей через запятую
//
Функция ПолучитьПолноеНазвание(Знач КодЭлемента) Экспорт

	КодОбласти = Цел(КодЭлемента / АдресныйКлассификаторКлиентСервер.МаскаОбласти());
	КодЭлемента = КодЭлемента % АдресныйКлассификаторКлиентСервер.МаскаОбласти();

	КодРайона = Цел(КодЭлемента / АдресныйКлассификаторКлиентСервер.МаскаРайона());
	КодЭлемента = КодЭлемента % АдресныйКлассификаторКлиентСервер.МаскаРайона();

	КодНаселенногоПункта = КодЭлемента;
	КодЭлемента = КодЭлемента;

	Название = "";
	НовыйКод = 0;

	Если КодОбласти > 0 Тогда
		НовыйКод = КодОбласти * АдресныйКлассификаторКлиентСервер.МаскаОбласти();
		Название = Название + ", " + АдресныйКлассификаторКлиентСервер.ПолучитьНазвание(ПолучитьСтруктуруАдресногоЭлемента(НовыйКод));
	КонецЕсли;

	Если КодРайона > 0 Тогда
		НовыйКод = НовыйКод + КодРайона * АдресныйКлассификаторКлиентСервер.МаскаРайона();
		Название = Название + ", " + АдресныйКлассификаторКлиентСервер.ПолучитьНазвание(ПолучитьСтруктуруАдресногоЭлемента(НовыйКод));
	КонецЕсли;

	Если КодНаселенногоПункта > 0 Тогда
		НовыйКод = НовыйКод + КодНаселенногоПункта;
		Название = Название + ", " + АдресныйКлассификаторКлиентСервер.ПолучитьНазвание(ПолучитьСтруктуруАдресногоЭлемента(НовыйКод));
	КонецЕсли;

	Если СтрДлина(Название) > 2 Тогда
		Название = Сред(Название, 3);
	КонецЕсли;

	Возврат Название;

КонецФункции

// Функция возвращает строку адресного элемента
//
Функция ПолучитьСтруктуруАдресногоЭлемента(КодЭлемента) Экспорт

	ТексЗапроса = "ВЫБРАТЬ
				  |	АдресныйКлассификатор.Код,
				  |	АдресныйКлассификатор.КодОбластиВКоде,
				  |	АдресныйКлассификатор.Наименование,
				  |	АдресныйКлассификатор.Сокращение,
				  |	АдресныйКлассификатор.Индекс,
				  |	АдресныйКлассификатор.ТипАдресногоЭлемента,
				  |	АдресныйКлассификатор.КодРайонаВКоде,
				  |	АдресныйКлассификатор.КодНаселенногоПунктаВКоде				  
				  |ИЗ
				  |	РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
				  |
				  |ГДЕ
				  |	АдресныйКлассификатор.Код = &КодЭлемента";
	
	Запрос = Новый Запрос(ТексЗапроса);
	Запрос.УстановитьПараметр("КодЭлемента", КодЭлемента);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Новый Структура("Код,Наименование,Сокращение,ТипАдресногоЭлемента,Индекс,КодОбластиВКоде,КодРайонаВКоде,КодНаселенногоПунктаВКоде",
								 Выборка.Код,
								 Выборка.Наименование,
								 Выборка.Сокращение,
								 Выборка.ТипАдресногоЭлемента,
								 Выборка.Индекс,
								 Выборка.КодОбластиВКоде,
								 Выборка.КодРайонаВКоде,
								 Выборка.КодНаселенногоПунктаВКоде);

	Иначе 
		Возврат АдресныйКлассификаторКлиентСервер.ПустаяСтруктураАдреса();
		
	КонецЕсли;
	
КонецФункции

// Функция определяет является ли последнее слово или первые символы в строке допустимым 
//  сокращением, и если является, то обрезает его из строки
//
// Параметры
//  СтрокаЭлемента - Строка в которой необходимо обрезать сокращение
// Возвращаемые значения
//  Структура, содержащая строку без сокращения и сокращение
//
Функция ОтделитьСокращение(Знач СтрокаЭлемента) Экспорт
	
	СтрокаДляРазбора	= СокрЛП(СтрокаЭлемента);
	СтрокаБезСокращения	= СтрокаДляРазбора;
	Сокращение			= "";
	
	// Сначала попытаемся выделить сокращение вначале
	ПозицияРазделителя = Найти(СтрокаДляРазбора, ".");
	
	Если ПозицияРазделителя > 0 Тогда
		
		ПервоеСлово = Лев(СтрокаДляРазбора, ПозицияРазделителя);
		
		Если ЯвляетсяАдреснымСокращением(ПервоеСлово) Тогда
			СтрокаБезСокращения = Сред(СтрокаДляРазбора,ПозицияРазделителя + 1);
			Сокращение = ПервоеСлово;
			Возврат Новый Структура("Наименование, Сокращение", СтрокаБезСокращения, Сокращение)
		КонецЕсли;
		
	КонецЕсли;			
	
	// ищем разделитель в конце						
	ПозицияРазделителя = Найти(СтрокаДляРазбора, " ");
	
	Пока СтрЧислоВхождений(СтрокаДляРазбора, " ") > 1 Цикл			
		СтрокаДляРазбора	= Лев(	СтрокаДляРазбора, 
									ПозицияРазделителя - 1) + "_" + Сред(СтрокаДляРазбора, ПозицияРазделителя + 1);
		ПозицияРазделителя	= Найти(СтрокаДляРазбора, " ");			
	КонецЦикла;
	
	ПоследнееСлово = Сред(СтрокаДляРазбора, ПозицияРазделителя + 1);
	
	Если ЯвляетсяАдреснымСокращением(ПоследнееСлово) Тогда
		СтрокаБезСокращения	= СокрЛП(Лев(СтрокаДляРазбора,ПозицияРазделителя));
		Сокращение			= ПоследнееСлово;
	КонецЕсли;			
	
	Возврат Новый Структура("Наименование, Сокращение", СтрокаБезСокращения, Сокращение);
	
КонецФункции

// Функция определяет является ли последнее слово в строке допустимым 
//  сокращением, и если является, то обрезает его из строки
//
// Параметры
//  СтрокаЭлемента - Строка в которой необходимо обрезать сокращение
// Возвращаемые значения
//  Обрезаную строку в случае, если есть сокращение и полученную строку в 
// обратном случае
Функция ОбрезатьСокращение(Знач СтрокаЭлемента) Экспорт

	Буфер				= СокрП(СтрокаЭлемента);
	ПозицияПослПробела	= Найти(Буфер, " ");

	Если ПозицияПослПробела = 0 Тогда
		Возврат СтрокаЭлемента;
	КонецЕсли;

	Пока СтрЧислоВхождений(Буфер, " ") > 1 Цикл
		Буфер = Лев(Буфер, ПозицияПослПробела - 1) + "_" + Сред(Буфер, ПозицияПослПробела + 1);
		ПозицияПослПробела = Найти(Буфер, " ");
	КонецЦикла;

	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Сокращение", Сред(СтрокаЭлемента, ПозицияПослПробела + 1));
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	АдресныеСокращения.Ссылка
	|ИЗ
	|	Справочник.АдресныеСокращения КАК АдресныеСокращения
	|
	|ГДЕ
	|	АдресныеСокращения.Сокращение = &Сокращение";

	Выборка = Запрос.Выполнить().Выбрать();

	Если Выборка.Следующий() Тогда
		Если ПустаяСтрока(СокрЛП(Лев(СтрокаЭлемента, ПозицияПослПробела - 1))) Тогда
			Возврат СтрокаЭлемента;
		Иначе
			Возврат Лев(СтрокаЭлемента, ПозицияПослПробела - 1);
		КонецЕсли;
	Иначе
		Возврат СтрокаЭлемента;
	КонецЕсли;

КонецФункции

// Функция по для переданной строки определят необходимость дополнить её
// сокращением
//
// Параметры
//  Название - Строка .для которой определяется необходимость дополнения 
// сокращением
//  Уровень - уровень, для которго необходимо составить список сокращений
// Возвращаемые значения
//  Возвращается Неопределено, если строку дополнять не нужно или список 
// значений с сокращениями в обратном случае
Функция ПолучитьСписокСокращений(Знач Название, Уровень) Экспорт

	Название = СокрЛП(Название);

	Если ПустаяСтрока(Название) Тогда
		Возврат Неопределено;
	КонецЕсли;

	Если ОбрезатьСокращение(Название) <> Название Тогда // было что обрезать
		Возврат Неопределено; // для строки не требуется допонение сокращением
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Уровень", Уровень);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	АдресныеСокращения.Ссылка
	|ИЗ
	|	Справочник.АдресныеСокращения КАК АдресныеСокращения
	|
	|ГДЕ
	|	АдресныеСокращения.Уровень = &Уровень";

	Выборка = Запрос.Выполнить().Выбрать();

	СписокСокращений = Новый СписокЗначений();

	Пока Выборка.Следующий() Цикл
		СписокСокращений.Добавить(Выборка.Ссылка.Сокращение);
	КонецЦикла;

	Если СписокСокращений.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат СписокСокращений;
	КонецЕсли;

КонецФункции

// Возвращает код области из адрессного классификатора по его Названию
//
Функция КодОбластиПоНазванию(Название) Экспорт
	
	Если ПустаяСтрока(Название) Тогда
		Возврат "";
	КонецЕсли;
	
	параметрНазвание = СокрЛ(Название);
	ПервыЙПробел = Найти(параметрНазвание, " ");
	Если ПервыйПробел <> 0 Тогда
		Назв = Лев(параметрНазвание, ПервыйПробел - 1);
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	АдресныйКлассификатор.КодОбластиВКоде,
	|	АдресныйКлассификатор.ТипАдресногоЭлемента,
	|	АдресныйКлассификатор.Наименование
	|ИЗ
	|	РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
	|
	|ГДЕ
	|	АдресныйКлассификатор.Наименование = &Наименование И
	|	АдресныйКлассификатор.ТипАдресногоЭлемента = &ТипАдресногоЭлемента";
	
	Запрос.УстановитьПараметр("Наименование", параметрНазвание);
	Запрос.УстановитьПараметр("ТипАдресногоЭлемента", 1);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() ТОгда
		Возврат "";
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		Возврат Выборка.КодОбластиВКоде;
	КонецЕсли;
	
КонецФункции

// Найти по индексу записи в адресном классификаторе.
//
// Параметры:
//    Индекс - Строка - индекс, по которому будет производиться поиск 
//
// Возвращаемое значение:
//    Структура - описание найденного. Содержит поля:
//        * Количество          - Число - количество найденных вариантов
//        * НайденнаяОбласть    - Строка - если найдена одна область
//        * НайденныйРайон      - Строка - если найден один район
//        * АдресВХранилище     - Строка - идентификатор сохраненной в хранилище таблицы с найденными вариантами
//
Функция НайтиЗаписиПоИндексу(Индекс) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("НайденнаяОбласть",     "");
	Результат.Вставить("НайденныйРайон",      "");
	Результат.Вставить("Количество",          0);
	
	// Проверим правильность ввода индекса
	Если СтрДлина(Индекс) <> 6 Тогда
		Возврат Результат;
	КонецЕсли;
	
	// 1.Найдем записи по индексу, а также записи родительских элементов, и сохраним все во временных таблицах 
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	АдресныйКлассификатор.ТипАдресногоЭлемента КАК ТипАдресногоЭлемента,
		|	АдресныйКлассификатор.Код                  КАК Код,
		|
		|	АдресныйКлассификатор.Наименование + "" "" + АдресныйКлассификатор.Сокращение КАК Наименование,
		|
		|	АдресныйКлассификатор.КодОбластиВКоде           КАК КодОбластиВКоде,
		|	АдресныйКлассификатор.КодРайонаВКоде            КАК КодРайонаВКоде,
		|	АдресныйКлассификатор.КодНаселенногоПунктаВКоде КАК КодНаселенногоПунктаВКоде
		|ПОМЕСТИТЬ 
		|	Адреса
		|ИЗ
		|	РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
		|ГДЕ
		|	АдресныйКлассификатор.Индекс = &Индекс
		|ИНДЕКСИРОВАТЬ ПО 
		|	КодОбластиВКоде, КодРайонаВКоде, КодНаселенногоПунктаВКоде
		|";
	Запрос.УстановитьПараметр("Индекс", Индекс);
	Запрос.Выполнить();
	РазложитьЭлементыАдресаВоВременныеТаблицы(МенеджерВременныхТаблиц);
	
	// 2.Получим списки областей и районов
	ЗапросОбластей = Новый Запрос;
	ЗапросОбластей.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	ЗапросОбластей.Текст = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Области.КодОбласти          КАК КодОбласти,
		|	Области.Наименование        КАК Наименование
		|ИЗ
		|	Области КАК Области
		|";
	ВыборкаОбластей = ЗапросОбластей.Выполнить().Выбрать();
	
	ЗапросРайонов = Новый Запрос;
	ЗапросРайонов.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	ЗапросРайонов.Текст = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Районы.КодРайона           КАК КодРайона,
		|	Районы.Наименование        КАК Наименование
		|ИЗ
		|	Районы КАК Районы
		|";
	ВыборкаРайонов = ЗапросРайонов.Выполнить().Выбрать();
	
	// 3.Анализируем количество областей и районов и на основании этого принимаем решение
	// Если не найдены области или районы - значит нет ни одного подходящего адреса - можно завершить поиск
	Если ВыборкаОбластей.Количество() = 0 Тогда
		Возврат Результат;
		// Если найдено несколько областей, то пользователю нужно будет указывать при выборе также область и район
	ИначеЕсли ВыборкаОбластей.Количество() > 1 Тогда
		ДетализацияДоУровня = 1;
		Результат.НайденнаяОбласть = "";
		Результат.НайденныйРайон = "";
		// Если найдено несколько районов, то пользователю нужно будет указывать при выборе также район
	ИначеЕсли ВыборкаРайонов.Количество() <> 1 Тогда // ВыборкаОбластей.Количество() = 1
		ДетализацияДоУровня = 2;
		ВыборкаОбластей.Следующий();
		Результат.НайденнаяОбласть = ВыборкаОбластей.Наименование;
		Результат.НайденныйРайон = "";
		// Если же найден только одну область и один район - то их выбирать не нужно
	ИначеЕсли ВыборкаРайонов.Количество() = 1 Тогда
		ДетализацияДоУровня = 3;
		ВыборкаОбластей.Следующий();
		Результат.НайденнаяОбласть = ВыборкаОбластей.Наименование;
		ВыборкаРайонов.Следующий();
		Результат.НайденныйРайон = ВыборкаРайонов.Наименование;
	КонецЕсли;
	
	// 4.Формируем список найденных адресов, с соответствующей детализацией
	ЗапросАдресов = Новый Запрос;
	ЗапросАдресов.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	ЗапросАдресов.Текст = "
		|ВЫБРАТЬ
		|	Адреса.ТипАдресногоЭлемента КАК ТипАдресногоЭлемента,
		|	Адреса.Код                  КАК Код,
		|
		|	ЕСТЬNULL(Улицы.Наименование, """")            КАК Улица,
		|	ЕСТЬNULL(Города.Наименование, """")           КАК Город,
		|	ЕСТЬNULL(НаселенныеПункты.Наименование, """") КАК НаселенныйПункт,
		|	ЕСТЬNULL(Районы.Наименование, """")           КАК Район,
		|	ЕСТЬNULL(Области.Наименование, """")          КАК Область,
		|	""""                                          КАК Описание
		|ИЗ
		|	Адреса КАК Адреса
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ 
		|	НаселенныеПункты КАК НаселенныеПункты
		|ПО 
		|	Адреса.Код = НаселенныеПункты.Код
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ 
		|	Города КАК Города
		|ПО 
		|	Адреса.Код = Города.Код
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	Районы КАК Районы
		|ПО 
		|	Адреса.Код = Районы.Код
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ 
		|	Области КАК Области
		|ПО 
		|	Адреса.Код = Области.Код
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ 
		|	Улицы КАК Улицы
		|ПО 
		|	Адреса.Код = Улицы.Код
		|
		|УПОРЯДОЧИТЬ ПО
		|	Улица,
		|	Код
		|";
	ВыборкаАдресов = ЗапросАдресов.Выполнить().Выбрать();
	
	// 5.Если найден один адрес - то в результат сохраняем компоненты адреса
	// Если же найдено несколько адресов то составляем таблицу адресов, 
	// формируя подробное описание адреса в зависимости от уровня детализации
	Количество = ВыборкаАдресов.Количество();
	Результат.Вставить("Количество", Количество);
	Если Количество = 1 Тогда
		ВыборкаАдресов.Следующий();
		Результат.Вставить("Область",ВыборкаАдресов.Область);
		Результат.Вставить("Район",  ВыборкаАдресов.Район);
		Результат.Вставить("Город",  ВыборкаАдресов.Город);
		Результат.Вставить("НаселенныйПункт", ВыборкаАдресов.НаселенныйПункт);
		Результат.Вставить("Улица",  ВыборкаАдресов.Улица);
		
	ИначеЕсли Количество > 1 Тогда
		НайденныеЗаписиПоИндексу = Новый ТаблицаЗначений;
		НайденныеЗаписиПоИндексу.Колонки.Добавить("Улица",    Новый ОписаниеТипов("Строка"));
		НайденныеЗаписиПоИндексу.Колонки.Добавить("Описание", Новый ОписаниеТипов("Строка"));
		НайденныеЗаписиПоИндексу.Колонки.Добавить("Код",      Новый ОписаниеТипов("Число"));
		НайденныеЗаписиПоИндексу.Колонки.Добавить("ТипАдресногоЭлемента", Новый ОписаниеТипов("Число"));
		
		Пока ВыборкаАдресов.Следующий() Цикл
			// Не добавляем повторы улиц для домов
			Если ВыборкаАдресов.ТипАдресногоЭлемента = 6 
			     И НайденныеЗаписиПоИндексу.Найти(ВыборкаАдресов.Улица, "Улица")<>Неопределено
			Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = НайденныеЗаписиПоИндексу.Добавить();
			НоваяСтрока.Код = ВыборкаАдресов.Код;
			НоваяСтрока.ТипАдресногоЭлемента = ВыборкаАдресов.ТипАдресногоЭлемента;
			НоваяСтрока.Улица = ?(ВыборкаАдресов.ТипАдресногоЭлемента > 4, ВыборкаАдресов.Улица, "< Без улицы >");
	
			НоваяСтрока.Описание = СформироватьОписаниеИзАдресныхЭлементов(ДетализацияДоУровня,
				ВыборкаАдресов.Область, ВыборкаАдресов.Район, ВыборкаАдресов.Город, ВыборкаАдресов.НаселенныйПункт);
		КонецЦикла;
		
		АдресВХранилище = ПоместитьВоВременноеХранилище(НайденныеЗаписиПоИндексу, Новый УникальныйИдентификатор);
		Результат.Вставить("АдресВХранилище", АдресВХранилище);
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Получить компоненты адресного элемента по его коду
//
// Параметры:
//    КодАдресногоЭлемента - Число     - код адресного элемента, по которому ищутся компоненты адреса 
//    Результат            - Структура - заполняется результатами поиска. Поля:
//        Область             - Строка - наименование найденной области
//        Район               - Строка - наименование найденного района
//        Город               - Строка - наименование найденного города
//        НаселенныйПункт     - Строка - наименование найденного населенного пункта
//        Улица               - Строка - наименование найденной улицы
//
Процедура ПоКодуАдресногоЭлементаВСтруктуруПолучитьЕгоКомпоненты(КодАдресногоЭлемента, Результат) Экспорт
	
	// 1.Раскладываем адрес и элементы адреса по временным таблицам
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	АдресныйКлассификатор.ТипАдресногоЭлемента КАК ТипАдресногоЭлемента,
		|	АдресныйКлассификатор.Код                  КАК Код,
		|
		|	АдресныйКлассификатор.Наименование + "" "" + АдресныйКлассификатор.Сокращение КАК Наименование,
		|
		|	АдресныйКлассификатор.КодОбластиВКоде           КАК КодОбластиВКоде,
		|	АдресныйКлассификатор.КодРайонаВКоде            КАК КодРайонаВКоде,
		|	АдресныйКлассификатор.КодНаселенногоПунктаВКоде КАК КодНаселенногоПунктаВКоде
		|ПОМЕСТИТЬ 
		|	Адреса
		|ИЗ
		|	РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
		|ГДЕ
		|	АдресныйКлассификатор.Код = &КодАдресногоЭлемента
		|";
	Запрос.УстановитьПараметр("КодАдресногоЭлемента", КодАдресногоЭлемента);
	Запрос.Выполнить();
	РазложитьЭлементыАдресаВоВременныеТаблицы(МенеджерВременныхТаблиц);
	
	// 2.Получаем наименование элементов адреса из временных таблиц
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Адреса.Код                                    КАК Код,
		|	ЕСТЬNULL(Области.Наименование, """")          КАК Область,
		|	ЕСТЬNULL(Районы.Наименование, """")           КАК Район,
		|	ЕСТЬNULL(Города.Наименование, """")           КАК Город,
		|	ЕСТЬNULL(НаселенныеПункты.Наименование, """") КАК НаселенныйПункт,
		|	ЕСТЬNULL(Улицы.Наименование, """")            КАК Улица
		|ИЗ
		|	Адреса КАК Адреса
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	Области КАК Области
		|ПО 
		|	Адреса.КодОбластиВКоде = Области.КодОбластиВКоде
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	Районы КАК Районы
		|ПО 
		|	Адреса.КодРайонаВКоде = Районы.КодРайонаВКоде
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	Города КАК Города
		|ПО 
		|	Адреса.КодНаселенногоПунктаВКоде = Города.КодГородаВКоде
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	НаселенныеПункты КАК НаселенныеПункты
		|ПО 
		|	Адреса.КодНаселенногоПунктаВКоде = НаселенныеПункты.КодНаселенногоПунктаВКоде
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ 
		|	Улицы КАК Улицы
		|ПО 
		|	Адреса.Код = Улицы.КодУлицыВКоде
		|";
	РезультатЗапроса = Запрос.Выполнить();
	
	// 3.Выводим полученные данные в результат
	Если РезультатЗапроса.Пустой() Тогда
		Результат.Вставить("Область", "");
		Результат.Вставить("Район", "");
		Результат.Вставить("Город", "");
		Результат.Вставить("НаселенныйПункт", "");
		Результат.Вставить("Улица", "");
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Результат.Вставить("Область", Выборка.Область);
		Результат.Вставить("Район", Выборка.Район);
		Результат.Вставить("Город", Выборка.Город);
		Результат.Вставить("НаселенныйПункт", Выборка.НаселенныйПункт);
		Результат.Вставить("Улица", Выборка.Улица);
	КонецЕсли;
	
КонецПроцедуры

// По переданным элементам адреса указывает, загружен ли КАТО по соответствующим элементам. 
//
// Параметры: 
//    КодАдресногоЭлемента - Число  - код адресного элемента, по которому ищутся компоненты адреса 
//    Дом                  - Строка - номер дома, если требуется
//    Корпус               - Строка - номер корпуса, если требуется
//    Квартира             - Строка - номер квартиры, если требуется
//
// Возвращаемое значение:
//    Структура - описание результата с полями:
//      * Индекс          - Строка - индекс адреса по переданным параметрам
//      * Область         - Строка - область по переданному коду
//      * Район           - Строка - район по переданному коду
//      * Город           - Строка - город по переданному коду
//      * НаселенныйПункт - Строка - населенный пункт по переданному коду
//      * Улица           - Строка - улица по переданному коду
//      * Дом             - Строка - переданный номер дома
//      * Корпус          - Строка - переданный номер корпуса
//      * Квартира        - Строка - переданный номер квартиры
//
Функция СтруктураАдреса(КодАдресногоЭлемента, Дом = "", Корпус = "", Квартира = "") Экспорт
	
	СтруктураАдреса = Новый Структура();
	ПоКодуАдресногоЭлементаВСтруктуруПолучитьЕгоКомпоненты(КодАдресногоЭлемента, СтруктураАдреса);
	
	// Получение индекса по коду
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	АдресныйКлассификатор.Индекс КАК Индекс
		|ИЗ
		|	РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
		|ГДЕ
		|	АдресныйКлассификатор.Код = &Код
		|";
	Запрос.УстановитьПараметр("Код", КодАдресногоЭлемента);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Индекс = ИндексАдреса(СтруктураАдреса.Область, 
			СтруктураАдреса.Район, СтруктураАдреса.Город, СтруктураАдреса.НаселенныйПункт, СтруктураАдреса.Улица, 
			Дом, Корпус);
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Индекс = Выборка.Индекс;
	КонецЕсли;
	СтруктураАдреса.Вставить("Индекс", Индекс);
	
	СтруктураАдреса.Вставить("Дом", Дом);
	СтруктураАдреса.Вставить("Корпус", Корпус);
	СтруктураАдреса.Вставить("Квартира", Квартира);
	Возврат СтруктураАдреса;
	
КонецФункции

// Определяет индекс по переданным области, району, городу, населенному пункту.
//
// Параметры: 
//    НазваниеОбласти           - Строка - название области с сокращением
//    НазваниеРайона            - Строка - название района с сокращением
//    НазваниеГорода            - Строка - название города с сокращением
//    НазваниеНаселенногоПункта - Строка - название населенного пункта с сокращением
//    Улица                     - Строка - название улицы с сокращением
//    НомерДома                 - Строка - номер дома, для которого необходимо получить индекс
//    НомерКорпуса              - Строка - номер корпуса
//    РодительИндекса           - Структура - заполняется данными найденного адресного элемента
//
// Возвращаемое значение:
//    Строка - шестизначный почтовый индекс
//
Функция ИндексАдреса(Знач НазваниеОбласти, Знач НазваниеРайона, Знач НазваниеГорода, Знач НазваниеНаселенногоПункта, Знач НазваниеУлицы, Знач НомерДома, Знач НомерКорпуса, РодительИндекса = Неопределено) Экспорт

	РодительИндекса = АдресныйКлассификаторКлиентСервер.ПустаяСтруктураАдреса();
	
	ОбъектАдреса = Новый Структура;
	ОбъектАдреса.Вставить("Индекс",          "-");	// Заранее некорректный индекс для поиска вариантов
	ОбъектАдреса.Вставить("Область",         НазваниеОбласти);
	ОбъектАдреса.Вставить("Район",           НазваниеРайона);
	ОбъектАдреса.Вставить("Город",           НазваниеГорода);
	ОбъектАдреса.Вставить("НаселенныйПункт", НазваниеНаселенногоПункта);
	ОбъектАдреса.Вставить("Улица",           НазваниеУлицы);
	ОбъектАдреса.Вставить("НомерДома",       НомерДома);
	ОбъектАдреса.Вставить("НомерКорпуса",    НомерКорпуса);

	РезультатАнализа = АнализСоответствияАдресаКлассификатору(ОбъектАдреса);
	
	Если РезультатАнализа.Варианты.Количество() = 0 Тогда
		// Нет ни одного варианта
		Возврат "";
	КонецЕсли;
	Вариант = РезультатАнализа.Варианты[0];
	
	// Восстанавливаем данные по коду-идентификатору в РодительИндекса
	Запрос = Новый Запрос( " 
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	АдресныйКлассификатор.Код                       КАК Код,
		|	АдресныйКлассификатор.КодОбластиВКоде           КАК КодОбластиВКоде,
		|	АдресныйКлассификатор.Наименование              КАК Наименование,
		|	АдресныйКлассификатор.Сокращение                КАК Сокращение,
		|	АдресныйКлассификатор.Индекс                    КАК Индекс,
		|	АдресныйКлассификатор.ТипАдресногоЭлемента      КАК ТипАдресногоЭлемента,
		|	АдресныйКлассификатор.КодРайонаВКоде            КАК КодРайонаВКоде,
		|	ВЫБОР
		| 		КОГДА АдресныйКлассификатор.ТипАдресногоЭлемента = 3
		|			ТОГДА АдресныйКлассификатор.КодНаселенногоПунктаВКоде 
		|		ИНАЧЕ 0
		|	КОНЕЦ                                           КАК КодГородаВКоде,
		|	АдресныйКлассификатор.КодНаселенногоПунктаВКоде КАК КодНаселенногоПунктаВКоде,
		|	ВЫБОР
		|		КОГДА АдресныйКлассификатор.ТипАдресногоЭлемента = 5
		| 			ТОГДА АдресныйКлассификатор.Код 
		|		ИНАЧЕ 0
		|	КОНЕЦ                                           КАК КодУлицыВКоде
		|ИЗ
		|	РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
		|ГДЕ
		|	АдресныйКлассификатор.Код = &Код
		|");
	Запрос.УстановитьПараметр("Код", Вариант.Код);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(РодительИндекса, Выборка);
	КонецЕсли;
	
	Возврат Вариант.Индекс;
КонецФункции

// Проверка адреса с возможно неуникальными полями на каком-то уровне.
//
// Параметры:
//    ОбъектАдреса - Структура - Содержит поля адреса:
//      * Индекс          - Строка - наименование с сокращением части адреса
//      * Область         - Строка - наименование с сокращением части адреса
//      * Район           - Строка - наименование с сокращением части адреса
//      * Город           - Строка - наименование с сокращением части адреса
//      * НаселенныйПункт - Строка - наименование с сокращением части адреса
//      * Улица           - Строка - наименование с сокращением части адреса
//
// Возвращаемое значение:
//     Структура - Результаты анализа. Содержит поля
//       * Ошибки   - Структура       - Описание ошибок, ключ - идентификатор части адреса (имя поля из ОбъектАдреса), значение - текст ошибки. 
//                                      Если нет ошибок, то возвращается пустая структура
//       * Варианты - ТаблицаЗначений - Описание найденных вариантов. Содержит колонки:
//           ** Код    - Число  - Код классификатора объекта - варианта
//           ** Индекс - Строка - Почтовый индекс объекта - варианта
//
Функция АнализСоответствияАдресаКлассификатору(Знач ОбъектАдреса) Экспорт
	Результат = Новый Структура("Варианты, Ошибки", Новый ТаблицаЗначений, Новый Структура);
	
	ВариантыАдреса = Результат.Варианты;
	ВариантыАдреса.Колонки.Добавить("Код",    Новый ОписаниеТипов("Число"));
	ВариантыАдреса.Колонки.Добавить("Индекс", Новый ОписаниеТипов("Строка"));
	ВариантыАдреса.Индексы.Добавить("Код");
	ВариантыАдреса.Индексы.Добавить("Индекс");
	
	Ошибки = Результат.Ошибки;
	
	// Область должна быть указана всегда, иначе дальше не проверяем
	Если ПустаяСтрока(ОбъектАдреса.Область) Тогда
		Ошибки.Вставить("Область", НСтр("ru = 'Не указана область адреса.'"));
		Возврат Результат;
	КонецЕсли;
	
	// 1. Проверка объекта на присутствие в классификаторе до населенного пункта
	
	Запрос = Новый Запрос;
	
	// Область
	ЧастиНазвания = НаименованиеИСокращение(ОбъектАдреса.Область);
	Запрос.УстановитьПараметр("ОбластьНаименование", ЧастиНазвания.Наименование);
	Запрос.УстановитьПараметр("ОбластьСокращение",   ЧастиНазвания.Сокращение);
	СтрокаСортировки = "";
	
	// Район
	РайонУстановлен = Не ПустаяСтрока(ОбъектАдреса.Район);
	Если РайонУстановлен Тогда
		ЧастиНазвания = НаименованиеИСокращение(ОбъектАдреса.Район);
		Запрос.УстановитьПараметр("РайонНаименование", ЧастиНазвания.Наименование);
		Запрос.УстановитьПараметр("РайонСокращение",   ЧастиНазвания.Сокращение);
		
		ТаблицаРайон = "
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	РегистрСведений.АдресныйКлассификатор КАК Район
			|ПО
			|	Район.Наименование = &РайонНаименование
			|	И Район.Сокращение = &РайонСокращение
			|	И Район.ТипАдресногоЭлемента = 2
			|	И Район.КодОбластиВКоде           = Область.КодОбластиВКоде 
			|	И Район.КодНаселенногоПунктаВКоде = 0
			|";
			
		СтрокаСортировки = СтрокаСортировки + ", Район.Наименование УБЫВ, Район.Сокращение УБЫВ";
	Иначе
		ТаблицаРайон = "";
	КонецЕсли;
	
	// Город
	ГородУстановлен = Не ПустаяСтрока(ОбъектАдреса.Город);
	Если ГородУстановлен Тогда
		ЧастиНазвания = НаименованиеИСокращение(ОбъектАдреса.Город);
		Запрос.УстановитьПараметр("ГородНаименование", ЧастиНазвания.Наименование);
		Запрос.УстановитьПараметр("ГородСокращение",   ЧастиНазвания.Сокращение);
		
		ТаблицаГород = "
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	РегистрСведений.АдресныйКлассификатор КАК Город
			|ПО
			|	Город.Наименование = &ГородНаименование
			|	И Город.Сокращение = &ГородСокращение
			|	И Город.ТипАдресногоЭлемента = 3
			|	И Город.КодОбластиВКоде  = Область.КодОбластиВКоде 
			|	И Город.КодРайонаВКоде   = " + ?(РайонУстановлен, "Район.КодРайонаВКоде", "0") + "
			|";
			
		СтрокаСортировки = СтрокаСортировки + ", Город.Наименование УБЫВ, Город.Сокращение УБЫВ";
	Иначе
		ТаблицаГород = "";
	КонецЕсли;
	
	// Населенный пункт
	НаселенныйПунктУстановлен = Не ПустаяСтрока(ОбъектАдреса.НаселенныйПункт);
	Если НаселенныйПунктУстановлен Тогда
		ЧастиНазвания = НаименованиеИСокращение(ОбъектАдреса.НаселенныйПункт);
		Запрос.УстановитьПараметр("НаселенныйПунктНаименование", ЧастиНазвания.Наименование);
		Запрос.УстановитьПараметр("НаселенныйПунктСокращение",   ЧастиНазвания.Сокращение);
		
		ТаблицаНаселенныйПункт = "
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	РегистрСведений.АдресныйКлассификатор КАК НаселенныйПункт
			|ПО
			|	НаселенныйПункт.Наименование = &НаселенныйПунктНаименование
			|	И НаселенныйПункт.Сокращение = &НаселенныйПунктСокращение
			|	И НаселенныйПункт.ТипАдресногоЭлемента = 4
			|	И НаселенныйПункт.КодОбластиВКоде  = Область.КодОбластиВКоде 
			|	И НаселенныйПункт.КодРайонаВКоде   = " + ?(РайонУстановлен, "Район.КодРайонаВКоде", "0") + "
			|";
			
		СтрокаСортировки = СтрокаСортировки + ", НаселенныйПункт.Наименование УБЫВ, НаселенныйПункт.Сокращение УБЫВ";
	Иначе
		ТаблицаНаселенныйПункт = "";
	КонецЕсли;
	
	// Населенный пункт
	УлицаУстановлена = Не ПустаяСтрока(ОбъектАдреса.Улица);
	Если УлицаУстановлена Тогда
		ЧастиНазвания = НаименованиеИСокращение(ОбъектАдреса.Улица);
		Запрос.УстановитьПараметр("УлицаНаименование", ЧастиНазвания.Наименование);
		Запрос.УстановитьПараметр("УлицаСокращение",   ЧастиНазвания.Сокращение);
		
		ТаблицаУлица = "
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	РегистрСведений.АдресныйКлассификатор КАК Улица
			|ПО
			|	Улица.Наименование = &УлицаНаименование
			|	И Улица.Сокращение = &УлицаСокращение
			|	И Улица.ТипАдресногоЭлемента = 5
			|	И Улица.КодОбластиВКоде  = Область.КодОбластиВКоде 
			|	И Улица.КодРайонаВКоде   = " + ?(РайонУстановлен, "Район.КодРайонаВКоде", "0") + "
			|	И (Улица.КодНаселенногоПунктаВКоде = " + ?(ГородУстановлен, "Город.КодНаселенногоПунктаВКоде", "0") + "
			|		ИЛИ Улица.КодНаселенногоПунктаВКоде = " + ?(НаселенныйПунктУстановлен, "НаселенныйПункт.КодНаселенногоПунктаВКоде", "0") + ")
			|";
			
		СтрокаСортировки = СтрокаСортировки + ", Улица.Наименование УБЫВ, Улица.Сокращение УБЫВ";
	Иначе
		ТаблицаУлица = "";
	КонецЕсли;
	
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	"""" КАК Индекс,
		|
		|	Область.Наименование КАК ОбластьНаименование, Область.Сокращение КАК ОбластьСокращение,	// Только для контроля
		|	Область.КодОбластиВКоде КАК КодОбластиВКоде,
		|	Область.Индекс                   КАК ОбластьИндекс
		|
		|" + ?(РайонУстановлен, "
		|		, Район.Наименование КАК РайонНаименование, Район.Сокращение КАК РайонСокращение	// Только для контроля
		|		, Район.Индекс         КАК РайонИндекс
		|		, Район.КодРайонаВКоде КАК КодРайонаВКоде
		|		, ВЫБОР КОГДА Район.Наименование ЕСТЬ NULL ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ КАК РайонНеНайден
		|	", "
		|		, """" КАК РайонИндекс
		|		, 0    КАК КодРайонаВКоде
		|		, ЛОЖЬ КАК РайонНеНайден
		|") + "
		|" + ?(ГородУстановлен, "
		|		, Город.Наименование КАК ГородНаименование, Город.Сокращение КАК ГородСокращение	// Только для контроля
		|		, Город.Индекс         КАК ГородИндекс
		|		, Город.КодНаселенногоПунктаВКоде КАК КодГородаВКоде
		|		, ВЫБОР КОГДА Город.Наименование ЕСТЬ NULL ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ КАК ГородНеНайден
		|	", "
		|		, """" КАК ГородИндекс
		|		, 0    КАК КодГородаВКоде
		|		, ЛОЖЬ КАК ГородНеНайден
		|") + "
		|" + ?(НаселенныйПунктУстановлен, "
		|		, НаселенныйПункт.Наименование КАК НаселенныйПунктНаименование, НаселенныйПункт.Сокращение КАК НаселенныйПунктСокращение	// Только для контроля
		|		, НаселенныйПункт.Индекс                    КАК НаселенныйПунктИндекс
		|		, НаселенныйПункт.КодНаселенногоПунктаВКоде КАК КодНаселенногоПунктаВКоде
		|		, ВЫБОР КОГДА НаселенныйПункт.Наименование ЕСТЬ NULL ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ КАК НаселенныйПунктНеНайден
		|	", "
		|		, """" КАК НаселенныйПунктИндекс
		|		, 0    КАК КодНаселенногоПунктаВКоде
		|		, ЛОЖЬ КАК НаселенныйПунктНеНайден
		|") + "
		|" + ?(УлицаУстановлена, "
		|		, Улица.Наименование КАК УлицаНаименование, Улица.Сокращение КАК УлицаСокращение	// Только для контроля
		|		, Улица.Индекс       КАК УлицаИндекс
		|		, Улица.Код          КАК КодУлицыВКоде
		|		, ВЫБОР КОГДА Улица.Наименование ЕСТЬ NULL ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ КАК УлицаНеНайдена
		|	", "
		|		, """" КАК УлицаИндекс
		|		, 0    КАК КодУлицыВКоде
		|		, ЛОЖЬ КАК УлицаНеНайдена
		|") + "
		|
		|," + ?(УлицаУстановлена, "Улица.Код",
				?(НаселенныйПунктУстановлен, "НаселенныйПункт.Код",
					?(ГородУстановлен, "Город.Код",
						?(РайонУстановлен, "Район.Код",
							"Область.Код")))) + "
		| КАК КодКлассификатора
		|
		|ИЗ	
		|	РегистрСведений.АдресныйКлассификатор КАК Область
		|" + ТаблицаРайон + "
		|" + ТаблицаГород + "
		|" + ТаблицаНаселенныйПункт + "
		|" + ТаблицаУлица + "
		|ГДЕ
		|	Область.Наименование = &ОбластьНаименование
		|	И Область.Сокращение = &ОбластьСокращение
		|УПОРЯДОЧИТЬ ПО
		|	Область.Наименование УБЫВ, Область.Сокращение УБЫВ
		|" + СтрокаСортировки + "
		|";
		
	Выборка = Запрос.Выполнить().Выбрать();
	
	// Может вернуться больше чем одна запись, это правильно - нарушение уникальности на одном уровне подчиненности допустимо
	ЕстьЗаписи = Выборка.Следующий();
	Если Не ЕстьЗаписи Тогда
		// Нет области, дальше не ищем
		Ошибки.Вставить("Область", ТекстОшибкиПоискаВИерархииКлассификатора(ОбъектАдреса, "Область") );
		Возврат Результат;
	КонецЕсли;
	
	// Для анализа результата поиска достаточно проверить первую запись, они упорядочены по максимальному соответствию
	Если РайонУстановлен И Выборка.РайонНеНайден Тогда
		Ошибки.Вставить("Район", ТекстОшибкиПоискаВИерархииКлассификатора(ОбъектАдреса, "Район") );
	КонецЕсли;
	
	Если ГородУстановлен И Выборка.ГородНеНайден Тогда
		Ошибки.Вставить("Город", ТекстОшибкиПоискаВИерархииКлассификатора(ОбъектАдреса, "Город") );
	КонецЕсли;
	
	Если НаселенныйПунктУстановлен И Выборка.НаселенныйПунктНеНайден Тогда
		Ошибки.Вставить("НаселенныйПункт", ТекстОшибкиПоискаВИерархииКлассификатора(ОбъектАдреса, "НаселенныйПункт") );
	КонецЕсли;
	
	Если УлицаУстановлена И Выборка.УлицаНеНайдена Тогда
		Ошибки.Вставить("Улица", ТекстОшибкиПоискаВИерархииКлассификатора(ОбъектАдреса, "Улица") );
	КонецЕсли;
	
	Если Ошибки.Количество() > 0 Тогда
		// Не определили адресный объект, вариантов нет
		Возврат Результат;
	КонецЕсли;
	
	// 2. Проверяем дома по всем найденным записям. Если хоть в одной записи дом найден, то считаем адрес корректным
	
	// Сводная таблица для проверки
	СтрокаКолонокИндексов = "ОбластьИндекс, РайонИндекс, ГородИндекс, НаселенныйПунктИндекс, УлицаИндекс";
	СтрокаКолонокКодов    = "КодОбластиВКоде, КодРайонаВКоде, КодГородаВКоде, КодНаселенногоПунктаВКоде, КодУлицыВКоде";
	СтрокаВсеКолонки      = СтрокаКолонокИндексов + ", " + СтрокаКолонокКодов;
	
	ТаблицаКодов = Новый ТаблицаЗначений;
	ТипЧисло     = Новый ОписаниеТипов("Число");
	ТипСтрока    = Новый ОписаниеТипов("Строка");
	Для Каждого КлючЗначение Из Новый Структура(СтрокаКолонокКодов) Цикл
		ТаблицаКодов.Колонки.Добавить(КлючЗначение.Ключ, ТипЧисло);
	КонецЦикла;
	Для Каждого КлючЗначение Из Новый Структура(СтрокаКолонокИндексов) Цикл
		ТаблицаКодов.Колонки.Добавить(КлючЗначение.Ключ, ТипСтрока);
	КонецЦикла;
	
	Пока ЕстьЗаписи Цикл
		ЗаполнитьЗначенияСвойств(ТаблицаКодов.Добавить(), Выборка, СтрокаВсеКолонки);
		КодКлассификатора = Выборка.КодКлассификатора;
		Если ЗначениеЗаполнено(КодКлассификатора) Тогда
			Вариант = ВариантыАдреса.Добавить();
			Вариант.Код    = КодКлассификатора;
			Вариант.Индекс = ПочтовыйИндексПоИерархии(Выборка);
		КонецЕсли;
		ЕстьЗаписи = Выборка.Следующий();
	КонецЦикла;
	
	Если ПустаяСтрока(ОбъектАдреса.НомерДома) И ПустаяСтрока(ОбъектАдреса.НомерКорпуса) Тогда
		// Не указаны для проверки, возвращаем варианты без домов
		Возврат Результат;
	КонецЕсли;
	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	" + СтрокаВсеКолонки + " 
		|ПОМЕСТИТЬ
		|	ТаблицаКодов
		|ИЗ
		|	&ТаблицаКодов КАК ПараметрТаблица
		|ИНДЕКСИРОВАТЬ ПО
		|	" + СтрокаКолонокКодов + "
		|;
		|ВЫБРАТЬ 
		|	Дома.Код                           КАК КодКлассификатора,
		|	Дома.Наименование                  КАК Наименование,
		|	Дома.Индекс                        КАК Индекс,
		|	ТаблицаКодов.ОбластьИндекс         КАК ОбластьИндекс,
		|	ТаблицаКодов.РайонИндекс           КАК РайонИндекс,
		|	ТаблицаКодов.ГородИндекс           КАК ГородИндекс,
		|	ТаблицаКодов.НаселенныйПунктИндекс КАК НаселенныйПунктИндекс,
		|	ТаблицаКодов.УлицаИндекс           КАК УлицаИндекс
		|ИЗ
		|	ТаблицаКодов
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.АдресныйКлассификатор КАК Дома
		|ПО	
		|	  Дома.ТипАдресногоЭлемента      = 6
		|	И Дома.КодОбластиВКоде           = ТаблицаКодов.КодОбластиВКоде 
		|	И Дома.КодРайонаВКоде            = ТаблицаКодов.КодРайонаВКоде
		|	И Дома.КодГородаВКоде            = ТаблицаКодов.КодГородаВКоде
		|	И Дома.КодНаселенногоПунктаВКоде = ТаблицаКодов.КодНаселенногоПунктаВКоде
		|	И Дома.КодУлицыВКоде             = ТаблицаКодов.КодУлицыВКоде
		|	
		|ГДЕ
		|	НЕ Дома.ТипАдресногоЭлемента ЕСТЬ NULL
		|");
	Запрос.УстановитьПараметр("ТаблицаКодов", ТаблицаКодов);
	
	РезультатВыборки = Запрос.Выполнить();
	Если РезультатВыборки.Пустой() Тогда
		// Нет данных о домах - не считаем ошибкой, варианты остаются из старшего объекта
		Возврат Результат;
	КонецЕсли;
	
	// 2.1 Получаем все возможные описания зданий из упакованных строк
	
	ВсеВариантыЗданий = Новый ТаблицаЗначений;
	ВсеВариантыЗданий.Колонки.Добавить("КодКлассификатора", ТипЧисло);
	ВсеВариантыЗданий.Колонки.Добавить("Описание",          ТипСтрока);
	ВсеВариантыЗданий.Колонки.Добавить("Индекс",            ТипСтрока);

	ВсеВариантыЗданий.Колонки.Добавить("ЭтоДиапазон",       Новый ОписаниеТипов("Булево"));
	
	Выборка = РезультатВыборки.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		// Индекс - ближайший по иерархии
		Индекс = ПочтовыйИндексПоИерархии(Выборка);
		
		// Идентификатор записи
		КодКлассификатора = Выборка.КодКлассификатора;
		
		// Разбиваем на детальные описания
		ВариантыОписаний = ВРег(СтрЗаменить( СокрЛП(СтрЗаменить(Выборка.Наименование, ",", Символы.ПС)), " ", ""));
		Для НомерСтроки = 1 По СтрЧислоСтрок(ВариантыОписаний) Цикл
			Описание = ВРег( СокрЛП( СтрПолучитьСтроку(ВариантыОписаний, НомерСтроки) ));
			Если Не ПустаяСтрока(Описание) Тогда
				НоваяСтрока = ВсеВариантыЗданий.Добавить();
				НоваяСтрока.КодКлассификатора = КодКлассификатора;
				НоваяСтрока.Описание          = Описание;
				НоваяСтрока.Индекс            = Индекс;
				НоваяСтрока.ЭтоДиапазон       = ЭтоДиапазон(Описание);
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	// 2.2 Оставляем во всех вариантах только строки, подходящие для нашего дома
	
	НомерДомаСтрокой    = ВРег(СокрЛП(СтрЗаменить(ОбъектАдреса.НомерДома, " ", "")));
	НомерКорпусаСтрокой = ВРег(СокрЛП(СтрЗаменить(ОбъектАдреса.НомерКорпуса, " ", "")));
	
	ДомУстановлен    = Не ПустаяСтрока(НомерДомаСтрокой);
	КорпусУстановлен = Не ПустаяСтрока(НомерКорпусаСтрокой);
	
	Если (Не ДомУстановлен) И (Не КорпусУстановлен) Тогда
		// Не указаны дома для проверки
		Возврат Результат;
	КонецЕсли;
	
	// Все варианты совместимости:
	//     номер дома может означать Дом
	//     номер корпуса - Корпус, Строение, Сооружение, Участок
	ВариантыДома    = Новый Структура("Дом");
	ВариантыКорпуса = Новый Структура("Корпус, Строение");
	
	КэшОписанияЗданий = Новый Соответствие;
	ТипыЧастейЗдания = ТипыЧастейЗдания();
	
	Позиция = ВсеВариантыЗданий.Количество() - 1;
	Пока Позиция >= 0 Цикл
		Вариант = ВсеВариантыЗданий[Позиция];
		
		Если ДомУстановлен Тогда
			
			// Проверяем все варианты дома и все варианты корпуса
			Для Каждого КлючЗначениеДом Из ВариантыДома Цикл
				ВариантПодходит = Ложь;
				
				Если КорпусУстановлен Тогда
					// Проверяем все варианты второй части
					Для Каждого КлючЗначениеКорпус Из ВариантыКорпуса Цикл
						Здание = Новый Структура;
						Здание.Вставить(КлючЗначениеДом.Ключ, НомерДомаСтрокой);
						Здание.Вставить(КлючЗначениеКорпус.Ключ, НомерКорпусаСтрокой);
						Если ВариантДомаКорпусаПодходит(Здание, Вариант, ТипыЧастейЗдания, КэшОписанияЗданий) Тогда
							ВариантПодходит = Истина;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				Иначе
					// Проверяем только дом
					Здание = Новый Структура;
					Здание.Вставить(КлючЗначениеДом.Ключ, НомерДомаСтрокой);
					Если ВариантДомаКорпусаПодходит(Здание, Вариант, ТипыЧастейЗдания, КэшОписанияЗданий) Тогда
						ВариантПодходит = Истина;
					КонецЕсли;
				КонецЕсли;
				
				Если ВариантПодходит Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
		Иначе
			// Проверяем только все варианты корпуса
			ВариантПодходит = Ложь;
			Для Каждого КлючЗначениеКорпус Из ВариантыКорпуса Цикл
				Здание = Новый Структура;
				Здание.Вставить(КлючЗначениеКорпус.Ключ, НомерКорпусаСтрокой);
				Если ВариантДомаКорпусаПодходит(Здание, Вариант, ТипыЧастейЗдания, КэшОписанияЗданий) Тогда
					ВариантПодходит = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;

		КонецЕсли;
		
		Если Не ВариантПодходит Тогда
			ВсеВариантыЗданий.Удалить(Вариант);
		КонецЕсли;
		
		Позиция = Позиция - 1;
	КонецЦикла;
	
	Если ВсеВариантыЗданий.Количество() = 0 Тогда
		// Не нашли ни одного варианта для здания
		Если КорпусУстановлен Тогда
			Ошибки.Вставить("Корпус", ТекстОшибкиПоискаВИерархииКлассификатора(ОбъектАдреса, "Корпус") );
			
		ИначеЕсли ДомУстановлен Тогда
			Ошибки.Вставить("Дом", ТекстОшибкиПоискаВИерархииКлассификатора(ОбъектАдреса, "Дом") );
			
		КонецЕсли;
		
		Возврат Результат;
	КонецЕсли;
	
	// 3. Проверяем индекс
	Если ПустаяСтрока(ОбъектАдреса.Индекс) Тогда
		// Нет данных для проверки
		Возврат Результат;
	КонецЕсли;
		
	// Варианты кодов будут перезаполнены по домам
	ВариантыАдреса.Очистить();
	
	// Во всех оставшихся вариантах ищем сначала точное описание дома, затем - в диапазонах
	ВсеВариантыЗданий.Сортировать("ЭтоДиапазон, Описание");
	ИндексыСуществуют = Ложь;
	ИндексНайден      = Ложь;
	Для Каждого Вариант Из ВсеВариантыЗданий Цикл
		Если Не ПустаяСтрока(Вариант.Индекс) Тогда
			ИндексыСуществуют = Истина;
		КонецЕсли;
		
		Если ОбъектАдреса.Индекс = Вариант.Индекс Тогда
			// Нашли точное соответствие по индексу
			ИндексНайден = Истина;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Вариант.КодКлассификатора) Тогда
			ВариантРезультата = ВариантыАдреса.Добавить();
			ВариантРезультата.Индекс = Вариант.Индекс;
			ВариантРезультата.Код    = Вариант.КодКлассификатора;
		КонецЕсли;
	КонецЦикла;
	
	Если ИндексыСуществуют И (Не ИндексНайден) Тогда
		// Не нашли совпадения по индексу, диагностируем ошибку
		Ошибки.Вставить("Индекс", ТекстОшибкиПоискаВИерархииКлассификатора(ОбъектАдреса, "Индекс") );
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Проверяет - загружен ли адресный элемент в базу.
//
// Параметры: 
//    НазваниеОбласти           - Строка - название области(с сокращением)
//    НазваниеРайона            - Строка - название района(с сокращением)
//    НазваниеГорода            - Строка - название города(с сокращением)
//    НазваниеНаселенногоПункта - Строка - название населенного пункта(с сокращением)
//    НазваниеУлицы             - Строка - название улицы(с сокращением)
//    Уровень                   - Число - уровень, который нужно проверить на загруженность
//
// Возвращаемое значение:
//    Булево - Истина, если адресный элемент загружен, Ложь - в противном случае.
//
Функция АдресныйЭлементЗагружен(Знач НазваниеОбласти, Знач НазваниеРайона = "", Знач НазваниеГорода = "", Знач НазваниеНаселенногоПункта = "", Знач НазваниеУлицы = "", Уровень = 1) Экспорт
	
	Родитель = АдресныйКлассификаторКлиентСервер.ПустаяСтруктураАдреса();
	Область = ПолучитьАдресныйЭлемент(НазваниеОбласти, 1,  Родитель);
	
	Если Уровень > 1 Тогда
		Если Область.Код > 0 Тогда
			Родитель = Область;
		КонецЕсли;
		Район = ПолучитьАдресныйЭлемент(НазваниеРайона, 2, Родитель);
		
		Если Уровень > 2 Тогда
			Если Район.Код > 0 Тогда
				Родитель = Район;
			КонецЕсли;
			Город = ПолучитьАдресныйЭлемент(НазваниеГорода, 3, Родитель);
			
			Если Уровень > 3 Тогда
				Если Город.Код > 0 Тогда
					Родитель = Город;
				КонецЕсли;
				НаселенныйПункт = ПолучитьАдресныйЭлемент(НазваниеНаселенногоПункта, 4, Родитель);
				
				Если Уровень > 4 Тогда
					Если НаселенныйПункт.Код > 0 Тогда
						Родитель = НаселенныйПункт;
					КонецЕсли;
					Улица = ПолучитьАдресныйЭлемент(НазваниеУлицы, 5, Родитель);
					
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	// Если не указан уровень или указан 1й уровень, то проверяем существование всех уровней
	Если Уровень=1 Тогда
		Запрос.Текст = "
			|               ВЫБРАТЬ ПЕРВЫЕ 1 Код ИЗ РегистрСведений.АдресныйКлассификатор ГДЕ ТипАдресногоЭлемента=2 И КодОбластиВКоде=&КодОбластиВКоде
			|ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ ПЕРВЫЕ 1 Код ИЗ РегистрСведений.АдресныйКлассификатор ГДЕ ТипАдресногоЭлемента=3 И КодОбластиВКоде=&КодОбластиВКоде
			|ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ ПЕРВЫЕ 1 Код ИЗ РегистрСведений.АдресныйКлассификатор ГДЕ ТипАдресногоЭлемента=4 И КодОбластиВКоде=&КодОбластиВКоде
			|ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ ПЕРВЫЕ 1 Код ИЗ РегистрСведений.АдресныйКлассификатор ГДЕ ТипАдресногоЭлемента=5 И КодОбластиВКоде=&КодОбластиВКоде
			|ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ ПЕРВЫЕ 1 Код ИЗ РегистрСведений.АдресныйКлассификатор ГДЕ ТипАдресногоЭлемента=6 И КодОбластиВКоде=&КодОбластиВКоде
			|";
		Запрос.УстановитьПараметр("КодОбластиВКоде", Область.КодОбластиВКоде);
		
	// Если указан 2й уровень, то проверяем существование районов в область
	ИначеЕсли Уровень = 2 Тогда
		Запрос.Текст = "
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|	Код
			|ИЗ
			|	РегистрСведений.АдресныйКлассификатор
			|ГДЕ
			|	ТипАдресногоЭлемента = 2
			|	И КодОбластиВКоде    = &КодОбластиВКоде
			|";
		Запрос.УстановитьПараметр("КодОбластиВКоде", Область.КодОбластиВКоде);
		
	// Если указан 3й уровень, то проверяем существование городов в районе
	ИначеЕсли Уровень = 3 Тогда
		Запрос.Текст = "
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	Код
		|ИЗ
		|	РегистрСведений.АдресныйКлассификатор
		|ГДЕ
		|	ТипАдресногоЭлемента = 3
		|	И КодОбластиВКоде    = &КодОбластиВКоде
		|	И КодРайонаВКоде     = &КодРайонаВКоде
		|";
		Запрос.УстановитьПараметр("КодОбластиВКоде", Область.КодОбластиВКоде);
		Запрос.УстановитьПараметр("КодРайонаВКоде",  Район.КодРайонаВКоде);
		
	// Если указан 4й уровень, то проверяем существование населенных пунктов в районе
	ИначеЕсли Уровень = 4 Тогда
		Запрос.Текст = "
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|	Код
			|ИЗ
			|	РегистрСведений.АдресныйКлассификатор
			|ГДЕ
			|	ТипАдресногоЭлемента = 4
			|	И КодОбластиВКоде    = &КодОбластиВКоде
			|	И КодРайонаВКоде     = &КодРайонаВКоде
			|";
		Запрос.УстановитьПараметр("КодОбластиВКоде", Область.КодОбластиВКоде);
		Запрос.УстановитьПараметр("КодРайонаВКоде",  Район.КодРайонаВКоде);
		
	// Если указан 5й уровень, то проверяем существование улиц в населенном пункте
	ИначеЕсли Уровень = 5 Тогда
		Запрос.Текст = "
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|	Код
			|ИЗ
			|	РегистрСведений.АдресныйКлассификатор
			|ГДЕ
			|	ТипАдресногоЭлемента = 5
			|	И КодОбластиВКоде            = &КодОбластиВКоде
			|	И КодРайонаВКоде             = &КодРайонаВКоде
			|	И (КодНаселенногоПунктаВКоде = &КодГородаВКоде
			|	  ИЛИ КодНаселенногоПунктаВКоде = &КодНаселенногоПунктаВКоде)
			|";
		Запрос.УстановитьПараметр("КодОбластиВКоде",           Область.КодОбластиВКоде);
		Запрос.УстановитьПараметр("КодРайонаВКоде",            Район.КодРайонаВКоде);
		Запрос.УстановитьПараметр("КодГородаВКоде",            Город.КодГородаВКоде);
		Запрос.УстановитьПараметр("КодНаселенногоПунктаВКоде", НаселенныйПункт.КодНаселенногоПунктаВКоде);
		
	// Если указан 6й уровень, то проверяем существование домов на улице
	ИначеЕсли Уровень = 6 Тогда
		Запрос.Текст = "
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|	Код
			|ИЗ
			|	РегистрСведений.АдресныйКлассификатор
			|ГДЕ
			|	ТипАдресногоЭлемента         = 6
			|	И КодОбластиВКоде            = &КодОбластиВКоде
			|	И КодРайонаВКоде             = &КодРайонаВКоде
			|	И (КодНаселенногоПунктаВКоде = &КодГородаВКоде
			|	  ИЛИ КодНаселенногоПунктаВКоде = &КодНаселенногоПунктаВКоде)
			|";
		Запрос.УстановитьПараметр("КодОбластиВКоде",           Область.КодОбластиВКоде);
		Запрос.УстановитьПараметр("КодРайонаВКоде",            Район.КодРайонаВКоде);
		Запрос.УстановитьПараметр("КодГородаВКоде",            Город.КодГородаВКоде);
		Запрос.УстановитьПараметр("КодНаселенногоПунктаВКоде", НаселенныйПункт.КодНаселенногоПунктаВКоде);
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	Возврат Не Результат.Пустой();
	
КонецФункции

// По полному наименованию адресного элемента выдает отдельно его имя, и отдельно его адресное сокращение
//
// Параметры:
//    СтрокаЭлемента     - Строка - строка элемента.
//    АдресноеСокращение - Строка - адресное сокращение.
//
// Возвращаемое значение:
//    Строка - имя и адресное сокращение.
//
Функция ИмяИАдресноеСокращение(Знач СтрокаЭлемента, АдресноеСокращение) Экспорт
	
	СтруктураАдресногоЭлемента = ОтделитьСокращение(СтрокаЭлемента);
	
	АдресноеСокращение = СокрЛП(СтруктураАдресногоЭлемента.Сокращение);
	Возврат СокрЛП(СтруктураАдресногоЭлемента.Наименование);
	
КонецФункции

// По переданным элементам адреса указывает, загружен ли КАТО по соответствующим элементам. 
//
// Параметры: 
//    НазваниеОбласти           - Строка - название области(с сокращением)
//    НазваниеРайона            - Строка - название района(с сокращением)
//    НазваниеГорода            - Строка - название города(с сокращением)
//    НазваниеНаселенногоПункта - Строка - название населенного пункта(с сокращением)
//    НазваниеУлицы             - Строка - название улицы(с сокращением)
//
// Возвращаемое значение:
//    Структура с полями:
//         Область         - Булево - область загружена
//         Район           - Булево - район загружен
//         Город           - Булево - город загружен
//         НаселенныйПункт - Булево - населенный пункт загружен
//         Улица           - Булево - улица загружена
//
Функция СтруктураЗагруженныхЭлементовАдреса(Знач НазваниеОбласти, Знач НазваниеРайона, Знач НазваниеГорода,
	Знач НазваниеНаселенногоПункта, Знач НазваниеУлицы) Экспорт

	СтруктураЗагруженных = Новый Структура("Область, Район, Город, НаселенныйПункт, Улица, Дом",
		АдресныйЭлементЗагружен(НазваниеОбласти, , , , , 1),
		АдресныйЭлементЗагружен(НазваниеОбласти, , , , , 2),
		АдресныйЭлементЗагружен(НазваниеОбласти, НазваниеРайона, , , , 3),
		АдресныйЭлементЗагружен(НазваниеОбласти, НазваниеРайона, НазваниеГорода, , , 4),
		АдресныйЭлементЗагружен(НазваниеОбласти, НазваниеРайона, НазваниеГорода, НазваниеНаселенногоПункта, , 5),
		АдресныйЭлементЗагружен(НазваниеОбласти, НазваниеРайона, НазваниеГорода, НазваниеНаселенногоПункта, НазваниеУлицы, 6));
	
	Возврат СтруктураЗагруженных;
КонецФункции

// Возвращает наименование области по коду.
//
// Параметры:
//    КодОбласти - Число - код области.
//
// Возвращаемое значение:
//    Строка - наименование области.
//
Функция НаименованиеОбластиПоКоду(КодОбласти) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТипАдресногоЭлемента",     1);
	Запрос.УстановитьПараметр("КодОбластиВКоде", КодОбласти);
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	АдресныйКлассификатор.Наименование КАК Наименование,
		|	АдресныйКлассификатор.Сокращение   КАК Сокращение
		|ИЗ
		|	РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
		|ГДЕ
		|	АдресныйКлассификатор.ТипАдресногоЭлемента = &ТипАдресногоЭлемента
		|	И АдресныйКлассификатор.КодОбластиВКоде = &КодОбластиВКоде
		|";
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда 
		Возврат "";
	КонецЕсли;

	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	НазваниеЭлемента = СокрЛП(Выборка.Наименование + " " + Выборка.Сокращение);
	Возврат НазваниеЭлемента;
	
КонецФункции

// Возвращает код Область по наименованию.
//
// Параметры:
//    Область - Строка - наименование области.
//
// Возвращаемое значение:
//    Число - код области.
//
Функция КодОбластиПоНаименованию(Область) Экспорт
	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	АдресныйКлассификатор.КодОбластиВКоде КАК Код
		|ИЗ
		|	РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
		|ГДЕ
		|	АдресныйКлассификатор.ТипАдресногоЭлемента = &ТипАдресногоЭлемента
		|	И АдресныйКлассификатор.Наименование = &Наименование
		|");
	Запрос.УстановитьПараметр("ТипАдресногоЭлемента", 1);
	Запрос.УстановитьПараметр("Наименование",         Область);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда 
		Возврат "";
	КонецЕсли;

	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	Возврат Выборка.Код;
КонецФункции

// Проверяет соответствие адреса КАТО по переданным индексу, области, району, городу, населенному пункту,
// улице, дому и корпусу, при этом выводит все поля по каждому найденному элементу адреса
//
// Параметры: 
//    УказанныйИндекс           - Строка - индекс
//    НазваниеОбласти           - Строка - название области (с сокращением)
//    НазваниеРайона            - Строка - название района (с сокращением)
//    НазваниеГорода            - Строка - название города (с сокращением)
//    НазваниеНаселенногоПункта - Строка - название населенного пункта (с сокращением)
//    НазваниеУлицы             - Строка - название улицы (с сокращением)
//    НомерДома                 - Строка - номер дома (владения, домовладения), для которого необходимо получить индекс 
//    НомерКорпуса              - Строка - номер корпуса (строения, литеры)
//
// Возвращаемое значение:
//    Структура - описание результата проверки:
//        Индекс          - Структура - структура полей найденного индекса
//        Область         - Структура - структура полей найденной области
//        Район           - Структура - структура полей найденного района
//        Город           - Структура - структура полей найденного города
//        НаселенныйПункт - Структура - структура полей найденного населенного пункта
//        Улица           - Структура - структура полей найденной улицы
//        Дом             - Структура - структура полей найденного дома
//        ЕстьОшибки      - Булево    - найдены ли ошибки при проверке
//        СтруктураОшибок - Структура - структура в которой в качестве ключа выступает название элемента (например )
//                                      а в качестве значения - подробный текст ошибки.
//
Функция ПроверитьСоответствиеАдресаКАТО(Знач УказанныйИндекс = "", Знач НазваниеОбласти = "", Знач НазваниеРайона = "", Знач НазваниеГорода = "", Знач НазваниеНаселенногоПункта = "", Знач НазваниеУлицы = "", Знач НомерДома = "", Знач НомерКорпуса = "") Экспорт
	
	ОбъектАдреса = Новый Структура;
	
	ОбъектАдреса.Вставить("Индекс",          УказанныйИндекс);
	ОбъектАдреса.Вставить("Область",         НазваниеОбласти);
	ОбъектАдреса.Вставить("Район",           НазваниеРайона);
	ОбъектАдреса.Вставить("Город",           НазваниеГорода);
	ОбъектАдреса.Вставить("НаселенныйПункт", НазваниеНаселенногоПункта);
	ОбъектАдреса.Вставить("Улица",           НазваниеУлицы);
	ОбъектАдреса.Вставить("НомерДома",       НомерДома);
	ОбъектАдреса.Вставить("НомерКорпуса",    НомерКорпуса);

	РезультатАнализа = АнализСоответствияАдресаКлассификатору(ОбъектАдреса);
	
	ЕстьОшибки = РезультатАнализа.Ошибки.Количество() > 0;
	Результат = Новый Структура;
	Результат.Вставить("ЕстьОшибки",      ЕстьОшибки);
	Результат.Вставить("СтруктураОшибок", РезультатАнализа.Ошибки);
	
	Результат.Вставить("Индекс",          "");
	Результат.Вставить("Область",         АдресныйКлассификаторКлиентСервер.ПустаяСтруктураАдреса() );
	Результат.Вставить("Район",           АдресныйКлассификаторКлиентСервер.ПустаяСтруктураАдреса() );
	Результат.Вставить("Город",           АдресныйКлассификаторКлиентСервер.ПустаяСтруктураАдреса() );
	Результат.Вставить("НаселенныйПункт", АдресныйКлассификаторКлиентСервер.ПустаяСтруктураАдреса() );
	Результат.Вставить("Улица",           АдресныйКлассификаторКлиентСервер.ПустаяСтруктураАдреса() );
	Результат.Вставить("Дом",             АдресныйКлассификаторКлиентСервер.ПустаяСтруктураАдреса() );
	
	Если РезультатАнализа.Варианты.Количество() = 0 Тогда
		// Нет ни одного варианта
		Возврат Результат;
	КонецЕсли;
	
	// Восстанавливаем данные по коду - идентификатору
	Вариант = РезультатАнализа.Варианты.Найти(УказанныйИндекс, "Индекс");
	Если Вариант = Неопределено Тогда
		// Нет точного совпадения, вернем первого
		Вариант = РезультатАнализа.Варианты[0];
		Результат.Вставить("Индекс", Вариант.Индекс);
	Иначе
		// Нашли точно
		Результат.Вставить("Индекс", УказанныйИндекс);
	КонецЕсли;
	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	Адрес.Код                       КАК Код,
		|	Адрес.Наименование              КАК Наименование,
		|	Адрес.Сокращение                КАК Сокращение,
		|	Адрес.Индекс                    КАК Индекс,
		|	Адрес.КодОбластиВКоде           КАК КодОбластиВКоде,
		|	Адрес.КодРайонаВКоде            КАК КодРайонаВКоде,
		|	0                               КАК КодГородаВКоде,
		|	Адрес.КодНаселенногоПунктаВКоде КАК КодНаселенногоПунктаВКоде,
		|	0                               КАК КодУлицыВКоде,
		|	Адрес.ТипАдресногоЭлемента      КАК ТипАдресногоЭлемента,
		|
		|	Улица.Код                       КАК УлицаКод,
		|	Улица.Наименование              КАК УлицаНаименование,
		|	Улица.Сокращение                КАК УлицаСокращение,
		|	Улица.Индекс                    КАК УлицаИндекс,
		|	Улица.КодОбластиВКоде           КАК УлицаКодОбластиВКоде,
		|	Улица.КодРайонаВКоде            КАК УлицаКодРайонаВКоде,
		|	0                               КАК УлицаКодГородаВКоде,
		|	Улица.КодНаселенногоПунктаВКоде КАК УлицаКодНаселенногоПунктаВКоде,
		|	Улица.Код                       КАК УлицаКодУлицыВКоде,
		|	Улица.ТипАдресногоЭлемента      КАК УлицаТипАдресногоЭлемента,
		|
		|	НаселенныйПункт.Код                       КАК НаселенныйПунктКод,
		|	НаселенныйПункт.Наименование              КАК НаселенныйПунктНаименование,
		|	НаселенныйПункт.Сокращение                КАК НаселенныйПунктСокращение,
		|	НаселенныйПункт.Индекс                    КАК НаселенныйПунктИндекс,
		|	НаселенныйПункт.КодОбластиВКоде           КАК НаселенныйПунктКодОбластиВКоде,
		|	НаселенныйПункт.КодРайонаВКоде            КАК НаселенныйПунктКодРайонаВКоде,
		|	0                                         КАК НаселенныйПунктКодГородаВКоде,
		|	НаселенныйПункт.КодНаселенногоПунктаВКоде КАК НаселенныйПунктКодНаселенногоПунктаВКоде,
		|	0                                         КАК НаселенныйПунктКодУлицыВКоде,
		|	НаселенныйПункт.ТипАдресногоЭлемента      КАК НаселенныйПунктТипАдресногоЭлемента,
		|
		|	Город.Код                       КАК ГородКод,
		|	Город.Наименование              КАК ГородНаименование,
		|	Город.Сокращение                КАК ГородСокращение,
		|	Город.Индекс                    КАК ГородИндекс,
		|	Город.КодОбластиВКоде           КАК ГородКодОбластиВКоде,
		|	Город.КодРайонаВКоде            КАК ГородКодРайонаВКоде,
		|	Город.КодНаселенногоПунктаВКоде КАК ГородКодГородаВКоде,
		|	0                               КАК ГородКодНаселенногоПунктаВКоде,
		|	0                               КАК ГородКодУлицыВКоде,
		|	Город.ТипАдресногоЭлемента      КАК ГородТипАдресногоЭлемента,
		|
		|	Район.Код                       КАК РайонКод,
		|	Район.Наименование              КАК РайонНаименование,
		|	Район.Сокращение                КАК РайонСокращение,
		|	Район.Индекс                    КАК РайонИндекс,
		|	Район.КодОбластиВКоде           КАК РайонКодОбластиВКоде,
		|	Район.КодРайонаВКоде            КАК РайонКодРайонаВКоде,
		|	0                               КАК РайонКодГородаВКоде,
		|	Район.КодНаселенногоПунктаВКоде КАК РайонКодНаселенногоПунктаВКоде,
		|	0                               КАК РайонКодУлицыВКоде,
		|	Район.ТипАдресногоЭлемента      КАК РайонТипАдресногоЭлемента,
		|
		|	Область.Код                       КАК ОбластьКод,
		|	Область.Наименование              КАК ОбластьНаименование,
		|	Область.Сокращение                КАК ОбластьСокращение,
		|	Область.Индекс                    КАК ОбластьИндекс,
		|	Область.КодОбластиВКоде           КАК ОбластьКодОбластиВКоде,
		|	Область.КодРайонаВКоде            КАК ОбластьКодРайонаВКоде,
		|	0                                 КАК ОбластьКодГородаВКоде,
		|	Область.КодНаселенногоПунктаВКоде КАК ОбластьКодНаселенногоПунктаВКоде,
		|	0                                 КАК ОбластьКодУлицыВКоде,
		|	Область.ТипАдресногоЭлемента      КАК ОбластьТипАдресногоЭлемента
		|
		|ИЗ
		|	РегистрСведений.АдресныйКлассификатор КАК Адрес
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.АдресныйКлассификатор КАК Улица
		|ПО
		|	  Улица.ТипАдресногоЭлемента      = 5
		|	И Улица.КодОбластиВКоде           = Адрес.КодОбластиВКоде
		|	И Улица.КодРайонаВКоде            = Адрес.КодРайонаВКоде
		|	И Улица.КодНаселенногоПунктаВКоде = Адрес.КодНаселенногоПунктаВКоде
		|	И Улица.Код                       = Адрес.Код
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.АдресныйКлассификатор КАК НаселенныйПункт
		|ПО
		|	  НаселенныйПункт.ТипАдресногоЭлемента      = 4
		|	И НаселенныйПункт.КодОбластиВКоде           = Адрес.КодОбластиВКоде
		|	И НаселенныйПункт.КодРайонаВКоде            = Адрес.КодРайонаВКоде
		|	И НаселенныйПункт.КодНаселенногоПунктаВКоде = Адрес.КодНаселенногоПунктаВКоде
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.АдресныйКлассификатор КАК Город
		|ПО
		|	  Город.ТипАдресногоЭлемента      = 3
		|	И Город.КодОбластиВКоде           = Адрес.КодОбластиВКоде
		|	И Город.КодРайонаВКоде            = Адрес.КодРайонаВКоде
		|	И Город.КодНаселенногоПунктаВКоде = Адрес.КодНаселенногоПунктаВКоде
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.АдресныйКлассификатор КАК Район
		|ПО
		|	  Район.ТипАдресногоЭлемента      = 2
		|	И Район.КодОбластиВКоде           = Адрес.КодОбластиВКоде
		|	И Район.КодРайонаВКоде            = Адрес.КодРайонаВКоде
		|	И Район.КодНаселенногоПунктаВКоде = 0
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.АдресныйКлассификатор КАК Область
		|ПО
		|	  Область.ТипАдресногоЭлемента      = 1
		|	И Область.КодОбластиВКоде           = Адрес.КодОбластиВКоде
		|	И Область.КодРайонаВКоде            = 0
		|	И Область.КодНаселенногоПунктаВКоде = 0
		|
		|ГДЕ
		|	Адрес.Код = &Код
		|");
	Запрос.УстановитьПараметр("Код", Вариант.Код);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьСтруктуруАдресаПоВыборке(Результат.Область,         Выборка, "Область");
		ЗаполнитьСтруктуруАдресаПоВыборке(Результат.Район,           Выборка, "Район");
		ЗаполнитьСтруктуруАдресаПоВыборке(Результат.Город,           Выборка, "Город");
		ЗаполнитьСтруктуруАдресаПоВыборке(Результат.НаселенныйПункт, Выборка, "НаселенныйПункт");
		ЗаполнитьСтруктуруАдресаПоВыборке(Результат.Улица,           Выборка, "Улица");
		ЗаполнитьСтруктуруАдресаПоВыборке(Результат.Дом,             Выборка);
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

Функция ЗапросСписокРеквизитовПолногоАдресаКАТО() Экспорт
	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	Улицы.Код                     КАК УлицыКод,
		|	Улицы.Наименование            КАК УлицыНаименование,
		|	Улицы.Сокращение              КАК УлицыСокращение,
		|	НаселенныеПункты.Код          КАК НаселенныеПунктыКод,
		|	НаселенныеПункты.Наименование КАК НаселенныеПунктыНаименование,
		|	НаселенныеПункты.Сокращение   КАК НаселенныеПунктыСокращение,
		|	Города.Код                    КАК ГородаКод,
		|	Города.Наименование           КАК ГородаНаименование,
		|	Города.Сокращение             КАК ГородаСокращение,
		|	Районы.Код                    КАК РайоныКод,
		|	Районы.Наименование           КАК РайоныНаименование,
		|	Районы.Сокращение             КАК РайоныСокращение,
		|	Области.Код                   КАК ОбластиКод,
		|	Области.Наименование          КАК ОбластиНаименование,
		|	Области.Сокращение            КАК ОбластиСокращение
		|ИЗ
		|	РегистрСведений.АдресныйКлассификатор КАК Адреса
		|	
		|ЛЕВОЕ СОЕДИНЕНИЕ 
		|	РегистрСведений.АдресныйКлассификатор КАК Области
		|ПО
		|	Области.ТипАдресногоЭлемента = 1
		|	И Области.КодОбластиВКоде           = Адреса.КодОбластиВКоде
		|	И Области.КодРайонаВКоде            = 0
		|	И Области.КодНаселенногоПунктаВКоде = 0
		|	 
		|ЛЕВОЕ СОЕДИНЕНИЕ 
		|	РегистрСведений.АдресныйКлассификатор КАК Районы
		|ПО
		|	Районы.ТипАдресногоЭлемента = 2
		|	И Районы.КодОбластиВКоде           = Адреса.КодОбластиВКоде
		|	И Районы.КодРайонаВКоде            = Адреса.КодРайонаВКоде
		|	И Районы.КодНаселенногоПунктаВКоде = 0
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ 
		|	РегистрСведений.АдресныйКлассификатор КАК Города
		|ПО
		|	Города.ТипАдресногоЭлемента = 3
		|	И Города.КодОбластиВКоде           = Адреса.КодОбластиВКоде
		|	И Города.КодРайонаВКоде            = Адреса.КодРайонаВКоде
		|	И Города.КодНаселенногоПунктаВКоде = Адреса.КодНаселенногоПунктаВКоде
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ 
		|	РегистрСведений.АдресныйКлассификатор КАК НаселенныеПункты
		|ПО
		|	НаселенныеПункты.ТипАдресногоЭлемента = 4
		|	И НаселенныеПункты.КодОбластиВКоде           = Адреса.КодОбластиВКоде
		|	И НаселенныеПункты.КодРайонаВКоде            = Адреса.КодРайонаВКоде
		|	И НаселенныеПункты.КодНаселенногоПунктаВКоде = Адреса.КодНаселенногоПунктаВКоде
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ 
		|	РегистрСведений.АдресныйКлассификатор КАК Улицы
		|ПО
		|	Улицы.ТипАдресногоЭлемента = 5
		|	И Улицы.КодОбластиВКоде           = Адреса.КодОбластиВКоде
		|	И Улицы.КодРайонаВКоде            = Адреса.КодРайонаВКоде
		|	И Улицы.КодНаселенногоПунктаВКоде = Адреса.КодНаселенногоПунктаВКоде
		|	И Улицы.Код                       = Адреса.Код
		|
		|ГДЕ
		|	Адреса.Код = &Код
		|");
		
	Возврат Запрос;
КонецФункции

Функция ПолучитьАдресныеСокращенияПоУровню(Уровень) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Уровень", Уровень);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	АдресныеСокращения.Сокращение
	|ИЗ
	|	Справочник.АдресныеСокращения КАК АдресныеСокращения
	|
	|ГДЕ
	|	АдресныеСокращения.Уровень = &Уровень";

	Выборка = Запрос.Выполнить().Выбрать();

	СписокСокращений = Новый СписокЗначений();

	Пока Выборка.Следующий() Цикл
		СписокСокращений.Добавить(СокрЛП(Выборка.Сокращение));
	КонецЦикла;

	Возврат СписокСокращений;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Функция определяет является ли слово допустимым адресным
//  сокращением
//
// Параметры
//  СтрокаЭлемента - строка для который выполняется проверка
// Возвращаемые значения
//  Истина - в случае, если переданное слово является сокращением
//  Ложь - в обратном случае
//
Функция ЯвляетсяАдреснымСокращением(знач СтрокаЭлемента)
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Сокращение", СтрокаЭлемента);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	АдресныеСокращения.Ссылка
	|ИЗ
	|	Справочник.АдресныеСокращения КАК АдресныеСокращения
	|
	|ГДЕ
	|	АдресныеСокращения.Сокращение = &Сокращение";

	Результат = Запрос.Выполнить();
    
	Возврат НЕ Результат.Пустой();
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Экспортные функции, вызываемые из формы выбора адресного классификатора

// Возвращает структуру ограничений по переданным параметрам со значениями адресных полей.
//
// Параметры: 
//    НазваниеОбласти           - Строка - название области с сокращением
//    НазваниеРайона            - Строка - название района с сокращением
//    НазваниеГорода            - Строка - название города с сокращением
//    НазваниеНаселенногоПункта - Строка - название населенного пункта с сокращением
//    НазваниеУлицы             - Строка - название улицы с сокращением
//    КодРодителя               - Число  - код родительского элемента
//    Уровень                   - Число  - текущий уровень элемента
//
// Возвращаемое значение:
//    Структура - описание ограничений со следующими полями:
//        КодОбластиВКоде           - Строка - код области для ограничения
//        КодРайонаВКоде            - Строка - код района для ограничения
//        КодГородаВКоде            - Строка - код города для ограничения
//        КодНаселенногоПунктаВКоде - Строка - код населенного пункта для ограничения
//        КодУлицыВКоде             - Строка - код улицы для ограничения
//        ТипАдресногоЭлемента      - Число - текущий уровень элемента
//
Функция ВернутьСтруктуруОграниченийПоРодителю(Знач НазваниеОбласти, Знач НазваниеРайона, Знач НазваниеГорода, Знач НазваниеНаселенногоПункта, Знач НазваниеУлицы, КодРодителя, Уровень) Экспорт
	
	СтруктураОграничений = Новый Структура();
	
	РодительскийЭлемент = ВернутьСтруктуруАдресногоКлассификатораПоАдреснымЭлементам(
		НазваниеОбласти, НазваниеРайона, НазваниеГорода, НазваниеНаселенногоПункта, НазваниеУлицы);
	
	УровеньРодителя = РодительскийЭлемент.ТипАдресногоЭлемента;
	КодРодителя     = РодительскийЭлемент.Код;
	
	СтруктураОграничений.Вставить("ТипАдресногоЭлемента", Уровень);
	
	ДобавитьКодВСтруктуру(Уровень, УровеньРодителя, СтруктураОграничений,
		"КодОбластиВКоде", 1, РодительскийЭлемент.КодОбластиВКоде);
	
	ДобавитьКодВСтруктуру(Уровень, УровеньРодителя, СтруктураОграничений,
		"КодРайонаВКоде", 2, РодительскийЭлемент.КодРайонаВКоде);
		
	Если НазваниеНаселенногоПункта = "" И Уровень <> 4 Тогда
		ДобавитьКодВСтруктуру(Уровень, УровеньРодителя, СтруктураОграничений,
			"КодГородаВКоде", 3, РодительскийЭлемент.КодГородаВКоде);
	Иначе 
		ДобавитьКодВСтруктуру(Уровень, УровеньРодителя, СтруктураОграничений,
			"КодНаселенногоПунктаВКоде", 4, РодительскийЭлемент.КодНаселенногоПунктаВКоде);
	КонецЕсли;
	
	ДобавитьКодВСтруктуру(Уровень, УровеньРодителя, СтруктураОграничений,
		"КодУлицыВКоде", 5, ?(Уровень<5, 0, РодительскийЭлемент.КодУлицыВКоде));
	
	Возврат СтруктураОграничений;
КонецФункции

// Возвращает строку(структуру) адресного классификатора по значениям адресных элементов
//
// Параметры: 
//    НазваниеОбласти           - Строка - название области с сокращением
//    НазваниеРайона            - Строка - название района с сокращением
//    НазваниеГорода            - Строка - название города с сокращением
//    НазваниеНаселенногоПункта - Строка - название населенного пункта с сокращением
//    НазваниеУлицы             - Строка - название улицы с сокращением
//
// Возвращаемое значение:
//    Структура - описание полей по найденому адресному элементу (см. функцию "АдресныйКлассификаторКлиентСервер.ПустаяСтруктураАдреса()")
//
Функция ВернутьСтруктуруАдресногоКлассификатораПоАдреснымЭлементам(Знач НазваниеОбласти, Знач НазваниеРайона, Знач НазваниеГорода, Знач НазваниеНаселенногоПункта, Знач НазваниеУлицы) Экспорт
	
	РодительскийЭлемент = АдресныйКлассификаторКлиентСервер.ПустаяСтруктураАдреса();
	
	Область = ПолучитьАдресныйЭлемент(НазваниеОбласти, 1, РодительскийЭлемент);
	Если Область.Код > 0 Тогда
		РодительскийЭлемент = Область;
	КонецЕсли;
	
	Район = ПолучитьАдресныйЭлемент(НазваниеРайона, 2, РодительскийЭлемент);
	Если Район.Код > 0 Тогда
		РодительскийЭлемент = Район;
	КонецЕсли;
	
	Город = ПолучитьАдресныйЭлемент(НазваниеГорода, 3, РодительскийЭлемент);
	Если Город.Код > 0 Тогда
		РодительскийЭлемент = Город;
	КонецЕсли;
	
	НаселенныйПункт = ПолучитьАдресныйЭлемент(НазваниеНаселенногоПункта, 4, РодительскийЭлемент);
	Если НаселенныйПункт.Код > 0 Тогда
		РодительскийЭлемент = НаселенныйПункт;
	КонецЕсли;
	
	Улица = ПолучитьАдресныйЭлемент(НазваниеУлицы, 5, РодительскийЭлемент);
	Если Улица.Код > 0 Тогда
		РодительскийЭлемент = Улица;
	КонецЕсли;
	
	Если РодительскийЭлемент = Неопределено Тогда
		Возврат АдресныйКлассификаторКлиентСервер.ПустаяСтруктураАдреса()
	Иначе
		Возврат РодительскийЭлемент;
	КонецЕсли;
	
КонецФункции

// Процедура очищает потомков определенного адресного элемента
//
// Параметры:
//    Область         - Строка - строка, куда будет помещено строковое представление "родительской" области.
//    Район           - Строка - строка, куда будет помещено строковое представление "родительского" района.
//    Город           - Строка - строка, куда будет помещено строковое представление "родительского" города.
//    НаселенныйПункт - Строка - строка, куда будет помещено строковое представление "родительского" населенного пункта.
//    Улица           - Строка - строка, куда будет помещено строковое представление "родительской" улицы.
//    Дом             - Строка - строка, куда будет помещено строковое представление "родительского" номера дома.
//    Корпус          - Строка - строка, куда будет помещено строковое представление "родительского" номера корпуса дома.
//    Квартира        - Строка - строка, куда будет помещено строковое представление "родительского" номера квартиры.
//    Уровень         - Число - уровень адресного элемента.
//
Процедура ОчиститьПотомковПоУровнюАдресногоЭлемента(Область, Район, Город, НаселенныйПункт, Улица, Дом, Корпус, Квартира, Уровень) Экспорт
	
	// Очистка адресного элемента и всего, что ниже него по иерархии
	Если Уровень = 1 Тогда
		Район           = "";
		Город           = "";
		НаселенныйПункт = "";
		Улица           = "";
		Дом             = "";
		Корпус          = "";
		Квартира        = "";
	
	ИначеЕсли Уровень = 2 Тогда
		Город           = "";
		НаселенныйПункт = "";
		Улица           = "";
		Дом             = "";
		Корпус          = "";
		Квартира        = "";
	
	ИначеЕсли Уровень = 3 Тогда
		НаселенныйПункт = "";
		Улица           = "";
		Дом             = "";
		Корпус          = "";
		Квартира        = "";
		
	ИначеЕсли Уровень = 4 Тогда
		Улица    = "";
		Дом      = "";
		Корпус   = "";
		Квартира = "";
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции для работы с адресным кодом

// Функция по адресу возвращает структуру ограничений
//
// Параметры:
//    ПолеОбласти           - Строка - область.
//    ПолеРайона            - Строка - район.
//    ПолеГорода            - Строка - город.
//    ПолеНаселенногоПункта - Строка - населенный пункт.
//    ИмяУлицы              - Строка - улица.
//    УровеньЭлемента       - Число  - уровень адресного элемента.
//
// Возвращаемое значение:
//    Структура - структура ограничений.
//
Функция ПолучитьСтруктуруОграниченийПоАдресу(ПолеОбласти, ПолеРайона, ПолеГорода, ПолеНаселенногоПункта, ИмяУлицы, УровеньЭлемента) 
	
	Если УровеньЭлемента > 1 Тогда
		
		КодРодителя = Неопределено;
		СтруктураОграничений = ВернутьСтруктуруОграниченийПоРодителю(
			ПолеОбласти, ПолеРайона, ПолеГорода, ПолеНаселенногоПункта, ИмяУлицы, 
			КодРодителя, УровеньЭлемента);
		
	Иначе
		СтруктураОграничений = Новый Структура();
		СтруктураОграничений.Вставить("ТипАдресногоЭлемента", УровеньЭлемента);
	КонецЕсли;
	
	Возврат СтруктураОграничений;
КонецФункции

// Процедура добавляет не нулевое значение кода в структуру
// 
// Параметры:
//    УровеньРодителя - Число - уровень родителя.
//    ДанныеСтруктуры - Структура - структура, в которую необходимо добавить данные.
//    ИмяЭлемента     - Строка - имя элемента.
//    УровеньЭлемента - Число - уровень элемента.
//    КодЭлемента     - Число - код элемента.
//
Процедура ДобавитьКодВСтруктуру(МаксимальныйУровень, УровеньРодителя, ДанныеСтруктуры, ИмяЭлемента, УровеньЭлемента, КодЭлемента)
	
	Если КодЭлемента<>0 Или УровеньРодителя>=УровеньЭлемента Тогда
		// Однозначно надо
		ДанныеСтруктуры.Вставить(ИмяЭлемента, КодЭлемента);
	ИначеЕсли КодЭлемента=0 И МаксимальныйУровень>УровеньЭлемента Тогда
		ДанныеСтруктуры.Вставить(ИмяЭлемента, КодЭлемента);
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Локальные служебные процедуры и функции

// Раскладывает данные во временные таблицы Области, Районы, Города, НаселенныеПункты, Улицы/
// Получаемые таблицы соответствуют адресам,полученным из временной таблицы Адреса в менеджере временных таблиц
//
// Параметры:
//    МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - менеджер временных таблиц, в котором уже должна быть временная таблица Адреса
//
Процедура РазложитьЭлементыАдресаВоВременныеТаблицы(МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	Адреса.Код КАК Код,
		|	АдресныйКлассификатор.Код КАК КодОбласти,
		|	АдресныйКлассификатор.Наименование + "" "" + АдресныйКлассификатор.Сокращение КАК Наименование,
		|	Адреса.КодОбластиВКоде КАК КодОбластиВКоде
		|ПОМЕСТИТЬ 
		|	Области
		|ИЗ
		|	Адреса КАК Адреса
		|ЛЕВОЕ СОЕДИНЕНИЕ 
		|	РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
		|ПО 
		|	Адреса.КодОбластиВКоде = АдресныйКлассификатор.КодОбластиВКоде
		|ГДЕ
		|	АдресныйКлассификатор.ТипАдресногоЭлемента = 1
		|;////////////////////////////////////////////////////////////////////////////////
		|
		|ВЫБРАТЬ
		|	Адреса.Код КАК Код,
		|	АдресныйКлассификатор.Код КАК КодРайона,
		|	АдресныйКлассификатор.Наименование + "" "" + АдресныйКлассификатор.Сокращение КАК Наименование,
		|	Адреса.КодРайонаВКоде КАК КодРайонаВКоде,
		|	Адреса.КодОбластиВКоде КАК КодОбластиВКоде
		|ПОМЕСТИТЬ 
		|	Районы
		|ИЗ
		|	Адреса КАК Адреса
		|ЛЕВОЕ СОЕДИНЕНИЕ 
		|	РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
		|ПО 
		|	Адреса.КодОбластиВКоде = АдресныйКлассификатор.КодОбластиВКоде
		|	И Адреса.КодРайонаВКоде = АдресныйКлассификатор.КодРайонаВКоде
		|ГДЕ
		|	АдресныйКлассификатор.ТипАдресногоЭлемента = 2
		|;////////////////////////////////////////////////////////////////////////////////
		|
		|ВЫБРАТЬ
		|	Адреса.Код КАК Код,
		|	АдресныйКлассификатор.Код КАК КодГорода,
		|	АдресныйКлассификатор.Наименование + "" "" + АдресныйКлассификатор.Сокращение КАК Наименование,
		|	Адреса.КодНаселенногоПунктаВКоде КАК КодГородаВКоде,
		|	Адреса.КодРайонаВКоде КАК КодРайонаВКоде,
		|	Адреса.КодОбластиВКоде КАК КодОбластиВКоде
		|ПОМЕСТИТЬ 
		|	Города
		|ИЗ
		|	Адреса КАК Адреса
		|ЛЕВОЕ СОЕДИНЕНИЕ 
		|	РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
		|ПО 
		|	Адреса.КодОбластиВКоде = АдресныйКлассификатор.КодОбластиВКоде
		|	И Адреса.КодРайонаВКоде = АдресныйКлассификатор.КодРайонаВКоде
		|	И Адреса.КодНаселенногоПунктаВКоде = АдресныйКлассификатор.КодНаселенногоПунктаВКоде
		|ГДЕ
		|	АдресныйКлассификатор.ТипАдресногоЭлемента = 3
		|;////////////////////////////////////////////////////////////////////////////////
		|
		|ВЫБРАТЬ
		|	Адреса.Код КАК Код,
		|	АдресныйКлассификатор.Код КАК КодНаселенногоПункта,
		|	АдресныйКлассификатор.Наименование + "" "" + АдресныйКлассификатор.Сокращение КАК Наименование,
		|	Адреса.КодНаселенногоПунктаВКоде КАК КодНаселенногоПунктаВКоде,
		|	Адреса.КодРайонаВКоде КАК КодРайонаВКоде,
		|	Адреса.КодОбластиВКоде КАК КодОбластиВКоде
		|ПОМЕСТИТЬ 
		|	НаселенныеПункты
		|ИЗ
		|	Адреса КАК Адреса
		|ЛЕВОЕ СОЕДИНЕНИЕ 
		|	РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
		|ПО 
		|	Адреса.КодОбластиВКоде = АдресныйКлассификатор.КодОбластиВКоде
		|	И Адреса.КодРайонаВКоде = АдресныйКлассификатор.КодРайонаВКоде
		|	И Адреса.КодНаселенногоПунктаВКоде = АдресныйКлассификатор.КодНаселенногоПунктаВКоде
		|ГДЕ
		|	АдресныйКлассификатор.ТипАдресногоЭлемента = 4
		|;////////////////////////////////////////////////////////////////////////////////
		|
		|ВЫБРАТЬ
		|	Адреса.Код КАК Код,
		|	АдресныйКлассификатор.Код КАК КодУлицыВКоде,
		|	АдресныйКлассификатор.Наименование + "" "" + АдресныйКлассификатор.Сокращение КАК Наименование,
		|	Адреса.КодНаселенногоПунктаВКоде КАК КодНаселенногоПунктаВКоде,
		|	Адреса.КодРайонаВКоде КАК КодРайонаВКоде,
		|	Адреса.КодОбластиВКоде КАК КодОбластиВКоде
		|ПОМЕСТИТЬ 
		|	Улицы
		|ИЗ
		|	Адреса КАК Адреса
		|ЛЕВОЕ СОЕДИНЕНИЕ 
		|	РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
		|ПО 
		|	Адреса.КодОбластиВКоде = АдресныйКлассификатор.КодОбластиВКоде
		|	И Адреса.КодРайонаВКоде = АдресныйКлассификатор.КодРайонаВКоде
		|	И Адреса.КодНаселенногоПунктаВКоде = АдресныйКлассификатор.КодНаселенногоПунктаВКоде
		|	И Адреса.Код = АдресныйКлассификатор.Код
		|ГДЕ
		|	АдресныйКлассификатор.ТипАдресногоЭлемента = 5
		|");

	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Выполнить();
КонецПроцедуры

// Функция ищет требуемый адресный элемент по названию и типу и возвращает первый найденный. 
// В качестве дополнения может быть задан элемент "родитель"
//
// Параметры:
//    НазваниеЭлемента - Строка    - Название адресного элемента с сокращением
//    ТипЭлемента      - Число     - Тип искомого адресного элемента (1 - область, 2 - район и т.п.)
//    ЭлементРодитель  - Структура - Описывает родительский элемент
//
// Возвращаемое значение:
//    Структура - описание адресного элемента
//
Функция ПолучитьАдресныйЭлемент(Знач НазваниеЭлемента, ТипЭлемента, ЭлементРодитель)
	
	Если (СокрЛП(НазваниеЭлемента) = "") ИЛИ (ТипЭлемента = 0) Тогда
		Возврат АдресныйКлассификаторКлиентСервер.ПустаяСтруктураАдреса();
	КонецЕсли;
	
	// смотрим есть ли в имени адресное сокращение этого уровня
	// если есть, то ищем по наименованию и адресному сокращению
	АдресноеСокращение = "";
	НазваниеЭлемента = ИмяИАдресноеСокращение(НазваниеЭлемента, АдресноеСокращение);
	
	Запрос = Новый Запрос();
	
	ОграничениеПоКоду = "";
	Если ЭлементРодитель.Код > 0 Тогда // проверка на соответствие подчинению родителю
		
		Если ЭлементРодитель.ТипАдресногоЭлемента <= 5 Тогда
			
			Если ЭлементРодитель.КодОбластиВКоде <> 0 Тогда
				ОграничениеПоКоду = ОграничениеПоКоду + Символы.ПС
				+ " И (АдресныйКлассификатор.КодОбластиВКоде = &КодОбластиВКоде)";
				Запрос.УстановитьПараметр("КодОбластиВКоде", ЭлементРодитель.КодОбластиВКоде);
			КонецЕсли;
			
			Если ЭлементРодитель.КодРайонаВКоде <> 0 Тогда
				ОграничениеПоКоду = ОграничениеПоКоду + Символы.ПС 
				+ "  И (АдресныйКлассификатор.КодРайонаВКоде = &КодРайонаВКоде)";
				Запрос.УстановитьПараметр("КодРайонаВКоде", ЭлементРодитель.КодРайонаВКоде);
			КонецЕсли;
			
			Если ЭлементРодитель.КодГородаВКоде <> 0 Тогда
				ОграничениеПоКоду = ОграничениеПоКоду + Символы.ПС 
				+ "  И (АдресныйКлассификатор.КодНаселенногоПунктаВКоде = &КодГородаВКоде)";
				Запрос.УстановитьПараметр("КодГородаВКоде", ЭлементРодитель.КодГородаВКоде);
			КонецЕсли;
			
			Если ЭлементРодитель.КодНаселенногоПунктаВКоде <> 0 Тогда
				ОграничениеПоКоду = ОграничениеПоКоду + Символы.ПС 
				+ "  И (АдресныйКлассификатор.КодНаселенногоПунктаВКоде = &КодНаселенногоПунктаВКоде)";
				Запрос.УстановитьПараметр("КодНаселенногоПунктаВКоде", ЭлементРодитель.КодНаселенногоПунктаВКоде);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// ограничение на адресное сокращение
	Если АдресноеСокращение <> "" Тогда
		ОграничениеПоКоду = ОграничениеПоКоду + Символы.ПС + "  И (АдресныйКлассификатор.Сокращение = &АдресноеСокращение)";
		Запрос.УстановитьПараметр("АдресноеСокращение", АдресноеСокращение);
	КонецЕсли;
	
	Запрос.Текст = " 
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	АдресныйКлассификатор.Код КАК Код,
		|	АдресныйКлассификатор.КодОбластиВКоде КАК КодОбластиВКоде,
		|	АдресныйКлассификатор.Наименование КАК Наименование,
		|	АдресныйКлассификатор.Сокращение КАК Сокращение,
		|	АдресныйКлассификатор.Индекс КАК Индекс,
		|	АдресныйКлассификатор.ТипАдресногоЭлемента КАК ТипАдресногоЭлемента,
		|	АдресныйКлассификатор.КодРайонаВКоде КАК КодРайонаВКоде,
		|	ВЫБОР
		|		КОГДА АдресныйКлассификатор.ТипАдресногоЭлемента = 3
		|			ТОГДА АдресныйКлассификатор.КодНаселенногоПунктаВКоде
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК КодГородаВКоде,
		|	ВЫБОР
		|		КОГДА АдресныйКлассификатор.ТипАдресногоЭлемента = 5
		|			ТОГДА АдресныйКлассификатор.КодНаселенногоПунктаВКоде
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК КодНаселенногоПунктаВКоде,
		//|	АдресныйКлассификатор.КодНаселенногоПунктаВКоде КАК КодНаселенногоПунктаВКоде,
		|	ВЫБОР
		|		КОГДА АдресныйКлассификатор.ТипАдресногоЭлемента = 5
		|			ТОГДА 0//АдресныйКлассификатор.Код
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК КодУлицыВКоде
		|ИЗ
		|	РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
		|
		|ГДЕ
		|	АдресныйКлассификатор.ТипАдресногоЭлемента = &ТипАдресногоЭлемента
		|	И АдресныйКлассификатор.Наименование = &Наименование "
		+ ОграничениеПоКоду;
	
	Запрос.УстановитьПараметр("ТипАдресногоЭлемента", ТипЭлемента);
	Запрос.УстановитьПараметр("Наименование", НазваниеЭлемента);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат АдресныйКлассификаторКлиентСервер.ПустаяСтруктураАдреса();
	КонецЕсли;
		
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	РезультирующаяСтруктура = Новый Структура;
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		РезультирующаяСтруктура.Вставить(Колонка.Имя, Выборка[Колонка.Имя]);
	КонецЦикла;
	
	Возврат РезультирующаяСтруктура;
КонецФункции

// Разделяет исходный текст на наименование и сокращение.
// Сокращением считается последнее слово, отделенное пробельным символом
//
// Параметры:
//     Название - Строка - Полное название, например "Москва г"
//
// Возвращаемое значение:
//     Структура - содержит поля
//       * Наименование - Строка - Наименование, например "Москва". Если сокращение выделить не удалось, то исходное название
//       * Сокращение   - Строка - Сокращение, например "г". Если сокращение выделить не удалось, то пустая строка
//
Функция НаименованиеИСокращение(Знач Название)
	ТекстПоиска = СокрП(Название);
	
	Позиция = СтрДлина(ТекстПоиска);
	Пока Позиция > 0 Цикл
		Если ПустаяСтрока(Сред(ТекстПоиска, Позиция, 1)) Тогда
			Прервать;
		КонецЕсли;
		Позиция = Позиция - 1;
	КонецЦикла;
	
	Результат = Новый Структура("Наименование, Сокращение");
	Если Позиция = 0 Тогда
		Результат.Наименование = ТекстПоиска;
		Результат.Сокращение   = "";
	Иначе
		Результат.Наименование = СокрП(Лев(ТекстПоиска, Позиция));
		Результат.Сокращение   = Сред(ТекстПоиска, Позиция + 1);
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Формирует текст ошибки с учетом указанной иерархии. Область установлена всегда
//
Функция ТекстОшибкиПоискаВИерархииКлассификатора(Знач АдресныйОбъект, Знач ПолеОшибки)
	ТекстОшибки = "";
	
	Если ПолеОшибки = "Область" Тогда
		ТекстОшибки = НСтр("ru = 'Область ""%1"" не найдена в адресном классификаторе.'");
	
	ИначеЕсли ПолеОшибки = "Район" Тогда
		ТекстОшибки = НСтр("ru = 'Район ""%2"" не найден в области ""%1"" адресного классификатора.'") 
		
	ИначеЕсли ПолеОшибки = "Город" Тогда
		РайонУстановлен = Не ПустаяСтрока(АдресныйОбъект.Район);
		Если РайонУстановлен Тогда
			ТекстОшибки = НСтр("ru = 'Город ""%3"" не найден в районе ""%2"" области ""%1"" адресного классификатора.'");
			
		Иначе
			ТекстОшибки = НСтр("ru = 'Город ""%3"" не найден в области ""%1"" адресного классификатора.'");
			
		КонецЕсли;
		
	ИначеЕсли ПолеОшибки = "НаселенныйПункт" Тогда
		РайонУстановлен = Не ПустаяСтрока(АдресныйОбъект.Район);
		ГородУстановлен = Не ПустаяСтрока(АдресныйОбъект.Город);
		
		Если РайонУстановлен И ГородУстановлен Тогда
			ТекстОшибки = НСтр("ru = 'Населенный пункт ""%4"" не найден в городе ""%3"" района ""%2"" области ""%1"" адресного классификатора.'");
			
		ИначеЕсли РайонУстановлен И Не ГородУстановлен Тогда
			ТекстОшибки = НСтр("ru = 'Населенный пункт ""%4"" не найден в районе ""%2"" области ""%1"" адресного классификатора.'");
			
		ИначеЕсли Не РайонУстановлен И ГородУстановлен Тогда
			ТекстОшибки = НСтр("ru = 'Населенный пункт %4 не найден в городе ""%3"" области ""%1"" адресного классификатора.'");
			
		ИначеЕсли Не РайонУстановлен И Не ГородУстановлен Тогда
			ТекстОшибки = НСтр("ru = 'Населенный пункт ""%4"" не найден в области ""%1"" адресного классификатора.'");
			
		КонецЕсли;
		
	ИначеЕсли ПолеОшибки = "Улица" Тогда
		РайонУстановлен = Не ПустаяСтрока(АдресныйОбъект.Район);
		ГородУстановлен = Не ПустаяСтрока(АдресныйОбъект.Город);
		НаселенныйПунктУстановлен = Не ПустаяСтрока(АдресныйОбъект.НаселенныйПункт);
		
		Если РайонУстановлен И ГородУстановлен И НаселенныйПунктУстановлен Тогда
			ТекстОшибки = НСтр("ru = 'Улица ""%5"" не найдена в населенном пункте ""%4"" города ""%3"" района ""%2"" области ""%1"" адресного классификатора.'");
			
		ИначеЕсли РайонУстановлен И ГородУстановлен И Не НаселенныйПунктУстановлен Тогда
			ТекстОшибки = НСтр("ru = 'Улица ""%5"" не найдена в городе ""%3"" района ""%2"" области ""%1"" адресного классификатора.'");
			
		ИначеЕсли РайонУстановлен И Не ГородУстановлен И НаселенныйПунктУстановлен Тогда
			ТекстОшибки = НСтр("ru = 'Улица ""%5"" не найдена в населенном пункте ""%4"" района ""%2"" области ""%1"" адресного классификатора.'");
			
		ИначеЕсли РайонУстановлен И Не ГородУстановлен И Не НаселенныйПунктУстановлен Тогда
			ТекстОшибки = НСтр("ru = 'Улица ""%5"" не найдена в районе ""%2"" области ""%1"" адресного классификатора.'");
			
		ИначеЕсли Не РайонУстановлен И ГородУстановлен И НаселенныйПунктУстановлен Тогда
			ТекстОшибки = НСтр("ru = 'Улица ""%5"" не найдена в населенном пункте ""%4"" города ""%3"" области ""%1"" адресного классификатора.'");
			
		ИначеЕсли Не РайонУстановлен И ГородУстановлен И Не НаселенныйПунктУстановлен Тогда
			ТекстОшибки = НСтр("ru = 'Улица ""%5"" не найдена в городе ""%3"" области ""%1"" адресного классификатора.'");
			
		ИначеЕсли Не РайонУстановлен И Не ГородУстановлен И НаселенныйПунктУстановлен Тогда
			ТекстОшибки = НСтр("ru = 'Улица ""%5"" не найдена в населенном пункте ""%4"" области ""%1"" адресного классификатора.'");
			
		ИначеЕсли Не РайонУстановлен И Не ГородУстановлен И Не НаселенныйПунктУстановлен Тогда
			ТекстОшибки = НСтр("ru = 'Улица ""%5"" не найдена в области ""%1"" адресного классификатора.'");
			
		КонецЕсли;
		
	ИначеЕсли ПолеОшибки = "Дом" Тогда
		ТекстОшибки = НСтр("ru = 'Дом ""%6"" не найден в адресном классификаторе.'");
		
	ИначеЕсли ПолеОшибки = "Корпус" Тогда
		ТекстОшибки = НСтр("ru = 'Корпус ""%7"" для дома ""%6"" не найден в адресном классификаторе.'");
		
	ИначеЕсли ПолеОшибки = "Индекс" Тогда
		ТекстОшибки = НСтр("ru = 'Индекс ""%8"" не соответствует адресу.'");
		
	КонецЕсли;
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ТекстОшибки, 
		АдресныйОбъект.Область, АдресныйОбъект.Район, АдресныйОбъект.Город, АдресныйОбъект.НаселенныйПункт, АдресныйОбъект.Улица,
		АдресныйОбъект.НомерДома, АдресныйОбъект.НомерКорпуса, АдресныйОбъект.Индекс
	);
	
КонецФункции

// Формируется строка описания адреса по переданным элементам адреса
//
// Параметры:
//    ДетализацияДоУровня - Число - детализация уровня адресного объекта.
//    Область             - Строка - область.
//    Район               - Строка - район.
//    Город               - Строка - город.
//    НаселенныйПункт     - Строка - населенный пункт.
//    Улица               - Строка - название улицы.
//
// Возвращаемое значение:
//    Строка - описание.
//
Функция СформироватьОписаниеИзАдресныхЭлементов(ДетализацияДоУровня, Область = "", Район = "", Город = "", 
	НаселенныйПункт = "", Улица = "")
	
	Описание = Улица;
	
	Если ДетализацияДоУровня <= 4 Тогда // Улица, Населенный пункт
		
		Если ПустаяСтрока(Описание) И ПустаяСтрока(НаселенныйПункт) Тогда
			Описание = "";
		ИначеЕсли ПустаяСтрока(Описание) Тогда
			Описание = НаселенныйПункт;
		ИначеЕсли ПустаяСтрока(НаселенныйПункт) Тогда
			Описание = Описание;
		Иначе
			Описание = Описание + ", " + НаселенныйПункт;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДетализацияДоУровня <= 3 Тогда // Улица, Населенный пункт, Город
		
		Если ПустаяСтрока(Описание) И ПустаяСтрока(Город) Тогда
			Описание = "";
		ИначеЕсли ПустаяСтрока(Описание) Тогда
			Описание = Город;
		ИначеЕсли ПустаяСтрока(Город) Тогда
			Описание = Описание;
		Иначе
			Описание = Описание + ", " + Город;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДетализацияДоУровня <= 2 Тогда // Улица, Населенный пункт, Город, Район
		
		Если ПустаяСтрока(Описание) И ПустаяСтрока(Район) Тогда
			Описание = "";
		ИначеЕсли ПустаяСтрока(Описание) Тогда
			Описание = Район;
		ИначеЕсли ПустаяСтрока(Район) Тогда
			Описание = Описание;
		Иначе
			Описание = Описание + ", " + Район;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДетализацияДоУровня = 1 Тогда // Улица, Населенный пункт, Город, Район, Область
		
		Если ПустаяСтрока(Описание) И ПустаяСтрока(Область) Тогда
			Описание = "";
		ИначеЕсли ПустаяСтрока(Описание) Тогда
			Описание = Область;
		ИначеЕсли ПустаяСтрока(Область) Тогда
			Описание = Описание;
		Иначе
			Описание = Описание + ", " + Область;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Описание;
	
КонецФункции

// Возвращает ближайший по иерархии почтовый индекс в выборке с известными полями 
//
Функция ПочтовыйИндексПоИерархии(Знач Выборка)
	
	Индекс = СокрЛП(Выборка.Индекс);
	Если ПустаяСтрока(Индекс) Тогда
		Индекс = СокрЛП(Выборка.УлицаИндекс);
		Если ПустаяСтрока(Индекс) Тогда
			Индекс = СокрЛП(Выборка.НаселенныйПунктИндекс);
			Если ПустаяСтрока(Индекс) Тогда
				Индекс = СокрЛП(Выборка.ГородИндекс);
				Если ПустаяСтрока(Индекс) Тогда
					Индекс = СокрЛП(Выборка.РайонИндекс);
					Если ПустаяСтрока(Индекс) Тогда
						Индекс = СокрЛП(Выборка.ОбластьИндекс);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Индекс;
КонецФункции

// Проверяем один вариант здания
//
Функция ВариантДомаКорпусаПодходит(Знач Здание, Знач Вариант, Знач ТипыЧастейЗдания, КэшОписанийЗданий)
	
	Если Вариант.ЭтоДиапазон Тогда 
		Если ЗданиеВходитВДиапазон(Здание, Вариант.Описание) Тогда
			Возврат Истина;
		КонецЕсли;
	Иначе
		Если ЗданиеВходитВОписание(Здание, Вариант.Описание, Ложь, ТипыЧастейЗдания, КэшОписанийЗданий) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
КонецФункции

// Возвращает флаг того, что переданное описание - диапазон домов
//
// Параметры:
//     Описание - Строка - рассматриваемое описание диапазона
//                         Диапазоном  упрощенно считаем или буквы "Н" и "Ч" - все нечетные и четные соответственно
//                         или строку с дефисом
//
// Возвращаемое значение:
//     Булево - Истина, если переданная строка может быть рассмотрена как диапазон домов
///
Функция ЭтоДиапазон(Знач Описание)
	Возврат Описание="Н" 
	    Или Описание="Ч"
		Или Найти(Описание, "-") > 0
КонецФункции

// Проверяет на вхождение дом в диапазон
// 
// Параметры:
//     Дом      - Структура - Описание дома, содержит поля описывающие дом и корпус
//     Описание - Строка    - Одиночное описание диапазона
//
// Возвращаемые значение:
//     Булево - признак вхождения
//
Функция ЗданиеВходитВДиапазон(Знач Здание, Знач Описание)
	
	ПозицияДефиса = Найти(Описание, "-");
	Если ПозицияДефиса = 0 И Описание <> "Н" И Описание <> "Ч" Тогда
		// Это не диапазон
		Возврат Ложь;
	КонецЕсли;
	
	ТипЧисло = Новый ОписаниеТипов("Число");
	
	// Выделяем числовую часть номера
	НомерДома = ЧисловаяЧастьНомера( ОсновнойНомерЗдания(Здание) );
	Если НомерДома = 0 Тогда
		// Нет основного номера дома
		Возврат Ложь;
	КонецЕсли;
	
	ДлинаОписания = СтрДлина(Описание);
	ТекСимвол = Лев(Описание, 1);
	Если ТекСимвол = "Н" Тогда
		// Нечетный
		Если НомерДома % 2 = 0 Тогда
			// Четный номер не может входить в нечетный диапазон
			Возврат Ложь;
		ИначеЕсли ДлинаОписания = 1 Тогда
			// Все нечетные
			Возврат Истина;
		КонецЕсли;
		Позиция = 2;
		
	ИначеЕсли ТекСимвол = "Ч" Тогда
		// Четный
		Если НомерДома % 2 = 1 Тогда
			// Нечетный номер не может входить в четный диапазон
			Возврат Ложь;
		ИначеЕсли ДлинаОписания = 1 Тогда
			// Все четные
			Возврат Истина;
		КонецЕсли;
		Позиция = 2;
		
	ИначеЕсли ЭтоЦифра(ТекСимвол) Тогда
		// Обычный
		Позиция = 1;
		
	Иначе
		// Это не диапазон
		Возврат Ложь;
	КонецЕсли;
	
	// Ищем начало
	НачДиапазона = 0;
	Пока Позиция < ПозицияДефиса Цикл
		ТекСимвол = Сред(Описание, Позиция, 1);
		Позиция = Позиция + 1;
		Если ТекСимвол = "(" Тогда
			// Возможное начало диапазона
			Продолжить;
			
		ИначеЕсли Не ЭтоЦифра(ТекСимвол) Тогда
			// Это неправильный диапазон
			Возврат Ложь;
			
		КонецЕсли;
		НачДиапазона = НачДиапазона * 10 + ТипЧисло.ПривестиЗначение(ТекСимвол);
	КонецЦикла;
	
	Позиция = Позиция + 1;
	// Ищем конец
	КонДиапазона = 0;
	Пока Позиция<=ДлинаОписания Цикл
		ТекСимвол = Сред(Описание, Позиция, 1);
		Позиция = Позиция + 1;
		Если ТекСимвол = ")" Тогда
			// Возможный конец диапазона
			Прервать;
			
		ИначеЕсли Не ЭтоЦифра(ТекСимвол) Тогда
			// Это неправильный диапазон
			Возврат Ложь;
			
		КонецЕсли;
		КонДиапазона = КонДиапазона * 10 + ТипЧисло.ПривестиЗначение(ТекСимвол);
	КонецЦикла;
		
	Если НачДиапазона > КонДиапазона Тогда
		// Это неправильный диапазон
		Возврат Ложь;
	КонецЕсли;
	
	Возврат НомерДома >= НачДиапазона И НомерДома <= КонДиапазона;
КонецФункции

// Проверяет на соответствие дома описанию
//
// Параметры:
//     Здание             - Структура       - Описание дома, содержит реквизиты Дом, Корпус или подобные
//     Описание           - Строка          - Одиночное описание здания
//     ПолноеСоответствие - Булево          - Флаг точного поиска. Если указано Ложь, то поиск происходит только по 
//                                            заполненным полям параметра Здание, например под описание
//                                            "Дом 2 корпус 1 строение 6" подойдут "Дом 2 корпус 1" и "Дом 2"
//     ТипыЧастейЗдания   - ТаблицаЗначений - Идентификаторы сокращения зданий, результат функции "ТипыЧастейЗдания"
//                                            Если указано Неопределено, то будет вычислено.
//     КэшОписанийЗданий  - Соответствие    - кэш описаний зданий, заполняется автоматически
//
// Возвращаемые значение:
//    Булево - признак вхождения
//
Функция ЗданиеВходитВОписание(Знач Здание, Знач Описание, Знач ПолноеСоответствие = Истина, ТипыЧастейЗдания = Неопределено, КэшОписанийЗданий = Неопределено)
	
	// Разбираем в структуру
	Если КэшОписанийЗданий = Неопределено Тогда
		КэшОписанийЗданий = Новый Соответствие;
	КонецЕсли;
	
	ЧастиОписания = КэшОписанийЗданий[Описание];
	Если ЧастиОписания = Неопределено Тогда
		ЧастиОписания = СтруктураОписанияЗдания(Описание, ТипыЧастейЗдания);
		КэшОписанийЗданий[Описание] = ЧастиОписания;
	КонецЕсли;
	
	// Сравниваем по частям 
	Результат = Истина;
	
	// То, что передали, должно быть в найденном всегда
	Для Каждого КлючЗначение Из Здание Цикл
		Ключ     = КлючЗначение.Ключ;
		Значение = КлючЗначение.Значение;
		
		Если Не ЧастиОписания.Свойство(Ключ) Тогда
			Результат = Ложь;
			Прервать;
			
		ИначеЕсли Не ПустаяСтрока(Значение) И ЧастиОписания[Ключ] <> Значение Тогда
			Результат = Ложь;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
		
	Если Результат И ПолноеСоответствие Тогда
		// Все, что нашли, должно полностью совпадать с переданным
		Для Каждого КлючЗначение Из ЧастиОписания Цикл
			Значение = КлючЗначение.Значение;
			Ключ     = КлючЗначение.Ключ;
			Если Не ПустаяСтрока(Значение) Тогда
				Если Не Здание.Свойство(Ключ) Или Здание[Ключ] <> Значение Тогда
					Результат = Ложь;
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Возврат Результат;
КонецФункции

// Выделяем числовую часть номера дома
//
// Параметры:
//     Номер - Строка, Число - полный номер дома
//
// Возвращаемое значение:
//     Число  - Числовая частью номера. Если числовой части нет, то возвращается ноль
//
Функция ЧисловаяЧастьНомера(Знач Номер)
	ТипЧисло = Новый ОписаниеТипов("Число");
	
	Если ТипЧисло.СодержитТип(ТипЗнч(Номер)) Тогда
		Возврат Номер;
	КонецЕсли;
	
	НомерДома = 0;
	Для Позиция = 1 По СтрДлина(Номер) Цикл
		ТекСимвол = Сред(Номер, Позиция, 1);
		Если Не ЭтоЦифра(ТекСимвол) Тогда
			Прервать;
		КонецЕсли;
		НомерДома = НомерДома * 10 + ТипЧисло.ПривестиЗначение(ТекСимвол);
	КонецЦикла;
	
	Возврат НомерДома;
КонецФункции

// Определяет тип символа
//
// Параметры:
//     Символ - Строка - анализируемый символ
//
// Возвращаемое значение:
//     Булево - Истина, если переданный символ является цифрой
//
Функция ЭтоЦифра(Знач Символ)
	
	Возврат Найти("0123456789", Символ) > 0;
	
КонецФункции

// Вычисляет основной номер здания выбором из заполненного дом
//
// Параметры:
//     Здание - Структура - Анализируемое здание с полями:
//                 * Дом          - Строка - значение соответствующего номера
//
// Возвращаемое значение
//     Строка - Основной номер здания 
//
Функция ОсновнойНомерЗдания(Знач Здание)
	Результат = "";
	
	Если Здание.Свойство("Дом") Тогда
		Результат = Здание.Дом;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Разбирает строковое описание отдельного здания КАТО
//
// Параметры:
//     Описание         - Строка          - Описание одиночного здания КАТО 
//     ТипыЧастейЗдания - ТаблицаЗначений - Для разбора сокращений, результат функции ТипыЧастейЗдания указано Неопределено, то будет вычислено
//
// Возвращаемое значение:
//     Структура    - Ключ - идентификатор, значение - номер здания.
//                    Набор идентификаторов определяется по данным таблицы-результата ТипыЧастейЗдания
//     Неопределено - если описание не удалось распознать.
//
Функция СтруктураОписанияЗдания(Знач Описание, ТипыЧастейЗдания = Неопределено)
	
	Текст = Описание;
	Результат = Новый Структура;
	
	// Все дополнительны части здания
	Если ТипыЧастейЗдания = Неопределено Тогда
		ТипыЧастейЗдания = ТипыЧастейЗдания();
		Для Каждого ТипЧасти Из ТипыЧастейЗдания Цикл
			Результат.Вставить(ТипЧасти.Идентификатор);
		КонецЦикла;
	КонецЕсли;
	
	// Идентификатор по умолчанию для возможно пустого первого ключа
	Идентификатор = "Дом";
	Результат.Вставить(Идентификатор);
	
	ЕстьЕщеЧасти = Истина;
	
	Пока ЕстьЕщеЧасти Цикл
		// Тип текущей части
		Позиция = 1;
		Для Каждого ТипЧасти Из ТипыЧастейЗдания Цикл
			Если Лев(Текст, ТипЧасти.Длина) = ТипЧасти.Префикс Тогда
				Идентификатор = ТипЧасти.Идентификатор;
				Позиция       = 1 + ТипЧасти.Длина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Текст = Сред(Текст, Позиция);
		
		// Значение части
		Позиция = 0;
		Для Каждого ТипЧасти Из ТипыЧастейЗдания Цикл
			// Ищем ближайший следующий тип, после которого должно быть значение
			ТестПозиции = Найти(Текст, ТипЧасти.Префикс);
			Если ТестПозиции > 0                                                // Нашли
				И (Позиция = 0 Или ТестПозиции<Позиция)                         // Ближайший
				И Не ПустаяСтрока(Сред(Текст, ТестПозиции + ТипЧасти.Длина, 1)) // Со значением
			Тогда
				Позиция = ТестПозиции;
			КонецЕсли;
		КонецЦикла;
		
		ЕстьЕщеЧасти = Позиция > 0;
		Если ЕстьЕщеЧасти Тогда
			Значение = Лев(Текст, Позиция-1);
			Текст = Сред(Текст, Позиция);
		Иначе
			Значение = Текст;
		КонецЕсли;
		
		Результат.Вставить(Идентификатор, СтрЗаменить(Значение, "_", "-"));
	КонецЦикла; 
	
	Возврат Результат;
КонецФункции

// Формирует таблицу префиксов - разделителей данных КАТО, типов зданий 
//
// Возвращаемое значение - ТаблицаЗначений - Возможные варианты. Содержит колонки:
//     * Префикс       - Строка - префикс-разделитель
//     * Идентификатор - Строка - идентификатор для структуры
//     * Длина         - Число  - длина префикса
//
Функция ТипыЧастейЗдания()
	
	Результат = 
		НоваяСтрокаТаблицы("КОРПУС",     "Корпус",
		НоваяСтрокаТаблицы("К",          "Корпус",
		НоваяСтрокаТаблицы("СТР",        "Строение",
		НоваяСтрокаТаблицы("СТРОЕНИЕ",   "Строение",
		НоваяСтрокаТаблицы("СООРУЖЕНИЕ", "Сооружение",
		НоваяСтрокаТаблицы("УЧАСТОК",    "Участок",
		"Префикс, Идентификатор, Длина"))))));
		
	Результат.Сортировать("Длина УБЫВ, Префикс");
	
	Возврат Результат;
КонецФункции

Функция НоваяСтрокаТаблицы(Знач Префикс, Знач Идентификатор, Знач Таблица)
	
	Если ТипЗнч(Таблица) = Тип("Строка") Тогда
		// Список создаваемых колонок
		Результат = Новый ТаблицаЗначений;
		Для Каждого КлючЗначение Из Новый Структура(Таблица) Цикл
			ИмяКолонки = КлючЗначение.Ключ;
			Результат.Колонки.Добавить(ИмяКолонки);
			Результат.Индексы.Добавить(ИмяКолонки);
		КонецЦикла;
	Иначе 
		Результат = Таблица;
	КонецЕсли; 
	
	Строка = Результат.Добавить();
	Строка.Префикс       = Префикс;
	Строка.Идентификатор = Идентификатор;
	Строка.Длина         = СтрДлина(Префикс);
	
	Возврат Результат;
КонецФункции

Процедура ЗаполнитьСтруктуруАдресаПоВыборке(Знач Приемник, Знач Источник, Знач Префикс = "")
	МассивТипов = Новый Массив(1);
	
	Для Каждого КлючЗначение Из Приемник Цикл
		
		Имя = КлючЗначение.Ключ;
		Тип = ТипЗнч(Приемник[Имя]);
		Если Тип = Неопределено Тогда
			Приемник[Имя] = Источник[Префикс + Имя];
		Иначе
			МассивТипов[0] = Тип;
			НовыйТип = Новый ОписаниеТипов(МассивТипов);
			Приемник[Имя] = НовыйТип.ПривестиЗначение(Источник[Префикс + Имя]);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Фоновое задание загрузки данных КАТО
// 

// Обработчик фоновой загрузки
//
Процедура ФоновоеЗаданиеЗагрузкиКлассификатораАдресов(Знач Параметры, Знач АдресРезультата) Экспорт
	
	КодыОбластей   = Параметры[0];	// Массив кодов областей для загрузки
	ОписаниеФайлов = Параметры[1];	// Массив структур описаний переданных файлов
	Кодировка      = Параметры[2];  // Кодировка файла XBase
	
	// Извлекаем файлы, все имена файлов - в верхнем регистре
	РабочийКаталог = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ПолучитьИмяВременногоФайла());
	СоздатьКаталог(РабочийКаталог);
	
	Для Каждого Описание Из ОписаниеФайлов Цикл
		// Имена файлов должны быть всегда в верхнем  регистре
		Файл = Новый Файл(Описание.Имя);
		ИмяФайла = РабочийКаталог + ВРег(Файл.Имя);
		
		Данные = ?(ТипЗнч(Описание.Хранение) = Тип("Строка"), ПолучитьИзВременногоХранилища(Описание.Хранение), Описание.Хранение);
		Данные.Записать(ИмяФайла);
		
		Файл = Новый Файл(ИмяФайла);
		Файл.УстановитьУниверсальноеВремяИзменения(Описание.ВремяИзменения);
		
		Если Врег(Прав(ИмяФайла, 4)) = ".ZIP" Тогда
			// Распаковываем, оригинал удалится вместе с рабочим каталогом
			ЧтениеZIP = Новый ЧтениеZipФайла(ИмяФайла);
			ЧтениеZIP.ИзвлечьВсе(РабочийКаталог, РежимВосстановленияПутейФайловZIP.НеВосстанавливать);
		КонецЕсли;
		
	КонецЦикла;
	
	// Определяем даты - версии и формируем массив для загрузки
	АдресныеОбъекты = Новый Массив;
	
	Для Каждого КодОбласти Из КодыОбластей Цикл
		АдресныйОбъект = Формат(КодОбласти, "ЧЦ=2; ЧН=; ЧВН=; ЧГ=");
		АдресныеОбъекты.Добавить(АдресныйОбъект);
	КонецЦикла;
	
	ПараметрыЗагрузки = Новый Структура;
	ПараметрыЗагрузки.Вставить("АдресныеОбъекты",      АдресныеОбъекты);
	ПараметрыЗагрузки.Вставить("ПутьКДаннымНаСервере", ИмяФайла);
	ПараметрыЗагрузки.Вставить("Кодировка",            Кодировка);
	
	// Собственно загрузка
	ЗагрузкаАдресныхСведенийИзФайловKATOВРегистрСведений(ПараметрыЗагрузки, Неопределено);
	
	// И чистим за собой
	Попытка
		УдалитьФайлы(РабочийКаталог);
	Исключение
		// Обработка не требуется, файлы будут удалены позднее
	КонецПопытки;
	
	// Обновляем состав областей
	РегистрыСведений.АдресныйКлассификатор.ОбновитьСоставОбластейРКПоКлассификатору();
КонецПроцедуры

// Обработчик фоновой очистки
//
Процедура ФоновоеЗаданиеОчисткиКлассификатораАдресов(Знач Параметры, Знач АдресРезультата) Экспорт
	
	КодыОбластей = Параметры[0];	// Массив чисел - кодов областей для загрузки
	
	КоличествоУдаляемых = КодыОбластей.Количество();
	Позиция             = 0;
	
	Удаляемые = Новый Массив(1);
	
	Пока Позиция < КоличествоУдаляемых Цикл
		КодОбласти = КодыОбластей[Позиция];
		
		КодОбластиСтрокой = Формат(КодОбласти, "ЧЦ=2; ЧН=; ЧВН=");
		
		ДлительныеОперации.СообщитьПрогресс( , СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Очистка области ""%1 - %2"" (осталось %3) ...'"), 
			КодОбластиСтрокой, РегистрыСведений.АдресныйКлассификатор.НаименованиеОбластиПоКоду(КодОбласти),
			Формат(КоличествоУдаляемых - Позиция - 1, "ЧН=")
		));
		
		// Удаление одновременно с обновлением версии
		Удаляемые[0] = КодОбластиСтрокой;
		УдалитьАдресныеСведения(Удаляемые);
		
		Позиция = Позиция + 1;
	КонецЦикла;
	
	// Обновляем состав областей
	РегистрыСведений.АдресныйКлассификатор.ОбновитьСоставОбластейРКПоКлассификатору();
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Блок сервисных функций, используются при загрузке адресного классификатора

// Загружает адресные сокращения в регистр АдресныеСокращения.
//
// Параметры:
//    ПутьКДаннымНаСервере - Строка - путь к загружаемому файлу
//
// Возвращаемое значение:
//    Булево - Истина, если сведения успешно записаны, ложь если ошибка при подготовке записи сведений в справочник
//
Функция ЗагрузитьАдресныеСокращения(Знач ПутьКДаннымНаСервере) Экспорт
	
	ФайлАдресныхСокращений = ПутьКДаннымНаСервере;
	
	СтруктураИмениФайла = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ФайлАдресныхСокращений);
	
	ТаблицаАдресныеСокращения = Новый ТаблицаЗначений;
	ТаблицаАдресныеСокращения.Колонки.Добавить("Уровень", ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(1));
	ТаблицаАдресныеСокращения.Колонки.Добавить("Наименование");
	ТаблицаАдресныеСокращения.Колонки.Добавить("Сокращение");
	
	// если указан файл DBF, то адресные сокращения загружаем из макета
	Если ВРег(СтруктураИмениФайла.Расширение) = ".DBF" Тогда 
		Макет = РегистрыСведений.АдресныйКлассификатор.ПолучитьМакет("СокращенияРК");
		
		Чтение = Новый ЧтениеXML;
		Чтение.УстановитьСтроку(Макет.ПолучитьТекст());
		ПрочитаннаяТаблицаСокращений = СериализаторXDTO.ПрочитатьXML(Чтение);
		
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ПрочитаннаяТаблицаСокращений, ТаблицаАдресныеСокращения);
	ИначеЕсли ВРег(СтруктураИмениФайла.Расширение) = ".XML" Тогда 
		
		Чтение = Новый ЧтениеXML;
		Чтение.ОткрытьФайл(ФайлАдресныхСокращений);
		ПрочитаннаяТаблицаСокращений = СериализаторXDTO.ПрочитатьXML(Чтение);
		ПрочитаннаяТаблицаСокращений = ПрочитаннаяТаблицаСокращений.Скопировать(Новый Структура("DATATYPE", 1));
		
		Если ПрочитаннаяТаблицаСокращений.Количество() > 0 Тогда
			
			Для Каждого СтрокаТаблицыСокращений Из ПрочитаннаяТаблицаСокращений Цикл
				НоваяСтрокаАдресныхСокращений = ТаблицаАдресныеСокращения.Добавить();
				НоваяСтрокаАдресныхСокращений.Наименование = СтрокаТаблицыСокращений.TE;
				НоваяСтрокаАдресныхСокращений.Сокращение   = СтрокаТаблицыСокращений.AB;
				НоваяСтрокаАдресныхСокращений.Уровень      = СтрокаТаблицыСокращений.CD;
			КонецЦикла;
			
		Иначе
			
			Макет = РегистрыСведений.АдресныйКлассификатор.ПолучитьМакет("СокращенияРК");
			
			Чтение = Новый ЧтениеXML;
			Чтение.УстановитьСтроку(Макет.ПолучитьТекст());
			ПрочитаннаяТаблицаСокращений = СериализаторXDTO.ПрочитатьXML(Чтение);
			
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ПрочитаннаяТаблицаСокращений, ТаблицаАдресныеСокращения);
			
		КонецЕсли;
		
	Иначе 
		Возврат Ложь;
	КонецЕсли;
	
	НачатьТранзакцию();
	Для Каждого СтрокаТаблицыСокращений Из ТаблицаАдресныеСокращения Цикл
		
		ОбъектАдреса = НайтиАдресноеСокращение(СтрокаТаблицыСокращений.Наименование, СтрокаТаблицыСокращений.Сокращение, СтрокаТаблицыСокращений.Уровень);
		
		Если НЕ ЗначениеЗаполнено(ОбъектАдреса) Тогда
			ОбъектАдреса = Справочники.АдресныеСокращения.СоздатьЭлемент();			
		Иначе
			ОбъектАдреса = ОбъектАдреса.ПолучитьОбъект()
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(ОбъектАдреса, СтрокаТаблицыСокращений);
		
		Попытка
			ОбъектАдреса.Записать();
		Исключение
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки;
		
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
	Возврат Истина;
КонецФункции

// Процедура для загрузки данных в адресный классификатор
//
// Параметры:
//    КодАдресногоОбъекта  - Строка - Код адресного объекта в формате NN
//    ПутьКДаннымНаСервере - Строка - Путь к каталогу на сервере, в котором хранятся файлы КАТО
//
Процедура ЗагрузитьКлассификаторПоАдресномуОбъекту(Знач КодАдресногоОбъекта, Знач ПутьКДаннымНаСервере, Знач Кодировка) Экспорт
	
	КодАдресногоОбъекта = Лев(КодАдресногоОбъекта, 2);
	
	АдресныеСведения = Новый ТаблицаЗначений;
	АдресныеСведения.Колонки.Добавить("Код");
	АдресныеСведения.Колонки.Добавить("КодОбластиВКоде");
	АдресныеСведения.Колонки.Добавить("Наименование");
	АдресныеСведения.Колонки.Добавить("АльтернативныеНазвания");
	АдресныеСведения.Колонки.Добавить("Сокращение");
	АдресныеСведения.Колонки.Добавить("Индекс");
	АдресныеСведения.Колонки.Добавить("ТипАдресногоЭлемента");
	АдресныеСведения.Колонки.Добавить("КодРайонаВКоде");
	АдресныеСведения.Колонки.Добавить("КодНаселенногоПунктаВКоде");
	
	ИндексПоКоду = АдресныеСведения.Индексы.Добавить("Код");
	
	СобытиеЖурналаРегистрации = СобытиеЖурналаРегистрации() + "." + НСтр("ru = 'Загрузка из файла'", ОбщегоНазначения.КодОсновногоЯзыка()); // строка записывается в ИБ

	
	ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации, УровеньЖурналаРегистрации.Информация, , , 
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Начата загрузка адресного классификатора по области %1 из файла ""%2""'"), // строка записывается в ИБ
 
			КодАдресногоОбъекта, ПутьКДаннымНаСервере
	));
	
	ЗагрузитьАдресныеСведения(КодАдресногоОбъекта, 
		ПутьКДаннымНаСервере, АдресныеСведения, Кодировка);
	
	// Выравнивание кода - для совместимости
	АдресныеСведения.Индексы.Удалить(ИндексПоКоду);
	Для Каждого Элемент Из АдресныеСведения Цикл
		Элемент.Код = Лев(Строка(Элемент.Код) + "000000000000000000000", 11);
	КонецЦикла;
	
	// Запись в одной транзакции с версией
	НачатьТранзакцию();
	Попытка
		НаборАдресныхСведений = РегистрыСведений.АдресныйКлассификатор.СоздатьНаборЗаписей();
		НаборАдресныхСведений.Отбор.КодОбластиВКоде.Установить( Число(КодАдресногоОбъекта) );
		НаборАдресныхСведений.Загрузить(АдресныеСведения);
		НаборАдресныхСведений.Записать();
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
		
	ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации, УровеньЖурналаРегистрации.Информация, , , 
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Загружен адресный классификатор по области %1, %2 записей.'"), // строка записывается в ИБ  
			КодАдресногоОбъекта, АдресныеСведения.Количество()
	));
КонецПроцедуры

// Функция для заполнения данных с 2-го по 4-й уровень классификации:
//
// Параметры:
//    КодАдресногоОбъекта    - Строка - строковое представление номера адресного объекта
//    ПутьКДаннымНаСервере   - Строка - путь к файлу на сервере
//    АдресныеСведения       - ТаблицаЗначений - таблица, которая заполняется загружаемыми элементами
//
// Возвращаемое значение:
//    Булево - Истина, если адресные сведения загружены, Ложь - Иначе.
//
Функция ЗагрузитьАдресныеСведения(КодАдресногоОбъекта, ПутьКДаннымНаСервере, АдресныеСведения, Кодировка)
	
	ФайлАдресногоКлассификатора = ПутьКДаннымНаСервере;
	
	СтруктураИмениФайла = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ФайлАдресногоКлассификатора);
	
	// если указан файл DBF, то адресные сокращения загружаем из макета
	Если ВРег(СтруктураИмениФайла.Расширение) = ".DBF" Тогда 
		ЗагрузитьАдресныеСведенияИзDBF(КодАдресногоОбъекта, ПутьКДаннымНаСервере, АдресныеСведения, Кодировка);
	ИначеЕсли ВРег(СтруктураИмениФайла.Расширение) = ".XML" Тогда 
		ЗагрузитьАдресныеСведенияИзXML(КодАдресногоОбъекта, ПутьКДаннымНаСервере, АдресныеСведения);
	Иначе 
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ЗагрузитьАдресныеСведенияИзDBF(КодАдресногоОбъекта, ПутьКДаннымНаСервере, АдресныеСведения, Кодировка)
	
	СтруктураИмениФайла = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ПутьКДаннымНаСервере);
	
	ФайлАдресногоКлассификатора = ПутьКДаннымНаСервере;
	ФайлИндексаКлассификатора   = СтруктураИмениФайла.Путь + СтруктураИмениФайла.ИмяБезРасширения + ".CDX";
	
	// Для загрузки сразу всей группы адресных сведений нужен индекс по всему поле CODE
	НужнаИндексация = Истина;
	ФайлИндекса = Новый Файл(ФайлИндексаКлассификатора);
	Если ФайлИндекса.Существует() Тогда
		ФайлДанных = Новый XBase(ФайлАдресногоКлассификатора, ФайлИндексаКлассификатора, Истина);
		Если Не ФайлДанных.Открыта() Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Если ФайлДанных.Индексы.Найти("IDXCODE") <> Неопределено Тогда
			НужнаИндексация = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если НужнаИндексация Тогда
		ФайлДанных = Новый XBase(ФайлАдресногоКлассификатора);
		Если Не ФайлДанных.Открыта() Тогда
			Возврат Ложь;
		КонецЕсли;
		
		// Строим индекс по полному коду
		ФайлДанных.Индексы.Добавить("IDXCODE", "te", Ложь);
		ФайлДанных.СоздатьИндексныйФайл(ФайлИндексаКлассификатора);
		ФайлДанных.ЗакрытьФайл();
	КонецЕсли;
	
	ФайлДанных = Новый XBase(ФайлАдресногоКлассификатора, ФайлИндексаКлассификатора, Истина);
	Если ТипЗнч(Кодировка) = Тип("Строка") И ЗначениеЗаполнено(Кодировка) Тогда
		Если ВРег(Кодировка) = "DOS" Тогда
			ФайлДанных.Кодировка = КодировкаXBase.OEM;
		Иначе 
			ФайлДанных.Кодировка = КодировкаXBase.ANSI;
		КонецЕсли;
	ИначеЕсли ТипЗнч(Кодировка) = Тип("КодировкаXBase") Тогда 
		ФайлДанных.Кодировка = Кодировка;
	Иначе 
		ФайлДанных.Кодировка = КодировкаXBase.OEM;
	КонецЕсли;
	
	Если Не ФайлДанных.Открыта() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Встаем на первую запись индекса
	ФайлДанных.ТекущийИндекс = ФайлДанных.Индексы.Найти("IDXCODE");
	ФайлДанных.Найти(Лев(КодАдресногоОбъекта + "000000000", 9), "=");
	
	ЕстьНеуникальныеКодыФайла = Ложь;
	
	Пока Не ФайлДанных.ВКонце() Цикл
		Код = СокрЛП(ФайлДанных.TE);
		
		Если Лев(Код, 2) <> КодАдресногоОбъекта Тогда
			Прервать;
		КонецЕсли;
		
		ТипАдресногоЭлемента  = АдресныйКлассификаторКлиентСервер.ПолучитьТипАдресногоЭлемента(
			Число(ФайлДанных.AB), Число(ФайлДанных.CD), Число(ФайлДанных.EF), Число(ФайлДанных.HIJ), Число(ФайлДанных.K));
			
		Если ТипАдресногоЭлемента = 0 Тогда
			ФайлДанных.Следующая();
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = АдресныеСведения.Добавить();
		НоваяСтрока.Код = Число(Код);
		
		НоваяСтрока.ТипАдресногоЭлемента      = ТипАдресногоЭлемента;
		НоваяСтрока.КодОбластиВКоде           = Число(ФайлДанных.AB);
		НоваяСтрока.КодРайонаВКоде            = Число(ФайлДанных.CD);
		НоваяСтрока.КодНаселенногоПунктаВКоде = Число(СокрЛП(Строка(ФайлДанных.EF)) + СокрЛП(Строка(ФайлДанных.HIJ)));
		
		// районы городов респ. значения
		Если ТипАдресногоЭлемента = 2 И НоваяСтрока.КодОбластиВКоде > 70 Тогда
			НоваяСтрока.КодНаселенногоПунктаВКоде = 0;
		КонецЕсли;
		
		СтруктураНаименования = ОтделитьСокращение(СокрЛП(ФайлДанных.rus_name));
		
		НоваяСтрока.Наименование = СтруктураНаименования.Наименование;
		НоваяСтрока.Сокращение   = СтруктураНаименования.Сокращение;
		НоваяСтрока.Индекс       = 0;
		
		ФайлДанных.Следующая();
	КонецЦикла;
	
	ФайлДанных.ЗакрытьФайл();
	Возврат Истина;
	
КонецФункции

// Функция для заполнения данных с 2-го по 4-й уровень классификации из файла XML
// Структура XML-файла. В XML-файле должна находиться таблица значений, содержащая следующие колонки:
//  TE, AB, CD, EF, HIJ, K, RUS_NAME, RODTE, LEVEL, DATATYPE (Тип: число, Значения: 0 - адресный элемент или 1 - адресное сокращение)
// 
// Параметры:
//    КодАдресногоОбъекта    - Строка - строковое представление номера адресного объекта
//    ПутьКДаннымНаСервере   - Строка - путь к файлу на сервере
//    АдресныеСведения       - ТаблицаЗначений - таблица, которая заполняется загружаемыми элементами
//
// Возвращаемое значение:
//    Булево - Истина, если адресные сведения загружены, Ложь - Иначе.
//
Функция ЗагрузитьАдресныеСведенияИзXML(КодАдресногоОбъекта, ПутьКДаннымНаСервере, АдресныеСведения)
	
	Чтение = Новый ЧтениеXML;
	Чтение.ОткрытьФайл(ПутьКДаннымНаСервере);
	ПрочитаннаяТаблицаФайла = СериализаторXDTO.ПрочитатьXML(Чтение);
	
	ЗагружаемаяТаблицаАдресныхСведений = ПрочитаннаяТаблицаФайла.Скопировать(Новый Структура("DATATYPE", 0));
	ЗагружаемаяТаблицаАдресныхСведений.Индексы.Добавить("TE");
	
	ЗагружаемаяТаблицаАдресныхСведений.Сортировать("TE");
	НайденнаяСтрока = ЗагружаемаяТаблицаАдресныхСведений.Найти(Лев(КодАдресногоОбъекта + "000000000", 9), "TE");
	
	Для ИндексСтроки = ЗагружаемаяТаблицаАдресныхСведений.Индекс(НайденнаяСтрока) По ЗагружаемаяТаблицаАдресныхСведений.Количество() - 1 Цикл
		
		СтрокаАдресныхСведений = ЗагружаемаяТаблицаАдресныхСведений[ИндексСтроки];
		Код = СтрокаАдресныхСведений.TE;
		
		Если Лев(Код, 2) <> КодАдресногоОбъекта Тогда
			Прервать;
		КонецЕсли;
		
		ТипАдресногоЭлемента  = АдресныйКлассификаторКлиентСервер.ПолучитьТипАдресногоЭлемента(
			Число(СтрокаАдресныхСведений.AB), Число(СтрокаАдресныхСведений.CD), 
			Число(СтрокаАдресныхСведений.EF), Число(СтрокаАдресныхСведений.HIJ), 
			Число(СтрокаАдресныхСведений.K));
			
		Если ТипАдресногоЭлемента = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = АдресныеСведения.Добавить();
		НоваяСтрока.Код = Число(Код);
		
		НоваяСтрока.ТипАдресногоЭлемента      = ТипАдресногоЭлемента;
		НоваяСтрока.КодОбластиВКоде           = Число(СтрокаАдресныхСведений.AB);
		НоваяСтрока.КодРайонаВКоде            = Число(СтрокаАдресныхСведений.CD);
		НоваяСтрока.КодНаселенногоПунктаВКоде = Число(СокрЛП(Строка(СтрокаАдресныхСведений.EF)) + СокрЛП(Строка(СтрокаАдресныхСведений.HIJ)));
		
		// районы городов респ. значения
		Если ТипАдресногоЭлемента = 2 И НоваяСтрока.КодОбластиВКоде > 70 Тогда
			НоваяСтрока.КодНаселенногоПунктаВКоде = 0;
		КонецЕсли;
		
		СтруктураНаименования = ОтделитьСокращение(СокрЛП(СтрокаАдресныхСведений.rus_name));
		
		НоваяСтрока.Наименование = СтруктураНаименования.Наименование;
		НоваяСтрока.Сокращение   = СтруктураНаименования.Сокращение;
		НоваяСтрока.Индекс       = 0;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Прочие служебные процедуры и функции

// Процедура загружает из файлов KATO в регистр сведений данные по адресному объекту.
//
// Параметры:
//    ПараметрыЗагрузки - Структура - параметры для загрузки.
//    АдресХранилища    - Строка    - адрес внутреннего хранилища.
//
Процедура ЗагрузкаАдресныхСведенийИзФайловKATOВРегистрСведений(ПараметрыЗагрузки, АдресХранилища) Экспорт
	
	СтруктураВозврата = Новый Структура;
	
	СтруктураВозврата.Вставить("ПутьКДаннымНаСервере",  ПараметрыЗагрузки.ПутьКДаннымНаСервере);
	СтруктураВозврата.Вставить("СтатусВыполнения",      Истина);
	СтруктураВозврата.Вставить("СообщениеПользователю", "");
	СтруктураВозврата.Вставить("ПутьКДанным");
	
	Попытка
		
		// Сокращения
		ЗагрузитьАдресныеСокращения(ПараметрыЗагрузки.ПутьКДаннымНаСервере);
		
		Для Каждого АдресныйОбъект Из ПараметрыЗагрузки.АдресныеОбъекты Цикл
			
			ДлительныеОперации.СообщитьПрогресс( , СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Загрузка области ""%1 - %2"" (осталось %3) ...'"), 
				АдресныйОбъект, РегистрыСведений.АдресныйКлассификатор.НаименованиеОбластиПоКоду(АдресныйОбъект),
				Формат(ПараметрыЗагрузки.АдресныеОбъекты.ВГраница() - ПараметрыЗагрузки.АдресныеОбъекты.Найти(АдресныйОбъект), "ЧН=")
			));
			
			ЗагрузитьКлассификаторПоАдресномуОбъекту(АдресныйОбъект, ПараметрыЗагрузки.ПутьКДаннымНаСервере, ПараметрыЗагрузки.Кодировка);
			
		КонецЦикла;
		
	Исключение
		Информация = ИнформацияОбОшибке();
		
		ЗаписьЖурналаРегистрации( СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(Информация) );
		
		СтруктураВозврата.СтатусВыполнения = Ложь;
		СтруктураВозврата.СообщениеПользователю = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка при загрузке адресных сведений:
				       |%1'"), // строка записывается в ИБ
			КраткоеПредставлениеОшибки(Информация)
		);
	КонецПопытки;
	
	ПоместитьВоВременноеХранилище(СтруктураВозврата, АдресХранилища);
	
КонецПроцедуры

// Очищает адресные сведений по переданным адресным объектам.
// 
// Параметры:
//    МассивАдресныхОбъектов - Массив - каждый элемент - строка, номер адресного объекта в формате NN
//
Процедура УдалитьАдресныеСведения(Знач МассивАдресныхОбъектов) Экспорт
	
	Для Каждого КодАдресногоОбъекта Из МассивАдресныхОбъектов Цикл
		
		НачатьТранзакцию();
		Попытка
			НаборАдресныхСведений = РегистрыСведений.АдресныйКлассификатор.СоздатьНаборЗаписей();
			НаборАдресныхСведений.Отбор.КодОбластиВКоде.Установить( Число(КодАдресногоОбъекта) );
			НаборАдресныхСведений.Записать();
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки;
			
	КонецЦикла;
	
КонецПроцедуры

// Базовое имя события для регистрации в журнале событий
//
// Возвращаемое значение:
//     Строка - имя
//
Функция СобытиеЖурналаРегистрации() Экспорт
	Возврат НСтр("ru='Адресный классификатор'", 
		ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка() );
КонецФункции

Функция НайтиАдресноеСокращение(Наименование, Сокращение, Уровень)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	АдресныеСокращения.Ссылка
	|ИЗ
	|	Справочник.АдресныеСокращения КАК АдресныеСокращения
	|ГДЕ
	|	АдресныеСокращения.Наименование = &Наименование
	|	И АдресныеСокращения.Сокращение = &Сокращение
	|	И АдресныеСокращения.Уровень = &Уровень";
	
	Запрос.УстановитьПараметр("Наименование", Наименование);
	Запрос.УстановитьПараметр("Сокращение"  , Сокращение);
	Запрос.УстановитьПараметр("Уровень"     , Уровень);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Первоначальное заполнение и обновление ИБ

// Загружает адресные объекты первого уровня по макету
//
Процедура ЗагрузитьАдресныеОбъектыПервогоУровня() Экспорт
	
	РегистрыСведений.АдресныйКлассификатор.ОбновитьСоставОбластейРКПоКлассификатору();
	
КонецПроцедуры
