////////////////////////////////////////////////////////////////////////////////
// РасчетЗарплатыСервер: Процедуры и функции для обеспечения проведения
// 						 документов подсистемы расчета
//  
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

Процедура СформироватьДвижения(ТаблицаДанных, ИмяРегистра, Движения, Отказ) Экспорт
	
	Если ТаблицаДанных = Неопределено ИЛИ ТаблицаДанных.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Движения[ИмяРегистра].Загрузить(ТаблицаДанных);
	Движения[ИмяРегистра].Записывать = Истина;
	
КонецПроцедуры

Процедура СформироватьДвиженияПлановыеНачисленияРаботниковОрганизаций(ТаблицаНачисления, Движения, Отказ) Экспорт

	Если ТаблицаНачисления = Неопределено ИЛИ ТаблицаНачисления.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
		
	Движения.ПлановыеНачисленияРаботниковОрганизаций.Загрузить(ТаблицаНачисления);
	Движения.ПлановыеНачисленияРаботниковОрганизаций.Записывать = Истина;

КонецПроцедуры

Процедура СформироватьДвиженияПлановыеУдержанияРаботниковОрганизаций(ТаблицаУдержания, Движения, Отказ) Экспорт

	Если ТаблицаУдержания = Неопределено ИЛИ ТаблицаУдержания.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
		
	Движения.ПлановыеУдержанияРаботниковОрганизаций.Загрузить(ТаблицаУдержания);
	Движения.ПлановыеУдержанияРаботниковОрганизаций.Записывать = Истина;

КонецПроцедуры

Функция ПодготовитьТаблицуКоэффициентовИндексации(КоэффициентыИндексации, Реквизиты, ТаблицаКоэффициентов, Отказ) Экспорт
	
	Для Каждого СтрокаКоэффициентов Из КоэффициентыИндексации Цикл
		
		ПрежнийРазмер = ПересчитатьРазмерТарифнойСтавки(СтрокаКоэффициентов);
		Размер = СтрокаКоэффициентов.Размер;
		Если ПроведениеРасчетовСервер.ЭтоРасчетПоМинимальнойЗаработнойПлате(СтрокаКоэффициентов.СпособРасчета) Тогда
			Размер = Размер * СтрокаКоэффициентов.ТекущийРазмерМЗП;
		КонецЕсли;
		
		Если ПрежнийРазмер > 0 И Размер > ПрежнийРазмер Тогда
			НоваяСтрока = ТаблицаКоэффициентов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКоэффициентов, "Период, Сотрудник");
			НоваяСтрока.Коэффициент = Размер / ПрежнийРазмер;
		КонецЕсли;
				
	КонецЦикла;
	
	ТаблицаКоэффициентов.ЗаполнитьЗначения(Реквизиты.ГоловнаяОрганизация, "Организация");
	ТаблицаКоэффициентов.ЗаполнитьЗначения(Реквизиты.Организация, 		  "ОбособленноеПодразделение");
	
	Возврат ТаблицаКоэффициентов;
	
КонецФункции

Процедура СформироватьДвиженияКоэффициентыИндексацииЗаработка(ТаблицаКоэффициентов, Движения, Отказ) Экспорт

	Если ТаблицаКоэффициентов = Неопределено ИЛИ ТаблицаКоэффициентов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
		
	Движения.КоэффициентыИндексацииЗаработка.Загрузить(ТаблицаКоэффициентов);
	Движения.КоэффициентыИндексацииЗаработка.Записывать = Истина;

КонецПроцедуры

Процедура СформироватьДвиженияПрекращениеПредоставленияВычетовИПН(ТаблицаПрименениеВычетовИПН, ТаблицаСтандартныеВычетыИПН, ТаблицаПрочиеВычетыИПН, Движения, Отказ) Экспорт
	
	// регистр ПрименениеВычетовИПН
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТаблицаПрименениеВычетовИПН", ТаблицаПрименениеВычетовИПН);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаПрименениеВычетовИПН.Организация КАК Организация,
		|	ТаблицаПрименениеВычетовИПН.Период КАК Период,
		|	ТаблицаПрименениеВычетовИПН.ФизЛицо КАК ФизЛицо
		|ПОМЕСТИТЬ ВТ_ТаблицаДокумента
		|ИЗ
		|	&ТаблицаПрименениеВычетовИПН КАК ТаблицаПрименениеВычетовИПН
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ПрименениеВычетовИПН.Регистратор ЕСТЬ NULL
		|				ИЛИ ПрименениеВычетовИПН.Регистратор = НЕОПРЕДЕЛЕНО
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЕстьДанныеВРегистре,
		|	ДанныеДокумента.Организация КАК Организация,
		|	ДанныеДокумента.Период КАК Период,
		|	ДанныеДокумента.ФизЛицо КАК ФизЛицо
		|ИЗ
		|	ВТ_ТаблицаДокумента КАК ДанныеДокумента
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПрименениеВычетовИПН КАК ПрименениеВычетовИПН
		|		ПО (ПрименениеВычетовИПН.Период = ДанныеДокумента.Период)
		|			И (ПрименениеВычетовИПН.ФизическоеЛицо = ДанныеДокумента.ФизЛицо)
		|			И (ПрименениеВычетовИПН.Организация = ДанныеДокумента.Организация)
		|ГДЕ
		|	ВЫБОР
		|			КОГДА ПрименениеВычетовИПН.Регистратор ЕСТЬ NULL
		|					ИЛИ ПрименениеВычетовИПН.Регистратор = НЕОПРЕДЕЛЕНО
		|				ТОГДА ЛОЖЬ
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ = ЛОЖЬ";
				
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Движение 				= Движения.ПрименениеВычетовИПН.Добавить();
		Движение.Период 		= Выборка.Период;
		Движение.ФизическоеЛицо = Выборка.ФизЛицо;
		Движение.Организация 	= Выборка.Организация;		
		
	КонецЦикла;
	
	Движения.ПрименениеВычетовИПН.Записывать = Истина;

	
	// регистр ВычетыФизическихЛицИПН
	Движения.ВычетыФизическихЛицИПН.Записывать = Истина;
	Для Каждого СтрокаТЧ Из ТаблицаСтандартныеВычетыИПН Цикл
		Движение 					= Движения.ВычетыФизическихЛицИПН.Добавить();
		Движение.Период 			= СтрокаТЧ.Период;
		Движение.ФизическоеЛицо 	= СтрокаТЧ.ФизЛицо;
		Движение.ВидВычета 			= СтрокаТЧ.ВидВычетаИПН;
		Движение.ПредоставлятьВычет = Ложь;
		Движение.Основание 			= СтрокаТЧ.Основание;
	КонецЦикла;
	
	// регистр ПрочиеВычетыФизическихЛицИПН
	Движения.ПрочиеВычетыФизическихЛицИПН.Записывать = Истина;
	Для Каждого СтрокаТЧ Из ТаблицаПрочиеВычетыИПН Цикл
		Движение 				= Движения.ПрочиеВычетыФизическихЛицИПН.Добавить();
		Движение.Период 		= СтрокаТЧ.Период;
		Движение.ФизическоеЛицо = СтрокаТЧ.ФизЛицо;
		Движение.ВидВычета 		= СтрокаТЧ.ВидВычетаИПН;
		Движение.ДействуетС 	= СтрокаТЧ.ДействуетС;
		Движение.Размер 		= 0;
	КонецЦикла;
	
КонецПроцедуры		

Функция ТекстЗапросаУчетнаяПолитикаНУ() Экспорт
	
	ТекстЗапроса =  
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	УчетнаяПолитикаНУ.ОтражениеПоПериодуРегистрации КАК ОтражениеПоПериодуРегистрации,
		|	УчетнаяПолитикаНУ.РаспределятьНалогиПоСтруктурнымЕдиницам КАК РаспределятьНалогиПоСтруктурнымЕдиницам,
		|	УчетнаяПолитикаНУ.РаспределятьНалогиПоПодразделениямОрганизаций КАК РаспределятьНалогиПоПодразделениямОрганизаций,
		|	УчетнаяПолитикаНУ.ОрганизацияЯвляетсяВкладчикомОППВ КАК ОрганизацияЯвляетсяВкладчикомОППВ,
		|	УчетнаяПолитикаНУ.УпрощенныйУчетИПНиОПВ,
		|	УчетнаяПолитикаНУ.ЗасчитыватьВВыплаченныеДоходыУдержанияПоИЛ,
		|	УчетнаяПолитикаНУ.ОрганизацияЯвляетсяПлательщикомСН
		|ИЗ
		|	РегистрСведений.УчетнаяПолитикаНалоговыйУчет.СрезПоследних(&Период, Организация = &ОбособленноеПодразделение) КАК УчетнаяПолитикаНУ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЛОЖЬ,
		|	ЛОЖЬ,
		|	ЛОЖЬ,
		|	ЛОЖЬ,
		|	ЛОЖЬ,
		|	ЛОЖЬ,
		|	ЛОЖЬ";
		
	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

// Функция строит текст запроса для определения структурной единиц, в котором числился работник по 
// основному месту работу на начало каждого указанного месяца либо на момент приема в середине месяца
// 
// Параметры:
//	ПериодыФизЛицаТекст - строка, имя временной таблицы для выбора списка физлиц (должна содержать уникальные комбинации Период, ФизЛицо)
//  ПоФизЛицам - булево, если Истина возвращаемое значения поля Сотрудник будет с типом "ФизЛицо"
//
// Возвращаемое значение:
//	Строка - текст запроса
//
Функция СформироватьТекстЗапросаСтруктурныеЕдиницы(ПериодыСотрудникаТекст, ПоФизЛицам = ЛОЖЬ, ПолучитьСведенияПоМестамРаботы = Истина) Экспорт

	ТекстЗапроса = "";
	
	ПолеФизЛицоСотрудник = ?(ПоФизЛицам, "ФизЛицо", "Сотрудник");
	
	Если ПолучитьСведенияПоМестамРаботы Тогда
		
		// Основные сведения по работникам
		ТекстЗапроса = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|		ПериодыФизЛица." + ПолеФизЛицоСотрудник + " КАК Сотрудник,
			|		ПериодыФизЛица.Период КАК Период,
			|		МАКСИМУМ(ВЫБОР
			|				КОГДА РаботникиОрганизации.Период <= НАЧАЛОПЕРИОДА(ПериодыФизЛица.Период, МЕСЯЦ)
			|					ТОГДА ВЫБОР
			|							КОГДА РаботникиОрганизации.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
			|								ТОГДА ДОБАВИТЬКДАТЕ(РаботникиОрганизации.Период, ДЕНЬ, -1)
			|							ИНАЧЕ РаботникиОрганизации.Период
			|						КОНЕЦ
			|				ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
			|			КОНЕЦ) КАК ДатаНазначения,
			|		МАКСИМУМ(ВЫБОР
			|				КОГДА РаботникиОрганизации.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
			|					ТОГДА ДОБАВИТЬКДАТЕ(РаботникиОрганизации.Период, ДЕНЬ, -1)
			|				ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
			|			КОНЕЦ) КАК ДатаПоследнегоУвольнения,
			|		МИНИМУМ(ВЫБОР
			|				КОГДА РаботникиОрганизации.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу)
			|						И НАЧАЛОПЕРИОДА(РаботникиОрганизации.Период, МЕСЯЦ) = НАЧАЛОПЕРИОДА(ПериодыФизЛица.Период, МЕСЯЦ)
			|					ТОГДА РаботникиОрганизации.Период
			|				ИНАЧЕ ДАТАВРЕМЯ(2999, 12, 31)
			|			КОНЕЦ) КАК ДатаПоследнегоПриема
			| ПОМЕСТИТЬ ВТ_Работники
			|	ИЗ
			|		" + ПериодыСотрудникаТекст + " КАК ПериодыФизЛица
			|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
			|			ПО ПериодыФизЛица." + ПолеФизЛицоСотрудник + ?(ПоФизЛицам, "", ".ФизЛицо") + " = РаботникиОрганизации.Сотрудник.ФизЛицо
			|				И (РаботникиОрганизации.Период <= КОНЕЦПЕРИОДА(ПериодыФизЛица.Период, МЕСЯЦ))
			|				И (РаботникиОрганизации.Организация = &Организация)
			|				И (РаботникиОрганизации.Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство))
			|				И РаботникиОрганизации.Активность
			|	
			|	СГРУППИРОВАТЬ ПО
			|		ПериодыФизЛица." + ПолеФизЛицоСотрудник + ",
			|		ПериодыФизЛица.Период
			|";
			
		ТекстЗапроса = ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
			
		ТекстЗапроса = ТекстЗапроса +
			"ВЫБРАТЬ
			|	Работники.Сотрудник КАК " + ПолеФизЛицоСотрудник + ",
			|	Работники.Период,
			|	ВЫБОР
			|		КОГДА Работники.ДатаПоследнегоПриема <> ДАТАВРЕМЯ(2999, 12, 31) // был прием в середине месяца
			|				И (Работники.ДатаПоследнегоУвольнения = ДАТАВРЕМЯ(1, 1, 1) // увольнения вообще не было 
			|					ИЛИ (Работники.ДатаПоследнегоУвольнения < Работники.ДатаПоследнегоПриема // было увольнение до даты повторного приема 
			|							И МестаРаботыПослеПриема.ОбособленноеПодразделение =  &ОбособленноеПодразделение) // и сейчас проводится документ именно по новому месту работы
			|					ИЛИ (Работники.ДатаПоследнегоУвольнения <> ДАТАВРЕМЯ(1, 1, 1)  // было увольнение в середине месяца
			|							И МестаРаботыПослеПриема.ОбособленноеПодразделение =  &ОбособленноеПодразделение)) // и сейчас проводится документ именно по новому месту работы
			|			ТОГДА ВЫБОР
			|					КОГДА ЕСТЬNULL(МестаРаботыПослеПриема.ПодразделениеОрганизации.ЯвляетсяСтруктурнымПодразделением, ЛОЖЬ)
			|						ТОГДА МестаРаботыПослеПриема.ПодразделениеОрганизации
			|					КОГДА ЕСТЬNULL(МестаРаботыПослеПриема.СтруктурноеПодразделение, ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
			|						ТОГДА МестаРаботыПослеПриема.СтруктурноеПодразделение
			|					ИНАЧЕ МестаРаботыПослеПриема.ОбособленноеПодразделение
			|				  КОНЕЦ
			|
			|		// увольнения-приема в середине месяца не было - определяем структурную единицу на начало месяца
			|		КОГДА ЕСТЬNULL(МестаРаботыНаНачалоМесяца.ПодразделениеОрганизации.ЯвляетсяСтруктурнымПодразделением, ЛОЖЬ)
			|			ТОГДА МестаРаботыНаНачалоМесяца.ПодразделениеОрганизации
			|		КОГДА ЕСТЬNULL(МестаРаботыНаНачалоМесяца.СтруктурноеПодразделение, ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
			|			ТОГДА МестаРаботыНаНачалоМесяца.СтруктурноеПодразделение
			|
			|		ИНАЧЕ МестаРаботыНаНачалоМесяца.ОбособленноеПодразделение
			|	КОНЕЦ КАК СтруктурнаяЕдиница,
			|	ВЫБОР
			|		КОГДА Работники.ДатаПоследнегоПриема <> ДАТАВРЕМЯ(2999, 12, 31) // был прием в середине месяца
			|				И (Работники.ДатаПоследнегоУвольнения = ДАТАВРЕМЯ(1, 1, 1) // увольнения вообще не было 
			|					ИЛИ (Работники.ДатаПоследнегоУвольнения < Работники.ДатаПоследнегоПриема // было увольнение до даты повторного приема 
			|							И МестаРаботыПослеПриема.ОбособленноеПодразделение =  &ОбособленноеПодразделение) // и сейчас проводится документ именно по новому месту работы
			|					ИЛИ (Работники.ДатаПоследнегоУвольнения <> ДАТАВРЕМЯ(1, 1, 1)  // было увольнение в середине месяца
			|							И МестаРаботыПослеПриема.ОбособленноеПодразделение =  &ОбособленноеПодразделение)) // и сейчас проводится документ именно по новому месту работы
			|			ТОГДА МестаРаботыПослеПриема.ПодразделениеОрганизации				   
			|
			|		// увольнения-приема в середине месяца не было - определяем подразделение на начало месяца
			|		ИНАЧЕ МестаРаботыНаНачалоМесяца.ПодразделениеОрганизации				   
			|	КОНЕЦ КАК ПодразделениеОрганизации
			|
			|ПОМЕСТИТЬ ВТ_МестоРаботы
			|
			|ИЗ
			|	ВТ_Работники КАК Работники
			|
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК МестаРаботыНаНачалоМесяца
			|		ПО Работники.Сотрудник" + ?(ПоФизЛицам, "", ".ФизЛицо") + " = МестаРаботыНаНачалоМесяца.Сотрудник.Физлицо
			|			И МестаРаботыНаНачалоМесяца.Организация = &Организация
			|			И Работники.ДатаНазначения = ВЫБОР
			|											КОГДА МестаРаботыНаНачалоМесяца.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
			|												ТОГДА ДОБАВИТЬКДАТЕ(МестаРаботыНаНачалоМесяца.Период, ДЕНЬ, -1)
			|											ИНАЧЕ МестаРаботыНаНачалоМесяца.Период
			|										 КОНЕЦ
			|			И МестаРаботыНаНачалоМесяца.Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
			|			И МестаРаботыНаНачалоМесяца.Активность
			|
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК МестаРаботыПослеПриема
			|			ПО Работники.Сотрудник" + ?(ПоФизЛицам, "", ".ФизЛицо") + " = МестаРаботыПослеПриема.Сотрудник.ФизЛицо
			|				И МестаРаботыПослеПриема.Организация = &Организация
			|				И Работники.ДатаПоследнегоПриема = МестаРаботыПослеПриема.Период
			|				И МестаРаботыПослеПриема.Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
			|				И МестаРаботыПослеПриема.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу)
			|				И МестаРаботыПослеПриема.Активность
			|";

	Иначе 
		
		ТекстЗапроса = 
			"ВЫБРАТЬ
			|	ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка) КАК " + ПолеФизЛицоСотрудник + ",
			|	ДАТАВРЕМЯ(1, 1, 1) КАК Период,
			|	ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка) КАК СтруктурнаяЕдиница,
			|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) КАК ПодразделениеОрганизации
			|
			|ПОМЕСТИТЬ ВТ_МестоРаботы
			|";

	КонецЕсли;
		
	Возврат ТекстЗапроса;

КонецФункции

// Функция строит текст запроса для определения признаков исчисления ОППВ по работникам, 
// признак получаем по периодам, переданным из документа
// 
// Параметры:
//	ПериодыНачисленийТекст - строка с с именем временной таблицы (таблица должна содержать уникальные комбинации ДатаНачисления, Сотрудник)
//
// Возвращаемое значение:
//	Строка - текст запроса
//
Функция СформироватьТекстЗапросаПериодыИсчисленияОППВ(ПериодыНачисленийТекст, ПолучитьСведенияПоПериодамОППВ = Истина) Экспорт 
	
	Если ПолучитьСведенияПоПериодамОППВ Тогда
		ТекстЗапроса = "
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	ПериодыНачислений.Сотрудник КАК Сотрудник,
			|	ПериодыНачислений.ПериодНачисления КАК ПериодНачисления,
			|	МАКСИМУМ(РаботникиОрганизаций.Период) КАК ПериодРаботника
			|ПОМЕСТИТЬ ВТ_ПериодыРаботников
			|ИЗ
			|	" + ПериодыНачисленийТекст + " КАК ПериодыНачислений
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
			|		ПО ПериодыНачислений.Сотрудник = РаботникиОрганизаций.Сотрудник
			|			И ПериодыНачислений.ПериодНачисления >= РаботникиОрганизаций.Период
			|			И РаботникиОрганизаций.Активность
			|
			|СГРУППИРОВАТЬ ПО
			|	ПериодыНачислений.Сотрудник,
			|	ПериодыНачислений.ПериодНачисления
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Сотрудник,
			|	ПериодРаботника
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	ПериодыРаботников.Сотрудник КАК Сотрудник,
			|	ПериодыРаботников.ПериодНачисления КАК ПериодНачисления,
			|	РаботникиОрганизаций.ИсчислятьОППВ
			|ПОМЕСТИТЬ ВТ_ПериодыИсчисленияОППВ
			|ИЗ
			|	ВТ_ПериодыРаботников КАК ПериодыРаботников
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
			|		ПО ПериодыРаботников.Сотрудник = РаботникиОрганизаций.Сотрудник
			|			И ПериодыРаботников.ПериодРаботника = РаботникиОрганизаций.Период
			|			И РаботникиОрганизаций.Активность
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Сотрудник,
			|	ПериодНачисления";
	Иначе 
		ТекстЗапроса = "
			|ВЫБРАТЬ
			|	NULL КАК Сотрудник,
			|	NULL КАК ПериодНачисления,
			|	NULL КАК ИсчислятьОППВ
			|ПОМЕСТИТЬ ВТ_ПериодыИсчисленияОППВ
			|";
	КонецЕсли;		
		
	Возврат ТекстЗапроса;
	
КонецФункции

// Готовится таблица для формирования движений по регистрам накопления Взаиморасчеты...
// на основании подготовленных данных документа
//
// Параметры
//  Реквизиты 				- СтрокаТаблицыЗначений - реквизиты, необходимые для формирования движений.
//  УчетнаяПолитикаНУ       - СтрокаТаблицыЗначений - данные учетной политики по НУ, необходимые для формирования движений
//  СведенияОВзаиморасчетах	- ТаблицаЗначений -подготовленные данные документа
//	ТаблицаВзаиморасчеты	- ТаблицаЗначений - Выгруженные колонки движений регистра накопления
//	ВидДвижения				- ВидДвиженияНакопления 
//  Отказ 			 		- Булево - флаг отказа от проведения
//	ИсключаемыеКолонки 		- Строка - имена колонок, значения которых не заполняются
//
Функция ПодготовитьТаблицуВзаиморасчеты(Реквизиты, СведенияОВзаиморасчетах, ТаблицаВзаиморасчеты, ВидДвижения, Отказ, ИсключаемыеКолонки = "Активность, Регистратор, НомерСтроки") Экспорт
	
	Если СведенияОВзаиморасчетах.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ИсключаемыеКолонки <> "" Тогда
		// Удалим не нужные колонки
		МассивИменКолонок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИсключаемыеКолонки, ",", , Истина);		
		Для Каждого ИмяКолонки Из МассивИменКолонок Цикл
			Если ТаблицаВзаиморасчеты.Колонки.Найти(ИмяКолонки) <> Неопределено Тогда
				ТаблицаВзаиморасчеты.Колонки.Удалить(ИмяКолонки);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	РазделНУ = Перечисления.РазделыНалоговогоУчета.НалогиСЗаработнойПлаты;
	
	// Формирование таблицы проведения
	Для Каждого СтрокаСведений Из СведенияОВзаиморасчетах Цикл
		НоваяСтрока = ТаблицаВзаиморасчеты.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСведений, , ?(Реквизиты.РаспределятьНалогиПоПодразделениямОрганизаций, "", "ПодразделениеОрганизации"));
		НоваяСтрока.Налогоплательщик = ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(СтрокаСведений.СтруктурнаяЕдиница, 
																															   Реквизиты.Организация,
																															   РазделНУ);
	КонецЦикла;
	
	ТаблицаВзаиморасчеты.ЗаполнитьЗначения(Реквизиты.Организация, 			 		 "Организация");
	ТаблицаВзаиморасчеты.ЗаполнитьЗначения(НачалоМесяца(Реквизиты.ПериодРегистрации),"ПериодВзаиморасчетов");
	ТаблицаВзаиморасчеты.ЗаполнитьЗначения(КонецМесяца(Реквизиты.ПериодРегистрации), "Период");
	ТаблицаВзаиморасчеты.ЗаполнитьЗначения(ВидДвижения,   				  			 "ВидДвижения");
	
	Возврат ТаблицаВзаиморасчеты;
	
КонецФункции

Функция ПодготовитьТаблицуВзаиморасчетыСКонтрагентами(Реквизиты, СведенияОВзаиморасчетах, ТаблицаВзаиморасчеты, ВидДвижения, Отказ, ИсключаемыеКолонки = "Активность, Регистратор, НомерСтроки") Экспорт
	
	Если СведенияОВзаиморасчетах.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ИсключаемыеКолонки <> "" Тогда
		// Удалим не нужные колонки
		МассивИменКолонок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИсключаемыеКолонки, ",", , Истина);		
		Для Каждого ИмяКолонки Из МассивИменКолонок Цикл
			Если ТаблицаВзаиморасчеты.Колонки.Найти(ИмяКолонки) <> Неопределено Тогда
				ТаблицаВзаиморасчеты.Колонки.Удалить(ИмяКолонки);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	РазделНУ = Перечисления.РазделыНалоговогоУчета.НалогиСЗаработнойПлаты;
	
	// Формирование таблицы проведения
	Для Каждого СтрокаСведений Из СведенияОВзаиморасчетах Цикл
		НоваяСтрока = ТаблицаВзаиморасчеты.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСведений);
		НоваяСтрока.Налогоплательщик = ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(СтрокаСведений.СтруктурнаяЕдиница, 
																															   Реквизиты.Организация,
																															   РазделНУ);
	КонецЦикла;
	
	ТаблицаВзаиморасчеты.ЗаполнитьЗначения(Реквизиты.Организация, 			 		 "Организация");
	ТаблицаВзаиморасчеты.ЗаполнитьЗначения(НачалоМесяца(Реквизиты.ПериодРегистрации),"ПериодВзаиморасчетов");
	Если ТипЗнч(Реквизиты.Ссылка) <> Тип("ДокументСсылка.РасчетНалоговПриПоступленииАктивовУслуг") Тогда
		ТаблицаВзаиморасчеты.ЗаполнитьЗначения(КонецМесяца(Реквизиты.ПериодРегистрации), "Период");
	КонецЕсли;
	ТаблицаВзаиморасчеты.ЗаполнитьЗначения(ВидДвижения,   				  			 "ВидДвижения");
	
	Возврат ТаблицаВзаиморасчеты;
	
КонецФункции

// Готовится таблица для формирования движений по регистрам накопления Взаиморасчеты...
// на основании подготовленных данных документа
//
// Параметры
//  Реквизиты 				- СтрокаТаблицыЗначений - реквизиты, необходимые для формирования движений.
//  УчетнаяПолитикаНУ       - СтрокаТаблицыЗначений - данные учетной политики по НУ, необходимые для формирования движений
//  СведенияОВзаиморасчетах	- ТаблицаЗначений -подготовленные данные документа
//	ТаблицаВзаиморасчеты	- ТаблицаЗначений - Выгруженные колонки движений регистра накопления
//	ВидДвижения				- ВидДвиженияНакопления 
//  Отказ 			 		- Булево - флаг отказа от проведения
//	ИсключаемыеКолонки 		- Строка - имена колонок, значения которых не заполняются
//
Функция ПодготовитьТаблицуВыплаченныеДоходыНУ(Реквизиты, СведенияОВыплаченныхДоходахНУ, ТаблицаВыплаченныеДоходыНУ, ВидДвижения, Отказ, ИсключаемыеКолонки = "Активность, Регистратор, НомерСтроки") Экспорт
	
	Если СведенияОВыплаченныхДоходахНУ = Неопределено ИЛИ СведенияОВыплаченныхДоходахНУ.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ИсключаемыеКолонки <> "" Тогда
		// Удалим не нужные колонки
		МассивИменКолонок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИсключаемыеКолонки, ",", , Истина);		
		Для Каждого ИмяКолонки Из МассивИменКолонок Цикл
			Если ТаблицаВыплаченныеДоходыНУ.Колонки.Найти(ИмяКолонки) <> Неопределено Тогда
				ТаблицаВыплаченныеДоходыНУ.Колонки.Удалить(ИмяКолонки);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	РазделНУ = Перечисления.РазделыНалоговогоУчета.НалогиСЗаработнойПлаты;
	
	// Формирование таблицы проведения
	Для Каждого СтрокаСведений Из СведенияОВыплаченныхДоходахНУ Цикл
		НоваяСтрока = ТаблицаВыплаченныеДоходыНУ.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСведений, , ?(Реквизиты.РаспределятьНалогиПоПодразделениямОрганизаций, "", "ПодразделениеОрганизации"));
		НоваяСтрока.Налогоплательщик = ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(СтрокаСведений.СтруктурнаяЕдиница, 
																															   Реквизиты.Организация,
																															   РазделНУ);
	КонецЦикла;
	
	ТаблицаВыплаченныеДоходыНУ.ЗаполнитьЗначения(Реквизиты.Организация, "Организация");
	
	Возврат ТаблицаВыплаченныеДоходыНУ;
	
КонецФункции

// Готовится таблица для формирования движений по регистрам накопления СведенияОДоходах
// на основании подготовленных данных документа
//
// Параметры
//  Реквизиты 				- СтрокаТаблицыЗначений - реквизиты, необходимые для формирования движений.
//  УчетнаяПолитикаНУ       - СтрокаТаблицыЗначений - данные учетной политики по НУ, необходимые для формирования движений
//  СведенияОДоходах 		- ТаблицаЗначений -подготовленные данные документа
//	ВидНалогаВзноса 		- Строка - вид налога или взноса, по которому подготавливаются данные для проведения
//	ТаблицаСведенияОДоходах - ТаблицаЗначений - Выгруженные колонки движений регистра накопления
//  Отказ 			 		- Булево - флаг отказа от проведения
//	ДополнительныйОтбор 	- Структура - отбор значений, указывается в случае если не по всем записям необходимо формировать движения
//	ИсключаемыеКолонки 		- Строка - имена колонок, значения которых не заполняются
//
Функция ПодготовитьТаблицуСведенияОДоходах(Реквизиты, СведенияОДоходах, ВидНалогаВзноса, ТаблицаСведенияОДоходах, Отказ, ДополнительныйОтбор = Неопределено, ИсключаемыеКолонки = "Активность, Регистратор, НомерСтроки") Экспорт
	
	Если СведенияОДоходах = Неопределено ИЛИ СведенияОДоходах.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ДополнительныйОтбор <> Неопределено 
		И ТипЗнч(ДополнительныйОтбор) = Тип("Структура") Тогда
		МассивСтрок = СведенияОДоходах.НайтиСтроки(ДополнительныйОтбор);		
	Иначе 
		МассивСтрок = СведенияОДоходах;
	КонецЕсли;
	
	Если МассивСтрок.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ИсключаемыеКолонки <> "" Тогда
		// Удалим не нужные колонки
		МассивИменКолонок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИсключаемыеКолонки, ",", , Истина);		
		Для Каждого ИмяКолонки Из МассивИменКолонок Цикл
			Если ТаблицаСведенияОДоходах.Колонки.Найти(ИмяКолонки) <> Неопределено Тогда
				ТаблицаСведенияОДоходах.Колонки.Удалить(ИмяКолонки);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	РазделНУ = Перечисления.РазделыНалоговогоУчета.НалогиСЗаработнойПлаты;
	
	// Формирование таблицы проведения
	
	Для Каждого СтрокаСведений Из МассивСтрок Цикл
		НоваяСтрока = ТаблицаСведенияОДоходах.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСведений, , ?(Реквизиты.РаспределятьНалогиПоПодразделениямОрганизаций, "", "ПодразделениеОрганизации"));
		НоваяСтрока.СпособНалогообложения = СтрокаСведений["Облагается" + ВидНалогаВзноса];
		НоваяСтрока.Налогоплательщик = ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(СтрокаСведений.СтруктурнаяЕдиница, 
																															   Реквизиты.Организация, 
																															   РазделНУ);
	КонецЦикла;
	
	ТаблицаСведенияОДоходах.ЗаполнитьЗначения(Реквизиты.Организация, 		 "Организация");
	ТаблицаСведенияОДоходах.ЗаполнитьЗначения(Реквизиты.ПериодРегистрации,   "ПериодРегистрации");
	
	Возврат ТаблицаСведенияОДоходах;
	
КонецФункции

Функция ПодготовитьТаблицуИсчисленныхНалоговВзносовОтчислений(Реквизиты, СведенияОбИсчислении, ТаблицаНалогиВзносыОтчисления, Отказ, ИсключаемыеКолонки = "Активность, Регистратор, НомерСтроки") Экспорт
	
	Если СведенияОбИсчислении.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	МассивСтрок = СведенияОбИсчислении;
	
	Если МассивСтрок.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ИсключаемыеКолонки <> "" Тогда
		// Удалим не нужные колонки
		МассивИменКолонок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИсключаемыеКолонки, ",", , Истина);		
		Для Каждого ИмяКолонки Из МассивИменКолонок Цикл
			Если ТаблицаНалогиВзносыОтчисления.Колонки.Найти(ИмяКолонки) <> Неопределено Тогда
				ТаблицаНалогиВзносыОтчисления.Колонки.Удалить(ИмяКолонки);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	РазделНУ = Перечисления.РазделыНалоговогоУчета.НалогиСЗаработнойПлаты;
	
	// Формирование таблицы проведения
	
	Для Каждого СтрокаСведений Из МассивСтрок Цикл
		НоваяСтрока = ТаблицаНалогиВзносыОтчисления.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСведений);
		НоваяСтрока.Налогоплательщик = ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(СтрокаСведений.СтруктурнаяЕдиница, 
																															   Реквизиты.Организация, 
																															   РазделНУ);
	КонецЦикла;
	
	ТаблицаНалогиВзносыОтчисления.ЗаполнитьЗначения(Реквизиты.Организация, 		 "Организация");
	
	Возврат ТаблицаНалогиВзносыОтчисления;
	
КонецФункции

// ИПНРасчетыСБюджетом
Процедура СформироватьДвиженияИПНРасчетыСБюджетом(Реквизиты, ТаблицаИсчисленныйИПН, Движения, Отказ, УпрощенныйУчетИПНиОПВ = Ложь) Экспорт
	
	Если ТаблицаИсчисленныйИПН = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из ТаблицаИсчисленныйИПН Цикл
		
		Налогоплательщик = ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(
																		СтрокаТаблицы.СтруктурнаяЕдиница,
																		Реквизиты.Организация,
																		Перечисления.РазделыНалоговогоУчета.НалогиСЗаработнойПлаты);
															
		Проводка = Движения.ИПНРасчетыСБюджетом.Добавить();
		
		Проводка.Период     	  = СтрокаТаблицы.Период;
		Проводка.ВидДвижения	  = ВидДвиженияНакопления.Приход;
		Проводка.ФизЛицо = СтрокаТаблицы.ФизЛицо;
		Проводка.Организация      = Реквизиты.Организация;
		Проводка.Налогоплательщик      = Налогоплательщик;
		
		Проводка.СтруктурнаяЕдиница	  = СтрокаТаблицы.СтруктурнаяЕдиница;
		Проводка.МесяцНалоговогоПериода  = СтрокаТаблицы.МесяцНалоговогоПериода;
		Проводка.ПодразделениеОрганизации 	  = СтрокаТаблицы.ПодразделениеОрганизации;
		Проводка.Налог   	  = СтрокаТаблицы.Налог;
		Проводка.НеОтражатьВРеглУчете    	  = СтрокаТаблицы.НеОтражатьВРеглУчете;
		Проводка.ВидСтроки = ПредопределенноеЗначение("Перечисление.РасчетыСБюджетомФондамиВидСтроки.Исчисление");
		
		Если УпрощенныйУчетИПНиОПВ Тогда
			
			Проводка = Движения.ИПНРасчетыСБюджетом.Добавить();
			
			Проводка.Период     	  = СтрокаТаблицы.Период;
			Проводка.ВидДвижения	  = ВидДвиженияНакопления.Расход;
			Проводка.ФизЛицо = СтрокаТаблицы.ФизЛицо;
			Проводка.Организация      = Реквизиты.Организация;
			Проводка.Налогоплательщик      = Налогоплательщик;
			
			Проводка.СтруктурнаяЕдиница	  = СтрокаТаблицы.СтруктурнаяЕдиница;
			Проводка.МесяцНалоговогоПериода  = СтрокаТаблицы.МесяцНалоговогоПериода;
			Проводка.ПодразделениеОрганизации 	  = СтрокаТаблицы.ПодразделениеОрганизации;
			Проводка.Налог   	  = СтрокаТаблицы.Налог;
			Проводка.НеОтражатьВРеглУчете    	  = СтрокаТаблицы.НеОтражатьВРеглУчете;
			Проводка.ВидСтроки = ПредопределенноеЗначение("Перечисление.РасчетыСБюджетомФондамиВидСтроки.Удержание");
			
		КонецЕсли;
		
	КонецЦикла;
	
	Движения.ИПНРасчетыСБюджетом.Записывать = Истина;
	
КонецПроцедуры

// ВОСМСРасчетыСФондами
Процедура СформироватьДвиженияВОСМСРасчетыСФондами(Реквизиты, ТаблицаИсчисленныеВОСМС, Движения, Отказ, УпрощенныйУчетИПНиОПВ = Ложь) Экспорт
	
	Если ТаблицаИсчисленныеВОСМС = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из ТаблицаИсчисленныеВОСМС Цикл
		
		Налогоплательщик = ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(
																		СтрокаТаблицы.СтруктурнаяЕдиница,
																		Реквизиты.Организация,
																		Перечисления.РазделыНалоговогоУчета.НалогиСЗаработнойПлаты);
															
		Проводка = Движения.ВОСМСРасчетыСФондами.Добавить();
		
		Проводка.Период     	  = СтрокаТаблицы.Период;
		Проводка.ВидДвижения	  = ВидДвиженияНакопления.Приход;
		Проводка.ФизЛицо = СтрокаТаблицы.ФизЛицо;
		Проводка.Организация      = Реквизиты.Организация;
		Проводка.Налогоплательщик      = Налогоплательщик;
		Проводка.ВидПлатежа      = СтрокаТаблицы.ВидПлатежа;

		Проводка.СтруктурнаяЕдиница	  = СтрокаТаблицы.СтруктурнаяЕдиница;
		Проводка.МесяцНалоговогоПериода  = СтрокаТаблицы.МесяцНалоговогоПериода;
		Проводка.ПодразделениеОрганизации 	  = СтрокаТаблицы.ПодразделениеОрганизации;
		Проводка.Взнос   	  = СтрокаТаблицы.Взнос;
		Проводка.НеОтражатьВРеглУчете    	  = СтрокаТаблицы.НеОтражатьВРеглУчете;
		Проводка.ВидСтроки = ПредопределенноеЗначение("Перечисление.РасчетыСБюджетомФондамиВидСтроки.Исчисление");
		
		Если УпрощенныйУчетИПНиОПВ Тогда
			
			Проводка = Движения.ВОСМСПодлежитПеречислениюВФонды.Добавить();
			
			Проводка.Период     	  = СтрокаТаблицы.Период;
			Проводка.ВидДвижения	  = ВидДвиженияНакопления.Приход;
			Проводка.ФизЛицо = СтрокаТаблицы.ФизЛицо;
			Проводка.Организация      = Реквизиты.Организация;
			Проводка.Налогоплательщик      = Налогоплательщик;
			Проводка.МесяцВыплатыДоходов  = Реквизиты.ПериодРегистрации;
			
			Проводка.СтруктурнаяЕдиница	  = СтрокаТаблицы.СтруктурнаяЕдиница;
			Проводка.МесяцНалоговогоПериода  = СтрокаТаблицы.МесяцНалоговогоПериода;
			Проводка.ПодразделениеОрганизации 	  = СтрокаТаблицы.ПодразделениеОрганизации;
			Проводка.Взнос   	  = СтрокаТаблицы.Взнос;
			Проводка.ВидСтроки = ПредопределенноеЗначение("Перечисление.РасчетыСБюджетомФондамиВидСтроки.Удержание");
			
		КонецЕсли;
		
	КонецЦикла;
	
	Движения.ВОСМСРасчетыСФондами.Записывать = Истина;
	Движения.ВОСМСПодлежитПеречислениюВФонды.Записывать = Истина;
	
КонецПроцедуры

// Готовится таблица для формирования движений по регистрам накопления СведенияОбИсчисленииВычетовИПН
// на основании подготовленных данных документа
//
// Параметры
//  Реквизиты 				- СтрокаТаблицыЗначений - реквизиты, необходимые для формирования движений.
//  УчетнаяПолитикаНУ       - СтрокаТаблицыЗначений - данные учетной политики по НУ, необходимые для формирования движений
//  СведенияОДоходах 		- ТаблицаЗначений -подготовленные данные документа
//	ВидНалогаВзноса 		- Строка - вид налога или взноса, по которому подготавливаются данные для проведения
//	ТаблицаСведенияОДоходах - ТаблицаЗначений - Выгруженные колонки движений регистра накопления
//  Отказ 			 		- Булево - флаг отказа от проведения
//	ДополнительныйОтбор 	- Структура - отбор значений, указывается в случае если не по всем записям необходимо формировать движения
//	ИсключаемыеКолонки 		- Строка - имена колонок, значения которых не заполняются
//
Функция ПодготовитьТаблицуСведенияОбИсчисленииВычетовИПН(Реквизиты, ВычетыИПН, ТаблицаСведенияОбИсчисленииВычетовИПН, Отказ, ИсключаемыеКолонки = "Активность, Регистратор, НомерСтроки") Экспорт
	
	Если ВычетыИПН = Неопределено ИЛИ ВычетыИПН.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ИсключаемыеКолонки <> "" Тогда
		// Удалим не нужные колонки
		МассивИменКолонок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИсключаемыеКолонки, ",", , Истина);		
		Для Каждого ИмяКолонки Из МассивИменКолонок Цикл
			Если ТаблицаСведенияОбИсчисленииВычетовИПН.Колонки.Найти(ИмяКолонки) <> Неопределено Тогда
				ТаблицаСведенияОбИсчисленииВычетовИПН.Колонки.Удалить(ИмяКолонки);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Формирование таблицы проведения
	
	Для Каждого СтрокаМассива Из ВычетыИПН Цикл
		НоваяСтрока = ТаблицаСведенияОбИсчисленииВычетовИПН.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаМассива, , ?(Реквизиты.РаспределятьНалогиПоПодразделениямОрганизаций, "", "ПодразделениеОрганизации"));
		//Если Реквизиты.Свойство(""РаспределятьНалогиПоПодразделениямОрганизаций) и Реквизиты.РаспределятьНалогиПоПодразделениямОрганизаций Тогда
		//	
		//КонецЕсли;	
		НоваяСтрока.Налогоплательщик = ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(
																		СтрокаМассива.СтруктурнаяЕдиница,
																		Реквизиты.Организация,
																		Перечисления.РазделыНалоговогоУчета.НалогиСЗаработнойПлаты);
	КонецЦикла;
																		
	ТаблицаСведенияОбИсчисленииВычетовИПН.ЗаполнитьЗначения(Реквизиты.Организация, 			"Организация");
	ТаблицаСведенияОбИсчисленииВычетовИПН.ЗаполнитьЗначения(Реквизиты.ПериодРегистрации, 	"ПериодРегистрации");
	
	Возврат ТаблицаСведенияОбИсчисленииВычетовИПН;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Проведение кассовых и платежных документов

Процедура СформироватьДвиженияСведенияОВыплатахЗП(ТаблицаВедомости, Движения, Отказ)
	
	Для Каждого СтрокаДанных Из ТаблицаВедомости Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаДанных.Ведомость) Тогда
			Продолжить;
		КонецЕсли;
		
		// Регистрируем факт использования ведомости
		Движение = Движения.СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям.Добавить();
		// Измерения
		Движение.Физлицо   = СтрокаДанных.ФизЛицо;
		Движение.Ведомость = СтрокаДанных.Ведомость;
	КонецЦикла;
	
	Движения.СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям.Записывать = Истина;

КонецПроцедуры

// Выплата зарплаты

Процедура СформироватьДвиженияПеречислениеЗП(ТаблицаРеквизиты, ТаблицаПеречислениеЗП, Движения, СпособВыплаты, Отказ) Экспорт
	
	Если ТаблицаПеречислениеЗП = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизиты[0];
	
	СформироватьПроводкиПеречислениеЗП(Реквизиты, ТаблицаПеречислениеЗП.Скопировать(), Движения, Отказ);
		
	Если Движения.Найти("СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям") <> Неопределено Тогда
		СформироватьДвиженияСведенияОВыплатахЗП(ТаблицаПеречислениеЗП, Движения, Отказ);
	КонецЕсли;
		
	Если ТаблицаПеречислениеЗП.Итог("ДепонированнаяСумма") <> 0 Тогда
		ТаблицаДвиженияДепоненты = ПодготовитьТаблицуДвиженияДепоненты(Реквизиты, ТаблицаПеречислениеЗП, Отказ); 
		ЗарегистрироватьДвиженияВыплатаЗП(Реквизиты, ТаблицаДвиженияДепоненты, Движения, "ВзаиморасчетыСДепонентамиОрганизаций",СпособВыплаты, Отказ);
	КонецЕсли;
	
	Если ТаблицаПеречислениеЗП.Итог("Сумма") <> 0 Тогда
		ТаблицаДвиженияЗП = ПодготовитьТаблицуДвиженияЗП(Реквизиты, ТаблицаПеречислениеЗП, Отказ); 
		ЗарегистрироватьДвиженияВыплатаЗП(Реквизиты, ТаблицаДвиженияЗП, Движения, "ВзаиморасчетыСРаботникамиОрганизаций",СпособВыплаты, Отказ);
	КонецЕсли;
	
	Если Движения.Найти("ВзаиморасчетыСДепонентамиОрганизаций") <> Неопределено Тогда
		Движения.ВзаиморасчетыСДепонентамиОрганизаций.Записывать = Истина;
	КонецЕсли;
	
	Движения.ВзаиморасчетыСРаботникамиОрганизаций.Записывать = Истина;
	Движения.ВыплаченныеДоходыРаботникамОрганизацийНУ.Записывать = Истина;

КонецПроцедуры

Процедура СформироватьПроводкиПеречислениеЗП(Реквизиты, ТаблицаПеречислениеЗП, Движения, Отказ)
	
	ТаблицаФормированияПроводок = ТаблицаПеречислениеЗП;
	
	ВедениеУчетаПоСотрудникам = Реквизиты.ВедениеУчетаПоСотрудникам;
	Если НЕ ВедениеУчетаПоСотрудникам Тогда
		ТаблицаФормированияПроводок.Свернуть("Ведомость, Дата, Номер, СчетКт, СчетКтНУ, СчетКтНУПоУмолчанию, ИмяСубконтоКт1, ИмяСубконтоКт2, СубконтоКт1, СубконтоКт2", "Сумма, ДепонированнаяСумма");
	КонецЕсли;
	
	
	Для Каждого СтрокаДанных Из ТаблицаФормированияПроводок Цикл

		// Формируем проводки по выплате зарплаты
		Если СтрокаДанных.Сумма <> 0 Тогда
			Проводка = Движения.Типовой.Добавить();
			
			Проводка.Период      = Реквизиты.Дата;
			Проводка.Организация = Реквизиты.Организация;
			Проводка.Сумма       = СтрокаДанных.Сумма;
			
			Проводка.СчетДт      = ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПоОплатеТруда;				
			Если ВедениеУчетаПоСотрудникам Тогда
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "РаботникиОрганизаций", СтрокаДанных.ФизЛицо);
			КонецЕсли;
			
			Проводка.СчетКт      = СтрокаДанных.СчетКт;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, СтрокаДанных.ИмяСубконтоКт1, СтрокаДанных.СубконтоКт1);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, СтрокаДанных.ИмяСубконтоКт2, СтрокаДанных.СубконтоКт2);
			
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(Проводка, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);

			Если Проводка.СчетКт.Валютный Тогда
				Проводка.ВалютаКт 			= Реквизиты.ВалютаДокумента;
				Проводка.ВалютнаяСуммаКт 	= СтрокаДанных.Сумма;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаДанных.Ведомость) Тогда
				Проводка.Содержание = СтрШаблон(НСтр("ru = 'Выплата з/п по ведомости №%1 от %2'", ОбщегоНазначения.КодОсновногоЯзыка()), СтрокаДанных.Номер, Формат(СтрокаДанных.Дата, "ДФ='дд.ММ.гг'"));
			Иначе 
				Проводка.Содержание = НСтр("ru = 'Выплата заработной платы'", ОбщегоНазначения.КодОсновногоЯзыка());
			КонецЕсли;
			
		КонецЕсли;
	
		// Формируем проводки по выплате депонированной зарплаты
		Если СтрокаДанных.ДепонированнаяСумма <> 0 Тогда
			Проводка = Движения.Типовой.Добавить();
			
			Проводка.Период      = Реквизиты.Дата;
			Проводка.Организация = Реквизиты.Организация;
			Проводка.Сумма       = СтрокаДанных.ДепонированнаяСумма;
			
			Проводка.СчетДт      = ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПоДепонированнойЗаработнойПлате;
			Если ВедениеУчетаПоСотрудникам Тогда
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "РаботникиОрганизаций", СтрокаДанных.ФизЛицо);
			КонецЕсли;
						
			Проводка.СчетКт      = СтрокаДанных.СчетКт;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, СтрокаДанных.ИмяСубконтоКт1, СтрокаДанных.СубконтоКт1);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, СтрокаДанных.ИмяСубконтоКт2, СтрокаДанных.СубконтоКт2);

			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(Проводка, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);

			Если Проводка.СчетКт.Валютный Тогда
				Проводка.ВалютаКт 			= Реквизиты.ВалютаДокумента;
				Проводка.ВалютнаяСуммаКт 	= СтрокаДанных.ДепонированнаяСумма;
			КонецЕсли;

			Если ЗначениеЗаполнено(СтрокаДанных.Ведомость) Тогда
				Проводка.Содержание = СтрШаблон(НСтр("ru = 'Выплата з/п по ведомости №%1 от %2'", ОбщегоНазначения.КодОсновногоЯзыка()), СтрокаДанных.Номер, Формат(СтрокаДанных.Дата, "ДФ='дд.ММ.гг'"));
			Иначе 
				Проводка.Содержание = НСтр("ru = 'Выплата заработной платы'", ОбщегоНазначения.КодОсновногоЯзыка());
			КонецЕсли;
		КонецЕсли;
		
		Если Реквизиты.НеобходимостьОтраженияВНУ Тогда
			СуммаКПроводке = СтрокаДанных.ДепонированнаяСумма + СтрокаДанных.Сумма;
			Если СуммаКПроводке <> 0 Тогда
				
				ПроводкаНУ = Движения.Налоговый.Добавить(); 					
				// Свойства
				ПроводкаНУ.Период		= Реквизиты.Дата;					
				// Измерения
				ПроводкаНУ.Организация	= Реквизиты.Организация;
				
				ПроводкаНУ.СчетДт = ПроцедурыБухгалтерскогоУчета.ЗаполнитьСчетНалоговогоУчетаПоУмолчанию(ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПоОплатеТруда, Реквизиты.Дата, ПланыСчетов.Налоговый.ВзаиморасчетыСРаботниками);
				Если ВедениеУчетаПоСотрудникам Тогда
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "РаботникиОрганизаций", СтрокаДанных.ФизЛицо);
				КонецЕсли;
				
				// Корреспондеция счетов и аналитика
				ПроводкаНУ.СчетКт			= СтрокаДанных.СчетКтНУ;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, СтрокаДанных.ИмяСубконтоКт1, СтрокаДанных.СубконтоКт1);								
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, СтрокаДанных.ИмяСубконтоКт2, СтрокаДанных.СубконтоКт2);
				// Ресурсы
				ПроводкаНУ.Сумма			= СуммаКПроводке; 					
				// Реквизиты
				Если ЗначениеЗаполнено(СтрокаДанных.Ведомость) Тогда
					ПроводкаНУ.Содержание = СтрШаблон(НСтр("ru = 'Выплата з/п по ведомости №%1 от %2'", ОбщегоНазначения.КодОсновногоЯзыка()), СтрокаДанных.Номер, Формат(СтрокаДанных.Дата, "ДФ='дд.ММ.гг'"));
				Иначе 
					ПроводкаНУ.Содержание = НСтр("ru = 'Выплата заработной платы'", ОбщегоНазначения.КодОсновногоЯзыка());
				КонецЕсли;
				
				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(ПроводкаНУ, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);
			
				ПроцедурыНалоговогоУчета.ВидУчетаНУ(ПроводкаНУ,  Реквизиты.ВидУчетаНУ);

			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Движения.Типовой.Записывать = Истина;
	
	Если Реквизиты.НеобходимостьОтраженияВНУ Тогда
		Движения.Налоговый.Записывать = Истина;
	КонецЕсли;
	
КонецПроцедуры

Функция ПодготовитьТаблицуДвиженияЗП(Реквизиты, ТаблицаПеречислениеЗП, Отказ)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаПеречислениеЗП", ТаблицаПеречислениеЗП);
	Запрос.УстановитьПараметр("Организация", ОбщегоНазначенияБКВызовСервера.ГоловнаяОрганизацияДляУчетаЗарплаты(Реквизиты.Организация));   
	Запрос.УстановитьПараметр("ОбособленноеПодразделение", Реквизиты.Организация);
	Запрос.УстановитьПараметр("Дата", Реквизиты.Дата);

	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;

	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаПеречислениеЗП.ФизЛицо,
		|	ТаблицаПеречислениеЗП.ПериодНачисленияЗарплаты,
		|	ТаблицаПеречислениеЗП.СпособРасчетаСуммКВыплате,
		|	ТаблицаПеречислениеЗП.Сумма
		|ПОМЕСТИТЬ ТаблицаПеречислениеЗП
		|ИЗ
		|	&ТаблицаПеречислениеЗП КАК ТаблицаПеречислениеЗП
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеЗП.ФизЛицо,
		|	ДанныеЗП.ПериодНачисленияЗарплаты,
		|	ДанныеЗП.СпособРасчетаСуммКВыплате,
		|	СУММА(ДанныеЗП.Сумма) КАК Сумма
		|ПОМЕСТИТЬ ДанныеЗП
		|ИЗ
		|	ТаблицаПеречислениеЗП КАК ДанныеЗП
		|
		|СГРУППИРОВАТЬ ПО
		|	ДанныеЗП.ФизЛицо,
		|	ДанныеЗП.ПериодНачисленияЗарплаты,
		|	ДанныеЗП.СпособРасчетаСуммКВыплате";
		
	Запрос.Выполнить();
	
	Если Реквизиты.ПоддержкаРаботыСоСтруктурнымиПодразделениями Или Реквизиты.РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
		
		ПериодыФизЛицаТекст = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДанныеЗП.ФизЛицо,
		|	ДанныеЗП.ПериодНачисленияЗарплаты КАК Период
		|ПОМЕСТИТЬ ВТ_ПериодыСотрудников
		|ИЗ
		|	ДанныеЗП КАК ДанныеЗП
		|";
		
		Запрос.Текст = ПериодыФизЛицаТекст + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета()
					 + СформироватьТекстЗапросаСтруктурныеЕдиницы("ВТ_ПериодыСотрудников", Истина);
		Запрос.Выполнить();
	КонецЕсли;
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДанныеДокумента.ФизЛицо КАК ФизЛицо,
	|	ДанныеДокумента.Сумма КАК Сумма,
	|	ДанныеДокумента.ПериодНачисленияЗарплаты КАК ПериодНачисления,	
	|	ДанныеДокумента.СпособРасчетаСуммКВыплате КАК СпособРасчетаСуммКВыплате,
	|	ЕСТЬNULL(ОстаткиКВыплате.СуммаВзаиморасчетовОстаток, 0) КАК Остаток,
	|	ЕСТЬNULL(ОстаткиКВыплате.ПериодВзаиморасчетов, ДАТАВРЕМЯ(1,1,1)) КАК ПериодВзаиморасчетов";
	
	Если Реквизиты.ПоддержкаРаботыСоСтруктурнымиПодразделениями Или Реквизиты.РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
		Запрос.Текст = Запрос.Текст + ",
		|	ВЫБОР
		|		КОГДА НЕ (ОстаткиКВыплате.СтруктурнаяЕдиница ЕСТЬ NULL)
		|			ТОГДА ОстаткиКВыплате.СтруктурнаяЕдиница
		|		КОГДА НЕ (МестоРаботы.СтруктурнаяЕдиница ЕСТЬ NULL)
		|			ТОГДА МестоРаботы.СтруктурнаяЕдиница
		|		ИНАЧЕ &ОбособленноеПодразделение
		|	КОНЕЦ КАК СтруктурнаяЕдиница,
		|	ВЫБОР
		|		КОГДА НЕ (МестоРаботы.СтруктурнаяЕдиница ЕСТЬ NULL)
		|			ТОГДА МестоРаботы.СтруктурнаяЕдиница
		|		ИНАЧЕ &ОбособленноеПодразделение
		|	КОНЕЦ КАК СтруктурнаяЕдиницаПоМестуРаботы,
		|	ОстаткиКВыплате.Налогоплательщик,
		|	ВЫБОР 
		|		КОГДА НЕ (ОстаткиКВыплате.ПодразделениеОрганизации ЕСТЬ NULL)
		|			ТОГДА ОстаткиКВыплате.ПодразделениеОрганизации
		|		КОГДА НЕ (МестоРаботы.ПодразделениеОрганизации ЕСТЬ NULL)
		|			ТОГДА МестоРаботы.ПодразделениеОрганизации
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
		|	КОНЕЦ КАК ПодразделениеОрганизации,
		|	ВЫБОР 
		|		КОГДА НЕ (МестоРаботы.ПодразделениеОрганизации ЕСТЬ NULL)
		|			ТОГДА МестоРаботы.ПодразделениеОрганизации
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
		|	КОНЕЦ КАК ПодразделениеОрганизацииПоМестуРаботы";
	Иначе
		Запрос.Текст = Запрос.Текст + ",
		|	&ОбособленноеПодразделение КАК СтруктурнаяЕдиница,
		|	&ОбособленноеПодразделение КАК СтруктурнаяЕдиницаПоМестуРаботы,
		|	&ОбособленноеПодразделение КАК Налогоплательщик,
		|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) КАК ПодразделениеОрганизации,
		|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) КАК ПодразделениеОрганизацииПоМестуРаботы";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|ИЗ
	|	ДанныеЗП КАК ДанныеДокумента 
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВзаиморасчетыСРаботникамиОрганизаций.Остатки(
	|										&Дата, 
	|										Организация = &ОбособленноеПодразделение И
	|										ФизЛицо В (ВЫБРАТЬ
	|														ВЫРАЗИТЬ(ФизЛицо КАК Справочник.ФизическиеЛица)
	|													ИЗ
	|														ДанныеЗП КАК Док)) КАК ОстаткиКВыплате
	|	ПО ДанныеДокумента.ФизЛицо = ОстаткиКВыплате.ФизЛицо";
	
	Если Реквизиты.ПоддержкаРаботыСоСтруктурнымиПодразделениями Или Реквизиты.РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
		Запрос.Текст = Запрос.Текст + "
		|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_МестоРаботы КАК МестоРаботы
		|		ПО ДанныеДокумента.ФизЛицо = МестоРаботы.ФизЛицо
		|			И ДанныеДокумента.ПериодНачисленияЗарплаты = МестоРаботы.Период";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "		
	|
	|ГДЕ 
	|	ДанныеДокумента.Сумма <> 0 
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДанныеДокумента.ФизЛицо,
	|	ОстаткиКВыплате.ПериодВзаиморасчетов
	|
	|ИТОГИ МАКСИМУМ(Сумма), СУММА(Остаток), МАКСИМУМ(СтруктурнаяЕдиницаПоМестуРаботы), МАКСИМУМ(ПодразделениеОрганизацииПоМестуРаботы) ПО
	|	ФизЛицо,
	|	СпособРасчетаСуммКВыплате,
	|	ПериодНачисления
	|";

	Возврат Запрос.Выполнить();	
		
КонецФункции

Функция ПодготовитьТаблицуДвиженияДепоненты(Реквизиты, ТаблицаПеречислениеЗП, Отказ)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаПеречислениеЗП", ТаблицаПеречислениеЗП);
	Запрос.УстановитьПараметр("Организация", ОбщегоНазначенияБКВызовСервера.ГоловнаяОрганизацияДляУчетаЗарплаты(Реквизиты.Организация));   
	Запрос.УстановитьПараметр("ОбособленноеПодразделение", Реквизиты.Организация);
	Запрос.УстановитьПараметр("Дата", Реквизиты.Дата);

	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;

	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаПеречислениеЗП.ФизЛицо,
		|	ТаблицаПеречислениеЗП.ПериодНачисленияДепонированнойЗарплаты КАК ПериодНачисленияЗарплаты,
		|	ТаблицаПеречислениеЗП.СпособРасчетаСуммКВыплате,
		|	ТаблицаПеречислениеЗП.ДепонированнаяСумма КАК Сумма
		|ПОМЕСТИТЬ ТаблицаПеречислениеЗП
		|ИЗ
		|	&ТаблицаПеречислениеЗП КАК ТаблицаПеречислениеЗП
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеЗП.ФизЛицо,
		|	ДанныеЗП.ПериодНачисленияЗарплаты,
		|	ДанныеЗП.СпособРасчетаСуммКВыплате,
		|	СУММА(ДанныеЗП.Сумма) КАК Сумма
		|ПОМЕСТИТЬ ДанныеЗП
		|ИЗ
		|	ТаблицаПеречислениеЗП КАК ДанныеЗП
		|
		|СГРУППИРОВАТЬ ПО
		|	ДанныеЗП.ФизЛицо,
		|	ДанныеЗП.ПериодНачисленияЗарплаты,
		|	ДанныеЗП.СпособРасчетаСуммКВыплате";
		
	Запрос.Выполнить();
	
	Если Реквизиты.ПоддержкаРаботыСоСтруктурнымиПодразделениями Или Реквизиты.РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
		
		ПериодыФизЛицаТекст = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДанныеЗП.ФизЛицо,
		|	ДанныеЗП.ПериодНачисленияЗарплаты КАК Период
		|ПОМЕСТИТЬ ВТ_ПериодыСотрудников
		|ИЗ
		|	ДанныеЗП КАК ДанныеЗП
		|";
		
		Запрос.Текст = ПериодыФизЛицаТекст + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета()
					 + СформироватьТекстЗапросаСтруктурныеЕдиницы("ВТ_ПериодыСотрудников", Истина);
		Запрос.Выполнить();
	КонецЕсли;
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДанныеДокумента.ФизЛицо КАК ФизЛицо,
	|	ДанныеДокумента.Сумма КАК Сумма,
	|	ДанныеДокумента.ПериодНачисленияЗарплаты КАК ПериодНачисления,	
	|	ДанныеДокумента.СпособРасчетаСуммКВыплате КАК СпособРасчетаСуммКВыплате,
	|	ЕСТЬNULL(ОстаткиКВыплате.СуммаВзаиморасчетовОстаток, 0) КАК Остаток,
	|	ЕСТЬNULL(ОстаткиКВыплате.ПериодВзаиморасчетов, ДАТАВРЕМЯ(1,1,1)) КАК ПериодВзаиморасчетов";
	
	Если Реквизиты.ПоддержкаРаботыСоСтруктурнымиПодразделениями Или Реквизиты.РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
		Запрос.Текст = Запрос.Текст + ",
		|	ВЫБОР
		|		КОГДА НЕ (ОстаткиКВыплате.СтруктурнаяЕдиница ЕСТЬ NULL)
		|			ТОГДА ОстаткиКВыплате.СтруктурнаяЕдиница
		|		КОГДА НЕ (МестоРаботы.СтруктурнаяЕдиница ЕСТЬ NULL)
		|			ТОГДА МестоРаботы.СтруктурнаяЕдиница
		|		ИНАЧЕ &ОбособленноеПодразделение
		|	КОНЕЦ КАК СтруктурнаяЕдиница,
		|	ВЫБОР
		|		КОГДА НЕ (МестоРаботы.СтруктурнаяЕдиница ЕСТЬ NULL)
		|			ТОГДА МестоРаботы.СтруктурнаяЕдиница
		|		ИНАЧЕ &ОбособленноеПодразделение
		|	КОНЕЦ КАК СтруктурнаяЕдиницаПоМестуРаботы,
		|	ОстаткиКВыплате.Налогоплательщик,
		|	ВЫБОР 
		|		КОГДА НЕ (ОстаткиКВыплате.ПодразделениеОрганизации ЕСТЬ NULL)
		|			ТОГДА ОстаткиКВыплате.ПодразделениеОрганизации
		|		КОГДА НЕ (МестоРаботы.ПодразделениеОрганизации ЕСТЬ NULL)
		|			ТОГДА МестоРаботы.ПодразделениеОрганизации
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
		|	КОНЕЦ КАК ПодразделениеОрганизации,
		|	ВЫБОР 
		|		КОГДА НЕ (МестоРаботы.ПодразделениеОрганизации ЕСТЬ NULL)
		|			ТОГДА МестоРаботы.ПодразделениеОрганизации
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
		|	КОНЕЦ КАК ПодразделениеОрганизацииПоМестуРаботы";
	Иначе
		Запрос.Текст = Запрос.Текст + ",
		|	&ОбособленноеПодразделение КАК СтруктурнаяЕдиница,
		|	&ОбособленноеПодразделение КАК СтруктурнаяЕдиницаПоМестуРаботы,
		|	&ОбособленноеПодразделение КАК Налогоплательщик,
		|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) КАК ПодразделениеОрганизации,
		|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) КАК ПодразделениеОрганизацииПоМестуРаботы";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|ИЗ
	|	ДанныеЗП КАК ДанныеДокумента 
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВзаиморасчетыСДепонентамиОрганизаций.Остатки(
	|										&Дата, 
	|										Организация = &ОбособленноеПодразделение И
	|										ФизЛицо В (ВЫБРАТЬ
	|														ВЫРАЗИТЬ(ФизЛицо КАК Справочник.ФизическиеЛица)
	|													ИЗ
	|														ДанныеЗП КАК Док)) КАК ОстаткиКВыплате
	|	ПО ДанныеДокумента.ФизЛицо = ОстаткиКВыплате.ФизЛицо";
	
	Если Реквизиты.ПоддержкаРаботыСоСтруктурнымиПодразделениями Или Реквизиты.РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
		Запрос.Текст = Запрос.Текст + "
		|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_МестоРаботы КАК МестоРаботы
		|		ПО ДанныеДокумента.ФизЛицо = МестоРаботы.ФизЛицо
		|			И ДанныеДокумента.ПериодНачисленияЗарплаты = МестоРаботы.Период";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "		
	|
	|ГДЕ 
	|	ДанныеДокумента.Сумма <> 0 
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДанныеДокумента.ФизЛицо,
	|	ОстаткиКВыплате.ПериодВзаиморасчетов
	|
	|ИТОГИ МАКСИМУМ(Сумма), СУММА(Остаток), МАКСИМУМ(СтруктурнаяЕдиницаПоМестуРаботы), МАКСИМУМ(ПодразделениеОрганизацииПоМестуРаботы) ПО
	|	ФизЛицо,
	|	СпособРасчетаСуммКВыплате,
	|	ПериодНачисления
	|";

	Возврат Запрос.Выполнить();	
		
КонецФункции

Процедура ЗарегистрироватьДвиженияВыплатаЗП(Реквизиты, Результат, Движения, ИмяРегистра, СпособВыплаты, Отказ)

	ТаблЗначенийВыплаченныеСуммыПоПериодам = Новый ТаблицаЗначений;
	ТаблЗначенийВыплаченныеСуммыПоПериодам.Колонки.Добавить("ПериодВзаиморасчетов");
	ТаблЗначенийВыплаченныеСуммыПоПериодам.Колонки.Добавить("СтруктурнаяЕдиница");
	ТаблЗначенийВыплаченныеСуммыПоПериодам.Колонки.Добавить("Налогоплательщик");
	ТаблЗначенийВыплаченныеСуммыПоПериодам.Колонки.Добавить("ПодразделениеОрганизации");
	ТаблЗначенийВыплаченныеСуммыПоПериодам.Колонки.Добавить("ВыплаченнаяСумма");
	
	ТаблЗначенийВыплаченныеСуммыПоПериодам.Индексы.Добавить("ПериодВзаиморасчетов, СтруктурнаяЕдиница, Налогоплательщик, ПодразделениеОрганизации");
	СтруктураПоиска = Новый Структура("ПериодВзаиморасчетов, СтруктурнаяЕдиница, Налогоплательщик, ПодразделениеОрганизации");
	
	ВыборкаПоФизЛицо = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ФизЛицо");
	Пока ВыборкаПоФизЛицо.Следующий() Цикл
			
		ВыборкаПоСпособуРасчета = ВыборкаПоФизЛицо.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "СпособРасчетаСуммКВыплате");
			
		// Очищаем при смене сотрудника
		ТаблЗначенийВыплаченныеСуммыПоПериодам.Очистить();				
		
		Пока ВыборкаПоСпособуРасчета.Следующий() Цикл					
			
			ВыборкаПоПериодуНачисления = ВыборкаПоСпособуРасчета.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ПериодНачисления");
				
			Пока ВыборкаПоПериодуНачисления.Следующий() Цикл
				
				СуммаКВыплате = ВыборкаПоПериодуНачисления.Сумма;
				Выборка = ВыборкаПоПериодуНачисления.Выбрать();						
				
				Пока Выборка.Следующий() И (СуммаКВыплате <> 0) Цикл
						
					МожноВыплачиватьЗаПериод = Ложь;
					
					// В зависимости от вида выплачиваемой суммы отражаем факт выплаты.
					Если Выборка.СпособРасчетаСуммКВыплате = Перечисления.СпособыРасчетаСуммКВыплате.ЗарплатаЗаМесяц Тогда
						
						Если Реквизиты.ПорядокСписанияЗадолженностиПоЗарплате = Перечисления.ПорядокСписанияЗадолженностиПоЗарплате.ПоМетодуFIFO Тогда
							Если Выборка.ПериодВзаиморасчетов <= Выборка.ПериодНачисления Тогда
								МожноВыплачиватьЗаПериод = Истина;
							КонецЕсли;
						Иначе
							Если Выборка.ПериодВзаиморасчетов = Выборка.ПериодНачисления Тогда
								МожноВыплачиватьЗаПериод = Истина;
							КонецЕсли;
						КонецЕсли;
						
					ИначеЕсли Выборка.СпособРасчетаСуммКВыплате = Перечисления.СпособыРасчетаСуммКВыплате.ОстаткиПоЗарплатеНаКонецМесяца Тогда
						
						Если Выборка.ПериодВзаиморасчетов <= Выборка.ПериодНачисления Тогда
							МожноВыплачиватьЗаПериод = Истина;
						КонецЕсли;
					
					ИначеЕсли Выборка.СпособРасчетаСуммКВыплате = Перечисления.СпособыРасчетаСуммКВыплате.ДепонированнаяЗарплатаЗаМесяц Тогда
						
						Если Реквизиты.ПорядокСписанияЗадолженностиПоЗарплате = Перечисления.ПорядокСписанияЗадолженностиПоЗарплате.ПоМетодуFIFO Тогда
							Если Выборка.ПериодВзаиморасчетов <= Выборка.ПериодНачисления Тогда
								МожноВыплачиватьЗаПериод = Истина;
							КонецЕсли;
						Иначе
							Если Выборка.ПериодВзаиморасчетов = Выборка.ПериодНачисления Тогда
								МожноВыплачиватьЗаПериод = Истина;
							КонецЕсли;
						КонецЕсли;
						
					ИначеЕсли Выборка.СпособРасчетаСуммКВыплате = Перечисления.СпособыРасчетаСуммКВыплате.ОстаткиПоДепонированнойЗарплатеНаКонецМесяца Тогда

						Если Выборка.ПериодВзаиморасчетов <= Выборка.ПериодНачисления Тогда
							МожноВыплачиватьЗаПериод = Истина;
						КонецЕсли;

					ИначеЕсли Выборка.СпособРасчетаСуммКВыплате = Перечисления.СпособыРасчетаСуммКВыплате.ЗарплатаИДепонированнаяЗарплата Тогда
						
						Если Реквизиты.ПорядокСписанияЗадолженностиПоЗарплате = Перечисления.ПорядокСписанияЗадолженностиПоЗарплате.ПоМетодуFIFO Тогда
							Если Выборка.ПериодВзаиморасчетов <= Выборка.ПериодНачисления Тогда
								МожноВыплачиватьЗаПериод = Истина;
							КонецЕсли;
						Иначе
							Если Выборка.ПериодВзаиморасчетов = Выборка.ПериодНачисления Тогда
								МожноВыплачиватьЗаПериод = Истина;
							КонецЕсли;
						КонецЕсли;

					ИначеЕсли Выборка.СпособРасчетаСуммКВыплате = Перечисления.СпособыРасчетаСуммКВыплате.ЗарплатаИОстаткиПоДепонированнойЗарплате Тогда

						// Депонированные суммы выплачиваем вплоть до указанного периода, а 
						// заработную плату - только за текущий месяц
						Если ИмяРегистра = "ВзаиморасчетыСДепонентамиОрганизаций" И Выборка.ПериодВзаиморасчетов <= Выборка.ПериодНачисления Тогда
							МожноВыплачиватьЗаПериод = Истина;
						ИначеЕсли Выборка.ПериодВзаиморасчетов = Выборка.ПериодНачисления И НЕ Реквизиты.ПорядокСписанияЗадолженностиПоЗарплате = Перечисления.ПорядокСписанияЗадолженностиПоЗарплате.ПоМетодуFIFO Тогда
							МожноВыплачиватьЗаПериод = Истина;
						ИначеЕсли Выборка.ПериодВзаиморасчетов <= Выборка.ПериодНачисления И Реквизиты.ПорядокСписанияЗадолженностиПоЗарплате = Перечисления.ПорядокСписанияЗадолженностиПоЗарплате.ПоМетодуFIFO Тогда
							МожноВыплачиватьЗаПериод = Истина;
						КонецЕсли;

					ИначеЕсли Выборка.СпособРасчетаСуммКВыплате = Перечисления.СпособыРасчетаСуммКВыплате.ВсяСуммаЗадолженности Тогда

						Если Выборка.ПериодВзаиморасчетов <= Выборка.ПериодНачисления Тогда
							МожноВыплачиватьЗаПериод = Истина;
						КонецЕсли;
					
					ИначеЕсли Выборка.СпособРасчетаСуммКВыплате = Перечисления.СпособыРасчетаСуммКВыплате.ПоВидуРасчета Тогда
						
						Если Реквизиты.ПорядокСписанияЗадолженностиПоЗарплате = Перечисления.ПорядокСписанияЗадолженностиПоЗарплате.ПоМетодуFIFO Тогда
							Если Выборка.ПериодВзаиморасчетов <= Выборка.ПериодНачисления Тогда
								МожноВыплачиватьЗаПериод = Истина;
							КонецЕсли;
						Иначе
							Если Выборка.ПериодВзаиморасчетов = Выборка.ПериодНачисления Тогда
								МожноВыплачиватьЗаПериод = Истина;
							КонецЕсли;
						КонецЕсли;
					
					Иначе
						
						МожноВыплачиватьЗаПериод = Истина;
						
					КонецЕсли;
					
					Если МожноВыплачиватьЗаПериод Тогда

						ПериодВзаиморасчетовКВыплате = ?(Выборка.ПериодВзаиморасчетов <> '00010101', Выборка.ПериодВзаиморасчетов, НачалоМесяца(Реквизиты.Дата));
						
						ОстатокКВыплате = Выборка.Остаток; 
						
						// Учтем уже ранее выплаченные суммы в цикле,
						// если будут оставаться остатки, то заносим их в регистр с текущими взаиморасчетами
						СтруктураПоиска.ПериодВзаиморасчетов = ПериодВзаиморасчетовКВыплате;
						СтруктураПоиска.СтруктурнаяЕдиница	 = Выборка.СтруктурнаяЕдиница;
						СтруктураПоиска.Налогоплательщик	 = Выборка.Налогоплательщик;
						// Остатки по подразделениям закрываем всегда чтобы не было зависших сумм
						СтруктураПоиска.ПодразделениеОрганизации = Выборка.ПодразделениеОрганизации;
						
						НайденныеСтроки = ТаблЗначенийВыплаченныеСуммыПоПериодам.НайтиСтроки(СтруктураПоиска);
						Если НайденныеСтроки.Количество() <> 0 Тогда
							ОстатокКВыплате = ОстатокКВыплате - НайденныеСтроки[0].ВыплаченнаяСумма;
						КонецЕсли;

						ВыплачиваемаяСумма = Мин(СуммаКВыплате, ОстатокКВыплате);
						
						Если ВыплачиваемаяСумма <> 0 Тогда
						
							Если Выборка.Налогоплательщик = NULL Тогда
								// получаем налогоплательщика по структурной единице по месту работы
								СтруктурнаяЕдиница	= Выборка.СтруктурнаяЕдиницаПоМестуРаботы;
								Налогоплательщик 	= ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(Выборка.СтруктурнаяЕдиницаПоМестуРаботы,
																									Реквизиты.Организация,
																									Перечисления.РазделыНалоговогоУчета.НалогиСЗаработнойПлаты);
							Иначе
								СтруктурнаяЕдиница	= Выборка.СтруктурнаяЕдиница;
								Налогоплательщик 	= Выборка.Налогоплательщик;
							КонецЕсли;
						
							/////////////////////////////////////////////////////////////////////////////
							// ВзаиморасчетыСРаботникамиОрганизаций или ВзаиморасчетыСДепонентамиОрганизаций
							//
						
							Движение = Движения[ИмяРегистра].ДобавитьРасход();
							
							// Свойства
							Движение.Период 				= Реквизиты.Дата;
							
							// Измерения
							Движение.ФизЛицо 				= Выборка.ФизЛицо;
							Если Реквизиты.ПоддержкаРаботыСоСтруктурнымиПодразделениями Или Реквизиты.РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
								Движение.СтруктурнаяЕдиница	= СтруктурнаяЕдиница;
								Движение.Налогоплательщик	= Налогоплательщик;
							Иначе
								Движение.СтруктурнаяЕдиница	= Реквизиты.Организация;
								Движение.Налогоплательщик	= Реквизиты.Организация;
							КонецЕсли;
							Движение.ПериодВзаиморасчетов 	= ПериодВзаиморасчетовКВыплате;
							Движение.Организация			= Реквизиты.Организация;
							// Остатки по подразделениям закрываем всегда чтобы не было зависших сумм
							Движение.ПодразделениеОрганизации = Выборка.ПодразделениеОрганизации;
							
							// Ресурсы
							Движение.СуммаВзаиморасчетов 	= ВыплачиваемаяСумма;
							
							// Реквизиты
							Движение.СпособВыплаты			= СпособВыплаты;
							Движение.ВидСтроки				= Перечисления.РасчетыСБюджетомФондамиВидСтроки.Перечисление;
							
							/////////////////////////////////////////////////////////////////////////////
							// ВыплаченныеДоходыРаботникамОрганизацийНУ
							//

							Движение = Движения.ВыплаченныеДоходыРаботникамОрганизацийНУ.Добавить();
							
							// Свойства
							Движение.Период 				= Реквизиты.Дата;
							
							// Измерения
							Движение.Физлицо				= Выборка.ФизЛицо;
							Если Реквизиты.ПоддержкаРаботыСоСтруктурнымиПодразделениями Или Реквизиты.РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
								Движение.СтруктурнаяЕдиница = СтруктурнаяЕдиница;
								Движение.Налогоплательщик	= Налогоплательщик;
							Иначе
								Движение.СтруктурнаяЕдиница = Реквизиты.Организация;
								Движение.Налогоплательщик	= Реквизиты.Организация;
							КонецЕсли;
							Движение.МесяцНалоговогоПериода = ПериодВзаиморасчетовКВыплате;
							Движение.Организация			= Реквизиты.Организация;
							// Остатки по подразделениям закрываем всегда чтобы не было зависших сумм
							Движение.ПодразделениеОрганизации = Выборка.ПодразделениеОрганизации;
							
							// Ресурсы
							Движение.СуммаДохода			= ВыплачиваемаяСумма;
							
							СуммаКВыплате = СуммаКВыплате - ВыплачиваемаяСумма;
							
							// Запомним, сколько уже выплатили
							Если НайденныеСтроки.Количество() = 0 Тогда
								СтрокаТЗ = ТаблЗначенийВыплаченныеСуммыПоПериодам.Добавить();
								СтрокаТЗ.ПериодВзаиморасчетов = ПериодВзаиморасчетовКВыплате;
								СтрокаТЗ.СтруктурнаяЕдиница	  = Выборка.СтруктурнаяЕдиница; // всегда ищем по полям запроса!
								СтрокаТЗ.Налогоплательщик	  = Выборка.Налогоплательщик;
								СтрокаТЗ.ВыплаченнаяСумма 	  = ВыплачиваемаяСумма;
							Иначе
								НайденныеСтроки[0].ВыплаченнаяСумма = НайденныеСтроки[0].ВыплаченнаяСумма + ВыплачиваемаяСумма;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;										
				
				Если СуммаКВыплате <> 0 Тогда
					// Нераспределенный остаток ставим как выплату в месяце по дате документа
					
					/////////////////////////////////////////////////////////////////////////////
					// ВзаиморасчетыСРаботникамиОрганизаций 
					//
					Движение = Движения[ИмяРегистра].ДобавитьРасход();
					
					// Свойства
					Движение.Период 				= Реквизиты.Дата;
					
					// Измерения
					Движение.ФизЛицо 				= ВыборкаПоПериодуНачисления.ФизЛицо;
					Если Реквизиты.ПоддержкаРаботыСоСтруктурнымиПодразделениями Или Реквизиты.РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
						Налогоплательщик 			= ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(ВыборкаПоПериодуНачисления.СтруктурнаяЕдиницаПоМестуРаботы,
																									Реквизиты.Организация,
																									Перечисления.РазделыНалоговогоУчета.НалогиСЗаработнойПлаты);
						Движение.СтруктурнаяЕдиница	= ВыборкаПоПериодуНачисления.СтруктурнаяЕдиницаПоМестуРаботы;
						Движение.Налогоплательщик	= Налогоплательщик;
					Иначе
						Движение.СтруктурнаяЕдиница = Реквизиты.Организация;
						Движение.Налогоплательщик	= Реквизиты.Организация;
					КонецЕсли;							
					Движение.ПериодВзаиморасчетов   = НачалоМесяца(Реквизиты.Дата);
					Движение.Организация 			= Реквизиты.Организация;
					// Нераспределенный остаток относим на подразделение только если ведется раздельный учет налогов по подразделениям организаций
					Если Реквизиты.РаспределятьНалогиПоПодразделениямОрганизаций Тогда
						Движение.ПодразделениеОрганизации = ВыборкаПоПериодуНачисления.ПодразделениеОрганизацииПоМестуРаботы;
					КонецЕсли;
					
					// Ресурсы
					Движение.СуммаВзаиморасчетов	= СуммаКВыплате;
					
					// Реквизиты
					Движение.СпособВыплаты			= СпособВыплаты;
					Движение.ВидСтроки				= Перечисления.РасчетыСБюджетомФондамиВидСтроки.Перечисление;
					
					/////////////////////////////////////////////////////////////////////////////
					// ВыплаченныеДоходыРаботникамОрганизацийНУ
					//

					Движение = Движения.ВыплаченныеДоходыРаботникамОрганизацийНУ.Добавить();
							
					// Свойства
					Движение.Период 				= Реквизиты.Дата;
							
					// Измерения
					Движение.Физлицо				= ВыборкаПоПериодуНачисления.ФизЛицо;
					Если Реквизиты.ПоддержкаРаботыСоСтруктурнымиПодразделениями Или Реквизиты.РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
						Движение.СтруктурнаяЕдиница = ВыборкаПоПериодуНачисления.СтруктурнаяЕдиницаПоМестуРаботы;
						Движение.Налогоплательщик	= Налогоплательщик;
					Иначе
						Движение.СтруктурнаяЕдиница = Реквизиты.Организация;
						Движение.Налогоплательщик	= Реквизиты.Организация;
					КонецЕсли;
					Движение.МесяцНалоговогоПериода = НачалоМесяца(Реквизиты.Дата);
					Движение.Организация			= Реквизиты.Организация;
					// Нераспределенный остаток относим на подразделение только если ведется раздельный учет налогов по подразделениям организаций
					Если Реквизиты.РаспределятьНалогиПоПодразделениямОрганизаций Тогда
						Движение.ПодразделениеОрганизации = ВыборкаПоПериодуНачисления.ПодразделениеОрганизацииПоМестуРаботы;
					КонецЕсли;
							
					// Ресурсы
					Движение.СуммаДохода			= СуммаКВыплате;
							
				КонецЕсли;
			
			КонецЦикла; // Пока ВыборкаПоПериодуНачисления.Следующий() Цикл
			
		КонецЦикла; // Пока ВыборкаПоСпособуРасчета.Следующий() Цикл

	КонецЦикла; // Пока ВыборкаПоФизЛицо.Следующий() Цикл

КонецПроцедуры

// Возврат зарплаты

Процедура СформироватьДвиженияВозвратЗП(ТаблицаРеквизиты, ТаблицаВозвратЗП, Движения, ТолькоВзаиморасчетыСРаботниками, Отказ, ВозвратБанком = Истина) Экспорт
	
	Если ТаблицаВозвратЗП = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизиты[0];

	ТаблицаДвиженияВозвратЗП = ПодготовитьТаблицуВозвратЗП(Реквизиты, ТаблицаВозвратЗП, Движения, ТолькоВзаиморасчетыСРаботниками, Отказ, ВозвратБанком);
	ЗарегистрироватьДвиженияВозвратЗП(Реквизиты, ТаблицаДвиженияВозвратЗП, Движения, ТолькоВзаиморасчетыСРаботниками, Отказ);
	
КонецПроцедуры

Функция ПодготовитьТаблицуВозвратЗП(Реквизиты, ТаблицаВозвратЗП, Движения, ТолькоВзаиморасчетыСРаботниками, Отказ, ВозвратБанком = Истина)
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ДанныеЗП", ТаблицаВозвратЗП);
	Запрос.УстановитьПараметр("Организация", ОбщегоНазначенияБКВызовСервера.ГоловнаяОрганизацияДляУчетаЗарплаты(Реквизиты.Организация));   
	Запрос.УстановитьПараметр("ОбособленноеПодразделение", Реквизиты.Организация);
	Запрос.УстановитьПараметр("Дата", Реквизиты.Дата);
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;

	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДанныеЗП.ФизЛицо КАК ФизЛицо,
		|	ДанныеЗП.ПериодВозврата КАК ПериодВозврата,
		|	ДанныеЗП.Сумма КАК СуммаВозврата,
		|	ДанныеЗП.СпособВыплаты КАК СпособВыплаты,
		|	ДанныеЗП.СчетДт КАК СчетДт,
		|	ДанныеЗП.СчетДтНУ КАК СчетДтНУ,
		|	ДанныеЗП.ИмяСубконтоДт1 КАК ИмяСубконтоДт1,
		|	ДанныеЗП.СубконтоДт1 КАК СубконтоДт1,
		|	ДанныеЗП.ИмяСубконтоДт2 КАК ИмяСубконтоДт2,
		|	ДанныеЗП.СубконтоДт2 КАК СубконтоДт2
		|ПОМЕСТИТЬ ДанныеЗП
		|ИЗ
		|	&ДанныеЗП КАК ДанныеЗП";
		
	Запрос.Выполнить();
	
	Если Реквизиты.ПоддержкаРаботыСоСтруктурнымиПодразделениями Или Реквизиты.РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
		ПериодыФизЛицаТекст = "
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ДанныеЗП.ФизЛицо,
			|	ДанныеЗП.ПериодВозврата КАК Период
			|ПОМЕСТИТЬ ВТ_ПериодыСотрудников
			|ИЗ
			|	ДанныеЗП КАК ДанныеЗП
			|";
		
		Запрос.Текст = ПериодыФизЛицаТекст + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета()
					 + СформироватьТекстЗапросаСтруктурныеЕдиницы("ВТ_ПериодыСотрудников", Истина);
		Запрос.Выполнить();
	КонецЕсли;

	Если ВозвратБанком Тогда
		
		// находим ближайшие предыдущие перечисления зарплаты через банк и сторнируем их 
		Запрос.Текст = "  
		|ВЫБРАТЬ
		|	1 КАК Приоритет,
		|	""ВзаиморасчетыСРаботникамиОрганизаций"" КАК ИмяРегистра,
		|	ВзаиморасчетыСРаботниками.Физлицо,
		|	ВзаиморасчетыСРаботниками.СтруктурнаяЕдиница,
		|	ВзаиморасчетыСРаботниками.ПодразделениеОрганизации,
		|	НАЧАЛОПЕРИОДА(ВзаиморасчетыСРаботниками.ПериодВзаиморасчетов, МЕСЯЦ) КАК ПериодВзаиморасчетов,
		|	ВзаиморасчетыСРаботниками.Налогоплательщик,
		|	ВзаиморасчетыСРаботниками.Период КАК ДатаВыплаты,
		|	СУММА(ВзаиморасчетыСРаботниками.СуммаВзаиморасчетов) КАК СуммаВыплаты
		|ПОМЕСТИТЬ ВТ_РанееВыплаченнаяЗарплата
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыСРаботникамиОрганизаций КАК ВзаиморасчетыСРаботниками
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеЗП КАК СписокФизЛиц
		|		ПО ВзаиморасчетыСРаботниками.Физлицо = СписокФизЛиц.ФизЛицо
		|ГДЕ
		|	ВзаиморасчетыСРаботниками.Организация = &ОбособленноеПодразделение
		|	И ВзаиморасчетыСРаботниками.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|	И ВзаиморасчетыСРаботниками.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Перечисление)
		|	И ВзаиморасчетыСРаботниками.СпособВыплаты = ЗНАЧЕНИЕ(Перечисление.СпособыВыплатыЗарплаты.ЧерезБанк)
		|	И ВзаиморасчетыСРаботниками.Период <= КОНЕЦПЕРИОДА(&Дата, ДЕНЬ)
		|	И ВзаиморасчетыСРаботниками.Активность
		|
		|СГРУППИРОВАТЬ ПО
		|	ВзаиморасчетыСРаботниками.Физлицо,
		|	ВзаиморасчетыСРаботниками.СтруктурнаяЕдиница,
		|	ВзаиморасчетыСРаботниками.ПодразделениеОрганизации,
		|	НАЧАЛОПЕРИОДА(ВзаиморасчетыСРаботниками.ПериодВзаиморасчетов, МЕСЯЦ),
		|	ВзаиморасчетыСРаботниками.Налогоплательщик,
		|	ВзаиморасчетыСРаботниками.Период " + ?(НЕ ТолькоВзаиморасчетыСРаботниками, "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	2,
		|	""ВзаиморасчетыСДепонентамиОрганизаций"",
		|	ВзаиморасчетыСДепонентами.Физлицо,
		|	ВзаиморасчетыСДепонентами.СтруктурнаяЕдиница,
		|	ВзаиморасчетыСДепонентами.ПодразделениеОрганизации,
		|	НАЧАЛОПЕРИОДА(ВзаиморасчетыСДепонентами.ПериодВзаиморасчетов, МЕСЯЦ),
		|	ВзаиморасчетыСДепонентами.Налогоплательщик,
		|	ВзаиморасчетыСДепонентами.Период,
		|	СУММА(ВзаиморасчетыСДепонентами.СуммаВзаиморасчетов)
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыСДепонентамиОрганизаций КАК ВзаиморасчетыСДепонентами
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеЗП КАК СписокФизЛиц
		|		ПО ВзаиморасчетыСДепонентами.Физлицо = СписокФизЛиц.ФизЛицо
		|ГДЕ
		|	ВзаиморасчетыСДепонентами.Организация = &ОбособленноеПодразделение
		|	И ВзаиморасчетыСДепонентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|	И ВзаиморасчетыСДепонентами.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Перечисление)
		|	И ВзаиморасчетыСДепонентами.СпособВыплаты = ЗНАЧЕНИЕ(Перечисление.СпособыВыплатыЗарплаты.ЧерезБанк)
		|	И ВзаиморасчетыСДепонентами.Период <= КОНЕЦПЕРИОДА(&Дата, ДЕНЬ)
		|	И ВзаиморасчетыСДепонентами.Активность
		|
		|СГРУППИРОВАТЬ ПО
		|	ВзаиморасчетыСДепонентами.Физлицо,
		|	ВзаиморасчетыСДепонентами.СтруктурнаяЕдиница,
		|	ВзаиморасчетыСДепонентами.ПодразделениеОрганизации,
		|	НАЧАЛОПЕРИОДА(ВзаиморасчетыСДепонентами.ПериодВзаиморасчетов, МЕСЯЦ),
		|	ВзаиморасчетыСДепонентами.Налогоплательщик,
		|	ВзаиморасчетыСДепонентами.Период", "");
		
	Иначе
		// Для кассовых возвратов находим все переплаты и перекрываем их
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	1 КАК Приоритет,
		|	""ВзаиморасчетыСРаботникамиОрганизаций"" КАК ИмяРегистра,
		|	ВзаиморасчетыСРаботниками.Физлицо,
		|	ВзаиморасчетыСРаботниками.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
		|	ВзаиморасчетыСРаботниками.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
		|	НАЧАЛОПЕРИОДА(ВзаиморасчетыСРаботниками.ПериодВзаиморасчетов, МЕСЯЦ) КАК ПериодВзаиморасчетов,
		|	ВзаиморасчетыСРаботниками.Налогоплательщик КАК Налогоплательщик,
		|	&Дата КАК ДатаВыплаты,
		|	- (ВзаиморасчетыСРаботниками.СуммаВзаиморасчетовОстаток) КАК СуммаВыплаты
		|ПОМЕСТИТЬ ВТ_РанееВыплаченнаяЗарплата
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыСРаботникамиОрганизаций.Остатки(
		|			&Дата, 
		|			Организация = &Организация) КАК ВзаиморасчетыСРаботниками
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеЗП КАК СписокФизЛиц
		|		ПО ВзаиморасчетыСРаботниками.Физлицо = СписокФизЛиц.ФизЛицо
		|ГДЕ
		|	ВзаиморасчетыСРаботниками.СуммаВзаиморасчетовОстаток < 0 ";
		
	КонецЕсли;
		
	
	Запрос.Текст = Запрос.Текст + "
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВозвратЗарплаты.ФизЛицо,
	|	ВозвратЗарплаты.СуммаВозврата,
	|	ВозвратЗарплаты.СчетДт КАК СчетДт,
	|	ВозвратЗарплаты.СчетДтНУ КАК СчетДтНУ,
	|	ВозвратЗарплаты.ИмяСубконтоДт1 КАК ИмяСубконтоДт1,
	|	ВозвратЗарплаты.СубконтоДт1 КАК СубконтоДт1,
	|	ВозвратЗарплаты.ИмяСубконтоДт2 КАК ИмяСубконтоДт2,
	|	ВозвратЗарплаты.СубконтоДт2 КАК СубконтоДт2,
	|	ВозвратЗарплаты.СпособВыплаты,
	|	РанееВыплаченнаяЗарплата.ИмяРегистра,
	|	РанееВыплаченнаяЗарплата.ПериодВзаиморасчетов,
	|	ЕСТЬNULL(РанееВыплаченнаяЗарплата.СуммаВыплаты, 0) КАК СуммаВыплаты,
	|	РанееВыплаченнаяЗарплата.ДатаВыплаты";
	
	Если Реквизиты.ПоддержкаРаботыСоСтруктурнымиПодразделениями Или Реквизиты.РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
		Запрос.Текст = Запрос.Текст + ",
		|	ВЫБОР
		|		КОГДА НЕ (РанееВыплаченнаяЗарплата.СтруктурнаяЕдиница ЕСТЬ NULL)
		|			ТОГДА РанееВыплаченнаяЗарплата.СтруктурнаяЕдиница
		|		КОГДА НЕ (МестоРаботы.СтруктурнаяЕдиница ЕСТЬ NULL) 
		|			ТОГДА МестоРаботы.СтруктурнаяЕдиница
		|		ИНАЧЕ &ОбособленноеПодразделение
		|	КОНЕЦ КАК СтруктурнаяЕдиница,
		|	ВЫБОР
		|		КОГДА НЕ (МестоРаботы.СтруктурнаяЕдиница ЕСТЬ NULL) 
		|			ТОГДА МестоРаботы.СтруктурнаяЕдиница
		|		ИНАЧЕ &ОбособленноеПодразделение
		|	КОНЕЦ КАК СтруктурнаяЕдиницаПоМестуРаботы,
		|	ВЫБОР
		|		КОГДА НЕ (РанееВыплаченнаяЗарплата.ПодразделениеОрганизации ЕСТЬ NULL)
		|			ТОГДА РанееВыплаченнаяЗарплата.ПодразделениеОрганизации
		|		КОГДА НЕ (МестоРаботы.ПодразделениеОрганизации ЕСТЬ NULL) 
		|			ТОГДА МестоРаботы.ПодразделениеОрганизации
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
		|	КОНЕЦ КАК ПодразделениеОрганизации,
		|	ВЫБОР
		|		КОГДА НЕ (МестоРаботы.ПодразделениеОрганизации ЕСТЬ NULL) 
		|			ТОГДА МестоРаботы.ПодразделениеОрганизации
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
		|	КОНЕЦ КАК ПодразделениеОрганизацииПоМестуРаботы,
		|	ВЫБОР
		|		КОГДА НЕ(РанееВыплаченнаяЗарплата.Налогоплательщик ЕСТЬ NULL)
		|			ТОГДА РанееВыплаченнаяЗарплата.Налогоплательщик
		|		ИНАЧЕ &ОбособленноеПодразделение
		|	КОНЕЦ КАК Налогоплательщик";
	Иначе
		Запрос.Текст = Запрос.Текст + ",
		|	&ОбособленноеПодразделение КАК СтруктурнаяЕдиница,
		|	&ОбособленноеПодразделение КАК СтруктурнаяЕдиницаПоМестуРаботы,
		|   ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) КАК ПодразделениеОрганизации,
		|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) КАК ПодразделениеОрганизацииПоМестуРаботы,
		|	&ОбособленноеПодразделение КАК Налогоплательщик";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|ИЗ
	|	ДанныеЗП КАК ВозвратЗарплаты
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РанееВыплаченнаяЗарплата КАК РанееВыплаченнаяЗарплата
	|		ПО ВозвратЗарплаты.ФизЛицо = РанееВыплаченнаяЗарплата.Физлицо";
	
	Если Реквизиты.ПоддержкаРаботыСоСтруктурнымиПодразделениями Или Реквизиты.РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
		Запрос.Текст = Запрос.Текст + "
		|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_МестоРаботы КАК МестоРаботы
		|		ПО  ВозвратЗарплаты.ФизЛицо = МестоРаботы.ФизЛицо";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВозвратЗарплаты.ФизЛицо,
	|	РанееВыплаченнаяЗарплата.ДатаВыплаты УБЫВ, // считаем, что возвращают самое последнее перечисление зарплаты
	|	РанееВыплаченнаяЗарплата.Приоритет, // сначала текущие взаиморасчеты, а потом ранее депонированные суммы
	|	РанееВыплаченнаяЗарплата.ПериодВзаиморасчетов УБЫВ // возвращаем наименее просроченные долги
	|";
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

Процедура ЗарегистрироватьДвиженияВозвратЗП(Реквизиты, Выборка, Движения, ТолькоВзаиморасчетыСРаботниками, Отказ)
	
	СуммаВозвратаТекущихВзаиморасчетовИтог = 0;
	СуммаВозвратаДепонированнойЗарплатыИтог = 0;
	
	КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	
	Пока Выборка.СледующийПоЗначениюПоля("ФизЛицо") Цикл
	
		// проводки по бухгалтерскому регистру будут на общие суммы - накопим итоги для них
		СуммаВозвратаТекущихВзаиморасчетов = 0;
		СуммаВозвратаДепонированнойЗарплаты = 0;
		
		ОстатокКВозврату 	= Выборка.СуммаВозврата;
		ФизЛицо 			= Выборка.ФизЛицо;
		СтруктурнаяЕдиницаПоМестуРаботы = Выборка.СтруктурнаяЕдиницаПоМестуРаботы;
		ПодразделениеОрганизацииПоМестуРаботы = Выборка.ПодразделениеОрганизацииПоМестуРаботы;
		
		// обходим все предыдущие перечисления
		Пока Выборка.Следующий() И Выборка.Налогоплательщик <> NULL И ОстатокКВозврату <> 0 Цикл
			
			СуммаКВозврату = Мин(ОстатокКВозврату, Выборка.СуммаВыплаты);
			ОстатокКВозврату = ОстатокКВозврату - СуммаКВозврату;
			
			Если СуммаКВозврату = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ИмяРегистра = Выборка.ИмяРегистра;
			Если НЕ ЗначениеЗаполнено(ИмяРегистра) Тогда
				ИмяРегистра = "ВзаиморасчетыСРаботникамиОрганизаций";
			КонецЕсли;
			
			Если ИмяРегистра = "ВзаиморасчетыСРаботникамиОрганизаций" Тогда
				СуммаВозвратаТекущихВзаиморасчетов = СуммаВозвратаТекущихВзаиморасчетов + СуммаКВозврату;
				СуммаВозвратаТекущихВзаиморасчетовИтог = СуммаВозвратаТекущихВзаиморасчетовИтог + СуммаКВозврату;
			Иначе
				СуммаВозвратаДепонированнойЗарплаты = СуммаВозвратаДепонированнойЗарплаты + СуммаКВозврату;
				СуммаВозвратаДепонированнойЗарплатыИтог = СуммаВозвратаДепонированнойЗарплатыИтог + СуммаКВозврату;
			КонецЕсли;
			
			////////////////////////////////////////////////////////
			// ВзаиморасчетыСРаботникамиОрганизаций 
			
			Движение = Движения[ИмяРегистра].Добавить();
			
			// Свойства
			Движение.Период 		= Реквизиты.Дата;
			Движение.ВидДвижения 	= ВидДвиженияНакопления.Расход;
			
			// Измерения
			Движение.ФизЛицо		= Выборка.ФизЛицо;
			Если Реквизиты.ПоддержкаРаботыСоСтруктурнымиПодразделениями Или Реквизиты.РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
				Движение.СтруктурнаяЕдиница	 = Выборка.СтруктурнаяЕдиница;
				Движение.Налогоплательщик	 = Выборка.Налогоплательщик;
			Иначе
				Движение.СтруктурнаяЕдиница	 = Реквизиты.Организация;
				Движение.Налогоплательщик	 = Реквизиты.Организация;
			КонецЕсли;
			Движение.ПериодВзаиморасчетов	 = Выборка.ПериодВзаиморасчетов;
			Движение.Организация 			 = Реквизиты.Организация;
			// Остаток всегда списываем по подразделениям, чтобы не было зависания остатков
			Движение.ПодразделениеОрганизации = Выборка.ПодразделениеОрганизации;
			
			// Ресурсы
			Движение.СуммаВзаиморасчетов	 = - СуммаКВозврату;
			
			// Реквизиты
			Движение.СпособВыплаты			 = Выборка.СпособВыплаты;
			Движение.ВидСтроки				 = Перечисления.РасчетыСБюджетомФондамиВидСтроки.Возврат;

			////////////////////////////////////////////////////////
			// ВыплаченныеДоходыРаботникамОрганизацийНУ
			
			Движение = Движения.ВыплаченныеДоходыРаботникамОрганизацийНУ.Добавить();
			
			// Свойства
			Движение.Период			= Реквизиты.Дата; 
			
			// Измерения						
			Движение.ФизЛицо		= Выборка.ФизЛицо;
			Если Реквизиты.ПоддержкаРаботыСоСтруктурнымиПодразделениями Или Реквизиты.РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
				Движение.СтруктурнаяЕдиница	 = Выборка.СтруктурнаяЕдиница;
				Движение.Налогоплательщик	 = Выборка.Налогоплательщик;
			Иначе
				Движение.СтруктурнаяЕдиница	 = Реквизиты.Организация;
				Движение.Налогоплательщик	 = Реквизиты.Организация;
			КонецЕсли;
			Движение.МесяцНалоговогоПериода	 = Выборка.ПериодВзаиморасчетов;
			Движение.Организация			 = Реквизиты.Организация;
			// Остаток всегда списываем по подразделениям, чтобы не было зависания остатков
			Движение.ПодразделениеОрганизации = Выборка.ПодразделениеОрганизации;
			
			// Ресурсы
			Движение.СуммаДохода			 = - СуммаКВозврату;
		
		КонецЦикла; // Пока Выборка.Следующий() Цикл
		
		Если ОстатокКВозврату <> 0 Тогда
			// "лишний" вернувшийся остаток ставим на структурное подразделение по месту работы датой возврата
			
			СуммаВозвратаТекущихВзаиморасчетов = СуммаВозвратаТекущихВзаиморасчетов + ОстатокКВозврату;
			СуммаВозвратаТекущихВзаиморасчетовИтог = СуммаВозвратаТекущихВзаиморасчетовИтог + ОстатокКВозврату;
			
			////////////////////////////////////////////////////////
			// ВзаиморасчетыСРаботникамиОрганизаций 
			
			Движение = Движения.ВзаиморасчетыСРаботникамиОрганизаций.Добавить();
			
			// Свойства
			Движение.Период 		= Реквизиты.Дата;
			Движение.ВидДвижения 	= ВидДвиженияНакопления.Расход;
			
			// Измерения
			Движение.ФизЛицо		= ФизЛицо;
			Если Реквизиты.ПоддержкаРаботыСоСтруктурнымиПодразделениями Или Реквизиты.РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
				Налогоплательщик			 = ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(СтруктурнаяЕдиницаПоМестуРаботы,
																							Реквизиты.Организация,
																							Перечисления.РазделыНалоговогоУчета.НалогиСЗаработнойПлаты);
				Движение.СтруктурнаяЕдиница	 = СтруктурнаяЕдиницаПоМестуРаботы;
				Движение.Налогоплательщик	 = Налогоплательщик;
			Иначе
				Движение.СтруктурнаяЕдиница	 = Реквизиты.Организация;
				Движение.Налогоплательщик	 = Реквизиты.Организация;
			КонецЕсли;
			Движение.ПериодВзаиморасчетов	 = НачалоМесяца(Реквизиты.Дата);
			Движение.Организация 			 = Реквизиты.Организация;
			//Нераспределенный остаток относим на основное место работы только если используется распределение
			Если Реквизиты.РаспределятьНалогиПоПодразделениямОрганизаций Тогда
				Движение.ПодразделениеОрганизации = ПодразделениеОрганизацииПоМестуРаботы;
			КонецЕсли;
			
			// Ресурсы
			Движение.СуммаВзаиморасчетов	 = - ОстатокКВозврату;
			
			// Реквизиты
			Движение.СпособВыплаты			 = Выборка.СпособВыплаты;
			Движение.ВидСтроки				 = Перечисления.РасчетыСБюджетомФондамиВидСтроки.Возврат;

			////////////////////////////////////////////////////////
			// ВыплаченныеДоходыРаботникамОрганизацийНУ
			
			Движение = Движения.ВыплаченныеДоходыРаботникамОрганизацийНУ.Добавить();
			
			// Свойства
			Движение.Период			= Реквизиты.Дата; 
			
			// Измерения						
			Движение.ФизЛицо		= Выборка.ФизЛицо;
			Если Реквизиты.ПоддержкаРаботыСоСтруктурнымиПодразделениями Или Реквизиты.РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
				Движение.СтруктурнаяЕдиница	 = СтруктурнаяЕдиницаПоМестуРаботы;
				Движение.Налогоплательщик	 = Налогоплательщик;
			Иначе
				Движение.СтруктурнаяЕдиница	 = Реквизиты.Организация;
				Движение.Налогоплательщик	 = Реквизиты.Организация;
			КонецЕсли;
			Движение.МесяцНалоговогоПериода	 = НачалоМесяца(Реквизиты.Дата);
			Движение.Организация			 = Реквизиты.Организация;
			//Нераспределенный остаток относим на основное место работы только если используется распределение
			Если Реквизиты.РаспределятьНалогиПоПодразделениямОрганизаций Тогда
				Движение.ПодразделениеОрганизации = ПодразделениеОрганизацииПоМестуРаботы;
			КонецЕсли;
			
			// Ресурсы
			Движение.СуммаДохода			 = - ОстатокКВозврату;
			
		КонецЕсли;
		/////////////////////////////////////////////////////////////////
		// бухгалтерские проводки 
		//
		
		Если СуммаВозвратаТекущихВзаиморасчетов <> 0 Тогда
			Проводка = Движения.Типовой.Добавить();
				
			// Свойства
			Проводка.Период			= Реквизиты.Дата;
				
			// Измерения
			Проводка.Организация	= Реквизиты.Организация;
				
			// Корреспондеция счетов и аналитика
			Проводка.СчетДт			= Выборка.СчетДт;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, Выборка.ИмяСубконтоДт1, Выборка.СубконтоДт1);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, Выборка.ИмяСубконтоДт2, Выборка.СубконтоДт2);
			
			Если Проводка.СчетДт.Валютный Тогда
				Проводка.ВалютаДт 			= Реквизиты.ВалютаДокумента;
				Проводка.ВалютнаяСуммаДт 	= СуммаВозвратаТекущихВзаиморасчетов;
			КонецЕсли;
				
			Проводка.СчетКт 	= ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПоОплатеТруда;
			Если Реквизиты.ВедениеУчетаПоСотрудникам Тогда
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "РаботникиОрганизаций", Выборка.ФизЛицо);
			КонецЕсли;
							    
			// Ресурсы
			Проводка.Сумма			= СуммаВозвратаТекущихВзаиморасчетов;
			    
			// Реквизиты
			Проводка.Содержание		= НСтр("ru = 'Возврат ранее перечисленной зарплаты'", КодОсновногоЯзыка);
			
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(Проводка, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);

		КонецЕсли;
		
		Если СуммаВозвратаДепонированнойЗарплаты <> 0 Тогда
			Проводка = Движения.Типовой.Добавить();
				
			// Свойства
			Проводка.Период			= Реквизиты.Дата;
				
			// Измерения
			Проводка.Организация	= Реквизиты.Организация;
				
			// Корреспондеция счетов и аналитика
			Проводка.СчетДт			= Выборка.СчетДт;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, Выборка.ИмяСубконтоДт1, Выборка.СубконтоДт1);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, Выборка.ИмяСубконтоДт2, Выборка.СубконтоДт2);
				
			Если Проводка.СчетДт.Валютный Тогда
				Проводка.ВалютаДт 			= Реквизиты.ВалютаДокумента;
				Проводка.ВалютнаяСуммаДт 	= СуммаВозвратаДепонированнойЗарплаты;
			КонецЕсли;
			
			Проводка.СчетКт 	= ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПоДепонированнойЗаработнойПлате;
			Если Реквизиты.ВедениеУчетаПоСотрудникам Тогда
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "РаботникиОрганизаций", Выборка.ФизЛицо);
			КонецЕсли;
			    
			// Ресурсы
			Проводка.Сумма			= СуммаВозвратаДепонированнойЗарплаты;
			    
			// Реквизиты
			Проводка.Содержание		= НСтр("ru = 'Возврат ранее перечисленной зарплаты'", КодОсновногоЯзыка);
			
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(Проводка, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);

		КонецЕсли;
		
		Если Реквизиты.НеобходимостьОтраженияВНУ Тогда
			//по налоговому учеу не делится депонированная ли ЗП или нет
			//учитывается вообщем
			СуммаКПроводке = СуммаВозвратаТекущихВзаиморасчетов + СуммаВозвратаДепонированнойЗарплаты;
			Если СуммаКПроводке <> 0 Тогда
				
								
				ПроводкаНУ = Движения.Налоговый.Добавить();
				
				// Свойства
				ПроводкаНУ.Период		= Реквизиты.Дата;
				
				// Измерения
				ПроводкаНУ.Организация	= Реквизиты.Организация;
				
				// Корреспондеция счетов и аналитика
				ПроводкаНУ.СчетДт			= Выборка.СчетДтНУ;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, Выборка.ИмяСубконтоДт1, Выборка.СубконтоДт1);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, Выборка.ИмяСубконтоДт2, Выборка.СубконтоДт2);
				
				ПроводкаНУ.СчетКт = ПроцедурыБухгалтерскогоУчета.ЗаполнитьСчетНалоговогоУчетаПоУмолчанию(ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПоОплатеТруда, Реквизиты.Дата, ПланыСчетов.Налоговый.ВзаиморасчетыСРаботниками);
				Если Реквизиты.ВедениеУчетаПоСотрудникам Тогда
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "РаботникиОрганизаций", Выборка.ФизЛицо);
				КонецЕсли;
									
				// Ресурсы
				ПроводкаНУ.Сумма			= СуммаКПроводке;
				
				// Реквизиты
				ПроводкаНУ.Содержание		= НСтр("ru = 'Возврат ранее перечисленной зарплаты'", КодОсновногоЯзыка);
				
				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(ПроводкаНУ, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);
				
				ПроцедурыНалоговогоУчета.ВидУчетаНУ(ПроводкаНУ,  Реквизиты.ВидУчетаНУ);
				
			КонецЕсли;
			
			
		КонецЕсли;		
	
	КонецЦикла; // Пока Выборка.СледующийПоЗначениюПоля("ФизЛицо") Цикл

	Движения.ВзаиморасчетыСРаботникамиОрганизаций.Записывать = Истина;
	Движения.ВыплаченныеДоходыРаботникамОрганизацийНУ.Записывать = Истина;
	Если НЕ ТолькоВзаиморасчетыСРаботниками Тогда
		Движения.ВзаиморасчетыСДепонентамиОрганизаций.Записывать = Истина;
	КонецЕсли;
	Движения.Типовой.Записывать = Истина;
	Если Реквизиты.НеобходимостьОтраженияВНУ Тогда
		Движения.Налоговый.Записывать = Истина;
	КонецЕсли;
		
КонецПроцедуры
	
// Перечисление ОПВ и ОППВ

Процедура СформироватьДвиженияПеречислениеОПВ(ТаблицаРеквизиты, ТаблицаПеречислениеОПВ, Движения, Отказ) Экспорт
	
	Если ТаблицаПеречислениеОПВ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизиты[0];
	СформироватьПроводкиПеречислениеОПВ(Реквизиты, ТаблицаПеречислениеОПВ.Скопировать(), Движения, Отказ);
	
	Если Реквизиты.ЕстьПеречислениеПенсионныхВзносов Тогда
		ТаблицаДвиженияОПВ = ПодготовитьТаблицуДвиженияОПВ(Реквизиты, ТаблицаПеречислениеОПВ, Отказ); 
		ЗарегистрироватьДвиженияПеречислениеОПВ(Реквизиты, ТаблицаДвиженияОПВ, Движения, Отказ);
	КонецЕсли;
	
	Если Реквизиты.ЕстьПеречислениеПрофессиональныхПенсионныхВзносов Тогда 
		ТаблицаДвиженияОППВ= ПодготовитьТаблицуДвиженияОППВ(Реквизиты, ТаблицаПеречислениеОПВ, Отказ);
		ЗарегистрироватьДвиженияПеречислениеОППВ(Реквизиты, ТаблицаДвиженияОППВ, Движения, Отказ);
	КонецЕсли;

	Если Реквизиты.ЕстьПеречислениеПенсионныхВзносовРаботодателя Тогда 
		ТаблицаДвиженияОПВР = ПодготовитьТаблицуДвиженияОПВР(Реквизиты, ТаблицаПеречислениеОПВ, Отказ);
		ЗарегистрироватьДвиженияПеречислениеОПВР(Реквизиты, ТаблицаДвиженияОПВР, Движения, Отказ);
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьПроводкиПеречислениеОПВ(Реквизиты, ТаблицаПеречислениеОПВ, Движения, Отказ) 
	
	ВедениеУчетаПоСотрудникам = Реквизиты.ВедениеУчетаПоСотрудникам;
	
	ТаблицаФормированияПроводок = ТаблицаПеречислениеОПВ;
	
	// если учет по сотрудникам не ведется, необходимо сгруппировать данные для отображения в БУ по виду платежа и месяцу исчисления
	Если НЕ ВедениеУчетаПоСотрудникам Тогда
		ТаблицаФормированияПроводок.Свернуть("ВидПлатежа, МесяцИсчисления, ВидОперацииВедомости, СчетКт, СчетКтНУ, СчетКтНУПоУмолчанию, ИмяСубконтоКт1, ИмяСубконтоКт2, СубконтоКт1, СубконтоКт2", "Сумма");  
	КонецЕсли;
	
	Для Каждого СтрокаДанных Из ТаблицаФормированияПроводок Цикл
		
		// Движения по регистру "Типовой"
		
		// СчетДт
		Если СтрокаДанных.ВидОперацииВедомости = Перечисления.ВидыОперацийОПВПеречислениеВФонды.ПеречислениеОбязательныхПенсионныхВзносов Тогда
			СчетДт = Справочники.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносы.СчетУчетаРасчетовСКонтрагентомБУ;
		ИначеЕсли СтрокаДанных.ВидОперацииВедомости = Перечисления.ВидыОперацийОПВПеречислениеВФонды.ПеречислениеОбязательныхПенсионныхВзносовРаботодателя Тогда
			СчетДт = Справочники.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносыРаботодателя.СчетУчетаРасчетовСКонтрагентомБУ;
		Иначе
			СчетДт = Справочники.НалогиСборыОтчисления.ОбязательныеПрофессиональныеПенсионныеВзносы.СчетУчетаРасчетовСКонтрагентомБУ;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СчетДт) Тогда
			Если СтрокаДанных.ВидОперацииВедомости = Перечисления.ВидыОперацийОПВПеречислениеВФонды.ПеречислениеОбязательныхПенсионныхВзносовРаботодателя Тогда
				СчетДт = ПланыСчетов.Типовой.ОбязательстваПоОбязательнымПенсионнымВзносамРаботодателя;
			Иначе
				СчетДт = ПланыСчетов.Типовой.ОбязательстваПоПенсионнымОтчислениям;
			КонецЕсли;
		КонецЕсли;
		
		// СчетДтНУ
		Если СтрокаДанных.ВидОперацииВедомости = Перечисления.ВидыОперацийОПВПеречислениеВФонды.ПеречислениеОбязательныхПенсионныхВзносов Тогда
			СчетДтНУ = Справочники.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносы.СчетУчетаРасчетовСКонтрагентомНУ;
		ИначеЕсли СтрокаДанных.ВидОперацииВедомости = Перечисления.ВидыОперацийОПВПеречислениеВФонды.ПеречислениеОбязательныхПенсионныхВзносовРаботодателя Тогда
			СчетДтНУ = Справочники.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносыРаботодателя.СчетУчетаРасчетовСКонтрагентомНУ;
		Иначе
			СчетДтНУ = Справочники.НалогиСборыОтчисления.ОбязательныеПрофессиональныеПенсионныеВзносы.СчетУчетаРасчетовСКонтрагентомНУ;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СчетДтНУ) Тогда
			Если СтрокаДанных.ВидОперацииВедомости = Перечисления.ВидыОперацийОПВПеречислениеВФонды.ПеречислениеОбязательныхПенсионныхВзносовРаботодателя Тогда
				СчетДтНУПоУмолчанию = ПланыСчетов.Налоговый.ОбязательстваПоОбязательнымПенсионнымВзносамРаботодателя;
			Иначе
				СчетДтНУПоУмолчанию = ПланыСчетов.Налоговый.ОбязательстваПоПенсионнымОтчислениям;
			КонецЕсли;
			СчетДтНУ = ПроцедурыБухгалтерскогоУчета.ЗаполнитьСчетНалоговогоУчетаПоУмолчанию(СчетДт, Реквизиты.Дата, СчетДтНУПоУмолчанию);
		КонецЕсли;
		
		Если СтрокаДанных.ВидОперацииВедомости = Перечисления.ВидыОперацийОПВПеречислениеВФонды.ПеречислениеОбязательныхПенсионныхВзносов Тогда
			ТекстПроводки = НСтр("ru = 'ОПВ за %1 г.'", ОбщегоНазначения.КодОсновногоЯзыка());
			СубконтоНалогиСборыОтчисления = Справочники.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносы;
		ИначеЕсли СтрокаДанных.ВидОперацииВедомости = Перечисления.ВидыОперацийОПВПеречислениеВФонды.ПеречислениеОбязательныхПенсионныхВзносовРаботодателя Тогда
			ТекстПроводки = НСтр("ru = 'ОПВР за %1 г.'", ОбщегоНазначения.КодОсновногоЯзыка());
			СубконтоНалогиСборыОтчисления = Справочники.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносыРаботодателя;
		Иначе
			ТекстПроводки = НСтр("ru = 'ОППВ за %1 г.'", ОбщегоНазначения.КодОсновногоЯзыка());
			СубконтоНалогиСборыОтчисления = Справочники.НалогиСборыОтчисления.ОбязательныеПрофессиональныеПенсионныеВзносы;
		КонецЕсли;
		ТекстПроводки = СтрШаблон(ТекстПроводки, Формат(СтрокаДанных.МесяцИсчисления, "ДФ='ММММ гггг'"));
		
		Проводка = Движения.Типовой.Добавить();
		
		//	Свойства
		Проводка.Период		 = Реквизиты.Дата;
		
		// Измерения
		Проводка.Организация = Реквизиты.Организация;
		
		Проводка.СчетДт		 = СчетДт;
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НалогиСборыОтчисления", СубконтоНалогиСборыОтчисления);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ВидыПлатежейВБюджетИФонды", СтрокаДанных.ВидПлатежа);
		
		Если ВедениеУчетаПоСотрудникам Тогда
			Если СтрокаДанных.ВидОперацииВедомости = Перечисления.ВидыОперацийОПВПеречислениеВФонды.ПеречислениеОбязательныхПенсионныхВзносов  Тогда
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "РаботникиОрганизаций", СтрокаДанных.ФизЛицоБУ);
			Иначе
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "РаботникиОрганизаций", СтрокаДанных.ФизЛицо);
			КонецЕсли;
		КонецЕсли;
		
		Проводка.СчетКт		 = СтрокаДанных.СчетКт;
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, СтрокаДанных.ИмяСубконтоКт1, СтрокаДанных.СубконтоКт1);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, СтрокаДанных.ИмяСубконтоКт2, СтрокаДанных.СубконтоКт2);
		
		ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(Проводка, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);

		Если Проводка.СчетКт.Валютный Тогда
			Проводка.ВалютаКт 			= Реквизиты.ВалютаДокумента;
			Проводка.ВалютнаяСуммаКт 	= СтрокаДанных.Сумма;
		КонецЕсли;
		
		// Ресурсы
		Проводка.Сумма		 = СтрокаДанных.Сумма;
		
		// Реквизиты
		Проводка.Содержание	 = ТекстПроводки;
		
		//Движения по регистру "Налоговый"
		Если Реквизиты.НеобходимостьОтраженияВНУ Тогда
			ПроводкаНУ = Движения.Налоговый.Добавить();
			
			// Свойства
			ПроводкаНУ.Период			= Реквизиты.Дата;
			
			// Измерения
			ПроводкаНУ.Организация		= Реквизиты.Организация;
			
			ПроводкаНУ.СчетДт			= СчетДтНУ;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "НалогиСборыОтчисления", СубконтоНалогиСборыОтчисления);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "ВидыПлатежейВБюджетИФонды", СтрокаДанных.ВидПлатежа);
			
			Если ВедениеУчетаПоСотрудникам Тогда
				Если СтрокаДанных.ВидОперацииВедомости = Перечисления.ВидыОперацийОПВПеречислениеВФонды.ПеречислениеОбязательныхПенсионныхВзносов  Тогда
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "РаботникиОрганизаций", СтрокаДанных.ФизЛицоБУ);
				Иначе
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "РаботникиОрганизаций", СтрокаДанных.ФизЛицо);
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаДанных.СчетКтНУ) Тогда
				ПроводкаНУ.СчетКт = СтрокаДанных.СчетКтНУ;
			Иначе 
				ПроводкаНУ.СчетКт = ПроцедурыБухгалтерскогоУчета.ЗаполнитьСчетНалоговогоУчетаПоУмолчанию(СтрокаДанных.СчетКт, Реквизиты.Дата, СтрокаДанных.СчетКтНУПоУмолчанию);
			КонецЕсли;
			
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, СтрокаДанных.ИмяСубконтоКт1, СтрокаДанных.СубконтоКт1);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, СтрокаДанных.ИмяСубконтоКт2, СтрокаДанных.СубконтоКт2);
			
			ПроводкаНУ.Сумма			= СтрокаДанных.Сумма;
			
			// Реквизиты
			ПроводкаНУ.Содержание		= ТекстПроводки;
			
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(ПроводкаНУ, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);
			
			ПроцедурыНалоговогоУчета.ВидУчетаНУ(ПроводкаНУ,  Реквизиты.ВидУчетаНУ);
			
		КонецЕсли;

	 КонецЦикла;

	Движения.Типовой.Записывать = Истина;
	
	Если Реквизиты.НеобходимостьОтраженияВНУ Тогда
		Движения.Налоговый.Записывать = Истина;
	КонецЕсли;

КонецПроцедуры

Функция ПодготовитьТаблицуДвиженияОПВ(Реквизиты, ТаблицаПеречислениеОПВ, Отказ) 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДанныеОПВ", ТаблицаПеречислениеОПВ);
	Запрос.УстановитьПараметр("Организация", ОбщегоНазначенияБКВызовСервера.ГоловнаяОрганизацияДляУчетаЗарплаты(Реквизиты.Организация));   
	Запрос.УстановитьПараметр("ОбособленноеПодразделение", Реквизиты.Организация);
	Запрос.УстановитьПараметр("Дата", Реквизиты.Дата);
	
	// Список видов платежей, по которым формируются движения по регистру ОПВПодлежитПеречислениюВФонды
	СписокВидовПлатежей = Новый СписокЗначений;
	СписокВидовПлатежей.Добавить(Перечисления.ВидыПлатежейВБюджетИФонды.Налог);
	СписокВидовПлатежей.Добавить(Перечисления.ВидыПлатежейВБюджетИФонды.НалогАкт);
	СписокВидовПлатежей.Добавить(Перечисления.ВидыПлатежейВБюджетИФонды.НалогСам);
	Запрос.УстановитьПараметр("СписокВидовПлатежей", СписокВидовПлатежей);

	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;

	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДанныеОПВ.ФизЛицо,
		|	ДанныеОПВ.МесяцИсчисления,
		|	ДанныеОПВ.ВидПлатежа,
		|	ДанныеОПВ.СпособРасчетаСуммКПеречислению,
		|	ДанныеОПВ.Сумма
		|ПОМЕСТИТЬ ДанныеОПВ
		|ИЗ
		|	&ДанныеОПВ КАК ДанныеОПВ
		|ГДЕ
		|	ДанныеОПВ.ВидОперацииВедомости = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийОПВПеречислениеВФонды.ПеречислениеОбязательныхПенсионныхВзносов)
		|";
		
	Запрос.Выполнить();
	
	
	Если Реквизиты.ПоддержкаРаботыСоСтруктурнымиПодразделениями Или Реквизиты.РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
		
		ПериодыФизЛицаТекст = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДанныеОПВ.ФизЛицо,
		|	ДанныеОПВ.МесяцИсчисления КАК Период
		|ПОМЕСТИТЬ ВТ_ПериодыСотрудников
		|ИЗ
		|	ДанныеОПВ КАК ДанныеОПВ
		|";
		
		Запрос.Текст = ПериодыФизЛицаТекст + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета()
					 + СформироватьТекстЗапросаСтруктурныеЕдиницы("ВТ_ПериодыСотрудников", Истина);
		Запрос.Выполнить();
	КонецЕсли;

	
	Запрос.Текст =  
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОПВПеречислениеВФонды.МесяцИсчисления КАК МесяцИсчисления,
	|	ОПВПеречислениеВФонды.ВидПлатежа КАК ВидПлатежа,
	|	ВЫБОР
	|		КОГДА ОПВПеречислениеВФонды.ВидПлатежа В (&СписокВидовПлатежей)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПлатежЯвляетсяНалогом,
	|	ОПВПеречислениеВФонды.ФизЛицо КАК ФизЛицо,
	|	ОПВПеречислениеВФонды.Сумма КАК Сумма,
	|	ЕСТЬNULL(ОПВРасчетыСФондамиОстатки.ВзносОстаток, 0) КАК РасчетыСФондамиОстаток,
	|	ВЫБОР
	|		КОГДА ОПВПеречислениеВФонды.ВидПлатежа В (&СписокВидовПлатежей)
	|			ТОГДА ОПВПодлежитПеречислениюВФондыОстатки.МесяцВыплатыДоходов
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК МесяцВыплатыДоходов,
	|	ЕСТЬNULL(ОПВРасчетыСФондамиОстатки.МесяцНалоговогоПериода, ЕСТЬNULL(ОПВПодлежитПеречислениюВФондыОстатки.МесяцНалоговогоПериода, ОПВПеречислениеВФонды.МесяцИсчисления)) КАК МесяцНалоговогоПериода,
	|	ВЫБОР
	|		КОГДА ОПВПеречислениеВФонды.ВидПлатежа В (&СписокВидовПлатежей)
	|			ТОГДА ЕСТЬNULL(ОПВПодлежитПеречислениюВФондыОстатки.ВзносОстаток, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПодлежитПеречислениюОстаток";
	
	Если Реквизиты.ПоддержкаРаботыСоСтруктурнымиПодразделениями Или Реквизиты.РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
		Запрос.Текст = Запрос.Текст + ",
		|	ВЫБОР
		|		КОГДА НЕ (ОПВПодлежитПеречислениюВФондыОстатки.СтруктурнаяЕдиница ЕСТЬ NULL)
		|			ТОГДА ОПВПодлежитПеречислениюВФондыОстатки.СтруктурнаяЕдиница		
		|		КОГДА НЕ (ОПВРасчетыСФондамиОстатки.СтруктурнаяЕдиница ЕСТЬ NULL)
		|			ТОГДА ОПВРасчетыСФондамиОстатки.СтруктурнаяЕдиница                  		
		|		КОГДА НЕ (МестоРаботы.СтруктурнаяЕдиница ЕСТЬ NULL)
		|			ТОГДА МестоРаботы.СтруктурнаяЕдиница
		|		ИНАЧЕ &ОбособленноеПодразделение
		|	КОНЕЦ КАК СтруктурнаяЕдиница,
		|	ВЫБОР
		|		КОГДА НЕ (МестоРаботы.СтруктурнаяЕдиница ЕСТЬ NULL)
		|			ТОГДА МестоРаботы.СтруктурнаяЕдиница
		|		ИНАЧЕ &ОбособленноеПодразделение
		|	КОНЕЦ КАК СтруктурнаяЕдиницаПоМестуРаботы,
		|	ВЫБОР
		|		КОГДА НЕ (ОПВРасчетыСФондамиОстатки.Налогоплательщик ЕСТЬ NULL)
		|			ТОГДА ОПВРасчетыСФондамиОстатки.Налогоплательщик
		|		ИНАЧЕ ОПВПодлежитПеречислениюВФондыОстатки.Налогоплательщик
		|	КОНЕЦ КАК Налогоплательщик,
		|	ВЫБОР 
		|		КОГДА НЕ (ОПВПодлежитПеречислениюВФондыОстатки.ПодразделениеОрганизации ЕСТЬ NULL)
		|			ТОГДА ОПВПодлежитПеречислениюВФондыОстатки.ПодразделениеОрганизации
		|		КОГДА НЕ (ОПВРасчетыСФондамиОстатки.ПодразделениеОрганизации ЕСТЬ NULL)
		|			ТОГДА ОПВРасчетыСФондамиОстатки.ПодразделениеОрганизации
		|		КОГДА НЕ (МестоРаботы.ПодразделениеОрганизации ЕСТЬ NULL)
		|			ТОГДА МестоРаботы.ПодразделениеОрганизации
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
		|	КОНЕЦ КАК ПодразделениеОрганизации,
		|	ВЫБОР 
		|		КОГДА НЕ (МестоРаботы.ПодразделениеОрганизации ЕСТЬ NULL)
		|			ТОГДА МестоРаботы.ПодразделениеОрганизации
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
		|	КОНЕЦ КАК ПодразделениеОрганизацииПоМестуРаботы
		|";
	Иначе
		Запрос.Текст = Запрос.Текст + ",
		|	&ОбособленноеПодразделение КАК СтруктурнаяЕдиница,
		|	&ОбособленноеПодразделение КАК СтруктурнаяЕдиницаПоМестуРаботы,
		|	&ОбособленноеПодразделение КАК Налогоплательщик,
		|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) КАК ПодразделениеОрганизации,
		|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) КАК ПодразделениеОрганизацииПоМестуРаботы
		|";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|ИЗ
	|	ДанныеОПВ КАК ОПВПеречислениеВФонды
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОПВРасчетыСФондами.Остатки(
	|			&Дата,
	|			Организация = &ОбособленноеПодразделение
	|			И ФизЛицо В
	|		        (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					ВЫРАЗИТЬ(ФизЛицо КАК Справочник.ФизическиеЛица)
	|				ИЗ
	|					ДанныеОПВ КАК Док)) КАК ОПВРасчетыСФондамиОстатки
	|		ПО ОПВПеречислениеВФонды.ФизЛицо = ОПВРасчетыСФондамиОстатки.ФизЛицо
	|			И (ВЫБОР 
	|					КОГДА ОПВПеречислениеВФонды.СпособРасчетаСуммКПеречислению = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаСуммКПеречислениюОПВ.ПоЗадолженностиЗаМесяц) 
	|							ИЛИ ОПВПеречислениеВФонды.СпособРасчетаСуммКПеречислению = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаСуммКПеречислениюОПВ.ПоЗадолженностиЗаМесяцПоНУ)
	|						ТОГДА ОПВПеречислениеВФонды.МесяцИсчисления = НАЧАЛОПЕРИОДА(ОПВРасчетыСФондамиОстатки.МесяцНалоговогоПериода, МЕСЯЦ)
	|					ИНАЧЕ ОПВПеречислениеВФонды.МесяцИсчисления >= НАЧАЛОПЕРИОДА(ОПВРасчетыСФондамиОстатки.МесяцНалоговогоПериода, МЕСЯЦ)
	|				КОНЕЦ)
	|			И ОПВПеречислениеВФонды.ВидПлатежа = ОПВРасчетыСФондамиОстатки.ВидПлатежа
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОПВПодлежитПеречислениюВФонды.Остатки(
	|			&Дата,
	|			Организация = &ОбособленноеПодразделение
	|		    И ФизЛицо В
	|		        (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					ВЫРАЗИТЬ(ФизЛицо КАК Справочник.ФизическиеЛица)
	|				ИЗ
	|					ДанныеОПВ КАК Док)) КАК ОПВПодлежитПеречислениюВФондыОстатки
	|		ПО ОПВПеречислениеВФонды.ФизЛицо = ОПВПодлежитПеречислениюВФондыОстатки.ФизЛицо
	|			И (ВЫБОР 
	|					КОГДА ОПВПеречислениеВФонды.СпособРасчетаСуммКПеречислению = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаСуммКПеречислениюОПВ.ПоЗадолженностиЗаМесяц) 
	|							ИЛИ ОПВПеречислениеВФонды.СпособРасчетаСуммКПеречислению = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаСуммКПеречислениюОПВ.ПоЗадолженностиЗаМесяцПоНУ)
	|						ТОГДА ОПВПеречислениеВФонды.МесяцИсчисления = НАЧАЛОПЕРИОДА(ОПВПодлежитПеречислениюВФондыОстатки.МесяцНалоговогоПериода, МЕСЯЦ)
	|					ИНАЧЕ ОПВПеречислениеВФонды.МесяцИсчисления >= НАЧАЛОПЕРИОДА(ОПВПодлежитПеречислениюВФондыОстатки.МесяцНалоговогоПериода, МЕСЯЦ)
	|				КОНЕЦ)
	|			И ВЫБОР
	|				КОГДА НЕ(ОПВРасчетыСФондамиОстатки.СтруктурнаяЕдиница ЕСТЬ NULL)
	|					ТОГДА ОПВРасчетыСФондамиОстатки.СтруктурнаяЕдиница = ОПВПодлежитПеречислениюВФондыОстатки.СтруктурнаяЕдиница
	|							И ОПВРасчетыСФондамиОстатки.Налогоплательщик = ОПВПодлежитПеречислениюВФондыОстатки.Налогоплательщик
	|							И ОПВРасчетыСФондамиОстатки.МесяцНалоговогоПериода = ОПВПодлежитПеречислениюВФондыОстатки.МесяцНалоговогоПериода
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ
	|";
	
	Если Реквизиты.ПоддержкаРаботыСоСтруктурнымиПодразделениями Или Реквизиты.РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
		Запрос.Текст = Запрос.Текст + "
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_МестоРаботы КАК МестоРаботы
		|		ПО ОПВПеречислениеВФонды.ФизЛицо = МестоРаботы.ФизЛицо
		|			И ОПВПеречислениеВФонды.МесяцИсчисления = МестоРаботы.Период";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|ОБЪЕДИНИТЬ // Выводим только те строки, по которым нет остатков в РН ""ОПВ расчеты с фондами"", но есть остатки в РН ""ОПВ подлежит перечислению в фонды""
	|
	|ВЫБРАТЬ 
	|	ОПВПеречислениеВФонды.МесяцИсчисления КАК МесяцИсчисления,
	|	ОПВПеречислениеВФонды.ВидПлатежа КАК ВидПлатежа,
	|	ВЫБОР
	|		КОГДА ОПВПеречислениеВФонды.ВидПлатежа В (&СписокВидовПлатежей)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПлатежЯвляетсяНалогом,
	|	ОПВПеречислениеВФонды.ФизЛицо КАК ФизЛицо,
	|	ОПВПеречислениеВФонды.Сумма КАК Сумма,
	|	ЕСТЬNULL(ОПВРасчетыСФондамиОстатки.ВзносОстаток, 0) КАК РасчетыСФондамиОстаток,
	|	ВЫБОР
	|		КОГДА ОПВПеречислениеВФонды.ВидПлатежа В (&СписокВидовПлатежей)
	|			ТОГДА ОПВПодлежитПеречислениюВФондыОстатки.МесяцВыплатыДоходов
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК МесяцВыплатыДоходов,
	|	ЕСТЬNULL(ОПВПодлежитПеречислениюВФондыОстатки.МесяцНалоговогоПериода, ЕСТЬNULL(ОПВРасчетыСФондамиОстатки.МесяцНалоговогоПериода, ОПВПеречислениеВФонды.МесяцИсчисления)) КАК МесяцНалоговогоПериода,
	|	ВЫБОР
	|		КОГДА ОПВПеречислениеВФонды.ВидПлатежа В (&СписокВидовПлатежей)
	|			ТОГДА ЕСТЬNULL(ОПВПодлежитПеречислениюВФондыОстатки.ВзносОстаток, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПодлежитПеречислениюОстаток";
	
	Если Реквизиты.ПоддержкаРаботыСоСтруктурнымиПодразделениями Или Реквизиты.РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
		Запрос.Текст = Запрос.Текст + ",
		|	ВЫБОР
		|		КОГДА НЕ (ОПВПодлежитПеречислениюВФондыОстатки.СтруктурнаяЕдиница ЕСТЬ NULL)
		|			ТОГДА ОПВПодлежитПеречислениюВФондыОстатки.СтруктурнаяЕдиница		
		|		КОГДА НЕ (ОПВРасчетыСФондамиОстатки.СтруктурнаяЕдиница ЕСТЬ NULL)
		|			ТОГДА ОПВРасчетыСФондамиОстатки.СтруктурнаяЕдиница                  		
		|		КОГДА НЕ (МестоРаботы.СтруктурнаяЕдиница ЕСТЬ NULL)
		|			ТОГДА МестоРаботы.СтруктурнаяЕдиница
		|		ИНАЧЕ &ОбособленноеПодразделение
		|	КОНЕЦ КАК СтруктурнаяЕдиница,
		|	ВЫБОР
		|		КОГДА НЕ (МестоРаботы.СтруктурнаяЕдиница ЕСТЬ NULL)
		|			ТОГДА МестоРаботы.СтруктурнаяЕдиница
		|		ИНАЧЕ &ОбособленноеПодразделение
		|	КОНЕЦ КАК СтруктурнаяЕдиницаПоМестуРаботы,
		|	ВЫБОР
		|		КОГДА НЕ (ОПВРасчетыСФондамиОстатки.Налогоплательщик ЕСТЬ NULL)
		|			ТОГДА ОПВРасчетыСФондамиОстатки.Налогоплательщик
		|		ИНАЧЕ ОПВПодлежитПеречислениюВФондыОстатки.Налогоплательщик
		|	КОНЕЦ КАК Налогоплательщик,
		|	ВЫБОР 
		|		КОГДА НЕ (ОПВПодлежитПеречислениюВФондыОстатки.ПодразделениеОрганизации ЕСТЬ NULL)
		|			ТОГДА ОПВПодлежитПеречислениюВФондыОстатки.ПодразделениеОрганизации
		|		КОГДА НЕ (ОПВРасчетыСФондамиОстатки.ПодразделениеОрганизации ЕСТЬ NULL)
		|			ТОГДА ОПВРасчетыСФондамиОстатки.ПодразделениеОрганизации           		
		|		КОГДА НЕ (МестоРаботы.ПодразделениеОрганизации ЕСТЬ NULL)
		|			ТОГДА МестоРаботы.ПодразделениеОрганизации
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
		|	КОНЕЦ КАК ПодразделениеОрганизации,
		|	ВЫБОР 
		|		КОГДА НЕ (МестоРаботы.ПодразделениеОрганизации ЕСТЬ NULL)
		|			ТОГДА МестоРаботы.ПодразделениеОрганизации
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
		|	КОНЕЦ КАК ПодразделениеОрганизацииПоМестуРаботы
		|";
	Иначе
		Запрос.Текст = Запрос.Текст + ",
		|	&ОбособленноеПодразделение КАК СтруктурнаяЕдиница,
		|	&ОбособленноеПодразделение КАК СтруктурнаяЕдиницаПоМестуРаботы,
		|	&ОбособленноеПодразделение КАК Налогоплательщик,
		|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) КАК ПодразделениеОрганизации,
		|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) КАК ПодразделениеОрганизацииПоМестуРаботы 
		|";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|ИЗ
	|	ДанныеОПВ КАК ОПВПеречислениеВФонды
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОПВПодлежитПеречислениюВФонды.Остатки(
	|			&Дата,
	|			Организация = &ОбособленноеПодразделение
	|		    И ФизЛицо В
	|		        (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					ВЫРАЗИТЬ(ФизЛицо КАК Справочник.ФизическиеЛица)
	|				ИЗ
	|					ДанныеОПВ КАК Док)) КАК ОПВПодлежитПеречислениюВФондыОстатки
	|		ПО ОПВПеречислениеВФонды.ФизЛицо = ОПВПодлежитПеречислениюВФондыОстатки.ФизЛицо
	|			И (ВЫБОР 
	|					КОГДА ОПВПеречислениеВФонды.СпособРасчетаСуммКПеречислению = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаСуммКПеречислениюОПВ.ПоЗадолженностиЗаМесяц) 
	|							ИЛИ ОПВПеречислениеВФонды.СпособРасчетаСуммКПеречислению = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаСуммКПеречислениюОПВ.ПоЗадолженностиЗаМесяцПоНУ)
	|						ТОГДА ОПВПеречислениеВФонды.МесяцИсчисления = НАЧАЛОПЕРИОДА(ОПВПодлежитПеречислениюВФондыОстатки.МесяцНалоговогоПериода, МЕСЯЦ)
	|					ИНАЧЕ ОПВПеречислениеВФонды.МесяцИсчисления >= НАЧАЛОПЕРИОДА(ОПВПодлежитПеречислениюВФондыОстатки.МесяцНалоговогоПериода, МЕСЯЦ)
	|				КОНЕЦ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОПВРасчетыСФондами.Остатки(
	|			&Дата,
	|			Организация = &ОбособленноеПодразделение
	|			И ФизЛицо В
	|		        (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					ВЫРАЗИТЬ(ФизЛицо КАК Справочник.ФизическиеЛица)
	|				ИЗ
	|					ДанныеОПВ КАК Док)) КАК ОПВРасчетыСФондамиОстатки
	|		ПО ОПВПеречислениеВФонды.ФизЛицо = ОПВРасчетыСФондамиОстатки.ФизЛицо
	|			И (ВЫБОР 
	|					КОГДА ОПВПеречислениеВФонды.СпособРасчетаСуммКПеречислению = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаСуммКПеречислениюОПВ.ПоЗадолженностиЗаМесяц) 
	|							ИЛИ ОПВПеречислениеВФонды.СпособРасчетаСуммКПеречислению = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаСуммКПеречислениюОПВ.ПоЗадолженностиЗаМесяцПоНУ)
	|						ТОГДА ОПВПеречислениеВФонды.МесяцИсчисления = НАЧАЛОПЕРИОДА(ОПВРасчетыСФондамиОстатки.МесяцНалоговогоПериода, МЕСЯЦ)
	|					ИНАЧЕ ОПВПеречислениеВФонды.МесяцИсчисления >= НАЧАЛОПЕРИОДА(ОПВРасчетыСФондамиОстатки.МесяцНалоговогоПериода, МЕСЯЦ)
	|				КОНЕЦ)
	|			И ВЫБОР
	|				КОГДА НЕ(ОПВПодлежитПеречислениюВФондыОстатки.СтруктурнаяЕдиница ЕСТЬ NULL)
	|					ТОГДА ОПВРасчетыСФондамиОстатки.СтруктурнаяЕдиница = ОПВПодлежитПеречислениюВФондыОстатки.СтруктурнаяЕдиница
	|							И ОПВРасчетыСФондамиОстатки.Налогоплательщик = ОПВПодлежитПеречислениюВФондыОстатки.Налогоплательщик
	|							И ОПВРасчетыСФондамиОстатки.МесяцНалоговогоПериода = ОПВПодлежитПеречислениюВФондыОстатки.МесяцНалоговогоПериода
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ
	|			И ОПВПеречислениеВФонды.ВидПлатежа = ОПВРасчетыСФондамиОстатки.ВидПлатежа
	|
	|";
	
	Если Реквизиты.ПоддержкаРаботыСоСтруктурнымиПодразделениями Или Реквизиты.РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
		Запрос.Текст = Запрос.Текст + "
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_МестоРаботы КАК МестоРаботы
		|		ПО ОПВПеречислениеВФонды.ФизЛицо = МестоРаботы.ФизЛицо
		|			И ОПВПеречислениеВФонды.МесяцИсчисления = МестоРаботы.Период";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	ФизЛицо,	
	|	ВидПлатежа,	
	|	МесяцИсчисления,
	|	МесяцНалоговогоПериода,
	|	МесяцВыплатыДоходов
	|";
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

Процедура ЗарегистрироватьДвиженияПеречислениеОПВ(Реквизиты, Выборка, Движения, Отказ)
	
	ТаблицаСписанныхОстатков = Новый ТаблицаЗначений;
	ТаблицаСписанныхОстатков.Колонки.Добавить("СтруктурнаяЕдиница");
	ТаблицаСписанныхОстатков.Колонки.Добавить("Налогоплательщик");
	ТаблицаСписанныхОстатков.Колонки.Добавить("УжеСписано");
	
	ТаблицаСписанныхОстатков.Индексы.Добавить("СтруктурнаяЕдиница, Налогоплательщик");
	
	СтруктураПоиска = Новый Структура();
	СтруктураПоиска.Вставить("СтруктурнаяЕдиница");
	СтруктураПоиска.Вставить("Налогоплательщик");
	
	Пока Выборка.СледующийПоЗначениюПоля("ФизЛицо") Цикл
	
		Пока Выборка.СледующийПоЗначениюПоля("ВидПлатежа") Цикл
		
			Пока Выборка.СледующийПоЗначениюПоля("МесяцИсчисления") Цикл
				
				ОстатокКСписанию 	= Выборка.Сумма;
				ТаблицаСписанныхОстатков.Очистить();
				
				Пока Выборка.СледующийПоЗначениюПоля("МесяцНалоговогоПериода") Цикл
		
					// по регистрам накопления
					Пока Выборка.СледующийПоЗначениюПоля("МесяцВыплатыДоходов") Цикл
						
						ПодлежитПеречислениюОстаток = Выборка.ПодлежитПеречислениюОстаток;				
						
						ТекущееФизЛицо 					= Выборка.ФизЛицо;
						ТекущийВидПлатежа				= Выборка.ВидПлатежа;
						ТекущийПлатежЯвляетсяНалогом 	= Выборка.ПлатежЯвляетсяНалогом;
						ТекущийМесяцИсчисления			= Выборка.МесяцИсчисления;
						ТекущийМесяцНалоговогоПериода	= Выборка.МесяцНалоговогоПериода;
						ТекущийМесяцВыплатыДоходов 		= Выборка.МесяцВыплатыДоходов;
						
						СтруктурнаяЕдиницаПоМестуРаботы = Выборка.СтруктурнаяЕдиницаПоМестуРаботы;
						ПодразделениеОрганизацииПоМестуРаботы = Выборка.ПодразделениеОрганизацииПоМестуРаботы;
						
						Пока Выборка.Следующий()
						   И Выборка.ФизЛицо = ТекущееФизЛицо
						   И Выборка.ВидПлатежа = ТекущийВидПлатежа
						   И Выборка.МесяцИсчисления = ТекущийМесяцИсчисления
						   И Выборка.МесяцНалоговогоПериода = ТекущийМесяцНалоговогоПериода
						   И Выборка.МесяцВыплатыДоходов = ТекущийМесяцВыплатыДоходов
						   И Выборка.Налогоплательщик <> NULL Цикл
								
							// найдем уже учтенные на предыдущих шагах цикла суммы по комбинации СтруктурнаяЕдиница+Налогоплательщик
							СтруктураПоиска.СтруктурнаяЕдиница 	= Выборка.СтруктурнаяЕдиница;
							СтруктураПоиска.Налогоплательщик	= Выборка.Налогоплательщик;
							НайденныеСтроки = ТаблицаСписанныхОстатков.НайтиСтроки(СтруктураПоиска);
							
							СуммаКСписанию = Выборка.ПодлежитПеречислениюОстаток;
							
							Если НайденныеСтроки.Количество() > 0 Тогда
								СуммаКСписанию = СуммаКСписанию - НайденныеСтроки[0].УжеСписано;
							КонецЕсли;
							
							Если Выборка.ПлатежЯвляетсяНалогом И ПодлежитПеречислениюОстаток <> 0 Тогда // берем с учетом сумм, подлежащих перечислению
								СуммаКСписанию = Мин(ОстатокКСписанию, ПодлежитПеречислениюОстаток, СуммаКСписанию);
								ПодлежитПеречислениюОстаток = ПодлежитПеречислениюОстаток - СуммаКСписанию;
							Иначе
								СуммаКСписанию = Мин(ОстатокКСписанию, СуммаКСписанию);
							КонецЕсли;
							ОстатокКСписанию = ОстатокКСписанию - СуммаКСписанию;
							
							// запомним сколько уже списали
							Если НайденныеСтроки.Количество() = 0 Тогда
								СтрокаТЗ = ТаблицаСписанныхОстатков.Добавить();
								ЗаполнитьЗначенияСвойств(СтрокаТЗ, Выборка);
								СтрокаТЗ.УжеСписано = СуммаКСписанию;
							Иначе
								НайденныеСтроки[0].УжеСписано = НайденныеСтроки[0].УжеСписано + СуммаКСписанию;
							КонецЕсли;
							
							Если СуммаКСписанию = 0 Тогда
								Продолжить;
							КонецЕсли;
							
							/////////////////////////////////////////////////
							// ОПВРасчетыСФондами
							Движение = Движения.ОПВРасчетыСФондами.Добавить();
							
							// Свойства
							Движение.Период			= Реквизиты.Дата;
							Движение.ВидДвижения	= ВидДвиженияНакопления.Расход;
							
							Движение.ФизЛицо		= Выборка.ФизЛицо;
							Если Реквизиты.ПоддержкаРаботыСоСтруктурнымиПодразделениями Или Реквизиты.РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
								Движение.СтруктурнаяЕдиница	= Выборка.СтруктурнаяЕдиница;
								Движение.Налогоплательщик	= Выборка.Налогоплательщик;
							Иначе
								Движение.СтруктурнаяЕдиница	= Реквизиты.Организация;
								Движение.Налогоплательщик	= Реквизиты.Организация;
							КонецЕсли;
							Движение.МесяцНалоговогоПериода	= Выборка.МесяцНалоговогоПериода;
							Движение.ВидПлатежа				= Выборка.ВидПлатежа;
							Движение.Организация			= Реквизиты.Организация;
							// Остатки по подразделению закрываем всегда чтобы не было зависания остатков
							Движение.ПодразделениеОрганизации = Выборка.ПодразделениеОрганизации;

							// Ресурсы
							Движение.Взнос					= СуммаКСписанию;
							
							// Реквизиты
							Движение.ВидСтроки				= Перечисления.РасчетыСБюджетомФондамиВидСтроки.Перечисление;
							
							
							/////////////////////////////////////////////////
							// ОПВПодлежитПеречислениюВФонды
							Если Выборка.ПлатежЯвляетсяНалогом Тогда
							
								Движение = Движения.ОПВПодлежитПеречислениюВФонды.Добавить();
								
								// Свойства
								Движение.Период			= Реквизиты.Дата;
								Движение.ВидДвижения 	= ВидДвиженияНакопления.Расход;
								
								// Измерения
								Движение.ФизЛицо		= Выборка.ФизЛицо;
								Если Реквизиты.ПоддержкаРаботыСоСтруктурнымиПодразделениями Или Реквизиты.РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
									Движение.СтруктурнаяЕдиница	= Выборка.СтруктурнаяЕдиница;
									Движение.Налогоплательщик	= Выборка.Налогоплательщик;
								Иначе
									Движение.СтруктурнаяЕдиница	= Реквизиты.Организация;
									Движение.Налогоплательщик	= Реквизиты.Организация;
								КонецЕсли;
								Движение.МесяцНалоговогоПериода	= Выборка.МесяцНалоговогоПериода;
								Движение.МесяцВыплатыДоходов	= ?(Выборка.МесяцВыплатыДоходов <> NULL, Выборка.МесяцВыплатыДоходов, Выборка.МесяцИсчисления);
								Движение.Организация			= Реквизиты.Организация;
								// Остатки по подразделению закрываем всегда чтобы не было зависания остатков
								Движение.ПодразделениеОрганизации = Выборка.ПодразделениеОрганизации;
								
								// Ресурсы
								Движение.Взнос					= СуммаКСписанию;
								
								// Реквизиты
								Движение.ВидСтроки				= Перечисления.РасчетыСБюджетомФондамиВидСтроки.Перечисление;
							
							КонецЕсли;
							
						КонецЦикла;
					КонецЦикла;
				КонецЦикла; // Пока Выборка.СледующийПоЗначениюПоля("МесяцВыплатыДоходов") Цикл

				Если ОстатокКСписанию <> 0 Тогда
				
					/////////////////////////////////////////////////
					// ОПВРасчетыСФондами
					
					Движение = Движения.ОПВРасчетыСФондами.Добавить();
					
					// Свойства
					Движение.Период 		= Реквизиты.Дата;
					Движение.ВидДвижения 	= ВидДвиженияНакопления.Расход;
					
					// Измерения
					Движение.ФизЛицо		= ТекущееФизЛицо;
					Если Реквизиты.ПоддержкаРаботыСоСтруктурнымиПодразделениями Или Реквизиты.РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
						Налогоплательщик 			= ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(СтруктурнаяЕдиницаПоМестуРаботы,
																						Реквизиты.Организация,
																						Перечисления.РазделыНалоговогоУчета.НалогиСЗаработнойПлаты);
						
						Движение.СтруктурнаяЕдиница	= СтруктурнаяЕдиницаПоМестуРаботы;
						Движение.Налогоплательщик	= Налогоплательщик;
					Иначе
						Движение.СтруктурнаяЕдиница	= Реквизиты.Организация;
						Движение.Налогоплательщик	= Реквизиты.Организация;
					КонецЕсли;
					Движение.МесяцНалоговогоПериода	= ТекущийМесяцИсчисления;
					Движение.ВидПлатежа				= ТекущийВидПлатежа;
					Движение.Организация			= Реквизиты.Организация;
					// Нераспределенный остаток относим на подразделение места работы только если ведется раздельный учет налогов по подразделениям организаций
					Если Реквизиты.РаспределятьНалогиПоПодразделениямОрганизаций Тогда
						Движение.ПодразделениеОрганизации = ПодразделениеОрганизацииПоМестуРаботы;
					КонецЕсли;
					
					// Ресурсы
					Движение.Взнос					= ОстатокКСписанию;
					
					// Реквизиты
					Движение.ВидСтроки				= Перечисления.РасчетыСБюджетомФондамиВидСтроки.Перечисление;

					/////////////////////////////////////////////////
					// ОПВПодлежитПеречислениюВФонды
					Если ТекущийПлатежЯвляетсяНалогом Тогда
						Движение = Движения.ОПВПодлежитПеречислениюВФонды.Добавить();
						
						// Свойства
						Движение.Период			= Реквизиты.Дата;
						Движение.ВидДвижения	= ВидДвиженияНакопления.Расход;
						
						// Измерения 
						Движение.ФизЛицо		= ТекущееФизЛицо;
						Если Реквизиты.ПоддержкаРаботыСоСтруктурнымиПодразделениями Или Реквизиты.РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
							Движение.СтруктурнаяЕдиница	= СтруктурнаяЕдиницаПоМестуРаботы;
							Движение.Налогоплательщик	= Налогоплательщик;
						Иначе
							Движение.СтруктурнаяЕдиница	= Реквизиты.Организация;
							Движение.Налогоплательщик	= Реквизиты.Организация;
						КонецЕсли;
						Движение.МесяцНалоговогоПериода	= ТекущийМесяцИсчисления;
						Движение.МесяцВыплатыДоходов	= ТекущийМесяцИсчисления;
						Движение.Организация			= Реквизиты.Организация;
						// Нераспределенный остаток относим на подразделение места работы только если ведется раздельный учет налогов по подразделениям организаций
						Если Реквизиты.РаспределятьНалогиПоПодразделениямОрганизаций Тогда
							Движение.ПодразделениеОрганизации = ПодразделениеОрганизацииПоМестуРаботы;
						КонецЕсли;
						
						// Ресурсы
						Движение.Взнос					= ОстатокКСписанию;
						
						// Реквизиты
						Движение.ВидСтроки				= Перечисления.РасчетыСБюджетомФондамиВидСтроки.Перечисление;
						
					КонецЕсли;
				
				КонецЕсли;

			КонецЦикла; // Пока Выборка.СледующийПоЗначениюПоля("МесяцНачисления") Цикл
		
		КонецЦикла; // Пока Выборка.СледующийПоЗначениюПоля("ВидПлатежа") Цикл
	
	КонецЦикла; // Пока Выборка.СледующийПоЗначениюПоля("ФизЛицо") Цикл

	Движения.ОПВРасчетыСФондами.Записывать = Истина;
	Движения.ОПВПодлежитПеречислениюВФонды.Записывать = Истина;

КонецПроцедуры

Функция ПодготовитьТаблицуДвиженияОППВ(Реквизиты, ТаблицаПеречислениеОППВ, Отказ) 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДанныеОППВ", ТаблицаПеречислениеОППВ);
	Запрос.УстановитьПараметр("Организация", ОбщегоНазначенияБКВызовСервера.ГоловнаяОрганизацияДляУчетаЗарплаты(Реквизиты.Организация));   
	Запрос.УстановитьПараметр("ОбособленноеПодразделение", Реквизиты.Организация);
	Запрос.УстановитьПараметр("Дата", Реквизиты.Дата);
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;

	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДанныеОППВ.ФизЛицо,
		|	ДанныеОППВ.МесяцИсчисления,
		|	ДанныеОППВ.ВидПлатежа,
		|	ДанныеОППВ.СпособРасчетаСуммКПеречислению,
		|	ДанныеОППВ.Сумма
		|ПОМЕСТИТЬ ДанныеОППВ
		|ИЗ
		|	&ДанныеОППВ КАК ДанныеОППВ
		|ГДЕ
		|	ДанныеОППВ.ВидОперацииВедомости = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийОПВПеречислениеВФонды.ПеречислениеОбязательныхПрофессиональныхПенсионныхВзносов)
		|";
		
	Запрос.Выполнить();
	
	Если Реквизиты.ПоддержкаРаботыСоСтруктурнымиПодразделениями Или Реквизиты.РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
		
		ПериодыФизЛицаТекст = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДанныеОППВ.ФизЛицо,
		|	ДанныеОППВ.МесяцИсчисления КАК Период
		|ПОМЕСТИТЬ ВТ_ПериодыСотрудников
		|ИЗ
		|	ДанныеОППВ КАК ДанныеОППВ
		|";
		
		Запрос.Текст = ПериодыФизЛицаТекст + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета()
					 + СформироватьТекстЗапросаСтруктурныеЕдиницы("ВТ_ПериодыСотрудников", Истина);
		Запрос.Выполнить();
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапрос.МесяцИсчисления,
	|	ВложенныйЗапрос.ВидПлатежа,
	|	ВложенныйЗапрос.ФизЛицо,
	|	ВложенныйЗапрос.Сумма,
	|	ЕСТЬNULL(ОППВРасчетыСФондамиОстатки.МесяцНалоговогоПериода, ВложенныйЗапрос.МесяцИсчисления) КАК МесяцНалоговогоПериода,
	|	ЕСТЬNULL(ОППВРасчетыСФондамиОстатки.ВзносОстаток, 0) КАК ВзносОстаток";
	
	Если Реквизиты.ПоддержкаРаботыСоСтруктурнымиПодразделениями Или Реквизиты.РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
		Запрос.Текст = Запрос.Текст + ",
		|	ВЫБОР
		|		КОГДА НЕ(ОППВРасчетыСФондамиОстатки.СтруктурнаяЕдиница ЕСТЬ NULL)
		|			ТОГДА ОППВРасчетыСФондамиОстатки.СтруктурнаяЕдиница
		|		КОГДА НЕ(МестоРаботы.СтруктурнаяЕдиница ЕСТЬ NULL)
		|			ТОГДА МестоРаботы.СтруктурнаяЕдиница
		|		ИНАЧЕ &ОбособленноеПодразделение
		|	КОНЕЦ КАК СтруктурнаяЕдиница,
		|	ВЫБОР
		|		КОГДА НЕ(МестоРаботы.СтруктурнаяЕдиница ЕСТЬ NULL)
		|			ТОГДА МестоРаботы.СтруктурнаяЕдиница
		|		ИНАЧЕ &ОбособленноеПодразделение
		|	КОНЕЦ КАК СтруктурнаяЕдиницаПоМестуРаботы,
		|	ОППВРасчетыСФондамиОстатки.Налогоплательщик,
		|	ВЫБОР 
		|		КОГДА НЕ (ОППВРасчетыСФондамиОстатки.ПодразделениеОрганизации ЕСТЬ NULL)
		|			ТОГДА ОППВРасчетыСФондамиОстатки.ПодразделениеОрганизации
		|		КОГДА НЕ (МестоРаботы.ПодразделениеОрганизации ЕСТЬ NULL)
		|			ТОГДА МестоРаботы.ПодразделениеОрганизации
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
		|	КОНЕЦ КАК ПодразделениеОрганизации,
		|	ВЫБОР 
		|		КОГДА НЕ (МестоРаботы.ПодразделениеОрганизации ЕСТЬ NULL)
		|			ТОГДА МестоРаботы.ПодразделениеОрганизации
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
		|	КОНЕЦ КАК ПодразделениеОрганизацииПоМестуРаботы";
	Иначе
		Запрос.Текст = Запрос.Текст + ",
		|	&ОбособленноеПодразделение КАК СтруктурнаяЕдиница,
		|	&ОбособленноеПодразделение КАК СтруктурнаяЕдиницаПоМестуРаботы,
		|	&ОбособленноеПодразделение КАК Налогоплательщик,
		|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) КАК ПодразделениеОрганизации,
		|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) КАК ПодразделениеОрганизацииПоМестуРаботы";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|ИЗ
	|	ДанныеОППВ КАК ВложенныйЗапрос
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОППВРасчетыСФондами.Остатки(
	|			&Дата,
	|			Организация = &ОбособленноеПодразделение
	|			И ФизЛицо В (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					ВЫРАЗИТЬ(ФизЛицо КАК Справочник.ФизическиеЛица)
	|				ИЗ
	|					ДанныеОППВ КАК Док)) КАК ОППВРасчетыСФондамиОстатки
	|		ПО ВложенныйЗапрос.ФизЛицо = ОППВРасчетыСФондамиОстатки.ФизЛицо
	|			И (ВЫБОР 
	|					КОГДА ВложенныйЗапрос.СпособРасчетаСуммКПеречислению = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаСуммКПеречислениюОПВ.ПоЗадолженностиЗаМесяц)
	|						ТОГДА ВложенныйЗапрос.МесяцИсчисления = ОППВРасчетыСФондамиОстатки.МесяцНалоговогоПериода
	|					ИНАЧЕ ВложенныйЗапрос.МесяцИсчисления >= ОППВРасчетыСФондамиОстатки.МесяцНалоговогоПериода
	|				КОНЕЦ)
	|			И ВложенныйЗапрос.ВидПлатежа = ОППВРасчетыСФондамиОстатки.ВидПлатежа";
	
	Если Реквизиты.ПоддержкаРаботыСоСтруктурнымиПодразделениями Или Реквизиты.РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
		
		Запрос.Текст = Запрос.Текст + "
		|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_МестоРаботы КАК МестоРаботы
		|		ПО ВложенныйЗапрос.ФизЛицо = МестоРаботы.ФизЛицо
		|			И ВложенныйЗапрос.МесяцИсчисления = МестоРаботы.Период";
	
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|УПОРЯДОЧИТЬ ПО
	|	ВложенныйЗапрос.ФизЛицо,
	|	ВложенныйЗапрос.ВидПлатежа,
	|	ВложенныйЗапрос.МесяцИсчисления	
	|";
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

Процедура ЗарегистрироватьДвиженияПеречислениеОППВ(Реквизиты, Выборка, Движения, Отказ)
	
	Пока Выборка.СледующийПоЗначениюПоля("ФизЛицо") Цикл
	
		Пока Выборка.СледующийПоЗначениюПоля("ВидПлатежа") Цикл
		
			Пока Выборка.СледующийПоЗначениюПоля("МесяцИсчисления") Цикл
			
				ОстатокКСписанию 		= Выборка.Сумма;
				ТекущееФизЛицо 			= Выборка.ФизЛицо;
				ТекущийВидПлатежа		= Выборка.ВидПлатежа;
				ТекущийМесяцИсчисления	= Выборка.МесяцИсчисления;
				СтруктурнаяЕдиницаПоМестуРаботы = Выборка.СтруктурнаяЕдиницаПоМестуРаботы;
				ПодразделениеОрганизацииПоМестуРаботы = Выборка.ПодразделениеОрганизацииПоМестуРаботы;
				
				Пока Выборка.Следующий()
				   И Выборка.ФизЛицо = ТекущееФизЛицо
				   И Выборка.ВидПлатежа = ТекущийВидПлатежа
				   И Выборка.МесяцИсчисления = ТекущийМесяцИсчисления
				   И Выборка.Налогоплательщик <> NULL Цикл
				
					СуммаКСписанию 		= Мин(ОстатокКСписанию, Выборка.ВзносОстаток);
					ОстатокКСписанию 	= ОстатокКСписанию - СуммаКСписанию;
					
					Если СуммаКСписанию = 0 Тогда
						Прервать;
					КонецЕсли;
					
					Движение = Движения.ОППВРасчетыСФондами.Добавить();
					
					// Свойства
					Движение.Период			= Реквизиты.Дата;
					Движение.ВидДвижения	= ВидДвиженияНакопления.Расход;					
					// Измерения
					Движение.ФизЛицо		= Выборка.ФизЛицо;
					Если Реквизиты.ПоддержкаРаботыСоСтруктурнымиПодразделениями Или Реквизиты.РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
						Движение.СтруктурнаяЕдиница	= Выборка.СтруктурнаяЕдиница;
						Движение.Налогоплательщик	= Выборка.Налогоплательщик;
					Иначе
						Движение.СтруктурнаяЕдиница	= Реквизиты.Организация;
						Движение.Налогоплательщик	= Реквизиты.Организация;
					КонецЕсли;
					Движение.МесяцНалоговогоПериода	= Выборка.МесяцНалоговогоПериода;
					Движение.ВидПлатежа				= Выборка.ВидПлатежа;
					Движение.Организация			= Реквизиты.Организация;					
					// Остатки по подразделению закрываем всегда чтобы не было зависания остатков
					Движение.ПодразделениеОрганизации = Выборка.ПодразделениеОрганизации;
					// Ресурсы
					Движение.Взнос					= СуммаКСписанию;					
					// Реквизиты
					Движение.ВидСтроки				= Перечисления.РасчетыСБюджетомФондамиВидСтроки.Перечисление;				
				КонецЦикла;
			
				Если ОстатокКСписанию <> 0 Тогда 
				    // остаток относим на структурную единицу и налогоплательщика по месту работы

					Движение = Движения.ОППВРасчетыСФондами.Добавить();					
					// Свойства
					Движение.Период			= Реквизиты.Дата;
					Движение.ВидДвижения	= ВидДвиженияНакопления.Расход;					
					// Измерения
					Движение.ФизЛицо		= ТекущееФизЛицо;
					Если Реквизиты.ПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
						Налогоплательщик = ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(СтруктурнаяЕдиницаПоМестуРаботы, 
																						Реквизиты.Организация,
																						Перечисления.РазделыНалоговогоУчета.НалогиСЗаработнойПлаты);
						Движение.СтруктурнаяЕдиница	= СтруктурнаяЕдиницаПоМестуРаботы;
						Движение.Налогоплательщик	= Налогоплательщик;
					Иначе
						Движение.СтруктурнаяЕдиница	= Реквизиты.Организация;
						Движение.Налогоплательщик	= Реквизиты.Организация;
					КонецЕсли;
					Движение.МесяцНалоговогоПериода	= ТекущийМесяцИсчисления;
					Движение.ВидПлатежа				= ТекущийВидПлатежа;
					Движение.Организация			= Реквизиты.Организация;
					
					// Нераспределенный остаток относим на подразделение места работы только если ведется раздельный учет налогов по подразделениям организаций
					Если Реквизиты.РаспределятьНалогиПоПодразделениямОрганизаций Тогда 
						Движение.ПодразделениеОрганизации = ПодразделениеОрганизацииПоМестуРаботы;
					КонецЕсли;
										
					// Ресурсы
					Движение.Взнос					= ОстатокКСписанию;
					
					// Реквизиты
					Движение.ВидСтроки				= Перечисления.РасчетыСБюджетомФондамиВидСтроки.Перечисление;
				    
				КонецЕсли;
				
			КонецЦикла; // Пока Выборка.СледующийПоЗначениюПоля("МесяцИсчисления") Цикл
		
		КонецЦикла; // Пока Выборка.СледующийПоЗначениюПоля("ВидПлатежа") Цикл
	
	КонецЦикла; // Пока Выборка.СледующийПоЗначениюПоля("ФизЛицо") Цикл
	
	Движения.ОППВРасчетыСФондами.Записывать = Истина;

КонецПроцедуры

Функция ПодготовитьТаблицуДвиженияОПВР(Реквизиты, ТаблицаПеречислениеОПВР, Отказ) 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДанныеОПВР", ТаблицаПеречислениеОПВР);
	Запрос.УстановитьПараметр("Организация", ОбщегоНазначенияБКВызовСервера.ГоловнаяОрганизацияДляУчетаЗарплаты(Реквизиты.Организация));   
	Запрос.УстановитьПараметр("ОбособленноеПодразделение", Реквизиты.Организация);
	Запрос.УстановитьПараметр("Дата", Реквизиты.Дата);
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;

	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДанныеОПВР.ФизЛицо,
		|	ДанныеОПВР.МесяцИсчисления,
		|	ДанныеОПВР.ВидПлатежа,
		|	ДанныеОПВР.СпособРасчетаСуммКПеречислению,
		|	ДанныеОПВР.Сумма
		|ПОМЕСТИТЬ ДанныеОПВР
		|ИЗ
		|	&ДанныеОПВР КАК ДанныеОПВР
		|ГДЕ
		|	ДанныеОПВР.ВидОперацииВедомости = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийОПВПеречислениеВФонды.ПеречислениеОбязательныхПенсионныхВзносовРаботодателя)
		|";
		
	Запрос.Выполнить();
	
	Если Реквизиты.ПоддержкаРаботыСоСтруктурнымиПодразделениями Или Реквизиты.РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
		
		ПериодыФизЛицаТекст = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДанныеОПВР.ФизЛицо,
		|	ДанныеОПВР.МесяцИсчисления КАК Период
		|ПОМЕСТИТЬ ВТ_ПериодыСотрудников
		|ИЗ
		|	ДанныеОПВР КАК ДанныеОПВР
		|";
		
		Запрос.Текст = ПериодыФизЛицаТекст + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета()
					 + СформироватьТекстЗапросаСтруктурныеЕдиницы("ВТ_ПериодыСотрудников", Истина);
		Запрос.Выполнить();
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапрос.МесяцИсчисления,
	|	ВложенныйЗапрос.ВидПлатежа,
	|	ВложенныйЗапрос.ФизЛицо,
	|	ВложенныйЗапрос.Сумма,
	|	ЕСТЬNULL(ОПВРРасчетыСФондамиОстатки.МесяцНалоговогоПериода, ВложенныйЗапрос.МесяцИсчисления) КАК МесяцНалоговогоПериода,
	|	ЕСТЬNULL(ОПВРРасчетыСФондамиОстатки.ВзносОстаток, 0) КАК ВзносОстаток";
	
	Если Реквизиты.ПоддержкаРаботыСоСтруктурнымиПодразделениями Или Реквизиты.РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
		Запрос.Текст = Запрос.Текст + ",
		|	ВЫБОР
		|		КОГДА НЕ(ОПВРРасчетыСФондамиОстатки.СтруктурнаяЕдиница ЕСТЬ NULL)
		|			ТОГДА ОПВРРасчетыСФондамиОстатки.СтруктурнаяЕдиница
		|		КОГДА НЕ(МестоРаботы.СтруктурнаяЕдиница ЕСТЬ NULL)
		|			ТОГДА МестоРаботы.СтруктурнаяЕдиница
		|		ИНАЧЕ &ОбособленноеПодразделение
		|	КОНЕЦ КАК СтруктурнаяЕдиница,
		|	ВЫБОР
		|		КОГДА НЕ(МестоРаботы.СтруктурнаяЕдиница ЕСТЬ NULL)
		|			ТОГДА МестоРаботы.СтруктурнаяЕдиница
		|		ИНАЧЕ &ОбособленноеПодразделение
		|	КОНЕЦ КАК СтруктурнаяЕдиницаПоМестуРаботы,
		|	ОПВРРасчетыСФондамиОстатки.Налогоплательщик,
		|	ВЫБОР 
		|		КОГДА НЕ (ОПВРРасчетыСФондамиОстатки.ПодразделениеОрганизации ЕСТЬ NULL)
		|			ТОГДА ОПВРРасчетыСФондамиОстатки.ПодразделениеОрганизации
		|		КОГДА НЕ (МестоРаботы.ПодразделениеОрганизации ЕСТЬ NULL)
		|			ТОГДА МестоРаботы.ПодразделениеОрганизации
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
		|	КОНЕЦ КАК ПодразделениеОрганизации,
		|	ВЫБОР 
		|		КОГДА НЕ (МестоРаботы.ПодразделениеОрганизации ЕСТЬ NULL)
		|			ТОГДА МестоРаботы.ПодразделениеОрганизации
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
		|	КОНЕЦ КАК ПодразделениеОрганизацииПоМестуРаботы";
	Иначе
		Запрос.Текст = Запрос.Текст + ",
		|	&ОбособленноеПодразделение КАК СтруктурнаяЕдиница,
		|	&ОбособленноеПодразделение КАК СтруктурнаяЕдиницаПоМестуРаботы,
		|	&ОбособленноеПодразделение КАК Налогоплательщик,
		|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) КАК ПодразделениеОрганизации,
		|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) КАК ПодразделениеОрганизацииПоМестуРаботы";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|ИЗ
	|	ДанныеОПВР КАК ВложенныйЗапрос
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОПВРРасчетыСФондами.Остатки(
	|			&Дата,
	|			Организация = &ОбособленноеПодразделение
	|			И ФизЛицо В (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					ВЫРАЗИТЬ(ФизЛицо КАК Справочник.ФизическиеЛица)
	|				ИЗ
	|					ДанныеОПВР КАК Док)) КАК ОПВРРасчетыСФондамиОстатки
	|		ПО ВложенныйЗапрос.ФизЛицо = ОПВРРасчетыСФондамиОстатки.ФизЛицо
	|			И (ВЫБОР 
	|					КОГДА ВложенныйЗапрос.СпособРасчетаСуммКПеречислению = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаСуммКПеречислениюОПВ.ПоЗадолженностиЗаМесяц)
	|						ТОГДА ВложенныйЗапрос.МесяцИсчисления = ОПВРРасчетыСФондамиОстатки.МесяцНалоговогоПериода
	|					ИНАЧЕ ВложенныйЗапрос.МесяцИсчисления >= ОПВРРасчетыСФондамиОстатки.МесяцНалоговогоПериода
	|				КОНЕЦ)
	|			И ВложенныйЗапрос.ВидПлатежа = ОПВРРасчетыСФондамиОстатки.ВидПлатежа";
	
	Если Реквизиты.ПоддержкаРаботыСоСтруктурнымиПодразделениями Или Реквизиты.РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
		
		Запрос.Текст = Запрос.Текст + "
		|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_МестоРаботы КАК МестоРаботы
		|		ПО ВложенныйЗапрос.ФизЛицо = МестоРаботы.ФизЛицо
		|			И ВложенныйЗапрос.МесяцИсчисления = МестоРаботы.Период";
	
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|УПОРЯДОЧИТЬ ПО
	|	ВложенныйЗапрос.ФизЛицо,
	|	ВложенныйЗапрос.ВидПлатежа,
	|	ВложенныйЗапрос.МесяцИсчисления	
	|";
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

Процедура ЗарегистрироватьДвиженияПеречислениеОПВР(Реквизиты, Выборка, Движения, Отказ)
	
	Пока Выборка.СледующийПоЗначениюПоля("ФизЛицо") Цикл
	
		Пока Выборка.СледующийПоЗначениюПоля("ВидПлатежа") Цикл
		
			Пока Выборка.СледующийПоЗначениюПоля("МесяцИсчисления") Цикл
			
				ОстатокКСписанию 		= Выборка.Сумма;
				ТекущееФизЛицо 			= Выборка.ФизЛицо;
				ТекущийВидПлатежа		= Выборка.ВидПлатежа;
				ТекущийМесяцИсчисления	= Выборка.МесяцИсчисления;
				СтруктурнаяЕдиницаПоМестуРаботы = Выборка.СтруктурнаяЕдиницаПоМестуРаботы;
				ПодразделениеОрганизацииПоМестуРаботы = Выборка.ПодразделениеОрганизацииПоМестуРаботы;
				
				Пока Выборка.Следующий()
				   И Выборка.ФизЛицо = ТекущееФизЛицо
				   И Выборка.ВидПлатежа = ТекущийВидПлатежа
				   И Выборка.МесяцИсчисления = ТекущийМесяцИсчисления
				   И Выборка.Налогоплательщик <> NULL Цикл
				
					СуммаКСписанию 		= Мин(ОстатокКСписанию, Выборка.ВзносОстаток);
					ОстатокКСписанию 	= ОстатокКСписанию - СуммаКСписанию;
					
					Если СуммаКСписанию = 0 Тогда
						Прервать;
					КонецЕсли;
					
					Движение = Движения.ОПВРРасчетыСФондами.Добавить();
					
					// Свойства
					Движение.Период			= Реквизиты.Дата;
					Движение.ВидДвижения	= ВидДвиженияНакопления.Расход;					
					// Измерения
					Движение.ФизЛицо		= Выборка.ФизЛицо;
					Если Реквизиты.ПоддержкаРаботыСоСтруктурнымиПодразделениями Или Реквизиты.РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
						Движение.СтруктурнаяЕдиница	= Выборка.СтруктурнаяЕдиница;
						Движение.Налогоплательщик	= Выборка.Налогоплательщик;
					Иначе
						Движение.СтруктурнаяЕдиница	= Реквизиты.Организация;
						Движение.Налогоплательщик	= Реквизиты.Организация;
					КонецЕсли;
					Движение.МесяцНалоговогоПериода	= Выборка.МесяцНалоговогоПериода;
					Движение.ВидПлатежа				= Выборка.ВидПлатежа;
					Движение.Организация			= Реквизиты.Организация;					
					// Остатки по подразделению закрываем всегда чтобы не было зависания остатков
					Движение.ПодразделениеОрганизации = Выборка.ПодразделениеОрганизации;
					// Ресурсы
					Движение.Взнос					= СуммаКСписанию;					
					// Реквизиты
					Движение.ВидСтроки				= Перечисления.РасчетыСБюджетомФондамиВидСтроки.Перечисление;				
				КонецЦикла;
			
				Если ОстатокКСписанию <> 0 Тогда 
				    // остаток относим на структурную единицу и налогоплательщика по месту работы

					Движение = Движения.ОПВРРасчетыСФондами.Добавить();					
					// Свойства
					Движение.Период			= Реквизиты.Дата;
					Движение.ВидДвижения	= ВидДвиженияНакопления.Расход;					
					// Измерения
					Движение.ФизЛицо		= ТекущееФизЛицо;
					Если Реквизиты.ПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
						Налогоплательщик = ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(СтруктурнаяЕдиницаПоМестуРаботы, 
																						Реквизиты.Организация,
																						Перечисления.РазделыНалоговогоУчета.НалогиСЗаработнойПлаты);
						Движение.СтруктурнаяЕдиница	= СтруктурнаяЕдиницаПоМестуРаботы;
						Движение.Налогоплательщик	= Налогоплательщик;
					Иначе
						Движение.СтруктурнаяЕдиница	= Реквизиты.Организация;
						Движение.Налогоплательщик	= Реквизиты.Организация;
					КонецЕсли;
					Движение.МесяцНалоговогоПериода	= ТекущийМесяцИсчисления;
					Движение.ВидПлатежа				= ТекущийВидПлатежа;
					Движение.Организация			= Реквизиты.Организация;
					
					// Нераспределенный остаток относим на подразделение места работы только если ведется раздельный учет налогов по подразделениям организаций
					Если Реквизиты.РаспределятьНалогиПоПодразделениямОрганизаций Тогда 
						Движение.ПодразделениеОрганизации = ПодразделениеОрганизацииПоМестуРаботы;
					КонецЕсли;
										
					// Ресурсы
					Движение.Взнос					= ОстатокКСписанию;
					
					// Реквизиты
					Движение.ВидСтроки				= Перечисления.РасчетыСБюджетомФондамиВидСтроки.Перечисление;
				    
				КонецЕсли;
				
			КонецЦикла; // Пока Выборка.СледующийПоЗначениюПоля("МесяцИсчисления") Цикл
		
		КонецЦикла; // Пока Выборка.СледующийПоЗначениюПоля("ВидПлатежа") Цикл
	
	КонецЦикла; // Пока Выборка.СледующийПоЗначениюПоля("ФизЛицо") Цикл
	
	Движения.ОПВРРасчетыСФондами.Записывать = Истина;

КонецПроцедуры

// Возврат ОПВ и ОППВ
Процедура СформироватьДвиженияВозвратОПВ(ТаблицаРеквизиты, ТаблицаВозвратОПВ, Движения, Отказ) Экспорт
	
	Если ТаблицаВозвратОПВ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизиты[0];
	СформироватьПроводкиВозвратОПВ(Реквизиты, ТаблицаВозвратОПВ.Скопировать(), Движения, Отказ);
	
	Если Реквизиты.ЕстьВозвратПенсионныхВзносов Тогда
		ТаблицаВозвратОПВ = ПодготовитьТаблицуВозвратОПВ(Реквизиты, ТаблицаВозвратОПВ, Отказ); 
		ЗарегистрироватьДвиженияВозвратОПВ(Реквизиты, ТаблицаВозвратОПВ, Движения, Отказ);
	КонецЕсли;
	
	Если Реквизиты.ЕстьВозвратПрофессиональныхПенсионныхВзносов Тогда 
		ТаблицаВозвратОППВ = ПодготовитьТаблицуВозвратОППВ(Реквизиты, ТаблицаВозвратОПВ, Отказ);
		ЗарегистрироватьДвиженияВозвратОППВ(Реквизиты, ТаблицаВозвратОППВ, Движения, Отказ);
	КонецЕсли;
	
	Если Реквизиты.ЕстьВозвратПенсионныхВзносовРаботодателя Тогда 
		ТаблицаВозвратОПВР = ПодготовитьТаблицуВозвратОПВР(Реквизиты, ТаблицаВозвратОПВ, Отказ);
		ЗарегистрироватьДвиженияВозвратОПВР(Реквизиты, ТаблицаВозвратОПВР, Движения, Отказ);
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьПроводкиВозвратОПВ(Реквизиты, ТаблицаВозвратОПВ, Движения, Отказ) 
	
	ВедениеУчетаПоСотрудникам = Реквизиты.ВедениеУчетаПоСотрудникам;
	
	ТаблицаФормированияПроводок = ТаблицаВозвратОПВ;
		
	// если учет по сотрудникам не ведется, необходимо сгруппировать данные для отображения в БУ по виду платежа и месяцу исчисления
	Если НЕ ВедениеУчетаПоСотрудникам Тогда
		ТаблицаФормированияПроводок.Свернуть("ВидПлатежа, МесяцИсчисления, СтатьяДвиженияДенежныхСредств", "Сумма");
	КонецЕсли;
	
	Если Реквизиты.ЕстьВозвратПенсионныхВзносов Тогда
		СчетКт = Справочники.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносы.СчетУчетаРасчетовСКонтрагентомБУ;
		СубконтоНалогиСборыОтчисления = Справочники.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносы;
		ШаблонТекстаПроводки = НСтр("ru = 'Возврат ОПВ за %1'", ОбщегоНазначения.КодОсновногоЯзыка());
	ИначеЕсли Реквизиты.ЕстьВозвратПенсионныхВзносовРаботодателя Тогда
		СчетКт = Справочники.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносыРаботодателя.СчетУчетаРасчетовСКонтрагентомБУ;
		СубконтоНалогиСборыОтчисления = Справочники.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносыРаботодателя;
		ШаблонТекстаПроводки = НСтр("ru = 'Возврат ОПВР за %1'", ОбщегоНазначения.КодОсновногоЯзыка());
	Иначе
		СчетКт = Справочники.НалогиСборыОтчисления.ОбязательныеПрофессиональныеПенсионныеВзносы.СчетУчетаРасчетовСКонтрагентомБУ;
		СубконтоНалогиСборыОтчисления = Справочники.НалогиСборыОтчисления.ОбязательныеПрофессиональныеПенсионныеВзносы;
		ШаблонТекстаПроводки = НСтр("ru = 'Возврат ОППВ за %1'", ОбщегоНазначения.КодОсновногоЯзыка());
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СчетКт) Тогда
		Если Реквизиты.ЕстьВозвратПенсионныхВзносовРаботодателя Тогда
			СчетКт = ПланыСчетов.Типовой.ОбязательстваПоОбязательнымПенсионнымВзносамРаботодателя;
		Иначе
			СчетКт = ПланыСчетов.Типовой.ОбязательстваПоПенсионнымОтчислениям;
		КонецЕсли;
	КонецЕсли;
	
	СчетКтНУ = ПроцедурыБухгалтерскогоУчета.ЗаполнитьСчетНалоговогоУчетаПоУмолчанию(СчетКт, Реквизиты.Дата, ?(Реквизиты.ЕстьВозвратПенсионныхВзносовРаботодателя,
		ПланыСчетов.Налоговый.ОбязательстваПоОбязательнымПенсионнымВзносамРаботодателя,
		ПланыСчетов.Налоговый.ОбязательстваПоПенсионнымОтчислениям));
	
	Для Каждого СтрокаДанных Из ТаблицаФормированияПроводок Цикл
		
		ТекстПроводки = СтрШаблон(ШаблонТекстаПроводки, Формат(СтрокаДанных.МесяцИсчисления, "ДФ='ММММ гггг'"));
		
		////////////////////////////////////////////////////////////////////////////
		// По регистру бухгалтерии "Типовой" - возвраты взносов по работникам из фондов
		Проводка = Движения.Типовой.Добавить();
		
		// Свойства
		Проводка.Период			= Реквизиты.Дата;
		
		// Измерения
		Проводка.Организация	= Реквизиты.Организация;
		
		// Корреспондеция счетов и аналитика
		Проводка.СчетДт			= Реквизиты.СчетБанк;
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ДенежныеСредства"			 , Реквизиты.СчетОрганизации);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтатьиДвиженияДенежныхСредств", СтрокаДанных.СтатьяДвиженияДенежныхСредств);
		
		Если Проводка.СчетДт.Валютный Тогда
			Проводка.ВалютаДт 			= Реквизиты.ВалютаДокумента;
			Проводка.ВалютнаяСуммаДт 	= СтрокаДанных.Сумма;
		КонецЕсли;
		
		Проводка.СчетКт			= СчетКт;
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "НалогиСборыОтчисления", 	   СубконтоНалогиСборыОтчисления);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ВидыПлатежейВБюджетИФонды", СтрокаДанных.ВидПлатежа);
		
		Если ВедениеУчетаПоСотрудникам Тогда
			Если Реквизиты.ЕстьВозвратПенсионныхВзносов Тогда
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "РаботникиОрганизаций",  СтрокаДанных.ФизЛицоБУ);
			Иначе
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "РаботникиОрганизаций",  СтрокаДанных.ФизЛицо);
			КонецЕсли;
		КонецЕсли;
		
		Проводка.Сумма			= СтрокаДанных.Сумма;
		
		// Реквизиты
		Проводка.Содержание		= ТекстПроводки;
		
		ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(Проводка, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);
		
		////////////////////////////////////////////////////////////////////////////
		// По регистру бухгалтерии "Налоговый" - возвраты взносов по работникам из фондов
		Если Реквизиты.НеобходимостьОтраженияВНУ Тогда
			ПроводкаНУ = Движения.Налоговый.Добавить();
			
			// Свойства
			ПроводкаНУ.Период			= Реквизиты.Дата;
			
			// Измерения
			ПроводкаНУ.Организация	= Реквизиты.Организация;
			
			// Корреспондеция счетов и аналитика
			ПроводкаНУ.СчетДт			= Реквизиты.СчетБанкНУ;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "ДенежныеСредства", 			   Реквизиты.СчетОрганизации);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "СтатьиДвиженияДенежныхСредств", СтрокаДанных.СтатьяДвиженияДенежныхСредств);
			
			ПроводкаНУ.СчетКт			= СчетКтНУ;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "НалогиСборыОтчисления",     СубконтоНалогиСборыОтчисления);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "ВидыПлатежейВБюджетИФонды", СтрокаДанных.ВидПлатежа);
			
			Если ВедениеУчетаПоСотрудникам Тогда
				Если Реквизиты.ЕстьВозвратПенсионныхВзносов Тогда
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "РаботникиОрганизаций",  СтрокаДанных.ФизЛицоБУ);
				Иначе
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "РаботникиОрганизаций",  СтрокаДанных.ФизЛицо);
				КонецЕсли;
			КонецЕсли;
			
			ПроводкаНУ.Сумма			= СтрокаДанных.Сумма;
			
			// Реквизиты
			ПроводкаНУ.Содержание		= ТекстПроводки;
			
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(ПроводкаНУ, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);
			
			ПроцедурыНалоговогоУчета.ВидУчетаНУ(ПроводкаНУ, Реквизиты.ВидУчетаНУ);
			
		КонецЕсли;
	КонецЦикла;
	
	Движения.Типовой.Записывать = Истина;
	Если Реквизиты.НеобходимостьОтраженияВНУ Тогда
		Движения.Налоговый.Записывать = Истина;
	КонецЕсли;
	
КонецПроцедуры

Функция ПодготовитьТаблицуВозвратОПВ(Реквизиты, ТаблицаВозвратОПВ, Отказ)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДанныеОПВ", ТаблицаВозвратОПВ);
	Запрос.УстановитьПараметр("Организация", ОбщегоНазначенияБКВызовСервера.ГоловнаяОрганизацияДляУчетаЗарплаты(Реквизиты.Организация));   
	Запрос.УстановитьПараметр("ОбособленноеПодразделение", Реквизиты.Организация);
	Запрос.УстановитьПараметр("Дата", Реквизиты.Дата);
	
	// Список видов платежей, по которым формируются движения по регистру ОПВПодлежитПеречислениюВФонды
	СписокВидовПлатежей = Новый СписокЗначений;
	СписокВидовПлатежей.Добавить(Перечисления.ВидыПлатежейВБюджетИФонды.Налог);
	СписокВидовПлатежей.Добавить(Перечисления.ВидыПлатежейВБюджетИФонды.НалогАкт);
	СписокВидовПлатежей.Добавить(Перечисления.ВидыПлатежейВБюджетИФонды.НалогСам);
	Запрос.УстановитьПараметр("СписокВидовПлатежей", СписокВидовПлатежей);
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;

	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДанныеОПВ.ФизЛицо,
		|	ДанныеОПВ.МесяцИсчисления,
		|	ДанныеОПВ.ВидПлатежа,
		|	ДанныеОПВ.Сумма
		|ПОМЕСТИТЬ ДанныеОПВ
		|ИЗ
		|	&ДанныеОПВ КАК ДанныеОПВ";
		
	Запрос.Выполнить();
	
	Если Реквизиты.ПоддержкаРаботыСоСтруктурнымиПодразделениями Или Реквизиты.РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
		
		ПериодыФизЛицаТекст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДанныеОПВ.ФизЛицо,
		|	ДанныеОПВ.МесяцИсчисления КАК Период
		|ПОМЕСТИТЬ ВТ_ПериодыСотрудников
		|ИЗ
		|	ДанныеОПВ КАК ДанныеОПВ
		|";
		
		Запрос.Текст = ПериодыФизЛицаТекст + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета()
					 + СформироватьТекстЗапросаСтруктурныеЕдиницы("ВТ_ПериодыСотрудников", Истина);
		Запрос.Выполнить();
	КонецЕсли;

	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОПВВозвратВзносов.МесяцИсчисления КАК МесяцИсчисления,
	|	ОПВВозвратВзносов.ВидПлатежа КАК ВидПлатежа,
	|	ВЫБОР
	|		КОГДА ОПВВозвратВзносов.ВидПлатежа В (&СписокВидовПлатежей)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПлатежЯвляетсяНалогом,
	|	ОПВВозвратВзносов.ФизЛицо КАК ФизЛицо,
	|	ОПВВозвратВзносов.Сумма КАК Сумма,
	|	ЕСТЬNULL(ОПВРасчетыСФондами.Взнос, 0) КАК РасчетыСФондамиВзнос,
	|	ОПВРасчетыСФондами.Регистратор,
	|	ОПВРасчетыСФондами.НомерСтроки,
	|	ЕСТЬNULL(ОПВПодлежитПеречислениюВФонды.Взнос, 0) КАК ПодлежитПеречислениюВзнос,
	|	ОПВПодлежитПеречислениюВФонды.МесяцВыплатыДоходов КАК МесяцВыплатыДоходов";
	
	Если Реквизиты.ПоддержкаРаботыСоСтруктурнымиПодразделениями Или Реквизиты.РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
	
		Запрос.Текст = Запрос.Текст + ",
		|	ВЫБОР
		|		КОГДА НЕ(ОПВРасчетыСФондами.СтруктурнаяЕдиница ЕСТЬ NULL)
		|			ТОГДА ОПВРасчетыСФондами.СтруктурнаяЕдиница
		|		КОГДА НЕ(МестоРаботы.СтруктурнаяЕдиница ЕСТЬ NULL)
		|			ТОГДА МестоРаботы.СтруктурнаяЕдиница
		|		ИНАЧЕ &ОбособленноеПодразделение
		|	КОНЕЦ КАК СтруктурнаяЕдиница,
		|	ВЫБОР
		|		КОГДА НЕ(МестоРаботы.СтруктурнаяЕдиница ЕСТЬ NULL)
		|			ТОГДА МестоРаботы.СтруктурнаяЕдиница
		|		ИНАЧЕ &ОбособленноеПодразделение
		|	КОНЕЦ КАК СтруктурнаяЕдиницаПоМестуРаботы,
		|	ВЫБОР
		|		КОГДА НЕ(ОПВРасчетыСФондами.ПодразделениеОрганизации ЕСТЬ NULL)
		|			ТОГДА ОПВРасчетыСФондами.ПодразделениеОрганизации
		|		КОГДА НЕ(МестоРаботы.ПодразделениеОрганизации ЕСТЬ NULL)
		|			ТОГДА МестоРаботы.ПодразделениеОрганизации
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
		|	КОНЕЦ КАК ПодразделениеОрганизации,
		|	ВЫБОР
		|		КОГДА НЕ(МестоРаботы.ПодразделениеОрганизации ЕСТЬ NULL)
		|			ТОГДА МестоРаботы.ПодразделениеОрганизации
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
		|	КОНЕЦ КАК ПодразделениеОрганизацииПоМестуРаботы,
		|	ВЫБОР
		|		КОГДА НЕ(ОПВРасчетыСФондами.Налогоплательщик ЕСТЬ NULL)
		|			ТОГДА ОПВРасчетыСФондами.Налогоплательщик
		|		ИНАЧЕ &ОбособленноеПодразделение
		|	КОНЕЦ КАК Налогоплательщик";
	
	Иначе
		
		Запрос.Текст = Запрос.Текст + ",
		|	&ОбособленноеПодразделение КАК СтруктурнаяЕдиница,
		|	&ОбособленноеПодразделение КАК СтруктурнаяЕдиницаПоМестуРаботы,
		|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) КАК ПодразделениеОрганизации,
		|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) КАК ПодразделениеОрганизацииПоМестуРаботы,
		|	&ОбособленноеПодразделение КАК Налогоплательщик";
		
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|ИЗ
	|	ДанныеОПВ КАК ОПВВозвратВзносов
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОПВРасчетыСФондами КАК ОПВРасчетыСФондами
	|		ПО ОПВВозвратВзносов.ФизЛицо = ОПВРасчетыСФондами.ФизЛицо
	|			И ОПВВозвратВзносов.МесяцИсчисления = ОПВРасчетыСФондами.МесяцНалоговогоПериода
	|			И ОПВВозвратВзносов.ВидПлатежа = ОПВРасчетыСФондами.ВидПлатежа
	|			И ОПВРасчетыСФондами.Организация = &ОбособленноеПодразделение
	|			И ОПВРасчетыСФондами.Период МЕЖДУ ОПВВозвратВзносов.МесяцИсчисления И КОНЕЦПЕРИОДА(&Дата, ДЕНЬ)
	|			И ОПВРасчетыСФондами.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Перечисление)
	|			И ОПВРасчетыСФондами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			И ОПВРасчетыСФондами.Активность
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОПВПодлежитПеречислениюВФонды КАК ОПВПодлежитПеречислениюВФонды
	|		ПО ОПВВозвратВзносов.ВидПлатежа В (&СписокВидовПлатежей)
	|			И ОПВРасчетыСФондами.ФизЛицо = ОПВПодлежитПеречислениюВФонды.ФизЛицо
	|			И ОПВРасчетыСФондами.МесяцНалоговогоПериода = ОПВПодлежитПеречислениюВФонды.МесяцНалоговогоПериода
	|			И ОПВПодлежитПеречислениюВФонды.Организация = &ОбособленноеПодразделение
	|			И ОПВРасчетыСФондами.Регистратор = ОПВПодлежитПеречислениюВФонды.Регистратор // берем только возвраты по соответствующему регистратору
	|			И ОПВРасчетыСФондами.СтруктурнаяЕдиница = ОПВПодлежитПеречислениюВФонды.СтруктурнаяЕдиница
	|			И ОПВРасчетыСФондами.Налогоплательщик = ОПВПодлежитПеречислениюВФонды.Налогоплательщик
	|			И ОПВПодлежитПеречислениюВФонды.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Перечисление)
	|			И ОПВПодлежитПеречислениюВФонды.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			И ОПВПодлежитПеречислениюВФонды.Активность";

	Если Реквизиты.ПоддержкаРаботыСоСтруктурнымиПодразделениями Или Реквизиты.РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
	
		Запрос.Текст = Запрос.Текст + "
		|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_МестоРаботы КАК МестоРаботы
		|		ПО ОПВВозвратВзносов.ФизЛицо = МестоРаботы.ФизЛицо
		|			И ОПВВозвратВзносов.МесяцИсчисления = МестоРаботы.Период";
	
	КонецЕсли;	
	
	Запрос.Текст = Запрос.Текст + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОПВВозвратВзносов.ФизЛицо,
	|	ОПВВозвратВзносов.ВидПлатежа,
	|	ОПВВозвратВзносов.МесяцИсчисления,
	|	ОПВРасчетыСФондами.Период УБЫВ, // считаем, что возвращают самое последнее перечисление ОПВ
	|	ОПВРасчетыСФондами.Регистратор,
	|	ОПВРасчетыСФондами.НомерСтроки, 
	|	ОПВПодлежитПеречислениюВФонды.МесяцВыплатыДоходов УБЫВ
	|";

	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

Процедура ЗарегистрироватьДвиженияВозвратОПВ(Реквизиты, Выборка, Движения, Отказ)
	
	Пока Выборка.СледующийПоЗначениюПоля("ФизЛицо") Цикл
		
		Пока Выборка.СледующийПоЗначениюПоля("ВидПлатежа") Цикл
		
			Пока Выборка.СледующийПоЗначениюПоля("МесяцИсчисления") Цикл
				
				// движения по регистрам накопления
				ОстатокКВозврату 	= Выборка.Сумма;
				ТекущееФизЛицо 		= Выборка.ФизЛицо;
				ТекущийВидПлатежа 	= Выборка.ВидПлатежа;
				ТекущийПлатежЯвляетсяНалогом = Выборка.ПлатежЯвляетсяНалогом;
				ТекущийМесяцИсчисления = Выборка.МесяцИсчисления;
				СтруктурнаяЕдиницаПоМестуРаботы = Выборка.СтруктурнаяЕдиницаПоМестуРаботы;
				ПодразделениеОрганизацииПоМестуРаботы = Выборка.ПодразделениеОрганизацииПоМестуРаботы;
				
				Пока Выборка.СледующийПоЗначениюПоля("Регистратор") Цикл
						
					Пока Выборка.СледующийПоЗначениюПоля("НомерСтроки") Цикл
						
						ТекущийРегистратор	= Выборка.Регистратор;
						ТекущийНомерСтроки	= Выборка.НомерСтроки;
						РасчетыСФондамиОстаток = Выборка.РасчетыСФондамиВзнос;
						
						Пока Выборка.Следующий()
								И Выборка.ФизЛицо = ТекущееФизЛицо
								И Выборка.ВидПлатежа = ТекущийВидПлатежа 
								И Выборка.МесяцИсчисления = ТекущийМесяцИсчисления
								И Выборка.Регистратор = ТекущийРегистратор
								И Выборка.НомерСтроки = ТекущийНомерСтроки 
								И Выборка.Налогоплательщик <> NULL Цикл
							
							Если ТекущийПлатежЯвляетсяНалогом Тогда
								СуммаКВозврату = Выборка.ПодлежитПеречислениюВзнос;
							Иначе
								СуммаКВозврату = Выборка.РасчетыСФондамиВзнос;
							КонецЕсли;
								
							СуммаКВозврату = Мин(СуммаКВозврату, ОстатокКВозврату, РасчетыСФондамиОстаток);
							Если СуммаКВозврату = 0 Тогда
								Продолжить;
							КонецЕсли;
							ОстатокКВозврату = ОстатокКВозврату - СуммаКВозврату;
							РасчетыСФондамиОстаток = РасчетыСФондамиОстаток - СуммаКВозврату;
							
							//////////////////////////////////////
							// ОПВРасчетыСФондами
							
							Движение = Движения.ОПВРасчетыСФондами.Добавить();
							
							// Свойства
							Движение.Период 		= Реквизиты.Дата;
							Движение.ВидДвижения 	= ВидДвиженияНакопления.Приход;
							
							// Измерения
							Движение.ФизЛицо		= Выборка.ФизЛицо;
							Если Реквизиты.ПоддержкаРаботыСоСтруктурнымиПодразделениями Или Реквизиты.РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
								Движение.СтруктурнаяЕдиница = Выборка.СтруктурнаяЕдиница;
								Движение.Налогоплательщик 	= Выборка.Налогоплательщик;
							Иначе
								Движение.СтруктурнаяЕдиница = Реквизиты.Организация;
								Движение.Налогоплательщик 	= Реквизиты.Организация;
							КонецЕсли;
							Движение.МесяцНалоговогоПериода = Выборка.МесяцИсчисления;
							Движение.ВидПлатежа				= Выборка.ВидПлатежа;
							Движение.Организация			= Реквизиты.Организация;
							//Остаток списываем всегда чтобы не было зависания остатков
							Движение.ПодразделениеОрганизации = Выборка.ПодразделениеОрганизации;
							
							// Ресурсы
							Движение.Взнос					= СуммаКВозврату;
							
							// Реквизиты
							Движение.ВидСтроки				= Перечисления.РасчетыСБюджетомФондамиВидСтроки.Возврат;
							
							//////////////////////////////////////
							// ОПВПодлежитПеречислениюВФонды
							
							Если ТекущийПлатежЯвляетсяНалогом Тогда
							
								Движение = Движения.ОПВПодлежитПеречислениюВФонды.Добавить();
								
								// Свойства
								Движение.Период 		= Реквизиты.Дата;
								Движение.ВидДвижения	= ВидДвиженияНакопления.Приход;
								
								// Измерения
								Движение.ФизЛицо		= Выборка.ФизЛицо;
								Если Реквизиты.ПоддержкаРаботыСоСтруктурнымиПодразделениями Или Реквизиты.РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
									Движение.СтруктурнаяЕдиница = Выборка.СтруктурнаяЕдиница;
									Движение.Налогоплательщик 	= Выборка.Налогоплательщик;
								Иначе
									Движение.СтруктурнаяЕдиница = Реквизиты.Организация;
									Движение.Налогоплательщик 	= Реквизиты.Организация;
								КонецЕсли;
								Движение.МесяцНалоговогоПериода	= Выборка.МесяцИсчисления;
								Движение.МесяцВыплатыДоходов 	= ?(Выборка.МесяцВыплатыДоходов <> NULL, Выборка.МесяцВыплатыДоходов, Выборка.МесяцИсчисления);
								Движение.Организация			= Реквизиты.Организация;
								//Остаток списываем всегда чтобы не было зависания остатков
								Движение.ПодразделениеОрганизации = Выборка.ПодразделениеОрганизации;
								
								// Ресурсы
								Движение.Взнос				= СуммаКВозврату;
								
								// Реквизиты
								Движение.ВидСтроки			= Перечисления.РасчетыСБюджетомФондамиВидСтроки.Возврат;
							
							КонецЕсли;
								
						КонецЦикла;
					
					КонецЦикла; // Пока Выборка.СледующийПоЗначениюПоля("НомерСтроки") Цикл
				
				КонецЦикла; // Пока Выборка.СледующийПоЗначениюПоля("Регистратор") Цикл
			
				Если ОстатокКВозврату <> 0 Тогда
					// невозвращенный остаток ставим на структурную единицу по месту работы

					//////////////////////////////////////
					// ОПВРасчетыСФондами
					
					Движение = Движения.ОПВРасчетыСФондами.Добавить();
					
					// Свойства
					Движение.Период 		= Реквизиты.Дата;
					Движение.ВидДвижения 	= ВидДвиженияНакопления.Приход;
					
					// Измерения
					Движение.ФизЛицо		= ТекущееФизЛицо;
					Если Реквизиты.ПоддержкаРаботыСоСтруктурнымиПодразделениями Или Реквизиты.РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
						Налогоплательщик			= ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(СтруктурнаяЕдиницаПоМестуРаботы,
																									Реквизиты.Организация,
																									Перечисления.РазделыНалоговогоУчета.НалогиСЗаработнойПлаты);
						Движение.СтруктурнаяЕдиница = СтруктурнаяЕдиницаПоМестуРаботы;
						Движение.Налогоплательщик 	= Налогоплательщик;
					Иначе
						Движение.СтруктурнаяЕдиница = Реквизиты.Организация;
						Движение.Налогоплательщик 	= Реквизиты.Организация;
					КонецЕсли;
					Движение.МесяцНалоговогоПериода = ТекущийМесяцИсчисления;
					Движение.ВидПлатежа				= ТекущийВидПлатежа;
					Движение.Организация			= Реквизиты.Организация;
					// Нераспределенный остаток относим на основное место работы только если используется распределение
					Если Реквизиты.РаспределятьНалогиПоПодразделениямОрганизаций Тогда
						Движение.ПодразделениеОрганизации = ПодразделениеОрганизацииПоМестуРаботы;
					КонецЕсли;
					
					// Ресурсы
					Движение.Взнос					= ОстатокКВозврату;
					
					// Реквизиты
					Движение.ВидСтроки				= Перечисления.РасчетыСБюджетомФондамиВидСтроки.Возврат;
					
					//////////////////////////////////////
					// ОПВПодлежитПеречислениюВФонды
					
					Если ТекущийПлатежЯвляетсяНалогом Тогда
					
						Движение = Движения.ОПВПодлежитПеречислениюВФонды.Добавить();
						
						// Свойства
						Движение.Период 		= Реквизиты.Дата;
						Движение.ВидДвижения	= ВидДвиженияНакопления.Приход;
						
						// Измерения
						Движение.ФизЛицо		= ТекущееФизЛицо;
						Если Реквизиты.ПоддержкаРаботыСоСтруктурнымиПодразделениями Или Реквизиты.РаспределятьНалогиПоСтруктурнымЕдиницам  Тогда
							Движение.СтруктурнаяЕдиница = СтруктурнаяЕдиницаПоМестуРаботы;
							Движение.Налогоплательщик 	= Налогоплательщик;
						Иначе
							Движение.СтруктурнаяЕдиница = Реквизиты.Организация;
							Движение.Налогоплательщик 	= Реквизиты.Организация;
						КонецЕсли;
						Движение.МесяцНалоговогоПериода	= ТекущийМесяцИсчисления;
						Движение.МесяцВыплатыДоходов 	= ТекущийМесяцИсчисления;
						Движение.Организация			= Реквизиты.Организация;
						// Нераспределенный остаток относим на основное место работы только если используется распределение
						Если Реквизиты.РаспределятьНалогиПоПодразделениямОрганизаций Тогда
							Движение.ПодразделениеОрганизации = ПодразделениеОрганизацииПоМестуРаботы;
						КонецЕсли;
						
						// Ресурсы
						Движение.Взнос				= ОстатокКВозврату;
						
						// Реквизиты
						Движение.ВидСтроки			= Перечисления.РасчетыСБюджетомФондамиВидСтроки.Возврат;
					
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла; // Пока Выборка.СледующийПоЗначениюПоля("МесяцИсчисления") Цикл
		
		КонецЦикла; // Пока Выборка.СледующийПоЗначениюПоля("ВидПлатежа") Цикл
	
	КонецЦикла; // Пока Выборка.СледующийПоЗначениюПоля("ФизЛицо") Цикл
	
	Движения.ОПВРасчетыСФондами.Записывать = Истина;
	Движения.ОПВПодлежитПеречислениюВФонды.Записывать = Истина;

КонецПроцедуры

Функция ПодготовитьТаблицуВозвратОППВ(Реквизиты, ТаблицаВозвратОППВ, Отказ)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДанныеОППВ", ТаблицаВозвратОППВ);
	Запрос.УстановитьПараметр("Организация", ОбщегоНазначенияБКВызовСервера.ГоловнаяОрганизацияДляУчетаЗарплаты(Реквизиты.Организация));   
	Запрос.УстановитьПараметр("ОбособленноеПодразделение", Реквизиты.Организация);
	Запрос.УстановитьПараметр("Дата", Реквизиты.Дата);
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;

	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДанныеОППВ.ФизЛицо,
		|	ДанныеОППВ.МесяцИсчисления,
		|	ДанныеОППВ.ВидПлатежа,
		|	ДанныеОППВ.Сумма
		|ПОМЕСТИТЬ ДанныеОППВ
		|ИЗ
		|	&ДанныеОППВ КАК ДанныеОППВ";
		
	Запрос.Выполнить();
	
	Если Реквизиты.ПоддержкаРаботыСоСтруктурнымиПодразделениями Или Реквизиты.РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
		
		ПериодыФизЛицаТекст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДанныеОППВ.ФизЛицо,
		|	ДанныеОППВ.МесяцИсчисления КАК Период
		|ПОМЕСТИТЬ ВТ_ПериодыСотрудников
		|ИЗ
		|	ДанныеОППВ КАК ДанныеОППВ
		|";
		
		Запрос.Текст = ПериодыФизЛицаТекст + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета()
					 + СформироватьТекстЗапросаСтруктурныеЕдиницы("ВТ_ПериодыСотрудников", Истина);
		Запрос.Выполнить();
	КонецЕсли;

	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОПВВозвратВзносов.МесяцИсчисления КАК МесяцИсчисления,
	|	ОПВВозвратВзносов.ВидПлатежа КАК ВидПлатежа,
	|	ОПВВозвратВзносов.ФизЛицо КАК ФизЛицо,
	|	ОПВВозвратВзносов.Сумма КАК Сумма,
	|	ЕСТЬNULL(ОППВРасчетыСФондами.Взнос, 0) КАК ОППВРасчетыСФондамиВзнос";
	
	Если Реквизиты.ПоддержкаРаботыСоСтруктурнымиПодразделениями Или Реквизиты.РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
		
		Запрос.Текст = Запрос.Текст + ",
		|	ВЫБОР
		|		КОГДА НЕ (ОППВРасчетыСФондами.СтруктурнаяЕдиница ЕСТЬ NULL)
		|			ТОГДА ОППВРасчетыСФондами.СтруктурнаяЕдиница
		|		КОГДА НЕ (МестоРаботы.СтруктурнаяЕдиница ЕСТЬ NULL)
		|			ТОГДА МестоРаботы.СтруктурнаяЕдиница
		|		ИНАЧЕ &ОбособленноеПодразделение
		|	КОНЕЦ КАК СтруктурнаяЕдиница,
		|	ВЫБОР
		|		КОГДА НЕ (МестоРаботы.СтруктурнаяЕдиница ЕСТЬ NULL)
		|			ТОГДА МестоРаботы.СтруктурнаяЕдиница
		|		ИНАЧЕ &ОбособленноеПодразделение
		|	КОНЕЦ КАК СтруктурнаяЕдиницаПоМестуРаботы,
		|	ВЫБОР
		|		КОГДА НЕ (ОППВРасчетыСФондами.ПодразделениеОрганизации ЕСТЬ NULL)
		|			ТОГДА ОППВРасчетыСФондами.ПодразделениеОрганизации
		|		КОГДА НЕ (МестоРаботы.ПодразделениеОрганизации ЕСТЬ NULL)
		|			ТОГДА МестоРаботы.ПодразделениеОрганизации
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
		|	КОНЕЦ КАК ПодразделениеОрганизации,
		|	ВЫБОР
		|		КОГДА НЕ (МестоРаботы.ПодразделениеОрганизации ЕСТЬ NULL)
		|			ТОГДА МестоРаботы.ПодразделениеОрганизации
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
		|	КОНЕЦ КАК ПодразделениеОрганизацииПоМестуРаботы,
		|	ВЫБОР
		|		КОГДА НЕ(ОППВРасчетыСФондами.Налогоплательщик ЕСТЬ NULL)
		|			ТОГДА ОППВРасчетыСФондами.Налогоплательщик
		|		ИНАЧЕ &ОбособленноеПодразделение
		|	КОНЕЦ КАК Налогоплательщик";
	
	Иначе
	
		Запрос.Текст = Запрос.Текст + ", 
		|	&ОбособленноеПодразделение КАК СтруктурнаяЕдиница,
		|	&ОбособленноеПодразделение КАК СтруктурнаяЕдиницаПоМестуРаботы,
		|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) КАК ПодразделениеОрганизации,
		|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) КАК ПодразделениеОрганизацииПоМестуРаботы,
		|	&ОбособленноеПодразделение КАК Налогоплательщик";
		
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|ИЗ
	|	ДанныеОППВ КАК ОПВВозвратВзносов
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОППВРасчетыСФондами КАК ОППВРасчетыСФондами
	|		ПО ОПВВозвратВзносов.ФизЛицо = ОППВРасчетыСФондами.ФизЛицо
	|			И ОПВВозвратВзносов.ВидПлатежа = ОППВРасчетыСФондами.ВидПлатежа
	|			И ОПВВозвратВзносов.МесяцИсчисления = ОППВРасчетыСФондами.МесяцНалоговогоПериода
	|			И ОППВРасчетыСФондами.Организация = &ОбособленноеПодразделение
	|			И ОППВРасчетыСФондами.Период МЕЖДУ ОПВВозвратВзносов.МесяцИсчисления И КОНЕЦПЕРИОДА(&Дата, ДЕНЬ)
	|			И ОППВРасчетыСФондами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			И ОППВРасчетыСФондами.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Перечисление)
	|			И ОППВРасчетыСФондами.Активность";
	
	Если Реквизиты.ПоддержкаРаботыСоСтруктурнымиПодразделениями Или Реквизиты.РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
	
		Запрос.Текст = Запрос.Текст + "
		|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_МестоРаботы КАК МестоРаботы
		|		ПО ОПВВозвратВзносов.ФизЛицо = МестоРаботы.ФизЛицо
		|			И ОПВВозвратВзносов.МесяцИсчисления = МестоРаботы.Период";
	
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОПВВозвратВзносов.ФизЛицо,
	|	ОПВВозвратВзносов.ВидПлатежа,
	|	ОПВВозвратВзносов.МесяцИсчисления,
	|	ОППВРасчетыСФондами.Период УБЫВ // считаем, что возвращают наиболее поздние платежи
	|";
	
	Возврат Запрос.Выполнить().Выбрать();

КонецФункции

Процедура ЗарегистрироватьДвиженияВозвратОППВ(Реквизиты, Выборка, Движения, Отказ) 
	
	Пока Выборка.СледующийПоЗначениюПоля("ФизЛицо") Цикл

		Пока Выборка.СледующийПоЗначениюПоля("ВидПлатежа") Цикл
		
			Пока Выборка.СледующийПоЗначениюПоля("МесяцИсчисления") Цикл
				
				// по регистрам накопления
				ОстатокКВозврату 		= Выборка.Сумма;
				ТекущееФизЛицо	 		= Выборка.ФизЛицо;
				ТекущийМесяцИсчисления	= Выборка.МесяцИсчисления;
				ТекущийВидПлатежа		= Выборка.ВидПлатежа;
				СтруктурнаяЕдиницаПоМестуРаботы = Выборка.СтруктурнаяЕдиницаПоМестуРаботы;
				ПодразделениеОрганизацииПоМестуРаботы = Выборка.ПодразделениеОрганизацииПоМестуРаботы;
				
				Пока Выборка.Следующий()
						И Выборка.ФизЛицо = ТекущееФизЛицо
						И Выборка.МесяцИсчисления = ТекущийМесяцИсчисления
						И Выборка.ВидПлатежа = ТекущийВидПлатежа
						И Выборка.Налогоплательщик <> NULL Цикл
						
					СуммаКВозврату = Мин(ОстатокКВозврату, Выборка.ОППВРасчетыСФондамиВзнос);
					ОстатокКВозврату = ОстатокКВозврату - СуммаКВозврату;
					
					Если СуммаКВозврату = 0 Тогда
						Продолжить;
					КонецЕсли;
					
					//////////////////////////////////
					// ОППВРасчетыСФондами
					
					Движение = Движения.ОППВРасчетыСФондами.Добавить();
					
					// Свойства
					Движение.Период			= Реквизиты.Дата;
					Движение.ВидДвижения	= ВидДвиженияНакопления.Приход;
					
					// Измерения
					Движение.ФизЛицо		= Выборка.ФизЛицо;
					Если Реквизиты.ПоддержкаРаботыСоСтруктурнымиПодразделениями Или Реквизиты.РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
						Движение.СтруктурнаяЕдиница	= Выборка.СтруктурнаяЕдиница;
						Движение.Налогоплательщик	= Выборка.Налогоплательщик;
					Иначе
						Движение.СтруктурнаяЕдиница	= Реквизиты.Организация;
						Движение.Налогоплательщик	= Реквизиты.Организация;
					КонецЕсли;
					Движение.МесяцНалоговогоПериода	= Выборка.МесяцИсчисления;
					Движение.ВидПлатежа				= Выборка.ВидПлатежа;
					Движение.Организация			= Реквизиты.Организация;
					// Остатки всегда списываем по подразделениям, чтобы не было зависания остатков
					Движение.ПодразделениеОрганизации = Выборка.ПодразделениеОрганизации;
										
					// Ресурсы
					Движение.Взнос					= СуммаКВозврату;
					
					// Реквизиты
					Движение.ВидСтроки				= Перечисления.РасчетыСБюджетомФондамиВидСтроки.Возврат;
						
				КонецЦикла;
			
				Если ОстатокКВозврату <> 0 Тогда
				    // возвращенный нераспределенный остаток относим на структурную единицу по месту работы

					Движение = Движения.ОППВРасчетыСФондами.Добавить();
					
					// Свойства
					Движение.Период			= Реквизиты.Дата;
					Движение.ВидДвижения	= ВидДвиженияНакопления.Приход;
					
					// Измерения
					Движение.ФизЛицо		= ТекущееФизЛицо;
					Если Реквизиты.ПоддержкаРаботыСоСтруктурнымиПодразделениями Или Реквизиты.РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
						Налогоплательщик			= ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(СтруктурнаяЕдиницаПоМестуРаботы,
																									Реквизиты.Организация,
																									Перечисления.РазделыНалоговогоУчета.НалогиСЗаработнойПлаты);
						Движение.СтруктурнаяЕдиница	= СтруктурнаяЕдиницаПоМестуРаботы;
						Движение.Налогоплательщик	= Налогоплательщик;
					Иначе
						Движение.СтруктурнаяЕдиница	= Реквизиты.Организация;
						Движение.Налогоплательщик	= Реквизиты.Организация;
					КонецЕсли;
					Движение.МесяцНалоговогоПериода	= ТекущийМесяцИсчисления;
					Движение.ВидПлатежа				= ТекущийВидПлатежа;
					Движение.Организация			= Реквизиты.Организация;
					//Нераспределенные остатки относим на оснровное место работы только если используется распределение
					Если Реквизиты.РаспределятьНалогиПоПодразделениямОрганизаций Тогда
						Движение.ПодразделениеОрганизации = ПодразделениеОрганизацииПоМестуРаботы;
					КонецЕсли;
					
					// Ресурсы
					Движение.Взнос					= ОстатокКВозврату;
					
					// Реквизиты
					Движение.ВидСтроки				= Перечисления.РасчетыСБюджетомФондамиВидСтроки.Возврат;
					
				КонецЕсли;
				
			КонецЦикла; // Пока Выборка.СледующийПоЗначениюПоля("МесяцИсчисления") Цикл
		
		КонецЦикла; // Пока Выборка.СледующийПоЗначениюПоля("ВидПлатежа") Цикл
	
	КонецЦикла; // Пока Выборка.СледующийПоЗначениюПоля("ФизЛицо") Цикл

	Движения.ОППВРасчетыСФондами.Записывать = Истина;
	
КонецПроцедуры

Функция ПодготовитьТаблицуВозвратОПВР(Реквизиты, ТаблицаВозвратОПВР, Отказ)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДанныеОПВР", ТаблицаВозвратОПВР);
	Запрос.УстановитьПараметр("Организация", ОбщегоНазначенияБКВызовСервера.ГоловнаяОрганизацияДляУчетаЗарплаты(Реквизиты.Организация));   
	Запрос.УстановитьПараметр("ОбособленноеПодразделение", Реквизиты.Организация);
	Запрос.УстановитьПараметр("Дата", Реквизиты.Дата);
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;

	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДанныеОПВР.ФизЛицо,
		|	ДанныеОПВР.МесяцИсчисления,
		|	ДанныеОПВР.ВидПлатежа,
		|	ДанныеОПВР.Сумма
		|ПОМЕСТИТЬ ДанныеОПВР
		|ИЗ
		|	&ДанныеОПВР КАК ДанныеОПВР";
		
	Запрос.Выполнить();
	
	Если Реквизиты.ПоддержкаРаботыСоСтруктурнымиПодразделениями Или Реквизиты.РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
		
		ПериодыФизЛицаТекст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДанныеОПВР.ФизЛицо,
		|	ДанныеОПВР.МесяцИсчисления КАК Период
		|ПОМЕСТИТЬ ВТ_ПериодыСотрудников
		|ИЗ
		|	ДанныеОПВР КАК ДанныеОПВР
		|";
		
		Запрос.Текст = ПериодыФизЛицаТекст + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета()
					 + СформироватьТекстЗапросаСтруктурныеЕдиницы("ВТ_ПериодыСотрудников", Истина);
		Запрос.Выполнить();
	КонецЕсли;

	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОПВРВозвратВзносов.МесяцИсчисления КАК МесяцИсчисления,
	|	ОПВРВозвратВзносов.ВидПлатежа КАК ВидПлатежа,
	|	ОПВРВозвратВзносов.ФизЛицо КАК ФизЛицо,
	|	ОПВРВозвратВзносов.Сумма КАК Сумма,
	|	ЕСТЬNULL(ОПВРРасчетыСФондами.Взнос, 0) КАК ОПВРРасчетыСФондамиВзнос";
	
	Если Реквизиты.ПоддержкаРаботыСоСтруктурнымиПодразделениями Или Реквизиты.РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
		
		Запрос.Текст = Запрос.Текст + ",
		|	ВЫБОР
		|		КОГДА НЕ (ОПВРРасчетыСФондами.СтруктурнаяЕдиница ЕСТЬ NULL)
		|			ТОГДА ОПВРРасчетыСФондами.СтруктурнаяЕдиница
		|		КОГДА НЕ (МестоРаботы.СтруктурнаяЕдиница ЕСТЬ NULL)
		|			ТОГДА МестоРаботы.СтруктурнаяЕдиница
		|		ИНАЧЕ &ОбособленноеПодразделение
		|	КОНЕЦ КАК СтруктурнаяЕдиница,
		|	ВЫБОР
		|		КОГДА НЕ (МестоРаботы.СтруктурнаяЕдиница ЕСТЬ NULL)
		|			ТОГДА МестоРаботы.СтруктурнаяЕдиница
		|		ИНАЧЕ &ОбособленноеПодразделение
		|	КОНЕЦ КАК СтруктурнаяЕдиницаПоМестуРаботы,
		|	ВЫБОР
		|		КОГДА НЕ (ОПВРРасчетыСФондами.ПодразделениеОрганизации ЕСТЬ NULL)
		|			ТОГДА ОПВРРасчетыСФондами.ПодразделениеОрганизации
		|		КОГДА НЕ (МестоРаботы.ПодразделениеОрганизации ЕСТЬ NULL)
		|			ТОГДА МестоРаботы.ПодразделениеОрганизации
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
		|	КОНЕЦ КАК ПодразделениеОрганизации,
		|	ВЫБОР
		|		КОГДА НЕ (МестоРаботы.ПодразделениеОрганизации ЕСТЬ NULL)
		|			ТОГДА МестоРаботы.ПодразделениеОрганизации
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
		|	КОНЕЦ КАК ПодразделениеОрганизацииПоМестуРаботы,
		|	ВЫБОР
		|		КОГДА НЕ(ОПВРРасчетыСФондами.Налогоплательщик ЕСТЬ NULL)
		|			ТОГДА ОПВРРасчетыСФондами.Налогоплательщик
		|		ИНАЧЕ &ОбособленноеПодразделение
		|	КОНЕЦ КАК Налогоплательщик";
	
	Иначе
	
		Запрос.Текст = Запрос.Текст + ", 
		|	&ОбособленноеПодразделение КАК СтруктурнаяЕдиница,
		|	&ОбособленноеПодразделение КАК СтруктурнаяЕдиницаПоМестуРаботы,
		|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) КАК ПодразделениеОрганизации,
		|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) КАК ПодразделениеОрганизацииПоМестуРаботы,
		|	&ОбособленноеПодразделение КАК Налогоплательщик";
		
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|ИЗ
	|	ДанныеОПВР КАК ОПВРВозвратВзносов
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОПВРРасчетыСФондами КАК ОПВРРасчетыСФондами
	|		ПО ОПВРВозвратВзносов.ФизЛицо = ОПВРРасчетыСФондами.ФизЛицо
	|			И ОПВРВозвратВзносов.ВидПлатежа = ОПВРРасчетыСФондами.ВидПлатежа
	|			И ОПВРВозвратВзносов.МесяцИсчисления = ОПВРРасчетыСФондами.МесяцНалоговогоПериода
	|			И ОПВРРасчетыСФондами.Организация = &ОбособленноеПодразделение
	|			И ОПВРРасчетыСФондами.Период МЕЖДУ ОПВРВозвратВзносов.МесяцИсчисления И КОНЕЦПЕРИОДА(&Дата, ДЕНЬ)
	|			И ОПВРРасчетыСФондами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			И ОПВРРасчетыСФондами.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Перечисление)
	|			И ОПВРРасчетыСФондами.Активность";
	
	Если Реквизиты.ПоддержкаРаботыСоСтруктурнымиПодразделениями Или Реквизиты.РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
	
		Запрос.Текст = Запрос.Текст + "
		|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_МестоРаботы КАК МестоРаботы
		|		ПО ОПВРВозвратВзносов.ФизЛицо = МестоРаботы.ФизЛицо
		|			И ОПВРВозвратВзносов.МесяцИсчисления = МестоРаботы.Период";
	
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОПВРВозвратВзносов.ФизЛицо,
	|	ОПВРВозвратВзносов.ВидПлатежа,
	|	ОПВРВозвратВзносов.МесяцИсчисления,
	|	ОПВРРасчетыСФондами.Период УБЫВ // считаем, что возвращают наиболее поздние платежи
	|";
	
	Возврат Запрос.Выполнить().Выбрать();

КонецФункции

Процедура ЗарегистрироватьДвиженияВозвратОПВР(Реквизиты, Выборка, Движения, Отказ) 
	
	Пока Выборка.СледующийПоЗначениюПоля("ФизЛицо") Цикл

		Пока Выборка.СледующийПоЗначениюПоля("ВидПлатежа") Цикл
		
			Пока Выборка.СледующийПоЗначениюПоля("МесяцИсчисления") Цикл
				
				// по регистрам накопления
				ОстатокКВозврату 		= Выборка.Сумма;
				ТекущееФизЛицо	 		= Выборка.ФизЛицо;
				ТекущийМесяцИсчисления	= Выборка.МесяцИсчисления;
				ТекущийВидПлатежа		= Выборка.ВидПлатежа;
				СтруктурнаяЕдиницаПоМестуРаботы = Выборка.СтруктурнаяЕдиницаПоМестуРаботы;
				ПодразделениеОрганизацииПоМестуРаботы = Выборка.ПодразделениеОрганизацииПоМестуРаботы;
				
				Пока Выборка.Следующий()
						И Выборка.ФизЛицо = ТекущееФизЛицо
						И Выборка.МесяцИсчисления = ТекущийМесяцИсчисления
						И Выборка.ВидПлатежа = ТекущийВидПлатежа
						И Выборка.Налогоплательщик <> NULL Цикл
						
					СуммаКВозврату = Мин(ОстатокКВозврату, Выборка.ОПВРРасчетыСФондамиВзнос);
					ОстатокКВозврату = ОстатокКВозврату - СуммаКВозврату;
					
					Если СуммаКВозврату = 0 Тогда
						Продолжить;
					КонецЕсли;
					
					//////////////////////////////////
					// ОПВРРасчетыСФондами
					
					Движение = Движения.ОПВРРасчетыСФондами.Добавить();
					
					// Свойства
					Движение.Период			= Реквизиты.Дата;
					Движение.ВидДвижения	= ВидДвиженияНакопления.Приход;
					
					// Измерения
					Движение.ФизЛицо		= Выборка.ФизЛицо;
					Если Реквизиты.ПоддержкаРаботыСоСтруктурнымиПодразделениями Или Реквизиты.РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
						Движение.СтруктурнаяЕдиница	= Выборка.СтруктурнаяЕдиница;
						Движение.Налогоплательщик	= Выборка.Налогоплательщик;
					Иначе
						Движение.СтруктурнаяЕдиница	= Реквизиты.Организация;
						Движение.Налогоплательщик	= Реквизиты.Организация;
					КонецЕсли;
					Движение.МесяцНалоговогоПериода	= Выборка.МесяцИсчисления;
					Движение.ВидПлатежа				= Выборка.ВидПлатежа;
					Движение.Организация			= Реквизиты.Организация;
					// Остатки всегда списываем по подразделениям, чтобы не было зависания остатков
					Движение.ПодразделениеОрганизации = Выборка.ПодразделениеОрганизации;
										
					// Ресурсы
					Движение.Взнос					= СуммаКВозврату;
					
					// Реквизиты
					Движение.ВидСтроки				= Перечисления.РасчетыСБюджетомФондамиВидСтроки.Возврат;
						
				КонецЦикла;
			
				Если ОстатокКВозврату <> 0 Тогда
				    // возвращенный нераспределенный остаток относим на структурную единицу по месту работы

					Движение = Движения.ОПВРРасчетыСФондами.Добавить();
					
					// Свойства
					Движение.Период			= Реквизиты.Дата;
					Движение.ВидДвижения	= ВидДвиженияНакопления.Приход;
					
					// Измерения
					Движение.ФизЛицо		= ТекущееФизЛицо;
					Если Реквизиты.ПоддержкаРаботыСоСтруктурнымиПодразделениями Или Реквизиты.РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
						Налогоплательщик			= ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(СтруктурнаяЕдиницаПоМестуРаботы,
																									Реквизиты.Организация,
																									Перечисления.РазделыНалоговогоУчета.НалогиСЗаработнойПлаты);
						Движение.СтруктурнаяЕдиница	= СтруктурнаяЕдиницаПоМестуРаботы;
						Движение.Налогоплательщик	= Налогоплательщик;
					Иначе
						Движение.СтруктурнаяЕдиница	= Реквизиты.Организация;
						Движение.Налогоплательщик	= Реквизиты.Организация;
					КонецЕсли;
					Движение.МесяцНалоговогоПериода	= ТекущийМесяцИсчисления;
					Движение.ВидПлатежа				= ТекущийВидПлатежа;
					Движение.Организация			= Реквизиты.Организация;
					//Нераспределенные остатки относим на оснровное место работы только если используется распределение
					Если Реквизиты.РаспределятьНалогиПоПодразделениямОрганизаций Тогда
						Движение.ПодразделениеОрганизации = ПодразделениеОрганизацииПоМестуРаботы;
					КонецЕсли;
					
					// Ресурсы
					Движение.Взнос					= ОстатокКВозврату;
					
					// Реквизиты
					Движение.ВидСтроки				= Перечисления.РасчетыСБюджетомФондамиВидСтроки.Возврат;
					
				КонецЕсли;
				
			КонецЦикла; // Пока Выборка.СледующийПоЗначениюПоля("МесяцИсчисления") Цикл
		
		КонецЦикла; // Пока Выборка.СледующийПоЗначениюПоля("ВидПлатежа") Цикл
	
	КонецЦикла; // Пока Выборка.СледующийПоЗначениюПоля("ФизЛицо") Цикл

	Движения.ОПВРРасчетыСФондами.Записывать = Истина;
	
КонецПроцедуры
	
// Перечисление СО, Взносов ОСМС, Отчислений ОСМС

Процедура СформироватьДвиженияПеречислениеСО(ТаблицаРеквизиты, ТаблицаПеречислениеСО, Движения, Отказ) Экспорт
	
	Если ТаблицаПеречислениеСО = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизиты[0];
	
	СтруктураОтбора = Новый Структура("ВидОперации");
	
	Если Реквизиты.ЕстьПеречислениеСоциальныхОтчислений Тогда
		ВидОперации = Перечисления.ВидыОперацийСОПеречислениеВФонды.ПеречислениеОбязательныхСоциальныхОтчислений;
		СтруктураОтбора.ВидОперации = ВидОперации;
		СформироватьПроводкиПеречислениеСоциальногоСтрахования(Реквизиты, ТаблицаПеречислениеСО.Скопировать(СтруктураОтбора), ВидОперации, Движения, Отказ);
		ТаблицаДвиженияСО = ПодготовитьТаблицуДвиженияСО(Реквизиты, ТаблицаПеречислениеСО, Отказ); 
		ЗарегистрироватьДвиженияПеречислениеСО(Реквизиты, ТаблицаДвиженияСО, Движения, Отказ);
	КонецЕсли;
	
	Если Реквизиты.ЕстьПеречислениеВзносовОСМС Тогда 
		ВидОперации = Перечисления.ВидыОперацийСОПеречислениеВФонды.ПеречислениеВзносовОСМС;
		СтруктураОтбора.ВидОперации =ВидОперации;
		СформироватьПроводкиПеречислениеСоциальногоСтрахования(Реквизиты, ТаблицаПеречислениеСО.Скопировать(СтруктураОтбора), ВидОперации, Движения, Отказ);
		ТаблицаДвиженияВОСМС = ПодготовитьТаблицуДвиженияВОСМС(Реквизиты, ТаблицаПеречислениеСО, Отказ); 
		ЗарегистрироватьДвиженияПеречислениеВОСМС(Реквизиты, ТаблицаДвиженияВОСМС, Движения, Отказ);
	КонецЕсли;
	
	Если Реквизиты.ЕстьПеречислениеОтчисленийОСМС Тогда 
		ВидОперации = Перечисления.ВидыОперацийСОПеречислениеВФонды.ПеречислениеОтчисленийОСМС;
		СтруктураОтбора.ВидОперации = ВидОперации;
		СформироватьПроводкиПеречислениеСоциальногоСтрахования(Реквизиты, ТаблицаПеречислениеСО.Скопировать(СтруктураОтбора), ВидОперации, Движения, Отказ);
		ТаблицаДвиженияООСМС = ПодготовитьТаблицуДвиженияООСМС(Реквизиты, ТаблицаПеречислениеСО, Отказ); 
		ЗарегистрироватьДвиженияПеречислениеООСМС(Реквизиты, ТаблицаДвиженияООСМС, Движения, Отказ);
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьПроводкиПеречислениеСоциальногоСтрахования(Реквизиты, ТаблицаПеречислениеСО, ВидОперации, Движения, Отказ)
	
	// Корреспонденция счетов БУ и НУ
	
	Если ВидОперации = Перечисления.ВидыОперацийСОПеречислениеВФонды.ПеречислениеОбязательныхСоциальныхОтчислений Тогда
		ЭлементНалогиСборыОтчисления = Справочники.НалогиСборыОтчисления.ОбязательныеСоциальныеОтчисления;
		СчетДт = ЭлементНалогиСборыОтчисления.СчетУчетаРасчетовСКонтрагентомБУ;
		Если НЕ ЗначениеЗаполнено(СчетДт) Тогда
			СчетДт = ПланыСчетов.Типовой.ОбязательстваПоСоциальномуСтрахованию; 
		КонецЕсли;
		СчетДтНУ = ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьСчетУчетаНУСО(СчетДт, Реквизиты.Дата);
		ШаблонТекстаПроводки = НСтр("ru = 'СО за %1 г.'", ОбщегоНазначения.КодОсновногоЯзыка());
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийСОПеречислениеВФонды.ПеречислениеВзносовОСМС Тогда
		ЭлементНалогиСборыОтчисления = Справочники.НалогиСборыОтчисления.ВзносыОбязательноеСоциальноеМедицинскоеСтрахование;
		СчетДт = ЭлементНалогиСборыОтчисления.СчетУчетаРасчетовСКонтрагентомБУ;
		Если НЕ ЗначениеЗаполнено(СчетДт) Тогда
			СчетДт = ПланыСчетов.Типовой.ОбязательстваПоВзносамОСМС; 
		КонецЕсли;
		СчетДтНУ = ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьСчетУчетаНУВОСМС(СчетДт, Реквизиты.Дата);
		ШаблонТекстаПроводки = НСтр("ru = 'Взносы ОСМС за %1 г.'", ОбщегоНазначения.КодОсновногоЯзыка());
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийСОПеречислениеВФонды.ПеречислениеОтчисленийОСМС Тогда
		ЭлементНалогиСборыОтчисления = Справочники.НалогиСборыОтчисления.ОтчисленияОбязательноеСоциальноеМедицинскоеСтрахование;
		СчетДт = ЭлементНалогиСборыОтчисления.СчетУчетаРасчетовСКонтрагентомБУ;
		Если НЕ ЗначениеЗаполнено(СчетДт) Тогда
			СчетДт = ПланыСчетов.Типовой.ОбязательстваПоОтчислениямОСМС; 
		КонецЕсли;
		СчетДтНУ = ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьСчетУчетаНУООСМС(СчетДт, Реквизиты.Дата);
		ШаблонТекстаПроводки = НСтр("ru = 'Отчисления ОСМС за %1 г.'", ОбщегоНазначения.КодОсновногоЯзыка());
	КонецЕсли;
	
	ВедениеУчетаПоСотрудникам = Реквизиты.ВедениеУчетаПоСотрудникам;
	
	ТаблицаФормированияПроводок = ТаблицаПеречислениеСО;
		
	// если учет по сотрудникам не ведется, необходимо сгруппировать данные для отображения в БУ по виду платежа и месяцу исчисления
	Если НЕ ВедениеУчетаПоСотрудникам Тогда
		ТаблицаФормированияПроводок.Свернуть("ВидПлатежа, МесяцИсчисления, СчетКт, СчетКтНУ, СчетКтНУПоУмолчанию, ИмяСубконтоКт1, ИмяСубконтоКт2, СубконтоКт1, СубконтоКт2", "Сумма");  
	КонецЕсли;
	
	Для Каждого СтрокаДанных Из ТаблицаФормированияПроводок Цикл
		
		ТекстПроводки = СтрШаблон(ШаблонТекстаПроводки, Формат(СтрокаДанных.МесяцИсчисления, "ДФ='ММММ гггг'"));
		
		// Проведение по регистру бухгалтерии	
		Проводка = Движения.Типовой.Добавить();
		
		//	Свойства
		Проводка.Период			= Реквизиты.Дата;
		
		// Измерения
		Проводка.Организация 	= Реквизиты.Организация;
		
		//Дт
		Проводка.СчетДт		 = СчетДт;        
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ВидыПлатежейВБюджетИФонды", СтрокаДанных.ВидПлатежа);
		Если ВедениеУчетаПоСотрудникам Тогда
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "РаботникиОрганизаций",  СтрокаДанных.ФизЛицоБУ);
		КонецЕсли;
		
		//Кт
		Проводка.СчетКт			= СтрокаДанных.СчетКт;
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, СтрокаДанных.ИмяСубконтоКт1, 	СтрокаДанных.СубконтоКт1);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, СтрокаДанных.ИмяСубконтоКт2, 	СтрокаДанных.СубконтоКт2);

		ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(Проводка, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);

		Если Проводка.СчетКт.Валютный Тогда
			Проводка.ВалютаКт 			= Реквизиты.ВалютаДокумента;
			Проводка.ВалютнаяСуммаКт 	= СтрокаДанных.Сумма;
		КонецЕсли;

		// Ресурсы
		Проводка.Сумма      = СтрокаДанных.Сумма;
		
		// Реквизиты
		Проводка.Содержание = ТекстПроводки;
			
		//Движения по регистру "Налоговый"
		Если Реквизиты.НеобходимостьОтраженияВНУ Тогда
			ПроводкаНУ = Движения.Налоговый.Добавить();				
			// Свойства
			ПроводкаНУ.Период			= Реквизиты.Дата; 				
			// Измерения
			ПроводкаНУ.Организация	= Реквизиты.Организация;
						
			ПроводкаНУ.СчетДт			= СчетДтНУ; 								
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "НалогиСборыОтчисления", ЭлементНалогиСборыОтчисления);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "ВидыПлатежейВБюджетИФонды", СтрокаДанных.ВидПлатежа);
			Если ВедениеУчетаПоСотрудникам Тогда
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "РаботникиОрганизаций", СтрокаДанных.ФизЛицоБУ);
			КонецЕсли;
									
			Если ЗначениеЗаполнено(СтрокаДанных.СчетКтНУ) Тогда
				ПроводкаНУ.СчетКт = СтрокаДанных.СчетКтНУ;
			Иначе 
				ПроводкаНУ.СчетКт = ПроцедурыБухгалтерскогоУчета.ЗаполнитьСчетНалоговогоУчетаПоУмолчанию(СтрокаДанных.СчетКт, Реквизиты.Дата, СтрокаДанных.СчетКтНУПоУмолчанию);			
			КонецЕсли;
			
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, СтрокаДанных.ИмяСубконтоКт1, СтрокаДанных.СубконтоКт1);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, СтрокаДанных.ИмяСубконтоКт2, СтрокаДанных.СубконтоКт2);
			
			ПроводкаНУ.Сумма			= СтрокаДанных.Сумма;
			
			// Реквизиты
			ПроводкаНУ.Содержание		= ТекстПроводки;
			
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(ПроводкаНУ, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);
			
			ПроцедурыНалоговогоУчета.ВидУчетаНУ(ПроводкаНУ,  Реквизиты.ВидУчетаНУ);
			
		КонецЕсли;

	КонецЦикла;
	
	Движения.Типовой.Записывать = Истина;
	
	Если Реквизиты.НеобходимостьОтраженияВНУ Тогда
		Движения.Налоговый.Записывать = Истина;
	КонецЕсли;

КонецПроцедуры

Функция ПодготовитьТаблицуДвиженияСО(Реквизиты, ТаблицаПеречислениеСО, Отказ)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДанныеСО", ТаблицаПеречислениеСО);
	Запрос.УстановитьПараметр("Организация", ОбщегоНазначенияБКВызовСервера.ГоловнаяОрганизацияДляУчетаЗарплаты(Реквизиты.Организация));   
	Запрос.УстановитьПараметр("ОбособленноеПодразделение", Реквизиты.Организация);
	Запрос.УстановитьПараметр("Дата", Реквизиты.Дата);
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДанныеСО.ФизЛицо,
		|	ДанныеСО.МесяцИсчисления,
		|	ДанныеСО.ВидПлатежа,
		|	ДанныеСО.СпособРасчетаСуммКПеречислению,
		|	ДанныеСО.Сумма
		|ПОМЕСТИТЬ ДанныеСО
		|ИЗ
		|	&ДанныеСО КАК ДанныеСО
		|ГДЕ
		|	ДанныеСО.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСОПеречислениеВФонды.ПеречислениеОбязательныхСоциальныхОтчислений)";
		
	Запрос.Выполнить();
	
	Если Реквизиты.ПоддержкаРаботыСоСтруктурнымиПодразделениями Или Реквизиты.РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
		
		ПериодыФизЛицаТекст = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДанныеСО.ФизЛицо,
		|	ДанныеСО.МесяцИсчисления КАК Период
		|ПОМЕСТИТЬ ВТ_ПериодыСотрудников
		|ИЗ
		|	ДанныеСО КАК ДанныеСО
		|";
		
		Запрос.Текст = ПериодыФизЛицаТекст + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета()
					 + СформироватьТекстЗапросаСтруктурныеЕдиницы("ВТ_ПериодыСотрудников", Истина);
		Запрос.Выполнить();
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапрос.МесяцИсчисления,
	|	ВложенныйЗапрос.ВидПлатежа,
	|	ВложенныйЗапрос.ФизЛицо,
	|	ВложенныйЗапрос.Сумма,
	|	ЕСТЬNULL(СОРасчетыСФондамиОстатки.МесяцНалоговогоПериода, ВложенныйЗапрос.МесяцИсчисления) КАК МесяцНалоговогоПериода,
	|	ЕСТЬNULL(СОРасчетыСФондамиОстатки.ОтчислениеОстаток, 0) КАК ОтчислениеОстаток";
	
	Если Реквизиты.ПоддержкаРаботыСоСтруктурнымиПодразделениями Или Реквизиты.РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
		Запрос.Текст = Запрос.Текст + ",
		|	ВЫБОР
		|		КОГДА НЕ(СОРасчетыСФондамиОстатки.СтруктурнаяЕдиница ЕСТЬ NULL)
		|			ТОГДА СОРасчетыСФондамиОстатки.СтруктурнаяЕдиница
		|		КОГДА НЕ(МестоРаботы.СтруктурнаяЕдиница ЕСТЬ NULL)
		|			ТОГДА МестоРаботы.СтруктурнаяЕдиница
		|		ИНАЧЕ &ОбособленноеПодразделение
		|	КОНЕЦ КАК СтруктурнаяЕдиница,
		|	ВЫБОР
		|		КОГДА НЕ(МестоРаботы.СтруктурнаяЕдиница ЕСТЬ NULL)
		|			ТОГДА МестоРаботы.СтруктурнаяЕдиница
		|		ИНАЧЕ &ОбособленноеПодразделение
		|	КОНЕЦ КАК СтруктурнаяЕдиницаПоМестуРаботы,
		|	СОРасчетыСФондамиОстатки.Налогоплательщик,
		|	ВЫБОР 
		|		КОГДА НЕ (СОРасчетыСФондамиОстатки.ПодразделениеОрганизации ЕСТЬ NULL)
		|			ТОГДА СОРасчетыСФондамиОстатки.ПодразделениеОрганизации
		|		КОГДА НЕ (МестоРаботы.ПодразделениеОрганизации ЕСТЬ NULL)
		|			ТОГДА МестоРаботы.ПодразделениеОрганизации
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
		|	КОНЕЦ КАК ПодразделениеОрганизации,
		|	ВЫБОР 
		|		КОГДА НЕ (МестоРаботы.ПодразделениеОрганизации ЕСТЬ NULL)
		|			ТОГДА МестоРаботы.ПодразделениеОрганизации
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
		|	КОНЕЦ КАК ПодразделениеОрганизацииПоМестуРаботы";
	Иначе
		Запрос.Текст = Запрос.Текст + ",
		|	&ОбособленноеПодразделение КАК СтруктурнаяЕдиница,
		|	&ОбособленноеПодразделение КАК СтруктурнаяЕдиницаПоМестуРаботы,
		|	&ОбособленноеПодразделение КАК Налогоплательщик,
		|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) КАК ПодразделениеОрганизации,
		|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) КАК ПодразделениеОрганизацииПоМестуРаботы";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|ИЗ
	|	ДанныеСО КАК ВложенныйЗапрос
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СОРасчетыСФондами.Остатки(
	|			&Дата,
	|			Организация = &ОбособленноеПодразделение
	|			И ФизЛицо В (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					ВЫРАЗИТЬ(ФизЛицо КАК Справочник.ФизическиеЛица)
	|				ИЗ
	|					ДанныеСО КАК Док)) КАК СОРасчетыСФондамиОстатки
	|		ПО ВложенныйЗапрос.ФизЛицо = СОРасчетыСФондамиОстатки.ФизЛицо
	|			И (ВЫБОР 
	|					КОГДА ВложенныйЗапрос.СпособРасчетаСуммКПеречислению = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаСуммКПеречислениюСО.ПоЗадолженностиЗаМесяц)
	|						ТОГДА ВложенныйЗапрос.МесяцИсчисления = СОРасчетыСФондамиОстатки.МесяцНалоговогоПериода
	|					ИНАЧЕ ВложенныйЗапрос.МесяцИсчисления >= СОРасчетыСФондамиОстатки.МесяцНалоговогоПериода
	|				КОНЕЦ)
	|			И ВложенныйЗапрос.ВидПлатежа = СОРасчетыСФондамиОстатки.ВидПлатежа";
	
	Если Реквизиты.ПоддержкаРаботыСоСтруктурнымиПодразделениями Или Реквизиты.РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
		
		Запрос.Текст = Запрос.Текст + "
		|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_МестоРаботы КАК МестоРаботы
		|		ПО ВложенныйЗапрос.ФизЛицо = МестоРаботы.ФизЛицо
		|			И ВложенныйЗапрос.МесяцИсчисления = МестоРаботы.Период";
	
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|УПОРЯДОЧИТЬ ПО
	|	ВложенныйЗапрос.ФизЛицо,
	|	ВложенныйЗапрос.ВидПлатежа,
	|	ВложенныйЗапрос.МесяцИсчисления,
	|	ЕСТЬNULL(СОРасчетыСФондамиОстатки.МесяцНалоговогоПериода, ВложенныйЗапрос.МесяцИсчисления)
	|";

	ТаблицаДвижений = Запрос.Выполнить().Выбрать();
	
	Возврат ТаблицаДвижений;	
	
КонецФункции

Процедура ЗарегистрироватьДвиженияПеречислениеСО(Реквизиты, Выборка, Движения, Отказ)
	
	Пока Выборка.СледующийПоЗначениюПоля("ФизЛицо") Цикл
	
		Пока Выборка.СледующийПоЗначениюПоля("ВидПлатежа") Цикл
		
			Пока Выборка.СледующийПоЗначениюПоля("МесяцИсчисления") Цикл
			
				ОстатокКСписанию 		= Выборка.Сумма;
				ТекущееФизЛицо 			= Выборка.ФизЛицо;
				ТекущийВидПлатежа		= Выборка.ВидПлатежа;
				ТекущийМесяцИсчисления	= Выборка.МесяцИсчисления;
				СтруктурнаяЕдиницаПоМестуРаботы = Выборка.СтруктурнаяЕдиницаПоМестуРаботы;
				ПодразделениеОрганизацииПоМестуРаботы = Выборка.ПодразделениеОрганизацииПоМестуРаботы;
				
				Пока Выборка.Следующий()
				   И Выборка.ФизЛицо = ТекущееФизЛицо
				   И Выборка.ВидПлатежа = ТекущийВидПлатежа
				   И Выборка.МесяцИсчисления = ТекущийМесяцИсчисления
				   И Выборка.Налогоплательщик <> NULL Цикл
				
					СуммаКСписанию 		= Мин(ОстатокКСписанию, Выборка.ОтчислениеОстаток);
					ОстатокКСписанию 	= ОстатокКСписанию - СуммаКСписанию;
					
					Если СуммаКСписанию = 0 Тогда
						Прервать;
					КонецЕсли;
					
					Движение = Движения.СОРасчетыСФондами.Добавить();
					
					// Свойства
					Движение.Период			= Реквизиты.Дата;
					Движение.ВидДвижения	= ВидДвиженияНакопления.Расход;					
					// Измерения
					Движение.ФизЛицо		= Выборка.ФизЛицо;
					Если Реквизиты.ПоддержкаРаботыСоСтруктурнымиПодразделениями Или Реквизиты.РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
						Движение.СтруктурнаяЕдиница	= Выборка.СтруктурнаяЕдиница;
						Движение.Налогоплательщик	= Выборка.Налогоплательщик;
					Иначе
						Движение.СтруктурнаяЕдиница	= Реквизиты.Организация;
						Движение.Налогоплательщик	= Реквизиты.Организация;
					КонецЕсли;
					Движение.МесяцНалоговогоПериода	= Выборка.МесяцНалоговогоПериода;
					Движение.ВидПлатежа				= Выборка.ВидПлатежа;
					Движение.Организация			= Реквизиты.Организация;					
					// Остатки по подразделению закрываем всегда чтобы не было зависания остатков
					Движение.ПодразделениеОрганизации = Выборка.ПодразделениеОрганизации;
					// Ресурсы
					Движение.Отчисление				= СуммаКСписанию;					
					// Реквизиты
					Движение.ВидСтроки				= Перечисления.РасчетыСБюджетомФондамиВидСтроки.Перечисление;				
				КонецЦикла;
			
				Если ОстатокКСписанию <> 0 Тогда 
				    // остаток относим на структурную единицу и налогоплательщика по месту работы

					Движение = Движения.СОРасчетыСФондами.Добавить();					
					// Свойства
					Движение.Период			= Реквизиты.Дата;
					Движение.ВидДвижения	= ВидДвиженияНакопления.Расход;					
					// Измерения
					Движение.ФизЛицо		= ТекущееФизЛицо;
					Если Реквизиты.ПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
						Движение.СтруктурнаяЕдиница	= СтруктурнаяЕдиницаПоМестуРаботы;
						Движение.Налогоплательщик	= ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(СтруктурнаяЕдиницаПоМестуРаботы, 
																						Реквизиты.Организация, 
																						Перечисления.РазделыНалоговогоУчета.НалогиСЗаработнойПлаты);
					Иначе
						Движение.СтруктурнаяЕдиница	= Реквизиты.Организация;
						Движение.Налогоплательщик	= Реквизиты.Организация;
					КонецЕсли;
					Движение.МесяцНалоговогоПериода	= ТекущийМесяцИсчисления;
					Движение.ВидПлатежа				= ТекущийВидПлатежа;
					Движение.Организация			= Реквизиты.Организация;
					
					// Нераспределенный остаток относим на подразделение места работы только если ведется раздельный учет налогов по подразделениям организаций
					Если Реквизиты.РаспределятьНалогиПоПодразделениямОрганизаций Тогда 
						Движение.ПодразделениеОрганизации = ПодразделениеОрганизацииПоМестуРаботы;
					КонецЕсли;
										
					// Ресурсы
					Движение.Отчисление				= ОстатокКСписанию;
					
					// Реквизиты
					Движение.ВидСтроки				= Перечисления.РасчетыСБюджетомФондамиВидСтроки.Перечисление;
				    
				КонецЕсли;
				
			КонецЦикла; 		
		КонецЦикла; 	
	КонецЦикла; 

	Движения.СОРасчетыСФондами.Записывать = Истина;

КонецПроцедуры

Функция ПодготовитьТаблицуДвиженияВОСМС(Реквизиты, ТаблицаПеречислениеВОСМС, Отказ) 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДанныеВОСМС", ТаблицаПеречислениеВОСМС);
	Запрос.УстановитьПараметр("Организация", ОбщегоНазначенияБКВызовСервера.ГоловнаяОрганизацияДляУчетаЗарплаты(Реквизиты.Организация));   
	Запрос.УстановитьПараметр("ОбособленноеПодразделение", Реквизиты.Организация);
	Запрос.УстановитьПараметр("Дата", Реквизиты.Дата);
	
	// Список видов платежей, по которым формируются движения по регистру ВОСМСПодлежитПеречислениюВФонды
	СписокВидовПлатежей = Новый СписокЗначений;
	СписокВидовПлатежей.Добавить(Перечисления.ВидыПлатежейВБюджетИФонды.Налог);
	СписокВидовПлатежей.Добавить(Перечисления.ВидыПлатежейВБюджетИФонды.НалогАкт);
	СписокВидовПлатежей.Добавить(Перечисления.ВидыПлатежейВБюджетИФонды.НалогСам);
	Запрос.УстановитьПараметр("СписокВидовПлатежей", СписокВидовПлатежей);

	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;

	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДанныеВОСМС.ФизЛицо,
		|	ДанныеВОСМС.МесяцИсчисления,
		|	ДанныеВОСМС.ВидПлатежа,
		|	ДанныеВОСМС.СпособРасчетаСуммКПеречислению,
		|	ДанныеВОСМС.Сумма
		|ПОМЕСТИТЬ ДанныеВОСМС
		|ИЗ
		|	&ДанныеВОСМС КАК ДанныеВОСМС
		|ГДЕ
		|	ДанныеВОСМС.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСОПеречислениеВФонды.ПеречислениеВзносовОСМС)
		|";
		
	Запрос.Выполнить();
	
	
	Если Реквизиты.ПоддержкаРаботыСоСтруктурнымиПодразделениями Или Реквизиты.РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
		
		ПериодыФизЛицаТекст = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДанныеВОСМС.ФизЛицо,
		|	ДанныеВОСМС.МесяцИсчисления КАК Период
		|ПОМЕСТИТЬ ВТ_ПериодыСотрудников
		|ИЗ
		|	ДанныеВОСМС КАК ДанныеВОСМС
		|";
		
		Запрос.Текст = ПериодыФизЛицаТекст + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета()
					 + СформироватьТекстЗапросаСтруктурныеЕдиницы("ВТ_ПериодыСотрудников", Истина);
		Запрос.Выполнить();
	КонецЕсли;

	
	Запрос.Текст =  
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапрос.МесяцИсчисления КАК МесяцИсчисления,
	|	ВложенныйЗапрос.ВидПлатежа КАК ВидПлатежа,
	|	ВЫБОР
	|		КОГДА ВложенныйЗапрос.ВидПлатежа В (&СписокВидовПлатежей)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПлатежЯвляетсяНалогом,
	|	ВложенныйЗапрос.ФизЛицо КАК ФизЛицо,
	|	ВложенныйЗапрос.Сумма КАК Сумма,
	|	ЕСТЬNULL(ВОСМСРасчетыСФондамиОстатки.ВзносОстаток, 0) КАК РасчетыСФондамиОстаток,
	|	ВЫБОР
	|		КОГДА ВложенныйЗапрос.ВидПлатежа В (&СписокВидовПлатежей)
	|			ТОГДА ВОСМСПодлежитПеречислениюВФондыОстатки.МесяцВыплатыДоходов
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК МесяцВыплатыДоходов,
	|	ЕСТЬNULL(ВОСМСРасчетыСФондамиОстатки.МесяцНалоговогоПериода, ЕСТЬNULL(ВОСМСПодлежитПеречислениюВФондыОстатки.МесяцНалоговогоПериода, ВложенныйЗапрос.МесяцИсчисления)) КАК МесяцНалоговогоПериода,
	|	ВЫБОР
	|		КОГДА ВложенныйЗапрос.ВидПлатежа В (&СписокВидовПлатежей)
	|			ТОГДА ЕСТЬNULL(ВОСМСПодлежитПеречислениюВФондыОстатки.ВзносОстаток, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПодлежитПеречислениюОстаток";
	
	Если Реквизиты.ПоддержкаРаботыСоСтруктурнымиПодразделениями Или Реквизиты.РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
		Запрос.Текст = Запрос.Текст + ",
		|	ВЫБОР
		|		КОГДА НЕ (ВОСМСПодлежитПеречислениюВФондыОстатки.СтруктурнаяЕдиница ЕСТЬ NULL)
		|			ТОГДА ВОСМСПодлежитПеречислениюВФондыОстатки.СтруктурнаяЕдиница		
		|		КОГДА НЕ (ВОСМСРасчетыСФондамиОстатки.СтруктурнаяЕдиница ЕСТЬ NULL)
		|			ТОГДА ВОСМСРасчетыСФондамиОстатки.СтруктурнаяЕдиница                  		
		|		КОГДА НЕ (МестоРаботы.СтруктурнаяЕдиница ЕСТЬ NULL)
		|			ТОГДА МестоРаботы.СтруктурнаяЕдиница
		|		ИНАЧЕ &ОбособленноеПодразделение
		|	КОНЕЦ КАК СтруктурнаяЕдиница,
		|	ВЫБОР
		|		КОГДА НЕ (МестоРаботы.СтруктурнаяЕдиница ЕСТЬ NULL)
		|			ТОГДА МестоРаботы.СтруктурнаяЕдиница
		|		ИНАЧЕ &ОбособленноеПодразделение
		|	КОНЕЦ КАК СтруктурнаяЕдиницаПоМестуРаботы,
		|	ВЫБОР
		|		КОГДА НЕ (ВОСМСРасчетыСФондамиОстатки.Налогоплательщик ЕСТЬ NULL)
		|			ТОГДА ВОСМСРасчетыСФондамиОстатки.Налогоплательщик
		|		ИНАЧЕ ВОСМСПодлежитПеречислениюВФондыОстатки.Налогоплательщик
		|	КОНЕЦ КАК Налогоплательщик,
		|	ВЫБОР 
		|		КОГДА НЕ (ВОСМСПодлежитПеречислениюВФондыОстатки.ПодразделениеОрганизации ЕСТЬ NULL)
		|			ТОГДА ВОСМСПодлежитПеречислениюВФондыОстатки.ПодразделениеОрганизации
		|		КОГДА НЕ (ВОСМСРасчетыСФондамиОстатки.ПодразделениеОрганизации ЕСТЬ NULL)
		|			ТОГДА ВОСМСРасчетыСФондамиОстатки.ПодразделениеОрганизации
		|		КОГДА НЕ (МестоРаботы.ПодразделениеОрганизации ЕСТЬ NULL)
		|			ТОГДА МестоРаботы.ПодразделениеОрганизации
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
		|	КОНЕЦ КАК ПодразделениеОрганизации,
		|	ВЫБОР 
		|		КОГДА НЕ (МестоРаботы.ПодразделениеОрганизации ЕСТЬ NULL)
		|			ТОГДА МестоРаботы.ПодразделениеОрганизации
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
		|	КОНЕЦ КАК ПодразделениеОрганизацииПоМестуРаботы
		|";
	Иначе
		Запрос.Текст = Запрос.Текст + ",
		|	&ОбособленноеПодразделение КАК СтруктурнаяЕдиница,
		|	&ОбособленноеПодразделение КАК СтруктурнаяЕдиницаПоМестуРаботы,
		|	&ОбособленноеПодразделение КАК Налогоплательщик,
		|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) КАК ПодразделениеОрганизации,
		|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) КАК ПодразделениеОрганизацииПоМестуРаботы
		|";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|ИЗ
	|	ДанныеВОСМС КАК ВложенныйЗапрос
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВОСМСРасчетыСФондами.Остатки(
	|			&Дата,
	|			Организация = &ОбособленноеПодразделение
	|			И ФизЛицо В
	|		        (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					ФизЛицо
	|				ИЗ
	|					ДанныеВОСМС КАК Док)) КАК ВОСМСРасчетыСФондамиОстатки
	|		ПО ВложенныйЗапрос.ФизЛицо = ВОСМСРасчетыСФондамиОстатки.ФизЛицо
	|			И (ВЫБОР 
	|					КОГДА ВложенныйЗапрос.СпособРасчетаСуммКПеречислению = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаСуммКПеречислениюСО.ПоЗадолженностиЗаМесяц) 
	|							ИЛИ ВложенныйЗапрос.СпособРасчетаСуммКПеречислению = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаСуммКПеречислениюСО.ПоЗадолженностиЗаМесяцПоНУ)
	|						ТОГДА ВложенныйЗапрос.МесяцИсчисления = НАЧАЛОПЕРИОДА(ВОСМСРасчетыСФондамиОстатки.МесяцНалоговогоПериода, МЕСЯЦ)
	|					ИНАЧЕ ВложенныйЗапрос.МесяцИсчисления >= НАЧАЛОПЕРИОДА(ВОСМСРасчетыСФондамиОстатки.МесяцНалоговогоПериода, МЕСЯЦ)
	|				КОНЕЦ)
	|			И ВложенныйЗапрос.ВидПлатежа = ВОСМСРасчетыСФондамиОстатки.ВидПлатежа
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВОСМСПодлежитПеречислениюВФонды.Остатки(
	|			&Дата,
	|			Организация = &ОбособленноеПодразделение
	|		    И ФизЛицо В
	|		        (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					ФизЛицо
	|				ИЗ
	|					ДанныеВОСМС КАК Док)) КАК ВОСМСПодлежитПеречислениюВФондыОстатки
	|		ПО ВложенныйЗапрос.ФизЛицо = ВОСМСПодлежитПеречислениюВФондыОстатки.ФизЛицо
	|			И (ВЫБОР 
	|					КОГДА ВложенныйЗапрос.СпособРасчетаСуммКПеречислению = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаСуммКПеречислениюСО.ПоЗадолженностиЗаМесяц) 
	|							ИЛИ ВложенныйЗапрос.СпособРасчетаСуммКПеречислению = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаСуммКПеречислениюСО.ПоЗадолженностиЗаМесяцПоНУ)
	|						ТОГДА ВложенныйЗапрос.МесяцИсчисления = НАЧАЛОПЕРИОДА(ВОСМСПодлежитПеречислениюВФондыОстатки.МесяцНалоговогоПериода, МЕСЯЦ)
	|					ИНАЧЕ ВложенныйЗапрос.МесяцИсчисления >= НАЧАЛОПЕРИОДА(ВОСМСПодлежитПеречислениюВФондыОстатки.МесяцНалоговогоПериода, МЕСЯЦ)
	|				КОНЕЦ)
	|			И ВЫБОР
	|				КОГДА НЕ(ВОСМСРасчетыСФондамиОстатки.СтруктурнаяЕдиница ЕСТЬ NULL)
	|					ТОГДА ВОСМСРасчетыСФондамиОстатки.СтруктурнаяЕдиница = ВОСМСПодлежитПеречислениюВФондыОстатки.СтруктурнаяЕдиница
	|							И ВОСМСРасчетыСФондамиОстатки.Налогоплательщик = ВОСМСПодлежитПеречислениюВФондыОстатки.Налогоплательщик
	|							И ВОСМСРасчетыСФондамиОстатки.МесяцНалоговогоПериода = ВОСМСПодлежитПеречислениюВФондыОстатки.МесяцНалоговогоПериода
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ
	|";
	
	Если Реквизиты.ПоддержкаРаботыСоСтруктурнымиПодразделениями Или Реквизиты.РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
		Запрос.Текст = Запрос.Текст + "
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_МестоРаботы КАК МестоРаботы
		|		ПО ВложенныйЗапрос.ФизЛицо = МестоРаботы.ФизЛицо
		|			И ВложенныйЗапрос.МесяцИсчисления = МестоРаботы.Период";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|ОБЪЕДИНИТЬ // Выводим только те строки, по которым нет остатков в РН ""ВОСМС расчеты с фондами"", но есть остатки в РН ""ВОСМС подлежит перечислению в фонды""
	|
	|ВЫБРАТЬ 
	|	ВложенныйЗапрос.МесяцИсчисления КАК МесяцИсчисления,
	|	ВложенныйЗапрос.ВидПлатежа КАК ВидПлатежа,
	|	ВЫБОР
	|		КОГДА ВложенныйЗапрос.ВидПлатежа В (&СписокВидовПлатежей)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПлатежЯвляетсяНалогом,
	|	ВложенныйЗапрос.ФизЛицо КАК ФизЛицо,
	|	ВложенныйЗапрос.Сумма КАК Сумма,
	|	ЕСТЬNULL(ВОСМСРасчетыСФондамиОстатки.ВзносОстаток, 0) КАК РасчетыСФондамиОстаток,
	|	ВЫБОР
	|		КОГДА ВложенныйЗапрос.ВидПлатежа В (&СписокВидовПлатежей)
	|			ТОГДА ВОСМСПодлежитПеречислениюВФондыОстатки.МесяцВыплатыДоходов
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК МесяцВыплатыДоходов,
	|	ЕСТЬNULL(ВОСМСПодлежитПеречислениюВФондыОстатки.МесяцНалоговогоПериода, ЕСТЬNULL(ВОСМСРасчетыСФондамиОстатки.МесяцНалоговогоПериода, ВложенныйЗапрос.МесяцИсчисления)) КАК МесяцНалоговогоПериода,
	|	ВЫБОР
	|		КОГДА ВложенныйЗапрос.ВидПлатежа В (&СписокВидовПлатежей)
	|			ТОГДА ЕСТЬNULL(ВОСМСПодлежитПеречислениюВФондыОстатки.ВзносОстаток, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПодлежитПеречислениюОстаток";
	
	Если Реквизиты.ПоддержкаРаботыСоСтруктурнымиПодразделениями Или Реквизиты.РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
		Запрос.Текст = Запрос.Текст + ",
		|	ВЫБОР
		|		КОГДА НЕ (ВОСМСПодлежитПеречислениюВФондыОстатки.СтруктурнаяЕдиница ЕСТЬ NULL)
		|			ТОГДА ВОСМСПодлежитПеречислениюВФондыОстатки.СтруктурнаяЕдиница		
		|		КОГДА НЕ (ВОСМСРасчетыСФондамиОстатки.СтруктурнаяЕдиница ЕСТЬ NULL)
		|			ТОГДА ВОСМСРасчетыСФондамиОстатки.СтруктурнаяЕдиница                  		
		|		КОГДА НЕ (МестоРаботы.СтруктурнаяЕдиница ЕСТЬ NULL)
		|			ТОГДА МестоРаботы.СтруктурнаяЕдиница
		|		ИНАЧЕ &ОбособленноеПодразделение
		|	КОНЕЦ КАК СтруктурнаяЕдиница,
		|	ВЫБОР
		|		КОГДА НЕ (МестоРаботы.СтруктурнаяЕдиница ЕСТЬ NULL)
		|			ТОГДА МестоРаботы.СтруктурнаяЕдиница
		|		ИНАЧЕ &ОбособленноеПодразделение
		|	КОНЕЦ КАК СтруктурнаяЕдиницаПоМестуРаботы,
		|	ВЫБОР
		|		КОГДА НЕ (ВОСМСРасчетыСФондамиОстатки.Налогоплательщик ЕСТЬ NULL)
		|			ТОГДА ВОСМСРасчетыСФондамиОстатки.Налогоплательщик
		|		ИНАЧЕ ВОСМСПодлежитПеречислениюВФондыОстатки.Налогоплательщик
		|	КОНЕЦ КАК Налогоплательщик,
		|	ВЫБОР 
		|		КОГДА НЕ (ВОСМСПодлежитПеречислениюВФондыОстатки.ПодразделениеОрганизации ЕСТЬ NULL)
		|			ТОГДА ВОСМСПодлежитПеречислениюВФондыОстатки.ПодразделениеОрганизации
		|		КОГДА НЕ (ВОСМСРасчетыСФондамиОстатки.ПодразделениеОрганизации ЕСТЬ NULL)
		|			ТОГДА ВОСМСРасчетыСФондамиОстатки.ПодразделениеОрганизации           		
		|		КОГДА НЕ (МестоРаботы.ПодразделениеОрганизации ЕСТЬ NULL)
		|			ТОГДА МестоРаботы.ПодразделениеОрганизации
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
		|	КОНЕЦ КАК ПодразделениеОрганизации,
		|	ВЫБОР 
		|		КОГДА НЕ (МестоРаботы.ПодразделениеОрганизации ЕСТЬ NULL)
		|			ТОГДА МестоРаботы.ПодразделениеОрганизации
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
		|	КОНЕЦ КАК ПодразделениеОрганизацииПоМестуРаботы
		|";
	Иначе
		Запрос.Текст = Запрос.Текст + ",
		|	&ОбособленноеПодразделение КАК СтруктурнаяЕдиница,
		|	&ОбособленноеПодразделение КАК СтруктурнаяЕдиницаПоМестуРаботы,
		|	&ОбособленноеПодразделение КАК Налогоплательщик,
		|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) КАК ПодразделениеОрганизации,
		|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) КАК ПодразделениеОрганизацииПоМестуРаботы 
		|";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|ИЗ
	|	ДанныеВОСМС КАК ВложенныйЗапрос
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВОСМСПодлежитПеречислениюВФонды.Остатки(
	|			&Дата,
	|			Организация = &ОбособленноеПодразделение
	|		    И ФизЛицо В
	|		        (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					ФизЛицо
	|				ИЗ
	|					ДанныеВОСМС КАК Док)) КАК ВОСМСПодлежитПеречислениюВФондыОстатки
	|		ПО ВложенныйЗапрос.ФизЛицо = ВОСМСПодлежитПеречислениюВФондыОстатки.ФизЛицо
	|			И (ВЫБОР 
	|					КОГДА ВложенныйЗапрос.СпособРасчетаСуммКПеречислению = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаСуммКПеречислениюСО.ПоЗадолженностиЗаМесяц) 
	|							ИЛИ ВложенныйЗапрос.СпособРасчетаСуммКПеречислению = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаСуммКПеречислениюСО.ПоЗадолженностиЗаМесяцПоНУ)
	|						ТОГДА ВложенныйЗапрос.МесяцИсчисления = НАЧАЛОПЕРИОДА(ВОСМСПодлежитПеречислениюВФондыОстатки.МесяцНалоговогоПериода, МЕСЯЦ)
	|					ИНАЧЕ ВложенныйЗапрос.МесяцИсчисления >= НАЧАЛОПЕРИОДА(ВОСМСПодлежитПеречислениюВФондыОстатки.МесяцНалоговогоПериода, МЕСЯЦ)
	|				КОНЕЦ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВОСМСРасчетыСФондами.Остатки(
	|			&Дата,
	|			Организация = &ОбособленноеПодразделение
	|			И ФизЛицо В
	|		        (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					ФизЛицо
	|				ИЗ
	|					ДанныеВОСМС КАК Док)) КАК ВОСМСРасчетыСФондамиОстатки
	|		ПО ВложенныйЗапрос.ФизЛицо = ВОСМСРасчетыСФондамиОстатки.ФизЛицо
	|			И (ВЫБОР 
	|					КОГДА ВложенныйЗапрос.СпособРасчетаСуммКПеречислению = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаСуммКПеречислениюСО.ПоЗадолженностиЗаМесяц) 
	|							ИЛИ ВложенныйЗапрос.СпособРасчетаСуммКПеречислению = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаСуммКПеречислениюСО.ПоЗадолженностиЗаМесяцПоНУ)
	|						ТОГДА ВложенныйЗапрос.МесяцИсчисления = НАЧАЛОПЕРИОДА(ВОСМСРасчетыСФондамиОстатки.МесяцНалоговогоПериода, МЕСЯЦ)
	|					ИНАЧЕ ВложенныйЗапрос.МесяцИсчисления >= НАЧАЛОПЕРИОДА(ВОСМСРасчетыСФондамиОстатки.МесяцНалоговогоПериода, МЕСЯЦ)
	|				КОНЕЦ)
	|			И ВЫБОР
	|				КОГДА НЕ(ВОСМСПодлежитПеречислениюВФондыОстатки.СтруктурнаяЕдиница ЕСТЬ NULL)
	|					ТОГДА ВОСМСРасчетыСФондамиОстатки.СтруктурнаяЕдиница = ВОСМСПодлежитПеречислениюВФондыОстатки.СтруктурнаяЕдиница
	|							И ВОСМСРасчетыСФондамиОстатки.Налогоплательщик = ВОСМСПодлежитПеречислениюВФондыОстатки.Налогоплательщик
	|							И ВОСМСРасчетыСФондамиОстатки.МесяцНалоговогоПериода = ВОСМСПодлежитПеречислениюВФондыОстатки.МесяцНалоговогоПериода
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ
	|			И ВложенныйЗапрос.ВидПлатежа = ВОСМСРасчетыСФондамиОстатки.ВидПлатежа
	|
	|";
	
	Если Реквизиты.ПоддержкаРаботыСоСтруктурнымиПодразделениями Или Реквизиты.РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
		Запрос.Текст = Запрос.Текст + "
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_МестоРаботы КАК МестоРаботы
		|		ПО ВложенныйЗапрос.ФизЛицо = МестоРаботы.ФизЛицо
		|			И ВложенныйЗапрос.МесяцИсчисления = МестоРаботы.Период";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	ФизЛицо,	
	|	ВидПлатежа,	
	|	МесяцИсчисления,
	|	МесяцНалоговогоПериода,
	|	МесяцВыплатыДоходов
	|";
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

Процедура ЗарегистрироватьДвиженияПеречислениеВОСМС(Реквизиты, Выборка, Движения, Отказ)
	
	ТаблицаСписанныхОстатков = Новый ТаблицаЗначений;
	ТаблицаСписанныхОстатков.Колонки.Добавить("СтруктурнаяЕдиница");
	ТаблицаСписанныхОстатков.Колонки.Добавить("Налогоплательщик");
	ТаблицаСписанныхОстатков.Колонки.Добавить("УжеСписано");
	
	ТаблицаСписанныхОстатков.Индексы.Добавить("СтруктурнаяЕдиница, Налогоплательщик");
	
	СтруктураПоиска = Новый Структура();
	СтруктураПоиска.Вставить("СтруктурнаяЕдиница");
	СтруктураПоиска.Вставить("Налогоплательщик");
	
	Пока Выборка.СледующийПоЗначениюПоля("ФизЛицо") Цикл
	
		Пока Выборка.СледующийПоЗначениюПоля("ВидПлатежа") Цикл
		
			Пока Выборка.СледующийПоЗначениюПоля("МесяцИсчисления") Цикл
				
				ОстатокКСписанию 	= Выборка.Сумма;
				ТаблицаСписанныхОстатков.Очистить();
				
				Пока Выборка.СледующийПоЗначениюПоля("МесяцНалоговогоПериода") Цикл
		
					// по регистрам накопления
					Пока Выборка.СледующийПоЗначениюПоля("МесяцВыплатыДоходов") Цикл
						
						ПодлежитПеречислениюОстаток = Выборка.ПодлежитПеречислениюОстаток;				
						
						ТекущееФизЛицо 					= Выборка.ФизЛицо;
						ТекущийВидПлатежа				= Выборка.ВидПлатежа;
						ТекущийПлатежЯвляетсяНалогом 	= Выборка.ПлатежЯвляетсяНалогом;
						ТекущийМесяцИсчисления			= Выборка.МесяцИсчисления;
						ТекущийМесяцНалоговогоПериода	= Выборка.МесяцНалоговогоПериода;
						ТекущийМесяцВыплатыДоходов 		= Выборка.МесяцВыплатыДоходов;
						
						СтруктурнаяЕдиницаПоМестуРаботы = Выборка.СтруктурнаяЕдиницаПоМестуРаботы;
						ПодразделениеОрганизацииПоМестуРаботы = Выборка.ПодразделениеОрганизацииПоМестуРаботы;
						
						Пока Выборка.Следующий()
						   И Выборка.ФизЛицо = ТекущееФизЛицо
						   И Выборка.ВидПлатежа = ТекущийВидПлатежа
						   И Выборка.МесяцИсчисления = ТекущийМесяцИсчисления
						   И Выборка.МесяцНалоговогоПериода = ТекущийМесяцНалоговогоПериода
						   И Выборка.МесяцВыплатыДоходов = ТекущийМесяцВыплатыДоходов
						   И Выборка.Налогоплательщик <> NULL Цикл
								
							// найдем уже учтенные на предыдущих шагах цикла суммы по комбинации СтруктурнаяЕдиница+Налогоплательщик
							СтруктураПоиска.СтруктурнаяЕдиница 	= Выборка.СтруктурнаяЕдиница;
							СтруктураПоиска.Налогоплательщик	= Выборка.Налогоплательщик;
							НайденныеСтроки = ТаблицаСписанныхОстатков.НайтиСтроки(СтруктураПоиска);
							
							СуммаКСписанию = Выборка.ПодлежитПеречислениюОстаток;
							
							Если НайденныеСтроки.Количество() > 0 Тогда
								СуммаКСписанию = СуммаКСписанию - НайденныеСтроки[0].УжеСписано;
							КонецЕсли;
							
							Если Выборка.ПлатежЯвляетсяНалогом И ПодлежитПеречислениюОстаток <> 0 Тогда // берем с учетом сумм, подлежащих перечислению
								СуммаКСписанию = Мин(ОстатокКСписанию, ПодлежитПеречислениюОстаток, СуммаКСписанию);
								ПодлежитПеречислениюОстаток = ПодлежитПеречислениюОстаток - СуммаКСписанию;
							Иначе
								СуммаКСписанию = Мин(ОстатокКСписанию, СуммаКСписанию);
							КонецЕсли;
							ОстатокКСписанию = ОстатокКСписанию - СуммаКСписанию;
							
							// запомним сколько уже списали
							Если НайденныеСтроки.Количество() = 0 Тогда
								СтрокаТЗ = ТаблицаСписанныхОстатков.Добавить();
								ЗаполнитьЗначенияСвойств(СтрокаТЗ, Выборка);
								СтрокаТЗ.УжеСписано = СуммаКСписанию;
							Иначе
								НайденныеСтроки[0].УжеСписано = НайденныеСтроки[0].УжеСписано + СуммаКСписанию;
							КонецЕсли;
							
							/////////////////////////////////////////////////
							// ВОСМСРасчетыСФондами
							Движение = Движения.ВОСМСРасчетыСФондами.Добавить();
							
							// Свойства
							Движение.Период			= Реквизиты.Дата;
							Движение.ВидДвижения	= ВидДвиженияНакопления.Расход;
							
							Движение.ФизЛицо		= Выборка.ФизЛицо;
							Если Реквизиты.ПоддержкаРаботыСоСтруктурнымиПодразделениями Или Реквизиты.РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
								Движение.СтруктурнаяЕдиница	= Выборка.СтруктурнаяЕдиница;
								Движение.Налогоплательщик	= Выборка.Налогоплательщик;
							Иначе
								Движение.СтруктурнаяЕдиница	= Реквизиты.Организация;
								Движение.Налогоплательщик	= Реквизиты.Организация;
							КонецЕсли;
							Движение.МесяцНалоговогоПериода	= Выборка.МесяцНалоговогоПериода;
							Движение.ВидПлатежа				= Выборка.ВидПлатежа;
							Движение.Организация			= Реквизиты.Организация;
							// Остатки по подразделению закрываем всегда чтобы не было зависания остатков
							Движение.ПодразделениеОрганизации = Выборка.ПодразделениеОрганизации;

							// Ресурсы
							Движение.Взнос					= СуммаКСписанию;
							
							// Реквизиты
							Движение.ВидСтроки				= Перечисления.РасчетыСБюджетомФондамиВидСтроки.Перечисление;
							
							
							/////////////////////////////////////////////////
							// ВОСМСПодлежитПеречислениюВФонды
							Если Выборка.ПлатежЯвляетсяНалогом Тогда
							
								Движение = Движения.ВОСМСПодлежитПеречислениюВФонды.Добавить();
								
								// Свойства
								Движение.Период			= Реквизиты.Дата;
								Движение.ВидДвижения 	= ВидДвиженияНакопления.Расход;
								
								// Измерения
								Движение.ФизЛицо		= Выборка.ФизЛицо;
								Если Реквизиты.ПоддержкаРаботыСоСтруктурнымиПодразделениями Или Реквизиты.РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
									Движение.СтруктурнаяЕдиница	= Выборка.СтруктурнаяЕдиница;
									Движение.Налогоплательщик	= Выборка.Налогоплательщик;
								Иначе
									Движение.СтруктурнаяЕдиница	= Реквизиты.Организация;
									Движение.Налогоплательщик	= Реквизиты.Организация;
								КонецЕсли;
								Движение.МесяцНалоговогоПериода	= Выборка.МесяцНалоговогоПериода;
								Движение.МесяцВыплатыДоходов	= ?(Выборка.МесяцВыплатыДоходов <> NULL, Выборка.МесяцВыплатыДоходов, Выборка.МесяцИсчисления);
								Движение.Организация			= Реквизиты.Организация;
								// Остатки по подразделению закрываем всегда чтобы не было зависания остатков
								Движение.ПодразделениеОрганизации = Выборка.ПодразделениеОрганизации;
								
								// Ресурсы
								Движение.Взнос					= СуммаКСписанию;
								
								// Реквизиты
								Движение.ВидСтроки				= Перечисления.РасчетыСБюджетомФондамиВидСтроки.Перечисление;
							
							КонецЕсли;
							
						КонецЦикла;
					КонецЦикла;
				КонецЦикла; // Пока Выборка.СледующийПоЗначениюПоля("МесяцВыплатыДоходов") Цикл

				Если ОстатокКСписанию <> 0 Тогда
				
					/////////////////////////////////////////////////
					// ВОСМСРасчетыСФондами
					
					Движение = Движения.ВОСМСРасчетыСФондами.Добавить();
					
					// Свойства
					Движение.Период 		= Реквизиты.Дата;
					Движение.ВидДвижения 	= ВидДвиженияНакопления.Расход;
					
					// Измерения
					Движение.ФизЛицо		= ТекущееФизЛицо;
					Если Реквизиты.ПоддержкаРаботыСоСтруктурнымиПодразделениями Или Реквизиты.РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
						Налогоплательщик 			= ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(СтруктурнаяЕдиницаПоМестуРаботы,
																						Реквизиты.Организация,
																						Перечисления.РазделыНалоговогоУчета.НалогиСЗаработнойПлаты);
						
						Движение.СтруктурнаяЕдиница	= СтруктурнаяЕдиницаПоМестуРаботы;
						Движение.Налогоплательщик	= Налогоплательщик;
					Иначе
						Движение.СтруктурнаяЕдиница	= Реквизиты.Организация;
						Движение.Налогоплательщик	= Реквизиты.Организация;
					КонецЕсли;
					Движение.МесяцНалоговогоПериода	= ТекущийМесяцИсчисления;
					Движение.ВидПлатежа				= ТекущийВидПлатежа;
					Движение.Организация			= Реквизиты.Организация;
					// Нераспределенный остаток относим на подразделение места работы только если ведется раздельный учет налогов по подразделениям организаций
					Если Реквизиты.РаспределятьНалогиПоПодразделениямОрганизаций Тогда
						Движение.ПодразделениеОрганизации = ПодразделениеОрганизацииПоМестуРаботы;
					КонецЕсли;
					
					// Ресурсы
					Движение.Взнос					= ОстатокКСписанию;
					
					// Реквизиты
					Движение.ВидСтроки				= Перечисления.РасчетыСБюджетомФондамиВидСтроки.Перечисление;

					/////////////////////////////////////////////////
					// ВОСМСПодлежитПеречислениюВФонды
					Если ТекущийПлатежЯвляетсяНалогом Тогда
						Движение = Движения.ВОСМСПодлежитПеречислениюВФонды.Добавить();
						
						// Свойства
						Движение.Период			= Реквизиты.Дата;
						Движение.ВидДвижения	= ВидДвиженияНакопления.Расход;
						
						// Измерения 
						Движение.ФизЛицо		= ТекущееФизЛицо;
						Если Реквизиты.ПоддержкаРаботыСоСтруктурнымиПодразделениями Или Реквизиты.РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
							Движение.СтруктурнаяЕдиница	= СтруктурнаяЕдиницаПоМестуРаботы;
							Движение.Налогоплательщик	= Налогоплательщик;
						Иначе
							Движение.СтруктурнаяЕдиница	= Реквизиты.Организация;
							Движение.Налогоплательщик	= Реквизиты.Организация;
						КонецЕсли;
						Движение.МесяцНалоговогоПериода	= ТекущийМесяцИсчисления;
						Движение.МесяцВыплатыДоходов	= ТекущийМесяцИсчисления;
						Движение.Организация			= Реквизиты.Организация;
						// Нераспределенный остаток относим на подразделение места работы только если ведется раздельный учет налогов по подразделениям организаций
						Если Реквизиты.РаспределятьНалогиПоПодразделениямОрганизаций Тогда
							Движение.ПодразделениеОрганизации = ПодразделениеОрганизацииПоМестуРаботы;
						КонецЕсли;
						
						// Ресурсы
						Движение.Взнос					= ОстатокКСписанию;
						
						// Реквизиты
						Движение.ВидСтроки				= Перечисления.РасчетыСБюджетомФондамиВидСтроки.Перечисление;
						
					КонецЕсли;
				
				КонецЕсли;

			КонецЦикла; // Пока Выборка.СледующийПоЗначениюПоля("МесяцНачисления") Цикл
		
		КонецЦикла; // Пока Выборка.СледующийПоЗначениюПоля("ВидПлатежа") Цикл
	
	КонецЦикла; // Пока Выборка.СледующийПоЗначениюПоля("ФизЛицо") Цикл

	Движения.ВОСМСРасчетыСФондами.Записывать = Истина;
	Движения.ВОСМСПодлежитПеречислениюВФонды.Записывать = Истина;

КонецПроцедуры

Функция ПодготовитьТаблицуДвиженияООСМС(Реквизиты, ТаблицаПеречислениеООСМС, Отказ)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДанныеООСМС", ТаблицаПеречислениеООСМС);
	Запрос.УстановитьПараметр("Организация", ОбщегоНазначенияБКВызовСервера.ГоловнаяОрганизацияДляУчетаЗарплаты(Реквизиты.Организация));   
	Запрос.УстановитьПараметр("ОбособленноеПодразделение", Реквизиты.Организация);
	Запрос.УстановитьПараметр("Дата", Реквизиты.Дата);
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДанныеООСМС.ФизЛицо,
		|	ДанныеООСМС.МесяцИсчисления,
		|	ДанныеООСМС.ВидПлатежа,
		|	ДанныеООСМС.СпособРасчетаСуммКПеречислению,
		|	ДанныеООСМС.Сумма
		|ПОМЕСТИТЬ ДанныеООСМС
		|ИЗ
		|	&ДанныеООСМС КАК ДанныеООСМС
		|ГДЕ
		|	ДанныеООСМС.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСОПеречислениеВФонды.ПеречислениеОтчисленийОСМС)";
		
	Запрос.Выполнить();
	
	Если Реквизиты.ПоддержкаРаботыСоСтруктурнымиПодразделениями Или Реквизиты.РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
		
		ПериодыФизЛицаТекст = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДанныеООСМС.ФизЛицо,
		|	ДанныеООСМС.МесяцИсчисления КАК Период
		|ПОМЕСТИТЬ ВТ_ПериодыСотрудников
		|ИЗ
		|	ДанныеООСМС КАК ДанныеООСМС
		|";
		
		Запрос.Текст = ПериодыФизЛицаТекст + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета()
					 + СформироватьТекстЗапросаСтруктурныеЕдиницы("ВТ_ПериодыСотрудников", Истина);
		Запрос.Выполнить();
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапрос.МесяцИсчисления,
	|	ВложенныйЗапрос.ВидПлатежа,
	|	ВложенныйЗапрос.ФизЛицо,
	|	ВложенныйЗапрос.Сумма,
	|	ЕСТЬNULL(ООСМСРасчетыСФондамиОстатки.МесяцНалоговогоПериода, ВложенныйЗапрос.МесяцИсчисления) КАК МесяцНалоговогоПериода,
	|	ЕСТЬNULL(ООСМСРасчетыСФондамиОстатки.ОтчислениеОстаток, 0) КАК ОтчислениеОстаток";
	
	Если Реквизиты.ПоддержкаРаботыСоСтруктурнымиПодразделениями Или Реквизиты.РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
		Запрос.Текст = Запрос.Текст + ",
		|	ВЫБОР
		|		КОГДА НЕ(ООСМСРасчетыСФондамиОстатки.СтруктурнаяЕдиница ЕСТЬ NULL)
		|			ТОГДА ООСМСРасчетыСФондамиОстатки.СтруктурнаяЕдиница
		|		КОГДА НЕ(МестоРаботы.СтруктурнаяЕдиница ЕСТЬ NULL)
		|			ТОГДА МестоРаботы.СтруктурнаяЕдиница
		|		ИНАЧЕ &ОбособленноеПодразделение
		|	КОНЕЦ КАК СтруктурнаяЕдиница,
		|	ВЫБОР
		|		КОГДА НЕ(МестоРаботы.СтруктурнаяЕдиница ЕСТЬ NULL)
		|			ТОГДА МестоРаботы.СтруктурнаяЕдиница
		|		ИНАЧЕ &ОбособленноеПодразделение
		|	КОНЕЦ КАК СтруктурнаяЕдиницаПоМестуРаботы,
		|	ООСМСРасчетыСФондамиОстатки.Налогоплательщик,
		|	ВЫБОР 
		|		КОГДА НЕ (ООСМСРасчетыСФондамиОстатки.ПодразделениеОрганизации ЕСТЬ NULL)
		|			ТОГДА ООСМСРасчетыСФондамиОстатки.ПодразделениеОрганизации
		|		КОГДА НЕ (МестоРаботы.ПодразделениеОрганизации ЕСТЬ NULL)
		|			ТОГДА МестоРаботы.ПодразделениеОрганизации
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
		|	КОНЕЦ КАК ПодразделениеОрганизации,
		|	ВЫБОР 
		|		КОГДА НЕ (МестоРаботы.ПодразделениеОрганизации ЕСТЬ NULL)
		|			ТОГДА МестоРаботы.ПодразделениеОрганизации
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
		|	КОНЕЦ КАК ПодразделениеОрганизацииПоМестуРаботы";
	Иначе
		Запрос.Текст = Запрос.Текст + ",
		|	&ОбособленноеПодразделение КАК СтруктурнаяЕдиница,
		|	&ОбособленноеПодразделение КАК СтруктурнаяЕдиницаПоМестуРаботы,
		|	&ОбособленноеПодразделение КАК Налогоплательщик,
		|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) КАК ПодразделениеОрганизации,
		|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) КАК ПодразделениеОрганизацииПоМестуРаботы";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|ИЗ
	|	ДанныеООСМС КАК ВложенныйЗапрос
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ООСМСРасчетыСФондами.Остатки(
	|			&Дата,
	|			Организация = &ОбособленноеПодразделение
	|			И ФизЛицо В (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					ВЫРАЗИТЬ(ФизЛицо КАК Справочник.ФизическиеЛица)
	|				ИЗ
	|					ДанныеООСМС КАК Док)) КАК ООСМСРасчетыСФондамиОстатки
	|		ПО ВложенныйЗапрос.ФизЛицо = ООСМСРасчетыСФондамиОстатки.ФизЛицо
	|			И (ВЫБОР 
	|					КОГДА ВложенныйЗапрос.СпособРасчетаСуммКПеречислению = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаСуммКПеречислениюСО.ПоЗадолженностиЗаМесяц)
	|						ТОГДА ВложенныйЗапрос.МесяцИсчисления = ООСМСРасчетыСФондамиОстатки.МесяцНалоговогоПериода
	|					ИНАЧЕ ВложенныйЗапрос.МесяцИсчисления >= ООСМСРасчетыСФондамиОстатки.МесяцНалоговогоПериода
	|				КОНЕЦ)
	|			И ВложенныйЗапрос.ВидПлатежа = ООСМСРасчетыСФондамиОстатки.ВидПлатежа";
	
	Если Реквизиты.ПоддержкаРаботыСоСтруктурнымиПодразделениями Или Реквизиты.РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
		
		Запрос.Текст = Запрос.Текст + "
		|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_МестоРаботы КАК МестоРаботы
		|		ПО ВложенныйЗапрос.ФизЛицо = МестоРаботы.ФизЛицо
		|			И ВложенныйЗапрос.МесяцИсчисления = МестоРаботы.Период";
	
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|УПОРЯДОЧИТЬ ПО
	|	ВложенныйЗапрос.ФизЛицо,
	|	ВложенныйЗапрос.ВидПлатежа,
	|	ВложенныйЗапрос.МесяцИсчисления,
	|	ЕСТЬNULL(ООСМСРасчетыСФондамиОстатки.МесяцНалоговогоПериода, ВложенныйЗапрос.МесяцИсчисления)
	|";

	ТаблицаДвижений = Запрос.Выполнить().Выбрать();
	
	Возврат ТаблицаДвижений;	
	
КонецФункции

Процедура ЗарегистрироватьДвиженияПеречислениеООСМС(Реквизиты, Выборка, Движения, Отказ)
	
	Пока Выборка.СледующийПоЗначениюПоля("ФизЛицо") Цикл
	
		Пока Выборка.СледующийПоЗначениюПоля("ВидПлатежа") Цикл
		
			Пока Выборка.СледующийПоЗначениюПоля("МесяцИсчисления") Цикл
			
				ОстатокКСписанию 		= Выборка.Сумма;
				ТекущееФизЛицо 			= Выборка.ФизЛицо;
				ТекущийВидПлатежа		= Выборка.ВидПлатежа;
				ТекущийМесяцИсчисления	= Выборка.МесяцИсчисления;
				СтруктурнаяЕдиницаПоМестуРаботы = Выборка.СтруктурнаяЕдиницаПоМестуРаботы;
				ПодразделениеОрганизацииПоМестуРаботы = Выборка.ПодразделениеОрганизацииПоМестуРаботы;
				
				Пока Выборка.Следующий()
				   И Выборка.ФизЛицо = ТекущееФизЛицо
				   И Выборка.ВидПлатежа = ТекущийВидПлатежа
				   И Выборка.МесяцИсчисления = ТекущийМесяцИсчисления
				   И Выборка.Налогоплательщик <> NULL Цикл
				
					СуммаКСписанию 		= Мин(ОстатокКСписанию, Выборка.ОтчислениеОстаток);
					ОстатокКСписанию 	= ОстатокКСписанию - СуммаКСписанию;
					
					Если СуммаКСписанию = 0 Тогда
						Прервать;
					КонецЕсли;
					
					Движение = Движения.ООСМСРасчетыСФондами.Добавить();
					
					// Свойства
					Движение.Период			= Реквизиты.Дата;
					Движение.ВидДвижения	= ВидДвиженияНакопления.Расход;					
					// Измерения
					Движение.ФизЛицо		= Выборка.ФизЛицо;
					Если Реквизиты.ПоддержкаРаботыСоСтруктурнымиПодразделениями Или Реквизиты.РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
						Движение.СтруктурнаяЕдиница	= Выборка.СтруктурнаяЕдиница;
						Движение.Налогоплательщик	= Выборка.Налогоплательщик;
					Иначе
						Движение.СтруктурнаяЕдиница	= Реквизиты.Организация;
						Движение.Налогоплательщик	= Реквизиты.Организация;
					КонецЕсли;
					Движение.МесяцНалоговогоПериода	= Выборка.МесяцНалоговогоПериода;
					Движение.ВидПлатежа				= Выборка.ВидПлатежа;
					Движение.Организация			= Реквизиты.Организация;					
					// Остатки по подразделению закрываем всегда чтобы не было зависания остатков
					Движение.ПодразделениеОрганизации = Выборка.ПодразделениеОрганизации;
					// Ресурсы
					Движение.Отчисление				= СуммаКСписанию;					
					// Реквизиты
					Движение.ВидСтроки				= Перечисления.РасчетыСБюджетомФондамиВидСтроки.Перечисление;				
				КонецЦикла;
			
				Если ОстатокКСписанию <> 0 Тогда 
				    // остаток относим на структурную единицу и налогоплательщика по месту работы

					Движение = Движения.ООСМСРасчетыСФондами.Добавить();					
					// Свойства
					Движение.Период			= Реквизиты.Дата;
					Движение.ВидДвижения	= ВидДвиженияНакопления.Расход;					
					// Измерения
					Движение.ФизЛицо		= ТекущееФизЛицо;
					Если Реквизиты.ПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
						Движение.СтруктурнаяЕдиница	= СтруктурнаяЕдиницаПоМестуРаботы;
						Движение.Налогоплательщик	= ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(СтруктурнаяЕдиницаПоМестуРаботы, 
																						Реквизиты.Организация, 
																						Перечисления.РазделыНалоговогоУчета.НалогиСЗаработнойПлаты);
					Иначе
						Движение.СтруктурнаяЕдиница	= Реквизиты.Организация;
						Движение.Налогоплательщик	= Реквизиты.Организация;
					КонецЕсли;
					Движение.МесяцНалоговогоПериода	= ТекущийМесяцИсчисления;
					Движение.ВидПлатежа				= ТекущийВидПлатежа;
					Движение.Организация			= Реквизиты.Организация;
					
					// Нераспределенный остаток относим на подразделение места работы только если ведется раздельный учет налогов по подразделениям организаций
					Если Реквизиты.РаспределятьНалогиПоПодразделениямОрганизаций Тогда 
						Движение.ПодразделениеОрганизации = ПодразделениеОрганизацииПоМестуРаботы;
					КонецЕсли;
										
					// Ресурсы
					Движение.Отчисление				= ОстатокКСписанию;
					
					// Реквизиты
					Движение.ВидСтроки				= Перечисления.РасчетыСБюджетомФондамиВидСтроки.Перечисление;
				    
				КонецЕсли;
				
			КонецЦикла; 		
		КонецЦикла; 	
	КонецЦикла; 

	Движения.ООСМСРасчетыСФондами.Записывать = Истина;

КонецПроцедуры

// Возврат СО, Взносов ОСМС, Отчислений ВОСМС

Процедура СформироватьДвиженияВозвратСО(ТаблицаРеквизиты, ТаблицаВозвратСО, Движения, Отказ) Экспорт
	
	Если ТаблицаВозвратСО = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизиты[0];
	СтруктураОтбора = Новый Структура("ВидОперации");
	Если Реквизиты.ЕстьВозвратСоциальныхОтчислений Тогда

		ВидОперации = Перечисления.ВидыОперацийСОВозвратОтчислений.ВозвратОбязательныхСоциальныхОтчислений;
		СтруктураОтбора.ВидОперации = ВидОперации;
		СформироватьПроводкиВозвратСоциальногоСтрахования(Реквизиты, ТаблицаВозвратСО.Скопировать(СтруктураОтбора), ВидОперации, Движения, Отказ);
		
		ТаблицаДвиженияСО =  ПодготовитьТаблицуВозвратСО(Реквизиты, ТаблицаВозвратСО, Отказ);
		ЗарегистрироватьДвиженияВозвратСО(Реквизиты, ТаблицаДвиженияСО, Движения, Отказ);
	КонецЕсли;
	
	Если Реквизиты.ЕстьВозвратВзносовОСМС Тогда

		ВидОперации = Перечисления.ВидыОперацийСОВозвратОтчислений.ВозвратВзносовОСМС;
		СтруктураОтбора.ВидОперации = ВидОперации;
		СформироватьПроводкиВозвратСоциальногоСтрахования(Реквизиты, ТаблицаВозвратСО.Скопировать(СтруктураОтбора), ВидОперации, Движения, Отказ);
		
		ТаблицаДвиженияВОСМС =  ПодготовитьТаблицуВозвратВОСМС(Реквизиты, ТаблицаВозвратСО, Отказ);
		ЗарегистрироватьДвиженияВозвратВОСМС(Реквизиты, ТаблицаДвиженияВОСМС, Движения, Отказ);
	КонецЕсли;
	

	Если Реквизиты.ЕстьВозвратОтчисленийОСМС Тогда

		ВидОперации = Перечисления.ВидыОперацийСОВозвратОтчислений.ВозвратОтчисленийОСМС;
		СтруктураОтбора.ВидОперации = ВидОперации;
		СформироватьПроводкиВозвратСоциальногоСтрахования(Реквизиты, ТаблицаВозвратСО.Скопировать(СтруктураОтбора), ВидОперации, Движения, Отказ);
		
		ТаблицаДвиженияООСМС =  ПодготовитьТаблицуВозвратООСМС(Реквизиты, ТаблицаВозвратСО, Отказ);
		ЗарегистрироватьДвиженияВозвратООСМС(Реквизиты, ТаблицаДвиженияООСМС, Движения, Отказ);
	КонецЕсли;
	

КонецПроцедуры

Процедура СформироватьПроводкиВозвратСоциальногоСтрахования(Реквизиты, ТаблицаВозвратСО, ВидОперации, Движения, Отказ)
	
	ТаблицаФормированияПроводок = ТаблицаВозвратСО;
	
	ВедениеУчетаПоСотрудникам = Реквизиты.ВедениеУчетаПоСотрудникам;
	
	Если ВидОперации = Перечисления.ВидыОперацийСОВозвратОтчислений.ВозвратОбязательныхСоциальныхОтчислений Тогда
		ЭлементНалогиСборыОтчисления = Справочники.НалогиСборыОтчисления.ОбязательныеСоциальныеОтчисления;
		СчетКт = ЭлементНалогиСборыОтчисления.СчетУчетаРасчетовСКонтрагентомБУ;
		Если НЕ ЗначениеЗаполнено(СчетКт) Тогда
			СчетКт = ПланыСчетов.Типовой.ОбязательстваПоСоциальномуСтрахованию; 
		КонецЕсли;
		СчетКтНУ = ЭлементНалогиСборыОтчисления.СчетУчетаРасчетовСКонтрагентомНУ;
		Если НЕ ЗначениеЗаполнено(СчетКтНУ) Тогда
			СчетКтНУПоУмолчанию = ПланыСчетов.Налоговый.ОбязательстваПоСоциальномуСтрахованию;
			СчетКтНУ = ПроцедурыБухгалтерскогоУчета.ЗаполнитьСчетНалоговогоУчетаПоУмолчанию(СчетКт, Реквизиты.Дата, СчетКтНУПоУмолчанию);
		КонецЕсли;
		ШаблонТекстаПроводки = НСтр("ru = 'Возврат СО за %1'", ОбщегоНазначения.КодОсновногоЯзыка());
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийСОВозвратОтчислений.ВозвратВзносовОСМС Тогда
		ЭлементНалогиСборыОтчисления = Справочники.НалогиСборыОтчисления.ВзносыОбязательноеСоциальноеМедицинскоеСтрахование;
		СчетКт = ЭлементНалогиСборыОтчисления.СчетУчетаРасчетовСКонтрагентомБУ;
		Если НЕ ЗначениеЗаполнено(СчетКт) Тогда
			СчетКт = ПланыСчетов.Типовой.ОбязательстваПоВзносамОСМС; 
		КонецЕсли;
		СчетКтНУ = ЭлементНалогиСборыОтчисления.СчетУчетаРасчетовСКонтрагентомНУ;
		Если НЕ ЗначениеЗаполнено(СчетКтНУ) Тогда
			СчетКтНУПоУмолчанию = ПланыСчетов.Налоговый.ОбязательстваПоВзносамОСМС;
			СчетКтНУ = ПроцедурыБухгалтерскогоУчета.ЗаполнитьСчетНалоговогоУчетаПоУмолчанию(СчетКт, Реквизиты.Дата, СчетКтНУПоУмолчанию);
		КонецЕсли;
		ШаблонТекстаПроводки = НСтр("ru = 'Возврат взносов ОСМС за %1'", ОбщегоНазначения.КодОсновногоЯзыка());
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийСОВозвратОтчислений.ВозвратОтчисленийОСМС Тогда
		ЭлементНалогиСборыОтчисления = Справочники.НалогиСборыОтчисления.ОтчисленияОбязательноеСоциальноеМедицинскоеСтрахование;
		СчетКт = ЭлементНалогиСборыОтчисления.СчетУчетаРасчетовСКонтрагентомБУ;
		Если НЕ ЗначениеЗаполнено(СчетКт) Тогда
			СчетКт = ПланыСчетов.Типовой.ОбязательстваПоОтчислениямОСМС; 
		КонецЕсли;
		СчетКтНУ = ЭлементНалогиСборыОтчисления.СчетУчетаРасчетовСКонтрагентомНУ;
		Если НЕ ЗначениеЗаполнено(СчетКтНУ) Тогда
			СчетКтНУПоУмолчанию = ПланыСчетов.Налоговый.ОбязательстваПоОтчислениямОСМС;
			СчетКтНУ = ПроцедурыБухгалтерскогоУчета.ЗаполнитьСчетНалоговогоУчетаПоУмолчанию(СчетКт, Реквизиты.Дата, СчетКтНУПоУмолчанию);
		КонецЕсли;
		ШаблонТекстаПроводки = НСтр("ru = 'Возврат отчислений ОСМС за %1'", ОбщегоНазначения.КодОсновногоЯзыка());
	КонецЕсли;
	
	Если НЕ ВедениеУчетаПоСотрудникам Тогда
		ТаблицаФормированияПроводок.Свернуть("МесяцИсчисления, ВидПлатежа, СтатьяДвиженияДенежныхСредств", "Сумма");
	КонецЕсли;
	
	Для Каждого СтрокаДанных Из ТаблицаФормированияПроводок Цикл
		
		ТекстПроводки = СтрШаблон(ШаблонТекстаПроводки, Формат(СтрокаДанных.МесяцИсчисления, "ДФ='ММММ гггг'"));
		
		// По регистру бухгалтерии - возвраты взносов по работникам из фондов
		Проводка = Движения.Типовой.Добавить();
		
		// Свойства
		Проводка.Период			= Реквизиты.Дата;
		
		// Измерения
		Проводка.Организация	= Реквизиты.Организация;
		
		// Корреспондеция счетов и аналитика
		Проводка.СчетДт			= Реквизиты.СчетБанк;
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ДенежныеСредства", Реквизиты.СчетОрганизации);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтатьиДвиженияДенежныхСредств", СтрокаДанных.СтатьяДвиженияДенежныхСредств);
		
		Если Проводка.СчетДт.Валютный Тогда
			Проводка.ВалютаДт 			= Реквизиты.ВалютаДокумента;
			Проводка.ВалютнаяСуммаДт 	= СтрокаДанных.Сумма;
		КонецЕсли;
		
		Проводка.СчетКт			= СчетКт;
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ВидыПлатежейВБюджетИФонды", СтрокаДанных.ВидПлатежа);
		
		Если ВедениеУчетаПоСотрудникам Тогда
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "РаботникиОрганизаций", СтрокаДанных.ФизЛицоБУ);
		КонецЕсли;
				
		Проводка.Сумма			= СтрокаДанных.Сумма;
		
		// Реквизиты
		Проводка.Содержание		= ТекстПроводки;
		
		ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(Проводка, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);

		////////////////////////////////////////////////////////////////////////////
		// По регистру бухгалтерии "Налоговый" - возвраты взносов по работникам из фондов
		Если Реквизиты.НеобходимостьОтраженияВНУ Тогда
			Проводка = Движения.Налоговый.Добавить();
			
			// Свойства
			Проводка.Период			= Реквизиты.Дата;
			
			// Измерения
			Проводка.Организация	= Реквизиты.Организация;
			
			// Корреспондеция счетов и аналитика
			Проводка.СчетДт			= Реквизиты.СчетБанкНУ;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ДенежныеСредства", Реквизиты.СчетОрганизации);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтатьиДвиженияДенежныхСредств", СтрокаДанных.СтатьяДвиженияДенежныхСредств);
			
			Проводка.СчетКт			= СчетКтНУ;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "НалогиСборыОтчисления", ЭлементНалогиСборыОтчисления);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ВидыПлатежейВБюджетИФонды", СтрокаДанных.ВидПлатежа);
			
			Если ВедениеУчетаПоСотрудникам Тогда
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "РаботникиОрганизаций", СтрокаДанных.ФизЛицоБУ);
			КонецЕсли;
			
			Проводка.Сумма			= СтрокаДанных.Сумма;
			
			// Реквизиты
			Проводка.Содержание		= ТекстПроводки;
			
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(Проводка, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);
			
			ПроцедурыНалоговогоУчета.ВидУчетаНУ(Проводка,  Реквизиты.ВидУчетаНУ);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Движения.Типовой.Записывать = Истина;
	
	Если Реквизиты.НеобходимостьОтраженияВНУ Тогда
		Движения.Налоговый.Записывать = Истина;
	КонецЕсли;

КонецПроцедуры

Функция ПодготовитьТаблицуВозвратСО(Реквизиты, ТаблицаВозвратСО, Отказ)
	
	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("Дата", Реквизиты.Дата);
	Запрос.УстановитьПараметр("Организация", ОбщегоНазначенияБКВызовСервера.ГоловнаяОрганизацияДляУчетаЗарплаты(Реквизиты.Организация));   
	Запрос.УстановитьПараметр("ОбособленноеПодразделение", Реквизиты.Организация);
	Запрос.УстановитьПараметр("ДанныеСО", ТаблицаВозвратСО);
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДанныеСО.ФизЛицо,
		|	ДанныеСО.МесяцИсчисления,
		|	ДанныеСО.ВидПлатежа,
		|	ДанныеСО.Сумма
		|ПОМЕСТИТЬ ДанныеСО
		|ИЗ
		|	&ДанныеСО КАК ДанныеСО
		|ГДЕ
		|	ДанныеСО.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСОВозвратОтчислений.ВозвратОбязательныхСоциальныхОтчислений)";
		
	Запрос.Выполнить();
	
	Если Реквизиты.ПоддержкаРаботыСоСтруктурнымиПодразделениями Или Реквизиты.РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
		
		ПериодыФизЛицаТекст = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДанныеСО.ФизЛицо,
		|	ДанныеСО.МесяцИсчисления КАК Период
		|ПОМЕСТИТЬ ВТ_ПериодыСотрудников
		|ИЗ
		|	ДанныеСО КАК ДанныеСО
		|";
		
		Запрос.Текст = ПериодыФизЛицаТекст + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета()
					 + СформироватьТекстЗапросаСтруктурныеЕдиницы("ВТ_ПериодыСотрудников", Истина);
		Запрос.Выполнить();
	КонецЕсли;

	Запрос.Текст =  
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СОВозвратОтчислений.МесяцИсчисления КАК МесяцИсчисления,
	|	СОВозвратОтчислений.ВидПлатежа КАК ВидПлатежа,
	|	СОВозвратОтчислений.ФизЛицо КАК ФизЛицо,
	|	СОВозвратОтчислений.Сумма КАК Сумма,
	|	ЕСТЬNULL(СОРасчетыСФондами.Отчисление, 0) КАК СОРасчетыСФондамиОтчисление";
	
	Если Реквизиты.ПоддержкаРаботыСоСтруктурнымиПодразделениями Или Реквизиты.РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
		
		Запрос.Текст = Запрос.Текст + ",
		|	ВЫБОР
		|		КОГДА НЕ (СОРасчетыСФондами.СтруктурнаяЕдиница ЕСТЬ NULL)
		|			ТОГДА СОРасчетыСФондами.СтруктурнаяЕдиница
		|		КОГДА НЕ (МестоРаботы.СтруктурнаяЕдиница ЕСТЬ NULL)
		|			ТОГДА МестоРаботы.СтруктурнаяЕдиница
		|		ИНАЧЕ &ОбособленноеПодразделение
		|	КОНЕЦ КАК СтруктурнаяЕдиница,
		|	ВЫБОР
		|		КОГДА НЕ (МестоРаботы.СтруктурнаяЕдиница ЕСТЬ NULL)
		|			ТОГДА МестоРаботы.СтруктурнаяЕдиница
		|		ИНАЧЕ &ОбособленноеПодразделение
		|	КОНЕЦ КАК СтруктурнаяЕдиницаПоМестуРаботы,
		|	ВЫБОР
		|		КОГДА НЕ (СОРасчетыСФондами.ПодразделениеОрганизации ЕСТЬ NULL)
		|			ТОГДА СОРасчетыСФондами.ПодразделениеОрганизации
		|		КОГДА НЕ (МестоРаботы.ПодразделениеОрганизации ЕСТЬ NULL)
		|			ТОГДА МестоРаботы.ПодразделениеОрганизации
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
		|	КОНЕЦ КАК ПодразделениеОрганизации,
		|	ВЫБОР
		|		КОГДА НЕ (МестоРаботы.ПодразделениеОрганизации ЕСТЬ NULL)
		|			ТОГДА МестоРаботы.ПодразделениеОрганизации
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
		|	КОНЕЦ КАК ПодразделениеОрганизацииПоМестуРаботы,
		|	ВЫБОР
		|		КОГДА НЕ(СОРасчетыСФондами.Налогоплательщик ЕСТЬ NULL)
		|			ТОГДА СОРасчетыСФондами.Налогоплательщик
		|		ИНАЧЕ &ОбособленноеПодразделение
		|	КОНЕЦ КАК Налогоплательщик";
	
	Иначе
	
		Запрос.Текст = Запрос.Текст + ", 
		|	&ОбособленноеПодразделение КАК СтруктурнаяЕдиница,
		|	&ОбособленноеПодразделение КАК СтруктурнаяЕдиницаПоМестуРаботы,
		|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) КАК ПодразделениеОрганизации,
		|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) КАК ПодразделениеОрганизацииПоМестуРаботы,
		|	&ОбособленноеПодразделение КАК Налогоплательщик";
		
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|ИЗ
	|	ДанныеСО КАК СОВозвратОтчислений
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СОРасчетыСФондами КАК СОРасчетыСФондами
	|		ПО СОВозвратОтчислений.ФизЛицо = СОРасчетыСФондами.ФизЛицо
	|			И СОВозвратОтчислений.ВидПлатежа = СОРасчетыСФондами.ВидПлатежа
	|			И СОВозвратОтчислений.МесяцИсчисления = СОРасчетыСФондами.МесяцНалоговогоПериода
	|			И СОРасчетыСФондами.Организация = &ОбособленноеПодразделение
	|			И СОРасчетыСФондами.Период МЕЖДУ СОВозвратОтчислений.МесяцИсчисления И КОНЕЦПЕРИОДА(&Дата, ДЕНЬ)
	|			И СОРасчетыСФондами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			И СОРасчетыСФондами.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Перечисление)
	|			И СОРасчетыСФондами.Активность";
	
	Если Реквизиты.ПоддержкаРаботыСоСтруктурнымиПодразделениями Или Реквизиты.РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
	
		Запрос.Текст = Запрос.Текст + "
		|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_МестоРаботы КАК МестоРаботы
		|		ПО СОВозвратОтчислений.ФизЛицо = МестоРаботы.ФизЛицо
		|			И СОВозвратОтчислений.МесяцИсчисления = МестоРаботы.Период";
	
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	СОВозвратОтчислений.ФизЛицо,
	|	СОВозвратОтчислений.ВидПлатежа,
	|	СОВозвратОтчислений.МесяцИсчисления,
	|	СОРасчетыСФондами.Период УБЫВ // считаем, что возвращают наиболее поздние платежи
	|";
	

	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

Процедура ЗарегистрироватьДвиженияВозвратСО(Реквизиты, Выборка, Движения, Отказ) 
	
	Пока Выборка.СледующийПоЗначениюПоля("ФизЛицо") Цикл
		Пока Выборка.СледующийПоЗначениюПоля("ВидПлатежа") Цикл
			Пока Выборка.СледующийПоЗначениюПоля("МесяцИсчисления") Цикл
				
				// по регистрам накопления
				ОстатокКВозврату 		= Выборка.Сумма;
				ТекущееФизЛицо	 		= Выборка.ФизЛицо;
				ТекущийМесяцИсчисления	= Выборка.МесяцИсчисления;
				ТекущийВидПлатежа		= Выборка.ВидПлатежа;
				СтруктурнаяЕдиницаПоМестуРаботы = Выборка.СтруктурнаяЕдиницаПоМестуРаботы;
				ПодразделениеОрганизацииПоМестуРаботы = Выборка.ПодразделениеОрганизацииПоМестуРаботы;
				
				Пока Выборка.Следующий()
						И Выборка.ФизЛицо = ТекущееФизЛицо
						И Выборка.МесяцИсчисления = ТекущийМесяцИсчисления
						И Выборка.ВидПлатежа = ТекущийВидПлатежа
						И Выборка.Налогоплательщик <> NULL Цикл
						
					СуммаКВозврату = Мин(ОстатокКВозврату, Выборка.СОРасчетыСФондамиОтчисление);
					ОстатокКВозврату = ОстатокКВозврату - СуммаКВозврату;
					
					Если СуммаКВозврату = 0 Тогда
						Продолжить;
					КонецЕсли;
					
					//////////////////////////////////
					// СОРасчетыСФондами
					
					Движение = Движения.СОРасчетыСФондами.Добавить();
					
					// Свойства
					Движение.Период			= Реквизиты.Дата;
					Движение.ВидДвижения	= ВидДвиженияНакопления.Приход;
					
					// Измерения
					Движение.ФизЛицо		= Выборка.ФизЛицо;
					Если Реквизиты.ПоддержкаРаботыСоСтруктурнымиПодразделениями Или Реквизиты.РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
						Движение.СтруктурнаяЕдиница	= Выборка.СтруктурнаяЕдиница;
						Движение.Налогоплательщик	= Выборка.Налогоплательщик;
					Иначе
						Движение.СтруктурнаяЕдиница	= Реквизиты.Организация;
						Движение.Налогоплательщик	= Реквизиты.Организация;
					КонецЕсли;
					Движение.МесяцНалоговогоПериода	= Выборка.МесяцИсчисления;
					Движение.ВидПлатежа				= Выборка.ВидПлатежа;
					Движение.Организация			= Реквизиты.Организация;
					// Остатки всегда списываем по подразделениям, чтобы не было зависания остатков
					Движение.ПодразделениеОрганизации = Выборка.ПодразделениеОрганизации;
					
					// Ресурсы
					Движение.Отчисление				= СуммаКВозврату;
					
					// Реквизиты
					Движение.ВидСтроки				= Перечисления.РасчетыСБюджетомФондамиВидСтроки.Возврат;
						
				КонецЦикла;
			
				Если ОстатокКВозврату <> 0 Тогда
				    // возвращенный нераспределенный остаток относим на структурную единицу по месту работы

					Движение = Движения.СОРасчетыСФондами.Добавить();
					
					// Свойства
					Движение.Период			= Реквизиты.Дата;
					Движение.ВидДвижения	= ВидДвиженияНакопления.Приход;
					
					// Измерения
					Движение.ФизЛицо		= ТекущееФизЛицо;
					Если Реквизиты.ПоддержкаРаботыСоСтруктурнымиПодразделениями Или Реквизиты.РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
						Налогоплательщик			= ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(СтруктурнаяЕдиницаПоМестуРаботы,
																									Реквизиты.Организация,
																									Перечисления.РазделыНалоговогоУчета.НалогиСЗаработнойПлаты);
						Движение.СтруктурнаяЕдиница	= СтруктурнаяЕдиницаПоМестуРаботы;
						Движение.Налогоплательщик	= Налогоплательщик;
					Иначе
						Движение.СтруктурнаяЕдиница	= Реквизиты.Организация;
						Движение.Налогоплательщик	= Реквизиты.Организация;
					КонецЕсли;
					Движение.МесяцНалоговогоПериода	= ТекущийМесяцИсчисления;
					Движение.ВидПлатежа				= ТекущийВидПлатежа;
					Движение.Организация			= Реквизиты.Организация;
					//Нераспределенные остатки относим на оснровное место работы только если используется распределение
					Если Реквизиты.РаспределятьНалогиПоПодразделениямОрганизаций Тогда
						Движение.ПодразделениеОрганизации = ПодразделениеОрганизацииПоМестуРаботы;
					КонецЕсли;
					
					// Ресурсы
					Движение.Отчисление				= ОстатокКВозврату;
					
					// Реквизиты
					Движение.ВидСтроки				= Перечисления.РасчетыСБюджетомФондамиВидСтроки.Возврат;
					
				КонецЕсли;
				
			КонецЦикла; // Пока Выборка.СледующийПоЗначениюПоля("МесяцИсчисления") Цикл
		
		КонецЦикла; // Пока Выборка.СледующийПоЗначениюПоля("ВидПлатежа") Цикл
	
	КонецЦикла; // Пока Выборка.СледующийПоЗначениюПоля("ФизЛицо") Цикл

	Движения.СОРасчетыСФондами.Записывать = Истина;	
	
КонецПроцедуры

Функция ПодготовитьТаблицуВозвратВОСМС(Реквизиты, ТаблицаВозвратВОСМС, Отказ)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДанныеВОСМС", ТаблицаВозвратВОСМС);
	Запрос.УстановитьПараметр("Организация", ОбщегоНазначенияБКВызовСервера.ГоловнаяОрганизацияДляУчетаЗарплаты(Реквизиты.Организация));   
	Запрос.УстановитьПараметр("ОбособленноеПодразделение", Реквизиты.Организация);
	Запрос.УстановитьПараметр("Дата", Реквизиты.Дата);
	
	// Список видов платежей, по которым формируются движения по регистру ВОСМСПодлежитПеречислениюВФонды
	СписокВидовПлатежей = Новый СписокЗначений;
	СписокВидовПлатежей.Добавить(Перечисления.ВидыПлатежейВБюджетИФонды.Налог);
	СписокВидовПлатежей.Добавить(Перечисления.ВидыПлатежейВБюджетИФонды.НалогАкт);
	СписокВидовПлатежей.Добавить(Перечисления.ВидыПлатежейВБюджетИФонды.НалогСам);
	Запрос.УстановитьПараметр("СписокВидовПлатежей", СписокВидовПлатежей);
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;

	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДанныеВОСМС.ФизЛицо,
		|	ДанныеВОСМС.МесяцИсчисления,
		|	ДанныеВОСМС.ВидПлатежа,
		|	ДанныеВОСМС.Сумма
		|ПОМЕСТИТЬ ДанныеВОСМС
		|ИЗ
		|	&ДанныеВОСМС КАК ДанныеВОСМС
		|ГДЕ
		|	ДанныеВОСМС.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСОВозвратОтчислений.ВозвратВзносовОСМС)";
		
	Запрос.Выполнить();
	
	Если Реквизиты.ПоддержкаРаботыСоСтруктурнымиПодразделениями Или Реквизиты.РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
		
		ПериодыФизЛицаТекст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДанныеВОСМС.ФизЛицо,
		|	ДанныеВОСМС.МесяцИсчисления КАК Период
		|ПОМЕСТИТЬ ВТ_ПериодыСотрудников
		|ИЗ
		|	ДанныеВОСМС КАК ДанныеВОСМС
		|";
		
		Запрос.Текст = ПериодыФизЛицаТекст + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета()
					 + СформироватьТекстЗапросаСтруктурныеЕдиницы("ВТ_ПериодыСотрудников", Истина);
		Запрос.Выполнить();
	КонецЕсли;

	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВОСМСВозвратВзносов.МесяцИсчисления КАК МесяцИсчисления,
	|	ВОСМСВозвратВзносов.ВидПлатежа КАК ВидПлатежа,
	|	ВЫБОР
	|		КОГДА ВОСМСВозвратВзносов.ВидПлатежа В (&СписокВидовПлатежей)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПлатежЯвляетсяНалогом,
	|	ВОСМСВозвратВзносов.ФизЛицо КАК ФизЛицо,
	|	ВОСМСВозвратВзносов.Сумма КАК Сумма,
	|	ЕСТЬNULL(ВОСМСРасчетыСФондами.Взнос, 0) КАК РасчетыСФондамиВзнос,
	|	ВОСМСРасчетыСФондами.Регистратор,
	|	ВОСМСРасчетыСФондами.НомерСтроки,
	|	ЕСТЬNULL(ВОСМСПодлежитПеречислениюВФонды.Взнос, 0) КАК ПодлежитПеречислениюВзнос,
	|	ВОСМСПодлежитПеречислениюВФонды.МесяцВыплатыДоходов КАК МесяцВыплатыДоходов";
	
	Если Реквизиты.ПоддержкаРаботыСоСтруктурнымиПодразделениями Или Реквизиты.РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
	
		Запрос.Текст = Запрос.Текст + ",
		|	ВЫБОР
		|		КОГДА НЕ(ВОСМСРасчетыСФондами.СтруктурнаяЕдиница ЕСТЬ NULL)
		|			ТОГДА ВОСМСРасчетыСФондами.СтруктурнаяЕдиница
		|		КОГДА НЕ(МестоРаботы.СтруктурнаяЕдиница ЕСТЬ NULL)
		|			ТОГДА МестоРаботы.СтруктурнаяЕдиница
		|		ИНАЧЕ &ОбособленноеПодразделение
		|	КОНЕЦ КАК СтруктурнаяЕдиница,
		|	ВЫБОР
		|		КОГДА НЕ(МестоРаботы.СтруктурнаяЕдиница ЕСТЬ NULL)
		|			ТОГДА МестоРаботы.СтруктурнаяЕдиница
		|		ИНАЧЕ &ОбособленноеПодразделение
		|	КОНЕЦ КАК СтруктурнаяЕдиницаПоМестуРаботы,
		|	ВЫБОР
		|		КОГДА НЕ(ВОСМСРасчетыСФондами.ПодразделениеОрганизации ЕСТЬ NULL)
		|			ТОГДА ВОСМСРасчетыСФондами.ПодразделениеОрганизации
		|		КОГДА НЕ(МестоРаботы.ПодразделениеОрганизации ЕСТЬ NULL)
		|			ТОГДА МестоРаботы.ПодразделениеОрганизации
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
		|	КОНЕЦ КАК ПодразделениеОрганизации,
		|	ВЫБОР
		|		КОГДА НЕ(МестоРаботы.ПодразделениеОрганизации ЕСТЬ NULL)
		|			ТОГДА МестоРаботы.ПодразделениеОрганизации
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
		|	КОНЕЦ КАК ПодразделениеОрганизацииПоМестуРаботы,
		|	ВЫБОР
		|		КОГДА НЕ(ВОСМСРасчетыСФондами.Налогоплательщик ЕСТЬ NULL)
		|			ТОГДА ВОСМСРасчетыСФондами.Налогоплательщик
		|		ИНАЧЕ &ОбособленноеПодразделение
		|	КОНЕЦ КАК Налогоплательщик";
	
	Иначе
		
		Запрос.Текст = Запрос.Текст + ",
		|	&ОбособленноеПодразделение КАК СтруктурнаяЕдиница,
		|	&ОбособленноеПодразделение КАК СтруктурнаяЕдиницаПоМестуРаботы,
		|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) КАК ПодразделениеОрганизации,
		|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) КАК ПодразделениеОрганизацииПоМестуРаботы,
		|	&ОбособленноеПодразделение КАК Налогоплательщик";
		
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|ИЗ
	|	ДанныеВОСМС КАК ВОСМСВозвратВзносов
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВОСМСРасчетыСФондами КАК ВОСМСРасчетыСФондами
	|		ПО ВОСМСВозвратВзносов.ФизЛицо = ВОСМСРасчетыСФондами.ФизЛицо
	|			И ВОСМСВозвратВзносов.МесяцИсчисления = ВОСМСРасчетыСФондами.МесяцНалоговогоПериода
	|			И ВОСМСВозвратВзносов.ВидПлатежа = ВОСМСРасчетыСФондами.ВидПлатежа
	|			И ВОСМСРасчетыСФондами.Организация = &ОбособленноеПодразделение
	|			И ВОСМСРасчетыСФондами.Период МЕЖДУ ВОСМСВозвратВзносов.МесяцИсчисления И КОНЕЦПЕРИОДА(&Дата, ДЕНЬ)
	|			И ВОСМСРасчетыСФондами.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Перечисление)
	|			И ВОСМСРасчетыСФондами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			И ВОСМСРасчетыСФондами.Активность
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВОСМСПодлежитПеречислениюВФонды КАК ВОСМСПодлежитПеречислениюВФонды
	|		ПО ВОСМСВозвратВзносов.ВидПлатежа В (&СписокВидовПлатежей)
	|			И ВОСМСРасчетыСФондами.ФизЛицо = ВОСМСПодлежитПеречислениюВФонды.ФизЛицо
	|			И ВОСМСРасчетыСФондами.МесяцНалоговогоПериода = ВОСМСПодлежитПеречислениюВФонды.МесяцНалоговогоПериода
	|			И ВОСМСПодлежитПеречислениюВФонды.Организация = &ОбособленноеПодразделение
	|			И ВОСМСРасчетыСФондами.Регистратор = ВОСМСПодлежитПеречислениюВФонды.Регистратор // берем только возвраты по соответствующему регистратору
	|			И ВОСМСРасчетыСФондами.СтруктурнаяЕдиница = ВОСМСПодлежитПеречислениюВФонды.СтруктурнаяЕдиница
	|			И ВОСМСРасчетыСФондами.Налогоплательщик = ВОСМСПодлежитПеречислениюВФонды.Налогоплательщик
	|			И ВОСМСПодлежитПеречислениюВФонды.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Перечисление)
	|			И ВОСМСПодлежитПеречислениюВФонды.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			И ВОСМСПодлежитПеречислениюВФонды.Активность";

	Если Реквизиты.ПоддержкаРаботыСоСтруктурнымиПодразделениями Или Реквизиты.РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
	
		Запрос.Текст = Запрос.Текст + "
		|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_МестоРаботы КАК МестоРаботы
		|		ПО ВОСМСВозвратВзносов.ФизЛицо = МестоРаботы.ФизЛицо
		|			И ВОСМСВозвратВзносов.МесяцИсчисления = МестоРаботы.Период";
	
	КонецЕсли;	
	
	Запрос.Текст = Запрос.Текст + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВОСМСВозвратВзносов.ФизЛицо,
	|	ВОСМСВозвратВзносов.ВидПлатежа,
	|	ВОСМСВозвратВзносов.МесяцИсчисления,
	|	ВОСМСРасчетыСФондами.Период УБЫВ, // считаем, что возвращают самое последнее перечисление ВОСМС
	|	ВОСМСРасчетыСФондами.Регистратор,
	|	ВОСМСРасчетыСФондами.НомерСтроки, 
	|	ВОСМСПодлежитПеречислениюВФонды.МесяцВыплатыДоходов УБЫВ
	|";

	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

Процедура ЗарегистрироватьДвиженияВозвратВОСМС(Реквизиты, Выборка, Движения, Отказ)
	
	Пока Выборка.СледующийПоЗначениюПоля("ФизЛицо") Цикл
		
		Пока Выборка.СледующийПоЗначениюПоля("ВидПлатежа") Цикл
		
			Пока Выборка.СледующийПоЗначениюПоля("МесяцИсчисления") Цикл
				
				// движения по регистрам накопления
				ОстатокКВозврату 	= Выборка.Сумма;
				ТекущееФизЛицо 		= Выборка.ФизЛицо;
				ТекущийВидПлатежа 	= Выборка.ВидПлатежа;
				ТекущийПлатежЯвляетсяНалогом = Выборка.ПлатежЯвляетсяНалогом;
				ТекущийМесяцИсчисления = Выборка.МесяцИсчисления;
				СтруктурнаяЕдиницаПоМестуРаботы = Выборка.СтруктурнаяЕдиницаПоМестуРаботы;
				ПодразделениеОрганизацииПоМестуРаботы = Выборка.ПодразделениеОрганизацииПоМестуРаботы;
				
				Пока Выборка.СледующийПоЗначениюПоля("Регистратор") Цикл
						
					Пока Выборка.СледующийПоЗначениюПоля("НомерСтроки") Цикл
						
						ТекущийРегистратор	= Выборка.Регистратор;
						ТекущийНомерСтроки	= Выборка.НомерСтроки;
						РасчетыСФондамиОстаток = Выборка.РасчетыСФондамиВзнос;
						
						Пока Выборка.Следующий()
								И Выборка.ФизЛицо = ТекущееФизЛицо
								И Выборка.ВидПлатежа = ТекущийВидПлатежа 
								И Выборка.МесяцИсчисления = ТекущийМесяцИсчисления
								И Выборка.Регистратор = ТекущийРегистратор
								И Выборка.НомерСтроки = ТекущийНомерСтроки 
								И Выборка.Налогоплательщик <> NULL Цикл
							
							Если ТекущийПлатежЯвляетсяНалогом Тогда
								СуммаКВозврату = Выборка.ПодлежитПеречислениюВзнос;
							Иначе
								СуммаКВозврату = Выборка.РасчетыСФондамиВзнос;
							КонецЕсли;
								
							СуммаКВозврату = Мин(СуммаКВозврату, ОстатокКВозврату, РасчетыСФондамиОстаток);
							Если СуммаКВозврату = 0 Тогда
								Продолжить;
							КонецЕсли;
							ОстатокКВозврату = ОстатокКВозврату - СуммаКВозврату;
							РасчетыСФондамиОстаток = РасчетыСФондамиОстаток - СуммаКВозврату;
							
							//////////////////////////////////////
							// ВОСМСРасчетыСФондами
							
							Движение = Движения.ВОСМСРасчетыСФондами.Добавить();
							
							// Свойства
							Движение.Период 		= Реквизиты.Дата;
							Движение.ВидДвижения 	= ВидДвиженияНакопления.Приход;
							
							// Измерения
							Движение.ФизЛицо		= Выборка.ФизЛицо;
							Если Реквизиты.ПоддержкаРаботыСоСтруктурнымиПодразделениями Или Реквизиты.РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
								Движение.СтруктурнаяЕдиница = Выборка.СтруктурнаяЕдиница;
								Движение.Налогоплательщик 	= Выборка.Налогоплательщик;
							Иначе
								Движение.СтруктурнаяЕдиница = Реквизиты.Организация;
								Движение.Налогоплательщик 	= Реквизиты.Организация;
							КонецЕсли;
							Движение.МесяцНалоговогоПериода = Выборка.МесяцИсчисления;
							Движение.ВидПлатежа				= Выборка.ВидПлатежа;
							Движение.Организация			= Реквизиты.Организация;
							//Остаток списываем всегда чтобы не было зависания остатков
							Движение.ПодразделениеОрганизации = Выборка.ПодразделениеОрганизации;
							
							// Ресурсы
							Движение.Взнос					= СуммаКВозврату;
							
							// Реквизиты
							Движение.ВидСтроки				= Перечисления.РасчетыСБюджетомФондамиВидСтроки.Возврат;
							
							//////////////////////////////////////
							// ВОСМСПодлежитПеречислениюВФонды
							
							Если ТекущийПлатежЯвляетсяНалогом Тогда
							
								Движение = Движения.ВОСМСПодлежитПеречислениюВФонды.Добавить();
								
								// Свойства
								Движение.Период 		= Реквизиты.Дата;
								Движение.ВидДвижения	= ВидДвиженияНакопления.Приход;
								
								// Измерения
								Движение.ФизЛицо		= Выборка.ФизЛицо;
								Если Реквизиты.ПоддержкаРаботыСоСтруктурнымиПодразделениями Или Реквизиты.РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
									Движение.СтруктурнаяЕдиница = Выборка.СтруктурнаяЕдиница;
									Движение.Налогоплательщик 	= Выборка.Налогоплательщик;
								Иначе
									Движение.СтруктурнаяЕдиница = Реквизиты.Организация;
									Движение.Налогоплательщик 	= Реквизиты.Организация;
								КонецЕсли;
								Движение.МесяцНалоговогоПериода	= Выборка.МесяцИсчисления;
								Движение.МесяцВыплатыДоходов 	= ?(Выборка.МесяцВыплатыДоходов <> NULL, Выборка.МесяцВыплатыДоходов, Выборка.МесяцИсчисления);
								Движение.Организация			= Реквизиты.Организация;
								//Остаток списываем всегда чтобы не было зависания остатков
								Движение.ПодразделениеОрганизации = Выборка.ПодразделениеОрганизации;
								
								// Ресурсы
								Движение.Взнос				= СуммаКВозврату;
								
								// Реквизиты
								Движение.ВидСтроки			= Перечисления.РасчетыСБюджетомФондамиВидСтроки.Возврат;
							
							КонецЕсли;
								
						КонецЦикла;
					
					КонецЦикла; // Пока Выборка.СледующийПоЗначениюПоля("НомерСтроки") Цикл
				
				КонецЦикла; // Пока Выборка.СледующийПоЗначениюПоля("Регистратор") Цикл
			
				Если ОстатокКВозврату <> 0 Тогда
					// невозвращенный остаток ставим на структурную единицу по месту работы

					//////////////////////////////////////
					// ВОСМСРасчетыСФондами
					
					Движение = Движения.ВОСМСРасчетыСФондами.Добавить();
					
					// Свойства
					Движение.Период 		= Реквизиты.Дата;
					Движение.ВидДвижения 	= ВидДвиженияНакопления.Приход;
					
					// Измерения
					Движение.ФизЛицо		= ТекущееФизЛицо;
					Если Реквизиты.ПоддержкаРаботыСоСтруктурнымиПодразделениями Или Реквизиты.РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
						Налогоплательщик			= ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(СтруктурнаяЕдиницаПоМестуРаботы,
																									Реквизиты.Организация,
																									Перечисления.РазделыНалоговогоУчета.НалогиСЗаработнойПлаты);
						Движение.СтруктурнаяЕдиница = СтруктурнаяЕдиницаПоМестуРаботы;
						Движение.Налогоплательщик 	= Налогоплательщик;
					Иначе
						Движение.СтруктурнаяЕдиница = Реквизиты.Организация;
						Движение.Налогоплательщик 	= Реквизиты.Организация;
					КонецЕсли;
					Движение.МесяцНалоговогоПериода = ТекущийМесяцИсчисления;
					Движение.ВидПлатежа				= ТекущийВидПлатежа;
					Движение.Организация			= Реквизиты.Организация;
					// Нераспределенный остаток относим на основное место работы только если используется распределение
					Если Реквизиты.РаспределятьНалогиПоПодразделениямОрганизаций Тогда
						Движение.ПодразделениеОрганизации = ПодразделениеОрганизацииПоМестуРаботы;
					КонецЕсли;
					
					// Ресурсы
					Движение.Взнос					= ОстатокКВозврату;
					
					// Реквизиты
					Движение.ВидСтроки				= Перечисления.РасчетыСБюджетомФондамиВидСтроки.Возврат;
					
					//////////////////////////////////////
					// ВОСМСПодлежитПеречислениюВФонды
					
					Если ТекущийПлатежЯвляетсяНалогом Тогда
					
						Движение = Движения.ВОСМСПодлежитПеречислениюВФонды.Добавить();
						
						// Свойства
						Движение.Период 		= Реквизиты.Дата;
						Движение.ВидДвижения	= ВидДвиженияНакопления.Приход;
						
						// Измерения
						Движение.ФизЛицо		= ТекущееФизЛицо;
						Если Реквизиты.ПоддержкаРаботыСоСтруктурнымиПодразделениями Или Реквизиты.РаспределятьНалогиПоСтруктурнымЕдиницам  Тогда
							Движение.СтруктурнаяЕдиница = СтруктурнаяЕдиницаПоМестуРаботы;
							Движение.Налогоплательщик 	= Налогоплательщик;
						Иначе
							Движение.СтруктурнаяЕдиница = Реквизиты.Организация;
							Движение.Налогоплательщик 	= Реквизиты.Организация;
						КонецЕсли;
						Движение.МесяцНалоговогоПериода	= ТекущийМесяцИсчисления;
						Движение.МесяцВыплатыДоходов 	= ТекущийМесяцИсчисления;
						Движение.Организация			= Реквизиты.Организация;
						// Нераспределенный остаток относим на основное место работы только если используется распределение
						Если Реквизиты.РаспределятьНалогиПоПодразделениямОрганизаций Тогда
							Движение.ПодразделениеОрганизации = ПодразделениеОрганизацииПоМестуРаботы;
						КонецЕсли;
						
						// Ресурсы
						Движение.Взнос				= ОстатокКВозврату;
						
						// Реквизиты
						Движение.ВидСтроки			= Перечисления.РасчетыСБюджетомФондамиВидСтроки.Возврат;
					
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла; // Пока Выборка.СледующийПоЗначениюПоля("МесяцИсчисления") Цикл
		
		КонецЦикла; // Пока Выборка.СледующийПоЗначениюПоля("ВидПлатежа") Цикл
	
	КонецЦикла; // Пока Выборка.СледующийПоЗначениюПоля("ФизЛицо") Цикл
	
	Движения.ВОСМСРасчетыСФондами.Записывать = Истина;
	Движения.ВОСМСПодлежитПеречислениюВФонды.Записывать = Истина;

КонецПроцедуры

Функция ПодготовитьТаблицуВозвратООСМС(Реквизиты, ТаблицаВозвратООСМС, Отказ)
	
	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("Дата", Реквизиты.Дата);
	Запрос.УстановитьПараметр("Организация", ОбщегоНазначенияБКВызовСервера.ГоловнаяОрганизацияДляУчетаЗарплаты(Реквизиты.Организация));   
	Запрос.УстановитьПараметр("ОбособленноеПодразделение", Реквизиты.Организация);
	Запрос.УстановитьПараметр("ДанныеООСМС", ТаблицаВозвратООСМС);
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДанныеООСМС.ФизЛицо,
		|	ДанныеООСМС.МесяцИсчисления,
		|	ДанныеООСМС.ВидПлатежа,
		|	ДанныеООСМС.Сумма
		|ПОМЕСТИТЬ ДанныеООСМС
		|ИЗ
		|	&ДанныеООСМС КАК ДанныеООСМС
		|ГДЕ
		|	ДанныеООСМС.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСОВозвратОтчислений.ВозвратОтчисленийОСМС)";
		
	Запрос.Выполнить();
	
	Если Реквизиты.ПоддержкаРаботыСоСтруктурнымиПодразделениями Или Реквизиты.РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
		
		ПериодыФизЛицаТекст = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДанныеООСМС.ФизЛицо,
		|	ДанныеООСМС.МесяцИсчисления КАК Период
		|ПОМЕСТИТЬ ВТ_ПериодыСотрудников
		|ИЗ
		|	ДанныеООСМС КАК ДанныеООСМС
		|";
		
		Запрос.Текст = ПериодыФизЛицаТекст + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета()
					 + СформироватьТекстЗапросаСтруктурныеЕдиницы("ВТ_ПериодыСотрудников", Истина);
		Запрос.Выполнить();
	КонецЕсли;

	Запрос.Текст =  
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ООСМСВозвратОтчислений.МесяцИсчисления КАК МесяцИсчисления,
	|	ООСМСВозвратОтчислений.ВидПлатежа КАК ВидПлатежа,
	|	ООСМСВозвратОтчислений.ФизЛицо КАК ФизЛицо,
	|	ООСМСВозвратОтчислений.Сумма КАК Сумма,
	|	ЕСТЬNULL(ООСМСРасчетыСФондами.Отчисление, 0) КАК ОСМСРасчетыСФондамиОтчисление";
	
	Если Реквизиты.ПоддержкаРаботыСоСтруктурнымиПодразделениями Или Реквизиты.РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
		
		Запрос.Текст = Запрос.Текст + ",
		|	ВЫБОР
		|		КОГДА НЕ (ООСМСРасчетыСФондами.СтруктурнаяЕдиница ЕСТЬ NULL)
		|			ТОГДА ООСМСРасчетыСФондами.СтруктурнаяЕдиница
		|		КОГДА НЕ (МестоРаботы.СтруктурнаяЕдиница ЕСТЬ NULL)
		|			ТОГДА МестоРаботы.СтруктурнаяЕдиница
		|		ИНАЧЕ &ОбособленноеПодразделение
		|	КОНЕЦ КАК СтруктурнаяЕдиница,
		|	ВЫБОР
		|		КОГДА НЕ (МестоРаботы.СтруктурнаяЕдиница ЕСТЬ NULL)
		|			ТОГДА МестоРаботы.СтруктурнаяЕдиница
		|		ИНАЧЕ &ОбособленноеПодразделение
		|	КОНЕЦ КАК СтруктурнаяЕдиницаПоМестуРаботы,
		|	ВЫБОР
		|		КОГДА НЕ (ООСМСРасчетыСФондами.ПодразделениеОрганизации ЕСТЬ NULL)
		|			ТОГДА ООСМСРасчетыСФондами.ПодразделениеОрганизации
		|		КОГДА НЕ (МестоРаботы.ПодразделениеОрганизации ЕСТЬ NULL)
		|			ТОГДА МестоРаботы.ПодразделениеОрганизации
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
		|	КОНЕЦ КАК ПодразделениеОрганизации,
		|	ВЫБОР
		|		КОГДА НЕ (МестоРаботы.ПодразделениеОрганизации ЕСТЬ NULL)
		|			ТОГДА МестоРаботы.ПодразделениеОрганизации
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
		|	КОНЕЦ КАК ПодразделениеОрганизацииПоМестуРаботы,
		|	ВЫБОР
		|		КОГДА НЕ(ООСМСРасчетыСФондами.Налогоплательщик ЕСТЬ NULL)
		|			ТОГДА ООСМСРасчетыСФондами.Налогоплательщик
		|		ИНАЧЕ &ОбособленноеПодразделение
		|	КОНЕЦ КАК Налогоплательщик";
	
	Иначе
	
		Запрос.Текст = Запрос.Текст + ", 
		|	&ОбособленноеПодразделение КАК СтруктурнаяЕдиница,
		|	&ОбособленноеПодразделение КАК СтруктурнаяЕдиницаПоМестуРаботы,
		|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) КАК ПодразделениеОрганизации,
		|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) КАК ПодразделениеОрганизацииПоМестуРаботы,
		|	&ОбособленноеПодразделение КАК Налогоплательщик";
		
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|ИЗ
	|	ДанныеООСМС КАК ООСМСВозвратОтчислений
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ООСМСРасчетыСФондами КАК ООСМСРасчетыСФондами
	|		ПО ООСМСВозвратОтчислений.ФизЛицо = ООСМСРасчетыСФондами.ФизЛицо
	|			И ООСМСВозвратОтчислений.ВидПлатежа = ООСМСРасчетыСФондами.ВидПлатежа
	|			И ООСМСВозвратОтчислений.МесяцИсчисления = ООСМСРасчетыСФондами.МесяцНалоговогоПериода
	|			И ООСМСРасчетыСФондами.Организация = &ОбособленноеПодразделение
	|			И ООСМСРасчетыСФондами.Период МЕЖДУ ООСМСВозвратОтчислений.МесяцИсчисления И КОНЕЦПЕРИОДА(&Дата, ДЕНЬ)
	|			И ООСМСРасчетыСФондами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			И ООСМСРасчетыСФондами.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Перечисление)
	|			И ООСМСРасчетыСФондами.Активность";
	
	Если Реквизиты.ПоддержкаРаботыСоСтруктурнымиПодразделениями Или Реквизиты.РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
	
		Запрос.Текст = Запрос.Текст + "
		|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_МестоРаботы КАК МестоРаботы
		|		ПО ООСМСВозвратОтчислений.ФизЛицо = МестоРаботы.ФизЛицо
		|			И ООСМСВозвратОтчислений.МесяцИсчисления = МестоРаботы.Период";
	
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	ООСМСВозвратОтчислений.ФизЛицо,
	|	ООСМСВозвратОтчислений.ВидПлатежа,
	|	ООСМСВозвратОтчислений.МесяцИсчисления,
	|	ООСМСРасчетыСФондами.Период УБЫВ // считаем, что возвращают наиболее поздние платежи
	|";
	

	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

Процедура ЗарегистрироватьДвиженияВозвратООСМС(Реквизиты, Выборка, Движения, Отказ) 
	
	Пока Выборка.СледующийПоЗначениюПоля("ФизЛицо") Цикл
		Пока Выборка.СледующийПоЗначениюПоля("ВидПлатежа") Цикл
			Пока Выборка.СледующийПоЗначениюПоля("МесяцИсчисления") Цикл
				
				// по регистрам накопления
				ОстатокКВозврату 		= Выборка.Сумма;
				ТекущееФизЛицо	 		= Выборка.ФизЛицо;
				ТекущийМесяцИсчисления	= Выборка.МесяцИсчисления;
				ТекущийВидПлатежа		= Выборка.ВидПлатежа;
				СтруктурнаяЕдиницаПоМестуРаботы = Выборка.СтруктурнаяЕдиницаПоМестуРаботы;
				ПодразделениеОрганизацииПоМестуРаботы = Выборка.ПодразделениеОрганизацииПоМестуРаботы;
				
				Пока Выборка.Следующий()
						И Выборка.ФизЛицо = ТекущееФизЛицо
						И Выборка.МесяцИсчисления = ТекущийМесяцИсчисления
						И Выборка.ВидПлатежа = ТекущийВидПлатежа
						И Выборка.Налогоплательщик <> NULL Цикл
						
					СуммаКВозврату = Мин(ОстатокКВозврату, Выборка.ОСМСРасчетыСФондамиОтчисление);
					ОстатокКВозврату = ОстатокКВозврату - СуммаКВозврату;
					
					Если СуммаКВозврату = 0 Тогда
						Продолжить;
					КонецЕсли;
					
					//////////////////////////////////
					// ООСМСРасчетыСФондами
					
					Движение = Движения.ООСМСРасчетыСФондами.Добавить();
					
					// Свойства
					Движение.Период			= Реквизиты.Дата;
					Движение.ВидДвижения	= ВидДвиженияНакопления.Приход;
					
					// Измерения
					Движение.ФизЛицо		= Выборка.ФизЛицо;
					Если Реквизиты.ПоддержкаРаботыСоСтруктурнымиПодразделениями Или Реквизиты.РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
						Движение.СтруктурнаяЕдиница	= Выборка.СтруктурнаяЕдиница;
						Движение.Налогоплательщик	= Выборка.Налогоплательщик;
					Иначе
						Движение.СтруктурнаяЕдиница	= Реквизиты.Организация;
						Движение.Налогоплательщик	= Реквизиты.Организация;
					КонецЕсли;
					Движение.МесяцНалоговогоПериода	= Выборка.МесяцИсчисления;
					Движение.ВидПлатежа				= Выборка.ВидПлатежа;
					Движение.Организация			= Реквизиты.Организация;
					// Остатки всегда списываем по подразделениям, чтобы не было зависания остатков
					Движение.ПодразделениеОрганизации = Выборка.ПодразделениеОрганизации;
					
					// Ресурсы
					Движение.Отчисление				= СуммаКВозврату;
					
					// Реквизиты
					Движение.ВидСтроки				= Перечисления.РасчетыСБюджетомФондамиВидСтроки.Возврат;
						
				КонецЦикла;
			
				Если ОстатокКВозврату <> 0 Тогда
				    // возвращенный нераспределенный остаток относим на структурную единицу по месту работы

					Движение = Движения.ООСМСРасчетыСФондами.Добавить();
					
					// Свойства
					Движение.Период			= Реквизиты.Дата;
					Движение.ВидДвижения	= ВидДвиженияНакопления.Приход;
					
					// Измерения
					Движение.ФизЛицо		= ТекущееФизЛицо;
					Если Реквизиты.ПоддержкаРаботыСоСтруктурнымиПодразделениями Или Реквизиты.РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
						Налогоплательщик			= ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(СтруктурнаяЕдиницаПоМестуРаботы,
																									Реквизиты.Организация,
																									Перечисления.РазделыНалоговогоУчета.НалогиСЗаработнойПлаты);
						Движение.СтруктурнаяЕдиница	= СтруктурнаяЕдиницаПоМестуРаботы;
						Движение.Налогоплательщик	= Налогоплательщик;
					Иначе
						Движение.СтруктурнаяЕдиница	= Реквизиты.Организация;
						Движение.Налогоплательщик	= Реквизиты.Организация;
					КонецЕсли;
					Движение.МесяцНалоговогоПериода	= ТекущийМесяцИсчисления;
					Движение.ВидПлатежа				= ТекущийВидПлатежа;
					Движение.Организация			= Реквизиты.Организация;
					//Нераспределенные остатки относим на оснровное место работы только если используется распределение
					Если Реквизиты.РаспределятьНалогиПоПодразделениямОрганизаций Тогда
						Движение.ПодразделениеОрганизации = ПодразделениеОрганизацииПоМестуРаботы;
					КонецЕсли;
					
					// Ресурсы
					Движение.Отчисление				= ОстатокКВозврату;
					
					// Реквизиты
					Движение.ВидСтроки				= Перечисления.РасчетыСБюджетомФондамиВидСтроки.Возврат;
					
				КонецЕсли;
				
			КонецЦикла; // Пока Выборка.СледующийПоЗначениюПоля("МесяцИсчисления") Цикл
		
		КонецЦикла; // Пока Выборка.СледующийПоЗначениюПоля("ВидПлатежа") Цикл
	
	КонецЦикла; // Пока Выборка.СледующийПоЗначениюПоля("ФизЛицо") Цикл

	Движения.ООСМСРасчетыСФондами.Записывать = Истина;	
	
КонецПроцедуры

// Перечисление ЕП

Процедура СформироватьДвиженияПеречислениеЕП(ТаблицаРеквизиты, ТаблицаПеречислениеЕП, Движения, Отказ) Экспорт
	
	Если ТаблицаПеречислениеЕП = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизиты[0];
	СформироватьПроводкиПеречислениеЕП(Реквизиты, ТаблицаПеречислениеЕП.Скопировать(), Движения, Отказ);
	
	Если Реквизиты.ЕстьПеречислениеЕдиногоПлатежа Тогда
		ТаблицаДвиженияЕП = ПодготовитьТаблицуДвиженияЕП(Реквизиты, ТаблицаПеречислениеЕП, Отказ); 
		ЗарегистрироватьДвиженияПеречислениеЕП(Реквизиты, ТаблицаДвиженияЕП, Движения, Отказ);
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьПроводкиПеречислениеЕП(Реквизиты, ТаблицаПеречислениеЕП, Движения, Отказ) 
	
	ВедениеУчетаПоСотрудникам = Реквизиты.ВедениеУчетаПоСотрудникам;
	
	ТаблицаФормированияПроводок = ТаблицаПеречислениеЕП;
		
	// если учет по сотрудникам не ведется, необходимо сгруппировать данные для отображения в БУ по виду платежа и месяцу исчисления
	Если НЕ ВедениеУчетаПоСотрудникам Тогда
		ТаблицаФормированияПроводок.Свернуть("ВидПлатежа, МесяцИсчисления, СчетКт, СчетКтНУ, СчетКтНУПоУмолчанию, ИмяСубконтоКт1, ИмяСубконтоКт2, СубконтоКт1, СубконтоКт2", "Сумма");
	КонецЕсли;
	
	Для Каждого СтрокаДанных Из ТаблицаФормированияПроводок Цикл
		
		// Движения по регистру "Типовой"
		
		// СчетДт
		СчетДт = Справочники.НалогиСборыОтчисления.ЕдиныйПлатеж.СчетУчетаРасчетовСКонтрагентомБУ;
		
		Если НЕ ЗначениеЗаполнено(СчетДт) Тогда
			СчетДт = ПланыСчетов.Типовой.ПрочиеНалоги; 
		КонецЕсли;
		
		// СчетДтНУ
		СчетДтНУ = Справочники.НалогиСборыОтчисления.ЕдиныйПлатеж.СчетУчетаРасчетовСКонтрагентомНУ;
			
		Если НЕ ЗначениеЗаполнено(СчетДтНУ) Тогда
			СчетДтНУПоУмолчанию = ПланыСчетов.Налоговый.ПрочиеНалоги;
			СчетДтНУ = ПроцедурыБухгалтерскогоУчета.ЗаполнитьСчетНалоговогоУчетаПоУмолчанию(СчетДт, Реквизиты.Дата, СчетДтНУПоУмолчанию);
		КонецЕсли;
		
		ТекстПроводки = СтрШаблон(НСтр("ru = 'Единый платеж за %1 г.'", ОбщегоНазначения.КодОсновногоЯзыка()), Формат(СтрокаДанных.МесяцИсчисления, "ДФ='ММММ гггг'"));
		СубконтоНалогиСборыОтчисления = Справочники.НалогиСборыОтчисления.ЕдиныйПлатеж;
		
		Проводка = Движения.Типовой.Добавить();
		
		//	Свойства
		Проводка.Период		 = Реквизиты.Дата;
		
		// Измерения
		Проводка.Организация = Реквизиты.Организация;
		
		Проводка.СчетДт		 = СчетДт;
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НалогиСборыОтчисления", СубконтоНалогиСборыОтчисления);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ВидыПлатежейВБюджетИФонды", СтрокаДанных.ВидПлатежа);
		
		Если ВедениеУчетаПоСотрудникам Тогда
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "РаботникиОрганизаций", СтрокаДанных.ФизЛицоБУ);
		КонецЕсли;
		
		Проводка.СчетКт		 = СтрокаДанных.СчетКт;
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, СтрокаДанных.ИмяСубконтоКт1, СтрокаДанных.СубконтоКт1);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, СтрокаДанных.ИмяСубконтоКт2, СтрокаДанных.СубконтоКт2);
		
		ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(Проводка, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);

		Если Проводка.СчетКт.Валютный Тогда
			Проводка.ВалютаКт 			= Реквизиты.ВалютаДокумента;
			Проводка.ВалютнаяСуммаКт 	= СтрокаДанных.Сумма;
		КонецЕсли;
		
		// Ресурсы
		Проводка.Сумма		 = СтрокаДанных.Сумма;
		
		// Реквизиты
		Проводка.Содержание	 = ТекстПроводки;
		
		//Движения по регистру "Налоговый"
		Если Реквизиты.НеобходимостьОтраженияВНУ Тогда
			ПроводкаНУ = Движения.Налоговый.Добавить();
			
			// Свойства
			ПроводкаНУ.Период			= Реквизиты.Дата;
			
			// Измерения
			ПроводкаНУ.Организация		= Реквизиты.Организация;
			
			ПроводкаНУ.СчетДт			= СчетДтНУ;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "НалогиСборыОтчисления", СубконтоНалогиСборыОтчисления);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "ВидыПлатежейВБюджетИФонды", СтрокаДанных.ВидПлатежа);
			
			Если ВедениеУчетаПоСотрудникам Тогда
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "РаботникиОрганизаций", СтрокаДанных.ФизЛицоБУ);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаДанных.СчетКтНУ) Тогда
				ПроводкаНУ.СчетКт = СтрокаДанных.СчетКтНУ;
			Иначе 
				ПроводкаНУ.СчетКт = ПроцедурыБухгалтерскогоУчета.ЗаполнитьСчетНалоговогоУчетаПоУмолчанию(СтрокаДанных.СчетКт, Реквизиты.Дата, СтрокаДанных.СчетКтНУПоУмолчанию);
			КонецЕсли;
			
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, СтрокаДанных.ИмяСубконтоКт1, СтрокаДанных.СубконтоКт1);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, СтрокаДанных.ИмяСубконтоКт2, СтрокаДанных.СубконтоКт2);
			
			ПроводкаНУ.Сумма			= СтрокаДанных.Сумма;
			
			// Реквизиты
			ПроводкаНУ.Содержание		= ТекстПроводки;
			
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(ПроводкаНУ, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);
			
			ПроцедурыНалоговогоУчета.ВидУчетаНУ(ПроводкаНУ,  Реквизиты.ВидУчетаНУ);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Движения.Типовой.Записывать = Истина;
	
	Если Реквизиты.НеобходимостьОтраженияВНУ Тогда
		Движения.Налоговый.Записывать = Истина;
	КонецЕсли;

КонецПроцедуры

Функция ПодготовитьТаблицуДвиженияЕП(Реквизиты, ТаблицаПеречислениеЕП, Отказ) 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДанныеЕП", ТаблицаПеречислениеЕП);
	Запрос.УстановитьПараметр("Организация", ОбщегоНазначенияБКВызовСервера.ГоловнаяОрганизацияДляУчетаЗарплаты(Реквизиты.Организация));   
	Запрос.УстановитьПараметр("ОбособленноеПодразделение", Реквизиты.Организация);
	Запрос.УстановитьПараметр("Дата", Реквизиты.Дата);

	// ПоддержкаРаботыСоСтруктурнымиПодразделениями отключен, на момент ввода единого платежа действует только для упрощенки 
	//ПоддержкаРаботыСоСтруктурнымиПодразделениями = Реквизиты.ПоддержкаРаботыСоСтруктурнымиПодразделениями Или Реквизиты.РаспределятьНалогиПоСтруктурнымЕдиницам;
	ПоддержкаРаботыСоСтруктурнымиПодразделениями = Ложь;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;

	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДанныеЕП.ФизЛицо,
		|	ДанныеЕП.МесяцИсчисления,
		|	ДанныеЕП.ВидПлатежа,
		|	ДанныеЕП.СпособРасчетаСуммКПеречислению,
		|	ДанныеЕП.Сумма
		|ПОМЕСТИТЬ ДанныеЕП
		|ИЗ
		|	&ДанныеЕП КАК ДанныеЕП
		|";
		
	Запрос.Выполнить();
	
	Если ПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
		
		ПериодыФизЛицаТекст = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДанныеЕП.ФизЛицо,
		|	ДанныеЕП.МесяцИсчисления КАК Период
		|ПОМЕСТИТЬ ВТ_ПериодыСотрудников
		|ИЗ
		|	ДанныеЕП КАК ДанныеЕП
		|";
		
		Запрос.Текст = ПериодыФизЛицаТекст + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета()
					 + СформироватьТекстЗапросаСтруктурныеЕдиницы("ВТ_ПериодыСотрудников", Истина);
		Запрос.Выполнить();
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапрос.МесяцИсчисления,
	|	ВложенныйЗапрос.ВидПлатежа,
	|	ВложенныйЗапрос.ФизЛицо,
	|	ВложенныйЗапрос.Сумма,
	|	ЕСТЬNULL(ЕПРасчетыСФондамиОстатки.МесяцНалоговогоПериода, ВложенныйЗапрос.МесяцИсчисления) КАК МесяцНалоговогоПериода,
	|	ЕСТЬNULL(ЕПРасчетыСФондамиОстатки.СуммаПлатежаОстаток, 0) КАК СуммаПлатежаОстаток";
	
	Если ПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
		Запрос.Текст = Запрос.Текст + ",
		|	ВЫБОР
		|		КОГДА НЕ(ЕПРасчетыСФондамиОстатки.СтруктурнаяЕдиница ЕСТЬ NULL)
		|			ТОГДА ЕПРасчетыСФондамиОстатки.СтруктурнаяЕдиница
		|		КОГДА НЕ(МестоРаботы.СтруктурнаяЕдиница ЕСТЬ NULL)
		|			ТОГДА МестоРаботы.СтруктурнаяЕдиница
		|		ИНАЧЕ &ОбособленноеПодразделение
		|	КОНЕЦ КАК СтруктурнаяЕдиница,
		|	ВЫБОР
		|		КОГДА НЕ(МестоРаботы.СтруктурнаяЕдиница ЕСТЬ NULL)
		|			ТОГДА МестоРаботы.СтруктурнаяЕдиница
		|		ИНАЧЕ &ОбособленноеПодразделение
		|	КОНЕЦ КАК СтруктурнаяЕдиницаПоМестуРаботы,
		|	&ОбособленноеПодразделение КАК СтруктурнаяЕдиница,
		|	&ОбособленноеПодразделение КАК СтруктурнаяЕдиницаПоМестуРаботы,
		|	ЕПРасчетыСФондамиОстатки.Налогоплательщик,
		|	ВЫБОР 
		|		КОГДА НЕ (ЕПРасчетыСФондамиОстатки.ПодразделениеОрганизации ЕСТЬ NULL)
		|			ТОГДА ЕПРасчетыСФондамиОстатки.ПодразделениеОрганизации
		|		КОГДА НЕ (МестоРаботы.ПодразделениеОрганизации ЕСТЬ NULL)
		|			ТОГДА МестоРаботы.ПодразделениеОрганизации
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
		|	КОНЕЦ КАК ПодразделениеОрганизации,
		|	ВЫБОР 
		|		КОГДА НЕ (МестоРаботы.ПодразделениеОрганизации ЕСТЬ NULL)
		|			ТОГДА МестоРаботы.ПодразделениеОрганизации
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
		|	КОНЕЦ КАК ПодразделениеОрганизацииПоМестуРаботы";
	Иначе
		Запрос.Текст = Запрос.Текст + ",
		|	&ОбособленноеПодразделение КАК СтруктурнаяЕдиница,
		|	&ОбособленноеПодразделение КАК СтруктурнаяЕдиницаПоМестуРаботы,
		|	&ОбособленноеПодразделение КАК Налогоплательщик,
		|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) КАК ПодразделениеОрганизации,
		|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) КАК ПодразделениеОрганизацииПоМестуРаботы";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|ИЗ
	|	ДанныеЕП КАК ВложенныйЗапрос
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЕПРасчетыСФондами.Остатки(
	|			&Дата,
	|			Организация = &ОбособленноеПодразделение
	|			И ФизЛицо В (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					ВЫРАЗИТЬ(ФизЛицо КАК Справочник.ФизическиеЛица)
	|				ИЗ
	|					ДанныеЕП КАК Док)) КАК ЕПРасчетыСФондамиОстатки
	|		ПО ВложенныйЗапрос.ФизЛицо = ЕПРасчетыСФондамиОстатки.ФизЛицо
	|			И (ВЫБОР 
	|					КОГДА ВложенныйЗапрос.СпособРасчетаСуммКПеречислению = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаСуммКПеречислениюЕП.ПоЗадолженностиЗаМесяц)
	|						ТОГДА ВложенныйЗапрос.МесяцИсчисления = ЕПРасчетыСФондамиОстатки.МесяцНалоговогоПериода
	|					ИНАЧЕ ВложенныйЗапрос.МесяцИсчисления >= ЕПРасчетыСФондамиОстатки.МесяцНалоговогоПериода
	|				КОНЕЦ)
	|			И ВложенныйЗапрос.ВидПлатежа = ЕПРасчетыСФондамиОстатки.ВидПлатежа";
	
	Если ПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
		
		Запрос.Текст = Запрос.Текст + "
		|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_МестоРаботы КАК МестоРаботы
		|		ПО ВложенныйЗапрос.ФизЛицо = МестоРаботы.ФизЛицо
		|			И ВложенныйЗапрос.МесяцИсчисления = МестоРаботы.Период";
	
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|УПОРЯДОЧИТЬ ПО
	|	ВложенныйЗапрос.ФизЛицо,
	|	ВложенныйЗапрос.ВидПлатежа,
	|	ВложенныйЗапрос.МесяцИсчисления	
	|";
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

Процедура ЗарегистрироватьДвиженияПеречислениеЕП(Реквизиты, Выборка, Движения, Отказ)

	// ПоддержкаРаботыСоСтруктурнымиПодразделениями отключен, на момент ввода единого платежа действует только для упрощенки 
	//ПоддержкаРаботыСоСтруктурнымиПодразделениями = Реквизиты.ПоддержкаРаботыСоСтруктурнымиПодразделениями ИЛИ Реквизиты.РаспределятьНалогиПоСтруктурнымЕдиницам;
	ПоддержкаРаботыСоСтруктурнымиПодразделениями = Ложь;
	
	Пока Выборка.СледующийПоЗначениюПоля("ФизЛицо") Цикл
	
		Пока Выборка.СледующийПоЗначениюПоля("ВидПлатежа") Цикл
		
			Пока Выборка.СледующийПоЗначениюПоля("МесяцИсчисления") Цикл
			
				ОстатокКСписанию 		= Выборка.Сумма;
				ТекущееФизЛицо 			= Выборка.ФизЛицо;
				ТекущийВидПлатежа		= Выборка.ВидПлатежа;
				ТекущийМесяцИсчисления	= Выборка.МесяцИсчисления;
				СтруктурнаяЕдиницаПоМестуРаботы = Выборка.СтруктурнаяЕдиницаПоМестуРаботы;
				ПодразделениеОрганизацииПоМестуРаботы = Выборка.ПодразделениеОрганизацииПоМестуРаботы;
				
				Пока Выборка.Следующий()
				   И Выборка.ФизЛицо = ТекущееФизЛицо
				   И Выборка.ВидПлатежа = ТекущийВидПлатежа
				   И Выборка.МесяцИсчисления = ТекущийМесяцИсчисления
				   И Выборка.Налогоплательщик <> NULL Цикл
				
					СуммаКСписанию 		= Мин(ОстатокКСписанию, Выборка.СуммаПлатежаОстаток);
					ОстатокКСписанию 	= ОстатокКСписанию - СуммаКСписанию;
					
					Если СуммаКСписанию = 0 Тогда
						Прервать;
					КонецЕсли;
					
					Движение = Движения.ЕПРасчетыСФондами.Добавить();
					
					// Свойства
					Движение.Период			= Реквизиты.Дата;
					Движение.ВидДвижения	= ВидДвиженияНакопления.Расход;					
					// Измерения
					Движение.ФизЛицо		= Выборка.ФизЛицо;
					Если ПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
						Движение.СтруктурнаяЕдиница	= Выборка.СтруктурнаяЕдиница;
						Движение.Налогоплательщик	= Выборка.Налогоплательщик;
					Иначе
						Движение.СтруктурнаяЕдиница	= Реквизиты.Организация;
						Движение.Налогоплательщик	= Реквизиты.Организация;
					КонецЕсли;
					Движение.МесяцНалоговогоПериода	= Выборка.МесяцНалоговогоПериода;
					Движение.ВидПлатежа				= Выборка.ВидПлатежа;
					Движение.Организация			= Реквизиты.Организация;					
					// Остатки по подразделению закрываем всегда чтобы не было зависания остатков
					Движение.ПодразделениеОрганизации = Выборка.ПодразделениеОрганизации;
					// Ресурсы
					Движение.СуммаПлатежа			= СуммаКСписанию;					
					// Реквизиты
					Движение.ВидСтроки				= Перечисления.РасчетыСБюджетомФондамиВидСтроки.Перечисление;				
				КонецЦикла;
			
				Если ОстатокКСписанию <> 0 Тогда 
				    // остаток относим на структурную единицу и налогоплательщика по месту работы

					Движение = Движения.ЕПРасчетыСФондами.Добавить();					
					// Свойства
					Движение.Период			= Реквизиты.Дата;
					Движение.ВидДвижения	= ВидДвиженияНакопления.Расход;					
					// Измерения
					Движение.ФизЛицо		= ТекущееФизЛицо;
					Если ПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
						Налогоплательщик = ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(СтруктурнаяЕдиницаПоМестуРаботы, 
																						Реквизиты.Организация,
																						Перечисления.РазделыНалоговогоУчета.НалогиСЗаработнойПлаты);
						Движение.СтруктурнаяЕдиница	= СтруктурнаяЕдиницаПоМестуРаботы;
						Движение.Налогоплательщик	= Налогоплательщик;
					Иначе
						Движение.СтруктурнаяЕдиница	= Реквизиты.Организация;
						Движение.Налогоплательщик	= Реквизиты.Организация;
					КонецЕсли;
					Движение.МесяцНалоговогоПериода	= ТекущийМесяцИсчисления;
					Движение.ВидПлатежа				= ТекущийВидПлатежа;
					Движение.Организация			= Реквизиты.Организация;
					
					// Нераспределенный остаток относим на подразделение места работы только если ведется раздельный учет налогов по подразделениям организаций
					Если Реквизиты.РаспределятьНалогиПоПодразделениямОрганизаций Тогда 
						Движение.ПодразделениеОрганизации = ПодразделениеОрганизацииПоМестуРаботы;
					КонецЕсли;
										
					// Ресурсы
					Движение.СуммаПлатежа			= ОстатокКСписанию;
					
					// Реквизиты
					Движение.ВидСтроки				= Перечисления.РасчетыСБюджетомФондамиВидСтроки.Перечисление;
				    
				КонецЕсли;
				
			КонецЦикла; // Пока Выборка.СледующийПоЗначениюПоля("МесяцИсчисления") Цикл
		
		КонецЦикла; // Пока Выборка.СледующийПоЗначениюПоля("ВидПлатежа") Цикл
	
	КонецЦикла; // Пока Выборка.СледующийПоЗначениюПоля("ФизЛицо") Цикл
	
	Движения.ЕПРасчетыСФондами.Записывать = Истина;

КонецПроцедуры

// Возврат ЕП
Процедура СформироватьДвиженияВозвратЕП(ТаблицаРеквизиты, ТаблицаВозвратЕП, Движения, Отказ) Экспорт
	
	Если ТаблицаВозвратЕП = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизиты[0];
	СформироватьПроводкиВозвратЕП(Реквизиты, ТаблицаВозвратЕП.Скопировать(), Движения, Отказ);
	
	Если Реквизиты.ЕстьВозвратЕдиногоПлатежа Тогда
		ТаблицаВозвратЕП = ПодготовитьТаблицуВозвратЕП(Реквизиты, ТаблицаВозвратЕП, Отказ); 
		ЗарегистрироватьДвиженияВозвратЕП(Реквизиты, ТаблицаВозвратЕП, Движения, Отказ);
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьПроводкиВозвратЕП(Реквизиты, ТаблицаВозвратЕП, Движения, Отказ) 
	
	// ПоддержкаРаботыСоСтруктурнымиПодразделениями отключен, на момент ввода единого платежа действует только для упрощенки 
	//ПоддержкаРаботыСоСтруктурнымиПодразделениями = Реквизиты.ПоддержкаРаботыСоСтруктурнымиПодразделениями ИЛИ Реквизиты.РаспределятьНалогиПоСтруктурнымЕдиницам;
	ПоддержкаРаботыСоСтруктурнымиПодразделениями = Ложь;
	
	ВедениеУчетаПоСотрудникам = Реквизиты.ВедениеУчетаПоСотрудникам;
	
	ТаблицаФормированияПроводок = ТаблицаВозвратЕП;
	
	// если учет по сотрудникам не ведется, необходимо сгруппировать данные для отображения в БУ по виду платежа и месяцу исчисления
	Если НЕ ВедениеУчетаПоСотрудникам Тогда
		ТаблицаФормированияПроводок.Свернуть("ВидПлатежа, МесяцИсчисления, СтатьяДвиженияДенежныхСредств", "Сумма");
	КонецЕсли;
	
	СчетКт = Справочники.НалогиСборыОтчисления.ЕдиныйПлатеж.СчетУчетаРасчетовСКонтрагентомБУ;
	СубконтоНалогиСборыОтчисления = Справочники.НалогиСборыОтчисления.ЕдиныйПлатеж;
	
	Если НЕ ЗначениеЗаполнено(СчетКт) Тогда
		СчетКт = ПланыСчетов.Типовой.ПрочиеНалоги; 
	КонецЕсли;
	
	СчетКтНУ = ПроцедурыБухгалтерскогоУчета.ЗаполнитьСчетНалоговогоУчетаПоУмолчанию(СчетКт, Реквизиты.Дата, ПланыСчетов.Налоговый.ПрочиеНалоги);
	
	Для Каждого СтрокаДанных Из ТаблицаФормированияПроводок Цикл
		
		ТекстПроводки = СтрШаблон(НСтр("ru = 'Возврат Единый платеж за %1'", ОбщегоНазначения.КодОсновногоЯзыка()), Формат(СтрокаДанных.МесяцИсчисления, "ДФ='ММММ гггг'"));
		
		////////////////////////////////////////////////////////////////////////////
		// По регистру бухгалтерии "Типовой" - возвраты взносов по работникам из фондов
		Проводка = Движения.Типовой.Добавить();

		// Свойства
		Проводка.Период			= Реквизиты.Дата;
		
		// Измерения
		Проводка.Организация	= Реквизиты.Организация;
		
		// Корреспондеция счетов и аналитика
		Проводка.СчетДт			= Реквизиты.СчетБанк;
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ДенежныеСредства"			 , Реквизиты.СчетОрганизации);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтатьиДвиженияДенежныхСредств", СтрокаДанных.СтатьяДвиженияДенежныхСредств);
		
		Если Проводка.СчетДт.Валютный Тогда
			Проводка.ВалютаДт 			= Реквизиты.ВалютаДокумента;
			Проводка.ВалютнаяСуммаДт 	= СтрокаДанных.Сумма;
		КонецЕсли;
		
		Проводка.СчетКт			= СчетКт;
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "НалогиСборыОтчисления", 	   СубконтоНалогиСборыОтчисления);			
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ВидыПлатежейВБюджетИФонды", СтрокаДанных.ВидПлатежа);
		
		Если ВедениеУчетаПоСотрудникам Тогда
			Если Реквизиты.ЕстьВозвратЕдиногоПлатежа Тогда
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "РаботникиОрганизаций",  СтрокаДанных.ФизЛицоБУ);
			Иначе
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "РаботникиОрганизаций",  СтрокаДанных.ФизЛицо);
			КонецЕсли;
		КонецЕсли;  		
		
		Проводка.Сумма			= СтрокаДанных.Сумма;
		
		// Реквизиты
		Проводка.Содержание		= ТекстПроводки;
		
		ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(Проводка, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);

		////////////////////////////////////////////////////////////////////////////
		// По регистру бухгалтерии "Налоговый" - возвраты взносов по работникам из фондов
		Если Реквизиты.НеобходимостьОтраженияВНУ Тогда
			ПроводкаНУ = Движения.Налоговый.Добавить();
		
			// Свойства
			ПроводкаНУ.Период			= Реквизиты.Дата;
			
			// Измерения
			ПроводкаНУ.Организация	= Реквизиты.Организация;
			
			// Корреспондеция счетов и аналитика
			ПроводкаНУ.СчетДт			= Реквизиты.СчетБанкНУ;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "ДенежныеСредства", 			   Реквизиты.СчетОрганизации);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "СтатьиДвиженияДенежныхСредств", СтрокаДанных.СтатьяДвиженияДенежныхСредств);
			
			ПроводкаНУ.СчетКт			= СчетКтНУ;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "НалогиСборыОтчисления",     СубконтоНалогиСборыОтчисления);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "ВидыПлатежейВБюджетИФонды", СтрокаДанных.ВидПлатежа);
			
			Если ВедениеУчетаПоСотрудникам Тогда
				Если Реквизиты.ЕстьВозвратЕдиногоПлатежа Тогда
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "РаботникиОрганизаций",  СтрокаДанных.ФизЛицоБУ);
				Иначе
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "РаботникиОрганизаций",  СтрокаДанных.ФизЛицо);
				КонецЕсли;
			КонецЕсли;  		
		                  						
			ПроводкаНУ.Сумма			= СтрокаДанных.Сумма;
			                                                                                                                          
			// Реквизиты
			ПроводкаНУ.Содержание		= ТекстПроводки;
			
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(ПроводкаНУ, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);
			
			ПроцедурыНалоговогоУчета.ВидУчетаНУ(ПроводкаНУ, Реквизиты.ВидУчетаНУ);
			
		КонецЕсли;
	КонецЦикла;
	
	Движения.Типовой.Записывать = Истина;
	Если Реквизиты.НеобходимостьОтраженияВНУ Тогда
		Движения.Налоговый.Записывать = Истина;
	КонецЕсли;
		
КонецПроцедуры

Функция ПодготовитьТаблицуВозвратЕП(Реквизиты, ТаблицаВозвратЕП, Отказ)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДанныеЕП", ТаблицаВозвратЕП);
	Запрос.УстановитьПараметр("Организация", ОбщегоНазначенияБКВызовСервера.ГоловнаяОрганизацияДляУчетаЗарплаты(Реквизиты.Организация));   
	Запрос.УстановитьПараметр("ОбособленноеПодразделение", Реквизиты.Организация);
	Запрос.УстановитьПараметр("Дата", Реквизиты.Дата);
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;

	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДанныеЕП.ФизЛицо,
		|	ДанныеЕП.ФизЛицо,
		|	ДанныеЕП.МесяцИсчисления,
		|	ДанныеЕП.ВидПлатежа,
		|	ДанныеЕП.Сумма
		|ПОМЕСТИТЬ ДанныеЕП
		|ИЗ
		|	&ДанныеЕП КАК ДанныеЕП";
		
	Запрос.Выполнить();

	// ПоддержкаРаботыСоСтруктурнымиПодразделениями отключен, на момент ввода единого платежа действует только для упрощенки 
	//ПоддержкаРаботыСоСтруктурнымиПодразделениями = Реквизиты.ПоддержкаРаботыСоСтруктурнымиПодразделениями ИЛИ Реквизиты.РаспределятьНалогиПоСтруктурнымЕдиницам;
	ПоддержкаРаботыСоСтруктурнымиПодразделениями = Ложь;

	Если ПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
		
		ПериодыФизЛицаТекст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДанныеЕП.ФизЛицо,
		|	ДанныеЕП.МесяцИсчисления КАК Период
		|ПОМЕСТИТЬ ВТ_ПериодыСотрудников
		|ИЗ
		|	ДанныеЕП КАК ДанныеЕП
		|";
		
		Запрос.Текст = ПериодыФизЛицаТекст + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета()
					 + СформироватьТекстЗапросаСтруктурныеЕдиницы("ВТ_ПериодыСотрудников", Истина);
		Запрос.Выполнить();
	КонецЕсли;

	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕПВозвратВзносов.МесяцИсчисления КАК МесяцИсчисления,
	|	ЕПВозвратВзносов.ВидПлатежа КАК ВидПлатежа,
	|	ЕПВозвратВзносов.ФизЛицо КАК ФизЛицо,
	|	ЕПВозвратВзносов.Сумма КАК Сумма,
	|	ЕСТЬNULL(ЕПВозвратВзносов.Сумма, 0) КАК ЕПРасчетыСФондамиСуммаПлатежа";
	
	Если ПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
		
		Запрос.Текст = Запрос.Текст + ",
		|	ВЫБОР
		|		КОГДА НЕ (ЕПРасчетыСФондами.СтруктурнаяЕдиница ЕСТЬ NULL)
		|			ТОГДА ЕПРасчетыСФондами.СтруктурнаяЕдиница
		|		КОГДА НЕ (МестоРаботы.СтруктурнаяЕдиница ЕСТЬ NULL)
		|			ТОГДА МестоРаботы.СтруктурнаяЕдиница
		|		ИНАЧЕ &ОбособленноеПодразделение
		|	КОНЕЦ КАК СтруктурнаяЕдиница,
		|	ВЫБОР
		|		КОГДА НЕ (МестоРаботы.СтруктурнаяЕдиница ЕСТЬ NULL)
		|			ТОГДА МестоРаботы.СтруктурнаяЕдиница
		|		ИНАЧЕ &ОбособленноеПодразделение
		|	КОНЕЦ КАК СтруктурнаяЕдиницаПоМестуРаботы,
		|	&ОбособленноеПодразделение КАК СтруктурнаяЕдиница,
		|	&ОбособленноеПодразделение КАК СтруктурнаяЕдиницаПоМестуРаботы,
		|	ВЫБОР
		|		КОГДА НЕ (ЕПРасчетыСФондами.ПодразделениеОрганизации ЕСТЬ NULL)
		|			ТОГДА ЕПРасчетыСФондами.ПодразделениеОрганизации
		|		КОГДА НЕ (МестоРаботы.ПодразделениеОрганизации ЕСТЬ NULL)
		|			ТОГДА МестоРаботы.ПодразделениеОрганизации
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
		|	КОНЕЦ КАК ПодразделениеОрганизации,
		|	ВЫБОР
		|		КОГДА НЕ (МестоРаботы.ПодразделениеОрганизации ЕСТЬ NULL)
		|			ТОГДА МестоРаботы.ПодразделениеОрганизации
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
		|	КОНЕЦ КАК ПодразделениеОрганизацииПоМестуРаботы,
		|	ВЫБОР
		|		КОГДА НЕ(ЕПРасчетыСФондами.Налогоплательщик ЕСТЬ NULL)
		|			ТОГДА ЕПРасчетыСФондами.Налогоплательщик
		|		ИНАЧЕ &ОбособленноеПодразделение
		|	КОНЕЦ КАК Налогоплательщик";
	
	Иначе
	
		Запрос.Текст = Запрос.Текст + ", 
		|	&ОбособленноеПодразделение КАК СтруктурнаяЕдиница,
		|	&ОбособленноеПодразделение КАК СтруктурнаяЕдиницаПоМестуРаботы,
		|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) КАК ПодразделениеОрганизации,
		|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) КАК ПодразделениеОрганизацииПоМестуРаботы,
		|	&ОбособленноеПодразделение КАК Налогоплательщик";
		
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|ИЗ
	|	ДанныеЕП КАК ЕПВозвратВзносов
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЕПРасчетыСФондами КАК ЕПРасчетыСФондами
	|		ПО ЕПВозвратВзносов.ФизЛицо = ЕПРасчетыСФондами.ФизЛицо
	|			И ЕПВозвратВзносов.ВидПлатежа = ЕПРасчетыСФондами.ВидПлатежа
	|			И ЕПВозвратВзносов.МесяцИсчисления = ЕПРасчетыСФондами.МесяцНалоговогоПериода
	|			И ЕПРасчетыСФондами.Организация = &ОбособленноеПодразделение
	|			И ЕПРасчетыСФондами.Период МЕЖДУ ЕПВозвратВзносов.МесяцИсчисления И КОНЕЦПЕРИОДА(&Дата, ДЕНЬ)
	|			И ЕПРасчетыСФондами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			И ЕПРасчетыСФондами.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Перечисление)
	|			И ЕПРасчетыСФондами.Активность";
	
	Если ПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
	
		Запрос.Текст = Запрос.Текст + "
		|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_МестоРаботы КАК МестоРаботы
		|		ПО ЕПВозвратВзносов.ФизЛицо = МестоРаботы.ФизЛицо
		|			И ЕПВозвратВзносов.МесяцИсчисления = МестоРаботы.Период";
	
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЕПВозвратВзносов.ФизЛицо,
	|	ЕПВозвратВзносов.ВидПлатежа,
	|	ЕПВозвратВзносов.МесяцИсчисления,
	|	ЕПРасчетыСФондами.Период УБЫВ // считаем, что возвращают наиболее поздние платежи
	|";
	
	Возврат Запрос.Выполнить().Выбрать();

КонецФункции

Процедура ЗарегистрироватьДвиженияВозвратЕП(Реквизиты, Выборка, Движения, Отказ) 

	// ПоддержкаРаботыСоСтруктурнымиПодразделениями отключен, на момент ввода единого платежа действует только для упрощенки 
	//ПоддержкаРаботыСоСтруктурнымиПодразделениями = Реквизиты.ПоддержкаРаботыСоСтруктурнымиПодразделениями ИЛИ Реквизиты.РаспределятьНалогиПоСтруктурнымЕдиницам;
	ПоддержкаРаботыСоСтруктурнымиПодразделениями = Ложь;
	
	Пока Выборка.СледующийПоЗначениюПоля("ФизЛицо") Цикл

		Пока Выборка.СледующийПоЗначениюПоля("ВидПлатежа") Цикл
		
			Пока Выборка.СледующийПоЗначениюПоля("МесяцИсчисления") Цикл
				
				// по регистрам накопления
				ОстатокКВозврату 		= Выборка.Сумма;
				ТекущееФизЛицо	 		= Выборка.ФизЛицо;
				ТекущийМесяцИсчисления	= Выборка.МесяцИсчисления;
				ТекущийВидПлатежа		= Выборка.ВидПлатежа;
				СтруктурнаяЕдиницаПоМестуРаботы = Выборка.СтруктурнаяЕдиницаПоМестуРаботы;
				ПодразделениеОрганизацииПоМестуРаботы = Выборка.ПодразделениеОрганизацииПоМестуРаботы;
				
				Пока Выборка.Следующий()
						И Выборка.ФизЛицо = ТекущееФизЛицо
						И Выборка.МесяцИсчисления = ТекущийМесяцИсчисления
						И Выборка.ВидПлатежа = ТекущийВидПлатежа
						И Выборка.Налогоплательщик <> NULL Цикл
						
					СуммаКВозврату = Мин(ОстатокКВозврату, Выборка.ЕПРасчетыСФондамиСуммаПлатежа);
					ОстатокКВозврату = ОстатокКВозврату - СуммаКВозврату;
					
					Если СуммаКВозврату = 0 Тогда
						Продолжить;
					КонецЕсли;
					
					//////////////////////////////////
					// ЕПРасчетыСФондами
					
					Движение = Движения.ЕПРасчетыСФондами.Добавить();
					
					// Свойства
					Движение.Период			= Реквизиты.Дата;
					Движение.ВидДвижения	= ВидДвиженияНакопления.Приход;
					
					// Измерения
					Движение.ФизЛицо		= Выборка.ФизЛицо;
					Если ПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
						Движение.СтруктурнаяЕдиница	= Выборка.СтруктурнаяЕдиница;
						Движение.Налогоплательщик	= Выборка.Налогоплательщик;
					Иначе
						Движение.СтруктурнаяЕдиница	= Реквизиты.Организация;
						Движение.Налогоплательщик	= Реквизиты.Организация;
					КонецЕсли;
					Движение.МесяцНалоговогоПериода	= Выборка.МесяцИсчисления;
					Движение.ВидПлатежа				= Выборка.ВидПлатежа;
					Движение.Организация			= Реквизиты.Организация;
					// Остатки всегда списываем по подразделениям, чтобы не было зависания остатков
					Движение.ПодразделениеОрганизации = Выборка.ПодразделениеОрганизации;
										
					// Ресурсы
					Движение.СуммаПлатежа			= СуммаКВозврату;
					
					// Реквизиты
					Движение.ВидСтроки				= Перечисления.РасчетыСБюджетомФондамиВидСтроки.Возврат;
						
				КонецЦикла;
			
				Если ОстатокКВозврату <> 0 Тогда
				    // возвращенный нераспределенный остаток относим на структурную единицу по месту работы

					Движение = Движения.ЕПРасчетыСФондами.Добавить();
					
					// Свойства
					Движение.Период			= Реквизиты.Дата;
					Движение.ВидДвижения	= ВидДвиженияНакопления.Приход;
					
					// Измерения
					Движение.ФизЛицо		= ТекущееФизЛицо;
					Если ПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
						Налогоплательщик			= ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(СтруктурнаяЕдиницаПоМестуРаботы,
																									Реквизиты.Организация,
																									Перечисления.РазделыНалоговогоУчета.НалогиСЗаработнойПлаты);
						Движение.СтруктурнаяЕдиница	= СтруктурнаяЕдиницаПоМестуРаботы;
						Движение.Налогоплательщик	= Налогоплательщик;
					Иначе
						Движение.СтруктурнаяЕдиница	= Реквизиты.Организация;
						Движение.Налогоплательщик	= Реквизиты.Организация;
					КонецЕсли;
					Движение.МесяцНалоговогоПериода	= ТекущийМесяцИсчисления;
					Движение.ВидПлатежа				= ТекущийВидПлатежа;
					Движение.Организация			= Реквизиты.Организация;
					//Нераспределенные остатки относим на оснровное место работы только если используется распределение
					Если Реквизиты.РаспределятьНалогиПоПодразделениямОрганизаций Тогда
						Движение.ПодразделениеОрганизации = ПодразделениеОрганизацииПоМестуРаботы;
					КонецЕсли;
					
					// Ресурсы
					Движение.СуммаПлатежа			= ОстатокКВозврату;
					
					// Реквизиты
					Движение.ВидСтроки				= Перечисления.РасчетыСБюджетомФондамиВидСтроки.Возврат;
					
				КонецЕсли;
				
			КонецЦикла; // Пока Выборка.СледующийПоЗначениюПоля("МесяцИсчисления") Цикл
		
		КонецЦикла; // Пока Выборка.СледующийПоЗначениюПоля("ВидПлатежа") Цикл
	
	КонецЦикла; // Пока Выборка.СледующийПоЗначениюПоля("ФизЛицо") Цикл

	Движения.ЕПРасчетыСФондами.Записывать = Истина;
	
КонецПроцедуры

// Возврат Прочих выплат
Процедура СформироватьДвиженияВозвратПрочихВыплат(ТаблицаРеквизиты, ТаблицаВозвратПрочихВыплат, Движения, Отказ) Экспорт
	
	Если ТаблицаВозвратПрочихВыплат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизиты[0];
	СформироватьПроводкиВозвратПрочихВыплат(Реквизиты, ТаблицаВозвратПрочихВыплат.Скопировать(), Движения, Отказ);
	
	Если Реквизиты.ЕстьВозвратПрочихВыплат Тогда
		ТаблицаВозвратПрочихВыплат = ПодготовитьТаблицуВозвратПрочихВыплат(Реквизиты, ТаблицаВозвратПрочихВыплат, Отказ); 
		ЗарегистрироватьДвиженияВозвратПрочихВыплат(Реквизиты, ТаблицаВозвратПрочихВыплат, Движения, Отказ);
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьПроводкиВозвратПрочихВыплат(Реквизиты, ТаблицаВозвратПрочихВыплат, Движения, Отказ) 
		
	ТаблицаФормированияПроводок = ТаблицаВозвратПрочихВыплат;
			
	Для Каждого СтрокаДанных Из ТаблицаФормированияПроводок Цикл
				
		////////////////////////////////////////////////////////////////////////////
		// По регистру бухгалтерии "Типовой" - возвраты взносов по работникам из фондов
		Проводка = Движения.Типовой.Добавить();

		// Свойства
		Проводка.Период			= Реквизиты.Дата;
		
		// Измерения
		Проводка.Организация	= Реквизиты.Организация;
		
		// Корреспондеция счетов и аналитика
		
		//СчетДт
		Проводка.СчетДт			= Реквизиты.СчетБанк;
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ДенежныеСредства"			 , Реквизиты.СчетОрганизации);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтатьиДвиженияДенежныхСредств", СтрокаДанных.СтатьяДвиженияДенежныхСредств);
		
		Если Проводка.СчетДт.Валютный Тогда
			Проводка.ВалютаДт 			= Реквизиты.ВалютаДокумента;
			Проводка.ВалютнаяСуммаДт 	= СтрокаДанных.Сумма;
		КонецЕсли; 
		
		//СчетКт	
		СчетКт = СтрокаДанных.СчетКтБУ;  
				
		// СчетКтНУ
		СчетКтНУ = СтрокаДанных.СчетКтНУ;
					
		Проводка.СчетКт = СчетКт; 
			
		//Заполняем субконто из способа отражения
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтрокаДанных.СубконтоКтБУ1);			
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтрокаДанных.СубконтоКтБУ2);			
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, СтрокаДанных.СубконтоКтБУ3); 
		
		//Если в способе отражения указан Счет с субконто РаботникиОрганизаций, но субконто не заполнено, то заполняем физ.лицом из строки
		СвойстваСчетаКт    = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(СчетКт);
		Для ИндексСубконто = 1 По СвойстваСчетаКт.КоличествоСубконто Цикл
			Если СвойстваСчетаКт["ВидСубконто" + ИндексСубконто] = ПланыВидовХарактеристик.ВидыСубконтоТиповые.РаботникиОрганизаций И НЕ ЗначениеЗаполнено(СтрокаДанных["СубконтоКтБУ" + ИндексСубконто]) И ЗначениеЗаполнено(СтрокаДанных.ФизЛицо) Тогда
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка["СубконтоКт"], "РаботникиОрганизаций", СтрокаДанных.ФизЛицо);
			КонецЕсли;
			Если СвойстваСчетаКт["ВидСубконто" + ИндексСубконто] = ПланыВидовХарактеристик.ВидыСубконтоТиповые.ВидыПрочихВыплат И НЕ ЗначениеЗаполнено(СтрокаДанных["СубконтоКтБУ" + ИндексСубконто]) И ЗначениеЗаполнено(СтрокаДанных.ВидПрочихВыплат) Тогда
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка["СубконтоКт"], "ВидыПрочихВыплат", СтрокаДанных.ВидПрочихВыплат);
			КонецЕсли;
		КонецЦикла;  
					
		Проводка.Сумма			= СтрокаДанных.Сумма;
		
		// Реквизиты
		Если СтрокаДанных.ВидПрочихВыплат = Справочники.ВидыПрочихВыплат.ПрофессиональнаяВыплатаЗаСчетРаботодателя Тогда
			ТекстПроводки = НСтр("ru='Проф.выплата за счет работодателя (возврат)'", ОбщегоНазначения.КодОсновногоЯзыка());			
		Иначе	
			ТекстПроводки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 (возврат)'", ОбщегоНазначения.КодОсновногоЯзыка()),
								?(ЗначениеЗаполнено(СтрокаДанных.ВидПрочихВыплат.ПолноеНаименование), СтрокаДанных.ВидПрочихВыплат.ПолноеНаименование, СтрокаДанных.ВидПрочихВыплат.Наименование));		
		КонецЕсли;
		
		Проводка.Содержание = ТекстПроводки;
		
		ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(Проводка, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);

		////////////////////////////////////////////////////////////////////////////
		// По регистру бухгалтерии "Налоговый" - возвраты взносов по работникам из фондов
		Если Реквизиты.НеобходимостьОтраженияВНУ Тогда
			ПроводкаНУ = Движения.Налоговый.Добавить();
		
			// Свойства
			ПроводкаНУ.Период			= Реквизиты.Дата;
			
			// Измерения
			ПроводкаНУ.Организация	= Реквизиты.Организация;
			
			// Корреспондеция счетов и аналитика
			ПроводкаНУ.СчетДт			= Реквизиты.СчетБанкНУ;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "ДенежныеСредства", 			   Реквизиты.СчетОрганизации);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "СтатьиДвиженияДенежныхСредств", СтрокаДанных.СтатьяДвиженияДенежныхСредств);
			
			ПроводкаНУ.СчетКт			= СчетКтНУ;
			
			//Заполняем субконто из способа отражения
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 1, СтрокаДанных.СубконтоКтНУ1);			
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 2, СтрокаДанных.СубконтоКтНУ2);			
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 3, СтрокаДанных.СубконтоКтНУ3);
			
			//Если в способе отражения указан Счет с субконто РаботникиОрганизаций, но субконто не заполнено, то заполняем физ.лицом из строки
			СвойстваСчетаКтНУ    = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(СчетКтНУ);
			Для ИндексСубконто = 1 По СвойстваСчетаКтНУ.КоличествоСубконто Цикл
				Если СвойстваСчетаКтНУ["ВидСубконто" + ИндексСубконто] = ПланыВидовХарактеристик.ВидыСубконтоТиповые.РаботникиОрганизаций И НЕ ЗначениеЗаполнено(СтрокаДанных["СубконтоКтНУ" + ИндексСубконто]) И ЗначениеЗаполнено(СтрокаДанных.ФизЛицо) Тогда
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "РаботникиОрганизаций", СтрокаДанных.ФизЛицо);
				КонецЕсли; 
				Если СвойстваСчетаКтНУ["ВидСубконто" + ИндексСубконто] = ПланыВидовХарактеристик.ВидыСубконтоТиповые.ВидыПрочихВыплат И НЕ ЗначениеЗаполнено(СтрокаДанных["СубконтоКтНУ" + ИндексСубконто]) И ЗначениеЗаполнено(СтрокаДанных.ВидПрочихВыплат) Тогда
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "ВидыПрочихВыплат", СтрокаДанных.ВидПрочихВыплат);
				КонецЕсли;
			КонецЦикла; 		
		                  						
			ПроводкаНУ.Сумма			= СтрокаДанных.Сумма;
			                                                                                                                          
			// Реквизиты
			ПроводкаНУ.Содержание		= ТекстПроводки;		
			
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(ПроводкаНУ, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);
			
			ПроцедурыНалоговогоУчета.ВидУчетаНУ(ПроводкаНУ, Реквизиты.ВидУчетаНУ);
			
		КонецЕсли;
	КонецЦикла;
	
	Движения.Типовой.Записывать = Истина;
	Если Реквизиты.НеобходимостьОтраженияВНУ Тогда
		Движения.Налоговый.Записывать = Истина;
	КонецЕсли;
			
КонецПроцедуры

Функция ПодготовитьТаблицуВозвратПрочихВыплат(Реквизиты, ТаблицаВозвратПрочихВыплат, Отказ)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДанныеПрочиеВыплаты", ТаблицаВозвратПрочихВыплат);
	Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);   
	Запрос.УстановитьПараметр("ОбособленноеПодразделение", Реквизиты.Организация);
	Запрос.УстановитьПараметр("Дата", Реквизиты.Дата);
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;

	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДанныеПрочиеВыплаты.ФизЛицо,
		|	ДанныеПрочиеВыплаты.ПериодВзаиморасчетов,
		|	ДанныеПрочиеВыплаты.ВидПрочихВыплат,
		|	ДанныеПрочиеВыплаты.Сумма
		|ПОМЕСТИТЬ ДанныеПрочиеВыплаты
		|ИЗ
		|	&ДанныеПрочиеВыплаты КАК ДанныеПрочиеВыплаты";
		
	Запрос.Выполнить();
	
	ПоддержкаРаботыСоСтруктурнымиПодразделениями = Реквизиты.ПоддержкаРаботыСоСтруктурнымиПодразделениями;

	Если ПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
		
		ПериодыФизЛицаТекст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДанныеПрочиеВыплаты.ФизЛицо,
		|	ДанныеПрочиеВыплаты.ПериодВзаиморасчетов КАК Период
		|ПОМЕСТИТЬ ВТ_ПериодыФизЛиц
		|ИЗ
		|	ДанныеПрочиеВыплаты КАК ДанныеПрочиеВыплаты
		|";
		
		Запрос.Текст = ПериодыФизЛицаТекст + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета()
					 + СформироватьТекстЗапросаСтруктурныеЕдиницы("ВТ_ПериодыФизЛиц", Истина);
		Запрос.Выполнить();
	КонецЕсли;

	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВозвратПрочихВыплат.ПериодВзаиморасчетов КАК ПериодВзаиморасчетов,
	|	ВозвратПрочихВыплат.ВидПрочихВыплат КАК ВидПрочихВыплат,
	|	ВозвратПрочихВыплат.ФизЛицо КАК ФизЛицо,
	|	ВозвратПрочихВыплат.Сумма КАК Сумма,
	|	ЕСТЬNULL(ВзаиморасчетыПоПрочимВыплатам.СуммаВзаиморасчетов, 0) КАК ВзаиморасчетыПоПрочимВыплатамСуммаВзаиморасчетов";
	
	Если ПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
		
		Запрос.Текст = Запрос.Текст + ",
		|	ВЫБОР
		|		КОГДА НЕ (ВзаиморасчетыПоПрочимВыплатам.СтруктурнаяЕдиница ЕСТЬ NULL)
		|			ТОГДА ВзаиморасчетыПоПрочимВыплатам.СтруктурнаяЕдиница
		|		ИНАЧЕ &ОбособленноеПодразделение
		|	КОНЕЦ КАК СтруктурнаяЕдиница,
		|	ВЫБОР
		|		КОГДА НЕ(ВзаиморасчетыПоПрочимВыплатам.Налогоплательщик ЕСТЬ NULL)
		|			ТОГДА ВзаиморасчетыПоПрочимВыплатам.Налогоплательщик
		|		ИНАЧЕ &ОбособленноеПодразделение
		|	КОНЕЦ КАК Налогоплательщик";
	
	Иначе
	
		Запрос.Текст = Запрос.Текст + ", 
		|	&ОбособленноеПодразделение КАК СтруктурнаяЕдиница,
		|	&ОбособленноеПодразделение КАК Налогоплательщик";
		
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|ИЗ
	|	ДанныеПрочиеВыплаты КАК ВозвратПрочихВыплат
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВзаиморасчетыПоПрочимВыплатам КАК ВзаиморасчетыПоПрочимВыплатам
	|		ПО ВозвратПрочихВыплат.ФизЛицо = ВзаиморасчетыПоПрочимВыплатам.ФизЛицо
	|			И ВозвратПрочихВыплат.ВидПрочихВыплат = ВзаиморасчетыПоПрочимВыплатам.ВидПрочихВыплат
	|			И ВозвратПрочихВыплат.ПериодВзаиморасчетов = ВзаиморасчетыПоПрочимВыплатам.ПериодВзаиморасчетов
	|			И ВзаиморасчетыПоПрочимВыплатам.Организация = &ОбособленноеПодразделение
	|			И ВзаиморасчетыПоПрочимВыплатам.Период МЕЖДУ ВозвратПрочихВыплат.ПериодВзаиморасчетов И КОНЕЦПЕРИОДА(&Дата, ДЕНЬ)
	|			И ВзаиморасчетыПоПрочимВыплатам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			И ВзаиморасчетыПоПрочимВыплатам.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Перечисление)
	|			И ВзаиморасчетыПоПрочимВыплатам.Активность";
		
	Запрос.Текст = Запрос.Текст + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВозвратПрочихВыплат.ФизЛицо,
	|	ВозвратПрочихВыплат.ВидПрочихВыплат,
	|	ВозвратПрочихВыплат.ПериодВзаиморасчетов,
	|	ВзаиморасчетыПоПрочимВыплатам.Период УБЫВ // считаем, что возвращают наиболее поздние платежи
	|";
	
	Возврат Запрос.Выполнить().Выбрать();

КонецФункции

Процедура ЗарегистрироватьДвиженияВозвратПрочихВыплат(Реквизиты, Выборка, Движения, Отказ) 

	ПоддержкаРаботыСоСтруктурнымиПодразделениями = Реквизиты.ПоддержкаРаботыСоСтруктурнымиПодразделениями;
	
	Пока Выборка.СледующийПоЗначениюПоля("ФизЛицо") Цикл

		Пока Выборка.СледующийПоЗначениюПоля("ВидПрочихВыплат") Цикл
		
			Пока Выборка.СледующийПоЗначениюПоля("ПериодВзаиморасчетов") Цикл
				
				// по регистрам накопления
				ОстатокКВозврату 		    = Выборка.Сумма;
				ТекущееФизЛицо	 		    = Выборка.ФизЛицо;
				ТекущийПериодВзаиморасчетов	= Выборка.ПериодВзаиморасчетов;
				ТекущийВидПрочихВыплат		= Выборка.ВидПрочихВыплат;
				
				Пока Выборка.Следующий()
						И Выборка.ФизЛицо = ТекущееФизЛицо
						И Выборка.ПериодВзаиморасчетов = ТекущийПериодВзаиморасчетов
						И Выборка.ВидПрочихВыплат = ТекущийВидПрочихВыплат
						И Выборка.Налогоплательщик <> NULL Цикл
						
					СуммаКВозврату = Мин(ОстатокКВозврату, Выборка.ВзаиморасчетыПоПрочимВыплатамСуммаВзаиморасчетов);
					ОстатокКВозврату = ОстатокКВозврату - СуммаКВозврату;
					
					Если СуммаКВозврату = 0 Тогда
						Продолжить;
					КонецЕсли;
					
					//////////////////////////////////
					// ВзаиморасчетыПоПрочимВыплатам
					
					Движение = Движения.ВзаиморасчетыПоПрочимВыплатам.Добавить();
					
					// Свойства
					Движение.Период			= Реквизиты.Дата;
					Движение.ВидДвижения	= ВидДвиженияНакопления.Приход;
					
					// Измерения
					Движение.ФизЛицо		= Выборка.ФизЛицо;
					Если ПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
						Движение.СтруктурнаяЕдиница	= Выборка.СтруктурнаяЕдиница;
						Движение.Налогоплательщик	= Выборка.Налогоплательщик;
					Иначе
						Движение.СтруктурнаяЕдиница	= Реквизиты.Организация;
						Движение.Налогоплательщик	= Реквизиты.Организация;
					КонецЕсли;
					Движение.ПериодВзаиморасчетов	= Выборка.ПериодВзаиморасчетов;
					Движение.ВидПрочихВыплат		= Выборка.ВидПрочихВыплат;
					Движение.Организация			= Реквизиты.Организация;
										
					// Ресурсы
					Движение.СуммаВзаиморасчетов			= СуммаКВозврату;
					
					// Реквизиты
					Движение.ВидСтроки				= Перечисления.РасчетыСБюджетомФондамиВидСтроки.Возврат;
						
				КонецЦикла;
			
				Если ОстатокКВозврату <> 0 Тогда
				    // возвращенный нераспределенный остаток относим на структурную единицу по месту работы

					Движение = Движения.ВзаиморасчетыПоПрочимВыплатам.Добавить();
					
					// Свойства
					Движение.Период			= Реквизиты.Дата;
					Движение.ВидДвижения	= ВидДвиженияНакопления.Приход;
					
					// Измерения
					Движение.ФизЛицо		= ТекущееФизЛицо;
					Если ПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
						Движение.СтруктурнаяЕдиница	= Выборка.СтруктурнаяЕдиница;
						Движение.Налогоплательщик	= Выборка.Налогоплательщик;
					Иначе
						Движение.СтруктурнаяЕдиница	= Реквизиты.Организация;
						Движение.Налогоплательщик	= Реквизиты.Организация;
					КонецЕсли;
					Движение.ПериодВзаиморасчетов	= ТекущийПериодВзаиморасчетов;
					Движение.ВидПрочихВыплат	    = ТекущийВидПрочихВыплат;
					Движение.Организация			= Реквизиты.Организация;
					
					// Ресурсы
					Движение.СуммаВзаиморасчетов			= ОстатокКВозврату;
					
					// Реквизиты
					Движение.ВидСтроки				= Перечисления.РасчетыСБюджетомФондамиВидСтроки.Возврат;
					
				КонецЕсли;
				
			КонецЦикла; // Пока Выборка.СледующийПоЗначениюПоля("ПериодВзаиморасчетов") Цикл
		
		КонецЦикла; // Пока Выборка.СледующийПоЗначениюПоля("ВидПрочихВыплат") Цикл
	
	КонецЦикла; // Пока Выборка.СледующийПоЗначениюПоля("ФизЛицо") Цикл

	Движения.ВзаиморасчетыПоПрочимВыплатам.Записывать = Истина;
		
КонецПроцедуры

// Перечисление по ИЛ

Процедура СформироватьДвиженияПеречислениеПоИЛ(ТаблицаРеквизиты, ТаблицаПеречислениеПоИЛ, Движения, Отказ) Экспорт
	
	Если ТаблицаПеречислениеПоИЛ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизиты[0];
	
	СформироватьПроводкиПеречислениеПоИЛ(Реквизиты, ТаблицаПеречислениеПоИЛ, Движения, Отказ);
	ТаблицаДвиженияПоИЛ = ПодготовитьТаблицуДвиженияПоИЛ(Реквизиты, ТаблицаПеречислениеПоИЛ, Отказ);
	ЗарегистрироватьДвиженияПеречислениеПоИЛ(Реквизиты, ТаблицаДвиженияПоИЛ, Движения, Отказ);
	
КонецПроцедуры

Процедура СформироватьПроводкиПеречислениеПоИЛ(Реквизиты, ТаблицаПеречислениеПоИЛ, Движения, Отказ)
	
	Для Каждого СтрокаДанных ИЗ ТаблицаПеречислениеПоИЛ Цикл

		Если СтрокаДанных.Сумма <> 0 Тогда
			
			ТекстПроводки = СтрШаблон(НСтр("ru = 'ИЛ %1 от %2 за %3 от %4'", ОбщегоНазначения.КодОсновногоЯзыка()),
				СокрЛП(СтрокаДанных.НомерИЛ),
				Формат(СтрокаДанных.ДатаИЛ, "ДФ='дд.ММ.гг'"),
				Формат(СтрокаДанных.ПериодВзаиморасчетов, "ДФ='МММ гг'"),
				СокрЛП(СтрокаДанных.ФИОРаботника));
			
			// Формируем проводки по перечислению по ИЛ
			Проводка = Движения.Типовой.Добавить();
			
			Проводка.Период      = Реквизиты.Дата;
			Проводка.Организация = Реквизиты.Организация;
			Проводка.Сумма       = ?(СтрокаДанных.СозданПриОбмене, СтрокаДанных.СуммаВзаиморасчетов, СтрокаДанных.Сумма);
			
			Проводка.СчетДт      = ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПоИсполнительнымЛистам;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтрокаДанных.Получатель);
			
			Проводка.СчетКт      = СтрокаДанных.СчетКт;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, СтрокаДанных.ИмяСубконтоКт1, СтрокаДанных.СубконтоКт1);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, СтрокаДанных.ИмяСубконтоКт2, СтрокаДанных.СубконтоКт2);
			
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(Проводка, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);
			
			Если Проводка.СчетКт.Валютный Тогда
				Проводка.ВалютаКт 			= Реквизиты.ВалютаДокумента;
				Проводка.ВалютнаяСуммаКт 	= ?(СтрокаДанных.СозданПриОбмене, СтрокаДанных.СуммаВзаиморасчетов, СтрокаДанных.Сумма);
			КонецЕсли;
			
			Проводка.Содержание  = ТекстПроводки;
			
			Если Реквизиты.НеобходимостьОтраженияВНУ Тогда
				// Формируем проводки по НУ перечислению по ИЛ
				ПроводкаНУ = Движения.Налоговый.Добавить();
				
				ПроводкаНУ.Период      = Реквизиты.Дата;
				ПроводкаНУ.Организация = Реквизиты.Организация;
				ПроводкаНУ.Сумма       = ?(СтрокаДанных.СозданПриОбмене, СтрокаДанных.СуммаВзаиморасчетов, СтрокаДанных.Сумма);
				
				ПроводкаНУ.СчетДт      = ПроцедурыБухгалтерскогоУчета.ЗаполнитьСчетНалоговогоУчетаПоУмолчанию(ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПоИсполнительнымЛистам, Реквизиты.Дата, ПланыСчетов.Налоговый.ЗадолженностьПоИсполнительнымЛистам);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "Контрагенты", СтрокаДанных.Получатель);
				
				Если ЗначениеЗаполнено(СтрокаДанных.СчетКтНУ) Тогда
					ПроводкаНУ.СчетКт = СтрокаДанных.СчетКтНУ;
				Иначе 
					ПроводкаНУ.СчетКт = ПроцедурыБухгалтерскогоУчета.ЗаполнитьСчетНалоговогоУчетаПоУмолчанию(СтрокаДанных.СчетКт, Реквизиты.Дата, СтрокаДанных.СчетКтНУПоУмолчанию);
				КонецЕсли;
				
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, СтрокаДанных.ИмяСубконтоКт1, СтрокаДанных.СубконтоКт1);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, СтрокаДанных.ИмяСубконтоКт2, СтрокаДанных.СубконтоКт2);
				
				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(ПроводкаНУ, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);
				
				ПроцедурыНалоговогоУчета.ВидУчетаНУ(ПроводкаНУ, Реквизиты.ВидУчетаНУ);
				
				ПроводкаНУ.Содержание  = ТекстПроводки;
				
            КонецЕсли;
            
            Если СтрокаДанных.СозданПриОбмене
                И СтрокаДанных.СуммаСборов <> 0 Тогда
                // Формируем проводки по перечислению по ИЛ
                Проводка = Движения.Типовой.Добавить();
                
                Проводка.Период      = Реквизиты.Дата;
                Проводка.Организация = Реквизиты.Организация;
                Проводка.Сумма       = СтрокаДанных.СуммаСборов;
                
                Проводка.СчетДт      = ПланыСчетов.Типовой.ПрочаяКраткосрочнаяКредиторскаяЗадолженность;
                ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтрокаДанных.ПлатежныйАгент);
                ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры", ОбщегоНазначенияБК.ДоступныйДоговорКонтрагента(СтрокаДанных.ПлатежныйАгент["ОсновнойДоговорКонтрагента"]));
                
                Проводка.СчетКт      = СтрокаДанных.СчетКт;
                ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, СтрокаДанных.ИмяСубконтоКт1, СтрокаДанных.СубконтоКт1);
                ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, СтрокаДанных.ИмяСубконтоКт2, СтрокаДанных.СубконтоКт2);
                
                ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(Проводка, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);
                
                Если Проводка.СчетКт.Валютный Тогда
                    Проводка.ВалютаКт 			= Реквизиты.ВалютаДокумента;
                    Проводка.ВалютнаяСуммаКт 	= СтрокаДанных.СуммаСборов;
                КонецЕсли;
                
                Проводка.Содержание  = ТекстПроводки;
                
                Если Реквизиты.НеобходимостьОтраженияВНУ Тогда
                    // Формируем проводки по НУ перечислению по ИЛ
                    ПроводкаНУ = Движения.Налоговый.Добавить();
                    
                    ПроводкаНУ.Период      = Реквизиты.Дата;
                    ПроводкаНУ.Организация = Реквизиты.Организация;
                    ПроводкаНУ.Сумма       = СтрокаДанных.СуммаСборов;
                    
                    ПроводкаНУ.СчетДт      = ПроцедурыБухгалтерскогоУчета.ЗаполнитьСчетНалоговогоУчетаПоУмолчанию(ПланыСчетов.Типовой.ПрочаяКраткосрочнаяКредиторскаяЗадолженность, Реквизиты.Дата, ПланыСчетов.Налоговый.ПоступлениеИВыбытиеИмуществаработУслугПрав);
                    ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "Контрагенты", СтрокаДанных.ПлатежныйАгент);
                    ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "Договоры", ОбщегоНазначенияБК.ДоступныйДоговорКонтрагента(СтрокаДанных.ПлатежныйАгент["ОсновнойДоговорКонтрагента"]));
                    
                    Если ЗначениеЗаполнено(СтрокаДанных.СчетКтНУ) Тогда
                        ПроводкаНУ.СчетКт = СтрокаДанных.СчетКтНУ;
                    Иначе 
                        ПроводкаНУ.СчетКт = ПроцедурыБухгалтерскогоУчета.ЗаполнитьСчетНалоговогоУчетаПоУмолчанию(СтрокаДанных.СчетКт, Реквизиты.Дата, СтрокаДанных.СчетКтНУПоУмолчанию);
                    КонецЕсли;
                    
                    ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, СтрокаДанных.ИмяСубконтоКт1, СтрокаДанных.СубконтоКт1);
                    ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, СтрокаДанных.ИмяСубконтоКт2, СтрокаДанных.СубконтоКт2);
                    
                    ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(ПроводкаНУ, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);
                    
                    ПроцедурыНалоговогоУчета.ВидУчетаНУ(ПроводкаНУ, Реквизиты.ВидУчетаНУ);
                    
                    ПроводкаНУ.Содержание  = ТекстПроводки;
                    
                КонецЕсли;
                
            КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Движения.Типовой.Записывать = Истина;
	
	Если Реквизиты.НеобходимостьОтраженияВНУ Тогда
		Движения.Налоговый.Записывать = Истина;
	КонецЕсли;
	
КонецПроцедуры

Функция ПодготовитьТаблицуДвиженияПоИЛ(Реквизиты, ТаблицаПеречислениеПоИЛ, Отказ)

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ДанныеИЛ", ТаблицаПеречислениеПоИЛ);
	Запрос.УстановитьПараметр("Организация", ОбщегоНазначенияБКВызовСервера.ГоловнаяОрганизацияДляУчетаЗарплаты(Реквизиты.Организация));   
	Запрос.УстановитьПараметр("ОбособленноеПодразделение", Реквизиты.Организация);
	Запрос.УстановитьПараметр("Дата", Реквизиты.Дата);
	
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеИЛ.ДокументОснование КАК ДокументОснование,
	|	ДанныеИЛ.ФизЛицо КАК ФизЛицо,
	|	ДанныеИЛ.Получатель КАК Получатель,
	|	ДанныеИЛ.ПериодВзаиморасчетов КАК ПериодВзаиморасчетов,
	|	ДанныеИЛ.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	|	ДанныеИЛ.СуммаСборов КАК СуммаСборов
	|ПОМЕСТИТЬ ДанныеИЛ
	|ИЗ
	|	&ДанныеИЛ КАК ДанныеИЛ";
	
	Запрос.Выполнить();
	
	Если Реквизиты.ПоддержкаРаботыСоСтруктурнымиПодразделениями Или Реквизиты.РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
		
		ПериодыФизЛицаТекст = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДанныеИЛ.ФизЛицо,
		|	ДанныеИЛ.ПериодВзаиморасчетов КАК Период
		|ПОМЕСТИТЬ ВТ_ПериодыСотрудников
		|ИЗ
		|	ДанныеИЛ КАК ДанныеИЛ
		|";
		
		Запрос.Текст = ПериодыФизЛицаТекст + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета()
					 + СформироватьТекстЗапросаСтруктурныеЕдиницы("ВТ_ПериодыСотрудников", Истина);
		Запрос.Выполнить();
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДанныеДокумента.Получатель,
	|	ДанныеДокумента.ДокументОснование,
	|	ДанныеДокумента.ПериодВзаиморасчетов,
	|	ДанныеДокумента.СуммаВзаиморасчетов,
	|	ДанныеДокумента.СуммаСборов,
	|	ЕСТЬNULL(ВзаиморасчетыОстатки.СуммаВзаиморасчетовОстаток, 0) КАК СуммаВзаиморасчетовОстаток,
	|	ЕСТЬNULL(ВзаиморасчетыОстатки.СуммаСборовОстаток, 0) КАК СуммаСборовОстаток";
	
	Если Реквизиты.ПоддержкаРаботыСоСтруктурнымиПодразделениями Или Реквизиты.РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
		Запрос.Текст = Запрос.Текст + ",
		|	ВЫБОР
		|		КОГДА НЕ (ВзаиморасчетыОстатки.СтруктурнаяЕдиница ЕСТЬ NULL)
		|			ТОГДА ВзаиморасчетыОстатки.СтруктурнаяЕдиница
		|		КОГДА НЕ(МестоРаботы.СтруктурнаяЕдиница ЕСТЬ NULL)
		|			ТОГДА МестоРаботы.СтруктурнаяЕдиница
		|		ИНАЧЕ &ОбособленноеПодразделение
		|	КОНЕЦ КАК СтруктурнаяЕдиница,
		|	ВЫБОР
		|		КОГДА НЕ(МестоРаботы.СтруктурнаяЕдиница ЕСТЬ NULL)
		|			ТОГДА МестоРаботы.СтруктурнаяЕдиница
		|		ИНАЧЕ &ОбособленноеПодразделение
		|	КОНЕЦ КАК СтруктурнаяЕдиницаПоМестуРаботы,
		|	ВзаиморасчетыОстатки.Налогоплательщик, 
		|	ВЫБОР 
		|		КОГДА НЕ (ВзаиморасчетыОстатки.ПодразделениеОрганизации ЕСТЬ NULL)
		|			ТОГДА ВзаиморасчетыОстатки.ПодразделениеОрганизации
		|		КОГДА НЕ (МестоРаботы.ПодразделениеОрганизации ЕСТЬ NULL)
		|			ТОГДА МестоРаботы.ПодразделениеОрганизации
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
		|	КОНЕЦ КАК ПодразделениеОрганизации,
		|	ВЫБОР 
		|		КОГДА НЕ (МестоРаботы.ПодразделениеОрганизации ЕСТЬ NULL)
		|			ТОГДА МестоРаботы.ПодразделениеОрганизации
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
		|	КОНЕЦ КАК ПодразделениеОрганизацииПоМестуРаботы 
		|";
	Иначе
		Запрос.Текст = Запрос.Текст + ",
		|	&ОбособленноеПодразделение КАК СтруктурнаяЕдиница,
		|	&ОбособленноеПодразделение КАК СтруктурнаяЕдиницаПоМестуРаботы,
		|	&ОбособленноеПодразделение КАК Налогоплательщик,
		|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) КАК ПодразделениеОрганизации,
		|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) КАК ПодразделениеОрганизацииПоМестуРаботы
		|";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|ИЗ
	|	ДанныеИЛ КАК ДанныеДокумента
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВзаиморасчетыОрганизацийСПолучателямиИЛ.Остатки(
	|			&Дата,
	|			Организация = &ОбособленноеПодразделение
	|			И Получатель В (ВЫБРАТЬ
	|								Получатель
	|							ИЗ
	|								ДанныеИЛ КАК Док)) КАК ВзаиморасчетыОстатки
	|		ПО ДанныеДокумента.Получатель = ВзаиморасчетыОстатки.Получатель
	|			И ДанныеДокумента.ПериодВзаиморасчетов = ВзаиморасчетыОстатки.ПериодВзаиморасчетов";
	
	Если Реквизиты.ПоддержкаРаботыСоСтруктурнымиПодразделениями Или Реквизиты.РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
		
		Запрос.Текст = Запрос.Текст + "
		|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_МестоРаботы КАК МестоРаботы
		|		ПО ДанныеДокумента.ФизЛицо = МестоРаботы.ФизЛицо
		|			И ДанныеДокумента.ПериодВзаиморасчетов = МестоРаботы.Период
		|";
	
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|УПОРЯДОЧИТЬ ПО
	|	ДанныеДокумента.Получатель,
	|	ДанныеДокумента.ДокументОснование,
	|	ДанныеДокумента.ПериодВзаиморасчетов
	|";

    Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

Процедура ЗарегистрироватьДвиженияПеречислениеПоИЛ(Реквизиты, Выборка, Движения, Отказ) 
	
	Пока Выборка.СледующийПоЗначениюПоля("Получатель") Цикл
		
		Пока Выборка.СледующийПоЗначениюПоля("ДокументОснование") Цикл
			
			Пока Выборка.СледующийПоЗначениюПоля("ПериодВзаиморасчетов") Цикл
			
				ОстатокВзаиморасчетовКСписанию 	= Выборка.СуммаВзаиморасчетов;
				ОстатокСборовКСписанию 			= Выборка.СуммаСборов;
				
				ТекущийПолучатель 			= Выборка.Получатель;
				ТекущийДокументОснование 	= Выборка.ДокументОснование;
				ТекущийПериодВзаиморасчетов = Выборка.ПериодВзаиморасчетов;
				
				СтруктурнаяЕдиницаПоМестуРаботы = Выборка.СтруктурнаяЕдиницаПоМестуРаботы;
				ПодразделениеОрганизацииПоМестуРаботы = Выборка.ПодразделениеОрганизацииПоМестуРаботы;
				
				Пока Выборка.Следующий()
						И Выборка.Получатель = ТекущийПолучатель
						И Выборка.ДокументОснование = ТекущийДокументОснование
						И Выборка.ПериодВзаиморасчетов = ТекущийПериодВзаиморасчетов
						И Выборка.Налогоплательщик <> NULL Цикл
				
					СуммаВзаиморасчетовКВыплате = Мин(ОстатокВзаиморасчетовКСписанию, Выборка.СуммаВзаиморасчетовОстаток);
					СуммаСборовКВыплате 		= Мин(ОстатокСборовКСписанию, Выборка.СуммаСборовОстаток);
					
					Если СуммаВзаиморасчетовКВыплате = 0 И СуммаСборовКВыплате = 0 Тогда
						Продолжить;
					КонецЕсли;
					
					ОстатокВзаиморасчетовКСписанию 	= ОстатокВзаиморасчетовКСписанию - СуммаВзаиморасчетовКВыплате;
					ОстатокСборовКСписанию			= ОстатокСборовКСписанию - СуммаСборовКВыплате;
					
					//////////////////////////////////////////////////////
					// ВзаиморасчетыОрганизацийСПолучателямиИЛ
					
					Движение = Движения.ВзаиморасчетыОрганизацийСПолучателямиИЛ.Добавить();
					
					// Свойства
					Движение.Период			= Реквизиты.Дата;
					Движение.ВидДвижения 	= ВидДвиженияНакопления.Расход;
					
					// Измерения
					Движение.Получатель 	= Выборка.Получатель;
					Если Реквизиты.ПоддержкаРаботыСоСтруктурнымиПодразделениями Или Реквизиты.РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
						Движение.СтруктурнаяЕдиница = Выборка.СтруктурнаяЕдиница;
						Движение.Налогоплательщик	= Выборка.Налогоплательщик;
					Иначе
						Движение.СтруктурнаяЕдиница = Реквизиты.Организация;
						Движение.Налогоплательщик	= Реквизиты.Организация;
					КонецЕсли;					
					Движение.ДокументОснование		= Выборка.ДокументОснование;
					Движение.ПериодВзаиморасчетов	= Выборка.ПериодВзаиморасчетов;
					Движение.Организация			= Реквизиты.Организация;
					// Остатки по подразделениям закрываем всегда чтобы не было зависших сумм
					Движение.ПодразделениеОрганизации = Выборка.ПодразделениеОрганизации;
					
					// Ресурсы
					Движение.СуммаВзаиморасчетов	= СуммаВзаиморасчетовКВыплате;
					Движение.СуммаСборов			= СуммаСборовКВыплате;
						
				КонецЦикла;
			
				// остаток кидаем на структурную единицу по месту работы сотрудника-алименщика
				Если ОстатокВзаиморасчетовКСписанию <> 0 Или ОстатокСборовКСписанию <> 0 Тогда
				
					//////////////////////////////////////////////////////
					// ВзаиморасчетыОрганизацийСПолучателямиИЛ

					Движение = Движения.ВзаиморасчетыОрганизацийСПолучателямиИЛ.Добавить();
					
					// Свойства
					Движение.Период			= Реквизиты.Дата;
					Движение.ВидДвижения 	= ВидДвиженияНакопления.Расход;
					
					// Измерения
					Движение.Получатель 	= ТекущийПолучатель;
					Если Реквизиты.ПоддержкаРаботыСоСтруктурнымиПодразделениями Или Реквизиты.РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
						Налогоплательщик = ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(СтруктурнаяЕдиницаПоМестуРаботы,
																						Реквизиты.Организация,
																						Перечисления.РазделыНалоговогоУчета.НалогиСЗаработнойПлаты);
						Движение.СтруктурнаяЕдиница = СтруктурнаяЕдиницаПоМестуРаботы;
						Движение.Налогоплательщик 	= Налогоплательщик;
					Иначе
						Движение.СтруктурнаяЕдиница = Реквизиты.Организация;
						Движение.Налогоплательщик 	= Реквизиты.Организация;
					КонецЕсли;
					Движение.ДокументОснование		= ТекущийДокументОснование;
					Движение.ПериодВзаиморасчетов	= ТекущийПериодВзаиморасчетов;
					Движение.Организация			= Реквизиты.Организация;
					// Нераспределенный остаток относим на подразделение только если ведется раздельный учет налогов по подразделениям организаций					
					Если Реквизиты.РаспределятьНалогиПоПодразделениямОрганизаций Тогда
						Движение.ПодразделениеОрганизации = ПодразделениеОрганизацииПоМестуРаботы;
					КонецЕсли;
				
					// Ресурсы
					Движение.СуммаВзаиморасчетов 	= ОстатокВзаиморасчетовКСписанию;
					Движение.СуммаСборов			= ОстатокСборовКСписанию;
					
				КонецЕсли;				
			КонецЦикла; // Пока Выборка.СледующийПоЗначениюПоля("ПериодВзаиморасчетов") Цикл
		КонецЦикла; // Пока Выборка.СледующийПоЗначениюПоля("ДокументОснование") Цикл
	КонецЦикла; // Пока Выборка.СледующийПоЗначениюПоля("Получатель") Цикл

	Движения.ВзаиморасчетыОрганизацийСПолучателямиИЛ.Записывать = Истина;
	
КонецПроцедуры

// Депонирование ЗП
Процедура СформироватьДвиженияДепонированиеЗП(ТаблицаРеквизиты, ТаблицаДепонированиеЗП, Движения, Отказ) Экспорт
	
	Если ТаблицаДепонированиеЗП = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизиты[0];
	
	СформироватьДвиженияСведенияОВыплатахЗП(ТаблицаДепонированиеЗП, Движения, Отказ);
	ТаблицаДвиженияДепонированиеЗП = ПодготовитьТаблицуДвиженияДепонированиеЗП(Реквизиты, ТаблицаДепонированиеЗП, Движения, Отказ);
	ЗарегистрироватьДвиженияДепонированиеЗП(Реквизиты, ТаблицаДвиженияДепонированиеЗП, Движения, Отказ);
	СформиоватьПроводкиДепонированиеЗП(Реквизиты, ТаблицаДепонированиеЗП, Движения, Отказ);
	
КонецПроцедуры

Процедура СформиоватьПроводкиДепонированиеЗП(Реквизиты, ТаблицаДепонированиеЗП, Движения, Отказ)
	
	ТаблицаФормированияПроводок = ТаблицаДепонированиеЗП;
	ВедениеУчетаПоСотрудникам = Реквизиты.ВедениеУчетаПоСотрудникам;
	
	Если НЕ ВедениеУчетаПоСотрудникам Тогда
		ТаблицаФормированияПроводок.Свернуть("Номер, Дата, Ведомость", "Сумма");
	КонецЕсли;
	
	Для Каждого СтрокаДанных Из ТаблицаФормированияПроводок Цикл
		
		// Отражаем депонирование зарплаты в бухучете
		Проводка = Движения.Типовой.Добавить();
		
		Проводка.Период      = Реквизиты.Дата;
		Проводка.Организация = Реквизиты.Организация;
		Проводка.Сумма       = СтрокаДанных.Сумма;
		
		Проводка.СчетДт      = ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПоОплатеТруда;
		Если ВедениеУчетаПоСотрудникам Тогда
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "РаботникиОрганизаций", СтрокаДанных.ФизЛицо);
		КонецЕсли;
				
		Проводка.СчетКт      = ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПоДепонированнойЗаработнойПлате;
		Если ВедениеУчетаПоСотрудникам Тогда
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "РаботникиОрганизаций", СтрокаДанных.ФизЛицо);
		КонецЕсли;
		
		ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(Проводка, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);

		Проводка.Содержание  = СтрШаблон(НСтр("ru = 'Депонир. з/п по ведомости №%1 от %2'", ОбщегоНазначения.КодОсновногоЯзыка()), СтрокаДанных.Номер, Формат(СтрокаДанных.Дата, "ДФ='дд.ММ.гг'"));
		
	КонецЦикла;
	
	Движения.Типовой.Записывать = Истина;

КонецПроцедуры

Функция ПодготовитьТаблицуДвиженияДепонированиеЗП(Реквизиты, ТаблицаДепонированиеЗП, Движения, Отказ)
	
	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("Дата", Реквизиты.Дата);
	Запрос.УстановитьПараметр("Организация", ОбщегоНазначенияБКВызовСервера.ГоловнаяОрганизацияДляУчетаЗарплаты(Реквизиты.Организация));   
	Запрос.УстановитьПараметр("ОбособленноеПодразделение", Реквизиты.Организация);
	Запрос.УстановитьПараметр("ДанныеЗП", ТаблицаДепонированиеЗП);
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДанныеЗП.ФизЛицо,
		|	ДанныеЗП.ПериодВзаиморасчетов,
		|	ДанныеЗП.Сумма
		|ПОМЕСТИТЬ ДанныеЗП
		|ИЗ
		|	&ДанныеЗП КАК ДанныеЗП";
		
	Запрос.Выполнить();
	
	Если Реквизиты.ПоддержкаРаботыСоСтруктурнымиПодразделениями Или Реквизиты.РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
		
		ПериодыФизЛицаТекст = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДанныеЗП.ФизЛицо,
		|	ДанныеЗП.ПериодВзаиморасчетов КАК Период
		|ПОМЕСТИТЬ ВТ_ПериодыСотрудников
		|ИЗ
		|	ДанныеЗП КАК ДанныеЗП
		|";
		
		Запрос.Текст = ПериодыФизЛицаТекст + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета()
					 + СформироватьТекстЗапросаСтруктурныеЕдиницы("ВТ_ПериодыСотрудников", Истина);
		Запрос.Выполнить();
	КонецЕсли;

	Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДанныеДокумента.ПериодВзаиморасчетов,
		|	ДанныеДокумента.ФизЛицо,
		|	ДанныеДокумента.Сумма,
		|	&ОбособленноеПодразделение КАК Организация";
	Если Реквизиты.ПоддержкаРаботыСоСтруктурнымиПодразделениями Или Реквизиты.РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
		Запрос.Текст = Запрос.Текст + ",
		|	ВЫБОР
		|		КОГДА НЕ (ВзаиморасчетыСРаботниками.СтруктурнаяЕдиница ЕСТЬ NULL)
		|			ТОГДА ВзаиморасчетыСРаботниками.СтруктурнаяЕдиница
		|		КОГДА НЕ (МестоРаботы.СтруктурнаяЕдиница ЕСТЬ NULL)
		|			ТОГДА МестоРаботы.СтруктурнаяЕдиница
		|		ИНАЧЕ &ОбособленноеПодразделение
		|	КОНЕЦ КАК СтруктурнаяЕдиница,
		|	ВЫБОР
		|		КОГДА НЕ (МестоРаботы.СтруктурнаяЕдиница ЕСТЬ NULL)
		|			ТОГДА МестоРаботы.СтруктурнаяЕдиница
		|		ИНАЧЕ &ОбособленноеПодразделение
		|	КОНЕЦ КАК СтруктурнаяЕдиницаПоМестуРаботы,
		|	ВЫБОР
		|		КОГДА НЕ (ВзаиморасчетыСРаботниками.ПодразделениеОрганизации ЕСТЬ NULL)
		|			ТОГДА ВзаиморасчетыСРаботниками.ПодразделениеОрганизации
		|		КОГДА НЕ (МестоРаботы.ПодразделениеОрганизации ЕСТЬ NULL)
		|			ТОГДА МестоРаботы.ПодразделениеОрганизации
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
		|	КОНЕЦ КАК ПодразделениеОрганизации,
		|	ВЫБОР
		|		КОГДА НЕ (МестоРаботы.ПодразделениеОрганизации ЕСТЬ NULL)
		|			ТОГДА МестоРаботы.ПодразделениеОрганизации
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
		|	КОНЕЦ КАК ПодразделениеОрганизацииПоМестуРаботы,
		|	ВЫБОР 
		|		КОГДА НЕ (ВзаиморасчетыСРаботниками.Налогоплательщик ЕСТЬ NULL)
		|			ТОГДА ВзаиморасчетыСРаботниками.Налогоплательщик
		|		ИНАЧЕ &ОбособленноеПодразделение
		|	КОНЕЦ КАК Налогоплательщик";
	Иначе 
		Запрос.Текст = Запрос.Текст + ",
		|	&ОбособленноеПодразделение КАК СтруктурнаяЕдиница,
		|	&ОбособленноеПодразделение КАК СтруктурнаяЕдиницаПоМестуРаботы,
		|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) КАК ПодразделениеОрганизации,
		|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) КАК ПодразделениеОрганизацииПоМестуРаботы,
		|	&ОбособленноеПодразделение КАК Налогоплательщик
		|";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + ",
		|	ЕСТЬNULL(ВзаиморасчетыСРаботниками.СуммаВзаиморасчетовОстаток, 0) КАК ОстатокКВыплате
		|
		|ИЗ
		|	ДанныеЗП КАК ДанныеДокумента
		|	
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВзаиморасчетыСРаботникамиОрганизаций.Остатки(
		|			&Дата,
		|			Организация = &ОбособленноеПодразделение
		|			И ФизЛицо В (ВЫБРАТЬ 
		|								ДанныеЗП.ФизЛицо
		|							ИЗ
		|								ДанныеЗП КАК ДанныеЗП)) КАК ВзаиморасчетыСРаботниками
		|		ПО ДанныеДокумента.ФизЛицо = ВзаиморасчетыСРаботниками.ФизЛицо
		|			И ДанныеДокумента.ПериодВзаиморасчетов = НАЧАЛОПЕРИОДА(ВзаиморасчетыСРаботниками.ПериодВзаиморасчетов, МЕСЯЦ)";
		
	Если Реквизиты.ПоддержкаРаботыСоСтруктурнымиПодразделениями Или Реквизиты.РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
		Запрос.Текст = Запрос.Текст + "
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_МестоРаботы КАК МестоРаботы
		|		ПО ДанныеДокумента.ФизЛицо = МестоРаботы.ФизЛицо
		|			И ДанныеДокумента.ПериодВзаиморасчетов = МестоРаботы.Период
		|";
		
	КонецЕсли;
	
	// упорядочим для списания по ФИФО
	Запрос.Текст = Запрос.Текст + "
	|УПОРЯДОЧИТЬ ПО
	|	ДанныеДокумента.ФизЛицо,
	|	ДанныеДокумента.ПериодВзаиморасчетов";
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

Процедура ЗарегистрироватьДвиженияДепонированиеЗП(Реквизиты, Выборка, Движения, Отказ)
	
	ТаблицаСписанныхОстатков = Новый ТаблицаЗначений;
	ТаблицаСписанныхОстатков.Колонки.Добавить("СтруктурнаяЕдиница");
	ТаблицаСписанныхОстатков.Колонки.Добавить("ПодразделениеОрганизации");
	ТаблицаСписанныхОстатков.Колонки.Добавить("Налогоплательщик");
	ТаблицаСписанныхОстатков.Колонки.Добавить("ОстатокКВыплате");
	
	ТаблицаСписанныхОстатков.Индексы.Добавить("СтруктурнаяЕдиница, ПодразделениеОрганизации, Налогоплательщик");
	СтруктураПоиска = Новый Структура("СтруктурнаяЕдиница, ПодразделениеОрганизации, Налогоплательщик");
	
	Пока Выборка.СледующийПоЗначениюПоля("ФизЛицо") Цикл
		
		Пока Выборка.СледующийПоЗначениюПоля("ПериодВзаиморасчетов") Цикл
			
			ТаблицаСписанныхОстатков.Очистить();
			
			Если Выборка.Сумма = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			// теперь ФИФО по взаиморасчетам
			ОстатокКСписанию 	= Выборка.Сумма;
			ТекущаяОрганизация	= Выборка.Организация;
			ТекущееФизЛицо 		= Выборка.ФизЛицо;
			ТекущаяСтруктурнаяЕдиницаПоМестуРаботы = Выборка.СтруктурнаяЕдиницаПоМестуРаботы;
			ТекущееПодразделениеОрганизацииПоМестуРаботы = Выборка.ПодразделениеОрганизацииПоМестуРаботы;
			ТекущийПериодВзаиморасчетов	= Выборка.ПериодВзаиморасчетов;
			
			Пока Выборка.Следующий()
				И Выборка.ФизЛицо = ТекущееФизЛицо 
				И Выборка.ПериодВзаиморасчетов = ТекущийПериодВзаиморасчетов 
				И ОстатокКСписанию <> 0
				И Выборка.Налогоплательщик <> NULL Цикл 
				
				// определим фактические суммы остатков (с учетом списанных на предыдущих шагах цикла)
				ОстатокКВыплате 					= Выборка.ОстатокКВыплате;
				СтруктураПоиска.СтруктурнаяЕдиница 	= Выборка.СтруктурнаяЕдиница;
				СтруктураПоиска.ПодразделениеОрганизации = Выборка.ПодразделениеОрганизации;
				СтруктураПоиска.Налогоплательщик	= Выборка.Налогоплательщик;
				
				НайденныеСтроки = ТаблицаСписанныхОстатков.НайтиСтроки(СтруктураПоиска);
				Если НайденныеСтроки.Количество() > 0 Тогда
					ОстатокКВыплате = ОстатокКВыплате - НайденныеСтроки[0].ОстатокКВыплате;
				КонецЕсли;
				
				СуммаКСписанию = Мин(ОстатокКСписанию, ОстатокКВыплате);
				
				// запомним, какую часть суммы уже списали
				Если НайденныеСтроки.Количество() > 0 Тогда
					НайденныеСтроки[0].ОстатокКВыплате = НайденныеСтроки[0].ОстатокКВыплате + СуммаКСписанию;
				Иначе
					НоваяСтрока = ТаблицаСписанныхОстатков.Добавить();
					НоваяСтрока.СтруктурнаяЕдиница	= Выборка.СтруктурнаяЕдиница;
					НоваяСтрока.ПодразделениеОрганизации = Выборка.ПодразделениеОрганизации;
					НоваяСтрока.Налогоплательщик	= Выборка.Налогоплательщик;
					НоваяСтрока.ОстатокКВыплате		= СуммаКСписанию;
				КонецЕсли;
				
				Если СуммаКСписанию = 0 Тогда
					// с текущей СтруктурнойЕдиницы + Налогоплательщика больше нечего списывать - ищем следущую комбинацию
					Продолжить;
				КонецЕсли;
				
				ОстатокКСписанию = ОстатокКСписанию - СуммаКСписанию;
				
				// Убираем суммы с текущих взаиморасчетов с сотрудниками
				Строка = Движения.ВзаиморасчетыСРаботникамиОрганизаций.Добавить();
				
				// Свойства
				Строка.Период      			= Реквизиты.Дата;
				Строка.ВидДвижения 			= ВидДвиженияНакопления.Расход;
				
				// Измерения
				Строка.ФизЛицо 				= Выборка.ФизЛицо;
				Строка.СтруктурнаяЕдиница	= Выборка.СтруктурнаяЕдиница;
				Строка.ПериодВзаиморасчетов = Выборка.ПериодВзаиморасчетов;
				Строка.Организация 			= Выборка.Организация;
				Строка.Налогоплательщик		= Выборка.Налогоплательщик;
				//Остаток всегда списываем по подразделениям чтобы не было зависания
				Строка.ПодразделениеОрганизации = Выборка.ПодразделениеОрганизации;
				
				// Ресурсы
				Строка.СуммаВзаиморасчетов 	= СуммаКСписанию;
				
				// Реквизиты
				Строка.ВидСтроки			= Перечисления.РасчетыСБюджетомФондамиВидСтроки.Депонирование;
				
				// Ставим на депонированные суммы
				Строка = Движения.ВзаиморасчетыСДепонентамиОрганизаций.Добавить();
				
				// Свойства
				Строка.Период      			= Реквизиты.Дата;
				Строка.ВидДвижения 			= ВидДвиженияНакопления.Приход;
				
				// Измерения
				Строка.ФизЛицо 				= Выборка.ФизЛицо;
				Строка.СтруктурнаяЕдиница	= Выборка.СтруктурнаяЕдиница;
				Строка.ПериодВзаиморасчетов = Выборка.ПериодВзаиморасчетов;
				Строка.Организация 			= Выборка.Организация;
				Строка.Налогоплательщик		= Выборка.Налогоплательщик;
				//Остаток всегда списываем по подразделениям чтобы не было зависания
				Строка.ПодразделениеОрганизации = Выборка.ПодразделениеОрганизации;
				
				// Ресурсы
				Строка.СуммаВзаиморасчетов 	= СуммаКСписанию;		
				
				// Реквизиты
				Строка.ВидСтроки			= Перечисления.РасчетыСБюджетомФондамиВидСтроки.Депонирование;
				
			КонецЦикла;
			
			Если ОстатокКСписанию <> 0 Тогда
				// нераспределенный на структурные единицы и налогоплательщиков остаток ставим по месту работы
				
				Налогоплательщик = ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(ТекущаяСтруктурнаяЕдиницаПоМестуРаботы, 
																			ТекущаяОрганизация,
																			Перечисления.РазделыНалоговогоУчета.НалогиСЗаработнойПлаты);
				
				// Убираем суммы с текущих взаиморасчетов с сотрудниками
				Строка = Движения.ВзаиморасчетыСРаботникамиОрганизаций.Добавить();
				
				// Свойства
				Строка.Период      			= Реквизиты.Дата;
				Строка.ВидДвижения 			= ВидДвиженияНакопления.Расход;
				
				// Измерения
				Строка.ФизЛицо 				= ТекущееФизЛицо;
				Строка.СтруктурнаяЕдиница	= ТекущаяСтруктурнаяЕдиницаПоМестуРаботы;
				Строка.ПериодВзаиморасчетов = ТекущийПериодВзаиморасчетов;
				Строка.Организация 			= ТекущаяОрганизация;
				Строка.Налогоплательщик		= Налогоплательщик;
				//Нераспределенный остатокотносим на основное место работы, только если используется распределение
				Если Реквизиты.РаспределятьНалогиПоПодразделениямОрганизаций Тогда
					Строка.ПодразделениеОрганизации = ТекущееПодразделениеОрганизацииПоМестуРаботы;
				КонецЕсли;
				
				// Ресурсы
				Строка.СуммаВзаиморасчетов 	= ОстатокКСписанию;
				
				// Реквизиты
				Строка.ВидСтроки			= Перечисления.РасчетыСБюджетомФондамиВидСтроки.Депонирование;
				
				// Ставим на депонированные суммы
				Строка = Движения.ВзаиморасчетыСДепонентамиОрганизаций.Добавить();
				
				// Свойства
				Строка.Период      			= Реквизиты.Дата;
				Строка.ВидДвижения 			= ВидДвиженияНакопления.Приход;
				
				// Измерения
				Строка.ФизЛицо 				= ТекущееФизЛицо;
				Строка.СтруктурнаяЕдиница	= ТекущаяСтруктурнаяЕдиницаПоМестуРаботы;
				Строка.ПериодВзаиморасчетов = ТекущийПериодВзаиморасчетов;
				Строка.Организация 			= ТекущаяОрганизация;
				Строка.Налогоплательщик		= Налогоплательщик;
				//Нераспределенный остатокотносим на основное место работы, только если используется распределение
				Если Реквизиты.РаспределятьНалогиПоПодразделениямОрганизаций Тогда
					Строка.ПодразделениеОрганизации = ТекущееПодразделениеОрганизацииПоМестуРаботы;
				КонецЕсли;
				
				// Ресурсы
				Строка.СуммаВзаиморасчетов 	= ОстатокКСписанию;		
				
				// Реквизиты
				Строка.ВидСтроки			= Перечисления.РасчетыСБюджетомФондамиВидСтроки.Депонирование;
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
	Движения.ВзаиморасчетыСДепонентамиОрганизаций.Записывать = Истина;
	Движения.ВзаиморасчетыСРаботникамиОрганизаций.Записывать = Истина;	
	
КонецПроцедуры

// Выплата доходов контрагентов

Процедура СформироватьДвиженияРасчетыСКонтрагентамиФизЛицами(ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Реквизиты = ТаблицаРеквизиты[0];
	ТаблицаДвиженияВзаиморасчетыСКонтрагентами = ПодготовитьТаблицуДвиженияВзаиморасчетыСКонтрагентами(Реквизиты, ТаблицаРеквизиты, Отказ);
	ЗарегистрироватьДвиженияВзаиморасчетыСКонтрагентами(Реквизиты, ТаблицаДвиженияВзаиморасчетыСКонтрагентами, Движения, Отказ)
	
КонецПроцедуры

Функция ПодготовитьТаблицуДвиженияВзаиморасчетыСКонтрагентами(Реквизиты, ТаблицаРасчетыСКонтрагентамиФизЛицами, Отказ)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("РасчетыСКонтрагентами", ТаблицаРасчетыСКонтрагентамиФизЛицами);
	Запрос.УстановитьПараметр("Организация", ОбщегоНазначенияБКВызовСервера.ГоловнаяОрганизацияДляУчетаЗарплаты(Реквизиты.Организация));   
	Запрос.УстановитьПараметр("ОбособленноеПодразделение", Реквизиты.Организация);
	Запрос.УстановитьПараметр("Контрагент", Реквизиты.Контрагент);
	Запрос.УстановитьПараметр("Дата", Реквизиты.Дата);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РасчетыСКонтрагентами.Организация,
		|	РасчетыСКонтрагентами.СуммаДокумента,
		|	РасчетыСКонтрагентами.Контрагент,
		|	ПоддержкаРаботыСоСтруктурнымиПодразделениями
		|ПОМЕСТИТЬ ВТ_РасчетыСКонтрагентами
		|ИЗ
		|	&РасчетыСКонтрагентами КАК РасчетыСКонтрагентами";
		
	Запрос.Выполнить();
	
	ПериодыФизЛицаТекст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасчетыСКонтрагентами.Контрагент.ФизЛицо КАК ФизЛицо,
	|	&Дата КАК Период
	|ПОМЕСТИТЬ ВТ_ПериодыСотрудников
	|ИЗ
	|	ВТ_РасчетыСКонтрагентами КАК РасчетыСКонтрагентами
	|";
	
	Запрос.Текст = ПериодыФизЛицаТекст + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета()
				 + СформироватьТекстЗапросаСтруктурныеЕдиницы("ВТ_ПериодыСотрудников", Истина, Реквизиты.ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	Запрос.Выполнить();

	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РасчетыСКонтрагентами.Организация КАК Организация,
		|	РасчетыСКонтрагентами.СуммаДокумента,
		|	РасчетыСКонтрагентами.Контрагент КАК Контрагент,
		|	ЕСТЬNULL(Взаиморасчеты.СуммаВзаиморасчетовОстаток, 0) КАК СуммаВзаиморасчетовОстаток,
		|	НАЧАЛОПЕРИОДА(ЕСТЬNULL(Взаиморасчеты.ПериодВзаиморасчетов, &Дата), МЕСЯЦ) КАК ПериодВзаиморасчетов,
		|	ВЫБОР
		|		КОГДА РасчетыСКонтрагентами.ПоддержкаРаботыСоСтруктурнымиПодразделениями
		|			ТОГДА ВЫБОР
		|					КОГДА НЕ Взаиморасчеты.СтруктурнаяЕдиница ЕСТЬ NULL 
		|						ТОГДА Взаиморасчеты.СтруктурнаяЕдиница
		|					КОГДА НЕ МестоРаботы.СтруктурнаяЕдиница ЕСТЬ NULL 
		|						ТОГДА МестоРаботы.СтруктурнаяЕдиница
		|					ИНАЧЕ &СтруктурнаяЕдиница
		|				КОНЕЦ
		|		ИНАЧЕ &ОбособленноеПодразделение
		|	КОНЕЦ КАК СтруктурнаяЕдиница,
		|	ВЫБОР
		|		КОГДА РасчетыСКонтрагентами.ПоддержкаРаботыСоСтруктурнымиПодразделениями
		|			ТОГДА ВЫБОР
		|					КОГДА НЕ МестоРаботы.СтруктурнаяЕдиница ЕСТЬ NULL 
		|						ТОГДА МестоРаботы.СтруктурнаяЕдиница
		|					ИНАЧЕ &СтруктурнаяЕдиница
		|				КОНЕЦ
		|		ИНАЧЕ &ОбособленноеПодразделение
		|	КОНЕЦ КАК СтруктурнаяЕдиницаПоМестуРаботы,
		|	ВЫБОР
		|		КОГДА РасчетыСКонтрагентами.ПоддержкаРаботыСоСтруктурнымиПодразделениями
		|			ТОГДА Взаиморасчеты.Налогоплательщик
		|		ИНАЧЕ &ОбособленноеПодразделение
		|	КОНЕЦ КАК Налогоплательщик
		|ИЗ
		|	ВТ_РасчетыСКонтрагентами КАК РасчетыСКонтрагентами
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВзаиморасчетыОрганизацийСКонтрагентамиФизЛицами.Остатки(
		|				&Дата,
		|				Организация = &ОбособленноеПодразделение
		|					И Контрагент = &Контрагент) КАК Взаиморасчеты
		|		ПО (ИСТИНА)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_МестоРаботы КАК МестоРаботы
		|		ПО (ИСТИНА)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Взаиморасчеты.ПериодВзаиморасчетов";
	
	Если Реквизиты.Владелец().Колонки.Найти("СтруктурноеПодразделение") <> Неопределено И ЗначениеЗаполнено(Реквизиты.СтруктурноеПодразделение) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "
		|УПОРЯДОЧИТЬ ПО", "
		|УПОРЯДОЧИТЬ ПО
		|	Взаиморасчеты.СтруктурнаяЕдиница = &СтруктурнаяЕдиница УБЫВ,");
		Запрос.УстановитьПараметр("СтруктурнаяЕдиница", Реквизиты.СтруктурноеПодразделение);
	Иначе
		Запрос.УстановитьПараметр("СтруктурнаяЕдиница", Реквизиты.Организация);
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

Процедура ЗарегистрироватьДвиженияВзаиморасчетыСКонтрагентами(Реквизиты, Выборка, Движения, Отказ)
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	ДанныеОВалютеРегл  		= ОбщегоНазначенияБК.ПолучитьКурсВалюты(ВалютаРегламентированногоУчета, Реквизиты.Дата);
	ДанныеОВалюте	  		= ОбщегоНазначенияБК.ПолучитьКурсВалюты(Реквизиты.ВалютаДокумента, 		Реквизиты.Дата);
	
	СуммаКРаспределению = ОбщегоНазначенияБККлиентСервер.ПересчитатьИзВалютыВВалюту(Реквизиты.СуммаДокумента, Реквизиты.ВалютаДокумента, ВалютаРегламентированногоУчета,
													ДанныеОВалюте.Курс,      ДанныеОВалютеРегл.Курс, 
													ДанныеОВалюте.Кратность, ДанныеОВалютеРегл.Кратность);	
													
	СтруктурнаяЕдиницаПоМестуРаботы = Неопределено;
	
	Пока Выборка.Следующий() И СуммаКРаспределению <> 0 Цикл
		
			СтруктурнаяЕдиницаПоМестуРаботы = Выборка.СтруктурнаяЕдиницаПоМестуРаботы;
			
			СуммаКВыплате = Мин(Выборка.СуммаВзаиморасчетовОстаток, СуммаКРаспределению);
			СуммаКРаспределению = СуммаКРаспределению - СуммаКВыплате;
			Если СуммаКВыплате = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			/////////////////////////////////////////////////////////////////////
			// ВзаиморасчетыОрганизацийСКонтрагентамиФизЛицами
			//
			
			Движение = Движения.ВзаиморасчетыОрганизацийСКонтрагентамиФизЛицами.Добавить();
			
			// Свойства
			Движение.ВидДвижения 	= ВидДвиженияНакопления.Расход;
			Движение.Период			= Реквизиты.Дата;
			
			// Измерения
			Движение.Контрагент 	= Реквизиты.Контрагент;
			Если Реквизиты.ПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
				Если Выборка.Налогоплательщик = NULL Тогда
					СтруктурнаяЕдиница 	= Выборка.СтруктурнаяЕдиницаПоМестуРаботы;
					Налогоплательщик 	= ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(Выборка.СтруктурнаяЕдиницаПоМестуРаботы,
																						Реквизиты.Организация,
																						Перечисления.РазделыНалоговогоУчета.НалогиСЗаработнойПлаты);
				Иначе
					СтруктурнаяЕдиница 	= Выборка.СтруктурнаяЕдиница;
					Налогоплательщик 	= Выборка.Налогоплательщик;
				КонецЕсли;
				Движение.СтруктурнаяЕдиница = СтруктурнаяЕдиница;
				Движение.Налогоплательщик	= Налогоплательщик;
			Иначе
				Движение.СтруктурнаяЕдиница = Реквизиты.Организация;
				Движение.Налогоплательщик	= Реквизиты.Организация;
			КонецЕсли;
			Движение.ПериодВзаиморасчетов 	= Выборка.ПериодВзаиморасчетов;
			Движение.Организация 			= Реквизиты.Организация;
			
			// Ресурсы
			Движение.СуммаВзаиморасчетов	= СуммаКВыплате;
			
			//////////////////////////////////////////////////////////////////////
			// ВыплаченныеДоходыРаботникамОрганизацийНУ
			
			Движение = Движения.ВыплаченныеДоходыРаботникамОрганизацийНУ.Добавить();
			
			// Свойства
			Движение.Период			= Реквизиты.Дата;
			
			// Измерения
			Движение.ФизЛицо		= Реквизиты.Контрагент;
			Если Реквизиты.ПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
				Движение.СтруктурнаяЕдиница	= СтруктурнаяЕдиница;
				Движение.Налогоплательщик	= Налогоплательщик;
			Иначе
				Движение.СтруктурнаяЕдиница = Реквизиты.Организация;
				Движение.Налогоплательщик	= Реквизиты.Организация;
			КонецЕсли;
			Движение.Организация			= Реквизиты.Организация;
			Движение.МесяцНалоговогоПериода = Выборка.ПериодВзаиморасчетов;
			
			// Ресурсы
			Движение.СуммаДохода	= СуммаКВыплате;
			
	КонецЦикла;
	
	// если что-то осталось, то создаем запись на сумму остатка
	Если СуммаКРаспределению <> 0 Тогда

		СуммаКВыплате = СуммаКРаспределению;
		
		Если Реквизиты.ПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
			Налогоплательщик = ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(СтруктурнаяЕдиницаПоМестуРаботы,
																				Реквизиты.Организация,
																				Перечисления.РазделыНалоговогоУчета.НалогиСЗаработнойПлаты);
		КонецЕсли;
		
		/////////////////////////////////////////////////////////////////////
		// ВзаиморасчетыОрганизацийСКонтрагентамиФизЛицами
		//
			
		Движение = Движения.ВзаиморасчетыОрганизацийСКонтрагентамиФизЛицами.Добавить();
			
		// Свойства
		Движение.ВидДвижения 	= ВидДвиженияНакопления.Расход;
		Движение.Период			= Реквизиты.Дата;
			
		// Измерения
		Движение.Контрагент 	= Реквизиты.Контрагент;
		Если Реквизиты.ПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
			Движение.СтруктурнаяЕдиница = СтруктурнаяЕдиницаПоМестуРаботы;
			Движение.Налогоплательщик 	= Налогоплательщик;
		Иначе
			Движение.СтруктурнаяЕдиница	= Реквизиты.Организация;
			Движение.Налогоплательщик	= Реквизиты.Организация;
		КонецЕсли;
		Движение.ПериодВзаиморасчетов 	= НачалоМесяца(Реквизиты.Дата);
		Движение.Организация 			= Реквизиты.Организация;		
			
		// Ресурсы
		Движение.СуммаВзаиморасчетов	= СуммаКВыплате;
			
		//////////////////////////////////////////////////////////////////////
		// ВыплаченныеДоходыРаботникамОрганизацийНУ
			
		Движение = Движения.ВыплаченныеДоходыРаботникамОрганизацийНУ.Добавить();
			
		// Свойства
		Движение.Период			= Реквизиты.Дата;
			
		// Измерения
		Движение.ФизЛицо		= Реквизиты.Контрагент;
		Если Реквизиты.ПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
			Движение.СтруктурнаяЕдиница = СтруктурнаяЕдиницаПоМестуРаботы;
			Движение.Налогоплательщик 	= Налогоплательщик;
		Иначе
			Движение.СтруктурнаяЕдиница	= Реквизиты.Организация;
			Движение.Налогоплательщик	= Реквизиты.Организация;
		КонецЕсли;
		Движение.МесяцНалоговогоПериода = НачалоМесяца(Реквизиты.Дата);
		Движение.Организация			= Реквизиты.Организация;
			
		// Ресурсы
		Движение.СуммаДохода	= СуммаКВыплате;
			
	КонецЕсли;
	
	Движения.ВзаиморасчетыОрганизацийСКонтрагентамиФизЛицами.Записывать = Истина;
	Движения.ВыплаченныеДоходыРаботникамОрганизацийНУ.Записывать = Истина;

КонецПроцедуры

//Расчет налогов при поступлении активов

Процедура СформироватьДвиженияОтраженияЗатратПоСНВРеглУчете(ТаблицаДвижений, Движения, Отказ) Экспорт

	Если ТаблицаДвижений = Неопределено ИЛИ ТаблицаДвижений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыОтраженияЗатратПоСН(ТаблицаДвижений);
	
	Реквизиты = Параметры.ТаблицаДвижений[0];
	
	//Проводки по БУ
	ДобавитьДвижениеОтраженияЗатратСН(Реквизиты, Движения);
		
	//Проводки по НУ
	Если Реквизиты.НеобходимостьОтраженияВНУ Тогда
		ДобавитьДвижениеОтраженияЗатратСН(Реквизиты, Движения, "НУ");
	КонецЕсли;
		
	Движения.Типовой.Записывать = Истина;
	Если Реквизиты.НеобходимостьОтраженияВНУ Тогда
		Движения.Налоговый.Записывать = Истина;
	КонецЕсли;
	
КонецПроцедуры

Функция ПодготовитьПараметрыОтраженияЗатратПоСН(ТаблицаДвижений)

	Параметры = Новый Структура;
	
	СписокОбязательныхКолонок = ""
	+ "Период,"      				   
	+ "Организация,"    				
	+ "Регистратор,"                
	+ "Содержание,"                
	+ "НеобходимостьОтраженияВНУ," 
	+ "СтруктурноеПодразделение,"  
	+ "ВидУчетаНУ,"                
	+ "СчетДт,"                    
	+ "СубконтоДт1,"            
	+ "СубконтоДт2,"            
	+ "СубконтоДт3,"            
	+ "СчетДтНУ,"  
	+ "СубконтоДтНУ1,"            
	+ "СубконтоДтНУ2,"            
	+ "СубконтоДтНУ3,"  
	+ "СчетКт,"        
	+ "СчетКтНУ,"        
	+ "Налог,"            
	+ "ВидПлатежаВБюджет,"  
	+ "НалоговыйКомитет,"        
	+ "Сумма"
	;
	
	Параметры.Вставить("ТаблицаДвижений", ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаДвижений, СписокОбязательныхКолонок));
	
	Возврат Параметры;

КонецФункции

Процедура ДобавитьДвижениеОтраженияЗатратСН(Реквизиты, Движения, ВидУчета = "")

	Если ВидУчета = "" Тогда
		ИмяРегистраБухгалтерии 	 = "Типовой";
	Иначе
		ИмяРегистраБухгалтерии 	 = "Налоговый";
	КонецЕсли;	

	Проводка = Движения[ИмяРегистраБухгалтерии].Добавить();

	Проводка.Период      = Реквизиты.Период;
	Проводка.Организация = Реквизиты.Организация;
	Проводка.Содержание  = Реквизиты.Содержание;
	Проводка.Сумма       = Реквизиты.Сумма;

	//Дт
	Проводка.СчетДт = Реквизиты["СчетДт" + ВидУчета];
	ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, Реквизиты["СубконтоДт" + ВидУчета + 1]);
	ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, Реквизиты["СубконтоДт" + ВидУчета + 2]);
	ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, Реквизиты["СубконтоДт" + ВидУчета + 3]);
		
	//Кт
	Проводка.СчетКт = Реквизиты["СчетКт" + ВидУчета];
	ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "НалогиСборыОтчисления",     Реквизиты.Налог);
	ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ВидыПлатежейВБюджетИФонды", Реквизиты.ВидПлатежаВБюджет);
	
	Если ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.НаСчетеВедетсяУчетПоКонтрагентам(Проводка.СчетКт) Тогда
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", Реквизиты.НалоговыйКомитет);
	КонецЕсли;
			
	ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
		Проводка, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);	
	
	Если ВидУчета = "НУ" Тогда		
		ПроцедурыНалоговогоУчета.ВидУчетаНУ(Проводка, Реквизиты.ВидУчетаНУ);		
	КонецЕсли;		
	
КонецПроцедуры

Функция ЗаполнитьВТаблицахНалоговыйКомитет(ТаблицаДвижений,ТаблицаРеквизитов, ИмяКолонки =  "НалоговыйКомитет") Экспорт

	Если ТаблицаДвижений = Неопределено ИЛИ ТаблицаРеквизитов = Неопределено Тогда
		Возврат ТаблицаДвижений;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизитов[0];
	          
	ИсчислениеНалоговСЕ  = ПолныеПраваПовтИсп.ЗаполнитьИсчислениеНалоговСтруктурныхЕдиниц();
	Для Каждого Строка ИЗ ТаблицаДвижений Цикл	
		
		Если Реквизиты.ПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
			НалоговыйКомитет = ПроцедурыНалоговогоУчета.ПолучитьНалоговыйКомитетСтруктурнойЕдиницы(Строка.СтруктурнаяЕдиница, 
			Реквизиты.Организация,
			ИсчислениеНалоговСЕ,
			Перечисления.РазделыНалоговогоУчета.НалогиСЗаработнойПлаты);
		Иначе
			НалоговыйКомитет =  Справочники.Контрагенты.ПустаяСсылка();
		КонецЕсли;
		
		Если НЕ ТаблицаДвижений.Колонки.Найти("Налог") = Неопределено И Строка.Налог = Справочники.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносы Тогда
			Продолжить;
		КонецЕсли;
		
		Строка[ИмяКолонки] = НалоговыйКомитет;
	КонецЦикла;
	
	Возврат ТаблицаДвижений;
	
КонецФункции

//Расчет СО при поступлении активов

Процедура СформироватьДвиженияОтраженияЗатратПоСОВРеглУчете(ТаблицаДвижений, Движения, Отказ) Экспорт

	Если ТаблицаДвижений = Неопределено ИЛИ ТаблицаДвижений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыОтраженияЗатратПоСО(ТаблицаДвижений);
	
	Реквизиты = Параметры.ТаблицаДвижений[0];
	
	//Проводки по БУ
	ДобавитьДвижениеОтраженияЗатратСО(Реквизиты, Движения);
		
	//Проводки по НУ
	Если Реквизиты.НеобходимостьОтраженияВНУ Тогда
		ДобавитьДвижениеОтраженияЗатратСО(Реквизиты, Движения, "НУ");
	КонецЕсли;
		
	Движения.Типовой.Записывать = Истина;
	Если Реквизиты.НеобходимостьОтраженияВНУ Тогда
		Движения.Налоговый.Записывать = Истина;
	КонецЕсли;
	
КонецПроцедуры

Функция ПодготовитьПараметрыОтраженияЗатратПоСО(ТаблицаДвижений)

	Параметры = Новый Структура;
	
	СписокОбязательныхКолонок = ""
	+ "Период,"      				   
	+ "Организация,"    				
	+ "Регистратор,"                
	+ "Содержание,"                
	+ "НеобходимостьОтраженияВНУ," 
	+ "СтруктурноеПодразделение,"  
	+ "ВидУчетаНУ,"                
	+ "СчетДт,"                    
	+ "СубконтоДт1,"            
	+ "СубконтоДт2,"            
	+ "СубконтоДт3,"            
	+ "СчетДтНУ,"  
	+ "СубконтоДтНУ1,"            
	+ "СубконтоДтНУ2,"            
	+ "СубконтоДтНУ3,"  
	+ "СчетКт,"        
	+ "СчетКтНУ,"        
	+ "Налог,"            
	+ "ВидПлатежаВБюджет,"  
	+ "НалоговыйКомитет,"        
	+ "Сумма,"
	+ "ВалютаВзаиморасчетов,"
	+ "Контрагент"
	;
	
	Параметры.Вставить("ТаблицаДвижений", ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаДвижений, СписокОбязательныхКолонок));
	
	Возврат Параметры;

КонецФункции

Процедура ДобавитьДвижениеОтраженияЗатратСО(Реквизиты, Движения, ВидУчета = "")

	Если ВидУчета = "" Тогда
		ИмяРегистраБухгалтерии 	 = "Типовой";
	Иначе
		ИмяРегистраБухгалтерии 	 = "Налоговый";
	КонецЕсли;	

	Проводка = Движения[ИмяРегистраБухгалтерии].Добавить();

	Проводка.Период      = Реквизиты.Период;
	Проводка.Организация = Реквизиты.Организация;
	Проводка.Содержание  = Реквизиты.Содержание;
	Проводка.Сумма       = Реквизиты.Сумма;
	
	//Дт
	Проводка.СчетДт = Реквизиты["СчетДт" + ВидУчета];
	ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, Реквизиты["СубконтоДт" + ВидУчета + 1]);
	ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, Реквизиты["СубконтоДт" + ВидУчета + 2]);
	ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, Реквизиты["СубконтоДт" + ВидУчета + 3]);
		
	//Кт
	Проводка.СчетКт = Реквизиты["СчетКт" + ВидУчета];
	//ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "НалогиСборыОтчисления",     Реквизиты.Налог);
	ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ВидыПлатежейВБюджетИФонды", Реквизиты.ВидПлатежаВБюджет);
	
	Если ВидУчета = "" Тогда
		СвойстваСчетаРасчетов = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
		Если СвойстваСчетаРасчетов.Валютный Тогда
			Проводка.ВалютаДт        = Реквизиты.ВалютаВзаиморасчетов;
			Проводка.ВалютнаяСуммаДт = Реквизиты.Сумма;
		КонецЕсли;
	КонецЕсли;

	Если ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.НаСчетеВедетсяУчетПоРаботникамОрганизаций(Проводка.СчетКт) Тогда
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "РаботникиОрганизаций", Реквизиты.Контрагент.ФизЛицо);
	КонецЕсли;
			
	ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
		Проводка, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);	
	
	Если ВидУчета = "НУ" Тогда		
		ПроцедурыНалоговогоУчета.ВидУчетаНУ(Проводка, Реквизиты.ВидУчетаНУ);		
	КонецЕсли;		
	
КонецПроцедуры


// ЕП

// ВОСМСРасчетыСФондами
Процедура СформироватьДвиженияЕПРасчетыСФондами(Реквизиты, ТаблицаИсчисленныеЕП, Движения, Отказ) Экспорт
	
	Если ТаблицаИсчисленныеЕП = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из ТаблицаИсчисленныеЕП Цикл
		
		Налогоплательщик = ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(
																		СтрокаТаблицы.СтруктурнаяЕдиница,
																		Реквизиты.Организация,
																		Перечисления.РазделыНалоговогоУчета.НалогиСЗаработнойПлаты);
															
		Проводка = Движения.ЕПРасчетыСФондами.Добавить();
		
		Проводка.Период     	  = СтрокаТаблицы.Период;
		Проводка.ВидДвижения	  = ВидДвиженияНакопления.Приход;
		Проводка.ФизЛицо 		  = СтрокаТаблицы.ФизЛицо;
		Проводка.Организация      = Реквизиты.Организация;
		Проводка.Налогоплательщик = Налогоплательщик;
		Проводка.ВидПлатежа       = СтрокаТаблицы.ВидПлатежа;

		Проводка.СтруктурнаяЕдиница	  = СтрокаТаблицы.СтруктурнаяЕдиница;
		Проводка.МесяцНалоговогоПериода   = СтрокаТаблицы.МесяцНалоговогоПериода;
		Проводка.ПодразделениеОрганизации = СтрокаТаблицы.ПодразделениеОрганизации;
		Проводка.СуммаПлатежа   	      = СтрокаТаблицы.СуммаПлатежа;
		Проводка.ВидСтроки = ПредопределенноеЗначение("Перечисление.РасчетыСБюджетомФондамиВидСтроки.Исчисление");
		
	КонецЦикла;
	
	Движения.ЕПРасчетыСФондами.Записывать = Истина;
	
КонецПроцедуры

Процедура СформироватьДвиженияЕПКомпонентыПлатежа(Реквизиты, ТаблицаЕПКомпонентыПлатежа, Движения, Отказ) Экспорт
	
	Если ТаблицаЕПКомпонентыПлатежа = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из ТаблицаЕПКомпонентыПлатежа Цикл
		
		Налогоплательщик = ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(
																		СтрокаТаблицы.СтруктурнаяЕдиница,
																		Реквизиты.Организация,
																		Перечисления.РазделыНалоговогоУчета.НалогиСЗаработнойПлаты);
															
		Проводка = Движения.ЕПКомпоненты.Добавить();
		
		Проводка.Период     	  = СтрокаТаблицы.Период;
		Проводка.ФизЛицо 		  = СтрокаТаблицы.ФизЛицо;
		Проводка.Организация      = Реквизиты.Организация;
		Проводка.Налогоплательщик = Налогоплательщик;
		Проводка.ВидПлатежа       = СтрокаТаблицы.ВидПлатежа;

		Проводка.СтруктурнаяЕдиница	  = СтрокаТаблицы.СтруктурнаяЕдиница;
		Проводка.МесяцНалоговогоПериода   = СтрокаТаблицы.МесяцНалоговогоПериода;
		Проводка.ПодразделениеОрганизации = СтрокаТаблицы.ПодразделениеОрганизации;
		Проводка.СуммаОПВ   	      	  = СтрокаТаблицы.СуммаОПВ;
		Проводка.СуммаВОСМС   	     	  = СтрокаТаблицы.СуммаВОСМС;
		Проводка.СуммаИПН   	    	  = СтрокаТаблицы.СуммаИПН;
		Проводка.СуммаООСМС   	   		  = СтрокаТаблицы.СуммаООСМС;
		Проводка.СуммаСО   	      		  = СтрокаТаблицы.СуммаСО;
		Проводка.СуммаОПВР   	    	  = СтрокаТаблицы.СуммаОПВР;
		
	КонецЦикла;
	
	Движения.ЕПКомпоненты.Записывать = Истина;
	
КонецПроцедуры

// Регистрация и перечисление прочих выплат

Процедура СформироватьДвиженияРегистрацияПрочихВыплат(Реквизиты, ТаблицаПрочиеВыплаты, Движения, Отказ) Экспорт
	
	ТаблицаФормированияПроводок = ТаблицаПрочиеВыплаты;
	
	Для Каждого СтрокаДанных Из ТаблицаФормированияПроводок Цикл

		// Формируем проводки 
		Если СтрокаДанных.Сумма <> 0 Тогда
			Проводка = Движения.Типовой.Добавить();
			
			Проводка.Период      = Реквизиты.Период;
			Проводка.Организация = Реквизиты.Организация;
			Проводка.Сумма       = СтрокаДанных.Сумма;
			
			// Счет Дт (БУ)
			Проводка.СчетДт = СтрокаДанных.СчетДтБУ;
							 
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаДанных.СубконтоДтБУ1);			
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаДанных.СубконтоДтБУ2);			
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтрокаДанных.СубконтоДтБУ3); 
						
			СвойстваСчетаДт    = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаДанных.СчетДтБУ);
			Для ИндексСубконто = 1 По СвойстваСчетаДт.КоличествоСубконто Цикл
				Если СвойстваСчетаДт["ВидСубконто" + ИндексСубконто] = ПланыВидовХарактеристик.ВидыСубконтоТиповые.РаботникиОрганизаций И НЕ ЗначениеЗаполнено(СтрокаДанных["СубконтоДтБУ" + ИндексСубконто]) И ЗначениеЗаполнено(СтрокаДанных.ФизЛицо) Тогда
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка["СубконтоДт"], "РаботникиОрганизаций", СтрокаДанных.ФизЛицо);
				КонецЕсли; 
				Если СвойстваСчетаДт["ВидСубконто" + ИндексСубконто] = ПланыВидовХарактеристик.ВидыСубконтоТиповые.ВидыПрочихВыплат И НЕ ЗначениеЗаполнено(СтрокаДанных["СубконтоДтБУ" + ИндексСубконто]) И ЗначениеЗаполнено(СтрокаДанных.ВидПрочихВыплат) Тогда
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка["СубконтоДт"], "ВидыПрочихВыплат", СтрокаДанных.ВидПрочихВыплат);
				КонецЕсли;
			КонецЦикла; 
			
			// Счет Кт (БУ) 
			
			СтруктураДанных = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаДанных.СпособОтраженияВРеглУчете,"СчетКт,СубконтоКт1,СубконтоКт2,СубконтоКт3,
																				|СчетКтНУ,СубконтоКтНУ1,СубконтоКтНУ2,СубконтоКтНУ3");
			
			Проводка.СчетКт = СтруктураДанных.СчетКт;
						
			//Заполняем субконто из способа отражения
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтруктураДанных.СубконтоКт1);			
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтруктураДанных.СубконтоКт2);			
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, СтруктураДанных.СубконтоКт3); 
			
			//Если в способе отражения указан Счет с субконто РаботникиОрганизаций, но субконто не заполнено, то заполняем физ.лицом из строки
			СвойстваСчетаКт    = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
			Для ИндексСубконто = 1 По СвойстваСчетаКт.КоличествоСубконто Цикл
				Если СвойстваСчетаКт["ВидСубконто" + ИндексСубконто] = ПланыВидовХарактеристик.ВидыСубконтоТиповые.РаботникиОрганизаций И НЕ ЗначениеЗаполнено(СтруктураДанных["СубконтоКт" + ИндексСубконто]) И ЗначениеЗаполнено(СтрокаДанных.ФизЛицо) Тогда
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка["СубконтоКт"], "РаботникиОрганизаций", СтрокаДанных.ФизЛицо);
				КонецЕсли; 
				Если СвойстваСчетаКт["ВидСубконто" + ИндексСубконто] = ПланыВидовХарактеристик.ВидыСубконтоТиповые.ВидыПрочихВыплат И НЕ ЗначениеЗаполнено(СтруктураДанных["СубконтоКт" + ИндексСубконто]) И ЗначениеЗаполнено(СтрокаДанных.ВидПрочихВыплат) Тогда
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка["СубконтоКт"], "ВидыПрочихВыплат", СтрокаДанных.ВидПрочихВыплат);
				КонецЕсли;
			КонецЦикла; 
	
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(Проводка, СтрокаДанных.СтруктурноеПодразделение, СтрокаДанных.СтруктурноеПодразделение);

			Если Проводка.СчетДт.Валютный Тогда
				Проводка.ВалютаДт = Реквизиты.ВалютаРеглУчета;
				Проводка.ВалютнаяСуммаДт = СтрокаДанных.Сумма;
			КонецЕсли;
	
			Если Проводка.СчетКт.Валютный Тогда
				Проводка.ВалютаКт 			= Реквизиты.ВалютаРеглУчета;
				Проводка.ВалютнаяСуммаКт 	= СтрокаДанных.Сумма;
			КонецЕсли;
			
			// реквизиты
			СтрокаСодержания = ?(ЗначениеЗаполнено(СтрокаДанных.ВидПрочихВыплат.ПолноеНаименование), СтрокаДанных.ВидПрочихВыплат.ПолноеНаименование, СтрокаДанных.ВидПрочихВыплат.Наименование);		
			Проводка.Содержание	 = СтрокаСодержания;		
						
			//НУ
			Если Реквизиты.НеобходимостьОтраженияВНУ Тогда
				
				ПроводкаНУ = Движения.Налоговый.Добавить();
				
				ПроводкаНУ.Период      = Реквизиты.Период;
				ПроводкаНУ.Организация = Реквизиты.Организация;
				ПроводкаНУ.Сумма       = СтрокаДанных.Сумма;
				
				// Счет Дт (НУ)
				ПроводкаНУ.СчетДт      = СтрокаДанных.СчетДтНУ;
								
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 1, СтрокаДанных.СубконтоДтНУ1);			
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 2, СтрокаДанных.СубконтоДтНУ2);			
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 3, СтрокаДанных.СубконтоДтНУ3);
				
				СвойстваСчетаДтНУ  = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаДанных.СчетДтНУ);
				Для ИндексСубконто = 1 По СвойстваСчетаДтНУ.КоличествоСубконто Цикл
					Если СвойстваСчетаДтНУ["ВидСубконто" + ИндексСубконто] = ПланыВидовХарактеристик.ВидыСубконтоТиповые.РаботникиОрганизаций И НЕ ЗначениеЗаполнено(СтрокаДанных["СубконтоДтНУ" + ИндексСубконто]) И ЗначениеЗаполнено(СтрокаДанных.ФизЛицо) Тогда
						ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ["СубконтоДт"], "РаботникиОрганизаций", СтрокаДанных.ФизЛицо);
					КонецЕсли;
					Если СвойстваСчетаДтНУ["ВидСубконто" + ИндексСубконто] = ПланыВидовХарактеристик.ВидыСубконтоТиповые.ВидыПрочихВыплат И НЕ ЗначениеЗаполнено(СтрокаДанных["СубконтоДтНУ" + ИндексСубконто]) И ЗначениеЗаполнено(СтрокаДанных.ВидПрочихВыплат) Тогда
						ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ["СубконтоДт"], "ВидыПрочихВыплат", СтрокаДанных.ВидПрочихВыплат);
					КонецЕсли;
				КонецЦикла;
				
				// Счет Кт (НУ)				
				ПроводкаНУ.СчетКт       = СтруктураДанных.СчетКтНУ;
				
				//Заполняем субконто из способа отражения
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 1, СтруктураДанных.СубконтоКтНУ1);			
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 2, СтруктураДанных.СубконтоКтНУ2);			
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 3, СтруктураДанных.СубконтоКтНУ3);
				
				//Если в способе отражения указан Счет с субконто РаботникиОрганизаций, но субконто не заполнено, то заполняем физ.лицом из строки
				СвойстваСчетаКтНУ    = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(ПроводкаНУ.СчетКт);
				Для ИндексСубконто = 1 По СвойстваСчетаКтНУ.КоличествоСубконто Цикл
					Если СвойстваСчетаКтНУ["ВидСубконто" + ИндексСубконто] = ПланыВидовХарактеристик.ВидыСубконтоТиповые.РаботникиОрганизаций И НЕ ЗначениеЗаполнено(СтруктураДанных["СубконтоКтНУ" + ИндексСубконто]) И ЗначениеЗаполнено(СтрокаДанных.ФизЛицо) Тогда
						ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "РаботникиОрганизаций", СтрокаДанных.ФизЛицо);
					КонецЕсли;
					Если СвойстваСчетаКтНУ["ВидСубконто" + ИндексСубконто] = ПланыВидовХарактеристик.ВидыСубконтоТиповые.ВидыПрочихВыплат И НЕ ЗначениеЗаполнено(СтруктураДанных["СубконтоКтНУ" + ИндексСубконто]) И ЗначениеЗаполнено(СтрокаДанных.ВидПрочихВыплат) Тогда
						ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "ВидыПрочихВыплат", СтрокаДанных.ВидПрочихВыплат);
					КонецЕсли;
				КонецЦикла; 				
				
				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(Проводка, СтрокаДанных.СтруктурноеПодразделение, СтрокаДанных.СтруктурноеПодразделение);
				
				ПроцедурыНалоговогоУчета.ВидУчетаНУ(ПроводкаНУ, СтрокаДанных.ВидУчетаНУ);
				
				ПроводкаНУ.Содержание  = СтрокаСодержания;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Движения.Типовой.Записать(Истина);
	Движения.Налоговый.Записать(Истина);

КонецПроцедуры

Процедура СформироватьДвиженияРегистрацияПрочихВыплатВзаиморасчеты(ТаблицаДанных, ИмяРегистра, Движения, Отказ) Экспорт
	
	Если ТаблицаДанных = Неопределено ИЛИ ТаблицаДанных.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Движения[ИмяРегистра].Загрузить(ТаблицаДанных);
	Движения[ИмяРегистра].Записывать = Истина;

КонецПроцедуры

Процедура СформироватьДвиженияПеречислениеПрочихВыплат(ТаблицаРеквизиты, ТаблицаПеречислениеПрочихВыплат, Движения, Отказ) Экспорт
	
	Если ТаблицаПеречислениеПрочихВыплат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизиты[0];
	СформироватьПроводкиПеречислениеПрочихВыплат(Реквизиты, ТаблицаПеречислениеПрочихВыплат.Скопировать(), Движения, Отказ);
	
	Если Реквизиты.ЕстьПеречислениеПрочихВыплат Тогда
		ТаблицаДвиженияПрочиеВыплаты = ПодготовитьТаблицуДвиженияПрочиеВыплаты(Реквизиты, ТаблицаПеречислениеПрочихВыплат, Отказ); 
		ЗарегистрироватьДвиженияПеречислениеПрочихВыплат(Реквизиты, ТаблицаДвиженияПрочиеВыплаты, Движения, Отказ);
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьПроводкиПеречислениеПрочихВыплат(Реквизиты, ТаблицаПеречислениеПрочихВыплат, Движения, Отказ)      
				
	ТаблицаФормированияПроводок = ТаблицаПеречислениеПрочихВыплат;
		
	Для Каждого СтрокаДанных Из ТаблицаФормированияПроводок Цикл
		
		// Движения по регистру "Типовой"  
				
		// СчетДт
		СчетДт = СтрокаДанных.СчетДтБУ;
				
		// СчетДтНУ
		СчетДтНУ = СтрокаДанных.СчетДтНУ; 
								
		Проводка = Движения.Типовой.Добавить();

		//	Свойства
		Проводка.Период		 = Реквизиты.Дата;
		
		// Измерения
		Проводка.Организация = Реквизиты.Организация;
		
		Проводка.СчетДт		 = СчетДт; 
		
		//Заполняем субконто из способа отражения
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаДанных.СубконтоДтБУ1);			
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаДанных.СубконтоДтБУ2);			
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтрокаДанных.СубконтоДтБУ3); 
		
		//Если в способе отражения указан Счет с субконто РаботникиОрганизаций, но субконто не заполнено, то заполняем физ.лицом из строки
		СвойстваСчетаДт    = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(СчетДт);
		Для ИндексСубконто = 1 По СвойстваСчетаДт.КоличествоСубконто Цикл
			Если СвойстваСчетаДт["ВидСубконто" + ИндексСубконто] = ПланыВидовХарактеристик.ВидыСубконтоТиповые.РаботникиОрганизаций И НЕ ЗначениеЗаполнено(СтрокаДанных["СубконтоДтБУ" + ИндексСубконто]) И ЗначениеЗаполнено(СтрокаДанных.ФизЛицо) Тогда
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка["СубконтоДт"], "РаботникиОрганизаций", СтрокаДанных.ФизЛицо);
			КонецЕсли;   
			Если СвойстваСчетаДт["ВидСубконто" + ИндексСубконто] = ПланыВидовХарактеристик.ВидыСубконтоТиповые.ВидыПрочихВыплат И НЕ ЗначениеЗаполнено(СтрокаДанных["СубконтоДтБУ" + ИндексСубконто]) И ЗначениеЗаполнено(СтрокаДанных.ВидПрочихВыплат) Тогда
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка["СубконтоДт"], "ВидыПрочихВыплат", СтрокаДанных.ВидПрочихВыплат);
			КонецЕсли;
		КонецЦикла; 
					
		Проводка.СчетКт = СтрокаДанных.СчетКт;
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, СтрокаДанных.ИмяСубконтоКт1, СтрокаДанных.СубконтоКт1);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, СтрокаДанных.ИмяСубконтоКт2, СтрокаДанных.СубконтоКт2);
		
		ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(Проводка, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);

		Если Проводка.СчетКт.Валютный Тогда
			Проводка.ВалютаКт 			= Реквизиты.ВалютаДокумента;
			Проводка.ВалютнаяСуммаКт 	= СтрокаДанных.Сумма;
		КонецЕсли;
		
		// Ресурсы
		Проводка.Сумма		 = СтрокаДанных.Сумма;
		
		// Реквизиты 
		ТекстПроводки = ?(ЗначениеЗаполнено(СтрокаДанных.ВидПрочихВыплат.ПолноеНаименование), СтрокаДанных.ВидПрочихВыплат.ПолноеНаименование, СтрокаДанных.ВидПрочихВыплат.Наименование);		
		Проводка.Содержание	 = ТекстПроводки;		 
		
		//Движения по регистру "Налоговый"
		Если Реквизиты.НеобходимостьОтраженияВНУ Тогда
			ПроводкаНУ = Движения.Налоговый.Добавить();
			
			// Свойства
			ПроводкаНУ.Период			= Реквизиты.Дата;
			
			// Измерения
			ПроводкаНУ.Организация		= Реквизиты.Организация;
			
			ПроводкаНУ.СчетДт			= СчетДтНУ;
			
			//Заполняем субконто из способа отражения
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 1, СтрокаДанных.СубконтоДтНУ1);			
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 2, СтрокаДанных.СубконтоДтНУ2);			
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 3, СтрокаДанных.СубконтоДтНУ3);
			
			//Если в способе отражения указан Счет с субконто РаботникиОрганизаций, но субконто не заполнено, то заполняем физ.лицом из строки
			СвойстваСчетаДтНУ    = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(СчетДтНУ);
			Для ИндексСубконто = 1 По СвойстваСчетаДтНУ.КоличествоСубконто Цикл
				Если СвойстваСчетаДтНУ["ВидСубконто" + ИндексСубконто] = ПланыВидовХарактеристик.ВидыСубконтоТиповые.РаботникиОрганизаций И НЕ ЗначениеЗаполнено(СтрокаДанных["СубконтоДтНУ" + ИндексСубконто]) И ЗначениеЗаполнено(СтрокаДанных.ВидПрочихВыплат) Тогда
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "РаботникиОрганизаций", СтрокаДанных.ФизЛицо);
				КонецЕсли;
				Если СвойстваСчетаДтНУ["ВидСубконто" + ИндексСубконто] = ПланыВидовХарактеристик.ВидыСубконтоТиповые.ВидыПрочихВыплат И НЕ ЗначениеЗаполнено(СтрокаДанных["СубконтоДтНУ" + ИндексСубконто]) И ЗначениеЗаполнено(СтрокаДанных.ВидПрочихВыплат) Тогда
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "ВидыПрочихВыплат", СтрокаДанных.ВидПрочихВыплат);
				КонецЕсли;
			КонецЦикла; 
										
			Если ЗначениеЗаполнено(СтрокаДанных.СчетКтНУ) Тогда
				ПроводкаНУ.СчетКт = СтрокаДанных.СчетКтНУ;
			Иначе 
				ПроводкаНУ.СчетКт = ПроцедурыБухгалтерскогоУчета.ЗаполнитьСчетНалоговогоУчетаПоУмолчанию(СтрокаДанных.СчетКт, Реквизиты.Дата, СтрокаДанных.СчетКтНУПоУмолчанию);			
			КонецЕсли;
			
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, СтрокаДанных.ИмяСубконтоКт1, СтрокаДанных.СубконтоКт1);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, СтрокаДанных.ИмяСубконтоКт2, СтрокаДанных.СубконтоКт2);
						
			ПроводкаНУ.Сумма			= СтрокаДанных.Сумма;
			
			// Реквизиты 
			ПроводкаНУ.Содержание		= ТекстПроводки;	
			
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(ПроводкаНУ, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);
			
			ПроцедурыНалоговогоУчета.ВидУчетаНУ(ПроводкаНУ,  Реквизиты.ВидУчетаНУ);
			
		КонецЕсли;

	 КонецЦикла;

	Движения.Типовой.Записывать = Истина;
	
	Если Реквизиты.НеобходимостьОтраженияВНУ Тогда
		Движения.Налоговый.Записывать = Истина;
	КонецЕсли;
	
КонецПроцедуры

Функция ПодготовитьТаблицуДвиженияПрочиеВыплаты(Реквизиты, ТаблицаПеречислениеПрочихВыплат, Отказ) 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДанныеПрочиеВыплаты", ТаблицаПеречислениеПрочихВыплат);
	Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);   
	Запрос.УстановитьПараметр("ОбособленноеПодразделение", Реквизиты.Организация);
	Запрос.УстановитьПараметр("Дата", Реквизиты.Дата);

	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;

	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДанныеПрочиеВыплаты.ФизЛицо,
		|	ДанныеПрочиеВыплаты.ПериодВзаиморасчетов,
		|	ДанныеПрочиеВыплаты.ВидПрочихВыплат,
		|	ДанныеПрочиеВыплаты.СпособРасчетаСуммКПеречислению,
		|	ДанныеПрочиеВыплаты.Сумма
		|ПОМЕСТИТЬ ДанныеПрочиеВыплаты
		|ИЗ
		|	&ДанныеПрочиеВыплаты КАК ДанныеПрочиеВыплаты
		|";
		
	Запрос.Выполнить();	
	
	Если Реквизиты.ПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
		
		ПериодыФизЛицаТекст = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДанныеПрочиеВыплаты.ФизЛицо,
		|	ДанныеПрочиеВыплаты.ПериодВзаиморасчетов КАК Период
		|ПОМЕСТИТЬ ВТ_ПериодыФизЛиц
		|ИЗ
		|	ДанныеПрочиеВыплаты КАК ДанныеПрочиеВыплаты
		|";
		
		Запрос.Текст = ПериодыФизЛицаТекст + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета()
					 + СформироватьТекстЗапросаСтруктурныеЕдиницы("ВТ_ПериодыФизЛиц", Истина);
		Запрос.Выполнить();
	КонецЕсли;

	
	Запрос.Текст =  
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПеречислениеПрочихВыплат.ПериодВзаиморасчетов КАК ПериодВзаиморасчетов,
	|	ПеречислениеПрочихВыплат.ВидПрочихВыплат КАК ВидПрочихВыплат,
	|	ПеречислениеПрочихВыплат.ФизЛицо КАК ФизЛицо,
	|	ПеречислениеПрочихВыплат.Сумма КАК Сумма,  
	|	ЕСТЬNULL(ВзаиморасчетыПоПрочимВыплатамОстатки.СуммаВзаиморасчетовОстаток, 0) КАК СуммаВзаиморасчетовОстаток";
	
	Если Реквизиты.ПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
		Запрос.Текст = Запрос.Текст + ",
		|	ВЫБОР
		|		КОГДА НЕ (ВзаиморасчетыПоПрочимВыплатамОстатки.СтруктурнаяЕдиница ЕСТЬ NULL)
		|			ТОГДА ВзаиморасчетыПоПрочимВыплатамОстатки.СтруктурнаяЕдиница                  		
		|		ИНАЧЕ &ОбособленноеПодразделение
		|	КОНЕЦ КАК СтруктурнаяЕдиница,
		|	ВзаиморасчетыПоПрочимВыплатамОстатки.Налогоплательщик КАК Налогоплательщик
		|";
	Иначе
		Запрос.Текст = Запрос.Текст + ",
		|	&ОбособленноеПодразделение КАК СтруктурнаяЕдиница,
		|	&ОбособленноеПодразделение КАК Налогоплательщик
		|";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|ИЗ
	|	ДанныеПрочиеВыплаты КАК ПеречислениеПрочихВыплат
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВзаиморасчетыПоПрочимВыплатам.Остатки(
	|			&Дата,
	|			Организация = &ОбособленноеПодразделение
	|			И ФизЛицо В
	|		        (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					ФизЛицо
	|				ИЗ
	|					ДанныеПрочиеВыплаты КАК Док)) КАК ВзаиморасчетыПоПрочимВыплатамОстатки
	|		ПО ПеречислениеПрочихВыплат.ФизЛицо = ВзаиморасчетыПоПрочимВыплатамОстатки.ФизЛицо
	|			И ПеречислениеПрочихВыплат.ПериодВзаиморасчетов = ВзаиморасчетыПоПрочимВыплатамОстатки.ПериодВзаиморасчетов
	|			И ПеречислениеПрочихВыплат.ВидПрочихВыплат = ВзаиморасчетыПоПрочимВыплатамОстатки.ВидПрочихВыплат
	|";
					
	Запрос.Текст = Запрос.Текст + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	ФизЛицо,	
	|	ВидПрочихВыплат,	
	|	ПериодВзаиморасчетов
	|";
	
	Возврат Запрос.Выполнить().Выбрать();
		
КонецФункции

Процедура ЗарегистрироватьДвиженияПеречислениеПрочихВыплат(Реквизиты, Выборка, Движения, Отказ)
	
	ПоддержкаРаботыСоСтруктурнымиПодразделениями = Реквизиты.ПоддержкаРаботыСоСтруктурнымиПодразделениями;
	
	Пока Выборка.СледующийПоЗначениюПоля("ФизЛицо") Цикл
	
		Пока Выборка.СледующийПоЗначениюПоля("ВидПрочихВыплат") Цикл
		
			Пока Выборка.СледующийПоЗначениюПоля("ПериодВзаиморасчетов") Цикл
			
				ОстатокКСписанию 		    = Выборка.Сумма;
				ТекущееФизЛицо 			    = Выборка.ФизЛицо;
				ТекущийВидПрочихВыплат	    = Выборка.ВидПрочихВыплат;
				ТекущийПериодВзаиморасчетов	= Выборка.ПериодВзаиморасчетов;
				
				Пока Выборка.Следующий()
				   И Выборка.ФизЛицо = ТекущееФизЛицо
				   И Выборка.ВидПрочихВыплат = ТекущийВидПрочихВыплат
				   И Выборка.ПериодВзаиморасчетов = ТекущийПериодВзаиморасчетов
				   И Выборка.Налогоплательщик <> NULL Цикл
				
					СуммаКСписанию 		= Мин(ОстатокКСписанию, Выборка.СуммаВзаиморасчетовОстаток);
					ОстатокКСписанию 	= ОстатокКСписанию - СуммаКСписанию;
					
					Если СуммаКСписанию = 0 Тогда
						Прервать;
					КонецЕсли;
					
					Движение = Движения.ВзаиморасчетыПоПрочимВыплатам.Добавить();
					
					// Свойства
					Движение.Период			= Реквизиты.Дата;
					Движение.ВидДвижения	= ВидДвиженияНакопления.Расход;					
					// Измерения
					Движение.ФизЛицо		= Выборка.ФизЛицо;
					Если ПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
						Движение.СтруктурнаяЕдиница	= Выборка.СтруктурнаяЕдиница;
						Движение.Налогоплательщик	= Выборка.Налогоплательщик;
					Иначе
						Движение.СтруктурнаяЕдиница	= Реквизиты.Организация;
						Движение.Налогоплательщик	= Реквизиты.Организация;
					КонецЕсли;
					Движение.ПериодВзаиморасчетов	= Выборка.ПериодВзаиморасчетов; 

					Движение.ВидПрочихВыплат	    = Выборка.ВидПрочихВыплат;
					Движение.Организация			= Реквизиты.Организация;					
					
					// Ресурсы
					Движение.СуммаВзаиморасчетов	= СуммаКСписанию;					
					// Реквизиты
					Движение.ВидСтроки				= Перечисления.РасчетыСБюджетомФондамиВидСтроки.Перечисление;				
				КонецЦикла;
			
				Если ОстатокКСписанию <> 0 Тогда 

					Движение = Движения.ВзаиморасчетыПоПрочимВыплатам.Добавить();					
					// Свойства
					Движение.Период			= Реквизиты.Дата;
					Движение.ВидДвижения	= ВидДвиженияНакопления.Расход;					
					// Измерения
					Движение.ФизЛицо		= ТекущееФизЛицо;

					Движение.СтруктурнаяЕдиница	= Реквизиты.Организация;
					Движение.Налогоплательщик	= Реквизиты.Организация;

					Движение.ПериодВзаиморасчетов	= ТекущийПериодВзаиморасчетов;
					Движение.ВидПрочихВыплат		= ТекущийВидПрочихВыплат;
					Движение.Организация			= Реквизиты.Организация;
															
					// Ресурсы
					Движение.СуммаВзаиморасчетов	= ОстатокКСписанию;
					
					// Реквизиты
					Движение.ВидСтроки				= Перечисления.РасчетыСБюджетомФондамиВидСтроки.Перечисление;
				    
				КонецЕсли;
				
			КонецЦикла; // Пока Выборка.СледующийПоЗначениюПоля("ПериодВзаиморасчетов") Цикл
		
		КонецЦикла; // Пока Выборка.СледующийПоЗначениюПоля("ВидПрочихВыплат") Цикл
	
	КонецЦикла; // Пока Выборка.СледующийПоЗначениюПоля("ФизЛицо") Цикл
	
	Движения.ВзаиморасчетыПоПрочимВыплатам.Записывать = Истина;

КонецПроцедуры

// Медицинское страхование по периодам 

// Готовится таблица для формирования движений по регистру сведений ПериодыОплатыДляМедицинскогоСтрахования
// на основании подготовленных данных документа
//
Функция ПодготовитьТаблицуПериодыОплатыДляМедицинскогоСтрахования(Реквизиты, ТаблицаНачисления, ТаблицаПериодыОплаты, Отказ, ДополнительныйОтбор = Неопределено, ИсключаемыеКолонки = "Активность, Регистратор, НомерСтроки") Экспорт
	
	Если ТаблицаНачисления = Неопределено ИЛИ ТаблицаНачисления.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ДополнительныйОтбор <> Неопределено 
		И ТипЗнч(ДополнительныйОтбор) = Тип("Структура") Тогда
		МассивСтрок = ТаблицаНачисления.НайтиСтроки(ДополнительныйОтбор);		
	Иначе 
		МассивСтрок = ТаблицаНачисления;
	КонецЕсли;
	
	Если МассивСтрок.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ИсключаемыеКолонки <> "" Тогда
		// Удалим не нужные колонки
		МассивИменКолонок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИсключаемыеКолонки, ",", , Истина);		
		Для Каждого ИмяКолонки Из МассивИменКолонок Цикл
			Если ТаблицаПериодыОплаты.Колонки.Найти(ИмяКолонки) <> Неопределено Тогда
				ТаблицаПериодыОплаты.Колонки.Удалить(ИмяКолонки);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	ПериодРегистрации = Реквизиты.ПериодРегистрации;
	Организация = Реквизиты.Организация;

	// настройки периода действия получаем на период регистрации документа
	// при расчете по периоду действия расчет ОСМС будет разноситься по месяцу действия события,
	// делить сумму ОСМС по периодам необходимости нет
	//ИспользуетсяПериодДействия = Ложь; 
	ИспользуетсяПериодДействия = НЕ УчетнаяПолитикаСервер.ОтражениеПоПериодуРегистрации(Организация, Реквизиты.ПериодРегистрации);
	
	Если ИспользуетсяПериодДействия
		ИЛИ ПериодРегистрации < ДатаИзмененияПорядкаПеречисленияОСМС2024() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// в рамках документа регистрации события по сотруднику может быть несколько событий, 
	// переходящий период необходимо контролировать по всем видам событий
	// например, отпуск основной + отпуск экологический
	ДатаНачалаПоДокументу	 = Дата(3999, 12, 31, 23, 59, 59);
	ДатаОкончанияПоДокументу = Дата(1, 1, 1);
	ОбщиеКалендарныеДниРегистратора = 0;
	
	ЕстьСобытиеБудущегоПериода = Ложь;
	МесяцПослеПериодаРегистрации = НачалоМесяца(ДобавитьМесяц(ПериодРегистрации, 1));
	
	// Добавляем в регистр записи при переходящем отпуске или отпуске будущего периода
	Для Каждого СтрокаТаблицыНачисления Из ТаблицаНачисления Цикл    
		
		Если СтрокаТаблицыНачисления.ВидРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпуска
			И НЕ СтрокаТаблицыНачисления.ЯвляетсяКомпенсациейЗаНеиспользованныйОтпуск Тогда
					
			Если ДатаНачалаПоДокументу > СтрокаТаблицыНачисления.ДатаНачала Тогда
				ДатаНачалаПоДокументу = СтрокаТаблицыНачисления.ДатаНачала;	
			КонецЕсли;
			
			Если ДатаОкончанияПоДокументу < СтрокаТаблицыНачисления.ДатаОкончания Тогда
				ДатаОкончанияПоДокументу = СтрокаТаблицыНачисления.ДатаОкончания;	
			КонецЕсли;
			
			Если СтрокаТаблицыНачисления.ДатаНачала >= МесяцПослеПериодаРегистрации
				ИЛИ СтрокаТаблицыНачисления.ДатаОкончания >= МесяцПослеПериодаРегистрации Тогда
				
				ЕстьСобытиеБудущегоПериода = Истина;
				
			КонецЕсли;  
		
		КонецЕсли;
					
	КонецЦикла;
	
	ОбщиеКалендарныеДниРегистратора = КоличествоДнейВПериоде(ДатаНачалаПоДокументу, ДатаОкончанияПоДокументу);
	
	// календарный месяц более 28 дней (28-31, в высокосном 29-31)
	МинимальноеКоличествоКалендарныхДнейВГоду = ?(Цел(Год(ПериодРегистрации)/4 = Год(ПериодРегистрации)/4), 29, 28); 
	
	// в регистре формируем записи, только если отпуск удовлетворяет условию
	// начислении (исчислении) дохода, включающего период оплачиваемого трудового отпуска длительностью один или более одного календарного месяца
	Если ОбщиеКалендарныеДниРегистратора >= МинимальноеКоличествоКалендарныхДнейВГоду И (ЕстьСобытиеБудущегоПериода
		ИЛИ (НЕ ДатаНачалаПоДокументу = ДатаОкончанияПоДокументу И ЗначениеЗаполнено(ДатаНачалаПоДокументу)))  Тогда

		// Сформируем суммы отпуска по месяцам
		Запрос = Новый Запрос;
		Запрос.Текст = "
					   |ВЫБРАТЬ 
					   |	ТаблицаНачисления.Физлицо КАК ФизЛицо,
					   |	ТаблицаНачисления.ВидРасчета КАК ВидРасчета,
		               |	ТаблицаНачисления.Сотрудник КАК Сотрудник,
		               |	ТаблицаНачисления.ДатаНачала КАК ДатаНачала,
		               |	ТаблицаНачисления.ДатаОкончания КАК ДатаОкончания,
                       |	ТаблицаНачисления.СуммаДохода КАК Результат,
					   |	ТаблицаНачисления.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница 
					   |ПОМЕСТИТЬ ТаблицаНачисления   
					   |ИЗ &ТаблицаНачисления КАК ТаблицаНачисления
		               |;
					   |ВЫБРАТЬ РАЗРЕШЕННЫЕ
					   |	НачислениеЗарплатыРаботникамОрганизацийНачисления.ФизЛицо КАК ФизЛицо,
		               |	НачислениеЗарплатыРаботникамОрганизацийНачисления.Сотрудник КАК Сотрудник,
					   |	НачислениеЗарплатыРаботникамОрганизацийНачисления.ВидРасчета КАК ВидРасчета,
		               |	НачислениеЗарплатыРаботникамОрганизацийНачисления.ДатаНачала КАК ДатаНачала,
		               |	НачислениеЗарплатыРаботникамОрганизацийНачисления.ДатаОкончания КАК ДатаОкончания,
					   |	НачислениеЗарплатыРаботникамОрганизацийНачисления.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
		               |	ВЫБОР
		               |		КОГДА Начисления.ОблагаетсяВОСМС В (ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.ОблагаетсяЦеликом))
		               |			ТОГДА НачислениеЗарплатыРаботникамОрганизацийНачисления.Результат
		               |		ИНАЧЕ 0
		               |	КОНЕЦ КАК СуммаПоДокументу
		               |ИЗ
		               |	ТаблицаНачисления КАК НачислениеЗарплатыРаботникамОрганизацийНачисления
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК Начисления
		               |		ПО НачислениеЗарплатыРаботникамОрганизацийНачисления.ВидРасчета = Начисления.Ссылка
		               |ГДЕ
					   |	Начисления.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпуска) 
					   | 	И Начисления.ЯвляетсяКомпенсациейЗаНеиспользованныйОтпуск = ЛОЖЬ
		               |ИТОГИ
		               |	СУММА(СуммаПоДокументу)
		               |ПО
		               |	Сотрудник";
		
		Запрос.УстановитьПараметр("ТаблицаНачисления", ТаблицаНачисления);
		
		ДанныеОблагаемойСуммыДокумента = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ДанныеОблагаемойСуммыДокумента.Следующий() Цикл 
			
			СуммаПоСотруднику = ДанныеОблагаемойСуммыДокумента.СуммаПоДокументу;
			
			ВыборкаДанныеОблагаемойСуммыДокумента = ДанныеОблагаемойСуммыДокумента.Выбрать();
			
			Пока ВыборкаДанныеОблагаемойСуммыДокумента.Следующий() Цикл
			
				ДатаНачала    = ВыборкаДанныеОблагаемойСуммыДокумента.ДатаНачала;
				ДатаОкончания = КонецМесяца(ВыборкаДанныеОблагаемойСуммыДокумента.ДатаНачала);
				
				Пока КонецМесяца(ВыборкаДанныеОблагаемойСуммыДокумента.ДатаОкончания) > КонецМесяца(ДатаОкончания) Цикл
					
					ЗаписьПериода = ТаблицаПериодыОплаты.Добавить();
					ЗаполнитьЗначенияСвойств(ЗаписьПериода, ВыборкаДанныеОблагаемойСуммыДокумента);
					ЗаписьПериода.МесяцСобытия = НачалоМесяца(ДатаНачала);
					ЗаписьПериода.Организация = Организация;
					ЗаписьПериода.ФизическоеЛицо = ВыборкаДанныеОблагаемойСуммыДокумента.Физлицо;
					ЗаписьПериода.ПериодРегистрации = ПериодРегистрации;
					ЗаписьПериода.УчитываемыеДниПериода = КоличествоДнейВПериоде(ДатаНачала, ДатаОкончания);
					ЗаписьПериода.УчитываемыеДниСобытия = ОбщиеКалендарныеДниРегистратора;
					ЗаписьПериода.СуммаСобытия = СуммаПоСотруднику;	
					
					ДатаНачала = КонецМесяца(ДатаОкончания) + 1;
					ДатаОкончания = Мин(КонецМесяца(ДатаНачала), ВыборкаДанныеОблагаемойСуммыДокумента.ДатаОкончания);
					
				КонецЦикла;
				
				// закрывающая запись
				ЗаписьПериода = ТаблицаПериодыОплаты.Добавить();
				ЗаполнитьЗначенияСвойств(ЗаписьПериода, ВыборкаДанныеОблагаемойСуммыДокумента);
				ЗаписьПериода.МесяцСобытия = НачалоМесяца(ДатаНачала);
				ЗаписьПериода.Организация = Организация;
				ЗаписьПериода.ФизическоеЛицо = ВыборкаДанныеОблагаемойСуммыДокумента.Физлицо;
				ЗаписьПериода.ПериодРегистрации = ПериодРегистрации;
				ЗаписьПериода.УчитываемыеДниПериода = КоличествоДнейВПериоде(ДатаНачала, ВыборкаДанныеОблагаемойСуммыДокумента.ДатаОкончания);
				ЗаписьПериода.УчитываемыеДниСобытия = ОбщиеКалендарныеДниРегистратора;
				ЗаписьПериода.СуммаСобытия = СуммаПоСотруднику;	
			
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
		
	// если в рамках месяца были разные виды отпусков, то свернем их, получим итоги количества дней события и общую сумму
	ТаблицаПериодыОплаты.Свернуть("ПериодРегистрации, Сотрудник, ФизическоеЛицо, Организация, МесяцСобытия, СтруктурнаяЕдиница, УчитываемыеДниСобытия, СуммаСобытия", "УчитываемыеДниПериода");
		 	
	Возврат ТаблицаПериодыОплаты;
	
КонецФункции   

// Возвращает количество дней в периоде.
Функция КоличествоДнейВПериоде(ДатаНачала, ДатаОкончания) Экспорт
	Возврат Цел((ДатаОкончания - НачалоДня(ДатаНачала)) / 86400) + 1;
КонецФункции 

Функция ДатаИзмененияПорядкаПеречисленияОСМС2024() Экспорт
	
	Возврат НачалоМесяца('20240421');
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция ПересчитатьРазмерТарифнойСтавки(ДанныеСтроки)
	
	НовыйСпособРасчета 		= ДанныеСтроки.СпособРасчета;
	ПрежнийСпособРасчета 	= ДанныеСтроки.ПрежнийСпособРасчета;
	ПрежнийРазмер			= ДанныеСтроки.ПрежнийРазмер;
	Если ПроведениеРасчетовСервер.ЭтоРасчетПоМинимальнойЗаработнойПлате(ПрежнийСпособРасчета) Тогда
		ПрежнийРазмер 		= ПрежнийРазмер * ДанныеСтроки.ПрежнийРазмерМЗП;
	КонецЕсли;

	Если НовыйСпособРасчета = ПрежнийСпособРасчета Тогда
		// остался старый способ расчета
		Возврат ПрежнийРазмер;
	Иначе
		// новый способ расчета отличается от прежнего	
		СпособыРасчета = Перечисления.СпособыРасчетаОплатыТруда;
		// характер нового способа расчета
		НовыйРасчетЗаМесяц 		= (НовыйСпособРасчета = СпособыРасчета.ПоМесячнойТарифнойСтавкеОтОбратного
									ИЛИ НовыйСпособРасчета = СпособыРасчета.ПоМесячнойТарифнойСтавкеОтОбратногоПоДням
									ИЛИ НовыйСпособРасчета = СпособыРасчета.ПоМесячнойТарифнойСтавкеОтОбратногоПоЧасам
									ИЛИ НовыйСпособРасчета = СпособыРасчета.ПоМесячнойТарифнойСтавкеПоДням
									ИЛИ НовыйСпособРасчета = СпособыРасчета.ПоМесячнойТарифнойСтавкеПоЧасам
									ИЛИ НовыйСпособРасчета = СпособыРасчета.ПоМинимальнойЗаработнойПлатеПоДням
									ИЛИ НовыйСпособРасчета = СпособыРасчета.ПоМинимальнойЗаработнойПлатеПоЧасам);
									
		// характер прежнего способа расчета
		ПрежнийРасчетЗаМесяц 	= (ПрежнийСпособРасчета = СпособыРасчета.ПоМесячнойТарифнойСтавкеОтОбратного
									ИЛИ ПрежнийСпособРасчета = СпособыРасчета.ПоМесячнойТарифнойСтавкеОтОбратногоПоДням
									ИЛИ ПрежнийСпособРасчета = СпособыРасчета.ПоМесячнойТарифнойСтавкеОтОбратногоПоЧасам
									ИЛИ ПрежнийСпособРасчета = СпособыРасчета.ПоМесячнойТарифнойСтавкеПоДням
									ИЛИ ПрежнийСпособРасчета = СпособыРасчета.ПоМесячнойТарифнойСтавкеПоЧасам
									ИЛИ ПрежнийСпособРасчета = СпособыРасчета.ПоМинимальнойЗаработнойПлатеПоДням
									ИЛИ ПрежнийСпособРасчета = СпособыРасчета.ПоМинимальнойЗаработнойПлатеПоЧасам);
		
		//сам пересчет
		Если НовыйРасчетЗаМесяц Тогда // в месячную тарифную ставку
			Если ПрежнийРасчетЗаМесяц Тогда // из месячной по дням в месячную по часам или наоборот
				Возврат ПрежнийРазмер;
			Иначе // из часовой в месячную
				Возврат ПрежнийРазмер * ДанныеСтроки.НормаЧасов;
			КонецЕсли;
		
		Иначе // в часовую тарифную ставку
			Если ПрежнийРасчетЗаМесяц Тогда // из месячной в часовую
				Возврат ?(ДанныеСтроки.НормаЧасов <> 0, ПрежнийРазмер / ДанныеСтроки.НормаЧасов, 0);
		
			Иначе // из часовой в часовую 
				Возврат ПрежнийРазмер;
			
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ Управления доступом

// Выполняет формирование таблицы с набором значений доступа объекта (документа), 
// содержащего ссылки на организацию, структорное подразделение и кассе 
// Вызывается из процедуры ЗаполнитьНаборыЗначенийДоступа, реализованной в модуле таких 
// документов, доступ к которым выполняется через наборы значений доступа.
// Параметры:
//		Объект
//		Таблица - переданная таблица значений.
//		ПутьОрганизация - строка с именем реквизита, содержащего организацию.
//		ПутьСтруктурноеПодразделение - строка с именем реквизита, содержащего структурное подразделение.
//		ПутьКасса -  строка с именем реквизита, содержащего склад.
//
Процедура ЗаполнитьНаборыПоОрганизацииСтрутурномуПодразделениюСпискуФизЛиц(Объект, Таблица, ПутьОрганизация, ПутьСтруктурноеПодразделение, СписокФизЛиц, НомерНабора = 0) Экспорт
	
	// Логика ограничения:
	// объект доступен, если доступна организация, структурное подразделение и все физ лица
	
	ОбщегоНазначенияБК.ЗаполнитьНаборыПоОрганизацииСтурктурномуПодразделению(Объект, Таблица, ПутьОрганизация, ПутьСтруктурноеПодразделение, НомерНабора);
	
	Для Каждого СтрокаСписка Из СписокФизЛиц Цикл
		СтрокаТаб 					= Таблица.Добавить();
		СтрокаТаб.ЗначениеДоступа 	= СтрокаСписка;
		СтрокаТаб.НомерНабора 		= НомерНабора;
	КонецЦикла;	
КонецПроцедуры
