
#Область ПрограммныйИнтерфейс

#Область СведенияОБиблиотекеИлиКонфигурации

// Заполняет основные сведения о библиотеке или основной конфигурации.
// Библиотека, имя которой имя совпадает с именем конфигурации в метаданных, определяется как основная конфигурация.
// 
// Параметры:
//  Описание - Структура - сведения о библиотеке:
//
//   * Имя                 - Строка - имя библиотеки, например, "СтандартныеПодсистемы".
//   * Версия              - Строка - версия в формате из 4-х цифр, например, "2.1.3.1".
//
//   * ТребуемыеПодсистемы - Массив - имена других библиотек (Строка), от которых зависит данная библиотека.
//                                    Обработчики обновления таких библиотек должны быть вызваны ранее
//                                    обработчиков обновления данной библиотеки.
//                                    При циклических зависимостях или, напротив, отсутствии каких-либо зависимостей,
//                                    порядок вызова обработчиков обновления определяется порядком добавления модулей
//                                    в процедуре ПриДобавленииПодсистем общего модуля
//                                    ПодсистемыКонфигурацииПереопределяемый.
//   * РежимВыполненияОтложенныхОбработчиков - Строка - "Последовательно" - отложенные обработчики обновления выполняются
//                                    последовательно в интервале от номера версии информационной базы до номера
//                                    версии конфигурации включительно или "Параллельно" - отложенный обработчик после
//                                    обработки первой порции данных передает управление следующему обработчику, а после
//                                    выполнения последнего обработчика цикл повторяется заново.
//
Процедура ПриДобавленииПодсистемы(Описание) Экспорт
	
	Описание.Имя = си_УчетСпецодеждыСерверПовтИсп.НаименованиеПодсистемы(); 
	Описание.Версия = си_УчетСпецодеждыСервер.НомерВерсииКонфигурации();
	
	Описание.ТребуемыеПодсистемы.Добавить("СтандартныеПодсистемы");
	Описание.ТребуемыеПодсистемы.Добавить("БухгалтерияДляКазахстана");
	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиОбновленияИнформационнойБазы

// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
// Параметры:
//  Обработчики - ТаблицаЗначений - см. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления.
//
// Пример:
//  Для добавления своей процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.Версия              = "1.1.0.0";
//  Обработчик.Процедура           = "ОбновлениеИБ.ПерейтиНаВерсию_1_1_0_0";
//  Обработчик.РежимВыполнения     = "Оперативно";
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	// Код обработчика обновления должен быть рассчитан на неоднократное выполнение,
	// чтобы его повторное выполнение не приводило, например, к дублированию данных
	// в информационной базе.
	
	// Порядок вызова обработчиков обновления в пределах одной версии является случайным, 
	// т. е. нельзя ставить в зависимость работоспособность одного обработчика обновления 
	// от выполнения другого обработчика. Если подобные зависимости появляются, 
	// то такие обработчики необходимо объединять в один.
	
	Обработчик = Обработчики.Добавить();
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура = "си_ОбновлениеИнформационнойБазы.ПервыйЗапуск";
	
	// Обработчики, выполняемые при каждом обновлении ИБ.
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "*";
	Обработчик.НачальноеЗаполнение = Истина; // В противном случае процедура не запустится при переходе с 2БК на 3БК
	Обработчик.РежимВыполнения = "Оперативно";
	Обработчик.Процедура = "си_ОбновлениеИнформационнойБазы.ДобавитьРучныеОбработчикиОбновленияИБ";
	
	// Обработчики, выполняемые при переходе на версию 3.0.1.12
	
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.2.1";
	Обработчик.Процедура = "си_ОбновлениеИнформационнойБазы.ВыполнитьОбновлениеНа_2_0_2_1";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.2.2";
	Обработчик.Процедура = "си_ОбновлениеИнформационнойБазы.ВыполнитьОбновлениеНа_2_0_2_2";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.3.1";
	Обработчик.Процедура = "си_ОбновлениеИнформационнойБазы.ВыполнитьОбновлениеНа_2_0_3_1";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.4.1";
	Обработчик.Процедура = "си_ОбновлениеИнформационнойБазы.ВыполнитьОбновлениеНа_2_0_4_1";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.5.1";
	Обработчик.Процедура = "си_ОбновлениеИнформационнойБазы.ВыполнитьОбновлениеНа_2_0_5_1";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.6.2";
	Обработчик.Процедура = "си_ОбновлениеИнформационнойБазы.ВыполнитьОбновлениеНа_3_0_6_2";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.6.4";
	Обработчик.Процедура = "си_ОбновлениеИнформационнойБазы.ВыполнитьОбновлениеНа_3_0_6_4";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.6.5";
	Обработчик.Процедура = "си_ОбновлениеИнформационнойБазы.ВыполнитьОбновлениеНа_3_0_6_5";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.6.6";
	Обработчик.Процедура = "си_ОбновлениеИнформационнойБазы.ВыполнитьОбновлениеНа_3_0_6_6";
	Обработчик.НачальноеЗаполнение = Ложь;  
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.6.7";
	Обработчик.Процедура = "си_ОбновлениеИнформационнойБазы.ВыполнитьОбновлениеНа_3_0_6_7";
	Обработчик.НачальноеЗаполнение = Ложь;     
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.6.8";
	Обработчик.Процедура = "си_ОбновлениеИнформационнойБазы.ВыполнитьОбновлениеНа_3_0_6_8";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.7.1";
	Обработчик.Процедура = "си_ОбновлениеИнформационнойБазы.ВыполнитьОбновлениеНа_3_0_7_1";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.8.1";
	Обработчик.Процедура = "си_ОбновлениеИнформационнойБазы.ВыполнитьОбновлениеНа_3_0_8_1";
	Обработчик.НачальноеЗаполнение = Ложь;

КонецПроцедуры


// Вызывается при подготовке документа с описанием изменений в новой версии программы,
// которое выводится пользователю при первом входа в программу (после обновления).
//
// Параметры:
//   Макет - ТабличныйДокумент - описание изменений в новой версии программы, автоматически
//                               сформированное из общего макета ОписаниеИзмененийСистемы.
//                               Макет можно программно модифицировать или заменить на другой.
//
Процедура ПриПодготовкеМакетаОписанияОбновлений(Знач Макет) Экспорт
	
КонецПроцедуры
#КонецОбласти

// Добавляет в список процедуры-обработчики перехода с другой программы (с другим именем конфигурации).
// Например, для перехода между разными, но родственными конфигурациями: базовая -> проф -> корп.
// Вызывается перед началом обновления данных ИБ.
//
// Параметры:
//  Обработчики - ТаблицаЗначений - с колонками:
//    * ПредыдущееИмяКонфигурации - Строка - имя конфигурации, с которой выполняется переход;
//    * Процедура                 - Строка - полное имя процедуры-обработчика перехода с программы ПредыдущееИмяКонфигурации. 
//                                  Например, "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику"
//                                  Обязательно должна быть экспортной.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.ПредыдущееИмяКонфигурации  = "УправлениеТорговлей";
//  Обработчик.Процедура                  = "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику";
//
Процедура ПриДобавленииОбработчиковПереходаСДругойПрограммы(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.ПредыдущееИмяКонфигурации = "БухгалтерияДляКазахстана";
	Обработчик.Процедура = "си_ОбновлениеИнформационнойБазы.ПервыйЗапуск";
	
КонецПроцедуры

// Позволяет переопределить режим обновления данных информационной базы.
// Для использования в редких (нештатных) случаях перехода, не предусмотренных в
// стандартной процедуре определения режима обновления.
//
// Параметры:
//   РежимОбновленияДанных - Строка - в обработчике можно присвоить одно из значений:
//              "НачальноеЗаполнение"     - если это первый запуск пустой базы (области данных);
//              "ОбновлениеВерсии"        - если выполняется первый запуск после обновление конфигурации базы данных;
//              "ПереходСДругойПрограммы" - если выполняется первый запуск после обновление конфигурации базы данных, 
//                                          в которой изменилось имя основной конфигурации.
//
//   СтандартнаяОбработка  - Булево - если присвоить Ложь, то стандартная процедура
//                                    определения режима обновления не выполняется, 
//                                    а используется значение РежимОбновленияДанных.
//
Процедура ПриОпределенииРежимаОбновленияДанных(РежимОбновленияДанных, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры

// Вызывается после выполнения всех процедур-обработчиков перехода с другой программы (с другим именем конфигурации),
// и до начала выполнения обновления данных ИБ.
//
// Параметры:
//  ПредыдущееИмяКонфигурации    - Строка - имя конфигурации до перехода.
//  ПредыдущаяВерсияКонфигурации - Строка - имя предыдущей конфигурации (до перехода).
//  Параметры                    - Структура - 
//    * ВыполнитьОбновлениеСВерсии   - Булево - по умолчанию Истина. Если установить Ложь, 
//        то будут выполнена только обязательные обработчики обновления (с версией "*").
//    * ВерсияКонфигурации           - Строка - номер версии после перехода. 
//        По умолчанию, равен значению версии конфигурации в свойствах метаданных.
//        Для того чтобы выполнить, например, все обработчики обновления с версии ПредыдущаяВерсияКонфигурации, 
//        следует установить значение параметра в ПредыдущаяВерсияКонфигурации.
//        Для того чтобы выполнить вообще все обработчики обновления, установить значение "0.0.0.1".
//    * ОчиститьСведенияОПредыдущейКонфигурации - Булево - по умолчанию Истина. 
//        Для случаев когда предыдущая конфигурация совпадает по имени с подсистемой текущей конфигурации, следует указать Ложь.
//
Процедура ПриЗавершенииПереходаСДругойПрограммы(Знач ПредыдущееИмяКонфигурации, Знач ПредыдущаяВерсияКонфигурации, Параметры) Экспорт
	

КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

// Показывает сообщение и создает запись в журнале регистрации.
//
// Параметры:
//  Текст - Строка - Текст сообщения.
//  Ссылка - ЛюбаяСсылка - Ссылка на объект с которым будет связано сообщение.
//  ПоказатьСообщение - Булево - Если Истина, то будет показано сообщение.
//  ЗаписатьЖурналРегистрации - Булево - Если Истина, то будет создана запись журнала регистрации.
//  ИмяСобытияЖурналаРегистрации - Строка - Имя события, которое будет в журнале регистрации.
//   Параметр должен быть обязательно указан, если ЗаписатьЖурналРегистрации = Истина.
//  УровеньСобытияЖурналаРегистрации - УровеньЖурналаРегистрации - Уровень события журнала регистрации.
//   По умолчанию уровень: Предупреждение.
//
Процедура СообщитьПользователю(
	Текст, 
	Ссылка = Неопределено)
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = Текст;
	Сообщение.КлючДанных = Ссылка;
	Сообщение.Сообщить();		
	
	УровеньСобытия = УровеньЖурналаРегистрации.Предупреждение;			
	ЗаписьЖурналаРегистрации(Текст, УровеньСобытия, , Ссылка, Текст);	
	
КонецПроцедуры

#Область ПроцедурыНачальногоЗаполненияКонфигурации 

Процедура ПроверитьНеобходимостьНастройкиПриПервомЗапускеПодсистемы() Экспорт
	
	Если ТребуетсяПервоначальноеЗаполнение() Тогда
		НастройкаПодсистемыСпецодеждаПриПервомЗапуске();
	КонецЕсли;
	
КонецПроцедуры

Функция ТребуетсяПервоначальноеЗаполнение()
	Если си_УчетСпецодеждыСервер.НомерВерсииТекущейКонфигурации() = "" Тогда
		Возврат Истина
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции

// Функция создает новые счета учета спецодежды, если их нет
// возвращает счета в структуре
Функция СоздатьСчетаУчетаСпецодежды(СчетБУ,СчетНУ,Эксплуатация)
	//налоговый
	Запрос 									= Новый Запрос;
	Запрос.УстановитьПараметр("Код"			,СчетНУ);
	Запрос.Текст = "ВЫБРАТЬ
	|	Налоговый.Ссылка
	|ИЗ
	|	ПланСчетов.Налоговый КАК Налоговый
	|ГДЕ
	|	Налоговый.Код = &Код";
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		НовыйНалоговыйСчет 					= ПланыСчетов.Налоговый.СоздатьСчет();
		НовыйНалоговыйСчет.Код 				= СчетНУ;
		НовыйНалоговыйСчет.Вид				= ВидСчета.Активный;
		НовыйНалоговыйСчет.Количественный 	= Истина;
		НовоеСубконто 						= НовыйНалоговыйСчет.ВидыСубконто.Добавить();
		НовоеСубконто.ВидСубконто			= ПланыВидовХарактеристик.ВидыСубконтоТиповые.Номенклатура;
		НовоеСубконто.Суммовой				= Истина;
		НовоеСубконто.Количественный 		= истина;
		Если Эксплуатация Тогда
			НовыйНалоговыйСчет.Наименование 	= "Спецоснастка и спецодежда в эксплуатации (налоговый)";
		Иначе
			НовыйНалоговыйСчет.Наименование 	= "Спецоснастка и спецодежда на складе (налоговый)";
			НовоеСубконто 						= НовыйНалоговыйСчет.ВидыСубконто.Добавить();
			НовоеСубконто.ВидСубконто			= ПланыВидовХарактеристик.ВидыСубконтоТиповые.Склады;
			НовоеСубконто.Суммовой				= Истина;
			НовоеСубконто.Количественный 		= истина;
		КонецЕсли;
		НовыйНалоговыйСчет.Записать();
	Иначе
		Выборка = Результат.Выбрать();
		Если Выборка.Следующий() Тогда
			НовыйНалоговыйСчет 				= Выборка.Ссылка;
		Иначе
			НовыйНалоговыйСчет 				= ПланыСчетов.Налоговый.ПустаяСсылка().ПолучитьОбъект();
		КонецЕсли;
	КонецЕсли;
	//бухгалтерский
	Запрос 									= Новый Запрос;
	Запрос.УстановитьПараметр("Код"			,СчетБУ);
	Запрос.Текст = "ВЫБРАТЬ
	|	Типовой.Ссылка
	|ИЗ
	|	ПланСчетов.Типовой КАК Типовой
	|ГДЕ
	|	Типовой.Код = &Код";
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		НовыйСчет 							= ПланыСчетов.Типовой.СоздатьСчет();
		НовыйСчет.ЗапретитьИспользоватьВПроводках = Истина;
		НовыйСчет.Код 						= СчетБУ;
		НовыйСчет.Вид						= ВидСчета.Активный;
		НовыйСчет.Количественный 			= Истина;   
		НовыйСчет.Родитель					= ПланыСчетов.Типовой.НайтиПоКоду("1350");
		НовоеСубконто 						= НовыйСчет.ВидыСубконто.Добавить();
		НовоеСубконто.ВидСубконто			= ПланыВидовХарактеристик.ВидыСубконтоТиповые.Номенклатура;
		НовоеСубконто.Суммовой				= Истина;
		НовоеСубконто.Количественный 		= Истина;
		Если Эксплуатация Тогда
			НовыйСчет.Наименование 				= "Спецоснастка и спецодежда в эксплуатации";
		Иначе
			НовыйСчет.Наименование 				= "Спецоснастка и спецодежда на складе";
			НовоеСубконто 						= НовыйСчет.ВидыСубконто.Добавить();
			НовоеСубконто.ВидСубконто			= ПланыВидовХарактеристик.ВидыСубконтоТиповые.Склады;
			НовоеСубконто.Суммовой				= Истина;
			НовоеСубконто.Количественный 		= Истина;
		КонецЕсли;
		НовыйСчет.СчетНУ 					= НовыйНалоговыйСчет.Ссылка;
		НовыйСчет.Записать();
	Иначе
		//ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Счета учета спецодежды 1352, 1353 присутствуют в базе данных");
		Выборка = Результат.Выбрать();
		Если Выборка.Следующий() Тогда
			НовыйСчет 						= Выборка.Ссылка;
			НовыйСчетОбъект 				= НовыйСчет.ПолучитьОбъект();
			НовыйСчетОбъект.Родитель		= ПланыСчетов.Типовой.НайтиПоКоду("1350");
			НовыйСчетОбъект.Записать();			
		Иначе
			НовыйСчет 						= ПланыСчетов.Типовой.ПустаяСсылка().ПолучитьОбъект();
		КонецЕсли;
	КонецЕсли;
	
	СтруктураСчетовУчета = Новый Структура;
	СтруктураСчетовУчета.Вставить("СчетУчетаСпецодеждыБУ",НовыйСчет.Ссылка);
	СтруктураСчетовУчета.Вставить("СчетУчетаСпецодеждыНУ",НовыйНалоговыйСчет.Ссылка);
	Возврат СтруктураСчетовУчета;
	
КонецФункции

Процедура СоздатьУчетнуюПолитикуНормированияОбеспеченияСпецодеждой()
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период",ТекущаяДата());
	Запрос.Текст = "ВЫБРАТЬ
	|	си_УчетнаяПолитикаСрезПоследних.ВедетсяКонтрольВыдачиСпецодеждыПоНормам,
	|	си_УчетнаяПолитикаСрезПоследних.СпособРасчетаНормВыдачиСпецодеждыИИнвентаря
	|ИЗ
	|	РегистрСведений.си_УчетнаяПолитика.СрезПоследних(&Период, ) КАК си_УчетнаяПолитикаСрезПоследних";
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда 
		НаборЗаписей = РегистрыСведений.си_УчетнаяПолитика.СоздатьНаборЗаписей();
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Период = НачалоГода(Дата(2000,1,1));
		НоваяЗапись.ВедетсяКонтрольВыдачиСпецодеждыПоНормам = Ложь;
		НоваяЗапись.СпособРасчетаНормВыдачиСпецодеждыИИнвентаря = Перечисления.си_СпособыРасчетаНормВыдачиСпецодеждыИИнвентаря.Сумма;
		НоваяЗапись.ПорядокНачисленияАмортизации = Перечисления.си_ПорядокНачисленияАмортизации.СМесяцаПередачи;
		НоваяЗапись.АмортизироватьМатериалыНаСкладеВМесяцВозврата = Ложь;
		НаборЗаписей.Записать();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

// См. описание в общем модуле ОбновлениеИнформационнойБазыБСП.
Процедура ПередОбновлениемИнформационнойБазы() Экспорт
	
	ПараметрыСеанса.си_МенеджерОбъектовСервер = си_ЗащитаКлиентСервер.Серия();
	
КонецПроцедуры

// См. описание в общем модуле ОбновлениеИнформационнойБазыБСП.
Процедура ПослеОбновленияИнформационнойБазы(Знач ПредыдущаяВерсия, Знач ТекущаяВерсия,
		Знач ВыполненныеОбработчики, ВыводитьОписаниеОбновлений, МонопольныйРежим) Экспорт
		
	ПараметрыСеанса.си_МенеджерОбъектовСервер = "";
	
	
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////////
// 

// Добавляет обработчики которые потребуется запустить после завершения обновления.
// Обработчики добавляются в константу СведенияОбОбновленииИБ_БСО.
// Обработчики запускаются из обработки бсо_ОбновлениеИнформационнойБазы.
//
Процедура ДобавитьРучныеОбработчикиОбновленияИБ() Экспорт
	
	// Ручные обработчики должны добавляться при переходе между версиями 3.0.
	// При заполнении пустой ИБ они не должны добавляться.
	//Если ОбновлениеИнформационнойБазы.ВерсияИБ(Метаданные.Имя) = "0.0.0.0" Тогда
	Если ОбновлениеИнформационнойБазы.ВерсияИБ(си_УчетСпецодеждыСерверПовтИсп.НаименованиеПодсистемы()) = "0.0.0.0" Тогда
		Возврат;
	КонецЕсли;
	
	// Получить все возможные обработчики обновления.
	ТаблицаОбработчикиОбновления = Обработки.си_ОбновлениеИнформационнойБазы.ОбработчикиОбновленияИзМакета();	
	ТаблицаОбработчикиОбновления.Сортировать("ВесВерсии Возр");
	
	НомерСтаройВерсии = ОбновлениеИнформационнойБазы.ВерсияИБ(си_УчетСпецодеждыСерверПовтИсп.НаименованиеПодсистемы());	
	ВесСтаройВерсии = ОбновлениеИнформационнойБазыСлужебный.ВесВерсии(НомерСтаройВерсии); 
	
	// Номер версии программы, который будет после обновления.	
	НомерНовойВерсии = си_УчетСпецодеждыСервер.НомерВерсииКонфигурации();
	ВесНовойВерсии = ОбновлениеИнформационнойБазыСлужебный.ВесВерсии(НомерНовойВерсии);
	
	// Найти обработчики, которые потребуется выполнить после завершения обновления. 
	МассивДобавляемыхОбработчиков = Новый Массив;	
	Для Каждого ОбработчикОбновления Из ТаблицаОбработчикиОбновления Цикл
		
		Если ОбработчикОбновления.ВесВерсии > ВесСтаройВерсии 
			И ОбработчикОбновления.ВесВерсии <= ВесНовойВерсии Тогда
			
			// Создать описание добавляемого ручного обработчика обновления.
			ОписаниеОбработчика = Обработки.си_ОбновлениеИнформационнойБазы.ПустоеОписаниеРучногоОбработчикаОбновления();
			ЗаполнитьЗначенияСвойств(ОписаниеОбработчика, ОбработчикОбновления);
			ОписаниеОбработчика.ТребуетсяВыполнить = Истина;
			
			// Запомнить, что необходимо выполнить данный обработчик.
			МассивДобавляемыхОбработчиков.Добавить(ОписаниеОбработчика);
			
		КонецЕсли;
		
	КонецЦикла;
	
	
	//////////////////////////////////////////////////////////////////////////////	
	// Записать найденные обработчики в константу СведенияОбОбновленииИБ_БСО.
	Если МассивДобавляемыхОбработчиков.Количество() <> 0 Тогда
		
		СведенияОбОбновленииИБ_СИ = Обработки.си_ОбновлениеИнформационнойБазы.ПрочитатьКонстантуСведенияОбОбновленииИБ_СИ();
		
		Для Каждого ОписаниеОбработчика Из МассивДобавляемыхОбработчиков Цикл
			Обработки.си_ОбновлениеИнформационнойБазы.ДобавитьОбновитьРучнойОбработчикОбновленияИБ(ОписаниеОбработчика, СведенияОбОбновленииИБ_СИ);
		КонецЦикла;
		
		Обработки.си_ОбновлениеИнформационнойБазы.ЗаписатьКонстантуСведенияОбОбновленииИБ_СИ(СведенияОбОбновленииИБ_СИ);
		
	КонецЕсли;
	
КонецПроцедуры

#Область ПервоначальноеЗаполнение

Процедура ПервыйЗапуск() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);	
	НастройкаПодсистемыСпецодеждаПриПервомЗапуске();   
		
КонецПроцедуры

Процедура НастройкаПодсистемыСпецодеждаПриПервомЗапуске() Экспорт
	//СообщитьПользователю("Обнаружен первый запуск подсистемы ""Учет спецодежды и инвентаря"". Будет произведена начальная настройка подсистемы");
		
	
	//Включение использования характеристик
	Константы.си_УчетСпецодеждыПоХарактеристикам.Установить(Ложь);
		
	ЭтоБСО = си_УчетСпецодеждыСерверПовтИсп.ПроверкаНаБСО();
	Если ЭтоБСО = Ложь Тогда
		СчетаУчетаВЭксплуатации 	= СоздатьСчетаУчетаСпецодежды("1352","1352Н", Истина);
		СчетаУчетаНаСкладе 			= СоздатьСчетаУчетаСпецодежды("1353","1353Н", Ложь);
		Константы.си_СчетУчетаСпецоснасткаИСпецодеждаВЭксплуатации.Установить(СчетаУчетаВЭксплуатации.СчетУчетаСпецодеждыБУ);
		Константы.си_СчетУчетаСпецоснасткаИСпецодеждаНаСкладе.Установить(СчетаУчетаНаСкладе.СчетУчетаСпецодеждыБУ);
	КонецЕсли;
	
	//установка учетной политики нормирования обеспечения спецодеждой
	СоздатьУчетнуюПолитикуНормированияОбеспеченияСпецодеждой();
	

КонецПроцедуры


#КонецОбласти

#Область ОбработчикиОбновления

	Процедура ВыполнитьОбновлениеНа_2_0_2_1() Экспорт
		си_ЗащитаКлиентСервер.ВыполнитьОбновление("2.0.2.1",Новый Структура("ТекущаяВерсияИБ",си_УчетСпецодеждыСервер.НомерВерсииКонфигурации()));
	КонецПроцедуры

	Процедура ВыполнитьОбновлениеНа_2_0_2_2() Экспорт
		си_ЗащитаКлиентСервер.ВыполнитьОбновление("2.0.2.2",Новый Структура("ТекущаяВерсияИБ",си_УчетСпецодеждыСервер.НомерВерсииКонфигурации()));
	КонецПроцедуры

	Процедура ВыполнитьОбновлениеНа_2_0_3_1() Экспорт
		си_ЗащитаКлиентСервер.ВыполнитьОбновление("2.0.3.1",Новый Структура("ТекущаяВерсияИБ",си_УчетСпецодеждыСервер.НомерВерсииКонфигурации()));
	КонецПроцедуры

	Процедура ВыполнитьОбновлениеНа_2_0_4_1() Экспорт
		си_ЗащитаКлиентСервер.ВыполнитьОбновление("2.0.4.1",Новый Структура("ТекущаяВерсияИБ",си_УчетСпецодеждыСервер.НомерВерсииКонфигурации()));
	КонецПроцедуры

	Процедура ВыполнитьОбновлениеНа_2_0_5_1() Экспорт
		си_ЗащитаКлиентСервер.ВыполнитьОбновление("2.0.5.1",Новый Структура("ТекущаяВерсияИБ",си_УчетСпецодеждыСервер.НомерВерсииКонфигурации()));
	КонецПроцедуры

	Процедура ВыполнитьОбновлениеНа_3_0_6_2() Экспорт
		си_ЗащитаКлиентСервер.ВыполнитьОбновление("3.0.6.2",Новый Структура("ТекущаяВерсияИБ",си_УчетСпецодеждыСервер.НомерВерсииКонфигурации()));
		Если си_УчетСпецодеждыСерверПовтИсп.ПроверкаНаБСО()=Ложь Тогда
			СчетСИ = Константы.си_СчетУчетаСпецоснасткаИСпецодеждаВЭксплуатации.Получить();
			Если ЗначениеЗаполнено(СчетСИ) И СчетСИ.ЗапретитьИспользоватьВПроводках=Ложь Тогда
				ОбъектСчет = СчетСИ.ПолучитьОбъект();
				ОбъектСчет.ЗапретитьИспользоватьВПроводках=Истина;
				Попытка
					ОбъектСчет.Записать();
				Исключение
					
				КонецПопытки;
			КонецЕсли;
			СчетСИ = Константы.си_СчетУчетаСпецоснасткаИСпецодеждаНаСкладе.Получить();
			Если ЗначениеЗаполнено(СчетСИ) И СчетСИ.ЗапретитьИспользоватьВПроводках=Ложь Тогда
				ОбъектСчет = СчетСИ.ПолучитьОбъект();
				ОбъектСчет.ЗапретитьИспользоватьВПроводках=Истина;
				Попытка
					ОбъектСчет.Записать();
				Исключение
					
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
	КонецПроцедуры

	Процедура ВыполнитьОбновлениеНа_3_0_6_4() Экспорт
		си_ЗащитаКлиентСервер.ВыполнитьОбновление("3.0.6.4",Новый Структура("ТекущаяВерсияИБ",си_УчетСпецодеждыСервер.НомерВерсииКонфигурации()));
		Если си_УчетСпецодеждыСерверПовтИсп.ПроверкаНаБСО()=Ложь Тогда
			СчетСИ = Константы.си_СчетУчетаСпецоснасткаИСпецодеждаВЭксплуатации.Получить();
			Если ЗначениеЗаполнено(СчетСИ) И СчетСИ.ЗапретитьИспользоватьВПроводках=Ложь Тогда
				ОбъектСчет = СчетСИ.ПолучитьОбъект();
				ОбъектСчет.ЗапретитьИспользоватьВПроводках=Истина;
				Попытка
					ОбъектСчет.Записать();
				Исключение
					
				КонецПопытки;
			КонецЕсли;
			СчетСИ = Константы.си_СчетУчетаСпецоснасткаИСпецодеждаНаСкладе.Получить();
			Если ЗначениеЗаполнено(СчетСИ) И СчетСИ.ЗапретитьИспользоватьВПроводках=Ложь Тогда
				ОбъектСчет = СчетСИ.ПолучитьОбъект();
				ОбъектСчет.ЗапретитьИспользоватьВПроводках=Истина;
				Попытка
					ОбъектСчет.Записать();
				Исключение
					
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
	КонецПроцедуры

	Процедура ВыполнитьОбновлениеНа_3_0_6_5() Экспорт
		си_ЗащитаКлиентСервер.ВыполнитьОбновление("3.0.6.5",Новый Структура("ТекущаяВерсияИБ",си_УчетСпецодеждыСервер.НомерВерсииКонфигурации()));
		Если си_УчетСпецодеждыСерверПовтИсп.ПроверкаНаБСО()=Ложь Тогда
			СчетСИ = Константы.си_СчетУчетаСпецоснасткаИСпецодеждаВЭксплуатации.Получить();
			Если ЗначениеЗаполнено(СчетСИ) И СчетСИ.ЗапретитьИспользоватьВПроводках=Ложь Тогда
				ОбъектСчет = СчетСИ.ПолучитьОбъект();
				ОбъектСчет.ЗапретитьИспользоватьВПроводках=Истина;
				Попытка
					ОбъектСчет.Записать();
				Исключение
					
				КонецПопытки;
			КонецЕсли;
			СчетСИ = Константы.си_СчетУчетаСпецоснасткаИСпецодеждаНаСкладе.Получить();
			Если ЗначениеЗаполнено(СчетСИ) И СчетСИ.ЗапретитьИспользоватьВПроводках=Ложь Тогда
				ОбъектСчет = СчетСИ.ПолучитьОбъект();
				ОбъектСчет.ЗапретитьИспользоватьВПроводках=Истина;
				Попытка
					ОбъектСчет.Записать();
				Исключение
					
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
	КонецПроцедуры

	Процедура ВыполнитьОбновлениеНа_3_0_6_6() Экспорт
		си_ЗащитаКлиентСервер.ВыполнитьОбновление("3.0.6.6",Новый Структура("ТекущаяВерсияИБ",си_УчетСпецодеждыСервер.НомерВерсииКонфигурации()));
		Если си_УчетСпецодеждыСерверПовтИсп.ПроверкаНаБСО()=Ложь Тогда
			СчетСИ = Константы.си_СчетУчетаСпецоснасткаИСпецодеждаВЭксплуатации.Получить();
			Если ЗначениеЗаполнено(СчетСИ) И СчетСИ.ЗапретитьИспользоватьВПроводках=Ложь Тогда
				ОбъектСчет = СчетСИ.ПолучитьОбъект();
				ОбъектСчет.ЗапретитьИспользоватьВПроводках=Истина;
				Попытка
					ОбъектСчет.Записать();
				Исключение
					
				КонецПопытки;
			КонецЕсли;
			СчетСИ = Константы.си_СчетУчетаСпецоснасткаИСпецодеждаНаСкладе.Получить();
			Если ЗначениеЗаполнено(СчетСИ) И СчетСИ.ЗапретитьИспользоватьВПроводках=Ложь Тогда
				ОбъектСчет = СчетСИ.ПолучитьОбъект();
				ОбъектСчет.ЗапретитьИспользоватьВПроводках=Истина;
				Попытка
					ОбъектСчет.Записать();
				Исключение
					
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
	КонецПроцедуры
	
	Процедура ВыполнитьОбновлениеНа_3_0_6_7() Экспорт
		
		си_ЗащитаКлиентСервер.ВыполнитьОбновление("3.0.6.7",Новый Структура("ТекущаяВерсияИБ",си_УчетСпецодеждыСервер.НомерВерсииКонфигурации()));
		Если си_УчетСпецодеждыСерверПовтИсп.ПроверкаНаБСО()=Ложь Тогда
			СчетСИ = Константы.си_СчетУчетаСпецоснасткаИСпецодеждаВЭксплуатации.Получить();
			Если ЗначениеЗаполнено(СчетСИ) И СчетСИ.ЗапретитьИспользоватьВПроводках=Ложь Тогда
				ОбъектСчет = СчетСИ.ПолучитьОбъект();
				ОбъектСчет.ЗапретитьИспользоватьВПроводках=Истина;
				Попытка
					ОбъектСчет.Записать();
				Исключение
					
				КонецПопытки;
			КонецЕсли;
			СчетСИ = Константы.си_СчетУчетаСпецоснасткаИСпецодеждаНаСкладе.Получить();
			Если ЗначениеЗаполнено(СчетСИ) И СчетСИ.ЗапретитьИспользоватьВПроводках=Ложь Тогда
				ОбъектСчет = СчетСИ.ПолучитьОбъект();
				ОбъектСчет.ЗапретитьИспользоватьВПроводках=Истина;
				Попытка
					ОбъектСчет.Записать();
				Исключение
					
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;

		
		
	КонецПроцедуры       
	
	Процедура ВыполнитьОбновлениеНа_3_0_6_8() Экспорт
		
		си_ЗащитаКлиентСервер.ВыполнитьОбновление("3.0.6.8",Новый Структура("ТекущаяВерсияИБ",си_УчетСпецодеждыСервер.НомерВерсииКонфигурации()));
		Если си_УчетСпецодеждыСерверПовтИсп.ПроверкаНаБСО()=Ложь Тогда
			СчетСИ = Константы.си_СчетУчетаСпецоснасткаИСпецодеждаВЭксплуатации.Получить();
			Если ЗначениеЗаполнено(СчетСИ) И СчетСИ.ЗапретитьИспользоватьВПроводках=Ложь Тогда
				ОбъектСчет = СчетСИ.ПолучитьОбъект();
				ОбъектСчет.ЗапретитьИспользоватьВПроводках=Истина;
				Попытка
					ОбъектСчет.Записать();
				Исключение
					
				КонецПопытки;
			КонецЕсли;
			СчетСИ = Константы.си_СчетУчетаСпецоснасткаИСпецодеждаНаСкладе.Получить();
			Если ЗначениеЗаполнено(СчетСИ) И СчетСИ.ЗапретитьИспользоватьВПроводках=Ложь Тогда
				ОбъектСчет = СчетСИ.ПолучитьОбъект();
				ОбъектСчет.ЗапретитьИспользоватьВПроводках=Истина;
				Попытка
					ОбъектСчет.Записать();
				Исключение
					
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
      		
	КонецПроцедуры

   	Процедура ВыполнитьОбновлениеНа_3_0_7_1() Экспорт
		
		си_ЗащитаКлиентСервер.ВыполнитьОбновление("3.0.7.1",Новый Структура("ТекущаяВерсияИБ",си_УчетСпецодеждыСервер.НомерВерсииКонфигурации()));
		Если си_УчетСпецодеждыСерверПовтИсп.ПроверкаНаБСО()=Ложь Тогда
			СчетСИ = Константы.си_СчетУчетаСпецоснасткаИСпецодеждаВЭксплуатации.Получить();
			Если ЗначениеЗаполнено(СчетСИ) И СчетСИ.ЗапретитьИспользоватьВПроводках=Ложь Тогда
				ОбъектСчет = СчетСИ.ПолучитьОбъект();
				ОбъектСчет.ЗапретитьИспользоватьВПроводках=Истина;
				Попытка
					ОбъектСчет.Записать();
				Исключение
					
				КонецПопытки;
			КонецЕсли;
			СчетСИ = Константы.си_СчетУчетаСпецоснасткаИСпецодеждаНаСкладе.Получить();
			Если ЗначениеЗаполнено(СчетСИ) И СчетСИ.ЗапретитьИспользоватьВПроводках=Ложь Тогда
				ОбъектСчет = СчетСИ.ПолучитьОбъект();
				ОбъектСчет.ЗапретитьИспользоватьВПроводках=Истина;
				Попытка
					ОбъектСчет.Записать();
				Исключение
					
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
      		
	КонецПроцедуры
	
Процедура ВыполнитьОбновлениеНа_3_0_8_1() Экспорт
		
	си_ЗащитаКлиентСервер.ВыполнитьОбновление("3.0.8.1",Новый Структура("ТекущаяВерсияИБ",си_УчетСпецодеждыСервер.НомерВерсииКонфигурации()));
	Если си_УчетСпецодеждыСерверПовтИсп.ПроверкаНаБСО()=Ложь Тогда
		СчетСИ = Константы.си_СчетУчетаСпецоснасткаИСпецодеждаВЭксплуатации.Получить();
		Если ЗначениеЗаполнено(СчетСИ) И СчетСИ.ЗапретитьИспользоватьВПроводках=Ложь Тогда
			ОбъектСчет = СчетСИ.ПолучитьОбъект();
			ОбъектСчет.ЗапретитьИспользоватьВПроводках=Истина;
			Попытка
				ОбъектСчет.Записать();
			Исключение
				
			КонецПопытки;
		КонецЕсли;
		СчетСИ = Константы.си_СчетУчетаСпецоснасткаИСпецодеждаНаСкладе.Получить();
		Если ЗначениеЗаполнено(СчетСИ) И СчетСИ.ЗапретитьИспользоватьВПроводках=Ложь Тогда
			ОбъектСчет = СчетСИ.ПолучитьОбъект();
			ОбъектСчет.ЗапретитьИспользоватьВПроводках=Истина;
			Попытка
				ОбъектСчет.Записать();
			Исключение
				
			КонецПопытки;
		КонецЕсли;
		
		СчетаУчетаВЭксплуатации 	= СоздатьСчетаУчетаСпецодежды("1352","1352Н", Истина);
		СчетаУчетаНаСкладе 			= СоздатьСчетаУчетаСпецодежды("1353","1353Н", Ложь);
		
	КонецЕсли;  
	
    	
КонецПроцедуры



#КонецОбласти  



