
#Область ПрограммныйИнтерфейс

// Проверяет принадлежность документа к видам учета
//
// Параметры: 
//  СтруктураШапкиДокумента - структура, содержащая реквизиты шапки документа
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//  МожетБытьТолькоНалоговый- строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Регистратор, МожетБытьТолькоНалоговый = Ложь) Экспорт
	
	Перем Упр, Бух, Нал;
	
	ЕстьУпр = СтруктураШапкиДокумента.Свойство("ОтражатьВУправленческомУчете", Упр);
	ЕстьБух = СтруктураШапкиДокумента.Свойство("ОтражатьВБухгалтерскомУчете", Бух);
	Если Не ЕстьБух Тогда
		Бух = Истина;
	КонецЕсли;
	ЕстьНал = СтруктураШапкиДокумента.Свойство("УчитыватьКПН", Нал);
	
	Если ЕстьУпр ИЛИ ЕстьБух ИЛИ ЕстьНал Тогда
		Если НЕ МожетБытьТолькоНалоговый Тогда
			Если Упр <> Истина И Бух <> Истина  Тогда
				ОбщегоНазначения.СообщитьПользователю("Документ должен принадлежать хотя бы одному из видов учета: ""Управленческий"" и (или)  ""Бухгалтерский"".",Регистратор,,,Отказ);
			ИначеЕсли Бух <> Истина И Нал = Истина Тогда
				ОбщегоНазначения.СообщитьПользователю("Документ не может проводиться  по налоговому учету, если он не проводится по бухгалтерскому учету." ,Регистратор,,,Отказ);
			КонецЕсли;
		Иначе
			Если Упр <> Истина И Бух <> Истина И Нал <> Истина Тогда
				ОбщегоНазначения.СообщитьПользователю("Документ должен принадлежать хотя бы одному из видов учета: ""Управленческий"", ""Бухгалтерский"", ""Налоговый"".",Регистратор,,,Отказ);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события ПриЧтенииНаСервере.
//
// Параметры:
// 	ЭтотОбъект - объект.
// 	ТекущийОбъект - читаемый объект.
//
Процедура ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект) Экспорт
	
	общ_ПереопределениеПроцедурБСПСервер.ФормаОбъекта_ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
КонецПроцедуры

// Позволяет задать таблицы и поля объектов для проверки запрета изменения данных.
// Для добавления нового источника в ИсточникиДанных см. ДатыЗапретаИзменения.ДобавитьСтроку.
//
// Вызывается из процедуры ИзменениеЗапрещено общего модуля ДатыЗапретаИзменения,
// используемой в подписке на событие ПередЗаписью объекта для проверки наличия
// запретов и отказа от изменений запрещенного объекта.
//
// Параметры:
//  ИсточникиДанных - ТаблицаЗначений - с колонками:
//   * Таблица     - Строка - полное имя объекта метаданных,
//                   например, Метаданные.Документы.ПриходнаяНакладная.ПолноеИмя().
//   * ПолеДаты    - Строка - имя реквизита объекта или табличной части,
//                   например "Дата", "Товары.ДатаОтгрузки".
//   * Раздел      - Строка - имя раздела дат запрета, указанного в
//                   процедуре ПриЗаполненииРазделовДатЗапретаИзменения (см. выше).
//   * ПолеОбъекта - Строка - имя реквизита объекта или реквизита табличной части,
//                   например "Организация", "Товары.Склад".
//
Процедура ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения(ИсточникиДанных) Экспорт
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.си_ВводНачальныхОстатковМатериаловВЭксплуатации", "Дата", "БухгалтерскийУчет", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.си_ВозвратМатериаловИзЭксплуатации", "Дата", "БухгалтерскийУчет", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.си_ВыработкаМатериаловВЭксплуатации", "Дата", "БухгалтерскийУчет", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.си_ПередачаМатериаловВЭксплуатацию", "Дата", "БухгалтерскийУчет", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.си_ПеремещениеМатериаловВЭксплуатации", "Дата", "БухгалтерскийУчет", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.си_ПогашениеСтоимостиМатериалов", "Дата", "БухгалтерскийУчет", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.си_СписаниеМатериаловИзЭксплуатации", "Дата", "БухгалтерскийУчет", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.си_УстановкаНормВыдачиСпецодеждыИИнвентаря", "Дата", "БухгалтерскийУчет", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.си_ПриемкаСпецодеждыИИнвентаряПоХарактеристикам", "Дата", "БухгалтерскийУчет", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрСведений.си_НормыОбеспеченностиСпецодеждойИИнвентарем", "Период", "БухгалтерскийУчет", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрНакопления.си_ВыработкаМатериаловВЭксплуатации", "Период", "БухгалтерскийУчет", "Организация");	
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрНакопления.си_МатериалыНаСкладе", "Период", "БухгалтерскийУчет", "Организация");	
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрНакопления.си_МатериалыВЭксплуатации", "Период", "БухгалтерскийУчет", "Организация");	
КонецПроцедуры

Функция ПравоРедактированияПутиСЛК() Экспорт 
	
	Возврат ПравоДоступа("Просмотр", Метаданные.ОбщиеФормы.си_НастройкаСвязиССерверомЛицензий) И ПравоДоступа("Изменение", Метаданные.Константы.си_АдресСервераСЛК);	
	
КонецФункции

Функция ПравоРедактированияСведенийОЛицензииНаПоддержку() Экспорт 
	
	Возврат ПравоДоступа("Просмотр", Метаданные.Обработки.си_СведенияОЛицензииНаПоддержку) И ПравоДоступа("Изменение", Метаданные.Константы.си_СведенияОПодпискеНаПоддержку);	
	
КонецФункции

Функция ПорядокВызоваФункцийПереопределяемый() Экспорт
	
	ТаблицаПереопределения = Новый ТаблицаЗначений;
	ТаблицаПереопределения.Колонки.Добавить("Метод",	Новый ОписаниеТипов("Строка"));
	ТаблицаПереопределения.Колонки.Добавить("Обработка",Новый ОписаниеТипов("Строка"));
	ТаблицаПереопределения.Колонки.Добавить("Внешняя",	Новый ОписаниеТипов("Булево"));
	
	//НС = ТаблицаПереопределения.Добавить();
	//НС.Метод = "КатегорияПоддержки";
	//НС.Обработка = "Support";
	//
	//НС = ТаблицаПереопределения.Добавить();
	//НС.Метод = "ДанныеАктивации";
	//НС.Обработка = "Support";
	//
	//НС = ТаблицаПереопределения.Добавить();
	//НС.Метод = "ПолучитьСлужебноеПредставление";
	//НС.Обработка = "Code";
	//
	//НС = ТаблицаПереопределения.Добавить();
	//НС.Метод = "АктивироватьПоддержку";
	//НС.Обработка = "Code";
	//
	//НС = ТаблицаПереопределения.Добавить();
	//НС.Метод = "ПолучитьСведенияОПоддержке";
	//НС.Обработка = "Code";

	Возврат ТаблицаПереопределения;
	
КонецФункции

Функция ПроверкаРольИзСпискаДоступна(Роли) Экспорт
	Для Каждого Роль Из Роли Цикл
		Если РольДоступна(Роль) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	Возврат Ложь;
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура ПеренестиНомераГТДДляСтроки(Объект,Основание,НовыйКлючСвязи,ТекущийКлючСвязи) Экспорт
	НомераДляСтроки = Основание.НомераГТД.НайтиСтроки(Новый Структура("КлючСвязи",ТекущийКлючСвязи));
	Для Каждого СтрокаНомера Из НомераДляСтроки Цикл
		НоваяСтрока = Объект.НомераГТД.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаНомера);
		НоваяСтрока.КлючСвязи = НовыйКлючСвязи;
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ИмяМетаданных() Экспорт
	
	Возврат си_ПроцедурыМеханизмаЗащиты.ИмяМетаданных();	
	
КонецФункции

Функция ВерсияМетаданных() Экспорт
	
	Возврат си_ПроцедурыМеханизмаЗащиты.ВерсияМетаданных();	
	
КонецФункции

Функция ИмяКонстантыСВерсиейКонфигурации()
	
	Возврат си_ПроцедурыМеханизмаЗащиты.ИмяКонстантыСВерсиейКонфигурации();	
	
КонецФункции

Функция ВерсияКонфигурацииИБ() Экспорт
	
	Если Метаданные.ОбщиеМодули.Найти("ОбновлениеИнформационнойБазы") <> Неопределено И Метаданные.РегистрыСведений.Найти("ВерсииПодсистем") <> Неопределено Тогда
		Возврат Вычислить("ОбновлениеИнформационнойБазы.ВерсияИБ(ИмяМетаданных())");
	ИначеЕсли ИмяКонстантыСВерсиейКонфигурации()<>Неопределено Тогда
		Возврат Константы[ИмяКонстантыСВерсиейКонфигурации()].Получить();
	Иначе
		Возврат Метаданные.Версия; 	
	КонецЕсли;
	
КонецФункции

Функция ХранилищеОбщихНастроекЗагрузить(Объект, Настройка) Экспорт  
	
	Результат = Неопределено;
	
	Попытка
		Если ПравоДоступа("СохранениеДанныхПользователя", Метаданные) Тогда
			Результат = ХранилищеОбщихНастроек.Загрузить(Объект, Настройка);
		КонецЕсли;
	Исключение
		Результат = Неопределено;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Функция ИнформационнаяБазаОбновлена() Экспорт
	
	Если ВерсияМетаданных() <> ВерсияКонфигурацииИБ() Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

// Процедура динамического создания элементов формы при инициализации
//
Процедура НастроитьФорму(Форма) Экспорт
	ИмяФормы = Форма.ИмяФормы;
	
	Если Найти(ИмяФормы, "Справочник.") <> 0 Тогда
		ИмяСправочника = Сред(ИмяФормы, СтрДлина("Справочник.") + 1);
		ИмяСправочника = Лев(ИмяСправочника, Найти(ИмяСправочника, ".") - 1);
		
		// формы элемента	
		Если Найти(ИмяФормы, ".Форма.ФормаЭлемента") <> 0 Тогда
			Элементы = Форма.Элементы;
			
			// Справочник "Номенклатура"
			Если ИмяСправочника = "Номенклатура" Тогда				
				Элементы.Отступ.Видимость = Ложь;
				Элементы.Услуга.Видимость = Ложь;
				
				ГруппаСтраницы = Элементы.Добавить("ГруппаСтраницы", Тип("ГруппаФормы"));
				ГруппаСтраницы.Вид = ВидГруппыФормы.Страницы;
				
				// Страница "Основное"
				ГруппаОсновное = Элементы.Добавить("ГруппаОсновное", Тип("ГруппаФормы"), ГруппаСтраницы);
				ГруппаОсновное.Вид = ВидГруппыФормы.Страница;
				ГруппаОсновное.Заголовок = "Основное";				
				
				Реквизит = Элементы.Вставить("си_ЯвляетсяСпецодеждойИнвентарем", Тип("ПолеФормы"), ГруппаОсновное);
				Реквизит.Вид = ВидПоляФормы.ПолеФлажка;
				Реквизит.ПутьКДанным = "Объект.си_ЯвляетсяСпецодеждойИнвентарем";
				Реквизит.Заголовок = "Является спецодеждой и инвентарем";
				
				Реквизит = Элементы.Добавить("си_ОсновноеНазначениеИспользования", Тип("ПолеФормы"), ГруппаОсновное);	
				Реквизит.Вид = ВидПоляФормы.ПолеВвода;
				Реквизит.ПутьКДанным = "Объект.си_ОсновноеНазначениеИспользования";				
				
				ГруппаКлассификаторы = Элементы.Добавить("ГруппаКлассификаторы", Тип("ГруппаФормы"), ГруппаОсновное);
				ГруппаКлассификаторы.Вид = ВидГруппыФормы.ОбычнаяГруппа;
				ГруппаКлассификаторы.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная; 
				ГруппаКлассификаторы.Отображение = ОтображениеОбычнойГруппы.СильноеВыделение;
				ГруппаКлассификаторы.Заголовок = "Классификаторы";
				
				Элементы.Переместить(Элементы.ГруппаКодТНВЭД, ГруппаКлассификаторы);
				Элементы.Переместить(Элементы.ГруппаКодКПВЭД, ГруппаКлассификаторы);   
				Элементы.Переместить(Элементы.ГруппаПрочее, ГруппаОсновное);
				Элементы.ГруппаПрочее.Отображение = ОтображениеОбычнойГруппы.СильноеВыделение;
				
				// Страница "НДС и Акциз"
				ГруппаНДСАкциз = Элементы.Добавить("ГруппаНДСАкциз", Тип("ГруппаФормы"), ГруппаСтраницы);
				ГруппаНДСАкциз.Вид = ВидГруппыФормы.Страница;
				ГруппаНДСАкциз.Заголовок = "НДС и Акциз";
				
				Элементы.Переместить(Элементы.ГруппаНДС, ГруппаНДСАкциз);     
				Элементы.Переместить(Элементы.ГруппаАкциз, ГруппаНДСАкциз);
				Элементы.ГруппаНДС.Отображение = ОтображениеОбычнойГруппы.СильноеВыделение;
				Элементы.ГруппаАкциз.Отображение = ОтображениеОбычнойГруппы.СильноеВыделение;
				
			КонецЕсли;
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	Если Найти(ИмяФормы,"Документ.")=0 Тогда
		Возврат;
	КонецЕсли;
	ИмяДокумента = Сред(ИмяФормы,СтрДлина("Документ.")+1);
	ИмяДокумента = Лев(ИмяДокумента,Найти(ИмяДокумента,".")-1);
	
КонецПроцедуры

// Заполнение графиков работы в документах
//
Процедура си_ЗаполнениеГрафиковРаботыВДокументахПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	Для Каждого СтрокаТЧ Из Источник.РаботникиОрганизации Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.си_ГрафикРаботы) Тогда
			СтрокаТЧ.си_ГрафикРаботы = си_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("си_ОсновнойГрафикРаботыОрганизации");
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ДобавитьОтборКомпоновки(Отбор, ИмяПоля, Значение, ВидСравненияОтбора = Неопределено, Замещать = Ложь) Экспорт
	
	Если ВидСравненияОтбора = Неопределено Тогда
		ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.Равно;
	КонецЕсли;
	Если Замещать = Истина Тогда
		МассивУдалить = Новый Массив;
		Для Каждого ЭлементОтбора Из Отбор.Элементы Цикл
			Если ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяПоля) Тогда
				МассивУдалить.Добавить(ЭлементОтбора);
			КонецЕсли;
		КонецЦикла;
		Для Каждого ЭлементОтбора Из МассивУдалить Цикл
			Отбор.Элементы.Удалить(ЭлементОтбора);
		КонецЦикла;
	КонецЕсли;
	НовыйОтбор = Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	НовыйОтбор.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных(ИмяПоля);
	НовыйОтбор.ВидСравнения 	= ВидСравненияОтбора;
	НовыйОтбор.ПравоеЗначение 	= Значение;
	НовыйОтбор.Использование	= Истина;
	
КонецПроцедуры

#КонецОбласти
