////////////////////////////////////////////////////////////////////////////////
// УправлениеДенежнымиСредствамиКлиентСервер: 
//  
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Получить код банка в платежной системе КЦМР
//
Функция ПолучитьКодБанкаВПлатежнойСистеме(КодБанка) Экспорт
	
	Если КодБанка = Неопределено Тогда
		Возврат "";
	КонецЕсли;
					
    КодВПлатежнойСистеме = "K" + Сред(КодБанка, 3, 2) + Прав(КодБанка, 3) + "00";	    
	
	Возврат КодВПлатежнойСистеме;
	
КонецФункции // ПолучитьКодБанкаВПлатежнойСистеме()

// Сформировать наименование карт-счета по его номеру и банку
//
// Параметры:
//  КартСчет - Структура, ДанныеФормыСтруктура - структура, содержащая данные о картсчете, может быть передан объект формы элемента справочника
//
Функция СформироватьНаименованиеКартСчета(КартСчет) Экспорт
	
	Если ЗначениеЗаполнено(КартСчет.Банк) Тогда
		Возврат СтрШаблон(НСтр("ru = '%1 в %2'"), СокрЛП(КартСчет.НомерСчета), СокрЛП(КартСчет.Банк))
	КонецЕсли;
	
	Возврат СокрЛП(КартСчет.НомерСчета)
	
КонецФункции

// Проверяет установленные курсы валют документа перед пересчетом сумм
// Нулевые курсы устанавливаются в 1
//
Процедура ПроверкаКурсовВалют(СтрокаПлатеж) Экспорт

	КурсДокумента      = ?(КурсДокумента      = 0, 1, КурсДокумента);
	КратностьДокумента = ?(КратностьДокумента = 0, 1, КратностьДокумента);

	Если НЕ СтрокаПлатеж = Неопределено Тогда
		
		СтрокаПлатеж.КурсВзаиморасчетов      = ?(СтрокаПлатеж.КурсВзаиморасчетов      = 0, 1, СтрокаПлатеж.КурсВзаиморасчетов);
		СтрокаПлатеж.КратностьВзаиморасчетов = ?(СтрокаПлатеж.КратностьВзаиморасчетов = 0, 1, СтрокаПлатеж.КратностьВзаиморасчетов);
		
	КонецЕсли;

КонецПроцедуры 

Процедура ПересчитатьСуммуНДС(СтрокаПлатеж) Экспорт

	ЗначениеСтавкиНДС     = УчетНДСиАкцизаВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаПлатеж.СтавкаНДС);

	СтрокаПлатеж.СуммаНДС = СтрокаПлатеж.СуммаПлатежа * ЗначениеСтавкиНДС / (100 + ЗначениеСтавкиНДС);

КонецПроцедуры

Функция ОграничитьТипыДокументовДляДокументовОплаты(БазовоеОписаниеТипа, ЭтоВозврат = Ложь) Экспорт

	УдаляемыеТипыДокументовПоВидуОперации = Новый СписокЗначений();
	СписокТиповКУдалению                  = Новый Массив;
	БазовыеТипыДокументов                 = БазовоеОписаниеТипа.Типы();

	Если ЭтоВозврат Тогда
		//Удалить документы приобретения, реализации
		УдаляемыеТипыДокументовПоВидуОперации.Добавить(Тип("ДокументСсылка.ПередачаОС"));
		УдаляемыеТипыДокументовПоВидуОперации.Добавить(Тип("ДокументСсылка.АктОбОказанииПроизводственныхУслуг"));
		УдаляемыеТипыДокументовПоВидуОперации.Добавить(Тип("ДокументСсылка.ПоступлениеНМА"));
		УдаляемыеТипыДокументовПоВидуОперации.Добавить(Тип("ДокументСсылка.ПоступлениеТоваровУслуг"));
		УдаляемыеТипыДокументовПоВидуОперации.Добавить(Тип("ДокументСсылка.ПередачаНМА"));
		УдаляемыеТипыДокументовПоВидуОперации.Добавить(Тип("ДокументСсылка.РеализацияТоваровУслуг"));
		УдаляемыеТипыДокументовПоВидуОперации.Добавить(Тип("ДокументСсылка.ПоступлениеДопРасходов"));
	Иначе
		//Удалить документы оплаты и возвратов
		УдаляемыеТипыДокументовПоВидуОперации.Добавить(Тип("ДокументСсылка.АвансовыйОтчет"));
		УдаляемыеТипыДокументовПоВидуОперации.Добавить(Тип("ДокументСсылка.ПлатежноеПоручениеИсходящее"));
		УдаляемыеТипыДокументовПоВидуОперации.Добавить(Тип("ДокументСсылка.РасходныйКассовыйОрдер"));
		УдаляемыеТипыДокументовПоВидуОперации.Добавить(Тип("ДокументСсылка.ПлатежноеПоручениеВходящее"));
		УдаляемыеТипыДокументовПоВидуОперации.Добавить(Тип("ДокументСсылка.ПриходныйКассовыйОрдер"));
		УдаляемыеТипыДокументовПоВидуОперации.Добавить(Тип("ДокументСсылка.ВозвратТоваровПоставщику"));
		УдаляемыеТипыДокументовПоВидуОперации.Добавить(Тип("ДокументСсылка.ВозвратТоваровОтПокупателя"));
	КонецЕсли;

	Размерность = БазовыеТипыДокументов.Количество();
	Для НомерЭлемента = 1 по Размерность Цикл
		РезультатПоиска = УдаляемыеТипыДокументовПоВидуОперации.НайтиПоЗначению(БазовыеТипыДокументов[Размерность-НомерЭлемента]);
		Если НЕ РезультатПоиска = Неопределено тогда
			СписокТиповКУдалению.Добавить(РезультатПоиска.Значение);
		КонецЕсли;
	КонецЦикла;

	//Установка ограничения типов для поля "РасчетныйДокумент"
	ОграниченныйТип = Новый ОписаниеТипов(БазовоеОписаниеТипа,,СписокТиповКУдалению);

	Возврат ОграниченныйТип;

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

