////////////////////////////////////////////////////////////////////////////////
// РаботаСДиалогамиКлиентСервер: модуль предоставляет функционал по организации 
// интерактивного диалога с пользователем.
//  
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Процедура возвращает информацию по курсу валюты в виде строки
//
// Параметры: 
//  Валюта                         - Валюта, курс которой необходимо отобразить
//  Курс                           - курс, которой необходимо отобразить
//  Кратность                      - кратность, которую необходимо отобразить
//  ВалютаРегламентированногоУчета - валюта регламентированного учета
//  СформироватьСкобки             - признак необходимости скобок
//
// Возвращаемое значение:
//  Строка с данными о курсе и кратности валюты
//
Функция ПолучитьИнформациюКурсаВалютыСтрокой(Валюта, Курс, Кратность, ВалютаРегламентированногоУчета, 
												СформироватьСкобки = Ложь) Экспорт

	Если НЕ ЗначениеЗаполнено(Валюта) Тогда
		Возврат "";

	Иначе
		Возврат ?(СформироватьСкобки, "   ( ", "") + Кратность + " "
			  + СокрЛП(Валюта)
			  + " = "
			  + Курс + " " 
			  + СокрЛП(ВалютаРегламентированногоУчета)
			  + ?(СформироватьСкобки, " )", "");
	КонецЕсли;

КонецФункции

Процедура ПерезаполнитьЦеныПриИзмененииОрганизации(ДанныеОбъекта, СтруктураРезультатаВыполнения) Экспорт
	
	Перем СтруктураЦеныНоменклатуры;
	
	Если СтруктураРезультатаВыполнения.Свойство("СписокТЧ") = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	СписокТЧ = СтруктураРезультатаВыполнения.СписокТЧ;
	
	Если НЕ СтруктураРезультатаВыполнения.Свойство("СоответствиеЦенНоменклатуры") Тогда
		
		Для Каждого ЭлементСписка Из СписокТЧ Цикл
		
			Для Каждого ЭлементСписка Из СписокТЧ Цикл
				
				ТЧ = ДанныеОбъекта[СписокТЧ[0].Значение];
			
				Для Каждого СтрокаТабличнойЧасти Из ТЧ Цикл
										
					СтрокаТабличнойЧасти.Цена = 0;
						
					ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
					ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуАкцизаТабЧасти(СтрокаТабличнойЧасти, ДанныеОбъекта);
					ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДанныеОбъекта);
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;
	
	Иначе
			
		ТЧ = ДанныеОбъекта[СписокТЧ[0].Значение];
		
		СоответствиеЦенНоменклатуры = СтруктураРезультатаВыполнения.СоответствиеЦенНоменклатуры;
		ТипЦен = СтруктураРезультатаВыполнения.ТипЦен;
		ТипЦенЦенаВключаетНДС = СтруктураРезультатаВыполнения.ТипЦенЦенаВключаетНДС;
		
		Для Каждого СтрокаТабличнойЧасти Из ТЧ Цикл
			
			СтруктураЦеныНоменклатуры = СоответствиеЦенНоменклатуры.Получить(СтрокаТабличнойЧасти.Номенклатура);

			Если СтруктураЦеныНоменклатуры = Неопределено Тогда
				Цена = 0;
			Иначе
				Цена = СтруктураЦеныНоменклатуры.Цена;
			КонецЕсли;
			
			// Если цену заполнили из регистра, то ее надо пересчитывать по флагам налогообложения
			Если НЕ ЗначениеЗаполнено(Цена) Тогда
				СтрокаТабличнойЧасти.Цена = 0;
			Иначе
				СтрокаТабличнойЧасти.Цена = ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена, 
																						ПредопределенноеЗначение("Перечисление.СпособыЗаполненияЦен.ПоЦенамНоменклатуры"), 
																						ТипЦенЦенаВключаетНДС,
																						ДанныеОбъекта.Свойство("УчитыватьНДС") 
																						И ДанныеОбъекта.УчитыватьНДС, 
																						ДанныеОбъекта.Свойство("СуммаВключаетНДС") 
																						И ДанныеОбъекта.СуммаВключаетНДС, 
																						?(СтрокаТабличнойЧасти.Свойство("СтавкаНДС"),
																						УчетНДСиАкцизаВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС),0));
			КонецЕсли;
			
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуАкцизаТабЧасти(СтрокаТабличнойЧасти, ДанныеОбъекта);
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДанныеОбъекта);
		
		КонецЦикла;
					
	КонецЕсли;
		
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции для работы со структурными подразделениями

// Процедура выполняет установку начального значения реквизита "СтруктурноеПодразделениеОрганизация" формы
// 
// Параметры
//  Организация - СправочникСсылка.Организации - значение реквизита "Организация" объекта
//  СтруктурноеПодразделение - СправочникСсылка.ПодразделенияОрганизаций - значение реквизита "СтруктурноеПодразделение" объекта
//  СтруктурноеПодразделениеОрганизация - СправочникСсылка.Организации, СправочникСсылка.ПодразделенияОрганизаций - значение реквизита "СтруктурноеПодразделениеОрганизация" формы
//  ПоддержкаРаботыСоСтруктурнымиПодразделениями - Булево - (НЕ ИСПОЛЬЗУЕТСЯ, в последующем будет удален)признак поддержки работы со структурными подразделениями
//
Процедура УстановитьВидимостьСтруктурногоПодразделения(Организация, СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация, ПоддержкаРаботыСоСтруктурнымиПодразделениями = Ложь) Экспорт
	
	Если ЗначениеЗаполнено(СтруктурноеПодразделение) Тогда 
		СтруктурноеПодразделениеОрганизация = СтруктурноеПодразделение;
	Иначе 
		СтруктурноеПодразделениеОрганизация = Организация;
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает заголовок переданного элемента управления формы в зависимости от заполненности реквзиита объекта "СтруктурноеПодразделение"
// и включенного/отключенного признака поддержки работы со структурными подразделениями
//
// Параметры
//  Элемент - СправочникСсылка.Организации, СправочникСсылка.ПодразделенияОрганизаций - элемент формы, для которого необходимо определить заголовок
//  СтруктурноеПодразделение - СправочникСсылка.ПодразделенияОрганизаций - значение реквизита "СтруктурноеПодразделение" объекта
//  ПоддержкаРаботыСоСтруктурнымиПодразделениями - Булево - признак поддержки работы со структурными подразделениями
//  
Процедура УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элемент, СтруктурноеПодразделение, ПоддержкаРаботыСоСтруктурнымиПодразделениями) Экспорт
	
	#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
		ИспользоватьНесколькоОрганизаций = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций");
	#Иначе
		ИспользоватьНесколькоОрганизаций = ПолучитьФункциональнуюОпциюИнтерфейса("ИспользоватьНесколькоОрганизаций");
	#КонецЕсли
	
	Если ПоддержкаРаботыСоСтруктурнымиПодразделениями ИЛИ ЗначениеЗаполнено(СтруктурноеПодразделение) Тогда
		Элемент.Заголовок 				= НСтр("ru = 'Структурная единица'");
		Элемент.ТолькоПросмотр 			= Ложь;
		Элемент.КнопкаВыпадающегоСписка	= Ложь;
		Элемент.КнопкаВыбора 			= Истина И (НЕ Элемент.ТолькоПросмотр И Элемент.Доступность);
		Элемент.ОтображениеКнопкиВыбора	= ОтображениеКнопкиВыбора.ОтображатьВПолеВвода;
	Иначе 
		Элемент.Заголовок 				= НСтр("ru = 'Организация'");
		Элемент.ТолькоПросмотр 			= НЕ ПользователиБКВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию(ПользователиКлиентСервер.ТекущийПользователь(), "УчетПоВсемОрганизациям");
		Элемент.КнопкаВыпадающегоСписка	= Истина И (НЕ Элемент.ТолькоПросмотр И Элемент.Доступность);
		Элемент.КнопкаВыбора 			= Ложь;
		Элемент.ОтображениеКнопкиВыбора	= ОтображениеКнопкиВыбора.Авто;
	КонецЕсли;
	
	Если НЕ ИспользоватьНесколькоОрганизаций Тогда
		Элемент.Видимость = Ложь;
	КонецЕсли;
	
	Элемент.ВыбиратьТип = Ложь;
	
КонецПроцедуры

// Функция возвращает дату как месяц в виде строки
//
Функция ДатаКакМесяцПредставление(ДатаДата) Экспорт
	
	Возврат Формат(ДатаДата, "ДФ='ММММ гггг'");
	
КонецФункции // ДатаКакМесяцПредставление()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА ВСТРОЕННОЙ СПРАВКИ

Процедура УстановитьВидимостьТекста(Документ, Ид, ВключитьВидимость, Параметр = "inline") Экспорт
	
	// Документ должен быть всегда загружен и в нем должен найтись нужный нам элемент
	// Пользователь может увидеть данные сообщения только в том случае, если при кодировании
	// механизма были допущены ошибки
	
	// Данное сообщение будет выведено, если мы пытаемся обновить справку ПриОткрытии формы
	// Обновлять справку в этом событии не нужно, так как текст справки был изначально
	// сформирован правильно
	Если Документ.readyState <> "complete" Тогда
		ТекстСообщения = НСтр("ru='Справка: справка еще не загружена'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	// Данное сообщение будет выведено, если мы пытаемся переключить видимость элемента
	// которого нет в справке. Такое может только в случае, если бы допустили ошибку в коде
	Элемент = Документ.getElementById(Ид);
	Если Элемент = Неопределено Тогда
		ТекстСообщения = СтрШаблон(НСтр("ru='Справка: не найден элемент %1'"), Ид);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Элемент.style.display = ?(ВключитьВидимость, Параметр, "none");
	
КонецПроцедуры

Процедура ПолеHTMLДокументаOnClick(Элемент, ДанныеСобытия, Форма) Экспорт
	
		ТипПоляHTMLДокумента = ТипЗнч(ДанныеСобытия.Element);
	
	Если ТипПоляHTMLДокумента = Тип("ВнешнийОбъект") Тогда
		
		ЭлементHTML = НайтиЭлемент(ДанныеСобытия.Element, "A");
		
		Если ЭлементHTML = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Если СтрНайти(ЭлементHTML.href, "1C:") > 0 Тогда
			ИмяПутиЭлемента = СтрЗаменить(ЭлементHTML.href, "1C:", "");
		ИначеЕсли СтрНайти(ЭлементHTML.href, "V8:") > 0 Тогда
			ИмяПутиЭлемента = СтрЗаменить(ЭлементHTML.href, "V8:", "");
		Иначе
			Возврат;
		КонецЕсли;
		
	Иначе
		ЭлементHTML = НайтиЭлемент(ДанныеСобытия.Element.document.activeElement, "A");
		
		Если ЭлементHTML = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ИмяПутиЭлемента = ЭлементHTML.pathname;
	КонецЕсли;
	
	Если  ЭлементHTML.id = "Команда" Тогда
		Попытка
			Форма.ВыполнитьКомандуФормы(ИмяПутиЭлемента, ЭлементHTML.target);
		Исключение
			// в случае неверной или недоступной по правам команды ничего не делаем
		КонецПопытки;
		
	ИначеЕсли ЭлементHTML.id = "ОткрытьСписок" Тогда
		Менеджер = Вычислить(ИмяПутиЭлемента);
		Попытка
			ФормаСписка = Менеджер.ПолучитьФормуСписка();
			ФормаСписка.Открыть();
		Исключение
			// в случае неверной или недоступной по правам команды ничего не делаем
		КонецПопытки;
		
	ИначеЕсли ЭлементHTML.id = "АктивизироватьЭУ" Тогда
		Форма.ТекущийЭлемент = Вычислить("Форма.Элементы." + ИмяПутиЭлемента);
	КонецЕсли;

КонецПроцедуры

Функция НайтиЭлемент(ЭлементHTML, НазваниеТега)
	
	ТекущийЭлементHTML = ЭлементHTML;
	
	Пока Истина Цикл
		Если ТекущийЭлементHTML.tagName = "BODY" Тогда
			Возврат Неопределено;
		ИначеЕсли ТекущийЭлементHTML.tagName = НазваниеТега Тогда
			Возврат ТекущийЭлементHTML;
		Иначе
			ТекущийЭлементHTML = ТекущийЭлементHTML.parentNode;
		КонецЕсли;
		
	КонецЦикла;

КонецФункции

Функция ВстроеннаяСправка_ЦветФона() Экспорт
	
	Возврат Новый Цвет(255, 255, 255);
	
КонецФункции

Функция ВстроеннаяСправка_ЦветРамки() Экспорт
	
	Возврат Новый Цвет(137, 132, 119);
	
КонецФункции

Функция ВстроеннаяСправка_ЦветСсылки() Экспорт
	
	Возврат Новый Цвет(0, 0, 0);
	
КонецФункции

Функция ВстроеннаяСправка_ЦветВыделеннойСсылки() Экспорт
	
	Возврат Новый Цвет(255, 255, 255);
	
КонецФункции

Функция ВстроеннаяСправка_ФонВыделеннойСсылки() Экспорт
	
	Возврат Новый Цвет(64, 94, 172);
	
КонецФункции

// Возвращает описание стилей, используемых при показе встроенной ситуационно-зависимой справки
//
// Параметры
//  нет
//
// Возвращаемое значение:
//   строка
//
Функция ВстроеннаяСправка_СтилиДокумента() Экспорт

	Возврат "
	|		<STYLE type=text/css>
	|			DIV.top {
	|				PADDING: 0;
	|			}
	|			DIV {
	|				PADDING: 3px 0px 3px 3px;
	|				BORDER-TOP-COLOR: #dadac4;
	|				BORDER-RIGHT-COLOR: #dadac4;
	|				BORDER-BOTTOM-COLOR: #dadac4;
	|				BORDER-LEFT-COLOR: #dadac4;
	|			}
	|			A {
	|				PADDING-TOP: 1px;
	|				PADDING-BOTTOM: 1px;
	|			}
	|			BODY {
	|				SCROLLBAR-FACE-COLOR: #fffbf0;
	|				SCROLLBAR-HIGHLIGHT-COLOR: #dadac4;
	|				SCROLLBAR-3DLIGHT-COLOR: #fff; MARGIN: 5px;
	|				SCROLLBAR-ARROW-COLOR: #708090;
	|				SCROLLBAR-TRACK-COLOR: #fffbf0;
	|				SCROLLBAR-DARKSHADOW-COLOR: #fff;
	|				MARGIN: 5px 0px 5px 5px;
	|			}
	|			IMG {
	|				MARGIN-LEFT: 3px;
	|			}
	|		</STYLE>";

КонецФункции // ()

// Возвращает строкое представление в виде шестнадцатиричного числа для переданного цвета
//
Функция ВернутьШестнадцатиричноеПредставлениеЦвета(ВыбранныйЦвет) Экспорт
	
	Если ТипЗнч(ВыбранныйЦвет) <> Тип("Цвет") Тогда
		Возврат "";
	КонецЕсли;
	
	Красный	= ОбщегоНазначенияБККлиентСервер.ДесятичноеВШестнадцатиричное(ВыбранныйЦвет.Красный);
	Зеленый	= ОбщегоНазначенияБККлиентСервер.ДесятичноеВШестнадцатиричное(ВыбранныйЦвет.Зеленый);
	Синий	= ОбщегоНазначенияБККлиентСервер.ДесятичноеВШестнадцатиричное(ВыбранныйЦвет.Синий);
	
	Возврат "#" + Красный + Зеленый + Синий;
	
КонецФункции // ВернутьШестнадцатиричноеПредставлениеЦвета()

// Функция возвращает URL для доступа к картинке из библиотеки картинок из HTML
//
Функция ПолучитьПутьККартинкеДляHTML(Картинка) Экспорт
	
	Возврат "v8config://v8cfgHelp/" + "mdpicture/id" + Картинка;

КонецФункции 


////////////////////////////////////////////////////////////////////////////////
// Универсальный механизм "Месяц строкой".

// Возвращает представление месяца по переданной дате.
//
// Параметры:
//		ДатаНачалаМесяца
//
// Возвращаемое значение;
//		Строка
//
Функция ПолучитьПредставлениеМесяца(ДатаНачалаМесяца) Экспорт
	
	Возврат Формат(ДатаНачалаМесяца, "ДФ='ММММ гггг'");
	
КонецФункции
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция СформироватьЗаголовокДокумента(ДокументОбъект, НазваниеДокумента = "", СписокПрефиксовУзлов = Неопределено, ПереноситьДату = Ложь, ПредставлениеНомераОбъекта = Неопределено, КодЯзыка=Неопределено) Экспорт
	
	Если ПереноситьДату Тогда 
		СтрокаЗаголовка = НСтр("ru = '%1 № %2
		|от %3'", КодЯзыка)
	Иначе 
		СтрокаЗаголовка = НСтр("ru = '%1 № %2 от %3'", КодЯзыка)
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(НазваниеДокумента) Тогда 
		НазваниеДокумента = ДокументОбъект.Метаданные().Представление();
	КонецЕсли;
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаЗаголовка,
		НазваниеДокумента,
		ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ДокументОбъект.Номер, ДокументОбъект, ПредставлениеНомераОбъекта, , , СписокПрефиксовУзлов),
		Формат(ДокументОбъект.Дата, ?(КодЯзыка <> Неопределено,"Л=" + КодЯзыка + "; ДЛФ=DD", "ДЛФ=DD"))) 
		
КонецФункции 

