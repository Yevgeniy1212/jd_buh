////////////////////////////////////////////////////////////////////////////////
// УчетНДСиАкцизаКлиентСервер: 
//  
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Рассчитывает сумму НДС исходя из суммы и флагов налогообложения
//
// Параметры: 
//  Сумма            - число, сумма от которой надо рассчитывать налоги, 
//  УчитыватьНДС     - булево, признак учета НДС в сумме, 
//  СуммаВключаетНДС - булево, признак включения НДС в сумму ("внутри" или "сверху"),
//  СтавкаНДС        - число , процентная ставка НДС,
//
// Возвращаемое значение:
//  Число, полученная сумма НДС
//
Функция РассчитатьСуммуНДС(Сумма, УчитыватьНДС, СуммаВключаетНДС, СтавкаНДС, СуммаАкциза = 0, СуммаВключаетАкциз = Ложь) Экспорт
	//к расчетной базе прибавляем сумму Акциза, исходим из того, что ситуация когда сумма включает НДС и не включает Акциз исключена 
	Если НЕ СуммаВключаетАкциз Тогда
		СуммаДляРасчетаНДС = Сумма + СуммаАкциза;
	Иначе
		СуммаДляРасчетаНДС = Сумма;  
	КонецЕсли;
	
	Если (УчитыватьНДС) И (СуммаВключаетНДС) Тогда
		СуммаБезНДС = 100 * СуммаДляРасчетаНДС / (100 + СтавкаНДС);
		СуммаНДС = Сумма - СуммаБезНДС;
	Иначе
		СуммаБезНДС = СуммаДляРасчетаНДС;
	КонецЕсли;

	Если УчитыватьНДС Тогда 
		Если НЕ СуммаВключаетНДС Тогда
			СуммаНДС = СуммаБезНДС * СтавкаНДС / 100;
		КонецЕсли;
	Иначе
		СуммаНДС = 0;
	КонецЕсли;

	Возврат СуммаНДС;

КонецФункции // РассчитатьСуммуНДС()

// Рассчитывает сумму Акциза исходя из  количества и коэффициента пересчета
//
// Параметры: 
//  Количество  - число, сумма от которой надо рассчитывать налоги, 
//  Коэффициент - булево, признак учета НДС в сумме, 
//  СтавкаАкциза   - число , ставка акциза,
//  Валюта   	- СправочникСсылка.Валюты, валюта документа
//  Курс   		- число , Курс взаиморасчетов документа,
//  Кратность   - число , Кратность взаиморасчетов документа
//
// Возвращаемое значение:
//  Число, полученная сумма Акциза
//
Функция РассчитатьСуммуАкциза(Количество, Коэффициент, СтавкаАкциза, Валюта, Курс, Кратность) Экспорт

	СуммаАкциза = (Количество * СтавкаАкциза / ?(Коэффициент = 0, 1, Коэффициент));
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	СуммаАкциза = ОбщегоНазначенияБККлиентСервер.ПересчитатьИзВалютыВВалюту(СуммаАкциза, ВалютаРегламентированногоУчета, Валюта,
														  1, Курс,
														  1, Кратность);
	
	Возврат СуммаАкциза;

КонецФункции // РассчитатьСуммуНДС()

// Пересчитывает сумму (документа или строки таб. части) при изменении флагов учета налогов
//
// Параметры: 
//  Сумма  - число, сумма для пересчета,
//  СуммаНДС, СуммаАкциза - число, суммы, участвующие в расчетах, 
//  СуммаВключаетНДС, НовыйСуммаВключаетНДС,
//  СуммаВключаетАкциз, НовыйСуммаВключаетАкциз, - булево, флаги налогов 
//
// Возвращаемое значение:
//  Число, пересчитанная сумма
//
Функция ПересчитатьСуммуПриИзмененииФлаговНалогов(Сумма, СуммаНДС, СуммаАкциза, СуммаВключаетНДС, СуммаВключаетАкциз, НовыйСуммаВключаетНДС, НовыйСуммаВключаетАкциз) Экспорт
	
	// Инициализация переменных
	НадоВключитьНДС  = Ложь;
	НадоИсключитьНДС = Ложь;
	
	НадоВключитьАкциз  = Ложь;
	НадоИсключитьАкциз = Ложь;
	
	НоваяСумма = Сумма;
	// НДС
	Если НовыйСуммаВключаетНДС И (НЕ СуммаВключаетНДС) Тогда
		// Надо добавлять НДС       
		НадоВключитьНДС = Истина;
	ИначеЕсли НЕ НовыйСуммаВключаетНДС И СуммаВключаетНДС Тогда
		// Надо исключать НДС       
		НадоИсключитьНДС = Истина;
	КонецЕсли;
	
	// Акциз
	Если НовыйСуммаВключаетАкциз И (НЕ СуммаВключаетАкциз) Тогда
		// Надо добавлять акциз       
		НадоВключитьАкциз = Истина;
	ИначеЕсли НЕ НовыйСуммаВключаетАкциз И СуммаВключаетАкциз Тогда
		// Надо исключать акциз       
		НадоИсключитьАкциз = Истина;
	КонецЕсли;
		
	//НДС накручивается сверху, поэтому при любом раскладе первым исключаем его
	Если НадоИсключитьНДС Тогда
		НоваяСумма = НоваяСумма - СуммаНДС;
	КонецЕсли;
	
	// Исключаем акциз
	Если НадоИсключитьАкциз Тогда
		НоваяСумма =  НоваяСумма - СуммаАкциза;
	КонецЕсли;	
	
	//включаем его при необходимости 
	Если НадоВключитьАкциз Тогда
		НоваяСумма = НоваяСумма + СуммаАкциза;
	КонецЕсли;	
	
	
	Если НадоВключитьНДС Тогда
		НоваяСумма = НоваяСумма + СуммаНДС;
	КонецЕсли;

	Возврат НоваяСумма;
КонецФункции

// Рассчитывает оборот по реализации в строке табличной части документа
//
// Параметры:
//  ДанныеСтрокиТабличнойЧасти - ДанныеФормыСтруктура, Структура - строка табличной части документа,
//  ДанныеДокумента - ДанныеФормыСтруктура, Структура - объект редактируемого документа.
//
Процедура РассчитатьОборотПоРеализацииТабЧасти(ДанныеСтрокиТабличнойЧасти, ДанныеДокумента) Экспорт

	ЕстьОборотПоРеализации = ДанныеСтрокиТабличнойЧасти.Свойство("ОборотПоРеализации")
	                            И ДанныеСтрокиТабличнойЧасти.ОборотПоРеализации <> Неопределено;
								  
	Если НЕ ЕстьОборотПоРеализации Тогда
		Возврат;						  	
	КонецЕсли;
	
	// определение булевых переменных
	ЭтоЗаявлениеОВвозеТоваров = ?((ДанныеДокумента.Свойство("ЭтоЗаявлениеОВвозеТоваров") И ТипЗнч(ДанныеДокумента.ЭтоЗаявлениеОВвозеТоваров) = Тип("Булево")), 
									ДанныеДокумента.ЭтоЗаявлениеОВвозеТоваров, 
									(ДанныеДокумента.Свойство("Ссылка") И ТипЗнч(ДанныеДокумента.Ссылка) = Тип("ДокументСсылка.ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов")));
	ЕстьКурсДокумента  = ДанныеДокумента.Свойство("КурсВзаиморасчетов")
	                    	И ТипЗнч(ДанныеДокумента.КурсВзаиморасчетов) = Тип("Число")
	                    	И НЕ ЭтоЗаявлениеОВвозеТоваров;
	СуммаВключаетАкциз = ?(ДанныеДокумента.Свойство("СуммаВключаетАкциз")
	                     	  И ТипЗнч(ДанныеДокумента.СуммаВключаетАкциз) = Тип("Булево"), ДанныеДокумента.СуммаВключаетАкциз, Ложь);
	СуммаВключаетНДС   = ?(ДанныеДокумента.Свойство("СуммаВключаетНДС")
	                     	  И ТипЗнч(ДанныеДокумента.СуммаВключаетНДС) = Тип("Булево"), ДанныеДокумента.СуммаВключаетНДС, Ложь);
	УчитыватьНДС       = ?(ДанныеДокумента.Свойство("УчитыватьНДС")
	                     	  И ТипЗнч(ДанныеДокумента.УчитыватьНДС) = Тип("Булево"), ДанныеДокумента.УчитыватьНДС, Истина);
	ЕстьАкциз          = ДанныеСтрокиТабличнойЧасти.Свойство("СуммаАкциза") И ТипЗнч(ДанныеСтрокиТабличнойЧасти.СуммаАкциза) = Тип("Число");
	ОборотПоРеализацииВВалюте = НЕ ЭтоЗаявлениеОВвозеТоваров И ДанныеДокумента.Дата>=Дата(2014,7,1); // В электронных счетах-фактурах с 01.07.2014 разрешена выписка в валюте
		
	// определение числовых переменных
	СуммаАкциза = ?(ДанныеСтрокиТабличнойЧасти.Свойство("СуммаАкциза")
	                   И ТипЗнч(ДанныеСтрокиТабличнойЧасти.СуммаАкциза) = Тип("Число"), ДанныеСтрокиТабличнойЧасти.СуммаАкциза, 0); 
	СтавкаНДС   = ?(ДанныеСтрокиТабличнойЧасти.Свойство("СтавкаНДС")
	                   И ТипЗнч(ДанныеСтрокиТабличнойЧасти.СтавкаНДС) = Тип("СправочникСсылка.СтавкиНДС"), ДанныеСтрокиТабличнойЧасти.СтавкаНДС, ПредопределенноеЗначение("Справочник.СтавкиНДС.ПустаяСсылка"));
	Сумма       = ?(ДанныеСтрокиТабличнойЧасти.Свойство("Сумма")
	                   И ТипЗнч(ДанныеСтрокиТабличнойЧасти.Сумма) = Тип("Число"), ДанныеСтрокиТабличнойЧасти.Сумма, 0);
					   
	СуммаДополнительныхРасходов = ?(ДанныеСтрокиТабличнойЧасти.Свойство("СуммаДополнительныхРасходов")
	                                   И ТипЗнч(ДанныеСтрокиТабличнойЧасти.СуммаДополнительныхРасходов) = Тип("Число"), ДанныеСтрокиТабличнойЧасти.СуммаДополнительныхРасходов, 0); 
	СуммаОборотаПоРеализации    = 0;
									   
	// определение переменных для пересчета валют
	ВалютаРегламентированногоУчета = ?(ДанныеДокумента.Свойство("ВалютаРегламентированногоУчета")
				                     	  И ТипЗнч(ДанныеДокумента.ВалютаРегламентированногоУчета) = Тип("СправочникСсылка.Валюты"),
										  ДанныеДокумента.ВалютаРегламентированногоУчета, ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
	ВалютаДокумента                = ?(ДанныеДокумента.Свойство("ВалютаДокумента")
				                     	  И ТипЗнч(ДанныеДокумента.ВалютаДокумента) = Тип("СправочникСсылка.Валюты"),
										  ДанныеДокумента.ВалютаДокумента, ПредопределенноеЗначение("Справочник.Валюты.ПустаяСсылка"));
	ВалютаСтроки                   = ?(ДанныеСтрокиТабличнойЧасти.Свойство("Валюта")
				                     	  И ТипЗнч(ДанныеСтрокиТабличнойЧасти.Валюта) = Тип("СправочникСсылка.Валюты"),
										  ДанныеСтрокиТабличнойЧасти.Валюта, ПредопределенноеЗначение("Справочник.Валюты.ПустаяСсылка"));
	КурсВалютыСтроки               = ?(ДанныеСтрокиТабличнойЧасти.Свойство("КурсВалюты")
				                     	  И ТипЗнч(ДанныеСтрокиТабличнойЧасти.КурсВалюты) = Тип("Число"),
										  ДанныеСтрокиТабличнойЧасти.КурсВалюты, 1);
	КурсВзаиморасчетов             = ?(ДанныеДокумента.Свойство("КурсВзаиморасчетов")
				                     	  И ТипЗнч(ДанныеДокумента.КурсВзаиморасчетов) = Тип("Число"),
										  ДанныеДокумента.КурсВзаиморасчетов, 1);
	КратностьВзаиморасчетов        = ?(ДанныеДокумента.Свойство("КратностьВзаиморасчетов")
				                     	  И ТипЗнч(ДанныеДокумента.КратностьВзаиморасчетов) = Тип("Число"),
										  ДанныеДокумента.КратностьВзаиморасчетов, 1);
										  
	// расчет оборота по реализации						  
	Если СуммаВключаетНДС Тогда
		СуммаНДС = Окр(РассчитатьСуммуНДС(Сумма, УчитыватьНДС, СуммаВключаетНДС,
						УчетНДСиАкцизаВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтавкаНДС),
						СуммаАкциза, СуммаВключаетАкциз),2);
		СуммаОборотаПоРеализации = Сумма - СуммаНДС;
	Иначе
		СуммаОборотаПоРеализации = Сумма;
	КонецЕсли;
	
	Если ЕстьАкциз И Не СуммаВключаетАкциз Тогда
		СуммаОборотаПоРеализации = СуммаОборотаПоРеализации + СуммаАкциза;
	КонецЕсли;
	
	// валютный пересчет
	Если (ЕстьКурсДокумента И НЕ ОборотПоРеализацииВВалюте) ИЛИ ЭтоЗаявлениеОВвозеТоваров Тогда
		Если ЭтоЗаявлениеОВвозеТоваров И ЗначениеЗаполнено(ВалютаСтроки) Тогда
			СуммаОборотаПоРеализации = ОбщегоНазначенияБККлиентСервер.ПересчитатьИзВалютыВВалюту(Сумма, ВалютаСтроки, ВалютаРегламентированногоУчета, КурсВалютыСтроки, 1) + СуммаДополнительныхРасходов;      
		ИначеЕсли ЕстьКурсДокумента И ЗначениеЗаполнено(ВалютаДокумента) Тогда
			// для уменьшения погрешности рассчитываем так же как в процедуре ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации
			// в виде разницы тенговых сумм документа.
			Если СуммаВключаетНДС Тогда
				СуммаНДСВВалютеРеглУчета = ОбщегоНазначенияБККлиентСервер.ПересчитатьИзВалютыВВалюту(
												Окр(СуммаНДС, 2), ВалютаДокумента, ВалютаРегламентированногоУчета, КурсВзаиморасчетов, 1, КратностьВзаиморасчетов, 1); 			
				СуммаВВалютеРеглУчета 	 = ОбщегоНазначенияБККлиентСервер.ПересчитатьИзВалютыВВалюту(
												Сумма, ВалютаДокумента, ВалютаРегламентированногоУчета, КурсВзаиморасчетов, 1, КратностьВзаиморасчетов, 1); 									
				СуммаОборотаПоРеализации = СуммаВВалютеРеглУчета - СуммаНДСВВалютеРеглУчета;
			Иначе	
				СуммаОборотаПоРеализации = ОбщегоНазначенияБККлиентСервер.ПересчитатьИзВалютыВВалюту(
												Сумма, ВалютаДокумента, ВалютаРегламентированногоУчета, КурсВзаиморасчетов, 1, КратностьВзаиморасчетов, 1); 			
			КонецЕсли;						
										
			Если ЕстьАкциз И Не СуммаВключаетАкциз Тогда
				СуммаОборотаПоРеализации = СуммаОборотаПоРеализации + ОбщегоНазначенияБККлиентСервер.ПересчитатьИзВалютыВВалюту(
																			СуммаАкциза, ВалютаДокумента, ВалютаРегламентированногоУчета, КурсВзаиморасчетов, 1, КратностьВзаиморасчетов, 1); 			
			КонецЕсли;	
		КонецЕсли;	
		
	КонецЕсли;
	
	ДанныеСтрокиТабличнойЧасти.ОборотПоРеализации = СуммаОборотаПоРеализации;
	
КонецПроцедуры // РассчитатьОборотПоРеализацииТабЧасти()

Процедура ЗаполнитьТекстПроСчетФактуру(Форма, ДанныеСчетаФактуры, РеквизитНадписьСчетаФактуры, ТребуетсяСчетФактура = Истина) Экспорт
	
	Если ТребуетсяСчетФактура И ДанныеСчетаФактуры = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ТребуетсяСчетФактура Тогда
		Форма[РеквизитНадписьСчетаФактуры] = НСтр("ru='Не требуется'");
		Форма.Элементы[РеквизитНадписьСчетаФактуры].ЦветТекста = Новый Цвет(51, 51, 51); // текст формы
	Иначе
		Форма[РеквизитНадписьСчетаФактуры] = ДанныеСчетаФактуры.ТекстСчетаФактуры;
		
		Если ТребуетсяСчетФактура И (ДанныеСчетаФактуры.ПометкаУдаления ИЛИ НЕ ДанныеСчетаФактуры.Проведен) Тогда
			Форма.Элементы[РеквизитНадписьСчетаФактуры].ЦветТекста = Новый Цвет(255, 0, 0);  // красный
		Иначе
			Форма.Элементы[РеквизитНадписьСчетаФактуры].ЦветТекста = Новый Цвет(51, 51, 51); // текст формы
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

Процедура УправлениеГруппойСчетаФактуры(Форма, ВводДанныхСчетаФактуры = Ложь, ТребуетсяСчетФактура = Истина) Экспорт
	
	Элементы = Форма.Элементы;
	
	Если ТребуетсяСчетФактура И НЕ ЗначениеЗаполнено(Форма.СчетФактура) Тогда
		Если ВводДанныхСчетаФактуры Тогда
			// Элемент ГруппаЗарегистрироватьСчетФактуру отсутствует в документах-основаниях Счета-фактуры (выданного)
			Если Элементы.Найти("ГруппаЗарегистрироватьСчетФактуру") <> Неопределено Тогда 
				Элементы.ГруппаСчетФактураСтраницы.ТекущаяСтраница = Элементы.ГруппаЗарегистрироватьСчетФактуру;
				Если Элементы.Найти("НомерСчетаФактурыПолученного") <> Неопределено Тогда
					Форма.ТекущийЭлемент = Элементы.НомерСчетаФактурыПолученного;
				КонецЕсли;
			Иначе
				Элементы.ГруппаСчетФактураСтраницы.ТекущаяСтраница = Элементы.ГруппаВыборВводаСчетаФактуры;
			КонецЕсли;
		Иначе
			Элементы.ГруппаСчетФактураСтраницы.ТекущаяСтраница = Элементы.ГруппаВыборВводаСчетаФактуры;
		КонецЕсли;
	Иначе
		Элементы.ГруппаСчетФактураСтраницы.ТекущаяСтраница = Элементы.ГруппаСчетФактураСсылка;
	КонецЕсли;
	
	Элементы.НадписьСчетФактура.Гиперссылка = ТребуетсяСчетФактура;
	
КонецПроцедуры

Процедура ДополнитьПараметрыСобытияЗаписьСчетаФактуры(ПараметрыЗаписи) Экспорт
	
	Если ТипЗнч(ПараметрыЗаписи) <> Тип("Структура") Тогда
		ПараметрыЗаписи = Новый Структура;
	КонецЕсли;
	
	Если Не ПараметрыЗаписи.Свойство("ДокументыОснования") Тогда
		ПараметрыЗаписи.Вставить("ДокументыОснования", Новый Массив);
	КонецЕсли;
	
	Если Не ПараметрыЗаписи.Свойство("РеквизитыСФ") Тогда
		ПараметрыЗаписи.Вставить("РеквизитыСФ", Неопределено);
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьСуммуДокументаСНДС(ДанныеОбъекта, ИмяТабличнойЧасти = Неопределено) Экспорт

	СуммаДокумента = 0;
	Если ИмяТабличнойЧасти <> Неопределено Тогда
		СуммаДокумента = СуммаДокумента + ДанныеОбъекта[ИмяТабличнойЧасти].Итог("Сумма");
		
		Если ДанныеОбъекта[ИмяТабличнойЧасти].Количество() > 0 Тогда
		
			СтрокаПроверкиМетаданных = ДанныеОбъекта[ИмяТабличнойЧасти][0];
			
		Иначе
			
			Возврат СуммаДокумента;
			
		КонецЕсли;
		
		Если ДанныеОбъекта.Свойство("УчитыватьНДС")
		   И ДанныеОбъекта.Свойство("СуммаВключаетНДС")
		   И СтрокаПроверкиМетаданных.Свойство("СуммаНДС")
		   И ДанныеОбъекта.УчитыватьНДС
		   И НЕ ДанныеОбъекта.СуммаВключаетНДС Тогда
			СуммаДокумента = СуммаДокумента + ДанныеОбъекта[ИмяТабличнойЧасти].Итог("СуммаНДС");
		КонецЕсли; 
		
		Если ДанныеОбъекта.Свойство("УчитыватьАкциз")
			И ДанныеОбъекта.Свойство("СуммаВключаетАкциз")
			И СтрокаПроверкиМетаданных.Свойство("СуммаАкциза")
			И ДанныеОбъекта.УчитыватьАкциз
			И НЕ ДанныеОбъекта.СуммаВключаетАкциз Тогда
			СуммаДокумента = СуммаДокумента + ДанныеОбъекта[ИмяТабличнойЧасти].Итог("СуммаАкциза");
		КонецЕсли; 
		
	Иначе
		
		СписокТЧ = Новый Массив;
		
		Если ДанныеОбъекта.Свойство("Товары")
			И ТипЗнч(ДанныеОбъекта["Товары"]) = Тип("ДанныеФормыКоллекция")
			И ДанныеОбъекта["Товары"].Количество() > 0 Тогда
			СписокТЧ.Добавить("Товары");
		КонецЕсли;
		
		Если ДанныеОбъекта.Свойство("Услуги")
			И ТипЗнч(ДанныеОбъекта["Услуги"]) = Тип("ДанныеФормыКоллекция")
			И ДанныеОбъекта["Услуги"].Количество() > 0 Тогда
			СписокТЧ.Добавить("Услуги");
		КонецЕсли;
		
		Если ДанныеОбъекта.Свойство("ОС")
			И ТипЗнч(ДанныеОбъекта["ОС"]) = Тип("ДанныеФормыКоллекция")
			И ДанныеОбъекта["ОС"].Количество() > 0 Тогда
			СписокТЧ.Добавить("ОС");
		КонецЕсли;
		
		Если ДанныеОбъекта.Свойство("НМА")
			И ТипЗнч(ДанныеОбъекта["НМА"]) = Тип("ДанныеФормыКоллекция")
			И ДанныеОбъекта["НМА"].Количество() > 0 Тогда
			СписокТЧ.Добавить("НМА");
		КонецЕсли;
		
		//обрабатываем изменения Товаров, Услуг, ВозворатнойТары и Оборудования
		Для Каждого ТЧОбъекта Из СписокТЧ Цикл
			
			Если ДанныеОбъекта[ТЧОбъекта].Количество() > 0 Тогда
				СтрокаПроверкиМетаданных = ДанныеОбъекта[ТЧОбъекта][0];
			Иначе 
				Продолжить;
			КонецЕсли;
			
			Если СтрокаПроверкиМетаданных.Свойство("Сумма") Тогда
				СуммаДокумента = СуммаДокумента + ДанныеОбъекта[ТЧОбъекта].Итог("Сумма");
				Если ДанныеОбъекта.Свойство("УчитыватьНДС")
					И ДанныеОбъекта.Свойство("СуммаВключаетНДС")
					И СтрокаПроверкиМетаданных.Свойство("СуммаНДС")
					И ДанныеОбъекта.УчитыватьНДС
					И НЕ ДанныеОбъекта.СуммаВключаетНДС Тогда
					СуммаДокумента = СуммаДокумента + ДанныеОбъекта[ТЧОбъекта].Итог("СуммаНДС");
				КонецЕсли; 
				
				Если ДанныеОбъекта.Свойство("УчитыватьАкциз")
					И ДанныеОбъекта.Свойство("СуммаВключаетАкциз")
					И СтрокаПроверкиМетаданных.Свойство("СуммаАкциза")
					И ДанныеОбъекта.УчитыватьАкциз
					И НЕ ДанныеОбъекта.СуммаВключаетАкциз Тогда
					СуммаДокумента = СуммаДокумента + ДанныеОбъекта[ТЧОбъекта].Итог("СуммаАкциза");
				КонецЕсли; 
			КонецЕсли; 			
		КонецЦикла;
	КонецЕсли;
	
	Возврат СуммаДокумента;

КонецФункции // ПолучитьСуммуДокументаСНДС()

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
