////////////////////////////////////////////////////////////////////////////////
// ПроцедурыУправленияПерсоналомСервер: 
//  
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС


///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБЕСПЕЧЕНИЯ РАБОТЫ ФОРМ ДОКУМЕНТОВ
                                  
// Функция возвращает совокупность данных о физическом лице в виде структуры, 
// В совокупность данных входит ФИО, должность в заданной организации, 
// паспортные данные и др.
//
// Параметры:
//  Организация  - СправочникСсылка.Организации - организация, по которой
//                 определяется должность и подразделение работника
//  ФизЛицо      - СправочникСсылка.ФизическиеЛица - физическое лицо,
//                 по которому возвращается совокупность данных
//  ДатаСреза    - Дата - дата, на которую считываются данные
//
// Возвращаемое значение:
//  Структура    - Структура с совокупностью данных о физическом лице:
//                 - Фамилия
//                 - Имя
//                 - Отчетсво
//                 - Представление (Фамилия И.О.)
//                 - Подразделение
//                 - ДокументВид
//                 - ДокументСерия
//                 - ДокументНомер
//                 - ДокументДатаВыдачи
//                 - ДокументКемВыдан
//                 - ДокументКодПодразделения
//
Функция ДанныеФизЛица(Организация, ФизЛицо, ДатаСреза) Экспорт
	
	Результат = Новый Структура("Фамилия, Имя, Отчество, Представление, 
								|ТабельныйНомер, Должность, ПодразделениеОрганизации, 
								|ДокументВид, ДокументСерия, ДокументНомер,  
								|ДокументДатаВыдачи, ДокументКемВыдан,УдалитьНеСклонятьФамилию, Пол");

	ЕстьРаботникиОрганизации = Метаданные.РегистрыСведений.Найти("РаботникиОрганизаций") <> Неопределено;

	ЗапросПоЛицам = Новый Запрос();
	ЗапросПоЛицам.УстановитьПараметр("ДатаСреза",   ДатаСреза);
	ЗапросПоЛицам.УстановитьПараметр("Организация", ОбщегоНазначенияБКВызовСервера.ГоловнаяОрганизацияДляУчетаЗарплаты(Организация));
	ЗапросПоЛицам.УстановитьПараметр("ФизЛицо", ФизЛицо);
	ЗапросПоЛицам.УстановитьПараметр("парамУволен", Перечисления.ПричиныИзмененияСостояния.Увольнение);
	ЗапросПоЛицам.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ФИОФизЛицСрезПоследних.Фамилия,
	|	ФИОФизЛицСрезПоследних.Имя,
	|	ФИОФизЛицСрезПоследних.Отчество,
	|	ФИОФизЛицСрезПоследних.УдалитьНеСклонятьФамилию,
	|	ФизическиеЛица.Пол";
	Если ЕстьРаботникиОрганизации Тогда
	ЗапросПоЛицам.Текст = ЗапросПоЛицам.Текст + ",
	|	РаботникиОрганизацийСрезПоследних.Сотрудник.Код КАК ТабельныйНомер,
	|	РаботникиОрганизацийСрезПоследних.Должность,
	|	РаботникиОрганизацийСрезПоследних.ПодразделениеОрганизации";
	Иначе
	ЗапросПоЛицам.Текст = ЗапросПоЛицам.Текст + ",
	|	ФизическиеЛица.Должность";
	КонецЕсли;
	ЗапросПоЛицам.Текст = ЗапросПоЛицам.Текст + ",
	|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументВид,
	|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументСерия,
	|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументНомер,
	|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументДатаВыдачи,
	|	ВЫРАЗИТЬ(ПаспортныеДанныеФизЛицСрезПоследних.ДокументКемВыдан КАК СТРОКА(1000)) КАК ДокументКемВыдан
	|ИЗ
	|	Справочник.ФизическиеЛица КАК ФизическиеЛица
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(
	|				&ДатаСреза, 
	|				ФизЛицо = &ФизЛицо) КАК ФИОФизЛицСрезПоследних
	|		ПО ФизическиеЛица.Ссылка = ФИОФизЛицСрезПоследних.ФизЛицо
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПаспортныеДанныеФизЛиц.СрезПоследних(
	|				&ДатаСреза, 
	|				ФизЛицо = &ФизЛицо) КАК ПаспортныеДанныеФизЛицСрезПоследних
	|		ПО ФизическиеЛица.Ссылка = ПаспортныеДанныеФизЛицСрезПоследних.ФизЛицо";
	Если ЕстьРаботникиОрганизации Тогда
	ЗапросПоЛицам.Текст = ЗапросПоЛицам.Текст + "
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|				&ДатаСреза, 
	|				Сотрудник.ФизЛицо = &ФизЛицо 
	|				И Организация = &Организация
	|				И (Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство))) КАК РаботникиОрганизацийСрезПоследних
	|		ПО ФизическиеЛица.Ссылка = РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо
	|       	И  РаботникиОрганизацийСрезПоследних.ПричинаИзмененияСостояния <> &парамУволен";
	КонецЕсли;
	ЗапросПоЛицам.Текст = ЗапросПоЛицам.Текст + "
	|ГДЕ
	|	ФизическиеЛица.Ссылка = &ФизЛицо";
	Если ЕстьРаботникиОрганизации Тогда
	ЗапросПоЛицам.Текст = ЗапросПоЛицам.Текст + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	РаботникиОрганизацийСрезПоследних.Период УБЫВ
	|";
	КонецЕсли;
	
	Данные = ЗапросПоЛицам.Выполнить().Выбрать();
	Если Данные.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Результат, Данные);
		Результат.Представление = ОбщегоНазначенияБКВызовСервера.ПолучитьФамилиюИмяОтчество(Данные.Фамилия, Данные.Имя, Данные.Отчество);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ДанныеФизЛица()

//// Функция возвращает совокупность данных о физических лицах в виде таблицы
//// значений. В совокупность данных входит ФИО, должность в заданной 
//// организации, паспортные данные и др.
////
//// Параметры:
////  Организация  - СправочникСсылка.Организации - организация, по которой
////                 определяется должность и подразделение работника(ов)
////  ФизЛицо      - СправочникСсылка.ФизическиеЛица или Массив - физическое лицо
////                 или список физ. лиц, по которым возвращается совокупность 
////                 данных
////  ДатаСреза    - Дата - дата, на которую считываются данные
////
//// Возвращаемое значение:
////  ТаблицаЗначений - Таблица с совокупностью данных о физическом лице. 
////                  Колонки: возвращаемой таблицы:
////                  - Фамилия
////                  - Имя
////                  - Отчетсво
////                  - Представление (Фамилия И.О.)
////                  - Подразделение
////                  - ДокументВид
////                  - ДокументСерия
////                  - ДокументНомер
////                  - ДокументДатаВыдачи
////                  - ДокументКемВыдан
////                  - ДокументКодПодразделения
////
Функция ДанныеФизЛиц(Организация, ФизЛицо, ДатаСреза) Экспорт

	ТабРезультат = Новый ТаблицаЗначений();
	ТабРезультат.Колонки.Добавить("Фамилия");
	ТабРезультат.Колонки.Добавить("Имя");
	ТабРезультат.Колонки.Добавить("Отчество");
	ТабРезультат.Колонки.Добавить("Представление");
	ТабРезультат.Колонки.Добавить("ТабельныйНомер");
	ТабРезультат.Колонки.Добавить("Должность");
	ТабРезультат.Колонки.Добавить("ПодразделениеОрганизации");
	ТабРезультат.Колонки.Добавить("ДокументВид");
	ТабРезультат.Колонки.Добавить("ДокументСерия");
	ТабРезультат.Колонки.Добавить("ДокументНомер");
	ТабРезультат.Колонки.Добавить("ДокументДатаВыдачи");
	ТабРезультат.Колонки.Добавить("ДокументКемВыдан");
	ТабРезультат.Колонки.Добавить("УдалитьНеСклонятьФамилию");
	
	ЕстьРаботникиОрганизации = Метаданные.РегистрыСведений.Найти("РаботникиОрганизаций") <> Неопределено;
	
	ЗапросПоЛицам = Новый Запрос();
	ЗапросПоЛицам.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
									
	ТекстУпорядочивания = "";
	Если ТипЗнч(ФизЛицо) = Тип("СписокЗначений") 
			Или ТипЗнч(ФизЛицо) = Тип("Массив") Тогда
		
		НомерПП = 0;
		
		Для Каждого ЭлементСписка Из ФизЛицо Цикл
			
			НомерПП = НомерПП + 1;
		
			Если НЕ ПустаяСтрока(ТекстУпорядочивания) Тогда
				ТекстУпорядочивания = ТекстУпорядочивания + "
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|";
			КонецЕсли;
			
			ТекстУпорядочивания = ТекстУпорядочивания + "
			|ВЫБРАТЬ
			|	&парамФизЛицо" + Формат(НомерПП, "ЧГ=") + " КАК ФизЛицо,
			|	" + Формат(НомерПП, "ЧГ=") + " КАК НомерСтроки";
			
			Если НомерПП = 1 Тогда
			ТекстУпорядочивания = ТекстУпорядочивания + "
			|
			|ПОМЕСТИТЬ ВТ_СписокФизЛиц
			|";
			КонецЕсли;
			
			
			Если ТипЗнч(ФизЛицо) = Тип("СписокЗначений") Тогда
				ЗапросПоЛицам.УстановитьПараметр("парамФизЛицо" + Формат(НомерПП, "ЧГ="), ЭлементСписка.Значение);
			Иначе
				ЗапросПоЛицам.УстановитьПараметр("парамФизЛицо" + Формат(НомерПП, "ЧГ="), ЭлементСписка);
			КонецЕсли;
			
		КонецЦикла;
	
	ИначеЕсли ТипЗнч(ФизЛицо) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
	
		ТекстУпорядочивания = "
		|ВЫБРАТЬ
		|	&ФизЛицо КАК ФизЛицо,
		|	1 КАК НомерСтроки
		|
		|ПОМЕСТИТЬ ВТ_СписокФизЛиц
		|";
		
	КонецЕсли;
	
	Если ТекстУпорядочивания = "" Тогда

		ТекстУпорядочивания = "
		|ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка) КАК ФизЛицо,
		|	1 КАК НомерСтроки
		|
		|ПОМЕСТИТЬ ВТ_СписокФизЛиц
		|";
		
	КонецЕсли;
	
	ЗапросПоЛицам.Текст = ТекстУпорядочивания;
	ЗапросПоЛицам.Выполнить();
	ТекстУпорядочивания = "ВТ_СписокФизЛиц";
	
	ЗапросПоЛицам.УстановитьПараметр("ДатаСреза",   ДатаСреза);
	ЗапросПоЛицам.УстановитьПараметр("Организация", ОбщегоНазначенияБКВызовСервера.ГоловнаяОрганизацияДляУчетаЗарплаты(Организация));
	ЗапросПоЛицам.УстановитьПараметр("ФизЛицо", ФизЛицо);
	ЗапросПоЛицам.УстановитьПараметр("парамУволен", Перечисления.ПричиныИзмененияСостояния.Увольнение);
	ЗапросПоЛицам.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НомераСтрок.ФизЛицо,
	|	ФИОФизЛицСрезПоследних.Фамилия,
	|	ФИОФизЛицСрезПоследних.Имя,
	|	ФИОФизЛицСрезПоследних.Отчество,
	|	ФИОФизЛицСрезПоследних.УдалитьНеСклонятьФамилию";
	Если ЕстьРаботникиОрганизации Тогда
	ЗапросПоЛицам.Текст = ЗапросПоЛицам.Текст + ",
	|	РаботникиОрганизацийСрезПоследних.Сотрудник.Код КАК ТабельныйНомер,
	|	РаботникиОрганизацийСрезПоследних.Должность,
	|	РаботникиОрганизацийСрезПоследних.ПодразделениеОрганизации";
	Иначе
	ЗапросПоЛицам.Текст = ЗапросПоЛицам.Текст + ",
	|	ФизическиеЛица.Должность";
	КонецЕсли;
	ЗапросПоЛицам.Текст = ЗапросПоЛицам.Текст + ",
	|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументВид,
	|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументСерия,
	|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументНомер,
	|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументДатаВыдачи,
	|	ВЫРАЗИТЬ(ПаспортныеДанныеФизЛицСрезПоследних.ДокументКемВыдан КАК СТРОКА(1000)) КАК ДокументКемВыдан
	|ИЗ
	|	" + ТекстУпорядочивания + " КАК НомераСтрок
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
	|		ПО НомераСтрок.ФизЛицо = ФизическиеЛица.Ссылка
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(
	|				&ДатаСреза, 
	|				ФизЛицо В(&ФизЛицо)) КАК ФИОФизЛицСрезПоследних
	|		ПО НомераСтрок.Физлицо = ФИОФизЛицСрезПоследних.ФизЛицо
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПаспортныеДанныеФизЛиц.СрезПоследних(
	|				&ДатаСреза, 
	|				ФизЛицо В(&ФизЛицо)) КАК ПаспортныеДанныеФизЛицСрезПоследних
	|		ПО ФИОФизЛицСрезПоследних.ФизЛицо = ПаспортныеДанныеФизЛицСрезПоследних.ФизЛицо";
	Если ЕстьРаботникиОрганизации Тогда
	ЗапросПоЛицам.Текст = ЗапросПоЛицам.Текст + "
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|				&ДатаСреза, 
	|				Сотрудник.ФизЛицо В(&ФизЛицо) 
	|				И Организация = &Организация
	|				И (Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство))) КАК РаботникиОрганизацийСрезПоследних
	|		ПО ФИОФизЛицСрезПоследних.ФизЛицо = РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо
	|       И  РаботникиОрганизацийСрезПоследних.ПричинаИзмененияСостояния <> &парамУволен";
	КонецЕсли;
	ЗапросПоЛицам.Текст = ЗапросПоЛицам.Текст + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомераСтрок.НомерСтроки";
	Если ЕстьРаботникиОрганизации Тогда
	ЗапросПоЛицам.Текст = ЗапросПоЛицам.Текст + ",
	|	РаботникиОрганизацийСрезПоследних.Период УБЫВ
	|";
	КонецЕсли;
	
	Данные = ЗапросПоЛицам.Выполнить().Выбрать();
	СоответствиеФизЛиц = Новый Соответствие;
	
	Пока Данные.Следующий() Цикл
		
		//чтобы избежать задвоения при повторных приемах работника в одну и туже организацию
		Если СоответствиеФизЛиц.Получить(Данные.ФизЛицо) = Неопределено Тогда 
			СоответствиеФизЛиц.Вставить(Данные.ФизЛицо, Истина);
			Результат = ТабРезультат.Добавить();
			ЗаполнитьЗначенияСвойств(Результат, Данные);
			Результат.Представление 			= ОбщегоНазначенияБКВызовСервера.ПолучитьФамилиюИмяОтчество(Данные.Фамилия, Данные.Имя, Данные.Отчество);
		КонецЕсли;
		
	КонецЦикла;

	Возврат ТабРезультат;
	
КонецФункции // ДанныеФизЛиц()

// Заполняет реквизит "КраткийСоставДокумента" документа по его табличным частям.
//
// Параметры
//  ТЧДокумента					– табличная часть документа по которой происходит заполнение реквизита
//  ДополнительнаяТЧДокумента	- табличная часть документа, как правило это ТЧ с дополнительными начислениями
//
// Возвращаемое значение:
//   строка, значение реквизита "КраткийСоставДокумента".
//
Функция ЗаполнитьКраткийСоставДокумента(ТЧДокумента, ИмяРеквизита = "Сотрудник") Экспорт

	КраткийСоставДокумента = "";
	
	КоличествоТЧ = 1;
	КраткийСоставДокументаЗаполнен = Ложь;
	Для каждого ТабличнаяЧастьДокумента Из ТЧДокумента Цикл
		
		Если НЕ КраткийСоставДокументаЗаполнен Тогда
			
			Для каждого СтрокаТЧ Из ТабличнаяЧастьДокумента Цикл
				
				Если ТипЗнч(СтрокаТЧ[ИмяРеквизита]) = Тип("СправочникСсылка.Контрагенты") Тогда
					ФИОФизЛица = ОбщегоНазначенияБК.ФамилияИнициалыФизЛица(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТЧ[ИмяРеквизита],"ФизЛицо"));
				Иначе
					ФИОФизЛица = ОбщегоНазначенияБК.ФамилияИнициалыФизЛица(СтрокаТЧ[ИмяРеквизита]);
				КонецЕсли;
				
				Если Найти(КраткийСоставДокумента, ФИОФизЛица) = 0 Тогда
					
					Если СтрДлина(КраткийСоставДокумента) < 100 Тогда
						КраткийСоставДокумента = КраткийСоставДокумента + ", " + ФИОФизЛица;
					Иначе
						
						Если КоличествоТЧ = 1 Тогда
							КраткийСоставДокумента = Сред(КраткийСоставДокумента,3,95) + "...";
						Иначе
							
							Если Лев(КраткийСоставДокумента,2) = ", " Тогда
								КраткийСоставДокумента = Сред(КраткийСоставДокумента,3,95) + "...";
							Иначе
								КраткийСоставДокумента = Лев(КраткийСоставДокумента,97) + "...";
							КонецЕсли;
							
						КонецЕсли; 
						
						КраткийСоставДокументаЗаполнен = Истина;
						Прервать;
						
					КонецЕсли;
					
				КонецЕсли; 
				
			КонецЦикла;
			
			КоличествоТЧ = КоличествоТЧ + 1;
			
		КонецЕсли; 
		
		Если КраткийСоставДокументаЗаполнен Тогда
			Прервать
		КонецЕсли; 
		
	КонецЦикла; 
	
	Если Лев(КраткийСоставДокумента,2) = ", " Тогда
		ДлинаСтроки = СтрДлина(КраткийСоставДокумента);
		Если ДлинаСтроки < 100 Тогда
			КраткийСоставДокумента = Сред(КраткийСоставДокумента,3)
		Иначе
			КраткийСоставДокумента = Сред(КраткийСоставДокумента,3,95) + "...";
		КонецЕсли; 
		
	КонецЕсли;
	
	Возврат КраткийСоставДокумента;
	
КонецФункции // ЗаполнитьКраткийСоставДокумента()

// Заполняет реквизит "КраткийСоставВидовРасчетаДокумента" документа по его табличным частям.
//
// Параметры
//  ТЧДокумента					– табличная часть документа по которой происходит заполнение реквизита
//  ДополнительнаяТЧДокумента	- табличная часть документа, как правило это ТЧ с дополнительными начислениями
//
// Возвращаемое значение:
//   строка, значение реквизита "КраткийСоставВидовРасчетаДокумента".
//
Функция ЗаполнитьКраткийСоставВидовРасчетаДокумента(ТЧДокумента, ДополнительнаяТЧДокумента = Неопределено) Экспорт

	КраткийСоставВидовРасчетаДокумента = "";
	
	Для каждого СтрокаТЧ Из ТЧДокумента Цикл
			
		Если Найти(КраткийСоставВидовРасчетаДокумента, СтрокаТЧ.ВидРасчета) = 0 Тогда
			
			Если СтрДлина(КраткийСоставВидовРасчетаДокумента) < 100 Тогда
				КраткийСоставВидовРасчетаДокумента = КраткийСоставВидовРасчетаДокумента + ", " + СтрокаТЧ.ВидРасчета;
			Иначе
				КраткийСоставВидовРасчетаДокумента = Сред(КраткийСоставВидовРасчетаДокумента,3,95) + "...";
				Прервать;
			КонецЕсли;
			
		КонецЕсли; 
	
	КонецЦикла;
	
	Если ДополнительнаяТЧДокумента <> Неопределено И СтрДлина(КраткийСоставВидовРасчетаДокумента) < 100 Тогда
	
		Для каждого СтрокаТЧ Из ДополнительнаяТЧДокумента Цикл
			
			Если Найти(КраткийСоставВидовРасчетаДокумента, СтрокаТЧ.ВидРасчета) = 0 Тогда
				
				Если СтрДлина(КраткийСоставВидовРасчетаДокумента) < 100 Тогда
					КраткийСоставВидовРасчетаДокумента = КраткийСоставВидовРасчетаДокумента + ", " + СтрокаТЧ.ВидРасчета;
				Иначе
					Если Лев(КраткийСоставВидовРасчетаДокумента,2) = ", " Тогда
						КраткийСоставВидовРасчетаДокумента = Сред(КраткийСоставВидовРасчетаДокумента,3,95) + "...";
					Иначе
						КраткийСоставВидовРасчетаДокумента = Лев(КраткийСоставВидовРасчетаДокумента,97) + "...";
					КонецЕсли;
					Прервать;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
	 
	КонецЕсли;
	
	Если Лев(КраткийСоставВидовРасчетаДокумента,2) = ", " Тогда
		ДлинаСтроки = СтрДлина(КраткийСоставВидовРасчетаДокумента);
		Если ДлинаСтроки < 100 Тогда
			КраткийСоставВидовРасчетаДокумента = Сред(КраткийСоставВидовРасчетаДокумента,3)
		Иначе
			КраткийСоставВидовРасчетаДокумента = Сред(КраткийСоставВидовРасчетаДокумента,3,95) + "...";
		КонецЕсли; 
		
	КонецЕсли;
	
	Возврат КраткийСоставВидовРасчетаДокумента;
	
КонецФункции // ЗаполнитьКраткийСоставВидовРасчетаДокумента()

Процедура ПередЗаписьюДокументаЗаполнитьФизЛицоВТабличнойЧасти(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	СоответствиеСотрудникФизлицо = Новый Соответствие;
	ПустоеФизлицо = Справочники.ФизическиеЛица.ПустаяСсылка();
	ПустойСотрудник = Справочники.СотрудникиОрганизаций.ПустаяСсылка();
	
	Для Каждого ТабличнаяЧасть Из Источник.Метаданные().ТабличныеЧасти Цикл
		
		Если ТабличнаяЧасть.Реквизиты.Найти("Сотрудник") = Неопределено ИЛИ ТабличнаяЧасть.Реквизиты.Найти("Физлицо") = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого СтрокаТабличнойЧасти Из Источник[ТабличнаяЧасть.Имя] Цикл
			
			Если СтрокаТабличнойЧасти.Сотрудник <> ПустойСотрудник Тогда
				СоответствиеСотрудникФизлицо.Вставить(СтрокаТабличнойЧасти.Сотрудник);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;

	МассивСотрудников = Новый Массив;
	
	Для Каждого ЭлементСоответствия Из СоответствиеСотрудникФизлицо Цикл
		МассивСотрудников.Добавить(ЭлементСоответствия.Ключ);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокСотрудников", МассивСотрудников);
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СотрудникиОрганизаций.Физлицо,
	|	СотрудникиОрганизаций.Ссылка КАК Сотрудник
	|ИЗ
	|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
	|ГДЕ
	|	СотрудникиОрганизаций.Ссылка В(&СписокСотрудников)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СоответствиеСотрудникФизлицо.Вставить(Выборка.Сотрудник, Выборка.Физлицо);
	КонецЦикла;

	Для Каждого ТабличнаяЧасть Из Источник.Метаданные().ТабличныеЧасти Цикл
		
		Если ТабличнаяЧасть.Реквизиты.Найти("Сотрудник") = Неопределено ИЛИ ТабличнаяЧасть.Реквизиты.Найти("Физлицо") = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаписыватьТабличнуюЧасть = Ложь;
		
		Для Каждого СтрокаТабличнойЧасти Из Источник[ТабличнаяЧасть.Имя] Цикл
			
			Если СтрокаТабличнойЧасти.Сотрудник <> ПустойСотрудник И СтрокаТабличнойЧасти.Физлицо <> СоответствиеСотрудникФизлицо.Получить(СтрокаТабличнойЧасти.Сотрудник) Тогда
				СтрокаТабличнойЧасти.Физлицо = СоответствиеСотрудникФизлицо.Получить(СтрокаТабличнойЧасти.Сотрудник);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры // ПередЗаписьюДокументаЗаполнитьФизЛицоВТабличнойЧасти()

// проставляет в строку табличной части или реквизит формы полученные данные по физлицу
Процедура ПроставитьДанныеСтроки(ДатаСобытия, ДанныеСтроки) Экспорт

	Запрос = Новый Запрос();
	
	Запрос.УстановитьПараметр("Сотрудник", ДанныеСтроки.Сотрудник);
	Запрос.УстановитьПараметр("парамДатаСобытия", ДатаСобытия);
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РаботникиОрганизации.Сотрудник КАК Сотрудник,
	|	РаботникиОрганизации.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	РаботникиОрганизации.Должность КАК Должность,
	|	РаботникиОрганизации.ИсчислятьОППВ КАК ИсчислятьОППВ
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(&парамДатаСобытия, Сотрудник = &Сотрудник) КАК РаботникиОрганизации";
	
	Запрос.Текст = ТекстЗапроса;
	НаборыДанных = Запрос.Выполнить().Выгрузить();
	
	Если НаборыДанных.Количество() = 0 Тогда
		// Если не нашли данных - ничего не делаем
		Возврат;
	КонецЕсли;
	
	// поле ПодразделениеОрганизации есть не во всех табличных частях
	Если ДанныеСтроки.Свойство("ПодразделениеОрганизации")  Тогда
		ДанныеСтроки.ПодразделениеОрганизации = НаборыДанных[0].ПодразделениеОрганизации;
	КонецЕсли;
	
	// поле Должность есть не во всех табличных частях
	Если ДанныеСтроки.Свойство("Должность") Тогда
		ДанныеСтроки.Должность = НаборыДанных[0].Должность;
	КонецЕсли;
	
	// поле Должность есть не во всех табличных частях
	Если ДанныеСтроки.Свойство("ИсчислятьОППВ") Тогда
		ДанныеСтроки.ИсчислятьОППВ = НаборыДанных[0].ИсчислятьОППВ;
	КонецЕсли;
	
КонецПроцедуры // ПроставитьДанныеСтроки

// Проставляет в строку табличной части документа по начислению зарплаты размер планового начисления.
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части документа, в которой выполнить подстановку;
//  Организация  - организация из шапки документа;
//  ДатаАктуальности - дата документа.
//
Процедура ПроставитьРазмерПлановогоНачисления(СтрокаТабличнойЧасти, Организация, ДатаАктуальности) Экспорт

	Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Сотрудник)
			ИЛИ НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ВидРасчета) Тогда
		// каких-то ключевых реквизитов нет, или размер уже указан, тогда его не меняем
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Сотрудник", СтрокаТабличнойЧасти.Сотрудник);

	Если СтрокаТабличнойЧасти.ВидРасчета.ЗачетОтработанногоВремени Тогда
		// вид расчета за отработанное время - в измерении регистра записана пустая ссылка
		Запрос.УстановитьПараметр("ВидРасчетаИзмерение", ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПустаяСсылка());
	Иначе
		Запрос.УстановитьПараметр("ВидРасчетаИзмерение", СтрокаТабличнойЧасти.ВидРасчета);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ВидРасчета", 		 СтрокаТабличнойЧасти.ВидРасчета);
	Запрос.УстановитьПараметр("ДатаАктуальности", 	 ?(ЗначениеЗаполнено(СтрокаТабличнойЧасти.ДатаНачала), СтрокаТабличнойЧасти.ДатаНачала, ДатаАктуальности));
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ОбщегоНазначенияБКВызовСервера.ГоловнаяОрганизацияДляУчетаЗарплаты(Организация));
	Запрос.УстановитьПараметр("Организация", 		 Организация);
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПлановыеНачисления.Размер
	|ИЗ
	|	(ВЫБРАТЬ
	|		МАКСИМУМ(ПлановыеНачисления.Период) КАК Период
	|	ИЗ
	|		РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций КАК ПлановыеНачисления
	|			ПО РаботникиОрганизации.Сотрудник = ПлановыеНачисления.Сотрудник
	|				И РаботникиОрганизации.Организация = ПлановыеНачисления.Организация
	|				И ПлановыеНачисления.Период <= РаботникиОрганизации.Период
	|				И ПлановыеНачисления.ВидРасчетаИзмерение = &ВидРасчетаИзмерение
	|				И ПлановыеНачисления.ВидРасчета = &ВидРасчета
	|	ГДЕ
	|		РаботникиОрганизации.Период <= &ДатаАктуальности
	|		И РаботникиОрганизации.Сотрудник = &Сотрудник
	|		И РаботникиОрганизации.Организация = &ГоловнаяОрганизация
	|		И РаботникиОрганизации.ОбособленноеПодразделение = &Организация) КАК ДатаПоследнегоНазначения
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций КАК ПлановыеНачисления
	|		ПО ДатаПоследнегоНазначения.Период = ПлановыеНачисления.Период
	|			И ПлановыеНачисления.Сотрудник = &Сотрудник
	|			И ПлановыеНачисления.Организация = &ГоловнаяОрганизация
	|			И ПлановыеНачисления.ВидРасчетаИзмерение = &ВидРасчетаИзмерение
	|			И ПлановыеНачисления.ВидРасчета = &ВидРасчета
	|";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		СтрокаТабличнойЧасти.Размер = Выборка.Размер;
	КонецЕсли;

КонецПроцедуры // ПроставитьПлановыйРазмерНачисления()

// Процедура ищет единственное физлицо среди работников предприятия или организаций по
//  началу его наименования
//
// Параметры
//  Режим 		- строка - определяет, среди кандидатов, работников предприятия или организаций производится поиск
//  Текст 		- строка - начало ФИО
//  Организация - СправочникСсылка.Организации - организация, 
//					среди работников которой производится поиск, необязательна,
//					если не указана - поиск ведется по всем организациям
//
// Возвращаемое значение
//  строка - наименование найденного кандидата, работника (предприятия или организаций), если он единственный
//
Функция ПодобратьФИОРаботникаКандидата(Режим, Знач Текст, Организация = "", ВозвращатьФизлицо = Ложь, ТолькоАктуальные = Истина) Экспорт

	ТекстАвтоПодбора = "";
	Запрос = Новый Запрос;
	
	// заменим спецсимволы
	Текст = СтрЗаменить(Текст, "~", "~~");
	Текст = СтрЗаменить(Текст, "%", "~%");
	Текст = СтрЗаменить(Текст, "_", "~_");
	Текст = СтрЗаменить(Текст, "[", "~[");
	Текст = СтрЗаменить(Текст, "-", "~-");
	Текст = Текст+"%";
	
	Запрос.УстановитьПараметр("Текст", Текст);
	Запрос.УстановитьПараметр("ПустаяОрганизация", Справочники.Организации.ПустаяСсылка());
	
	Если Режим = "РаботникиОрганизации" Тогда
		
		ТекстУсловияОрганизации = "";
		Если ЗначениеЗаполнено(Организация) Тогда
			ТекстУсловияОрганизации = " И Организация = &парамГоловнаяОрганизация";
			Запрос.УстановитьПараметр("парамГоловнаяОрганизация", ОбщегоНазначенияБКВызовСервера.ГоловнаяОрганизацияДляУчетаЗарплаты(Организация));
		КонецЕсли;
		
		ТекстУсловияНаАктуальность = "";
		Если ТолькоАктуальные Тогда
			ТекстУсловияНаАктуальность = " И РаботникиОрганизации.Сотрудник.Актуальность";
		КонецЕсли;
		
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 2 РАЗРЕШЕННЫЕ
				|	РаботникиОрганизации.Сотрудник.Наименование КАК Наименование,
				|	РаботникиОрганизации.Сотрудник.ФизЛицо.Наименование КАК ФизЛицоНаименование
				|ИЗ
				|	РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
				|
				|ГДЕ РаботникиОрганизации.Сотрудник.Наименование ПОДОБНО &Текст СПЕЦСИМВОЛ ""~""" + ТекстУсловияОрганизации + ТекстУсловияНаАктуальность;
				
	ИначеЕсли Режим = "СотрудникиОрганизацииСправочник" Тогда
		
		Запрос.УстановитьПараметр("НеУчитыватьАктуальность", Истина);
		Запрос.УстановитьПараметр("НеОтбиратьПоОрганизации", ?(Организация = "", Ложь, Истина));
		Запрос.УстановитьПараметр("ГоловнаяОрганизация", ОбщегоНазначенияБКВызовСервера.ГоловнаяОрганизацияДляУчетаЗарплаты(Организация));
		
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 2
			|   Сотрудники.Наименование КАК Наименование
			|ИЗ
			|   Справочник.СотрудникиОрганизаций КАК Сотрудники
			|       ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК Работники
			|       ПО Сотрудники.Ссылка = Работники.Сотрудник
			|ГДЕ
			|   Сотрудники.Наименование ПОДОБНО &Текст СПЕЦСИМВОЛ ""~""
			|   И (&НеОтбиратьПоОрганизации
			|           ИЛИ Сотрудники.Организация = &ГоловнаяОрганизация)
			|   И (&НеУчитыватьАктуальность
			|           ИЛИ Сотрудники.Актуальность)
			|   И Работники.Сотрудник ЕСТЬ NULL";
			
	ИначеЕсли Режим = "СотрудникиСправочник" Тогда
		
		Если ВозвращатьФизлицо Тогда
			Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 2
			|	СотрудникиОрганизаций.Физлицо.Наименование КАК ФизлицоНаименование
			|ИЗ
			|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
			|ГДЕ
			|	СотрудникиОрганизаций.Наименование ПОДОБНО &Текст СПЕЦСИМВОЛ ""~""
			|	И СотрудникиОрганизаций.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
			|	И СотрудникиОрганизаций.Актуальность";
			
		Иначе
			Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 2
			|	СотрудникиОрганизаций.Наименование КАК Наименование
			|ИЗ
			|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
			|ГДЕ
			|	СотрудникиОрганизаций.Наименование ПОДОБНО &Текст СПЕЦСИМВОЛ ""~""
			|	И СотрудникиОрганизаций.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
			|	И СотрудникиОрганизаций.Актуальность";
			
		КонецЕсли;

	Иначе
		Возврат ТекстАвтоПодбора;			
	КонецЕсли;
				
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() = 1 Тогда
		Выборка.Следующий();
		Если ВозвращатьФизлицо Тогда
			ТекстАвтоПодбора = Выборка.ФизЛицоНаименование;
		Иначе 
			ТекстАвтоПодбора = Выборка.Наименование;
		КонецЕсли;
	КонецЕсли;

	Возврат ТекстАвтоПодбора;

КонецФункции // ПодобратьФИОРаботникаКандидата()

// Процедура ищет физлиц среди работников предприятия или организаций по
//  началу его наименования
//
// Параметры
//  Режим 		- строка - определяет, среди кандидатов, работников предприятия или организаций производится поиск
//  Текст 		- строка - начало ФИО
//  НачальноеЗначение	- СправочникСсылка.ФизическиеЛица - значение по умолчанию
//  Организация - СправочникСсылка.Организации - организация, 
//					среди работников которой производится поиск, необязательна,
//					если не указана - поиск ведется по всем организациям
//
// Возвращаемое значение
//  СправочникСсылка.ФизическиеЛица - возвращается значение по умолчанию, если 
//									не найдено ни одного подходящего кандидата, работника (предприятия или организаций)
//  СписокЗначений - список подходящих физлиц, если их найдено не более 50
//  Неопределено - если найдено более 50 подходящих физлиц
//
Функция ПодобратьСписокРаботниковКандидатов(Режим, Знач Текст, НачальноеЗначение, Организация = "", ВозвращатьФизлицо = Ложь, ТолькоАктуальные = Истина) Экспорт

	Если ПустаяСтрока(Текст) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	// заменим спецсимволы
	Текст = СтрЗаменить(Текст, "~", "~~");
	Текст = СтрЗаменить(Текст, "%", "~%");
	Текст = СтрЗаменить(Текст, "_", "~_");
	Текст = СтрЗаменить(Текст, "[", "~[");
	Текст = СтрЗаменить(Текст, "-", "~-");
	Текст = Текст + "%";
	
	Запрос.УстановитьПараметр("Текст", Текст);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ПустаяОрганизация", Справочники.Организации.ПустаяСсылка());

	Если Режим = "РаботникиОрганизации" Тогда
		
		ТекстУсловияОрганизации = "";
		
		Если ЗначениеЗаполнено(Организация) Тогда
			ТекстУсловияОрганизации = " И Организация = &ГоловнаяОрганизация";
			Запрос.УстановитьПараметр("ГоловнаяОрганизация", ОбщегоНазначенияБКВызовСервера.ГоловнаяОрганизацияДляУчетаЗарплаты(Организация));
		КонецЕсли;
		
		ТекстУсловияНаАктуальность = "";
		Если ТолькоАктуальные Тогда
			ТекстУсловияНаАктуальность = " И РаботникиОрганизации.Сотрудник.Актуальность";
		КонецЕсли;
				
		Если ВозвращатьФизлицо Тогда
			
			Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 51
			|	СписокСотрудников.Физлицо,
			|	СписокСотрудников.ФизлицоНаименование,
			|	ВЫБОР
			|		КОГДА СписокСотрудников.СотрудникНаименование ПОДОБНО &Текст СПЕЦСИМВОЛ ""~""
			|			ТОГДА NULL
			|		ИНАЧЕ СписокСотрудников.СотрудникКод
			|	КОНЕЦ КАК Код,
			|	ВЫБОР
			|		КОГДА СписокСотрудников.СотрудникНаименование ПОДОБНО &Текст СПЕЦСИМВОЛ ""~""
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК НайденоПоНаименованию
			|ИЗ
			|	(ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 51
			|		РаботникиОрганизации.Сотрудник.Физлицо КАК Физлицо,
			|		РаботникиОрганизации.Сотрудник.Физлицо.Наименование КАК ФизлицоНаименование,
			|		РаботникиОрганизации.Сотрудник.Код КАК СотрудникКод,
			|		РаботникиОрганизации.Сотрудник.Наименование КАК СотрудникНаименование
			|	ИЗ
			|		РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
			|	ГДЕ
			|		РаботникиОрганизации.Сотрудник.Наименование ПОДОБНО &Текст СПЕЦСИМВОЛ ""~""" + ТекстУсловияОрганизации + ТекстУсловияНаАктуальность + "
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 51
			|		РаботникиОрганизации.Сотрудник.Физлицо,
			|		РаботникиОрганизации.Сотрудник.Физлицо.Наименование,
			|		РаботникиОрганизации.Сотрудник.Код,
			|		РаботникиОрганизации.Сотрудник.Наименование
			|	ИЗ
			|		РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
			|	ГДЕ
			|		РаботникиОрганизации.Сотрудник.Код ПОДОБНО &Текст СПЕЦСИМВОЛ ""~""" + ТекстУсловияОрганизации + ТекстУсловияНаАктуальность + ") КАК СписокСотрудников";
			
			
		Иначе
			
			Запрос.УстановитьПараметр("ДатаАктуальности", ОбщегоНазначенияБК.ПолучитьРабочуюДату());
			Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
			
			Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 51
			|	СписокРаботников.Сотрудник,
			|	ВЫБОР
			|		КОГДА СписокРаботников.СотрудникНаименование ПОДОБНО &Текст СПЕЦСИМВОЛ ""~""
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК НайденоПоНаименованию
			|ПОМЕСТИТЬ ВТ_СписокРаботников
			|ИЗ
			|	(ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 51
			|		РаботникиОрганизации.Сотрудник КАК Сотрудник,
			|		РаботникиОрганизации.Сотрудник.Наименование КАК СотрудникНаименование
			|	ИЗ
			|		РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
			|	ГДЕ
			|		РаботникиОрганизации.Сотрудник.Наименование ПОДОБНО &Текст СПЕЦСИМВОЛ ""~""" + ТекстУсловияОрганизации + ТекстУсловияНаАктуальность + "
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 51
			|		РаботникиОрганизации.Сотрудник,
			|		РаботникиОрганизации.Сотрудник.Наименование
			|	ИЗ
			|		РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
			|	ГДЕ
			|		РаботникиОрганизации.Сотрудник.Код ПОДОБНО &Текст СПЕЦСИМВОЛ ""~""" + ТекстУсловияОрганизации + ТекстУсловияНаАктуальность + ") КАК СписокРаботников";
			Запрос.Выполнить();
			
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	РаботникиСрезПоследних.Сотрудник КАК Ссылка,
			|	ВЫБОР
			|		КОГДА РаботникиСрезПоследних.Сотрудник.Актуальность
			|			ТОГДА ВЫБОР
			|				КОГДА РаботникиСрезПоследних.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
			|					ТОГДА ""(ув.) "" + РаботникиСрезПоследних.Сотрудник.Наименование
			|				ИНАЧЕ РаботникиСрезПоследних.Сотрудник.Наименование
			|			КОНЕЦ
			|		ИНАЧЕ ""(не актуален) "" + РаботникиСрезПоследних.Сотрудник.Наименование
			|	КОНЕЦ КАК Наименование,
			|	РаботникиСрезПоследних.Сотрудник.Код КАК Код,
			|	ВТ_СписокРаботников.НайденоПоНаименованию
			|ИЗ
			|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(
			|			&ДатаАктуальности,
			|			Сотрудник В
			|				(ВЫБРАТЬ
			|					ВТ_СписокРаботников.Сотрудник
			|				ИЗ
			|					ВТ_СписокРаботников)) КАК РаботникиСрезПоследних
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СписокРаботников КАК ВТ_СписокРаботников
			|		ПО РаботникиСрезПоследних.Сотрудник = ВТ_СписокРаботников.Сотрудник
			|
			|УПОРЯДОЧИТЬ ПО
			|	Наименование УБЫВ";
			
		КонецЕсли;
		
	ИначеЕсли Режим = "СотрудникиОрганизацииСправочник" Тогда		
		
		Запрос.УстановитьПараметр("ГоловнаяОрганизация", ОбщегоНазначенияБКВызовСервера.ГоловнаяОрганизацияДляУчетаЗарплаты(Организация));
		Запрос.УстановитьПараметр("НеУчитыватьАктуальность", Истина);
		Запрос.УстановитьПараметр("НеОтбиратьПоОрганизации", ?(Организация = "", Ложь, Истина));
		
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 51
					   |	Сотрудники.Код КАК Код,
					   |	ВЫБОР
					   |		КОГДА Сотрудники.Актуальность
					   |			ТОГДА Сотрудники.Наименование
					   |		ИНАЧЕ ""(не актуален) "" + Сотрудники.Наименование
					   |	КОНЕЦ КАК Наименование,
					   |	Сотрудники.Ссылка КАК Ссылка,
					   |	ИСТИНА КАК НайденоПоНаименованию
					   |ИЗ
					   |	Справочник.СотрудникиОрганизаций КАК Сотрудники
					   |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК Работники
					   |		ПО Сотрудники.Ссылка = Работники.Сотрудник
					   |ГДЕ
					   |	Сотрудники.Наименование ПОДОБНО &Текст СПЕЦСИМВОЛ ""~""
					   |	И Работники.Сотрудник ЕСТЬ NULL 
					   |	И (&НеОтбиратьПоОрганизации
					   |			ИЛИ Сотрудники.Организация = &ГоловнаяОрганизация)
					   |	И (&НеУчитыватьАктуальность
					   |			ИЛИ Сотрудники.Актуальность)
					   |
					   |ОБЪЕДИНИТЬ
					   |
					   |ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 51
					   |	Сотрудники.Код,
					   |	ВЫБОР
					   |		КОГДА Сотрудники.Актуальность
					   |			ТОГДА Сотрудники.Наименование
					   |		ИНАЧЕ ""(не актуален) "" + Сотрудники.Наименование
					   |	КОНЕЦ,
					   |	Сотрудники.Ссылка,
					   |	ЛОЖЬ
					   |ИЗ
					   |	Справочник.СотрудникиОрганизаций КАК Сотрудники
					   |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК Работники
					   |		ПО Сотрудники.Ссылка = Работники.Сотрудник
					   |ГДЕ
					   |	Сотрудники.Код ПОДОБНО &Текст СПЕЦСИМВОЛ ""~""
					   |	И Работники.Сотрудник ЕСТЬ NULL 
					   |	И (&НеОтбиратьПоОрганизации
					   |			ИЛИ Сотрудники.Организация = &ГоловнаяОрганизация)
					   |	И (&НеУчитыватьАктуальность
					   |			ИЛИ Сотрудники.Актуальность)";
					   
	ИначеЕсли Режим = "СотрудникиСправочник" Тогда 
		
		Если ВозвращатьФизлицо Тогда
			Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 51
			|	СписокСотрудников.Физлицо,
			|	СписокСотрудников.ФизлицоНаименование,
			|	СписокСотрудников.Код,
			|	ВЫБОР
			|		КОГДА СписокСотрудников.Наименование ПОДОБНО &Текст СПЕЦСИМВОЛ ""~""
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК НайденоПоНаименованию
			|ИЗ
			|	(ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 51
			|		СотрудникиОрганизаций.Физлицо КАК Физлицо,
			|		СотрудникиОрганизаций.Физлицо.Наименование КАК ФизлицоНаименование,
			|		СотрудникиОрганизаций.Код КАК Код,
			|		СотрудникиОрганизаций.Наименование КАК Наименование
			|	ИЗ
			|		Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
			|	ГДЕ
			|		СотрудникиОрганизаций.Наименование ПОДОБНО &Текст СПЕЦСИМВОЛ ""~""
			|		И СотрудникиОрганизаций.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
			|		И СотрудникиОрганизаций.Актуальность
			|	
			|	ОБЪЕДИНИТЬ
			|	
			|	ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 51
			|		СотрудникиОрганизаций.Физлицо,
			|		СотрудникиОрганизаций.Физлицо.Наименование,
			|		СотрудникиОрганизаций.Код,
			|		СотрудникиОрганизаций.Наименование
			|	ИЗ
			|		Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
			|	ГДЕ
			|		СотрудникиОрганизаций.Код ПОДОБНО &Текст СПЕЦСИМВОЛ ""~""
			|		И СотрудникиОрганизаций.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
			|		И СотрудникиОрганизаций.Актуальность) КАК СписокСотрудников";
			
		Иначе
			Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 51
			|	СписокСотрудников.Ссылка,
			|	СписокСотрудников.Наименование,
			|	СписокСотрудников.Код,
			|	ВЫБОР
			|		КОГДА СписокСотрудников.Наименование ПОДОБНО &Текст СПЕЦСИМВОЛ ""~""
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК НайденоПоНаименованию
			|ИЗ
			|	(ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 51
			|		СотрудникиОрганизаций.Ссылка КАК Ссылка,
			|		СотрудникиОрганизаций.Наименование КАК Наименование,
			|		СотрудникиОрганизаций.Код КАК Код
			|	ИЗ
			|		Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
			|	ГДЕ
			|		СотрудникиОрганизаций.Наименование ПОДОБНО &Текст СПЕЦСИМВОЛ ""~""
			|		И СотрудникиОрганизаций.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
			|		И СотрудникиОрганизаций.Актуальность
			|	
			|	ОБЪЕДИНИТЬ
			|	
			|	ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 51
			|		СотрудникиОрганизаций.Ссылка,
			|		СотрудникиОрганизаций.Наименование,
			|		СотрудникиОрганизаций.Код
			|	ИЗ
			|		Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
			|	ГДЕ
			|		СотрудникиОрганизаций.Код ПОДОБНО &Текст СПЕЦСИМВОЛ ""~""
			|		И СотрудникиОрганизаций.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
			|		И СотрудникиОрганизаций.Актуальность) КАК СписокСотрудников";
			
		КонецЕсли;

	Иначе
		Возврат Новый СписокЗначений;
	КонецЕсли;
						  
	Выборка = Запрос.Выполнить().Выбрать();
	
	Количество = Выборка.Количество();
	
	Если Количество = 0 Тогда
		Сообщить(НСтр("ru = 'В поле ввода неверно задано значение поиска сотрудника!'"));
		Возврат НачальноеЗначение;
	ИначеЕсли Количество < 51 Тогда
		Значение = Новый СписокЗначений;
		Пока Выборка.Следующий() Цикл
			Если ВозвращатьФизлицо Тогда
				Значение.Добавить(Выборка.Физлицо, ?(Выборка.НайденоПоНаименованию,Выборка.ФизлицоНаименование, Выборка.Код + " (" + Выборка.ФизлицоНаименование + ")"));
			Иначе
				Значение.Добавить(Выборка.Ссылка, ?(Выборка.НайденоПоНаименованию,Выборка.Наименование, Выборка.Код + " (" + Выборка.Наименование + ")"));
			КонецЕсли;
		КонецЦикла;
		Возврат Значение;
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции // ПодобратьСписокРаботниковКандидатов()

// Увеличивает номер в переданной строке на 1
//
// Параметры
//  ПоследнийНомер - строка - представляет собой номер (документа, табельный и т.п.)
//
// Возвращаемое значение:
//  строка  - следующий по порядку номер
//
Функция ПолучитьСледующийНомер(ПоследнийНомер) Экспорт 

	ДлинаНомера = СтрДлина(ПоследнийНомер);
	
	Если ДлинаНомера = 0 Тогда
		Возврат "0000000001"
	КонецЕсли;
	
	СчетчикСимв = ДлинаНомера;
	
	Пока СчетчикСимв > 0 Цикл
		Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Сред(ПоследнийНомер, СчетчикСимв, 1)) Тогда
			СчетчикСимв = СчетчикСимв - 1;
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если СчетчикСимв = ДлинаНомера Тогда
		НомерЧисловой = 1
	Иначе
		НомерЧисловой = Число(Сред(ПоследнийНомер, СчетчикСимв + 1));
	КонецЕсли;
	
	Если НомерЧисловой < Pow(10, ДлинаНомера - СчетчикСимв) - 1 Тогда
		СледующийНомер = НомерЧисловой + 1;
	Иначе
		СледующийНомер = НомерЧисловой;
	КонецЕсли;
	
	НовыйНомер = Лев(ПоследнийНомер,  СчетчикСимв) + Формат(СледующийНомер,"ЧЦ=" + (ДлинаНомера - СчетчикСимв) + "; ЧВН=; ЧГ=0");
	
	Возврат НовыйНомер
	
КонецФункции // ПолучитьСледующийНомер()

// Возвращает следующий по порядку табельный номер в пределах организации.
//
Функция ОпределитьМаксимальныйТабельныйНомер(Организация, Ссылка) Экспорт 

	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Ссылка",			  Ссылка);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	МАКСИМУМ(СотрудникиОрганизаций.Код) КАК Код
		|ИЗ
		|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
		|ГДЕ
		|	СотрудникиОрганизаций.Организация = &Организация
		|	И СотрудникиОрганизаций.Ссылка <> &Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() И ЗначениеЗаполнено(Выборка.Код) Тогда
		Возврат ПроцедурыУправленияПерсоналомСервер.ПолучитьСледующийНомер(СокрП(Выборка.Код));
	Иначе			
		Возврат "0000000001";
	КонецЕсли;
	
КонецФункции // ОпределитьМаксимальныйТабельныйНомер()

// Проверяет, заполнен ли регламентированный производственный календарь за переданный период 
//
// Параметры
//  ДатаНач, ДатаКон - дата, определяют проверяемый период
//  ВыводитьСообщения - булево - признак вывода сообщений в окно сообщений, по умолчанию - ложь
//
// Возвращаемое значение:
//   Булево  - если колендарь заполнен за весь период
//
Функция РегламентированныйКалендарьЗаполнен(ДатаНач, ДатаКон, ТекстСообщения = "") Экспорт 

	ПроизводственныйКалендарь = КалендарныеГрафики.ПроизводственныйКалендарьРеспубликиКазахстан();
	Если ПроизводственныйКалендарь = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТекстЛет = "ВЫБРАТЬ " + Символы.ПС + Символы.Таб + Формат(ДатаНач,"ДФ=yyyy") + " КАК Год" + Символы.ПС + "ПОМЕСТИТЬ ВТГодыПериода";
	ТекущийГод = Год(ДатаНач) + 1;
	Пока ТекущийГод <= Год(ДатаКон) Цикл
		ТекстЛет = ТекстЛет + Символы.ПС + Символы.Таб + "Объединить" + Символы.ПС + "ВЫБРАТЬ " + Символы.ПС + Символы.Таб + Формат(ТекущийГод,"ЧГ=0");
		ТекущийГод = ТекущийГод + 1;
	КонецЦикла;
	
	Запрос = Новый Запрос();
	
	ТекстЗапроса = ТекстЛет + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета() +
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДанныеПроизводственногоКалендаря.Дата) КАК КоличествоДней,
		|	ДанныеПроизводственногоКалендаря.Год КАК Год
		|ПОМЕСТИТЬ ВТДатыКалендаря
		|ИЗ
		|	РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
		|ГДЕ
		|	ДанныеПроизводственногоКалендаря.ПроизводственныйКалендарь = &ПроизводственныйКалендарь
		|	И ДанныеПроизводственногоКалендаря.Дата МЕЖДУ &ДатаС И &ДатаПо
		|
		|СГРУППИРОВАТЬ ПО
		|	ДанныеПроизводственногоКалендаря.Год
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ГодыПериода.Год,
		|	ДатыКалендаря.КоличествоДней
		|ИЗ
		|	ВТГодыПериода КАК ГодыПериода
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДатыКалендаря КАК ДатыКалендаря
		|		ПО ГодыПериода.Год = ДатыКалендаря.Год";
		
	Запрос.Текст = ТекстЗапроса;					   
	Запрос.УстановитьПараметр("ДатаПо", КонецДня(ДатаКон));
	Запрос.УстановитьПараметр("ДатаС", ДатаНач);
	Запрос.УстановитьПараметр("ПроизводственныйКалендарь", ПроизводственныйКалендарь);
	Выборка = Запрос.Выполнить().Выбрать();
	Сообщение = "";
	КалендарьЗаполнен = Истина;
	Пока Выборка.Следующий() Цикл
		Если Выборка.КоличествоДней = Null Тогда
			Сообщение = Сообщение + ?(КалендарьЗаполнен,"",", ") + Формат(Выборка.Год,"ЧГ=0");
			КалендарьЗаполнен = Ложь;
		КонецЕсли;
	КонецЦикла;
	Если НЕ КалендарьЗаполнен Тогда
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Перед выполнением операции заполните ""Регламентированный производственный календарь"" за %1 год(ы)!'"), Сообщение);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	Возврат КалендарьЗаполнен
	
КонецФункции // РегламентированныйКалендарьЗаполнен()

// Обработчик подписки на событие ЗаполнениеФизическихЛиц.
// Предназначена для заполнения физических лиц, 
// используемых при ограничении доступа к документам.
// Выполняется заполнение табличной части ФизическиеЛица.
	
Процедура ПередЗаписьюДокументаЗаполнитьТабличнуюЧастьФизтческиеЛицаПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	МетаданныеИсточника = Источник.Метаданные();

	Если МетаданныеИсточника.ТабличныеЧасти.Найти("ФизическиеЛица") = Неопределено Тогда
		Возврат;	
	КонецЕсли;	
		
	МассивСотрудников = Новый Массив;
	
	Для Каждого ТабличнаяЧасть Из Источник.Метаданные().ТабличныеЧасти Цикл
		
		Если ТабличнаяЧасть.Реквизиты.Найти("ФизЛицо") = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого СтрокаТабличнойЧасти Из Источник[ТабличнаяЧасть.Имя] Цикл
			
			МассивСотрудников.Добавить(СтрокаТабличнойЧасти.ФизЛицо);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокФизЛиц", МассивСотрудников);
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ФизическиеЛица.Ссылка КАК ФизЛицо
	|ИЗ
	|	Справочник.ФизическиеЛица КАК ФизическиеЛица
	|ГДЕ
	|	ФизическиеЛица.Ссылка В(&СписокФизЛиц)";
	
	
	Источник.ФизическиеЛица.Очистить();
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицуИзМассива(Источник.ФизическиеЛица, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ФизЛицо"), "ФизическоеЛицо");
	
КонецПроцедуры

// Функция определяет пол физлица по его отчеству. 
//
Функция УстановитьПол(ОтчествоРаботника) Экспорт

	Если НРег(Прав(ОтчествоРаботника, 2)) = "ич" Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ПолФизическихЛиц.Мужской");
	ИначеЕсли НРег(Прав(ОтчествоРаботника, 2)) = "на" Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ПолФизическихЛиц.Женский");
	КонецЕсли; 

	Возврат ПредопределенноеЗначение("Перечисление.ПолФизическихЛиц.ПустаяСсылка");
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

