///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2023, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Позволяет задать общие настройки подсистемы.
//
// Параметры:
//   Настройки - Структура:
//     * КартинкаИндикатораПроблем    - Картинка - которая будет выводиться в качестве
//                                      индикатора ошибки в колонке динамического списка
//                                      форм списков и на специальной панели форм объектов.
//     * ПояснениеИндикатораПроблем   - Строка - поясняющая строка к ошибке.
//     * ГиперссылкаИндикатораПроблем - Строка - текст гиперссылки, при нажатии на которую,
//                                      будет сформирован и открыт отчет с ошибками.
//
// Пример:
//   Настройки = Новый Структура;
//   Настройки.Вставить("КартинкаИндикатораПроблем",    БиблиотекаКартинок.Предупреждение);
//   Настройки.Вставить("ПояснениеИндикатораПроблем",   Неопределено);
//   Настройки.Вставить("ГиперссылкаИндикатораПроблем", Неопределено);
//
Процедура ПриОпределенииНастроек(Настройки) Экспорт
	
КонецПроцедуры

// Предназначена для подключения собственных правил проверки ведения учета.
//
// Параметры:
//   ГруппыПроверок - ТаблицаЗначений - таблица, в которую добавляются группы проверок:
//      * Наименование                 - Строка - наименование группы проверок.
//      * ИдентификаторГруппы          - Строка - строковый идентификатор группы проверок, например: 
//                                       "СистемныеПроверки", "ЗакрытиеМесяца", "ПроверкиНДС" и т.п.
//                                       Обязателен для заполнения.
//      * Идентификатор                - Строка - строковый идентификатор группы проверок. Обязателен для заполнения.
//                                       Для уникальности формат идентификатора следует выбирать следующим:
//                                       "<Название программного продукта>.<Идентификатор проверки>". 
//                                       Например: "СтандартныеПодсистемы.СистемныеПроверки".
//      * КонтекстПроверокВеденияУчета - ОпределяемыйТип.КонтекстПроверокВеденияУчета - значение, дополнительно
//                                       уточняющее принадлежность группы проверок ведения учета к определенной
//                                       категории.
//      * Комментарий                  - Строка - комментарий к группе проверок.
//
//   Проверки - ТаблицаЗначений - таблица, в которую добавляются проверки:
//      * ИдентификаторГруппы          - Строка - строковый идентификатор группы проверок, например: 
//                                                "СистемныеПроверки", "ЗакрытиеМесяца", "ПроверкиНДС" и т.п.
//                                                 Обязателен для заполнения.
//      * Наименование                 - Строка - наименование проверки, выводимое пользователю.
//      * Причины                      - Строка - описание возможных причин, которые приводят к возникновению проблемы.
//      * Рекомендация                 - Строка - рекомендация по решению возникшей проблемы.
//      * Идентификатор                - Строка - строковый идентификатор элемента. Обязателен для заполнения.
//                                                Формат идентификатора должен быть следующим:
//                                                <Название программного продукта>.<Идентификатор проверки>. Например:
//                                                СтандартныеПодсистемы.СистемныеПроверки.
//      * ДатаНачалаПроверки           - Дата - пороговая дата, обозначающая границу проверяемых объектов
//                                              (только для объектов с датой, например, документов). Объекты, дата 
//                                              которых меньше указанной, не следует проверять. По умолчанию 
//                                              не заполнено (т.е. проверять все).
//      * ЛимитПроблем                 - Число - количество проверяемых объектов. По умолчанию 1000. 
//                                               Если указан 0, то следует проверять все объекты.
//      * ОбработчикПроверки           - Строка - имя экспортной процедуры-обработчика серверного общего модуля
//                                                в виде ИмяМодуля.ИмяПроцедуры.
//      * ОбработчикПереходаКИсправлению - Строка - имя экспортной процедуры-обработчика клиентского общего модуля
//                                                  для перехода к исправлению проблемы в виде "ИмяМодуля.ИмяПроцедуры"
//                                                  или полное имя формы, которую следует открыть для исправления проблемы.
//                                                  Процедура-обработчик принимает на вход два параметра: 
//                                                    ПараметрыИсправления - Структура - со свойствами:
//                                                      ИдентификаторПроверки - Строка - строковый идентификатор проверки;
//                                                      ВидПроверки - СправочникСсылка.ВидыПроверок - вид проверки,
//                                                               дополнительно уточняющий область исправления проблемы;
//                                                    ДополнительныеПараметры - Неопределено - параметр не используется.
//                                                 При открытии формы в нее передаются такие же параметры, как свойства 
//                                                 указанной выше структуры ПараметрыИсправления.
//      * БезОбработчикаПроверки       - Булево - признак служебной проверки, которая не имеет процедуры-обработчика.
//      * ЗапрещеноИзменениеВажности   - Булево - если Истина, то администратор не сможет перенастраивать 
//                                                важность данной проверки.
//      * КонтекстПроверокВеденияУчета - ОпределяемыйТип.КонтекстПроверокВеденияУчета - значение, дополнительно 
//                                                уточняющее принадлежность проверки ведения учета к определенной группе 
//                                                или категории.
//      * УточнениеКонтекстаПроверокВеденияУчета - ОпределяемыйТип.УточнениеКонтекстаПроверокВеденияУчета - второе значение, 
//                                                 дополнительно уточняющее принадлежность проверки ведения учета 
//                                                 к определенной группе или категории.
//      * ДополнительныеПараметры      - ХранилищеЗначения - произвольная дополнительная информация о проверке
//                                                 для программного использования.
//      * Комментарий                  - Строка - текстовый комментарий к проверке.
//      * Отключена                    - Булево - если Истина, то проверка не будет выполняться в фоне по расписанию.
//      * ПоддерживаетВыборочнуюПроверку - Булево - если Истина, то проверку можно вызвать для проверки конкретного объекта.
//
// Пример:
//   1) Добавление проверки
//      Проверка = Проверки.Добавить();
//      Проверка.ИдентификаторГруппы = "СистемныеПроверки";
//      Проверка.Наименование        = НСтр("ru='Демо: Проверка заполнения комментария в документах ""Демо: Поступление товаров""'");
//      Проверка.Причины             = НСтр("ru='Не введен комментарий в документе.'");
//      Проверка.Рекомендация        = НСтр("ru='Ввести комментарий в документе.'");
//      Проверка.Идентификатор       = "ПроверитьКомментарийВПоступленииТоваров";
//      Проверка.ОбработчикПроверки  = "_ДемоСтандартныеПодсистемы.ПроверитьКомментарийВПоступленииТоваров";
//      Проверка.ДатаНачалаПроверки  = Дата('20140101000000');
//      Проверка.ЛимитПроблем        = 3;
//   2) Добавление группы проверок
//      ГруппаПроверок = ГруппыПроверок.Добавить();
//      ГруппаПроверок.Наименование                 = НСтр("ru='Системные проверки'");
//      ГруппаПроверок.Идентификатор                = "СтандартныеПодсистемы.СистемныеПроверки";
//      ГруппаПроверок.КонтекстПроверокВеденияУчета = "СистемныеПроверки";
//
Процедура ПриОпределенииПроверок(ГруппыПроверок, Проверки) Экспорт
	
	ГруппаПроверок = ГруппыПроверок.Добавить();
	ГруппаПроверок.Наименование					= НСтр("ru = 'Личные данные сотрудников'");
	ГруппаПроверок.ИдентификаторГруппы			= "КонтрольВеденияКадровогоУчета";
	ГруппаПроверок.Идентификатор				= "КонтрольЗаполненияЛичныхДанных";
	ГруппаПроверок.КонтекстПроверокВеденияУчета	= ГруппаПроверок.Идентификатор;
	
	Проверка = Проверки.Добавить();
	Проверка.ИдентификаторГруппы			= ГруппаПроверок.Идентификатор;
	Проверка.Наименование					= НСтр("ru = 'Дата рождения сотрудников, учет которых начался с начала прошлого месяца'");
	Проверка.Причины						= НСтр("ru = 'Не введена дата рождения (или введена «странная») дата рождения'");
	Проверка.Рекомендация					= НСтр("ru = 'Ввести (исправить) дату рождения'");
	Проверка.Идентификатор					= ГруппаПроверок.Идентификатор + ".ПроверкаЗаполненностиДатыРождения";
	Проверка.ОбработчикПроверки				= "РегистрыСведений.РаботникиОрганизаций.ПроверкаЗаполненностиДатыРождения";
	Проверка.КонтекстПроверокВеденияУчета	= ГруппаПроверок.КонтекстПроверокВеденияУчета;
	
	ГруппаПроверок = ГруппыПроверок.Добавить();
	ГруппаПроверок.Наименование					= НСтр("ru = 'Прочие доходы'");
	ГруппаПроверок.ИдентификаторГруппы			= "КонтрольРегистрацииПрочихДоходов";
	ГруппаПроверок.Идентификатор				= "КонтрольНаличияДокументовПрочихДоходов";
	ГруппаПроверок.КонтекстПроверокВеденияУчета	= ГруппаПроверок.Идентификатор;	
	
	Проверка = Проверки.Добавить();
	Проверка.ИдентификаторГруппы			= ГруппаПроверок.Идентификатор;
	Проверка.Наименование					= НСтр("ru = 'Проверка наличия документа регистрации облагаемых доходов за ИП'");
	Проверка.Причины						= НСтр("ru = 'Не введены или не проведены документы'");
	Проверка.Рекомендация					= НСтр("ru = 'Открыть список документов (Зарплата – Налогообложение – Регистрация прочих доходов в целях налогообложения), заполнить и провести документы ""Регистрация прочих доходов в целях налогообложения"" с видом операции ""Доходы ИП"" за каждый расчетный месяц.'");
	Проверка.Идентификатор					= ГруппаПроверок.Идентификатор + ".ПроверкаРегистрацияОблагаемыхДоходовЗаИП";
	Проверка.ОбработчикПроверки				= "Документы.НачислениеЗарплатыРаботникамОрганизаций.ПроверкаРегистрацияОблагаемыхДоходовЗаИП";
	Проверка.КонтекстПроверокВеденияУчета	= ГруппаПроверок.КонтекстПроверокВеденияУчета;
	Проверка.Отключена                      = Истина;
	
КонецПроцедуры

// Позволяет настроить положение индикатора о проблемах в формах объектов.
//
// Параметры:
//   ПараметрыГруппыИндикации - Структура - выходные параметры индикатора:
//     * ВыводитьСнизу     - Булево - если указать Истина, то группа индикатора будет выводиться самой последней 
//                           в форме или в конце указанной группе элементов ИмяРодителяГруппы.
//                           По умолчанию Ложь - группа выводится в начале указанной группе ИмяРодителяГруппы или 
//                           сразу под командной панелью формы объекта.
//     * ИмяРодителяГруппы - Строка - определяет имя группы элементов формы объекта, внутри которой должна 
//                           располагаться группа индикации.
//     * ДетальныйВид      - Булево - если Истина и у объекта найдена только одна проблема, то в карточке будет
//                           сразу выводиться ее описание вместо гиперссылки с переходом к списку проблем.
//                           Значение по умолчанию - Ложь.
//
//   ТипПроблемногоОбъекта - Тип - тип ссылки, для которой переопределяются параметры группы индикации.
//                     Например, Тип("ДокументСсылка.НачислениеЗарплаты").
//
Процедура ПриОпределенииПараметровГруппыИндикации(ПараметрыГруппыИндикации, Знач ТипПроблемногоОбъекта) Экспорт
	
КонецПроцедуры

// Позволяет настроить внешний вид и положение колонки-индикатора о проблемах в формах списков
// (с динамическим списком).
//
// Параметры:
//   ПараметрыКолонкиИндикации - Структура - выходные параметры индикатора:
//     * ВыводитьПоследней  - Булево - если указать Истина, то колонка-индикатор будет выводиться в конце.
//                            По умолчанию Ложь - колонка выводится в начале.
//     * ПоложениеЗаголовка - ПоложениеЗаголовкаЭлементаФормы - задает положение заголовка колонки-индикатора.
//     * Ширина             - Число - ширина колонки-индикатора.
//
//   ПолноеИмя - Строка - полное имя объекта основной таблицы динамического списка.
//                        Например, Метаданные.Документы.НачислениеЗарплаты.ПолноеИмя().
//
Процедура ПриОпределенииПараметровКолонкиИндикации(ПараметрыКолонкиИндикации, ПолноеИмя) Экспорт
	
КонецПроцедуры

// Позволяет дозаполнить информацию о проблеме перед ее регистрацией.
// В частности, можно заполнить дополнительные значения для ограничения доступа на уровне записей 
// к списку проблем ведения учета.
//
// Параметры:
//   Проблема - Структура - сформированная алгоритмом проверки информация о проблеме:
//     * ПроблемныйОбъект         - ЛюбаяСсылка - объект, по поводу которого записывается проблема.
//                                                Либо ссылка на элемент справочника ИдентификаторыОбъектовМетаданных
//     * ПравилоПроверки          - СправочникСсылка.ПравилаПроверкиУчета - ссылка на выполненную проверку.
//     * ВидПроверки              - СправочникСсылка.ВидыПроверок - ссылка на вид проверки, к которому 
//                                  относится выполненная проверка.
//     * КлючУникальности         - УникальныйИдентификатор - ключ уникальности проблемы.
//     * УточнениеПроблемы        - Строка - строка-уточнение найденной проблемы.
//     * ВажностьПроблемы         - ПеречислениеСсылка.ВажностьПроблемыУчета - важность проблемы учета
//                                  Информация, Предупреждение, Ошибка, ПолезныйСовет и ВажнаяИнформация.
//     * Ответственный            - СправочникСсылка.Пользователи - заполнен если есть возможность
//                                  идентифицировать ответственного в проблемном объекте.
//     * ИгнорироватьПроблему     - Булево - флаг игнорирования проблемы. Если имеет значение "Истина",
//                                  запись о проблеме игнорируется подсистемой.
//     * ДополнительнаяИнформация - ХранилищеЗначения - служебное свойство с дополнительными
//                                  сведениями, связанными с выявленной проблемой.
//     * Выявлено                 - Дата - серверное время идентификации проблемы.
//
//   СсылкаНаОбъект  - ЛюбаяСсылка - ссылка на объект-источник значения для добавляемых
//                     дополнительных измерений.
//   Реквизиты       - КоллекцияОбъектовМетаданных - коллекция, содержащая реквизиты объекта-
//                     источника проблем.
//
Процедура ПередЗаписьюПроблемы(Проблема, СсылкаНаОбъект, Реквизиты) Экспорт
	
КонецПроцедуры

#Область УстаревшиеПроцедурыИФункции

// Устарела: Следует использовать функцию ПриОпределенииПроверок.
// Предназначена для подключения собственных правил проверки ведения учета.
//
// Параметры:
//   ГруппыПроверок - ТаблицаЗначений - таблица, в которую добавляются группы проверок:
//      * Наименование  - Строка - наименование группы проверок, например: "Системные проверки".
//      * Идентификатор - Строка - строковый идентификатор группы, например: "СистемныеПроверки".
//
//   Проверки - ТаблицаЗначений - таблица, в которую добавляются проверки:
//      * Наименование                   - Строка - наименование элемента проверки. Обязательно для заполнения.
//      * Причины                        - Строка - возможные причины, которые привели к возникновению проблемы.
//                                                  Выводятся в отчете о проблемах. Необязательно для заполнения.
//      * Рекомендация                   - Строка - рекомендация по решению возникшей проблемы.
//                                                  Выводятся в отчете о проблемах. Необязательно для заполнения.
//      * Идентификатор                  - Строка - строковый идентификатор проверки. Обязателен для заполнения.
//      * ИдентификаторРодителя          - Строка - строковый идентификатор группы проверок, например: "СистемныеПроверки".
//                                                  Обязательно для заполнения.
//      * ДатаНачалаПроверки             - Дата - пороговая дата, обозначающая границу проверяемых
//                                         объектов (только для объектов с датой). Объекты, дата которых меньше
//                                         указанной, не следует проверять. По умолчанию не заполнено (т.е. проверять все).
//      * ЛимитПроблем                   - Число - максимальное количество проверяемых объектов.
//                                         По умолчанию 0 - следует проверить все объекты.
//      * ОбработчикПроверки             - Строка - имя экспортной процедуры-обработчика проверки в серверном общем модуле.
//                                         Предназначен для поиска и регистрации проблем ведения учета.
//                                         Параметры обработчика проверки:
//                                           * Проверка - СправочникСсылка.ПравилаПроверкиУчета - исполняемая проверка.
//                                           * ПараметрыПроверки - Структура - параметры проверки, которую необходимо выполнить.
//                                                                             Подробнее см. в документации.
//      * ОбработчикПереходаКИсправлению - Строка - имя экспортной процедуры-обработчика исправления проблемы 
//                                         в клиентском общем модуле или полное имя формы, которая будет открыта для
//                                         исправления проблемы. Параметры обработчика исправления проблемы или формы:
//                                          * ИдентификаторПроверки - Строка - идентификатор проверки, 
//                                                                    которая выявила проблему.
//                                          * ВидПроверки - СправочникСсылка.ВидыПроверок - вид проверки 
//                                                          с дополнительной информацией о проблеме.
//      * ДополнительныеПараметры        - ХранилищеЗначения - дополнительная информация по проверке.
//
// Пример:
//   Проверка = Проверки.Добавить();
//   Проверка.ИдентификаторГруппы = "СистемныеПроверки";
//   Проверка.Наименование        = НСтр("ru='Демо: Проверка заполнения комментария в документах ""Демо: Поступление товаров""'");
//   Проверка.Причины             = НСтр("ru='Не введен комментарий в документе.'");
//   Проверка.Рекомендация        = НСтр("ru='Ввести комментарий в документе.'");
//   Проверка.Идентификатор       = "ПроверитьКомментарийВПоступленииТоваров";
//   Проверка.ОбработчикПроверки  = "_ДемоСтандартныеПодсистемы.ПроверитьКомментарийВПоступленииТоваров";
//   Проверка.ДатаНачалаПроверки  = Дата('20140101000000');
//   Проверка.ЛимитПроблем        = 3;
//
Процедура ПриОпределенииПрикладныхПроверок(ГруппыПроверок, Проверки) Экспорт
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти 

#Область СлужебныйПрограммныйИнтерфейс 

// После записи очищает список проблем у первой из проблем делает уточнение "Ожидает проверки"
//
Процедура ПослеЗаписиНаСервере(Форма, ТекущийОбъект, ПараметрыЗаписи) Экспорт
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.КонтрольВеденияУчета") Тогда
		Возврат;
	КонецЕсли;
	
	ПеревестиВРежимОжиданияПроверки = Истина;
	
	МетаданныеОбъекта = ТекущийОбъект.Метаданные();
	Если ОбщегоНазначения.ЭтоДокумент(МетаданныеОбъекта) Тогда
		
		Если МетаданныеОбъекта.Проведение <> Метаданные.СвойстваОбъектов.Проведение.Запретить Тогда
			
			Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
				ПеревестиВРежимОжиданияПроверки = Ложь;
			ИначеЕсли Не ТекущийОбъект.Проведен И ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Запись Тогда
				ПеревестиВРежимОжиданияПроверки = Ложь;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПеревестиВРежимОжиданияПроверки И НЕ ПараметрыЗаписи.Свойство("ПоляДополнительнойИнформации") Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		Набор = РегистрыСведений["РезультатыПроверкиУчета"].СоздатьНаборЗаписей();
		Набор.Отбор.ПроблемныйОбъект.Установить(ТекущийОбъект.Ссылка);
		Набор.Отбор.ИгнорироватьПроблему.Установить(Ложь);
		Набор.Прочитать();
		
		Если Набор.Количество() > 0 Тогда
			
			ТаблицаНабора = Набор.Выгрузить();
			ТаблицаНабора[0].УточнениеПроблемы = НСтр("ru='Ожидает проверки ...'", ОбщегоНазначения.КодОсновногоЯзыка());
			ТаблицаНабора[0].ВажностьПроблемы = Перечисления["ВажностьПроблемыУчета"].Информация;
			
			Набор.Загрузить(ТаблицаНабора.Скопировать(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТаблицаНабора[0])));
			Набор.Записать();
			
			ПриЧтенииНаСервере(Форма, ТекущийОбъект);
			
		КонецЕсли;
		
		УстановитьПривилегированныйРежим(Ложь);  
		
	Иначе
		
		ДополнительныеПараметры = Новый Структура("ПоляДополнительнойИнформации, ПеревестиВРежимОжиданияПроверки", ?(ПараметрыЗаписи.Свойство("ПоляДополнительнойИнформации"), ПараметрыЗаписи.ПоляДополнительнойИнформации, Неопределено), ПеревестиВРежимОжиданияПроверки);		
		ПриЧтенииНаСервере(Форма, ТекущийОбъект, ДополнительныеПараметры);	
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЧтенииНаСервере(Форма, ТекущийОбъект, ДополнительныеПараметры=Неопределено) Экспорт
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.КонтрольВеденияУчета") Тогда
		Возврат;
	КонецЕсли;
	
	ПоляДополнительнойИнформации = ?(НЕ ДополнительныеПараметры = Неопределено И ДополнительныеПараметры.Свойство("ПоляДополнительнойИнформации"),ДополнительныеПараметры.ПоляДополнительнойИнформации,Неопределено);
	ПеревестиВРежимОжиданияПроверки = НЕ ДополнительныеПараметры = Неопределено И ДополнительныеПараметры.Свойство("ПеревестиВРежимОжиданияПроверки") И ДополнительныеПараметры.ПеревестиВРежимОжиданияПроверки;
	
	СсылкаНаОбъект = ТекущийОбъект.Ссылка;
	ТаблицаПроблем = ПроблемыОбъекта(СсылкаНаОбъект, ПоляДополнительнойИнформации);
	
	Если НЕ ПоляДополнительнойИнформации = Неопределено И ТаблицаПроблем.Количество() = 0 Тогда
		Если НЕ ПеревестиВРежимОжиданияПроверки Тогда	
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ТаблицаПроблем.Количество() > 0 Тогда 
		
		МодульКонтрольВеденияУчета = ОбщегоНазначения.ОбщийМодуль("КонтрольВеденияУчета");
		
		МодульКонтрольВеденияУчета.ПриЧтенииНаСервере(Форма, ТекущийОбъект);
		
		Если Не МодульКонтрольВеденияУчета.ПодсистемаДоступна() Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ЭлементыУправляемойФормы = Форма.Элементы;
	
	КлючУникальностиИмен = ОбщегоНазначения.КонтрольнаяСуммаСтрокой(СсылкаНаОбъект.Метаданные().ПолноеИмя()
		+ ПолучитьРазделительПути() + Форма.ИмяФормы);
	
	ДекорацияГруппа = ЭлементыУправляемойФормы.Найти("ГруппаИндикатораОшибки_" + КлючУникальностиИмен);	
		
	Если ДекорацияГруппа <> Неопределено Тогда 
		
		Если ПеревестиВРежимОжиданияПроверки И ТаблицаПроблем.Количество() = 0 Тогда
			ЭлементыУправляемойФормы.Удалить(ДекорацияГруппа);
			Возврат;
		КонецЕсли;
		
		Пока ДекорацияГруппа.ПодчиненныеЭлементы.Количество() > 0 Цикл
			ЭлементыУправляемойФормы.Удалить(ДекорацияГруппа.ПодчиненныеЭлементы[0]);
		КонецЦикла;
		
		ДобавляемыеРеквизитыФормы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(
			Новый РеквизитФормы("ОбработчикиИсправленияПроблем", Новый ОписаниеТипов()));
		
			МассивИменРеквизитовФормы = Новый Массив;
			
			ПутьКДанным = "";
			
			Если ЗначениеЗаполнено(ПутьКДанным) Тогда
				МассивРеквизитовФормы = Форма.ПолучитьРеквизиты(ПутьКДанным);
			Иначе
				МассивРеквизитовФормы = Форма.ПолучитьРеквизиты();
			КонецЕсли;
			
			Для Каждого Реквизит Из МассивРеквизитовФормы Цикл
				МассивИменРеквизитовФормы.Добавить(?(ЗначениеЗаполнено(ПутьКДанным), ПутьКДанным + ".", "") + Реквизит.Имя);	
			КонецЦикла;
				
		ИзменитьРеквизитыФормы(Форма, ДобавляемыеРеквизитыФормы, МассивИменРеквизитовФормы);
		
		ОбработчикиИсправленияПроблем = Новый Соответствие;
		
		МодульКонтрольВеденияУчетаСлужебныйПовтИсп = ОбщегоНазначения.ОбщийМодуль("КонтрольВеденияУчетаСлужебныйПовтИсп");
		ПроверкиВеденияУчета = МодульКонтрольВеденияУчетаСлужебныйПовтИсп.ПроверкиВеденияУчета();
		
		Для НомерПроблемы = 1 По ТаблицаПроблем.Количество() Цикл
			
			ИменаЭлементовФормыПоПроблемы = Новый Структура;
			ИменаЭлементовФормыПоПроблемы.Вставить("ИмяГруппы", ДекорацияГруппа.Имя + "_" + НомерПроблемы);
			ИменаЭлементовФормыПоПроблемы.Вставить("ИмяКартинки", ИменаЭлементовФормыПоПроблемы.ИмяГруппы + "_Картинка");
			ИменаЭлементовФормыПоПроблемы.Вставить("ИмяНадписи", ИменаЭлементовФормыПоПроблемы.ИмяГруппы + "_Надпись");
			
			Если НомерПроблемы < 3 Или ТаблицаПроблем.Количество() < 4 Тогда
				
				СтрокаПроблемы = ТаблицаПроблем[НомерПроблемы - 1];
				
				СтруктураПоиска = Новый Структура("Идентификатор", СтрокаПроблемы.ПравилоПроверкиИдентификатор);
				СтрокиПроверки = ПроверкиВеденияУчета.Проверки.НайтиСтроки(СтруктураПоиска);
				Если СтрокиПроверки.Количество() > 0 Тогда
					
					ОбработчикПереходаКИсправлению = СтрокиПроверки[0].ОбработчикПереходаКИсправлению;
					
					СтруктураРасшифровки = Новый Структура;
					
					СтруктураРасшифровки.Вставить("Назначение",                     "ИсправитьПроблемы");
					СтруктураРасшифровки.Вставить("ИдентификаторПроверки",          СтрокаПроблемы.ПравилоПроверкиИдентификатор);
					СтруктураРасшифровки.Вставить("ОбработчикПереходаКИсправлению", ОбработчикПереходаКИсправлению);
					СтруктураРасшифровки.Вставить("ВидПроверки",                    СтрокаПроблемы.ВидПроверки);
					
					ОбработчикиИсправленияПроблем.Вставить(ИменаЭлементовФормыПоПроблемы.ИмяНадписи, СтруктураРасшифровки);
					
				КонецЕсли;
				
				// Не устанавливаем ОбработчикПереходаКИсправлению при задании правила, чтобы в отчете не появлялась гиперссылка
				РазметитьОписаниеПроблемы(
					ЭлементыУправляемойФормы, ДекорацияГруппа, ИменаЭлементовФормыПоПроблемы,
					СтрокаПроблемы.ВажностьПроблемы, СтрокаПроблемы.УточнениеПроблемы, ?(НЕ ПоляДополнительнойИнформации = Неопределено, "Подключаемый_ИсправитьПроблему", ""));			

			Иначе
				
				ОставшеесяКоличествоПроблем = ТаблицаПроблем.Количество() - 2;
				
				УточнениеПроблемы = Новый ФорматированнаяСтрока(СтрШаблон(НСтр("ru='Еще проблемы (%1)'"), ОставшеесяКоличествоПроблем), , , , "Основной");
				РазметитьОписаниеПроблемы(ЭлементыУправляемойФормы, ДекорацияГруппа, ИменаЭлементовФормыПоПроблемы,
					Перечисления["ВажностьПроблемыУчета"].Ошибка, УточнениеПроблемы, "Подключаемый_ОткрытьОтчетПоПроблемам");
				
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ТаблицаПроблем.Количество() < 4 Тогда
			
			ДекорацияНадпись = ЭлементыУправляемойФормы.Добавить(ДекорацияГруппа.Имя + "_Отчет", Тип("ДекорацияФормы"), ДекорацияГруппа);
			ДекорацияНадпись.Вид                          = ВидДекорацииФормы.Надпись;
			ДекорацияНадпись.Заголовок                    = Новый ФорматированнаяСтрока(НСтр("ru='Отчет по проблемам'"),,,, "Основной");
			ДекорацияНадпись.ВертикальноеПоложениеВГруппе = ВертикальноеПоложениеЭлемента.Низ;
			ДекорацияНадпись.УстановитьДействие("ОбработкаНавигационнойСсылки", "Подключаемый_ОткрытьОтчетПоПроблемам");
			
		КонецЕсли;
		
		Форма.ОбработчикиИсправленияПроблем = Новый ФиксированноеСоответствие(ОбработчикиИсправленияПроблем);
		
	КонецЕсли;
			
КонецПроцедуры 

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПроблемыОбъекта(ПроблемныйОбъект, ПоляДополнительнойИнформации=Неопределено)
	
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр("КонтрольВеденияУчета.КоличествоПроблемПоОбъекту", "ПроблемныйОбъект",
		ПроблемныйОбъект, ОбщегоНазначения.ОписаниеТипаВсеСсылки());
		
	ИспользоватьДополнительнуюИнформацию = НЕ ПоляДополнительнойИнформации = Неопределено И ПоляДополнительнойИнформации.Количество() > 0;	
		
	Запрос = Новый Запрос;
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РезультатыПроверкиУчета.УточнениеПроблемы КАК УточнениеПроблемы,
		|	РезультатыПроверкиУчета.ВажностьПроблемы КАК ВажностьПроблемы,
		|	РезультатыПроверкиУчета.Выявлено КАК Выявлено,
		|	РезультатыПроверкиУчета.Ответственный КАК Ответственный,
		|	РезультатыПроверкиУчета.ВидПроверки КАК ВидПроверки,
		|	РезультатыПроверкиУчета.ПравилоПроверки КАК ПравилоПроверки,
		|	РезультатыПроверкиУчета.ПравилоПроверки.Идентификатор КАК ПравилоПроверкиИдентификатор,
		|	РезультатыПроверкиУчета.ДополнительнаяИнформация КАК ДополнительнаяИнформация
		|ИЗ
		|	РегистрСведений.РезультатыПроверкиУчета КАК РезультатыПроверкиУчета
		|ГДЕ
		|	РезультатыПроверкиУчета.ПроблемныйОбъект = &ПроблемныйОбъект
		|	И НЕ РезультатыПроверкиУчета.ИгнорироватьПроблему
		|
		|УПОРЯДОЧИТЬ ПО
		|	РезультатыПроверкиУчета.ВажностьПроблемы.Порядок,
		|	Выявлено";
	
	Запрос.УстановитьПараметр("ПроблемныйОбъект", ПроблемныйОбъект);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь); 
	
	Если ИспользоватьДополнительнуюИнформацию Тогда
		
		ТаблицаСОтборомПоПолям = Новый ТаблицаЗначений; 
		Для Каждого ПолеДопИнформации Из ПоляДополнительнойИнформации Цикл
			РезультатЗапроса.Колонки.Добавить(ПолеДопИнформации.Ключ);
		КонецЦикла; 
		СчетчикСтрок = 0;
		Пока (СчетчикСтрок < РезультатЗапроса.Количество()) Цикл
			СтрокаРезультатаЗапроса = РезультатЗапроса.Получить(СчетчикСтрок);
			Отбор = Новый Структура;
			Для Каждого ПолеДопИнформации Из ПоляДополнительнойИнформации Цикл 
				ДопИнформацияПоОбъекту = СтрокаРезультатаЗапроса.ДополнительнаяИнформация.Получить();
				Если ДопИнформацияПоОбъекту.Свойство(ПолеДопИнформации.Ключ) И ДопИнформацияПоОбъекту[ПолеДопИнформации.Ключ] = ПолеДопИнформации.Значение Тогда
					СчетчикСтрок = СчетчикСтрок + 1;	
				Иначе 
					РезультатЗапроса.Удалить(СчетчикСтрок);
				КонецЕсли; 
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат РезультатЗапроса;
	
КонецФункции

Процедура РазметитьОписаниеПроблемы(ЭлементыУправляемойФормы, ДекорацияГруппа, ИменаЭлементовФормыПоПроблемы, ВажностьПроблемы, УточнениеПроблемы, ОбработчикПереходаКИсправлению)
	
	ГруппаИндикатораОшибки = ЭлементыУправляемойФормы.Добавить(ИменаЭлементовФормыПоПроблемы.ИмяГруппы, Тип("ГруппаФормы"), ДекорацияГруппа);
	ГруппаИндикатораОшибки.Вид                      = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаИндикатораОшибки.ОтображатьЗаголовок      = Ложь;
	ГруппаИндикатораОшибки.Группировка              = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
	ГруппаИндикатораОшибки.РастягиватьПоГоризонтали = Истина;
	ГруппаИндикатораОшибки.ЦветФона                 = ЦветаСтиля.ФонУправляющегоПоля;
	
	Если ВажностьПроблемы = Перечисления["ВажностьПроблемыУчета"].Ошибка Тогда
		КартинкаИндикатораПроблем = БиблиотекаКартинок["Ошибка32"];
	ИначеЕсли ВажностьПроблемы = Перечисления["ВажностьПроблемыУчета"].Предупреждение Тогда
		КартинкаИндикатораПроблем = БиблиотекаКартинок["Предупреждение32"];
	ИначеЕсли ВажностьПроблемы = Перечисления["ВажностьПроблемыУчета"].ВажнаяИнформация Тогда
		КартинкаИндикатораПроблем = БиблиотекаКартинок["ВажнаяИнформация32"];
	ИначеЕсли ВажностьПроблемы = Перечисления["ВажностьПроблемыУчета"].ПолезныйСовет Тогда
		КартинкаИндикатораПроблем = БиблиотекаКартинок["ПолезныйСовет32"];
	Иначе
		КартинкаИндикатораПроблем = БиблиотекаКартинок["Информация32"];
	КонецЕсли;
	
	КартинкаИндикаторОшибки = ЭлементыУправляемойФормы.Добавить(ИменаЭлементовФормыПоПроблемы.ИмяКартинки, Тип("ДекорацияФормы"), ГруппаИндикатораОшибки);
	КартинкаИндикаторОшибки.Вид            = ВидДекорацииФормы.Картинка;
	КартинкаИндикаторОшибки.Картинка       = КартинкаИндикатораПроблем;
	КартинкаИндикаторОшибки.РазмерКартинки = РазмерКартинки.РеальныйРазмер;
	
	ДекорацияНадпись = ЭлементыУправляемойФормы.Добавить(ИменаЭлементовФормыПоПроблемы.ИмяНадписи, Тип("ДекорацияФормы"), ГруппаИндикатораОшибки);
	ДекорацияНадпись.Вид                   = ВидДекорацииФормы.Надпись;
	ДекорацияНадпись.ВертикальноеПоложение = ВертикальноеПоложениеЭлемента.Центр;
	
	Если ЗначениеЗаполнено(ОбработчикПереходаКИсправлению) Тогда
		
		ДекорацияНадпись.Заголовок = Новый ФорматированнаяСтрока(УточнениеПроблемы, Символы.ПС,
			Новый ФорматированнаяСтрока(НСтр("ru='Исправить'") , , , , "Основной"));
		
		ДекорацияНадпись.УстановитьДействие("ОбработкаНавигационнойСсылки", ОбработчикПереходаКИсправлению);
		
	Иначе
		ДекорацияНадпись.Заголовок = УточнениеПроблемы;
	КонецЕсли;
	
КонецПроцедуры

// Изменяет реквизиты формы
// Параметры:
// 		Форма, 
//		ДобавляемыеРеквизиты - массив добавляемых реквизитов.
//		СуществующиеРеквизиты - массив текущих реквизитов формы.
//		УдаляемыеРеквизиты - не обязательный. Массив удаляемых реквизитов.
//		ОтложенноеИзменение - по умолчанию Ложь. В случае если параметр равен Истина - добавления/удаления реквизитов не происходит, а происходит запись
//								данных реквизитов в реквизит формы с типом "СписокЗначений".
//
// В том случае, если реквизит уже существует, он не создается.
//
Процедура ИзменитьРеквизитыФормы(Форма, ДобавляемыеРеквизиты, СуществующиеРеквизиты, УдаляемыеРеквизиты = Неопределено, ОтложенноеИзменение = Ложь) Экспорт
	
	Если УдаляемыеРеквизиты = Неопределено Тогда 
		УдаляемыеРеквизиты = Новый Массив;
	КонецЕсли;
	
	// Удаляем уже существующие реквизиты из ДобавляемыеРеквизиты.
	УжеСуществующиеРеквизиты = Новый Массив;
	ИменаУдаляемыхРеквизитов = Новый Массив;
	
	Для Каждого Реквизит Из ДобавляемыеРеквизиты Цикл
		ПолноеИмяРеквизита = ?(ЗначениеЗаполнено(Реквизит.Путь), Реквизит.Путь + ".", "") + Реквизит.Имя;
		Если СуществующиеРеквизиты.Найти(ПолноеИмяРеквизита) <> Неопределено Тогда
			УжеСуществующиеРеквизиты.Добавить(Реквизит);
			ИменаУдаляемыхРеквизитов.Добавить(ПолноеИмяРеквизита);
		КонецЕсли;					
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ИменаУдаляемыхРеквизитов, УдаляемыеРеквизиты);
	
	// Из дополняемых реквизитов также удаляем те, которые содержатся внутри удаляемых реквизитов и дублей-реквизитов.
	Для Каждого Реквизит Из ДобавляемыеРеквизиты Цикл
		Если УжеСуществующиеРеквизиты.Найти(Реквизит) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Реквизит.Путь) Тогда
		    Продолжить;
		КонецЕсли;
		Если ИменаУдаляемыхРеквизитов.Найти(Реквизит.Путь) <> Неопределено Тогда
			УжеСуществующиеРеквизиты.Добавить(Реквизит);
		КонецЕсли;					
	КонецЦикла;
	
	Для Каждого Реквизит Из УжеСуществующиеРеквизиты Цикл
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ДобавляемыеРеквизиты, Реквизит);
	КонецЦикла;
	
	Если ДобавляемыеРеквизиты.Количество() = 0 И УдаляемыеРеквизиты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ОтложенноеИзменение Тогда
		Для Каждого Реквизит Из УдаляемыеРеквизиты Цикл
			Форма.РеквизитыКУдалению.Добавить(Реквизит);
		КонецЦикла;
		Для Каждого Реквизит Из ДобавляемыеРеквизиты Цикл
			Форма.РеквизитыКДобавлению.Добавить(Реквизит);
		КонецЦикла;
	Иначе
		Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты, УдаляемыеРеквизиты);
	КонецЕсли;
	
КонецПроцедуры  

// Доопределяет КонтрольВеденияУчета.ПриСозданииНаСервереФормыСписка, меняя значение
// КартинкаЗначений на коллекцию пиктограмм
// Для выводимой с лева колонки с проблемой устанавливает значение ФиксацияВТаблице такое же
// как и у следующей колонки.
//
Процедура ПриСозданииНаСервереФормыСписка(Форма, ИменаСписков, ДополнительныеСвойства = Неопределено) Экспорт
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.КонтрольВеденияУчета") Тогда
		Возврат;
	КонецЕсли;
	
	МодульКонтрольВеденияУчета = ОбщегоНазначения.ОбщийМодуль("КонтрольВеденияУчета");
	
	МодульКонтрольВеденияУчета.ПриСозданииНаСервереФормыСписка(Форма, ИменаСписков, ДополнительныеСвойства);
	
	Если Не МодульКонтрольВеденияУчета.ПодсистемаДоступна() Тогда
		Возврат;
	КонецЕсли;
	
	ИмяПоляИндикатораПроблем = Неопределено;
	Если ДополнительныеСвойства <> Неопределено Тогда
		ДополнительныеСвойства.Свойство("ИмяПоляИндикатораПроблем", ИмяПоляИндикатораПроблем);
	КонецЕсли;
	
	СписокИмен = СтрРазделить(ИменаСписков, ",");
	Для Каждого ИмяСписка Из СписокИмен Цикл
		
		ТаблицаФормы = Форма.Элементы.Найти(СокрЛП(ИмяСписка));
		Если ТаблицаФормы = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ТекущийСписок   = Форма[ТаблицаФормы.ПутьКДанным];
		ОсновнаяТаблица = ТекущийСписок.ОсновнаяТаблица;
		Если Не ЗначениеЗаполнено(ОсновнаяТаблица) Тогда
			Продолжить;
		КонецЕсли;
		
		ПараметрыКолонкиИндикации = Новый Структура;
		
		МодульКонтрольВеденияУчетаСлужебный = ОбщегоНазначения.ОбщийМодуль("КонтрольВеденияУчетаСлужебный");
		МодульКонтрольВеденияУчетаПереопределяемый = ОбщегоНазначения.ОбщийМодуль("КонтрольВеденияУчетаПереопределяемый");
		
		МодульКонтрольВеденияУчетаСлужебный.ПриОпределенииПараметровКолонкиИндикации(ПараметрыКолонкиИндикации, ОсновнаяТаблица);
		МодульКонтрольВеденияУчетаПереопределяемый.ПриОпределенииПараметровКолонкиИндикации(ПараметрыКолонкиИндикации, ОсновнаяТаблица);
		
		Если ИмяПоляИндикатораПроблем = Неопределено Тогда
			ИмяКолонки = "ИндикаторОшибки_" + ОбщегоНазначения.КонтрольнаяСуммаСтрокой(Форма.ИмяФормы + ПолучитьРазделительПути() + ИмяСписка);
		Иначе
			ИмяКолонки = ИмяПоляИндикатораПроблем;
		КонецЕсли;
		
		КолонкаИндикаторОшибки = Форма.Элементы.Найти(ИмяКолонки);
		Если КолонкаИндикаторОшибки <> Неопределено Тогда
			
			КолонкаИндикаторОшибки.КартинкаЗначений = БиблиотекаКартинок["КоллекцияВажностейПроблем"]; 
			Если Не ПараметрыКолонкиИндикации.ВыводитьПоследней Тогда
				
				ТаблицаФормы = КолонкаИндикаторОшибки.Родитель;
				Если ТаблицаФормы <> Неопределено Тогда
					
					Если ТаблицаФормы.ПодчиненныеЭлементы.Количество() > 1 Тогда
						КолонкаИндикаторОшибки.ФиксацияВТаблице = ТаблицаФормы.ПодчиненныеЭлементы[1].ФиксацияВТаблице;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Переопределяет работу обработчика (КонтрольВеденияУчета.ПриПолученииДанныхНаСервере), устанавливая значениям
// колонок с проблемами порядок самой "страшной" проблемы, учитывает, что ключи динамического списка могут быть
// более разнообразными чем одно поле (но записи при этом остаются уникальными в пределах одного из реквизитов
// ключа).
//
Процедура ПриПолученииДанныхНаСервере(Настройки, Строки, ИмяКлючевогоПоля = "Ссылка", ДополнительныеСвойства = Неопределено) Экспорт
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.КонтрольВеденияУчета") Тогда
		Возврат;
	КонецЕсли;
	
	МодульКонтрольВеденияУчета = ОбщегоНазначения.ОбщийМодуль("КонтрольВеденияУчета");
	
	ИмяПроцедуры = "КонтрольВеденияУчета.ПриПолученииДанныхНаСервере";
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(ИмяПроцедуры, "Настройки", Настройки, Тип("НастройкиКомпоновкиДанных"));
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(ИмяПроцедуры, "Строки", Строки, Тип("СтрокиДинамическогоСписка"));
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(ИмяПроцедуры, "ИмяКлючевогоПоля", ИмяКлючевогоПоля, Тип("Строка"));
	
	ИспользоватьПоляДополнительнойИнформации = Ложь;
	
	Если ДополнительныеСвойства <> Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(ИмяПроцедуры, "ДополнительныеСвойства", ДополнительныеСвойства, Тип("Структура"));
		
		ИспользоватьПоляДополнительнойИнформации = ДополнительныеСвойства.Свойство("ПоляДополнительнойИнформации") 
														И ДополнительныеСвойства.ПоляДополнительнойИнформации.Количество() > 0 	
	КонецЕсли;
	
	Если Не МодульКонтрольВеденияУчета.ПодсистемаДоступна() Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеСвойстваКомпоновщика = Настройки.ДополнительныеСвойства;
	Если ДополнительныеСвойстваКомпоновщика.Свойство("КолонкаИндикатора") Тогда
		
		КолонкаИндикатора = Настройки.ДополнительныеСвойства.КолонкаИндикатора;
		
		Если ИмяКлючевогоПоля = "Ссылка" Тогда
			ЗначенияКлючей = Строки.ПолучитьКлючи();
			КлючСсылка = Истина;
		Иначе
			НачальныеКлючи = Строки.ПолучитьКлючи();
			КлючСсылка = ОбщегоНазначения.ЭтоСсылка(ТипЗнч(НачальныеКлючи[0]));
			ЗначенияКлючей     = Новый Массив;
			Для Каждого НачальныйКлюч Из НачальныеКлючи Цикл
				ЗначенияКлючей.Добавить(НачальныйКлюч[ИмяКлючевогоПоля]);
			КонецЦикла;
		КонецЕсли;
		
		Если ИспользоватьПоляДополнительнойИнформации Тогда 
			ПроблемныеОбъекты = ПроблемныеОбъекты(ЗначенияКлючей, ДополнительныеСвойства.ПоляДополнительнойИнформации);
		Иначе	
			ПроблемныеОбъекты = ПроблемныеОбъекты(ЗначенияКлючей);
		КонецЕсли;
		
		Для Каждого КлючСтроки Из ЗначенияКлючей Цикл
			
			Если КлючСсылка И ИмяКлючевогоПоля = "Ссылка" Тогда
				СписокСтрок = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Строки[КлючСтроки]);
			ИначеЕсли КлючСсылка И НЕ ИмяКлючевогоПоля = "Ссылка" Тогда	
				СписокСтрок = Новый Массив;
				Для Каждого СтрокаСписка Из Строки Цикл							
					Если СтрокаСписка.Ключ[ИмяКлючевогоПоля] = КлючСтроки Тогда				
						Если ИспользоватьПоляДополнительнойИнформации Тогда 
							Отбор = Новый Структура("ПроблемныйОбъект", СтрокаСписка.Ключ[ИмяКлючевогоПоля]); 
							Для Каждого ПолеДопИнформации Из ДополнительныеСвойства.ПоляДополнительнойИнформации Цикл 
								Отбор.Вставить(ПолеДопИнформации, СтрокаСписка.Ключ[ПолеДопИнформации]);	
							КонецЦикла;
							СтрокиОшибки = ПроблемныеОбъекты.НайтиСтроки(Отбор);
							Если СтрокиОшибки.Количество() > 0 Тогда
								СписокСтрок.Добавить(СтрокаСписка.Значение);
							КонецЕсли;				
						Иначе
							СписокСтрок.Добавить(СтрокаСписка.Значение);
						КонецЕсли; 	
					КонецЕсли;	
				КонецЦикла;
			Иначе	
				СписокСтрок = Новый Массив;
				Для Каждого СтрокаСписка Из Строки Цикл
					Если СтрокаСписка.Ключ[ИмяКлючевогоПоля] = КлючСтроки Тогда
						СписокСтрок.Добавить(СтрокаСписка.Значение);
					КонецЕсли;
				КонецЦикла; 			
			КонецЕсли;
			
			Если СписокСтрок.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Для Каждого СтрокаСписка Из СписокСтрок Цикл
				
				Если Не СтрокаСписка.Данные.Свойство(КолонкаИндикатора) Тогда
					Продолжить;
				КонецЕсли;
				
				ТекстЯчейки = СтрокаСписка.Оформление.Получить(КолонкаИндикатора).НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Текст"));
				
				Если НЕ ИспользоватьПоляДополнительнойИнформации Тогда 
					ВажностьПроблемы = ПроблемныеОбъекты.Получить(КлючСтроки);
				Иначе
					Отбор = Новый Структура("ПроблемныйОбъект", КлючСтроки);
					Для Каждого ПолеДопИнформации Из ДополнительныеСвойства.ПоляДополнительнойИнформации Цикл 
						Отбор.Вставить(ПолеДопИнформации, СтрокаСписка.Данные[ПолеДопИнформации]);	
					КонецЦикла;

					НайденныеСтроки = ПроблемныеОбъекты.НайтиСтроки(Отбор);
					ВажностьПроблемы = ?(НайденныеСтроки.Количество() > 0, НайденныеСтроки[0].ВажностьПроблемыПорядок, Неопределено);  
				КонецЕсли;
			
				Если ВажностьПроблемы = Неопределено Тогда
					СтрокаСписка.Данные[КолонкаИндикатора] = 0;
					Если ТекстЯчейки <> Неопределено Тогда
						ТекстЯчейки.Значение = 0;
					КонецЕсли;
				Иначе
					СтрокаСписка.Данные[КолонкаИндикатора] = ВажностьПроблемы + 1;
					Если ТекстЯчейки <> Неопределено Тогда
						ТекстЯчейки.Значение = 1;
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры 

// Служебный метод, возвращает соответствие проблемный объект - минимальный порядок важности
//
Функция ПроблемныеОбъекты(КлючиСтрок, ПоляДополнительнойИнформации=Неопределено)
	
	ТекущийПользовательПолноправный = Пользователи.ЭтоПолноправныйПользователь(); 
	
	ИспользоватьДополнительнуюИнформацию = НЕ ПоляДополнительнойИнформации = Неопределено И ПоляДополнительнойИнформации.Количество() > 0;
	
	Если НЕ ИспользоватьДополнительнуюИнформацию Тогда
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РезультатыПроверкиУчета.ПроблемныйОбъект КАК ПроблемныйОбъект,
		|	ЕСТЬNULL(МИНИМУМ(РезультатыПроверкиУчета.ВажностьПроблемы.Порядок), 0) КАК ВажностьПроблемыПорядок
		|ИЗ
		|	РегистрСведений.РезультатыПроверкиУчета КАК РезультатыПроверкиУчета
		|ГДЕ
		|	РезультатыПроверкиУчета.ПроблемныйОбъект В(&СписокОбъектов)
		|	И НЕ РезультатыПроверкиУчета.ИгнорироватьПроблему
		|
		|СГРУППИРОВАТЬ ПО
		|	РезультатыПроверкиУчета.ПроблемныйОбъект"); 
	Иначе
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	РезультатыПроверкиУчета.ПроблемныйОбъект КАК ПроблемныйОбъект,
		|	ЕСТЬNULL(РезультатыПроверкиУчета.ВажностьПроблемы.Порядок, 0) КАК ВажностьПроблемыПорядок,
		|	РезультатыПроверкиУчета.ДополнительнаяИнформация КАК ДополнительнаяИнформация
		|ИЗ
		|	РегистрСведений.РезультатыПроверкиУчета КАК РезультатыПроверкиУчета
		|ГДЕ
		|	РезультатыПроверкиУчета.ПроблемныйОбъект В(&СписокОбъектов)
		|	И НЕ РезультатыПроверкиУчета.ИгнорироватьПроблему"); 	
	КонецЕсли;
	
	Запрос.УстановитьПараметр("СписокОбъектов", КлючиСтрок);
	
	Если Не ТекущийПользовательПолноправный Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	Если НЕ ИспользоватьДополнительнуюИнформацию Тогда
		ПроблемныеОбъекты = Новый Соответствие;
	Иначе
		ПроблемныеОбъекты = Новый ТаблицаЗначений;
		ПроблемныеОбъекты.Колонки.Добавить("ПроблемныйОбъект");
		ПроблемныеОбъекты.Колонки.Добавить("ВажностьПроблемыПорядок");
		
		Для Каждого ПолеДопИнформации Из ПоляДополнительнойИнформации Цикл
			ПроблемныеОбъекты.Колонки.Добавить(ПолеДопИнформации);	
		КонецЦикла;
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если НЕ ИспользоватьДополнительнуюИнформацию Тогда   	
			ПроблемныеОбъекты.Вставить(Выборка.ПроблемныйОбъект, Выборка.ВажностьПроблемыПорядок);	
		Иначе
			ДанныеХранилищаЗначения = Выборка.ДополнительнаяИнформация.Получить();
			СтрокаПроблемныеОбъекты = ПроблемныеОбъекты.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаПроблемныеОбъекты, Выборка);	
			Для Каждого ПолеДопИнформации Из ПоляДополнительнойИнформации Цикл
				ДанныеХранилищаЗначения.Свойство(ПолеДопИнформации, СтрокаПроблемныеОбъекты[ПолеДопИнформации]); 
			КонецЦикла;
		КонецЕсли;   
	КонецЦикла;
	
	Если Не ТекущийПользовательПолноправный Тогда
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	Возврат ПроблемныеОбъекты;
	
КонецФункции

#КонецОбласти  




