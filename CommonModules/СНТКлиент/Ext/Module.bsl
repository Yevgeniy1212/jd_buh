
///////////////////////////////////////////////////////////////////////////////
// Обработчики команд подменю СНТ в формах первичных документов

// Открывает формы создания новых СНТ.
//
// Параметры:
//  Параметр - См. ЭСФКлиент.МассивСчетовФактур().
//
Процедура СоздатьСНТ(Знач Параметр) Экспорт
	
	Контейнер = СНТКлиентСервер.КонтейнерМетодов();	
	Контейнер.СоздатьСНТ(Параметр);
	
КонецПроцедуры

// Открывает формы создания новых ЭСФ, связанных с СНТ.
//
// Параметры:
//  Параметр - См. ЭСФКлиент.МассивСчетовФактур().
//
Процедура СоздатьЭСФ(Знач Параметр) Экспорт
	
	Контейнер = СНТКлиентСервер.КонтейнерМетодов();	
	Контейнер.СоздатьЭСФИзСНТ(Параметр);
	
КонецПроцедуры

Процедура ВыписатьИсправленнуюСНТ(Знач Параметр) Экспорт
	
	Контейнер = СНТКлиентСервер.КонтейнерМетодов();	
	Контейнер.ВыписатьИсправленнуюСНТ(Параметр);

КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Прочие служебные процедуры и функции

Процедура ВопросЗаписатьОбъектПередВыполнением(ОписаниеОповещенияЗавершения, ВидОбъекта = "документ", ИмяСобытия = "Записать") Экспорт
	
	ТекстВопроса = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(НСтр(
		"ru = 'Перед выполнением необходимо %1 %2.
		|%3 документ?'"), НРег(ИмяСобытия), ВидОбъекта, ИмяСобытия);	
		
	ПоказатьВопрос(ОписаниеОповещенияЗавершения, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		
КонецПроцедуры

// Возвращает массив первичных документов, полученный из формы документа или списка.
//
// Параметры:
//  Параметр - УправляемаяФорма, Форма, Массив, ВыделенныеСтрокиТабличногоПоля - 
//   Форма первичного документа или выделенные строки списка первичных документов.
//
// Возвращаемое значение:
//  Массив, Неопределено - Массив ссылок на первичные документы.
//   Если форма документа модифицирована и пользователь отказался от записи, то Неопределено.
//
Функция МассивПервичныхДокументовСНТ(Знач Параметр) Экспорт
	
	ЭтоФорма = Ложь;
	ЭтоКоллекция = Ложь;
	
	#Если ТолстыйКлиентУправляемоеПриложение ИЛИ ТолстыйКлиентОбычноеПриложение Тогда
		Если ТипЗнч(Параметр) = ЭСФКлиентПереопределяемый.ПолучитьТипФормаКлиентскогоПриложения() ИЛИ ТипЗнч(Параметр) = Тип("Форма") Тогда
			ЭтоФорма = Истина;
		ИначеЕсли ТипЗнч(Параметр) = Тип("Массив") ИЛИ ТипЗнч(Параметр) = Тип("ВыделенныеСтрокиТабличногоПоля") Тогда
			ЭтоКоллекция = Истина;	
		КонецЕсли;
	#Иначе
		Если ТипЗнч(Параметр) = ЭСФКлиентПереопределяемый.ПолучитьТипФормаКлиентскогоПриложения() Тогда
			ЭтоФорма = Истина;	
		ИначеЕсли ТипЗнч(Параметр) = Тип("Массив") Тогда
			ЭтоКоллекция = Истина;	
		КонецЕсли;
	#КонецЕсли
	
	Если ЭтоФорма Тогда
		Форма = Параметр;
		// производим запись без вопроса
		Если СНТКлиент.ОбъектЗаписан(Форма) Тогда
			СсылкаПервичныйДокументСНТ = ?(СНТКлиентСервер.ЭтоОбычнаяФорма(Форма), Форма.Ссылка, Форма.Объект.Ссылка);
			МассивПервичныхДокументовСНТ = Новый Массив;
			МассивПервичныхДокументовСНТ.Добавить(СсылкаПервичныйДокументСНТ);
		Иначе
			МассивПервичныхДокументовСНТ = Неопределено;
		КонецЕсли;	
	ИначеЕсли ЭтоКоллекция Тогда
		КоллекцияПервичныхДокументовСНТ = Параметр;
		МассивПервичныхДокументовСНТ = Новый Массив;
		Для Каждого СсылкаПервичныйДокументСНТ Из КоллекцияПервичныхДокументовСНТ Цикл
			МассивПервичныхДокументовСНТ.Добавить(СсылкаПервичныйДокументСНТ);
		КонецЦикла;			
	КонецЕсли;
	
	Возврат МассивПервичныхДокументовСНТ;
	
КонецФункции

Функция ОбъектЗаписан(Форма) Экспорт
	
	Ссылка = ?(СНТКлиентСервер.ЭтоОбычнаяФорма(Форма), Форма.Ссылка, Форма.Объект.Ссылка);
	
	Если Ссылка.Пустая() ИЛИ Форма.Модифицированность Тогда
		
		Форма.Записать();	
		
	КонецЕсли;
	
	Ссылка = ?(СНТКлиентСервер.ЭтоОбычнаяФорма(Форма), Форма.Ссылка, Форма.Объект.Ссылка);
	
	ОбъектЗаписан = (НЕ Ссылка.Пустая()) И (НЕ Форма.Модифицированность);	
	
	Возврат ОбъектЗаписан;
	
КонецФункции

// Выполняет Выгрузку данных СНТ в XML-файл
//
// Параметры:
//  МассивИсходящихСНТ - Массив - Массив документов ЭСФ, которые необходимо выгрузить в XML файл.
//   Каждый элемент массива должен иметь тип ДокументСсылка.ЭСФ.
//
Процедура ВыгрузитьИсходящиеСНТ(Знач МассивИсходящихСНТ) Экспорт
	
	Контейнер = СНТКлиентСервер.КонтейнерМетодов();	
	Контейнер.ВыгрузитьИсходящиеСНТ(МассивИсходящихСНТ);
		
КонецПроцедуры

// Проверяет даты отправляемых СНТ, если они отличаются от текущих, то предлагает изменить даты.
// Если пользователь согласится, то изменяет даты документов ЭСФ и связанных счетов-фактур.
//
// Параметры:
//  МассивЭСФ - Массив - Массив ЭСФ, для которых необходимо установить текущую дату.
//   Каждый элемент массива должен иметь тип ДокументСсылка.ЭСФ.
//  Действие - Строка - ЭСФКлиентСервер.ДействиеОтправка(), ЭСФКлиентСервер.ДействиеВыгрузка().
//
// Возвращаемое значение:
//  Булево - Истина - Можно продолжить отправку, Ложь - в противном случае.
//
Процедура УстановитьТекущуюДатуДляЭДВопрос(Знач МассивСНТ, Знач Действие, Знач ОписаниеОповещения) Экспорт
	
	ТекущаяДата = НачалоДня(ЭСФВызовСервера.ТекущаяДатаНаСервере());	
	ИзмененГод  = Ложь;
	МассивСНТДругаяДата = СНТВызовСервера.МассивСНТДругаяДата(МассивСНТ, ТекущаяДата, ИзмененГод);
	
	Если ИзмененГод Тогда
		СообщениеОСменеНомеровДокументов = Символы.ПС + НСтр("ru = 'ВНИМАНИЕ!!! При изменении года будут изменены номера документов!'");
	Иначе
		СообщениеОСменеНомеровДокументов = "";
	КонецЕсли;
	
	Если Действие = СНТКлиентСервер.ДействиеОтправка() Тогда
		ТекстТипСНТ = НСтр("ru = 'Отправляемые'");
	Иначе
		ТекстТипСНТ = НСтр("ru = 'Выгружаемые'");
	КонецЕсли;
		
	Если МассивСНТДругаяДата.Количество() = 1 Тогда
		
		Если МассивСНТДругаяДата[0].ПризнакВыписки И МассивСНТДругаяДата[0].ДатаСНТОтличнаОтТекущей Тогда
			ТекстВопроса = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(НСтр(
			"ru = 'Дата ""%1"" отличается от текущей (%2).
			|%3 электронный документ должен иметь текущую дату.
			|Изменить дату электронного документа на текущую (%2)? %4'"), СНТКлиентСервер.КраткоеПредставлениеСНТ(МассивСНТДругаяДата[0].СНТ),Формат(ТекущаяДата, "ДФ=dd.MM.yyyy"), ТекстТипСНТ, СообщениеОСменеНомеровДокументов);
		Иначе
			
			ТекстДокументов = "";
			
			Если МассивСНТДругаяДата[0].ДатаСНТОтличнаОтТекущей Тогда
				ВопросЗаменыДаты = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(НСтр("ru='Изменить дату электронного документа на текущую (%1)?'"),Формат(ТекущаяДата, "ДФ=dd.MM.yyyy"));				
			Иначе
				ВопросЗаменыДаты = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(НСтр("ru='Изменить дату связанного документа на текущую (%1)?'"), Формат(ТекущаяДата, "ДФ=dd.MM.yyyy"));
			КонецЕсли;
						
			Если МассивСНТДругаяДата[0].ДатаСНТОтличнаОтТекущей Тогда
				
				ТекстСНТ = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(НСтр("ru='Дата ""%1"" отличается от текущей (%2).'"),
				СНТКлиентСервер.КраткоеПредставлениеСНТ(МассивСНТДругаяДата[0].СНТ), Формат(ТекущаяДата, "ДФ=dd.MM.yyyy"));
				
				ТекстДокументов = ТекстДокументов + ТекстСНТ + Символы.ПС +
				ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(НСтр("ru='%1 электронный документ должен иметь текущую дату.'"),ТекстТипСНТ) + Символы.ПС;
				
			КонецЕсли; 			
						
			ТекстВопроса = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(НСтр("ru = '%1
			|%2 %3'"), ТекстДокументов, ВопросЗаменыДаты, СообщениеОСменеНомеровДокументов);			

		КонецЕсли;  	
		
		ОписаниеОповещения.ДополнительныеПараметры.Вставить("ТекущаяДата", ТекущаяДата);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
				
	ИначеЕсли МассивСНТДругаяДата.Количество() > 1 Тогда
		
		ТекстВопроса = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(НСтр(
			"ru = 'Даты %1 связанных электронных документов отличаются от текущей (%2):
			|%3 электронные документы должны иметь текущую дату.
			|Изменить даты электронных документов на текущую (%2)? %4'"),
			МассивСНТДругаяДата.Количество(), Формат(ТекущаяДата, "ДФ=dd.MM.yyyy"), ТекстТипСНТ, СообщениеОСменеНомеровДокументов);
		
		ОписаниеОповещения.ДополнительныеПараметры.Вставить("ТекущаяДата", ТекущаяДата);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
		
	Иначе
		
		ОписаниеОповещения.ДополнительныеПараметры.Вставить("ТекущаяДата", ТекущаяДата);
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, Новый Структура("Ответ, ТекущаяДата", КодВозвратаДиалога.Пропустить, ТекущаяДата));
		
	КонецЕсли;
	
КонецПроцедуры

// Сохраняет XML строку, содержащую пакет СНТ, в файл.
//
// Параметры:
//  XML - Строка - Пакет ЭСФ для импорта в ИС ЭСФ.
//
Процедура СохранитьXMLДляИмпортаВИСЭСФ(XML) Экспорт
	
	ИмяФайла = НСтр("ru = '%ДатаФормирования% Пакет СНТ'");
	ИмяФайла = СтрЗаменить(ИмяФайла, "%ДатаФормирования%", Формат(ЭСФВызовСервера.ТекущаяДатаНаСервере(), "ДФ=yyyy-MM-dd"));
	
	#Если ВебКлиент Тогда
		
		ПолучитьФайл(ЭСФВызовСервера.ПоместитьДанныеВоВременноеХранилище(XML), ИмяФайла + ".xml");
		
		Сообщить(НСтр("ru = 'Выгруженные документы можно импортировать в ИС ЭСФ, а затем отправить получателю средствами ИС ЭСФ.'"));
		
	#Иначе
		
		ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
		
		ДиалогВыбораФайла.ПолноеИмяФайла = ИмяФайла;	
		ДиалогВыбораФайла.Расширение = "xml";
		ДиалогВыбораФайла.Фильтр = "Пакет СНТ (*.xml)|*.xml";
		
		ДополнительныеПараметры = Новый Структура("XML", XML);
		СохранитьXMLДляИмпортаВИСЭСФЗав = Новый ОписаниеОповещения("СохранитьXMLДляИмпортаВИСЭСФЗавершение", СНТКлиент, ДополнительныеПараметры);
		ДиалогВыбораФайла.Показать(СохранитьXMLДляИмпортаВИСЭСФЗав);
		
	#КонецЕсли
	
КонецПроцедуры

Процедура СохранитьXMLДляИмпортаВИСЭСФЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ВыбранныеФайлы.Количество() = 1 Тогда

		ЗаписьТекста = Новый ЗаписьТекста();
		ЗаписьТекста.Открыть(ВыбранныеФайлы[0], "UTF-8");			
		ЗаписьТекста.Записать(ДополнительныеПараметры.XML);
		ЗаписьТекста.Закрыть();	
		
		ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(НСтр(
			"ru = 'Выгрузка электронных документов успешно завершена.
			|Выгруженные документы можно импортировать в ИС ЭСФ, а затем отправить получателю средствами ИС ЭСФ.'"));
		
	КонецЕсли;
	
КонецПроцедуры

// Оповещает формы подсистемы о происхождении события.
//
// Параметры:
//  ИмяСобытия - Строка - Имя произошедшего события, ЭСФКлиентСервер.ИмяСобытия<Имя>().
//  Параметр - Массив, Неопределено - Массив ссылок на измененные или созданные объекты. 
//   Неопределено, если невозможно определить какие объекты были изменены или созданы.
//
Процедура ОповеститьФормы(Знач ИмяСобытия, Знач Параметр = Неопределено, Знач Источник = Неопределено) Экспорт
	
	Оповестить(ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

// Возвращает массив СНТ, полученный из формы документа или списка.
//
// Параметры:
//  Параметр - УправляемаяФорма, Форма, Массив, ВыделенныеСтрокиТабличногоПоля - 
//   Форма документа счета-фактуры или выделенные строки списка счетов-фактур.
//
// Возвращаемое значение:
//  Массив, Неопределено - Массив ссылок на СНТ.
//   Если форма документа модифицирована и пользователь отказался от записи, то Неопределено.
//
Функция МассивСНТ(Знач Параметр) Экспорт
	
	ЭтоФорма = Ложь;
	ЭтоКоллекция = Ложь;
	
	#Если ТолстыйКлиентУправляемоеПриложение ИЛИ ТолстыйКлиентОбычноеПриложение Тогда
		Если ТипЗнч(Параметр) = ЭСФКлиентПереопределяемый.ПолучитьТипФормаКлиентскогоПриложения() ИЛИ ТипЗнч(Параметр) = Тип("Форма") Тогда
			ЭтоФорма = Истина;
		ИначеЕсли ТипЗнч(Параметр) = Тип("Массив") ИЛИ ТипЗнч(Параметр) = Тип("ВыделенныеСтрокиТабличногоПоля") Тогда
			ЭтоКоллекция = Истина;	
		КонецЕсли;
	#Иначе
		Если ТипЗнч(Параметр) = ЭСФКлиентПереопределяемый.ПолучитьТипФормаКлиентскогоПриложения() Тогда
			ЭтоФорма = Истина;	
		ИначеЕсли ТипЗнч(Параметр) = Тип("Массив") Тогда
			ЭтоКоллекция = Истина;	
		КонецЕсли;
	#КонецЕсли
	
	Если ЭтоФорма Тогда
		Форма = Параметр;
		// производим запись без вопроса
		Если ЭСФКлиент.ОбъектЗаписан(Форма) Тогда
			СсылкаСНТ = ?(ЭСФКлиентСервер.ЭтоОбычнаяФорма(Форма), Форма.Ссылка, Форма.Объект.Ссылка);
			МассивСНТ = Новый Массив;
			МассивСНТ.Добавить(СсылкаСНТ);
		Иначе
			МассивСНТ = Неопределено;
		КонецЕсли;	
	ИначеЕсли ЭтоКоллекция Тогда
		КоллекцияСНТ = Параметр;
		МассивСНТ = Новый Массив;
		Для Каждого СсылкаСНТ Из КоллекцияСНТ Цикл
			МассивСНТ.Добавить(СсылкаСНТ);
		КонецЦикла;			
	КонецЕсли;
	
	Возврат МассивСНТ;
	
КонецФункции

Функция МассивСНТДляСозданияПервичныхДокументов(Знач Параметр) Экспорт
	
	ЭтоФорма = Ложь;
	ЭтоКоллекция = Ложь;
	
	#Если ТолстыйКлиентУправляемоеПриложение ИЛИ ТолстыйКлиентОбычноеПриложение Тогда
		Если ТипЗнч(Параметр) = ЭСФКлиентПереопределяемый.ПолучитьТипФормаКлиентскогоПриложения() ИЛИ ТипЗнч(Параметр) = Тип("Форма") Тогда
			ЭтоФорма = Истина;
		ИначеЕсли ТипЗнч(Параметр) = Тип("Массив") ИЛИ ТипЗнч(Параметр) = Тип("ВыделенныеСтрокиТабличногоПоля") Тогда
			ЭтоКоллекция = Истина;	
		КонецЕсли;
	#Иначе
		Если ТипЗнч(Параметр) = ЭСФКлиентПереопределяемый.ПолучитьТипФормаКлиентскогоПриложения() Тогда
			ЭтоФорма = Истина;	
		ИначеЕсли ТипЗнч(Параметр) = Тип("Массив") Тогда
			ЭтоКоллекция = Истина;	
		КонецЕсли;
	#КонецЕсли
	
	Если ЭтоФорма Тогда
		Форма = Параметр;
		// производим запись без вопроса
		Если СНТКлиент.ОбъектЗаписан(Форма) Тогда
			СсылкаСНТ = ?(СНТКлиентСервер.ЭтоОбычнаяФорма(Форма), Форма.Ссылка, Форма.Объект.Ссылка);
			МассивСНТДляСозданияПервичныхДокументов = Новый Массив;
			МассивСНТДляСозданияПервичныхДокументов.Добавить(СсылкаСНТ);
		Иначе
			МассивСНТДляСозданияПервичныхДокументов = Неопределено;
		КонецЕсли;	
	ИначеЕсли ЭтоКоллекция Тогда
		КоллекцияСНТ = Параметр;
		МассивСНТДляСозданияПервичныхДокументов = Новый Массив;
		Для Каждого СсылкаСНТ Из КоллекцияСНТ Цикл
			МассивСНТДляСозданияПервичныхДокументов.Добавить(СсылкаСНТ);
		КонецЦикла;			
	КонецЕсли;
	
	Возврат МассивСНТДляСозданияПервичныхДокументов;
	
КонецФункции

// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Выполняет методы uploadSnt() API ИС ЭСФ.
// Параметры:
//  МассивИсходящихСНТ - Массив - Массив документов СНТ, которые необходимо отправить в ИС ЭСФ.
//   Каждый элемент массива должен иметь тип ДокументСсылка.СНТ.
//
// Возвращаемое значение:
//  См. СНТСервер.ОтправитьИсходящиеSnt().
//
Процедура ОтправитьИсходящиеСНТ(Знач МассивИсходящихСНТ, Знач ДополнительныеПараметры) Экспорт
	
	Контейнер = СНТКлиентСервер.КонтейнерМетодов();	
	Контейнер.ОтправитьИсходящиеСНТ(МассивИсходящихСНТ, ДополнительныеПараметры);
	
КонецПроцедуры

// Выполняет методы uploadSnt() API ИС ЭСФ.
// Параметры:
//  МассивИсходящихСНТ - Массив - Массив документов СНТ, которые необходимо отправить в ИС ЭСФ.
//   Каждый элемент массива должен иметь тип ДокументСсылка.СНТ.
//
// Возвращаемое значение:
//  См. СНТСервер.ОтправитьИсходящиеSnt().
//
Процедура ОтправитьСопоставлениеСНТиФНО(Знач МассивСопоставленийСНТиФНО, Знач ДополнительныеПараметры) Экспорт
	
	Контейнер = СНТКлиентСервер.КонтейнерМетодов();	
	Контейнер.ОтправитьСопоставлениеСНТиФНО(МассивСопоставленийСНТиФНО, ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ОбновитьДокументыСопоставлениеСНТсФНОИзИСЭСФ(Знач МассивСопоставленийСНТиФНО, Знач ДополнительныеПараметры) Экспорт
	
	Контейнер = СНТКлиентСервер.КонтейнерМетодов();	
	Контейнер.ОбновитьДокументыСопоставлениеСНТсФНОИзИСЭСФ(МассивСопоставленийСНТиФНО, ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ПолучитьОшибкиСопоставлениеСНТсФНОПоИдентификаторам(Знач МассивСопоставленийСНТиФНО, Знач ДополнительныеПараметры) Экспорт
	
	Контейнер = СНТКлиентСервер.КонтейнерМетодов();	
	Контейнер.ПолучитьОшибкиСопоставлениеСНТсФНОПоИдентификаторам(МассивСопоставленийСНТиФНО, ДополнительныеПараметры);
	
КонецПроцедуры

//Выполняет метод changeStatus сервиса SntWebService API ИС ЭСФ
Функция ИзменитьСтатусыСНТ(Знач Действие, Знач КоллецияДляИзмененияСтатусов, Знач ДанныеПрофиляИСЭСФ, Знач ДанныеКлючаЭЦП, Знач УникальныйИдентификатор, Знач ЗапускатьФоновоеЗадание) Экспорт
	
	Контейнер = СНТКлиентСервер.КонтейнерМетодов();	
	Возврат Контейнер.ИзменитьСтатусыСНТ(Действие, КоллецияДляИзмененияСтатусов, ДанныеПрофиляИСЭСФ, ДанныеКлючаЭЦП, УникальныйИдентификатор, ЗапускатьФоновоеЗадание);
	
КонецФункции

// Проверяет корректность заполнения ЭСФ и показывает сообщения.
//
// Параметры:
//  МассивИсходящихЭСФ - Массив - Массив документов ЭСФ, которые необходимо отправить в ИС ЭСФ.
//   Каждый элемент массива должен иметь тип ДокументСсылка.ЭСФ.
//
Процедура ПроверитьИсходящиеСНТ(Знач МассивИсходящихСНТ) Экспорт
	
	Контейнер = СНТКлиентСервер.КонтейнерМетодов();	
	Контейнер.ПроверитьИсходящиеСНТ(МассивИсходящихСНТ);
		
КонецПроцедуры

Процедура ОбновитьДокументыСНТИзИСЭСФ(Знач МассивСНТ, Знач ДополнительныеПараметры) Экспорт
	
	Контейнер = СНТКлиентСервер.КонтейнерМетодов();	
	Контейнер.ОбновитьДокументыСНТИзИСЭСФ(МассивСНТ, ДополнительныеПараметры);
	
КонецПроцедуры

// Проверяет даты отправляемых документов СНТ, если они отличаются от текущих, то предлагает изменить даты.
// Если пользователь согласится, то изменяет даты документов СНТ.
//
// Параметры:
//  МассивСНТ - Массив - Массив документов СНТ, для которых необходимо установить текущую дату.
//   Каждый элемент массива должен иметь тип ДокументСсылка.СНТ.
//  Действие - Строка - СНТКлиентСервер.ДействиеОтправка(), СНТКлиентСервер.ДействиеВыгрузка().
//
// Возвращаемое значение:
//  Булево - Истина - Можно продолжить отправку, Ложь - в противном случае.
//
Процедура УстановитьТекущуюДатуДляСНТВопрос(Знач МассивСНТ, Знач Действие, Знач ОписаниеОповещения) Экспорт
	
	ТекущаяДата = НачалоДня(ЭСФВызовСервера.ТекущаяДатаНаСервере());

	ИзмененГод  = Ложь;
	МассивСНТДругаяДата = СНТВызовСервера.МассивСНТДругаяДата(МассивСНТ, ТекущаяДата, ИзмененГод);
	
	Если ИзмененГод Тогда
		СообщениеОСменеНомеровДокументов = Символы.ПС + НСтр("ru = 'ВНИМАНИЕ!!! При изменении года будут изменены номера документов!'");
	Иначе
		СообщениеОСменеНомеровДокументов = "";
	КонецЕсли;
	
	Если Действие = СНТКлиентСервер.ДействиеОтправка() Тогда
		ТекстТипСНТ = НСтр("ru = 'Отправляемый'");
	Иначе
		ТекстТипСНТ = НСтр("ru = 'Выгружаемый'");
	КонецЕсли;
	
	Если МассивСНТДругаяДата.Количество() = 1 Тогда
		
		ТекстВопроса = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(НСтр(
			"ru = 'Дата ""%1"" отличается от текущей (%2).
			|%3 электронный документ виртуального склада должен иметь текущую дату.
			|Изменить дату СНТ(%2)? %4'"),СНТКлиентСервер.КраткоеПредставлениеСНТ(МассивСНТДругаяДата[0].СНТ),
			Формат(ТекущаяДата, "ДФ=dd.MM.yyyy HH:mm:ss"), ТекстТипСНТ, СообщениеОСменеНомеровДокументов);
	
		ОписаниеОповещения.ДополнительныеПараметры.Вставить("ТекущаяДата", ТекущаяДата);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
		
	ИначеЕсли МассивСНТДругаяДата.Количество() > 1 Тогда
		
		ТекстВопроса = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(НСтр(
			"ru = 'Дата и время каждой из %1 сопроводительных накладных на товары отличаются от текущей (%2):
			|%3 сопроводительные накладные на товары должны иметь текущую дату.
			|Изменить даты сопроводительных накладных на товары на текущую (%2)? %4'"),
			МассивСНТДругаяДата.Количество(),Формат(ТекущаяДата, "ДФ=dd.MM.yyyy HH:mm:ss"),ТекстТипСНТ,СообщениеОСменеНомеровДокументов);
			
		ОписаниеОповещения.ДополнительныеПараметры.Вставить("ТекущаяДата", ТекущаяДата);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
		
	Иначе
		
		ОписаниеОповещения.ДополнительныеПараметры.Вставить("ТекущаяДата", ТекущаяДата);
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, Новый Структура("Ответ, ТекущаяДата", КодВозвратаДиалога.Пропустить, ТекущаяДата));
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОткрытьФормуИзменениеСтатусовСНТ(Знач Действие, Знач МассивСНТ, Знач ЗапускатьФоновоеЗадание) Экспорт
	
	Контейнер = СНТКлиентСервер.КонтейнерМетодов();	
	Контейнер.ОткрытьФормуИзменениеСтатусовСНТ(Действие, МассивСНТ, ЗапускатьФоновоеЗадание);
	
КонецПроцедуры

Процедура ПолучитьИдентификаторыТоваровСНТИзВС(Знач МассивСНТ, Знач ДополнительныеПараметры) Экспорт
	
	Контейнер = СНТКлиентСервер.КонтейнерМетодов();	
	Контейнер.ПолучитьИдентификаторыТоваровСНТИзВС(МассивСНТ, ДополнительныеПараметры);	
	
КонецПроцедуры

Процедура ОткрытьФормуСпискаИсходящихСНТ() Экспорт
	СписокСНТ(ПредопределенноеЗначение("Перечисление.НаправленияСНТ.Исходящий"));	
КонецПроцедуры

Процедура ОткрытьФормуСпискаВходящихСНТ() Экспорт
	СписокСНТ(ПредопределенноеЗначение("Перечисление.НаправленияСНТ.Входящий"));	
КонецПроцедуры

Процедура СписокСНТ(Знач Направление = Неопределено) Экспорт
	
	Контейнер = СНТКлиентСервер.КонтейнерМетодов();	
	Контейнер.СписокСНТ(Направление);
	
КонецПроцедуры

Процедура ОбновитьВиртуальныеСкладыКонтрагентовИзВС(Знач МассивСкладов, Знач ДополнительныеПараметры) Экспорт
	Контейнер = СНТКлиентСервер.КонтейнерМетодов();
	Контейнер.ОбновитьВиртуальныеСкладыКонтрагентовИзВС(МассивСкладов, ДополнительныеПараметры);
КонецПроцедуры

///////////////////////////
// Обработчики команд подменю в формах СНТ
// Открывает формы создания новых первичных документов на основании СНТ.

Процедура СоздатьПервичныйДокумент(Знач Параметр) Экспорт
	
	Контейнер = СНТКлиентСервер.КонтейнерМетодов();	
	Контейнер.СоздатьПервичныйДокумент(Параметр);
	
КонецПроцедуры

Процедура ОткрытьСНТ(Форма, СНТ, НаправлениеСНТ, ДоступныеРоли) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	СписокДействийВводСНТ = Новый СписокЗначений();
	СписокДействийВводСНТ.Добавить("ОткрытьСуществующийДокумент", "Открыть документ");
	СписокДействийВводСНТ.Добавить("ОтвязатьСНТ", "Отсоединить СНТ");
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("СНТ", СНТ);
	ДополнительныеПараметры.Вставить("НаправлениеСНТ", НаправлениеСНТ);
	ДополнительныеПараметры.Вставить("Владелец", Форма);
	ДополнительныеПараметры.Вставить("ДоступныеРоли", ДоступныеРоли);
	
	Оповещение = Новый ОписаниеОповещения("ПослеВыбораИзМенюПриОткрытииСНТ", ЭтотОбъект, ДополнительныеПараметры);
	Форма.ПоказатьВыборИзМеню(Оповещение, СписокДействийВводСНТ);
	
КонецПроцедуры

Процедура ПослеВыбораИзМенюПриОткрытииСНТ(Результат, Параметры) Экспорт
	
	Если Результат = Неопределено Или Не ЗначениеЗаполнено(Параметры.ДоступныеРоли) Тогда
		Возврат;
	КонецЕсли;		                                  			
	
	Если Результат.Значение = "ОткрытьСуществующийДокумент" Тогда
		ПоказатьЗначение(,Параметры.СНТ);
	Иначе
		Если Параметры.ДоступныеРоли.Свойство("ДобавлениеИзменениеСНТ") Тогда
			ОповеститьФормы("ОтсоединениеСНТ");
		Иначе
			ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(НСтр("ru = 'Недостаточно прав!'"));
		КонецЕсли;
	КонецЕсли;	
	                                                                            
КонецПроцедуры

Процедура ОткрытьСНТ_ДокументОснование(Форма, ДанныеСНТ) Экспорт
	
	СНТ = ДанныеСНТ.СНТ;
	
	Если ТипЗнч(СНТ) <> Тип("СписокЗначений") И ЗначениеЗаполнено(СНТ) Тогда
		
		ВводитсяДокументКорректировкаРеализации = СНТКлиентПереопределяемый.ВводитсяДокументКорректировкаРеализации(Форма.Параметры.Ключ);
		
		//Это_ПТУ = СНТКлиентПереопределяемый.ПроверитьИмяДокументаПТУ(Форма.Параметры.Ключ);
		
		//Если ВводитсяДокументКорректировкаРеализации ИЛИ Это_ПТУ Тогда
		ПоказатьЗначение(,СНТ);
		//Иначе
	ИначеЕсли ТипЗнч(СНТ) = Тип("СписокЗначений") И ЗначениеЗаполнено(СНТ) Тогда
		
		Если СНТ.Количество() > 1 Тогда
			СтандартнаяОбработка = Ложь;
			ОткрытьФорму(
			"ОбщаяФорма.ПросмотрСпискаДокументов",
			Новый Структура("СписокДокументов, Заголовок",
			СНТ,
			НСтр("ru='Документы (%КоличествоДокументов%)'")
			),
			Форма,,,, Неопределено, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеВыбораИзМенюПриОткрытииСНТ_ДокументОснование(Результат, Параметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Значение = "ОткрытьСуществующийДокумент" Тогда
		
		ПоказатьЗначение(,Параметры.СНТ);
		
	Иначе
		
		ТекстВопроса = "";
		
		Если Параметры.ТипСНТ = ПредопределенноеЗначение("Перечисление.ТипыСНТ.Исправленная") Тогда
			ТекстВопроса = НСтр("ru = 'Для данного документа СНТ исправленная была введена ранее. Создать новый документ?'");
		ИначеЕсли Не Параметры.Проведен Тогда
			ТекстВопроса = НСтр("ru = 'Первичный документ СНТ не проведён. Создать документ исправления?'");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекстВопроса) Тогда
			
			Режим = РежимДиалогаВопрос.ДаНет;
			Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаСозданияСНТИсправленная", ЭтотОбъект, Параметры);
			ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
			
		Иначе
			ПараметрыФормы = Новый Структура("Основание", Параметры.Основание);
			Форма = ПолучитьФорму("Документ.СНТ.ФормаОбъекта", ПараметрыФормы, Параметры.Владелец);
			Форма.Объект.ТипСНТ = ПредопределенноеЗначение("Перечисление.ТипыСНТ.Исправленная");
			Форма.Объект.СвязанныйСНТ = Параметры.СНТ;
			Если Не ЗначениеЗаполнено(Форма.Объект.РегистрационныйНомерСвязанногоСНТ) Тогда
				Форма.Объект.РегистрационныйНомерСвязанногоСНТ = СНТВызовСервера.ПолучитьРегНомерПервичнойСНТ(Параметры.СНТ);
			КонецЕсли;
			Форма.Открыть();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Перезаполнение СНТ по данным документа-основания

Процедура ПерезаполнитьСНТ(Знач Параметр) Экспорт
	
	Контейнер = СНТКлиентСервер.КонтейнерМетодов();	
	Контейнер.ПерезаполнитьСНТ(Параметр);
	
КонецПроцедуры
