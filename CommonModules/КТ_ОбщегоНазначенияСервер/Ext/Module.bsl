
// Функция - Определить параметры ЦФОТекущего пользователя
// 
// Возвращаемое значение:
//   - Определяет ЦФО текущего пользователя
//
Функция ОпределитьЦФОТекущегоПользователя(ТекущийПользователь = Неопределено) Экспорт
	
	Если ТекущийПользователь = Неопределено Тогда ТекущийПользователь = Пользователи.ТекущийПользователь(); КонецЕсли;
	
	//Результат = бит_УправлениеПользователямиСервер.ПолучитьЗначениеПоУмолчанию("ОсновноеЦФО", ТекущийПользователь);
	Результат = ПользователиБКВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию(ТекущийПользователь, "ОсновноеЦФО");
	
	Если Результат = Неопределено Тогда
		Сообщить("Для корректной работы подсистемы ""Казначейства"", необходмо указать Основное ЦФО в настройках пользователя.");	
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции


//ПРОЦЕДУРЫ И ФУНКЦИИ ПО СОЗДАНИЮ ПЛАТЕЖНЫХ ДОКУМЕНТОВ
///////////////////////////////////////////////////////

//Процедура создания платежного документа
//Определяет вид платежки и создает платежный документ ППИ или РКО
//
Процедура СоздатьПлатежныйДокумент(СтрокаТаблицы, СтруктураПараметров) Экспорт 
	
	Заявка = СтрокаТаблицы.Документ;
	
	Если Заявка.ФормаОплаты = Перечисления.бит_ВидыДенежныхСредств.Безналичные Тогда 
		СоздатьППИ(СтрокаТаблицы, СтруктураПараметров);
	ИначеЕсли Заявка.ФормаОплаты = Перечисления.бит_ВидыДенежныхСредств.Наличные Тогда
		СоздатьРКО(СтрокаТаблицы, СтруктураПараметров);
	Иначе
		Сообщить("Для " + Заявка + " неопределена форма оплаты!
		|Платежный документ по Заявке " + Заявка + " не создан." , СтатусСообщения.Важное);
	КонецЕсли;
	
КонецПроцедуры

//Процедуры и функции создания платежного поручения
//
Процедура СоздатьППИ(СтрокаТаблицы, СтруктураПараметров)
	
	Перем мУчетнаяПолитикаПоНалоговомуУчету,мУчетнаяПолитикаПоБухгалтерскомуУчету;
	
	Заявка = СтрокаТаблицы.Документ;
	
	Если СтруктураПараметров.НеФормироватьПлатежныеПоручения Тогда 
		Возврат;
	КонецЕсли;
	
	мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	ПлатежноеПоручение = Документы.ПлатежноеПоручениеИсходящее.СоздатьДокумент();
	ПлатежноеПоручение.Дата = СтруктураПараметров.ДатаОплаты;
	ПлатежноеПоручение.Автор = Пользователи.ТекущийПользователь();
	ПлатежноеПоручение.ВидОперации = СтруктураПараметров.ВидОперацииППИ;
	ПлатежноеПоручение.ДокументОснование = Заявка;
	ПлатежноеПоручение.Организация = Заявка.Организация;
	ПлатежноеПоручение.СчетОрганизации = Заявка.СчетОрганизации;
	ПлатежноеПоручение.Контрагент = Заявка.Контрагент;
	ПлатежноеПоручение.СчетКонтрагента = Заявка.СчетКонтрагента;
	ПлатежноеПоручение.КодНазначенияПлатежа = СтруктураПараметров.КодНазначенияПлатежа;
	ПлатежноеПоручение.Ответственный = ПлатежноеПоручение.Автор;
	
	СтрокаПлатежа = ПлатежноеПоручение.РасшифровкаПлатежа.Добавить();
	
	ОпределитьСчетаУчетаРасчетовСКонтрагентом(ПлатежноеПоручение, СтрокаПлатежа);
	
	СтрокаПлатежа.бит_ЦФО = Заявка.ЦФО;
	СтрокаПлатежа.ДоговорКонтрагента = Заявка.Договор;
	Если Заявка.Бюджет.Количество() > 0 Тогда 
		ПлатежноеПоручение.СтатьяДвиженияДенежныхСредств = Заявка.Бюджет[0].Статья.СтатьяДДСбух;
		СтрокаПлатежа.СтатьяДвиженияДенежныхСредств = Заявка.Бюджет[0].Статья.СтатьяДДСбух;
	КонецЕсли;
	СтрокаПлатежа.СуммаПлатежа = Заявка.Сумма;
	СтрокаПлатежа.СтавкаНДС = СтрокаПлатежа.ДоговорКонтрагента.СтавкаНДС;
	СтрокаПлатежа.КратностьВзаиморасчетов = 1;
	СтрокаПлатежа.КурсВзаиморасчетов = 1;
	СтрокаПлатежа.СуммаВзаиморасчетов = Заявка.Сумма;
	ПлатежноеПоручение.СчетУчетаРасчетовСКонтрагентомБУ = СтрокаПлатежа.СчетУчетаРасчетовСКонтрагентомБУ;
	ПлатежноеПоручение.СчетУчетаРасчетовСКонтрагентомНУ = СтрокаПлатежа.СчетУчетаРасчетовСКонтрагентомНУ;
	
	ПлатежноеПоручение.СуммаДокумента = Заявка.Сумма;
	Документы.ПлатежноеПоручениеИсходящее.ЗаполнитьСчетаБанка(ПлатежноеПоручение.СчетОрганизации, ПлатежноеПоручение.СчетБанк);
	//ПлатежноеПоручение.ПересчитатьСуммуНДС(СтрокаПлатежа);
	ПлатежноеПоручение.НазначениеПлатежа = Заявка.НазначениеПлатежа;
	
	ПроцедурыНалоговогоУчета.ЗаполнитьВидУчетаНУ(ПлатежноеПоручение.УчитыватьКПН, ПлатежноеПоручение.ВидУчетаНУ);
	//ПлатежноеПоручение.ЕстьРасчетыСКонтрагентами = УправлениеДенежнымиСредствами.ЕстьРасчетыСКонтрагентами(ПлатежноеПоручение.ВидОперации);
	//ПлатежноеПоручение.ЕстьРасчетыПоКредитам     = УправлениеДенежнымиСредствами.ЕстьРасчетыПоКредитам(ПлатежноеПоручение.ВидОперации);
	//ПлатежноеПоручение.ЕстьРасчетыСКонтрагентами = УправлениеДенежнымиСредствамиСервер.ЕстьРасчетыСКонтрагентами(ПлатежноеПоручение.ВидОперации);
	//ПлатежноеПоручение.ЕстьРасчетыПоКредитам     = УправлениеДенежнымиСредствамиСервер.ЕстьРасчетыПоКредитам(ПлатежноеПоручение.ВидОперации);

	//УправлениеДенежнымиСредствами.ЗаполнитьРеквизитыРасчетногоДокумента(ПлатежноеПоручение,ПлатежноеПоручение.Автор,мВалютаРегламентированногоУчета,ПлатежноеПоручение.РасшифровкаПлатежа);
	УправлениеДенежнымиСредствамиСервер.ЗаполнитьРеквизитыРасчетногоДокумента(ПлатежноеПоручение,ПлатежноеПоручение.РасшифровкаПлатежа);
	
	Документы.ПлатежноеПоручениеИсходящее.ЗаполнитьПоДокументуОснованию(ПлатежноеПоручение, Заявка);
	
	//Обновим дату, т.к при вывзове предыдщих процедур автозаполнения, дата устанавливается текущая
	ПлатежноеПоручение.Дата = СтруктураПараметров.ДатаОплаты;
	ПлатежноеПоручение.УстановитьВремя(РежимАвтоВремя.ТекущееИлиПоследним);
	
	ПлатежноеПоручение.ДатаВалютирования = ПлатежноеПоручение.Дата;		
	
	//ПлатежноеПоручение.СчетБанк = ПроцедурыБухгалтерскогоУчета.ПолучитьСчетУчетаДенежныхСредств(ПлатежноеПоручение.СчетОрганизации, ПлатежноеПоручение.СчетБанк.Пустая()).СчетУчетаБУ;
	
	ПлатежноеПоручение.ДатаВыписки = ПлатежноеПоручение.Дата;
	
	ЗаполнитьТекстОтправителя(ПлатежноеПоручение);		
	ЗаполнитьТекстПолучателя(ПлатежноеПоручение);	
	
	ОрганизацияПлательщикНалогаНаПрибыль = ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(ПлатежноеПоручение.Организация, ПлатежноеПоручение.Дата);
	ПроцедурыНалоговогоУчета.ПриИзмененииПризнакаОтраженияВНалоговомУчете(ПлатежноеПоручение.Организация, ПлатежноеПоручение.Дата, ПлатежноеПоручение.УчитыватьКПН, Истина);	
	ПоддержкаУчетаВременныхРазниц = ОрганизацияПлательщикНалогаНаПрибыль И ПроцедурыНалоговогоУчета.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль(ПлатежноеПоручение.Организация, ПлатежноеПоручение.Дата);
	
	ПлатежноеПоручение.Записать(СтруктураПараметров.РежимЗаписиДокумента);
	СтрокаТаблицы.ПлатежныйДокумент = ПлатежноеПоручение.Ссылка;
	
КонецПроцедуры

//Процедуры и функции создания расходно-кассового ордера
//
Процедура СоздатьРКО(СтрокаТаблицы, СтруктураПараметров)
	
	Перем мУчетнаяПолитикаПоНалоговомуУчету,мУчетнаяПолитикаПоБухгалтерскомуУчету;
	
	Заявка = СтрокаТаблицы.Документ;
	
	Если СтруктураПараметров.НеФормироватьПлатежныеПоручения Тогда 
		Возврат;
	КонецЕсли;
	
	мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	РасходноКассовыйОрдер = Документы.РасходныйКассовыйОрдер.СоздатьДокумент();
	РасходноКассовыйОрдер.Дата = СтруктураПараметров.ДатаОплаты;
	РасходноКассовыйОрдер.Автор = Пользователи.ТекущийПользователь();
	РасходноКассовыйОрдер.ВидОперации = СтруктураПараметров.ВидОперацииППИ;
	РасходноКассовыйОрдер.ДокументОснование = Заявка;
	РасходноКассовыйОрдер.Организация = Заявка.Организация;
	РасходноКассовыйОрдер.СчетОрганизации = Заявка.СчетОрганизации;
	РасходноКассовыйОрдер.Контрагент = Заявка.Контрагент;
	РасходноКассовыйОрдер.Ответственный = РасходноКассовыйОрдер.Автор;
	
	СтрокаПлатежа = РасходноКассовыйОрдер.РасшифровкаПлатежа.Добавить();
	
	ОпределитьСчетаУчетаРасчетовСКонтрагентом(РасходноКассовыйОрдер, СтрокаПлатежа);
	
	СтрокаПлатежа.бит_ЦФО = Заявка.ЦФО;
	СтрокаПлатежа.ДоговорКонтрагента = Заявка.Договор;
	СтрокаПлатежа.КурсВзаиморасчетов = 1;
	СтрокаПлатежа.СуммаВзаиморасчетов = Заявка.Сумма;
	Если Заявка.Бюджет.Количество() > 0 Тогда 
		РасходноКассовыйОрдер.СтатьяДвиженияДенежныхСредств = Заявка.Бюджет[0].Статья.СтатьяДДСбух;
		СтрокаПлатежа.СтатьяДвиженияДенежныхСредств = Заявка.Бюджет[0].Статья.СтатьяДДСбух;
	КонецЕсли;
	СтрокаПлатежа.СуммаПлатежа = Заявка.Сумма;
	СтрокаПлатежа.СтавкаНДС = СтрокаПлатежа.ДоговорКонтрагента.СтавкаНДС;
	РасходноКассовыйОрдер.СчетУчетаРасчетовСКонтрагентомБУ = СтрокаПлатежа.СчетУчетаРасчетовСКонтрагентомБУ;
	РасходноКассовыйОрдер.СчетУчетаРасчетовСКонтрагентомНУ = СтрокаПлатежа.СчетУчетаРасчетовСКонтрагентомНУ;
	
	РасходноКассовыйОрдер.СуммаДокумента = Заявка.Сумма;
	РасходноКассовыйОрдер.ЗаполнитьСчетаУчетаРегл();
	
	ПроцедурыНалоговогоУчета.ЗаполнитьВидУчетаНУ(РасходноКассовыйОрдер.УчитыватьКПН, РасходноКассовыйОрдер.ВидУчетаНУ);
	//РасходноКассовыйОрдер.ЕстьРасчетыСКонтрагентами = УправлениеДенежнымиСредствами.ЕстьРасчетыСКонтрагентами(РасходноКассовыйОрдер.ВидОперации);
	//РасходноКассовыйОрдер.ЕстьРасчетыПоКредитам     = УправлениеДенежнымиСредствами.ЕстьРасчетыПоКредитам(РасходноКассовыйОрдер.ВидОперации);
	РасходноКассовыйОрдер.ЕстьРасчетыСКонтрагентами = УправлениеДенежнымиСредствамиСервер.ЕстьРасчетыСКонтрагентами(РасходноКассовыйОрдер.ВидОперации);
	РасходноКассовыйОрдер.ЕстьРасчетыПоКредитам     = УправлениеДенежнымиСредствамиСервер.ЕстьРасчетыПоКредитам(РасходноКассовыйОрдер.ВидОперации);
	
	//УправлениеДенежнымиСредствами.ЗаполнитьРеквизитыРасчетногоДокумента(РасходноКассовыйОрдер,РасходноКассовыйОрдер.Автор,мВалютаРегламентированногоУчета,РасходноКассовыйОрдер.РасшифровкаПлатежа);
	УправлениеДенежнымиСредствамиСервер.ЗаполнитьРеквизитыРасчетногоДокумента(РасходноКассовыйОрдер,РасходноКассовыйОрдер.РасшифровкаПлатежа);
	
	РасходноКассовыйОрдер.ЗаполнитьПоДокументуОснования(Заявка);
	
	//Обновим дату, т.к при вывзове предыдщих процедур автозаполнения, дата устанавливается текущая
	РасходноКассовыйОрдер.Дата = СтруктураПараметров.ДатаОплаты;
	РасходноКассовыйОрдер.УстановитьВремя(РежимАвтоВремя.ТекущееИлиПоследним);
	
	ОрганизацияПлательщикНалогаНаПрибыль = ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(РасходноКассовыйОрдер.Организация, РасходноКассовыйОрдер.Дата, мУчетнаяПолитикаПоНалоговомуУчету);
	ПроцедурыНалоговогоУчета.ПриИзмененииПризнакаОтраженияВНалоговомУчете(РасходноКассовыйОрдер.Организация, РасходноКассовыйОрдер.Дата, РасходноКассовыйОрдер.УчитыватьКПН,  мУчетнаяПолитикаПоНалоговомуУчету);	
	ПоддержкаУчетаВременныхРазниц = ОрганизацияПлательщикНалогаНаПрибыль И ПроцедурыНалоговогоУчета.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль(РасходноКассовыйОрдер.Организация, РасходноКассовыйОрдер.Дата, мУчетнаяПолитикаПоБухгалтерскомуУчету);
	
	РасходноКассовыйОрдер.Записать(СтруктураПараметров.РежимЗаписиДокумента);
	СтрокаТаблицы.ПлатежныйДокумент = РасходноКассовыйОрдер.Ссылка;
	
КонецПроцедуры

//Вспомогательные процедуры и функции по формированию платежных документов
//
Процедура ОпределитьСчетаУчетаРасчетовСКонтрагентом(ПлатежноеПоручение, СтрокаПлатеж)
	
	Если НЕ (ПлатежноеПоручение.ВидОперации = Перечисления.ВидыОперацийППИсходящее.РасчетыПоКредитамИЗаймамСКонтрагентами) Тогда
		
		//СчетаУчета = УправлениеВзаиморасчетами.ПолучитьСчетаРасчетовСКонтрагентом(ПлатежноеПоручение.Организация, ПлатежноеПоручение.Контрагент, СтрокаПлатеж.ДоговорКонтрагента);
		СчетаУчета = УправлениеВзаиморасчетамиСервер.ПолучитьСчетаРасчетовСКонтрагентом(ПлатежноеПоручение.Организация, ПлатежноеПоручение.Контрагент, СтрокаПлатеж.ДоговорКонтрагента);
			
		Если ПлатежноеПоручение.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ВозвратДенежныхСредствПокупателю тогда
			
			СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентомБУ    = СчетаУчета.СчетРасчетовПокупателя;
			СтрокаПлатеж.СчетУчетаРасчетовПоАвансам        = СчетаУчета.СчетВозвратовПокупателя;
			
		ИначеЕсли ПлатежноеПоручение.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПрочиеРасчетыСКонтрагентами тогда
			
			СтрокаПлатеж.СчетУчетаРасчетовПоАвансам        = ПланыСчетов.Типовой.ПустаяСсылка();						
			
		Иначе
			
			СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентомБУ    = СчетаУчета.СчетРасчетов;
			СтрокаПлатеж.СчетУчетаРасчетовПоАвансам        = СчетаУчета.СчетАвансов;			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьТекстПолучателя(ПлатежныйДокумент, ЗаполнитьРНН = Истина, ЗаполнитьТекстПолучателя = Истина)
	// Определяем контрагента, реквизиты которого нужно заполнить
	Если ПлатежныйДокумент.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет Тогда
		// реквизиты СП или самой организации
		КонтрагентДляПечати = ОбщегоНазначенияБК.ПолучитьСтруктурнуюЕдиницу(ПлатежныйДокумент.Организация, ПлатежныйДокумент.СтруктурноеПодразделениеПолучатель);		
	Иначе
		КонтрагентДляПечати = ПлатежныйДокумент.Контрагент;
	КонецЕсли;
	
	СведенияОКонтрагентДляПечати = ОбщегоНазначенияБКВызовСервера.СведенияОЮрФизЛице(КонтрагентДляПечати, ПлатежныйДокумент.Дата);
	
	// Заполнение РНН
	Если ЗаполнитьРНН Тогда
		ДатаПрекращенияВыводаРНН = Константы.ДатаПрекращенияВыводаРННВПервичныхДокументах.Получить();
		ВыводитьРНН = НЕ ЗначениеЗаполнено(ДатаПрекращенияВыводаРНН) ИЛИ ПлатежныйДокумент.ДатаВыписки<ДатаПрекращенияВыводаРНН;
		
		Если ЗначениеЗаполнено(КонтрагентДляПечати) Тогда
			Если ВыводитьРНН Тогда 
				ПлатежныйДокумент.РННПолучателя = СведенияОКонтрагентДляПечати.РНН;
			Иначе 
				ПлатежныйДокумент.РННПолучателя = СведенияОКонтрагентДляПечати.БИН_ИИН;
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;
	
	// Заполнение текста получателя
	Если ЗаполнитьТекстПолучателя Тогда
		Если ЗначениеЗаполнено(ПлатежныйДокумент.СчетКонтрагента.ТекстКорреспондента) Тогда
			ПлатежныйДокумент.ТекстПолучателя = ПлатежныйДокумент.СчетКонтрагента.ТекстКорреспондента;
		Иначе
			ПлатежныйДокумент.ТекстПолучателя = СведенияОКонтрагентДляПечати.ПолноеНаименование;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры  // ЗаполнитьТекстПолучателя

Процедура ЗаполнитьТекстОтправителя(ПлатежныйДокумент, ЗаполнитьРНН = Истина, ЗаполнитьТекстОтправителя = Истина)
	// Определяем  реквизиты СП или самой организации нужно использовать
	ОрганизацияДляПечати = ОбщегоНазначенияБК.ПолучитьСтруктурнуюЕдиницу(ПлатежныйДокумент.Организация, ПлатежныйДокумент.СтруктурноеПодразделениеОтправитель);		
	СведенияОбОрганизацииДляПечати = ОбщегоНазначенияБКВызовСервера.СведенияОЮрФизЛице(ОрганизацияДляПечати, ПлатежныйДокумент.Дата);
	// Заполнение РНН
	Если ЗаполнитьРНН Тогда
		ДатаПрекращенияВыводаРНН = Константы.ДатаПрекращенияВыводаРННВПервичныхДокументах.Получить();
		ВыводитьРНН = НЕ ЗначениеЗаполнено(ДатаПрекращенияВыводаРНН) ИЛИ ПлатежныйДокумент.ДатаВыписки<ДатаПрекращенияВыводаРНН;
		
		Если ЗначениеЗаполнено(ОрганизацияДляПечати) Тогда
			Если ВыводитьРНН Тогда 
				ПлатежныйДокумент.РННПлательщика = СведенияОбОрганизацииДляПечати.РНН;
			Иначе 
				ПлатежныйДокумент.РННПлательщика = СведенияОбОрганизацииДляПечати.БИН_ИИН;
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;
	
	// Заполнение текста отправителя
	Если ЗаполнитьТекстОтправителя Тогда
		Если ЗначениеЗаполнено(ПлатежныйДокумент.СчетОрганизации.ТекстКорреспондента) Тогда
			ПлатежныйДокумент.ТекстПлательщика = ПлатежныйДокумент.СчетОрганизации.ТекстКорреспондента;
		Иначе
			ПлатежныйДокумент.ТекстПлательщика = СведенияОбОрганизацииДляПечати.ПолноеНаименование;		
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры  // ЗаполнитьТекстПолучателя


//ПРОЦЕДУРЫ И ФУНКЦИЯ ПОДПИСОК НА СОБЫТИЯ
/////////////////////////////////////////

//При провдении платежный документов обработка статусов и добавление движений
//
Процедура ПриПроведенииДокументовОсновнияДляОплатыОбработкаПроведения(Источник, Отказ, РежимПроведения) Экспорт
	// Контротек - разработано 14.08.2010 по ТЗ №5 > >
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.ПлатежноеПоручениеИсходящее")
		Или ТипЗнч(Источник) = Тип("ДокументОбъект.РасходныйКассовыйОрдер") Тогда
		
		Если Не ЗначениеЗаполнено(Источник.ДокументОснование) Тогда 
			Возврат
		КонецЕсли;
		
		Движения = Источник.Движения;
		Движения.ОснованияДляОплаты.Записывать = Истина;
		Движения.ОснованияДляОплаты.Очистить();
		// Движения по документам-основаниям
		Для Каждого ТекСтрокаБюджет Из Источник.ДокументОснование.Основание Цикл //заполняем регистр из заявки, для перепроведения документов, потом можно вернуть, ls, 24/09/10
			Если ТекСтрокаБюджет.КОплате тогда 
				Движение = Движения.ОснованияДляОплаты.Добавить();
				Движение.ВидДвижения       = ВидДвиженияНакопления.Расход;
				Движение.Период            = Источник.Дата;
				Движение.Договор           = Источник.ДокументОснование.Договор;
				Движение.ДокументОснование = ТекСтрокаБюджет.Документ;
				Движение.Сумма             = ТекСтрокаБюджет.Сумма;
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		Если Источник.ДоговорКонтрагента.ТипОплатыПоДоговору = Перечисления.ТипыДоговоровПоОплате.ОплатаПоФакту 
			Или Источник.ДоговорКонтрагента.ТипОплатыПоДоговору = Перечисления.ТипыДоговоровПоОплате.ПредоплатноФакторный Тогда
			Движения = Источник.Движения;
			Движения.ОснованияДляОплаты.Записывать = Истина;
			Движения.ОснованияДляОплаты.Очистить();
			Движение = Движения.ОснованияДляОплаты.Добавить();
			Движение.Период            = Источник.Дата;
			Движение.ВидДвижения       = ВидДвиженияНакопления.Приход;
			Движение.Договор           = Источник.ДоговорКонтрагента;
			Движение.ДокументОснование = Источник.Ссылка;
			Движение.Сумма             = Источник.СуммаДокумента;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписиДокументовОплатыПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	//Контротек. Добавлено для установки даты оплаты по данным платежного документа. 31.08.2016
	Если ТипЗнч(Источник.ДокументОснование) = Тип("ДокументСсылка.ЗаявкаНаОплату") Тогда  
		
		Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда 
			Если ?(ТипЗнч(Источник) = Тип("ДокументОбъект.РасходныйКассовыйОрдер"), Истина, Источник.Оплачено) Тогда 
				ЗаявкаОбъект = Источник.ДокументОснование.ПолучитьОбъект();
				ЗаявкаОбъект.ДатаОплаты = Источник.Дата;
				
				//Если в заявке не верный статус, то установим верный
				ЗаявкаОбъект.Статус = Справочники.СтатусыЗаявокНаОплату.Оплачена;
				ЗаявкаОбъект.Записать();
			Иначе
				ЗаявкаОбъект = Источник.ДокументОснование.ПолучитьОбъект();
				
				//Если в заявке не верный статус, то установим верный
				ЗаявкаОбъект.Статус = Справочники.СтатусыЗаявокНаОплату.ОжидаетОплаты;
				ЗаявкаОбъект.Записать();
			КонецЕсли;
		ИначеЕсли РежимЗаписи = РежимЗаписиДокумента.Запись Тогда 
			ЗаявкаОбъект = Источник.ДокументОснование.ПолучитьОбъект();
			
			//Если в заявке не верный статус, то установим верный
			ЗаявкаОбъект.Статус = Справочники.СтатусыЗаявокНаОплату.ОжидаетОплаты;
			ЗаявкаОбъект.Записать();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура КТ_КонтрольКорректностиВерсийБюджетаПередЗаписью(Источник, Отказ) Экспорт
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	Если ТипЗнч(Источник.Ссылка) = Тип("ДокументСсылка.КТ_НормыРасходаТМЦ") Тогда 
		Возврат;
	КонецЕсли;
	Мд = Источник.Метаданные();
	ЭтоСправочник = Метаданные.Справочники.Содержит(Мд);
	Если Мд.Реквизиты.Найти("ВерсияБюджета")=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Мд.Реквизиты.Найти("ДоступЗакрыт")<>Неопределено Тогда
		Если РольДоступна("АдминистраторОМТО") Тогда
			Если Источник.ДоступЗакрыт И Источник.Ссылка.ДоступЗакрыт Тогда
				Отказ = Истина;
				Сообщить("Доступ к """+Источник+""" на изменение закрыт!", СтатусСообщения.Внимание);
				Возврат;
			КонецЕсли;
		ИначеЕсли Не (РольДоступна("ПользовательБюджетирования")
			Или РольДоступна("ИнициаторЗаявокТМЦ")) Или Источник.ДоступЗакрыт Тогда
			Отказ = Истина;
			Сообщить("Доступ к """+Источник+""" на изменение закрыт!", СтатусСообщения.Внимание);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	текВерсия = Источник.ВерсияБюджета;
	Если Не ЗначениеЗаполнено(текВерсия) Тогда
		Отказ = Истина;
		Сообщить("Не выбрана версия бюджета!", СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли;
	
	Если ЭтоСправочник И Не Мд.АвтоНумерация И Не Мд.КонтрольУникальности И Мд.ДлинаКода>0 Тогда
		Запрос = Новый Запрос("ВЫБРАТЬ "+Мд.ПолноеИмя()+".Ссылка ГДЕ Код = &Код И НЕ Ссылка = &Ссылка И ВерсияБюджета = &ВерсияБюджета");
		Запрос.УстановитьПараметр("Код", Источник.Код);
		Запрос.УстановитьПараметр("Ссылка", Источник.Ссылка);
		Запрос.УстановитьПараметр("ВерсияБюджета", Источник.ВерсияБюджета);
		Выб = Запрос.Выполнить().Выбрать();
		Если Выб.Следующий() Тогда
			Отказ = Истина;
			Сообщить("Объект с кодом "+СокрЛП(Источник.Код)+" уже занесен в базу под версией "+Источник.ВерсияБюджета);
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(Источник.Ссылка) <> Тип("ДокументСсылка.КТ_БюджетНаМатериалы") 
		И ТипЗнч(Источник.Ссылка) <> Тип("ДокументСсылка.КТ_БюджетНаУслуги") 
		И ТипЗнч(Источник.Ссылка) <> Тип("ДокументСсылка.КТ_БюджетНаОС")
		И ТипЗнч(Источник.Ссылка) <> Тип("ДокументСсылка.КТ_НормыРасходаТМЦ")
		И ТипЗнч(Источник.Ссылка) <> Тип("ДокументСсылка.КТ_НормыРасходаТМЦПланируемые")
		И ТипЗнч(Источник.Ссылка) <> Тип("ДокументСсылка.КТ_НормыАмортизацииОСиНМА")
		И ТипЗнч(Источник.Ссылка) <> Тип("ДокументСсылка.КТ_ГодоваяЗаявкаНаЗакупМатериалов")
		И ТипЗнч(Источник.Ссылка) <> Тип("ДокументСсылка.КТ_ГодоваяЗаявкаНаЗакупОС") 
		И ТипЗнч(Источник.Ссылка) <> Тип("ДокументСсылка.КТ_ГодоваяЗаявкаНаЗакупУслуг")
		И ТипЗнч(Источник.Ссылка) <> Тип("ДокументСсылка.ЗаявкаНаМатериалыbug")
		И ТипЗнч(Источник.Ссылка) <> Тип("ДокументСсылка.РасходыПоНалогам") 
		И ТипЗнч(Источник.Ссылка) <> Тип("ДокументСсылка.КТ_УстановкаЦенТРУ") Тогда
		Если Не Источник.Год=текВерсия.Год Тогда
			Если ТипЗнч(Источник.Год) = Тип("Строка") Тогда 
				Источник.Год = СтрЗаменить(текВерсия.Год, Символы.НПП, "");
			Иначе
				Источник.Год = текВерсия.Год;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Для каждого Рекв Из Мд.Реквизиты Цикл
		МдРекв = Метаданные.НайтиПоТипу(ТипЗнч(Источник[Рекв.Имя]));
		Если МдРекв=Неопределено Тогда
			Продолжить;
		ИначеЕсли Не (Метаданные.Справочники.Содержит(МдРекв) Или Метаданные.Документы.Содержит(МдРекв)) Тогда
			Продолжить;
		ИначеЕсли МдРекв.Реквизиты.Найти("ВерсияБюджета")=Неопределено Тогда
			Продолжить;
		ИначеЕсли Не ЗначениеЗаполнено(Источник[Рекв.Имя].ВерсияБюджета) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не текВерсия=Источник[Рекв.Имя].ВерсияБюджета Тогда
			Отказ = Истина;
			Сообщить("Не соответствие версии бюджета в поле """+Рекв.Синоним+""" - """+Источник[Рекв.Имя]+"""!", СтатусСообщения.Внимание);
		КонецЕсли;
	КонецЦикла;
	
	Для каждого Тч Из Мд.ТабличныеЧасти Цикл
		МасРекв = Новый Массив;
		Для каждого Рекв Из Тч.Реквизиты Цикл
			рЕсть = Ложь;
			Для каждого пмТип Из Рекв.Тип.Типы() Цикл
				МдРекв = Метаданные.НайтиПоТипу(пмТип);
				Если МдРекв=Неопределено Тогда
					Продолжить;
				ИначеЕсли Не (Метаданные.Справочники.Содержит(МдРекв) Или Метаданные.Документы.Содержит(МдРекв)) Тогда
					Продолжить;
				ИначеЕсли МдРекв.Реквизиты.Найти("ВерсияБюджета")=Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				рЕсть = Истина;
			КонецЦикла;
			Если рЕсть Тогда
				МасРекв.Добавить(Рекв);
			КонецЕсли;
		КонецЦикла;
		
		Если Не МасРекв.Количество()=0 Тогда
			Для каждого пмСтр Из Источник[Тч.Имя] Цикл
				Для каждого Рекв Из МасРекв Цикл
					МдРекв = Метаданные.НайтиПоТипу(ТипЗнч(пмСтр[Рекв.Имя]));
					Если МдРекв=Неопределено Тогда
						Продолжить;
					ИначеЕсли Не (Метаданные.Справочники.Содержит(МдРекв) Или Метаданные.Документы.Содержит(МдРекв)) Тогда
						Продолжить;
					ИначеЕсли МдРекв.Реквизиты.Найти("ВерсияБюджета")=Неопределено Тогда
						Продолжить;
					ИначеЕсли Не ЗначениеЗаполнено(пмСтр[Рекв.Имя].ВерсияБюджета) Тогда
						Продолжить;
					КонецЕсли;
					
					Если Не текВерсия=пмСтр[Рекв.Имя].ВерсияБюджета Тогда
						Отказ = Истина;
						Сообщить("Не соответствие версии бюджета в строке "+пмСтр.НомерСтроки+" таб. части """+Тч.Синоним+""" колонке """+Рекв.Синоним+""" - """+пмСтр[Рекв.Имя]+"""!", СтатусСообщения.Внимание);
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура КТ_КонтрольСвязейСправочниковПередЗаписью(Источник, Отказ) Экспорт
	Если Отказ Или Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Мд = Источник.Метаданные();
	Таблица = Мд.ТабличныеЧасти.Получить(0);
	Реквизит = Таблица.Реквизиты.Получить(0).Имя;
	
	МасЕсть = Источник[Таблица.Имя].ВыгрузитьКолонку(Реквизит);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Источник.Ссылка);
	Запрос.УстановитьПараметр("МасЕсть", МасЕсть);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Спр.Ссылка КАК Ссылка,
	|	Спр."+Реквизит+" КАК Значение
	|ИЗ
	|	"+Мд.ПолноеИмя()+"."+Таблица.Имя+" КАК Спр
	|ГДЕ
	|	Спр."+Реквизит+" В(&МасЕсть)
	|	И Спр.Ссылка <> &Ссылка
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка";
	Выб = Запрос.Выполнить().Выбрать();
	Если Не Выб.Количество()=0 Тогда
		Отказ = Истина;
		Пока Выб.Следующий() Цикл
			Сообщить("В """+Выб.Ссылка+""" с кодом -"""+Выб.Ссылка.Код+""" уже выбрано значение """+Выб.Значение+"""");
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

//ПРОЦЕДУРЫ И ФУНКЦИЯ ПРОВЕРКИ ПРАВ ДОСТУПА
/////////////////////////////////////////////
Функция РольАдминистратор() Экспорт
	Возврат РольДоступна(Метаданные.Роли.ЗаявкиНаОплатуАдминистратор);
КонецФункции

Функция РольПолныеПрава() Экспорт
	Возврат РольДоступна(Метаданные.Роли.ЗаявкиНаОплатуПолныеПрава);
КонецФункции

Функция РольПользователь() Экспорт
	Возврат РольДоступна(Метаданные.Роли.ЗаявкиНаОплатуПользователь);
КонецФункции

Функция РольОперационист() Экспорт
	Возврат РольДоступна(Метаданные.Роли.ЗаявкиНаОплатуОперационист);
КонецФункции


//Функция возвращает остаток по договору
//
Функция ПолучитьОстатокПоДоговору(Договор) Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СУММА(ДоговорыКонтрагентов.СуммаДоговора + ЕСТЬNULL(ВходящиеПлатежи.СуммаПлатежа, 0) - ЕСТЬNULL(ИсходящиеПлатежи.СуммаПлатежа, 0)) КАК СуммаОстаток
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			СУММА(ПлатежноеПоручениеВходящееРасшифровкаПлатежа.СуммаПлатежа) КАК СуммаПлатежа,
		|			ПлатежноеПоручениеВходящееРасшифровкаПлатежа.ДоговорКонтрагента КАК ДоговорКонтрагента
		|		ИЗ
		|			Документ.ПлатежноеПоручениеВходящее.РасшифровкаПлатежа КАК ПлатежноеПоручениеВходящееРасшифровкаПлатежа
		|		ГДЕ
		|			ПлатежноеПоручениеВходящееРасшифровкаПлатежа.Ссылка.Оплачено
		|			И ПлатежноеПоручениеВходящееРасшифровкаПлатежа.Ссылка.Проведен
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ПлатежноеПоручениеВходящееРасшифровкаПлатежа.ДоговорКонтрагента
		|		
		|		ОБЪЕДИНИТЬ ВСЕ
		|		
		|		ВЫБРАТЬ
		|			СУММА(ПриходныйКассовыйОрдерРасшифровкаПлатежа.СуммаПлатежа),
		|			ПриходныйКассовыйОрдерРасшифровкаПлатежа.ДоговорКонтрагента
		|		ИЗ
		|			Документ.ПриходныйКассовыйОрдер.РасшифровкаПлатежа КАК ПриходныйКассовыйОрдерРасшифровкаПлатежа
		|		ГДЕ
		|			ПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.Проведен
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ПриходныйКассовыйОрдерРасшифровкаПлатежа.ДоговорКонтрагента
		|		
		|		ОБЪЕДИНИТЬ ВСЕ
		|		
		|		ВЫБРАТЬ
		|			СУММА(ПлатежныйОрдерПоступлениеДенежныхСредствРасшифровкаПлатежа.СуммаПлатежа),
		|			ПлатежныйОрдерПоступлениеДенежныхСредствРасшифровкаПлатежа.ДоговорКонтрагента
		|		ИЗ
		|			Документ.ПлатежныйОрдерПоступлениеДенежныхСредств.РасшифровкаПлатежа КАК ПлатежныйОрдерПоступлениеДенежныхСредствРасшифровкаПлатежа
		|		ГДЕ
		|			ПлатежныйОрдерПоступлениеДенежныхСредствРасшифровкаПлатежа.Ссылка.Оплачено
		|			И ПлатежныйОрдерПоступлениеДенежныхСредствРасшифровкаПлатежа.Ссылка.Проведен
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ПлатежныйОрдерПоступлениеДенежныхСредствРасшифровкаПлатежа.ДоговорКонтрагента) КАК ВходящиеПлатежи
		|		ПО ДоговорыКонтрагентов.Ссылка = ВходящиеПлатежи.ДоговорКонтрагента
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|			СУММА(ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.СуммаПлатежа) КАК СуммаПлатежа
		|		ИЗ
		|			Документ.ПлатежноеПоручениеИсходящее.РасшифровкаПлатежа КАК ПлатежноеПоручениеИсходящееРасшифровкаПлатежа
		|		ГДЕ
		|			ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка.Оплачено
		|			И ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка.Проведен
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.ДоговорКонтрагента
		|		
		|		ОБЪЕДИНИТЬ ВСЕ
		|		
		|		ВЫБРАТЬ
		|			РасходныйКассовыйОрдерРасшифровкаПлатежа.ДоговорКонтрагента,
		|			СУММА(РасходныйКассовыйОрдерРасшифровкаПлатежа.СуммаПлатежа)
		|		ИЗ
		|			Документ.РасходныйКассовыйОрдер.РасшифровкаПлатежа КАК РасходныйКассовыйОрдерРасшифровкаПлатежа
		|		ГДЕ
		|			РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.Проведен
		|		
		|		СГРУППИРОВАТЬ ПО
		|			РасходныйКассовыйОрдерРасшифровкаПлатежа.ДоговорКонтрагента
		|		
		|		ОБЪЕДИНИТЬ ВСЕ
		|		
		|		ВЫБРАТЬ
		|			ПлатежныйОрдерСписаниеДенежныхСредствРасшифровкаПлатежа.ДоговорКонтрагента,
		|			СУММА(ПлатежныйОрдерСписаниеДенежныхСредствРасшифровкаПлатежа.СуммаПлатежа)
		|		ИЗ
		|			Документ.ПлатежныйОрдерСписаниеДенежныхСредств.РасшифровкаПлатежа КАК ПлатежныйОрдерСписаниеДенежныхСредствРасшифровкаПлатежа
		|		ГДЕ
		|			ПлатежныйОрдерСписаниеДенежныхСредствРасшифровкаПлатежа.Ссылка.Оплачено
		|			И ПлатежныйОрдерСписаниеДенежныхСредствРасшифровкаПлатежа.Ссылка.Проведен
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ПлатежныйОрдерСписаниеДенежныхСредствРасшифровкаПлатежа.ДоговорКонтрагента
		|		
		|		ОБЪЕДИНИТЬ ВСЕ
		|		
		|		ВЫБРАТЬ
		|			ПлатежноеПоручениеИсходящее.СубконтоДтБУ2,
		|			СУММА(ПлатежноеПоручениеИсходящее.СуммаДокумента)
		|		ИЗ
		|			Документ.ПлатежноеПоручениеИсходящее КАК ПлатежноеПоручениеИсходящее
		|		ГДЕ
		|			ПлатежноеПоручениеИсходящее.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийППИсходящее.ПрочееСписаниеБезналичныхДенежныхСредств)
		|			И ПлатежноеПоручениеИсходящее.Ссылка.Проведен
		|			И ПлатежноеПоручениеИсходящее.Ссылка.Оплачено
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ПлатежноеПоручениеИсходящее.СубконтоДтБУ2) КАК ИсходящиеПлатежи
		|		ПО ДоговорыКонтрагентов.Ссылка = ИсходящиеПлатежи.ДоговорКонтрагента
		|ГДЕ
		|	ДоговорыКонтрагентов.Ссылка = &ДоговорКонтрагента";
	
	Запрос.УстановитьПараметр("ДоговорКонтрагента", Договор);
	
	ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда 
		Возврат ВыборкаДетальныеЗаписи.СуммаОстаток;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции // ПолучитьОстатокПоДоговору(Договор)

Функция ВедетсяКонтрольПоДоговору(Договор) Экспорт
	
	Возврат Договор.НеКонтролировать;
	
КонецФункции


////////////////////////////////////////////////////////
//МТО///////////////////////////////////////////////////
////////////////////////////////////////////////////////


Функция ПолучитьСтавкуНалога(ВерсияБюджета, НаименованиеНалога) Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СтавкиНалоговbug.Ставка
		|ИЗ
		|	Справочник.СтавкиНалоговbug КАК СтавкиНалоговbug
		|ГДЕ
		|	СтавкиНалоговbug.Наименование = &Наименование
		|	И СтавкиНалоговbug.ВерсияБюджета = &ВерсияБюджета
		|	И НЕ СтавкиНалоговbug.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("ВерсияБюджета", ВерсияБюджета);
	Запрос.УстановитьПараметр("Наименование", НаименованиеНалога);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.Ставка;
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции

//Формирование даты из версии
Функция СформироватьДатуПоВерсииБюджета(ВерсияБюджета) Экспорт 
	
	Возврат Дата(ВерсияБюджета.Год, 12, 31);
	
КонецФункции


////////////////////////////////////////////////////////
//ЗАГРУЗЧИКИ////////////////////////////////////////////
////////////////////////////////////////////////////////

Функция ПолучитьПараметрЗагрузки(Объект, Параметр) Экспорт 

	ИмяОбъекта = Объект.Метаданные().Имя;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КТ_ПараметрыЗагрузкиДанных.ЗначениеПараметра
		|ИЗ
		|	РегистрСведений.КТ_ПараметрыЗагрузкиДанных КАК КТ_ПараметрыЗагрузкиДанных
		|ГДЕ
		|	КТ_ПараметрыЗагрузкиДанных.Объект = &Объект
		|	И КТ_ПараметрыЗагрузкиДанных.ПараметрЗагрузкиДанных = &ПараметрЗагрузкиДанных";
	
	Запрос.УстановитьПараметр("Объект", ИмяОбъекта);
	Запрос.УстановитьПараметр("ПараметрЗагрузкиДанных", Параметр);
	
	ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда 
	
		Возврат ВыборкаДетальныеЗаписи.ЗначениеПараметра;
		
	Иначе
		
		Возврат "";
	
	КонецЕсли;
	
КонецФункции

Процедура СохранитьПараметрЗагрузкиДанных(Объект, Параметр, ЗначениеПараметра) Экспорт
	
	ИмяОбъекта = Объект.Метаданные().Имя;

	НаборПараметров = РегистрыСведений.КТ_ПараметрыЗагрузкиДанных.СоздатьНаборЗаписей();
	НаборПараметров.Отбор.Объект.Установить(ИмяОбъекта);
	НаборПараметров.Отбор.ПараметрЗагрузкиДанных.Установить(Параметр);
	НаборПараметров.Прочитать();
	НаборПараметров.Очистить();
	НовыйПараметр = НаборПараметров.Добавить();
	НовыйПараметр.Объект = ИмяОбъекта;
	НовыйПараметр.ПараметрЗагрузкиДанных = Параметр;
	НовыйПараметр.ЗначениеПараметра = ЗначениеПараметра;
	НаборПараметров.Записать();

КонецПроцедуры

Функция НайтиПоказатель(Владелец, ПараметрПоиска) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	КТ_ПоказателиПараметрыПоиска.Ссылка
		|ИЗ
		|	Справочник.КТ_Показатели.ПараметрыПоиска КАК КТ_ПоказателиПараметрыПоиска
		|ГДЕ
		|	КТ_ПоказателиПараметрыПоиска.Значение = &Значение
		|	И КТ_ПоказателиПараметрыПоиска.Принадлежит = &Принадлежит";
	
	Запрос.УстановитьПараметр("Значение", ПараметрПоиска);
	Запрос.УстановитьПараметр("Принадлежит", Владелец);
	
	ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	Иначе
		Возврат Справочники.КТ_Показатели.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

Функция СохранитьПоказатель(Владелец, ПараметрПоиска) Экспорт
	
	НайденныйПоказатель = Справочники.КТ_Показатели.СоздатьЭлемент();
	НайденныйПоказатель.Наименование = ПараметрПоиска;
	НовыйПараметр = НайденныйПоказатель.ПараметрыПоиска.Добавить();
	НовыйПараметр.Значение = ПараметрПоиска;
	НовыйПараметр.Принадлежит = Владелец;
	НайденныйПоказатель.Записать();
	
	Возврат НайденныйПоказатель;
	
КонецФункции

Функция ПолучитьПоказатель(Владелец, ТипПоказателя) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	КТ_ПоказателиПараметрыПоиска.Ссылка
		|ИЗ
		|	Справочник.КТ_Показатели.ПараметрыПоиска КАК КТ_ПоказателиПараметрыПоиска
		|ГДЕ
		|	КТ_ПоказателиПараметрыПоиска.Принадлежит = &Принадлежит
		|	И КТ_ПоказателиПараметрыПоиска.Ссылка.ТипПоказателя = &ТипПоказателя";
	
	Запрос.УстановитьПараметр("ТипПоказателя", ТипПоказателя);
	Запрос.УстановитьПараметр("Принадлежит", Владелец);
	
	ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	Иначе
		Возврат Справочники.КТ_Показатели.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

//Получить цену
Функция ПолучитьЦенуТРУ(ТРУ, Дата, ВерсияБюджета) Экспорт 

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА Константы.мтоИспользоватьСуммыСНДС
		|			ТОГДА КТ_ЦеныТРУСрезПоследних.ЦенаБезНДС
		|		ИНАЧЕ КТ_ЦеныТРУСрезПоследних.ЦенаСНДС
		|	КОНЕЦ КАК Цена
		|ИЗ
		|	РегистрСведений.КТ_ЦеныТРУ.СрезПоследних(&ДатаСреза, ТРУ = &ТРУ И ВерсияБюджета = &ВерсияБюджета) КАК КТ_ЦеныТРУСрезПоследних,
		|	Константы КАК Константы";
	
	Запрос.УстановитьПараметр("ДатаСреза"    , Дата);
	Запрос.УстановитьПараметр("ТРУ"          , ТРУ);
	Запрос.УстановитьПараметр("ВерсияБюджета", ВерсияБюджета);
	
	ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда 
		Возврат ВыборкаДетальныеЗаписи.Цена;
	Иначе
		Возврат 0;
	КонецЕсли;

КонецФункции

//Получить цену без НДС
Функция ПолучитьЦенуБезНДСТРУ(ТРУ, Дата, ВерсияБюджета) Экспорт 

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КТ_ЦеныТРУСрезПоследних.ЦенаБезНДС
		|ИЗ
		|	РегистрСведений.КТ_ЦеныТРУ.СрезПоследних(&ДатаСреза, ТРУ = &ТРУ И ВерсияБюджета = &ВерсияБюджета) КАК КТ_ЦеныТРУСрезПоследних";
	
	Запрос.УстановитьПараметр("ДатаСреза", Дата);
	Запрос.УстановитьПараметр("ТРУ", ТРУ);
	Запрос.УстановитьПараметр("ВерсияБюджета", ВерсияБюджета);
	
	ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда 
		Возврат ВыборкаДетальныеЗаписи.ЦенаБезНДС;
	Иначе
		Возврат 0;
	КонецЕсли;

КонецФункции

//Получить цену с НДС
Функция ПолучитьЦенуСНДСТРУ(ТРУ, Дата, ВерсияБюджета) Экспорт 

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КТ_ЦеныТРУСрезПоследних.ЦенаСНДС
		|ИЗ
		|	РегистрСведений.КТ_ЦеныТРУ.СрезПоследних(&ДатаСреза, ТРУ = &ТРУ И ВерсияБюджета = &ВерсияБюджета) КАК КТ_ЦеныТРУСрезПоследних";
	
	Запрос.УстановитьПараметр("ДатаСреза", Дата);
	Запрос.УстановитьПараметр("ТРУ", ТРУ);
	Запрос.УстановитьПараметр("ВерсияБюджета", ВерсияБюджета);
	
	ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда 
		Возврат ВыборкаДетальныеЗаписи.ЦенаСНДС;
	Иначе
		Возврат 0;
	КонецЕсли;

КонецФункции

//Получить ставку НДС номенклатуры
Функция ПолучитьСтавкуНДСТРУ(ТРУ, Дата, ВерсияБюджета) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КТ_ЦеныТРУСрезПоследних.СтавкаНДС
		|ИЗ
		|	РегистрСведений.КТ_ЦеныТРУ.СрезПоследних(&ДатаСреза, ТРУ = &ТРУ И ВерсияБюджета = &ВерсияБюджета) КАК КТ_ЦеныТРУСрезПоследних";
	
	Запрос.УстановитьПараметр("ДатаСреза", Дата);
	Запрос.УстановитьПараметр("ТРУ", ТРУ);
	Запрос.УстановитьПараметр("ВерсияБюджета", ВерсияБюджета);
	
	ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда 
		Возврат ВыборкаДетальныеЗаписи.СтавкаНДС.Ставка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции


Функция ПолучитьСтатусУчастника(Участник) Экспорт 
	
	Если Участник = Перечисления.ВидыУчастников.ПТО Тогда 
		Возврат Перечисления.СтатусыГодовыхЗаявок.НаСогласованииВ_ПТО;
	ИначеЕсли Участник = Перечисления.ВидыУчастников.ПЭО Тогда 
		Возврат Перечисления.СтатусыГодовыхЗаявок.НаСогласованииВ_ПЭО;
	//ИначеЕсли Участник = Перечисления.ВидыУчастников.Исполнитель Тогда 
	//	Возврат Перечисления.СтатусыГодовыхЗаявок.НаКорректировке;
	КонецЕсли;
	
КонецФункции

Функция КонкурсСогласован(Пользователь, Документ, Статус) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаявкаНаКонкурсИсторияИзмененийСтатусов.Статус КАК Статус,
		|	МАКСИМУМ(ЗаявкаНаКонкурсИсторияИзмененийСтатусов.СтатусДата) КАК СтатусДата,
		|	ЗаявкаНаКонкурсИсторияИзмененийСтатусов.СтатусАвтор КАК СтатусАвтор,
		|	МАКСИМУМ(ЗаявкаНаКонкурсИсторияИзмененийСтатусов.НомерСтроки) КАК НомерСтроки
		|ИЗ
		|	Документ.ЗаявкаНаКонкурс.ИсторияИзмененийСтатусов КАК ЗаявкаНаКонкурсИсторияИзмененийСтатусов
		|ГДЕ
		|	ЗаявкаНаКонкурсИсторияИзмененийСтатусов.СтатусАвтор = &Автор
		|	И ЗаявкаНаКонкурсИсторияИзмененийСтатусов.Ссылка = &Ссылка
		|	И ЗаявкаНаКонкурсИсторияИзмененийСтатусов.Статус = &Статус
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗаявкаНаКонкурсИсторияИзмененийСтатусов.СтатусАвтор,
		|	ЗаявкаНаКонкурсИсторияИзмененийСтатусов.Статус
		|
		|УПОРЯДОЧИТЬ ПО
		|	Статус
		|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("Автор", Пользователь);
	Запрос.УстановитьПараметр("Ссылка", Документ);
	Запрос.УстановитьПараметр("Статус", Статус);
	
	ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда 
		Возврат ВыборкаДетальныеЗаписи.СтатусДата;
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции

//СОГЛАСОВАНИЕ
/////////////////

Функция РольСогласованияДоступна(Пользователь, Роль) Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КТ_РолиСогласованияПользователей.РольДоступна
		|ИЗ
		|	РегистрСведений.КТ_РолиСогласованияПользователей КАК КТ_РолиСогласованияПользователей
		|ГДЕ
		|	КТ_РолиСогласованияПользователей.Пользователь = &Пользователь
		|	И КТ_РолиСогласованияПользователей.РольПользователя = &РольПользователя";
	
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Запрос.УстановитьПараметр("РольПользователя", Роль);
	
	ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда 
		Возврат ВыборкаДетальныеЗаписи.РольДоступна;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьЗначениеКонстанты(ИмяКонстанты) Экспорт 
	
	Возврат Константы[ИмяКонстанты].Получить();
	
КонецФункции


// Функция выделяет первое слово в предложении.
//
Функция ВыделитьСлово(ИсходнаяСтрока, СчетчикВызова) Экспорт
	
	Буфер = СокрЛ(ИсходнаяСтрока);
	ПозицияПослПробела = Найти(Буфер, " ");

	Если (ПозицияПослПробела = 0)
		 Или (СчетчикВызова >= 3) Тогда
		ИсходнаяСтрока = "";
		Возврат Буфер;
	КонецЕсли;
	
	ВыделенноеСлово = СокрЛП(Лев(Буфер, ПозицияПослПробела));
	ИсходнаяСтрока = Сред(ИсходнаяСтрока, ПозицияПослПробела + 1);
	
	Возврат ВыделенноеСлово;
	
КонецФункции // ВыделитьСлово()


// Функция - Получить для перечня документов адрес СКД
//
// Параметры:
//  ОбработкаОбъект	 - 	 - 
//  Компоновщик		 - 	 - 
// 
// Возвращаемое значение:
//   - 
//
Функция ПолучитьДляПеречняДокументовАдресСКД(ОбработкаОбъект, Компоновщик) Экспорт
	
	СхемаКомпоновкиДанных = ОбработкаОбъект.ПолучитьМакет("ПереченьЗаявокНаОплату");
	
	АдресСхемыКомпоновкиДанных = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, Новый УникальныйИдентификатор);
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновкиДанных);
	
	Компоновщик.Инициализировать(ИсточникНастроек);
	Компоновщик.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);

	Возврат АдресСхемыКомпоновкиДанных;
	
КонецФункции // ПолучитьДляПеречняДокументовАдресСКД()

// Функция - Получить для перечня документов запрос СКД
//
// Параметры:
//  АдресСКД		 - 	 - 
//  Компоновщик		 - 	 - 
//  ПериодРасхода	 - 	 - 
// 
// Возвращаемое значение:
//   - 
//
Функция ПолучитьДляПеречняДокументовЗапросСКД(АдресСКД, Компоновщик, ПериодРасхода) Экспорт
	
	СхемаКомпоновкиДанных = ПолучитьИзВременногоХранилища(АдресСКД);

	//Выполняем компановку макета МакетСКД
	// (настройки берутся из схемы компановки данных и из пользовательских настроек)
	КомпоновщикМакетаКомпоновкиДанных = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетСКД = КомпоновщикМакетаКомпоновкиДанных.Выполнить(СхемаКомпоновкиДанных, Компоновщик.ПолучитьНастройки());
	
	//Заполняем параметры макета компановки данных
	МакетСКД.ЗначенияПараметров.ДатаНачала.Значение    = ПериодРасхода.ДатаНачала;
	МакетСКД.ЗначенияПараметров.ДатаОкончания.Значение = ПериодРасхода.ДатаОкончания;
	
	//Получаем запрос макета компановки данных
	Запрос = Новый Запрос(МакетСКД.НаборыДанных.ПереченьДокументов.Запрос);
	
	//Устанавливаем параметры запроса
	ОписаниеПараметровЗапроса = Запрос.НайтиПараметры();
	Для каждого ОписаниеПараметраЗапроса из ОписаниеПараметровЗапроса Цикл
		Запрос.УстановитьПараметр(ОписаниеПараметраЗапроса.Имя, МакетСКД.ЗначенияПараметров[ОписаниеПараметраЗапроса.Имя].Значение);
	КонецЦикла;
	
	Возврат Запрос;
	
КонецФункции // ПолучитьДляПеречняДокументовЗапросСКД()



//Бюджетирование
//////////////////

Процедура ОбновитьЦеныТРУ(ДанныеСтроки, ТаблицаТРУ, ВерсияБюджета) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата", КТ_ОбщегоНазначенияСервер.СформироватьДатуПоВерсииБюджета(ВерсияБюджета));
	Запрос.УстановитьПараметр("ТРУ", ?(ДанныеСтроки=Неопределено, ТаблицаТРУ.ВыгрузитьКолонку("ТРУ"), ДанныеСтроки.ТРУ));
	Запрос.УстановитьПараметр("ВерсияБюджета", ВерсияБюджета);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КТ_КлассификаторТРУ.Ссылка КАК ТРУ,
	|	КТ_КлассификаторТРУ.Группа,
	|	КТ_КлассификаторТРУ.Подгруппа,
	|	ЕСТЬNULL(КТ_ЦеныТРУСрезПоследних.ЦенаБезНДС, 0) КАК ЦенаБезНДС,
	|	ЕСТЬNULL(КТ_ЦеныТРУСрезПоследних.ЦенаСНДС, 0) КАК ЦенаСНДС
	|ИЗ
	|	Справочник.КТ_КлассификаторТРУ КАК КТ_КлассификаторТРУ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КТ_ЦеныТРУ.СрезПоследних(&Дата, ТРУ В (&ТРУ) И ВерсияБюджета = &ВерсияБюджета) КАК КТ_ЦеныТРУСрезПоследних
	|		ПО (КТ_ЦеныТРУСрезПоследних.ТРУ = КТ_КлассификаторТРУ.Ссылка)
	|ГДЕ
	|	КТ_КлассификаторТРУ.Ссылка В(&ТРУ)";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если ДанныеСтроки = Неопределено Тогда
		Пока Выборка.Следующий() Цикл
			Для каждого ТекСтрока Из ТаблицаТРУ.НайтиСтроки(Новый Структура("ТРУ", Выборка.ТРУ)) Цикл
				ЗаполнитьЗначенияСвойств(ТекСтрока, Выборка);
			КонецЦикла;
		КонецЦикла;
	ИначеЕсли Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ДанныеСтроки, Выборка);
	Иначе
		ДанныеСтроки.Группа = "";
		ДанныеСтроки.Подгруппа = "";
		ДанныеСтроки.ЦенаБезНДС = 0;
		ДанныеСтроки.ЦенаСНДС = 0;
	КонецЕсли;
	
КонецПроцедуры


Процедура ОбновитьОстаткиПоСкладамНаСервере(Источник, ТЧДокумента) Экспорт 
	
	Табл = Новый СписокЗначений;
	Табл.Добавить(ПланыСчетов.Типовой.СырьеИМатериалы);
	Табл.Добавить(ПланыСчетов.Типовой.ГотоваяПродукция);
	Табл.Добавить(ПланыСчетов.Типовой.Товары);
	
	ЗапросЦентральныйСклад = Новый Запрос;
	ЗапросЦентральныйСклад.Текст = 
	"ВЫБРАТЬ
	|	КТ_СкладыЦФОСклады.Склад КАК Склад
	|ИЗ
	|	Справочник.КТ_СкладыЦФО.Склады КАК КТ_СкладыЦФОСклады
	|ГДЕ
	|	КТ_СкладыЦФОСклады.Центральный
	|	И КТ_СкладыЦФОСклады.Ссылка.КТ_ЦФО = &ЦФО";
	ЗапросЦентральныйСклад.УстановитьПараметр("ЦФО", Источник.ЦФО);
	
	ЦентральныеСклады = ЗапросЦентральныйСклад.Выполнить().Выгрузить().ВыгрузитьКолонку("Склад");
	
		
	ЗапросСкладыПоЦФО = Новый Запрос;
	ЗапросСкладыПоЦФО.Текст = 
		"ВЫБРАТЬ
		|	КТ_СкладыЦФОСклады.Склад КАК Склад
		|ИЗ
		|	Справочник.КТ_СкладыЦФО.Склады КАК КТ_СкладыЦФОСклады
		|ГДЕ
		|	КТ_СкладыЦФОСклады.Центральный = ЛОЖЬ
		|	И КТ_СкладыЦФОСклады.Ссылка.КТ_ЦФО = &ЦФО";
	
	ЗапросСкладыПоЦФО.УстановитьПараметр("ЦФО", Источник.ЦФО);
	
	СкладыПоЦФО = ЗапросСкладыПоЦФО.Выполнить().Выгрузить().ВыгрузитьКолонку("Склад");
	
	ЗапросЦССкладПоЦФО = Новый Запрос;
	ЗапросЦССкладПоЦФО.Текст = 
		"ВЫБРАТЬ
		|	КТ_СкладыЦФОСклады.Склад КАК Склад
		|ИЗ
		|	Справочник.КТ_СкладыЦФО.Склады КАК КТ_СкладыЦФОСклады
		|ГДЕ
		|	КТ_СкладыЦФОСклады.Центральный
		|	И КТ_СкладыЦФОСклады.Ссылка.КТ_ЦФО = &ЦФО";
	
	ЗапросЦССкладПоЦФО.УстановитьПараметр("ЦФО", Источник.ЦФО);
	
	ЦССкладПоЦФО = ЗапросЦССкладПоЦФО.Выполнить().Выгрузить().ВыгрузитьКолонку("Склад");
			
	ОстаткиНаЦС = 0;
	ОстаткиНаСкладахПоЦФО = 0;
	Норматив = 0;
	
	Для Каждого НовЭлементТЧ Из ТЧДокумента Цикл 
		
		ОстаткиНаЦС = 0;
		ОстаткиНаСкладахПоЦФО = 0;
		Норматив = 0;

		ЗапросНоменклатура = Новый Запрос;
		ЗапросНоменклатура.Текст = 
		"ВЫБРАТЬ
		|	КТ_КлассификаторТРУНоменклутараБух.Номенклатура КАК Номенклатура
		|ИЗ
		|	Справочник.КТ_КлассификаторТРУ.НоменклутараБух КАК КТ_КлассификаторТРУНоменклутараБух
		|ГДЕ
		|	КТ_КлассификаторТРУНоменклутараБух.Ссылка = &Ссылка";
		
		ЗапросНоменклатура.УстановитьПараметр("Ссылка", НовЭлементТЧ.ТРУ);
		
		НоменклатураИзТРУ = ЗапросНоменклатура.Выполнить().Выгрузить().ВыгрузитьКолонку("Номенклатура");
		
		// Остатки по ЦС
		НовЭлементТЧ.ОстаткиНаЦС = ОстаткиНаСкладахПоРегиструБухгалтерии(НоменклатураИзТРУ, ЦентральныеСклады, Табл);
		// Остатки по ЦС
		
		// Остатки по Складам По КТ_ЦФО
		НовЭлементТЧ.ОстаткиНаСкладахПоЦФО = ОстаткиНаСкладахПоРегиструБухгалтерии(НоменклатураИзТРУ, СкладыПоЦФО, Табл);
		// Остатки по Складам По КТ_ЦФО
		
		//// Остатки по Нормативному запасу КТ_ТРУ
		//НовЭлементТЧ.Норматив = НормативныйЗапасТРУ(НоменклатураИзТРУ, ЦССкладПоЦФО);
		//// Остатки по Нормативному запасу КТ_ТРУ
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ОстаткиНаСкладахПоРегиструБухгалтерии(НоменклатураИзТРУ, ЦентральныеСклады, Табл) Экспорт 
	
		ЗапросОстаткиНаЦС = Новый Запрос;
		ЗапросОстаткиНаЦС.Текст = 
		"ВЫБРАТЬ
		|	СУММА(ТиповойОстатки.КоличествоОстаток) КАК КоличествоОстаток
		|ИЗ
		|	РегистрБухгалтерии.Типовой.Остатки(
		|			&НачПериода,
		|			Счет В (&Счет),
		|			,
		|			Субконто1 В (&Субконто1)
		|				И Субконто2 В (&Субконто2)) КАК ТиповойОстатки";
		
		ЗапросОстаткиНаЦС.УстановитьПараметр("НачПериода", ТекущаяДата());
		ЗапросОстаткиНаЦС.УстановитьПараметр("Субконто1", НоменклатураИзТРУ);
		ЗапросОстаткиНаЦС.УстановитьПараметр("Субконто2", ЦентральныеСклады);
		ЗапросОстаткиНаЦС.УстановитьПараметр("Счет", Табл);
		
		РезультатЗапроса = ЗапросОстаткиНаЦС.Выполнить().Выбрать();
		РезультатЗапроса.Следующий();
		ОстаткиНаЦС = РезультатЗапроса.КоличествоОстаток;
		Возврат ОстаткиНаЦС;
		
	
КонецФункции

&НаСервере
Функция ПроверитьРольЗП() Экспорт
	Если РольДоступна("ПодсистемаЗарплата") ИЛИ РольДоступна("ПолныеПрава") Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции

&НаСервере
Функция ПроверитьСчет(Счет) Экспорт
	Если (Счет = ПланыСчетов.Типовой.НайтиПоКоду("3350") ИЛИ 
		Счет = ПланыСчетов.Типовой.НайтиПоКоду("3220") ИЛИ 
		Счет = ПланыСчетов.Типовой.НайтиПоКоду("3210") ИЛИ
		Счет = ПланыСчетов.Типовой.НайтиПоКоду("3211") ИЛИ
		Счет = ПланыСчетов.Типовой.НайтиПоКоду("3212") ИЛИ
		Счет = ПланыСчетов.Типовой.НайтиПоКоду("3213") ИЛИ
		Счет = ПланыСчетов.Типовой.НайтиПоКоду("3240") ИЛИ
		Счет = ПланыСчетов.Типовой.НайтиПоКоду("3230"))  Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции

&НаСервере
Функция ПроверитьСчетНУ(Счет) Экспорт
	Если (Счет = ПланыСчетов.Типовой.НайтиПоКоду("3350").СчетНУ ИЛИ 
		Счет = ПланыСчетов.Типовой.НайтиПоКоду("3220").СчетНУ ИЛИ 
		Счет = ПланыСчетов.Типовой.НайтиПоКоду("3210").СчетНУ ИЛИ
		Счет = ПланыСчетов.Типовой.НайтиПоКоду("3211").СчетНУ ИЛИ
		Счет = ПланыСчетов.Типовой.НайтиПоКоду("3212").СчетНУ ИЛИ
		Счет = ПланыСчетов.Типовой.НайтиПоКоду("3213").СчетНУ ИЛИ
		Счет = ПланыСчетов.Типовой.НайтиПоКоду("3240").СчетНУ ИЛИ
		Счет = ПланыСчетов.Типовой.НайтиПоКоду("3230").СчетНУ)  Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции
