
#Область ОбработчикиСобытий

// Серверные обработчики элементов прикладных форм
//
// Параметры:
//   Форма                   - УправляемаяФорма - форма, из которой происходит вызов процедуры.
//   Элемент                 - Произвольный     - элемент-источник события "При изменении"
//   ДополнительныеПараметры - Структура        - значения дополнительных параметров влияющих на обработку.
//
Процедура ПриИзмененииЭлемента(Форма, Элемент, ДополнительныеПараметры) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Возникает на сервере при создании формы.
//
// Параметры:
//  Форма - УправляемаяФорма - создаваемая форма,
//  Отказ - Булево - признак отказа от создания формы,
//  СтандартнаяОбработка - Булево - признак выполнения стандартной обработки.
Процедура ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	Если СтрНачинаетсяС(Форма.ИмяФормы, "Документ.") ИЛИ СтрНачинаетсяС(Форма.ИмяФормы, "Справочник.") Тогда
		// СтандартныеПодсистемы.ПодключаемыеКоманды
		ПодключаемыеКоманды.ПриСозданииНаСервере(Форма);
		// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
		
		// СтандартныеПодсистемы.ВерсионированиеОбъектов
		Если ОбщегоНазначенияИСМПТКПереопределяемый.ПодсистемаСуществует("СтандартныеПодсистемы.ВерсионированиеОбъектов") Тогда
			МодульВерсионированиеОбъектов = ОбщегоНазначенияИСМПТКПереопределяемый.ОбщийМодуль("ВерсионированиеОбъектов");
			МодульВерсионированиеОбъектов.ПриСозданииНаСервере(Форма);
		КонецЕсли;
		// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
		
		// СтандартныеПодсистемы.ГрупповоеИзменениеОбъектов
		ОбщегоНазначенияБК.ФормаСпискаПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка);
		// Конец СтандартныеПодсистемы.ГрупповоеИзменениеОбъектов
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЧтенииНаСервере(ТекущийОбъект, Форма) Экспорт
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначенияИСМПТКПереопределяемый.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначенияИСМПТКПереопределяемый.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(Форма, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	 
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(Форма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// РедактированиеДокументовПользователей
	ПраваДоступаКОбъектам.ОбъектПриЧтенииНаСервере(Форма, ТекущийОбъект);
	// Конец РедактированиеДокументовПользователей
	
КонецПроцедуры

// Переопределяемая процедура, вызываемая из одноименного обработчика события формы.
//
// Параметры:
//  Форма - форма, из обработчика события которой происходит вызов процедуры.
//          См. справочную информацию по событиям управляемой формы.
Процедура ПослеЗаписиНаСервере(Форма, ТекущийОбъект = Неопределено, ПараметрыЗаписи = Неопределено)Экспорт
	
	Если ОбщегоНазначенияИСМПТКПереопределяемый.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначенияИСМПТКПереопределяемый.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПослеЗаписиНаСервере(Форма, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписьюНаСервере(Форма, Объект, ПараметрыЗаписи) Экспорт
	
	Возврат;
	
КонецПроцедуры

Процедура ПриСозданииНаСервере_НастроитьПодключаемоеОборудование(Форма, ДопПараметры = Неопределено) Экспорт
	
	Если Не ДопПараметры = Неопределено
		И ДопПараметры.Свойство("ПрефиксыЭлементовФормы") Тогда
		ПрефиксыЭлементовФормы = ДопПараметры.ПрефиксыЭлементовФормы;
	Иначе
		ПрефиксыЭлементовФормы = "";
	КонецЕсли;
	
	ОбщегоНазначенияБКВызовСервера.НастроитьПодключаемоеОборудование(Форма, ПрефиксыЭлементовФормы);

КонецПроцедуры

//Используется в формах настроек маркировки 
//
Процедура ОбновитьФормуНастройкиПриЗаписиПодчиненныхКонстант(Форма, КонстантаИмя, КонстантаЗначение) Экспорт
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Устанавливает условное оформление для поля "Характеристика".
//
// Параметры:
//  Форма - УправляемаяФорма - форма, в которой нужно установить условное оформление,
//  ИмяПоляВводаХарактеристики - Строка - имя элемента формы "Характеристика",
//  ПутьКПолюОтбора - Строка - полный путь к реквизиту "Характеристики используются".
Процедура УстановитьУсловноеОформлениеХарактеристикНоменклатуры(Форма, ИмяПоляВводаХарактеристики = "ТоварыХарактеристика", ПутьКПолюОтбора = "Объект.Товары.ХарактеристикиИспользуются") Экспорт
	
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	Возврат;
	///////////////////
	
КонецПроцедуры

Процедура ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(КоллекцияДанных, СтруктураДействий, СтрокиЗаполнения = Неопределено) Экспорт
	
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакХарактеристикиИспользуются") Тогда
	
		Для Каждого СтрокаКоллекции Из КоллекцияДанных Цикл
			СтрокаКоллекции.ХарактеристикиИспользуются = Ложь;
		КонецЦикла;
	
	КонецЕсли;
	///////////////////
	
КонецПроцедуры

Процедура ЗаполнитьПризнакИспользованияХарактеристик(ТаблицаФормы, ПараметрыЗаполнения = Неопределено, НомерСтроки = Неопределено) Экспорт
	
	Перем СуффиксДопРеквизита;
	
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	Возврат;
	///////////////////
	
КонецПроцедуры

Процедура ЗаполнитьПризнакИспользованияХарактеристикВРабочемМесте(ТаблицаФормы) Экспорт
	
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	Возврат;
	///////////////////
	
КонецПроцедуры

Процедура УстановитьУсловноеОформлениеХарактеристикНоменклатурыВРабочемМесте(Форма, ДанныеНоменклатура, ДанныеХарактеристика) Экспорт
	
	Элементы = Форма.Элементы;
	
	//НОМЕНКЛАТУРА//
	УстанавливатьДляНоменклатуры = ДанныеНоменклатура.Использовать;
	ИмяПоляНоменклатура	 		 = ДанныеНоменклатура.ИмяПоля;
	ПутьКПолюНоменклатура		 = ДанныеНоменклатура.ПутьКПолю;
	
	Если УстанавливатьДляНоменклатуры Тогда 
		ЭлементУсловногоОформления = Форма.УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ИмяПоляНоменклатура].Имя);
		
		ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКПолюНоменклатура);
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
		ОтборЭлемента.ПравоеЗначение = Истина;
		
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", Новый Цвет(192,192,192));
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<штрихкод товара не зарегистрирован>'"));
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
		
	КонецЕсли;

	//ПЕРЕОПРЕДЕЛЕНИЕ//
	///////////////////

КонецПроцедуры

//В функции определяются значения параметров отображения элементов на форме настроек обмена с ИС МПТ.
//Возвращаемое значение - массив, где каждый элемент - структура.
//Обязательный шаблон структуры:
//"ИмяЭлементаФормы, Свойство, Значение";
//
Функция ПолучитьСписокПереопределяемыхНастроекФормыОбменаИСМПТ() Экспорт
	
	МассивПараметров = Новый Массив();
	
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	СтруктураПараметра = Новый Структура("ИмяЭлементаФормы, Свойство, Значение", "РозничныеПродажи", "Видимость", Ложь);
	МассивПараметров.Добавить(СтруктураПараметра);
	///////////////////
	
	Возврат МассивПараметров;
	
КонецФункции

//В функции определяются значения параметров отображения элементов на форме рабочего места ИС МПТ.
//Возвращаемое значение - массив, где каждый элемент - структура.
//Обязательный шаблон структуры:
//"ИмяЭлементаФормы, Свойство, Значение";
//
Функция ПолучитьСписокПереопределяемыхНастроекФормыОсновноеРабочееМестоИСМПТ() Экспорт

	МассивПараметров = Новый Массив();
	
	ВидимостьНоменклатура = ПравоДоступа("Просмотр", Метаданные.Справочники.Номенклатура);
	СтруктураПараметра = Новый Структура("ИмяЭлементаФормы, Свойство, Значение", "ОткрытьНоменклатуру", "Видимость", ВидимостьНоменклатура);
	МассивПараметров.Добавить(СтруктураПараметра);
	
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	СтруктураПараметра = Новый Структура("ИмяЭлементаФормы, Свойство, Значение", "ОткрытьВидыНоменклатуры", "Видимость", Ложь);
	МассивПараметров.Добавить(СтруктураПараметра);
	///////////////////
	
	Возврат МассивПараметров;	
	
КонецФункции

//Используется в формах настроек учета товарных групп (включение маркировки)
//
Функция ПроверитьВозможностьИзменения(ОбъектПутьКДанным, Форма) Экспорт
	 
	Если НРег(Лев(ОбъектПутьКДанным, 14)) = НРег("НаборКонстант.") Тогда
		// Если путь к данным реквизита указан через "НаборКонстант".
		КонстантаИмя = Сред(ОбъектПутьКДанным, 15);
		
		Если КонстантаИмя <> "ВестиУчетМаркируемогоТабакаИСМПТК"
			И КонстантаИмя <> "ВестиУчетМаркируемойОбувиИСМПТК"
			И КонстантаИмя <> "ВестиУчетМаркируемыхЛекарствИСМПТК"
			И КонстантаИмя <> "ВестиУчетМаркируемойМолочкиИСМПТК"
			И КонстантаИмя <> "ВестиУчетМаркируемогоАлкоголяИСМПТК"
			И КонстантаИмя <> "ВестиУчетМаркируемогоТекстиляИСМПТК" Тогда
			
			Возврат Истина;
			
		КонецЕсли;
		
		Если КонстантаИмя = "ВестиУчетМаркируемогоТабакаИСМПТК" Тогда
			ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.ТабачнаяПродукция;
		ИначеЕсли КонстантаИмя = "ВестиУчетМаркируемойОбувиИСМПТК" Тогда
			ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.ОбувнаяПродукция;
		ИначеЕсли КонстантаИмя = "ВестиУчетМаркируемойМолочкиИСМПТК" Тогда
			ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.МолочнаяПродукция;
		ИначеЕсли КонстантаИмя = "ВестиУчетМаркируемогоАлкоголяИСМПТК" Тогда
			ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.АлкогольнаяПродукция;
		ИначеЕсли КонстантаИмя = "ВестиУчетМаркируемогоТекстиляИСМПТК" Тогда
			ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.ЛегкаяПромышленность;
		ИначеЕсли КонстантаИмя = "ВестиУчетМаркируемыхЛекарствИСМПТК" Тогда
			ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.ЛекарственныеПрепараты;
		Иначе
			Возврат Истина;
		КонецЕсли;
		
		КонстантаМенеджер = Константы[КонстантаИмя];
		КонстантаЗначение = Форма.НаборКонстант[КонстантаИмя];  // Новое значение константы
		
		// При включении ведения маркировки проверка не выполняется 
		Если КонстантаЗначение = Истина Тогда
			Возврат Истина;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		|	Номенклатура.Ссылка
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.ОсобенностьУчета = &ОсобенностьУчета
		|	И НЕ Номенклатура.ПометкаУдаления";
		
		Запрос.УстановитьПараметр("ОсобенностьУчета", ОсобенностьУчета);
		
		Если НЕ Запрос.Выполнить().Пустой() Тогда
			Форма.НаборКонстант[КонстантаИмя] = КонстантаМенеджер.Получить();
			ТекстСообщения = НСтр("ru='В информационной базе уже зарегистрирована номенклатура с особенностью учета ""%1""! Данные не сохранены.'");
			ТекстСообщения = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, ОсобенностьУчета);
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
			Возврат Ложь;
		Иначе
			Возврат Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Истина;
			
КонецФункции

#КонецОбласти