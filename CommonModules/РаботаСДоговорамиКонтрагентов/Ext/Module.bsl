#Область ПрограммныйИнтерфейс

// Устанавливает договор контрагента по умолчанию с учетом условий отбора. 
// Возвращается основной договор или единственный или пустая ссылка
//
// Параметры
//  ВладелецДоговора	–	<СправочникСсылка.Контрагенты> 
//							Контрагент, договор которого нужно получить
//  ОрганизацияДоговора	–	<СправочникСсылка.Организации> 
//							Организация, договор которой нужно получить
//  СписокВидовДоговора	–	<Массив> или <СписокЗначений>, состоящий из значений типа <ПеречислениеСсылка.ВидыДоговоровКонтрагентов> 
//							Нужные виды договора
//  СтруктураПараметров	–	<Структура>
//							Структура дополнительных параметров отбора договоров по реквизитам.
//							Элементы структуры СтруктураПараметров:
//							Ключ - имя реквизита договора, Значение - еще одна структура
//							
//							Элементы структуры, которая находится в Значение:
//							Ключ - "ЗначениеОтбора", Значение - значение реквизита договора для отбора. Обязательный элемент.
//							Ключ - "ВидСравненияОтбора", Значение - <ВидСравнения>. Необязательный элемент, по умолчанию ВидСравнения.Равно
//
// Возвращаемое значение:
//   <СправочникСсылка.ДоговорыКонтрагентов> – найденный счет или пустая ссылка
//
Функция УстановитьДоговорКонтрагента(ДоговорКонтрагента, ВладелецДоговора, ОрганизацияДоговора, СписокВидовДоговора = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	НовыйДоговор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	ВестиУчетПоДоговорам = ПолучитьФункциональнуюОпцию("ВестиУчетПоДоговорам");
	
	Запрос = Новый Запрос;
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
	|	ДоговорыКонтрагентов.Ссылка КАК Ссылка,
	|	НЕ ЕСТЬNULL(ОсновныеДоговорыКонтрагента.Договор, Контрагенты.ОсновнойДоговорКонтрагента) ЕСТЬ NULL КАК Основной,
	|	ВЫБОР
	|		КОГДА ДоговорыКонтрагентов.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком)
	|			ТОГДА 1
	|		КОГДА ДоговорыКонтрагентов.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПокупателем)
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Приоритет
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОсновныеДоговорыКонтрагента КАК ОсновныеДоговорыКонтрагента
	|		ПО (ОсновныеДоговорыКонтрагента.Договор = ДоговорыКонтрагентов.Ссылка)
	|			И ДоговорыКонтрагентов.Организация = ОсновныеДоговорыКонтрагента.Организация
	|			И ДоговорыКонтрагентов.Владелец = ОсновныеДоговорыКонтрагента.Контрагент
	|			И ДоговорыКонтрагентов.ВидДоговора = ОсновныеДоговорыКонтрагента.ВидДоговора
    |       ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
    |       ПО ДоговорыКонтрагентов.Владелец = Контрагенты.Ссылка
    |           И ДоговорыКонтрагентов.Ссылка = Контрагенты.ОсновнойДоговорКонтрагента
    |ГДЕ
	|	&ТекстФильтра
	|
	|УПОРЯДОЧИТЬ ПО
	|	Основной УБЫВ,
	|	Приоритет УБЫВ";
	
	ГоловнаяОрганизацияДоговора = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОрганизацияДоговора, "ГоловнаяОрганизация");
	Запрос.УстановитьПараметр("ОрганизацияДоговора", ГоловнаяОрганизацияДоговора);
	Запрос.УстановитьПараметр("ВладелецДоговора", ВладелецДоговора);
	ТекстФильтра = "ДоговорыКонтрагентов.Организация = &ОрганизацияДоговора
		|	И ДоговорыКонтрагентов.Владелец = &ВладелецДоговора";
	
	Если ВестиУчетПоДоговорам Тогда
		ТекстФильтра = ТекстФильтра + "
		| И ДоговорыКонтрагентов.ПометкаУдаления = ЛОЖЬ";
	КонецЕсли;
	
	Если СписокВидовДоговора <> Неопределено Тогда
		ТекстФильтра = ТекстФильтра + " И ДоговорыКонтрагентов.ВидДоговора В (&СписокВидовДоговора)";
		Запрос.УстановитьПараметр("СписокВидовДоговора", СписокВидовДоговора);
	КонецЕсли;
	
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
		Для Каждого Параметр Из ДополнительныеПараметры Цикл
			ИмяРеквизита = Параметр.Ключ;
			СтруктураОтбора = Параметр.Значение;
			
			Если НЕ СтруктураОтбора.Свойство("ВидСравненияОтбора") Тогда
				ВидСравненияЗапроса = "=";
			ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.Равно Тогда
				ВидСравненияЗапроса = "=";
			ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.НеРавно Тогда
				ВидСравненияЗапроса = "<>";
			ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.ВСписке Тогда
				ВидСравненияЗапроса = "В";
			ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.НеВСписке Тогда
				ВидСравненияЗапроса = "НЕ В";
			ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.ВИерархии Тогда
				ВидСравненияЗапроса = "В ИЕРАРХИИ";
			ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.ВСпискеПоИерархии Тогда
				ВидСравненияЗапроса = "В ИЕРАРХИИ";
			ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.НеВСпискеПоИерархии Тогда
				ВидСравненияЗапроса = "НЕ В ИЕРАРХИИ";
			ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.НеВИерархии Тогда
				ВидСравненияЗапроса = "НЕ В ИЕРАРХИИ";
			ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.Больше Тогда
				ВидСравненияЗапроса = ">";
			ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.БольшеИлиРавно Тогда
				ВидСравненияЗапроса = ">=";
			ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.Меньше Тогда
				ВидСравненияЗапроса = "<";
			ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.МеньшеИлиРавно Тогда
				ВидСравненияЗапроса = "<=";
			Иначе // другие варианты 
				ВидСравненияЗапроса = "=";
			КонецЕсли;
			
			ТекстФильтра = ТекстФильтра + "
				| И ДоговорыКонтрагентов." + ИмяРеквизита + " " + ВидСравненияЗапроса + " (&" + ИмяРеквизита + ")";
			Запрос.УстановитьПараметр(ИмяРеквизита, СтруктураОтбора.ЗначениеОтбора);
		КонецЦикла;
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстФильтра", ТекстФильтра);
	
	Запрос.Текст = ТекстЗапроса;
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		НайденОдинДоговор = Выборка.Количество() = 1;
		// Если ведется учет по договорам, то выбираем либо основной, либо единственный договор
		Если ВестиУчетПоДоговорам Тогда
			Если Выборка.Основной Или НайденОдинДоговор Тогда
				НовыйДоговор = Выборка.Ссылка;
			КонецЕсли;
		// Если учет по договорам не ведется, то выбираем только основной договор
		ИначеЕсли Выборка.Основной Тогда
			НовыйДоговор = Выборка.Ссылка;
		КонецЕсли;
		
	КонецЕсли;
	
	РеквизитыДоговора = УправлениеВзаиморасчетамиСервер.ПолучитьРеквизитыДоговораКонтрагента(ДоговорКонтрагента);
	
	Если ЗначениеЗаполнено(НовыйДоговор)
		И (Не ЗначениеЗаполнено(ДоговорКонтрагента)
			Или РеквизитыДоговора.Владелец <> ВладелецДоговора
			Или РеквизитыДоговора.Организация <> ГоловнаяОрганизацияДоговора) Тогда
		ДоговорКонтрагента = НовыйДоговор;
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Заполняет договор в объекте, в случае если не ведется учет по договорам
//
// Параметры:
// Объект - ДокументОбъект.ЛюбаяСсылка - Документ, в котором необходимо заполнить договор
//
Процедура ЗаполнитьДоговорПередЗаписью(Объект) Экспорт

	Если ПолучитьФункциональнуюОпцию("ВестиУчетПоДоговорам") Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ДоговорКонтрагента = ДоговорКонтрагентаИзОбъекта(Объект)
	
КонецПроцедуры

// Заполняет договор в табличной части, в случае если не ведется учет по договорам
//
// Параметры:
// ТабличнаяЧасть - Табличная часть документа, в которой необходимо заполнить договор 
// Объект - ДокументОбъект.ЛюбаяСсылка - Документ, из которого берутся данные для заполнения договора
// 
Процедура ЗаполнитьДоговорВТабличнойЧастиПередЗаписью(ТабличнаяЧасть, Объект, ИмяРеквизита = "ДоговорКонтрагента", ИмяВладельца = "") Экспорт

	Если ПолучитьФункциональнуюОпцию("ВестиУчетПоДоговорам") Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыДоговора = Новый Структура;
	ПараметрыДоговора.Вставить("Организация", Объект.Организация);
	ПараметрыДоговора.Вставить("ВидДоговора", ВидДоговораПоОбъекту(Объект));
	ПараметрыДоговора.Вставить("Владелец");
    ПараметрыДоговора.Вставить("Наименование",НСтр("ru = 'Без договора'"));
	
	ЕстьКонтрагентВСтроке = ЕстьКонтрагентВСтроке(Объект);
	Если НЕ ЕстьКонтрагентВСтроке Тогда;
		ПараметрыДоговора.Владелец = Объект.Контрагент;
	КонецЕсли;
	
	Для Каждого Строка Из ТабличнаяЧасть Цикл
		
		Если ЕстьКонтрагентВСтроке Тогда
			ПараметрыДоговора.Владелец = Строка.Контрагент;
        КонецЕсли;
        
        Если НЕ ПустаяСтрока(ИмяВладельца) Тогда
            ПараметрыДоговора.Владелец = Строка[ИмяВладельца];
        КонецЕсли;
		
		ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		
		Если МожноСоздатьДоговор(ПараметрыДоговора) И 
			НЕ УстановитьДоговорКонтрагента(
				ДоговорКонтрагента,
				ПараметрыДоговора.Владелец, 
				ПараметрыДоговора.Организация, 
				ПараметрыДоговора.ВидДоговора) Тогда
			
			ПараметрыСоздания = Новый Структура("ЗначенияЗаполнения", ПараметрыДоговора);
			ДоговорКонтрагента = РаботаСДоговорамиКонтрагентовВызовСервера.СоздатьОсновнойДоговорКонтрагента(ПараметрыСоздания);
			
		КонецЕсли;
		Строка[ИмяРеквизита] = ДоговорКонтрагента;
	КонецЦикла;
	
КонецПроцедуры

// Возвращает договор, который найден или создан как основной
//
// Параметры:
// Объект - ДокументОбъект.ЛюбаяСсылка или Структура - Документ или структура - источник данных для договора
//			Структура должна содержать свойства:
//				- Контрагент - <СправочникСсылка.ДоговорыКонтрагентов>
//				- Организация - <СправочникСсылка.Организации>
// В случае передачи структуры вид созданного/найденного договора будет Прочее
//
Функция ДоговорКонтрагентаИзОбъекта(Объект, ИмяВладельца = "") Экспорт

	ПараметрыДоговора = Новый Структура;
	ПараметрыДоговора.Вставить("ВидДоговора",  ВидДоговораПоОбъекту(Объект));
	ПараметрыДоговора.Вставить("Организация",  Объект.Организация);
	ПараметрыДоговора.Вставить("Владелец",     ?(ПустаяСтрока(ИмяВладельца), Объект.Контрагент, Объект[ИмяВладельца]));
    ПараметрыДоговора.Вставить("Наименование",НСтр("ru = 'Без договора'"));
	
	ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	
	Если МожноСоздатьДоговор(ПараметрыДоговора) И 
		НЕ УстановитьДоговорКонтрагента(
			ДоговорКонтрагента, 
			ПараметрыДоговора.Владелец, 
			ПараметрыДоговора.Организация, 
			ПараметрыДоговора.ВидДоговора) Тогда
			
		ПараметрыСоздания = Новый Структура("ЗначенияЗаполнения", ПараметрыДоговора);
		ДоговорКонтрагента = РаботаСДоговорамиКонтрагентовВызовСервера.СоздатьОсновнойДоговорКонтрагента(ПараметрыСоздания);
		
	КонецЕсли;
	
	Возврат ДоговорКонтрагента;
	
КонецФункции

// Устанавливает договор в качестве основного в регистре сведений "Основные договора контрагента"
// 
// Параметры:
// Договор - Договор, который необходимо установить как основной
//
Процедура УстановитьОсновнойДоговорКонтрагента(Договор) Экспорт
	
	ПараметрыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Договор, "Организация, Владелец, ВидДоговора");
	
	НоваяЗапись = РегистрыСведений.ОсновныеДоговорыКонтрагента.СоздатьМенеджерЗаписи();
	НоваяЗапись.Организация = ПараметрыДоговора.Организация;
	НоваяЗапись.Контрагент  = ПараметрыДоговора.Владелец;
	НоваяЗапись.ВидДоговора = ПараметрыДоговора.ВидДоговора;
	НоваяЗапись.Договор     = Договор;
	НоваяЗапись.Записать(Истина);
	
КонецПроцедуры

Функция МожноСоздатьДоговор(ПараметрыДоговора)

	Возврат ЗначениеЗаполнено(ПараметрыДоговора.Владелец) И
		ЗначениеЗаполнено(ПараметрыДоговора.Организация) И 
		ТипЗнч(ПараметрыДоговора.Владелец) = Тип("СправочникСсылка.Контрагенты");

КонецФункции

// Определяет вид договора по объекту
//
Функция ВидДоговораПоОбъекту(Объект) Экспорт
	
	ТипОбъекта = ТипЗнч(Объект);
	
	// Типы документов, использующие вид договора - с покупателем
	
	МассивТиповДокументов = Новый Массив;
	МассивТиповДокументов.Добавить(Тип("ДокументОбъект.РеализацияТоваровУслуг"));
	МассивТиповДокументов.Добавить(Тип("ДокументОбъект.АктОбОказанииПроизводственныхУслуг"));
	МассивТиповДокументов.Добавить(Тип("ДокументОбъект.ВозвратТоваровОтПокупателя"));
	МассивТиповДокументов.Добавить(Тип("ДокументОбъект.СчетНаОплатуПокупателю"));
	МассивТиповДокументов.Добавить(Тип("ДокументОбъект.ПередачаНМА"));
	МассивТиповДокументов.Добавить(Тип("ДокументОбъект.ПередачаОС"));
	МассивТиповДокументов.Добавить(Тип("ДокументОбъект.РегистрацияПрочихОперацийПоРеализованнымТоварамВЦеляхНДС"));
	
	ОписаниеТиповДокументов = Новый ОписаниеТипов(МассивТиповДокументов);
	
	Если ОписаниеТиповДокументов.СодержитТип(ТипОбъекта) Тогда
		Возврат Перечисления.ВидыДоговоровКонтрагентов.СПокупателем;
	КонецЕсли;
	
	// Типы документов, использующие вид договора - с поставщиком
	
	МассивТиповДокументов = Новый Массив;
	МассивТиповДокументов.Добавить(Тип("ДокументОбъект.ПоступлениеДопРасходов"));
	МассивТиповДокументов.Добавить(Тип("ДокументОбъект.АвансовыйОтчет"));
	МассивТиповДокументов.Добавить(Тип("ДокументОбъект.Доверенность"));
	МассивТиповДокументов.Добавить(Тип("ДокументОбъект.ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов"));
	МассивТиповДокументов.Добавить(Тип("ДокументОбъект.ПоступлениеИзПереработки"));
	МассивТиповДокументов.Добавить(Тип("ДокументОбъект.ПринятиеКУчетуОС"));
	МассивТиповДокументов.Добавить(Тип("ДокументОбъект.РеализацияУслугПоПереработке"));
	МассивТиповДокументов.Добавить(Тип("ДокументОбъект.ПоступлениеНМА"));
	МассивТиповДокументов.Добавить(Тип("ДокументОбъект.РасчетНалоговПриПоступленииАктивовУслуг"));
	МассивТиповДокументов.Добавить(Тип("ДокументОбъект.РегистрацияПрочихОперацийПоПриобретеннымТоварамВЦеляхНДС"));
	МассивТиповДокументов.Добавить(Тип("ДокументОбъект.СчетНаОплатуПоставщика"));
	
	ОписаниеТиповДокументов = Новый ОписаниеТипов(МассивТиповДокументов);
	
	Если ОписаниеТиповДокументов.СодержитТип(ТипОбъекта) Тогда
		Возврат Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком;
	КонецЕсли;
	
	// Типы документов, использующие вид договора - прочее
	
	МассивТиповДокументов = Новый Массив;
	МассивТиповДокументов.Добавить(Тип("ДокументОбъект.ГТДИмпорт"));
	МассивТиповДокументов.Добавить(Тип("ДокументОбъект.ПоступлениеНМА"));
	
	ОписаниеТиповДокументов = Новый ОписаниеТипов(МассивТиповДокументов);
	
	Если ОписаниеТиповДокументов.СодержитТип(ТипОбъекта) Тогда
		Возврат Перечисления.ВидыДоговоровКонтрагентов.Прочее;
	КонецЕсли;
	
	// Типы документов, вид договора в которых можно следует определять по виду операции
	
	МассивТиповДокументов = Новый Массив;
	МассивТиповДокументов.Добавить(Тип("ДокументОбъект.ПоступлениеТоваровУслуг"));
	МассивТиповДокументов.Добавить(Тип("ДокументОбъект.ВозвратТоваровПоставщику"));
	МассивТиповДокументов.Добавить(Тип("ДокументОбъект.ПередачаТоваров"));
	МассивТиповДокументов.Добавить(Тип("ДокументОбъект.ПлатежноеПоручениеВходящее"));
    МассивТиповДокументов.Добавить(Тип("ДокументОбъект.ПлатежноеПоручениеИсходящее"));
    МассивТиповДокументов.Добавить(Тип("ДокументОбъект.ПлатежныйОрдерПоступлениеДенежныхСредств"));
    МассивТиповДокументов.Добавить(Тип("ДокументОбъект.ПлатежныйОрдерСписаниеДенежныхСредств"));
    МассивТиповДокументов.Добавить(Тип("ДокументОбъект.ПриходныйКассовыйОрдер"));
	МассивТиповДокументов.Добавить(Тип("ДокументОбъект.РасходныйКассовыйОрдер"));
	
	ОписаниеТиповДокументов = Новый ОписаниеТипов(МассивТиповДокументов);
	
	Если ОписаниеТиповДокументов.СодержитТип(ТипОбъекта) Тогда
		
		ВидОперации = Объект.ВидОперации;
		
		// Виды операций, в которых используется вид договора - с покупателем
		
		МассивВидовОпераций = Новый Массив;
		// Списание с расчетного счета
		МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийППИсходящее.ВозвратДенежныхСредствПокупателю);
        МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПокупателю);
		// Поступление на расчетный счет
		МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПокупателя);
		// Возврат товаров поставщику
		МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки);
		// Передача товара
		МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийПередачаТоваров.ИзПереработки);
		// Приходный кассовый ордер
		МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийПКО.ОплатаПокупателя);
		// Расходный кассовый ордер
		МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателю);
		
		Если МассивВидовОпераций.Найти(ВидОперации) <> Неопределено Тогда
			Возврат Перечисления.ВидыДоговоровКонтрагентов.СПокупателем;
		КонецЕсли;
		
		// Виды операций, в которых используется вид договора - с поставщиком
		
		МассивВидовОпераций = Новый Массив;
		// Списание с расчетного счета
		МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ОплатаПоставщику);
        МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийППИсходящее.ОплатаПоставщику);
		// Поступление на расчетный счет
		МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПоставщиком);
		// Возврат товаров поставщику
		МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийВозвратТоваровПоставщику.Покупка);
		// Передача товара
		МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийПередачаТоваров.ВПереработку);
		// Приходный кассовый ордер
		МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПоставщиком);
		// Расходный кассовый ордер
		МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийРКО.ОплатаПоставщику);
		// Поступление товаров услуг
		МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку);
		МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомисия);
		МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Импорт);
		МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Товары);
		МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Услуги);
		МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ОсновныеСредства);
		Если МассивВидовОпераций.Найти(ВидОперации) <> Неопределено Тогда
			Возврат Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком;
		КонецЕсли;
		
		// для остальных видов операций указанных типов объектов назначается прочий вид договора
		Возврат Перечисления.ВидыДоговоровКонтрагентов.Прочее;
		
	КонецЕсли;
	
	// Добавим вид операции по умолчанию. Выше описаны все типовые случаи, в случае если они не подходят используем прочий вид договора.
	Возврат Перечисления.ВидыДоговоровКонтрагентов.Прочее;

КонецФункции


#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

Функция ЕстьКонтрагентВСтроке(Объект)

	// Перечислим типы документов, в которых контрагент указывается в строке
	МассивТиповДокументов = Новый Массив;
	МассивТиповДокументов.Добавить(Тип("ДокументОбъект.АвансовыйОтчет"));
	
	ОписаниеТипов = Новый ОписаниеТипов(МассивТиповДокументов);
	
	Возврат ОписаниеТипов.СодержитТип(ТипЗнч(Объект));

КонецФункции

#КонецОбласти
