#Область ПрограммныйИнтерфейс

#Область СтатусыДокументов

// Возвращает право на редактирование статусов документов
//
// Возвращаемое значение:
//  Булево
//
Функция ПравоИзмененияСтатусовДокументов(МетаданныеДокумента) Экспорт
	
	// Право на изменение статусов определяется правом на редактирование данных документа.
	
	Возврат ПравоДоступа("Редактирование", МетаданныеДокумента);
	
КонецФункции

// Готовит данные для движений по регистру СтатусыДокументов
//
// Параметры:
//   ТаблицаОплатыСчетов - ТаблицаЗначений - описание см. в ПодготовитьПараметрыТаблицыСтатусовОплатыСчетов()
//   ТаблицаРеквизитов - ТаблицаЗначений - описание см. в ПодготовитьПараметрыТаблицыСтатусовОплатыСчетов()
//
Функция ПодготовитьТаблицуСтатусовОплатыСчетов(ТаблицаОплатыСчетов, ТаблицаРеквизитов, ЭтоОтменаПроведения=Ложь) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаРеквизитов)
	 Или Не ЗначениеЗаполнено(ТаблицаОплатыСчетов) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыТаблицыСтатусовОплатыСчетов(ТаблицаОплатыСчетов, ТаблицаРеквизитов);
	Реквизиты    = Параметры.Реквизиты[0];
	ОплатаСчетов = Параметры.ОплатаСчетов;
	ОплатаСчетов.Свернуть("СчетНаОплату", "Сумма");
	
	// Установка управляемой блокировки
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.СтатусыДокументов");
	ЭлементБлокировки.УстановитьЗначение("Организация", Реквизиты.Организация);
	ЭлементБлокировки.ИсточникДанных = ОплатаСчетов;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Документ", "СчетНаОплату");
	Блокировка.Заблокировать();
	
	// Читаем статусы оплаченных счетов и отсекаем те счета, статусы которых менять не собираемся
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&Организация КАК Организация,
	|	ОплатаСчетов.СчетНаОплату КАК СчетНаОплату,
	|	ОплатаСчетов.Сумма КАК Сумма
	|ПОМЕСТИТЬ ВТ_ТаблицаДокументов
	|ИЗ
	|	&ОплатаСчетов КАК ОплатаСчетов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	СчетНаОплату
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокументов.СчетНаОплату,
	|	ТаблицаДокументов.Сумма КАК СуммаОплаты,
	|	СчетаНаОплату.Дата КАК Дата,
	|	СчетаНаОплату.СуммаДокумента КАК СуммаСчета,
	|	ЕСТЬNULL(СтатусыДокументов.Статус, &СтатусОплатыПоУмолчанию) КАК Статус,
	|	ЕСТЬNULL(СтатусыДокументов.ДополнительныйСтатус, &ДополнительныйСтатусПоУмолчанию) КАК ДополнительныйСтатус
	|ПОМЕСТИТЬ ВТ_ТаблицаДокументов_Статусы
	|ИЗ
	|	ВТ_ТаблицаДокументов КАК ТаблицаДокументов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетНаОплатуПокупателю КАК СчетаНаОплату
	|		ПО (СчетаНаОплату.Организация = ТаблицаДокументов.Организация)
	|			И (СчетаНаОплату.Ссылка = ТаблицаДокументов.СчетНаОплату)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументов КАК СтатусыДокументов
	|		ПО (СтатусыДокументов.Организация = ТаблицаДокументов.Организация)
	|			И (СтатусыДокументов.Документ = ТаблицаДокументов.СчетНаОплату)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ТаблицаДокументов.СчетНаОплату
	|; 
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокументов.СчетНаОплату КАК СчетНаОплату,
	|	ТаблицаДокументов.СуммаОплаты КАК СуммаОплаты,
	|	ТаблицаДокументов.Дата КАК Дата,
	|	ТаблицаДокументов.СуммаСчета КАК СуммаСчета,
	|	ТаблицаДокументов.Статус КАК Статус
	|ПОМЕСТИТЬ ВТ_ТаблицаДокументов_Результат
	|ИЗ
	|	ВТ_ТаблицаДокументов_Статусы КАК ТаблицаДокументов
	|ГДЕ
	|	ВЫБОР КОГДА ТаблицаДокументов.СуммаОплаты >= ТаблицаДокументов.СуммаСчета И ТаблицаДокументов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусОплатыСчета.Оплачен) И НЕ &ЭтоОтменаПроведения
	|		ТОГДА ЛОЖЬ
	|	ИНАЧЕ
	|		ИСТИНА
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокументов.Дата КАК Дата,
	|	ТаблицаДокументов.СчетНаОплату КАК СчетНаОплату
	|ИЗ
	|	ВТ_ТаблицаДокументов_Результат КАК ТаблицаДокументов
	|ГДЕ
	|	ТаблицаДокументов.Статус В(&АвтоматическиИзменяемыеСтатусы)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	СчетНаОплату";
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	СтатусОплатыПоУмолчанию   = Перечисления.СтатусОплатыСчета.СтатусНовогоДокумента();
	
	ТипРегистратора = ТипЗнч(Реквизиты.Регистратор);
	Если ТипРегистратора = Тип("ДокументСсылка.ПлатежныйОрдерСписаниеДенежныхСредств")
		Или ТипРегистратора = Тип("ДокументСсылка.РасходныйКассовыйОрдер")
		Или ТипРегистратора = Тип("ДокументСсылка.ПлатежноеПоручениеИсходящее") Тогда
		Запрос.Текст = СтрЗаменить(ТекстЗапроса, "СчетНаОплатуПокупателю", "СчетНаОплатуПоставщика");
		ДополнительныйСтатусПоУмолчанию = Перечисления.СтатусыПоступленияПоСчету.СтатусНовогоДокумента();
	Иначе
		Запрос.Текст = ТекстЗапроса;
		ДополнительныйСтатусПоУмолчанию = Перечисления.СтатусыОтгрузки.СтатусНовогоДокумента();
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Организация",  Реквизиты.Организация);
	Запрос.УстановитьПараметр("ОплатаСчетов", ОплатаСчетов);  
	
	АвтоматическиИзменяемыеСтатусыОплаты = АвтоматическиИзменяемыеСтатусыОплаты();

	Запрос.УстановитьПараметр("АвтоматическиИзменяемыеСтатусы", АвтоматическиИзменяемыеСтатусыОплаты);
	
	Запрос.УстановитьПараметр("ЭтоОтменаПроведения", ЭтоОтменаПроведения);
	
	Запрос.Параметры.Вставить("СтатусОплатыПоУмолчанию",   СтатусОплатыПоУмолчанию);
	Запрос.Параметры.Вставить("ДополнительныйСтатусПоУмолчанию", ДополнительныйСтатусПоУмолчанию);
	
	ТаблицаНеоплаченныхСчетов = Запрос.Выполнить().Выгрузить();
	
	ТаблицаСтатусов = НоваяТаблицаСтатусов();
	
	Если ТаблицаНеоплаченныхСчетов.Количество() = 0 Тогда
		Возврат ТаблицаСтатусов;
	КонецЕсли;
	
	// Раньше даты первого счета не имеет смысла искать оплаты
	Запрос.УстановитьПараметр(
		"ДатаПервогоСчета", НачалоДня(ТаблицаНеоплаченныхСчетов[0].Дата));
	
	Запрос.УстановитьПараметр("ПозицияРегистратора",
		Новый Граница(Новый МоментВремени(Реквизиты.Период, Реквизиты.Регистратор), ВидГраницы.Исключая));
	
	Запрос.УстановитьПараметр("НеоплаченныеСчета",
		ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаНеоплаченныхСчетов, "СчетНаОплату"));  
		
	Запрос.УстановитьПараметр("ЭтоОтменаПроведения", ЭтоОтменаПроведения);
	
	// При определении суммы оплаты, учитываем суммы поступившие как до регистратора, так и после
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.СчетНаОплату КАК СчетНаОплату,
	|	СУММА(ВложенныйЗапрос.СуммаОборот) КАК СуммаОплаты
	|ПОМЕСТИТЬ ВТ_ОплатаСчетов
	|ИЗ
	|	(ВЫБРАТЬ
	|		ОплатаСчетовОбороты.СчетНаОплату КАК СчетНаОплату,
	|		ОплатаСчетовОбороты.СуммаОборот КАК СуммаОборот
	|	ИЗ
	|		РегистрНакопления.ОплатаСчетов.Обороты(
	|				&ДатаПервогоСчета,
	|				&ПозицияРегистратора,
	|				,
	|				Организация = &Организация
	|					И СчетНаОплату В (&НеоплаченныеСчета)) КАК ОплатаСчетовОбороты
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ОплатаСчетовОбороты.СчетНаОплату,
	|		ОплатаСчетовОбороты.СуммаОборот
	|	ИЗ
	|		РегистрНакопления.ОплатаСчетов.Обороты(
	|				&ПозицияРегистратора,
	|				,
	|				,
	|				Организация = &Организация
	|					И СчетНаОплату В (&НеоплаченныеСчета)) КАК ОплатаСчетовОбороты) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.СчетНаОплату
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетНаОплату
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокументов.СчетНаОплату КАК Документ,
	|	ВЫБОР КОГДА &ЭтоОтменаПроведения ТОГДА 
	|		ЕСТЬNULL(ОплатаСчетов.СуммаОплаты, 0)
	|	ИНАЧЕ 
	|		ТаблицаДокументов.СуммаОплаты + ЕСТЬNULL(ОплатаСчетов.СуммаОплаты, 0)
	|	КОНЕЦ КАК СуммаОплаты,
	|	ТаблицаДокументов.СуммаСчета КАК СуммаСчета,
	|	ТаблицаДокументов.ДополнительныйСтатус КАК ДополнительныйСтатус
	|ИЗ
	|	ВТ_ТаблицаДокументов_Статусы КАК ТаблицаДокументов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОплатаСчетов КАК ОплатаСчетов
	|		ПО ТаблицаДокументов.СчетНаОплату = ОплатаСчетов.СчетНаОплату
	|ГДЕ
	|	ТаблицаДокументов.СчетНаОплату В(&НеоплаченныеСчета)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = ТаблицаСтатусов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		Если Выборка.СуммаОплаты >= Выборка.СуммаСчета Тогда
			НоваяСтрока.Статус = Перечисления.СтатусОплатыСчета.Оплачен;
		ИначеЕсли Выборка.СуммаОплаты > 0 Тогда
			НоваяСтрока.Статус = Перечисления.СтатусОплатыСчета.ОплаченЧастично;
		Иначе
			НоваяСтрока.Статус = Перечисления.СтатусОплатыСчета.НеОплачен;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаСтатусов;
	
КонецФункции

Функция ПодготовитьПараметрыТаблицыСтатусовОплатыСчетов(ТаблицаОплатыСчетов, ТаблицаРеквизитов)
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.ОплатаСчетов
	
	СписокОбязательныхКолонок = ""
		+ "СчетНаОплату," // <ДокументСсылка.СчетНаОплатуПокупателю, ДокументСсылка.СчетНаОплатуПоставщика> - счет на оплату
		+ "Сумма";        // <Число,15,2> - сумма оплаты в валюте счета
	
	Параметры.Вставить("ОплатаСчетов", ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаОплатыСчетов, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
		+ "Период,"      // <Дата> - период движений - дата документа
		+ "Регистратор," // <ДокументСсылка.*> - документ-регистратор движений
		+ "Организация"; // <СправочникСсылка.Организации> - организация
	
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизитов, СписокОбязательныхКолонок));
	
	Возврат Параметры;
	
КонецФункции

// Готовит данные для движений по регистру СтатусыДокументов при отгрузке по счетам.
//
// Параметры:
//   ТаблицаТоварыУслуги - ТаблицаЗначений - описание см. в ПодготовитьПараметрыТаблицыСтатусовОтгрузкиПоСчетам()
//   ТаблицаРеквизитов - ТаблицаЗначений - описание см. в ПодготовитьПараметрыТаблицыСтатусовОтгрузкиПоСчетам()
//
Функция ПодготовитьТаблицуСтатусовОтгрузкиПоСчетам(ТаблицаСчетовНаОплату, ТаблицаТоварыУслуги, ТаблицаРеквизитов) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаРеквизитов) ИЛИ НЕ ЗначениеЗаполнено(ТаблицаСчетовНаОплату)
	 Или Не ЗначениеЗаполнено(ТаблицаТоварыУслуги) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизитов[0];
	
	ТекущиеСтатусы = РегистрыСведений.СтатусыДокументов.ПолучитьСтатусыДокументов(
		ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаСчетовНаОплату, "СчетНаОплатуПокупателю", Истина), Реквизиты.Организация);
		
	МассивСчетовНаОплату = Новый Массив;
	Для каждого ТекущийСтатус Из ТекущиеСтатусы Цикл
	
		ТекущийСтатусОтгрузки = ТекущийСтатус.Значение.ДополнительныйСтатус;
		Если НЕ ЗначениеЗаполнено(ТекущийСтатусОтгрузки)
		   ИЛИ АвтоматическиИзменяемыеСтатусыОтгрузки().Найти(ТекущийСтатусОтгрузки) <> Неопределено Тогда
		   
		   МассивСчетовНаОплату.Добавить(ТекущийСтатус.Ключ);
		КонецЕсли;
	
	КонецЦикла; 
	
	Если МассивСчетовНаОплату.Количество() = 0 Тогда
		// Статус автоматически не меняется
		Возврат Неопределено;
	КонецЕсли; 
	
	Параметры = ПодготовитьПараметрыТаблицыСтатусовОтгрузкиПоСчетам(
		ТаблицаТоварыУслуги, ТаблицаРеквизитов);
	
	Реквизиты      = Параметры.Реквизиты[0];
	ТоварыУслуги   = Параметры.ТоварыУслуги;
	
	ТаблицаСтатусов = НоваяТаблицаСтатусов();
	
	// Установка управляемой блокировки
	Блокировка = Новый БлокировкаДанных;
	
	Для каждого СчетНаОплату Из МассивСчетовНаОплату Цикл
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.СтатусыДокументов");
		ЭлементБлокировки.УстановитьЗначение("Организация", Реквизиты.Организация);
		ЭлементБлокировки.УстановитьЗначение("Документ",    СчетНаОплату);
	КонецЦикла; 
	
	Блокировка.Заблокировать();
	
	РеализацииПоСчетам = Документы.РеализацияТоваровУслуг.РеализацииПоСчетам(МассивСчетовНаОплату);
	ПередачаОСПоСчетам = Документы.ПередачаОС.ПередачаОСПоСчетам(МассивСчетовНаОплату);
	
	Для каждого СчетНаОплатуПокупателю Из МассивСчетовНаОплату Цикл
	
		РеализацииПоСчету = ОбщегоНазначения.ВыгрузитьКолонку(
			РеализацииПоСчетам.Скопировать(Новый Структура("СчетНаОплату", СчетНаОплатуПокупателю)), 
			"Реализация", Истина);
		
		ЭтаРеализация = РеализацииПоСчету.Найти(Реквизиты.Регистратор);
		Если ЭтаРеализация <> Неопределено Тогда
			РеализацииПоСчету.Удалить(ЭтаРеализация);
		КонецЕсли;
		
		СтатусОтгрузки = Перечисления.СтатусыОтгрузки.Отгружен;
		
		// Товары и услуги
		ТоварыУслугиКРеализации = Документы.РеализацияТоваровУслуг.ТоварыУслугиКРеализацииПоСчету(
			СчетНаОплатуПокупателю, РеализацииПоСчету, Реквизиты.Регистратор); 
			
		//Обход ситуации с некорректной сверткой таблиц из-за свойства "Неотрицательное" реквизита "Количество"	
		ТоварыУслугиКРеализацииТаб = ТоварыУслугиКРеализации.Скопировать(); 
		ТоварыУслугиКРеализацииТаб.Колонки.Удалить("Количество"); 
		
		КЧ = Новый КвалификаторыЧисла(15,3,ДопустимыйЗнак.Любой);
		МассивЧ = Новый Массив;
		МассивЧ.Добавить(Тип("Число"));
		
		ОписаниеТиповЧ = Новый ОписаниеТипов(МассивЧ, , ,КЧ);
		ТоварыУслугиКРеализацииТаб.Колонки.Добавить("Количество",ОписаниеТиповЧ); 
		
		КоличествоМассив = ТоварыУслугиКРеализации.ВыгрузитьКолонку("Количество"); 
		
		ТоварыУслугиКРеализацииТаб.ЗагрузитьКолонку(КоличествоМассив, "Количество");
		
		ТоварыУслугиКРеализации = ТоварыУслугиКРеализацииТаб;	
			
		Для Каждого СтрокаТаблицы Из ТоварыУслугиКРеализации Цикл
			Если СтрокаТаблицы.ЭтоУслуга И СтрокаТаблицы.Количество = 0 Тогда
				// Если количество не указано, считаем, что услуга оказывается один раз
				СтрокаТаблицы.Количество = 1;
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого СтрокаТаблицы Из ТоварыУслуги Цикл
			НоваяСтрока = ТоварыУслугиКРеализации.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы, , "Количество");
			НоваяСтрока.Количество = -СтрокаТаблицы.Количество;
		КонецЦикла;
		
		ТоварыУслугиКРеализации.Свернуть("ЭтоУслуга, Номенклатура", "Количество");
		Для Каждого СтрокаТаблицы Из ТоварыУслугиКРеализации Цикл
			Если СтрокаТаблицы.Количество > 0 Тогда
				СтатусОтгрузки = Перечисления.СтатусыОтгрузки.ОтгруженЧастично;
				Прервать;
			КонецЕсли;
		КонецЦикла; 
		
		Если СтатусОтгрузки <> Перечисления.СтатусыОтгрузки.ОтгруженЧастично И СчетНаОплатуПокупателю.ОС.Количество() <> 0  Тогда 	    
			
			ПередачаОСПоСчету = ОбщегоНазначения.ВыгрузитьКолонку(
			ПередачаОСПоСчетам.Скопировать(Новый Структура("СчетНаОплату", СчетНаОплатуПокупателю)), 
			"ПередачаОС", Истина);
			
			ЭтаПередачаОС = ПередачаОСПоСчету.Найти(Реквизиты.Регистратор);
			Если ЭтаПередачаОС <> Неопределено Тогда
				ПередачаОСПоСчету.Удалить(ЭтаПередачаОС);
			КонецЕсли;
									
			Результат = Документы.ПередачаОС.ПолучитьДанныеПоОтгрузкамОС(СчетНаОплатуПокупателю, ПередачаОСПоСчету);
			
			ПереданныеОС = Результат.ПереданныеОС;   
			
			ОсновныеСредстваКПередачеПоСчету = Результат.ОС; 
			
			ПоляОтбора = "ОсновноеСредство";
			ПереданныеОС.Индексы.Добавить(ПоляОтбора);
			Отбор = Новый Структура(ПоляОтбора);
			
			КоличествоСтрок = ОсновныеСредстваКПередачеПоСчету.Количество();
			
			Для Поз = 1 По КоличествоСтрок Цикл 
				
				СтрокаПередачи = ОсновныеСредстваКПередачеПоСчету[КоличествоСтрок-Поз];
				
				ЗаполнитьЗначенияСвойств(Отбор, СтрокаПередачи);
				НайденныеСтроки = ПереданныеОС.НайтиСтроки(Отбор);
				
				Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
					НоваяСтрока = ОсновныеСредстваКПередачеПоСчету.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, НайденнаяСтрока, , "Количество");
					НоваяСтрока.Количество = -НайденнаяСтрока.Количество;	
				КонецЦикла;
				
			КонецЦикла;
			
			ОсновныеСредстваКПередачеПоСчету.Свернуть("ОсновноеСредство", "Количество");
			Для Каждого СтрокаТаблицы Из ОсновныеСредстваКПередачеПоСчету Цикл
				Если СтрокаТаблицы.Количество > 0 Тогда
					СтатусОтгрузки = Перечисления.СтатусыОтгрузки.ОтгруженЧастично;
					Прервать;
				КонецЕсли;
			КонецЦикла; 
			
		КонецЕсли;
		
		НоваяСтрока = ТаблицаСтатусов.Добавить();
		НоваяСтрока.Документ             = СчетНаОплатуПокупателю;
		НоваяСтрока.Статус               = ТекущиеСтатусы[СчетНаОплатуПокупателю].Статус;
		НоваяСтрока.ДополнительныйСтатус = СтатусОтгрузки;
				
	КонецЦикла; 
	
	Возврат ТаблицаСтатусов;
		
КонецФункции

// Готовит данные для движений по регистру СтатусыДокументов при отгрузке по счетам.
//
// Параметры:
//   ТаблицаТоварыУслуги - ТаблицаЗначений - описание см. в ПодготовитьПараметрыТаблицыСтатусовОтгрузкиПоСчетам()
//   ТаблицаРеквизитов - ТаблицаЗначений - описание см. в ПодготовитьПараметрыТаблицыСтатусовОтгрузкиПоСчетам()
//
Функция ПодготовитьТаблицуСтатусовОтменыОтгрузкиПоСчетам(ТаблицаСчетовНаОплату, ТаблицаТоварыУслуги, ТаблицаРеквизитов) Экспорт
		
	Если Не ЗначениеЗаполнено(ТаблицаРеквизитов) ИЛИ НЕ ЗначениеЗаполнено(ТаблицаСчетовНаОплату)
	 Или Не ЗначениеЗаполнено(ТаблицаТоварыУслуги) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизитов[0];
	
	ТекущиеСтатусы = РегистрыСведений.СтатусыДокументов.ПолучитьСтатусыДокументов(
		ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаСчетовНаОплату, "СчетНаОплатуПокупателю", Истина), Реквизиты.Организация);
		
	МассивСчетовНаОплату = Новый Массив;
	Для каждого ТекущийСтатус Из ТекущиеСтатусы Цикл
		ТекущийСтатусОтгрузки = ТекущийСтатус.Значение.ДополнительныйСтатус;
		МассивСчетовНаОплату.Добавить(ТекущийСтатус.Ключ);
	КонецЦикла; 
		
	Параметры = ПодготовитьПараметрыТаблицыСтатусовОтгрузкиПоСчетам(
		ТаблицаТоварыУслуги, ТаблицаРеквизитов);
	
	Реквизиты      = Параметры.Реквизиты[0];
	ТоварыУслуги   = Параметры.ТоварыУслуги;
	
	ТаблицаСтатусов = НоваяТаблицаСтатусов();
	
	// Установка управляемой блокировки
	Блокировка = Новый БлокировкаДанных;
	
	Для каждого СчетНаОплату Из МассивСчетовНаОплату Цикл
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.СтатусыДокументов");
		ЭлементБлокировки.УстановитьЗначение("Организация", Реквизиты.Организация);
		ЭлементБлокировки.УстановитьЗначение("Документ",    СчетНаОплату);
	КонецЦикла; 
	
	Блокировка.Заблокировать();
	
	РеализацииПоСчетам = Документы.РеализацияТоваровУслуг.РеализацииПоСчетам(МассивСчетовНаОплату);
	ПередачаОСПоСчетам = Документы.ПередачаОС.ПередачаОСПоСчетам(МассивСчетовНаОплату);  
	
	Для каждого СчетНаОплатуПокупателю Из МассивСчетовНаОплату Цикл
	
		РеализацииПоСчету = ОбщегоНазначения.ВыгрузитьКолонку(
			РеализацииПоСчетам.Скопировать(Новый Структура("СчетНаОплату", СчетНаОплатуПокупателю)), 
			"Реализация", Истина);
		
		ЭтаРеализация = РеализацииПоСчету.Найти(Реквизиты.Регистратор);
		Если ЭтаРеализация <> Неопределено Тогда
			РеализацииПоСчету.Удалить(ЭтаРеализация);
		КонецЕсли; 
		
		СтатусОтгрузки = Перечисления.СтатусыОтгрузки.НеОтгружен;
		
		//Если до текущего документа поступления не было поступлений, тогда статус - не получен
		Если РеализацииПоСчету.Количество() <> 0 Тогда
			
			// Товары и услуги
			ТоварыУслугиКРеализации = Документы.РеализацияТоваровУслуг.ТоварыУслугиКРеализацииПоСчету(
				СчетНаОплатуПокупателю, РеализацииПоСчету, Реквизиты.Регистратор); 
			
			// Если по данному счету нет товаров/услуг, ожидаемых к получению, то они полностью получены
			Если ТоварыУслугиКРеализации.Количество() = 0 Тогда		
				СтатусОтгрузки = Перечисления.СтатусыОтгрузки.Отгружен;		
			Иначе			
				СтатусОтгрузки = Перечисления.СтатусыОтгрузки.ОтгруженЧастично;				
			КонецЕсли; 
						
		КонецЕсли;
			
		//Если на данном этапе статус - "Получен частично", то независимо от отгрузки ОС, статус остается таким же
		Если СтатусОтгрузки <> Перечисления.СтатусыОтгрузки.ОтгруженЧастично И СчетНаОплатуПокупателю.ОС.Количество() <> 0  Тогда 	    
			
			ПередачаОСПоСчету = ОбщегоНазначения.ВыгрузитьКолонку(
			ПередачаОСПоСчетам.Скопировать(Новый Структура("СчетНаОплату", СчетНаОплатуПокупателю)), 
			"ПередачаОС", Истина);
			
			ЭтаПередачаОС = ПередачаОСПоСчету.Найти(Реквизиты.Регистратор);
			Если ЭтаПередачаОС <> Неопределено Тогда
				ПередачаОСПоСчету.Удалить(ЭтаПередачаОС);
			КонецЕсли;  
			
			Результат = Документы.ПередачаОС.ПолучитьДанныеПоОтгрузкамОС(СчетНаОплатуПокупателю, ПередачаОСПоСчету);
			
			ПереданныеОС = Результат.ПереданныеОС;   
			
			ОсновныеСредстваКПередачеПоСчету = Результат.ОС; 
			
             // Если по данному счету нет ОС, ожидаемых к отгрузке, то они полностью получены
			Если ОсновныеСредстваКПередачеПоСчету.Количество() = 0 Тогда		
				СтатусОтгрузки = Перечисления.СтатусыОтгрузки.Отгружен;		
			ИначеЕсли ПереданныеОС.Количество() > 0 Тогда 			
				СтатусОтгрузки = Перечисления.СтатусыОтгрузки.ОтгруженЧастично;				
			КонецЕсли; 
			
		КонецЕсли;
		
		НоваяСтрока = ТаблицаСтатусов.Добавить();
		НоваяСтрока.Документ             = СчетНаОплатуПокупателю;
		НоваяСтрока.Статус               = ТекущиеСтатусы[СчетНаОплатуПокупателю].Статус;
		НоваяСтрока.ДополнительныйСтатус = СтатусОтгрузки;
				
	КонецЦикла; 
	
	Возврат ТаблицаСтатусов;
		
КонецФункции

Функция ПодготовитьПараметрыТаблицыСтатусовОтгрузкиПоСчетам(ТаблицаТоварыУслуги, ТаблицаРеквизитов)
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.ТоварыУслуги
	
	СписокОбязательныхКолонок = ""
		+ "ЭтоУслуга,"    // <Булево>
		+ "Номенклатура," // <СправочникСсылка.Номенклатура>
		+ "Содержание,"   // <Строка, 1000> - содержание услуги
		+ "Количество";   // <Число, 10, 3>
	
	Параметры.Вставить("ТоварыУслуги", ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаТоварыУслуги, СписокОбязательныхКолонок));
		
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
		+ "Период,"      // <Дата> - период движений - дата документа
		+ "Регистратор," // <ДокументСсылка.*> - документ-регистратор движений
		+ "Организация," // <СправочникСсылка.Организации> - организация
		+ "СчетНаОплатуПокупателю"; // <ДокументСсылка.СчетНаОплатуПокупателю> - счет на оплату
	
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизитов, СписокОбязательныхКолонок));
	
	Возврат Параметры;
	
КонецФункции

// Готовит данные для движений по регистру СтатусыДокументов при поступлении по счетам.
//
// Параметры:
//   ТаблицаТоварыУслуги - ТаблицаЗначений - описание см. в ПодготовитьПараметрыТаблицыСтатусовПоступленияПоСчетам()
//   ТаблицаРеквизитов - ТаблицаЗначений - описание см. в ПодготовитьПараметрыТаблицыСтатусовПоступленияПоСчетам()
//
Функция ПодготовитьТаблицуСтатусовПоступленияПоСчетам(ТаблицаТоварыУслуги, ТаблицаОС, ТаблицаРеквизитов) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаРеквизитов)
	 Или Не ЗначениеЗаполнено(ТаблицаТоварыУслуги) И Не ЗначениеЗаполнено(ТаблицаОС)Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизитов[0];
	Если Не ЗначениеЗаполнено(Реквизиты.СчетНаОплатуПоставщика) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТекущиеСтатусы = РегистрыСведений.СтатусыДокументов.ПолучитьСтатусыДокумента(
		Реквизиты.СчетНаОплатуПоставщика, Реквизиты.Организация);
	
	ТекущийСтатусОплаты      = ТекущиеСтатусы.Статус;
	ТекущийСтатусПоступления = ТекущиеСтатусы.ДополнительныйСтатус;
	
	Если ЗначениеЗаполнено(ТекущийСтатусПоступления)
	   И АвтоматическиИзменяемыеСтатусыПоступленияПоСчету().Найти(ТекущийСтатусПоступления) = Неопределено Тогда
		// Статус автоматически не меняется.
		Возврат Неопределено;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыТаблицыСтатусовПоступленияПоСчетам(
		ТаблицаТоварыУслуги, ТаблицаОС, ТаблицаРеквизитов);
	
	Реквизиты        = Параметры.Реквизиты[0];
	ТоварыУслуги   	 = Параметры.ТоварыУслуги; 
	ОсновныеСредства = Параметры.ОС;
	
	ТаблицаСтатусов = НоваяТаблицаСтатусов();
	
	// Установка управляемой блокировки
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.СтатусыДокументов");
	ЭлементБлокировки.УстановитьЗначение("Организация", Реквизиты.Организация);
	ЭлементБлокировки.УстановитьЗначение("Документ",    Реквизиты.СчетНаОплатуПоставщика);
	Блокировка.Заблокировать();
	
	ПоступленияПоСчету = Документы.ПоступлениеТоваровУслуг.ПоступленияПоСчету(Реквизиты.СчетНаОплатуПоставщика);
	
	ТекущееПоступление = ПоступленияПоСчету.Найти(Реквизиты.Регистратор);
	Если ТекущееПоступление <> Неопределено Тогда
		ПоступленияПоСчету.Удалить(ТекущееПоступление);
	КонецЕсли;
	
	СтатусПоступления = Перечисления.СтатусыПоступленияПоСчету.Получен;
	
	// Товары и услуги
	ТоварыУслугиКПоступлению = Документы.ПоступлениеТоваровУслуг.ТоварыУслугиКПоступлениюПоСчету(
		Реквизиты.СчетНаОплатуПоставщика, ПоступленияПоСчету,Реквизиты.Регистратор); 
	Для Каждого СтрокаТаблицы Из ТоварыУслугиКПоступлению Цикл
		Если СтрокаТаблицы.ЭтоУслуга И СтрокаТаблицы.Количество = 0 Тогда
			// Если количество не указано, считаем, что услуга получается один раз.
			СтрокаТаблицы.Количество = 1;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаТаблицы Из ТоварыУслуги Цикл
		НоваяСтрока = ТоварыУслугиКПоступлению.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы, , "Количество");
		НоваяСтрока.Количество = -СтрокаТаблицы.Количество;
	КонецЦикла;
	
	ТоварыУслугиКПоступлению.Свернуть("ЭтоУслуга, Номенклатура", "Количество");
	Для Каждого СтрокаТаблицы Из ТоварыУслугиКПоступлению Цикл
		Если СтрокаТаблицы.Количество > 0 Тогда
			СтатусПоступления = Перечисления.СтатусыПоступленияПоСчету.ПолученЧастично;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	//Основные средства
	ОсновныеСредстваКПоступлению = Документы.ПоступлениеТоваровУслуг.ОсновныеСредстваКПоступлениюПоСчету(
		Реквизиты.СчетНаОплатуПоставщика, ПоступленияПоСчету);
	
	Для Каждого СтрокаТаблицы Из ОсновныеСредства Цикл
		НоваяСтрока = ОсновныеСредстваКПоступлению.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы, , "Количество");
		НоваяСтрока.Количество = -СтрокаТаблицы.Количество;
	КонецЦикла;
	
	ОсновныеСредстваКПоступлению.Свернуть("ОсновноеСредство", "Количество");
	Для Каждого СтрокаТаблицы Из ОсновныеСредстваКПоступлению Цикл
		Если СтрокаТаблицы.Количество > 0 Тогда
			СтатусПоступления = Перечисления.СтатусыПоступленияПоСчету.ПолученЧастично;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	НоваяСтрока = ТаблицаСтатусов.Добавить();
	НоваяСтрока.Документ = Реквизиты.СчетНаОплатуПоставщика;
	НоваяСтрока.Статус = ТекущийСтатусОплаты;
	НоваяСтрока.ДополнительныйСтатус = СтатусПоступления;
	
	Возврат ТаблицаСтатусов;
	
КонецФункции 

// Готовит данные для движений по регистру СтатусыДокументов при поступлении по счетам.
//
// Параметры:
//   ТаблицаТоварыУслуги - ТаблицаЗначений - описание см. в ПодготовитьПараметрыТаблицыСтатусовПоступленияПоСчетам()
//   ТаблицаРеквизитов - ТаблицаЗначений - описание см. в ПодготовитьПараметрыТаблицыСтатусовПоступленияПоСчетам()
//
Функция ПодготовитьТаблицуСтатусовОтменыПоступленияПоСчетам(ТаблицаТоварыУслуги, ТаблицаОС, ТаблицаРеквизитов) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаРеквизитов)
	 Или Не ЗначениеЗаполнено(ТаблицаТоварыУслуги) И Не ЗначениеЗаполнено(ТаблицаОС)Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизитов[0];
	Если Не ЗначениеЗаполнено(Реквизиты.СчетНаОплатуПоставщика) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТекущиеСтатусы = РегистрыСведений.СтатусыДокументов.ПолучитьСтатусыДокумента(
		Реквизиты.СчетНаОплатуПоставщика, Реквизиты.Организация);
	
	ТекущийСтатусОплаты      = ТекущиеСтатусы.Статус;
	ТекущийСтатусПоступления = ТекущиеСтатусы.ДополнительныйСтатус;
	
	Параметры = ПодготовитьПараметрыТаблицыСтатусовПоступленияПоСчетам(
		ТаблицаТоварыУслуги, ТаблицаОС, ТаблицаРеквизитов);
	
	Реквизиты        = Параметры.Реквизиты[0];
	ТоварыУслуги   	 = Параметры.ТоварыУслуги; 
	ОсновныеСредства = Параметры.ОС;
	
	ТаблицаСтатусов = НоваяТаблицаСтатусов();
	
	// Установка управляемой блокировки
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.СтатусыДокументов");
	ЭлементБлокировки.УстановитьЗначение("Организация", Реквизиты.Организация);
	ЭлементБлокировки.УстановитьЗначение("Документ",    Реквизиты.СчетНаОплатуПоставщика);
	Блокировка.Заблокировать();
	
	ПоступленияПоСчету = Документы.ПоступлениеТоваровУслуг.ПоступленияПоСчету(Реквизиты.СчетНаОплатуПоставщика);
	
	ТекущееПоступление = ПоступленияПоСчету.Найти(Реквизиты.Регистратор);
	Если ТекущееПоступление <> Неопределено Тогда
		ПоступленияПоСчету.Удалить(ТекущееПоступление);
	КонецЕсли;
	
	СтатусПоступления = Перечисления.СтатусыПоступленияПоСчету.НеПолучен;
	
	//Если до текущего документа поступления не было поступлений, тогда статус - не получен
	Если ПоступленияПоСчету.Количество() <> 0 Тогда
			
		// Товары и услуги
		ТоварыУслугиКПоступлению = Документы.ПоступлениеТоваровУслуг.ТоварыУслугиКПоступлениюПоСчету(
			Реквизиты.СчетНаОплатуПоставщика, ПоступленияПоСчету,Реквизиты.Регистратор);
			
		// Если по данному счету нет товаров/услуг, ожидаемых к получению, то они полностью получены
		Если ТоварыУслугиКПоступлению.Количество() = 0 Тогда		
			СтатусПоступления = Перечисления.СтатусыПоступленияПоСчету.Получен;		
		Иначе			
			СтатусПоступления = Перечисления.СтатусыПоступленияПоСчету.ПолученЧастично;				
		КонецЕсли; 
		
		//Если на данном этапе статус - "Получен частично", то независимо от поступлений ОС, статус остается таким же
		Если СтатусПоступления <> Перечисления.СтатусыПоступленияПоСчету.ПолученЧастично Тогда			
			
			//Основные средства
			ОсновныеСредстваКПоступлению = Документы.ПоступлениеТоваровУслуг.ОсновныеСредстваКПоступлениюПоСчету(
				Реквизиты.СчетНаОплатуПоставщика, ПоступленияПоСчету); 
				
			// Если по данному счету нет ОС, ожидаемых к получению, то они полностью получены
			Если ОсновныеСредстваКПоступлению.Количество() = 0 Тогда		
				СтатусПоступления = Перечисления.СтатусыПоступленияПоСчету.Получен;		
			Иначе			
				СтатусПоступления = Перечисления.СтатусыПоступленияПоСчету.ПолученЧастично;				
			КонецЕсли; 
			
		КонецЕсли;
		
	КонецЕсли;
	
	НоваяСтрока = ТаблицаСтатусов.Добавить();
	НоваяСтрока.Документ = Реквизиты.СчетНаОплатуПоставщика;
	НоваяСтрока.Статус = ТекущийСтатусОплаты;
	НоваяСтрока.ДополнительныйСтатус = СтатусПоступления;
	
	Возврат ТаблицаСтатусов;
	
КонецФункции

Функция ПодготовитьПараметрыТаблицыСтатусовПоступленияПоСчетам(ТаблицаТоварыУслуги, ТаблицаОС, ТаблицаРеквизитов)
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.ТоварыУслуги
	
	СписокОбязательныхКолонок = ""
		+ "ЭтоУслуга,"    // <Булево>
		+ "Номенклатура," // <СправочникСсылка.Номенклатура>
		+ "Содержание,"   // <Строка, 1000> - содержание услуги
		+ "Количество";   // <Число, 10, 3>
	
	Параметры.Вставить("ТоварыУслуги", ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаТоварыУслуги, СписокОбязательныхКолонок));  
		
	// Подготовка таблицы Параметры.ОС
	
	СписокОбязательныхКолонок = ""
		+ "ОсновноеСредство," // <СправочникСсылка.ОсновныеСредства>
		+ "Количество";   // <Число, 10, 3>
	
	Параметры.Вставить("ОС", ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаОС, СписокОбязательныхКолонок));
		
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
		+ "Период,"      // <Дата> - период движений - дата документа
		+ "Регистратор," // <ДокументСсылка.*> - документ-регистратор движений
		+ "Организация," // <СправочникСсылка.Организации> - организация
		+ "СчетНаОплатуПоставщика"; // <ДокументСсылка.СчетНаОплатуПоставщика> - счет на оплату
	
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизитов, СписокОбязательныхКолонок));
	
	Возврат Параметры;
	
КонецФункции

// Готовит данные для движений по регистру СтатусыДокументов при отгрузке (передаче) ОС по счетам.
//
// Параметры:
//   ТаблицаОС - ТаблицаЗначений - описание см. в ПодготовитьПараметрыТаблицыСтатусовОтгрузкиПоСчетам()
//   ТаблицаРеквизитов - ТаблицаЗначений - описание см. в ПодготовитьПараметрыТаблицыСтатусовОтгрузкиОСПоСчетам()
//
Функция ПодготовитьТаблицуСтатусовОтгрузкиОСПоСчетам(ТаблицаСчетовНаОплату, ТаблицаОС, ТаблицаРеквизитов) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаРеквизитов) ИЛИ НЕ ЗначениеЗаполнено(ТаблицаСчетовНаОплату)
	 Или Не ЗначениеЗаполнено(ТаблицаОС) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизитов[0];
	
	ТекущиеСтатусы = РегистрыСведений.СтатусыДокументов.ПолучитьСтатусыДокументов(
		ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаСчетовНаОплату, "СчетНаОплатуПокупателю", Истина), Реквизиты.Организация);
		
	МассивСчетовНаОплату = Новый Массив;
	Для каждого ТекущийСтатус Из ТекущиеСтатусы Цикл
	
		ТекущийСтатусОтгрузки = ТекущийСтатус.Значение.ДополнительныйСтатус;
		Если НЕ ЗначениеЗаполнено(ТекущийСтатусОтгрузки)
		   ИЛИ АвтоматическиИзменяемыеСтатусыОтгрузки().Найти(ТекущийСтатусОтгрузки) <> Неопределено Тогда
		   
		   МассивСчетовНаОплату.Добавить(ТекущийСтатус.Ключ);
		КонецЕсли;
	
	КонецЦикла; 
	
	Если МассивСчетовНаОплату.Количество() = 0 Тогда
		// Статус автоматически не меняется
		Возврат Неопределено;
	КонецЕсли; 
	
	Параметры = ПодготовитьПараметрыТаблицыСтатусовОтгрузкиОСПоСчетам(
		ТаблицаОС, ТаблицаРеквизитов);
	
	Реквизиты      	 = Параметры.Реквизиты[0];
	ОсновныеСредства = Параметры.ОС;
	
	ТаблицаСтатусов = НоваяТаблицаСтатусов();
	
	// Установка управляемой блокировки
	Блокировка = Новый БлокировкаДанных;
	
	Для каждого СчетНаОплату Из МассивСчетовНаОплату Цикл
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.СтатусыДокументов");
		ЭлементБлокировки.УстановитьЗначение("Организация", Реквизиты.Организация);
		ЭлементБлокировки.УстановитьЗначение("Документ",    СчетНаОплату);
	КонецЦикла; 
	
	Блокировка.Заблокировать();
	  
	ПередачаОСПоСчетам = Документы.ПередачаОС.ПередачаОСПоСчетам(МассивСчетовНаОплату);
	РеализацииПоСчетам = Документы.РеализацияТоваровУслуг.РеализацииПоСчетам(МассивСчетовНаОплату); 
	
	Для Каждого СчетНаОплатуПокупателю Из МассивСчетовНаОплату Цикл
	
		ПередачаОСПоСчету = ОбщегоНазначения.ВыгрузитьКолонку(
			ПередачаОСПоСчетам.Скопировать(Новый Структура("СчетНаОплату", СчетНаОплатуПокупателю)), 
			"ПередачаОС", Истина);
		
		ЭтаПередачаОС = ПередачаОСПоСчету.Найти(Реквизиты.Регистратор);
		Если ЭтаПередачаОС <> Неопределено Тогда
			ПередачаОСПоСчету.Удалить(ЭтаПередачаОС);
		КонецЕсли; 
					
		СтатусОтгрузки = Перечисления.СтатусыОтгрузки.Отгружен;	
		
		ОсновныеСредстваКПередаче = Документы.ПередачаОС.ОсновныеСредстваКПередачеПоСчету(СчетНаОплатуПокупателю, ПередачаОСПоСчету);
		
		Для Каждого СтрокаТаблицы Из ОсновныеСредства Цикл
			НоваяСтрока = ОсновныеСредстваКПередаче.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы, , "Количество");
			НоваяСтрока.Количество = -СтрокаТаблицы.Количество;
		КонецЦикла;
		
		ОсновныеСредстваКПередаче.Свернуть("ОсновноеСредство", "Количество");
		Для Каждого СтрокаТаблицы Из ОсновныеСредстваКПередаче Цикл
			Если СтрокаТаблицы.Количество > 0 Тогда
				СтатусОтгрузки = Перечисления.СтатусыОтгрузки.ОтгруженЧастично;
				Прервать;
			КонецЕсли;
		КонецЦикла; 		  
		
		Если СтатусОтгрузки <> Перечисления.СтатусыОтгрузки.ОтгруженЧастично И (СчетНаОплатуПокупателю.Товары.Количество() <> 0 ИЛИ СчетНаОплатуПокупателю.Услуги.Количество() <> 0) Тогда 
			
			РеализацииПоСчету = ОбщегоНазначения.ВыгрузитьКолонку(
			РеализацииПоСчетам.Скопировать(Новый Структура("СчетНаОплату", СчетНаОплатуПокупателю)), 
				"Реализация", Истина);
			
			Результат = Документы.РеализацияТоваровУслуг.ПолучитьДанныеПоОтгрузкам(СчетНаОплатуПокупателю, РеализацииПоСчету);
			
			РеализованнаяНоменклатура = Результат.РеализованнаяНоменклатура;
						
			ТоварыУслугиКРеализацииПоСчету = Результат.ТоварыУслуги; 
			
			//Обход ситуации с некорректной сверткой таблиц из-за свойства "Неотрицательное" реквизита "Количество"	
			ТоварыУслугиКРеализацииТаб = ТоварыУслугиКРеализацииПоСчету.Скопировать(); 
			ТоварыУслугиКРеализацииТаб.Колонки.Удалить("Количество"); 
			
			КЧ = Новый КвалификаторыЧисла(15,3,ДопустимыйЗнак.Любой);
			МассивЧ = Новый Массив;
			МассивЧ.Добавить(Тип("Число"));
			
			ОписаниеТиповЧ = Новый ОписаниеТипов(МассивЧ, , ,КЧ);
			ТоварыУслугиКРеализацииТаб.Колонки.Добавить("Количество",ОписаниеТиповЧ); 
			
			КоличествоМассив = ТоварыУслугиКРеализацииПоСчету.ВыгрузитьКолонку("Количество"); 
			
			ТоварыУслугиКРеализацииТаб.ЗагрузитьКолонку(КоличествоМассив, "Количество");
			
			ТоварыУслугиКРеализацииПоСчету = ТоварыУслугиКРеализацииТаб;	
			
			Для Каждого СтрокаТаблицы Из ТоварыУслугиКРеализацииПоСчету Цикл
				Если СтрокаТаблицы.ЭтоУслуга И СтрокаТаблицы.Количество = 0 Тогда
					// Если количество не указано, считаем, что услуга оказывается один раз
					СтрокаТаблицы.Количество = 1;
				КонецЕсли;
			КонецЦикла;
						
			ПоляОтбора = "ЭтоУслуга, Номенклатура, Цена, Содержание"; 
			РеализованнаяНоменклатура.Индексы.Добавить(ПоляОтбора);
			Отбор = Новый Структура(ПоляОтбора);
			
			КоличествоСтрок = ТоварыУслугиКРеализацииПоСчету.Количество();
			Для Поз = 1 По КоличествоСтрок Цикл 
				
				СтрокаКРеализации = ТоварыУслугиКРеализацииПоСчету[КоличествоСтрок-Поз];
				
				ЗаполнитьЗначенияСвойств(Отбор, СтрокаКРеализации); 
							
				СтрокиРеализовано = РеализованнаяНоменклатура.НайтиСтроки(Отбор);
				
				Для каждого СтрокаРеализовано Из СтрокиРеализовано Цикл
					НоваяСтрока = ТоварыУслугиКРеализацииПоСчету.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРеализовано, , "Количество");
					НоваяСтрока.Количество = -СтрокаРеализовано.Количество;	
				КонецЦикла;
							
			КонецЦикла;
			
			ТоварыУслугиКРеализацииПоСчету.Свернуть("ЭтоУслуга, Номенклатура", "Количество");
			Для Каждого СтрокаТаблицы Из ТоварыУслугиКРеализацииПоСчету Цикл
				Если СтрокаТаблицы.Количество > 0 Тогда
					СтатусОтгрузки = Перечисления.СтатусыОтгрузки.ОтгруженЧастично;
					Прервать;
				КонецЕсли;
			КонецЦикла; 
			
		КонецЕсли;
			
		НоваяСтрока = ТаблицаСтатусов.Добавить();
		НоваяСтрока.Документ             = СчетНаОплатуПокупателю;
		НоваяСтрока.Статус               = ТекущиеСтатусы[СчетНаОплатуПокупателю].Статус;
		НоваяСтрока.ДополнительныйСтатус = СтатусОтгрузки;
				
	КонецЦикла; 
	
	Возврат ТаблицаСтатусов; 
		
КонецФункции

// Готовит данные для движений по регистру СтатусыДокументов при отгрузке (передаче) ОС по счетам.
//
// Параметры:
//   ТаблицаОС - ТаблицаЗначений - описание см. в ПодготовитьПараметрыТаблицыСтатусовОтгрузкиПоСчетам()
//   ТаблицаРеквизитов - ТаблицаЗначений - описание см. в ПодготовитьПараметрыТаблицыСтатусовОтгрузкиОСПоСчетам()
//
Функция ПодготовитьТаблицуСтатусовОтменыОтгрузкиОСПоСчетам(ТаблицаСчетовНаОплату, ТаблицаОС, ТаблицаРеквизитов) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаРеквизитов) ИЛИ НЕ ЗначениеЗаполнено(ТаблицаСчетовНаОплату)
	 Или Не ЗначениеЗаполнено(ТаблицаОС) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизитов[0];
	
	ТекущиеСтатусы = РегистрыСведений.СтатусыДокументов.ПолучитьСтатусыДокументов(
		ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаСчетовНаОплату, "СчетНаОплатуПокупателю", Истина), Реквизиты.Организация);
		
	МассивСчетовНаОплату = Новый Массив;
	Для каждого ТекущийСтатус Из ТекущиеСтатусы Цикл
	
		ТекущийСтатусОтгрузки = ТекущийСтатус.Значение.ДополнительныйСтатус;		   
		МассивСчетовНаОплату.Добавить(ТекущийСтатус.Ключ);
	
	КонецЦикла; 
		
	Параметры = ПодготовитьПараметрыТаблицыСтатусовОтгрузкиОСПоСчетам(
		ТаблицаОС, ТаблицаРеквизитов);
	
	Реквизиты      	 = Параметры.Реквизиты[0];
	ОсновныеСредства = Параметры.ОС;
	
	ТаблицаСтатусов = НоваяТаблицаСтатусов();
	
	// Установка управляемой блокировки
	Блокировка = Новый БлокировкаДанных;
	
	Для каждого СчетНаОплату Из МассивСчетовНаОплату Цикл
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.СтатусыДокументов");
		ЭлементБлокировки.УстановитьЗначение("Организация", Реквизиты.Организация);
		ЭлементБлокировки.УстановитьЗначение("Документ",    СчетНаОплату);
	КонецЦикла; 
	
	Блокировка.Заблокировать();
	  
	ПередачаОСПоСчетам = Документы.ПередачаОС.ПередачаОСПоСчетам(МассивСчетовНаОплату);
	РеализацииПоСчетам = Документы.РеализацияТоваровУслуг.РеализацииПоСчетам(МассивСчетовНаОплату); 
	
	Для каждого СчетНаОплатуПокупателю Из МассивСчетовНаОплату Цикл
	
		ПередачаОСПоСчету = ОбщегоНазначения.ВыгрузитьКолонку(
			ПередачаОСПоСчетам.Скопировать(Новый Структура("СчетНаОплату", СчетНаОплатуПокупателю)), 
			"ПередачаОС", Истина);
		
		ЭтаПередачаОС = ПередачаОСПоСчету.Найти(Реквизиты.Регистратор);
		Если ЭтаПередачаОС <> Неопределено Тогда
			ПередачаОСПоСчету.Удалить(ЭтаПередачаОС);
		КонецЕсли; 
					
		СтатусОтгрузки = Перечисления.СтатусыОтгрузки.НеОтгружен;	 
		
		//Если до текущего документа передачи ОС не было других документов передачи, тогда статус счета - не отгружен
		Если ПередачаОСПоСчету.Количество() <> 0 Тогда 
			// Основные средства, ожидаемые к отгрузке
			ОсновныеСредстваКПередаче = Документы.ПередачаОС.ОсновныеСредстваКПередачеПоСчету(СчетНаОплатуПокупателю, ПередачаОСПоСчету);
			
			// Если по данному счету нет ОС, ожидаемых к отгрузке, то они полностью получены
			Если ОсновныеСредстваКПередаче.Количество() = 0 Тогда		
				СтатусОтгрузки = Перечисления.СтатусыОтгрузки.Отгружен;		
			Иначе			
				СтатусОтгрузки = Перечисления.СтатусыОтгрузки.ОтгруженЧастично;				
			КонецЕсли;    
					
		КонецЕсли;		  
		
		//Если на данном этапе статус - "Получен частично", то независимо от отгрузки товаров/услуг, статус счета остается таким же
		Если СтатусОтгрузки <> Перечисления.СтатусыОтгрузки.ОтгруженЧастично И (СчетНаОплатуПокупателю.Товары.Количество() <> 0 ИЛИ СчетНаОплатуПокупателю.Услуги.Количество() <> 0) Тогда 
			
			РеализацииПоСчету = ОбщегоНазначения.ВыгрузитьКолонку(
			РеализацииПоСчетам.Скопировать(Новый Структура("СчетНаОплату", СчетНаОплатуПокупателю)), 
				"Реализация", Истина); 
			
			Результат = Документы.РеализацияТоваровУслуг.ПолучитьДанныеПоОтгрузкам(СчетНаОплатуПокупателю, РеализацииПоСчету);
			
			РеализованнаяНоменклатура = Результат.РеализованнаяНоменклатура;
						
			ТоварыУслугиКРеализацииПоСчету = Результат.ТоварыУслуги; 
			
			// Если по данному счету нет товаров/услуг, ожидаемых к отгрузке, то они полностью отгружены
			Если ТоварыУслугиКРеализацииПоСчету.Количество() = 0 Тогда		
				СтатусОтгрузки = Перечисления.СтатусыОтгрузки.Отгружен;		
			ИначеЕсли РеализованнаяНоменклатура.Количество() > 0 Тогда			
				СтатусОтгрузки = Перечисления.СтатусыОтгрузки.ОтгруженЧастично;				
			КонецЕсли; 							
			
		КонецЕсли;
			
		НоваяСтрока = ТаблицаСтатусов.Добавить();
		НоваяСтрока.Документ             = СчетНаОплатуПокупателю;
		НоваяСтрока.Статус               = ТекущиеСтатусы[СчетНаОплатуПокупателю].Статус;
		НоваяСтрока.ДополнительныйСтатус = СтатусОтгрузки;
				
	КонецЦикла; 
	
	Возврат ТаблицаСтатусов; 
		
КонецФункции

Функция ПодготовитьПараметрыТаблицыСтатусовОтгрузкиОСПоСчетам(ТаблицаОС, ТаблицаРеквизитов)
	
	Параметры = Новый Структура;
			
	// Подготовка таблицы Параметры.ОС
	
	СписокОбязательныхКолонок = ""
		+ "ОсновноеСредство," // <СправочникСсылка.ОсновныеСредства>
		+ "Количество";   // <Число, 10, 3>
	
	Параметры.Вставить("ОС", ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаОС, СписокОбязательныхКолонок));
		
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
		+ "Период,"      // <Дата> - период движений - дата документа
		+ "Регистратор," // <ДокументСсылка.*> - документ-регистратор движений
		+ "Организация," // <СправочникСсылка.Организации> - организация
		+ "СчетНаОплатуПокупателю"; // <ДокументСсылка.СчетНаОплатуПокупателю> - счет на оплату
	
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизитов, СписокОбязательныхКолонок));
	
	Возврат Параметры;
		
КонецФункции

// Формирует движения по регистру СтатусыДокументов
//
// Параметры:
//   ТаблицаСтатусов - ТаблицаЗначений - описание см. в ПодготовитьПараметрыСтатусовДокументов()
//   ТаблицаРеквизитов - ТаблицаЗначений - описание см. в ПодготовитьПараметрыСтатусовДокументов()
//
Процедура СформироватьДвиженияСтатусовДокументов(ТаблицаСтатусов, ТаблицаРеквизитов) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаРеквизитов)
	 Или Не ЗначениеЗаполнено(ТаблицаСтатусов) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыСтатусовДокументов(ТаблицаСтатусов, ТаблицаРеквизитов);
	Реквизиты = Параметры.Реквизиты[0];
	
	Для Каждого СтрокаСтатуса Из Параметры.СтатусыДокументов Цикл
		
		// При записи набора, удаляем статусы, относящиеся к другой организации
		НаборЗаписей = РегистрыСведений.СтатусыДокументов.СоздатьНаборЗаписей();
		
		НаборЗаписей.Отбор.Документ.Установить(СтрокаСтатуса.Документ);
		
		Запись = НаборЗаписей.Добавить();
		Запись.Организация = Реквизиты.Организация;
		Запись.Документ    = СтрокаСтатуса.Документ;
		Запись.Статус      = СтрокаСтатуса.Статус;
		Запись.ДополнительныйСтатус = СтрокаСтатуса.ДополнительныйСтатус;
		
		НаборЗаписей.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПодготовитьПараметрыСтатусовДокументов(ТаблицаСтатусов, ТаблицаРеквизитов)
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.СтатусыДокументов
	
	СписокОбязательныхКолонок = ""
		+ "Документ," // <ДокументСсылка.*> - документ
		+ "Статус," // <ПеречислениеСсылка.*> - статус
		+ "ДополнительныйСтатус," // <ПеречислениеСсылка.*> - дополнительный статус
		+ "ОтправитьОповещениеОбИзмененииСтатуса"; // Булево - признак отправки оповещения
	
	Параметры.Вставить("СтатусыДокументов", ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаСтатусов, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
		+ "Организация"; // <СправочникСсылка.Организации> - организация
		
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизитов, СписокОбязательныхКолонок));
	
	Возврат Параметры;
	
КонецФункции

// Добавляет общее условное оформление форм списков документа СчетНаОплатуПокупателю
//
// Параметры:
//   УсловноеОформление - УсловноеОформлениеКомпоновкиДанных - настройки условного оформления формы
//
Процедура УстановитьУсловноеОформлениеСтатусовСчетовНаОплату(УсловноеОформление) Экспорт
	
	// Вся строка серым, если счет отменен
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "Список");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Список.Оплата", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтатусОплатыСчета.Отменен);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ДосьеВторостепеннаяНадписьЦвет);
	
	// Статус оплаты красным, если не оплачен, но хотя бы частично отгружен
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "Оплата");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Список.Оплата", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтатусОплатыСчета.НеОплачен);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Список.Отгрузка", ВидСравненияКомпоновкиДанных.НеРавно, Перечисления.СтатусыОтгрузки.НеОтгружен);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПросроченныеДанныеЦвет);
	
	// Статус оплаты красным, если частично оплачен
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "Оплата");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Список.Оплата", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтатусОплатыСчета.ОплаченЧастично);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПросроченныеДанныеЦвет);
	
	// Статус оплаты зеленым, если оплачен
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "Оплата");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Список.Оплата", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтатусОплатыСчета.Оплачен);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.ЗеленыйЛес);
	
	// Статус отгузки красным, если не отгружен, но хотя бы частично оплачен
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "Отгрузка");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Список.Оплата", ВидСравненияКомпоновкиДанных.НеРавно, Перечисления.СтатусОплатыСчета.Отменен);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Список.Оплата", ВидСравненияКомпоновкиДанных.НеРавно, Перечисления.СтатусОплатыСчета.НеОплачен);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Список.Отгрузка", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтатусыОтгрузки.НеОтгружен);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПросроченныеДанныеЦвет);
	
	// Статус отгрузки красным, если частично отгружен
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "Отгрузка");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Список.Оплата", ВидСравненияКомпоновкиДанных.НеРавно, Перечисления.СтатусОплатыСчета.Отменен);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Список.Отгрузка", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтатусыОтгрузки.ОтгруженЧастично);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПросроченныеДанныеЦвет);
	
	// Статус отгрузки зеленым, если отгружен
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "Отгрузка");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Список.Оплата", ВидСравненияКомпоновкиДанных.НеРавно, Перечисления.СтатусОплатыСчета.Отменен);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Список.Отгрузка", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтатусыОтгрузки.Отгружен);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.ЗеленыйЛес);
	
КонецПроцедуры

// Добавляет общее условное оформление форм списков документа СчетНаОплатуПоставщика.
//
// Параметры:
//   УсловноеОформлениеСписка - УсловноеОформлениеКомпоновкиДанных - настройки условного оформления динамического списка.
//
Процедура УстановитьУсловноеОформлениеСтатусовСчетовНаОплатуПоставщика(УсловноеОформлениеСписка) Экспорт
	
	// Вся строка серым, если счет отменен.
	
	ЭлементУО = УсловноеОформлениеСписка.Элементы.Добавить();
	
	//КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "Список");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Оплата", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтатусОплатыСчета.Отменен);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ДосьеВторостепеннаяНадписьЦвет);
	
	// Статус оплаты красным, если не оплачен, но хотя бы частично получен.
	
	ЭлементУО = УсловноеОформлениеСписка.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "Оплата");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Оплата", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтатусОплатыСчета.НеОплачен);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Поступление", ВидСравненияКомпоновкиДанных.НеРавно, Перечисления.СтатусыПоступленияПоСчету.НеПолучен);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПросроченныеДанныеЦвет);
	
	// Статус оплаты красным, если частично оплачен.
	
	ЭлементУО = УсловноеОформлениеСписка.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "Оплата");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Оплата", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтатусОплатыСчета.ОплаченЧастично);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПросроченныеДанныеЦвет);
	
	// Статус оплаты зеленым, если оплачен.
	
	ЭлементУО = УсловноеОформлениеСписка.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "Оплата");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Оплата", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтатусОплатыСчета.Оплачен);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.ЗеленыйЛес);
	
	// Статус поступления красным, если не получен, но хотя бы частично оплачен.
	
	ЭлементУО = УсловноеОформлениеСписка.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "Поступление");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Оплата", ВидСравненияКомпоновкиДанных.НеРавно, Перечисления.СтатусОплатыСчета.Отменен);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Оплата", ВидСравненияКомпоновкиДанных.НеРавно, Перечисления.СтатусОплатыСчета.НеОплачен);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Поступление", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтатусыПоступленияПоСчету.НеПолучен);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПросроченныеДанныеЦвет);
	
	// Статус поступления красным, если частично получен.
	
	ЭлементУО = УсловноеОформлениеСписка.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "Поступление");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Оплата", ВидСравненияКомпоновкиДанных.НеРавно, Перечисления.СтатусОплатыСчета.Отменен);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Поступление", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтатусыПоступленияПоСчету.ПолученЧастично);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПросроченныеДанныеЦвет);
	
	// Статус поступления зеленым, если получен.
	
	ЭлементУО = УсловноеОформлениеСписка.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "Поступление");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Оплата", ВидСравненияКомпоновкиДанных.НеРавно, Перечисления.СтатусОплатыСчета.Отменен);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Поступление", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтатусыПоступленияПоСчету.Получен);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.ЗеленыйЛес);
	
КонецПроцедуры

#КонецОбласти

#Область ОплатаСчетов

// Формирует движения по регистру ОплатаСчетов
//
// Параметры:
//   ТаблицаОплатыСчетов - ТаблицаЗначений - описание см. в ПодготовитьПараметрыОплатаСчетов()
//   ТаблицаРеквизитов - ТаблицаЗначений - описание см. в ПодготовитьПараметрыОплатаСчетов()
//   Движения - КоллекцияДвижений - коллекция наборов записей движений документа
//   Отказ - Булево - флаг отказа от записи движений
//
Процедура СформироватьДвиженияОплатаСчетов(ТаблицаОплатыСчетов, ТаблицаРеквизитов, Движения, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаРеквизитов)
	 Или Не ЗначениеЗаполнено(ТаблицаОплатыСчетов) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыОплатаСчетов(ТаблицаОплатыСчетов, ТаблицаРеквизитов);
	Реквизиты = Параметры.Реквизиты[0];
	
	Движения.ОплатаСчетов.Записывать = Истина;
	
	Для Каждого СтрокаОплаты Из Параметры.ОплатаСчетов Цикл
		
		Если СтрокаОплаты.Сумма <> 0 Тогда
			НовоеДвижение = Движения.ОплатаСчетов.Добавить();
			ЗаполнитьЗначенияСвойств(НовоеДвижение, СтрокаОплаты);
			ЗаполнитьЗначенияСвойств(НовоеДвижение, Реквизиты);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПодготовитьПараметрыОплатаСчетов(ТаблицаОплатыСчетов, ТаблицаРеквизитов)
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.ОплатаСчетов
	
	СписокОбязательныхКолонок = ""
		+ "СчетНаОплату," // <ДокументСсылка.СчетНаОплатуПокупателю> - счет на оплату
		+ "СтавкаНДС,"    // <ПеречислениеСсылка.СтавкиНДС> - ставка НДС
		+ "Сумма,"        // <Число, 15, 2> - сумма оплаты в валюте счета включая НДС
		+ "СуммаНДС,"     // <Число, 15, 2> - сумма НДС в валюте счета
		+ "Валюта";       // <СправочникСсылка.Валюта> - валюта счета
	
	Параметры.Вставить("ОплатаСчетов", ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаОплатыСчетов, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
		+ "Период,"      // <Дата> - период движений - дата документа
		+ "Регистратор," // <ДокументСсылка.*> - документ-регистратор движений
		+ "Организация"; // <СправочникСсылка.Организации> - организация
	
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизитов, СписокОбязательныхКолонок));
	
	Возврат Параметры;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция АвтоматическиИзменяемыеСтатусыОплаты()
	
	Статусы = Новый Массив;
	Статусы.Добавить(Перечисления.СтатусОплатыСчета.НеОплачен);
	Статусы.Добавить(Перечисления.СтатусОплатыСчета.ОплаченЧастично); 
	Статусы.Добавить(Перечисления.СтатусОплатыСчета.Оплачен);
	
	Возврат Статусы;
	
КонецФункции

Функция АвтоматическиИзменяемыеСтатусыОтгрузки()
	
	Статусы = Новый Массив;
	Статусы.Добавить(Перечисления.СтатусыОтгрузки.НеОтгружен);
	Статусы.Добавить(Перечисления.СтатусыОтгрузки.ОтгруженЧастично); 
	Статусы.Добавить(Перечисления.СтатусыОтгрузки.Отгружен);
	
	Возврат Статусы;
	
КонецФункции

Функция АвтоматическиИзменяемыеСтатусыПоступленияПоСчету()
	
	Статусы = Новый Массив;
	Статусы.Добавить(Перечисления.СтатусыПоступленияПоСчету.НеПолучен);
	Статусы.Добавить(Перечисления.СтатусыПоступленияПоСчету.ПолученЧастично);
	Статусы.Добавить(Перечисления.СтатусыПоступленияПоСчету.Получен);
	
	Возврат Статусы;
	
КонецФункции

Функция НоваяТаблицаСтатусов()
	
	ТаблицаСтатусов = РегистрыСведений.СтатусыДокументов.СоздатьНаборЗаписей().ВыгрузитьКолонки();
	ТаблицаСтатусов.Колонки.Добавить("ОтправитьОповещениеОбИзмененииСтатуса", Новый ОписаниеТипов("Булево"));
	ТаблицаСтатусов.Колонки.Удалить("Организация");
	
	Возврат ТаблицаСтатусов;
	
КонецФункции

// Анализирует наличие в списке колонок с дополнительной информацией, требующих соединения таблицы документов
// с таблицами регистров, и отключает их.
//
// Параметры:
//  Форма        - ФормаКлиентскогоПриложения - содержит реквизит "Список" типа динамический список.
//
Процедура УстановитьВидимостьКолонокДополнительнойИнформации(Форма) Экспорт
	
	ОтображатьСтатусыВСчетахНаОплату = ПолучитьФункциональнуюОпцию("ОтображатьСтатусыВСчетахНаОплату");
	
	СтруктураРеквизита = Новый Структура("ОтображатьСтатусыДокументов", ОтображатьСтатусыВСчетахНаОплату);
	ЗаполнитьЗначенияСвойств(Форма, СтруктураРеквизита);
	
	Элементы = Форма.Элементы;
		
	// Регистр сведений "СтатусыДокументов".
	ЕстьПравоИзмененияСтатусовДокументов = Ложь;
	ЕстьПравоЧтенияСтатусовДокументов    = Ложь;
	
	Если ЕстьКолонкаСписка("Оплата", Форма) Тогда // используются и основной, и дополнительный статусы
		
		Элементы.Оплата.Видимость = ОтображатьСтатусыВСчетахНаОплату;
		
		Если Элементы.Найти("ФормаИзменитьСтатус") <> Неопределено Тогда // только в формах списка
			
			ПозицияТочки = СтрНайти(Форма.ИмяФормы, ".", НаправлениеПоиска.СНачала, 1, 2);
			ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(Лев(Форма.ИмяФормы, ПозицияТочки - 1));
			ЕстьПравоИзмененияСтатусовДокументов = СтатусыДокументов.ПравоИзмененияСтатусовДокументов(ОбъектМетаданных);
			
			Элементы.ФормаИзменитьСтатус.Видимость                 = ОтображатьСтатусыВСчетахНаОплату И ЕстьПравоИзмененияСтатусовДокументов;
			Элементы.СписокКонтекстноеМенюИзменитьСтатус.Видимость = ОтображатьСтатусыВСчетахНаОплату И ЕстьПравоИзмененияСтатусовДокументов;
			
		КонецЕсли; 
		
		// Обрабатываем колонки дополнительного статуса.
		Если ЕстьКолонкаСписка("Отгрузка", Форма) Тогда // для покупателя
			
			Элементы.Отгрузка.Видимость = ОтображатьСтатусыВСчетахНаОплату;
			Если ОтображатьСтатусыВСчетахНаОплату Тогда
				СтатусыДокументов.УстановитьУсловноеОформлениеСтатусовСчетовНаОплату(Форма.УсловноеОформление);
			КонецЕсли;  
			
		ИначеЕсли ЕстьКолонкаСписка("Поступление", Форма) Тогда // для поставщика
			
			Элементы.Поступление.Видимость = ОтображатьСтатусыВСчетахНаОплату;
			Если ОтображатьСтатусыВСчетахНаОплату Тогда
				СтатусыДокументов.УстановитьУсловноеОформлениеСтатусовСчетовНаОплатуПоставщика(Форма.Список.УсловноеОформление);
			КонецЕсли;
					
		КонецЕсли;
		
	КонецЕсли; 
			
КонецПроцедуры 

Функция ЕстьКолонкаСписка(ИмяКолонки, Форма)
	
	Возврат ЕстьПолеДинамическогоСписка(ИмяКолонки, Форма)
		И ЕстьЭлементСписка(ИмяКолонки, Форма);
	
КонецФункции
	
Функция ЕстьЭлементСписка(Имя, Форма)
	
	Возврат Форма.Элементы.Найти(Имя) <> Неопределено;
	
КонецФункции

Функция ЕстьПолеДинамическогоСписка(Имя, Форма)
	
	Возврат Форма.Список.КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора.Элементы.Найти(Имя) <> Неопределено;
	
КонецФункции

#КонецОбласти