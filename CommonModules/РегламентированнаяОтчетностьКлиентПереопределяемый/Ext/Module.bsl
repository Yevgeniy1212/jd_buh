
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА РАСШИФРОВКИ
//

// Процедура выводит форму расшифровки.
// 
// Пример:
// 	Если ИДОтчета = "РегламентированныйОтчетБухОтчетность" Тогда
//		Если ИДРедакцииОтчета = "ФормаОтчета2011Кв1" Тогда
//			ОткрытьРасшифровкуБухОтчетностьФормаОтчета2011Кв1(ИДИменПоказателей, ПараметрыОтчета);
//		КонецЕсли;
// 	КонецЕсли;
//
Процедура ОткрытьРасшифровкуОтчета(ИДОтчета, ИДРедакцииОтчета, ИДИменПоказателей, ПараметрыОтчета) Экспорт
	
	Если ИДОтчета = "РегламентированныйОтчетБухОтчетность" Тогда
		
		Если ИДРедакцииОтчета = "ФормаОтчета2011Кв1" Тогда
			
			//ОткрытьРасшифровкуБухОтчетностьФормаОтчета2011Кв1(ИДИменПоказателей, ПараметрыОтчета);		
			
		КонецЕсли;
		
		
	КонецЕсли;
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ КАЛЕНДАРЯ БУХГАЛТЕРА
//

// Функция возвращает имя формы, используемой для уплаты налога.
// 
// Пример:
//  Возврат "Документ.ПлатежноеПоручение.ФормаОбъекта";
//
Функция ИмяФормыДляУплатыНалога() Экспорт
	
	Возврат "Документ.ПлатежноеПоручениеИсходящее.ФормаОбъекта";
	
КонецФункции

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ СПИСКА ЗАДАЧ БУХГАЛТЕРА
//

// Процедура открывает форму списка задач бухгалтера.
//
Процедура ОткрытьКалендарь(Владелец, Организация, СтандартнаяОбработка) Экспорт
	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
//

// Процедура выполняет назначаемую команду формы.
//
// Параметры:
//   Форма - форма, из которой вызвана команда.
//
Процедура ВыполнитьНазначаемуюКомандуНаКлиенте(Форма) Экспорт

	Организации = Форма.Организация;
	
	Если Организации.Количество() = 1 Тогда
		ОрганизацияОтчета = Организации.Получить(0).Значение;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация", ОрганизацияОтчета);
	ПараметрыФормы.Вставить("НачалоПериода", Форма.ДатаНачалаПериодаОтчета);
	ПараметрыФормы.Вставить("КонецПериода", Форма.ДатаКонцаПериодаОтчета);
	
	ОткрытьФорму("Обработка.ЭкспрессПроверкаВеденияУчета.Форма", Новый Структура("ПараметрыФормы", ПараметрыФормы));

КонецПроцедуры

Функция КопияСтруктуры(ИсходнаяСтруктура)
	
	Результат = Новый Структура;
	
	Для Каждого Элемент Из ИсходнаяСтруктура Цикл
		Результат.Вставить(Элемент.Ключ, Элемент.Значение);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура ПроверитьНастройкиЗаполненияОтчета(ПараметрыОтчета, Отказ) Экспорт
	
	ИмяОтчета   = ПараметрыОтчета.ИДОтчета;
	ИмяФормы    = ПараметрыОтчета.ИДРедакцииОтчета;
	Организация = ПараметрыОтчета.Организация;
	
	//РезультатПроверки = ЗаполнениеФормСтатистикиВызовСервера.ПроверитьНастройкиЗаполненияОтчета(ИмяОтчета, ИмяФормы, Организация);
	//	
	//Если РезультатПроверки = Неопределено Тогда
	//	// У пользователя нет прав на редактирование настроек.
	//	// Поэтому предложить ему ничего не можем.
	//	// Либо настройка формы не предусмотрена.
	//	Возврат;
	//КонецЕсли;
	
	//ФормаСтатистики 			= РезультатПроверки.ФормаСтатистики;
	//ВыполнялисьНастройкиФормы 	= РезультатПроверки.ВыполнялисьНастройкиФормы;
	//
	//Если Не ВыполнялисьНастройкиФормы Тогда
	//	
	//	Кнопки = Новый СписокЗначений();
	//	
	//	Кнопки.Добавить(КодВозвратаДиалога.Да, 		"Открыть настройки");
	//	Кнопки.Добавить(КодВозвратаДиалога.Нет, 	"Заполнить");
	//	Кнопки.Добавить(КодВозвратаДиалога.Отмена, 	"Отмена");
	//	
	//	Ответ = Вопрос("Перед заполнением этой формы рекомендуем проверить настройки заполнения
	//	|", Кнопки);
	//		
	//	Если Ответ = КодВозвратаДиалога.Да Тогда
	//		
	//		Отказ = Истина;
	//		ПараметрыФормы = Новый Структура;
	//		ПараметрыФормы.Вставить("Организация", Организация);
	//		ПараметрыФормы.Вставить("ФормаСтатистики", ФормаСтатистики);
	//		
	//		ОткрытьФорму("РегистрСведений.НастройкаЗаполненияФормСтатистики.Форма.НастройкаЗаполненияФормСтатистики", ПараметрыФормы);
	//		
	//	ИначеЕсли Ответ = КодВозвратаДиалога.Нет Тогда
	//		
	//		//ЗаполнениеФормСтатистикиВызовСервера.ЗаписатьНастройкиВыполнены(ФормаСтатистики, Организация);
	//		
	//	Иначе
	//		
	//		Отказ = Истина;
	//		
	//	КонецЕсли;
	//	
	//КонецЕсли;
	//
	
КонецПроцедуры	

Процедура ОткрытьФормуНастройкиАвтозаполнения(Параметры) Экспорт
	
	Перем ИмяОтчета, ИмяФормы, ИмяПоля, Организация;
  
  	Параметры.Свойство("ИДОтчета",             ИмяОтчета);
  	Параметры.Свойство("ИДРедакцииОтчета",     ИмяФормы);
  	Параметры.Свойство("ИДТекущегоПоказателя", ИмяПоля); // Может не передаваться или передаваться Неопределено, если пользователь хочет выполнить настройку для всей формы
	Параметры.Свойство("Организация",          Организация);
  
	//ОписаниеФормы = ЗаполнениеФормСтатистикиВызовСервера.ОписаниеФормыНастройкиПоля(ИмяОтчета, ИмяФормы, ИмяПоля, Организация);
	
	//Если ТипЗнч(ОписаниеФормы) = Тип("Строка") Тогда
	//	
	//	Предупреждение(ОписаниеФормы);
	//	
	//Иначе
	//	
	//	ОткрытьФорму(ОписаниеФормы.ИмяФормы, ОписаниеФормы.ПараметрыФормы);
	//	
	//КонецЕсли;
	
КонецПроцедуры
