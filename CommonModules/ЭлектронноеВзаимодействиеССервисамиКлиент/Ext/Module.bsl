
////////////////////////////////////////////////////////////////////////////////
// Подсистема "Электронное взаимодействие с сервисами".
// ОбщийМодуль.ЭлектронноеВзаимодействиеССервисамиКлиент.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

Функция ЗакачатьИВключитьПризнакИспользованияКлиентУправляемая(ДополнительныеПараметры, СвойстваМодуляДляТекущегоРелиза,
		ШапкаОшибки) Экспорт
	
	ПараметрыСервераИнтернета = ДополнительныеПараметры.ПараметрыСервераИнтернета;
	
	ИдентификаторСессии = "";
	РезультатПолученияКриптобиблиотеки = ПолучитьКриптобиблиотекуССервераКлиентУправляемая(ПараметрыСервераИнтернета.ДополнительныеПараметры,
		ДополнительныеПараметры.ИнформацияОПрограмме, ДополнительныеПараметры.СвойстваМодуляДляТекущегоРелиза.Версия);
		
	Если РезультатПолученияКриптобиблиотеки.Свойство("cryptoLib") И ЗначениеЗаполнено(РезультатПолученияКриптобиблиотеки.cryptoLib) Тогда
		Криптобиблиотека = Base64Значение(РезультатПолученияКриптобиблиотеки.cryptoLib);
	Иначе
		Если РезультатПолученияКриптобиблиотеки.Свойство("errMessage") И ЗначениеЗаполнено(РезультатПолученияКриптобиблиотеки.errMessage) Тогда
			ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(РезультатПолученияКриптобиблиотеки.errMessage);
			ТекстИсключения = СтрШаблон(НСтр("ru = 'При получении криптобиблиотеки возникла ошибка.
				|%1'"),РезультатПолученияКриптобиблиотеки.errMessage);
			ВызватьИсключение ТекстИсключения;
		Иначе
			ВызватьИсключение НСтр("ru = 'При получении криптобиблиотеки возникла ошибка.'");
		КонецЕсли;
	КонецЕсли;

	ОписаниеОшибки = "";
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(Криптобиблиотека); // переходим на сервер

	РезультатРегистрации = ПрименитьСвойстваМодуляДокументооборота(АдресВоВременномХранилище, СвойстваМодуляДляТекущегоРелиза, ОписаниеОшибки);

	Если НЕ РезультатРегистрации Тогда
		ТекстСообщения = ШапкаОшибки + Символы.ПС + Символы.ПС + ОписаниеОшибки;
		ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	// сообщаем
	ТекстСообщения = НСтр("ru = 'Новая версия криптографической библиотеки зарегистрирована в информационной базе.'");
	ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
	
	Возврат Истина;
КонецФункции

Функция ПолучитьКриптобиблиотекуССервераКлиентУправляемая(ДанныеПрофиля, ИнформацияОПрограмме, ВерсияКриптобиблиотекиКЗагрузке)
	
	Библиотека = ЭлектронноеВзаимодействиеССервисамиВызовСервера.ПолучитьКриптобиблиотекуССервера("1C-ESF",ДанныеПрофиля, ИнформацияОПрограмме,ВерсияКриптобиблиотекиКЗагрузке);

	Возврат Библиотека;
	
КонецФункции

Функция ПолучитьСсылкуНаСкачиваниеБиблиотекиКлиентУправляемая(ДанныеПрофиля, Идентификатор = "", Организация)
	
	ЗапросXML = ТекстЗапросаEsfLibRequestКлиентУправляемая(ДанныеПрофиля);
	
	СсылкаНаСкачивание = ЭлектронноеВзаимодействиеССервисамиВызовСервера.ПолучитьСсылкуНаСкачиваниеБиблиотекиКлиентУправляемая(ЗапросXML,
	Идентификатор, Организация);
	Возврат СсылкаНаСкачивание;
КонецФункции

Процедура ОтправитьПодтверждениеОЗавершенииСкачиванияКлиентУправляемая(Идентификатор)
	СсылкаНаСкачивание = "";
		
	ЗапросXML = ТекстЗапросаEsfDnlAckRequest(Идентификатор);
	
	ОтветXML = ВыполнитьМетодВебСервисаИТСКлиентУправляемая(ЗапросXML,  ИмяСервисаПодтвержденияЗагрузки());
КонецПроцедуры

Функция ТекстЗапросаEsfLibRequestКлиентУправляемая(ДанныеПрофиля)
	ТекстЗапроса = КриптографияВызовСервера.ПолучитьТекстЗапроса("ЗапросEsfLibRequest");
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[IDConf]", ДанныеПрофиля.ИДКонфигурации);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[VersionConf]", ДанныеПрофиля.ВерсияКонфигурации);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[Version]", ДанныеПрофиля.Версия);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[Isbase]", ?(ДанныеПрофиля.ЭтоБазовая,1,0));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[RegNumber]", ДанныеПрофиля.РегистрационныйНомер);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[OrgainzationBIN]", ДанныеПрофиля.ОрганизацияБИН);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[OrgainzationName]", ДанныеПрофиля.ОрганизацияНаименование);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[OrgainzationAddr]", ДанныеПрофиля.ОрганизацияАдрес);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[OrgainzationContacts]", ДанныеПрофиля.ОрганизацияТелефон);
	
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[UserIIN]", ДанныеПрофиля.ПользовательИИН);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[UserFisrtName]", ДанныеПрофиля.ПользовательИмя);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[UserSecondName]", ДанныеПрофиля.ПользовательОтчество);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[UserLastName]", ДанныеПрофиля.ПользовательФамилия);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[UserPosition]", ДанныеПрофиля.ПользовательДолжность);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[ExtraInfo]", ДанныеПрофиля.ДополнительныеСведения);
	
	Возврат ТекстЗапроса;
КонецФункции

Функция ВыполнитьМетодВебСервисаИТСКлиентУправляемая(Знач ТекстМетода, Знач ИмяВебСервиса)
	#Если ВебКлиент Тогда
		ТекстОтвета = ВыполнитьМетодВебСервисаИТСНаСервере(ТекстМетода, ИмяВебСервиса);
	#Иначе
		HTTPСоединение = Новый HTTPСоединение(
				АдресРесурсаИТС(),
				,
				,
				,
				#Если НЕ ВебКлиент Тогда
				ЭСФКлиентСервер.НовыйПроксиСерверИСЭСФ()
				#КонецЕсли
				,
				,
				);
			
		HTTPЗапрос = Новый HTTPЗапрос();
		HTTPЗапрос.АдресРесурса	= ИмяВебСервиса;
		
		Заголовки = Новый Соответствие();
		Заголовки.Вставить("Content-Type", "text/xml;charset=UTF-8");
		
		HTTPЗапрос.Заголовки = Заголовки;
		HTTPЗапрос.УстановитьТелоИзСтроки(ТекстМетода, "UTF-8");
		
		HTTPОтвет = HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);
		
		ТекстОтвета = СокрЛП(HTTPОтвет.ПолучитьТелоКакСтроку());
		
	#КонецЕсли
		
	Возврат ТекстОтвета;
	
КонецФункции

Функция ВыполнитьМетодВебСервисаИТСНаСервере (Знач ТекстМетода, Знач ИмяВебСервиса) Экспорт
	Возврат ЭлектронноеВзаимодействиеССервисамиВызовСервера.ВыполнитьМетодВебСервисаИТС(ТекстМетода,ИмяВебСервиса);
КонецФункции

#Область ПроверкаВерсии

// Возвращаемые значения:
// 		Ложь - обновление не требуется
// 		Истина - необходимо обновить внешний модуль
Функция ПроверитьНаличиеОбновлений(СвойстваМодуляДляТекущегоРелиза, ШапкаОшибки) Экспорт
	//логика по подписке
	//2 - отправить запрос
	ДанныеАктуальнойВерсии = ЭлектронноеВзаимодействиеССервисамиВызовСервера.ПолучитьТекущуюВерсиюКриптобиблиотеки("1C-ESF");
	//3 - разобрать ответ
	//	СвойстваМодуляДляТекущегоРелиза	Структура	Структура
	//Версия	"1.8"		Строка
	//Дата	"2017-06-01"	Строка
	//Имя	"v1_8"			Строка
	СвойстваМодуляДляТекущегоРелиза = ЭлектронноеВзаимодействиеССервисамиВызовСервера.ОпределитьПараметрыТекущейКомпоненты(ДанныеАктуальнойВерсии, ШапкаОшибки);
	Если СвойстваМодуляДляТекущегоРелиза = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Сравниваем требуемую версию модуля, с версией, загруженной в ИБ
	ВерсияМодуляВИнтернете 	= СтрЗаменить(СвойстваМодуляДляТекущегоРелиза.Версия, Символы.НПП, "");
	КонтейнерМетодов = ЭСФКлиентСервер.КонтейнерМетодов();
	ВерсияМодуляВБазе = СтрЗаменить(КонтейнерМетодов.ВерсияВнешнегоМодуляКриптографии(), Символы.НПП, "");
	
	Если ВерсияМодуляВИнтернете = ВерсияМодуляВБазе Тогда
		// обновление не требуется
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция УстановитьСоединениеССерверомИнтернета(URLСервера, ПараметрыСоединения = Неопределено, ОписаниеОшибки = Неопределено) Экспорт
	
	НастройкиПрокси = ЭСФКлиентСервер.НовыйПроксиСерверИСЭСФ();
	
	Попытка
		Соединение = Новый HTTPСоединение(URLСервера, 
					?(ЗначениеЗаполнено(ПараметрыСоединения.Порт), ПараметрыСоединения.Порт, Неопределено),
					?(ЗначениеЗаполнено(ПараметрыСоединения.Логин), ПараметрыСоединения.Логин, Неопределено),
					?(ЗначениеЗаполнено(ПараметрыСоединения.Пароль), ПараметрыСоединения.Пароль, Неопределено),
					НастройкиПрокси);
	Исключение
		ОписаниеОшибки = ИнформацияОбОшибке().Описание;
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат Соединение;
	
КонецФункции

Функция ПрименитьСвойстваМодуляДокументооборота(ВнешнийМодульАдрес = Неопределено, СвойстваМодуля = Неопределено, ОписаниеОшибки = Неопределено) Экспорт
	
	ВнешнийМодуль = ПолучитьИзВременногоХранилища(ВнешнийМодульАдрес);
	
	// определяем, какие константы будут меняться
	МодифицируемыеКонстанты = Новый Массив;
	
	// подготавливаем двоичные данные внешнего модуля
	Если ВнешнийМодуль <> Неопределено И СвойстваМодуля <> Неопределено Тогда
		
		МодифицируемыеКонстанты.Добавить("ЭСФВерсияВнешнегоМодуля");
		МодифицируемыеКонстанты.Добавить("ЭСФВнешнийМодуль");
		
		ОбъектВнешнийМодуль = ЭлектронноеВзаимодействиеССервисамиВызовСервера.СоздатьХранилищеЗначений(ВнешнийМодуль);
		ВерсияВнешнегоМодуля = СвойстваМодуля.Версия;
	КонецЕсли;
	
	СтрМодифицируемыеКонстанты = "";
	Для Счетчик = 0 По МодифицируемыеКонстанты.Количество()-1 Цикл
		Если Счетчик > 0 Тогда
			СтрМодифицируемыеКонстанты = СтрМодифицируемыеКонстанты + ", " ;
		КонецЕсли;
		СтрМодифицируемыеКонстанты = СтрМодифицируемыеКонстанты + МодифицируемыеКонстанты[Счетчик];
	КонецЦикла;
	
	// инициализируем значения констант
	Возврат ЭлектронноеВзаимодействиеССервисамиВызовСервера.КонстантыСоздатьНабор(СтрМодифицируемыеКонстанты, ВнешнийМодуль,
	ОбъектВнешнийМодуль, ВерсияВнешнегоМодуля);
	
КонецФункции

Функция ТекстЗапросаEsfDnlAckRequest(ИдентификаторСессии)Экспорт	
	ТекстЗапроса = КриптографияВызовСервера.ПолучитьТекстЗапроса("ЗапросEsfDnlAckRequest");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[ID]", ИдентификаторСессии);
	
	Возврат ТекстЗапроса;
КонецФункции

Функция ИмяСервисаПодтвержденияЗагрузки()
	Возврат "/download/esf/acknowledge";
КонецФункции	

Функция АдресРесурсаИТС()
	Возврат "its.1c.kz";
КонецФункции

#КонецОбласти
