
Функция НачислениеЗакрыто(пУИНН, Источник)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	РегУИНН.Регистратор
	               |ИЗ
	               |	РегистрНакопления.УИНН КАК РегУИНН
	               |ГДЕ
	               |	РегУИНН.УИНН = &УИНН
	               |	И РегУИНН.Регистратор.ВидОперацииМН = &ВидыОперацийМН
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	РегУИНН.Период УБЫВ";
	Запрос.УстановитьПараметр("УИНН", пУИНН);
	Запрос.УстановитьПараметр("ВидыОперацийМН", Перечисления.ВидыОперацийМН.ОсновныеПослеТО);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		пДокумент = Выборка.Регистратор;
		поДокумент = пДокумент.ПолучитьОбъект();
		Если поДокумент.НачислениеИсполнено Тогда
			Возврат Источник.Дата>поДокумент.Дата;
		КонецЕсли;	
	КонецЕсли;	
	
	Возврат Ложь
КонецФункции	

Функция НачислениеИсполнено(пУИНН, Источник)
	ЗапросРН = Новый Запрос;
	ЗапросРН.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	                 |	РНУИНН.УИНН КАК УИНН,
	                 |	РНУИНН.Регистратор КАК Регистратор
	                 |ИЗ
	                 |	РегистрНакопления.УИНН КАК РНУИНН
	                 |ГДЕ
	                 |	РНУИНН.Регистратор.ВидОперацииМН = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийМН.ОсновныеПослеТО)
	                 |	И РНУИНН.УИНН = &УИНН
	                 |
	                 |УПОРЯДОЧИТЬ ПО
	                 |	РНУИНН.Период УБЫВ";
	ЗапросРН.УстановитьПараметр("УИНН", пУИНН);
					 
	ВыборкаРН = ЗапросРН.Выполнить().Выбрать();
	Если ВыборкаРН.Следующий() Тогда
		пДокумент = ВыборкаРН.Регистратор;
		поДокумент = пДокумент.ПолучитьОбъект();
		Если поДокумент.НачислениеИсполнено Тогда
			Возврат Источник.Дата>поДокумент.Дата;
		КонецЕсли;
	КонецЕсли;
КонецФункции

Функция ПолучитьСписокУИНН(Источник, ТЗ) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СпрУИНН.Ссылка КАК УИНН,
	               |	СпрУИНН.Дата,
	               |	СпрУИНН.ПодразделениеМН,
	               |	СпрУИНН.СтатьяБюджета,
	               |	СпрУИНН.Сумма
	               |ИЗ
	               |	Справочник.УИНН КАК СпрУИНН
	               |ГДЕ
	               |	СпрУИНН.Контрагент = &Контрагент
	               |	И СпрУИНН.ДоговорКонтрагента = &Договор
	               |	И СпрУИНН.Дата >= &ДатаПервоначальногоНачисления";
	Запрос.УстановитьПараметр("Контрагент", Источник.Контрагент);
	Запрос.УстановитьПараметр("Договор", Источник.ДоговорКонтрагента);
	Запрос.УстановитьПараметр("ДатаПервоначальногоНачисления", ДобавитьМесяц(Источник.Дата, -12));
	Результат = Запрос.Выполнить();
	
	ТЗ=Новый ТаблицаЗначений;
	ТЗ = Результат.Выгрузить();
	Для Каждого Строка ИЗ ТЗ Цикл
		Если НачислениеИсполнено(Строка.УИНН,Источник)=Истина Тогда
			ТЗ.Удалить(Строка);
		КонецЕсли;	
	КонецЦикла;	
КонецФункции	

Функция ЕстьДокументЗакрытияПоУИНН(УИНН, пДокумент) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	РегУИНН.Регистратор
	               |ИЗ
	               |	РегистрНакопления.УИНН КАК РегУИНН
	               |ГДЕ
	               |	РегУИНН.УИНН = &УИНН
	               |	И РегУИНН.Регистратор.ВидОперацииМН = &ОсновныеПослеТО
	               |	И РегУИНН.Регистратор = &Регистратор";
	Запрос.УстановитьПараметр("Регистратор", пДокумент.Ссылка);
	Запрос.УстановитьПараметр("УИНН", УИНН);
	Запрос.УстановитьПараметр("ОсновныеПослеТО", Перечисления.ВидыОперацийМН.ОсновныеПослеТО);
	Выборка = Запрос.Выполнить().Выбрать();
	Возврат Выборка.Количество()>0;
КонецФункции

//Собирает КодУИНН
Функция СформироватьУИНН(пДокумент)	
	ДатаДокумента = пДокумент.Дата;	
	
	пчМесяцДаты = Число(Месяц(ДатаДокумента));	
	псМесяцДаты = ?(пчМесяцДаты>9, Строка(пчМесяцДаты),"0"+Строка(пчМесяцДаты));
	
	псГодДаты = Формат(Год(ДатаДокумента),"ЧГ=0");
	псПрефикс = Лев(пДокумент.Номер, 3);
	псДокумент = ?(ТипЗнч(пДокумент)=Тип("ДокументСсылка.ПоступлениеТоваровУслуг"), "П","Р");
	псПодразделениеКод = пДокумент.ПодразделениеМН.УсловноеОбозначение;
	псДокументНомер = Прав(пДокумент.Номер, 4); 	
	
	псУИНН = псМесяцДаты+псГодДаты+псПрефикс+псДокумент+псПодразделениеКод+псДокументНомер;	
	Возврат псУИНН;	
КонецФункции

Процедура ЗаписатьДанныеПоУИНН(УИНН, Источник, ВидНачислений) Экспорт
Если ТипЗнч(Источник) <> Тип("ДокументОбъект.ПоступлениеТоваровУслуг") ТОгда
	Источник.Движения.УИНН.Очистить();  
	
	ДвиженияУИНН = Источник.Движения.УИНН.Добавить();
	ДвиженияУИНН.Период = Источник.Дата;
	ДвиженияУИНН.Организация = Источник.Организация;
	
	Если ВидНачислений = "ОсновныеБезУИНН" Тогда
		ДвиженияУИНН.ДатаПервоначальногоНачисления = Источник.ДатаНУ;
	Иначе
		ДвиженияУИНН.УИНН = УИНН;
		ДвиженияУИНН.ДатаПервоначальногоНачисления = УИНН.Дата;
	КонецЕсли;
	
	Если ВидНачислений = "Корректировочные" Тогда
		ДвиженияУИНН.Контрагент = УИНН.Контрагент;
		ДвиженияУИНН.ДоговорКонтрагента = УИНН.ДоговорКонтрагента;
		ДвиженияУИНН.ПодразделениеМН = УИНН.ПодразделениеМН;
		ДвиженияУИНН.СтатьяБюджета = УИНН.СтатьяБюджета;
	Иначе
		ДвиженияУИНН.Контрагент = Источник.Контрагент;
		ДвиженияУИНН.ДоговорКонтрагента = Источник.ДоговорКонтрагента;
		ДвиженияУИНН.ПодразделениеМН = Источник.ПодразделениеМН;
		ДвиженияУИНН.СтатьяБюджета = Источник.СтатьяБюджета;
	КонецЕсли;
	
	Если ВидНачислений = "Оценочные" Тогда
		ДвиженияУИНН.СуммаНачисления = Источник.СуммаДокумента;
		ДвиженияУИНН.СуммаИсполнения = 0;
		ДвиженияУИНН.СуммаКорректировки = 0;
	ИначеЕсли (ВидНачислений="Основные")ИЛИ(ВидНачислений="ОсновныеБезУИНН") Тогда
		ДвиженияУИНН.СуммаНачисления = 0;
		ДвиженияУИНН.СуммаИсполнения = Источник.СуммаДокумента;
		ДвиженияУИНН.СуммаКорректировки = 0;
		ДвиженияУИНН.ДатаДокументаЗакрытия = Источник.Дата;
	Иначе
		ДвиженияУИНН.СуммаНачисления = 0;
		ДвиженияУИНН.СуммаИсполнения = 0;
		ДвиженияУИНН.СуммаКорректировки = Источник.СуммаДокумента;
	КонецЕсли;
	Источник.Движения.УИНН.Записать();
КонецЕсли;	
КонецПроцедуры

//Контроль проведения Оценочных - разрешено только в период начислений
Функция ПолучитьПериодФакта(пДата=Неопределено)
	Если пДата=Неопределено Тогда
		пДата = ТекущаяДата();
	КонецЕсли;	
	
	Запрос = Новый Запрос;	
	Запрос.Текст="ВЫБРАТЬ
	             |	Периоды.Ссылка
	             |ИЗ
	             |	Справочник.Периоды КАК Периоды
	             |ГДЕ
	             |	&Дата МЕЖДУ Периоды.ДатаНачалаПериода И Периоды.ДатаКонцаПериода
	             |	И Периоды.Родитель.Ссылка <> &ПустаяСсылка";
	//Запрос.УстановитьПараметр("Дата", ДобавитьМесяц(пДата,-1));
	  Запрос.УстановитьПараметр("Дата", пДата);
	Запрос.УстановитьПараметр("ПустаяСсылка", Справочники.Периоды.ПустаяСсылка());
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		пМесяц = Выборка.Ссылка;
		
		пСтрукПериодН =	Новый Структура;
		//Период Фактических документов
		пСтрукПериодН.Вставить("НачалоПериода",НачалоДня(НачалоМесяца(пМесяц.ДатаНачалаПериода)));
		пСтрукПериодН.Вставить("КонецПериода",КонецДня(КонецМесяца(пМесяц.ДатаКонцаПериода)));
		
		Возврат пСтрукПериодН
	//	
	//	Запрос = Новый Запрос;
	//	Запрос.Текст="ВЫБРАТЬ
	//				 |	ГрафикЗакрытияПериода.ДатаТочкиОтсечения,
	//				 |	ГрафикЗакрытияПериода.ДатаЗакрытияПериода
	//				 |ИЗ
	//				 |	РегистрСведений.ГрафикЗакрытияПериода КАК ГрафикЗакрытияПериода
	//				 |ГДЕ
	//				 |	ГрафикЗакрытияПериода.Месяц = &Месяц";
	//	Запрос.УстановитьПараметр("Месяц", пМесяц);
	//
	//	Выборка = Запрос.Выполнить().Выбрать();
	//	Если Выборка.Следующий() Тогда
	//		пСтрукПериодН =	Новый Структура;
	//		
	//		//Период Фактических документов
	//		пСтрукДанные.НачалоПериодаФ = НачалоДня(НачалоМесяца(пСтрукДанные.Месяц.ДатаНачалаПериода));
	//		пСтрукДанные.КонецПериодаФ = КонецДня(КонецМесяца(пСтрукДанные.Месяц.ДатаКонцаПериода));
	//		
	//		пСтрукПериодН.Вставить("НачалоПериода",Выборка.ДатаТочкиОтсечения);
	//		пСтрукПериодН.Вставить("КонецПериода",Выборка.ДатаЗакрытияПериода);
	//		Возврат пСтрукПериодН
	//	КонецЕсли;	
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции	

Функция ПолучитьПериодНачислений(пДата=Неопределено) Экспорт
	Если пДата=Неопределено Тогда
		пДата = ТекущаяДата();
	КонецЕсли;	
	
	Запрос = Новый Запрос;	
	Запрос.Текст="ВЫБРАТЬ
	             |	Периоды.Ссылка
	             |ИЗ
	             |	Справочник.Периоды КАК Периоды
	             |ГДЕ
	             |	&Дата МЕЖДУ Периоды.ДатаНачалаПериода И Периоды.ДатаКонцаПериода
	             |	И Периоды.Родитель.Ссылка <> &ПустаяСсылка";
	Запрос.УстановитьПараметр("Дата", ДобавитьМесяц(пДата,-1));
	Запрос.УстановитьПараметр("ПустаяСсылка", Справочники.Периоды.ПустаяСсылка());
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		пМесяц = Выборка.Ссылка;
		
		пСтрукПериодН =	Новый Структура;
				
		//Период начислений
		
		
	//	пСтрукПериодН.Вставить("НачалоПериода",НачалоДня(ДобавитьМесяц(пМесяц.ДатаНачалаПериода,-1)));
	    пСтрукПериодН.Вставить("НачалоПериода",НачалоДня(НачалоМесяца(пМесяц.ДатаНачалаПериода)));

		пСтрукПериодН.Вставить("КонецПериода",КонецДня(КонецМесяца(пСтрукПериодН.НачалоПериода)));
		
		Возврат пСтрукПериодН
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

Процедура ПриПроведенииПоступленияИРеализацииОбработкаПроведения(Источник, Отказ, РежимПроведения) Экспорт
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.СторнированиеМН") Тогда
		ЗаписатьДанныеПоУИНН(Источник.УИНН, Источник, "Корректировочные");
	Иначе
		Если Не ЗначениеЗаполнено(Источник.ВидОперацииМН) Тогда
			 ПриУдалении(Источник, Ложь);
		КонецЕсли;
		Если Источник.ВидОперацииМН = Перечисления.ВидыОперацийМН.Оценочные Тогда
			пМНОграничениеНаТекущийПериод = Константы.МНОграничениеНаТекущийПериод.Получить();
			Если пМНОграничениеНаТекущийПериод=Истина Тогда //Параметр
				//<Контроль проведения в текущем периоде
				пСтрукПериодН = ПолучитьПериодФакта();
				Если НЕ ((НачалоДня(Источник.Дата)>=пСтрукПериодН.НачалоПериода)И
				 		(НачалоДня(Источник.Дата)<=пСтрукПериодН.КонецПериода))Тогда
				 
					Сообщить("Документ не может быть проведен, т.к. дата документа не находится в текущем периоде начислений ("+Формат(пСтрукПериодН.НачалоПериода,"ДЛФ=Д")+"-"+Формат(пСтрукПериодН.КонецПериода,"ДЛФ=Д")+")");
					Отказ = Истина;
					Возврат;
				КонецЕсли;	
				//>
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Источник.УИННПервоначальногоНачисления) Тогда
	    		КодУИНН = СформироватьУИНН(Источник.Ссылка);
				Запрос = Новый Запрос;
				Запрос.Текст = "ВЫБРАТЬ
							   |	УИНН.Ссылка
							   |ИЗ
							   |	Справочник.УИНН КАК УИНН
							   |ГДЕ
							   |	УИНН.Код = &КодУИНН";
				Запрос.УстановитьПараметр("КодУИНН", КодУИНН);
				Результат = Запрос.Выполнить();
				Если Не Результат.Пустой() Тогда
					Выборка = Результат.Выбрать();
					Выборка.Следующий();
					СпрУИНН = Выборка.Ссылка.ПолучитьОбъект();
				Иначе
					СпрУИНН = Справочники.УИНН.СоздатьЭлемент();
				КонецЕсли;
			
				СпрУИНН.Код = КодУИНН;
				СпрУИНН.Дата = КонецДня(Источник.Дата);
				СпрУИНН.Контрагент = Источник.Контрагент;
				СпрУИНН.ДоговорКонтрагента = Источник.ДоговорКонтрагента;
				СпрУИНН.ПодразделениеМН = Источник.ПодразделениеМН;
				СпрУИНН.СтатьяБюджета = Источник.СтатьяБюджета;
				СпрУИНН.Сумма = Источник.СуммаДокумента;
				СпрУИНН.Записать();
				СпрУИНН.Прочитать();
				УИНН = СпрУИНН.Ссылка;
			Иначе
				УИНН = Источник.УИННПервоначальногоНачисления;
			КонецЕсли;
			
			
			//Сообщить("Создан новый УИНН...");
			ЗаписатьДанныеПоУИНН(УИНН, Источник, "Оценочные");	
			
			//Обработка сторно
			ОбработатьСторнирование(Источник,УИНН);
		ИначеЕсли Источник.ВидОперацииМН = Перечисления.ВидыОперацийМН.ОсновныеПослеТО Тогда
			//Макс
			попытка
			ТЗ = Новый ТаблицаЗначений;
			ПолучитьСписокУИНН(Источник,ТЗ);
			
			Если ТЗ.Количество()>0 Тогда
				СтрокаТЗ = ТЗ.ВыбратьСтроку("Выберите УИНН");	
			Иначе
//				Предупреждение("УИНН для занесения документа не найдено.");
				//Ответ = Вопрос("УИНН для занесения документа не найдено. Провести документ без оценочного начисления ?", РежимДиалогаВопрос.ДаНет, 0);
				//Если Ответ=КодВозвратаДиалога.Нет Тогда
				//	Отказ = Истина;
				//	Возврат;
				//КонецЕсли;
				Сообщить("УИНН для занесения документа не найдено. Документ проведен без оценочного начисления.");
 			КонецЕсли;	
			
			Если СтрокаТЗ <> Неопределено Тогда
				Если НачислениеЗакрыто(СтрокаТЗ.УИНН,Источник) Тогда
					Сообщить("Данное начисление закрыто (УИНН:"+Строка(СтрокаТЗ.УИНН)+")");
					Отказ = Истина;
					Возврат;
				КонецЕсли;	
				
				Если ЕстьДокументЗакрытияПоУИНН(СтрокаТЗ.УИНН, Источник.Ссылка) Тогда
					Сообщить("По данному УИНН есть документ закрытия!", СтатусСообщения.Важное);
					Отказ = Истина;
					Возврат;
				Иначе
					ЗаписатьДанныеПоУИНН(СтрокаТЗ.УИНН, Источник, "Основные");
				КонецЕсли;
			Иначе
				ЗаписатьДанныеПоУИНН(УИНН, Источник, "ОсновныеБезУИНН");
			КонецЕсли;
		Исключение
			КонецПопытки;
		КонецЕсли;
		
		
		ПроводкиНУ = Источник.Движения.Налоговый.Выгрузить();
		
		ДвиженияНДС = ?(ТипЗнч(Источник)=Тип("ДокументОбъект.ПоступлениеТоваровУслуг"),
						Источник.Движения.НДСКВозмещению.Выгрузить(),
						Источник.Движения.НДС.Выгрузить());
		
		Если Источник.ВидОперацииМН = Перечисления.ВидыОперацийМН.Оценочные Тогда
			ПроводкиНУ.Очистить();
			ДвиженияНДС.Очистить();									
		ИначеЕсли Источник.ВидОперацииМН = Перечисления.ВидыОперацийМН.ОсновныеПослеТО Тогда
			КоличествоПроводокНУ = ПроводкиНУ.Количество() - 1;
			Для к = 0  по КоличествоПроводокНУ Цикл
				ПроводкиНУ[к].Период = Источник.ДатаНУ;
			КонецЦикла;
			КоличествоДвиженийНДС = ДвиженияНДС.Количество() - 1;
			Для к = 0  по КоличествоДвиженийНДС Цикл
				ДвиженияНДС[к].Период = Источник.ДатаНУ;
			КонецЦикла;		
		КонецЕсли;
		
		Источник.Движения.Налоговый.Загрузить(ПроводкиНУ);
		Если ТипЗнч(Источник)=Тип("ДокументОбъект.ПоступлениеТоваровУслуг") Тогда
			Источник.Движения.НДСКВозмещению.Загрузить(ДвиженияНДС);
		Иначе
			Источник.Движения.НДС.Загрузить(ДвиженияНДС);
		КонецЕсли;
	КонецЕсли; 	
КонецПроцедуры

Процедура ПриУдалении(Источник, Отказ) Экспорт
	//Если Источник.ВидОперацииМН = Перечисления.ВидыОперацийМН.Оценочные Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
					   |	СторнированиеМН.Ссылка
					   |ИЗ
					   |	Документ.СторнированиеМН КАК СторнированиеМН
					   |ГДЕ
					   |	СторнированиеМН.ДокументОснование = &Ссылка";
		Запрос.УстановитьПараметр("Ссылка", Источник.Ссылка);
		Результат = Запрос.Выполнить();
		Если Не Результат.Пустой() Тогда
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			Сторно = Выборка.Ссылка.ПолучитьОбъект();
			Сторно.Удалить();
			//Сообщить("Сторнирование Удалено");
		КонецЕсли;
	//КонецЕсли;
КонецПроцедуры	

//При отмене проведения Документа (Удаляем Корретировку, если Оценочные)
//Процедура ПриУдаленииПроведенияОбработкаУдаленияПроведения(Источник, Отказ) Экспорт
//	ПриУдалении(Источник, Отказ);
//КонецПроцедуры

//При удалении Документа (Удаляем Корретировку, если Оценочные)
Процедура ПриУдаленииОбработкаУдаления(Источник, Отказ) Экспорт
	 ПриУдалении(Источник, Отказ)
КонецПроцедуры



//<Сторно
Функция НайтиУИННДляДокумента(поДокумент) Экспорт
	Если НЕ ЗначениеЗаполнено(поДокумент.УИННПервоначальногоНачисления) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
	        	       |	РегУИНН.УИНН
	    	           |ИЗ
		               |	РегистрНакопления.УИНН КАК РегУИНН
		               |ГДЕ
	    	           |	РегУИНН.Регистратор = &Ссылка";
		Запрос.УстановитьПараметр("Ссылка", поДокумент.Ссылка);
	
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Возврат Выборка.УИНН;
		КонецЕсли;	
	
		Возврат Неопределено;	
	Иначе
		Возврат поДокумент.УИННПервоначальногоНачисления;	
	КонецЕсли;
КонецФункции

//Сторнирование 2012 04 27 aLb
Процедура ОбработатьСторнирование(поДокумент, УИНН=Неопределено) Экспорт
	Если поДокумент.Проведен Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
					   |	СторнированиеМН.Ссылка
					   |ИЗ
					   |	Документ.СторнированиеМН КАК СторнированиеМН
					   |ГДЕ
					   |	СторнированиеМН.ДокументОснование = &Ссылка";
		Запрос.УстановитьПараметр("Ссылка", поДокумент.Ссылка);
		Результат = Запрос.Выполнить();
		Если Не Результат.Пустой() Тогда
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			Сторно = Выборка.Ссылка.ПолучитьОбъект();
		Иначе
			Сторно = Документы.СторнированиеМН.СоздатьДокумент();
		КонецЕсли;
	
		Сторно.Дата = КонецМесяца(поДокумент.Дата) + 1;
		
		//Сторно.Заполнить(поДокумент.Ссылка);
		ВыполнитьСторнированиеДвижений(Сторно, поДокумент);
		//Документы.СторнированиеМН.ВыполнитьСторнированиеДвижений(Сторно, поДокумент);
		
		Сторно.Организация = поДокумент.Организация; 
		Сторно.ДокументОснование = поДокумент.Ссылка; 
		Сторно.СуммаДокумента = поДокумент.СуммаДокумента;
		Сторно.Автор = поДокумент.Автор; 
		Сторно.Ответственный = поДокумент.Ответственный; 
		Сторно.ВидОперацииМН = Перечисления.ВидыОперацийМН.Корректировочные;
		Сторно.УИНН = ?(УИНН=Неопределено, МН.НайтиУИННДляДокумента(поДокумент), УИНН.Ссылка);
		Сторно.Проведен = Истина;
		Сторно.Записать();//РежимЗаписиДокумента.Проведение);
	Иначе
		Отказ=Ложь;
		ПриУдалении(поДокумент, Отказ)
	КонецЕсли;
КонецПроцедуры	
//>Сторно

// Процедура выполняет сторнирование движений переданного документа
//
Процедура ВыполнитьСторнированиеДвижений(Объект, Основание) Экспорт

	// скопируем все движения
	ДвиженияДокументаОснования = Основание.Метаданные().Движения;
	ДвиженияСторно = Объект.Метаданные().Движения;
	
	Для Каждого МетаданныеРегистр Из ДвиженияДокументаОснования Цикл
	
		Если Метаданные.РегистрыСведений.Содержит(МетаданныеРегистр) Тогда
			// регистры сведений не сторнируем
			Продолжить; 
		КонецЕсли;	
		
		Если Не ДвиженияСторно.Содержит(МетаданныеРегистр) Тогда
			// регистр не сторнируется
			Продолжить;
		КонецЕсли;
		
		Попытка
			НаборЗаписей = Объект.Движения[МетаданныеРегистр.Имя];
			НаборЗаписей.Записывать = Истина;
			ЗаполнитьНаборЗаписей(Объект, НаборЗаписей, МетаданныеРегистр);
			НаборЗаписей.Записывать = Истина;
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Ошибка при чтении данных регистра %1: %2'"), МетаданныеРегистр.Имя, ОписаниеОшибки()),
				Объект.Ссылка,
				,
				,
				);
		КонецПопытки;
	
	КонецЦикла;

КонецПроцедуры


// Копирует значения движения в строку сторно нового движения
// для измерений и реквизитов. Ресурсы инвертируются.
//
Процедура ЗаполнитьДвижениеСторно(Движение, Строка, МетаданныеОбъект)

	// измерения
	Для Каждого МДОбъект из МетаданныеОбъект.Измерения Цикл
		Движение[МДОбъект.Имя] = Строка[МДОбъект.Имя];
	КонецЦикла;

	// ресурсы
	Для Каждого МДОбъект из МетаданныеОбъект.Ресурсы Цикл
		Движение[МДОбъект.Имя] = - Строка[МДОбъект.Имя];
	КонецЦикла;

	// реквизиты
	Для Каждого МДОбъект из МетаданныеОбъект.Реквизиты Цикл
		Движение[МДОбъект.Имя] = Строка[МДОбъект.Имя];
	КонецЦикла;

КонецПроцедуры

// Копирует значения движения по регистру бухгалтерии в строку сторно я
// нового движени для измерений и реквизитов. Ресурсы инвертируются.
//
Процедура ЗаполнитьДвиженияСторноПоРегиструБухгалтерии(Движение, Строка, МетаданныеОбъект)

	Если МетаданныеОбъект.Корреспонденция Тогда

		Движение.СчетДт = Строка.СчетДт;
		Движение.СчетКт = Строка.СчетКт;

		ВыборкаСубконто = ПланыВидовХарактеристик[МетаданныеОбъект.ПланСчетов.ВидыСубконто.Имя].Выбрать();
		Пока ВыборкаСубконто.Следующий() Цикл

			Если ВыборкаСубконто.Предопределенный Тогда

				Если Строка.СубконтоДт[ВыборкаСубконто.Ссылка] <> Неопределено Тогда
					Движение.СубконтоДт[ВыборкаСубконто.Ссылка] = Строка.СубконтоДт[ВыборкаСубконто.Ссылка];
				КонецЕсли;
				
				Если Строка.СубконтоКт[ВыборкаСубконто.Ссылка] <> Неопределено Тогда
					Движение.СубконтоКт[ВыборкаСубконто.Ссылка] = Строка.СубконтоКт[ВыборкаСубконто.Ссылка];
				КонецЕсли;

			КонецЕсли;

		КонецЦикла;

	Иначе

		Движение.Счет   = Строка.Счет;

		ВыборкаСубконто = ПланыВидовХарактеристик[МетаданныеОбъект.ПланСчетов.ВидыСубконто.Имя].Выбрать();
		Пока ВыборкаСубконто.Следующий() Цикл
			Если ВыборкаСубконто.Предопределенный Тогда
				Если Строка.Субконто[ВыборкаСубконто.Ссылка] <> Неопределено Тогда
					Движение.Субконто[ВыборкаСубконто.Ссылка] = Строка.Субконто[ВыборкаСубконто.Ссылка];
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;

	КонецЕсли;

	// измерения
	Для Каждого МДОбъект из МетаданныеОбъект.Измерения Цикл

		Если МетаданныеОбъект.Корреспонденция Тогда
			Если МДОбъект.ПризнакУчета = Неопределено И МДОбъект.Балансовый Тогда
				Движение[МДОбъект.Имя] = Строка[МДОбъект.Имя];
			Иначе
				Движение[МДОбъект.Имя + "Дт"] = Строка[МДОбъект.Имя + "Дт"];
				Движение[МДОбъект.Имя + "Кт"] = Строка[МДОбъект.Имя + "Кт"];
			КонецЕсли;
		Иначе
		КонецЕсли;

	КонецЦикла;

	// ресурсы
	Для Каждого МДОбъект из МетаданныеОбъект.Ресурсы Цикл

		Если МДОбъект.ПризнакУчета = Неопределено И МДОбъект.Балансовый Тогда
			Движение[МДОбъект.Имя] = - Строка[МДОбъект.Имя];
		Иначе

			Если ЗначениеЗаполнено(Строка[МДОбъект.Имя + "Дт"]) Тогда
				Движение[МДОбъект.Имя + "Дт"] = - Строка[МДОбъект.Имя + "Дт"];
			КонецЕсли;

			Если ЗначениеЗаполнено(Строка[МДОбъект.Имя + "Кт"]) Тогда
				Движение[МДОбъект.Имя + "Кт"] = - Строка[МДОбъект.Имя + "Кт"];
			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

	// реквизиты
	Для Каждого МДОбъект из МетаданныеОбъект.Реквизиты Цикл

		Движение[МДОбъект.Имя] = Строка[МДОбъект.Имя];

	КонецЦикла;

КонецПроцедуры

// Заполняет набор записей по указанному регистру сторнирующими движениями.
//
Процедура ЗаполнитьНаборЗаписей(Объект, ЗаполняемыйНаборЗаписей, МетаданныеРегистр) Экспорт

	ЭтоРегистрРасчета     = Ложь;
	ЭтоРегистрБухгалтерии = Ложь;
	ЭтоРегистрНакопления  = Ложь;

	Если ОбщегоНазначения.ЭтоРегистрРасчета(МетаданныеРегистр) Тогда
		ЭтоРегистрРасчета     = Истина;
		НаборЗаписей          = РегистрыРасчета[МетаданныеРегистр.Имя].СоздатьНаборЗаписей();
		Периодичность		  = МетаданныеРегистр.Периодичность;
		ПериодРегистрации	  = Объект.Дата;
		
	ИначеЕсли ОбщегоНазначения.ЭтоРегистрБухгалтерии(МетаданныеРегистр) Тогда
		ЭтоРегистрБухгалтерии = Истина;
		НаборЗаписей          = РегистрыБухгалтерии[МетаданныеРегистр.Имя].СоздатьНаборЗаписей();
	Иначе
		ЭтоРегистрНакопления  = Истина;
		НаборЗаписей          = РегистрыНакопления[МетаданныеРегистр.Имя].СоздатьНаборЗаписей();
	КонецЕсли;
	
	ОтражениеПоПериодуРегистрации = УчетнаяПолитикаСервер.ОтражениеПоПериодуРегистрации(Объект.Организация, Объект.Дата);

	НаборЗаписей.Отбор.Регистратор.Значение = Объект.ДокументОснование;
	НаборЗаписей.Прочитать();

	Для Каждого ДвижениеСторнируемое Из НаборЗаписей Цикл

		Если ЭтоРегистрРасчета Тогда

			ДвижениеСторно = ЗаполняемыйНаборЗаписей.Добавить();

			ЗаполнитьДвижениеСторно(ДвижениеСторно, ДвижениеСторнируемое, МетаданныеРегистр);

			ДвижениеСторно.ПериодРегистрации = Объект.Дата;
			ДвижениеСторно.ВидРасчета        = ДвижениеСторнируемое.ВидРасчета;
			ДвижениеСторно.Сторно            = Истина;

			Если МетаданныеРегистр.ПериодДействия Тогда
				ДвижениеСторно.ПериодДействияНачало = ДвижениеСторнируемое.ПериодДействияНачало;
				ДвижениеСторно.ПериодДействияКонец  = ДвижениеСторнируемое.ПериодДействияКонец;
			КонецЕсли;

			Если МетаданныеРегистр.БазовыйПериод Тогда
				ДвижениеСторно.БазовыйПериодНачало = ДвижениеСторнируемое.БазовыйПериодНачало;
				ДвижениеСторно.БазовыйПериодКонец  = ДвижениеСторнируемое.БазовыйПериодКонец;
			КонецЕсли;

		ИначеЕсли ЭтоРегистрБухгалтерии Тогда

			ДвижениеСторно = ЗаполняемыйНаборЗаписей.Добавить();
			ЗаполнитьДвиженияСторноПоРегиструБухгалтерии(ДвижениеСторно, ДвижениеСторнируемое, МетаданныеРегистр);
			ДвижениеСторно.Период = Объект.Дата;
			ЗаполняемыйНаборЗаписей.Записывать = Истина;
			
		Иначе

			ДвижениеСторно = ЗаполняемыйНаборЗаписей.Добавить();

			ЗаполнитьДвижениеСторно(ДвижениеСторно, ДвижениеСторнируемое, МетаданныеРегистр);
			
			Если МетаданныеРегистр.ВидРегистра = Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Остатки Тогда
				ДвижениеСторно.ВидДвижения = ДвижениеСторнируемое.ВидДвижения
			КонецЕсли;
			
			Если МетаданныеРегистр.Имя = "ИПНСведенияОДоходах" 
					Или МетаданныеРегистр.Имя = "ОПВСведенияОДоходах"
					Или МетаданныеРегистр.Имя = "СНСведенияОДоходах"
					Или МетаданныеРегистр.Имя = "СОСведенияОДоходах" Тогда
				Если ОтражениеПоПериодуРегистрации Тогда
					ДвижениеСторно.Период = НачалоМесяца(Объект.Дата);
					ДвижениеСторно.ПериодРегистрации = НачалоМесяца(Объект.Дата);
				Иначе
					ДвижениеСторно.Период = НачалоМесяца(ДвижениеСторнируемое.Период);
					ДвижениеСторно.ПериодРегистрации = НачалоМесяца(Объект.Дата);
				КонецЕсли;
			ИначеЕсли МетаданныеРегистр.Имя = "ВыплаченныеДоходыРаботникамОрганизацийНУ" Тогда
				Если ОтражениеПоПериодуРегистрации Тогда
					ДвижениеСторно.Период = НачалоМесяца(Объект.Дата);
					ДвижениеСторно.МесяцНалоговогоПериода = НачалоМесяца(Объект.Дата);
				Иначе
					ДвижениеСторно.Период = НачалоМесяца(Объект.Дата);
					ДвижениеСторно.МесяцНалоговогоПериода = ДвижениеСторнируемое.МесяцНалоговогоПериода;
				КонецЕсли;
			ИначеЕсли МетаданныеРегистр.Имя = "СведенияСчетовФактурВыданных" ИЛИ МетаданныеРегистр.Имя = "СведенияСчетовФактурПолученных" Тогда
				ДвижениеСторно.Период = ДвижениеСторнируемое.Период;								
			ИначеЕсли МетаданныеРегистр.Имя = "РабочееВремяРаботниковОрганизаций" Тогда
				ДвижениеСторно.Период = ДвижениеСторнируемое.Период;
			Иначе
				ДвижениеСторно.Период = Объект.Дата;
			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

Процедура ПровестиДокумент(пДокумент) Экспорт
	поДокумент = пДокумент.ПолучитьОбъект();
	поДокумент.Записать(РежимЗаписиДокумента.Проведение);
	
	поДокумент.Прочитать();
	Если поДокумент.ВидОперацииМН=Перечисления.ВидыОперацийМН.Оценочные Тогда
		МН.ОбработатьСторнирование(поДокумент);
	КонецЕсли;	
КонецПроцедуры	

	
