////////////////////////////////////////////////////////////////////////////////
// ПроцедурыБухгалтерскогоУчета:
//  
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПОЛУЧЕНИЯ СЧЕТОВ УЧЕТА ПО УМОЛЧАНИЮ

// Функция возвращает счета учета номенклатуры по выбранной организации.
//
// Параметры:
//  Организация  - организация, по которой определяются счета учета
//  Склад        - место хранения, по которому определяются счета учета
//  Номенклатура - номенклатура, по которой определяются счета учета
//  Дата         - дата, на которую определяются счета учета
//  ОсобыйПорядокНалогообложения - признак того, что необходимо получить счета для особого порядка налогообложения (Патент, ЕНВД)
//
// Возвращаемое значение:
//  Структура - структура счетов учета номенклатуры
// 
Функция ПолучитьСчетаУчетаНоменклатуры(Организация, Номенклатура, Дата = Неопределено) Экспорт

	Если ТипЗнч(Номенклатура) <> Тип("СправочникСсылка.Номенклатура") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СписокНоменклатуры	= Новый Массив;
	СписокНоменклатуры.Добавить(Номенклатура);
	
	СведенияОНоменклатуре = ПолучитьСчетаУчетаСпискаНоменклатуры(
		Организация, СписокНоменклатуры, Дата).Получить(Номенклатура);
	
	Возврат СведенияОНоменклатуре;

КонецФункции

// Функция возвращает счета учета номенклатуры по выбранной организации.
//
// Параметры:
//  Организация  - организация, по которой определяются счета учета
//  Склад        - место хранения, по которому определяются счета учета
//  Номенклатура - номенклатура, по которой определяются счета учета
//  Дата         - дата, на которую определяются счета учета
//  ОсобыйПорядокНалогообложения - признак того, что необходимо получить счета для особого порядка налогообложения (Патент, ЕНВД)
//
// Возвращает соответствие:
//  Ключ     - номенклатура
//  Значение - структура счетов учета номенклатуры
//
Функция ПолучитьСчетаУчетаСпискаНоменклатуры(Организация, СписокНоменклатуры, Знач Дата = Неопределено) Экспорт

	Результат	= Новый Соответствие;
	Если СписокНоменклатуры.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	ПустойСчет = ПланыСчетов.Типовой.ПустаяСсылка();
	
	Для Каждого Номенклатура Из СписокНоменклатуры Цикл
		Если Номенклатура = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		СтруктураВозврата = Новый Структура("
							|СчетУчетаБУ, 						СчетУчетаДавСырья,         			СчетПередачиБУ,
							|СчетПередачиЗаб,					СчетУчетаНДСПоПриобретению, 		СчетУчетаНДСПоРеализации,
							|СчетУчетаНДСУплаченногоНаТаможне,	СчетУчетаАкцизаПоРеализации, 		СчетУчетаЯвляетсяЗабалансовым,
							|СчетДоходовОтРеализацииБУ,			СчетДоходовПриВозвратеБУ,			СчетСебестоимостиПриРеализацииБУ,
							|СчетУчетаНУ, 						СчетПередачиНУ,						СчетДоходовОтРеализацииНУ,	
							|СчетДоходовПриВозвратеНУ,			СчетСебестоимостиПриРеализацииНУ,
							|СубконтоДоходовБУ1, 				СубконтоДоходовБУ2, 				СубконтоДоходовБУ3,
							|СубконтоДоходовПриВозвратеБУ1, 	СубконтоДоходовПриВозвратеБУ2, 		СубконтоДоходовПриВозвратеБУ3,
							|СубконтоДоходовНУ1, 				СубконтоДоходовНУ2, 				СубконтоДоходовНУ3,	
							|СубконтоДоходовПриВозвратеНУ1, 	СубконтоДоходовПриВозвратеНУ2, 		СубконтоДоходовПриВозвратеНУ3,
							|СубконтоДоходовПриВозвратеБУ1, 	СубконтоДоходовПриВозвратеБУ2, 		СубконтоДоходовПриВозвратеБУ3,
							|СубконтоСебестоимостиБУ1, 			СубконтоСебестоимостиБУ2, 			СубконтоСебестоимостиБУ3,
							|СубконтоСебестоимостиНУ1, 			СубконтоСебестоимостиНУ2, 			СубконтоСебестоимостиНУ3,
							|СчетПоложительныхОтклоненийБУ,		СчетОтрицательныхОтклоненийБУ,
							|СубконтоПоложительныхОтклоненийБУ1,СубконтоПоложительныхОтклоненийБУ2,	СубконтоПоложительныхОтклоненийБУ3,
							|СубконтоОтрицательныхОтклоненийБУ1,СубконтоОтрицательныхОтклоненийБУ2,	СубконтоОтрицательныхОтклоненийБУ3,
							|СчетПоложительныхОтклоненийНУ,		СчетОтрицательныхОтклоненийНУ,
							|СубконтоПоложительныхОтклоненийНУ1,СубконтоПоложительныхОтклоненийНУ2,	СубконтоПоложительныхОтклоненийНУ3,
							|СубконтоОтрицательныхОтклоненийНУ1,СубконтоОтрицательныхОтклоненийНУ2,	СубконтоОтрицательныхОтклоненийНУ3");
		
		Результат.Вставить(Номенклатура, СтруктураВозврата);
	КонецЦикла;

	МассивОрганизаций = Новый Массив();
	МассивОрганизаций.Добавить(Справочники.Организации.ПустаяСсылка());
	МассивОрганизаций.Добавить(Организация);
	
	СоответствиеЭлементовИГрупп = ОбщегоНазначенияБКВызовСервера.ПолучитьСписокВышеСтоящихГруппЭлементов(СписокНоменклатуры);
	
	ТаблицаИерархии = Новый ТаблицаЗначений;
	ТаблицаИерархии.Колонки.Добавить("Элемент",		Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаИерархии.Колонки.Добавить("Родитель",	Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаИерархии.Колонки.Добавить("Уровень",		ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(10, 0));
	
	Для каждого Номенклатура Из СписокНоменклатуры Цикл
		
		НоваяСтрока = ТаблицаИерархии.Добавить();
		НоваяСтрока.Элемент		= Номенклатура;
		НоваяСтрока.Родитель	= Номенклатура;
		
		СписокГрупп = СоответствиеЭлементовИГрупп.Получить(Номенклатура);
		Если СписокГрупп = Неопределено Тогда
			НоваяСтрока.Уровень = 1;
			Продолжить;
		КонецЕсли;
		
		КоличествоВышеСтоящихГрупп = СписокГрупп.Количество();
		
		НоваяСтрока.Уровень = КоличествоВышеСтоящихГрупп + 1;
		
		Для Индекс = 1 По КоличествоВышеСтоящихГрупп Цикл
			НоваяСтрока = ТаблицаИерархии.Добавить();
			НоваяСтрока.Элемент	= Номенклатура;
			НоваяСтрока.Родитель= СписокГрупп[Индекс - 1];
			НоваяСтрока.Уровень	= КоличествоВышеСтоящихГрупп - Индекс + 1;
		КонецЦикла;
		
	КонецЦикла;
	
	НоваяСтрока = ТаблицаИерархии.Добавить();	// Корень
	
	МассивНоменклатуры = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаИерархии, "Родитель", Истина);
	
	Дата = ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДатаСеанса());
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ТаблицаИерархии",	ТаблицаИерархии);
	Запрос.УстановитьПараметр("МассивОрганизаций",	МассивОрганизаций);
	Запрос.УстановитьПараметр("МассивНоменклатуры",	ОбщегоНазначенияБКВызовСервера.УдалитьПовторяющиесяЭлементыМассива(МассивНоменклатуры));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаИерархии.Элемент КАК Элемент,
	|	ТаблицаИерархии.Родитель КАК Родитель,
	|	ТаблицаИерархии.Уровень КАК Уровень
	|ПОМЕСТИТЬ ВТТаблицаИерархии
	|ИЗ
	|	&ТаблицаИерархии КАК ТаблицаИерархии
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Родитель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ  РАЗРЕШЕННЫЕ
	|	ТаблицаИерархии.Элемент КАК Номенклатура,
	|	ТаблицаИерархии.Родитель КАК Родитель,
	|	ТаблицаИерархии.Уровень КАК Уровень,
	|	СчетаУчетаНоменклатуры.СчетУчетаБУ,
	|	СчетаУчетаНоменклатуры.СчетУчетаЗабалансовый КАК СчетУчетаДавСырья,
	|	СчетаУчетаНоменклатуры.СчетУчетаПередачиБУ КАК СчетПередачиБУ,
	|	СчетаУчетаНоменклатуры.СчетУчетаПередачиЗабалансовый КАК СчетПередачиЗаб,
	|	СчетаУчетаНоменклатуры.СчетУчетаНДСПоПриобретению,
	|	СчетаУчетаНоменклатуры.СчетУчетаНДСПоРеализации,
	|	СчетаУчетаНоменклатуры.СчетУчетаНДСУплаченногоНаТаможне,
	|	СчетаУчетаНоменклатуры.СчетУчетаАкцизаПоРеализации,
	|	СчетаУчетаНоменклатуры.СчетДоходовОтРеализацииБУ,
	|	СчетаУчетаНоменклатуры.СчетСебестоимостиПриРеализацииБУ,
	|	СчетаУчетаНоменклатуры.СчетУчетаНУ,
	|	СчетаУчетаНоменклатуры.СчетДоходовОтРеализацииНУ,
	|	СчетаУчетаНоменклатуры.СчетСебестоимостиПриРеализацииНУ,
	|	СчетаУчетаНоменклатуры.СчетУчетаПередачиНУ КАК СчетПередачиНУ,
	|	СчетаУчетаНоменклатуры.СубконтоДоходовОтРеализацииБУ1 КАК СубконтоДоходовБУ1,
	|	СчетаУчетаНоменклатуры.СубконтоДоходовОтРеализацииБУ2 КАК СубконтоДоходовБУ2,
	|	СчетаУчетаНоменклатуры.СубконтоДоходовОтРеализацииБУ3 КАК СубконтоДоходовБУ3,
	|	СчетаУчетаНоменклатуры.СубконтоДоходовОтРеализацииНУ1 КАК СубконтоДоходовНУ1,
	|	СчетаУчетаНоменклатуры.СубконтоДоходовОтРеализацииНУ2 КАК СубконтоДоходовНУ2,
	|	СчетаУчетаНоменклатуры.СубконтоДоходовОтРеализацииНУ3 КАК СубконтоДоходовНУ3,
	|	СчетаУчетаНоменклатуры.СубконтоСебестоимостиПриРеализацииБУ1 КАК СубконтоСебестоимостиБУ1,
	|	СчетаУчетаНоменклатуры.СубконтоСебестоимостиПриРеализацииБУ2 КАК СубконтоСебестоимостиБУ2,
	|	СчетаУчетаНоменклатуры.СубконтоСебестоимостиПриРеализацииБУ3 КАК СубконтоСебестоимостиБУ3,
	|	СчетаУчетаНоменклатуры.СубконтоСебестоимостиПриРеализацииНУ1 КАК СубконтоСебестоимостиНУ1,
	|	СчетаУчетаНоменклатуры.СубконтоСебестоимостиПриРеализацииНУ2 КАК СубконтоСебестоимостиНУ2,
	|	СчетаУчетаНоменклатуры.СубконтоСебестоимостиПриРеализацииНУ3 КАК СубконтоСебестоимостиНУ3,
	|	СчетаУчетаНоменклатуры.Организация,
	|	СчетаУчетаНоменклатуры.Номенклатура,
	|	СчетаУчетаНоменклатуры.Номенклатура.ЭтоГруппа,
	|	СчетаУчетаНоменклатуры.СчетДоходовПриВозвратеБУ,
	|	СчетаУчетаНоменклатуры.СчетДоходовПриВозвратеНУ,
	|	СчетаУчетаНоменклатуры.СубконтоДоходовПриВозвратеБУ1 КАК СубконтоДоходовПриВозвратеБУ1,
	|	СчетаУчетаНоменклатуры.СубконтоДоходовПриВозвратеБУ2 КАК СубконтоДоходовПриВозвратеБУ2,
	|	СчетаУчетаНоменклатуры.СубконтоДоходовПриВозвратеБУ3 КАК СубконтоДоходовПриВозвратеБУ3,
	|	СчетаУчетаНоменклатуры.СубконтоДоходовПриВозвратеНУ1 КАК СубконтоДоходовПриВозвратеНУ1,
	|	СчетаУчетаНоменклатуры.СубконтоДоходовПриВозвратеНУ2 КАК СубконтоДоходовПриВозвратеНУ2,
	|	СчетаУчетаНоменклатуры.СубконтоДоходовПриВозвратеНУ3 КАК СубконтоДоходовПриВозвратеНУ3,
	|	СчетаУчетаНоменклатуры.СчетПоложительныхОтклоненийПриПередачеСтруктурнымПодразделениямБУ КАК СчетПоложительныхОтклоненийБУ,
	|	СчетаУчетаНоменклатуры.СубконтоПоложительныхОтклоненийПриПередачеСтруктурнымПодразделениямБУ1 КАК СубконтоПоложительныхОтклоненийБУ1,
	|	СчетаУчетаНоменклатуры.СубконтоПоложительныхОтклоненийПриПередачеСтруктурнымПодразделениямБУ2 КАК СубконтоПоложительныхОтклоненийБУ2,
	|	СчетаУчетаНоменклатуры.СубконтоПоложительныхОтклоненийПриПередачеСтруктурнымПодразделениямБУ3 КАК СубконтоПоложительныхОтклоненийБУ3,
	|	СчетаУчетаНоменклатуры.СчетОтрицательныхОтклоненийПриПередачеСтруктурнымПодразделениямБУ КАК СчетОтрицательныхОтклоненийБУ,
	|	СчетаУчетаНоменклатуры.СубконтоОтрицательныхОтклоненийПриПередачеСтруктурнымПодразделениямБУ1 КАК СубконтоОтрицательныхОтклоненийБУ1,
	|	СчетаУчетаНоменклатуры.СубконтоОтрицательныхОтклоненийПриПередачеСтруктурнымПодразделениямБУ2 КАК СубконтоОтрицательныхОтклоненийБУ2,
	|	СчетаУчетаНоменклатуры.СубконтоОтрицательныхОтклоненийПриПередачеСтруктурнымПодразделениямБУ3 КАК СубконтоОтрицательныхОтклоненийБУ3,
	|	СчетаУчетаНоменклатуры.СчетПоложительныхОтклоненийПриПередачеСтруктурнымПодразделениямНУ КАК СчетПоложительныхОтклоненийНУ,
	|	СчетаУчетаНоменклатуры.СубконтоПоложительныхОтклоненийПриПередачеСтруктурнымПодразделениямНУ1 КАК СубконтоПоложительныхОтклоненийНУ1,
	|	СчетаУчетаНоменклатуры.СубконтоПоложительныхОтклоненийПриПередачеСтруктурнымПодразделениямНУ2 КАК СубконтоПоложительныхОтклоненийНУ2,
	|	СчетаУчетаНоменклатуры.СубконтоПоложительныхОтклоненийПриПередачеСтруктурнымПодразделениямНУ3 КАК СубконтоПоложительныхОтклоненийНУ3,
	|	СчетаУчетаНоменклатуры.СчетОтрицательныхОтклоненийПриПередачеСтруктурнымПодразделениямНУ КАК СчетОтрицательныхОтклоненийНУ,
	|	СчетаУчетаНоменклатуры.СубконтоОтрицательныхОтклоненийПриПередачеСтруктурнымПодразделениямНУ1 КАК СубконтоОтрицательныхОтклоненийНУ1,
	|	СчетаУчетаНоменклатуры.СубконтоОтрицательныхОтклоненийПриПередачеСтруктурнымПодразделениямНУ2 КАК СубконтоОтрицательныхОтклоненийНУ2,
	|	СчетаУчетаНоменклатуры.СубконтоОтрицательныхОтклоненийПриПередачеСтруктурнымПодразделениямНУ3 КАК СубконтоОтрицательныхОтклоненийНУ3,
	|	ЕСТЬNULL(СчетаУчетаНоменклатуры.СчетУчетаБУ.Забалансовый, ЛОЖЬ) КАК СчетУчетаЯвляетсяЗабалансовым
	|ИЗ
	|	ВТТаблицаИерархии КАК ТаблицаИерархии
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаУчетаНоменклатуры КАК СчетаУчетаНоменклатуры
	|		ПО ТаблицаИерархии.Родитель = СчетаУчетаНоменклатуры.Номенклатура
	|ГДЕ
	|	СчетаУчетаНоменклатуры.Организация В(&МассивОрганизаций)
	|	И СчетаУчетаНоменклатуры.Номенклатура В(&МассивНоменклатуры)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Уровень УБЫВ,
	|	Организация УБЫВ";
	
	ТаблицаСчетовУчета = Запрос.Выполнить().Выгрузить();
	ТаблицаСчетовУчета.Индексы.Добавить("Номенклатура");
	
	ОтборСчетовУчета = Новый Структура("Номенклатура");
	
	ПустаяНоменклатура = Справочники.Номенклатура.ПустаяСсылка();
	
	Для Каждого Номенклатура Из СписокНоменклатуры Цикл
		
		СтруктураВозврата = Результат.Получить(Номенклатура);
		
		ОтборСчетовУчета.Номенклатура = Номенклатура;
		
		НайденныеСтроки = ТаблицаСчетовУчета.НайтиСтроки(ОтборСчетовУчета);
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			ЗаполнитьЗначенияСвойств(СтруктураВозврата, НайденныеСтроки[0]);
		Иначе
			
			ОтборСчетовУчета.Номенклатура = ПустаяНоменклатура;
			
			НайденныеСтроки = ТаблицаСчетовУчета.НайтиСтроки(ОтборСчетовУчета);
			Если НайденныеСтроки.Количество() > 0 Тогда
				ЗаполнитьЗначенияСвойств(СтруктураВозврата, НайденныеСтроки[0]);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

// Заполняет аналитику счета табличной части
// значениями по умолчанию
//
Процедура ЗаполнитьАналитикуСчетаТабличнойЧасти(СтрокаТЧ, СчетаУчета, ИмяАналитикиСчетовУчета, ИмяСчетаТабличнойЧасти, ИмяАналитикиТабличнойЧасти) Экспорт
	
	ДанныеСчета = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТЧ[ИмяСчетаТабличнойЧасти]);
	ЕстьНоменклатураВСтрокеТЧ = Истина;
	
	Если ТипЗнч(СтрокаТЧ) = Тип("Структура") И НЕ СтрокаТЧ.Свойство("Номенклатура") Тогда
		ЕстьНоменклатураВСтрокеТЧ = Ложь;
	КонецЕсли;
	
	Для Индекс = 1 По 3 Цикл			
		
		Если Индекс <= ДанныеСчета.КоличествоСубконто Тогда		
			
			// Заполнить субконто по данным регистра сведений "СчетаУчетаНоменклатуры".
			СтрокаТЧ[ИмяАналитикиТабличнойЧасти + Индекс] = СчетаУчета[ИмяАналитикиСчетовУчета + Индекс];
			
			// Заполнить значения аналитики Номенклатурная группа.
			Если ДанныеСчета["ВидСубконто" + Индекс + "ТипЗначения"].СодержитТип(Тип("СправочникСсылка.НоменклатурныеГруппы")) И ЕстьНоменклатураВСтрокеТЧ Тогда				
				СтрокаТЧ[ИмяАналитикиТабличнойЧасти + Индекс] = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТЧ.Номенклатура, "НоменклатурнаяГруппа");
			КонецЕсли;
			
			// Заполнить значения аналитики Номенклатура.
			Если ДанныеСчета["ВидСубконто" + Индекс + "ТипЗначения"].СодержитТип(Тип("СправочникСсылка.Номенклатура")) И ЕстьНоменклатураВСтрокеТЧ Тогда
				СтрокаТЧ[ИмяАналитикиТабличнойЧасти + Индекс] = СтрокаТЧ.Номенклатура;
			КонецЕсли;
			
			// Если значение субконто пустое, то хотя бы установить у него корректный тип значения.
			Если НЕ ЗначениеЗаполнено(СтрокаТЧ[ИмяАналитикиТабличнойЧасти + Индекс]) Тогда
				СтрокаТЧ[ИмяАналитикиТабличнойЧасти + Индекс] = ДанныеСчета["ВидСубконто" + Индекс + "ТипЗначения"].ПривестиЗначение(СтрокаТЧ[ИмяАналитикиТабличнойЧасти + Индекс]);
			КонецЕсли;
			
		Иначе
			
			СтрокаТЧ[ИмяАналитикиТабличнойЧасти + Индекс] = Неопределено;
			
		КонецЕсли;	
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура устанавливает субконто на счете. Если такое субконто на счете
// отсутствует, то ничего не делается.
//
// Параметры:
//		Счет - Счет, к которому относится субконто
//      Субконто - набор субконто
//		Номер или имя устанавливаемого субконто
//      Значение субконто - значение устанавливаемого субконто
//
Процедура УстановитьСубконто(Счет, Субконто, ИмяСубконто, ЗначениеСубконто, Сообщать = Ложь, Заголовок = "") Экспорт

	Если НЕ ЗначениеЗаполнено(Счет) Тогда
		Возврат;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(ИмяСубконто) Тогда
		Возврат;
	КонецЕсли;
	
	СвойстваСчета = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(Счет);
	
	Если ТипЗнч(ИмяСубконто) = Тип("ПланВидовХарактеристикСсылка.ВидыСубконтоТиповые") Тогда
		
		ВидСубконто = ИмяСубконто;
		
		Если СвойстваСчета.ВидСубконто1 <> ВидСубконто
			И СвойстваСчета.ВидСубконто2 <> ВидСубконто
			И СвойстваСчета.ВидСубконто3 <> ВидСубконто Тогда
			
			Возврат;
			
		КонецЕсли;

	ИначеЕсли ТипЗнч(ИмяСубконто) = Тип("Число") Тогда

		Если ИмяСубконто > СвойстваСчета.КоличествоСубконто Тогда
			Возврат;
		КонецЕсли;

		ВидСубконто = СвойстваСчета["ВидСубконто" + ИмяСубконто];

	Иначе

		ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоТиповые[ИмяСубконто];

		Если СвойстваСчета.ВидСубконто1 <> ВидСубконто
			И СвойстваСчета.ВидСубконто2 <> ВидСубконто
			И СвойстваСчета.ВидСубконто3 <> ВидСубконто Тогда
			
			Если Сообщать тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Вида субконто <%1> для счета ""%2 (%3)"" не определено.'"),
					ВидСубконто,
					СвойстваСчета.Код,
					СвойстваСчета.Наименование
				);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;

			Возврат;
			
		КонецЕсли;

	КонецЕсли;
		
	Если ВидСубконто.ТипЗначения.СодержитТип(ТипЗнч(ЗначениеСубконто)) Тогда
		Субконто.Вставить(ВидСубконто, ЗначениеСубконто);
		
	ИначеЕсли Сообщать тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Неверное значение ""%1"" для вида субконто <%2>'"),
			ЗначениеСубконто,
			ВидСубконто
		);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;


КонецПроцедуры // УстановитьСубконто()

// Заполняет в соответствие с переданными ограничениями список счетов учета денежных средств,
// из которых будет производиться выбор пользователем в форме документа
//
// Параметры
//  МассивСчетовОтбора		 		– <Массив> – массив счетов-групп. В результат функции попадут субсчета этих счетов 
//  МассивСчетовИсключений		 		– <Массив> – массив счетов, которые будут исключены из отбора 
//  ОтборПоПризнакуВалютный	 		– <Булево> – нужен ли дополнительный отбор среди выбранных счетов по признаку "Валютный" 
//  СчетОтбораПоПризнакуВалютный 	– <ПланыСчетов.Валютный> – счет, в соответствие в признаком "Валютный" которого
//                              	будет ограничиваться список - результат функции
//
// Возвращаемое значение:
//   <СписокЗначений> – список счетов, среди которых будет производиться выбор в форме документа
//
Функция ЗаполнитьСписокВыбораСчетов(МассивСчетовОтбора, ОтборПоПризнакуВалютный = Ложь, СчетОтбораПоПризнакуВалютный = Неопределено, МассивСчетовИсключений = Неопределено, ИмяПланаСчетов = "Типовой") Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивСчетовОтбора", 	МассивСчетовОтбора);
	Запрос.УстановитьПараметр("МассивСчетовИсключений", МассивСчетовИсключений);
	
	ОтбиратьПоПризнакуВалютный = ОтборПоПризнакуВалютный 
								И ТипЗнч(СчетОтбораПоПризнакуВалютный) = Тип("ПланСчетовСсылка.Типовой") 
								И НЕ СчетОтбораПоПризнакуВалютный.Пустая();
		
	Запрос.УстановитьПараметр("ОтбиратьПоПризнакуВалютный", ОтбиратьПоПризнакуВалютный);
	   
	Если ОтбиратьПоПризнакуВалютный Тогда
		Запрос.УстановитьПараметр("Валютный", СчетОтбораПоПризнакуВалютный.Валютный);
	Иначе
		Запрос.УстановитьПараметр("Валютный", Неопределено);
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Типовой.Ссылка КАК Счет,
	|	Типовой.Код КАК Код,
	|	Типовой.Наименование КАК Наименование
	|ИЗ
	|	ПланСчетов." + ИмяПланаСчетов +" КАК Типовой
	|ГДЕ
	|	Типовой.Ссылка В ИЕРАРХИИ (&МассивСчетовОтбора)
	|	И (НЕ Типовой.ЗапретитьИспользоватьВПроводках) ";
	
	Если ИмяПланаСчетов = "Типовой" Тогда
		Запрос.Текст = Запрос.Текст + "	
	|	И (НЕ &ОтбиратьПоПризнакуВалютный
	|			ИЛИ Типовой.Валютный = &Валютный)";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "	
	|   И Типовой.Ссылка Не В (&МассивСчетовИсключений)
	|   И (НЕ(Типовой.Ссылка В (ВЫБРАТЬ РАЗЛИЧНЫЕ СчетРодитель.Родитель ИЗ ПланСчетов." +  ИмяПланаСчетов + " КАК СчетРодитель ГДЕ НЕ(СчетРодитель.Родитель = НЕОПРЕДЕЛЕНО) )))
	|
	|УПОРЯДОЧИТЬ ПО
	|	Код";
	
	СписокВыбора = Новый СписокЗначений;

	Результат = Запрос.Выполнить().Выбрать();
	Пока Результат.Следующий() Цикл
		СписокВыбора.Добавить(Результат.Счет, Результат.Код + " (" + Результат.Наименование + ")");
	КонецЦикла;
	
	Возврат СписокВыбора;

КонецФункции // ЗаполнитьСписокВыбораСчетов()

// Функция возвращает счет учета для выбранного объекта учета
// банковского счета или кассы
// Параметры
//  ОбъектУчета  – банковский счет или касса для которого
//                 определяется счет учета
//	ЗаполнятьЗначениемПоУмолчанию - в случае, если параметр истина
//                  и в регистре сведений данные дл нужного объекта отсутствуют
// 					то функция вернет значение счета учета по-умолчанию
//
Функция ПолучитьСчетУчетаДенежныхСредств(ОбъектУчета, ЗаполнятьЗначениемПоУмолчанию = Ложь) Экспорт
	
	СведенияОСчетеУчета = РегистрыСведений.СчетаУчетаДенежныхСредств.Получить(Новый Структура("ОбъектУчета", ОбъектУчета));
	Если ЗаполнятьЗначениемПоУмолчанию ИЛИ СведенияОСчетеУчета.СчетУчетаБУ = ПланыСчетов.Типовой.ПустаяСсылка() Тогда
		// получение счетов учета по умолчанию
		Если СведенияОСчетеУчета.СчетУчетаБУ.Пустая() 
			И НЕ ОбъектУчета.Пустая() Тогда
			Если ТипЗнч(ОбъектУчета) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
				// Для банка	
				СведенияОСчетеУчета.СчетУчетаБУ = ПланыСчетов.Типовой.ДенежныеСредстваНаТекущихБанковскихСчетах;
			Иначе
				СведенияОСчетеУчета.СчетУчетаБУ = ПланыСчетов.Типовой.ДенежныеСредстваВКассе;
			КонецЕсли;
			
		КонецЕсли;	
	КонецЕсли;	
	
	Если ЗаполнятьЗначениемПоУмолчанию ИЛИ СведенияОСчетеУчета.СчетУчетаНУ = ПланыСчетов.Налоговый.ПустаяСсылка() Тогда
		// получение счетов учета по умолчанию
		Если СведенияОСчетеУчета.СчетУчетаНУ.Пустая() 
			И НЕ СведенияОСчетеУчета.СчетУчетаБУ.Пустая() Тогда
		
			СведенияОСчетеУчета.СчетУчетаНУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СведенияОСчетеУчета.СчетУчетаБУ));		
			Если НЕ ЗначениеЗаполнено(СведенияОСчетеУчета.СчетУчетаНУ) Тогда
				СведенияОСчетеУчета.СчетУчетаНУ = ПланыСчетов.Налоговый.ДенежныеСредстваВКассеИНаРасчетныхСчетах;
			КонецЕсли;					
			
		КонецЕсли;	
	КонецЕсли;	 
	
	Возврат СведенияОСчетеУчета;
КонецФункции // ПолучитьСчетУчетаДенежныхСредств() 

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ РАБОТЫ СО СЧЕТАМИ И СУБКОНТО В ФОРМАХ И ЭЛЕМЕНТАХ УПРАВЛЕНИЯ

// Получает сумму списания активов для заполнения печатных форм документов
//
Функция ПолучитьСуммуСписанияАктивов(ТекДокумент) Экспорт
	
	ПроводкиДокумента = Новый ТаблицаЗначений;
	ПроводкиДокумента.Колонки.Добавить("Номенклатура");
	ПроводкиДокумента.Колонки.Добавить("Количество");
	ПроводкиДокумента.Колонки.Добавить("Сумма");
	
	ТаблицаСуммСписания = Новый ТаблицаЗначений;
	ТаблицаСуммСписания.Колонки.Добавить("Номенклатура");
	ТаблицаСуммСписания.Колонки.Добавить("Количество");
	ТаблицаСуммСписания.Колонки.Добавить("Сумма");
	
	Если ТекДокумент.Проведен Тогда
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТиповойДвиженияССубконто.СубконтоКт1 КАК СубконтоКт1,
		|	ТиповойДвиженияССубконто.СубконтоКт2 КАК СубконтоКт2,
		|	СУММА(ТиповойДвиженияССубконто.КоличествоКт) КАК КоличествоКт,
		|	СУММА(ТиповойДвиженияССубконто.Сумма) КАК Сумма
		|ИЗ
		|	РегистрБухгалтерии.Типовой.ДвиженияССубконто(&ДатаНач, &ДатаКон, Регистратор = &Регистратор, , ) КАК ТиповойДвиженияССубконто
		|
		|СГРУППИРОВАТЬ ПО
		|	ТиповойДвиженияССубконто.СубконтоКт1,
		|	ТиповойДвиженияССубконто.СубконтоКт2";
		
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("ДатаНач", ТекДокумент.Дата);
		Запрос.УстановитьПараметр("ДатаКон", ТекДокумент.Дата);
		Запрос.УстановитьПараметр("Регистратор", ТекДокумент.Ссылка);
		
		
		ПроводкиДокумента = Запрос.Выполнить().Выгрузить();
		Для Каждого ПроводкаДокумента Из ПроводкиДокумента Цикл
			
			Если ТипЗнч(ПроводкаДокумента.СубконтоКт1) = Тип("СправочникСсылка.Номенклатура") Тогда
				Строка = ТаблицаСуммСписания.Добавить();
				Строка.Номенклатура = ПроводкаДокумента.СубконтоКт1;
				Строка.Количество   = ПроводкаДокумента.КоличествоКт;
				Строка.Сумма        = ПроводкаДокумента.Сумма;
			КонецЕсли;
			
			Если ТипЗнч(ПроводкаДокумента.СубконтоКт2) = Тип("СправочникСсылка.Номенклатура") Тогда
				Строка = ТаблицаСуммСписания.Добавить();
				Строка.Номенклатура = ПроводкаДокумента.СубконтоКт2;
				Строка.Количество   = ПроводкаДокумента.КоличествоКт;
				Строка.Сумма        = ПроводкаДокумента.Сумма;
			КонецЕсли;
			
		КонецЦикла;
		
		ТаблицаСуммСписания.Свернуть("Номенклатура", "Количество, Сумма");
		
	КонецЕсли;
	
  Возврат  ТаблицаСуммСписания;
  
КонецФункции // ПолучитьСуммуСписанияАктивов()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ СО СТРУКТУРНЫМИ ПОДРАЗДЕЛЕНИЯМИ

// Процедура устанавливает в проводке подразделение на счете, если по нему ведется учет по подразделениям
//
// Параметры:
//		Проводка - <запись регистра бухгалтерии> - проводка, в которой нужно установить подразделение
//      Подразделение - <СправочникСсылка.ПодразделенияОрганизаций> - устанавливаемое подразделение
//		ДтКт - <Строка> - если "Дт", подразделение устанавливается по дебету проводки, иначе по кредиту
//
Процедура УстановитьПодразделениеПроводки(Проводка, СтруктурноеПодразделение, ДтКт = "Дт") Экспорт
	
	Проводка["СтруктурноеПодразделение" + ДтКт] = СтруктурноеПодразделение;
	
КонецПроцедуры

// Процедура устанавливает в проводке подразделения, если по счетам дебета и кредита ведется учет по подразделениям
//
// Параметры:
//		Проводка - <запись регистра бухгалтерии> - проводка, в которой нужно установить подразделения
//      ПодразделениеДт - <СправочникСсылка.ПодразделенияОрганизаций> - устанавливаемое подразделение по дебету
//      ПодразделениеКт - <СправочникСсылка.ПодразделенияОрганизаций> - устанавливаемое подразделение по кредиту
//
Процедура УстановитьПодразделенияПроводки(Проводка, СтруктурноеПодразделениеДт, СтруктурноеПодразделениеКт) Экспорт

	УстановитьПодразделениеПроводки(Проводка, СтруктурноеПодразделениеДт, "Дт");
	
	УстановитьПодразделениеПроводки(Проводка, СтруктурноеПодразделениеКт, "Кт");

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ ДОКУМЕНТАМИ

// Функция возвращает ИСТИНА, если документ считается проведенным.
//
Функция ДокументПроведен(ДокументСсылка) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ДокументСсылка) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	МетаданныеДокумент = ДокументСсылка.Метаданные();

	Если МетаданныеДокумент.Проведение = Метаданные.СвойстваОбъектов.Проведение.Запретить Тогда
	
		РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументСсылка, "ПометкаУдаления");
		Возврат НЕ РеквизитыДокумента.ПометкаУдаления;

	Иначе
	
		РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументСсылка, "Проведен");
		Возврат РеквизитыДокумента.Проведен;
	
	КонецЕсли;	

КонецФункции // ДокументПроведен()

//Процедура заполняет "СчетУчетаНУ" по соответствии с "Счетом учета БУ". При этом, если соответствие на нейдено
//то подставляется значениме по умолчанию, если оно было задано
//
Функция ЗаполнитьСчетНалоговогоУчетаПоУмолчанию(СчетУчетаБУ, Дата, ЗначениеСчетаНУПоУмолчанию = Неопределено) Экспорт
	СчетУчетаНУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СчетУчетаБУ), , , Дата);
	Если Не ЗначениеЗаполнено(СчетУчетаНУ) И  НЕ ЗначениеСчетаНУПоУмолчанию = Неопределено Тогда
		СчетУчетаНУ  = ЗначениеСчетаНУПоУмолчанию;
	КонецЕсли;  	  
	Возврат СчетУчетаНУ;
КонецФункции

// Процедура проверяет владельца субконто "Подразделение"
//
// Параметры:
//	ДокументОбъект - объект документ в форме которого произошло событие
//  ТекПользователь - текущий пользователь, настройки которого используются
//                 по умолчанию
//  СтруктураРеквизитов - структура с названиеями и значениями реквизитов, 
//                 кот.необходимо проверить
//
Процедура ПроверитьВладельцаСубконтоПодразделение(ДокументОбъект, Организация, СтруктураРеквизитов) Экспорт

	Если СтруктураРеквизитов.Свойство("НазваниеСубконтоБУ1") И СтруктураРеквизитов.Свойство("СубконтоБУ1") Тогда
		ПроверитьСубконтоПодразделение(ДокументОбъект, Организация, СтруктураРеквизитов.НазваниеСубконтоБУ1, СтруктураРеквизитов.СубконтоБУ1);
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("НазваниеСубконтоБУ2") И СтруктураРеквизитов.Свойство("СубконтоБУ2") Тогда
		ПроверитьСубконтоПодразделение(ДокументОбъект, Организация, СтруктураРеквизитов.НазваниеСубконтоБУ2, СтруктураРеквизитов.СубконтоБУ2);
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("НазваниеСубконтоБУ3") И СтруктураРеквизитов.Свойство("СубконтоБУ3") Тогда
		ПроверитьСубконтоПодразделение(ДокументОбъект, Организация, СтруктураРеквизитов.НазваниеСубконтоБУ3, СтруктураРеквизитов.СубконтоБУ3);
	КонецЕсли;
	 	 
КонецПроцедуры  // ПроверитьВладельцаСубконтоПодразделение()

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Процедура проверяет принадлежность реквизита типа ПодразделениеОрганизации
// выбранной организации.
//
// Параметры:
//  ДокументОбъект - объект документ, в форме которого произошло событие
//  ТекПользователь - текущий пользователь, настройки которого используются
//                 по умолчанию
//  НазваниеРеквизитаСубконто - название проверяемого реквизита
//  Субконто     - значение проверяемого реквизита
//
Процедура ПроверитьСубконтоПодразделение(ДокументОбъект, Организация, НазваниеРеквизитаСубконто, Субконто)
	
	Если ТипЗнч(Субконто) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
		
		ПодразделениеПоУмолчанию = ПользователиБКВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию(Пользователи.ТекущийПользователь(), "ОсновноеПодразделениеОрганизации");
		
		ПодразделениеПоУмолчаниюВладелец = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПодразделениеПоУмолчанию, "Владелец"); 
		
		// Если субконто не заполнено.
		Если НЕ ЗначениеЗаполнено(Субконто) Тогда
			
			// Если субконто сооответствует выбранной организации, подставляем его.
			Если ПодразделениеПоУмолчаниюВладелец = Организация Тогда
				ДокументОбъект[НазваниеРеквизитаСубконто] = ПодразделениеПоУмолчанию;
			КонецЕсли;
			
		Иначе // Если ПодразделениеОрганизации заполнено.
			СубконтоВладелец = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Субконто, "Владелец");
			
			// Если ПодразделениеОрганизации не соответствует выбранной организации.
			Если НЕ СубконтоВладелец = Организация Тогда
				
				// Если ПодразделениеПоУмолчанию сооответствует выбранной организации, подставляем его.
				Если ПодразделениеПоУмолчаниюВладелец = Организация Тогда
					ДокументОбъект[НазваниеРеквизитаСубконто] = ПодразделениеПоУмолчанию;
				Иначе // Выбрана не основная организация. ПодразделениеОрганизации нужно очистить.
					ДокументОбъект[НазваниеРеквизитаСубконто] = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
					ОбщегоНазначения.СообщитьПользователю(НСтр("ru='Значение в поле ""Подразделение"" не соответствует выбранной организации и было очищено.'"));
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьСубконтоПодразделение()

// Функция возвращает признак необходимости контроля отрицальных остатков товаров при списании.
//
Функция ОтключитьКонтрольОтрицательныхОстатков() Экспорт
	
	Возврат Константы.ОтключитьКонтрольОтрицательныхОстатков.Получить();
	
КонецФункции // ОтключитьКонтрольОтрицательныхОстатков()

Функция ПолучитьМассивСчетовССубсчетами(МассивСчетов, ОтборПоПризнакуСчетГруппа = Ложь, ОтборПоПризнакуВалютный = Неопределено, ОтборПоПризнакуЗабалансовый = Неопределено, СчетаИсключения = Неопределено)	Экспорт

	Если ОтборПоПризнакуСчетГруппа = Неопределено Тогда
		УсловиеПоСчтеамГруппам = "";
	Иначе
		УсловиеПоСчтеамГруппам = ?(ОтборПоПризнакуСчетГруппа, "И Типовой.ЗапретитьИспользоватьВПроводках", "И (НЕ Типовой.ЗапретитьИспользоватьВПроводках)");
	КонецЕсли; 
	
	Если ОтборПоПризнакуЗабалансовый = Неопределено Тогда
		УсловиеПоЗабалансовым = "";
	Иначе
		УсловиеПоЗабалансовым = ?(ОтборПоПризнакуЗабалансовый, "И Типовой.Забалансовый", "И (НЕ Типовой.Забалансовый)");
	КонецЕсли; 
	
	Если ОтборПоПризнакуВалютный = Неопределено Тогда
		УсловиеПоВалютным = "";
	Иначе
		УсловиеПоВалютным = ?(ОтборПоПризнакуВалютный, "И Типовой.Валютный", "И (НЕ Типовой.Валютный)");
	КонецЕсли; 
	
	Если СчетаИсключения = Неопределено ИЛИ СчетаИсключения.Количество() = 0 Тогда
		УсловиеПоИсключениям = "";
	Иначе
		УсловиеПоИсключениям = "И (НЕ Типовой.Ссылка В (&СчетаИсключения))";
	КонецЕсли; 
	
	Если МассивСчетов.Количество() = 0 Тогда
		УсловиеПоОтбору = "1 = 1";
	Иначе
		УсловиеПоОтбору = "Типовой.Ссылка В ИЕРАРХИИ(&МассивСчетов)";
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивСчетов",    МассивСчетов);
	Запрос.УстановитьПараметр("СчетаИсключения", СчетаИсключения);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Типовой.Ссылка
	|ИЗ
	|	ПланСчетов.Типовой КАК Типовой
	|ГДЕ
	|	" + УсловиеПоОтбору + "
	|	" + УсловиеПоСчтеамГруппам + "
	|	" + УсловиеПоВалютным + "
	|	" + УсловиеПоЗабалансовым + "
	|	" + УсловиеПоИсключениям + "
	|УПОРЯДОЧИТЬ ПО
	|	Типовой.Код
	|";
	
	МассивСчетовССубсчетами = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	Возврат МассивСчетовССубсчетами;

КонецФункции

// Функция возвращает массив счетов, которые необходимо регламентно переоценивать.
// 
// Параметры:
//	РегламентнаяОперация - Булево - признак переоценки счетов в рамках регламентной операции
//
Функция СчетаПодлежащиеПереоценке(РегламентнаяОперация = Ложь) Экспорт
	
	// Валютные счета, подлежащие переоценке
	// Все балансовые валютные счета
	// Счета, переоцениваемые в особом порядке, исключаются
	Запрос = Новый Запрос;
	Запрос.Текст =  "ВЫБРАТЬ
	                |	Типовой.Ссылка КАК Счет
					|ИЗ
	                |	ПланСчетов.Типовой КАК Типовой
	                |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаСОсобымПорядкомПереоценкиБУ КАК СчетаСОсобымПорядкомПереоценкиБУ
	                |		ПО (СчетаСОсобымПорядкомПереоценкиБУ.Счет = Типовой.Ссылка)
	                |ГДЕ
	                |	Типовой.Валютный = ИСТИНА
	                |	И (СчетаСОсобымПорядкомПереоценкиБУ.Счет ЕСТЬ NULL 
	                |			ИЛИ СчетаСОсобымПорядкомПереоценкиБУ.СпособПризнанияКурсовойРазницы В (&СпособПризнанияКурсовойРазницы))";

					
	СпособПризнанияКурсовойРазницы = Новый Массив;						
	Если РегламентнаяОперация Тогда
		СпособПризнанияКурсовойРазницы.Добавить(Перечисления.СпособыПризнанияКурсовойРазницы.Регламентно);		 
		СпособПризнанияКурсовойРазницы.Добавить(Перечисления.СпособыПризнанияКурсовойРазницы.ПоОперациямПриПогашении);		 
	Иначе
		СпособПризнанияКурсовойРазницы.Добавить(Перечисления.СпособыПризнанияКурсовойРазницы.ПоОперациям);
		СпособПризнанияКурсовойРазницы.Добавить(Перечисления.СпособыПризнанияКурсовойРазницы.ПоОперациямПриПогашении);	
	КонецЕсли;
	
	Запрос.УстановитьПараметр("СпособПризнанияКурсовойРазницы", СпособПризнанияКурсовойРазницы);
		
	ТаблицаСчетаСОсобымПорядкомПереоценкиБУ = Запрос.Выполнить().Выгрузить();
	
	
	Возврат ТаблицаСчетаСОсобымПорядкомПереоценкиБУ.ВыгрузитьКолонку("Счет");
КонецФункции

// Функция возвращает массив счетов, которые необходимо регламентно переоценивать.
// 
// Параметры:
//	РегламентнаяОперация - Булево - признак переоценки счетов в рамках регламентной операции
//
Функция СчетаПодлежащиеПереоценкеПриПогашении() Экспорт
	
	Запрос = Новый Запрос;
 
	Запрос.Текст =  "ВЫБРАТЬ
	                |	Типовой.Ссылка КАК Счет
	                |ИЗ
	                |	ПланСчетов.Типовой КАК Типовой
	                |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаСОсобымПорядкомПереоценкиБУ КАК СчетаСОсобымПорядкомПереоценкиБУ
	                |		ПО (СчетаСОсобымПорядкомПереоценкиБУ.Счет = Типовой.Ссылка)
	                |ГДЕ
	                |	Типовой.Валютный = ИСТИНА
	                |	И СчетаСОсобымПорядкомПереоценкиБУ.СпособПризнанияКурсовойРазницы = ЗНАЧЕНИЕ(Перечисление.СпособыПризнанияКурсовойРазницы.ПоОперациямПриПогашении)";

	                 	
	ТаблицаСчетаПодлежащихПереоценкеПриПогашении = Запрос.Выполнить().Выгрузить();
	
		Возврат ТаблицаСчетаПодлежащихПереоценкеПриПогашении.ВыгрузитьКолонку("Счет");
КонецФункции

// Задает набор возможных условий для отбора по списку счетов.
//
Функция НовыеУсловияОтбораСубсчетов() Экспорт
	
	УсловияОтбора = Новый Структура;
	
	// флаги
	УсловияОтбора.Вставить("ИспользоватьВПроводках"); // отбор по ЗапретитьИспользоватьВПроводках
	УсловияОтбора.Вставить("Валютный");
	УсловияОтбора.Вставить("Забалансовый");
	
	// список исключаемых счетов
	УсловияОтбора.Вставить("СчетаИсключения");
	
	Возврат УсловияОтбора;
	
КонецФункции

// Дополняет переданные счета их субсчетами. Для всех счетов проверяется соответствие заданным условиям.
//
// Параметры:
//  МассивСчетов - Массив - список счетов, которые нужно дополнить субсчетами.
//  УсловияОтбора- Структура - см. НовыеУсловияОтбораСубсчетов().
//
// Возвращаемое значение:
//   Массив      - список исходных счетов плюс их субсчета.
//
Функция СформироватьМассивСубсчетовПоОтбору(МассивСчетов, УсловияОтбора = Неопределено, ИмяПланаСчетов =  "Типовой") Экспорт

	Если УсловияОтбора = Неопределено Тогда
		УсловияОтбора = НовыеУсловияОтбораСубсчетов();
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяПланаСчетов) Тогда
		Возврат Новый Массив;
	КонецЕсли;
		
	УсловиеПоСчетам = ?(ЗначениеЗаполнено(МассивСчетов), "Типовой.Ссылка В ИЕРАРХИИ(&МассивСчетов)", "ИСТИНА");
	
	УсловиеПоИсключениям = ?(ЗначениеЗаполнено(УсловияОтбора.СчетаИсключения), "И НЕ Типовой.Ссылка В (&СчетаИсключения)", "");
	
	Если УсловияОтбора.ИспользоватьВПроводках = Неопределено Тогда
		УсловиеПоСчетамГруппам = "";
	Иначе
		УсловиеПоСчетамГруппам = "И " + ?(УсловияОтбора.ИспользоватьВПроводках, "НЕ ", "") + "Типовой.ЗапретитьИспользоватьВПроводках
		|   И (НЕ(Типовой.Ссылка В (ВЫБРАТЬ РАЗЛИЧНЫЕ СчетРодитель.Родитель ИЗ ПланСчетов." +  ИмяПланаСчетов + " КАК СчетРодитель ГДЕ НЕ(СчетРодитель.Родитель = НЕОПРЕДЕЛЕНО) )))";
	КонецЕсли;
	
	Если УсловияОтбора.Валютный = Неопределено Тогда
		УсловиеПоВалютным = "";
	Иначе
		УсловиеПоВалютным = "И " + ?(УсловияОтбора.Валютный, "", "НЕ ") + "Типовой.Валютный";
	КонецЕсли; 
	
	Если УсловияОтбора.Забалансовый = Неопределено Тогда
		УсловиеПоЗабалансовым = "";
	Иначе
		УсловиеПоЗабалансовым = "И " + ?(УсловияОтбора.Забалансовый, "", "НЕ ") + "Типовой.Забалансовый";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивСчетов",    МассивСчетов);
	Запрос.УстановитьПараметр("СчетаИсключения", УсловияОтбора.СчетаИсключения);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Типовой.Ссылка
	|ИЗ
	|	ПланСчетов." + ИмяПланаСчетов + " КАК Типовой
	|ГДЕ
	|	" + УсловиеПоСчетам + "
	|	" + УсловиеПоИсключениям + "
	|	" + УсловиеПоСчетамГруппам + "
	|	" + УсловиеПоВалютным + "
	|	" + УсловиеПоЗабалансовым + "
	|УПОРЯДОЧИТЬ ПО
	|	Типовой.Код
	|";
	
	МассивСчетовССубсчетами = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Возврат МассивСчетовССубсчетами;

КонецФункции

// Дополняет переданные счета их субсчетами. После первого вызова запоминает субсчета
// и при последующих вызовах не обращается к СУБД.
//
// Параметры:
//  МассивСчетов - Массив - список счетов, которые нужно дополнить субсчетами.
//
// Возвращаемое значение:
//   Массив      - список исходных счетов плюс их субсчета.
//
Функция СформироватьМассивСубсчетов(МассивСчетов) Экспорт

	МассивСубсчетов = Новый Массив;
	Для каждого СчетВерхнегоУровня Из МассивСчетов Цикл
	
		Субсчета = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.СчетаВИерархии(СчетВерхнегоУровня);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСубсчетов, Субсчета);
	
	КонецЦикла; 
	
	Возврат МассивСубсчетов;

КонецФункции // СформироватьМассивСубсчетов()

Функция МаксимальноеКоличествоСубконто() Экспорт

	Возврат Метаданные.ПланыСчетов.Типовой.МаксКоличествоСубконто;

КонецФункции

// Установка типов значений субконто, связанных с именами реквизитов
//
// Параметры:
//  СвязанныеСубконто  - Соответствие - ключ - имя реквизита, значение - описание типов связанных значений субконто
//
Процедура УстановитьТипыСвязанныхСубконто(СвязанныеСубконто) Экспорт
	
	ТипыСубконто = ПроцедурыБухгалтерскогоУчетаКлиентСерверПереопределяемый.ПолучитьОписаниеТиповДоговора();
	ТипыСубконто = Новый ОписаниеТипов(ТипыСубконто, Документы.ТипВсеСсылки().Типы());
	СвязанныеСубконто.Вставить("Контрагент", ТипыСубконто);
	
	ТипыСубконто = Документы.ТипВсеСсылки();
	СвязанныеСубконто.Вставить("ДоговорКонтрагента", ТипыСубконто);
	
КонецПроцедуры

//Функция возвращает типы значений, для которых имеет смысл отбор по организации
//
Функция ТипыСвязанныеСОрганизацией() Экспорт
	
	Возврат Новый ОписаниеТипов(Документы.ТипВсеСсылки(), 
		"СправочникСсылка.БанковскиеСчета,СправочникСсылка.ПодразделенияОрганизаций,
		|СправочникСсылка.ДоговорыКонтрагентов, СправочникСсылка.Кассы");
		
КонецФункции // ТипыСвязанныеСОрганизацией()
