////////////////////////////////////////////////////////////////////////////////
// УчетОС: 
//  
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// ПОСТУПЛЕНИЕ ДОП. РАСХОДОВ

Процедура СформироватьДвиженияПоступлениеДопРасходов(ТаблицаОС, ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Параметры = ПодготовитьПараметрыПоступлениеДопРасходов(ТаблицаОС, ТаблицаРеквизиты);
	
	Если Параметры.ТаблицаОС.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = Параметры.Реквизиты[0];
	
	Для Каждого СтрокаТаблицы Из Параметры.ТаблицаОС Цикл
		
		Если СтрокаТаблицы.Сумма = 0 Тогда 
			Продолжить;
		КонецЕсли;
		
		Проводка = Движения.Типовой.Добавить();
		
		Проводка.Период       = Реквизиты.Период;
		Проводка.Организация  = Реквизиты.Организация;
		Проводка.Содержание   = СтрокаТаблицы.Содержание;
		Проводка.Сумма        = СтрокаТаблицы.Сумма;
		
		Проводка.СчетДт       = СтрокаТаблицы.СчетУчетаБУ;
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", СтрокаТаблицы.ОсновноеСредство);
		
		Если СтрокаТаблицы.ВедетсяАналитическийУчетОСПоПодразделениям Тогда
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Подразделения", СтрокаТаблицы.ПодразделениеОрганизации);
		КонецЕсли;
		
		Если СтрокаТаблицы.ВедетсяАналитическийУчетОСПоМОЛ Тогда
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "РаботникиОрганизаций", СтрокаТаблицы.МОЛОрганизации);
		КонецЕсли;
		
		Если Реквизиты.ВидОперации = Перечисления.ВидыОперацийПоступлениеДопРасходов.УслугаСтороннейОрганизации 
			ИЛИ Реквизиты.ВидОперации = Перечисления.ВидыОперацийПоступлениеДопРасходов.ПоступлениеОтНерезидента Тогда 
			Проводка.СчетКт = Реквизиты.СчетУчетаРасчетовСКонтрагентом;
			
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,"Контрагенты",        Реквизиты.Контрагент, Истина);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,"Договоры",           Реквизиты.ДоговорКонтрагента);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,"ДокументыРасчетовСКонтрагентами", Реквизиты.Регистратор);
		ИначеЕсли Реквизиты.ВидОперации = Перечисления.ВидыОперацийПоступлениеДопРасходов.ВнутреннийРасход Тогда 
			Проводка.СчетКт = Реквизиты.СчетЗатратБУ;
			
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, Реквизиты.СубконтоЗатратБУ1);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, Реквизиты.СубконтоЗатратБУ2);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, Реквизиты.СубконтоЗатратБУ3);
		КонецЕсли;
		
		ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
			Проводка, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);
				
		Если ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт).Валютный Тогда
			Проводка.ВалютаКт = Реквизиты.ВалютаВзаиморасчетов;
			Проводка.ВалютнаяСуммаКт = СтрокаТаблицы.СуммаВзаиморасчетов;
		КонецЕсли;
		
		// проводки по налоговому учету
		Если Реквизиты.НеобходимостьОтраженияВНУ Тогда
			
			Проводка = Движения.Налоговый.Добавить();
			
			Проводка.Период      = Реквизиты.Период;
			Проводка.Организация = Реквизиты.Организация;
			
			Проводка.СчетДт      = СтрокаТаблицы.СчетУчетаНУ;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ВнеоборотныеАктивы",	     СтрокаТаблицы.ОсновноеСредство);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ВидыДвиженияСтоимостиФА", Перечисления.ВидыДвиженияСтоимостиФА.Поступление);
			
			Если Реквизиты.ВидОперации = Перечисления.ВидыОперацийПоступлениеДопРасходов.УслугаСтороннейОрганизации 
				ИЛИ Реквизиты.ВидОперации = Перечисления.ВидыОперацийПоступлениеДопРасходов.ПоступлениеОтНерезидента Тогда 
				Проводка.СчетКт = ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьСчетРасчетовСКонтрагентомНУ(Реквизиты.СчетУчетаРасчетовСКонтрагентом);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,"Контрагенты",        Реквизиты.Контрагент);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,"Договоры",           Реквизиты.ДоговорКонтрагента);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,"ДокументыРасчетовСКонтрагентами", Реквизиты.Регистратор);
			ИначеЕсли Реквизиты.ВидОперации = Перечисления.ВидыОперацийПоступлениеДопРасходов.ВнутреннийРасход Тогда 
				Проводка.СчетКт = Реквизиты.СчетЗатратНУ;
				
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, Реквизиты.СубконтоЗатратНУ1);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, Реквизиты.СубконтоЗатратНУ2);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, Реквизиты.СубконтоЗатратНУ3);
			КонецЕсли;
			
			ПроцедурыНалоговогоУчета.ВидУчетаНУ(Проводка, Реквизиты.ВидУчетаНУ);
			
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				Проводка, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);
			
			Проводка.Сумма        = СтрокаТаблицы.Сумма;
			Проводка.Содержание   = СтрокаТаблицы.Содержание;
		КонецЕсли;	
	КонецЦикла;
	
	Движения.Типовой.Записывать = Истина;
	Если Реквизиты.НеобходимостьОтраженияВНУ Тогда 
		Движения.Налоговый.Записывать = Истина;
	КонецЕсли;
	
КонецПроцедуры

Функция ПодготовитьПараметрыПоступлениеДопРасходов(ТаблицаОС, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаОС

	СписокОбязательныхКолонок = ""
	+ "НомерСтроки,"       				// <Число> - номер строки в списке
	+ "ОсновноеСредство,"   			// <СправочникСсылка.ОсновныеСредства> - оприходуемый ОС
	+ "Сумма,"             				// <Число,15,2> - сумма в тенге
	+ "СуммаВзаиморасчетов,"            // <Число,15,2> - сумма в валюте взаиморасчетов
	+ "СчетУчетаБУ,"         			// <ПланСчетовСсылка.Типовой> - счет учета, на который приходуется товар
	+ "СчетУчетаНУ,"        			// <ПланСчетовСсылка.Налоговый> - счет учета, на который приходуется товар
	+ "Содержание,"        				// <Строка,150> - содержание проводки
	+ "ПодразделениеОрганизации,"       // <СправочникСсылка.ПодразделенияОрганизаций> - подразделение, на котором учитывается ОС
	+ "МОЛОрганизации,"        			// <СправочникСсылка.ФизическиеЛица> - МОЛ, за которым числится ОС
	+ "ВедетсяАналитическийУчетОСПоПодразделениям,"// <Булево> - признак ведения аналитического учета ОС в разрезе подразделений
	+ "ВедетсяАналитическийУчетОСПоМОЛ";// <Булево> - признак ведения аналитического учета ОС в разрезе МОЛ

	Параметры.Вставить("ТаблицаОС",
		ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаОС, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Регистратор,"                  	 // <ДокументСсылка.*> - документ-регистратор движений
	+ "Период,"                       	 // <Дата> - период движений - дата документа
	+ "ВидОперации,"					 // <ПеречислениеСсылка.ВидыОперацийПоступлениеДопРасходов> - вид операции поступления доп. расходов
	+ "Организация,"                  	 // <СправочникСсылка.Организация> - организация, в которую приходуется товар
	+ "Контрагент,"                  	 // <СправочникСсылка.Контрагенты> - контрагент - поставщик
	+ "ДоговорКонтрагента,"              // <СправочникСсылка.Организация> - договор контрагента, в рамках которого выполняется поставка
	+ "НеобходимостьОтраженияВНУ,"  	 // <Булево> - определяет необходимость отражения в НУ
	+ "ВалютаВзаиморасчетов,"  			 // <СправочникСсылка.Валюты> - валюта документа
	+ "ВидУчетаНУ,"  					 // <СправочникСсылка.ВидыУчетаНУ> - вид учета, указанный в документе
	+ "СтруктурноеПодразделение,"  		 // <СправочникСсылка.ПодразделенияОрганизаций> - структурное подразделение организации
	+ "СчетУчетаРасчетовСКонтрагентом,"  // <ПланСчетовСсылка.Типовой> - счет на котором ведутся расчеты с контрагентом по задолженности
	+ "СчетУчетаРасчетовПоАвансам,"	 	 // <ПланСчетовСсылка.Типовой> - счет на котором ведутся расчеты с контрагентом по авансам
	+ "СчетЗатратБУ,"					 // <ПланСчетовСсылка.Типовой> - счет затрат для отражения операции внутреннего расхода
	+ "СубконтоЗатратБУ1,"				 // - значение субконто счета затрат
	+ "СубконтоЗатратБУ2,"				 // - значение субконто счета затрат
	+ "СубконтоЗатратБУ3,"				 // - значение субконто счета затрат
	+ "СчетЗатратНУ,"					 // <ПланСчетовСсылка.Налоговый> - счет затрат для отражения операции внутреннего расхода
	+ "СубконтоЗатратНУ1,"				 // - значение субконто счета затрат
	+ "СубконтоЗатратНУ2,"				 // - значение субконто счета затрат
	+ "СубконтоЗатратНУ3";				 // - значение субконто счета затрат
	
	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

// ГТД ПО ИМПОРТУ

Процедура СформироватьДвиженияГТДИмпорт(ТаблицаОС, ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Параметры = ПодготовитьПараметрыГТДИмпорт(ТаблицаОС, ТаблицаРеквизиты);
	
	Если Параметры.ТаблицаОС.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = Параметры.Реквизиты[0];
	
	Для Каждого СтрокаТаблицы Из Параметры.ТаблицаОС Цикл
		
		Если СтрокаТаблицы.Сумма = 0 И СтрокаТаблицы.СуммаВзаиморасчетов = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Проводка = Движения.Типовой.Добавить();
		
		Проводка.Период       = Реквизиты.Период;
		Проводка.Организация  = Реквизиты.Организация;
		Проводка.Содержание   = СтрокаТаблицы.Содержание;
		Проводка.Сумма        = СтрокаТаблицы.Сумма;
		
		Проводка.СчетДт       = СтрокаТаблицы.СчетУчетаБУ;
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", СтрокаТаблицы.ОсновноеСредство);
		
		Если СтрокаТаблицы.ВедетсяАналитическийУчетОСПоПодразделениям Тогда
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Подразделения", СтрокаТаблицы.ПодразделениеОрганизации);
		КонецЕсли;
		
		Если СтрокаТаблицы.ВедетсяАналитическийУчетОСПоМОЛ Тогда
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "РаботникиОрганизаций", СтрокаТаблицы.МОЛОрганизации);
		КонецЕсли;
		
		ПроцедурыБухгалтерскогоУчета.УстановитьПодразделениеПроводки(
			Проводка, Реквизиты.СтруктурноеПодразделение, "Дт");
		
		Если Реквизиты.ВалютаДокумента <> СтрокаТаблицы.ВалютаВзаиморасчетов И Реквизиты.ВариантОтражения = 0 Тогда 
			Проводка.СчетКт = Реквизиты.СчетУчетаРасчетовСКонтрагентомВал;
		Иначе 
			Проводка.СчетКт = Реквизиты.СчетУчетаРасчетовСКонтрагентом;
		КонецЕсли;
		
		Если Реквизиты.ВариантОтражения = 0 Тогда
			
			Если Реквизиты.ВалютаДокумента <> СтрокаТаблицы.ВалютаВзаиморасчетов Тогда 
				Проводка.СчетКт = Реквизиты.СчетУчетаРасчетовСКонтрагентомВал;
			Иначе 
				Проводка.СчетКт = Реквизиты.СчетУчетаРасчетовСКонтрагентом;
			КонецЕсли;

			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,"Контрагенты",        Реквизиты.Контрагент);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,"Договоры",           СтрокаТаблицы.ДоговорКонтрагента);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,"ДокументыРасчетовСКонтрагентами", Реквизиты.Регистратор);
		Иначе
			Если СтрокаТаблицы.Содержание = НСтр("ru = 'НДС по импорту'", ОбщегоНазначения.КодОсновногоЯзыка()) Тогда
				Проводка.СчетКт = Реквизиты.СчетУчетаНДСПоРеализации;
			Иначе
				Проводка.СчетКт = Реквизиты.СчетУчетаРасчетовСКонтрагентом;
			КонецЕсли;
			
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,"НалогиСборыОтчисления",        СтрокаТаблицы.ВидНалога);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,"ВидыПлатежейВБюджетИФонды",           ПредопределенноеЗначение("Перечисление.ВидыПлатежейВБюджетИФонды.Налог"));
			
		КонецЕсли;
		
		ПроцедурыБухгалтерскогоУчета.УстановитьПодразделениеПроводки(
		Проводка, Реквизиты.СтруктурноеПодразделение, "Кт");
		
		Если ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт).Валютный Тогда
			Проводка.ВалютаКт = СтрокаТаблицы.ВалютаВзаиморасчетов;
			Проводка.ВалютнаяСуммаКт = СтрокаТаблицы.СуммаВзаиморасчетов;
		КонецЕсли;
		
		// проводки по налоговому учету
		Если Реквизиты.НеобходимостьОтраженияВНУ Тогда
			
			ПроводкаНУ = Движения.Налоговый.Добавить();
			
			ПроводкаНУ.Период      = Реквизиты.Период;
			ПроводкаНУ.Организация = Реквизиты.Организация;
			
			ПроводкаНУ.СчетДт      = СтрокаТаблицы.СчетУчетаНУ;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт,"ВнеоборотныеАктивы",      СтрокаТаблицы.ОсновноеСредство);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт,"ВидыДвиженияСтоимостиФА", Перечисления.ВидыДвиженияСтоимостиФА.Поступление);
			
			ПроводкаНУ.СчетКт = ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьСчетРасчетовСКонтрагентомНУ(Проводка.СчетКт);
			
			Если Реквизиты.ВариантОтражения = 0 Тогда
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт,"Контрагенты",        Реквизиты.Контрагент);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт,"Договоры",           СтрокаТаблицы.ДоговорКонтрагента);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт,"ДокументыРасчетовСКонтрагентами", Реквизиты.Регистратор);
			Иначе
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт,"НалогиСборыОтчисления",        СтрокаТаблицы.ВидНалога);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт,"ВидыПлатежейВБюджетИФонды",    ПредопределенноеЗначение("Перечисление.ВидыПлатежейВБюджетИФонды.Налог"));
				
			КонецЕсли;

			ПроцедурыНалоговогоУчета.ВидУчетаНУ(ПроводкаНУ, Реквизиты.ВидУчетаНУ);
			
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				ПроводкаНУ, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);
			
			ПроводкаНУ.Сумма        = СтрокаТаблицы.Сумма;
			ПроводкаНУ.Содержание   = СтрокаТаблицы.Содержание;
		КонецЕсли;	
	КонецЦикла;
	
	Движения.Типовой.Записывать = Истина;
	Если Реквизиты.НеобходимостьОтраженияВНУ Тогда 
		Движения.Налоговый.Записывать = Истина;
	КонецЕсли;
	
КонецПроцедуры

Функция ПодготовитьПараметрыГТДИмпорт(ТаблицаОС, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаТовары

	СписокОбязательныхКолонок = ""
	+ "НомерСтроки,"       				// <Число> - номер строки в списке
	+ "ОсновноеСредство,"  				// <СправочникСсылка.ОсновныеСредства> - оприходованное ОС, на которое отражается пошлина
	+ "Сумма,"             				// <Число,15,2> - сумма в тенге
	+ "ВидНалога,"             			// <СправочникСсылка.НалогиСборыОтчисления> - вид налога пошлины, сбора, НДС
	+ "СуммаВзаиморасчетов,"            // <Число,15,2> - сумма в валюте взаиморасчетов
	+ "СчетУчетаБУ,"         			// <ПланСчетовСсылка.Типовой> - счет учета, на который приходуется товар
	+ "СчетУчетаНУ,"        			// <ПланСчетовСсылка.Налоговый> - счет учета, на который приходуется товар
	+ "Содержание,"        				// <Строка,150> - содержание проводки
	+ "ПодразделениеОрганизации,"       // <СправочникСсылка.ПодразделенияОрганизаций> - подразделение, на котором учитывается ОС
	+ "МОЛОрганизации,"        			// <СправочникСсылка.ФизическиеЛица> - МОЛ, за которым числится ОС
	+ "ВедетсяАналитическийУчетОСПоПодразделениям,"// <Булево> - признак ведения аналитического учета ОС в разрезе подразделений
	+ "ВедетсяАналитическийУчетОСПоМОЛ,"// <Булево> - признак ведения аналитического учета ОС в разрезе МОЛ
	+ "ДоговорКонтрагента,"             // <СправочникСсылка.ДоговорыКонтрагентов> - выбранный договор контрагента
	+ "ВалютаВзаиморасчетов";           // <СправочникСсылка.Валюты> - валюта взаиморасчетов выбранного договора

	Параметры.Вставить("ТаблицаОС",
		ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаОС, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Регистратор,"                  	 // <ДокументСсылка.*> - документ-регистратор движений
	+ "Период,"                       	 // <Дата> - период движений - дата документа
	+ "Организация,"                  	 // <СправочникСсылка.Организация> - организация, в которую приходуется товар
	+ "Контрагент,"                  	 // <СправочникСсылка.Контрагенты> - контрагент - поставщик
	+ "НеобходимостьОтраженияВНУ,"  	 // <Булево> - определяет необходимость отражения в НУ
	+ "ВалютаДокумента,"  			     // <СправочникСсылка.Валюты> - валюта документа
	+ "ВалютаВзаиморасчетов,"  			 // <СправочникСсылка.Валюты> - валюта взаиморасчетов
	+ "ВидУчетаНУ,"  					 // <СправочникСсылка.ВидыУчетаНУ> - вид учета, указанный в документе
	+ "СтруктурноеПодразделение,"  		 // <СправочникСсылка.ПодразделенияОрганизаций> - структурное подразделение организации
	+ "ВариантОтражения,"  		         // <Булево> - определяет вариант отражения
	+ "СчетУчетаРасчетовСКонтрагентом,"  // <ПланСчетовСсылка.Типовой> - счет на котором ведутся расчеты с контрагентом по задолженности
	+ "СчетУчетаРасчетовСКонтрагентомВал," // <ПланСчетовСсылка.Типовой> - счет на котором ведутся расчеты с контрагентом по задолженности в валюте взаиморасчетов
	+ "СчетУчетаНДСПоРеализации";          // <ПланСчетовСсылка.Типовой> - счет на котором ведутся расчеты по НДС по импорту
	
	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

// ВОЗВРАТ ТОВАРОВ ПОСТАВЩИКУ

Процедура СформироватьДвиженияВозвратТоваровПоставщику(ТаблицаОС, ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Параметры = ПодготовитьПараметрыВозвратТоваровПоставщику(ТаблицаОС, ТаблицаРеквизиты);
	
	Если Параметры.ТаблицаОС.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = Параметры.Реквизиты[0];
	
	Для Каждого СтрокаТаблицы Из Параметры.ТаблицаОС Цикл
		
		Если НЕ СтрокаТаблицы.ЭтоОС Тогда 
			Продолжить;
		КонецЕсли;
		
		Если СтрокаТаблицы.Сумма = 0 Тогда 
			Продолжить;
		КонецЕсли;
		
		ТипАналитикиДт   = "Дт";
		ТипАналитикиКт   = "Кт";
		
		Проводка = Движения.Типовой.Добавить();
		
		Проводка.Период       = Реквизиты.Период;
		Проводка.Организация  = Реквизиты.Организация;
		Проводка.Содержание   = СтрокаТаблицы.Содержание;
		Проводка.Сумма        = СтрокаТаблицы.Сумма;
		
		Проводка["Счет" + ТипАналитикиДт] = СтрокаТаблицы.КорСчет;
		СвойстваСчета   = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы.КорСчет);
		Для ИндексСубконто = 1 По СвойстваСчета.КоличествоСубконто Цикл
			Если СвойстваСчета["ВидСубконто" + ИндексСубконто] = ПланыВидовХарактеристик.ВидыСубконтоТиповые.Номенклатура И ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура) Тогда
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(СтрокаТаблицы.КорСчет, Проводка["Субконто" + ТипАналитикиДт], "Номенклатура", СтрокаТаблицы.Номенклатура);
			ИначеЕсли СвойстваСчета["ВидСубконто" + ИндексСубконто] = ПланыВидовХарактеристик.ВидыСубконтоТиповые.Подразделения И ЗначениеЗаполнено(СтрокаТаблицы.ПодразделениеОрганизации)
				И СтрокаТаблицы.ВедетсяАналитическийУчетОСПоПодразделениям Тогда
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(СтрокаТаблицы.КорСчет, Проводка["Субконто" + ТипАналитикиДт], "Подразделения", СтрокаТаблицы.ПодразделениеОрганизации);
			ИначеЕсли СвойстваСчета["ВидСубконто" + ИндексСубконто] = ПланыВидовХарактеристик.ВидыСубконтоТиповые.РаботникиОрганизаций И ЗначениеЗаполнено(СтрокаТаблицы.МОЛОрганизации)
				И СтрокаТаблицы.ВедетсяАналитическийУчетОСПоМОЛ Тогда
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(СтрокаТаблицы.КорСчет, Проводка["Субконто" + ТипАналитикиДт], "РаботникиОрганизаций", СтрокаТаблицы.МОЛОрганизации);
			Иначе
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(СтрокаТаблицы.КорСчет, Проводка["Субконто" + ТипАналитикиДт], ИндексСубконто, СтрокаТаблицы["КорСубконто" + ИндексСубконто]);
			КонецЕсли;
		КонецЦикла;
		
		Проводка["Счет" + ТипАналитикиКт] = СтрокаТаблицы.СчетДоходовБУ;
		СвойстваСчета   = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы.СчетДоходовБУ);
		Для ИндексСубконто = 1 По СвойстваСчета.КоличествоСубконто Цикл
			Если СвойстваСчета["ВидСубконто" + ИндексСубконто] = ПланыВидовХарактеристик.ВидыСубконтоТиповые.ОсновныеСредства И ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура) Тогда
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(СтрокаТаблицы.СчетДоходовБУ, Проводка["Субконто" + ТипАналитикиКт], "ОсновныеСредства", СтрокаТаблицы.Номенклатура);
			ИначеЕсли СвойстваСчета["ВидСубконто" + ИндексСубконто] = ПланыВидовХарактеристик.ВидыСубконтоТиповые.Подразделения И ЗначениеЗаполнено(СтрокаТаблицы.ПодразделениеОрганизации)
				И СтрокаТаблицы.ВедетсяАналитическийУчетОСПоПодразделениям Тогда
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(СтрокаТаблицы.СчетДоходовБУ, Проводка["Субконто" + ТипАналитикиКт], "Подразделения", СтрокаТаблицы.ПодразделениеОрганизации);
			ИначеЕсли СвойстваСчета["ВидСубконто" + ИндексСубконто] = ПланыВидовХарактеристик.ВидыСубконтоТиповые.РаботникиОрганизаций И ЗначениеЗаполнено(СтрокаТаблицы.МОЛОрганизации)
				И СтрокаТаблицы.ВедетсяАналитическийУчетОСПоМОЛ Тогда
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(СтрокаТаблицы.СчетДоходовБУ, Проводка["Субконто" + ТипАналитикиКт], "РаботникиОрганизаций", СтрокаТаблицы.МОЛОрганизации);
			Иначе
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(СтрокаТаблицы.СчетДоходовБУ, Проводка["Субконто" + ТипАналитикиКт], ИндексСубконто, СтрокаТаблицы["СубконтоДоходовБУ" + ИндексСубконто]);
			КонецЕсли;
		КонецЦикла;
		
		ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
			Проводка, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);
				
		Если ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт).Валютный Тогда
			Проводка.ВалютаДт = СтрокаТаблицы.ВалютаВзаиморасчетов;
			Проводка.ВалютнаяСуммаДт = СтрокаТаблицы.СуммаВзаиморасчетов;
		КонецЕсли;
		
		Если ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт).Валютный Тогда
			Проводка.ВалютаКт = СтрокаТаблицы.ВалютаВзаиморасчетов;
			Проводка.ВалютнаяСуммаКт = СтрокаТаблицы.СуммаВзаиморасчетов;
		КонецЕсли;
		
		// проводки по налоговому учету
		Если Реквизиты.НеобходимостьОтраженияВНУ Тогда
			
			Проводка = Движения.Налоговый.Добавить();
			
			Проводка.Период      = Реквизиты.Период;
			Проводка.Организация = Реквизиты.Организация;

			Проводка["Счет" + ТипАналитикиКт] = СтрокаТаблицы.СчетДоходовНУ;
			СвойстваСчета   = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы.СчетДоходовНУ);
			Для ИндексСубконто = 1 По СвойстваСчета.КоличествоСубконто Цикл
				Если СвойстваСчета["ВидСубконто" + ИндексСубконто] = ПланыВидовХарактеристик.ВидыСубконтоТиповые.ОсновныеСредства И ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура) Тогда
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(СтрокаТаблицы.СчетДоходовНУ, Проводка["Субконто" + ТипАналитикиКт], "ОсновныеСредства", СтрокаТаблицы.Номенклатура);
				ИначеЕсли СвойстваСчета["ВидСубконто" + ИндексСубконто] = ПланыВидовХарактеристик.ВидыСубконтоТиповые.ВнеоборотныеАктивы И ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура) Тогда
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(СтрокаТаблицы.СчетДоходовНУ, Проводка["Субконто" + ТипАналитикиКт], "ВнеоборотныеАктивы", СтрокаТаблицы.Номенклатура);
				ИначеЕсли СвойстваСчета["ВидСубконто" + ИндексСубконто] = ПланыВидовХарактеристик.ВидыСубконтоТиповые.ВидыДвиженияСтоимостиФА Тогда
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(СтрокаТаблицы.СчетДоходовНУ, Проводка["Субконто" + ТипАналитикиКт], "ВидыДвиженияСтоимостиФА", Перечисления.ВидыДвиженияСтоимостиФА.Поступление);
				ИначеЕсли СвойстваСчета["ВидСубконто" + ИндексСубконто] = ПланыВидовХарактеристик.ВидыСубконтоТиповые.Подразделения И ЗначениеЗаполнено(СтрокаТаблицы.ПодразделениеОрганизации)
					И СтрокаТаблицы.ВедетсяАналитическийУчетОСПоПодразделениям Тогда
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(СтрокаТаблицы.СчетДоходовНУ, Проводка["Субконто" + ТипАналитикиКт], "Подразделения", СтрокаТаблицы.ПодразделениеОрганизации);
				ИначеЕсли СвойстваСчета["ВидСубконто" + ИндексСубконто] = ПланыВидовХарактеристик.ВидыСубконтоТиповые.РаботникиОрганизаций И ЗначениеЗаполнено(СтрокаТаблицы.МОЛОрганизации)
					И СтрокаТаблицы.ВедетсяАналитическийУчетОСПоМОЛ Тогда
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(СтрокаТаблицы.СчетДоходовНУ, Проводка["Субконто" + ТипАналитикиКт], "РаботникиОрганизаций", СтрокаТаблицы.МОЛОрганизации);
				Иначе
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(СтрокаТаблицы.СчетДоходовНУ, Проводка["Субконто" + ТипАналитикиКт], ИндексСубконто, СтрокаТаблицы["СубконтоДоходовНУ" + ИндексСубконто]);
				КонецЕсли;
			КонецЦикла;
			
			КорСчетНУ = ?(ЗначениеЗаполнено(СтрокаТаблицы.КорСчетНУ), СтрокаТаблицы.КорСчетНУ, ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьСчетРасчетовСКонтрагентомНУ(СтрокаТаблицы.КорСчет));
			Проводка["Счет" + ТипАналитикиДт] = КорСчетНУ;
			СвойстваСчета   = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(КорСчетНУ);
			Для ИндексСубконто = 1 По СвойстваСчета.КоличествоСубконто Цикл
				Если СвойстваСчета["ВидСубконто" + ИндексСубконто] = ПланыВидовХарактеристик.ВидыСубконтоТиповые.Номенклатура И ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура) Тогда
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(КорСчетНУ, Проводка["Субконто" + ТипАналитикиДт], "Номенклатура", СтрокаТаблицы.Номенклатура);
				ИначеЕсли СвойстваСчета["ВидСубконто" + ИндексСубконто] = ПланыВидовХарактеристик.ВидыСубконтоТиповые.ВнеоборотныеАктивы И ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура) Тогда
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(КорСчетНУ, Проводка["Субконто" + ТипАналитикиДт], "ВнеоборотныеАктивы", СтрокаТаблицы.Номенклатура);
				ИначеЕсли СвойстваСчета["ВидСубконто" + ИндексСубконто] = ПланыВидовХарактеристик.ВидыСубконтоТиповые.ВидыДвиженияСтоимостиФА Тогда
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(КорСчетНУ, Проводка["Субконто" + ТипАналитикиДт], "ВидыДвиженияСтоимостиФА", Перечисления.ВидыДвиженияСтоимостиФА.Поступление);
				ИначеЕсли СвойстваСчета["ВидСубконто" + ИндексСубконто] = ПланыВидовХарактеристик.ВидыСубконтоТиповые.Подразделения И ЗначениеЗаполнено(СтрокаТаблицы.ПодразделениеОрганизации)
					И СтрокаТаблицы.ВедетсяАналитическийУчетОСПоПодразделениям Тогда
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(КорСчетНУ, Проводка["Субконто" + ТипАналитикиДт], "Подразделения", СтрокаТаблицы.ПодразделениеОрганизации);
				ИначеЕсли СвойстваСчета["ВидСубконто" + ИндексСубконто] = ПланыВидовХарактеристик.ВидыСубконтоТиповые.РаботникиОрганизаций И ЗначениеЗаполнено(СтрокаТаблицы.МОЛОрганизации)
					И СтрокаТаблицы.ВедетсяАналитическийУчетОСПоМОЛ Тогда
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(КорСчетНУ, Проводка["Субконто" + ТипАналитикиДт], "РаботникиОрганизаций", СтрокаТаблицы.МОЛОрганизации);
				Иначе
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(КорСчетНУ, Проводка["Субконто" + ТипАналитикиДт], ИндексСубконто, СтрокаТаблицы["КорСубконтоНУ" + ИндексСубконто]);
				КонецЕсли;
			КонецЦикла;
			
			ПроцедурыНалоговогоУчета.ВидУчетаНУ(Проводка, Реквизиты.ВидУчетаНУ);
			
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				Проводка, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);
			
			Проводка.Сумма        = СтрокаТаблицы.Сумма;
			Проводка.Содержание   = СтрокаТаблицы.Содержание;
		КонецЕсли;	
	КонецЦикла;
	
	Движения.Типовой.Записывать = Истина;
	Если Реквизиты.НеобходимостьОтраженияВНУ Тогда 
		Движения.Налоговый.Записывать = Истина;
	КонецЕсли;
	
КонецПроцедуры

Функция ПодготовитьПараметрыВозвратТоваровПоставщику(ТаблицаОС, ТаблицаРеквизиты)

	Параметры = Новый Структура;
	
	// Подготовка таблицы шапки документа
	СписокОбязательныхКолонок = ""
	+ "Период,"                   // <Дата>
	+ "Регистратор,"              // <Регистратор...> - документ, записывающий движения в регистры
	+ "Организация,"              // <СправочникСсылка.Организации> - организация документа
	+ "СтруктурноеПодразделение," // <СправочникСсылка.СтруктурноеПодразделение> - организация документа
	+ "УказанСчетВозвратов,"
	+ "НеобходимостьОтраженияВНУ,"
	+ "ВидУчетаНУ";
	
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));
	
	// Подготовка таблицы возвращаемых товаров и услуг:
	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"
	+ "НомерСтроки,"
	+ "Номенклатура,"
	+ "Количество,"
	+ "Стоимость,"
	+ "СтоимостьНУ,"
	+ "Сумма,"
	+ "СуммаНДС,"
	+ "СуммаВзаиморасчетов,"
	+ "СуммаНДСВзаиморасчетов,"
	+ "СчетУчета,"
	+ "СчетУчетаНУ,"
	+ "ВедетсяАналитическийУчетОСПоПодразделениям,"
	+ "ВедетсяАналитическийУчетОСПоМОЛ,"
	+ "ПодразделениеОрганизации,"
	+ "МОЛОрганизации,"
	+ "КорСчет,"
	+ "КорСубконто1,"
	+ "КорСубконто2,"
	+ "КорСубконто3,"
	+ "КорСчетНУ,"
	+ "КорСубконтоНУ1,"
	+ "КорСубконтоНУ2,"
	+ "КорСубконтоНУ3,"
	+ "СчетДоходовБУ,"
	+ "СубконтоДоходовБУ1,"
	+ "СубконтоДоходовБУ2,"
	+ "СубконтоДоходовБУ3,"
	+ "СчетДоходовНУ,"
	+ "СубконтоДоходовНУ1,"
	+ "СубконтоДоходовНУ2,"
	+ "СубконтоДоходовНУ3,"
	+ "ВалютаВзаиморасчетов,"
	+ "НоменклатурнаяГруппа,"
	+ "ЭтоУслуга,"
	+ "ЭтоОС,"
	+ "Содержание"
	;	
	
	ОбщегоНазначенияБКВызовСервера.ДобавитьКолонкуВТаблицуЗначений(ТаблицаОС, "ЗнакПроводкиНУ", 1);
	
	Параметры.Вставить("ТаблицаОС", ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаОС, СписокОбязательныхКолонок));
	
	Возврат Параметры;

КонецФункции

// ВЫРАБОТКА ОС

Процедура СформироватьДвиженияВыработкаОС(ТаблицаОС, Движения, Отказ) Экспорт
	
	Параметры = ПодготовитьПараметрыВыработкаОС(ТаблицаОС);
	
	Если Параметры.ТаблицаОС.Количество() > 0 Тогда
		
		Движения.ВыработкаОС.Загрузить(Параметры.ТаблицаОС);
		Движения.ВыработкаОС.Записывать = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПодготовитьПараметрыВыработкаОС(ТаблицаОС)

	Параметры = Новый Структура;
	
	// Подготовка таблицы ТаблицаОС:
	СписокОбязательныхКолонок = ""
	+ "Период,"
	+ "Регистратор,"
	+ "НомерСтроки,"
	+ "ОсновноеСредство,"
	+ "ПараметрВыработки,"
	+ "Количество,"
	;
	Параметры.Вставить("ТаблицаОС", ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаОС, СписокОбязательныхКолонок));
	
	Возврат Параметры;

КонецФункции

// МЕСТОНАХОЖДЕНИЕ ОС

Процедура СформироватьДвиженияМестонахождениеОСБух(ТаблицаОС, Движения, Отказ) Экспорт
	
	Если ТаблицаОС = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Параметры = ПодготовитьПараметрыМестонахождениеОСБух(ТаблицаОС);
	
	Если Параметры.ТаблицаОС.Количество() > 0 Тогда
		
		Движения.МестонахождениеОСБухгалтерскийУчет.Загрузить(Параметры.ТаблицаОС);
		Движения.МестонахождениеОСБухгалтерскийУчет.Записывать = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПодготовитьПараметрыМестонахождениеОСБух(ТаблицаОС)

	Параметры = Новый Структура;
	
	// Подготовка таблицы ТаблицаОС:
	СписокОбязательныхКолонок = ""
	+ "Период,"
	+ "Регистратор,"
	+ "НомерСтроки,"
	+ "Организация,"
	+ "ОсновноеСредство,"
	+ "МОЛ,"
	+ "Местонахождение,"
	+ "СтруктурноеПодразделение"
	;
	Параметры.Вставить("ТаблицаОС", ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаОС, СписокОбязательныхКолонок));
	
	Возврат Параметры;

КонецФункции

// ИЗМЕНЕНИЕ ГРАФИКОВ АМОРТИЗАЦИИ ОС

Процедура СформироватьДвиженияИзменениеГрафиковАмортизацииОС(ТаблицаОС, Движения, Отказ) Экспорт
	
	Если ТаблицаОС = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Параметры = ПодготовитьПараметрыИзменениеГрафиковАмортизацииОС(ТаблицаОС);
	
	Если Параметры.ТаблицаОС.Количество() > 0 Тогда
		
		Для каждого СтрокаТаблицы Из Параметры.ТаблицаОС Цикл
			Движение = Движения.ГрафикиАмортизацииОСБухгалтерскийУчет.Добавить();
			Движение.Период            		  = СтрокаТаблицы.Период;
			Движение.Организация       		  = СтрокаТаблицы.Организация;
			Движение.ОсновноеСредство  		  = СтрокаТаблицы.ОсновноеСредство;
			Движение.ГрафикАмортизации 		  = СтрокаТаблицы.ГрафикАмортизации;
			Движение.СтруктурноеПодразделение = СтрокаТаблицы.СтруктурноеПодразделение;
		КонецЦикла;
		
		Движения.ГрафикиАмортизацииОСБухгалтерскийУчет.Записывать = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПодготовитьПараметрыИзменениеГрафиковАмортизацииОС(ТаблицаОС)

	Параметры = Новый Структура;
	
	// Подготовка таблицы ТаблицаОС:
	СписокОбязательныхКолонок = ""
	+ "Период,"
	+ "Регистратор,"
	+ "НомерСтроки,"
	+ "Организация,"
	+ "ОсновноеСредство,"
	+ "ГрафикАмортизации,"
    + "СтруктурноеПодразделение,"
	;
	Параметры.Вставить("ТаблицаОС", ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаОС, СписокОбязательныхКолонок));
	
	Возврат Параметры;

КонецФункции

// РЕГИСТРАЦИЯ СОБЫТИЙ ОС

Процедура СформироватьДвиженияРегистрацияСобытияОС(ТаблицаОС, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Если ТаблицаОС = Неопределено ИЛИ ТаблицаРеквизиты = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыРегистрацияСобытияОС(ТаблицаОС, ТаблицаРеквизиты);

	Если Параметры.ТаблицаОС.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Реквизиты = Параметры.Реквизиты[0];

	НазваниеДокумента = Реквизиты.Регистратор.Метаданные().Представление();

	Для каждого СтрокаТаблицы Из Параметры.ТаблицаОС Цикл
		Движение = Движения.СобытияОСОрганизаций.Добавить();
		Движение.Период            		  = Реквизиты.Период;
		Движение.ОсновноеСредство  		  = СтрокаТаблицы.ОсновноеСредство;
		Движение.Организация       		  = Реквизиты.Организация;
		Движение.Событие           		  = Реквизиты.СобытиеОС;
		Движение.НазваниеДокумента 		  = НазваниеДокумента;
		Движение.НомерДокумента    		  = Реквизиты.Номер;
		Движение.СтруктурноеПодразделение = Реквизиты.СтруктурноеПодразделение;
		Движение.СуммаЗатратБУ     		  = СтрокаТаблицы.СуммаЗатратБУ;
	КонецЦикла;

	Движения.СобытияОСОрганизаций.Записывать = Истина;

КонецПроцедуры

Функция ПодготовитьПараметрыРегистрацияСобытияОС(ТаблицаОС, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаОС

	СписокОбязательныхКолонок = ""
	+ "ОсновноеСредство," // <СправочникСсылка.ОсновныеСредства>
	+ "СуммаЗатратБУ";    // <Число, 15, 2> - сумма затрат по бухгалтерскому учету при модернизации ОС

	Параметры.Вставить("ТаблицаОС",
		ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаОС, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"             	  // <Дата>
	+ "Номер,"              	  // <Строка, 0> - номер документа, отразившего событие
	+ "Организация,"        	  // <СправочникСсылка.Организации>
	+ "СтруктурноеПодразделение," // <СправочникСсылка.ПодразделенияОрганизаций>
	+ "СобытиеОС,"          	  // <СправочникСсылка.СобытияОС> - событие с ОС
	+ "Регистратор";        	  // <ДокументСсылка.*>

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

// ПАРАМЕТРЫ АМОРТИЗАЦИИ ОС БУХГАЛТЕРСКИЙ УЧЕТ

Процедура СформироватьДвиженияПараметрыАмортизацииОСБухгалтерскийУчет(ТаблицаОС, Движения, Отказ) Экспорт

	Если ТаблицаОС = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыПараметрыАмортизацииОСБухгалтерскийУчет(ТаблицаОС);

	Если Параметры.ТаблицаОС.Количество() > 0 Тогда
		
		Движения.ПараметрыАмортизацииОСБухгалтерскийУчет.Загрузить(Параметры.ТаблицаОС);
		Движения.ПараметрыАмортизацииОСБухгалтерскийУчет.Записывать = Истина;
		
	КонецЕсли;

КонецПроцедуры

Функция ПодготовитьПараметрыПараметрыАмортизацииОСБухгалтерскийУчет(ТаблицаОС)

	Параметры = Новый Структура;
	
	// Подготовка таблицы ТаблицаОС:
	СписокОбязательныхКолонок = ""
	+ "Период,"
	+ "Регистратор,"
	+ "НомерСтроки,"
	+ "ОсновноеСредство,"                            // <СправочникСсылка.ОсновныеСредства>
	+ "Организация,"                                 // <СправочникСсылка.Организации>
	+ "СрокПолезногоИспользования,"                  // <Число, 4, 0> - Срок полезного использования, мес.
	+ "ОбъемПродукцииРабот,"                         // <Число, 10, 0> - Предполагаемый объем продукции (работ) в натуральных ед. 
	+ "СрокИспользованияДляВычисленияАмортизации,"   // <Число, 4, 0> - Срок использования для вычисления амортизации, мес.
	+ "СтоимостьДляВычисленияАмортизации,"           // <Число, 15, 2> - Стоимость для вычисления амортизации
	+ "ОбъемПродукцииРаботДляВычисленияАмортизации," // <Число, 10, 0> - Объем продукции (работ) для исчисления амортизации в натуральных ед.
	+ "КоэффициентАмортизации,"                      // <Число, 5, 2> - Процент годовой амортизации
	+ "КоэффициентУскорения,"                        // <Число, 5, 2> - Коэффициент ускорения
	+ "СтруктурноеПодразделение,"                    // <СправочникСсылка.ПодразделенияОрганизаций>
	+ "ЛиквидационнаяСтоимость"                     // <Число, 15, 2> - Ликвидационная стоимость
	;
	Параметры.Вставить("ТаблицаОС", ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаОС, СписокОбязательныхКолонок));
	
	Возврат Параметры;

КонецФункции

Функция ПодготовитьТаблицыДвиженийПараметровАмортизацииОСБухгалтерскийУчет(ТаблицаОС, ТаблицаРеквизиты, Отказ, ВыводитьСообщения = Истина) Экспорт
	
	Реквизиты = ТаблицаРеквизиты;
	Реквизиты = Реквизиты[0];
	
	Для Каждого Строка Из ТаблицаОС Цикл
		
		ДатаОкончанияДляРасчетаФактДанных = ?(Реквизиты.ПрименятьПараметрыАмортизацииВТекМесяце, ДобавитьМесяц(КонецМесяца(Строка.Период), -1), Строка.Период);
		Если Строка.ОбъемВыработанныхПродукцииРабот <> 0 Тогда
			Строка.ОбъемПродукцииРаботДляВычисленияАмортизации = Строка.ОбъемПродукцииРаботДляВычисленияАмортизации - УправлениеВнеоборотнымиАктивамиСервер.ОпределитьОбъемВыработкиОС(Строка.ДатаПоследнихПараметровАмортизации, ДатаОкончанияДляРасчетаФактДанных, Строка.ОсновноеСредство);
		Иначе 
			Строка.ОбъемПродукцииРаботДляВычисленияАмортизации = 0;
		КонецЕсли;	

	КонецЦикла;
	
	Возврат ТаблицаОС;

КонецФункции

// РЕГИСТРАЦИЯ СОСТОЯНИЯ ОС

Процедура СформироватьДвиженияИзменениеСостоянияОС(ТаблицаОС, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Если ТаблицаОС = Неопределено ИЛИ ТаблицаРеквизиты = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Параметры = ПодготовитьПараметрыИзменениеСостоянияОС(ТаблицаОС, ТаблицаРеквизиты);

	Если Параметры.ТаблицаОС.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Реквизиты = Параметры.Реквизиты[0];

	Для каждого СтрокаТаблицы Из Параметры.ТаблицаОС Цикл
		Движение = Движения.СостоянияОСОрганизаций.Добавить();
		Движение.Период           		  = Реквизиты.Период;
		Движение.ДатаСостояния    		  = Реквизиты.Период;
		Движение.ОсновноеСредство 		  = СтрокаТаблицы.ОсновноеСредство;
		Движение.Организация      		  = Реквизиты.Организация;
		Движение.Состояние        		  = СтрокаТаблицы.СостояниеОС;
		Движение.СтруктурноеПодразделение = Реквизиты.СтруктурноеПодразделение;
	КонецЦикла;

	Движения.СостоянияОСОрганизаций.Записывать = Истина;

КонецПроцедуры

Функция ПодготовитьПараметрыИзменениеСостоянияОС(ТаблицаОС, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаОС

	СписокОбязательныхКолонок = ""
	+ "ОсновноеСредство," // <СправочникСсылка.ОсновныеСредства>
	+ "СостояниеОС";      		  // <ПеречислениеСсылка.СостоянияОС> - состояние ОС, которое требуется установить

	Параметры.Вставить("ТаблицаОС",
		ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаОС, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"           		  // <Дата>
	+ "Организация,"      		  // <СправочникСсылка.Организации>
	+ "СтруктурноеПодразделение"; // <СправочникСсылка.ПодразделенияОрганизаций>

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

// НАЧИСЛЕНИЕ АМОРТИЗАЦИИ ОС (признак)

Процедура СформироватьДвиженияИзменениеПризнакаНачисленияАмортизацииОС(ТаблицаОС, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыИзменениеПризнакаНачисленияАмортизацииОС(ТаблицаОС, ТаблицаРеквизиты);

	Если Параметры.ТаблицаОС.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Реквизиты = Параметры.Реквизиты[0];

	Для каждого СтрокаТаблицы Из Параметры.ТаблицаОС Цикл
		Движение = Движения.НачислениеАмортизацииОСБухгалтерскийУчет.Добавить();
		Движение.Период               	  = Реквизиты.Период;
		Движение.ОсновноеСредство     	  = СтрокаТаблицы.ОсновноеСредство;
		Движение.Организация          	  = Реквизиты.Организация;
		Движение.НачислятьАмортизацию 	  = СтрокаТаблицы.НачислятьАмортизацию;
		Движение.СтруктурноеПодразделение = Реквизиты.СтруктурноеПодразделение;
	КонецЦикла;

	Движения.НачислениеАмортизацииОСБухгалтерскийУчет.Записывать = Истина;

КонецПроцедуры

Функция ПодготовитьПараметрыИзменениеПризнакаНачисленияАмортизацииОС(ТаблицаОС, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаОС

	СписокОбязательныхКолонок = ""
	+ "ОсновноеСредство," 	   // <СправочникСсылка.ОсновныеСредства>
	+ "НачислятьАмортизацию"; // <Булево> - признак необходимости начисления амортизации по бухгалтерскому учету
	
	Параметры.Вставить("ТаблицаОС",
		ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаОС, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"               	  // <Дата>
	+ "Организация,"          	  // <СправочникСсылка.Организации>
	+ "СтруктурноеПодразделение"; // <СправочникСсылка.ПодразделенияОрганизаций>
	
	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

// ОБЪЕКТЫ ИМУЩЕСТВЕННОГО НАЛОГА (признак)

Процедура СформироватьДвиженияОбъектыИмущественногоНалога(ТаблицаОС, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыОбъектыИмущественногоНалога(ТаблицаОС, ТаблицаРеквизиты);

	Если Параметры.ТаблицаОС.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Реквизиты = Параметры.Реквизиты[0];

	Для каждого СтрокаТаблицы Из Параметры.ТаблицаОС Цикл
		Движение = Движения.ОбъектыИмущественногоНалога.Добавить();
		Движение.Период                = Реквизиты.Период;
		Движение.ОбъектНалогообложения = СтрокаТаблицы.ОбъектНалогообложения;
		Движение.НачислятьНалог 	   = СтрокаТаблицы.НачислятьНалог;
		Движение.Организация		   = Реквизиты.Организация;
		Если СтрокаТаблицы.НачислятьНалог Тогда
			// подразделение для определения структурной единицы берем из регистра "МестонахождениеОС"
			Если Реквизиты.ПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
				
				Движение.Налогоплательщик = ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(СтрокаТаблицы.Местонахождение,
																	Реквизиты.Организация,
																	Перечисления.РазделыНалоговогоУчета.МестныеНалоги);

				СПДокумента = ?(ЗначениеЗаполнено(Реквизиты.СтруктурноеПодразделение),Реквизиты.СтруктурноеПодразделение, Реквизиты.Организация);				
				Движение.СтруктурнаяЕдиница = ?(СтрокаТаблицы.Местонахождение.ЯвляетсяСтруктурнымПодразделением,СтрокаТаблицы.Местонахождение, СПДокумента);								        						
			Иначе
				Движение.Налогоплательщик 	= Реквизиты.Организация;
				Движение.СтруктурнаяЕдиница = Реквизиты.Организация;
			КонецЕсли;
		Иначе
			// при снятии с налогов данные берем из прежних записей.
			Если Реквизиты.ПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
				
				Движение.Налогоплательщик = ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(СтрокаТаблицы.СтруктурнаяЕдиницаИмущественногоНалога,
																	Реквизиты.Организация,
																	Перечисления.РазделыНалоговогоУчета.МестныеНалоги);
	
				Движение.СтруктурнаяЕдиница = СтрокаТаблицы.СтруктурнаяЕдиницаИмущественногоНалога;
			Иначе
				Движение.Налогоплательщик 	= Реквизиты.Организация;
				Движение.СтруктурнаяЕдиница = Реквизиты.Организация;
			КонецЕсли;					
		КонецЕсли;
		
	КонецЦикла;

	Движения.ОбъектыИмущественногоНалога.Записывать = Истина;

КонецПроцедуры

Функция ПодготовитьПараметрыОбъектыИмущественногоНалога(ТаблицаОС, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаОС

	СписокОбязательныхКолонок = ""
	+ "ОбъектНалогообложения," 					// <СправочникСсылка.ОсновныеСредства>
	+ "НачислятьНалог," 						// <Булево> - признак необходимости начисления амортизации по бухгалтерскому учету
	+ "СтруктурнаяЕдиницаИмущественногоНалога," // СправочникСсылка.ПодразделенияОрганизаций, СправочникСсылка.Организации
	+ "Местонахождение";

	Параметры.Вставить("ТаблицаОС",
		ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаОС, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"             						  // <Дата>
	+ "Организация,"   								  // <СправочникСсылка.Организации>
	+ "СтруктурноеПодразделение," 					  // СправочникСсылка.ПодразделенияОрганизаций, СправочникСсылка.Организации
	+ "ПоддержкаРаботыСоСтруктурнымиПодразделениями"; // <Булево>
	
	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

// ОБЪЕКТЫ ТРАНСПОРТНОГО НАЛОГА (признак)

Процедура СформироватьДвиженияИзменениеТранспортногоНалога(ТаблицаОС, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыИзменениеТранспортногоНалога(ТаблицаОС, ТаблицаРеквизиты);

	Если Параметры.ТаблицаОС.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Реквизиты = Параметры.Реквизиты[0];

	Для каждого СтрокаТаблицы Из Параметры.ТаблицаОС Цикл
		Движение = Движения.ОбъектыТранспортногоНалога.Добавить();
		Движение.Период                = Реквизиты.Период;
		Движение.ОбъектНалогообложения = СтрокаТаблицы.ОбъектНалогообложения;
		Движение.НачислятьНалог 	   = СтрокаТаблицы.НачислятьНалог;
		Движение.Организация		   = Реквизиты.Организация;
		Если СтрокаТаблицы.НачислятьНалог Тогда
			// подразделение для определения структурной единицы берем из регистра "МестонахождениеОС"
			Если Реквизиты.ПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
				
				Движение.Налогоплательщик = ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(СтрокаТаблицы.Местонахождение,
																	Реквизиты.Организация,
																	Перечисления.РазделыНалоговогоУчета.МестныеНалоги);

				СПДокумента = ?(ЗначениеЗаполнено(Реквизиты.СтруктурноеПодразделение),Реквизиты.СтруктурноеПодразделение, Реквизиты.Организация);				
				Движение.СтруктурнаяЕдиница = ?(СтрокаТаблицы.Местонахождение.ЯвляетсяСтруктурнымПодразделением,СтрокаТаблицы.Местонахождение, СПДокумента);								        						
			Иначе
				Движение.Налогоплательщик 	= Реквизиты.Организация;
				Движение.СтруктурнаяЕдиница = Реквизиты.Организация;
			КонецЕсли;
		Иначе
			// при снятии с налогов данные берем из прежних записей.
			Если Реквизиты.ПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
				
				Движение.Налогоплательщик = ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(СтрокаТаблицы.СтруктурнаяЕдиницаТранспортногоНалога,
																	Реквизиты.Организация,
																	Перечисления.РазделыНалоговогоУчета.МестныеНалоги);
	
				Движение.СтруктурнаяЕдиница = СтрокаТаблицы.СтруктурнаяЕдиницаТранспортногоНалога;
			Иначе
				Движение.Налогоплательщик 	= Реквизиты.Организация;
				Движение.СтруктурнаяЕдиница = Реквизиты.Организация;
			КонецЕсли;					
		КонецЕсли;
		
	КонецЦикла;

	Движения.ОбъектыТранспортногоНалога.Записывать = Истина;

КонецПроцедуры

Функция ПодготовитьПараметрыИзменениеТранспортногоНалога(ТаблицаОС, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаОС

	СписокОбязательныхКолонок = ""
	+ "ОбъектНалогообложения," 					// <СправочникСсылка.ОсновныеСредства>
	+ "НачислятьНалог," 						// <Булево> - признак необходимости начисления амортизации по бухгалтерскому учету
	+ "СтруктурнаяЕдиницаТранспортногоНалога," // СправочникСсылка.ПодразделенияОрганизаций, СправочникСсылка.Организации
	+ "Местонахождение";

	Параметры.Вставить("ТаблицаОС",
		ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаОС, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"             						  // <Дата>
	+ "Организация,"   								  // <СправочникСсылка.Организации>
	+ "СтруктурноеПодразделение," 					  // СправочникСсылка.ПодразделенияОрганизаций, СправочникСсылка.Организации
	+ "ПоддержкаРаботыСоСтруктурнымиПодразделениями"; // <Булево>
	
	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

// ОБЪЕКТЫ ЗЕМЕЛЬНОГО НАЛОГА (признак)

Процедура СформироватьДвиженияИзменениеЗемельногоНалога(ТаблицаОС, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыИзменениеЗемельногоНалога(ТаблицаОС, ТаблицаРеквизиты);

	Если Параметры.ТаблицаОС.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Реквизиты = Параметры.Реквизиты[0];

	Для каждого СтрокаТаблицы Из Параметры.ТаблицаОС Цикл
		Движение = Движения.ОбъектыЗемельногоНалога.Добавить();
		Движение.Период                = Реквизиты.Период;
		Движение.ОбъектНалогообложения = СтрокаТаблицы.ОбъектНалогообложения;
		Движение.НачислятьНалог 	   = СтрокаТаблицы.НачислятьНалог;
		Движение.Организация		   = Реквизиты.Организация;
		Если СтрокаТаблицы.НачислятьНалог Тогда
			// подразделение для определения структурной единицы берем из регистра "МестонахождениеОС"
			Если Реквизиты.ПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
				
				Движение.Налогоплательщик = ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(СтрокаТаблицы.Местонахождение,
																	Реквизиты.Организация,
																	Перечисления.РазделыНалоговогоУчета.МестныеНалоги);

				СПДокумента = ?(ЗначениеЗаполнено(Реквизиты.СтруктурноеПодразделение),Реквизиты.СтруктурноеПодразделение, Реквизиты.Организация);				
				Движение.СтруктурнаяЕдиница = ?(СтрокаТаблицы.Местонахождение.ЯвляетсяСтруктурнымПодразделением,СтрокаТаблицы.Местонахождение, СПДокумента);								        						
			Иначе
				Движение.Налогоплательщик 	= Реквизиты.Организация;
				Движение.СтруктурнаяЕдиница = Реквизиты.Организация;
			КонецЕсли;
		Иначе
			// при снятии с налогов данные берем из прежних записей.
			Если Реквизиты.ПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
				
				Движение.Налогоплательщик = ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(СтрокаТаблицы.СтруктурнаяЕдиницаЗемельногоНалога,
																	Реквизиты.Организация,
																	Перечисления.РазделыНалоговогоУчета.МестныеНалоги);
	
				Движение.СтруктурнаяЕдиница = СтрокаТаблицы.СтруктурнаяЕдиницаЗемельногоНалога;
			Иначе
				Движение.Налогоплательщик 	= Реквизиты.Организация;
				Движение.СтруктурнаяЕдиница = Реквизиты.Организация;
			КонецЕсли;					
		КонецЕсли;
		
	КонецЦикла;

	Движения.ОбъектыЗемельногоНалога.Записывать = Истина;

КонецПроцедуры

Функция ПодготовитьПараметрыИзменениеЗемельногоНалога(ТаблицаОС, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаОС

	СписокОбязательныхКолонок = ""
	+ "ОбъектНалогообложения," 				 // <СправочникСсылка.ОсновныеСредства>
	+ "НачислятьНалог," 					 // <Булево> - признак необходимости начисления амортизации по бухгалтерскому учету
	+ "СтруктурнаяЕдиницаЗемельногоНалога,"  // СправочникСсылка.ПодразделенияОрганизаций, СправочникСсылка.Организации
	+ "Местонахождение";

	Параметры.Вставить("ТаблицаОС",
		ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаОС, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"             						  // <Дата>
	+ "Организация,"   								  // <СправочникСсылка.Организации>
	+ "СтруктурноеПодразделение," 					  // СправочникСсылка.ПодразделенияОрганизаций, СправочникСсылка.Организации
	+ "ПоддержкаРаботыСоСтруктурнымиПодразделениями"; // <Булево>
	
	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

// СПОСОБЫ ОТРАЖЕНИЯ РАСХОДОВ ПО АМОРТИЗАЦИИ ОС БУХГАЛТЕРСКИЙ УЧЕТ

Процедура СформироватьДвиженияСпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчет(ТаблицаОС, ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Если ТаблицаОС = Неопределено ИЛИ ТаблицаОС.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Параметры = ПодготовитьПараметрыСпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчет(ТаблицаОС, ТаблицаРеквизиты);
	
	Если Параметры.ТаблицаОС.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = Параметры.Реквизиты[0];
	
	Для Каждого СтрокаТаблицы Из Параметры.ТаблицаОС Цикл
		
		Проводка = Движения.СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчет.Добавить();
		
		Проводка.Период       						  = Реквизиты.Период;
		Проводка.Организация 						  = Реквизиты.Организация;
		Проводка.ОсновноеСредство   				  = СтрокаТаблицы.ОсновноеСредство;
		Проводка.СпособОтраженияРасходовПоАмортизации = СтрокаТаблицы.СпособОтраженияРасходовПоАмортизации;
		Проводка.СтруктурноеПодразделение 			  = Реквизиты.СтруктурноеПодразделение;
		 		
	КонецЦикла;
	
	Движения.СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчет.Записывать = Истина;
	
КонецПроцедуры

Функция ПодготовитьПараметрыСпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчет(ТаблицаОС, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаОС

	СписокОбязательныхКолонок = ""
	+ "Номер,"       				// <Число> - номер строки в списке
	+ "ОсновноеСредство,"      		// <СправочникСсылка.ОсновныеСредства>
	+ "СпособОтраженияРасходовПоАмортизации";

	Параметры.Вставить("ТаблицаОС",
		ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаОС, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Регистратор,"                  	 	  // <ДокументСсылка.*> - документ-регистратор движений
	+ "Период,"                       	 	  // <Дата> - период движений - дата документа
	+ "Организация,"                  	 	  // <СправочникСсылка.Организация> - организация
	+ "СтруктурноеПодразделение"             // <СправочникСсылка.ПодразделенияОрганизаций>
	;    	
	
	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

// СОСТАВ ОС

Процедура СформироватьДвиженияСоставОС(ТаблицаОС, ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Если ТаблицаОС = Неопределено ИЛИ ТаблицаОС.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыСоставОС(ТаблицаОС, ТаблицаРеквизиты);
	
	Если Параметры.ТаблицаОС.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = Параметры.Реквизиты[0];
	
	Для Каждого СтрокаТаблицы Из Параметры.ТаблицаОС Цикл
		
		Проводка = Движения.СоставОС.Добавить();
		
		Проводка.Период       						  = Реквизиты.Период;
		Проводка.ОсновноеСредство   				  = СтрокаТаблицы.ОсновноеСредство;
		Проводка.ВСоставеОС 						  = СтрокаТаблицы.ВСоставеОС;
		Проводка.СостояниеВСоставеОС   				  = СтрокаТаблицы.СостояниеВСоставеОС;
		 		
	КонецЦикла;
	
	Движения.СоставОС.Записывать = Истина;
	
КонецПроцедуры

Функция ПодготовитьПараметрыСоставОС(ТаблицаОС, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаОС

	СписокОбязательныхКолонок = ""
	+ "ОсновноеСредство,"      		// <СправочникСсылка.ОсновныеСредства> - оприходуемый ОС
	+ "СостояниеВСоставеОС,"
	+ "ВСоставеОС";   

	Параметры.Вставить("ТаблицаОС",
		ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаОС, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Регистратор,"                  	 	  // <ДокументСсылка.*> - документ-регистратор движений
	+ "Период";                  	 	
	
	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

// МОДЕРНИЗАЦИЯ ОС БУ

Процедура СформироватьДвиженияБУДокументаМодернизацияОС(ТаблицаОС, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыБУДокументаМодернизацияОС(ТаблицаОС, ТаблицаРеквизиты);

	Если Параметры.ТаблицаОС.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Реквизиты = Параметры.Реквизиты[0];

	Для каждого СтрокаТаблицы Из Параметры.ТаблицаОС Цикл
		
		Если НЕ (СтрокаТаблицы.СуммаПроводки = 0) Тогда

			Проводка = Движения.Типовой.Добавить();

			Проводка.Период       = Реквизиты.Период;
			Проводка.Организация  = Реквизиты.Организация;
			Проводка.Содержание   = НСтр("ru = 'Модернизация ОС'", ОбщегоНазначения.КодОсновногоЯзыка());
			Проводка.СчетДт       = СтрокаТаблицы.СчетУчетаБУ;
			
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", СтрокаТаблицы.ОсновноеСредство);
			
			УправлениеВнеоборотнымиАктивамиСервер.УстановитьАналитикуПоМестонахождениюОС(Реквизиты.ВедетсяАналитУчетОсПоМОЛ, Реквизиты.ВедетсяАналитУчетОсПоПодразделениям, Проводка, СтрокаТаблицы.ОсновноеСредство, Параметры.ТаблицаОС, Истина);
			
			Проводка.СчетКт       = Реквизиты.СчетУчетаОбъектаМодернизацииБУ;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", Реквизиты.ОбъектМодернизации);
			
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				Проводка, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);

			Проводка.НомерЖурнала = НСтр("ru = 'ОС'", ОбщегоНазначения.КодОсновногоЯзыка());
			Проводка.Сумма        = СтрокаТаблицы.СуммаПроводки;

		КонецЕсли;
		
	КонецЦикла;

	Движения.Типовой.Записывать = Истина;

КонецПроцедуры

Функция ПодготовитьПараметрыБУДокументаМодернизацияОС(ТаблицаОС, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаОС

	СписокОбязательныхКолонок = ""
	+ "ОсновноеСредство," 
	+ "СчетУчетаБУ," 
	+ "СуммаПроводки," 
	+ "МОЛОрганизации," 
	+ "ПодразделениеОрганизации";    

	Параметры.Вставить("ТаблицаОС",
		ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаОС, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"             	  // <Дата>
	+ "Номер,"              	  // <Строка, 0> - номер документа, отразившего событие
	+ "Организация,"        	  // <СправочникСсылка.Организации>
	+ "СтруктурноеПодразделение," // <СправочникСсылка.ПодразделенияОрганизаций>
	+ "ВедетсяАналитУчетОсПоМОЛ," 
	+ "ВедетсяАналитУчетОсПоПодразделениям," 
	+ "СчетУчетаОбъектаМодернизацииБУ," 
	+ "ОбъектМодернизации";        	  

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

// МОДЕРНИЗАЦИЯ ОС НУ

Процедура СформироватьДвиженияНУДокументаМодернизацияОС(ТаблицаОС, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыНУДокументаМодернизацияОС(ТаблицаОС, ТаблицаРеквизиты);

	Если Параметры.ТаблицаОС.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Реквизиты = Параметры.Реквизиты[0];

	Если Реквизиты.НеобходимостьОтраженияВНУ Тогда
		
		Для каждого СтрокаТаблицы Из Параметры.ТаблицаОС Цикл
			Проводка = Движения.Налоговый.Добавить();
			
			
			ВидУчетаВПроводку = Реквизиты.ВидУчетаНУ;
			
			Проводка.Период       = Реквизиты.Период;
			Проводка.Организация  = Реквизиты.Организация;
			Проводка.Содержание   = НСтр("ru = 'Модернизация ОС'", ОбщегоНазначения.КодОсновногоЯзыка());
			Проводка.СчетДт       = СтрокаТаблицы.СчетНУ;
			
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
										Проводка, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);

			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаТаблицы.СубконтоНУ1);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаТаблицы.СубконтоНУ2);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтрокаТаблицы.СубконтоНУ3);
			Проводка.ВидУчетаДт = ВидУчетаВПроводку;
			Если НЕ Реквизиты.СчетУчетаОбъектаМодернизацииНУ.Пустая() Тогда
				Проводка.СчетКт       = Реквизиты.СчетУчетаОбъектаМодернизацииНУ;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, Реквизиты.СубконтоОбъектаМодернизацииНУ1);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, Реквизиты.СубконтоОбъектаМодернизацииНУ2);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, Реквизиты.СубконтоОбъектаМодернизацииНУ3);				
				
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ВнеоборотныеАктивы", Реквизиты.ОбъектМодернизации);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ВидыДвиженияСтоимостиФА", Перечисления.ВидыДвиженияСтоимостиФА.Выбытие);			
				Проводка.ВидУчетаКт = ВидУчетаВПроводку;
			КонецЕсли;
			Проводка.НомерЖурнала = НСтр("ru = 'ОС'", ОбщегоНазначения.КодОсновногоЯзыка());
			Проводка.Сумма        = СтрокаТаблицы.СуммаПроводки;

		КонецЦикла;
		
	КонецЕсли;

	Движения.Налоговый.Записывать = Истина;

КонецПроцедуры

Функция ПодготовитьПараметрыНУДокументаМодернизацияОС(ТаблицаОС, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаОС

	СписокОбязательныхКолонок = ""
	+ "ОсновноеСредство," 
	+ "СчетНУ," 
	+ "СуммаПроводки," 
	+ "СубконтоНУ1," 
	+ "СубконтоНУ2," 
	+ "СубконтоНУ3"; 

	Параметры.Вставить("ТаблицаОС",
		ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаОС, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"             	  // <Дата>
	+ "Номер,"              	  // <Строка, 0> - номер документа, отразившего событие
	+ "Организация,"        	  // <СправочникСсылка.Организации>
	+ "СтруктурноеПодразделение," // <СправочникСсылка.ПодразделенияОрганизаций>
	+ "ВедетсяАналитУчетОсПоМОЛ," 
	+ "ВедетсяАналитУчетОсПоПодразделениям," 
	+ "СубконтоОбъектаМодернизацииНУ1," 
	+ "СубконтоОбъектаМодернизацииНУ2," 
	+ "СубконтоОбъектаМодернизацииНУ3," 
	+ "СчетУчетаОбъектаМодернизацииНУ," 
	+ "НеобходимостьОтраженияВНУ," 
	+ "ВидУчетаНУ," 
	+ "ОбъектМодернизации";        	  

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

// ПЕРЕДАЧА ОС

Процедура СформироватьДвиженияПередачаОС(ТаблицаОС, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Если ТаблицаОС = Неопределено ИЛИ ТаблицаОС.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыПередачаОС(ТаблицаОС, ТаблицаРеквизиты);
	
	Если Параметры.ТаблицаОС.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = Параметры.Реквизиты[0];
	
	Для Каждого СтрокаОС Из ТаблицаОС Цикл
		                       
		ДобавитьДвиженияПоВыбытиюОС(СтрокаОС, Реквизиты, Движения, Отказ);
		
		Если Реквизиты.НеобходимостьОтраженияВНУ Тогда
			ДобавитьДвижениеПередачаОСНУ(Реквизиты, СтрокаОС, Движения, Отказ)
		КонецЕсли;
		
	КонецЦикла;
	
	Движения.Типовой.Записывать = Истина;
	
	Если Реквизиты.НеобходимостьОтраженияВНУ Тогда
		Движения.Налоговый.Записывать = Истина;
	КонецЕсли;  
	
КонецПроцедуры

Функция ПодготовитьПараметрыПередачаОС(ТаблицаОС, ТаблицаРеквизиты)

	Параметры = Новый Структура;
	
	СписокОбязательныхКолонок = ""
    + "ОсновноеСредство,"          
	+ "АмортизацияБУ,"                   
	+ "АмортизацияЗаМесяцБУ," 
	+ "СтоимостьНУ,"                   
	+ "СчетКт,"
	+ "СчетДт," 	                  
	+ "ТекущееПодразделение,"
	+ "ТекущееМОЛ,"
	+ "КорСчет,"
	+ "КорСубконто1,"                  
	+ "КорСубконто2,"
	+ "КорСубконто3,"
	+ "СуммаВзаиморасчетов,"                  
	+ "ПризнакФА,"	
	+ "СчетДоходовНУ,"       
	+ "СубконтоДоходовНУ1,"
	+ "СубконтоДоходовНУ2,"
	+ "СубконтоДоходовНУ3,"
	+ "СчетРасходовНУ,"       
	+ "СубконтоРасходовНУ1,"
	+ "СубконтоРасходовНУ2,"
	+ "СубконтоРасходовНУ3"
	;

	Параметры.Вставить("ТаблицаОС",
		ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаОС, СписокОбязательныхКолонок));

	СписокОбязательныхКолонок = ""
	+ "Регистратор,"                  	 // <ДокументСсылка.*> - документ-регистратор движений
	+ "Период,"                       	 // <Дата> - период движений - дата документа
	+ "Организация,"  
	+ "НомерЖурнала,"                     // <СправочникСсылка.Организация> - организация, в которую приходуется товар	
	+ "НеобходимостьОтраженияВНУ,"  	 // <Булево> - определяет необходимость отражения в НУ
	+ "ВалютаВзаиморасчетов,"  			 // <СправочникСсылка.Валюты> - валюта документа
	+ "ВидУчетаНУ,"  					 // <СправочникСсылка.ВидыУчетаНУ> - вид учета, указанный в документе
	+ "СтруктурноеПодразделение,"  	     // <СправочникСсылка.ПодразделенияОрганизации> - СП, указанное в документе
	+ "Контрагент,"
	+ "ДоговорКонтрагента,"
	+ "СчетУчетаРасчетовСКонтрагентом,"
	+ "ВидОперации,"
	+ "ВедениеУчетаВременныхРазницБалансовымМетодом,"
	+ "ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль";
 
	
	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Процедура ДобавитьДвижениеПередачаОСНУ(Реквизиты, СтрокаТаблицы, Движения, Отказ)
	
	СчетУчетаФА = ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьСчетУчетаНУВнеоборотногоАктива(СтрокаТаблицы.ОсновноеСредство, Реквизиты.Организация, 
																								Реквизиты.Период, СтрокаТаблицы.ПризнакФА);
	
	СчетРасчетовСКонтрагентомНУ = ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьСчетРасчетовСКонтрагентомНУ(Реквизиты.СчетУчетаРасчетовСКонтрагентом);
	КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	
	Если Реквизиты.ВидОперации = Перечисления.ВидыОперацийПередачиОС.ПередачаСтруктурномуПодразделению Тогда		
		
		Если СтрокаТаблицы.АмортизацияЗаМесяцБУ <> 0 Тогда
			// списание амортизации тек. месяца
			ПроводкаНУ = Движения.Налоговый.Добавить();
			ПроводкаНУ.Период 		= Реквизиты.Период;
			ПроводкаНУ.Организация 	= Реквизиты.Организация;
			ПроводкаНУ.Содержание 	= НСтр("ru ='Списание внеоборотного актива. амортизация тек. месяца'", КодОсновногоЯзыка);
			
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
			ПроводкаНУ, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);
			
			ПроводкаНУ.Сумма = - СтрокаТаблицы.АмортизацияЗаМесяцБУ;				
			
			ПроводкаНУ.СчетДт = СчетРасчетовСКонтрагентомНУ;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 	"Контрагенты", 	 Реквизиты.Контрагент);			
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт,	"Договоры",      Реквизиты.ДоговорКонтрагента);										
			
			ПроводкаНУ.СчетКт = СчетУчетаФА;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "ВнеоборотныеАктивы", СтрокаТаблицы.ОсновноеСредство);			
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "ВидыДвиженияСтоимостиФА", Перечисления.ВидыДвиженияСтоимостиФА.Перемещение);			
			
			ПроводкаНУ.ВидУчетаДт = ?(СтрокаТаблицы.ПризнакФА,?(Реквизиты.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль, Справочники.ВидыУчетаНУ.ВР, Справочники.ВидыУчетаНУ.НУ),Справочники.ВидыУчетаНУ.НеОтражаетсяВНУ);
			ПроцедурыНалоговогоУчета.ВидУчетаНУ(ПроводкаНУ, ПроводкаНУ.ВидУчетаДт, Ложь);								
		КонецЕсли;			
		// прочие движенияпри передаче в СП не выполняем, поэтому переходим к следующему ОС
		Возврат;   
	КонецЕсли;
	
	Если  СтрокаТаблицы.ПризнакФА Тогда
		// При выбытии стоимостный баланс группы уменьшается на сумму реализации		
		Если СтрокаТаблицы.СуммаБезНДС <> 0 Тогда
			
			ПроводкаНУ = Движения.Налоговый.Добавить();
			ПроводкаНУ.Период = Реквизиты.Период;
			ПроводкаНУ.Организация = Реквизиты.Организация;  			
			ПроводкаНУ.Содержание = НСтр("ru = 'Реализация фиксированного актива'", КодОсновногоЯзыка);
			
			ПроводкаНУ.СчетДт = СчетРасчетовСКонтрагентомНУ;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "Контрагенты", Реквизиты.Контрагент);			
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт,   "Договоры",      Реквизиты.ДоговорКонтрагента);
			
			ПроводкаНУ.СчетКт 	= СчетУчетаФА;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "ВнеоборотныеАктивы", СтрокаТаблицы.ОсновноеСредство);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "ВидыДвиженияСтоимостиФА", Перечисления.ВидыДвиженияСтоимостиФА.Выбытие);			
			
			ПроводкаНУ.Сумма 	= СтрокаТаблицы.СуммаБезНДС;			
			
			ПроводкаНУ.ВидУчетаКт = Справочники.ВидыУчетаНУ.НУ;	
			ПроводкаНУ.ВидУчетаДт = Справочники.ВидыУчетаНУ.НУ;	
				
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
						ПроводкаНУ, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);
			
		КонецЕсли;	
		
		Если Реквизиты.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль Тогда
			// Временные разницы
			// 1. Доходы. 	В БУ возникает доход на сумму реализации. В НУ дохода не возникает. Величина дохода от реализации в БУ
			// 	  будет являться временной разницей по НУ. 	Кт Н750 (ВР) Сумма РеализацииБУ
			// 2. Затраты. В БУ признаются затраты в размере остаточной стоимости актива по БУ, в НУ в этом периоде затраты не возникают.
			//    Величина остаточной стоимости в БУ является времененной разницей. Дт Н880 (ВР) ОстаточнаяСтоимостьБУ
			// 3. Стоимость ФА. В БУ актив выбывает и его стоимость равно 0, в НУ актив продолжает числиться. Возникает временная разница
			///   на сумму ( СуммаРеализацииБУ). 
			
			// 1. Доходы
			Если СтрокаТаблицы.СуммаБезНДС <> 0 Тогда
				ПроводкаНУ = Движения.Налоговый.Добавить();
				ПроводкаНУ.Период = Реквизиты.Период;
				ПроводкаНУ.Организация = Реквизиты.Организация;
				ПроводкаНУ.Содержание = НСтр("ru = 'ВР: Доход от реализация фиксированного актива в БУ'", КодОсновногоЯзыка);
				
				ПроводкаНУ.СчетКт = СтрокаТаблицы.СчетДоходовНУ;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 1, СтрокаТаблицы.СубконтоДоходовНУ1);			
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 2, СтрокаТаблицы.СубконтоДоходовНУ2);							
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 3, СтрокаТаблицы.СубконтоДоходовНУ3);											
				ПроводкаНУ.Сумма = СтрокаТаблицы.СуммаБезНДС;		
				
				ПроводкаНУ.ВидУчетаКт = Справочники.ВидыУчетаНУ.ВР;									
				
				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделениеПроводки(ПроводкаНУ, Реквизиты.СтруктурноеПодразделение, "Кт"); 
			КонецЕсли;
			
			// 2. Затраты
			СуммаПроводки = СтрокаТаблицы.СтоимостьБУ - СтрокаТаблицы.АмортизацияБУ - СтрокаТаблицы.АмортизацияЗаМесяцБУ;
			Если СуммаПроводки <> 0 Тогда
				ПроводкаНУ = Движения.Налоговый.Добавить();
				ПроводкаНУ.Период = Реквизиты.Период;
				ПроводкаНУ.Организация = Реквизиты.Организация;
				ПроводкаНУ.Содержание = НСтр("ru = 'ВР: Затраты в сумме остаточной стоимости фиксированного актива в БУ и НУ'", КодОсновногоЯзыка);
				
				ПроводкаНУ.СчетДт = СтрокаТаблицы.СчетРасходовНУ;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 1, СтрокаТаблицы.СубконтоРасходовНУ1);			
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 2, СтрокаТаблицы.СубконтоРасходовНУ2);							
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 3, СтрокаТаблицы.СубконтоРасходовНУ3);											
				ПроводкаНУ.Сумма = СуммаПроводки;		
				
				ПроводкаНУ.СчетКт = СчетУчетаФА;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "ВнеоборотныеАктивы", СтрокаТаблицы.ОсновноеСредство);			
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "ВидыДвиженияСтоимостиФА", Перечисления.ВидыДвиженияСтоимостиФА.Выбытие);			
				
				ПроводкаНУ.ВидУчетаДт = Справочники.ВидыУчетаНУ.ВР;				
				ПроводкаНУ.ВидУчетаКт = Справочники.ВидыУчетаНУ.ВР;				
				
				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(ПроводкаНУ, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);
			КонецЕсли;
			
			// 3. Стоимость ФА								
			Если СтрокаТаблицы.СуммаБезНДС <> 0 Тогда
				ПроводкаНУ = Движения.Налоговый.Добавить();
				ПроводкаНУ.Период = Реквизиты.Период;
				ПроводкаНУ.Организация = Реквизиты.Организация;
				ПроводкаНУ.Содержание = НСтр("ru = 'ВР: Разница в стоимости актива по БУ и НУ'", КодОсновногоЯзыка);
				
				ПроводкаНУ.СчетДт = СчетУчетаФА;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "ВнеоборотныеАктивы", СтрокаТаблицы.ОсновноеСредство);			
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "ВидыДвиженияСтоимостиФА", Перечисления.ВидыДвиженияСтоимостиФА.Выбытие);			
				ПроводкаНУ.Сумма = СтрокаТаблицы.СуммаБезНДС;		
				
				ПроводкаНУ.ВидУчетаДт = Справочники.ВидыУчетаНУ.ВР;
				
				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделениеПроводки(ПроводкаНУ, Реквизиты.СтруктурноеПодразделение, "Дт"); 
			КонецЕсли;
		КонецЕсли;	
	Иначе
		// не фиксированный актив. Списываем остаточную стоимость и признаем доход от реализации
		
		// Движения в НУ ВА, не подлежащих амортизации		
		// Если возникает налогооблагаемый доход, признаем его в НУ
		// Отражаем балансовую стоимость
		// Отражаем доход от реализации.		
		
		СуммаДоходаНУ = СтрокаТаблицы.СуммаБезНДС - СтрокаТаблицы.СтоимостьНУ;
		
		Если СуммаДоходаНУ  > 0 Тогда
			ПроводкаНУ = Движения.Налоговый.Добавить();
			ПроводкаНУ.Период = Реквизиты.Период;
			ПроводкаНУ.Организация = Реквизиты.Организация;  			
			ПроводкаНУ.Содержание = НСтр("ru = 'Реализация ОС'", КодОсновногоЯзыка);
			
			ПроводкаНУ.СчетДт = СчетРасчетовСКонтрагентомНУ;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "Контрагенты", Реквизиты.Контрагент);			
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт,"Договоры",      Реквизиты.ДоговорКонтрагента);
			
			ПроводкаНУ.СчетКт = СтрокаТаблицы.СчетДоходовНУ;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 1, СтрокаТаблицы.СубконтоДоходовНУ1);			
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 2, СтрокаТаблицы.СубконтоДоходовНУ2);							
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 3, СтрокаТаблицы.СубконтоДоходовНУ3);							
			
			ПроводкаНУ.Сумма = СуммаДоходаНУ;						
			
			ПроводкаНУ.ВидУчетаДт = Справочники.ВидыУчетаНУ.НУ;
			ПроводкаНУ.ВидУчетаКт = Справочники.ВидыУчетаНУ.НУ;			
			
			//ПроцедурыНалоговогоУчета.ВидУчетаНУ(ПроводкаНУ, СтруктураШапкиДокумента.ВидУчетаНУ);
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(ПроводкаНУ, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);
		КонецЕсли;	
		
		Если Реквизиты.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль Тогда
			// отражаем доход отреализации
			СуммаДоходаПР = Мин(СтрокаТаблицы.СуммаБезНДС, СтрокаТаблицы.СтоимостьНУ);
			
			Если СуммаДоходаПР <> 0 Тогда
				ПроводкаНУ = Движения.Налоговый.Добавить();
				ПроводкаНУ.Период = Реквизиты.Период;
				ПроводкаНУ.Организация = Реквизиты.Организация;  	
				ПроводкаНУ.Содержание = НСтр("ru = 'Часть дохода от реализации ФА,не признаваемая в НУ'", КодОсновногоЯзыка);
				
				ПроводкаНУ.СчетДт = СчетРасчетовСКонтрагентомНУ;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "Контрагенты", Реквизиты.Контрагент);			
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт,"Договоры",      Реквизиты.ДоговорКонтрагента);
				
				ПроводкаНУ.СчетКт = СтрокаТаблицы.СчетДоходовНУ;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 1, СтрокаТаблицы.СубконтоДоходовНУ1);			
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 2, СтрокаТаблицы.СубконтоДоходовНУ2);							
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 3, СтрокаТаблицы.СубконтоДоходовНУ3);												
				
				ПроводкаНУ.Сумма = СуммаДоходаПР;					
				ВидУчетаВПроводке = Справочники.ВидыУчетаНУ.НеОтражаетсяВНУ;								
				ПроводкаНУ.ВидУчетаДт = ВидУчетаВПроводке;
				ПроводкаНУ.ВидУчетаКт = ВидУчетаВПроводке;			
				
				ПроцедурыНалоговогоУчета.ВидУчетаНУ(ПроводкаНУ, ВидУчетаВПроводке);	
				
				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(ПроводкаНУ, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);
			КонецЕсли;	
			
			Если СтрокаТаблицы.АмортизацияЗаМесяцБУ <> 0 Тогда
				ПроводкаНУ = Движения.Налоговый.Добавить();
				ПроводкаНУ.Период = Реквизиты.Период;
				ПроводкаНУ.Организация = Реквизиты.Организация;  	
				ПроводкаНУ.Содержание = НСтр("ru = 'Списание внеоборотного актива'", КодОсновногоЯзыка);
				
				ПроводкаНУ.СчетДт       = СтрокаТаблицы.СчетРасходовНУ;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 1, СтрокаТаблицы.СубконтоРасходовНУ1);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 2, СтрокаТаблицы.СубконтоРасходовНУ2);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 3, СтрокаТаблицы.СубконтоРасходовНУ3);
				
				ПроводкаНУ.СчетКт 	= СчетУчетаФА;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "ВнеоборотныеАктивы", СтрокаТаблицы.ОсновноеСредство);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "ВидыДвиженияСтоимостиФА", Перечисления.ВидыДвиженияСтоимостиФА.Выбытие);			
				
				ПроводкаНУ.Сумма 	= - СтрокаТаблицы.АмортизацияЗаМесяцБУ;
				
				ВидУчетаВПроводке 		= Справочники.ВидыУчетаНУ.НеОтражаетсяВНУ;			
				
				ПроводкаНУ.ВидУчетаДт 	= ВидУчетаВПроводке;
				ПроводкаНУ.ВидУчетаКт 	= ВидУчетаВПроводке;			
				
				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(ПроводкаНУ, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);
				
				// ВР на сумму операции не отражавшейся в БУ
				ПроцедурыНалоговогоУчета.ОтразитьВременныеРазницыВНУ(Реквизиты, ПроводкаНУ, Движения, СтрокаТаблицы.АмортизацияЗаМесяцБУ);
			КонецЕсли;					
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// ПРИНЯТИЕ К УЧЕТУ ОС

Процедура СформироватьДвиженияПринятиеКУчетуОС(ТаблицаОС, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Если ТаблицаОС = Неопределено ИЛИ ТаблицаРеквизиты = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыПринятиеКУчетуОС(ТаблицаОС, ТаблицаРеквизиты);
	
	Если Параметры.ТаблицаОС.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = Параметры.Реквизиты[0];
	
	Для Каждого СтрокаОС Из Параметры.ТаблицаОС Цикл
		
		Проводка = Движения.Типовой.Добавить();
		
		Проводка.Период       = Реквизиты.Период;
		Проводка.Организация  = Реквизиты.Организация;
		Проводка.НомерЖурнала = Реквизиты.НомерЖурнала;
		Проводка.Содержание   = СтрокаОС.Содержание;
		Проводка.Сумма        = СтрокаОС.Сумма;
		
		ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				Проводка, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);
		
		Проводка.СчетДт       = СтрокаОС.СчетУчетаБУ;
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", СтрокаОС.ОсновноеСредство);
		
		Если Реквизиты.ВедетсяАналитУчетОсПоПодразделениям Тогда
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Подразделения", СтрокаОС.ПодразделениеОрганизации);
		КонецЕсли;
		
		Если Реквизиты.ВедетсяАналитУчетОсПоМОЛ Тогда
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "РаботникиОрганизаций", СтрокаОС.МОЛ);
		КонецЕсли;
		
		Проводка.СчетКт       = СтрокаОС.КорСчет;
		
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтрокаОС.КорСубконтоОприходования1);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтрокаОС.КорСубконтоОприходования2);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, СтрокаОС.КорСубконтоОприходования3);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства",   СтрокаОС.ОсновноеСредство);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ВнеоборотныеАктивы", СтрокаОС.ОсновноеСредство);
		
		Если Реквизиты.НеобходимостьОтраженияВНУ Тогда
			ПроводкаНУ = Движения.Налоговый.Добавить();
			ПроводкаНУ.Период       = Реквизиты.Период;
			ПроводкаНУ.Организация  = Реквизиты.Организация;
			ПроводкаНУ.НомерЖурнала = Реквизиты.НомерЖурнала;
			ПроводкаНУ.Содержание   = СтрокаОС.Содержание;
			ПроводкаНУ.Сумма        = СтрокаОС.Сумма;
			
			
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
					ПроводкаНУ, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);
			
			
			ПроводкаНУ.СчетДт       = СтрокаОС.СчетУчетаНУ;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "ВнеоборотныеАктивы", СтрокаОС.ОсновноеСредство);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "ВидыДвиженияСтоимостиФА", СтрокаОС.ВидДвиженияСтоимостиФА);
			
			ПроводкаНУ.СчетКт       = СтрокаОС.КорСчетНУ;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 1, СтрокаОС.КорСубконтоОприходованияНУ1);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 2, СтрокаОС.КорСубконтоОприходованияНУ2);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 3, СтрокаОС.КорСубконтоОприходованияНУ3);
			
			ПроцедурыНалоговогоУчета.ВидУчетаНУ(ПроводкаНУ, Реквизиты.ВидУчетаНУ);
		КонецЕсли; 
	КонецЦикла ;
	
	
	Движения.Типовой.Записывать = Истина;
	
	Если Реквизиты.НеобходимостьОтраженияВНУ Тогда
		Движения.Налоговый.Записывать = Истина;
	КонецЕсли;  
	
КонецПроцедуры

Функция ПодготовитьПараметрыПринятиеКУчетуОС(ТаблицаОС, ТаблицаРеквизиты)

	Параметры = Новый Структура;
	
	СписокОбязательныхКолонок = ""
    + "ОсновноеСредство,"          
	+ "ПодразделениеОрганизации,"                   
	+ "МОЛ,"                     
	+ "СчетУчетаБУ,"
	+ "КорСчет," 	                  
	+ "КорСубконтоОприходования1,"
	+ "КорСубконтоОприходования2,"
	+ "КорСубконтоОприходования3,"
	+ "СчетУчетаНУ,"                  
	+ "ВидДвиженияСтоимостиФА,"
	+ "КорСчетНУ,"
	+ "КорСубконтоОприходованияНУ1,"                  
	+ "КорСубконтоОприходованияНУ2,"	
	+ "КорСубконтоОприходованияНУ3,"       
	+ "Сумма,"
	+ "Содержание"
	;
	
	Параметры.Вставить("ТаблицаОС",
		ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаОС, СписокОбязательныхКолонок));

	СписокОбязательныхКолонок = ""
	+ "Регистратор,"                  	 // <ДокументСсылка.*> - документ-регистратор движений
	+ "Период,"                       	 // <Дата> - период движений - дата документа
	+ "Организация,"  
	+ "НомерЖурнала,"                     // <СправочникСсылка.Организация> - организация, в которую приходуется товар	
	+ "НеобходимостьОтраженияВНУ,"  	 // <Булево> - определяет необходимость отражения в НУ
	+ "ВидУчетаНУ,"  					 // <СправочникСсылка.ВидыУчетаНУ> - вид учета, указанный в документе
	+ "СтруктурноеПодразделение,"  	     // <СправочникСсылка.ПодразделенияОрганизации> - СП, указанное в документе
	+ "ВедетсяАналитУчетОсПоМОЛ,"
	+ "ВедетсяАналитУчетОсПоПодразделениям"
    ;
	
	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Процедура СформироватьДвиженияПоОтражениюЗатратНУОС(ТаблицаОС, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Если ТаблицаОС = Неопределено ИЛИ ТаблицаРеквизиты = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыПоОтражениюЗатратНУОС(ТаблицаОС, ТаблицаРеквизиты);
	
	Если Параметры.ТаблицаОС.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = Параметры.Реквизиты[0];
	
	Для Каждого СтрокаОС Из Параметры.ТаблицаОС Цикл			
		
		ПроводкаНУ = Движения.Налоговый.Добавить();
		ПроводкаНУ.Период       = Реквизиты.Период;
		ПроводкаНУ.Организация  = Реквизиты.Организация;
		ПроводкаНУ.НомерЖурнала = Реквизиты.НомерЖурнала;
		ПроводкаНУ.Содержание   = НСтр("ru = 'Единовременное отнесение на вычеты стоимости ФА (преференции)'", ОбщегоНазначения.КодОсновногоЯзыка());
		ПроводкаНУ.Сумма        = СтрокаОС.Сумма;
		
		ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
		ПроводкаНУ, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);
		
		
		ПроводкаНУ.СчетДт       = СтрокаОС.СчетДт;
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "ВнеоборотныеАктивы", СтрокаОС.ОсновноеСредство);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "СтатьиЗатрат", СтрокаОС.СтатьяЗатрат);
		
		ПроводкаНУ.СчетКт       = СтрокаОС.СчетКт;
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "ВнеоборотныеАктивы", СтрокаОС.ОсновноеСредство);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "ВидыДвиженияСтоимостиФА", СтрокаОС.ВидДвиженияСтоимостиФА);
		
		ПроцедурыНалоговогоУчета.ВидУчетаНУ(ПроводкаНУ, Реквизиты.ВидУчетаНУ);
		
		Если Реквизиты.ВедениеУчетаВременныхРазницБалансовымМетодом Тогда
			// признание ВР по операции
			ПроводкаНУ = Движения.Налоговый.Добавить();
			ПроводкаНУ.Период       = Реквизиты.Период;
			ПроводкаНУ.Организация  = Реквизиты.Организация;
			ПроводкаНУ.НомерЖурнала = Реквизиты.НомерЖурнала;
			ПроводкаНУ.Содержание   = НСтр("ru = 'Признание ВР по отнесению на вычеты стоимости ФА (преференции)'", ОбщегоНазначения.КодОсновногоЯзыка());
			ПроводкаНУ.Сумма        = - СтрокаОС.Сумма;
			
			
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
			ПроводкаНУ, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);
			
			ПроводкаНУ.СчетДт       = СтрокаОС.СчетДт;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "ВнеоборотныеАктивы", СтрокаОС.ОсновноеСредство);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "СтатьиЗатрат", СтрокаОС.СтатьяЗатрат);
			
			ПроводкаНУ.СчетКт       = СтрокаОС.СчетКт;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "ВнеоборотныеАктивы", СтрокаОС.ОсновноеСредство);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "ВидыДвиженияСтоимостиФА", СтрокаОС.ВидДвиженияСтоимостиФА);
			
			ПроводкаНУ.ВидУчетаДт	= Справочники.ВидыУчетаНУ.ВР;
			ПроводкаНУ.ВидУчетаКт	= Справочники.ВидыУчетаНУ.ВР;
		КонецЕсли;			
		
	КонецЦикла;
	
	Движения.Налоговый.Записывать = Истина;
	
КонецПроцедуры

Функция ПодготовитьПараметрыПоОтражениюЗатратНУОС(ТаблицаОС, ТаблицаРеквизиты)

	Параметры = Новый Структура;
	
	СписокОбязательныхКолонок = ""
    + "ОсновноеСредство,"          
	+ "СтатьяЗатрат,"                   
	+ "ВидДвиженияСтоимостиФА,"                     
	+ "Сумма,"
	+ "СчетДт," 	                  
	+ "СчетКт"
	;
	
	Параметры.Вставить("ТаблицаОС",
		ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаОС, СписокОбязательныхКолонок));

	СписокОбязательныхКолонок = ""
	+ "Регистратор,"                  	 // <ДокументСсылка.*> - документ-регистратор движений
	+ "Период,"                       	 // <Дата> - период движений - дата документа
	+ "Организация,"  
	+ "НомерЖурнала,"                     // <СправочникСсылка.Организация> - организация, в которую приходуется товар	
	+ "НеобходимостьОтраженияВНУ,"  	 // <Булево> - определяет необходимость отражения в НУ
	+ "ВидУчетаНУ,"  					 // <СправочникСсылка.ВидыУчетаНУ> - вид учета, указанный в документе
	+ "СтруктурноеПодразделение,"  	     // <СправочникСсылка.ПодразделенияОрганизации> - СП, указанное в документе
	+ "ВедениеУчетаВременныхРазницБалансовымМетодом"
	 ;
	
	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Функция ПодготовитьТаблицуПервоначальныеСведенияОС(ТаблицаОС, ТаблицаСписанныеТовары) Экспорт

	Если ТаблицаСписанныеТовары = Неопределено ИЛИ ТаблицаОС = Неопределено Тогда
		Возврат ТаблицаОС;
	КонецЕсли;

	СтруктураОтбора = Новый Структура("ОтражатьВБухгалтерскомУчете", Истина);
	
	МассивСтрокСписанныхТоваров = ТаблицаСписанныеТовары.НайтиСтроки(СтруктураОтбора);
	
	Для Каждого СтрокаСписания ИЗ МассивСтрокСписанныхТоваров Цикл	
		
		СтрокаОС = ТаблицаОС.Найти(СтрокаСписания.НомерСтроки,"НомерСтроки");		
		Если СтрокаОС <> Неопределено Тогда
			СтрокаОС.ПервоначальнаяСтоимость = СтрокаСписания.СуммаСписания;			
		КонецЕсли;
		
	КонецЦикла;

	Возврат ТаблицаОС;

КонецФункции

Функция ПодготовитьТаблицуПараметрыАмортизацииОС(ТаблицаОС, ТаблицаСписанныеТовары) Экспорт

	Если ТаблицаСписанныеТовары = Неопределено ИЛИ ТаблицаОС = Неопределено Тогда
		Возврат ТаблицаОС;
	КонецЕсли;

	СтруктураОтбора = Новый Структура("ОтражатьВБухгалтерскомУчете", Истина);
	
	МассивСтрокСписанныхТоваров = ТаблицаСписанныеТовары.НайтиСтроки(СтруктураОтбора);
	
	Для Каждого СтрокаСписания ИЗ МассивСтрокСписанныхТоваров Цикл	
		
		СтрокаОС = ТаблицаОС.Найти(СтрокаСписания.НомерСтроки,"НомерСтроки");		
		Если СтрокаОС <> Неопределено Тогда
			Если СтрокаОС.НачислятьАмортизацию И НЕ ЗначениеЗаполнено(СтрокаОС.СтоимостьДляВычисленияАмортизации) Тогда 
				СтрокаОС.СтоимостьДляВычисленияАмортизации = СтрокаСписания.СуммаСписания;
				СтрокаОС.ЛиквидационнаяСтоимость			  = 0;
			Иначе
				СтрокаОС.ЛиквидационнаяСтоимость			  = СтрокаСписания.СуммаСписания - СтрокаОС.СтоимостьДляВычисленияАмортизации;				
			КонецЕсли;	
			
		КонецЕсли;
		
	КонецЦикла;

	Возврат ТаблицаОС;

КонецФункции

Функция ПодготовитьТаблицуОтраженияЗатратОСНУ(ТаблицаОС, ТаблицаСписанныеТовары) Экспорт

	Если ТаблицаСписанныеТовары = Неопределено ИЛИ ТаблицаОС = Неопределено Тогда
		Возврат ТаблицаОС;
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура("ОтражатьВБухгалтерскомУчете", Истина);
	
	МассивСтрокСписанныхТоваров = ТаблицаСписанныеТовары.НайтиСтроки(СтруктураОтбора);
	
	Для Каждого СтрокаСписания ИЗ МассивСтрокСписанныхТоваров Цикл	
		
		СтрокаОС = ТаблицаОС.Найти(СтрокаСписания.НомерСтроки,"НомерСтроки");		
		Если СтрокаОС <> Неопределено Тогда
			СтрокаОС.Сумма = СтрокаСписания.СуммаСписания;							
		КонецЕсли;
		
	КонецЦикла;

	Возврат ТаблицаОС;

КонецФункции

Функция ПодготовитьТаблицуПередачаОС(ТаблицаОС, ТаблицаОСНУ) Экспорт

	Если ТаблицаОСНУ = Неопределено ИЛИ ТаблицаОС = Неопределено Тогда
		Возврат ТаблицаОС;
	КонецЕсли;
	
	Для Каждого СтрокаСписания ИЗ ТаблицаОС Цикл
		СтрокаСписания.СтоимостьНУ = 0;
		СтруктураПоиска = Новый Структура("НомерСтроки",СтрокаСписания.НомерСтроки);
		СтрокиОС = ТаблицаОСНУ.НайтиСтроки(СтруктураПоиска);		
		Для Каждого СтрокаОС Из СтрокиОС Цикл
			СтрокаСписания.СтоимостьНУ = СтрокаСписания.СтоимостьНУ + СтрокаОС.СтоимостьНУ;			
		КонецЦикла		
	КонецЦикла;
	
	Возврат ТаблицаОС;

КонецФункции


// РЕСТРУКТУРИЗАЦИЯ ОС

Функция ПодготовитьТаблицуПараметрыРеструктуризацииОС(ТаблицаРеквизиты, ТаблицаОС, ТаблицаОСРаспределениеАмортизацииПоНаправлениямРегл, ТаблицаСтоимостьОСНУ)Экспорт
	
	Если ТаблицаОСРаспределениеАмортизацииПоНаправлениямРегл = Неопределено Тогда
		Возврат ТаблицаОС;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизиты[0];
	
	Если Реквизиты.ВидОперации = Перечисления.ВидыОперацийРеструктуризацияОС.ПолноеСписание Тогда
		Для Каждого СтрокаРаспределения ИЗ ТаблицаОСРаспределениеАмортизацииПоНаправлениямРегл Цикл	
			СтрокаОС = ТаблицаОС.Найти(СтрокаРаспределения.ОбъектУчета,"ОсновноеСредство");		
			Если СтрокаОС <> Неопределено Тогда
				СтрокаОС.АмортизацияЗаМесяцБУ = СтрокаОС.АмортизацияЗаМесяцБУ + СтрокаРаспределения.Сумма;	
				СтрокаОС.СписываемаяСтоимостьБУ = СтрокаОС.СписываемаяСтоимостьБУ - СтрокаРаспределения.Сумма;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Если Реквизиты.НеобходимостьОтраженияВНУ И ТаблицаСтоимостьОСНУ <> Неопределено Тогда
		Если ТаблицаСтоимостьОСНУ.Количество() > 0  Тогда
			ЗаполнитьЗначенияСвойств(ТаблицаОС[0], ТаблицаСтоимостьОСНУ[0],"ПризнакФА");
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТаблицаОС;

КонецФункции

Функция  ПодготовитьТаблицуСписываемойСтоимостиПоНУПриРеструктуризацииОС(Реквизиты, ТаблицаПоИсходномуОС, ТаблицаСтоимостьОСНУ)Экспорт 
	
	Если НЕ Реквизиты[0].НеобходимостьОтраженияВНУ Тогда
		Возврат ТаблицаСтоимостьОСНУ;
	КонецЕсли;
	
	Если ТаблицаСтоимостьОСНУ = Неопределено Тогда
		Возврат ТаблицаСтоимостьОСНУ;
	КонецЕсли;
	
	//определим стоимость с видом учета ВР
	СтрокаСтоимостиВР = ТаблицаСтоимостьОСНУ.Найти(Справочники.ВидыУчетаНУ.ВР, "ВидУчетаНУ");
	СписываемаяСтоимостьВР = ?(СтрокаСтоимостиВР = Неопределено, 0, СтрокаСтоимостиВР.СтоимостьНУ) - ТаблицаПоИсходномуОС[0].АмортизацияЗаМесяцБУ;
	
	//определим стоимость с видом учета ПР
	СписываемаяСтоимостьПР = 0;
	Для Каждого СтрокаСтоимостиВА Из ТаблицаСтоимостьОСНУ Цикл
		Если (СтрокаСтоимостиВА.ВидУчетаНУ <> Справочники.ВидыУчетаНУ.НУ) И (СтрокаСтоимостиВА.ВидУчетаНУ <> Справочники.ВидыУчетаНУ.ВР) Тогда
			СписываемаяСтоимостьПР = СписываемаяСтоимостьПР + СтрокаСтоимостиВА.СтоимостьНУ;
		КонецЕсли;	
	КонецЦикла;	
	
	ТаблицаСписываемойСтоимостиПоНУ = Новый ТаблицаЗначений;
	ТаблицаСписываемойСтоимостиПоНУ.Колонки.Добавить("СписываемаяСтоимостьПР",ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаСписываемойСтоимостиПоНУ.Колонки.Добавить("СписываемаяСтоимостьВР",ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));

	НоваяСтрокаСтоимостиНУ = ТаблицаСписываемойСтоимостиПоНУ.Добавить();
	НоваяСтрокаСтоимостиНУ.СписываемаяСтоимостьПР =  СписываемаяСтоимостьПР;
	НоваяСтрокаСтоимостиНУ.СписываемаяСтоимостьВР =  СписываемаяСтоимостьВР;
	

	Возврат  ТаблицаСписываемойСтоимостиПоНУ;
	
КонецФункции

Процедура ПроверитьКорректностьСуммДокументаРеструктуризацияОС(ПараметрыПроведения, ТаблицаПоИсходномуОС, Отказ) Экспорт
	
	Если ТаблицаПоИсходномуОС.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = ПараметрыПроведения.Реквизиты[0];
	
	///////////////////////////////////////////////////////////////////////////////////////
	// проверим по БУ
	СтрокаИсхОС = ТаблицаПоИсходномуОС[0];
	
	Если Реквизиты.ВидОперации = Перечисления.ВидыОперацийРеструктуризацияОС.ЧастичноеСписание Тогда
		СтоимостьИсхОС = Реквизиты.СтоимостьЧастичногоСписания;
	Иначе
		СтоимостьИсхОС = СтрокаИсхОС.СтоимостьБУ - СтрокаИсхОС.АмортизацияБУ - СтрокаИсхОС.АмортизацияЗаМесяцБУ;
	КонецЕсли;
	
	СтоимостьСоставляющих = ?(Реквизиты.ЕстьОС,ПараметрыПроведения.ТаблицаПоНовымОС.Итог("СтоимостьБУ"),0) + ?(Реквизиты.ЕстьТовары,ПараметрыПроведения.ТаблицаПоТоварам.Итог("Сумма"),0) + ?(Реквизиты.ЕстьПрочее, ПараметрыПроведения.ТаблицаПрочее.Итог("Сумма"), 0);
	
	Если СтоимостьИсхОС > СтоимостьСоставляющих Тогда
		Отказ = Истина;
		Если Реквизиты.ВидОперации = Перечисления.ВидыОперацийРеструктуризацияОС.ЧастичноеСписание Тогда
			ТекстОшибки = НСтр("ru = 'БУ: Стоимость частичного списания (%1) превышает сумму составляющих активов (%2)'");
		Иначе
			ТекстОшибки = НСтр("ru = 'БУ: Стоимость основного средства (%1) превышает сумму составляющих активов (%2)'");
		КонецЕсли;
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, Строка(СтоимостьИсхОС), Строка(СтоимостьСоставляющих));
		
		ОбщегоНазначенияБККлиентСервер.СообщитьОбОшибке(ТекстОшибки, Отказ);
		
	ИначеЕсли СтоимостьИсхОС < СтоимостьСоставляющих Тогда
		Отказ = Истина;
		Если Реквизиты.ВидОперации = Перечисления.ВидыОперацийРеструктуризацияОС.ЧастичноеСписание Тогда
			ТекстОшибки = НСтр("ru = 'БУ: Сумма составляющих активов (%1) превышает стоимость частичного списания (%2)'");
		Иначе
			ТекстОшибки = НСтр("ru = 'БУ: Сумма составляющих активов (%1) превышает стоимость основного средства (%2)'");
		КонецЕсли;
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, Строка(СтоимостьСоставляющих), СокрЛП(Строка(СтоимостьИсхОС)));
		
		ОбщегоНазначенияБККлиентСервер.СообщитьОбОшибке(ТекстОшибки, Отказ);
		
	КонецЕсли;
	
	Если Реквизиты.ВидОперации = Перечисления.ВидыОперацийРеструктуризацияОС.ЧастичноеСписание И Реквизиты.ЛиквидационнаяСтоимостьЧастичногоСписания > СтрокаИсхОС.ЛиквидационнаяСтоимостьБУ Тогда
		Отказ = Истина;
		Если Реквизиты.ВидОперации = Перечисления.ВидыОперацийРеструктуризацияОС.ЧастичноеСписание Тогда
			ТекстОшибки = НСтр("ru = 'БУ: Ликвидационная стоимость частичного списания (%1) превышает ликвидационную стоимость актива (%2)'");
		Иначе
			ТекстОшибки = НСтр("ru = 'БУ: Ликвидационная стоимость основного средства (%1) превышает ликвидационную стоимость актива (%2)'");
		КонецЕсли;
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, Строка(Реквизиты.ЛиквидационнаяСтоимостьЧастичногоСписания), Строка(СтрокаИсхОС.ЛиквидационнаяСтоимостьБУ));
		
		ОбщегоНазначенияБККлиентСервер.СообщитьОбОшибке(ТекстОшибки, Отказ);
		
	КонецЕсли;

	///////////////////////////////////////////////////////////////////////////////////////
	// проверим по НУ
	Если Не Реквизиты.НеобходимостьОтраженияВНУ Тогда
		Возврат;
	КонецЕсли;	
	
	Если Реквизиты.ВидОперации = Перечисления.ВидыОперацийРеструктуризацияОС.ЧастичноеСписание Тогда
		СтоимостьИсхОСНУ = Реквизиты.СтоимостьЧастичногоСписанияНУ;
	Иначе
		СтрокаСтоимостьВА_НУ = ТаблицаПоИсходномуОС.Найти(Справочники.ВидыУчетаНУ.НУ, "ВидУчетаНУ");
		СтоимостьИсхОСНУ = ?(СтрокаСтоимостьВА_НУ = Неопределено, 0, СтрокаСтоимостьВА_НУ.СтоимостьНУ);
	КонецЕсли;	
	
	СтоимостьСоставляющихНУ = ?(Реквизиты.ЕстьОС,ПараметрыПроведения.ТаблицаПоНовымОС.Итог("СтоимостьНУ"),0) + ?(Реквизиты.ЕстьТовары,ПараметрыПроведения.ТаблицаПоТоварам.Итог("СуммаНУ"),0) + ?(Реквизиты.ЕстьПрочее, ПараметрыПроведения.ТаблицаПрочее.Итог("СуммаНУ"), 0);

	Если СтоимостьИсхОСНУ > СтоимостьСоставляющихНУ Тогда
		Отказ = Истина;
		Если Реквизиты.ВидОперации = Перечисления.ВидыОперацийРеструктуризацияОС.ЧастичноеСписание Тогда
			ТекстОшибки = НСтр("ru = 'НУ: Стоимость частичного списания (%1) превышает сумму составляющих активов (%2)'");
		Иначе
			ТекстОшибки = НСтр("ru = 'НУ: Стоимость основного средства (%1) превышает сумму составляющих активов (%2)'");
		КонецЕсли;
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, Строка(СтоимостьИсхОСНУ), Строка(СтоимостьСоставляющихНУ));
		
		ОбщегоНазначенияБККлиентСервер.СообщитьОбОшибке(ТекстОшибки, Отказ);
		
	ИначеЕсли СтоимостьИсхОСНУ < СтоимостьСоставляющихНУ Тогда
		Отказ = Истина;
		Если Реквизиты.ВидОперации = Перечисления.ВидыОперацийРеструктуризацияОС.ЧастичноеСписание Тогда
			ТекстОшибки = НСтр("ru = 'НУ: Сумма составляющих активов (%1) превышает стоимость частичного списания (%2)'");
		Иначе
			ТекстОшибки = НСтр("ru = 'НУ: Сумма составляющих активов (%1) превышает стоимость основного средства (%2)'");
		КонецЕсли;
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, Строка(СтоимостьСоставляющихНУ), Строка(СтоимостьИсхОСНУ));
		
		ОбщегоНазначенияБККлиентСервер.СообщитьОбОшибке(ТекстОшибки, Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПодготовитьТаблицуПараметрыАмортизацииЧастичногоСписания(ТаблицаОС,ТаблицаАмортизацииОС) Экспорт
	
	Если ТаблицаАмортизацииОС = Неопределено ИЛИ ТаблицаОС = Неопределено Тогда
		Возврат ТаблицаОС;
	КонецЕсли;
	
	Для Каждого СтрокаРаспределения ИЗ ТаблицаАмортизацииОС Цикл	
		
		СтрокаОС = ТаблицаОС.Найти(СтрокаРаспределения.ОбъектУчета,"ОсновноеСредство");		
		Если СтрокаОС <> Неопределено Тогда
			СтрокаОС.СтоимостьДляВычисленияАмортизации = СтрокаОС.СтоимостьДляВычисленияАмортизации - СтрокаРаспределения.Сумма;							
		КонецЕсли;
		
	КонецЦикла;

	Возврат ТаблицаОС;

КонецФункции

Функция ПодготовитьПараметрыРаспределенияПереоценкиОС(ТаблицаРеквизиты, ТаблицаПереоценкаВА, ТаблицаОС)

	Параметры = Новый Структура;
	
	СписокОбязательныхКолонок = ""
    + "ОсновноеСредство,"  
	+ "СтоимостьБУ,"  
	+ "СуммаПереоценкиСтоимости,"                   
	+ "СуммаПереоценкиАмортизации"                     
	;
	Параметры.Вставить("ТаблицаОС",
		ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаОС, СписокОбязательныхКолонок));

	СписокОбязательныхКолонок = ""
	+ "Регистратор,"                  	 // <ДокументСсылка.*> - документ-регистратор движений
	+ "Период,"                       	 // <Дата> - период движений - дата документа
	+ "ИсходноеОсновноеСредство,"        // <СправочникСсылка.ОсновныеСредства> - основное средство
	+ "Организация,"  
	+ "НомерЖурнала,"                     // <СправочникСсылка.Организация> - организация, в которую приходуется товар	
	+ "СтруктурноеПодразделение"  	     // <СправочникСсылка.ПодразделенияОрганизации> - СП, указанное в документе
    ;
	
	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));
		
	СписокОбязательныхКолонок = ""
    + "ВнеоборотныйАктив,"  
	+ "СуммаПереоценкиСтоимости,"  
	+ "СуммаПереоценкиАмортизации," 
	+ "СписываемаяСтоимостьБУ," 
	+ "ДокументПереоценки,"   
	+ "СчетРасходовБУ,"  
	+ "СубконтоРасходовБУ1,"   
	+ "СубконтоРасходовБУ2," 
	+ "СубконтоРасходовБУ3,"   
	+ "СчетДоходовБУ,"  
	+ "СубконтоДоходовБУ1,"   
	+ "СубконтоДоходовБУ2," 
	+ "СубконтоДоходовБУ3,"   
	;
	
	Параметры.Вставить("ТаблицаПереоценкаВА",
		ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаПереоценкаВА, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Функция ПодготовитьПараметрыСписанияНакопленнойАмортизации(ТаблицаОС, ТаблицаРеквизиты)

	Параметры = Новый Структура;
	
	СписокОбязательныхКолонок = ""
    + "ОсновноеСредство,"          
	+ "АмортизацияБУ,"                   
	+ "АмортизацияЗаМесяцБУ,"                     
	+ "СчетУчетаБУ,"
	+ "СчетНачисленияАмортизацииБУ," 	                  
	+ "ПодразделениеОрганизации,"
	+ "МОЛОрганизации"
	;

	Параметры.Вставить("ТаблицаОС",
		ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаОС, СписокОбязательныхКолонок));

	СписокОбязательныхКолонок = ""
	+ "Регистратор,"                  	 // <ДокументСсылка.*> - документ-регистратор движений
	+ "Период,"                       	 // <Дата> - период движений - дата документа
	+ "Организация,"  
	+ "НомерЖурнала,"                     // <СправочникСсылка.Организация> - организация, в которую приходуется товар	
	+ "СтруктурноеПодразделение,"  	     // <СправочникСсылка.ПодразделенияОрганизации> - СП, указанное в документе
	+ "ВедетсяАналитическийУчетОСПоМОЛ,"
	+ "ВедетсяАналитическийУчетОСПоПодразделениям"
    ;                               
	
	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Функция ПодготовитьПараметрыСписанияОстаточнойСтоимости(ТаблицаРеквизиты, ТаблицаОС, ТаблицаПоНовымОС, ТаблицаПрочее)

	Параметры = Новый Структура;
	
	СписокОбязательныхКолонок = ""
    + "ОсновноеСредство,"          
	+ "АмортизацияБУ,"                   
	+ "АмортизацияЗаМесяцБУ,"                     
	+ "СчетУчетаБУ,"
	+ "СчетНачисленияАмортизацииБУ," 	                  
	+ "ПодразделениеОрганизации,"
	+ "МОЛОрганизации"
	;

	Параметры.Вставить("ТаблицаОС",
		ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаОС, СписокОбязательныхКолонок));

	СписокОбязательныхКолонок = ""
	+ "Регистратор,"                  	 // <ДокументСсылка.*> - документ-регистратор движений
	+ "Период,"                       	 // <Дата> - период движений - дата документа
	+ "Организация,"  
	+ "НомерЖурнала,"                     // <СправочникСсылка.Организация> - организация, в которую приходуется товар	
	+ "СтруктурноеПодразделение,"  	     // <СправочникСсылка.ПодразделенияОрганизации> - СП, указанное в документе
	+ "ВедетсяАналитическийУчетОСПоМОЛ,"
	+ "ВедетсяАналитическийУчетОСПоПодразделениям"
    ;                               
	
	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

		
	СписокОбязательныхКолонок = ""
	+ "ОсновноеСредство,"                  	
	+ "СчетУчетаБУ,"
	+ "ПодразделениеОрганизации,"
	+ "СтоимостьБУ,"
	+ "МОЛОрганизации"
    ;                               
	
	Параметры.Вставить("ТаблицаПоНовымОС",
		ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаПоНовымОС, СписокОбязательныхКолонок));

		
	СписокОбязательныхКолонок = ""
	+ "СчетСписанияБУ,"                  	
	+ "СубконтоСписанияБУ1,"
	+ "СубконтоСписанияБУ2," 	                  
	+ "СубконтоСписанияБУ3,"
	+ "Сумма"
	;                               
	
	Параметры.Вставить("ТаблицаПрочее",
		ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаПрочее, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Функция ПодготовитьТаблицуОбъектовНалоговогоУчетаФА(ТаблицаОбъектыНалоговогоУчетаФА, ТаблицаРеквизиты) Экспорт
	
	Если ТаблицаОбъектыНалоговогоУчетаФА = Неопределено Тогда
		Возврат ТаблицаОбъектыНалоговогоУчетаФА;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизиты[0];
	
	Если Реквизиты.ВидОперации = Перечисления.ВидыОперацийРеструктуризацияОС.ЧастичноеСписание 
		ИЛИ НЕ Реквизиты.СнятьСУчетаПоНалогам Тогда		
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ТаблицаОбъектыНалоговогоУчетаФА;

КонецФункции

Процедура СформироватьДвиженияРаспределенияПереоценкиОС(ТаблицаРеквизиты, ТаблицаПереоценкиВА, ТаблицаОС, Движения, Отказ) Экспорт
	
	Если ТаблицаОС = Неопределено ИЛИ ТаблицаРеквизиты = Неопределено ИЛИ  ТаблицаПереоценкиВА = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Параметры = ПодготовитьПараметрыРаспределенияПереоценкиОС(ТаблицаРеквизиты, ТаблицаПереоценкиВА, ТаблицаОС) ;
	
	Если Параметры.ТаблицаПереоценкаВА.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = Параметры.Реквизиты[0];
	СтрокаПереоценки = Параметры.ТаблицаПереоценкаВА[0];
	
	//Распределение суммы по таблице
	РаспределениеСтоимостиПереоценки = ОбщегоНазначенияБККлиентСервер.РаспределитьПропорционально(СтрокаПереоценки.СуммаПереоценкиСтоимости,ТаблицаОС.ВыгрузитьКолонку("СтоимостьБУ"));
	Если Не РаспределениеСтоимостиПереоценки = Неопределено Тогда
		ТаблицаОС.ЗагрузитьКолонку(РаспределениеСтоимостиПереоценки,"СуммаПереоценкиСтоимости");
	КонецЕсли;
	
	//Распределение суммы по таблице
	РаспределениеСтоимостиАмортизации = ОбщегоНазначенияБККлиентСервер.РаспределитьПропорционально(СтрокаПереоценки.СуммаПереоценкиАмортизации,ТаблицаОС.ВыгрузитьКолонку("СтоимостьБУ"));
	Если Не РаспределениеСтоимостиАмортизации = Неопределено Тогда
		ТаблицаОС.ЗагрузитьКолонку(РаспределениеСтоимостиАмортизации,"СуммаПереоценкиАмортизации");
	КонецЕсли;
	
	КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	Для Каждого НовоеОС Из Параметры.ТаблицаОС Цикл
		
		Если НовоеОС.СуммаПереоценкиСтоимости <> 0 ИЛИ НовоеОС.СуммаПереоценкиАмортизации <> 0 Тогда
			ДвижениеПереоценкаВА = Движения.ПереоценкаВнеоборотныхАктивов.Добавить();
			ДвижениеПереоценкаВА.Период			   			= Реквизиты.Период;
			ДвижениеПереоценкаВА.Организация 	    		= Реквизиты.Организация;
			ДвижениеПереоценкаВА.СтруктурноеПодразделение	= Реквизиты.СтруктурноеПодразделение;
			
			ДвижениеПереоценкаВА.ВнеоборотныйАктив  = НовоеОС.ОсновноеСредство;
			ДвижениеПереоценкаВА.ДокументПереоценки = СтрокаПереоценки.ДокументПереоценки;
			
			Если НовоеОС.СуммаПереоценкиСтоимости > 0 Тогда
				ДвижениеПереоценкаВА.ВидДвижения = ВидДвиженияНакопления.Приход;
				ДвижениеПереоценкаВА.СуммаПереоценкиСтоимости   = НовоеОС.СуммаПереоценкиСтоимости;
				ДвижениеПереоценкаВА.СуммаПереоценкиАмортизации = НовоеОС.СуммаПереоценкиАмортизации;
				
				// сформируем проводки по переносурезерва
				СуммаРезерва = НовоеОС.СуммаПереоценкиСтоимости - (- НовоеОС.СуммаПереоценкиАмортизации);
				
				Если СуммаРезерва <> 0 Тогда
					Проводка = Движения.Типовой.Добавить();
					Проводка.Период       = Реквизиты.Период;
					Проводка.Организация  = Реквизиты.Организация;
					Проводка.Содержание   = НСтр("ru = 'Перенос резерва переоценки'", КодОсновногоЯзыка);
					Проводка.НомерЖурнала = Реквизиты.НомерЖурнала;
					Проводка.Сумма        = СуммаРезерва;
					
					Проводка.СчетДт = ПланыСчетов.Типовой.РезервНаПереоценкуОсновныхСредств;		
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", СтрокаПереоценки.ВнеоборотныйАктив);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ВидыИзмененийВСобственномКапитале", Перечисления.ВидыИзмененийВСобственномКапитале.ПереоценкаОсновныхСредств);
					
					Проводка.СчетКт = ПланыСчетов.Типовой.РезервНаПереоценкуОсновныхСредств;		
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", НовоеОС.ОсновноеСредство);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ВидыИзмененийВСобственномКапитале", Перечисления.ВидыИзмененийВСобственномКапитале.ПереоценкаОсновныхСредств);
					
					ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(Проводка, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);				
				КонецЕсли;	
				
			Иначе
				ДвижениеПереоценкаВА.ВидДвижения = ВидДвиженияНакопления.Расход;
				ДвижениеПереоценкаВА.СуммаПереоценкиСтоимости   = - НовоеОС.СуммаПереоценкиСтоимости;
				ДвижениеПереоценкаВА.СуммаПереоценкиАмортизации = - НовоеОС.СуммаПереоценкиАмортизации;
				
				// для убытков нужно сформировать проводки по счетам расходов
				
				// проводка по переносу убытка от переоценки стоимости
				Если НовоеОС.СуммаПереоценкиСтоимости < 0 Тогда
					Проводка = Движения.Типовой.Добавить();
					Проводка.Период       = Реквизиты.Период;
					Проводка.Организация  = Реквизиты.Организация;
					Проводка.Содержание   = НСтр("ru = 'Перенос убытка от переоценки стоимости'", КодОсновногоЯзыка);
					Проводка.НомерЖурнала = Реквизиты.НомерЖурнала;
					Проводка.Сумма        = -НовоеОС.СуммаПереоценкиСтоимости;
					
					Проводка.СчетДт = СтрокаПереоценки.СчетРасходовБУ;
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаПереоценки.СубконтоРасходовБУ1);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаПереоценки.СубконтоРасходовБУ2);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтрокаПереоценки.СубконтоРасходовБУ3);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства",   НовоеОС.ОсновноеСредство);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ВнеоборотныеАктивы", НовоеОС.ОсновноеСредство);
					
					Проводка.СчетКт = СтрокаПереоценки.СчетРасходовБУ;
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтрокаПереоценки.СубконтоРасходовБУ1);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтрокаПереоценки.СубконтоРасходовБУ2);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, СтрокаПереоценки.СубконтоРасходовБУ3);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства",   Реквизиты.ОсновноеСредство);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ВнеоборотныеАктивы", Реквизиты.ОсновноеСредство);
					
					ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(Проводка, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);				
				КонецЕсли;	
				
				// проводка по переносу дохода от переоценки амортизаци
				Если НовоеОС.СуммаПереоценкиАмортизации <> 0 Тогда
					Проводка = Движения.Типовой.Добавить();
					Проводка.Период       = Реквизиты.Период;
					Проводка.Организация  = Реквизиты.Организация;
					Проводка.Содержание   = НСтр("ru = 'Перенос дохода от переоценки амортизации'", КодОсновногоЯзыка);
					Проводка.НомерЖурнала = Реквизиты.НомерЖурнала;
					Проводка.Сумма        = НовоеОС.СуммаПереоценкиАмортизации;
					
					Проводка.СчетДт = СтрокаПереоценки.СчетДоходовБУ;
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаПереоценки.СубконтоДоходовБУ1);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаПереоценки.СубконтоДоходовБУ2);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтрокаПереоценки.СубконтоДоходовБУ3 );
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства",   Реквизиты.ОсновноеСредство);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ВнеоборотныеАктивы", Реквизиты.ОсновноеСредство);
					
					Проводка.СчетКт = СтрокаПереоценки.СчетДоходовБУ;
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтрокаПереоценки.СубконтоДоходовБУ1);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтрокаПереоценки.СубконтоДоходовБУ2);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, СтрокаПереоценки.СубконтоДоходовБУ3 );
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства",   НовоеОС.ОсновноеСредство);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ВнеоборотныеАктивы", НовоеОС.ОсновноеСредство);
					
					ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(Проводка, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);				
				КонецЕсли;	
			КонецЕсли;
		КонецЕсли;	
	КонецЦикла;				
	
	Движения.Типовой.Записывать = Истина;
	Движения.ПереоценкаВнеоборотныхАктивов.Записывать = Истина;

КонецПроцедуры

Процедура СформироватьДвиженияПоСписаниюНакопленнойАмортизации(ТаблицаРеквизиты, ТаблицаОС, Движения, Отказ) Экспорт
	
	Если ТаблицаОС = Неопределено ИЛИ ТаблицаОС.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыСписанияНакопленнойАмортизации(ТаблицаОС, ТаблицаРеквизиты);
	
	Если Параметры.ТаблицаОС.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = Параметры.Реквизиты[0];
	
	Для Каждого СтрокаОС Из Параметры.ТаблицаОС Цикл
		
		СуммаПроводки = СтрокаОС.АмортизацияБУ + СтрокаОС.АмортизацияЗаМесяцБУ;
		Если СуммаПроводки <> 0  Тогда
			
			Проводка = Движения.Типовой.Добавить();
			
			Проводка.НомерЖурнала = Реквизиты.НомерЖурнала;
			Проводка.Период       = Реквизиты.Период;
			Проводка.Регистратор  = Реквизиты.Регистратор;
			Проводка.Организация  = Реквизиты.Организация;
			Проводка.Содержание   = НСтр("ru ='Списана амортизация'", ОбщегоНазначения.КодОсновногоЯзыка());
			Проводка.Сумма        = СуммаПроводки;
			
			Проводка.СчетКт       = СтрокаОС.СчетУчетаБУ;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", СтрокаОС.ОсновноеСредство);
			
			// на тот случай если списывается со счета, где субконто "Внеоборотные активы" а не "Основные средства", например со счета 1510
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ВнеоборотныеАктивы", СтрокаОС.ОсновноеСредство);
			
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
			Проводка, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);
			
			Проводка.СчетДт = СтрокаОС.СчетНачисленияАмортизацииБУ;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", СтрокаОС.ОсновноеСредство);
			
			
			Если Реквизиты.ВедетсяАналитическийУчетОСПоПодразделениям Тогда
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Подразделения", СтрокаОС.ПодразделениеОрганизации);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Подразделения", СтрокаОС.ПодразделениеОрганизации);
			КонецЕсли;
			
			Если Реквизиты.ВедетсяАналитическийУчетОСПоМОЛ  Тогда
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "РаботникиОрганизаций", СтрокаОС.МОЛОрганизации);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "РаботникиОрганизаций", СтрокаОС.МОЛОрганизации);
			КонецЕсли;	
			
		КонецЕсли;
	КонецЦикла;
	
	Движения.Типовой.Записывать = Истина;
		
КонецПроцедуры

Процедура СформироватьДвиженияПоСписаниюОстаточнойСтоимости(ТаблицаРеквизиты, ТаблицаОС, ТаблицаПоНовымОС, ТаблицаПрочее, Движения, Отказ) Экспорт

	Если ТаблицаОС = Неопределено ИЛИ ТаблицаОС.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ТаблицаПоНовымОС = Неопределено И ТаблицаПрочее = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Параметры = ПодготовитьПараметрыСписанияОстаточнойСтоимости(ТаблицаРеквизиты, ТаблицаОС, ТаблицаПоНовымОС, ТаблицаПрочее);
	
		
	Реквизиты = Параметры.Реквизиты[0];
	СтрокаИсходногоОС = ТаблицаОС[0];
	
		/////////////////////////////////////////////////////////////////////
	// Списание остаточной стоимости.
	// Особенность в списании остаточной стоимости в том, что:
	// остаточная стоимость ОС списывается не одной проводкой, она дробится на составляющие - 
	// - ОС, ТМЗ и пр. Часть стоимости, которая приходится на другие ОС и на произвольные счета,
	// списывается здесь. Остальная часть (списание на ТМЗ) формируется в документе ОприходованиеТМЗ.
	
	Для Каждого СтрокаОС Из Параметры.ТаблицаПоНовымОС Цикл
		СуммаПроводки = СтрокаОС.СтоимостьБУ;
	  
	    Если СуммаПроводки <> 0 Тогда

	    	Проводка = Движения.Типовой.Добавить();
	    	
	    	Проводка.Период       = Реквизиты.Период;
	    	Проводка.Организация  = Реквизиты.Организация;
	    	Проводка.Содержание   = НСтр("ru ='Списана ост. стоимость'", ОбщегоНазначения.КодОсновногоЯзыка());
	    	Проводка.НомерЖурнала = Реквизиты.НомерЖурнала;
	    	Проводка.Сумма        = СуммаПроводки;

			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				Проводка, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);
		
	    	Проводка.СчетДт = СтрокаОС.СчетУчетаБУ;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", СтрокаОС.ОсновноеСредство);
			
			Проводка.СчетКт = СтрокаИсходногоОС.СчетУчетаБУ;
	    	ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", СтрокаИсходногоОС.ОсновноеСредство);

			Если Реквизиты.ВедетсяАналитическийУчетОСПоПодразделениям Тогда
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Подразделения", СтрокаОС.ПодразделениеОрганизации);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Подразделения", СтрокаИсходногоОС.ПодразделениеОрганизации);
			КонецЕсли;
			
			Если Реквизиты.ВедетсяАналитическийУчетОСПоМОЛ  Тогда
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "РаботникиОрганизаций", СтрокаОС.МОЛОрганизации);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "РаботникиОрганизаций", СтрокаИсходногоОС.МОЛОрганизации);
			КонецЕсли;	
			
	    КонецЕсли;

	КонецЦикла;
	
	Для Каждого СтрокаПрочее Из Параметры.ТаблицаПрочее Цикл
		СуммаПроводки = СтрокаПрочее.Сумма;
	  
	    Если СуммаПроводки <> 0 Тогда

	    	Проводка = Движения.Типовой.Добавить();
	    	
	    	Проводка.Период       = Реквизиты.Период;
	    	Проводка.Организация  = Реквизиты.Организация;
	    	Проводка.Содержание   = НСтр("ru ='Списана ост. стоимость'", ОбщегоНазначения.КодОсновногоЯзыка());
	    	Проводка.НомерЖурнала = Реквизиты.НомерЖурнала;
	    	Проводка.Сумма        = СуммаПроводки;

			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				Проводка, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);

	    	Проводка.СчетДт = СтрокаПрочее.СчетСписанияБУ;
			
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаПрочее.СубконтоСписанияБУ1);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаПрочее.СубконтоСписанияБУ2);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтрокаПрочее.СубконтоСписанияБУ3);
			
	    	Проводка.СчетКт = СтрокаИсходногоОС.СчетУчетаБУ;
	    	ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", СтрокаИсходногоОС.ОсновноеСредство);
			
			Если Реквизиты.ВедетсяАналитическийУчетОСПоПодразделениям Тогда
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Подразделения", СтрокаИсходногоОС.ПодразделениеОрганизации);
			КонецЕсли;
			
			Если Реквизиты.ВедетсяАналитическийУчетОСПоМОЛ  Тогда
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "РаботникиОрганизаций", СтрокаИсходногоОС.МОЛОрганизации);
			КонецЕсли;	
	
	    КонецЕсли;
		
	КонецЦикла;
	
	Движения.Типовой.Записывать = Истина;

КонецПроцедуры		

Процедура СформироватьДвижениеСписанияСтоимостиВыбытияПриРеструктуризацииОСНУ(ТаблицаИсходногоОС,ТаблицаСписываемойСтоимостиПоНУ, ТаблицаПоОС, ТаблицаПоТоварам, ТаблицаПоПрочее, ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Если ТаблицаСписываемойСтоимостиПоНУ = Неопределено  Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизиты[0];
	
	Если Не Реквизиты.НеобходимостьОтраженияВНУ Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаФА =  ТаблицаИсходногоОС[0];
	СтрокаСписываемойСтоимостиПоНУ = ТаблицаСписываемойСтоимостиПоНУ[0];
	
	КодОсновногоЯзыка =  ОбщегоНазначения.КодОсновногоЯзыка();
	
	Если СтрокаФА.ПризнакФА Тогда
		СодержаниеНУ = НСтр("ru = 'Списание фиксированного актива'", КодОсновногоЯзыка);
	Иначе
		СодержаниеНУ = НСтр("ru = 'Списание внеоборотного актива'", КодОсновногоЯзыка);
	КонецЕсли;
	
	СписаннаяСтоимостьВР = 0;
	СписаннаяСтоимостьПР = 0;
	СписываемаяСтоимостьВР =  СтрокаСписываемойСтоимостиПоНУ.СписываемаяСтоимостьВР *  СтрокаФА.КоэффициентПереоценки ;
	СписываемаяСтоимостьПР =  СтрокаСписываемойСтоимостиПоНУ.СписываемаяСтоимостьПР *  СтрокаФА.КоэффициентПереоценки;

	СчетКт = ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьСчетУчетаНУВнеоборотногоАктива(СтрокаФА.ОсновноеСредство, Реквизиты.Организация, Реквизиты.Период);
	
	Если ТаблицаПоОС  <>  Неопределено Тогда
		// списание части стоимости по НУ на основные средства
		Для Каждого СтрокаОС ИЗ ТаблицаПоОС Цикл
			СуммаПроводкиНУ = СтрокаОС.СтоимостьНУ;
			
			Если СуммаПроводкиНУ <> 0 Тогда
				//стоимостный баланс уменьшаем на сумму списания в НУ				
				ПроводкаНУ = Движения.Налоговый.Добавить();
				ПроводкаНУ.Период 		= Реквизиты.Период;
				ПроводкаНУ.Организация 	= Реквизиты.Организация;
				ПроводкаНУ.Содержание 	= СодержаниеНУ;
				
				ПроводкаНУ.СчетКт = СчетКт; 
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "ВнеоборотныеАктивы", СтрокаФА.ОсновноеСредство);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "ВидыДвиженияСтоимостиФА", Перечисления.ВидыДвиженияСтоимостиФА.Выбытие);
				
				ПроводкаНУ.Сумма = СуммаПроводкиНУ;
				ПроводкаНУ.ВидУчетаКт = Справочники.ВидыУчетаНУ.НУ;
				
				// в дебете указываем счет учета для нового (составляющего) ОС
				ПроводкаНУ.СчетДт = СтрокаОС.СчетУчетаНУ;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "ВнеоборотныеАктивы", СтрокаОС.ОсновноеСредство);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "ВидыДвиженияСтоимостиФА", Перечисления.ВидыДвиженияСтоимостиФА.Поступление);
				
				ПроводкаНУ.ВидУчетаДт = Справочники.ВидыУчетаНУ.НУ;
				
				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(ПроводкаНУ, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);
				
			КонецЕсли;
			
			// спишем ВР и ПР в стоимости ФА
			Если СписываемаяСтоимостьВР <> 0 Тогда
				// определим списываемую сумму ВР пропорционально ост. стоимости НУ при полном списании
				// или пропорционально списываемой стоимости НУ при частичном списании
				
				СуммаПроводки = Окр((СтрокаОС.СтоимостьБУ / СтрокаФА.СписываемаяСтоимостьБУ) * СписываемаяСтоимостьВР, 1);
				
				// для устранения отклонений от округлений, для последней строки спишем весь остаток
				Если ТаблицаПоТоварам = Неопределено И ТаблицаПоПрочее= Неопределено Тогда 
					//(ТаблицаПоТоварам.Количество()= 0) И (ТаблицаПоПрочее.Количество() = 0) Тогда
					Если ТаблицаПоОС.Индекс(СтрокаОС) = ТаблицаПоОС.Количество()-1 Тогда
						СуммаПроводки = СписываемаяСтоимостьВР - СписаннаяСтоимостьВР;
					КонецЕсли;
				КонецЕсли;
				
				Если СуммаПроводки <> 0 Тогда
					ПроводкаНУ = Движения.Налоговый.Добавить();
					ПроводкаНУ.Период 		= Реквизиты.Период;
					ПроводкаНУ.Организация 	= Реквизиты.Организация;
					ПроводкаНУ.Содержание 	= НСтр("ru = 'Погашение разниц'", КодОсновногоЯзыка);
					
					ПроводкаНУ.СчетКт = СчетКт;
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "ВнеоборотныеАктивы", СтрокаФА.ОсновноеСредство);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "ВидыДвиженияСтоимостиФА", Перечисления.ВидыДвиженияСтоимостиФА.Выбытие);
					
					ПроводкаНУ.Сумма = СуммаПроводки;
					ПроводкаНУ.ВидУчетаКт = Справочники.ВидыУчетаНУ.ВР;
					
					ПроводкаНУ.СчетДт = СтрокаОС.СчетУчетаНУ;
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "ВнеоборотныеАктивы", СтрокаОС.ОсновноеСредство);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "ВидыДвиженияСтоимостиФА", Перечисления.ВидыДвиженияСтоимостиФА.Поступление);
					
					ПроводкаНУ.ВидУчетаДт = Справочники.ВидыУчетаНУ.ВР;
					
					ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(ПроводкаНУ, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);
				КонецЕсли;	
				
				// увеличим списанную стоимость ВР
				СписаннаяСтоимостьВР = СписаннаяСтоимостьВР + СуммаПроводки;
			КонецЕсли;

			Если СписываемаяСтоимостьПР <> 0 Тогда
				СуммаПроводки =Окр((СтрокаОС.СтоимостьБУ / СтрокаФА.СписываемаяСтоимостьБУ) * СписываемаяСтоимостьПР, 1);
				
				Если ТаблицаПоТоварам = Неопределено И ТаблицаПоПрочее= Неопределено Тогда 
					
					//	Если (ТаблицаПоТоварам.Количество()= 0) И (ТаблицаПоПрочее.Количество() = 0) Тогда
					Если ТаблицаПоОС.Индекс(СтрокаОС) = ТаблицаПоОС.Количество()-1 Тогда
						СуммаПроводки = СписываемаяСтоимостьПР - СписаннаяСтоимостьПР;
					КонецЕсли;
				КонецЕсли;
				
				Если СуммаПроводки <> 0 Тогда
					ПроводкаНУ = Движения.Налоговый.Добавить();
					ПроводкаНУ.Период 		= Реквизиты.Период;
					ПроводкаНУ.Организация 	= Реквизиты.Организация;
					ПроводкаНУ.Содержание 	= НСтр("ru = 'Погашение разниц'", КодОсновногоЯзыка);
					
					ПроводкаНУ.СчетКт = СчетКт;
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "ВнеоборотныеАктивы", СтрокаФА.ОсновноеСредство);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "ВидыДвиженияСтоимостиФА", Перечисления.ВидыДвиженияСтоимостиФА.Выбытие);
					
					ПроводкаНУ.Сумма = СуммаПроводки;
					ПроводкаНУ.ВидУчетаКт = Справочники.ВидыУчетаНУ.ПР;
					
					ПроводкаНУ.СчетДт = СтрокаОС.СчетУчетаНУ;
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "ВнеоборотныеАктивы", СтрокаОС.ОсновноеСредство);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "ВидыДвиженияСтоимостиФА", Перечисления.ВидыДвиженияСтоимостиФА.Поступление);
					
					ПроводкаНУ.ВидУчетаДт = Справочники.ВидыУчетаНУ.ПР;
					
					ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(ПроводкаНУ, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);
				КонецЕсли;	
				
				СписаннаяСтоимостьПР = СписаннаяСтоимостьПР + СуммаПроводки;
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;
	
	////////////////////////////////////////// Товары ////////////////////////////////////////////
	
	Если ТаблицаПоТоварам <>  Неопределено Тогда
		// списание части стоимости по НУ, приходящейся на долю товаров
		
		Для Каждого СтрокаТовары ИЗ ТаблицаПоТоварам Цикл
			СуммаПроводкиНУ = СтрокаТовары.СуммаНУ;
			
			Если СуммаПроводкиНУ <> 0 Тогда
				//стоимостный баланс уменьшаем на сумму списания в НУ				
				ПроводкаНУ = Движения.Налоговый.Добавить();
				ПроводкаНУ.Период 		= Реквизиты.Период;
				ПроводкаНУ.Организация 	= Реквизиты.Организация;
				ПроводкаНУ.Содержание 	= СодержаниеНУ;
				
				Если Реквизиты.ВедениеУчетаВременныхРазницБалансовымМетодом Тогда			
					ПроводкаНУ.СчетДт = СтрокаТовары.СчетУчетаНУ;
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "Номенклатура", СтрокаТовары.Номенклатура);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "Склады"		, Реквизиты.Склад);
					Если ПроводкаНУ.СчетДт.Количественный Тогда
						ПроводкаНУ.КоличествоДт =  СтрокаТовары.Количество;
					КонецЕсли;	
					ПроводкаНУ.ВидУчетаДт = Справочники.ВидыУчетаНУ.НУ;
				КонецЕсли;	
				ПроводкаНУ.СчетКт = СчетКт;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "ВнеоборотныеАктивы", СтрокаФА.ОсновноеСредство);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "ВидыДвиженияСтоимостиФА", Перечисления.ВидыДвиженияСтоимостиФА.Выбытие);
				
				ПроводкаНУ.Сумма = СуммаПроводкиНУ;
				ПроводкаНУ.ВидУчетаКт = Справочники.ВидыУчетаНУ.НУ;
				
				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(ПроводкаНУ, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);
			КонецЕсли;	
			
			// спишем ВР и ПР в стоимости ФА

			Если СписываемаяСтоимостьВР <> 0 Тогда
				СуммаПроводки = Окр((СтрокаТовары.Сумма / СтрокаФА.СписываемаяСтоимостьБУ) * СписываемаяСтоимостьВР, 1);
				
				Если ТаблицаПоПрочее = Неопределено Тогда
					//Если ТаблицаПоПрочее.Количество() = 0 Тогда
					Если ТаблицаПоТоварам.Индекс(СтрокаТовары) = ТаблицаПоТоварам.Количество()-1 Тогда
						СуммаПроводки = СписываемаяСтоимостьВР - СписаннаяСтоимостьВР;
					КонецЕсли;
				КонецЕсли;
				
				Если СуммаПроводки <> 0 Тогда
					ПроводкаНУ = Движения.Налоговый.Добавить();
					ПроводкаНУ.Период 		= Реквизиты.Период;
					ПроводкаНУ.Организация 	= Реквизиты.Организация;
					ПроводкаНУ.Содержание 	= НСтр("ru = 'Погашение разниц'", КодОсновногоЯзыка);
					
					ПроводкаНУ.СчетКт = СчетКт;
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "ВнеоборотныеАктивы", СтрокаФА.ОсновноеСредство);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "ВидыДвиженияСтоимостиФА", Перечисления.ВидыДвиженияСтоимостиФА.Выбытие);
					
					ПроводкаНУ.Сумма = СуммаПроводки;
					ПроводкаНУ.ВидУчетаКт = Справочники.ВидыУчетаНУ.ВР;
					
					ПроводкаНУ.СчетДт = СтрокаТовары.СчетУчетаНУ;
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "Номенклатура", Строкатовары.Номенклатура);								
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "Склады"		, Реквизиты.Склад);
					ПроводкаНУ.ВидУчетаДт = Справочники.ВидыУчетаНУ.ВР;
					ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(ПроводкаНУ, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);
				КонецЕсли;	
				
				СписаннаяСтоимостьВР = СписаннаяСтоимостьВР + СуммаПроводки;
			КонецЕсли;
			
			Если СписываемаяСтоимостьПР <> 0 Тогда
				СуммаПроводки = Окр((СтрокаТовары.Сумма / СтрокаФА.СписываемаяСтоимостьБУ) * СписываемаяСтоимостьПР, 1);
				
				Если ТаблицаПоПрочее = Неопределено Тогда
					//Если ТаблицаПоПрочее.Количество() = 0 Тогда
					Если ТаблицаПоТоварам.Индекс(СтрокаТовары) = ТаблицаПоТоварам.Количество()-1 Тогда
						СуммаПроводки = СписываемаяСтоимостьПР - СписаннаяСтоимостьПР;
					КонецЕсли;
				КонецЕсли;
				
				Если СуммаПроводки <> 0 Тогда
					ПроводкаНУ = Движения.Налоговый.Добавить();
					ПроводкаНУ.Период 		= Реквизиты.Период;
					ПроводкаНУ.Организация 	= Реквизиты.Организация;
					ПроводкаНУ.Содержание 	= НСтр("ru = 'Погашение разниц'", КодОсновногоЯзыка);
					
					ПроводкаНУ.СчетКт = СчетКт;
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "ВнеоборотныеАктивы", СтрокаФА.ОсновноеСредство);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "ВидыДвиженияСтоимостиФА", Перечисления.ВидыДвиженияСтоимостиФА.Выбытие);
					
					ПроводкаНУ.Сумма = СуммаПроводки;
					ПроводкаНУ.ВидУчетаКт = Справочники.ВидыУчетаНУ.ПР;
					
					ПроводкаНУ.СчетДт = СтрокаТовары.СчетУчетаНУ;
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "Номенклатура", СтрокаТовары.Номенклатура);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "Склады"		, Реквизиты.Склад);
					
					ПроводкаНУ.ВидУчетаДт = Справочники.ВидыУчетаНУ.ПР;
					
					ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(ПроводкаНУ, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);
				КонецЕсли;	
				
				СписаннаяСтоимостьПР = СписаннаяСтоимостьПР + СуммаПроводки;
				
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;	
	////////////////////////////////////////// Прочие счета ////////////////////////////////////////////
	
	Если ТаблицаПоПрочее <> Неопределено Тогда
		
		Для Каждого СтрокаПрочее ИЗ ТаблицаПоПрочее Цикл
			СуммаПроводкиНУ = СтрокаПрочее.СуммаНУ;
			
			Если СуммаПроводкиНУ <> 0 Тогда
				//стоимостный баланс уменьшаем на сумму списания в НУ				
				ПроводкаНУ = Движения.Налоговый.Добавить();
				ПроводкаНУ.Период 		= Реквизиты.Период;
				ПроводкаНУ.Организация 	= Реквизиты.Организация;
				ПроводкаНУ.Содержание 	= СодержаниеНУ;
				
				ПроводкаНУ.СчетКт = СчетКт;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "ВнеоборотныеАктивы", СтрокаФА.ОсновноеСредство);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "ВидыДвиженияСтоимостиФА", Перечисления.ВидыДвиженияСтоимостиФА.Выбытие);
				
				ПроводкаНУ.Сумма = СуммаПроводкиНУ;
				ПроводкаНУ.ВидУчетаКт = Справочники.ВидыУчетаНУ.НУ;
				
				// в дебете указываем счет списания НУ
				ПроводкаНУ.СчетДт = СтрокаПрочее.СчетСписанияНУ;
				Для Сч = 1 По 3 Цикл
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, Сч, СтрокаПрочее["СубконтоСписанияНУ"+ Сч]);
				КонецЦикла;	
				
				ПроводкаНУ.ВидУчетаДт = Справочники.ВидыУчетаНУ.НУ;
				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(ПроводкаНУ, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);
				
			КонецЕсли;	
			
			// спишем ВР и ПР в стоимости ФА
			Если СписываемаяСтоимостьВР <> 0 Тогда
				СуммаПроводки =  Окр((СтрокаПрочее.Сумма / СтрокаФА.СписываемаяСтоимостьБУ) * СтрокаСписываемойСтоимостиПоНУ.СписываемаяСтоимостьВР, 1);
				
				Если ТаблицаПоПрочее.Индекс(СтрокаПрочее) = ТаблицаПоПрочее.Количество()-1 Тогда
					СуммаПроводки = СписываемаяСтоимостьВР - СписаннаяСтоимостьВР;
				КонецЕсли;
				
				Если СуммаПроводки <> 0 Тогда
					ПроводкаНУ = Движения.Налоговый.Добавить();
					ПроводкаНУ.Период 		= Реквизиты.Период;
					ПроводкаНУ.Организация 	= Реквизиты.Организация;
					ПроводкаНУ.Содержание 	= НСтр("ru = 'Погашение разниц'", КодОсновногоЯзыка);
					
					ПроводкаНУ.СчетКт = СчетКт;
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "ВнеоборотныеАктивы", СтрокаФА.ОсновноеСредство);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "ВидыДвиженияСтоимостиФА", Перечисления.ВидыДвиженияСтоимостиФА.Выбытие);
					
					ПроводкаНУ.Сумма = СуммаПроводки;
					ПроводкаНУ.ВидУчетаКт = Справочники.ВидыУчетаНУ.ВР;
					
					ПроводкаНУ.СчетДт = СтрокаПрочее.СчетСписанияНУ;
					Для Сч = 1 По 3 Цикл
						ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, Сч, СтрокаПрочее["СубконтоСписанияНУ"+ Сч]);
					КонецЦикла;
					ПроводкаНУ.ВидУчетаДт = Справочники.ВидыУчетаНУ.ВР;
					ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(ПроводкаНУ, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);
				КонецЕсли;	
				
				СписаннаяСтоимостьВР = СписаннаяСтоимостьВР + СуммаПроводки;
			КонецЕсли;
			
			Если СтрокаСписываемойСтоимостиПоНУ.СписываемаяСтоимостьПР <> 0 Тогда
				СуммаПроводки = Окр((СтрокаПрочее.Сумма / СтрокаФА.СписываемаяСтоимостьБУ) * СтрокаСписываемойСтоимостиПоНУ.СписываемаяСтоимостьПР, 1);
				
				Если ТаблицаПоПрочее.Индекс(СтрокаПрочее) = ТаблицаПоПрочее.Количество()-1 Тогда
					СуммаПроводки = СписываемаяСтоимостьПР - СписаннаяСтоимостьПР;
				КонецЕсли;
				
				Если СуммаПроводки <> 0 Тогда
					ПроводкаНУ = Движения.Налоговый.Добавить();
					ПроводкаНУ.Период 		= Реквизиты.Период;
					ПроводкаНУ.Организация 	= Реквизиты.Организация;
					ПроводкаНУ.Содержание 	= НСтр("ru = 'Погашение разниц'", КодОсновногоЯзыка);
					
					ПроводкаНУ.СчетКт = СчетКт;
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "ВнеоборотныеАктивы", СтрокаФА.ОсновноеСредство);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "ВидыДвиженияСтоимостиФА", Перечисления.ВидыДвиженияСтоимостиФА.Выбытие);
					
					ПроводкаНУ.Сумма = СуммаПроводки;
					ПроводкаНУ.ВидУчетаКт = Справочники.ВидыУчетаНУ.ПР;
					
					ПроводкаНУ.СчетДт = СтрокаПрочее.СчетСписанияНУ;
					Для Сч = 1 По 3 Цикл
						ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, Сч, СтрокаПрочее["СубконтоСписанияНУ"+ Сч]);
					КонецЦикла;
					
					ПроводкаНУ.ВидУчетаДт = Справочники.ВидыУчетаНУ.ПР;
					ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(ПроводкаНУ, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);
				КонецЕсли;	
				
				СписаннаяСтоимостьПР = СписаннаяСтоимостьПР + СуммаПроводки;
				
			КонецЕсли;
			
		КонецЦикла;	
	КонецЕсли;
	
 Движения.Налоговый.Записывать = Истина;

КонецПроцедуры

Процедура СформироватьДвиженияРаспределенияПереоценкиОСПриРеструктуризацииОС(ТаблицаРеквизиты, ТаблицаПоИсходномуОС, ТаблицаПереоценкиВА, ТаблицаОС, Движения, Отказ) Экспорт
	
	Если ТаблицаРеквизиты = Неопределено ИЛИ  ТаблицаПереоценкиВА = Неопределено ИЛИ Отказ Тогда
		Возврат;
	КонецЕсли;

	Параметры = ПодготовитьПараметрыРаспределенияПереоценкиОС(ТаблицаРеквизиты, ТаблицаПереоценкиВА, ТаблицаОС) ;
	
	Если Параметры.ТаблицаПереоценкаВА.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = Параметры.Реквизиты[0];
	СтрокаПереоценки = Параметры.ТаблицаПереоценкаВА[0];
	
	СписываемаяСтоимостьБУ = СтрокаПереоценки.СписываемаяСтоимостьБУ; 
	
	КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	
	Если ТаблицаОС <> Неопределено Тогда
		Для Каждого СтрокаОС Из ТаблицаОС Цикл
			СтрокаОС.СуммаПереоценкиСтоимости = Окр(СтрокаПереоценки.СуммаПереоценкиСтоимости* (СтрокаОС.СтоимостьБУ/ТаблицаПоИсходномуОС[0].СписываемаяСтоимостьБУ),1);
			СтрокаОС.СуммаПереоценкиАмортизации = Окр(СтрокаПереоценки.СуммаПереоценкиАмортизации* (СтрокаОС.СтоимостьБУ/ТаблицаПоИсходномуОС[0].СписываемаяСтоимостьБУ),1);	
		КонецЦикла;
	КонецЕсли;
	                     
	Для Каждого СтрокаПереоценки ИЗ ТаблицаПереоценкиВА Цикл
		РаспределяемаяСуммаПереоцСтоимости  = СтрокаПереоценки.СуммаПереоценкиСтоимости	;
		РаспределяемаяСуммаПереоцАмортиз   = СтрокаПереоценки.СуммаПереоценкиАмортизации;
		                                      
		РаспределеноСтоимость = 0;
		РаспределеноАмортизация = 0;
		
		Если   ТаблицаОС <> Неопределено Тогда
			Для Каждого СтрокаКоэффициента Из ТаблицаОС Цикл
				
				Если СтрокаКоэффициента.НомерСтроки = ТаблицаОС.Количество() Тогда
					СуммаПереоценкиСтоимости = РаспределяемаяСуммаПереоцСтоимости - РаспределеноСтоимость;
					СуммаПереоценкиАмортизации = РаспределяемаяСуммаПереоцАмортиз - РаспределеноАмортизация;
				КонецЕсли;
				
				Если СтрокаКоэффициента.СуммаПереоценкиСтоимости <> 0 Или СтрокаКоэффициента.СуммаПереоценкиАмортизации <> 0 Тогда
					ДвижениеПереоценкаВА = Движения.ПереоценкаВнеоборотныхАктивов.Добавить();
					ДвижениеПереоценкаВА.Период			   			= Реквизиты.Период;
					ЗаполнитьЗначенияСвойств(ДвижениеПереоценкаВА,СтрокаПереоценки);
					ДвижениеПереоценкаВА.Организация 	    		= Реквизиты.Организация;
					ДвижениеПереоценкаВА.СтруктурноеПодразделение	= Реквизиты.СтруктурноеПодразделение;
					
					ДвижениеПереоценкаВА.ВнеоборотныйАктив  = СтрокаКоэффициента.ОсновноеСредство;
					ДвижениеПереоценкаВА.ДокументПереоценки = СтрокаПереоценки.ДокументПереоценки;
					
					Если СтрокаКоэффициента.СуммаПереоценкиСтоимости > 0 Тогда
						ДвижениеПереоценкаВА.ВидДвижения = ВидДвиженияНакопления.Приход;
						ДвижениеПереоценкаВА.СуммаПереоценкиСтоимости   = СтрокаКоэффициента.СуммаПереоценкиСтоимости;
						ДвижениеПереоценкаВА.СуммаПереоценкиАмортизации = СтрокаКоэффициента.СуммаПереоценкиАмортизации;
						
						// сформируем проводки по переносу резерва
						СуммаРезерва = СтрокаКоэффициента.СуммаПереоценкиСтоимости - (- СтрокаКоэффициента.СуммаПереоценкиАмортизации);
						
						Если СуммаРезерва <> 0 Тогда
							Проводка = Движения.Типовой.Добавить();
							
							Проводка.Период       = Реквизиты.Период;
							Проводка.Организация  = Реквизиты.Организация;
							Проводка.Содержание   = НСтр("ru = 'Перенос резерва переоценки'", КодОсновногоЯзыка);
							Проводка.НомерЖурнала = НСтр("ru = 'ОС'", ОбщегоНазначения.КодОсновногоЯзыка());
							Проводка.Сумма        = СуммаРезерва;
							
							Проводка.СчетДт = ПланыСчетов.Типовой.РезервНаПереоценкуОсновныхСредств;		
							ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", Реквизиты.ИсходноеОсновноеСредство);
							ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ВидыИзмененийВСобственномКапитале", Перечисления.ВидыИзмененийВСобственномКапитале.ПереоценкаОсновныхСредств);
							
							Проводка.СчетКт = ПланыСчетов.Типовой.РезервНаПереоценкуОсновныхСредств;		
							ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", СтрокаКоэффициента.ОсновноеСредство);
							ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ВидыИзмененийВСобственномКапитале", Перечисления.ВидыИзмененийВСобственномКапитале.ПереоценкаОсновныхСредств);
							
							ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(Проводка, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);				
						КонецЕсли;	
						
					Иначе
						ДвижениеПереоценкаВА.ВидДвижения = ВидДвиженияНакопления.Расход;
						ДвижениеПереоценкаВА.СуммаПереоценкиСтоимости   = - СтрокаПереоценки.СуммаПереоценкиСтоимости;
						ДвижениеПереоценкаВА.СуммаПереоценкиАмортизации = - СтрокаПереоценки.СуммаПереоценкиАмортизации;
						
						// для убытков нужно сформировать проводки по счетам расходов
						
						// проводка по переносу убытка от переоценки стоимости
						Если СтрокаКоэффициента.СуммаПереоценкиСтоимости < 0 Тогда
							Проводка = Движения.Типовой.Добавить();
							Проводка.Период       = Реквизиты.Период;
							Проводка.Организация  = Реквизиты.Организация;
							Проводка.Содержание   = НСтр("ru = 'Перенос убытка от переоценки стоимости'", КодОсновногоЯзыка);
							
							Проводка.НомерЖурнала = НСтр("ru = 'ОС'", ОбщегоНазначения.КодОсновногоЯзыка());
							Проводка.Сумма        = -СтрокаКоэффициента.СуммаПереоценкиСтоимости;
							
							Проводка.СчетДт = СтрокаПереоценки.СчетРасходовБУ;
							ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаПереоценки.СубконтоРасходовБУ1);
							ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаПереоценки.СубконтоРасходовБУ2);
							ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтрокаПереоценки.СубконтоРасходовБУ3);
							ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства",   СтрокаКоэффициента.ОсновноеСредство);
							ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ВнеоборотныеАктивы", СтрокаКоэффициента.ОсновноеСредство);
							
							Проводка.СчетКт = СтрокаПереоценки.СчетРасходовБУ;
							ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтрокаПереоценки.СубконтоРасходовБУ1);
							ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтрокаПереоценки.СубконтоРасходовБУ2);
							ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, СтрокаПереоценки.СубконтоРасходовБУ3);
							ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства",   Реквизиты.ИсходноеОсновноеСредство);
							ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ВнеоборотныеАктивы", Реквизиты.ИсходноеОсновноеСредство);
							
							ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(Проводка, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);				
						КонецЕсли;	
						
						// проводка по переносу дохода от переоценки амортизаци
						Если СтрокаКоэффициента.СуммаПереоценкиАмортизации <> 0 Тогда
							Проводка = Движения.Типовой.Добавить();
							Проводка.Период       = Реквизиты.Период;
							Проводка.Организация  = Реквизиты.Организация;
							Проводка.Содержание   = НСтр("ru = 'Перенос убытка от переоценки стоимости'", КодОсновногоЯзыка);
							Проводка.НомерЖурнала = НСтр("ru = 'ОС'", ОбщегоНазначения.КодОсновногоЯзыка());
							Проводка.Сумма        = СтрокаКоэффициента.СуммаПереоценкиАмортизации;
							
							Проводка.СчетДт = СтрокаПереоценки.СчетДоходовБУ;
							ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаПереоценки.СубконтоДоходовБУ1);
							ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаПереоценки.СубконтоДоходовБУ2);
							ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтрокаПереоценки.СубконтоДоходовБУ3 );
							ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства",   Реквизиты.ИсходноеОсновноеСредство);
							ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ВнеоборотныеАктивы", Реквизиты.ИсходноеОсновноеСредство);
							
							Проводка.СчетКт = СтрокаПереоценки.СчетДоходовБУ;
							ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтрокаПереоценки.СубконтоДоходовБУ1);
							ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтрокаПереоценки.СубконтоДоходовБУ2);
							ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, СтрокаПереоценки.СубконтоДоходовБУ3 );
							ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства",   СтрокаКоэффициента.ОсновноеСредство);
							ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ВнеоборотныеАктивы", СтрокаКоэффициента.ОсновноеСредство);
							
							ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(Проводка, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);				
						КонецЕсли;	
						
					КонецЕсли;
					
				КонецЕсли;	
				
				РаспределеноСтоимость = РаспределеноСтоимость + СтрокаКоэффициента.СуммаПереоценкиСтоимости;
				РаспределеноАмортизация = РаспределеноАмортизация + СтрокаКоэффициента.СуммаПереоценкиАмортизации;
				
			КонецЦикла;				
		КонецЕсли;
		Если (РаспределяемаяСуммаПереоцСтоимости <> 0) Или (РаспределяемаяСуммаПереоцАмортиз <> 0) Тогда
				
			ДвижениеПереоценкаВА = Движения.ПереоценкаВнеоборотныхАктивов.Добавить();
			ЗаполнитьЗначенияСвойств(ДвижениеПереоценкаВА,СтрокаПереоценки);
			ДвижениеПереоценкаВА.Период			    		= Реквизиты.Период;
			ДвижениеПереоценкаВА.Организация 	    		= Реквизиты.Организация;
			ДвижениеПереоценкаВА.СтруктурноеПодразделение	= Реквизиты.СтруктурноеПодразделение;
			ДвижениеПереоценкаВА.ВнеоборотныйАктив  = СтрокаПереоценки.ВнеоборотныйАктив;
			ДвижениеПереоценкаВА.ДокументПереоценки = СтрокаПереоценки.ДокументПереоценки;
			
			
			Если РаспределяемаяСуммаПереоцСтоимости > 0 Тогда
				ДвижениеПереоценкаВА.ВидДвижения = ВидДвиженияНакопления.Расход; 		
				ДвижениеПереоценкаВА.СуммаПереоценкиСтоимости   = РаспределяемаяСуммаПереоцСтоимости;
				ДвижениеПереоценкаВА.СуммаПереоценкиАмортизации = РаспределяемаяСуммаПереоцАмортиз;
				
				// сформируем проводки по закрытию резерва
				СуммаРезерва = (РаспределяемаяСуммаПереоцСтоимости - РаспределеноСтоимость) + (РаспределяемаяСуммаПереоцАмортиз - РаспределеноАмортизация);
				
				Если СуммаРезерва <> 0 Тогда
					Проводка = Движения.Типовой.Добавить();
					
					Проводка.Период       = Реквизиты.Период;
					Проводка.Организация  = Реквизиты.Организация;
					Проводка.Содержание   = НСтр("ru = 'Закрытие резерва переоценки'", КодОсновногоЯзыка);
					Проводка.НомерЖурнала = НСтр("ru = 'ОС'", ОбщегоНазначения.КодОсновногоЯзыка());
					Проводка.Сумма        = СуммаРезерва;
					
					Проводка.СчетДт = ПланыСчетов.Типовой.РезервНаПереоценкуОсновныхСредств;		
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", Реквизиты.ИсходноеОсновноеСредство);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ВидыИзмененийВСобственномКапитале", Перечисления.ВидыИзмененийВСобственномКапитале.ПереоценкаОсновныхСредств);
					
					Проводка.СчетКт = ПланыСчетов.Типовой.НераспределеннаяПрибыльНепокрытыйУбытокОтчетногоГода;
					
					ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(Проводка, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);				
						
				КонецЕсли;
			Иначе
				ДвижениеПереоценкаВА.ВидДвижения = ВидДвиженияНакопления.Приход; 			
				ДвижениеПереоценкаВА.СуммаПереоценкиСтоимости   = - РаспределяемаяСуммаПереоцСтоимости;
				ДвижениеПереоценкаВА.СуммаПереоценкиАмортизации = - РаспределяемаяСуммаПереоцАмортиз;
			КонецЕсли;

		КонецЕсли;	

	КонецЦикла;//Пока ОстаткиПереоценокВА.Следующий() Цикл
	
	Движения.Типовой.Записывать = Истина;
	Движения.ПереоценкаВнеоборотныхАктивов.Записывать = Истина;

КонецПроцедуры

//ОБЩИЕ МЕХАНИЗМЫ ВЫБЫТИЯ ОС

Процедура ДобавитьДвиженияПоВыбытиюОС(СтрокаОС, Реквизиты, Движения, Отказ) 
	
	СуммаПроводки = СтрокаОС.АмортизацияБУ + СтрокаОС.АмортизацияЗаМесяцБУ; 
	КодОсновногоЯзыка =  ОбщегоНазначения.КодОсновногоЯзыка();
	Если СуммаПроводки <> 0  Тогда
		
		Проводка = Движения.Типовой.Добавить();
		
		Проводка.НомерЖурнала = Реквизиты.НомерЖурнала;
		Проводка.Период       = Реквизиты.Период;
		Проводка.Регистратор  = Реквизиты.Регистратор;
		Проводка.Организация  = Реквизиты.Организация;
		Проводка.Содержание   = НСтр("ru ='Списана амортизация'", КодОсновногоЯзыка);
		Проводка.Сумма        = СуммаПроводки;
		
		Проводка.СчетКт       = СтрокаОС.СчетКт;
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", СтрокаОС.ОсновноеСредство);
		
		// на тот случай если списывается со счета, где субконто "Внеоборотные активы" а не "Основные средства", например со счета 1510
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ВнеоборотныеАктивы", СтрокаОС.ОсновноеСредство);
		
		ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
						Проводка, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);
		
		Проводка.СчетДт = СтрокаОС.СчетДт;
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", СтрокаОС.ОсновноеСредство);
		
		
		Если УправлениеВнеоборотнымиАктивамиСервер.ВедетсяАналитическийУчетОСПоПодразделениям(Реквизиты.Период) Тогда
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Подразделения", СтрокаОС.ТекущееПодразделение);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Подразделения", СтрокаОС.ТекущееПодразделение);
		КонецЕсли;
		
		Если УправлениеВнеоборотнымиАктивамиСервер.ВедетсяАналитическийУчетОСПоМОЛ(Реквизиты.Период)  Тогда
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "РаботникиОрганизаций", СтрокаОС.ТекущееМОЛ);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "РаботникиОрганизаций", СтрокаОС.ТекущееМОЛ);
		КонецЕсли;	
		
	КонецЕсли;
	
	  	// списание балансовой стоимости Д 7410 К 2410
	СуммаПроводки = СтрокаОС.СтоимостьБУ - СтрокаОС.АмортизацияБУ - СтрокаОС.АмортизацияЗаМесяцБУ;
	
	Если СуммаПроводки <> 0 Тогда
		Проводка = Движения.Типовой.Добавить();
		
		Проводка.НомерЖурнала = Реквизиты.НомерЖурнала;
		Проводка.Период       = Реквизиты.Период;
		Проводка.Регистратор  = Реквизиты.Регистратор;
		Проводка.Организация  = Реквизиты.Организация;
		Проводка.Содержание   = НСтр("ru ='Списана ост. стоимость'", КодОсновногоЯзыка);
		Проводка.Сумма        = СуммаПроводки;
		
		Проводка.СчетКт       = СтрокаОС.СчетКт;
		
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", СтрокаОС.ОсновноеСредство);
		
		// на тот случай если списывается со счета, где субконто "Внеоборотные активы" а не "Основные средства", например со счета 1510
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ВнеоборотныеАктивы", СтрокаОС.ОсновноеСредство);
		
		ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
		Проводка, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);     
		                                                                 		
		Если УправлениеВнеоборотнымиАктивамиСервер.ВедетсяАналитическийУчетОСПоПодразделениям(Реквизиты.Период) Тогда
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Подразделения", СтрокаОС.ТекущееПодразделение);
		КонецЕсли;
		
		Если УправлениеВнеоборотнымиАктивамиСервер.ВедетсяАналитическийУчетОСПоМОЛ(Реквизиты.Период) Тогда
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "РаботникиОрганизаций", СтрокаОС.ТекущееМОЛ);
		КонецЕсли;	
		
		Проводка.СчетДт = СтрокаОС.КорСчет;
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаОС.КорСубконто1);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаОС.КорСубконто2);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтрокаОС.КорСубконто3);
						
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ВнеоборотныеАктивы", СтрокаОС.ОсновноеСредство);
		
		Если ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт).Валютный Тогда	
			
			СтруктураКурсаДокумента = ОбщегоНазначенияБК.ПолучитьКурсВалюты(Реквизиты.ВалютаВзаиморасчетов, Реквизиты.Период);
			
			КоэффициентРеглВалюты = 1;
			Если НЕ СтруктураКурсаДокумента.Кратность = 0 ИЛИ Реквизиты.ВалютаВзаиморасчетов = Константы.ВалютаРегламентированногоУчета.Получить() Тогда
				КоэффициентРеглВалюты           = СтруктураКурсаДокумента.Курс / СтруктураКурсаДокумента.Кратность;
			КонецЕсли;
			
			Проводка.ВалютаДт = Реквизиты.ВалютаВзаиморасчетов;			
			Проводка.ВалютнаяСуммаДт = Окр(СуммаПроводки * КоэффициентРеглВалюты,2);
		КонецЕсли; 		  		
		
		// ВР на сумму операции не отражавшейся в БУ			
		Если НЕ СтрокаОС.ПризнакФА ИЛИ ТипЗнч(Реквизиты.Регистратор) =  Тип("ДокументСсылка.СписаниеОС") Тогда 				
			
			СчетУчетаФА = ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьСчетУчетаНУВнеоборотногоАктива(СтрокаОС.ОсновноеСредство, Реквизиты.Организация, 
			Реквизиты.Период, СтрокаОС.ПризнакФА);
			
			СоответствиеСчетовСтоимостиФА = Новый Соответствие;																				
			СоответствиеСчетовСтоимостиФА.Вставить(СтрокаОС.СчетКт,СчетУчетаФА);
			
			ПроцедурыНалоговогоУчета.ОтразитьВременныеРазницыВНУ(Реквизиты, Проводка, Движения, СуммаПроводки, Истина, СоответствиеСчетовСтоимостиФА);
			
		КонецЕсли; 
	КонецЕсли;
	

КонецПроцедуры

Процедура СформироватьДвижениеСписанияСтоимостиВыбытияОСНУ(ТаблицаОС,ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Параметры = ПодготовитьПараметрыСписанияСтоимостиВыбытияОСНУ(ТаблицаОС, ТаблицаРеквизиты);

	Если Параметры.ТаблицаОС.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Реквизиты = Параметры.Реквизиты[0];
	
	Если НЕ Реквизиты.НеобходимостьОтраженияВНУ Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы ИЗ Параметры.ТаблицаОС Цикл
		
		Если  Реквизиты.ЭтоПередачаСтруктурномуПодразделению Тогда
			Если Реквизиты.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль Тогда
				// При передаче в СП стоимостной баланс списываем на счет расчетов с СП
				ПроводкаНУ = Движения.Налоговый.Добавить();
				ПроводкаНУ.Период 		= Реквизиты.Период;
				ПроводкаНУ.Организация 	= Реквизиты.Организация;
				ПроводкаНУ.Содержание 	= НСтр("ru = 'Списание балансовой стоимости перемещаемого ФА'", ОбщегоНазначения.КодОсновногоЯзыка());
								
				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
						ПроводкаНУ, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);
				
				
				ПроводкаНУ.СчетДт = ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьСчетРасчетовСКонтрагентомНУ(Реквизиты.СчетУчетаРасчетовСКонтрагентом);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, 	ПроводкаНУ.СубконтоДт, "Контрагенты", Реквизиты.Контрагент);			
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт,	ПроводкаНУ.СубконтоДт,	"Договоры",   Реквизиты.ДоговорКонтрагента);					
				
						
				
				ПроводкаНУ.СчетКт = СтрокаТаблицы.СчетНУ;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "ВнеоборотныеАктивы", 		СтрокаТаблицы.ОсновноеСредство);			
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "ВидыДвиженияСтоимостиФА", 	Перечисления.ВидыДвиженияСтоимостиФА.Перемещение);			
				
				ПроводкаНУ.Сумма = СтрокаТаблицы.СтоимостьНУ;					
				ПроводкаНУ.ВидУчетаКт = СтрокаТаблицы.ВидУчетаНУ;			
				ПроцедурыНалоговогоУчета.ВидУчетаНУ(ПроводкаНУ, СтрокаТаблицы.ВидУчетаНУ, Ложь);
				
			КонецЕсли;
			
			Продолжить;
			
		КонецЕсли;
		
		// при выбытии списываем стоимостной баланс для ОС не учитываемых в НУ, а так же ПР часть в стоимости ФА
		Если НЕ СтрокаТаблицы.ПризнакФА  ИЛИ (СтрокаТаблицы.ВидУчетаНУ<> Справочники.ВидыУчетаНУ.НУ И СтрокаТаблицы.ВидУчетаНУ <> Справочники.ВидыУчетаНУ.ВР) Тогда		
			Если СтрокаТаблицы.СтоимостьНУ = 0 Тогда
				Продолжить;
			КонецЕсли;	
			
			ПроводкаНУ = Движения.Налоговый.Добавить();
			ПроводкаНУ.Период = Реквизиты.Период;
			ПроводкаНУ.Организация = Реквизиты.Организация;
			ПроводкаНУ.Содержание = НСтр("ru = 'Списание балансовой стоимости ФА'", ОбщегоНазначения.КодОсновногоЯзыка());
			
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				ПроводкаНУ, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);
			
			Если Реквизиты.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль Тогда								
				// Постоянные разницы в размере балансовой стоимости актива.
				// ПР в стоимости списываем в момент реализации ФА.
				ПроводкаНУ.СчетДт = СтрокаТаблицы.СчетРасходовНУ;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 1, СтрокаТаблицы.СубконтоРасходовНУ1);			
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 2, СтрокаТаблицы.СубконтоРасходовНУ2);							
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 3, СтрокаТаблицы.СубконтоРасходовНУ3);											
				
				// здесь должны быть только вариации постоянных разниц
				ПроводкаНУ.ВидУчетаДт = ?(НЕ ЗначениеЗаполнено(СтрокаТаблицы.ВидУчетаНУ) ИЛИ НЕ СтрокаТаблицы.ВидУчетаНУ.ПринадлежитЭлементу(Справочники.ВидыУчетаНУ.ПР), Справочники.ВидыУчетаНУ.НеОтражаетсяВНУ,СтрокаТаблицы.ВидУчетаНУ);
			КонецЕсли;                                             				
			
				
			ПроводкаНУ.СчетКт = СтрокаТаблицы.СчетНУ;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "ВнеоборотныеАктивы", СтрокаТаблицы.ОсновноеСредство);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "ВидыДвиженияСтоимостиФА", Перечисления.ВидыДвиженияСтоимостиФА.Выбытие);			
			ВидУчетаВПроводке = СтрокаТаблицы.ВидУчетаНУ;				
			
			ПроводкаНУ.Сумма = СтрокаТаблицы.СтоимостьНУ;								
			
			ПроводкаНУ.ВидУчетаКт = СтрокаТаблицы.ВидУчетаНУ;
			
			// ВР на сумму операции не отражавшейся в БУ			
			ПроцедурыНалоговогоУчета.ОтразитьВременныеРазницыВНУ(Реквизиты, ПроводкаНУ, Движения, -СтрокаТаблицы.СтоимостьНУ);
		КонецЕсли;   		
		
	КонецЦикла;

КонецПроцедуры

Функция ПодготовитьПараметрыСписанияСтоимостиВыбытияОСНУ(ТаблицаОС, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаОС
	СписокОбязательныхКолонок = ""
	+ "ОсновноеСредство," 
	+ "СчетНУ," 
	+ "СтоимостьНУ," 
	+ "ВидУчетаНУ," 
	+ "ПризнакФА," 
	+ "ВидЛьготыФА," 
	+ "СчетДоходовНУ," 
	+ "СубконтоДоходовНУ1," 
	+ "СубконтоДоходовНУ2,"
	+ "СубконтоДоходовНУ3," 
	+ "СчетРасходовНУ," 
	+ "СубконтоРасходовНУ1," 
	+ "СубконтоРасходовНУ2,"
	+ "СубконтоРасходовНУ3," 
	+ "ПризнакОтдельногоУчетаФА"; 

	Параметры.Вставить("ТаблицаОС",
		ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаОС, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"             	  // <Дата>
	+ "Организация,"        	  // <СправочникСсылка.Организации>
	+ "СтруктурноеПодразделение," // <СправочникСсылка.ПодразделенияОрганизаций>
	+ "ВалютаВзаиморасчетов," 
	+ "Контрагент," 
	+ "ДоговорКонтрагента," 
	+ "СчетУчетаРасчетовСКонтрагентом," 
	+ "ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль,"
	+ "ВедениеУчетаВременныхРазницБалансовымМетодом," 
	+ "НеобходимостьОтраженияВНУ," 
	+ "ЭтоПередачаСтруктурномуПодразделению," 	 
	+ "ВидУчетаНУ" ;
	

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции


// СПИСАНИЕ ОС

Процедура СформироватьДвиженияСписаниеОС(ТаблицаОС, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Если ТаблицаОС = Неопределено ИЛИ ТаблицаОС.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыСписаниеОС(ТаблицаОС, ТаблицаРеквизиты);
	
	Если Параметры.ТаблицаОС.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = Параметры.Реквизиты[0];
	
	Для Каждого СтрокаОС Из ТаблицаОС Цикл
		                       
		ДобавитьДвиженияПоВыбытиюОС(СтрокаОС, Реквизиты, Движения, Отказ);
		
		Если Реквизиты.НеобходимостьОтраженияВНУ Тогда
			ДобавитьДвижениеСписаниеОСНУ(Реквизиты, СтрокаОС, Движения, Отказ)
		КонецЕсли;
		
	КонецЦикла;
	
	Движения.Типовой.Записывать = Истина;
	
	Если Реквизиты.НеобходимостьОтраженияВНУ Тогда
		Движения.Налоговый.Записывать = Истина;
	КонецЕсли;  
	
КонецПроцедуры

Функция ПодготовитьПараметрыСписаниеОС(ТаблицаОС, ТаблицаРеквизиты)

	Параметры = Новый Структура;
	
	СписокОбязательныхКолонок = ""
    + "ОсновноеСредство,"          
	+ "АмортизацияБУ,"                   
	+ "АмортизацияЗаМесяцБУ,"                     
	+ "СчетКт,"
	+ "СчетДт," 	                  
	+ "ТекущееПодразделение,"
	+ "ТекущееМОЛ,"
	+ "КорСчет,"
	+ "КорСубконто1,"                  
	+ "КорСубконто2,"
	+ "КорСубконто3,"
	+ "СтоимостьНУ,"                  
	+ "ПризнакФА,"	
	+ "СчетДоходовНУ,"       
	+ "СубконтоДоходовНУ1,"
	+ "СубконтоДоходовНУ2,"
	+ "СубконтоДоходовНУ3,"
	+ "СчетРасходовНУ,"       
	+ "СубконтоРасходовНУ1,"
	+ "СубконтоРасходовНУ2,"
	+ "СубконтоРасходовНУ3"
	;

	Параметры.Вставить("ТаблицаОС",
		ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаОС, СписокОбязательныхКолонок));

	СписокОбязательныхКолонок = ""
	+ "Регистратор,"                  	 // <ДокументСсылка.*> - документ-регистратор движений
	+ "Период,"                       	 // <Дата> - период движений - дата документа
	+ "Организация,"  
	+ "НомерЖурнала,"                     // <СправочникСсылка.Организация> - организация, в которую приходуется товар	
	+ "НеобходимостьОтраженияВНУ,"  	 // <Булево> - определяет необходимость отражения в НУ
	+ "ВалютаВзаиморасчетов,"  			 // <СправочникСсылка.Валюты> - валюта документа
	+ "ВидУчетаНУ,"  					 // <СправочникСсылка.ВидыУчетаНУ> - вид учета, указанный в документе
	+ "СтруктурноеПодразделение,"  	     // <СправочникСсылка.ПодразделенияОрганизации> - СП, указанное в документе
	+ "ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль,"
	+ "ВедениеУчетаВременныхРазницБалансовымМетодом"
	;                                  
	
	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Процедура ДобавитьДвижениеСписаниеОСНУ(Реквизиты, СтрокаТаблицы, Движения, Отказ)
	
	СчетУчетаФА = ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьСчетУчетаНУВнеоборотногоАктива(СтрокаТаблицы.ОсновноеСредство, Реквизиты.Организация, 
																								Реквизиты.Период, СтрокаТаблицы.ПризнакФА);
			
			
	Если  СтрокаТаблицы.ПризнакФА Тогда 		
		Если СтрокаТаблицы.СтоимостьНУ <> 0 Тогда
			
			ПроводкаНУ = Движения.Налоговый.Добавить();
			ПроводкаНУ.Период = Реквизиты.Период;
			ПроводкаНУ.Организация = Реквизиты.Организация;  			
			ПроводкаНУ.Содержание = НСтр("ru = 'Списание фиксированного актива'", ОбщегоНазначения.КодОсновногоЯзыка());
			
			ПроводкаНУ.СчетКт 	= СчетУчетаФА;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "ВнеоборотныеАктивы", СтрокаТаблицы.ОсновноеСредство);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "ВидыДвиженияСтоимостиФА", Перечисления.ВидыДвиженияСтоимостиФА.Выбытие);			
			
			ПроводкаНУ.Сумма 	= СтрокаТаблицы.СтоимостьНУ;			
			     			
			Если Реквизиты.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль Тогда
				ПроводкаНУ.СчетДт = СтрокаТаблицы.СчетРасходовНУ;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 1, СтрокаТаблицы.СубконтоРасходовНУ1);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 2, СтрокаТаблицы.СубконтоРасходовНУ2);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 3, СтрокаТаблицы.СубконтоРасходовНУ3);				
								
				// так как с точки зрения Дохода по НУ
				// уменьшив стоимостный баланс мы лишаем себя возможности
				// признать затраты от возмещения стоимости ФА через амортизацию
				// то сумма уменьшения стоимостного баланса образует в тек. периоде ПР
				ПроводкаНУ.ВидУчетаДт = Справочники.ВидыУчетаНУ.НеОтражаетсяВНУ;	
			КонецЕсли;        

			ПроводкаНУ.ВидУчетаКт = Справочники.ВидыУчетаНУ.НУ;	
							
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
						ПроводкаНУ, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);
			// ВР на сумму операции не отражавшейся в БУ
			ПроцедурыНалоговогоУчета.ОтразитьВременныеРазницыВНУ(Реквизиты, ПроводкаНУ, Движения, -СтрокаТаблицы.СтоимостьНУ);
			
		КонецЕсли;		
		
	Иначе
		// не фиксированный актив. 		
		Если СтрокаТаблицы.АмортизацияЗаМесяцБУ <> 0 Тогда
			ПроводкаНУ = Движения.Налоговый.Добавить();
			ПроводкаНУ.Период = Реквизиты.Период;
			ПроводкаНУ.Организация = Реквизиты.Организация;  			
			ПроводкаНУ.Содержание = НСтр("ru = 'Списание внеоборотного актива'", ОбщегоНазначения.КодОсновногоЯзыка());
			ПроводкаНУ.Сумма = -СтрокаТаблицы.АмортизацияЗаМесяцБУ;				
			
			ПроводкаНУ.СчетДт = СтрокаТаблицы.СчетРасходовНУ;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 1, СтрокаТаблицы.СубконтоРасходовНУ1);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 2, СтрокаТаблицы.СубконтоРасходовНУ2);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 3, СтрокаТаблицы.СубконтоРасходовНУ3);				
			
				
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(ПроводкаНУ, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);
			
			ПроводкаНУ.СчетКт 	= СчетУчетаФА;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "ВнеоборотныеАктивы", СтрокаТаблицы.ОсновноеСредство);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "ВидыДвиженияСтоимостиФА", Перечисления.ВидыДвиженияСтоимостиФА.Выбытие);										
			
			// по налоговому учету				
			ПроцедурыНалоговогоУчета.ВидУчетаНУ(ПроводкаНУ, Реквизиты.ВидУчетаНУ);
			// ВР на сумму операции не отражавшейся в БУ
			ПроцедурыНалоговогоУчета.ОтразитьВременныеРазницыВНУ(Реквизиты, ПроводкаНУ, Движения, СтрокаТаблицы.АмортизацияЗаМесяцБУ);			
		КонецЕсли;	
		
	КонецЕсли;
	
КонецПроцедуры


// ЗАКРЫТИЕ ПЕРЕОЦЕНКИ ОС

Процедура СформироватьДвижениеЗакрытиеПереоценкиОС(ТаблицаОС, ТаблицаОСРегистры, ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Параметры = ПодготовитьПараметрыЗакрытиеПереоценкиОС(ТаблицаОС, ТаблицаОСРегистры, ТаблицаРеквизиты);
	
	Реквизиты = Параметры.Реквизиты[0];
	
	Для Каждого СтрокаТаблицы ИЗ Параметры.ТаблицаОС Цикл
		
		Проводка = Движения.Типовой.Добавить();
		
		Проводка.Период       = Реквизиты.Период;
		Проводка.Организация  = Реквизиты.Организация;
		Проводка.Содержание   = НСтр("ru = 'Закрытие резерва переоценки'", ОбщегоНазначения.КодОсновногоЯзыка());
		Проводка.НомерЖурнала = Реквизиты.НомерЖурнала;
		Проводка.Сумма        = СтрокаТаблицы.Сумма;
		
		ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(Проводка, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);				
		
		Проводка.СчетДт = СтрокаТаблицы.СчетДт;		
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", СтрокаТаблицы.СубконтоДт1);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ВидыИзмененийВСобственномКапитале", СтрокаТаблицы.СубконтоДт2);		
		Проводка.СчетКт = СтрокаТаблицы.СчетКт;	
		
	КонецЦикла;
	
	Для Каждого СтрокаТаблицы ИЗ Параметры.ТаблицаОСРегистры Цикл 		
		
		ДвижениеПереоценкаВА = Движения.ПереоценкаВнеоборотныхАктивов.Добавить();
		ДвижениеПереоценкаВА.Период			    		= Реквизиты.Период;
		ДвижениеПереоценкаВА.Организация 	    		= Реквизиты.Организация;
		ДвижениеПереоценкаВА.СтруктурноеПодразделение 	= Реквизиты.СтруктурноеПодразделение;
		
		ДвижениеПереоценкаВА.ВнеоборотныйАктив  = СтрокаТаблицы.ВнеоборотныйАктив;
		ДвижениеПереоценкаВА.ДокументПереоценки = СтрокаТаблицы.ДокументПереоценки;
		
		Если СтрокаТаблицы.СуммаПереоценкиСтоимости > 0 Тогда
			ДвижениеПереоценкаВА.ВидДвижения = ВидДвиженияНакопления.Расход; 		
			ДвижениеПереоценкаВА.СуммаПереоценкиСтоимости   = СтрокаТаблицы.СуммаПереоценкиСтоимости;
			ДвижениеПереоценкаВА.СуммаПереоценкиАмортизации = СтрокаТаблицы.СуммаПереоценкиАмортизации;
		Иначе
			ДвижениеПереоценкаВА.ВидДвижения = ВидДвиженияНакопления.Приход; 			
			ДвижениеПереоценкаВА.СуммаПереоценкиСтоимости   = - СтрокаТаблицы.СуммаПереоценкиСтоимости;
			ДвижениеПереоценкаВА.СуммаПереоценкиАмортизации = - СтрокаТаблицы.СуммаПереоценкиАмортизации;			
		КонецЕсли;
		
	КонецЦикла;
	
	Движения.Типовой.Записывать = Истина;	
	Движения.ПереоценкаВнеоборотныхАктивов.Записывать = Истина;

КонецПроцедуры

Функция ПодготовитьПараметрыЗакрытиеПереоценкиОС(ТаблицаОС, ТаблицаОСРегистры, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаОС

	СписокОбязательныхКолонок = ""
	+ "Сумма," 
	+ "СчетКт," 
	+ "СубконтоДт1," 
	+ "СубконтоДт2,"
	+ "СчетДт"; 

	Параметры.Вставить("ТаблицаОС",
		ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаОС, СписокОбязательныхКолонок));
		
	СписокОбязательныхКолонок = ""
	+ "ВнеоборотныйАктив," 
	+ "ДокументПереоценки," 
	+ "СуммаПереоценкиСтоимости," 
	+ "СуммаПереоценкиАмортизации"; 

	Параметры.Вставить("ТаблицаОСРегистры",
		ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаОСРегистры, СписокОбязательныхКолонок));


	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"             	  // <Дата>
	+ "Организация,"        	  // <СправочникСсылка.Организации>
	+ "СтруктурноеПодразделение,"
	+ "НомерЖурнала";
	 
	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции


// СЧЕТА УЧЕТА ОС БУХ

Процедура СформироватьДвиженияСчетовУчетаОСБух(ТаблицаОС, ТаблицаРеквизиты, Движения, Отказ) Экспорт
    
    Параметры = ПодготовитьПараметрыСчетовУчетаОСБух(ТаблицаОС, ТаблицаРеквизиты);
    
    Если Параметры.ТаблицаОС.Количество() = 0 Тогда
        Возврат;
    КонецЕсли;
    
    Реквизиты = Параметры.Реквизиты[0];

    Для Каждого СтрокаТаблицы Из Параметры.ТаблицаОС Цикл
        
        Движение = Движения.СчетаУчетаОС.Добавить();
        
        Движение.Период          = Реквизиты.Период;
        Движение.ОсновноеСредство = СтрокаТаблицы.ОсновноеСредство;
        Движение.Организация = Реквизиты.Организация;
        Движение.СчетУчетаБУ = СтрокаТаблицы.СчетУчетаБУ;
        
        Движение.СчетНачисленияАмортизацииБУ     = СтрокаТаблицы.СчетНачисленияАмортизацииБУ;
        Движение.СчетУчетаЗатратПоМодернизацииБУ = СтрокаТаблицы.СчетУчетаЗатратПоМодернизацииБУ;
        Движение.СчетУчетаНДСПоПриобретению      = СтрокаТаблицы.СчетУчетаНДСПоПриобретению;
        Движение.СчетУчетаНДСПоРеализации      = СтрокаТаблицы.СчетУчетаНДСПоРеализации;
        Движение.СчетДоходовОтРеализацииБУ      = СтрокаТаблицы.СчетДоходовОтРеализацииБУ;
        Движение.СчетСебестоимостиПриРеализацииБУ = СтрокаТаблицы.СчетСебестоимостиПриРеализацииБУ;
        
        Движение.СчетПоложительныхОтклоненийПриПередачеСтруктурнымПодразделениямБУ = СтрокаТаблицы.СчетПоложительныхОтклоненийПриПередачеСтруктурнымПодразделениямБУ;
        Движение.СчетОтрицательныхОтклоненийПриПередачеСтруктурнымПодразделениямБУ = СтрокаТаблицы.СчетОтрицательныхОтклоненийПриПередачеСтруктурнымПодразделениямБУ;
        
        Движение.СтруктурноеПодразделение = Реквизиты.СтруктурноеПодразделение;
        
        Движение.СчетУчетаНУ = СтрокаТаблицы.СчетУчетаНУ;
        Движение.СчетНачисленияАмортизацииНУ = СтрокаТаблицы.СчетНачисленияАмортизацииНУ;
        Движение.СчетДоходовОтРеализацииНУ = СтрокаТаблицы.СчетДоходовОтРеализацииНУ;
        Движение.СчетСебестоимостиПриРеализацииНУ = СтрокаТаблицы.СчетСебестоимостиПриРеализацииНУ;
    
    КонецЦикла;
    
    Движения.СчетаУчетаОС.Записывать = Истина;
    
КонецПроцедуры

Функция ПодготовитьПараметрыСчетовУчетаОСБух(ТаблицаОС, ТаблицаРеквизиты)

    Параметры = Новый Структура;

    // Подготовка таблицы Параметры.ТаблицаОС
    СписокОбязательныхКолонок = ""
    + "НомерСтроки,"                      
    + "ОсновноеСредство,"           
    + "СчетУчетаБУ,"           
    + "СчетНачисленияАмортизацииБУ," 
    + "СчетУчетаЗатратПоМодернизацииБУ," 
    + "СчетУчетаНДСПоПриобретению," 
    + "СчетУчетаНДСПоРеализации," 
    + "СчетДоходовОтРеализацииБУ," 
    + "СчетСебестоимостиПриРеализацииБУ,"
    + "СчетПоложительныхОтклоненийПриПередачеСтруктурнымПодразделениямБУ,"
    + "СчетОтрицательныхОтклоненийПриПередачеСтруктурнымПодразделениямБУ,"
    + "СчетУчетаНУ,"
    + "СчетНачисленияАмортизацииНУ,"
    + "СчетДоходовОтРеализацииНУ,"
    + "СчетСебестоимостиПриРеализацииНУ"
    ;

    //создадим колонки, если не были переданы, т.к. не все регситраторы, содержат их значение
    ОбщегоНазначенияБКВызовСервера.ДобавитьКолонкуВТаблицуЗначений(ТаблицаОС, "СчетУчетаНУ", ПланыСчетов.Налоговый.ПустаяСсылка());     
    ОбщегоНазначенияБКВызовСервера.ДобавитьКолонкуВТаблицуЗначений(ТаблицаОС, "СчетНачисленияАмортизацииНУ", ПланыСчетов.Налоговый.ПустаяСсылка()); 
    ОбщегоНазначенияБКВызовСервера.ДобавитьКолонкуВТаблицуЗначений(ТаблицаОС, "СчетДоходовОтРеализацииНУ", ПланыСчетов.Налоговый.ПустаяСсылка());     
    ОбщегоНазначенияБКВызовСервера.ДобавитьКолонкуВТаблицуЗначений(ТаблицаОС, "СчетСебестоимостиПриРеализацииНУ", ПланыСчетов.Налоговый.ПустаяСсылка()); 
    

    Параметры.Вставить("ТаблицаОС",
        ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаОС, СписокОбязательныхКолонок));
    
    // Подготовка таблицы Параметры.Реквизиты
    СписокОбязательныхКолонок = ""
    + "Период,"      // <Дата>
    + "Номер,"      // <Строка, 0> - номер документа, отразившего событие
    + "Организация,"      // <СправочникСсылка.Организации>
    + "СтруктурноеПодразделение"; // <СправочникСсылка.ПодразделенияОрганизаций>

    Параметры.Вставить("Реквизиты",
        ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

    
    Возврат Параметры;

КонецФункции
// ПЕРВОНАЧАЛЬНЫЕ СВЕДЕНИЯ ОС БУХ 

Процедура СформироватьДвиженияПервоначальныеСведенияОСБух(ТаблицаОС, ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Параметры = ПодготовитьПараметрыПервоначальныеСведенияОСБух(ТаблицаОС, ТаблицаРеквизиты);
	
	Если Параметры.ТаблицаОС.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = Параметры.Реквизиты[0];

	Для Каждого СтрокаТаблицы Из Параметры.ТаблицаОС Цикл
		
		Проводка = Движения.ПервоначальныеСведенияОСБухгалтерскийУчет.Добавить();
		
		Проводка.Период                      = Реквизиты.Период;
		Проводка.Организация                 = Реквизиты.Организация;
		Проводка.СтруктурноеПодразделение    = Реквизиты.СтруктурноеПодразделение;
		Проводка.ОсновноеСредство            = СтрокаТаблицы.ОсновноеСредство;
		Проводка.ИнвентарныйНомер            = СтрокаТаблицы.ИнвентарныйНомер;
		Проводка.СпособПоступления			 = СтрокаТаблицы.СпособПоступления;
		Проводка.ПервоначальнаяСтоимость     = СтрокаТаблицы.ПервоначальнаяСтоимость;
		Проводка.СпособНачисленияАмортизации = СтрокаТаблицы.СпособНачисленияАмортизации;
		Проводка.ПараметрВыработки           = СтрокаТаблицы.ПараметрВыработки;
		 		
	КонецЦикла;
	
	Движения.ПервоначальныеСведенияОСБухгалтерскийУчет.Записывать = Истина;
	
КонецПроцедуры

Функция ПодготовитьПараметрыПервоначальныеСведенияОСБух(ТаблицаОС, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаОС

	СписокОбязательныхКолонок = ""
	+ "НомерСтроки,"       					  // <Число> - номер строки в списке
	+ "ОсновноеСредство,"      				  // <СправочникСсылка.ОсновныеСредства>
	+ "Регистратор,"                  	 	  // <ДокументСсылка.*> - документ-регистратор движений
	+ "СпособПоступления,"             // <СправочникСсылка.ПодразделенияОрганизаций>
	+ "ПервоначальнаяСтоимость,"             // <СправочникСсылка.ПодразделенияОрганизаций>
	+ "СпособНачисленияАмортизации,"             // <СправочникСсылка.ПодразделенияОрганизаций>
	+ "ПараметрВыработки,"             // <СправочникСсылка.ПодразделенияОрганизаций>
	+ "ИнвентарныйНомер"; 				// <СправочникСсылка.СпособыОтраженияРасходовПоАмортизации> - Способ отражения расходов по амортизации

	Параметры.Вставить("ТаблицаОС",
		ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаОС, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"             	  // <Дата>
	+ "Организация,"        	  // <СправочникСсылка.Организации>
	+ "СтруктурноеПодразделение"; // <СправочникСсылка.ПодразделенияОрганизаций>

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));


	Возврат Параметры;

КонецФункции

// ПЕРЕМЕЩЕНИЕ ОС НАКОПЛЕННАЯ АМОРТИЗАЦИЯ ОС БУ

Процедура СформироватьДвиженияПеремещениеОСНакопленнаяАмортизацияОСБУ(ТаблицаОС, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыПеремещениеОСНакопленнаяАмортизацияОСБУ(ТаблицаОС, ТаблицаРеквизиты);

	Если Параметры.ТаблицаОС.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Реквизиты = Параметры.Реквизиты[0];

	Для каждого СтрокаТаблицы Из Параметры.ТаблицаОС Цикл
		
		Если (СтрокаТаблицы.АмортизацияБУ + СтрокаТаблицы.АмортизацияЗаМесяцБУ) <> 0 Тогда
			
			Проводка = Движения.Типовой.Добавить();
			
			Проводка.Период       = Реквизиты.Период;
			Проводка.Активность   = Истина;
			Проводка.Организация  = Реквизиты.Организация;
			Проводка.Содержание   = НСтр("ru = 'Перемещение накопленной амортизации ОС'", ОбщегоНазначения.КодОсновногоЯзыка());
			Проводка.НомерЖурнала = НСтр("ru = 'ОС'", ОбщегоНазначения.КодОсновногоЯзыка());
			Проводка.Сумма        = ?(Реквизиты.НачальноеЗаполнениеАналитикиНаСчетахУчетаОС, СтрокаТаблицы.АмортизацияБУ, СтрокаТаблицы.АмортизацияБУ + СтрокаТаблицы.АмортизацияЗаМесяцБУ);
			
			Проводка.СчетДт = СтрокаТаблицы.СчетНачисленияАмортизацииБУ;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", СтрокаТаблицы.ОсновноеСредство);
			
			Проводка.СчетКт = СтрокаТаблицы.СчетНачисленияАмортизацииБУ;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", СтрокаТаблицы.ОсновноеСредство);
			
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделениеПроводки(Проводка, СтрокаТаблицы.СтруктурноеПодразделение, "Дт");
			
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделениеПроводки(Проводка, СтрокаТаблицы.КорСтруктурноеПодразделение, "Кт");
			
			Если Реквизиты.ВедетсяАналитическийУчетОСПоПодразделениям Тогда
				Если НЕ Реквизиты.НачальноеЗаполнениеАналитикиНаСчетахУчетаОС Тогда
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Подразделения", СтрокаТаблицы.ПодразделениеОрганизации);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Подразделения", СтрокаТаблицы.НовыйПодразделениеОрганизации);
				Иначе
					// при НачальноеЗаполнениеАналитикиОС в аналитку "куда" записываются текущие данные
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Подразделения", СтрокаТаблицы.ПодразделениеОрганизации);
					
					// аналитика "откуда" тоже заполняется тек. данными, если до оформления уже была включен соответствующий аналит. учет
					Если Реквизиты.РанееВедетсяАналитическийУчетОСПоПодразделениям Тогда
						ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Подразделения", СтрокаТаблицы.ПодразделениеОрганизации);
					КонецЕсли;	
					
				КонецЕсли;	
				
			КонецЕсли;
			
			Если Реквизиты.ВедетсяАналитическийУчетОСПоМОЛ Тогда
				Если Не Реквизиты.НачальноеЗаполнениеАналитикиНаСчетахУчетаОС Тогда
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "РаботникиОрганизаций", СтрокаТаблицы.МОЛОрганизации);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "РаботникиОрганизаций", СтрокаТаблицы.НовыйМОЛОрганизации);
				Иначе
					// при НачальноеЗаполнениеАналитикиОС в аналитку "куда" записываются текущие данные
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "РаботникиОрганизаций", СтрокаТаблицы.МОЛОрганизации);
					
					// аналитика "откуда" тоже заполняется тек. данными, если до оформления уже была включен соответствующий аналит. учет
					Если Реквизиты.РанееВедетсяАналитическийУчетОСПоМОЛ Тогда
						ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "РаботникиОрганизаций", СтрокаТаблицы.МОЛОрганизации);
					КонецЕсли;
					
				КонецЕсли;		
			КонецЕсли;
		КонецЕсли;	
	КонецЦикла;

	Движения.Типовой.Записывать = Истина;

КонецПроцедуры

Функция ПодготовитьПараметрыПеремещениеОСНакопленнаяАмортизацияОСБУ(ТаблицаОС, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаОС

	СписокОбязательныхКолонок = ""
	+ "АмортизацияБУ," 					
	+ "АмортизацияЗаМесяцБУ," 					
	+ "ОсновноеСредство," 					
	+ "СчетНачисленияАмортизацииБУ," 					
	+ "ПодразделениеОрганизации," 					
	+ "НовыйПодразделениеОрганизации," 					
	+ "МОЛОрганизации," 					
	+ "СтруктурноеПодразделение," 					  
	+ "КорСтруктурноеПодразделение,"
	+ "НовыйМОЛОрганизации";

	Параметры.Вставить("ТаблицаОС",
		ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаОС, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"             						  
	+ "Организация,"   								  
	+ "НачальноеЗаполнениеАналитикиНаСчетахУчетаОС,"
	+ "ВедетсяАналитическийУчетОСПоПодразделениям,"
	+ "РанееВедетсяАналитическийУчетОСПоПодразделениям,"
	+ "ВедетсяАналитическийУчетОСПоМОЛ,"
	+ "РанееВедетсяАналитическийУчетОСПоМОЛ";  					  
	
	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

// ПЕРЕМЕЩЕНИЕ ОС ОСТАТКИ ПЕРЕОЦЕНОК ВА

Процедура СформироватьДвиженияПеремещениеОСОстаткиПереоценокВА(ТаблицаОС, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыПеремещениеОСОстаткиПереоценокВА(ТаблицаОС, ТаблицаРеквизиты);

	Если Параметры.ТаблицаОС.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Реквизиты = Параметры.Реквизиты[0];

	Для каждого СтрокаТаблицы Из Параметры.ТаблицаОС Цикл
		Движение = Движения.ПереоценкаВнеоборотныхАктивов.Добавить();
		
		// Списание суммы переоценки по СП-отправителю
		Движение.Период			   		  = Реквизиты.Период;
		Движение.Организация 	    	  = Реквизиты.Организация;
		Движение.СтруктурноеПодразделение = Реквизиты.СтруктурноеПодразделениеОтправитель;
		
		Движение.ВнеоборотныйАктив  = СтрокаТаблицы.ВнеоборотныйАктив;
		Движение.ДокументПереоценки = СтрокаТаблицы.ДокументПереоценки;
		
		Если СтрокаТаблицы.СуммаПереоценкиСтоимостиОстаток > 0 Тогда
			Движение.ВидДвижения = ВидДвиженияНакопления.Расход; 		
			Движение.СуммаПереоценкиСтоимости   = СтрокаТаблицы.СуммаПереоценкиСтоимостиОстаток;
			Движение.СуммаПереоценкиАмортизации = СтрокаТаблицы.СуммаПереоценкиАмортизацииОстаток;
		Иначе
			Движение.ВидДвижения = ВидДвиженияНакопления.Приход; 			
			Движение.СуммаПереоценкиСтоимости   = - СтрокаТаблицы.СуммаПереоценкиСтоимостиОстаток;
			Движение.СуммаПереоценкиАмортизации = - СтрокаТаблицы.СуммаПереоценкиАмортизацииОстаток;
		КонецЕсли;
		
		// Начисление суммы переоценки по СП-получателю
		Движение = Движения.ПереоценкаВнеоборотныхАктивов.Добавить();
		
		Движение.Период			   		  = Реквизиты.Период;
		Движение.Организация 	    	  = Реквизиты.Организация;
		Движение.СтруктурноеПодразделение = Реквизиты.СтруктурноеПодразделениеПолучатель;
		
		Движение.ВнеоборотныйАктив  = СтрокаТаблицы.ВнеоборотныйАктив;
		Движение.ДокументПереоценки = СтрокаТаблицы.ДокументПереоценки;
		
		Если СтрокаТаблицы.СуммаПереоценкиСтоимостиОстаток > 0 Тогда
			Движение.ВидДвижения = ВидДвиженияНакопления.Приход; 		
			Движение.СуммаПереоценкиСтоимости   = СтрокаТаблицы.СуммаПереоценкиСтоимостиОстаток;
			Движение.СуммаПереоценкиАмортизации = СтрокаТаблицы.СуммаПереоценкиАмортизацииОстаток;
		Иначе
			Движение.ВидДвижения = ВидДвиженияНакопления.Расход; 			
			Движение.СуммаПереоценкиСтоимости   = - СтрокаТаблицы.СуммаПереоценкиСтоимостиОстаток;
			Движение.СуммаПереоценкиАмортизации = - СтрокаТаблицы.СуммаПереоценкиАмортизацииОстаток;
		КонецЕсли;

	КонецЦикла;

	Движения.ПереоценкаВнеоборотныхАктивов.Записывать = Истина;

КонецПроцедуры

Функция ПодготовитьПараметрыПеремещениеОСОстаткиПереоценокВА(ТаблицаОС, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаОС

	СписокОбязательныхКолонок = ""
	+ "ВнеоборотныйАктив," 					
	+ "СуммаПереоценкиСтоимостиОстаток," 						
	+ "СуммаПереоценкиАмортизацииОстаток,"
	+ "ДокументПереоценки";

	Параметры.Вставить("ТаблицаОС",
		ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаОС, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"             						  
	+ "Организация,"   								  
	+ "СтруктурноеПодразделениеОтправитель," 					  
	+ "СтруктурноеПодразделениеПолучатель";  					  
	
	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

// ПЕРЕМЕЩЕНИЕ ОС РЕЗЕРВЫ ПО ПЕРЕОЦЕНКЕ ОС

Процедура СформироватьДвиженияПеремещениеОСРезервыПоПереоценкеОС(ТаблицаОС, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыПеремещениеОСРезервыПоПереоценкеОС(ТаблицаОС, ТаблицаРеквизиты);

	Если Параметры.ТаблицаОС.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Реквизиты = Параметры.Реквизиты[0];

	Для каждого СтрокаТаблицы Из Параметры.ТаблицаОС Цикл
		
		Проводка = Движения.Типовой.Добавить();
		
		Проводка.Период       = Реквизиты.Период;
		Проводка.Организация  = Реквизиты.Организация;
		ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				Проводка, Реквизиты.СтруктурноеПодразделениеОтправитель, Реквизиты.СтруктурноеПодразделениеПолучатель);

		Проводка.Содержание   = НСтр("ru = 'Перемещение резерва переоценки'", ОбщегоНазначения.КодОсновногоЯзыка());
		Проводка.НомерЖурнала = НСтр("ru = 'ОС'", ОбщегоНазначения.КодОсновногоЯзыка());
		Проводка.Сумма        = СтрокаТаблицы.СуммаОстатокКт;
		
		Проводка.СчетДт = ПланыСчетов.Типовой.РезервНаПереоценкуОсновныхСредств;		
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", СтрокаТаблицы.Субконто1);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ВидыИзмененийВСобственномКапитале", Перечисления.ВидыИзмененийВСобственномКапитале.ПереоценкаОсновныхСредств);
		
		Проводка.СчетКт = ПланыСчетов.Типовой.РезервНаПереоценкуОсновныхСредств;
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", СтрокаТаблицы.Субконто1);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ВидыИзмененийВСобственномКапитале", Перечисления.ВидыИзмененийВСобственномКапитале.ПереоценкаОсновныхСредств);


	КонецЦикла;

	Движения.Типовой.Записывать = Истина;

КонецПроцедуры

Функция ПодготовитьПараметрыПеремещениеОСРезервыПоПереоценкеОС(ТаблицаОС, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаОС

	СписокОбязательныхКолонок = ""
	+ "Субконто1," 					
	+ "СуммаОстатокКт";

	Параметры.Вставить("ТаблицаОС",
		ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаОС, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"             						  
	+ "Организация,"   								  
	+ "СтруктурноеПодразделениеОтправитель," 					  
	+ "СтруктурноеПодразделениеПолучатель";  					  
	
	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

// ПЕРЕМЕЩЕНИЕ ОС СТОИМОСТЬ ОС БУ

Процедура СформироватьДвиженияПеремещениеОССтоимостьОСБУ(ТаблицаОС, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыПеремещениеОССтоимостьОСБУ(ТаблицаОС, ТаблицаРеквизиты);

	Если Параметры.ТаблицаОС.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Реквизиты = Параметры.Реквизиты[0];

	Для каждого СтрокаТаблицы Из Параметры.ТаблицаОС Цикл
		
		Если СтрокаТаблицы.СтоимостьБУ <> 0 Тогда
			Проводка = Движения.Типовой.Добавить();
			
			Проводка.Период       = Реквизиты.Период;
			Проводка.Активность   = Истина;
			Проводка.Организация  = Реквизиты.Организация;
			Проводка.Содержание   = НСтр("ru = 'Перемещение стоимости ОС'", ОбщегоНазначения.КодОсновногоЯзыка());
			Проводка.НомерЖурнала = НСтр("ru = 'ОС'", ОбщегоНазначения.КодОсновногоЯзыка());
			Проводка.Сумма        = СтрокаТаблицы.СтоимостьБУ;
			
			Проводка.СчетДт = СтрокаТаблицы.СчетУчетаБУ;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", СтрокаТаблицы.ОсновноеСредство);
			// на тот случай если счет ОС, имеет субконто "Внеоборотные активы" а не "Основные средства", н-р счет 1510
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ВнеоборотныеАктивы", СтрокаТаблицы.ОсновноеСредство);
						
			Проводка.СчетКт = СтрокаТаблицы.СчетУчетаБУ;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", СтрокаТаблицы.ОсновноеСредство);
			// на тот случай если счет ОС, имеет субконто "Внеоборотные активы" а не "Основные средства", н-р счет 1510
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ВнеоборотныеАктивы", СтрокаТаблицы.ОсновноеСредство);
			
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделениеПроводки(Проводка, СтрокаТаблицы.СтруктурноеПодразделение, "Кт");
	        
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделениеПроводки(Проводка, СтрокаТаблицы.КорСтруктурноеПодразделение, "Дт");
			
			Если Реквизиты.ВедетсяАналитическийУчетОСПоПодразделениям Тогда
				
				Если НЕ Реквизиты.НачальноеЗаполнениеАналитикиНаСчетахУчетаОС Тогда
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Подразделения", СтрокаТаблицы.НовыйПодразделениеОрганизации);
				    ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Подразделения", СтрокаТаблицы.ПодразделениеОрганизации);
				Иначе
					// при НачальноеЗаполнениеАналитикиОС в аналитку "куда" записываются текущие данные
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Подразделения", СтрокаТаблицы.ПодразделениеОрганизации);
					
					// аналитика "откуда" тоже заполняется тек. данными, если до оформления уже была включен соответствующий аналит. учет
					Если Реквизиты.РанееВедетсяАналитическийУчетОСПоПодразделениям Тогда
						ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Подразделения", СтрокаТаблицы.ПодразделениеОрганизации);
					КонецЕсли;	
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если Реквизиты.ВедетсяАналитическийУчетОСПоМОЛ Тогда
				Если Не Реквизиты.НачальноеЗаполнениеАналитикиНаСчетахУчетаОС Тогда
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "РаботникиОрганизаций", СтрокаТаблицы.НовыйМОЛОрганизации);
				    ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "РаботникиОрганизаций", СтрокаТаблицы.МОЛОрганизации);
				Иначе
					// при НачальноеЗаполнениеАналитикиОС в аналитку "куда" записываются текущие данные
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "РаботникиОрганизаций", СтрокаТаблицы.МОЛОрганизации);
					
					// аналитика "откуда" тоже заполняется тек. данными, если до оформления уже была включен соответствующий аналит. учет
					Если Реквизиты.РанееВедетсяАналитическийУчетОСПоМОЛ Тогда
						ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "РаботникиОрганизаций", СтрокаТаблицы.МОЛОрганизации);
					КонецЕсли;
				КонецЕсли;	
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Движения.Типовой.Записывать = Истина;

КонецПроцедуры

Функция ПодготовитьПараметрыПеремещениеОССтоимостьОСБУ(ТаблицаОС, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаОС

	СписокОбязательныхКолонок = ""
	+ "СтоимостьБУ," 					
	+ "СчетУчетаБУ," 					
	+ "ОсновноеСредство," 					
	+ "СтруктурноеПодразделение," 					  
	+ "КорСтруктурноеПодразделение,"
	+ "ПодразделениеОрганизации," 					
	+ "НовыйПодразделениеОрганизации," 					
	+ "МОЛОрганизации," 					
	+ "НовыйМОЛОрганизации";
	
	Параметры.Вставить("ТаблицаОС",
		ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаОС, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"             						  
	+ "Организация,"   								  
	+ "НачальноеЗаполнениеАналитикиНаСчетахУчетаОС,"
	+ "ВедетсяАналитическийУчетОСПоПодразделениям,"
	+ "РанееВедетсяАналитическийУчетОСПоПодразделениям,"
	+ "ВедетсяАналитическийУчетОСПоМОЛ,"
	+ "РанееВедетсяАналитическийУчетОСПоМОЛ";  					  
	
	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

// ПОСТУПЛЕНИЕ ОС

Процедура СформироватьДвиженияПоступлениеОС(ТаблицаОС, ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Параметры = ПодготовитьПараметрыПоступлениеОС(ТаблицаОС, ТаблицаРеквизиты);
	
	Если Параметры.ТаблицаОС.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = Параметры.Реквизиты[0];
	
	Для Каждого СтрокаТаблицы Из Параметры.ТаблицаОС Цикл
		
		// Проводки по поступлению ОС
		Проводка = Движения.Типовой.Добавить();
		
		Проводка.Период       = Реквизиты.Период;
		Проводка.Организация  = Реквизиты.Организация;
		Проводка.Содержание   = СтрокаТаблицы.Содержание;
		Проводка.Сумма        = СтрокаТаблицы.Сумма;
		
		Проводка.СчетДт       = СтрокаТаблицы.СчетУчетаБУ;
	 	ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаТаблицы.ОсновноеСредство);
		
		Если Реквизиты.ВедетсяАналитУчетОсПоПодразделениям Тогда
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Подразделения", СтрокаТаблицы.ПодразделениеОрганизации);
		КонецЕсли;
		
		Если Реквизиты.ВедетсяАналитУчетОсПоМОЛ Тогда
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "РаботникиОрганизаций", СтрокаТаблицы.МОЛОрганизации);
		КонецЕсли;
		
		ПроцедурыБухгалтерскогоУчета.УстановитьПодразделениеПроводки(
			Проводка, Реквизиты.СтруктурноеПодразделение, "Дт");
			
		Если СтрокаТаблицы.СчетУчетаБУЗабалансовый Тогда 
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Контрагенты",Реквизиты.Контрагент);			
		Иначе 
			Проводка.СчетКт       = Реквизиты.СчетУчетаРасчетовСКонтрагентом;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Контрагенты"					 , Реквизиты.Контрагент, Истина);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Договоры"						 , Реквизиты.ДоговорКонтрагента);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ДокументыРасчетовСКонтрагентами", Реквизиты.Регистратор);
	
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделениеПроводки(
				Проводка, Реквизиты.СтруктурноеПодразделение, "Кт");
			
			Если ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт).Валютный Тогда
				Проводка.ВалютаКт = Реквизиты.ВалютаВзаиморасчетов;
				Проводка.ВалютнаяСуммаКт = СтрокаТаблицы.СуммаВзаиморасчетов;
			КонецЕсли;
		КонецЕсли;
		
		
		// Налоговый учет
		Если НЕ СтрокаТаблицы.СчетУчетаБУЗабалансовый И Реквизиты.НеобходимостьОтраженияВНУ Тогда		
			// Поступление комиссионного товара не отражаем в НУ
			
			Если ЗначениеЗаполнено(СтрокаТаблицы.СчетУчетаНУ) Тогда
				ПроводкаНУ = Движения.Налоговый.Добавить();
				
				ПроводкаНУ.Период       = Реквизиты.Период;
				ПроводкаНУ.Организация  = Реквизиты.Организация;	
				ПроводкаНУ.Содержание   = СтрокаТаблицы.Содержание;
				
				ПроводкаНУ.СчетДт       = СтрокаТаблицы.СчетУчетаНУ;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 1, СтрокаТаблицы.ОсновноеСредство);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "ВидыДвиженияСтоимостиФА", ?(Реквизиты.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ОтСтруктурногоПодразделения, Перечисления.ВидыДвиженияСтоимостиФА.Перемещение, Перечисления.ВидыДвиженияСтоимостиФА.Поступление));
				
				ПроводкаНУ.СчетКт       = ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьСчетРасчетовСКонтрагентомНУ(Реквизиты.СчетУчетаРасчетовСКонтрагентом);				
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт,"Контрагенты", Реквизиты.Контрагент);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт,"Договоры", Реквизиты.ДоговорКонтрагента);
				
				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				ПроводкаНУ, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);
				
				Если Реквизиты.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ОтСтруктурногоПодразделения Тогда
					ПроводкаНУ.Сумма = СтрокаТаблицы.СуммаНУ;
				Иначе	
					ПроводкаНУ.Сумма = СтрокаТаблицы.Сумма;
				КонецЕсли;
				ПроцедурыНалоговогоУчета.ВидУчетаНУ(ПроводкаНУ, Реквизиты.ВидУчетаНУ);				
				
				// При поступлении из СП в стоимости может быть ВР- и ПР-составляющая, отразим ее поступление
				Если Реквизиты.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ОтСтруктурногоПодразделения  Тогда
					СуммаВР = СтрокаТаблицы.Сумма - СтрокаТаблицы.СуммаНУ - СтрокаТаблицы.СуммаПР;
					Если СуммаВР <> 0  Тогда
						ПроводкаНУ = Движения.Налоговый.Добавить();
						
						ПроводкаНУ.Период       = Реквизиты.Период;
						ПроводкаНУ.Организация  = Реквизиты.Организация;	
						ПроводкаНУ.Содержание   = СтрокаТаблицы.Содержание;
						
						ПроводкаНУ.СчетДт       = СтрокаТаблицы.СчетУчетаНУ;
						ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 1, СтрокаТаблицы.ОсновноеСредство);
						ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "ВидыДвиженияСтоимостиФА", ?(Реквизиты.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ОтСтруктурногоПодразделения, Перечисления.ВидыДвиженияСтоимостиФА.Перемещение, Перечисления.ВидыДвиженияСтоимостиФА.Поступление));
						
						ПроводкаНУ.СчетКт       = ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьСчетРасчетовСКонтрагентомНУ(Реквизиты.СчетУчетаРасчетовСКонтрагентом);				
						ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт,"Контрагенты", Реквизиты.Контрагент);
						ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт,"Договоры", Реквизиты.ДоговорКонтрагента);
						
						ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
						ПроводкаНУ, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);

						ПроводкаНУ.Сумма = СуммаВР;
						
						ПроводкаНУ.ВидУчетаДт = Справочники.ВидыУчетаНУ.ВР;
						ПроцедурыНалоговогоУчета.ВидУчетаНУ(ПроводкаНУ, Реквизиты.ВидУчетаНУ);
					КонецЕсли;	
					
					Если СтрокаТаблицы.СуммаПР <> 0 Тогда
						ПроводкаНУ = Движения.Налоговый.Добавить();
						
						ПроводкаНУ.Период       = Реквизиты.Период;
						ПроводкаНУ.Организация  = Реквизиты.Организация;	
						ПроводкаНУ.Содержание   = СтрокаТаблицы.Содержание;
						
						ПроводкаНУ.СчетДт       = СтрокаТаблицы.СчетУчетаНУ;
						ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 1, СтрокаТаблицы.ОсновноеСредство);
						ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "ВидыДвиженияСтоимостиФА", ?(Реквизиты.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ОтСтруктурногоПодразделения, Перечисления.ВидыДвиженияСтоимостиФА.Перемещение, Перечисления.ВидыДвиженияСтоимостиФА.Поступление));
						
						ПроводкаНУ.СчетКт       = ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьСчетРасчетовСКонтрагентомНУ(Реквизиты.СчетУчетаРасчетовСКонтрагентом);				
						ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт,"Контрагенты", Реквизиты.Контрагент);
						ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт,"Договоры", Реквизиты.ДоговорКонтрагента);
						
						ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
						ПроводкаНУ, Реквизиты.СтруктурноеПодразделение, Реквизиты.СтруктурноеПодразделение);
		
						ПроводкаНУ.Сумма = СтрокаТаблицы.СуммаПР;

						ПроводкаНУ.ВидУчетаДт = Справочники.ВидыУчетаНУ.НеОтражаетсяВНУ;
						ПроцедурыНалоговогоУчета.ВидУчетаНУ(ПроводкаНУ, Реквизиты.ВидУчетаНУ);
					КонецЕсли;	
				КонецЕсли;	
			КонецЕсли; 	
		КонецЕсли;
	
	КонецЦикла;
	
	Движения.Типовой.Записывать = Истина;
	Если Реквизиты.НеобходимостьОтраженияВНУ Тогда 
		Движения.Налоговый.Записывать = Истина;
	КонецЕсли;
	
КонецПроцедуры

Функция ПодготовитьПараметрыПоступлениеОС(ТаблицаОС, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаОС

	СписокОбязательныхКолонок = ""
	+ "НомерСтроки,"       				// <Число> - номер строки в списке
	+ "ОсновноеСредство,"      			// <СправочникСсылка.ОсновноеСредство> - оприходуемый ОС
	+ "Сумма,"             				// <Число,15,2> - сумма в тенге
	+ "СуммаПР,"             			// <Число,15,2> - сумма в тенге
	+ "СуммаНУ,"             			// <Число,15,2> - сумма в тенге
	+ "СуммаВзаиморасчетов,"            // <Число,15,2> - сумма в валюте взаиморасчетов
	+ "Количество,"        				// <Число,15,3> - количество оприходуемого товара
	+ "СчетУчетаБУ,"         			// <ПланСчетовСсылка.Типовой> - счет учета, на который приходуется товар
	+ "СчетУчетаНУ,"        			// <ПланСчетовСсылка.Налоговый> - счет учета, на который приходуется товар
	+ "Содержание,"        				// <Строка,150> - содержание проводки
	+ "ПодразделениеОрганизации,"		// <СправочникСсылка.ПодразделениеОрганизации> - Подразделение организации
	+ "МОЛОрганизации,"					// <СправочникСсылка.ФизическиеЛица> - Физические лица
	+ "СчетУчетаБУЗабалансовый";		// <Булево> - Признак того, что счет является забалансовым
	
	Параметры.Вставить("ТаблицаОС",
		ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаОС, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Регистратор,"                  	 	// <ДокументСсылка.*> - документ-регистратор движений
	+ "Период,"                       	 	// <Дата> - период движений - дата документа
	+ "Организация,"                  	 	// <СправочникСсылка.Организация> - организация, в которую приходуется товар
	+ "Контрагент,"                  	 	// <СправочникСсылка.Контрагенты> - контрагент - поставщик
	+ "ДоговорКонтрагента,"              	// <СправочникСсылка.Организация> - договор контрагента, в рамках которого выполняется поставка
	+ "НеобходимостьОтраженияВНУ,"  	 	// <Булево> - определяет необходимость отражения в НУ
	+ "ВалютаВзаиморасчетов,"  			 	// <СправочникСсылка.Валюты> - валюта документа
	+ "ВидУчетаНУ,"  					 	// <СправочникСсылка.ВидыУчетаНУ> - вид учета, указанный в документе
	+ "СтруктурноеПодразделение,"  		 	// <СправочникСсылка.ПодразделенияОрганизаций> - структурное подразделение организации
	+ "Склад,"                    		 	// <СправочникСсылка.Склады> - склад, на который приходуется товар
	+ "ВидОперации,"                    	// <ПеречислениеСсылка.ВидыОперацийПоступлениеТоваровУслуг> - вид операции документа
	+ "ВедетсяАналитУчетОсПоПодразделениям,"// <Булево> - определяет необходимость отражения аналитики по Подразделению
	+ "ВедетсяАналитУчетОсПоМОЛ,"           // <Булево> - определяет необходимость отражения аналитики по МОЛ
	+ "СчетУчетаРасчетовСКонтрагентом,"  	// <ПланСчетовСсылка.Типовой> - счет на котором ведутся расчеты с контрагентом по задолженности
	+ "СчетУчетаРасчетовПоАвансам";		 	// <ПланСчетовСсылка.Типовой> - счет на котором ведутся расчеты с контрагентом по авансам

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ АМОРТИЗАЦИИ ОС

// Расчитывает сумму амортизации по указаному основному средству по бух учету
//
// Параметры
//  ОсновноеСредство                            - СправочникСсылка.ОсновныеСредства - ОС, по которому 
//                                                нужно рассчитать амортизацию.
//  ДатаРасчета                                 - Дата - Дата расчета амортизации
//
// Возвращаемое значение:
//   Число - Сумма начисленной амортизации
//
Функция ПодготовитьТаблицуАмортизацияОС(ДатаРасчета, Организация, СтруктурноеПодразделение, ОсновноеСредство = Неопределено, 
									ВыдаватьСообщения = Истина, ДокОбъект = Неопределено) Экспорт

	ТаблицаАмортизации = Новый ТаблицаЗначений();

	ТаблицаАмортизации.Колонки.Добавить("ОС",							Новый ОписаниеТипов("СправочникСсылка.ОсновныеСредства"));
	ТаблицаАмортизации.Колонки.Добавить("СтруктурноеПодразделение",		Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	ТаблицаАмортизации.Колонки.Добавить("СчетУчетаБУ",					Новый ОписаниеТипов("ПланСчетовСсылка.Типовой"));
	ТаблицаАмортизации.Колонки.Добавить("СчетАмортизацииБУ",			Новый ОписаниеТипов("ПланСчетовСсылка.Типовой"));
	ТаблицаАмортизации.Колонки.Добавить("НаправлениеАмортизации", 		Новый ОписаниеТипов("СправочникСсылка.СпособыОтраженияРасходовПоАмортизации"));
	ТаблицаАмортизации.Колонки.Добавить("ПризнакФиксированногоАктива",  Новый ОписаниеТипов("Булево"));
	ТаблицаАмортизации.Колонки.Добавить("Бух",                    		ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
	
	// колонка ТекущееПодразделение содержит подразделение, в котором числится ОС.
	// подставляется в качестве аналитики при отражении расходов по амортизации, если соответствующая
	// аналитика в справочнике не заполнена
	ТаблицаАмортизации.Колонки.Добавить("ТекущееПодразделение",			Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	ТаблицаАмортизации.Колонки.Добавить("ТекущийМОЛ",					Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	
	// определим признак применения параметров амортизации в тек. месяце
	ПрименятьПараметрыАмортизацииВТекМесяце = УчетнаяПолитикаСервер.ПрименятьПараметрыНачисленияАмортизацииВМесяцеИзменения(Организация, ДатаРасчета); 
	ПериодПараметровАмортизации = ?(ПрименятьПараметрыАмортизацииВТекМесяце, Новый Граница(КонецМесяца(ДатаРасчета)), НачалоМесяца(ДатаРасчета));
	
	Запрос = Новый Запрос();
	
	Запрос.УстановитьПараметр("НачалоГода",                  НачалоГода(ДатаРасчета));
	Запрос.УстановитьПараметр("Организация",                 Организация);
	Запрос.УстановитьПараметр("СтруктурноеПодразделение",    СтруктурноеПодразделение);
	Запрос.УстановитьПараметр("НачалоПериода",               НачалоМесяца(ДатаРасчета));
	Запрос.УстановитьПараметр("КонецПериода",              	 Новый Граница(КонецМесяца(ДатаРасчета)));
	Запрос.УстановитьПараметр("Период",                    	 ДатаРасчета);
	Запрос.УстановитьПараметр("СнятоСУчета",                 Перечисления.ВидыСостоянийОС.СнятоСУчета);
	Запрос.УстановитьПараметр("ПериодПараметровАмортизации", ПериодПараметровАмортизации);
	
	// Выбывший актив может иметь стоимостной баланс и участвовать в учете ст. 
	СостоянияФА = Новый СписокЗначений();	
	СостоянияФА.Добавить(Перечисления.ВидыСостоянийФА.ПринятКУчету);
	СостоянияФА.Добавить(Перечисления.ВидыСостоянийФА.Выбыл);                  	
	Запрос.УстановитьПараметр("СостоянияФА", СостоянияФА);	
	
	Если ОсновноеСредство = Неопределено Тогда
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
					   |	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
					   |ИЗ
					   |	РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(&Период, ) КАК ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних
					   |ГДЕ
					   |	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.Организация = &Организация
					   |	И ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.СтруктурноеПодразделение = &СтруктурноеПодразделение";
		ОсновноеСредство = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ОсновноеСредство");
	КонецЕсли;

	Запрос.УстановитьПараметр("ОсновноеСредство", ОсновноеСредство);
	ТекстУсловия = " И ОсновноеСредство В (&ОсновноеСредство)";
	ТекстУсловияПереоценки = " И ВнеоборотныйАктив В (&ОсновноеСредство)"; 
	
	СубконтоОС = Новый Массив();
	СубконтоОС.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.ОсновныеСредства);
	Запрос.УстановитьПараметр("СубконтоОС", СубконтоОС);
	 
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СостоянияОСОрганизаций.ОсновноеСредство КАК ОсновноеСредство
	|ПОМЕСТИТЬ СнятыеСУчета
	|ИЗ
	|	РегистрСведений.СостоянияОСОрганизаций.СрезПоследних(
	|			&Период,
	|			Организация = &Организация) КАК СостоянияОСОрганизаций
	|ГДЕ
	|	СостоянияОСОрганизаций.Состояние = &СнятоСУчета
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НачислениеАмортизацииБухгалтерскийУчетСрезПоследних.ОсновноеСредство КАК ОсновноеСредство
	|ПОМЕСТИТЬ СписокОС
	|ИЗ
	|	РегистрСведений.НачислениеАмортизацииОСБухгалтерскийУчет.СрезПоследних(
	|			&ПериодПараметровАмортизации,
	|			Организация = &Организация " + ТекстУсловия + " 
	|				И (НЕ ОсновноеСредство В
	|						(ВЫБРАТЬ
	|							СнятыеСУчета.ОсновноеСредство
	|						ИЗ
	|							СнятыеСУчета))) КАК НачислениеАмортизацииБухгалтерскийУчетСрезПоследних
	|ГДЕ
	|	НачислениеАмортизацииБухгалтерскийУчетСрезПоследних.НачислятьАмортизацию = ИСТИНА
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних.ОсновноеСредство КАК ОсновноеСредство,
	|	ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних.ИнвентарныйНомер,
	|	ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних.СпособНачисленияАмортизации,
	|	ЕСТЬNULL(ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних.ПервоначальнаяСтоимость, 0) КАК ПервоначальнаяСтоимость,
	|	ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних.ПараметрВыработки
	|ПОМЕСТИТЬ ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних
	|ИЗ
	|	РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(&ПериодПараметровАмортизации, Организация = &Организация) КАК ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СписокОС КАК СписокОС
	|		ПО ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних.ОсновноеСредство = СписокОС.ОсновноеСредство
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство,
	|	ПараметрВыработки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВыработкаОСОбороты.ОсновноеСредство КАК ОсновноеСредство,
	|	ВыработкаОСОбороты.ПараметрВыработки,
	|	ЕСТЬNULL(ВыработкаОСОбороты.КоличествоОборот, 0) КАК КоличествоОборот
	|ПОМЕСТИТЬ ВыработкаОСОбороты
	|ИЗ
	|	РегистрНакопления.ВыработкаОС.Обороты(&НачалоПериода, &КонецПериода, , ) КАК ВыработкаОСОбороты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СписокОС КАК СписокОС
	|		ПО ВыработкаОСОбороты.ОсновноеСредство = СписокОС.ОсновноеСредство
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних КАК ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних
	|		ПО ВыработкаОСОбороты.ПараметрВыработки = ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних.ПараметрВыработки
	|			И ВыработкаОСОбороты.ОсновноеСредство = ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних.ОсновноеСредство
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство КАК ОсновноеСредство,
	|	ЕСТЬNULL(ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.СрокИспользованияДляВычисленияАмортизации, 0) КАК СрокИспользованияДляВычисленияАмортизации,
	|	ЕСТЬNULL(ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.СтоимостьДляВычисленияАмортизации, 0) КАК СтоимостьДляВычисленияАмортизации,
	|	ЕСТЬNULL(ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.ЛиквидационнаяСтоимость, 0) КАК ЛиквидационнаяСтоимость,
	|	ЕСТЬNULL(ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.ОбъемПродукцииРаботДляВычисленияАмортизации, 0) КАК ОбъемПродукцииРаботДляВычисленияАмортизации,
	|	ЕСТЬNULL(ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.КоэффициентАмортизации, 0) КАК КоэффициентАмортизации,
	|	ЕСТЬNULL(ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.КоэффициентУскорения, 0) КАК КоэффициентУскорения,
	|	ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.Период
	|ПОМЕСТИТЬ ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних
	|ИЗ
	|	РегистрСведений.ПараметрыАмортизацииОСБухгалтерскийУчет.СрезПоследних(&ПериодПараметровАмортизации, Организация = &Организация) КАК ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СписокОС КАК СписокОС
	|		ПО ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство = СписокОС.ОсновноеСредство
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ГрафикиАмортизацииБухгалтерскийУчетСрезПоследних.ОсновноеСредство КАК ОсновноеСредство,
	|	ГрафикиАмортизацииБухгалтерскийУчетСрезПоследних.ГрафикАмортизации
	|ПОМЕСТИТЬ ГрафикиАмортизацииБухгалтерскийУчетСрезПоследних
	|ИЗ
	|	РегистрСведений.ГрафикиАмортизацииОСБухгалтерскийУчет.СрезПоследних(&ПериодПараметровАмортизации, Организация = &Организация) КАК ГрафикиАмортизацииБухгалтерскийУчетСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СписокОС КАК СписокОС
	|		ПО ГрафикиАмортизацииБухгалтерскийУчетСрезПоследних.ОсновноеСредство = СписокОС.ОсновноеСредство
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство КАК ОсновноеСредство,
	|	СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетСрезПоследних.СпособОтраженияРасходовПоАмортизации
	|ПОМЕСТИТЬ СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетСрезПоследних
	|ИЗ
	|	РегистрСведений.СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчет.СрезПоследних(&ПериодПараметровАмортизации, Организация = &Организация) КАК СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СписокОС КАК СписокОС
	|		ПО СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство = СписокОС.ОсновноеСредство
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СчетаУчетаОсновныхСредствСрезПоследних.ОсновноеСредство КАК ОсновноеСредство,
	|	СчетаУчетаОсновныхСредствСрезПоследних.СчетУчетаБУ,
	|	СчетаУчетаОсновныхСредствСрезПоследних.СчетНачисленияАмортизацииБУ
	|ПОМЕСТИТЬ СчетаУчетаОсновныхСредствСрезПоследних
	|ИЗ
	|	РегистрСведений.СчетаУчетаОС.СрезПоследних(&ПериодПараметровАмортизации, Организация = &Организация) КАК СчетаУчетаОсновныхСредствСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СписокОС КАК СписокОС
	|		ПО СчетаУчетаОсновныхСредствСрезПоследних.ОсновноеСредство = СписокОС.ОсновноеСредство
	|				
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СтоимостьОСНачалоПериода.Субконто1 КАК ОсновноеСредство,
	|	ЕСТЬNULL(СтоимостьОСНачалоПериода.СуммаОстатокДт, 0) КАК СтоимостьНачальныйОстаток
	|ПОМЕСТИТЬ СтоимостьОСНачалоПериода
	|ИЗ
	|	РегистрБухгалтерии.Типовой.Остатки(
	|			&НачалоПериода,
	|			Счет В
	|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					СчетаУчетаОсновныхСредствСрезПоследних.СчетУчетаБУ
	|				ИЗ
	|					СчетаУчетаОсновныхСредствСрезПоследних),
	|			&СубконтоОС,
	|			Организация = &Организация) КАК СтоимостьОСНачалоПериода
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СписокОС КАК СписокОС
	|		ПО СтоимостьОСНачалоПериода.Субконто1 = СписокОС.ОсновноеСредство
	|			
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СчетаУчетаОсновныхСредствСрезПоследних КАК СчетаУчетаОсновныхСредствСрезПоследних
	|		ПО СтоимостьОСНачалоПериода.Субконто1 = СчетаУчетаОсновныхСредствСрезПоследних.ОсновноеСредство	
	|		И СтоимостьОСНачалоПериода.Счет 	  = СчетаУчетаОсновныхСредствСрезПоследних.СчетУчетаБУ
	|
	//|ИНДЕКСИРОВАТЬ ПО
	//|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СтоимостьОСКонецПериода.Субконто1 КАК ОсновноеСредство,
	|	ЕСТЬNULL(СтоимостьОСКонецПериода.СуммаОстатокДт, 0) КАК СтоимостьКонечныйОстаток
	|ПОМЕСТИТЬ СтоимостьОСКонецПериода
	|ИЗ
	|	РегистрБухгалтерии.Типовой.Остатки(
	|			&КонецПериода,
	|			Счет В
	|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					СчетаУчетаОсновныхСредствСрезПоследних.СчетУчетаБУ
	|				ИЗ
	|					СчетаУчетаОсновныхСредствСрезПоследних),
	|			&СубконтоОС,
	|			Организация = &Организация) КАК СтоимостьОСКонецПериода
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СписокОС КАК СписокОС
	|		ПО СтоимостьОСКонецПериода.Субконто1 = СписокОС.ОсновноеСредство
	|			
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СчетаУчетаОсновныхСредствСрезПоследних КАК СчетаУчетаОсновныхСредствСрезПоследних
	|		ПО СтоимостьОСКонецПериода.Субконто1 = СчетаУчетаОсновныхСредствСрезПоследних.ОсновноеСредство	
	|		И СтоимостьОСКонецПериода.Счет 	  = СчетаУчетаОсновныхСредствСрезПоследних.СчетУчетаБУ

	|
	//|ИНДЕКСИРОВАТЬ ПО
	//|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	АмортизацияОСНачалоПериода.Субконто1 КАК ОсновноеСредство,
	|	ЕСТЬNULL(АмортизацияОСНачалоПериода.СуммаОстатокКт, 0) КАК АмортизацияНачальныйОстаток
	|ПОМЕСТИТЬ АмортизацияОСНачалоПериода
	|ИЗ
	|	РегистрБухгалтерии.Типовой.Остатки(
	|			&НачалоПериода,
	|			Счет В
	|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					СчетаУчетаОсновныхСредствСрезПоследних.СчетНачисленияАмортизацииБУ
	|				ИЗ
	|					СчетаУчетаОсновныхСредствСрезПоследних),
	|			&СубконтоОС,
	|			Организация = &Организация) КАК АмортизацияОСНачалоПериода
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СписокОС КАК СписокОС
	|		ПО АмортизацияОСНачалоПериода.Субконто1 = СписокОС.ОсновноеСредство
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СчетаУчетаОсновныхСредствСрезПоследних КАК СчетаУчетаОсновныхСредствСрезПоследних
	|		ПО АмортизацияОСНачалоПериода.Субконто1 = СчетаУчетаОсновныхСредствСрезПоследних.ОсновноеСредство	
	|		И АмортизацияОСНачалоПериода.Счет 	  = СчетаУчетаОсновныхСредствСрезПоследних.СчетНачисленияАмортизацииБУ
	|
	//|ИНДЕКСИРОВАТЬ ПО
	//|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	АмортизацияОСКонецПериода.Субконто1 КАК ОсновноеСредство,
	|	ЕСТЬNULL(АмортизацияОСКонецПериода.СуммаОстатокКт, 0) КАК АмортизацияКонечныйОстаток
	|ПОМЕСТИТЬ АмортизацияОСКонецПериода
	|ИЗ
	|	РегистрБухгалтерии.Типовой.Остатки(
	|			&КонецПериода,
	|			Счет В
	|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					СчетаУчетаОсновныхСредствСрезПоследних.СчетНачисленияАмортизацииБУ
	|				ИЗ
	|					СчетаУчетаОсновныхСредствСрезПоследних),
	|			&СубконтоОС,
	|			Организация = &Организация) КАК АмортизацияОСКонецПериода
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СписокОС КАК СписокОС
	|		ПО АмортизацияОСКонецПериода.Субконто1 = СписокОС.ОсновноеСредство
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СчетаУчетаОсновныхСредствСрезПоследних КАК СчетаУчетаОсновныхСредствСрезПоследних
	|		ПО АмортизацияОСКонецПериода.Субконто1 = СчетаУчетаОсновныхСредствСрезПоследних.ОсновноеСредство	
	|		И АмортизацияОСКонецПериода.Счет 	  = СчетаУчетаОсновныхСредствСрезПоследних.СчетНачисленияАмортизацииБУ
	|
	//|ИНДЕКСИРОВАТЬ ПО
	//|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	АмортизацияОСОбороты.Субконто1 КАК ОсновноеСредство,
	|	ЕСТЬNULL(АмортизацияОСОбороты.СуммаОборотКт, 0) КАК АмортизацияОборот
	|ПОМЕСТИТЬ АмортизацияОСОбороты
	|ИЗ
	|	РегистрБухгалтерии.Типовой.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			Период,
	|			Счет В
	|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					СчетаУчетаОсновныхСредствСрезПоследних.СчетНачисленияАмортизацииБУ
	|				ИЗ
	|					СчетаУчетаОсновныхСредствСрезПоследних),
	|			&СубконтоОС,
	|			Организация = &Организация,
	|			,
	|			) КАК АмортизацияОСОбороты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СписокОС КАК СписокОС
	|		ПО АмортизацияОСОбороты.Субконто1 = СписокОС.ОсновноеСредство
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СчетаУчетаОсновныхСредствСрезПоследних КАК СчетаУчетаОсновныхСредствСрезПоследних
	|		ПО АмортизацияОСОбороты.Субконто1 = СчетаУчетаОсновныхСредствСрезПоследних.ОсновноеСредство	
	|		И АмортизацияОСОбороты.Счет 	  = СчетаУчетаОсновныхСредствСрезПоследних.СчетНачисленияАмортизацииБУ

	|
	//|ИНДЕКСИРОВАТЬ ПО
	//|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СчетаУчетаОсновныхСредствСрезПоследнихНаНачалоГода.ОсновноеСредство КАК ОсновноеСредство,
	|	СчетаУчетаОсновныхСредствСрезПоследнихНаНачалоГода.СчетУчетаБУ КАК СчетУчетаБУ,
	|	СчетаУчетаОсновныхСредствСрезПоследнихНаНачалоГода.СчетНачисленияАмортизацииБУ КАК СчетНачисленияАмортизацииБУ
	|ПОМЕСТИТЬ СчетаУчетаОсновныхСредствСрезПоследнихНаНачалоГода
	|ИЗ
	|	РегистрСведений.СчетаУчетаОС.СрезПоследних(&НачалоГода, Организация = &Организация) КАК СчетаУчетаОсновныхСредствСрезПоследнихНаНачалоГода
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СписокОС КАК СписокОС
	|		ПО СчетаУчетаОсновныхСредствСрезПоследнихНаНачалоГода.ОсновноеСредство = СписокОС.ОсновноеСредство
	|
	//|ИНДЕКСИРОВАТЬ ПО
	//|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СтоимостьНаНачалоГода.Субконто1 КАК ОсновноеСредство,
	|	ЕСТЬNULL(СтоимостьНаНачалоГода.СуммаОстатокДт, 0) КАК СтоимостьОстатокНаНачалоГода
	|ПОМЕСТИТЬ СтоимостьНаНачалоГода
	|ИЗ
	|	РегистрБухгалтерии.Типовой.Остатки(
	|			&НачалоГода,
	|			Счет В
	|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					СчетаУчетаОсновныхСредствСрезПоследнихНаНачалоГода.СчетУчетаБУ
	|				ИЗ
	|					СчетаУчетаОсновныхСредствСрезПоследнихНаНачалоГода),
	|			&СубконтоОС,
	|			Организация = &Организация) КАК СтоимостьНаНачалоГода
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СписокОС КАК СписокОС
	|		ПО СтоимостьНаНачалоГода.Субконто1 = СписокОС.ОсновноеСредство
	|			
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СчетаУчетаОсновныхСредствСрезПоследнихНаНачалоГода КАК СчетаУчетаОсновныхСредствСрезПоследнихНаНачалоГода
	|		ПО СтоимостьНаНачалоГода.Субконто1 = СчетаУчетаОсновныхСредствСрезПоследнихНаНачалоГода.ОсновноеСредство	
	|		И СтоимостьНаНачалоГода.Счет 	   = СчетаУчетаОсновныхСредствСрезПоследнихНаНачалоГода.СчетУчетаБУ
	|
	//|ИНДЕКСИРОВАТЬ ПО
	//|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	АмортизацияНаНачалоГода.Субконто1 КАК ОсновноеСредство,
	|	ЕСТЬNULL(АмортизацияНаНачалоГода.СуммаОстатокКт, 0) КАК АмортизацияОстатокНаНачалоГода
	|ПОМЕСТИТЬ АмортизацияНаНачалоГода
	|ИЗ
	|	РегистрБухгалтерии.Типовой.Остатки(
	|			&НачалоГода,
	|			Счет В
	|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					СчетаУчетаОсновныхСредствСрезПоследнихНаНачалоГода.СчетНачисленияАмортизацииБУ
	|				ИЗ
	|					СчетаУчетаОсновныхСредствСрезПоследнихНаНачалоГода),
	|			&СубконтоОС,
	|			Организация = &Организация) КАК АмортизацияНаНачалоГода
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СписокОС КАК СписокОС
	|		ПО АмортизацияНаНачалоГода.Субконто1 = СписокОС.ОсновноеСредство
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СчетаУчетаОсновныхСредствСрезПоследнихНаНачалоГода КАК СчетаУчетаОсновныхСредствСрезПоследнихНаНачалоГода
	|		ПО АмортизацияНаНачалоГода.Субконто1 = СчетаУчетаОсновныхСредствСрезПоследнихНаНачалоГода.ОсновноеСредство	
	|		И АмортизацияНаНачалоГода.Счет 	  = СчетаУчетаОсновныхСредствСрезПоследнихНаНачалоГода.СчетНачисленияАмортизацииБУ
	|
	//|ИНДЕКСИРОВАТЬ ПО
	//|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПоложительныеПереоценкиОС.ВнеоборотныйАктив КАК ОсновноеСредство,
	|	СУММА(ПоложительныеПереоценкиОС.СуммаПереоценкиАмортизацииПриход) КАК СуммаПереоценкиАмортизации
	|ПОМЕСТИТЬ ПоложительныеПереоценкиОС
	|ИЗ
	|	РегистрНакопления.ПереоценкаВнеоборотныхАктивов.Обороты(&НачалоПериода, &КонецПериода, , Организация = &Организация и СтруктурноеПодразделение = &СтруктурноеПодразделение" + ТекстУсловияПереоценки + ") КАК ПоложительныеПереоценкиОС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СписокОС КАК СписокОС
	|		ПО ПоложительныеПереоценкиОС.ВнеоборотныйАктив = СписокОС.ОсновноеСредство
	|
	|СГРУППИРОВАТЬ ПО
	|	ПоложительныеПереоценкиОС.ВнеоборотныйАктив
	|
	//|ИНДЕКСИРОВАТЬ ПО
	//|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫРАЗИТЬ(ОбъектыНалоговогоУчетаФА.ФиксированныйАктив КАК Справочник.ОсновныеСредства) КАК ОсновноеСредство
	|ПОМЕСТИТЬ ОбъектыНалоговогоУчетаФА
	|ИЗ
	|	РегистрСведений.ОбъектыНалоговогоУчетаФА.СрезПоследних(
	|			&КонецПериода,
	|			Организация = &Организация
	|				И СостояниеФиксированногоАктива В (&СостоянияФА)) КАК ОбъектыНалоговогоУчетаФА
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СписокОС КАК СписокОС
	|		ПО ОбъектыНалоговогоУчетаФА.ФиксированныйАктив = СписокОС.ОсновноеСредство
	|
	//|ИНДЕКСИРОВАТЬ ПО
	//|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МестонахождениеОССрезПоследних.ОсновноеСредство КАК ОсновноеСредство,
	|	МестонахождениеОССрезПоследних.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	|	МестонахождениеОССрезПоследних.Местонахождение КАК ТекущееПодразделение,
	|	МестонахождениеОССрезПоследних.МОЛ КАК МОЛ
	|ПОМЕСТИТЬ МестонахождениеОС
	|ИЗ
	|	РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних(
	|			&ПериодПараметровАмортизации,
	|			Организация = &Организация)МестонахождениеОССрезПоследних
	|
	//|ИНДЕКСИРОВАТЬ ПО
	//|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СписокОС.ОсновноеСредство,
	|	СписокОС.ОсновноеСредство.Код КАК Код,
	|	ЕСТЬNULL(СтоимостьОСНачалоПериода.СтоимостьНачальныйОстаток, 0) КАК СтоимостьНачальныйОстаток,
	|	ЕСТЬNULL(СтоимостьОСКонецПериода.СтоимостьКонечныйОстаток, 0) КАК СтоимостьКонечныйОстаток,
	|	ЕСТЬNULL(АмортизацияОСНачалоПериода.АмортизацияНачальныйОстаток, 0) КАК АмортизацияНачальныйОстаток,
	|	ЕСТЬNULL(АмортизацияОСКонецПериода.АмортизацияКонечныйОстаток, 0) КАК АмортизацияКонечныйОстаток,
	|	ЕСТЬNULL(АмортизацияОСОбороты.АмортизацияОборот, 0) КАК АмортизацияОборот,
	|	ЕСТЬNULL(ПоложительныеПереоценкиОС.СуммаПереоценкиАмортизации, 0) КАК СуммаПереоценкиАмортизации,
	|	ЕСТЬNULL(ВыработкаОСОбороты.КоличествоОборот, 0) КАК Количество,
	|	ЕСТЬNULL(ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.СрокИспользованияДляВычисленияАмортизации, 0) КАК СрокИспользованияДляВычисленияАмортизации,
	|	ЕСТЬNULL(ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.СтоимостьДляВычисленияАмортизации, 0) КАК СтоимостьДляВычисленияАмортизации,
	|	ЕСТЬNULL(ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.ЛиквидационнаяСтоимость, 0) КАК ЛиквидационнаяСтоимость,
	|	ЕСТЬNULL(ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.ОбъемПродукцииРаботДляВычисленияАмортизации, 0) КАК ОбъемПродукцииРаботДляВычисленияАмортизации,
	|	ЕСТЬNULL(ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.КоэффициентАмортизации, 0) КАК КоэффициентАмортизации,
	|	ЕСТЬNULL(ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.КоэффициентУскорения, 0) КАК КоэффициентУскорения,
	|	ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.Период,
	|	ГрафикиАмортизацииБухгалтерскийУчетСрезПоследних.ГрафикАмортизации,
	|	СчетаУчетаОсновныхСредствСрезПоследних.СчетУчетаБУ,
	|	СчетаУчетаОсновныхСредствСрезПоследних.СчетНачисленияАмортизацииБУ,
	|	ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних.СпособНачисленияАмортизации,
	|	ЕСТЬNULL(ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних.ПервоначальнаяСтоимость, 0) КАК ПервоначальнаяСтоимость,
	|	СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетСрезПоследних.СпособОтраженияРасходовПоАмортизации,
	|	ЕСТЬNULL(СтоимостьНаНачалоГода.СтоимостьОстатокНаНачалоГода, 0) - ЕСТЬNULL(АмортизацияНаНачалоГода.АмортизацияОстатокНаНачалоГода, 0) КАК СтоимостьНаНачалоГода,
	|	ВЫБОР
	|		КОГДА ОбъектыНалоговогоУчетаФА.ОсновноеСредство ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ПризнакФиксированногоАктива,
	|	МестонахождениеОС.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	|	МестонахождениеОС.ТекущееПодразделение КАК ТекущееПодразделение,
	|	МестонахождениеОС.МОЛ КАК ТекущийМОЛ
	|ИЗ
	|	СписокОС КАК СписокОС
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних КАК ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних
	|		ПО СписокОС.ОсновноеСредство = ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ ГрафикиАмортизацииБухгалтерскийУчетСрезПоследних КАК ГрафикиАмортизацииБухгалтерскийУчетСрезПоследних
	|		ПО СписокОС.ОсновноеСредство = ГрафикиАмортизацииБухгалтерскийУчетСрезПоследних.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних КАК ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних
	|		ПО СписокОС.ОсновноеСредство = ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетСрезПоследних КАК СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетСрезПоследних
	|		ПО СписокОС.ОсновноеСредство = СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ СчетаУчетаОсновныхСредствСрезПоследних КАК СчетаУчетаОсновныхСредствСрезПоследних
	|		ПО СписокОС.ОсновноеСредство = СчетаУчетаОсновныхСредствСрезПоследних.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ СтоимостьОСНачалоПериода КАК СтоимостьОСНачалоПериода
	|		ПО СписокОС.ОсновноеСредство = СтоимостьОСНачалоПериода.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ СтоимостьОСКонецПериода КАК СтоимостьОСКонецПериода
	|		ПО СписокОС.ОсновноеСредство = СтоимостьОСКонецПериода.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ АмортизацияОСНачалоПериода КАК АмортизацияОСНачалоПериода
	|		ПО СписокОС.ОсновноеСредство = АмортизацияОСНачалоПериода.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ АмортизацияОСКонецПериода КАК АмортизацияОСКонецПериода
	|		ПО СписокОС.ОсновноеСредство = АмортизацияОСКонецПериода.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ АмортизацияОСОбороты КАК АмортизацияОСОбороты
	|		ПО СписокОС.ОсновноеСредство = АмортизацияОСОбороты.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВыработкаОСОбороты КАК ВыработкаОСОбороты
	|		ПО СписокОС.ОсновноеСредство = ВыработкаОСОбороты.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ СтоимостьНаНачалоГода КАК СтоимостьНаНачалоГода
	|		ПО СписокОС.ОсновноеСредство = СтоимостьНаНачалоГода.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ АмортизацияНаНачалоГода КАК АмортизацияНаНачалоГода
	|		ПО СписокОС.ОсновноеСредство = АмортизацияНаНачалоГода.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПоложительныеПереоценкиОС КАК ПоложительныеПереоценкиОС
	|		ПО СписокОС.ОсновноеСредство = ПоложительныеПереоценкиОС.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОбъектыНалоговогоУчетаФА КАК ОбъектыНалоговогоУчетаФА
	|		ПО СписокОС.ОсновноеСредство = ОбъектыНалоговогоУчетаФА.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ МестонахождениеОС КАК МестонахождениеОС
	|		ПО СписокОС.ОсновноеСредство = МестонахождениеОС.ОсновноеСредство";
	
	ВыборкаПоОС = Запрос.Выполнить().Выбрать();

	ТаблицаГрафиков = ПолучитьТаблицуГрафиковАмортизации();
	ВидРегламентнойОперации = Перечисления.ВидыРегламентныхОпераций.АмортизацияОСБУ;

	Пока ВыборкаПоОС.Следующий() Цикл

		Если (ВыборкаПоОС.АмортизацияОборот + ВыборкаПоОС.СуммаПереоценкиАмортизации)<> 0 Тогда
			Если ВыдаватьСообщения = Истина И НЕ (ОсновноеСредство = Неопределено) Тогда
//				ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации("Бух. расчет амортизации: для основного средства <" + ВыборкаПоОС.ОсновноеСредство + "> код <" + СокрЛП(ВыборкаПоОС.Код) +"> амортизация в этом месяце уже начислялась",
//												ВыборкаПоОС.ОсновноеСредство, ,ДокОбъект, ВидРегламентнойОперации, Ложь);
			КонецЕсли;
			Продолжить; // по указанному ОС в этом месяце уже начисляли амортизацию 
		КонецЕсли;

		СуммаАмортизации = 0;
		
		Если НЕ ЗначениеЗаполнено(ВыборкаПоОС.СчетНачисленияАмортизацииБУ) Тогда
			Если ВыдаватьСообщения = Истина Тогда
//				ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации("Бух. расчет амортизации: для основного средства <" + ВыборкаПоОС.ОсновноеСредство + "> код <" + СокрЛП(ВыборкаПоОС.Код) +"> не указан счет для начисления амортизации",
//												ВыборкаПоОС.ОсновноеСредство, ,ДокОбъект, ВидРегламентнойОперации);
				
			КонецЕсли; 
			Продолжить;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ВыборкаПоОС.СпособНачисленияАмортизации) Тогда
			Если ВыдаватьСообщения = Истина Тогда
//				ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации("Бух. расчет амортизации: для основного средства <" + ВыборкаПоОС.ОсновноеСредство + "> код <" + СокрЛП(ВыборкаПоОС.Код) +"> не указан способ амортизации",
//												ВыборкаПоОС.ОсновноеСредство, ,ДокОбъект, ВидРегламентнойОперации);
				
			КонецЕсли; 
			Продолжить;
		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(ВыборкаПоОС.СтоимостьДляВычисленияАмортизации) Тогда
			Если ВыдаватьСообщения = Истина Тогда
//				ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации("Бух. расчет амортизации: для основного средства <" + ВыборкаПоОС.ОсновноеСредство + "> код <" + СокрЛП(ВыборкаПоОС.Код) +"> стоимость равна 0",
//												ВыборкаПоОС.ОсновноеСредство, ,ДокОбъект, ВидРегламентнойОперации);
			КонецЕсли; 
			Продолжить;
		КонецЕсли;

		Если ВыборкаПоОС.СпособНачисленияАмортизации <> Перечисления.СпособыНачисленияАмортизацииОС.Производственный Тогда
			Если НЕ ЗначениеЗаполнено(ВыборкаПоОС.СрокИспользованияДляВычисленияАмортизации) Тогда
				Если ВыдаватьСообщения = Истина Тогда
//					ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации("Бух. расчет амортизации: для основного средства <" + ВыборкаПоОС.ОсновноеСредство + "> код <" + СокрЛП(ВыборкаПоОС.Код) +"> срок использования равен 0",
//												ВыборкаПоОС.ОсновноеСредство, ,ДокОбъект, ВидРегламентнойОперации);
				КонецЕсли; 
				Продолжить;
			КонецЕсли;
		КонецЕсли; 
		
		Если ВыборкаПоОС.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.ЛинейныйПроцентом Тогда
			Если Не ЗначениеЗаполнено(ВыборкаПоОС.КоэффициентАмортизации) Тогда
				Если ВыдаватьСообщения = Истина Тогда
//					ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации("Бух. расчет амортизации: для основного средства <" + ВыборкаПоОС.ОсновноеСредство + "> код <" + СокрЛП(ВыборкаПоОС.Код) +"> не указан процент годовой амотризации",
//												ВыборкаПоОС.ОсновноеСредство, ,ДокОбъект, ВидРегламентнойОперации);
				КонецЕсли; 
				Продолжить;
			КонецЕсли;	
		КонецЕсли;
		
		СуммаАмортизации = 0;

		Если ВыборкаПоОС.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.Линейный Тогда
 
			СуммаГодовойАмортизации = ВыборкаПоОС.СтоимостьДляВычисленияАмортизации/ВыборкаПоОС.СрокИспользованияДляВычисленияАмортизации * 12;

			Если НЕ ЗначениеЗаполнено(ВыборкаПоОС.ГрафикАмортизации) Тогда
				СуммаАмортизации   = СуммаГодовойАмортизации / 12;
			Иначе
				КоэффициентПериода = ПолучитьКоэффициентАмортизацииИзГрафика(ТаблицаГрафиков, ВыборкаПоОС.ГрафикАмортизации, ДатаРасчета);
				СуммаАмортизации   = СуммаГодовойАмортизации * КоэффициентПериода;
			КонецЕсли;

		ИначеЕсли ВыборкаПоОС.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.Производственный Тогда

			Если НЕ ЗначениеЗаполнено(ВыборкаПоОС.Количество) Тогда
				Продолжить;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ВыборкаПоОС.ОбъемПродукцииРаботДляВычисленияАмортизации) Тогда
				Если ВыдаватьСообщения = Истина Тогда
//					ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации("Бух. расчет амортизации: для основного средства <" + ВыборкаПоОС.ОсновноеСредство + "> код <" + СокрЛП(ВыборкаПоОС.Код) +"> объем продукции для вычисления не определен",
//												ВыборкаПоОС.ОсновноеСредство, ,ДокОбъект, ВидРегламентнойОперации);
				КонецЕсли; 
				Продолжить;
			КонецЕсли;
		
			СуммаАмортизации = ВыборкаПоОС.СтоимостьДляВычисленияАмортизации * ВыборкаПоОС.Количество / ВыборкаПоОС.ОбъемПродукцииРаботДляВычисленияАмортизации;

		ИначеЕсли ВыборкаПоОС.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.УменьшаемогоОстатка Тогда

			Если Год(ВыборкаПоОС.Период) = Год(ДатаРасчета) Тогда
				СтоимостьИтоговая = ВыборкаПоОС.СтоимостьДляВычисленияАмортизации;
			Иначе
				СтоимостьИтоговая = ВыборкаПоОС.СтоимостьНаНачалоГода;
			КонецЕсли;
			
			СтоимостьИтоговая		= ?(СтоимостьИтоговая = NULL, 0, СтоимостьИтоговая);
			СуммаГодовойАмортизации = СтоимостьИтоговая / ВыборкаПоОС.СрокИспользованияДляВычисленияАмортизации * 12;

			Если НЕ ЗначениеЗаполнено(ВыборкаПоОС.ГрафикАмортизации) Тогда
				СуммаАмортизации	= СуммаГодовойАмортизации / 12;
			Иначе
				КоэффициентПериода	= ПолучитьКоэффициентАмортизацииИзГрафика(ТаблицаГрафиков, ВыборкаПоОС.ГрафикАмортизации, ДатаРасчета);
				СуммаАмортизации	= СуммаГодовойАмортизации * КоэффициентПериода;
			КонецЕсли;
			
			КоэффициентУскорения	= ВыборкаПоОС.КоэффициентУскорения;
			
			Если НЕ ЗначениеЗаполнено(ВыборкаПоОС.КоэффициентУскорения) Тогда
				
				КоэффициентУскорения = 1;
				
				Если ВыдаватьСообщения = Истина Тогда
//					ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации("Бух. расчет амортизации: для основного средства <" + ВыборкаПоОС.ОсновноеСредство + "> код <" + СокрЛП(ВыборкаПоОС.Код) +"> коэффициент ускорения не заполнен",
//													ВыборкаПоОС.ОсновноеСредство, ,ДокОбъект, ВидРегламентнойОперации, Ложь);
				КонецЕсли;
			КонецЕсли;

			СуммаАмортизации = СуммаАмортизации * КоэффициентУскорения;

		ИначеЕсли ВыборкаПоОС.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.ПоСуммеЧиселЛетИспользования Тогда

			//Дата последнего изменения параметров
			Если ВыборкаПоОС.Период = Null Тогда
//				ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации("Бух. расчет амортизации: для основного средства <" + ВыборкаПоОС.ОсновноеСредство + "> код <" + СокрЛП(ВыборкаПоОС.Код) +"> не определилась дата начала использования (изменения параметров)!",
//													ВыборкаПоОС.ОсновноеСредство, ,ДокОбъект, ВидРегламентнойОперации);
				Продолжить;
			КонецЕсли; 
			
			ДатаНачалаРасчета = НачалоМесяца(ДобавитьМесяц(ВыборкаПоОС.Период,1));

			ЧислоЛетПользования       = ?(ВыборкаПоОС.СрокИспользованияДляВычисленияАмортизации = NULL, 0, ВыборкаПоОС.СрокИспользованияДляВычисленияАмортизации) / 12;
			ЧислоЛетПользования       = Цел(Макс( 1, ЧислоЛетПользования));
			СуммаЧислеЛет             = 0;
			ГодИспользования          = Год(ДатаРасчета) - Год(ДатаНачалаРасчета);
			ГодовщинаНачалаИспользования = Дата(Год(ДатаРасчета), Месяц(ДатаНачалаРасчета), День(ДатаНачалаРасчета));
			
			Если КонецМесяца(ДатаРасчета) >= КонецМесяца(ГодовщинаНачалаИспользования) Тогда
				ГодИспользования = ГодИспользования + 1;
			КонецЕсли;    

			ГодИспользования = Макс(ГодИспользования,1);

			// Формула суммы чисел от 1 до N
			//		S = (N + 1) * N / 2
			СуммаЧислеЛет = (ЧислоЛетПользования + 1) * ЧислоЛетПользования / 2;
			
			ПроцентГодовойАмортизации	= Макс((ЧислоЛетПользования - ГодИспользования + 1),1) / СуммаЧислеЛет;
			СуммаГодовойАмортизации		= ?(ВыборкаПоОС.СтоимостьДляВычисленияАмортизации = NULL, 0, ВыборкаПоОС.СтоимостьДляВычисленияАмортизации) *
										  ПроцентГодовойАмортизации;

			Если НЕ ЗначениеЗаполнено(ВыборкаПоОС.ГрафикАмортизации) Тогда
				СуммаАмортизации		= СуммаГодовойАмортизации / 12;
			Иначе
				КоэффициентПериода		= ПолучитьКоэффициентАмортизацииИзГрафика(ТаблицаГрафиков, ВыборкаПоОС.ГрафикАмортизации, ДатаРасчета);
				СуммаАмортизации		= СуммаГодовойАмортизации * КоэффициентПериода;
			КонецЕсли;

		ИначеЕсли ВыборкаПоОС.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.ЛинейныйПроцентом Тогда
 
			СуммаГодовойАмортизации = ВыборкаПоОС.СтоимостьДляВычисленияАмортизации * ВыборкаПоОС.КоэффициентАмортизации / 100;

			Если НЕ ЗначениеЗаполнено(ВыборкаПоОС.ГрафикАмортизации) Тогда
				СуммаАмортизации   = СуммаГодовойАмортизации / 12;
			Иначе
				КоэффициентПериода = ПолучитьКоэффициентАмортизацииИзГрафика(ТаблицаГрафиков, ВыборкаПоОС.ГрафикАмортизации, ДатаРасчета);
				СуммаАмортизации   = СуммаГодовойАмортизации * КоэффициентПериода;
			КонецЕсли;


		КонецЕсли;
		
		Если ПрименятьПараметрыАмортизацииВТекМесяце Тогда 
			СтоимостьОстаток = ВыборкаПоОС.СтоимостьКонечныйОстаток;
			АмортизацияОстаток = ВыборкаПоОС.АмортизацияКонечныйОстаток;
		Иначе 
			СтоимостьОстаток = ВыборкаПоОС.СтоимостьНачальныйОстаток;
			АмортизацияОстаток = ВыборкаПоОС.АмортизацияНачальныйОстаток;
		КонецЕсли;
		
		ВсегоОсталосьСписать = СтоимостьОстаток - АмортизацияОстаток - ВыборкаПоОС.ЛиквидационнаяСтоимость;
		
		//Списываем остаток если он есть
		Разница = 0;
		Разница = Цел(ВсегоОсталосьСписать - СуммаАмортизации);
		
		Если Разница = 0 Тогда 
			СуммаАмортизации  = ВсегоОсталосьСписать;
		Иначе 
			СуммаАмортизации  = Макс(0,Мин(СуммаАмортизации, ВсегоОсталосьСписать));
		КонецЕсли;
			
		СтрокаАмортизации = ТаблицаАмортизации.Добавить();

		СтрокаАмортизации.ОС							= ВыборкаПоОС.ОсновноеСредство;
		СтрокаАмортизации.СтруктурноеПодразделение		= ВыборкаПоОС.СтруктурноеПодразделение;
		СтрокаАмортизации.СчетУчетаБУ					= ВыборкаПоОС.СчетУчетаБУ;
		СтрокаАмортизации.СчетАмортизацииБУ				= ВыборкаПоОС.СчетНачисленияАмортизацииБУ;
		СтрокаАмортизации.НаправлениеАмортизации		= ВыборкаПоОС.СпособОтраженияРасходовПоАмортизации;
		СтрокаАмортизации.ПризнакФиксированногоАктива 	= ВыборкаПоОС.ПризнакФиксированногоАктива;		
		СтрокаАмортизации.Бух							= СуммаАмортизации;
		СтрокаАмортизации.ТекущееПодразделение			= ВыборкаПоОС.ТекущееПодразделение;
		СтрокаАмортизации.ТекущийМОЛ					= ВыборкаПоОС.ТекущийМОЛ;
		
	КонецЦикла;

	Возврат ТаблицаАмортизации;

КонецФункции // РасчетАмортизацииБухРегл()


Функция ПодготовитьПараметрыРасчетаАмортизацииОС(ТаблицаРеквизиты, ТаблицаОС = Неопределено)

	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                      // <Дата>
	+ "Регистратор,"                // <ДокументСсылка.*>
	+ "Организация,"                // <СправочникСсылка.Организации>
	+ "СтруктурноеПодразделение"    // <СправочникСсылка.ПодразделенияОрганизации>
	;

	Если ТипЗнч(ТаблицаРеквизиты) = Тип("ТаблицаЗначений") Тогда
		Если ТаблицаРеквизиты.Колонки.Найти("Объект") <> Неопределено Тогда
			СписокОбязательныхКолонок = СписокОбязательныхКолонок + ",Объект";	
		КонецЕсли;
	КонецЕсли;
	
	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));
	
	Если НЕ  ТаблицаОС = Неопределено И ТипЗнч(ТаблицаОС) = Тип("ТаблицаЗначений") Тогда
		// Подготовка таблицы 
		СписокОбязательныхКолонок = ""
		+ "ОсновноеСредство"
		;
		Параметры.Вставить("ТаблицаОС", ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(
				ТаблицаОС, СписокОбязательныхКолонок));
	КонецЕсли;


	Возврат Параметры;

КонецФункции


Функция ПодготовитьТаблицуАмортизацияОСБухРегл(ТаблицаРеквизиты, ТаблицаОС = Неопределено,
											ВыдаватьСообщения = Истина) Экспорт
											
											
	Параметры = ПодготовитьПараметрыРасчетаАмортизацииОС(ТаблицаРеквизиты, ТаблицаОС);
	Реквизиты = Параметры.Реквизиты[0];

	
	ТаблицаАмортизации = Новый ТаблицаЗначений();

    ТаблицаАмортизации.Колонки.Добавить("ОбъектУчета", 					Новый ОписаниеТипов("СправочникСсылка.ОсновныеСредства"));
    ТаблицаАмортизации.Колонки.Добавить("СчетУчета",			 		Новый ОписаниеТипов("ПланСчетовСсылка.Типовой"));
    ТаблицаАмортизации.Колонки.Добавить("СчетАмортизации",	 			Новый ОписаниеТипов("ПланСчетовСсылка.Типовой"));
    ТаблицаАмортизации.Колонки.Добавить("НаправлениеАмортизации", 		Новый ОписаниеТипов("СправочникСсылка.СпособыОтраженияРасходовПоАмортизации"));
	ТаблицаАмортизации.Колонки.Добавить("ПризнакФиксированногоАктива",  Новый ОписаниеТипов("Булево"));
    ТаблицаАмортизации.Колонки.Добавить("Сумма",                    	ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаАмортизации.Колонки.Добавить("ИмяСписка",                    ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповСтроки(100));
	ТаблицаАмортизации.Колонки.Добавить("НомерСтроки",                   ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(5,0));
	ТаблицаАмортизации.Колонки.Добавить("СинонимСписка",                ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповСтроки(100));
	ТаблицаАмортизации.Колонки.Добавить("Период",                       ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповДаты(ЧастиДаты.ДатаВремя));
	ТаблицаАмортизации.Колонки.Добавить("Регистратор",                  );
	ТаблицаАмортизации.Колонки.Добавить("Организация",  	            Новый ОписаниеТипов("СправочникСсылка.Организации"));
    ТаблицаАмортизации.Колонки.Добавить("СтруктурноеПодразделение",  	Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	ТаблицаАмортизации.Колонки.Добавить("КорСтруктурноеПодразделение",  Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	ТаблицаАмортизации.Колонки.Добавить("ТекущееПодразделение",			Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
    ТаблицаАмортизации.Колонки.Добавить("ТекущееМОЛ",					Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	
	//
	// определим признак применения параметров амортизации в тек. месяце
	ПрименятьПараметрыАмортизацииВТекМесяце = УчетнаяПолитикаСервер.ПрименятьПараметрыНачисленияАмортизацииВМесяцеИзменения(Реквизиты.Организация, Реквизиты.Период); 
	ПериодПараметровАмортизации = ?(ПрименятьПараметрыАмортизацииВТекМесяце, Новый Граница(КонецМесяца(Реквизиты.Период)), НачалоМесяца(Реквизиты.Период));
	
	Запрос = Новый Запрос();
	
	Запрос.УстановитьПараметр("НачалоГода",                  НачалоГода(Реквизиты.Период));
	Запрос.УстановитьПараметр("Организация",                 Реквизиты.Организация);
	Запрос.УстановитьПараметр("СтруктурноеПодразделение",    Реквизиты.СтруктурноеПодразделение);
	Запрос.УстановитьПараметр("НачалоПериода",               НачалоМесяца(Реквизиты.Период));
	Запрос.УстановитьПараметр("КонецПериода",              	 Новый Граница(КонецМесяца(Реквизиты.Период)));
	Запрос.УстановитьПараметр("Период",                    	 Реквизиты.Период);
	Запрос.УстановитьПараметр("СнятоСУчета",                 Перечисления.ВидыСостоянийОС.СнятоСУчета);
	Запрос.УстановитьПараметр("ПериодПараметровАмортизации", ПериодПараметровАмортизации);
	
	// Выбывший актив может иметь стоимостной баланс и участвовать в учете ст. 
	СостоянияФА = Новый СписокЗначений();	
	СостоянияФА.Добавить(Перечисления.ВидыСостоянийФА.ПринятКУчету);
	СостоянияФА.Добавить(Перечисления.ВидыСостоянийФА.Выбыл);                  	
	Запрос.УстановитьПараметр("СостоянияФА", СостоянияФА);	
		
	Если ТаблицаОС = Неопределено Тогда
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
					   |	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
					   |ИЗ
					   |	РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(&Период, ) КАК ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних
					   |ГДЕ
					   |	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.Организация = &Организация
					   |	И ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.СтруктурноеПодразделение = &СтруктурноеПодразделение";
					   
		 ТаблицаОС = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ОсновноеСредство");
	КонецЕсли;

	Если ТипЗнч(ТаблицаОС) = Тип("ТаблицаЗначений") Тогда
		ОсновноеСредство = ТаблицаОС.ВыгрузитьКолонку("ОсновноеСредство");
	Иначе
		ОсновноеСредство = ТаблицаОС;
	КонецЕсли;

	Запрос.УстановитьПараметр("ОсновноеСредство", ОсновноеСредство);
	ТекстУсловия = " И ОсновноеСредство В (&ОсновноеСредство)";
	ТекстУсловияПереоценки = " И ВнеоборотныйАктив В (&ОсновноеСредство)"; 
	
	СубконтоОС = Новый Массив();
	СубконтоОС.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.ОсновныеСредства);
	Запрос.УстановитьПараметр("СубконтоОС", СубконтоОС);
	 
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СостоянияОСОрганизаций.ОсновноеСредство КАК ОсновноеСредство
	|ПОМЕСТИТЬ СнятыеСУчета
	|ИЗ
	|	РегистрСведений.СостоянияОСОрганизаций.СрезПоследних(
	|			&Период,
	|			Организация = &Организация) КАК СостоянияОСОрганизаций
	|ГДЕ
	|	СостоянияОСОрганизаций.Состояние = &СнятоСУчета
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НачислениеАмортизацииБухгалтерскийУчетСрезПоследних.ОсновноеСредство КАК ОсновноеСредство
	|ПОМЕСТИТЬ СписокОС
	|ИЗ
	|	РегистрСведений.НачислениеАмортизацииОСБухгалтерскийУчет.СрезПоследних(
	|			&ПериодПараметровАмортизации,
	|			Организация = &Организация  И ОсновноеСредство В (&ОсновноеСредство) 
	|				И (НЕ ОсновноеСредство В
	|						(ВЫБРАТЬ
	|							СнятыеСУчета.ОсновноеСредство
	|						ИЗ
	|							СнятыеСУчета))) КАК НачислениеАмортизацииБухгалтерскийУчетСрезПоследних
	|ГДЕ
	|	НачислениеАмортизацииБухгалтерскийУчетСрезПоследних.НачислятьАмортизацию = ИСТИНА
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних.ОсновноеСредство КАК ОсновноеСредство,
	|	ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних.ИнвентарныйНомер,
	|	ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних.СпособНачисленияАмортизации,
	|	ЕСТЬNULL(ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних.ПервоначальнаяСтоимость, 0) КАК ПервоначальнаяСтоимость,
	|	ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних.ПараметрВыработки
	|ПОМЕСТИТЬ ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних
	|ИЗ
	|	РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(&ПериодПараметровАмортизации, Организация = &Организация) КАК ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СписокОС КАК СписокОС
	|		ПО ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних.ОсновноеСредство = СписокОС.ОсновноеСредство
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство,
	|	ПараметрВыработки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВыработкаОСОбороты.ОсновноеСредство КАК ОсновноеСредство,
	|	ВыработкаОСОбороты.ПараметрВыработки,
	|	ЕСТЬNULL(ВыработкаОСОбороты.КоличествоОборот, 0) КАК КоличествоОборот
	|ПОМЕСТИТЬ ВыработкаОСОбороты
	|ИЗ
	|	РегистрНакопления.ВыработкаОС.Обороты(&НачалоПериода, &КонецПериода, , ) КАК ВыработкаОСОбороты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СписокОС КАК СписокОС
	|		ПО ВыработкаОСОбороты.ОсновноеСредство = СписокОС.ОсновноеСредство
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних КАК ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних
	|		ПО ВыработкаОСОбороты.ПараметрВыработки = ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних.ПараметрВыработки
	|			И ВыработкаОСОбороты.ОсновноеСредство = ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних.ОсновноеСредство
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство КАК ОсновноеСредство,
	|	ЕСТЬNULL(ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.СрокИспользованияДляВычисленияАмортизации, 0) КАК СрокИспользованияДляВычисленияАмортизации,
	|	ЕСТЬNULL(ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.СтоимостьДляВычисленияАмортизации, 0) КАК СтоимостьДляВычисленияАмортизации,
	|	ЕСТЬNULL(ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.ЛиквидационнаяСтоимость, 0) КАК ЛиквидационнаяСтоимость,
	|	ЕСТЬNULL(ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.ОбъемПродукцииРаботДляВычисленияАмортизации, 0) КАК ОбъемПродукцииРаботДляВычисленияАмортизации,
	|	ЕСТЬNULL(ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.КоэффициентАмортизации, 0) КАК КоэффициентАмортизации,
	|	ЕСТЬNULL(ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.КоэффициентУскорения, 0) КАК КоэффициентУскорения,
	|	ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.Период
	|ПОМЕСТИТЬ ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних
	|ИЗ
	|	РегистрСведений.ПараметрыАмортизацииОСБухгалтерскийУчет.СрезПоследних(&ПериодПараметровАмортизации, Организация = &Организация) КАК ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СписокОС КАК СписокОС
	|		ПО ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство = СписокОС.ОсновноеСредство
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ГрафикиАмортизацииБухгалтерскийУчетСрезПоследних.ОсновноеСредство КАК ОсновноеСредство,
	|	ГрафикиАмортизацииБухгалтерскийУчетСрезПоследних.ГрафикАмортизации
	|ПОМЕСТИТЬ ГрафикиАмортизацииБухгалтерскийУчетСрезПоследних
	|ИЗ
	|	РегистрСведений.ГрафикиАмортизацииОСБухгалтерскийУчет.СрезПоследних(&ПериодПараметровАмортизации, Организация = &Организация) КАК ГрафикиАмортизацииБухгалтерскийУчетСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СписокОС КАК СписокОС
	|		ПО ГрафикиАмортизацииБухгалтерскийУчетСрезПоследних.ОсновноеСредство = СписокОС.ОсновноеСредство
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство КАК ОсновноеСредство,
	|	СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетСрезПоследних.СпособОтраженияРасходовПоАмортизации
	|ПОМЕСТИТЬ СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетСрезПоследних
	|ИЗ
	|	РегистрСведений.СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчет.СрезПоследних(&ПериодПараметровАмортизации, Организация = &Организация) КАК СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СписокОС КАК СписокОС
	|		ПО СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство = СписокОС.ОсновноеСредство
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СчетаУчетаОсновныхСредствСрезПоследних.ОсновноеСредство КАК ОсновноеСредство,
	|	СчетаУчетаОсновныхСредствСрезПоследних.СчетУчетаБУ,
	|	СчетаУчетаОсновныхСредствСрезПоследних.СчетНачисленияАмортизацииБУ
	|ПОМЕСТИТЬ СчетаУчетаОсновныхСредствСрезПоследних
	|ИЗ
	|	РегистрСведений.СчетаУчетаОС.СрезПоследних(&ПериодПараметровАмортизации, Организация = &Организация) КАК СчетаУчетаОсновныхСредствСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СписокОС КАК СписокОС
	|		ПО СчетаУчетаОсновныхСредствСрезПоследних.ОсновноеСредство = СписокОС.ОсновноеСредство
	|				
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СтоимостьОСНачалоПериода.Субконто1 КАК ОсновноеСредство,
	|	ЕСТЬNULL(СтоимостьОСНачалоПериода.СуммаОстатокДт, 0) КАК СтоимостьНачальныйОстаток
	|ПОМЕСТИТЬ СтоимостьОСНачалоПериода
	|ИЗ
	|	РегистрБухгалтерии.Типовой.Остатки(
	|			&НачалоПериода,
	|			Счет В
	|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					СчетаУчетаОсновныхСредствСрезПоследних.СчетУчетаБУ
	|				ИЗ
	|					СчетаУчетаОсновныхСредствСрезПоследних),
	|			&СубконтоОС,
	|			Организация = &Организация) КАК СтоимостьОСНачалоПериода
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СписокОС КАК СписокОС
	|		ПО СтоимостьОСНачалоПериода.Субконто1 = СписокОС.ОсновноеСредство
	|			
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СчетаУчетаОсновныхСредствСрезПоследних КАК СчетаУчетаОсновныхСредствСрезПоследних
	|		ПО СтоимостьОСНачалоПериода.Субконто1 = СчетаУчетаОсновныхСредствСрезПоследних.ОсновноеСредство	
	|		И СтоимостьОСНачалоПериода.Счет 	  = СчетаУчетаОсновныхСредствСрезПоследних.СчетУчетаБУ
	|
	//|ИНДЕКСИРОВАТЬ ПО
	//|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СтоимостьОСКонецПериода.Субконто1 КАК ОсновноеСредство,
	|	ЕСТЬNULL(СтоимостьОСКонецПериода.СуммаОстатокДт, 0) КАК СтоимостьКонечныйОстаток
	|ПОМЕСТИТЬ СтоимостьОСКонецПериода
	|ИЗ
	|	РегистрБухгалтерии.Типовой.Остатки(
	|			&КонецПериода,
	|			Счет В
	|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					СчетаУчетаОсновныхСредствСрезПоследних.СчетУчетаБУ
	|				ИЗ
	|					СчетаУчетаОсновныхСредствСрезПоследних),
	|			&СубконтоОС,
	|			Организация = &Организация) КАК СтоимостьОСКонецПериода
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СписокОС КАК СписокОС
	|		ПО СтоимостьОСКонецПериода.Субконто1 = СписокОС.ОсновноеСредство
	|			
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СчетаУчетаОсновныхСредствСрезПоследних КАК СчетаУчетаОсновныхСредствСрезПоследних
	|		ПО СтоимостьОСКонецПериода.Субконто1 = СчетаУчетаОсновныхСредствСрезПоследних.ОсновноеСредство	
	|		И СтоимостьОСКонецПериода.Счет 	  = СчетаУчетаОсновныхСредствСрезПоследних.СчетУчетаБУ

	|
	//|ИНДЕКСИРОВАТЬ ПО
	//|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	АмортизацияОСНачалоПериода.Субконто1 КАК ОсновноеСредство,
	|	ЕСТЬNULL(АмортизацияОСНачалоПериода.СуммаОстатокКт, 0) КАК АмортизацияНачальныйОстаток
	|ПОМЕСТИТЬ АмортизацияОСНачалоПериода
	|ИЗ
	|	РегистрБухгалтерии.Типовой.Остатки(
	|			&НачалоПериода,
	|			Счет В
	|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					СчетаУчетаОсновныхСредствСрезПоследних.СчетНачисленияАмортизацииБУ
	|				ИЗ
	|					СчетаУчетаОсновныхСредствСрезПоследних),
	|			&СубконтоОС,
	|			Организация = &Организация) КАК АмортизацияОСНачалоПериода
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СписокОС КАК СписокОС
	|		ПО АмортизацияОСНачалоПериода.Субконто1 = СписокОС.ОсновноеСредство
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СчетаУчетаОсновныхСредствСрезПоследних КАК СчетаУчетаОсновныхСредствСрезПоследних
	|		ПО АмортизацияОСНачалоПериода.Субконто1 = СчетаУчетаОсновныхСредствСрезПоследних.ОсновноеСредство	
	|		И АмортизацияОСНачалоПериода.Счет 	  = СчетаУчетаОсновныхСредствСрезПоследних.СчетНачисленияАмортизацииБУ
	|
	//|ИНДЕКСИРОВАТЬ ПО
	//|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	АмортизацияОСКонецПериода.Субконто1 КАК ОсновноеСредство,
	|	ЕСТЬNULL(АмортизацияОСКонецПериода.СуммаОстатокКт, 0) КАК АмортизацияКонечныйОстаток
	|ПОМЕСТИТЬ АмортизацияОСКонецПериода
	|ИЗ
	|	РегистрБухгалтерии.Типовой.Остатки(
	|			&КонецПериода,
	|			Счет В
	|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					СчетаУчетаОсновныхСредствСрезПоследних.СчетНачисленияАмортизацииБУ
	|				ИЗ
	|					СчетаУчетаОсновныхСредствСрезПоследних),
	|			&СубконтоОС,
	|			Организация = &Организация) КАК АмортизацияОСКонецПериода
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СписокОС КАК СписокОС
	|		ПО АмортизацияОСКонецПериода.Субконто1 = СписокОС.ОсновноеСредство
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СчетаУчетаОсновныхСредствСрезПоследних КАК СчетаУчетаОсновныхСредствСрезПоследних
	|		ПО АмортизацияОСКонецПериода.Субконто1 = СчетаУчетаОсновныхСредствСрезПоследних.ОсновноеСредство	
	|		И АмортизацияОСКонецПериода.Счет 	  = СчетаУчетаОсновныхСредствСрезПоследних.СчетНачисленияАмортизацииБУ
	|
	//|ИНДЕКСИРОВАТЬ ПО
	//|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	АмортизацияОСОбороты.Субконто1 КАК ОсновноеСредство,
	|	ЕСТЬNULL(АмортизацияОСОбороты.СуммаОборотКт, 0) КАК АмортизацияОборот
	|ПОМЕСТИТЬ АмортизацияОСОбороты
	|ИЗ
	|	РегистрБухгалтерии.Типовой.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			Период,
	|			Счет В
	|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					СчетаУчетаОсновныхСредствСрезПоследних.СчетНачисленияАмортизацииБУ
	|				ИЗ
	|					СчетаУчетаОсновныхСредствСрезПоследних),
	|			&СубконтоОС,
	|			Организация = &Организация,
	|			,
	|			) КАК АмортизацияОСОбороты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СписокОС КАК СписокОС
	|		ПО АмортизацияОСОбороты.Субконто1 = СписокОС.ОсновноеСредство
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СчетаУчетаОсновныхСредствСрезПоследних КАК СчетаУчетаОсновныхСредствСрезПоследних
	|		ПО АмортизацияОСОбороты.Субконто1 = СчетаУчетаОсновныхСредствСрезПоследних.ОсновноеСредство	
	|		И АмортизацияОСОбороты.Счет 	  = СчетаУчетаОсновныхСредствСрезПоследних.СчетНачисленияАмортизацииБУ

	|
	//|ИНДЕКСИРОВАТЬ ПО
	//|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СчетаУчетаОсновныхСредствСрезПоследнихНаНачалоГода.ОсновноеСредство КАК ОсновноеСредство,
	|	СчетаУчетаОсновныхСредствСрезПоследнихНаНачалоГода.СчетУчетаБУ КАК СчетУчетаБУ,
	|	СчетаУчетаОсновныхСредствСрезПоследнихНаНачалоГода.СчетНачисленияАмортизацииБУ КАК СчетНачисленияАмортизацииБУ
	|ПОМЕСТИТЬ СчетаУчетаОсновныхСредствСрезПоследнихНаНачалоГода
	|ИЗ
	|	РегистрСведений.СчетаУчетаОС.СрезПоследних(&НачалоГода, Организация = &Организация) КАК СчетаУчетаОсновныхСредствСрезПоследнихНаНачалоГода
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СписокОС КАК СписокОС
	|		ПО СчетаУчетаОсновныхСредствСрезПоследнихНаНачалоГода.ОсновноеСредство = СписокОС.ОсновноеСредство
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СтоимостьНаНачалоГода.Субконто1 КАК ОсновноеСредство,
	|	ЕСТЬNULL(СтоимостьНаНачалоГода.СуммаОстатокДт, 0) КАК СтоимостьОстатокНаНачалоГода
	|ПОМЕСТИТЬ СтоимостьНаНачалоГода
	|ИЗ
	|	РегистрБухгалтерии.Типовой.Остатки(
	|			&НачалоГода,
	|			Счет В
	|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					СчетаУчетаОсновныхСредствСрезПоследнихНаНачалоГода.СчетУчетаБУ
	|				ИЗ
	|					СчетаУчетаОсновныхСредствСрезПоследнихНаНачалоГода),
	|			&СубконтоОС,
	|			Организация = &Организация) КАК СтоимостьНаНачалоГода
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СписокОС КАК СписокОС
	|		ПО СтоимостьНаНачалоГода.Субконто1 = СписокОС.ОсновноеСредство
	|			
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СчетаУчетаОсновныхСредствСрезПоследнихНаНачалоГода КАК СчетаУчетаОсновныхСредствСрезПоследнихНаНачалоГода
	|		ПО СтоимостьНаНачалоГода.Субконто1 = СчетаУчетаОсновныхСредствСрезПоследнихНаНачалоГода.ОсновноеСредство	
	|		И СтоимостьНаНачалоГода.Счет 	   = СчетаУчетаОсновныхСредствСрезПоследнихНаНачалоГода.СчетУчетаБУ
	|
	//|ИНДЕКСИРОВАТЬ ПО
	//|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	АмортизацияНаНачалоГода.Субконто1 КАК ОсновноеСредство,
	|	ЕСТЬNULL(АмортизацияНаНачалоГода.СуммаОстатокКт, 0) КАК АмортизацияОстатокНаНачалоГода
	|ПОМЕСТИТЬ АмортизацияНаНачалоГода
	|ИЗ
	|	РегистрБухгалтерии.Типовой.Остатки(
	|			&НачалоГода,
	|			Счет В
	|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					СчетаУчетаОсновныхСредствСрезПоследнихНаНачалоГода.СчетНачисленияАмортизацииБУ
	|				ИЗ
	|					СчетаУчетаОсновныхСредствСрезПоследнихНаНачалоГода),
	|			&СубконтоОС,
	|			Организация = &Организация) КАК АмортизацияНаНачалоГода
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СписокОС КАК СписокОС
	|		ПО АмортизацияНаНачалоГода.Субконто1 = СписокОС.ОсновноеСредство
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СчетаУчетаОсновныхСредствСрезПоследнихНаНачалоГода КАК СчетаУчетаОсновныхСредствСрезПоследнихНаНачалоГода
	|		ПО АмортизацияНаНачалоГода.Субконто1 = СчетаУчетаОсновныхСредствСрезПоследнихНаНачалоГода.ОсновноеСредство	
	|		И АмортизацияНаНачалоГода.Счет 	  = СчетаУчетаОсновныхСредствСрезПоследнихНаНачалоГода.СчетНачисленияАмортизацииБУ
	|
	//|ИНДЕКСИРОВАТЬ ПО
	//|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПоложительныеПереоценкиОС.ВнеоборотныйАктив КАК ОсновноеСредство,
	|	СУММА(ПоложительныеПереоценкиОС.СуммаПереоценкиАмортизацииПриход) КАК СуммаПереоценкиАмортизации
	|ПОМЕСТИТЬ ПоложительныеПереоценкиОС
	|ИЗ
	|	РегистрНакопления.ПереоценкаВнеоборотныхАктивов.Обороты(&НачалоПериода, &КонецПериода, , Организация = &Организация и СтруктурноеПодразделение = &СтруктурноеПодразделение" + ТекстУсловияПереоценки + ") КАК ПоложительныеПереоценкиОС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СписокОС КАК СписокОС
	|		ПО ПоложительныеПереоценкиОС.ВнеоборотныйАктив = СписокОС.ОсновноеСредство
	|
	|СГРУППИРОВАТЬ ПО
	|	ПоложительныеПереоценкиОС.ВнеоборотныйАктив
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫРАЗИТЬ(ОбъектыНалоговогоУчетаФА.ФиксированныйАктив КАК Справочник.ОсновныеСредства) КАК ОсновноеСредство
	|ПОМЕСТИТЬ ОбъектыНалоговогоУчетаФА
	|ИЗ
	|	РегистрСведений.ОбъектыНалоговогоУчетаФА.СрезПоследних(
	|			&КонецПериода,
	|			Организация = &Организация
	|				И СостояниеФиксированногоАктива В (&СостоянияФА)) КАК ОбъектыНалоговогоУчетаФА
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СписокОС КАК СписокОС
	|		ПО ОбъектыНалоговогоУчетаФА.ФиксированныйАктив = СписокОС.ОсновноеСредство
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МестонахождениеОССрезПоследних.ОсновноеСредство КАК ОсновноеСредство,
	|	МестонахождениеОССрезПоследних.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	|	МестонахождениеОССрезПоследних.Местонахождение КАК ТекущееПодразделение,
	|	МестонахождениеОССрезПоследних.МОЛ КАК МОЛ
	|ПОМЕСТИТЬ МестонахождениеОС
	|ИЗ
	|	РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних(
	|			&ПериодПараметровАмортизации,
	|			Организация = &Организация)МестонахождениеОССрезПоследних
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СписокОС.ОсновноеСредство,
	|	СписокОС.ОсновноеСредство.Код КАК Код,
	|	ЕСТЬNULL(СтоимостьОСНачалоПериода.СтоимостьНачальныйОстаток, 0) КАК СтоимостьНачальныйОстаток,
	|	ЕСТЬNULL(СтоимостьОСКонецПериода.СтоимостьКонечныйОстаток, 0) КАК СтоимостьКонечныйОстаток,
	|	ЕСТЬNULL(АмортизацияОСНачалоПериода.АмортизацияНачальныйОстаток, 0) КАК АмортизацияНачальныйОстаток,
	|	ЕСТЬNULL(АмортизацияОСКонецПериода.АмортизацияКонечныйОстаток, 0) КАК АмортизацияКонечныйОстаток,
	|	ЕСТЬNULL(АмортизацияОСОбороты.АмортизацияОборот, 0) КАК АмортизацияОборот,
	|	ЕСТЬNULL(ПоложительныеПереоценкиОС.СуммаПереоценкиАмортизации, 0) КАК СуммаПереоценкиАмортизации,
	|	ЕСТЬNULL(ВыработкаОСОбороты.КоличествоОборот, 0) КАК Количество,
	|	ЕСТЬNULL(ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.СрокИспользованияДляВычисленияАмортизации, 0) КАК СрокИспользованияДляВычисленияАмортизации,
	|	ЕСТЬNULL(ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.СтоимостьДляВычисленияАмортизации, 0) КАК СтоимостьДляВычисленияАмортизации,
	|	ЕСТЬNULL(ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.ЛиквидационнаяСтоимость, 0) КАК ЛиквидационнаяСтоимость,
	|	ЕСТЬNULL(ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.ОбъемПродукцииРаботДляВычисленияАмортизации, 0) КАК ОбъемПродукцииРаботДляВычисленияАмортизации,
	|	ЕСТЬNULL(ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.КоэффициентАмортизации, 0) КАК КоэффициентАмортизации,
	|	ЕСТЬNULL(ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.КоэффициентУскорения, 0) КАК КоэффициентУскорения,
	|	ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.Период,
	|	ГрафикиАмортизацииБухгалтерскийУчетСрезПоследних.ГрафикАмортизации,
	|	СчетаУчетаОсновныхСредствСрезПоследних.СчетУчетаБУ,
	|	СчетаУчетаОсновныхСредствСрезПоследних.СчетНачисленияАмортизацииБУ,
	|	ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних.СпособНачисленияАмортизации,
	|	ЕСТЬNULL(ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних.ПервоначальнаяСтоимость, 0) КАК ПервоначальнаяСтоимость,
	|	СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетСрезПоследних.СпособОтраженияРасходовПоАмортизации,
	|	ЕСТЬNULL(СтоимостьНаНачалоГода.СтоимостьОстатокНаНачалоГода, 0) - ЕСТЬNULL(АмортизацияНаНачалоГода.АмортизацияОстатокНаНачалоГода, 0) КАК СтоимостьНаНачалоГода,
	|	ВЫБОР
	|		КОГДА ОбъектыНалоговогоУчетаФА.ОсновноеСредство ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ПризнакФиксированногоАктива,
	|	МестонахождениеОС.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	|	МестонахождениеОС.ТекущееПодразделение КАК ТекущееПодразделение,
	|	МестонахождениеОС.МОЛ КАК ТекущийМОЛ
	|ИЗ
	|	СписокОС КАК СписокОС
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних КАК ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних
	|		ПО СписокОС.ОсновноеСредство = ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ ГрафикиАмортизацииБухгалтерскийУчетСрезПоследних КАК ГрафикиАмортизацииБухгалтерскийУчетСрезПоследних
	|		ПО СписокОС.ОсновноеСредство = ГрафикиАмортизацииБухгалтерскийУчетСрезПоследних.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних КАК ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних
	|		ПО СписокОС.ОсновноеСредство = ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетСрезПоследних КАК СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетСрезПоследних
	|		ПО СписокОС.ОсновноеСредство = СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ СчетаУчетаОсновныхСредствСрезПоследних КАК СчетаУчетаОсновныхСредствСрезПоследних
	|		ПО СписокОС.ОсновноеСредство = СчетаУчетаОсновныхСредствСрезПоследних.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ СтоимостьОСНачалоПериода КАК СтоимостьОСНачалоПериода
	|		ПО СписокОС.ОсновноеСредство = СтоимостьОСНачалоПериода.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ СтоимостьОСКонецПериода КАК СтоимостьОСКонецПериода
	|		ПО СписокОС.ОсновноеСредство = СтоимостьОСКонецПериода.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ АмортизацияОСНачалоПериода КАК АмортизацияОСНачалоПериода
	|		ПО СписокОС.ОсновноеСредство = АмортизацияОСНачалоПериода.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ АмортизацияОСКонецПериода КАК АмортизацияОСКонецПериода
	|		ПО СписокОС.ОсновноеСредство = АмортизацияОСКонецПериода.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ АмортизацияОСОбороты КАК АмортизацияОСОбороты
	|		ПО СписокОС.ОсновноеСредство = АмортизацияОСОбороты.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВыработкаОСОбороты КАК ВыработкаОСОбороты
	|		ПО СписокОС.ОсновноеСредство = ВыработкаОСОбороты.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ СтоимостьНаНачалоГода КАК СтоимостьНаНачалоГода
	|		ПО СписокОС.ОсновноеСредство = СтоимостьНаНачалоГода.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ АмортизацияНаНачалоГода КАК АмортизацияНаНачалоГода
	|		ПО СписокОС.ОсновноеСредство = АмортизацияНаНачалоГода.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПоложительныеПереоценкиОС КАК ПоложительныеПереоценкиОС
	|		ПО СписокОС.ОсновноеСредство = ПоложительныеПереоценкиОС.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОбъектыНалоговогоУчетаФА КАК ОбъектыНалоговогоУчетаФА
	|		ПО СписокОС.ОсновноеСредство = ОбъектыНалоговогоУчетаФА.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ МестонахождениеОС КАК МестонахождениеОС
	|		ПО СписокОС.ОсновноеСредство = МестонахождениеОС.ОсновноеСредство";
	
	ВыборкаПоОС = Запрос.Выполнить().Выбрать();
	
	ТаблицаГрафиков = ПолучитьТаблицуГрафиковАмортизации();
	ВидРегламентнойОперации = Перечисления.ВидыРегламентныхОпераций.АмортизацияОСБУ;
	
	НомерСтроки = 1;
	
	Пока ВыборкаПоОС.Следующий() Цикл
		
		Если (ВыборкаПоОС.АмортизацияОборот + ВыборкаПоОС.СуммаПереоценкиАмортизации)<> 0 Тогда
			Если ВыдаватьСообщения = Истина И НЕ (ОсновноеСредство = Неопределено) Тогда
				ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации(СтрШаблон(НСтр("ru = 'Бух. расчет амортизации: для основного средства <%1> код <%2> амортизация в этом месяце уже начислялась'"),
					ВыборкаПоОС.ОсновноеСредство, СокрЛП(ВыборкаПоОС.Код)),
					ВыборкаПоОС.ОсновноеСредство, , Реквизиты.Объект, ВидРегламентнойОперации, Ложь);
			КонецЕсли;
			Продолжить; // по указанному ОС в этом месяце уже начисляли амортизацию 
		КонецЕсли;
		
		СуммаАмортизации = 0;
		
		Если НЕ ЗначениеЗаполнено(ВыборкаПоОС.СчетНачисленияАмортизацииБУ) Тогда
			Если ВыдаватьСообщения = Истина Тогда
				ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации(СтрШаблон(НСтр("ru = 'Бух. расчет амортизации: для основного средства <%1> код <%2> не указан счет для начисления амортизации'"),
					ВыборкаПоОС.ОсновноеСредство, СокрЛП(ВыборкаПоОС.Код)),
					ВыборкаПоОС.ОсновноеСредство, , Реквизиты.Объект, ВидРегламентнойОперации);
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ВыборкаПоОС.СпособНачисленияАмортизации) Тогда
			Если ВыдаватьСообщения = Истина Тогда
				ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации(СтрШаблон(НСтр("ru = 'Бух. расчет амортизации: для основного средства <%1> код <%2> не указан способ амортизации'"),
					ВыборкаПоОС.ОсновноеСредство, СокрЛП(ВыборкаПоОС.Код)),
					ВыборкаПоОС.ОсновноеСредство, , Реквизиты.Объект, ВидРегламентнойОперации);
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ВыборкаПоОС.СтоимостьДляВычисленияАмортизации) Тогда
			Если ВыдаватьСообщения = Истина Тогда
				ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации(СтрШаблон(НСтр("ru = 'Бух. расчет амортизации: для основного средства <%1> код <%2> стоимость равна 0'"),
					ВыборкаПоОС.ОсновноеСредство, СокрЛП(ВыборкаПоОС.Код)),
					ВыборкаПоОС.ОсновноеСредство, , Реквизиты.Объект, ВидРегламентнойОперации);
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		// Для способов начисления амортизации Производственный и ЛинейныйПроцентом
		// не нужна информация о сроке использования, для остальных нужна.
		Если ВыборкаПоОС.СпособНачисленияАмортизации <> Перечисления.СпособыНачисленияАмортизацииОС.Производственный 
			И ВыборкаПоОС.СпособНачисленияАмортизации <> Перечисления.СпособыНачисленияАмортизацииОС.ЛинейныйПроцентом Тогда
			Если НЕ ЗначениеЗаполнено(ВыборкаПоОС.СрокИспользованияДляВычисленияАмортизации) Тогда
				Если ВыдаватьСообщения = Истина Тогда
					ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации(СтрШаблон(НСтр("ru = 'Бух. расчет амортизации: для основного средства <%1> код <%2> срок использования равен 0'"),
						ВыборкаПоОС.ОсновноеСредство, СокрЛП(ВыборкаПоОС.Код)),
						ВыборкаПоОС.ОсновноеСредство, , Реквизиты.Объект, ВидРегламентнойОперации);
				КонецЕсли;
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Если ВыборкаПоОС.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.ЛинейныйПроцентом Тогда
			Если Не ЗначениеЗаполнено(ВыборкаПоОС.КоэффициентАмортизации) Тогда
				Если ВыдаватьСообщения = Истина Тогда
					ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации(СтрШаблон(НСтр("ru = 'Бух. расчет амортизации: для основного средства <%1> код <%2> не указан процент годовой амортизации'"),
						ВыборкаПоОС.ОсновноеСредство, СокрЛП(ВыборкаПоОС.Код)),
						ВыборкаПоОС.ОсновноеСредство, , Реквизиты.Объект, ВидРегламентнойОперации);
				КонецЕсли;
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		СуммаАмортизации = 0;
		
		Если ВыборкаПоОС.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.Линейный Тогда
			
			СуммаГодовойАмортизации = ВыборкаПоОС.СтоимостьДляВычисленияАмортизации/ВыборкаПоОС.СрокИспользованияДляВычисленияАмортизации * 12;
			
			Если НЕ ЗначениеЗаполнено(ВыборкаПоОС.ГрафикАмортизации) Тогда
				СуммаАмортизации   = СуммаГодовойАмортизации / 12;
			Иначе
				КоэффициентПериода = ПолучитьКоэффициентАмортизацииИзГрафика(ТаблицаГрафиков, ВыборкаПоОС.ГрафикАмортизации, Реквизиты.Период);
				СуммаАмортизации   = СуммаГодовойАмортизации * КоэффициентПериода;
			КонецЕсли;
			
		ИначеЕсли ВыборкаПоОС.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.Производственный Тогда
			
			Если НЕ ЗначениеЗаполнено(ВыборкаПоОС.Количество) Тогда
				Продолжить;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ВыборкаПоОС.ОбъемПродукцииРаботДляВычисленияАмортизации) Тогда
				Если ВыдаватьСообщения = Истина Тогда
					ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации(СтрШаблон(НСтр("ru = 'Бух. расчет амортизации: для основного средства <%1> код <%2> объем продукции для вычисления не определен'"),
						ВыборкаПоОС.ОсновноеСредство, СокрЛП(ВыборкаПоОС.Код)),
						ВыборкаПоОС.ОсновноеСредство, , Реквизиты.Объект, ВидРегламентнойОперации);
				КонецЕсли;
				Продолжить;
			КонецЕсли;
			
			СуммаАмортизации = ВыборкаПоОС.СтоимостьДляВычисленияАмортизации * ВыборкаПоОС.Количество / ВыборкаПоОС.ОбъемПродукцииРаботДляВычисленияАмортизации;
			
		ИначеЕсли ВыборкаПоОС.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.УменьшаемогоОстатка Тогда
			
			Если Год(ВыборкаПоОС.Период) = Год(Реквизиты.Период) Тогда
				СтоимостьИтоговая = ВыборкаПоОС.СтоимостьДляВычисленияАмортизации;
			Иначе
				СтоимостьИтоговая = ВыборкаПоОС.СтоимостьНаНачалоГода;
			КонецЕсли;
			
			СтоимостьИтоговая		= ?(СтоимостьИтоговая = NULL, 0, СтоимостьИтоговая);
			СуммаГодовойАмортизации = СтоимостьИтоговая / ВыборкаПоОС.СрокИспользованияДляВычисленияАмортизации * 12;
			
			Если НЕ ЗначениеЗаполнено(ВыборкаПоОС.ГрафикАмортизации) Тогда
				СуммаАмортизации	= СуммаГодовойАмортизации / 12;
			Иначе
				КоэффициентПериода	= ПолучитьКоэффициентАмортизацииИзГрафика(ТаблицаГрафиков, ВыборкаПоОС.ГрафикАмортизации, Реквизиты.Период);
				СуммаАмортизации	= СуммаГодовойАмортизации * КоэффициентПериода;
			КонецЕсли;
			
			КоэффициентУскорения	= ВыборкаПоОС.КоэффициентУскорения;
			
			Если НЕ ЗначениеЗаполнено(ВыборкаПоОС.КоэффициентУскорения) Тогда
				
				КоэффициентУскорения = 1;
				
				Если ВыдаватьСообщения = Истина Тогда
					ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации(СтрШаблон(НСтр("ru = 'Бух. расчет амортизации: для основного средства <%1> код <%2> коэффициент ускорения не заполнен'"),
						ВыборкаПоОС.ОсновноеСредство, СокрЛП(ВыборкаПоОС.Код)),
						ВыборкаПоОС.ОсновноеСредство, , Реквизиты.Объект, ВидРегламентнойОперации, Ложь);
				КонецЕсли;
			КонецЕсли;
			
			СуммаАмортизации = СуммаАмортизации * КоэффициентУскорения;
			
		ИначеЕсли ВыборкаПоОС.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.ПоСуммеЧиселЛетИспользования Тогда
			
			//Дата последнего изменения параметров
			Если ВыборкаПоОС.Период = Null Тогда
				ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации(СтрШаблон(НСтр("ru = 'Бух. расчет амортизации: для основного средства <%1> код <%2> не определилась дата начала использования (изменения параметров)'"),
					ВыборкаПоОС.ОсновноеСредство, СокрЛП(ВыборкаПоОС.Код)),
					ВыборкаПоОС.ОсновноеСредство, , Реквизиты.Объект, ВидРегламентнойОперации);
				Продолжить;
			КонецЕсли;
			
			ДатаНачалаРасчета = НачалоМесяца(ДобавитьМесяц(ВыборкаПоОС.Период,1));
			
			ЧислоЛетПользования       = ?(ВыборкаПоОС.СрокИспользованияДляВычисленияАмортизации = NULL, 0, ВыборкаПоОС.СрокИспользованияДляВычисленияАмортизации) / 12;
			ЧислоЛетПользования       = Цел(Макс( 1, ЧислоЛетПользования));
			СуммаЧислеЛет             = 0;
			ГодИспользования          = Год(Реквизиты.Период) - Год(ДатаНачалаРасчета);
			ГодовщинаНачалаИспользования = Дата(Год(Реквизиты.Период), Месяц(ДатаНачалаРасчета), День(ДатаНачалаРасчета));
			
			Если КонецМесяца(Реквизиты.Период) >= КонецМесяца(ГодовщинаНачалаИспользования) Тогда
				ГодИспользования = ГодИспользования + 1;
			КонецЕсли;    

			ГодИспользования = Макс(ГодИспользования,1);

			// Формула суммы чисел от 1 до N
			//		S = (N + 1) * N / 2
			СуммаЧислеЛет = (ЧислоЛетПользования + 1) * ЧислоЛетПользования / 2;
			
			ПроцентГодовойАмортизации	= Макс((ЧислоЛетПользования - ГодИспользования + 1),1) / СуммаЧислеЛет;
			СуммаГодовойАмортизации		= ?(ВыборкаПоОС.СтоимостьДляВычисленияАмортизации = NULL, 0, ВыборкаПоОС.СтоимостьДляВычисленияАмортизации) *
										  ПроцентГодовойАмортизации;

			Если НЕ ЗначениеЗаполнено(ВыборкаПоОС.ГрафикАмортизации) Тогда
				СуммаАмортизации		= СуммаГодовойАмортизации / 12;
			Иначе
				КоэффициентПериода		= ПолучитьКоэффициентАмортизацииИзГрафика(ТаблицаГрафиков, ВыборкаПоОС.ГрафикАмортизации, Реквизиты.Период);
				СуммаАмортизации		= СуммаГодовойАмортизации * КоэффициентПериода;
			КонецЕсли;

		ИначеЕсли ВыборкаПоОС.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.ЛинейныйПроцентом Тогда
 
			СуммаГодовойАмортизации = ВыборкаПоОС.СтоимостьДляВычисленияАмортизации * ВыборкаПоОС.КоэффициентАмортизации / 100;

			Если НЕ ЗначениеЗаполнено(ВыборкаПоОС.ГрафикАмортизации) Тогда
				СуммаАмортизации   = СуммаГодовойАмортизации / 12;
			Иначе
				КоэффициентПериода = ПолучитьКоэффициентАмортизацииИзГрафика(ТаблицаГрафиков, ВыборкаПоОС.ГрафикАмортизации, Реквизиты.Период);
				СуммаАмортизации   = СуммаГодовойАмортизации * КоэффициентПериода;
			КонецЕсли;


		КонецЕсли;
		
		Если ПрименятьПараметрыАмортизацииВТекМесяце Тогда 
			СтоимостьОстаток = ВыборкаПоОС.СтоимостьКонечныйОстаток;
			АмортизацияОстаток = ВыборкаПоОС.АмортизацияКонечныйОстаток;
		Иначе 
			СтоимостьОстаток = ВыборкаПоОС.СтоимостьНачальныйОстаток;
			АмортизацияОстаток = ВыборкаПоОС.АмортизацияНачальныйОстаток;
		КонецЕсли;
		
		ВсегоОсталосьСписать = СтоимостьОстаток - АмортизацияОстаток - ВыборкаПоОС.ЛиквидационнаяСтоимость;
		
		//Списываем остаток если он есть
		Разница = 0;
		Разница = Цел(ВсегоОсталосьСписать - СуммаАмортизации);
		
		Если Разница = 0 Тогда 
			СуммаАмортизации  = ВсегоОсталосьСписать;
		Иначе 
			СуммаАмортизации  = Макс(0,Мин(СуммаАмортизации, ВсегоОсталосьСписать));
		КонецЕсли;
			
		СтрокаАмортизации = ТаблицаАмортизации.Добавить();
		СтрокаАмортизации.СтруктурноеПодразделение		= ВыборкаПоОС.СтруктурноеПодразделение;
		СтрокаАмортизации.КорСтруктурноеПодразделение	= ВыборкаПоОС.СтруктурноеПодразделение;
		СтрокаАмортизации.ИмяСписка             		= "РаспределениеАмортизацииПоНаправлениямРегл";
		СтрокаАмортизации.СинонимСписка            		= НСтр("ru = 'ОС'");
    	СтрокаАмортизации.ОбъектУчета             		= ВыборкаПоОС.ОсновноеСредство;
    	СтрокаАмортизации.СчетУчета		           		= ВыборкаПоОС.СчетУчетаБУ;
    	СтрокаАмортизации.СчетАмортизации	      		= ВыборкаПоОС.СчетНачисленияАмортизацииБУ;
    	СтрокаАмортизации.НаправлениеАмортизации 		= ВыборкаПоОС.СпособОтраженияРасходовПоАмортизации;
		СтрокаАмортизации.ПризнакФиксированногоАктива 	= ВыборкаПоОС.ПризнакФиксированногоАктива;		
		СтрокаАмортизации.ТекущееПодразделение			= ВыборкаПоОС.ТекущееПодразделение;
		СтрокаАмортизации.ТекущееМОЛ					= ВыборкаПоОС.ТекущийМОЛ;
    	СтрокаАмортизации.Сумма                    		= СуммаАмортизации;
		СтрокаАмортизации.Период                    	= Реквизиты.Период;
		СтрокаАмортизации.Организация                   = Реквизиты.Организация;
		СтрокаАмортизации.Регистратор                   = Реквизиты.Регистратор; 
		СтрокаАмортизации.НомерСтроки                   = НомерСтроки; 
		
		НомерСтроки = НомерСтроки + 1;		

	КонецЦикла;

	Возврат ТаблицаАмортизации;

КонецФункции // РасчетАмортизацииБухРегл()

Функция ПолучитьТаблицуГрафиковАмортизации()

	Запрос = Новый Запрос();
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Ссылка КАК График,
	|	Коэффициент1,
	|	Коэффициент2,
	|	Коэффициент3,
	|	Коэффициент4,
	|	Коэффициент5,
	|	Коэффициент6,
	|	Коэффициент7,
	|	Коэффициент8,
	|	Коэффициент9,
	|	Коэффициент10,
	|	Коэффициент11,
	|	Коэффициент12,
	|	Коэффициент1 + Коэффициент2 + Коэффициент3 + Коэффициент4 + Коэффициент5 + Коэффициент6 + Коэффициент7 + Коэффициент8 + Коэффициент9 + Коэффициент10 + Коэффициент11 + Коэффициент12 КАК СуммаКоэффициентов
	|ИЗ
	|	Справочник.ГодовыеГрафикиАмортизацииОС КАК ГодовыеГрафикиАмортизацииОС";

	ТаблицаГрафиков = Запрос.Выполнить().Выгрузить();
	ТаблицаГрафиков.Индексы.Добавить("График");

	Возврат ТаблицаГрафиков;

КонецФункции

Функция ПолучитьКоэффициентАмортизацииИзГрафика(ТаблицаГрафиков, График, ДатаРасчета)

	КоэффициентАммортизации = 0;

	СтрокаТЧ = ТаблицаГрафиков.Найти(График, "График");
	Если СтрокаТЧ = Неопределено Тогда
		Возврат 0;
	КонецЕсли;
	
	СуммаВсех   = СтрокаТЧ.СуммаКоэффициентов;
	СуммаОдного = СтрокаТЧ["Коэффициент" + Месяц(ДатаРасчета)];

	КоэффициентАммортизации = СуммаОдного / ?(СуммаВсех = 0 ИЛИ СуммаВсех = NULL, 1, СуммаВсех);

	Возврат КоэффициентАммортизации;

КонецФункции // ПолучитьКоэффициентАмортизацииИзГрафика()


///////////////////////////////////////////////////////////////////////////////
// РАСПРЕДЕЛЕНИЕ АМОРТИЗАЦИИ  

Функция ТекстЗапросаРаспределениеАмортизацииПоНаправлениямРегл(НомераТаблиц) Экспорт
	
	НомераТаблиц.Вставить("ТаблицаОСРаспределениеАмортизацииПоНаправлениямРегл", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	""РаспределениеАмортизацииПоНаправлениямРегл"" КАК ИмяСписка,
	|	&СинонимОС КАК СинонимСписка,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	|	Реквизиты.КорСтруктурноеПодразделение КАК КорСтруктурноеПодразделение,
	|	ТаблицаОС.НомерСтроки,
	|	ТаблицаОС.ОсновноеСредство КАК ОбъектУчета,
	|	ТаблицаОС.АмортизацияЗаМесяцБУ КАК Сумма,
	|	ТаблицаОС.ПодразделениеОрганизации КАК ТекущееПодразделение,
	|	ТаблицаОС.МОЛОрганизации КАК ТекущееМОЛ,
	|	ЕСТЬNULL(СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетСрезПоследних.СпособОтраженияРасходовПоАмортизации, НЕОПРЕДЕЛЕНО) КАК НаправлениеАмортизации,
	|	СчетаУчетаОССрезПоследних.СчетНачисленияАмортизацииБУ КАК СчетАмортизации,
	|	ВЫБОР
	|		КОГДА ОбъектыНалоговогоУчетаФА.СостояниеФиксированногоАктива В (&СостоянияФА)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПризнакФиксированногоАктива
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОС КАК ТаблицаОС
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчет.СрезПоследних(
	|				&Период,
	|				Организация В
	|						(ВЫБРАТЬ
	|							Реквизиты.Организация
	|						ИЗ
	|							Реквизиты)
	|					И ОсновноеСредство В
	|						(ВЫБРАТЬ
	|							ТаблицаОС.ОсновноеСредство
	|						ИЗ
	|							ТаблицаОС КАК ТаблицаОС)) КАК СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетСрезПоследних
	|		ПО (ТаблицаОС.ОсновноеСредство = СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбъектыНалоговогоУчетаФА.СрезПоследних(
	|				&Период,
	|				Организация В
	|						(ВЫБРАТЬ
	|							Реквизиты.Организация
	|						ИЗ
	|							Реквизиты)
	|					И ВЫРАЗИТЬ(ФиксированныйАктив КАК Справочник.ОсновныеСредства) В
	|						(ВЫБРАТЬ
	|							ТаблицаОС.ОсновноеСредство
	|						ИЗ
	|							ТаблицаОС КАК ТаблицаОС)) КАК ОбъектыНалоговогоУчетаФА
	|		ПО (ТаблицаОС.ОсновноеСредство = ОбъектыНалоговогоУчетаФА.ФиксированныйАктив)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаУчетаОС.СрезПоследних(
	|				&Период,
	|				Организация В
	|						(ВЫБРАТЬ
	|							Реквизиты.Организация
	|						ИЗ
	|							Реквизиты)
	|					И ОсновноеСредство В
	|						(ВЫБРАТЬ
	|							ТаблицаОС.ОсновноеСредство
	|						ИЗ
	|							ТаблицаОС КАК ТаблицаОС)) КАК СчетаУчетаОССрезПоследних
	|		ПО (ТаблицаОС.ОсновноеСредство = СчетаУчетаОССрезПоследних.ОсновноеСредство)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаОС.НомерСтроки";

	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
		
КонецФункции

// ПРОВЕРКИ ДАННЫХ ОС НА КОРРЕКТНОСТЬ

Процедура ПроверитьВозможностьИзмененияСостоянияОС(ТаблицаОС, ТаблицаРеквизиты, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыВозможностьИзмененияСостоянияОС(ТаблицаОС, ТаблицаРеквизиты);

	Если Параметры.ТаблицаОС.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Реквизиты = Параметры.Реквизиты[0];

	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Если Реквизиты.Состояние <> Перечисления.ВидыСостоянийОС.СнятоСУчета Тогда
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаОС.НомерСтроки,
	|	ТаблицаОС.ОсновноеСредство КАК ОсновноеСредство
	|ПОМЕСТИТЬ ТаблицаОС
	|ИЗ
	|	&ТаблицаОС КАК ТаблицаОС
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СостоянияОСОрганизаций.ОсновноеСредство КАК ОсновноеСредство,
	|	СостоянияОСОрганизаций.Организация КАК Организация,
	|	СостоянияОСОрганизаций.Состояние КАК Состояние,
	|	СостоянияОСОрганизаций.ДатаСостояния КАК ДатаСостояния
	|ПОМЕСТИТЬ СостоянияОСОрганизаций_Период
	|ИЗ
	|	РегистрСведений.СостоянияОСОрганизаций.СрезПоследних(
	|			&Период,
	|			ОсновноеСредство В
	|					(ВЫБРАТЬ
	|						ТаблицаОС.ОсновноеСредство
	|					ИЗ
	|						ТаблицаОС)
	|				И Организация = &Организация) КАК СостоянияОСОрганизаций
	|ГДЕ
	|	СостоянияОСОрганизаций.Состояние = ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийОС.СнятоСУчета)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СостоянияОСОрганизаций.ОсновноеСредство КАК ОсновноеСредство,
	|	СостоянияОСОрганизаций.Организация КАК Организация,
	|	СостоянияОСОрганизаций.Состояние КАК Состояние,
	|	МАКСИМУМ(СостоянияОСОрганизаций.ДатаСостояния) КАК ДатаСостояния
	|ПОМЕСТИТЬ РанееСнятыеСУчета
	|ИЗ
	|	СостоянияОСОрганизаций_Период КАК СостоянияОСОрганизаций
	|
	|СГРУППИРОВАТЬ ПО
	|	СостоянияОСОрганизаций.ОсновноеСредство,
	|	СостоянияОСОрганизаций.Организация,
	|	СостоянияОСОрганизаций.Состояние
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СостоянияОСОрганизаций.ОсновноеСредство,
	|	СостоянияОСОрганизаций.Организация,
	|	СостоянияОСОрганизаций.Состояние,
	|	МАКСИМУМ(СостоянияОСОрганизаций.ДатаСостояния)
	|ИЗ
	|	РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОСОрганизаций
	|		ЛЕВОЕ СОЕДИНЕНИЕ СостоянияОСОрганизаций_Период КАК СостоянияОСОрганизаций_Период
	|		ПО СостоянияОСОрганизаций.ОсновноеСредство <> СостоянияОСОрганизаций_Период.ОсновноеСредство
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОС КАК ТаблицаОС
	|		ПО (ТаблицаОС.ОсновноеСредство = СостоянияОСОрганизаций.ОсновноеСредство)
	|ГДЕ
	|	СостоянияОСОрганизаций.ДатаСостояния <= &Период
	|	И СостоянияОСОрганизаций.Состояние = ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийОС.СнятоСУчета)
	|	И СостоянияОСОрганизаций.Организация = &Организация
	|
	|СГРУППИРОВАТЬ ПО
	|	СостоянияОСОрганизаций.ОсновноеСредство,
	|	СостоянияОСОрганизаций.Организация,
	|	СостоянияОСОрганизаций.Состояние
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СостоянияОСОрганизаций.ОсновноеСредство,
	|	СостоянияОСОрганизаций.ОсновноеСредство.Код КАК КодОС,
	|	СостоянияОСОрганизаций.ДатаСостояния,
	|	СостоянияОСОрганизаций.Регистратор,
	|	ТаблицаОС.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОСОрганизаций
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОС КАК ТаблицаОС
	|		ПО СостоянияОСОрганизаций.ОсновноеСредство = ТаблицаОС.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РанееСнятыеСУчета КАК РанееСнятыеСУчета
	|		ПО СостоянияОСОрганизаций.Организация = РанееСнятыеСУчета.Организация
	|			И СостоянияОСОрганизаций.ОсновноеСредство = РанееСнятыеСУчета.ОсновноеСредство
	|ГДЕ
	|	ВЫБОР
	|			КОГДА РанееСнятыеСУчета.ДатаСостояния ЕСТЬ NULL  
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ВЫБОР
	|					КОГДА СостоянияОСОрганизаций.ДатаСостояния > РанееСнятыеСУчета.ДатаСостояния
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ ЛОЖЬ
	|				КОНЕЦ
	|		КОНЕЦ
	|	И СостоянияОСОрганизаций.ДатаСостояния <= &Период
	|	И СостоянияОСОрганизаций.Состояние = &Состояние
	|	И СостоянияОСОрганизаций.Организация = &Организация
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
Иначе
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаОС.НомерСтроки,
	|	ТаблицаОС.ОсновноеСредство КАК ОсновноеСредство
	|ПОМЕСТИТЬ ТаблицаОС
	|ИЗ
	|	&ТаблицаОС КАК ТаблицаОС
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СостоянияОСОрганизаций.ОсновноеСредство,
	|	СостоянияОСОрганизаций.ДатаСостояния,
	|	СостоянияОСОрганизаций.Регистратор,
	|	СостоянияОСОрганизаций.ОсновноеСредство.Код КАК КодОС,
	|	ТаблицаОС.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	РегистрСведений.СостоянияОСОрганизаций.СрезПоследних(
	|			&Период,
	|			Организация = &Организация
	|				И ОсновноеСредство В
	|					(ВЫБРАТЬ
	|						ТаблицаОС.ОсновноеСредство
	|					ИЗ
	|						ТаблицаОС)) КАК СостоянияОСОрганизаций
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОС КАК ТаблицаОС
	|		ПО (ТаблицаОС.ОсновноеСредство = СостоянияОСОрганизаций.ОсновноеСредство)
	|ГДЕ
	|	СостоянияОСОрганизаций.Состояние = &Состояние
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	КонецЕсли;
	
	
	Запрос.УстановитьПараметр("Организация", Реквизиты.Организация );
	Запрос.УстановитьПараметр("Состояние", Реквизиты.Состояние);
	Запрос.УстановитьПараметр("Документ", Реквизиты.Регистратор);
	Запрос.УстановитьПараметр("ТаблицаОС", Параметры.ТаблицаОС);	
	Запрос.УстановитьПараметр("Период", Реквизиты.Период);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();

		ШаблонСообщения = НСтр("ru = 'Для основного средства <%1 (%2)> в организации <%3> уже зафиксировано состояние <%4>
			|документом <%5>. Дата состояния: %6'");

		Пока Выборка.Следующий() Цикл
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Выборка.ОсновноеСредство,
				Выборка.КодОС, Реквизиты.Организация, Реквизиты.Состояние, Выборка.Регистратор, Формат(Выборка.ДатаСостояния, "ДФ=dd.MM.yyyy"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Реквизиты.Регистратор, Реквизиты.ИмяСписка + "["
				+ Формат(Выборка.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].ОсновноеСредство", "Объект", Отказ);
		КонецЦикла;		
	КонецЕсли;

	//проверим принятие к учету в других организациях
	Если Реквизиты.Состояние = Перечисления.ВидыСостоянийОС.ПринятоКУчету Тогда
		
		Запрос.Текст =	"ВЫБРАТЬ
		              	|	ПРЕДСТАВЛЕНИЕ(СостоянияОСОрганизаций.ОсновноеСредство) КАК ОсновноеСредство,
		              	|	СостоянияОСОрганизаций.ОсновноеСредство.Код КАК КодОС,
		              	|	ПРЕДСТАВЛЕНИЕ(СостоянияОСОрганизаций.Организация) КАК Организация,
		              	|	СостоянияОСОрганизаций.ДатаСостояния КАК ДатаСостояния,
		              	|	ТаблицаОС.НомерСтроки КАК НомерСтроки
		              	|ИЗ
		              	|	РегистрСведений.СостоянияОСОрганизаций.СрезПоследних(
		              	|			&Период,
		              	|			Организация <> &Организация
		              	|				И ОсновноеСредство В
		              	|					(ВЫБРАТЬ
		              	|						ТаблицаОС.ОсновноеСредство
		              	|					ИЗ
		              	|						ТаблицаОС)) КАК СостоянияОСОрганизаций
		              	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОС КАК ТаблицаОС
		              	|		ПО СостоянияОСОрганизаций.ОсновноеСредство = ТаблицаОС.ОсновноеСредство
		              	|ГДЕ
		              	|	СостоянияОСОрганизаций.Состояние = ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийОС.ПринятоКУчету)
		              	|
		              	|УПОРЯДОЧИТЬ ПО
		              	|	НомерСтроки";

		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			Выборка = РезультатЗапроса.Выбрать();

			ШаблонСообщения = НСтр("ru = 'Основное средство <%1 (%2)> принято к учету в организации <%3>.
				|Дата состояния: %4'");

			Пока Выборка.Следующий() Цикл
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Выборка.ОсновноеСредство,
					Выборка.КодОС, Выборка.Организация, Формат(Выборка.ДатаСостояния, "ДФ=dd.MM.yyyy"));
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Реквизиты.Регистратор, Реквизиты.ИмяСписка + "["
					+ Формат(Выборка.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].ОсновноеСредство", "Объект", Отказ);
			КонецЦикла;
				
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Функция ПодготовитьПараметрыВозможностьИзмененияСостоянияОС(ТаблицаОС, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаОС

	СписокОбязательныхКолонок = ""
	+ "НомерСтроки,"      // <Число, 5, 0>
	+ "ОсновноеСредство"; // <СправочникСсылка.ОсновныеСредства>

	Параметры.Вставить("ТаблицаОС",
		ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаОС, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"      // <Дата>
	+ "ИмяСписка,"   // <Строка, 0>
	+ "Организация," // <СправочникСсылка.Организации>
	+ "Состояние," // <ПеречислениеСсылка.СостоянияОС> - состояние ОС, которое требуется установить
	+ "Регистратор"; // <ДокументСсылка.*>

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Процедура ПроверитьСоответствиеОСОрганизации(ТаблицаОС, ТаблицаРеквизиты, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыСоответствиеОСОрганизации(ТаблицаОС, ТаблицаРеквизиты);

	Если Параметры.ТаблицаОС.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Реквизиты = Параметры.Реквизиты[0];

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период", Новый Граница(Новый МоментВремени(Реквизиты.Период, Реквизиты.Регистратор), ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
	Запрос.УстановитьПараметр("ТаблицаОС", Параметры.ТаблицаОС);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаОС.НомерСтроки,
	|	ВЫРАЗИТЬ(ТаблицаОС.ОсновноеСредство КАК Справочник.ОсновныеСредства) КАК ОсновноеСредство
	|ПОМЕСТИТЬ ТаблицаОС
	|ИЗ
	|	&ТаблицаОС КАК ТаблицаОС
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПервоначальныеСведенияОСБУ.ОсновноеСредство КАК ОсновноеСредство
	|ПОМЕСТИТЬ ПервоначальныеСведенияОСБУ
	|ИЗ
	|	РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(
	|			&Период,
	|			Организация = &Организация
	|				И ОсновноеСредство В
	|					(ВЫБРАТЬ
	|						ТаблицаОС.ОсновноеСредство
	|					ИЗ
	|						ТаблицаОС КАК ТаблицаОС)) КАК ПервоначальныеСведенияОСБУ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОС.НомерСтроки,
	|	ВЫБОР
	|		КОГДА ПервоначальныеСведенияОСБУ.ОсновноеСредство ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ОтражалосьВБухгалтерскомУчете,
	|	ТаблицаОС.ОсновноеСредство КАК ОсновноеСредство,
	|	ТаблицаОС.ОсновноеСредство.Код КАК КодОС
	|ИЗ
	|	ТаблицаОС КАК ТаблицаОС
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПервоначальныеСведенияОСБУ КАК ПервоначальныеСведенияОСБУ
	|		ПО ТаблицаОС.ОсновноеСредство = ПервоначальныеСведенияОСБУ.ОсновноеСредство
	|ГДЕ
	|	ПервоначальныеСведенияОСБУ.ОсновноеСредство ЕСТЬ NULL 
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаОС.НомерСтроки";

	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();

		ШаблонСообщенияБУ = НСтр("ru = 'Основное средство <%1 (%2)> не отражалось в бухгалтерском учете по организации <%3>'");

		Пока Выборка.Следующий() Цикл
			
			Если НЕ Выборка.ОтражалосьВБухгалтерскомУчете Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщенияБУ,
					Выборка.ОсновноеСредство, Выборка.КодОС, Реквизиты.Организация);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Реквизиты.Регистратор, Реквизиты.ИмяСписка + "["
					+ Формат(Выборка.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].ОсновноеСредство", "Объект", Отказ);
			КонецЕсли;
				
		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

Функция ПодготовитьПараметрыСоответствиеОСОрганизации(ТаблицаОС, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаОС

	СписокОбязательныхКолонок = ""
	+ "НомерСтроки,"      // <Число, 5, 0>
	+ "ОсновноеСредство"; // <СправочникСсылка.ОсновныеСредства>

	Параметры.Вставить("ТаблицаОС",
		ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаОС, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"      // <Дата>
	+ "ИмяСписка,"   // <Строка, 0>
	+ "Организация," // <СправочникСсылка.Организации>
	+ "Регистратор"; // <ДокументСсылка.*>

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Процедура ПроверитьСостояниеОСПринятоКУчету(ТаблицаОС, ТаблицаРеквизиты, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыСостояниеОСПринятоКУчету(ТаблицаОС, ТаблицаРеквизиты);

	Если Параметры.ТаблицаОС.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Реквизиты = Параметры.Реквизиты[0];

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата", Реквизиты.Период);
	Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
	Запрос.УстановитьПараметр("ТаблицаОС", Параметры.ТаблицаОС);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаОС.НомерСтроки,
	|	ВЫРАЗИТЬ(ТаблицаОС.ОсновноеСредство КАК Справочник.ОсновныеСредства) КАК ОсновноеСредство
	|ПОМЕСТИТЬ ТаблицаОС
	|ИЗ
	|	&ТаблицаОС КАК ТаблицаОС
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СостоянияОСОрганизаций.ОсновноеСредство КАК ОсновноеСредство,
	|	СостоянияОСОрганизаций.ДатаСостояния,
	|	СостоянияОСОрганизаций.Регистратор,
	|	СостоянияОСОрганизаций.Состояние,
	|	СостоянияОСОрганизаций.Организация
	|ПОМЕСТИТЬ СостоянияОС
	|ИЗ
	|	РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОСОрганизаций
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОС КАК ТаблицаОС
	|		ПО СостоянияОСОрганизаций.ОсновноеСредство = ТаблицаОС.ОсновноеСредство
	|			И (СостоянияОСОрганизаций.ДатаСостояния < &Дата)
	|			И (СостоянияОСОрганизаций.Организация = &Организация)
	|			И (СостоянияОСОрганизаций.Активность = ИСТИНА)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СостоянияОС.ОсновноеСредство КАК ОсновноеСредство,
	|	МАКСИМУМ(СостоянияОС.ДатаСостояния) КАК ДатаСостояния
	|ПОМЕСТИТЬ ДатыПоследнихСостоянийОС
	|ИЗ
	|	СостоянияОС КАК СостоянияОС
	|
	|СГРУППИРОВАТЬ ПО
	|	СостоянияОС.ОсновноеСредство
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СостоянияОС.ОсновноеСредство КАК ОсновноеСредство,
	|	СостоянияОС.ДатаСостояния,
	|	СостоянияОС.Регистратор,
	|	СостоянияОС.Организация,
	|	СостоянияОС.Состояние
	|ПОМЕСТИТЬ ПоследниеСостоянияОС
	|ИЗ
	|	ДатыПоследнихСостоянийОС КАК ДатыПоследнихСостоянийОС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СостоянияОС КАК СостоянияОС
	|		ПО ДатыПоследнихСостоянийОС.ОсновноеСредство = СостоянияОС.ОсновноеСредство
	|			И ДатыПоследнихСостоянийОС.ДатаСостояния = СостоянияОС.ДатаСостояния
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОС.ОсновноеСредство,
	|	ТаблицаОС.ОсновноеСредство.Код КАК КодОС,
	|	ТаблицаОС.НомерСтроки КАК НомерСтроки,
	|	ПоследниеСостоянияОС.ДатаСостояния,
	|	ПоследниеСостоянияОС.Регистратор,
	|	ПоследниеСостоянияОС.Организация,
	|	ПоследниеСостоянияОС.Состояние
	|ИЗ
	|	ТаблицаОС КАК ТаблицаОС
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПоследниеСостоянияОС КАК ПоследниеСостоянияОС
	|		ПО ТаблицаОС.ОсновноеСредство = ПоследниеСостоянияОС.ОсновноеСредство
	|ГДЕ
	|	(ПоследниеСостоянияОС.Состояние ЕСТЬ NULL 
	|			ИЛИ ПоследниеСостоянияОС.Состояние = ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийОС.СнятоСУчета))
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";

	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();

		Пока Выборка.Следующий() Цикл
			Если Выборка.Состояние = Null Тогда
				ШаблонСообщения = НСтр("ru = 'По состоянию на %4.
					|Основное средство <%1 (%2)> не принято к учету в организации <%3>.'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Выборка.ОсновноеСредство,
					Выборка.КодОС, Реквизиты.Организация, Формат(Реквизиты.Период, "ДФ=dd.MM.yyyy"));
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Реквизиты.Регистратор, Реквизиты.ИмяСписка + "["
					+ Формат(Выборка.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].ОсновноеСредство", "Объект", Отказ);
			Иначе
				ШаблонСообщения = НСтр("ru = 'Основное средство <%1 (%2)> снято с учета в организации <%3>
					|документом <%4>. Дата состояния: %5'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Выборка.ОсновноеСредство,
					Выборка.КодОС, Реквизиты.Организация, Выборка.Регистратор, Формат(Выборка.ДатаСостояния, "ДФ=dd.MM.yyyy"));
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Реквизиты.Регистратор, Реквизиты.ИмяСписка + "["
					+ Формат(Выборка.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].ОсновноеСредство", "Объект", Отказ);
			КонецЕсли;
		КонецЦикла;

		Возврат;
	КонецЕсли;

КонецПроцедуры

Функция ПодготовитьПараметрыСостояниеОСПринятоКУчету(ТаблицаОС, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаОС

	СписокОбязательныхКолонок = ""
	+ "НомерСтроки,"      // <Число, 5, 0>
	+ "ОсновноеСредство"; // <СправочникСсылка.ОсновныеСредства>

	Параметры.Вставить("ТаблицаОС",
		ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаОС, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"      // <Дата>
	+ "ИмяСписка,"   // <Строка, 0>
	+ "Организация," // <ДокументСсылка.*>
	+ "Регистратор"; // <СправочникСсылка.Организации>

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Процедура ПроверитьСоответствиеМестонахожденияОС(ТаблицаОС, ТаблицаРеквизиты, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыСоответствиеМестонахожденияОС(ТаблицаОС, ТаблицаРеквизиты);

	Если Параметры.ТаблицаОС.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Реквизиты = Параметры.Реквизиты[0];

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период", Новый Граница(Новый МоментВремени(Реквизиты.Период, Реквизиты.Регистратор), ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
	Запрос.УстановитьПараметр("ТаблицаОС", Параметры.ТаблицаОС);
	Запрос.УстановитьПараметр("СтруктурноеПодразделение", Реквизиты.СтруктурноеПодразделение);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаОС.НомерСтроки,
	|	ВЫРАЗИТЬ(ТаблицаОС.ОсновноеСредство КАК Справочник.ОсновныеСредства) КАК ОсновноеСредство
	|ПОМЕСТИТЬ ТаблицаОС
	|ИЗ
	|	&ТаблицаОС КАК ТаблицаОС
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МестонахождениеОСБУ.ОсновноеСредство КАК ОсновноеСредство,
	|	МестонахождениеОСБУ.СтруктурноеПодразделение,
	|	МестонахождениеОСБУ.Местонахождение КАК Подразделение
	|ПОМЕСТИТЬ МестонахождениеОСБУ
	|ИЗ
	|	РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних(
	|			&Период,
	|			Организация = &Организация
	|				И ОсновноеСредство В
	|					(ВЫБРАТЬ
	|						ТаблицаОС.ОсновноеСредство
	|					ИЗ
	|						ТаблицаОС КАК ТаблицаОС)) КАК МестонахождениеОСБУ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОС.НомерСтроки,
	|	ТаблицаОС.ОсновноеСредство КАК ОсновноеСредство,
	|	ТаблицаОС.ОсновноеСредство.Код КАК КодОС,
	|	МестонахождениеОСБУ.СтруктурноеПодразделение
	|ИЗ
	|	ТаблицаОС КАК ТаблицаОС
	|		ЛЕВОЕ СОЕДИНЕНИЕ МестонахождениеОСБУ КАК МестонахождениеОСБУ
	|		ПО ТаблицаОС.ОсновноеСредство = МестонахождениеОСБУ.ОсновноеСредство
	|ГДЕ
	|	(МестонахождениеОСБУ.ОсновноеСредство ЕСТЬ NULL 
	|			ИЛИ МестонахождениеОСБУ.СтруктурноеПодразделение <> &СтруктурноеПодразделение)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаОС.НомерСтроки";

	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();

		ШаблонСообщенияПодразделение = НСтр("ru = 'Основное средство <%1 (%2)> не отражалось в учете структурной единицы <%3>'");
		
		Пока Выборка.Следующий() Цикл
			Если Выборка.СтруктурноеПодразделение <> Реквизиты.СтруктурноеПодразделение Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщенияПодразделение,
					Выборка.ОсновноеСредство, Выборка.КодОС,
					?(ЗначениеЗаполнено(Реквизиты.СтруктурноеПодразделение), "" + Реквизиты.Организация + " - " +  Реквизиты.СтруктурноеПодразделение, Реквизиты.Организация));
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Реквизиты.Регистратор, Реквизиты.ИмяСписка + "["
					+ Формат(Выборка.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].ОсновноеСредство", "Объект", Отказ);
			КонецЕсли;

		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

Функция ПодготовитьПараметрыСоответствиеМестонахожденияОС(ТаблицаОС, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаОС

	СписокОбязательныхКолонок = ""
	+ "НомерСтроки,"      // <Число, 5, 0>
	+ "ОсновноеСредство"; // <СправочникСсылка.ОсновныеСредства>

	Параметры.Вставить("ТаблицаОС",
		ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаОС, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"        // <Дата>
	+ "ИмяСписка,"     // <Строка, 0>
	+ "Организация,"   // <СправочникСсылка.Организации>
	+ "СтруктурноеПодразделение," // <Ссылка на справочник подразделений> - подразделение в котором находится ОС
	+ "Регистратор";   // <ДокументСсылка.*>

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Процедура ПроверитьЗаполнениеСчетаУчетаОС(ТаблицаОС, ТаблицаРеквизиты, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыЗаполнениеСчетаУчетаОС(ТаблицаОС, ТаблицаРеквизиты);

	Если Параметры.ТаблицаОС.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Реквизиты = Параметры.Реквизиты[0];

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период", Новый Граница(Новый МоментВремени(Реквизиты.Период, Реквизиты.Регистратор), ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
	Запрос.УстановитьПараметр("ТаблицаОС", Параметры.ТаблицаОС);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаОС.НомерСтроки,
	|	ВЫРАЗИТЬ(ТаблицаОС.ОсновноеСредство КАК Справочник.ОсновныеСредства) КАК ОсновноеСредство,
	|	СуммаАмортизации КАК СуммаАмортизации
	|ПОМЕСТИТЬ ТаблицаОС
	|ИЗ
	|	&ТаблицаОС КАК ТаблицаОС
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СчетаУчетаОС.ОсновноеСредство,
	|	СчетаУчетаОС.СчетУчетаБУ КАК СчетУчетаБУ,
	|	СчетаУчетаОС.СчетНачисленияАмортизацииБУ
	|ПОМЕСТИТЬ СчетаУчетаОС
	|ИЗ
	|	РегистрСведений.СчетаУчетаОС.СрезПоследних(
	|			&Период,
	|			Организация = &Организация
	|				И ОсновноеСредство В
	|					(ВЫБРАТЬ
	|						ТаблицаОС.ОсновноеСредство
	|					ИЗ
	|						ТаблицаОС КАК ТаблицаОС)) КАК СчетаУчетаОС
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетУчетаБУ,
	|	СчетаУчетаОС.СчетНачисленияАмортизацииБУ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОС.НомерСтроки,
	|	ТаблицаОС.ОсновноеСредство КАК ОсновноеСредство,
	|	ТаблицаОС.ОсновноеСредство.Код КАК КодОС,
	|	СчетаУчетаОС.СчетУчетаБУ,
	|	СчетаУчетаОС.СчетНачисленияАмортизацииБУ,
	|	ТаблицаОС.СуммаАмортизации
	|ИЗ
	|	ТаблицаОС КАК ТаблицаОС
	|		ЛЕВОЕ СОЕДИНЕНИЕ СчетаУчетаОС КАК СчетаУчетаОС
	|		ПО ТаблицаОС.ОсновноеСредство = СчетаУчетаОС.ОсновноеСредство
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаОС.НомерСтроки";

	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		ШаблонСообщенияСчетУчета = НСтр("ru = 'Для основного средства <%1 (%2)> не указан счет учета (БУ).'");
		ШаблонСообщенияСчетАмортизации = НСтр("ru = 'Для основного средства <%1 (%2)> не указан счет начисления амортизации (БУ).'");
		Пока Выборка.Следующий() Цикл   			                 			
			Если НЕ ЗначениеЗаполнено(Выборка.СчетУчетаБУ) Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщенияСчетУчета,
															Выборка.ОсновноеСредство, Выборка.КодОС);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Реквизиты.Регистратор, Реквизиты.ИмяСписка + "["
																+ Формат(Выборка.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].ОсновноеСредство", "Объект", Отказ);
			КонецЕсли;
			
			Если Выборка.СуммаАмортизации <> 0 И НЕ ЗначениеЗаполнено(Выборка.СчетНачисленияАмортизацииБУ)  Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщенияСчетАмортизации,
															Выборка.ОсновноеСредство, Выборка.КодОС);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Реквизиты.Регистратор, Реквизиты.ИмяСписка + "["
																+ Формат(Выборка.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].ОсновноеСредство", "Объект", Отказ);
			КонецЕсли;   			
		КонецЦикла; 		
	КонецЕсли;

КонецПроцедуры

Функция ПодготовитьПараметрыЗаполнениеСчетаУчетаОС(ТаблицаОС, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаОС

	СписокОбязательныхКолонок = ""
	+ "НомерСтроки,"      // <Число, 5, 0>
	+ "ОсновноеСредство,"
	+ "СуммаАмортизации";
	
	Параметры.Вставить("ТаблицаОС",
		ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаОС, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"      // <Дата>
	+ "ИмяСписка,"   // <Строка, 0>
	+ "Организация," // <СправочникСсылка.Организации>
	+ "Регистратор"; // <ДокументСсылка.*>

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Функция ПодготовитьПараметрыЧастичногоСписания(ТаблицаОС, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаОС

	СписокОбязательныхКолонок = ""
	+ "НомерСтроки,"      // <Число, 5, 0>
	+ "ОсновноеСредство,"
	+ "СуммаАмортизации";
	
	Параметры.Вставить("ТаблицаОС",
		ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаОС, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"      // <Дата>
	+ "ИмяСписка,"   // <Строка, 0>
	+ "Организация," // <СправочникСсылка.Организации>
	+ "ВидОперации," // 
	+ "Регистратор"; // <ДокументСсылка.*>

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции


Процедура ПроверитьЗаполнениеСпособаОтраженияРасходовПоАмортизации(ТаблицаОС, ТаблицаРеквизиты, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыЗаполнениеСчетаУчетаОС(ТаблицаОС, ТаблицаРеквизиты);

	Если Параметры.ТаблицаОС.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Реквизиты = Параметры.Реквизиты[0];

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период", Новый Граница(Новый МоментВремени(Реквизиты.Период, Реквизиты.Регистратор), ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
	Запрос.УстановитьПараметр("ТаблицаОС", Параметры.ТаблицаОС);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаОС.НомерСтроки,
	|	ТаблицаОС.СуммаАмортизации,
	|	ВЫРАЗИТЬ(ТаблицаОС.ОсновноеСредство КАК Справочник.ОсновныеСредства) КАК ОсновноеСредство
	|ПОМЕСТИТЬ ТаблицаОС
	|ИЗ
	|	&ТаблицаОС КАК ТаблицаОС
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчет.ОсновноеСредство,
	|	СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчет.СпособОтраженияРасходовПоАмортизации
	|ПОМЕСТИТЬ СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчет
	|ИЗ
	|	РегистрСведений.СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчет.СрезПоследних(
	|			&Период,
	|			Организация = &Организация
	|				И ОсновноеСредство В
	|					(ВЫБРАТЬ
	|						ТаблицаОС.ОсновноеСредство
	|					ИЗ
	|						ТаблицаОС КАК ТаблицаОС)) КАК СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчет
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчет.СпособОтраженияРасходовПоАмортизации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОС.НомерСтроки,
	|	ТаблицаОС.ОсновноеСредство КАК ОсновноеСредство,
	|	ТаблицаОС.ОсновноеСредство.Код КАК КодОС,
	|	СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчет.СпособОтраженияРасходовПоАмортизации,
	|	ТаблицаОС.СуммаАмортизации
	|ИЗ
	|	ТаблицаОС КАК ТаблицаОС
	|		ЛЕВОЕ СОЕДИНЕНИЕ СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчет КАК СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчет
	|		ПО ТаблицаОС.ОсновноеСредство = СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчет.ОсновноеСредство
	|ГДЕ
	|	ТаблицаОС.СуммаАмортизации <> 0
	|	И (СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчет.СпособОтраженияРасходовПоАмортизации ЕСТЬ NULL 
	|			ИЛИ СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчет.СпособОтраженияРасходовПоАмортизации = ЗНАЧЕНИЕ(Справочник.СпособыОтраженияРасходовПоАмортизации.ПустаяСсылка))
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаОС.НомерСтроки";

	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();

		ШаблонСообщения = НСтр("ru = 'Для основного средства <%1 (%2)> не указаны способы отражения расходов по амортизации (БУ).'");

		Пока Выборка.Следующий() Цикл
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
				Выборка.ОсновноеСредство, Выборка.КодОС);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Реквизиты.Регистратор, Реквизиты.ИмяСписка + "["
				+ Формат(Выборка.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].ОсновноеСредство", "Объект", Отказ);
		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

Функция ПодготовитьПараметрыЗаполнениеСпособаОтраженияРасходовПоАмортизации(ТаблицаОС, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаОС

	СписокОбязательныхКолонок = ""
	+ "НомерСтроки,"      // <Число, 5, 0>
	+ "ОсновноеСредство"; // <СправочникСсылка.ОсновныеСредства>

	Параметры.Вставить("ТаблицаОС",
		ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаОС, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"      // <Дата>
	+ "ИмяСписка,"   // <Строка, 0>
	+ "Организация," // <СправочникСсылка.Организации>
	+ "Регистратор"; // <ДокументСсылка.*>

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Процедура ПроверитьВозможностьЧастичногоСписанияОС(ТаблицаОС, ТаблицаРеквизиты, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыЧастичногоСписания(ТаблицаОС, ТаблицаРеквизиты);
	
	Если Параметры.ТаблицаОС.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = Параметры.Реквизиты[0];
	СтрокаИсходногоОС = ТаблицаОС[0];
	
	Если Реквизиты.ВидОперации = Перечисления.ВидыОперацийРеструктуризацияОС.ЧастичноеСписание 
		И СтрокаИсходногоОС.СтоимостьБУ = 0 Тогда
		
		ШаблонСообщения = НСтр("ru = 'Стоимость основного средства <%1 (%2)> равна 0. Частичное списание не может быть выполнено!.'");
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
				СтрокаИсходногоОС.ОсновноеСредство, СтрокаИсходногоОС.КодОС);
				
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Реквизиты.Регистратор, , "Объект", Отказ);
	КонецЕсли;
	
КонецПроцедуры

Функция СпособОтраженияРасходовПоАмортизации(Подразделение, Организация, Период) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СчетЗатрат = УчетнаяПолитикаСервер.ОсновнойСчетУчетаЗатрат(Организация, Период);
	СвойстваСчета = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(СчетЗатрат);
	
	УчетПоНоменклатурнымГруппам = Ложь;
	Для Ном = 1 По СвойстваСчета.КоличествоСубконто Цикл
		Если СвойстваСчета["ВидСубконто" + Ном] = ПланыВидовХарактеристик.ВидыСубконтоТиповые.НоменклатурныеГруппы Тогда
			УчетПоНоменклатурнымГруппам = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	НоменклатурнаяГруппа = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ОсновнаяНоменклатурнаяГруппа();
	//Если УчетПоНоменклатурнымГруппам И Не ЗначениеЗаполнено(НоменклатурнаяГруппа) Тогда
	//	СчетЗатрат = ПланыСчетов.Типовой.АдминистративныеРасходы;
	//	СвойстваСчета = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(СчетЗатрат);
	//	УчетПоНоменклатурнымГруппам = Ложь;
	//КонецЕсли;
	//
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("СчетЗатрат", СчетЗатрат);
	Запрос.УстановитьПараметр("УчетПоНоменклатурнымГруппам", УчетПоНоменклатурнымГруппам);
	Запрос.УстановитьПараметр("НоменклатурнаяГруппа", НоменклатурнаяГруппа);
	
	Организации = Новый Массив;
	Организации.Добавить(Организация);
	Организации.Добавить(Справочники.Организации.ПустаяСсылка());
	
	Запрос.УстановитьПараметр("Организации", Организации);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СпособыОтраженияРасходовПоАмортизацииСпособы.Ссылка,
	|	КОЛИЧЕСТВО(СпособыОтраженияРасходовПоАмортизацииСпособы.НомерСтроки) КАК КоличествоСтрок,
	|	ВЫБОР
	|		КОГДА СпособыОтраженияРасходовПоАмортизацииСпособы.Субконто1 ССЫЛКА Справочник.НоменклатурныеГруппы
	|			ТОГДА СпособыОтраженияРасходовПоАмортизацииСпособы.Субконто1
	|		КОГДА СпособыОтраженияРасходовПоАмортизацииСпособы.Субконто2 ССЫЛКА Справочник.НоменклатурныеГруппы
	|			ТОГДА СпособыОтраженияРасходовПоАмортизацииСпособы.Субконто2
	|		КОГДА СпособыОтраженияРасходовПоАмортизацииСпособы.Субконто3 ССЫЛКА Справочник.НоменклатурныеГруппы
	|			ТОГДА СпособыОтраженияРасходовПоАмортизацииСпособы.Субконто3
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК НоменклатурнаяГруппа,
	|	ВЫБОР
	|		КОГДА СпособыОтраженияРасходовПоАмортизацииСпособы.Субконто1 ССЫЛКА Справочник.СтатьиЗатрат
	|			ТОГДА СпособыОтраженияРасходовПоАмортизацииСпособы.Субконто1
	|		КОГДА СпособыОтраженияРасходовПоАмортизацииСпособы.Субконто2 ССЫЛКА Справочник.СтатьиЗатрат
	|			ТОГДА СпособыОтраженияРасходовПоАмортизацииСпособы.Субконто2
	|		КОГДА СпособыОтраженияРасходовПоАмортизацииСпособы.Субконто3 ССЫЛКА Справочник.СтатьиЗатрат
	|			ТОГДА СпособыОтраженияРасходовПоАмортизацииСпособы.Субконто3
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК СтатьяЗатрат
	|ПОМЕСТИТЬ ВТ_СпособыОтражения
	|ИЗ
	|	Справочник.СпособыОтраженияРасходовПоАмортизации.Способы КАК СпособыОтраженияРасходовПоАмортизацииСпособы
	|ГДЕ
	|	СпособыОтраженияРасходовПоАмортизацииСпособы.Ссылка.Организация В(&Организации)
	|	И СпособыОтраженияРасходовПоАмортизацииСпособы.СчетЗатрат = &СчетЗатрат
	|
	|СГРУППИРОВАТЬ ПО
	|	СпособыОтраженияРасходовПоАмортизацииСпособы.Ссылка,
	|	ВЫБОР
	|		КОГДА СпособыОтраженияРасходовПоАмортизацииСпособы.Субконто1 ССЫЛКА Справочник.НоменклатурныеГруппы
	|			ТОГДА СпособыОтраженияРасходовПоАмортизацииСпособы.Субконто1
	|		КОГДА СпособыОтраженияРасходовПоАмортизацииСпособы.Субконто2 ССЫЛКА Справочник.НоменклатурныеГруппы
	|			ТОГДА СпособыОтраженияРасходовПоАмортизацииСпособы.Субконто2
	|		КОГДА СпособыОтраженияРасходовПоАмортизацииСпособы.Субконто3 ССЫЛКА Справочник.НоменклатурныеГруппы
	|			ТОГДА СпособыОтраженияРасходовПоАмортизацииСпособы.Субконто3
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА СпособыОтраженияРасходовПоАмортизацииСпособы.Субконто1 ССЫЛКА Справочник.СтатьиЗатрат
	|			ТОГДА СпособыОтраженияРасходовПоАмортизацииСпособы.Субконто1
	|		КОГДА СпособыОтраженияРасходовПоАмортизацииСпособы.Субконто2 ССЫЛКА Справочник.СтатьиЗатрат
	|			ТОГДА СпособыОтраженияРасходовПоАмортизацииСпособы.Субконто2
	|		КОГДА СпособыОтраженияРасходовПоАмортизацииСпособы.Субконто3 ССЫЛКА Справочник.СтатьиЗатрат
	|			ТОГДА СпособыОтраженияРасходовПоАмортизацииСпособы.Субконто3
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВТ_СпособыОтражения.Ссылка
	|ИЗ
	|	ВТ_СпособыОтражения КАК ВТ_СпособыОтражения,
	|	Справочник.СтатьиЗатрат КАК СтатьиЗатрат
	|ГДЕ
	|	ВТ_СпособыОтражения.КоличествоСтрок = 1
	|	И ВТ_СпособыОтражения.СтатьяЗатрат.ВидРасходовНУ = ЗНАЧЕНИЕ(Справочник.ВидыРасходовНУ.Амортизация)
	|	И ВЫБОР
	|			КОГДА &УчетПоНоменклатурнымГруппам
	|				ТОГДА ВТ_СпособыОтражения.НоменклатурнаяГруппа = &НоменклатурнаяГруппа
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ";
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		
		Запрос = Новый Запрос;
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СтатьиЗатрат.Ссылка КАК СтатьяЗатрат
		|ИЗ
		|	Справочник.СтатьиЗатрат КАК СтатьиЗатрат
		|ГДЕ
		|	СтатьиЗатрат.ВидРасходовНУ = ЗНАЧЕНИЕ(Справочник.ВидыРасходовНУ.Амортизация)";
		
		Результат = Запрос.Выполнить().Выбрать();
		
		Если Результат.Следующий() Тогда
			СтатьяЗатрат = Результат.СтатьяЗатрат;
		Иначе
			НоваяСтатья = Справочники.СтатьиЗатрат.СоздатьЭлемент();
	
			НоваяСтатья.УстановитьНовыйКод();
			НоваяСтатья.Наименование = НСтр("ru = 'Амортизация'", ОбщегоНазначения.КодОсновногоЯзыка());
			НоваяСтатья.ВидРасходовНУ = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыРасходовНУ.Амортизация");
			НоваяСтатья.ПринятиеКНалоговомуУчету = Истина;
			НоваяСтатья.КатегорияЗатрат = Перечисления.КатегорииЗатрат.ПрочиеРасходы;
			
			НоваяСтатья.Записать();

			СтатьяЗатрат = НоваяСтатья.Ссылка;
		КонецЕсли;

		НовыйСпособОтраженияРасходов = Справочники.СпособыОтраженияРасходовПоАмортизации.СоздатьЭлемент();
		НовыйСпособОтраженияРасходов.Организация = Организация;
		
		Способ = НовыйСпособОтраженияРасходов.Способы.Добавить();
		
		Способ.СчетЗатрат = СчетЗатрат;
		Наименование = СтрШаблон(НСтр("ru = 'Счет %1'", ОбщегоНазначения.КодОсновногоЯзыка()), СвойстваСчета.Код);
		
		Способ.Коэффициент = 1;
		
		Для Ном = 1 По СвойстваСчета.КоличествоСубконто Цикл
			
			Если СвойстваСчета["ВидСубконто" + Ном] = ПланыВидовХарактеристик.ВидыСубконтоТиповые.НоменклатурныеГруппы Тогда
				Способ["Субконто" + Ном] = НоменклатурнаяГруппа;
			ИначеЕсли СвойстваСчета["ВидСубконто" + Ном] = ПланыВидовХарактеристик.ВидыСубконтоТиповые.СтатьиЗатрат Тогда
				Способ["Субконто" + Ном] = СтатьяЗатрат;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Способ["Субконто" + Ном]) Тогда
				Если Не (СвойстваСчета["ВидСубконто" + Ном] = ПланыВидовХарактеристик.ВидыСубконтоТиповые.НоменклатурныеГруппы 
					И ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ИспользоватьОднуНоменклатурнуюГруппу()) Тогда
				
					ПредставлениеСубконто = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Способ["Субконто" + Ном], "Представление");
					Наименование = Наименование + ", " + ПредставлениеСубконто;
				КонецЕсли;
			Иначе
				Наименование = Наименование + ", <...>";
			КонецЕсли;
			
		КонецЦикла;
		
		НовыйСпособОтраженияРасходов.Наименование = Наименование;
		
		НовыйСпособОтраженияРасходов.Записать();
		
		СпособОтраженияРасходов = НовыйСпособОтраженияРасходов.Ссылка;
		
	Иначе
		
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		СпособОтраженияРасходов = Выборка.Ссылка;
		
	КонецЕсли;
	
	Возврат СпособОтраженияРасходов;
	
КонецФункции
