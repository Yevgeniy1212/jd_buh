////////////////////////////////////////////////////////////////////////////////
// УправлениеЦенообразованиемКлиент: 
//  
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Процедура выполняет открытие формы "Цены и валюта" и передачу необходимых параметров открытия
//
// Параметры:
//  ФормаДокумента            - УправляемаяФорма - форма документа, из которого вызывается установка цен и валюты
//  СпособЗаполненияЦен       - ПеречислениеСсылка.СпособыЗаполненияЦен - способ заполнения цен в документе
//  ВызовПриИзмененииДоговора - Булево - признак того, что форма открывается в результате изменения договора в документе
//  ДополнительныеПараметрыОповещения - Произвольный - параметры, которые будут переданы в процедуру обработки оповещения о закрытии формы "Цены и валюта"
//  ПараметрыОткрытия         - Структура - структура, содержащая дополнительные параметры открытия формы "Цены и валюта". Может содержать следующие ключи:
//     * БезКонтроляВалютыВзаиморасчетов - Булево - признак отсутствия валюты взаиморасчетов (доступность, заполненность и т.п.)
//     * НедоступныеРеквизиты - Структура - структура, содержащая список реквизитов, запрещенных для редактирования в форме "Цены и валюта". 
//                                          Реквизиты указываются в ключах структуры. В значениях структуры можно указать конкретное свойство, 
//                                          значение которого необходимо изменить ("Видимость", "Доступность", "ТолькоПросмотр").
//                                          Свойство указывается в виде Соответствия или Структуры, где "Ключ" - имя свойства, а "Значение" - значение, которое необходимо установить. Возможна установка нескольких свойств.
//                                          Если для ключа структуры "НедоступныеРеквизиты" не указано значение, то устанавливается свойство "Доступность" в значение "ЛОЖЬ".
//     * ЕстьЗаполненныеТабличныеЧасти - Булево - признак наличия в документе заполненных табличных частей. Если параметр не указан, то будет выполнена попытка определения заполненности ТЧ из объекта переданной формы.
//
Процедура ОткрытьФормуЦеныИВалюта(ФормаДокумента, СпособЗаполненияЦен = Неопределено, ВызовПриИзмененииДоговора = Ложь, ДополнительныеПараметрыОповещения = Неопределено, ЗНАЧ ПараметрыОткрытия = Неопределено, ЭтоДокументРозничнойТорговли = Ложь) Экспорт
	
	Если СпособЗаполненияЦен = Неопределено Тогда
		СпособЗаполненияЦен = ПредопределенноеЗначение("Перечисление.СпособыЗаполненияЦен.ПоЦенамНоменклатуры");
	КонецЕсли;                                 
	
	ПараметрыОповещения = Новый Структура("ФормаДокумента, СпособЗаполненияЦен, ВызовПриИзмененииДоговора, ДополнительныеПараметры", 
		ФормаДокумента, СпособЗаполненияЦен, ВызовПриИзмененииДоговора, ДополнительныеПараметрыОповещения);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеЗакрытияФормыЦеныИВалюта", 
		ФормаДокумента, ПараметрыОповещения);	
		
	ДанныеДокумента = ДанныеДокументаДляФормыЦеныИВалюта(ФормаДокумента, ПараметрыОткрытия);
	ДополнитьПараметрыОткрытияФормыЦеныИВалюта(ФормаДокумента, ПараметрыОткрытия);
	
	ТолькоПросмотрФормы = Ложь;
	Если ФормаДокумента.Элементы.Найти("ЦеныИВалюта") <> Неопределено Тогда
		ТолькоПросмотрФормы = ФормаДокумента.ТолькоПросмотр ИЛИ ФормаДокумента.Элементы.ЦеныИВалюта.ТолькоПросмотр;
	Иначе
		ТолькоПросмотрФормы = ФормаДокумента.ТолькоПросмотр;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("ДанныеДокумента, ВызовПриИзмененииДоговора, ПараметрыОткрытия, ТолькоПросмотр, ЭтоДокументРозничнойТорговли", 
		ДанныеДокумента, ВызовПриИзмененииДоговора, ПараметрыОткрытия, ТолькоПросмотрФормы, ЭтоДокументРозничнойТорговли);
	ОткрытьФорму("ОбщаяФорма.ФормаЦеныИВалюта", ПараметрыФормы, , , , , ОписаниеОповещения);
	
КонецПроцедуры

Процедура ПослеЗакрытияФормыЦеныИВалюта(Результат, Параметры, ЭтоДокументРозничнойТорговли = Ложь) Экспорт
	
	ФормаДокумента = Параметры.ФормаДокумента;
	
	Если Результат <> Неопределено Тогда
		
		ЗаполнитьЗначенияСвойств(ФормаДокумента.Объект, Результат.ЗначенияПриЗакрытии);
		ФормаДокумента.ЦеныИВалюта = ОбщегоНазначенияБККлиентСервер.СформироватьНадписьЦеныИВалюта(ФормаДокумента.Объект, ЭтоДокументРозничнойТорговли);
		ФормаДокумента.Модифицированность = Истина;
				                                   
		УправлениеВзаиморасчетамиКлиент.ИзменитьЦеныВалюту(ФормаДокумента.Объект, Параметры.СпособЗаполненияЦен, Результат,);
		
	ИначеЕсли Параметры.ВызовПриИзмененииДоговора Тогда
		
		УправлениеВзаиморасчетамиКлиент.ОбработатьОтказОтПересчетаДокументаПоДоговору(ФормаДокумента, Параметры.ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьИзмененияПоКнопкеЦеныВалюта(ДанныеОбъекта, СпособЗаполненияЦен, ИмяТабличнойЧасти = "Товары", СтруктураЗначений) Экспорт
                                                                 
	// если в табличной части есть хотя бы одна строка, надо пересчитывать
	НадоПересчитывать = Ложь;
	Если ДанныеОбъекта[ИмяТабличнойЧасти].Количество() > 0 Тогда
		НадоПересчитывать = Истина;
	КонецЕсли;
	
	Если НЕ НадоПересчитывать Тогда
		Возврат;
	КонецЕсли;

	СтруктураПоиска = Новый Структура; // Для поиска в результате запроса
	ПересчитатьЦенуПоФлагамНалогов = Ложь; // Инициализация переменной
	СтрокаПроверкиМетаданных = ДанныеОбъекта[ИмяТабличнойЧасти][0];

	ЕстьЦена               = СтрокаПроверкиМетаданных.Свойство("Цена");
	ЕстьСумма              = СтрокаПроверкиМетаданных.Свойство("Сумма");
	ЕстьЦенаПередачи       = СтрокаПроверкиМетаданных.Свойство("ЦенаПередачи");
	ЕстьСуммаПередачи      = СтрокаПроверкиМетаданных.Свойство("СуммаПередачи");
	ЕстьЦенаПоступления    = СтрокаПроверкиМетаданных.Свойство("ЦенаПоступления");
	ЕстьСуммаПоступления   = СтрокаПроверкиМетаданных.Свойство("СуммаПоступления");
	ЕстьЦенаСтарая         = СтрокаПроверкиМетаданных.Свойство("ЦенаСтарая");
	ЕстьСуммаСтарая        = СтрокаПроверкиМетаданных.Свойство("СуммаСтарая");
	ЕстьФактурнаяСтоимость = СтрокаПроверкиМетаданных.Свойство("ФактурнаяСтоимость");
	ЕстьОборотПоРеализации = СтрокаПроверкиМетаданных.Свойство("ОборотПоРеализации");
	ЕстьСтавкаНДС 		   = СтрокаПроверкиМетаданных.Свойство("СтавкаНДС");
	ЕстьСтавкаАкциз 	   = СтрокаПроверкиМетаданных.Свойство("СтавкаАкциз");
	ЕстьСуммаНДС		   = СтрокаПроверкиМетаданных.Свойство("СуммаНДС");
	ЕстьСуммаАкциз		   = СтрокаПроверкиМетаданных.Свойство("СуммаАкциза");
	
	СтруктураЗначенияПриОткрытии = СтруктураЗначений.ЗначенияПриОткрытии;
	СтруктураЗначенияПриЗакрытии = СтруктураЗначений.ЗначенияПриЗакрытии;

	// Если задано пользователем, то надо перезаполнить табличную часть по новому типу цен
	Если СтруктураЗначений.ПерезаполнитьЦеныПоТипуЦен И ЕстьЦена Тогда
		
		МассивНоменклатуры = Новый Массив;
		Для Каждого СтрокаНоменклатуры Из ДанныеОбъекта[ИмяТабличнойЧасти] Цикл
			МассивНоменклатуры.Добавить(СтрокаНоменклатуры.Номенклатура);	
		КонецЦикла;

		// Получить нужные цены запросом
		ТаблицаЦен = УправлениеЦенообразованиемВызовСервера.ПолучитьЦеныНоменклатуры(СтруктураЗначенияПриЗакрытии, 
														МассивНоменклатуры,
														ДанныеОбъекта.Дата, 
														?(ДанныеОбъекта.Свойство("Контрагент"),
														ДанныеОбъекта.Контрагент, Неопределено),
														ДанныеОбъекта.Организация);
														
		СтруктураПоиска = Новый Структура(); // стркутура для поиска в результате запроса

		// В цикле по ТЧ перезаполняем цены, приводя их к текущим скидкам, валюте и режиму налогообложения
		Для Каждого СтрокаТабличнойЧасти Из ДанныеОбъекта[ИмяТабличнойЧасти] Цикл

			// Если у нас способ заполнения цен "по розничным ценам", то перезаполнять по типу можно
			// только для услуг, для Товаров на розничном складе цена является измерением регистра остатков.
			Если СпособЗаполненияЦен = ПредопределенноеЗначение("Перечисление.СпособыЗаполненияЦен.ПоРозничнымЦенам") Тогда
				Продолжить;
			КонецЕсли; 

			СтруктураПоиска.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
			СтарыйКоэффициент = 0;
			
			
			ЗаполнитьЦенуВСтрокеТабличнойЧасти(ДанныеОбъекта,
											   СтрокаТабличнойЧасти,
											   СтруктураПоиска,
											   ТаблицаЦен,
											   СтруктураЗначений,
											   СпособЗаполненияЦен);

			Если СтруктураЗначений.ПересчитатьЦеныПоВалютеДокумента Тогда
				Если ЕстьЦенаПередачи Тогда
					СтрокаТабличнойЧасти.ЦенаПередачи = ОбщегоНазначенияБККлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.ЦенаПередачи,
														 СтруктураЗначенияПриОткрытии.ВалютаДокумента, 
														 СтруктураЗначенияПриЗакрытии.ВалютаДокумента,
														 СтруктураЗначенияПриОткрытии.КурсДокумента, 
														 СтруктураЗначенияПриЗакрытии.КурсДокумента,
														 СтруктураЗначенияПриОткрытии.КратностьДокумента, 
														 СтруктураЗначенияПриЗакрытии.КратностьДокумента);
					Если ЕстьСуммаПередачи Тогда
						СтрокаТабличнойЧасти.СуммаПередачи = СтрокаТабличнойЧасти.ЦенаПередачи * СтрокаТабличнойЧасти.Количество;
					КонецЕсли;
				КонецЕсли;
				Если ЕстьЦенаПоступления Тогда
					СтрокаТабличнойЧасти.ЦенаПоступления = ОбщегоНазначенияБККлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.ЦенаПоступления,
														 СтруктураЗначенияПриОткрытии.ВалютаДокумента, 
														 СтруктураЗначенияПриЗакрытии.ВалютаДокумента,
														 СтруктураЗначенияПриОткрытии.КурсДокумента, 
														 СтруктураЗначенияПриЗакрытии.КурсДокумента,
														 СтруктураЗначенияПриОткрытии.КратностьДокумента, 
														 СтруктураЗначенияПриЗакрытии.КратностьДокумента);
					Если ЕстьСуммаПоступления Тогда
						СтрокаТабличнойЧасти.СуммаПоступления = СтрокаТабличнойЧасти.ЦенаПоступления * СтрокаТабличнойЧасти.Количество;
					КонецЕсли;
				КонецЕсли;
				Если ЕстьЦенаСтарая Тогда
					СтрокаТабличнойЧасти.ЦенаСтарая = ОбщегоНазначенияБККлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.ЦенаСтарая,
														 СтруктураЗначенияПриОткрытии.ВалютаДокумента, 
														 СтруктураЗначенияПриЗакрытии.ВалютаДокумента,
														 СтруктураЗначенияПриОткрытии.КурсДокумента, 
														 СтруктураЗначенияПриЗакрытии.КурсДокумента,
														 СтруктураЗначенияПриОткрытии.КратностьДокумента, 
														 СтруктураЗначенияПриЗакрытии.КратностьДокумента);
					Если ЕстьСуммаСтарая Тогда
						СтрокаТабличнойЧасти.СуммаСтарая = СтрокаТабличнойЧасти.ЦенаСтарая * СтрокаТабличнойЧасти.Количество;
					КонецЕсли;
				ИначеЕсли ЕстьСуммаСтарая Тогда
					СтрокаТабличнойЧасти.СуммаСтарая = ОбщегоНазначенияБККлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.СуммаСтарая,
														 СтруктураЗначенияПриОткрытии.ВалютаДокумента, 
														 СтруктураЗначенияПриЗакрытии.ВалютаДокумента,
														 СтруктураЗначенияПриОткрытии.КурсДокумента, 
														 СтруктураЗначенияПриЗакрытии.КурсДокумента,
														 СтруктураЗначенияПриОткрытии.КратностьДокумента, 
														 СтруктураЗначенияПриЗакрытии.КратностьДокумента);
				КонецЕсли;
				Если ЕстьФактурнаяСтоимость Тогда
					СтрокаТабличнойЧасти.ЕстьФактурнаяСтоимость = ОбщегоНазначенияБККлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.ФактурнаяСтоимость,
																 СтруктураЗначенияПриОткрытии.ВалютаДокумента, 
																 СтруктураЗначенияПриЗакрытии.ВалютаДокумента,
																 СтруктураЗначенияПриОткрытии.КурсДокумента, 
																 СтруктураЗначенияПриЗакрытии.КурсДокумента,
																 СтруктураЗначенияПриОткрытии.КратностьДокумента, 
																 СтруктураЗначенияПриЗакрытии.КратностьДокумента);
				КонецЕсли;
			КонецЕсли; 

			// Выполним действия при изменении цены

			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
			УчетНДСИАкцизаКлиентСервер.РассчитатьОборотПоРеализацииТабЧасти(СтрокаТабличнойЧасти, ДанныеОбъекта);
			
			Если ЕстьСуммаНДС Тогда
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДанныеОбъекта);
			КонецЕсли;

		КонецЦикла; // Цикл по ТЧ для заполнения цен при изменении типа цен

	Иначе

		// Определим необходимость перерасчета цены
		ПересчитатьЦенуПоФлагамНалогов = ОпределитьНеобходимостьПерерасчетаЦены(СтруктураЗначенияПриОткрытии, СтруктураЗначенияПриЗакрытии);

		Если СтруктураЗначений.ПересчитатьЦеныПоВалютеДокумента ИЛИ ПересчитатьЦенуПоФлагамНалогов Тогда
			//Если документ отгрузки оформлен в валюте, а  в СФ меняется валюта документа на валюту регл.учета, при этом валюта взаиморасчетов не меняется
			//то рассчитываем цену от суммы, чтобы тенговые  суммы по обороту и НДС были одинаковые.
			//Виды документов: СФ и Регистрации прочих операций
			
			Если СтруктураЗначений.ПересчитатьЦеныПоВалютеДокумента И СтруктураЗначенияПриЗакрытии.ВалютаДокумента = ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета()				
				И СтруктураЗначенияПриЗакрытии.ВалютаДокумента <> СтруктураЗначенияПриЗакрытии.ВалютаВзаиморасчетов 
				И СтруктураЗначенияПриЗакрытии.СуммаВключаетНДС
				И ЕстьОборотПоРеализации Тогда
				
				Для Каждого СтрокаТабличнойЧасти Из ДанныеОбъекта[ИмяТабличнойЧасти] Цикл
					
					//1. Находим валютный оборот
					ОборотПоРеализацииВВалюте = СтрокаТабличнойЧасти.Сумма - СтрокаТабличнойЧасти.СуммаНДС;
																								 
					СтрокаТабличнойЧасти.ОборотПоРеализации = ОбщегоНазначенияБККлиентСервер.ПересчитатьИзВалютыВВалюту(ОборотПоРеализацииВВалюте,
																	 СтруктураЗначенияПриОткрытии.ВалютаДокумента, 
																	 СтруктураЗначенияПриЗакрытии.ВалютаДокумента,
																	 СтруктураЗначенияПриОткрытии.КурсДокумента, 
																	 СтруктураЗначенияПриЗакрытии.КурсДокумента,
																	 СтруктураЗначенияПриОткрытии.КратностьДокумента, 
																	 СтруктураЗначенияПриЗакрытии.КратностьДокумента);
							
					//2. Рассчитываем НДС (рассчитается от суммы оборота)												 
					Если ЕстьСуммаНДС Тогда
						 ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДанныеОбъекта);
					КонецЕсли;
					
					//3. Сумму находим расчетным путем: = Сумма + Сумма НДС
					СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.ОборотПоРеализации + СтрокаТабличнойЧасти.СуммаНДС; 
					
		
					//4.Находим цену				
					СтрокаТабличнойЧасти.Цена = Окр(СтрокаТабличнойЧасти.Сумма /?(СтрокаПроверкиМетаданных.Свойство("Количество"), СтрокаТабличнойЧасти.Количество, 1),2); 
				КонецЦикла;   			
							
			Иначе			
				   
				// В цикле по табличной части перезаполняем цены, приводя их к текущим скидкам, валюте и режиму налогообложения
				Для Каждого СтрокаТабличнойЧасти Из ДанныеОбъекта[ИмяТабличнойЧасти] Цикл
					
					//Получим Сумму акциза на единицу товаров, т.к. акциз может быть рассчитан по коэффициенту
					СуммаАкциза = 0;
					Если ЕстьСуммаАкциз Тогда
						Количество 	 = ?(СтрокаПроверкиМетаданных.Свойство("Количество"), СтрокаТабличнойЧасти.Количество, 0); 
						СуммаАкциза  = СтрокаТабличнойЧасти.СуммаАкциза/?(Количество = 0, 1, Количество); 
					КонецЕсли;	
					
					// В случае, если поменялась валюта
					Если СтруктураЗначений.ПересчитатьЦеныПоВалютеДокумента Тогда
						//пересчитываем Акциз, т.к. он всегда идет в ставках в валюте рег. учета
						Если ЕстьСуммаАкциз Тогда
							ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуАкцизаТабЧасти(СтрокаТабличнойЧасти, ДанныеОбъекта);
						КонецЕсли;
						
						Если ЕстьЦена Тогда
							СтрокаТабличнойЧасти.Цена = ОбщегоНазначенияБККлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.Цена,
																 СтруктураЗначенияПриОткрытии.ВалютаДокумента, 
																 СтруктураЗначенияПриЗакрытии.ВалютаДокумента,
																 СтруктураЗначенияПриОткрытии.КурсДокумента, 
																 СтруктураЗначенияПриЗакрытии.КурсДокумента,
																 СтруктураЗначенияПриОткрытии.КратностьДокумента, 
																 СтруктураЗначенияПриЗакрытии.КратностьДокумента);

							// Если надо пересчитать цены при изменении флагов налогообложения
							Если ПересчитатьЦенуПоФлагамНалогов
							   И (ЕстьСтавкаНДС ИЛИ ЕстьСтавкаАкциз)Тогда
								СтрокаТабличнойЧасти.Цена = ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(СтрокаТабличнойЧасти.Цена, 
																									 Неопределено,
																									 СтруктураЗначенияПриОткрытии.СуммаВключаетНДС,
																									 СтруктураЗначенияПриЗакрытии.УчитыватьНДС,
																									 СтруктураЗначенияПриЗакрытии.СуммаВключаетНДС, 
																									 УчетНДСиАкцизаВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС),
																									 СтруктураЗначенияПриОткрытии.СуммаВключаетАкциз,
																									 СтруктураЗначенияПриЗакрытии.УчитыватьАкциз,
																									 СтруктураЗначенияПриЗакрытии.СуммаВключаетАкциз,
																									 СуммаАкциза);
							КонецЕсли;
							
							//проверить на рекциз СтавкаАкциза
							
							ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
							УчетНДСИАкцизаКлиентСервер.РассчитатьОборотПоРеализацииТабЧасти(СтрокаТабличнойЧасти, ДанныеОбъекта);
							
							Если ЕстьСуммаНДС Тогда
								ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДанныеОбъекта);
							КонецЕсли;

						Иначе
							Если ЕстьСумма Тогда
								СтрокаТабличнойЧасти.Сумма = ОбщегоНазначенияБККлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.Сумма,
																	 СтруктураЗначенияПриОткрытии.ВалютаДокумента, 
																	 СтруктураЗначенияПриЗакрытии.ВалютаДокумента,
																	 СтруктураЗначенияПриОткрытии.КурсДокумента, 
																	 СтруктураЗначенияПриЗакрытии.КурсДокумента,
																	 СтруктураЗначенияПриОткрытии.КратностьДокумента, 
																	 СтруктураЗначенияПриЗакрытии.КратностьДокумента);
							КонецЕсли;

							УчетНДСИАкцизаКлиентСервер.РассчитатьОборотПоРеализацииТабЧасти(СтрокаТабличнойЧасти, ДанныеОбъекта);
							Если ЕстьСуммаНДС Тогда
								ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДанныеОбъекта);
							КонецЕсли;

						КонецЕсли;

						Если ЕстьЦенаПередачи Тогда
							СтрокаТабличнойЧасти.ЦенаПередачи = ОбщегоНазначенияБККлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.ЦенаПередачи,
																 СтруктураЗначенияПриОткрытии.ВалютаДокумента, 
																 СтруктураЗначенияПриЗакрытии.ВалютаДокумента,
																 СтруктураЗначенияПриОткрытии.КурсДокумента, 
																 СтруктураЗначенияПриЗакрытии.КурсДокумента,
																 СтруктураЗначенияПриОткрытии.КратностьДокумента, 
																 СтруктураЗначенияПриЗакрытии.КратностьДокумента);
							Если ЕстьСуммаПередачи Тогда
								СтрокаТабличнойЧасти.СуммаПередачи = СтрокаТабличнойЧасти.ЦенаПередачи * СтрокаТабличнойЧасти.Количество;
							КонецЕсли;
						КонецЕсли;

						Если ЕстьЦенаПоступления Тогда
							СтрокаТабличнойЧасти.ЦенаПоступления = ОбщегоНазначенияБККлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.ЦенаПоступления,
																 СтруктураЗначенияПриОткрытии.ВалютаДокумента, 
																 СтруктураЗначенияПриЗакрытии.ВалютаДокумента,
																 СтруктураЗначенияПриОткрытии.КурсДокумента, 
																 СтруктураЗначенияПриЗакрытии.КурсДокумента,
																 СтруктураЗначенияПриОткрытии.КратностьДокумента, 
																 СтруктураЗначенияПриЗакрытии.КратностьДокумента);
							Если ЕстьСуммаПоступления Тогда
								СтрокаТабличнойЧасти.СуммаПоступления = СтрокаТабличнойЧасти.ЦенаПоступления * СтрокаТабличнойЧасти.Количество;
							КонецЕсли;
						КонецЕсли;

						Если ЕстьЦенаСтарая Тогда
							СтрокаТабличнойЧасти.ЦенаСтарая = ОбщегоНазначенияБККлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.ЦенаСтарая,
																 СтруктураЗначенияПриОткрытии.ВалютаДокумента, 
																 СтруктураЗначенияПриЗакрытии.ВалютаДокумента,
																 СтруктураЗначенияПриОткрытии.КурсДокумента, 
																 СтруктураЗначенияПриЗакрытии.КурсДокумента,
																 СтруктураЗначенияПриОткрытии.КратностьДокумента, 
																 СтруктураЗначенияПриЗакрытии.КратностьДокумента);
							Если ЕстьСуммаСтарая Тогда
								СтрокаТабличнойЧасти.СуммаСтарая = СтрокаТабличнойЧасти.ЦенаСтарая * СтрокаТабличнойЧасти.Количество;
							КонецЕсли;
						ИначеЕсли ЕстьСуммаСтарая Тогда
							СтрокаТабличнойЧасти.СуммаСтарая = ОбщегоНазначенияБККлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.СуммаСтарая,
																 СтруктураЗначенияПриОткрытии.ВалютаДокумента, 
																 СтруктураЗначенияПриЗакрытии.ВалютаДокумента,
																 СтруктураЗначенияПриОткрытии.КурсДокумента, 
																 СтруктураЗначенияПриЗакрытии.КурсДокумента,
																 СтруктураЗначенияПриОткрытии.КратностьДокумента, 
																 СтруктураЗначенияПриЗакрытии.КратностьДокумента);
						КонецЕсли;

						Если ЕстьФактурнаяСтоимость Тогда
							СтрокаТабличнойЧасти.ФактурнаяСтоимость = ОбщегоНазначенияБККлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.ФактурнаяСтоимость,
																		 СтруктураЗначенияПриОткрытии.ВалютаДокумента, 
																		 СтруктураЗначенияПриЗакрытии.ВалютаДокумента,
																		 СтруктураЗначенияПриОткрытии.КурсДокумента, 
																		 СтруктураЗначенияПриЗакрытии.КурсДокумента,
																		 СтруктураЗначенияПриОткрытии.КратностьДокумента, 
																		 СтруктураЗначенияПриЗакрытии.КратностьДокумента);
						КонецЕсли;

					Иначе
						Если ЕстьЦена Тогда

							// Если надо пересчитать цены при изменении флагов налогообложения
							Если ПересчитатьЦенуПоФлагамНалогов
							   И (ЕстьСтавкаНДС ИЛИ ЕстьСтавкаАкциз)Тогда
								СтрокаТабличнойЧасти.Цена = ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(СтрокаТабличнойЧасти.Цена, 
																									 Неопределено,
																									 СтруктураЗначенияПриОткрытии.СуммаВключаетНДС,
																									 СтруктураЗначенияПриЗакрытии.УчитыватьНДС,
																									 СтруктураЗначенияПриЗакрытии.СуммаВключаетНДС, 
																									 УчетНДСиАкцизаВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС),
																									 СтруктураЗначенияПриОткрытии.СуммаВключаетАкциз,
																									 СтруктураЗначенияПриЗакрытии.УчитыватьАкциз,
																									 СтруктураЗначенияПриЗакрытии.СуммаВключаетАкциз,
																									 СуммаАкциза);
							КонецЕсли;

							ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
							УчетНДСИАкцизаКлиентСервер.РассчитатьОборотПоРеализацииТабЧасти(СтрокаТабличнойЧасти, ДанныеОбъекта);
							Если ЕстьСуммаАкциз Тогда
								ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуАкцизаТабЧасти(СтрокаТабличнойЧасти, ДанныеОбъекта);
							КонецЕсли;
							Если ЕстьСуммаНДС Тогда
								ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДанныеОбъекта);
							КонецЕсли;
							
						// Если нет колонки "Цена", но есть колонка "Сумма", пересчитывается непосредственно сумма	
						ИначеЕсли ЕстьСумма Тогда

							// Если надо пересчитать цены при изменении флагов налогообложения
							Если ПересчитатьЦенуПоФлагамНалогов
							   И (ЕстьСтавкаНДС ИЛИ ЕстьСтавкаАкциз)Тогда
								СтрокаТабличнойЧасти.Сумма = ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(СтрокаТабличнойЧасти.Сумма, 
																									 Неопределено,
																									 СтруктураЗначенияПриОткрытии.СуммаВключаетНДС,
																									 СтруктураЗначенияПриЗакрытии.УчитыватьНДС,
																									 СтруктураЗначенияПриЗакрытии.СуммаВключаетНДС, 
																									 УчетНДСиАкцизаВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС),
																									 СтруктураЗначенияПриОткрытии.СуммаВключаетАкциз,
																									 СтруктураЗначенияПриЗакрытии.УчитыватьАкциз,
																									 СтруктураЗначенияПриЗакрытии.СуммаВключаетАкциз,
																									 СуммаАкциза);
							КонецЕсли;

							Если ЕстьСуммаНДС Тогда
								ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДанныеОбъекта);
							КонецЕсли;

						КонецЕсли;

					КонецЕсли;

				КонецЦикла;

			КонецЕсли;
			
		КонецЕсли;

	КонецЕсли;
	
	Если ЕстьОборотПоРеализации И (СтруктураЗначенияПриОткрытии.КурсДокумента <> СтруктураЗначенияПриЗакрытии.КурсДокумента ИЛИ СтруктураЗначенияПриОткрытии.КратностьДокумента <> СтруктураЗначенияПриЗакрытии.КратностьДокумента) Тогда
	   // Оборот по реализации указывается в тенге, при изменении курса или кратности документа необходимо пересчитать сумму оборота по реализации
	   Для Каждого СтрокаТабличнойЧасти Из ДанныеОбъекта[ИмяТабличнойЧасти] Цикл
		   УчетНДСИАкцизаКлиентСервер.РассчитатьОборотПоРеализацииТабЧасти(СтрокаТабличнойЧасти, ДанныеОбъекта);				
		   Если ЕстьСуммаНДС Тогда
			   ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДанныеОбъекта);
		   КонецЕсли;			   
	   КонецЦикла;
	КонецЕсли;	

КонецПроцедуры

Процедура ПослеЗакрытияВопросаДоговорКонтрагентаПриИзменении(ДанныеОбъекта, Параметры) Экспорт
	
	// Если в форме "Цены и валюта" была нажата кнопка отмена то проверим реквизиты
	// КурсВзаиморасчетов и КратностьВзаиморасчетов на заполнение
	Если Параметры.ЕстьКурсВзаиморасчетов ИЛИ Параметры.ЕстьКратностьВзаиморасчетов Тогда

		Если Параметры.ЕстьКурсВзаиморасчетов И НЕ ЗначениеЗаполнено(ДанныеОбъекта.КурсВзаиморасчетов) Тогда
			ДанныеОбъекта.КурсВзаиморасчетов      = Параметры.СтруктураКурсаВзаиморасчетов.Курс;
		КонецЕсли;
		Если Параметры.ЕстьКратностьВзаиморасчетов И НЕ ЗначениеЗаполнено(ДанныеОбъекта.КратностьВзаиморасчетов) Тогда
			ДанныеОбъекта.КратностьВзаиморасчетов = Параметры.СтруктураКурсаВзаиморасчетов.Кратность;
		КонецЕсли;

	КонецЕсли;
		
КонецПроцедуры

// Определяет необходимость пересчета табличной части документа при изменении флагов налогообложения 
// в форме "Цены и валюты".
//
Функция ОпределитьНеобходимостьПерерасчетаЦены(СтруктураЗначенийПриОткрытии, СтруктураЗначенийПриЗакрытии) Экспорт

	Возврат (СтруктураЗначенийПриЗакрытии.УчитыватьНДС     <> СтруктураЗначенийПриОткрытии.УчитыватьНДС) ИЛИ
	        (СтруктураЗначенийПриЗакрытии.СуммаВключаетНДС <> СтруктураЗначенийПриОткрытии.СуммаВключаетНДС) ИЛИ
			(СтруктураЗначенийПриЗакрытии.УчитыватьАкциз   <> СтруктураЗначенийПриОткрытии.УчитыватьАкциз) ИЛИ
			(СтруктураЗначенийПриЗакрытии.СуммаВключаетАкциз <> СтруктураЗначенийПриОткрытии.СуммаВключаетАкциз);

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция ДанныеДокументаДляФормыЦеныИВалюта(ФормаДокумента, ПараметрыОткрытия)
	
	ДанныеДокумента = Новый Структура();
	
	ДанныеДокумента.Вставить("Дата", ФормаДокумента.Объект.Дата);
	
	Если ФормаДокумента.Объект.Свойство("ТипЦен") Тогда
		ДанныеДокумента.Вставить("ТипЦен", ФормаДокумента.Объект.ТипЦен);
	КонецЕсли;
	
	Если ТипЗнч(ПараметрыОткрытия) = Тип("Структура") и ПараметрыОткрытия.Свойство("ВалютаДокумента") Тогда
		ДанныеДокумента.Вставить("ВалютаДокумента", ПараметрыОткрытия.ВалютаДокумента);
	ИначеЕсли ФормаДокумента.Объект.Свойство("ВалютаДокумента") Тогда
		ДанныеДокумента.Вставить("ВалютаДокумента", ФормаДокумента.Объект.ВалютаДокумента);
	КонецЕсли;
	
	Если ТипЗнч(ПараметрыОткрытия) = Тип("Структура") и ПараметрыОткрытия.Свойство("КурсДокумента") Тогда
		ДанныеДокумента.Вставить("КурсДокумента", ПараметрыОткрытия.КурсДокумента);
	ИначеЕсли ФормаДокумента.Объект.Свойство("КурсДокумента") Тогда
		ДанныеДокумента.Вставить("КурсДокумента", ФормаДокумента.Объект.КурсДокумента);
	КонецЕсли;
	
	Если ТипЗнч(ПараметрыОткрытия) = Тип("Структура") и ПараметрыОткрытия.Свойство("КратностьДокумента") Тогда
		ДанныеДокумента.Вставить("КратностьДокумента", ПараметрыОткрытия.КратностьДокумента);
	ИначеЕсли ФормаДокумента.Объект.Свойство("КратностьДокумента") Тогда
		ДанныеДокумента.Вставить("КратностьДокумента", ФормаДокумента.Объект.КратностьДокумента);
	КонецЕсли;
	
	Если ФормаДокумента.Объект.Свойство("ДоговорКонтрагента") Тогда
		ДанныеДокумента.Вставить("ДоговорКонтрагента", ФормаДокумента.Объект.ДоговорКонтрагента);
	КонецЕсли;
	
	Если ФормаДокумента.Объект.Свойство("ВалютаВзаиморасчетов") Тогда
		ДанныеДокумента.Вставить("ВалютаВзаиморасчетов", ФормаДокумента.Объект.ВалютаВзаиморасчетов);
	КонецЕсли;
	
	Если ФормаДокумента.Объект.Свойство("КурсВзаиморасчетов") Тогда
		ДанныеДокумента.Вставить("КурсВзаиморасчетов", ФормаДокумента.Объект.КурсВзаиморасчетов);
	КонецЕсли;
	
	Если ФормаДокумента.Объект.Свойство("КратностьВзаиморасчетов") Тогда
		ДанныеДокумента.Вставить("КратностьВзаиморасчетов", ФормаДокумента.Объект.КратностьВзаиморасчетов);
	КонецЕсли;
	
	Если ФормаДокумента.Объект.Свойство("УчитыватьНДС") Тогда
		ДанныеДокумента.Вставить("УчитыватьНДС", ФормаДокумента.Объект.УчитыватьНДС);
	КонецЕсли;
	
	Если ФормаДокумента.Объект.Свойство("СуммаВключаетНДС") Тогда
		ДанныеДокумента.Вставить("СуммаВключаетНДС", ФормаДокумента.Объект.СуммаВключаетНДС);
	КонецЕсли;
	
	Если ФормаДокумента.Объект.Свойство("УчитыватьАкциз") Тогда
		ДанныеДокумента.Вставить("УчитыватьАкциз", ФормаДокумента.Объект.УчитыватьАкциз);
	КонецЕсли;
	
	Если ФормаДокумента.Объект.Свойство("СуммаВключаетАкциз") Тогда
		ДанныеДокумента.Вставить("СуммаВключаетАкциз", ФормаДокумента.Объект.СуммаВключаетАкциз);
	КонецЕсли;
	
	Если ФормаДокумента.Объект.Свойство("НДСВключенВСтоимость") Тогда
		ДанныеДокумента.Вставить("НДСВключенВСтоимость", ФормаДокумента.Объект.НДСВключенВСтоимость);
	КонецЕсли;
	
	Если ФормаДокумента.Объект.Свойство("ОтложитьПринятиеНДСКЗачету") Тогда
		ДанныеДокумента.Вставить("ОтложитьПринятиеНДСКЗачету", ФормаДокумента.Объект.ОтложитьПринятиеНДСКЗачету);
	КонецЕсли;
	
	Если ФормаДокумента.Объект.Свойство("ОтложитьНачислениеНДС") Тогда
		ДанныеДокумента.Вставить("ОтложитьНачислениеНДС", ФормаДокумента.Объект.ОтложитьНачислениеНДС);
	КонецЕсли;
	
	Возврат ДанныеДокумента;
	
КонецФункции

Процедура ДополнитьПараметрыОткрытияФормыЦеныИВалюта(ФормаДокумента, ПараметрыОткрытия)
	
	Если ПараметрыОткрытия = Неопределено Тогда 
		ПараметрыОткрытия = Новый Структура;
	КонецЕсли;
	
	Если НЕ ПараметрыОткрытия.Свойство("БезКонтроляВалютыВзаиморасчетов") Тогда
		ПараметрыОткрытия.Вставить("БезКонтроляВалютыВзаиморасчетов", Ложь);
	КонецЕсли;
	
	Если НЕ ПараметрыОткрытия.Свойство("НедоступныеРеквизиты") Тогда
		ПараметрыОткрытия.Вставить("НедоступныеРеквизиты", Новый Структура);
	КонецЕсли;
	
	// попытаемся определить заполненность хотя бы одной табличной части, если не передан соответствующий параметр открытия формы
	Если НЕ ПараметрыОткрытия.Свойство("ЕстьЗаполненныеТабличныеЧасти") Тогда
		МассивИменТабличныхЧастей = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
									"Товары,Услуги,ОС,НМА,ВыданныеАвансы,ОплатаПоставщикам,ВыплатаЗаработнойПлаты,ОплатаПоИсполнительнымЛистам,
									|ПеречислениеПенсионныхВзносов,ПеречислениеСоциальныхОтчислений,Прочее,Разделы,Продукция",
									,
									,
									Истина);
									
		// для установки значения "Истина" необходимо найти хотя бы 1 заполненную табличную часть. после чего можно прервать цикл
		ЕстьЗаполненныеТабличныеЧасти = Ложь;
		Для Каждого ИмяТабличнойЧасти Из МассивИменТабличныхЧастей Цикл
			Если ФормаДокумента.Объект.Свойство(ИмяТабличнойЧасти)
				И ФормаДокумента.Объект[ИмяТабличнойЧасти].Количество() > 0 Тогда
				ЕстьЗаполненныеТабличныеЧасти = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если НЕ ЕстьЗаполненныеТабличныеЧасти Тогда 
			ЕстьЗаполненныеТабличныеЧасти = ФормаДокумента.Объект.Свойство("Сумма");
		КонецЕсли;
		
		ПараметрыОткрытия.Вставить("ЕстьЗаполненныеТабличныеЧасти", ЕстьЗаполненныеТабличныеЧасти);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет цену в строке ТЧ документа по реквизитам документа и текущим ценам в регистре сведений.
//
// Параметры: 
//  СтрокаТабличнойЧасти         - строка табличной части редактируемого документа, 
//  СтруктураПоиска            - структра, содержит значение Номенклатуры для поиска в результате запроса, 
//  ВыборкаИзРезультатаЗапроса - результат запроса по текущим ценам, 
//  СтруктураЗначений          - структура, соответствующая возвращаемой формой "Цены и валюта" (значения реквизитов 
//						         документа до и после их изменеия в общей форме),
//  СпособЗаполненияЦен        - значение перечисления "Способы заполнения цен", влияет на расчет цен
//						         (см. описание в ПересчитатьЦенуПриИзмененииФлаговНалогов)
//
Процедура ЗаполнитьЦенуВСтрокеТабличнойЧасти(ДанныеОбъекта, СтрокаТабличнойЧасти, СтруктураПоиска, ТаблицаЦен, 
												СтруктураЗначений, СпособЗаполненияЦен) Экспорт

	Перем НДСВСтроке;

	Если СтрокаТабличнойЧасти.Свойство("Цена") = Неопределено Тогда
		Возврат;
	КонецЕсли;

	СтруктураЗначенийПриЗакрытии = СтруктураЗначений.ЗначенияПриЗакрытии;
	
	// Найдем товар из текущей строки документа в выборке из результата запроса.
	Если НЕ ЗначениеЗаполнено(СтруктураПоиска.Номенклатура) Тогда
		Возврат; // Искать нечего.
	КонецЕсли; 

	РезультатПоиска = ТаблицаЦен.Получить(СтруктураПоиска.Номенклатура);
	Если НЕ (РезультатПоиска = Неопределено) Тогда // Нашли запись

		// Если для данного товара есть цена данного типа
		// Единицу устанавливаем в единицу цены, если она не задана, то в основную единицу товара
		Если НЕ ЗначениеЗаполнено(РезультатПоиска.Цена) Тогда
			СтрокаТабличнойЧасти.Цена = 0;
		Иначе

			СтрокаТабличнойЧасти.Цена = РезультатПоиска.Цена;

			// Пересчитываем цену в ваюту документа
			Если СтруктураЗначенийПриЗакрытии.ВалютаДокумента <> РезультатПоиска.ВалютаЦены Тогда
				СтрокаТабличнойЧасти.Цена = ОбщегоНазначенияБККлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.Цена, 
																		РезультатПоиска.ВалютаЦены, 
																		СтруктураЗначенийПриЗакрытии.ВалютаДокумента, 
																		РезультатПоиска.КурсВалютыЦены,
																		СтруктураЗначенийПриЗакрытии.КурсДокумента, 
																		РезультатПоиска.КратностьВалютыЦены,
																		СтруктураЗначенийПриЗакрытии.КратностьДокумента);
			КонецЕсли;

			// Пересчитываем цену по параметрам налогообложения.
			// Ставку определяем исходя из переданных параметров
			СтруктураЗначений.Свойство("ЕстьСтавкаНДСВТабличнойЧасти", НДСВСтроке);

			СтрокаТабличнойЧасти.Цена = ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(СтрокаТабличнойЧасти.Цена, 
										СпособЗаполненияЦен, РезультатПоиска.ЦенаВключаетНДС, 
										СтруктураЗначенийПриЗакрытии.УчитыватьНДС, СтруктураЗначенийПриЗакрытии.СуммаВключаетНДС, 
										?(СтруктураЗначенийПриЗакрытии.УчитыватьНДС, ?(НДСВСтроке = Истина, УчетНДСиАкцизаВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС), УчетНДСиАкцизаВызовСервераПовтИсп.ПолучитьСтавкуНДС(РезультатПоиска.СтавкаНДС)),0));

		КонецЕсли;

	Иначе // информации по этому товару нет в запросе 

		ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Для номенклатуры %1 не найдена цена! Пересчет невозможен.'"), СокрЛП(СтрокаТабличнойЧасти.Номенклатура));
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстПредупреждения);
		
		СтрокаТабличнойЧасти.Цена = 0;

	КонецЕсли;

КонецПроцедуры
