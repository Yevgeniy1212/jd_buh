
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Перем ПодчиненныеСчетаФактуры; // таблица счетов-фактур, основанием которых является этот документ

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

#Область УправлениеДоступом

// Процедура ЗаполнитьНаборыЗначенийДоступа по свойствам объекта заполняет наборы значений доступа
// в таблице с полями:
//    НомерНабора     - Число                                     (необязательно, если набор один),
//    ВидДоступа      - ПланВидовХарактеристикСсылка.ВидыДоступа, (обязательно),
//    ЗначениеДоступа - Неопределено, СправочникСсылка или др.    (обязательно),
//    Чтение          - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Добавление      - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Изменение       - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Удаление        - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//
//  Вызывается из процедуры УправлениеДоступомСлужебный.ЗаписатьНаборыЗначенийДоступа(),
// если объект зарегистрирован в "ПодпискаНаСобытие.ЗаписатьНаборыЗначенийДоступа" и
// из таких же процедур объектов, у которых наборы значений доступа зависят от наборов этого
// объекта (в этом случае объект зарегистрирован в "ПодпискаНаСобытие.ЗаписатьЗависимыеНаборыЗначенийДоступа").
//
// Параметры:
//  Таблица      - ТабличнаяЧасть,
//                 РегистрСведенийНаборЗаписей.НаборыЗначенийДоступа,
//                 ТаблицаЗначений, возвращаемая УправлениеДоступом.ТаблицаНаборыЗначенийДоступа().
//
Процедура ЗаполнитьНаборыЗначенийДоступа(Таблица) Экспорт
	
	СписокФизЛиц = Новый Массив();
	СписокФизЛиц.Добавить(ФизЛицо);
	
	РасчетЗарплатыСервер.ЗаполнитьНаборыПоОрганизацииСтрутурномуПодразделениюСпискуФизЛиц(ЭтотОбъект, Таблица, "Организация", "СтруктурноеПодразделение",СписокФизЛиц);
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
    
    РаботаСДоговорамиКонтрагентов.ЗаполнитьДоговорВТабличнойЧастиПередЗаписью(ОплатаПоставщикам, ЭтотОбъект);
    
	ВсегоТовары    = Товары.Итог("Сумма");
	ВсегоТоварыНДС = Товары.Итог("СуммаНДС");

	Если УчитыватьНДС И НЕ СуммаВключаетНДС Тогда
		ВсегоТовары = ВсегоТовары + ВсегоТоварыНДС;
	КонецЕсли;
		
	СуммаДокумента = ОбщегоНазначенияБКВызовСервера.ФорматСумм(ВсегоТовары 
										  + ОплатаПоставщикам.Итог("Сумма")
	                                      + ОплатаПоИсполнительнымЛистам.Итог("СуммаПлатежа") 
	                                      + ВыплатаЗаработнойПлаты.Итог("СуммаКВыплате")
										  + ПеречислениеПенсионныхВзносов.Итог("Сумма")
										  + ПеречислениеСоциальныхОтчислений.Итог("Сумма")
	                                      + Прочее.Итог("Сумма") + ?(УчитыватьНДС И НЕ СуммаВключаетНДС, Прочее.Итог("СуммаНДС"),0));
	
	Если НЕ УчитыватьКПН Тогда
		ВидУчетаНУ = Справочники.ВидыУчетаНУ.ПустаяСсылка();
	КонецЕсли;
	
	СчетаУчетаВДокументах.ЗаполнитьПередЗаписью(ЭтотОбъект, РежимЗаписи);
	
	// Синхронизация счетов-фактур
	СформироватьСчетаФактуры(Отказ);
	
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// Синхронизация счетов-фактур
	Если ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Запись
		И НЕ ЭтоНовый() Тогда
		ОбновитьСчетаФактуры(ДополнительныеСвойства.РежимЗаписи);
	КонецЕсли;
		
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
		
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
		
	Если ДанныеЗаполнения <> Неопределено И ТипДанныхЗаполнения <> Тип("Структура") 
		И Метаданные().ВводитсяНаОсновании.Содержит(ДанныеЗаполнения.Метаданные()) Тогда
		Документы.АвансовыйОтчет.ЗаполнитьПоДокументуОснованию(ЭтотОбъект, ДанныеЗаполнения);
		Возврат;
	ИначеЕсли ТипДанныхЗаполнения = Тип("Структура") Тогда 
		
		Если ДанныеЗаполнения.Свойство("Автор") Тогда
			ДанныеЗаполнения.Удалить("Автор");
		КонецЕсли;

		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
	КонецЕсли;
	
	ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
		
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	ПользовательУправляетСчетамиУчета = СчетаУчетаВДокументахВызовСервераПовтИсп.ПользовательУправляетСчетамиУчета();
	
	ЕстьЗаполненныеТабЧасти = Ложь;
	ПараметрыПострочнойПроверки   = Новый Структура("ПроверятьЗаполнениеСчетаУчетаНДС, ПроверятьЗаполнениеСчетаУчетаНУ, ПроверятьЗаполнениеСуммыНДСДляСуточных, ПроверятьПризнакЗабалансовыйСчетаУчетаТМЗ", 
													УчитыватьНДС И НЕ НДСВключенВСтоимость И ПользовательУправляетСчетамиУчета, Товары.Количество() > 0 И ПользовательУправляетСчетамиУчета,
													Прочее.Количество() > 0, Товары.Количество() > 0 И ПользовательУправляетСчетамиУчета);
    
	Для Каждого ТекСтрока Из Метаданные().ТабличныеЧасти Цикл
		Если ЭтотОбъект[ТекСтрока.Имя].Количество() > 0 Тогда
			ЕстьЗаполненныеТабЧасти = Истина;
			Прервать;
		КонецЕсли; 
	КонецЦикла; 
	
	МассивНепроверяемыхРеквизитов = Новый Массив();
	
	Если ЕстьЗаполненныеТабЧасти Тогда
		Для Каждого ТекСтрока Из Метаданные().ТабличныеЧасти Цикл
			МассивНепроверяемыхРеквизитов.Добавить(ТекСтрока.Имя);
		КонецЦикла;
	КонецЕсли; 
	
	Если Товары.Количество() = 0 Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Склад");
	КонецЕсли; 
	
	ОрганизацияПлательщикНалогаНаПрибыль = УчетнаяПолитикаСервер.ПлательщикНалогаНаПрибыль(Организация, Дата);
	НеобходимостьОтраженияВНУ            = ОрганизацияПлательщикНалогаНаПрибыль И УчитыватьКПН И (ПроцедурыНалоговогоУчета.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль(Организация, Дата) ИЛИ (ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ));
	Если НЕ НеобходимостьОтраженияВНУ И НЕ УчитыватьНДС Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Товары.Поставщик");
		МассивНепроверяемыхРеквизитов.Добавить("Прочее.Поставщик");
	КонецЕсли;
	
	Если НЕ НеобходимостьОтраженияВНУ Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Прочее.СчетЗатратНУ");
		
		ПараметрыПострочнойПроверки.Вставить("ПроверятьЗаполнениеСчетаУчетаНУ", Ложь);
	КонецЕсли; 
		
	Если НЕ ПолучитьФункциональнуюОпцию("ПлательщикКПН", Новый Структура("Организация, Период", Организация, Дата)) ИЛИ НЕ УчитыватьКПН  Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ВидУчетаНУ");
		МассивНепроверяемыхРеквизитов.Добавить("Прочее.СчетЗатратНУ");	
		МассивНепроверяемыхРеквизитов.Добавить("Товары.СчетУчетаНУ");	
	КонецЕсли;
	
	Если Товары.Количество() = 0
		И ОплатаПоставщикам.Количество() = 0  
		И Прочее.Количество() = 0 Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("КратностьДокумента");
		МассивНепроверяемыхРеквизитов.Добавить("КурсДокумента");
		
	КонецЕсли;
	
	Если НЕ ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНДС(Организация, Дата)
		ИЛИ НЕ УчитыватьНДС ИЛИ ОтложитьПринятиеНДСКЗачету  Тогда				
		
		ПараметрыПострочнойПроверки.Вставить("ПроверятьЗаполнениеСчетаУчетаНДС", Ложь);
		
		МассивНепроверяемыхРеквизитов.Добавить("Товары.СтавкаНДС");
		МассивНепроверяемыхРеквизитов.Добавить("Товары.НДСВидОборота");
		МассивНепроверяемыхРеквизитов.Добавить("Товары.НДСВидПоступления");
		
		МассивНепроверяемыхРеквизитов.Добавить("Прочее.СтавкаНДС");
		МассивНепроверяемыхРеквизитов.Добавить("Прочее.НДСВидОборота");
		МассивНепроверяемыхРеквизитов.Добавить("Прочее.НДСВидПоступления");		
		
    КонецЕсли;
    
    Если НЕ ПолучитьФункциональнуюОпцию("ВестиУчетПоДоговорам") Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ОплатаПоставщикам.ДоговорКонтрагента");
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
	НеобходимаПострочнаяПроверка = Ложь;
	Для Каждого КлючЗначение Из ПараметрыПострочнойПроверки Цикл
		Если КлючЗначение.Значение Тогда 
			НеобходимаПострочнаяПроверка = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если НеобходимаПострочнаяПроверка Тогда 
		Если Товары.Количество() > 0 Тогда
			ПроверитьЗаполнениеТабличнойЧастиПострочно(Товары, "Товары", Отказ, ПараметрыПострочнойПроверки);
		КонецЕсли;
		Если Прочее.Количество() > 0 Тогда
			ПроверитьЗаполнениеТабличнойЧастиПострочно(Прочее, "Прочее", Отказ, ПараметрыПострочнойПроверки);
		КонецЕсли;
	КонецЕсли;
	
	Если ОплатаПоставщикам.Количество() > 0 Тогда 
		ВыполнитьПроверкиСвязанныеСТабличнойЧастьюОплатаПоставщикам(Отказ, ПроверяемыеРеквизиты);
	КонецЕсли;
	
	Если ПеречислениеПенсионныхВзносов.Количество() > 0 Тогда 
		ВыполнитьПроверкиСвязанныеСТабличнойЧастьюПеречислениеПенсионныхВзносов(Отказ, ПроверяемыеРеквизиты);
	КонецЕсли;
	
	Если ПеречислениеСоциальныхОтчислений.Количество() > 0 Тогда 
		ВыполнитьПроверкиСвязанныеСТабличнойЧастьюПеречислениеСоциальныхОтчислений(Отказ, ПроверяемыеРеквизиты);
	КонецЕсли;
	
	СчетаУчетаВДокументах.ПроверитьЗаполнение(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты, Новый Соответствие);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА
	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
	Если РучнаяКорректировка Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПроведения = Документы.АвансовыйОтчет.ПодготовитьПараметрыПроведения(Ссылка, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ИНФОРМАЦИОННОЙ БАЗЫ (АНАЛИЗ ОСТАТКОВ И Т.П.)
	
	ТаблицаВзаиморасчетов     = УправлениеВзаиморасчетамиСервер.ПодготовитьТаблицуВзаиморасчетовПогашениеЗадолженности(
		ПараметрыПроведения.ПогашениеЗадолженностиТаблица, ПараметрыПроведения.ПогашениеЗадолженностиРеквизиты, Отказ);
		
	// ФОРМИРОВАНИЕ ДВИЖЕНИЙ
	
	//Оплата поставщикам	
	УправлениеВзаиморасчетамиСервер.СформироватьДвиженияПогашениеЗадолженности(ТаблицаВзаиморасчетов,
		ПараметрыПроведения.ПогашениеЗадолженностиРеквизиты, Движения, Отказ, Ложь);

	// Поступление товаров
	УчетТоваров.СформироватьДвиженияАвансовыйОтчетТовары(ПараметрыПроведения.ТаблицаТовары,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
		
	// Товары организаций
	НомераГТДСервер.СформироватьДвиженияТоварыОрганизаций(ПараметрыПроведения.ТаблицаТоварыОрганизаций,ПараметрыПроведения.Реквизиты, Движения, Отказ);

	// Поступление услуг
	УчетДоходовРасходов.СформироватьДвиженияАвансовыйОтчетПрочее(ПараметрыПроведения.ТаблицаПрочее,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
		
	// Учет НДС
	УчетНДСИАкциза.СформироватьДвиженияПоступлениеТоваров(ПараметрыПроведения.ТаблицаНДС, Неопределено,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
		
	// Переоценка валютных остатков - после формирования проводок всеми другими механизмами
	ТаблицаПереоценкаДвиженийДокумента = УчетДоходовРасходов.ПодготовитьТаблицуПереоценкаВалютныхОстатковПоПроводкамДокумента(
		ПараметрыПроведения.Реквизиты, Движения, Отказ);

	УчетДоходовРасходов.СформироватьДвиженияПереоценкаВалютныхОстатков(ТаблицаПереоценкаДвиженийДокумента,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
		
	// ЗП
	РасчетЗарплатыСервер.СформироватьДвиженияПеречислениеЗП(ПараметрыПроведения.Реквизиты, ПараметрыПроведения.ТаблицаПеречислениеЗП, Движения, Перечисления.СпособыВыплатыЗарплаты.ЧерезКассу, Отказ);
	
	// ОПВ и ОППВ и ОПВР
	РасчетЗарплатыСервер.СформироватьДвиженияПеречислениеОПВ(ПараметрыПроведения.Реквизиты, ПараметрыПроведения.ТаблицаПеречислениеОПВ, Движения, Отказ);
	
	// СО, ВОСМС, ООСМС
	РасчетЗарплатыСервер.СформироватьДвиженияПеречислениеСО(ПараметрыПроведения.Реквизиты, ПараметрыПроведения.ТаблицаПеречислениеСО, Движения, Отказ);
	
	// ИЛ
	РасчетЗарплатыСервер.СформироватьДвиженияПеречислениеПоИЛ(ПараметрыПроведения.Реквизиты, ПараметрыПроведения.ТаблицаПеречислениеПоИЛ, Движения, Отказ);

	// Отражение ПР в НУ 
	ПроцедурыНалоговогоУчета.ОтразитьПостоянныеРазницыВНУ(ПараметрыПроведения.Реквизиты, Движения, Отказ);

	// Синхронизация счетов-фактур
	ОбновитьСчетаФактуры(РежимЗаписиДокумента.Проведение);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Синхронизация счетов-фактур
	ОбновитьСчетаФактуры(РежимЗаписиДокумента.ОтменаПроведения);
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	Дата = НачалоДня(ОбщегоНазначения.ТекущаяДатаПользователя());

	ОбрабатываемыеТабличныеЧасти = Новый Массив;
	ОбрабатываемыеТабличныеЧасти.Добавить(Товары);
	ОбрабатываемыеТабличныеЧасти.Добавить(Прочее);
	
	Для каждого ТабличнаяЧасть Из ОбрабатываемыеТабличныеЧасти Цикл
		Для Каждого СтрокаТЧ Из ТабличнаяЧасть Цикл
			СтрокаТЧ.ПредъявленСФ	= Ложь;
			СтрокаТЧ.ДатаСФ 		= '00010101';
			СтрокаТЧ.НомерСФ 		= "";
			СтрокаТЧ.СчетФактура	= Документы.СчетФактураПолученный.ПустаяСсылка();
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура ВыполнитьПроверкиСвязанныеСТабличнойЧастьюОплатаПоставщикам(Отказ, ПроверяемыеРеквизиты)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ОплатаПоставщикам.НомерСтроки,
	|	ВЫРАЗИТЬ(ОплатаПоставщикам.ДоговорКонтрагента КАК Справочник.ДоговорыКонтрагентов) КАК ДоговорКонтрагента
	|ПОМЕСТИТЬ ВТ_ОплатаПоставщикам
	|ИЗ
	|	&ОплатаПоставщикам КАК ОплатаПоставщикам
	|ГДЕ
	|	ОплатаПоставщикам.ДоговорКонтрагента <> &ПустойДоговорКонтрагента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОплатаПоставщикам.НомерСтроки,
	|	&Ссылка КАК Регистратор,
	|	&ВалютаДокумента,
	|	ОплатаПоставщикам.ДоговорКонтрагента,
	|	ОплатаПоставщикам.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	&ВалютаРегламентированногоУчета
	|ИЗ
	|	ВТ_ОплатаПоставщикам КАК ОплатаПоставщикам";
	
	Запрос.УстановитьПараметр("ОплатаПоставщикам"             , ОплатаПоставщикам.Выгрузить());
	Запрос.УстановитьПараметр("Ссылка"                        , Ссылка);
	Запрос.УстановитьПараметр("ПустойДоговорКонтрагента"      , Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
	Запрос.УстановитьПараметр("ВалютаДокумента"               , ВалютаДокумента);
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		ПутьКСтрокеТЧ = "ОплатаПоставщикам[" + Формат(Выборка.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].ДоговорКонтрагента";
		
		ДополнениеКСообщению = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'В строке %1 списка ""Оплата поставщикам"":'"), Выборка.НомерСтроки);
		
		УправлениеВзаиморасчетамиСервер.ВозможноПроведениеВ_БУ_НУ(Выборка, Отказ, ДополнениеКСообщению, ПутьКСтрокеТЧ);
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыполнитьПроверкиСвязанныеСТабличнойЧастьюПеречислениеПенсионныхВзносов(Отказ, ПроверяемыеРеквизиты)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ПеречислениеПенсионныхВзносов.НомерСтроки,
	|	ПеречислениеПенсионныхВзносов.Документ
	|ПОМЕСТИТЬ ВТ_ПеречислениеПенсионныхВзносов
	|ИЗ
	|	&ПеречислениеПенсионныхВзносов КАК ПеречислениеПенсионныхВзносов
	|ГДЕ
	|	ПеречислениеПенсионныхВзносов.Документ <> &ПустаяВедомость
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ПлатежноеПоручениеИсходящееПеречислениеПенсионныхВзносов.Документ КАК Ведомость,
	|	ПлатежноеПоручениеИсходящееПеречислениеПенсионныхВзносов.Ссылка КАК Регистратор
	|ПОМЕСТИТЬ ВТ_РанееИспользованныеВедомости
	|ИЗ
	|	РегистрНакопления.ОПВРасчетыСФондами КАК ОПВРасчетыСФондами
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПлатежноеПоручениеИсходящее.ПеречислениеПенсионныхВзносов КАК ПлатежноеПоручениеИсходящееПеречислениеПенсионныхВзносов
	|		ПО ОПВРасчетыСФондами.Регистратор = ПлатежноеПоручениеИсходящееПеречислениеПенсионныхВзносов.Ссылка
	|			И (ПлатежноеПоручениеИсходящееПеречислениеПенсионныхВзносов.Документ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийОПВПеречислениеВФонды.ПеречислениеОбязательныхПенсионныхВзносов))
	|ГДЕ
	|	ПлатежноеПоручениеИсходящееПеречислениеПенсионныхВзносов.Документ В
	|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				ВТ_ПеречислениеПенсионныхВзносов.Документ
	|			ИЗ
	|				ВТ_ПеречислениеПенсионныхВзносов КАК ВТ_ПеречислениеПенсионныхВзносов)
	|	И ОПВРасчетыСФондами.Активность
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	АвансовыйОтчетПеречислениеПенсионныхВзносов.Документ,
	|	АвансовыйОтчетПеречислениеПенсионныхВзносов.Ссылка
	|ИЗ
	|	РегистрНакопления.ОПВРасчетыСФондами КАК ОПВРасчетыСФондами
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.АвансовыйОтчет.ПеречислениеПенсионныхВзносов КАК АвансовыйОтчетПеречислениеПенсионныхВзносов
	|		ПО ОПВРасчетыСФондами.Регистратор = АвансовыйОтчетПеречислениеПенсионныхВзносов.Ссылка
	|			И (АвансовыйОтчетПеречислениеПенсионныхВзносов.Документ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийОПВПеречислениеВФонды.ПеречислениеОбязательныхПенсионныхВзносов))
	|			И АвансовыйОтчетПеречислениеПенсионныхВзносов.Ссылка <> &Ссылка
	|ГДЕ
	|	АвансовыйОтчетПеречислениеПенсионныхВзносов.Документ В
	|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				ВТ_ПеречислениеПенсионныхВзносов.Документ
	|			ИЗ
	|				ВТ_ПеречислениеПенсионныхВзносов КАК ВТ_ПеречислениеПенсионныхВзносов)
	|	И ОПВРасчетыСФондами.Активность
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПлатежноеПоручениеИсходящееПеречислениеПенсионныхВзносов.Документ,
	|	ПлатежноеПоручениеИсходящееПеречислениеПенсионныхВзносов.Ссылка
	|ИЗ
	|	РегистрНакопления.ОППВРасчетыСФондами КАК ОППВРасчетыСФондами
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПлатежноеПоручениеИсходящее.ПеречислениеПенсионныхВзносов КАК ПлатежноеПоручениеИсходящееПеречислениеПенсионныхВзносов
	|		ПО ОППВРасчетыСФондами.Регистратор = ПлатежноеПоручениеИсходящееПеречислениеПенсионныхВзносов.Ссылка
	|			И (ПлатежноеПоручениеИсходящееПеречислениеПенсионныхВзносов.Документ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийОПВПеречислениеВФонды.ПеречислениеОбязательныхПрофессиональныхПенсионныхВзносов))
	|ГДЕ
	|	ПлатежноеПоручениеИсходящееПеречислениеПенсионныхВзносов.Документ В
	|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				ВТ_ПеречислениеПенсионныхВзносов.Документ
	|			ИЗ
	|				ВТ_ПеречислениеПенсионныхВзносов КАК ВТ_ПеречислениеПенсионныхВзносов)
	|	И ОППВРасчетыСФондами.Активность
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	АвансовыйОтчетПеречислениеПенсионныхВзносов.Документ,
	|	АвансовыйОтчетПеречислениеПенсионныхВзносов.Ссылка
	|ИЗ
	|	РегистрНакопления.ОППВРасчетыСФондами КАК ОППВРасчетыСФондами
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.АвансовыйОтчет.ПеречислениеПенсионныхВзносов КАК АвансовыйОтчетПеречислениеПенсионныхВзносов
	|		ПО ОППВРасчетыСФондами.Регистратор = АвансовыйОтчетПеречислениеПенсионныхВзносов.Ссылка
	|			И (АвансовыйОтчетПеречислениеПенсионныхВзносов.Документ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийОПВПеречислениеВФонды.ПеречислениеОбязательныхПрофессиональныхПенсионныхВзносов))
	|			И АвансовыйОтчетПеречислениеПенсионныхВзносов.Ссылка <> &Ссылка
	|ГДЕ
	|	АвансовыйОтчетПеречислениеПенсионныхВзносов.Документ В
	|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				ВТ_ПеречислениеПенсионныхВзносов.Документ
	|			ИЗ
	|				ВТ_ПеречислениеПенсионныхВзносов КАК ВТ_ПеречислениеПенсионныхВзносов)
	|	И ОППВРасчетыСФондами.Активность
	|
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПлатежноеПоручениеИсходящееПеречислениеПенсионныхВзносов.Документ,
	|	ПлатежноеПоручениеИсходящееПеречислениеПенсионныхВзносов.Ссылка
	|ИЗ
	|	РегистрНакопления.ОПВРРасчетыСФондами КАК ОПВРРасчетыСФондами
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПлатежноеПоручениеИсходящее.ПеречислениеПенсионныхВзносов КАК ПлатежноеПоручениеИсходящееПеречислениеПенсионныхВзносов
	|		ПО ОПВРРасчетыСФондами.Регистратор = ПлатежноеПоручениеИсходящееПеречислениеПенсионныхВзносов.Ссылка
	|			И (ПлатежноеПоручениеИсходящееПеречислениеПенсионныхВзносов.Документ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийОПВПеречислениеВФонды.ПеречислениеОбязательныхПенсионныхВзносовРаботодателя))
	|ГДЕ
	|	ПлатежноеПоручениеИсходящееПеречислениеПенсионныхВзносов.Документ В
	|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				ВТ_ПеречислениеПенсионныхВзносов.Документ
	|			ИЗ
	|				ВТ_ПеречислениеПенсионныхВзносов КАК ВТ_ПеречислениеПенсионныхВзносов)
	|	И ОПВРРасчетыСФондами.Активность
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	АвансовыйОтчетПеречислениеПенсионныхВзносов.Документ,
	|	АвансовыйОтчетПеречислениеПенсионныхВзносов.Ссылка
	|ИЗ
	|	РегистрНакопления.ОПВРРасчетыСФондами КАК ОПВРРасчетыСФондами
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.АвансовыйОтчет.ПеречислениеПенсионныхВзносов КАК АвансовыйОтчетПеречислениеПенсионныхВзносов
	|		ПО ОПВРРасчетыСФондами.Регистратор = АвансовыйОтчетПеречислениеПенсионныхВзносов.Ссылка
	|			И (АвансовыйОтчетПеречислениеПенсионныхВзносов.Документ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийОПВПеречислениеВФонды.ПеречислениеОбязательныхПенсионныхВзносовРаботодателя))
	|			И АвансовыйОтчетПеречислениеПенсионныхВзносов.Ссылка <> &Ссылка
	|ГДЕ
	|	АвансовыйОтчетПеречислениеПенсионныхВзносов.Документ В
	|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				ВТ_ПеречислениеПенсионныхВзносов.Документ
	|			ИЗ
	|				ВТ_ПеречислениеПенсионныхВзносов КАК ВТ_ПеречислениеПенсионныхВзносов)
	|	И ОПВРРасчетыСФондами.Активность
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ведомость
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВТ_ПеречислениеПенсионныхВзносов.НомерСтроки КАК НомерСтроки,
	|	ПРЕДСТАВЛЕНИЕ(РанееИспользованныеВедомости.Регистратор) КАК КонфликтныйДокумент
	|ИЗ
	|	ВТ_ПеречислениеПенсионныхВзносов КАК ВТ_ПеречислениеПенсионныхВзносов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_РанееИспользованныеВедомости КАК РанееИспользованныеВедомости
	|		ПО ВТ_ПеречислениеПенсионныхВзносов.Документ = РанееИспользованныеВедомости.Ведомость
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Запрос.УстановитьПараметр("ПеречислениеПенсионныхВзносов", ПеречислениеПенсионныхВзносов.Выгрузить());
	Запрос.УстановитьПараметр("ПустаяВедомость", 			   Документы.ОПВПеречислениеВФонды.ПустаяСсылка());
	Запрос.УстановитьПараметр("Ссылка", 					   Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		ПутьКСтрокеТЧ = "ПеречислениеПенсионныхВзносов[" + Формат(Выборка.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].Документ";
		
		ТекстСообщения = ОбщегоНазначенияБККлиентСервер.ПолучитьТекстСообщения("Колонка", "Корректность", НСтр("ru = 'Список'"),
				Выборка.НомерСтроки, НСтр("ru = 'Перечисление ОПВ'"), 
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Указанный список уже включен в документ %1'"), Выборка.КонфликтныйДокумент));
				
		ОбщегоНазначения.СообщитьПользователю(
			ТекстСообщения,
			,
			ПутьКСтрокеТЧ,
			"Объект",
			Отказ);
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыполнитьПроверкиСвязанныеСТабличнойЧастьюПеречислениеСоциальныхОтчислений(Отказ, ПроверяемыеРеквизиты)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ПеречислениеСоциальныхОтчислений.НомерСтроки,
	|	ПеречислениеСоциальныхОтчислений.Документ
	|ПОМЕСТИТЬ ВТ_ПеречислениеСоциальныхОтчислений
	|ИЗ
	|	&ПеречислениеСоциальныхОтчислений КАК ПеречислениеСоциальныхОтчислений
	|ГДЕ
	|	ПеречислениеСоциальныхОтчислений.Документ <> &ПустаяВедомость
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
	|	ПлатежноеПоручениеИсходящееПеречислениеСоциальныхОтчислений.Документ КАК Ведомость,
	|	ПлатежноеПоручениеИсходящееПеречислениеСоциальныхОтчислений.Ссылка КАК Регистратор
	|ПОМЕСТИТЬ ВТ_РанееИспользованныеВедомости
	|ИЗ
	|	РегистрНакопления.СОРасчетыСФондами КАК СОРасчетыСФондами
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПлатежноеПоручениеИсходящее.ПеречислениеСоциальныхОтчислений КАК ПлатежноеПоручениеИсходящееПеречислениеСоциальныхОтчислений
	|		ПО СОРасчетыСФондами.Регистратор = ПлатежноеПоручениеИсходящееПеречислениеСоциальныхОтчислений.Ссылка
	|ГДЕ
	|	ПлатежноеПоручениеИсходящееПеречислениеСоциальныхОтчислений.Документ В
	|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				ВТ_ПеречислениеСоциальныхОтчислений.Документ
	|			ИЗ
	|				ВТ_ПеречислениеСоциальныхОтчислений КАК ВТ_ПеречислениеСоциальныхОтчислений)
	|	И СОРасчетыСФондами.Активность
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	АвансовыйОтчетПеречислениеСоциальныхОтчислений.Документ,
	|	АвансовыйОтчетПеречислениеСоциальныхОтчислений.Ссылка
	|ИЗ
	|	РегистрНакопления.СОРасчетыСФондами КАК СОРасчетыСФондами
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.АвансовыйОтчет.ПеречислениеСоциальныхОтчислений КАК АвансовыйОтчетПеречислениеСоциальныхОтчислений
	|		ПО СОРасчетыСФондами.Регистратор = АвансовыйОтчетПеречислениеСоциальныхОтчислений.Ссылка
	|		И АвансовыйОтчетПеречислениеСоциальныхОтчислений.Ссылка <> &Ссылка
	|ГДЕ
	|	АвансовыйОтчетПеречислениеСоциальныхОтчислений.Документ В
	|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				ВТ_ПеречислениеСоциальныхОтчислений.Документ
	|			ИЗ
	|				ВТ_ПеречислениеСоциальныхОтчислений КАК ВТ_ПеречислениеСоциальныхОтчислений)
	|	И СОРасчетыСФондами.Активность
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ведомость
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ПеречислениеСоциальныхОтчислений.НомерСтроки КАК НомерСтроки,
	|	ПРЕДСТАВЛЕНИЕ(РанееИспользованныеВедомости.Регистратор) КАК КонфликтныйДокумент
	|ИЗ
	|	ВТ_ПеречислениеСоциальныхОтчислений КАК ПеречислениеСоциальныхОтчислений
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_РанееИспользованныеВедомости КАК РанееИспользованныеВедомости
	|		ПО ПеречислениеСоциальныхОтчислений.Документ = РанееИспользованныеВедомости.Ведомость
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Запрос.УстановитьПараметр("ПеречислениеСоциальныхОтчислений", ПеречислениеСоциальныхОтчислений.Выгрузить());
	Запрос.УстановитьПараметр("ПустаяВедомость", 				  Документы.СОПеречислениеВФонды.ПустаяСсылка());
	Запрос.УстановитьПараметр("Ссылка", 						  Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		ПутьКСтрокеТЧ = "ПеречислениеСоциальныхОтчислений[" + Формат(Выборка.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].Документ";
		
		ТекстСообщения = ОбщегоНазначенияБККлиентСервер.ПолучитьТекстСообщения("Колонка", "Корректность", НСтр("ru = 'Список'"),
				Выборка.НомерСтроки, НСтр("ru = 'Перечисление СО'"), 
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Указанный список уже включен в документ %1'"), Выборка.КонфликтныйДокумент));
				
		ОбщегоНазначения.СообщитьПользователю(
			ТекстСообщения,
			,
			ПутьКСтрокеТЧ,
			"Объект",
			Отказ);
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеТабличнойЧастиПострочно(ПроверяемаяТабличнаячасть, ИмяТабличнойЧасти, Отказ, ПараметрыПроверки = Неопределено)
	
	ПредставлениеТабличнойЧасти = ?(ИмяТабличнойЧасти = "Товары", НСтр("ru = 'ТМЗ'"), Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Представление());
	
	Для Каждого СтрокаТабличнойЧасти Из ПроверяемаяТабличнаячасть Цикл
		
		Если ИмяТабличнойЧасти = "Прочее" И ПараметрыПроверки <> Неопределено
			И ПараметрыПроверки.Свойство("ПроверятьЗаполнениеСуммыНДСДляСуточных") И ПараметрыПроверки.ПроверятьЗаполнениеСуммыНДСДляСуточных
			И ПараметрыПроверки.Свойство("ПроверятьЗаполнениеСчетаУчетаНДС") И ПараметрыПроверки.ПроверятьЗаполнениеСчетаУчетаНДС
			И СтрокаТабличнойЧасти.СуммаНДС <> 0 
			И (СтрокаТабличнойЧасти.ВидЗадолженностиПодотчетногоЛица = Перечисления.ВидыЗадолженностиПодотчетныхЛиц.Суточные  
				ИЛИ СтрокаТабличнойЧасти.ВидЗадолженностиПодотчетногоЛица = Перечисления.ВидыЗадолженностиПодотчетныхЛиц.СуточныеСверхНормы) Тогда
				
			ТекстСообщения = ОбщегоНазначенияБККлиентСервер.ПолучитьТекстСообщения("Колонка", "Корректность", НСтр("ru = 'Сумма НДС'"),
				СтрокаТабличнойЧасти.НомерСтроки, ПредставлениеТабличнойЧасти, НСтр("ru = 'Для задолженности вида ""Суточные"" сумма НДС должна быть равна 0'"));
			Поле = ИмяТабличнойЧасти + "[" + Формат(СтрокаТабличнойЧасти.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].СуммаНДС";
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
			
		КонецЕсли;
		
		Если ПараметрыПроверки <> Неопределено
			И ПараметрыПроверки.Свойство("ПроверятьЗаполнениеСчетаУчетаНДС") И ПараметрыПроверки.ПроверятьЗаполнениеСчетаУчетаНДС Тогда
			
			Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СчетУчетаНДС) И УчетНДСиАкцизаВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС) <> 0 Тогда
				ТекстСообщения = ОбщегоНазначенияБККлиентСервер.ПолучитьТекстСообщения("Колонка",, НСтр("ru = 'Счет НДС'"),
					СтрокаТабличнойЧасти.НомерСтроки, ПредставлениеТабличнойЧасти);
				Поле = ИмяТабличнойЧасти + "[" + Формат(СтрокаТабличнойЧасти.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].СчетУчетаНДС";
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
			КонецЕсли;
			
			Если ИмяТабличнойЧасти = "Товары" ИЛИ (ИмяТабличнойЧасти = "Прочее"
				И НЕ (СтрокаТабличнойЧасти.ВидЗадолженностиПодотчетногоЛица = Перечисления.ВидыЗадолженностиПодотчетныхЛиц.Суточные  
					ИЛИ СтрокаТабличнойЧасти.ВидЗадолженностиПодотчетногоЛица = Перечисления.ВидыЗадолженностиПодотчетныхЛиц.СуточныеСверхНормы)) Тогда
					
				Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтавкаНДС) Тогда
					ТекстСообщения = ОбщегоНазначенияБККлиентСервер.ПолучитьТекстСообщения("Колонка", , НСтр("ru = '% НДС'"),
						СтрокаТабличнойЧасти.НомерСтроки, ПредставлениеТабличнойЧасти);
					ПутьКТабличнойЧасти = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТабличнойЧасти, СтрокаТабличнойЧасти.НомерСтроки, "СтавкаНДС");
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, ПутьКТабличнойЧасти, "Объект", Отказ);
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.НДСВидОборота) Тогда
					ТекстСообщения = ОбщегоНазначенияБККлиентСервер.ПолучитьТекстСообщения("Колонка", , НСтр("ru = 'Вид оборота'"),
						СтрокаТабличнойЧасти.НомерСтроки, ПредставлениеТабличнойЧасти);
					ПутьКТабличнойЧасти = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТабличнойЧасти, СтрокаТабличнойЧасти.НомерСтроки, "НДСВидОборота");
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, ПутьКТабличнойЧасти, "Объект", Отказ);
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.НДСВидПоступления) Тогда
					ТекстСообщения = ОбщегоНазначенияБККлиентСервер.ПолучитьТекстСообщения("Колонка", , НСтр("ru = 'Вид поступления'"),
						СтрокаТабличнойЧасти.НомерСтроки, ПредставлениеТабличнойЧасти);
					ПутьКТабличнойЧасти = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТабличнойЧасти, СтрокаТабличнойЧасти.НомерСтроки, "НДСВидПоступления");
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, ПутьКТабличнойЧасти, "Объект", Отказ);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ИмяТабличнойЧасти = "Товары" И ПараметрыПроверки <> Неопределено
			И ПараметрыПроверки.Свойство("ПроверятьЗаполнениеСчетаУчетаНУ") И ПараметрыПроверки.ПроверятьЗаполнениеСчетаУчетаНУ
			И ЗначениеЗаполнено(СтрокаТабличнойЧасти.СчетУчетаБУ) И НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СчетУчетаНУ) 
			И НЕ ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТабличнойЧасти.СчетУчетаБУ).Забалансовый Тогда
			
			ТекстСообщения = ОбщегоНазначенияБККлиентСервер.ПолучитьТекстСообщения("Колонка",, НСтр("ru = 'Счет учета (НУ)'"),
				СтрокаТабличнойЧасти.НомерСтроки, ПредставлениеТабличнойЧасти);
			Поле = ИмяТабличнойЧасти + "[" + Формат(СтрокаТабличнойЧасти.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].СчетУчетаНУ";
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
			
		КонецЕсли;

		Если ИмяТабличнойЧасти = "Товары" И ПараметрыПроверки <> Неопределено
			И ПараметрыПроверки.Свойство("ПроверятьПризнакЗабалансовыйСчетаУчетаТМЗ") И ПараметрыПроверки.ПроверятьЗаполнениеСчетаУчетаНУ
			И ЗначениеЗаполнено(СтрокаТабличнойЧасти.СчетУчетаБУ)
			И ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТабличнойЧасти.СчетУчетаБУ).Забалансовый Тогда
			
			ТекстСообщения = ОбщегоНазначенияБККлиентСервер.ПолучитьТекстСообщения("Колонка", "Корректность", НСтр("ru = 'Счет учета (БУ)'"),
				СтрокаТабличнойЧасти.НомерСтроки, ПредставлениеТабличнойЧасти,
				НСтр("ru = 'В документе не поддерживается оприходование ТМЗ на забалансовый счет.'"));
			Поле = ИмяТабличнойЧасти + "[" + Формат(СтрокаТабличнойЧасти.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].СчетУчетаБУ";
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Синхронизация счетов-фактур

Процедура СформироватьСчетаФактуры(Отказ) Экспорт
	
	ДанныеСчетовФактур = ДанныеСчетовФактурПоДокументу();
	
	Если ЭтоНовый() Тогда
		ДокументСсылка = ПолучитьСсылкуНового();
		Если НЕ ЗначениеЗаполнено(ДокументСсылка) Тогда
			ДокументСсылка = Документы.АвансовыйОтчет.ПолучитьСсылку();
			УстановитьСсылкуНового(ДокументСсылка);
		КонецЕсли;
	Иначе
		ДокументСсылка = Ссылка;
	КонецЕсли;
	
	ПодчиненныеСчетаФактуры = НайтиСоздатьПодчиненныеСчетаФактуры(ДокументСсылка, ДанныеСчетовФактур);
	
	ЗаполнитьСчетаФактурыВДокументе();

КонецПроцедуры

Процедура ОбновитьСчетаФактуры(РежимЗаписи) Экспорт

	Для каждого СтрокаСФ Из ПодчиненныеСчетаФактуры Цикл
	
		Если ЭтотОбъект.ПометкаУдаления ИЛИ НЕ СтрокаСФ.Использован Тогда
			Если НЕ СтрокаСФ.ПометкаУдаления Тогда
				ДокументСФ = СтрокаСФ.Ссылка.ПолучитьОбъект();
				Если ДокументСФ.ДокументыОснования.Количество() > 1 Тогда
					СтрокиТекОснования = ДокументСФ.ДокументыОснования.НайтиСтроки(Новый Структура("ДокументОснование", ЭтотОбъект.Ссылка));
					Для каждого СтрокаТекОснования Из СтрокиТекОснования Цикл
						ДокументСФ.ДокументыОснования.Удалить(СтрокаТекОснования);
					КонецЦикла;
					РежимЗаписиСФ = ?(ДокументСФ.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись);
					
					// перезаполним табличные части, если счет-фактура подтвержден документами отгрузки
					Если ДокументСФ.ПодтвержденДокументамиОтгрузки Тогда
						УчетНДСИАкциза.ОчиститьТабЧасти(ДокументСФ);
						Для Каждого СтрокаДок ИЗ ДокументСФ.ДокументыОснования Цикл
							УчетНДСИАкциза.ЗаполнитьТабличныеЧастиИзДокументаОснования(ДокументСФ, СтрокаДок.ДокументОснование);
						КонецЦикла;
					КонецЕсли;
					
					ДокументСФ.ДополнительныеСвойства.Вставить("ВыполненаПроверкаЗаполнения", Истина);
					ДокументСФ.Записать(РежимЗаписиСФ);
					
					// сообщим пользователю
					ТекстСообщения = НСтр("ru='Из документа «%1» удалена ссылка на текущий авансовый отчет (поставщик «%2», с.-ф. № <%3> от %4)'");

					ОбщегоНазначения.СообщитьПользователю(
						СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							ТекстСообщения,
							СтрокаСФ.Ссылка,
							СокрЛП(ДокументСФ.Поставщик),
							СокрЛП(ДокументСФ.НомерВходящегоДокумента),
							Формат(ДокументСФ.ДатаВходящегоДокумента, "ДФ=dd.MM.yyyy")), 
						ЭтотОбъект);
				Иначе
					ДокументСФ.УстановитьПометкуУдаления(Истина);
					
					// сообщим пользователю
					ТекстСообщения = НСтр("ru='Документ «%1» (поставщик «%2», с.-ф. № <%3> от %4) не используется и помечен на удаление.'");
					
					ОбщегоНазначения.СообщитьПользователю(
						СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							ТекстСообщения,
							СтрокаСФ.Ссылка,
							СокрЛП(ДокументСФ.Поставщик),
							СокрЛП(ДокументСФ.НомерВходящегоДокумента),
							Формат(ДокументСФ.ДатаВходящегоДокумента, "ДФ=dd.MM.yyyy")), 
						ЭтотОбъект);
					
				КонецЕсли;
			КонецЕсли;
		Иначе
			ДокументСФ = СтрокаСФ.Ссылка.ПолучитьОбъект();
			Если ДокументСФ.ПометкаУдаления Тогда
				ДокументСФ.ПометкаУдаления = Ложь;
			КонецЕсли;
			РежимЗаписиСФ = РежимЗаписи;
			Если ДокументСФ.Проведен И РежимЗаписи <> РежимЗаписиДокумента.Проведение Тогда
				РежимЗаписиСФ = РежимЗаписиДокумента.ОтменаПроведения;
			ИначеЕсли НЕ ДокументСФ.Проведен И РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
				РежимЗаписиСФ = РежимЗаписиДокумента.Проведение;
			КонецЕсли;
			
			Если ДокументСФ.ДокументыОснования.Найти(Ссылка, "ДокументОснование") = Неопределено Тогда
				// Это новый документ. Необходимо модифицировать ссылку в счете-фактуре
				ДокументСФ.ДокументыОснования.Добавить().ДокументОснование = Ссылка;				
			КонецЕсли;
			
			//для перезаполнения табличных частей
			Если ДокументСФ.ПодтвержденДокументамиОтгрузки Тогда
				УчетНДСИАкциза.ОчиститьТабЧасти(ДокументСФ);
				Для Каждого СтрокаДок ИЗ ДокументСФ.ДокументыОснования Цикл
					УчетНДСИАкциза.ЗаполнитьТабличныеЧастиИзДокументаОснования(ДокументСФ, СтрокаДок.ДокументОснование);
				КонецЦикла;
			КонецЕсли;
			
			ДокументСФ.ДополнительныеСвойства.Вставить("ВыполненаПроверкаЗаполнения", Истина);
			ДокументСФ.Записать(РежимЗаписиСФ);
		КонецЕсли;
	
	КонецЦикла;
		
КонецПроцедуры

Функция ДанныеСчетовФактурПоДокументу()

	ДанныеСчетовФактур = Прочее.ВыгрузитьКолонки("Поставщик,НомерСФ,ДатаСФ,СчетФактура");
	Для каждого СтрокаТабличнойЧасти Из Товары Цикл
		Если СтрокаТабличнойЧасти.ПредъявленСФ 
			И (ЗначениеЗаполнено(СтрокаТабличнойЧасти.Поставщик) И ЗначениеЗаполнено(СтрокаТабличнойЧасти.НомерСФ)
			И ЗначениеЗаполнено(СтрокаТабличнойЧасти.ДатаСФ)) Тогда
			
			НоваяСтрока = ДанныеСчетовФактур.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТабличнойЧасти);
			
		ИначеЕсли НЕ СтрокаТабличнойЧасти.ПредъявленСФ И ЗначениеЗаполнено(СтрокаТабличнойЧасти.СчетФактура) Тогда
			СтрокаТабличнойЧасти.СчетФактура = Неопределено;
			
		ИначеЕсли СтрокаТабличнойЧасти.ПредъявленСФ 
			И НЕ (ЗначениеЗаполнено(СтрокаТабличнойЧасти.Поставщик) И ЗначениеЗаполнено(СтрокаТабличнойЧасти.НомерСФ)
			 И ЗначениеЗаполнено(СтрокаТабличнойЧасти.ДатаСФ)) Тогда 
			
			СтрокаТабличнойЧасти.СчетФактура = Неопределено;
			ТекстСообщения = НСтр("ru = 'В строке %1 списка ""%2"" не указаны реквизиты:%3. Счет-фактура по данной строке не зарегистрирован'");
			ТекстНеУказан = "";
			
			Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Поставщик) Тогда 
				ТекстНеУказан = НСтр("ru = 'поставщик'");
			КонецЕсли;
			
		     Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.НомерСФ) Тогда 
				ТекстНеУказан = ТекстНеУказан + ?(ЗначениеЗаполнено(ТекстНеУказан), ", ", "") + НСтр("ru = 'номер счета-фактуры'");
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ДатаСФ) Тогда 
				ТекстНеУказан = ТекстНеУказан + ?(ЗначениеЗаполнено(ТекстНеУказан), ", ", "") + НСтр("ru = 'дата счета-фактуры'");
			КонецЕсли;           
						
			ОбщегоНазначения.СообщитьПользователю(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ТекстСообщения,
					СтрокаТабличнойЧасти.НомерСтроки,
					НСтр("ru = 'ТМЗ'"),
					ТекстНеУказан), 
				ЭтотОбъект, "Товары[" + Формат(СтрокаТабличнойЧасти.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].СчетФактура");
		КонецЕсли;
	КонецЦикла;
	Для каждого СтрокаТабличнойЧасти Из Прочее Цикл
		Если СтрокаТабличнойЧасти.ПредъявленСФ 
			И (ЗначениеЗаполнено(СтрокаТабличнойЧасти.Поставщик) И ЗначениеЗаполнено(СтрокаТабличнойЧасти.НомерСФ)
			И ЗначениеЗаполнено(СтрокаТабличнойЧасти.ДатаСФ)) Тогда
			
			НоваяСтрока = ДанныеСчетовФактур.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТабличнойЧасти);
			
		ИначеЕсли НЕ СтрокаТабличнойЧасти.ПредъявленСФ И ЗначениеЗаполнено(СтрокаТабличнойЧасти.СчетФактура) Тогда
			СтрокаТабличнойЧасти.СчетФактура = Неопределено;
			
		ИначеЕсли СтрокаТабличнойЧасти.ПредъявленСФ 
			И НЕ (ЗначениеЗаполнено(СтрокаТабличнойЧасти.Поставщик) И ЗначениеЗаполнено(СтрокаТабличнойЧасти.НомерСФ)
			 И ЗначениеЗаполнено(СтрокаТабличнойЧасти.ДатаСФ)) Тогда 
			
			СтрокаТабличнойЧасти.СчетФактура = Неопределено;
			ТекстСообщения = НСтр("ru = 'В строке %1 списка ""%2"" не указаны реквизиты:%3. Счет-фактура по данной строке не зарегистрирован'");
			ТекстНеУказан = "";
			
			Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Поставщик) Тогда 
				ТекстНеУказан = НСтр("ru = 'поставщик'");
			КонецЕсли;
			
		     Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.НомерСФ) Тогда 
				ТекстНеУказан = ТекстНеУказан + ?(ЗначениеЗаполнено(ТекстНеУказан), ", ", "") + НСтр("ru = 'номер счета-фактуры'");
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ДатаСФ) Тогда 
				ТекстНеУказан = ТекстНеУказан + ?(ЗначениеЗаполнено(ТекстНеУказан), ", ", "") + НСтр("ru = 'дата счета-фактуры'");
			КонецЕсли;

			ОбщегоНазначения.СообщитьПользователю(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ТекстСообщения,
					СтрокаТабличнойЧасти.НомерСтроки,
					НСтр("ru = 'Прочее'"),
					ТекстНеУказан), 
				ЭтотОбъект, "Прочее[" + Формат(СтрокаТабличнойЧасти.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].СчетФактура");
		КонецЕсли;
	КонецЦикла;
	ДанныеСчетовФактур.Свернуть("Поставщик,НомерСФ,ДатаСФ,СчетФактура");
	
	Возврат ДанныеСчетовФактур;

КонецФункции

Функция НайтиСоздатьПодчиненныеСчетаФактуры(ДокументСсылка, ДанныеСчетовФактур)

	ТаблицаСФ = ПолучитьТаблицуПодчиненныхСчетовФактур(ДокументСсылка);
	
	Для каждого СтрокаТаблицы Из ДанныеСчетовФактур Цикл
		
		СтрокаСФ = НайтиСтрокуСчетаФактуры(ТаблицаСФ, СтрокаТаблицы);
		Если СтрокаСФ = Неопределено Тогда
			
			ПараметрыСчетаФактуры = Новый Структура("Организация, Контрагент", Организация, СтрокаТаблицы.Поставщик);
			ПараметрыСчетаФактуры.Вставить("НомерСчетаФактурыПолученного", СтрокаТаблицы.НомерСФ);
			ПараметрыСчетаФактуры.Вставить("ДатаСчетаФактурыПолученного", СтрокаТаблицы.ДатаСФ);
			ПараметрыСчетаФактуры.Вставить("СтруктурноеПодразделение", СтруктурноеПодразделение);
			
			ДокументСФ = УчетНДСИАкциза.НайтиСчетФактуруПолученный(ПараметрыСчетаФактуры);
			
			НовыйСчетФактура = ДокументСФ = Неопределено;
			Если ДокументСФ = Неопределено Тогда
				ДокументСФ = Документы.СчетФактураПолученный.СоздатьДокумент();
				
				ДокументСФ.Дата = ЭтотОбъект.Дата;
				ДокументСФ.ДатаСовершенияОборотаПоРеализации = СтрокаТаблицы.ДатаСФ;
				ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ДокументСФ, ЭтотОбъект);
				
				ДокументСФ.Контрагент              = СтрокаТаблицы.Поставщик;
				//ДокументСФ.Поставщик              = СтрокаТаблицы.Поставщик;

				ДокументСФ.КурсВзаиморасчетов      = КурсДокумента;
				ДокументСФ.КратностьВзаиморасчетов = КратностьДокумента; 				
				ДокументСФ.ДатаВходящегоДокумента  = СтрокаТаблицы.ДатаСФ;
				ДокументСФ.НомерВходящегоДокумента = СтрокаТаблицы.НомерСФ;
				ДокументСФ.ПодтвержденДокументамиОтгрузки = Истина;
				ДокументСФ.Комментарий = НСтр("ru = 'Создан автоматически на основании авансового отчета'", ОбщегоНазначения.КодОсновногоЯзыка());
				ДокументСФ.ВидСчетаФактуры = Перечисления.ВидыСчетовФактур.Обычный;
				ДокументСФ.СпособПолучения = Перечисления.СпособыОбменаДокументами.Бумажно;
				
			Иначе
				ДокументСФ = ДокументСФ.ПолучитьОбъект();
			КонецЕсли;
			
			ДокументСФ.ДокументыОснования.Добавить().ДокументОснование = ДокументСсылка;
			
			ДокументСФ.ДополнительныеСвойства.Вставить("ВыполненаПроверкаЗаполнения", Истина);
			ДокументСФ.Записать();
			
			Если НовыйСчетФактура Тогда 
				// сообщим пользователю
				ТекстСообщения = НСтр("ru='Сформирован документ «%1» (поставщик «%2», с.-ф. № %3 от %4).'");
				ОбщегоНазначения.СообщитьПользователю(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						ТекстСообщения,
						ДокументСФ.Ссылка,
						СтрокаТаблицы.Поставщик,
						СтрокаТаблицы.НомерСФ,
						СтрокаТаблицы.ДатаСФ), 
					ЭтотОбъект);
			КонецЕсли;
				
			СтрокаСФ = ТаблицаСФ.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаСФ, СтрокаТаблицы);
			ЗаполнитьЗначенияСвойств(СтрокаСФ, ДокументСФ);
			СтрокаСФ.Поставщик = ДокументСФ.Контрагент;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаСФ;

КонецФункции

Функция ПолучитьТаблицуПодчиненныхСчетовФактур(ДокументСсылка) Экспорт
	
	Если ЭтоНовый() Тогда 
		ТаблицаСФ  = Новый ТаблицаЗначений();
		ТаблицаСФ.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("ДокументСсылка.СчетФактураПолученный"));
		ТаблицаСФ.Колонки.Добавить("НомерСФ");
		ТаблицаСФ.Колонки.Добавить("ДатаСФ");
		ТаблицаСФ.Колонки.Добавить("Поставщик", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
		ТаблицаСФ.Колонки.Добавить("Проведен", Новый ОписаниеТипов("Булево"));
		ТаблицаСФ.Колонки.Добавить("ПометкаУдаления", Новый ОписаниеТипов("Булево"));
		ТаблицаСФ.Колонки.Добавить("Использован", Новый ОписаниеТипов("Булево"));
		
		Возврат ТаблицаСФ;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокументСсылка);
	
	Запрос.Текст = "ВЫБРАТЬ
	|	СчетФактураПолученный.Ссылка КАК СчетФактура
	|ПОМЕСТИТЬ ВТ_ПодчиненныеСчетаФактуры
	|ИЗ
	|	Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактураПолученный
	|ГДЕ
	|	СчетФактураПолученный.ДокументОснование = &ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СчетФактураПолученный.Ссылка,
	|	СчетФактураПолученный.НомерВходящегоДокумента КАК НомерСФ,
	|	СчетФактураПолученный.ДатаВходящегоДокумента КАК ДатаСФ,
	|	СчетФактураПолученный.Контрагент КАК Поставщик,
	|	СчетФактураПолученный.Проведен,
	|	СчетФактураПолученный.ПометкаУдаления КАК ПометкаУдаления
	|ИЗ
	|	Документ.СчетФактураПолученный КАК СчетФактураПолученный
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПодчиненныеСчетаФактуры КАК ВТ_ПодчиненныеСчетаФактуры
	|		ПО (ВТ_ПодчиненныеСчетаФактуры.СчетФактура = СчетФактураПолученный.Ссылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	СчетФактураПолученный.Дата,
	|	ПометкаУдаления УБЫВ,
	|	СчетФактураПолученный.Ссылка";
	
	ТаблицаСФ = Запрос.Выполнить().Выгрузить();
	ТаблицаСФ.Колонки.Добавить("Использован", Новый ОписаниеТипов("Булево"));
	
	Возврат ТаблицаСФ;
	
КонецФункции

Процедура ЗаполнитьСчетаФактурыВДокументе()

	Для каждого СтрокаТабличнойЧасти Из ЭтотОбъект.Товары Цикл
		Если СтрокаТабличнойЧасти.ПредъявленСФ Тогда
			СтрокаСФ = НайтиСтрокуСчетаФактуры(ПодчиненныеСчетаФактуры, СтрокаТабличнойЧасти);
			Если СтрокаСФ <> Неопределено Тогда
				Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.СчетФактура) 
					И СтрокаТабличнойЧасти.СчетФактура <> СтрокаСФ.Ссылка Тогда 
					ТекстСообщения = НСтр("ru='Изменен счет-фактура в строке %1 списка ""%2"" (дата, номер входящего счета-фактуры или контрагент - изменены).'");
					ОбщегоНазначения.СообщитьПользователю(
						СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							ТекстСообщения,
							СтрокаТабличнойЧасти.НомерСтроки,
							НСтр("ru = 'ТМЗ'")), 
						ЭтотОбъект, "Товары[" + Формат(СтрокаТабличнойЧасти.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].СчетФактура");
				КонецЕсли;
				
				СтрокаТабличнойЧасти.СчетФактура = СтрокаСФ.Ссылка;
				СтрокаСФ.Использован = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Для каждого СтрокаТабличнойЧасти Из ЭтотОбъект.Прочее Цикл
		Если СтрокаТабличнойЧасти.ПредъявленСФ Тогда
			СтрокаСФ = НайтиСтрокуСчетаФактуры(ПодчиненныеСчетаФактуры, СтрокаТабличнойЧасти);
			Если СтрокаСФ <> Неопределено Тогда
				Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.СчетФактура) 
					И СтрокаТабличнойЧасти.СчетФактура <> СтрокаСФ.Ссылка Тогда 
					ТекстСообщения = НСтр("ru='Изменен счет-фактура в строке %1 списка ""%2"" (дата, номер входящего счета-фактуры или контрагент - изменены).'");
					ОбщегоНазначения.СообщитьПользователю(
						СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							ТекстСообщения,
							СтрокаТабличнойЧасти.НомерСтроки,
							НСтр("ru = 'Прочее'")), 
						ЭтотОбъект, "Прочее[" + Формат(СтрокаТабличнойЧасти.НомерСтроки, "ЧН=0; ЧГ=") + "].СчетФактура");
				КонецЕсли;
				
				СтрокаТабличнойЧасти.СчетФактура = СтрокаСФ.Ссылка;
				СтрокаСФ.Использован = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция НайтиСтрокуСчетаФактуры(ТаблицаСФ, СтрокаДокумента)
	
	СтруктураПоиска = Новый Структура("НомерСФ, ДатаСФ, Ссылка",
		СтрокаДокумента.НомерСФ, СтрокаДокумента.ДатаСФ, СтрокаДокумента.СчетФактура);
	НайденныеСтроки = ТаблицаСФ.НайтиСтроки(СтруктураПоиска);
	Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		Если НайденнаяСтрока.Поставщик = СтрокаДокумента.Поставщик
			ИЛИ НЕ ЗначениеЗаполнено(НайденнаяСтрока.Поставщик) Тогда
			Возврат НайденнаяСтрока;
		КонецЕсли;
	КонецЦикла;
	
	СтруктураПоиска = Новый Структура("НомерСФ, ДатаСФ",
		СтрокаДокумента.НомерСФ, СтрокаДокумента.ДатаСФ);
	НайденныеСтроки = ТаблицаСФ.НайтиСтроки(СтруктураПоиска);
	Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		Если НайденнаяСтрока.Поставщик = СтрокаДокумента.Поставщик
			ИЛИ НЕ ЗначениеЗаполнено(НайденнаяСтрока.Поставщик) Тогда
			Возврат НайденнаяСтрока;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

#КонецЕсли
