#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

#Область СчетаУчета

Процедура УстановитьПравилаЗаполненияСчетовУчета(Правила) Экспорт
	
	// Шапка
	// расчеты с подотчетником
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "", "СчетРасчетовСПодотчетнымЛицом", "Подотчет");
	
	// Табличная часть Товары
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Товары", "СчетУчетаБУ", "Запасы");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Товары", "СчетУчетаНУ", "ЗапасыНУ");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Товары", "СчетУчетаНДС", "ПредъявленныйНДС_Запасы");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "НДСВключенВСтоимость");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Товары", "НДСВидОборота", "ВидОборотаНДСПредъявленного");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "СтавкаНДС",    "СтавкаНДС");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Товары", "НДСВидПоступления", "ВидПоступленияНДСПредъявленного");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "СтавкаНДС",    "СтавкаНДС");
	
	// Табличная часть ОплатаПоставщикам
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "ОплатаПоставщикам", "СчетУчетаРасчетовСКонтрагентом", "РасчетыСПоставщиком");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Контрагент", "Контрагент");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "ДоговорКонтрагента", "ДоговорКонтрагента");
	
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СчетУчетаРасчетовПоАвансам", "АвансыПоставщику");
	
	// Табличная часть Прочее
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Прочее", "СчетЗатратБУ", "Затраты");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоЗатратБУ1",     "СубконтоЗатрат1");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоЗатратБУ2",     "СубконтоЗатрат2");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоЗатратБУ3",     "СубконтоЗатрат3");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Прочее", "СчетЗатратНУ", "ЗатратыНУ");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеПроверкиЗаполнения(Правила, "ПлательщикНалогаНаПрибыль");
	
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоЗатратНУ1",  "СубконтоЗатрат1");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Основание", "СубконтоЗатратБУ1");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоЗатратНУ2",  "СубконтоЗатрат2");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Основание", "СубконтоЗатратБУ2");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоЗатратНУ3",  "СубконтоЗатрат3");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Основание", "СубконтоЗатратБУ3");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Прочее", "СчетУчетаНДС", "ПредъявленныйНДС_Расходы");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "СтавкаНДС",    "СтавкаНДС");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "НДСВключенВСтоимость");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Прочее", "НДСВидОборота", "ВидОборотаНДСПредъявленного");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "СтавкаНДС", "СтавкаНДС");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Прочее", "НДСВидПоступления", "ВидПоступленияНДСПредъявленного_Расходы");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "СтавкаНДС", "СтавкаНДС");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "Дата");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "Организация");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "СтруктурноеПодразделение");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "Склад");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "НДСВключенВСтоимость");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "УчитыватьНДС");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "УчитыватьКПН");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "ОтложитьПринятиеНДСКЗачету");
	
КонецПроцедуры

#Область УстаревшиеПроцедурыИФункции

Процедура ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, ИмяТабличнойЧасти) Экспорт

	ТабличнаяЧасть = Объект[ИмяТабличнойЧасти];
			
	ДанныеОбъекта = Новый Структура("Дата, Организация, ВидОперации, УчитыватьКПН, УчитыватьНДС");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	СоответствиеСчетовУчета = ПроцедурыБухгалтерскогоУчета.ПолучитьСчетаУчетаСпискаНоменклатуры(
	ДанныеОбъекта.Организация, ОбщегоНазначения.ВыгрузитьКолонку(ТабличнаяЧасть, "Номенклатура", Истина), ДанныеОбъекта.Дата);
	
	Для Каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
		СчетаУчета = СоответствиеСчетовУчета.Получить(СтрокаТабличнойЧасти.Номенклатура);
		ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, СтрокаТабличнойЧасти, ИмяТабличнойЧасти, СчетаУчета);
	КонецЦикла;
		
КонецПроцедуры

Процедура ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, СтрокаТабличнойЧасти, ИмяТабличнойЧасти, СведенияОНоменклатуре) Экспорт

	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СведенияОНоменклатуре.Свойство("СчетаУчета") Тогда
		// СведенияОНоменклатуре - структура сведений номенклатуры
		СчетаУчета = СведенияОНоменклатуре.СчетаУчета;
	ИначеЕсли СведенияОНоменклатуре.Свойство("СчетУчетаБУ") Тогда
		// СведенияОНоменклатуре - структура счетов учета номенклатуры
		СчетаУчета = СведенияОНоменклатуре;
	Иначе
		Возврат;
	КонецЕсли;
		
	Если ИмяТабличнойЧасти = "Товары" Тогда
		
		Если ЗначениеЗаполнено(СчетаУчета.СчетУчетаБУ) Тогда
			СтрокаТабличнойЧасти.СчетУчетаБУ = СчетаУчета.СчетУчетаБУ;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СчетаУчета.СчетУчетаНДСПоПриобретению) Тогда 
			СтрокаТабличнойЧасти.СчетУчетаНДС = СчетаУчета.СчетУчетаНДСПоПриобретению;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СчетаУчета.СчетУчетаНУ) Тогда
			СтрокаТабличнойЧасти.СчетУчетаНУ = СчетаУчета.СчетУчетаНУ;
		КонецЕсли;
		
	ИначеЕсли ИмяТабличнойЧасти = "Прочее" Тогда 
		
		Если ЗначениеЗаполнено(СчетаУчета.СчетСебестоимостиПриРеализацииБУ) Тогда
			СтрокаТабличнойЧасти.СчетЗатратБУ = СчетаУчета.СчетСебестоимостиПриРеализацииБУ;
			ПроцедурыБухгалтерскогоУчета.ЗаполнитьАналитикуСчетаТабличнойЧасти(СтрокаТабличнойЧасти, СчетаУчета, "СубконтоСебестоимостиБУ", "СчетЗатратБУ", "СубконтоЗатратБУ");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СчетаУчета.СчетСебестоимостиПриРеализацииНУ) Тогда
			СтрокаТабличнойЧасти.СчетЗатратНУ = СчетаУчета.СчетСебестоимостиПриРеализацииНУ;
			ПроцедурыБухгалтерскогоУчета.ЗаполнитьАналитикуСчетаТабличнойЧасти(СтрокаТабличнойЧасти, СчетаУчета, "СубконтоСебестоимостиНУ", "СчетЗатратНУ", "СубконтоЗатратНУ");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СчетаУчета.СчетУчетаНДСПоПриобретению) Тогда
			СтрокаТабличнойЧасти.СчетУчетаНДС = СчетаУчета.СчетУчетаНДСПоПриобретению;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьРеквизитыНалоговогоУчета(ДанныеОбъекта, СтрокаТабличнойЧасти, ИмяТабличнойЧасти) Экспорт
	
	МетаданныеДокумента = ДанныеОбъекта.Ссылка.Метаданные();
	ОбработкаТабличныхЧастей.ЗаполнитьНДСВидОборотаТабЧасти(СтрокаТабличнойЧасти, ДанныеОбъекта, ИмяТабличнойЧасти, МетаданныеДокумента);
	ОбработкаТабличныхЧастей.ЗаполнитьНДСВидПоступленияТабЧасти(СтрокаТабличнойЧасти, ИмяТабличнойЧасти, МетаданныеДокумента, Пользователи.ТекущийПользователь());
		
КонецПроцедуры

#КонецОбласти

#КонецОбласти

Функция ПолучитьСуммуКВыплатеЗарплатыПоВедомости(Ссылка, Ведомость) Экспорт

	СуммаКВыплате = 0;

	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Ведомость", Ведомость);
	Запрос.УстановитьПараметр("Регистратор", Ссылка);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СУММА(ЗарплатаКВыплатеЗарплата.Сумма+ЗарплатаКВыплатеЗарплата.ДепонированнаяСумма) КАК Сумма
	|ИЗ
	|	Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеЗарплата
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям КАК РанееВыплаченныеСуммы
	|		ПО ЗарплатаКВыплатеЗарплата.ФизЛицо = РанееВыплаченныеСуммы.ФизЛицо
	|		   И ЗарплатаКВыплатеЗарплата.Ссылка = РанееВыплаченныеСуммы.Ведомость
	|		   И РанееВыплаченныеСуммы.Регистратор <> &Регистратор
	|
	|ГДЕ
	|	ЗарплатаКВыплатеЗарплата.Ссылка = &Ведомость И
	|	ЗарплатаКВыплатеЗарплата.ВыплаченностьЗарплаты = ЗНАЧЕНИЕ(Перечисление.ВыплаченностьЗарплаты.Выплачено) И
	|	РанееВыплаченныеСуммы.ФизЛицо ЕСТЬ NULL
	|";

	РезультатЗапроса = Запрос.Выполнить().Выбрать();

	Если РезультатЗапроса.Следующий() Тогда
		СуммаКВыплате = РезультатЗапроса.Сумма;
	КонецЕсли;
	
	Возврат СуммаКВыплате;

КонецФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// См. ЗапретРедактированияРеквизитовОбъектовПереопределяемый.ПриОпределенииОбъектовСЗаблокированнымиРеквизитами.
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт
	
	БлокируемыеРеквизиты = Новый Массив;
	
	Если ОбщегоНазначенияБККлиентСервер.ЭтоПростаяВерсияКонфигурации() Тогда
		БлокируемыеРеквизиты.Добавить("Дата");
		БлокируемыеРеквизиты.Добавить("Номер");
		БлокируемыеРеквизиты.Добавить("ВалютаДокумента");
		БлокируемыеРеквизиты.Добавить("ДокументОснование");
		БлокируемыеРеквизиты.Добавить("Контрагент");
		БлокируемыеРеквизиты.Добавить("ДоговорКонтрагента");
		БлокируемыеРеквизиты.Добавить("КратностьДокумента");
		БлокируемыеРеквизиты.Добавить("КурсДокумента");
		БлокируемыеРеквизиты.Добавить("Организация; СтруктурноеПодразделениеОрганизация");
		БлокируемыеРеквизиты.Добавить("ФизЛицо");
		БлокируемыеРеквизиты.Добавить("СуммаДокумента");
		БлокируемыеРеквизиты.Добавить("СтруктурноеПодразделение");
		
		// таб. часть ВыданныеАвансы
		БлокируемыеРеквизиты.Добавить("ВыданныеАвансы");
		БлокируемыеРеквизиты.Добавить("ВыданныеАвансы.Документ; ВыданныеАвансыДокумент");
		БлокируемыеРеквизиты.Добавить("ВыданныеАвансы.Сумма; ВыданныеАвансыСумма");

		// таб. часть Товары
		БлокируемыеРеквизиты.Добавить("Товары; ТоварыПодборТовары, ТоварыТоварыВсегдаДобавлять");
		БлокируемыеРеквизиты.Добавить("Товары.Номенклатура; ТоварыНоменклатура");
		БлокируемыеРеквизиты.Добавить("Товары.Поставщик; ТоварыПоставщик");
		БлокируемыеРеквизиты.Добавить("Товары.ЕдиницаИзмерения; ТоварыЕдиницаИзмерения");
		БлокируемыеРеквизиты.Добавить("Товары.Коэффициент; ТоварыКоэффициент");
		БлокируемыеРеквизиты.Добавить("Товары.Количество; ТоварыКоличество");
		БлокируемыеРеквизиты.Добавить("Товары.Сумма; ТоварыСумма");
		БлокируемыеРеквизиты.Добавить("Товары.Цена; ТоварыЦена");
		БлокируемыеРеквизиты.Добавить("Товары.СтавкаНДС; ТоварыСтавкаНДС");
		БлокируемыеРеквизиты.Добавить("Товары.СуммаНДС; ТоварыСуммаНДС");
		БлокируемыеРеквизиты.Добавить("Товары.ДатаСФ; ТоварыСуммаНДС");
		БлокируемыеРеквизиты.Добавить("Товары.НомерСФ; ТоварыНомерСФ");
		БлокируемыеРеквизиты.Добавить("Товары.ПредъявленСФ; ТоварыПредъявленСФ"); 
		БлокируемыеРеквизиты.Добавить("Товары.НомерГТД; ТоварыНомерГТД"); 
		
		// таб. часть ОплатаПоставщикам
		БлокируемыеРеквизиты.Добавить("ОплатаПоставщикам; ОплатаПоставщикамПодборОплата");
		БлокируемыеРеквизиты.Добавить("ОплатаПоставщикам.Контрагент; ОплатаПоставщикамКонтрагент");
		БлокируемыеРеквизиты.Добавить("ОплатаПоставщикам.ДоговорКонтрагента; ОплатаПоставщикамДоговорКонтрагента");
		БлокируемыеРеквизиты.Добавить("ОплатаПоставщикам.СуммаВзаиморасчетов; ОплатаПоставщикамСуммаВзаиморасчетов");
		БлокируемыеРеквизиты.Добавить("ОплатаПоставщикам.КурсВзаиморасчетов; ОплатаПоставщикамКурсВзаиморасчетов");
		БлокируемыеРеквизиты.Добавить("ОплатаПоставщикам.КратностьВзаиморасчетов; ОплатаПоставщикамКратностьВзаиморасчетов");
		БлокируемыеРеквизиты.Добавить("ОплатаПоставщикам.Сумма; ОплатаПоставщикамСумма");

				
		// таб. часть ВыплатаЗаработнойПлаты
		БлокируемыеРеквизиты.Добавить("ВыплатаЗаработнойПлаты");
		БлокируемыеРеквизиты.Добавить("ВыплатаЗаработнойПлаты.Ведомость; ВыплатаЗаработнойПлатыВедомость");
		БлокируемыеРеквизиты.Добавить("ВыплатаЗаработнойПлаты.СуммаКВыплате; ВыплатаЗаработнойПлатыСуммаКВыплате"); 
		
		// таб. часть ОплатаПоИсполнительнымЛистам
		БлокируемыеРеквизиты.Добавить("ОплатаПоИсполнительнымЛистам");
		БлокируемыеРеквизиты.Добавить("ОплатаПоИсполнительнымЛистам.Документ; ОплатаПоИсполнительнымЛистамДокумент");
		БлокируемыеРеквизиты.Добавить("ОплатаПоИсполнительнымЛистам.СуммаКОплате; ОплатаПоИсполнительнымЛистамуммаСуммаКОплате"); 
		БлокируемыеРеквизиты.Добавить("ОплатаПоИсполнительнымЛистам.СуммаСборов; ОплатаПоИсполнительнымЛистамуммаСуммаСборов"); 
		БлокируемыеРеквизиты.Добавить("ОплатаПоИсполнительнымЛистам.СуммаПлатежа; ОплатаПоИсполнительнымЛистамуммаСуммаПлатежа"); 
		
		// таб. часть ПеречислениеПенсионныхВзносов
		БлокируемыеРеквизиты.Добавить("ПеречислениеПенсионныхВзносов");
		БлокируемыеРеквизиты.Добавить("ПеречислениеПенсионныхВзносов.Документ; ПеречислениеПенсионныхВзносовДокумент");
		БлокируемыеРеквизиты.Добавить("ПеречислениеПенсионныхВзносов.Сумма; ПеречислениеПенсионныхВзносовСумма");
		
		// таб. часть ПеречислениеСоциальныхОтчислений
		БлокируемыеРеквизиты.Добавить("ПеречислениеСоциальныхОтчислений");
		БлокируемыеРеквизиты.Добавить("ПеречислениеСоциальныхОтчислений.Документ; ПеречислениеСоциальныхОтчисленийДокумент");
		БлокируемыеРеквизиты.Добавить("ПеречислениеСоциальныхОтчислений.Сумма; ПеречислениеСоциальныхОтчисленийСумма");
		
		// таб. часть Прочее
		БлокируемыеРеквизиты.Добавить("Прочее");
		БлокируемыеРеквизиты.Добавить("Прочее.Номенклатура; ПрочееНоменклатура");
		БлокируемыеРеквизиты.Добавить("Прочее.Поставщик; ПрочееПоставщик");
		БлокируемыеРеквизиты.Добавить("Прочее.Сумма; ПрочееСумма");
		БлокируемыеРеквизиты.Добавить("Прочее.СтавкаНДС; ПрочееСтавкаНДС");
		БлокируемыеРеквизиты.Добавить("Прочее.СуммаНДС; ПрочееСуммаНДС");
		БлокируемыеРеквизиты.Добавить("Прочее.ДатаСФ; ПрочееСуммаНДС");
		БлокируемыеРеквизиты.Добавить("Прочее.НомерСФ; ПрочееНомерСФ");
		БлокируемыеРеквизиты.Добавить("Прочее.ПредъявленСФ; ПрочееПредъявленСФ");
		 
	КонецЕсли;
	
	Возврат БлокируемыеРеквизиты;
	
КонецФункции

// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Заполнение

Процедура ЗаполнитьПоДокументуОснованию(Объект, ДокументОснование) Экспорт
	
	ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(Объект, ДокументОснование);
	
	Объект.ДокументОснование = ДокументОснование;
	
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ЗарплатаКВыплатеОрганизаций") Тогда
	
		// выплата заработной платы всегда в валюте регл. учета
		Объект.ВалютаДокумента      = ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
		
		НоваяСтрока 				= Объект.ВыплатаЗаработнойПлаты.Добавить();
		НоваяСтрока.Ведомость 		= ДокументОснование;
		НоваяСтрока.СуммаКВыплате	= ПолучитьСуммуКВыплатеЗарплатыПоВедомости(Объект.Ссылка, ДокументОснование);
	
	ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ИЛПеречислениеПолучателям") Тогда
		
		// оплата по испол. листам всегда в валюте регл. учета
		Объект.ВалютаДокумента      = Константы.ВалютаРегламентированногоУчета.Получить();
		
		НоваяСтрока 				= Объект.ОплатаПоИсполнительнымЛистам.Добавить();
		НоваяСтрока.Документ 		= ДокументОснование;
		НоваяСтрока.СуммаКОплате	= ДокументОснование.ИсполнительныеЛисты.Итог("СуммаВзаиморасчетов");
		НоваяСтрока.СуммаСборов		= ДокументОснование.ИсполнительныеЛисты.Итог("СуммаСборов");
		НоваяСтрока.СуммаПлатежа	= ДокументОснование.ИсполнительныеЛисты.Итог("СуммаПлатежа");
		
	ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ОПВПеречислениеВФонды") Тогда
		
		// оплата ОПВПеречислениеВФонды всегда в валюте регл. учета
		Объект.ВалютаДокумента      = Константы.ВалютаРегламентированногоУчета.Получить();
		
		СтруктураКурсаДокумента 	= ОбщегоНазначенияБК.ПолучитьКурсВалюты(Объект.ВалютаДокумента, Объект.Дата);
		Объект.КурсДокумента      	= СтруктураКурсаДокумента.Курс;
		Объект.КратностьДокумента 	= СтруктураКурсаДокумента.Кратность;
		
		НоваяСтрока 				= Объект.ПеречислениеПенсионныхВзносов.Добавить();
		НоваяСтрока.Документ 		= ДокументОснование;
		НоваяСтрока.Сумма			= ДокументОснование.ПенсионныеВзносы.Итог("Сумма");

	ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.СОПеречислениеВФонды") Тогда
		
		// оплата СОПеречислениеВФонды всегда в валюте регл. учета
		Объект.ВалютаДокумента      = Константы.ВалютаРегламентированногоУчета.Получить();
		
		СтруктураКурсаДокумента 	= ОбщегоНазначенияБК.ПолучитьКурсВалюты(Объект.ВалютаДокумента, Объект.Дата);
		Объект.КурсДокумента      	= СтруктураКурсаДокумента.Курс;
		Объект.КратностьДокумента 	= СтруктураКурсаДокумента.Кратность;
		
		НоваяСтрока 				= Объект.ПеречислениеСоциальныхОтчислений.Добавить();
		НоваяСтрока.Документ 		= ДокументОснование;
		НоваяСтрока.Сумма			= ДокументОснование.СоциальныеОтчисления.Итог("Сумма");

	КонецЕсли;
	
	СчетаУчетаВДокументах.ЗаполнитьПередОтображениемПользователю(Объект);

КонецПроцедуры   

////////////////////////////////////////////////////////////////////////////////
// Проведение

Функция ПодготовитьПараметрыПроведения(ДокументСсылка, Отказ) Экспорт
	
	ПараметрыПроведения = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета",	Константы.ВалютаРегламентированногоУчета.Получить());
	
	НомераТаблиц = Новый Структура;
	
	Запрос.Текст = ТекстЗапросаРеквизитыДокумента(НомераТаблиц);
	Результат = Запрос.ВыполнитьПакет();
	ТаблицаРеквизиты = Результат[НомераТаблиц["Реквизиты"]].Выгрузить();
	ПараметрыПроведения.Вставить("Реквизиты", ТаблицаРеквизиты);
	
	Реквизиты = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ТаблицаРеквизиты[0]);
	
	Если НЕ УчетнаяПолитикаСервер.Существует(Реквизиты.Организация, Реквизиты.Период, "БУ", Истина, ДокументСсылка)
		ИЛИ НЕ УчетнаяПолитикаСервер.Существует(Реквизиты.Организация, Реквизиты.Период, "НУ", Истина, ДокументСсылка) Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат ПараметрыПроведения;
	КонецЕсли;
	
	Реквизиты.Вставить("РасчетыВВалюте", Реквизиты.ВалютаВзаиморасчетов <> Реквизиты.ВалютаРегламентированногоУчета);
	Запрос.УстановитьПараметр("РасчетыВВалюте",  Реквизиты.РасчетыВВалюте);
	
	Если Реквизиты.РасчетыВВалюте Тогда
		ПодготовитьТаблицыДокументаРасчетыВВалюте(Запрос, Реквизиты);
	Иначе
		Запрос.Текст = ТекстЗапросаВременныеТаблицыДокумента(НомераТаблиц, Реквизиты);
		Если НЕ ПустаяСтрока(Запрос.Текст) Тогда 
			Результат    = Запрос.ВыполнитьПакет();
		КонецЕсли;
	КонецЕсли;
	
	ОрганизацияПлательщикНалогаНаПрибыль 			= ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период);
	ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль 	= ОрганизацияПлательщикНалогаНаПрибыль И ПроцедурыНалоговогоУчета.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль(Реквизиты.Организация, Реквизиты.Период);
	
	НеобходимостьОтраженияВНУ 						= ОрганизацияПлательщикНалогаНаПрибыль И Реквизиты.УчитыватьКПН И (ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль ИЛИ Реквизиты.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ);
	ВедениеУчетаВременныхРазницБалансовымМетодом    = УчетнаяПолитикаСервер.ВедетсяУчетВременныхРазницБалансовымМетодом(Реквизиты.Организация, Реквизиты.Период);
	
	Реквизиты.Вставить("ОрганизацияПлательщикНалогаНаПрибыль", 			 ОрганизацияПлательщикНалогаНаПрибыль);
	Реквизиты.Вставить("ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль", ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль);
	Реквизиты.Вставить("НеобходимостьОтраженияВНУ", 					 НеобходимостьОтраженияВНУ);
	Реквизиты.Вставить("ВедениеУчетаВременныхРазницБалансовымМетодом", 	 ВедениеУчетаВременныхРазницБалансовымМетодом);
	
	ПараметрыПроведения.Реквизиты.ЗаполнитьЗначения(НеобходимостьОтраженияВНУ,  				    "НеобходимостьОтраженияВНУ");
	ПараметрыПроведения.Реквизиты.ЗаполнитьЗначения(ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль, "ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль");
	ПараметрыПроведения.Реквизиты.ЗаполнитьЗначения(ВедениеУчетаВременныхРазницБалансовымМетодом,   "ВедениеУчетаВременныхРазницБалансовымМетодом");
	
	Налогоплательщик = Реквизиты.Организация;
	Если ПолучитьФункциональнуюОпцию("ПоддержкаРаботыСоСтруктурнымиПодразделениями")  Тогда
		Налогоплательщик = ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(Реквизиты.СтруктурноеПодразделение,
									Реквизиты.Организация,
									Перечисления.РазделыНалоговогоУчета.НДС);
	КонецЕсли;	
	
	Реквизиты.Вставить("Налогоплательщик", Налогоплательщик);

	ПараметрыПроведения.Реквизиты.ЗаполнитьЗначения(Налогоплательщик, "Налогоплательщик");

	Если Реквизиты.ЕстьВыплатаЗаработнойПлаты ИЛИ
		 Реквизиты.ЕстьОплатаПоИсполнительнымЛистам ИЛИ
		 Реквизиты.ЕстьПеречислениеПенсионныхВзносов ИЛИ
		 Реквизиты.ЕстьПеречислениеПенсионныхВзносовРаботодателя ИЛИ
		 Реквизиты.ЕстьПеречислениеПрофессиональныхПенсионныхВзносов ИЛИ
		 Реквизиты.ЕстьПеречислениеСоциальныхОтчислений ИЛИ
		 Реквизиты.ЕстьПеречислениеВзносовОСМС ИЛИ
		 Реквизиты.ЕстьПеречислениеОтчисленийОСМС Тогда

		ПараметрыПроведения.Реквизиты.ЗаполнитьЗначения(ОбщегоНазначенияБК.ПолучитьПризнакВеденияУчетаПоСотрудникам(), "ВедениеУчетаПоСотрудникам");
		
		ПризнакиРаспределенияНалогов = УчетнаяПолитикаСервер.ПолучитьПризнакиРаспределенияНалогов(Реквизиты.Организация, Реквизиты.Дата);
		ПараметрыПроведения.Реквизиты.ЗаполнитьЗначения(ПризнакиРаспределенияНалогов.РаспределятьНалогиПоСтруктурнымЕдиницам, "РаспределятьНалогиПоСтруктурнымЕдиницам");
		ПараметрыПроведения.Реквизиты.ЗаполнитьЗначения(ПризнакиРаспределенияНалогов.РаспределятьНалогиПоПодразделениямОрганизаций, "РаспределятьНалогиПоПодразделениямОрганизаций");
		ПараметрыПроведения.Реквизиты.ЗаполнитьЗначения(ПолучитьФункциональнуюОпцию("ПоддержкаРаботыСоСтруктурнымиПодразделениями"), "ПоддержкаРаботыСоСтруктурнымиПодразделениями");	
	
		Запрос.УстановитьПараметр("Дата", Реквизиты.Дата);
	КонецЕсли;
		
	НомераТаблиц = Новый Структура;
	Запрос.Текст = ТекстЗапросаПоступлениеТоваров(НомераТаблиц, ПараметрыПроведения, Реквизиты)
					+ ТекстЗапросаПоступлениеПрочее(НомераТаблиц, ПараметрыПроведения, Реквизиты)
					+ ТекстЗапросаПогашениеЗадолженности(НомераТаблиц, ПараметрыПроведения, Реквизиты)
					+ ТекстЗапросаНДС(НомераТаблиц, ПараметрыПроведения, Реквизиты)
					+ ТекстЗапросаПеречислениеЗП(НомераТаблиц, ПараметрыПроведения, Реквизиты)
					+ ТекстЗапросаПеречислениеОПВ(НомераТаблиц, ПараметрыПроведения, Реквизиты)
					+ ТекстЗапросаПеречислениеСО(НомераТаблиц, ПараметрыПроведения, Реквизиты)
					+ ТекстЗапросаПеречислениеПоИЛ(НомераТаблиц, ПараметрыПроведения, Реквизиты)
					+ ТекстЗапросаТоварыОрганизаций(НомераТаблиц, ПараметрыПроведения, Реквизиты); 
					
	КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка(); 
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("СинонимТовары",	      НСтр("ru = 'ТМЗ'"));
	Запрос.УстановитьПараметр("СинонимПрочее",	      НСтр("ru = 'Прочее'"));
	Запрос.УстановитьПараметр("СодержаниеТовары",     НСтр("ru = 'Оприходованы ТМЗ'", КодОсновногоЯзыка));
	Запрос.УстановитьПараметр("СодержаниеВыделенНДС", НСтр("ru = 'Выделен НДС'", КодОсновногоЯзыка));
	Запрос.УстановитьПараметр("НеобходимостьОтраженияВНУ",	НеобходимостьОтраженияВНУ);
	Запрос.УстановитьПараметр("ВедениеУчетаВременныхРазницБалансовымМетодом",	ВедениеУчетаВременныхРазницБалансовымМетодом);
	Запрос.УстановитьПараметр("СодержаниеПоУмолчанию", НСтр("ru = 'Оплата'", КодОсновногоЯзыка));

	Если НЕ ПустаяСтрока(Запрос.Текст) Тогда 
		Результат = Запрос.ВыполнитьПакет();
		Для Каждого НомерТаблицы Из НомераТаблиц Цикл
			ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат[НомерТаблицы.Значение].Выгрузить());
		КонецЦикла;
	КонецЕсли;
	
	Возврат ПараметрыПроведения;

КонецФункции 

Функция ТекстЗапросаРеквизитыДокумента(НомераТаблиц)
	
	НомераТаблиц.Вставить("ВременнаяТаблицаСоставДокумента", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВременнаяТаблицаРеквизиты", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("Реквизиты", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	МАКСИМУМ(СоставДокумента.ЕстьВыданныеАвансы) КАК ЕстьВыданныеАвансы,
	|	МАКСИМУМ(СоставДокумента.ЕстьТовары) КАК ЕстьТовары,
	|	МАКСИМУМ(СоставДокумента.ЕстьОплатаПоставщикам) КАК ЕстьОплатаПоставщикам,
	|	МАКСИМУМ(СоставДокумента.ЕстьВыплатаЗаработнойПлаты) КАК ЕстьВыплатаЗаработнойПлаты,
	|	МАКСИМУМ(СоставДокумента.ЕстьОплатаПоИсполнительнымЛистам) КАК ЕстьОплатаПоИсполнительнымЛистам,
	|	МАКСИМУМ(СоставДокумента.ЕстьПеречислениеПенсионныхВзносов) КАК ЕстьПеречислениеПенсионныхВзносов,
	|	МАКСИМУМ(СоставДокумента.ЕстьПеречислениеПенсионныхВзносовРаботодателя) КАК ЕстьПеречислениеПенсионныхВзносовРаботодателя,
	|	МАКСИМУМ(СоставДокумента.ЕстьПеречислениеПрофессиональныхПенсионныхВзносов) КАК ЕстьПеречислениеПрофессиональныхПенсионныхВзносов,
	|	МАКСИМУМ(СоставДокумента.ЕстьПеречислениеСоциальныхОтчислений) КАК ЕстьПеречислениеСоциальныхОтчислений,
	|	МАКСИМУМ(СоставДокумента.ЕстьПеречислениеВзносовОСМС) КАК ЕстьПеречислениеВзносовОСМС,
	|	МАКСИМУМ(СоставДокумента.ЕстьПеречислениеОтчисленийОСМС) КАК ЕстьПеречислениеОтчисленийОСМС,
	|	МАКСИМУМ(СоставДокумента.ЕстьПрочее) КАК ЕстьПрочее
	|ПОМЕСТИТЬ СоставДокумента
	|ИЗ
	|	(ВЫБРАТЬ ПЕРВЫЕ 1
	|		ИСТИНА КАК ЕстьВыданныеАвансы,
	|		ЛОЖЬ КАК ЕстьТовары,
	|		ЛОЖЬ КАК ЕстьОплатаПоставщикам,
	|		ЛОЖЬ КАК ЕстьВыплатаЗаработнойПлаты,
	|		ЛОЖЬ КАК ЕстьОплатаПоИсполнительнымЛистам,
	|		ЛОЖЬ КАК ЕстьПеречислениеПенсионныхВзносов,
	|		ЛОЖЬ КАК ЕстьПеречислениеПенсионныхВзносовРаботодателя,
	|		ЛОЖЬ КАК ЕстьПеречислениеПрофессиональныхПенсионныхВзносов,
	|		ЛОЖЬ КАК ЕстьПеречислениеСоциальныхОтчислений,
	|		ЛОЖЬ КАК ЕстьПеречислениеВзносовОСМС,
	|		ЛОЖЬ КАК ЕстьПеречислениеОтчисленийОСМС,
	|		ЛОЖЬ КАК ЕстьПрочее
	|	ИЗ
	|		Документ.АвансовыйОтчет.ВыданныеАвансы КАК ТаблицаДокумента
	|	ГДЕ
	|		ТаблицаДокумента.Ссылка = &Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ ПЕРВЫЕ 1
	|		ЛОЖЬ,
	|		ИСТИНА,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ
	|	ИЗ
	|		Документ.АвансовыйОтчет.Товары КАК ТаблицаДокумента
	|	ГДЕ
	|		ТаблицаДокумента.Ссылка = &Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ ПЕРВЫЕ 1
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ИСТИНА,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ
	|	ИЗ
	|		Документ.АвансовыйОтчет.ОплатаПоставщикам КАК ТаблицаДокумента
	|	ГДЕ
	|		ТаблицаДокумента.Ссылка = &Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ ПЕРВЫЕ 1
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ИСТИНА,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ
	|	ИЗ
	|		Документ.АвансовыйОтчет.ВыплатаЗаработнойПлаты КАК ТаблицаДокумента
	|	ГДЕ
	|		ТаблицаДокумента.Ссылка = &Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ ПЕРВЫЕ 1
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ИСТИНА,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ
	|	ИЗ
	|		Документ.АвансовыйОтчет.ОплатаПоИсполнительнымЛистам КАК ТаблицаДокумента
	|	ГДЕ
	|		ТаблицаДокумента.Ссылка = &Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ ПЕРВЫЕ 1
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ИСТИНА,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ
	|	ИЗ
	|		Документ.АвансовыйОтчет.ПеречислениеПенсионныхВзносов КАК ТаблицаДокумента
	|	ГДЕ
	|		ТаблицаДокумента.Ссылка = &Ссылка
	|		И ТаблицаДокумента.Документ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийОПВПеречислениеВФонды.ПеречислениеОбязательныхПенсионныхВзносов)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ ПЕРВЫЕ 1
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ИСТИНА,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ
	|	ИЗ
	|		Документ.АвансовыйОтчет.ПеречислениеПенсионныхВзносов КАК ТаблицаДокумента
	|	ГДЕ
	|		ТаблицаДокумента.Ссылка = &Ссылка
	|		И ТаблицаДокумента.Документ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийОПВПеречислениеВФонды.ПеречислениеОбязательныхПенсионныхВзносовРаботодателя)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ ПЕРВЫЕ 1
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ИСТИНА,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ
	|	ИЗ
	|		Документ.АвансовыйОтчет.ПеречислениеПенсионныхВзносов КАК ТаблицаДокумента
	|	ГДЕ
	|		ТаблицаДокумента.Ссылка = &Ссылка
	|		И ТаблицаДокумента.Документ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийОПВПеречислениеВФонды.ПеречислениеОбязательныхПрофессиональныхПенсионныхВзносов)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ ПЕРВЫЕ 1
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ИСТИНА,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ
	|	ИЗ
	|		Документ.АвансовыйОтчет.ПеречислениеСоциальныхОтчислений КАК ТаблицаДокумента
	|	ГДЕ
	|		ТаблицаДокумента.Ссылка = &Ссылка
	|		И ТаблицаДокумента.Документ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСОПеречислениеВФонды.ПеречислениеОбязательныхСоциальныхОтчислений)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ ПЕРВЫЕ 1
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ИСТИНА,
	|		ЛОЖЬ,
	|		ЛОЖЬ
	|	ИЗ
	|		Документ.АвансовыйОтчет.ПеречислениеСоциальныхОтчислений КАК ТаблицаДокумента
	|	ГДЕ
	|		ТаблицаДокумента.Ссылка = &Ссылка
	|		И ТаблицаДокумента.Документ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСОПеречислениеВФонды.ПеречислениеВзносовОСМС)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ ПЕРВЫЕ 1
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ИСТИНА,
	|		ЛОЖЬ
	|	ИЗ
	|		Документ.АвансовыйОтчет.ПеречислениеСоциальныхОтчислений КАК ТаблицаДокумента
	|	ГДЕ
	|		ТаблицаДокумента.Ссылка = &Ссылка
	|		И ТаблицаДокумента.Документ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСОПеречислениеВФонды.ПеречислениеОтчисленийОСМС)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ ПЕРВЫЕ 1
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ИСТИНА
	|	ИЗ
	|		Документ.АвансовыйОтчет.Прочее КАК ТаблицаДокумента
	|	ГДЕ
	|		ТаблицаДокумента.Ссылка = &Ссылка) КАК СоставДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Ссылка,
	|	Реквизиты.Дата КАК Дата,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.Организация КАК Налогоплательщик,
	|	Реквизиты.СтруктурноеПодразделение,
	|	ВЫБОР
	|		КОГДА Реквизиты.Организация.ГоловнаяОрганизация ЕСТЬ NULL 
	|				ИЛИ Реквизиты.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА Реквизиты.Организация
	|		ИНАЧЕ Реквизиты.Организация.ГоловнаяОрганизация
	|	КОНЕЦ КАК ГоловнаяОрганизация,
	|	Реквизиты.УчитыватьКПН,
	|	Реквизиты.ВидУчетаНУ,
	|	Реквизиты.ФизЛицо КАК ПодотчетноеЛицо,
	|	Реквизиты.Склад,
	|	Реквизиты.СчетРасчетовСПодотчетнымЛицом,
	|	Реквизиты.УчитыватьНДС,
	|	Реквизиты.СуммаВключаетНДС,
	|	Реквизиты.НДСВключенВСтоимость,
	|	Реквизиты.КурсДокумента,
	|	Реквизиты.КратностьДокумента,
	|	Реквизиты.ВалютаДокумента,
	|	&ВалютаРегламентированногоУчета КАК ВалютаРегламентированногоУчета,
	|	ЛОЖЬ КАК ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль,
	|	ЛОЖЬ КАК ВедениеУчетаВременныхРазницБалансовымМетодом,
	|	ЛОЖЬ КАК НеобходимостьОтраженияВНУ,
	|	ЛОЖЬ КАК ВедениеУчетаПоСотрудникам,
	|	ЛОЖЬ КАК РаспределятьНалогиПоСтруктурнымЕдиницам,
	|	ЛОЖЬ КАК РаспределятьНалогиПоПодразделениямОрганизаций,
	|	ЛОЖЬ КАК ПоддержкаРаботыСоСтруктурнымиПодразделениями,
	|	ЛОЖЬ КАК ПорядокСписанияЗадолженностиПоЗарплате,
	|	Реквизиты.ОтложитьПринятиеНДСКЗачету
	|ПОМЕСТИТЬ Реквизиты
	|ИЗ
	|	Документ.АвансовыйОтчет КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Дата КАК Дата,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.Организация КАК Налогоплательщик,
	|	Реквизиты.СтруктурноеПодразделение,
	|	ВЫБОР
	|		КОГДА Реквизиты.Организация.ГоловнаяОрганизация ЕСТЬ NULL 
	|				ИЛИ Реквизиты.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА Реквизиты.Организация
	|		ИНАЧЕ Реквизиты.Организация.ГоловнаяОрганизация
	|	КОНЕЦ КАК ГоловнаяОрганизация,
	|	Реквизиты.УчитыватьКПН,
	|	Реквизиты.ВидУчетаНУ,
	|	Реквизиты.ПодотчетноеЛицо,
	|	Реквизиты.Склад,
	|	Реквизиты.СчетРасчетовСПодотчетнымЛицом,
	|	Реквизиты.УчитыватьНДС,
	|	Реквизиты.СуммаВключаетНДС,
	|	Реквизиты.НДСВключенВСтоимость,
	|	Реквизиты.КурсДокумента КАК КурсВзаиморасчетов,
	|	Реквизиты.КратностьДокумента КАК КратностьВзаиморасчетов,
	|	Реквизиты.ВалютаДокумента КАК ВалютаВзаиморасчетов,
	|	Реквизиты.ВалютаДокумента,
	|	Реквизиты.ВалютаРегламентированногоУчета КАК ВалютаРегламентированногоУчета,
	|	Реквизиты.НеобходимостьОтраженияВНУ КАК НеобходимостьОтраженияВНУ,
	|	Реквизиты.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль КАК ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль,
	|	Реквизиты.ВедениеУчетаВременныхРазницБалансовымМетодом КАК ВедениеУчетаВременныхРазницБалансовымМетодом,
	|	Реквизиты.ВедениеУчетаПоСотрудникам КАК ВедениеУчетаПоСотрудникам,
	|	Реквизиты.РаспределятьНалогиПоСтруктурнымЕдиницам КАК РаспределятьНалогиПоСтруктурнымЕдиницам,
	|	Реквизиты.РаспределятьНалогиПоПодразделениямОрганизаций КАК РаспределятьНалогиПоПодразделениямОрганизаций,
	|	Реквизиты.ПоддержкаРаботыСоСтруктурнымиПодразделениями КАК ПоддержкаРаботыСоСтруктурнымиПодразделениями,
	|	Реквизиты.ПорядокСписанияЗадолженностиПоЗарплате КАК ПорядокСписанияЗадолженностиПоЗарплате,
	|	ЕСТЬNULL(СоставДокумента.ЕстьВыданныеАвансы, ЛОЖЬ) КАК ЕстьВыданныеАвансы,
	|	ЕСТЬNULL(СоставДокумента.ЕстьТовары, ЛОЖЬ) КАК ЕстьТовары,
	|	ЕСТЬNULL(СоставДокумента.ЕстьОплатаПоставщикам, ЛОЖЬ) КАК ЕстьОплатаПоставщикам,
	|	ЕСТЬNULL(СоставДокумента.ЕстьВыплатаЗаработнойПлаты, ЛОЖЬ) КАК ЕстьВыплатаЗаработнойПлаты,
	|	ЕСТЬNULL(СоставДокумента.ЕстьОплатаПоИсполнительнымЛистам, ЛОЖЬ) КАК ЕстьОплатаПоИсполнительнымЛистам,
	|	ЕСТЬNULL(СоставДокумента.ЕстьПеречислениеПенсионныхВзносов, ЛОЖЬ) КАК ЕстьПеречислениеПенсионныхВзносов,
	|	ЕСТЬNULL(СоставДокумента.ЕстьПеречислениеПенсионныхВзносовРаботодателя, ЛОЖЬ) КАК ЕстьПеречислениеПенсионныхВзносовРаботодателя,
	|	ЕСТЬNULL(СоставДокумента.ЕстьПеречислениеПрофессиональныхПенсионныхВзносов, ЛОЖЬ) КАК ЕстьПеречислениеПрофессиональныхПенсионныхВзносов,
	|	ЕСТЬNULL(СоставДокумента.ЕстьПеречислениеСоциальныхОтчислений, ЛОЖЬ) КАК ЕстьПеречислениеСоциальныхОтчислений,
	|	ЕСТЬNULL(СоставДокумента.ЕстьПеречислениеВзносовОСМС, ЛОЖЬ) КАК ЕстьПеречислениеВзносовОСМС,
	|	ЕСТЬNULL(СоставДокумента.ЕстьПеречислениеОтчисленийОСМС, ЛОЖЬ) КАК ЕстьПеречислениеОтчисленийОСМС,
	|	ЕСТЬNULL(СоставДокумента.ЕстьПрочее, ЛОЖЬ) КАК ЕстьПрочее,
	|	Реквизиты.ОтложитьПринятиеНДСКЗачету
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|		ЛЕВОЕ СОЕДИНЕНИЕ СоставДокумента КАК СоставДокумента
	|		ПО (ИСТИНА)";

	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаВременныеТаблицыДокумента(НомераТаблиц, Реквизиты)

	ТекстЗапроса = "";
	
	Если Реквизиты.ЕстьТовары Тогда 
		НомераТаблиц.Вставить("ВременнаяТаблицаТовары", НомераТаблиц.Количество());
		
		ТекстЗапроса = ТекстЗапроса + 
		"ВЫБРАТЬ
		|	ТаблицаТовары.Ссылка,
		|	ТаблицаТовары.НомерСтроки,
		|	ТаблицаТовары.Номенклатура,
		|	ТаблицаТовары.Количество * ТаблицаТовары.Коэффициент КАК Количество,
		|	 ТаблицаТовары.Сумма - ВЫБОР
		|			КОГДА Реквизиты.СуммаВключаетНДС
		|				ТОГДА ТаблицаТовары.СуммаНДС
		|			ИНАЧЕ 0
		|		КОНЕЦ + ВЫБОР
		|			КОГДА Реквизиты.НДСВключенВСтоимость
		|				ТОГДА ТаблицаТовары.СуммаНДС
		|			КОГДА ЕСТЬNULL(Типовой.Забалансовый, ЛОЖЬ)
		|					И НЕ Реквизиты.НДСВключенВСтоимость
		|				ТОГДА ТаблицаТовары.СуммаНДС
		|			ИНАЧЕ 0
		|	КОНЕЦ КАК Сумма,
		|	 ТаблицаТовары.Сумма - ВЫБОР
		|			КОГДА Реквизиты.СуммаВключаетНДС
		|				ТОГДА ТаблицаТовары.СуммаНДС
		|			ИНАЧЕ 0
		|		КОНЕЦ + ВЫБОР
		|			КОГДА Реквизиты.НДСВключенВСтоимость
		|				ТОГДА ТаблицаТовары.СуммаНДС
		|			КОГДА ЕСТЬNULL(Типовой.Забалансовый, ЛОЖЬ)
		|					И НЕ Реквизиты.НДСВключенВСтоимость
		|				ТОГДА ТаблицаТовары.СуммаНДС
		|			ИНАЧЕ 0
		|	КОНЕЦ КАК СуммаВзаиморасчетов,
		|	ТаблицаТовары.СуммаНДС КАК СуммаНДС,
		|	ТаблицаТовары.СуммаНДС КАК СуммаНДСВзаиморасчетов,
		|	ТаблицаТовары.СтавкаНДС,
		|	ТаблицаТовары.СчетУчетаБУ,
		|	ТаблицаТовары.СчетУчетаНУ,
		|	ТаблицаТовары.СчетУчетаНДС,
		|	ТаблицаТовары.НДСВидОборота,
		|	ТаблицаТовары.НДСВидПоступления,
		|	ЕСТЬNULL(Типовой.Забалансовый, ЛОЖЬ) КАК СчетУчетаБУЗабалансовый,
		|	ТаблицаТовары.Поставщик КАК Контрагент,
		|	ТаблицаТовары.СчетФактура,
		|	ТаблицаТовары.ВидВходящегоДокумента,
		|	ТаблицаТовары.НомерВходящегоДокумента,
		|	ТаблицаТовары.ДатаВходящегоДокумента,
		|	ТаблицаТовары.НомерГТД
		|ПОМЕСТИТЬ ТаблицаТовары
		|ИЗ
		|	Документ.АвансовыйОтчет.Товары КАК ТаблицаТовары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО ТаблицаТовары.Ссылка = Реквизиты.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Типовой КАК Типовой
		|		ПО ТаблицаТовары.СчетУчетаБУ = Типовой.Ссылка"
		+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	КонецЕсли;
	
	Если Реквизиты.ЕстьОплатаПоставщикам Тогда 
		НомераТаблиц.Вставить("ВременнаяТаблицаОплатаПоставщикам", НомераТаблиц.Количество());
		
		ТекстЗапроса = ТекстЗапроса + 
		"ВЫБРАТЬ
		|	ТаблицаОплатаПоставщикам.Ссылка,
		|	ТаблицаОплатаПоставщикам.НомерСтроки,
		|	ТаблицаОплатаПоставщикам.Контрагент,
		|	ТаблицаОплатаПоставщикам.ДоговорКонтрагента,
		|	ТаблицаОплатаПоставщикам.ДоговорКонтрагента.ВедениеВзаиморасчетов КАК ВедениеВзаиморасчетов,
		|	ТаблицаОплатаПоставщикам.ДоговорКонтрагента.ВидДоговора КАК ВидДоговора,
		|	ТаблицаОплатаПоставщикам.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
		|	ТаблицаОплатаПоставщикам.Сделка,
		|	ТаблицаОплатаПоставщикам.Сумма,
		|	ТаблицаОплатаПоставщикам.СуммаВзаиморасчетов,
		|	ТаблицаОплатаПоставщикам.КурсВзаиморасчетов,
		|	ТаблицаОплатаПоставщикам.КратностьВзаиморасчетов,
		|	ТаблицаОплатаПоставщикам.СчетУчетаРасчетовСКонтрагентом,
		|	ЕСТЬNULL(ТиповойСчетРасчетов.СчетНУ, ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ПоступлениеИВыбытиеИмуществаработУслугПрав)) КАК СчетУчетаРасчетовСКонтрагентомНУ,
		|	ТаблицаОплатаПоставщикам.СчетУчетаРасчетовПоАвансам,
		|	ТаблицаОплатаПоставщикам.ВидВходящегоДокумента,
		|	ТаблицаОплатаПоставщикам.НомерВходящегоДокумента,
		|	ТаблицаОплатаПоставщикам.ДатаВходящегоДокумента,
		|	Реквизиты.СчетРасчетовСПодотчетнымЛицом КАК СчетРасчетовСПодотчетнымЛицом,
		|	ЕСТЬNULL(Типовой.СчетНУ, ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ЗадолженностьПодотчетныхЛиц)) КАК СчетРасчетовСПодотчетнымЛицомНУ,
		|	Реквизиты.ПодотчетноеЛицо КАК ФизЛицо,
		|	ТаблицаОплатаПоставщикам.Содержание КАК Содержание,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыЗадолженностиПодотчетныхЛиц.ОплатаПоставщикам) КАК ВидЗадолженности,
		|	ВЫБОР
		|		КОГДА ТаблицаОплатаПоставщикам.ДоговорКонтрагента.ВалютаВзаиморасчетов = &ВалютаРегламентированногоУчета
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК РасчетыВВалюте
		|ПОМЕСТИТЬ ТаблицаОплатаПоставщикам
		|ИЗ
		|	Документ.АвансовыйОтчет.ОплатаПоставщикам КАК ТаблицаОплатаПоставщикам
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО ТаблицаОплатаПоставщикам.Ссылка = Реквизиты.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Типовой КАК Типовой
		|		ПО (Реквизиты.СчетРасчетовСПодотчетнымЛицом = Типовой.Ссылка)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Типовой КАК ТиповойСчетРасчетов
		|		ПО (ТаблицаОплатаПоставщикам.СчетУчетаРасчетовСКонтрагентом = Типовой.Ссылка)"
		+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	КонецЕсли;
	
	Если Реквизиты.ЕстьВыплатаЗаработнойПлаты Тогда 
		НомераТаблиц.Вставить("ВременнаяТаблицаВедомостиЗП", НомераТаблиц.Количество());
		
		ТекстЗапроса = ТекстЗапроса + 
		"ВЫБРАТЬ
		|	ТаблицаВыплатаЗаработнойПлаты.Ссылка,
		|	ТаблицаВыплатаЗаработнойПлаты.НомерСтроки,
		|	ТаблицаВыплатаЗаработнойПлаты.Ведомость
		|ПОМЕСТИТЬ ВедомостиЗП
		|ИЗ
		|	Документ.АвансовыйОтчет.ВыплатаЗаработнойПлаты КАК ТаблицаВыплатаЗаработнойПлаты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО ТаблицаВыплатаЗаработнойПлаты.Ссылка = Реквизиты.Ссылка"
		+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	КонецЕсли;
	
	Если Реквизиты.ЕстьОплатаПоИсполнительнымЛистам Тогда 
		НомераТаблиц.Вставить("ВременнаяТаблицаВедомостиПоИЛ", НомераТаблиц.Количество());
		
		ТекстЗапроса = ТекстЗапроса + 
		"ВЫБРАТЬ
		|	ТаблицаОплатаПоИсполнительнымЛистам.Ссылка,
		|	ТаблицаОплатаПоИсполнительнымЛистам.НомерСтроки,
		|	ТаблицаОплатаПоИсполнительнымЛистам.Документ КАК Ведомость
		|ПОМЕСТИТЬ ВедомостиПоИЛ
		|ИЗ
		|	Документ.АвансовыйОтчет.ОплатаПоИсполнительнымЛистам КАК ТаблицаОплатаПоИсполнительнымЛистам
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО ТаблицаОплатаПоИсполнительнымЛистам.Ссылка = Реквизиты.Ссылка"
		+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	КонецЕсли;
		
	Если Реквизиты.ЕстьПеречислениеПенсионныхВзносов ИЛИ Реквизиты.ЕстьПеречислениеПенсионныхВзносовРаботодателя ИЛИ Реквизиты.ЕстьПеречислениеПрофессиональныхПенсионныхВзносов Тогда 
		НомераТаблиц.Вставить("ВременнаяТаблицаВедомостиОПВ", НомераТаблиц.Количество());
		
		ТекстЗапроса = ТекстЗапроса + 
		"ВЫБРАТЬ
		|	ТаблицаПеречислениеПенсионныхВзносов.Ссылка,
		|	ТаблицаПеречислениеПенсионныхВзносов.НомерСтроки,
		|	ТаблицаПеречислениеПенсионныхВзносов.Документ КАК Ведомость
		|ПОМЕСТИТЬ ВедомостиОПВ
		|ИЗ
		|	Документ.АвансовыйОтчет.ПеречислениеПенсионныхВзносов КАК ТаблицаПеречислениеПенсионныхВзносов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО ТаблицаПеречислениеПенсионныхВзносов.Ссылка = Реквизиты.Ссылка"
		+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	КонецЕсли;
	
	Если Реквизиты.ЕстьПеречислениеСоциальныхОтчислений
		ИЛИ Реквизиты.ЕстьПеречислениеВзносовОСМС
		ИЛИ Реквизиты.ЕстьПеречислениеОтчисленийОСМС Тогда 
		НомераТаблиц.Вставить("ВременнаяТаблицаВедомостиСО", НомераТаблиц.Количество());
		
		ТекстЗапроса = ТекстЗапроса + 
		"ВЫБРАТЬ
		|	ТаблицаПеречислениеСоциальныхОтчислений.Ссылка,
		|	ТаблицаПеречислениеСоциальныхОтчислений.НомерСтроки,
		|	ТаблицаПеречислениеСоциальныхОтчислений.Документ КАК Ведомость
		|ПОМЕСТИТЬ ВедомостиСО
		|ИЗ
		|	Документ.АвансовыйОтчет.ПеречислениеСоциальныхОтчислений КАК ТаблицаПеречислениеСоциальныхОтчислений
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО ТаблицаПеречислениеСоциальныхОтчислений.Ссылка = Реквизиты.Ссылка"
		+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	КонецЕсли;
	
	Если Реквизиты.ЕстьПрочее Тогда 
		НомераТаблиц.Вставить("ВременнаяТаблицаПрочее", НомераТаблиц.Количество());
		
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	ТаблицаПрочее.Ссылка,
		|	ТаблицаПрочее.НомерСтроки,
		|	ТаблицаПрочее.Номенклатура,
		|	ТаблицаПрочее.Содержание,
		|	ТаблицаПрочее.Номенклатура.Услуга КАК ЭтоУслуга,
		|	ТаблицаПрочее.Поставщик КАК Контрагент,
		|	 ТаблицаПрочее.Сумма - ВЫБОР
		|			КОГДА Реквизиты.СуммаВключаетНДС
		|				ТОГДА ТаблицаПрочее.СуммаНДС
		|			ИНАЧЕ 0
		|		КОНЕЦ + ВЫБОР
		|			КОГДА Реквизиты.НДСВключенВСтоимость
		|				ТОГДА ТаблицаПрочее.СуммаНДС
		|			ИНАЧЕ 0
		|	КОНЕЦ КАК Сумма,
		|	 ТаблицаПрочее.Сумма - ВЫБОР
		|			КОГДА Реквизиты.СуммаВключаетНДС
		|				ТОГДА ТаблицаПрочее.СуммаНДС
		|			ИНАЧЕ 0
		|		КОНЕЦ + ВЫБОР
		|			КОГДА Реквизиты.НДСВключенВСтоимость
		|				ТОГДА ТаблицаПрочее.СуммаНДС
		|			ИНАЧЕ 0
		|	КОНЕЦ КАК СуммаВзаиморасчетов,
		|	ТаблицаПрочее.СуммаНДС,
		|	ТаблицаПрочее.СуммаНДС КАК СуммаНДСВзаиморасчетов,
		|	ТаблицаПрочее.СтавкаНДС,
		|	ТаблицаПрочее.СчетЗатратБУ,
		|	ТаблицаПрочее.СубконтоЗатратБУ1,
		|	ТаблицаПрочее.СубконтоЗатратБУ2,
		|	ТаблицаПрочее.СубконтоЗатратБУ3,
		|	ТаблицаПрочее.СчетЗатратНУ,
		|	ТаблицаПрочее.СубконтоЗатратНУ1,
		|	ТаблицаПрочее.СубконтоЗатратНУ2,
		|	ТаблицаПрочее.СубконтоЗатратНУ3,
		|	ТаблицаПрочее.СчетУчетаНДС,
		|	ТаблицаПрочее.НДСВидОборота,
		|	ТаблицаПрочее.НДСВидПоступления,
		|	ТаблицаПрочее.ВидЗадолженностиПодотчетногоЛица,
		|	ТаблицаПрочее.СчетФактура,
		|	ТаблицаПрочее.ВидВходящегоДокумента,
		|	ТаблицаПрочее.НомерВходящегоДокумента,
		|	ТаблицаПрочее.ДатаВходящегоДокумента
		|ПОМЕСТИТЬ ТаблицаПрочее
		|ИЗ
		|	Документ.АвансовыйОтчет.Прочее КАК ТаблицаПрочее
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО ТаблицаПрочее.Ссылка = Реквизиты.Ссылка
		|ГДЕ
		|	ТаблицаПрочее.Ссылка = &Ссылка"
		+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	КонецЕсли;

	Возврат ТекстЗапроса;

КонецФункции

Процедура ПодготовитьТаблицыДокументаРасчетыВВалюте(Запрос, Реквизиты)
	
	НомераТаблиц = Новый Структура;
	Запрос.Текст = ТекстЗапросаВременныеТаблицыДокументаРасчетыВВалюте(НомераТаблиц, Реквизиты);
	Если НЕ ПустаяСтрока(Запрос.Текст) Тогда
		Результат    = Запрос.ВыполнитьПакет();
	КонецЕсли;
	
	ТекстЗапроса = "";
	Если Реквизиты.ЕстьТовары Тогда
		СуммыТаблицыТовары = Результат[НомераТаблиц["СуммыТаблицыТовары"]].Выгрузить();
		УправлениеВзаиморасчетамиСервер.ПодготовитьТаблицуДокументаРасчетыВВалюте(СуммыТаблицыТовары, Реквизиты);
		Запрос.УстановитьПараметр("СуммыТаблицыТовары", СуммыТаблицыТовары);
		ТекстЗапроса = ТекстЗапроса + ТекстЗапросаРасчетыВВалютеТовары(НомераТаблиц, Реквизиты);
	КонецЕсли;
	
	Если Реквизиты.ЕстьПрочее Тогда
		СуммыТаблицыПрочее = Результат[НомераТаблиц["СуммыТаблицыПрочее"]].Выгрузить();
		УправлениеВзаиморасчетамиСервер.ПодготовитьТаблицуДокументаРасчетыВВалюте(СуммыТаблицыПрочее, Реквизиты);
		Запрос.УстановитьПараметр("СуммыТаблицыПрочее", СуммыТаблицыПрочее);
		ТекстЗапроса = ТекстЗапроса + ТекстЗапросаРасчетыВВалютеПрочее(НомераТаблиц, Реквизиты);
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	Если НЕ ПустаяСтрока(Запрос.Текст) Тогда
		Результат    = Запрос.ВыполнитьПакет();
	КонецЕсли;
	
КонецПроцедуры

Функция ТекстЗапросаВременныеТаблицыДокументаРасчетыВВалюте(НомераТаблиц, Реквизиты)

	ТекстЗапроса = ТекстЗапросаВременныеТаблицыДокумента(НомераТаблиц, Реквизиты);
	
	Если Реквизиты.ЕстьТовары Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПОМЕСТИТЬ ТаблицаТовары", "ПОМЕСТИТЬ ВременнаяТаблицаТовары");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаТовары.Ссылка = &Ссылка", "ТаблицаТовары.Ссылка = &Ссылка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|НомерСтроки");
		НомераТаблиц.Вставить("СуммыТаблицыТовары", НомераТаблиц.Количество());
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	ВременнаяТаблицаТовары.НомерСтроки,
		|	ВременнаяТаблицаТовары.СтавкаНДС,
		|	ВременнаяТаблицаТовары.СуммаВзаиморасчетов,
		|	ВременнаяТаблицаТовары.СуммаНДСВзаиморасчетов,
		|	ВременнаяТаблицаТовары.Сумма,
		|	ВременнаяТаблицаТовары.СуммаНДС,
		|	ВременнаяТаблицаТовары.НомерГТД
		|ИЗ
		|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары"
		+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	КонецЕсли;
		
	Если Реквизиты.ЕстьПрочее Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПОМЕСТИТЬ ТаблицаПрочее", "ПОМЕСТИТЬ ВременнаяТаблицаПрочее");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаПрочее.Ссылка = &Ссылка", "ТаблицаПрочее.Ссылка = &Ссылка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|НомерСтроки");
		НомераТаблиц.Вставить("СуммыТаблицыПрочее", НомераТаблиц.Количество());
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	ВременнаяТаблицаПрочее.НомерСтроки,
		|	ВременнаяТаблицаПрочее.СтавкаНДС,
		|	ВременнаяТаблицаПрочее.СуммаВзаиморасчетов,
		|	ВременнаяТаблицаПрочее.СуммаНДСВзаиморасчетов,
		|	ВременнаяТаблицаПрочее.Сумма,
		|	ВременнаяТаблицаПрочее.СуммаНДС
		|ИЗ
		|	ВременнаяТаблицаПрочее КАК ВременнаяТаблицаПрочее"
		+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаРасчетыВВалютеТовары(НомераТаблиц, Реквизиты)

	НомераТаблиц.Вставить("ТаблицаТовары", НомераТаблиц.Количество());
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	СуммыТаблицыТовары.НомерСтроки КАК НомерСтроки,
	|	СуммыТаблицыТовары.СуммаВзаиморасчетов,
	|	СуммыТаблицыТовары.СуммаНДСВзаиморасчетов,
	|	СуммыТаблицыТовары.Сумма,
	|	СуммыТаблицыТовары.СуммаНДС
	|ПОМЕСТИТЬ СуммыТаблицыТовары
	|ИЗ
	|	&СуммыТаблицыТовары КАК СуммыТаблицыТовары
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблицаТовары.Ссылка,
	|	ВременнаяТаблицаТовары.НомерСтроки,
	|	ВременнаяТаблицаТовары.Номенклатура,
	|	ВременнаяТаблицаТовары.Количество,
	|	СуммыТаблицыТовары.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	|	СуммыТаблицыТовары.СуммаНДСВзаиморасчетов,
	|	СуммыТаблицыТовары.Сумма КАК Сумма,
	|	СуммыТаблицыТовары.СуммаНДС,
	|	ВременнаяТаблицаТовары.СтавкаНДС,
	|	ВременнаяТаблицаТовары.СчетУчетаБУ,
	|	ВременнаяТаблицаТовары.СчетУчетаБУЗабалансовый КАК СчетУчетаБУЗабалансовый,
	|	ВременнаяТаблицаТовары.СчетУчетаНДС,
	|	ВременнаяТаблицаТовары.СчетУчетаНУ,
	|	ВременнаяТаблицаТовары.НДСВидОборота,
	|	ВременнаяТаблицаТовары.НДСВидПоступления,
	|	ВременнаяТаблицаТовары.Контрагент,
	|	ВременнаяТаблицаТовары.СчетФактура,
	|	ВременнаяТаблицаТовары.ВидВходящегоДокумента,
	|	ВременнаяТаблицаТовары.НомерВходящегоДокумента,
	|	ВременнаяТаблицаТовары.ДатаВходящегоДокумента,
	|	ВременнаяТаблицаТовары.НомерГТД
	|ПОМЕСТИТЬ ТаблицаТовары
	|ИЗ
	|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ СуммыТаблицыТовары КАК СуммыТаблицыТовары
	|		ПО ВременнаяТаблицаТовары.НомерСтроки = СуммыТаблицыТовары.НомерСтроки";

	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции 

Функция ТекстЗапросаРасчетыВВалютеПрочее(НомераТаблиц, Реквизиты)

	НомераТаблиц.Вставить("ТаблицаПрочее", НомераТаблиц.Количество());
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	СуммыТаблицыПрочее.НомерСтроки КАК НомерСтроки,
	|	СуммыТаблицыПрочее.СуммаВзаиморасчетов,
	|	СуммыТаблицыПрочее.СуммаНДСВзаиморасчетов,
	|	СуммыТаблицыПрочее.Сумма,
	|	СуммыТаблицыПрочее.СуммаНДС
	|ПОМЕСТИТЬ СуммыТаблицыПрочее
	|ИЗ
	|	&СуммыТаблицыПрочее КАК СуммыТаблицыПрочее
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблицаПрочее.Ссылка,
	|	ВременнаяТаблицаПрочее.НомерСтроки,
	|	ВременнаяТаблицаПрочее.Номенклатура,
	|	ВременнаяТаблицаПрочее.Содержание,
	|	СуммыТаблицыПрочее.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	|	СуммыТаблицыПрочее.СуммаНДСВзаиморасчетов,
	|	СуммыТаблицыПрочее.Сумма КАК Сумма,
	|	СуммыТаблицыПрочее.СуммаНДС,
	|	ВременнаяТаблицаПрочее.ЭтоУслуга,
	|	ВременнаяТаблицаПрочее.Контрагент,
	|	ВременнаяТаблицаПрочее.СтавкаНДС,
	|	ВременнаяТаблицаПрочее.СчетЗатратБУ,
	|	ВременнаяТаблицаПрочее.СубконтоЗатратБУ1,
	|	ВременнаяТаблицаПрочее.СубконтоЗатратБУ2,
	|	ВременнаяТаблицаПрочее.СубконтоЗатратБУ3,
	|	ВременнаяТаблицаПрочее.СчетЗатратНУ,
	|	ВременнаяТаблицаПрочее.СубконтоЗатратНУ1,
	|	ВременнаяТаблицаПрочее.СубконтоЗатратНУ2,
	|	ВременнаяТаблицаПрочее.СубконтоЗатратНУ3,
	|	ВременнаяТаблицаПрочее.СчетУчетаНДС,
	|	ВременнаяТаблицаПрочее.НДСВидОборота,
	|	ВременнаяТаблицаПрочее.НДСВидПоступления,
	|	ВременнаяТаблицаПрочее.ВидЗадолженностиПодотчетногоЛица,
	|	ВременнаяТаблицаПрочее.СчетФактура,
	|	ВременнаяТаблицаПрочее.ВидВходящегоДокумента,
	|	ВременнаяТаблицаПрочее.НомерВходящегоДокумента,
	|	ВременнаяТаблицаПрочее.ДатаВходящегоДокумента
	|ПОМЕСТИТЬ ТаблицаПрочее
	|ИЗ
	|	ВременнаяТаблицаПрочее КАК ВременнаяТаблицаПрочее
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ СуммыТаблицыПрочее КАК СуммыТаблицыПрочее
	|		ПО ВременнаяТаблицаПрочее.НомерСтроки = СуммыТаблицыПрочее.НомерСтроки";

	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции 

Функция ТекстЗапросаПоступлениеТоваров(НомераТаблиц, ПараметрыПроведения, Реквизиты)

	ТекстЗапроса = "";
	Если НЕ Реквизиты.ЕстьТовары Тогда 
		ПараметрыПроведения.Вставить("ТаблицаТовары", Неопределено);
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить("ТаблицаТовары",	НомераТаблиц.Количество());
	
	ТекстЗапроса = ТекстЗапроса + "
	|ВЫБРАТЬ
	|	""Товары"" КАК ИмяСписка,
	|	&СинонимТовары КАК СинонимСписка,
	|	ТаблицаТовары.НомерСтроки,
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.Количество КАК Количество,
	|	ТаблицаТовары.Сумма КАК Сумма,
	|	ТаблицаТовары.СуммаНДС,
	|	ТаблицаТовары.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	|	ТаблицаТовары.СуммаНДСВзаиморасчетов КАК СуммаНДСВзаиморасчетов,
	|	ТаблицаТовары.СуммаНДСВзаиморасчетов КАК СуммаНДСВал,
	|	ТаблицаТовары.СтавкаНДС,
	|	ТаблицаТовары.СчетУчетаБУ,
	|	ТаблицаТовары.СчетУчетаНУ,
	|	ТаблицаТовары.СчетУчетаНДС,
	|	ТаблицаТовары.НДСВидОборота,
	|	ТаблицаТовары.НДСВидПоступления,
	|	ТаблицаТовары.Контрагент,
	|	ВЫБОР
	|		КОГДА СпособОценкиЗапасовБУ.СпособОценки ЕСТЬ NULL 
	|				ИЛИ СпособОценкиЗапасовБУ.СпособОценки В (ЗНАЧЕНИЕ(Перечисление.СпособыОценки.ПоСредней), ЗНАЧЕНИЕ(Перечисление.СпособыОценки.ПустаяСсылка))
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ВедетсяПартионныйУчет,
	|	ТаблицаТовары.СчетУчетаБУЗабалансовый КАК СчетУчетаБУЗабалансовый,
	|	&СодержаниеТовары КАК Содержание
	|ИЗ
	|	ТаблицаТовары КАК ТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СпособОценкиЗапасовБУ КАК СпособОценкиЗапасовБУ
	|		ПО ТаблицаТовары.СчетУчетаБУ = СпособОценкиЗапасовБУ.СчетЗапасов
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаТовары.НомерСтроки";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаПоступлениеПрочее(НомераТаблиц, ПараметрыПроведения, Реквизиты)

	ТекстЗапроса = "";
	Если НЕ Реквизиты.ЕстьПрочее Тогда 
		ПараметрыПроведения.Вставить("ТаблицаПрочее", Неопределено);
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить("ТаблицаПрочее",	НомераТаблиц.Количество());
	
	ТекстЗапроса = ТекстЗапроса + "
	|ВЫБРАТЬ
	|	""Прочее"" КАК ИмяСписка,
	|	&СинонимПрочее КАК СинонимСписка,
	|	ТаблицаПрочее.НомерСтроки,
	|	ТаблицаПрочее.Номенклатура,
	|	ТаблицаПрочее.Сумма КАК Сумма,
	|	ТаблицаПрочее.СуммаНДС,
	|	ТаблицаПрочее.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	|	ТаблицаПрочее.СуммаНДСВзаиморасчетов КАК СуммаНДСВзаиморасчетов,
	|	ТаблицаПрочее.СуммаНДСВзаиморасчетов КАК СуммаНДСВал,
	|	ТаблицаПрочее.СтавкаНДС,
	|	Реквизиты.СчетРасчетовСПодотчетнымЛицом КАК КорСчет,
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоТиповые.РаботникиОрганизаций) КАК ВидКорСубконто1,
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоТиповые.ВидыЗадолженностиПодотчетныхЛиц) КАК ВидКорСубконто2,
	|	НЕОПРЕДЕЛЕНО КАК ВидКорСубконто3,
	|	Реквизиты.ПодотчетноеЛицо КАК КорСубконто1,
	|	ТаблицаПрочее.ВидЗадолженностиПодотчетногоЛица КАК КорСубконто2,
	|	НЕОПРЕДЕЛЕНО КАК КорСубконто3,
	|	ТаблицаПрочее.СчетЗатратБУ,
	|	ТаблицаПрочее.СубконтоЗатратБУ1,
	|	ТаблицаПрочее.СубконтоЗатратБУ2,
	|	ТаблицаПрочее.СубконтоЗатратБУ3,
	|	ТаблицаПрочее.СчетЗатратНУ,
	|	ТаблицаПрочее.СубконтоЗатратНУ1,
	|	ТаблицаПрочее.СубконтоЗатратНУ2,
	|	ТаблицаПрочее.СубконтоЗатратНУ3,
	|	ТаблицаПрочее.Контрагент,
	|	ТаблицаПрочее.СчетУчетаНДС,
	|	ТаблицаПрочее.НДСВидОборота,
	|	ТаблицаПрочее.НДСВидПоступления,
	|	ТаблицаПрочее.Содержание
	|ИЗ
	|	ТаблицаПрочее КАК ТаблицаПрочее
	|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|		ПО (ИСТИНА)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаПрочее.НомерСтроки";
	
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаПогашениеЗадолженности(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	ТекстЗапроса = "";
	ПараметрыПроведения.Вставить("ПогашениеЗадолженностиТаблица", Неопределено);
	Если  Реквизиты.ЕстьОплатаПоставщикам  Тогда
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	Реквизиты.Ссылка КАК Регистратор,
		|	Реквизиты.Дата КАК Период,
		|	Реквизиты.Организация КАК Организация,
		|	Реквизиты.ВалютаДокумента КАК ВалютаДокумента,
		|	Реквизиты.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
		|	""Выбытие"" КАК НаправлениеДвижения,
		|	&НеобходимостьОтраженияВНУ,
		|	Реквизиты.ВидУчетаНУ,
		|	ЛОЖЬ КАК ЭтоВозврат
		|ИЗ
		|	Реквизиты КАК Реквизиты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаОплатаПоставщикам.НомерСтроки КАК НомерСтроки,
		|	ТаблицаОплатаПоставщикам.Контрагент,
		|	ТаблицаОплатаПоставщикам.ДоговорКонтрагента,
		|	ТаблицаОплатаПоставщикам.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
		|	ТаблицаОплатаПоставщикам.ВедениеВзаиморасчетов КАК ВедениеВзаиморасчетов,
		|	ТаблицаОплатаПоставщикам.РасчетыВВалюте КАК РасчетыВВалюте,
		|	ТаблицаОплатаПоставщикам.Сделка КАК ДокументРасчетов,
		|	ТаблицаОплатаПоставщикам.СчетУчетаРасчетовСКонтрагентом КАК СчетРасчетов,
		|	ТаблицаОплатаПоставщикам.СчетУчетаРасчетовСКонтрагентомНУ КАК СчетРасчетовНУ,
		|	ТаблицаОплатаПоставщикам.СчетУчетаРасчетовПоАвансам КАК СчетАвансов,
		|	ТаблицаОплатаПоставщикам.СчетРасчетовСПодотчетнымЛицом КАК КорСчет,
		|	ТаблицаОплатаПоставщикам.СчетРасчетовСПодотчетнымЛицомНУ КАК КорСчетНУ,
		|	ТаблицаОплатаПоставщикам.ФизЛицо КАК КорСубконто1,
		|	ТаблицаОплатаПоставщикам.ВидЗадолженности КАК КорСубконто2,
		|	НЕОПРЕДЕЛЕНО КАК КорСубконто3,
		|	ТаблицаОплатаПоставщикам.ФизЛицо КАК КорСубконтоНУ1,
		|	ТаблицаОплатаПоставщикам.ВидЗадолженности КАК КорСубконтоНУ2,
		|	НЕОПРЕДЕЛЕНО КАК КорСубконтоНУ3,
		|	ТаблицаОплатаПоставщикам.СуммаВзаиморасчетов,
		|	ВЫРАЗИТЬ(ВЫБОР
		|			КОГДА НЕ ТаблицаОплатаПоставщикам.РасчетыВВалюте
		|				ТОГДА ТаблицаОплатаПоставщикам.Сумма
		|			ИНАЧЕ ТаблицаОплатаПоставщикам.Сумма * (ТаблицаОплатаПоставщикам.КурсВзаиморасчетов / ТаблицаОплатаПоставщикам.КратностьВзаиморасчетов)
		|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаРегл,
		|	ЕСТЬNULL(ТаблицаОплатаПоставщикам.Содержание, &СодержаниеПоУмолчанию) КАК Содержание
		|ИЗ
		|	ТаблицаОплатаПоставщикам КАК ТаблицаОплатаПоставщикам
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки"
		+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
		
		НомераТаблиц.Вставить("ПогашениеЗадолженностиРеквизиты", НомераТаблиц.Количество());
		НомераТаблиц.Вставить("ПогашениеЗадолженностиТаблица", НомераТаблиц.Количество());
	Иначе
		ПараметрыПроведения.Вставить("ПогашениеЗадолженностиРеквизиты", Неопределено);
		ПараметрыПроведения.Вставить("ПогашениеЗадолженностиТаблица", Неопределено);
	КонецЕсли;        	
	
	Возврат ТекстЗапроса;	
КонецФункции

Функция ТекстЗапросаНДС(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	ТекстЗапроса = "";
	Если НЕ Реквизиты.УчитыватьНДС Тогда 
		ПараметрыПроведения.Вставить("ТаблицаНДС", Неопределено);
		Возврат ТекстЗапроса;
	КонецЕсли;
	
	Если Реквизиты.ЕстьТовары Тогда 
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	""ТоварыНДС"" КАК ИмяСписка,
		|	&СинонимТовары КАК СинонимСписка,
		|	ТаблицаТовары.НомерСтроки,
		|	ТаблицаТовары.Номенклатура КАК ТМЗ,
		|	ТаблицаТовары.СуммаНДС,
		|	ТаблицаТовары.СуммаНДС КАК УплаченныйНДС,
		|	ТаблицаТовары.СуммаНДСВзаиморасчетов КАК СуммаНДСВал,
		|	ТаблицаТовары.СтавкаНДС,
		|	ТаблицаТовары.Сумма - ВЫБОР
		|		КОГДА Реквизиты.НДСВключенВСтоимость
		|			ТОГДА ТаблицаТовары.СуммаНДС
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СуммаБезНДС,
		|	ТаблицаТовары.НДСВидОборота КАК ВидОборота,
		|	ТаблицаТовары.НДСВидПоступления КАК ВидОперацииПоступления,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыНДС.НДС) КАК ВидНалогаНДС,
		|	ТаблицаТовары.Контрагент КАК Контрагент,
		|	ТаблицаТовары.СчетУчетаНДС КАК Счет,
		|	Реквизиты.СчетРасчетовСПодотчетнымЛицом КАК КорСчет,
		|	ЗНАЧЕНИЕ(Справочник.НалогиСборыОтчисления.НалогНаДобавленнуюСтоимость) КАК Субконто1,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог) КАК Субконто2,
		|	НЕОПРЕДЕЛЕНО КАК Субконто3,
		|	Реквизиты.ПодотчетноеЛицо КАК КорСубконто1,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыЗадолженностиПодотчетныхЛиц.ПриобретениеАктивов) КАК КорСубконто2,
		|	НЕОПРЕДЕЛЕНО КАК КорСубконто3,
		|	&СодержаниеВыделенНДС КАК Содержание,
		|	ТаблицаТовары.СчетФактура,
		|	ТаблицаТовары.ВидВходящегоДокумента,
		|	ТаблицаТовары.ДатаВходящегоДокумента,
		|	ТаблицаТовары.НомерВходящегоДокумента,
		|	0 КАК Порядок
		|ИЗ
		|	ТаблицаТовары КАК ТаблицаТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО (ИСТИНА)";
	КонецЕсли;
	
	Если Реквизиты.ЕстьПрочее Тогда 
		Если НЕ ПустаяСтрока(ТекстЗапроса) Тогда 
			ТекстЗапроса = ТекстЗапроса + "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|";
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	""ПрочееНДС"" КАК ИмяСписка,
		|	&СинонимПрочее КАК СинонимСписка,
		|	ТаблицаПрочее.НомерСтроки,
		|	ТаблицаПрочее.Номенклатура КАК ТМЗ,
		|	ТаблицаПрочее.СуммаНДС,
		|	ТаблицаПрочее.СуммаНДС КАК УплаченныйНДС,
		|	ТаблицаПрочее.СуммаНДСВзаиморасчетов КАК СуммаНДСВал,
		|	ТаблицаПрочее.СтавкаНДС,
		|	ТаблицаПрочее.Сумма - ВЫБОР
		|		КОГДА Реквизиты.НДСВключенВСтоимость
		|			ТОГДА ТаблицаПрочее.СуммаНДС
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СуммаБезНДС,
		|	ТаблицаПрочее.НДСВидОборота КАК ВидОборота,
		|	ТаблицаПрочее.НДСВидПоступления КАК ВидОперацииПоступления,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыНДС.НДС) КАК ВидНалогаНДС,
		|	ТаблицаПрочее.Контрагент КАК Контрагент,
		|	ТаблицаПрочее.СчетУчетаНДС КАК Счет,
		|	Реквизиты.СчетРасчетовСПодотчетнымЛицом КАК КорСчет,
		|	ЗНАЧЕНИЕ(Справочник.НалогиСборыОтчисления.НалогНаДобавленнуюСтоимость) КАК Субконто1,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог) КАК Субконто2,
		|	НЕОПРЕДЕЛЕНО КАК Субконто3,
		|	Реквизиты.ПодотчетноеЛицо КАК КорСубконто1,
		|	ТаблицаПрочее.ВидЗадолженностиПодотчетногоЛица КАК КорСубконто2,
		|	НЕОПРЕДЕЛЕНО КАК КорСубконто3,
		|	&СодержаниеВыделенНДС КАК Содержание,
		|	ТаблицаПрочее.СчетФактура,
		|	ТаблицаПрочее.ВидВходящегоДокумента,
		|	ТаблицаПрочее.ДатаВходящегоДокумента,
		|	ТаблицаПрочее.НомерВходящегоДокумента,
		|	1 КАК Порядок
		|ИЗ
		|	ТаблицаПрочее КАК ТаблицаПрочее
		|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО (ИСТИНА)
		|ГДЕ
		|	ТаблицаПрочее.ВидЗадолженностиПодотчетногоЛица <> ЗНАЧЕНИЕ(Перечисление.ВидыЗадолженностиПодотчетныхЛиц.Суточные)
		|	И ТаблицаПрочее.ВидЗадолженностиПодотчетногоЛица <> ЗНАЧЕНИЕ(Перечисление.ВидыЗадолженностиПодотчетныхЛиц.СуточныеСверхНормы)";
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ТекстЗапроса) Тогда 
		НомераТаблиц.Вставить("ТаблицаНДС",	НомераТаблиц.Количество());

		ТекстЗапроса = ТекстЗапроса + "
		|УПОРЯДОЧИТЬ ПО
		|	Порядок,
		|	НомерСтроки" + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	Иначе 
		ПараметрыПроведения.Вставить("ТаблицаНДС", Неопределено);
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаПеречислениеЗП(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	ТекстЗапроса = "";
	
	Если НЕ Реквизиты.ЕстьВыплатаЗаработнойПлаты Тогда
		ПараметрыПроведения.Вставить("ТаблицаПеречислениеЗП", Неопределено);
	Иначе 
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПРЕДСТАВЛЕНИЕ(ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка) КАК ПредставлениеДок,
		|	ЗарплатаКВыплатеОрганизацииЗарплата.Физлицо КАК ФизЛицо,
		|	ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка КАК Ведомость,
		|	НАЧАЛОПЕРИОДА(ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.ПериодНачисленияЗарплаты, МЕСЯЦ) КАК ПериодНачисленияЗарплаты,
		|	ВЫБОР
		|		КОГДА НЕ ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.ПериодНачисленияДепонированнойЗарплаты = ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА НАЧАЛОПЕРИОДА(ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.ПериодНачисленияДепонированнойЗарплаты, МЕСЯЦ)
		|		ИНАЧЕ НАЧАЛОПЕРИОДА(ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.ПериодНачисленияЗарплаты, МЕСЯЦ)
		|	КОНЕЦ КАК ПериодНачисленияДепонированнойЗарплаты,
		|	ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.СпособРасчетаСуммКВыплате КАК СпособРасчетаСуммКВыплате,
		|	СУММА(ЗарплатаКВыплатеОрганизацииЗарплата.Сумма) КАК Сумма,
		|	СУММА(ЗарплатаКВыплатеОрганизацииЗарплата.ДепонированнаяСумма) КАК ДепонированнаяСумма,
		|	ЗарплатаКВыплатеОрганизацииЗарплата.ВыплаченностьЗарплаты,
		|	ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.Номер,
		|	ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.Дата,
		|	Реквизиты.СчетРасчетовСПодотчетнымЛицом КАК СчетКт,
		|	ВЫБОР
		|		КОГДА Типовой.СчетНУ ЕСТЬ NULL 
		|				ИЛИ Типовой.СчетНУ = ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ПустаяССылка)
		|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ЗадолженностьПодотчетныхЛиц)
		|		ИНАЧЕ Типовой.СчетНУ
		|	КОНЕЦ КАК СчетКтНУ,
		|	ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ЗадолженностьПодотчетныхЛиц) КАК СчетКтНУПоУмолчанию,
		|	""РаботникиОрганизаций"" КАК ИмяСубконтоКт1,
		|	Реквизиты.ПодотчетноеЛицо КАК СубконтоКт1,
		|	""ВидыЗадолженностиПодотчетныхЛиц"" КАК ИмяСубконтоКт2,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыЗадолженностиПодотчетныхЛиц.Прочие) КАК СубконтоКт2
		|ИЗ
		|	Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацииЗарплата
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВедомостиЗП КАК ВедомостиЗП
		|		ПО ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка = ВедомостиЗП.Ведомость
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям КАК РанееВыплаченныеСуммы
		|		ПО ЗарплатаКВыплатеОрганизацииЗарплата.Физлицо = РанееВыплаченныеСуммы.Физлицо
		|			И ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка = РанееВыплаченныеСуммы.Ведомость
		|			И (РанееВыплаченныеСуммы.Регистратор <> &Ссылка)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО (ИСТИНА)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Типовой КАК Типовой
		|		ПО (Реквизиты.СчетРасчетовСПодотчетнымЛицом = Типовой.Ссылка)
		|ГДЕ
		|	ЗарплатаКВыплатеОрганизацииЗарплата.ВыплаченностьЗарплаты = ЗНАЧЕНИЕ(Перечисление.ВыплаченностьЗарплаты.Выплачено)
		|	И РанееВыплаченныеСуммы.Физлицо ЕСТЬ NULL 
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗарплатаКВыплатеОрганизацииЗарплата.Физлицо,
		|	ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка,
		|	НАЧАЛОПЕРИОДА(ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.ПериодНачисленияЗарплаты, МЕСЯЦ),
		|	ВЫБОР
		|		КОГДА НЕ ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.ПериодНачисленияДепонированнойЗарплаты = ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА НАЧАЛОПЕРИОДА(ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.ПериодНачисленияДепонированнойЗарплаты, МЕСЯЦ)
		|		ИНАЧЕ НАЧАЛОПЕРИОДА(ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.ПериодНачисленияЗарплаты, МЕСЯЦ)
		|	КОНЕЦ,
		|	ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.СпособРасчетаСуммКВыплате,
		|	ЗарплатаКВыплатеОрганизацииЗарплата.ВыплаченностьЗарплаты,
		|	ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.Номер,
		|	ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.Дата,
		|	Реквизиты.СчетРасчетовСПодотчетнымЛицом,
		|	ВЫБОР
		|		КОГДА Типовой.СчетНУ ЕСТЬ NULL 
		|				ИЛИ Типовой.СчетНУ = ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ПустаяССылка)
		|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ЗадолженностьПодотчетныхЛиц)
		|		ИНАЧЕ Типовой.СчетНУ
		|	КОНЕЦ,
		|	Реквизиты.ПодотчетноеЛицо"
		+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
		
		НомераТаблиц.Вставить("ТаблицаПеречислениеЗП", НомераТаблиц.Количество());
		ПараметрыПроведения.Реквизиты.ЗаполнитьЗначения(УчетнаяПолитикаСервер.ПолучитьПорядокСписанияЗадолженностиПоЗарплате(Реквизиты.Организация, Реквизиты.Дата), "ПорядокСписанияЗадолженностиПоЗарплате");
		
	КонецЕсли;
	
	Возврат ТекстЗапроса;		
	
КонецФункции

Функция ТекстЗапросаПеречислениеОПВ(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	ТекстЗапроса = "";
	
	Если НЕ Реквизиты.ЕстьПеречислениеПенсионныхВзносов 
		И НЕ Реквизиты.ЕстьПеречислениеПенсионныхВзносовРаботодателя
		И НЕ Реквизиты.ЕстьПеречислениеПрофессиональныхПенсионныхВзносов Тогда
		ПараметрыПроведения.Вставить("ТаблицаПеречислениеОПВ", Неопределено);
	Иначе 
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВЫБОР
		|		КОГДА ОПВПеречислениеВФонды.ФизЛицо ССЫЛКА Справочник.ФизическиеЛица
		|			ТОГДА ОПВПеречислениеВФонды.ФизЛицо
		|		ИНАЧЕ ОПВПеречислениеВФонды.ФизЛицо.ФизЛицо
		|	КОНЕЦ КАК ФизЛицоБУ,
		|	ОПВПеречислениеВФонды.ФизЛицо КАК ФизЛицо,
		|	НАЧАЛОПЕРИОДА(ОПВПеречислениеВФонды.Ссылка.ПериодРегистрации, МЕСЯЦ) КАК МесяцИсчисления,
		|	ОПВПеречислениеВФонды.Ссылка.ВидПлатежа КАК ВидПлатежа,
		|	ОПВПеречислениеВФонды.Ссылка.ВидОперации КАК ВидОперацииВедомости,
		|	ОПВПеречислениеВФонды.Ссылка.СпособРасчетаСуммКПеречислению КАК СпособРасчетаСуммКПеречислению,
		|	СУММА(ОПВПеречислениеВФонды.Сумма) КАК Сумма,
		|	Реквизиты.СчетРасчетовСПодотчетнымЛицом КАК СчетКт,
		|	ВЫБОР
		|		КОГДА Типовой.СчетНУ ЕСТЬ NULL
		|				ИЛИ Типовой.СчетНУ = ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ПустаяССылка)
		|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ЗадолженностьПодотчетныхЛиц)
		|		ИНАЧЕ Типовой.СчетНУ
		|	КОНЕЦ КАК СчетКтНУ,
		|	ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ЗадолженностьПодотчетныхЛиц) КАК СчетКтНУПоУмолчанию,
		|	""РаботникиОрганизаций"" КАК ИмяСубконтоКт1,
		|	Реквизиты.ПодотчетноеЛицо КАК СубконтоКт1,
		|	""ВидыЗадолженностиПодотчетныхЛиц"" КАК ИмяСубконтоКт2,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыЗадолженностиПодотчетныхЛиц.Прочие) КАК СубконтоКт2
		|ИЗ
		|	Документ.ОПВПеречислениеВФонды.ПенсионныеВзносы КАК ОПВПеречислениеВФонды
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВедомостиОПВ КАК ВедомостиОПВ
		|		ПО ОПВПеречислениеВФонды.Ссылка = ВедомостиОПВ.Ведомость
		|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО (ИСТИНА)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Типовой КАК Типовой
		|		ПО (Реквизиты.СчетРасчетовСПодотчетнымЛицом = Типовой.Ссылка)
		|
		|СГРУППИРОВАТЬ ПО
		|	ВЫБОР
		|		КОГДА ОПВПеречислениеВФонды.ФизЛицо ССЫЛКА Справочник.ФизическиеЛица
		|			ТОГДА ОПВПеречислениеВФонды.ФизЛицо
		|		ИНАЧЕ ОПВПеречислениеВФонды.ФизЛицо.ФизЛицо
		|	КОНЕЦ,
		|	ОПВПеречислениеВФонды.ФизЛицо,
		|	ОПВПеречислениеВФонды.Ссылка.ПериодРегистрации,
		|	ОПВПеречислениеВФонды.Ссылка.ВидПлатежа,
		|	ОПВПеречислениеВФонды.Ссылка.ВидОперации,
		|	ОПВПеречислениеВФонды.Ссылка.СпособРасчетаСуммКПеречислению,
		|	Реквизиты.СчетРасчетовСПодотчетнымЛицом,
		|	ВЫБОР
		|		КОГДА Типовой.СчетНУ ЕСТЬ NULL
		|				ИЛИ Типовой.СчетНУ = ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ПустаяССылка)
		|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ЗадолженностьПодотчетныхЛиц)
		|		ИНАЧЕ Типовой.СчетНУ
		|	КОНЕЦ,
		|	Реквизиты.ПодотчетноеЛицо"
		+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
		
		НомераТаблиц.Вставить("ТаблицаПеречислениеОПВ", НомераТаблиц.Количество());
		
	КонецЕсли;
	
	Возврат ТекстЗапроса;		
	
КонецФункции

Функция ТекстЗапросаПеречислениеСО(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	ТекстЗапроса = "";
	
	Если НЕ Реквизиты.ЕстьПеречислениеСоциальныхОтчислений
		И НЕ Реквизиты.ЕстьПеречислениеВзносовОСМС
		И НЕ Реквизиты.ЕстьПеречислениеОтчисленийОСМС Тогда
		ПараметрыПроведения.Вставить("ТаблицаПеречислениеСО", Неопределено);
	Иначе 
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СОПеречислениеВФонды.ФизЛицо,
		|	ВЫБОР
		|		КОГДА СОПеречислениеВФонды.ФизЛицо ССЫЛКА Справочник.ФизическиеЛица
		|			ТОГДА СОПеречислениеВФонды.ФизЛицо
		|		ИНАЧЕ СОПеречислениеВФонды.ФизЛицо.ФизЛицо
		|	КОНЕЦ КАК ФизЛицоБУ,
		|	СОПеречислениеВФонды.Ссылка.ВидОперации КАК ВидОперации,
		|	НАЧАЛОПЕРИОДА(СОПеречислениеВФонды.Ссылка.ПериодРегистрации, МЕСЯЦ) КАК МесяцИсчисления,
		|	СОПеречислениеВФонды.Ссылка.ВидПлатежа,
		|	СОПеречислениеВФонды.Ссылка.СпособРасчетаСуммКПеречислению,
		|	СУММА(СОПеречислениеВФонды.Сумма) КАК Сумма,
		|	Реквизиты.СчетРасчетовСПодотчетнымЛицом КАК СчетКт,
		|	ВЫБОР
		|		КОГДА Типовой.СчетНУ ЕСТЬ NULL 
		|				ИЛИ Типовой.СчетНУ = ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ПустаяССылка)
		|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ЗадолженностьПодотчетныхЛиц)
		|		ИНАЧЕ Типовой.СчетНУ
		|	КОНЕЦ КАК СчетКтНУ,
		|	ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ЗадолженностьПодотчетныхЛиц) КАК СчетКтНУПоУмолчанию,
		|	""РаботникиОрганизаций"" КАК ИмяСубконтоКт1,
		|	Реквизиты.ПодотчетноеЛицо КАК СубконтоКт1,
		|	""ВидыЗадолженностиПодотчетныхЛиц"" КАК ИмяСубконтоКт2,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыЗадолженностиПодотчетныхЛиц.Прочие) КАК СубконтоКт2
		|ИЗ
		|	Документ.СОПеречислениеВФонды.СоциальныеОтчисления КАК СОПеречислениеВФонды
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВедомостиСО КАК ВедомостиСО
		|		ПО СОПеречислениеВФонды.Ссылка = ВедомостиСО.Ведомость
		|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО (ИСТИНА)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Типовой КАК Типовой
		|		ПО (Реквизиты.СчетРасчетовСПодотчетнымЛицом = Типовой.Ссылка)
		|
		|СГРУППИРОВАТЬ ПО
		|	СОПеречислениеВФонды.ФизЛицо,
		|	ВЫБОР
		|		КОГДА СОПеречислениеВФонды.ФизЛицо ССЫЛКА Справочник.ФизическиеЛица
		|			ТОГДА СОПеречислениеВФонды.ФизЛицо
		|		ИНАЧЕ СОПеречислениеВФонды.ФизЛицо.ФизЛицо
		|	КОНЕЦ,
		|	СОПеречислениеВФонды.Ссылка.ВидОперации,
		|	СОПеречислениеВФонды.Ссылка.ПериодРегистрации,
		|	СОПеречислениеВФонды.Ссылка.ВидПлатежа,
		|	СОПеречислениеВФонды.Ссылка.СпособРасчетаСуммКПеречислению,
		|	Реквизиты.СчетРасчетовСПодотчетнымЛицом,
		|	ВЫБОР
		|		КОГДА Типовой.СчетНУ ЕСТЬ NULL 
		|				ИЛИ Типовой.СчетНУ = ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ПустаяССылка)
		|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ЗадолженностьПодотчетныхЛиц)
		|		ИНАЧЕ Типовой.СчетНУ
		|	КОНЕЦ,
		|	Реквизиты.ПодотчетноеЛицо"
		+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
		
		НомераТаблиц.Вставить("ТаблицаПеречислениеСО", НомераТаблиц.Количество());
		
	КонецЕсли;
	
	Возврат ТекстЗапроса;		
	
КонецФункции

Функция ТекстЗапросаПеречислениеПоИЛ(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	ТекстЗапроса = "";
	
	Если НЕ Реквизиты.ЕстьОплатаПоИсполнительнымЛистам Тогда
		ПараметрыПроведения.Вставить("ТаблицаПеречислениеПоИЛ", Неопределено);
	Иначе 
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВЫБОР
		|		КОГДА ФИОФизЛиц.ФизЛицо ЕСТЬ NULL 
		|			ТОГДА ИЛПеречислениеПолучателям.ДокументОснование.Физлицо.Наименование
		|		ИНАЧЕ ФИОФизЛиц.Фамилия + ВЫБОР
		|				КОГДА ФИОФизЛиц.Имя <> """"
		|					ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛиц.Имя, 1, 1) + "".""
		|				ИНАЧЕ """"
		|			КОНЕЦ + ВЫБОР
		|				КОГДА ФИОФизЛиц.Отчество <> """"
		|					ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛиц.Отчество, 1, 1) + "".""
		|				ИНАЧЕ """"
		|			КОНЕЦ
		|	КОНЕЦ КАК ФИОРаботника,
		|	ИЛПеречислениеПолучателям.Получатель,
		|	ИЛПеречислениеПолучателям.ДокументОснование,
		|	ИЛПеречислениеПолучателям.ДокументОснование.Физлицо КАК ФизЛицо,
		|	ИЛПеречислениеПолучателям.ДокументОснование.Номер КАК НомерИЛ,
		|	ИЛПеречислениеПолучателям.ДокументОснование.Дата КАК ДатаИЛ,
   		|	ИЛПеречислениеПолучателям.ДокументОснование.СозданПриОбмене КАК СозданПриОбмене,
		|	ИЛПеречислениеПолучателям.ДокументОснование.ПлатежныйАгент КАК ПлатежныйАгент,
		|	НАЧАЛОПЕРИОДА(ИЛПеречислениеПолучателям.Ссылка.ПериодРегистрации, МЕСЯЦ) КАК ПериодВзаиморасчетов,
		|	СУММА(ИЛПеречислениеПолучателям.СуммаВзаиморасчетов) КАК СуммаВзаиморасчетов,
		|	СУММА(ИЛПеречислениеПолучателям.СуммаСборов) КАК СуммаСборов,
		|	СУММА(ИЛПеречислениеПолучателям.СуммаВзаиморасчетов + ИЛПеречислениеПолучателям.СуммаСборов) КАК Сумма,
		|	Реквизиты.СчетРасчетовСПодотчетнымЛицом КАК СчетКт,
		|	ВЫБОР
		|		КОГДА Типовой.СчетНУ ЕСТЬ NULL 
		|				ИЛИ Типовой.СчетНУ = ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ПустаяССылка)
		|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ЗадолженностьПодотчетныхЛиц)
		|		ИНАЧЕ Типовой.СчетНУ
		|	КОНЕЦ КАК СчетКтНУ,
		|	ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ЗадолженностьПодотчетныхЛиц) КАК СчетКтНУПоУмолчанию,
		|	""РаботникиОрганизаций"" КАК ИмяСубконтоКт1,
		|	Реквизиты.ПодотчетноеЛицо КАК СубконтоКт1,
		|	""ВидыЗадолженностиПодотчетныхЛиц"" КАК ИмяСубконтоКт2,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыЗадолженностиПодотчетныхЛиц.Прочие) КАК СубконтоКт2
		|ИЗ
		|	Документ.ИЛПеречислениеПолучателям.ИсполнительныеЛисты КАК ИЛПеречислениеПолучателям
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВедомостиПоИЛ КАК ВедомостиПоИЛ
		|		ПО ИЛПеречислениеПолучателям.Ссылка = ВедомостиПоИЛ.Ведомость
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&Дата, ) КАК ФИОФизЛиц
		|		ПО ИЛПеречислениеПолучателям.ДокументОснование.Физлицо = ФИОФизЛиц.ФизЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО (ИСТИНА)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Типовой КАК Типовой
		|		ПО (Реквизиты.СчетРасчетовСПодотчетнымЛицом = Типовой.Ссылка)
		|
		|СГРУППИРОВАТЬ ПО
		|	ИЛПеречислениеПолучателям.Ссылка,
		|	ВЫБОР
		|		КОГДА ФИОФизЛиц.ФизЛицо ЕСТЬ NULL 
		|			ТОГДА ИЛПеречислениеПолучателям.ДокументОснование.Физлицо.Наименование
		|		ИНАЧЕ ФИОФизЛиц.Фамилия + ВЫБОР
		|				КОГДА ФИОФизЛиц.Имя <> """"
		|					ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛиц.Имя, 1, 1) + "".""
		|				ИНАЧЕ """"
		|			КОНЕЦ + ВЫБОР
		|				КОГДА ФИОФизЛиц.Отчество <> """"
		|					ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛиц.Отчество, 1, 1) + "".""
		|				ИНАЧЕ """"
		|			КОНЕЦ
		|	КОНЕЦ,
		|	ИЛПеречислениеПолучателям.Получатель,
		|	ИЛПеречислениеПолучателям.ДокументОснование,
		|	ИЛПеречислениеПолучателям.ДокументОснование.Физлицо,
		|	ИЛПеречислениеПолучателям.ДокументОснование.Номер,
		|	ИЛПеречислениеПолучателям.ДокументОснование.Дата,
   		|	ИЛПеречислениеПолучателям.ДокументОснование.СозданПриОбмене,
		|	ИЛПеречислениеПолучателям.ДокументОснование.ПлатежныйАгент,
		|	НАЧАЛОПЕРИОДА(ИЛПеречислениеПолучателям.Ссылка.ПериодРегистрации, МЕСЯЦ),
		|	Реквизиты.СчетРасчетовСПодотчетнымЛицом,
		|	ВЫБОР
		|		КОГДА Типовой.СчетНУ ЕСТЬ NULL 
		|				ИЛИ Типовой.СчетНУ = ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ПустаяССылка)
		|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ЗадолженностьПодотчетныхЛиц)
		|		ИНАЧЕ Типовой.СчетНУ
		|	КОНЕЦ,
		|	Реквизиты.ПодотчетноеЛицо"		
		+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
		
		НомераТаблиц.Вставить("ТаблицаПеречислениеПоИЛ", НомераТаблиц.Количество());
		
	КонецЕсли;
	
	Возврат ТекстЗапроса;		
	
КонецФункции

Функция ТекстЗапросаТоварыОрганизаций(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	ТекстЗапроса = "";
	
	Если Реквизиты.ЕстьТовары  Тогда 
		НомераТаблиц.Вставить("ТаблицаТоварыОрганизаций"  , НомераТаблиц.Количество());		
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаТовары.НомерСтроки,
		|	""Товары"" КАК ИмяСписка,
		|	ТаблицаТовары.Номенклатура КАК Товар,
		|	ТаблицаТовары.НомерГТД,
		|	ТаблицаТовары.Количество,
		|	Реквизиты.Склад КАК Склад,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения
		|ИЗ
		|	ТаблицаТовары КАК ТаблицаТовары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО (Реквизиты.Ссылка = ТаблицаТовары.Ссылка)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТаблицаТовары.НомерСтроки"
		 + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
		
	 Иначе 
		
		ПараметрыПроведения.Вставить("ТаблицаТоварыОрганизаций"	 , Неопределено);		
		
	КонецЕсли;

	Возврат ТекстЗапроса;
		
КонецФункции
	

////////////////////////////////////////////////////////////////////////////////
// Интерфейс для работы с подсистемой Печать.

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Т-3 (Авансовый отчет)
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "АвансовыйОтчет_Т3";
	КомандаПечати.Представление = НСтр("ru = 'Т-3 (Авансовый отчет)'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБККлиент.ВыполнитьКомандуПечати";
	КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.Порядок = 50;
	
	// Реестр на перечисление ОПВ
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "РеестрНаПеречислениеОПВ";
	КомандаПечати.Представление = НСтр("ru = 'Реестр на перечисление ОПВ'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБККлиент.ВыполнитьКомандуПечати";
	КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.Порядок = 51;
	
	// Реестр на перечисление СО
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "РеестрНаПеречислениеСО";
	КомандаПечати.Представление = НСтр("ru = 'Печать реестра соц. страхования'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБККлиент.ВыполнитьКомандуПечати";
	КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.Порядок = 52;
	
	// Комплект документов (реализация товаров)
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "АвансовыйОтчет_Т3,РеестрНаПеречислениеОПВ,РеестрНаПеречислениеСО";
	КомандаПечати.Представление = НСтр("ru = 'Комплект документов'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.ФиксированныйКомплект = Истина;
	КомандаПечати.ПереопределитьПользовательскиеНастройкиКоличества = Истина;
	КомандаПечати.Порядок = 75;
	
	// Комплект документов (на принтер)
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "АвансовыйОтчет_Т3,РеестрНаПеречислениеОПВ,РеестрНаПеречислениеСО";
	КомандаПечати.Представление = НСтр("ru = 'Комплект документов (на принтер)'");
	КомандаПечати.Картинка = БиблиотекаКартинок.ПечатьСразу;
	КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.ФиксированныйКомплект = Истина;
	КомандаПечати.ПереопределитьПользовательскиеНастройкиКоличества = Истина;
	КомандаПечати.СразуНаПринтер = Истина;
	КомандаПечати.Порядок = 76;
	
	// Настраиваемый комплект документов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "АвансовыйОтчет_Т3,РеестрНаПеречислениеОПВ,РеестрНаПеречислениеСО";
	КомандаПечати.Представление = НСтр("ru = 'Настраиваемый комплект документов'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.ЗаголовокФормы = НСтр("ru = 'Настраиваемый комплект'");
	КомандаПечати.ДополнитьКомплектВнешнимиПечатнымиФормами = Истина;
	КомандаПечати.Порядок = 77;
	
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "АвансовыйОтчет_Т3") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"АвансовыйОтчет_Т3",
			НСтр("ru = 'Т-3 (Авансовый отчет)'"),
			ПечатьТ3(МассивОбъектов, ОбъектыПечати),
			,
			"Документ.АвансовыйОтчет.ПФ_MXL_Т3");
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "РеестрНаПеречислениеОПВ") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"РеестрНаПеречислениеОПВ",
			НСтр("ru = 'Реестр на перечисление ОПВ'"),
			ПечатьРеестра(МассивОбъектов, ОбъектыПечати, "ПеречислениеПенсионныхВзносов", ПараметрыВывода.КодЯзыка),
			,
			"Документ.АвансовыйОтчет.ПФ_MXL_Реестр");
		
		ОписаниеПечатнойФормы = КоллекцияПечатныхФорм.Найти(ВРег("РеестрНаПеречислениеОПВ"), "ИмяВРЕГ");
		Если ОписаниеПечатнойФормы <> Неопределено Тогда
			ОписаниеПечатнойФормы.ДоступенВыводНаДругихЯзыках = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "РеестрНаПеречислениеСО") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"РеестрНаПеречислениеСО",
			НСтр("ru = 'Печать реестра соц. страхования'"),
			ПечатьРеестра(МассивОбъектов, ОбъектыПечати, "ПеречислениеСоциальныхОтчислений", ПараметрыВывода.КодЯзыка),
			,
			"Документ.АвансовыйОтчет.ПФ_MXL_Реестр");
		
		ОписаниеПечатнойФормы = КоллекцияПечатныхФорм.Найти(ВРег("РеестрНаПеречислениеСО"), "ИмяВРЕГ");
		Если ОписаниеПечатнойФормы <> Неопределено Тогда
			ОписаниеПечатнойФормы.ДоступенВыводНаДругихЯзыках = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Подготовка табличных печатных документов.

Функция ПечатьРеестра(МассивОбъектов, ОбъектыПечати, ВидРеестра, КодЯзыка = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.КлючПараметровПечати = "АвансовыйОтчет_Реестр_" + ВидРеестра;
	
	ДатаПрекращенияВыводаРНН = Константы.ДатаПрекращенияВыводаРННВПервичныхДокументах.Получить();
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.АвансовыйОтчет.ПФ_MXL_Реестр", КодЯзыка);
	
	ЗапросПоШапкеДокумента = Новый Запрос();
	ЗапросПоШапкеДокумента.Текст = "ВЫБРАТЬ
	|	АвансовыйОтчет.Организация.Наименование КАК НазваниеОрганизации,
	|	АвансовыйОтчет.Организация.КБЕ КАК КБЕОрганизации,
	|	АвансовыйОтчет.Дата,
	|	АвансовыйОтчет.Организация,
	|	АвансовыйОтчет.СтруктурноеПодразделение,
	|	АвансовыйОтчет.Ссылка
	|ИЗ
	|	Документ.АвансовыйОтчет КАК АвансовыйОтчет
	|ГДЕ
	|	АвансовыйОтчет.Ссылка В(&ПарамСсылка)";
	ЗапросПоШапкеДокумента.УстановитьПараметр("ПарамСсылка", МассивОбъектов);
	
	// получим данные для печати
	ВыборкаПоШапкеДокумента = ЗапросПоШапкеДокумента.Выполнить().Выбрать();
	Пока ВыборкаПоШапкеДокумента.Следующий() Цикл
		
		Если ТабДокумент.ВысотаТаблицы > 0 Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
		
		ВыводитьРНН = НЕ ЗначениеЗаполнено(ДатаПрекращенияВыводаРНН) ИЛИ ВыборкаПоШапкеДокумента.Дата < ДатаПрекращенияВыводаРНН;
		ОбластьШапкиТаблицы  	= Макет.ПолучитьОбласть("ШапкаТаблицы" + ?(ВыводитьРНН, "", "_ИИН"));
		ОбластьСтроки  			= Макет.ПолучитьОбласть("СтрокаРаботника" + ?(ВыводитьРНН, "", "_ИИН"));
		ОбластьШапки   			= Макет.ПолучитьОбласть("Шапка");
		ОбластьПодвалаИтог		= Макет.ПолучитьОбласть("Подвал|Итог");
		
		Если ВыводитьРНН Тогда
			ОбластьПодвала = Макет.ПолучитьОбласть("Подвал|Подписи");
		Иначе 
			ОбластьПодвала = Макет.ПолучитьОбласть("Подвал|Подписи_ИИН");
		КонецЕсли;
		
		СтруктурнаяЕдиницаОрганизация = ОбщегоНазначенияБК.ПолучитьСтруктурнуюЕдиницу(ВыборкаПоШапкеДокумента.Организация, ВыборкаПоШапкеДокумента.СтруктурноеПодразделение);
		СведенияОбОрганизации 	      = ОбщегоНазначенияБКВызовСервера.СведенияОЮрФизЛице(СтруктурнаяЕдиницаОрганизация, ВыборкаПоШапкеДокумента.Дата, , );
		ПредставлениеОрганизации      = ОбщегоНазначенияБКВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,");
		
		ОбластьШапки.Параметры.НазваниеОрганизации = ПредставлениеОрганизации;
		
		ЗапросПоРаботникам = Новый Запрос();
		Если ВидРеестра = "ПеречислениеСоциальныхОтчислений" Тогда
			ТекстЗапросаПоРаботникам =  "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	СОПеречислениеВФонды.ФизЛицо КАК ФизЛицо,
			|	СОПеречислениеВФонды.ФизЛицо.СИК КАК СИК,
			|	СОПеречислениеВФонды.ФизЛицо.РНН КАК РНН,
			|	СОПеречислениеВФонды.ФизЛицо.ИдентификационныйКодЛичности КАК ИИН,
			|	СОПеречислениеВФонды.ФизЛицо.ДатаРождения КАК ДатаРождения,
			|	ВЫБОР
			|		КОГДА СОПеречислениеВФонды.Сумма ЕСТЬ NULL 
			|			ТОГДА 0
			|		ИНАЧЕ СОПеречислениеВФонды.Сумма
			|	КОНЕЦ КАК Сумма,
			|	ФИОФизЛиц.Фамилия + "" "" + ФИОФизЛиц.Имя + "" "" + ФИОФизЛиц.Отчество КАК ФИО,
			|	ФИОФизЛицПриПрисвоенииСИК.Фамилия + "" "" + ФИОФизЛицПриПрисвоенииСИК.Имя + "" "" + ФИОФизЛицПриПрисвоенииСИК.Отчество КАК ФИОПриПрисвоенииСИК,
			|	СОПеречислениеВФонды.ПериодРегистрации КАК ПериодРегистрации,
			|	СОПеречислениеВФонды.ВидОперации КАК ВидОперации
			|ИЗ
			|	(ВЫБРАТЬ
			|		СОПеречислениеВФондыСоциальныеОтчисления.ФизЛицо КАК ФизЛицо,
			|		СОПеречислениеВФондыСоциальныеОтчисления.ПериодРегистрации КАК ПериодРегистрации,
			|		СУММА(СОПеречислениеВФондыСоциальныеОтчисления.Сумма) КАК Сумма,
			|		СОПеречислениеВФондыСоциальныеОтчисления.ВидОперации КАК ВидОперации
			|	ИЗ
			|		(ВЫБРАТЬ
			|			НАЧАЛОПЕРИОДА(СОПеречислениеВФондыСоциальныеОтчисления.Ссылка.ПериодРегистрации, МЕСЯЦ) КАК ПериодРегистрации,
			|			ВЫБОР
			|				КОГДА СОПеречислениеВФондыСоциальныеОтчисления.ФизЛицо ССЫЛКА Справочник.ФизическиеЛица
			|					ТОГДА СОПеречислениеВФондыСоциальныеОтчисления.ФизЛицо
			|				ИНАЧЕ СОПеречислениеВФондыСоциальныеОтчисления.ФизЛицо.ФизЛицо
			|			КОНЕЦ КАК ФизЛицо,
			|			СОПеречислениеВФондыСоциальныеОтчисления.Сумма КАК Сумма,
			|			СОПеречислениеВФондыСоциальныеОтчисления.Ссылка.ВидОперации КАК ВидОперации
			|		ИЗ
			|			Документ.СОПеречислениеВФонды.СоциальныеОтчисления КАК СОПеречислениеВФондыСоциальныеОтчисления
			|		ГДЕ
			|			СОПеречислениеВФондыСоциальныеОтчисления.Ссылка В
			|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
			|						АвансовыйОтчетПеречислениеСоциальныхОтчислений.Документ.Ссылка
			|					ИЗ
			|						Документ.АвансовыйОтчет.ПеречислениеСоциальныхОтчислений КАК АвансовыйОтчетПеречислениеСоциальныхОтчислений
			|					ГДЕ
			|						АвансовыйОтчетПеречислениеСоциальныхОтчислений.Ссылка = &ПарамСсылка)) КАК СОПеречислениеВФондыСоциальныеОтчисления
			|	
			|	СГРУППИРОВАТЬ ПО
			|		СОПеречислениеВФондыСоциальныеОтчисления.ФизЛицо,
			|		СОПеречислениеВФондыСоциальныеОтчисления.ПериодРегистрации,
			|		СОПеречислениеВФондыСоциальныеОтчисления.ВидОперации) КАК СОПеречислениеВФонды
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛицПриПрисвоенииСИК КАК ФИОФизЛицПриПрисвоенииСИК
			|		ПО (ФИОФизЛицПриПрисвоенииСИК.ФизЛицо = СОПеречислениеВФонды.ФизЛицо)
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&парамДата, ) КАК ФИОФизЛиц
			|		ПО (ФИОФизЛиц.ФизЛицо = СОПеречислениеВФонды.ФизЛицо)
			|
			|УПОРЯДОЧИТЬ ПО
			|	ФИОФизЛиц.Фамилия + "" "" + ФИОФизЛиц.Имя + "" "" + ФИОФизЛиц.Отчество,
			|	СОПеречислениеВФонды.ПериодРегистрации
			|ИТОГИ ПО
			|	ВидОперации";
			
		Иначе // ВидРеестра = "ПеречислениеПенсионныхВзносов"
			ТекстЗапросаПоРаботникам =  "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			                            |	ОПВПеречислениеВФонды.ФизЛицо КАК ФизЛицо,
			                            |	ОПВПеречислениеВФонды.ФизЛицо.СИК КАК СИК,
			                            |	ОПВПеречислениеВФонды.ФизЛицо.РНН КАК РНН,
			                            |	ОПВПеречислениеВФонды.ФизЛицо.ИдентификационныйКодЛичности КАК ИИН,
			                            |	ОПВПеречислениеВФонды.ФизЛицо.ДатаРождения КАК ДатаРождения,
			                            |	ВЫБОР
			                            |		КОГДА ОПВПеречислениеВФонды.Сумма ЕСТЬ NULL
			                            |			ТОГДА 0
			                            |		ИНАЧЕ ОПВПеречислениеВФонды.Сумма
			                            |	КОНЕЦ КАК Сумма,
			                            |	ФИОФизЛиц.Фамилия + "" "" + ФИОФизЛиц.Имя + "" "" + ФИОФизЛиц.Отчество КАК ФИО,
			                            |	ФИОФизЛицПриПрисвоенииСИК.Фамилия + "" "" + ФИОФизЛицПриПрисвоенииСИК.Имя + "" "" + ФИОФизЛицПриПрисвоенииСИК.Отчество КАК ФИОПриПрисвоенииСИК,
			                            |	ОПВПеречислениеВФонды.ПериодРегистрации КАК ПериодРегистрации,
			                            |	ОПВПеречислениеВФонды.ВидОперации КАК ВидОперации
			                            |ИЗ
			                            |	(ВЫБРАТЬ
			                            |		ОПВПеречислениеВФондыПенсионныеВзносы.ФизЛицо КАК ФизЛицо,
			                            |		ОПВПеречислениеВФондыПенсионныеВзносы.ПериодРегистрации КАК ПериодРегистрации,
			                            |		СУММА(ОПВПеречислениеВФондыПенсионныеВзносы.Сумма) КАК Сумма,
			                            |		ОПВПеречислениеВФондыПенсионныеВзносы.ВидОперации КАК ВидОперации
			                            |	ИЗ
			                            |		(ВЫБРАТЬ
			                            |			НАЧАЛОПЕРИОДА(ОПВПеречислениеВФондыПенсионныеВзносы.Ссылка.ПериодРегистрации, МЕСЯЦ) КАК ПериодРегистрации,
			                            |			ВЫБОР
			                            |				КОГДА ОПВПеречислениеВФондыПенсионныеВзносы.ФизЛицо ССЫЛКА Справочник.Контрагенты
			                            |					ТОГДА ОПВПеречислениеВФондыПенсионныеВзносы.ФизЛицо.ФизЛицо
			                            |				ИНАЧЕ ОПВПеречислениеВФондыПенсионныеВзносы.ФизЛицо
			                            |			КОНЕЦ КАК ФизЛицо,
			                            |			ОПВПеречислениеВФондыПенсионныеВзносы.Сумма КАК Сумма,
			                            |			ОПВПеречислениеВФондыПенсионныеВзносы.Ссылка.ВидОперации КАК ВидОперации
			                            |		ИЗ
			                            |			Документ.ОПВПеречислениеВФонды.ПенсионныеВзносы КАК ОПВПеречислениеВФондыПенсионныеВзносы
			                            |		ГДЕ
			                            |			ОПВПеречислениеВФондыПенсионныеВзносы.Ссылка В
			                            |					(ВЫБРАТЬ РАЗЛИЧНЫЕ
			                            |						АвансовыйОтчетПеречислениеПенсионныхВзносов.Документ.Ссылка
			                            |					ИЗ
			                            |						Документ.АвансовыйОтчет.ПеречислениеПенсионныхВзносов КАК АвансовыйОтчетПеречислениеПенсионныхВзносов
			                            |					ГДЕ
			                            |						АвансовыйОтчетПеречислениеПенсионныхВзносов.Ссылка = &ПарамСсылка)) КАК ОПВПеречислениеВФондыПенсионныеВзносы
			                            |	
			                            |	СГРУППИРОВАТЬ ПО
			                            |		ОПВПеречислениеВФондыПенсионныеВзносы.ФизЛицо,
			                            |		ОПВПеречислениеВФондыПенсионныеВзносы.ПериодРегистрации,
			                            |		ОПВПеречислениеВФондыПенсионныеВзносы.ВидОперации) КАК ОПВПеречислениеВФонды
			                            |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛицПриПрисвоенииСИК КАК ФИОФизЛицПриПрисвоенииСИК
			                            |		ПО (ФИОФизЛицПриПрисвоенииСИК.ФизЛицо = ОПВПеречислениеВФонды.ФизЛицо)
			                            |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&парамДата, ) КАК ФИОФизЛиц
			                            |		ПО (ФИОФизЛиц.ФизЛицо = ОПВПеречислениеВФонды.ФизЛицо)
			                            |
			                            |УПОРЯДОЧИТЬ ПО
			                            |	ФИОФизЛиц.Фамилия + "" "" + ФИОФизЛиц.Имя + "" "" + ФИОФизЛиц.Отчество,
			                            |	ОПВПеречислениеВФонды.ПериодРегистрации
			                            |ИТОГИ ПО
			                            |	ВидОперации";
		КонецЕсли;
		
		ЗапросПоРаботникам.Текст = ТекстЗапросаПоРаботникам;
		ЗапросПоРаботникам.УстановитьПараметр("ПарамСсылка", ВыборкаПоШапкеДокумента.Ссылка);
		ЗапросПоРаботникам.УстановитьПараметр("ПарамДата",   ВыборкаПоШапкеДокумента.Дата);
		
		ВыборкаПоВидуВзносов = ЗапросПоРаботникам.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаПоВидуВзносов.Следующий() Цикл
			
			// массив с двумя строками - для разбиения на страницы
			ВыводимыеОбласти = Новый Массив();
			ВыводимыеОбласти.Добавить(ОбластьСтроки);
			
			ОбластьШапки.Параметры.Заполнить(ВыборкаПоШапкеДокумента);
			
			Если ВидРеестра = "ПеречислениеПенсионныхВзносов" Тогда
				Если ВыборкаПоВидуВзносов.ВидОперации = Перечисления.ВидыОперацийОПВПеречислениеВФонды.ПеречислениеОбязательныхПенсионныхВзносов Тогда
					ОбластьШапки.Параметры.Наименование  = НСтр("ru = 'Список на перечисление обязательных пенсионных взносов'", КодЯзыка);
				ИначеЕсли ВыборкаПоВидуВзносов.ВидОперации = Перечисления.ВидыОперацийОПВПеречислениеВФонды.ПеречислениеОбязательныхПенсионныхВзносовРаботодателя Тогда
					ОбластьШапки.Параметры.Наименование  = НСтр("ru = 'Список на перечисление обязательных взносов работодателя'", КодЯзыка);
				Иначе
					ОбластьШапки.Параметры.Наименование  = НСтр("ru = 'Список на перечисление обязательных профессиональных пенсионных взносов'", КодЯзыка);
				КонецЕсли;
			ИначеЕсли ВидРеестра = "ПеречислениеСоциальныхОтчислений" Тогда
				Если ВыборкаПоВидуВзносов.ВидОперации = Перечисления.ВидыОперацийСОПеречислениеВФонды.ПеречислениеОбязательныхСоциальныхОтчислений Тогда
					ОбластьШапки.Параметры.Наименование  = НСтр("ru = 'Список на перечисление обязательных социальных отчислений'", КодЯзыка);
				ИначеЕсли ВыборкаПоВидуВзносов.ВидОперации = Перечисления.ВидыОперацийСОПеречислениеВФонды.ПеречислениеВзносовОСМС Тогда
					ОбластьШапки.Параметры.Наименование  = НСтр("ru = 'Список на перечисление взносов обязательного социального медицинского страхования'", КодЯзыка);
				Иначе
					ОбластьШапки.Параметры.Наименование  = НСтр("ru = 'Список на перечисление отчислений обязательного социального медицинского страхования'", КодЯзыка);
				КонецЕсли;
				
			КонецЕсли;
			
			ТекстРНН_БИН  = "";
			
			ОбластьШапки.Параметры.ОрганизацияРНН_БИН = ОбщегоНазначенияБК.ПолучитьРегистрационныйНомерОрганизацииКонтрагентаВПечатнуюФорму(СведенияОбОрганизации, ВыборкаПоШапкеДокумента.Дата, Ложь, ТекстРНН_БИН);
			ОбластьШапки.Параметры.ТекстРНН_БИН       = ТекстРНН_БИН;
			
			ТабДокумент.Вывести(ОбластьШапки);
			
			ТабДокумент.Вывести(ОбластьШапкиТаблицы);
			
			// по работникам
			ВыборкаПоРаботникам = ВыборкаПоВидуВзносов.Выбрать();
			
			// подсчитываем количество строк документа - для корректного разбиения на страницы
			ВсегоСтрокДокумента = ВыборкаПоРаботникам.Количество();
			
			НомерСтроки = 1; СуммаИтого = 0;
			Пока ВыборкаПоРаботникам.Следующий() Цикл
				Если ВыборкаПоРаботникам.Сумма <=0 Тогда
					Продолжить;
				КонецЕсли;
				
				ОбластьСтроки.Параметры.Заполнить(ВыборкаПоРаботникам);
				ОбластьСтроки.Параметры.НомерСтроки   = НомерСтроки;
				ОбластьСтроки.Параметры.ПериодПлатежа = ВыборкаПоРаботникам.ПериодРегистрации;
				ОбластьСтроки.Параметры.РНН_ИИН		  = ?(ВыводитьРНН, ВыборкаПоРаботникам.РНН, ВыборкаПоРаботникам.ИИН);
				
				// Проверим, уместится ли строка на странице или надо открывать новую страницу
				ВывестиПодвалЛиста = Не ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабДокумент, ВыводимыеОбласти);
				Если Не ВывестиПодвалЛиста и НомерСтроки = ВсегоСтрокДокумента Тогда
					ВыводимыеОбласти.Добавить(ОбластьПодвала);
					ВывестиПодвалЛиста = Не ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабДокумент, ВыводимыеОбласти);
				КонецЕсли;
				Если ВывестиПодвалЛиста Тогда
					ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
					ТабДокумент.Вывести(ОбластьШапки);
					ТабДокумент.Вывести(ОбластьШапкиТаблицы);			
				КонецЕсли;
				
				ТабДокумент.Вывести(ОбластьСтроки);
				СуммаИтого  = СуммаИтого + ВыборкаПоРаботникам.Сумма;
				НомерСтроки = НомерСтроки + 1;
				
			КонецЦикла;
			
			// подвал
			ОбластьПодвалаИтог.Параметры.СуммаИтого	 = Формат(СуммаИтого, "ЧЦ=10; ЧДЦ=2; ЧРД=,");
			ОбластьПодвала.Параметры.КоличествоСтрок = ВсегоСтрокДокумента;
			ОбластьПодвала.Параметры.СуммаПрописью   = ОбщегоНазначенияБКВызовСервера.СформироватьСуммуПрописью(СуммаИтого, ВалютаРегламентированногоУчета);
			
			ОтветЛица = ОбщегоНазначенияБКВызовСервера.ОтветственныеЛицаОрганизаций(ВыборкаПоШапкеДокумента.Организация, ВыборкаПоШапкеДокумента.Дата, Пользователи.ТекущийПользователь().ФизЛицо);
			ОбластьПодвала.Параметры.Руководитель = ОтветЛица.Руководитель;
			ОбластьПодвала.Параметры.ГлавныйБухгалтер = ?(ПустаяСтрока(ОтветЛица.ГлавныйБухгалтерДляПодписиБанковскихДокументов), НСтр("ru = 'Не предусмотрен'", КодЯзыка), ОтветЛица.ГлавныйБухгалтерДляПодписиБанковскихДокументов);
			
			ТабДокумент.Вывести(ОбластьПодвала);
			ТабДокумент.Присоединить(ОбластьПодвалаИтог);
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			
		КонецЦикла;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, НомерСтрокиНачало, ОбъектыПечати, ВыборкаПоШапкеДокумента.Ссылка);
		
	КонецЦикла;
	
	Возврат ТабДокумент;
	
КонецФункции

Функция ПечатьТ3(МассивОбъектов, ОбъектыПечати) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.АвансовыйОтчет.ПФ_MXL_Т3");
	
	КодЯзыка = Метаданные.Языки.Русский.КодЯзыка;
	Макет.КодЯзыка =  КодЯзыка;
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.КлючПараметровПечати = "АвансовыйОтчет_Т3";
	
	ОтображатьСтруктурныеПодразделения = ПолучитьФункциональнуюОпцию("ПоддержкаРаботыСоСтруктурнымиПодразделениями");
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", МассивОбъектов);

	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	АвансовыйОтчет.Номер,
	|	АвансовыйОтчет.Дата КАК ДатаДокумента,
	|	АвансовыйОтчет.ФизЛицо КАК ПодотчетноеЛицо,
	|	АвансовыйОтчет.ФизЛицо.Представление КАК ПредставлениеПодотчетногоЛица,
	|	АвансовыйОтчет.Ответственный,
	|	АвансовыйОтчет.СтруктурноеПодразделение,
	|	АвансовыйОтчет.Организация.Ссылка КАК Организация,
	|	АвансовыйОтчет.СчетРасчетовСПодотчетнымЛицом,
	|	АвансовыйОтчет.НазначениеАванса КАК НазначениеАванса,
	|	АвансовыйОтчет.ВалютаДокумента,
	|	АвансовыйОтчет.УчитыватьНДС,
	|	АвансовыйОтчет.НДСВключенВСтоимость,
	|	АвансовыйОтчет.СуммаВключаетНДС,
	|	АвансовыйОтчет.ВалютаДокумента.Представление КАК ПредставлениеВалютыДокумента,
	|	АвансовыйОтчет.СуммаДокумента,
	|	АвансовыйОтчет.КоличествоДокументов КАК КоличествоДокументовВПриложении,
	|	АвансовыйОтчет.КоличествоЛистов КАК КоличествоЛистовВПриложении,
	|	АвансовыйОтчет.ДатаНачалаОтчетногоПериода,
	|	АвансовыйОтчет.ДатаОкончанияОтчетногоПериода,
	|	АвансовыйОтчет.ВыданныеАвансы.(
	|		Сумма,
	|		Документ,
	|		НомерСтроки
	|	),
	|	АвансовыйОтчет.Ссылка
	|ИЗ
	|	Документ.АвансовыйОтчет КАК АвансовыйОтчет
	|ГДЕ
	|	АвансовыйОтчет.Ссылка В(&ТекущийДокумент)";
	Шапка = Запрос.Выполнить().Выбрать();
	
	Пока Шапка.Следующий() Цикл
		
		Авансы = Шапка.ВыданныеАвансы.Выбрать();
		
		Если ТабДокумент.ВысотаТаблицы > 0 Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
		
		// ТИТУЛЬНЫЙ ЛИСТ
		Запрос = Новый Запрос();
		
		Запрос.УстановитьПараметр("СчетРасчета", 		  	  Шапка.СчетРасчетовСПодотчетнымЛицом);
		Запрос.УстановитьПараметр("Сотрудник", 	 			  Шапка.ПодотчетноеЛицо);
		Запрос.УстановитьПараметр("Организация",			  Шапка.Организация);
		Запрос.УстановитьПараметр("СтруктурноеПодразделение", Шапка.СтруктурноеПодразделение);
		Запрос.УстановитьПараметр("ДатаИтогов", 			  Шапка.Ссылка.МоментВремени());
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ТиповойОстатки.Счет,
		|	ТиповойОстатки.СуммаОстатокДт,
		|	ТиповойОстатки.СуммаОстатокКт
		|ИЗ
		|	РегистрБухгалтерии.Типовой.Остатки(&ДатаИтогов, Счет = &СчетРасчета, ,
		|	                                        Организация = &Организация И СтруктурноеПодразделение = &СтруктурноеПодразделение И Субконто1 = &Сотрудник) КАК ТиповойОстатки";
		ПредыдущийАванс = Запрос.Выполнить().Выбрать();
		ПредыдущийАванс.Следующий();
		
		Перерасход = ?(ПредыдущийАванс.СуммаОстатокДт = Null, 0, ПредыдущийАванс.СуммаОстатокКт);
		Остаток    = ?(ПредыдущийАванс.СуммаОстатокКт = Null, 0, ПредыдущийАванс.СуммаОстатокДт);
		ДанныеВал  = ОбщегоНазначенияБК.ПолучитьКурсВалюты(Шапка.ВалютаДокумента, Шапка.ДатаДокумента);
		
		СуммаДоДокумента = 0;
		
		Если НЕ ЗначениеЗаполнено(Перерасход) Тогда
			Перерасход = 0;
		Иначе
			СуммаДоДокумента = - Число(Перерасход);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Остаток) Тогда
			Остаток = 0;
		Иначе
			СуммаДоДокумента = Число(Остаток);
		КонецЕсли;
		
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("ТаблицаДокументов", Шапка.ВыданныеАвансы.Выгрузить());

		Запрос.УстановитьПараметр("ФизЛицо", Шапка.ПодотчетноеЛицо);
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаДокументов.Документ КАК Документ,
		|	ТаблицаДокументов.НомерСтроки КАК НомерСтроки
		|ПОМЕСТИТЬ ТаблицаДокументов
		|ИЗ
		|	&ТаблицаДокументов КАК ТаблицаДокументов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СУММА(РасходныйКассовыйОрдер.СуммаДокумента) КАК СуммаДокумента,
		|	РасходныйКассовыйОрдер.Ссылка КАК Ссылка,
		|	РасходныйКассовыйОрдер.Организация КАК Организация,
		|	РасходныйКассовыйОрдер.СтруктурноеПодразделениеОтправитель КАК СтруктурноеПодразделение,
		|	РасходныйКассовыйОрдер.ВалютаДокумента КАК ВалютаДокумента,
		|	РасходныйКассовыйОрдер.Дата КАК Дата,
		|	ТаблицаДокументов.НомерСтроки КАК НомерСтроки
		|ИЗ
		|	Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДокументов КАК ТаблицаДокументов
		|		ПО РасходныйКассовыйОрдер.Ссылка = ТаблицаДокументов.Документ
		|
		|СГРУППИРОВАТЬ ПО
		|	РасходныйКассовыйОрдер.Ссылка,
		|	РасходныйКассовыйОрдер.Организация,
		|	РасходныйКассовыйОрдер.СтруктурноеПодразделениеОтправитель,
		|	РасходныйКассовыйОрдер.ВалютаДокумента,
		|	РасходныйКассовыйОрдер.Дата,
		|	ТаблицаДокументов.НомерСтроки
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СУММА(ПеречислениеВПодотчет.СуммаПлатежа),
		|	ПеречислениеВПодотчет.Ссылка,
		|	ПеречислениеВПодотчет.Ссылка.Организация,
		|	ПеречислениеВПодотчет.Ссылка.СтруктурноеПодразделениеОтправитель,
		|	ПеречислениеВПодотчет.Ссылка.ВалютаДокумента,
		|	ПеречислениеВПодотчет.Ссылка.Дата,
		|	ТаблицаДокументов.НомерСтроки
		|ИЗ
		|	Документ.ПлатежноеПоручениеИсходящее.ПеречислениеВПодотчет КАК ПеречислениеВПодотчет
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДокументов КАК ТаблицаДокументов
		|		ПО ПеречислениеВПодотчет.Ссылка = ТаблицаДокументов.Документ
		|ГДЕ
		|	ПеречислениеВПодотчет.ФизЛицо = &ФизЛицо
		|
		|СГРУППИРОВАТЬ ПО
		|	ПеречислениеВПодотчет.Ссылка,
		|	ПеречислениеВПодотчет.Ссылка.Организация,
		|	ПеречислениеВПодотчет.Ссылка.СтруктурноеПодразделениеОтправитель,
		|	ПеречислениеВПодотчет.Ссылка.ВалютаДокумента,
		|	ПеречислениеВПодотчет.Ссылка.Дата,
		|	ТаблицаДокументов.НомерСтроки
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТаблицаДокументов.НомерСтроки";

		
		Таб = Запрос.Выполнить().Выгрузить();
		Таб.Свернуть("Ссылка, Организация, СтруктурноеПодразделение, ВалютаДокумента, Дата", "СуммаДокумента");
		
		Для Каждого СтрокаТаблицы Из Таб Цикл
			ТекКурсДока = ОбщегоНазначенияБК.КурсДокумента(СтрокаТаблицы.Ссылка, ВалютаРегламентированногоУчета);
			ТекКратДока = ОбщегоНазначенияБК.КратностьДокумента(СтрокаТаблицы.Ссылка, ВалютаРегламентированногоУчета);
			СтрокаТаблицы.СуммаДокумента = ОбщегоНазначенияБККлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаДокумента, СтрокаТаблицы.ВалютаДокумента, ВалютаРегламентированногоУчета, ТекКурсДока, 1, ТекКратДока, 1);
		КонецЦикла;
		
		ПолученоИзКассы = Число(Таб.Итог("СуммаДокумента"));
		
		СтруктурнаяЕдиницаОрганизация = ОбщегоНазначенияБК.ПолучитьСтруктурнуюЕдиницу(Шапка.Организация, Шапка.СтруктурноеПодразделение);
		
		КурсДока = ОбщегоНазначенияБК.КурсДокумента(Шапка.Ссылка, ВалютаРегламентированногоУчета);
		КратДока = ОбщегоНазначенияБК.КратностьДокумента(Шапка.Ссылка, ВалютаРегламентированногоУчета);
		КурсоваяРазница = 0;
		
		Если НЕ (Шапка.ВалютаДокумента = ВалютаРегламентированногоУчета) Тогда
			ЗапросПоПроводкам = Новый Запрос();
			ЗапросПоПроводкам.УстановитьПараметр("Ссылка", Шапка.Ссылка);
			ЗапросПоПроводкам.УстановитьПараметр("КурсоваяРазница", Справочники.Доходы.КурсовыеРазницы);
			ЗапросПоПроводкам.Текст = 
			"ВЫБРАТЬ
			|	СУММА(ВЫБОР
			|			КОГДА ТиповойДвиженияССубконто.СубконтоДт1 = &КурсоваяРазница
			|				ТОГДА ТиповойДвиженияССубконто.Сумма
			|			ИНАЧЕ 0
			|		КОНЕЦ) КАК СуммаДт,
			|	СУММА(ВЫБОР
			|			КОГДА ТиповойДвиженияССубконто.СубконтоКт1 = &КурсоваяРазница
			|				ТОГДА ТиповойДвиженияССубконто.Сумма
			|			ИНАЧЕ 0
			|		КОНЕЦ) КАК СуммаКт
			|ИЗ
			|	РегистрБухгалтерии.Типовой.ДвиженияССубконто(, , Регистратор = &Ссылка) КАК ТиповойДвиженияССубконто
			|";
			
			ВыборкаКР = ЗапросПоПроводкам.Выполнить().Выгрузить();
			КурсоваяРазница = ВыборкаКР.Итог("СуммаДт") - ВыборкаКР.Итог("СуммаКт");
			ПолученоИзКассы = ПолученоИзКассы + КурсоваяРазница;
		КонецЕсли;
		
		СуммаДоДокумента = СуммаДоДокумента - ПолученоИзКассы;
		
		ДанныеПодотчетногоЛица = ПроцедурыУправленияПерсоналомВызовСервера.ДанныеФизЛица(Шапка.Организация, Шапка.ПодотчетноеЛицо, Шапка.ДатаДокумента);
		
		ПодотчетноеЛицо = ДанныеПодотчетногоЛица.Представление;
		ТабельныйНомер  = ДанныеПодотчетногоЛица.ТабельныйНомер;
		Должность       = ДанныеПодотчетногоЛица.Должность;
		
		Если НЕ Шапка.СтруктурноеПодразделение = Справочники.ПодразделенияОрганизаций.ПустаяСсылка() Тогда
			Подразделение = Шапка.СтруктурноеПодразделение;
		Иначе
			Если ОтображатьСтруктурныеПодразделения Тогда
				Подразделение = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
			Иначе			
				Подразделение = ДанныеПодотчетногоЛица.ПодразделениеОрганизации;
			КонецЕсли;
		КонецЕсли;
		
		НомерДокумента  = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(Шапка.Номер, Шапка.Ссылка);
		
		// Выводим титульный лист авансового отчета
		
		ОбластьТитул1 = Макет.ПолучитьОбласть("Титул1");
		ОбластьТитул1.Параметры.Заполнить(Шапка);
		
		ОбластьТитул1.Параметры.ПредставлениеПодотчетногоЛица          = ПодотчетноеЛицо;
		ОбластьТитул1.Параметры.ДолжностьПодотчетногоЛицаПредставление = Должность;
		ОбластьТитул1.Параметры.ТабельныйНомерПодотчетногоЛица         = ТабельныйНомер;
		ОбластьТитул1.Параметры.НомерДокумента                         = НомерДокумента;
		ОбластьТитул1.Параметры.ПолученоИзКассы                        = ПолученоИзКассы;           		
		
		Если СуммаДоДокумента >= 0 тогда
			ОбластьТитул1.Параметры.НачальныйОстаток    =   СуммаДоДокумента;
		Иначе
			ОбластьТитул1.Параметры.НачальныйПерерасход = - СуммаДоДокумента;
		КонецЕсли;
		
		СведенияОбОрганизации = ОбщегоНазначенияБКВызовСервера.СведенияОЮрФизЛице(СтруктурнаяЕдиницаОрганизация, Шапка.ДатаДокумента);
		ПредставлениеОрганизации = ОбщегоНазначенияБКВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,");
		
		ОбластьТитул1.Параметры.ПредставлениеОрганизации = ПредставлениеОрганизации;
		ОбластьТитул1.Параметры.ОрганизацияРНН_БИН = ОбщегоНазначенияБКВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации, "БИН_ИИН,", Ложь, Шапка.ДатаДокумента, ?(СтрНачинаетсяС(ТекущийКодЛокализации(), "ru"), "ru", "kz"));
		
		Руководители = ОбщегоНазначенияБКВызовСервера.ОтветственныеЛицаОрганизаций(СтруктурнаяЕдиницаОрганизация, Шапка.ДатаДокумента);
		Руководитель = Руководители.Руководитель;
		
		ГлавныйБухгалтер = ?(НЕ ЗначениеЗаполнено(Руководители.ГлавныйБухгалтер), НСтр("ru = 'Не предусмотрен'", КодЯзыка), Руководители.ГлавныйБухгалтер);
		
		ОбластьТитул1.Параметры.РасшифровкаПодписи = Руководители.Руководитель;
		
		ОбластьТитул1.Параметры.ДатаДокумента = Шапка.ДатаДокумента;
		
		ЗапросПоПроводкам = Новый Запрос();
		ЗапросПоПроводкам.УстановитьПараметр("Ссылка", Шапка.Ссылка);
		ЗапросПоПроводкам.Текст = "ВЫБРАТЬ
		|	Типовой.СчетДт,
		|	Типовой.СчетКт,
		|	СУММА(Типовой.Сумма) КАК Сумма,
		|	МИНИМУМ(Типовой.НомерСтроки) КАК НомерСтроки
		|ИЗ
		|	РегистрБухгалтерии.Типовой КАК Типовой
		|ГДЕ
		|	Типовой.Регистратор = &Ссылка
		|		И Типовой.Активность = ИСТИНА
		|
		|СГРУППИРОВАТЬ ПО
		|	Типовой.СчетДт,
		|	Типовой.СчетКт
		|
		|УПОРЯДОЧИТЬ ПО
		|	МИНИМУМ(Типовой.НомерСтроки) УБЫВ";
		ТаблицаПроводок = ЗапросПоПроводкам.Выполнить().Выгрузить();
		
		Для Шаг = 1 По 3 Цикл
			
			ОчиститьСтрокуПоСчетам(ОбластьТитул1, "СубСчетДебет"  + (Шаг), "СубСчетКредит" + (Шаг), "Сумма" + (Шаг));
			ЗаполнитьСтрокуПоСчетам(ТаблицаПроводок, ОбластьТитул1, "СубСчетДебет"  + (Шаг), "СубСчетКредит" + (Шаг), "Сумма" + (Шаг));
			
		КонецЦикла;
		
		ТабДокумент.Вывести(ОбластьТитул1);
		
		ОбластьИсточникАванса = Макет.ПолучитьОбласть("СтрокаИсточникАванса");
		НомерИсточника = 0;
		
		Если Таб.Количество() = 0 Тогда
			
			Для Шаг = 1 По 2 Цикл
				ОбластьИсточникАванса.Параметры.ИсточникАванса = "" + Шаг + ".";
				ОчиститьСтрокуПоСчетам(ОбластьИсточникАванса, "СубСчетДебет4", "СубСчетКредит4", "Сумма4");
				ЗаполнитьСтрокуПоСчетам(ТаблицаПроводок, ОбластьИсточникАванса, "СубСчетДебет4", "СубСчетКредит4", "Сумма4");
				ТабДокумент.Вывести(ОбластьИсточникАванса);
			КонецЦикла;
			
		Иначе
			
			Для Каждого СтрокаДетали Из Таб Цикл
				ИсточникАванса = "";
				НомерИсточника = НомерИсточника + 1;
				СтруктурЕдиницаОрганизация_ = ОбщегоНазначенияБК.ПолучитьСтруктурнуюЕдиницу(СтрокаДетали.Организация, СтрокаДетали.СтруктурноеПодразделение);
				СведенияОбОрганизации_     = ОбщегоНазначенияБКВызовСервера.СведенияОЮрФизЛице(СтруктурЕдиницаОрганизация_, СтрокаДетали.Дата);
				ИсточникАванса = СведенияОбОрганизации_.Представление;
				ОбластьИсточникАванса.Параметры.ИсточникАванса = Строка(НомерИсточника) + ". " + ИсточникАванса + ", " + Формат(СтрокаДетали.Дата, "Л=" + КодЯзыка + "; ДЛФ=Д");
				ОбластьИсточникАванса.Параметры.СуммаДеталь = СтрокаДетали.СуммаДокумента;
				
				ОчиститьСтрокуПоСчетам(ОбластьИсточникАванса, "СубСчетДебет4", "СубСчетКредит4", "Сумма4");
				ЗаполнитьСтрокуПоСчетам(ТаблицаПроводок, ОбластьИсточникАванса, "СубСчетДебет4", "СубСчетКредит4", "Сумма4");
				
				ТабДокумент.Вывести(ОбластьИсточникАванса);
			КонецЦикла;
			
		КонецЕсли;
		
		Если Таб.Количество() = 1 Тогда
			ОбластьИсточникАванса.Параметры.ИсточникАванса = "2.";
			ОбластьИсточникАванса.Параметры.СуммаДеталь    = "";
			
			ОчиститьСтрокуПоСчетам(ОбластьИсточникАванса, "СубСчетДебет4", "СубСчетКредит4", "Сумма4");
			ЗаполнитьСтрокуПоСчетам(ТаблицаПроводок, ОбластьИсточникАванса, "СубСчетДебет4", "СубСчетКредит4", "Сумма4");
			
			ТабДокумент.Вывести(ОбластьИсточникАванса);
		КонецЕсли;
		
		ОбластьТитул2 = Макет.ПолучитьОбласть("Титул2");
		ОбластьТитул2.Параметры.Заполнить(Шапка);
		
		ОбластьТитул2.Параметры.ПредставлениеГлавногоБухгалтера = ГлавныйБухгалтер;
		ДанныеОФизЛицеОтветственный = ПроцедурыУправленияПерсоналомВызовСервера.ДанныеФизЛица(Шапка.Организация, Шапка.Ответственный.ФизЛицо, Шапка.ДатаДокумента);
		
		Если ГлавныйБухгалтер = Шапка.Ответственный Тогда
			ОбластьТитул2.Параметры.Бухгалтер = НСтр("ru = 'Не предусмотрен'", КодЯзыка);
		Иначе	
			ОбластьТитул2.Параметры.Бухгалтер = ?(НЕ ЗначениеЗаполнено(ДанныеОФизЛицеОтветственный.Представление), Шапка.Ответственный, ДанныеОФизЛицеОтветственный.Представление);
		КонецЕсли; 
		
		Для Шаг = 5 По 8 Цикл
			ОчиститьСтрокуПоСчетам(ОбластьТитул2, "СубСчетДебет"  + (Шаг), "СубСчетКредит" + (Шаг), "Сумма" + (Шаг));
			ЗаполнитьСтрокуПоСчетам(ТаблицаПроводок, ОбластьТитул2, "СубСчетДебет"  + (Шаг), "СубСчетКредит" + (Шаг), "Сумма" + (Шаг));
		КонецЦикла;
		
		ЗапросТовары = Новый Запрос();
		ЗапросТовары.УстановитьПараметр("ВалютаРеглУчета"           , ВалютаРегламентированногоУчета);
		ЗапросТовары.УстановитьПараметр("ТекущийДокумент"           , Шапка.Ссылка);
		ЗапросТовары.УстановитьПараметр("СчетЗарПлаты"              , ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПоОплатеТруда);
		ЗапросТовары.УстановитьПараметр("СчетДепонированнойЗарПлаты", ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПоДепонированнойЗаработнойПлате);
		ЗапросТовары.УстановитьПараметр("СчетПоИЛ"                  , ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПоИсполнительнымЛистам);
		ЗапросТовары.УстановитьПараметр("ПустойСчет"                , ПланыСчетов.Типовой.ПустаяСсылка());
		
		ЗапросТовары.УстановитьПараметр("НаименованиеРасхода_ПлатежнаяВедомость", НСтр("ru = 'Платежная ведомость'", КодЯзыка));
		ЗапросТовары.УстановитьПараметр("НаименованиеРасхода_ПочтовыйПеревод"   , НСтр("ru = 'Почтовый перевод'", КодЯзыка));
		ЗапросТовары.УстановитьПараметр("НаименованиеРасхода_ПочтовыйСбор"      , НСтр("ru = 'Почтовый сбор'", КодЯзыка));
		ЗапросТовары.УстановитьПараметр("НаименованиеРасхода_ПенсионныеВзносы"  , НСтр("ru = 'Пенсионные взносы перечисление в фонды'", КодЯзыка));
		ЗапросТовары.УстановитьПараметр("НаименованиеРасхода_СоцСтрахование"    , НСтр("ru = 'Социальное страхование перечисление в фонды'", КодЯзыка));
		ЗапросТовары.УстановитьПараметр("Содержание_ВыплатаЗаработнойПлаты"     , НСтр("ru = 'Выплата заработной платы'", КодЯзыка));
		ЗапросТовары.УстановитьПараметр("Содержание_ВыплатаДепЗаработнойПлаты"  , НСтр("ru = 'Выплата деп. заработной платы'", КодЯзыка));
		ЗапросТовары.УстановитьПараметр("Содержание_ПеречислениеПрофПВ"         , НСтр("ru = 'Перечисление профессиональных пенсионных взносов'", КодЯзыка));
		ЗапросТовары.УстановитьПараметр("Содержание_ПеречислениеПВ"             , НСтр("ru = 'Перечисление пенсионных взносов'", КодЯзыка));
		ЗапросТовары.УстановитьПараметр("Содержание_ПеречислениеСО"             , НСтр("ru = 'Перечисление взносов и отчислений соц. страхования'", КодЯзыка));
		
		СчетОПВ = Справочники.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносы.СчетУчетаРасчетовСКонтрагентомБУ;
		Если НЕ ЗначениеЗаполнено(СчетОПВ) Тогда
			СчетОПВ = ПланыСчетов.Типовой.ОбязательстваПоПенсионнымОтчислениям; 
		КонецЕсли;
		ЗапросТовары.УстановитьПараметр("СчетОПВ", СчетОПВ);
		
		СчетСО = Справочники.НалогиСборыОтчисления.ОбязательныеСоциальныеОтчисления.СчетУчетаРасчетовСКонтрагентомБУ;
		Если НЕ ЗначениеЗаполнено(СчетСО) Тогда
			СчетСО = ПланыСчетов.Типовой.ОбязательстваПоСоциальномуСтрахованию; 
		КонецЕсли;
		
		ЗапросТовары.УстановитьПараметр("СчетСО", СчетСО);
		
		ЗапросТовары.Текст ="ВЫБРАТЬ
		|	ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка,
		|	СУММА(ЗарплатаКВыплатеОрганизацийЗарплата.Сумма) КАК Сумма,
		|	СУММА(ЗарплатаКВыплатеОрганизацийЗарплата.ДепонированнаяСумма) КАК ДепонированнаяСумма,
		|	СУММА(ЗарплатаКВыплатеОрганизацийЗарплата.СуммаКВыплате) КАК СуммаКВыплате
		|ПОМЕСТИТЬ ЗарплатаКВыплате
		|ИЗ
		|	Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацийЗарплата
		|ГДЕ
		|	ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка В
		|			(ВЫБРАТЬ
		|				АвансовыйОтчет.Ведомость
		|			ИЗ
		|				Документ.АвансовыйОтчет.ВыплатаЗаработнойПлаты КАК АвансовыйОтчет
		|			ГДЕ
		|				АвансовыйОтчет.Ссылка = &ТекущийДокумент)
		|    И ЗарплатаКВыплатеОрганизацийЗарплата.ВыплаченностьЗарплаты = ЗНАЧЕНИЕ(Перечисление.ВыплаченностьЗарплаты.Выплачено)
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	1 КАК ID,
		|	АвансовыйОтчет.НомерСтроки КАК НомерСтроки,
		|	0 КАК ПорядокДляСортировки,
		|	АвансовыйОтчет.НомерВходящегоДокумента КАК ДокументНомер,
		|	АвансовыйОтчет.ДатаВходящегоДокумента КАК ДокументДата,
		|	АвансовыйОтчет.ВидВходящегоДокумента КАК НаименованиеРасхода,
		|	СУММА(ВЫБОР
		|			КОГДА АвансовыйОтчет.Ссылка.ВалютаДокумента = &ВалютаРеглУчета
		|				ТОГДА АвансовыйОтчет.Сумма
		|			ИНАЧЕ АвансовыйОтчет.Сумма * (АвансовыйОтчет.Ссылка.КурсДокумента / АвансовыйОтчет.Ссылка.КратностьДокумента)
		|		КОНЕЦ) КАК ПоОтчету,
		|	СУММА(ВЫБОР
		|			КОГДА АвансовыйОтчет.Ссылка.ВалютаДокумента = &ВалютаРеглУчета
		|				ТОГДА 0
		|			ИНАЧЕ АвансовыйОтчет.Сумма
		|		КОНЕЦ) КАК ПоОтчетуВВалюте,
		|	СУММА(ВЫБОР
		|			КОГДА АвансовыйОтчет.Ссылка.ВалютаДокумента = &ВалютаРеглУчета
		|				ТОГДА АвансовыйОтчет.СуммаНДС
		|			ИНАЧЕ АвансовыйОтчет.СуммаНДС * (АвансовыйОтчет.Ссылка.КурсДокумента / АвансовыйОтчет.Ссылка.КратностьДокумента)
		|		КОНЕЦ) КАК СуммаНДС,
		|	АвансовыйОтчет.СчетУчетаБУ КАК СчетЗатрат,
		|	АвансовыйОтчет.СчетУчетаНДС КАК СчетНДС,
		|	АвансовыйОтчет.Поставщик.Наименование КАК Поставщик,
		|	АвансовыйОтчет.Номенклатура.Наименование КАК Содержание
		|ИЗ
		|	Документ.АвансовыйОтчет.Товары КАК АвансовыйОтчет
		|ГДЕ
		|	АвансовыйОтчет.Ссылка = &ТекущийДокумент
		|
		|СГРУППИРОВАТЬ ПО
		|	АвансовыйОтчет.ВидВходящегоДокумента,
		|	АвансовыйОтчет.НомерВходящегоДокумента,
		|	АвансовыйОтчет.ДатаВходящегоДокумента,
		|	АвансовыйОтчет.СчетУчетаБУ,
		|	АвансовыйОтчет.СчетУчетаНДС,
		|	АвансовыйОтчет.НомерСтроки,
		|	АвансовыйОтчет.Поставщик.Наименование,
		|	АвансовыйОтчет.Номенклатура.Наименование
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	2,
		|	АвансовыйОтчет.НомерСтроки,
		|	0,
		|	АвансовыйОтчет.НомерВходящегоДокумента,
		|	АвансовыйОтчет.ДатаВходящегоДокумента,
		|	АвансовыйОтчет.ВидВходящегоДокумента,
		|	СУММА(ВЫБОР
		|			КОГДА АвансовыйОтчет.Ссылка.ВалютаДокумента = &ВалютаРеглУчета
		|				ТОГДА АвансовыйОтчет.Сумма
		|			ИНАЧЕ АвансовыйОтчет.Сумма * (АвансовыйОтчет.Ссылка.КурсДокумента / АвансовыйОтчет.Ссылка.КратностьДокумента)
		|		КОНЕЦ),
		|	СУММА(ВЫБОР
		|			КОГДА АвансовыйОтчет.Ссылка.ВалютаДокумента = &ВалютаРеглУчета
		|				ТОГДА 0
		|			ИНАЧЕ АвансовыйОтчет.СуммаВзаиморасчетов
		|		КОНЕЦ),
		|	0,
		|	ВЫБОР
		|		КОГДА НЕ АвансовыйОтчет.СчетУчетаРасчетовПоАвансам = &ПустойСчет
		|				И НЕ АвансовыйОтчет.СчетУчетаРасчетовСКонтрагентом = &ПустойСчет
		|			ТОГДА АвансовыйОтчет.СчетУчетаРасчетовСКонтрагентом.Код + ""("" + АвансовыйОтчет.СчетУчетаРасчетовПоАвансам.Код + "")""
		|		ИНАЧЕ ВЫБОР
		|				КОГДА НЕ АвансовыйОтчет.СчетУчетаРасчетовПоАвансам = &ПустойСчет
		|					ТОГДА АвансовыйОтчет.СчетУчетаРасчетовПоАвансам.Код
		|				КОГДА НЕ АвансовыйОтчет.СчетУчетаРасчетовСКонтрагентом = &ПустойСчет
		|					ТОГДА АвансовыйОтчет.СчетУчетаРасчетовСКонтрагентом.Код
		|			КОНЕЦ
		|	КОНЕЦ,
		|	НЕОПРЕДЕЛЕНО,
		|	АвансовыйОтчет.Контрагент.Наименование,
		|	АвансовыйОтчет.Содержание
		|ИЗ
		|	Документ.АвансовыйОтчет.ОплатаПоставщикам КАК АвансовыйОтчет
		|ГДЕ
		|	АвансовыйОтчет.Ссылка = &ТекущийДокумент
		|
		|СГРУППИРОВАТЬ ПО
		|	АвансовыйОтчет.ВидВходящегоДокумента,
		|	АвансовыйОтчет.НомерВходящегоДокумента,
		|	АвансовыйОтчет.ДатаВходящегоДокумента,
		|	ВЫБОР
		|		КОГДА НЕ АвансовыйОтчет.СчетУчетаРасчетовПоАвансам = &ПустойСчет
		|				И НЕ АвансовыйОтчет.СчетУчетаРасчетовСКонтрагентом = &ПустойСчет
		|			ТОГДА АвансовыйОтчет.СчетУчетаРасчетовСКонтрагентом.Код + ""("" + АвансовыйОтчет.СчетУчетаРасчетовПоАвансам.Код + "")""
		|		ИНАЧЕ ВЫБОР
		|				КОГДА НЕ АвансовыйОтчет.СчетУчетаРасчетовПоАвансам = &ПустойСчет
		|					ТОГДА АвансовыйОтчет.СчетУчетаРасчетовПоАвансам.Код
		|				КОГДА НЕ АвансовыйОтчет.СчетУчетаРасчетовСКонтрагентом = &ПустойСчет
		|					ТОГДА АвансовыйОтчет.СчетУчетаРасчетовСКонтрагентом.Код
		|			КОНЕЦ
		|	КОНЕЦ,
		|	АвансовыйОтчет.НомерСтроки,
		|	АвансовыйОтчет.Контрагент.Наименование,
		|	АвансовыйОтчет.Содержание
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	3,
		|	АвансовыйОтчет.НомерСтроки,
		|	0,
		|	АвансовыйОтчет.Ведомость.Номер,
		|	АвансовыйОтчет.Ведомость.Дата,
		|	&НаименованиеРасхода_ПлатежнаяВедомость,
		|	СУММА(ЗарплатаКВыплате.Сумма),
		|	0,
		|	0,
		|	&СчетЗарПлаты,
		|	НЕОПРЕДЕЛЕНО,
		|	"""",
		|	&Содержание_ВыплатаЗаработнойПлаты
		|ИЗ
		|	Документ.АвансовыйОтчет.ВыплатаЗаработнойПлаты КАК АвансовыйОтчет
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЗарплатаКВыплате КАК ЗарплатаКВыплате
		|		ПО АвансовыйОтчет.Ведомость = ЗарплатаКВыплате.Ссылка
		|			И (ЗарплатаКВыплате.Сумма <> 0)
		|ГДЕ
		|	АвансовыйОтчет.Ссылка = &ТекущийДокумент
		|
		|СГРУППИРОВАТЬ ПО
		|	АвансовыйОтчет.НомерСтроки,
		|	АвансовыйОтчет.Ведомость.Номер,
		|	АвансовыйОтчет.Ведомость.Дата
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	3,
		|	АвансовыйОтчет.НомерСтроки,
		|	0,
		|	АвансовыйОтчет.Ведомость.Номер,
		|	АвансовыйОтчет.Ведомость.Дата,
		|	&НаименованиеРасхода_ПлатежнаяВедомость,
		|	СУММА(ЗарплатаКВыплате.ДепонированнаяСумма),
		|	0,
		|	0,
		|	&СчетДепонированнойЗарПлаты,
		|	НЕОПРЕДЕЛЕНО,
		|	"""",
		|	&Содержание_ВыплатаДепЗаработнойПлаты
		|ИЗ
		|	Документ.АвансовыйОтчет.ВыплатаЗаработнойПлаты КАК АвансовыйОтчет
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЗарплатаКВыплате КАК ЗарплатаКВыплате
		|		ПО АвансовыйОтчет.Ведомость = ЗарплатаКВыплате.Ссылка
		|			И (ЗарплатаКВыплате.ДепонированнаяСумма <> 0)
		|ГДЕ
		|	АвансовыйОтчет.Ссылка = &ТекущийДокумент
		|
		|СГРУППИРОВАТЬ ПО
		|	АвансовыйОтчет.НомерСтроки,
		|	АвансовыйОтчет.Ведомость.Номер,
		|	АвансовыйОтчет.Ведомость.Дата
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	4,
		|	ИЛПеречислениеПолучателям.ДокументОснование,
		|	0,
		|	ИЛПеречислениеПолучателям.НомерВходящегоДокумента,
		|	ИЛПеречислениеПолучателям.ДатаВходящегоДокумента,
		|	&НаименованиеРасхода_ПочтовыйПеревод,
		|	СУММА(ИЛПеречислениеПолучателям.СуммаВзаиморасчетов),
		|	0,
		|	0,
		|	&СчетПоИЛ,
		|	НЕОПРЕДЕЛЕНО,
		|	ИЛПеречислениеПолучателям.Получатель.Наименование,
		|	ПОДСТРОКА(ИЛПеречислениеПолучателям.ДокументОснование.ВидИсполнительногоДокумента, 1, 200) + "" "" + ПОДСТРОКА(ИЛПеречислениеПолучателям.ДокументОснование.РеквизитыИсполнительногоДокумента, 1, 800)
		|ИЗ
		|	Документ.ИЛПеречислениеПолучателям.ИсполнительныеЛисты КАК ИЛПеречислениеПолучателям
		|ГДЕ
		|	ИЛПеречислениеПолучателям.Ссылка В
		|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|				АвансовыйОтчет.Документ
		|			ИЗ
		|				Документ.АвансовыйОтчет.ОплатаПоИсполнительнымЛистам КАК АвансовыйОтчет
		|			ГДЕ
		|				АвансовыйОтчет.Ссылка = &ТекущийДокумент)
		|
		|СГРУППИРОВАТЬ ПО
		|	ИЛПеречислениеПолучателям.ДокументОснование,
		|	ИЛПеречислениеПолучателям.НомерВходящегоДокумента,
		|	ИЛПеречислениеПолучателям.ДатаВходящегоДокумента,
		|	ИЛПеречислениеПолучателям.Получатель,
		|	ИЛПеречислениеПолучателям.Получатель.Наименование,
		|	ПОДСТРОКА(ИЛПеречислениеПолучателям.ДокументОснование.ВидИсполнительногоДокумента, 1, 200) + "" "" + ПОДСТРОКА(ИЛПеречислениеПолучателям.ДокументОснование.РеквизитыИсполнительногоДокумента, 1, 800)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	4,
		|	ИЛПеречислениеПолучателям.ДокументОснование,
		|	1,
		|	ИЛПеречислениеПолучателям.НомерВходящегоДокумента,
		|	ИЛПеречислениеПолучателям.ДатаВходящегоДокумента,
		|	ЕСТЬNULL(ИЛПеречислениеПолучателям.ДокументОснование.ВидРасчетаПочтовыйСбор.Наименование, &НаименованиеРасхода_ПочтовыйСбор),
		|	СУММА(ИЛПеречислениеПолучателям.СуммаСборов),
		|	0,
		|	0,
		|	&СчетПоИЛ,
		|	НЕОПРЕДЕЛЕНО,
		|	ИЛПеречислениеПолучателям.Получатель.Наименование,
		|	""""
		|ИЗ
		|	Документ.ИЛПеречислениеПолучателям.ИсполнительныеЛисты КАК ИЛПеречислениеПолучателям
		|ГДЕ
		|	ИЛПеречислениеПолучателям.Ссылка В
		|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|				АвансовыйОтчет.Документ
		|			ИЗ
		|				Документ.АвансовыйОтчет.ОплатаПоИсполнительнымЛистам КАК АвансовыйОтчет
		|			ГДЕ
		|				АвансовыйОтчет.Ссылка = &ТекущийДокумент)
		|	И ИЛПеречислениеПолучателям.СуммаСборов <> 0
		|
		|СГРУППИРОВАТЬ ПО
		|	ИЛПеречислениеПолучателям.ДокументОснование,
		|	ИЛПеречислениеПолучателям.НомерВходящегоДокумента,
		|	ИЛПеречислениеПолучателям.ДатаВходящегоДокумента,
		|	ИЛПеречислениеПолучателям.Получатель,
		|	ИЛПеречислениеПолучателям.Получатель.Наименование,
		|	ЕСТЬNULL(ИЛПеречислениеПолучателям.ДокументОснование.ВидРасчетаПочтовыйСбор.Наименование, &НаименованиеРасхода_ПочтовыйСбор)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	5,
		|	АвансовыйОтчет.НомерСтроки,
		|	0,
		|	АвансовыйОтчет.Документ.Номер,
		|	АвансовыйОтчет.Документ.Дата,
		|	&НаименованиеРасхода_ПенсионныеВзносы,
		|	СУММА(АвансовыйОтчет.Сумма),
		|	0,
		|	0,
		|	&СчетОПВ,
		|	НЕОПРЕДЕЛЕНО,
		|	"""",
		|	ВЫБОР
		|		КОГДА АвансовыйОтчет.Документ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийОПВПеречислениеВФонды.ПеречислениеОбязательныхПрофессиональныхПенсионныхВзносов)
		|			ТОГДА &Содержание_ПеречислениеПрофПВ
		|		ИНАЧЕ &Содержание_ПеречислениеПВ
		|	КОНЕЦ
		|ИЗ
		|	Документ.АвансовыйОтчет.ПеречислениеПенсионныхВзносов КАК АвансовыйОтчет
		|ГДЕ
		|	АвансовыйОтчет.Ссылка = &ТекущийДокумент
		|
		|СГРУППИРОВАТЬ ПО
		|	АвансовыйОтчет.НомерСтроки,
		|	АвансовыйОтчет.Документ,
		|	АвансовыйОтчет.Документ.Номер,
		|	АвансовыйОтчет.Документ.Дата,
		|	ВЫБОР
		|		КОГДА АвансовыйОтчет.Документ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийОПВПеречислениеВФонды.ПеречислениеОбязательныхПрофессиональныхПенсионныхВзносов)
		|			ТОГДА &Содержание_ПеречислениеПрофПВ
		|		ИНАЧЕ &Содержание_ПеречислениеПВ
		|	КОНЕЦ
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	6,
		|	АвансовыйОтчет.НомерСтроки,
		|	0,
		|	АвансовыйОтчет.Документ.Номер,
		|	АвансовыйОтчет.Документ.Дата,
		|	&НаименованиеРасхода_СоцСтрахование,
		|	СУММА(АвансовыйОтчет.Сумма),
		|	0,
		|	0,
		|	&СчетСО,
		|	НЕОПРЕДЕЛЕНО,
		|	"""",
		|	&Содержание_ПеречислениеСО
		|ИЗ
		|	Документ.АвансовыйОтчет.ПеречислениеСоциальныхОтчислений КАК АвансовыйОтчет
		|ГДЕ
		|	АвансовыйОтчет.Ссылка = &ТекущийДокумент
		|
		|СГРУППИРОВАТЬ ПО
		|	АвансовыйОтчет.НомерСтроки,
		|	АвансовыйОтчет.Документ,
		|	АвансовыйОтчет.Документ.Номер,
		|	АвансовыйОтчет.Документ.Дата
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	7,
		|	АвансовыйОтчет.НомерСтроки,
		|	0,
		|	АвансовыйОтчет.НомерВходящегоДокумента,
		|	АвансовыйОтчет.ДатаВходящегоДокумента,
		|	АвансовыйОтчет.ВидВходящегоДокумента,
		|	СУММА(ВЫБОР
		|			КОГДА АвансовыйОтчет.Ссылка.ВалютаДокумента = &ВалютаРеглУчета                                                                                             
		|				ТОГДА АвансовыйОтчет.Сумма
		|			ИНАЧЕ АвансовыйОтчет.Сумма * (АвансовыйОтчет.Ссылка.КурсДокумента / АвансовыйОтчет.Ссылка.КратностьДокумента)
		|		КОНЕЦ),
		|	СУММА(ВЫБОР
		|			КОГДА АвансовыйОтчет.Ссылка.ВалютаДокумента = &ВалютаРеглУчета
		|				ТОГДА 0
		|			ИНАЧЕ АвансовыйОтчет.Сумма
		|		КОНЕЦ),
		|	СУММА(ВЫБОР
		|			КОГДА АвансовыйОтчет.Ссылка.ВалютаДокумента = &ВалютаРеглУчета
		|					И АвансовыйОтчет.ВидЗадолженностиПодотчетногоЛица <> ЗНАЧЕНИЕ(Перечисление.ВидыЗадолженностиПодотчетныхЛиц.Суточные)
		|					И АвансовыйОтчет.ВидЗадолженностиПодотчетногоЛица <> ЗНАЧЕНИЕ(Перечисление.ВидыЗадолженностиПодотчетныхЛиц.СуточныеСверхНормы)
		|				ТОГДА АвансовыйОтчет.СуммаНДС
		|			КОГДА АвансовыйОтчет.Ссылка.ВалютаДокумента <> &ВалютаРеглУчета
		|					И АвансовыйОтчет.ВидЗадолженностиПодотчетногоЛица <> ЗНАЧЕНИЕ(Перечисление.ВидыЗадолженностиПодотчетныхЛиц.Суточные)
		|					И АвансовыйОтчет.ВидЗадолженностиПодотчетногоЛица <> ЗНАЧЕНИЕ(Перечисление.ВидыЗадолженностиПодотчетныхЛиц.СуточныеСверхНормы)
		|				ТОГДА АвансовыйОтчет.СуммаНДС * (АвансовыйОтчет.Ссылка.КурсДокумента / АвансовыйОтчет.Ссылка.КратностьДокумента)
		|			ИНАЧЕ 0
		|		КОНЕЦ),
		|	АвансовыйОтчет.СчетЗатратБУ,
		|	АвансовыйОтчет.СчетУчетаНДС,
		|	АвансовыйОтчет.Поставщик.Наименование,
		|	АвансовыйОтчет.Содержание
		|ИЗ
		|	Документ.АвансовыйОтчет.Прочее КАК АвансовыйОтчет
		|ГДЕ
		|	АвансовыйОтчет.Ссылка = &ТекущийДокумент
		|
		|СГРУППИРОВАТЬ ПО
		|	АвансовыйОтчет.ВидВходящегоДокумента,
		|	АвансовыйОтчет.НомерВходящегоДокумента,
		|	АвансовыйОтчет.ДатаВходящегоДокумента,
		|	АвансовыйОтчет.СчетЗатратБУ,
		|	АвансовыйОтчет.СчетУчетаНДС,
		|	АвансовыйОтчет.НомерСтроки,
		|	АвансовыйОтчет.Поставщик.Наименование,
		|	АвансовыйОтчет.Содержание
		|
		|УПОРЯДОЧИТЬ ПО
		|	ID,
		|	НомерСтроки,
		|	ПорядокДляСортировки";
		
		РезультатЗапроса = ЗапросТовары.Выполнить();
		Товар = РезультатЗапроса.Выбрать();
		ТаблицыДокумента = РезультатЗапроса.Выгрузить();
		Израсходованно = ТаблицыДокумента.Итог("ПоОтчету") + ?(Шапка.СуммаВключаетНДС, 0, ТаблицыДокумента.Итог("СуммаНДС"));
		
		ДляРасчета     = Израсходованно;
		ОстатокНаКонец = СуммаДоДокумента + ПолученоИзКассы - Израсходованно;
		
		Если ОстатокНаКонец >= 0  Тогда
			ОбластьТитул2.Параметры.КонечныйОстаток    = ОстатокНаКонец;
		Иначе
			ОбластьТитул2.Параметры.КонечныйПерерасход = - ОстатокНаКонец;
		КонецЕсли;
		
		ОбластьТитул2.Параметры.Израсходовано 		= Израсходованно;
		ОбластьТитул2.Параметры.СуммаОтчетаПрописью = ОбщегоНазначенияБКВызовСервера.СформироватьСуммуПрописью(ДляРасчета, ВалютаРегламентированногоУчета);
		ОбластьТитул2.Параметры.ИтогоПолучено 		= ПолученоИзКассы;
		
		ТабДокумент.Вывести(ОбластьТитул2);
		
		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		
		ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
		ТабДокумент.Вывести(ОбластьМакета);
		
		// Выводим табличные части
		ОбластьМакета = Макет.ПолучитьОбласть("Строка");
		НомерСтроки   = 0;
		
		ИтогоПоОтчету        = 0;
		
		Пока Товар.Следующий() Цикл
			
			ОбластьМакета.Параметры.Заполнить(Товар);
			НомерСтроки = НомерСтроки + 1;
			ОбластьМакета.Параметры.НомерСтроки = НомерСтроки;
			
			ТекстДокумента   = ?(НЕ ЗначениеЗаполнено(Товар.НаименованиеРасхода), "", СокрЛП(Товар.НаименованиеРасхода));
			ТекстНомера 	 = ?(НЕ ЗначениеЗаполнено(Товар.ДокументНомер), "", Товар.ДокументНомер);
			ТекстДата   	 = ?(НЕ ЗначениеЗаполнено(Товар.ДокументДата), "", Формат(Товар.ДокументДата,"Л=" + КодЯзыка + "; ДФ=dd.MM.yyyy"));
			
			ОбластьМакета.Параметры.ДокументРасхода      = ТекстДокумента;
			ОбластьМакета.Параметры.ДокументРасходаНомер = ТекстНомера;
			ОбластьМакета.Параметры.ДокументРасходаДата  = ТекстДата ;
			
			КонтрагентТекст = ?(НЕ ЗначениеЗаполнено(Товар.Поставщик), "", СокрЛП(Товар.Поставщик));
			СодержаниеТекст = ?(КонтрагентТекст = "",СокрЛП(Товар.Содержание), ? (Товар.Содержание = "", "", ", " + СокрЛП(Товар.Содержание)));
			
			ОбластьМакета.Параметры.Содержание = КонтрагентТекст + СодержаниеТекст;
			
			Сумма = Товар.ПоОтчету 
			+ ?(Шапка.СуммаВключаетНДС, 0, Товар.СуммаНДС);
			
			ОбластьМакета.Параметры.ПоОтчету = Сумма;
			
			ИтогоПоОтчету = ИтогоПоОтчету + Сумма;
			
			ТабДокумент.Вывести(ОбластьМакета);
			
		КонецЦикла;
		
		// Выводим подвал авансовго отчета
		ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ОбластьМакета.Параметры.ПредставлениеПодотчетногоЛица = ПодотчетноеЛицо;
		ОбластьМакета.Параметры.ИтогоПоОтчету        = ИтогоПоОтчету;
		
		ТабДокумент.Вывести(ОбластьМакета);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
		
	КонецЦикла;
	
	Возврат ТабДокумент;
	
КонецФункции
 
////////////////////////////////////////////////////////////////////////////////
// Прочие служебные процедуры и функции

Процедура ЗаполнитьСтрокуПоСчетам(ТаблицаПроводок, ОбластьМакета, СчетДт, СчетКт, Сумма)
	
	Если ТаблицаПроводок.Количество() <> 0 Тогда
		
		Проводка = ТаблицаПроводок.Получить(ТаблицаПроводок.Количество() - 1);
		
		ОбластьМакета.Параметры[СчетДт] = Проводка.СчетДт;
		ОбластьМакета.Параметры[СчетКт] = Проводка.СчетКт;
		ОбластьМакета.Параметры[Сумма]  = Проводка.Сумма;
		
		ТаблицаПроводок.Удалить(Проводка);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОчиститьСтрокуПоСчетам(ОбластьМакета, СчетДт, СчетКт, Сумма)
	
	ОбластьМакета.Параметры[СчетДт] = "";
	ОбластьМакета.Параметры[СчетКт] = "";
	ОбластьМакета.Параметры[Сумма]  = "";
	
КонецПроцедуры

#КонецЕсли
