////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
		РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", Объект.Ссылка, ЭтаФорма);
	КонецЕсли;
	
	ЗапретРедактированияРеквизитовОбъектовПереопределяемый.ЗаблокироватьРеквизиты(ЭтотОбъект, Объект.Проведен);

	// Активизировать табличную часть
	УстановитьТекущуюСтраницуОсновнойПанели();
	ОбновитьПодвал(ЭтаФорма);
	
	УстановитьВидимостьСчетовУчета();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// РедактированиеДокументовПользователей
	ПраваДоступаКОбъектам.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец РедактированиеДокументовПользователей
	
	ПодготовитьФормуНаСервере();
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", Объект.Ссылка, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	Оповестить("Запись_АвансовыйОтчет", ПараметрыЗаписи, Объект.Ссылка);	
	
	//Передадим ссылки документов, для заполнения платежного документа в документе
	//"Зарплата к выплате организаций"
	Если Объект.ВыплатаЗаработнойПлаты.Количество() > 0 Тогда
		ОповещаемыеВедомости = Новый Соответствие;
	    Для Каждого СтрокаТЧ Из Объект.ВыплатаЗаработнойПлаты Цикл
			ОповещаемыеВедомости.Вставить(СтрокаТЧ.Ведомость, СтрокаТЧ.Ведомость)
		КонецЦикла;
		Оповестить("Запись_АвансовыйОтчет_ИзменениеВыплатыПоВедомостиРегл", ОповещаемыеВедомости, Объект.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	ЗаполнитьДобавленныеКолонкиТаблиц();
	УстановитьДоступностьСубконто();	
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", Объект.Ссылка, ЭтаФорма);
	
	ЗапретРедактированияРеквизитовОбъектовПереопределяемый.ЗаблокироватьРеквизиты(ЭтотОбъект, Объект.Проведен);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборНоменклатуры.Форма.ОсновнаяФорма" Тогда
		ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИсточникВыбора.ИмяТаблицы);
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Документ.АвансовыйОтчет.Форма.ФормаПодбораДокументов" Тогда
		ОбработкаВыбораПодборОплатыНаСервере(ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	ОбщегоНазначенияБККлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		КлючеваяОперация = "Документ ""авансовый отчет"" (проведение)";
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
КонецПроцедуры

&НаКлиенте
Процедура НазначениеАвансаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
		
	ДополнительныеПараметры = Новый Структура("ФормаВладелец, ИмяРеквизита", ЭтаФорма, "НазначениеАванса");

    Оповещение = Новый ОписаниеОповещения("НазначениеАвансаЗавершениеВвода", ЭтотОбъект, ДополнительныеПараметры);
    ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияМногострочногоТекста(Оповещение, Объект.НазначениеАванса, НСтр("ru='Назначение аванса'"));
	
КонецПроцедуры
		 
&НаКлиенте
Процедура НазначениеАвансаЗавершениеВвода(Строка, Параметры) Экспорт

	Если Строка <> Неопределено Тогда
		Объект.НазначениеАванса = Строка;
	КонецЕсли;
	
КонецПроцедуры   

&НаКлиенте
Процедура ВыбратьПроизвольныйПериод(Команда)
	
	Диалог = Новый ДиалогРедактированияСтандартногоПериода();
	
	Диалог.Период.Вариант		= ВариантСтандартногоПериода.ПроизвольныйПериод;
	Диалог.Период.ДатаНачала	= Объект.ДатаНачалаОтчетногоПериода;
	Диалог.Период.ДатаОкончания = Объект.ДатаОкончанияОтчетногоПериода;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаВыбораПериода", ЭтаФорма);
    	
	Диалог.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;
	
	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ОбщегоНазначенияБККлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата, 
		ТекущаяДатаДокумента, Объект.ВалютаДокумента, ВалютаРегламентированногоУчета);

	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		СтруктураРезультатаВыполненияПриИзмененииДаты = Неопределено;
		ДатаПриИзмененииНаСервере(СтруктураРезультатаВыполненияПриИзмененииДаты);		
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;
	
КонецПроцедуры

&НаКлиенте
Процедура УчитыватьКПНПриИзменении(Элемент)
	УчитыватьКПНПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(СтруктурноеПодразделениеОрганизация) Тогда 
		Объект.Организация = Неопределено;
		Объект.СтруктурноеПодразделение = Неопределено;
	Иначе 
		Результат = РаботаСДиалогамиКлиент.ПроверитьИзменениеЗначенийОрганизацииСтруктурногоПодразделения(СтруктурноеПодразделениеОрганизация, Объект.Организация, Объект.СтруктурноеПодразделение);
		Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
			Если Объект.Прочее.Количество() > 0 Тогда
				СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(Истина, Результат);
			Иначе
				СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(Ложь, Результат);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	РаботаСДиалогамиКлиент.СтруктурноеПодразделениеНачалоВыбора(ЭтаФорма, СтандартнаяОбработка, Объект.Организация, Объект.СтруктурноеПодразделение, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ВидУчетаНУПриИзменении(Элемент)
	
	УправлениеФормой(ЭтотОбъект);
	УстановитьВидимостьСчетовУчета();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидУчетаНУНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбщегоНазначенияБККлиент.НачалоВыбораЗначенияВидУчетаНУ(Элемент, Объект.ВидУчетаНУ, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ФизЛицоПриИзменении(Элемент)
	ФизЛицоПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеПриИзменении(Элемент)
		
	Если ТекущийДокументОснование = Объект.ДокументОснование Тогда
		Возврат;
	КонецЕсли; 

	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		ТекстВопроса = НСтр("ru='Заполнить текущий документ данными документа-основания?'");
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаПриИзмененииДокументОснование", ЭтотОбъект, Параметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
	КонецЕсли;
	
	ТекущийДокументОснование = Объект.ДокументОснование
	
КонецПроцедуры

&НаКлиенте
Процедура ЦеныИВалютаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	 	
	ТолькоПросмотрИзменен = Ложь;
	Если Элемент.ТолькоПросмотр И НЕ ЭтотОбъект.ТолькоПросмотр Тогда
		ТолькоПросмотрИзменен = Истина;
		ЭтотОбъект.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	УправлениеЦенообразованиемКлиент.ОткрытьФормуЦеныИВалюта(ЭтаФорма,,,, Новый Структура("БезКонтроляВалютыВзаиморасчетов", Истина));
	
	Если ТолькоПросмотрИзменен Тогда
		ЭтотОбъект.ТолькоПросмотр = Ложь;
	КонецЕсли;
	     

КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница.Имя = "ГруппаТовары" Тогда
		ОбновитьПодвал(ЭтаФорма);
	КонецЕсли; 
	
КонецПроцедуры    


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ВыданныеАвансы

&НаКлиенте
Процедура ВыданныеАвансыПриИзменении(Элемент)
	ВыданныеАвансыПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ВыданныеАвансыДокументНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
		
	Если Элементы.ВыданныеАвансы.ТекущиеДанные.Документ = Неопределено Тогда
		СтандартнаяОбработка = Ложь;
				
		СписокТипов = Новый СписокЗначений;
		СписокТипов.Добавить(Тип("ДокументСсылка.РасходныйКассовыйОрдер"),      НСтр("ru = 'Расходный кассовый ордер'"));
		СписокТипов.Добавить(Тип("ДокументСсылка.ПлатежноеПоручениеИсходящее"), НСтр("ru = 'Платежное поручение исходящее'"));
		
		Оповещение = Новый ОписаниеОповещения("ПослеВыбораИзСпискаДокументаТабличнойЧастиВыданныеАвансы", ЭтотОбъект, Параметры);
		ПоказатьВыборИзСписка(Оповещение, СписокТипов);
					
	Иначе
		Элемент.ВыбиратьТип = Ложь;
		СтруктураТипа = Новый Структура("Значение", ТипЗнч(Элементы.ВыданныеАвансы.ТекущиеДанные.Документ));
		ПослеВыбораИзСпискаДокументаТабличнойЧастиВыданныеАвансы(СтруктураТипа, Неопределено);
		
	КонецЕсли;
	
КонецПроцедуры   

&НаКлиенте
Процедура ВыданныеАвансыДокументПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ВыданныеАвансы.ТекущиеДанные;

	// Если ФизЛицо еще не было выбрано, заполним его по документу
	Если ЗначениеЗаполнено(ТекущиеДанные.Документ) И НЕ ЗначениеЗаполнено(Объект.ФизЛицо) Тогда
	   	ВыданныеАвансыДокументПриИзмененииНаСервере(ТекущиеДанные.Документ, Объект.ФизЛицо);	
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ товары

&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)
	ОбновитьПодвал(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		ОбновитьПодвал(ЭтаФорма);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТоварыСчетФактураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПослеУдаления(Элемент)
	Элементы.Склад.ОтметкаНезаполненного = (Объект.Товары.Количество() > 0);			
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если НоваяСтрока И НЕ Копирование Тогда
		
		ДанныеОбъекта = Новый Структура("Дата, Организация, УчитыватьКПН, УчитыватьНДС, НДСВключенВСтоимость, Ссылка");
		ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
		
		ТекущиеДанные.Коэффициент = 1;
		
		ДанныеСтроки = Новый Структура("НДСВидОборота, НДСВидПоступления, ВидНДС");
		ЗаполнитьЗначенияСвойств(ДанныеСтроки, ТекущиеДанные);
			
		ПараметрыЗаполненияСчетовУчета = НачатьЗаполнениеСчетовУчета(
			"НоваяСтрокаТовары",
			Объект,
			ТекущиеДанные,
			ДанныеОбъекта,
			ДанныеСтроки);
		
		ТоварыПриНачалеРедактированияНаСервере(ДанныеСтроки, ДанныеОбъекта, ПараметрыЗаполненияСчетовУчета.КЗаполнению);
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтроки); 
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ДанныеСтрокиТаблицы = Новый Структура("Номенклатура, ЕдиницаИзмерения, Коэффициент, Количество, Цена, Сумма, СтавкаНДС, СуммаНДС, Всего");
		//|НДСВидОборота, НДСВидПоступления, СчетУчетаНУ, Всего");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, Элементы.Товары.ТекущиеДанные);
	
	ПараметрыОбъекта = Новый Структура("Организация, СтруктурноеПодразделение, Дата, Ссылка, ТипЦен, УчитыватьНДС, СуммаВключаетНДС, УчитыватьКПН, ВалютаДокумента, Склад");
	ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, Объект);
	
	ПараметрыЗаполненияСчетовУчета = НачатьЗаполнениеСчетовУчета(
		"Товары.Номенклатура",
		Объект,
		Элементы.Товары.ТекущиеДанные,
		ПараметрыОбъекта,
		ДанныеСтрокиТаблицы);
	
	ТоварыНоменклатураПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ПараметрыОбъекта, ПараметрыЗаполненияСчетовУчета.КЗаполнению);
		
	ЗаполнитьЗначенияСвойств(Элементы.Товары.ТекущиеДанные, ДанныеСтрокиТаблицы);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	Структура = ОбработкаТабличныхЧастейКлиентСервер.ПодготовитьСтруктуруДляРасчетаСумм(Объект);
			
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Структура);	
		
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЕдиницаИзмеренияПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииЕдиницыТабЧасти(СтрокаТабличнойЧасти);
	
	Структура = ОбработкаТабличныхЧастейКлиентСервер.ПодготовитьСтруктуруДляРасчетаСумм(Объект);
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Структура);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	Структура = ОбработкаТабличныхЧастейКлиентСервер.ПодготовитьСтруктуруДляРасчетаСумм(Объект);
			
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Структура);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	Структура = ОбработкаТабличныхЧастейКлиентСервер.ПодготовитьСтруктуруДляРасчетаСумм(Объект);
			
	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСуммыТабЧасти(СтрокаТабличнойЧасти);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Структура);
		
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	Структура = ОбработкаТабличныхЧастейКлиентСервер.ПодготовитьСтруктуруДляРасчетаСумм(Объект);
			
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Структура);
		
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВидВходящегоДокументаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СтруктураПараметров = Новый Структура();
	
	СтруктураПараметров.Вставить("ВидДокумента", Элемент.ТекстРедактирования);
	ОткрытьФорму("Справочник.ВидыПервичныхДокументов.ФормаВыбора", СтруктураПараметров, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСчетУчетаБУПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.Товары.ТекущиеДанные;
	
	Если НЕ ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.НаСчетеВедетсяУчетНоменклатуры(СтрокаТаблицы.СчетУчетаБУ) Тогда
		
		ТекстСообщения = НСтр("ru='Для счета %1 отсутствует субконто ""Номенклатура"". Значение было очищено.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, СтрокаТаблицы.СчетУчетаБУ);
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "Товары[" + Формат(Элементы.Товары.ТекущаяСтрока, "ЧН=0; ЧГ=") + "].СчетУчетаБУ", "Объект");
		
		СтрокаТаблицы.СчетУчетаБУ = ПредопределенноеЗначение("ПланСчетов.Типовой.ПустаяСсылка");
		
		Возврат;
		
	КонецЕсли;
	
	СтрокаТаблицы.СчетУчетаНУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СтрокаТаблицы.СчетУчетаБУ));
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ОплатаПоставщикам

&НаКлиенте
Процедура ОплатаПоставщикамПриИзменении(Элемент)
	ОбновитьПодвал(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ОплатаПоставщикамПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		ОбновитьПодвал(ЭтаФорма);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОплатаПоставщикамКонтрагентПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ОплатаПоставщикам.ТекущиеДанные;
	
	//ДанныеСтроки = Новый Структура("Контрагент, ДоговорКонтрагента, Сумма, СуммаВзаиморасчетов, СчетУчетаРасчетовСКонтрагентом,
	//	|КурсВзаиморасчетов, КратностьВзаиморасчетов, СчетУчетаРасчетовПоАвансам, Сделка, ДоступностьСделки, ВалютаВзаиморасчетов");
	ДанныеСтроки = Новый Структура("Контрагент, ДоговорКонтрагента, Сумма, СуммаВзаиморасчетов,
		|КурсВзаиморасчетов, КратностьВзаиморасчетов, Сделка, ДоступностьСделки, ВалютаВзаиморасчетов");
	ЗаполнитьЗначенияСвойств(ДанныеСтроки, ТекущиеДанные); 
	
	ДанныеОбъекта = Новый Структура("Дата, ВалютаДокумента, КурсДокумента, КратностьДокумента, Организация");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	ПараметрыЗаполненияСчетовУчета = НачатьЗаполнениеСчетовУчета(
		"ОплатаПоставщикам.Контрагент",
		Объект,
		ТекущиеДанные,
		ДанныеОбъекта,
		ДанныеСтроки);
	
	ОплатаПоставщикамКонтрагентПриИзмененииНаСервере(ДанныеСтроки, ДанныеОбъекта, ПараметрыЗаполненияСчетовУчета.КЗаполнению); 
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтроки); 
				
КонецПроцедуры

&НаКлиенте
Процедура ОплатаПоставщикамДоговорКонтрагентаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ОплатаПоставщикам.ТекущиеДанные;
	
	//ДанныеСтроки = Новый Структура("Контрагент, ДоговорКонтрагента, Сумма, СуммаВзаиморасчетов, СчетУчетаРасчетовСКонтрагентом,
	//	|КурсВзаиморасчетов, КратностьВзаиморасчетов, СчетУчетаРасчетовПоАвансам, Сделка, ДоступностьСделки, ВалютаВзаиморасчетов");
	ДанныеСтроки = Новый Структура("Контрагент, ДоговорКонтрагента, Сумма, СуммаВзаиморасчетов,
		|КурсВзаиморасчетов, КратностьВзаиморасчетов, Сделка, ДоступностьСделки, ВалютаВзаиморасчетов");
		
	ДанныеОбъекта = Новый Структура("Дата, ВалютаДокумента, КурсДокумента, КратностьДокумента, Организация");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
		
	ЗаполнитьЗначенияСвойств(ДанныеСтроки, ТекущиеДанные);
	
	ПараметрыЗаполненияСчетовУчета = НачатьЗаполнениеСчетовУчета(
		"ОплатаПоставщикам.ДоговорКонтрагента",
		Объект,
		ТекущиеДанные,
		ДанныеОбъекта,
		ДанныеСтроки);
	
	ОплатаПоставщикамДоговорКонтрагентаПриИзмененииНаСервере(ДанныеСтроки, ДанныеОбъекта, ПараметрыЗаполненияСчетовУчета.КЗаполнению);
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтроки); 
		
КонецПроцедуры

&НаКлиенте
Процедура ОплатаПоставщикамСделкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.ОплатаПоставщикам.ТекущиеДанные;
	
	СтруктураПараметров = Новый Структура("Организация, Контрагент, ДоговорКонтрагента, Дата, ТипыДокументов",
		Объект.Организация, ТекущиеДанные.Контрагент, ТекущиеДанные.ДоговорКонтрагента, Объект.Дата, "Метаданные.Документы.АвансовыйОтчет.ТабличныеЧасти.ОплатаПоставщикам.Реквизиты.Сделка.Тип");

	СтруктураПараметров.Вставить("СчетДляОпределенияОстатков", ТекущиеДанные.СчетУчетаРасчетовСКонтрагентом);
	СтруктураПараметров.Вставить("ОстаткиОбороты", "Кт");
	
	ПараметрыФормы = Новый Структура("ПараметрыОбъекта", СтруктураПараметров);
	ОткрытьФорму("Документ.ДокументРасчетовСКонтрагентом.ФормаВыбора", ПараметрыФормы, Элемент);

КонецПроцедуры

&НаКлиенте
Процедура ОплатаПоставщикамСуммаПриИзменении(Элемент)
	РассчитатьСуммуВзаиморасчетовНаКлиенте();	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаПоставщикамКурсВзаиморасчетовПриИзменении(Элемент)
	РассчитатьСуммуВзаиморасчетовНаКлиенте()
КонецПроцедуры

&НаКлиенте
Процедура ОплатаПоставщикамКурсВзаиморасчетовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ОплатаПоставщикам.ТекущиеДанные;
	СтруктураПараметров = Новый Структура("Валюта", ПолучитьЗначениеРеквизита(ТекущиеДанные.ДоговорКонтрагента, "ВалютаВзаиморасчетов"));
	СтруктураПараметров.Вставить("ДатаУстановкиКурсаИКратности", Объект.Дата);
	СтруктураПараметров.Вставить("КратностьВалюты", 1);
	
	Оповещение = Новый ОписаниеОповещения("ПослеВводаКурсаКратности", ЭтотОбъект, Параметры);
	ОткрытьФорму("ОбщаяФорма.ФормаВводаКурсаИКратности", СтруктураПараметров,,,,, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаПоставщикамВидВходящегоДокументаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("ВидДокумента", Элемент.ТекстРедактирования);
	
	ОткрытьФорму("Справочник.ВидыПервичныхДокументов.ФормаВыбора", СтруктураПараметров, Элемент);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ВыплатаЗаработнойПлаты

&НаКлиенте
Процедура ВыплатаЗаработнойПлатыПриИзменении(Элемент)
	ОбновитьПодвал(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ВыплатаЗаработнойПлатыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Объект.ВалютаДокумента <> ВалютаРегламентированногоУчета Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Оформлять выплату зарплаты можно только в %1!'"), Строка(ВалютаРегламентированногоУчета));
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, , "Объект"); 
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыплатаЗаработнойПлатыПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если (Элемент.ТекущиеДанные.Ведомость = Неопределено ИЛИ Элемент.ТекущиеДанные.Ведомость.Пустая()) И НЕ ОтменаРедактирования Тогда
	   
	    ТекстСообщения = НСтр("ru='Не указана платежная ведомость.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, , "Объект");
		
		Отказ = Истина;

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыплатаЗаработнойПлатыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) И Элемент.ТекущиеДанные <> Неопределено Тогда
		Объект.Организация = ПолучитьЗначениеРеквизита(Элемент.ТекущиеДанные.Ведомость, "Организация");
	КонецЕсли;
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		ОбновитьПодвал(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыплатаЗаработнойПлатыВедомостьПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ВыплатаЗаработнойПлаты.ТекущиеДанные;
	
	СтруктураДанных = Новый Структура("Ведомость, СуммаКВыплате");
	ЗаполнитьЗначенияСвойств(СтруктураДанных, ТекущиеДанные);
	ВыплатаЗаработнойПлатыВедомостьПриИзмененииНаСервере(СтруктураДанных, Объект.Ссылка);
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, СтруктураДанных);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыплатаЗаработнойПлатыВедомостьНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НовыеПараметры = ВыплатаЗаработнойПлатыВедомостьНачалоВыбораНаСервере();
	Элемент.ПараметрыВыбора = Новый ФиксированныйМассив(НовыеПараметры);
	
КонецПроцедуры     

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ОплатаПоИсполнительнымЛистам

&НаКлиенте
Процедура ОплатаПоИсполнительнымЛистамПриИзменении(Элемент)
	ОбновитьПодвал(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ОплатаПоИсполнительнымЛистамПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		ОбновитьПодвал(ЭтаФорма);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОплатаПоИсполнительнымЛистамПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Объект.ВалютаДокумента <> ВалютаРегламентированногоУчета Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Оформлять оплату по исполнительным листам можно только в %1!'"), Строка(ВалютаРегламентированногоУчета));
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, , "Объект"); 
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаПоИсполнительнымЛистамДокументПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ОплатаПоИсполнительнымЛистам.ТекущиеДанные;
	
	СтруктураДанных = Новый Структура("Документ, СуммаКОплате, СуммаСборов, СуммаПлатежа");
	ЗаполнитьЗначенияСвойств(СтруктураДанных, ТекущиеДанные);	
	ОплатаПоИсполнительнымЛистамДокументПриИзмененииНаСервере(СтруктураДанных);
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, СтруктураДанных);
		
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ПеречислениеПенсионныхВзносов

&НаКлиенте
Процедура ПеречислениеПенсионныхВзносовПриИзменении(Элемент)
	ОбновитьПодвал(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ПеречислениеПенсионныхВзносовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Объект.ВалютаДокумента <> ВалютаРегламентированногоУчета Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Оформлять выплату ОПВ можно только в %1!'"), Строка(ВалютаРегламентированногоУчета));
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, , "Объект"); 
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПеречислениеПенсионныхВзносовПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если (Элемент.ТекущиеДанные.Документ = Неопределено ИЛИ Элемент.ТекущиеДанные.Документ.Пустая())
	   И НЕ ОтменаРедактирования Тогда
	   
	    ТекстСообщения = НСтр("ru='Не указана платежная ведомость.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, , "Объект");
		
		Отказ = Истина;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПеречислениеПенсионныхВзносовПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) И Элемент.ТекущиеДанные <> Неопределено Тогда
		Объект.Организация = ПолучитьЗначениеРеквизита(Элемент.ТекущиеДанные.Документ, "Организация");
	КонецЕсли;
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		ОбновитьПодвал(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПеречислениеПенсионныхВзносовДокументПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПеречислениеПенсионныхВзносов.ТекущиеДанные;
	
	ДанныеСтроки = Новый Структура("ВидВзноса, Документ, Сумма");
	ЗаполнитьЗначенияСвойств(ДанныеСтроки, ТекущиеДанные);	
	
	ПеречислениеПенсионныхВзносовДокументПриИзмененииНаСервере(ДанныеСтроки);
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтроки);
		
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ПеречислениеСоциальныхОтчислений

&НаКлиенте
Процедура ПеречислениеСоциальныхОтчисленийПриИзменении(Элемент)
	ОбновитьПодвал(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ПеречислениеСоциальныхОтчисленийПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Объект.ВалютаДокумента <> ВалютаРегламентированногоУчета Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Оформлять выплату СО можно только в %1!'"), Строка(ВалютаРегламентированногоУчета));
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, , "Объект"); 
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПеречислениеСоциальныхОтчисленийПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если (Элемент.ТекущиеДанные.Документ = Неопределено ИЛИ Элемент.ТекущиеДанные.Документ.Пустая())
	   И НЕ ОтменаРедактирования Тогда
	   
	    ТекстСообщения = НСтр("ru='Не указана платежная ведомость.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, , "Объект");
		
		Отказ = Истина;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПеречислениеСоциальныхОтчисленийПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) И НЕ (Элемент.ТекущиеДанные = Неопределено ИЛИ Элемент.ТекущиеДанные.Документ = Неопределено) Тогда
		Объект.Организация = ПолучитьЗначениеРеквизита(Элемент.ТекущиеДанные.Документ, "Организация");
	КонецЕсли;
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		ОбновитьПодвал(ЭтаФорма);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПеречислениеСоциальныхОтчисленийДокументПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПеречислениеСоциальныхОтчислений.ТекущиеДанные;
	
	ДанныеСтроки = Новый Структура("ВидВзноса, Документ, Сумма");
	ЗаполнитьЗначенияСвойств(ДанныеСтроки, ТекущиеДанные);	
	
	ПеречислениеСоциальныхОтчисленийДокументПриИзмененииНаСервере(ДанныеСтроки);
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтроки);

КонецПроцедуры   


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ Прочее

&НаКлиенте
Процедура ПрочееПриИзменении(Элемент)
	ОбновитьПодвал(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ПрочееПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		ОбновитьПодвал(ЭтаФорма);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПрочееВидВходящегоДокументаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("ВидДокумента", Элемент.ТекстРедактирования);
		
	ОткрытьФорму("Справочник.ВидыПервичныхДокументов.ФормаВыбора", СтруктураПараметров, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочееНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Прочее.ТекущиеДанные;
	
	ДанныеСтрокиТаблицы = Новый Структура(
	    "ВидВходящегоДокумента, НомерВходящегоДокумента, ДатаВходящегоДокумента, Поставщик,		
		|Номенклатура, Содержание, Сумма, СтавкаНДС, СуммаНДС,
		|СчетЗатратБУ, СубконтоЗатратБУ1, СубконтоЗатратБУ2, СубконтоЗатратБУ3,
		|СубконтоЗатратБУ1Доступность, СубконтоЗатратБУ2Доступность, СубконтоЗатратБУ3Доступность,
		|СчетЗатратНУ, СубконтоЗатратНУ1, СубконтоЗатратНУ2, СубконтоЗатратНУ3,
		|СубконтоЗатратНУ1Доступность, СубконтоЗатратНУ2Доступность, СубконтоЗатратНУ3Доступность,
		|ВидСубконтоЗатратБУ1, ВидСубконтоЗатратБУ2, ВидСубконтоЗатратБУ3, 
		|ВидСубконтоЗатратНУ1, ВидСубконтоЗатратНУ2, ВидСубконтоЗатратНУ3,
		|СчетУчетаНДС, НДСВидОборота, НДСВидПоступления");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	ДанныеОбъекта = Новый Структура(
		"Ссылка, Дата, Организация, СтруктурноеПодразделение, Склад, ТипЦен, УчитыватьКПН, ВидУчетаНУ, УчитыватьНДС, 
		|СуммаВключаетНДС, ВалютаДокумента, КратностьДокумента, КурсДокумента");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	ПараметрыЗаполненияСчетовУчета = НачатьЗаполнениеСчетовУчета(
		"Прочее.Номенклатура",
		Объект,
		ТекущиеДанные,
		ДанныеОбъекта,
		ДанныеСтрокиТаблицы);
	
	ПрочееНоменклатураПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта, ПараметрыЗаполненияСчетовУчета.КЗаполнению);
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ЗатратБУ", "СчетЗатратБУ");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ЗатратНУ", "СчетЗатратНУ");
		
КонецПроцедуры

&НаКлиенте
Процедура ПрочееСуммаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Прочее.ТекущиеДанные;
	Структура = ОбработкаТабличныхЧастейКлиентСервер.ПодготовитьСтруктуруДляРасчетаСумм(Объект);
		
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Структура);
		
КонецПроцедуры

&НаКлиенте
Процедура ПрочееСтавкаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Прочее.ТекущиеДанные;
	Структура = ОбработкаТабличныхЧастейКлиентСервер.ПодготовитьСтруктуруДляРасчетаСумм(Объект);
		
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Структура);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочееСчетЗатратБУПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.Прочее.ТекущиеДанные;
	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
								 "СубконтоЗатратБУ1", "СубконтоЗатратБУ2", "СубконтоЗатратБУ3");

	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриИзмененииСчета(СтрокаТаблицы.СчетЗатратБУ, СтрокаТаблицы, ПоляОбъекта, Истина);
	
	СтрокаТаблицы.СчетЗатратНУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СтрокаТаблицы.СчетЗатратБУ));	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
								 "СубконтоЗатратНУ1", "СубконтоЗатратНУ2", "СубконтоЗатратНУ3");

	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриИзмененииСчета(СтрокаТаблицы.СчетЗатратНУ, СтрокаТаблицы, ПоляОбъекта, Истина);
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ЗатратБУ", "СчетЗатратБУ");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ЗатратНУ", "СчетЗатратНУ");
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура, СчетЗатратБУ, СчетЗатратНУ, 
		|СубконтоЗатратБУ1, СубконтоЗатратБУ2, СубконтоЗатратБУ3,
		|СубконтоЗатратНУ1, СубконтоЗатратНУ2, СубконтоЗатратНУ3");
		
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, СтрокаТаблицы);
	
	ДанныеОбъекта = Новый Структура("Организация");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	ПрочееСчетДоходовБУПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
	ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ДанныеСтрокиТаблицы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочееСубконтоЗатратБУ1ПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Прочее.ТекущиеДанные;
	
	ОбщегоНазначенияБККлиентСервер.ЗаменитьСубконтоНУ(ТекущиеДанные, ТекущиеДанные.СчетЗатратБУ, ТекущиеДанные.СчетЗатратНУ, 1, ТекущиеДанные.СубконтоЗатратБУ1, "СубконтоЗатратНУ");		
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ЗатратБУ", "СчетЗатратБУ");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ЗатратНУ", "СчетЗатратНУ", Истина)
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочееСубконтоЗатратБУ2ПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Прочее.ТекущиеДанные;
	
	ОбщегоНазначенияБККлиентСервер.ЗаменитьСубконтоНУ(ТекущиеДанные, ТекущиеДанные.СчетЗатратБУ, ТекущиеДанные.СчетЗатратНУ, 2, ТекущиеДанные.СубконтоЗатратБУ2, "СубконтоЗатратНУ");		
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ЗатратБУ", "СчетЗатратБУ");	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ЗатратНУ", "СчетЗатратНУ", Истина)
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочееСубконтоЗатратБУ3ПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Прочее.ТекущиеДанные;
	
	ОбщегоНазначенияБККлиентСервер.ЗаменитьСубконтоНУ(ТекущиеДанные, ТекущиеДанные.СчетЗатратБУ, ТекущиеДанные.СчетЗатратНУ, 3, ТекущиеДанные.СубконтоЗатратБУ3, "СубконтоЗатратНУ");		
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ЗатратБУ", "СчетЗатратБУ");	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ЗатратНУ", "СчетЗатратНУ", Истина)
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочееСубконтоЗатратБУ1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СубконтоНачалоВыбора(Элемент, "СубконтоЗатратБУ", 1, "СчетЗатратБУ", СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ПрочееСубконтоЗатратБУ2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СубконтоНачалоВыбора(Элемент, "СубконтоЗатратБУ", 2, "СчетЗатратБУ", СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ПрочееСубконтоЗатратБУ3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СубконтоНачалоВыбора(Элемент, "СубконтоЗатратБУ", 3, "СчетЗатратБУ", СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ПрочееСчетЗатратНУПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.Прочее.ТекущиеДанные;
	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
								 "СубконтоЗатратНУ1", "СубконтоЗатратНУ2", "СубконтоЗатратНУ3");

	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриИзмененииСчета(СтрокаТаблицы.СчетЗатратНУ, СтрокаТаблицы, ПоляОбъекта, Истина);
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ЗатратНУ", "СчетЗатратНУ");
	
	ДанныеСтрокиТаблицы = Новый Структура("Номенклатура, СчетЗатратНУ, СубконтоЗатратНУ1, СубконтоЗатратНУ2, СубконтоЗатратНУ3");
		
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, СтрокаТаблицы);
	
	ДанныеОбъекта = Новый Структура("Организация");	
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	ПрочееСчетДоходовНУПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
	ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ДанныеСтрокиТаблицы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочееСубконтоЗатратНУПриИзменении(Элемент)
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ЗатратНУ", "СчетЗатратНУ")
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочееСубконтоЗатратНУ1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СубконтоНачалоВыбора(Элемент, "СубконтоЗатратНУ", 1, "СчетЗатратНУ", СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ПрочееСубконтоЗатратНУ2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СубконтоНачалоВыбора(Элемент, "СубконтоЗатратНУ", 2, "СчетЗатратНУ", СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ПрочееСубконтоЗатратНУ3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СубконтоНачалоВыбора(Элемент, "СубконтоЗатратНУ", 3, "СчетЗатратНУ", СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ПрочееПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.Прочее.ТекущиеДанные;
	                                                              	
	Если НоваяСтрока И НЕ Копирование Тогда	
		
		ДанныеСтроки = Новый Структура("НДСВидПоступления, НДСВидОборота");
		ЗаполнитьЗначенияСвойств(ДанныеСтроки, ТекущиеДанные);		
		
		ДанныеОбъекта = Новый Структура("Дата, Организация, УчитыватьКПН, УчитыватьНДС, Ссылка");
		ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
			
		ПараметрыЗаполненияСчетовУчета = НачатьЗаполнениеСчетовУчета(
			"НоваяСтрокаПрочее",
			Объект,
			ТекущиеДанные,
			ДанныеОбъекта,
			ДанныеСтроки);
		
		ПрочееПриНачалеРедактированияНаСервере(ДанныеОбъекта, ДанныеСтроки, ПараметрыЗаполненияСчетовУчета.КЗаполнению);
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтроки);
		
	КонецЕсли;
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ЗатратБУ", "СчетЗатратБУ");	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ЗатратНУ", "СчетЗатратНУ")

КонецПроцедуры

&НаКлиенте
Процедура ПрочееСчетФактураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ПодборТовары(Команда)
	
	ПараметрыПодбора = ПолучитьПараметрыПодбора("Товары", НСтр("ru = 'Товары'"));
	Если ПараметрыПодбора <> Неопределено Тогда
		ОткрытьФорму("Обработка.ПодборНоменклатуры.Форма.ОсновнаяФорма", ПараметрыПодбора, ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВсегдаДобавлять(Команда)
	
	Пометка = Элементы.ТоварыТоварыВсегдаДобавлять.Пометка;
	Элементы.ТоварыТоварыВсегдаДобавлять.Пометка = НЕ Пометка;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборОплата(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КонецПериода", Объект.Дата);
	ПараметрыФормы.Вставить("Организация", Объект.Организация);
	ПараметрыФормы.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
	ПараметрыФормы.Вставить("СтруктурноеПодразделение", Объект.СтруктурноеПодразделение);
	ОткрытьФорму("Документ.АвансовыйОтчет.Форма.ФормаПодбораДокументов", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры
  
////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
     ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
     ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры
 
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
     ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
     ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаСервере
Процедура РазблокироватьРеквизиты() Экспорт
	
	Элементы.Товары.ТолькоПросмотр       = Ложь;
	Элементы.Товары.ИзменятьСоставСтрок  = Ложь;
	Элементы.Товары.ИзменятьПорядокСтрок = Ложь;
	
	Элементы.ОплатаПоставщикам.ТолькоПросмотр       = Ложь;
	Элементы.ОплатаПоставщикам.ИзменятьСоставСтрок  = Ложь;
	Элементы.ОплатаПоставщикам.ИзменятьПорядокСтрок = Ложь;
	
	Элементы.Прочее.ТолькоПросмотр       = Ложь;
	Элементы.Прочее.ИзменятьСоставСтрок  = Ложь;
	Элементы.Прочее.ИзменятьПорядокСтрок = Ложь;
	
	Элементы.ЦеныИВалюта.ТолькоПросмотр = Истина;
	
КонецПроцедуры

&НаСервере
Функция РеквизитыЗаблокированы()
	
	Возврат ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭтотОбъект, "ПараметрыЗапретаРедактированияРеквизитов");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьНадписьЦеныИВалюта(Форма)

	Объект = Форма.Объект;
	
	СтруктураОбъекта = Новый Структура("ВалютаДокумента, ТипЦен, УчитыватьНДС, СуммаВключаетНДС, ОтложитьПринятиеНДСКЗачету, НДСВключенВСтоимость");
	ЗаполнитьЗначенияСвойств(СтруктураОбъекта, Объект);
	
	СтруктураОбъекта.Вставить("КратностьВзаиморасчетов", Объект.КратностьДокумента);
	СтруктураОбъекта.Вставить("КурсВзаиморасчетов",      Объект.КурсДокумента);
		
	Форма.ЦеныИВалюта = ОбщегоНазначенияБККлиентСервер.СформироватьНадписьЦеныИВалюта(СтруктураОбъекта);
		
	Форма.Элементы.ГруппаТоварыПодвал.Видимость = Объект.УчитыватьНДС;

	Если Объект.СуммаВключаетНДС Тогда
		Форма.Элементы.ГруппаТоварыПодвал.ПодчиненныеЭлементы.ТоварыИтогоНДС.Заголовок = НСтр("ru = 'НДС (в т. ч.)'");
	Иначе
		Форма.Элементы.ГруппаТоварыПодвал.ПодчиненныеЭлементы.ТоварыИтогоНДС.Заголовок = НСтр("ru = 'НДС (сверху)'");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораПериода(Период, Параметры) Экспорт

   Если Период <> Неопределено Тогда         
      Объект.ДатаНачалаОтчетногоПериода = Период.ДатаНачала;
      Объект.ДатаОкончанияОтчетногоПериода = Период.ДатаОкончания;
   КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	УстановитьФункциональныеОпцииФормы();
	
	ТекущаяДатаДокумента = Объект.Дата;
	ВалютаРегламентированногоУчета	= ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	ПересчитатьСуммуВыданныхАвансов(ЭтаФорма);
	ЗаполнитьДобавленныеКолонкиТаблиц();
	ЗаполнитьСчетаРасчетовСПодотчетнымиЛицами();	
	
	ПоказыватьВДокументахСчетаУчета = Истина;
	ПоддержкаРаботыСоСтруктурнымиПодразделениями = ПолучитьФункциональнуюОпцию("ПоддержкаРаботыСоСтруктурнымиПодразделениями");
	
	ПроцедурыНалоговогоУчета.ПриИзмененииПризнакаОтраженияВНалоговомУчете(Объект.Организация, Объект.Дата, Объект.УчитыватьКПН);
		
	Если Параметры.Ключ.Пустая() Тогда
		
		ПроцедурыНалоговогоУчета.ЗаполнитьВидУчетаНУ(Объект.УчитыватьКПН, Объект.ВидУчетаНУ);
		
		//Объект.СчетРасчетовСПодотчетнымЛицом = ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПодотчетныхЛиц;
		Если НЕ ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			ПричиныИзмененияСчетовУчета = Новый Массив;
			ПричиныИзмененияСчетовУчета.Добавить("НовыйДокумент");
			ЗаполнитьСчетаУчета(ПричиныИзмененияСчетовУчета, "НовыйДокумент");
		КонецЕсли;
		
	КонецЕсли;
	
	РаботаСДиалогамиКлиентСервер.УстановитьВидимостьСтруктурногоПодразделения(Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	РаботаСДиалогамиКлиентСервер.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделениеОрганизация, Объект.СтруктурноеПодразделение, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	
	РаботаСДиалогами.УстановитьЗаголовокЭлементуУправленияУчитыватьКПН(Объект.Организация, Элементы.УчитыватьКПН);
	
	ТекущийДокументОснование = Объект.ДокументОснование;
	
	УстановитьДоступностьСубконто();		
	УправлениеФормой(ЭтаФорма);
	
	ОбщегоНазначенияБК.УстановитьТекстАвтора(НадписьАвтор, Объект.Автор);
	
КонецПроцедуры 

&НаСервере
Процедура УстановитьТекущуюСтраницуОсновнойПанели()
	
	СписокТабличныхЧастей = Новый СписокЗначений;
	СписокТабличныхЧастей.Добавить("ВыданныеАвансы",                   "ВыданныеАвансы");
	СписокТабличныхЧастей.Добавить("Товары",                           "Товары");
	СписокТабличныхЧастей.Добавить("ОплатаПоставщикам",                "ОплатаПоставщикам");
	СписокТабличныхЧастей.Добавить("ВыплатаЗаработнойПлаты",           "ВыплатаЗаработнойПлаты");
	СписокТабличныхЧастей.Добавить("ОплатаПоИсполнительнымЛистам",     "ОплатаПоИсполнительнымЛистам");
	СписокТабличныхЧастей.Добавить("ПеречислениеПенсионныхВзносов",    "ПеречислениеПенсионныхВзносов");
	СписокТабличныхЧастей.Добавить("ПеречислениеСоциальныхОтчислений", "ПеречислениеСоциальныхОтчислений");
	СписокТабличныхЧастей.Добавить("Прочее",                           "Прочее");
	
	АктивизироватьТабличнуюЧасть = ОбщегоНазначенияБКВызовСервера.ПолучитьТекущуюВидимуюТабличнуюЧасть(ЭтаФорма, СписокТабличныхЧастей);
	ОбщегоНазначенияБКВызовСервера.АктивизироватьЭлементФормы(ЭтаФорма, АктивизироватьТабличнуюЧасть);

КонецПроцедуры 

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()

	ОбщегоНазначенияБККлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);
	ОрганизацияПлательщикНалогаНаПрибыль = ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Объект.Организация, Объект.Дата);
	ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль = ОрганизацияПлательщикНалогаНаПрибыль И ПроцедурыНалоговогоУчета.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль(Объект.Организация, Объект.Дата);	
	
	ВедетсяУчетПоТоварамОрганизацийБУ   = НомераГТДСервер.ВедетсяУчетПоТоварамОрганизаций(Объект.Дата);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблиц()
	
	Для Каждого СтрокаТаблицы Из Объект.ВыданныеАвансы Цикл		
		
		СтруктураПоиска = Новый Структура("Документ", СтрокаТаблицы.Документ);
		НайденныеСтроки = СоответствиеСуммыДокументов.НайтиСтроки(СтруктураПоиска);
		
		Если НайденныеСтроки <> Неопределено И НайденныеСтроки.Количество() > 0 Тогда
			СуммаДокументаАванса = ОбщегоНазначенияБКВызовСервера.ФорматСумм(НайденныеСтроки[0].СуммаДокумента);
			СтрокаТаблицы.СуммаДокумента = СуммаДокументаАванса;
			СтрокаТаблицы.Выдано = СуммаДокументаАванса;
			СтрокаТаблицы.ВалютаДокумента = НайденныеСтроки[0].ВалютаДокумента;
		КонецЕсли;
		
	КонецЦикла;

	Для Каждого СтрокаТаблицы Из Объект.ПеречислениеПенсионныхВзносов Цикл
		ВидОперацииВедомости = ПолучитьЗначениеРеквизита(СтрокаТаблицы.Документ, "ВидОперации");
		Если ВидОперацииВедомости = ПредопределенноеЗначение("Перечисление.ВидыОперацийОПВПеречислениеВФонды.ПеречислениеОбязательныхПенсионныхВзносов") Тогда
			СтрокаТаблицы.ВидВзноса = НСтр("ru = 'ОПВ'");
		ИначеЕсли ВидОперацииВедомости = ПредопределенноеЗначение("Перечисление.ВидыОперацийОПВПеречислениеВФонды.ПеречислениеОбязательныхПенсионныхВзносовРаботодателя") Тогда
			СтрокаТаблицы.ВидВзноса = НСтр("ru = 'ОПВР'");
		Иначе
			СтрокаТаблицы.ВидВзноса = НСтр("ru = 'ОППВ'");
		КонецЕсли;
	КонецЦикла;

	Для Каждого СтрокаТаблицы Из Объект.ПеречислениеСоциальныхОтчислений Цикл
		ВидОперацииВедомости = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТаблицы.Документ, "ВидОперации");
		Если ВидОперацииВедомости = Перечисления.ВидыОперацийСОПеречислениеВФонды.ПеречислениеОбязательныхСоциальныхОтчислений Тогда
			СтрокаТаблицы.ВидВзноса = НСтр("ru = 'СО'");
		ИначеЕсли ВидОперацииВедомости = Перечисления.ВидыОперацийСОПеречислениеВФонды.ПеречислениеВзносовОСМС Тогда
			СтрокаТаблицы.ВидВзноса = НСтр("ru = 'ВОСМС'");
		ИначеЕсли ВидОперацииВедомости = Перечисления.ВидыОперацийСОПеречислениеВФонды.ПеречислениеОтчисленийОСМС Тогда
			СтрокаТаблицы.ВидВзноса = НСтр("ru = 'ООСМС'");
		КонецЕсли;
	КонецЦикла;

	Для Каждого ТекСтрока Из Объект.ОплатаПоставщикам Цикл
		ТекСтрока.ДоступностьСделки    = ПолучитьДоступностьСделки(ТекСтрока.ДоговорКонтрагента);	
		ТекСтрока.ВалютаВзаиморасчетов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТекСтрока.ДоговорКонтрагента, "ВалютаВзаиморасчетов").ВалютаВзаиморасчетов;
	КонецЦикла; 
		
КонецПроцедуры 

&НаСервере
Процедура ЗаполнитьСчетаРасчетовСПодотчетнымиЛицами()
	
	СписокОтбора = Новый СписокЗначений;
	СписокОтбора.Добавить(ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПодотчетныхЛиц);
	СписокОтбора.Добавить(ПланыСчетов.Типовой.ДолгосрочнаяЗадолженностьПодотчетныхЛиц);	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СчетаРасчетовСПодотчетнымиЛицами", СписокОтбора);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Типовой.Ссылка КАК Счет,
	|	Типовой.Код КАК Код,
	|	Типовой.Наименование КАК Наименование
	|ИЗ
	|	ПланСчетов.Типовой КАК Типовой
	|
	|ГДЕ
	|	Типовой.Ссылка В ИЕРАРХИИ(&СчетаРасчетовСПодотчетнымиЛицами) И
	|	(НЕ(Типовой.Ссылка В (ВЫБРАТЬ РАЗЛИЧНЫЕ СчетРодитель.Родитель ИЗ ПланСчетов.Типовой КАК СчетРодитель ГДЕ НЕ(СчетРодитель.Родитель = НЕОПРЕДЕЛЕНО) ))) И
	|	(НЕ(Типовой.ЗапретитьИспользоватьВПроводках))
	|
	|УПОРЯДОЧИТЬ ПО
	|	Код";
	Результат = Запрос.Выполнить().Выбрать();
	
	Индекс = 0;
	Пока Результат.Следующий() Цикл
		Элементы.СчетРасчетовСПодотчетнымЛицом.СписокВыбора.Вставить(Индекс, Результат.Счет, Результат.Код + " " + Результат.Наименование);
		Индекс = Индекс + 1;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	// Доступность взаимосвязанных полей
	Элементы.ВидУчетаНУ.Видимость            = Объект.УчитыватьКПН;
	//Элементы.ПрочееГруппаСубконтоСчетаНУ.Видимость = Объект.УчитыватьКПН;
	Элементы.ДекорацияВидУчетаНУ.Видимость   = (НЕ Объект.УчитыватьКПН) ИЛИ (НЕ Форма.ОрганизацияПлательщикНалогаНаПрибыль);
	Элементы.ДекорацияУчитыватьКПН.Видимость = НЕ Форма.ОрганизацияПлательщикНалогаНаПрибыль;
	
	Форма.ВидимостьНалоговогоУчета = Объект.УчитыватьКПН И (Форма.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль ИЛИ Объект.ВидУчетаНУ = ПредопределенноеЗначение("Справочник.ВидыУчетаНУ.НУ"));	
	
	СформироватьНадписьЦеныИВалюта(Форма);
	
	Элементы.Склад.ОтметкаНезаполненного = (Объект.Товары.Количество() > 0);
	
	Элементы.ТоварыНомерГТД.Видимость     = Форма.ВедетсяУчетПоТоварамОрганизацийБУ;
	//Элементы.ТоварыСчетУчетаНДС.Видимость =  НЕ Объект.ОтложитьПринятиеНДСКЗачету;
	//Элементы.ПрочееСчетУчетаНДС.Видимость =  НЕ Объект.ОтложитьПринятиеНДСКЗачету;
	
	Элементы.ТоварыНДСВидПоступления.ОтметкаНезаполненного     = НЕ Объект.ОтложитьПринятиеНДСКЗачету;
	Элементы.ТоварыНДСВидПоступления.АвтоОтметкаНезаполненного = НЕ Объект.ОтложитьПринятиеНДСКЗачету;
	Элементы.ТоварыНДСВидОборота.ОтметкаНезаполненного         = НЕ Объект.ОтложитьПринятиеНДСКЗачету;
	Элементы.ТоварыНДСВидОборота.АвтоОтметкаНезаполненного     = НЕ Объект.ОтложитьПринятиеНДСКЗачету;

	Элементы.ПрочееНДСВидПоступления.АвтоОтметкаНезаполненного  = НЕ Объект.ОтложитьПринятиеНДСКЗачету;
	Элементы.ПрочееНДСВидОборота.АвтоОтметкаНезаполненного      = НЕ Объект.ОтложитьПринятиеНДСКЗачету; 	
	Элементы.ПрочееНДСВидПоступления.ОтметкаНезаполненного      = НЕ Объект.ОтложитьПринятиеНДСКЗачету;
	Элементы.ПрочееНДСВидОборота.ОтметкаНезаполненного          = НЕ Объект.ОтложитьПринятиеНДСКЗачету;
	
	//Элементы.СчетРасчетовСПодотчетнымЛицом.Видимость = Форма.ПоказыватьВДокументахСчетаУчета;
    
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПересчитатьСуммуВыданныхАвансов(Форма)
	
	Объект = Форма.Объект;
	
	Форма.СоответствиеСуммыДокументов.Очистить();
	АвансовВыдано = 0;
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РасходныйКассовыйОрдер.Ссылка,
	|	РасходныйКассовыйОрдер.СуммаДокумента КАК СуммаДокумента,
	|	РасходныйКассовыйОрдер.ВалютаДокумента
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
	|ГДЕ
	|	РасходныйКассовыйОрдер.Ссылка В(&МассивДокументов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПеречислениеВПодотчет.Ссылка,
	|	СУММА(ПеречислениеВПодотчет.СуммаПлатежа),
	|	ПеречислениеВПодотчет.Ссылка.ВалютаДокумента
	|ИЗ
	|	Документ.ПлатежноеПоручениеИсходящее.ПеречислениеВПодотчет КАК ПеречислениеВПодотчет
	|ГДЕ
	|	ПеречислениеВПодотчет.Ссылка В(&МассивДокументов)
	|	И ПеречислениеВПодотчет.ФизЛицо = &ФизЛицо
	|
	|СГРУППИРОВАТЬ ПО
	|	ПеречислениеВПодотчет.Ссылка";
	Запрос.УстановитьПараметр("МассивДокументов", Объект.ВыданныеАвансы.Выгрузить().ВыгрузитьКолонку("Документ"));
	Запрос.УстановитьПараметр("ФизЛицо", Объект.ФизЛицо);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаТЗ = Форма.СоответствиеСуммыДокументов.Добавить();
		СтрокаТЗ.Документ = Выборка.Ссылка;
		СтрокаТЗ.СуммаДокумента = Выборка.СуммаДокумента;
		СтрокаТЗ.ВалютаДокумента = Выборка.ВалютаДокумента;
		АвансовВыдано = АвансовВыдано + Выборка.СуммаДокумента;
	КонецЦикла;
	
	Форма.ВсегоАвансов = АвансовВыдано;

КонецПроцедуры	

&НаСервере 
Процедура ДатаПриИзмененииНаСервере(СтруктураРезультатаВыполненияПриИзмененииДаты)
	
	УстановитьФункциональныеОпцииФормы();
	
	ФлагИзмененияКурса = Неопределено;
	РаботаСДиалогами.ПриИзмененииЗначенияДатыДокумента(Объект, ВалютаРегламентированногоУчета, ФлагИзмененияКурса, Истина, СтруктураРезультатаВыполненияПриИзмененииДаты);
	
	ПроцедурыНалоговогоУчета.ПриИзмененииПризнакаОтраженияВНалоговомУчете(Объект.Организация, Объект.Дата, Объект.УчитыватьКПН, Истина);
	ПроцедурыНалоговогоУчета.ЗаполнитьВидУчетаНУ(Объект.УчитыватьКПН, Объект.ВидУчетаНУ);
	
	// Если изменился курс пересчитаем оплату
	Если ФлагИзмененияКурса Тогда
		ИзменитьКурсВТабличнойЧастиОплатаПоставщикам();	
	КонецЕсли;

	ТекущаяДатаДокумента = Объект.Дата;
	
	УправлениеФормой(ЭтаФорма);
	УстановитьВидимостьСчетовУчета();
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьКурсВТабличнойЧастиОплатаПоставщикам()
	
	Если Объект.ОплатаПоставщикам.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 
		
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	АвансовыйОтчетОплатаПоставщикам.ДоговорКонтрагента
	|ПОМЕСТИТЬ ВТ_Договора
	|ИЗ
	|	&ОплатаПоставщикам КАК АвансовыйОтчетОплатаПоставщикам
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Договора.ДоговорКонтрагента КАК Договор,
	|	ВТ_Договора.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК Валюта
	|ПОМЕСТИТЬ ВТ_ДоговорВалюта
	|ИЗ
	|	ВТ_Договора КАК ВТ_Договора
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Валюта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КурсыВалютСрезПоследних.Курс,
	|	КурсыВалютСрезПоследних.Кратность,
	|	ВТ_ДоговорВалюта.Договор,
	|	ВТ_ДоговорВалюта.Валюта
	|ИЗ
	|	ВТ_ДоговорВалюта КАК ВТ_ДоговорВалюта
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(
	|				&Дата,
	|				Валюта В
	|					(ВЫБРАТЬ
	|						ВТ_ДоговорВалюта.Валюта
	|					ИЗ
	|						ВТ_ДоговорВалюта)) КАК КурсыВалютСрезПоследних
	|		ПО ВТ_ДоговорВалюта.Валюта = КурсыВалютСрезПоследних.Валюта";
	Запрос.УстановитьПараметр("ОплатаПоставщикам", Объект.ОплатаПоставщикам.Выгрузить(,"ДоговорКонтрагента"));
	Запрос.УстановитьПараметр("Дата", Объект.Дата);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	  	
	Для Каждого СтрокаТаблицы Из Объект.ОплатаПоставщикам Цикл
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.ДоговорКонтрагента) Тогда
			
			СтруктураПоиска = Новый Структура("Договор", СтрокаТаблицы.ДоговорКонтрагента);
			
			НайденнаяСтрока = РезультатЗапроса.НайтиСтроки(СтруктураПоиска);
			Если НайденнаяСтрока <> Неопределено И НайденнаяСтрока.Количество() > 0 Тогда
				
				ВалютаДоговора                        = НайденнаяСтрока[0].Валюта;
				СтрокаТаблицы.КурсВзаиморасчетов      = НайденнаяСтрока[0].Курс;
				СтрокаТаблицы.КратностьВзаиморасчетов = НайденнаяСтрока[0].Кратность;
				СтрокаТаблицы.СуммаВзаиморасчетов     = ОбщегоНазначенияБККлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Сумма,
					Объект.ВалютаДокумента, ВалютаДоговора, Объект.КурсДокумента, СтрокаТаблицы.КурсВзаиморасчетов,
					Объект.КратностьДокумента, СтрокаТаблицы.КратностьВзаиморасчетов);
				
			КонецЕсли; 
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры
                   
&НаСервере
Процедура УчитыватьКПНПриИзмененииНаСервере()
	
	ПроцедурыНалоговогоУчета.ЗаполнитьВидУчетаНУ(Объект.УчитыватьКПН, Объект.ВидУчетаНУ);
	УправлениеФормой(ЭтаФорма);
	УстановитьВидимостьСчетовУчета();
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(ОчищатьНекорректныеЗначения, Параметры)

	Параметры.Вставить("ОчищатьНекорректныеЗначения", ОчищатьНекорректныеЗначения);
	
	СтруктураРезультатаВыполнения = Неопределено;
	СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(Параметры, СтруктураРезультатаВыполнения);
		
	//Если Параметры.Свойство("ИзмененаОрганизация") И Параметры.ИзмененаОрганизация Тогда
	//	Если ПоказыватьВДокументахСчетаУчета И Объект.Товары.Количество() > 0 Тогда
	//		ПоказатьВопросОЗаполненииСчетовУчета("ПослеЗакрытияВопросаПроЗаполнениеСчетовЗаполнитьСчета");
	//	КонецЕсли;		   
	//КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораСтруктурногоПодразделения(Результат, Параметры) Экспорт
	
	РаботаСДиалогамиКлиент.ПослеВыбораСтруктурногоПодразделения(Результат, Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация);
	Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
		Модифицированность = Истина;
		Результат.Вставить("НеобходимоИзменитьЗначенияРеквизитовОбъекта", Ложь);
		Если Объект.Прочее.Количество() > 0 Тогда
			СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(Истина, Результат);
		Иначе
			СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(Ложь, Результат);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(СтруктураПараметров = Неопределено, СтруктураРезультатаВыполнения)
	
	Если СтруктураПараметров = Неопределено	ИЛИ (СтруктураПараметров.Свойство("НеобходимоИзменитьЗначенияРеквизитовОбъекта") 
				И СтруктураПараметров.НеобходимоИзменитьЗначенияРеквизитовОбъекта) Тогда 
		РаботаСДиалогами.СтруктурноеПодразделениеПриИзменении(СтруктурноеПодразделениеОрганизация, Объект.Организация, Объект.СтруктурноеПодразделение, СтруктураПараметров);
	КонецЕсли;
		
	ПриИзмененииЗначенияОрганизацииСервер(СтруктураПараметров, СтруктураРезультатаВыполнения);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииЗначенияОрганизацииСервер(СтруктураПараметров, СтруктураРезультатаВыполнения)
	
	Если НЕ СтруктураПараметров.ИзмененаОрганизация И НЕ СтруктураПараметров.ИзмененоСтруктурноеПодразделение Тогда
		Возврат;
	КонецЕсли;
	
	ПричиныИзмененияСчетовУчета = Новый Массив;
	Если СтруктураПараметров.ИзмененаОрганизация Тогда
		ПричиныИзмененияСчетовУчета.Добавить("Организация");
	КонецЕсли;
	
	ПриИзмененииЗначенияСтруктурногоПодразделенияСервер(СтруктураПараметров);
	
	УстановитьФункциональныеОпцииФормы();
		
	РаботаСДиалогами.ПриИзмененииЗначенияОрганизации(Объект, , СтруктураРезультатаВыполнения);
	ПроцедурыНалоговогоУчета.ПриИзмененииПризнакаОтраженияВНалоговомУчете(Объект.Организация, Объект.Дата, Объект.УчитыватьКПН, Истина);	
	ПроцедурыНалоговогоУчета.ЗаполнитьВидУчетаНУ(Объект.УчитыватьКПН, Объект.ВидУчетаНУ);
	РаботаСДиалогами.УстановитьЗаголовокЭлементуУправленияУчитыватьКПН(Объект.Организация, Элементы.УчитыватьКПН);
	
	Если СтруктураПараметров.Свойство("ИзмененаОрганизация") И СтруктураПараметров.ИзмененаОрганизация Тогда
		ПроверкаДокументовОформленныхНаДругуюОрганизацию(Объект);
	КонецЕсли;
	
	УправлениеДенежнымиСредствамиСервер.ПроверитьСоответствиеОрганизацииДоговора(Объект, СтруктураПараметров, "ОплатаПоставщикам");
	
	ЗаполнитьСчетаУчета(ПричиныИзмененияСчетовУчета, "Организация");
		
	Для Каждого ТекСтрока Из Объект.Прочее Цикл
		
		ПараметрыДокумента = СписокПараметровВыбораСубконто(Объект, ТекСтрока, "СубконтоЗатратБУ%Индекс%", "СчетЗатратБУ");
		ПроцедурыБухгалтерскогоУчетаКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, ТекСтрока, "СубконтоЗатратБУ%Индекс%", "ПрочееСубконтоЗатратБУ%Индекс%", ПараметрыДокумента);
		
		ПараметрыДокумента = СписокПараметровВыбораСубконто(Объект, ТекСтрока, "СубконтоЗатратНУ%Индекс%", "СчетЗатратНУ");
		ПроцедурыБухгалтерскогоУчетаКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, ТекСтрока, "СубконтоЗатратНУ%Индекс%", "ПрочееСубконтоЗатратНУ%Индекс%", ПараметрыДокумента);
		
	КонецЦикла; 
		
	УправлениеФормой(ЭтаФорма);
	УстановитьВидимостьСчетовУчета();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПроверкаДокументовОформленныхНаДругуюОрганизацию(Объект)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	АвансовыйОтчетВыданныеАвансы.Документ КАК ВыданныеАвансы,
	|	&Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТ_ВыданныеАвансы
	|ИЗ
	|	&ВыданныеАвансы КАК АвансовыйОтчетВыданныеАвансы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АвансовыйОтчетВыплатаЗаработнойПлаты.Ведомость КАК ВыплатаЗаработнойПлаты,
	|	&Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТ_ВыплатаЗаработнойПлаты
	|ИЗ
	|	&ВыплатаЗаработнойПлаты КАК АвансовыйОтчетВыплатаЗаработнойПлаты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АвансовыйОтчетОплатаПоИсполнительнымЛистам.Документ КАК ОплатаПоИсполнительнымЛистам,
	|	&Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТ_ОплатаПоИсполнительнымЛистам
	|ИЗ
	|	&ОплатаПоИсполнительнымЛистам КАК АвансовыйОтчетОплатаПоИсполнительнымЛистам
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ВТ_ВыданныеАвансы.ВыданныеАвансы.Организация <> &Организация
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ВыданныеАвансы,
	|	ВЫБОР
	|		КОГДА ВТ_ОплатаПоИсполнительнымЛистам.ОплатаПоИсполнительнымЛистам.Организация <> &Организация
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ОплатаПоИсполнительнымЛистам,
	|	ВЫБОР
	|		КОГДА ВТ_ВыплатаЗаработнойПлаты.ВыплатаЗаработнойПлаты.Организация <> &Организация
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ВыплатаЗаработнойПлаты
	|ИЗ
	|	ВТ_ВыданныеАвансы КАК ВТ_ВыданныеАвансы
	|		ПОЛНОЕ СОЕДИНЕНИЕ ВТ_ОплатаПоИсполнительнымЛистам КАК ВТ_ОплатаПоИсполнительнымЛистам
	|		ПО ВТ_ВыданныеАвансы.Ссылка = ВТ_ОплатаПоИсполнительнымЛистам.Ссылка
	|		ПОЛНОЕ СОЕДИНЕНИЕ ВТ_ВыплатаЗаработнойПлаты КАК ВТ_ВыплатаЗаработнойПлаты
	|		ПО ВТ_ВыданныеАвансы.Ссылка = ВТ_ВыплатаЗаработнойПлаты.Ссылка
	|ИТОГИ
	|	СУММА(ВыданныеАвансы),
	|	СУММА(ОплатаПоИсполнительнымЛистам),
	|	СУММА(ВыплатаЗаработнойПлаты)
	|ПО
	|	ОБЩИЕ";

	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("ВыданныеАвансы", Объект.ВыданныеАвансы.Выгрузить());
	Запрос.УстановитьПараметр("ВыплатаЗаработнойПлаты", Объект.ВыплатаЗаработнойПлаты.Выгрузить());
	Запрос.УстановитьПараметр("ОплатаПоИсполнительнымЛистам", Объект.ОплатаПоИсполнительнымЛистам.Выгрузить());
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Если РезультатЗапроса.Следующий() Тогда
		
		Если РезультатЗапроса.ВыданныеАвансы > 0 Тогда
			Объект.ВыданныеАвансы.Очистить();
			ТекстСообщения = НСтр("ru='Изменилась организация документа. Табличная часть ""Авансы"" очищена.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, , "Объект"); 
		КонецЕсли; 
		
		Если РезультатЗапроса.ОплатаПоИсполнительнымЛистам > 0 Тогда
			Объект.ОплатаПоИсполнительнымЛистам.Очистить();
			ТекстСообщения = НСтр("ru='Изменилась организация документа. Табличная часть ""Оплата по исп. листам"" очищена.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, , "Объект"); 
		КонецЕсли;
		
		Если РезультатЗапроса.ВыплатаЗаработнойПлаты > 0 Тогда
			Объект.ВыплатаЗаработнойПлаты.Очистить();
			ТекстСообщения = НСтр("ru='Изменилась организация документа. Табличная часть ""Выплата зарплаты"" очищена.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, , "Объект"); 
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииЗначенияСтруктурногоПодразделенияСервер(СтруктураПараметров)
	
	Если СтруктураПараметров.Свойство("ОчищатьНекорректныеЗначения") И НЕ СтруктураПараметров.ОчищатьНекорректныеЗначения Тогда 
		Возврат;
	КонецЕсли;
	
	Если Объект.Прочее.Количество() = 0 Тогда
		Возврат;
	Конецесли;
        
	СписокТабличныхЧастей = Новый СписокЗначений;
	СписокАналитикиСчетов = Новый СписокЗначений;

	СписокАналитикиСчетов.Добавить("ЗатратБУ");
	СписокАналитикиСчетов.Добавить("ЗатратНУ");

	СтруктураРеквизитов = Новый Структура("ТабличнаяЧасть, СписокАналитикиСчетов", Объект.Прочее, СписокАналитикиСчетов); 
	СписокТабличныхЧастей.Добавить(СтруктураРеквизитов);

	РаботаСДиалогами.ПроверитьСоответствиеПодразделения(Объект.Организация, Объект.СтруктурноеПодразделение, , СписокТабличныхЧастей);
		
КонецПроцедуры

//&НаКлиенте
//Процедура ПоказатьВопросОЗаполненииСчетовУчета(ИмяПроцедурыОбработкиВыбораПользователя, ДопПараметры = Неопределено, ДополнениеКВопросу = "")
//	
//	Если ДопПараметры = Неопределено Тогда 
//		ДопПараметры = Новый Структура;
//	КонецЕсли;
//	
//	ТекстВопроса = НСтр("ru='%1Установить счета учета в соответствии со значениями по умолчанию?'");
//	ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстВопроса, ДополнениеКВопросу);
//	Режим = РежимДиалогаВопрос.ДаНет;
//	Оповещение = Новый ОписаниеОповещения(ИмяПроцедурыОбработкиВыбораПользователя, ЭтотОбъект, ДопПараметры);
//	ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
//	
//КонецПроцедуры

//&НаКлиенте
//Процедура ПослеЗакрытияВопросаПроЗаполнениеСчетовЗаполнитьСчета(Результат, ДопПараметры) Экспорт
//	
//	Если Результат <> КодВозвратаДиалога.Да Тогда 
//		Возврат;
//	КонецЕсли;
//	
//	ЗаполнитьСчетаУчетаНаСервере();
//		
//КонецПроцедуры

//&НаСервере
//Процедура ЗаполнитьСчетаУчетаНаСервере()
//	
//	Если Объект.Товары.Количество() > 0 Тогда
//		Документы.АвансовыйОтчет.ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, "Товары");
//	КонецЕсли;
//	
//КонецПроцедуры

&НаСервере
Процедура ФизЛицоПриИзмененииНаСервере()
	
	ПризнакОчистки = Ложь;
	
	// Проверка наличия документов, оформленных на другое лицо
	Если Объект.ВыданныеАвансы.Количество() > 0 Тогда

		Запрос = Новый Запрос; 		
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РасходныйКассовыйОрдер.Ссылка
		|ИЗ
		|	Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
		|ГДЕ
		|	РасходныйКассовыйОрдер.Ссылка В(&МассивДокументов)
		|	И РасходныйКассовыйОрдер.Контрагент <> &ФизЛицо
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПеречислениеВПодотчет.Ссылка
		|ИЗ
		|	Документ.ПлатежноеПоручениеИсходящее.ПеречислениеВПодотчет КАК ПеречислениеВПодотчет
		|ГДЕ
		|	ПеречислениеВПодотчет.Ссылка В(&МассивДокументов)
		|	И ПеречислениеВПодотчет.ФизЛицо <> &ФизЛицо";
		Запрос.УстановитьПараметр("МассивДокументов", Объект.ВыданныеАвансы.Выгрузить().ВыгрузитьКолонку("Документ"));
		Запрос.УстановитьПараметр("ФизЛицо", Объект.ФизЛицо);
		
		ПризнакОчистки = НЕ Запрос.Выполнить().Пустой();
	
	КонецЕсли;
	
	// Если выбраны кассовые документы, оформленные на другого подотчетника, необходимо очистить табличную часть
	Если ПризнакОчистки Тогда
		ТекстСообщения = НСтр("ru='Изменилось подотчетное лицо. Табличная часть ""Авансы"" очищена.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект.Ссылка,, "Объект"); 
		Объект.ВыданныеАвансы.Очистить();
		ВсегоАвансов = 0;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораИзСпискаДокументаТабличнойЧастиВыданныеАвансы(Результат, ДопПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НовыеПараметры = Новый Массив;
	
	НовыйПараметр  = Новый ПараметрВыбора("Отбор.Организация",     Объект.Организация);
	НовыеПараметры.Добавить(НовыйПараметр);

	НовыйПараметр  = Новый ПараметрВыбора("Отбор.ВалютаДокумента", Объект.ВалютаДокумента);
	НовыеПараметры.Добавить(НовыйПараметр);
	
	Если Результат.Значение = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда				
		НовыйПараметр = Новый ПараметрВыбора("Отбор.ВидОперации", ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетнику"));
		НовыеПараметры.Добавить(НовыйПараметр);
		
		Если ЗначениеЗаполнено(Объект.ФизЛицо) Тогда
			НовыйПараметр = Новый ПараметрВыбора("Отбор.Контрагент", Объект.ФизЛицо);
			НовыеПараметры.Добавить(НовыйПараметр);
		КонецЕсли; 
		
		Если ДопПараметры <> Неопределено Тогда
			Элементы.ВыданныеАвансы.ТекущиеДанные.Документ = ПредопределенноеЗначение("Документ.РасходныйКассовыйОрдер.ПустаяСсылка");
		КонецЕсли; 
		
	Иначе
		
		НовыйПараметр = Новый ПараметрВыбора("Отбор.Ссылка", ПолучитьСписокДокументовДляОтбора(Объект.ФизЛицо));
		НовыеПараметры.Добавить(НовыйПараметр);			
				
		Если ДопПараметры <> Неопределено Тогда
			Элементы.ВыданныеАвансы.ТекущиеДанные.Документ = ПредопределенноеЗначение("Документ.ПлатежноеПоручениеИсходящее.ПустаяСсылка");
		КонецЕсли;
	
	КонецЕсли;

	Элементы.ВыданныеАвансы.ПодчиненныеЭлементы.ВыданныеАвансыДокумент.ПараметрыВыбора = Новый ФиксированныйМассив(НовыеПараметры);
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСписокДокументовДляОтбора(ФизЛицо)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПлатежноеПоручениеИсходящееПеречислениеВПодотчет.Ссылка
	|ИЗ
	|	Документ.ПлатежноеПоручениеИсходящее.ПеречислениеВПодотчет КАК ПлатежноеПоручениеИсходящееПеречислениеВПодотчет
	|ГДЕ
	|	ПлатежноеПоручениеИсходящееПеречислениеВПодотчет.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийППИсходящее.ПеречислениеДенежныхСредствПодотчетнику)";
	
	Если ЗначениеЗаполнено(ФизЛицо) Тогда
		Запрос.Текст = Запрос.Текст + "
		|	И ПлатежноеПоручениеИсходящееПеречислениеВПодотчет.ФизЛицо = &ФизЛицо";
	КонецЕсли; 
	
	Запрос.УстановитьПараметр("ФизЛицо", ФизЛицо);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");	  
	
КонецФункции

&НаСервереБезКонтекста
Процедура ВыданныеАвансыДокументПриИзмененииНаСервере(Документ, ФизЛицо)
	
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
		ФизЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, "Контрагент");
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.ПлатежноеПоручениеИсходящее") Тогда
		ПеречислениеВПодотчет = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, "ПеречислениеВПодотчет").Выгрузить();
		Если ПеречислениеВПодотчет.Количество() > 0 Тогда
			ФизЛицо = ПеречислениеВПодотчет[0].ФизЛицо;
		КонецЕсли;		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Функция ПолучитьПараметрыПодбора(ИмяТаблицы, ПредставлениеТаблицы)
    
	ЗаголовокПодбора	 = НСтр("ru = 'Подбор номенклатуры в %1 (%2)'");
	
	ЗаголовокПодбора     = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ЗаголовокПодбора, Объект.Ссылка, ПредставлениеТаблицы);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация"             , Объект.Организация);
	ПараметрыФормы.Вставить("СтруктурноеПодразделение", Объект.СтруктурноеПодразделение);
	ПараметрыФормы.Вставить("Заголовок"               , ЗаголовокПодбора);
	ПараметрыФормы.Вставить("ИмяТаблицы"              , ИмяТаблицы);
	ПараметрыФормы.Вставить("Товар"                   , ИмяТаблицы = "Товары");
	ПараметрыФормы.Вставить("Услуги"                  , ИмяТаблицы = "Услуги");
	ПараметрыФормы.Вставить("ЕстьЦена"                , Истина);
	ПараметрыФормы.Вставить("ТипЦен"                  , Объект.ТипЦен);
	ПараметрыФормы.Вставить("ВалютаДокумента"         , Объект.ВалютаДокумента);
	ПараметрыФормы.Вставить("ВыбиратьВсе"             , Истина);	
	ПараметрыФормы.Вставить("СпособЗаполненияЦен"	  , ПредопределенноеЗначение("Перечисление.СпособыЗаполненияЦен.ПоЦенамНоменклатуры"));
	
	СписокЗапросов = Новый СписокЗначений();
	СписокЗапросов.Добавить("ПоСправочнику",        НСтр("ru = 'По справочнику'"));
		
	ПараметрыФормы.Вставить("СписокВидовПодбора", СписокЗапросов);
	ПараметрыФормы.Вставить("ОбъектСсылка"      , Объект.Ссылка);
	
	Возврат ПараметрыФормы;

КонецФункции

&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИмяТаблицы)
	
	Если ИмяТаблицы <> "Товары" Тогда
		Возврат;
	КонецЕсли;
	                                                                            	
	СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры;
	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресПодобраннойНоменклатурыВХранилище);
	
	СведенияОСпискеНоменклатуры = ОбработкаТабличныхЧастей.ПолучитьСведенияОСпискеНоменклатуры(
				ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаТоваров, "Номенклатура", Истина), Объект);
	
	СтрокиДляЗаполненияСчетов = Новый Массив;
	
	Для Каждого СтрокаТовара Из ТаблицаТоваров Цикл
				
		Если СтрокаТовара.Номенклатура.Услуга Тогда
			ТекстСообщения = НСтр("ru='В данном контексте услуги не подбираются!'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, , "Объект"); 
			Возврат;
		КонецЕсли;
				
		// Ищем выбранную позицию в таблице подобранной номенклатуры.
		//  Если найдем - увеличим количество; не найдем - добавим новую строку.
		СтруктураОтбора = Новый Структура();
		СтруктураОтбора.Вставить("Номенклатура",     СтрокаТовара.Номенклатура);
		СтруктураОтбора.Вставить("ЕдиницаИзмерения", СтрокаТовара.ЕдиницаИзмерения);
		
		Если ЗначениеЗаполнено(СтрокаТовара.Цена) Тогда
			СтруктураОтбора.Вставить("Цена", СтрокаТовара.Цена);
		КонецЕсли;
		
		// если всегда добавлять новую строку
		Если Элементы.ТоварыТоварыВсегдаДобавлять.Пометка Тогда 
			СтрокаТабличнойЧасти = Неопределено;
		Иначе 
			СтрокаТабличнойЧасти = ОбработкаТабличныхЧастейКлиентСервер.НайтиСтрокуТабЧасти(Объект, ИмяТаблицы, СтруктураОтбора);
		КонецЕсли;

		Если СтрокаТабличнойЧасти <> Неопределено Тогда
			// Нашли, увеличиваем количество в первой найденной строке.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + СтрокаТовара.Количество;
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Объект);			
			
		Иначе
		
			// Не нашли - добавляем новую строку.
			СведенияОНоменклатуре = СведенияОСпискеНоменклатуры.Получить(СтрокаТовара.Номенклатура);
			
			СтрокаТабличнойЧасти = Объект[ИмяТаблицы].Добавить();
			СтрокаТабличнойЧасти.Номенклатура     = СтрокаТовара.Номенклатура;
			СтрокаТабличнойЧасти.Количество       = СтрокаТовара.Количество;
			СтрокаТабличнойЧасти.СтавкаНДС        = СведенияОНоменклатуре.СтавкаНДС;
			СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтрокаТовара.ЕдиницаИзмерения;
			СтрокаТабличнойЧасти.Коэффициент      = СведенияОНоменклатуре.Коэффициент;                                 			                                                                                                			
			
			// Пересчитаем цену в валюту документа.
			Цена = УправлениеЦенообразованием.ПересчитатьЦенуПриИзмененииВалюты(СтрокаТовара.Цена, СтрокаТовара.Валюта, Объект.ВалютаДокумента, ОбщегоНазначенияБК.КурсДокумента(Объект, ВалютаРегламентированногоУчета), ОбщегоНазначенияБК.КратностьДокумента(Объект, ВалютаРегламентированногоУчета), Объект.Дата);

			СтрокаТабличнойЧасти.Цена = ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена,
								   СпособЗаполненияЦен,
								   ?(ЗначениеЗаполнено(Объект.ТипЦен), ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ТипЦен, "ЦенаВключаетНДС"), Объект.СуммаВключаетНДС),
								   Объект.УчитыватьНДС,
								   Объект.СуммаВключаетНДС,
								   УчетНДСиАкцизаВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС),
								   Ложь,
								   Ложь,
								   Ложь,
								   0);

			// Рассчитываем реквизиты табличной части.
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Объект);
			
			ДанныеОбъекта = Новый Структура("Дата, Организация, УчитыватьКПН, УчитыватьНДС, Ссылка");
			ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
			//Документы.АвансовыйОтчет.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, СтрокаТабличнойЧасти, ИмяТаблицы, СведенияОНоменклатуре.СчетаУчета);
			//Документы.АвансовыйОтчет.ЗаполнитьРеквизитыНалоговогоУчета(ДанныеОбъекта, СтрокаТабличнойЧасти, ИмяТаблицы);	
			
			СтрокиДляЗаполненияСчетов.Добавить(СтрокаТабличнойЧасти);
			
		КонецЕсли;
		
	КонецЦикла;
	
	СчетаУчетаВДокументах.ЗаполнитьСтроки(СтрокиДляЗаполненияСчетов, ИмяТаблицы, Объект, Документы.АвансовыйОтчет);
	
	ОбновитьПодвал(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораПодборОплатыНаСервере(ВыбранноеЗначение)
	
	Для Каждого ДокументДляОбработки Из ВыбранноеЗначение Цикл
		
		Если ДокументДляОбработки.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам Тогда
			Сделка = ДокументДляОбработки.Ссылка;
		Иначе
			Сделка = Неопределено;
		КонецЕсли;
		
		// Добавление нового документа, а в случае, если он еще не выбирался
		// либо в настройке подбора указано добавление новой строки при повторном выборе документа
		
		ДобавлятьНовуюСтроку							= Истина;			
		СоздаватьНовыеСтрокиПриПовторномВыбореДокумента = Истина;
		
		ДокументДляОбработки.Свойство("СоздаватьНовыеСтрокиПриПовторномВыбореДокумента", СоздаватьНовыеСтрокиПриПовторномВыбореДокумента);
		
		Если СоздаватьНовыеСтрокиПриПовторномВыбореДокумента = Ложь Тогда
			СтруктураОтбора = Новый Структура();
			СтруктураОтбора.Вставить("Контрагент",     ДокументДляОбработки.Контрагент);
			СтруктураОтбора.Вставить("ДоговорКонтрагента", ДокументДляОбработки.ДоговорКонтрагента);
			СтруктураОтбора.Вставить("Сделка", Сделка);
			СтруктураОтбора.Вставить("СчетУчетаРасчетовСКонтрагентом", ДокументДляОбработки.СчетУчетаРасчетовСКонтрагентом);
			СтруктураОтбора.Вставить("СчетУчетаРасчетовПоАвансам", ДокументДляОбработки.СчетУчетаРасчетовПоАвансам);
			
			СтрокаТабличнойЧасти = ОбработкаТабличныхЧастейКлиентСервер.НайтиСтрокуТабЧасти(Объект, "ОплатаПоставщикам", СтруктураОтбора);
			ДобавлятьНовуюСтроку = СтрокаТабличнойЧасти = Неопределено;
		КонецЕсли;	
		Если ДобавлятьНовуюСтроку Тогда
			НоваяСтрока = Объект.ОплатаПоставщикам.Добавить();
			НоваяСтрока.Контрагент = ДокументДляОбработки.Контрагент;
			НоваяСтрока.ДоговорКонтрагента 	= ДокументДляОбработки.ДоговорКонтрагента;
			НоваяСтрока.Сделка 				= Сделка;
			НоваяСтрока.Сумма 				= ДокументДляОбработки.СуммаДокумента;
			НоваяСтрока.СуммаВзаиморасчетов = ДокументДляОбработки.СуммаДокумента;
			НоваяСтрока.СчетУчетаРасчетовПоАвансам 		= ДокументДляОбработки.СчетУчетаРасчетовПоАвансам;
			НоваяСтрока.СчетУчетаРасчетовСКонтрагентом 	= ДокументДляОбработки.СчетУчетаРасчетовСКонтрагентом;
			НоваяСтрока.КурсВзаиморасчетов 		= ДокументДляОбработки.КурсВзаиморасчетов;
			НоваяСтрока.КратностьВзаиморасчетов = ДокументДляОбработки.КратностьВзаиморасчетов;
			
			НоваяСтрока.НомерВходящегоДокумента = ДокументДляОбработки.НомерВходящегоДокумента;
			
			Если ЗначениеЗаполнено(ДокументДляОбработки.ДатаВходящегоДокумента) Тогда
				НоваяСтрока.ДатаВходящегоДокумента	= ДокументДляОбработки.ДатаВходящегоДокумента;		
			Иначе	
				НоваяСтрока.ДатаВходящегоДокумента 	= ДокументДляОбработки.Дата;
			КонецЕсли;		
			
			Если ЗначениеЗаполнено(ДокументДляОбработки.ВидВходящегоДокумента) Тогда
				НоваяСтрока.ВидВходящегоДокумента   = ДокументДляОбработки.ВидВходящегоДокумента;
			Иначе	
				НоваяСтрока.ВидВходящегоДокумента   = Справочники.ВидыПервичныхДокументов.НакладнаяЧек.Наименование;
			КонецЕсли;
			
		Иначе				
			// Если документ уже был ранее выбран и в настройке подбора снят признак добавления документов, то предполагаем что ничего делать не нужно 
			ТекстСообщения = НСтр("ru='Документ: %1 был добавлен ранее, строка: %2'");
	        ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ДокументДляОбработки.Ссылка, СтрокаТабличнойЧасти.НомерСтроки);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект.Ссылка,, "Объект"); 
		КонецЕсли;
		
	КонецЦикла;

	ОбновитьПодвал(ЭтаФорма);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ТоварыПриНачалеРедактированияНаСервере(ТекущиеДанные, ДанныеОбъекта, СчетаУчетаКЗаполнению)
	//Документы.АвансовыйОтчет.ЗаполнитьРеквизитыНалоговогоУчета(ДанныеОбъекта, ТекущиеДанные, "Товары");	
		
	ЗаполненныеСчета = СчетаУчетаВДокументах.ЗаполнитьРеквизитыПриИзменении(
		Документы.АвансовыйОтчет,
		СчетаУчетаКЗаполнению,
		ДанныеОбъекта,
		"Товары",
		ТекущиеДанные);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ЗаполненныеСчета);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ТоварыНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, ДанныеОбъекта, СчетаУчетаКЗаполнению)
	
	//МетаданныеДокумента = ДанныеОбъекта.Ссылка.Метаданные();
	
	СведенияОНоменклатуре = ОбработкаТабличныхЧастей.ПолучитьСведенияОНоменклатуре(СтрокаТабличнойЧасти.Номенклатура, ДанныеОбъекта);
	
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.ЕдиницаИзмерения  = СведенияОНоменклатуре.БазоваяЕдиницаИзмерения;
	СтрокаТабличнойЧасти.Коэффициент	   = СведенияОНоменклатуре.Коэффициент;
	СтрокаТабличнойЧасти.Цена			   = СведенияОНоменклатуре.Цена;
	СтрокаТабличнойЧасти.СтавкаНДС         = СведенияОНоменклатуре.СтавкаНДС;
		
	// Рассчитываем реквизиты табличной части.
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДанныеОбъекта);
					
	//Документы.АвансовыйОтчет.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, СтрокаТабличнойЧасти, "Товары", СведенияОНоменклатуре);
	
	ЗаполненныеСчета = СчетаУчетаВДокументах.ЗаполнитьРеквизитыПриИзменении(
		Документы.АвансовыйОтчет,
		СчетаУчетаКЗаполнению,
		ДанныеОбъекта,
		"Товары",
		СтрокаТабличнойЧасти);
	
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ЗаполненныеСчета);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДоступностьСделки(ДоговорКонтрагента)
	
	Если ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;

КонецФункции

&НаСервереБезКонтекста
Процедура ОплатаПоставщикамКонтрагентПриИзмененииНаСервере(СтрокаТабличнойЧасти, ДанныеОбъекта, СчетаУчетаКЗаполнению)
	
	ДоступныйОсновнойДоговорКонтрагента = ОбщегоНазначенияБК.ПолучитьОсновнойДоговорКонтрагента(СтрокаТабличнойЧасти.Контрагент);
	
	Если ДоступныйОсновнойДоговорКонтрагента <> Неопределено И ((ДоступныйОсновнойДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком ИЛИ
		  ДоступныйОсновнойДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Прочее) И
		ДоступныйОсновнойДоговорКонтрагента.Организация = ДанныеОбъекта.Организация) Тогда
		СтрокаТабличнойЧасти.ДоговорКонтрагента = ДоступныйОсновнойДоговорКонтрагента;
	КонецЕсли;
	
	ОплатаПоставщикамДоговорКонтрагентаПриИзмененииНаСервере(СтрокаТабличнойЧасти, ДанныеОбъекта, СчетаУчетаКЗаполнению);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОплатаПоставщикамДоговорКонтрагентаПриИзмененииНаСервере(СтрокаТабличнойЧасти, ДанныеОбъекта, СчетаУчетаКЗаполнению)
	
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.ДоговорКонтрагента) Тогда
		ВалютаВзаиморасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТабличнойЧасти.ДоговорКонтрагента, "ВалютаВзаиморасчетов");
		СтруктураКурсаВзаиморасчетов = ОбщегоНазначенияБК.ПолучитьКурсВалюты(ВалютаВзаиморасчетов, ДанныеОбъекта.Дата);
		СтрокаТабличнойЧасти.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
		СтрокаТабличнойЧасти.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
	Иначе
		СтрокаТабличнойЧасти.КурсВзаиморасчетов      = 1;
		СтрокаТабличнойЧасти.КратностьВзаиморасчетов = 1;
	КонецЕсли; 
	
	РассчитатьСуммуВзаиморасчетов(СтрокаТабличнойЧасти, ДанныеОбъекта, ВалютаВзаиморасчетов);
	
	//СчетаУчета = УправлениеВзаиморасчетамиСервер.ПолучитьСчетаРасчетовСКонтрагентом(ДанныеОбъекта.Организация, СтрокаТабличнойЧасти.Контрагент, СтрокаТабличнойЧасти.ДоговорКонтрагента);
	//	
	//СтрокаТабличнойЧасти.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетов;
	//СтрокаТабличнойЧасти.СчетУчетаРасчетовПоАвансам     = СчетаУчета.СчетАвансов;
	
	ЗаполненныеСчета = СчетаУчетаВДокументах.ЗаполнитьРеквизитыПриИзменении(
		Документы.АвансовыйОтчет,
		СчетаУчетаКЗаполнению,
		ДанныеОбъекта,
		"ОплатаПоставщикам",
		СтрокаТабличнойЧасти);
	
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ЗаполненныеСчета);

	//Доступность поля "Сделка"
	ДоступностьСделки = ПолучитьДоступностьСделки(СтрокаТабличнойЧасти.ДоговорКонтрагента);
	СтрокаТабличнойЧасти.ДоступностьСделки = ДоступностьСделки;
	СтрокаТабличнойЧасти.Сделка = Неопределено;
	
	СтрокаТабличнойЧасти.ВалютаВзаиморасчетов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаТабличнойЧасти.ДоговорКонтрагента, "ВалютаВзаиморасчетов").ВалютаВзаиморасчетов;
			
КонецПроцедуры  

&НаСервереБезКонтекста
Процедура РассчитатьСуммуВзаиморасчетов(СтрокаТабличнойЧасти, ДанныеОбъекта, ВалютаВзаиморасчетов = Неопределено)
	
	Если ВалютаВзаиморасчетов = Неопределено Тогда
		ВалютаВзаиморасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТабличнойЧасти.ДоговорКонтрагента, "ВалютаВзаиморасчетов");
	КонецЕсли; 
	
	СтрокаТабличнойЧасти.СуммаВзаиморасчетов = ОбщегоНазначенияБККлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.Сумма, ДанныеОбъекта.ВалютаДокумента,
	                     ВалютаВзаиморасчетов, ДанныеОбъекта.КурсДокумента, СтрокаТабличнойЧасти.КурсВзаиморасчетов,
	                     ДанныеОбъекта.КратностьДокумента, СтрокаТабличнойЧасти.КратностьВзаиморасчетов);
		
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСуммуВзаиморасчетовНаКлиенте()
	
	ТекущиеДанные = Элементы.ОплатаПоставщикам.ТекущиеДанные;
		
	ТекущиеДанные.СуммаВзаиморасчетов = ОбщегоНазначенияБККлиентСервер.ПересчитатьИзВалютыВВалюту(ТекущиеДанные.Сумма, Объект.ВалютаДокумента,
	                     ТекущиеДанные.ВалютаВзаиморасчетов, Объект.КурсДокумента, ТекущиеДанные.КурсВзаиморасчетов,
	                     Объект.КратностьДокумента, ТекущиеДанные.КратностьВзаиморасчетов);	
						 
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЗначениеРеквизита(Ссылка, Реквизит)
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, Реквизит);
КонецФункции
 
&НаКлиенте
Процедура ПослеВводаКурсаКратности(Результат, Параметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		
		ТекущиеДанные = Элементы.ОплатаПоставщикам.ТекущиеДанные;
		ТекущиеДанные.КурсВзаиморасчетов      = Результат.КурсВалюты;
		ТекущиеДанные.КратностьВзаиморасчетов = Результат.КратностьВалюты;
		
		РассчитатьСуммуВзаиморасчетовНаКлиенте();
		
	КонецЕсли; 
	                                                             		
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВыплатаЗаработнойПлатыВедомостьПриИзмененииНаСервере(ТекущиеДанные, Ссылка)
	ТекущиеДанные.СуммаКВыплате = Документы.АвансовыйОтчет.ПолучитьСуммуКВыплатеЗарплатыПоВедомости(Ссылка, ТекущиеДанные.Ведомость);	
КонецПроцедуры

&НаСервере
Функция ВыплатаЗаработнойПлатыВедомостьНачалоВыбораНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗарплатаКВыплатеОрганизации.Ссылка КАК Ведомость
	|ИЗ
	|	Документ.ЗарплатаКВыплатеОрганизаций КАК ЗарплатаКВыплатеОрганизации
	|	ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				РанееВыплаченныеСуммы.Ведомость
	|			ИЗ
	|				РегистрСведений.СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям КАК РанееВыплаченныеСуммы
	|			ГДЕ
	|				РанееВыплаченныеСуммы.Регистратор <> &Регистратор) КАК РанееВыплаченныеСуммы
	|		ПО ЗарплатаКВыплатеОрганизации.Ссылка = РанееВыплаченныеСуммы.Ведомость
	|
	|ГДЕ
	|	ЗарплатаКВыплатеОрганизации.Организация = &Организация И
	|	ЗарплатаКВыплатеОрганизации.СпособВыплаты = &СпособВыплаты И
	|	(НЕ(ЗарплатаКВыплатеОрганизации.Ссылка В (
	|			ВЫБРАТЬ РАЗЛИЧНЫЕ 	
	|				ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка 
	|			ИЗ Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацииЗарплата 
	|				ГДЕ 	ЗарплатаКВыплатеОрганизацииЗарплата.ВыплаченностьЗарплаты = &НеВыплачено ))) И 
	|	РанееВыплаченныеСуммы.Ведомость ЕСТЬ NULL
	|";
	Запрос.УстановитьПараметр("Организация",   Объект.Организация);
	Запрос.УстановитьПараметр("СпособВыплаты", Перечисления.СпособыВыплатыЗарплаты.ЧерезКассу);
	Запрос.УстановитьПараметр("НеВыплачено",   Перечисления.ВыплаченностьЗарплаты.НеВыплачено);
	Запрос.УстановитьПараметр("Регистратор",   Объект.Ссылка);
	
	НовыйПараметр = Новый ПараметрВыбора("Отбор.Ссылка", Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ведомость"));
	
	НовыеПараметры = Новый Массив;
	НовыеПараметры.Добавить(НовыйПараметр);
	
	Возврат НовыеПараметры;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ОплатаПоИсполнительнымЛистамДокументПриИзмененииНаСервере(ДанныеСтроки)
			
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ЕстьNULL(ИЛПеречислениеПолучателямИсполнительныеЛисты.СуммаВзаиморасчетов, 0) КАК СуммаВзаиморасчетов,
	|	ЕстьNULL(ИЛПеречислениеПолучателямИсполнительныеЛисты.СуммаСборов, 0) КАК СуммаСборов,
	|	ЕстьNULL(ИЛПеречислениеПолучателямИсполнительныеЛисты.СуммаПлатежа, 0) КАК СуммаПлатежа
	|ИЗ
	|	Документ.ИЛПеречислениеПолучателям.ИсполнительныеЛисты КАК ИЛПеречислениеПолучателямИсполнительныеЛисты
	|ГДЕ
	|	ИЛПеречислениеПолучателямИсполнительныеЛисты.Ссылка = &Ссылка
	|ИТОГИ
	|	СУММА(СуммаВзаиморасчетов),
	|	СУММА(СуммаСборов),
	|	СУММА(СуммаПлатежа)
	|ПО
	|	ОБЩИЕ";
	Запрос.УстановитьПараметр("Ссылка", ДанныеСтроки.Документ);
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	Если РезультатЗапроса.Следующий() Тогда
		ДанныеСтроки.СуммаКОплате = РезультатЗапроса.СуммаВзаиморасчетов;
		ДанныеСтроки.СуммаСборов  = РезультатЗапроса.СуммаСборов;
		ДанныеСтроки.СуммаПлатежа = РезультатЗапроса.СуммаПлатежа;
	Иначе
		ДанныеСтроки.СуммаКОплате = 0;
		ДанныеСтроки.СуммаСборов  = 0;
		ДанныеСтроки.СуммаПлатежа = 0;
	КонецЕсли; 	 
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСуммуПенсионныхВзносов(Документ)
		
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ОПВПеречислениеВФондыПенсионныеВзносы.Сумма КАК Сумма
	|ИЗ
	|	Документ.ОПВПеречислениеВФонды.ПенсионныеВзносы КАК ОПВПеречислениеВФондыПенсионныеВзносы
	|ГДЕ
	|	ОПВПеречислениеВФондыПенсионныеВзносы.Ссылка = &Ссылка
	|ИТОГИ
	|	СУММА(Сумма)
	|ПО
	|	ОБЩИЕ";
	Запрос.УстановитьПараметр("Ссылка", Документ);
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	Если РезультатЗапроса.Следующий() Тогда
		Возврат РезультатЗапроса.Сумма;
	КонецЕсли; 
	
	Возврат 0;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСуммуСоциальныхОтчислений(Документ)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	СОПеречислениеВФондыСоциальныеОтчисления.Сумма КАК Сумма
	|ИЗ
	|	Документ.СОПеречислениеВФонды.СоциальныеОтчисления КАК СОПеречислениеВФондыСоциальныеОтчисления
	|ГДЕ
	|	СОПеречислениеВФондыСоциальныеОтчисления.Ссылка = &Ссылка
	|ИТОГИ
	|	СУММА(Сумма)
	|ПО
	|	ОБЩИЕ";
	Запрос.УстановитьПараметр("Ссылка", Документ);
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	Если РезультатЗапроса.Следующий() Тогда
		Возврат РезультатЗапроса.Сумма;
	КонецЕсли; 	 
	
	Возврат 0;
	
КонецФункции

&НаСервере
Процедура УстановитьДоступностьСубконто()
			
	Для Каждого СтрокаПрочее Из Объект.Прочее Цикл
		
		ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
		"СубконтоЗатратБУ1", "СубконтоЗатратБУ2", "СубконтоЗатратБУ3");
		
		ПроцедурыБухгалтерскогоУчетаКлиентСервер.УстановитьДоступностьИЗаголовкиСубконто(СтрокаПрочее.СчетЗатратБУ, СтрокаПрочее, ПоляОбъекта);
		
		ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
		"СубконтоЗатратНУ1", "СубконтоЗатратНУ2", "СубконтоЗатратНУ3");
		
		ПроцедурыБухгалтерскогоУчетаКлиентСервер.УстановитьДоступностьИЗаголовкиСубконто(СтрокаПрочее.СчетЗатратНУ, СтрокаПрочее, ПоляОбъекта);		
		
		// установка параметров выбора для подчиненных и иным способом связанных объектов аналитики
		ПараметрыДокумента = СписокПараметровВыбораСубконто(Объект, СтрокаПрочее, "СубконтоЗатратБУ" + "%Индекс%", "СчетЗатратБУ");
		ПроцедурыБухгалтерскогоУчетаКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, СтрокаПрочее, "СубконтоЗатратБУ" + "%Индекс%", "ПрочееСубконтоЗатратБУ" + "%Индекс%", ПараметрыДокумента);	
		
		ПараметрыДокумента = СписокПараметровВыбораСубконто(Объект, СтрокаПрочее, "СубконтоЗатратНУ" + "%Индекс%", "СчетЗатратНУ");
		ПроцедурыБухгалтерскогоУчетаКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, СтрокаПрочее, "СубконтоЗатратНУ" + "%Индекс%", "ПрочееСубконтоЗатратНУ" + "%Индекс%", ПараметрыДокумента);	
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СписокПараметровВыбораСубконто(ДанныеОбъекта, ПараметрыОбъекта, ШаблонИмяПоляОбъекта, ИмяСчета)

	СписокПараметров = Новый Структура;
	Для Индекс = 1 По 3 Цикл
		ИмяПоля = СтрЗаменить(ШаблонИмяПоляОбъекта, "%Индекс%", Индекс);
		Если ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Контрагенты") Тогда
			СписокПараметров.Вставить("Контрагент", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ПроцедурыБухгалтерскогоУчетаКлиентСерверПереопределяемый.ПолучитьОписаниеТиповДоговора().СодержитТип(ТипЗнч(ПараметрыОбъекта[ИмяПоля])) Тогда
			СписокПараметров.Вставить("ДоговорКонтрагента", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Номенклатура") Тогда
			СписокПараметров.Вставить("Номенклатура", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Склады") Тогда
			СписокПараметров.Вставить("Склад", ПараметрыОбъекта[ИмяПоля]);
		КонецЕсли;
	КонецЦикла;
	СписокПараметров.Вставить("СчетУчета", 				  ПараметрыОбъекта[ИмяСчета]);	
	СписокПараметров.Вставить("Организация", 			  ДанныеОбъекта.Организация);
	СписокПараметров.Вставить("СтруктурноеПодразделение", ДанныеОбъекта.СтруктурноеПодразделение);
	СписокПараметров.Вставить("ВыбиратьПодразделенияОрганизации", Истина);

	Возврат СписокПараметров;

КонецФункции

&НаСервереБезКонтекста
Процедура ПрочееНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, Знач ДанныеОбъекта, СчетаУчетаКЗаполнению)
	
	СведенияОНоменклатуре = ОбработкаТабличныхЧастей.ПолучитьСведенияОНоменклатуре(СтрокаТабличнойЧасти.Номенклатура, ДанныеОбъекта);
	
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.Содержание = СведенияОНоменклатуре.Содержание;
	СтрокаТабличнойЧасти.СтавкаНДС  = СведенияОНоменклатуре.СтавкаНДС;
	
	// Рассчитываем реквизиты табличной части.
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДанныеОбъекта);
	
	ЗаполненныеСчета = СчетаУчетаВДокументах.ЗаполнитьРеквизитыПриИзменении(
		Документы.АвансовыйОтчет,
		СчетаУчетаКЗаполнению,
		ДанныеОбъекта,
		"Прочее",
		СтрокаТабличнойЧасти);
	
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ЗаполненныеСчета);

	ПоляОбъектаСубконто   = Новый Структура("Субконто1, Субконто2, Субконто3", "СубконтоЗатратБУ1", "СубконтоЗатратБУ2", "СубконтоЗатратБУ3");
	ПоляОбъектаСубконтоНУ = Новый Структура("Субконто1, Субконто2, Субконто3", "СубконтоЗатратНУ1", "СубконтоЗатратНУ2", "СубконтоЗатратНУ3");
	
	ПроцедурыБухгалтерскогоУчетаКлиентСервер.УстановитьДоступностьИЗаголовкиСубконто(СтрокаТабличнойЧасти.СчетЗатратБУ, СтрокаТабличнойЧасти, ПоляОбъектаСубконто);
	ПроцедурыБухгалтерскогоУчетаКлиентСервер.УстановитьДоступностьИЗаголовкиСубконто(СтрокаТабличнойЧасти.СчетЗатратНУ, СтрокаТабличнойЧасти, ПоляОбъектаСубконтоНУ);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьПараметрыВыбораПолейСубконто(Форма, Суффикс, ИмяСчета, ЗаменаСубконтоНУ = Ложь)
	
	ТекущаяСтрока = Форма.Элементы.Прочее.ТекущаяСтрока;
	ТекущиеДанные = Форма.Объект.Прочее.НайтиПоИдентификатору(ТекущаяСтрока);
		
	ПараметрыДокумента = СписокПараметровВыбораСубконто(Форма.Объект, ТекущиеДанные, "Субконто" + Суффикс + "%Индекс%", ИмяСчета);
	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(Форма, ТекущиеДанные, "Субконто" + Суффикс + "%Индекс%", "ПрочееСубконто" + Суффикс + "%Индекс%", ПараметрыДокумента, ЗаменаСубконтоНУ);	

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПрочееСчетДоходовБУПриИзмененииНаСервере(СтрокаТабличнойЧасти, ДанныеОбъекта)
	
	ПроцедурыБухгалтерскогоУчета.ПроверитьВладельцаСубконтоПодразделение(СтрокаТабличнойЧасти, 
	                                        ДанныеОбъекта.Организация, 
	                                        Новый Структура("НазваниеСубконтоБУ1, НазваниеСубконтоБУ2, НазваниеСубконтоБУ3, 
	                                                        |СубконтоБУ1, СубконтоБУ2, СубконтоБУ3",
	                                                        "СубконтоЗатратБУ1", "СубконтоЗатратБУ2", "СубконтоЗатратБУ3", 
	                                                        СтрокаТабличнойЧасти.СубконтоЗатратБУ1, СтрокаТабличнойЧасти.СубконтоЗатратБУ2, СтрокаТабличнойЧасти.СубконтоЗатратБУ3));
															
	СчетаУчета = Новый Структура("СчетЗатратБУ, СубконтоЗатратБУ1,
								 |СубконтоЗатратБУ2, СубконтоЗатратБУ3", СтрокаТабличнойЧасти.СчетЗатратБУ,
								 СтрокаТабличнойЧасти.СубконтоЗатратБУ1, СтрокаТабличнойЧасти.СубконтоЗатратБУ2,
								 СтрокаТабличнойЧасти.СубконтоЗатратБУ3);

	ПроцедурыБухгалтерскогоУчета.ЗаполнитьАналитикуСчетаТабличнойЧасти(СтрокаТабличнойЧасти, СчетаУчета, "СубконтоЗатратБУ", "СчетЗатратБУ", "СубконтоЗатратБУ");
															
	ПроцедурыБухгалтерскогоУчета.ПроверитьВладельцаСубконтоПодразделение(СтрокаТабличнойЧасти, ДанныеОбъекта.Организация, 
	                                        Новый Структура("НазваниеСубконтоБУ1, НазваниеСубконтоБУ2, НазваниеСубконтоБУ3, 
	                                                        |СубконтоБУ1, СубконтоБУ2, СубконтоБУ3",
	                                                        "СубконтоЗатратНУ1", "СубконтоЗатратНУ2", "СубконтоЗатратНУ3", 
	                                                        СтрокаТабличнойЧасти.СубконтоЗатратНУ1, СтрокаТабличнойЧасти.СубконтоЗатратНУ2, СтрокаТабличнойЧасти.СубконтоЗатратНУ3));
															
	СчетаУчета = Новый Структура("СчетЗатратНУ, СубконтоЗатратНУ1,
								 |СубконтоЗатратНУ2, СубконтоЗатратНУ3", СтрокаТабличнойЧасти.СчетЗатратНУ,
								 СтрокаТабличнойЧасти.СубконтоЗатратНУ1, СтрокаТабличнойЧасти.СубконтоЗатратНУ2,
								 СтрокаТабличнойЧасти.СубконтоЗатратНУ3);

	ПроцедурыБухгалтерскогоУчета.ЗаполнитьАналитикуСчетаТабличнойЧасти(СтрокаТабличнойЧасти, СчетаУчета, "СубконтоЗатратНУ", "СчетЗатратНУ", "СубконтоЗатратНУ");

КонецПроцедуры

&НаКлиенте
Процедура СубконтоНачалоВыбора(Элемент, ИмяЭлементаСубконто, ИндексСубконто, ИмяЭлементаСчета, СтандартнаяОбработка)
	
	ТекущиеДанные      = Элементы.Прочее.ТекущиеДанные;
	ПараметрыДокумента = СписокПараметровВыбораСубконто(Объект, ТекущиеДанные, ИмяЭлементаСубконто + "%Индекс%", ИмяЭлементаСчета);
	
	ПроцедурыБухгалтерскогоУчетаКлиент.НачалоВыбораЗначенияСубконто(ЭтаФорма, Элемент, ИндексСубконто, СтандартнаяОбработка, ПараметрыДокумента);	
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПрочееСчетДоходовНУПриИзмененииНаСервере(СтрокаТабличнойЧасти, ДанныеОбъекта)
	
	ПроцедурыБухгалтерскогоУчета.ПроверитьВладельцаСубконтоПодразделение(СтрокаТабличнойЧасти, ДанныеОбъекта.Организация, 
	                                        Новый Структура("НазваниеСубконтоБУ1, НазваниеСубконтоБУ2, НазваниеСубконтоБУ3, 
	                                                        |СубконтоБУ1, СубконтоБУ2, СубконтоБУ3",
	                                                        "СубконтоЗатратНУ1", "СубконтоЗатратНУ2", "СубконтоЗатратНУ3", 
	                                                        СтрокаТабличнойЧасти.СубконтоЗатратНУ1, СтрокаТабличнойЧасти.СубконтоЗатратНУ2, СтрокаТабличнойЧасти.СубконтоЗатратНУ3));
															
	СчетаУчета = Новый Структура("СчетЗатратНУ, СубконтоЗатратНУ1,
								 |СубконтоЗатратНУ2, СубконтоЗатратНУ3", СтрокаТабличнойЧасти.СчетЗатратНУ,
								 СтрокаТабличнойЧасти.СубконтоЗатратНУ1, СтрокаТабличнойЧасти.СубконтоЗатратНУ2,
								 СтрокаТабличнойЧасти.СубконтоЗатратНУ3);

	ПроцедурыБухгалтерскогоУчета.ЗаполнитьАналитикуСчетаТабличнойЧасти(СтрокаТабличнойЧасти, СчетаУчета, "СубконтоЗатратНУ", "СчетЗатратНУ", "СубконтоЗатратНУ");

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаПриИзмененииДокументОснование(Результат, Параметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;	
	КонецЕсли;
	
	ПослеЗакрытияВопросаПриИзмененииДокументОснованиеНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗакрытияВопросаПриИзмененииДокументОснованиеНаСервере()
	
	ИсходныеДанные = Новый Структура("Организация, СтруктурноеПодразделение");
	ЗаполнитьЗначенияСвойств(ИсходныеДанные, Объект);
	
	Для Каждого ТекСтрока Из Объект.Ссылка.Метаданные().ТабличныеЧасти Цикл
		Объект[ТекСтрока.Имя].Очистить();
	КонецЦикла; 	
	
	Документы.АвансовыйОтчет.ЗаполнитьПоДокументуОснованию(Объект, Объект.ДокументОснование);
	ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(Объект, ВалютаРегламентированногоУчета, , , , Объект.ДокументОснование);
	
	ПараметрыОбработки = Новый Структура;
	ПараметрыОбработки.Вставить("ИзмененаОрганизация", ИсходныеДанные.Организация <> Объект.Организация);
	ПараметрыОбработки.Вставить("ИзмененоСтруктурноеПодразделение", ИсходныеДанные.СтруктурноеПодразделение <> Объект.СтруктурноеПодразделение);
	ПараметрыОбработки.Вставить("ОчищатьНекорректныеЗначения", Истина);
	
	ПриИзмененииЗначенияОрганизацииСервер(ПараметрыОбработки, Неопределено);
			
	УстановитьФункциональныеОпцииФормы();
	ЗаполнитьДобавленныеКолонкиТаблиц();
	УстановитьДоступностьСубконто();
	УправлениеФормой(ЭтаФорма);
	УстановитьВидимостьСчетовУчета();
	
	РаботаСДиалогамиКлиентСервер.УстановитьВидимостьСтруктурногоПодразделения(Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	РаботаСДиалогамиКлиентСервер.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделениеОрганизация, Объект.СтруктурноеПодразделение, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьПодвал(Форма)
	
	Объект = Форма.Объект;
	
	Форма.ТоварыИтогиВсего = Объект.Товары.Итог("Сумма");
	Форма.ТоварыИтогоНДС   = Объект.Товары.Итог("СуммаНДС");

	Если Объект.УчитыватьНДС И НЕ Объект.СуммаВключаетНДС Тогда
		Форма.ТоварыИтогиВсего = Форма.ТоварыИтогиВсего + Форма.ТоварыИтогоНДС;
	КонецЕсли;
	
	Форма.ВсегоПоОтчету = Форма.ТоварыИтогиВсего 
					+ Объект.ОплатаПоставщикам.Итог("Сумма")
	                + Объект.ОплатаПоИсполнительнымЛистам.Итог("СуммаПлатежа") 
	                + Объект.ВыплатаЗаработнойПлаты.Итог("СуммаКВыплате")
					+ Объект.ПеречислениеПенсионныхВзносов.Итог("Сумма")
					+ Объект.ПеречислениеСоциальныхОтчислений.Итог("Сумма")
	                + Объект.Прочее.Итог("Сумма") + ?(Объект.УчитыватьНДС И НЕ Объект.СуммаВключаетНДС, Объект.Прочее.Итог("СуммаНДС"),0);
	
	ОбновитьИзрасходовано(Форма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИзрасходовано(Форма)
	
	Объект = Форма.Объект;
	
	ИтогПоОтчету = Форма.ВсегоПоОтчету;
	
	Для Каждого СтрокаАванса ИЗ Объект.ВыданныеАвансы Цикл
		
		Если ИтогПоОтчету = 0 И СтрокаАванса.Сумма <> 0 Тогда
			СтрокаАванса.Сумма = 0;
			прервать;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаАванса.Документ) Тогда
			СтруктураПоиска = Новый Структура("Документ", СтрокаАванса.Документ);
			НайденныеСтроки = Форма.СоответствиеСуммыДокументов.НайтиСтроки(СтруктураПоиска);
			Если НайденныеСтроки <> Неопределено И НайденныеСтроки.Количество() > 0 Тогда
				СуммаДокументаАванса = НайденныеСтроки[0].СуммаДокумента;
			Иначе
				СуммаДокументаАванса = Неопределено;
			КонецЕсли; 
			
			Если СуммаДокументаАванса = Неопределено Тогда
				// вообще такого не должно было произойти, т.к. все документы из табл. части должны быть в соответствии
				ПересчитатьСуммуВыданныхАвансов(Форма);
				СтруктураПоиска = Новый Структура("Документ", СтрокаАванса.Документ);
				НайденныеСтроки = Форма.СоответствиеСуммыДокументов.НайтиСтроки(СтруктураПоиска);
				Если НайденныеСтроки <> Неопределено И НайденныеСтроки.Количество() > 0 Тогда
					СуммаДокументаАванса = НайденныеСтроки[0].СуммаДокумента;
				Иначе
					СуммаДокументаАванса = Неопределено;
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			СуммаДокументаАванса = 0;
		КонецЕсли;
		
		Если СуммаДокументаАванса = Неопределено Тогда 
			СуммаДокументаАванса = 0;
		КонецЕсли;
				
		Если СуммаДокументаАванса < ИтогПоОтчету Тогда
			Если СтрокаАванса.Сумма = СуммаДокументаАванса Тогда // чтобы при открытии уже записанного дока не возникало его модификации
				ИтогПоОтчету = ИтогПоОтчету - СтрокаАванса.Сумма;
				продолжить;
			КонецЕсли;
			СтрокаАванса.Сумма = СуммаДокументаАванса;
			ИтогПоОтчету = ИтогПоОтчету - СтрокаАванса.Сумма;
		Иначе
			Если СтрокаАванса.Сумма = ИтогПоОтчету Тогда
				ИтогПоОтчету = 0;
				продолжить;
			КонецЕсли;
			СтрокаАванса.Сумма = ИтогПоОтчету;
			ИтогПоОтчету = 0;
		КонецЕсли;
		
	КонецЦикла;
	
Конецпроцедуры

&НаКлиенте
Процедура ПослеЗакрытияФормыЦеныИВалюта(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если Объект.ВалютаДокумента <> Результат.ЗначенияПриЗакрытии.ВалютаДокумента
		И Объект.ВыданныеАвансы.Количество() > 0 Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ПослеЗакрытияФормыЦеныИВалютаОтветНаВопросОчисткиАвансов", 
			ЭтотОбъект, 
			Новый Структура("Результат, Параметры", Результат, ДополнительныеПараметры));
			
		ТекстВопроса = НСтр("ru = 'Изменилась валюта документа. Погашаемые данным документом авансы должны быть выписаны в валюте документа.
								  |Очистить табличную часть ""Авансы""?'");
		ПоказатьВопрос(
			ОписаниеОповещения,
			ТекстВопроса,
			РежимДиалогаВопрос.ДаНетОтмена,
			,
			КодВозвратаДиалога.Да);
		
		Возврат;
	КонецЕсли;
	
	ПослеЗакрытияФормыЦеныИВалютаФрагмент(Результат, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияФормыЦеныИВалютаОтветНаВопросОчисткиАвансов(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры.Параметры.Вставить("ОчищатьВыданныеАвансы", Результат = КодВозвратаДиалога.Да);
	
	Если ДополнительныеПараметры.Результат.ЗначенияПриЗакрытии.ВалютаДокумента <> ВалютаРегламентированногоУчета Тогда
		
		ТекстВопроса = НСтр("ru = 'Выбранная валюта не совпадает с валютой регламентированного учета.
			             		  |При изменении валюты будут очищены следующие табличные части:%1
								  |Изменить валюту документа и очистить табличные части?'");
								  
		ТекстДополнения = "";
		Если Объект.ОплатаПоИсполнительнымЛистам.Количество() <> 0 Тогда 
			ТекстДополнения = ТекстДополнения + Символы.ПС + Символы.Таб + "- " + НСтр("ru = 'Оплата по исполнительным листам'");
		КонецЕсли;
		
		Если Объект.ВыплатаЗаработнойПлаты.Количество() <> 0 Тогда 
			ТекстДополнения = ТекстДополнения + Символы.ПС + Символы.Таб + "- " + НСтр("ru = 'Выплата заработной платы'");
		КонецЕсли;
		
		Если Объект.ПеречислениеПенсионныхВзносов.Количество() <> 0 Тогда 
			ТекстДополнения = ТекстДополнения + Символы.ПС + Символы.Таб + "- " + НСтр("ru = 'Перечисление ОПВ'");
		КонецЕсли;
		
		Если Объект.ПеречислениеСоциальныхОтчислений.Количество() <> 0 Тогда 
			ТекстДополнения = ТекстДополнения + Символы.ПС + Символы.Таб + "- " + НСтр("ru = 'Перечисление СО'");
		КонецЕсли;
		
		Если ПустаяСтрока(ТекстДополнения) Тогда
			ПослеЗакрытияФормыЦеныИВалютаФрагмент(ДополнительныеПараметры.Результат, ДополнительныеПараметры.Параметры);
			Возврат;
		КонецЕсли;
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ПослеЗакрытияФормыЦеныИВалютаОтветНаВопросОчисткиТабличныхЧастей", 
			ЭтотОбъект, 
			ДополнительныеПараметры);
			
		ПоказатьВопрос(
			ОписаниеОповещения,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстВопроса, ТекстДополнения),
			РежимДиалогаВопрос.ДаНет,
			,
			КодВозвратаДиалога.Да);
		
		Возврат;
	КонецЕсли;
	
	ПослеЗакрытияФормыЦеныИВалютаФрагмент(ДополнительныеПараметры.Результат, ДополнительныеПараметры.Параметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияФормыЦеныИВалютаОтветНаВопросОчисткиТабличныхЧастей(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда 
		Возврат;
	КонецЕсли;
	
	Объект.ОплатаПоИсполнительнымЛистам.Очистить();
	Объект.ВыплатаЗаработнойПлаты.Очистить();
	Объект.ПеречислениеПенсионныхВзносов.Очистить();
	Объект.ПеречислениеСоциальныхОтчислений.Очистить();
	
	ПослеЗакрытияФормыЦеныИВалютаФрагмент(ДополнительныеПараметры.Результат, ДополнительныеПараметры.Параметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияФормыЦеныИВалютаФрагмент(Результат, Параметры)
	
	ОчищатьПредъявленСчетФактура = Объект.УчитыватьНДС <> Результат.ЗначенияПриЗакрытии.УчитыватьНДС И НЕ Результат.ЗначенияПриЗакрытии.УчитыватьНДС;
	
	УправлениеЦенообразованиемКлиент.ПослеЗакрытияФормыЦеныИВалюта(Результат, Параметры);
	ЗаполнитьДобавленныеКолонкиТаблиц();
		
	//Если Параметры <> Неопределено
	//	И Параметры.Свойство("ДополнительныеПараметры")
	//	И ТипЗнч(Параметры.ДополнительныеПараметры) = Тип("Структура") Тогда
	//	ДополнительныеПараметры = ДополнительныеПараметры;
	//    ПерезаполнитьСчетаУчета = ДополнительныеПараметры.Свойство("ПерезаполнитьСчетаУчета") И ДополнительныеПараметры.ПерезаполнитьСчетаУчета;
	//Иначе
	//	ПерезаполнитьСчетаУчета = Ложь;
	//КонецЕсли;
	
	//Если ПерезаполнитьСчетаУчета Тогда 
	//	ТолькоСчетаРасчетов = ДополнительныеПараметры.Свойство("ТолькоСчетаРасчетов") И ДополнительныеПараметры.ТолькоСчетаРасчетов;
	//	ПараметрыПерезаполненияСчетов = Новый Структура("ТолькоСчетаРасчетов", ТолькоСчетаРасчетов);
	//	Если ПоказыватьВДокументахСчетаУчета Тогда
	//		ПоказатьВопросОЗаполненииСчетовУчета("ПослеЗакрытияВопросаПроЗаполнениеСчетовЗаполнитьСчета", ПараметрыПерезаполненияСчетов);
	//	Иначе
	//		ПослеЗакрытияВопросаПроЗаполнениеСчетовЗаполнитьСчета(КодВозвратаДиалога.Да, ПараметрыПерезаполненияСчетов);
	//	КонецЕсли;
	//КонецЕсли;
	
	Если Параметры <> Неопределено
		И Параметры.Свойство("ОчищатьВыданныеАвансы")
		И Параметры.ОчищатьВыданныеАвансы Тогда 
		
		Объект.ВыданныеАвансы.Очистить();
	КонецЕсли;
	
	Если ОчищатьПредъявленСчетФактура Тогда 
		
		Для Каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл
			СтрокаТабличнойЧасти.ПредъявленСФ = Ложь;
		КонецЦикла;
		
		Для Каждого СтрокаТабличнойЧасти Из Объект.Прочее Цикл
			СтрокаТабличнойЧасти.ПредъявленСФ = Ложь;
		КонецЦикла;
		
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	УстановитьВидимостьСчетовУчета();
	
	ОбновитьПодвал(ЭтаФорма);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПрочееПриНачалеРедактированияНаСервере(ДанныеОбъекта, ДанныеСтроки, СчетаУчетаКЗаполнению)
	//Документы.АвансовыйОтчет.ЗаполнитьРеквизитыНалоговогоУчета(ДанныеОбъекта, ДанныеСтроки, "Прочее");	
	
	ЗаполненныеСчета = СчетаУчетаВДокументах.ЗаполнитьРеквизитыПриИзменении(
		Документы.АвансовыйОтчет,
		СчетаУчетаКЗаполнению,
		ДанныеОбъекта,
		"Прочее",
		ДанныеСтроки);
	
	ЗаполнитьЗначенияСвойств(ДанныеСтроки, ЗаполненныеСчета);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПеречислениеПенсионныхВзносовДокументПриИзмененииНаСервере(ДанныеСтроки)
	
	Если ЗначениеЗаполнено(ДанныеСтроки.Документ) Тогда
		ВидОперацииВедомости = ПолучитьЗначениеРеквизита(ДанныеСтроки.Документ, "ВидОперации");
		Если ВидОперацииВедомости = ПредопределенноеЗначение("Перечисление.ВидыОперацийОПВПеречислениеВФонды.ПеречислениеОбязательныхПенсионныхВзносов") Тогда
			ДанныеСтроки.ВидВзноса = НСтр("ru = 'ОПВ'");
		ИначеЕсли ВидОперацииВедомости = ПредопределенноеЗначение("Перечисление.ВидыОперацийОПВПеречислениеВФонды.ПеречислениеОбязательныхПенсионныхВзносовРаботодателя") Тогда
			ДанныеСтроки.ВидВзноса = НСтр("ru = 'ОПВР'");
		Иначе
			ДанныеСтроки.ВидВзноса = НСтр("ru = 'ОППВ'");
		КонецЕсли;
	КонецЕсли;  	
	
	ДанныеСтроки.Сумма = ПолучитьСуммуПенсионныхВзносов(ДанныеСтроки.Документ);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПеречислениеСоциальныхОтчисленийДокументПриИзмененииНаСервере(ДанныеСтроки)
	
	ВидОперацииВедомости = ПолучитьЗначениеРеквизита(ДанныеСтроки.Документ, "ВидОперации");
	Если ВидОперацииВедомости = Перечисления.ВидыОперацийСОПеречислениеВФонды.ПеречислениеОбязательныхСоциальныхОтчислений Тогда
		ДанныеСтроки.ВидВзноса = НСтр("ru = 'СО'");
	ИначеЕсли ВидОперацииВедомости = Перечисления.ВидыОперацийСОПеречислениеВФонды.ПеречислениеВзносовОСМС Тогда
		ДанныеСтроки.ВидВзноса = НСтр("ru = 'ВОСМС'");
	ИначеЕсли ВидОперацииВедомости = Перечисления.ВидыОперацийСОПеречислениеВФонды.ПеречислениеОтчисленийОСМС Тогда
		ДанныеСтроки.ВидВзноса = НСтр("ru = 'ООСМС'");
	КонецЕсли;
	
	ДанныеСтроки.Сумма = ПолучитьСуммуСоциальныхОтчислений(ДанныеСтроки.Документ);

КонецПроцедуры

&НаСервере
Процедура ВыданныеАвансыПриИзмененииНаСервере()
	
	ПересчитатьСуммуВыданныхАвансов(ЭтаФорма);
	ЗаполнитьДобавленныеКолонкиТаблиц();
	ОбновитьПодвал(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНомерГТДНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыВыбораНомераГТД = НомераГТДКлиент.ПараметрыВыбораНомераГТД(Объект, Элементы.Товары.ТекущиеДанные);
	НомераГТДКлиент.ТоварыНомерГТДНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка, ПараметрыВыбораНомераГТД);
	
КонецПроцедуры

#Область СчетаУчета

&НаСервере
Процедура УстановитьВидимостьСчетовУчета()
	
	ЭлементыСчетов = Новый Массив(); 
	ЭлементыСчетов.Добавить("СчетРасчетовСПодотчетнымЛицом");
	ЭлементыСчетов.Добавить("ТоварыСчетУчетаБУ");
	ЭлементыСчетов.Добавить("ТоварыСчетУчетаНУ");
	ЭлементыСчетов.Добавить("ТоварыСчетУчетаНДС");
	//ЭлементыСчетов.Добавить("ТоварыНДСВидОборота");
	//ЭлементыСчетов.Добавить("ТоварыНДСВидПоступления");
	ЭлементыСчетов.Добавить("ОплатаПоставщикамСчетУчетаРасчетовСКонтрагентом");
	ЭлементыСчетов.Добавить("ОплатаПоставщикамСчетУчетаРасчетовПоАвансам");
	
	//ЭлементыСчетов.Добавить("ПрочееСчетЗатратБУ");
	//ЭлементыСчетов.Добавить("ПрочееВидСубконтоЗатратБУ1");
	//ЭлементыСчетов.Добавить("ПрочееСубконтоЗатратБУ1");
	//ЭлементыСчетов.Добавить("ПрочееВидСубконтоЗатратБУ2");
	//ЭлементыСчетов.Добавить("ПрочееСубконтоЗатратБУ2");
	//ЭлементыСчетов.Добавить("ПрочееВидСубконтоЗатратБУ3");
	//ЭлементыСчетов.Добавить("ПрочееСубконтоЗатратБУ3");
	//ЭлементыСчетов.Добавить("ПрочееСчетЗатратНУ");
	//ЭлементыСчетов.Добавить("ПрочееВидСубконтоЗатратНУ1");
	//ЭлементыСчетов.Добавить("ПрочееСубконтоЗатратНУ1");
	//ЭлементыСчетов.Добавить("ПрочееВидСубконтоЗатратНУ2");
	//ЭлементыСчетов.Добавить("ПрочееСубконтоЗатратНУ2");
	//ЭлементыСчетов.Добавить("ПрочееВидСубконтоЗатратНУ3");
	//ЭлементыСчетов.Добавить("ПрочееСубконтоЗатратНУ3");
	//ЭлементыСчетов.Добавить("ПрочееСчетУчетаНДС");
	//ЭлементыСчетов.Добавить("ПрочееНДСВидОборота");
	//ЭлементыСчетов.Добавить("ПрочееНДСВидПоступления");
	
	СчетаУчетаВДокументах.УстановитьВидимостьСчетовУчета(Элементы, ЭлементыСчетов);
	
	ВидимостьНалоговогоУчета = Объект.УчитыватьКПН И (ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль ИЛИ Объект.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ);
	
	ПоказыватьВДокументахСчетаУчета = СчетаУчетаВДокументахВызовСервераПовтИсп.ПользовательУправляетСчетамиУчета();
	
	Если ПоказыватьВДокументахСчетаУчета Тогда
		
		Элементы.ТоварыСчетУчетаНДС.Видимость      = Объект.УчитыватьНДС И НЕ Объект.ОтложитьПринятиеНДСКЗачету И НЕ Объект.НДСВключенВСтоимость;
		//Элементы.ТоварыНДСВидОборота.Видимость     = Объект.УчитыватьНДС;
		//Элементы.ТоварыНДСВидПоступления.Видимость = Объект.УчитыватьНДС;
		
		Элементы.ТоварыСчетУчетаНУ.Видимость       = ВидимостьНалоговогоУчета;
		
	КонецЕсли;
	
	Элементы.ТоварыНДСВидОборота.Видимость         = Объект.УчитыватьНДС;
	Элементы.ТоварыНДСВидПоступления.Видимость     = Объект.УчитыватьНДС;

	Элементы.ПрочееГруппаСубконтоСчетаНУ.Видимость = Объект.УчитыватьКПН;
	Элементы.ПрочееСчетЗатратНУ.Видимость          = ВидимостьНалоговогоУчета;
	Элементы.ПрочееВидСубконтоЗатратНУ1.Видимость  = ВидимостьНалоговогоУчета;
	Элементы.ПрочееСубконтоЗатратНУ1.Видимость     = ВидимостьНалоговогоУчета;
	Элементы.ПрочееВидСубконтоЗатратНУ2.Видимость  = ВидимостьНалоговогоУчета;
	Элементы.ПрочееСубконтоЗатратНУ2.Видимость     = ВидимостьНалоговогоУчета;
	Элементы.ПрочееВидСубконтоЗатратНУ3.Видимость  = ВидимостьНалоговогоУчета;
	Элементы.ПрочееСубконтоЗатратНУ3.Видимость     = ВидимостьНалоговогоУчета;

	Элементы.ПрочееСчетУчетаНДС.Видимость          = Объект.УчитыватьНДС И НЕ Объект.ОтложитьПринятиеНДСКЗачету И НЕ Объект.НДСВключенВСтоимость;
	Элементы.ПрочееНДСВидОборота.Видимость         = Объект.УчитыватьНДС;
	Элементы.ПрочееНДСВидПоступления.Видимость     = Объект.УчитыватьНДС;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция НачатьЗаполнениеСчетовУчета(ПричиныИзменения, Объект = Неопределено, СтрокаСписка = Неопределено, КонтейнерОбъект = Неопределено, КонтейнерСтрокаСписка = Неопределено)

	// Код этой функции сформирован автоматически с помощью СчетаУчетаВДокументах.КодФункцииНачатьЗаполнениеСчетовУчета()

	ПараметрыЗаполнения = СчетаУчетаВДокументахКлиентСервер.НовыйПараметрыЗаполнения(
		"АвансовыйОтчет",
		ПричиныИзменения,
		Объект,
		СтрокаСписка,
		КонтейнерОбъект,
		КонтейнерСтрокаСписка);

	// 1. Заполняемые реквизиты
	// Создание нового документа
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("НовыйДокумент") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетРасчетовСПодотчетнымЛицом");
	КонецЕсли;
	
	// НоваяСтрокаТовары
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("НоваяСтрокаТовары") <> Неопределено Тогда
		ПараметрыЗаполнения.Заполнять = Истина;
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.НДСВидОборота");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.НДСВидПоступления");
	КонецЕсли;
	
	// НоваяСтрокаПрочее
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("НоваяСтрокаПрочее") <> Неопределено Тогда
		ПараметрыЗаполнения.Заполнять = Истина;
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Прочее.НДСВидОборота");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Прочее.НДСВидПоступления");
	КонецЕсли;

	// Товары.Номенклатура
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Товары.Номенклатура") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчетаБУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчетаНУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчетаНДС");
	КонецЕсли;

	// Организация
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Организация") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчетаБУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчетаНУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчетаНДС");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.НДСВидОборота");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.НДСВидПоступления");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ОплатаПоставщикам.СчетУчетаРасчетовСКонтрагентом");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ОплатаПоставщикам.СчетУчетаРасчетовПоАвансам");
	КонецЕсли;

	// Организация
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Организация") <> Неопределено Тогда
		ПараметрыЗаполнения.Заполнять = Истина;
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Прочее.СчетЗатратБУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Прочее.СубконтоЗатратБУ1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Прочее.СубконтоЗатратБУ2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Прочее.СубконтоЗатратБУ3");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Прочее.СчетЗатратНУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Прочее.СубконтоЗатратНУ1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Прочее.СубконтоЗатратНУ2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Прочее.СубконтоЗатратНУ3");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Прочее.СчетУчетаНДС");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Прочее.НДСВидОборота");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Прочее.НДСВидПоступления");
	КонецЕсли;

	// Дата
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Дата") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчетаБУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчетаНУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчетаНДС");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.НДСВидОборота");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.НДСВидПоступления");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Прочее.СчетЗатратБУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Прочее.СубконтоЗатратБУ1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Прочее.СубконтоЗатратБУ2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Прочее.СубконтоЗатратБУ3");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Прочее.СчетЗатратНУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Прочее.СубконтоЗатратНУ1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Прочее.СубконтоЗатратНУ2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Прочее.СубконтоЗатратНУ3");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Прочее.СчетУчетаНДС");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Прочее.НДСВидОборота");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Прочее.НДСВидПоступления");
	КонецЕсли;

	// УчитыватьНДС
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("УчитыватьНДС") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчетаНДС");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Прочее.СчетУчетаНДС");
	КонецЕсли;

	// НДСВключенВСтоимость
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("НДСВключенВСтоимость") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчетаНДС");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Прочее.СчетУчетаНДС");
	КонецЕсли;

	// ОплатаПоставщикам.Контрагент
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("ОплатаПоставщикам.Контрагент") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ОплатаПоставщикам.СчетУчетаРасчетовСКонтрагентом");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ОплатаПоставщикам.СчетУчетаРасчетовПоАвансам");
	КонецЕсли;

	// ОплатаПоставщикам.ДоговорКонтрагента
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("ОплатаПоставщикам.ДоговорКонтрагента") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ОплатаПоставщикам.СчетУчетаРасчетовСКонтрагентом");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ОплатаПоставщикам.СчетУчетаРасчетовПоАвансам");
	КонецЕсли;

	// ОплатаПоставщикам.СчетУчетаРасчетовСКонтрагентом
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("ОплатаПоставщикам.СчетУчетаРасчетовСКонтрагентом") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ОплатаПоставщикам.СчетУчетаРасчетовПоАвансам");
	КонецЕсли;

	// Прочее.Номенклатура
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Прочее.Номенклатура") <> Неопределено Тогда
		ПараметрыЗаполнения.Заполнять = Истина;
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Прочее.СчетЗатратБУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Прочее.СубконтоЗатратБУ1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Прочее.СубконтоЗатратБУ2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Прочее.СубконтоЗатратБУ3");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Прочее.СчетЗатратНУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Прочее.СубконтоЗатратНУ1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Прочее.СубконтоЗатратНУ2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Прочее.СубконтоЗатратНУ3");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Прочее.СчетУчетаНДС");
	КонецЕсли;

	// Прочее.СчетЗатратБУ
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Прочее.СчетЗатратБУ") <> Неопределено Тогда
		ПараметрыЗаполнения.Заполнять = Истина;
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Прочее.СубконтоЗатратБУ1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Прочее.СубконтоЗатратБУ2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Прочее.СубконтоЗатратБУ3");
	КонецЕсли;

	// Прочее.СчетЗатратНУ
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Прочее.СчетЗатратНУ") <> Неопределено Тогда
		ПараметрыЗаполнения.Заполнять = Истина;
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Прочее.СубконтоЗатратНУ1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Прочее.СубконтоЗатратНУ2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Прочее.СубконтоЗатратНУ3");
	КонецЕсли;

	// Прочее.СубконтоЗатратБУ1
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Прочее.СубконтоЗатратБУ1") <> Неопределено Тогда
		ПараметрыЗаполнения.Заполнять = Истина;
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Прочее.СубконтоЗатратНУ1");
	КонецЕсли;

	// Прочее.СубконтоЗатратБУ2
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Прочее.СубконтоЗатратБУ2") <> Неопределено Тогда
		ПараметрыЗаполнения.Заполнять = Истина;
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Прочее.СубконтоЗатратНУ2");
	КонецЕсли;

	// Прочее.СубконтоЗатратБУ3
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Прочее.СубконтоЗатратБУ3") <> Неопределено Тогда
		ПараметрыЗаполнения.Заполнять = Истина;
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Прочее.СубконтоЗатратНУ3");
	КонецЕсли;

	// 2. (если требуется) Передадим на сервер данные, необходимые для заполнения
	Если ПараметрыЗаполнения.Свойство("Контейнер") Тогда
		// Товары.Номенклатура
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Товары.Номенклатура") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаБУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "УчитыватьНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "НДСВключенВСтоимость");
		КонецЕсли;

		// Организация
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Организация") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаБУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "УчитыватьНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "НДСВключенВСтоимость");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "НДСВидОборота");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовСКонтрагентом");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ДоговорКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовПоАвансам");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетЗатратБУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоЗатратБУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоЗатратБУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоЗатратБУ3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетЗатратНУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоЗатратНУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоЗатратНУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоЗатратНУ3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "НДСВидОборота");
		КонецЕсли;

		// Дата
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Дата") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаБУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "УчитыватьНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "НДСВключенВСтоимость");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "НДСВидОборота");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетЗатратБУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоЗатратБУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоЗатратБУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоЗатратБУ3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетЗатратНУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоЗатратНУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоЗатратНУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоЗатратНУ3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "НДСВидОборота");
		КонецЕсли;

		// УчитыватьНДС
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("УчитыватьНДС") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "УчитыватьНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "НДСВключенВСтоимость");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
		КонецЕсли;

		// НДСВключенВСтоимость
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("НДСВключенВСтоимость") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "НДСВключенВСтоимость");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "УчитыватьНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
		КонецЕсли;

		// ОплатаПоставщикам.Контрагент
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("ОплатаПоставщикам.Контрагент") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовСКонтрагентом");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ДоговорКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовПоАвансам");
		КонецЕсли;

		// ОплатаПоставщикам.ДоговорКонтрагента
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("ОплатаПоставщикам.ДоговорКонтрагента") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ДоговорКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовСКонтрагентом");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовПоАвансам");
		КонецЕсли;

		// ОплатаПоставщикам.СчетУчетаРасчетовСКонтрагентом
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("ОплатаПоставщикам.СчетУчетаРасчетовСКонтрагентом") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовСКонтрагентом");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовПоАвансам");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ДоговорКонтрагента");
		КонецЕсли;

		// Прочее.Номенклатура
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Прочее.Номенклатура") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетЗатратБУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоЗатратБУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоЗатратБУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоЗатратБУ3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетЗатратНУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоЗатратНУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоЗатратНУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоЗатратНУ3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "УчитыватьНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "НДСВключенВСтоимость");
		КонецЕсли;

		// Прочее.СчетЗатратБУ
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Прочее.СчетЗатратБУ") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетЗатратБУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоЗатратБУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоЗатратБУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоЗатратБУ3");
		КонецЕсли;

		// Прочее.СчетЗатратНУ
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Прочее.СчетЗатратНУ") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетЗатратНУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоЗатратНУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоЗатратБУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоЗатратНУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоЗатратБУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоЗатратНУ3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоЗатратБУ3");
		КонецЕсли;

		// Прочее.СубконтоЗатратБУ1
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Прочее.СубконтоЗатратБУ1") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоЗатратБУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоЗатратНУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетЗатратНУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
		КонецЕсли;

		// Прочее.СубконтоЗатратБУ2
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Прочее.СубконтоЗатратБУ2") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоЗатратБУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоЗатратНУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетЗатратНУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
		КонецЕсли;

		// Прочее.СубконтоЗатратБУ3
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Прочее.СубконтоЗатратБУ3") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоЗатратБУ3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоЗатратНУ3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетЗатратНУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
		КонецЕсли;

	КонецЕсли; // Нужно передавать на сервер данные заполнения
	
	Возврат ПараметрыЗаполнения;

КонецФункции

&НаСервере
Процедура ЗаполнитьСчетаУчета(ПричиныИзмененияСчетовУчета, ИмяРеквизита)
	
	Если Не СчетаУчетаВДокументахКлиентСервер.МожноНачатьЗаполнениеСчетовУчета(ИмяРеквизита, ПричиныИзмененияСчетовУчета) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗаполнения = НачатьЗаполнениеСчетовУчета(ПричиныИзмененияСчетовУчета, Объект);
	ИзмененныеЗначения = СчетаУчетаВДокументах.ЗаполнитьОбъектПриИзменении(ПараметрыЗаполнения);
	
	Если ЗначениеЗаполнено(ИзмененныеЗначения)
		И СчетаУчетаВДокументахВызовСервераПовтИсп.ПользовательУправляетСчетамиУчета() Тогда
		ПоказатьСообщениеОЗаполненииСчетовУчета(Объект.Ссылка);
	КонецЕсли;
	
	Если СчетаУчетаВДокументахВызовСервераПовтИсп.ПользовательУправляетСчетамиУчета() Тогда
		Для Каждого ИмяТабличнойЧасти Из СчетаУчетаВДокументахКлиентСервер.ТабличныеЧастиКЗаполнению(ПараметрыЗаполнения.КЗаполнению) Цикл
			
			Если ИмяТабличнойЧасти = "Прочее" Тогда
				
				ПоляОбъектаЗатратыБУ = Новый Структура("Субконто1, Субконто2, Субконто3",
											 "СубконтоЗатратБУ1", "СубконтоЗатратБУ2", "СубконтоЗатратБУ3");
				ПоляОбъектаЗатратыНУ = Новый Структура("Субконто1, Субконто2, Субконто3",
											 "СубконтоЗатратНУ1", "СубконтоЗатратНУ2", "СубконтоЗатратНУ3");
				
				ПрочееСчетЗатратБУ = ПараметрыЗаполнения.КЗаполнению.Получить("Прочее.СчетЗатратБУ") <> Неопределено;
				ПрочееСчетЗатратНУ = ПараметрыЗаполнения.КЗаполнению.Получить("Прочее.СчетЗатратНУ") <> Неопределено;
				
				Если НЕ (ПрочееСчетЗатратБУ ИЛИ ПрочееСчетЗатратНУ) Тогда
					Продолжить;
				КонецЕсли;
				
				Для Каждого СтрокаТабличнойЧасти Из Объект.Прочее Цикл
					Если ПрочееСчетЗатратБУ Тогда 
						ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриИзмененииСчета(СтрокаТабличнойЧасти.СчетЗатратБУ, СтрокаТабличнойЧасти, ПоляОбъектаЗатратыБУ, Истина);
					КонецЕсли;
					Если ПрочееСчетЗатратНУ Тогда 
						ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриИзмененииСчета(СтрокаТабличнойЧасти.СчетЗатратНУ, СтрокаТабличнойЧасти, ПоляОбъектаЗатратыНУ, Истина);
					КонецЕсли;
				КонецЦикла;

			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПоказатьСообщениеОЗаполненииСчетовУчета(ОбъектСсылка)
	
	ТекстСообщения = НСтр("ru = 'Счета учета изменены в соответствии со значениями по умолчанию.'");
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ОбъектСсылка, , "Объект");
	
КонецПроцедуры

#КонецОбласти
