#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов

// См. ЗапретРедактированияРеквизитовОбъектовПереопределяемый.ПриОпределенииОбъектовСЗаблокированнымиРеквизитами.
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт
	
	БлокируемыеРеквизиты = Новый Массив;
	
	Если ОбщегоНазначенияБККлиентСервер.ЭтоПростаяВерсияКонфигурации() Тогда
		БлокируемыеРеквизиты.Добавить("Дата");
		БлокируемыеРеквизиты.Добавить("Номер");
		БлокируемыеРеквизиты.Добавить("ВалютаДокумента");
		БлокируемыеРеквизиты.Добавить("ДокументОснование; ДокументОснование"); //сделано специально для формы Дополнительно
		БлокируемыеРеквизиты.Добавить("НеПроводитьНулевыеЗначения");
		БлокируемыеРеквизиты.Добавить("ТипЦен");
		БлокируемыеРеквизиты.Добавить("Организация; СтруктурноеПодразделениеОрганизация");
		БлокируемыеРеквизиты.Добавить("СтруктурноеПодразделение");
				
		// таб. часть Товары
		БлокируемыеРеквизиты.Добавить("Товары");
		БлокируемыеРеквизиты.Добавить("Товары.Номенклатура; ТоварыНоменклатура");
		БлокируемыеРеквизиты.Добавить("Товары.Цена");
		БлокируемыеРеквизиты.Добавить("Товары.Валюта");
			
	КонецЕсли;
	
	Возврат БлокируемыеРеквизиты;
	
КонецФункции

// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Процедура выполняет заполнение документа по документу-основанию
//
Процедура ЗаполнитьДокументПоПоступлению(Объект, Основание) Экспорт
	
	ДокументОснование = Основание.Ссылка;    
	// Заполним реквизиты из стандартного набора по документу основанию.
	ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(Объект, ДокументОснование);
	ТипЦен = Основание.ТипЦен;
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		
		Если НЕ ЗначениеЗаполнено(Основание.ТипЦен) Тогда
			Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
				ТекстСообщения = НСтр("ru='В документе ""%1"" не установлен тип цен. Заполнение невозможно.'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, 
					Объект.ДокументОснование);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , "ТипЦен", "Объект");
			КонецЕсли;
			Возврат;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ДокументОснование", Основание);
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	Док.СуммаВключаетНДС КАК СуммаВключаетНДС,
		               |	Док.ВалютаДокумента КАК ВалютаДокумента,
		               |	Док.Контрагент КАК Контрагент,
		               |	Док.ТипЦен КАК ТипЦен,
		               |	Док.Товары.(
		               |		Номенклатура КАК Номенклатура,
		               |		Цена КАК Цена,
		               |		СтавкаНДС КАК СтавкаНДС,
		               |		СУММА(НомерСтроки) КАК НомерСтроки,
		               |		ЕСТЬNULL(Док.Товары.СтавкаНДС.Ставка, 0) КАК СтавкаНДССтавка
		               |	) КАК Товары,
		               |	Док.Услуги.(
		               |		СУММА(НомерСтроки) КАК НомерСтроки,
		               |		Номенклатура КАК Номенклатура,
		               |		Цена КАК Цена,
		               |		СтавкаНДС КАК СтавкаНДС,
		               |		ЕСТЬNULL(Док.Услуги.СтавкаНДС.Ставка, 0) КАК СтавкаНДССтавка
		               |	) КАК Услуги,
		               |	Док.ТипЦен.ЦенаВключаетНДС КАК ЦенаВключаетНДС
		               |ИЗ
		               |	Документ.ПоступлениеТоваровУслуг КАК Док
		               |ГДЕ
		               |	Док.Ссылка = &ДокументОснование
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	Док.Товары.(Номенклатура,
		               |	Цена,
		               |	СтавкаНДС,
		               |	ЕСТЬNULL(Док.Товары.СтавкаНДС.Ставка, 0)),
		               |	Док.Услуги.(Номенклатура,
		               |	Цена,
		               |	СтавкаНДС,
		               |	ЕСТЬNULL(Док.Услуги.СтавкаНДС.Ставка, 0))";
		
		Шапка = Запрос.Выполнить().Выбрать();
		Шапка.Следующий();
		
		ТаблицаТовары = Шапка.Товары.Выгрузить();
		ТаблицаТовары.Сортировать("НомерСтроки");
		
		Для Каждого СтрокаТаблицы ИЗ ТаблицаТовары Цикл
			
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура) Тогда
				Продолжить;
			КонецЕсли;
			
			СтруктураОтбора = Новый Структура();
			СтруктураОтбора.Вставить("Номенклатура", СтрокаТаблицы.Номенклатура);
			
			СтрокаТабличнойЧасти = ОбработкаТабличныхЧастейКлиентСервер.НайтиСтрокуТабЧасти(Объект, "Товары", СтруктураОтбора);
			
			Если СтрокаТабличнойЧасти = Неопределено Тогда
				
				СтрокаТабличнойЧасти = Объект.Товары.Добавить();
				СтрокаТабличнойЧасти.Номенклатура = СтрокаТаблицы.Номенклатура;
				
			КонецЕсли;
			СтрокаТабличнойЧасти.Цена  = ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(
											СтрокаТаблицы.Цена,
											Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов,
											Шапка.СуммаВключаетНДС,
											Шапка.ЦенаВключаетНДС,
											Шапка.ЦенаВключаетНДС,
											СтрокаТаблицы.СтавкаНДССтавка);
			
			СтрокаТабличнойЧасти.Валюта = Шапка.ВалютаДокумента;
		КонецЦикла;
		
		ТаблицаУслуги = Шапка.Услуги.Выгрузить();
		ТаблицаУслуги.Сортировать("НомерСтроки");
		
		Для Каждого СтрокаТаблицы ИЗ ТаблицаУслуги Цикл
			
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура) Тогда
				Продолжить;
			КонецЕсли;
			
			СтруктураОтбора = Новый Структура();
			СтруктураОтбора.Вставить("Номенклатура", СтрокаТаблицы.Номенклатура);
			
			СтрокаТабличнойЧасти = ОбработкаТабличныхЧастейКлиентСервер.НайтиСтрокуТабЧасти(Объект, "Товары", СтруктураОтбора);
			
			Если СтрокаТабличнойЧасти = Неопределено Тогда
				
				СтрокаТабличнойЧасти = Объект.Товары.Добавить();
				СтрокаТабличнойЧасти.Номенклатура = СтрокаТаблицы.Номенклатура;
				
			КонецЕсли;
			СтрокаТабличнойЧасти.Цена  = ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(
											СтрокаТаблицы.Цена,
											Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов,
											Шапка.СуммаВключаетНДС,
											Шапка.ЦенаВключаетНДС,
											Шапка.ЦенаВключаетНДС,
											СтрокаТаблицы.СтавкаНДССтавка);
			
			СтрокаТабличнойЧасти.Валюта = Шапка.ВалютаДокумента;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Проведение

Функция ПодготовитьПараметрыПроведения(ДокументСсылка, Отказ) Экспорт
	
	ПараметрыПроведения = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;

	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.Текст = ТекстЗапросаРеквизитыДокумента();
	Результат = Запрос.Выполнить();
	ПараметрыПроведения.Вставить("ТаблицаРеквизитов", Результат.Выгрузить());
	
	Реквизиты = ПараметрыПроведения.ТаблицаРеквизитов[0];
	
	Запрос.УстановитьПараметр("НеПроводитьНулевыеЗначения", Реквизиты.НеПроводитьНулевыеЗначения);			   
	
	
	НомераТаблиц = Новый Структура;
	Запрос.Текст = ТекстЗапросаТаблицаТовары(НомераТаблиц);
		
	Результат = Запрос.ВыполнитьПакет();
	
	Для каждого НомерТаблицы Из НомераТаблиц Цикл
		ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат[НомерТаблицы.Значение].Выгрузить());
	КонецЦикла;
	
	Возврат ПараметрыПроведения;

КонецФункции 

Функция ТекстЗапросаРеквизитыДокумента()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.НеПроводитьНулевыеЗначения КАК НеПроводитьНулевыеЗначения,
	|	Реквизиты.ТипЦен КАК ТипЦен
	|ИЗ
	|	Документ.УстановкаЦенНоменклатуры КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка";

	Возврат ТекстЗапроса 
	
КонецФункции

Функция ТекстЗапросаТаблицаТовары(НомераТаблиц)

	НомераТаблиц.Вставить("ТаблицаТовары", НомераТаблиц.Количество());

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.Цена,
	|	ТаблицаТовары.Валюта
	|ИЗ
	|	Документ.УстановкаЦенНоменклатуры.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И НЕ(&НеПроводитьНулевыеЗначения
	|				И ТаблицаТовары.Цена = 0)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаТовары.НомерСтроки";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ФОРМИРОВАНИЯ ДВИЖЕНИЙ

Процедура СформироватьДвиженияУстановкаЦен(Таблица, ТаблицаРеквизитов, Движения, Отказ) Экспорт
	
	Если Таблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизитов[0];
	
	Для каждого СтрокаТовара Из Таблица Цикл

		Движение = Движения.ЦеныНоменклатуры.Добавить();
		
		Движение.Период 	  = Реквизиты.Период;
		Движение.ТипЦен       = Реквизиты.ТипЦен;
		Движение.Организация  = Реквизиты.Организация;
		Движение.Номенклатура = СтрокаТовара.Номенклатура;
		Движение.Цена   	  = СтрокаТовара.Цена;
		Движение.Валюта 	  = СтрокаТовара.Валюта;
		
	КонецЦикла;
	
	Движения.ЦеныНоменклатуры.Записывать = Истина;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Интерфейс для работы с подсистемой Печать.

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Перечень цен
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ПереченьЦен";
	КомандаПечати.Представление = НСтр("ru = 'Перечень цен'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБККлиент.ВыполнитьКомандуПечати";
	КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.Порядок = 50;
	
	// Настраиваемый комплект документов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ПереченьЦен";
	КомандаПечати.Представление = НСтр("ru = 'Настраиваемый комплект документов'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.ЗаголовокФормы = НСтр("ru = 'Настраиваемый комплект'");
	КомандаПечати.ДополнитьКомплектВнешнимиПечатнымиФормами = Истина;
	КомандаПечати.Порядок = 75;
	
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	// Печать перечня цен
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПереченьЦен") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ПереченьЦен",
			НСтр("ru = 'Перечень цен'"),
			ПечатьПереченьЦен(МассивОбъектов, ОбъектыПечати, ПараметрыВывода.КодЯзыка),
			,
			"Документ.УстановкаЦенНоменклатуры.ПФ_MXL_ИзменениеЦен");
						
		ОписаниеПечатнойФормы = КоллекцияПечатныхФорм.Найти(ВРег("ПереченьЦен"), "ИмяВРЕГ");
		Если ОписаниеПечатнойФормы <> Неопределено Тогда
			ОписаниеПечатнойФормы.ДоступенВыводНаДругихЯзыках = Истина;
		КонецЕсли;	
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Подготовка табличных печатных документов.

Функция ПечатьПереченьЦен(МассивОбъектов, ОбъектыПечати, КодЯзыка=Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ВыводитьКоды    = Истина;
		Колонка         = "Артикул";
		ТекстКодАртикул = "Артикул";
	ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
		ВыводитьКоды    = Истина;
		Колонка         = "Код";
		ТекстКодАртикул = "Код";		
	Иначе
		ВыводитьКоды    = Ложь;
		Колонка         = "";
		ТекстКодАртикул = "Код";
	КонецЕсли;

	Если ВыводитьКоды Тогда
		ОбластьШапки  = "ШапкаТаблицыСКодом";
		ОбластьСтроки = "СтрокаСКодом";
	Иначе
		ОбластьШапки  = "ШапкаТаблицы";
		ОбластьСтроки = "Строка";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.Текст ="ВЫБРАТЬ РАЗРЕШЕННЫЕ
	              |	УстановкаЦенНоменклатуры.Номер,
	              |	УстановкаЦенНоменклатуры.Дата,
	              |	УстановкаЦенНоменклатуры.Ответственный.Представление КАК ОтветственныйПредставление,
	              |	УстановкаЦенНоменклатуры.Ссылка,
	              |	УстановкаЦенНоменклатуры.ТипЦен
	              |ИЗ
	              |	Документ.УстановкаЦенНоменклатуры КАК УстановкаЦенНоменклатуры
	              |ГДЕ
	              |	УстановкаЦенНоменклатуры.Ссылка В (&МассивОбъектов)";

	Шапка = Запрос.Выполнить().Выбрать();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);

	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УстановкаЦенНоменклатуры.НомерСтроки 				     КАК НомерСтроки,
	|	УстановкаЦенНоменклатуры.Номенклатура,
	|	ВЫРАЗИТЬ(УстановкаЦенНоменклатуры.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК Товар,
	|	УстановкаЦенНоменклатуры.Номенклатура."+ ТекстКодАртикул + " КАК КодАртикул,
	|	УстановкаЦенНоменклатуры.Цена,
	|	УстановкаЦенНоменклатуры.Номенклатура.БазоваяЕдиницаИзмерения.Представление  КАК ЕдиницаИзмеренияПредставление,
	|	УстановкаЦенНоменклатуры.Валюта,
	|	УстановкаЦенНоменклатуры.Валюта.Представление            КАК ВалютаПредставление
	|
	|ИЗ
	|	Документ.УстановкаЦенНоменклатуры.Товары КАК УстановкаЦенНоменклатуры
	|
	|ГДЕ
	|	УстановкаЦенНоменклатуры.Ссылка В (&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	УстановкаЦенНоменклатуры.НомерСтроки
	|";

	ЗапросПоТоварам = Запрос.Выполнить();

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.КлючПараметровПечати = "УстановкаЦенНоменклатуры_ИзменениеЦен";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.УстановкаЦенНоменклатуры.ПФ_MXL_ИзменениеЦен", КодЯзыка);

	ОбластьШапкаНоменклатура   = Макет.ПолучитьОбласть(ОбластьШапки + "|Номенклатура");
	ОбластьШапкаТипЦен         = Макет.ПолучитьОбласть(ОбластьШапки + "|Цена");
	ОбластьСтрокаНоменклатура  = Макет.ПолучитьОбласть(ОбластьСтроки + "|Номенклатура");
	ОбластьСтрокаТипЦен        = Макет.ПолучитьОбласть(ОбластьСтроки + "|Цена");
	ОбластьПодвалНоменклатура  = Макет.ПолучитьОбласть("Подписи|Номенклатура");
	ОбластьПодвалТипЦен        = Макет.ПолучитьОбласть("Подписи|Цена");

	Пока Шапка.Следующий() Цикл
		
		Если ТабДокумент.ВысотаТаблицы > 0 Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
		
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		ОбластьМакета.Параметры.ТекстЗаголовка = РаботаСДиалогами.СформироватьЗаголовокДокумента(Шапка.Ссылка, НСтр("ru = 'Изменение цен номенклатуры'",КодЯзыка),,,,КодЯзыка);
		ТабДокумент.Вывести(ОбластьМакета);
	
		// Выведем шапку
		Если ВыводитьКоды Тогда
			ОбластьШапкаНоменклатура.Параметры.Колонка = Колонка;
		КонецЕсли;

		ТабДокумент.Вывести(ОбластьШапкаНоменклатура);
	
		ОбластьШапкаТипЦен.Параметры.ТипЦен = Шапка.ТипЦен;
		ТабДокумент.Присоединить(ОбластьШапкаТипЦен);
	
		// Выведем таблицу
		ВыборкаПоСтрокам = ЗапросПоТоварам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПоСтрокам.Следующий() Цикл
			ОбластьСтрокаНоменклатура.Параметры.Заполнить(ВыборкаПоСтрокам);
			ОбластьСтрокаНоменклатура.Параметры.Товар = СокрЛП(ВыборкаПоСтрокам.Товар);
			Если ВыводитьКоды Тогда
				ОбластьСтрокаНоменклатура.Параметры.КодАртикул = ВыборкаПоСтрокам.КодАртикул;
			КонецЕсли; 
			ТабДокумент.Вывести(ОбластьСтрокаНоменклатура);
			ОбластьСтрокаТипЦен.Параметры.Заполнить(ВыборкаПоСтрокам);
			ТабДокумент.Присоединить(ОбластьСтрокаТипЦен);
		КонецЦикла;

		// Выведем подвал
		ОбластьПодвалНоменклатура.Параметры.Заполнить(Шапка);
		ТабДокумент.Вывести(ОбластьПодвалНоменклатура);
		ТабДокумент.Присоединить(ОбластьПодвалТипЦен);

		ТекОбласть = ТабДокумент.Области.ОтветственныйПредставление;

		ОбластьОтветственного = ТабДокумент.Область(ТекОбласть.Низ, 14, ТекОбласть.Низ, Мин(ТабДокумент.ШиринаТаблицы, 29));
		ОбластьОтветственного.Объединить();
		ОбластьОтветственного.ГраницаСнизу            = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
		ОбластьОтветственного.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);

	КонецЦикла;

	Возврат ТабДокумент;

КонецФункции

#Область ЗагрузкаДанныхИзФайла

// Устанавливает параметры загрузки.
//
Процедура УстановитьПараметрыЗагрузкиИзФайлаВТЧ(Параметры) Экспорт
    

КонецПроцедуры

// Производит сопоставление данных, загружаемых в табличную часть ПолноеИмяТабличнойЧасти,
// с данными в ИБ, и заполняет параметры АдресТаблицыСопоставления и СписокНеоднозначностей.
//
// Параметры:
//   АдресЗагружаемыхДанных    - Строка - Адрес временного хранилища с таблицей значений, в которой
//                                        находятся загруженные данные из файла. Состав колонок:
//     * Идентификатор - Число - Порядковый номер строки;
//     * остальные колонки соответствуют колонкам макета ЗагрузкаИзФайла.
//   АдресТаблицыСопоставления - Строка - Адрес временного хранилища с пустой таблицей значений,
//                                        являющейся копией табличной части документа, 
//                                        которую необходимо заполнить из таблицы АдресЗагружаемыхДанных.
//   СписокНеоднозначностей - ТаблицаЗначений - Список неоднозначных значений, для которых в ИБ имеется несколько
//                                              подходящих вариантов.
//     * Колонка       - Строка - Имя колонки, в которой была обнаружена неоднозначность;
//     * Идентификатор - Число  - Идентификатор строки, в которой была обнаружена неоднозначность.
//   ПолноеИмяТабличнойЧасти   - Строка - Полное имя табличной части, в которую загружаются данные.
//   ДополнительныеПараметры   - ЛюбойТип - Любые дополнительные сведения.
//
Процедура СопоставитьЗагружаемыеДанные(АдресЗагружаемыхДанных, АдресТаблицыСопоставления, СписокНеоднозначностей, ПолноеИмяТабличнойЧасти, ДополнительныеПараметры) Экспорт
	
	ДанныеСопоставление	= ПолучитьИзВременногоХранилища(АдресТаблицыСопоставления); // ТаблицаЗначений
	ЗагружаемыеДанные	= ПолучитьИзВременногоХранилища(АдресЗагружаемыхДанных);
	
	МассивНаименование	  = ЗагружаемыеДанные.ВыгрузитьКолонку("Номенклатура_Наименование");
	МассивАртикул 		  = ЗагружаемыеДанные.ВыгрузитьКолонку("Номенклатура_Артикул");
	МассивВалюта	  	  = ЗагружаемыеДанные.ВыгрузитьКолонку("Валюта");
		
	ЗагружаемыеДанные.Колонки.Удалить("Номенклатура_Наименование");
	ЗагружаемыеДанные.Колонки.Удалить("Номенклатура_Артикул");
	ЗагружаемыеДанные.Колонки.Удалить("Валюта");
   	
	ЗагружаемыеДанные.Колонки.Добавить("Номенклатура_Наименование",     Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(100)));
	ЗагружаемыеДанные.Колонки.Добавить("Номенклатура_Артикул", 		    Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(50)));
	ЗагружаемыеДанные.Колонки.Добавить("Валюта",     					Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(50)));	
	
	ЗагружаемыеДанные.ЗагрузитьКолонку(МассивНаименование, 	  "Номенклатура_Наименование");
	ЗагружаемыеДанные.ЗагрузитьКолонку(МассивАртикул, 		  "Номенклатура_Артикул");   
	ЗагружаемыеДанные.ЗагрузитьКолонку(МассивВалюта, 	      "Валюта");		
		
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗагружаемыеДанные.Номенклатура_Наименование КАК ВнешнееНаименование,
	|	ЗагружаемыеДанные.Номенклатура_Артикул КАК ВнешнийАртикул, 
	|	ЗагружаемыеДанные.Валюта КАК ВнешняяВалюта,
	|	ЗагружаемыеДанные.Цена КАК Цена,
	|	ЗагружаемыеДанные.Идентификатор КАК Идентификатор
	|ПОМЕСТИТЬ ЗагружаемыеДанные
	|ИЗ
	|	&ЗагружаемыеДанные КАК ЗагружаемыеДанные
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Идентификатор КАК Идентификатор,
	|	МАКСИМУМ(Товары.Номенклатура) КАК Номенклатура,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Товары.Номенклатура) КАК КоличествоНоменклатуры
	|ПОМЕСТИТЬ ВТДанныеНоменклатуры
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗагружаемыеДанные.Идентификатор КАК Идентификатор,
	|		Товары.Ссылка КАК Номенклатура
	|	ИЗ
	|		ЗагружаемыеДанные КАК ЗагружаемыеДанные
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Товары
	|			ПО (Товары.Наименование = ЗагружаемыеДанные.ВнешнееНаименование)
	|	ГДЕ
	|		ЗагружаемыеДанные.ВнешнееНаименование <> """"
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗагружаемыеДанные.Идентификатор,
	|		Товары.Ссылка
	|	ИЗ
	|		ЗагружаемыеДанные КАК ЗагружаемыеДанные
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Товары
	|			ПО (Товары.Артикул = ЗагружаемыеДанные.ВнешнийАртикул)
	|	ГДЕ
	|		ЗагружаемыеДанные.ВнешнийАртикул <> """") КАК Товары
	|
	|СГРУППИРОВАТЬ ПО
	|	Товары.Идентификатор
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Товары.Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Валюты.Идентификатор КАК Идентификатор,
	|	МАКСИМУМ(Валюты.Валюта) КАК Валюта
	|ПОМЕСТИТЬ ВТДанныеВалюты
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗагружаемыеДанные.Идентификатор КАК Идентификатор,
	|		Валюты.Ссылка КАК Валюта
	|	ИЗ
	|		ЗагружаемыеДанные КАК ЗагружаемыеДанные
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Валюты КАК Валюты
	|			ПО (Валюты.Наименование = ЗагружаемыеДанные.ВнешняяВалюта)
	|	ГДЕ
	|		ЗагружаемыеДанные.ВнешняяВалюта <> """") КАК Валюты
	|	
	|СГРУППИРОВАТЬ ПО
	|	Валюты.Идентификатор
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Валюты.Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗагружаемыеДанные.Идентификатор КАК Идентификатор,
	|	ЗагружаемыеДанные.ВнешнийАртикул КАК ВнешнийАртикул,
	|	ЗагружаемыеДанные.ВнешнееНаименование КАК ВнешнееНаименование,
	|	Валюты.Валюта Как Валюта,
	|	ЗагружаемыеДанные.Цена КАК Цена,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(Товары.КоличествоНоменклатуры, 0) = 1
	|			ТОГДА Товары.Номенклатура
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|	КОНЕЦ КАК Номенклатура,
	|	ЕСТЬNULL(Товары.КоличествоНоменклатуры, 0) КАК КоличествоНоменклатуры 
	|ИЗ
	|	ЗагружаемыеДанные КАК ЗагружаемыеДанные
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеНоменклатуры КАК Товары
	|		ПО (Товары.Идентификатор = ЗагружаемыеДанные.Идентификатор)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеВалюты КАК Валюты
	|		ПО (Валюты.Идентификатор = ЗагружаемыеДанные.Идентификатор)";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ЗагружаемыеДанные", ЗагружаемыеДанные);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = ДанныеСопоставление.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
		Если Выборка.КоличествоНоменклатуры > 1 Тогда
			ЗаписьОНеоднозначности					= СписокНеоднозначностей.Добавить();
			ЗаписьОНеоднозначности.Идентификатор	= Выборка.Идентификатор;
			ЗаписьОНеоднозначности.Колонка			= "Номенклатура";
		КонецЕсли;
			
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(ДанныеСопоставление, АдресТаблицыСопоставления);
	
КонецПроцедуры

// Возвращает список подходящих объектов ИБ для неоднозначного значения ячейки.
// 
// Параметры:
//   ПолноеИмяТабличнойЧасти  - Строка - Полное имя табличной части, в которую загружаются данные.
//  ИмяКолонки                - Строка - Имя колонки, в который возникла неоднозначность.
//  СписокНеоднозначностей    - Массив - Массив для заполнения с неоднозначными данными.
//  ЗагружаемыеЗначенияСтрока - Строка - Загружаемые данные на основании которых возникла неоднозначность.
//  ДополнительныеПараметры   - ЛюбойТип - Любые дополнительные сведения.
//
Процедура ЗаполнитьСписокНеоднозначностей(ПолноеИмяТабличнойЧасти, СписокНеоднозначностей, ИмяКолонки, ЗагружаемыеЗначенияСтрока, ДополнительныеПараметры) Экспорт
	
	Запрос = Новый Запрос;
	
	Если ИмяКолонки = "Номенклатура" Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СпрНоменклатура.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Номенклатура КАК СпрНоменклатура
		|ГДЕ
		|	(&ВнешнийАртикул <> """"
		|		И СпрНоменклатура.Артикул = &ВнешнийАртикул)
		|	ИЛИ (&ВнешнееНаименование <> """"
		|		И СпрНоменклатура.Наименование = &ВнешнееНаименование)
		|";
		
		Запрос.УстановитьПараметр("ВнешнийАртикул",		 ЗагружаемыеЗначенияСтрока.Номенклатура_Артикул);
		Запрос.УстановитьПараметр("ВнешнееНаименование", ЗагружаемыеЗначенияСтрока.Номенклатура_Наименование);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Запрос.Текст) Тогда
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			СписокНеоднозначностей.Добавить(Выборка.Ссылка);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли