
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	ОбщегоНазначенияБКВызовСервера.НастроитьПодключаемоеОборудование(ЭтаФорма);
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
		РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", Объект.Ссылка, ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	// РедактированиеДокументовПользователей
	ПраваДоступаКОбъектам.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец РедактированиеДокументовПользователей
	
	ПодготовитьФормуНаСервере();
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", Объект.Ссылка, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) И ЗначениеЗаполнено(Объект.ДокументОснование) И НЕ ЗначениеЗаполнено(Объект.ТипЦен) Тогда
		ТекстСообщения = НСтр("ru='В документе ""%1"" не установлен тип цен. Заполнение невозможно.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, 
			Объект.ДокументОснование);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "ТипЦен", "Объект");
		Возврат;
	КонецЕсли;
		
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	МенеджерОборудованияКлиентПереопределяемый.НачатьПодключениеОборудованиеПриОткрытииФормы(ЭтаФорма, "СканерШтрихкода");
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", Объект.Ссылка, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборНоменклатуры.Форма.ОсновнаяФорма"   Тогда
		ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение);
	ИначеЕсли ИсточникВыбора.ИмяФормы = "ОбщаяФорма.ФормаДополнительно" Тогда		
		РаботаСДиалогамиКлиент.ОбработкаВыбораРеквизитыДополнительно(ЭтаФорма, ВыбранноеЗначение, ИсточникВыбора);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбработанаТабличнаяЧастьТовары" И ТипЗнч(Параметр) = Тип("Структура") 
		И Параметр.Свойство("ИдентификаторВызывающейФормы")
		И Параметр.ИдентификаторВызывающейФормы = УникальныйИдентификатор Тогда
		ОбработкаОповещенияОбработкиТабличнойЧастиТоварыНаСервере(Параметр);
	ИначеЕсли Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" Тогда
			Результат = МенеджерОборудованияКлиент.ПреобразоватьДанныеСоСканераВСтруктуру(Параметр);
			Результат.Штрихкод = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ШтрихкодВBase64(Результат.Штрихкод);

			ДобавитьПоШтрихкодуНаСервере(Результат);
		КонецЕсли;
	Иначе
		ОбщегоНазначенияБККлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		КлючеваяОперация = "Документ ""установка цен номенклатуры"" (проведение)";
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	МенеджерОборудованияКлиентПереопределяемый.НачатьОтключениеОборудованиеПриЗакрытииФормы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;

КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеПриИзменении(Элемент)
	
	Если ТекущийДокументОснование = Объект.ДокументОснование Тогда
		Возврат;
	КонецЕсли;

	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		
		ТекстВопроса = НСтр("ru='Заполнить текущий документ данными документа-основания?'");
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаПриИзмененииДокументОснование", ЭтотОбъект, Параметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
		
	КонецЕсли;
	
	ТекущийДокументОснование = Объект.ДокументОснование;

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаПриИзмененииДокументОснование(Результат, Параметры) Экспорт
	
	Если НЕ Результат = КодВозвратаДиалога.Да Тогда
		Возврат;	
	КонецЕсли;

	Объект.Товары.Очистить();
	
	СтруктураРезультатаВыполнения = Неопределено;
	
	ПослеЗакрытияВопросаПриИзмененииДокументОснованиеНаСервере();
	
	ИсходныеДанные = Новый Структура("Организация, СтруктурноеПодразделение");
	ЗаполнитьЗначенияСвойств(ИсходныеДанные, Объект);
	
	ПараметрыОбработки = Новый Структура;
	ПараметрыОбработки.Вставить("ИзмененаОрганизация", ИсходныеДанные.Организация <> Объект.Организация);
	ПараметрыОбработки.Вставить("ИзмененоСтруктурноеПодразделение", ИсходныеДанные.СтруктурноеПодразделение <> Объект.СтруктурноеПодразделение);
	ПараметрыОбработки.Вставить("ОчищатьНекорректныеЗначения", Истина);
	
	ПриИзмененииЗначенияОрганизацииСервер(ПараметрыОбработки, СтруктураРезультатаВыполнения);
	УстановитьФункциональныеОпцииФормы();

	РаботаСДиалогамиКлиентСервер.УстановитьВидимостьСтруктурногоПодразделения(Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	РаботаСДиалогамиКлиентСервер.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделениеОрганизация, Объект.СтруктурноеПодразделение, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗакрытияВопросаПриИзмененииДокументОснованиеНаСервере() Экспорт
	
	ЗаполнитьТоварыПоДокументуОснованиюНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(СтруктурноеПодразделениеОрганизация) Тогда 
		Объект.Организация = Неопределено;
		Объект.СтруктурноеПодразделение = Неопределено;
	Иначе 
		Результат = РаботаСДиалогамиКлиент.ПроверитьИзменениеЗначенийОрганизацииСтруктурногоПодразделения(СтруктурноеПодразделениеОрганизация, Объект.Организация, Объект.СтруктурноеПодразделение);
		Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
				СтруктураРезультатаВыполнения = Неопределено;
				СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(, СтруктураРезультатаВыполнения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСДиалогамиКлиент.СтруктурноеПодразделениеНачалоВыбора(ЭтаФорма, СтандартнаяОбработка, Объект.Организация, Объект.СтруктурноеПодразделение, Истина);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ТОВАРЫ

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	ДанныеОбъекта = Новый Структура(
		"Дата, Организация, ТипЦен, Ссылка");

	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура, Цена, Валюта");
		
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);

	ТоварыНоменклатураПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);

	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура Подбор(Команда)
	
	ПараметрыПодбора = ПолучитьПараметрыПодбора("Товары", НСтр("ru='Товары'"));
	Если ПараметрыПодбора <> Неопределено Тогда
		ОткрытьФорму("Обработка.ПодборНоменклатуры.Форма.ОсновнаяФорма", ПараметрыПодбора,
			ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоНоменклатуре(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.ТипЦен) Тогда

		ТекстСообщения = НСтр("ru='Не выбран тип цен номенклатуры'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, 
			Объект.ТипЦен);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "ТипЦен", "Объект");
		// Ничего делать не надо
		Возврат;

	КонецЕсли;
	
	Если Объект.Товары.Количество() > 0 Тогда

		ТекстВопроса = НСтр("ru='Перед заполнением табличная часть будет очищена. Заполнить?'");
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаЗаполнитьПоНоменклатуре", ЭтотОбъект, Параметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
		
	Иначе
		 ЗаполнитьПоНоменклатуреНаСервере(Ложь, Истина);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаЗаполнитьПоНоменклатуре(Результат, Параметры) Экспорт
	
	Если НЕ Результат = КодВозвратаДиалога.Да Тогда
		Возврат;	
	КонецЕсли;

	Объект.Товары.Очистить();
	
	ЗаполнитьПоНоменклатуреНаСервере(Ложь, Истина);

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоЦенамНоменклатуры(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.ТипЦен) Тогда

		ТекстСообщения = НСтр("ru='Не выбран тип цен номенклатуры'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "Объект.ТипЦен");
		// Ничего делать не надо
		Возврат;

	КонецЕсли;
	
	Если Объект.Товары.Количество() > 0 Тогда

		ТекстВопроса = НСтр("ru='Перед заполнением табличная часть будет очищена. Заполнить?'");
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаЗаполнитьПоЦене", ЭтотОбъект, Параметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
		
	Иначе

		ЗаполнитьПоНоменклатуреНаСервере(Ложь, Ложь);
	
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаЗаполнитьПоЦене(Результат, Параметры) Экспорт
	
	Если НЕ Результат = КодВозвратаДиалога.Да Тогда
		Возврат;	
	КонецЕсли;

	Объект.Товары.Очистить();
	
	ЗаполнитьПоНоменклатуреНаСервере(Ложь, Ложь);

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПоЦенамНоменклатуры(Команда)
	
	ЗаполнитьПоНоменклатуреНаСервере(Ложь, Ложь);

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПоЦенамНоменклатуры(Команда)
	
	ЗаполнитьПоНоменклатуреНаСервере(Истина, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоСебестоимостиНоменклатуры(Команда)
	Если Объект.Товары.Количество() > 0 Тогда

		ТекстВопроса = НСтр("ru='Перед заполнением табличная часть будет очищена. Заполнить?'");
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаЗаполнитьПоСебестоимости", ЭтотОбъект, Параметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
		
	Иначе
		
		ЗаполнитьПоСебестоимостиНоменклатурыНаСервере(Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаЗаполнитьПоСебестоимости(Результат, Параметры) Экспорт
	
	Если НЕ Результат = КодВозвратаДиалога.Да Тогда
		Возврат;	
	КонецЕсли;

	Объект.Товары.Очистить();
	
	ЗаполнитьПоСебестоимостиНоменклатурыНаСервере(Ложь);

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПоСебестоимостиНоменклатуры(Команда)
	
	ЗаполнитьПоСебестоимостиНоменклатурыНаСервере(Ложь);

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПоСебестоимостиНоменклатуры(Команда)
	
	ЗаполнитьПоСебестоимостиНоменклатурыНаСервере(Истина);

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоПоступлению(Команда)
					
	Если Объект.Товары.Количество() > 0 Тогда
		
		ТекстВопроса = НСтр("ru='Перед заполнением табличная часть будет очищена. Заполнить?'");
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаЗаполнитьПоПоступлению", ЭтотОбъект, Параметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
		
	Иначе

		СтандартнаяОбработка = Ложь;
    	Обработчик 			 = Новый ОписаниеОповещения("ПоступлениеТоваровЗавершениеВыбора", ЭтотОбъект);
    	Режим 				 = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ПараметрыФормы   	 = Новый Структура("РежимВыбора, ЗакрыватьПриВыборе",Истина, Истина);
	    ОткрытьФорму("Документ.ПоступлениеТоваровУслуг.Форма.ФормаВыбора", ПараметрыФормы,,,,, Обработчик, Режим);

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаЗаполнитьПоПоступлению(Результат, Параметры) Экспорт
	
	Если НЕ Результат = КодВозвратаДиалога.Да Тогда
		Возврат;	
	КонецЕсли;

	Объект.Товары.Очистить();
	
	СтандартнаяОбработка = Ложь;
    Обработчик 			 = Новый ОписаниеОповещения("ПоступлениеТоваровЗавершениеВыбора", ЭтотОбъект);
    Режим 				 = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ПараметрыФормы       = Новый Структура("РежимВыбора, ЗакрыватьПриВыборе", Истина, Истина);
	
	ОткрытьФорму("Документ.ПоступлениеТоваровУслуг.Форма.ФормаВыбора", ПараметрыФормы,,,,, Обработчик, Режим);	
		
КонецПроцедуры

&НаКлиенте
Процедура ПоступлениеТоваровЗавершениеВыбора(ВыбранноеЗначение, Параметры) Экспорт

	ДокументПоступление = ВыбранноеЗначение;
	
	ЗаполнитьПоПоступлениюНаСервере(ДокументПоступление);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПоПоступлению(Команда)
	
	СтандартнаяОбработка = Ложь;
    Обработчик 			 = Новый ОписаниеОповещения("ПоступлениеТоваровЗавершениеВыбора", ЭтотОбъект);
    Режим 				 = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ПараметрыФормы 	     = Новый Структура("РежимВыбора, ЗакрыватьПриВыборе", Истина, Истина);
	ОткрытьФорму("Документ.ПоступлениеТоваровУслуг.Форма.ФормаВыбора", ПараметрыФормы,,,,, Обработчик, Режим);
	
КонецПроцедуры

&НаКлиенте
Процедура Изменить(Команда)
	
	ПараметрыФормы = ПолучитьПараметрыОбработкиТабличнойЧастиТовары();
	Если ПараметрыФормы <> Неопределено Тогда
		ОткрытьФорму("Обработка.ОбработкаТабличнойЧастиТовары.Форма.Форма", ПараметрыФормы,
			ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкоду(Команда)
	ОписаниеОповещенияПоискПоШтрихкоду = Новый ОписаниеОповещения("ПоискПоШтрихкодуЗавершение", ЭтотОбъект);
	
	ПараметрыФормыВводаШтрихкода = Новый Структура;
	ПараметрыФормыВводаШтрихкода.Вставить("ИмяТаблицы", Неопределено);
	
	ОткрытьФорму("РегистрСведений.ШтрихкодыНоменклатуры.Форма.ФормаВводШтрихкода", ПараметрыФормыВводаШтрихкода, ЭтотОбъект,,,,ОписаниеОповещенияПоискПоШтрихкоду , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
     ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
     ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры
 
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
     ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
     ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	УстановитьФункциональныеОпцииФормы();
	
	ТекущаяДатаДокумента = Объект.Дата;
	
	ПоддержкаРаботыСоСтруктурнымиПодразделениями = ПолучитьФункциональнуюОпцию("ПоддержкаРаботыСоСтруктурнымиПодразделениями");
	РаботаСДиалогамиКлиентСервер.УстановитьВидимостьСтруктурногоПодразделения(Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация);
	РаботаСДиалогамиКлиентСервер.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделениеОрганизация, Объект.СтруктурноеПодразделение, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
		
	ОбщегоНазначенияБК.УстановитьТекстАвтора(НадписьАвтор, Объект.Автор);
		
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()

	ОбщегоНазначенияБККлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);
	
КонецПроцедуры 

&НаСервереБезКонтекста
Процедура ТоварыНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, ДанныеОбъекта)

	ПерезаполнитьСтроку(СтрокаТабличнойЧасти, ДанныеОбъекта);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПерезаполнитьСтроку(СтрокаТабличнойЧасти, ДанныеОбъекта)
	
	Если НЕ ЗначениеЗаполнено(ДанныеОбъекта.ТипЦен) Тогда

		// Ничего делать не надо
		Возврат;

	КонецЕсли;

	// Заполним все требуемые реквизиты
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаЦен",      ДанныеОбъекта.Дата);
	Запрос.УстановитьПараметр("ТипЦен",       ДанныеОбъекта.ТипЦен);
	Запрос.УстановитьПараметр("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	Запрос.УстановитьПараметр("Организация",  ДанныеОбъекта.Организация);

	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0) КАК Цена,
	|	ЕСТЬNULL(ЦеныНоменклатуры.Валюта, ТипыЦенСправочник.ВалютаЦены) КАК Валюта
	|ИЗ
	|	Справочник.ТипыЦенНоменклатуры КАК ТипыЦенСправочник
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|				&ДатаЦен,
	|				ТипЦен = &ТипЦен
	|					И Номенклатура = &Номенклатура
	|					И Организация = &Организация) КАК ЦеныНоменклатуры
	|		ПО ТипыЦенСправочник.Ссылка = ЦеныНоменклатуры.ТипЦен
	|ГДЕ
	|	ТипыЦенСправочник.Ссылка = &ТипЦен";

	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл
		СтрокаТабличнойЧасти.Цена   = Выборка.Цена;
		СтрокаТабличнойЧасти.Валюта = Выборка.Валюта;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьПараметрыПодбора(ИмяТаблицы, ПредставлениеТаблицы="")

	ДатаРасчетов		 = ?(НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДата()), Неопределено, Объект.Дата);

	ЗаголовокПодбора	 = НСтр("ru = 'Подбор номенклатуры в %1 (%2)'");
	
	ЕстьКоличество = Ложь;
	ЕстьЦена       = Истина;
	
	ЗаголовокПодбора     = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ЗаголовокПодбора, Объект.Ссылка, ПредставлениеТаблицы);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация"             , Объект.Организация);
	ПараметрыФормы.Вставить("Заголовок"               , ЗаголовокПодбора);
	ПараметрыФормы.Вставить("ИмяТаблицы"              , ИмяТаблицы);
	ПараметрыФормы.Вставить("ТипЦен"               	  , Объект.ТипЦен);
	ПараметрыФормы.Вставить("ЕстьКоличество"       	  , ЕстьКоличество);
	ПараметрыФормы.Вставить("Товар"                   , Истина);
	ПараметрыФормы.Вставить("Услуги"                  , Истина);
	ПараметрыФормы.Вставить("ЕстьЦена"                , ЕстьЦена);
	ПараметрыФормы.Вставить("ВыбиратьВсе"             , Истина);
		
	СписокЗапросов = Новый СписокЗначений();
	СписокЗапросов.Добавить("ПоСправочнику", НСтр("ru='По справочнику'"));
	СписокЗапросов.Добавить("ЦеныНоменклатуры",    НСтр("ru='Цены номенклатуры'"));
	
	ПараметрыФормы.Вставить("СписокВидовПодбора", СписокЗапросов);
	ПараметрыФормы.Вставить("ОбъектСсылка"      , Объект.Ссылка);
	
	Возврат ПараметрыФормы;
	
КонецФункции

&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение)

	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресПодобраннойНоменклатурыВХранилище);

	Для Каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		СтруктураОтбора = Новый Структура();
		СтруктураОтбора.Вставить("Номенклатура", СтрокаТовара.Номенклатура);
		СтрокаТабличнойЧасти = ОбработкаТабличныхЧастейКлиентСервер.НайтиСтрокуТабЧасти(Объект, "Товары", СтруктураОтбора);
		
		Если СтрокаТабличнойЧасти = Неопределено Тогда
			
			СтрокаТабличнойЧасти = Объект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТовара);
			
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоНоменклатуреНаСервере(Обновить, ПоНоменклатуре = Ложь)
	
	// Заполним все требуемые реквизиты
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаЦен", Объект.Дата);
	Запрос.УстановитьПараметр("ТипЦен", Объект.ТипЦен);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
		
	Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СправочникНоменклатура.Ссылка КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА ЦеныНоменклатуры.Цена ЕСТЬ NULL 
	|			ТОГДА 0
	|		ИНАЧЕ ЦеныНоменклатуры.Цена
	|	КОНЕЦ КАК Цена,
	|	ВЫБОР
	|		КОГДА ЦеныНоменклатуры.Валюта ЕСТЬ NULL 
	|			ТОГДА ТипыЦенСправочник.ВалютаЦены
	|		ИНАЧЕ ЦеныНоменклатуры.Валюта
	|	КОНЕЦ КАК Валюта
	|ИЗ
	|	Справочник.Номенклатура КАК СправочникНоменклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ДатаЦен, ТипЦен = &ТипЦен И Организация = &Организация) КАК ЦеныНоменклатуры
	|		ПО СправочникНоменклатура.Ссылка = ЦеныНоменклатуры.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ТипыЦенНоменклатуры КАК ТипыЦенСправочник
	|		ПО ЦеныНоменклатуры.ТипЦен = ТипыЦенСправочник.Ссылка
	|ГДЕ
	|	СправочникНоменклатура.ЭтоГруппа = Ложь";
	
	Если НЕ ПоНоменклатуре Тогда
		Текст = Текст + 
		" И
		|	ТипыЦенСправочник.Ссылка = &ТипЦен	
		|";
	КонецЕсли;
    Запрос.Текст = Текст;
	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл
		
		СтруктураОтбора = Новый Структура();
		СтруктураОтбора.Вставить("Номенклатура", Выборка.Номенклатура);

		СтрокаТабличнойЧасти = ОбработкаТабличныхЧастейКлиентСервер.НайтиСтрокуТабЧасти(Объект, "Товары", СтруктураОтбора);
		Если СтрокаТабличнойЧасти = Неопределено Тогда
			Если Обновить Тогда
				Продолжить;
			Иначе
				СтрокаТабличнойЧасти = Объект.Товары.Добавить();
				СтрокаТабличнойЧасти.Номенклатура = Выборка.Номенклатура;
			КонецЕсли;
		КонецЕсли;
		СтрокаТабличнойЧасти.Цена = Выборка.Цена;
		СтрокаТабличнойЧасти.Валюта = Выборка.Валюта;
		
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Валюта) Тогда
			СтрокаТабличнойЧасти.Валюта = Объект.ТипЦен.ВалютаЦены;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоСебестоимостиНоменклатурыНаСервере(Обновить)
	
	// Заполним все требуемые реквизиты
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаЦен", Объект.Дата);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	
	ПоддержкаРаботыСоСтруктурнымиПодразделениями = ПолучитьФункциональнуюОпцию("ПоддержкаРаботыСоСтруктурнымиПодразделениями");

	Если ПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
		Запрос.УстановитьПараметр("СтруктурноеПодразделение", Объект.СтруктурноеПодразделение);
		УсловиеСтруктурноеПодразделение = " И СтруктурноеПодразделение = &СтруктурноеПодразделение ";
	Иначе 
		УсловиеСтруктурноеПодразделение = "";
	КонецЕсли;

	
	Текст = 
	"ВЫБРАТЬ 
	|	Типовой.Ссылка
	|ПОМЕСТИТЬ СписокСчетов
	|ИЗ
	|	ПланСчетов.Типовой КАК Типовой
	|ГДЕ
	|	Типовой.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Типовой.Запасы))
	|	И Типовой.ВидыСубконто.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоТиповые.Номенклатура)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТиповойОстатки.Субконто1 КАК Номенклатура,
	|	Выбор Когда ТиповойОстатки.СуммаОстатокДт <> 0 И ТиповойОстатки.КоличествоОстатокДт <> 0 Тогда
	|		ТиповойОстатки.СуммаОстатокДт / ТиповойОстатки.КоличествоОстатокДт 
	|	Иначе
	|		0 
	|	Конец КАК Цена
	|ИЗ
	|	РегистрБухгалтерии.Типовой.Остатки(
	|			&ДатаЦен,
	|			Счет В
	|				(ВЫБРАТЬ
	|					СписокСчетов.Ссылка
	|				ИЗ
	|					СписокСчетов),
	|			,
	|			Организация = &Организация " + УсловиеСтруктурноеПодразделение + ") КАК ТиповойОстатки";
	
	Запрос.Текст = Текст;
	Выборка = Запрос.Выполнить().Выбрать();

	ВалютаРегламентированногоУчета	= ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();

	Пока Выборка.Следующий() Цикл
		
		Если НЕ ЗначениеЗаполнено(Выборка.Номенклатура) Тогда 
			Продолжить;
		ИначеЕсли НЕ ЗначениеЗаполнено(Выборка.Цена) Тогда 
			Продолжить;
		КонецЕсли;
		
		СтруктураОтбора = Новый Структура();
		СтруктураОтбора.Вставить("Номенклатура", Выборка.Номенклатура);

		СтрокаТабличнойЧасти = ОбработкаТабличныхЧастейКлиентСервер.НайтиСтрокуТабЧасти(Объект, "Товары", СтруктураОтбора);

		Если СтрокаТабличнойЧасти = Неопределено Тогда
			Если Обновить Тогда
				Продолжить;
			Иначе
				СтрокаТабличнойЧасти = Объект.Товары.Добавить();
				СтрокаТабличнойЧасти.Номенклатура = Выборка.Номенклатура;
			КонецЕсли;
		КонецЕсли;
		СтрокаТабличнойЧасти.Цена = Выборка.Цена;
		СтрокаТабличнойЧасти.Валюта = ВалютаРегламентированногоУчета;
		
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоПоступлениюНаСервере(ДокументПоступление)
	
	Если НЕ ЗначениеЗаполнено(ДокументПоступление) Тогда
		Возврат;
	КонецЕсли;
		
	Если НЕ ЗначениеЗаполнено(ДокументПоступление.ТипЦен) Тогда
		ТекстСообщения = НСтр("ru='В документе ""%1"" не установлен тип цен! Заполнение невозможно.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, 
				ДокументПоступление);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, "Товары", "Объект");
		Возврат;
	КонецЕсли;

	ТипЦен = ДокументПоступление.ТипЦен;

	Запрос = Новый Запрос;
    Запрос.УстановитьПараметр("ДокументОснование", ДокументПоступление);

	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	Док.СуммаВключаетНДС,
	               |	Док.ВалютаДокумента,
	               |	Док.Контрагент,
	               |	Док.ТипЦен КАК ТипЦен,
	               |	Док.Товары.(
	               |		Номенклатура,
	               |		Цена,
	               |		СтавкаНДС,
	               |		СУММА(НомерСтроки),
	               |		ЕСТЬNULL(Док.Товары.СтавкаНДС.Ставка, 0) КАК СтавкаНДССтавка
	               |	),
	               |	Док.Услуги.(
	               |		СУММА(НомерСтроки),
	               |		Номенклатура,
	               |		Цена,
	               |		СтавкаНДС,
	               |		ЕСТЬNULL(Док.Услуги.СтавкаНДС.Ставка, 0) КАК СтавкаНДССтавка
	               |	),
	               |	Док.ТипЦен.ЦенаВключаетНДС КАК ЦенаВключаетНДС
	               |ИЗ
	               |	Документ.ПоступлениеТоваровУслуг КАК Док
	               |ГДЕ
	               |	Док.Ссылка = &ДокументОснование
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	Док.Товары.(Номенклатура,
	               |	Цена,
	               |	СтавкаНДС,
	               |	ЕСТЬNULL(Док.Товары.СтавкаНДС.Ставка, 0)),
	               |	Док.Услуги.(Номенклатура,
	               |	Цена,
	               |	СтавкаНДС,
	               |	ЕСТЬNULL(Док.Услуги.СтавкаНДС.Ставка, 0))";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	Выборка = Шапка.Товары.Выбрать();

	Пока Выборка.Следующий() Цикл

		Если НЕ ЗначениеЗаполнено(Выборка.Номенклатура) Тогда
			Продолжить;
		КонецЕсли;

		СтруктураОтбора = Новый Структура();
		СтруктураОтбора.Вставить("Номенклатура", Выборка.Номенклатура);

		СтрокаТабличнойЧасти = ОбработкаТабличныхЧастейКлиентСервер.НайтиСтрокуТабЧасти(Объект, "Товары", СтруктураОтбора);

		Если СтрокаТабличнойЧасти = Неопределено Тогда

			СтрокаТабличнойЧасти = Объект.Товары.Добавить();
			СтрокаТабличнойЧасти.Номенклатура               = Выборка.Номенклатура;

		КонецЕсли;
		
		СтрокаТабличнойЧасти.Цена  = ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(
											Выборка.Цена,
											Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов,
											Шапка.СуммаВключаетНДС,
											Шапка.ЦенаВключаетНДС,
											Шапка.ЦенаВключаетНДС,
											Выборка.СтавкаНДССтавка);

		СтрокаТабличнойЧасти.Валюта =  Шапка.ВалютаДокумента;
	КонецЦикла;
	
	Выборка = Шапка.Услуги.Выбрать();
		
	Пока Выборка.Следующий() Цикл

		Если НЕ ЗначениеЗаполнено(Выборка.Номенклатура) Тогда
			Продолжить;
		КонецЕсли;

		СтруктураОтбора = Новый Структура();
		СтруктураОтбора.Вставить("Номенклатура",               Выборка.Номенклатура);

		СтрокаТабличнойЧасти = ОбработкаТабличныхЧастейКлиентСервер.НайтиСтрокуТабЧасти(Объект, "Товары", СтруктураОтбора);

		Если СтрокаТабличнойЧасти = Неопределено Тогда

			СтрокаТабличнойЧасти = Объект.Товары.Добавить();
			СтрокаТабличнойЧасти.Номенклатура               = Выборка.Номенклатура;

		КонецЕсли;
		СтрокаТабличнойЧасти.Цена  = ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(
											Выборка.Цена,
											Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов,
											Шапка.СуммаВключаетНДС,
											Шапка.ЦенаВключаетНДС,
											Шапка.ЦенаВключаетНДС,
											Выборка.СтавкаНДССтавка);

		СтрокаТабличнойЧасти.Валюта =  Шапка.ВалютаДокумента;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТоварыПоДокументуОснованиюНаСервере()

	Документы.УстановкаЦенНоменклатуры.ЗаполнитьДокументПоПоступлению(Объект, Объект.ДокументОснование);
	 
КонецПроцедуры

&НаСервере
Функция ПоместитьТоварыВоВременноеХранилищеНаСервере()

	Возврат ПоместитьВоВременноеХранилище(Объект.Товары.Выгрузить(), УникальныйИдентификатор);

КонецФункции

&НаКлиенте
Функция ПолучитьПараметрыОбработкиТабличнойЧастиТовары()
	
	ПараметрыОбработки = Новый Структура;
	
	ПараметрыОбработки.Вставить("АдресХранилищаТовары", ПоместитьТоварыВоВременноеХранилищеНаСервере());
	ПараметрыОбработки.Вставить("Заголовок",            НСтр("ru = 'ТМЗ и услуги'"));
	ПараметрыОбработки.Вставить("ДокументСсылка", 		Объект.Ссылка);
	ПараметрыОбработки.Вставить("ДокументДата", 		Объект.Дата);
	ПараметрыОбработки.Вставить("ДокументОрганизация", 	Объект.Организация);
	ПараметрыОбработки.Вставить("ДокументТипЦен", 		Объект.ТипЦен);	

	Возврат ПараметрыОбработки;
	
КонецФункции

&НаСервере
Процедура ОбработкаОповещенияОбработкиТабличнойЧастиТоварыНаСервере(Параметры)

	ТаблицаОбработки = ПолучитьИзВременногоХранилища(Параметры.АдресОбработаннойТабличнойЧастиТоварыВХранилище);
	
	Объект.Товары.Загрузить(ТаблицаОбработки);
		
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииЗначенияОрганизацииСервер(СтруктураПараметров, СтруктураРезультатаВыполнения)
	
	Если НЕ СтруктураПараметров.ИзмененаОрганизация И НЕ СтруктураПараметров.ИзмененоСтруктурноеПодразделение Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьФункциональныеОпцииФормы();
	
	РаботаСДиалогами.ПриИзмененииЗначенияОрганизации(Объект, , СтруктураРезультатаВыполнения);

КонецПроцедуры

&НаСервере
Процедура СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(СтруктураПараметров = Неопределено, СтруктураРезультатаВыполнения = Неопределено)
	
	Если СтруктураПараметров = Неопределено 
		ИЛИ (СтруктураПараметров.Свойство("НеобходимоИзменитьЗначенияРеквизитовОбъекта") 
			И СтруктураПараметров.НеобходимоИзменитьЗначенияРеквизитовОбъекта) Тогда 
		РаботаСДиалогами.СтруктурноеПодразделениеПриИзменении(СтруктурноеПодразделениеОрганизация, Объект.Организация, Объект.СтруктурноеПодразделение, СтруктураПараметров);
	КонецЕсли;
	
	ПриИзмененииЗначенияОрганизацииСервер(СтруктураПараметров, СтруктураРезультатаВыполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораСтруктурногоПодразделения(Результат, Параметры) Экспорт
	
	РаботаСДиалогамиКлиент.ПослеВыбораСтруктурногоПодразделения(Результат, Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация);
	Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
		Модифицированность = Истина;
		Результат.Вставить("НеобходимоИзменитьЗначенияРеквизитовОбъекта", Ложь);
		СтруктураРезультатаВыполнения = Неопределено;
		СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(Результат, СтруктураРезультатаВыполнения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат <> Неопределено Тогда
		ДобавитьНоменклатуруНаСервере(Результат.Номенклатура);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ДобавитьНоменклатуруНаСервере(Номенклатура)
	
	НоваяСтрока = Объект.Товары.Добавить();
	НоваяСтрока.Номенклатура = Номенклатура;
	
	ДанныеОбъекта = Новый Структура(
		"Дата, Организация, ТипЦен, Ссылка");
	
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура, Цена, Валюта");
		
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, НоваяСтрока);
	
	ТоварыНоменклатураПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеСтрокиТаблицы);
	
КонецПроцедуры 

&НаСервере
Процедура ДобавитьПоШтрихкодуНаСервере(Результат)
	
	Если ТипЗнч(Результат) = Тип("Структура") И Результат.Свойство("Штрихкод") Тогда
		Результат.Вставить("ФорматBase64", Истина);
		РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ДекодироватьШтрихкодДанныхBase64(Результат);
		Штрихкод = Результат.Штрихкод;
		Результат.Очистить();
	Иначе
		ШтрихКод = "";
	КонецЕсли;
	
	ТаблицаНоменклатурыПоШтрихкоду = РегистрыСведений.ШтрихкодыНоменклатуры.НоменклатураПоШтрихкоду(Штрихкод);
	
	Если ТаблицаНоменклатурыПоШтрихкоду.Количество() <> 1 Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьНоменклатуруНаСервере(ТаблицаНоменклатурыПоШтрихкоду[0].Номенклатура)
	
КонецПроцедуры

#Область ЗагрузкаИзФайла
&НаКлиенте
Процедура ЗавершитьЗагрузкуИзФайла(АдресЗагруженныхДанных, ДополнительныеПараметры) Экспорт
	
	Если АдресЗагруженныхДанных = Неопределено
		Или НЕ ЭтоАдресВременногоХранилища(АдресЗагруженныхДанных) Тогда 
		Возврат;
	КонецЕсли;                                                                                     
	
	ИмяТЧ = "Товары";
	Если ДополнительныеПараметры <> Неопределено И ДополнительныеПараметры.Свойство("ИмяТЧ", ИмяТЧ) Тогда
		ИмяТЧ = ДополнительныеПараметры.ИмяТЧ;
	КонецЕсли;
	
	ЗаполнитьТабличнуюЧастьИзФайла(АдресЗагруженныхДанных,ИмяТЧ);
	
КонецПроцедуры  

&НаСервере
Процедура ЗаполнитьТабличнуюЧастьИзФайла(АдресЗагруженныхДанных, ИмяТЧ)
	
	ЗагруженныеДанные = ПолучитьИзВременногоХранилища(АдресЗагруженныхДанных);
	
	Если ТипЗнч(ЗагруженныеДанные) <> Тип("ТаблицаЗначений")
		Или ЗагруженныеДанные.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	НоменклатураБезЦены = ЗагруженныеДанные.Скопировать(Новый Структура("Цена", 0), "Номенклатура");
	Если НоменклатураБезЦены.Количество() > 0 Тогда 
		
		СписокНоменклатуры = НоменклатураБезЦены.ВыгрузитьКолонку("Номенклатура"); 
		Если ЗначениеЗаполнено(Объект.ТипЦен) Тогда
			ЦеныНоменклатуры = УправлениеЦенообразованием.ПолучитьТаблицуЦенНоменклатуры(СписокНоменклатуры, Объект.ТипЦен, Объект.Дата, Объект.Организация);
		Иначе
			ЦеныНоменклатуры = УправлениеЦенообразованием.ПолучитьТаблицуЦенНоменклатурыДокументов(
				СписокНоменклатуры, Перечисления.СпособыЗаполненияЦен.ПоПродажнымЦенам, Объект.Дата);
		КонецЕсли;
		
	КонецЕсли;	
	
	Для Каждого ЗагруженнаяСтрока Из ЗагруженныеДанные Цикл 
		
		Если ЗагруженнаяСтрока.Цена = 0 Тогда 
			СведенияОЦенеНоменклатуры = ЦеныНоменклатуры.Найти(ЗагруженнаяСтрока.Номенклатура, "Номенклатура");
			Если СведенияОЦенеНоменклатуры <> Неопределено Тогда		
				ЗагруженнаяСтрока.Цена = СведенияОЦенеНоменклатуры.Цена;		
			КонецЕсли;
		КонецЕсли;
				
	КонецЦикла;
	
	СтруктураЗагруженныхДанных = Новый Структура();
	СтруктураЗагруженныхДанных.Вставить("АдресПодобраннойНоменклатурыВХранилище", 
		ПоместитьВоВременноеХранилище(ЗагруженныеДанные, УникальныйИдентификатор)); 
		
		
	ОбработкаВыбораПодборНаСервере(СтруктураЗагруженныхДанных);
		
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайла(Команда) 
	
	ПараметрыЗагрузки = ОбщегоНазначенияБККлиент.НовыйПараметрыЗагрузкиВТабЧасть();
		
	ПараметрыЗагрузки.ПолноеИмяТабличнойЧасти = "УстановкаЦенНоменклатуры.Товары";
	ПараметрыЗагрузки.Заголовок = НСтр("ru = 'Загрузка товаров из файла'");
	
	ДополнительныеПараметры = Новый Структура();  
	ДополнительныеПараметры.Вставить("ИмяТЧ", "Товары");
	ПараметрыЗагрузки.ДополнительныеПараметры = ДополнительныеПараметры;

	Оповещение = Новый ОписаниеОповещения("ЗавершитьЗагрузкуИзФайла", ЭтотОбъект,ДополнительныеПараметры);
	ОбщегоНазначенияБККлиент.ПоказатьФормуЗагрузки(ПараметрыЗагрузки,Оповещение);

КонецПроцедуры

#КонецОбласти

