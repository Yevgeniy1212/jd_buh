&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

&НаКлиенте
Перем ФормаДлительнойОперации;

&НаКлиенте
Перем УИДЗамераЗаполнения;
  
 ////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ 

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)  
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	Если Параметры.Ключ.Пустая() Тогда
		
		ПодготовитьФормуНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры 

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	// РедактированиеДокументовПользователей
	ПраваДоступаКОбъектам.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец РедактированиеДокументовПользователей
	
	ПодготовитьФормуНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры 

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки) 
	
	
КонецПроцедуры 

&НаКлиенте
Процедура ПриОткрытии(Отказ)
		
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

КонецПроцедуры  

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	КлючеваяОперация = "Документ ""ведомость на перечисление прочих выплат"" (запись)";
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи) 
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник) 
		
	Если ИмяСобытия = "Запись_ПлатежноеПоручениеВходящее" Тогда
		НайтиДокументПлатежногоПорученияВходящегоИЗаполнитьСсылкуНаСервере(); 
	КонецЕсли
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	РаботаСДиалогамиКлиент.СтруктурноеПодразделениеНачалоВыбора(ЭтаФорма, СтандартнаяОбработка, Объект.Организация, Объект.СтруктурноеПодразделение, Истина);
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияПриИзменении(Элемент)
		
	Если НЕ ЗначениеЗаполнено(СтруктурноеПодразделениеОрганизация) Тогда 
		Объект.Организация = Неопределено;
		Объект.СтруктурноеПодразделение = Неопределено;
	Иначе  
		Результат = РаботаСДиалогамиКлиент.ПроверитьИзменениеЗначенийОрганизацииСтруктурногоПодразделения(СтруктурноеПодразделениеОрганизация, Объект.Организация, Объект.СтруктурноеПодразделение);
		Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
			СтруктураРезультатаВыполнения = Неопределено;
			СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(, СтруктураРезультатаВыполнения);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры  

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Справочник.ФизическиеЛица.Форма.ФормаВыбора" Тогда
		Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.ФизическиеЛица")Тогда
			Если Объект.ПрочиеВыплаты.НайтиСтроки(Новый Структура("ФизЛицо", ВыбранноеЗначение)).Количество() = 0 Тогда
				НоваяСтрока 					= Объект.ПрочиеВыплаты.Добавить();	
				НоваяСтрока.ФизЛицо 			= ВыбранноеЗначение;
			КонецЕсли;
		ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Массив") Тогда
			Для Каждого СтрокаМассива Из ВыбранноеЗначение Цикл
				
				Если Объект.ПрочиеВыплаты.НайтиСтроки(Новый Структура("ФизЛицо", СтрокаМассива)).Количество() = 0 Тогда
					
					НоваяСтрока 					= Объект.ПрочиеВыплаты.Добавить();	
					НоваяСтрока.ФизЛицо 			= СтрокаМассива;
					
				КонецЕсли;
				
			КонецЦикла;
	
		КонецЕсли;
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура СсылкаНаПлатежноеПоручениеВходящееНажатие(Элемент)
	
	Если СписокПлатежныхПорученийВходящих.Количество() = 0 Тогда
			
		Если Объект.ПометкаУдаления Тогда
			ТекстСообщения = НСтр("ru = 'Нельзя создать платежное поручение на основании ведомости, помеченной на удаление.'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецЕсли;
	
		Если Объект.ПрочиеВыплаты.Количество() = 0 Тогда
			ТекстСообщения = НСтр("ru = 'Не заполнена таб. часть Перечисление прочих выплат.'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецЕсли;
		
		ТекстВопроса = "";
		Если НЕ ЗначениеЗаполнено(Параметры.Ключ) ИЛИ Модифицированность Тогда
			ТекстВопроса = НСтр("ru = 'Нельзя создать платежное поручение на основании незаписанного документа. Записать документ?'");
		КонецЕсли;
			
		Если ЗначениеЗаполнено(ТекстВопроса) Тогда
			ДополнительныеПараметры = Новый Структура("Форма", ЭтотОбъект);
			Режим = РежимДиалогаВопрос.ДаНет;
			Оповещение   = Новый ОписаниеОповещения("ПослеЗакрытияВопросаЗаписьПриСозданииПлатежногоПорученияВходящего", ЭтотОбъект, ДополнительныеПараметры);
			ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
		Иначе
			
			ПараметрыФормы = Новый Структура("Основание", Параметры.Ключ);
			ОткрытьФорму("Документ.ПлатежноеПоручениеВходящее.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);
			
		КонецЕсли;
		
	ИначеЕсли СписокПлатежныхПорученийВходящих.Количество() > 1 Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму(
			"ОбщаяФорма.ПросмотрСпискаДокументов",
			Новый Структура("СписокДокументов, Заголовок",
				СписокПлатежныхПорученийВходящих,
				НСтр("ru='Документы (%КоличествоДокументов%)'")
			),
			ЭтаФорма,,,, Неопределено, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

	Иначе
		ПоказатьЗначение( ,СписокПлатежныхПорученийВходящих[0].Значение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ Прочие выплаты

&НаКлиенте
Процедура ПрочиеВыплатыПериодВзаиморасчетовПриИзменении(Элемент)
		
	ТекущиеДанныеПрочиеВыплаты = Элементы.ПрочиеВыплаты.ТекущиеДанные;
	ТекущиеДанныеПрочиеВыплаты.ПериодВзаиморасчетов = НачалоМесяца(ТекущиеДанныеПрочиеВыплаты.ПериодВзаиморасчетов);  
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

 &НаКлиенте
Процедура ЗаполнитьПоЗадолженности(Команда)
	
	Если Объект.ПрочиеВыплаты.Количество() > 0 Тогда
		
		ТекстВопроса = НСтр("ru= 'Перед заполнением табличная часть будет очищена. Заполнить?'");
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаПередЗаполнениемПоЗадолженности", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
		
	Иначе
		
		ЗаполнитьПоЗадолженностиНаКлиенте();
	
	КонецЕсли;
	
КонецПроцедуры  

&НаКлиенте
Процедура Подбор(Команда) 
	
	ПараметрыФормы	= Новый Структура;
	ПараметрыФормы.Вставить("ЗакрыватьПриЗакрытииВладельца",	Истина);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе",				Ложь);
	ПараметрыФормы.Вставить("РежимВыбора",						Истина);
	ПараметрыФормы.Вставить("МножественныйВыбор",				Истина);
	ПараметрыФормы.Вставить("ПараметрВыборГруппИЭлементов",		ИспользованиеГруппИЭлементов.Элементы);
	
	Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;

	ОткрытьФорму("Справочник.ФизическиеЛица.Форма.ФормаВыбора", ПараметрыФормы, ЭтаФорма, , , ,,Режим)

КонецПроцедуры  

&НаКлиенте
Процедура Очистить(Команда)

	ТекстВопроса = НСтр("ru= 'Табличные части будут очищены. Продолжить?'");
	Режим = РежимДиалогаВопрос.ДаНет;
	Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаОбОчисткеТабЧасти", ЭтотОбъект);
	ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
     ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
     ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры
 
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
     ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
     ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()

	ОбщегоНазначенияБККлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте  
Процедура ПослеЗакрытияВопросаПередЗаполнениемПоЗадолженности(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;		
	КонецЕсли;
	
	ЗаполнитьПоЗадолженностиНаКлиенте();
	
КонецПроцедуры 

&НаКлиенте
Процедура ЗаполнитьПоЗадолженностиНаКлиенте()
	
	УИДЗамераЗаполнения = ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Ложь, "Документ ""ведомость на перечисление прочих выплат"" (заполнение)");
	
	РезультатВыполнения = АвтозаполнениеНаСервере();		
	
	Если ТипЗнч(РезультатВыполнения) = Тип("Структура") 
		И НЕ РезультатВыполнения.ЗаданиеВыполнено Тогда
		
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтаФорма, ИдентификаторЗадания);
		
		ИдентификаторЗадания = РезультатВыполнения.ИдентификаторЗадания;
		АдресХранилища       = РезультатВыполнения.АдресХранилища;
		
	Иначе
		
		ЗафиксироватьДлительностьКлючевойОперации();
		
	КонецЕсли;         
	
КонецПроцедуры  

&НаСервере
Функция АвтозаполнениеНаСервере() 
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		ТекстСообщения = НСтр("ru = 'Не заполнена организация, заполнение не выполнено'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ,"СтруктурноеПодразделениеОрганизация");
		Возврат Ложь;
	КонецЕсли;
	
	Объект.ПрочиеВыплаты.Очистить();

	СтруктураПараметров = Новый Структура;	
	ДатаСреза   = ?(КонецМесяца(Объект.Дата) > КонецМесяца(Объект.ПериодВзаиморасчетов), КонецМесяца(Объект.Дата), Макс(Объект.Дата, КонецМесяца(Объект.ПериодВзаиморасчетов)));
				
	ПоОстаткам 	= (Объект.СпособРасчетаСуммКПеречислению = Перечисления.СпособыРасчетаСуммКПеречислению.ПоОстаткамЗадолженностиНаКонецМесяца);
		
	ВидРегистра = "ВзаиморасчетыПоПрочимВыплатам";
		
	СтруктураПараметров.Вставить("парамГраницаОстатков", Новый Граница(ДатаСреза, ВидГраницы.Включая));
	СтруктураПараметров.Вставить("парамГоловнаяОрганизация", ОбщегоНазначенияБКВызовСервера.ГоловнаяОрганизацияДляУчетаЗарплаты(Объект.Организация));
	СтруктураПараметров.Вставить("парамОрганизация", Объект.Организация);
	СтруктураПараметров.Вставить("парамСтруктурноеПодразделение", Объект.СтруктурноеПодразделение);
	СтруктураПараметров.Вставить("парамПолучатель", Объект.Контрагент);
	СтруктураПараметров.Вставить("парамМесяц", Объект.ПериодВзаиморасчетов);
	СтруктураПараметров.Вставить("парамВидПрочихВыплат", Объект.ВидПрочихВыплат);
	СтруктураПараметров.Вставить("ПоОстаткам", ПоОстаткам);  	
	СтруктураПараметров.Вставить("ТаблицаПрочиеВыплаты", Объект.ПрочиеВыплаты.Выгрузить());     		  		

	НаименованиеЗадания = НСтр("ru = 'Заполнение документа «Ведомость на перечисление прочих выплат»'");
	
	РезультатВыполнения = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
		УникальныйИдентификатор, 
		"Документы.ВедомостьНаПеречислениеПрочихВыплат.ПодготовитьДанныеДляЗаполнения", 
		СтруктураПараметров, 
		НаименованиеЗадания);
		
	АдресХранилища = РезультатВыполнения.АдресХранилища;

	Если РезультатВыполнения.ЗаданиеВыполнено Тогда
		ЗагрузитьПодготовленныеДанные();
	КонецЕсли;
	
	Возврат РезультатВыполнения;  	
	
КонецФункции

&НаСервере
Процедура ЗагрузитьПодготовленныеДанные()
	
	СтруктураДанных = ПолучитьИзВременногоХранилища(АдресХранилища);
	
	Если ТипЗнч(СтруктураДанных) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаПрочиеВыплаты = СтруктураДанных.ТаблицаПрочиеВыплаты;
	Объект.ПрочиеВыплаты.Загрузить(ТаблицаПрочиеВыплаты);
	
	Если Объект.ПрочиеВыплаты.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Не обнаружены данные для записи в табличную часть документа'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, , "Объект");
	КонецЕсли;  
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	УстановитьФункциональныеОпцииФормы();
	
	Если Параметры.Ключ.Пустая() Тогда
		
		Объект.Дата = КонецДня(Объект.Дата); 
		
		Если НЕ ЗначениеЗаполнено(Объект.ВидПрочихВыплат) Тогда
			Объект.ВидПрочихВыплат = Справочники.ВидыПрочихВыплат.ПрофессиональнаяВыплатаЗаСчетРаботодателя;
		КонецЕсли;
				
	Иначе
		
		ПроверитьДокументыВведенныеНаОсновании();
				
	КонецЕсли;
	
	НайтиДокументПлатежногоПорученияВходящегоИЗаполнитьСсылкуНаСервере();
		
	ИДКартинки = РаботаСДиалогами.ПолучитьИДКартинки(БиблиотекаКартинок.КартинкаВстроеннойСправкиФормы);
		
	ПоддержкаРаботыСоСтруктурнымиПодразделениями = ПолучитьФункциональнуюОпцию("ПоддержкаРаботыСоСтруктурнымиПодразделениями");
	РаботаСДиалогамиКлиентСервер.УстановитьВидимостьСтруктурногоПодразделения(Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	РаботаСДиалогамиКлиентСервер.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделениеОрганизация, Объект.СтруктурноеПодразделение, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
		
	ОбщегоНазначенияБК.УстановитьТекстАвтора(НадписьАвтор, Объект.Автор);
		
КонецПроцедуры 

&НаКлиенте
Процедура ПослеВыбораСтруктурногоПодразделения(Результат, Параметры) Экспорт
	
	РаботаСДиалогамиКлиент.ПослеВыбораСтруктурногоПодразделения(Результат, Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация);
	Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
		Модифицированность = Истина;
		Результат.Вставить("НеобходимоИзменитьЗначенияРеквизитовОбъекта", Ложь);
		СтруктураРезультатаВыполнения = Неопределено;
		РаботаСДиалогамиКлиент.ПоказатьВопросОбОчисткеНекорректныхЗначенийПодразделения(ЭтаФорма, Результат);
	КонецЕсли;
	
КонецПроцедуры   

&НаКлиенте
Процедура ПослеЗакрытияВопросаОбОчисткеНекорректныхЗначенийПодразделения(Результат, Параметры) Экспорт
	
	Параметры.Вставить("ОчищатьНекорректныеЗначения", Результат = КодВозвратаДиалога.Да);
	СтруктураРезультатаВыполнения = Неопределено;

	СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(Параметры, СтруктураРезультатаВыполнения);	
	
КонецПроцедуры   

&НаСервере
Процедура СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(СтруктураПараметров = Неопределено, СтруктураРезультатаВыполнения = Неопределено)
	
	Если СтруктураПараметров = Неопределено 
		ИЛИ (СтруктураПараметров.Свойство("НеобходимоИзменитьЗначенияРеквизитовОбъекта") 
			И СтруктураПараметров.НеобходимоИзменитьЗначенияРеквизитовОбъекта) Тогда 
		РаботаСДиалогами.СтруктурноеПодразделениеПриИзменении(СтруктурноеПодразделениеОрганизация, Объект.Организация, Объект.СтруктурноеПодразделение, СтруктураПараметров);
	КонецЕсли;
	
	ПриИзмененииЗначенияОрганизацииСервер(СтруктураПараметров, СтруктураРезультатаВыполнения);
	
КонецПроцедуры 

Процедура ПриИзмененииЗначенияОрганизацииСервер(СтруктураПараметров, СтруктураРезультатаВыполнения)
	
	Если НЕ СтруктураПараметров.ИзмененаОрганизация И НЕ СтруктураПараметров.ИзмененоСтруктурноеПодразделение Тогда
		Возврат;
	КонецЕсли;
	
	ПриИзмененииЗначенияСтруктурногоПодразделенияСервер(СтруктураПараметров);

	УстановитьФункциональныеОпцииФормы();
	
	РаботаСДиалогами.ПриИзмененииЗначенияОрганизации(Объект, , СтруктураРезультатаВыполнения);   
	
	// Очистим некорректные значения Субконто с подразделениями не входящими в выбранное структурное подразделение
	РаботаСДиалогами.ПроверитьСоответствиеПодразделения(Объект.Организация, Объект.СтруктурноеПодразделение); 
	
КонецПроцедуры
 

&НаСервере
Процедура ПриИзмененииЗначенияСтруктурногоПодразделенияСервер(СтруктураПараметров)
	
	Если СтруктураПараметров.Свойство("ОчищатьНекорректныеЗначения") И НЕ СтруктураПараметров.ОчищатьНекорректныеЗначения Тогда 
		Возврат;
	КонецЕсли;
	
	// Очистим некорректные значения Субконто с подразделениями не входящими в выбранное структурное подразделение
	РаботаСДиалогами.ПроверитьСоответствиеПодразделения(Объект.Организация, Объект.СтруктурноеПодразделение); 

КонецПроцедуры  

&НаКлиенте
Процедура ЗафиксироватьДлительностьКлючевойОперации()
	
	ОценкаПроизводительностиКлиент.ЗавершитьЗамерВремени(УИДЗамераЗаполнения);
	
КонецПроцедуры 

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	Попытка
		Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
			ЗагрузитьПодготовленныеДанные();
			ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
			ЗафиксироватьДлительностьКлючевойОперации();
		Иначе
			ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания(
				"Подключаемый_ПроверитьВыполнениеЗадания", 
				ПараметрыОбработчикаОжидания.ТекущийИнтервал, 
				Истина);
		КонецЕсли;
	Исключение
		УИДЗамераЗаполнения = Неопределено;
		ВремяНачалаОперации = Неопределено;
		ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
		ВызватьИсключение ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
КонецПроцедуры 

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

&НаКлиенте
Процедура ПослеЗакрытияВопросаОбОчисткеТабЧасти(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;		
	КонецЕсли;
	
	Объект.ПрочиеВыплаты.Очистить();

КонецПроцедуры

&НаСервере
Процедура ПроверитьДокументыВведенныеНаОсновании()
	
	Если Не Параметры.Ключ.Пустая() Тогда
		Если ОбщегоНазначенияБК.СуществуютПроведенныеДокументыВведенныеНаОсновании(Объект.Ссылка) Тогда
			ЭтаФорма.ТолькоПросмотр = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры 

&НаСервере
Процедура НайтиДокументПлатежногоПорученияВходящегоИЗаполнитьСсылкуНаСервере() Экспорт
	
	Документы.ВедомостьНаВозвратПрочихВыплат.НайтиДокументПлатежногоПорученияВходящегоИЗаполнитьСсылку(Объект.Ссылка, Элементы.СсылкаНаПлатежноеПоручениеВходящее, СписокПлатежныхПорученийВходящих);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаЗаписьПриСозданииПлатежногоПорученияВходящего(Результат, Параметры) Экспорт

	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Форма = Параметры.Форма;
	
	Попытка
		ПараметрыЗаписи = Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Запись);
		Если Форма.Записать(ПараметрыЗаписи) Тогда
			ПараметрыФормы = Новый Структура("Основание", Объект.Ссылка);
			ОткрытьФорму("Документ.ПлатежноеПоручениеВходящее.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);
		КонецЕсли;
	Исключение
		Информация = ИнформацияОбОшибке();
		ТекстСообщения = НСтр("ru='Не удалось записать документ по причине: %1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, КраткоеПредставлениеОшибки(Информация));
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , , "Форма.Объект");
	КонецПопытки;

КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеПриИзменении(Элемент)
	
	Если ТекущийДокументОснование = Объект.ДокументОснование Тогда
		Возврат;
	КонецЕсли;

	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		ТекстВопроса = НСтр("ru='Заполнить текущий документ данными документа-основания?'");
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаПриИзмененииДокументОснование", ЭтотОбъект, Параметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
	КонецЕсли;
	ТекущийДокументОснование = Объект.ДокументОснование;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаПриИзмененииДокументОснование(Результат, Параметры) Экспорт
	
	Если НЕ Результат = КодВозвратаДиалога.Да Тогда
		Возврат;	
	КонецЕсли;
	
	Объект.ПрочиеВыплаты.Очистить();

	ПослеЗакрытияВопросаПриИзмененииДокументОснованиеНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗакрытияВопросаПриИзмененииДокументОснованиеНаСервере()
	
	ИсходныеДанные = Новый Структура("Организация, СтруктурноеПодразделение");
	ЗаполнитьЗначенияСвойств(ИсходныеДанные, Объект);
	
	ЗаполнитьПоДокументуОснованиюНаСервере();
	
	ПараметрыОбработки = Новый Структура;
	ПараметрыОбработки.Вставить("ИзмененаОрганизация", ИсходныеДанные.Организация <> Объект.Организация);
	ПараметрыОбработки.Вставить("ИзмененоСтруктурноеПодразделение", ИсходныеДанные.СтруктурноеПодразделение <> Объект.СтруктурноеПодразделение);
	ПараметрыОбработки.Вставить("ОчищатьНекорректныеЗначения", Истина);
	
	РаботаСДиалогамиКлиентСервер.УстановитьВидимостьСтруктурногоПодразделения(Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	РаботаСДиалогамиКлиентСервер.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделениеОрганизация, Объект.СтруктурноеПодразделение, ПоддержкаРаботыСоСтруктурнымиПодразделениями);

	ПриИзмененииЗначенияОрганизацииСервер(ПараметрыОбработки, Неопределено);

	УстановитьФункциональныеОпцииФормы();
	
КонецПроцедуры  

&НаСервере
Процедура ЗаполнитьПоДокументуОснованиюНаСервере()

	Если ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ВедомостьНаПеречислениеПрочихВыплат") Тогда
		
		Документы.ВедомостьНаВозвратПрочихВыплат.ЗаполнитьПоВедомостьНаПеречислениеПрочихВыплат(Объект, Объект.ДокументОснование);
		
	КонецЕсли;
	
КонецПроцедуры  






