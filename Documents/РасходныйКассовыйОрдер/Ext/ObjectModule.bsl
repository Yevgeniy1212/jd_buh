#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

#Область УправлениеДоступом

// Процедура ЗаполнитьНаборыЗначенийДоступа по свойствам объекта заполняет наборы значений доступа
// в таблице с полями:
//    НомерНабора     - Число                                     (необязательно, если набор один),
//    ВидДоступа      - ПланВидовХарактеристикСсылка.ВидыДоступа, (обязательно),
//    ЗначениеДоступа - Неопределено, СправочникСсылка или др.    (обязательно),
//    Чтение          - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Добавление      - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Изменение       - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Удаление        - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//
//  Вызывается из процедуры УправлениеДоступомСлужебный.ЗаписатьНаборыЗначенийДоступа(),
// если объект зарегистрирован в "ПодпискаНаСобытие.ЗаписатьНаборыЗначенийДоступа" и
// из таких же процедур объектов, у которых наборы значений доступа зависят от наборов этого
// объекта (в этом случае объект зарегистрирован в "ПодпискаНаСобытие.ЗаписатьЗависимыеНаборыЗначенийДоступа").
//
// Параметры:
//  Таблица      - ТабличнаяЧасть,
//                 РегистрСведенийНаборЗаписей.НаборыЗначенийДоступа,
//                 ТаблицаЗначений, возвращаемая УправлениеДоступом.ТаблицаНаборыЗначенийДоступа().
//
Процедура ЗаполнитьНаборыЗначенийДоступа(Таблица) Экспорт
	
	ОбщегоНазначенияБК.ЗаполнитьНаборыПоОрганизацииСтурктурномуПодразделению(ЭтотОбъект, Таблица, "Организация", "СтруктурноеПодразделениеОтправитель");
	
	Если ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетнику 
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику ТОГДА
		
		СписокФизЛиц = Новый Массив();
		СписокФизЛиц.Добавить(Контрагент);
		
		РасчетЗарплатыСервер.ЗаполнитьНаборыПоОрганизацииСтрутурномуПодразделениюСпискуФизЛиц(ЭтотОбъект, Таблица, "Организация", "СтруктурноеПодразделениеОтправитель",СписокФизЛиц);
		
	КонецЕсли;
	
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ


Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
		
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
		
	Если ДанныеЗаполнения <> Неопределено И ТипДанныхЗаполнения <> Тип("Структура") 
		И Метаданные().ВводитсяНаОсновании.Содержит(ДанныеЗаполнения.Метаданные()) Тогда
		Документы.РасходныйКассовыйОрдер.ЗаполнитьПоДокументуОснованию(ЭтотОбъект, ДанныеЗаполнения);
		УправлениеДенежнымиСредствамиСервер.ЗаполнитьРеквизитыРасчетногоДокумента(ЭтотОбъект, РасшифровкаПлатежа);
		Возврат;
	ИначеЕсли ТипДанныхЗаполнения = Тип("Структура") Тогда
		Если ДанныеЗаполнения.Свойство("Автор") Тогда
			ДанныеЗаполнения.Удалить("Автор");
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
	КонецЕсли;
	
	УправлениеДенежнымиСредствамиСервер.ЗаполнитьРеквизитыРасчетногоДокумента(ЭтотОбъект, РасшифровкаПлатежа);

КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)

	ЕстьРасчетыПоКредитам     = УправлениеДенежнымиСредствамиСервер.ЕстьРасчетыПоКредитам(ВидОперации);

	ОрганизацияПлательщикНалогаНаПрибыль 			= УчетнаяПолитикаСервер.ПлательщикНалогаНаПрибыль(Организация, Дата);
	ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль 	= ОрганизацияПлательщикНалогаНаПрибыль И ПроцедурыНалоговогоУчета.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль(Организация, Дата);
	
	НеобходимостьОтраженияВНУ 						= ОрганизацияПлательщикНалогаНаПрибыль И УчитыватьКПН И (ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль ИЛИ ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ);
    ВестиУчетПоДоговорам                            = ПолучитьФункциональнуюОпцию("ВестиУчетПоДоговорам");
    
	МассивНепроверяемыхРеквизитов = Новый Массив();
	
	Если НЕ Документы.РасходныйКассовыйОрдер.ЕстьРасшифровкаПлатежа(ВидОперации) Тогда
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа");
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.ДоговорКонтрагента");
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентомБУ");
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентомНУ");
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.СуммаПлатежа");
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.КурсВзаиморасчетов");
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.СуммаВзаиморасчетов");
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.КратностьВзаиморасчетов");
    ИначеЕсли НЕ ВестиУчетПоДоговорам Тогда 
        МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.ДоговорКонтрагента");
	КонецЕсли;	
	
	Если НЕ ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетнику Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ВыдачаВПодотчет");
	КонецЕсли;
	
	Если НЕ ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаПоИсполнительнымЛистам Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ВыплатаПоИсполнительнымЛистам");
	КонецЕсли;
	
	Если НЕ ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ВыплатаЗаработнойПлаты");
	КонецЕсли;
	
	//Отключаем проверку реквизитов шапки
	Если НЕ ОрганизацияПлательщикНалогаНаПрибыль ИЛИ НЕ УчитыватьКПН Тогда	
		МассивНепроверяемыхРеквизитов.Добавить("ВидУчетаНУ");
	КонецЕсли;

	Если НЕ НеобходимостьОтраженияВНУ Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("СчетУчетаРасчетовСКонтрагентомНУ");
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентомНУ");
		
	КонецЕсли;
		
	Если НЕ ЕстьРасчетыПоКредитам Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентомНУ");
		
	КонецЕсли;
	
	Если НЕ ВидОперации = Перечисления.ВидыОперацийРКО.РасходДенежныхСредствПрочее
		И НЕ ВидОперации = Перечисления.ВидыОперацийРКО.РасходДенежныхСредствПрочее
		И НЕ ВидОперации = Перечисления.ВидыОперацийРКО.ИнкассацияДенежныхСредств Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("СчетУчетаРасчетовСКонтрагентомНУ");
		
	КонецЕсли;
	
	Если НЕ ВидОперации = Перечисления.ВидыОперацийРКО.РасходДенежныхСредствПрочее
		И НЕ ВидОперации = Перечисления.ВидыОперацийРКО.ИнкассацияДенежныхСредств
		И НЕ ВидОперации = Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк
		И НЕ ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетнику Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("СчетУчетаРасчетовСКонтрагентомБУ");

	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям 
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаПоИсполнительнымЛистам
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.РасходДенежныхСредствПрочее
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.ИнкассацияДенежныхСредств
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Контрагент");
	КонецЕсли;

	Если НЕ ВидОперации = Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк Тогда
		МассивНепроверяемыхРеквизитов.Добавить("СчетОрганизации");
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);

	Если ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетнику Тогда

		Если НЕ ВыдачаВПодотчет.Итог("СуммаПлатежа") = СуммаДокумента Тогда
			
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не совпадает сумма документа и суммы по видам задолженности подотчетного лица.'"), ЭтотОбъект, "ВыдачаВПодотчет", "Объект", Отказ);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаПоИсполнительнымЛистам Тогда

		Если НЕ ВыплатаПоИсполнительнымЛистам.Итог("СуммаКВыплате") = СуммаДокумента Тогда
			
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не совпадает сумма по спискам на выплату по исполнительным листам с суммой расходного кассового ордера!'"), ЭтотОбъект, "ВыплатаПоИсполнительнымЛистам", "Объект", Отказ);
			
		КонецЕсли;
		
		ВалютаРегламентированногоУчета = ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
		
		Если ВалютаДокумента <> ВалютаРегламентированногоУчета Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Выплата по исполнительным листам может осуществляться только в валюте ""%1""!'"),ВалютаРегламентированногоУчета);  
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "ВалютаДокумента", "Объект", Отказ);
		КонецЕсли;
		
	КонецЕсли;

	Если Документы.РасходныйКассовыйОрдер.ЕстьРасшифровкаПлатежа(ВидОперации) Тогда
		
		Реквизиты = Новый Структура;
		Реквизиты.Вставить("ВалютаДокумента", ВалютаДокумента);
		Реквизиты.Вставить("ВалютаРегламентированногоУчета", ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
		Реквизиты.Вставить("Регистратор", Ссылка);

		Для Каждого СтрокаТабличнойЧасти Из РасшифровкаПлатежа Цикл
			
			Реквизиты.Вставить("ДоговорКонтрагента", СтрокаТабличнойЧасти.ДоговорКонтрагента); 
			Реквизиты.Вставить("ВалютаВзаиморасчетов", СтрокаТабличнойЧасти.ДоговорКонтрагента.ВалютаВзаиморасчетов);
			
			ДополнениеКСообщению = НСтр("ru = 'Строка %1 - '");
			ДополнениеКСообщению = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ДополнениеКСообщению, СтрокаТабличнойЧасти.НомерСтроки);
			УправлениеВзаиморасчетамиСервер.ВозможноПроведениеВ_БУ_НУ(Реквизиты, Отказ, ДополнениеКСообщению);
			
		КонецЦикла;
		
	КонецЕсли;	
	
	Если ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям ИЛИ
		ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику Тогда
		
		ВалютаРегламентированногоУчета = ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
		
		Если ВалютаДокумента <> ВалютаРегламентированногоУчета Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Выплата заработной платы может осуществляться только в валюте ""%1""!'"),ВалютаРегламентированногоУчета);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "ВалютаДокумента", "Объект", Отказ);
		КонецЕсли;
		
		Если ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям ИЛИ
			(ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику И ЗначениеЗаполнено(ПлатежнаяВедомость)) Тогда
			
			ПроверитьСоответствиеВедомостей(Отказ);
		КонецЕсли;
				
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийРКО.РасчетыПоДоходуОтРазовыхВыплатСКонтрагентами Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Контрагент", Контрагент);
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	Контрагенты.ФизЛицо КАК ФизЛицо,
			|	ВЫБОР
			|		КОГДА Контрагенты.ИдентификационныйКодЛичности = ФизическиеЛица.ИдентификационныйКодЛичности
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК СовпадаетИИН_БИН,
			|	ВЫБОР
			|		КОГДА Контрагенты.РНН = ФизическиеЛица.РНН
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК СовпадаетРНН
			|ИЗ
			|	Справочник.Контрагенты КАК Контрагенты
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
			|		ПО Контрагенты.ФизЛицо = ФизическиеЛица.Ссылка
			|			И (Контрагенты.Ссылка = &Контрагент)";
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			
			ДатаПрекращенияВыводаРНН = Константы.ДатаПрекращенияВыводаРННВПервичныхДокументах.Получить();
			ВыводитьРНН = НЕ ЗначениеЗаполнено(ДатаПрекращенияВыводаРНН) ИЛИ Дата < ДатаПрекращенияВыводаРНН;
			
			Если ВыводитьРНН И НЕ Выборка.СовпадаетРНН Тогда
				ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'РНН контрагента и физлица, связанного с контрагентом, не совпадают.'"), ЭтотОбъект, "Контрагент", "Объект", Отказ);
			ИначеЕсли НЕ ВыводитьРНН И НЕ Выборка.СовпадаетИИН_БИН Тогда
				ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'ИИН/БИН контрагента и физлица, связанного с контрагентом, не совпадают.'"), ЭтотОбъект, "Контрагент", "Объект", Отказ);
			КонецЕсли;
		Иначе 
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Для контрагента не указано соответствующее ему физлицо.'"), ЭтотОбъект, "Контрагент", "Объект", Отказ);
		КонецЕсли;
		
		ПроверитьСоответствиеВедомостейПрочихДоходов(Отказ);
		
	КонецЕсли;
	
	СчетаУчетаВДокументах.ПроверитьЗаполнение(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты, Новый Соответствие);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
    
    ЕстьРасшифровкаПлатежа = Документы.РасходныйКассовыйОрдер.ЕстьРасшифровкаПлатежа(ВидОперации);

    Если ЕстьРасшифровкаПлатежа И РасшифровкаПлатежа.Количество() > 0 Тогда
		РаботаСДоговорамиКонтрагентов.ЗаполнитьДоговорВТабличнойЧастиПередЗаписью(РасшифровкаПлатежа, ЭтотОбъект);
		Если ВидОперации <> Перечисления.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателю Тогда
			ПустаяСтавкаНДС = Справочники.СтавкиНДС.ПустаяСсылка();
			Для Каждого СтрокаТаблицы Из РасшифровкаПлатежа Цикл
				СтрокаТаблицы.СтавкаНДС = ПустаяСтавкаНДС;
				СтрокаТаблицы.СуммаНДС  = 0;
			КонецЦикла;
		КонецЕсли;
    КонецЕсли;
    
	Если НЕ ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетнику Тогда
		ВыдачаВПодотчет.Очистить();	
	КонецЕсли;
	
	Если НЕ ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаПоИсполнительнымЛистам Тогда
		ВыплатаПоИсполнительнымЛистам.Очистить();	
	КонецЕсли;
		
	Если НЕ ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям Тогда
		ВыплатаЗаработнойПлаты.Очистить();	
	КонецЕсли;

	Если НЕ ВидОперации = Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк
		И НЕ ВидОперации = Перечисления.ВидыОперацийРКО.РасходДенежныхСредствПрочее Тогда
		СтруктурноеПодразделениеПолучатель = СтруктурноеПодразделениеОтправитель;
	КонецЕсли;

	Если Ответственный.Пустая() Тогда
		Ответственный = Пользователи.ТекущийПользователь();
	КонецЕсли;

	Если РасшифровкаПлатежа.Количество() = 1
		И РасшифровкаПлатежа.Индекс(РасшифровкаПлатежа[0]) <> -1 Тогда
		
		ДоговорКонтрагента = РасшифровкаПлатежа[0].ДоговорКонтрагента;

		Если НЕ ЗначениеЗаполнено(РасшифровкаПлатежа[0].СчетУчетаРасчетовСКонтрагентомБУ) Тогда
			РасшифровкаПлатежа[0].СчетУчетаРасчетовСКонтрагентомБУ = СчетУчетаРасчетовСКонтрагентомБУ;
			РасшифровкаПлатежа[0].СчетУчетаРасчетовСКонтрагентомНУ = СчетУчетаРасчетовСКонтрагентомНУ;
		КонецЕсли;

	Иначе
		ДоговорКонтрагента = Новый(Тип("СправочникСсылка.ДоговорыКонтрагентов"));
	КонецЕсли;
	
	Если НЕ УчитыватьКПН Тогда
		ВидУчетаНУ = Справочники.ВидыУчетаНУ.ПустаяСсылка();
	КонецЕсли; 
		
	СчетаУчетаВДокументах.ЗаполнитьПередЗаписью(ЭтотОбъект, РежимЗаписи);  
	
	Если РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения И ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаПоставщику Тогда  
		
		ЕстьСчетаНаОплату = Ложь;
		
		СчетаНаОплату = РасшифровкаПлатежа.ВыгрузитьКолонку("СчетНаОплату");
		
		Для Каждого СчетНаОплату Из СчетаНаОплату Цикл  
			
			Если СчетНаОплату <> Документы.СчетНаОплатуПоставщика.ПустаяСсылка() Тогда
				ЕстьСчетаНаОплату = Истина;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЕстьСчетаНаОплату Тогда 
			
			ТаблицаРеквизитов = Новый ТаблицаЗначений;
			
			ТаблицаРеквизитов.Колонки.Добавить("Период");
			ТаблицаРеквизитов.Колонки.Добавить("Регистратор");
			ТаблицаРеквизитов.Колонки.Добавить("Организация");
			
			СтрокаТабРеквизитов = ТаблицаРеквизитов.Добавить();
			СтрокаТабРеквизитов.Период      = Дата;
			СтрокаТабРеквизитов.Регистратор = Ссылка;
			СтрокаТабРеквизитов.Организация = Организация;
			
			ТаблицаОплатаСчетов = Документы.РасходныйКассовыйОрдер.ТаблицаОплатаСчетов(ЭтотОбъект);
			
			ТаблицаСтатусовСчетов = СтатусыДокументов.ПодготовитьТаблицуСтатусовОплатыСчетов(
				ТаблицаОплатаСчетов, ТаблицаРеквизитов, Истина);
			
			СтатусыДокументов.СформироватьДвиженияСтатусовДокументов(
				ТаблицаСтатусовСчетов, ТаблицаРеквизитов);		
			
		КонецЕсли;
				
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	НомерЧекаККМ = 0;
	
	ЕстьРасшифровкаПлатежа = Документы.РасходныйКассовыйОрдер.ЕстьРасшифровкаПлатежа(ВидОперации);
	
	Если НЕ ЕстьРасшифровкаПлатежа Тогда 
		Для Каждого СтрокаПлатеж Из РасшифровкаПлатежа Цикл 
			СтрокаПлатеж.СуммаПлатежа = 0; 
			СтрокаПлатеж.СуммаВзаиморасчетов = 0; 
			СтрокаПлатеж.СуммаНДС = 0;
		КонецЦикла;
	КонецЕсли;  
	
	УправлениеДенежнымиСредствамиСервер.ЗаполнитьРеквизитыРасчетногоДокумента(ЭтотОбъект, РасшифровкаПлатежа);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект, Ложь);
	Если РучнаяКорректировка Тогда
		Возврат;
	КонецЕсли;

	ПараметрыПроведения = Документы.РасходныйКассовыйОрдер.ПодготовитьПараметрыПроведения(Ссылка, Отказ);
	
	// Проверка достаточности средств на счете, если у пользователя отсуствует право проведения операций без контроля остатков
	ПроверитьДостаточностьОстатковДС(ПараметрыПроведения.Реквизиты[0], ПараметрыПроведения.ТаблицаКонтрольОстатков, Отказ);
		
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ИНФОРМАЦИОННОЙ БАЗЫ	
	ТаблицаВзаиморасчеты = УправлениеВзаиморасчетамиСервер.ПодготовитьТаблицуВзаиморасчетовПогашениеЗадолженности(
		ПараметрыПроведения.РасшифровкаПлатежа, ПараметрыПроведения.Реквизиты, Отказ);  
		
	// Изменение статуса счетов на оплату 
	
	ГрупповоеПерепроведение = Неопределено;
	Если ЭтотОбъект.ДополнительныеСвойства.Свойство("ГрупповоеПерепроведение") Тогда	
		ГрупповоеПерепроведение = ЭтотОбъект.ДополнительныеСвойства.ГрупповоеПерепроведение;	
	Иначе 	
		ГрупповоеПерепроведение = Ложь;	
	КонецЕсли;
		
	Если Не ГрупповоеПерепроведение Тогда
		ТаблицаСтатусовСчетов = СтатусыДокументов.ПодготовитьТаблицуСтатусовОплатыСчетов(
			ПараметрыПроведения.ОплатаСчетов, ПараметрыПроведения.Реквизиты);
	КонецЕсли;
	
	// ФОРМИРОВАНИЕ ДВИЖЕНИЙ
	
	УправлениеВзаиморасчетамиСервер.СформироватьДвиженияПогашениеЗадолженности(ТаблицаВзаиморасчеты, 
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
			
	УправлениеДенежнымиСредствамиСервер.СформироватьДвиженияПрочееСписание(ПараметрыПроведения.РеквизитыПрочее, 
		Движения, Отказ);
		
	УправлениеДенежнымиСредствамиСервер.СформироватьДвиженияПеречислениеВПодотчет(ПараметрыПроведения.ТаблицаПеречислениеВПодотчет, 
		ПараметрыПроведения.РеквизитыПеречислениеВПодотчет, Движения, Отказ);

	// Переоценка валютных остатков - после формирования проводок всеми другими механизмами
	ТаблицаПереоценка = УчетДоходовРасходов.ПодготовитьТаблицуПереоценкаВалютныхОстатковПоПроводкамДокумента(
		ПараметрыПроведения.Реквизиты, Движения, Отказ);

	УчетДоходовРасходов.СформироватьДвиженияПереоценкаВалютныхОстатков(ТаблицаПереоценка,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
	
	// ЗП
	РасчетЗарплатыСервер.СформироватьДвиженияПеречислениеЗП(ПараметрыПроведения.Реквизиты, ПараметрыПроведения.ТаблицаПеречислениеЗП, Движения, Перечисления.СпособыВыплатыЗарплаты.ЧерезКассу, Отказ);
	
	// ИЛ
	РасчетЗарплатыСервер.СформироватьДвиженияПеречислениеПоИЛ(ПараметрыПроведения.Реквизиты, ПараметрыПроведения.ТаблицаПеречислениеПоИЛ, Движения, Отказ);

	// Расчеты с контрагентами-физлицами
	ОрганизацияИспользуетОбменЗУП31 = ОбменДаннымиСервер.ОрганизацияИспользуетОбменЧерезУниверсальныйФормат(Организация, "ОбменЗУП31БП", Истина);
	Если ВидОперации = Перечисления.ВидыОперацийРКО.РасчетыПоДоходуОтРазовыхВыплатСКонтрагентами И Не ОрганизацияИспользуетОбменЗУП31 Тогда
		РасчетЗарплатыСервер.СформироватьДвиженияРасчетыСКонтрагентамиФизЛицами(ПараметрыПроведения.Реквизиты, Движения, Отказ);
	КонецЕсли;  
	
	СтатусыДокументов.СформироватьДвиженияОплатаСчетов(
	ПараметрыПроведения.ОплатаСчетов, ПараметрыПроведения.Реквизиты, Движения, Отказ);
	
	Если Не ГрупповоеПерепроведение Тогда
		СтатусыДокументов.СформироватьДвиженияСтатусовДокументов(
			ТаблицаСтатусовСчетов, ПараметрыПроведения.Реквизиты);
	КонецЕсли;
		
	ПроцедурыНалоговогоУчета.ОтразитьПостоянныеРазницыВНУ(ПараметрыПроведения.Реквизиты, Движения, Отказ);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура ПроверитьСоответствиеВедомостей(Отказ)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ПоОдномуРаботнику = (ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику);
	
	Если ПоОдномуРаботнику Тогда
		
		Запрос.УстановитьПараметр("ПлатежнаяВедомость", ПлатежнаяВедомость);
		Запрос.УстановитьПараметр("ФизЛицо", Контрагент);
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	0 КАК НомерСтроки,
			|	&ПлатежнаяВедомость КАК Ведомость,
			|	&ФизЛицо КАК ФизЛицо
			|ПОМЕСТИТЬ ВТ_ВедомостиДокумента";
	Иначе 
		
		Запрос.УстановитьПараметр("ВыплатаЗаработнойПлаты", ВыплатаЗаработнойПлаты);
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ВыплатаЗаработнойПлаты.НомерСтроки КАК НомерСтроки,
			|	ВыплатаЗаработнойПлаты.Ведомость КАК Ведомость,
			|	ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка) КАК ФизЛицо
			|ПОМЕСТИТЬ ВТ_ВедомостиДокумента
			|ИЗ
			|	&ВыплатаЗаработнойПлаты КАК ВыплатаЗаработнойПлаты";
	КонецЕсли;
		
	Запрос.Выполнить();
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ВедомостиДокумента.НомерСтроки,
		|	ВедомостиДокумента.Ведомость,
		|	ВедомостиДокумента.ФизЛицо КАК ФизЛицоДокумента,
		|	ЗарплатаКВыплате.Ссылка.Организация КАК Организация,
		|	ВЫБОР  
        |		КОГДА НЕ(СведенияОВыплатах.Ведомость ЕСТЬ NULL)
        |				И ЗарплатаКВыплате.ВыплаченностьЗарплаты  = ЗНАЧЕНИЕ(Перечисление.ВыплаченностьЗарплаты.Выплачено)
        |			ТОГДА СведенияОВыплатах.Регистратор
        |		ИНАЧЕ
        |			NULL
        |	КОНЕЦ КАК КонфликтныйДокумент,
		|	ВЫБОР
		|		КОГДА ЗарплатаКВыплате.ВыплаченностьЗарплаты = ЗНАЧЕНИЕ(Перечисление.ВыплаченностьЗарплаты.НеВыплачено)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК НеВыплаченаЗарплата,
		|	ВЫБОР
		|		КОГДА ЗарплатаКВыплате.Ссылка.СпособВыплаты <> ЗНАЧЕНИЕ(Перечисление.СпособыВыплатыЗарплаты.ЧерезКассу)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК НеСоответствуетСпособВыплаты,
		|	ЗарплатаКВыплате.Ссылка.Представление КАК ПредставлениеВедомости,
		|	СУММА(ВЫБОР
		|			КОГДА ЗарплатаКВыплате.ВыплаченностьЗарплаты = ЗНАЧЕНИЕ(Перечисление.ВыплаченностьЗарплаты.Выплачено)
		|				ТОГДА ЕСТЬNULL(ЗарплатаКВыплате.Сумма, 0) + ЕСТЬNULL(ЗарплатаКВыплате.ДепонированнаяСумма, 0)
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК СуммаПоВедомости
		|ИЗ
		|	ВТ_ВедомостиДокумента КАК ВедомостиДокумента
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплате
		|		ПО ВедомостиДокумента.Ведомость = ЗарплатаКВыплате.Ссылка
		|			И (ВЫБОР
		|				КОГДА ВедомостиДокумента.ФизЛицо <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
		|					ТОГДА ВедомостиДокумента.ФизЛицо = ЗарплатаКВыплате.Физлицо
		|				ИНАЧЕ ИСТИНА
		|			КОНЕЦ)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям КАК СведенияОВыплатах
		|		ПО ВедомостиДокумента.Ведомость = СведенияОВыплатах.Ведомость
		|			И (ВЫБОР
		|				КОГДА ВедомостиДокумента.ФизЛицо <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
		|					ТОГДА ВедомостиДокумента.ФизЛицо = СведенияОВыплатах.Физлицо
		|				ИНАЧЕ ИСТИНА
		|			КОНЕЦ)
		|			И ЗарплатаКВыплате.ФизЛицо = СведенияОВыплатах.ФизЛицо
		|			И (ЗарплатаКВыплате.ВыплаченностьЗарплаты <> ЗНАЧЕНИЕ(Перечисление.ВыплаченностьЗарплаты.НеВыплачено))
		|			И (СведенияОВыплатах.Активность)
		|			И (СведенияОВыплатах.Регистратор <> &Ссылка)
		|ГДЕ
		|	НЕ ЗарплатаКВыплате.Ссылка ЕСТЬ NULL 
		|
		|СГРУППИРОВАТЬ ПО
		|	ВедомостиДокумента.НомерСтроки,
		|	ВедомостиДокумента.Ведомость,
		|	ВедомостиДокумента.ФизЛицо,
		|	СведенияОВыплатах.Регистратор,
		|	СведенияОВыплатах.Ведомость,
		|	ЗарплатаКВыплате.Ссылка.Представление,
		|	ЗарплатаКВыплате.ВыплаченностьЗарплаты,
		|	ВЫБОР
		|		КОГДА ЗарплатаКВыплате.ВыплаченностьЗарплаты = ЗНАЧЕНИЕ(Перечисление.ВыплаченностьЗарплаты.НеВыплачено)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ЗарплатаКВыплате.Ссылка.СпособВыплаты <> ЗНАЧЕНИЕ(Перечисление.СпособыВыплатыЗарплаты.ЧерезКассу)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ,
		|	ЗарплатаКВыплате.Ссылка.Организация
		|ИТОГИ
		|	СУММА(СуммаПоВедомости)
		|ПО
		|	ОБЩИЕ";
	
		
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		ТекстСообщения = НСтр("ru = 'В указанной платежной ведомости нет указанного сотрудника.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "ПлатежнаяВедомость", "Объект", Отказ);
		Возврат;
	КонецЕсли;
	
	ВыборкаОбщаяСумма = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Если ВыборкаОбщаяСумма.Следующий() И ВыборкаОбщаяСумма.СуммаПоВедомости <> СуммаДокумента Тогда
		ТекстСообщения = НСтр("ru = 'Не совпадает сумма документа и сумма по ведомостям на выплату заработной платы'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "ВыплатаЗаработнойПлаты", "Объект", Отказ);
	КонецЕсли;
	
	Выборка = ВыборкаОбщаяСумма.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НачалоСообщения = Выборка.ПредставлениеВедомости + ": ";
		Если ПоОдномуРаботнику Тогда
			Поле = "ПлатежнаяВедомость";
		Иначе 
			Поле = "ВыплатаЗаработнойПлаты" + "[" + Формат(Выборка.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].Ведомость";
		КонецЕсли;

		Если Выборка.НеВыплаченаЗарплата Тогда
			ТекстСообщения = НачалоСообщения + НСтр("ru = 'в ведомости есть строки с невыплаченной заработной платой'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.КонфликтныйДокумент) Тогда
			Если ПоОдномуРаботнику Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1по выбранному сотруднику ведомость уже включена в %2'"), НачалоСообщения, Строка(Выборка.КонфликтныйДокумент));
			Иначе
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1ведомость уже включена в %1'"), НачалоСообщения, Строка(Выборка.КонфликтныйДокумент))
			КонецЕсли;
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Выборка.КонфликтныйДокумент, Поле, "Объект", Отказ);
		КонецЕсли;
		
		Если Выборка.НеСоответствуетСпособВыплаты Тогда   
			ТекстСообщения = НачалоСообщения + НСтр("ru = 'указанная платежная ведомость не предназначена для выплаты ""Через кассу""'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
		КонецЕсли;
		
		Если Выборка.Организация <> Организация Тогда   
			ТекстСообщения = НачалоСообщения + НСтр("ru = 'ведомость оформлена на другую организацию'");
			// Проверяем соответствие организации, но не отказываем в проведении
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект");
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьДостаточностьОстатковДС(Реквизиты, ТаблицаКонтрольОстатков, Отказ) экспорт
	Если НЕ Реквизиты.НеобходимКонтрольОстатковДС Тогда
		Возврат;
	КонецЕсли;
	
	СуммаОстатка = 0;
	Если НЕ ТаблицаКонтрольОстатков = Неопределено И ТаблицаКонтрольОстатков.Количество() > 0 Тогда
		СуммаОстатка = ТаблицаКонтрольОстатков[0].ВалютнаяСуммаОстаток;
	КонецЕсли;	
	
	Если Реквизиты.СуммаДокумента > СуммаОстатка Тогда		
				
		Если ЗначениеЗаполнено(Реквизиты.СтруктурноеПодразделение) Тогда
			 ТекстОшибки = НСтр("ru='На счете %1 структурное подразделение %5 недостаточно средств для проведения операции. Сумма операции %2 %4, остаток счета %3  %4.'")
		Иначе
			 ТекстОшибки = НСтр("ru='На счете %1 недостаточно средств для проведения операции. Сумма операции %2 %4, остаток счета %3  %4.'")
		КонецЕсли;					
				
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, Реквизиты.СчетКасса, Реквизиты.СуммаДокумента, СуммаОстатка, Реквизиты.ВалютаДокумента, Реквизиты.СтруктурноеПодразделение);			
		ОбщегоНазначенияБККлиентСервер.СообщитьОбОшибке(ТекстОшибки, Отказ);
	КонецЕсли;	

КонецПроцедуры

Процедура ПроверитьСоответствиеВедомостейПрочихДоходов(Отказ)
	
	Если ТипЗнч(ПлатежнаяВедомость) <> Тип("ДокументСсылка.ВедомостьПрочихДоходов") Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("ПлатежнаяВедомость", ПлатежнаяВедомость);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВедомостьПрочихДоходовВыплаты.СуммаКВыплате КАК СуммаКВыплате,
		|	ЕСТЬNULL(РасходныйКассовыйОрдер.Ссылка, ЗНАЧЕНИЕ(Документ.РасходныйКассовыйОрдер.ПустаяСсылка)) КАК КонфликтныйДокумент,
		|	ВЫБОР
		|		КОГДА ВедомостьПрочихДоходов.СпособВыплаты <> ЗНАЧЕНИЕ(Перечисление.СпособыВыплатыЗарплаты.ЧерезКассу)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК НеСоответствуетСпособВыплаты,
		|	ВедомостьПрочихДоходов.Организация КАК Организация
		|ИЗ
		|	Документ.ВедомостьПрочихДоходов.Выплаты КАК ВедомостьПрочихДоходовВыплаты
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
		|		ПО РасходныйКассовыйОрдер.ПлатежнаяВедомость = &ПлатежнаяВедомость
		|		И ВедомостьПрочихДоходовВыплаты.Физлицо = РасходныйКассовыйОрдер.Контрагент
		|		И РасходныйКассовыйОрдер.Проведен
		|		И РасходныйКассовыйОрдер.Ссылка <> &Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВедомостьПрочихДоходов КАК ВедомостьПрочихДоходов
		|		ПО ВедомостьПрочихДоходовВыплаты.Ссылка = ВедомостьПрочихДоходов.Ссылка
		|ГДЕ
		|	ВедомостьПрочихДоходовВыплаты.Ссылка = &ПлатежнаяВедомость
		|	И ВедомостьПрочихДоходовВыплаты.Физлицо = &Контрагент
		|
		|ИТОГИ
		|	СУММА(СуммаКВыплате)
		|ПО
		|	ОБЩИЕ";
	
	Результат = Запрос.Выполнить();
	
	ВыборкаОбщаяСумма = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Если ВыборкаОбщаяСумма.Следующий() И ВыборкаОбщаяСумма.СуммаКВыплате <> СуммаДокумента Тогда
		ТекстСообщения = НСтр("ru = 'Не совпадает сумма документа и сумма ведомости прочих доходов по договорам контрагента'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "ПлатежнаяВедомость", "Объект", Отказ);
	КонецЕсли;
	
	Выборка = ВыборкаОбщаяСумма.Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Если ЗначениеЗаполнено(Выборка.КонфликтныйДокумент) Тогда
			ТекстСообщения = НСтр("ru = 'Ведомость по контрагенту уже включена в '") + Строка(Выборка.КонфликтныйДокумент);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Выборка.КонфликтныйДокумент, "ПлатежнаяВедомость", "Объект", Отказ);
		КонецЕсли;
		
		Если Выборка.НеСоответствуетСпособВыплаты Тогда
			ТекстСообщения = НСтр("ru = 'Указанная платежная ведомость не предназначена для выплаты ""Через кассу""'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "ПлатежнаяВедомость", "Объект", Отказ);
		КонецЕсли;
		
		Если Выборка.Организация <> Организация Тогда
			ТекстСообщения = НСтр("ru = 'Ведомость оформлена на другую организацию'");
			// Проверяем соответствие организации, но не отказываем в проведении
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "ПлатежнаяВедомость", "Объект");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецЕсли
