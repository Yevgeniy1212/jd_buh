#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

#Область СчетаУчета

Процедура УстановитьПравилаЗаполненияСчетовУчета(Правила) Экспорт
	
	// Шапка

	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "", "СчетКасса", "НаличныеДеньги");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Касса", "Касса");
	
	//СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "", "СтатьяДвиженияДенежныхСредств", "СтатьиДДС_РозничнаяВыручка");
	
	// выплата подотчетнику
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "", "СчетУчетаРасчетовСКонтрагентомБУ", "Подотчет");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ВыдачаДенежныхСредствПодотчетнику");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СчетУчетаРасчетовСКонтрагентомНУ", "ПодотчетНУ");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ВыдачаДенежныхСредствПодотчетнику");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеПроверкиЗаполнения(Правила, "ПлательщикНалогаНаПрибыль");
	
	// выплата зарплаты
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "", "СчетУчетаРасчетовСКонтрагентомБУ", "Зарплата");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ВыплатаЗаработнойПлатыПоВедомостям");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ВыплатаЗаработнойПлатыРаботнику");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СчетУчетаРасчетовСКонтрагентомНУ", "ЗарплатаНУ");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ВыплатаЗаработнойПлатыПоВедомостям");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ВыплатаЗаработнойПлатыРаботнику");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеПроверкиЗаполнения(Правила, "ПлательщикНалогаНаПрибыль");

	// взнос наличными в банк
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "", "СчетУчетаРасчетовСКонтрагентомБУ", "БезналичныеДеньги");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Касса", "СчетОрганизации");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "СчетОрганизации", "СчетОрганизации");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ВзносНаличнымиВБанк");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СчетУчетаРасчетовСКонтрагентомНУ", "БезналичныеДеньгиНУ");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Касса", "СчетОрганизации");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "СчетОрганизации", "СчетОрганизации");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ВзносНаличнымиВБанк");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеПроверкиЗаполнения(Правила, "ПлательщикНалогаНаПрибыль");
	
	// учет денег в пути при инкассации
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "", "СчетУчетаРасчетовСКонтрагентомБУ", "Инкассация");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ИнкассацияДенежныхСредств");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоДтБУ1", "СубконтоСтатьяДвиженияДенежныхСредств1");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоДтБУ2", "СубконтоСтатьяДвиженияДенежныхСредств2");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоДтБУ3", "СубконтоСтатьяДвиженияДенежныхСредств3");

	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СчетУчетаРасчетовСКонтрагентомНУ", "ИнкассацияНУ");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеПроверкиЗаполнения(Правила, "ПлательщикНалогаНаПрибыль");
	
	СчетаУчетаВДокументах.ДобавитьУровеньПодчиненности(Правила);
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоДтНУ1", "СубконтоСтатьяДвиженияДенежныхСредств1");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Основание", "СубконтоДтБУ1");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоДтНУ2", "СубконтоСтатьяДвиженияДенежныхСредств2");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Основание", "СубконтоДтБУ2");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоДтНУ3", "СубконтоСтатьяДвиженияДенежныхСредств3");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Основание", "СубконтоДтБУ3");

	// возврат покупателю
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "РасшифровкаПлатежа", "СчетУчетаРасчетовСКонтрагентомБУ", "РасчетыСПокупателем");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "ДоговорКонтрагента", "ДоговорКонтрагента");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ВозвратДенежныхСредствПокупателю");
	
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СчетУчетаРасчетовПоАвансам", "РасчетыПоПретензиям");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ВозвратДенежныхСредствПокупателю");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "РасшифровкаПлатежа", "СчетУчетаРасчетовСКонтрагентомНУ", "РасчетыСПокупателемНУ");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "ДоговорКонтрагента", "ДоговорКонтрагента");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ВозвратДенежныхСредствПокупателю");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеПроверкиЗаполнения(Правила, "ПлательщикНалогаНаПрибыль");
	
	// расчеты по займам и кредитам
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "РасшифровкаПлатежа", "СчетУчетаРасчетовСКонтрагентомБУ", "ЗаймыКредитыКВыплате");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "ДоговорКонтрагента", "ДоговорКонтрагента");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ЕстьРасшифровкаПлатежа");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ЕстьРасчетыПоКредитам");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "РасшифровкаПлатежа", "СчетУчетаРасчетовСКонтрагентомНУ", "ЗаймыКредитыКВыплатеНУ");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "ДоговорКонтрагента", "ДоговорКонтрагента");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ЕстьРасшифровкаПлатежа");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеПроверкиЗаполнения(Правила, "ПлательщикНалогаНаПрибыль");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ЕстьРасчетыПоКредитам");
	
	// прочие расчеты
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "РасшифровкаПлатежа", "СчетУчетаРасчетовСКонтрагентомБУ", "РасчетыСПоставщиком");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "ДоговорКонтрагента", "ДоговорКонтрагента");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ЕстьРасшифровкаПлатежа");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "ВозвратДенежныхСредствПокупателю");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "ЕстьРасчетыПоКредитам");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "ЕстьПеречислениеПрочихДоходов");
	
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СчетУчетаРасчетовПоАвансам", "АвансыПоставщику");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ЕстьРасшифровкаПлатежа");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "ВозвратДенежныхСредствПокупателю");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "ЕстьРасчетыПоКредитам");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "РасшифровкаПлатежа", "СчетУчетаРасчетовСКонтрагентомНУ", "РасчетыСПоставщикомНУ");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "ДоговорКонтрагента", "ДоговорКонтрагента");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ЕстьРасшифровкаПлатежа");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "ВозвратДенежныхСредствПокупателю");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеПроверкиЗаполнения(Правила, "ПлательщикНалогаНаПрибыль");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "ЕстьРасчетыПоКредитам");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "ЕстьПеречислениеПрочихДоходов");
	
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "Дата");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "Организация");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "СтруктурноеПодразделениеПолучатель");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "СтруктурноеПодразделениеОтправитель");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "Касса");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "СчетОрганизации");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "Контрагент");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "УчитыватьКПН");
	
	Для Каждого ИмяВидаОперации Из ВидыОперацийСчетаУчета() Цикл
		СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеДополнительныхДанных(Правила, ИмяВидаОперации, "ВидОперации");
	КонецЦикла;
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеДополнительныхДанных(Правила, "ЕстьРасшифровкаПлатежа", "ВидОперации");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеДополнительныхДанных(Правила, "ЕстьРасчетыПоКредитам", "ВидОперации");

	// прочие доходы
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "ДокументОснование");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеДополнительныхДанных(Правила, "ЕстьПеречислениеПрочихДоходов", "ВидОперации");

	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "РасшифровкаПлатежа", "СчетУчетаРасчетовСКонтрагентомБУ", "РасчетыСГПХ");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "РасчетыПоДоходуОтРазовыхВыплатСКонтрагентами");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ЕстьПеречислениеПрочихДоходов");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "РасшифровкаПлатежа", "СчетУчетаРасчетовСКонтрагентомНУ", "РасчетыСГПХНУ");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "РасчетыПоДоходуОтРазовыхВыплатСКонтрагентами");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ЕстьПеречислениеПрочихДоходов");

КонецПроцедуры

Процедура ДополнитьДанныеЗаполненияСчетовУчета(ДанныеЗаполнения) Экспорт
	
	Для каждого ИмяВидаОперации Из ВидыОперацийСчетаУчета() Цикл
		Если ДанныеЗаполнения.Свойство(ИмяВидаОперации) Тогда
			ДанныеЗаполнения[ИмяВидаОперации] = (ДанныеЗаполнения.ВидОперации = Перечисления.ВидыОперацийРКО[ИмяВидаОперации]);
		КонецЕсли;
	КонецЦикла;
	
	Если ДанныеЗаполнения.Свойство("ЕстьРасшифровкаПлатежа") Тогда
		
		ДанныеЗаполнения.ЕстьРасшифровкаПлатежа = ЕстьРасшифровкаПлатежа(ДанныеЗаполнения.ВидОперации);
		
	КонецЕсли;
	
	Если ДанныеЗаполнения.Свойство("ЕстьРасчетыПоКредитам") Тогда
		
		ДанныеЗаполнения.ЕстьРасчетыПоКредитам = ДанныеЗаполнения.ВидОперации = Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИЗаймамСКонтрагентами;
		
	КонецЕсли;

	Если ДанныеЗаполнения.Свойство("ЕстьПеречислениеПрочихДоходов") Тогда
		
		ДанныеЗаполнения.ЕстьПеречислениеПрочихДоходов = ДанныеЗаполнения.ВидОперации = Перечисления.ВидыОперацийРКО.РасчетыПоДоходуОтРазовыхВыплатСКонтрагентами
															И ЗначениеЗаполнено(ДанныеЗаполнения.ДокументОснование) И (Тип("ДокументСсылка.ВедомостьПрочихДоходов") = ТипЗнч(ДанныеЗаполнения.ДокументОснование));
		
	КонецЕсли;

КонецПроцедуры

Функция ВидыОперацийСчетаУчета()
	
	ВидыОпераций = Новый Массив;
	ВидыОпераций.Добавить("ОплатаПоставщику");
	ВидыОпераций.Добавить("ВыдачаДенежныхСредствПодотчетнику");
	ВидыОпераций.Добавить("ВыплатаЗаработнойПлатыПоВедомостям");
	ВидыОпераций.Добавить("ВыплатаЗаработнойПлатыРаботнику");
	ВидыОпераций.Добавить("ВзносНаличнымиВБанк");
	ВидыОпераций.Добавить("ИнкассацияДенежныхСредств");
	ВидыОпераций.Добавить("ВозвратДенежныхСредствПокупателю");
	ВидыОпераций.Добавить("РасчетыПоКредитамИЗаймамСКонтрагентами");
	ВидыОпераций.Добавить("ВыплатаПоИсполнительнымЛистам");
	ВидыОпераций.Добавить("РасчетыПоДоходуОтРазовыхВыплатСКонтрагентами");
	ВидыОпераций.Добавить("ОплатаСтруктурномуПодразделению");
	ВидыОпераций.Добавить("РасходДенежныхСредствПрочее");
	
	Возврат Новый ФиксированныйМассив(ВидыОпераций);
	
КонецФункции

#Область УстаревшиеПроцедурыИФункции

Процедура ЗаполнитьСчетаРасчетовСКонтрагентом(Объект, СтрокаПлатеж) Экспорт
	
	Если НЕ (Объект.ВидОперации = Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИЗаймамСКонтрагентами) Тогда

		СчетаУчета = УправлениеВзаиморасчетамиСервер.ПолучитьСчетаРасчетовСКонтрагентом(Объект.Организация, Объект.Контрагент, СтрокаПлатеж.ДоговорКонтрагента);

		Если Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателю Тогда

			СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентомБУ = СчетаУчета.СчетРасчетовПокупателя;
			СтрокаПлатеж.СчетУчетаРасчетовПоАвансам       = СчетаУчета.СчетВозвратовПокупателя;

		Иначе

			СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентомБУ = СчетаУчета.СчетРасчетов;
			СтрокаПлатеж.СчетУчетаРасчетовПоАвансам       = СчетаУчета.СчетАвансов;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьСчетаКассы(Касса, СчетКасса) Экспорт
	
	Если НЕ Касса.Пустая() Тогда
		СчетУчетаКассы = ПроцедурыБухгалтерскогоУчета.ПолучитьСчетУчетаДенежныхСредств(Касса, СчетКасса.Пустая()).СчетУчетаБУ;
		Если ЗначениеЗаполнено(СчетУчетаКассы) Тогда
			СчетКасса = СчетУчетаКассы;
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция ЕстьРасшифровкаПлатежа(ВидОперации) Экспорт
	
	ЕстьРасшифровка = (ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаПоставщику
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателю
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИЗаймамСКонтрагентами
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.РасчетыПоДоходуОтРазовыхВыплатСКонтрагентами
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаСтруктурномуПодразделению);
	
	Возврат ЕстьРасшифровка;
	
КонецФункции

Функция ОпределитьКодыСчетСубсчет(ДанныеОбъекта, ЕстьРасчетыСКонтрагентами, ЕстьРасчетыПоКредитам, ВыборкаПоРасшифровке = Неопределено) 

	КодыСчетов = Новый Структура("Дебет,Кредит");

	// Определяем код счета кредита
	КассаВВалюте = Ложь;
	Если ДанныеОбъекта.ВалютаДокумента <> ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета() Тогда
		КассаВВалюте = Истина;
	КонецЕсли;

	КодыСчетов.Кредит = ДанныеОбъекта.СчетКасса.Код;

	//Определяем коды счетов кредита. Если указаны и счет расчетов с контрагентом, и счет расчетов по авансам - выводим оба.
	Если ДанныеОбъекта.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям Тогда

		СтрокаДебет = "";
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СУММА(ЗарплатаКВыплатеОрганизацииЗарплата.Сумма) КАК Сумма,
		|	СУММА(ЗарплатаКВыплатеОрганизацииЗарплата.ДепонированнаяСумма) КАК ДепонированнаяСумма
		|ИЗ
		|	Документ.РасходныйКассовыйОрдер.ВыплатаЗаработнойПлаты КАК РасходныйКассовыйОрдерВыплатаЗаработнойПлаты
		|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацииЗарплата
		|		ПО РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.Ведомость = ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка
		|
		|ГДЕ
		|	ЗарплатаКВыплатеОрганизацииЗарплата.ВыплаченностьЗарплаты = &Выплачено И
		|	РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка"	 , ДанныеОбъекта.Ссылка);
		Запрос.УстановитьПараметр("Выплачено", Перечисления.ВыплаченностьЗарплаты.Выплачено);
		
		ВыборкаСумм = Запрос.Выполнить().Выбрать();
		Если ВыборкаСумм.Следующий() Тогда
			Если ЗначениеЗаполнено(ВыборкаСумм.Сумма) Тогда
				СтрокаДебет = СтрокаДебет + ", " + ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПоОплатеТруда.Код;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ВыборкаСумм.ДепонированнаяСумма) Тогда
				СтрокаДебет = СтрокаДебет + ", " + ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПоДепонированнойЗаработнойПлате.Код;
			КонецЕсли;
		КонецЕсли;

		СтрокаДебет = Сред(СтрокаДебет, 2);
	
	ИначеЕсли ДанныеОбъекта.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику Тогда

		СтрокаДебет = "";
		
		Если ЗначениеЗаполнено(ДанныеОбъекта.ПлатежнаяВедомость) Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	СУММА(ЗарплатаКВыплатеОрганизацииЗарплата.Сумма) КАК Сумма,
			|	СУММА(ЗарплатаКВыплатеОрганизацииЗарплата.ДепонированнаяСумма) КАК ДепонированнаяСумма
			|ИЗ
			|	Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацииЗарплата
			|
			|ГДЕ
			|	ЗарплатаКВыплатеОрганизацииЗарплата.ВыплаченностьЗарплаты = &Выплачено И
			|	ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка = &парамПлатВедомость И
			|	ЗарплатаКВыплатеОрганизацииЗарплата.ФизЛицо = &парамФизЛицо
			|";
			
			Запрос.УстановитьПараметр("парамПлатВедомость", ДанныеОбъекта.ПлатежнаяВедомость);
			Запрос.УстановитьПараметр("парамФизЛицо"	  , ДанныеОбъекта.Контрагент);
			Запрос.УстановитьПараметр("Выплачено"		  , Перечисления.ВыплаченностьЗарплаты.Выплачено);
			
			ВыборкаСумм = Запрос.Выполнить().Выбрать();
			Если ВыборкаСумм.Следующий() Тогда
				Если ЗначениеЗаполнено(ВыборкаСумм.Сумма) Тогда
					СтрокаДебет = СтрокаДебет + ", " + ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПоОплатеТруда.Код;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ВыборкаСумм.ДепонированнаяСумма) Тогда
					СтрокаДебет = СтрокаДебет + ", " + ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПоДепонированнойЗаработнойПлате.Код;
				КонецЕсли;
			КонецЕсли;

			СтрокаДебет = Сред(СтрокаДебет, 2);
			
		Иначе
			
			СтрокаДебет = ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПоОплатеТруда.Код;
			
		КонецЕсли;
		
	ИначеЕсли ДанныеОбъекта.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаПоИсполнительнымЛистам Тогда
		
		СтрокаДебет = ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПоИсполнительнымЛистам.Код;

	ИначеЕсли ДанныеОбъекта.ВидОперации = Перечисления.ВидыОперацийРКО.РасходДенежныхСредствПрочее
		ИЛИ ДанныеОбъекта.ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетнику
		ИЛИ ДанныеОбъекта.ВидОперации = Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк 
		ИЛИ ДанныеОбъекта.ВидОперации = Перечисления.ВидыОперацийРКО.ИнкассацияДенежныхСредств Тогда

		СтрокаДебет = ДанныеОбъекта.СчетУчетаРасчетовСКонтрагентомБУ.Код;

	ИначеЕсли ДанныеОбъекта.ВидОперации = Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк Тогда

		СтрокаДебет = ДанныеОбъекта.СчетУчетаРасчетовСКонтрагентомБУ.Код;

	ИначеЕсли НЕ ВыборкаПоРасшифровке = Неопределено Тогда

		СтрокаДебет = "";

		Пока ВыборкаПоРасшифровке.Следующий() Цикл

			Если НЕ ВыборкаПоРасшифровке.СчетУчетаРасчетовСКонтрагентомБУ.Пустая() И Найти(СтрокаДебет, ВыборкаПоРасшифровке.СчетУчетаРасчетовСКонтрагентомБУ.Код) = 0 Тогда
				СтрокаДебет = СтрокаДебет + ", " + ВыборкаПоРасшифровке.СчетУчетаРасчетовСКонтрагентомБУ.Код;
			КонецЕсли;

			Если НЕ ВыборкаПоРасшифровке.СчетУчетаРасчетовПоАвансам.Пустая() И Найти(СтрокаДебет, ВыборкаПоРасшифровке.СчетУчетаРасчетовПоАвансам.Код) = 0 Тогда
				СтрокаДебет = СтрокаДебет + ", " + ВыборкаПоРасшифровке.СчетУчетаРасчетовПоАвансам.Код;
			КонецЕсли;

		КонецЦикла;

		СтрокаДебет = Сред(СтрокаДебет, 2);

	КонецЕсли;

	КодыСчетов.Дебет = СтрокаДебет;

	Возврат КодыСчетов;

КонецФункции

Процедура ЗаполнитьПоДокументуОснованию(Объект, ДокументОснование) Экспорт
	
	/// Заполним реквизиты из стандартного набора по документу основанию.
	ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(Объект, ДокументОснование);
	
	Объект.ВалютаДокумента      = ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	ПараметрыДокументаОснования = ОбщегоНазначенияБК.СформироватьСтруктуруШапкиДокумента(ДокументОснование);
	ВидДокументаОснования       = ДокументОснование.Метаданные().Имя;

	Объект.ДокументОснование = ПараметрыДокументаОснования.Ссылка;
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
		
	//ЗаполнитьСчетаКассы(Объект.Касса, Объект.СчетКасса);
	
	Если ВидДокументаОснования = "ПоступлениеТоваровУслуг"
	 ИЛИ ВидДокументаОснования = "ПоступлениеДопРасходов" 
	 ИЛИ ВидДокументаОснования = "ПоступлениеНМА"
	 ИЛИ ВидДокументаОснования = "ВозвратТоваровОтПокупателя" 
	 ИЛИ ВидДокументаОснования = "ПоступлениеИзПереработки" 
	 ИЛИ ВидДокументаОснования = "СчетНаОплатуПоставщика" Тогда
	 
	 	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.СчетНаОплатуПоставщика") Тогда
		 
			 СчетаУчета = УправлениеВзаиморасчетамиСервер.ПолучитьСчетаРасчетовСКонтрагентом(ДокументОснование.Организация, 
			 ДокументОснование.Контрагент, ДокументОснование.ДоговорКонтрагента);
			 ПараметрыДокументаОснования.Вставить("СчетУчетаРасчетовСКонтрагентом",    СчетаУчета.СчетРасчетов);
			 ПараметрыДокументаОснования.Вставить("СчетУчетаРасчетовПоАвансам",        СчетаУчета.СчетАвансов);		
			 
		КонецЕсли;
	 
	 	Если ВидДокументаОснования = "ВозвратТоваровОтПокупателя"  Тогда
			Объект.ВидОперации  = Перечисления.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателю;
		ИначеЕсли ВидДокументаОснования = "ПоступлениеТоваровУслуг" И ДокументОснование.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ОтСтруктурногоПодразделения Тогда
	        Объект.ВидОперации  = Перечисления.ВидыОперацийРКО.ОплатаСтруктурномуПодразделению;
		Иначе
			Объект.ВидОперации  = Перечисления.ВидыОперацийРКО.ОплатаПоставщику;
		КонецЕсли; 

		Объект.Контрагент	  = ПараметрыДокументаОснования.Контрагент;
		ДоговорКонтрагента	  = ПараметрыДокументаОснования.ДоговорКонтрагента;
		ВидРасчетовПоДоговору = УправлениеВзаиморасчетамиСервер.ОпределениеВидаРасчетовПоПараметрамДоговора(ДоговорКонтрагента, ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
		
		Если ВидРасчетовПоДоговору = Перечисления.ВидыРасчетовПоДоговорам.РасчетыВИностраннойВалюте Тогда
			Объект.ВалютаДокумента = ПараметрыДокументаОснования.ВалютаВзаиморасчетов;
		КонецЕсли;
		
		СтруктураКурсаВзаиморасчетов = ОбщегоНазначенияБК.ПолучитьКурсВалюты(ДоговорКонтрагента.ВалютаВзаиморасчетов, Объект.Дата);
		
		ТаблицаПлатежей = Объект.РасшифровкаПлатежа.Выгрузить();
		
		СуммаДокументаОснования = УчетНДСИАкциза.ПолучитьСуммуДокументаСНДСВРазрезеСтавокНДС(ДокументОснование);
		СуммаДокументаОснования.Колонки.Сумма.Имя = "СуммаПлатежа";
		
		Если ВидДокументаОснования = "ПоступлениеДопРасходов" Тогда
			
			Если НЕ (ПараметрыДокументаОснования.Сумма = 0 И ПараметрыДокументаОснования.СуммаНДС = 0) Тогда
				
				Если СуммаДокументаОснования.Количество() = 0 Тогда
					СтрокаТаблицыСумм = СуммаДокументаОснования.Добавить();
				Иначе
					СтрокаТаблицыСумм = СуммаДокументаОснования[0];
				КонецЕсли;
				
				СтрокаТаблицыСумм.СуммаПлатежа	= СтрокаТаблицыСумм.СуммаПлатежа + ПараметрыДокументаОснования.Сумма;
				СтрокаТаблицыСумм.СуммаНДС		= СтрокаТаблицыСумм.СуммаНДС + ПараметрыДокументаОснования.СуммаНДС;
				
				Если НЕ ПараметрыДокументаОснования.СуммаВключаетНДС Тогда
					СтрокаТаблицыСумм.СуммаПлатежа = СтрокаТаблицыСумм.СуммаПлатежа + ПараметрыДокументаОснования.СуммаНДС;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
				
		ОбщегоНазначенияБКВызовСервера.ЗагрузитьВТаблицуЗначений(СуммаДокументаОснования, ТаблицаПлатежей);
		
		Если ТаблицаПлатежей.Количество() = 0 тогда
			ТаблицаПлатежей.Добавить();
		КонецЕсли;
		
		ТаблицаПлатежей.ЗаполнитьЗначения(ДоговорКонтрагента, "ДоговорКонтрагента");
		ТаблицаПлатежей.ЗаполнитьЗначения(СтруктураКурсаВзаиморасчетов.Курс, "КурсВзаиморасчетов");
		ТаблицаПлатежей.ЗаполнитьЗначения(СтруктураКурсаВзаиморасчетов.Кратность, "КратностьВзаиморасчетов");
		
		Если ПараметрыДокументаОснования.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам Тогда
			ТаблицаПлатежей.ЗаполнитьЗначения(ДокументОснование, "Сделка");
		КонецЕсли;

		ТаблицаПлатежей.ЗагрузитьКолонку(ТаблицаПлатежей.ВыгрузитьКолонку("СуммаПлатежа"),"СуммаВзаиморасчетов");

		Для Каждого СтрокаПлатеж Из ТаблицаПлатежей Цикл
			УправлениеДенежнымиСредствамиКлиентСервер.ПроверкаКурсовВалют(СтрокаПлатеж);
		КонецЦикла; 

		Если ВидДокументаОснования = "ВозвратТоваровОтПокупателя" Тогда
			ТаблицаПлатежей.ЗаполнитьЗначения(ПараметрыДокументаОснования.СчетУчетаРасчетовСКонтрагентом, "СчетУчетаРасчетовСКонтрагентомБУ") ;			
			ТаблицаПлатежей.ЗаполнитьЗначения(ПараметрыДокументаОснования.СчетУчетаРасчетовПоВозвратам, "СчетУчетаРасчетовПоАвансам") ;        			
		Иначе
			ТаблицаПлатежей.ЗаполнитьЗначения(ПараметрыДокументаОснования.СчетУчетаРасчетовСКонтрагентом, "СчетУчетаРасчетовСКонтрагентомБУ") ;			
			ТаблицаПлатежей.ЗаполнитьЗначения(ПараметрыДокументаОснования.СчетУчетаРасчетовПоАвансам, "СчетУчетаРасчетовПоАвансам") ;        			
		КонецЕсли;  
				
		//Для заполнения поля СчетНаОплату в таблице расшифровки
		Если ВидДокументаОснования = "СчетНаОплатуПоставщика" Тогда
			ТаблицаПлатежей.ЗаполнитьЗначения(ДокументОснование, "СчетНаОплату");
		ИначеЕсли ВидДокументаОснования  = "ПоступлениеТоваровУслуг" Тогда
			СчетНаОплатуПоставщикаПТУ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование, "СчетНаОплатуПоставщика");
			Если ЗначениеЗаполнено(СчетНаОплатуПоставщикаПТУ) Тогда 
				ТаблицаПлатежей.ЗаполнитьЗначения(СчетНаОплатуПоставщикаПТУ, "СчетНаОплату");
			КонецЕсли;
		КонецЕсли;
		
		Объект.РасшифровкаПлатежа.Загрузить(ТаблицаПлатежей);
		Объект.СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа");
		СтрокаПлатеж   = Объект.РасшифровкаПлатежа[0];
		
	ИначеЕсли ВидДокументаОснования = "РасчетНалоговПриПоступленииАктивовУслуг" Тогда
	
		Объект.ВидОперации		  = Перечисления.ВидыОперацийРКО.РасчетыПоДоходуОтРазовыхВыплатСКонтрагентами;
		Объект.Контрагент		  = ПараметрыДокументаОснования.Контрагент;
		ДоговорКонтрагента = ПараметрыДокументаОснования.ДоговорКонтрагента;
		Объект.ВалютаДокумента    = ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
		
		ТаблицаПлатежей = Объект.РасшифровкаПлатежа.Выгрузить();
		ТаблицаПлатежей.Добавить();
		
		СуммаОПВ = ?(ДокументОснование.УчитыватьОПВ, ДокументОснование.ИсчисленныйОПВ.Итог("Взнос"), 0);
		СуммаИПН = ?(ДокументОснование.УчитыватьИПН, ДокументОснование.ИсчисленныйИПН.Итог("Налог"), 0);
		СуммаВОСМС = ?(ДокументОснование.УчитыватьВОСМС, ДокументОснование.ИсчисленныеВОСМС.Итог("Взнос"), 0);
		СуммаСО = ?(ДокументОснование.УчитыватьСО И ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.НаСчетеВедетсяУчетПоКонтрагентам(ДокументОснование.СчетЗатрат), ДокументОснование.ИсчисленныеСО.Итог("Отчисление"), 0);
		ТаблицаПлатежей[0].СуммаПлатежа = ПараметрыДокументаОснования.СуммаДокумента - СуммаОПВ - СуммаИПН - СуммаВОСМС - СуммаСО;
		ТаблицаПлатежей[0].СуммаВзаиморасчетов = ТаблицаПлатежей[0].СуммаПлатежа;
		
		ТаблицаПлатежей.ЗаполнитьЗначения(ДоговорКонтрагента, "ДоговорКонтрагента");
		ТаблицаПлатежей.ЗаполнитьЗначения(1, "КурсВзаиморасчетов");
		ТаблицаПлатежей.ЗаполнитьЗначения(1, "КратностьВзаиморасчетов");
		
		Если ПараметрыДокументаОснования.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам Тогда
			ТаблицаПлатежей.ЗаполнитьЗначения(ДокументОснование, "Сделка");
		КонецЕсли;

		
		ТаблицаПлатежей.ЗаполнитьЗначения(ПараметрыДокументаОснования.СчетУчетаРасчетовСКонтрагентом, "СчетУчетаРасчетовСКонтрагентомБУ") ;			
		ТаблицаПлатежей.ЗаполнитьЗначения(ПараметрыДокументаОснования.СчетУчетаРасчетовПоАвансам, "СчетУчетаРасчетовПоАвансам") ;        			
				
		Объект.РасшифровкаПлатежа.Загрузить(ТаблицаПлатежей);
		Объект.СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа");
		СтрокаПлатеж = Объект.РасшифровкаПлатежа[0];
		
		// Переназначение документа основания
		Объект.ДокументОснование = ПараметрыДокументаОснования.ДокументОснование;
		
	ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ЗарплатаКВыплатеОрганизаций") Тогда

		ЗаполнитьПоЗарплатеКВыплатеОрганизацииРегл(Объект, ДокументОснование);

	ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ИЛПеречислениеПолучателям") Тогда

		ЗаполнитьПоИЛПеречислениеПолучателям(Объект, ДокументОснование);

	ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") Тогда

		ЗаполнитьПоПКО(Объект, ДокументОснование);
	
	ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ВедомостьПрочихДоходов") Тогда

		ЗаполнитьПоВедомостиПрочихДоходов(Объект, ДокументОснование);

	КонецЕсли;
	
	ЕстьРасчетыСКонтрагентами = УправлениеДенежнымиСредствамиСервер.ЕстьРасчетыСКонтрагентами(Объект.ВидОперации);
	ЕстьРасчетыПоКредитам     = УправлениеДенежнымиСредствамиСервер.ЕстьРасчетыПоКредитам(Объект.ВидОперации);
	
	Объект.Ответственный = Пользователи.ТекущийПользователь();

	Если Объект.Выдать = "" И ЗначениеЗаполнено(Объект.Контрагент) Тогда

		Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда

			Объект.Выдать = ?(Объект.Контрагент.НаименованиеПолное="", Объект.Контрагент.Наименование, Объект.Контрагент.НаименованиеПолное);

		ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетнику Тогда

			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	ФИОФизЛицСрезПоследних.Фамилия КАК Фамилия,
			|	ФИОФизЛицСрезПоследних.Имя КАК Имя,
			|	ФИОФизЛицСрезПоследних.Отчество КАК Отчество
			|ИЗ
			|	РегистрСведений.ФИОФизЛиц.СрезПоследних(&Дата, ФизЛицо=&ФизЛицо) КАК ФИОФизЛицСрезПоследних";
			Запрос.УстановитьПараметр("Дата",    Объект.Дата);
			Запрос.УстановитьПараметр("ФизЛицо", Объект.Контрагент);

			Результат = Запрос.Выполнить().Выбрать();
			
			Если Результат.Следующий() Тогда

				Объект.Выдать = ?(НЕ ПустаяСтрока(Результат.Фамилия), 
				Результат.Фамилия + ?(НЕ ПустаяСтрока(Результат.Имя)," " + Лев(Результат.Имя,1) + "." + ?(НЕ ПустаяСтрока(Результат.Отчество),Лев(Результат.Отчество,1)+".", ""), ""),"");

			КонецЕсли;

		КонецЕсли;
		
	КонецЕсли;

	Если Объект.ПоДокументу = "" И ЗначениеЗаполнено(Объект.Контрагент) 
	   И (Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетнику
	   		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРКО.РасчетыПоДоходуОтРазовыхВыплатСКонтрагентами) Тогда
		
		Если Объект.ВидОперации = Перечисления.ВидыОперацийРКО.РасчетыПоДоходуОтРазовыхВыплатСКонтрагентами Тогда
		  	Объект.ПоДокументу = ОбщегоНазначенияБКВызовСервера.ПолучитьПаспортныеДанныеСтрокой(Объект.Контрагент.ФизЛицо);
		Иначе
			Объект.ПоДокументу = ОбщегоНазначенияБКВызовСервера.ПолучитьПаспортныеДанныеСтрокой(Объект.Контрагент);
		КонецЕсли;
		
	КонецЕсли;
	
	СчетаУчетаВДокументах.ЗаполнитьПередОтображениемПользователю(Объект);

КонецПроцедуры

// Процедура производит заполнение документа по данным платежной ведомости
//
Процедура ЗаполнитьПоЗарплатеКВыплатеОрганизацииРегл(Объект, ДокументОснование)

	Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям;
	Объект.Организация = ДокументОснование.Организация;

	// Определим сумму выплаченной заработной платы
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	Запрос.УстановитьПараметр("Регистратор", Объект.Ссылка);
	Запрос.УстановитьПараметр("ВыплаченностьЗарплаты", Перечисления.ВыплаченностьЗарплаты.Выплачено);
	Запрос.УстановитьПараметр("ЧерезКассу", Перечисления.СпособыВыплатыЗарплаты.ЧерезКассу);
	
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	СУММА(ЗарплатаКВыплатеЗарплата.Сумма+ЗарплатаКВыплатеЗарплата.ДепонированнаяСумма) КАК Сумма,
		|	КОЛИЧЕСТВО(*) КАК КоличествоСтрок,
		|	МАКСИМУМ(ЗарплатаКВыплатеЗарплата.ФизЛицо) КАК ФизЛицо
		|ИЗ
		|	Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеЗарплата
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям КАК РанееВыплаченныеСуммы
		|		ПО ЗарплатаКВыплатеЗарплата.ФизЛицо = РанееВыплаченныеСуммы.ФизЛицо
		|		   И ЗарплатаКВыплатеЗарплата.Ссылка = РанееВыплаченныеСуммы.Ведомость
		|		   И РанееВыплаченныеСуммы.Регистратор <> &Регистратор
		|
		|ГДЕ
		|	ЗарплатаКВыплатеЗарплата.Ссылка = &Ссылка И
		|	ЗарплатаКВыплатеЗарплата.ВыплаченностьЗарплаты = &ВыплаченностьЗарплаты И
		|	ЗарплатаКВыплатеЗарплата.Ссылка.СпособВыплаты = &ЧерезКассу И
		|	РанееВыплаченныеСуммы.ФизЛицо ЕСТЬ NULL
		|";
		
	РезультатЗапроса = Запрос.Выполнить().Выбрать();

	Если РезультатЗапроса.Следующий() Тогда
		
		Если РезультатЗапроса.КоличествоСтрок > 0 Тогда
			
			СтрокаВедомость = Объект.ВыплатаЗаработнойПлаты.Добавить();
			СтрокаВедомость.Ведомость = ДокументОснование;
			СтрокаВедомость.СуммаКВыплате = РезультатЗапроса.Сумма;

			Объект.СуммаДокумента = РезультатЗапроса.Сумма;

			Если РезультатЗапроса.КоличествоСтрок = 1 Тогда
				ДанныеОФизЛице = ПроцедурыУправленияПерсоналомВызовСервера.ДанныеФизЛица(Объект.Организация, РезультатЗапроса.ФизЛицо, Объект.Дата);
				ФамилияИмяОтчество = ""+ДанныеОФизЛице.Фамилия +" "+ ДанныеОФизЛице.Имя +" "+ ДанныеОФизЛице.Отчество;
				СтруктураФИО = Новый Структура;
				СтруктураФИО.Вставить("Фамилия",  ДанныеОФизЛице.Фамилия); 
				СтруктураФИО.Вставить("Имя", 	  ДанныеОФизЛице.Имя);
				СтруктураФИО.Вставить("Отчество", ДанныеОФизЛице.Отчество);	
				
				Объект.Выдать = СклонениеПредставленийОбъектов.ПросклонятьПредставление(ФамилияИмяОтчество, 3);

				Объект.ПоДокументу = ОбщегоНазначенияБКВызовСервера.ПолучитьПаспортныеДанныеСтрокой(РезультатЗапроса.ФизЛицо);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;

	СтрокаПлатеж = Объект.РасшифровкаПлатежа.Добавить();

	СтрокаПлатеж.СуммаПлатежа = Объект.СуммаДокумента;

КонецПроцедуры

// Процедура производит заполнение документа по данным документа "ИЛПеречислениеПолучателям"
//
Процедура ЗаполнитьПоИЛПеречислениеПолучателям(Объект, ДокументОснование)

	Объект.ВидОперации	   = Перечисления.ВидыОперацийРКО.ВыплатаПоИсполнительнымЛистам;
	Объект.СуммаДокумента  = 0;
	Объект.ВалютаДокумента = ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	// Определим сумму, выплачиваемую по исполнительным листам
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	МАКСИМУМ(ИсполнительныеЛисты.Ссылка.Организация) КАК Организация,
	|	МАКСИМУМ(ИсполнительныеЛисты.ДокументОснование) КАК ДокументОснование,
	|	МАКСИМУМ(ИсполнительныеЛисты.Получатель) КАК Получатель,
	|	СУММА(ИсполнительныеЛисты.СуммаВзаиморасчетов) КАК Сумма,
	|	КОЛИЧЕСТВО(ИсполнительныеЛисты.НомерСтроки) КАК КоличествоСтрок
	|ИЗ
	|	Документ.ИЛПеречислениеПолучателям.ИсполнительныеЛисты КАК ИсполнительныеЛисты
	|ГДЕ
	|	ИсполнительныеЛисты.Ссылка = &Ссылка И
	|	ИсполнительныеЛисты.Ссылка.СпособПеречисления = &ЧерезКассу
	|";

	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	Запрос.УстановитьПараметр("ЧерезКассу", Перечисления.СпособыПеречисленияПоИсполнительномуЛисту.ЧерезКассу);

	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	
	Если РезультатЗапроса.Следующий() Тогда
		
		Если РезультатЗапроса.КоличествоСтрок > 0 Тогда
			
			СтрокаДокумент					= Объект.ВыплатаПоИсполнительнымЛистам.Добавить();
			СтрокаДокумент.Документ			= ДокументОснование;	
			СтрокаДокумент.СуммаКВыплате 	= РезультатЗапроса.Сумма;
			Объект.СуммаДокумента 			= РезультатЗапроса.Сумма;
			Объект.Организация				= РезультатЗапроса.Организация;
			
			Если РезультатЗапроса.КоличествоСтрок = 1 Тогда
				Объект.Выдать 	 = РезультатЗапроса.Получатель.НаименованиеПолное;
				Объект.Основание = РезультатЗапроса.ДокументОснование.ВидИсполнительногоДокумента + " " + РезультатЗапроса.ДокументОснование.РеквизитыИсполнительногоДокумента;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	СтрокаПлатеж = Объект.РасшифровкаПлатежа.Добавить();

	СтрокаПлатеж.СуммаПлатежа = Объект.СуммаДокумента;
	
КонецПроцедуры

// Заполняет документ на основании приходного кассового ордера
//
Процедура ЗаполнитьПоПКО(Объект, ДокументОснование)

	Если ДокументОснование.ВидОперации = Перечисления.ВидыОперацийПКО.ОплатаПокупателя Тогда

		СтруктураКурсаОснования = ОбщегоНазначенияБК.ПолучитьКурсВалюты(ДокументОснование.ВалютаДокумента, ДокументОснование.Дата);
		КурсОснования      		= СтруктураКурсаОснования.Курс;
		КратностьОснования 		= СтруктураКурсаОснования.Кратность;
		Объект.ВалютаДокумента  = ДокументОснование.ВалютаДокумента;
		
		Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателю;
		Объект.Контрагент  = ДокументОснование.Контрагент;

		Для Каждого СтрокаОснование Из ДокументОснование.РасшифровкаПлатежа Цикл

			СтрокаПлатеж = Объект.РасшифровкаПлатежа.Добавить();

			СтрокаПлатеж.ДоговорКонтрагента      = СтрокаОснование.ДоговорКонтрагента;
			СтруктураКурсаВзаиморасчетов         = ОбщегоНазначенияБК.ПолучитьКурсВалюты(СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, Объект.Дата);
			СтрокаПлатеж.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
			СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;

			СтрокаПлатеж.СуммаПлатежа = СтрокаОснование.СуммаПлатежа;

			Если НЕ ЗначениеЗаполнено(СтрокаОснование.Сделка) И СтрокаОснование.ДоговорКонтрагента.ВедениеВзаиморасчетов = 
				Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам Тогда
				СтрокаПлатеж.Сделка = ДокументОснование;
			Иначе
				СтрокаПлатеж.Сделка = СтрокаОснование.Сделка;
			КонецЕсли;
			
			СтрокаПлатеж.СтавкаНДС = СтрокаОснование.СтавкаНДС;
			СтрокаПлатеж.СуммаНДС  = СтрокаОснование.СуммаНДС;

			//СчетаУчета = УправлениеВзаиморасчетамиСервер.ПолучитьСчетаРасчетовСКонтрагентом(Объект.Организация, Объект.Контрагент, СтрокаПлатеж.ДоговорКонтрагента);
			//
			//СтрокаПлатеж.СчетУчетаРасчетовПоАвансам        = СчетаУчета.СчетВозвратовПокупателя;
			//СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентомБУ  = СтрокаОснование.СчетУчетаРасчетовСКонтрагентомБУ;			
			
		КонецЦикла;

		Если ТипЗнч(Объект) = Тип("ДанныеФормыСтруктура") Тогда
			ДокументОбъект = ДанныеФормыВЗначение(Объект, Тип("ДокументОбъект.РасходныйКассовыйОрдер"));
			УправлениеДенежнымиСредствамиСервер.ЗаполнитьРеквизитыРасчетногоДокумента(ДокументОбъект, ДокументОбъект.РасшифровкаПлатежа);
			ЗначениеВДанныеФормы(ДокументОбъект, Объект); 
		Иначе
			УправлениеДенежнымиСредствамиСервер.ЗаполнитьРеквизитыРасчетногоДокумента(Объект, Объект.РасшифровкаПлатежа);
		КонецЕсли;
		
		СтруктураКурсаДокумента = ОбщегоНазначенияБК.ПолучитьКурсВалюты(Объект.ВалютаДокумента, Объект.Дата);
		КурсДокумента           = СтруктураКурсаДокумента.Курс;
		КратностьДокумента      = СтруктураКурсаДокумента.Кратность;
		
		Для Индекс = 0 По ДокументОснование.РасшифровкаПлатежа.Количество()-1 Цикл

			СтрокаПлатеж    = Объект.РасшифровкаПлатежа[Индекс];
			СтрокаОснование = ДокументОснование.РасшифровкаПлатежа[Индекс];

			Если (ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента))
			    И СтрокаПлатеж.ДоговорКонтрагента = СтрокаОснование.ДоговорКонтрагента Тогда // Остался договор из основания

				СтрокаПлатеж.СуммаВзаиморасчетов = ОбщегоНазначенияБККлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаОснование.СуммаПлатежа, 
													ДокументОснование.ВалютаДокумента, 
													СтрокаОснование.ДоговорКонтрагента.ВалютаВзаиморасчетов,
													КурсОснования, СтрокаОснование.КурсВзаиморасчетов, 
													КратностьОснования, СтрокаОснование.КратностьВзаиморасчетов);

				СтрокаПлатеж.СуммаПлатежа     = ОбщегоНазначенияБККлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаВзаиморасчетов, 
													СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов,
													Объект.ВалютаДокумента,
													СтрокаПлатеж.КурсВзаиморасчетов, КурсДокумента, 
													СтрокаПлатеж.КратностьВзаиморасчетов,КратностьДокумента);

			Иначе

				Если НЕ ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов) Тогда

					СтрокаПлатеж.СуммаВзаиморасчетов = СтрокаПлатеж.СуммаПлатежа;
					СтрокаПлатеж.КурсВзаиморасчетов = 1;
					СтрокаПлатеж.КратностьВзаиморасчетов = 1;

				Иначе

					СтрокаПлатеж.СуммаВзаиморасчетов = ОбщегоНазначенияБККлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаПлатежа, 
					Объект.ВалютаДокумента, 
					СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов,
					КурсДокумента, СтрокаПлатеж.КурсВзаиморасчетов, 
					КратностьДокумента, СтрокаПлатеж.КратностьВзаиморасчетов);

				КонецЕсли;

			КонецЕсли;
			
			УправлениеДенежнымиСредствамиКлиентСервер.ПересчитатьСуммуНДС(СтрокаПлатеж);
			
		КонецЦикла;

		Объект.СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа");

	Иначе

		Объект.ВидОперации = Перечисления.ВидыОперацийРКО.РасходДенежныхСредствПрочее;
		// Документ не вводится на основании ПКО с другими видами операций
		Возврат;

	КонецЕсли;
	
КонецПроцедуры

// Процедура производит заполнение документа по данным ведомости прочих доходов
//
Процедура ЗаполнитьПоВедомостиПрочихДоходов(Объект, ДокументОснование)

	Объект.ВидОперации = Перечисления.ВидыОперацийРКО.РасчетыПоДоходуОтРазовыхВыплатСКонтрагентами;
	Объект.Организация = ДокументОснование.Организация;
	Объект.ПлатежнаяВедомость = ДокументОснование;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	Запрос.УстановитьПараметр("ЧерезКассу", Перечисления.СпособыВыплатыЗарплаты.ЧерезКассу);
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВедомостьПрочихДоходовВыплаты.Физлицо КАК Физлицо,
	               |	ВедомостьПрочихДоходовВыплаты.ДоговорКонтрагента КАК ДоговорКонтрагента,
	               |	ВедомостьПрочихДоходовВыплаты.СуммаКВыплате КАК СуммаКВыплате,
	               |	РасходныйКассовыйОрдер.Ссылка КАК РасходныйКассовыйОрдер
	               |ПОМЕСТИТЬ ВТ_ВыплатыПоВедомости
	               |ИЗ
	               |	Документ.ВедомостьПрочихДоходов.Выплаты КАК ВедомостьПрочихДоходовВыплаты
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВедомостьПрочихДоходов КАК ВедомостьПрочихДоходов
	               |		ПО ВедомостьПрочихДоходовВыплаты.Ссылка = ВедомостьПрочихДоходов.Ссылка
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
	               |		ПО (ВедомостьПрочихДоходов.Ссылка = РасходныйКассовыйОрдер.ПлатежнаяВедомость)
	               |			И (ВедомостьПрочихДоходовВыплаты.ФизЛицо = РасходныйКассовыйОрдер.Контрагент)
	               |			И (РасходныйКассовыйОрдер.Проведен)
	               |ГДЕ
	               |	ВедомостьПрочихДоходовВыплаты.Ссылка = &Ссылка
	               |	И ВедомостьПрочихДоходов.СпособВыплаты = &ЧерезКассу
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	               |	ВТ_ВыплатыПоВедомости.Физлицо КАК Физлицо,
	               |	ВТ_ВыплатыПоВедомости.ДоговорКонтрагента КАК ДоговорКонтрагента,
	               |	ВТ_ВыплатыПоВедомости.СуммаКВыплате КАК СуммаКВыплате
	               |ИЗ
	               |	ВТ_ВыплатыПоВедомости КАК ВТ_ВыплатыПоВедомости
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РасходныйКассовыйОрдер.РасшифровкаПлатежа КАК РасходныйКассовыйОрдерРасшифровкаПлатежа
	               |		ПО ВТ_ВыплатыПоВедомости.РасходныйКассовыйОрдер = РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка
	               |			И ВТ_ВыплатыПоВедомости.ДоговорКонтрагента = РасходныйКассовыйОрдерРасшифровкаПлатежа.ДоговорКонтрагента
	               |ГДЕ
	               |	РасходныйКассовыйОрдерРасшифровкаПлатежа.ДоговорКонтрагента ЕСТЬ NULL";
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();

	Пока РезультатЗапроса.Следующий() Цикл
		
		Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
			Объект.Контрагент = РезультатЗапроса.Физлицо;
		ИначеЕсли Объект.Контрагент <> РезультатЗапроса.Физлицо Тогда
			Прервать;
		КонецЕсли;
		СтрокаВедомость = Объект.РасшифровкаПлатежа.Добавить();
		СтрокаВедомость.ДоговорКонтрагента = РезультатЗапроса.ДоговорКонтрагента;
		СтрокаВедомость.СуммаПлатежа = РезультатЗапроса.СуммаКВыплате;
		СтрокаВедомость.СуммаВзаиморасчетов = РезультатЗапроса.СуммаКВыплате;
		СтрокаВедомость.КурсВзаиморасчетов = 1;
		СтрокаВедомость.КратностьВзаиморасчетов = 1;
		
	КонецЦикла;
	
	Объект.СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа");

КонецПроцедуры

// Подставляет в реквизиты документа реквизиты указанного физлица
// 
Процедура ПодставитьРеквизитыФизЛица(ФизЛицо, Объект) Экспорт

	ДанныеОФизЛице = ПроцедурыУправленияПерсоналомВызовСервера.ДанныеФизЛица(Объект.Организация, ФизЛицо, Объект.Дата);
	ФамилияИмяОтчество = ""+ДанныеОФизЛице.Фамилия +" "+ ДанныеОФизЛице.Имя +" "+ ДанныеОФизЛице.Отчество;

	СтруктураФИО = Новый Структура;
	СтруктураФИО.Вставить("Фамилия",ДанныеОФизЛице.Фамилия); 
	СтруктураФИО.Вставить("Имя",ДанныеОФизЛице.Имя);
	СтруктураФИО.Вставить("Отчество",ДанныеОФизЛице.Отчество);	
	
	Объект.Выдать = СклонениеПредставленийОбъектов.ПросклонятьПредставление(ФамилияИмяОтчество, 3);

	Объект.ПоДокументу = ОбщегоНазначенияБКВызовСервера.ПолучитьПаспортныеДанныеСтрокой(ФизЛицо);
	
КонецПроцедуры // ПодставитьРеквизитыФизЛица

// СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов

// См. ЗапретРедактированияРеквизитовОбъектовПереопределяемый.ПриОпределенииОбъектовСЗаблокированнымиРеквизитами.
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт
	
	БлокируемыеРеквизиты = Новый Массив;
	
	Если ОбщегоНазначенияБККлиентСервер.ЭтоПростаяВерсияКонфигурации() Тогда
		БлокируемыеРеквизиты.Добавить("Дата");
		БлокируемыеРеквизиты.Добавить("Номер");
		БлокируемыеРеквизиты.Добавить("ВалютаДокумента");
		БлокируемыеРеквизиты.Добавить("ВидОперации");
		БлокируемыеРеквизиты.Добавить("Организация; СтруктурноеПодразделениеОрганизация,СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизацияОтправитель,СтруктурноеПодразделениеОрганизацияПолучатель");
		БлокируемыеРеквизиты.Добавить("СуммаДокумента");
		БлокируемыеРеквизиты.Добавить("Контрагент");
		БлокируемыеРеквизиты.Добавить("Касса");
		БлокируемыеРеквизиты.Добавить("ПлатежнаяВедомость");
		БлокируемыеРеквизиты.Добавить("ДокументОснование; ДокументОснование"); //сделано специально для формы Дполнительно	
		БлокируемыеРеквизиты.Добавить("СтруктурноеПодразделениеПолучатель");
		БлокируемыеРеквизиты.Добавить("СтруктурноеПодразделениеОтправитель");
		БлокируемыеРеквизиты.Добавить("СчетОрганизации");
		
		// таб. часть Расшифровка платежа
		БлокируемыеРеквизиты.Добавить("РасшифровкаПлатежа");
		БлокируемыеРеквизиты.Добавить("РасшифровкаПлатежа.Контрагент; РасшифровкаПлатежаКонтрагент");
		БлокируемыеРеквизиты.Добавить("РасшифровкаПлатежа.ДоговорКонтрагента; РасшифровкаПлатежаДоговорКонтрагента");
		БлокируемыеРеквизиты.Добавить("РасшифровкаПлатежа.Сделка; РасшифровкаПлатежаСделка");
		БлокируемыеРеквизиты.Добавить("РасшифровкаПлатежа.СуммаПлатежа; РасшифровкаПлатежаСуммаПлатежа");
		БлокируемыеРеквизиты.Добавить("РасшифровкаПлатежа.СуммаНДС; РасшифровкаПлатежаСуммаНДС");
		БлокируемыеРеквизиты.Добавить("РасшифровкаПлатежа.СтавкаНДС; РасшифровкаПлатежаСтавкаНДС");
		БлокируемыеРеквизиты.Добавить("РасшифровкаПлатежа.КратностьВзаиморасчетов; РасшифровкаПлатежаКратностьВзаиморасчетов");
		БлокируемыеРеквизиты.Добавить("РасшифровкаПлатежа.КурсВзаиморасчетов; РасшифровкаПлатежаКурсВзаиморасчетов");
		БлокируемыеРеквизиты.Добавить("РасшифровкаПлатежа.СуммаВзаиморасчетов; РасшифровкаПлатежаСуммаВзаиморасчетов");
		
		// таб. часть ВыдачаВПодотчет
		БлокируемыеРеквизиты.Добавить("ВыдачаВПодотчет.СуммаПлатежа; ВыдачаВПодотчетСуммаПлатежа");
		
		// таб. часть ВыплатаПоИсполнительнымЛистам
		БлокируемыеРеквизиты.Добавить("ВыплатаПоИсполнительнымЛистам.СуммаКВыплате; ВыплатаПоИсполнительнымЛистамСуммаКВыплате");
		БлокируемыеРеквизиты.Добавить("ВыплатаПоИсполнительнымЛистам.Документ; ВыплатаПоИсполнительнымЛистамДокумент");
		
		// таб. часть ВыплатаЗаработнойПлаты
		БлокируемыеРеквизиты.Добавить("ВыплатаЗаработнойПлаты.СуммаКВыплате; ВыплатаЗаработнойПлатыСуммаКВыплате");
		БлокируемыеРеквизиты.Добавить("ВыплатаЗаработнойПлаты.Ведомость; ВыплатаЗаработнойПлатыВедомость");

		
	КонецЕсли;
	
	Возврат БлокируемыеРеквизиты;
	
КонецФункции

// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
////////////////////////////////////////////////////////////////////////////////
// Проведение

Функция ПодготовитьПараметрыПроведения(ДокументСсылка, Отказ) Экспорт

	ВалютаРеглУчета     = Константы.ВалютаРегламентированногоУчета.Получить();
	
	ПараметрыПроведения = Новый Структура;
	ПараметрыПроведения.Вставить("ВалютаРеглУчета", ВалютаРеглУчета);
	ПараметрыПроведения.Вставить("ДокументСсылка",  ДокументСсылка);
	
	Запрос = Новый Запрос;
	МенеджерВременныхТаблиц  = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("ВалютаРеглУчета", ВалютаРеглУчета);
	
	НомераТаблиц = Новый Структура;
	
	Запрос.Текст = ТекстЗапросаРеквизитыДокумента(НомераТаблиц);
	Результат = Запрос.ВыполнитьПакет();
	ТаблицаРеквизиты = Результат[НомераТаблиц["Реквизиты"]].Выгрузить();
	ПараметрыПроведения.Вставить("Реквизиты", ТаблицаРеквизиты);
	
	Реквизиты = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ТаблицаРеквизиты[0]);

	Если НЕ УчетнаяПолитикаСервер.Существует(Реквизиты.Организация, Реквизиты.Период, "БУ", Истина, ДокументСсылка)
		ИЛИ НЕ УчетнаяПолитикаСервер.Существует(Реквизиты.Организация, Реквизиты.Период, "НУ", Истина, ДокументСсылка) Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат ПараметрыПроведения;
	КонецЕсли;      
	
	// Коэффициент пересчета сумм из валюты документа в тенге
	Если Реквизиты.ВалютаДокумента = Реквизиты.ДокументВРеглВалюте Тогда
		КоэффициентРеглВалюты = 1;
	Иначе                                                                                                                                               
		СтруктураКурсаДокумента = ОбщегоНазначенияБК.ПолучитьКурсВалюты(Реквизиты.ВалютаДокумента, Реквизиты.Период);
		
		Если СтруктураКурсаДокумента.Кратность = 0 Тогда
			Отказ           = Истина;	
			ШаблонСообщения = НСтр("ru = 'Документ %1 не может быть проведен.
				|Не задана кратность валюты %2 на дату %3'");
			ТекстСообщения  = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонСообщения, Реквизиты.Ссылка, Реквизиты.ВалютаДокумента, Формат(Реквизиты.Дата, "ДФ=dd.MM.yy"));
			
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ПараметрыПроведения.ДокументСсылка);
		КонецЕсли;
		
		КоэффициентРеглВалюты           = СтруктураКурсаДокумента.Курс / СтруктураКурсаДокумента.Кратность;
	КонецЕсли;
	Запрос.УстановитьПараметр("КоэффициентРеглВалюты", КоэффициентРеглВалюты);	

	ОрганизацияПлательщикНалогаНаПрибыль 			= ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период);
	ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль 	= ОрганизацияПлательщикНалогаНаПрибыль И ПроцедурыНалоговогоУчета.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль(Реквизиты.Организация, Реквизиты.Период);	
	НеобходимостьОтраженияВНУ 						= ОрганизацияПлательщикНалогаНаПрибыль И Реквизиты.УчитыватьКПН И (ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль ИЛИ Реквизиты.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ);
	ВедениеУчетаВременныхразницБалансовымМетодом    = УчетнаяПолитикаСервер.ВедетсяУчетВременныхРазницБалансовымМетодом(Реквизиты.Организация, Реквизиты.Период);
	
	Реквизиты.Вставить("ОрганизацияПлательщикНалогаНаПрибыль", 			 ОрганизацияПлательщикНалогаНаПрибыль);
	Реквизиты.Вставить("ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль", ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль);
	Реквизиты.Вставить("НеобходимостьОтраженияВНУ", 					 НеобходимостьОтраженияВНУ);	
	Реквизиты.Вставить("ВедениеУчетаВременныхразницБалансовымМетодом",   ВедениеУчетаВременныхразницБалансовымМетодом);
	
	Налогоплательщик = Реквизиты.Организация;
	ПоддержкаРаботыСоСтруктурнымиПодразделениями = ПолучитьФункциональнуюОпцию("ПоддержкаРаботыСоСтруктурнымиПодразделениями");
		
	ПараметрыПроведения.Реквизиты.ЗаполнитьЗначения(НеобходимостьОтраженияВНУ, "НеобходимостьОтраженияВНУ");
	Реквизиты.Вставить("Налогоплательщик", Налогоплательщик);
	Запрос.УстановитьПараметр("НеобходимостьОтраженияВНУ", НеобходимостьОтраженияВНУ);
	Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
	Запрос.УстановитьПараметр("РасчетыПоКредитамИЗаймам", НСтр("ru = 'Расчеты по кредитам и займам'"));    	
	Запрос.УстановитьПараметр("ИнкассацияДС", НСтр("ru = 'Инкассация денежных средств'"));    	
	Запрос.УстановитьПараметр("ПрочиеРасходы", НСтр("ru = 'Прочие расходы'"));    	
	Запрос.УстановитьПараметр("ВзносВБанк", НСтр("ru = 'Взнос наличными в банк'"));    	
	Запрос.УстановитьПараметр("ВыдачаСредствПодотчетнику", НСтр("ru = 'Выдача средств подотчетнику'"));
	
	ПараметрыПроведения.Реквизиты.ЗаполнитьЗначения(Налогоплательщик, "Налогоплательщик");
	
	ПараметрыПроведения.Реквизиты.ЗаполнитьЗначения(ПоддержкаРаботыСоСтруктурнымиПодразделениями, "ПоддержкаРаботыСоСтруктурнымиПодразделениями");	
	
	Если Реквизиты.ЕстьВыплатаЗаработнойПлаты ИЛИ
		 Реквизиты.ЕстьВыплатаПоИсполнительнымЛистам Тогда

		ПараметрыПроведения.Реквизиты.ЗаполнитьЗначения(ОбщегоНазначенияБК.ПолучитьПризнакВеденияУчетаПоСотрудникам(), "ВедениеУчетаПоСотрудникам");
		
		ПризнакиРаспределенияНалогов = УчетнаяПолитикаСервер.ПолучитьПризнакиРаспределенияНалогов(Реквизиты.Организация, Реквизиты.Дата);
		ПараметрыПроведения.Реквизиты.ЗаполнитьЗначения(ПризнакиРаспределенияНалогов.РаспределятьНалогиПоСтруктурнымЕдиницам, "РаспределятьНалогиПоСтруктурнымЕдиницам");
		ПараметрыПроведения.Реквизиты.ЗаполнитьЗначения(ПризнакиРаспределенияНалогов.РаспределятьНалогиПоПодразделениямОрганизаций, "РаспределятьНалогиПоПодразделениямОрганизаций");
	
		Запрос.УстановитьПараметр("Дата", Реквизиты.Дата);
	КонецЕсли;
	
	НомераТаблиц = Новый Структура;

	Запрос.Текст = ТекстЗапросаВременныеТаблицыДокумента(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаПогашениеЗадолженности(НомераТаблиц, ПараметрыПроведения, Реквизиты) 
		+ ТекстЗапросаПрочееСписание(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаПеречислениеВПодотчет(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаПеречислениеЗП(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаПеречислениеПоИЛ(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаОплатаСчетов(НомераТаблиц, ПараметрыПроведения, Реквизиты);
		
	// Контроль остатков счета
	НеобходимКонтрольОстатковДС = ПользователиБКВызовСервераПовтИсп.ЗапретитьПроводитьОперацииПриНедостаточностиСредствНаСчете(Ложь);
	ПараметрыПроведения.Реквизиты.ЗаполнитьЗначения(НеобходимКонтрольОстатковДС, "НеобходимКонтрольОстатковДС");
	Реквизиты.Вставить("НеобходимКонтрольОстатковДС",  НеобходимКонтрольОстатковДС);
	
	Запрос.Текст = Запрос.Текст  + ТекстЗапросаКонтрольОстатков(НомераТаблиц, ПараметрыПроведения, Реквизиты);
	Запрос.УстановитьПараметр("МоментВремени", ДокументСсылка.МоментВремени());
	Запрос.УстановитьПараметр("Счет", Реквизиты.СчетКасса);
	Запрос.УстановитьПараметр("Касса", Реквизиты.Касса);
	Запрос.УстановитьПараметр("СтруктурноеПодразделение", Реквизиты.СтруктурноеПодразделениеОтправитель);
	Запрос.УстановитьПараметр("Валюта", Реквизиты.ВалютаДокумента);
	
	// выполняем пакет запросов	
	Результат = Запрос.ВыполнитьПакет();

	Для Каждого НомерТаблицы ИЗ НомераТаблиц Цикл
		ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат[НомерТаблицы.Значение].Выгрузить());
	КонецЦикла;
	
	ПараметрыПроведения.Реквизиты.ЗаполнитьЗначения(НеобходимостьОтраженияВНУ, 						"НеобходимостьОтраженияВНУ");
	ПараметрыПроведения.Реквизиты.ЗаполнитьЗначения(ВедениеУчетаВременныхразницБалансовымМетодом, 	"ВедениеУчетаВременныхразницБалансовымМетодом");
	ПараметрыПроведения.Реквизиты.ЗаполнитьЗначения(ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль, "ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль");

	Возврат ПараметрыПроведения;

КонецФункции 

Функция ТекстЗапросаРеквизитыДокумента(НомераТаблиц)
	
	НомераТаблиц.Вставить("ВременнаяТаблицаСоставДокумента", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВременнаяТаблицаРеквизиты", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("Реквизиты", НомераТаблиц.Количество());

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	МАКСИМУМ(СоставДокумента.ЕстьРасшифровкаПлатежа) КАК ЕстьРасшифровкаПлатежа,
	|	МАКСИМУМ(СоставДокумента.ЕстьВыплатаЗаработнойПлаты) КАК ЕстьВыплатаЗаработнойПлаты,
	|	МАКСИМУМ(СоставДокумента.ЕстьВыплатаПоИсполнительнымЛистам) КАК ЕстьВыплатаПоИсполнительнымЛистам,
	|	МАКСИМУМ(СоставДокумента.ЕстьВыдачаВПодотчет) КАК ЕстьВыдачаВПодотчет
	|ПОМЕСТИТЬ СоставДокумента
	|ИЗ
	|	(ВЫБРАТЬ ПЕРВЫЕ 1
	|		ИСТИНА КАК ЕстьРасшифровкаПлатежа,
	|		ЛОЖЬ КАК ЕстьВыплатаЗаработнойПлаты,
	|		ЛОЖЬ КАК ЕстьВыплатаПоИсполнительнымЛистам,
	|		ЛОЖЬ КАК ЕстьВыдачаВПодотчет
	|	ИЗ
	|		Документ.РасходныйКассовыйОрдер.РасшифровкаПлатежа КАК ТаблицаДокумента
	|	ГДЕ
	|		ТаблицаДокумента.Ссылка = &Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ ПЕРВЫЕ 1
	|		ЛОЖЬ,
	|		ИСТИНА,
	|		ЛОЖЬ,
	|		ЛОЖЬ
	|	ИЗ
	|		Документ.РасходныйКассовыйОрдер.ВыплатаЗаработнойПлаты КАК ТаблицаДокумента
	|	ГДЕ
	|		ТаблицаДокумента.Ссылка = &Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ ПЕРВЫЕ 1
	|		ЛОЖЬ,
	|		ИСТИНА,
	|		ЛОЖЬ,
	|		ЛОЖЬ
	|	ИЗ
	|		Документ.РасходныйКассовыйОрдер КАК ТаблицаДокумента
	|	ГДЕ
	|		ТаблицаДокумента.Ссылка = &Ссылка
	|			И ТаблицаДокумента.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ ПЕРВЫЕ 1
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ИСТИНА,
	|		ЛОЖЬ
	|	ИЗ
	|		Документ.РасходныйКассовыйОрдер.ВыплатаПоИсполнительнымЛистам КАК ТаблицаДокумента
	|	ГДЕ
	|		ТаблицаДокумента.Ссылка = &Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ ПЕРВЫЕ 1
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ИСТИНА
	|	ИЗ
	|		Документ.РасходныйКассовыйОрдер.ВыдачаВПодотчет КАК ТаблицаДокумента
	|	ГДЕ
	|		ТаблицаДокумента.Ссылка = &Ссылка) КАК СоставДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Дата КАК Дата,
	|	Реквизиты.Ссылка КАК Ссылка,
	|	Реквизиты.Номер КАК Номер,
	|	Реквизиты.ВидОперации КАК ВидОперации,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.Организация КАК Налогоплательщик,
	|	Реквизиты.ВалютаДокумента КАК ВалютаДокумента,
	|	Реквизиты.Контрагент КАК Контрагент,
	|	Реквизиты.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	|	Реквизиты.СуммаДокумента КАК СуммаДокумента,
	|	""Выбытие"" КАК НаправлениеДвижения,
	|	ВЫБОР
	|		КОГДА Реквизиты.ВалютаДокумента = &ВалютаРеглУчета
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ДокументВРеглВалюте,
	|	ВЫБОР
	|		КОГДА Реквизиты.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателю)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоВозврат,
	|	Реквизиты.ВидУчетаНУ КАК ВидУчетаНУ,
	|	Реквизиты.СубконтоДтБУ1 КАК СубконтоДтБУ1,
	|	Реквизиты.СубконтоДтБУ2 КАК СубконтоДтБУ2,
	|	Реквизиты.СубконтоДтБУ3 КАК СубконтоДтБУ3,
	|	Реквизиты.СубконтоДтНУ1 КАК СубконтоДтНУ1,
	|	Реквизиты.СубконтоДтНУ2 КАК СубконтоДтНУ2,
	|	Реквизиты.СубконтоДтНУ3 КАК СубконтоДтНУ3,
	|	Реквизиты.Касса КАК Касса,
	|	Реквизиты.ПлатежнаяВедомость КАК ПлатежнаяВедомость,
	|	Реквизиты.СчетКасса КАК СчетКасса,
	|	Реквизиты.СчетОрганизации КАК СчетОрганизации,
	|	Реквизиты.СчетУчетаРасчетовСКонтрагентомБУ КАК СчетУчетаРасчетовСКонтрагентомБУ,
	|	Реквизиты.СчетУчетаРасчетовСКонтрагентомНУ КАК СчетУчетаРасчетовСКонтрагентомНУ,
	|	Реквизиты.УчитыватьКПН КАК УчитыватьКПН,
	|	Реквизиты.СтруктурноеПодразделениеПолучатель КАК СтруктурноеПодразделениеПолучатель,
	|	Реквизиты.СтруктурноеПодразделениеОтправитель КАК СтруктурноеПодразделениеОтправитель,
	|	Реквизиты.СтруктурноеПодразделениеОтправитель КАК СтруктурноеПодразделение,
	|	ЛОЖЬ КАК НеобходимостьОтраженияВНУ,
	|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) КАК ПодразделениеДляРеглОпераций,
	|	ЛОЖЬ КАК НеобходимКонтрольОстатковДС,
	|	ЛОЖЬ КАК ВедениеУчетаВременныхРазницБалансовымМетодом,
	|	ЛОЖЬ КАК ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль,
	|	ЛОЖЬ КАК ВедениеУчетаПоСотрудникам,
	|	ЛОЖЬ КАК РаспределятьНалогиПоСтруктурнымЕдиницам,
	|	ЛОЖЬ КАК РаспределятьНалогиПоПодразделениямОрганизаций, 
	|	ЛОЖЬ КАК ПоддержкаРаботыСоСтруктурнымиПодразделениями,
	|	ЛОЖЬ КАК ПорядокСписанияЗадолженностиПоЗарплате,
	|	ВЫБОР
	|		КОГДА НЕ СчетаУчетаДенежныхСредств.СчетУчетаНУ ЕСТЬ NULL
	|			ТОГДА ВЫБОР
	|				КОГДА СчетаУчетаДенежныхСредств.СчетУчетаНУ = ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ПустаяСсылка)
	|					ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ДенежныеСредстваВКассеИНаРасчетныхСчетах)
	|				ИНАЧЕ СчетаУчетаДенежныхСредств.СчетУчетаНУ
	|			КОНЕЦ
	|		ИНАЧЕ ЕСТЬNULL(Типовой.СчетНУ, ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ДенежныеСредстваВКассеИНаРасчетныхСчетах))
	|	КОНЕЦ КАК СчетКассаНУ
	|ПОМЕСТИТЬ Реквизиты
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер КАК Реквизиты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаУчетаДенежныхСредств КАК СчетаУчетаДенежныхСредств
	|		ПО Реквизиты.СчетКасса = СчетаУчетаДенежныхСредств.ОбъектУчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Типовой КАК Типовой
	|		ПО Реквизиты.СчетКасса = Типовой.Ссылка
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Дата КАК Дата,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Номер КАК Номер,
	|	Реквизиты.Ссылка КАК Ссылка,
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Налогоплательщик КАК Налогоплательщик,
	|	Реквизиты.ВидОперации КАК ВидОперации,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.ВалютаДокумента КАК ВалютаДокумента,
	|	Реквизиты.Контрагент КАК Контрагент,
	|	Реквизиты.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	|	Реквизиты.СуммаДокумента КАК СуммаДокумента,
	|	Реквизиты.ДокументВРеглВалюте КАК ДокументВРеглВалюте,
	|	Реквизиты.ЭтоВозврат КАК ЭтоВозврат,
	|	Реквизиты.ВидУчетаНУ КАК ВидУчетаНУ,
	|	Реквизиты.СубконтоДтБУ1 КАК СубконтоДтБУ1,
	|	Реквизиты.СубконтоДтБУ2 КАК СубконтоДтБУ2,
	|	Реквизиты.СубконтоДтБУ3 КАК СубконтоДтБУ3,
	|	Реквизиты.СубконтоДтНУ1 КАК СубконтоДтНУ1,
	|	Реквизиты.СубконтоДтНУ2 КАК СубконтоДтНУ2,
	|	Реквизиты.СубконтоДтНУ3 КАК СубконтоДтНУ3,
	|	Реквизиты.СчетКасса КАК СчетКасса,
	|	Реквизиты.СчетОрганизации КАК СчетОрганизации,
	|	Реквизиты.СчетУчетаРасчетовСКонтрагентомБУ КАК СчетУчетаРасчетовСКонтрагентомБУ,
	|	Реквизиты.СчетУчетаРасчетовСКонтрагентомНУ КАК СчетУчетаРасчетовСКонтрагентомНУ,
	|	Реквизиты.УчитыватьКПН КАК УчитыватьКПН,
	|	Реквизиты.СтруктурноеПодразделениеПолучатель КАК СтруктурноеПодразделениеПолучатель,
	|	Реквизиты.СтруктурноеПодразделениеОтправитель КАК СтруктурноеПодразделениеОтправитель,
	|	Реквизиты.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	|	Реквизиты.НеобходимостьОтраженияВНУ КАК НеобходимостьОтраженияВНУ,
	|	Реквизиты.ПодразделениеДляРеглОпераций КАК ПодразделениеДляРеглОпераций,
	|	Реквизиты.НеобходимКонтрольОстатковДС КАК НеобходимКонтрольОстатковДС,
	|	Реквизиты.ВедениеУчетаВременныхРазницБалансовымМетодом КАК ВедениеУчетаВременныхРазницБалансовымМетодом,
	|	Реквизиты.НаправлениеДвижения КАК НаправлениеДвижения,
	|	Реквизиты.СчетКассаНУ КАК СчетКассаНУ,
	|	Реквизиты.Касса КАК Касса,
	|	Реквизиты.ПлатежнаяВедомость КАК ПлатежнаяВедомость,
	|	Реквизиты.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль КАК ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль,
	|	Реквизиты.ВедениеУчетаПоСотрудникам КАК ВедениеУчетаПоСотрудникам,
	|	Реквизиты.РаспределятьНалогиПоСтруктурнымЕдиницам КАК РаспределятьНалогиПоСтруктурнымЕдиницам,
	|	Реквизиты.РаспределятьНалогиПоПодразделениямОрганизаций КАК РаспределятьНалогиПоПодразделениямОрганизаций, 
	|	Реквизиты.ПоддержкаРаботыСоСтруктурнымиПодразделениями КАК ПоддержкаРаботыСоСтруктурнымиПодразделениями,
	|	Реквизиты.ПорядокСписанияЗадолженностиПоЗарплате КАК ПорядокСписанияЗадолженностиПоЗарплате,
	|	ЕСТЬNULL(СоставДокумента.ЕстьРасшифровкаПлатежа, ЛОЖЬ) КАК ЕстьРасшифровкаПлатежа,
	|	ЕСТЬNULL(СоставДокумента.ЕстьВыплатаЗаработнойПлаты, ЛОЖЬ) КАК ЕстьВыплатаЗаработнойПлаты,
	|	ЕСТЬNULL(СоставДокумента.ЕстьВыплатаПоИсполнительнымЛистам, ЛОЖЬ) КАК ЕстьВыплатаПоИсполнительнымЛистам,
	|	ЕСТЬNULL(СоставДокумента.ЕстьВыдачаВПодотчет, ЛОЖЬ) КАК ЕстьВыдачаВПодотчет
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|		ЛЕВОЕ СОЕДИНЕНИЕ СоставДокумента КАК СоставДокумента
	|		ПО (ИСТИНА)";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();	
	
КонецФункции

Функция ТекстЗапросаВременныеТаблицыДокумента(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	ТекстЗапроса = "";
	
	Если Реквизиты.ЕстьРасшифровкаПлатежа Тогда	
		
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	ТаблицаРасшифровкаПлатежа.Ссылка КАК Ссылка,
		|	ТаблицаРасшифровкаПлатежа.НомерСтроки КАК НомерСтроки,
		|	ТаблицаРасшифровкаПлатежа.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	ТаблицаРасшифровкаПлатежа.ДоговорКонтрагента.ВидДоговора КАК ВидДоговора,
		|	ТаблицаРасшифровкаПлатежа.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
		|	ТаблицаРасшифровкаПлатежа.ДоговорКонтрагента.ВедениеВзаиморасчетов КАК ВедениеВзаиморасчетов,
		|	ТаблицаРасшифровкаПлатежа.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
		|	ТаблицаРасшифровкаПлатежа.КратностьВзаиморасчетов КАК КратностьВзаиморасчетов,
		|	ТаблицаРасшифровкаПлатежа.Сделка КАК Сделка,
		|	ТаблицаРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентомБУ КАК СчетУчетаРасчетовСКонтрагентомБУ,
		|	ВЫБОР
		|		КОГДА Реквизиты.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРКО.РасчетыПоКредитамИЗаймамСКонтрагентами)
		|			ТОГДА ТаблицаРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентомНУ
		|		ИНАЧЕ ЕСТЬNULL(Типовой.СчетНУ, ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ПоступлениеИВыбытиеИмуществаработУслугПрав))
		|	КОНЕЦ КАК СчетУчетаРасчетовСКонтрагентомНУ,
		|	ТаблицаРасшифровкаПлатежа.СчетУчетаРасчетовПоАвансам КАК СчетУчетаРасчетовПоАвансам,
		|	ТаблицаРасшифровкаПлатежа.СуммаПлатежа КАК СуммаПлатежа,
		|	ВЫБОР
		|		КОГДА ТаблицаРасшифровкаПлатежа.ДоговорКонтрагента.ВалютаВзаиморасчетов = &ВалютаРеглУчета
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК РасчетыВВалюте,
		|	ВЫРАЗИТЬ(ВЫБОР
		|			КОГДА Реквизиты.ДокументВРеглВалюте
		|				ТОГДА ТаблицаРасшифровкаПлатежа.СуммаПлатежа
		|			ИНАЧЕ ВЫБОР
		|					КОГДА ЕСТЬNULL(ТаблицаРасшифровкаПлатежа.КратностьВзаиморасчетов, 0) = 0
		|						ТОГДА 0
		|					ИНАЧЕ ТаблицаРасшифровкаПлатежа.СуммаПлатежа * (ТаблицаРасшифровкаПлатежа.КурсВзаиморасчетов / ТаблицаРасшифровкаПлатежа.КратностьВзаиморасчетов)
		|				КОНЕЦ
		|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаРегл,
		|	ТаблицаРасшифровкаПлатежа.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
		|	ТаблицаРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
		|	ТаблицаРасшифровкаПлатежа.СтавкаНДС КАК СтавкаНДС,
		|	ВЫРАЗИТЬ(ВЫБОР
		|			КОГДА Реквизиты.ДокументВРеглВалюте
		|				ТОГДА ТаблицаРасшифровкаПлатежа.СуммаНДС
		|			ИНАЧЕ ВЫБОР
		|					КОГДА ЕСТЬNULL(ТаблицаРасшифровкаПлатежа.КратностьВзаиморасчетов, 0) = 0
		|						ТОГДА 0
		|					ИНАЧЕ ТаблицаРасшифровкаПлатежа.СуммаНДС * (ТаблицаРасшифровкаПлатежа.КурсВзаиморасчетов / ТаблицаРасшифровкаПлатежа.КратностьВзаиморасчетов)
		|				КОНЕЦ
		|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаНДСРегл,
		|	ТаблицаРасшифровкаПлатежа.СуммаНДС КАК СуммаНДС,
		|	ТаблицаРасшифровкаПлатежа.СчетНаОплату КАК СчетНаОплату
		|ПОМЕСТИТЬ ТаблицаРасшифровкаПлатежа
		|ИЗ
		|	Документ.РасходныйКассовыйОрдер.РасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежа
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО ТаблицаРасшифровкаПлатежа.Ссылка = Реквизиты.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Типовой КАК Типовой
		|		ПО ТаблицаРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентомБУ = Типовой.Ссылка
		|ГДЕ
		|	ТаблицаРасшифровкаПлатежа.Ссылка = &Ссылка"
		 + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
		
		НомераТаблиц.Вставить("ВременнаяТаблицаРасшифровкаПлатежа", НомераТаблиц.Количество());
		
	КонецЕсли;
	
	Если Реквизиты.ЕстьВыплатаЗаработнойПлаты Тогда	

		ТекстЗапроса = ТекстЗапроса + 
		"ВЫБРАТЬ
		|	ВыплатаЗаработнойПлаты.Ссылка,
		|	ВыплатаЗаработнойПлаты.Ведомость КАК Ведомость,
		|	НЕОПРЕДЕЛЕНО КАК ФизЛицо
		|ПОМЕСТИТЬ ВедомостиЗП
		|ИЗ
		|	Документ.РасходныйКассовыйОрдер.ВыплатаЗаработнойПлаты КАК ВыплатаЗаработнойПлаты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО ВыплатаЗаработнойПлаты.Ссылка = Реквизиты.Ссылка
		|ГДЕ
		|	ВыплатаЗаработнойПлаты.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Реквизиты.Ссылка,
		|	Реквизиты.ПлатежнаяВедомость,
		|	Реквизиты.Контрагент
		|ИЗ
		|	Реквизиты КАК Реквизиты
		|ГДЕ
		|	Реквизиты.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику)"
		 + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
		 
		НомераТаблиц.Вставить("ТаблицаВедомостиЗП", НомераТаблиц.Количество());
		 
	КонецЕсли;
	
	Если Реквизиты.ЕстьВыплатаПоИсполнительнымЛистам Тогда	
		ТекстЗапроса = ТекстЗапроса + 
		"ВЫБРАТЬ
		|	ВыплатаПоИсполнительнымЛистам.Ссылка,
		|	ВыплатаПоИсполнительнымЛистам.Документ КАК Ведомость
		|ПОМЕСТИТЬ ВедомостиПоИЛ
		|ИЗ
		|	Документ.РасходныйКассовыйОрдер.ВыплатаПоИсполнительнымЛистам КАК ВыплатаПоИсполнительнымЛистам
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО ВыплатаПоИсполнительнымЛистам.Ссылка = Реквизиты.Ссылка"
		 + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
		
		НомераТаблиц.Вставить("ВременнаяТаблицаВедомостиПоИЛ", НомераТаблиц.Количество());

	КонецЕсли;

	Если Реквизиты.ЕстьВыдачаВПодотчет Тогда	
		
		ТекстЗапроса =  ТекстЗапроса +
		"ВЫБРАТЬ
		|	ТаблицаПеречислениеВПодотчет.Ссылка КАК Ссылка,
		|	ТаблицаПеречислениеВПодотчет.ВидЗадолженностиПодотчетногоЛица КАК ВидЗадолженностиПодотчетногоЛица,
		|	ТаблицаПеречислениеВПодотчет.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
		|	ТаблицаПеречислениеВПодотчет.СуммаПлатежа
		|ПОМЕСТИТЬ ТаблицаПеречислениеВПодотчет
		|ИЗ
		|	Документ.РасходныйКассовыйОрдер.ВыдачаВПодотчет КАК ТаблицаПеречислениеВПодотчет
		|ГДЕ
		|	ТаблицаПеречислениеВПодотчет.Ссылка = &Ссылка"
		 + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
		
		НомераТаблиц.Вставить("ВременнаяТаблицаПеречислениеВПодотчет", НомераТаблиц.Количество());
	КонецЕсли;         	

	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаПогашениеЗадолженности(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	// Процедура погашения задолженности выполняется для операций:
	// - ОплатаПоставщику
	// - РасчетыПоКредитамИЗаймамСКонтрагентами
	// - ВозвратДенежныхСредствПокупателю 
	// - ОплатаСтруктурномуПодразделению
	// - РасчетыПоДоходуОтРазовыхВыплатСКонтрагентами
	          	
	Если Реквизиты.ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаПоставщику
		ИЛИ Реквизиты.ВидОперации = Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИЗаймамСКонтрагентами
		ИЛИ Реквизиты.ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателю 
		ИЛИ Реквизиты.ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаСтруктурномуПодразделению 
		ИЛИ Реквизиты.ВидОперации = Перечисления.ВидыОперацийРКО.РасчетыПоДоходуОтРазовыхВыплатСКонтрагентами Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаРасшифровкаПлатежа.НомерСтроки КАК НомерСтроки,
		|	Реквизиты.Контрагент КАК Контрагент,
		|	ТаблицаРасшифровкаПлатежа.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	ТаблицаРасшифровкаПлатежа.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
		|	ТаблицаРасшифровкаПлатежа.ВедениеВзаиморасчетов КАК ВедениеВзаиморасчетов,
		|	ТаблицаРасшифровкаПлатежа.РасчетыВВалюте КАК РасчетыВВалюте,
		|	ТаблицаРасшифровкаПлатежа.Сделка КАК ДокументРасчетов,
		|	ВЫБОР
		|		КОГДА Реквизиты.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателю)
		|			ТОГДА ТаблицаРасшифровкаПлатежа.СчетУчетаРасчетовПоАвансам
		|		ИНАЧЕ ТаблицаРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентомБУ
		|	КОНЕЦ КАК СчетРасчетов,
		|	ТаблицаРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентомНУ КАК СчетРасчетовНУ,
		|	ВЫБОР
		|		КОГДА Реквизиты.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРКО.ОплатаПоставщику)
		|				ИЛИ Реквизиты.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРКО.ОплатаСтруктурномуПодразделению)
		|				ИЛИ Реквизиты.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРКО.РасчетыПоДоходуОтРазовыхВыплатСКонтрагентами)
		|			ТОГДА ТаблицаРасшифровкаПлатежа.СчетУчетаРасчетовПоАвансам
		|		ИНАЧЕ ТаблицаРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентомБУ
		|	КОНЕЦ КАК СчетАвансов,
		|	Реквизиты.СчетКасса 									КАК КорСчет,
		|	Реквизиты.Касса			 								КАК КорСубконто1,
		|	ТаблицаРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств КАК КорСубконто2,
		|	НЕОПРЕДЕЛЕНО 											КАК КорСубконто3,
		|	Реквизиты.СчетКассаНУ 									КАК КорСчетНУ,
		|	Реквизиты.Касса			 								КАК КорСубконтоНУ1,
		|	ТаблицаРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств КАК КорСубконтоНУ2,
		|	НЕОПРЕДЕЛЕНО											КАК КорСубконтоНУ3,
		|	ВЫБОР
		|		КОГДА Реквизиты.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРКО.РасчетыПоКредитамИЗаймамСКонтрагентами)
		|			ТОГДА &РасчетыПоКредитамИЗаймам
		|		ИНАЧЕ """"
		|	КОНЕЦ КАК Содержание,
		|	ТаблицаРасшифровкаПлатежа.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
		|	ТаблицаРасшифровкаПлатежа.СуммаРегл КАК СуммаРегл
		|ИЗ
		|	ТаблицаРасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежа
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО ТаблицаРасшифровкаПлатежа.Ссылка = Реквизиты.Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТаблицаРасшифровкаПлатежа.НомерСтроки";
	Иначе
		ПараметрыПроведения.Вставить("РасшифровкаПлатежа", Неопределено);
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить("РасшифровкаПлатежа", НомераТаблиц.Количество());
	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаПрочееСписание(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	// Процедура прочего поступления вызывается для операций:
	// - ПрочееСписаниеБезналичныхДенежныхСредств
	// - ПеречислениеНалога
	
	ТекстЗапроса = "";
	Если Реквизиты.ВидОперации = Перечисления.ВидыОперацийРКО.РасходДенежныхСредствПрочее
		ИЛИ Реквизиты.ВидОперации = Перечисления.ВидыОперацийРКО.ИнкассацияДенежныхСредств Тогда
		
		ТекстЗапроса = 	"ВЫБРАТЬ
		|	Реквизиты.Дата КАК Период,
		|	Реквизиты.Организация КАК Организация,
		|	Реквизиты.ВалютаДокумента КАК ВалютаДокумента,
		|	Реквизиты.Контрагент КАК Контрагент,
		|	&НеобходимостьОтраженияВНУ КАК НеобходимостьОтраженияВНУ,
		|	Реквизиты.ВидУчетаНУ КАК ВидУчетаНУ,
		|	Реквизиты.СчетУчетаРасчетовСКонтрагентомБУ КАК СчетДтБУ,
		|	Реквизиты.СубконтоДтБУ1 КАК СубконтоДтБУ1,
		|	Реквизиты.СубконтоДтБУ2 КАК СубконтоДтБУ2,
		|	Реквизиты.СубконтоДтБУ3 КАК СубконтоДтБУ3,
		|	Реквизиты.СчетУчетаРасчетовСКонтрагентомНУ КАК СчетДтНУ,
		|	Реквизиты.СубконтоДтНУ1 КАК СубконтоДтНУ1,
		|	Реквизиты.СубконтоДтНУ2 КАК СубконтоДтНУ2,
		|	Реквизиты.СубконтоДтНУ3 КАК СубконтоДтНУ3,
		|	Реквизиты.СчетКасса КАК СчетКтБУ,
		|	Реквизиты.Касса КАК СубконтоКтБУ1,
		|	Реквизиты.СтатьяДвиженияДенежныхСредств КАК СубконтоКтБУ2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКтБУ3,
		|	Реквизиты.СчетКассаНУ КАК СчетКтНУ,
		|	Реквизиты.Касса КАК СубконтоКтНУ1,
		|	Реквизиты.СтатьяДвиженияДенежныхСредств КАК СубконтоКтНУ2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКтНУ3,
		|	Реквизиты.СтруктурноеПодразделениеОтправитель КАК СтруктурноеПодразделениеОтправитель,
		|	ВЫБОР
		|		КОГДА Реквизиты.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРКО.РасходДенежныхСредствПрочее)
		|			ТОГДА Реквизиты.СтруктурноеПодразделениеПолучатель
		|		ИНАЧЕ Реквизиты.СтруктурноеПодразделениеОтправитель
		|	КОНЕЦ КАК СтруктурноеПодразделениеПолучатель,
		|	Реквизиты.СуммаДокумента КАК ВалютнаяСумма,
		|	ВЫБОР
		|		КОГДА Реквизиты.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРКО.РасходДенежныхСредствПрочее)
		|			ТОГДА &ПрочиеРасходы
		|		ИНАЧЕ &ИнкассацияДС
		|	КОНЕЦ КАК Содержание,
		|	ВЫРАЗИТЬ(Реквизиты.СуммаДокумента * &КоэффициентРеглВалюты КАК ЧИСЛО(15, 2)) КАК СуммаРегл
		|ИЗ
		|	Реквизиты КАК Реквизиты "
		+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
		
		НомераТаблиц.Вставить("РеквизитыПрочее", НомераТаблиц.Количество());
		
	ИначеЕсли Реквизиты.ВидОперации = Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк Тогда
		
		ТекстЗапроса = "ВЫБРАТЬ
		|	Реквизиты.Дата КАК Период,
		|	Реквизиты.Организация 									КАК Организация,
		|	Реквизиты.ВалютаДокумента 								КАК ВалютаДокумента,
		|	Реквизиты.Контрагент 									КАК Контрагент,
		|	&НеобходимостьОтраженияВНУ 								КАК НеобходимостьОтраженияВНУ,
		|	Реквизиты.ВидУчетаНУ 									КАК ВидУчетаНУ,
		|	Реквизиты.СчетУчетаРасчетовСКонтрагентомБУ 				КАК СчетДтБУ,
		|	Реквизиты.СчетОрганизации 								КАК СубконтоДтБУ1,
		|	Реквизиты.СтатьяДвиженияДенежныхСредств 				КАК СубконтоДтБУ2,
		|	НЕОПРЕДЕЛЕНО 											КАК СубконтоДтБУ3,
		|	ВЫБОР
		|		КОГДА НЕ СчетаУчетаДенежныхСредств.СчетУчетаНУ ЕСТЬ NULL 
		|			ТОГДА ВЫБОР
		|				КОГДА СчетаУчетаДенежныхСредств.СчетУчетаНУ = ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ПустаяСсылка)
		|					ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ДенежныеСредстваВКассеИНаРасчетныхСчетах)
		|				ИНАЧЕ СчетаУчетаДенежныхСредств.СчетУчетаНУ
		|			КОНЕЦ
		|		ИНАЧЕ ЕСТЬNULL(Типовой.СчетНУ, ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ДенежныеСредстваВКассеИНаРасчетныхСчетах))
		|	КОНЕЦ 													КАК СчетДтНУ,
		|	Реквизиты.СчетОрганизации 								КАК СубконтоДтНУ1,
		|	Реквизиты.СтатьяДвиженияДенежныхСредств 				КАК СубконтоДтНУ2,
		|	НЕОПРЕДЕЛЕНО											КАК СубконтоДтНУ3,
		|	Реквизиты.СчетКасса 									КАК СчетКтБУ,
		|	Реквизиты.Касса			 								КАК СубконтоКтБУ1,
		|	ТаблицаРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств КАК СубконтоКтБУ2,
		|	НЕОПРЕДЕЛЕНО 											КАК СубконтоКтБУ3,
		|	Реквизиты.СчетКассаНУ 									КАК СчетКтНУ,
		|	Реквизиты.Касса 										КАК СубконтоКтНУ1,
		|	ТаблицаРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств КАК СубконтоКтНУ2,
		|	НЕОПРЕДЕЛЕНО 											КАК СубконтоКтНУ3,
		|	Реквизиты.СтруктурноеПодразделениеОтправитель 			КАК СтруктурноеПодразделениеОтправитель,
		|	Реквизиты.СтруктурноеПодразделениеПолучатель 			КАК СтруктурноеПодразделениеПолучатель,
		|	&ВзносВБанк 											КАК Содержание,
		|	Реквизиты.СуммаДокумента 								КАК ВалютнаяСумма,
		|	ВЫРАЗИТЬ(Реквизиты.СуммаДокумента * &КоэффициентРеглВалюты КАК ЧИСЛО(15, 2)) КАК СуммаРегл
		|ИЗ
		|	Реквизиты КАК Реквизиты
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаРасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежа
		|		ПО (ТаблицаРасшифровкаПлатежа.Ссылка = Реквизиты.Ссылка)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаУчетаДенежныхСредств КАК СчетаУчетаДенежныхСредств
		|		ПО Реквизиты.СчетОрганизации = СчетаУчетаДенежныхСредств.ОбъектУчета
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Типовой КАК Типовой
		|		ПО Реквизиты.СчетУчетаРасчетовСКонтрагентомБУ = Типовой.Ссылка"
		+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
		
		НомераТаблиц.Вставить("РеквизитыПрочее", НомераТаблиц.Количество());		
	Иначе 		
		ПараметрыПроведения.Вставить("РеквизитыПрочее", Неопределено);		
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаПеречислениеВПодотчет(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	ТекстЗапроса = "";

	Если НЕ Реквизиты.ЕстьВыдачаВПодотчет Тогда
		ПараметрыПроведения.Вставить("РеквизитыПеречислениеВПодотчет", Неопределено);
		ПараметрыПроведения.Вставить("ТаблицаПеречислениеВПодотчет", Неопределено);
	Иначе
		ТекстЗапроса = "ВЫБРАТЬ
		              |	Реквизиты.Ссылка КАК Регистратор,
		              |	Реквизиты.Дата КАК Период,
		              |	Реквизиты.Организация КАК Организация,
					  |	Реквизиты.ВалютаДокумента КАК ВалютаДокумента,					  
					  |	Реквизиты.Контрагент КАК Контрагент,					  
		              |	Реквизиты.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
		              |	Реквизиты.ВидУчетаНУ КАК ВидУчетаНУ,
		              |	&НеобходимостьОтраженияВНУ КАК НеобходимостьОтраженияВНУ
		              |ИЗ
		              |	Реквизиты КАК Реквизиты
		              |;
		              |
		              |////////////////////////////////////////////////////////////////////////////////
		              |ВЫБРАТЬ
		              |	Реквизиты.Ссылка КАК Регистратор,
		              |	Реквизиты.Дата 												  КАК Период,
		              |	Реквизиты.Организация										  КАК Организация,
		              |	Реквизиты.ВидУчетаНУ										  КАК ВидУчетаНУ,
		              |	&НеобходимостьОтраженияВНУ									  КАК НеобходимостьОтраженияВНУ,
		              |	Реквизиты.СчетУчетаРасчетовСКонтрагентомБУ					  КАК СчетДтБУ,
		              |	Реквизиты.Контрагент										  КАК СубконтоДтБУ1,
		              |	ТаблицаПеречислениеВПодотчет.ВидЗадолженностиПодотчетногоЛица КАК СубконтоДтБУ2,
		              |	НЕОПРЕДЕЛЕНО												  КАК СубконтоДтБУ3,
					  |	ЕСТЬNULL(Типовой.СчетНУ, ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ЗадолженностьПодотчетныхЛиц)) КАК СчетДтНУ,
		              |	Реквизиты.Контрагент										  КАК СубконтоДтНУ1,
		              |	ТаблицаПеречислениеВПодотчет.ВидЗадолженностиПодотчетногоЛица КАК СубконтоДтНУ2,
		              |	НЕОПРЕДЕЛЕНО 												  КАК СубконтоДтНУ3,
		              |	Реквизиты.СчетКасса											  КАК СчетКтБУ,
		              |	Реквизиты.Касса												  КАК СубконтоКтБУ1,
		              |	ТаблицаПеречислениеВПодотчет.СтатьяДвиженияДенежныхСредств	  КАК СубконтоКтБУ2,
		              |	НЕОПРЕДЕЛЕНО												  КАК СубконтоКтБУ3,
		              |	Реквизиты.СчетКассаНУ										  КАК СчетКтНУ,
		              |	Реквизиты.Касса												  КАК СубконтоКтНУ1,
		              |	ТаблицаПеречислениеВПодотчет.СтатьяДвиженияДенежныхСредств	  КАК СубконтоКтНУ2,
		              |	НЕОПРЕДЕЛЕНО												  КАК СубконтоКтНУ3,
		              |	&ВыдачаСредствПодотчетнику									  КАК Содержание,
		              |	ТаблицаПеречислениеВПодотчет.СуммаПлатежа					  КАК ВалютнаяСумма,
		              |	ВЫРАЗИТЬ(ТаблицаПеречислениеВПодотчет.СуммаПлатежа * &КоэффициентРеглВалюты КАК ЧИСЛО(15, 2)) КАК СуммаРегл
		              |ИЗ
		              |	ТаблицаПеречислениеВПодотчет КАК ТаблицаПеречислениеВПодотчет
		              |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		              |		ПО ТаблицаПеречислениеВПодотчет.Ссылка = Реквизиты.Ссылка
					  |		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Типовой КАК Типовой
					  |		ПО Реквизиты.СчетУчетаРасчетовСКонтрагентомБУ = Типовой.Ссылка" 
					  
					  + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
		
		НомераТаблиц.Вставить("РеквизитыПеречислениеВПодотчет", НомераТаблиц.Количество());
		НомераТаблиц.Вставить("ТаблицаПеречислениеВПодотчет", НомераТаблиц.Количество());
		
	КонецЕсли;
	         	
	Возврат ТекстЗапроса 
	
КонецФункции

Функция ТекстЗапросаПеречислениеЗП(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	ТекстЗапроса = "";
	
	Если НЕ Реквизиты.ЕстьВыплатаЗаработнойПлаты Тогда
		ПараметрыПроведения.Вставить("ТаблицаПеречислениеЗП", Неопределено);
	Иначе 
		// Проведение по регистру Типовой
		Если Реквизиты.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям 
			ИЛИ (Реквизиты.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику И ЗначениеЗаполнено(Реквизиты.ПлатежнаяВедомость)) Тогда
			
			ТекстЗапроса = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ЗарплатаКВыплатеОрганизацииЗарплата.Физлицо КАК ФизЛицо,
			|	ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка КАК Ведомость,
			|	НАЧАЛОПЕРИОДА(ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.ПериодНачисленияЗарплаты, МЕСЯЦ) КАК ПериодНачисленияЗарплаты,
			|	ВЫБОР
			|		КОГДА ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.ПериодНачисленияДепонированнойЗарплаты = ДАТАВРЕМЯ(1, 1, 1)
			|			ТОГДА НАЧАЛОПЕРИОДА(ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.ПериодНачисленияЗарплаты, МЕСЯЦ)
			|		ИНАЧЕ НАЧАЛОПЕРИОДА(ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.ПериодНачисленияДепонированнойЗарплаты, МЕСЯЦ)
			|	КОНЕЦ КАК ПериодНачисленияДепонированнойЗарплаты,
			|	ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.СпособРасчетаСуммКВыплате КАК СпособРасчетаСуммКВыплате,
			|	СУММА(ЗарплатаКВыплатеОрганизацииЗарплата.Сумма) КАК Сумма,
			|	СУММА(ЗарплатаКВыплатеОрганизацииЗарплата.ДепонированнаяСумма) КАК ДепонированнаяСумма,
			|	ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.Организация КАК Организация,
			|	ЗарплатаКВыплатеОрганизацииЗарплата.ВыплаченностьЗарплаты,
			|	ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.Номер,
			|	ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.Дата,
			|	Реквизиты.СчетКасса КАК СчетКт,
			|	Реквизиты.СчетКассаНУ КАК СчетКтНУ,
			|	НЕОПРЕДЕЛЕНО КАК СчетКтНУПоУмолчанию,
			|	""ДенежныеСредства"" КАК ИмяСубконтоКт1,
			|	Реквизиты.Касса КАК СубконтоКт1,
			|	""СтатьиДвиженияДенежныхСредств"" КАК ИмяСубконтоКт2,
			|	Реквизиты.СтатьяДвиженияДенежныхСредств КАК СубконтоКт2
			|ИЗ
			|	Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацииЗарплата
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВедомостиЗП КАК ВедомостиЗП
			|		ПО ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка = ВедомостиЗП.Ведомость
			|			И (ВЫБОР
			|				КОГДА ВедомостиЗП.Физлицо <> НЕОПРЕДЕЛЕНО
			|					ТОГДА ЗарплатаКВыплатеОрганизацииЗарплата.Физлицо = ВедомостиЗП.Физлицо
			|				ИНАЧЕ ИСТИНА
			|			КОНЕЦ)
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям КАК РанееВыплаченныеСуммы
			|		ПО ЗарплатаКВыплатеОрганизацииЗарплата.Физлицо = РанееВыплаченныеСуммы.Физлицо
			|			И ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка = РанееВыплаченныеСуммы.Ведомость
			|			И (РанееВыплаченныеСуммы.Регистратор <> &Ссылка)
			|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
			|		ПО (ИСТИНА)
			|ГДЕ
			|	ЗарплатаКВыплатеОрганизацииЗарплата.ВыплаченностьЗарплаты = ЗНАЧЕНИЕ(Перечисление.ВыплаченностьЗарплаты.Выплачено)
			|	И РанееВыплаченныеСуммы.Физлицо ЕСТЬ NULL 
			|
			|СГРУППИРОВАТЬ ПО
			|	ЗарплатаКВыплатеОрганизацииЗарплата.Физлицо,
			|	ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка,
			|	НАЧАЛОПЕРИОДА(ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.ПериодНачисленияЗарплаты, МЕСЯЦ),
			|	ВЫБОР
			|		КОГДА ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.ПериодНачисленияДепонированнойЗарплаты = ДАТАВРЕМЯ(1, 1, 1)
			|			ТОГДА НАЧАЛОПЕРИОДА(ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.ПериодНачисленияЗарплаты, МЕСЯЦ)
			|		ИНАЧЕ НАЧАЛОПЕРИОДА(ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.ПериодНачисленияДепонированнойЗарплаты, МЕСЯЦ)
			|	КОНЕЦ,
			|	ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.СпособРасчетаСуммКВыплате,
			|	ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.Организация,
			|	ЗарплатаКВыплатеОрганизацииЗарплата.ВыплаченностьЗарплаты,
			|	ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.Номер,
			|	ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.Дата,
			|	Реквизиты.СчетКасса,
			|	Реквизиты.СчетКассаНУ,
			|	Реквизиты.Касса,
			|	Реквизиты.СтатьяДвиженияДенежныхСредств"
			+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
		
		Иначе 	
		
			ТекстЗапроса = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	РасходныйКассовыйОрдер.Контрагент КАК ФизЛицо,
		    |	NULL КАК Ведомость,
			|	НАЧАЛОПЕРИОДА(РасходныйКассовыйОрдер.Дата, МЕСЯЦ) КАК ПериодНачисленияЗарплаты,
			|	НАЧАЛОПЕРИОДА(РасходныйКассовыйОрдер.Дата, МЕСЯЦ) КАК ПериодНачисленияДепонированнойЗарплаты,
			|	ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаСуммКВыплате.ОстаткиПоЗарплатеНаКонецМесяца) КАК СпособРасчетаСуммКВыплате,
		    |	РасходныйКассовыйОрдер.СуммаДокумента КАК Сумма,
		    |	0 КАК ДепонированнаяСумма,
		    |	РасходныйКассовыйОрдер.Организация КАК Организация,
		    |	ЗНАЧЕНИЕ(Перечисление.ВыплаченностьЗарплаты.Выплачено) КАК ВыплаченностьЗарплаты,
		    |	NULL КАК Номер,
		    |	NULL КАК Дата,
			|	РасходныйКассовыйОрдер.СчетКасса КАК СчетКт,
			|	РасходныйКассовыйОрдер.СчетКассаНУ КАК СчетКтНУ,
			|	НЕОПРЕДЕЛЕНО КАК СчетКтНУПоУмолчанию,
			|	""ДенежныеСредства"" КАК ИмяСубконтоКт1,
			|	РасходныйКассовыйОрдер.Касса КАК СубконтоКт1,
			|	""СтатьиДвиженияДенежныхСредств"" КАК ИмяСубконтоКт2,
			|	РасходныйКассовыйОрдер.СтатьяДвиженияДенежныхСредств КАК СубконтоКт2
		    |ИЗ
		    |	Реквизиты КАК РасходныйКассовыйОрдер
			|"
			+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
		
		КонецЕсли;			
		
		НомераТаблиц.Вставить("ТаблицаПеречислениеЗП", НомераТаблиц.Количество());
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаПеречислениеПоИЛ(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	ТекстЗапроса = "";
	
	Если НЕ Реквизиты.ЕстьВыплатаПоИсполнительнымЛистам Тогда
		ПараметрыПроведения.Вставить("ТаблицаПеречислениеПоИЛ", Неопределено);
	Иначе 
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ИЛПеречислениеПолучателям.ДокументОснование,
		|	ВЫБОР
		|		КОГДА ФИОФизЛиц.ФизЛицо ЕСТЬ NULL 
		|			ТОГДА ИЛПеречислениеПолучателям.ДокументОснование.Физлицо.Наименование
		|		ИНАЧЕ ФИОФизЛиц.Фамилия + ВЫБОР
		|				КОГДА ФИОФизЛиц.Имя <> """"
		|					ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛиц.Имя, 1, 1) + "".""
		|				ИНАЧЕ """"
		|			КОНЕЦ + ВЫБОР
		|				КОГДА ФИОФизЛиц.Отчество <> """"
		|					ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛиц.Отчество, 1, 1) + "".""
		|				ИНАЧЕ """"
		|			КОНЕЦ
		|	КОНЕЦ КАК ФИОРаботника,
		|	ИЛПеречислениеПолучателям.Получатель КАК Получатель,
		|	СУММА(ИЛПеречислениеПолучателям.СуммаВзаиморасчетов) КАК Сумма,
		|	СУММА(ИЛПеречислениеПолучателям.СуммаВзаиморасчетов) КАК СуммаВзаиморасчетов,
		|	0 КАК СуммаСборов,
		|	ИЛПеречислениеПолучателям.ДокументОснование.Физлицо КАК ФизЛицо,
		|	ИЛПеречислениеПолучателям.ДокументОснование.Номер КАК НомерИЛ,
		|	ИЛПеречислениеПолучателям.ДокументОснование.Дата КАК ДатаИЛ,
		|	ИЛПеречислениеПолучателям.Ссылка.ПериодРегистрации КАК ПериодВзаиморасчетов,
   		|	ЛОЖЬ КАК СозданПриОбмене,
		|	Реквизиты.СчетКасса КАК СчетКт,
		|	Реквизиты.СчетКассаНУ КАК СчетКтНУ,
		|	НЕОПРЕДЕЛЕНО КАК СчетКтНУПоУмолчанию,
		|	""ДенежныеСредства"" КАК ИмяСубконтоКт1,
		|	Реквизиты.Касса КАК СубконтоКт1,
		|	""СтатьиДвиженияДенежныхСредств"" КАК ИмяСубконтоКт2,
		|	Реквизиты.СтатьяДвиженияДенежныхСредств КАК СубконтоКт2
		|ИЗ
		|	Документ.ИЛПеречислениеПолучателям.ИсполнительныеЛисты КАК ИЛПеречислениеПолучателям
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВедомостиПоИЛ КАК ВедомостиПоИЛ
		|		ПО ИЛПеречислениеПолучателям.Ссылка = ВедомостиПоИЛ.Ведомость
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&Дата, ) КАК ФИОФизЛиц
		|		ПО ИЛПеречислениеПолучателям.ДокументОснование.Физлицо = ФИОФизЛиц.ФизЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО (ИСТИНА)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаРасшифровкаПлатежа КАК РасшифровкаПлатежа
		|		ПО (ИСТИНА)
		|
		|СГРУППИРОВАТЬ ПО
		|	ВЫБОР
		|		КОГДА ФИОФизЛиц.ФизЛицо ЕСТЬ NULL 
		|			ТОГДА ИЛПеречислениеПолучателям.ДокументОснование.Физлицо.Наименование
		|		ИНАЧЕ ФИОФизЛиц.Фамилия + ВЫБОР
		|				КОГДА ФИОФизЛиц.Имя <> """"
		|					ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛиц.Имя, 1, 1) + "".""
		|				ИНАЧЕ """"
		|			КОНЕЦ + ВЫБОР
		|				КОГДА ФИОФизЛиц.Отчество <> """"
		|					ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛиц.Отчество, 1, 1) + "".""
		|				ИНАЧЕ """"
		|			КОНЕЦ
		|	КОНЕЦ,
		|	ИЛПеречислениеПолучателям.ДокументОснование,
		|	ИЛПеречислениеПолучателям.Получатель,
		|	ИЛПеречислениеПолучателям.ДокументОснование.Физлицо,
		|	ИЛПеречислениеПолучателям.ДокументОснование.Номер,
		|	ИЛПеречислениеПолучателям.ДокументОснование.Дата,
		|	ИЛПеречислениеПолучателям.Ссылка.ПериодРегистрации,
		|	Реквизиты.СчетКасса,
		|	Реквизиты.СчетКассаНУ,
		|	Реквизиты.Касса,
		|	Реквизиты.СтатьяДвиженияДенежныхСредств"
		+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
		
		НомераТаблиц.Вставить("ТаблицаПеречислениеПоИЛ", НомераТаблиц.Количество());
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаКонтрольОстатков(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		
	ТекстЗапроса = "";
	
	Если НЕ Реквизиты.НеобходимКонтрольОстатковДС Тогда
		ПараметрыПроведения.Вставить("ТаблицаКонтрольОстатков", Неопределено);
	Иначе 
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТиповойОстатки.ВалютнаяСуммаОстаток
		|ИЗ
		|	РегистрБухгалтерии.Типовой.Остатки(
		|			&МоментВремени,
		|			Счет = &Счет,
		|			,
		|			Организация = &Организация
		|				И СтруктурноеПодразделение = &СтруктурноеПодразделение
		|				И Субконто1 = &Касса
		|				И Валюта = &Валюта) КАК ТиповойОстатки"
		+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
		
		НомераТаблиц.Вставить("ТаблицаКонтрольОстатков", НомераТаблиц.Количество());
	КонецЕсли;
	
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаОплатаСчетов(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	Если Реквизиты.ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаПоставщику Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаРасшифровкаПлатежа.НомерСтроки КАК НомерСтроки,
		|	ТаблицаРасшифровкаПлатежа.СчетНаОплату КАК СчетНаОплату,
		|	ТаблицаРасшифровкаПлатежа.СтавкаНДС КАК СтавкаНДС,
		|	ВЫБОР
		|		КОГДА СчетНаОплатуПоставщика.ВалютаДокумента = &ВалютаРеглУчета
		|			ТОГДА ТаблицаРасшифровкаПлатежа.СуммаРегл
		|		ИНАЧЕ ТаблицаРасшифровкаПлатежа.СуммаВзаиморасчетов
		|	КОНЕЦ КАК Сумма,
		|	ВЫБОР
		|		КОГДА СчетНаОплатуПоставщика.ВалютаДокумента = &ВалютаРеглУчета
		|			ТОГДА ТаблицаРасшифровкаПлатежа.СуммаНДСРегл
		|		КОГДА СчетНаОплатуПоставщика.ВалютаДокумента = &Валюта
		|			ТОГДА ТаблицаРасшифровкаПлатежа.СуммаНДС
		|		ИНАЧЕ ВЫРАЗИТЬ(ТаблицаРасшифровкаПлатежа.СуммаНДСРегл * ТаблицаРасшифровкаПлатежа.КратностьВзаиморасчетов / ТаблицаРасшифровкаПлатежа.КурсВзаиморасчетов КАК ЧИСЛО(15, 2))
		|	КОНЕЦ КАК СуммаНДС,
		|	СчетНаОплатуПоставщика.ВалютаДокумента КАК Валюта
		|ИЗ
		|	ТаблицаРасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежа
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетНаОплатуПоставщика КАК СчетНаОплатуПоставщика
		|		ПО ТаблицаРасшифровкаПлатежа.СчетНаОплату = СчетНаОплатуПоставщика.Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТаблицаРасшифровкаПлатежа.НомерСтроки";
	Иначе
		ПараметрыПроведения.Вставить("ОплатаСчетов", Неопределено);
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить("ОплатаСчетов", НомераТаблиц.Количество());
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТаблицаОплатаСчетов(ДокументСсылка) Экспорт
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка.Ссылка);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаРасшифровкаПлатежа.Ссылка КАК Ссылка,
		|	ТаблицаРасшифровкаПлатежа.НомерСтроки КАК НомерСтроки,
		|	ТаблицаРасшифровкаПлатежа.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
		|	ТаблицаРасшифровкаПлатежа.КратностьВзаиморасчетов КАК КратностьВзаиморасчетов,
		|	ВЫРАЗИТЬ(ВЫБОР
		|			КОГДА &ДокументВРеглВалюте
		|				ТОГДА ТаблицаРасшифровкаПлатежа.СуммаПлатежа
		|			ИНАЧЕ ВЫБОР
		|					КОГДА ЕСТЬNULL(ТаблицаРасшифровкаПлатежа.КратностьВзаиморасчетов, 0) = 0
		|						ТОГДА 0
		|					ИНАЧЕ ТаблицаРасшифровкаПлатежа.СуммаПлатежа * (ТаблицаРасшифровкаПлатежа.КурсВзаиморасчетов / ТаблицаРасшифровкаПлатежа.КратностьВзаиморасчетов)
		|				КОНЕЦ
		|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаРегл,
		|	ТаблицаРасшифровкаПлатежа.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
		|	ТаблицаРасшифровкаПлатежа.СтавкаНДС КАК СтавкаНДС,
		|	ВЫРАЗИТЬ(ВЫБОР
		|			КОГДА &ДокументВРеглВалюте
		|				ТОГДА ТаблицаРасшифровкаПлатежа.СуммаНДС
		|			ИНАЧЕ ВЫБОР
		|					КОГДА ЕСТЬNULL(ТаблицаРасшифровкаПлатежа.КратностьВзаиморасчетов, 0) = 0
		|						ТОГДА 0
		|					ИНАЧЕ ТаблицаРасшифровкаПлатежа.СуммаНДС * (ТаблицаРасшифровкаПлатежа.КурсВзаиморасчетов / ТаблицаРасшифровкаПлатежа.КратностьВзаиморасчетов)
		|				КОНЕЦ
		|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаНДСРегл,
		|	ТаблицаРасшифровкаПлатежа.СуммаНДС КАК СуммаНДС,
		|	ТаблицаРасшифровкаПлатежа.СчетНаОплату КАК СчетНаОплату
		|ПОМЕСТИТЬ ТаблицаРасшифровкаПлатежа
		|ИЗ
		|	Документ.РасходныйКассовыйОрдер.РасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежа
		|ГДЕ
		|	ТаблицаРасшифровкаПлатежа.Ссылка = &Ссылка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	СчетНаОплату
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаРасшифровкаПлатежа.НомерСтроки КАК НомерСтроки,
		|	ТаблицаРасшифровкаПлатежа.СчетНаОплату КАК СчетНаОплату,
		|	ТаблицаРасшифровкаПлатежа.СтавкаНДС КАК СтавкаНДС,
		|	ВЫБОР
		|		КОГДА СчетНаОплатуПоставщика.ВалютаДокумента = &ВалютаРеглУчета
		|			ТОГДА ТаблицаРасшифровкаПлатежа.СуммаРегл
		|		ИНАЧЕ ТаблицаРасшифровкаПлатежа.СуммаВзаиморасчетов
		|	КОНЕЦ КАК Сумма,
		|	ВЫБОР
		|		КОГДА СчетНаОплатуПоставщика.ВалютаДокумента = &ВалютаРеглУчета
		|			ТОГДА ТаблицаРасшифровкаПлатежа.СуммаНДСРегл
		|		КОГДА СчетНаОплатуПоставщика.ВалютаДокумента = &Валюта
		|			ТОГДА ТаблицаРасшифровкаПлатежа.СуммаНДС
		|		ИНАЧЕ ВЫРАЗИТЬ(ТаблицаРасшифровкаПлатежа.СуммаНДСРегл * ТаблицаРасшифровкаПлатежа.КратностьВзаиморасчетов / ТаблицаРасшифровкаПлатежа.КурсВзаиморасчетов КАК ЧИСЛО(15, 2))
		|	КОНЕЦ КАК СуммаНДС,
		|	СчетНаОплатуПоставщика.ВалютаДокумента КАК Валюта
		|ИЗ
		|	ТаблицаРасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежа
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетНаОплатуПоставщика КАК СчетНаОплатуПоставщика
		|		ПО ТаблицаРасшифровкаПлатежа.СчетНаОплату = СчетНаОплатуПоставщика.Ссылка
		|ГДЕ
		|	ТаблицаРасшифровкаПлатежа.СчетНаОплату <> ЗНАЧЕНИЕ(Документ.СчетНаОплатуПоставщика.ПустаяСсылка)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТаблицаРасшифровкаПлатежа.НомерСтроки"; 
		
	ВалютаРеглУчета     = Константы.ВалютаРегламентированногоУчета.Получить();
	ДокументВРеглВалюте = ?(ДокументСсылка.ВалютаДокумента = ВалютаРеглУчета, Истина, Ложь);
	Запрос.УстановитьПараметр("ДокументВРеглВалюте", ДокументВРеглВалюте);
	Запрос.УстановитьПараметр("ВалютаРеглУчета", ВалютаРеглУчета);
	Запрос.УстановитьПараметр("Валюта", ДокументСсылка.ВалютаДокумента);
		
	ТаблицаОплатаСчетов = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаОплатаСчетов;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обработчики обновления ИБ

Процедура ЗаполнитьСчетНаОплатуВРасшифровкеПлатежаПриОбновлении(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РасходныйКассовыйОрдер.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВТ_ПлатежныеДокументы
		|ИЗ
		|	Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
		|ГДЕ
		|	РасходныйКассовыйОрдер.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРКО.ОплатаПоставщику)
		|	И РасходныйКассовыйОрдер.ДокументОснование ССЫЛКА Документ.СчетНаОплатуПоставщика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТ_ПлатежныеДокументы.Ссылка КАК Ссылка
		|ИЗ
		|	ВТ_ПлатежныеДокументы КАК ВТ_ПлатежныеДокументы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РасходныйКассовыйОрдер.РасшифровкаПлатежа КАК РасходныйКассовыйОрдерРасшифровкаПлатежа
		|		ПО ВТ_ПлатежныеДокументы.Ссылка = РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка
		|ГДЕ
		|	РасходныйКассовыйОрдерРасшифровкаПлатежа.СчетНаОплату = ЗНАЧЕНИЕ(Документ.СчетНаОплатуПоставщика.ПустаяСсылка)";
			
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;	
	Параметры.ОбработкаЗавершена = Ложь;
	
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НачатьТранзакцию();
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Если ДокументОбъект = Неопределено Тогда
			ОтменитьТранзакцию();
			Продолжить;
		КонецЕсли; 
		
		Если НЕ ЗначениеЗаполнено(ДокументОбъект.ДокументОснование) Тогда
			ОтменитьТранзакцию();
			Продолжить;
		КонецЕсли;
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Документ.РасходныйКассовыйОрдер");
		ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
		
		Попытка
			Блокировка.Заблокировать();
			
			ДокументРасшифровкаПлатежа = ДокументОбъект.РасшифровкаПлатежа;
			
			Для Каждого СтрокаПлатеж Из ДокументРасшифровкаПлатежа Цикл 
				
				СтрокаПлатеж.СчетНаОплату = ДокументОбъект.ДокументОснование;
				
			КонецЦикла; 

			ДокументОбъект.ОбменДанными.Загрузка = Истина;
			ДокументОбъект.Записать();
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ТекстСообщения = НСтр("ru='Операция не выполнена'", ОбщегоНазначения.КодОсновногоЯзыка());
			ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
	КонецЦикла;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПЕЧАТИ

////////////////////////////////////////////////////////////////////////////////
// Интерфейс для работы с подсистемой Печать.

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Расходный кассовый ордер
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "РасходныйКассовыйОрдер";
	КомандаПечати.Представление = НСтр("ru = 'Расходный кассовый ордер'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБККлиент.ВыполнитьКомандуПечати";
	КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.Порядок = 50;
	
	// Настраиваемый комплект документов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "РасходныйКассовыйОрдер";
	КомандаПечати.Представление = НСтр("ru = 'Настраиваемый комплект документов'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.ЗаголовокФормы = НСтр("ru = 'Настраиваемый комплект'");
	КомандаПечати.ДополнитьКомплектВнешнимиПечатнымиФормами = Истина;
	КомандаПечати.Порядок = 75;
	
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	// Печать расходной накладной
	НужноПечататьМакет = УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "РасходныйКассовыйОрдер");
	Если НужноПечататьМакет Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"РасходныйКассовыйОрдер",
			НСтр("ru = 'Расходный кассовый ордер'"),
			ПечатьРКО(МассивОбъектов, ОбъектыПечати),
			,
			"Документ.РасходныйКассовыйОрдер.ПФ_MXL_КО2");
	КонецЕсли;

КонецПроцедуры

Функция ПечатьРКО(МассивОбъектов, ОбъектыПечати) Экспорт

	УстановитьПривилегированныйРежим(Истина);

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);

	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	РасходныйКассовыйОрдер.Ссылка КАК Ссылка,
	               |	РасходныйКассовыйОрдер.Номер КАК Номер,
	               |	РасходныйКассовыйОрдер.ВидОперации КАК ВидОперации,
	               |	РасходныйКассовыйОрдер.Дата КАК ДатаДокумента,
	               |	РасходныйКассовыйОрдер.Организация КАК Организация,
	               |	РасходныйКассовыйОрдер.СтруктурноеПодразделениеОтправитель КАК СтруктурноеПодразделение,
	               |	РасходныйКассовыйОрдер.СтруктурноеПодразделениеПолучатель КАК СтруктурноеПодразделениеПолучатель,
	               |	РасходныйКассовыйОрдер.Организация КАК ЮрФизЛицо,
	               |	РасходныйКассовыйОрдер.Организация КАК Руководители,
	               |	РасходныйКассовыйОрдер.СуммаДокумента КАК Сумма,
	               |	ВЫБОР
	               |		КОГДА РасходныйКассовыйОрдер.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРКО.РасходДенежныхСредствПрочее)
	               |				И РасходныйКассовыйОрдер.СубконтоДтБУ1 ССЫЛКА Справочник.Контрагенты
	               |			ТОГДА РасходныйКассовыйОрдер.СубконтоДтБУ1
	               |		ИНАЧЕ РасходныйКассовыйОрдер.Контрагент
	               |	КОНЕЦ КАК Контрагент,
	               |	РасходныйКассовыйОрдер.Контрагент.Представление КАК ФИОПолучателя,
	               |	РасходныйКассовыйОрдер.ВалютаДокумента КАК Валюта,
	               |	РасходныйКассовыйОрдер.ВалютаДокумента.Представление КАК ВалютаПредставление,
	               |	РасходныйКассовыйОрдер.ПлатежнаяВедомость КАК ПлатежнаяВедомость,
	               |	ВЫРАЗИТЬ(РасходныйКассовыйОрдер.Выдать КАК СТРОКА(1000)) КАК Выдать,
	               |	ВЫРАЗИТЬ(РасходныйКассовыйОрдер.Приложение КАК СТРОКА(1000)) КАК Приложение,
	               |	ВЫРАЗИТЬ(РасходныйКассовыйОрдер.ПоДокументу КАК СТРОКА(1000)) КАК ПоДокументу,
	               |	ВЫРАЗИТЬ(РасходныйКассовыйОрдер.Основание КАК СТРОКА(1000)) КАК Основание,
	               |	РасходныйКассовыйОрдер.Касса КАК Касса,
	               |	РасходныйКассовыйОрдер.СчетУчетаРасчетовСКонтрагентомБУ КАК СчетУчетаРасчетовСКонтрагентомБУ,
	               |	РасходныйКассовыйОрдер.СчетКасса КАК СчетКасса,
	               |	РасходныйКассовыйОрдер.ВалютаДокумента КАК ВалютаДокумента
	               |ПОМЕСТИТЬ ВТ_ДанныеДокумента
	               |ИЗ
	               |	Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
	               |ГДЕ
	               |	РасходныйКассовыйОрдер.Ссылка В(&МассивОбъектов)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	МАКСИМУМ(ОтветственныеЛица.Период) КАК Период,
	               |	ОтветственныеЛица.СтруктурнаяЕдиница КАК Касса,
	               |	ДанныеДокумента.Ссылка КАК Ссылка,
	               |	ДанныеДокумента.ДатаДокумента КАК ДатаДокумента
	               |ПОМЕСТИТЬ ВТ_ПериодыОтвЛица
	               |ИЗ
	               |	РегистрСведений.ОтветственныеЛицаОрганизаций КАК ОтветственныеЛица
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ДанныеДокумента КАК ДанныеДокумента
	               |		ПО ОтветственныеЛица.СтруктурнаяЕдиница = ДанныеДокумента.Касса
	               |			И ОтветственныеЛица.Период <= ДанныеДокумента.ДатаДокумента
	               |			И (ОтветственныеЛица.ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.Кассир))
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ОтветственныеЛица.СтруктурнаяЕдиница,
	               |	ДанныеДокумента.Ссылка,
	               |	ДанныеДокумента.ДатаДокумента
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ПериодыОтвЛица.Ссылка КАК Ссылка,
	               |	ПериодыОтвЛица.Касса КАК Касса,
	               |	ОтветственныеЛица.ФизическоеЛицо КАК ФизическоеЛицо,
	               |	МАКСИМУМ(ФИОФизЛиц.Период) КАК Период
	               |ПОМЕСТИТЬ ВТ_ПериодыФИО
	               |ИЗ
	               |	ВТ_ПериодыОтвЛица КАК ПериодыОтвЛица
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛицаОрганизаций КАК ОтветственныеЛица
	               |		ПО ПериодыОтвЛица.Период = ОтветственныеЛица.Период
	               |			И ПериодыОтвЛица.Касса = ОтветственныеЛица.СтруктурнаяЕдиница
	               |			И (ОтветственныеЛица.ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.Кассир))
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц КАК ФИОФизЛиц
	               |		ПО (ОтветственныеЛица.ФизическоеЛицо = ФИОФизЛиц.ФизЛицо)
	               |			И (ФИОФизЛиц.Период <= ПериодыОтвЛица.ДатаДокумента)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ПериодыОтвЛица.Ссылка,
	               |	ПериодыОтвЛица.Касса,
	               |	ОтветственныеЛица.ФизическоеЛицо
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ПериодыФИО.Ссылка КАК Ссылка,
	               |	ПериодыФИО.Касса КАК Касса,
	               |	ОтветственныеЛицаФИОФизЛиц.ФизЛицо КАК ФизическоеЛицо,
	               |	ОтветственныеЛицаФИОФизЛиц.Фамилия + ВЫБОР
	               |		КОГДА ПОДСТРОКА(ОтветственныеЛицаФИОФизЛиц.Имя, 1, 1) <> """"
	               |			ТОГДА "" "" + ПОДСТРОКА(ОтветственныеЛицаФИОФизЛиц.Имя, 1, 1) + "".""
	               |		ИНАЧЕ """"
	               |	КОНЕЦ + ВЫБОР
	               |		КОГДА ПОДСТРОКА(ОтветственныеЛицаФИОФизЛиц.Отчество, 1, 1) <> """"
	               |			ТОГДА "" "" + ПОДСТРОКА(ОтветственныеЛицаФИОФизЛиц.Отчество, 1, 1) + "".""
	               |		ИНАЧЕ """"
	               |	КОНЕЦ КАК Кассир
	               |ПОМЕСТИТЬ ВТ_ОтвЛицаФИО
	               |ИЗ
	               |	РегистрСведений.ФИОФизЛиц КАК ОтветственныеЛицаФИОФизЛиц
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПериодыФИО КАК ПериодыФИО
	               |		ПО ОтветственныеЛицаФИОФизЛиц.ФизЛицо = ПериодыФИО.ФизическоеЛицо
	               |			И ОтветственныеЛицаФИОФизЛиц.Период = ПериодыФИО.Период
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_ДанныеДокумента.Ссылка КАК Ссылка,
	               |	ВТ_ДанныеДокумента.Номер КАК Номер,
	               |	ВТ_ДанныеДокумента.ВидОперации КАК ВидОперации,
	               |	ВТ_ДанныеДокумента.ДатаДокумента КАК ДатаДокумента,
	               |	ВТ_ДанныеДокумента.Организация КАК Организация,
	               |	ВТ_ДанныеДокумента.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	               |	ВТ_ДанныеДокумента.СтруктурноеПодразделениеПолучатель КАК СтруктурноеПодразделениеПолучатель,
	               |	ВТ_ДанныеДокумента.ЮрФизЛицо КАК ЮрФизЛицо,
	               |	ВТ_ДанныеДокумента.Руководители КАК Руководители,
	               |	ВТ_ДанныеДокумента.Сумма КАК Сумма,
	               |	ВТ_ДанныеДокумента.Контрагент КАК Контрагент,
	               |	ВТ_ДанныеДокумента.ФИОПолучателя КАК ФИОПолучателя,
	               |	ВТ_ДанныеДокумента.Валюта КАК Валюта,
	               |	ВТ_ДанныеДокумента.ВалютаПредставление КАК ВалютаПредставление,
	               |	ВТ_ДанныеДокумента.ПлатежнаяВедомость КАК ПлатежнаяВедомость,
	               |	ВТ_ДанныеДокумента.Выдать КАК Выдать,
	               |	ВТ_ДанныеДокумента.Основание КАК Основание,
	               |	ВТ_ДанныеДокумента.Приложение КАК Приложение,
	               |	ВТ_ДанныеДокумента.ПоДокументу КАК ПоДокументу,
	               |	ВТ_ДанныеДокумента.Основание КАК Основание1,
	               |	ВТ_ДанныеДокумента.Касса КАК Касса,
	               |	ВТ_ОтвЛицаФИО.Кассир КАК Кассир,
	               |	ВТ_ДанныеДокумента.СчетУчетаРасчетовСКонтрагентомБУ КАК СчетУчетаРасчетовСКонтрагентомБУ,
	               |	ВТ_ДанныеДокумента.СчетКасса КАК СчетКасса,
	               |	ВТ_ДанныеДокумента.ВалютаДокумента КАК ВалютаДокумента
	               |ИЗ
	               |	ВТ_ДанныеДокумента КАК ВТ_ДанныеДокумента
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОтвЛицаФИО КАК ВТ_ОтвЛицаФИО
	               |		ПО ВТ_ДанныеДокумента.Ссылка = ВТ_ОтвЛицаФИО.Ссылка";
				  
	ДанныеДокументов = Запрос.Выполнить().Выбрать();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка КАК Ссылка,
		|	РасходныйКассовыйОрдерРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентомБУ,
		|	РасходныйКассовыйОрдерРасшифровкаПлатежа.СчетУчетаРасчетовПоАвансам,
		|	СУММА(РасходныйКассовыйОрдерРасшифровкаПлатежа.СуммаПлатежа) КАК СуммаПлатежа
		|ИЗ
		|	Документ.РасходныйКассовыйОрдер.РасшифровкаПлатежа КАК РасходныйКассовыйОрдерРасшифровкаПлатежа
		|ГДЕ
		|	РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка В(&МассивОбъектов)
		|	И РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.ВидОперации В(&ВидыОпераций)
		|
		|СГРУППИРОВАТЬ ПО
		|	РасходныйКассовыйОрдерРасшифровкаПлатежа.СчетУчетаРасчетовПоАвансам,
		|	РасходныйКассовыйОрдерРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентомБУ,
		|	РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка
		|ИТОГИ ПО
		|	Ссылка";

	ОперацииРасшифровки = Новый Массив;
	ОперацииРасшифровки.Добавить(Перечисления.ВидыОперацийРКО.ОплатаПоставщику);
	ОперацииРасшифровки.Добавить(Перечисления.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателю);
	ОперацииРасшифровки.Добавить(Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИЗаймамСКонтрагентами);
	ОперацииРасшифровки.Добавить(Перечисления.ВидыОперацийРКО.РасчетыПоДоходуОтРазовыхВыплатСКонтрагентами);
	ОперацииРасшифровки.Добавить(Перечисления.ВидыОперацийРКО.ОплатаСтруктурномуПодразделению);

	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.УстановитьПараметр("ВидыОпераций", ОперацииРасшифровки);

	РезультатЗапроса = Запрос.Выполнить();

	ВыборкаРасшифровка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

	Макет         					= УправлениеПечатью.МакетПечатнойФормы("Документ.РасходныйКассовыйОрдер.ПФ_MXL_КО2");
	ТабДокумент   					= Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РасходныйКассовыйОрдер_КО2";
	
	КодЯзыка = Метаданные.Языки.Русский.КодЯзыка;
	Макет.КодЯзыка = КодЯзыка;
	
	ОбластьМакета					= Макет.ПолучитьОбласть("Шапка");
	Пока ДанныеДокументов.Следующий() Цикл
		
		Если ТабДокумент.ВысотаТаблицы > 0 Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
		
		ЕстьРасчетыСКонтрагентами = УправлениеДенежнымиСредствамиСервер.ЕстьРасчетыСКонтрагентами(ДанныеДокументов.ВидОперации);
		ЕстьРасчетыПоКредитам     = УправлениеДенежнымиСредствамиСервер.ЕстьРасчетыПоКредитам(ДанныеДокументов.ВидОперации);
		
		СтруктурнаяЕдиницаОрганизация = ОбщегоНазначенияБК.ПолучитьСтруктурнуюЕдиницу(ДанныеДокументов.Организация, ДанныеДокументов.СтруктурноеПодразделение);
					  
		СведенияОбОрганизации     = ОбщегоНазначенияБКВызовСервера.СведенияОЮрФизЛице(СтруктурнаяЕдиницаОрганизация, ДанныеДокументов.ДатаДокумента);
		ПечатьСуммыПрописью       = ПользователиБКВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию(Пользователи.ТекущийПользователь(), "ПечатьСуммыПрописьюВДокументах");
	    	
		// Выводим шапку накладной
		ОбластьМакета.Параметры.Заполнить(ДанныеДокументов);
		ОбластьМакета.Параметры.ПредставлениеОрганизации = ОбщегоНазначенияБКВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,");
		ОбластьМакета.Параметры.СуммаПрописью     		 = ?(ПечатьСуммыПрописью, ОбщегоНазначенияБКВызовСервера.СформироватьСуммуПрописью(ДанныеДокументов.Сумма, ДанныеДокументов.Валюта), "");
		ОбластьМакета.Параметры.ОрганизацияРНН_БИН		 = ОбщегоНазначенияБКВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации, "БИН_ИИН,", Ложь, ДанныеДокументов.ДатаДокумента, "ru");
		ОбластьМакета.Параметры.ДатаДокумента     		 = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 года'", КодЯзыка), Формат(ДанныеДокументов.ДатаДокумента, "Л=" + КодЯзыка + "; ДФ=дд.ММ.гггг"));
		ОбластьМакета.Параметры.НомерДокумента    		 = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ДанныеДокументов.Номер, ДанныеДокументов.Ссылка);

		Если ЕстьРасчетыПоКредитам ИЛИ ЕстьРасчетыСКонтрагентами Тогда
			ВыборкаРасшифровка.Сбросить();
			ВыборкаРасшифровка.НайтиСледующий(Новый Структура("Ссылка", ДанныеДокументов.Ссылка));
			ВыборкаПоДокументу = ВыборкаРасшифровка.Выбрать();
			КодыСчетСубсчет = ОпределитьКодыСчетСубсчет(ДанныеДокументов, ЕстьРасчетыСКонтрагентами, ЕстьРасчетыПоКредитам, ВыборкаПоДокументу);
		Иначе
			КодыСчетСубсчет = ОпределитьКодыСчетСубсчет(ДанныеДокументов, ЕстьРасчетыСКонтрагентами, ЕстьРасчетыПоКредитам);
		КонецЕсли;

		ОбластьМакета.Параметры.ДебетСубСчет  		   = КодыСчетСубсчет.Дебет;
		ОбластьМакета.Параметры.КодАналитическогоУчета = КодыСчетСубсчет.Кредит;

		Руководители		  = ОбщегоНазначенияБКВызовСервера.ОтветственныеЛицаОрганизаций(СтруктурнаяЕдиницаОрганизация, КонецДня(ДанныеДокументов.ДатаДокумента),);
		Руководитель 		  = Руководители.Руководитель;
		РуководительДолжность = Руководители.РуководительДолжность;
		Бухгалтер   		  = Руководители.ГлавныйБухгалтер;
		
		ОбластьМакета.Параметры.ФИОРуководителя       = Руководитель;
		ОбластьМакета.Параметры.ДолжностьРуководителя = РуководительДолжность;

		ОбластьМакета.Параметры.ФИОГлавногоБухгалтера = ?(НЕ ЗначениеЗаполнено(Бухгалтер), НСтр("ru = 'Не предусмотрен'", КодЯзыка), Бухгалтер);
		ОбластьМакета.Параметры.ФИОКассира            = ДанныеДокументов.Кассир;

		ОбластьМакета.Параметры.Основание             = СокрЛП(ДанныеДокументов.Основание);
		
		ТекстВыдать      = СокрЛП(ДанныеДокументов.Выдать);
		ТекстВыдатьФИО   = "";
		ТекстПоДокументу = СокрЛП(ДанныеДокументов.ПоДокументу);

		Если ТекстВыдать = "" Тогда

			Если ДанныеДокументов.ВидОперации = Перечисления.ВидыОперацийРКО.РасходДенежныхСредствПрочее Тогда
				ОрганизацияПолучатель = ОбщегоНазначенияБК.ПолучитьСтруктурнуюЕдиницу(ДанныеДокументов.Организация, ДанныеДокументов.СтруктурноеПодразделениеПолучатель);
				ТекстВыдать 		  = ?(ЗначениеЗаполнено(ОрганизацияПолучатель), ОрганизацияПолучатель.Наименование, ОрганизацияПолучатель.НаименованиеПолное);
			ИначеЕсли ЗначениеЗаполнено(ДанныеДокументов.Контрагент) Тогда
				Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
					
					ТекстВыдать = ?(ДанныеДокументов.Контрагент.НаименованиеПолное = "", ДанныеДокументов.Контрагент.Наименование, ДанныеДокументов.Контрагент.НаименованиеПолное);
					
				ИначеЕсли ДанныеДокументов.ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетнику ИЛИ ДанныеДокументов.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику Тогда
					
					ДанныеОФизЛице = ПроцедурыУправленияПерсоналомСервер.ДанныеФизЛица(ДанныеДокументов.Организация, ДанныеДокументов.Контрагент, ДанныеДокументов.ДатаДокумента);
					
					// Проверим что вернулось, если там Null значит берем наименование 
					Если ДанныеОФизЛице.Фамилия = Null Тогда 
						ТекстВыдатьФИО = ДанныеДокументов.Контрагент.Наименование;
					Иначе
						ФамилияИмяОтчество = ""+ДанныеОФизЛице.Фамилия +" "+ ДанныеОФизЛице.Имя +" "+ ДанныеОФизЛице.Отчество;
						СтруктураФИО = Новый Структура;
						СтруктураФИО.Вставить("Фамилия" , ДанныеОФизЛице.Фамилия); 
						СтруктураФИО.Вставить("Имя"	    , ДанныеОФизЛице.Имя);
						СтруктураФИО.Вставить("Отчество", ДанныеОФизЛице.Отчество);	
						ТекстВыдать = СклонениеПредставленийОбъектов.ПросклонятьПредставление(ФамилияИмяОтчество, 3);
						
						ТекстВыдатьФИО = ФамилияИмяОтчество;
					КонецЕсли;
				КонецЕсли;    
			КонецЕсли;    
		КонецЕсли;
		
		Если ТекстВыдатьФИО = "" И ЗначениеЗаполнено(ДанныеДокументов.Контрагент)
			И ((ТипЗнч(ДанныеДокументов.Контрагент) = Тип("СправочникСсылка.Контрагенты") 
			И ДанныеДокументов.Контрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо)
			ИЛИ ТипЗнч(ДанныеДокументов.Контрагент) = Тип("СправочникСсылка.ФизическиеЛица")) Тогда
			
			ДокФизЛица = ?(ТипЗнч(ДанныеДокументов.Контрагент) = Тип("СправочникСсылка.Контрагенты") И ДанныеДокументов.Контрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо, ДанныеДокументов.Контрагент.ФизЛицо, ДанныеДокументов.Контрагент);
			
			Если ЗначениеЗаполнено(ДокФизЛица) Тогда 
				
				ДанныеОФизЛице = ПроцедурыУправленияПерсоналомВызовСервера.ДанныеФизЛица(ДанныеДокументов.Организация, ДокФизЛица, ДанныеДокументов.ДатаДокумента);
				
				// Проверим что вернулось, если там Null значит берем наименование 
				Если ДанныеОФизЛице.Фамилия = Null Тогда 
					ТекстВыдатьФИО = ДокФизЛица.Наименование;
				Иначе 
					ТекстВыдатьФИО = ДанныеОФизЛице.Фамилия + " " + ДанныеОФизЛице.Имя + " " + ДанныеОФизЛице.Отчество;
				КонецЕсли;	
					
			КонецЕсли;
			
		КонецЕсли;

		Если ТекстПоДокументу = "" И ЗначениеЗаполнено(ДанныеДокументов.Контрагент) И ДанныеДокументов.ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетнику Тогда	

			ТекстПоДокументу = ОбщегоНазначенияБКВызовСервера.ПолучитьПаспортныеДанныеСтрокой(ДанныеДокументов.Контрагент, ДанныеДокументов.ДатаДокумента);

		КонецЕсли;

		ОбластьМакета.Параметры.Получатель    							  = ТекстВыдать;
		ОбластьМакета.Параметры.ФИОПолучателя 							  = ТекстВыдатьФИО;
		ОбластьМакета.Параметры.РеквизитыДокументаУдостоверяющегоЛичность = ТекстПоДокументу;

		ТабДокумент.Вывести(ОбластьМакета);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, НомерСтрокиНачало, ОбъектыПечати, ДанныеДокументов.Ссылка);
		
	КонецЦикла;
	
	Возврат ТабДокумент;
	
КонецФункции

Функция СобратьДанныеЧеков(ДокументСсылка, НомерСекции, ВерсияФормата, СообщениеОбОшибке) Экспорт
	
	ПараметрыПечатиЧека = ПодготовитьПараметрыПечатиЧека(ДокументСсылка);
	
	РеквизитыПечатиЧека = ПараметрыПечатиЧека.РеквизитыПечатиЧека;
	Если РеквизитыПечатиЧека.Количество() = 0 Тогда
		Возврат Новый Структура;
	КонецЕсли;
	
	Реквизиты = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(РеквизитыПечатиЧека[0]);
	
	ТипРасчета = ?(Реквизиты.ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателю,
		Перечисления.ТипыРасчетаДенежнымиСредствами.ВозвратДенежныхСредств,
		Перечисления.ТипыРасчетаДенежнымиСредствами.РасходДенежныхСредств);
		
	Реквизиты.Вставить("ТипРасчета",              ТипРасчета);
	Реквизиты.Вставить("НаименованиеВСтрокеЧека", НаименованиеВСтрокеЧека(Реквизиты));
	Реквизиты.Вставить("НомерСекции",             НомерСекции);
	Реквизиты.Вставить("ТипОплаты",               Перечисления.ТипыОплатыККТ.Наличные);
	Реквизиты.Вставить("ДокументОснование",       ДокументСсылка);
	
	ПараметрыОперацииФискализацииЧека = УправлениеДенежнымиСредствамиСервер.ПараметрыОперацииФискализацииЧека(Реквизиты, ПараметрыПечатиЧека, ВерсияФормата, СообщениеОбОшибке);
	
	Возврат ПараметрыОперацииФискализацииЧека;
	
КонецФункции

Функция НаименованиеВСтрокеЧека(СтруктураШапки)
	
	Если ЗначениеЗаполнено(СтруктураШапки.Выдать) Тогда		
		ШаблонНаименования = НСтр("ru = 'Выдать: %1%2Основание: %3'");
		Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонНаименования, СтруктураШапки.Выдать, " ", СтруктураШапки.Основание);
	Иначе		
		ШаблонНаименования = НСтр("ru = 'Основание: %1'");
		Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонНаименования, СтруктураШапки.Основание);
	КонецЕсли;
	
КонецФункции

Функция ТекстЗапросаРеквизитыПечатиЧека(НомераТаблиц)
	
	НомераТаблиц.Вставить("РеквизитыПечатиЧека",      НомераТаблиц.Количество());
	НомераТаблиц.Вставить("РасшифровкаПлатежа",       НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	РасходныйКассовыйОрдер.Ссылка,
	|	РасходныйКассовыйОрдер.Дата,
	|	РасходныйКассовыйОрдер.Номер,
	|	РасходныйКассовыйОрдер.Организация,
	|	РасходныйКассовыйОрдер.Контрагент,
	|	РасходныйКассовыйОрдер.Основание,
	|	РасходныйКассовыйОрдер.ВидОперации,
	|	РасходныйКассовыйОрдер.Контрагент КАК ПринятоОт,
	|	РасходныйКассовыйОрдер.Выдать,
	|	РасходныйКассовыйОрдер.СуммаДокумента,
	|	РасходныйКассовыйОрдер.ВалютаДокумента,
	|	РасходныйКассовыйОрдер.ДокументОснование КАК ДокументРасшифровкиПозиций,
	|	ВЫБОР
	|		КОГДА РасходныйКассовыйОрдер.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателю)
	|			ТОГДА РасходныйКассовыйОрдер.Контрагент.ИдентификационныйКодЛичности
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ПолучательИИН
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
	|ГДЕ
	|	РасходныйКассовыйОрдер.Ссылка = &РасходныйКассовыйОрдер
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка,
	|	РасходныйКассовыйОрдерРасшифровкаПлатежа.ДоговорКонтрагента,
	|	РасходныйКассовыйОрдерРасшифровкаПлатежа.СтавкаНДС КАК СтавкаНДС,
	|	РасходныйКассовыйОрдерРасшифровкаПлатежа.СуммаНДС КАК СуммаНДС,
	|	РасходныйКассовыйОрдерРасшифровкаПлатежа.СуммаПлатежа,
	|	РасходныйКассовыйОрдерРасшифровкаПлатежа.СуммаВзаиморасчетов
	|
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер.РасшифровкаПлатежа КАК РасходныйКассовыйОрдерРасшифровкаПлатежа
	|ГДЕ
	|	РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка = &РасходныйКассовыйОрдер";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
КонецФункции

Функция ПодготовитьПараметрыПечатиЧека(ДокументСсылка)
	
	СтавкаНДСПоУмолчанию = ПользователиБКВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию(Пользователи.ТекущийПользователь(), "ОсновнаяСтавкаНДС"); 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("РасходныйКассовыйОрдер", ДокументСсылка);
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
	Запрос.УстановитьПараметр("СтавкаНДС", СтавкаНДСПоУмолчанию);	
	НомераТаблиц = Новый Структура;
	
	Запрос.Текст = ТекстЗапросаРеквизитыПечатиЧека(НомераТаблиц) ;    	
	Результат = Запрос.ВыполнитьПакет(); 	
	ПараметрыПечатиЧека = Новый Структура;
	
	Для Каждого НомерТаблицы Из НомераТаблиц Цикл
		ПараметрыПечатиЧека.Вставить(НомерТаблицы.Ключ, Результат[НомерТаблицы.Значение].Выгрузить());
	КонецЦикла;
	
	Возврат ПараметрыПечатиЧека;
	
КонецФункции

#КонецЕсли
