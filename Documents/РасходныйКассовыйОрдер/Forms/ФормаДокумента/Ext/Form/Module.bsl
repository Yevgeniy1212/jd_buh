
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// +++ Проверка заполненности реквизитов организации (банковский счет)
	РеквизитыОрганизацииСсылка = ПроверкаРеквизитовОрганизации.СтрокаСообщенияНеЗаполненБанковскийСчет();
	// --- Проверка заполненности реквизитов организации (банковский счет)
	
	// +++ Проверка заполненности реквизитов организации (касса)
	РеквизитыОрганизацииСсылка_2 = ПроверкаРеквизитовОрганизации.СтрокаСообщенияНеЗаполненаКасса();
	// --- Проверка заполненности реквизитов организации (касса)
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
	КонецЕсли;
	
	УстановитьВидимостьСчетовУчета();
	
	ЗапретРедактированияРеквизитовОбъектовПереопределяемый.ЗаблокироватьРеквизиты(ЭтотОбъект, Объект.Проведен);

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	// РедактированиеДокументовПользователей
	ПраваДоступаКОбъектам.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец РедактированиеДокументовПользователей
	
	ПодготовитьФормуНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(Объект.ВидОперации), Объект.Ссылка, ЭтаФорма);
	УстановитьВидимостьРеквизитовСтруктурногоПодразделения();
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение ИЛИ ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда 
		
		ОплаченныеСчета = Новый Массив;
		
		Если Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаПоставщику Тогда
			
			УникальныеЗначения = Новый Соответствие;
			
			Для Каждого СтрокаРасшифровки Из Объект.РасшифровкаПлатежа Цикл
				СчетНаОплату = СтрокаРасшифровки.СчетНаОплату;
				Если ЗначениеЗаполнено(СчетНаОплату) И УникальныеЗначения[СчетНаОплату] = Неопределено Тогда
					ОплаченныеСчета.Добавить(СчетНаОплату);
					УникальныеЗначения.Вставить(СчетНаОплату, Истина);
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		ПараметрыЗаписи.Вставить("ОплаченныеСчета", ОплаченныеСчета); 
	КонецЕсли;
	
	ЗапретРедактированияРеквизитовОбъектовПереопределяемый.ЗаблокироватьРеквизиты(ЭтотОбъект, Объект.Проведен); 
			
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	ОповещаемыеВедомости = Новый Соответствие;
	
	//Передадим ссылки документов, для заполнения платежного документа в документе
	//"Зарплата к выплате организаций"
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику") Тогда
		
		ОповещаемыеВедомости.Вставить(Объект.ПлатежнаяВедомость, Объект.ПлатежнаяВедомость);
		
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям") Тогда
		
		// Помещаем в список текущий набор ведомостей
		Для Каждого СтрокаТЧ Из Объект.ВыплатаЗаработнойПлаты Цикл
			ОповещаемыеВедомости.Вставить(СтрокаТЧ.Ведомость, СтрокаТЧ.Ведомость)
		КонецЦикла;
		
	КонецЕсли;
	
	Если ОповещаемыеВедомости.Количество() > 0 Тогда
		Оповестить("ИзменениеВыплатыПоВедомостиРегл", ОповещаемыеВедомости);
	КонецЕсли;	

	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.РасчетыПоДоходуОтРазовыхВыплатСКонтрагентами") Тогда
		ОповещаемыеВедомости.Вставить(Объект.ПлатежнаяВедомость, Объект.ПлатежнаяВедомость);
		Оповестить("ИзменениеВыплатыПоВедомостиРегл", ОповещаемыеВедомости); 
	КонецЕсли;

	Если ПараметрыЗаписи.Свойство("ОплаченныеСчета") И ПараметрыЗаписи.ОплаченныеСчета.Количество() > 0 Тогда
		ОповеститьОбИзменении(Тип("ДокументСсылка.СчетНаОплатуПоставщика"));
		Оповестить("ИзмененСтатусДокументов", ПараметрыЗаписи.ОплаченныеСчета, Объект.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_Организации" Тогда
		// +++ Проверка заполненности реквизитов организации (банковский счет)
		Если Источник = Объект.Организация Тогда
			ОбработатьИзмененияВОрганизацииНаСервере();
			Модифицированность = Истина;
		КонецЕсли;
		// --- Проверка заполненности реквизитов организации (банковский счет
	Иначе
		ОбщегоНазначенияБККлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
		
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		КлючеваяОперация = "Документ ""расходный кассовый ордер"" (проведение)";
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "ОбщаяФорма.ФормаДополнительно" Тогда		
		
		РаботаСДиалогамиКлиент.ОбработкаВыбораРеквизитыДополнительно(ЭтаФорма, ВыбранноеЗначение, ИсточникВыбора);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "ОбщаяФорма.РеквизитыПечатиКассовыхДокументов" Тогда		
		
		Если ВыбранноеЗначение <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(Объект, ВыбранноеЗначение);
			Модифицированность = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	
	ТекущийСписокОснованийМассив = Неопределено;
	Если ТипЗнч(СписокОснований) = Тип("Структура") Тогда
		СписокОснований.Свойство("СписокОснований", ТекущийСписокОснованийМассив);
		Если ТекущийСписокОснованийМассив = Неопределено Тогда
			ТекущийСписокОснованийМассив = Новый Массив;
		КонецЕсли;
	Иначе
		ТекущийСписокОснованийМассив = Новый Массив;
	КонецЕсли;
	
	СписокОснованийМассив = СформироватьСписокВыбораОснований();
	СписокОснований = Новый Структура();
	СписокОснований.Вставить("СписокОснований", СписокОснованийМассив); 
		
	Если СписокОснованийМассив.Количество() > 0 Тогда
		// Значение "Основание" заполняем автоматически в случаях:
		// 1. Если Основание не заполнено.
		// 2. Если Основание не было изменено пользователем
		Если НЕ ЗначениеЗаполнено(Объект.Основание) Тогда
			Объект.Основание = СписокОснованийМассив[0];
		ИначеЕсли ТекущийСписокОснованийМассив.Найти(СокрЛП(Объект.Основание)) <> Неопределено Тогда
			Объект.Основание = СписокОснованийМассив[0];
		КонецЕсли;
	КонецЕсли;
	
	ВидОперацииПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;
	
	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ОбщегоНазначенияБККлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата, 
		ТекущаяДатаДокумента, Объект.ВалютаДокумента, ВалютаРегламентированногоУчета);

	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		ДатаПриИзмененииНаСервере();		
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(СтруктурноеПодразделениеОрганизация) Тогда 
		Объект.Организация = Неопределено;
		Объект.СтруктурноеПодразделениеОтправитель = Неопределено;
		Объект.СтруктурноеПодразделениеПолучатель  = Неопределено;
		СтруктурноеПодразделениеОрганизацияОтправитель = Неопределено;
		СтруктурноеПодразделениеОрганизацияПолучатель  = Неопределено;
	Иначе 
		Результат = РаботаСДиалогамиКлиент.ПроверитьИзменениеЗначенийОрганизацииСтруктурногоПодразделения(СтруктурноеПодразделениеОрганизация, Объект.Организация, Объект.СтруктурноеПодразделениеОтправитель);
		Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
			СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(Результат);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если НЕ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВзносНаличнымиВБанк")
		И НЕ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.РасходДенежныхСредствПрочее") Тогда
		РаботаСДиалогамиКлиент.СтруктурноеПодразделениеНачалоВыбора(ЭтаФорма, СтандартнаяОбработка, Объект.Организация, Объект.СтруктурноеПодразделениеОтправитель, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КассаПриИзменении(Элемент)
	
	КассаПриИзмененииКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаОПересчетеСуммыДокумента(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		
		СтруктураРезультатаВыполнения = Новый Структура("НеобходимПересчетСумм", Ложь);
		
		КассаОрганизацииПриИзмененииНаСервере(СтруктураРезультатаВыполнения, Новый Массив);
		
		Возврат;
		
	Иначе
		
		СтруктураРезультатаВыполнения = Параметры;
		
	КонецЕсли;
		
	Если НЕ Параметры = Неопределено И Параметры.Свойство("ИзмененаКасса") Тогда
		
		Если СтруктураРезультатаВыполнения = Неопределено Тогда
			СтруктураРезультатаВыполнения = Новый Структура("НеобходимПересчетСумм", Истина);
		Иначе
			СтруктураРезультатаВыполнения.Вставить("НеобходимПересчетСумм", Истина);
		КонецЕсли;

		КассаОрганизацииПриИзмененииНаСервере(СтруктураРезультатаВыполнения, Новый Массив);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УчитыватьКПНПриИзменении(Элемент)
	
	УчитыватьКПНПриИзмененииНаСервере();
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидУчетаНУПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);
	УстановитьВидимостьСчетовУчета();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидУчетаНУНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияБККлиент.НачалоВыбораЗначенияВидУчетаНУ(Элемент, Объект.ВидУчетаНУ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаДокументаПриИзменении(Элемент)
		
	ПересчетСуммаДокументаПриИзменении(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	КонтрагентПриИзмененииНаСервере();
	УправлениеФормой(ЭтаФорма);
	
	СписокОснованийМассив = СформироватьСписокВыбораОснований();
	СписокОснований = Новый Структура();
	СписокОснований.Вставить("СписокОснований", СписокОснованийМассив);

КонецПроцедуры

&НаКлиенте
Процедура ФизЛицоПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда

		ПодставитьРеквизитыФизЛица(Объект.Контрагент);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияОтправительПрочиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСДиалогамиКлиент.СтруктурноеПодразделениеНачалоВыбора(ЭтаФорма, СтандартнаяОбработка, Объект.Организация, Объект.СтруктурноеПодразделениеОтправитель, Ложь, "ПослеВыбораСтруктурногоПодразделенияОтправитель");
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияПолучательПрочиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСДиалогамиКлиент.СтруктурноеПодразделениеНачалоВыбора(ЭтаФорма, СтандартнаяОбработка, Объект.Организация, Объект.СтруктурноеПодразделениеПолучатель, Ложь, "ПослеВыбораСтруктурногоПодразделенияПолучатель");
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияОтправительПрочееПриИзменении(Элемент)
		
	Если НЕ ЗначениеЗаполнено(СтруктурноеПодразделениеОрганизацияОтправитель) Тогда 
		Объект.СтруктурноеПодразделениеОтправитель     = Неопределено;
        СтруктурноеПодразделениеОрганизацияОтправитель = Объект.Организация
	Иначе 
		Объект.СтруктурноеПодразделениеОтправитель = СтруктурноеПодразделениеОрганизацияОтправитель;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияПолучательПрочееПриИзменении(Элемент)
		
	Если НЕ ЗначениеЗаполнено(СтруктурноеПодразделениеОрганизацияПолучатель) Тогда 
		Объект.СтруктурноеПодразделениеПолучатель     = Неопределено;
		СтруктурноеПодразделениеОрганизацияПолучатель = Объект.Организация;
	Иначе 
		Объект.СтруктурноеПодразделениеПолучатель = СтруктурноеПодразделениеОрганизацияПолучатель;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтатьяДвиженияДенежныхСредствПрочееПриИзменении(Элемент)
	
	УстановитьСтатьюДДСВАналитикеСчета();
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеПриИзменении(Элемент)
	
	Если ТекущийДокументОснование = Объект.ДокументОснование Тогда
		Возврат;
	КонецЕсли; 

	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		ТекстВопроса = НСтр("ru='Заполнить текущий документ данными документа-основания?'");
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаПриИзмененииДокументОснование", ЭтотОбъект, Параметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
	КонецЕсли;
	
	ТекущийДокументОснование = Объект.ДокументОснование;

КонецПроцедуры

&НаКлиенте
Процедура СчетУчетаБУПрочееПриИзменении(Элемент)
	
	Объект.СчетУчетаРасчетовСКонтрагентомНУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", Объект.СчетУчетаРасчетовСКонтрагентомБУ));
	
	ПоляФормы		= Новый Структура("Субконто1, Субконто2, Субконто3",
		"СубконтоДтНУ1", "СубконтоДтНУ2", "СубконтоДтНУ3");

	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриИзмененииСчета(Объект.СчетУчетаРасчетовСКонтрагентомНУ, Объект, ПоляФормы);

	УстановитьЗаголовкиИДоступностьСубконто(ЭтаФорма, Объект.СчетУчетаРасчетовСКонтрагентомБУ,,, Объект.СчетУчетаРасчетовСКонтрагентомНУ);
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтБУ",, "СчетУчетаРасчетовСКонтрагентомБУ");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтНУ",, "СчетУчетаРасчетовСКонтрагентомНУ");
	
	ДанныеОбъекта = Новый Структура("Организация, СубконтоДтБУ1, СубконтоДтБУ2, СубконтоДтБУ3,
									|СубконтоДтНУ1, СубконтоДтНУ2, СубконтоДтНУ3");
			
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
		
	СчетУчетаБУПриИзмененииНаСервере(ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(Объект, ДанныеОбъекта);
	
	УстановитьСтатьюДДСВАналитикеСчета();

КонецПроцедуры

&НаКлиенте
Процедура СчетУчетаНУПриИзменении(Элемент)
	
	УстановитьЗаголовкиИДоступностьСубконто(ЭтаФорма, Объект.СчетУчетаРасчетовСКонтрагентомБУ,,, Объект.СчетУчетаРасчетовСКонтрагентомНУ);
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтНУ",, "СчетУчетаРасчетовСКонтрагентомНУ");
	
	ДанныеОбъекта = Новый Структура("Организация, СубконтоДтНУ1, СубконтоДтНУ2, СубконтоДтНУ3");
			
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
		
	СчетУчетаНУПриИзмененииНаСервере(ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(Объект, ДанныеОбъекта);

КонецПроцедуры

&НаКлиенте
Процедура СубконтоДтБУ1ПриИзменении(Элемент)
	
	ОбщегоНазначенияБККлиентСервер.ЗаменитьСубконтоНУ(Объект, Объект.СчетУчетаРасчетовСКонтрагентомБУ, Объект.СчетУчетаРасчетовСКонтрагентомНУ, 1, Объект.СубконтоДтБУ1, "СубконтоДтНУ");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтБУ",, "СчетУчетаРасчетовСКонтрагентомБУ");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтНУ",, "СчетУчетаРасчетовСКонтрагентомНУ", Истина);
	
	Если ТипЗнч(Объект.СубконтоДтБУ1) = Тип("СправочникСсылка.Контрагенты") Тогда
		Объект.Выдать = Строка(Объект.СубконтоДтБУ1);
	ИначеЕсли ТипЗнч(Объект.СубконтоДтБУ1) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		ПодставитьРеквизитыФизЛица(Объект.СубконтоДтБУ1);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоДтБУ2ПриИзменении(Элемент)
	
	ОбщегоНазначенияБККлиентСервер.ЗаменитьСубконтоНУ(Объект, Объект.СчетУчетаРасчетовСКонтрагентомБУ, Объект.СчетУчетаРасчетовСКонтрагентомНУ, 2, Объект.СубконтоДтБУ2, "СубконтоДтНУ");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтБУ",, "СчетУчетаРасчетовСКонтрагентомБУ");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтНУ",, "СчетУчетаРасчетовСКонтрагентомНУ", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоДтБУ3ПриИзменении(Элемент)
	
	ОбщегоНазначенияБККлиентСервер.ЗаменитьСубконтоНУ(Объект, Объект.СчетУчетаРасчетовСКонтрагентомБУ, Объект.СчетУчетаРасчетовСКонтрагентомНУ, 3, Объект.СубконтоДтБУ3, "СубконтоДтНУ");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтБУ",, "СчетУчетаРасчетовСКонтрагентомБУ");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтНУ",, "СчетУчетаРасчетовСКонтрагентомНУ", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоДтБУ1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СубконтоНачалоВыбора(Элемент, "СубконтоДтБУ", 1, "СчетУчетаРасчетовСКонтрагентомБУ", Объект, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоДтБУ2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СубконтоНачалоВыбора(Элемент, "СубконтоДтБУ", 2, "СчетУчетаРасчетовСКонтрагентомБУ", Объект, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоДтБУ3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СубконтоНачалоВыбора(Элемент, "СубконтоДтБУ", 3, "СчетУчетаРасчетовСКонтрагентомБУ", Объект, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоДтНУ1ПриИзменении(Элемент)
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтНУ",, "СчетУчетаРасчетовСКонтрагентомНУ");
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоДтНУ2ПриИзменении(Элемент)
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтНУ",, "СчетУчетаРасчетовСКонтрагентомНУ");
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоДтНУ3ПриИзменении(Элемент)
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтНУ",, "СчетУчетаРасчетовСКонтрагентомНУ");
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоДтНУ1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СубконтоНачалоВыбора(Элемент, "СубконтоДтНУ", 1, "СчетУчетаРасчетовСКонтрагентомНУ", Объект, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоДтНУ2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СубконтоНачалоВыбора(Элемент, "СубконтоДтНУ", 2, "СчетУчетаРасчетовСКонтрагентомНУ", Объект, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоДтНУ3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СубконтоНачалоВыбора(Элемент, "СубконтоДтНУ", 3, "СчетУчетаРасчетовСКонтрагентомНУ", Объект, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияОтправительВзносНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСДиалогамиКлиент.СтруктурноеПодразделениеНачалоВыбора(ЭтаФорма, СтандартнаяОбработка, Объект.Организация, Объект.СтруктурноеПодразделениеОтправитель, Ложь, "ПослеВыбораСтруктурногоПодразделенияОтправитель");
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияОтправительВзносПриИзменении(Элемент)
		
	Если НЕ ЗначениеЗаполнено(СтруктурноеПодразделениеОрганизацияОтправитель) Тогда 
		Объект.СтруктурноеПодразделениеОтправитель     = Неопределено;
        СтруктурноеПодразделениеОрганизацияОтправитель = Объект.Организация
	Иначе 
		Объект.СтруктурноеПодразделениеОтправитель = СтруктурноеПодразделениеОрганизацияОтправитель;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияПолучательВзносПриИзменении(Элемент)
		
	Если НЕ ЗначениеЗаполнено(СтруктурноеПодразделениеОрганизацияПолучатель) Тогда 
		Объект.СтруктурноеПодразделениеПолучатель     = Неопределено;
		СтруктурноеПодразделениеОрганизацияПолучатель = Объект.Организация;
	Иначе 
		Объект.СтруктурноеПодразделениеПолучатель = СтруктурноеПодразделениеОрганизацияПолучатель;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СчетОрганизацииПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.СчетОрганизации) Тогда
		
		СчетОрганизацииПриИзмененииНаСервере();
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КассаОрганизацииПриИзменении(Элемент)

	КассаПриИзмененииКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияПолучательВзносНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСДиалогамиКлиент.СтруктурноеПодразделениеНачалоВыбора(ЭтаФорма, СтандартнаяОбработка, Объект.Организация, Объект.СтруктурноеПодразделениеПолучатель, Ложь, "ПослеВыбораСтруктурногоПодразделенияПолучатель");
	
КонецПроцедуры

&НаКлиенте
Процедура СтатьяДвиженияДенежныхСредствИнкПриИзменении(Элемент)
	
	УстановитьСтатьюДДСВАналитикеСчета();
	 
КонецПроцедуры

&НаКлиенте
Процедура СчетУчетаИнкБУПрочееПриИзменении(Элемент)
	
	Объект.СчетУчетаРасчетовСКонтрагентомНУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", Объект.СчетУчетаРасчетовСКонтрагентомБУ));
	
	ПоляФормы		= Новый Структура("Субконто1, Субконто2, Субконто3",
		"СубконтоДтНУ1", "СубконтоДтНУ2", "СубконтоДтНУ3");

	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриИзмененииСчета(Объект.СчетУчетаРасчетовСКонтрагентомНУ, Объект, ПоляФормы);

	УстановитьЗаголовкиИДоступностьСубконто(ЭтаФорма, Объект.СчетУчетаРасчетовСКонтрагентомБУ,, "Инк", Объект.СчетУчетаРасчетовСКонтрагентомНУ);
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтБУ", "Инк", "СчетУчетаРасчетовСКонтрагентомБУ");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтНУ", "Инк", "СчетУчетаРасчетовСКонтрагентомНУ");
	
	ДанныеОбъекта = Новый Структура("Организация, СубконтоДтБУ1, СубконтоДтБУ2, СубконтоДтБУ3,
									|СубконтоДтНУ1, СубконтоДтНУ2, СубконтоДтНУ3");
			
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
		
	СчетУчетаБУПриИзмененииНаСервере(ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(Объект, ДанныеОбъекта);
	
	УстановитьСтатьюДДСВАналитикеСчета();

КонецПроцедуры

&НаКлиенте
Процедура СчетУчетаИнкНУПрочееПриИзменении(Элемент)
	
	УстановитьЗаголовкиИДоступностьСубконто(ЭтаФорма, Объект.СчетУчетаРасчетовСКонтрагентомБУ,,"Инк", Объект.СчетУчетаРасчетовСКонтрагентомНУ);
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтНУ", "Инк", "СчетУчетаРасчетовСКонтрагентомНУ");
	
	ДанныеОбъекта = Новый Структура("Организация, СубконтоДтНУ1, СубконтоДтНУ2, СубконтоДтНУ3");
			
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
		
	СчетУчетаНУПриИзмененииНаСервере(ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(Объект, ДанныеОбъекта);

КонецПроцедуры

&НаКлиенте
Процедура СубконтоДтИнкБУ1ПриИзменении(Элемент)
	
	ОбщегоНазначенияБККлиентСервер.ЗаменитьСубконтоНУ(Объект, Объект.СчетУчетаРасчетовСКонтрагентомБУ, Объект.СчетУчетаРасчетовСКонтрагентомНУ, 1, Объект.СубконтоДтБУ1, "СубконтоДтНУ");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтБУ", "Инк", "СчетУчетаРасчетовСКонтрагентомБУ");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтНУ", "Инк", "СчетУчетаРасчетовСКонтрагентомНУ", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоДтИнкБУ2ПриИзменении(Элемент)
	
	ОбщегоНазначенияБККлиентСервер.ЗаменитьСубконтоНУ(Объект, Объект.СчетУчетаРасчетовСКонтрагентомБУ, Объект.СчетУчетаРасчетовСКонтрагентомНУ, 2, Объект.СубконтоДтБУ2, "СубконтоДтНУ");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтБУ", "Инк", "СчетУчетаРасчетовСКонтрагентомБУ");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтНУ", "Инк", "СчетУчетаРасчетовСКонтрагентомНУ", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоДтИнкБУ3ПриИзменении(Элемент)
	
	ОбщегоНазначенияБККлиентСервер.ЗаменитьСубконтоНУ(Объект, Объект.СчетУчетаРасчетовСКонтрагентомБУ, Объект.СчетУчетаРасчетовСКонтрагентомНУ, 3, Объект.СубконтоДтБУ3, "СубконтоДтНУ");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтБУ", "Инк", "СчетУчетаРасчетовСКонтрагентомБУ");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтНУ", "Инк", "СчетУчетаРасчетовСКонтрагентомНУ", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоДтИнкБУ1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СубконтоНачалоВыбора(Элемент, "СубконтоДтБУ", 1, "СчетУчетаРасчетовСКонтрагентомБУ", Объект, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоДтИнкБУ2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СубконтоНачалоВыбора(Элемент, "СубконтоДтБУ", 2, "СчетУчетаРасчетовСКонтрагентомБУ", Объект, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоДтИнкБУ3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СубконтоНачалоВыбора(Элемент, "СубконтоДтБУ", 3, "СчетУчетаРасчетовСКонтрагентомБУ", Объект, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоДтНУ1ИнкПриИзменении(Элемент)
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтНУ", "Инк", "СчетУчетаРасчетовСКонтрагентомНУ");
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоДтНУ2ИнкПриИзменении(Элемент)
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтНУ", "Инк", "СчетУчетаРасчетовСКонтрагентомНУ");
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоДтНУ3ИнкПриИзменении(Элемент)
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтНУ", "Инк", "СчетУчетаРасчетовСКонтрагентомНУ");
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоДтИнкНУ1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СубконтоНачалоВыбора(Элемент, "СубконтоДтНУ", 1, "СчетУчетаРасчетовСКонтрагентомНУ", Объект, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоДтИнкНУ2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СубконтоНачалоВыбора(Элемент, "СубконтоДтНУ", 2, "СчетУчетаРасчетовСКонтрагентомНУ", Объект, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоДтИнкНУ3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СубконтоНачалоВыбора(Элемент, "СубконтоДтНУ", 3, "СчетУчетаРасчетовСКонтрагентомНУ", Объект, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура РаботникПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		РаботникПриИзмененииНаСервере();
	КонецЕсли;
	
	ТекущиеДанные = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	
	Если НЕ ТекущиеДанные = Неопределено Тогда
		ТекущиеДанные.СуммаПлатежа = Объект.СуммаДокумента;
	КонецЕсли

КонецПроцедуры

&НаКлиенте
Процедура РаботникНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	ПараметрыФормы	= Новый Структура;
	ПараметрыФормы.Вставить("ЗакрыватьПриЗакрытииВладельца",	Истина);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе",				Истина);
	ПараметрыФормы.Вставить("РежимВыбора",						Истина);
	ПараметрыФормы.Вставить("ОтборОрганизация", Объект.Организация);
	ПараметрыФормы.Вставить("ВыбиратьФизЛицо", Истина);
	
	Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
	
	ОбработчикОповещения = Новый ОписаниеОповещения("РаботникЗавершениеВыбора", ЭтотОбъект);

	ОткрытьФорму("Справочник.СотрудникиОрганизаций.Форма.ФормаСписка", ПараметрыФормы, Элемент,,,,ОбработчикОповещения, Режим);
	
КонецПроцедуры

&НаКлиенте
Процедура РаботникЗавершениеВыбора(ВыбранноеЗначение, Параметры) Экспорт

	Объект.Контрагент = ВыбранноеЗначение;
	
КонецПроцедуры

&НаКлиенте
Процедура ПлатежнаяВедомостьПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ПлатежнаяВедомость) Тогда
		
		ТекстОснование = НСтр("ru = 'Платежная ведомость № %1'");
		ТекстОснование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОснование, 
			Строка(Объект.ПлатежнаяВедомость));
			
		Объект.Основание = ТекстОснование;
			
	КонецЕсли;
	
	Объект.СуммаДокумента = ПолучитьСуммуВыплаченнойЗарплаты(Объект.Ссылка, Объект.Контрагент, Объект.ПлатежнаяВедомость);
	
КонецПроцедуры

&НаКлиенте
Процедура ПлатежнаяВедомостьНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация",   Объект.Организация);
	
	Если НЕ Объект.Контрагент.Пустая() Тогда
		ПараметрыФормы.Вставить("ФизЛицо",   Объект.Контрагент);
	КонецЕсли;
	
	ПараметрыФормы.Вставить("СпособВыплаты", ПредопределенноеЗначение("Перечисление.СпособыВыплатыЗарплаты.ЧерезКассу"));
	ПараметрыФормы.Вставить("Регистратор",   Объект.Ссылка);

	Если ПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
		ПараметрыФормы.Вставить("СтруктурноеПодразделение", Объект.СтруктурноеПодразделениеОтправитель);
	КонецЕсли;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику") Тогда
		ИмяОткрываемойФормы = "Документ.ЗарплатаКВыплатеОрганизаций.ФормаВыбора";
	Иначе
		ИмяОткрываемойФормы = "Документ.ВедомостьПрочихДоходов.ФормаВыбора";
	КонецЕсли;
	
	ОткрытьФорму(ИмяОткрываемойФормы, Новый Структура("Отбор", ПараметрыФормы), Элемент);

КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
	
КонецПроцедуры

&НаКлиенте
Процедура РеквизитыОрганизацииСсылкаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	// +++ Проверка заполненности реквизитов организации (банковский счет)
	ПроверкаРеквизитовОрганизацииКлиент.РеквизитыОрганизацииСсылкаОбработкаНавигационнойСсылки(Объект.Организация, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	// --- Проверка заполненности реквизитов организации (банковский счет)
	
КонецПроцедуры  

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ВыплатаЗаработнойПлаты

&НаКлиенте
Процедура ВыплатаЗаработнойПлатыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)

	Если НоваяСтрока И ОтменаРедактирования Тогда
		РассчитатьИтоговуюСумму("ВыплатаЗаработнойПлаты", "СуммаКВыплате");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыплатаЗаработнойПлатыПослеУдаления(Элемент)

	РассчитатьИтоговуюСумму("ВыплатаЗаработнойПлаты", "СуммаКВыплате");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыплатаЗаработнойПлатыВедомостьПриИзменении(Элемент)

	СтрокаТабличнойЧасти = Элементы.ВыплатаЗаработнойПлаты.ТекущиеДанные;
	СтрокаТабличнойЧасти.СуммаКВыплате = ПолучитьСуммуКВыплатеПоВедомости(Объект.Ссылка, СтрокаТабличнойЧасти.Ведомость); 
	РассчитатьИтоговуюСумму("ВыплатаЗаработнойПлаты", "СуммаКВыплате");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыплатаЗаработнойПлатыВедомостьНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация",   Объект.Организация);
	ПараметрыФормы.Вставить("СпособВыплаты", ПредопределенноеЗначение("Перечисление.СпособыВыплатыЗарплаты.ЧерезКассу"));
	ПараметрыФормы.Вставить("Регистратор",   Объект.Ссылка);

	Если ПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
		ПараметрыФормы.Вставить("СтруктурноеПодразделение", Объект.СтруктурноеПодразделениеОтправитель);
	КонецЕсли;
	
	ОткрытьФорму("Документ.ЗарплатаКВыплатеОрганизаций.ФормаВыбора", Новый Структура("Отбор", ПараметрыФормы), Элемент);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ РасшифровкаПлатежа

&НаКлиенте
Процедура РасшифровкаПлатежаПередУдалением(Элемент, Отказ)
	
	Отказ = (Объект.РасшифровкаПлатежа.Количество() = 1);

КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПослеУдаления(Элемент)
		
	РассчитатьИтоговуюСумму("РасшифровкаПлатежа");

КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПриИзменении(Элемент)
		
	РассчитатьИтоговуюСумму("РасшифровкаПлатежа");
	
	СписокОснованийМассив = СформироватьСписокВыбораОснований();
	СписокОснований = Новый Структура();
	СписокОснований.Вставить("СписокОснований", СписокОснованийМассив);

КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И НЕ Копирование Тогда
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателю") Тогда
			СтрокаТабличнойЧасти = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
			СтрокаТабличнойЧасти.СтавкаНДС = ПользователиБКВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию(, "ОсновнаяСтавкаНДС");
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		РассчитатьИтоговуюСумму("РасшифровкаПлатежа");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаДоговорКонтрагентаПриИзменении(Элемент)
		
	СтрокаПлатеж = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	
	Если НЕ ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) Тогда
		Возврат;
	КонецЕсли;
	
	ДоговорПриИзмененииНаСервере(СтрокаПлатеж.ПолучитьИдентификатор(), Новый Массив);

КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСделкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	
	СтруктураПараметров = Новый Структура("Организация, Контрагент, ДоговорКонтрагента, Дата, ТипыДокументов",
		Объект.Организация, Объект.Контрагент, ТекущиеДанные.ДоговорКонтрагента, Объект.Дата, УправлениеДенежнымиСредствамиКлиентСервер.ОграничитьТипыДокументовДляДокументовОплаты(ОписаниеТипаСделка, Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателю")));
		
	СчетДляОпределенияОстатков = ТекущиеДанные.СчетУчетаРасчетовСКонтрагентомБУ;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателю") Тогда
		Если ЗначениеЗаполнено(ТекущиеДанные.СчетУчетаРасчетовПоАвансам) Тогда
			СчетДляОпределенияОстатков = ТекущиеДанные.СчетУчетаРасчетовПоАвансам;
		КонецЕсли;
	КонецЕсли;
	
	СтруктураПараметров.Вставить("СчетУчета", СчетДляОпределенияОстатков);
	СтруктураПараметров.Вставить("ОстаткиОбороты", "Кт");

	ПараметрыФормы = Новый Структура("ПараметрыОбъекта", СтруктураПараметров);
	ОткрытьФорму("Документ.ДокументРасчетовСКонтрагентом.ФормаВыбора", ПараметрыФормы, Элемент);

КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСуммаПлатежаПриИзменении(Элемент)
	
	СтрокаПлатеж = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	
	РассчитатьСуммуВзаиморасчетов(СтрокаПлатеж, ЭтаФорма);
	УправлениеДенежнымиСредствамиКлиентСервер.ПересчитатьСуммуНДС(СтрокаПлатеж);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаКурсВзаиморасчетовПриИзменении(Элемент)
	
	РассчитатьСуммуВзаиморасчетов(Элементы.РасшифровкаПлатежа.ТекущиеДанные, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаКурсВзаиморасчетовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.ДоговорКонтрагента) Тогда
		ПоказатьПредупреждение(, НСтр("ru='Для выбора курса взаиморасчетов нужно выбрать договор контрагента'")); 
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура("Валюта", ТекущиеДанные.ДоговорКонтрагентаВалютаВзаиморасчетов);
	СтруктураПараметров.Вставить("ДатаУстановкиКурсаИКратности", Объект.Дата);
	СтруктураПараметров.Вставить("КратностьВалюты", ТекущиеДанные.КратностьВзаиморасчетов);
	СтруктураПараметров.Вставить("КурсВалюты", ТекущиеДанные.КурсВзаиморасчетов);
	
	Оповещение = Новый ОписаниеОповещения("ПослеВводаКурсаКратности", ЭтотОбъект, Параметры);
	ОткрытьФорму("ОбщаяФорма.ФормаВводаКурсаИКратности", СтруктураПараметров,,,,, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаКратностьВзаиморасчетовПриИзменении(Элемент)
	
	РассчитатьСуммуВзаиморасчетов(Элементы.РасшифровкаПлатежа.ТекущиеДанные, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСуммаВзаиморасчетовПриИзменении(Элемент)
	
	СтрокаПлатеж = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	
	УправлениеДенежнымиСредствамиКлиентСервер.ПроверкаКурсовВалют(СтрокаПлатеж);
	Если (СтрокаПлатеж.СуммаВзаиморасчетов<> 0) И (КратностьДокумента <> 0) Тогда
		СтрокаПлатеж.КурсВзаиморасчетов = СтрокаПлатеж.СуммаПлатежа * КурсДокумента * СтрокаПлатеж.КратностьВзаиморасчетов
		                                / СтрокаПлатеж.СуммаВзаиморасчетов / КратностьДокумента;
	КонецЕсли;
	УправлениеДенежнымиСредствамиКлиентСервер.ПересчитатьСуммуНДС(СтрокаПлатеж);
						
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСчетУчетаРасчетовСКонтрагентомБУПриИзменении(Элемент)
	
	СтрокаПлатеж = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентомНУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентомБУ));

КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСтавкаНДСПриИзменении(Элемент)
	
	УправлениеДенежнымиСредствамиКлиентСервер.ПересчитатьСуммуНДС(Элементы.РасшифровкаПлатежа.ТекущиеДанные);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ВыдачаВПодотчет

&НаКлиенте
Процедура ВыдачаВПодотчетПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)

	Если НоваяСтрока И ОтменаРедактирования Тогда
		РассчитатьИтоговуюСумму("ВыдачаВПодотчет");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыдачаВПодотчетПослеУдаления(Элемент)

	РассчитатьИтоговуюСумму("ВыдачаВПодотчет");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыдачаВПодотчетСуммаПлатежаПриИзменении(Элемент)

	РассчитатьИтоговуюСумму("ВыдачаВПодотчет");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ВыплатаПоИсполнительнымЛистам

&НаКлиенте
Процедура ВыплатаПоИсполнительнымЛистамПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)

	Если Объект.ВыплатаПоИсполнительнымЛистам.Количество() = 1 Тогда
		
		ДокументИЛПеречисление = Объект.ВыплатаПоИсполнительнымЛистам[0].Документ;
		
		ЗаполнитьДанныеИсполнительногоЛиста(ДокументИЛПеречисление, Объект.Выдать, Объект.Основание);
		
	КонецЕсли;
	
	РассчитатьИтоговуюСумму("ВыплатаПоИсполнительнымЛистам", "СуммаКВыплате");

КонецПроцедуры
		
&НаКлиенте
Процедура ВыплатаПоИсполнительнымЛистамПослеУдаления(Элемент)

	РассчитатьИтоговуюСумму("ВыплатаПоИсполнительнымЛистам", "СуммаКВыплате");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыплатаПоИсполнительнымЛистамДокументПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ВыплатаПоИсполнительнымЛистам.ТекущиеДанные;
	ТекущиеДанные.СуммаКВыплате = ПолучитьСуммуКВыплатеПоИсполнительномуЛисту(ТекущиеДанные.Документ); 
	РассчитатьИтоговуюСумму("ВыплатаПоИсполнительнымЛистам", "СуммаКВыплате");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыплатаПоИсполнительнымЛистамДокументНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	Отбор = Новый Структура;
	Отбор.Вставить("Организация", Объект.Организация);
	Отбор.Вставить("СпособПеречисления", ПредопределенноеЗначение("Перечисление.СпособыПеречисленияПоИсполнительномуЛисту.ЧерезКассу"));
	
	Если ПоддержкаРаботыСоСтруктурнымиПодразделениями ИЛИ ЗначениеЗаполнено(Объект.СтруктурноеПодразделениеОтправитель) Тогда
		Отбор.Вставить("СтруктурноеПодразделение", Объект.СтруктурноеПодразделениеОтправитель);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", Отбор);
	
	ТекущиеДанные = Элементы.ВыплатаПоИсполнительнымЛистам.ТекущиеДанные;
	
	Если НЕ ТекущиеДанные = Неопределено Тогда
		
		ПараметрыФормы.Вставить("ТекущаяСтрока", ТекущиеДанные.Документ);
		
	КонецЕсли;
	
	ОткрытьФорму("Документ.ИЛПеречислениеПолучателям.ФормаВыбора", ПараметрыФормы, Элемент);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура РеквизитыПечати(Команда)
	
	РаботаСДиалогамиКлиент.ОткрытьРеквизитыПечати(ЭтаФорма, "РасходныйКассовыйОрдер");

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Функция СформироватьСписокВыбораОснований()
	//вставим предопределенные значения для выбора оснований
	//1. Вид операции
	//2. По данным договора
	//3. вид операции + договор
	//4. документ-основание
	
	КодЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	
	Основания = Новый Массив(); 
	
	ТекстВидОперации = "";
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаПоставщику Тогда 		
		ТекстВидОперации = НСтр("ru='Оплата поставщику'", КодЯзыка);		
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетнику Тогда		
		ТекстВидОперации = НСтр("ru='Выдача денежных средств подотчетнику'", КодЯзыка);		
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям Тогда
		ТекстВидОперации = НСтр("ru='Выплата заработной платы по ведомостям'", КодЯзыка);		
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику Тогда
		ТекстВидОперации = НСтр("ru='Выплата заработной платы сотруднику'", КодЯзыка);			
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк Тогда
		ТекстВидОперации = НСтр("ru='Взнос наличными в банк'", КодЯзыка);			
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ИнкассацияДенежныхСредств Тогда
		ТекстВидОперации = НСтр("ru='Инкассация денежных средств'", КодЯзыка);		
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателю Тогда
		ТекстВидОперации = НСтр("ru='Возврат денежных средств покупателю'", КодЯзыка);		
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИЗаймамСКонтрагентами Тогда
		ТекстВидОперации = НСтр("ru='Расчеты по кредитам и займам с контрагентами'", КодЯзыка);
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаПоИсполнительнымЛистам Тогда
		ТекстВидОперации = НСтр("ru='Выплата по исполнительным листам'", КодЯзыка);
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийРКО.РасчетыПоДоходуОтРазовыхВыплатСКонтрагентами Тогда
		ТекстВидОперации = НСтр("ru='Расчеты по доходу от разовых выплат с контрагентами'", КодЯзыка);   
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаСтруктурномуПодразделению Тогда
		ТекстВидОперации = НСтр("ru='Оплата структурному подразделению'", КодЯзыка);
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийРКО.РасходДенежныхСредствПрочее Тогда
		ТекстВидОперации = НСтр("ru='Прочий расход денежных средств'", КодЯзыка);
	Иначе
		ТекстВидОперации = Строка(Объект.ВидОперации);
	КонецЕсли;
	
	Основания.Добавить(ТекстВидОперации);
		
	Если Объект.РасшифровкаПлатежа.Количество() > 0 Тогда
		
		СтрокаПлатеж = Объект.РасшифровкаПлатежа.Получить(0);
		
		Если ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) Тогда			
			
			ТекстВыбора = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='по договору №%1 от %2'", КодЯзыка),
								?(НЕ ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента.НомерДоговора), "_______", СтрокаПлатеж.ДоговорКонтрагента.НомерДоговора),
								?(ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента.ДатаДоговора), Формат(СтрокаПлатеж.ДоговорКонтрагента.ДатаДоговора, "Л=" + КодЯзыка + "; ДФ=dd.MM.yyyy"), "_______"));
			
			Основания.Добавить(ТекстВыбора);
			Основания.Добавить(ТекстВидОперации + " " + ТекстВыбора); 
			
		КонецЕсли;
		
	КонецЕсли;
	
	//если документ-основание заполнен, добавим его в список оснований
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда 
				
		ТекстДокументОснование = "";
		
		Если ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") Тогда
			ТекстДокументОснование = НСтр("ru='Приходный кассовый ордер'", КодЯзыка);
		ИначеЕсли ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ИЛПеречислениеПолучателям") Тогда
			ТекстДокументОснование = НСтр("ru='ИЛ перечисление получателям'", КодЯзыка);
		ИначеЕсли ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.СчетНаОплатуПоставщика") Тогда
			ТекстДокументОснование = НСтр("ru='Счет на оплату от поставщика'", КодЯзыка);
		ИначеЕсли ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ПоступлениеДопРасходов") Тогда
			ТекстДокументОснование = НСтр("ru='Поступление доп. расходов'", КодЯзыка);
		ИначеЕсли ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ПоступлениеНМА") Тогда
			ТекстДокументОснование = НСтр("ru='Поступление НМА'", КодЯзыка);
		ИначеЕсли ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
			ТекстДокументОснование = НСтр("ru='Возврат ТМЗ от покупателя'", КодЯзыка);
		ИначеЕсли ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.РасчетНалоговПриПоступленииАктивовУслуг") Тогда
			ТекстДокументОснование = НСтр("ru='Расчет налогов при поступлении активов и услуг'", КодЯзыка);
		ИначеЕсли ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
			ТекстДокументОснование = НСтр("ru='Поступление ТМЗ и услуг'", КодЯзыка);
	    ИначеЕсли ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ВедомостьПрочихДоходов") Тогда
			ТекстДокументОснование = НСтр("ru='Ведомость прочих доходов'", КодЯзыка);
	 	ИначеЕсли ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ПоступлениеИзПереработки") Тогда
			ТекстДокументОснование = НСтр("ru='Поступление из переработки'", КодЯзыка);
		ИначеЕсли ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ЗарплатаКВыплатеОрганизаций") Тогда
			ТекстДокументОснование = НСтр("ru='Зарплата к выплате организаций'", КодЯзыка); 
		Иначе
			ТекстДокументОснование = Строка(Объект.ДокументОснование);
		КонецЕсли;
		
		Попытка
			ПредставлениеДок = РаботаСДиалогами.СформироватьЗаголовокДокумента(Объект.ДокументОснование, ТекстДокументОснование,,,,КодЯзыка);	
		Исключение
			ПредставлениеДок = Строка(Объект.ДокументОснование);
		КонецПопытки;
		
		Основания.Добавить(ПредставлениеДок);
		
	КонецЕсли; 	
	
	Возврат Основания;
	
КонецФункции

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
     ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
     ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры
 
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
     ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
     ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	                     
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	Форма.ВидимостьНалоговогоУчета = Объект.УчитыватьКПН И (Форма.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль ИЛИ Объект.ВидУчетаНУ = ПредопределенноеЗначение("Справочник.ВидыУчетаНУ.НУ"));
	
	// Доступность взаимосвязанных полей
	Элементы.ВидУчетаНУ.Видимость            = Объект.УчитыватьКПН;
	Элементы.ДекорацияВидУчетаНУ.Видимость   = (НЕ Объект.УчитыватьКПН) ИЛИ (НЕ Форма.ОрганизацияПлательщикНалогаНаПрибыль);
	Элементы.ДекорацияУчитыватьКПН.Видимость = НЕ Форма.ОрганизацияПлательщикНалогаНаПрибыль;
	
	Элементы.Касса.Видимость 	 = Истина;
	Элементы.СчетОрганизации.Видимость 	 = Истина;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВзносНаличнымиВБанк") Тогда
		
		Элементы.Касса.Видимость 	 = Ложь;
		// +++ Проверка заполненности реквизитов организации (банковский счет)
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СчетОрганизации", "Видимость", Форма.ИспользоватьНесколькоБанковскихСчетовОрганизации);
		// --- Проверка заполненности реквизитов организации (банковский счет)
	КонецЕсли;	
	
	Элементы.ВидОперации.ТолькоПросмотр = Форма.ТолькоПросмотр ИЛИ ЗначениеЗаполнено(Объект.НомерЧекаККМ);
	Элементы.НапечататьЧек.Доступность  = НЕ Форма.ТолькоПросмотр И НЕ ЗначениеЗаполнено(Объект.НомерЧекаККМ);
	
	ВидимостьЧеков = (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателю"));
	
	Элементы.НапечататьЧек.Видимость = ВидимостьЧеков;
	Элементы.ФискальнаяОперацияСтатус.Видимость = ВидимостьЧеков;
										
КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	ОписаниеТипаСделка = Новый ОписаниеТипов(Метаданные.Документы.РасходныйКассовыйОрдер.ТабличныеЧасти.РасшифровкаПлатежа.Реквизиты.Сделка.Тип);
	
	ТекущаяДатаДокумента = Объект.Дата;
	ТекущийДокументОснование = Объект.ДокументОснование;
	ТекущаяВалютаДокумента = Объект.ВалютаДокумента;
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	ПоддержкаРаботыСоСтруктурнымиПодразделениями = ПолучитьФункциональнуюОпцию("ПоддержкаРаботыСоСтруктурнымиПодразделениями");
	ВедетсяУчетПоРасчетнымДокументам = УправлениеВзаиморасчетамиСервер.ВедутсяВзаиморасчетыПоДокументам();
	
	УстановитьФункциональныеОпцииФормы();
	
	Если Документы.РасходныйКассовыйОрдер.ЕстьРасшифровкаПлатежа(Объект.ВидОперации) И Объект.РасшифровкаПлатежа.Количество() = 0 Тогда
		НоваяСтрока = Объект.РасшифровкаПлатежа.Добавить();
	КонецЕсли;
	
	Элементы.РасшифровкаПлатежа.ТекущаяСтрока = 0;

	УстановитьКурсДокумента();
	
	ЗаполнитьДобавленныеКолонкиТаблиц();

	// теперь в форме документа, ранее в "ЗаполнитьРеквизитыРасчетногоДокумента"
	ЕстьРасшифровкаПлатежа = Документы.РасходныйКассовыйОрдер.ЕстьРасшифровкаПлатежа(Объект.ВидОперации);

	Если ЕстьРасшифровкаПлатежа Тогда
		
		СписокВидовДоговоров = УправлениеВзаиморасчетамиСервер.ОпределитьВидДоговораСКонтрагентом(Объект.ВидОперации);
		
		Элементы.РасшифровкаПлатежаСчетНаОплату.Видимость = (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ОплатаПоставщику"));	
		
	КонецЕсли;

	УстановитьПараметрыВыбораСчетовУчетаДенежныхСредств();
	УстановитьПараметрыВыбораДоговораСКонтрагентом(ЭтотОбъект);
	
	СписокОснованийМассив = СформироватьСписокВыбораОснований();
	СписокОснований = Новый Структура();
	СписокОснований.Вставить("СписокОснований", СписокОснованийМассив);
	
	Если Параметры.Ключ.Пустая() И НЕ ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
		
		ПроцедурыНалоговогоУчета.ПриИзмененииПризнакаОтраженияВНалоговомУчете(Объект.Организация, Объект.Дата, Объект.УчитыватьКПН, Истина);	
		
		ЗаполнитьКонтрагента();
		
		ЗаполнятьПервоначальныеСведенияПриУстановкеОперации();
		
		Если НЕ ЗначениеЗаполнено(Объект.Основание) И СписокОснованийМассив.Количество() > 0 Тогда
			Объект.Основание = СписокОснованийМассив[0];
		КонецЕсли;
	
		ПричиныИзмененияСчетовУчета = Новый Массив;
		ПричиныИзмененияСчетовУчета.Добавить("Касса");
		ЗаполнитьСчетаУчета(ПричиныИзмененияСчетовУчета, "Касса");
	
	КонецЕсли;
	
	РаботаСДиалогами.УстановитьЗаголовокЭлементуУправленияУчитыватьКПН(Объект.Организация, Элементы.УчитыватьКПН);
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(Объект.ВидОперации), Объект.Ссылка, ЭтаФорма);
	
	// Установить тип поля Контрагент.
	УстановитьТипКонтрагент();
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтБУ",, "СчетУчетаРасчетовСКонтрагентомБУ");	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтНУ",, "СчетУчетаРасчетовСКонтрагентомНУ");
		
	УстановитьВидимостьСтраницНаСервере();
	
	УстановитьВидимостьРеквизитовСтруктурногоПодразделения();

	Если Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ИнкассацияДенежныхСредств Тогда
		
		ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтБУ", "Инк", "СчетУчетаРасчетовСКонтрагентомБУ");	
		ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтНУ", "Инк", "СчетУчетаРасчетовСКонтрагентомНУ");
		
		УстановитьЗаголовкиИДоступностьСубконто(ЭтаФорма, Объект.СчетУчетаРасчетовСКонтрагентомБУ,, "Инк", Объект.СчетУчетаРасчетовСКонтрагентомНУ);

	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийРКО.РасходДенежныхСредствПрочее Тогда
		
		ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтБУ",, "СчетУчетаРасчетовСКонтрагентомБУ");	
		ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтНУ",, "СчетУчетаРасчетовСКонтрагентомНУ");
		
		УстановитьЗаголовкиИДоступностьСубконто(ЭтаФорма, Объект.СчетУчетаРасчетовСКонтрагентомБУ,,, Объект.СчетУчетаРасчетовСКонтрагентомНУ);
		
	КонецЕсли;

	// +++ Проверка заполненности реквизитов организации (банковский счет)
	ОсновнойБанковскийСчетОрганизацииЗаполнен = ПроверкаРеквизитовОрганизации.ОсновнойБанковскийСчетОрганизацииЗаполнен(Объект.Организация);
	ПроверкаРеквизитовОрганизации.ОтобразитьПредупреждениеОЗаполненииРеквизитовСчета(ЭтотОбъект);
	// --- Проверка заполненности реквизитов организации (банковский счет)
	
	// +++ Проверка заполненности реквизитов организации (касса)
	ОсновнаяКассаОрганизацииЗаполнена = ПроверкаРеквизитовОрганизации.ОсновнаяКассаОрганизацииЗаполнена(Объект.Организация);
	ПроверкаРеквизитовОрганизации.ОтобразитьПредупреждениеОЗаполненииРеквизитовКассы(ЭтотОбъект);
	// --- Проверка заполненности реквизитов организации (касса)
	
	ФискальнаяОперацияОбновитьСтатус();
	
	УправлениеФормой(ЭтотОбъект);
		
	ОбщегоНазначенияБК.УстановитьТекстАвтора(НадписьАвтор, Объект.Автор);
		
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()
	
	ОбщегоНазначенияБККлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);
	
	ОрганизацияПлательщикНалогаНаПрибыль = ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Объект.Организация, Объект.Дата);
	
	ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль 	= ОрганизацияПлательщикНалогаНаПрибыль И ПроцедурыНалоговогоУчета.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль(Объект.Организация, Объект.Дата);
	
	ИспользоватьПодключаемоеОборудование = ОбщегоНазначенияБКВызовСервера.ИспользоватьПодключаемоеОборудование();
	
	// +++ Проверка заполненности реквизитов организации (банковский счет)
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ИспользоватьНесколькоБанковскихСчетовОрганизации = Справочники.БанковскиеСчета.ИспользуетсяНесколькоБанковскихСчетовОрганизации(Объект.Организация);
	Иначе
		ИспользоватьНесколькоБанковскихСчетовОрганизации = Истина;
	КонецЕсли;
	// --- Проверка заполненности реквизитов организации (банковский счет)
	
	// +++ Проверка заполненности реквизитов организации (касса)
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ИспользоватьНесколькоКассОрганизации = Справочники.Кассы.ИспользуетсяНесколькоКасс(Объект.Организация);
	Иначе
		ИспользоватьНесколькоКассОрганизации = Истина;
	КонецЕсли;
	// --- Проверка заполненности реквизитов организации (касса)
КонецПроцедуры

&НаСервере
Процедура УчитыватьКПНПриИзмененииНаСервере()
	
	ПроцедурыНалоговогоУчета.ЗаполнитьВидУчетаНУ(Объект.УчитыватьКПН, Объект.ВидУчетаНУ);
	
	УстановитьВидимостьСчетовУчета();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьКурсДокумента()
	
	СтруктураКурса = ОбщегоНазначенияБК.ПолучитьКурсВалюты(Объект.ВалютаДокумента, Объект.Дата);
	КурсДокумента      = СтруктураКурса.Курс;
	КратностьДокумента = СтруктураКурса.Кратность;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыВыбораСчетовУчетаДенежныхСредств()
	
	Если Не СчетаУчетаВДокументахВызовСервераПовтИсп.ПользовательУправляетСчетамиУчета() Тогда
		Возврат;
	КонецЕсли;
	
	МассивОтбора = Новый Массив;
	МассивОтбора.Добавить(ПланыСчетов.Типовой.ДенежныеСредстваВКассе);
	
	СчетаКассы = ПроцедурыБухгалтерскогоУчета.ЗаполнитьСписокВыбораСчетов(МассивОтбора);
	
	НовыйМассивПараметров = Новый Массив;
	НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", Новый ФиксированныйМассив(СчетаКассы.ВыгрузитьЗначения())));
	НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ЗапретитьИспользоватьВПроводках", Ложь));
	НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Забалансовый", Ложь));
	
	Элементы.СчетКасса.ПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассивПараметров);
    Элементы.СчетКассаОрганизации.ПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассивПараметров);

	МассивОтбора = Новый Массив;
	МассивОтбора.Добавить(ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПодотчетныхЛиц);
	МассивОтбора.Добавить(ПланыСчетов.Типовой.ДолгосрочнаяЗадолженностьПодотчетныхЛиц);
	МассивОтбора.Добавить(ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПередПодотчетнымиЛицами);	
	МассивОтбора.Добавить(ПланыСчетов.Типовой.ДолгосрочнаяЗадолженностьПередПодотчетнымиЛицами);
	
	СчетаРасчетов = ПроцедурыБухгалтерскогоУчета.ЗаполнитьСписокВыбораСчетов(МассивОтбора);
	
	НовыйМассивПараметров = Новый Массив;
	НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", Новый ФиксированныйМассив(СчетаРасчетов.ВыгрузитьЗначения())));
	НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ЗапретитьИспользоватьВПроводках", Ложь));
	
	Элементы.СчетРасчетовСПодотчетнымЛицом.ПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассивПараметров);
	
	МассивОтбора = Новый Массив;
	МассивОтбора.Добавить(ПланыСчетов.Типовой.ДенежныеСредстваНаТекущихБанковскихСчетах);
	МассивОтбора.Добавить(ПланыСчетов.Типовой.ДенежныеСредстваНаКорреспондентскихСчетах);
	МассивОтбора.Добавить(ПланыСчетов.Типовой.ДенежныеСредстваНаСберегательныхСчетах);
	МассивОтбора.Добавить(ПланыСчетов.Типовой.ПрочиеДенежныеСредства);

	СчетаБанк = ПроцедурыБухгалтерскогоУчета.ЗаполнитьСписокВыбораСчетов(МассивОтбора, Истина, Объект.СчетКасса);
	
	НовыйМассивПараметров = Новый Массив;
	НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", Новый ФиксированныйМассив(СчетаБанк.ВыгрузитьЗначения())));
	НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ЗапретитьИспользоватьВПроводках", Ложь));
	НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Забалансовый", Ложь));

	Элементы.СчетБанк.ПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассивПараметров);
	
	МассивОтбора = Новый Массив;
	МассивОтбора.Добавить(ПланыСчетов.Типовой.ДенежныеСредстваВПути);
	
	СчетИнкассация = ПроцедурыБухгалтерскогоУчета.ЗаполнитьСписокВыбораСчетов(МассивОтбора);
	
	НовыйМассивПараметров = Новый Массив;
	НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", Новый ФиксированныйМассив(СчетИнкассация.ВыгрузитьЗначения())));
	НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ЗапретитьИспользоватьВПроводках", Ложь));

	Элементы.СчетУчетаИнкБУПрочее.ПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассивПараметров);

	МассивОтбора = Новый Массив;
	МассивОтбора.Добавить(ПланыСчетов.Налоговый.ДенежныеСредстваВПути);

	СчетИнкассацияНУ = ПроцедурыБухгалтерскогоУчета.ЗаполнитьСписокВыбораСчетов(МассивОтбора,,,, "Налоговый");
	
	НовыйМассивПараметров = Новый Массив;
	НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", Новый ФиксированныйМассив(СчетИнкассацияНУ.ВыгрузитьЗначения())));
	НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ЗапретитьИспользоватьВПроводках", Ложь));

	Элементы.СчетУчетаИнкНУПрочее.ПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассивПараметров);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьПараметрыВыбораДоговораСКонтрагентом(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	НовыеПараметры = Новый Массив();
	ВидыДоговора   = Новый ФиксированныйМассив(Форма.СписокВидовДоговоров.ВыгрузитьЗначения());
	НовыеПараметры.Добавить(Новый ПараметрВыбора("Отбор.ВидДоговора", ВидыДоговора));
	
	Если ЗначениеЗаполнено(Объект.ВалютаДокумента) Тогда
		
		НовыеПараметры.Добавить(Новый ПараметрВыбора("Отбор.ВалютаВзаиморасчетов", Объект.ВалютаДокумента));
		
	КонецЕсли;
	
	Элементы.РасшифровкаПлатежаДоговорКонтрагента.ПараметрыВыбора = Новый ФиксированныйМассив(НовыеПараметры);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблиц()
	
	Если Объект.РасшифровкаПлатежа.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МассивДоговоров    = Объект.РасшифровкаПлатежа.Выгрузить(, "ДоговорКонтрагента").ВыгрузитьКолонку("ДоговорКонтрагента");
	СвойстваДоговоров  = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
		МассивДоговоров, "ВалютаВзаиморасчетов, ВедениеВзаиморасчетов");
	
	Для Каждого СтрокаПлатеж Из Объект.РасшифровкаПлатежа Цикл
		
		Если ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) Тогда
			СтрокаПлатеж.ДоговорКонтрагентаВалютаВзаиморасчетов  = СвойстваДоговоров[СтрокаПлатеж.ДоговорКонтрагента].ВалютаВзаиморасчетов;
			СтрокаПлатеж.ДоговорКонтрагентаВедениеВзаиморасчетов = СвойстваДоговоров[СтрокаПлатеж.ДоговорКонтрагента].ВедениеВзаиморасчетов;
		Иначе
			СтрокаПлатеж.ДоговорКонтрагентаВалютаВзаиморасчетов   = Справочники.Валюты.ПустаяСсылка();
			СтрокаПлатеж.ДоговорКонтрагентаВедениеВзаиморасчетов  = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПустаяСсылка();
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКонтрагента()

	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		Возврат;
	КонецЕсли;
	
	ВремКонтрагент = Неопределено;
	Если Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателю Тогда
		ВремКонтрагент = ПользователиБКВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию(, "ОсновнойПокупатель");

	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаПоставщику Тогда
		ВремКонтрагент = ПользователиБКВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию(, "ОсновнойПоставщик");		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Контрагент) И НЕ ВремКонтрагент = Неопределено Тогда
		
		Объект.Контрагент = ВремКонтрагент;
		
		ПричиныИзмененияСчетовУчета = Новый Массив;
		
		// проставим основной договор контрагента
		КонтрагентОбработатьИзменениеНаСервере(ПричиныИзмененияСчетовУчета);	
		ДоговорПриИзмененииНаСервере(, ПричиныИзмененияСчетовУчета);
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнятьПервоначальныеСведенияПриУстановкеОперации()
	
	ДоступныеСчета = Неопределено;
	
	// контроль счета в операциях		
	Если Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетнику Тогда
		
		Если Элементы.СчетРасчетовСПодотчетнымЛицом.ПараметрыВыбора.Количество() > 0 Тогда
			Если Элементы.СчетРасчетовСПодотчетнымЛицом.ПараметрыВыбора[0].Имя = "Отбор.Ссылка" Тогда
				ДоступныеСчета = Элементы.СчетРасчетовСПодотчетнымЛицом.ПараметрыВыбора[0].Значение;		
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ДоступныеСчета = Неопределено И ДоступныеСчета.Найти(Объект.СчетУчетаРасчетовСКонтрагентомБУ) = Неопределено Тогда
			Объект.СчетУчетаРасчетовСКонтрагентомБУ = "";                                                                                              			
		КонецЕсли;
		// установка значения по умолчанию
		Если НЕ ДоступныеСчета = Неопределено И НЕ ЗначениеЗаполнено(Объект.СчетУчетаРасчетовСКонтрагентомБУ) 
			И ДоступныеСчета.Количество() > 0 Тогда
			Объект.СчетУчетаРасчетовСКонтрагентомБУ = ДоступныеСчета[0];
		КонецЕсли;
		
	КонецЕсли;
	
	ДоступныеСчета = Неопределено;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк Тогда
		
		Если Элементы.СчетБанк.ПараметрыВыбора.Количество() > 0 Тогда
			Если Элементы.СчетБанк.ПараметрыВыбора[0].Имя = "Отбор.Ссылка" Тогда
				ДоступныеСчета = Элементы.СчетБанк.ПараметрыВыбора[0].Значение;		
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ДоступныеСчета = Неопределено И ДоступныеСчета.Найти(Объект.СчетУчетаРасчетовСКонтрагентомБУ) = Неопределено Тогда
			Объект.СчетУчетаРасчетовСКонтрагентомБУ = "";                                                                                              			
		КонецЕсли;
		// установка значения по умолчанию
		Если НЕ ДоступныеСчета = Неопределено И НЕ ЗначениеЗаполнено(Объект.СчетУчетаРасчетовСКонтрагентомБУ) 
			И ДоступныеСчета.Количество() > 0 Тогда
			Объект.СчетУчетаРасчетовСКонтрагентомБУ = ДоступныеСчета[0];
		КонецЕсли;
		
	КонецЕсли;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк ИЛИ 
		Объект.ВидОперации = Перечисления.ВидыОперацийРКО.РасходДенежныхСредствПрочее Тогда
		
		Если НЕ ЗначениеЗаполнено(Объект.СтруктурноеПодразделениеПолучатель) И ПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
			Объект.СтруктурноеПодразделениеПолучатель = Объект.СтруктурноеПодразделениеОтправитель;
		КонецЕсли;
		
		// для других видов операций очищаем значение СтруктурноеПодразделениеПолучатель 
	Иначе
		
		Если ЗначениеЗаполнено(Объект.СтруктурноеПодразделениеПолучатель) Тогда
			Объект.СтруктурноеПодразделениеПолучатель = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
		КонецЕсли;
		
	КонецЕсли;
	
	ДоступныеСчета = Неопределено;

	Если Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ИнкассацияДенежныхСредств Тогда
		
		Если Элементы.СчетУчетаИнкБУПрочее.ПараметрыВыбора.Количество() > 0 Тогда
			Если Элементы.СчетУчетаИнкБУПрочее.ПараметрыВыбора[0].Имя = "Отбор.Ссылка" Тогда
				ДоступныеСчета = Элементы.СчетУчетаИнкБУПрочее.ПараметрыВыбора[0].Значение;		
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ДоступныеСчета = Неопределено И ДоступныеСчета.Найти(Объект.СчетУчетаРасчетовСКонтрагентомБУ) = Неопределено Тогда
			Объект.СчетУчетаРасчетовСКонтрагентомБУ = "";                                                                                              			
		КонецЕсли;
		// установка значения по умолчанию
		Если НЕ ДоступныеСчета = Неопределено И НЕ ЗначениеЗаполнено(Объект.СчетУчетаРасчетовСКонтрагентомБУ)
			И ДоступныеСчета.Количество() > 0 Тогда
			Объект.СчетУчетаРасчетовСКонтрагентомБУ = ДоступныеСчета[0];
		КонецЕсли;
		
		Если Элементы.СчетУчетаИнкНУПрочее.ПараметрыВыбора.Количество() > 0 Тогда
			Если Элементы.СчетУчетаИнкНУПрочее.ПараметрыВыбора[0].Имя = "Отбор.Ссылка" Тогда
				ДоступныеСчета = Элементы.СчетУчетаИнкНУПрочее.ПараметрыВыбора[0].Значение;		
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ДоступныеСчета = Неопределено И ДоступныеСчета.Найти(Объект.СчетУчетаРасчетовСКонтрагентомНУ) = Неопределено Тогда
			Объект.СчетУчетаРасчетовСКонтрагентомНУ = "";                                                                                              			
		КонецЕсли;
		// установка значения по умолчанию
		Если НЕ ДоступныеСчета = Неопределено И НЕ ЗначениеЗаполнено(Объект.СчетУчетаРасчетовСКонтрагентомНУ)
			И ДоступныеСчета.Количество() > 0 Тогда
			Объект.СчетУчетаРасчетовСКонтрагентомНУ = ДоступныеСчета[0];
		КонецЕсли;	
		
	КонецЕсли;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям
	 ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику
	 ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаПоИсполнительнымЛистам Тогда

		Объект.ВалютаДокумента = ВалютаРегламентированногоУчета;		

	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьТипКонтрагент(ПричиныИзмененияСчетовУчета = Неопределено)

	ИмяСправочника         = "Контрагенты";

	Если Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетнику
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику Тогда

		ИмяСправочника = "ФизическиеЛица";
		Элементы.ФизЛицо.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка." + ИмяСправочника);
		Элементы.Работник.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка." + ИмяСправочника);
		
	КонецЕсли;

	Если ТипЗнч(Объект.Контрагент) <> Тип("СправочникСсылка." + ИмяСправочника) Тогда
		Объект.Контрагент = Справочники[ИмяСправочника].ПустаяСсылка();
		Если ПричиныИзмененияСчетовУчета <> Неопределено Тогда
			ПричиныИзмененияСчетовУчета.Добавить("Контрагент");
		КонецЕсли;
	КонецЕсли;
	
	Элементы.Контрагент.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка." + ИмяСправочника);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьСтраницНаСервере()
	
	МассивСтраниц = Новый Массив;
	МассивСтраниц.Добавить(Элементы.ГруппаРКО);
	МассивСтраниц.Добавить(Элементы.ГруппаВыдачаПодотчетнику);
	МассивСтраниц.Добавить(Элементы.ГруппаПрочее);
	МассивСтраниц.Добавить(Элементы.ГруппаВыплатаЗаработнойПлаты);
	МассивСтраниц.Добавить(Элементы.ГруппаВзносНаличнымиВБанк);
	МассивСтраниц.Добавить(Элементы.ГруппаИнкассация);
	МассивСтраниц.Добавить(Элементы.ГруппаВыплатаПоИсполнительнымЛистам);
	МассивСтраниц.Добавить(Элементы.ГруппаВыплатаЗПРаботнику);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Контрагент", "Видимость", Ложь);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФизЛицо", "Видимость", Ложь);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СтатьяДвиженияДенежныхСредствВыплатаЗП", "Видимость", Ложь);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СтатьяДвиженияДенежныхСредствИнк", "Видимость", Ложь);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СтатьяДвиженияДенежныхСредствИсполнительныеЛисты", "Видимость", Ложь);
	
	ПрочиеДоходы = (Объект.ВидОперации = Перечисления.ВидыОперацийРКО.РасчетыПоДоходуОтРазовыхВыплатСКонтрагентами);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПлатежнаяВедомостьПрочиеДоходы", "Видимость", ПрочиеДоходы);
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетнику Тогда
		
		Элементы.ГруппаСтраницыПоОперациям.ТекущаяСтраница = Элементы.ГруппаВыдачаПодотчетнику;
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФизЛицо", "Видимость", Истина);
				
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк Тогда
		
		Элементы.ГруппаСтраницыПоОперациям.ТекущаяСтраница = Элементы.ГруппаВзносНаличнымиВБанк;
		
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ИнкассацияДенежныхСредств Тогда
		
		Элементы.ГруппаСтраницыПоОперациям.ТекущаяСтраница = Элементы.ГруппаИнкассация;
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СтатьяДвиженияДенежныхСредствИнк", "Видимость", Истина);
		
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийРКО.РасходДенежныхСредствПрочее Тогда
		
		Элементы.ГруппаСтраницыПоОперациям.ТекущаяСтраница = Элементы.ГруппаПрочее;
		
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям Тогда
		
		Элементы.ГруппаСтраницыПоОперациям.ТекущаяСтраница = Элементы.ГруппаВыплатаЗаработнойПлаты;
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СтатьяДвиженияДенежныхСредствВыплатаЗП", "Видимость", Истина);
		
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику Тогда
		
		Элементы.ГруппаСтраницыПоОперациям.ТекущаяСтраница = Элементы.ГруппаВыплатаЗПРаботнику;
		
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаПоИсполнительнымЛистам Тогда
		
		Элементы.ГруппаСтраницыПоОперациям.ТекущаяСтраница = Элементы.ГруппаВыплатаПоИсполнительнымЛистам;
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СтатьяДвиженияДенежныхСредствИсполнительныеЛисты", "Видимость", Истина);
		
	ИначеЕсли ЕстьРасшифровкаПлатежа Тогда
		
		Элементы.ГруппаСтраницыПоОперациям.ТекущаяСтраница = Элементы.ГруппаРКО;
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Контрагент", "Видимость", Истина);
		
	КонецЕсли;
	
	Для Каждого ТекСтраница Из МассивСтраниц Цикл
		Если ТекСтраница <> Элементы.ГруппаСтраницыПоОперациям.ТекущаяСтраница Тогда
			Если ТекСтраница.Видимость Тогда
				ТекСтраница.Видимость = Ложь;
			КонецЕсли;
		Иначе
			Если НЕ ТекСтраница.Видимость Тогда
				ТекСтраница.Видимость = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьРеквизитовСтруктурногоПодразделения()
	
	РаботаСДиалогамиКлиентСервер.УстановитьВидимостьСтруктурногоПодразделения(Объект.Организация, Объект.СтруктурноеПодразделениеОтправитель, СтруктурноеПодразделениеОрганизацияОтправитель, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	РаботаСДиалогамиКлиентСервер.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделениеОрганизацияОтправительПрочее, Объект.СтруктурноеПодразделениеОтправитель, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	РаботаСДиалогамиКлиентСервер.УстановитьВидимостьСтруктурногоПодразделения(Объект.Организация, Объект.СтруктурноеПодразделениеПолучатель, СтруктурноеПодразделениеОрганизацияПолучатель, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	РаботаСДиалогамиКлиентСервер.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделениеОрганизацияПолучательПрочее, Объект.СтруктурноеПодразделениеПолучатель, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	
	РаботаСДиалогамиКлиентСервер.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделениеОрганизацияОтправительВзнос, Объект.СтруктурноеПодразделениеОтправитель, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	РаботаСДиалогамиКлиентСервер.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделениеОрганизацияПолучательВзнос, Объект.СтруктурноеПодразделениеПолучатель, ПоддержкаРаботыСоСтруктурнымиПодразделениями);

	Если Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк 
		 ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРКО.РасходДенежныхСредствПрочее Тогда

		СтруктурноеПодразделениеОрганизация = Объект.Организация;
		
		РаботаСДиалогамиКлиентСервер.УстановитьВидимостьСтруктурногоПодразделения(Объект.Организация, Справочники.ПодразделенияОрганизаций.ПустаяСсылка(), СтруктурноеПодразделениеОрганизация, Ложь);
		РаботаСДиалогамиКлиентСервер.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделение, Справочники.ПодразделенияОрганизаций.ПустаяСсылка(), Ложь);
		
		// Заполнение реквизитов формы "СтруктурноеПодразделение"
		Если ПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
			Если Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк Тогда
				Элементы.СтруктурноеПодразделениеОрганизацияОтправительВзнос.Видимость = Истина;
				Элементы.СтруктурноеПодразделениеОрганизацияПолучательВзнос.Видимость  = Истина;
			Иначе
				Элементы.СтруктурноеПодразделениеОрганизацияОтправительПрочее.Видимость = Истина;
				Элементы.СтруктурноеПодразделениеОрганизацияПолучательПрочее.Видимость  = Истина;
			КонецЕсли;                                            		
			
			Если Параметры.Ключ.Пустая() И НЕ ЗначениеЗаполнено(Объект.СтруктурноеПодразделениеОтправитель) Тогда
				СтруктурноеПодразделениеОрганизацияОтправитель = Объект.Организация;
			Иначе
				СтруктурноеПодразделениеОрганизацияОтправитель = ?(ЗначениеЗаполнено(Объект.СтруктурноеПодразделениеОтправитель), Объект.СтруктурноеПодразделениеОтправитель, Объект.Организация);
			КонецЕсли;	
			
			Если Параметры.Ключ.Пустая() И НЕ ЗначениеЗаполнено(Объект.СтруктурноеПодразделениеПолучатель) Тогда
				СтруктурноеПодразделениеОрганизацияПолучатель = Объект.Организация;
			Иначе
				СтруктурноеПодразделениеОрганизацияПолучатель = ?(ЗначениеЗаполнено(Объект.СтруктурноеПодразделениеПолучатель), Объект.СтруктурноеПодразделениеПолучатель, Объект.Организация);
			КонецЕсли;	
			
		Иначе 
			Если НЕ Параметры.Ключ.Пустая() И ЗначениеЗаполнено(Объект.СтруктурноеПодразделениеОтправитель) ИЛИ ЗначениеЗаполнено(Объект.СтруктурноеПодразделениеПолучатель) Тогда
				
				Если Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк Тогда
					Элементы.СтруктурноеПодразделениеОрганизацияОтправительВзнос.Видимость = Истина;
					Элементы.СтруктурноеПодразделениеОрганизацияПолучательВзнос.Видимость  = Истина;
				Иначе
					Элементы.СтруктурноеПодразделениеОрганизацияОтправительПрочее.Видимость = Истина;
					Элементы.СтруктурноеПодразделениеОрганизацияПолучательПрочее.Видимость  = Истина;
				КонецЕсли;
				
				СтруктурноеПодразделениеОрганизацияОтправитель = ?(ЗначениеЗаполнено(Объект.СтруктурноеПодразделениеОтправитель), Объект.СтруктурноеПодразделениеОтправитель, Объект.Организация);
				СтруктурноеПодразделениеОрганизацияПолучатель  = ?(ЗначениеЗаполнено(Объект.СтруктурноеПодразделениеПолучатель), Объект.СтруктурноеПодразделениеПолучатель, Объект.Организация);
			Иначе
				Если Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк Тогда
					Элементы.СтруктурноеПодразделениеОрганизацияОтправительВзнос.Видимость = Ложь;
					Элементы.СтруктурноеПодразделениеОрганизацияПолучательВзнос.Видимость  = Ложь;
				Иначе
					Элементы.СтруктурноеПодразделениеОрганизацияОтправительПрочее.Видимость = Ложь;
					Элементы.СтруктурноеПодразделениеОрганизацияПолучательПрочее.Видимость  = Ложь;
				КонецЕсли;  
			КонецЕсли;
		КонецЕсли;
						
	//для других операций, даем выбор только одного структурного подразделения, которое будет хранится в реквзите "СтруктурноеПодразделениеОтправитель"
	Иначе
	
		Если ПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
			Если Параметры.Ключ.Пустая() И НЕ ЗначениеЗаполнено(Объект.СтруктурноеПодразделениеОтправитель) Тогда
				СтруктурноеПодразделениеОрганизация = Объект.Организация;
			Иначе
				СтруктурноеПодразделениеОрганизация = ?(ЗначениеЗаполнено(Объект.СтруктурноеПодразделениеОтправитель), Объект.СтруктурноеПодразделениеОтправитель, Объект.Организация);
			КонецЕсли;	
			РаботаСДиалогамиКлиентСервер.УстановитьВидимостьСтруктурногоПодразделения(Объект.Организация, Объект.СтруктурноеПодразделениеОтправитель, СтруктурноеПодразделениеОрганизация, Истина);
			РаботаСДиалогамиКлиентСервер.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделение, Объект.СтруктурноеПодразделениеОтправитель, Истина);
		Иначе 
			Если НЕ Параметры.Ключ.Пустая() И ЗначениеЗаполнено(Объект.СтруктурноеПодразделениеОтправитель) Тогда
				СтруктурноеПодразделениеОрганизация = ?(ЗначениеЗаполнено(Объект.СтруктурноеПодразделениеОтправитель), Объект.СтруктурноеПодразделениеОтправитель, Объект.Организация);
				РаботаСДиалогамиКлиентСервер.УстановитьВидимостьСтруктурногоПодразделения(Объект.Организация, Объект.СтруктурноеПодразделениеОтправитель, СтруктурноеПодразделениеОрганизация, Истина);
				РаботаСДиалогамиКлиентСервер.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделение, Объект.СтруктурноеПодразделениеОтправитель, Истина);
			Иначе
				РаботаСДиалогамиКлиентСервер.УстановитьВидимостьСтруктурногоПодразделения(Объект.Организация, Объект.СтруктурноеПодразделениеОтправитель, СтруктурноеПодразделениеОрганизация, Ложь);
				РаботаСДиалогамиКлиентСервер.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделение, Объект.СтруктурноеПодразделениеОтправитель, Ложь);
			КонецЕсли;
			РаботаСДиалогамиКлиентСервер.УстановитьВидимостьСтруктурногоПодразделения(Объект.Организация, Объект.СтруктурноеПодразделениеОтправитель, СтруктурноеПодразделениеОрганизация, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
			РаботаСДиалогамиКлиентСервер.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделение, Объект.СтруктурноеПодразделениеОтправитель, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьПараметрыВыбораПолейСубконто(Форма, Суффикс, Постфикс = "", ИмяСчета, ЗаменаСубконтоНУ = Ложь)
	
	ПараметрыДокумента = СписокПараметровВыбораСубконто(Форма.Объект, Форма.Объект, "Субконто" + Суффикс + "%Индекс%", ИмяСчета);
	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(Форма, Форма.Объект, "Субконто" + Суффикс + "%Индекс%", "Субконто" + Суффикс + "%Индекс%" + Постфикс, ПараметрыДокумента, ЗаменаСубконтоНУ);	
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СписокПараметровВыбораСубконто(ДанныеОбъекта, ПараметрыОбъекта, ШаблонИмяПоляОбъекта, ИмяСчета)
	
	СписокПараметров = Новый Структура;
	Для Индекс = 1 По 3 Цикл
		ИмяПоля = СтрЗаменить(ШаблонИмяПоляОбъекта, "%Индекс%", Индекс);
		Если ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Контрагенты") Тогда
			СписокПараметров.Вставить("Контрагент", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			СписокПараметров.Вставить("ДоговорКонтрагента", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
			СписокПараметров.Вставить("ВалютаДенежныхСредств", ПараметрыОбъекта.ВалютаДокумента);
		КонецЕсли;
	КонецЦикла;
	СписокПараметров.Вставить("СчетУчета", 				  ПараметрыОбъекта[ИмяСчета]);	
	СписокПараметров.Вставить("Организация", 			  ДанныеОбъекта.Организация);
	СписокПараметров.Вставить("СтруктурноеПодразделение", ДанныеОбъекта.СтруктурноеПодразделениеПолучатель);
	СписокПараметров.Вставить("ВыбиратьПодразделенияОрганизации", Истина);

	Возврат СписокПараметров; 

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовкиИДоступностьСубконто(Форма, СчетУчета, Префикс = "", Постфикс = "", СчетУчетаНУ = Неопределено, ЭтоТаблица = Ложь)

	ПоляФормы = Новый Структура("Субконто1, Субконто2, Субконто3",
		Префикс + "СубконтоДтБУ1" + Постфикс,
		Префикс + "СубконтоДтБУ2" + Постфикс,
		Префикс + "СубконтоДтБУ3" + Постфикс);
	
	ЗаголовкиПолей = Новый Структура("Субконто1, Субконто2, Субконто3",
		"ЗаголовокСубконтоДтБУ1", "ЗаголовокСубконтоДтБУ2", "ЗаголовокСубконтоДтБУ3");

	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриВыбореСчета(СчетУчета, Форма, ПоляФормы, ЗаголовкиПолей);
	
	Если НЕ СчетУчетаНУ = Неопределено Тогда
		
		Для Каждого ПолеФормы Из ПоляФормы Цикл
			
			ПоляФормы.Вставить(ПолеФормы.Ключ, СтрЗаменить(ПолеФормы.Значение, "БУ", "НУ"));
			
		КонецЦикла;
		
		Для Каждого ЗаголовоеПоля Из ЗаголовкиПолей Цикл
			
			ЗаголовкиПолей.Вставить(ЗаголовоеПоля.Ключ, СтрЗаменить(ЗаголовоеПоля.Значение, "БУ", "НУ"));
			
		КонецЦикла;
		
		ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриВыбореСчета(СчетУчетаНУ, Форма, ПоляФормы, ЗаголовкиПолей);
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ВидОперацииПриИзмененииНаСервере()
	
	ПричиныИзмененияСчетовУчета = Новый Массив;
	ПричиныИзмененияСчетовУчета.Добавить("ВидОперации");
	
	ПроверитьСоответсвиеКонтрагентаВидуОперации(Объект.ВидОперации, Объект.Контрагент, ПричиныИзмененияСчетовУчета);
	
	ЕстьРасшифровкаПлатежа = Документы.РасходныйКассовыйОрдер.ЕстьРасшифровкаПлатежа(Объект.ВидОперации);

	Если ЕстьРасшифровкаПлатежа Тогда
	
		СписокВидовДоговоров = УправлениеВзаиморасчетамиСервер.ОпределитьВидДоговораСКонтрагентом(Объект.ВидОперации);  
		
		Элементы.РасшифровкаПлатежаСчетНаОплату.Видимость = (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ОплатаПоставщику"));		
		
	КонецЕсли;
	
	Объект.РасшифровкаПлатежа.Очистить();
	Объект.ВыдачаВПодотчет.Очистить();
	Объект.ВыплатаЗаработнойПлаты.Очистить();
	Объект.ВыплатаПоИсполнительнымЛистам.Очистить();
	Объект.ПлатежнаяВедомость = Неопределено;
	
	СтрокаПлатеж = Объект.РасшифровкаПлатежа.Добавить();
	СтрокаПлатеж.СуммаПлатежа = Объект.СуммаДокумента;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателю Тогда
		Если ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНДС(Объект.Организация, Объект.Дата) Тогда 
			СтрокаПлатеж.СтавкаНДС = ПользователиБКВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию(, "ОсновнаяСтавкаНДС");
		КонецЕсли;
		УправлениеДенежнымиСредствамиКлиентСервер.ПересчитатьСуммуНДС(СтрокаПлатеж);
	КонецЕсли;
	
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(Объект.ВидОперации), Объект.Ссылка, ЭтаФорма);
	
	ЗаполнятьПервоначальныеСведенияПриУстановкеОперации();
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям 
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаПоИсполнительнымЛистам
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРКО.РасходДенежныхСредствПрочее
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ИнкассацияДенежныхСредств
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк Тогда
		Объект.Контрагент = Неопределено;
	КонецЕсли; 
	
	УстановитьВидимостьСтраницНаСервере();
	
	УстановитьВидимостьРеквизитовСтруктурногоПодразделения();
	
	УстановитьТипКонтрагент(ПричиныИзмененияСчетовУчета);
	
	Если Документы.РасходныйКассовыйОрдер.ЕстьРасшифровкаПлатежа(Объект.ВидОперации) Тогда
		УстановитьПараметрыВыбораДоговораСКонтрагентом(ЭтотОбъект);
	КонецЕсли;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ИнкассацияДенежныхСредств Тогда
		
		ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтБУ", "Инк", "СчетУчетаРасчетовСКонтрагентомБУ");	
		ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтНУ", "Инк", "СчетУчетаРасчетовСКонтрагентомНУ");
		
		УстановитьЗаголовкиИДоступностьСубконто(ЭтаФорма, Объект.СчетУчетаРасчетовСКонтрагентомБУ,, "Инк", Объект.СчетУчетаРасчетовСКонтрагентомНУ);

	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийРКО.РасходДенежныхСредствПрочее Тогда
		
		ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтБУ",, "СчетУчетаРасчетовСКонтрагентомБУ");	
		ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтНУ",, "СчетУчетаРасчетовСКонтрагентомНУ");
		
		УстановитьЗаголовкиИДоступностьСубконто(ЭтаФорма, Объект.СчетУчетаРасчетовСКонтрагентомБУ,,, Объект.СчетУчетаРасчетовСКонтрагентомНУ);
		
	КонецЕсли;
	
	ЗаполнитьСчетаУчета(ПричиныИзмененияСчетовУчета, "ВидОперации");
	
	// +++ Проверка заполненности реквизитов организации (банковский счет)
	ОсновнойБанковскийСчетОрганизацииЗаполнен = ПроверкаРеквизитовОрганизации.ОсновнойБанковскийСчетОрганизацииЗаполнен(Объект.Организация);
	ПроверкаРеквизитовОрганизации.ОтобразитьПредупреждениеОЗаполненииРеквизитовСчета(ЭтотОбъект);
	// --- Проверка заполненности реквизитов организации (банковский счет)

	// +++ Проверка заполненности реквизитов организации (касса)
	ОсновнаяКассаОрганизацииЗаполнена = ПроверкаРеквизитовОрганизации.ОсновнаяКассаОрганизацииЗаполнена(Объект.Организация);
	ПроверкаРеквизитовОрганизации.ОтобразитьПредупреждениеОЗаполненииРеквизитовКассы(ЭтотОбъект);
	// --- Проверка заполненности реквизитов организации (касса)
	
	УправлениеФормой(ЭтотОбъект);
	
	УстановитьВидимостьСчетовУчета();
	
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииНаСервере()
	
	УстановитьФункциональныеОпцииФормы();
	
	РаботаСДиалогами.ПриИзмененииЗначенияДатыДокумента(Объект, ВалютаРегламентированногоУчета,, Истина);
	
	ПроцедурыНалоговогоУчета.ПриИзмененииПризнакаОтраженияВНалоговомУчете(Объект.Организация, Объект.Дата, Объект.УчитыватьКПН, Истина);
	ПроцедурыНалоговогоУчета.ЗаполнитьВидУчетаНУ(Объект.УчитыватьКПН, Объект.ВидУчетаНУ);
	
	УстановитьКурсДокумента();

	Для Каждого СтрокаПлатеж Из Объект.РасшифровкаПлатежа Цикл
		РассчитатьСуммуВзаиморасчетов(СтрокаПлатеж, ЭтаФорма);
	КонецЦикла;
	
	ТекущаяДатаДокумента = Объект.Дата;
	
	УправлениеФормой(ЭтаФорма);
	
	УстановитьВидимостьСчетовУчета();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаПриИзмененииДокументОснование(Результат, Параметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;	
	КонецЕсли;
	
	ПослеЗакрытияВопросаПриИзмененииДокументОснованиеНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗакрытияВопросаПриИзмененииДокументОснованиеНаСервере()
	
	ИсходныеДанные = Новый Структура("Организация, Касса");
	ЗаполнитьЗначенияСвойств(ИсходныеДанные, Объект);
	
	Объект.РасшифровкаПлатежа.Очистить();
	Объект.ВыдачаВподотчет.Очистить();
	Объект.ВыплатаЗаработнойПлаты.Очистить();
	Объект.ВыплатаПоИсполнительнымЛистам.Очистить();
	
	Документы.РасходныйКассовыйОрдер.ЗаполнитьПоДокументуОснованию(Объект, Объект.ДокументОснование);
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	ЕстьРасшифровкаПлатежа = Документы.РасходныйКассовыйОрдер.ЕстьРасшифровкаПлатежа(Объект.ВидОперации);
	
	Если Объект.РасшифровкаПлатежа.Количество() = 0 Тогда
		НоваяСтрока = Объект.РасшифровкаПлатежа.Добавить();
	КонецЕсли;
	
	Элементы.РасшифровкаПлатежа.ТекущаяСтрока = 0;
	
	Если НЕ ИсходныеДанные.Организация = Объект.Организация  Тогда
		ПараметрыОбработки = Новый Структура;
		ПараметрыОбработки.Вставить("ИзмененаОрганизация", ИсходныеДанные.Организация <> Объект.Организация);
		ПараметрыОбработки.Вставить("ИзмененоСтруктурноеПодразделение", ИсходныеДанные.Организация <> Объект.Организация);
		ОрганизацияПриИзмененииНаСервере(ПараметрыОбработки, Неопределено);
	КонецЕсли;
	
	Если ИсходныеДанные.Касса <> Объект.Касса Тогда
		КассаОрганизацииПриИзмененииНаСервере(Неопределено, Новый Массив);
	КонецЕсли;
	
	УстановитьВидимостьРеквизитовСтруктурногоПодразделения();	
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(Объект.ВидОперации), Объект.Ссылка, ЭтаФорма);

	УстановитьВидимостьСтраницНаСервере();
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ИнкассацияДенежныхСредств Тогда
		
		ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтБУ", "Инк", "СчетУчетаРасчетовСКонтрагентомБУ");	
		ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтНУ", "Инк", "СчетУчетаРасчетовСКонтрагентомНУ");
		
		УстановитьЗаголовкиИДоступностьСубконто(ЭтаФорма, Объект.СчетУчетаРасчетовСКонтрагентомБУ,, "Инк", Объект.СчетУчетаРасчетовСКонтрагентомНУ);

	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийРКО.РасходДенежныхСредствПрочее Тогда
		
		ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтБУ",, "СчетУчетаРасчетовСКонтрагентомБУ");	
		ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтНУ",, "СчетУчетаРасчетовСКонтрагентомНУ");
		
		УстановитьЗаголовкиИДоступностьСубконто(ЭтаФорма, Объект.СчетУчетаРасчетовСКонтрагентомБУ,,, Объект.СчетУчетаРасчетовСКонтрагентомНУ);
		
	КонецЕсли;
	
	УстановитьФункциональныеОпцииФормы();
	УправлениеФормой(ЭтаФорма);
	УстановитьВидимостьСчетовУчета();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораСтруктурногоПодразделенияПолучатель(Результат, Параметры) Экспорт
	
	РаботаСДиалогамиКлиент.ПослеВыбораСтруктурногоПодразделения(Результат, Объект.Организация, Объект.СтруктурноеПодразделениеПолучатель, СтруктурноеПодразделениеОрганизацияПолучатель);
	Если Результат.ИзмененоСтруктурноеПодразделение Тогда
		Модифицированность = Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтруктурноеПодразделениеОрганизация) Тогда
		Объект.Организация					= Результат.Организация;
		СтруктурноеПодразделениеОрганизация = Результат.Организация;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораСтруктурногоПодразделенияОтправитель(Результат, Параметры) Экспорт
	
	РаботаСДиалогамиКлиент.ПослеВыбораСтруктурногоПодразделения(Результат, Объект.Организация, Объект.СтруктурноеПодразделениеОтправитель, СтруктурноеПодразделениеОрганизацияОтправитель);
	Если Результат.ИзмененоСтруктурноеПодразделение Тогда
		Модифицированность = Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтруктурноеПодразделениеОрганизация) Тогда
		Объект.Организация					= Результат.Организация;
		СтруктурноеПодразделениеОрганизация = Результат.Организация;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораСтруктурногоПодразделения(Результат, Параметры) Экспорт
	
	РаботаСДиалогамиКлиент.ПослеВыбораСтруктурногоПодразделения(Результат, Объект.Организация, Объект.СтруктурноеПодразделениеОтправитель, СтруктурноеПодразделениеОрганизация);
	Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
		Модифицированность = Истина;
		Результат.Вставить("НеобходимоИзменитьЗначенияРеквизитовОбъекта", Ложь);
		СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(Результат);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(Параметры)

	СтруктураРезультатаВыполнения = Неопределено;
	СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(Параметры, СтруктураРезультатаВыполнения);

КонецПроцедуры

&НаСервере
Процедура СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(СтруктураПараметров = Неопределено, СтруктураРезультатаВыполнения)
	
	Если СтруктураПараметров = Неопределено	ИЛИ (СтруктураПараметров.Свойство("НеобходимоИзменитьЗначенияРеквизитовОбъекта") 
				И СтруктураПараметров.НеобходимоИзменитьЗначенияРеквизитовОбъекта) Тогда 
		РаботаСДиалогами.СтруктурноеПодразделениеПриИзменении(СтруктурноеПодразделениеОрганизация, Объект.Организация, Объект.СтруктурноеПодразделениеОтправитель, СтруктураПараметров);
	КонецЕсли;
	
	ОчиститьЭлементыУправленияПриСменеОрганизацииСтруктурногоПодразделения();
	
	ОрганизацияПриИзмененииНаСервере(СтруктураПараметров, СтруктураРезультатаВыполнения);
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере(СтруктураПараметров, СтруктураРезультатаВыполнения)
	
	Если НЕ СтруктураПараметров.ИзмененаОрганизация И НЕ СтруктураПараметров.ИзмененоСтруктурноеПодразделение Тогда
		Возврат;
	КонецЕсли;
	
	ПричиныИзмененияСчетовУчета = Новый Массив;
	Если СтруктураПараметров.ИзмененаОрганизация Тогда
		ПричиныИзмененияСчетовУчета.Добавить("Организация");
	КонецЕсли;
	
	УстановитьФункциональныеОпцииФормы();
		
	Если ЗначениеЗаполнено(Объект.СтруктурноеПодразделениеПолучатель) Тогда
		Объект.Касса = Объект.СтруктурноеПодразделениеПолучатель.ОсновнаяКасса;
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВзносНаличнымиВБанк") Тогда
			Объект.СчетОрганизации = Объект.СтруктурноеПодразделениеПолучатель.ОсновнойБанковскийСчет;
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(Объект.Организация) Тогда
		Объект.Касса = Объект.Организация.ОсновнаяКасса;
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВзносНаличнымиВБанк") Тогда
			Объект.СчетОрганизации = Объект.Организация.ОсновнойБанковскийСчет;
		КонецЕсли;
	Иначе
		Объект.Касса = Справочники.Кассы.ПустаяСсылка();
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВзносНаличнымиВБанк") Тогда
			Объект.СчетОрганизации = Справочники.БанковскиеСчета.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
		
	КассаОрганизацииПриИзмененииНаСервере(, ПричиныИзмененияСчетовУчета);

	Если Объект.Организация.Пустая() Тогда

		Объект.Касса = "";
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВзносНаличнымиВБанк") Тогда
			Объект.СчетОрганизации = "";
		КонецЕсли;

	КонецЕсли;
	
	Если ПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
		УправлениеДенежнымиСредствамиСервер.СтруктурноеПодразделениеПриИзменении(Объект, СтруктураПараметров);
	КонецЕсли;
	
	Если ЕстьРасшифровкаПлатежа Тогда
		УправлениеДенежнымиСредствамиСервер.ПроверитьСоответствиеОрганизацииДоговора(Объект, СтруктураПараметров);
	КонецЕсли;

	РаботаСДиалогами.ПриИзмененииЗначенияОрганизации(Объект, , СтруктураРезультатаВыполнения);
	ПроцедурыНалоговогоУчета.ПриИзмененииПризнакаОтраженияВНалоговомУчете(Объект.Организация, Объект.Дата, Объект.УчитыватьКПН, Истина);	
	ПроцедурыНалоговогоУчета.ЗаполнитьВидУчетаНУ(Объект.УчитыватьКПН, Объект.ВидУчетаНУ);
	РаботаСДиалогами.УстановитьЗаголовокЭлементуУправленияУчитыватьКПН(Объект.Организация, Элементы.УчитыватьКПН);
    
	 Если Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРКО.РасходДенежныхСредствПрочее  Тогда		
		
		Если ПоддержкаРаботыСоСтруктурнымиПодразделениями И ЗначениеЗаполнено(СтруктурноеПодразделениеОрганизацияОтправитель) И СтруктурноеПодразделениеОрганизацияОтправитель.Владелец <> Объект.Организация Тогда
			СтруктурноеПодразделениеОрганизацияОтправитель = Объект.Организация;
			Объект.СтруктурноеПодразделениеОтправитель	   = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Значение в поле ""Структурная единица (отправитель)"" не соответствует выбранной организации и было изменено.'"));
		КонецЕсли;
		
		Если ПоддержкаРаботыСоСтруктурнымиПодразделениями И ЗначениеЗаполнено(СтруктурноеПодразделениеОрганизацияПолучатель) И СтруктурноеПодразделениеОрганизацияПолучатель <> Объект.Организация Тогда
			СтруктурноеПодразделениеОрганизацияПолучатель = Объект.Организация;
			Объект.СтруктурноеПодразделениеПолучатель	  = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Значение в поле ""Структурная единица (получатель)"" не соответствует выбранной организации и было изменено.'"));
		КонецЕсли;
	КонецЕсли;
	
	ПроверитьВладельцаСубконтоПодразделениеБУНУ(Объект);
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ИнкассацияДенежныхСредств Тогда
		
		ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтБУ", "Инк", "СчетУчетаРасчетовСКонтрагентомБУ");	
		ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтНУ", "Инк", "СчетУчетаРасчетовСКонтрагентомНУ");
		
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийРКО.РасходДенежныхСредствПрочее Тогда
		
		ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтБУ",, "СчетУчетаРасчетовСКонтрагентомБУ");	
		ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтНУ",, "СчетУчетаРасчетовСКонтрагентомНУ");
		
	КонецЕсли;
	
	// +++ Проверка заполненности реквизитов организации (банковский счет)
	ОсновнойБанковскийСчетОрганизацииЗаполнен = ПроверкаРеквизитовОрганизации.ОсновнойБанковскийСчетОрганизацииЗаполнен(Объект.Организация);
	ПроверкаРеквизитовОрганизации.ОтобразитьПредупреждениеОЗаполненииРеквизитовСчета(ЭтотОбъект);
	// --- Проверка заполненности реквизитов организации (банковский счет)
	
	// +++ Проверка заполненности реквизитов организации (касса)
	ОсновнаяКассаОрганизацииЗаполнена = ПроверкаРеквизитовОрганизации.ОсновнаяКассаОрганизацииЗаполнена(Объект.Организация);
	ПроверкаРеквизитовОрганизации.ОтобразитьПредупреждениеОЗаполненииРеквизитовКассы(ЭтотОбъект);
	// --- Проверка заполненности реквизитов организации (касса)
	
	УправлениеФормой(ЭтаФорма);
	УстановитьВидимостьСчетовУчета();
	
КонецПроцедуры

&НаСервере
Процедура КассаОрганизацииПриИзмененииНаСервере(СтруктураРезультатаВыполнения = Неопределено, ПричиныИзмененияСчетовУчета)
	
	Если Объект.Касса.Пустая() Тогда
		Возврат;
	КонецЕсли;

	ПричиныИзмененияСчетовУчета.Добавить("Касса");
	
	УстановитьПараметрыВыбораДоговораСКонтрагентом(ЭтотОбъект);

	Если Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк Тогда
		
		Если (НЕ Объект.СчетКасса.Валютный = Объект.СчетУчетаРасчетовСКонтрагентомБУ.Валютный) 
		 ИЛИ НЕ ЗначениеЗаполнено(Объект.СчетУчетаРасчетовСКонтрагентомБУ) Тогда
		 
			Объект.СчетУчетаРасчетовСКонтрагентомБУ = "";
		КонецЕсли;
		
		Если НЕ Объект.СчетОрганизации.Пустая() 
		    И (Объект.СчетОрганизации.ВалютаДенежныхСредств <> Объект.Касса.ВалютаДенежныхСредств) Тогда
			
			ТекстСообщения  = НСтр("ru = 'Валюта выбранного банковского счета не соответствует валюте выбранной кассы'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , "СчетОрганизации", "Объект");

			Объект.СчетОрганизации = "";			
		КонецЕсли;
		
	КонецЕсли; 
	
	ЗаполнитьСчетаУчета(ПричиныИзмененияСчетовУчета, "Касса");
	
	Если НЕ Объект.СчетКасса.Пустая() Тогда
		СчетКассаПриИзмененииНаСервере(СтруктураРезультатаВыполнения);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Касса.ВалютаДенежныхСредств) И (Объект.Касса.ВалютаДенежныхСредств <> Объект.ВалютаДокумента) Тогда
		Объект.ВалютаДокумента = Объект.Касса.ВалютаДенежныхСредств;
		ВалютыДокументаПриИзмененииНаСервере(СтруктураРезультатаВыполнения);
	КонецЕсли;
		
	УправлениеФормой(ЭтаФорма);
	
Конецпроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииНаСервере()
	
	ПричиныИзмененияСчетовУчета = Новый Массив;
	
	ПроверитьСоответсвиеКонтрагентаВидуОперации(Объект.ВидОперации, Объект.Контрагент, ПричиныИзмененияСчетовУчета);
	
	КонтрагентОбработатьИзменениеНаСервере(ПричиныИзмененияСчетовУчета);
	
	ДоговорПриИзмененииНаСервере(, ПричиныИзмененияСчетовУчета);

КонецПроцедуры

&НаСервере
Процедура КонтрагентОбработатьИзменениеНаСервере(ПричиныИзмененияСчетовУчета)
	
	Если ПричиныИзмененияСчетовУчета.Найти("Контрагент") = Неопределено Тогда
		ПричиныИзмененияСчетовУчета.Добавить("Контрагент");
	КонецЕсли;

	ВосстанавливатьРеквизиты = (Объект.РасшифровкаПлатежа.Количество() = 1);
	
	СтрокаПлатеж = Объект.РасшифровкаПлатежа[0];
	
	СтараяСтатьяДДС = СтрокаПлатеж.СтатьяДвиженияДенежныхСредств;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИЗаймамСКонтрагентами Тогда
		СчетРасчетовБУ = СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентомБУ;
		СчетРасчетовНУ = СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентомНУ;
	КонецЕсли;
                             	
	Объект.РасшифровкаПлатежа.Очистить();

	СтрокаПлатеж 			= Объект.РасшифровкаПлатежа.Добавить();
	
	ОсновнойДоговорКонтрагента = ОбщегоНазначенияБК.ДоступныйДоговорКонтрагента(Объект.Контрагент.ОсновнойДоговорКонтрагента);
	
	ИзмененаОрганизация = Ложь;
	
	Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда 
		СтрокаПлатеж.ДоговорКонтрагента = Неопределено;
	Иначе
		Если НЕ УправлениеВзаиморасчетамиСервер.ОпределитьВидДоговораСКонтрагентом(Объект.ВидОперации).НайтиПоЗначению(ОсновнойДоговорКонтрагента.ВидДоговора) = Неопределено Тогда
			
			Если Объект.Организация.Пустая() Тогда
				
				СтрокаПлатеж.ДоговорКонтрагента = ОсновнойДоговорКонтрагента;
				Если Объект.Организация <> ОсновнойДоговорКонтрагента.Организация Тогда
					ИзмененаОрганизация = Истина;
				КонецЕсли;
				Объект.Организация = ОсновнойДоговорКонтрагента.Организация;
				СтруктурноеПодразделениеОрганизация = ОсновнойДоговорКонтрагента.Организация;
				
			ИначеЕсли ОсновнойДоговорКонтрагента.Организация.Пустая()
			  	  ИЛИ ОсновнойДоговорКонтрагента.Организация = Объект.Организация Тогда
				
				СтрокаПлатеж.ДоговорКонтрагента = ОсновнойДоговорКонтрагента;
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИзмененаОрганизация Тогда
		СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(Новый Структура("ИзмененаОрганизация, ИзмененоСтруктурноеПодразделение", Истина, Ложь), Неопределено);
	КонецЕсли;
	
	Объект.Выдать = ?(НЕ ЗначениеЗаполнено(Объект.Контрагент.НаименованиеПолное), Объект.Контрагент.Наименование, Объект.Контрагент.НаименованиеПолное);
	
	Если Объект.Контрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
		Если НЕ Объект.Контрагент.ФизЛицо.Пустая() Тогда
			Объект.ПоДокументу = ОбщегоНазначенияБКВызовСервера.ПолучитьПаспортныеДанныеСтрокой(Объект.Контрагент.ФизЛицо);
		Иначе
			Объект.ПоДокументу = Объект.Контрагент.ДокументУдостоверяющийЛичность;
		КонецЕсли;
	КонецЕсли;	

	СтрокаПлатеж.СуммаПлатежа = Объект.СуммаДокумента;
	
	ЗаполнитьСчетаУчета(ПричиныИзмененияСчетовУчета, "Контрагент");
	
	Если ВосстанавливатьРеквизиты Тогда
		
		СтрокаПлатеж.СтатьяДвиженияДенежныхСредств 	= СтараяСтатьяДДС;
		
		Если Объект.ВидОперации = Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИЗаймамСКонтрагентами Тогда
			СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентомБУ = СчетРасчетовБУ;
			СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентомНУ = СчетРасчетовНУ;
		КонецЕсли;
		
	КонецЕсли;    

КонецПроцедуры

&НаСервере
Процедура ДоговорПриИзмененииНаСервере(НомерСтрокаПлатежа = Неопределено, ПричиныИзмененияСчетовУчета)

	Если НомерСтрокаПлатежа = Неопределено Тогда
		Если Объект.РасшифровкаПлатежа.Количество() > 0 Тогда
			СтрокаПлатеж = Объект.РасшифровкаПлатежа[0];
		Иначе
			Возврат;
		КонецЕсли;
	Иначе
		СтрокаПлатеж = Объект.РасшифровкаПлатежа.НайтиПоИдентификатору(НомерСтрокаПлатежа);
	КонецЕсли;
	
	Если СтрокаПлатеж = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ПричиныИзмененияСчетовУчета.Добавить("ДоговорКонтрагента");
	
	СтруктураКурсаВзаиморасчетов = ОбщегоНазначенияБК.ПолучитьКурсВалюты(СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, Объект.Дата);

	СтрокаПлатеж.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
	СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
	СтрокаПлатеж.ДоговорКонтрагентаВедениеВзаиморасчетов = СтрокаПлатеж.ДоговорКонтрагента.ВедениеВзаиморасчетов;
	СтрокаПлатеж.ДоговорКонтрагентаВалютаВзаиморасчетов  = СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;

	РассчитатьСуммуВзаиморасчетов(СтрокаПлатеж, ЭтаФорма);

	СтрокаПлатеж.Сделка = Неопределено;

	ПараметрыЗаполненияСчетовУчета = НачатьЗаполнениеСчетовУчета(
		"РасшифровкаПлатежа.ДоговорКонтрагента",
		Объект,
		СтрокаПлатеж);
		
	Изменения = СчетаУчетаВДокументах.ЗаполнитьРеквизитыПриИзменении(
		Документы.РасходныйКассовыйОрдер,
		ПараметрыЗаполненияСчетовУчета.КЗаполнению,
		Объект,
		"РасшифровкаПлатежа",
		СтрокаПлатеж);
	ЗаполнитьЗначенияСвойств(СтрокаПлатеж, Изменения);
	
КонецПроцедуры

&НаСервере
Процедура СчетОрганизацииПриИзмененииНаСервере()

	РаботаСДиалогами.ПриИзмененииЗначенияКассыБанковскогоСчета(Объект.ВалютаДокумента, КурсДокумента, КратностьДокумента, Объект.Дата, Объект.СуммаДокумента, Объект.СчетОрганизации.ВалютаДенежныхСредств, Истина);
	ПересчетСуммаДокументаПриИзменении(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура КассаПриИзмененииКлиент()

	Если Объект.Касса.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	ВалютаДенежныхСредств = ПолучитьЗначениеРеквизита(Объект.Касса, "ВалютаДенежныхСредств");
	
	Если ЗначениеЗаполнено(ВалютаДенежныхСредств) И (ВалютаДенежныхСредств <> Объект.ВалютаДокумента)
		И Объект.СуммаДокумента > 0 Тогда
		
		РаботаСДиалогамиКлиент.ПоказатьВопросОПересчетеСуммыДокумента(ЭтаФорма, Новый Структура("ИзмененаКасса, ВалютаДенежныхСредств", Истина, ВалютаДенежныхСредств));

	Иначе
		
		КассаОрганизацииПриИзмененииНаСервере(, Новый Массив);
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ВалютыДокументаПриИзмененииНаСервере(СтруктураРезультатаВыполнения = Неопределено)

	Если НЕ Объект.ВалютаДокумента = ТекущаяВалютаДокумента Тогда

		НеобходимПересчетСумм = СтруктураРезультатаВыполнения = Неопределено ИЛИ (СтруктураРезультатаВыполнения.Свойство("НеобходимПересчетСумм") И СтруктураРезультатаВыполнения.НеобходимПересчетСумм);
	
		Если ЕстьРасшифровкаПлатежа И Объект.РасшифровкаПлатежа.Количество() > 1 Тогда
			//Для пересчета суммы по таблице расшифровок
			ТекущиеПараметрыДокумента = Новый Структура("ВалютаДокумента, КурсДокумента, КратностьДокумента, СуммаДокумента", ТекущаяВалютаДокумента, КурсДокумента, КратностьДокумента, Объект.СуммаДокумента);
		КонецЕсли; 
		
		РаботаСДиалогами.ПриИзмененииЗначенияКассыБанковскогоСчета(ТекущаяВалютаДокумента, КурсДокумента, КратностьДокумента, Объект.Дата, Объект.СуммаДокумента, Объект.ВалютаДокумента, НеобходимПересчетСумм);
		
		Если НеобходимПересчетСумм Тогда
			
			ПересчетСуммаДокументаПриИзменении(ЭтаФорма);

			Если ЕстьРасшифровкаПлатежа И Объект.РасшифровкаПлатежа.Количество() > 1 Тогда
				
				Если НЕ Объект.СуммаДокумента = ТекущиеПараметрыДокумента.СуммаДокумента Тогда
					
					//Необходимо пересчитать суммы в таблице расшифровок.
					Для Каждого СтрокаПлатеж Из Объект.РасшифровкаПлатежа Цикл
						
						СтрокаПлатеж.СуммаПлатежа = ОбщегоНазначенияБККлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаПлатежа,
													ТекущиеПараметрыДокумента.ВалютаДокумента, Объект.ВалютаДокумента, 
													ТекущиеПараметрыДокумента.КурсДокумента, КурсДокумента,
													ТекущиеПараметрыДокумента.КратностьДокумента, КратностьДокумента);
													
						РассчитатьСуммуВзаиморасчетов(СтрокаПлатеж, ЭтаФорма);
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли; 
			
		КонецЕсли;
		
	КонецЕсли;

	УстановитьПараметрыВыбораДоговораСКонтрагентом(ЭтотОбъект);
	
КонецПроцедуры 

&НаСервере
Процедура СчетКассаПриИзмененииНаСервере(СтруктураРезультатаВыполнения = Неопределено)
	
	Если ЗначениеЗаполнено(Объект.Касса.ВалютаДенежныхСредств) И (Объект.Касса.ВалютаДенежныхСредств <> Объект.ВалютаДокумента) Тогда
		Объект.ВалютаДокумента = Объект.Касса.ВалютаДенежныхСредств;
		ВалютыДокументаПриИзмененииНаСервере(СтруктураРезультатаВыполнения);
	КонецЕсли;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк Тогда
		
		Если НЕ Объект.СчетОрганизации.Пустая() И НЕ Объект.Касса.Пустая() 
			И НЕ (Объект.СчетОрганизации.ВалютаДенежныхСредств = Объект.Касса.ВалютаДенежныхСредств) Тогда					
			
			ТекстСообщения = НСтр("ru = 'Валюта выбранного банковского счета не соответствует валюте кассы'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , "СчетОрганизации", "Объект");
			
			Объект.СчетОрганизации = "";
		КонецЕсли;
						
	КонецЕсли; 
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура СчетУчетаБУПриИзмененииНаСервере(ДанныеОбъекта)
	
	ПроверитьВладельцаСубконтоПодразделениеБУНУ(ДанныеОбъекта);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СчетУчетаНУПриИзмененииНаСервере(ДанныеОбъекта)
	
	ПроцедурыБухгалтерскогоУчета.ПроверитьВладельцаСубконтоПодразделение(ДанныеОбъекта, 
	                                        ДанныеОбъекта.Организация, 
	                                        Новый Структура("НазваниеСубконтоБУ1, НазваниеСубконтоБУ2, НазваниеСубконтоБУ3, 
	                                                        |СубконтоБУ1, СубконтоБУ2, СубконтоБУ3",
	                                                        "СубконтоДтНУ1", "СубконтоДтНУ2", "СубконтоДтНУ3", 
	                                                        ДанныеОбъекта.СубконтоДтНУ1, ДанныеОбъекта.СубконтоДтНУ2, ДанныеОбъекта.СубконтоДтНУ3));

КонецПроцедуры

&НаКлиенте
Процедура СубконтоНачалоВыбора(Элемент, ИмяЭлементаСубконто, ИндексСубконто, ИмяЭлементаСчета, СтрокаТаблицы, СтандартнаяОбработка)	
	
	ПараметрыДокумента = СписокПараметровВыбораСубконто(Объект, СтрокаТаблицы, ИмяЭлементаСубконто + "%Индекс%", ИмяЭлементаСчета);
	ПроцедурыБухгалтерскогоУчетаКлиент.НачалоВыбораЗначенияСубконто(ЭтаФорма, Элемент, ИндексСубконто, СтандартнаяОбработка, ПараметрыДокумента);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатьюДДСВАналитикеСчета()
	
	// Если ДДС не заполнена устанавливать субконто не нужно
	Если НЕ ЗначениеЗаполнено(Объект.СтатьяДвиженияДенежныхСредств) Тогда
		
		Возврат;
		
	КонецЕсли;	
	
	// статья ДДС определена в аналитике счета расчетов
	СвойстваСчета = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(Объект.СчетУчетаРасчетовСКонтрагентомБУ);
	
	Индекс = 1;
	Пока Индекс < 3  Цикл
	 
		Если СвойстваСчета["ВидСубконто" + Индекс] = ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоТиповые.СтатьиДвиженияДенежныхСредств") Тогда
			Объект["СубконтоДтБУ" + Индекс] = Объект.СтатьяДвиженияДенежныхСредств;
		 	ОбщегоНазначенияБККлиентСервер.ЗаменитьСубконтоНУ(Объект, Объект.СчетУчетаРасчетовСКонтрагентомБУ, Объект.СчетУчетаРасчетовСКонтрагентомНУ, Индекс, Объект["СубконтоДтБУ" + Индекс], "СубконтоДтНУ");
		Прервать;

		КонецЕсли;

		Индекс = Индекс + 1;

	КонецЦикла;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПроверитьСоответсвиеКонтрагентаВидуОперации(ВидОперации, Контрагент, ПричиныИзмененияСчетовУчета = Неопределено)
	
	Если ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ОплатаСтруктурномуПодразделению") Тогда

		Если ЗначениеЗаполнено(Контрагент) Тогда
			
			Если НЕ КонтрагентКакОрганизация(Контрагент) Тогда
				
				Контрагент = ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");
			    								
				ТекстСообщения  = НСтр("ru = 'При выбранном виде операции ""Оплата от структурного подразделения"" может быть выбран только контрагент, соответствующий какому-либо структурному подразделению.
											 |Контрагент будет очищен.'");
						 
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Контрагент", "Объект");
				
				Если ПричиныИзмененияСчетовУчета <> Неопределено Тогда
					ПричиныИзмененияСчетовУчета.Добавить("Контрагент");
				КонецЕсли;
					
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция КонтрагентКакОрганизация(Контрагент)
	
	СобственныйКонтрагент = Ложь;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СобственныеКонтрагенты.Контрагент
	|ИЗ
	|	РегистрСведений.СобственныеКонтрагенты КАК СобственныеКонтрагенты
	|ГДЕ
	|	СобственныеКонтрагенты.Контрагент = &ЭтотКонтрагент");
	Запрос.УстановитьПараметр("ЭтотКонтрагент", Контрагент);
	
	Если НЕ Запрос.Выполнить().Пустой() Тогда
		СобственныйКонтрагент = Истина;
	КонецЕсли;
	
	Возврат СобственныйКонтрагент;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьСуммуВзаиморасчетов(СтрокаПлатеж, Форма)
	
	Объект = Форма.Объект;
	
	УправлениеДенежнымиСредствамиКлиентСервер.ПроверкаКурсовВалют(СтрокаПлатеж);

	Если (СтрокаПлатеж.КурсВзаиморасчетов <> 0) И (Форма.КратностьДокумента <> 0) Тогда

		СтрокаПлатеж.СуммаВзаиморасчетов = ОбщегоНазначенияБККлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаПлатежа, Объект.ВалютаДокумента,
										  СтрокаПлатеж.ДоговорКонтрагентаВалютаВзаиморасчетов,
										  Форма.КурсДокумента, СтрокаПлатеж.КурсВзаиморасчетов,
										  Форма.КратностьДокумента, СтрокаПлатеж.КратностьВзаиморасчетов);	

	Иначе

		СтрокаПлатеж.СуммаВзаиморасчетов = 0;

	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПересчетСуммаДокументаПриИзменении(ЭтаФорма)
		
	Если ЭтаФорма.Объект.РасшифровкаПлатежа.Количество() = 1 Тогда
		
		СтрокаПлатеж = ЭтаФорма.Объект.РасшифровкаПлатежа[0];
		СтрокаПлатеж.СуммаПлатежа = ЭтаФорма.Объект.СуммаДокумента;
		
		Если ЭтаФорма.Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателю") Тогда
			УправлениеДенежнымиСредствамиКлиентСервер.ПересчитатьСуммуНДС(СтрокаПлатеж);
		КонецЕсли;
			
		РассчитатьСуммуВзаиморасчетов(СтрокаПлатеж, ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьИтоговуюСумму(ТабличнаяЧасть, Графа = "СуммаПлатежа")
	
	Объект.СуммаДокумента = Объект[ТабличнаяЧасть].Итог(Графа);	
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЗначениеРеквизита(Ссылка, ЗначениеРеквизита)
											
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, ЗначениеРеквизита);										
											
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСуммуКВыплатеПоВедомости(РКО, Ведомость)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", 				Ведомость);
	Запрос.УстановитьПараметр("ВыплаченностьЗарплаты", 	Перечисления.ВыплаченностьЗарплаты.Выплачено);
	Запрос.УстановитьПараметр("Регистратор", 			РКО);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СУММА(ЗарплатаКВыплатеЗарплата.Сумма+ЗарплатаКВыплатеЗарплата.ДепонированнаяСумма) КАК Сумма
	|ИЗ
	|	Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеЗарплата
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям КАК РанееВыплаченныеСуммы
	|		ПО ЗарплатаКВыплатеЗарплата.ФизЛицо = РанееВыплаченныеСуммы.ФизЛицо
	|		   И ЗарплатаКВыплатеЗарплата.Ссылка = РанееВыплаченныеСуммы.Ведомость
	|		   И РанееВыплаченныеСуммы.Регистратор <> &Регистратор
	|
	|ГДЕ
	|	ЗарплатаКВыплатеЗарплата.Ссылка = &Ссылка И
	|	ЗарплатаКВыплатеЗарплата.ВыплаченностьЗарплаты = &ВыплаченностьЗарплаты И
	|	РанееВыплаченныеСуммы.ФизЛицо ЕСТЬ NULL
	|";
	РезультатЗапроса = Запрос.Выполнить().Выбрать();

	Если РезультатЗапроса.Следующий() Тогда
		Возврат РезультатЗапроса.Сумма;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСуммуКВыплатеПоИсполнительномуЛисту(РКО)

	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СУММА(СуммаВзаиморасчетов) КАК Сумма
	|ИЗ
	|	Документ.ИЛПеречислениеПолучателям.ИсполнительныеЛисты КАК ИсполнительныеЛисты
	|
	|ГДЕ
	|	ИсполнительныеЛисты.Ссылка = &Ссылка И
	|	ИсполнительныеЛисты.Ссылка.СпособПеречисления = &ЧерезКассу";

	Запрос.УстановитьПараметр("Ссылка",		РКО);
	Запрос.УстановитьПараметр("ЧерезКассу",	Перечисления.СпособыПеречисленияПоИсполнительномуЛисту.ЧерезКассу);

	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	
	Если РезультатЗапроса.Следующий() Тогда
		Возврат РезультатЗапроса.Сумма;
	Иначе
		Возврат 0;
	КонецЕсли;

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСуммуВыплаченнойЗарплаты(РКО, Контрагент, ПлатежнаяВедомость)
	
	Если НЕ ЗначениеЗаполнено(ПлатежнаяВедомость) ИЛИ ТипЗнч(ПлатежнаяВедомость) = Тип("ДокументСсылка.ВедомостьПрочихДоходов") Тогда
		Возврат 0;
	КонецЕсли;

	ТекстЗапрос = 	
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СУММА(ЗарплатаКВыплатеОрганизацийЗарплата.Сумма + ЗарплатаКВыплатеОрганизацийЗарплата.ДепонированнаяСумма) КАК Сумма,
	|	ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка
	|ИЗ
	|	Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацийЗарплата
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям КАК РанееВыплаченныеСуммы
	|		ПО ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка = РанееВыплаченныеСуммы.Ведомость
	|			И ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо = РанееВыплаченныеСуммы.Физлицо
	|			И (РанееВыплаченныеСуммы.Регистратор <> &Регистратор)
	|ГДЕ
	|	ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка = &парамПлатВедомость
	|	И ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо = &парамФизлицо
	|	И ЗарплатаКВыплатеОрганизацийЗарплата.ВыплаченностьЗарплаты = &парамВыплачено
	|	И РанееВыплаченныеСуммы.Физлицо ЕСТЬ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка";
	
	Запрос = Новый Запрос(ТекстЗапрос);
	Запрос.УстановитьПараметр("Регистратор", РКО);
	Запрос.УстановитьПараметр("парамФизлицо", Контрагент); 
	Запрос.УстановитьПараметр("парамПлатВедомость", ПлатежнаяВедомость);
	Запрос.УстановитьПараметр("парамВыплачено", Перечисления.ВыплаченностьЗарплаты.Выплачено);	
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат 0;
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Сумма;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура РаботникПриИзмененииНаСервере()
	
	Объект.СуммаДокумента = ПолучитьСуммуВыплаченнойЗарплаты(Объект.Ссылка, Объект.Контрагент, Объект.ПлатежнаяВедомость);
	ПодставитьРеквизитыФизЛица(Объект.Контрагент);
	
КонецПроцедуры

&НаСервере
Процедура ПодставитьРеквизитыФизЛица(ФизЛицо) Экспорт

	//Объект = ЭтаФорма.Объект;
	
	ДанныеОФизЛице = ПроцедурыУправленияПерсоналомВызовСервера.ДанныеФизЛица(Объект.Организация, ФизЛицо, Объект.Дата);
	ФамилияИмяОтчество = ""+ДанныеОФизЛице.Фамилия +" "+ ДанныеОФизЛице.Имя +" "+ ДанныеОФизЛице.Отчество;
	СтруктураФИО = Новый Структура;
	СтруктураФИО.Вставить("Фамилия",  ДанныеОФизЛице.Фамилия); 
	СтруктураФИО.Вставить("Имя", 	  ДанныеОФизЛице.Имя);
	СтруктураФИО.Вставить("Отчество", ДанныеОФизЛице.Отчество);	
	
	Объект.Выдать = СклонениеПредставленийОбъектов.ПросклонятьПредставление(ФамилияИмяОтчество, 3);

	Объект.ПоДокументу = ОбщегоНазначенияБКВызовСервера.ПолучитьПаспортныеДанныеСтрокой(ФизЛицо);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВводаКурсаКратности(Результат, Параметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		
		ТекущиеДанные = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
		ТекущиеДанные.КурсВзаиморасчетов      = Результат.КурсВалюты;
		ТекущиеДанные.КратностьВзаиморасчетов = Результат.КратностьВалюты;
		
		РассчитатьСуммуВзаиморасчетов(ТекущиеДанные, ЭтаФорма);
		
	КонецЕсли; 
	                                                             		
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПроверитьВладельцаСубконтоПодразделениеБУНУ(ДанныеОбъекта)
	
	ПроцедурыБухгалтерскогоУчета.ПроверитьВладельцаСубконтоПодразделение(ДанныеОбъекта, 
	                                        ДанныеОбъекта.Организация, 
	                                        Новый Структура("НазваниеСубконтоБУ1, НазваниеСубконтоБУ2, НазваниеСубконтоБУ3, 
	                                                        |СубконтоБУ1, СубконтоБУ2, СубконтоБУ3",
	                                                        "СубконтоДтБУ1", "СубконтоДтБУ2", "СубконтоДтБУ3", 
	                                                        ДанныеОбъекта.СубконтоДтБУ1, ДанныеОбъекта.СубконтоДтБУ2, ДанныеОбъекта.СубконтоДтБУ3));
															
	ПроцедурыБухгалтерскогоУчета.ПроверитьВладельцаСубконтоПодразделение(ДанныеОбъекта, 
	                                        ДанныеОбъекта.Организация, 
	                                        Новый Структура("НазваниеСубконтоБУ1, НазваниеСубконтоБУ2, НазваниеСубконтоБУ3, 
	                                                        |СубконтоБУ1, СубконтоБУ2, СубконтоБУ3",
	                                                        "СубконтоДтНУ1", "СубконтоДтНУ2", "СубконтоДтНУ3", 
	                                                        ДанныеОбъекта.СубконтоДтНУ1, ДанныеОбъекта.СубконтоДтНУ2, ДанныеОбъекта.СубконтоДтНУ3));
															
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьДанныеИсполнительногоЛиста(ДокументИЛПеречисление, Выдать, Основание)

	Если НЕ ДокументИЛПеречисление.ИсполнительныеЛисты.Количество() = 1 Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаИЛ  = ДокументИЛПеречисление.ИсполнительныеЛисты[0];
	Выдать	  = СтрокаИЛ.Получатель.НаименованиеПолное;
	Основание = СтрокаИЛ.ДокументОснование.ВидИсполнительногоДокумента + " " + СтрокаИЛ.ДокументОснование.РеквизитыИсполнительногоДокумента;

КонецПроцедуры

&НаСервере
Процедура ОчиститьЭлементыУправленияПриСменеОрганизацииСтруктурногоПодразделения()
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям Тогда
		
		Объект.ВыплатаЗаработнойПлаты.Очистить();
		
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику Тогда
		
		Объект.ПлатежнаяВедомость = Документы.ЗарплатаКВыплатеОрганизаций.ПустаяСсылка();
		
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаПоИсполнительнымЛистам Тогда
		
		Объект.ВыплатаПоИсполнительнымЛистам.Очистить();
		
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийРКО.РасчетыПоДоходуОтРазовыхВыплатСКонтрагентами Тогда
		
		Объект.ПлатежнаяВедомость = Документы.ВедомостьПрочихДоходов.ПустаяСсылка();
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НапечататьЧекВыполнить(Команда)
	
	НапечататьЧек();
	
КонецПроцедуры

&НаКлиенте
Процедура НапечататьЧек()
	
	ОчиститьСообщения();
	
	ОписаниеОшибки = "";
	
	Если Объект.НомерЧекаККМ <> 0 Тогда
		ТекстСообщения = НСтр("ru = 'Чек уже пробит на фискальном регистраторе!'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		
		Возврат;
	КонецЕсли;
		
	Если ОбщегоНазначенияБККлиент.ПроверитьВозможностьПечатиЧека(ЭтотОбъект) Тогда
		
		Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
			Контекст = Новый Структура();
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ВыборФискальногоУстройстваЗавершение", ЭтотОбъект, Контекст);
			ПоддерживаемыеТипыВО = Новый Массив();
			ПоддерживаемыеТипыВО.Добавить("ФискальныйРегистратор");
			ПоддерживаемыеТипыВО.Добавить("ПринтерЧеков");			
			МенеджерОборудованияКлиент.ПредложитьВыбратьУстройство(ОписаниеОповещения, ПоддерживаемыеТипыВО,
				НСтр("ru = 'Выберите фискальное устройство'"), НСтр("ru = 'Фискальное устройство не подключено.'"));
		Иначе
			ТекстСообщения = НСтр("ru = 'Предварительно необходимо выбрать рабочее место внешнего оборудования текущего сеанса.'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НапечататьЧекКлиент(МассивЧеков, ИдентификаторУстройства, ВерсияФормата)
	
	НомерСекции = 0;
	
	ЭтаФорма.Доступность = Ложь;
	Контекст = Новый Структура("ИдентификаторУстройства", ИдентификаторУстройства);
	Оповещение = Новый ОписаниеОповещения("НапечататьЧекКлиентЗавершение", ЭтотОбъект, Контекст);
		
	ПодключенноеОборудование = Новый Структура("Терминал, ФискальныеУстройства");
	ПодключенноеОборудование.ФискальныеУстройства = Новый Массив; 
	ПодключенноеОборудование.ФискальныеУстройства.Добавить(ИдентификаторУстройства);
	
	ПараметрыОперации = Новый Структура;
	ПараметрыОперации.Вставить("ДокументСсылка", Объект.Ссылка);
	ПараметрыОперации.Вставить("Организация", Объект.Организация);
	ПараметрыОперации.Вставить("Партнер", Объект.Контрагент);
	ПараметрыОперации.Вставить("ПодключенноеОборудование", ПодключенноеОборудование);
	ПараметрыОперации.Вставить("ТорговыйОбъект", Неопределено);
	
	ОткрытьФорму(
		"Обработка.ПечатьЧека.Форма",
		ПараметрыОперации,
		ЭтотОбъект,,,,
		Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура НапечататьЧекКлиентЗавершение(РезультатВыполнения, ПараметрыОперации) Экспорт
	
	Если РезультатВыполнения = КодВозвратаДиалога.Отмена ИЛИ РезультатВыполнения = Неопределено Тогда
		// Отмена в форме печати чека
		ЭтаФорма.Доступность = Истина;
	ИначеЕсли РезультатВыполнения.Свойство("Результат") И РезультатВыполнения.Результат Тогда
		// Установить полученное значение номера чека реквизиту документа.
		ЭтаФорма.Доступность = Истина;
		Объект.НомерЧекаККМ = РезультатВыполнения.ВыходныеПараметры[1];
		Модифицированность  = Истина;
		РезультатЗаписи = Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
	Иначе
		ЭтаФорма.Доступность = Истина;
		ТекстСообщения = НСтр("ru = 'При печати чека произошла ошибка.
			|Чек не напечатан на фискальном устройстве.
			|Дополнительное описание: %ДополнительноеОписание%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	ФискальнаяОперацияОбновитьСтатус();
	УправлениеФормой(ЭтотОбъект);

КонецПроцедуры

&НаСервере
Функция ПодготовитьДанныеДляПробитияЧека(Знач НомерСекции, Знач ВерсияФормата, ОписаниеОшибки)
	
	Возврат Документы.РасходныйКассовыйОрдер.СобратьДанныеЧеков(Объект.Ссылка, НомерСекции, ВерсияФормата, ОписаниеОшибки);
	
КонецФункции

&НаКлиенте
Процедура ВыборФискальногоУстройстваЗавершение(ИдентификаторУстройства, Параметры) Экспорт
	Если НЕ ЗначениеЗаполнено(ИдентификаторУстройства) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры.Вставить("ИдентификаторУстройства", ИдентификаторУстройства);
	
	ДанныеУстройства = МенеджерОборудованияКлиентПовтИсп.ПолучитьДанныеУстройства(ИдентификаторУстройства);
	ТипУстройства = ?(ДанныеУстройства.Свойство("ТипОборудованияИмя"), ДанныеУстройства.ТипОборудованияИмя, "ККТ");
	
	Если ТипУстройства = "ККТ" Тогда
		ОповещениеПриЗавершении = Новый ОписаниеОповещения("ПолучитьПараметрыЗавершение", ЭтотОбъект, Параметры);
		МенеджерОборудованияКлиент.НачатьПолучениеПараметровФискальногоУстройства(ОповещениеПриЗавершении, УникальныйИдентификатор , ИдентификаторУстройства, Ложь);
	Иначе
		ПолучитьПараметрыЗавершение(Неопределено, Параметры);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьПараметрыЗавершение(ПараметрыФискальногоУстройства, Параметры) Экспорт
	
	ОписаниеОшибки = "";
	Если ПараметрыФискальногоУстройства =  Неопределено Тогда
		ВерсияФормата = "1.1.0.0";
	ИначеЕсли НЕ ПараметрыФискальногоУстройства.Результат Тогда 
		ОписаниеОшибки = ПараметрыФискальногоУстройства.ОписаниеОшибки;
	Иначе
		ВерсияФормата = ОбщегоНазначенияБККлиентСервер.ПолучитьВерсиюФФД(ПараметрыФискальногоУстройства.ВыходныеПараметры.ВерсияФФДФН, ПараметрыФискальногоУстройства.ВыходныеПараметры.ВерсияФФДККТ);
	КонецЕсли; 

	Если НЕ ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		ПараметрыУстройства = МенеджерОборудованияКлиентПовтИсп.ПолучитьПараметрыУстройства(Параметры.ИдентификаторУстройства);
		НомерСекции         = ?(ПараметрыУстройства.Свойство("НомерСекции"), ПараметрыУстройства.НомерСекции, 0);
		
		МассивЧеков = ПодготовитьДанныеДляПробитияЧека(НомерСекции, ВерсияФормата, ОписаниеОшибки);
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		ТекстСообщения = НСтр("ru = 'При подключении устройства произошла ошибка.
			|Чек не напечатан на фискальном устройстве.
			|Дополнительное описание:
			|%ДополнительноеОписание%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", ОписаниеОшибки);
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	ИначеЕсли МассивЧеков.Количество() > 0 Тогда
		НапечататьЧекКлиент(МассивЧеков, Параметры.ИдентификаторУстройства, ВерсияФормата);
	КонецЕсли;

КонецПроцедуры 

&НаСервере
Процедура ОбработатьИзмененияВОрганизацииНаСервере()
	
	// +++ Проверка заполненности реквизитов организации (банковский счет)
	ИспользоватьНесколькоБанковскихСчетовОрганизации = Справочники.БанковскиеСчета.ИспользуетсяНесколькоБанковскихСчетовОрганизации(Объект.Организация);
	
	ОсновнойБанковскийСчетОрганизацииЗаполнен =	ПроверкаРеквизитовОрганизации.ОсновнойБанковскийСчетОрганизацииЗаполнен(Объект.Организация);
	
	ПроверкаРеквизитовОрганизации.ОтобразитьПредупреждениеОЗаполненииРеквизитовСчета(ЭтотОбъект);
	
	Если НЕ ИспользоватьНесколькоБанковскихСчетовОрганизации И ОсновнойБанковскийСчетОрганизацииЗаполнен И Не ЗначениеЗаполнено(Объект.СчетОрганизации) Тогда
		Объект.СчетОрганизации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Организация, "ОсновнойБанковскийСчет");
	КонецЕсли;
	// --- Проверка заполненности реквизитов организации (банковский счет)		
	
	// +++ Проверка заполненности реквизитов организации (касса)
	ИспользоватьНесколькоКассОрганизации = Справочники.Кассы.ИспользуетсяНесколькоКасс(СтруктурноеПодразделениеОрганизация);
	ОсновнаяКассаОрганизацииЗаполнена = ПроверкаРеквизитовОрганизации.ОсновнаяКассаОрганизацииЗаполнена(СтруктурноеПодразделениеОрганизация);
	ПроверкаРеквизитовОрганизации.ОтобразитьПредупреждениеОЗаполненииРеквизитовКассы(ЭтотОбъект);
	
	Если НЕ ИспользоватьНесколькоКассОрганизации И ОсновнаяКассаОрганизацииЗаполнена И Не ЗначениеЗаполнено(Объект.Касса) Тогда
		Объект.Касса = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Организация, "ОсновнаяКасса");
	КонецЕсли;
	// --- Проверка заполненности реквизитов организации (касса)

КонецПроцедуры

&НаСервере
Процедура РазблокироватьРеквизиты() Экспорт
	
	Элементы.РасшифровкаПлатежа.ТолькоПросмотр       = Ложь;
	Элементы.РасшифровкаПлатежа.ИзменятьСоставСтрок  = Ложь;
	Элементы.РасшифровкаПлатежа.ИзменятьПорядокСтрок = Ложь;
	
	Элементы.ВыдачаВПодотчет.ТолькоПросмотр           = Ложь;
	Элементы.ВыдачаВПодотчет.ИзменятьСоставСтрок      = Ложь;
	Элементы.ВыдачаВПодотчет.ИзменятьПорядокСтрок     = Ложь;
	
	Элементы.ВыплатаЗаработнойПлаты.ТолькоПросмотр           = Ложь;
	Элементы.ВыплатаЗаработнойПлаты.ИзменятьСоставСтрок      = Ложь;
	Элементы.ВыплатаЗаработнойПлаты.ИзменятьПорядокСтрок     = Ложь;
	
	Элементы.ВыплатаПоИсполнительнымЛистам.ТолькоПросмотр           = Ложь;
	Элементы.ВыплатаПоИсполнительнымЛистам.ИзменятьСоставСтрок      = Ложь;
	Элементы.ВыплатаПоИсполнительнымЛистам.ИзменятьПорядокСтрок     = Ложь;
			
КонецПроцедуры

&НаСервере
Функция РеквизитыЗаблокированы()
	
	Возврат ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭтотОбъект, "ПараметрыЗапретаРедактированияРеквизитов");
	
КонецФункции

#Область СчетаУчета

&НаСервере
Процедура УстановитьВидимостьСчетовУчета()
	
	ЭлементыСчетов = Новый Массив(); 
	ЭлементыСчетов.Добавить("СчетКасса");
	ЭлементыСчетов.Добавить("СчетКассаОрганизации");
	ЭлементыСчетов.Добавить("СчетРасчетовСПодотчетнымЛицом");
	ЭлементыСчетов.Добавить("СчетБанк");
	ЭлементыСчетов.Добавить("ГруппаАналитикаБУ");
	ЭлементыСчетов.Добавить("ГруппаАналитикаИнкБУ");
	ЭлементыСчетов.Добавить("ГруппаАналитикаНУ");
	ЭлементыСчетов.Добавить("ГруппаАналитикаИнкНУ");
	
	ЭлементыСчетов.Добавить("РасшифровкаПлатежаСчетУчетаРасчетовСКонтрагентомБУ");
	ЭлементыСчетов.Добавить("РасшифровкаПлатежаСчетУчетаРасчетовСКонтрагентомНУ");
	ЭлементыСчетов.Добавить("РасшифровкаПлатежаСчетУчетаРасчетовПоАвансам");
	
	СчетаУчетаВДокументах.УстановитьВидимостьСчетовУчета(Элементы, ЭлементыСчетов);
	
	ВидимостьНалоговогоУчета = Объект.УчитыватьКПН И (ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль ИЛИ Объект.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ);
	
	ПоказыватьВДокументахСчетаУчета = СчетаУчетаВДокументахВызовСервераПовтИсп.ПользовательУправляетСчетамиУчета();
	Элементы.СчетКасса.Видимость    = ПоказыватьВДокументахСчетаУчета;
	Элементы.СчетРасчетовСПодотчетнымЛицом.Видимость = ПоказыватьВДокументахСчетаУчета;
	Элементы.СчетБанк.Видимость             = ПоказыватьВДокументахСчетаУчета;
	Элементы.СчетКассаОрганизации.Видимость = ПоказыватьВДокументахСчетаУчета;

	
	Если ПоказыватьВДокументахСчетаУчета Тогда
			
		Если Объект.ВидОперации <> Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетнику Тогда
			Элементы.СчетРасчетовСПодотчетнымЛицом.Видимость = Ложь;
		КонецЕсли;

		Если Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк Тогда
			Элементы.СчетКасса.Видимость            = Ложь; 						
		Иначе
			Элементы.СчетКассаОрганизации.Видимость = Ложь;
			Элементы.СчетБанк.Видимость             = Ложь;
		КонецЕсли;
			
		Если Объект.ВидОперации = Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИЗаймамСКонтрагентами Тогда
			Элементы.РасшифровкаПлатежаСчетУчетаРасчетовПоАвансам.Видимость = Ложь;
		КонецЕсли;
		
		Если ЕстьРасшифровкаПлатежа Тогда
			
			Если Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателю Тогда
				Элементы.РасшифровкаПлатежаСчетУчетаРасчетовПоАвансам.Заголовок = НСтр("ru = 'Счет возвратов (БУ)'");								
			Иначе	
				Элементы.РасшифровкаПлатежаСчетУчетаРасчетовПоАвансам.Заголовок = НСтр("ru = 'Счет авансов (БУ)'");
			КонецЕсли;
					
		КонецЕсли;
		
		Элементы.РасшифровкаПлатежаСчетУчетаРасчетовСКонтрагентомНУ.Видимость =
			ВидимостьНалоговогоУчета И Объект.ВидОперации = Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИЗаймамСКонтрагентами;
			
		Элементы.ГруппаАналитикаНУ.Видимость    = ВидимостьНалоговогоУчета;
		Элементы.ГруппаАналитикаИнкНУ.Видимость = ВидимостьНалоговогоУчета;
		
	КонецЕсли;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийРКО.РасходДенежныхСредствПрочее Тогда
		Элементы.ГруппаАналитикаБУ.Видимость = Истина;
		Элементы.ГруппаАналитикаНУ.Видимость = ВидимостьНалоговогоУчета;
	КонецЕсли;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ИнкассацияДенежныхСредств Тогда
		Элементы.ГруппаАналитикаИнкБУ.Видимость = Истина;
		Элементы.ГруппаАналитикаИнкНУ.Видимость = ВидимостьНалоговогоУчета;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция НачатьЗаполнениеСчетовУчета(ПричиныИзменения, Объект = Неопределено, СтрокаСписка = Неопределено, КонтейнерОбъект = Неопределено, КонтейнерСтрокаСписка = Неопределено)

	// Код этой функции сформирован автоматически с помощью СчетаУчетаВДокументах.КодФункцииНачатьЗаполнениеСчетовУчета()

	ПараметрыЗаполнения = СчетаУчетаВДокументахКлиентСервер.НовыйПараметрыЗаполнения(
		"РасходныйКассовыйОрдер",
		ПричиныИзменения,
		Объект,
		СтрокаСписка,
		КонтейнерОбъект,
		КонтейнерСтрокаСписка);

	// 1. Заполняемые реквизиты
	// Касса
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Касса") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетКасса");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетУчетаРасчетовСКонтрагентомБУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетУчетаРасчетовСКонтрагентомНУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоДтБУ1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоДтБУ2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоДтБУ3");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоДтНУ1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоДтНУ2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоДтНУ3");
	КонецЕсли;

	// СчетОрганизации
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("СчетОрганизации") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетКасса");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетУчетаРасчетовСКонтрагентомБУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетУчетаРасчетовСКонтрагентомНУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоДтБУ1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоДтБУ2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоДтБУ3");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоДтНУ1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоДтНУ2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоДтНУ3");
	КонецЕсли;

	// ВидОперации
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("ВидОперации") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетУчетаРасчетовСКонтрагентомБУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетУчетаРасчетовСКонтрагентомНУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоДтБУ1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоДтБУ2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоДтБУ3");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоДтНУ1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоДтНУ2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоДтНУ3");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентомБУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "РасшифровкаПлатежа.СчетУчетаРасчетовПоАвансам");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентомНУ");
	КонецЕсли;

	// СчетУчетаРасчетовСКонтрагентомБУ
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("СчетУчетаРасчетовСКонтрагентомБУ") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетУчетаРасчетовСКонтрагентомНУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоДтБУ1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоДтБУ2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоДтБУ3");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоДтНУ1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоДтНУ2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоДтНУ3");
	КонецЕсли;

	// СчетУчетаРасчетовСКонтрагентомНУ
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("СчетУчетаРасчетовСКонтрагентомНУ") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоДтНУ1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоДтНУ2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоДтНУ3");
	КонецЕсли;

	// СубконтоДтБУ1
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("СубконтоДтБУ1") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоДтНУ1");
	КонецЕсли;

	// СубконтоДтБУ2
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("СубконтоДтБУ2") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоДтНУ2");
	КонецЕсли;

	// СубконтоДтБУ3
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("СубконтоДтБУ3") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоДтНУ3");
	КонецЕсли;

	// Организация
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Организация") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентомБУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "РасшифровкаПлатежа.СчетУчетаРасчетовПоАвансам");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентомНУ");
	КонецЕсли;

	// Контрагент
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Контрагент") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентомБУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "РасшифровкаПлатежа.СчетУчетаРасчетовПоАвансам");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентомНУ");
	КонецЕсли;

	// РасшифровкаПлатежа.ДоговорКонтрагента
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("РасшифровкаПлатежа.ДоговорКонтрагента") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентомБУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "РасшифровкаПлатежа.СчетУчетаРасчетовПоАвансам");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентомНУ");
	КонецЕсли;

	// РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентомБУ
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентомБУ") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "РасшифровкаПлатежа.СчетУчетаРасчетовПоАвансам");
	КонецЕсли;

	// 2. (если требуется) Передадим на сервер данные, необходимые для заполнения
	Если ПараметрыЗаполнения.Свойство("Контейнер") Тогда
		// Касса
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Касса") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Касса");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетКасса");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетОрганизации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовСКонтрагентомБУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовСКонтрагентомНУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДтБУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДтБУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДтБУ3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДтНУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДтНУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДтНУ3");
		КонецЕсли;

		// СчетОрганизации
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("СчетОрганизации") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетОрганизации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетКасса");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Касса");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовСКонтрагентомБУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовСКонтрагентомНУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДтБУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДтБУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДтБУ3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДтНУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДтНУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДтНУ3");
		КонецЕсли;

		// ВидОперации
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("ВидОперации") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовСКонтрагентомБУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Касса");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетОрганизации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовСКонтрагентомНУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДтБУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДтБУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДтБУ3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДтНУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДтНУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДтНУ3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовСКонтрагентомБУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ДоговорКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовПоАвансам");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовСКонтрагентомНУ");
		КонецЕсли;

		// СчетУчетаРасчетовСКонтрагентомБУ
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("СчетУчетаРасчетовСКонтрагентомБУ") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовСКонтрагентомБУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовСКонтрагентомНУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Касса");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетОрганизации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДтБУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДтБУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДтБУ3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДтНУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДтНУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДтНУ3");
		КонецЕсли;

		// СчетУчетаРасчетовСКонтрагентомНУ
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("СчетУчетаРасчетовСКонтрагентомНУ") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовСКонтрагентомНУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДтНУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовСКонтрагентомБУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДтБУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Касса");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетОрганизации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДтНУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДтБУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДтНУ3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДтБУ3");
		КонецЕсли;

		// СубконтоДтБУ1
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("СубконтоДтБУ1") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДтБУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДтНУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовСКонтрагентомБУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовСКонтрагентомНУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Касса");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетОрганизации");
		КонецЕсли;

		// СубконтоДтБУ2
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("СубконтоДтБУ2") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДтБУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДтНУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовСКонтрагентомБУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовСКонтрагентомНУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Касса");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетОрганизации");
		КонецЕсли;

		// СубконтоДтБУ3
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("СубконтоДтБУ3") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДтБУ3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДтНУ3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовСКонтрагентомБУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовСКонтрагентомНУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Касса");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетОрганизации");
		КонецЕсли;

		// Организация
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Организация") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовСКонтрагентомБУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ДоговорКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовПоАвансам");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовСКонтрагентомНУ");
		КонецЕсли;

		// Контрагент
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Контрагент") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовСКонтрагентомБУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ДоговорКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовПоАвансам");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовСКонтрагентомНУ");
		КонецЕсли;

		// РасшифровкаПлатежа.ДоговорКонтрагента
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("РасшифровкаПлатежа.ДоговорКонтрагента") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ДоговорКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовСКонтрагентомБУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовПоАвансам");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовСКонтрагентомНУ");
		КонецЕсли;

		// РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентомБУ
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентомБУ") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовСКонтрагентомБУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовПоАвансам");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ДоговорКонтрагента");
		КонецЕсли;

	КонецЕсли; // Нужно передавать на сервер данные заполнения
	
	Возврат ПараметрыЗаполнения;

КонецФункции

&НаСервере
Процедура ЗаполнитьСчетаУчета(ПричиныИзмененияСчетовУчета, ИмяРеквизита)
	
	Если Не СчетаУчетаВДокументахКлиентСервер.МожноНачатьЗаполнениеСчетовУчета(ИмяРеквизита, ПричиныИзмененияСчетовУчета) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗаполнения = НачатьЗаполнениеСчетовУчета(ПричиныИзмененияСчетовУчета, Объект);
	ИзмененныеЗначения = СчетаУчетаВДокументах.ЗаполнитьОбъектПриИзменении(ПараметрыЗаполнения);
	
	Если ЗначениеЗаполнено(ИзмененныеЗначения)
		И СчетаУчетаВДокументахВызовСервераПовтИсп.ПользовательУправляетСчетамиУчета() Тогда
		ПоказатьСообщениеОЗаполненииСчетовУчета(Объект.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПоказатьСообщениеОЗаполненииСчетовУчета(ОбъектСсылка)
	
	ТекстСообщения = НСтр("ru = 'Счета учета изменены в соответствии со значениями по умолчанию.'");
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ОбъектСсылка, , "Объект");
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ФискальнаяОперацияОбновитьСтатус()
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателю Тогда
		
		Строки = Новый Массив;
		Если ЗначениеЗаполнено(Объект.НомерЧекаККМ) Тогда
			Строки.Добавить(
				Новый ФорматированнаяСтрока(
					СтрШаблон(
						НСтр("ru = 'Пробит чек №%1'"),
						Объект.НомерЧекаККМ),,
					ЦветаСтиля.ЦветГиперссылки));
		Иначе
			Строки.Добавить(
				Новый ФорматированнаяСтрока(
					НСтр("ru = 'Чек не пробит'"),,
					ЦветаСтиля.ЦветГиперссылки));
		КонецЕсли;
		
	Иначе
		ФискальнаяОперацияСтатус = "";
		Возврат;
	КонецЕсли;
		
	ФискальнаяОперацияСтатус = Новый ФорматированнаяСтрока(Строки);
	
КонецПроцедуры
