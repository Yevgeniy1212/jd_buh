#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

#Область СчетаУчета

Процедура УстановитьПравилаЗаполненияСчетовУчета(Правила) Экспорт
	
	// Шапка
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "", "СчетЗатратНДСБУ", "ПрочиеРасходы");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "КорректировкаНДС");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ПлательщикНДС");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоЗатратНДСБУ1", "СубконтоЗатрат1");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоЗатратНДСБУ2", "СубконтоЗатрат2");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоЗатратНДСБУ3", "СубконтоЗатрат3");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "", "СчетЗатратНДСНУ", "ПрочиеРасходыНУ");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "КорректировкаНДС");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ПлательщикНДС");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеПроверкиЗаполнения(Правила, "ПлательщикНалогаНаПрибыль");
	
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоЗатратНДСНУ1", "СубконтоЗатрат1");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Основание", "СубконтоЗатратНДСБУ1");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоЗатратНДСНУ2", "СубконтоЗатрат2");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Основание", "СубконтоЗатратНДСБУ2");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоЗатратНДСНУ3", "СубконтоЗатрат3");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Основание", "СубконтоЗатратНДСБУ3");
	
	// Табличная часть Товары
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Товары", "СчетУчетаБУ", "Запасы");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Товары", "СчетУчетаНУ", "ЗапасыНУ");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Товары", "СчетУчетаНДС", "ПредъявленныйНДС_Запасы");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Товары", "НДСВидОборота", "ВидОборотаНДСПредъявленного");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "СтавкаНДС",    "СтавкаНДС");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Товары", "НДСВидПоступления", "ВидПоступленияНДС_СписаниеТМЗ");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "СтавкаНДС",    "СтавкаНДС");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Товары", "СтавкаНДС", "СтавкаНДС_Номенклатура");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Товары", "СчетЗатратБУ", "ПрочиеРасходы");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоЗатратБУ1", "СубконтоЗатрат1");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоЗатратБУ2", "СубконтоЗатрат2");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоЗатратБУ3", "СубконтоЗатрат3");

	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Товары", "СчетЗатратНУ", "ПрочиеРасходыНУ");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеПроверкиЗаполнения(Правила, "ПлательщикНалогаНаПрибыль");
	
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоЗатратНУ1", "СубконтоЗатрат1");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Основание", "СубконтоЗатратБУ1");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоЗатратНУ2", "СубконтоЗатрат2");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Основание", "СубконтоЗатратБУ2");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоЗатратНУ3", "СубконтоЗатрат3");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Основание", "СубконтоЗатратБУ3");
	
	// Данные заполнения
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "Дата");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "Организация");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "СтруктурноеПодразделение");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "Склад");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "УчитыватьКПН");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "УчитыватьНДС");
	
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеДополнительныхДанных(Правила, "КорректировкаНДС", "КорректироватьНДС");
	
КонецПроцедуры

Процедура ДополнитьДанныеЗаполненияСчетовУчета(ДанныеЗаполнения) Экспорт
	
	Если ДанныеЗаполнения.Свойство("КорректировкаНДС") Тогда
		
		ДанныеЗаполнения.КорректировкаНДС = ДанныеЗаполнения.КорректироватьНДС;
		
	КонецЕсли;
	
КонецПроцедуры

#Область УстаревшиеПроцедурыИФункции

// Заполняет счета учета номенклатуры в табличной части документа
//
Процедура ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, ИмяТабличнойЧасти) Экспорт

	ТабличнаяЧасть = Объект[ИмяТабличнойЧасти];
	
	ДанныеОбъекта = Новый Структура("Дата, Организация");
	
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	СоответствиеСчетовУчета = ПроцедурыБухгалтерскогоУчета.ПолучитьСчетаУчетаСпискаНоменклатуры(
		ДанныеОбъекта.Организация, ОбщегоНазначения.ВыгрузитьКолонку(ТабличнаяЧасть, "Номенклатура", Истина), ДанныеОбъекта.Дата);
	
	Для каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
		СчетаУчета = СоответствиеСчетовУчета.Получить(СтрокаТабличнойЧасти.Номенклатура);
		ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, СтрокаТабличнойЧасти, ИмяТабличнойЧасти, СчетаУчета);
	КонецЦикла;

КонецПроцедуры

// Заполняет счета учета номенклатуры в строке табличной части документа
//
// Параметры:
//  ДанныеОбъекта         - структура данных объекта, используемых при заполнении счетов учета (вид операции,
//                          вид договора контрагента, признак комиссионной торговли и т.п.)
//  СтрокаТабличнойЧасти  - строка табличной части документа
//  ИмяТабличнойЧасти     - имя табличной части документа
//  СведенияОНоменклатуре - структура сведений о номенклатуре, либо стуктура счетов учета
//
Процедура ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, СтрокаТабличнойЧасти, ИмяТабличнойЧасти, СведенияОНоменклатуре, ВключаяЗаполненные = Истина) Экспорт

	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СведенияОНоменклатуре.Свойство("СчетаУчета") Тогда
		// СведенияОНоменклатуре - структура сведений номенклатуры
		СчетаУчета = СведенияОНоменклатуре.СчетаУчета;
	ИначеЕсли СведенияОНоменклатуре.Свойство("СчетУчетаБУ") Тогда
		// СведенияОНоменклатуре - структура счетов учета номенклатуры
		СчетаУчета = СведенияОНоменклатуре;
	Иначе
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СчетаУчета.СчетУчетаБУ) Тогда
		Если ВключаяЗаполненные ИЛИ НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СчетУчетаБУ) Тогда
			СтрокаТабличнойЧасти.СчетУчетаБУ = СчетаУчета.СчетУчетаБУ;
		КонецЕсли;		
	КонецЕсли;

Если ИмяТабличнойЧасти <> "ТоварыЗабаланс" Тогда //Евгений
	Если ЗначениеЗаполнено(СчетаУчета.СчетУчетаНУ) Тогда
		Если ВключаяЗаполненные ИЛИ НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СчетУчетаНУ) Тогда			
			СтрокаТабличнойЧасти.СчетУчетаНУ = СчетаУчета.СчетУчетаНУ;
		КонецЕсли;                                                                    		
	КонецЕсли;
	
	
	Если ЗначениеЗаполнено(СчетаУчета.СчетСебестоимостиПриРеализацииБУ) Тогда
		
		Если СтрокаТабличнойЧасти.СчетЗатратБУ <> СчетаУчета.СчетСебестоимостиПриРеализацииБУ Тогда
			Для Счетчик = 1 По 3 Цикл
				СтрокаТабличнойЧасти["СубконтоЗатратБУ" + Счетчик] = Неопределено;
			КонецЦикла;
		КонецЕсли;
		
		СтрокаТабличнойЧасти.СчетЗатратБУ = СчетаУчета.СчетСебестоимостиПриРеализацииБУ;
		ПроцедурыБухгалтерскогоУчета.ЗаполнитьАналитикуСчетаТабличнойЧасти(СтрокаТабличнойЧасти, СчетаУчета, "СубконтоСебестоимостиБУ", "СчетЗатратБУ", "СубконтоЗатратБУ");
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СчетаУчета.СчетСебестоимостиПриРеализацииНУ) Тогда
		
		Если СтрокаТабличнойЧасти.СчетЗатратНУ <> СчетаУчета.СчетСебестоимостиПриРеализацииНУ Тогда
			Для Счетчик = 1 По 3 Цикл
				СтрокаТабличнойЧасти["СубконтоЗатратНУ" + Счетчик] = Неопределено;
			КонецЦикла;
		КонецЕсли;

		СтрокаТабличнойЧасти.СчетЗатратНУ = СчетаУчета.СчетСебестоимостиПриРеализацииНУ;
		ПроцедурыБухгалтерскогоУчета.ЗаполнитьАналитикуСчетаТабличнойЧасти(СтрокаТабличнойЧасти, СчетаУчета, "СубконтоСебестоимостиНУ", "СчетЗатратНУ", "СубконтоЗатратНУ");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СчетаУчета.СчетУчетаНДСПоПриобретению) Тогда
		Если ВключаяЗаполненные ИЛИ НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СчетУчетаНДС) Тогда			
			СтрокаТабличнойЧасти.СчетУчетаНДС = СчетаУчета.СчетУчетаНДСПоПриобретению;
		КонецЕсли;
	КонецЕсли;
КонецЕсли; //Евгений
	
КонецПроцедуры

// Производит заполнение и установку реквизитов налогового учета и НДС в табличной части
//
Процедура ЗаполнитьРеквизитыНалоговогоУчета(ДанныеОбъекта, СтрокаТабличнойЧасти, ИмяТабличнойЧасти) Экспорт
	
	МетаданныеДокумента = ДанныеОбъекта.Ссылка.Метаданные();
	ОбработкаТабличныхЧастей.ЗаполнитьНДСВидОборотаТабЧасти(СтрокаТабличнойЧасти, ДанныеОбъекта, ИмяТабличнойЧасти, МетаданныеДокумента);
	ОбработкаТабличныхЧастей.ЗаполнитьНДСВидПоступленияТабЧасти(СтрокаТабличнойЧасти, ИмяТабличнойЧасти, МетаданныеДокумента, Пользователи.ТекущийПользователь());

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// См. ЗапретРедактированияРеквизитовОбъектовПереопределяемый.ПриОпределенииОбъектовСЗаблокированнымиРеквизитами.
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт
	
	БлокируемыеРеквизиты = Новый Массив;
	
	Если ОбщегоНазначенияБККлиентСервер.ЭтоПростаяВерсияКонфигурации() Тогда
		БлокируемыеРеквизиты.Добавить("Дата");
		БлокируемыеРеквизиты.Добавить("Номер");
		БлокируемыеРеквизиты.Добавить("ДокументОснование; ДокументОснование"); //сделано специально для формы Дполнительно
		БлокируемыеРеквизиты.Добавить("Организация; СтруктурноеПодразделениеОрганизация");
		БлокируемыеРеквизиты.Добавить("СуммаДокумента");
		БлокируемыеРеквизиты.Добавить("СтруктурноеПодразделение");
		БлокируемыеРеквизиты.Добавить("Склад");
		
		// таб. часть Товары
		БлокируемыеРеквизиты.Добавить("Товары; ТоварыГруппаЗаполнить, ТоварыПодборТовары, ТоварыОчиститьТовары, ТоварыИзменитьТовары,
			|ТоварыСкопироватьСтроки, ТоварыВставитьСтроки, ТоварыКонтекстноеМенюСкопироватьСтроки, ТоварыКонтекстноеМенюВставитьСтроки");
		БлокируемыеРеквизиты.Добавить("Товары.Номенклатура; ТоварыНоменклатура");
		БлокируемыеРеквизиты.Добавить("Товары.Количество; ТоварыКоличество");
		БлокируемыеРеквизиты.Добавить("Товары.СтавкаНДС; ТоварыСтавкаНДС");
		БлокируемыеРеквизиты.Добавить("Товары.ЕдиницаИзмерения; ТоварыЕдиницаИзмерения");
		БлокируемыеРеквизиты.Добавить("Товары.Коэффициент; ТоварыКоэффициент");
	КонецЕсли;
	
	Возврат БлокируемыеРеквизиты;
	
КонецФункции

// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// ПОДГОТОВКА ПАРАМЕТРОВ ПРОВЕДЕНИЯ ДОКУМЕНТА

Функция ПодготовитьПараметрыПроведения(ДокументСсылка, Отказ) Экспорт

	ПараметрыПроведения = Новый Структура;

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("Содержание", НСтр("ru='Списание ТМЗ'", ОбщегоНазначения.КодОсновногоЯзыка()));
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета",	Константы.ВалютаРегламентированногоУчета.Получить());
	
	НомераТаблиц = Новый Структура;
	
	Запрос.Текст = ТекстЗапросаРеквизитыДокумента(НомераТаблиц);
	Результат = Запрос.ВыполнитьПакет();
	ТаблицаРеквизиты = Результат[НомераТаблиц["Реквизиты"]].Выгрузить();
	ПараметрыПроведения.Вставить("Реквизиты", ТаблицаРеквизиты);
	
	Реквизиты = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ТаблицаРеквизиты[0]);
	
	Если НЕ УчетнаяПолитикаСервер.Существует(Реквизиты.Организация, Реквизиты.Период, "БУ", Истина, ДокументСсылка)
		ИЛИ НЕ УчетнаяПолитикаСервер.Существует(Реквизиты.Организация, Реквизиты.Период, "НУ", Истина, ДокументСсылка)Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат ПараметрыПроведения;
	КонецЕсли;
	
	ОрганизацияПлательщикНалогаНаПрибыль 			= ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период);
	ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль 	= ОрганизацияПлательщикНалогаНаПрибыль И ПроцедурыНалоговогоУчета.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль(Реквизиты.Организация, Реквизиты.Период);
	
	НеобходимостьОтраженияВНУ 						= (ОрганизацияПлательщикНалогаНаПрибыль И Реквизиты.УчитыватьКПН) И (ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль ИЛИ Реквизиты.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ);
	
	Реквизиты.Вставить("ОрганизацияПлательщикНалогаНаПрибыль", 			 ОрганизацияПлательщикНалогаНаПрибыль);
	Реквизиты.Вставить("ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль", ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль);
	Реквизиты.Вставить("НеобходимостьОтраженияВНУ", 					 НеобходимостьОтраженияВНУ);
	
	ПараметрыПроведения.Реквизиты.ЗаполнитьЗначения(НеобходимостьОтраженияВНУ, "НеобходимостьОтраженияВНУ");
	ПараметрыПроведения.Реквизиты.ЗаполнитьЗначения(ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль, "ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль");
	
	Запрос.УстановитьПараметр("СинонимТовары",	НСтр("ru = 'Товары'", ОбщегоНазначения.КодОсновногоЯзыка()));
	Запрос.УстановитьПараметр("СинонимТоварыНДС",	НСтр("ru = 'ТоварыНДС'", ОбщегоНазначения.КодОсновногоЯзыка()));
	Запрос.УстановитьПараметр("НеобходимостьОтраженияВНУ",	НеобходимостьОтраженияВНУ);
	
	Налогоплательщик = Реквизиты.Организация;
	Если ПолучитьФункциональнуюОпцию("ПоддержкаРаботыСоСтруктурнымиПодразделениями") Тогда
		
		Налогоплательщик = ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(Реквизиты.СтруктурноеПодразделение,
																	Реквизиты.Организация,
																	Перечисления.РазделыНалоговогоУчета.НДС);
	КонецЕсли;	
	
	Реквизиты.Вставить("Налогоплательщик", Налогоплательщик);
	
	ПараметрыПроведения.Реквизиты.ЗаполнитьЗначения(Налогоплательщик, "Налогоплательщик");
	
	НомераТаблиц = Новый Структура;

	Запрос.Текст	= ТекстЗапросаВременныеТаблицыДокумента(Реквизиты,НомераТаблиц)
					+ ТекстЗапросаСписаниеТоваров(НомераТаблиц)
					+ ТекстЗапросаСписаниеТоваровНДС(НомераТаблиц)
					+ ТекстЗапросаТоварыОрганизаций(Реквизиты, НомераТаблиц, ПараметрыПроведения);

	
	Если НЕ ПустаяСтрока(Запрос.Текст) Тогда 
		Результат = Запрос.ВыполнитьПакет();
		Для Каждого НомерТаблицы Из НомераТаблиц Цикл
			ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат[НомерТаблицы.Значение].Выгрузить());
		КонецЦикла;
	КонецЕсли;
	
	Возврат ПараметрыПроведения;

КонецФункции

Функция ТекстЗапросаРеквизитыДокумента(НомераТаблиц)
	НомераТаблиц.Вставить("ВременнаяТаблицаСоставДокумента", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВременнаяТаблицаРеквизиты", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("Реквизиты", НомераТаблиц.Количество());
	
	ТекстЗапроса =	  "ВЫБРАТЬ
	              	   |	МАКСИМУМ(СоставДокумента.ЕстьТовары) КАК ЕстьТовары,
	              	   |	МАКСИМУМ(СоставДокумента.ЕстьНомераГТД) КАК ЕстьНомераГТД
	              	   |ПОМЕСТИТЬ СоставДокумента
	              	   |ИЗ
	              	   |	(ВЫБРАТЬ ПЕРВЫЕ 1
	              	   |		ИСТИНА КАК ЕстьТовары,
	              	   |		ЛОЖЬ КАК ЕстьНомераГТД
	              	   |	ИЗ
	              	   |		Документ.СписаниеТоваров.Товары КАК ТаблицаДокумента
	              	   |	ГДЕ
	              	   |		ТаблицаДокумента.Ссылка = &Ссылка
	              	   |	
	              	   |	ОБЪЕДИНИТЬ ВСЕ
	              	   |	
	              	   |	ВЫБРАТЬ ПЕРВЫЕ 1
	              	   |		ЛОЖЬ,
	              	   |		ИСТИНА
	              	   |	ИЗ
	              	   |		Документ.СписаниеТоваров.НомераГТД КАК ТаблицаДокумента
	              	   |	ГДЕ
	              	   |		ТаблицаДокумента.Ссылка = &Ссылка) КАК СоставДокумента
	              	   |;
	              	   |
	              	   |////////////////////////////////////////////////////////////////////////////////
	              	   |ВЫБРАТЬ   
					   //Евгений+
					   |	Реквизиты.МОЛ КАК МОЛ,
					   //Евгений-
	              	   |	Реквизиты.Ссылка КАК Регистратор,
					   |	Реквизиты.Ссылка КАК Ссылка,
	              	   |	Реквизиты.Дата КАК Период,
	              	   |	""Списание"" КАК ТипСписания,
	              	   |	Реквизиты.Ссылка КАК ДокументРеализации,
	              	   |	Реквизиты.Организация КАК Организация,
	              	   |	Реквизиты.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	              	   |	Реквизиты.СтруктурноеПодразделение КАК КорСтруктурноеПодразделение,
	              	   |	Реквизиты.УчитыватьКПН КАК УчитыватьКПН,
	              	   |	Реквизиты.ВидУчетаНУ КАК ВидУчетаНУ,
	              	   |	НЕОПРЕДЕЛЕНО КАК Контрагент,
	              	   |	&ВалютаРегламентированногоУчета КАК ВалютаВзаиморасчетов,
	              	   |	&Содержание КАК Содержание,
	              	   |	Реквизиты.УчитыватьНДС,
	              	   |	Реквизиты.СубконтоЗатратНДСБУ1,
	              	   |	Реквизиты.СубконтоЗатратНДСБУ2,
	              	   |	Реквизиты.СубконтоЗатратНДСБУ3,
	              	   |	Реквизиты.СубконтоЗатратНДСНУ1,
	              	   |	Реквизиты.СубконтоЗатратНДСНУ2,
	              	   |	Реквизиты.СубконтоЗатратНДСНУ3,
	              	   |	Реквизиты.СчетЗатратНДСБУ,
	              	   |	Реквизиты.СчетЗатратНДСНУ,
	              	   |	Реквизиты.КорректироватьНДС,
	              	   |	ЛОЖЬ КАК НеобходимостьОтраженияВНУ,
	              	   |	ЛОЖЬ КАК ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль,
	              	   |	НЕОПРЕДЕЛЕНО КАК Налогоплательщик,
	              	   |	Реквизиты.Склад
	              	   |ПОМЕСТИТЬ Реквизиты
	              	   |ИЗ
	              	   |	Документ.СписаниеТоваров КАК Реквизиты
	              	   |ГДЕ
	              	   |	Реквизиты.Ссылка = &Ссылка
	              	   |;
	              	   |
	              	   |////////////////////////////////////////////////////////////////////////////////
	              	   |ВЫБРАТЬ
	              	   //Евгений+
					   |	Реквизиты.МОЛ КАК МОЛ,
					   //Евгений-
	              	   |	Реквизиты.Регистратор,
	              	   |	Реквизиты.Период,
	              	   |	Реквизиты.ТипСписания,
	              	   |	Реквизиты.ДокументРеализации,
	              	   |	Реквизиты.Организация,
	              	   |	Реквизиты.СтруктурноеПодразделение,
	              	   |	Реквизиты.КорСтруктурноеПодразделение,
	              	   |	Реквизиты.УчитыватьКПН,
	              	   |	Реквизиты.ВидУчетаНУ,
	              	   |	Реквизиты.Контрагент,
	              	   |	Реквизиты.ВалютаВзаиморасчетов,
	              	   |	Реквизиты.Содержание,
	              	   |	Реквизиты.УчитыватьНДС,
	              	   |	Реквизиты.СубконтоЗатратНДСБУ1,
	              	   |	Реквизиты.СубконтоЗатратНДСБУ2,
	              	   |	Реквизиты.СубконтоЗатратНДСБУ3,
	              	   |	Реквизиты.СубконтоЗатратНДСНУ1,
	              	   |	Реквизиты.СубконтоЗатратНДСНУ2,
	              	   |	Реквизиты.СубконтоЗатратНДСНУ3,
	              	   |	Реквизиты.СчетЗатратНДСБУ,
	              	   |	Реквизиты.СчетЗатратНДСНУ,
	              	   |	Реквизиты.КорректироватьНДС,
	              	   |	Реквизиты.НеобходимостьОтраженияВНУ,
	              	   |	Реквизиты.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль,
	              	   |	Реквизиты.Налогоплательщик,
	              	   |	Реквизиты.Склад,
	              	   |	ЕСТЬNULL(СоставДокумента.ЕстьТовары, ЛОЖЬ) КАК ЕстьТовары,
	              	   |	ЕСТЬNULL(СоставДокумента.ЕстьНомераГТД, ЛОЖЬ) КАК ЕстьНомераГТД
	              	   |ИЗ
	              	   |	Реквизиты КАК Реквизиты
	              	   |		ЛЕВОЕ СОЕДИНЕНИЕ СоставДокумента КАК СоставДокумента
	              	   |		ПО (ИСТИНА)";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаВременныеТаблицыДокумента(Реквизиты,НомераТаблиц)

	НомераТаблиц.Вставить("ВременнаяТаблицаТовары", НомераТаблиц.Количество());

	//Сухомлинов+ не нужна проверка(при пустой тч выходит ошибка)
	//Если Реквизиты.ЕстьТовары Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаТовары.Ссылка,
		|	ТаблицаТовары.НомерСтроки,
		|	ТаблицаТовары.Номенклатура,
		|	Выразить(ТаблицаТовары.Количество * ТаблицаТовары.Коэффициент КАК ЧИСЛО(19, 3)) КАК Количество,
		|	ТаблицаТовары.СчетУчетаБУ,
		|	ТаблицаТовары.НДСВидОборота,
		|	ТаблицаТовары.НДСВидПоступления,
		|	ТаблицаТовары.СтавкаНДС,
		|	ТаблицаТовары.СубконтоЗатратБУ1,
		|	ТаблицаТовары.СубконтоЗатратБУ2,
		|	ТаблицаТовары.СубконтоЗатратБУ3,
		|	ТаблицаТовары.СубконтоЗатратНУ1,
		|	ТаблицаТовары.СубконтоЗатратНУ2,
		|	ТаблицаТовары.СубконтоЗатратНУ3,
		|	ТаблицаТовары.СчетЗатратБУ,
		|	ТаблицаТовары.СчетЗатратНУ,
		|	ТаблицаТовары.СчетУчетаНДС,
		|	ТаблицаТовары.СчетУчетаНУ,
		|	ТаблицаТовары.КлючСвязи,
		|	ТаблицаТовары.Коэффициент КАК Коэффициент
		|ПОМЕСТИТЬ ТаблицаТовары
		|ИЗ
		|	Документ.СписаниеТоваров.Товары КАК ТаблицаТовары
		|ГДЕ
		|	ТаблицаТовары.Ссылка = &Ссылка"
		+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	//КонецЕсли;
	//Сухомлинов-
	
	НомераТаблиц.Вставить("ВременнаяТаблицаНомераГТД", НомераТаблиц.Количество());		
	ТекстЗапроса = ТекстЗапроса + 
	"ВЫБРАТЬ
	|	ТаблицаНомераГТД.НомерСтроки,
	|	ТаблицаНомераГТД.Количество Количество,
	|	ТаблицаНомераГТД.НомерГТД КАК НомерГТД,
	|	ТаблицаНомераГТД.КлючСвязи
	|ПОМЕСТИТЬ ТаблицаНомераГТД
	|ИЗ
	|	Документ.СписаниеТоваров.НомераГТД КАК ТаблицаНомераГТД
	|ГДЕ
	|	ТаблицаНомераГТД.Ссылка = &Ссылка"
	+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();	
	
	Возврат ТекстЗапроса ;

КонецФункции

Функция ТекстЗапросаСписаниеТоваров(НомераТаблиц)
	
	НомераТаблиц.Вставить("СписаниеТоваровТаблицаТовары", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	""Товары"" КАК ИмяСписка,
	|	&СинонимТовары КАК СинонимСписка,
	|	Реквизиты.Период КАК Период,
	|	ТаблицаТовары.НомерСтроки,
	|	ТаблицаТовары.СчетУчетаБУ,
	|	ТаблицаТовары.СчетУчетаНУ,
	|	ТаблицаТовары.Номенклатура,
	|	Реквизиты.Склад КАК Склад,
	|   ТаблицаТовары.Количество КАК Количество,
	|	Реквизиты.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	|	Реквизиты.СтруктурноеПодразделение КАК КорСтруктурноеПодразделение,
	|	0 КАК Себестоимость,
	|	0 КАК Сумма,
	|	0 КАК СуммаВал,
	|	НЕОПРЕДЕЛЕНО КАК ДокументОприходования,
	|	ТаблицаТовары.СчетЗатратБУ КАК КорСчетСписанияБУ,
	|	ТаблицаТовары.СубконтоЗатратБУ1 КАК КорСубконтоБУ1,
	|	ТаблицаТовары.СубконтоЗатратБУ2 КАК КорСубконтоБУ2,
	|	ТаблицаТовары.СубконтоЗатратБУ3 КАК КорСубконтоБУ3,
	|	НЕОПРЕДЕЛЕНО КАК ВидКорСубконтоБУ1,
	|	НЕОПРЕДЕЛЕНО КАК ВидКорСубконтоБУ2,
	|	НЕОПРЕДЕЛЕНО КАК ВидКорСубконтоБУ3,
	|	ТаблицаТовары.СчетЗатратНУ КАК КорСчетСписанияНУ,
	|	ТаблицаТовары.СубконтоЗатратНУ1 КАК КорСубконтоНУ1,
	|	ТаблицаТовары.СубконтоЗатратНУ2 КАК КорСубконтоНУ2,
	|	ТаблицаТовары.СубконтоЗатратНУ3 КАК КорСубконтоНУ3,
	|	НЕОПРЕДЕЛЕНО КАК ВидКорСубконтоНУ1,
	|	НЕОПРЕДЕЛЕНО КАК ВидКорСубконтоНУ2,
	|	НЕОПРЕДЕЛЕНО КАК ВидКорСубконтоНУ3,
	|	Реквизиты.УчитыватьНДС,
	|	Реквизиты.КорректироватьНДС
	|ИЗ
	|		ТаблицаТовары КАК ТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|		ПО (ИСТИНА)
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаТовары.НомерСтроки";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
		
КонецФункции

Функция ТекстЗапросаСписаниеТоваровНДС(НомераТаблиц)
	
	НомераТаблиц.Вставить("СписаниеТоваровТаблицаТоварыНДС", НомераТаблиц.Количество());

	ТекстЗапроса =
	"   ВЫБРАТЬ
	|	""ТоварыНДС"" КАК ИмяСписка,
	|	&СинонимТоварыНДС КАК СинонимСписка,
	|	Реквизиты.Период КАК Период,
	|	ТаблицаТовары.НомерСтроки,
	|	ТаблицаТовары.Номенклатура,
	|	Реквизиты.СтруктурноеПодразделение КАК КорСтруктурноеПодразделение,
	|	ТаблицаТовары.СчетУчетаНДС,
	|	ТаблицаТовары.СтавкаНДС,
	|	ТаблицаТовары.НДСВидОборота,
	|	ТаблицаТовары.НДСВидПоступления
	|ИЗ
	|	ТаблицаТовары КАК ТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|		ПО (ИСТИНА)
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаТовары.НомерСтроки";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
		
КонецФункции

Функция ТекстЗапросаТоварыОрганизаций(Реквизиты,НомераТаблиц,ПараметрыПроведения)
	
	НомераТаблиц.Вставить("ТаблицаТоварыОрганизаций", НомераТаблиц.Количество());		
		
	ТекстЗапроса = НомераГТДСервер.ТекстЗапросаТоварыОрганизацийРасход();

	Возврат ТекстЗапроса;   		
	
КонецФункции

// ЗАПОЛНЕНИЕ ДОКУМЕНТА ПО ОСНОВАНИЮ

// Процедура выполняет заполниение табличной части по инвентаризации товаров.
//
// Параметры:
//  ДокументОснование - ссылка на документ основание (инвентаризация товаров).
//
Процедура ЗаполнитьТоварыПоИнвентаризацииТоваров(ДанныеОбъекта, ДокументОснование) Экспорт

	// Заполним реквизиты из стандартного набора по документу основанию.
	ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ДанныеОбъекта, ДокументОснование);
	
	// Установим видимость закладки НДС
	ДанныеОбъекта.УчитыватьНДС =  ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНДС(ДанныеОбъекта.Организация, ДанныеОбъекта.Дата);

	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ДокументСсылка"		   , ДанныеОбъекта.Ссылка);
	Запрос.УстановитьПараметр("ДокументОснованиеСсылка", ДокументОснование);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Док.Номенклатура,
	|	Док.ЕдиницаИзмерения,
	|	Док.Ссылка.Склад КАК Склад,
	|	Док.СчетУчетаБУ КАК СчетУчетаБУ,
	|	МАКСИМУМ(Док.КоличествоУчет - Док.Количество) КАК КоличествоОтклонение,
	|	ВЫБОР
	|		КОГДА СУММА(ВложенныйЗапрос.Количество) ЕСТЬ NULL 
	|			ТОГДА 0
	|		ИНАЧЕ СУММА(ВложенныйЗапрос.Количество)
	|	КОНЕЦ КАК КоличествоСписанное
	|ИЗ
	|	Документ.ИнвентаризацияТоваровНаСкладе.Товары КАК Док
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ДокСписание.Номенклатура КАК Номенклатура,
	|			ДокСписание.Ссылка.Склад КАК Склад,
	|			ДокСписание.Количество КАК Количество
	|		ИЗ
	|			Документ.СписаниеТоваров.Товары КАК ДокСписание
	|		ГДЕ
	|			ДокСписание.Ссылка <> &ДокументСсылка
	|			И ДокСписание.Ссылка.Проведен
	|			И ДокСписание.Ссылка.ДокументОснование = &ДокументОснованиеСсылка) КАК ВложенныйЗапрос
	|		ПО Док.Номенклатура = ВложенныйЗапрос.Номенклатура
	|			И Док.Ссылка.Склад = ВложенныйЗапрос.Склад
	|ГДЕ
	|	Док.Ссылка = &ДокументОснованиеСсылка
	|	И Док.КоличествоУчет - Док.Количество > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	Док.Номенклатура,
	|	Док.ЕдиницаИзмерения,
	|	Док.Ссылка.Склад,
	|	Док.СчетУчетаБУ";

	РезультатЗапроса = Запрос.Выполнить();

	ДанныеОбъекта.Склад = ДокументОснование.Склад;

	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл

		КоличествоСписать = Выборка.КоличествоОтклонение - Выборка.КоличествоСписанное;

		Если КоличествоСписать <= 0 Тогда
			Продолжить;
		КонецЕсли;

		СтрокаТабличнойЧасти = ДанныеОбъекта.Товары.Добавить();

		СтрокаТабличнойЧасти.Номенклатура     = Выборка.Номенклатура;
		СтрокаТабличнойЧасти.СчетУчетаБУ      = Выборка.СчетУчетаБУ;
		СтрокаТабличнойЧасти.ЕдиницаИзмерения = Выборка.ЕдиницаИзмерения;
		СтрокаТабличнойЧасти.Коэффициент      = 1;
		СтрокаТабличнойЧасти.Количество       = КоличествоСписать;
		СтрокаТабличнойЧасти.КлючСвязи = ОбщегоНазначенияБККлиентСервер.НовыйКлючСвязиСтрокиТаблицы(ДанныеОбъекта.Товары);
		// Заполняем реквизиты табличной части.
		ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ДанныеОбъекта, ДанныеОбъекта.Ссылка.Метаданные());
		
	КонецЦикла;
	
	Если ДанныеОбъекта.Товары.Количество() = 0 Тогда
		
		ТекстСообщения = НСтр("ru = 'В документе ""%1 № %2"" отсутствуют товары учетное количество которых превышает фактическое.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, 
			ДокументОснование.Метаданные().Представление(), ДокументОснование.Номер);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ДанныеОбъекта.Ссылка, "ДокументОснование", "Объект");
				
	КонецЕсли;


	//Документы.СписаниеТоваров.ЗаполнитьСчетаУчетаВТабличнойЧасти(ДанныеОбъекта, "Товары");
	
	ДанныеОбъекта.ДокументОснование = ДокументОснование;
	
	СчетаУчетаВДокументах.ЗаполнитьПередОтображениемПользователю(ДанныеОбъекта);

КонецПроцедуры // ЗаполнитьТоварыПоИнвентаризацииТоваров()

// Процедура выполняет заполниение табличной части по списанию товаров.
//
// Параметры:
//  ДокументОснование - ссылка на документ основание (инвентаризация товаров).
//
Процедура ЗаполнитьТоварыПоПеремещениюТоваров(ДанныеОбъекта, ДокументОснование) Экспорт

	// Заполним реквизиты из стандартного набора по документу основанию.
	ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ДанныеОбъекта, ДокументОснование);

	ДанныеОбъекта.УчитыватьНДС =  ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНДС(ДанныеОбъекта.Организация, ДанныеОбъекта.Дата);

	Запрос = Новый Запрос;                          
	                                                                 
	Запрос.УстановитьПараметр("ДокументСсылка"		   , ДанныеОбъекта.Ссылка);
	Запрос.УстановитьПараметр("ДокументОснованиеСсылка", ДокументОснование);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Док.Номенклатура,
	|	Док.ЕдиницаИзмерения,
	|	Док.Коэффициент КАК Коэффициент,
	|	Док.Ссылка.СкладПолучатель КАК Склад,
	|	Док.НовыйСчетУчетаБУ КАК СчетУчетаБУ,
	|	СУММА(Док.Количество) КАК Количество	
	|ИЗ
	|	Документ.ПеремещениеТоваров.Товары КАК Док
	|ГДЕ
	|	Док.Ссылка = &ДокументОснованиеСсылка
	|
	|СГРУППИРОВАТЬ ПО
	|	Док.Номенклатура,
	|	Док.ЕдиницаИзмерения,
	|	Док.Коэффициент,
	|	Док.Ссылка.СкладПолучатель,
	|	Док.НовыйСчетУчетаБУ";

	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	ДанныеОбъекта.Склад = ДокументОснование.СкладПолучатель;		
	
	Пока Выборка.Следующий() Цикл

		СтрокаТабличнойЧасти = ДанныеОбъекта.Товары.Добавить();

		СтрокаТабличнойЧасти.Номенклатура     = Выборка.Номенклатура;
		СтрокаТабличнойЧасти.СчетУчетаБУ      = Выборка.СчетУчетаБУ;
		СтрокаТабличнойЧасти.ЕдиницаИзмерения = Выборка.ЕдиницаИзмерения;
		СтрокаТабличнойЧасти.Коэффициент      = Выборка.Коэффициент;
		СтрокаТабличнойЧасти.Количество       = Выборка.Количество;
		СтрокаТабличнойЧасти.КлючСвязи 		  = ОбщегоНазначенияБККлиентСервер.НовыйКлючСвязиСтрокиТаблицы(ДанныеОбъекта.Товары);	
		// Заполняем реквизиты табличной части.
		ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ДанныеОбъекта, ДанныеОбъекта.Ссылка.Метаданные());
	КонецЦикла;
	
	//ЗаполнитьСчетаУчетаВТабличнойЧасти(ДанныеОбъекта, "Товары");
	
	ДанныеОбъекта.ДокументОснование = ДокументОснование;
	
	СчетаУчетаВДокументах.ЗаполнитьПередОтображениемПользователю(ДанныеОбъекта);

КонецПроцедуры // ЗаполнитьТоварыПоИнвентаризацииТоваров()
   
// Процедура выполняет заполниение табличной части по инвентаризации товаров.
//
// Параметры:
//  ДокументОснование - ссылка на документ основание (инвентаризация товаров).
//
Процедура ЗаполнитьТоварыПоПоступлениюТоваров(ДанныеОбъекта, ДокументОснование) Экспорт

	// Заполним реквизиты из стандартного набора по документу основанию.
	ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ДанныеОбъекта, ДокументОснование);
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументОснование);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПоступлениеТоваровУслугТовары.Номенклатура КАК Номенклатура,
	|	ПоступлениеТоваровУслугТовары.ЕдиницаИзмерения,
	|	ПоступлениеТоваровУслугТовары.Коэффициент,
	|	ПоступлениеТоваровУслугТовары.Количество,
	|	ПоступлениеТоваровУслугТовары.НДСВидОборота,
	|	ПоступлениеТоваровУслугТовары.НДСВидПоступления,
	|	ПоступлениеТоваровУслугТовары.СчетУчетаБУ,
	|	ПоступлениеТоваровУслугТовары.СчетУчетаНУ,
	|	ПоступлениеТоваровУслугТовары.СчетУчетаНДС,
	|	ПоступлениеТоваровУслугТовары.СтавкаНДС,
	|	ПоступлениеТоваровУслугТовары.НомерГТД КАК НомерГТД
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
	|ГДЕ
	|	ПоступлениеТоваровУслугТовары.Ссылка = &ДокументСсылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПоступлениеТоваровУслугТовары.НомерСтроки";	

	ВыборкаОсновная = Запрос.Выполнить().Выбрать();
	  	          
	Склад = ДокументОснование.Склад;
	
	СтруктураПоиска = Новый Структура;
	
	Пока ВыборкаОсновная.Следующий() Цикл
		                                             
		СтруктураПоиска.Вставить("Номенклатура",     ВыборкаОсновная.Номенклатура); 
		СтруктураПоиска.Вставить("СчетУчетаБУ",      ВыборкаОсновная.СчетУчетаБУ);
		СтруктураПоиска.Вставить("СчетУчетаНУ",      ВыборкаОсновная.СчетУчетаБУ);
		СтруктураПоиска.Вставить("ЕдиницаИзмерения", ВыборкаОсновная.ЕдиницаИзмерения);
		СтруктураПоиска.Вставить("СтавкаНДС",        ВыборкаОсновная.СтавкаНДС);
		СтруктураПоиска.Вставить("НДСВидОборота",    ВыборкаОсновная.НДСВидОборота);
		СтруктураПоиска.Вставить("НДСВидПоступления",ВыборкаОсновная.НДСВидПоступления);
		
		СтрокаТабличнойЧасти = НомераГТДСервер.ЗаполнитьТабличныеЧастиСУчетомНомеровГТД(СтруктураПоиска, ВыборкаОсновная, ДанныеОбъекта.Товары, ДанныеОбъекта.НомераГТД);

	КонецЦикла;
	
	//ЗаполнитьСчетаУчетаВТабличнойЧасти(ДанныеОбъекта, "Товары");
	
	ДанныеОбъекта.ДокументОснование = ДокументОснование;
	
	СчетаУчетаВДокументах.ЗаполнитьПередОтображениемПользователю(ДанныеОбъекта);

КонецПроцедуры // ЗаполнитьТоварыПоПоступлениюТоваров()

// Процедура выполняет заполниение табличной части по инвентаризации товаров.
//
// Параметры:
//  ДокументОснование - ссылка на документ основание (инвентаризация товаров).
//
Процедура ЗаполнитьТоварыПоАвансовомуОтчету(ДанныеОбъекта, ДокументОснование) Экспорт

	// Заполним реквизиты из стандартного набора по документу основанию.
	ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ДанныеОбъекта, ДокументОснование);

	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументОснование);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	АвансовыйОтчетТовары.Номенклатура,
	|	АвансовыйОтчетТовары.ЕдиницаИзмерения,
	|	АвансовыйОтчетТовары.Коэффициент,
	|	АвансовыйОтчетТовары.Количество,
	|	АвансовыйОтчетТовары.НДСВидОборота,
	|	АвансовыйОтчетТовары.НДСВидПоступления,
	|	АвансовыйОтчетТовары.СчетУчетаБУ,
	|	АвансовыйОтчетТовары.СчетУчетаНУ,
	|	АвансовыйОтчетТовары.СчетУчетаНДС,
	|	АвансовыйОтчетТовары.СтавкаНДС
	|ИЗ
	|	Документ.АвансовыйОтчет.Товары КАК АвансовыйОтчетТовары
	|ГДЕ
	|	АвансовыйОтчетТовары.Ссылка = &ДокументСсылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	АвансовыйОтчетТовары.НомерСтроки";	

	РезультатЗапроса = Запрос.Выполнить();

	ДанныеОбъекта.Склад = ДокументОснование.Склад;

	Выборка = РезультатЗапроса.Выбрать();
	
	СтруктураПоиска = Новый Структура;
	
	Пока Выборка.Следующий() Цикл
		                                             
		СтруктураПоиска.Вставить("Номенклатура",     Выборка.Номенклатура); 
		СтруктураПоиска.Вставить("СчетУчетаБУ",      Выборка.СчетУчетаБУ);
		СтруктураПоиска.Вставить("СчетУчетаНУ",      Выборка.СчетУчетаНУ);
		СтруктураПоиска.Вставить("ЕдиницаИзмерения", Выборка.ЕдиницаИзмерения);
		СтруктураПоиска.Вставить("СтавкаНДС",        Выборка.СтавкаНДС);
		СтруктураПоиска.Вставить("НДСВидОборота",    Выборка.НДСВидОборота);
		СтруктураПоиска.Вставить("НДСВидПоступления",Выборка.НДСВидПоступления);
		
		СтрокаТабличнойЧасти = НомераГТДСервер.ЗаполнитьТабличныеЧастиСУчетомНомеровГТД(СтруктураПоиска, Выборка, ДанныеОбъекта.Товары, ДанныеОбъекта.НомераГТД);	
		
	КонецЦикла;
	
	//ЗаполнитьСчетаУчетаВТабличнойЧасти(ДанныеОбъекта, "Товары");
	
	ДанныеОбъекта.ДокументОснование = ДокументОснование;
	
	СчетаУчетаВДокументах.ЗаполнитьПередОтображениемПользователю(ДанныеОбъекта);

КонецПроцедуры // ЗаполнитьТоварыПоПоступлениюТоваров()

////////////////////////////////////////////////////////////////////////////////
// Интерфейс для работы с подсистемой Печать.

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Списание товаров
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "НакладнаяНаСписание";
	КомандаПечати.Представление = НСтр("ru = 'Списание товаров'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБККлиент.ВыполнитьКомандуПечати";
	КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.Порядок = 50;
	
	// Акт списания товаров
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "АктСписанияТоваров";
	КомандаПечати.Представление = НСтр("ru = 'Акт списания товаров'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБККлиент.ВыполнитьКомандуПечати";
	КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.Порядок = 51;
	
	// З-6 (Акт списания товаров)
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "АктСписанияТоваровЗ6";
	КомандаПечати.Представление = НСтр("ru = 'З-6 (Акт списания запасов)'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБККлиент.ВыполнитьКомандуПечати";
	КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.Порядок = 52;
	
	// Комплект документов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "НакладнаяНаСписание,АктСписанияТоваров,АктСписанияТоваровЗ6";
	КомандаПечати.Представление = НСтр("ru = 'Комплект документов'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.ФиксированныйКомплект = Истина;
	КомандаПечати.ПереопределитьПользовательскиеНастройкиКоличества = Истина;
	КомандаПечати.Порядок = 75;
	
	// Комплект документов (на принтер)
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "НакладнаяНаСписание,АктСписанияТоваров,АктСписанияТоваровЗ6";
	КомандаПечати.Представление = НСтр("ru = 'Комплект документов (на принтер)'");
	КомандаПечати.Картинка = БиблиотекаКартинок.ПечатьСразу;
	КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.ФиксированныйКомплект = Истина;
	КомандаПечати.ПереопределитьПользовательскиеНастройкиКоличества = Истина;
	КомандаПечати.СразуНаПринтер = Истина;
	КомандаПечати.Порядок = 76;
	
	// Настраиваемый комплект документов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "НакладнаяНаСписание,АктСписанияТоваров,АктСписанияТоваровЗ6";
	КомандаПечати.Представление = НСтр("ru = 'Настраиваемый комплект документов'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.ЗаголовокФормы = НСтр("ru = 'Настраиваемый комплект'");
	КомандаПечати.ДополнитьКомплектВнешнимиПечатнымиФормами = Истина;
	КомандаПечати.Порядок = 79;
	
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	// Печать Списание товаров
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "НакладнаяНаСписание") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"НакладнаяНаСписание",
			НСтр("ru = 'Списание товаров'"),
			ПечатьСписаниеТоваров(МассивОбъектов, ОбъектыПечати, ПараметрыВывода.КодЯзыка),
			,
			"Документ.СписаниеТоваров.ПФ_MXL_Накладная");  
			
		ОписаниеПечатнойФормы = КоллекцияПечатныхФорм.Найти(ВРег("НакладнаяНаСписание"), "ИмяВРЕГ");
		Если ОписаниеПечатнойФормы <> Неопределено Тогда
			ОписаниеПечатнойФормы.ДоступенВыводНаДругихЯзыках = Истина;
		КонецЕсли;

	КонецЕсли;

	// Печать Акт списания товаров
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "АктСписанияТоваров") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"АктСписанияТоваров",
			НСтр("ru = 'Акт списания товаров'"),
			ПечатьАктСписанияТоваров(МассивОбъектов, ОбъектыПечати, ПараметрыВывода.КодЯзыка),
			,
			"Документ.СписаниеТоваров.ПФ_MXL_АктСписания");  
			
		ОписаниеПечатнойФормы = КоллекцияПечатныхФорм.Найти(ВРег("АктСписанияТоваров"), "ИмяВРЕГ");
		Если ОписаниеПечатнойФормы <> Неопределено Тогда
			ОписаниеПечатнойФормы.ДоступенВыводНаДругихЯзыках = Истина;
		КонецЕсли;

	КонецЕсли;
	
	// Печать формы З-6
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "АктСписанияТоваровЗ6") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"АктСписанияТоваровЗ6",
			НСтр("ru = 'З-6 (Акт списания запасов)'"),
			//Евгений+
			//ПечатьЗ6(МассивОбъектов, ОбъектыПечати),
			ПечатьЗ9(МассивОбъектов, ОбъектыПечати), 
			//Евгений-
			,
			"ОбщийМакет.ПФ_MXL_З6");
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Подготовка табличных печатных документов.

// Функция формирует табличный документ с печатной формой накладной,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьСписаниеТоваров(МассивОбъектов, ОбъектыПечати, КодЯзыка=Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);

	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ВыводитьКоды    = Истина;
		Колонка         = "Артикул";
		ТекстКодАртикул = "Артикул";
	ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
		ВыводитьКоды    = Истина;
		Колонка         = "Код";
		ТекстКодАртикул = "Код";
	Иначе
		ВыводитьКоды    = Ложь;
		Колонка         = "";
		ТекстКодАртикул = "Код";
	КонецЕсли;

	Запрос = Новый Запрос;
	ЗапросКТоварам = Новый Запрос;
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	ЗапросКТоварам.УстановитьПараметр("МассивОбъектов", МассивОбъектов);

	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СписаниеТоваров.Ссылка КАК Ссылка,
	|	СписаниеТоваров.Номер,
	|	СписаниеТоваров.Дата,
	|	СписаниеТоваров.Организация,
	|	СписаниеТоваров.СтруктурноеПодразделение,
	|	СписаниеТоваров.Склад,
	|	СписаниеТоваров.СуммаДокумента,
	|	СписаниеТоваров.УчитыватьКПН,
	|	СписаниеТоваров.УчитыватьНДС,
	|	СписаниеТоваров.КорректироватьНДС
	|ПОМЕСТИТЬ ВТ_ДокументыСписаниеТоваров
	|ИЗ
	|	Документ.СписаниеТоваров КАК СписаниеТоваров
	|ГДЕ
	|	СписаниеТоваров.Ссылка В(&МассивОбъектов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТ_ДокументыСписаниеТоваров.Ссылка,
	|	ОтветственныеЛицаПоДокументам.ФизическоеЛицо КАК ОтветственноеЛицо,
	|	ВЫБОР
	|		КОГДА ФИОФизЛиц.ФизЛицо ЕСТЬ NULL 
	|			ТОГДА ОтветственныеЛицаПоДокументам.ФизическоеЛицо.Наименование
	|		ИНАЧЕ ФИОФизЛиц.Фамилия + ВЫБОР
	|				КОГДА ПОДСТРОКА(ФИОФизЛиц.Имя, 1, 1) <> """"
	|					ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛиц.Имя, 1, 1) + "".""
	|				ИНАЧЕ """"
	|			КОНЕЦ + ВЫБОР
	|				КОГДА ПОДСТРОКА(ФИОФизЛиц.Отчество, 1, 1) <> """"
	|					ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛиц.Отчество, 1, 1) + "".""
	|				ИНАЧЕ """"
	|			КОНЕЦ
	|	КОНЕЦ КАК ПредставлениеОтветственный
	|ПОМЕСТИТЬ ВТ_ОтветственныеЛица
	|ИЗ
	|	ВТ_ДокументыСписаниеТоваров КАК ВТ_ДокументыСписаниеТоваров
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ПериодыОтвественныеЛица.Ссылка КАК Ссылка,
	|			ОтветственныеЛица.ФизическоеЛицо КАК ФизическоеЛицо,
	|			МАКСИМУМ(ФИОФизЛиц.Период) КАК Период
	|		ИЗ
	|			(ВЫБРАТЬ
	|				МАКСИМУМ(ОтветственныеЛица.Период) КАК Период,
	|				ОтветственныеЛица.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|				ВТ_ДокументыСписаниеТоваров.Ссылка КАК Ссылка
	|			ИЗ
	|				ВТ_ДокументыСписаниеТоваров КАК ВТ_ДокументыСписаниеТоваров
	|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛица КАК ОтветственныеЛица
	|					ПО ВТ_ДокументыСписаниеТоваров.Склад = ОтветственныеЛица.СтруктурнаяЕдиница
	|						И ВТ_ДокументыСписаниеТоваров.Дата >= ОтветственныеЛица.Период
	|			
	|			СГРУППИРОВАТЬ ПО
	|				ОтветственныеЛица.СтруктурнаяЕдиница,
	|				ВТ_ДокументыСписаниеТоваров.Ссылка) КАК ПериодыОтвественныеЛица
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛица КАК ОтветственныеЛица
	|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц КАК ФИОФизЛиц
	|					ПО ОтветственныеЛица.ФизическоеЛицо = ФИОФизЛиц.ФизЛицо
	|				ПО ПериодыОтвественныеЛица.Период = ОтветственныеЛица.Период
	|					И ПериодыОтвественныеЛица.СтруктурнаяЕдиница = ОтветственныеЛица.СтруктурнаяЕдиница
	|					И (ПериодыОтвественныеЛица.Ссылка.Дата >= ФИОФизЛиц.Период)
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ПериодыОтвественныеЛица.Ссылка,
	|			ОтветственныеЛица.ФизическоеЛицо) КАК ОтветственныеЛицаПоДокументам
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц КАК ФИОФизЛиц
	|			ПО ОтветственныеЛицаПоДокументам.ФизическоеЛицо = ФИОФизЛиц.ФизЛицо
	|				И ОтветственныеЛицаПоДокументам.Период = ФИОФизЛиц.Период
	|		ПО ВТ_ДокументыСписаниеТоваров.Ссылка = ОтветственныеЛицаПоДокументам.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТ_ДокументыСписаниеТоваров.Ссылка,
	|	ВТ_ДокументыСписаниеТоваров.Номер КАК НомерДокумента,
	|	ВТ_ДокументыСписаниеТоваров.Дата КАК ДатаДокумента,
	|	ВТ_ДокументыСписаниеТоваров.Организация,
	|	ВТ_ДокументыСписаниеТоваров.СтруктурноеПодразделение,
	|	ВТ_ДокументыСписаниеТоваров.Склад.Представление КАК ПредставлениеСклада,
	|	ВТ_ДокументыСписаниеТоваров.СуммаДокумента,
	|	ВТ_ДокументыСписаниеТоваров.УчитыватьКПН,
	|	ВТ_ДокументыСписаниеТоваров.УчитыватьНДС,
	|	ВТ_ДокументыСписаниеТоваров.КорректироватьНДС,
	|	ВТ_ДокументыСписаниеТоваров.Ссылка.ИнвентаризационнаяКомиссия.(
	|		ФизЛицо,
	|		Председатель
	|	) КАК ИнвентаризационнаяКомиссия,
	|	ОтветственныеЛица.ОтветственноеЛицо КАК Ответственный,
	|	ОтветственныеЛица.ПредставлениеОтветственный,
	|	Константы.ВалютаРегламентированногоУчета ВалютаДокумента
	|ИЗ
	|	ВТ_ДокументыСписаниеТоваров КАК ВТ_ДокументыСписаниеТоваров
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОтветственныеЛица КАК ОтветственныеЛица
	|		ПО ВТ_ДокументыСписаниеТоваров.Ссылка = ОтветственныеЛица.Ссылка,
	|	Константы
	|ГДЕ
	|	ВТ_ДокументыСписаниеТоваров.Ссылка В(&МассивОбъектов)";
	
	ЗапросКТоварам.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
						   |	СписаниеТоваров.Ссылка,
						   |	СписаниеТоваров.Номенклатура,
						   |	СписаниеТоваров.НомерСтроки КАК НомерСтроки,
						   |	СписаниеТоваров.ЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения,
						   |	СписаниеТоваров.Номенклатура." + ТекстКодАртикул + " КАК КодАртикул,
						   |	СписаниеТоваров.Количество КАК Количество,
						   |	ЕСТЬNULL(ДвиженияТиповой.Сумма / ДвиженияТиповой.КоличествоКт * СписаниеТоваров.Коэффициент*СписаниеТоваров.Количество,0) КАК Сумма,
						   |	ЕСТЬNULL(КорректировкаНДС.СуммаНДС / ДвиженияТиповой.КоличествоКт * СписаниеТоваров.Коэффициент*СписаниеТоваров.Количество,0) КАК СуммаНДС
						   |ИЗ
						   |	(ВЫБРАТЬ
						   |		СписаниеТоваровТовары.Ссылка,
						   |		СписаниеТоваровТовары.Номенклатура КАК Номенклатура,
						   |		СУММА(СписаниеТоваровТовары.Количество) КАК Количество,
						   |		МИНИМУМ(СписаниеТоваровТовары.НомерСтроки) КАК НомерСтроки,
						   |		СписаниеТоваровТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
						   |		СписаниеТоваровТовары.Ссылка КАК Ссылка,
						   |		СписаниеТоваровТовары.Номенклатура.Код КАК НоменклатураКод,
						   |		СписаниеТоваровТовары.Номенклатура.Представление КАК НоменклатураПредставление,
						   |		СписаниеТоваровТовары.Коэффициент КАК Коэффициент,
						   |		СписаниеТоваровТовары.СчетУчетаБУ КАК СчетУчетаБУ
						   |	ИЗ
						   |		Документ.СписаниеТоваров.Товары КАК СписаниеТоваровТовары
						   |	
						   |	СГРУППИРОВАТЬ ПО
						   |		СписаниеТоваровТовары.Ссылка,
						   |		СписаниеТоваровТовары.Номенклатура,
						   |		СписаниеТоваровТовары.ЕдиницаИзмерения,
						   |		СписаниеТоваровТовары.Ссылка,
						   |		СписаниеТоваровТовары.Номенклатура.Код,
						   |		СписаниеТоваровТовары.Номенклатура.Представление,
						   |		СписаниеТоваровТовары.Коэффициент,
						   |		СписаниеТоваровТовары.СчетУчетаБУ) КАК СписаниеТоваров
						   |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
						   |			ТиповойДвиженияССубконто.Регистратор,
						   |			ТиповойДвиженияССубконто.СчетКт КАК СчетКт,
						   |			ТиповойДвиженияССубконто.СубконтоКт1 КАК СубконтоКт1,
						   |			СУММА(ТиповойДвиженияССубконто.Сумма) КАК Сумма,
						   |			СУММА(ТиповойДвиженияССубконто.КоличествоКт) КАК КоличествоКт
						   |		ИЗ
						   |			РегистрБухгалтерии.Типовой.ДвиженияССубконто(, , Регистратор В (&МассивОбъектов)) КАК ТиповойДвиженияССубконто
						   |		
						   |		СГРУППИРОВАТЬ ПО
						   |			ТиповойДвиженияССубконто.Регистратор,
						   |			ТиповойДвиженияССубконто.СчетКт,
						   |			ТиповойДвиженияССубконто.СубконтоКт1) КАК ДвиженияТиповой
						   |		ПО СписаниеТоваров.Номенклатура = ДвиженияТиповой.СубконтоКт1
						   |			И СписаниеТоваров.СчетУчетаБУ = ДвиженияТиповой.СчетКт
						   |			И СписаниеТоваров.Ссылка = ДвиженияТиповой.Регистратор
						   |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
						   |			КорректировкаНДС.Регистратор,
						   |			КорректировкаНДС.ТМЗ КАК ТМЗ,
						   |			СУММА(ВЫБОР
						   |					КОГДА КорректировкаНДС.СуммаНДС < 0
						   |						ТОГДА -КорректировкаНДС.СуммаНДС
						   |					ИНАЧЕ КорректировкаНДС.СуммаНДС
						   |				КОНЕЦ) КАК СуммаНДС
						   |		ИЗ
						   |			РегистрНакопления.КорректировкаНДСКВозмещению КАК КорректировкаНДС
						   |		ГДЕ
						   |			КорректировкаНДС.Регистратор В (&МассивОбъектов)
						   |		
						   |		СГРУППИРОВАТЬ ПО
						   |			КорректировкаНДС.Регистратор,
						   |			КорректировкаНДС.ТМЗ) КАК КорректировкаНДС
						   |		ПО СписаниеТоваров.Номенклатура = КорректировкаНДС.ТМЗ
						   |		И СписаниеТоваров.Ссылка = КорректировкаНДС.Регистратор
						   |ГДЕ
						   |	СписаниеТоваров.Ссылка В (&МассивОбъектов)
						   |
						   |УПОРЯДОЧИТЬ ПО
						   |	НомерСтроки
						   |
						   |ИТОГИ ПО
						   |	Ссылка
						   |";
						   
	ВыборкаПоДокументам = Запрос.Выполнить().Выбрать();
	
	ВыборкаПоРегистратору = ЗапросКТоварам.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.КлючПараметровПечати = "СписаниеТоваров_Накладная";

	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.СписаниеТоваров.ПФ_MXL_Накладная", КодЯзыка);

	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьРевизитыОрганизации = Макет.ПолучитьОбласть("РевизитыОрганизации");
	ОбластьНомераШапка 	 	= Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
	ОбластьКодовШапка  	 	= Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
	ОбластьДанныхШапка	 	= Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");
	ОбластьДанныхНДСШапка	= Макет.ПолучитьОбласть("ШапкаТаблицы|ДанныеНДС");
	ОбластьНомераСтрока 	= Макет.ПолучитьОбласть("Строка|НомерСтроки");
	ОбластьКодовСтрока  	= Макет.ПолучитьОбласть("Строка|КолонкаКодов");
	ОбластьДанныхСтрока 	= Макет.ПолучитьОбласть("Строка|Данные");
	ОбластьДанныхНДССтрока 	= Макет.ПолучитьОбласть("Строка|ДанныеНДС");
	ОбластьНомераСтрока 	= Макет.ПолучитьОбласть("Строка|НомерСтроки");
	ОбластьКодовСтрока  	= Макет.ПолучитьОбласть("Строка|КолонкаКодов");
	ОбластьДанныхСтрока 	= Макет.ПолучитьОбласть("Строка|Данные");
	ОбластьДанныхНДССтрока 	= Макет.ПолучитьОбласть("Строка|ДанныеНДС");
	ОбластьНомераИтого 		= Макет.ПолучитьОбласть("Итого|НомерСтроки");
	ОбластьКодовИтого  		= Макет.ПолучитьОбласть("Итого|КолонкаКодов");
	ОбластьДанныхИтого 		= Макет.ПолучитьОбласть("Итого|Данные");
	ОбластьДанныхНДСИтого 	= Макет.ПолучитьОбласть("Итого|ДанныеНДС");
	ОбластьКолонкаТовар 	= Макет.Область("Товар");
	ОбластьСуммаПрописьюНДС = Макет.ПолучитьОбласть("СуммаПрописьюНДС");
	ОбластьКомиссия = Макет.ПолучитьОбласть("Комиссия");
		
	Пока ВыборкаПоДокументам.Следующий() Цикл
		
		Если ТабДокумент.ВысотаТаблицы > 0 Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
		
		ВыборкаПоРегистратору.Сбросить();
		
		Если ВыборкаПоРегистратору.НайтиСледующий(ВыборкаПоДокументам.Ссылка) Тогда
			ВыборкаСтрокТовары = ВыборкаПоРегистратору.Выбрать();
		Иначе
			ВыборкаСтрокТовары = Неопределено;
		КонецЕсли;
		
		ТаблицаИнвентаризационнаяКомиссия = ВыборкаПоДокументам.ИнвентаризационнаяКомиссия.Выгрузить();
		
		СтруктурнаяЕдиницаОрганизация = ОбщегоНазначенияБК.ПолучитьСтруктурнуюЕдиницу(ВыборкаПоДокументам.Организация, ВыборкаПоДокументам.СтруктурноеПодразделение);
		
		ОбластьМакета.Параметры.ТекстЗаголовка = РаботаСДиалогами.СформироватьЗаголовокДокумента(ВыборкаПоДокументам.Ссылка, НСтр("ru='Списание товаров'", КодЯзыка),,,,КодЯзыка);

		ТабДокумент.Вывести(ОбластьМакета);
		
		ОбластьРевизитыОрганизации.Параметры.Заполнить(ВыборкаПоДокументам);
		ПредставлениеОрганизации = ОбщегоНазначенияБКВызовСервера.ОписаниеОрганизации(ОбщегоНазначенияБКВызовСервера.СведенияОЮрФизЛице(СтруктурнаяЕдиницаОрганизация, ВыборкаПоДокументам.ДатаДокумента), "ПолноеНаименование,");
		ОбластьРевизитыОрганизации.Параметры.ПредставлениеОрганизации = ПредставлениеОрганизации;
		ОбластьРевизитыОрганизации.Параметры.Организация 			  = СтруктурнаяЕдиницаОрганизация;
		ТабДокумент.Вывести(ОбластьРевизитыОрганизации);

		ТабДокумент.Вывести(ОбластьНомераШапка);
		Если ВыводитьКоды Тогда
			ОбластьКодовШапка.Параметры.Колонка = Колонка;
			ТабДокумент.Присоединить(ОбластьКодовШапка);
		КонецЕсли;

		ТабДокумент.Присоединить(ОбластьДанныхШапка);
		Если ВыборкаПоДокументам.УчитыватьНДС И ВыборкаПоДокументам.КорректироватьНДС Тогда
			ТабДокумент.Присоединить(ОбластьДанныхНДСШапка);
		КонецЕсли;	

		Если НЕ ВыводитьКоды Тогда
			ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + 
												Макет.Область("КолонкаКодов").ШиринаКолонки;
		КонецЕсли;

		ИтогоСумма = 0;
		ИтогоСуммаНДС = 0;
		
		Если НЕ ВыборкаСтрокТовары = Неопределено Тогда
				
			Пока ВыборкаСтрокТовары.Следующий() Цикл

				ОбластьНомераСтрока.Параметры.Заполнить(ВыборкаСтрокТовары);
						
				ТабДокумент.Вывести(ОбластьНомераСтрока);

				Если ВыводитьКоды Тогда
					ОбластьКодовСтрока.Параметры.КодАртикул = ВыборкаСтрокТовары.КодАртикул;
					ТабДокумент.Присоединить(ОбластьКодовСтрока);
				КонецЕсли;

				ОбластьДанныхСтрока.Параметры.Заполнить(ВыборкаСтрокТовары);
				ОбластьДанныхСтрока.Параметры.Товар = СокрЛП(ВыборкаСтрокТовары.Номенклатура.НаименованиеПолное);		
				ТабДокумент.Присоединить(ОбластьДанныхСтрока);		
				
				Если ВыборкаПоДокументам.УчитыватьНДС И ВыборкаПоДокументам.КорректироватьНДС Тогда
					ОбластьДанныхНДССтрока.Параметры.Заполнить(ВыборкаСтрокТовары);
					ТабДокумент.Присоединить(ОбластьДанныхНДССтрока);
				КонецЕсли;
				
				ИтогоСумма = ИтогоСумма + ВыборкаСтрокТовары.Сумма;
				ИтогоСуммаНДС = ИтогоСуммаНДС + ВыборкаСтрокТовары.СуммаНДС;
			КонецЦикла;
			
		КонецЕсли;

		// Вывести Итого
		ОбластьНомераИтого 		= Макет.ПолучитьОбласть("Итого|НомерСтроки");
		ОбластьКодовИтого  		= Макет.ПолучитьОбласть("Итого|КолонкаКодов");
		ОбластьДанныхИтого 		= Макет.ПолучитьОбласть("Итого|Данные");
		ОбластьДанныхНДСИтого 	= Макет.ПолучитьОбласть("Итого|ДанныеНДС");

		ТабДокумент.Вывести(ОбластьНомераИтого);
		
		Если ВыводитьКоды Тогда
			ТабДокумент.Присоединить(ОбластьКодовИтого);
		КонецЕсли;
		
		ОбластьДанныхИтого.Параметры.Всего = ОбщегоНазначенияБКВызовСервера.ФорматСумм(ИтогоСумма);
		ТабДокумент.Присоединить(ОбластьДанныхИтого);
		
		Если ВыборкаПоДокументам.УчитыватьНДС И ВыборкаПоДокументам.КорректироватьНДС Тогда
			ОбластьДанныхНДСИтого.Параметры.ВсегоНДС = ОбщегоНазначенияБКВызовСервера.ФорматСумм(ИтогоСуммаНДС);
			ТабДокумент.Присоединить(ОбластьДанныхНДСИтого);
		КонецЕсли;	

		// Вывести Сумму прописью
		ОбластьСуммаПрописью = Макет.ПолучитьОбласть("СуммаПрописью");												 
		ОбластьСуммаПрописью.Параметры.ИтоговаяСтрока = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Всего наименований %1, на сумму %2'", КодЯзыка),
															?(НЕ ВыборкаСтрокТовары = Неопределено, ВыборкаСтрокТовары.Количество(), 0),
															ОбщегоНазначенияБКВызовСервера.ФорматСумм(ИтогоСумма, ?(НЕ ВыборкаСтрокТовары = Неопределено, ВыборкаПоДокументам.ВалютаДокумента, "")));
																		 
		ОбластьСуммаПрописью.Параметры.СуммаПрописью  = ОбщегоНазначенияБКВызовСервера.СформироватьСуммуПрописью(ИтогоСумма, ВыборкаПоДокументам.ВалютаДокумента, КодЯзыка);
		ТабДокумент.Вывести(ОбластьСуммаПрописью);

		Если ВыборкаПоДокументам.УчитыватьНДС И ВыборкаПоДокументам.КорректироватьНДС Тогда
			ОбластьСуммаПрописьюНДС.Параметры.ИтоговаяСтрока = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Корректировка НДС в сумме %1'", КодЯзыка),ОбщегоНазначенияБКВызовСервера.ФорматСумм(ИтогоСуммаНДС, ВыборкаПоДокументам.ВалютаДокумента));
			ТабДокумент.Вывести(ОбластьСуммаПрописьюНДС);
		КонецЕсли;	

		// Варианты заголовков разделов с подписями печатной формы	
		ЗаголовокРазделаКомиссии = Новый Структура();
		ЗаголовокРазделаКомиссии.Вставить("ПредседательКомиссии", НСтр("ru='Председатель комиссии'", КодЯзыка));
		ЗаголовокРазделаКомиссии.Вставить("ЧленыКомиссии",        НСтр("ru='Члены комиссии:'", КодЯзыка));
		
		// Выведем подпись председателя инвентаризационной комиссии
		ПредседательКомиссии = ТаблицаИнвентаризационнаяКомиссия.Найти(Истина, "Председатель");
		
		Если НЕ (ПредседательКомиссии = Неопределено) Тогда
			
			ДанныеПредседателя = ПроцедурыУправленияПерсоналомВызовСервера.ДанныеФизЛица(ВыборкаПоДокументам.Организация, ПредседательКомиссии.ФизЛицо, ВыборкаПоДокументам.ДатаДокумента);
				
			ОбластьКомиссия.Параметры.ЗаголовокРазделаКомиссии = ЗаголовокРазделаКомиссии.ПредседательКомиссии;
			ОбластьКомиссия.Параметры.Должность                = ДанныеПредседателя.Должность;
			ОбластьКомиссия.Параметры.РасшифровкаПодписи       = ДанныеПредседателя.Представление;
			
		Иначе
			
			ОбластьКомиссия.Параметры.ЗаголовокРазделаКомиссии = ЗаголовокРазделаКомиссии.ПредседательКомиссии;
			ОбластьКомиссия.Параметры.Должность                = "";
			ОбластьКомиссия.Параметры.РасшифровкаПодписи       = "";
			
		КонецЕсли;
			
		ТабДокумент.Вывести(ОбластьКомиссия);
		
		// Выведем подписи членов комиссии
		ВыводитьЗаголовок = Истина;
		
		// Сформируем список членов комиссии
		СписокЧленовКомиссии = Новый Массив();
		
		Для Каждого Строка Из ТаблицаИнвентаризационнаяКомиссия Цикл
			Если НЕ Строка.Председатель Тогда
				СписокЧленовКомиссии.Добавить(Строка.ФизЛицо);
			КонецЕсли;
		КонецЦикла;
		
		ДанныеЧленовКомиссии = ПроцедурыУправленияПерсоналомВызовСервера.ДанныеФизЛиц(ВыборкаПоДокументам.Организация, СписокЧленовКомиссии, ВыборкаПоДокументам.ДатаДокумента);
		
		// Сначала выведем членов комиссии из выборки
		Для Каждого ЧленКомиссии Из ДанныеЧленовКомиссии Цикл
			
			Если НЕ ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабДокумент, ОбластьКомиссия) Тогда
				
				// Выведем разрыв страницы
				ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ВыводитьЗаголовок = Истина; // на новой странице выведем заголовок набора подписей
			
			КонецЕсли;
			
			ОбластьКомиссия.Параметры.ЗаголовокРазделаКомиссии = ?(ВыводитьЗаголовок, 
														   		 ЗаголовокРазделаКомиссии.ЧленыКомиссии,
														   		 "");
			ОбластьКомиссия.Параметры.Должность          = ЧленКомиссии.Должность;
			ОбластьКомиссия.Параметры.РасшифровкаПодписи = ЧленКомиссии.Представление;
			
			ТабДокумент.Вывести(ОбластьКомиссия);
			
			ВыводитьЗаголовок = Ложь; // в следующей итерации вывод заголовка не нужен
			
		КонецЦикла;
		
		// Затем выведем пустые места для подписей (чтобы в итоге получилось не менее 3-х
		Если ДанныеЧленовКомиссии.Количество() < 3 Тогда
			
			Если НЕ ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабДокумент, ОбластьКомиссия) Тогда
				
				// Выведем разрыв страницы
				ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ВыводитьЗаголовок = Истина; // на новой странице выведем заголовок набора подписей
				
			КонецЕсли;
			
			Для Итератор = (ДанныеЧленовКомиссии.Количество() + 1) По 3 Цикл
				
				ОбластьКомиссия.Параметры.ЗаголовокРазделаКомиссии = ?(ВыводитьЗаголовок, 
															   ЗаголовокРазделаКомиссии.ЧленыКомиссии,
															   "");
				ОбластьКомиссия.Параметры.Должность          = "";
				ОбластьКомиссия.Параметры.РасшифровкаПодписи = "";
				
				ТабДокумент.Вывести(ОбластьКомиссия);
				
				ВыводитьЗаголовок = Ложь; // в следующей итерации вывод заголовка не нужен
				
			КонецЦикла; 
			
		КонецЕсли;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, НомерСтрокиНачало, ОбъектыПечати, ВыборкаПоДокументам.Ссылка);
		
	КонецЦикла;

	Возврат ТабДокумент;

КонецФункции

// Функция формирует табличный документ с печатной формой накладной,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьАктСписанияТоваров(МассивОбъектов, ОбъектыПечати, КодЯзыка=Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);

	Запрос_ = Новый Запрос;
	Запрос_.Текст = 
		"ВЫБРАТЬ
		|	ВидыСубконтоТиповые.ТипЗначения КАК ТипЗначенияСубконто
		|ИЗ
		|	ПланВидовХарактеристик.ВидыСубконтоТиповые КАК ВидыСубконтоТиповые";

	Результат = Запрос_.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	ПустыеСсылки = Новый Массив;

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Для Каждого ТипСубконто Из ВыборкаДетальныеЗаписи.ТипЗначенияСубконто.Типы() Цикл
			Субконто = Новый (ТипСубконто);
			Если ПустыеСсылки.Найти(Субконто) = Неопределено Тогда
				ПустыеСсылки.Добавить(Субконто);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ПустыеСсылки.Добавить(0);
	ПустыеСсылки.Добавить("");
	ПустыеСсылки.Добавить(Дата('00010101'));
	
	Запрос = Новый Запрос;
	ЗапросКТоварам = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОбъектов",    МассивОбъектов);

	ЗапросКТоварам.УстановитьПараметр("ПустыеСсылки",   ПустыеСсылки);
	ЗапросКТоварам.УстановитьПараметр("МассивОбъектов", МассивОбъектов);	
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СписаниеТоваров.Ссылка КАК Ссылка,
	|	СписаниеТоваров.Номер,
	|	СписаниеТоваров.Дата,
	|	СписаниеТоваров.Организация,
	|	СписаниеТоваров.СтруктурноеПодразделение,
	|	СписаниеТоваров.Склад,
	|	СписаниеТоваров.СуммаДокумента,
	|	СписаниеТоваров.УчитыватьКПН,
	|	СписаниеТоваров.УчитыватьНДС,
	|	СписаниеТоваров.КорректироватьНДС
	|ПОМЕСТИТЬ ВТ_ДокументыСписаниеТоваров
	|ИЗ
	|	Документ.СписаниеТоваров КАК СписаниеТоваров
	|ГДЕ
	|	СписаниеТоваров.Ссылка В(&МассивОбъектов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТ_ДокументыСписаниеТоваров.Ссылка,
	|	ОтветственныеЛицаПоДокументам.ФизическоеЛицо КАК ОтветственноеЛицо,
	|	ВЫБОР
	|		КОГДА ФИОФизЛиц.ФизЛицо ЕСТЬ NULL 
	|			ТОГДА ОтветственныеЛицаПоДокументам.ФизическоеЛицо.Наименование
	|		ИНАЧЕ ФИОФизЛиц.Фамилия + ВЫБОР
	|				КОГДА ПОДСТРОКА(ФИОФизЛиц.Имя, 1, 1) <> """"
	|					ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛиц.Имя, 1, 1) + "".""
	|				ИНАЧЕ """"
	|			КОНЕЦ + ВЫБОР
	|				КОГДА ПОДСТРОКА(ФИОФизЛиц.Отчество, 1, 1) <> """"
	|					ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛиц.Отчество, 1, 1) + "".""
	|				ИНАЧЕ """"
	|			КОНЕЦ
	|	КОНЕЦ КАК ПредставлениеОтветственный
	|ПОМЕСТИТЬ ВТ_ОтветственныеЛица
	|ИЗ
	|	ВТ_ДокументыСписаниеТоваров КАК ВТ_ДокументыСписаниеТоваров
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ПериодыОтвественныеЛица.Ссылка КАК Ссылка,
	|			ОтветственныеЛица.ФизическоеЛицо КАК ФизическоеЛицо,
	|			МАКСИМУМ(ФИОФизЛиц.Период) КАК Период
	|		ИЗ
	|			(ВЫБРАТЬ
	|				МАКСИМУМ(ОтветственныеЛица.Период) КАК Период,
	|				ОтветственныеЛица.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|				ВТ_ДокументыСписаниеТоваров.Ссылка КАК Ссылка
	|			ИЗ
	|				ВТ_ДокументыСписаниеТоваров КАК ВТ_ДокументыСписаниеТоваров
	|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛица КАК ОтветственныеЛица
	|					ПО ВТ_ДокументыСписаниеТоваров.Склад = ОтветственныеЛица.СтруктурнаяЕдиница
	|						И ВТ_ДокументыСписаниеТоваров.Дата >= ОтветственныеЛица.Период
	|			
	|			СГРУППИРОВАТЬ ПО
	|				ОтветственныеЛица.СтруктурнаяЕдиница,
	|				ВТ_ДокументыСписаниеТоваров.Ссылка) КАК ПериодыОтвественныеЛица
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛица КАК ОтветственныеЛица
	|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц КАК ФИОФизЛиц
	|					ПО ОтветственныеЛица.ФизическоеЛицо = ФИОФизЛиц.ФизЛицо
	|				ПО ПериодыОтвественныеЛица.Период = ОтветственныеЛица.Период
	|					И ПериодыОтвественныеЛица.СтруктурнаяЕдиница = ОтветственныеЛица.СтруктурнаяЕдиница
	|					И (ПериодыОтвественныеЛица.Ссылка.Дата >= ФИОФизЛиц.Период)
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ПериодыОтвественныеЛица.Ссылка,
	|			ОтветственныеЛица.ФизическоеЛицо) КАК ОтветственныеЛицаПоДокументам
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц КАК ФИОФизЛиц
	|			ПО ОтветственныеЛицаПоДокументам.ФизическоеЛицо = ФИОФизЛиц.ФизЛицо
	|				И ОтветственныеЛицаПоДокументам.Период = ФИОФизЛиц.Период
	|		ПО ВТ_ДокументыСписаниеТоваров.Ссылка = ОтветственныеЛицаПоДокументам.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТ_ДокументыСписаниеТоваров.Ссылка,
	|	ВТ_ДокументыСписаниеТоваров.Номер КАК НомерДокумента,
	|	ВТ_ДокументыСписаниеТоваров.Дата КАК ДатаДокумента,
	|	ВТ_ДокументыСписаниеТоваров.Организация,
	|	ВТ_ДокументыСписаниеТоваров.СтруктурноеПодразделение,
	|	ВТ_ДокументыСписаниеТоваров.Склад.Представление КАК Склад,
	|	ВТ_ДокументыСписаниеТоваров.СуммаДокумента,
	|	ВТ_ДокументыСписаниеТоваров.УчитыватьКПН,
	|	ВТ_ДокументыСписаниеТоваров.УчитыватьНДС,
	|	ВТ_ДокументыСписаниеТоваров.КорректироватьНДС,
	|	ВТ_ДокументыСписаниеТоваров.Ссылка.ИнвентаризационнаяКомиссия.(
	|		ФизЛицо,
	|		Председатель
	|	) КАК ИнвентаризационнаяКомиссия,
	|	ОтветственныеЛица.ОтветственноеЛицо КАК Ответственный,
	|	ОтветственныеЛица.ПредставлениеОтветственный
	|ИЗ
	|	ВТ_ДокументыСписаниеТоваров КАК ВТ_ДокументыСписаниеТоваров
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОтветственныеЛица КАК ОтветственныеЛица
	|		ПО ВТ_ДокументыСписаниеТоваров.Ссылка = ОтветственныеЛица.Ссылка
	|ГДЕ
	|	ВТ_ДокументыСписаниеТоваров.Ссылка В(&МассивОбъектов)";
	
	ЗапросКТоварам.Текст = "ВЫБРАТЬ
						   |    СписаниеТоваровТовары.Ссылка,
	                       |	СписаниеТоваровТовары.Номенклатура КАК Номенклатура,
	                       |	СписаниеТоваровТовары.СчетУчетаБУ КАК СчетУчетаБУ,
	                       |	СУММА(СписаниеТоваровТовары.Количество) КАК Количество,
	                       |	СписаниеТоваровТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	                       |	МИНИМУМ(СписаниеТоваровТовары.НомерСтроки) КАК НомерСтроки,
	                       |	СписаниеТоваровТовары.Ссылка КАК Ссылка,
	                       |	ВЫБОР
	                       |		КОГДА СписаниеТоваровТовары.СубконтоЗатратБУ1 = НЕОПРЕДЕЛЕНО
	                       |				ИЛИ СписаниеТоваровТовары.СубконтоЗатратБУ1 ЕСТЬ NULL 
	                       |				ИЛИ СписаниеТоваровТовары.СубконтоЗатратБУ1 В (&ПустыеСсылки)
	                       |			ТОГДА NULL
	                       |		ИНАЧЕ СписаниеТоваровТовары.СубконтоЗатратБУ1
	                       |	КОНЕЦ КАК СубконтоЗатратБУ1,
	                       |	ВЫБОР
	                       |		КОГДА СписаниеТоваровТовары.СубконтоЗатратБУ2 = НЕОПРЕДЕЛЕНО
	                       |				ИЛИ СписаниеТоваровТовары.СубконтоЗатратБУ2 ЕСТЬ NULL 
	                       |				ИЛИ СписаниеТоваровТовары.СубконтоЗатратБУ2 В (&ПустыеСсылки)
	                       |			ТОГДА NULL
	                       |		ИНАЧЕ СписаниеТоваровТовары.СубконтоЗатратБУ2
	                       |	КОНЕЦ КАК СубконтоЗатратБУ2,
	                       |	ВЫБОР
	                       |		КОГДА СписаниеТоваровТовары.СубконтоЗатратБУ3 = НЕОПРЕДЕЛЕНО
	                       |				ИЛИ СписаниеТоваровТовары.СубконтоЗатратБУ3 ЕСТЬ NULL 
	                       |				ИЛИ СписаниеТоваровТовары.СубконтоЗатратБУ3 В (&ПустыеСсылки)
	                       |			ТОГДА NULL
	                       |		ИНАЧЕ СписаниеТоваровТовары.СубконтоЗатратБУ3
	                       |	КОНЕЦ КАК СубконтоЗатратБУ3,
	                       |	СписаниеТоваровТовары.СчетЗатратБУ КАК СчетЗатратБУ,
	                       |	СписаниеТоваровТовары.Коэффициент КАК Коэффициент
	                       |ПОМЕСТИТЬ ВТ_СписаниеТоваров
	                       |ИЗ
	                       |	Документ.СписаниеТоваров.Товары КАК СписаниеТоваровТовары
	                       |ГДЕ
	                       |	СписаниеТоваровТовары.Ссылка В (&МассивОбъектов)
	                       |
	                       |СГРУППИРОВАТЬ ПО
						   |    СписаниеТоваровТовары.Ссылка,
	                       |	СписаниеТоваровТовары.Номенклатура,
	                       |	СписаниеТоваровТовары.СчетУчетаБУ,
	                       |	СписаниеТоваровТовары.ЕдиницаИзмерения,
	                       |	СписаниеТоваровТовары.Ссылка,
	                       |	СписаниеТоваровТовары.СчетЗатратБУ,
	                       |	СписаниеТоваровТовары.Коэффициент,
	                       |	ВЫБОР
	                       |		КОГДА СписаниеТоваровТовары.СубконтоЗатратБУ1 = НЕОПРЕДЕЛЕНО
	                       |				ИЛИ СписаниеТоваровТовары.СубконтоЗатратБУ1 ЕСТЬ NULL 
	                       |				ИЛИ СписаниеТоваровТовары.СубконтоЗатратБУ1 В (&ПустыеСсылки)
	                       |			ТОГДА NULL
	                       |		ИНАЧЕ СписаниеТоваровТовары.СубконтоЗатратБУ1
	                       |	КОНЕЦ,
	                       |	ВЫБОР
	                       |		КОГДА СписаниеТоваровТовары.СубконтоЗатратБУ2 = НЕОПРЕДЕЛЕНО
	                       |				ИЛИ СписаниеТоваровТовары.СубконтоЗатратБУ2 ЕСТЬ NULL 
	                       |				ИЛИ СписаниеТоваровТовары.СубконтоЗатратБУ2 В (&ПустыеСсылки)
	                       |			ТОГДА NULL
	                       |		ИНАЧЕ СписаниеТоваровТовары.СубконтоЗатратБУ2
	                       |	КОНЕЦ,
	                       |	ВЫБОР
	                       |		КОГДА СписаниеТоваровТовары.СубконтоЗатратБУ3 = НЕОПРЕДЕЛЕНО
	                       |				ИЛИ СписаниеТоваровТовары.СубконтоЗатратБУ3 ЕСТЬ NULL 
	                       |				ИЛИ СписаниеТоваровТовары.СубконтоЗатратБУ3 В (&ПустыеСсылки)
	                       |			ТОГДА NULL
	                       |		ИНАЧЕ СписаниеТоваровТовары.СубконтоЗатратБУ3
	                       |	КОНЕЦ
	                       |;
	                       |
	                       |////////////////////////////////////////////////////////////////////////////////
	                       |ВЫБРАТЬ РАЗРЕШЕННЫЕ
						   |    СписаниеТоваров.Ссылка,
	                       |	СписаниеТоваров.Номенклатура,
	                       |	СписаниеТоваров.Количество,
	                       |	СписаниеТоваров.НомерСтроки КАК НомерСтроки,
	                       |	СписаниеТоваров.СчетУчетаБУ КАК Счет,
	                       |	ЕСТЬNULL(ДвиженияТиповой.Сумма / ДвиженияТиповой.КоличествоКт * СписаниеТоваров.Коэффициент * СписаниеТоваров.Количество, 0) КАК Сумма,
	                       |	ЕСТЬNULL(ДвиженияТиповой.Сумма / ДвиженияТиповой.КоличествоКт * СписаниеТоваров.Коэффициент, 0) КАК Себестоимость,
	                       |	СписаниеТоваров.СубконтоЗатратБУ1.Наименование КАК СубконтоЗатратБУ1,
	                       |	ДвиженияТиповой.СубконтоДт1.Наименование КАК СубконтоДт1,
	                       |	СписаниеТоваров.СубконтоЗатратБУ2.Наименование КАК СубконтоЗатратБУ2,
	                       |	ДвиженияТиповой.СубконтоДт2.Наименование КАК СубконтоДт2,
	                       |	СписаниеТоваров.СубконтоЗатратБУ3.Наименование КАК СубконтоЗатратБУ3,
	                       |	ДвиженияТиповой.СубконтоДт3.Наименование КАК СубконтоДт3,
	                       |	СписаниеТоваров.СчетЗатратБУ КАК СчетСписания,
	                       |	СписаниеТоваров.ЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения,
	                       |	ВЫРАЗИТЬ(СписаниеТоваров.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК Наименование,
	                       |	СписаниеТоваров.Номенклатура.Код КАК НоменклатурныйНомер
	                       |ИЗ
	                       |	ВТ_СписаниеТоваров КАК СписаниеТоваров
	                       |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	                       |			ТиповойДвиженияССубконто.Регистратор,
	                       |			ТиповойДвиженияССубконто.СчетКт КАК СчетКт,
	                       |			ТиповойДвиженияССубконто.СубконтоКт1 КАК СубконтоКт1,
	                       |			СУММА(ТиповойДвиженияССубконто.Сумма) КАК Сумма,
	                       |			СУММА(ТиповойДвиженияССубконто.КоличествоКт) КАК КоличествоКт,
	                       |			ТиповойДвиженияССубконто.СчетДт КАК СчетДт,
	                       |			ВЫБОР
	                       |				КОГДА ТиповойДвиженияССубконто.СубконтоДт1 = НЕОПРЕДЕЛЕНО
	                       |						ИЛИ ТиповойДвиженияССубконто.СубконтоДт1 ЕСТЬ NULL 
	                       |						ИЛИ ТиповойДвиженияССубконто.СубконтоДт1 В (&ПустыеСсылки)
	                       |					ТОГДА NULL
	                       |				ИНАЧЕ ТиповойДвиженияССубконто.СубконтоДт1
	                       |			КОНЕЦ КАК СубконтоДт1,
	                       |			ВЫБОР
	                       |				КОГДА ТиповойДвиженияССубконто.СубконтоДт2 = НЕОПРЕДЕЛЕНО
	                       |						ИЛИ ТиповойДвиженияССубконто.СубконтоДт2 ЕСТЬ NULL 
	                       |						ИЛИ ТиповойДвиженияССубконто.СубконтоДт2 В (&ПустыеСсылки)
	                       |					ТОГДА NULL
	                       |				ИНАЧЕ ТиповойДвиженияССубконто.СубконтоДт2
	                       |			КОНЕЦ КАК СубконтоДт2,
	                       |			ВЫБОР
	                       |				КОГДА ТиповойДвиженияССубконто.СубконтоДт3 = НЕОПРЕДЕЛЕНО
	                       |						ИЛИ ТиповойДвиженияССубконто.СубконтоДт3 ЕСТЬ NULL 
	                       |						ИЛИ ТиповойДвиженияССубконто.СубконтоДт3 В (&ПустыеСсылки)
	                       |					ТОГДА NULL
	                       |				ИНАЧЕ ТиповойДвиженияССубконто.СубконтоДт3
	                       |			КОНЕЦ КАК СубконтоДт3
	                       |		ИЗ
	                       |			РегистрБухгалтерии.Типовой.ДвиженияССубконто(, , Регистратор В (&МассивОбъектов), , ) КАК ТиповойДвиженияССубконто
	                       |		
	                       |		СГРУППИРОВАТЬ ПО
	                       |			ТиповойДвиженияССубконто.Регистратор,
	                       |			ТиповойДвиженияССубконто.СчетКт,
	                       |			ТиповойДвиженияССубконто.СубконтоКт1,
	                       |			ТиповойДвиженияССубконто.СчетДт,
	                       |			ВЫБОР
	                       |				КОГДА ТиповойДвиженияССубконто.СубконтоДт1 = НЕОПРЕДЕЛЕНО
	                       |						ИЛИ ТиповойДвиженияССубконто.СубконтоДт1 ЕСТЬ NULL 
	                       |						ИЛИ ТиповойДвиженияССубконто.СубконтоДт1 В (&ПустыеСсылки)
	                       |					ТОГДА NULL
	                       |				ИНАЧЕ ТиповойДвиженияССубконто.СубконтоДт1
	                       |			КОНЕЦ,
	                       |			ВЫБОР
	                       |				КОГДА ТиповойДвиженияССубконто.СубконтоДт2 = НЕОПРЕДЕЛЕНО
	                       |						ИЛИ ТиповойДвиженияССубконто.СубконтоДт2 ЕСТЬ NULL 
	                       |						ИЛИ ТиповойДвиженияССубконто.СубконтоДт2 В (&ПустыеСсылки)
	                       |					ТОГДА NULL
	                       |				ИНАЧЕ ТиповойДвиженияССубконто.СубконтоДт2
	                       |			КОНЕЦ,
	                       |			ВЫБОР
	                       |				КОГДА ТиповойДвиженияССубконто.СубконтоДт3 = НЕОПРЕДЕЛЕНО
	                       |						ИЛИ ТиповойДвиженияССубконто.СубконтоДт3 ЕСТЬ NULL 
	                       |						ИЛИ ТиповойДвиженияССубконто.СубконтоДт3 В (&ПустыеСсылки)
	                       |					ТОГДА NULL
	                       |				ИНАЧЕ ТиповойДвиженияССубконто.СубконтоДт3
	                       |			КОНЕЦ) КАК ДвиженияТиповой
	                       |		ПО СписаниеТоваров.Номенклатура = ДвиженияТиповой.СубконтоКт1
	                       |			И СписаниеТоваров.Ссылка = ДвиженияТиповой.Регистратор
						   |			И СписаниеТоваров.СчетУчетаБУ = ДвиженияТиповой.СчетКт
	                       |			И СписаниеТоваров.СчетЗатратБУ = ДвиженияТиповой.СчетДт
	                       |			И (СписаниеТоваров.СубконтоЗатратБУ1 = ДвиженияТиповой.СубконтоДт1
	                       |				ИЛИ ДвиженияТиповой.СубконтоДт1 ЕСТЬ NULL 
	                       |					И СписаниеТоваров.СубконтоЗатратБУ1 ЕСТЬ NULL )
	                       |			И (СписаниеТоваров.СубконтоЗатратБУ2 = ДвиженияТиповой.СубконтоДт2
	                       |				ИЛИ ДвиженияТиповой.СубконтоДт2 ЕСТЬ NULL 
	                       |					И СписаниеТоваров.СубконтоЗатратБУ2 ЕСТЬ NULL )
	                       |			И (СписаниеТоваров.СубконтоЗатратБУ3 = ДвиженияТиповой.СубконтоДт3
	                       |				ИЛИ ДвиженияТиповой.СубконтоДт3 ЕСТЬ NULL 
	                       |					И СписаниеТоваров.СубконтоЗатратБУ3 ЕСТЬ NULL )
	                       |
	                       |УПОРЯДОЧИТЬ ПО
	                       |	НомерСтроки
						   |
						   |ИТОГИ ПО
						   |	Ссылка";

	ЗапросККорректировке = Новый Запрос("ВЫБРАТЬ
						  | СписаниеТоваров.Ссылка,
						  |	СписаниеТоваров.Номенклатура КАК Номенклатура,
						  |	-КорректировкаНДС.СуммаКорректировкиОборота КАК Себестоимость,
						  |	-КорректировкаНДС.СуммаНДС КАК СуммаНДС,
						  |	СписаниеТоваров.Номенклатура.Код КАК НоменклатурныйНомер,
						  | ВЫРАЗИТЬ(СписаниеТоваров.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК Наименование
						  |ИЗ
						  |	(ВЫБРАТЬ РАЗЛИЧНЫЕ
						  |		СписаниеТоваровТовары.Номенклатура КАК Номенклатура,
						  |		СписаниеТоваровТовары.Ссылка
						  |	ИЗ
						  |		Документ.СписаниеТоваров.Товары КАК СписаниеТоваровТовары
						  |	ГДЕ
						  |		СписаниеТоваровТовары.Ссылка В (&МассивОбъектов)
						  |		И СписаниеТоваровТовары.Ссылка.УчитыватьНДС И СписаниеТоваровТовары.Ссылка.КорректироватьНДС) КАК СписаниеТоваров
						  |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
						  |			КорректировкаНДСКВозмещению.Регистратор,
						  |			КорректировкаНДСКВозмещению.ТМЗ КАК ТМЗ,
						  |			СУММА(КорректировкаНДСКВозмещению.СуммаКорректировкиОборота) КАК СуммаКорректировкиОборота,
						  |			СУММА(КорректировкаНДСКВозмещению.СуммаНДС) КАК СуммаНДС
						  |		ИЗ
						  |			РегистрНакопления.КорректировкаНДСКВозмещению КАК КорректировкаНДСКВозмещению
						  |		ГДЕ
						  |			КорректировкаНДСКВозмещению.Регистратор В (&МассивОбъектов)
						  |		
						  |		СГРУППИРОВАТЬ ПО
						  |			КорректировкаНДСКВозмещению.Регистратор,
						  |			КорректировкаНДСКВозмещению.ТМЗ) КАК КорректировкаНДС
						  |		ПО СписаниеТоваров.Ссылка = КорректировкаНДС.Регистратор
						  |			И СписаниеТоваров.Номенклатура = КорректировкаНДС.ТМЗ
						  |ИТОГИ
						  |	СУММА(Себестоимость),
						  |	СУММА(СуммаНДС)
						  |ПО
						  |	Ссылка");
						  
	ЗапросККорректировке.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	ВыборкаПоДокументам = Запрос.Выполнить().Выбрать();
	
	ВыборкаПоРегистратору = ЗапросКТоварам.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	ВыборкаКорректировка = ЗапросККорректировке.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам); 
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.КлючПараметровПечати = "СписаниеТоваров_АктСписания";

	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.СписаниеТоваров.ПФ_MXL_АктСписания", КодЯзыка);
	
	ОбластьШапка =  Макет.ПолучитьОбласть("Шапка");	
	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок"); 	
	ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
	ОбластьИтогов = Макет.ПолучитьОбласть("Итоги");
	ОбластьЗаголовокНДС = Макет.ПолучитьОбласть("ЗаголовокНДС"); 	
	ОбластьСтрокаНДС = Макет.ПолучитьОбласть("СтрокаНДС"); 						
	ОбластьИтогиНДС = Макет.ПолучитьОбласть("ИтогиНДС"); 						
	ОбластьКомиссия = Макет.ПолучитьОбласть("Комиссия");
	
	Пока ВыборкаПоДокументам.Следующий() Цикл
		
		Если ТабДокумент.ВысотаТаблицы > 0 Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
		
		ВыборкаПоРегистратору.Сбросить();
		ВыборкаКорректировка.Сбросить();
		
		Если ВыборкаПоРегистратору.НайтиСледующий(ВыборкаПоДокументам.Ссылка) Тогда
			ВыборкаСтрокТовары = ВыборкаПоРегистратору.Выбрать();
		Иначе
			ВыборкаСтрокТовары = Неопределено;
		КонецЕсли;
		
		ТаблицаИнвентаризационнаяКомиссия = ВыборкаПоДокументам.ИнвентаризационнаяКомиссия.Выгрузить();

		СтруктурнаяЕдиницаОрганизация = ОбщегоНазначенияБК.ПолучитьСтруктурнуюЕдиницу(ВыборкаПоДокументам.Организация, ВыборкаПоДокументам.СтруктурноеПодразделение);
		
		ОбластьШапка.Параметры.Заполнить(ВыборкаПоДокументам);
		ПредставлениеОрганизации = ОбщегоНазначенияБКВызовСервера.ОписаниеОрганизации(ОбщегоНазначенияБКВызовСервера.СведенияОЮрФизЛице(СтруктурнаяЕдиницаОрганизация, ВыборкаПоДокументам.ДатаДокумента), "ПолноеНаименование,");
		ОбластьШапка.Параметры.ОрганизацияНаименование = ПредставлениеОрганизации;
		ОбластьШапка.Параметры.НомерДокумента = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ВыборкаПоДокументам.НомерДокумента, ВыборкаПоДокументам.Ссылка);
		ТабДокумент.Вывести(ОбластьШапка);
		
		ТабДокумент.Вывести(ОбластьЗаголовок);

		СуммаИтог = 0;
		СуммаИтогНДС = 0;
		
		Если НЕ ВыборкаСтрокТовары = Неопределено Тогда
		
			Пока ВыборкаСтрокТовары.Следующий() Цикл
				ОбластьСтрока.Параметры.Заполнить(ВыборкаСтрокТовары);
				
				ОбластьСтрока.Параметры.Наименование = СокрЛП(ВыборкаСтрокТовары.Наименование);
				
				ОбластьСтрока.Параметры.Себестоимость = Формат(ВыборкаСтрокТовары.Себестоимость, "ЧДЦ=2");
				ОбластьСтрока.Параметры.Количество = Формат(ВыборкаСтрокТовары.Количество, "ЧДЦ=3");
				ОбластьСтрока.Параметры.Сумма = Формат(ВыборкаСтрокТовары.Сумма, "ЧДЦ=2");
				
				ПараметрСубконто = ?(ВыборкаСтрокТовары.СубконтоЗатратБУ1 = Null, "",ВыборкаСтрокТовары.СубконтоЗатратБУ1) + Символы.ПС + 
								   ?(ВыборкаСтрокТовары.СубконтоЗатратБУ2 = Null, "",ВыборкаСтрокТовары.СубконтоЗатратБУ2) + Символы.ПС + 
								   ?(ВыборкаСтрокТовары.СубконтоЗатратБУ3 = Null, "",ВыборкаСтрокТовары.СубконтоЗатратБУ3);
				
				ОбластьСТрока.Параметры.Субконто = СокрЛП(ПараметрСубконто);
				ТабДокумент.Вывести(ОбластьСтрока);
				
				СуммаИтог = СуммаИтог + ВыборкаСтрокТовары.Сумма; 	
				
			КонецЦикла;
			
		КонецЕсли;
		
		ОбластьИтогов.Параметры.СуммаИтог = Формат(СуммаИтог, "ЧДЦ=2");	
		
		ТабДокумент.Вывести(ОбластьИтогов);

		Если ВыборкаКорректировка.НайтиСледующий(ВыборкаПоДокументам.Ссылка) Тогда
			
			ТабДокумент.Вывести(ОбластьЗаголовокНДС);
			
			ВыборкаДетали = ВыборкаКорректировка.Выбрать();			
			Пока ВыборкаДетали.Следующий() Цикл
				ОбластьСтрокаНДС.Параметры.Заполнить(ВыборкаДетали);
				ОбластьСтрокаНДС.Параметры.Наименование = СокрЛП(ВыборкаДетали.Наименование);
				ТабДокумент.Вывести(ОбластьСтрокаНДС);	
			КонецЦикла;                                        			
			ОбластьИтогиНДС.Параметры.Заполнить(ВыборкаКорректировка);
			ТабДокумент.Вывести(ОбластьИтогиНДС);
			
		КонецЕсли;                                        			
		
		// Варианты заголовков разделов с подписями печатной формы	
		ЗаголовокРазделаКомиссии = Новый Структура();
		ЗаголовокРазделаКомиссии.Вставить("ПредседательКомиссии", НСтр("ru='Председатель комиссии'", КодЯзыка));
		ЗаголовокРазделаКомиссии.Вставить("ЧленыКомиссии",        НСтр("ru='Члены комиссии:'", КодЯзыка));
		
		// Выведем подпись председателя инвентаризационной комиссии
		ПредседательКомиссии = ТаблицаИнвентаризационнаяКомиссия.Найти(Истина, "Председатель");
		
		Если НЕ (ПредседательКомиссии = Неопределено) Тогда
			
			ДанныеПредседателя = ПроцедурыУправленияПерсоналомВызовСервера.ДанныеФизЛица(ВыборкаПоДокументам.Организация, ПредседательКомиссии.ФизЛицо, ВыборкаПоДокументам.ДатаДокумента);
				
			ОбластьКомиссия.Параметры.ЗаголовокРазделаКомиссии = ЗаголовокРазделаКомиссии.ПредседательКомиссии;
			ОбластьКомиссия.Параметры.Должность                = ДанныеПредседателя.Должность;
			ОбластьКомиссия.Параметры.РасшифровкаПодписи       = ДанныеПредседателя.Представление;
			
		Иначе
			
			ОбластьКомиссия.Параметры.ЗаголовокРазделаКомиссии = ЗаголовокРазделаКомиссии.ПредседательКомиссии;
			ОбластьКомиссия.Параметры.Должность                = "";
			ОбластьКомиссия.Параметры.РасшифровкаПодписи       = "";
			
		КонецЕсли;
			
		ТабДокумент.Вывести(ОбластьКомиссия);

		// Выведем подписи членов комиссии
		ВыводитьЗаголовок = Истина;
		
		// Сформируем список членов комиссии
		СписокЧленовКомиссии = Новый Массив();
		
		Для Каждого Строка Из ТаблицаИнвентаризационнаяКомиссия Цикл
			Если НЕ Строка.Председатель Тогда
				СписокЧленовКомиссии.Добавить(Строка.ФизЛицо);
			КонецЕсли;
		КонецЦикла;
		
		ДанныеЧленовКомиссии = ПроцедурыУправленияПерсоналомВызовСервера.ДанныеФизЛиц(ВыборкаПоДокументам.Организация, СписокЧленовКомиссии, ВыборкаПоДокументам.ДатаДокумента);
		
		// Сначала выведем членов комиссии из выборки
		Для Каждого ЧленКомиссии Из ДанныеЧленовКомиссии Цикл
			
			Если НЕ ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабДокумент, ОбластьКомиссия) Тогда
				
				// Выведем разрыв страницы
				ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ВыводитьЗаголовок = Истина; // на новой странице выведем заголовок набора подписей
			
			КонецЕсли;
			
			ОбластьКомиссия.Параметры.ЗаголовокРазделаКомиссии = ?(ВыводитьЗаголовок, 
														   		 ЗаголовокРазделаКомиссии.ЧленыКомиссии,
														   		 "");
			ОбластьКомиссия.Параметры.Должность          = ЧленКомиссии.Должность;
			ОбластьКомиссия.Параметры.РасшифровкаПодписи = ЧленКомиссии.Представление;
			
			ТабДокумент.Вывести(ОбластьКомиссия);
			
			ВыводитьЗаголовок = Ложь; // в следующей итерации вывод заголовка не нужен
			
		КонецЦикла;
		
		// Затем выведем пустые места для подписей (чтобы в итоге получилось не менее 3-х
		Если ДанныеЧленовКомиссии.Количество() < 3 Тогда
			
			Если НЕ ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабДокумент, ОбластьКомиссия) Тогда
				
				// Выведем разрыв страницы
				ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ВыводитьЗаголовок = Истина; // на новой странице выведем заголовок набора подписей
				
			КонецЕсли;
			
			Для Итератор = (ДанныеЧленовКомиссии.Количество() + 1) По 3 Цикл
				
				ОбластьКомиссия.Параметры.ЗаголовокРазделаКомиссии = ?(ВыводитьЗаголовок, 
															   ЗаголовокРазделаКомиссии.ЧленыКомиссии,
															   "");
				ОбластьКомиссия.Параметры.Должность          = "";
				ОбластьКомиссия.Параметры.РасшифровкаПодписи = "";
				
				ТабДокумент.Вывести(ОбластьКомиссия);
				
				ВыводитьЗаголовок = Ложь; // в следующей итерации вывод заголовка не нужен
				
			КонецЦикла; 
			
		КонецЕсли;  	
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, НомерСтрокиНачало, ОбъектыПечати, ВыборкаПоДокументам.Ссылка);
		
	КонецЦикла;
	
	Возврат ТабДокумент;
	
КонецФункции

// Функция формирует табличный документ с печатной формой "З-6" (акт на списание запасов).
//
Функция ПечатьЗ6(МассивОбъектов, ОбъектыПечати) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);

	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СписаниеТоваров.Ссылка КАК Ссылка,
	|	СписаниеТоваров.Номер,
	|	СписаниеТоваров.Дата,
	|	СписаниеТоваров.Организация,
	|	СписаниеТоваров.СтруктурноеПодразделение,
	|	СписаниеТоваров.Склад,
	|	СписаниеТоваров.УчитыватьКПН,
	|	СписаниеТоваров.УчитыватьНДС,
	|	СписаниеТоваров.КорректироватьНДС
	|ПОМЕСТИТЬ ВТ_ДокументыСписаниеТоваров
	|ИЗ
	|	Документ.СписаниеТоваров КАК СписаниеТоваров
	|ГДЕ
	|	СписаниеТоваров.Ссылка В(&МассивОбъектов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТ_ДокументыСписаниеТоваров.Ссылка,
	|	ОтветственныеЛицаПоДокументам.ФизическоеЛицо КАК ОтветственноеЛицо
	|ПОМЕСТИТЬ ВТ_ОтветственныеЛица
	|ИЗ
	|	ВТ_ДокументыСписаниеТоваров КАК ВТ_ДокументыСписаниеТоваров
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ПериодыОтвественныеЛица.Ссылка КАК Ссылка,
	|			ОтветственныеЛица.ФизическоеЛицо КАК ФизическоеЛицо
	|		ИЗ
	|			(ВЫБРАТЬ
	|				МАКСИМУМ(ОтветственныеЛица.Период) КАК Период,
	|				ОтветственныеЛица.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|				ВТ_ДокументыСписаниеТоваров.Ссылка КАК Ссылка
	|			ИЗ
	|				ВТ_ДокументыСписаниеТоваров КАК ВТ_ДокументыСписаниеТоваров
	|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛица КАК ОтветственныеЛица
	|					ПО ВТ_ДокументыСписаниеТоваров.Склад = ОтветственныеЛица.СтруктурнаяЕдиница
	|						И ВТ_ДокументыСписаниеТоваров.Дата >= ОтветственныеЛица.Период
	|			
	|			СГРУППИРОВАТЬ ПО
	|				ОтветственныеЛица.СтруктурнаяЕдиница,
	|				ВТ_ДокументыСписаниеТоваров.Ссылка) КАК ПериодыОтвественныеЛица
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛица КАК ОтветственныеЛица
	|				ПО ПериодыОтвественныеЛица.Период = ОтветственныеЛица.Период
	|					И ПериодыОтвественныеЛица.СтруктурнаяЕдиница = ОтветственныеЛица.СтруктурнаяЕдиница
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ПериодыОтвественныеЛица.Ссылка,
	|			ОтветственныеЛица.ФизическоеЛицо) КАК ОтветственныеЛицаПоДокументам
	|		ПО ВТ_ДокументыСписаниеТоваров.Ссылка = ОтветственныеЛицаПоДокументам.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТ_ДокументыСписаниеТоваров.Ссылка,
	|	ВТ_ДокументыСписаниеТоваров.Номер,
	|	ВТ_ДокументыСписаниеТоваров.Дата КАК ДатаДокумента,
	|	ВТ_ДокументыСписаниеТоваров.Организация,
	|	ВТ_ДокументыСписаниеТоваров.СтруктурноеПодразделение,
	|	ВТ_ДокументыСписаниеТоваров.Склад.Представление КАК СкладПредставление,
	|	ВТ_ДокументыСписаниеТоваров.УчитыватьКПН,
	|	ВТ_ДокументыСписаниеТоваров.УчитыватьНДС,
	|	ВТ_ДокументыСписаниеТоваров.КорректироватьНДС,
	|	ВТ_ДокументыСписаниеТоваров.Ссылка.ИнвентаризационнаяКомиссия.(
	|		ФизЛицо,
	|		Председатель
	|	) КАК ИнвентаризационнаяКомиссия,
	|	ОтветственныеЛица.ОтветственноеЛицо
	|ИЗ
	|	ВТ_ДокументыСписаниеТоваров КАК ВТ_ДокументыСписаниеТоваров
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОтветственныеЛица КАК ОтветственныеЛица
	|		ПО ВТ_ДокументыСписаниеТоваров.Ссылка = ОтветственныеЛица.Ссылка
	|ГДЕ
	|	ВТ_ДокументыСписаниеТоваров.Ссылка В(&МассивОбъектов)";
					   
	ВыборкаПоДокументам = Запрос.Выполнить().Выбрать();
		
	ЗапросТовары = Новый Запрос;
	ЗапросТовары.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	ЗапросТовары.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                     |	ОбщаяВыборка.Ссылка КАК Ссылка,
	                     |	ОбщаяВыборка.Номенклатура КАК Номенклатура,
	                     |	ОбщаяВыборка.ТоварНаименование КАК ТоварНаименование,
	                     |	ОбщаяВыборка.СуммаСНДС КАК СуммаСНДС,
	                     |	ОбщаяВыборка.Цена КАК Цена,
	                     |	ОбщаяВыборка.НоменклатурныйНомер КАК НоменклатурныйНомер,
	                     |	ОбщаяВыборка.Наименование КАК Наименование,
	                     |	ОбщаяВыборка.ЕдиницаИзмеренияНаименование КАК ЕдиницаИзмеренияНаименование,
	                     |	ОбщаяВыборка.Количество КАК Количество,
	                     |	ОбщаяВыборка.ПричинаСписания КАК ПричинаСписания
	                     |ИЗ
	                     |	(ВЫБРАТЬ
	                     |		СписаниеТоваров.Ссылка КАК Ссылка,
	                     |		СписаниеТоваров.Номенклатура КАК Номенклатура,
	                     |		ВЫРАЗИТЬ(СписаниеТоваров.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК ТоварНаименование,
	                     |		ЕСТЬNULL(ДвиженияТиповой.Сумма, 0) - ЕСТЬNULL(КорректировкаНДС.СуммаНДС, 0) КАК СуммаСНДС,
	                     |		ВЫБОР
	                     |			КОГДА СписаниеТоваров.Количество <> 0
	                     |				ТОГДА (ЕСТЬNULL(ДвиженияТиповой.Сумма, 0) - ЕСТЬNULL(КорректировкаНДС.СуммаНДС, 0)) / СписаниеТоваров.Количество
	                     |			ИНАЧЕ 0
	                     |		КОНЕЦ КАК Цена,
	                     |		СписаниеТоваров.Номенклатура.Код КАК НоменклатурныйНомер,
	                     |		СписаниеТоваров.Номенклатура.Наименование КАК Наименование,
	                     |		СписаниеТоваров.ЕдиницаИзмеренияНаименование КАК ЕдиницаИзмеренияНаименование,
	                     |		СписаниеТоваров.Количество КАК Количество,
	                     |		СписаниеТоваров.ПричинаСписания КАК ПричинаСписания
	                     |	ИЗ
	                     |		(ВЫБРАТЬ
	                     |			СписаниеТоваровТовары.Ссылка КАК Ссылка,
	                     |			СписаниеТоваровТовары.Номенклатура КАК Номенклатура,
	                     |			СписаниеТоваровТовары.Номенклатура.Код КАК НоменклатурныйНомер,
	                     |			СписаниеТоваровТовары.ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмеренияНаименование,
	                     |			СУММА(СписаниеТоваровТовары.Количество) КАК Количество,
	                     |			СписаниеТоваровТовары.ПричинаСписания КАК ПричинаСписания
	                     |		ИЗ
	                     |			Документ.СписаниеТоваров.Товары КАК СписаниеТоваровТовары
	                     |		ГДЕ
	                     |			СписаниеТоваровТовары.Ссылка В(&МассивОбъектов)
	                     |			И СписаниеТоваровТовары.Ссылка.УчитыватьНДС
	                     |			И СписаниеТоваровТовары.Ссылка.КорректироватьНДС
	                     |		
	                     |		СГРУППИРОВАТЬ ПО
	                     |			СписаниеТоваровТовары.Ссылка,
	                     |			СписаниеТоваровТовары.Номенклатура,
	                     |			СписаниеТоваровТовары.Номенклатура.Код,
	                     |			СписаниеТоваровТовары.ЕдиницаИзмерения,
	                     |			СписаниеТоваровТовары.ЕдиницаИзмерения.Наименование,
	                     |			СписаниеТоваровТовары.ПричинаСписания) КАК СписаниеТоваров
	                     |			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	                     |				КорректировкаНДСКВозмещению.Регистратор КАК Регистратор,
	                     |				КорректировкаНДСКВозмещению.ТМЗ КАК ТМЗ,
	                     |				СУММА(КорректировкаНДСКВозмещению.СуммаНДС) КАК СуммаНДС
	                     |			ИЗ
	                     |				РегистрНакопления.КорректировкаНДСКВозмещению КАК КорректировкаНДСКВозмещению
	                     |			ГДЕ
	                     |				КорректировкаНДСКВозмещению.Регистратор В(&МассивОбъектов)
	                     |			
	                     |			СГРУППИРОВАТЬ ПО
	                     |				КорректировкаНДСКВозмещению.Регистратор,
	                     |				КорректировкаНДСКВозмещению.ТМЗ) КАК КорректировкаНДС
	                     |			ПО СписаниеТоваров.Номенклатура = КорректировкаНДС.ТМЗ
	                     |				И СписаниеТоваров.Ссылка = КорректировкаНДС.Регистратор
	                     |			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	                     |				ТиповойДвиженияССубконто.Регистратор КАК Регистратор,
	                     |				ТиповойДвиженияССубконто.СубконтоКт1 КАК СубконтоКт1,
	                     |				СУММА(ТиповойДвиженияССубконто.Сумма) КАК Сумма
	                     |			ИЗ
	                     |				РегистрБухгалтерии.Типовой.ДвиженияССубконто(, , Регистратор В (&МассивОбъектов), , ) КАК ТиповойДвиженияССубконто
	                     |			
	                     |			СГРУППИРОВАТЬ ПО
	                     |				ТиповойДвиженияССубконто.Регистратор,
	                     |				ТиповойДвиженияССубконто.СубконтоКт1) КАК ДвиженияТиповой
	                     |			ПО СписаниеТоваров.Номенклатура = ДвиженияТиповой.СубконтоКт1
	                     |				И СписаниеТоваров.Ссылка = ДвиженияТиповой.Регистратор
	                     |	
	                     |	ОБЪЕДИНИТЬ ВСЕ
	                     |	
	                     |	ВЫБРАТЬ
	                     |		СписаниеТоваровТовары.Ссылка,
	                     |		СписаниеТоваровТовары.Номенклатура,
	                     |		ПОДСТРОКА(СписаниеТоваровТовары.Номенклатура.НаименованиеПолное, 1, 1000),
	                     |		0,
	                     |		0,
	                     |		СписаниеТоваровТовары.Номенклатура.Код,
	                     |		СписаниеТоваровТовары.Номенклатура.Наименование,
	                     |		СписаниеТоваровТовары.ЕдиницаИзмерения.Наименование,
	                     |		СУММА(СписаниеТоваровТовары.Количество),
	                     |		СписаниеТоваровТовары.ПричинаСписания
	                     |	ИЗ
	                     |		Документ.СписаниеТоваров.Товары КАК СписаниеТоваровТовары
	                     |	ГДЕ
	                     |		СписаниеТоваровТовары.Ссылка В(&МассивОбъектов)
	                     |		И НЕ(СписаниеТоваровТовары.Ссылка.УчитыватьНДС
	                     |					И СписаниеТоваровТовары.Ссылка.КорректироватьНДС)
	                     |	
	                     |	СГРУППИРОВАТЬ ПО
	                     |		СписаниеТоваровТовары.Ссылка,
	                     |		СписаниеТоваровТовары.Номенклатура,
	                     |		СписаниеТоваровТовары.Номенклатура.Код,
	                     |		СписаниеТоваровТовары.ЕдиницаИзмерения,
	                     |		СписаниеТоваровТовары.Номенклатура.Наименование,
	                     |		СписаниеТоваровТовары.ЕдиницаИзмерения.Наименование,
	                     |		ПОДСТРОКА(СписаниеТоваровТовары.Номенклатура.НаименованиеПолное, 1, 1000),
	                     |		СписаниеТоваровТовары.ПричинаСписания) КАК ОбщаяВыборка
	                     |
	                     |УПОРЯДОЧИТЬ ПО
	                     |	ОбщаяВыборка.Наименование
	                     |ИТОГИ
	                     |	СУММА(СуммаСНДС),
	                     |	СУММА(Цена),
	                     |	СУММА(Количество)
	                     |ПО
	                     |	Ссылка";
						 
	ВыборкаПоРегистратору = ЗапросТовары.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
		
	Макет = УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.ПФ_MXL_З6");
	
	КодЯзыка = Метаданные.Языки.Русский.КодЯзыка;
	Макет.КодЯзыка =  КодЯзыка;
	
	ТабДокумент = Новый ТабличныйДокумент;
	
	// Зададим параметры макета
	ТабДокумент.ПолеСверху         = 0;
	ТабДокумент.ПолеСлева          = 10;
	ТабДокумент.ПолеСнизу          = 0;
	ТабДокумент.ПолеСправа         = 0;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	ТабДокумент.КлючПараметровПечати = "СписаниеТоваров_З6";

	//Получим области
	Шапка 			 = Макет.ПолучитьОбласть("Шапка");
	ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	СтрокаТаблицы 	 = Макет.ПолучитьОбласть("СтрокаТаблицы");
	Итого 			 = Макет.ПолучитьОбласть("Итого");
	ОборотнаяСторона = Макет.ПолучитьОбласть("ОборотнаяСторона");
	Комиссия		 = Макет.ПолучитьОбласть("Комиссия");
	
	Пока ВыборкаПоДокументам.Следующий() Цикл
		
		Если ТабДокумент.ВысотаТаблицы > 0 Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
		
		ВыборкаПоРегистратору.Сбросить();
		
		Если ВыборкаПоРегистратору.НайтиСледующий(ВыборкаПоДокументам.Ссылка) Тогда
			ВыборкаСтрокТовары = ВыборкаПоРегистратору.Выбрать();
		Иначе
			ВыборкаСтрокТовары = Неопределено;
		КонецЕсли;
		
		ТаблицаИнвентаризационнаяКомиссия = ВыборкаПоДокументам.ИнвентаризационнаяКомиссия.Выгрузить();

		СтруктурнаяЕдиницаОрганизация = ОбщегоНазначенияБК.ПолучитьСтруктурнуюЕдиницу(ВыборкаПоДокументам.Организация, ВыборкаПоДокументам.СтруктурноеПодразделение);
		
		// Выводим общие реквизиты шапки
		СведенияОбОрганизации = ОбщегоНазначенияБКВызовСервера.СведенияОЮрФизЛице(СтруктурнаяЕдиницаОрганизация, ВыборкаПоДокументам.ДатаДокумента);
		Руководители 		  = ОбщегоНазначенияБКВызовСервера.ОтветственныеЛицаОрганизаций(СтруктурнаяЕдиницаОрганизация, ВыборкаПоДокументам.ДатаДокумента);
		ДанныеМОЛ 			  = ПроцедурыУправленияПерсоналомВызовСервера.ДанныеФизЛица(ВыборкаПоДокументам.Организация, ВыборкаПоДокументам.ОтветственноеЛицо, ВыборкаПоДокументам.ДатаДокумента);
		
		Шапка.Параметры.ПредставлениеОрганизации = ОбщегоНазначенияБКВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,");
		Шапка.Параметры.ОрганизацияРНН_БИН       = ОбщегоНазначенияБКВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации, "БИН_ИИН,", Ложь, ВыборкаПоДокументам.ДатаДокумента, "ru");
		
		Шапка.Параметры.НомерДокумента	   = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ВыборкаПоДокументам.Номер, ВыборкаПоДокументам.Ссылка);
		ШАпка.Параметры.ДатаДок			   = Формат(ВыборкаПоДокументам.ДатаДокумента, "Л=" + КодЯзыка + "; ДЛФ=DD");
		Шапка.Параметры.РасшифровкаПодписи = Руководители.Руководитель;
		Шапка.Параметры.МОЛ				   = ДанныеМОЛ.Представление;
		Шапка.Параметры.Заполнить(ВыборкаПоДокументам);
		
		ТабДокумент.Вывести(Шапка);
		
		// вывод заголовка таблицы
		ВалютаПечати = ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
		ЗаголовокТаблицы.Параметры.Валюта = ВалютаПечати;
		ТабДокумент.Вывести(ЗаголовокТаблицы);
		
		// вывод строк таблицы
		КоличествоСтрок = ?(НЕ ВыборкаСтрокТовары = Неопределено , ВыборкаСтрокТовары.Количество(), 0);
		
		// Инициализация итогов в документе
		
		ИтогоКоличество = 0;
		ИтогоВсегоСНДС  = 0;

		Если НЕ (ВыборкаПоДокументам.УчитыватьНДС И ВыборкаПоДокументам.КорректироватьНДС) Тогда 
			ТаблицаСуммСписания = ПроцедурыБухгалтерскогоУчета.ПолучитьСуммуСписанияАктивов(ВыборкаПоДокументам.Ссылка);
		КонецЕсли;

		НомерПП = 1;
		
		Если НЕ ВыборкаСтрокТовары = Неопределено Тогда
			
			Пока ВыборкаСтрокТовары.Следующий() Цикл
				
				Если НЕ ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабДокумент, СтрокаТаблицы) Тогда
					ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
					ТабДокумент.Вывести(ЗаголовокТаблицы);
				КонецЕсли;	

				СтрокаТаблицы.Параметры.Заполнить(ВыборкаСтрокТовары);
				СтрокаТаблицы.Параметры.ТоварНаименование = СокрЛП(ВыборкаСтрокТовары.ТоварНаименование); 
				
				Если ВыборкаПоДокументам.УчитыватьНДС И ВыборкаПоДокументам.КорректироватьНДС Тогда
					
					СтрокаТаблицы.Параметры.Количество = Формат(ВыборкаСтрокТовары.Количество,"ЧДЦ=3");
					СтрокаТаблицы.Параметры.Цена	   = Формат(ВыборкаСтрокТовары.Цена,"ЧДЦ=2");
					СтрокаТаблицы.Параметры.СуммаСНДС  = Формат(ВыборкаСтрокТовары.СуммаСНДС,"ЧДЦ=2");
					СтрокаТаблицы.Параметры.НомерПП    = НомерПП;
					
				Иначе	
					Кратность = 1;
					СтрокаСуммСписания = ТаблицаСуммСписания.Найти(ВыборкаСтрокТовары.Номенклатура, "Номенклатура");
					Если СтрокаСуммСписания = Неопределено Тогда
						 ВсегоСНДС = 0;
						 Цена 	   = 0;
					 Иначе
						 Цена 	   = ?(СтрокаСуммСписания.Количество = 0, 0, СтрокаСуммСписания.Сумма / СтрокаСуммСписания.Количество);
						 ВсегоСНДС = Цена * ВыборкаСтрокТовары.Количество;
					 КонецЕсли;

					Количество = ВыборкаСтрокТовары.Количество;

					СтрокаТаблицы.Параметры.Количество = Формат(Количество,"ЧДЦ=3");
					СтрокаТаблицы.Параметры.СуммаСНДС  = Формат(ВсегоСНДС, "ЧДЦ=2");
					СтрокаТаблицы.Параметры.Цена       = Формат(Цена, "ЧДЦ=2");
					СтрокаТаблицы.Параметры.НомерПП    = НомерПП;
					
					ИтогоКоличество	= ИтогоКоличество + Количество;
					ИтогоВсегоСНДС  = ИтогоВсегоСНДС  + ВсегоСНДС;

				КонецЕсли;

				НомерПП = НомерПП + 1;
				
				ТабДокумент.Вывести(СтрокаТаблицы);

			КонецЦикла;
			
		КонецЕсли;
		
		// вывод итогов
		
		Если ВыборкаПоДокументам.УчитыватьНДС И ВыборкаПоДокументам.КорректироватьНДС Тогда
			Итого.Параметры.ИтогоКоличество = Формат(ВыборкаПоРегистратору.Количество, "ЧДЦ=3");
			Итого.Параметры.ИтогоСуммаСНДС  = Формат(ВыборкаПоРегистратору.СуммаСНДС, "ЧДЦ=2");
		Иначе	
			Итого.Параметры.ИтогоКоличество = Формат(ИтогоКоличество, "ЧДЦ=3");
			Итого.Параметры.ИтогоСуммаСНДС  = Формат(ИтогоВсегоСНДС, "ЧДЦ=2");
		КонецЕсли;	
			
		ТабДокумент.Вывести(Итого);
		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		
		//вывод оборотной стороны
		ОборотнаяСторона.Параметры.Валюта = ВалютаПечати;
		ТабДокумент.Вывести(ОборотнаяСторона);
		
		//вывод комиссии
		// Варианты заголовков разделов с подписями печатной формы	
		ЗаголовокРазделаКомиссии = Новый Структура();
		ЗаголовокРазделаКомиссии.Вставить("МОЛ",                  НСтр("ru='Материально-ответственное лицо'", КодЯзыка));
		ЗаголовокРазделаКомиссии.Вставить("ПредседательКомиссии", НСтр("ru='Председатель комиссии'", КодЯзыка));
		ЗаголовокРазделаКомиссии.Вставить("ЧленыКомиссии",        НСтр("ru='Члены комиссии:'", КодЯзыка));
		
		// Выведем подпись председателя инвентаризационной комиссии
		ПредседательКомиссии = ТаблицаИнвентаризационнаяКомиссия.Найти(Истина, "Председатель");
		
		Если НЕ (ПредседательКомиссии = Неопределено) Тогда
			
			ДанныеПредседателя = ПроцедурыУправленияПерсоналомВызовСервера.ДанныеФизЛица(ВыборкаПоДокументам.Организация, ПредседательКомиссии.ФизЛицо, ВыборкаПоДокументам.ДатаДокумента);
				
			Комиссия.Параметры.ЗаголовокРазделаКомиссии = ЗаголовокРазделаКомиссии.ПредседательКомиссии;
			Комиссия.Параметры.Должность                = ДанныеПредседателя.Должность;
			Комиссия.Параметры.РасшифровкаПодписи       = ДанныеПредседателя.Представление;
			
		Иначе
			
			Комиссия.Параметры.ЗаголовокРазделаКомиссии = ЗаголовокРазделаКомиссии.ПредседательКомиссии;
			Комиссия.Параметры.Должность                = "";
			Комиссия.Параметры.РасшифровкаПодписи       = "";
			
		КонецЕсли;
			
		ТабДокумент.Вывести(Комиссия);
		
		// Выведем подписи членов комиссии
		ВыводитьЗаголовок = Истина;
		
		// Сформируем список членов комиссии
		СписокЧленовКомиссии = Новый Массив();
		
		Для Каждого Строка Из ТаблицаИнвентаризационнаяКомиссия Цикл
			Если НЕ Строка.Председатель Тогда
				СписокЧленовКомиссии.Добавить(Строка.ФизЛицо);
			КонецЕсли;
		КонецЦикла;
		
		ДанныеЧленовКомиссии = ПроцедурыУправленияПерсоналомВызовСервера.ДанныеФизЛиц(ВыборкаПоДокументам.Организация, СписокЧленовКомиссии, ВыборкаПоДокументам.ДатаДокумента);
		
		// Сначала выведем членов комиссии из выборки
		Для Каждого ЧленКомиссии Из ДанныеЧленовКомиссии Цикл
			
			Если НЕ ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабДокумент, Комиссия) Тогда
				
				// Выведем разрыв страницы
				ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ВыводитьЗаголовок = Истина; // на новой странице выведем заголовок набора подписей
			
			КонецЕсли;
			
			Комиссия.Параметры.ЗаголовокРазделаКомиссии = ?(ВыводитьЗаголовок, 
														   		 ЗаголовокРазделаКомиссии.ЧленыКомиссии,
														   		 "");
			Комиссия.Параметры.Должность          = ЧленКомиссии.Должность;
			Комиссия.Параметры.РасшифровкаПодписи = ЧленКомиссии.Представление;
			
			ТабДокумент.Вывести(Комиссия);
			
			ВыводитьЗаголовок = Ложь; // в следующей итерации вывод заголовка не нужен
			
		КонецЦикла;
		
		// Затем выведем пустые места для подписей (чтобы в итоге получилось не менее 3-х
		Если ДанныеЧленовКомиссии.Количество() < 3 Тогда
			
			Если НЕ ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабДокумент, Комиссия) Тогда
				
				// Выведем разрыв страницы
				ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ВыводитьЗаголовок = Истина; // на новой странице выведем заголовок набора подписей
				
			КонецЕсли;
			
			Для Итератор = (ДанныеЧленовКомиссии.Количество() + 1) По 3 Цикл
				
				Комиссия.Параметры.ЗаголовокРазделаКомиссии = ?(ВыводитьЗаголовок, 
															   ЗаголовокРазделаКомиссии.ЧленыКомиссии,
															   "");
				Комиссия.Параметры.Должность          = "";
				Комиссия.Параметры.РасшифровкаПодписи = "";
				
				ТабДокумент.Вывести(Комиссия);
				
				ВыводитьЗаголовок = Ложь; // в следующей итерации вывод заголовка не нужен
				
			КонецЦикла; 
			
		КонецЕсли;
		
		//Выводим список МОЛ
		Комиссия.Параметры.ЗаголовокРазделаКомиссии = ЗаголовокРазделаКомиссии.МОЛ;
		Комиссия.Параметры.Должность 				= ДанныеМОЛ.Должность;
		Комиссия.Параметры.РасшифровкаПодписи 		= ДанныеМОЛ.Представление;
		
		ТабДокумент.Вывести(Комиссия);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, НомерСтрокиНачало, ОбъектыПечати, ВыборкаПоДокументам.Ссылка);
		
	КонецЦикла;			

	Возврат ТабДокумент;
	
КонецФункции


// Функция формирует табличный документ с печатной формой "З-6" (акт на списание запасов).
//
Функция ПечатьЗ9(МассивОбъектов, ОбъектыПечати) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);

	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СписаниеТоваров.Ссылка КАК Ссылка,
	|	СписаниеТоваров.Номер КАК Номер,
	|	СписаниеТоваров.Дата КАК Дата,
	|	СписаниеТоваров.Организация КАК Организация,
	|	СписаниеТоваров.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	|	СписаниеТоваров.Склад КАК Склад,
	|	СписаниеТоваров.УчитыватьКПН КАК УчитыватьКПН,
	|	СписаниеТоваров.УчитыватьНДС КАК УчитыватьНДС,
	|	СписаниеТоваров.КорректироватьНДС КАК КорректироватьНДС,
	|	СписаниеТоваров.СолидарноеМолДата КАК СолидарноеМолДата,
	|	СписаниеТоваров.Подписант КАК Подписант
	|ПОМЕСТИТЬ ВТ_ДокументыСписаниеТоваров
	|ИЗ
	|	Документ.СписаниеТоваров КАК СписаниеТоваров
	|ГДЕ
	|	СписаниеТоваров.Ссылка В(&МассивОбъектов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТ_ДокументыСписаниеТоваров.Ссылка КАК Ссылка,
	|	ОтветственныеЛицаПоДокументам.ФизическоеЛицо КАК ОтветственноеЛицо
	|ПОМЕСТИТЬ ВТ_ОтветственныеЛица
	|ИЗ
	|	ВТ_ДокументыСписаниеТоваров КАК ВТ_ДокументыСписаниеТоваров
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ПериодыОтвественныеЛица.Ссылка КАК Ссылка,
	|			ОтветственныеЛица.ФизическоеЛицо КАК ФизическоеЛицо
	|		ИЗ
	|			(ВЫБРАТЬ
	|				МАКСИМУМ(ОтветственныеЛица.Период) КАК Период,
	|				ОтветственныеЛица.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|				ВТ_ДокументыСписаниеТоваров.Ссылка КАК Ссылка
	|			ИЗ
	|				ВТ_ДокументыСписаниеТоваров КАК ВТ_ДокументыСписаниеТоваров
	|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛица КАК ОтветственныеЛица
	|					ПО ВТ_ДокументыСписаниеТоваров.Склад = ОтветственныеЛица.СтруктурнаяЕдиница
	|						И ВТ_ДокументыСписаниеТоваров.Дата >= ОтветственныеЛица.Период
	|			
	|			СГРУППИРОВАТЬ ПО
	|				ОтветственныеЛица.СтруктурнаяЕдиница,
	|				ВТ_ДокументыСписаниеТоваров.Ссылка) КАК ПериодыОтвественныеЛица
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛица КАК ОтветственныеЛица
	|				ПО ПериодыОтвественныеЛица.Период = ОтветственныеЛица.Период
	|					И ПериодыОтвественныеЛица.СтруктурнаяЕдиница = ОтветственныеЛица.СтруктурнаяЕдиница
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ПериодыОтвественныеЛица.Ссылка,
	|			ОтветственныеЛица.ФизическоеЛицо) КАК ОтветственныеЛицаПоДокументам
	|		ПО ВТ_ДокументыСписаниеТоваров.Ссылка = ОтветственныеЛицаПоДокументам.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТ_ДокументыСписаниеТоваров.Ссылка КАК Ссылка,
	|	ВТ_ДокументыСписаниеТоваров.Номер КАК Номер,
	|	ВТ_ДокументыСписаниеТоваров.Дата КАК ДатаДокумента,
	|	ВТ_ДокументыСписаниеТоваров.Организация КАК Организация,
	|	ВТ_ДокументыСписаниеТоваров.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	|	ВТ_ДокументыСписаниеТоваров.Склад.Представление КАК СкладПредставление,
	|	ВТ_ДокументыСписаниеТоваров.УчитыватьКПН КАК УчитыватьКПН,
	|	ВТ_ДокументыСписаниеТоваров.УчитыватьНДС КАК УчитыватьНДС,
	|	ВТ_ДокументыСписаниеТоваров.КорректироватьНДС КАК КорректироватьНДС,
	|	ВТ_ДокументыСписаниеТоваров.Ссылка.ИнвентаризационнаяКомиссия.(
	|		ФизЛицо КАК ФизЛицо,
	|		Председатель КАК Председатель
	|	) КАК ИнвентаризационнаяКомиссия,
	|	ОтветственныеЛица.ОтветственноеЛицо КАК ОтветственноеЛицо,
	|	СписаниеТоваров.ТоварыЗабаланс.(
	|		Ссылка КАК Ссылка,
	|		НомерСтроки КАК НомерСтроки,
	|		Количество КАК Количество,
	|		Номенклатура КАК Номенклатура,
	|		СчетУчетаБУ КАК СчетУчетаБУ,
	|		ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|		Коэффициент КАК Коэффициент,
	|		ДатаПереводаНаЗабаланс КАК ДатаПереводаНаЗабаланс,
	|		БлокГПР КАК БлокГПР
	|	) КАК ТоварыЗабаланс,
	|	СписаниеТоваров.СолидарныеМол.(
	|		Ссылка КАК Ссылка,
	|		НомерСтроки КАК НомерСтроки,
	|		ФизЛицо КАК ФизЛицо
	|	) КАК СолидарныеМол,
	|	ВТ_ДокументыСписаниеТоваров.СолидарноеМолДата КАК СолидарноеМолДата,
	|	ВТ_ДокументыСписаниеТоваров.Подписант КАК Подписант
	|ИЗ
	|	ВТ_ДокументыСписаниеТоваров КАК ВТ_ДокументыСписаниеТоваров
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОтветственныеЛица КАК ОтветственныеЛица
	|		ПО ВТ_ДокументыСписаниеТоваров.Ссылка = ОтветственныеЛица.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СписаниеТоваров КАК СписаниеТоваров
	|		ПО ВТ_ДокументыСписаниеТоваров.Ссылка = СписаниеТоваров.Ссылка
	|ГДЕ
	|	ВТ_ДокументыСписаниеТоваров.Ссылка В(&МассивОбъектов)";
					   
	ВыборкаПоДокументам = Запрос.Выполнить().Выбрать();
		
	ЗапросТовары = Новый Запрос;
	ЗапросТовары.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	ЗапросТовары.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                     |	ОбщаяВыборка.Ссылка КАК Ссылка,
	                     |	ОбщаяВыборка.Номенклатура КАК Номенклатура,
	                     |	ОбщаяВыборка.ТоварНаименование КАК ТоварНаименование,
	                     |	ОбщаяВыборка.СуммаСНДС КАК СуммаСНДС,
	                     |	ОбщаяВыборка.Цена КАК Цена,
	                     |	ОбщаяВыборка.НоменклатурныйНомер КАК НоменклатурныйНомер,
	                     |	ОбщаяВыборка.Наименование КАК Наименование,
	                     |	ОбщаяВыборка.ЕдиницаИзмеренияНаименование КАК ЕдиницаИзмеренияНаименование,
	                     |	ОбщаяВыборка.Количество КАК Количество,
	                     |	ОбщаяВыборка.ПричинаСписания КАК ПричинаСписания
	                     |ИЗ
	                     |	(ВЫБРАТЬ
	                     |		СписаниеТоваров.Ссылка КАК Ссылка,
	                     |		СписаниеТоваров.Номенклатура КАК Номенклатура,
	                     |		ВЫРАЗИТЬ(СписаниеТоваров.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК ТоварНаименование,
	                     |		ЕСТЬNULL(ДвиженияТиповой.Сумма, 0) - ЕСТЬNULL(КорректировкаНДС.СуммаНДС, 0) КАК СуммаСНДС,
	                     |		ВЫБОР
	                     |			КОГДА СписаниеТоваров.Количество <> 0
	                     |				ТОГДА (ЕСТЬNULL(ДвиженияТиповой.Сумма, 0) - ЕСТЬNULL(КорректировкаНДС.СуммаНДС, 0)) / СписаниеТоваров.Количество
	                     |			ИНАЧЕ 0
	                     |		КОНЕЦ КАК Цена,
	                     |		СписаниеТоваров.Номенклатура.Код КАК НоменклатурныйНомер,
	                     |		СписаниеТоваров.Номенклатура.Наименование КАК Наименование,
	                     |		СписаниеТоваров.ЕдиницаИзмеренияНаименование КАК ЕдиницаИзмеренияНаименование,
	                     |		СписаниеТоваров.Количество КАК Количество,
	                     |		СписаниеТоваров.ПричинаСписания КАК ПричинаСписания
	                     |	ИЗ
	                     |		(ВЫБРАТЬ
	                     |			СписаниеТоваровТовары.Ссылка КАК Ссылка,
	                     |			СписаниеТоваровТовары.Номенклатура КАК Номенклатура,
	                     |			СписаниеТоваровТовары.Номенклатура.Код КАК НоменклатурныйНомер,
	                     |			СписаниеТоваровТовары.ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмеренияНаименование,
	                     |			СУММА(СписаниеТоваровТовары.Количество) КАК Количество,
	                     |			СписаниеТоваровТовары.ПричинаСписания КАК ПричинаСписания
	                     |		ИЗ
	                     |			Документ.СписаниеТоваров.Товары КАК СписаниеТоваровТовары
	                     |		ГДЕ
	                     |			СписаниеТоваровТовары.Ссылка В(&МассивОбъектов)
	                     |			И СписаниеТоваровТовары.Ссылка.УчитыватьНДС
	                     |			И СписаниеТоваровТовары.Ссылка.КорректироватьНДС
	                     |		
	                     |		СГРУППИРОВАТЬ ПО
	                     |			СписаниеТоваровТовары.Ссылка,
	                     |			СписаниеТоваровТовары.Номенклатура,
	                     |			СписаниеТоваровТовары.Номенклатура.Код,
	                     |			СписаниеТоваровТовары.ЕдиницаИзмерения,
	                     |			СписаниеТоваровТовары.ЕдиницаИзмерения.Наименование,
	                     |			СписаниеТоваровТовары.ПричинаСписания) КАК СписаниеТоваров
	                     |			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	                     |				КорректировкаНДСКВозмещению.Регистратор КАК Регистратор,
	                     |				КорректировкаНДСКВозмещению.ТМЗ КАК ТМЗ,
	                     |				СУММА(КорректировкаНДСКВозмещению.СуммаНДС) КАК СуммаНДС
	                     |			ИЗ
	                     |				РегистрНакопления.КорректировкаНДСКВозмещению КАК КорректировкаНДСКВозмещению
	                     |			ГДЕ
	                     |				КорректировкаНДСКВозмещению.Регистратор В(&МассивОбъектов)
	                     |			
	                     |			СГРУППИРОВАТЬ ПО
	                     |				КорректировкаНДСКВозмещению.Регистратор,
	                     |				КорректировкаНДСКВозмещению.ТМЗ) КАК КорректировкаНДС
	                     |			ПО СписаниеТоваров.Номенклатура = КорректировкаНДС.ТМЗ
	                     |				И СписаниеТоваров.Ссылка = КорректировкаНДС.Регистратор
	                     |			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	                     |				ТиповойДвиженияССубконто.Регистратор КАК Регистратор,
	                     |				ТиповойДвиженияССубконто.СубконтоКт1 КАК СубконтоКт1,
	                     |				СУММА(ТиповойДвиженияССубконто.Сумма) КАК Сумма
	                     |			ИЗ
	                     |				РегистрБухгалтерии.Типовой.ДвиженияССубконто(, , Регистратор В (&МассивОбъектов), , ) КАК ТиповойДвиженияССубконто
	                     |			
	                     |			СГРУППИРОВАТЬ ПО
	                     |				ТиповойДвиженияССубконто.Регистратор,
	                     |				ТиповойДвиженияССубконто.СубконтоКт1) КАК ДвиженияТиповой
	                     |			ПО СписаниеТоваров.Номенклатура = ДвиженияТиповой.СубконтоКт1
	                     |				И СписаниеТоваров.Ссылка = ДвиженияТиповой.Регистратор
	                     |	
	                     |	ОБЪЕДИНИТЬ ВСЕ
	                     |	
	                     |	ВЫБРАТЬ
	                     |		СписаниеТоваровТовары.Ссылка,
	                     |		СписаниеТоваровТовары.Номенклатура,
	                     |		ПОДСТРОКА(СписаниеТоваровТовары.Номенклатура.НаименованиеПолное, 1, 1000),
	                     |		0,
	                     |		0,
	                     |		СписаниеТоваровТовары.Номенклатура.Код,
	                     |		СписаниеТоваровТовары.Номенклатура.Наименование,
	                     |		СписаниеТоваровТовары.ЕдиницаИзмерения.Наименование,
	                     |		СУММА(СписаниеТоваровТовары.Количество),
	                     |		СписаниеТоваровТовары.ПричинаСписания
	                     |	ИЗ
	                     |		Документ.СписаниеТоваров.Товары КАК СписаниеТоваровТовары
	                     |	ГДЕ
	                     |		СписаниеТоваровТовары.Ссылка В(&МассивОбъектов)
	                     |		И НЕ(СписаниеТоваровТовары.Ссылка.УчитыватьНДС
	                     |					И СписаниеТоваровТовары.Ссылка.КорректироватьНДС)
	                     |	
	                     |	СГРУППИРОВАТЬ ПО
	                     |		СписаниеТоваровТовары.Ссылка,
	                     |		СписаниеТоваровТовары.Номенклатура,
	                     |		СписаниеТоваровТовары.Номенклатура.Код,
	                     |		СписаниеТоваровТовары.ЕдиницаИзмерения,
	                     |		СписаниеТоваровТовары.Номенклатура.Наименование,
	                     |		СписаниеТоваровТовары.ЕдиницаИзмерения.Наименование,
	                     |		ПОДСТРОКА(СписаниеТоваровТовары.Номенклатура.НаименованиеПолное, 1, 1000),
	                     |		СписаниеТоваровТовары.ПричинаСписания) КАК ОбщаяВыборка
	                     |
	                     |УПОРЯДОЧИТЬ ПО
	                     |	ОбщаяВыборка.Наименование
	                     |ИТОГИ
	                     |	СУММА(СуммаСНДС),
	                     |	СУММА(Цена),
	                     |	СУММА(Количество)
	                     |ПО
	                     |	Ссылка";
						 
	ВыборкаПоРегистратору = ЗапросТовары.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
		
	Макет = УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.ПФ_MXL_З9");
	
	ТабДокумент = Новый ТабличныйДокумент;
	
	// Зададим параметры макета
	ТабДокумент.ПолеСверху         = 0;
	ТабДокумент.ПолеСлева          = 10;
	ТабДокумент.ПолеСнизу          = 0;
	ТабДокумент.ПолеСправа         = 0;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	ТабДокумент.КлючПараметровПечати = "СписаниеТоваров_З6";

	//Получим области
	Шапка 			 = Макет.ПолучитьОбласть("Шапка");
	ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	СтрокаТаблицы 	 = Макет.ПолучитьОбласть("СтрокаТаблицы");
	Итого 			 = Макет.ПолучитьОбласть("Итого");
	ОборотнаяСторона = Макет.ПолучитьОбласть("ОборотнаяСторона");
	Комиссия		 = Макет.ПолучитьОбласть("Комиссия");
	
	Пока ВыборкаПоДокументам.Следующий() Цикл
		
		Если ТабДокумент.ВысотаТаблицы > 0 Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
		
		ВыборкаПоРегистратору.Сбросить();
		
		Если ВыборкаПоРегистратору.НайтиСледующий(ВыборкаПоДокументам.Ссылка) Тогда
			ВыборкаСтрокТовары = ВыборкаПоРегистратору.Выбрать();
		Иначе
			ВыборкаСтрокТовары = Неопределено;
		КонецЕсли;
		
		ТаблицаИнвентаризационнаяКомиссия = ВыборкаПоДокументам.ИнвентаризационнаяКомиссия.Выгрузить();

		СтруктурнаяЕдиницаОрганизация = ОбщегоНазначенияБК.ПолучитьСтруктурнуюЕдиницу(ВыборкаПоДокументам.Организация, ВыборкаПоДокументам.СтруктурноеПодразделение);
		
		// Выводим общие реквизиты шапки
		СведенияОбОрганизации = ОбщегоНазначенияБКВызовСервера.СведенияОЮрФизЛице(СтруктурнаяЕдиницаОрганизация, ВыборкаПоДокументам.ДатаДокумента);
		Руководители 		  = ОбщегоНазначенияБКВызовСервера.ОтветственныеЛицаОрганизаций(СтруктурнаяЕдиницаОрганизация, ВыборкаПоДокументам.ДатаДокумента);
		ДанныеМОЛ 			  = ПроцедурыУправленияПерсоналомВызовСервера.ДанныеФизЛица(ВыборкаПоДокументам.Организация, ВыборкаПоДокументам.ОтветственноеЛицо, ВыборкаПоДокументам.ДатаДокумента);
		
		Шапка.Параметры.ПредставлениеОрганизации = ОбщегоНазначенияБКВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,");
		Шапка.Параметры.ОрганизацияРНН	         = ОбщегоНазначенияБКВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации, "БИН_ИИН,", Ложь, ВыборкаПоДокументам.ДатаДокумента, "ru");
		Шапка.Параметры.КодПоОКПО 				 = ОбщегоНазначенияБКВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации, "КодПоОКПО,", Ложь, ВыборкаПоДокументам.ДатаДокумента, "ru");

		
		Шапка.Параметры.НомерДокумента	   = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ВыборкаПоДокументам.Номер, ВыборкаПоДокументам.Ссылка);
		ШАпка.Параметры.ДатаДок			   = Формат(ВыборкаПоДокументам.ДатаДокумента, "ДЛФ=DD");
		Шапка.Параметры.РасшифровкаПодписи = Руководители.Руководитель;
		Шапка.Параметры.МОЛ				   = ДанныеМОЛ.Представление;
		Шапка.Параметры.Заполнить(ВыборкаПоДокументам);
		
		// Выведем подпись председателя инвентаризационной комиссии
		ПредседательКомиссии = ТаблицаИнвентаризационнаяКомиссия.Найти(Истина, "Председатель");
		
		Если НЕ (ПредседательКомиссии = Неопределено) Тогда
			
			ДанныеПредседателя = ПроцедурыУправленияПерсоналомВызовСервера.ДанныеФизЛица(ВыборкаПоДокументам.Организация, ПредседательКомиссии.ФизЛицо, ВыборкаПоДокументам.ДатаДокумента);
			
			Шапка.Параметры.ДолжностьПредседателя                = ДанныеПредседателя.Должность;
			Шапка.Параметры.РасшифровкаПодписи       = ДанныеПредседателя.Представление;
			
		Иначе
			
			Шапка.Параметры.ДолжностьПредседателя	 = "Руководитель организации (индивидуальный предприниматель)";
			Шапка.Параметры.РасшифровкаПодписи        = Руководители.Руководитель;
			
		КонецЕсли;
		
		
		ТабДокумент.Вывести(Шапка);
		
		// вывод заголовка таблицы
		ВалютаПечати = ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
		ЗаголовокТаблицы.Параметры.Валюта = ВалютаПечати;
		ТабДокумент.Вывести(ЗаголовокТаблицы);
		
		// вывод строк таблицы
		КоличествоСтрок = ?(НЕ ВыборкаСтрокТовары = Неопределено , ВыборкаСтрокТовары.Количество(), 0);
		
		// Инициализация итогов в документе
		
		ИтогоКоличество = 0;
		ИтогоВсегоСНДС  = 0;

		Если НЕ (ВыборкаПоДокументам.УчитыватьНДС И ВыборкаПоДокументам.КорректироватьНДС) Тогда 
			ТаблицаСуммСписания = ПроцедурыБухгалтерскогоУчета.ПолучитьСуммуСписанияАктивов(ВыборкаПоДокументам.Ссылка);
		КонецЕсли;

		НомерПП = 1;
		
		Если НЕ ВыборкаСтрокТовары = Неопределено Тогда
			
			Пока ВыборкаСтрокТовары.Следующий() Цикл
				
				//Если НЕ ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабДокумент, СтрокаТаблицы) Тогда
					//ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
					//ТабДокумент.Вывести(ЗаголовокТаблицы);
				//КонецЕсли;	

				СтрокаТаблицы.Параметры.Заполнить(ВыборкаСтрокТовары);
				СтрокаТаблицы.Параметры.ТоварНаименование = СокрЛП(ВыборкаСтрокТовары.ТоварНаименование); 
				
				Если ВыборкаПоДокументам.УчитыватьНДС И ВыборкаПоДокументам.КорректироватьНДС Тогда
					
					СтрокаТаблицы.Параметры.Количество = Формат(ВыборкаСтрокТовары.Количество,"ЧДЦ=3");
					СтрокаТаблицы.Параметры.Цена	   = Формат(ВыборкаСтрокТовары.Цена,"ЧДЦ=2");
					СтрокаТаблицы.Параметры.СуммаСНДС  = Формат(ВыборкаСтрокТовары.СуммаСНДС,"ЧДЦ=2");
					
				Иначе	
					Кратность = 1;
					СтрокаСуммСписания = ТаблицаСуммСписания.Найти(ВыборкаСтрокТовары.Номенклатура, "Номенклатура");
					Если СтрокаСуммСписания = Неопределено Тогда
						 ВсегоСНДС = 0;
						 Цена 	   = 0;
					 Иначе
						 //Цена 	   = ?(СтрокаСуммСписания.Количество = 0, 0, СтрокаСуммСписания.Сумма / СтрокаСуммСписания.Количество);
						 Цена = ?(ВыборкаСтрокТовары.Количество = 0, 0, СтрокаСуммСписания.Сумма / ВыборкаСтрокТовары.Количество);
						 ВсегоСНДС = Цена * ВыборкаСтрокТовары.Количество;
					 КонецЕсли;

					Количество = ВыборкаСтрокТовары.Количество;

					СтрокаТаблицы.Параметры.Количество = Формат(Количество,"ЧДЦ=3");
					СтрокаТаблицы.Параметры.СуммаСНДС  = Формат(ВсегоСНДС, "ЧДЦ=2");
					СтрокаТаблицы.Параметры.Цена       = Формат(Цена, "ЧДЦ=2");
					СтрокаТаблицы.Параметры.НомерПП    = НомерПП;
					
					ИтогоКоличество	= ИтогоКоличество + Количество;
					ИтогоВсегоСНДС  = ИтогоВсегоСНДС  + ВсегоСНДС;

				КонецЕсли;

				НомерПП = НомерПП + 1;
				
				ТабДокумент.Вывести(СтрокаТаблицы);

			КонецЦикла;
						
		КонецЕсли;
		
		ТоварыЗабаланс = ВыборкаПоДокументам.ТоварыЗабаланс.Выгрузить();
		ТоварыЗабаланс.Свернуть("Номенклатура, ЕдиницаИзмерения, СчетУчетаБУ", "Количество");
		
		Если ТоварыЗабаланс.Количество() > 0 Тогда 
			Для каждого Строка из ТоварыЗабаланс Цикл
				
				СтрокаТаблицы.Параметры.НомерПП = НомерПП;
				СтрокаТаблицы.Параметры.ТоварНаименование = Строка.Номенклатура.Наименование;		
				СтрокаТаблицы.Параметры.НоменклатурныйНомер = Строка.Номенклатура.Код;
				СтрокаТаблицы.Параметры.ЕдиницаИзмеренияНаименование = Строка.ЕдиницаИзмерения;
				СтрокаТаблицы.Параметры.Количество = Формат(Строка.Количество,"ЧДЦ=3");
				СтрокаТаблицы.Параметры.Цена       = 0;
				СтрокаТаблицы.Параметры.СуммаСНДС  =0;
				
				НомерПП = НомерПП + 1;
				
				ИтогоКоличество = ИтогоКоличество + Строка.Количество;
				
				ТабДокумент.Вывести(СтрокаТаблицы);
			КонецЦикла;
		КонецЕсли;
		
		// вывод итогов
		
		//Если ВыборкаПоДокументам.УчитыватьНДС И ВыборкаПоДокументам.КорректироватьНДС Тогда
		//	Итого.Параметры.ИтогоКоличество = Формат(ВыборкаПоРегистратору.Количество, "ЧДЦ=3");
		//	Итого.Параметры.ИтогоСуммаСНДС  = Формат(ВыборкаПоРегистратору.СуммаСНДС, "ЧДЦ=2");
		//ИначеЕсли ТоварыЗабаланс.Количество() > 0 Тогда
		//	Итого.Параметры.ИтогоКоличество = ТоварыЗабаланс.Итог("Количество");
		//Иначе	
		//	Итого.Параметры.ИтогоКоличество = Формат(ИтогоКоличество, "ЧДЦ=3");
		//	Итого.Параметры.ИтогоСуммаСНДС  = Формат(ИтогоВсегоСНДС, "ЧДЦ=2");
		//КонецЕсли;	
		
		Итого.Параметры.ИтогоСуммаСНДС  = Формат(ИтогоВсегоСНДС, "ЧДЦ=2");
		Итого.Параметры.ИтогоКоличество = Формат(ИтогоКоличество, "ЧДЦ=3");
		
		ТабДокумент.Вывести(Итого);
		//ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		
		//вывод оборотной стороны
		ОборотнаяСторона.Параметры.Валюта = ВалютаПечати;
		ТабДокумент.Вывести(ОборотнаяСторона);
		
		//вывод комиссии
		// Варианты заголовков разделов с подписями печатной формы	
		ЗаголовокРазделаКомиссии = Новый Структура();
		ЗаголовокРазделаКомиссии.Вставить("МОЛ",                  "Материально-ответственное лицо");
		ЗаголовокРазделаКомиссии.Вставить("ПредседательКомиссии", "Председатель комиссии");
		ЗаголовокРазделаКомиссии.Вставить("ЧленыКомиссии",        "Члены комиссии:");
		
		// Выведем подпись председателя инвентаризационной комиссии
		ПредседательКомиссии = ТаблицаИнвентаризационнаяКомиссия.Найти(Истина, "Председатель");
		
		//Если НЕ (ПредседательКомиссии = Неопределено) Тогда
		//	
		//	ДанныеПредседателя = ПроцедурыУправленияПерсоналомВызовСервера.ДанныеФизЛица(ВыборкаПоДокументам.Организация, ПредседательКомиссии.ФизЛицо, ВыборкаПоДокументам.ДатаДокумента);
		//		
		//	Комиссия.Параметры.ЗаголовокРазделаКомиссии = ЗаголовокРазделаКомиссии.ПредседательКомиссии;
		//	Комиссия.Параметры.Должность                = ДанныеПредседателя.Должность;
		//	Комиссия.Параметры.РасшифровкаПодписи       = ДанныеПредседателя.Представление;
		//	
		//Иначе
		//	
		//	Комиссия.Параметры.ЗаголовокРазделаКомиссии = ЗаголовокРазделаКомиссии.ПредседательКомиссии;
		//	Комиссия.Параметры.Должность                = "";
		//	Комиссия.Параметры.РасшифровкаПодписи       = "";
		//	
		//КонецЕсли;
		//	
		//ТабДокумент.Вывести(Комиссия);
		
		// Выведем подписи членов комиссии
		ВыводитьЗаголовок = Истина;
		
		// Сформируем список членов комиссии
		СписокЧленовКомиссии = Новый Массив();
		
		Для Каждого Строка Из ТаблицаИнвентаризационнаяКомиссия Цикл
			Если НЕ Строка.Председатель Тогда
				СписокЧленовКомиссии.Добавить(Строка.ФизЛицо);
			КонецЕсли;
		КонецЦикла;
		
		ДанныеЧленовКомиссии = ПроцедурыУправленияПерсоналомВызовСервера.ДанныеФизЛиц(ВыборкаПоДокументам.Организация, СписокЧленовКомиссии, ВыборкаПоДокументам.ДатаДокумента);
		
		// Сначала выведем членов комиссии из выборки
		Для Каждого ЧленКомиссии Из ДанныеЧленовКомиссии Цикл
			
			//Если НЕ ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабДокумент, Комиссия) Тогда
			//	
			//	// Выведем разрыв страницы
			//	ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			//	ВыводитьЗаголовок = Истина; // на новой странице выведем заголовок набора подписей
			//
			//КонецЕсли;
			
			Комиссия.Параметры.ЗаголовокРазделаКомиссии = ?(ВыводитьЗаголовок, 
														   		 ЗаголовокРазделаКомиссии.ЧленыКомиссии,
														   		 "");
			Комиссия.Параметры.Должность          = ЧленКомиссии.Должность;
			Комиссия.Параметры.РасшифровкаПодписи = ЧленКомиссии.Представление;
			
			ТабДокумент.Вывести(Комиссия);
			
			ВыводитьЗаголовок = Ложь; // в следующей итерации вывод заголовка не нужен
			
		КонецЦикла;
		
		// Затем выведем пустые места для подписей (чтобы в итоге получилось не менее 3-х
		Если ДанныеЧленовКомиссии.Количество() < 3 Тогда
			
			//Если НЕ ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабДокумент, Комиссия) Тогда
			//	
			//	// Выведем разрыв страницы
			//	ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			//	ВыводитьЗаголовок = Истина; // на новой странице выведем заголовок набора подписей
			//	
			//КонецЕсли;
			
			Для Итератор = (ДанныеЧленовКомиссии.Количество() + 1) По 3 Цикл
				
				Комиссия.Параметры.ЗаголовокРазделаКомиссии = ?(ВыводитьЗаголовок, 
															   ЗаголовокРазделаКомиссии.ЧленыКомиссии,
															   "");
				Комиссия.Параметры.Должность          = "";
				Комиссия.Параметры.РасшифровкаПодписи = "";
				
				ТабДокумент.Вывести(Комиссия);
				
				ВыводитьЗаголовок = Ложь; // в следующей итерации вывод заголовка не нужен
				
			КонецЦикла; 
			
		КонецЕсли;
		
		//Выводим список МОЛ
		Комиссия.Параметры.ЗаголовокРазделаКомиссии = ЗаголовокРазделаКомиссии.МОЛ;
		Комиссия.Параметры.Должность 				= ДанныеМОЛ.Должность;
		Комиссия.Параметры.РасшифровкаПодписи 		= ДанныеМОЛ.Представление;
		
		ТабДокумент.Вывести(Комиссия);
		
		Если ВыборкаПоДокументам.СолидарныеМОЛ.Выгрузить().Количество() > 0 Тогда
			
			ДоговорОт = Макет.ПолучитьОбласть("ДоговорОт");
			Если ЗначениеЗаполнено(ВыборкаПоДокументам.СолидарноеМОЛДата) Тогда
				ДоговорОт.Параметры.СолидарныеМОЛДата = ВыборкаПоДокументам.СолидарноеМОЛДата;
			КонецЕсли;
			ТабДокумент.Вывести(ДоговорОт);
			
			Для каждого Строка из ВыборкаПоДокументам.СолидарныеМОЛ.Выгрузить() Цикл
				
				ДанныеМОЛ = ПроцедурыУправленияПерсоналомВызовСервера.ДанныеФизЛица(ВыборкаПоДокументам.Организация, Строка.ФизЛицо, ВыборкаПоДокументам.ДатаДокумента);
				
				Комиссия.Параметры.ЗаголовокРазделаКомиссии = "";
				Комиссия.Параметры.Должность = ДанныеМОЛ.Должность;
				Комиссия.Параметры.РасшифровкаПодписи = ДанныеМОЛ.Представление;
				
				ТабДокумент.Вывести(Комиссия);
					
			КонецЦикла;
			            
		КонецЕсли;
		
		ОбластьМакета = Макет.ПолучитьОбласть("Исполнитель");
		
		ДанныеИсполнителя = ПроцедурыУправленияПерсоналомВызовСервера.ДанныеФизЛица(ВыборкаПоДокументам.Организация, ВыборкаПоДокументам.Подписант, ВыборкаПоДокументам.ДатаДокумента);
		//ДанныеИсполнителя = ПроцедурыУправленияПерсоналомВызовСервера.ДанныеФизЛица(ВыборкаПоДокументам.Организация, ВыборкаПоДокументам.Ссылка.Ответственный.ФизЛицо, ВыборкаПоДокументам.ДатаДокумента);
		ОбластьМакета.Параметры.Должность = ДанныеИсполнителя.Должность;
		ОбластьМакета.Параметры.РасшифровкаПодписи = ДанныеИсполнителя.Представление;
		
		ТабДокумент.Вывести(ОбластьМакета);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, НомерСтрокиНачало, ОбъектыПечати, ВыборкаПоДокументам.Ссылка);
		
	КонецЦикла;			

	Возврат ТабДокумент;
	
КонецФункции

#КонецЕсли