#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

#Область УправлениеДоступом

// Процедура ЗаполнитьНаборыЗначенийДоступа по свойствам объекта заполняет наборы значений доступа
// в таблице с полями:
//    НомерНабора     - Число                                     (необязательно, если набор один),
//    ВидДоступа      - ПланВидовХарактеристикСсылка.ВидыДоступа, (обязательно),
//    ЗначениеДоступа - Неопределено, СправочникСсылка или др.    (обязательно),
//    Чтение          - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Добавление      - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Изменение       - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Удаление        - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//
//  Вызывается из процедуры УправлениеДоступомСлужебный.ЗаписатьНаборыЗначенийДоступа(),
// если объект зарегистрирован в "ПодпискаНаСобытие.ЗаписатьНаборыЗначенийДоступа" и
// из таких же процедур объектов, у которых наборы значений доступа зависят от наборов этого
// объекта (в этом случае объект зарегистрирован в "ПодпискаНаСобытие.ЗаписатьЗависимыеНаборыЗначенийДоступа").
//
// Параметры:
//  Таблица      - ТабличнаяЧасть,
//                 РегистрСведенийНаборЗаписей.НаборыЗначенийДоступа,
//                 ТаблицаЗначений, возвращаемая УправлениеДоступом.ТаблицаНаборыЗначенийДоступа().
//
Процедура ЗаполнитьНаборыЗначенийДоступа(Таблица) Экспорт
	
	УчетТоваров.ЗаполнитьНаборыПоОрганизацииСтрутурномуПодразделениюСкладу(ЭтотОбъект, Таблица, "Организация", "СтруктурноеПодразделение", "Склад");
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение И НомераГТДСервер.ВедетсяУчетПоТоварамОрганизаций(Дата) Тогда
		ТаблицаДокумента = НомераГТДСервер.ПодготовитьТаблицуТоваровСУчетомСкладовВТЧ(Товары, Истина, Склад);
		ТаблицаНомераГТД = НомераГТДСервер.ПодготовитьТаблицуНомеровГТД(ТаблицаДокумента, НомераГТД.Выгрузить());
		НомераГТДСервер.ЗаполнитьТаблицуНомераГТД(ЭтотОбъект,ТаблицаДокумента, ТаблицаНомераГТД);
	КонецЕсли;
	
	СчетаУчетаВДокументах.ЗаполнитьПередЗаписью(ЭтотОбъект, РежимЗаписи);
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета(),,, ОбъектКопирования.Ссылка);

	Если ЗначениеЗаполнено(ОбъектКопирования.НомераГТД) Тогда
		НомераГТД.Очистить();
	КонецЕсли;  	
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА
	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
	
	Если РучнаяКорректировка Тогда
		Возврат;
	КонецЕсли;

	ПараметрыПроведения = Документы.СписаниеТоваров.ПодготовитьПараметрыПроведения(Ссылка, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ИНФОРМАЦИОННОЙ БАЗЫ
	
	// Таблица списанных товаров
	ТаблицаСписанныеТовары = УчетТоваров.ПодготовитьТаблицуСписанныеТовары(ПараметрыПроведения.СписаниеТоваровТаблицаТовары,
			ПараметрыПроведения.Реквизиты, Отказ);
	
	// дополним таблицу списанных товаров данными по НДС
	ТаблицаСписанныеТоварыНДС =  УчетНДСИАкциза.ПодготовитьТаблицуСписанныеТоварыНДС(ТаблицаСписанныеТовары,
			ПараметрыПроведения.Реквизиты, ПараметрыПроведения.СписаниеТоваровТаблицаТоварыНДС,  Отказ);
			
	//КОНТРОЛЬ ПО РЕГИСТРУ "ТОВАРЫ ОРГАНИЗАЦИЙ
	НомераГТДСервер.ВыполнитьКонтрольТоварыОрганизаций(ПараметрыПроведения.ТаблицаТоварыОрганизаций,
			ПараметрыПроведения.Реквизиты, , Отказ);

	// ФОРМИРОВАНИЕ ДВИЖЕНИЙ
	
	// Товары организаций
	НомераГТДСервер.СформироватьДвиженияТоварыОрганизаций(ПараметрыПроведения.ТаблицаТоварыОрганизаций,
			ПараметрыПроведения.Реквизиты, Движения, Отказ);		
	
	УчетТоваров.СформироватьДвиженияСписаниеТоваров(ТаблицаСписанныеТовары,
			ПараметрыПроведения.Реквизиты, Движения, Отказ);
			
	УчетНДСИАкциза.СформироватьДвиженияСписаниеТоваров(ТаблицаСписанныеТоварыНДС,
				ПараметрыПроведения.Реквизиты, Движения, Отказ);

	// Отражение ПР в НУ 
	ПроцедурыНалоговогоУчета.ОтразитьПостоянныеРазницыВНУ(ПараметрыПроведения.Реквизиты, Движения, Отказ);
	
	//Евгений+   
	Для каждого Строка из Товары Цикл
		Если Строка.ОприходоватьНаЗабалансовыйСчет Тогда
			ОприходоватьНаЗабалансовыйСчет(Строка);	
		КонецЕсли;
	КонецЦикла;
	
	
	Для каждого Строка из ТоварыЗабаланс Цикл
		ОтразитьПроводкиТоварыЗабаланс(Строка);
	КонецЦикла;
	
	//Евгений-
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	
	Если ДанныеЗаполнения <> Неопределено И ТипДанныхЗаполнения <> Тип("Структура") 
		И Метаданные().ВводитсяНаОсновании.Содержит(ДанныеЗаполнения.Метаданные()) Тогда
		ЗаполнитьПоДокументуОснования(ДанныеЗаполнения);
		Возврат;
	ИначеЕсли ТипДанныхЗаполнения = Тип("Структура") Тогда
		Если ДанныеЗаполнения.Свойство("Автор") Тогда
			ДанныеЗаполнения.Удалить("Автор");
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
	КонецЕсли;
	
	ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, ДанныеЗаполнения);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив();
		
	// Проверка заполнения табличной части "Товары"
	//Если НЕ ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Организация, Дата) 
	Если Не УчетнаяПолитикаСервер.ПлательщикНалогаНаПрибыль(Организация, Дата)
		ИЛИ НЕ УчитыватьКПН Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("Товары.СчетЗатратНУ");
		МассивНепроверяемыхРеквизитов.Добавить("Товары.СчетУчетаНУ");
		МассивНепроверяемыхРеквизитов.Добавить("ВидУчетаНУ");
		
		Если НЕ УчитыватьНДС ИЛИ НЕ КорректироватьНДС Тогда
			МассивНепроверяемыхРеквизитов.Добавить("СчетЗатратНДСНУ");
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНДС(Организация, Дата)
		ИЛИ НЕ УчитыватьНДС ИЛИ НЕ КорректироватьНДС Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("СчетЗатратНДСБУ");
		МассивНепроверяемыхРеквизитов.Добавить("СчетЗатратНДСНУ");
		МассивНепроверяемыхРеквизитов.Добавить("Товары.СчетУчетаНДС");
		МассивНепроверяемыхРеквизитов.Добавить("Товары.НДСВидОборота");
		МассивНепроверяемыхРеквизитов.Добавить("Товары.НДСВидПоступления");
		МассивНепроверяемыхРеквизитов.Добавить("Товары.СтавкаНДС");
		
	КонецЕсли;
		
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
	ПользовательУправляетСчетамиУчета = СчетаУчетаВДокументахВызовСервераПовтИсп.ПользовательУправляетСчетамиУчета();
	
	Если ПользовательУправляетСчетамиУчета Тогда
		ПроверитьЗаполнениеТабличнойЧастиПострочно(Отказ);
	КонецЕсли;
		
	СчетаУчетаВДокументах.ПроверитьЗаполнение(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты, Новый Соответствие);
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеТабличнойЧастиПострочно(Отказ, ПараметрыПроверки = Неопределено)
	
	Для Каждого СтрокаТабличнойЧасти Из Товары Цикл
		
		СвойстваСчетаУчета = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТабличнойЧасти.СчетУчетаБУ);

		Если НЕ СвойстваСчетаУчета.Забалансовый И НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СчетЗатратБУ) Тогда
			ТекстСообщения = ОбщегоНазначенияБККлиентСервер.ПолучитьТекстСообщения("Колонка",, НСтр("ru = ' Счет списания затрат (БУ)'"),
				СтрокаТабличнойЧасти.НомерСтроки, НСтр("ru='ТМЗ'"));
			Поле = "Товары[" + Формат(СтрокаТабличнойЧасти.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].СчетЗатратБУ";
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
		КонецЕсли;		
		
	КонецЦикла;
	
КонецПроцедуры

//Евгений-



////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Процедура выполняет заполнение документа по документу-основанию
//
Процедура ЗаполнитьПоДокументуОснования(Основание) Экспорт
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ИнвентаризацияТоваровНаСкладе") Тогда

		Документы.СписаниеТоваров.ЗаполнитьТоварыПоИнвентаризацииТоваров(ЭтотОбъект, Основание);
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
					
		Документы.СписаниеТоваров.ЗаполнитьТоварыПоПеремещениюТоваров(ЭтотОбъект, Основание);
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		
		Документы.СписаниеТоваров.ЗаполнитьТоварыПоПоступлениюТоваров(ЭтотОбъект, Основание);
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
		
		Документы.СписаниеТоваров.ЗаполнитьТоварыПоАвансовомуОтчету(ЭтотОбъект, Основание);
		
	КонецЕсли;

КонецПроцедуры

//Евгений+
Процедура ОприходоватьНаЗабалансовыйСчет(СтрокаДанных)
	
	Если СтрокаДанных.СчетУчетаБУ.Код="1310" Тогда
		Счет=ПланыСчетов.Типовой.СписанныеСырьеИМатериалы;
	ИначеЕсли СтрокаДанных.СчетУчетаБУ.Код="1313" Тогда
		Счет=ПланыСчетов.Типовой.СписанноеТопливо;
	ИначеЕсли СтрокаДанных.СчетУчетаБУ.Код="1315" Тогда
		Счет=ПланыСчетов.Типовой.СписанныеЗапасныеЧасти;
	ИначеЕсли СтрокаДанных.СчетУчетаБУ.Код="1316" Тогда
		Счет=ПланыСчетов.Типовой.СписанныеПрочиеМатериалы; 
	Иначе 
		Счет = СтрокаДанных.СчетУчетаБУ;
	КонецЕсли;
	
	
	//Если СтрокаДанных.СчетУчетаБУ=ПланыСчетов.Типовой.ПокупныеМатериалыКомплектующиеИзделия Тогда
	//	Счет = ПланыСчетов.Типовой.СписанныеПокупныеМатериалыКомплектующиеИзделия;
	//ИначеЕсли СтрокаДанных.СчетУчетаБУ=ПланыСчетов.Типовой.Топливо Тогда
	//	Счет = ПланыСчетов.Типовой.СписанноеТопливо;
	//ИначеЕсли СтрокаДанных.СчетУчетаБУ=ПланыСчетов.Типовой.ТараИТарныеМатериалы Тогда
	//	Счет = ПланыСчетов.Типовой.СписаннаяТараИТарныеМатериалы;
	//ИначеЕсли СтрокаДанных.СчетУчетаБУ=ПланыСчетов.Типовой.ЗапасныеЧасти Тогда
	//	Счет = ПланыСчетов.Типовой.СписанныеЗапасныеЧасти;
	//ИначеЕсли СтрокаДанных.СчетУчетаБУ=ПланыСчетов.Типовой.ПрочиеМатериалы Тогда
	//	Счет = ПланыСчетов.Типовой.СписанныеПрочиеМатериалы;
	//ИначеЕсли СтрокаДанных.СчетУчетаБУ=ПланыСчетов.Типовой.СтроительныеМатериалы Тогда
	//	Счет = ПланыСчетов.Типовой.СписанныеСтроительныеМатериалы;
	//Иначе 
	//	Счет = СтрокаДанных.СчетУчетаБУ;
	//КонецЕсли;

	
	ПроводкаБУ = Движения.Типовой.Добавить();
	ПроводкаБУ.СчетДт = Счет;
	ПроводкаБУ.Период = Дата;
	ПроводкаБУ.Организация = Организация;
	ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаБУ.СчетДт, ПроводкаБУ.СубконтоДТ, 1, СтрокаДанных.Номенклатура);
	ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаБУ.СчетДт, ПроводкаБУ.СубконтоДт, 2, Склад);
	ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаБУ.СчетДт, ПроводкаБУ.СубконтоДт, 3, ЭтотОбъект.МОЛ);
	ПроводкаБУ.КоличествоДт = СтрокаДанных.Количество;
	ПроводкаБУ.Содержание = "Списание ТМЗ"; 
	
	Движения.Типовой.Записывать = Истина;
	
КонецПроцедуры  


Процедура ОтразитьПроводкиТоварыЗабаланс(СтрокаДанных)
	
	//Движения.Типовой.Записывать = Истина;
	
	ПроводкаБУ = Движения.Типовой.Добавить();
	ПроводкаБУ.Период = Дата;
	ПроводкаБУ.СчетКт = СтрокаДанных.СчетУчетаБУ;
	ПроводкаБУ.Организация = Организация;
	ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаБУ.СчетКт, ПроводкаБУ.СубконтоКт, 1, СтрокаДанных.Номенклатура);
	ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаБУ.СчетКт, ПроводкаБУ.СубконтоКт, 2, Склад);
	ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаБУ.СчетКт, ПроводкаБУ.СубконтоКт, 3, МОЛ);
	ПроводкаБУ.КоличествоКт = СтрокаДанных.Количество;
	ПроводкаБУ.Содержание = "Списание ТМЗ с забаланса";
	
	Движения.Типовой.Записывать = Истина;
	
	//Если СтрокаДанных.СчетУчетаБУ = ПланыСчетов.Типовой.МатериалыВторичногоИспользованияГПР Тогда
	//	Движение = Движения.ДвижениеМатериаловВторичногоИспользованияГПР.ДобавитьРасход();
	//	Движение.Период = Дата;
	//	Движение.Организация = Организация;
	//	Движение.Номенклатура = СтрокаДанных.Номенклатура;
	//	Движение.Склады = Склад;
	//	Движение.МОЛ = МОЛ;
	//	Движение.БлокиГПР = СтрокаДанных.БлокГПР;
	//	Движение.Количество = СтрокаДанных.Количество;
	//	
	//	Движения.ДвижениеМатериаловВторичногоИспользованияГПР.Записывать = Истина;
	//КонецЕсли;
	
	Если СтрокаДанных.ОприходоватьНаЗабалансовыйСчет Тогда
		ПроводкаБУ = Движения.Типовой.Добавить();
		ПроводкаБУ.СчетДт = ПланыСчетов.Типовой.СписанныеПрочиеМатериалы;
		ПроводкаБУ.Период = Дата;
		ПроводкаБУ.Организация = Организация;
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаБУ.СчетДт, ПроводкаБУ.СубконтоДТ, 1, СтрокаДанных.Номенклатура);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаБУ.СчетДт, ПроводкаБУ.СубконтоДт, 2, Склад);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаБУ.СчетДт, ПроводкаБУ.СубконтоДт, 3, ЭтотОбъект.МОЛ);
		ПроводкаБУ.КоличествоДт = СтрокаДанных.Количество;
		ПроводкаБУ.Содержание = "Списание ТМЗ с забаланса"; 
		
		Движения.Типовой.Записывать = Истина;
	КонецЕсли; 
	
КонецПроцедуры

#КонецЕсли

