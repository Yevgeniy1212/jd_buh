
&НаКлиенте
Процедура ОК(Команда)
		
	ПеренестиВДокумент = Истина;
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	Модифицированность = Ложь;
	ПеренестиВДокумент = Ложь;
	Закрыть();

КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗаполнитьЗначенияСвойств(ЭтаФорма, Параметры,,"ЗакрыватьПриВыборе,ЗакрыватьПриЗакрытииВладельца");
	
	
	Элементы.ГруппаОтнесениеЗатратПоНДСБУ.Видимость = ЭтаФорма.ПоказыватьВДокументахСчетаУчета;
	Элементы.ГруппаОтнесениеЗатратПоНДСНУ.Видимость = ЭтаФорма.ВидимостьНалоговогоУчета И ЭтаФорма.ПоказыватьВДокументахСчетаУчета;

	ПоляФормы		= Новый Структура("Субконто1, Субконто2, Субконто3",
				"СубконтоЗатратНДСБУ1", "СубконтоЗатратНДСБУ2", "СубконтоЗатратНДСБУ3");
			
	ЗаголовкиПолей	= Новый Структура("Субконто1, Субконто2, Субконто3",
				"ЗаголовокСубконтоЗатратНДСБУ1", "ЗаголовокСубконтоЗатратНДСБУ2", "ЗаголовокСубконтоЗатратНДСБУ3");
			
	УстановитьЗаголовкиИДоступностьСубконто(СчетЗатратНДСБУ, ПоляФормы, ЗаголовкиПолей, СчетЗатратНДСНУ);
	
	СтруктураПараметров = ИзменяемыеРеквизиты(Параметры);
	МассивЭлементов = Новый Массив();
	
	Для Каждого ЭлементСтруктуры из СтруктураПараметров Цикл
		МассивЭлементов.Добавить(ЭлементСтруктуры.Ключ);
	КонецЦикла;

	Если ТолькоПросмотр Тогда 	
				
		ОбщегоНазначенияБККлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "ТолькоПросмотр", Истина);
		
	КонецЕсли;  

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ИзменяемыеРеквизиты(Источник)
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("СчетЗатратНДСБУ",                Источник.СчетЗатратНДСБУ);
	СтруктураПараметров.Вставить("СчетЗатратНДСНУ",                Источник.СчетЗатратНДСНУ);
	
	СтруктураПараметров.Вставить("СубконтоЗатратНДСБУ1",      	   Источник.СубконтоЗатратНДСБУ1);
	СтруктураПараметров.Вставить("СубконтоЗатратНДСБУ2",      	   Источник.СубконтоЗатратНДСБУ2);
	СтруктураПараметров.Вставить("СубконтоЗатратНДСБУ3",      	   Источник.СубконтоЗатратНДСБУ3);
	СтруктураПараметров.Вставить("СубконтоЗатратНДСНУ1",           Источник.СубконтоЗатратНДСНУ1);
	СтруктураПараметров.Вставить("СубконтоЗатратНДСНУ2",           Источник.СубконтоЗатратНДСНУ2);
	СтруктураПараметров.Вставить("СубконтоЗатратНДСНУ3",           Источник.СубконтоЗатратНДСНУ3);
	СтруктураПараметров.Вставить("КорректироватьНДС",              Источник.КорректироватьНДС);
			
	Возврат СтруктураПараметров;
	
КонецФункции

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	ПользовательУправляетСчетамиУчета = СчетаУчетаВДокументахВызовСервераПовтИсп.ПользовательУправляетСчетамиУчета();
	
	Если  КорректироватьНДС и ПользовательУправляетСчетамиУчета и НЕ(ЗначениеЗаполнено(СчетЗатратНДСБУ) и ЗначениеЗаполнено(СчетЗатратНДСНУ)) Тогда 
		ТекстСообщения = ?(ЗначениеЗаполнено(СчетЗатратНДСБУ),НСтр(""),НСтр("ru = 'Не заполнен счет затрат НДС (БУ). '"))+?(ЗначениеЗаполнено(СчетЗатратНДСНУ)И ЭтаФорма.УчитыватьНДС,НСтр(""),НСтр("ru = 'Не заполнен счет затрат НДС (НУ).'"));
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , , "Объект");
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если ЗавершениеРаботы И Модифицированность Тогда
		Отказ = Истина;
		Возврат;
	ИначеЕсли  Модифицированность И НЕ ПеренестиВДокумент Тогда
		Отказ = Истина;
		ТекстВопроса = НСтр("ru = 'Данные были изменены. Сохранить изменения?'");
		Оповещение = Новый ОписаниеОповещения("ВопросПередЗакрытиемФормыЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена, , КодВозвратаДиалога.Да);
	КонецЕсли;
	
	Если Отказ Тогда
		ПеренестиВДокумент = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВопросПередЗакрытиемФормыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ПеренестиВДокумент = Истина;
		Закрыть();
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		Модифицированность = Ложь;
		ПеренестиВДокумент = Ложь;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ПеренестиВДокумент И Модифицированность Тогда
		СтруктураРезультат = Новый Структура("
			|СчетЗатратНДСБУ, СчетЗатратНДСНУ,
			|СубконтоЗатратНДСБУ1,
			|СубконтоЗатратНДСБУ2,
			|СубконтоЗатратНДСБУ3,
			|СубконтоЗатратНДСНУ1,
			|СубконтоЗатратНДСНУ2,
			|СубконтоЗатратНДСНУ3,
			|КорректироватьНДС");
		
		ЗаполнитьЗначенияСвойств(СтруктураРезультат, ЭтаФорма);
		
		ОповеститьОВыборе(СтруктураРезультат);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СчетЗатратНДСБУПриИзменении(Элемент)
		
	 УстановитьСвязьПоТипуСубконтозатранНДСБУ(СчетЗатратНДСБУ)     ;
		
	СчетЗатратНДСНУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СчетЗатратНДСБУ));
	
	ПоляФормы		= Новый Структура("Субконто1, Субконто2, Субконто3",
		"СубконтоЗатратНДСНУ1", "СубконтоЗатратНДСНУ2", "СубконтоЗатратНДСНУ3");
	
	ЗаголовкиПолей	= Новый Структура("Субконто1, Субконто2, Субконто3",
		"ЗаголовокСубконтоЗатратНДСНУ1", "ЗаголовокСубконтоЗатратНДСНУ2", "ЗаголовокСубконтоЗатратНДСНУ3"); 

	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриИзмененииСчета(СчетЗатратНДСНУ, ЭтотОбъект, ПоляФормы);

	ПоляФормы		= Новый Структура("Субконто1, Субконто2, Субконто3",
		"СубконтоЗатратНДСБУ1", "СубконтоЗатратНДСБУ2", "СубконтоЗатратНДСБУ3");
	
	ЗаголовкиПолей	= Новый Структура("Субконто1, Субконто2, Субконто3",
		"ЗаголовокСубконтоЗатратНДСБУ1", "ЗаголовокСубконтоЗатратНДСБУ2", "ЗаголовокСубконтоЗатратНДСБУ3"); 
	
	УстановитьЗаголовкиИДоступностьСубконто(СчетЗатратНДСБУ, ПоляФормы, ЗаголовкиПолей, СчетЗатратНДСНУ);
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ЗатратНДСБУ", "СчетЗатратНДСБУ");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ЗатратНДСНУ", "СчетЗатратНДСНУ");
	
	ДанныеОбъекта = Новый Структура("Организация, СубконтоЗатратНДСБУ1, СубконтоЗатратНДСБУ2, СубконтоЗатратНДСБУ3,
									|СубконтоЗатратНДСНУ1, СубконтоЗатратНДСНУ2, СубконтоЗатратНДСНУ3");
			
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, ЭтотОбъект);
		
	СчетЗатратБУПриИзмененииНаСервере(ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеОбъекта);

КонецПроцедуры

&НаКлиенте
Процедура СчетЗатратНДСНУПриИзменении(Элемент)
	
	ПоляФормы		= Новый Структура("Субконто1, Субконто2, Субконто3",
		"СубконтоЗатратНДСНУ1", "СубконтоЗатратНДСНУ2", "СубконтоЗатратНДСНУ3");
	
	ЗаголовкиПолей	= Новый Структура("Субконто1, Субконто2, Субконто3",
		"ЗаголовокСубконтоЗатратНДСНУ1", "ЗаголовокСубконтоЗатратНДСНУ2", "ЗаголовокСубконтоЗатратНДСНУ3"); 
		
	УстановитьЗаголовкиИДоступностьСубконто(СчетЗатратНДСНУ, ПоляФормы, ЗаголовкиПолей);
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ЗатратНДСНУ", "СчетЗатратНДСНУ");
	
	ДанныеОбъекта = Новый Структура("Организация, СубконтоЗатратНДСНУ1, СубконтоЗатратНДСНУ2, СубконтоЗатратНДСНУ3");
			
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта,ЭтотОбъект);
		
	СчетЗатратНУПриИзмененииНаСервере(ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеОбъекта);

КонецПроцедуры

&НаКлиенте
Процедура СубконтоЗатратНДСБУ1ПриИзменении(Элемент)
	
	ОбщегоНазначенияБККлиентСервер.ЗаменитьСубконтоНУ(ЭтотОбъект, СчетЗатратНДСБУ, СчетЗатратНДСНУ, 1, СубконтоЗатратНДСБУ1, "СубконтоЗатратНДСНУ");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ЗатратНДСБУ", "СчетЗатратНДСБУ");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ЗатратНДСНУ", "СчетЗатратНДСНУ", , Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоЗатратНДСБУ2ПриИзменении(Элемент)
	
	ОбщегоНазначенияБККлиентСервер.ЗаменитьСубконтоНУ(ЭтотОбъект, СчетЗатратНДСБУ, СчетЗатратНДСНУ, 2, СубконтоЗатратНДСБУ2, "СубконтоЗатратНДСНУ");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ЗатратНДСБУ", "СчетЗатратНДСБУ");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ЗатратНДСНУ", "СчетЗатратНДСНУ", , Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоЗатратНДСБУ3ПриИзменении(Элемент)

	ОбщегоНазначенияБККлиентСервер.ЗаменитьСубконтоНУ(ЭтотОбъект, СчетЗатратНДСБУ, СчетЗатратНДСНУ, 3, СубконтоЗатратНДСБУ3, "СубконтоЗатратНДСНУ");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ЗатратНДСБУ", "СчетЗатратНДСБУ");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ЗатратНДСНУ", "СчетЗатратНДСНУ", , Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоЗатратНДСБУ1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СубконтоНачалоВыбора(Элемент, "СубконтоЗатратНДСБУ", 1, "СчетЗатратНДСБУ", ЭтотОбъект, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоЗатратНДСБУ2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СубконтоНачалоВыбора(Элемент, "СубконтоЗатратНДСБУ", 2, "СчетЗатратНДСБУ", ЭтотОбъект, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоЗатратНДСБУ3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СубконтоНачалоВыбора(Элемент, "СубконтоЗатратНДСБУ", 3, "СчетЗатратНДСБУ", ЭтотОбъект, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоЗатратНДСНУПриИзменении(Элемент)
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ЗатратНДСНУ", "СчетЗатратНДСНУ");
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоЗатратНДСНУ1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СубконтоНачалоВыбора(Элемент, "СубконтоЗатратНДСНУ", 1, "СчетЗатратНДСНУ", ЭтотОбъект, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоЗатратНДСНУ2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СубконтоНачалоВыбора(Элемент, "СубконтоЗатратНДСНУ", 2, "СчетЗатратНДСНУ", ЭтотОбъект, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоЗатратНДСНУ3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СубконтоНачалоВыбора(Элемент, "СубконтоЗатратНДСНУ", 3, "СчетЗатратНДСНУ", ЭтотОбъект, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоНачалоВыбора(Элемент, ИмяЭлементаСубконто, ИндексСубконто, ИмяЭлементаСчета, СтрокаТаблицы, СтандартнаяОбработка)	
	
	ПараметрыДокумента = СписокПараметровВыбораСубконто(ЭтотОбъект, СтрокаТаблицы, ИмяЭлементаСубконто + "%Индекс%", ИмяЭлементаСчета);
	ПроцедурыБухгалтерскогоУчетаКлиент.НачалоВыбораЗначенияСубконто(ЭтаФорма, Элемент, ИндексСубконто, СтандартнаяОбработка, ПараметрыДокумента);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СписокПараметровВыбораСубконто(ДанныеОбъекта, ПараметрыОбъекта, ШаблонИмяПоляОбъекта, ИмяСчета)
	
	СписокПараметров = Новый Структура;
	Для Индекс = 1 По 3 Цикл
		ИмяПоля = СтрЗаменить(ШаблонИмяПоляОбъекта, "%Индекс%", Индекс);
		Если ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Контрагенты") Тогда
			СписокПараметров.Вставить("Контрагент", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			СписокПараметров.Вставить("ДоговорКонтрагента", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Номенклатура") Тогда
			СписокПараметров.Вставить("Номенклатура", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Склады") Тогда
			СписокПараметров.Вставить("Склад", ПараметрыОбъекта[ИмяПоля]);
		КонецЕсли;
	КонецЦикла;
	СписокПараметров.Вставить("СчетУчета", 				  ПараметрыОбъекта[ИмяСчета]);	
	СписокПараметров.Вставить("Организация", 			  ДанныеОбъекта.Организация);
	СписокПараметров.Вставить("СтруктурноеПодразделение", ДанныеОбъекта.СтруктурноеПодразделение);
	СписокПараметров.Вставить("ВыбиратьПодразделенияОрганизации", Истина);

	Возврат СписокПараметров; 

КонецФункции

&НаСервереБезКонтекста
Процедура СчетЗатратБУПриИзмененииНаСервере(ДанныеОбъекта)
	
	ПроцедурыБухгалтерскогоУчета.ПроверитьВладельцаСубконтоПодразделение(ДанныеОбъекта, 
	                                        ДанныеОбъекта.Организация, 
	                                        Новый Структура("НазваниеСубконтоБУ1, НазваниеСубконтоБУ2, НазваниеСубконтоБУ3, 
	                                                        |СубконтоБУ1, СубконтоБУ2, СубконтоБУ3",
	                                                        "СубконтоЗатратНДСБУ1", "СубконтоЗатратНДСБУ2", "СубконтоЗатратНДСБУ3", 
	                                                        ДанныеОбъекта.СубконтоЗатратНДСБУ1, ДанныеОбъекта.СубконтоЗатратНДСБУ2, ДанныеОбъекта.СубконтоЗатратНДСБУ3));
															
	ПроцедурыБухгалтерскогоУчета.ПроверитьВладельцаСубконтоПодразделение(ДанныеОбъекта, 
	                                        ДанныеОбъекта.Организация, 
	                                        Новый Структура("НазваниеСубконтоБУ1, НазваниеСубконтоБУ2, НазваниеСубконтоБУ3, 
	                                                        |СубконтоБУ1, СубконтоБУ2, СубконтоБУ3",
	                                                        "СубконтоЗатратНДСНУ1", "СубконтоЗатратНДСНУ2", "СубконтоЗатратНДСНУ3", 
	                                                        ДанныеОбъекта.СубконтоЗатратНДСНУ1, ДанныеОбъекта.СубконтоЗатратНДСНУ2, ДанныеОбъекта.СубконтоЗатратНДСНУ3));
															
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СчетЗатратНУПриИзмененииНаСервере(ДанныеОбъекта)
	
	ПроцедурыБухгалтерскогоУчета.ПроверитьВладельцаСубконтоПодразделение(ДанныеОбъекта, 
	                                        ДанныеОбъекта.Организация, 
	                                        Новый Структура("НазваниеСубконтоБУ1, НазваниеСубконтоБУ2, НазваниеСубконтоБУ3, 
	                                                        |СубконтоБУ1, СубконтоБУ2, СубконтоБУ3",
	                                                        "СубконтоЗатратНДСНУ1", "СубконтоЗатратНДСНУ2", "СубконтоЗатратНДСНУ3", 
	                                                        ДанныеОбъекта.СубконтоЗатратНДСНУ1, ДанныеОбъекта.СубконтоЗатратНДСНУ2, ДанныеОбъекта.СубконтоЗатратНДСНУ3));

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьПараметрыВыбораПолейСубконто(Форма, Суффикс, ИмяСчета, ИмяТабличнойЧасти = "", ЗаменаСубконтоНУ = Ложь)
	
	Если ИмяТабличнойЧасти = "" Тогда
		
		ПараметрыДокумента = СписокПараметровВыбораСубконто(Форма, Форма, "Субконто" + Суффикс + "%Индекс%", ИмяСчета);
		ПроцедурыБухгалтерскогоУчетаКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(Форма, Форма, "Субконто" + Суффикс + "%Индекс%", "Субконто" + Суффикс + "%Индекс%", ПараметрыДокумента, ЗаменаСубконтоНУ);	
		
	Иначе
		
		Если Форма.Элементы[ИмяТабличнойЧасти].ТекущаяСтрока <> Неопределено Тогда
			СтрокаТаблицы = Форма.Объект[ИмяТабличнойЧасти].НайтиПоИдентификатору(Форма.Элементы[ИмяТабличнойЧасти].ТекущаяСтрока);
					
			ПараметрыДокумента = СписокПараметровВыбораСубконто(Форма, СтрокаТаблицы, "Субконто" + Суффикс + "%Индекс%", ИмяСчета);
			ПроцедурыБухгалтерскогоУчетаКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(Форма, СтрокаТаблицы, "Субконто" + Суффикс + "%Индекс%", ИмяТабличнойЧасти + "Субконто" + Суффикс + "%Индекс%", ПараметрыДокумента, ЗаменаСубконтоНУ);	
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовкиИДоступностьСубконто(СчетУчета, ПоляФормы, ЗаголовкиПолей, СчетУчетаНУ = Неопределено, ЭтоТаблица = Ложь)

	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриВыбореСчета(СчетУчета, ЭтаФорма, ПоляФормы, ЗаголовкиПолей);
	
	Если НЕ СчетУчетаНУ = Неопределено Тогда
		
		Для Каждого ПолеФормы Из ПоляФормы Цикл
			
			ПоляФормы.Вставить(ПолеФормы.Ключ, СтрЗаменить(ПолеФормы.Значение, "БУ", "НУ"));
			
		КонецЦикла;
		
		Для Каждого ЗаголовоеПоля Из ЗаголовкиПолей Цикл
			
			ЗаголовкиПолей.Вставить(ЗаголовоеПоля.Ключ, СтрЗаменить(ЗаголовоеПоля.Значение, "БУ", "НУ"));
			
		КонецЦикла;
		
		ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриВыбореСчета(СчетУчетаНУ, ЭтаФорма, ПоляФормы, ЗаголовкиПолей);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КорректироватьНДСПриИзменении(Элемент)
	
	Если КорректироватьНДС Тогда
	
		ПричиныИзмененияСчетовУчета = Новый Массив;
		ПричиныИзмененияСчетовУчета.Добавить("КорректироватьНДС");
	    ЗаполнитьСчетаУчета(ПричиныИзмененияСчетовУчета, "КорректироватьНДС");
		
		ПоляФормы		= Новый Структура("Субконто1, Субконто2, Субконто3",
				"СубконтоЗатратНДСБУ1", "СубконтоЗатратНДСБУ2", "СубконтоЗатратНДСБУ3");
			
		ЗаголовкиПолей	= Новый Структура("Субконто1, Субконто2, Субконто3",
				"ЗаголовокСубконтоЗатратНДСБУ1", "ЗаголовокСубконтоЗатратНДСБУ2", "ЗаголовокСубконтоЗатратНДСБУ3");
			
		УстановитьЗаголовкиИДоступностьСубконто(СчетЗатратНДСБУ, ПоляФормы, ЗаголовкиПолей, СчетЗатратНДСНУ);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСчетаУчета(ПричиныИзмененияСчетовУчета, ИмяРеквизита)
	
	Если Не СчетаУчетаВДокументахКлиентСервер.МожноНачатьЗаполнениеСчетовУчета(ИмяРеквизита, ПричиныИзмененияСчетовУчета) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗаполнения = НачатьЗаполнениеСчетовУчета(ПричиныИзмененияСчетовУчета, Объект);
	ИзмененныеЗначения = СчетаУчетаВДокументах.ЗаполнитьОбъектПриИзменении(ПараметрыЗаполнения);
	
	Если ЗначениеЗаполнено(ИзмененныеЗначения)
		И СчетаУчетаВДокументахВызовСервераПовтИсп.ПользовательУправляетСчетамиУчета() Тогда
		ЗаполнитьЗначенияСвойств(ЭтаФорма,ИзмененныеЗначения);
		ПоказатьСообщениеОЗаполненииСчетовУчета();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция НачатьЗаполнениеСчетовУчета(ПричиныИзменения, Объект = Неопределено, СтрокаСписка = Неопределено, КонтейнерОбъект = Неопределено, КонтейнерСтрокаСписка = Неопределено)

	// Код этой функции сформирован автоматически с помощью СчетаУчетаВДокументах.КодФункцииНачатьЗаполнениеСчетовУчета()

	ПараметрыЗаполнения = СчетаУчетаВДокументахКлиентСервер.НовыйПараметрыЗаполнения(
		"СписаниеТоваров",
		ПричиныИзменения,
		Объект,
		СтрокаСписка,
		КонтейнерОбъект,
		КонтейнерСтрокаСписка);

	// 1. Заполняемые реквизиты
	// КорректироватьНДС
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("КорректироватьНДС") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетЗатратНДСБУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоЗатратНДСБУ1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоЗатратНДСБУ2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоЗатратНДСБУ3");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетЗатратНДСНУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоЗатратНДСНУ1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоЗатратНДСНУ2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоЗатратНДСНУ3");
	КонецЕсли;

	// СчетЗатратНДСБУ
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("СчетЗатратНДСБУ") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоЗатратНДСБУ1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоЗатратНДСБУ2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоЗатратНДСБУ3");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетЗатратНДСНУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоЗатратНДСНУ1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоЗатратНДСНУ2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоЗатратНДСНУ3");
	КонецЕсли;

	// СчетЗатратНДСНУ
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("СчетЗатратНДСНУ") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоЗатратНДСНУ1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоЗатратНДСНУ2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоЗатратНДСНУ3");
	КонецЕсли;

	// СубконтоЗатратНДСБУ1
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("СубконтоЗатратНДСБУ1") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоЗатратНДСНУ1");
	КонецЕсли;

	// СубконтоЗатратНДСБУ2
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("СубконтоЗатратНДСБУ2") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоЗатратНДСНУ2");
	КонецЕсли;

	// СубконтоЗатратНДСБУ3
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("СубконтоЗатратНДСБУ3") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоЗатратНДСНУ3");
	КонецЕсли;

	// 2. (если требуется) Передадим на сервер данные, необходимые для заполнения
	Если ПараметрыЗаполнения.Свойство("Контейнер") Тогда
		// КорректироватьНДС
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("КорректироватьНДС") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "КорректироватьНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетЗатратНДСБУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоЗатратНДСБУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоЗатратНДСБУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоЗатратНДСБУ3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетЗатратНДСНУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоЗатратНДСНУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоЗатратНДСНУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоЗатратНДСНУ3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаБУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "УчитыватьНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
		КонецЕсли;

		// СчетЗатратНДСБУ
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("СчетЗатратНДСБУ") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетЗатратНДСБУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоЗатратНДСБУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "КорректироватьНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоЗатратНДСБУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоЗатратНДСБУ3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетЗатратНДСНУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоЗатратНДСНУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоЗатратНДСНУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоЗатратНДСНУ3");
		КонецЕсли;

		// СчетЗатратНДСНУ
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("СчетЗатратНДСНУ") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетЗатратНДСНУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоЗатратНДСНУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетЗатратНДСБУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоЗатратНДСБУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "КорректироватьНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоЗатратНДСНУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоЗатратНДСБУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоЗатратНДСНУ3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоЗатратНДСБУ3");
		КонецЕсли;

		// СубконтоЗатратНДСБУ1
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("СубконтоЗатратНДСБУ1") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоЗатратНДСБУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоЗатратНДСНУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетЗатратНДСБУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетЗатратНДСНУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "КорректироватьНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
		КонецЕсли;

		// СубконтоЗатратНДСБУ2
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("СубконтоЗатратНДСБУ2") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоЗатратНДСБУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоЗатратНДСНУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетЗатратНДСБУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетЗатратНДСНУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "КорректироватьНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
		КонецЕсли;

		// СубконтоЗатратНДСБУ3
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("СубконтоЗатратНДСБУ3") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоЗатратНДСБУ3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоЗатратНДСНУ3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетЗатратНДСБУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетЗатратНДСНУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "КорректироватьНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
		КонецЕсли;

	КонецЕсли; // Нужно передавать на сервер данные заполнения
	
	Возврат ПараметрыЗаполнения;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ПоказатьСообщениеОЗаполненииСчетовУчета()
	
	ТекстСообщения = НСтр("ru = 'Счета учета изменены в соответствии со значениями по умолчанию.'");
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , "Объект");
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;

	Элементы.ГруппаНДС.Видимость = (Форма.УчитыватьНДС ИЛИ Форма.КорректироватьНДС);
	
	Элементы.ГруппаОтнесениеЗатратПоНДСНУ.Видимость = Форма.ВидимостьНалоговогоУчета;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСвязьПоТипуСубконтозатранНДСБУ(СчетЗатратНДСБУ)
	
	ДанныеСчета = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(СчетЗатратНДСБУ);
	
	Для Индекс = 1 По ДанныеСчета.КоличествоСубконто Цикл
		
		ИмяПоляОбъекта   = СтрЗаменить("СубконтоЗатратНДСБУ%Индекс%", "%Индекс%", Индекс);
		ЭтаФорма[ИмяПоляОбъекта] = СчетЗатратНДСБУ.ВидыСубконто[Индекс - 1].ВидСубконто.ТипЗначения.ПривестиЗначение(ЭтаФорма[ИмяПоляОбъекта])
		
	КонецЦикла;
	
КонецПроцедуры

