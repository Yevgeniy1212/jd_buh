#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура ЗаполнитьПоДокументуОснования(Объект, Основание) Экспорт

	Если ТипЗнч(Основание) = Тип("СправочникСсылка.СотрудникиОрганизаций") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СотрудникиОрганизаций.Ссылка КАК Сотрудник,
		|	СотрудникиОрганизаций.Физлицо,
		|	СотрудникиОрганизаций.Организация,
		|	СотрудникиОрганизаций.ТекущаяСтруктурнаяЕдиница КАК ОбособленноеПодразделениеОткуда,
		|	СотрудникиОрганизаций.ТекущееСтруктурноеПодразделение КАК СтруктурноеПодразделениеОткуда
		|ИЗ
		|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
		|ГДЕ
		|	СотрудникиОрганизаций.Ссылка = &Сотрудник";
		
		Запрос.УстановитьПараметр("Сотрудник",	Основание);
		Выборка = Запрос.Выполнить().Выбрать();
		
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(Объект);
		
		Если НЕ Выборка.Следующий() Тогда
			Возврат;
		КонецЕсли;
		
		Организация = Выборка.Организация;
		ОбособленноеПодразделениеОткуда = Выборка.ОбособленноеПодразделениеОткуда;		
		ОбособленноеПодразделениеКуда   = Выборка.ОбособленноеПодразделениеОткуда;		
		
		СтруктурноеПодразделениеОткуда = Выборка.СтруктурноеПодразделениеОткуда;		
		СтруктурноеПодразделениеКуда   = Выборка.СтруктурноеПодразделениеОткуда;		

		Запрос.УстановитьПараметр("ДатаДокумента", ОбщегоНазначения.ТекущаяДатаПользователя());
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РаботникиОрганизации.Сотрудник,
		|	РаботникиОрганизации.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
		|	РаботникиОрганизации.Должность КАК Должность,
		|	РаботникиОрганизации.ЗанимаемыхСтавок КАК ЗанимаемыхСтавок,
		|	РаботникиОрганизации.ИсчислятьОППВ
		|ИЗ
		|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(&ДатаДокумента, Сотрудник = &Сотрудник) КАК РаботникиОрганизации";
		
		НоваяСтрока = Объект.РаботникиОрганизации.Добавить();
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		Иначе
			НоваяСтрока.Сотрудник = Основание;
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Основание);
		КонецЕсли;
		
		НоваяСтрока.ДатаНачала = ОбщегоНазначения.ТекущаяДатаПользователя();
		ДобавитьНачисленияПоСтроке(Объект, НоваяСтрока);

	КонецЕсли;

КонецПроцедуры

// Добавляет строку с плановыми начислениямии работника.
//
Процедура ДобавитьНачисленияПоСтроке(Объект, РаботникСтрока) Экспорт

	ЗапросНачисления = Новый Запрос;
	ЗапросНачисления.УстановитьПараметр("Сотрудник", 		   РаботникСтрока.Сотрудник);
	ЗапросНачисления.УстановитьПараметр("ГоловнаяОрганизация", ОбщегоНазначенияБКВызовСервера.ГоловнаяОрганизацияДляУчетаЗарплаты(Объект.Организация));
	ЗапросНачисления.УстановитьПараметр("Период",  			   ?(РаботникСтрока.ДатаНачала = '00010101', НачалоДня(Объект.Дата), РаботникСтрока.ДатаНачала));
	ЗапросНачисления.УстановитьПараметр("ТекущийДокумент", 	   Объект.Ссылка);
	
	ЗапросНачисления.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Начисления.Сотрудник,
	|	Начисления.ВидРасчета КАК ВидРасчета,
	|	ВЫБОР
	|		КОГДА Начисления.ВидРасчетаИзмерение.Код ЕСТЬ NULL 
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ 
	|	КОНЕЦ КАК ОсновноеНачисление,
	|	Начисления.Размер
	|ИЗ
	|	РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций.СрезПоследних(&Период, Сотрудник = &Сотрудник И Организация = &ГоловнаяОрганизация И Регистратор <> &ТекущийДокумент) КАК Начисления
	|
	|ГДЕ
	|	Начисления.Размер <> 0
	|";

	Выборка = ЗапросНачисления.Выполнить().Выбрать();
	
	СтруктураПоиска = Новый Структура("Сотрудник, ВидРасчета, Действие");
	СтруктураПоиска.Действие   = Перечисления.ВидыДействияСНачислением.НеИзменять;
	
	Пока Выборка.Следующий() Цикл
		
		Если НЕ ЗначениеЗаполнено(Выборка.ВидРасчета) Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураПоиска.Сотрудник   = Выборка.Сотрудник;
		СтруктураПоиска.ВидРасчета 	= Выборка.ВидРасчета;
		МассивНачислений = Объект.ОсновныеНачисления.НайтиСтроки(СтруктураПоиска);
		
		Если МассивНачислений.Количество() <> 0 Тогда
			Продолжить;
		КонецЕсли; 

		НоваяСтрокаТЧ 					= Объект.ОсновныеНачисления.Добавить();
		
		НоваяСтрокаТЧ.Сотрудник 	 	= Выборка.Сотрудник;
		НоваяСтрокаТЧ.ВидРасчета 		= Выборка.ВидРасчета;
		НоваяСтрокаТЧ.Размер     		= Выборка.Размер;
		НоваяСтрокаТЧ.Действие   		= Перечисления.ВидыДействияСНачислением.НеИзменять;
		
		Если Выборка.ОсновноеНачисление И ЗначениеЗаполнено(НоваяСтрокаТЧ.ВидРасчета) 
				И Объект.ИндексацияЗаработка И Объект.КоэффициентИндексацииЗаработка > 0 Тогда
			
			Если НоваяСтрокаТЧ.ВидРасчета = Выборка.ВидРасчета Тогда
				НоваяСтрокаТЧ.Размер 	= Выборка.Размер * ?(Объект.ИндексацияЗаработка И Объект.КоэффициентИндексацииЗаработка > 0, Объект.КоэффициентИндексацииЗаработка, 1);
				НоваяСтрокаТЧ.Действие 	= Перечисления.ВидыДействияСНачислением.Изменить;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры 

////////////////////////////////////////////////////////////////////////////////
// Интерфейс для работы с подсистемой Печать.

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Приказ о переводе (на каждого сотрудника)
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "КадровоеПеремещение_ПриказНаКаждогоСотрудника";
	КомандаПечати.Представление = НСтр("ru = 'Приказ о переводе (на каждого сотрудника)'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБККлиент.ВыполнитьКомандуПечати";
	КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.Порядок = 50;
	
	// Приказ о переводе (на список сотрудников)
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "КадровоеПеремещение_ПриказНаСписокСотрудников";
	КомандаПечати.Представление = НСтр("ru = 'Приказ о переводе (на список сотрудников)'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБККлиент.ВыполнитьКомандуПечати";
	КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.Порядок = 51;
	
	// Комплект документов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "КадровоеПеремещение_ПриказНаКаждогоСотрудника,КадровоеПеремещение_ПриказНаСписокСотрудников";
	КомандаПечати.Представление = НСтр("ru = 'Комплект документов'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.ФиксированныйКомплект = Истина;
	КомандаПечати.ПереопределитьПользовательскиеНастройкиКоличества = Истина;
	КомандаПечати.Порядок = 75;
	
	// Комплект документов (на принтер)
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "КадровоеПеремещение_ПриказНаКаждогоСотрудника,КадровоеПеремещение_ПриказНаСписокСотрудников";
	КомандаПечати.Представление = НСтр("ru = 'Комплект документов (на принтер)'");
	КомандаПечати.Картинка = БиблиотекаКартинок.ПечатьСразу;
	КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.ФиксированныйКомплект = Истина;
	КомандаПечати.ПереопределитьПользовательскиеНастройкиКоличества = Истина;
	КомандаПечати.СразуНаПринтер = Истина;
	КомандаПечати.Порядок = 76;
	
	// Настраиваемый комплект документов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "КадровоеПеремещение_ПриказНаКаждогоСотрудника,КадровоеПеремещение_ПриказНаСписокСотрудников";
	КомандаПечати.Представление = НСтр("ru = 'Настраиваемый комплект документов'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.ЗаголовокФормы = НСтр("ru = 'Настраиваемый комплект'");
	КомандаПечати.ДополнитьКомплектВнешнимиПечатнымиФормами = Истина;
	КомандаПечати.Порядок = 77;
	
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "КадровоеПеремещение_ПриказНаКаждогоСотрудника") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"КадровоеПеремещение_ПриказНаКаждогоСотрудника",
			НСтр("ru = 'Приказ о переводе (на каждого сотрудника)'"),
			ПечатьПриказНаКаждогоСотрудника(МассивОбъектов, ОбъектыПечати, ПараметрыВывода.КодЯзыка),
			,
			"Документ.КадровоеПеремещениеОрганизаций.ПФ_MXL_Приказ");
		
		ОписаниеПечатнойФормы = КоллекцияПечатныхФорм.Найти(ВРег("КадровоеПеремещение_ПриказНаКаждогоСотрудника"), "ИмяВРЕГ");
		Если ОписаниеПечатнойФормы <> Неопределено Тогда
			ОписаниеПечатнойФормы.ДоступенВыводНаДругихЯзыках = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "КадровоеПеремещение_ПриказНаСписокСотрудников") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"КадровоеПеремещение_ПриказНаСписокСотрудников",
			НСтр("ru = 'Приказ о переводе (на список сотрудников)'"),
			ПечатьПриказНаСписокСотрудников(МассивОбъектов, ОбъектыПечати, ПараметрыВывода.КодЯзыка),
			,
			"Документ.КадровоеПеремещениеОрганизаций.ПФ_MXL_ПриказСписком");
		
		ОписаниеПечатнойФормы = КоллекцияПечатныхФорм.Найти(ВРег("КадровоеПеремещение_ПриказНаСписокСотрудников"), "ИмяВРЕГ");
		Если ОписаниеПечатнойФормы <> Неопределено Тогда
			ОписаниеПечатнойФормы.ДоступенВыводНаДругихЯзыках = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Подготовка табличных печатных документов.

// Функция формирует табличный документ с печатной формой "ПриказНаРаботника"
//
Функция ПечатьПриказНаКаждогоСотрудника(МассивОбъектов, ОбъектыПечати, КодЯзыка = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.КлючПараметровПечати = "КадровоеПеремещениеОрганизации_Т5";
	
	// получаем данные для печати
	Результат = СформироватьЗапросДляПечати(МассивОбъектов);
	
	// запоминаем области макета
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.КадровоеПеремещениеОрганизаций.ПФ_MXL_Приказ", КодЯзыка);
	
	ОбластьМакетаШапка 			= Макет.ПолучитьОбласть("Шапка"); // Шапка документа
	ОбластьМакетаРаботникНачало = Макет.ПолучитьОбласть("РаботникНачало"); // начало строки работника
	ОбластьМакетаНадбавка 		= Макет.ПолучитьОбласть("Надбавка"); // строка надбавки
	ОбластьМакетаРаботникКонец 	= Макет.ПолучитьОбласть("РаботникКонец"); // конец строки работника
	ОбластьМакетаПодвал 		= Макет.ПолучитьОбласть("Подвал"); // Подвал документа
	
	// выводим данные о руководителях организации
	ВыборкаДляШапки = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Ссылка");
	
	Пока ВыборкаДляШапки.Следующий() Цикл
		
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
		
		ОбластьМакетаШапка.Параметры.Заполнить(ВыборкаДляШапки); // Шапка документа.
		ОбластьМакетаПодвал.Параметры.Заполнить(ВыборкаДляШапки); // Для подвала.
		
		СтруктурнаяЕдиницаОрганизация = ОбщегоНазначенияБК.ПолучитьСтруктурнуюЕдиницу(ВыборкаДляШапки.Организация, ВыборкаДляШапки.СтруктурноеПодразделение, Истина);
		ОбластьМакетаШапка.Параметры.НазваниеОрганизации    = СтруктурнаяЕдиницаОрганизация.НаименованиеПолное;
		Руководители = ОбщегоНазначенияБКВызовСервера.ОтветственныеЛицаОрганизаций(СтруктурнаяЕдиницаОрганизация, ВыборкаДляШапки.ДатаДок);
		ОбластьМакетаПодвал.Параметры.ФИОРуководителя       = Руководители.Руководитель;
		ОбластьМакетаПодвал.Параметры.ДолжностьРуководителя = Руководители.РуководительДолжность;
		
		ОбластьМакетаШапка.Параметры.НазваниеОрганизации = ВыборкаДляШапки.НазваниеОрганизации.НаименованиеПолное;
		
		НомерДокДляПечати = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ВыборкаДляШапки.НомерДок, ВыборкаДляШапки.Ссылка);
		ОбластьМакетаШапка.Параметры.НомерДок = НомерДокДляПечати;
		
		ВыборкаРаботники = ВыборкаДляШапки.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Сотрудник");
		
		// Начинаем формировать выходной документ
		Пока ВыборкаРаботники.Следующий() Цикл
			
			ВложеннаяВыборка = ВыборкаРаботники.Выбрать(); 
			НомерШага = 0;
			Пока ВложеннаяВыборка.Следующий() Цикл
				
				НомерШага = НомерШага + 1;
				
				Если НомерШага = 1 Тогда
					
					// Каждый приказ на отдельной странице.
					Если ТабДокумент.ВысотаТаблицы > 0 Тогда
						ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
					КонецЕсли;
					
					// Шапка документа.
					Если ВыборкаРаботники.Количество() > 1 Тогда
						ОбластьМакетаШапка.Параметры.НомерДок = НомерДокДляПечати + "/" + ВложеннаяВыборка.НомерСтроки
					КонецЕсли; 
					ТабДокумент.Вывести(ОбластьМакетаШапка);
					
					// Данные по работнику.
					ОбластьМакетаРаботникНачало.Параметры.Заполнить(ВложеннаяВыборка);
					
					// Данные по работнику.
					ОбластьМакетаРаботникНачало.Параметры.Заполнить(ВложеннаяВыборка);
					
					ОбластьМакетаРаботникНачало.Параметры.ВидПеревода = НСтр("ru = 'постоянно'", КодЯзыка);
					
					ОбластьМакетаРаботникНачало.Параметры.ОкладЦелаяЧасть = Цел(ВложеннаяВыборка.ОкладТарифнаяСтавка);
					
					ДробнаяЧасть = ВложеннаяВыборка.ОкладТарифнаяСтавка - Цел(ВложеннаяВыборка.ОкладТарифнаяСтавка);
					ОбластьМакетаРаботникНачало.Параметры.ОкладДробнаяЧасть = ?(ДробнаяЧасть = 0, "00", ДробнаяЧасть*100); 
					
					ТабДокумент.Вывести(ОбластьМакетаРаботникНачало);
				КонецЕсли;
				
				ОбластьМакетаНадбавка.Параметры.ВидНадбавкиНаименование = НРег(ВложеннаяВыборка.ВидНадбавкиНаименование);
				ОбластьМакетаНадбавка.Параметры.НадбавкаЦелаяЧасть   = "";
				ОбластьМакетаНадбавка.Параметры.НадбавкаДробнаяЧасть = "";
				
				Если ЗначениеЗаполнено(ВложеннаяВыборка.РазмерНадбавки) Тогда
					
					Если ВложеннаяВыборка.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.Процентом Тогда
						
						ОбластьМакетаНадбавка.Параметры.НадбавкаЦелаяЧасть = "" + ВложеннаяВыборка.РазмерНадбавки + "%"
						
					ИначеЕсли ВложеннаяВыборка.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячномуРасчетномуПоказателю
						ИЛИ ВложеннаяВыборка.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячномуРасчетномуПоказателюПоДням
						ИЛИ ВложеннаяВыборка.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячномуРасчетномуПоказателюПоЧасам Тогда
						
						ОбластьМакетаНадбавка.Параметры.НадбавкаЦелаяЧасть = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 МРП'", КодЯзыка), ВложеннаяВыборка.РазмерНадбавки);
						
					ИначеЕсли ВложеннаяВыборка.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМинимальнойЗаработнойПлате
						ИЛИ ВложеннаяВыборка.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМинимальнойЗаработнойПлатеПоДням
						ИЛИ ВложеннаяВыборка.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМинимальнойЗаработнойПлатеПоЧасам Тогда
						
						ОбластьМакетаНадбавка.Параметры.НадбавкаЦелаяЧасть = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 МЗП'", КодЯзыка), ВложеннаяВыборка.РазмерНадбавки);
						
					Иначе
						
						ОбластьМакетаНадбавка.Параметры.НадбавкаЦелаяЧасть = "" + Цел(ВложеннаяВыборка.РазмерНадбавки);
						
						ДробнаяЧасть = ВложеннаяВыборка.РазмерНадбавки - Цел(ВложеннаяВыборка.РазмерНадбавки);
						ОбластьМакетаНадбавка.Параметры.НадбавкаДробнаяЧасть = ?(ДробнаяЧасть = 0, "00", ДробнаяЧасть*100); 
						
					КонецЕсли;	
					
					ТабДокумент.Вывести(ОбластьМакетаНадбавка);
					
				КонецЕсли;
				
			КонецЦикла;
			
			ТабДокумент.Вывести(ОбластьМакетаРаботникКонец);
			
			// Подвал документа.
			ТабДокумент.Вывести(ОбластьМакетаПодвал);
			
		КонецЦикла;
		
		// если не было ни одного работника - выводим пустой бланк
		Если ТабДокумент.ВысотаТаблицы = 0 Тогда
			ТабДокумент.Вывести(ОбластьМакетаШапка);
			ТабДокумент.Вывести(ОбластьМакетаРаботникНачало);
			ТабДокумент.Вывести(ОбластьМакетаНадбавка);
			ТабДокумент.Вывести(ОбластьМакетаРаботникКонец);
			ТабДокумент.Вывести(ОбластьМакетаПодвал);
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;   
			
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, НомерСтрокиНачало, ОбъектыПечати, ВыборкаДляШапки.Ссылка);
		
	КонецЦикла;
	
	Возврат ТабДокумент;

КонецФункции 

// Функция формирует табличный документ с печатной формой "ПриказНаРаботников".
//
Функция ПечатьПриказНаСписокСотрудников(МассивОбъектов, ОбъектыПечати, КодЯзыка = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабДокумент = Новый ТабличныйДокумент;
	
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабДокумент.ПолеСлева = 0;
	ТабДокумент.ПолеСправа = 0;
	
	ТабДокумент.КлючПараметровПечати = "КадровоеПеремещениеОрганизации_Т5а";
	
	// получаем данные для печати
	Результат = СформироватьЗапросДляПечати(МассивОбъектов);
	
	// запоминаем области макета
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.КадровоеПеремещениеОрганизаций.ПФ_MXL_ПриказСписком", КодЯзыка);
	
	ОбластьМакетаШапка 		 = Макет.ПолучитьОбласть("Шапка"); // Шапка документа.
	ПовторятьПриПечатиСтроки = Макет.ПолучитьОбласть("ПовторятьПриПечати"); // повторяющаяся шапка страницы
	ОбластьМакетаПодвал 	 = Макет.ПолучитьОбласть("Подвал");// Подвал документа
	ОбластьМакета 			 = Макет.ПолучитьОбласть("СтрокаРаботник"); // строка работника
	
	ВыборкаДляШапки = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Ссылка");
	
	Пока ВыборкаДляШапки.Следующий() Цикл
		
		Если ТабДокумент.ВысотаТаблицы > 0 Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
		
		// массив с двумя строками - для разбиения на страницы
		ВыводимыеОбласти = Новый Массив();
		ВыводимыеОбласти.Добавить(ОбластьМакета);
		
		// выводим данные о руководителях организации
		ОбластьМакетаШапка.Параметры.Заполнить(ВыборкаДляШапки); // Шапка документа.
		ОбластьМакетаПодвал.Параметры.Заполнить(ВыборкаДляШапки); // Для подвала.
		
		СтруктурнаяЕдиницаОрганизация = ОбщегоНазначенияБК.ПолучитьСтруктурнуюЕдиницу(?(ВыборкаДляШапки.ОбособленноеПодразделение = Справочники.Организации.ПустаяСсылка(), ВыборкаДляШапки.НазваниеОрганизации,ВыборкаДляШапки.ОбособленноеПодразделение), ВыборкаДляШапки.СтруктурноеПодразделение, Истина);
		ОбластьМакетаШапка.Параметры.НазваниеОрганизации    = СтруктурнаяЕдиницаОрганизация.НаименованиеПолное;
		Руководители = ОбщегоНазначенияБКВызовСервера.ОтветственныеЛицаОрганизаций(СтруктурнаяЕдиницаОрганизация,ВыборкаДляШапки.ДатаДок);
		ОбластьМакетаПодвал.Параметры.ФИОРуководителя       = Руководители.Руководитель;
		ОбластьМакетаПодвал.Параметры.ДолжностьРуководителя = Руководители.РуководительДолжность;
		
		НомерДокДляПечати =	ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ВыборкаДляШапки.НомерДок, ВыборкаДляШапки.Ссылка);
 
		ОбластьМакетаШапка.Параметры.НомерДок = НомерДокДляПечати;
		
		// Начинаем формировать выходной документ
		ВыборкаРаботники = ВыборкаДляШапки.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Сотрудник");
		
		// Начинаем формировать выходной документ
		ТабДокумент.Вывести(ОбластьМакетаШапка); // Шапка документа.
		
		// подсчитываем количество страниц документа - для корректного разбиения на страницы
		ВсегоСтрокДокумента = ВыборкаРаботники.Количество();
		
		ВыведеноСтрок = 0;
		// выводим строки по работникам
		Пока ВыборкаРаботники.Следующий() Цикл
			
			ВложеннаяВыборка = ВыборкаРаботники.Выбрать(); 
			ВложеннаяВыборка.Следующий();
			
			// Данные по работнику.
			ОбластьМакета.Параметры.Заполнить(ВложеннаяВыборка); 
			
			ОкладВПечатнойФорме = Строка(ВложеннаяВыборка.ОкладТарифнаяСтавка);
			
			ВложеннаяВыборка.Сбросить();
			
			Пока ВложеннаяВыборка.Следующий() Цикл  
				Если ЗначениеЗаполнено(ВложеннаяВыборка.ВидНадбавкиНаименование) Тогда
					ОкладВПечатнойФорме = ОкладВПечатнойФорме + ", " + НРег(ВложеннаяВыборка.ВидНадбавкиНаименование);
					Если ЗначениеЗаполнено(ВложеннаяВыборка.РазмерНадбавки) Тогда
						Если ВложеннаяВыборка.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.Процентом Тогда
							ОкладВПечатнойФорме = ОкладВПечатнойФорме + ": " + Строка(ВложеннаяВыборка.РазмерНадбавки) + "%";
						ИначеЕсли ВложеннаяВыборка.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячномуРасчетномуПоказателю
							ИЛИ ВложеннаяВыборка.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячномуРасчетномуПоказателюПоДням
							ИЛИ ВложеннаяВыборка.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячномуРасчетномуПоказателюПоЧасам Тогда
							ОкладВПечатнойФорме = ОкладВПечатнойФорме + ": " + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 МРП'", КодЯзыка), Строка(ВложеннаяВыборка.РазмерНадбавки));
						ИначеЕсли ВложеннаяВыборка.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМинимальнойЗаработнойПлате
							ИЛИ ВложеннаяВыборка.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМинимальнойЗаработнойПлатеПоДням
							ИЛИ ВложеннаяВыборка.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМинимальнойЗаработнойПлатеПоЧасам Тогда
							ОкладВПечатнойФорме = ОкладВПечатнойФорме + ": " + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 МЗП'", КодЯзыка), Строка(ВложеннаяВыборка.РазмерНадбавки));
						Иначе
							ОкладВПечатнойФорме = ОкладВПечатнойФорме + ": " + Строка(ВложеннаяВыборка.РазмерНадбавки);
						КонецЕсли;	
					КонецЕсли;
				КонецЕсли;	
			КонецЦикла;  
			
			ОбластьМакета.Параметры.ОкладТарифнаяСтавка = ОкладВПечатнойФорме;
			
			// разбиение на страницы
			ВыведеноСтрок = ВыведеноСтрок + 1;
			
			// Проверим, уместится ли строка на странице или надо открывать новую страницу
			ВывестиПодвалЛиста = НЕ ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабДокумент, ВыводимыеОбласти);
			
			Если НЕ ВывестиПодвалЛиста И ВыведеноСтрок = ВсегоСтрокДокумента Тогда
				ВыводимыеОбласти.Добавить(ОбластьМакетаПодвал);
				ВывестиПодвалЛиста = НЕ ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабДокумент, ВыводимыеОбласти);
			КонецЕсли;
			Если ВывестиПодвалЛиста Тогда
				ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ТабДокумент.Вывести(ПовторятьПриПечатиСтроки);
			КонецЕсли;
			
			ТабДокумент.Вывести(ОбластьМакета);
			
		КонецЦикла;
		
		// если не было ни одного работника - выводим пустой бланк
		Если ТабДокумент.ВысотаТаблицы = ОбластьМакетаШапка.ВысотаТаблицы Тогда 
			СчПечати = 0;
			ВыводимыеОбласти.Добавить(ОбластьМакетаПодвал);
			ОбластьМакета.Параметры.Работник = " " + Символы.ПС + " ";
			Пока ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабДокумент, ВыводимыеОбласти) Цикл
				СчПечати = СчПечати + 1;
				Если СчПечати > 15 Тогда 
					Прервать;
				КонецЕсли;			
				ТабДокумент.Вывести(ОбластьМакета);
			КонецЦикла;
		КонецЕсли;
		
		// выводим предварительно подготовленный Подвал документа.
		ТабДокумент.Вывести(ОбластьМакетаПодвал);

		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, НомерСтрокиНачало, ОбъектыПечати, ВыборкаДляШапки.Ссылка);
		
	КонецЦикла;
	                	
	Возврат ТабДокумент;

КонецФункции 

// Формирует запрос по документу.
//
Функция СформироватьЗапросДляПечати(МассивОбъектов) Экспорт
	
	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	КадровоеПеремещениеОрганизацийРаботникиОрганизации.Ссылка.Организация,
	|	КадровоеПеремещениеОрганизацийРаботникиОрганизации.Ссылка.Дата,
	|	КадровоеПеремещениеОрганизацийРаботникиОрганизации.Ссылка,
	|	КадровоеПеремещениеОрганизацийРаботникиОрганизации.Сотрудник,
	|	КадровоеПеремещениеОрганизацийРаботникиОрганизации.ФизЛицо,
	|	КадровоеПеремещениеОрганизацийРаботникиОрганизации.НомерСтроки,
	|	КадровоеПеремещениеОрганизацийРаботникиОрганизации.Ссылка.Номер,
	|	КадровоеПеремещениеОрганизацийРаботникиОрганизации.Должность,
	|	КадровоеПеремещениеОрганизацийРаботникиОрганизации.ПодразделениеОрганизации,
	|	КадровоеПеремещениеОрганизацийРаботникиОрганизации.ДатаНачала,
	|	КадровоеПеремещениеОрганизацийРаботникиОрганизации.ИсчислятьОППВ
	|ПОМЕСТИТЬ ВТ_ДокументыКадровоеПеремещение
	|ИЗ
	|	Документ.КадровоеПеремещениеОрганизаций.РаботникиОрганизации КАК КадровоеПеремещениеОрганизацийРаботникиОрганизации
	|ГДЕ
	|	КадровоеПеремещениеОрганизацийРаботникиОрганизации.Ссылка В(&МассивОбъектов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПериодыФИОФИзЛиц.ФизЛицо,
	|	ПериодыФИОФИзЛиц.Период,
	|	ФИОФизЛиц.Фамилия,
	|	ФИОФизЛиц.Имя,
	|	ФИОФизЛиц.Отчество
	|ПОМЕСТИТЬ ВТ_ФИОФизЛиц
	|ИЗ
	|	РегистрСведений.ФИОФизЛиц КАК ФИОФизЛиц
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ФИОФизЛиц.ФизЛицо КАК ФизЛицо,
	|			МАКСИМУМ(ФИОФизЛиц.Период) КАК Период
	|		ИЗ
	|			РегистрСведений.ФИОФизЛиц КАК ФИОФизЛиц
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ДокументыКадровоеПеремещение КАК ВТ_ДокументыКадровоеПеремещение
	|				ПО ФИОФизЛиц.Период <= ВТ_ДокументыКадровоеПеремещение.Дата
	|					И ФИОФизЛиц.ФизЛицо = ВТ_ДокументыКадровоеПеремещение.ФизЛицо
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ФИОФизЛиц.ФизЛицо) КАК ПериодыФИОФИзЛиц
	|		ПО ФИОФизЛиц.Период = ПериодыФИОФИзЛиц.Период
	|			И ФИОФизЛиц.ФизЛицо = ПериодыФИОФИзЛиц.ФизЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ДокументыКадровоеПеремещение.Ссылка КАК Ссылка,
	|	ВТ_ДокументыКадровоеПеремещение.Номер КАК НомерДок,
	|	ВТ_ДокументыКадровоеПеремещение.Дата КАК ДатаДок,
	|	ВЫБОР
	|		КОГДА ВТ_ДокументыКадровоеПеремещение.Ссылка.СтруктурноеПодразделениеОткуда = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА ВТ_ДокументыКадровоеПеремещение.Ссылка.ОбособленноеПодразделениеОткуда
	|		ИНАЧЕ ВТ_ДокументыКадровоеПеремещение.Ссылка.Организация
	|	КОНЕЦ КАК НазваниеОрганизации,
	|	ВТ_ДокументыКадровоеПеремещение.Организация КАК Организация,
	|	ВТ_ДокументыКадровоеПеремещение.Ссылка.СтруктурноеПодразделениеОткуда КАК СтруктурноеПодразделение,
	|	ВТ_ДокументыКадровоеПеремещение.Ссылка.ОбособленноеПодразделениеОткуда КАК ОбособленноеПодразделение,
	|	ВТ_ДокументыКадровоеПеремещение.ДатаНачала,
	|	ВЫБОР
	|		КОГДА ВТ_ФИОФизЛиц.Фамилия ЕСТЬ NULL 
	|			ТОГДА ВТ_ДокументыКадровоеПеремещение.ФизЛицо.Наименование
	|		ИНАЧЕ ВТ_ФИОФизЛиц.Фамилия + "" "" + ВТ_ФИОФизЛиц.Имя + "" "" + ВТ_ФИОФизЛиц.Отчество
	|	КОНЕЦ КАК Работник,
	|	ВТ_ДокументыКадровоеПеремещение.НомерСтроки КАК НомерСтроки,
	|	ВТ_ДокументыКадровоеПеремещение.Должность.Наименование КАК НоваяДолжность,
	|	Работники.Должность КАК ПрежняяДолжность,
	|	ВТ_ДокументыКадровоеПеремещение.Сотрудник КАК Сотрудник,
	|	Работники.Сотрудник.Код КАК ТабельныйНомер,
	|	ЕСТЬNULL(Начисления.ОкладТарифнаяСтавка, 0) КАК ОкладТарифнаяСтавка,
	|	ЕСТЬNULL(Надбавки.ВидРасчета.Наименование, """") КАК ВидНадбавкиНаименование,
	|	ЕСТЬNULL(Надбавки.Размер, 0) КАК РазмерНадбавки,
	|	ЕСТЬNULL(Надбавки.ВидРасчета.СпособРасчета, ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПустаяСсылка)) КАК СпособРасчета,
	|	ВЫБОР
	|		КОГДА ВТ_ДокументыКадровоеПеремещение.Ссылка.СтруктурноеПодразделениеКуда = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА ВЫБОР
	|					КОГДА ВТ_ДокументыКадровоеПеремещение.Ссылка.СтруктурноеПодразделениеКуда.Наименование <> ВТ_ДокументыКадровоеПеремещение.ПодразделениеОрганизации.Наименование
	|						ТОГДА ВТ_ДокументыКадровоеПеремещение.Ссылка.СтруктурноеПодразделениеКуда.Наименование + ""/"" + ВТ_ДокументыКадровоеПеремещение.ПодразделениеОрганизации.Наименование
	|					ИНАЧЕ ВТ_ДокументыКадровоеПеремещение.Ссылка.СтруктурноеПодразделениеКуда.Наименование
	|				КОНЕЦ
	|		ИНАЧЕ ВТ_ДокументыКадровоеПеремещение.ПодразделениеОрганизации.Наименование
	|	КОНЕЦ КАК НовоеПодразделение,
	|	ВЫБОР
	|		КОГДА ВТ_ДокументыКадровоеПеремещение.Ссылка.СтруктурноеПодразделениеОткуда = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА ВЫБОР
	|					КОГДА ВТ_ДокументыКадровоеПеремещение.Ссылка.СтруктурноеПодразделениеОткуда.Наименование <> Работники.ПодразделениеОрганизацииНаименование
	|						ТОГДА ВТ_ДокументыКадровоеПеремещение.Ссылка.СтруктурноеПодразделениеОткуда.Наименование + ""/"" + Работники.ПодразделениеОрганизацииНаименование
	|					ИНАЧЕ ВТ_ДокументыКадровоеПеремещение.Ссылка.СтруктурноеПодразделениеОткуда.Наименование
	|				КОНЕЦ
	|		ИНАЧЕ Работники.ПодразделениеОрганизацииНаименование
	|	КОНЕЦ КАК ПрежнееПодразделение
	|ИЗ
	|	ВТ_ДокументыКадровоеПеремещение КАК ВТ_ДокументыКадровоеПеремещение
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ФИОФизЛиц КАК ВТ_ФИОФизЛиц
	|		ПО ВТ_ДокументыКадровоеПеремещение.ФизЛицо = ВТ_ФИОФизЛиц.ФизЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			СписокДат.Сотрудник КАК Сотрудник,
	|			РаботникиОрганизации.ПодразделениеОрганизации.Наименование КАК ПодразделениеОрганизацииНаименование,
	|			РаботникиОрганизации.Должность.Наименование КАК Должность,
	|			РаботникиОрганизации.ПодразделениеОрганизации.Наименование КАК СтруктурноеПодразделениеОрганизацииНаименование
	|		ИЗ
	|			(ВЫБРАТЬ
	|				РаботникиВнутри.Сотрудник КАК Сотрудник,
	|				МАКСИМУМ(РаботникиВнутри.Период) КАК ДатаПоследнегоИзменения
	|			ИЗ
	|				РегистрСведений.РаботникиОрганизаций КАК РаботникиВнутри
	|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КадровоеПеремещениеОрганизаций.РаботникиОрганизации КАК Док
	|					ПО РаботникиВнутри.Сотрудник = Док.Сотрудник
	|						И РаботникиВнутри.Период < Док.ДатаНачала
	|						И РаботникиВнутри.Активность
	|			ГДЕ
	|				Док.Ссылка В(&МассивОбъектов)
	|			
	|			СГРУППИРОВАТЬ ПО
	|				РаботникиВнутри.Сотрудник) КАК СписокДат
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
	|				ПО СписокДат.Сотрудник = РаботникиОрганизации.Сотрудник
	|					И СписокДат.ДатаПоследнегоИзменения = РаботникиОрганизации.Период
	|					И РаботникиОрганизации.Активность) КАК Работники
	|		ПО ВТ_ДокументыКадровоеПеремещение.Сотрудник = Работники.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ОсновныеНачисления.Сотрудник КАК Сотрудник,
	|			МАКСИМУМ(ОсновныеНачисления.Размер) КАК ОкладТарифнаяСтавка
	|		ИЗ
	|			Документ.КадровоеПеремещениеОрганизаций.ОсновныеНачисления КАК ОсновныеНачисления
	|		ГДЕ
	|			ОсновныеНачисления.Ссылка В(&МассивОбъектов)
	|			И ОсновныеНачисления.ВидРасчета.ЗачетОтработанногоВремени
	|			И ОсновныеНачисления.Действие <> ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Прекратить)
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ОсновныеНачисления.Сотрудник) КАК Начисления
	|		ПО ВТ_ДокументыКадровоеПеремещение.Сотрудник = Начисления.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КадровоеПеремещениеОрганизаций.ОсновныеНачисления КАК Надбавки
	|		ПО ВТ_ДокументыКадровоеПеремещение.Ссылка = Надбавки.Ссылка
	|			И ВТ_ДокументыКадровоеПеремещение.Сотрудник = Надбавки.Сотрудник
	|			И (НЕ Надбавки.ВидРасчета.ЗачетОтработанногоВремени)
	|			И (Надбавки.Действие <> ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Прекратить))
	|ГДЕ
	|	ВТ_ДокументыКадровоеПеремещение.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	НомерСтроки
	|ИТОГИ
	|	МАКСИМУМ(НомерДок),
	|	МАКСИМУМ(ДатаДок),
	|	МАКСИМУМ(Организация)
	|ПО
	|	Ссылка,
	|	Сотрудник";
	
	Возврат Запрос.Выполнить();
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Проведение

Функция ПодготовитьПараметрыПроведения(ДокументСсылка, Отказ) Экспорт 
	
	ПараметрыПроведения = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	НомераТаблиц = Новый Структура;
	
	Запрос.Текст = ТекстЗапросаРеквизитыДокумента(НомераТаблиц);
	Результат = Запрос.ВыполнитьПакет();
	ТаблицаРеквизиты = Результат[НомераТаблиц["Реквизиты"]].Выгрузить();
	
	ПараметрыПроведения.Вставить("Реквизиты", ТаблицаРеквизиты);
	
	Реквизиты = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ТаблицаРеквизиты[0]);
	ОрганизацияВкладчикОППВ = ПроцедурыНалоговогоУчета.ПолучитьПризнакВкладчикаПрофПенсионныхВзносов(Реквизиты.Организация, Реквизиты.Дата);
	Реквизиты.Вставить("ОрганизацияВкладчикОППВ", ОрганизацияВкладчикОППВ);
	
	Запрос.УстановитьПараметр("Организация", Реквизиты.ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("ОбособленноеПодразделение", Реквизиты.Организация);
	Запрос.УстановитьПараметр("СтруктурноеПодразделение", Реквизиты.СтруктурноеПодразделение);
	
	ПодготовитьТаблицыДокумента(Запрос, Реквизиты);
	
	НомераТаблиц = Новый Структура;
	Запрос.Текст = ТекстЗапросаРаботникиОрганизации(НомераТаблиц)
				 + ТекстЗапросаОсновныеНачисления(НомераТаблиц)
				 + ТекстЗапросаКоэффициентыИндексации(НомераТаблиц, ПараметрыПроведения, Реквизиты);

	Если НЕ ПустаяСтрока(Запрос.Текст) Тогда 
		
		Результат = Запрос.ВыполнитьПакет();
		
		Для Каждого НомерТаблицы Из НомераТаблиц Цикл
			ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат[НомерТаблицы.Значение].Выгрузить());
		КонецЦикла;
		
	КонецЕсли;
	
			
	Возврат ПараметрыПроведения;
	
КонецФункции

Функция ТекстЗапросаРеквизитыДокумента(НомераТаблиц) 
	
	НомераТаблиц.Вставить("Реквизиты", НомераТаблиц.Количество());

	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КадровоеПеремещениеОрганизаций.Дата,
	|	КадровоеПеремещениеОрганизаций.Организация КАК ГоловнаяОрганизация,
	|	КадровоеПеремещениеОрганизаций.ОбособленноеПодразделениеКуда КАК Организация,
	|	КадровоеПеремещениеОрганизаций.СтруктурноеПодразделениеКуда КАК СтруктурноеПодразделение,
	|	КадровоеПеремещениеОрганизаций.ИндексацияЗаработка,
	|	КадровоеПеремещениеОрганизаций.Ссылка
	|ИЗ
	|	Документ.КадровоеПеремещениеОрганизаций КАК КадровоеПеремещениеОрганизаций
	|ГДЕ
	|	КадровоеПеремещениеОрганизаций.Ссылка = &Ссылка";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Процедура ПодготовитьТаблицыДокумента(Запрос, Реквизиты);
	
	Запрос.УстановитьПараметр("ОрганизацияВкладчикОППВ", Реквизиты.ОрганизацияВкладчикОППВ);
	Запрос.УстановитьПараметр("ПроизводственныйКалендарь", КалендарныеГрафики.ПроизводственныйКалендарьРеспубликиКазахстан());
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТЧРаботникиОрганизации.НомерСтроки КАК НомерСтроки,
		|	ТЧРаботникиОрганизации.Сотрудник КАК Сотрудник,
		|	ТЧРаботникиОрганизации.ДатаНачала КАК ДатаНачала,
		|	ТЧРаботникиОрганизации.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
		|	ТЧРаботникиОрганизации.Должность КАК Должность,
		|	ВЫБОР
		|		КОГДА &ОрганизацияВкладчикОППВ
		|			ТОГДА ТЧРаботникиОрганизации.ИсчислятьОППВ
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ИсчислятьОППВ
		|ПОМЕСТИТЬ ВТ_РаботникиОрганизации
		|ИЗ
		|	Документ.КадровоеПеремещениеОрганизаций.РаботникиОрганизации КАК ТЧРаботникиОрганизации
		|ГДЕ
		|	ТЧРаботникиОрганизации.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТЧНачисления.Ссылка,
		|	ТЧНачисления.НомерСтроки,
		|	ТЧНачисления.Сотрудник,
		|	ТЧНачисления.Сотрудник.Физлицо КАК ФизЛицо,
		|	ТЧНачисления.ВидРасчета,
		|	ТЧНачисления.Действие,
		|	ВЫБОР
		|		КОГДА ТЧНачисления.Действие = ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Прекратить)
		|			ТОГДА 0
		|		ИНАЧЕ ТЧНачисления.Размер
		|	КОНЕЦ КАК Размер,
		|	ТЧРаботникиОрганизации.ДатаНачала
		|ПОМЕСТИТЬ ВТ_ОсновныеНачисления
		|ИЗ
		|	Документ.КадровоеПеремещениеОрганизаций.ОсновныеНачисления КАК ТЧНачисления
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РаботникиОрганизации КАК ТЧРаботникиОрганизации
		|		ПО ТЧНачисления.Сотрудник = ТЧРаботникиОрганизации.Сотрудник
		|			
		|ГДЕ
		|	ТЧНачисления.Ссылка = &Ссылка
		|	И ТЧНачисления.Действие <> ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.НеИзменять)";
		
	Результат = Запрос.Выполнить();
	
	Если НЕ Реквизиты.ИндексацияЗаработка Тогда
		Возврат;
	КонецЕсли;

	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	НАЧАЛОПЕРИОДА(ДанныеПроизводственногоКалендаря.Дата, МЕСЯЦ) КАК ПериодДействия,
		|	СУММА(ВЫБОР КОГДА ДанныеПроизводственногоКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ) КАК НормаДней,
		|	СУММА(ВЫБОР КОГДА ДанныеПроизводственногоКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ) * 8 КАК НормаЧасов
		|ПОМЕСТИТЬ ВТ_НормаВремени
		|ИЗ
		|	РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
		|ГДЕ
		|	ДанныеПроизводственногоКалендаря.ПроизводственныйКалендарь = &ПроизводственныйКалендарь
		|СГРУППИРОВАТЬ ПО
		|	НАЧАЛОПЕРИОДА(ДанныеПроизводственногоКалендаря.Дата, МЕСЯЦ)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТЧРаботникиОрганизации.Сотрудник КАК Сотрудник,
		|	ТЧРаботникиОрганизации.ДатаНачала КАК ДатаНачала,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА РегламентированныеРасчетныеПоказатели.Период < ТЧРаботникиОрганизации.ДатаНачала
		|				ТОГДА РегламентированныеРасчетныеПоказатели.Период
		|			ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
		|		КОНЕЦ) КАК ПериодДоПеремещения,
		|	МАКСИМУМ(РегламентированныеРасчетныеПоказатели.Период) КАК ПериодПослеПеремещения
		|ПОМЕСТИТЬ ВТ_ПериодыРеглРасчетныхПоказателей
		|ИЗ
		|	ВТ_РаботникиОрганизации КАК ТЧРаботникиОрганизации
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныеРасчетныеПоказатели КАК РегламентированныеРасчетныеПоказатели
		|		ПО (РегламентированныеРасчетныеПоказатели.Период <= ТЧРаботникиОрганизации.ДатаНачала)
		|
		|СГРУППИРОВАТЬ ПО
		|	ТЧРаботникиОрганизации.Сотрудник,
		|	ТЧРаботникиОрганизации.ДатаНачала
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТЧОсновныеНачисления.НомерСтроки,
		|	ТЧОсновныеНачисления.Сотрудник,
		|	ЕСТЬNULL(РеглПоказателиДоПеремещения.РазмерМЗП, 0) КАК ПрежнийРазмерМЗП,
		|	ЕСТЬNULL(РеглПоказателиПослеПеремещения.РазмерМЗП, 0) КАК ТекущийРазмерМЗП
		|ПОМЕСТИТЬ ВТ_РегламентированныеРасчетныеПоказатели
		|ИЗ
		|	ВТ_ОсновныеНачисления КАК ТЧОсновныеНачисления
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПериодыРеглРасчетныхПоказателей КАК ПериодыРеглРасчетныхПоказателей
		|		ПО ТЧОсновныеНачисления.Сотрудник = ПериодыРеглРасчетныхПоказателей.Сотрудник
		|			И ТЧОсновныеНачисления.ДатаНачала = ПериодыРеглРасчетныхПоказателей.ДатаНачала
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныеРасчетныеПоказатели КАК РеглПоказателиДоПеремещения
		|		ПО (ПериодыРеглРасчетныхПоказателей.ПериодДоПеремещения = РеглПоказателиДоПеремещения.Период)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныеРасчетныеПоказатели КАК РеглПоказателиПослеПеремещения
		|		ПО (ПериодыРеглРасчетныхПоказателей.ПериодПослеПеремещения = РеглПоказателиПослеПеремещения.Период)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТЧОсновныеНачисления.НомерСтроки КАК НомерСтроки,
		|	ТЧОсновныеНачисления.Сотрудник КАК Сотрудник,
		|	ТЧОсновныеНачисления.ВидРасчета КАК ВидРасчета,
		|	ТЧОсновныеНачисления.ВидРасчета.ЗачетОтработанногоВремени КАК ЗачетОтработанногоВремени,
		|	ТЧОсновныеНачисления.ВидРасчета.СпособРасчета КАК СпособРасчета,
		|	ТЧОсновныеНачисления.Действие КАК Действие,
		|	ТЧОсновныеНачисления.Размер КАК Размер,
		|	ТЧОсновныеНачисления.ДатаНачала КАК ДатаНачала,
		|	МАКСИМУМ(ПлановыеНачисленияРаботниковОрганизаций.Период) КАК Период
		|ПОМЕСТИТЬ ВТ_ДатыНачислений
		|ИЗ
		|	ВТ_ОсновныеНачисления КАК ТЧОсновныеНачисления
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций КАК ПлановыеНачисленияРаботниковОрганизаций
		|		ПО ТЧОсновныеНачисления.Сотрудник = ПлановыеНачисленияРаботниковОрганизаций.Сотрудник
		|			И (ПлановыеНачисленияРаботниковОрганизаций.Организация = &Организация)
		|			И (ВЫБОР
		|				КОГДА ТЧОсновныеНачисления.ВидРасчета.ЗачетОтработанногоВремени
		|					ТОГДА ПлановыеНачисленияРаботниковОрганизаций.ВидРасчета.ЗачетОтработанногоВремени
		|				ИНАЧЕ ПлановыеНачисленияРаботниковОрганизаций.ВидРасчетаИзмерение = ТЧОсновныеНачисления.ВидРасчета
		|			КОНЕЦ)
		|			И ТЧОсновныеНачисления.ДатаНачала >= ПлановыеНачисленияРаботниковОрганизаций.Период
		|			И (ПлановыеНачисленияРаботниковОрганизаций.Регистратор <> &Ссылка)
		|ГДЕ
		|	ТЧОсновныеНачисления.ВидРасчета.ЗачетОтработанногоВремени
		|
		|СГРУППИРОВАТЬ ПО
		|	ТЧОсновныеНачисления.Сотрудник,
		|	ТЧОсновныеНачисления.ДатаНачала,
		|	ТЧОсновныеНачисления.НомерСтроки,
		|	ТЧОсновныеНачисления.ВидРасчета,
		|	ТЧОсновныеНачисления.ВидРасчета.ЗачетОтработанногоВремени,
		|	ТЧОсновныеНачисления.ВидРасчета.СпособРасчета,
		|	ТЧОсновныеНачисления.Действие,
		|	ТЧОсновныеНачисления.Размер
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДатыНачислений.НомерСтроки КАК НомерСтроки,
		|	ДатыНачислений.Сотрудник КАК Сотрудник,
		|	ДатыНачислений.ВидРасчета КАК ВидРасчета,
		|	ДатыНачислений.ЗачетОтработанногоВремени КАК ЗачетОтработанногоВремени,
		|	ДатыНачислений.СпособРасчета КАК СпособРасчета,
		|	ДатыНачислений.Действие КАК Действие,
		|	ДатыНачислений.Размер КАК Размер,
		|	ДатыНачислений.ДатаНачала КАК ДатаНачала,
		|	ДатыНачислений.Период КАК ДатаДвижения,
		|	ЕСТЬNULL(ПлановыеНачисленияРаботниковОрганизаций.ВидРасчета, ДатыНачислений.ВидРасчета) КАК ПрежнийВидРасчета,
		|	ПлановыеНачисленияРаботниковОрганизаций.Размер КАК ПрежнийРазмер,
		|	ПлановыеНачисленияРаботниковОрганизаций.Регистратор КАК Регистратор
		|ПОМЕСТИТЬ ВТ_ТекущиеИПрежниеНачисления
		|ИЗ
		|	ВТ_ДатыНачислений КАК ДатыНачислений
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций КАК ПлановыеНачисленияРаботниковОрганизаций
		|		ПО ДатыНачислений.Сотрудник = ПлановыеНачисленияРаботниковОрганизаций.Сотрудник
		|			И (ПлановыеНачисленияРаботниковОрганизаций.Организация = &Организация)
		|			И ДатыНачислений.Период = ПлановыеНачисленияРаботниковОрганизаций.Период
		|			И (ВЫБОР
		|				КОГДА ДатыНачислений.ЗачетОтработанногоВремени
		|					ТОГДА ПлановыеНачисленияРаботниковОрганизаций.ВидРасчета.ЗачетОтработанногоВремени
		|				ИНАЧЕ ПлановыеНачисленияРаботниковОрганизаций.ВидРасчетаИзмерение = ДатыНачислений.ВидРасчета
		|			КОНЕЦ)
		|			И (ПлановыеНачисленияРаботниковОрганизаций.Активность)
		|			И (ПлановыеНачисленияРаботниковОрганизаций.Регистратор <> &Ссылка)";
		
	Результат = Запрос.Выполнить();
	
КонецПроцедуры

Функция ТекстЗапросаРаботникиОрганизации(НомераТаблиц)
	
	НомераТаблиц.Вставить("ТаблицаРаботники", НомераТаблиц.Количество());

	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	&Организация КАК Организация,
		|	&ОбособленноеПодразделение КАК ОбособленноеПодразделение,
		|	&СтруктурноеПодразделение КАК СтруктурноеПодразделение,
		|	РаботникиОрганизации.НомерСтроки,
		|	РаботникиОрганизации.Сотрудник,
		|	РаботникиОрганизации.ДатаНачала КАК Период,
		|	РаботникиОрганизации.ПодразделениеОрганизации,
		|	РаботникиОрганизации.Должность,
		|	РаботникиОрганизации.ИсчислятьОППВ,
		|	1 КАК ЗанимаемыхСтавок,
		|	ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Перемещение) КАК ПричинаИзмененияСостояния
		|ИЗ
		|	ВТ_РаботникиОрганизации КАК РаботникиОрганизации";
                     	
 	Возврат	ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаОсновныеНачисления(НомераТаблиц)
	
	НомераТаблиц.Вставить("ТаблицаОсновныеНачисления", НомераТаблиц.Количество());

	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	&Организация КАК Организация,
	|	&ОбособленноеПодразделение КАК ОбособленноеПодразделение,
	|	ТЧНачисления.Ссылка,
	|	ТЧНачисления.Сотрудник,
	|	ТЧНачисления.Сотрудник.Физлицо КАК ФизЛицо,
	|	ТЧНачисления.ВидРасчета,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТЧНачисления.ВидРасчета.ЗачетОтработанногоВремени, ЛОЖЬ)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ТЧНачисления.ВидРасчета
	|	КОНЕЦ КАК ВидРасчетаИзмерение,
	|	ВЫБОР
	|		КОГДА ТЧНачисления.Действие = ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Прекратить)
	|			ТОГДА 0
	|		ИНАЧЕ ТЧНачисления.Размер
	|	КОНЕЦ КАК Размер,
	|	ТЧНачисления.ДатаНачала КАК Период
	|ИЗ
	|	ВТ_ОсновныеНачисления КАК ТЧНачисления";

	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаКоэффициентыИндексации(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	ТекстЗапроса = ""; 
	
	Если Реквизиты.ИндексацияЗаработка Тогда 
	
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	&Организация КАК Организация,
		|	&ОбособленноеПодразделение КАК ОбособленноеПодразделение,
		|	ТекущиеИПрежниеНачисления.НомерСтроки,
		|	ТекущиеИПрежниеНачисления.Сотрудник КАК Сотрудник,
		|	ТекущиеИПрежниеНачисления.ВидРасчета КАК ВидРасчета,
		|	ТекущиеИПрежниеНачисления.ЗачетОтработанногоВремени КАК ОсновноеНачисление,
		|	ТекущиеИПрежниеНачисления.СпособРасчета КАК СпособРасчета,
		|	ТекущиеИПрежниеНачисления.Действие,
		|	ЕСТЬNULL(ТекущиеИПрежниеНачисления.Размер, 0) КАК Размер,
		|	ТекущиеИПрежниеНачисления.ДатаНачала КАК Период,
		|	ТекущиеИПрежниеНачисления.ДатаДвижения,
		|	ТекущиеИПрежниеНачисления.ПрежнийВидРасчета,
		|	ТекущиеИПрежниеНачисления.ПрежнийВидРасчета.СпособРасчета КАК ПрежнийСпособРасчета,
		|	ЕСТЬNULL(ТекущиеИПрежниеНачисления.ПрежнийРазмер, 0) КАК ПрежнийРазмер,
		|	ЕСТЬNULL(НормаВремени.НормаДней, 0) КАК НормаДней,
		|	ЕСТЬNULL(НормаВремени.НормаЧасов, 0) КАК НормаЧасов,
		|	ЕСТЬNULL(РегламентированныеРасчетныеПоказатели.ПрежнийРазмерМЗП, 0) КАК ПрежнийРазмерМЗП,
		|	ЕСТЬNULL(РегламентированныеРасчетныеПоказатели.ТекущийРазмерМЗП, 0) КАК ТекущийРазмерМЗП
		|ИЗ
		|	ВТ_ТекущиеИПрежниеНачисления КАК ТекущиеИПрежниеНачисления
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_НормаВремени КАК НормаВремени
		|		ПО (НАЧАЛОПЕРИОДА(ТекущиеИПрежниеНачисления.ДатаНачала, МЕСЯЦ) = НормаВремени.ПериодДействия)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РегламентированныеРасчетныеПоказатели КАК РегламентированныеРасчетныеПоказатели
		|		ПО ТекущиеИПрежниеНачисления.НомерСтроки = РегламентированныеРасчетныеПоказатели.НомерСтроки"
		+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	
		НомераТаблиц.Вставить("ТаблицаКоэффициентыИндексации", НомераТаблиц.Количество());
		
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецЕсли