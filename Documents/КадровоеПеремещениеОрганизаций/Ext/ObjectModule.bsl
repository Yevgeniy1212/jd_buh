#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

#Область УправлениеДоступом

// Процедура ЗаполнитьНаборыЗначенийДоступа по свойствам объекта заполняет наборы значений доступа
// в таблице с полями:
//    НомерНабора     - Число                                     (необязательно, если набор один),
//    ВидДоступа      - ПланВидовХарактеристикСсылка.ВидыДоступа, (обязательно),
//    ЗначениеДоступа - Неопределено, СправочникСсылка или др.    (обязательно),
//    Чтение          - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Добавление      - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Изменение       - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Удаление        - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//
//  Вызывается из процедуры УправлениеДоступомСлужебный.ЗаписатьНаборыЗначенийДоступа(),
// если объект зарегистрирован в "ПодпискаНаСобытие.ЗаписатьНаборыЗначенийДоступа" и
// из таких же процедур объектов, у которых наборы значений доступа зависят от наборов этого
// объекта (в этом случае объект зарегистрирован в "ПодпискаНаСобытие.ЗаписатьЗависимыеНаборыЗначенийДоступа").
//
// Параметры:
//  Таблица      - ТабличнаяЧасть,
//                 РегистрСведенийНаборЗаписей.НаборыЗначенийДоступа,
//                 ТаблицаЗначений, возвращаемая УправлениеДоступом.ТаблицаНаборыЗначенийДоступа().
//
Процедура ЗаполнитьНаборыЗначенийДоступа(Таблица) Экспорт
	
	СписокФизЛиц = РаботникиОрганизации.ВыгрузитьКолонку("ФизЛицо");;
	
	РасчетЗарплатыСервер.ЗаполнитьНаборыПоОрганизацииСтрутурномуПодразделениюСпискуФизЛиц(ЭтотОбъект, Таблица, "Организация", "СтруктурноеПодразделениеКуда", СписокФизЛиц);
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	
	Если ДанныеЗаполнения <> Неопределено И ТипДанныхЗаполнения <> Тип("Структура") 
		И Метаданные().ВводитсяНаОсновании.Содержит(ДанныеЗаполнения.Метаданные()) Тогда
		
		Документы.КадровоеПеремещениеОрганизаций.ЗаполнитьПоДокументуОснования(ЭтотОбъект, ДанныеЗаполнения);
		Возврат;
		
	ИначеЕсли ТипДанныхЗаполнения = Тип("Структура") Тогда
		Если ДанныеЗаполнения.Свойство("Автор") Тогда
			ДанныеЗаполнения.Удалить("Автор");
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);	
		
	Иначе 	
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Организация.ГоловнаяОрганизация) Тогда
		ОбособленноеПодразделениеОткуда = Организация;
		ОбособленноеПодразделениеКуда 	= Организация;
		
		Если УчетнаяПолитикаСервер.ПолучитьПризнакВеденияУчетаПоГоловнойОрганизации(Организация) Тогда
			Организация = Организация.ГоловнаяОрганизация;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ЭтотОбъект.Автор) Тогда
		ЭтотОбъект.Автор = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ЭтотОбъект.Ответственный) Тогда
		ЭтотОбъект.Ответственный = ПользователиБКВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию(Пользователи.ТекущийПользователь(), "ОсновнойОтветственный");
	КонецЕсли;

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	МассивТЧ = Новый Массив();
	МассивТЧ.Добавить(РаботникиОрганизации);
	
	КраткийСоставДокумента = ПроцедурыУправленияПерсоналомСервер.ЗаполнитьКраткийСоставДокумента(МассивТЧ, "Сотрудник");

КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	ПроверитьЗаполнениеТабличнойЧастиПострочно(РаботникиОрганизации.Выгрузить(), Отказ);
	ПроверитьЗаполнениеТабличнойЧастиНачислениеПострочно(ОсновныеНачисления, Отказ);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
	Если РучнаяКорректировка Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПроведения = Документы.КадровоеПеремещениеОрганизаций.ПодготовитьПараметрыПроведения(Ссылка, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если ИндексацияЗаработка Тогда
		
		ТаблицаКоэффициентыИндексации = РасчетЗарплатыСервер.ПодготовитьТаблицуКоэффициентовИндексации(ПараметрыПроведения.ТаблицаКоэффициентыИндексации, 
																									   ПараметрыПроведения.Реквизиты[0], 
																									   Движения.КоэффициентыИндексацииЗаработка.ВыгрузитьКолонки("Организация, ОбособленноеПодразделение, Период, Сотрудник, Коэффициент"), 
																									   Отказ);
		
		РасчетЗарплатыСервер.СформироватьДвиженияКоэффициентыИндексацииЗаработка(ТаблицаКоэффициентыИндексации, Движения, Отказ);
	
	КонецЕсли;
	
	КадровыйУчетСервер.СформироватьДвиженияРаботникиОрганизации(ПараметрыПроведения.ТаблицаРаботники, Движения, Отказ);
	РасчетЗарплатыСервер.СформироватьДвиженияПлановыеНачисленияРаботниковОрганизаций(ПараметрыПроведения.ТаблицаОсновныеНачисления, Движения, Отказ);
		
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	Дата = НачалоДня(ОбщегоНазначения.ТекущаяДатаПользователя());

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура ПроверитьЗаполнениеТабличнойЧастиПострочно(ПроверяемаяТабличнаячасть, Отказ)
	
	РезультатЗапросаПоРаботники = СформироватьЗапросПоРаботникиОрганизации(ПроверяемаяТабличнаячасть);
	ВыборкаПоСтрокамДокумента = РезультатЗапросаПоРаботники.Выбрать();
	
	Пока ВыборкаПоСтрокамДокумента.Следующий() Цикл
		СтрокаНачалаСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'В строке номер %1 табл. части ""Сотрудники"": '"), СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки));
		
		Если ВыборкаПоСтрокамДокумента.ВидСтрокиЗапроса = "ДанныеДляДвиженийКадров" Тогда
			
			Если ЗначениеЗаполнено(СтруктурноеПодразделениеКуда) Тогда
				НеВходитВИерархию = ВыборкаПоСтрокамДокумента.ОшибкаПодразделениеНеВИерархииСтруктурногоПодразделения;
				Если НеВходитВИерархию Тогда
					ТекстСообщения = НСтр("ru='указанное подразделение, не входит в структурную единицу!'");
					Поле = "РаботникиОрганизации" + "[" + Формат(ВыборкаПоСтрокамДокумента.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].ПодразделениеОрганизации";
					ОбщегоНазначения.СообщитьПользователю(СтрокаНачалаСообщенияОбОшибке + ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
				КонецЕсли;
			КонецЕсли;
			
			// Подразделение
			Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ПодразделениеОрганизации) Тогда
				ТекстСообщения = НСтр("ru='не указано подразделение, куда переводится сотрудник!'");
				Поле = "РаботникиОрганизации" + "[" + Формат(ВыборкаПоСтрокамДокумента.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].Сотрудник";
				ОбщегоНазначения.СообщитьПользователю(СтрокаНачалаСообщенияОбОшибке + ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
			ИначеЕсли ВыборкаПоСтрокамДокумента.ОшибкаПодразделениеНеПринадлежитОрганизации Тогда
				ТекстСообщения = НСтр("ru='указано подразделение, принадлежащее другой организации!'");
				Поле = "РаботникиОрганизации" + "[" + Формат(ВыборкаПоСтрокамДокумента.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].Сотрудник";
				ОбщегоНазначения.СообщитьПользователю(СтрокаНачалаСообщенияОбОшибке + ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
			КонецЕсли;

			// Проверка: ранее работник должен быть принят на работу
			Если ВыборкаПоСтрокамДокумента.ПрежняяСтавка = NULL Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='на %1 сотрудник %2 еще не принят на работу!'"), Формат(ВыборкаПоСтрокамДокумента.ДатаНачала, "ДЛФ=DD"), ВыборкаПоСтрокамДокумента.СотрудникНаименование);
				Поле = "РаботникиОрганизации" + "[" + Формат(ВыборкаПоСтрокамДокумента.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].Сотрудник";
				ОбщегоНазначения.СообщитьПользователю(СтрокаНачалаСообщенияОбОшибке + ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
				
			ИначеЕсли ВыборкаПоСтрокамДокумента.ПрежняяСтавка = 0 Тогда	
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='на %1 сотрудник %2 уже уволен (с %3)!'"), Формат(ВыборкаПоСтрокамДокумента.ДатаНачала, "ДЛФ=DD"), ВыборкаПоСтрокамДокумента.СотрудникНаименование, Формат(ВыборкаПоСтрокамДокумента.ДатаПоследнегоДвиженияПоРаботнику, "ДЛФ=DD"));
				Поле = "РаботникиОрганизации" + "[" + Формат(ВыборкаПоСтрокамДокумента.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].Сотрудник";
				ОбщегоНазначения.СообщитьПользователю(СтрокаНачалаСообщенияОбОшибке + ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
				
			КонецЕсли; 
			
			// Проверка: противоречие другой строке документа
			Если ВыборкаПоСтрокамДокумента.КонфликтнаяСтрокаНомер <> NULL Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='одним документом допускается регистрировать только одно перемещение сотрудника (см. строку %1)!'"), ВыборкаПоСтрокамДокумента.КонфликтнаяСтрокаНомер);
				Поле = "РаботникиОрганизации" + "[" + Формат(ВыборкаПоСтрокамДокумента.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].Сотрудник";
				ОбщегоНазначения.СообщитьПользователю(СтрокаНачалаСообщенияОбОшибке + ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
			КонецЕсли;
			
			// Организация сотрудника должна совпадать с организацией документа
			Если ВыборкаПоСтрокамДокумента.ОшибкаНеСоответствиеСотрудникаИОрганизации Тогда
				ТекстСообщения = НСтр("ru='организация документа не соответствует организации, указанной в карточке сотрудника!'");
				Поле = "РаботникиОрганизации" + "[" + Формат(ВыборкаПоСтрокамДокумента.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].Сотрудник";
				ОбщегоНазначения.СообщитьПользователю(СтрокаНачалаСообщенияОбОшибке + ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
			КонецЕсли;
			
		ИначеЕсли ВыборкаПоСтрокамДокумента.ВидСтрокиЗапроса = "КонфликтныйДокумент" Тогда
			// противоречие другим кадровым приказам
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='период действия приказа противоречит кадровому приказу
			|	%1!'"), ВыборкаПоСтрокамДокумента.КонфликтныйДокумент);
			Поле = "РаботникиОрганизации" + "[" + Формат(ВыборкаПоСтрокамДокумента.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].Сотрудник";
			ОбщегоНазначения.СообщитьПользователю(СтрокаНачалаСообщенияОбОшибке + ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеТабличнойЧастиНачислениеПострочно(ПроверяемаяТабличнаячасть, Отказ)
	
	РезультатЗапросаПоРаботники   = СформироватьЗапросПоНачислениям(ПроверяемаяТабличнаячасть);
	ВыборкаПоСтрокамДокумента = РезультатЗапросаПоРаботники.Выбрать();
	
	Пока ВыборкаПоСтрокамДокумента.Следующий() Цикл
		СтрокаНачалаСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'В строке номер %1 табл. части ""Основные начисления"": '"), СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки));
		
		НетВР = НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ВидРасчета);
		НетСотрудника = НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Сотрудник);
		
		// проверка на существование работника в табличной части "РаботникиОрганизации"
		Если ВыборкаПоСтрокамДокумента.ДатаНачала = ВыборкаПоСтрокамДокумента.ДатаДвижения Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='на дату %1 изменение начисления уже зарегистрировано документом %2!'"), ВыборкаПоСтрокамДокумента.ДатаНачала, ВыборкаПоСтрокамДокумента.КонфликтныйДокумент);
			Поле = "ОсновныеНачисления" + "[" + Формат(ВыборкаПоСтрокамДокумента.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].Сотрудник";
			ОбщегоНазначения.СообщитьПользователю(СтрокаНачалаСообщенияОбОшибке + ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
		КонецЕсли;
		
		// Размер оплаты
		Если (ВыборкаПоСтрокамДокумента.Действие = Перечисления.ВидыДействияСНачислением.Начать или ВыборкаПоСтрокамДокумента.Действие = Перечисления.ВидыДействияСНачислением.Изменить) И ВыборкаПоСтрокамДокумента.Размер = 0 Тогда
			ТекстСообщения = НСтр("ru='не указан размер начисления!'");
			Поле = "ОсновныеНачисления" + "[" + Формат(ВыборкаПоСтрокамДокумента.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].Размер";
			ОбщегоНазначения.СообщитьПользователю(СтрокаНачалаСообщенияОбОшибке + ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
		КонецЕсли;
	
		// Двойные строки
		Если НЕ НетВР И НЕ НетСотрудника И ВыборкаПоСтрокамДокумента.ДвойнаяСтрока <> NULL Тогда
			
			Если ВыборкаПоСтрокамДокумента.ОсновноеНачисление Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='основное начисление сотрудника следует редактировать в одной строке (см. строку %1)!'"), ВыборкаПоСтрокамДокумента.ДвойнаяСтрока);
			Иначе
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='сотруднику не может быть назначено одно и тоже начисление дважды (см. строку %1)!'"), ВыборкаПоСтрокамДокумента.ДвойнаяСтрока);
			КонецЕсли;
			
			Поле = "ОсновныеНачисления" + "[" + Формат(ВыборкаПоСтрокамДокумента.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].ВидРасчета";
			ОбщегоНазначения.СообщитьПользователю(СтрокаНачалаСообщенияОбОшибке + ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
			
		КонецЕсли;	
		
		// Двойные строки коэффициентов индексации заработка
		Если ИндексацияЗаработка 
			И ВыборкаПоСтрокамДокумента.Действие <> Перечисления.ВидыДействияСНачислением.НеИзменять
			И ВыборкаПоСтрокамДокумента.Действие <> Перечисления.ВидыДействияСНачислением.Прекратить Тогда
			// Коэффициент индексации заработка на дату начала
			Если ВыборкаПоСтрокамДокумента.ОшибкаВведеныКоэффициентыИндексацииНаДатуНачала Тогда
				ТекстСообщения = НСтр("ru='для сотрудника уже введен коэффициент индексации заработка на дату начала!'");
				Поле = "ОсновныеНачисления" + "[" + Формат(ВыборкаПоСтрокамДокумента.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].Сотрудник";
				ОбщегоНазначения.СообщитьПользователю(СтрокаНачалаСообщенияОбОшибке + ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Формирует запрос по таблице "РаботникиОрганизации" документа
//
Функция СформироватьЗапросПоРаботникиОрганизации(ПроверяемаяТабличнаячасть)
	
	Запрос = Новый Запрос;

    СписокСтруктурныхПодразделений = ОбщегоНазначенияБК.ПолучитьСписокОбособленныхПодразделенийОрганизацииДляУчетаЗарплаты(Организация);
	СписокСтруктурныхПодразделений.Добавить(Организация);
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", 				Ссылка);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", 			ОбщегоНазначенияБКВызовСервера.ГоловнаяОрганизацияДляУчетаЗарплаты(Организация));
	Запрос.УстановитьПараметр("СтруктурноеПодразделениеКуда", 	СтруктурноеПодразделениеКуда);
	Запрос.УстановитьПараметр("ТаблицаДокумента", 				ПроверяемаяТабличнаячасть);
	
	Если СписокСтруктурныхПодразделений.НайтиПоЗначению(ОбособленноеПодразделениеКуда) = Неопределено Тогда
		Запрос.УстановитьПараметр("ОрганизацияВладелец", Организация);
	Иначе
		Запрос.УстановитьПараметр("ОрганизацияВладелец", ОбособленноеПодразделениеКуда);
	КонецЕсли;
	
	// Описание текста запроса:
	// Первая часть запроса  - вид строки запроса "ДанныеДляДвиженийКадров": 
    // 1. Выборка "ТЧРаботникиОрганизации": 
	//		Выбираются строки документа.  
	// 2. Выборка "ДанныеПоРаботникиДоНазначения": 
	//		Для каждой строки ТЧРаботникиОрганизации выполняем срез по регистру РаботникиОрганизации на дату ДатаНачала
	//		для выполнения движений и проверки "Работает ли работник на дату перемещения"
	//		(Использует данные выборки "ДатыПоследнихДвиженийРаботников")
	// 3. Выборка "ПересекающиесяСтроки": 
	//		Среди остальных строк документа ищем строки, имеющие пересекающийся период действия
	//
	// Вторая часть запроса - вид строки запроса "КонфликтныйДокумент" - поиск конфликтных документов: 
	// 1. Выборка "ТЧРаботникиОрганизации":
	//		Выбираются строки документа 
	// 2. Выборка "РаботникиОрганизации":
	//		Для каждой строки ТЧРаботникиОрганизации ищем движения по регистру РаботникиОрганизации за период [ДатаНачала, ДатаОкончания]
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	ТаблицаДокумента.НомерСтроки,
	               |	ТаблицаДокумента.ДатаНачала,
	               |	ТаблицаДокумента.Сотрудник,
	               |	ТаблицаДокумента.ПодразделениеОрганизации
	               |ПОМЕСТИТЬ ВТ_ТЧРаботникиОрганизации
	               |ИЗ
	               |	&ТаблицаДокумента КАК ТаблицаДокумента
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТЧРаботникиОрганизации.НомерСтроки КАК НомерСтроки,
	               |	МАКСИМУМ(Работники.Период) КАК Период,
	               |	ТЧРаботникиОрганизации.Сотрудник КАК Сотрудник
	               |ПОМЕСТИТЬ ВТ_ДатыПоследнихДвиженийРаботников
	               |ИЗ
	               |	ВТ_ТЧРаботникиОрганизации КАК ТЧРаботникиОрганизации
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК Работники
	               |		ПО ТЧРаботникиОрганизации.Сотрудник = Работники.Сотрудник
	               |			И (Работники.Организация = &ГоловнаяОрганизация)
	               |			И (Работники.Период <= ТЧРаботникиОрганизации.ДатаНачала)
	               |			И (Работники.Активность)
				   |			И (Работники.Регистратор <> &ДокументСсылка)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ТЧРаботникиОрганизации.НомерСтроки,
	               |	ТЧРаботникиОрганизации.Сотрудник
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ДанныеПоРаботникуДоНазначения.Сотрудник,
	               |	ДатыПоследнихДвиженийРаботников.НомерСтроки КАК НомерСтроки,
	               |	ДатыПоследнихДвиженийРаботников.Период КАК Период,
	               |	ДанныеПоРаботникуДоНазначения.ЗанимаемыхСтавок КАК ЗанимаемыхСтавок,
	               |	ДанныеПоРаботникуДоНазначения.ОбособленноеПодразделение КАК ОбособленноеПодразделение,
	               |	ДанныеПоРаботникуДоНазначения.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	               |	ДанныеПоРаботникуДоНазначения.Сотрудник.Код КАК ТабельныйНомер
	               |ПОМЕСТИТЬ ВТ_ДанныеПоРаботникуДоНазначения
	               |ИЗ
	               |	ВТ_ДатыПоследнихДвиженийРаботников КАК ДатыПоследнихДвиженийРаботников
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК ДанныеПоРаботникуДоНазначения
	               |		ПО (ДанныеПоРаботникуДоНазначения.Организация = &ГоловнаяОрганизация)
	               |			И (ДанныеПоРаботникуДоНазначения.Период = ДатыПоследнихДвиженийРаботников.Период)
	               |			И ДатыПоследнихДвиженийРаботников.Сотрудник = ДанныеПоРаботникуДоНазначения.Сотрудник
	               |			И (ДанныеПоРаботникуДоНазначения.Активность)
				   |			И (ДанныеПоРаботникуДоНазначения.Регистратор <> &ДокументСсылка)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТЧРаботникиОрганизации.НомерСтроки КАК НомерСтроки,
	               |	МИНИМУМ(ТЧРаботникиОрганизации2.НомерСтроки) КАК КонфликтнаяСтрокаНомер
	               |ПОМЕСТИТЬ ВТ_ПересекающиесяСтроки
	               |ИЗ
	               |	ВТ_ТЧРаботникиОрганизации КАК ТЧРаботникиОрганизации
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ТЧРаботникиОрганизации КАК ТЧРаботникиОрганизации2
	               |		ПО ТЧРаботникиОрганизации.Сотрудник = ТЧРаботникиОрганизации2.Сотрудник
	               |		   И ТЧРаботникиОрганизации.НомерСтроки < ТЧРаботникиОрганизации2.НомерСтроки
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ТЧРаботникиОрганизации.НомерСтроки
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТЧРаботникиОрганизации.НомерСтроки,
	               |	МАКСИМУМ(РаботникиОрганизации.Период) КАК Период
	               |ПОМЕСТИТЬ ВТ_ДатыПриемовДоПеремещения
	               |ИЗ
	               |	ВТ_ТЧРаботникиОрганизации КАК ТЧРаботникиОрганизации
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
	               |		ПО ТЧРаботникиОрганизации.Сотрудник = РаботникиОрганизации.Сотрудник
	               |			И (РаботникиОрганизации.Организация = &ГоловнаяОрганизация)
	               |			И (РаботникиОрганизации.Период <= ТЧРаботникиОрганизации.ДатаНачала)
	               |			И (РаботникиОрганизации.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу))
	               |			И (РаботникиОрганизации.Активность)
				   |			И (РаботникиОрганизации.Регистратор <> &ДокументСсылка)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ТЧРаботникиОрганизации.НомерСтроки
				   |;
				   |
	               |////////////////////////////////////////////////////////////////////////////////
				   |
				   |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	""ДанныеДляДвиженийКадров"" КАК ВидСтрокиЗапроса,
	               |	ТЧРаботникиОрганизации.НомерСтроки КАК НомерСтроки,
	               |	ТЧРаботникиОрганизации.Сотрудник КАК Сотрудник,
				   |	ТЧРаботникиОрганизации.Сотрудник.Наименование КАК СотрудникНаименование,
	               |	ТЧРаботникиОрганизации.ДатаНачала КАК ДатаНачала,
	               |	ТЧРаботникиОрганизации.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
				   |	&СтруктурноеПодразделениеКуда КАК СтруктурноеПодразделение,
	               |	ВЫБОР КОГДА ТЧРаботникиОрганизации.ПодразделениеОрганизации.Владелец <> &ОрганизацияВладелец ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ КАК ОшибкаПодразделениеНеПринадлежитОрганизации,
	               |	ДанныеПоРаботникуДоНазначения.ЗанимаемыхСтавок КАК ПрежняяСтавка,	
	               |	ДанныеПоРаботникуДоНазначения.Период КАК ДатаПоследнегоДвиженияПоРаботнику,
	               |	ПересекающиесяСтроки.КонфликтнаяСтрокаНомер,
	               |	NULL КАК КонфликтныйДокумент,
		   		   |	ВЫБОР
				   |		КОГДА ТЧРаботникиОрганизации.Сотрудник.Организация = &ГоловнаяОрганизация
				   |			ИЛИ ТЧРаботникиОрганизации.Сотрудник = ЗНАЧЕНИЕ(Справочник.СотрудникиОрганизаций.ПустаяСсылка) 
				   |			ТОГДА ЛОЖЬ
				   |		ИНАЧЕ ИСТИНА
				   |	КОНЕЦ КАК ОшибкаНеСоответствиеСотрудникаИОрганизации
				   |";

	Если ЗначениеЗаполнено(СтруктурноеПодразделениеКуда) Тогда
		//Проверка на вхождение подразделения, выбранного в табличной части в иерархию структурного подразделения Куда
		ТекстЗапроса = ТекстЗапроса + ",	
					|	ВЫБОР
					|		КОГДА ТЧРаботникиОрганизации.ПодразделениеОрганизации В ИЕРАРХИИ (&СтруктурноеПодразделениеКуда)
					|			ТОГДА ЛОЖЬ
					|	    ИНАЧЕ ИСТИНА
					|	КОНЕЦ КАК ОшибкаПодразделениеНеВИерархииСтруктурногоПодразделения
					|";
	КонецЕсли;
			   
	ТекстЗапроса = ТекстЗапроса + "
	               |ИЗ
	               |	ВТ_ТЧРаботникиОрганизации КАК ТЧРаботникиОрганизации
				   |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДанныеПоРаботникуДоНазначения КАК ДанныеПоРаботникуДоНазначения
				   |		ПО ТЧРаботникиОрганизации.НомерСтроки = ДанныеПоРаботникуДоНазначения.НомерСтроки
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПересекающиесяСтроки КАК ПересекающиесяСтроки
	               |		ПО ТЧРаботникиОрганизации.НомерСтроки = ПересекающиесяСтроки.НомерСтроки
				   |
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДатыПриемовДоПеремещения КАК ДатыПриемовДоПеремещения
	               |			ПО ТЧРаботникиОрганизации.НомерСтроки = ДатыПриемовДоПеремещения.НомерСтроки
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	""КонфликтныйДокумент"",
	               |	ТЧРаботникиОрганизации.НомерСтроки,
	               |	NULL,
	               |	NULL,
	               |	NULL,
				   |	NULL,
	               |	NULL,
	               |	NULL,
	               |	NULL,
	               |	NULL,
	               |	NULL,
	               |	Работники.Регистратор,
	               |	NULL
				   |";
				   
	Если ЗначениеЗаполнено(СтруктурноеПодразделениеКуда) Тогда
		ТекстЗапроса = ТекстЗапроса + ", NULL ";
	КонецЕсли;
			   
	ТекстЗапроса = ТекстЗапроса + "
	               |ИЗ
	               |	ВТ_ТЧРаботникиОрганизации КАК ТЧРаботникиОрганизации
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК Работники
	               |		ПО Работники.Организация = &ГоловнаяОрганизация 
	               |			И Работники.Сотрудник = ТЧРаботникиОрганизации.Сотрудник
				   |			И Работники.Активность
				   |			И Работники.Регистратор <> &ДокументСсылка
	               |			И (Работники.Период = ТЧРаботникиОрганизации.ДатаНачала
	               |				ИЛИ Работники.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение) 
	               |					И ДОБАВИТЬКДАТЕ(Работники.Период, ДЕНЬ, -1) = ТЧРаботникиОрганизации.ДатаНачала)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	НомерСтроки";

	Запрос.Текст = ТекстЗапроса;
		
	Возврат Запрос.Выполнить();
	
КонецФункции // СформироватьЗапросПоРаботникиОрганизации()

// Формирует запрос по таблице "ОсновныеНачисления" документа.
//
Функция СформироватьЗапросПоНачислениям(ПроверяемаяТабличнаячасть)
                                                        
	Запрос = Новый Запрос;

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаОсновныеНачисления.НомерСтроки,
	|	ТаблицаОсновныеНачисления.Сотрудник,
	|	ТаблицаОсновныеНачисления.ВидРасчета,
	|	ТаблицаОсновныеНачисления.Действие,
	|	ТаблицаОсновныеНачисления.Размер
	|ПОМЕСТИТЬ ВТ_ТаблицаОсновныеНачисления
	|ИЗ
	|	&ТаблицаОсновныеНачисления КАК ТаблицаОсновныеНачисления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаРаботникиОрганизации.ДатаНачала,
	|	ТаблицаРаботникиОрганизации.Сотрудник,
	|	ТаблицаРаботникиОрганизации.ПодразделениеОрганизации КАК ПодразделениеОрганизации
	|ПОМЕСТИТЬ ВТ_ТаблицаРаботникиОрганизации
	|ИЗ
	|	&ТаблицаРаботникиОрганизации КАК ТаблицаРаботникиОрганизации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КадровоеПеремещениеОрганизацииОсновныеНачисления.НомерСтроки КАК НомерСтроки,
	|	КадровоеПеремещениеОрганизацииОсновныеНачисления.Сотрудник КАК Сотрудник,
	|	КадровоеПеремещениеОрганизацииОсновныеНачисления.ВидРасчета КАК ВидРасчета,
	|	КадровоеПеремещениеОрганизацииОсновныеНачисления.Действие КАК Действие,
	|	КадровоеПеремещениеОрганизацииОсновныеНачисления.Размер КАК Размер,
	|	КадровоеПеремещениеОрганизацииРаботникиОрганизации.ДатаНачала КАК ДатаНачала
	|ПОМЕСТИТЬ ВТ_ТЧОсновныеНачисления
	|ИЗ
	|	ВТ_ТаблицаОсновныеНачисления КАК КадровоеПеремещениеОрганизацииОсновныеНачисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ТаблицаРаботникиОрганизации КАК КадровоеПеремещениеОрганизацииРаботникиОрганизации
	|		ПО КадровоеПеремещениеОрганизацииОсновныеНачисления.Сотрудник = КадровоеПеремещениеОрганизацииРаботникиОрганизации.Сотрудник
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	ВидРасчета,
	|	ДатаНачала
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТЧОсновныеНачисления.НомерСтроки КАК НомерСтроки,
	|	ТЧОсновныеНачисления.Сотрудник КАК Сотрудник,
	|	ТЧОсновныеНачисления.ВидРасчета КАК ВидРасчета,
	|	ТЧОсновныеНачисления.Действие КАК Действие,
	|	ТЧОсновныеНачисления.ДатаНачала КАК ДатаНачала,
	|	ТЧОсновныеНачисления.Размер КАК Размер,
	|	МАКСИМУМ(ПлановыеНачисленияРаботниковОрганизаций.Период) КАК Период
	|ПОМЕСТИТЬ ВТ_ДатыНачислений
	|ИЗ
	|	ВТ_ТЧОсновныеНачисления КАК ТЧОсновныеНачисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций КАК ПлановыеНачисленияРаботниковОрганизаций
	|		ПО ТЧОсновныеНачисления.Сотрудник = ПлановыеНачисленияРаботниковОрганизаций.Сотрудник
	|			И (ПлановыеНачисленияРаботниковОрганизаций.Организация = &ГоловнаяОрганизация)
	|			И (ПлановыеНачисленияРаботниковОрганизаций.Активность)
	|			И (ПлановыеНачисленияРаботниковОрганизаций.Регистратор <> &ДокументСсылка)
	|			И (ВЫБОР
	|				КОГДА ТЧОсновныеНачисления.ВидРасчета.ЗачетОтработанногоВремени
	|					ТОГДА ПлановыеНачисленияРаботниковОрганизаций.ВидРасчета.ЗачетОтработанногоВремени
	|				ИНАЧЕ ПлановыеНачисленияРаботниковОрганизаций.ВидРасчетаИзмерение = ТЧОсновныеНачисления.ВидРасчета
	|			КОНЕЦ)
	|			И ТЧОсновныеНачисления.ДатаНачала >= ПлановыеНачисленияРаботниковОрганизаций.Период
	|
	|СГРУППИРОВАТЬ ПО
	|	ТЧОсновныеНачисления.Сотрудник,
	|	ТЧОсновныеНачисления.ДатаНачала,
	|	ТЧОсновныеНачисления.НомерСтроки,
	|	ТЧОсновныеНачисления.ВидРасчета,
	|	ТЧОсновныеНачисления.Действие,
	|	ТЧОсновныеНачисления.Размер
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	Период,
	|	ВидРасчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДатыНачислений.НомерСтроки КАК НомерСтроки,
	|	ДатыНачислений.Сотрудник КАК Сотрудник,
	|	ДатыНачислений.ВидРасчета КАК ВидРасчета,
	|	ДатыНачислений.Действие КАК Действие,
	|	ДатыНачислений.ДатаНачала КАК ДатаНачала,
	|	ДатыНачислений.Период КАК ДатаДвижения,
	|	ДатыНачислений.Размер КАК Размер,
	|	ПлановыеНачисленияРаботниковОрганизаций.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ ВТ_ТекущиеИПрежниеНачисления
	|ИЗ
	|	ВТ_ДатыНачислений КАК ДатыНачислений
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций КАК ПлановыеНачисленияРаботниковОрганизаций
	|		ПО ДатыНачислений.Сотрудник = ПлановыеНачисленияРаботниковОрганизаций.Сотрудник
	|			И (ПлановыеНачисленияРаботниковОрганизаций.Организация = &ГоловнаяОрганизация)
	|			И ДатыНачислений.Период = ПлановыеНачисленияРаботниковОрганизаций.Период
	|			И (ПлановыеНачисленияРаботниковОрганизаций.Активность)
	|			И (ПлановыеНачисленияРаботниковОрганизаций.Регистратор <> &ДокументСсылка)
	|			И (ВЫБОР
	|				КОГДА ДатыНачислений.ВидРасчета.ЗачетОтработанногоВремени
	|					ТОГДА ПлановыеНачисленияРаботниковОрганизаций.ВидРасчета.ЗачетОтработанногоВремени
	|				ИНАЧЕ ПлановыеНачисленияРаботниковОрганизаций.ВидРасчетаИзмерение = ДатыНачислений.ВидРасчета
	|			КОНЕЦ)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки,
	|	Сотрудник,
	|	ДатаНачала,
	|	Регистратор,
	|	ВидРасчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТЧНачисления.НомерСтроки КАК НомерСтроки,
	|	МИНИМУМ(ТЧНачисления2.НомерСтроки) КАК КонфликтнаяСтрокаНомер
	|ПОМЕСТИТЬ ВТ_ДвойныеСтроки
	|ИЗ
	|	ВТ_ТЧОсновныеНачисления КАК ТЧНачисления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ТЧОсновныеНачисления КАК ТЧНачисления2
	|		ПО ТЧНачисления.Сотрудник = ТЧНачисления2.Сотрудник
	|			И (ТЧНачисления.ВидРасчета = ТЧНачисления2.ВидРасчета
	|				ИЛИ ТЧНачисления.ВидРасчета.ЗачетОтработанногоВремени
	|					И ТЧНачисления2.ВидРасчета.ЗачетОтработанногоВремени)
	|			И ТЧНачисления.НомерСтроки < ТЧНачисления2.НомерСтроки
	|
	|СГРУППИРОВАТЬ ПО
	|	ТЧНачисления.НомерСтроки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки
	|;
	|";
	
	Если ИндексацияЗаработка Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТЧРаботникиОрганизации.Сотрудник,
		|	ТЧРаботникиОрганизации.ДатаНачала,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА РегламентированныеРасчетныеПоказатели.Период < ТЧРаботникиОрганизации.ДатаНачала
		|				ТОГДА РегламентированныеРасчетныеПоказатели.Период
		|			ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
		|		КОНЕЦ) КАК ПериодДоПеремещения,
		|	МАКСИМУМ(РегламентированныеРасчетныеПоказатели.Период) КАК ПериодПослеПеремещения
		|ПОМЕСТИТЬ ВТ_ПериодыРеглРасчетныхПоказателей
		|ИЗ
		|	ВТ_ТаблицаРаботникиОрганизации КАК ТЧРаботникиОрганизации
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныеРасчетныеПоказатели КАК РегламентированныеРасчетныеПоказатели
		|		ПО (РегламентированныеРасчетныеПоказатели.Период <= ТЧРаботникиОрганизации.ДатаНачала)
		|
		|СГРУППИРОВАТЬ ПО
		|	ТЧРаботникиОрганизации.Сотрудник,
		|	ТЧРаботникиОрганизации.ДатаНачала
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Сотрудник,
		|   ДатаНачала
		|;
		|";
		
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТекущиеИПрежниеНачисления.НомерСтроки,
	|	ТекущиеИПрежниеНачисления.Сотрудник КАК Сотрудник,
	|	ТекущиеИПрежниеНачисления.ВидРасчета КАК ВидРасчета,
	|	ТекущиеИПрежниеНачисления.ВидРасчета.ЗачетОтработанногоВремени КАК ОсновноеНачисление,
	|	ТекущиеИПрежниеНачисления.Действие,
	|	ТекущиеИПрежниеНачисления.ДатаНачала,
	|	ТекущиеИПрежниеНачисления.ДатаДвижения,
	|   ТекущиеИПрежниеНачисления.Размер,
	|	ТекущиеИПрежниеНачисления.Регистратор.Представление КАК КонфликтныйДокумент,
	|	ДвойныеСтроки.КонфликтнаяСтрокаНомер КАК ДвойнаяСтрока,
	|	Работники.ПодразделениеОрганизации.Владелец КАК ОрганизацияПодразделения
	|";

	Если ИндексацияЗаработка Тогда
		
		ТекстЗапроса = ТекстЗапроса + ",
		|	ВЫБОР
		|		КОГДА НЕ КоэффициентыИндексацииЗаработкаНаДатуНачала.Сотрудник ЕСТЬ NULL
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ОшибкаВведеныКоэффициентыИндексацииНаДатуНачала
		|";
		
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
	|ИЗ
	|	ВТ_ТекущиеИПрежниеНачисления КАК ТекущиеИПрежниеНачисления
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДвойныеСтроки КАК ДвойныеСтроки
	|		ПО ТекущиеИПрежниеНачисления.НомерСтроки = ДвойныеСтроки.НомерСтроки 
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ТаблицаРаботникиОрганизации КАК Работники
	|		ПО ТекущиеИПрежниеНачисления.Сотрудник = Работники.Сотрудник 
	|";
	
	Если ИндексацияЗаработка Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
		|
		|		// определим размеры МЗП до и после перемещения
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПериодыРеглРасчетныхПоказателей КАК ПериодыРеглРасчетныхПоказателей
		|			ПО ТекущиеИПрежниеНачисления.Сотрудник = ПериодыРеглРасчетныхПоказателей.Сотрудник
		|				И ТекущиеИПрежниеНачисления.ДатаНачала = ПериодыРеглРасчетныхПоказателей.ДатаНачала
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КоэффициентыИндексацииЗаработка КАК КоэффициентыИндексацииЗаработкаНаДатуНачала
		|			ПО ТекущиеИПрежниеНачисления.Сотрудник = КоэффициентыИндексацииЗаработкаНаДатуНачала.Сотрудник
		|				И ТекущиеИПрежниеНачисления.ДатаНачала = КоэффициентыИндексацииЗаработкаНаДатуНачала.Период
		|				И КоэффициентыИндексацииЗаработкаНаДатуНачала.Организация = &ГоловнаяОрганизация
		|				И КоэффициентыИндексацииЗаработкаНаДатуНачала.Регистратор <> &ДокументСсылка
		|				И КоэффициентыИндексацииЗаработкаНаДатуНачала.Активность
		|				И ТекущиеИПрежниеНачисления.ВидРасчета.ЗачетОтработанногоВремени
		|";
		
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",         	 Ссылка);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация",         ОбщегоНазначенияБКВызовСервера.ГоловнаяОрганизацияДляУчетаЗарплаты(Организация));
	Запрос.УстановитьПараметр("ТаблицаОсновныеНачисления", 	 ПроверяемаяТабличнаячасть);  
	Запрос.УстановитьПараметр("ТаблицаРаботникиОрганизации", РаботникиОрганизации);  
	
	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоНачисления()

#КонецЕсли


