#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Заполняет счета учета номенклатуры в табличной части документа
//
Процедура ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, ИмяТабличнойЧасти) Экспорт

	ТабличнаяЧасть = Объект[ИмяТабличнойЧасти];
	
	ДанныеОбъекта = Новый Структура("Дата, Организация, Подразделение");
	
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	СоответствиеСчетовУчета = ПроцедурыБухгалтерскогоУчета.ПолучитьСчетаУчетаСпискаНоменклатуры(
		ДанныеОбъекта.Организация, ОбщегоНазначения.ВыгрузитьКолонку(ТабличнаяЧасть, "Номенклатура", Истина), ДанныеОбъекта.Дата);
	
	Для каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
		СчетаУчета = СоответствиеСчетовУчета.Получить(СтрокаТабличнойЧасти.Номенклатура);
		ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, СтрокаТабличнойЧасти, ИмяТабличнойЧасти, СчетаУчета);
	КонецЦикла;

КонецПроцедуры

// Заполняет счета учета номенклатуры в строке табличной части документа
//
// Параметры:
//  ДанныеОбъекта         - структура данных объекта, используемых при заполнении счетов учета (вид операции,
//                          вид договора контрагента, признак комиссионной торговли и т.п.)
//  СтрокаТабличнойЧасти  - строка табличной части документа
//  ИмяТабличнойЧасти     - имя табличной части документа
//  СведенияОНоменклатуре - структура сведений о номенклатуре, либо стуктура счетов учета
//
Процедура ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, СтрокаТабличнойЧасти, ИмяТабличнойЧасти, СведенияОНоменклатуре, ВключаяЗаполненные = Истина) Экспорт

	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СведенияОНоменклатуре.Свойство("СчетаУчета") Тогда
		// СведенияОНоменклатуре - структура сведений номенклатуры
		СчетаУчета = СведенияОНоменклатуре.СчетаУчета;
	ИначеЕсли СведенияОНоменклатуре.Свойство("СчетУчетаБУ") Тогда
		// СведенияОНоменклатуре - структура счетов учета номенклатуры
		СчетаУчета = СведенияОНоменклатуре;
	Иначе
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СчетаУчета.СчетУчетаБУ) Тогда
		Если ВключаяЗаполненные ИЛИ НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СчетУчета) Тогда
			СтрокаТабличнойЧасти.СчетУчета = СчетаУчета.СчетУчетаБУ;
		КонецЕсли;		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СчетаУчета.СчетУчетаНУ) Тогда
		Если ВключаяЗаполненные ИЛИ НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СчетУчетаНУ) Тогда			
			СтрокаТабличнойЧасти.СчетУчетаНУ = СчетаУчета.СчетУчетаНУ;
		КонецЕсли;                                                                    		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СчетаУчета.СчетСебестоимостиПриРеализацииБУ) Тогда
		
		Если СтрокаТабличнойЧасти.НовыйСчетУчета <> ДанныеОбъекта.Подразделение.СчетУчетаСО Тогда//СчетаУчета.СчетСебестоимостиПриРеализацииБУ Тогда
			Для Счетчик = 1 По 3 Цикл
				СтрокаТабличнойЧасти["СубконтоЗатратБУ" + Счетчик] = Неопределено;
			КонецЦикла;
		КонецЕсли;
		
		СтрокаТабличнойЧасти.НовыйСчетУчета = ДанныеОбъекта.Подразделение.СчетУчетаСО; //СчетаУчета.СчетСебестоимостиПриРеализацииБУ; 
		ПроцедурыБухгалтерскогоУчета.ЗаполнитьАналитикуСчетаТабличнойЧасти(СтрокаТабличнойЧасти, СчетаУчета, "СубконтоСебестоимостиБУ", "НовыйСчетУчета", "СубконтоЗатратБУ");
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СчетаУчета.СчетСебестоимостиПриРеализацииНУ) Тогда
		
		Если СтрокаТабличнойЧасти.СчетЗатратНУ <> СчетаУчета.СчетСебестоимостиПриРеализацииНУ Тогда
			Для Счетчик = 1 По 3 Цикл
				СтрокаТабличнойЧасти["СубконтоЗатратНУ" + Счетчик] = Неопределено;
			КонецЦикла;
		КонецЕсли;

		СтрокаТабличнойЧасти.СчетЗатратНУ = СчетаУчета.СчетСебестоимостиПриРеализацииНУ;
		ПроцедурыБухгалтерскогоУчета.ЗаполнитьАналитикуСчетаТабличнойЧасти(СтрокаТабличнойЧасти, СчетаУчета, "СубконтоСебестоимостиНУ", "СчетЗатратНУ", "СубконтоЗатратНУ");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СчетаУчета.СчетУчетаНДСПоПриобретению) Тогда
		Если ВключаяЗаполненные ИЛИ НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СчетУчетаНДС) Тогда			
			СтрокаТабличнойЧасти.СчетУчетаНДС = СчетаУчета.СчетУчетаНДСПоПриобретению;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Производит заполнение и установку реквизитов налогового учета и НДС в табличной части
//
Процедура ЗаполнитьРеквизитыНалоговогоУчета(ДанныеОбъекта, СтрокаТабличнойЧасти, ИмяТабличнойЧасти) Экспорт
	
	МетаданныеДокумента = ДанныеОбъекта.Ссылка.Метаданные();
	ОбработкаТабличныхЧастей.ЗаполнитьНДСВидОборотаТабЧасти(СтрокаТабличнойЧасти, ДанныеОбъекта, ИмяТабличнойЧасти, МетаданныеДокумента);
	ОбработкаТабличныхЧастей.ЗаполнитьНДСВидПоступленияТабЧасти(СтрокаТабличнойЧасти, ИмяТабличнойЧасти, МетаданныеДокумента, Пользователи.ТекущийПользователь());

КонецПроцедуры

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// ПОДГОТОВКА ПАРАМЕТРОВ ПРОВЕДЕНИЯ ДОКУМЕНТА

Функция ПодготовитьПараметрыПроведения(ДокументСсылка, Отказ) Экспорт

	ПараметрыПроведения = Новый Структура;

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("Содержание", НСтр("ru='Списание ТМЗ'"));
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета",	Константы.ВалютаРегламентированногоУчета.Получить());
	
	НомераТаблиц = Новый Структура;
	
	Запрос.Текст = ТекстЗапросаРеквизитыДокумента(НомераТаблиц);
	Результат = Запрос.ВыполнитьПакет();
	ТаблицаРеквизиты = Результат[НомераТаблиц["Реквизиты"]].Выгрузить();
	ПараметрыПроведения.Вставить("Реквизиты", ТаблицаРеквизиты);
	
	Реквизиты = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ТаблицаРеквизиты[0]);
	
	Если НЕ УчетнаяПолитикаСервер.Существует(Реквизиты.Организация, Реквизиты.Период, "БУ", Истина, ДокументСсылка)
		ИЛИ НЕ УчетнаяПолитикаСервер.Существует(Реквизиты.Организация, Реквизиты.Период, "НУ", Истина, ДокументСсылка)Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат ПараметрыПроведения;
	КонецЕсли;
	
	ОрганизацияПлательщикНалогаНаПрибыль 			= ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период);
	ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль 	= ОрганизацияПлательщикНалогаНаПрибыль И ПроцедурыНалоговогоУчета.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль(Реквизиты.Организация, Реквизиты.Период);
	
	НеобходимостьОтраженияВНУ 						= (ОрганизацияПлательщикНалогаНаПрибыль И Реквизиты.УчитыватьКПН) И (ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль ИЛИ Реквизиты.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ);
	
	Реквизиты.Вставить("ОрганизацияПлательщикНалогаНаПрибыль", 			 ОрганизацияПлательщикНалогаНаПрибыль);
	Реквизиты.Вставить("ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль", ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль);
	Реквизиты.Вставить("НеобходимостьОтраженияВНУ", 					 НеобходимостьОтраженияВНУ);
	
	ПараметрыПроведения.Реквизиты.ЗаполнитьЗначения(НеобходимостьОтраженияВНУ, "НеобходимостьОтраженияВНУ");
	ПараметрыПроведения.Реквизиты.ЗаполнитьЗначения(ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль, "ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль");
	
	Запрос.УстановитьПараметр("СинонимТовары",	НСтр("ru = 'Товары'"));
	Запрос.УстановитьПараметр("СинонимТоварыНДС",	НСтр("ru = 'ТоварыНДС'"));
	Запрос.УстановитьПараметр("НеобходимостьОтраженияВНУ",	НеобходимостьОтраженияВНУ);
	
	Налогоплательщик = Реквизиты.Организация;
	Если ПолучитьФункциональнуюОпцию("ПоддержкаРаботыСоСтруктурнымиПодразделениями") Тогда
		
		Налогоплательщик = ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(Реквизиты.СтруктурноеПодразделение,
																	Реквизиты.Организация,
																	Перечисления.РазделыНалоговогоУчета.НДС);
	КонецЕсли;	
	
	Реквизиты.Вставить("Налогоплательщик", Налогоплательщик);
	
	ПараметрыПроведения.Реквизиты.ЗаполнитьЗначения(Налогоплательщик, "Налогоплательщик");
	
	НомераТаблиц = Новый Структура;

	Запрос.Текст	= ТекстЗапросаВременныеТаблицыДокумента(Реквизиты,НомераТаблиц)
					+ ТекстЗапросаСписаниеТоваров(НомераТаблиц)
					+ ТекстЗапросаСписаниеТоваровНДС(НомераТаблиц)
					+ ТекстЗапросаТоварыОрганизаций(Реквизиты, НомераТаблиц, ПараметрыПроведения);

	
	Если НЕ ПустаяСтрока(Запрос.Текст) Тогда 
		Результат = Запрос.ВыполнитьПакет();
		Для Каждого НомерТаблицы Из НомераТаблиц Цикл
			ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат[НомерТаблицы.Значение].Выгрузить());
		КонецЦикла;
	КонецЕсли;
	
	Возврат ПараметрыПроведения;

КонецФункции

Функция ТекстЗапросаРеквизитыДокумента(НомераТаблиц)
	НомераТаблиц.Вставить("ВременнаяТаблицаСоставДокумента", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВременнаяТаблицаРеквизиты", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("Реквизиты", НомераТаблиц.Количество());
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	МАКСИМУМ(СоставДокумента.ЕстьТовары) КАК ЕстьТовары,
	               |	МАКСИМУМ(СоставДокумента.ЕстьНомераГТД) КАК ЕстьНомераГТД
	               |ПОМЕСТИТЬ СоставДокумента
	               |ИЗ
	               |	(ВЫБРАТЬ ПЕРВЫЕ 1
	               |		ИСТИНА КАК ЕстьТовары,
	               |		ЛОЖЬ КАК ЕстьНомераГТД
	               |	ИЗ
	               |		Документ.ВедомостьВыдачиСпецодежды.Товары КАК ТаблицаДокумента
	               |	ГДЕ
	               |		ТаблицаДокумента.Ссылка = &Ссылка
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ ПЕРВЫЕ 1
	               |		ЛОЖЬ,
	               |		ИСТИНА
	               |	ИЗ
	               |		Документ.ВедомостьВыдачиСпецодежды.НомераГТД КАК ТаблицаДокумента
	               |	ГДЕ
	               |		ТаблицаДокумента.Ссылка = &Ссылка) КАК СоставДокумента
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Реквизиты.Ссылка КАК Регистратор,
	               |	Реквизиты.Ссылка КАК Ссылка,
	               |	Реквизиты.Дата КАК Период,
	               |	""Списание"" КАК ТипСписания,
	               |	Реквизиты.Ссылка КАК ДокументРеализации,
	               |	Реквизиты.Организация КАК Организация,
	               |	Реквизиты.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	               |	Реквизиты.СтруктурноеПодразделение КАК КорСтруктурноеПодразделение,
	               |	Реквизиты.УчитыватьКПН КАК УчитыватьКПН,
	               |	Реквизиты.ВидУчетаНУ КАК ВидУчетаНУ,
	               |	НЕОПРЕДЕЛЕНО КАК Контрагент,
	               |	&ВалютаРегламентированногоУчета КАК ВалютаВзаиморасчетов,
	               |	&Содержание КАК Содержание,
	               |	Реквизиты.УчитыватьНДС КАК УчитыватьНДС,
	               |	Реквизиты.СубконтоЗатратНДСБУ1 КАК СубконтоЗатратНДСБУ1,
	               |	Реквизиты.СубконтоЗатратНДСБУ2 КАК СубконтоЗатратНДСБУ2,
	               |	Реквизиты.СубконтоЗатратНДСБУ3 КАК СубконтоЗатратНДСБУ3,
	               |	Реквизиты.СубконтоЗатратНДСНУ1 КАК СубконтоЗатратНДСНУ1,
	               |	Реквизиты.СубконтоЗатратНДСНУ2 КАК СубконтоЗатратНДСНУ2,
	               |	Реквизиты.СубконтоЗатратНДСНУ3 КАК СубконтоЗатратНДСНУ3,
	               |	Реквизиты.СчетЗатратНДСБУ КАК СчетЗатратНДСБУ,
	               |	Реквизиты.СчетЗатратНДСНУ КАК СчетЗатратНДСНУ,
	               |	Реквизиты.КорректироватьНДС КАК КорректироватьНДС,
	               |	ЛОЖЬ КАК НеобходимостьОтраженияВНУ,
	               |	ЛОЖЬ КАК ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль,
	               |	НЕОПРЕДЕЛЕНО КАК Налогоплательщик,
	               |	Реквизиты.Склад КАК Склад,
	               |	Реквизиты.МОЛОтправитель КАК МОЛОтправитель,
	               |	Реквизиты.МОЛПолучатель КАК МОЛПолучатель
	               |ПОМЕСТИТЬ Реквизиты
	               |ИЗ
	               |	Документ.ВедомостьВыдачиСпецодежды КАК Реквизиты
	               |ГДЕ
	               |	Реквизиты.Ссылка = &Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Реквизиты.Регистратор КАК Регистратор,
	               |	Реквизиты.Период КАК Период,
	               |	Реквизиты.ТипСписания КАК ТипСписания,
	               |	Реквизиты.ДокументРеализации КАК ДокументРеализации,
	               |	Реквизиты.Организация КАК Организация,
	               |	Реквизиты.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	               |	Реквизиты.КорСтруктурноеПодразделение КАК КорСтруктурноеПодразделение,
	               |	Реквизиты.УчитыватьКПН КАК УчитыватьКПН,
	               |	Реквизиты.ВидУчетаНУ КАК ВидУчетаНУ,
	               |	Реквизиты.Контрагент КАК Контрагент,
	               |	Реквизиты.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	               |	Реквизиты.Содержание КАК Содержание,
	               |	Реквизиты.УчитыватьНДС КАК УчитыватьНДС,
	               |	Реквизиты.СубконтоЗатратНДСБУ1 КАК СубконтоЗатратНДСБУ1,
	               |	Реквизиты.СубконтоЗатратНДСБУ2 КАК СубконтоЗатратНДСБУ2,
	               |	Реквизиты.СубконтоЗатратНДСБУ3 КАК СубконтоЗатратНДСБУ3,
	               |	Реквизиты.СубконтоЗатратНДСНУ1 КАК СубконтоЗатратНДСНУ1,
	               |	Реквизиты.СубконтоЗатратНДСНУ2 КАК СубконтоЗатратНДСНУ2,
	               |	Реквизиты.СубконтоЗатратНДСНУ3 КАК СубконтоЗатратНДСНУ3,
	               |	Реквизиты.СчетЗатратНДСБУ КАК СчетЗатратНДСБУ,
	               |	Реквизиты.СчетЗатратНДСНУ КАК СчетЗатратНДСНУ,
	               |	Реквизиты.КорректироватьНДС КАК КорректироватьНДС,
	               |	Реквизиты.НеобходимостьОтраженияВНУ КАК НеобходимостьОтраженияВНУ,
	               |	Реквизиты.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль КАК ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль,
	               |	Реквизиты.Налогоплательщик КАК Налогоплательщик,
	               |	Реквизиты.Склад КАК Склад,
	               |	ЕСТЬNULL(СоставДокумента.ЕстьТовары, ЛОЖЬ) КАК ЕстьТовары,
	               |	ЕСТЬNULL(СоставДокумента.ЕстьНомераГТД, ЛОЖЬ) КАК ЕстьНомераГТД,
	               |	Реквизиты.МОЛОтправитель КАК МОЛОтправитель,
	               |	Реквизиты.МОЛПолучатель КАК МОЛПолучатель
	               |ИЗ
	               |	Реквизиты КАК Реквизиты
	               |		ЛЕВОЕ СОЕДИНЕНИЕ СоставДокумента КАК СоставДокумента
	               |		ПО (ИСТИНА)";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаВременныеТаблицыДокумента(Реквизиты,НомераТаблиц)

	НомераТаблиц.Вставить("ВременнаяТаблицаТовары", НомераТаблиц.Количество());

	Если Реквизиты.ЕстьТовары Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаТовары.Ссылка,
		|	ТаблицаТовары.НомерСтроки,
		|	ТаблицаТовары.Номенклатура,
		|	Выразить(ТаблицаТовары.Количество * ТаблицаТовары.Коэффициент КАК ЧИСЛО(19, 3)) КАК Количество,
		|	ТаблицаТовары.СчетУчета КАК СчетУчетаБУ,       
		|	ТаблицаТовары.НДСВидОборота,
		|	ТаблицаТовары.НДСВидПоступления,
		|	ТаблицаТовары.СтавкаНДС,
		|	ТаблицаТовары.СубконтоЗатратБУ1 КАК СубконтоЗатратБУ1, 
		|	ТаблицаТовары.СубконтоЗатратБУ2 КАК СубконтоЗатратБУ2, 
		|	ТаблицаТовары.Ссылка.Подразделение КАК СубконтоЗатратБУ3,     //Подразделение
		|	ТаблицаТовары.СубконтоЗатратНУ1,
		|	ТаблицаТовары.СубконтоЗатратНУ2,
		|	ТаблицаТовары.СубконтоЗатратНУ3,
		|	ТаблицаТовары.НовыйСчетУчета КАК СчетЗатратБУ, 
		|	ТаблицаТовары.СчетЗатратНУ,
		|	ТаблицаТовары.СчетУчетаНДС,
		|	ТаблицаТовары.СчетУчетаНУ,
		|	ТаблицаТовары.КлючСвязи,
		|	ТаблицаТовары.Коэффициент КАК Коэффициент
		|ПОМЕСТИТЬ ТаблицаТовары
		|ИЗ
		|	Документ.ВедомостьВыдачиСпецодежды.Товары КАК ТаблицаТовары
		|ГДЕ
		|	ТаблицаТовары.Ссылка = &Ссылка"
		+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	КонецЕсли;
	
	НомераТаблиц.Вставить("ВременнаяТаблицаНомераГТД", НомераТаблиц.Количество());		
	ТекстЗапроса = ТекстЗапроса + "
	|	ВЫБРАТЬ
	|	ТаблицаНомераГТД.НомерСтроки,
	|	ТаблицаНомераГТД.Количество Количество,
	|	ТаблицаНомераГТД.НомерГТД КАК НомерГТД,
	|	ТаблицаНомераГТД.КлючСвязи
	|ПОМЕСТИТЬ ТаблицаНомераГТД
	|ИЗ
	|	Документ.ВедомостьВыдачиСпецодежды.НомераГТД КАК ТаблицаНомераГТД
	|ГДЕ
	|	ТаблицаНомераГТД.Ссылка = &Ссылка"
	+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();	
	
	Возврат ТекстЗапроса ;

КонецФункции

Функция ТекстЗапросаСписаниеТоваров(НомераТаблиц)
	
	НомераТаблиц.Вставить("СписаниеТоваровТаблицаТовары", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	""Товары"" КАК ИмяСписка,
	|	&СинонимТовары КАК СинонимСписка,
	|	Реквизиты.Период КАК Период,
	|	ТаблицаТовары.НомерСтроки,
	|	ТаблицаТовары.СчетУчетаБУ,
	|	ТаблицаТовары.СчетУчетаНУ,
	|	ТаблицаТовары.Номенклатура,
	|	Реквизиты.Склад КАК Склад,
	|   ТаблицаТовары.Количество КАК Количество,
	|	Реквизиты.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	|	Реквизиты.СтруктурноеПодразделение КАК КорСтруктурноеПодразделение,
	|	0 КАК Себестоимость,
	|	0 КАК Сумма,
	|	0 КАК СуммаВал,
	|	НЕОПРЕДЕЛЕНО КАК ДокументОприходования,
	|	ТаблицаТовары.СчетЗатратБУ КАК КорСчетСписанияБУ,     
	|	ТаблицаТовары.СубконтоЗатратБУ1 КАК КорСубконтоБУ1,
	|	ТаблицаТовары.СубконтоЗатратБУ2 КАК КорСубконтоБУ2,
	|	ТаблицаТовары.СубконтоЗатратБУ3 КАК КорСубконтоБУ3,
	|	НЕОПРЕДЕЛЕНО КАК ВидКорСубконтоБУ1,
	|	НЕОПРЕДЕЛЕНО КАК ВидКорСубконтоБУ2,
	|	НЕОПРЕДЕЛЕНО КАК ВидКорСубконтоБУ3,
	|	ТаблицаТовары.СчетЗатратНУ КАК КорСчетСписанияНУ,
	|	ТаблицаТовары.СубконтоЗатратНУ1 КАК КорСубконтоНУ1,
	|	ТаблицаТовары.СубконтоЗатратНУ2 КАК КорСубконтоНУ2,
	|	ТаблицаТовары.СубконтоЗатратНУ3 КАК КорСубконтоНУ3,
	|	НЕОПРЕДЕЛЕНО КАК ВидКорСубконтоНУ1,
	|	НЕОПРЕДЕЛЕНО КАК ВидКорСубконтоНУ2,
	|	НЕОПРЕДЕЛЕНО КАК ВидКорСубконтоНУ3,
	|	Реквизиты.УчитыватьНДС,
	|	Реквизиты.КорректироватьНДС
	|ИЗ
	|		ТаблицаТовары КАК ТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|		ПО (ИСТИНА)
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаТовары.НомерСтроки";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
		
КонецФункции

Функция ТекстЗапросаСписаниеТоваровНДС(НомераТаблиц)
	
	НомераТаблиц.Вставить("СписаниеТоваровТаблицаТоварыНДС", НомераТаблиц.Количество());

	ТекстЗапроса =
	"   ВЫБРАТЬ
	|	""ТоварыНДС"" КАК ИмяСписка,
	|	&СинонимТоварыНДС КАК СинонимСписка,
	|	Реквизиты.Период КАК Период,
	|	ТаблицаТовары.НомерСтроки,
	|	ТаблицаТовары.Номенклатура,
	|	Реквизиты.СтруктурноеПодразделение КАК КорСтруктурноеПодразделение,
	|	ТаблицаТовары.СчетУчетаНДС,
	|	ТаблицаТовары.СтавкаНДС,
	|	ТаблицаТовары.НДСВидОборота,
	|	ТаблицаТовары.НДСВидПоступления
	|ИЗ
	|	ТаблицаТовары КАК ТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|		ПО (ИСТИНА)
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаТовары.НомерСтроки";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
		
КонецФункции

Функция ТекстЗапросаТоварыОрганизаций(Реквизиты,НомераТаблиц,ПараметрыПроведения)
	
	НомераТаблиц.Вставить("ТаблицаТоварыОрганизаций", НомераТаблиц.Количество());		
		
	ТекстЗапроса = НомераГТДСервер.ТекстЗапросаТоварыОрганизацийРасход();

	Возврат ТекстЗапроса;   		
	
КонецФункции

// ЗАПОЛНЕНИЕ ДОКУМЕНТА ПО ОСНОВАНИЮ

// Процедура выполняет заполниение табличной части по инвентаризации товаров.
//
// Параметры:
//  ДокументОснование - ссылка на документ основание (инвентаризация товаров).
//
Процедура ЗаполнитьТоварыПоИнвентаризацииТоваров(ДанныеОбъекта, ДокументОснование) Экспорт

	// Заполним реквизиты из стандартного набора по документу основанию.
	ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ДанныеОбъекта, ДокументОснование);

	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ДокументСсылка"		   , ДанныеОбъекта.Ссылка);
	Запрос.УстановитьПараметр("ДокументОснованиеСсылка", ДокументОснование);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Док.Номенклатура,
	|	Док.ЕдиницаИзмерения,
	|	Док.Ссылка.Склад КАК Склад,
	|	Док.СчетУчетаБУ КАК СчетУчетаБУ,
	|	МАКСИМУМ(Док.КоличествоУчет - Док.Количество) КАК КоличествоОтклонение,
	|	ВЫБОР
	|		КОГДА СУММА(ВложенныйЗапрос.Количество) ЕСТЬ NULL 
	|			ТОГДА 0
	|		ИНАЧЕ СУММА(ВложенныйЗапрос.Количество)
	|	КОНЕЦ КАК КоличествоСписанное
	|ИЗ
	|	Документ.ИнвентаризацияТоваровНаСкладе.Товары КАК Док
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ДокСписание.Номенклатура КАК Номенклатура,
	|			ДокСписание.Ссылка.Склад КАК Склад,
	|			ДокСписание.Количество КАК Количество
	|		ИЗ
	|			Документ.СписаниеТоваров.Товары КАК ДокСписание
	|		ГДЕ
	|			ДокСписание.Ссылка <> &ДокументСсылка
	|			И ДокСписание.Ссылка.Проведен
	|			И ДокСписание.Ссылка.ДокументОснование = &ДокументОснованиеСсылка) КАК ВложенныйЗапрос
	|		ПО Док.Номенклатура = ВложенныйЗапрос.Номенклатура
	|			И Док.Ссылка.Склад = ВложенныйЗапрос.Склад
	|ГДЕ
	|	Док.Ссылка = &ДокументОснованиеСсылка
	|	И Док.КоличествоУчет - Док.Количество > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	Док.Номенклатура,
	|	Док.ЕдиницаИзмерения,
	|	Док.Ссылка.Склад,
	|	Док.СчетУчетаБУ";

	РезультатЗапроса = Запрос.Выполнить();

	ДанныеОбъекта.Склад = ДокументОснование.Склад;

	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл

		КоличествоСписать = Выборка.КоличествоОтклонение - Выборка.КоличествоСписанное;

		Если КоличествоСписать <= 0 Тогда
			Продолжить;
		КонецЕсли;

		СтрокаТабличнойЧасти = ДанныеОбъекта.Товары.Добавить();

		СтрокаТабличнойЧасти.Номенклатура     = Выборка.Номенклатура;
		СтрокаТабличнойЧасти.СчетУчетаБУ      = Выборка.СчетУчетаБУ;
		СтрокаТабличнойЧасти.ЕдиницаИзмерения = Выборка.ЕдиницаИзмерения;
		СтрокаТабличнойЧасти.Коэффициент      = 1;
		СтрокаТабличнойЧасти.Количество       = КоличествоСписать;
		СтрокаТабличнойЧасти.КлючСвязи = ОбщегоНазначенияБККлиентСервер.НовыйКлючСвязиСтрокиТаблицы(ДанныеОбъекта.Товары);
		// Заполняем реквизиты табличной части.
		ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ДанныеОбъекта, ДанныеОбъекта.Ссылка.Метаданные());
		
	КонецЦикла;
	
	Если ДанныеОбъекта.Товары.Количество() = 0 Тогда
		
		ТекстСообщения = НСтр("ru = 'В документе ""%1 № %2"" отсутствуют товары учетное количество которых превышает фактическое.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, 
			ДокументОснование.Метаданные().Представление(), ДокументОснование.Номер);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ДанныеОбъекта.Ссылка, "ДокументОснование", "Объект");
				
	КонецЕсли;


	Документы.СписаниеТоваров.ЗаполнитьСчетаУчетаВТабличнойЧасти(ДанныеОбъекта, "Товары");
	
	ДанныеОбъекта.ДокументОснование = ДокументОснование;

КонецПроцедуры // ЗаполнитьТоварыПоИнвентаризацииТоваров()

// Процедура выполняет заполниение табличной части по списанию товаров.
//
// Параметры:
//  ДокументОснование - ссылка на документ основание (инвентаризация товаров).
//
Процедура ЗаполнитьТоварыПоПеремещениюТоваров(ДанныеОбъекта, ДокументОснование) Экспорт

	// Заполним реквизиты из стандартного набора по документу основанию.
	ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ДанныеОбъекта, ДокументОснование);

	Запрос = Новый Запрос;                          
	                                                                 
	Запрос.УстановитьПараметр("ДокументСсылка"		   , ДанныеОбъекта.Ссылка);
	Запрос.УстановитьПараметр("ДокументОснованиеСсылка", ДокументОснование);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Док.Номенклатура,
	|	Док.ЕдиницаИзмерения,
	|	Док.Коэффициент КАК Коэффициент,
	|	Док.Ссылка.СкладПолучатель КАК Склад,
	|	Док.НовыйСчетУчетаБУ КАК СчетУчетаБУ,
	|	МАКСИМУМ(Док.Количество) КАК Количество	
	|ИЗ
	|	Документ.ПеремещениеТоваров.Товары КАК Док
	|ГДЕ
	|	Док.Ссылка = &ДокументОснованиеСсылка
	|
	|СГРУППИРОВАТЬ ПО
	|	Док.Номенклатура,
	|	Док.ЕдиницаИзмерения,
	|	Док.Коэффициент,
	|	Док.Ссылка.СкладПолучатель,
	|	Док.НовыйСчетУчетаБУ";

	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Склад = ДокументОснование.СкладПолучатель;		
	
	Пока Выборка.Следующий() Цикл

		СтрокаТабличнойЧасти = ДанныеОбъекта.Товары.Добавить();

		СтрокаТабличнойЧасти.Номенклатура     = Выборка.Номенклатура;
		СтрокаТабличнойЧасти.СчетУчетаБУ      = Выборка.СчетУчетаБУ;
		СтрокаТабличнойЧасти.ЕдиницаИзмерения = Выборка.ЕдиницаИзмерения;
		СтрокаТабличнойЧасти.Коэффициент      = Выборка.Коэффициент;
		СтрокаТабличнойЧасти.Количество       = Выборка.Количество;
		СтрокаТабличнойЧасти.КлючСвязи 		  = ОбщегоНазначенияБККлиентСервер.НовыйКлючСвязиСтрокиТаблицы(ДанныеОбъекта.Товары);	
		// Заполняем реквизиты табличной части.
		ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ДанныеОбъекта, ДанныеОбъекта.Ссылка.Метаданные());
	КонецЦикла;
	
	ЗаполнитьСчетаУчетаВТабличнойЧасти(ДанныеОбъекта, "Товары");
	
	ДанныеОбъекта.ДокументОснование = ДокументОснование;

КонецПроцедуры // ЗаполнитьТоварыПоИнвентаризацииТоваров()
   
// Процедура выполняет заполниение табличной части по инвентаризации товаров.
//
// Параметры:
//  ДокументОснование - ссылка на документ основание (инвентаризация товаров).
//
Процедура ЗаполнитьТоварыПоПоступлениюТоваров(ДанныеОбъекта, ДокументОснование) Экспорт

	// Заполним реквизиты из стандартного набора по документу основанию.
	ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ДанныеОбъекта, ДокументОснование);
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументОснование);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПоступлениеТоваровУслугТовары.Номенклатура КАК Номенклатура,
	|	ПоступлениеТоваровУслугТовары.ЕдиницаИзмерения,
	|	ПоступлениеТоваровУслугТовары.Коэффициент,
	|	ПоступлениеТоваровУслугТовары.Количество,
	|	ПоступлениеТоваровУслугТовары.НДСВидОборота,
	|	ПоступлениеТоваровУслугТовары.НДСВидПоступления,
	|	ПоступлениеТоваровУслугТовары.СчетУчетаБУ,
	|	ПоступлениеТоваровУслугТовары.СчетУчетаНУ,
	|	ПоступлениеТоваровУслугТовары.СчетУчетаНДС,
	|	ПоступлениеТоваровУслугТовары.СтавкаНДС,
	|	ПоступлениеТоваровУслугТовары.НомерГТД КАК НомерГТД
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
	|ГДЕ
	|	ПоступлениеТоваровУслугТовары.Ссылка = &ДокументСсылка";

	ВыборкаОсновная = Запрос.Выполнить().Выбрать();
	  	          
	Склад = ДокументОснование.Склад;
	
	СтруктураПоиска = Новый Структура;
	
	Пока ВыборкаОсновная.Следующий() Цикл
		                                             
		СтруктураПоиска.Вставить("Номенклатура",     ВыборкаОсновная.Номенклатура); 
		СтруктураПоиска.Вставить("СчетУчетаБУ",      ВыборкаОсновная.СчетУчетаБУ);
		СтруктураПоиска.Вставить("СчетУчетаНУ",      ВыборкаОсновная.СчетУчетаБУ);
		СтруктураПоиска.Вставить("ЕдиницаИзмерения", ВыборкаОсновная.ЕдиницаИзмерения);
		СтруктураПоиска.Вставить("СтавкаНДС",        ВыборкаОсновная.СтавкаНДС);
		СтруктураПоиска.Вставить("НДСВидОборота",    ВыборкаОсновная.НДСВидОборота);
		СтруктураПоиска.Вставить("НДСВидПоступления",ВыборкаОсновная.НДСВидПоступления);
		
		СтрокаТабличнойЧасти = НомераГТДСервер.ЗаполнитьТабличныеЧастиСУчетомНомеровГТД(СтруктураПоиска, ВыборкаОсновная, ДанныеОбъекта.Товары, ДанныеОбъекта.НомераГТД);

	КонецЦикла;
	
	ЗаполнитьСчетаУчетаВТабличнойЧасти(ДанныеОбъекта, "Товары");
	
	ДанныеОбъекта.ДокументОснование = ДокументОснование;

КонецПроцедуры // ЗаполнитьТоварыПоПоступлениюТоваров()

// Процедура выполняет заполниение табличной части по инвентаризации товаров.
//
// Параметры:
//  ДокументОснование - ссылка на документ основание (инвентаризация товаров).
//
Процедура ЗаполнитьТоварыПоАвансовомуОтчету(ДанныеОбъекта, ДокументОснование) Экспорт

	// Заполним реквизиты из стандартного набора по документу основанию.
	ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ДанныеОбъекта, ДокументОснование);

	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументОснование);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	АвансовыйОтчетТовары.Номенклатура,
	|	АвансовыйОтчетТовары.ЕдиницаИзмерения,
	|	АвансовыйОтчетТовары.Коэффициент,
	|	АвансовыйОтчетТовары.Количество,
	|	АвансовыйОтчетТовары.НДСВидОборота,
	|	АвансовыйОтчетТовары.НДСВидПоступления,
	|	АвансовыйОтчетТовары.СчетУчетаБУ,
	|	АвансовыйОтчетТовары.СчетУчетаНУ,
	|	АвансовыйОтчетТовары.СчетУчетаНДС,
	|	АвансовыйОтчетТовары.СтавкаНДС
	|ИЗ
	|	Документ.АвансовыйОтчет.Товары КАК АвансовыйОтчетТовары
	|ГДЕ
	|	АвансовыйОтчетТовары.Ссылка = &ДокументСсылка";

	РезультатЗапроса = Запрос.Выполнить();

	ДанныеОбъекта.Склад = ДокументОснование.Склад;

	Выборка = РезультатЗапроса.Выбрать();
	
	СтруктураПоиска = Новый Структура;
	
	Пока Выборка.Следующий() Цикл
		                                             
		СтруктураПоиска.Вставить("Номенклатура",     Выборка.Номенклатура); 
		СтруктураПоиска.Вставить("СчетУчетаБУ",      Выборка.СчетУчетаБУ);
		СтруктураПоиска.Вставить("СчетУчетаНУ",      Выборка.СчетУчетаНУ);
		СтруктураПоиска.Вставить("ЕдиницаИзмерения", Выборка.ЕдиницаИзмерения);
		СтруктураПоиска.Вставить("СтавкаНДС",        Выборка.СтавкаНДС);
		СтруктураПоиска.Вставить("НДСВидОборота",    Выборка.НДСВидОборота);
		СтруктураПоиска.Вставить("НДСВидПоступления",Выборка.НДСВидПоступления);
		
		СтрокаТабличнойЧасти = НомераГТДСервер.ЗаполнитьТабличныеЧастиСУчетомНомеровГТД(СтруктураПоиска, Выборка, ДанныеОбъекта.Товары, ДанныеОбъекта.НомераГТД);	
		
	КонецЦикла;
	
	ЗаполнитьСчетаУчетаВТабличнойЧасти(ДанныеОбъекта, "Товары");
	
	ДанныеОбъекта.ДокументОснование = ДокументОснование;

КонецПроцедуры // ЗаполнитьТоварыПоПоступлениюТоваров()

////////////////////////////////////////////////////////////////////////////////
// Интерфейс для работы с подсистемой Печать.

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Списание товаров
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Ведомость";
	КомандаПечати.Представление = НСтр("ru = 'Ведомость'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБККлиент.ВыполнитьКомандуПечати";
	КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.Порядок = 50;
	
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	// Печать Списание товаров
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Ведомость") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"Ведомость",
			НСтр("ru = 'Ведомость'"),
			ПечатьВедомости(МассивОбъектов, ОбъектыПечати),
			,
			"Документ.ВедомостьВыдачиСпецодежды.Ведомость");
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Подготовка табличных печатных документов.

// Функция формирует табличный документ с печатной формой ведомости,
//
// Возвращаемое значение:
//  Табличный документ - печатная форма ведомости
//
Функция ПечатьВедомости(МассивОбъектов, ОбъектыПечати) Экспорт

	УстановитьПривилегированныйРежим(Истина);

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Ведомость";
	
	Для Каждого Элемент Из МассивОбъектов Цикл
		Документ = Элемент;
		
		Если ТабДокумент.ВысотаТаблицы > 0 Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		Макет   = УправлениеПечатью.МакетПечатнойФормы("Документ.ВедомостьВыдачиСпецодежды.Ведомость");
		Шапка   = Макет.ПолучитьОбласть("Шапка");
		СтрокаТ = Макет.ПолучитьОбласть("Строка");
		Подвал  = Макет.ПолучитьОбласть("Подвал");
		
		ДанныеМОЛОтправитель = ПроцедурыУправленияПерсоналомВызовСервера.ДанныеФизЛица(Документ.Организация, Документ.МОЛОтправитель, Документ.Дата);
		ДанныеМОЛПолучатель  = ПроцедурыУправленияПерсоналомВызовСервера.ДанныеФизЛица(Документ.Организация, Документ.МОЛПолучатель, Документ.Дата);
		//++ Кубасов Е I-19124 НаименованиеПолное заменно на Наименование 
		Шапка.Параметры.Организация 	= Документ.Организация.Наименование;
		//-- Кубасов Е I-19124 НаименованиеПолное заменно на Наименование 
		Шапка.Параметры.МОЛ 			= ДанныеМОЛПолучатель.Представление;
		Шапка.Параметры.Получатель		= Документ.СкладПолучатель;
		Шапка.Параметры.МОЛОтправитель 	= ДанныеМОЛОтправитель.Представление;
		Шапка.Параметры.ПолучательОтправитель = Документ.Склад;
		Шапка.Параметры.Дата 			= формат(Документ.Дата,"ДФ=""дд.ММ.гггг""");
		Шапка.параметры.подразделение 	= Документ.Подразделение;
		Шапка.параметры.Номер 			= Документ.Номер;
		
		Если ЗначениеЗаполнено(Документ.МОЛПолучатель) тогда
			ДанныеФизЛица = ПроцедурыУправленияПерсоналомВызовСервера.ДанныеФизЛица(Документ.Организация, Документ.МОЛПолучатель, Документ.Дата);
			Шапка.Параметры.должностьМол = ДанныеФизЛица.Должность;
		Конецесли;
		
		Шапка.Параметры.Должность = Документ.ДолжностьДляПодписи;
		ТабДокумент.Вывести(Шапка);
		
		НомерСтроки = 0;
		Для Каждого ТекСтрока Из Документ.Товары Цикл 
			НомерСтроки = НомерСтроки + 1;
			СтрокаТ.Параметры.Заполнить(ТекСтрока);
			СтрокаТ.Параметры.НомНомер = ТекСтрока.Номенклатура.Код;
			СтрокаТ.Параметры.ДатаПоступления = формат(Документ.Дата, "ДФ=""дд.ММ.гггг""");
			СтрокаТ.Параметры.ДатаОкончания = формат(ТекСтрока.ДатаОкончания, "ДФ=""дд.ММ.гггг""");
			СтрокаТ.Параметры.нпп = НомерСтроки;
			ТабДокумент.Вывести(СтрокаТ);
		КонецЦикла;
		
		Если ЗначениеЗаполнено(Документ.Отпустил) Тогда 
			ДанныеФизЛица = ПроцедурыУправленияПерсоналомВызовСервера.ДанныеФизЛица(Документ.Организация, Документ.Отпустил, Документ.Дата);
			Подвал.Параметры.должность = ДанныеФизЛица.Должность;
			Подвал.Параметры.МолОтправитель = ДанныеФизЛица.Представление;
		Иначе 
			Подвал.Параметры.должность = ДанныеМОЛОтправитель.Должность;
			Подвал.Параметры.МолОтправитель = ДанныеМОЛОтправитель.Представление;
		Конецесли;
		
		
		ТабДокумент.Вывести(Подвал);
		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	КонецЦикла;	
		
	Возврат ТабДокумент;
	
КонецФункции

#КонецЕсли