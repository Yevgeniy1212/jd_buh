#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

#Область УправлениеДоступом

// Процедура ЗаполнитьНаборыЗначенийДоступа по свойствам объекта заполняет наборы значений доступа
// в таблице с полями:
//    НомерНабора     - Число                                     (необязательно, если набор один),
//    ВидДоступа      - ПланВидовХарактеристикСсылка.ВидыДоступа, (обязательно),
//    ЗначениеДоступа - Неопределено, СправочникСсылка или др.    (обязательно),
//    Чтение          - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Добавление      - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Изменение       - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Удаление        - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//
//  Вызывается из процедуры УправлениеДоступомСлужебный.ЗаписатьНаборыЗначенийДоступа(),
// если объект зарегистрирован в "ПодпискаНаСобытие.ЗаписатьНаборыЗначенийДоступа" и
// из таких же процедур объектов, у которых наборы значений доступа зависят от наборов этого
// объекта (в этом случае объект зарегистрирован в "ПодпискаНаСобытие.ЗаписатьЗависимыеНаборыЗначенийДоступа").
//
// Параметры:
//  Таблица      - ТабличнаяЧасть,
//                 РегистрСведенийНаборЗаписей.НаборыЗначенийДоступа,
//                 ТаблицаЗначений, возвращаемая УправлениеДоступом.ТаблицаНаборыЗначенийДоступа().
//
Процедура ЗаполнитьНаборыЗначенийДоступа(Таблица) Экспорт
	
	УчетТоваров.ЗаполнитьНаборыПоОрганизацииСтрутурномуПодразделениюСкладу(ЭтотОбъект, Таблица, "Организация", "СтруктурноеПодразделение", "Склад");
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение И НомераГТДСервер.ВедетсяУчетПоТоварамОрганизаций(Дата) Тогда
		ТаблицаДокумента = НомераГТДСервер.ПодготовитьТаблицуТоваровСУчетомСкладовВТЧ(Товары, Истина, Склад);
		ТаблицаНомераГТД = НомераГТДСервер.ПодготовитьТаблицуНомеровГТД(ТаблицаДокумента, НомераГТД.Выгрузить());
		НомераГТДСервер.ЗаполнитьТаблицуНомераГТД(ЭтотОбъект,ТаблицаДокумента, ТаблицаНомераГТД);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)

	//++Кубасов Е I-19991 Перехватываю и меняю значения
	ЭтотОбъект.СписаноСоСклада		= Ложь;	
	ЭтотОбъект.Автор 				= Пользователи.ТекущийПользователь();
	//--Кубасов Е I-19991 Перехватываю и меняю значения 
	
	
	ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета(),,, ОбъектКопирования.Ссылка);

	Если ЗначениеЗаполнено(ОбъектКопирования.НомераГТД) Тогда
		НомераГТД.Очистить();
	КонецЕсли;  	
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА
	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
	
	Если РучнаяКорректировка Тогда
		Возврат;
	КонецЕсли;

	ПараметрыПроведения = Документы.ВедомостьВыдачиСпецодежды.ПодготовитьПараметрыПроведения(Ссылка, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	//Евгений+
	Если НЕ БезБухПроводок Тогда
		
		// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ИНФОРМАЦИОННОЙ БАЗЫ
		
		// Таблица списанных товаров
		ТаблицаСписанныеТовары = УчетТоваров.ПодготовитьТаблицуСписанныеТовары(ПараметрыПроведения.СписаниеТоваровТаблицаТовары,
		ПараметрыПроведения.Реквизиты, Отказ);
		
		// дополним таблицу списанных товаров данными по НДС
		ТаблицаСписанныеТоварыНДС =  УчетНДСИАкциза.ПодготовитьТаблицуСписанныеТоварыНДС(ТаблицаСписанныеТовары,
		ПараметрыПроведения.Реквизиты, ПараметрыПроведения.СписаниеТоваровТаблицаТоварыНДС,  Отказ);
		
		//КОНТРОЛЬ ПО РЕГИСТРУ "ТОВАРЫ ОРГАНИЗАЦИЙ
		НомераГТДСервер.ВыполнитьКонтрольТоварыОрганизаций(ПараметрыПроведения.ТаблицаТоварыОрганизаций,
		ПараметрыПроведения.Реквизиты, , Отказ);
		
		// ФОРМИРОВАНИЕ ДВИЖЕНИЙ
		
		// Товары организаций
		НомераГТДСервер.СформироватьДвиженияТоварыОрганизаций(ПараметрыПроведения.ТаблицаТоварыОрганизаций,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);		
		
		УчетТоваров.СформироватьДвиженияСписаниеТоваров(ТаблицаСписанныеТовары,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
		
		УчетНДСИАкциза.СформироватьДвиженияСписаниеТоваров(ТаблицаСписанныеТоварыНДС,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
		
		// Отражение ПР в НУ 
		//ПроцедурыНалоговогоУчета.ОтразитьПостоянныеРазницыВНУ(ПараметрыПроведения.Реквизиты, Движения, Отказ);
		
		
		//Евгений+ 
		Для Каждого Проводка Из Движения.Типовой Цикл
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, МОЛОтправитель);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Подразделения", Подразделение);
			//ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НоменклатурныеГруппы", Справочники.НоменклатурныеГруппы.НайтиПоКоду("А00000001"));
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтатьиЗатрат", Справочники.СтатьиЗатрат.НайтиПоКоду("000339"));
			
		КонецЦикла;
		
		//Если БезБухПроводок Тогда
		//	Движения.Типовой.Очистить();
		//	Движения.Налоговый.Очистить();
	КонецЕсли;
	//Евгений-
	
	Если НЕ Отказ Тогда
		ТаблицаТоваров = ПолучитьТаблицуТоваров();
		
		Если ОприходоватьНаЗабалансовыйСчет Тогда
			СформироватьЗаписиПоЗабалансу(Отказ, ТаблицаТоваров);
		КонецЕсли;
		
		СформироватьЗаписиПоСпецОдежде(Отказ, ТаблицаТоваров);			
	КонецЕсли;

	//Если НЕ Отказ Тогда
	//	ДвиженияБУ = Движения.Типовой.Выгрузить();
	//	Для Каждого СтрокаТаб Из Товары Цикл
	//		
	//		СтрокаТаб.Сумма = СтрокаТаб.Сумма;
	//		СтрокаТаб.Цена = СтрокаТаб.Сумма / СтрокаТаб.Количество;
	//		
	//		СтрокаТаб.Сумма = ДвиженияБУ[СтрокаТаб.НомерСтроки - 1].Сумма;
	//		СтрокаТаб.Цена = СтрокаТаб.Сумма / СтрокаТаб.Количество;
	//	КонецЦикла;
	//	Записать(РежимЗаписиДокумента.Запись);
	//КонецЕсли;
	
	//Если НЕ Отказ Тогда
	//	Если НЕ Рост = 0 И НЕ Одежда = 0 И НЕ Обувь = 0 И НЕ ГолУбор = 0 Тогда
	//		РегистрыСведений.РазмерыСпецОдежды.ЗаписатьРазмерыФизЛица(МОЛПолучатель, Рост, Одежда, Обувь, ГолУбор);
	//	КонецЕсли;			
	//КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьТаблицуТоваров()
	
/// По счету 1317 перепутаны субконто, поэтому через ВЫБОР КОГДА

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ДвиженияТиповой.СчетКт КАК СчетКт,
	               |	ВЫБОР
	               |		КОГДА ДвиженияТиповой.СубконтоКт1 ССЫЛКА Справочник.Номенклатура
	               |			ТОГДА ДвиженияТиповой.СубконтоКт1
	               |		ИНАЧЕ ДвиженияТиповой.СубконтоКт2
	               |	КОНЕЦ КАК Номенклатура,
	               |	ДвиженияТиповой.Сумма КАК Сумма,
	               |	ДвиженияТиповой.НомерСтроки КАК НомерСтроки
	               |ПОМЕСТИТЬ ДвиженияТиповой
	               |ИЗ
	               |	&ДвиженияТиповой КАК ДвиженияТиповой
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	СписаниеТоваров.Номенклатура КАК Номенклатура,
	               |	СписаниеТоваров.Количество КАК Количество,
	               |	ДвиженияТиповой.Сумма КАК Сумма,
	               |	ДвиженияТиповой.Сумма / СписаниеТоваров.Количество КАК Цена,
	               |	СписаниеТоваров.СрокСлужбы КАК СрокСлужбы,
	               |	СписаниеТоваров.ДатаОкончания КАК ДатаОкончания,
	               |	СписаниеТоваров.ОприходоватьНаЗабалансовыйСчет КАК ОприходоватьНаЗабалансовыйСчет
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		СписаниеТоваровТовары.Ссылка КАК Ссылка,
	               |		СписаниеТоваровТовары.Номенклатура КАК Номенклатура,
	               |		СУММА(СписаниеТоваровТовары.Количество * СписаниеТоваровТовары.Коэффициент) КАК Количество,
	               |		СписаниеТоваровТовары.СчетУчетаБУ КАК СчетУчетаБУ,
	               |		СписаниеТоваровТовары.НомерСтроки КАК НомерСтроки,
	               |		СписаниеТоваровТовары.СрокСлужбы КАК СрокСлужбы,
	               |		СписаниеТоваровТовары.ДатаОкончания КАК ДатаОкончания,
	               |		СписаниеТоваровТовары.ОприходоватьНаЗабалансовыйСчет КАК ОприходоватьНаЗабалансовыйСчет
	               |	ИЗ
	               |		Документ.ВедомостьВыдачиСпецодежды.Товары КАК СписаниеТоваровТовары
	               |	
	               |	СГРУППИРОВАТЬ ПО
	               |		СписаниеТоваровТовары.Ссылка,
	               |		СписаниеТоваровТовары.Номенклатура,
	               |		СписаниеТоваровТовары.СчетУчетаБУ,
	               |		СписаниеТоваровТовары.НомерСтроки,
	               |		СписаниеТоваровТовары.СрокСлужбы,
	               |		СписаниеТоваровТовары.ДатаОкончания,
	               |		СписаниеТоваровТовары.ОприходоватьНаЗабалансовыйСчет) КАК СписаниеТоваров
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			ТиповойДвиженияССубконто.СчетКт КАК СчетКт,
	               |			ТиповойДвиженияССубконто.Номенклатура КАК Номенклатура,
	               |			СУММА(ТиповойДвиженияССубконто.Сумма) КАК Сумма,
	               |			ТиповойДвиженияССубконто.НомерСтроки КАК НомерСтроки
	               |		ИЗ
	               |			ДвиженияТиповой КАК ТиповойДвиженияССубконто
	               |		
	               |		СГРУППИРОВАТЬ ПО
	               |			ТиповойДвиженияССубконто.СчетКт,
	               |			ТиповойДвиженияССубконто.Номенклатура,
	               |			ТиповойДвиженияССубконто.НомерСтроки) КАК ДвиженияТиповой
	               |		ПО СписаниеТоваров.Номенклатура = ДвиженияТиповой.Номенклатура
	               |			И СписаниеТоваров.СчетУчетаБУ = ДвиженияТиповой.СчетКт
	               |			И СписаниеТоваров.НомерСтроки = ДвиженияТиповой.НомерСтроки
	               |ГДЕ
	               |	СписаниеТоваров.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("ДвиженияТиповой", Движения.Типовой.Выгрузить());
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	ТаблицаТоваров = Запрос.Выполнить().Выгрузить();
	Возврат ТаблицаТоваров;
		
КонецФункции

Процедура СформироватьЗаписиПоСпецОдежде(Отказ, ТаблицаТоваров)
	СтатьяСО = Справочники.СтатьиЗатрат.НайтиПоКоду("000339");
	
	Движения.ВыданнаяСО.Очистить();
	
	Движения.ВыданнаяСО.Записывать = Истина;
	Движения.СрокСлужбыСО.Записывать = Истина;
	
	ТаблицаДвижений = Движения.СрокСлужбыСО.Выгрузить();
	ТаблицаДвижений.Очистить();
	
	Для каждого текСтрока из Товары цикл
		
		//Проводка = Движения.Типовой.Добавить();
		//Проводка.Организация                     = Организация;
		//Проводка.Период                          = Дата;
		//Проводка.СчетДт                          = текСтрока.НовыйСчетУчета; 
		//Проводка.СубконтоДт.НоменклатурныеГруппы = текСтрока.Номенклатура.НоменклатурнаяГруппа;
		//Проводка.СубконтоДт.СтатьиЗатрат         = СтатьяСО;
		//Проводка.СубконтоДт.Подразделения        = Подразделение;
		//Проводка.СчетКт                          = текСтрока.СчетУчета;   
		//Проводка.СубконтоКт.Номенклатура         = текСтрока.Номенклатура;
		//Проводка.СубконтоКт.Склады               = Склад;
		//Проводка.СубконтоКт.РаботникиОрганизаций = МОЛПолучатель;
		//Проводка.КоличествоКт                    = текСтрока.Количество;
		//Проводка.Содержание                      = "Возврат СО";
		//Проводка.Сумма                           = текСтрока.Сумма;
		//Движения.Типовой.Записать();
		
		Движение 					= ТаблицаДвижений.Добавить();
		Движение.Номенклатура 		= текСтрока.Номенклатура;
		Движение.СрокСлужбы 		= текстрока.СрокСлужбы;
		Движение.ДатаОкончания 		= текстрока.ДатаОкончания;
		Движение.ДатаВыдачи 		= Дата;
		Движение.СкладПолучатель 	= СкладПолучатель;
		Движение.МОЛПолучатель 		= МОЛПолучатель;
		Движение.Количество			= текстрока.Количество;
		
		Движение = Движения.ВыданнаяСО.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, текСтрока, "Номенклатура,СрокСлужбы,ДатаОкончания,Количество,Цена,Сумма");
		Движение.Период 			= Дата;
		Движение.Склад 				= СкладПолучатель;
		Движение.МОЛ 				= МОЛПолучатель;
		Движение.ДатаВыдачи 		= Дата;
		
	Конеццикла;
	
	Движения.СрокСлужбыСО.мПериод          = Дата;
	Движения.СрокСлужбыСО.мТаблицаДвижений = ТаблицаДвижений;
	Движения.СрокСлужбыСО.ВыполнитьПриход();
КонецПроцедуры

Процедура СформироватьЗаписиПоЗабалансу(Отказ, ТаблицаТоваров)
	
	Для Каждого СтрокаТаб Из ТаблицаТоваров Цикл    
		//Евгений+
		Если Не СтрокаТаб.ОприходоватьНаЗабалансовыйСчет Тогда
			Продолжить;
		КонецЕсли;
		//Евгений-

		Движение = Движения.Типовой.Добавить();
		
		Движение.Активность  = Истина;
		//Евгений+
		Движение.Период = ?(ЗначениеЗаполнено(ДатаПостановкиЗабаланс),ДатаПостановкиЗабаланс,Дата);
		//Движение.Период      = Дата;
		//Евгений-
		Движение.Организация = Организация;
		Движение.Содержание  = "Выдача спецодежды";
		Движение.СчетДт      = ПланыСчетов.Типовой.СписанныеПокупныеМатериалыКомплектующиеИзделия;
		Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконтоТиповые.Номенклатура] = СтрокаТаб.Номенклатура;
		Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконтоТиповые.Склады]       = СкладПолучатель;
		Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконтоТиповые.РаботникиОрганизаций] = МОЛПолучатель;
		Движение.КоличествоДт = СтрокаТаб.Количество;
	КонецЦикла;
	
КонецПроцедуры


Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	
	Если ДанныеЗаполнения <> Неопределено И ТипДанныхЗаполнения <> Тип("Структура") 
		И Метаданные().ВводитсяНаОсновании.Содержит(ДанныеЗаполнения.Метаданные()) Тогда
		ЗаполнитьПоДокументуОснования(ДанныеЗаполнения);
		Возврат;
	КонецЕсли;
	
	ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, ДанныеЗаполнения);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив();
		
	// Проверка заполнения табличной части "Товары"
	Если НЕ ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Организация, Дата) 
		ИЛИ НЕ УчитыватьКПН Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("Товары.СчетЗатратНУ");
		МассивНепроверяемыхРеквизитов.Добавить("Товары.СчетУчетаНУ");
		МассивНепроверяемыхРеквизитов.Добавить("ВидУчетаНУ");
		
		Если НЕ УчитыватьНДС ИЛИ НЕ КорректироватьНДС Тогда
			МассивНепроверяемыхРеквизитов.Добавить("СчетЗатратНДСНУ");
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНДС(Организация, Дата)
		ИЛИ НЕ УчитыватьНДС ИЛИ НЕ КорректироватьНДС Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("СчетЗатратНДСБУ");
		МассивНепроверяемыхРеквизитов.Добавить("СчетЗатратНДСНУ");
		МассивНепроверяемыхРеквизитов.Добавить("Товары.СчетУчетаНДС");
		МассивНепроверяемыхРеквизитов.Добавить("Товары.НДСВидОборота");
		МассивНепроверяемыхРеквизитов.Добавить("Товары.НДСВидПоступления");
		МассивНепроверяемыхРеквизитов.Добавить("Товары.СтавкаНДС");
		МассивНепроверяемыхРеквизитов.Добавить("Товары.НДСВидПоступления");
		МассивНепроверяемыхРеквизитов.Добавить("Товары.Цена");
		МассивНепроверяемыхРеквизитов.Добавить("Товары.Сумма");
		МассивНепроверяемыхРеквизитов.Добавить("Товары.Количество");
		
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
	ПроверитьЗаполнениеТабличнойЧастиПострочно(Отказ);
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеТабличнойЧастиПострочно(Отказ, ПараметрыПроверки = Неопределено)
	
	Для Каждого СтрокаТабличнойЧасти Из Товары Цикл                                                                   
		
		СвойстваСчетаУчета = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТабличнойЧасти.СчетУчета);

		Если НЕ СвойстваСчетаУчета.Забалансовый И НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.НовыйСчетУчета) Тогда
			ТекстСообщения = ОбщегоНазначенияБККлиентСервер.ПолучитьТекстСообщения("Колонка",, НСтр("ru = ' Счет затрат'"),
				СтрокаТабличнойЧасти.НомерСтроки, "ТМЗ");
			Поле = "Товары[" + Формат(СтрокаТабличнойЧасти.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].НовыйСчетУчета"; 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
		КонецЕсли;		
		
	КонецЦикла;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Процедура выполняет заполнение документа по документу-основанию
//
Процедура ЗаполнитьПоДокументуОснования(Основание) Экспорт
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ИнвентаризацияТоваровНаСкладе") Тогда

		Документы.ВедомостьВыдачиСпецодежды.ЗаполнитьТоварыПоИнвентаризацииТоваров(ЭтотОбъект, Основание);
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
					
		Документы.ВедомостьВыдачиСпецодежды.ЗаполнитьТоварыПоПеремещениюТоваров(ЭтотОбъект, Основание);
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		
		Документы.ВедомостьВыдачиСпецодежды.ЗаполнитьТоварыПоПоступлениюТоваров(ЭтотОбъект, Основание);
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
		
		Документы.ВедомостьВыдачиСпецодежды.ЗаполнитьТоварыПоАвансовомуОтчету(ЭтотОбъект, Основание);
		
	КонецЕсли;

КонецПроцедуры



#КонецЕсли
