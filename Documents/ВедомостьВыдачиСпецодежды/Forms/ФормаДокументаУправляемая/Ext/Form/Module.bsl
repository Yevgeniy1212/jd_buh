////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
		
	// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
//	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	Если Параметры.Ключ.Пустая() Тогда
		
		ПодготовитьФормуНаСервере();
		РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", Объект.Ссылка, ЭтаФорма);
		Объект.ОприходоватьНаЗабалансовыйСчет = Истина;
	КонецЕсли;
				
	УправлениеФормой(ЭтаФорма);
		
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// РедактированиеДокументовПользователей
	ПраваДоступаКОбъектам.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец РедактированиеДокументовПользователей
	
	ПодготовитьФормуНаСервере();
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", Объект.Ссылка, ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	УстановитьДоступностьСубконто();
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", Объект.Ссылка, ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)

	Если ИсточникВыбора.ИмяФормы = "Справочник.ФизическиеЛица.Форма.ФормаВыбора" Тогда
		
		Для Каждого СтрокаМассива Из ВыбранноеЗначение Цикл
			
			СтрокиТабличногоПоля = Объект.ИнвентаризационнаяКомиссия.НайтиСтроки(Новый Структура("ФизЛицо", СтрокаМассива));
			
			Если СтрокиТабличногоПоля.Количество() > 0 Тогда
				
				ТекстСообщения = НСтр("ru='Физическое лицо < %1 > уже выбрано!'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, 
					СтрокаМассива);
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,, "Объект");
	
			Иначе
				НоваяСтрока = Объект.ИнвентаризационнаяКомиссия.Добавить();	
				НоваяСтрока.ФизЛицо = СтрокаМассива;
				
				Если Объект.ИнвентаризационнаяКомиссия.Количество() = 1 Тогда
					НоваяСтрока.Председатель = Истина;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Обработка.ПодборНоменклатуры.Форма.ОсновнаяФорма" Тогда
		
		ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИсточникВыбора.ИмяТаблицы);
		
	ИначеЕсли ТипЗнч(ИсточникВыбора) = Тип("УправляемаяФорма")
		И ИсточникВыбора.ИмяФормы = "Справочник.НомераГТД.Форма.ФормаРедактированияНомеровГТД" Тогда
		
		ЗаполнитьТабличнуюЧастьНомераГТД(ВыбранноеЗначение);

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбработанаТабличнаяЧасть" И ТипЗнч(Параметр) = Тип("Структура")
		И Параметр.Свойство("ИдентификаторВызывающейФормы")
		И Параметр.ИдентификаторВызывающейФормы = УникальныйИдентификатор Тогда
		ОбработкаОповещенияОбработкиТабличнойЧастиНаСервере(Параметр);
	ИначеЕсли ИмяСобытия = "ДанныеСкопированыВБуферОбмена" Тогда				
		УстановитьДоступностьКомандыВставки(ЭтотОбъект, Истина);  
	Иначе
		ОбщегоНазначенияБККлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСДиалогамиКлиент.СтруктурноеПодразделениеНачалоВыбора(ЭтаФорма, СтандартнаяОбработка, Объект.Организация, Объект.СтруктурноеПодразделение, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(СтруктурноеПодразделениеОрганизация) Тогда 
		Объект.Организация = Неопределено;
		Объект.СтруктурноеПодразделение = Неопределено;
	Иначе 
		Результат = РаботаСДиалогамиКлиент.ПроверитьИзменениеЗначенийОрганизацииСтруктурногоПодразделения(СтруктурноеПодразделениеОрганизация, Объект.Организация, Объект.СтруктурноеПодразделение);
		Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
			Если Объект.Товары.Количество() > 0 Тогда
				РаботаСДиалогамиКлиент.ПоказатьВопросОбОчисткеНекорректныхЗначенийПодразделения(ЭтаФорма, Результат);
			Иначе
				ПослеЗакрытияВопросаОбОчисткеНекорректныхЗначенийПодразделения(КодВозвратаДиалога.Нет, Результат);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаОбОчисткеНекорректныхЗначенийПодразделения(Результат, Параметры) Экспорт
	
	Параметры.Вставить("ОчищатьНекорректныеЗначения", Результат = КодВозвратаДиалога.Да);
	
	СтруктураРезультатаВыполнения = Неопределено;
	
	Параметры.Вставить("ПерезаполнитьСчетаУчета", ПоказыватьВДокументахСчетаУчета);
	
	СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(Параметры, СтруктураРезультатаВыполнения);
	
	Если ПоказыватьВДокументахСчетаУчета Тогда
		
		Если Объект.Товары.Количество() > 0 Тогда
		
			ТекстВопроса = НСтр("ru='Установить счета учета в соответствии со значениями по умолчанию?'");
			Режим = РежимДиалогаВопрос.ДаНет;
			Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаПроЗаполнениеСчетовЗаполнитьСчета", ЭтотОбъект, Параметры);
			ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
			
		КонецЕсли;
		
	Иначе
		
		ПослеЗакрытияВопросаПроЗаполнениеСчетовЗаполнитьСчета(КодВозвратаДиалога.Да, Параметры);
			
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;
	
	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ОбщегоНазначенияБККлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата, 
		ТекущаяДатаДокумента);

	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		ДатаПриИзмененииНаСервере();
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;
	ИзменитьДатуОкончания();	
	
КонецПроцедуры

&НаКлиенте
Процедура УчитыватьКПНПриИзменении(Элемент)

	УчитыватьКПНПриИзмененииНаСервере();
	
	УправлениеФормой(ЭтаФорма);
		
КонецПроцедуры

&НаКлиенте
Процедура ВидУчетаНУПриИзменении(Элемент)

	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидУчетаНУНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияБККлиент.НачалоВыбораЗначенияВидУчетаНУ(Элемент, Объект.ВидУчетаНУ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура КорректироватьНДСПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеПриИзменении(Элемент)
	
	Если ТекущийДокументОснование = Объект.ДокументОснование Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		
		ТекстВопроса = НСтр("ru='Заполнить текущий документ данными документа-основания?'");
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаПриИзмененииДокументОснование", ЭтотОбъект, Параметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
		
	КонецЕсли;
	
	ТекущийДокументОснование = Объект.ДокументОснование;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаПриИзмененииДокументОснование(Результат, Параметры) Экспорт
	
	Если НЕ Результат = КодВозвратаДиалога.Да Тогда
		Возврат;	
	КонецЕсли;

	Объект.Товары.Очистить();
	Объект.НомераГТД.Очистить();
	
	ЗаполнитьТоварыПоДокументуОснованиюНаСервере();
	
	УправлениеФормой(ЭтаФорма);
	
	УстановитьФункциональныеОпцииФормы();

	РаботаСДиалогамиКлиентСервер.УстановитьВидимостьСтруктурногоПодразделения(Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	РаботаСДиалогамиКлиентСервер.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделениеОрганизация, Объект.СтруктурноеПодразделение, ПоддержкаРаботыСоСтруктурнымиПодразделениями);

КонецПроцедуры

&НаКлиенте
Процедура СчетЗатратНДСБУПриИзменении(Элемент)
	
	Объект.СчетЗатратНДСНУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", Объект.СчетЗатратНДСБУ));
	
	ПоляФормы		= Новый Структура("Субконто1, Субконто2, Субконто3",
		"СубконтоЗатратНДСНУ1", "СубконтоЗатратНДСНУ2", "СубконтоЗатратНДСНУ3");
	
	ЗаголовкиПолей	= Новый Структура("Субконто1, Субконто2, Субконто3",
		"ЗаголовокСубконтоЗатратНДСНУ1", "ЗаголовокСубконтоЗатратНДСНУ2", "ЗаголовокСубконтоЗатратНДСНУ3"); 

	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриИзмененииСчета(Объект.СчетЗатратНДСНУ, Объект, ПоляФормы);

	ПоляФормы		= Новый Структура("Субконто1, Субконто2, Субконто3",
		"СубконтоЗатратНДСБУ1", "СубконтоЗатратНДСБУ2", "СубконтоЗатратНДСБУ3");
	
	ЗаголовкиПолей	= Новый Структура("Субконто1, Субконто2, Субконто3",
		"ЗаголовокСубконтоЗатратНДСБУ1", "ЗаголовокСубконтоЗатратНДСБУ2", "ЗаголовокСубконтоЗатратНДСБУ3"); 
	
	УстановитьЗаголовкиИДоступностьСубконто(Объект.СчетЗатратНДСБУ, ПоляФормы, ЗаголовкиПолей, Объект.СчетЗатратНДСНУ);
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ЗатратНДСБУ", "СчетЗатратНДСБУ");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ЗатратНДСНУ", "СчетЗатратНДСНУ");
	
	ДанныеОбъекта = Новый Структура("Организация, СубконтоЗатратНДСБУ1, СубконтоЗатратНДСБУ2, СубконтоЗатратНДСБУ3,
									|СубконтоЗатратНДСНУ1, СубконтоЗатратНДСНУ2, СубконтоЗатратНДСНУ3");
			
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
		
	СчетЗатратБУПриИзмененииНаСервере(ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(Объект, ДанныеОбъекта);

КонецПроцедуры

&НаКлиенте
Процедура СчетЗатратНДСНУПриИзменении(Элемент)
	
	ПоляФормы		= Новый Структура("Субконто1, Субконто2, Субконто3",
		"СубконтоЗатратНДСНУ1", "СубконтоЗатратНДСНУ2", "СубконтоЗатратНДСНУ3");
	
	ЗаголовкиПолей	= Новый Структура("Субконто1, Субконто2, Субконто3",
		"ЗаголовокСубконтоЗатратНДСНУ1", "ЗаголовокСубконтоЗатратНДСНУ2", "ЗаголовокСубконтоЗатратНДСНУ3"); 
		
	УстановитьЗаголовкиИДоступностьСубконто(Объект.СчетЗатратНДСНУ, ПоляФормы, ЗаголовкиПолей);
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ЗатратНДСНУ", "СчетЗатратНДСНУ");
	
	ДанныеОбъекта = Новый Структура("Организация, СубконтоЗатратНДСНУ1, СубконтоЗатратНДСНУ2, СубконтоЗатратНДСНУ3");
			
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
		
	СчетЗатратНУПриИзмененииНаСервере(ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(Объект, ДанныеОбъекта);

КонецПроцедуры

&НаКлиенте
Процедура СубконтоЗатратНДСБУ1ПриИзменении(Элемент)
	
	ОбщегоНазначенияБККлиентСервер.ЗаменитьСубконтоНУ(Объект, Объект.СчетЗатратНДСБУ, Объект.СчетЗатратНДСНУ, 1, Объект.СубконтоЗатратНДСБУ1, "СубконтоЗатратНДСНУ");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ЗатратНДСБУ", "СчетЗатратНДСБУ");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ЗатратНДСНУ", "СчетЗатратНДСНУ");
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоЗатратНДСБУ2ПриИзменении(Элемент)
	
	ОбщегоНазначенияБККлиентСервер.ЗаменитьСубконтоНУ(Объект, Объект.СчетЗатратНДСБУ, Объект.СчетЗатратНДСНУ, 2, Объект.СубконтоЗатратНДСБУ2, "СубконтоЗатратНДСНУ");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ЗатратНДСБУ", "СчетЗатратНДСБУ");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ЗатратНДСНУ", "СчетЗатратНДСНУ");
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоЗатратНДСБУ3ПриИзменении(Элемент)

	ОбщегоНазначенияБККлиентСервер.ЗаменитьСубконтоНУ(Объект, Объект.СчетЗатратНДСБУ, Объект.СчетЗатратНДСНУ, 3, Объект.СубконтоЗатратНДСБУ3, "СубконтоЗатратНДСНУ");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ЗатратНДСБУ", "СчетЗатратНДСБУ");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ЗатратНДСНУ", "СчетЗатратНДСНУ");
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоЗатратНДСБУ1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СубконтоНачалоВыбора(Элемент, "СубконтоЗатратНДСБУ", 1, "СчетЗатратНДСБУ", Объект, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоЗатратНДСБУ2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СубконтоНачалоВыбора(Элемент, "СубконтоЗатратНДСБУ", 2, "СчетЗатратНДСБУ", Объект, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоЗатратНДСБУ3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СубконтоНачалоВыбора(Элемент, "СубконтоЗатратНДСБУ", 3, "СчетЗатратНДСБУ", Объект, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоЗатратНДСНУПриИзменении(Элемент)
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ЗатратНДСНУ", "СчетЗатратНДСНУ");
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоЗатратНДСНУ1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СубконтоНачалоВыбора(Элемент, "СубконтоЗатратНДСНУ", 1, "СчетЗатратНДСНУ", Объект, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоЗатратНДСНУ2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СубконтоНачалоВыбора(Элемент, "СубконтоЗатратНДСНУ", 2, "СчетЗатратНДСНУ", Объект, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоЗатратНДСНУ3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СубконтоНачалоВыбора(Элемент, "СубконтоЗатратНДСНУ", 3, "СчетЗатратНДСНУ", Объект, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОснованиеНачалоВыбора(Элемент)
	
	ДополнительныеПараметры = Новый Структура("ФормаВладелец,ИмяРеквизита", ЭтаФорма, "Основание");
	Оповещение = Новый ОписаниеОповещения("ОснованиеЗавершениеВвода", ЭтотОбъект, ДополнительныеПараметры);
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияМногострочногоТекста(
		Оповещение,
		Объект.Основание,
		НСтр("ru='Основание списания'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОснованиеЗавершениеВвода(Строка, Параметры) Экспорт

	Если Строка <> Неопределено Тогда
		
		Объект.Основание = Строка;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ Товары

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда	
		
		ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
		ТекущиеДанные.КлючСвязи = ОбщегоНазначенияБККлиентСервер.НовыйКлючСвязиСтрокиТаблицы(Объект.Товары);	
		ТекущиеДанные.ОприходоватьНаЗабалансовыйСчет = Истина;
		Если НЕ Копирование Тогда
			
			ТекущиеДанные.Коэффициент = 1;
			
			ДанныеСтрокиТаблицы = Новый Структура("Номенклатура, ЕдиницаИзмерения, Коэффициент, Количество, СтавкаНДС, СчетУчета, СчетУчетаНДС, НДСВидОборота, НДСВидПоступления, СчетУчетаНУ");
			ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
			
			ПараметрыОбъекта = Новый Структура("Организация, Дата, Ссылка");
			ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, Объект);
			
			ЗаполнитьРеквизитыНалоговогоУчетаНаСервере(ДанныеСтрокиТаблицы, "Товары", ПараметрыОбъекта);		
			
			ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);
		КонецЕсли;
		
		ЗаполнитьПодразделениеВСтрокеТоваров(ТекущиеДанные, Объект.Подразделение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПодразделениеВСтрокеТоваров(ТекущиеДанные, Подразделение)

	Если ТипЗнч(ТекущиеДанные.СубконтоЗатратБУ1) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
		ТекущиеДанные.СубконтоЗатратБУ1 = Подразделение;
	ИначеЕсли ТипЗнч(ТекущиеДанные.СубконтоЗатратБУ2) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
		ТекущиеДанные.СубконтоЗатратБУ2 = Подразделение;
	ИначеЕсли ТипЗнч(ТекущиеДанные.СубконтоЗатратБУ3) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
		ТекущиеДанные.СубконтоЗатратБУ3 = Подразделение;
	КонецЕсли;
	
	Если ТипЗнч(ТекущиеДанные.СубконтоЗатратНУ1) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
		ТекущиеДанные.СубконтоЗатратНУ1 = Подразделение;
	ИначеЕсли ТипЗнч(ТекущиеДанные.СубконтоЗатратНУ2) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
		ТекущиеДанные.СубконтоЗатратНУ2 = Подразделение;
	ИначеЕсли ТипЗнч(ТекущиеДанные.СубконтоЗатратНУ3) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
		ТекущиеДанные.СубконтоЗатратНУ3 = Подразделение;
	КонецЕсли;
	
КонецПроцедуры	
	
&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	НомераГТДКлиентСервер.УдалитьСтрокиТаблицыНомераГТД(Элементы.Товары.ТекущиеДанные.КлючСвязи, Объект.НомераГТД);
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура, ЕдиницаИзмерения, Коэффициент, Количество,
		|СтавкаНДС, Цена, Сумма, СчетУчетаНДС, СчетУчета, СчетУчетаНУ, 
		|НовыйСчетУчета, СубконтоЗатратБУ1, СубконтоЗатратБУ2, СубконтоЗатратБУ3,
		|СчетЗатратНУ, СубконтоЗатратНУ1, СубконтоЗатратНУ2, СубконтоЗатратНУ3, 
		|НомерГТД, СтранаПроисхождения,
		|ВидСубконтоЗатратБУ1, ВидСубконтоЗатратБУ2, ВидСубконтоЗатратБУ3,
		|ВидСубконтоЗатратНУ1, ВидСубконтоЗатратНУ2, ВидСубконтоЗатратНУ3,
		|СубконтоЗатратБУ1Доступность, СубконтоЗатратБУ2Доступность, СубконтоЗатратБУ3Доступность,
		|СубконтоЗатратНУ1Доступность, СубконтоЗатратНУ2Доступность, СубконтоЗатратНУ3Доступность");
		
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	ДанныеОбъекта = Новый Структура(
		"Дата, Организация, СтруктурноеПодразделение,
		|УчитыватьКПН, ВидУчетаНУ");
		
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
		
	ТоварыНоменклатураПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);
	
	ЗаполнитьСчетУчетаСО();
	
	ТекущиеДанные.Количество = 0;
	ТекущиеДанные.Цена = 0;
	ТекущиеДанные.Сумма = 0;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЕдиницаИзмеренияПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	СтрокаТабличнойЧасти.Коэффициент = 1;

КонецПроцедуры

&НаКлиенте
Процедура ТоварыСчетУчетаБУПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.Товары.ТекущиеДанные;
	
	Если НЕ ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.НаСчетеВедетсяУчетНоменклатуры(СтрокаТаблицы.СчетУчетаБУ) Тогда
		
		ТекстСообщения = НСтр("ru='Для счета %1 отсутствует субконто ""Номенклатура"". Значение было очищено.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, 
			СтрокаТаблицы.СчетУчетаБУ);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Товары[" + Элементы.Товары.ТекущаяСтрока + "].СчетУчетаБУ", "Объект");
		
		СтрокаТаблицы.СчетУчетаБУ = ПредопределенноеЗначение("ПланСчетов.Типовой.ПустаяСсылка");
		
		Возврат;
		
	КонецЕсли;
	
	СтрокаТаблицы.СчетУчетаНУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СтрокаТаблицы.СчетУчетаБУ));
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСчетУчетаНУПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.Товары.ТекущиеДанные;
	
	Если НЕ ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.НаСчетеВедетсяУчетНоменклатуры(СтрокаТаблицы.СчетУчетаБУ) Тогда
		
		
		ТекстСообщения = НСтр("ru='Для счета %1 отсутствует субконто ""Номенклатура"". Значение было очищено.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, 
			СтрокаТаблицы.СчетУчетаНУ);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Товары[" + Элементы.Товары.ТекущаяСтрока + "].СчетУчетаНУ", "Объект");
		
		СтрокаТаблицы.СчетУчетаНУ = ПредопределенноеЗначение("ПланСчетов.Налоговый.ПустаяСсылка");
		
		Возврат;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТоварыСчетЗатратБУПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.Товары.ТекущиеДанные;
	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
								 "СубконтоЗатратБУ1", "СубконтоЗатратБУ2", "СубконтоЗатратБУ3");

	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриИзмененииСчета(СтрокаТаблицы.СчетЗатратБУ, СтрокаТаблицы, ПоляОбъекта, Истина);

	
	СтрокаТаблицы.СчетЗатратНУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СтрокаТаблицы.СчетЗатратБУ));	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
								 "СубконтоЗатратНУ1", "СубконтоЗатратНУ2", "СубконтоЗатратНУ3");

	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриИзмененииСчета(СтрокаТаблицы.СчетЗатратНУ, СтрокаТаблицы, ПоляОбъекта, Истина);
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ЗатратБУ", "СчетЗатратБУ", "Товары");	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ЗатратНУ", "СчетЗатратНУ", "Товары");	
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура, СчетЗатратБУ, СчетЗатратНУ, 
		|СубконтоЗатратБУ1, СубконтоЗатратБУ2, СубконтоЗатратБУ3,
		|СубконтоЗатратНУ1, СубконтоЗатратНУ2, СубконтоЗатратНУ3");
		
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, СтрокаТаблицы);
	
	ДанныеОбъекта = Новый Структура("Организация");
			
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, СтрокаТаблицы);
	
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
		
	ТоварыСчетЗатратБУПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ДанныеСтрокиТаблицы);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСубконтоЗатратБУ1ПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	ОбщегоНазначенияБККлиентСервер.ЗаменитьСубконтоНУ(ТекущиеДанные, ТекущиеДанные.СчетЗатратБУ, ТекущиеДанные.СчетЗатратНУ, 1, ТекущиеДанные.СубконтоЗатратБУ1, "СубконтоЗатратНУ");		
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ЗатратБУ", "СчетЗатратБУ", "Товары");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ЗатратНУ", "СчетЗатратНУ", "Товары");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСубконтоЗатратБУ2ПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	ОбщегоНазначенияБККлиентСервер.ЗаменитьСубконтоНУ(ТекущиеДанные, ТекущиеДанные.СчетЗатратБУ, ТекущиеДанные.СчетЗатратНУ, 2, ТекущиеДанные.СубконтоЗатратБУ2, "СубконтоЗатратНУ");	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ЗатратБУ", "СчетЗатратБУ", "Товары");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ЗатратНУ", "СчетЗатратНУ", "Товары");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСубконтоЗатратБУ3ПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	ОбщегоНазначенияБККлиентСервер.ЗаменитьСубконтоНУ(ТекущиеДанные, ТекущиеДанные.СчетЗатратБУ, ТекущиеДанные.СчетЗатратНУ, 3, ТекущиеДанные.СубконтоЗатратБУ3, "СубконтоЗатратНУ");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ЗатратБУ", "СчетЗатратБУ", "Товары");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ЗатратНУ", "СчетЗатратНУ", "Товары");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСчетЗатратНУПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.Товары.ТекущиеДанные;
	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
								 "СубконтоЗатратНУ1", "СубконтоЗатратНУ2", "СубконтоЗатратНУ3");

	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриИзмененииСчета(СтрокаТаблицы.СчетЗатратНУ, СтрокаТаблицы, ПоляОбъекта, Истина);
    ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ЗатратНУ", "СчетЗатратНУ", "Товары");
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура, СчетЗатратНУ, СубконтоЗатратНУ1, СубконтоЗатратНУ2, СубконтоЗатратНУ3");
		
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, СтрокаТаблицы);
	
	ДанныеОбъекта = Новый Структура("Организация");
			
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, СтрокаТаблицы);
	
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
		
	ТоварыСчетЗатратНУПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ДанныеСтрокиТаблицы);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСубконтоЗатратБУ1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	СубконтоНачалоВыбора(Элемент, "СубконтоЗатратБУ", 1, "СчетЗатратБУ", ТекущиеДанные, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСубконтоЗатратБУ2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	СубконтоНачалоВыбора(Элемент, "СубконтоЗатратБУ",  2, "СчетЗатратБУ", ТекущиеДанные, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСубконтоЗатратБУ3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	СубконтоНачалоВыбора(Элемент, "СубконтоЗатратБУ",  3, "СчетЗатратБУ", ТекущиеДанные, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСубконтоЗатратНУПриИзменении(Элемент)

	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ЗатратНУ", "СчетЗатратНУ", "Товары");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСубконтоЗатратНУ1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	СубконтоНачалоВыбора(Элемент, "СубконтоЗатратНУ",  1, "СчетЗатратНУ", ТекущиеДанные, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСубконтоЗатратНУ2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	СубконтоНачалоВыбора(Элемент, "СубконтоЗатратНУ",  2, "СчетЗатратНУ", ТекущиеДанные, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСубконтоЗатратНУ3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	СубконтоНачалоВыбора(Элемент, "СубконтоЗатратНУ",  3, "СчетЗатратНУ", ТекущиеДанные, СтандартнаяОбработка);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ИнвентаризационнаяКомиссия

&НаКлиенте
Процедура ИнвентаризационнаяКомиссияПредседательПриИзменении(Элемент)
	
	Для Каждого Строка Из Объект.ИнвентаризационнаяКомиссия Цикл
			
		Если НЕ (Строка.НомерСтроки = Элементы.ИнвентаризационнаяКомиссия.ТекущиеДанные.НомерСтроки) Тогда
			
			Строка.Председатель = Ложь;
			
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры

&НаКлиенте
Процедура ИнвентаризационнаяКомиссияФизЛицоПриИзменении(Элемент)
	
	Если Объект.ИнвентаризационнаяКомиссия.Количество() = 1 Тогда
		
		Объект.ИнвентаризационнаяКомиссия[0].Председатель = Истина;
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнвентаризационнаяКомиссияПослеУдаления(Элемент)
	
	Если Объект.ИнвентаризационнаяКомиссия.Количество() > 0 Тогда
		ПроверитьФлагиПредседателя(Неопределено);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ИнвентаризационнаяКомиссияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И Копирование Тогда
		
		Элементы.ИнвентаризационнаяКомиссия.ТекущиеДанные.ФизЛицо = Неопределено;
		Элементы.ИнвентаризационнаяКомиссия.ТекущиеДанные.Председатель = Ложь;
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ИнвентаризационнаяКомиссияПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если НЕ ОтменаРедактирования Тогда
		
		УсловияПоиска = Новый Структура("ФизЛицо", Элементы.ИнвентаризационнаяКомиссия.ТекущиеДанные.ФизЛицо);
		СтрокиФЛ = Объект.ИнвентаризационнаяКомиссия.НайтиСтроки(УсловияПоиска);
		
		Если СтрокиФЛ.Количество() > 1 Тогда
			
			Отказ = Истина;
			ТекстПредупреждения = НСтр("ru='Физическое лицо %1 уже включено в состав комиссии!'");
			ТекстПредупреждения = СтрЗаменить(ТекстПредупреждения, "%1", 
															Элементы.ИнвентаризационнаяКомиссия.ТекущиеДанные.ФизЛицо);
			ПоказатьПредупреждение(, ТекстПредупреждения);
			Элементы.ИнвентаризационнаяКомиссия.ТекущиеДанные.ФизЛицо = Неопределено;
			ТекущийЭлемент = Элементы.ИнвентаризационнаяКомиссияФизЛицо;
			
		КонецЕсли;	
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ИнвентаризационнаяКомиссияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НЕ ОтменаРедактирования Тогда
		
		ТекущиеДанные = Элемент.ТекущиеДанные;
		ПроверитьФлагиПредседателя(Элемент.ТекущиеДанные);
		
	КонецЕсли;	

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ


// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтотОбъект, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		ДополнительныеОтчетыИОбработкиКлиент.ПоказатьРезультатВыполненияКоманды(ЭтотОбъект, РезультатВыполнения);
	КонецЕсли;
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаКлиенте
Процедура ЗаполнитьПоДокументуОснованию(Команда)
	
	ЗаполнятьТабличнуюЧасть = Ложь;
	Если НЕ ЗначениеЗаполнено(Объект.ДокументОснование) Тогда

		ИмяПоля = НСтр("ru ='Документ-основание'");
		ТекстСообщения = ОбщегоНазначенияБККлиентСервер.ПолучитьТекстСообщения(,, ИмяПоля);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "ДокументОснование", "Объект");
		
		Возврат;
	Иначе
		ЗаполнятьТабличнуюЧасть = Истина;
	КонецЕсли;

	Если Объект.Товары.Количество() > 0 Тогда

		ТекстВопроса = НСтр("ru='Перед заполнением табличная часть будет очищена. Заполнить?'");
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаЗаполнитьПоДокументуОснованию", ЭтотОбъект, Параметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
		
	Иначе
		
		ЗаполнитьТоварыПоДокументуОснованиюНаСервере();

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаЗаполнитьПоДокументуОснованию(Результат, Параметры) Экспорт
	
	Если НЕ Результат = КодВозвратаДиалога.Да Тогда
		Возврат;	
	КонецЕсли;

	Объект.Товары.Очистить();
	Объект.НомераГТД.Очистить();
	
	ЗаполнитьТоварыПоДокументуОснованиюНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТовары(Команда)
	
	ТекстВопроса = НСтр("ru='Табличная часть будет очищена. Продолжить?'");
	Режим = РежимДиалогаВопрос.ДаНет;
	Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаОчиститьТовары", ЭтотОбъект, Параметры);
	ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаОчиститьТовары(Результат, Параметры) Экспорт
	
	Если НЕ Результат = КодВозвратаДиалога.Да Тогда
		Возврат;	
	КонецЕсли;

	Объект.Товары.Очистить();
	Объект.НомераГТД.Очистить();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборКомиссии(Команда)
	
	ПараметрыФормы	= Новый Структура;
	ПараметрыФормы.Вставить("ЗакрыватьПриЗакрытииВладельца",	Истина);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе",				Ложь);
	ПараметрыФормы.Вставить("РежимВыбора",						Истина);
	ПараметрыФормы.Вставить("МножественныйВыбор",				Истина);
	ПараметрыФормы.Вставить("ПараметрВыборГруппИЭлементов",		ИспользованиеГруппИЭлементов.Элементы);
	
	ОткрытьФорму("Справочник.ФизическиеЛица.ФормаВыбора", ПараметрыФормы, ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ПодборТовары(Команда)
	
	ПараметрыПодбора = ПолучитьПараметрыПодбора("Товары");
	Если ПараметрыПодбора <> Неопределено Тогда
		ОткрытьФорму("Обработка.ПодборНоменклатуры.Форма.ОсновнаяФорма", ПараметрыПодбора,
			ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьТовары(Команда)
	
	ИзменитьТабличнуюЧасть("Товары", "Товары");
		
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьСтроки(Команда)
	
	ИмяТаблицы = ПолучитьИмяТекущейТабличнойЧасти();
	Если ПустаяСтрока(ИмяТаблицы) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	КоличествоСтрок = Элементы[ИмяТаблицы].ВыделенныеСтроки.Количество();
	Если КоличествоСтрок = 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	СкопироватьСтрокиНаСервере(ИмяТаблицы);
	ОбработкаТабличныхЧастейКлиент.ОповеститьОКопированииСтрокВБуферОбмена(ЭтотОбъект, КоличествоСтрок);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтроки(Команда)
	
	ИмяТаблицы = ПолучитьИмяТекущейТабличнойЧасти();
	Если ПустаяСтрока(ИмяТаблицы) Тогда
		
		Возврат;
		
	КонецЕсли;
	КоличествоСтрок = ВставитьСтрокиНаСервере(ИмяТаблицы);
	ОбработкаТабличныхЧастейКлиент.ОповеститьОВставкеСтрокИзБуфераОбмена(ЭтотОбъект, КоличествоСтрок);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтотОбъект, ИмяЭлемента, РезультатВыполнения);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	УстановитьФункциональныеОпцииФормы();
	
	ТекущаяДатаДокумента     = Объект.Дата;
	ТекущийДокументОснование = Объект.ДокументОснование;
	ТекущийСклад	         = Объект.Склад;
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	УстановитьДоступностьСубконто();
	
	ПоказыватьВДокументахСчетаУчета = ПользователиБКВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию(Пользователи.ТекущийПользователь(), "ПоказыватьВДокументахСчетаУчета");
	ПоддержкаРаботыСоСтруктурнымиПодразделениями = ПолучитьФункциональнуюОпцию("ПоддержкаРаботыСоСтруктурнымиПодразделениями");

	РаботаСДиалогамиКлиентСервер.УстановитьВидимостьСтруктурногоПодразделения(Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	РаботаСДиалогамиКлиентСервер.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделениеОрганизация, Объект.СтруктурноеПодразделение, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	
	//ПроцедурыНалоговогоУчета.ПриИзмененииПризнакаОтраженияВНалоговомУчете(Объект.Организация, Объект.Дата, Объект.УчитыватьКПН, Истина);
	
	//РаботаСДиалогами.УстановитьЗаголовокЭлементуУправленияУчитыватьКПН(Объект.Организация, Элементы.УчитыватьКПН);

	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ЗатратНДСБУ", "СчетЗатратНДСБУ");	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ЗатратНДСНУ", "СчетЗатратНДСНУ");

	// Активизировать первую непустую табличную часть
	СписокТабличныхЧастей = Новый СписокЗначений;
	СписокТабличныхЧастей.Добавить("Товары", "Товары");
	
	ПоляФормы		= Новый Структура("Субконто1, Субконто2, Субконто3",
		"СубконтоЗатратНДСБУ1", "СубконтоЗатратНДСБУ2", "СубконтоЗатратНДСБУ3");
	
	ЗаголовкиПолей	= Новый Структура("Субконто1, Субконто2, Субконто3",
		"ЗаголовокСубконтоЗатратНДСБУ1", "ЗаголовокСубконтоЗатратНДСБУ2", "ЗаголовокСубконтоЗатратНДСБУ3"); 
		
	УстановитьЗаголовкиИДоступностьСубконто(Объект.СчетЗатратНДСБУ, ПоляФормы, ЗаголовкиПолей, Объект.СчетЗатратНДСНУ);
	
	УстановитьДоступностьКомандыВставки(ЭтотОбъект, Не ОбщегоНазначения.ПустойБуферОбмена());
		
	ОбщегоНазначенияБК.УстановитьТекстАвтора(НадписьАвтор, Объект.Автор);
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)

	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Форма.ВидимостьНалоговогоУчета = Объект.УчитыватьКПН И (Форма.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль ИЛИ Объект.ВидУчетаНУ = ПредопределенноеЗначение("Справочник.ВидыУчетаНУ.НУ"));
	
	Элементы.ВидУчетаНУ.Видимость  = Объект.УчитыватьКПН;
	                                    
	//Элементы.ГруппаНДС.Видимость = (Объект.УчитыватьНДС ИЛИ Объект.КорректироватьНДС);
	
	Элементы.ГруппаОтнесениеЗатратПоНДСНУ.Видимость = Форма.ВидимостьНалоговогоУчета;
	
	Элементы.ТоварыЗаполнитьПоПоступлению.Доступность = ЗначениеЗаполнено(Объект.ДокументОснование);
	
	Элементы.ТоварыОткрытьНомераГТД.Видимость = Форма.ВедетсяУчетПоТоварамОрганизацийБУ;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()

	ОбщегоНазначенияБККлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);
	
	ОрганизацияПлательщикНалогаНаПрибыль = ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Объект.Организация, Объект.Дата);
	ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль = ОрганизацияПлательщикНалогаНаПрибыль И ПроцедурыНалоговогоУчета.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль(Объект.Организация, Объект.Дата);
	
	ВедетсяУчетПоТоварамОрганизацийБУ = НомераГТДСервер.ВедетсяУчетПоТоварамОрганизаций(Объект.Дата);
	
КонецПроцедуры 

&НаСервере
Процедура УстановитьДоступностьСубконто()
	
	ИмяЭлемента = "СубконтоЗатрат";
	ИмяСчета 	= "СчетЗатрат";
	
	Для Каждого СтрокаТовары Из Объект.Товары Цикл
		
		ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
			"СубконтоЗатратБУ1", "СубконтоЗатратБУ2", "СубконтоЗатратБУ3");
			
		ПроцедурыБухгалтерскогоУчетаКлиентСервер.УстановитьДоступностьИЗаголовкиСубконто(СтрокаТовары.СчетЗатратБУ, СтрокаТовары, ПоляОбъекта);
		
		ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
			"СубконтоЗатратНУ1", "СубконтоЗатратНУ2", "СубконтоЗатратНУ3");
			
		ПроцедурыБухгалтерскогоУчетаКлиентСервер.УстановитьДоступностьИЗаголовкиСубконто(СтрокаТовары.СчетЗатратНУ, СтрокаТовары, ПоляОбъекта);
		
		// установка параметров выбора для подчиненных и иным способом связанных объектов аналитики
		Префикс = "БУ";
		ПараметрыДокумента = СписокПараметровВыбораСубконто(Объект, СтрокаТовары, ИмяЭлемента + Префикс +"%Индекс%", ИмяСчета + Префикс);
		ПроцедурыБухгалтерскогоУчетаКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, СтрокаТовары, ИмяЭлемента + Префикс + "%Индекс%", "Товары" + ИмяЭлемента + Префикс + "%Индекс%", ПараметрыДокумента);	
		
		Префикс = "НУ";
		ПараметрыДокумента = СписокПараметровВыбораСубконто(Объект, СтрокаТовары, ИмяЭлемента + Префикс +"%Индекс%", ИмяСчета + Префикс);
		ПроцедурыБухгалтерскогоУчетаКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, СтрокаТовары, ИмяЭлемента + Префикс + "%Индекс%", "Товары" + ИмяЭлемента + Префикс + "%Индекс%", ПараметрыДокумента);	
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовкиИДоступностьСубконто(СчетУчета, ПоляФормы, ЗаголовкиПолей, СчетУчетаНУ = Неопределено, ЭтоТаблица = Ложь)

	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриВыбореСчета(СчетУчета, ЭтаФорма, ПоляФормы, ЗаголовкиПолей);
	
	Если НЕ СчетУчетаНУ = Неопределено Тогда
		
		Для Каждого ПолеФормы Из ПоляФормы Цикл
			
			ПоляФормы.Вставить(ПолеФормы.Ключ, СтрЗаменить(ПолеФормы.Значение, "БУ", "НУ"));
			
		КонецЦикла;
		
		Для Каждого ЗаголовоеПоля Из ЗаголовкиПолей Цикл
			
			ЗаголовкиПолей.Вставить(ЗаголовоеПоля.Ключ, СтрЗаменить(ЗаголовоеПоля.Значение, "БУ", "НУ"));
			
		КонецЦикла;
		
		ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриВыбореСчета(СчетУчетаНУ, ЭтаФорма, ПоляФормы, ЗаголовкиПолей);
		
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьРеквизитыНалоговогоУчетаНаСервере(СтрокаТабличнойЧасти, ИмяТабличнойЧасти, ПараметрыОбъекта)
		
	Документы.ВедомостьВыдачиСпецодежды.ЗаполнитьРеквизитыНалоговогоУчета(ПараметрыОбъекта, СтрокаТабличнойЧасти, ИмяТабличнойЧасти);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоНачалоВыбора(Элемент, ИмяЭлементаСубконто, ИндексСубконто, ИмяЭлементаСчета, СтрокаТаблицы, СтандартнаяОбработка)	
	
	ПараметрыДокумента = СписокПараметровВыбораСубконто(Объект, СтрокаТаблицы, ИмяЭлементаСубконто + "%Индекс%", ИмяЭлементаСчета);
	ПроцедурыБухгалтерскогоУчетаКлиент.НачалоВыбораЗначенияСубконто(ЭтаФорма, Элемент, ИндексСубконто, СтандартнаяОбработка, ПараметрыДокумента);
	
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииНаСервере()

	УстановитьФункциональныеОпцииФормы();
	
	ПроцедурыНалоговогоУчета.ПриИзмененииПризнакаОтраженияВНалоговомУчете(Объект.Организация, Объект.Дата, Объект.УчитыватьКПН, Истина);
	ПроцедурыНалоговогоУчета.ЗаполнитьВидУчетаНУ(Объект.УчитыватьКПН, Объект.ВидУчетаНУ);

	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораСтруктурногоПодразделения(Результат, Параметры) Экспорт
	
	РаботаСДиалогамиКлиент.ПослеВыбораСтруктурногоПодразделения(Результат, Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация);
	Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
		Модифицированность = Истина;
		Результат.Вставить("НеобходимоИзменитьЗначенияРеквизитовОбъекта", Ложь);
		РаботаСДиалогамиКлиент.ПоказатьВопросОбОчисткеНекорректныхЗначенийПодразделения(ЭтаФорма, Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(СтруктураПараметров = Неопределено, СтруктураРезультатаВыполнения)
	
	Если СтруктураПараметров = Неопределено 
		ИЛИ (СтруктураПараметров.Свойство("НеобходимоИзменитьЗначенияРеквизитовОбъекта") 
				И СтруктураПараметров.НеобходимоИзменитьЗначенияРеквизитовОбъекта) Тогда 
		РаботаСДиалогами.СтруктурноеПодразделениеПриИзменении(СтруктурноеПодразделениеОрганизация, Объект.Организация, Объект.СтруктурноеПодразделение, СтруктураПараметров);
	КонецЕсли;
	
	ПриИзмененииЗначенияОрганизацииСервер(СтруктураПараметров, СтруктураРезультатаВыполнения);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииЗначенияОрганизацииСервер(СтруктураПараметров, СтруктураРезультатаВыполнения)
	
	Если НЕ СтруктураПараметров.ИзмененаОрганизация И НЕ СтруктураПараметров.ИзмененоСтруктурноеПодразделение Тогда
		Возврат;
	КонецЕсли;
	
	//Очистить ТЧ "НомерГТД", так как могла быть уже заполнена по остаткам другой организации	
	Если Объект.НомераГТД.Количество() > 0 И ВедетсяУчетПоТоварамОрганизацийБУ Тогда
		Объект.НомераГТД.Очистить();		
	КонецЕсли;     
	
	ПриИзмененииЗначенияСтруктурногоПодразделенияСервер(СтруктураПараметров);
	УстановитьФункциональныеОпцииФормы();
	
	РаботаСДиалогами.ПриИзмененииЗначенияОрганизации(Объект, , СтруктураРезультатаВыполнения);
	
	ПроцедурыНалоговогоУчета.ПриИзмененииПризнакаОтраженияВНалоговомУчете(Объект.Организация, Объект.Дата, Объект.УчитыватьКПН, Истина);	
	
	ПроцедурыНалоговогоУчета.ЗаполнитьВидУчетаНУ(Объект.УчитыватьКПН, Объект.ВидУчетаНУ);
	
	РаботаСДиалогами.УстановитьЗаголовокЭлементуУправленияУчитыватьКПН(Объект.Организация, Элементы.УчитыватьКПН);

	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ЗатратНДСБУ", "СчетЗатратНДСБУ");	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ЗатратНДСНУ", "СчетЗатратНДСНУ");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ЗатратБУ", "СчетЗатратБУ", "Товары");	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ЗатратНУ", "СчетЗатратНУ", "Товары");
	
	// после удаления вопроса об очистке подразделений при изменении СП, данное условие можно будет удалить
	Если СтруктураПараметров.ОчищатьНекорректныеЗначения Тогда

		ПроцедурыБухгалтерскогоУчета.ПроверитьВладельцаСубконтоПодразделение(Объект, 
		                                        Объект.Организация, 
		                                        Новый Структура("НазваниеСубконтоБУ1, НазваниеСубконтоБУ2, НазваниеСубконтоБУ3, 
		                                                        |СубконтоБУ1, СубконтоБУ2, СубконтоБУ3",
		                                                        "СубконтоЗатратНДСБУ1", "СубконтоЗатратНДСБУ2", "СубконтоЗатратНДСБУ3", 
		                                                        Объект.СубконтоЗатратНДСБУ1, Объект.СубконтоЗатратНДСБУ2, Объект.СубконтоЗатратНДСБУ3));

		ПроцедурыБухгалтерскогоУчета.ПроверитьВладельцаСубконтоПодразделение(Объект, 
		                                        Объект.Организация, 
		                                        Новый Структура("НазваниеСубконтоБУ1, НазваниеСубконтоБУ2, НазваниеСубконтоБУ3, 
		                                                        |СубконтоБУ1, СубконтоБУ2, СубконтоБУ3",
		                                                        "СубконтоЗатратНДСНУ1", "СубконтоЗатратНДСНУ2", "СубконтоЗатратНДСНУ3", 
		                                                        Объект.СубконтоЗатратНДСНУ1, Объект.СубконтоЗатратНДСНУ2, Объект.СубконтоЗатратНДСНУ3));

		Для Каждого СтрокаТовары Из Объект.Товары Цикл
			
			ПроцедурыБухгалтерскогоУчета.ПроверитьВладельцаСубконтоПодразделение(СтрокаТовары,
			                                        Объект.Организация, 
			                                        Новый Структура("НазваниеСубконтоБУ1, НазваниеСубконтоБУ2, НазваниеСубконтоБУ3, 
			                                                        |СубконтоБУ1, СубконтоБУ2, СубконтоБУ3",
			                                                        "СубконтоЗатратБУ1", "СубконтоЗатратБУ2", "СубконтоЗатратБУ3", 
			                                                        СтрокаТовары.СубконтоЗатратБУ1, СтрокаТовары.СубконтоЗатратБУ2, СтрокаТовары.СубконтоЗатратБУ3));
																	
			ПроцедурыБухгалтерскогоУчета.ПроверитьВладельцаСубконтоПодразделение(СтрокаТовары,
			                                        Объект.Организация, 
			                                        Новый Структура("НазваниеСубконтоНУ1, НазваниеСубконтоНУ2, НазваниеСубконтоНУ3, 
			                                                        |СубконтоНУ1, СубконтоНУ2, СубконтоНУ3",
			                                                        "СубконтоЗатратНУ1", "СубконтоЗатратНУ2", "СубконтоЗатратНУ3", 
			                                                        СтрокаТовары.СубконтоЗатратНУ1, СтрокаТовары.СубконтоЗатратНУ2, СтрокаТовары.СубконтоЗатратНУ3));
																	
		КонецЦикла;

	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаПроЗаполнениеСчетовЗаполнитьСчета(Результат, СтруктураРезультатаВыполнения) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		УправлениеФормой(ЭтаФорма);
		Возврат;
	КонецЕсли;
	
	Если СтруктураРезультатаВыполнения.Свойство("ПерезаполнитьСчетаУчета") И СтруктураРезультатаВыполнения.ПерезаполнитьСчетаУчета Тогда 
		ЗаполнитьСчетаУчетаВТабличнойЧастиНаСервере();
	КонецЕсли;
	
	УстановитьДоступностьСубконто();
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииЗначенияСтруктурногоПодразделенияСервер(СтруктураПараметров)
	
	Если СтруктураПараметров.Свойство("ОчищатьНекорректныеЗначения") И НЕ СтруктураПараметров.ОчищатьНекорректныеЗначения Тогда 
		Возврат;
	КонецЕсли;
	
	Если Объект.Товары.Количество() = 0 Тогда
		Возврат;
	Конецесли;
        
	СписокТабличныхЧастей = Новый СписокЗначений;
	СписокАналитикиСчетов = Новый СписокЗначений;

	СписокАналитикиСчетов.Добавить("ЗатратБУ");     // СчетЗатратБУ
	СписокАналитикиСчетов.Добавить("ЗатратНУ");     // СчетЗатратНУ

	СтруктураРеквизитов = Новый Структура("ТабличнаяЧасть, СписокАналитикиСчетов", Объект.Товары, СписокАналитикиСчетов); 
	СписокТабличныхЧастей.Добавить(СтруктураРеквизитов);

	СписокАналитикиСчетовШапки = Новый СписокЗначений;
	СписокАналитикиСчетовШапки.Добавить("ЗатратНДСБУ"); 
	СписокАналитикиСчетовШапки.Добавить("ЗатратНДСНУ"); 
	
	СтруктураРеквизитовШапки = Новый Структура("Объект, СписокАналитикиСчетовШапки", Объект, СписокАналитикиСчетовШапки);
	
	РаботаСДиалогами.ПроверитьСоответствиеПодразделения(Объект.Организация, Объект.СтруктурноеПодразделение, , СписокТабличныхЧастей, СтруктураРеквизитовШапки);
		
КонецПроцедуры

&НаСервере
Процедура УчитыватьКПНПриИзмененииНаСервере()
	
	ПроцедурыНалоговогоУчета.ЗаполнитьВидУчетаНУ(Объект.УчитыватьКПН, Объект.ВидУчетаНУ);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСчетаУчетаВТабличнойЧастиНаСервере(ИмяТабличнойЧасти = "")

	Документы.ВедомостьВыдачиСпецодежды.ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, "Товары");
	
КонецПроцедуры

&НаСервере
Функция ПроверитьВидПоступленияКорректировка(ВыбранноеЗначение)
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВыбранноеЗначение, "ПризнакКорректировки");
	
КонецФункции

&НаКлиенте
Процедура ПроверитьФлагиПредседателя(СтрокаТЧ)
    
	СтрокаПредседателя = ?(СтрокаТЧ <> Неопределено И СтрокаТЧ.Председатель, СтрокаТЧ, Неопределено);
	
	Для Каждого СтрокаКомиссии Из Объект.ИнвентаризационнаяКомиссия Цикл
		
		Если СтрокаКомиссии.Председатель И СтрокаПредседателя = Неопределено Тогда
			СтрокаПредседателя = СтрокаКомиссии;
			Продолжить;
		КонецЕсли;	
		
		Если СтрокаКомиссии.Председатель И СтрокаКомиссии <> СтрокаПредседателя Тогда
			СтрокаКомиссии.Председатель = Ложь;
		КонецЕсли;	
		
	КонецЦикла;	

	Если СтрокаПредседателя = Неопределено И Объект.ИнвентаризационнаяКомиссия.Количество() > 0 Тогда
		Объект.ИнвентаризационнаяКомиссия[0].Председатель = Истина;
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ТоварыНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, Знач ДанныеОбъекта)

	СведенияОНоменклатуре = ОбработкаТабличныхЧастей.ПолучитьСведенияОНоменклатуре(
		СтрокаТабличнойЧасти.Номенклатура, ДанныеОбъекта);
		
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.ЕдиницаИзмерения		= СведенияОНоменклатуре.БазоваяЕдиницаИзмерения;
	СтрокаТабличнойЧасти.Коэффициент			= СведенияОНоменклатуре.Коэффициент;
	СтрокаТабличнойЧасти.Цена					= СведенияОНоменклатуре.Цена;
	СтрокаТабличнойЧасти.СтавкаНДС				= СведенияОНоменклатуре.СтавкаНДС;
	
	ДанныеОбъекта.Вставить("Подразделение", Объект.Подразделение);
	
	Документы.ВедомостьВыдачиСпецодежды.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, СтрокаТабличнойЧасти, "Товары", СведенияОНоменклатуре);
		
	ПоляОбъектаСубконто		= Новый Структура("Субконто1, Субконто2, Субконто3", "СубконтоЗатратБУ1", "СубконтоЗатратБУ2", "СубконтоЗатратБУ3");
	ПоляОбъектаСубконтоНУ	= Новый Структура("Субконто1, Субконто2, Субконто3", "СубконтоЗатратНУ1", "СубконтоЗатратНУ2", "СубконтоЗатратНУ3");
	
	ПроцедурыБухгалтерскогоУчетаКлиентСервер.УстановитьДоступностьИЗаголовкиСубконто(СтрокаТабличнойЧасти.НовыйСчетУчета, СтрокаТабличнойЧасти, ПоляОбъектаСубконто);
	ПроцедурыБухгалтерскогоУчетаКлиентСервер.УстановитьДоступностьИЗаголовкиСубконто(СтрокаТабличнойЧасти.СчетЗатратНУ, СтрокаТабличнойЧасти, ПоляОбъектаСубконтоНУ);
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТоварыПоДокументуОснованиюНаСервере()

	Если ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ИнвентаризацияТоваровНаСкладе") Тогда

		Документы.ВедомостьВыдачиСпецодежды.ЗаполнитьТоварыПоИнвентаризацииТоваров(Объект, Объект.ДокументОснование);
		
	ИначеЕсли ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
					
		Документы.ВедомостьВыдачиСпецодежды.ЗаполнитьТоварыПоПеремещениюТоваров(Объект, Объект.ДокументОснование);
		
	ИначеЕсли ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		
		Документы.ВедомостьВыдачиСпецодежды.ЗаполнитьТоварыПоПоступлениюТоваров(Объект, Объект.ДокументОснование);
		
	ИначеЕсли ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
		
		Документы.ВедомостьВыдачиСпецодежды.ЗаполнитьТоварыПоАвансовомуОтчету(Объект, Объект.ДокументОснование);
		
	КонецЕсли;
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ЗатратНДСБУ", "СчетЗатратНДСБУ");	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ЗатратНДСНУ", "СчетЗатратНДСНУ");

	УстановитьДоступностьСубконто();

КонецПроцедуры

&НаКлиенте
Функция ПолучитьПараметрыПодбора(ИмяТаблицы)

	ДатаРасчетов		 = ?(НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДата()), Неопределено, Объект.Дата);
	
	ЗаголовокПодбора	 = НСтр("ru = 'Подбор номенклатуры в %1 (%2)'");
	ПредставлениеТаблицы = НСтр("ru = 'Товары'");
	
	ЗаголовокПодбора     = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ЗаголовокПодбора, Объект.Ссылка, ПредставлениеТаблицы);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ДатаРасчетов"            , ДатаРасчетов);
	ПараметрыФормы.Вставить("Организация"             , Объект.Организация);
	ПараметрыФормы.Вставить("СтруктурноеПодразделение", Объект.СтруктурноеПодразделение);
	ПараметрыФормы.Вставить("Склад"                   , Объект.Склад);
	ПараметрыФормы.Вставить("Заголовок"               , ЗаголовокПодбора);
	ПараметрыФормы.Вставить("ИмяТаблицы"              , ИмяТаблицы);
	ПараметрыФормы.Вставить("Товар"                   , Истина);
	ПараметрыФормы.Вставить("Услуги"                  , Ложь);
	ПараметрыФормы.Вставить("ЕстьЦена"                , Ложь);
	ПараметрыФормы.Вставить("ВыбиратьВсе"			  , Истина);
	
	СписокЗапросов = Новый СписокЗначений();
	СписокЗапросов.Добавить("ПоСправочнику"                , "По справочнику");
	СписокЗапросов.Добавить("ОстаткиНоменклатуры"          , "По остаткам номенклатуры");
	
	ПараметрыФормы.Вставить("СписокВидовПодбора", СписокЗапросов);
	ПараметрыФормы.Вставить("ОбъектСсылка"      , Объект.Ссылка);
	
	Возврат ПараметрыФормы;

КонецФункции

&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИмяТаблицы)

	ЭтоВставкаИзБуфера = ВыбранноеЗначение.Свойство("ЭтоВставкаИзБуфера");
	
	СписокСвойств = Неопределено;	
	Если ЭтоВставкаИзБуфера Тогда		
		ТаблицаТоваров = ВыбранноеЗначение.Данные;
		СписокСвойств = ВыбранноеЗначение.СписокСвойств;		
	Иначе                                               		
		ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресПодобраннойНоменклатурыВХранилище);		
	КонецЕсли; 	
		
	ДанныеОбъекта = Новый Структура("Дата, Организация, Подразделение");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	СоответствиеСведенийОНоменклатуре = ОбработкаТабличныхЧастей.ПолучитьСведенияОСпискеНоменклатуры(
		ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаТоваров, "Номенклатура", Истина), ДанныеОбъекта);
		
	ПоляОбъектаСубконто		= Новый Структура("Субконто1, Субконто2, Субконто3", "СубконтоЗатратБУ1", "СубконтоЗатратБУ2", "СубконтоЗатратБУ3");
	ПоляОбъектаСубконтоНУ	= Новый Структура("Субконто1, Субконто2, Субконто3", "СубконтоЗатратНУ1", "СубконтоЗатратНУ2", "СубконтоЗатратНУ3");
	
	СтрокиДляЗаполненияСчетов = Новый Массив;

	Для Каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		СтрокаТабличнойЧасти = Неопределено;
		
		Если НЕ ЭтоВставкаИзБуфера Тогда
			// Ищем выбранную позицию в таблице подобранной номенклатуры.
			// Если найдем - увеличим количество; не найдем - добавим новую строку.
			
			СтруктураОтбора = Новый Структура();
			СтруктураОтбора.Вставить("Номенклатура"              , СтрокаТовара.Номенклатура);
			СтруктураОтбора.Вставить("ЕдиницаИзмерения"          , СтрокаТовара.ЕдиницаИзмерения);			
			
			СтрокаТабличнойЧасти = ОбработкаТабличныхЧастейКлиентСервер.НайтиСтрокуТабЧасти(Объект, ИмяТаблицы, СтруктураОтбора);
			
		КонецЕсли;
		
		Если СтрокаТабличнойЧасти <> Неопределено Тогда
			// Нашли, увеличиваем количество в первой найденной строке.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + СтрокаТовара.Количество;			
			
		Иначе
			
			СведенияОНоменклатуре = СоответствиеСведенийОНоменклатуре.Получить(СтрокаТовара.Номенклатура); 
			
			Если ЭтоВставкаИзБуфера 
				И СведенияОНоменклатуре <> Неопределено
				И ЗначениеЗаполнено(СведенияОНоменклатуре.Услуга)
				И СведенияОНоменклатуре.Услуга Тогда
				
				Продолжить;
				
			КонецЕсли; 		
			
			СтрокаТабличнойЧасти = Объект[ИмяТаблицы].Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТовара, СписокСвойств);
			СтрокиДляЗаполненияСчетов.Добавить(СтрокаТабличнойЧасти);			
			
			Если СведенияОНоменклатуре = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если ИмяТаблицы = "Товары" Тогда
				СтрокаТабличнойЧасти.ОприходоватьНаЗабалансовыйСчет = Истина;
				СтрокаТабличнойЧасти.ЕдиницаИзмерения		= СведенияОНоменклатуре.БазоваяЕдиницаИзмерения;
				СтрокаТабличнойЧасти.Коэффициент			= СведенияОНоменклатуре.Коэффициент;
				СтрокаТабличнойЧасти.СтавкаНДС				= СведенияОНоменклатуре.СтавкаНДС;
				
				Документы.ВедомостьВыдачиСпецодежды.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(
				ДанныеОбъекта, СтрокаТабличнойЧасти, ИмяТаблицы, СведенияОНоменклатуре, НЕ ЭтоВставкаИзБуфера);
				
				//ПроцедурыБухгалтерскогоУчетаКлиентСервер.УстановитьДоступностьИЗаголовкиСубконто(СтрокаТабличнойЧасти.СчетЗатратБУ, СтрокаТабличнойЧасти, ПоляОбъектаСубконто);
				ПроцедурыБухгалтерскогоУчетаКлиентСервер.УстановитьДоступностьИЗаголовкиСубконто(СтрокаТабличнойЧасти.СчетЗатратНУ, СтрокаТабличнойЧасти, ПоляОбъектаСубконтоНУ);
				ЗаполнитьПодразделениеВСтрокеТоваров(СтрокаТабличнойЧасти, Объект.Подразделение);
				СтрокаТабличнойЧасти.НовыйСчетУчета  = ПланыСчетов.Типовой.НайтиПоКоду("8311");
			КонецЕсли;                
		КонецЕсли;	
	КонецЦикла;
	
	Если ЭтоВставкаИзБуфера Тогда
		
		ВыбранноеЗначение.КоличествоДобавленныхСтрок = СтрокиДляЗаполненияСчетов.Количество();
		
	КонецЕсли;   
	
	//++ Кубасов Е I-19137
	Для каждого Стр Из Объект.Товары Цикл
		ЗаполнитьЦену(Стр.НомерСтроки-1);
		СтрокаТабличнойЧасти = Объект.Товары.Получить(Стр.НомерСтроки-1);
		СтрокаТабличнойЧасти.НовыйСчетУчета = Объект.Подразделение.СчетУчетаСО;
	КонецЦикла;
	ЭтаФорма.Модифицированность = Истина;
	//-- Кубасов Е I-19137
	
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СписокПараметровВыбораСубконто(ДанныеОбъекта, ПараметрыОбъекта, ШаблонИмяПоляОбъекта, ИмяСчета)
	
	СписокПараметров = Новый Структура;
	Для Индекс = 1 По 3 Цикл
		ИмяПоля = СтрЗаменить(ШаблонИмяПоляОбъекта, "%Индекс%", Индекс);
		Если ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Контрагенты") Тогда
			СписокПараметров.Вставить("Контрагент", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			СписокПараметров.Вставить("ДоговорКонтрагента", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Номенклатура") Тогда
			СписокПараметров.Вставить("Номенклатура", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Склады") Тогда
			СписокПараметров.Вставить("Склад", ПараметрыОбъекта[ИмяПоля]);
		КонецЕсли;
	КонецЦикла;
	СписокПараметров.Вставить("СчетУчета", 				  ПараметрыОбъекта[ИмяСчета]);	
	СписокПараметров.Вставить("Организация", 			  ДанныеОбъекта.Организация);
	СписокПараметров.Вставить("СтруктурноеПодразделение", ДанныеОбъекта.СтруктурноеПодразделение);
	СписокПараметров.Вставить("ВыбиратьПодразделенияОрганизации", Истина);

	Возврат СписокПараметров; 

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьПараметрыВыбораПолейСубконто(Форма, Суффикс, ИмяСчета, ИмяТабличнойЧасти = "")
	
	Если ИмяТабличнойЧасти = "" Тогда
		
		ПараметрыДокумента = СписокПараметровВыбораСубконто(Форма.Объект, Форма.Объект, "Субконто" + Суффикс + "%Индекс%", ИмяСчета);
		ПроцедурыБухгалтерскогоУчетаКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(Форма, Форма.Объект, "Субконто" + Суффикс + "%Индекс%", "Субконто" + Суффикс + "%Индекс%", ПараметрыДокумента);	
		
	Иначе
		
		Если Форма.Элементы[ИмяТабличнойЧасти].ТекущаяСтрока <> Неопределено Тогда
			СтрокаТаблицы = Форма.Объект[ИмяТабличнойЧасти].НайтиПоИдентификатору(Форма.Элементы[ИмяТабличнойЧасти].ТекущаяСтрока);
					
			ПараметрыДокумента = СписокПараметровВыбораСубконто(Форма.Объект, СтрокаТаблицы, "Субконто" + Суффикс + "%Индекс%", ИмяСчета);
			ПроцедурыБухгалтерскогоУчетаКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(Форма, СтрокаТаблицы, "Субконто" + Суффикс + "%Индекс%", ИмяТабличнойЧасти + "Субконто" + Суффикс + "%Индекс%", ПараметрыДокумента);	
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СчетЗатратБУПриИзмененииНаСервере(ДанныеОбъекта)
	
	ПроцедурыБухгалтерскогоУчета.ПроверитьВладельцаСубконтоПодразделение(ДанныеОбъекта, 
	                                        ДанныеОбъекта.Организация, 
	                                        Новый Структура("НазваниеСубконтоБУ1, НазваниеСубконтоБУ2, НазваниеСубконтоБУ3, 
	                                                        |СубконтоБУ1, СубконтоБУ2, СубконтоБУ3",
	                                                        "СубконтоЗатратНДСБУ1", "СубконтоЗатратНДСБУ2", "СубконтоЗатратНДСБУ3", 
	                                                        ДанныеОбъекта.СубконтоЗатратНДСБУ1, ДанныеОбъекта.СубконтоЗатратНДСБУ2, ДанныеОбъекта.СубконтоЗатратНДСБУ3));
															
	ПроцедурыБухгалтерскогоУчета.ПроверитьВладельцаСубконтоПодразделение(ДанныеОбъекта, 
	                                        ДанныеОбъекта.Организация, 
	                                        Новый Структура("НазваниеСубконтоБУ1, НазваниеСубконтоБУ2, НазваниеСубконтоБУ3, 
	                                                        |СубконтоБУ1, СубконтоБУ2, СубконтоБУ3",
	                                                        "СубконтоЗатратНДСНУ1", "СубконтоЗатратНДСНУ2", "СубконтоЗатратНДСНУ3", 
	                                                        ДанныеОбъекта.СубконтоЗатратНДСНУ1, ДанныеОбъекта.СубконтоЗатратНДСНУ2, ДанныеОбъекта.СубконтоЗатратНДСНУ3));
															
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СчетЗатратНУПриИзмененииНаСервере(ДанныеОбъекта)
	
	ПроцедурыБухгалтерскогоУчета.ПроверитьВладельцаСубконтоПодразделение(ДанныеОбъекта, 
	                                        ДанныеОбъекта.Организация, 
	                                        Новый Структура("НазваниеСубконтоБУ1, НазваниеСубконтоБУ2, НазваниеСубконтоБУ3, 
	                                                        |СубконтоБУ1, СубконтоБУ2, СубконтоБУ3",
	                                                        "СубконтоЗатратНДСНУ1", "СубконтоЗатратНДСНУ2", "СубконтоЗатратНДСНУ3", 
	                                                        ДанныеОбъекта.СубконтоЗатратНДСНУ1, ДанныеОбъекта.СубконтоЗатратНДСНУ2, ДанныеОбъекта.СубконтоЗатратНДСНУ3));

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ТоварыСчетЗатратБУПриИзмененииНаСервере(СтрокаТабличнойЧасти, ДанныеОбъекта)
	
	ПроцедурыБухгалтерскогоУчета.ПроверитьВладельцаСубконтоПодразделение(СтрокаТабличнойЧасти, 
	                                        ДанныеОбъекта.Организация, 
	                                        Новый Структура("НазваниеСубконтоБУ1, НазваниеСубконтоБУ2, НазваниеСубконтоБУ3, 
	                                                        |СубконтоБУ1, СубконтоБУ2, СубконтоБУ3",
	                                                        "СубконтоЗатратБУ1", "СубконтоЗатратБУ2", "СубконтоЗатратБУ3", 
	                                                        СтрокаТабличнойЧасти.СубконтоЗатратБУ1, СтрокаТабличнойЧасти.СубконтоЗатратБУ2, СтрокаТабличнойЧасти.СубконтоЗатратБУ3));
															
	СчетаУчета = Новый Структура("СчетЗатратБУ, СубконтоЗатратБУ1,
								 |СубконтоЗатратБУ2, СубконтоЗатратБУ3", СтрокаТабличнойЧасти.СчетЗатратБУ,
								 СтрокаТабличнойЧасти.СубконтоЗатратБУ1, СтрокаТабличнойЧасти.СубконтоЗатратБУ2,
								 СтрокаТабличнойЧасти.СубконтоЗатратБУ3);

	ПроцедурыБухгалтерскогоУчета.ЗаполнитьАналитикуСчетаТабличнойЧасти(СтрокаТабличнойЧасти, СчетаУчета, "СубконтоЗатратБУ", "СчетЗатратБУ", "СубконтоЗатратБУ");
															
	ПроцедурыБухгалтерскогоУчета.ПроверитьВладельцаСубконтоПодразделение(СтрокаТабличнойЧасти, 
	                                        ДанныеОбъекта.Организация, 
	                                        Новый Структура("НазваниеСубконтоБУ1, НазваниеСубконтоБУ2, НазваниеСубконтоБУ3, 
	                                                        |СубконтоБУ1, СубконтоБУ2, СубконтоБУ3",
	                                                        "СубконтоЗатратНУ1", "СубконтоЗатратНУ2", "СубконтоЗатратНУ3", 
	                                                        СтрокаТабличнойЧасти.СубконтоЗатратНУ1, СтрокаТабличнойЧасти.СубконтоЗатратНУ2, СтрокаТабличнойЧасти.СубконтоЗатратНУ3));
															
	СчетаУчета = Новый Структура("СчетЗатратНУ, СубконтоЗатратНУ1,
								 |СубконтоЗатратНУ2, СубконтоЗатратНУ3", СтрокаТабличнойЧасти.СчетЗатратНУ,
								 СтрокаТабличнойЧасти.СубконтоЗатратНУ1, СтрокаТабличнойЧасти.СубконтоЗатратНУ2,
								 СтрокаТабличнойЧасти.СубконтоЗатратНУ3);

	ПроцедурыБухгалтерскогоУчета.ЗаполнитьАналитикуСчетаТабличнойЧасти(СтрокаТабличнойЧасти, СчетаУчета, "СубконтоЗатратНУ", "СчетЗатратНУ", "СубконтоЗатратНУ");

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ТоварыСчетЗатратНУПриИзмененииНаСервере(СтрокаТабличнойЧасти, ДанныеОбъекта)
	
	ПроцедурыБухгалтерскогоУчета.ПроверитьВладельцаСубконтоПодразделение(СтрокаТабличнойЧасти, 
	                                        ДанныеОбъекта.Организация, 
	                                        Новый Структура("НазваниеСубконтоБУ1, НазваниеСубконтоБУ2, НазваниеСубконтоБУ3, 
	                                                        |СубконтоБУ1, СубконтоБУ2, СубконтоБУ3",
	                                                        "СубконтоЗатратНУ1", "СубконтоЗатратНУ2", "СубконтоЗатратНУ3", 
	                                                        СтрокаТабличнойЧасти.СубконтоЗатратНУ1, СтрокаТабличнойЧасти.СубконтоЗатратНУ2, СтрокаТабличнойЧасти.СубконтоЗатратНУ3));
															
	СчетаУчета = Новый Структура("СчетЗатратНУ, СубконтоЗатратНУ1,
								 |СубконтоЗатратНУ2, СубконтоЗатратНУ3", СтрокаТабличнойЧасти.СчетЗатратНУ,
								 СтрокаТабличнойЧасти.СубконтоЗатратНУ1, СтрокаТабличнойЧасти.СубконтоЗатратНУ2,
								 СтрокаТабличнойЧасти.СубконтоЗатратНУ3);

	ПроцедурыБухгалтерскогоУчета.ЗаполнитьАналитикуСчетаТабличнойЧасти(СтрокаТабличнойЧасти, СчетаУчета, "СубконтоЗатратНУ", "СчетЗатратНУ", "СубконтоЗатратНУ");

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНомераГТД(Команда)
	
	ПараметрыФормы = ПараметрыФормыРедактированияНомеровГТД();
	НомераГТДКлиент.ОткрытьФормуРедактированияНомеровГТД(ПараметрыФормы, ЭтаФорма);

КонецПроцедуры

&НаСервере
Функция ПараметрыФормыРедактированияНомеровГТД()
	
	Возврат НомераГТДСервер.ЗаполнитьПараметрыФормыРедактированияНомеровГТД(Объект, ЭтаФорма);
	
КонецФункции

&НаСервере
Процедура ЗаполнитьТабличнуюЧастьНомераГТД(АдресНомераГТД)		
	
	Если НЕ АдресНомераГТД = Неопределено Тогда
		ТабЗначНомераГТД = ПолучитьИзВременногоХранилища(АдресНомераГТД);
		Объект.НомераГТД.Загрузить(ТабЗначНомераГТД);
		Модифицированность = Истина;
	КонецЕсли;  
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьТабличнуюЧасть(ИмяТабличнойЧасти, СинонимТабличнойЧасти)
	
	ПараметрыФормы = ПолучитьПараметрыОбработкиТабличнойЧасти(ИмяТабличнойЧасти, СинонимТабличнойЧасти);
	Если ПараметрыФормы <> Неопределено Тогда
		ОткрытьФорму("Обработка.ОбработкаТабличнойЧастиДокументов.Форма.Форма", ПараметрыФормы,
			ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Функция ПолучитьПараметрыОбработкиТабличнойЧасти(ИмяТабличнойЧасти, СинонимТабличнойЧасти)
	
	ПараметрыОбработки = Новый Структура;
	
	ПараметрыОбработки.Вставить("АдресХранилищаТабличнойЧасти", ПоместитьТабличнуюЧастьВоВременноеХранилищеНаСервере(ИмяТабличнойЧасти));
	ПараметрыОбработки.Вставить("ДокументСсылка"              , Объект.Ссылка);
	ПараметрыОбработки.Вставить("ДокументДата"                , Объект.Дата);
	ПараметрыОбработки.Вставить("ДокументВалюта"              , Справочники.Валюты.ПустаяСсылка());
	ПараметрыОбработки.Вставить("ДокументКурс"                , 1);
	ПараметрыОбработки.Вставить("ДокументКратность"           , 1);
	ПараметрыОбработки.Вставить("ДокументСуммаВключаетНДС"    , Ложь);
	ПараметрыОбработки.Вставить("ДокументУчитыватьНДС"        , Ложь);
	ПараметрыОбработки.Вставить("ДокументНДСВключенВСтоимость", Ложь);
	ПараметрыОбработки.Вставить("ИмяТаблицы"                  , ИмяТабличнойЧасти);
	ПараметрыОбработки.Вставить("Заголовок"                   , СинонимТабличнойЧасти);
	
	СтруктураРеквизитов          = Новый Структура;
	СтруктураСвязанныхРеквизитов = Новый Структура;
	
	СтруктураРеквизитов.Вставить("Номенклатура");
	СтруктураРеквизитов.Вставить("Количество");
	СтруктураРеквизитов.Вставить("СчетУчетаНДС");
	СтруктураРеквизитов.Вставить("НДСВидОборота");
	СтруктураРеквизитов.Вставить("НДСВидПоступления");
	СтруктураРеквизитов.Вставить("СчетУчета");
	СтруктураРеквизитов.Вставить("НовыйСчетУчета");
	СтруктураРеквизитов.Вставить("СубконтоЗатратБУ1");
	СтруктураРеквизитов.Вставить("СубконтоЗатратБУ2");
	СтруктураРеквизитов.Вставить("СубконтоЗатратБУ3");
	СтруктураРеквизитов.Вставить("СчетУчетаНУ");
	СтруктураРеквизитов.Вставить("СчетЗатратНУ");
	СтруктураРеквизитов.Вставить("СубконтоЗатратНУ1");
	СтруктураРеквизитов.Вставить("СубконтоЗатратНУ2");
	СтруктураРеквизитов.Вставить("СубконтоЗатратНУ3");
	
	СтруктураСвязанныхРеквизитов.Вставить("НовыйСчетУчета", "СубконтоЗатратБУ1, СубконтоЗатратБУ2, СубконтоЗатратБУ3");
	СтруктураСвязанныхРеквизитов.Вставить("СчетЗатратНУ", "СубконтоЗатратНУ1, СубконтоЗатратНУ2, СубконтоЗатратНУ3");
	
	ПараметрыОбработки.Вставить("СтруктураРеквизитов", СтруктураРеквизитов);
	ПараметрыОбработки.Вставить("СтруктураСвязанныхРеквизитов", СтруктураСвязанныхРеквизитов);
	
	ВидимыеКолонки = Новый Массив;
	ПолучитьВидимыеКолонкиТабличнойЧасти(Элементы[ИмяТабличнойЧасти], Элементы[ИмяТабличнойЧасти].ПутьКДанным + ".", ВидимыеКолонки);
	ПараметрыОбработки.Вставить("ВидимыеКолонки", ВидимыеКолонки);

	Возврат ПараметрыОбработки;
	
КонецФункции

&НаСервере
Функция ПоместитьТабличнуюЧастьВоВременноеХранилищеНаСервере(ИмяТабличнойЧасти)

	Возврат ПоместитьВоВременноеХранилище(Объект[ИмяТабличнойЧасти].Выгрузить(), УникальныйИдентификатор);

КонецФункции

&НаСервере
Функция ПолучитьВидимыеКолонкиТабличнойЧасти(ЭлементТабличнаяЧасть, ПутьКДаннымТаблицы, МассивКолонок)
	
	Для Каждого Элемент Из ЭлементТабличнаяЧасть.ПодчиненныеЭлементы Цикл
		Если ТипЗнч(Элемент) = Тип("ГруппаФормы") Тогда
			ПолучитьВидимыеКолонкиТабличнойЧасти(Элемент, ПутьКДаннымТаблицы, МассивКолонок);
		ИначеЕсли ТипЗнч(Элемент) = Тип("ПолеФормы") И Элемент.Видимость Тогда
			МассивКолонок.Добавить(СтрЗаменить(Элемент.ПутьКДанным, ПутьКДаннымТаблицы, ""));
		КонецЕсли;
	КонецЦикла;

КонецФункции

&НаСервере
Процедура ОбработкаОповещенияОбработкиТабличнойЧастиНаСервере(Параметры)

	ТаблицаОбработки  = ПолучитьИзВременногоХранилища(Параметры.АдресОбработаннойТабличнойЧастиВХранилище);
	ИмяТабличнойЧасти = Параметры.ИмяТаблицы;
	
	Объект[ИмяТабличнойЧасти].Загрузить(ТаблицаОбработки);
		
	УправлениеФормой(ЭтаФорма);         
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	
	Если Объект.Склад = ТекущийСклад Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийСклад = Объект.Склад;
	
	Объект.МОЛОтправитель = ПолучитьМОЛСклада(Объект.Склад, Объект.Дата);
	
	Если Объект.НомераГТД.Количество() > 0 Тогда
		Объект.НомераГТД.Очистить();
	КонецЕсли;	

КонецПроцедуры

#Область КопированиеВставкаСтрокЧерезБуферОбмена

&НаСервере
Процедура СкопироватьСтрокиНаСервере(ИмяТаблицы)
	
	ОбщегоНазначения.СкопироватьСтрокиВБуферОбмена(Объект[ИмяТаблицы], 
		Элементы[ИмяТаблицы].ВыделенныеСтроки, Объект.Ссылка.Метаданные().Имя);

КонецПроцедуры

&НаСервере
Функция ВставитьСтрокиНаСервере(ИмяТаблицы)
	
	ПараметрыВставки = ОбработкаТабличныхЧастей.ПолучитьПараметрыВставкиДанныхИзБуфераОбмена(Объект.Ссылка, ИмяТаблицы);
	ОпределитьСписокСвойствДляВставкиИзБуфера(ПараметрыВставки);
	ОбработкаВыбораПодборВставкаИзБуфераНаСервере(ПараметрыВставки, ПараметрыВставки.ИмяТаблицы);
	
	Возврат ПараметрыВставки.КоличествоДобавленныхСтрок;
	
КонецФункции

&НаКлиенте
Функция ПолучитьИмяТекущейТабличнойЧасти()
	
	Возврат "Товары";
	
КонецФункции

&НаСервере
Процедура ОпределитьСписокСвойствДляВставкиИзБуфера(ПараметрыВставки)

	СписокСвойств = Новый Массив;
	СписокСвойств.Добавить("Номенклатура");
	СписокСвойств.Добавить("ЕдиницаИзмерения");
	СписокСвойств.Добавить("Коэффициент");
	СписокСвойств.Добавить("Количество");
	СписокСвойств.Добавить("СтавкаНДС");
	СписокСвойств.Добавить("НДСВидПоступления");
	СписокСвойств.Добавить("НДСВидОборота");  	
	
	Если ПараметрыВставки.ПоказыватьСчетаУчетаВДокументах Тогда
		
		СписокСвойств.Добавить("СчетУчета");		
		СписокСвойств.Добавить("СчетУчетаНУ");		
		СписокСвойств.Добавить("СчетУчетаНДС");		
		
		Если ПараметрыВставки.ИсточникИДокументОдногоВида Тогда			
			СписокСвойств.Добавить("НовыйСчетУчета");
			СписокСвойств.Добавить("СчетЗатратНУ");
			СписокСвойств.Добавить("СубконтоЗатратБУ1"); 
			СписокСвойств.Добавить("СубконтоЗатратБУ2");
			СписокСвойств.Добавить("СубконтоЗатратБУ3");			
			СписокСвойств.Добавить("СубконтоЗатратНУ1"); 
			СписокСвойств.Добавить("СубконтоЗатратНУ2");
			СписокСвойств.Добавить("СубконтоЗатратНУ3")	
		КонецЕсли;   
		
	КонецЕсли;
	
	ПараметрыВставки.СписокСвойств = ОбработкаТабличныхЧастей.ПолучитьСписокСвойствИмеющихсяВТаблицеДанных(
		ПараметрыВставки.Данные, СписокСвойств);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьКомандыВставки(Форма, Доступность)

	Доступность = Не Форма.ТолькоПросмотр И Доступность;
	Элементы = Форма.Элементы;
	Элементы.ТоварыВставитьСтроки.Доступность					 = Доступность;
	Элементы.ТоварыКонтекстноеМенюВставитьСтроки.Доступность	 = Доступность;

КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораПодборВставкаИзБуфераНаСервере(ВыбранноеЗначение, ИмяТаблицы)

	ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИмяТаблицы);
			
КонецПроцедуры

#КонецОбласти


&НаКлиенте
Процедура ТоварыСрокСлужбыПриИзменении(Элемент)
	
	ИзменитьДатуОкончания();	
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьДатуОкончания()
	
	Для Каждого СтрокаТовар Из Объект.Товары Цикл
		Если СтрокаТовар.СрокСлужбы = 0 Тогда
			СтрокаТовар.ДатаОкончания = '00010101';
		Иначе
			СтрокаТовар.ДатаОкончания = ДобавитьМесяц(Объект.Дата, СтрокаТовар.СрокСлужбы);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры	

&НаКлиенте
Процедура ПодразделениеПриИзменении(Элемент)
	
	Для Каждого СтрокаТовар Из Объект.Товары Цикл
		ЗаполнитьПодразделениеВСтрокеТоваров(СтрокаТовар, Объект.Подразделение);
	КонецЦикла;
	
	ЗаполнитьСчетУчетаСО();

	ЗаменитьДляКаждойГруппаТоваровСчетЗатрат();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСчетУчетаСО()
	
	если ЗначениеЗаполнено(Объект.Подразделение) тогда
		Если ЗначениеЗаполнено(Объект.Подразделение.СчетУчетаСО) тогда
			Для каждого текстрока Из Объект.Товары Цикл
				текстрока.СчетЗатратБУ = Объект.Подразделение.СчетУчетаСО;
			КонецЦикла; 
		Конецесли;
	Конецесли;
	
КонецПроцедуры 


&НаКлиенте
Процедура СкладПолучательПриИзменении(Элемент)
	
	Объект.МОЛПолучатель = ПолучитьМОЛСклада(Объект.СкладПолучатель, Объект.Дата);
	ОбновитьДолжностьМОЛаПолучателя();
	//МОЛПолучательПолучитьРазмерыОдежды();
	УстановитьРазмеры(Объект.СкладПолучатель);	
КонецПроцедуры

&НаСервере
Процедура УстановитьРазмеры(Наименование)

	Объект.Рост = Наименование.Рост;
	Объект.Одежда = Наименование.Одежда;	
	Объект.Обувь = Наименование.Обувь;	
	Объект.ГолУбор = Наименование.ГолУбор;	
	
КонецПроцедуры 


&НаСервереБезКонтекста
Функция ПолучитьМОЛСклада(Склад, Дата)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ОтветственныеЛицаСрезПоследних.ФизическоеЛицо КАК ФизическоеЛицо
	               |ИЗ
	               |	РегистрСведений.ОтветственныеЛица.СрезПоследних(&ДатаСреза, СтруктурнаяЕдиница = &Склад) КАК ОтветственныеЛицаСрезПоследних";
	Запрос.УстановитьПараметр("ДатаСреза", Дата);
	Запрос.УстановитьПараметр("Склад", Склад);
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		Возврат Результат.ФизическоеЛицо;
	Иначе 
		Возврат Справочники.ФизическиеЛица.ПустаяСсылка();
	КонецЕсли;	
	
КонецФункции	

&НаКлиенте
Процедура ОбновитьДолжностьМОЛаПолучателя()

	Если Объект.МОЛПолучатель.Пустая() Тогда
		Объект.Должность = ПредопределенноеЗначение("Справочник.ДолжностиОрганизаций.ПустаяСсылка");
	Иначе	
		Объект.Должность = ОбновитьДолжностьМОЛаПолучателяНаСервере(Объект.Дата, Объект.Организация, Объект.МОЛПолучатель);
		Объект.Пол		 = ПолучитьПолПолучателя(Объект.МОЛПолучатель);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОбновитьДолжностьМОЛаПолучателяНаСервере(Дата, Организация, Физлицо)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	РаботникиОрганизацийСрезПоследних.Должность КАК Должность
	               |ИЗ
	               |	РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	               |			&ДатаСреза,
	               |			Организация = &Организация
	               |				И Сотрудник.Физлицо = &Физлицо) КАК РаботникиОрганизацийСрезПоследних";   // |				И Сотрудник.ВидЗанятости = &ВидЗанятости
	Запрос.УстановитьПараметр("ДатаСреза", Дата);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Физлицо", Физлицо);
	Запрос.УстановитьПараметр("ВидЗанятости", Перечисления.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы);
	
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		Возврат Результат.Должность;
	Иначе 
		Возврат Справочники.ДолжностиОрганизаций.ПустаяСсылка();
	КонецЕсли;	
	
КонецФункции	

&НаСервереБезКонтекста
Функция ПолучитьПолПолучателя(Физлицо)
	
	Возврат Физлицо.Пол;
	
КонецФункции	

&НаКлиенте
Процедура МОЛПолучательПриИзменении(Элемент)
	
	ОбновитьДолжностьМОЛаПолучателя();
    //МОЛПолучательПолучитьРазмерыОдежды();

КонецПроцедуры


&НаСервере
Процедура МОЛПолучательПолучитьРазмерыОдежды()

	РазмерыОдежды = РегистрыСведений.КТ_СпецО_РазмерыСпецОдежды.ПолучитьРазмерыФизЛица(Объект.МОЛПолучатель);
	ЗаполнитьЗначенияСвойств(Объект, РазмерыОдежды);
	
КонецПроцедуры

&НаСервере
Процедура ДвиженияНаСервере()
		
КонецПроцедуры

&НаКлиенте
Процедура Движения(Команда)
	ДвиженияНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПриОткрытииНаСервере()
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ПриОткрытииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	ТекСтрока = Элементы.Товары.ТекущиеДанные.НомерСтроки-1;
	ЗаполнитьЦену(ТекСтрока);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЦену(ТекСтрока)
	СтрокаТабличнойЧасти = Объект.Товары.Получить(ТекСтрока);
	Запрос = новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	             |	ТиповойОстатки.СуммаОстаток,
	             |	ТиповойОстатки.КоличествоОстаток
	             |ИЗ
	             |	РегистрБухгалтерии.Типовой.Остатки(
	             |			&НаДату,
	             |			Счет = &Счет,
	             |			,
	             |			Субконто1 = &Субконто1
	             |				И Субконто2 = &Субконто2) КАК ТиповойОстатки";
	Запрос.УстановитьПараметр("НаДату",?(Объект.Проведен, Объект.Дата, КонецДня(Объект.Дата)));
	Запрос.УстановитьПараметр("Счет", СтрокаТабличнойЧасти.СчетУчета);
	Запрос.УстановитьПараметр("Субконто1",СтрокаТабличнойЧасти.Номенклатура);
	Запрос.УстановитьПараметр("Субконто2",Объект.Склад);
	выборка=Запрос.Выполнить().Выбрать();
	пока выборка.Следующий() цикл
		//СтрокаТабличнойЧасти.цена = ?(выборка.количествоостаток=0,0,выборка.СуммаОстаток/выборка.количествоостаток);		
		Если выборка.количествоостаток=0 Тогда
			СтрокаТабличнойЧасти.цена = 0;
			СтрокаТабличнойЧасти.Сумма = 0;
		Иначе
			Если выборка.количествоостаток>=СтрокаТабличнойЧасти.Количество Тогда
				КоэфСуммы = СтрокаТабличнойЧасти.Количество/выборка.количествоостаток;
			Иначе
				КоэфСуммы = 1;
			КонецЕсли;
			СтрокаТабличнойЧасти.Сумма = выборка.СуммаОстаток*КоэфСуммы;
			//Если СтрокаТабличнойЧасти.Количество=0 Тогда
			//	СтрокаТабличнойЧасти.Количество = 1;
			//КонецЕсли;
			СтрокаТабличнойЧасти.цена = ?(СтрокаТабличнойЧасти.Количество=0, 0, СтрокаТабличнойЧасти.Сумма/СтрокаТабличнойЧасти.Количество);
		КонецЕсли;
	Конеццикла;
	//ТоварыЦенаПриИзменении(истина);
Конецпроцедуры

&НаКлиенте
Процедура ОбновитьЦеныСО(Команда)
	Для каждого Стр Из Объект.Товары Цикл
		ЗаполнитьЦену(Стр.НомерСтроки-1);
	КонецЦикла;
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ОприходоватьНаЗабалансовыйСчетПриИзменении(Элемент)
	
	Для каждого Текстрока из Объект.Товары цикл
		ТекСтрока.ОприходоватьНаЗабалансовыйСчет = Объект.ОприходоватьНаЗабалансовыйСчет;	
	Конеццикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	ТекДанные = Элементы.Товары.ТекущиеДанные;
	ТекДанные.Сумма = ТекДанные.Количество*ТекДанные.Цена;
КонецПроцедуры


// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	ЭтаФорма.Прочитать();
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды   

//++Кибернетика Кубасов Е Задача I-22370
Процедура ЗаменитьДляКаждойГруппаТоваровСчетЗатрат()
	Для Каждого СтрокаТовара из Объект.Товары Цикл
	СтрокаТовара.НовыйСчетУчета =Объект.Подразделение.СчетУчетаСО;	
	КонецЦикла
КонецПроцедуры
//--Кибернетика Кубасов Е Задача I-22370
