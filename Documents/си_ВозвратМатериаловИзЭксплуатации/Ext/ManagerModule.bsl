#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

// Заполняет счета учета номенклатуры в табличной части документа
//
// Параметры:
//  Объект         	  - структура данных объекта, используемых при заполнении счетов учета (вид операции,
//                      вид договора контрагента, признак комиссионной торговли и т.п.)
//  ИмяТабличнойЧасти - Строка - имя табличной части документа
//
Процедура ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, ИмяТабличнойЧасти) Экспорт
	
	ТабличнаяЧасть = Объект[ИмяТабличнойЧасти];
	
	ДанныеОбъекта = Новый Структура("Дата, Организация, ВидОперации, УчитыватьКПН");
	
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	СоответствиеСчетовУчета = общ_ПереопределяемыеПроцедурыБКСервер.ПолучитьСчетаУчетаСпискаНоменклатуры(
			ДанныеОбъекта.Организация, общ_ПереопределениеПроцедурБККлиентСервер.ВыгрузитьКолонку(ТабличнаяЧасть, "Номенклатура", Истина), ДанныеОбъекта.Дата);
			
	Для Каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
		СчетаУчета = СоответствиеСчетовУчета.Получить(СтрокаТабличнойЧасти.Номенклатура);
		ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, СтрокаТабличнойЧасти, ИмяТабличнойЧасти, СчетаУчета);
	КонецЦикла;
		
КонецПроцедуры

// Заполняет счета учета номенклатуры в строке табличной части документа
//
// Параметры:
//  ДанныеОбъекта         - структура данных объекта, используемых при заполнении счетов учета (вид операции,
//                          вид договора контрагента, признак комиссионной торговли и т.п.)
//  СтрокаТабличнойЧасти  - строка табличной части документа
//  ИмяТабличнойЧасти     - имя табличной части документа
//  СведенияОНоменклатуре - структура сведений о номенклатуре, либо стуктура счетов учета
//
Процедура ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, СтрокаТабличнойЧасти, ИмяТабличнойЧасти, СведенияОНоменклатуре) Экспорт
	СчетаУчетаСпецодежды				= си_УчетСпецодеждыСерверПовтИсп.ПолучитьСчетаУчетаСпецодежды();
	СтрокаТабличнойЧасти.СчетПередачиБУ = СчетаУчетаСпецодежды.СпецоснасткаИСпецодеждаНаСкладе;
	СтрокаТабличнойЧасти.СчетПередачиНУ = общ_ПереопределяемыеПроцедурыБКВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СтрокаТабличнойЧасти.СчетПередачиБУ));
КонецПроцедуры

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Перемещение материалов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ПечатьВозвратМатериалов";
	КомандаПечати.Представление = НСтр("ru = 'Возврат материалов'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ общ_ПереопределяемыеПроцедурыБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.Порядок = 51;
	
	Возврат;	
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПечатьВозвратМатериалов") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ПечатьВозвратМатериалов",
			НСтр("ru = 'Возврат материалов'"),
			ПечатьВозвратМатериалов(МассивОбъектов, ОбъектыПечати),
			,
			"Документ.си_ВозвратМатериаловИзЭксплуатации.ПФ_MXL_ВозвратМатериалов");
	КонецЕсли;
	
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Формирует запрос по таблице "Исполнители" документа
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса. В запросе данные документа дополняются значениями
//  проверяемых параметров из связанного с
//
Функция СформироватьЗапросПоМатериалыПроверка(ТабличнаяЧасть) Экспорт

	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ТабличнаяЧасть", 	 			 ТабличнаяЧасть);
    //
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	ВТ_ТабличнаяЧасть.Номенклатура,
	               |	ВТ_ТабличнаяЧасть.номерСтроки
	               |ПОМЕСТИТЬ Материалы
	               |ИЗ
	               |	&ТабличнаяЧасть КАК ВТ_ТабличнаяЧасть
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Материалы.номерСтроки,
	               |	Материалы.Номенклатура,
	               |	НоменклатураСправочник.си_ЯвляетсяСпецодеждойИнвентарем КАК ЯвляетсяСпецодеждойИнвентарем
	               |ИЗ
	               |	Материалы КАК Материалы
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК НоменклатураСправочник
	               |		ПО Материалы.Номенклатура = НоменклатураСправочник.Ссылка";

	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить();
	
КонецФункции // СформироватьЗапросПоИсполнители()

Процедура ЗаполнитьПоДокументуОснованию(Объект, ДокументОснование) Экспорт
	
	общ_ПереопределяемыеПроцедурыБКСервер.ЗаполнитьШапкуДокументаПоОснованию(Объект, ДокументОснование);
	
	Объект.ДокументОснование = ДокументОснование;
	
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.си_ПеремещениеМатериаловВЭксплуатации") Тогда
		ЗаполнитьПоПеремещению(Объект,"Заполнить", ДокументОснование);
	ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.си_ПередачаМатериаловВЭксплуатацию") Тогда
		ЗаполнитьПоПередачеВЭксплуатацию(Объект,"Заполнить", ДокументОснование);
	КонецЕсли;
	
КонецПроцедуры   

Процедура ЗаполнитьПоПеремещению(Объект, Режим, Основание) Экспорт 
	
	Если НЕ ЗначениеЗаполнено(Основание) Тогда
		Возврат;
	КонецЕсли;
	
	ТабличнаяЧасть = Объект.Материалы;
	
	Если ТабличнаяЧасть.Количество() > 0 И Режим = "Заполнить" Тогда
		ТабличнаяЧасть.Очистить();
	КонецЕсли;
	
	СчетаУчетаСпецодежды		= си_УчетСпецодеждыСерверПовтИсп.ПолучитьСчетаУчетаСпецодежды();
	
	// Заполнение шапки
	Объект.ВидУчетаНУ 							= Основание.ВидУчетаНУ;
	Объект.ПодразделениеОрганизации 			= Основание.ПодразделениеОрганизацииПолучатель;
	Объект.Склад 								= Основание.СкладПолучатель;
	Объект.СтруктурноеПодразделение 			= Основание.СтруктурноеПодразделениеПолучатель;
	Объект.УчитыватьКПН 						= Основание.УчитыватьКПН;
	
	Для Каждого ВыборкаПоТоварам Из Основание.Материалы Цикл
		НоваяСтрока = Объект.Материалы.Добавить();
		НоваяСтрока.ЕдиницаИзмерения 		= ВыборкаПоТоварам.ЕдиницаИзмерения;
		НоваяСтрока.Количество 				= ВыборкаПоТоварам.Количество;
		НоваяСтрока.Коэффициент 			= ВыборкаПоТоварам.Коэффициент;
		НоваяСтрока.НазначениеИспользования	= ВыборкаПоТоварам.НазначениеИспользованияПолучатель;
		НоваяСтрока.Номенклатура 			= ВыборкаПоТоварам.Номенклатура;
		НоваяСтрока.Сотрудник 				= ВыборкаПоТоварам.СотрудникПолучатель;
		НоваяСтрока.ДокументПередачи 		= ВыборкаПоТоварам.ДокументПередачи;
		НоваяСтрока.СчетПередачиБУ 			= СчетаУчетаСпецодежды.СпецоснасткаИСпецодеждаНаСкладе;
		НоваяСтрока.СчетПередачиНУ 			= СчетаУчетаСпецодежды.СпецоснасткаИСпецодеждаНаСкладеНУ;
		НоваяСтрока.Характеристика	 		= ВыборкаПоТоварам.Характеристика;
	КонецЦикла;


КонецПроцедуры

Процедура ЗаполнитьПоПередачеВЭксплуатацию(Объект, Режим, Основание) Экспорт 
	
	Если НЕ ЗначениеЗаполнено(Основание) Тогда
		Возврат;
	КонецЕсли;
	
	ТабличнаяЧасть = Объект.Материалы;
	
	Если ТабличнаяЧасть.Количество() > 0 И Режим = "Заполнить" Тогда
		ТабличнаяЧасть.Очистить();
	КонецЕсли;
	
	СчетаУчетаСпецодежды		= си_УчетСпецодеждыСерверПовтИсп.ПолучитьСчетаУчетаСпецодежды();
	
	// Заполнение шапки
	Объект.ВидУчетаНУ 							= Основание.ВидУчетаНУ;
	Объект.ПодразделениеОрганизации 			= Основание.ПодразделениеОрганизации;
	Объект.Склад 								= Основание.Склад;
	Объект.УчитыватьКПН 						= Основание.УчитыватьКПН;
	
	Для Каждого ВыборкаПоТоварам Из Основание.Материалы Цикл
		НоваяСтрока = Объект.Материалы.Добавить();
		НоваяСтрока.ЕдиницаИзмерения 		= ВыборкаПоТоварам.ЕдиницаИзмерения;
		НоваяСтрока.Количество 				= ВыборкаПоТоварам.Количество;
		НоваяСтрока.Коэффициент 			= ВыборкаПоТоварам.Коэффициент;
		НоваяСтрока.НазначениеИспользования	= ВыборкаПоТоварам.НазначениеИспользования;
		НоваяСтрока.Номенклатура 			= ВыборкаПоТоварам.Номенклатура;
		НоваяСтрока.Сотрудник 				= ВыборкаПоТоварам.Сотрудник;
		НоваяСтрока.ДокументПередачи 		= ?(Основание.ВидОперации = Перечисления.си_ВидыОперацийПередачиВЭксплуатацию.ПервичнаяПередача,Основание.Ссылка,ВыборкаПоТоварам.ДокументПередачи);
		НоваяСтрока.СчетПередачиБУ 			= СчетаУчетаСпецодежды.СпецоснасткаИСпецодеждаНаСкладе;
		НоваяСтрока.СчетПередачиНУ 			= СчетаУчетаСпецодежды.СпецоснасткаИСпецодеждаНаСкладеНУ;
		НоваяСтрока.Характеристика	 		= ВыборкаПоТоварам.Характеристика;
	КонецЦикла;


КонецПроцедуры

Функция ПодготовитьПараметрыПроведения(ДокументСсылка, Отказ) Экспорт
	
	ДополнительныеПараметрыЗапросов = Новый Структура();
	ДополнительныеПараметрыЗапросов.Вставить("СодержаниеСписаныТМЗ", 			НСтр("ru='Списаны ТМЗ'"));
	ДополнительныеПараметрыЗапросов.Вставить("Организация", 				ДокументСсылка.Организация);
	ДополнительныеПараметрыЗапросов.Вставить("ВидУчетаНУ", 					ДокументСсылка.ВидУчетаНУ);
	ДополнительныеПараметрыЗапросов.Вставить("Склад", 						ДокументСсылка.Склад);
	ДополнительныеПараметрыЗапросов.Вставить("Ссылка", 						ДокументСсылка);
	ДополнительныеПараметрыЗапросов.Вставить("СтруктурноеПодразделение", 	ДокументСсылка.СтруктурноеПодразделение);
	ДополнительныеПараметрыЗапросов.Вставить("МоментВремени", 				Новый МоментВремени(ДокументСсылка.Дата,ДокументСсылка));
	ДополнительныеПараметрыЗапросов.Вставить("ПодразделениеОстатков", 		ДокументСсылка.ПодразделениеОрганизации);
	
	
	ДополнительныеЗапросы = Новый Массив;
	ДополнительныеЗапросы.Добавить("ОстаткиМатериалов");
	ДополнительныеЗапросы.Добавить("СписаниеТоваров");
		
	ПараметрыПроведения = си_УчетСпецодеждыУправлениеПроведениемДокументовСервер.ПодготовитьПараметрыПроведения(ДокументСсылка,Отказ,Истина,Истина,,,,,ДополнительныеПараметрыЗапросов,ДополнительныеЗапросы);
	
	Возврат ПараметрыПроведения;

КонецФункции 

Функция ТекстЗапросаОстаткиМатериалов(НомераТаблиц,ПараметрыПроведения, Реквизиты) Экспорт
	
	НомераТаблиц.Вставить("ОстаткиМатериалов", НомераТаблиц.Количество());
	
	
	ТекстЗапроса = си_УчетСпецодеждыСерверПовтИсп.ТекстЗапросаОстаткиМатериаловВЭксплуатации();
	
	Возврат ТекстЗапроса + общ_ПереопределениеПроцедурБККлиентСервер.ТекстРазделителяЗапросовПакета();
		
КонецФункции

Функция ТекстЗапросаСписаниеТоваров(НомераТаблиц,ПараметрыПроведения, Реквизиты) Экспорт
	
	НомераТаблиц.Вставить("СписаниеТоваровРеквизиты", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Дата КАК Период,
	|	""Списание"" КАК ТипСписания,
	|	Реквизиты.Ссылка КАК ДокументРеализации,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	|	Реквизиты.СтруктурноеПодразделение КАК КорСтруктурноеПодразделение,
	|	Реквизиты.УчитыватьКПН КАК УчитыватьКПН,
	|	Реквизиты.ВидУчетаНУ КАК ВидУчетаНУ,
	|	НЕОПРЕДЕЛЕНО КАК Контрагент,
	|	НЕОПРЕДЕЛЕНО КАК ВалютаВзаиморасчетов,
	|	&СодержаниеСписаныТМЗ КАК Содержание,
	|	Реквизиты.ВалютаРегламентированногоУчета КАК ВалютаРегламентированногоУчета,
	|	&НеобходимостьОтраженияВНУ КАК НеобходимостьОтраженияВНУ,
	|	&ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль КАК ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль
	|ИЗ
	|	Реквизиты КАК Реквизиты";
	
	Возврат ТекстЗапроса + общ_ПереопределениеПроцедурБККлиентСервер.ТекстРазделителяЗапросовПакета();
		
КонецФункции

Функция ПечатьВозвратМатериалов(МассивОбъектов, ОбъектыПечати) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.си_ВозвратМатериаловИзЭксплуатации.ПФ_MXL_ВозвратМатериалов");
	УчетПоХарактеристикам = Константы.си_УчетСпецодеждыПоХарактеристикам.Получить();
	УчетПоФизЛицам = си_УчетСпецодеждыСервер.ПолучитьВедениеУчетаПоФизЛицам();
	ТабДок = Новый ТабличныйДокумент;
	ТабДок.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_си_ВозвратМатериаловИзЭксплуатации_ПечатьВозвратМатериалов";
	
	Для Каждого ДокументСсылка Из МассивОбъектов Цикл
		
		Если ТабДок.ВысотаТаблицы > 0 Тогда
			ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабДок.ВысотаТаблицы + 1;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТекущийДокумент", ДокументСсылка);
		Запрос.УстановитьПараметр("Период", ДокументСсылка.Дата);
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	ВозвратМатериаловИзЭксплуатации.Ссылка,
		               |	ВозвратМатериаловИзЭксплуатации.Номер,
		               |	ВозвратМатериаловИзЭксплуатации.Дата,
		               |	ВозвратМатериаловИзЭксплуатации.Организация,
		               |	ВозвратМатериаловИзЭксплуатации.Организация.Представление КАК ПечОрганизация,
		               |	ВозвратМатериаловИзЭксплуатации.Склад КАК Склад,
		               |	ВозвратМатериаловИзЭксплуатации.Склад.Представление КАК ПечСклад,
		               |	ВозвратМатериаловИзЭксплуатации.ПодразделениеОрганизации КАК Подразделение,
		               |	ВозвратМатериаловИзЭксплуатации.ПодразделениеОрганизации.Представление КАК ПечПодразделение,
		               |	ОтветственныеЛицаСрезПоследних.ФизическоеЛицо КАК ОтветственноеЛицо
		               |ИЗ
		               |	Документ.си_ВозвратМатериаловИзЭксплуатации КАК ВозвратМатериаловИзЭксплуатации
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛица.СрезПоследних(&Период, ) КАК ОтветственныеЛицаСрезПоследних
		               |		ПО ВозвратМатериаловИзЭксплуатации.Склад = ОтветственныеЛицаСрезПоследних.СтруктурнаяЕдиница
		               |ГДЕ
		               |	ВозвратМатериаловИзЭксплуатации.Ссылка = &ТекущийДокумент";

		Шапка = Запрос.Выполнить().Выбрать();
		Шапка.Следующий();

		ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	ВозвратМатериаловИзЭксплуатации.Номенклатура КАК Товар,
		               |	ВЫРАЗИТЬ(ВозвратМатериаловИзЭксплуатации.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК ТоварНаименование,
		               |	ВозвратМатериаловИзЭксплуатации.Характеристика КАК Характеристика,
		               |	ПРЕДСТАВЛЕНИЕ(ВозвратМатериаловИзЭксплуатации.Характеристика) КАК ПечХарактеристика,
		               |	ВозвратМатериаловИзЭксплуатации.Номенклатура.Код КАК Код,
		               |	ВозвратМатериаловИзЭксплуатации.Номенклатура.Артикул КАК Артикул,
		               |	ВозвратМатериаловИзЭксплуатации.ЕдиницаИзмерения.Представление КАК ПечЕдИзм,
		               |	ВозвратМатериаловИзЭксплуатации.ДокументПередачи,
		               |	ВозвратМатериаловИзЭксплуатации.НазначениеИспользования,
		               |	ВозвратМатериаловИзЭксплуатации.Сотрудник КАК Сотрудник,
		               |	ВозвратМатериаловИзЭксплуатации.Сотрудник.Представление КАК ПечФИО,
		               |	СУММА(ВозвратМатериаловИзЭксплуатации.Количество) КАК Количество,
		               |	ВозвратМатериаловИзЭксплуатации.Сотрудник.Код КАК КодСотрудника
		               |ИЗ
		               |	Документ.си_ВозвратМатериаловИзЭксплуатации.Материалы КАК ВозвратМатериаловИзЭксплуатации
		               |ГДЕ
		               |	ВозвратМатериаловИзЭксплуатации.Ссылка = &ТекущийДокумент
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	ВозвратМатериаловИзЭксплуатации.Номенклатура,
		               |	ВозвратМатериаловИзЭксплуатации.Характеристика,
		               |	ВозвратМатериаловИзЭксплуатации.ЕдиницаИзмерения,
		               |	ВозвратМатериаловИзЭксплуатации.ДокументПередачи,
		               |	ВозвратМатериаловИзЭксплуатации.НазначениеИспользования,
		               |	ВозвратМатериаловИзЭксплуатации.Сотрудник,
		               |	ВозвратМатериаловИзЭксплуатации.Номенклатура.Код,
		               |	ВозвратМатериаловИзЭксплуатации.Номенклатура.Артикул,
		               |	ВозвратМатериаловИзЭксплуатации.ЕдиницаИзмерения.Представление,
		               |	ВозвратМатериаловИзЭксплуатации.Сотрудник.Представление,
		               |	ВЫРАЗИТЬ(ВозвратМатериаловИзЭксплуатации.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)),
		               |	ВозвратМатериаловИзЭксплуатации.Сотрудник.Код";
				
		ЗапросПоТоварам = Новый Запрос;
		ЗапросПоТоварам.Текст = ТекстЗапроса;
		
		ЗапросПоТоварам.УстановитьПараметр("ТекущийДокумент", ДокументСсылка);
		
		РезультатЗапроса = ЗапросПоТоварам.Выполнить();
		
		// Параметры вывода
		ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
		КолАртикул = ?( ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул, "Артикул",
					 ?( ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код,     "Код", ""));
		ФлагВыводКода = НЕ ПустаяСтрока(КолАртикул);
		Суффикс = ?(ФлагВыводКода, "СКодом", "");
		Суффикс = Суффикс + ?(УчетПоХарактеристикам, "", "БезХ");
		
		// Вывод заголовка
		Область = Макет.ПолучитьОбласть("Заголовок");
		НомерДокумента = общ_ПереопределениеПроцедурБККлиентСервер.ПолучитьНомерНаПечать(Шапка.Номер, Шапка.Ссылка);
		Область.Параметры.Заголовок = "Возврат материалов из эксплуатации № "+НомерДокумента +" от " + Шапка.Дата ;
		Область.Параметры.Заполнить(Шапка);
		
		СведенияОбОрганизации = общ_ПереопределяемыеПроцедурыБКВызовСервера.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата);
		Область.Параметры.ПечОрганизация = СведенияОбОрганизации.ПолноеНаименование;
			
		ТабДок.Вывести(Область);
		
		// Вывод шапки табличной части
		Область = Макет.ПолучитьОбласть("ТабШапка"+Суффикс);
		Область.Параметры.Сотрудник = ?(УчетПоФизЛицам,"Физическое лицо","Сотрудник");
		ТабДок.Вывести( Область);
		
		// Вывод табличной части
		Область = Макет.ПолучитьОбласть("ТабСтрока"+Суффикс);
		ТабЧасть = РезультатЗапроса.Выбрать();
		СуммаИтого = 0;
		ПечНомер = 0;
		
		Пока ТабЧасть.Следующий() Цикл
			
			ПечНомер = ПечНомер + 1;
			Область.Параметры.ПечНомер = ПечНомер;
			
			Если ФлагВыводКода Тогда
				Область.Параметры.ПечАртикул = ТабЧасть[КолАртикул];
			КонецЕсли;
			
			Область.Параметры.Заполнить(ТабЧасть);
			Область.Параметры.ПечМатериал = СокрЛП(ТабЧасть.Товар);;
			Область.Параметры.Материал    = ТабЧасть.Товар;
			Если УчетПоХарактеристикам Тогда
				Область.Параметры.ПечХарактеристика = СокрЛП(ТабЧасть.ПечХарактеристика);;
				Область.Параметры.Характеристика    = ТабЧасть.Характеристика;
			КонецЕсли;
			
			Область.Параметры.ПечКол      = ТабЧасть.Количество;
			Область.Параметры.ПечТабНомер = ТабЧасть.КодСотрудника;
					
			ТабДок.Вывести(Область);
			
		КонецЦикла;
		
		// Вывод итогов документа
		
		Область = Макет.ПолучитьОбласть("НизДокумента");
		//////////////
		ДанныеМОЛ = общ_ПереопределяемыеПроцедурыБКВызовСервера.ДанныеФизЛица(Шапка.Организация, Шапка.ОтветственноеЛицо, Шапка.Дата);
		Область.Параметры["Получатель"] = ДанныеМОЛ.Представление;
		ТабДок.Вывести( Область);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДок, НомерСтрокиНачало, ОбъектыПечати, ДокументСсылка);
	КонецЦикла;
	Возврат ТабДок;
КонецФункции

#КонецОбласти

#КонецЕсли
