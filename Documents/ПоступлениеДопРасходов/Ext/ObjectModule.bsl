#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

#Область УправлениеДоступом

// Процедура ЗаполнитьНаборыЗначенийДоступа по свойствам объекта заполняет наборы значений доступа
// в таблице с полями:
//    НомерНабора     - Число                                     (необязательно, если набор один),
//    ВидДоступа      - ПланВидовХарактеристикСсылка.ВидыДоступа, (обязательно),
//    ЗначениеДоступа - Неопределено, СправочникСсылка или др.    (обязательно),
//    Чтение          - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Добавление      - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Изменение       - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Удаление        - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//
//  Вызывается из процедуры УправлениеДоступомСлужебный.ЗаписатьНаборыЗначенийДоступа(),
// если объект зарегистрирован в "ПодпискаНаСобытие.ЗаписатьНаборыЗначенийДоступа" и
// из таких же процедур объектов, у которых наборы значений доступа зависят от наборов этого
// объекта (в этом случае объект зарегистрирован в "ПодпискаНаСобытие.ЗаписатьЗависимыеНаборыЗначенийДоступа").
//
// Параметры:
//  Таблица      - ТабличнаяЧасть,
//                 РегистрСведенийНаборЗаписей.НаборыЗначенийДоступа,
//                 ТаблицаЗначений, возвращаемая УправлениеДоступом.ТаблицаНаборыЗначенийДоступа().
//
Процедура ЗаполнитьНаборыЗначенийДоступа(Таблица) Экспорт
	
	ОбщегоНазначенияБК.ЗаполнитьНаборыПоОрганизацииСтурктурномуПодразделению(ЭтотОбъект, Таблица, "Организация", "СтруктурноеПодразделение");
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	
	Если ДанныеЗаполнения <> Неопределено И ТипДанныхЗаполнения <> Тип("Структура") 
		И Метаданные().ВводитсяНаОсновании.Содержит(ДанныеЗаполнения.Метаданные()) Тогда
		ЗаполнитьПоДокументуОснования(ДанныеЗаполнения);
		Возврат;
	ИначеЕсли ТипДанныхЗаполнения = Тип("Структура") Тогда
		Если ДанныеЗаполнения.Свойство("Автор") Тогда
			ДанныеЗаполнения.Удалить("Автор");
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
	КонецЕсли;
	
	ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	ПользовательУправляетСчетамиУчета = СчетаУчетаВДокументахВызовСервераПовтИсп.ПользовательУправляетСчетамиУчета();
	
	МассивНепроверяемыхРеквизитов = Новый Массив();
	ПараметрыПострочнойПроверки   = Новый Структура("ПроверятьЗаполнениеСчетаУчетаНДС, ПроверятьЗаполнениеСчетаУчетаНУ", 
													НЕ НДСВключенВСтоимость И УчетНДСиАкцизаВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтавкаНДС) <> 0
														И ПользовательУправляетСчетамиУчета, 
													Товары.Количество() > 0);
	
	Если Товары.Количество() > 0 
			ИЛИ ОС.Количество() > 0 
			ИЛИ НМА.Количество() > 0 Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("Товары");
		МассивНепроверяемыхРеквизитов.Добавить("ОС");
		МассивНепроверяемыхРеквизитов.Добавить("НМА");
		
	КонецЕсли;
	
	//Если НЕ ПолучитьФункциональнуюОпцию("ПлательщикКПН",Новый Структура("Организация,Период", Организация, Дата)) 
	Если НЕ УчетнаяПолитикаСервер.ПлательщикНалогаНаПрибыль(Организация, Дата) 
		ИЛИ НЕ УчитыватьКПН Тогда
		
		ПараметрыПострочнойПроверки.Вставить("ПроверятьЗаполнениеСчетаУчетаНУ", Ложь);
		
		МассивНепроверяемыхРеквизитов.Добавить("СчетНУ");
		МассивНепроверяемыхРеквизитов.Добавить("Товары.СчетУчетаНУ");
		МассивНепроверяемыхРеквизитов.Добавить("ОС.СчетУчетаНУ");
		МассивНепроверяемыхРеквизитов.Добавить("НМА.СчетУчетаНУ");
		МассивНепроверяемыхРеквизитов.Добавить("ВидУчетаНУ");
		
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеДопРасходов.ВнутреннийРасход Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Контрагент");
		МассивНепроверяемыхРеквизитов.Добавить("ДоговорКонтрагента");
		МассивНепроверяемыхРеквизитов.Добавить("СчетУчетаРасчетовСКонтрагентом");
		МассивНепроверяемыхРеквизитов.Добавить("КурсВзаиморасчетов");
		МассивНепроверяемыхРеквизитов.Добавить("КратностьВзаиморасчетов");
		МассивНепроверяемыхРеквизитов.Добавить("Номенклатура");
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоступлениеДопРасходов.УслугаСтороннейОрганизации 
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеДопРасходов.ПоступлениеОтНерезидента Тогда
		  МассивНепроверяемыхРеквизитов.Добавить("СчетБУ");
 		  МассивНепроверяемыхРеквизитов.Добавить("СчетНУ");
        Если НЕ ПолучитьФункциональнуюОпцию("ВестиУчетПоДоговорам") Тогда
            МассивНепроверяемыхРеквизитов.Добавить("ДоговорКонтрагента");
        КонецЕсли; 
	КонецЕсли;
	
	Если НЕ ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНДС(Организация, Дата)
		ИЛИ НЕ УчитыватьНДС ИЛИ ОтложитьПринятиеНДСКЗачету 
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеДопРасходов.ПоступлениеОтНерезидента Тогда
		
		ПараметрыПострочнойПроверки.Вставить("ПроверятьЗаполнениеСчетаУчетаНДС", Ложь);
		
		МассивНепроверяемыхРеквизитов.Добавить("СтавкаНДС");
		
		МассивНепроверяемыхРеквизитов.Добавить("Товары.СчетУчетаНДС");
		МассивНепроверяемыхРеквизитов.Добавить("Товары.НДСВидОборота");
		МассивНепроверяемыхРеквизитов.Добавить("Товары.НДСВидПоступления");
		
		МассивНепроверяемыхРеквизитов.Добавить("ОС.СчетУчетаНДС");
		МассивНепроверяемыхРеквизитов.Добавить("ОС.НДСВидОборота");
		МассивНепроверяемыхРеквизитов.Добавить("ОС.НДСВидПоступления");
		
		МассивНепроверяемыхРеквизитов.Добавить("НМА.СчетУчетаНДС");
		МассивНепроверяемыхРеквизитов.Добавить("НМА.НДСВидОборота");
		МассивНепроверяемыхРеквизитов.Добавить("НМА.НДСВидПоступления");
		
	КонецЕсли;
	
	Если НЕ УправлениеВнеоборотнымиАктивамиСервер.ВедетсяАналитическийУчетОСПоПодразделениям(Дата) Тогда 
		МассивНепроверяемыхРеквизитов.Добавить("ОС.ПодразделениеОрганизации");
	КонецЕсли;
	
	Если НЕ УправлениеВнеоборотнымиАктивамиСервер.ВедетсяАналитическийУчетОСПоМОЛ(Дата) Тогда 
		МассивНепроверяемыхРеквизитов.Добавить("ОС.МОЛОрганизации");
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
	НеобходимаПострочнаяПроверка = Ложь;
	Для Каждого КлючЗначение Из ПараметрыПострочнойПроверки Цикл
		Если КлючЗначение.Значение Тогда 
			НеобходимаПострочнаяПроверка = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если НеобходимаПострочнаяПроверка Тогда 
		ПроверитьЗаполнениеТабличнойЧастиПострочно(Товары, "Товары", Отказ, ПараметрыПострочнойПроверки);
	КонецЕсли;
	
	ПроверитьСоответствиеСуммРаспределения(ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНДС(Организация, Дата)
		И УчитыватьНДС, Отказ);
	
	СчетаУчетаВДокументах.ПроверитьЗаполнение(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты, Новый Соответствие);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
    
	РаботаСДоговорамиКонтрагентов.ЗаполнитьДоговорПередЗаписью(ЭтотОбъект);
    
    СуммаДокумента = УчетНДСИАкциза.ПолучитьСуммуДокументаСНДС(ЭтотОбъект) + Сумма + ?(УчитыватьНДС И НЕ СуммаВключаетНДС,СуммаНДС,0);	
	
	УчетНДСИАкциза.ОчиститьДанныеПоУчастникамСовместнойДеятельности(ЭтотОбъект, ДоговорКонтрагента);
	
	СчетаУчетаВДокументах.ЗаполнитьПередЗаписью(ЭтотОбъект, РежимЗаписи);
	
	// Счет-фактура Начало
	УчетНДСИАкциза.СинхронизацияПометкиНаУдалениеУСчетаФактуры(ЭтотОбъект, "СчетФактураПолученный", Отказ);
	// Счет-фактура Конец
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// Счет-фактура Начало
	//синхронизируем данные счет-фактуры и документа основания
	УчетНДСИАкциза.СинхронизироватьДанныеДокументаИСчетаФактуры(ЭтотОбъект, Отказ, "СчетФактураПолученный"); 		
	Если Отказ Тогда
		ТекстСообщения = НСтр("ru = 'Документ не записан ...'");
		ОбщегоНазначенияБК.ОшибкаПриПроведении(ТекстСообщения, Отказ);
	КонецЕсли;
	// Счет-фактура Конец
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета(),,, ОбъектКопирования.Ссылка);
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА
	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
	Если РучнаяКорректировка Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПроведения = Документы.ПоступлениеДопРасходов.ПодготовитьПараметрыПроведения(Ссылка, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ИНФОРМАЦИОННОЙ БАЗЫ (АНАЛИЗ ОСТАТКОВ И Т.П.)

	// Таблица взаиморасчетов
	ТаблицаВзаиморасчеты = УправлениеВзаиморасчетамиСервер.ПодготовитьТаблицуВзаиморасчетовЗачетАвансов(
		ПараметрыПроведения.ЗачетАвансовТаблицаДокумента, ПараметрыПроведения.ЗачетАвансовРеквизиты, Отказ);

	// Таблицы документа с корректировкой сумм по курсу авансов
	СтруктураТаблицДокумента = УчетДоходовРасходов.ПодготовитьТаблицыПоступленияПоКурсуАвансов(ПараметрыПроведения.СтруктураТаблицДокумента,
		ТаблицаВзаиморасчеты, ПараметрыПроведения.ЗачетАвансовРеквизиты);
		
	ОбщегоНазначенияБКВызовСервера.ДобавитьКолонкуВТаблицуЗначений(ТаблицаВзаиморасчеты, "НомерЖурнала", НСтр("ru = 'АВ'", ОбщегоНазначения.КодОсновногоЯзыка()));
	
	// ФОРМИРОВАНИЕ ДВИЖЕНИЙ
	
	// Зачет аванса
	УправлениеВзаиморасчетамиСервер.СформироватьДвиженияЗачетАвансов(ТаблицаВзаиморасчеты,
		ПараметрыПроведения.ЗачетАвансовРеквизиты, Движения, Отказ);
	
	// Изменение себестоимости товаров
	УчетТоваров.СформироватьДвиженияПоступлениеДопРасходов(СтруктураТаблицДокумента.ТаблицаТовары,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
		
	// Изменение стоимости ОС
	УчетОС.СформироватьДвиженияПоступлениеДопРасходов(СтруктураТаблицДокумента.ТаблицаОС,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
	
	// Изменение стоимости НМА
	УчетНМА.СформироватьДвиженияПоступлениеДопРасходов(СтруктураТаблицДокумента.ТаблицаНМА,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
	
	// Учет НДС
	УчетНДСИАкциза.СформироватьДвиженияПоступлениеТоваров(ПараметрыПроведения.ТаблицаНДС, ПараметрыПроведения.ТаблицаУчастникиСовместнойДеятельности,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);

	// Переоценка валютных остатков - после формирования проводок всеми другими механизмами
	ТаблицаПереоценкаДвиженийДокумента = УчетДоходовРасходов.ПодготовитьТаблицуПереоценкаВалютныхОстатковПоПроводкамДокумента(
		ПараметрыПроведения.ЗачетАвансовРеквизиты, Движения, Отказ);

	УчетДоходовРасходов.СформироватьДвиженияПереоценкаВалютныхОстатков(ТаблицаПереоценкаДвиженийДокумента,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
		
	// Отражение ПР в НУ 
	ПроцедурыНалоговогоУчета.ОтразитьПостоянныеРазницыВНУ(ПараметрыПроведения.Реквизиты, Движения, Отказ);
		
	// Синхронизация счетов-фактур
	УчетНДСИАкциза.СинхронизацияПризнакаПроведенияУСчетаФактуры(Ссылка, Отказ, Истина, "СчетФактураПолученный");
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Синхронизация счетов-фактур
	УчетНДСИАкциза.СинхронизацияПризнакаПроведенияУСчетаФактуры(Ссылка, Отказ, Ложь, "СчетФактураПолученный");

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Процедура выполняет заполнение документа по документу-основанию
//
Процедура ЗаполнитьПоДокументуОснования(Основание) Экспорт
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
		
		Документы.ПоступлениеДопРасходов.ЗаполнитьТоварыПоСчетФактураПолученный(ЭтотОбъект, Основание);
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеНМА") Тогда
		
		Документы.ПоступлениеДопРасходов.ЗаполнитьПоПоступлениюНМА(ЭтотОбъект, Основание);
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		
		Документы.ПоступлениеДопРасходов.ЗаполнитьПоПоступлениюТоваров(ЭтотОбъект, Основание);
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеДопРасходов") Тогда
		
		Документы.ПоступлениеДопРасходов.ЗаполнитьПоПоступлениюДопРасходов(ЭтотОбъект, Основание);
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
		
		Документы.ПоступлениеДопРасходов.ЗаполнитьТоварыПоАвансовомуОтчету(ЭтотОбъект, Основание);
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьПоДокументуОснования()

Процедура ПроверитьЗаполнениеТабличнойЧастиПострочно(ПроверяемаяТабличнаячасть, ИмяТабличнойЧасти, Отказ, ПараметрыПроверки = Неопределено)
	
	Для Каждого СтрокаТабличнойЧасти Из ПроверяемаяТабличнаячасть Цикл
		
		Если ПараметрыПроверки <> Неопределено
			И ПараметрыПроверки.Свойство("ПроверятьЗаполнениеСчетаУчетаНДС") И ПараметрыПроверки.ПроверятьЗаполнениеСчетаУчетаНДС
			И НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СчетУчетаНДС) Тогда
			ТекстСообщения = ОбщегоНазначенияБККлиентСервер.ПолучитьТекстСообщения("Колонка",, НСтр("ru = 'Счет НДС'"),
				СтрокаТабличнойЧасти.НомерСтроки, ?(ИмяТабличнойЧасти = "Товары", НСтр("ru='ТМЗ'"), ИмяТабличнойЧасти));
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТабличнойЧасти, СтрокаТабличнойЧасти.НомерСтроки, "СчетУчетаНДС");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
		КонецЕсли;
		
		Если ПараметрыПроверки <> Неопределено
			И ПараметрыПроверки.Свойство("ПроверятьЗаполнениеСчетаУчетаНУ") И ПараметрыПроверки.ПроверятьЗаполнениеСчетаУчетаНУ
			И ЗначениеЗаполнено(СтрокаТабличнойЧасти.СчетУчетаБУ) И НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СчетУчетаНУ) 
			И НЕ ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТабличнойЧасти.СчетУчетаБУ).Забалансовый Тогда
			
			ТекстСообщения = ОбщегоНазначенияБККлиентСервер.ПолучитьТекстСообщения("Колонка",, НСтр("ru = 'Счет учета (НУ)'"),
				СтрокаТабличнойЧасти.НомерСтроки, ?(ИмяТабличнойЧасти = "Товары", НСтр("ru='ТМЗ'"), ИмяТабличнойЧасти));
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТабличнойЧасти, СтрокаТабличнойЧасти.НомерСтроки, "СчетУчетаНУ");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
		КонецЕсли;

	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьСоответствиеСуммРаспределения(ПроверятьСуммыНДС, Отказ)

	// суммы, которые ввел пользователь - в целом по документу и по отдельным позициям
	СуммаКРаспределению = Сумма
							+ Товары.Итог("Сумма") 
							+ ОС.Итог("Сумма")
							+ НМА.Итог("Сумма");
							
	Если ПроверятьСуммыНДС Тогда 
		СуммаНДСКРаспределению = СуммаНДС
								+ Товары.Итог("СуммаНДС") 
								+ ОС.Итог("СуммаНДС")
								+ НМА.Итог("СуммаНДС");
	КонецЕсли;
	
	// суммы, которые хранятся в реквизитах СуммаРаспределения и СуммаРаспределенияНДС							
	РаспределеннаяСумма = Товары.Итог("СуммаРаспределения")
							+ ОС.Итог("СуммаРаспределения")
							+ НМА.Итог("СуммаРаспределения");
							
	Если ПроверятьСуммыНДС Тогда 							
		РаспределеннаяСуммаНДС = Товары.Итог("СуммаРаспределенияНДС")
									+ ОС.Итог("СуммаРаспределенияНДС")
									+ НМА.Итог("СуммаРаспределенияНДС");
	КонецЕсли;
	
	Если СуммаКРаспределению <> РаспределеннаяСумма Тогда
		ТекстСообщения = НСтр("ru = 'Не совпадает общая сумма расходов к распределению по документу с итогом распределения'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Ссылка, , , Отказ);
	КонецЕсли;
	
	Если ПроверятьСуммыНДС И СуммаНДСКРаспределению <> РаспределеннаяСуммаНДС Тогда
		ТекстСообщения = НСтр("ru = 'Не совпадает общая сумма НДС к распределению по документу с итогом распределения'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Ссылка, , , Отказ);
	КонецЕсли;

КонецПроцедуры

#КонецЕсли