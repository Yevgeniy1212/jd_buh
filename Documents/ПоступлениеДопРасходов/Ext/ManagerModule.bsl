#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

#Область СчетаУчета

Процедура УстановитьПравилаЗаполненияСчетовУчета(Правила) Экспорт
	
	// Шапка
	
	// расчеты с поставщиком
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "", "СчетУчетаРасчетовСКонтрагентом", "РасчетыСПоставщиком");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ТребуетсяУчетРасчетов");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "ВнутреннийРасход");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "", "СчетУчетаРасчетовПоАвансам", "АвансыПоставщику");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ТребуетсяУчетАвансов");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "ВнутреннийРасход");
	
	// внутренний расход
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "", "СчетБУ", "Затраты");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ВнутреннийРасход");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоБУ1", "СубконтоЗатрат1");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоБУ2", "СубконтоЗатрат2");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоБУ3", "СубконтоЗатрат3");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "", "СчетНУ", "ЗатратыНУ");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ВнутреннийРасход");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеПроверкиЗаполнения(Правила, "ПлательщикНалогаНаПрибыль");
	
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоНУ1", "СубконтоЗатрат1");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Основание", "СубконтоБУ1");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоНУ2", "СубконтоЗатрат2");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Основание", "СубконтоБУ2");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоНУ3", "СубконтоЗатрат3");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Основание", "СубконтоБУ3");
	
	// Табличная часть Товары
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Товары", "СчетУчетаБУ", "Запасы");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Товары", "СчетУчетаНУ", "ЗапасыНУ");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Товары", "СчетУчетаНДС", "ПредъявленныйНДС_Запасы");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "ВнутреннийРасход");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "НДСВключенВСтоимость");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "ОтложенныйНДС");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Товары", "НДСВидОборота", "ВидОборотаНДСПредъявленного");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "СтавкаНДС", "СтавкаНДС");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "ВнутреннийРасход");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Товары", "НДСВидПоступления", "ВидПоступленияНДСПредъявленного");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "СтавкаНДС", "СтавкаНДС");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "ВнутреннийРасход");
	
	// Табличная часть ОсновныеСредства
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "ОС", "СчетУчетаБУ", "ОсновныеСредства");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "ОсновноеСредство", "ОсновноеСредство");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "ОС", "СчетУчетаНУ", "ОсновныеСредстваНУ");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "ОсновноеСредство", "ОсновноеСредство");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "ОС", "СчетУчетаНДС", "ПредъявленныйНДС_ОсновныеСредства");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "ОсновноеСредство", "ОсновноеСредство");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "СтавкаНДС", "СтавкаНДС");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "НДСВключенВСтоимость");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "ВнутреннийРасход");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "ОтложенныйНДС");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "ОС", "НДСВидОборота", "ВидОборотаНДСПредъявленного");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "ОсновноеСредство", "ОсновноеСредство");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "СтавкаНДС", "СтавкаНДС");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "ВнутреннийРасход");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "ОС", "НДСВидПоступления", "ВидПоступленияНДСПредъявленного_ОсновныеСредства");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "ОсновноеСредство", "ОсновноеСредство");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "СтавкаНДС", "СтавкаНДС");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "ВнутреннийРасход");
	
	// Табличная часть НематериальныеАктивы
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "НМА", "СчетУчетаБУ", "НематериальныеАктивы");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "НематериальныйАктив", "НематериальныйАктив");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "НМА", "СчетУчетаНУ", "НематериальныеАктивыНУ");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "НематериальныйАктив", "НематериальныйАктив");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "НМА", "СчетУчетаНДС", "ПредъявленныйНДС_НематериальныеАктивы");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "НематериальныйАктив", "НематериальныйАктив");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "СтавкаНДС", "СтавкаНДС");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "НДСВключенВСтоимость");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "ВнутреннийРасход");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "ОтложенныйНДС");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "НМА", "НДСВидОборота", "ВидОборотаНДСПредъявленного");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "НематериальныйАктив", "НематериальныйАктив");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "СтавкаНДС", "СтавкаНДС");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "ВнутреннийРасход");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "НМА", "НДСВидПоступления", "ВидПоступленияНДСПредъявленного_НематериальныеАктивы");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "НематериальныйАктив", "НематериальныйАктив");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "СтавкаНДС", "СтавкаНДС");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "ВнутреннийРасход");
	
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "Дата");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "Организация");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "СтруктурноеПодразделение");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "Контрагент");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "ДоговорКонтрагента");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "НДСВключенВСтоимость");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "УчитыватьНДС");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "УчитыватьКПН");
	
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеДополнительныхДанных(Правила, "ОтложенныйНДС", "ОтложитьПринятиеНДСКЗачету");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеДополнительныхДанных(Правила, "ВнутреннийРасход", "ВидОперации");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеДополнительныхДанных(Правила, "ТребуетсяУчетРасчетов",  "ВидОперации, ДоговорКонтрагента");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеДополнительныхДанных(Правила, "ТребуетсяУчетАвансов",   "ВидОперации, ДоговорКонтрагента");
	
КонецПроцедуры

Процедура ДополнитьДанныеЗаполненияСчетовУчета(ДанныеЗаполнения) Экспорт
	
	Если ДанныеЗаполнения.Свойство("ВнутреннийРасход") Тогда
		
		ДанныеЗаполнения.ВнутреннийРасход = (ДанныеЗаполнения.ВидОперации = Перечисления.ВидыОперацийПоступлениеДопРасходов.ВнутреннийРасход);
		
	КонецЕсли;
	
	Если ДанныеЗаполнения.Свойство("ТребуетсяУчетРасчетов") Или ДанныеЗаполнения.Свойство("ТребуетсяУчетАвансов") Тогда
		
		ОсобенностиДокумента = ОсобенностиУчетаРасчетов(ДанныеЗаполнения.ВидОперации, ДанныеЗаполнения.ДоговорКонтрагента);
		
		ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, ОсобенностиДокумента);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ОсобенностиУчетаРасчетов(ВидОперации, ДоговорКонтрагента) Экспорт
	
	ОсобенностиДокумента = УправлениеВзаиморасчетамиСервер.НовыйОсобенностиУчетаРасчетовДокумента();
	
	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеДопРасходов.ВнутреннийРасход Тогда
		ОсобенностиДокумента.ТребуетсяУчетРасчетов = Ложь;
		ОсобенностиДокумента.ТребуетсяУчетСроковОплаты = Ложь;
	КонецЕсли;
	
	Если Не ОсобенностиДокумента.ТребуетсяУчетРасчетов Тогда
		ОсобенностиДокумента.ТребуетсяУчетАвансов = Ложь;
		ОсобенностиДокумента.ТребуетсяУчетСроковОплаты = Ложь;
	КонецЕсли;
	
	Возврат ОсобенностиДокумента;
	
КонецФункции

#Область УстаревшиеПроцедурыИФункции

// Заполняет счета учета номенклатуры в табличной части документа
//
Процедура ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, ИмяТабличнойЧасти) Экспорт

	ТабличнаяЧасть = Объект[ИмяТабличнойЧасти];
	
	ДанныеОбъекта = Новый Структура("Дата, Организация, ВидОперации, УчитыватьКПН, УчитыватьНДС");
	
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	Если ИмяТабличнойЧасти = "Товары"  Тогда
		СоответствиеСчетовУчета = ПроцедурыБухгалтерскогоУчета.ПолучитьСчетаУчетаСпискаНоменклатуры(
			ДанныеОбъекта.Организация, ОбщегоНазначения.ВыгрузитьКолонку(ТабличнаяЧасть, "Номенклатура", Истина), ДанныеОбъекта.Дата);
		
		Для Каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
			СчетаУчета = СоответствиеСчетовУчета.Получить(СтрокаТабличнойЧасти.Номенклатура);
			ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, СтрокаТабличнойЧасти, ИмяТабличнойЧасти, СчетаУчета);
		КонецЦикла;
		
	ИначеЕсли ИмяТабличнойЧасти = "ОС" Тогда
		СоответствиеСчетовУчета = УправлениеВнеоборотнымиАктивамиСервер.ПолучитьСчетаУчетаСпискаОС(
			ДанныеОбъекта.Организация, ОбщегоНазначения.ВыгрузитьКолонку(ТабличнаяЧасть, "ОсновноеСредство", Истина), ДанныеОбъекта.Дата);
		
		Для Каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
			СчетаУчета = СоответствиеСчетовУчета.Получить(СтрокаТабличнойЧасти.ОсновноеСредство);
			ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, СтрокаТабличнойЧасти, ИмяТабличнойЧасти, СчетаУчета);
		КонецЦикла;
		
	Иначе
		
		Для Каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
			СчетаУчета = Новый Структура("СчетУчетаБУ, СчетУчетаНДСПоПриобретению", ПланыСчетов.Типовой.ПустаяСсылка(), ПланыСчетов.Типовой.НалогНаДобавленнуюСтоимостьКВозмещению);
			ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, СтрокаТабличнойЧасти, ИмяТабличнойЧасти, СчетаУчета);
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

// Заполняет счета учета номенклатуры в строке табличной части документа
//
// Параметры:
//  ДанныеОбъекта         - структура данных объекта, используемых при заполнении счетов учета (вид операции,
//                          вид договора контрагента, признак комиссионной торговли и т.п.)
//  СтрокаТабличнойЧасти  - строка табличной части документа
//  ИмяТабличнойЧасти     - имя табличной части документа
//  СведенияОНоменклатуре - структура сведений о номенклатуре, либо стуктура счетов учета
//
Процедура ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, СтрокаТабличнойЧасти, ИмяТабличнойЧасти, СведенияОНоменклатуре, ВключаяЗаполненные = Истина) Экспорт

	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СведенияОНоменклатуре.Свойство("СчетаУчета") Тогда
		// СведенияОНоменклатуре - структура сведений номенклатуры
		СчетаУчета = СведенияОНоменклатуре.СчетаУчета;
	ИначеЕсли СведенияОНоменклатуре.Свойство("СчетУчетаБУ") Тогда
		// СведенияОНоменклатуре - структура счетов учета номенклатуры
		СчетаУчета = СведенияОНоменклатуре;
	Иначе
		Возврат;
	КонецЕсли;
	
	Если ИмяТабличнойЧасти = "ОС" ТОгда
		СчетаУчета = УправлениеВнеоборотнымиАктивамиСервер.ПолучитьСчетаУчетаОС(ДанныеОбъекта.Организация, СтрокаТабличнойЧасти.ОсновноеСредство, ДанныеОбъекта.Дата);
		
		Если СчетаУчета.СчетУчетаБУ = ПланыСчетов.Типовой.ПустаяСсылка() Тогда
			СчетаУчета.СчетУчетаБУ  = ПланыСчетов.Типовой.ОсновныеСредства;
		КонецЕсли;	
		
		Если СчетаУчета.СчетУчетаНУ = ПланыСчетов.Налоговый.ПустаяСсылка() Тогда 
			СчетУчетаНУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ, ", СчетаУчета.СчетУчетаБУ), , , ДанныеОбъекта.Дата);
			Если ЗначениеЗаполнено(СчетУчетаНУ) Тогда
				СчетаУчета.СчетУчетаНУ = СчетУчетаНУ;
			Иначе	
				СчетаУчета.СчетУчетаНУ = ПланыСчетов.Налоговый.ВАВключенныеВСтоимостнойБаланс;
			КонецЕсли;
		КонецЕсли;
		
		Если СчетаУчета.СчетУчетаНДСПоПриобретению = ПланыСчетов.Типовой.ПустаяСсылка() Тогда
			СчетаУчета.СчетУчетаНДСПоПриобретению  = ПланыСчетов.Типовой.НалогНаДобавленнуюСтоимостьКВозмещению;
		КонецЕсли;	
	ИначеЕсли ИмяТабличнойЧасти = "НМА" Тогда	
		СчетаУчета = УправлениеВнеоборотнымиАктивамиСервер.ПолучитьСчетаУчетаНМА(ДанныеОбъекта.Организация, СтрокаТабличнойЧасти.НематериальныйАктив, ДанныеОбъекта.Дата);
		
		Если СчетаУчета.СчетУчетаБУ = ПланыСчетов.Типовой.ПустаяСсылка() Тогда
			СчетаУчета.СчетУчетаБУ  = ПланыСчетов.Типовой.ПрочиеНематериальныеАктивы;
		КонецЕсли;	
		
		СчетаУчета.Вставить("СчетУчетаНДСПоПриобретению",ПланыСчетов.Типовой.НалогНаДобавленнуюСтоимостьКВозмещению);
		
	Иначе
		СчетаУчета = ПроцедурыБухгалтерскогоУчета.ПолучитьСчетаУчетаНоменклатуры(ДанныеОбъекта.Организация, СтрокаТабличнойЧасти.Номенклатура);
	КонецЕсли;
	
	Если ВключаяЗаполненные ИЛИ НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СчетУчетаБУ) Тогда
		СтрокаТабличнойЧасти.СчетУчетаБУ  = СчетаУчета.СчетУчетаБУ;
	КонецЕсли;
	
	Если ВключаяЗаполненные ИЛИ НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СчетУчетаНДС) Тогда		
		СтрокаТабличнойЧасти.СчетУчетаНДС = СчетаУчета.СчетУчетаНДСПоПриобретению;
	КонецЕсли;

	Если ИмяТабличнойЧасти = "НМА" Тогда
		//для НМА по умолчанию ставим счет учета НУ в лоб, так как в регистре "Счета учета НМА" он не хранится.
		СчетУчетаНУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ, ", СчетаУчета.СчетУчетаБУ), , , ДанныеОбъекта.Дата);
		Если ЗначениеЗаполнено(СчетУчетаНУ) Тогда
			СтрокаТабличнойЧасти.СчетУчетаНУ = СчетУчетаНУ;
		Иначе	
			СтрокаТабличнойЧасти.СчетУчетаНУ = ПланыСчетов.Налоговый.ВАВключенныеВСтоимостнойБаланс;
		КонецЕсли;	
	Иначе	
		Если ВключаяЗаполненные ИЛИ НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СчетУчетаНУ) Тогда					
			СтрокаТабличнойЧасти.СчетУчетаНУ = СчетаУчета.СчетУчетаНУ;
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

// Производит заполнение и установку реквизитов налогового учета и НДС в табличной части
//
Процедура ЗаполнитьРеквизитыНалоговогоУчета(ДанныеОбъекта, СтрокаТабличнойЧасти, ИмяТабличнойЧасти) Экспорт
	
	МетаданныеДокумента = ДанныеОбъекта.Ссылка.Метаданные();
	ОбработкаТабличныхЧастей.ЗаполнитьНДСВидОборотаТабЧасти(СтрокаТабличнойЧасти, ДанныеОбъекта, ИмяТабличнойЧасти, МетаданныеДокумента);
	ОбработкаТабличныхЧастей.ЗаполнитьНДСВидПоступленияТабЧасти(СтрокаТабличнойЧасти, ИмяТабличнойЧасти, МетаданныеДокумента, Пользователи.ТекущийПользователь());		

КонецПроцедуры

Процедура ЗаполнитьСчетаУчетаРасчетов(Объект) Экспорт

	СчетаУчета = УправлениеВзаиморасчетамиСервер.ПолучитьСчетаРасчетовСКонтрагентом(Объект.Организация, Объект.Контрагент, Объект.ДоговорКонтрагента);
	
	Объект.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетов;
	Объект.СчетУчетаРасчетовПоАвансам     = СчетаУчета.СчетАвансов;

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов

// См. ЗапретРедактированияРеквизитовОбъектовПереопределяемый.ПриОпределенииОбъектовСЗаблокированнымиРеквизитами.
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт
	
	БлокируемыеРеквизиты = Новый Массив;
	
	Если ОбщегоНазначенияБККлиентСервер.ЭтоПростаяВерсияКонфигурации() Тогда
		БлокируемыеРеквизиты.Добавить("ВалютаДокумента");
		БлокируемыеРеквизиты.Добавить("ВидОперации");
		БлокируемыеРеквизиты.Добавить("ДокументОснование; ДокументОснование"); //сделано специально для формы Дполнительно
		БлокируемыеРеквизиты.Добавить("Контрагент");
		БлокируемыеРеквизиты.Добавить("ДоговорКонтрагента");
		БлокируемыеРеквизиты.Добавить("КурсВзаиморасчетов");
		БлокируемыеРеквизиты.Добавить("КратностьВзаиморасчетов");
		БлокируемыеРеквизиты.Добавить("Организация; СтруктурноеПодразделениеОрганизация");
		БлокируемыеРеквизиты.Добавить("СтавкаНДС");
		БлокируемыеРеквизиты.Добавить("Сумма");
		БлокируемыеРеквизиты.Добавить("СуммаНДС");
		БлокируемыеРеквизиты.Добавить("СтруктурноеПодразделение");
		БлокируемыеРеквизиты.Добавить("Номенклатура");
		БлокируемыеРеквизиты.Добавить("СпособРаспределения; ФормаРаспределить");
		
		// таб. часть Товары
		БлокируемыеРеквизиты.Добавить("Товары; ТоварыИзменитьТовары, ТоварыЗаполнить, ТоварыПодборТМЗ,
		|ТоварыСкопироватьСтроки, ТоварыВставитьСтроки, ТоварыКонтекстноеМенюСкопироватьСтроки, ТоварыКонтекстноеМенюВставитьСтроки");
		БлокируемыеРеквизиты.Добавить("Товары.Номенклатура; ТоварыНоменклатура");
		БлокируемыеРеквизиты.Добавить("Товары.Количество; ТоварыКоличество");
		БлокируемыеРеквизиты.Добавить("Товары.Сумма; ТоварыСумма");
		БлокируемыеРеквизиты.Добавить("Товары.СуммаТовара; ТоварыСуммаТовара");
		БлокируемыеРеквизиты.Добавить("Товары.СуммаНДС; ТоварыСуммаНДС");
		БлокируемыеРеквизиты.Добавить("Товары.СуммаРаспределения; ТоварыСуммаРаспределения");
		БлокируемыеРеквизиты.Добавить("Товары.СуммаРаспределенияНДС; ТоварыСуммаРаспределенияНДС");
		БлокируемыеРеквизиты.Добавить("Товары.ЕдиницаИзмерения; ТоварыЕдиницаИзмерения");
		БлокируемыеРеквизиты.Добавить("Товары.Коэффициент; ТоварыКоэффициент");
		
		// таб. часть ОС
		БлокируемыеРеквизиты.Добавить("ОС; ОСЗаполнить, ОСИзменитьОС");
		БлокируемыеРеквизиты.Добавить("ОС.ОсновноеСредство; ОСОсновноеСредство");
		БлокируемыеРеквизиты.Добавить("ОС.СуммаТовара; ОССуммаТовара");
		БлокируемыеРеквизиты.Добавить("ОС.Сумма; ОССумма");
		БлокируемыеРеквизиты.Добавить("ОС.СуммаНДС; ОССуммаНДС");
		БлокируемыеРеквизиты.Добавить("ОС.СуммаРаспределения; ОССуммаРаспределения");
		БлокируемыеРеквизиты.Добавить("ОС.СуммаРаспределенияНДС; ОССуммаРаспределенияНДС");
		
		// таб. часть НМА
		БлокируемыеРеквизиты.Добавить("НМА; НМАЗаполнить, НМАИзменитьНМА");
		БлокируемыеРеквизиты.Добавить("НМА.НематериальныйАктив; НМАНематериальныйАктив");
		БлокируемыеРеквизиты.Добавить("НМА.СуммаТовара; НМАСуммаТовара");
		БлокируемыеРеквизиты.Добавить("НМА.Сумма; НМАСумма");
		БлокируемыеРеквизиты.Добавить("НМА.СуммаНДС; НМАСуммаНДС");
		БлокируемыеРеквизиты.Добавить("НМА.СуммаРаспределения; НМАСуммаРаспределения");
		БлокируемыеРеквизиты.Добавить("НМА.СуммаРаспределенияНДС; НМАСуммаРаспределенияНДС");
	КонецЕсли;
	
	Возврат БлокируемыеРеквизиты;
	
КонецФункции

// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов

// СтандартныеПодсистемы.ГрупповоеИзменениеОбъектов

// Возвращает реквизиты объекта, которые разрешается редактировать
// с помощью обработки группового изменения реквизитов.
//
// Возвращаемое значение:
//  Массив - список имен реквизитов объекта.
Функция РеквизитыРедактируемыеВГрупповойОбработке() Экспорт
	
	Результат = Новый Массив;
	
	Если ОбщегоНазначенияБККлиентСервер.ЭтоПростаяВерсияКонфигурации() Тогда
		Результат.Добавить("Автор");
		Результат.Добавить("ВидВходящегоДокумента");
		Результат.Добавить("ВидУчетаНУ");
		Результат.Добавить("ДатаВходящегоДокумента");
		Результат.Добавить("ДокументОснование");
		Результат.Добавить("Комментарий");
		Результат.Добавить("НДСВключенВСтоимость");
		Результат.Добавить("НомерВходящегоДокумента");
		Результат.Добавить("Ответственный");
		Результат.Добавить("Сделка");
		Результат.Добавить("Содержание");
		Результат.Добавить("СуммаВключаетНДС");
		Результат.Добавить("СчетУчетаРасчетовПоАвансам");
		Результат.Добавить("СчетУчетаРасчетовСКонтрагентом");
		Результат.Добавить("УчитыватьНДС");
		Результат.Добавить("СубконтоБУ1");
		Результат.Добавить("СубконтоБУ2");
		Результат.Добавить("СубконтоБУ3");
		Результат.Добавить("СубконтоНУ1");
		Результат.Добавить("СубконтоНУ2");
		Результат.Добавить("СубконтоНУ3");
		Результат.Добавить("СчетБУ");
		Результат.Добавить("СчетНУ");
		Результат.Добавить("УчитыватьКПН");
		Результат.Добавить("ОтложитьПринятиеНДСКЗачету");
		
		// таб. часть Товары
		Результат.Добавить("Товары.ЕдиницаИзмерения");
		Результат.Добавить("Товары.ДокументПартии");
		Результат.Добавить("Товары.СчетУчетаБУ");
		Результат.Добавить("Товары.СчетУчетаНДС");
		Результат.Добавить("Товары.НДСВидОборота");
		Результат.Добавить("Товары.НДСВидПоступления");
		Результат.Добавить("Товары.СчетУчетаНУ");
		
		// таб. часть ОС
		Результат.Добавить("ОС.ДокументПартии");
		Результат.Добавить("ОС.НДСВидОборота");
		Результат.Добавить("ОС.НДСВидПоступления");
		Результат.Добавить("ОС.СчетУчетаБУ");
		Результат.Добавить("ОС.СчетУчетаНДС");
		Результат.Добавить("ОС.СчетУчетаНУ");
		Результат.Добавить("ОС.ПодразделениеОрганизации");
		Результат.Добавить("ОС.МОЛОрганизации");
		
		// таб. часть НМА
		Результат.Добавить("НМА.НДСВидОборота");
		Результат.Добавить("НМА.НДСВидПоступления");
		Результат.Добавить("НМА.СчетУчетаБУ");
		Результат.Добавить("НМА.СчетУчетаНДС");
		Результат.Добавить("НМА.СчетУчетаНУ");
		
		// таб. часть УчастникиСовместнойДеятельности
		Результат.Добавить("УчастникиСовместнойДеятельности.*");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Конец СтандартныеПодсистемы.ГрупповоеИзменениеОбъектов

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Заполнение на основании

// Процедура выполняет заполниение табличной части по авансовому отчету.
//
// Параметры:
//  ДокументОснование - ссылка на документ основание (Авансовый отчет).
//
Процедура ЗаполнитьТоварыПоАвансовомуОтчету(Объект, ДокументОснование) Экспорт

	// Заполним реквизиты из стандартного набора по документу основанию.
	ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(Объект, ДокументОснование);

	Объект.ВидОперации =  Перечисления.ВидыОперацийПоступлениеДопРасходов.УслугаСтороннейОрганизации;

	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументОснование);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	АвансовыйОтчетТовары.Ссылка,
	|	АвансовыйОтчетТовары.Ссылка.ВалютаДокумента КАК ВалютаОснования,
	|	АвансовыйОтчетТовары.Сумма,
	|	АвансовыйОтчетТовары.СуммаНДС,
	|	АвансовыйОтчетТовары.Ссылка.УчитыватьНДС,
	|	АвансовыйОтчетТовары.Ссылка.СуммаВключаетНДС,
	|	АвансовыйОтчетТовары.Номенклатура,
	|	АвансовыйОтчетТовары.ЕдиницаИзмерения,
	|	АвансовыйОтчетТовары.Коэффициент,
	|	АвансовыйОтчетТовары.Количество,
	|	АвансовыйОтчетТовары.НДСВидОборота,
	|	АвансовыйОтчетТовары.НДСВидПоступления,
	|	АвансовыйОтчетТовары.СчетУчетаБУ,
	|	АвансовыйОтчетТовары.СчетУчетаНУ,
	|	АвансовыйОтчетТовары.СчетУчетаНДС,
	|	АвансовыйОтчетТовары.СтавкаНДС
	|ИЗ
	|	Документ.АвансовыйОтчет.Товары КАК АвансовыйОтчетТовары
	|ГДЕ
	|	АвансовыйОтчетТовары.Ссылка = &ДокументСсылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	АвансовыйОтчетТовары.НомерСтроки";	

	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл

		СтрокаТабличнойЧасти = Объект.Товары.Добавить();

		СтрокаТабличнойЧасти.Номенклатура      = Выборка.Номенклатура;
		СтрокаТабличнойЧасти.СчетУчетаБУ       = Выборка.СчетУчетаБУ;
		СтрокаТабличнойЧасти.СчетУчетаНУ       = Выборка.СчетУчетаНУ;
		СтрокаТабличнойЧасти.СчетУчетаНДС      = Выборка.СчетУчетаНДС;
		СтрокаТабличнойЧасти.ЕдиницаИзмерения  = Выборка.ЕдиницаИзмерения;
		СтрокаТабличнойЧасти.Коэффициент       = Выборка.Коэффициент;
		СтрокаТабличнойЧасти.Количество        = Выборка.Количество;
		СтрокаТабличнойЧасти.НДСВидОборота     = Выборка.НДСВидОборота;
		СтрокаТабличнойЧасти.НДСВидПоступления = Выборка.НДСВидПоступления;
		СтрокаТабличнойЧасти.ДокументПартии    = ДокументОснование;
		СтрокаТабличнойЧасти.СуммаТовара      = ОбщегоНазначенияБККлиентСервер.ПересчитатьИзВалютыВВалюту(Выборка.Сумма + 
		                                                                   ?(Выборка.УчитыватьНДС И НЕ Выборка.СуммаВключаетНДС, Выборка.СуммаНДС, 0),
		                                                                   Выборка.ВалютаОснования ,Объект.ВалютаДокумента,
		                                                                   ОбщегоНазначенияБК.КурсДокумента(Выборка.Ссылка, ВалютаРегламентированногоУчета),
		                                                                   ОбщегоНазначенияБК.КурсДокумента(Объект, ВалютаРегламентированногоУчета),
		                                                                   ОбщегоНазначенияБК.КратностьДокумента(Выборка.Ссылка, ВалютаРегламентированногоУчета),
		                                                                   ОбщегоНазначенияБК.КратностьДокумента(Объект, ВалютаРегламентированногоУчета));

	КонецЦикла;
	
	Объект.ДокументОснование = ДокументОснование;
		
	СчетаУчетаВДокументах.ЗаполнитьПередОтображениемПользователю(Объект);
		
КонецПроцедуры

// Процедура выполняет заполниение табличной части по счет-фактуре полученной.
//
// Параметры:
//  ДокументОснование - ссылка на документ основание (Счет-фактура полученная).
//
Процедура ЗаполнитьТоварыПоСчетФактураПолученный(Объект, ДокументОснование) Экспорт
	
	Если ДокументОснование.ПодтвержденДокументамиОтгрузки Тогда
		ТекстСообщения = НСтр("ru = 'Данные счет-фактуры уже подтверждены документами отгрузки. Ввод на основании невозможен.'");
		ВызватьИсключение(ТекстСообщения);
	КонецЕсли;  
	
	Объект.Дата = ДокументОснование.ДатаСовершенияОборотаПоРеализации;
	
	ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(Объект, ДокументОснование);
	
	Объект.ВидОперации =  Перечисления.ВидыОперацийПоступлениеДопРасходов.УслугаСтороннейОрганизации;
	Объект.ДокументОснование = ДокументОснование;
	
	ПлательщикНДС = ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНДС(Объект.Организация, Объект.Дата);
		
		Если НЕ ПлательщикНДС И ДокументОснование.УчитыватьНДС И НЕ ДокументОснование.СуммаВключаетНДС Тогда
			УчестьСуммуНДС = Истина;
		Иначе
			УчестьСуммуНДС = Ложь;
		КонецЕсли;

	СтруктураОстатков = УчетНДСИАкциза.ПолучитьСписокТоваровПодтвержденныхОтгрузками(ДокументОснование, Ложь);
	
	//свернем по ставке НДС, нас интересует общая сумма остатка
	ОснованиеУслуги = ДокументОснование.Услуги.Выгрузить();
	ОснованиеУслуги.Свернуть("Цена,СтавкаНДС", "Сумма,Количество,СуммаНДС");
	ОбщаяСумма = 0;
	
	Для Каждого Услуга Из ОснованиеУслуги Цикл
		ОстатокСумма = УчетНДСИАкциза.ПолучитьОстатокИзСФ(Услуга, "Услуги", СтруктураОстатков, Ложь, Ложь, Истина, ОснованиеУслуги);
		Если УчестьСуммуНДС Тогда
			ОстатокСумма.Сумма = ?(ОстатокСумма.Сумма = 0, ОстатокСумма.Сумма, ОстатокСумма.Сумма + Услуга.СуммаНДС);
		КонецЕсли;
		ОбщаяСумма   = ОбщаяСумма + ОстатокСумма.Сумма; 		
	КонецЦикла;
	
	Если ОбщаяСумма = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Объект.Сумма  = ОбщаяСумма;
	
	//если у нас остаток в счет-фактуре по нескольким ставкам НДС, тогда ставку НДС мы просто не заполняем
	Если ОснованиеУслуги.Количество() = 1 Тогда
		Объект.СтавкаНДС = ОснованиеУслуги[0].СтавкаНДС;
		Объект.СуммаНДС  = УчетНДСИАкцизаКлиентСервер.РассчитатьСуммуНДС(Объект.Сумма, Объект.УчитыватьНДС, Объект.СуммаВключаетНДС, УчетНДСиАкцизаВызовСервераПовтИсп.ПолучитьСтавкуНДС(Объект.СтавкаНДС));
	КонецЕсли;
		
	СчетаУчетаВДокументах.ЗаполнитьПередОтображениемПользователю(Объект);
		
КонецПроцедуры

Процедура ЗаполнитьПоПоступлениюТоваров(Объект, ДокументПоступление) Экспорт
	
	// Заполним реквизиты из стандартного набора по документу основанию.
	ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(Объект, ДокументПоступление);
	Объект.ВидОперации =  Перечисления.ВидыОперацийПоступлениеДопРасходов.УслугаСтороннейОрганизации;
	Объект.СтавкаНДС = ПользователиБКВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию(Пользователи.ТекущийПользователь(), "ОсновнаяСтавкаНДС");
	ЗаполнитьПоПоступлениюОС(Объект, ДокументПоступление);
	ЗаполнитьПоПоступлениюТМЗ(Объект, ДокументПоступление);
	
	Объект.ДокументОснование = ДокументПоступление;
	
	Объект.УчитыватьНДС =  ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНДС(Объект.Организация, Объект.Дата);	

	СчетаУчетаВДокументах.ЗаполнитьПередОтображениемПользователю(Объект);
		
КонецПроцедуры

Процедура ЗаполнитьПоПоступлениюНМА(Объект, ДокументПоступление) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ДокументПоступление) Тогда
		Возврат;
	КонецЕсли;
			
	// Заполним реквизиты из стандартного набора по документу основанию.
	ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(Объект, ДокументПоступление);
	Объект.ВидОперации =  Перечисления.ВидыОперацийПоступлениеДопРасходов.УслугаСтороннейОрганизации;
	Объект.СтавкаНДС = ПользователиБКВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию(Пользователи.ТекущийПользователь(), "ОсновнаяСтавкаНДС");

	Объект.СпособРаспределения = Перечисления.СпособыРаспределенияДопРасходов.ПоСумме;
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокументПоступление);
	Запрос.Текст ="
	|ВЫБРАТЬ
	|	Док.НематериальныйАктив,
	|	Док.Ссылка,
	|	Док.Ссылка.ВалютаДокумента КАК ВалютаОснования,
	|	Док.Сумма,
	|	Док.СуммаНДС,
	|	Док.Ссылка.УчитыватьНДС КАК УчитыватьНДС,
	|	Док.Ссылка.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	Док.СчетУчетаБУ,
	|	Док.СчетУчетаНУ,
	|	Док.СчетУчетаНДС,
	|	Док.НДСВидОборота,
	|	Док.НДСВидПоступления	
	|ИЗ
	|	Документ.ПоступлениеНМА.НМА КАК Док
	|
	|ГДЕ
	|	Док.Ссылка = &ДокументОснование
	|
	|УПОРЯДОЧИТЬ ПО
	|	Док.НомерСтроки";	

	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	ПоддержкаУчетаВременныхРазниц = ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Объект.Организация, Объект.Дата) и ПроцедурыНалоговогоУчета.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль(Объект.Организация, Объект.Дата);
	ВидимостьСчетовНУ = Объект.УчитыватьКПН И (ПоддержкаУчетаВременныхРазниц ИЛИ Объект.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ);

	Пока Выборка.Следующий() Цикл

		СтрокаТабличнойЧасти = Объект.НМА.Добавить();

		
		СтрокаТабличнойЧасти.НематериальныйАктив = Выборка.НематериальныйАктив;
		СтрокаТабличнойЧасти.СуммаТовара      = ОбщегоНазначенияБККлиентСервер.ПересчитатьИзВалютыВВалюту(Выборка.Сумма + 
		                                                                   ?(Выборка.УчитыватьНДС И НЕ Выборка.СуммаВключаетНДС, Выборка.СуммаНДС, 0),
		                                                                   Выборка.ВалютаОснования ,Объект.ВалютаДокумента,
		                                                                   ОбщегоНазначенияБК.КурсДокумента(Выборка.Ссылка, ВалютаРегламентированногоУчета),
		                                                                   ОбщегоНазначенияБК.КурсДокумента(Объект, ВалютаРегламентированногоУчета),
		                                                                   ОбщегоНазначенияБК.КратностьДокумента(Выборка.Ссылка, ВалютаРегламентированногоУчета),
		                                                                   ОбщегоНазначенияБК.КратностьДокумента(Объект, ВалютаРегламентированногоУчета));

		СтрокаТабличнойЧасти.СчетУчетаБУ  		= Выборка.СчетУчетаБУ;
		СтрокаТабличнойЧасти.СчетУчетаНУ  		= ?(ВидимостьСчетовНУ,Выборка.СчетУчетаНУ, ПланыСчетов.Налоговый.ПустаяСсылка());
		СтрокаТабличнойЧасти.СчетУчетаНДС 		= Выборка.СчетУчетаНДС;		
		СтрокаТабличнойЧасти.НДСВидОборота 		= Выборка.НДСВидОборота;		
		СтрокаТабличнойЧасти.НДСВидПоступления 	= Выборка.НДСВидПоступления;				
		СтрокаТабличнойЧасти.ДокументПартии 	= ДокументПоступление.Ссылка;				
	КонецЦикла;
	
	Объект.ДокументОснование = ДокументПоступление;
		
	СчетаУчетаВДокументах.ЗаполнитьПередОтображениемПользователю(Объект);
		
КонецПроцедуры

Процедура ЗаполнитьПоПоступлениюОС(Объект, ДокументПоступление) Экспорт
	
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокументПоступление);
	Запрос.Текст ="ВЫБРАТЬ
	              |	Док.ОсновноеСредство,
	              |	Док.Ссылка,
	              |	Док.Ссылка.ВалютаДокумента КАК ВалютаОснования,
	              |	Док.Сумма,
	              |	Док.СуммаНДС,
	              |	Док.Ссылка.УчитыватьНДС КАК УчитыватьНДС,
	              |	Док.Ссылка.СуммаВключаетНДС КАК СуммаВключаетНДС,
	              |	Док.СчетУчетаБУ,
	              |	Док.СчетУчетаНУ,
	              |	Док.СчетУчетаНДС,
	              |	Док.НДСВидОборота,
	              |	Док.НДСВидПоступления,
	              |	Док.ПодразделениеОрганизации,
	              |	Док.МОЛОрганизации
	              |ИЗ
	              |	Документ.ПоступлениеТоваровУслуг.ОС КАК Док
	              |ГДЕ
	              |	Док.Ссылка = &ДокументОснование
	              |
	              |УПОРЯДОЧИТЬ ПО
	              |	Док.НомерСтроки";	

	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	ПоддержкаУчетаВременныхРазниц = ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Объект.Организация, Объект.Дата) и ПроцедурыНалоговогоУчета.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль(Объект.Организация, Объект.Дата);
	ВидимостьСчетовНУ = Объект.УчитыватьКПН И (ПоддержкаУчетаВременныхРазниц ИЛИ Объект.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ);

	Пока Выборка.Следующий() Цикл

		СтрокаТабличнойЧасти = Объект.ОС.Добавить();

		
		СтрокаТабличнойЧасти.ОсновноеСредство = Выборка.ОсновноеСредство;
		СтрокаТабличнойЧасти.СуммаТовара      = ОбщегоНазначенияБККлиентСервер.ПересчитатьИзВалютыВВалюту(Выборка.Сумма + 
		                                                                   ?(Выборка.УчитыватьНДС И НЕ Выборка.СуммаВключаетНДС, Выборка.СуммаНДС, 0),
		                                                                   Выборка.ВалютаОснования ,Объект.ВалютаДокумента,
		                                                                   ОбщегоНазначенияБК.КурсДокумента(Выборка.Ссылка, ВалютаРегламентированногоУчета),
		                                                                   ОбщегоНазначенияБК.КурсДокумента(Объект, ВалютаРегламентированногоУчета),
		                                                                   ОбщегоНазначенияБК.КратностьДокумента(Выборка.Ссылка, ВалютаРегламентированногоУчета),
		                                                                   ОбщегоНазначенияБК.КратностьДокумента(Объект, ВалютаРегламентированногоУчета));

		СтрокаТабличнойЧасти.СчетУчетаБУ  			  = Выборка.СчетУчетаБУ;
		СтрокаТабличнойЧасти.СчетУчетаНУ  			  = ?(ВидимостьСчетовНУ,Выборка.СчетУчетаНУ, ПланыСчетов.Налоговый.ПустаяСсылка());
		СтрокаТабличнойЧасти.СчетУчетаНДС 			  = Выборка.СчетУчетаНДС;		
		СтрокаТабличнойЧасти.НДСВидОборота 			  = Выборка.НДСВидОборота;		
		СтрокаТабличнойЧасти.НДСВидПоступления 		  = Выборка.НДСВидПоступления;				
		СтрокаТабличнойЧасти.ДокументПартии 		  = ДокументПоступление;				
		СтрокаТабличнойЧасти.ПодразделениеОрганизации = Выборка.ПодразделениеОрганизации;				
		СтрокаТабличнойЧасти.МОЛОрганизации 		  = Выборка.МОЛОрганизации;				
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьПоПоступлениюТМЗ(Объект, ДокументПоступление) Экспорт
	
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокументПоступление);
	Запрос.Текст ="
	|ВЫБРАТЬ
	|	Док.Номенклатура,
	|	Док.Ссылка,
	|	Док.Ссылка.ВалютаДокумента КАК ВалютаОснования,
	|	Док.Сумма,
	|	Док.СуммаНДС,
	|	Док.Ссылка.УчитыватьНДС КАК УчитыватьНДС,
	|	Док.Ссылка.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	Док.Количество,
	|	Док.Коэффициент,
	|	Док.СчетУчетаБУ,
	|	Док.СчетУчетаНУ,
	|	Док.СчетУчетаНДС,
	|	Док.НДСВидОборота,
	|	Док.НДСВидПоступления	
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Товары КАК Док
	|
	|ГДЕ
	|	Док.Ссылка = &ДокументОснование
	|
	|УПОРЯДОЧИТЬ ПО
	|	Док.НомерСтроки";	

	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	

	ПоддержкаУчетаВременныхРазниц = ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Объект.Организация, Объект.Дата) и ПроцедурыНалоговогоУчета.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль(Объект.Организация, Объект.Дата);
	ВидимостьСчетовНУ = Объект.УчитыватьКПН И (ПоддержкаУчетаВременныхРазниц ИЛИ Объект.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ);
	
	Пока Выборка.Следующий() Цикл

		СтрокаТабличнойЧасти = Объект.Товары.Добавить();

		
		СтрокаТабличнойЧасти.Номенклатура     = Выборка.Номенклатура;
		СтрокаТабличнойЧасти.Количество       = Выборка.Количество;
		СтрокаТабличнойЧасти.Коэффициент      = Выборка.Коэффициент;
		СтрокаТабличнойЧасти.ДокументПартии   = ДокументПоступление;
		СтрокаТабличнойЧасти.СуммаТовара      = ОбщегоНазначенияБККлиентСервер.ПересчитатьИзВалютыВВалюту(Выборка.Сумма + 
		                                                                   ?(Выборка.УчитыватьНДС И НЕ Выборка.СуммаВключаетНДС, Выборка.СуммаНДС, 0),
		                                                                   Выборка.ВалютаОснования ,Объект.ВалютаДокумента,
		                                                                   ОбщегоНазначенияБК.КурсДокумента(Выборка.Ссылка, ВалютаРегламентированногоУчета),
		                                                                   ОбщегоНазначенияБК.КурсДокумента(Объект, ВалютаРегламентированногоУчета),
		                                                                   ОбщегоНазначенияБК.КратностьДокумента(Выборка.Ссылка, ВалютаРегламентированногоУчета),
		                                                                   ОбщегоНазначенияБК.КратностьДокумента(Объект, ВалютаРегламентированногоУчета));

		СтрокаТабличнойЧасти.СчетУчетаБУ  		= Выборка.СчетУчетаБУ;
		СтрокаТабличнойЧасти.СчетУчетаНУ  		= ?(ВидимостьСчетовНУ,Выборка.СчетУчетаНУ, ПланыСчетов.Налоговый.ПустаяСсылка());
		СтрокаТабличнойЧасти.СчетУчетаНДС 		= Выборка.СчетУчетаНДС;		
		СтрокаТабличнойЧасти.НДСВидОборота 		= Выборка.НДСВидОборота;		
		СтрокаТабличнойЧасти.НДСВидПоступления 	= Выборка.НДСВидПоступления;				
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьПоПоступлениюДопРасходов(Объект, ДокументПоступление) Экспорт
	
	ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(Объект, ДокументПоступление);
	
	ЗаполнитьЗначенияСвойств(Объект, ДокументПоступление,
		"ВидОперации,
		|ВидВходящегоДокумента,
		|ДатаВходящегоДокумента,
		|НДСВключенВСтоимость,
		|НомерВходящегоДокумента,
		|Сделка,
		|Содержание,
		|СпособРаспределения,
		|СтавкаНДС,
		|Сумма,
		|СуммаДокумента,
		|СуммаНДС,
		|СчетУчетаРасчетовПоАвансам,
		|СчетУчетаРасчетовСКонтрагентом,
		|СубконтоБУ1,
		|СубконтоБУ2,
		|СубконтоБУ3,
		|СубконтоНУ1,
		|СубконтоНУ2,
		|СубконтоНУ3,
		|СчетБУ,
		|СчетНУ,
		|Номенклатура,
		|ОтложитьПринятиеНДСКЗачету");
	
	Объект.ДокументОснование = ДокументПоступление;
	
	Для Каждого ТабличнаяЧасть Из ДокументПоступление.Метаданные().ТабличныеЧасти Цикл
		Объект[ТабличнаяЧасть.Имя].Очистить();
		Для Каждого СтрокаТабличнойЧасти Из ДокументПоступление[ТабличнаяЧасть.Имя] Цикл
			ЗаполнитьЗначенияСвойств(Объект[ТабличнаяЧасть.Имя].Добавить(), СтрокаТабличнойЧасти);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Проведение

Функция ПодготовитьПараметрыПроведения(ДокументСсылка, Отказ) Экспорт
	
	ПараметрыПроведения = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета",	Константы.ВалютаРегламентированногоУчета.Получить());
	
	НомераТаблиц = Новый Структура;
	
	Запрос.Текст = ТекстЗапросаРеквизитыДокумента(НомераТаблиц);
	Результат = Запрос.ВыполнитьПакет();
	ТаблицаРеквизиты = Результат[НомераТаблиц["Реквизиты"]].Выгрузить();
	ПараметрыПроведения.Вставить("Реквизиты", ТаблицаРеквизиты);
	
	Реквизиты = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ТаблицаРеквизиты[0]);
	
	Если НЕ УчетнаяПолитикаСервер.Существует(Реквизиты.Организация, Реквизиты.Период, "БУ", Истина, ДокументСсылка)
		ИЛИ НЕ УчетнаяПолитикаСервер.Существует(Реквизиты.Организация, Реквизиты.Период, "НУ", Истина, ДокументСсылка) Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Если НЕ УправлениеВзаиморасчетамиСервер.ВозможноПроведениеВ_БУ_НУ(Реквизиты, Отказ) Тогда 
		Возврат ПараметрыПроведения;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат ПараметрыПроведения;
	КонецЕсли;
	
	Реквизиты.Вставить("РасчетыВВалюте", Реквизиты.ВалютаВзаиморасчетов <> Реквизиты.ВалютаРегламентированногоУчета);
	Запрос.УстановитьПараметр("РасчетыВВалюте",  Реквизиты.РасчетыВВалюте);
	Запрос.УстановитьПараметр("ВедетсяАналитическийУчетОСПоПодразделениям",   УправлениеВнеоборотнымиАктивамиСервер.ВедетсяАналитическийУчетОСПоПодразделениям(Реквизиты.Период));
	Запрос.УстановитьПараметр("ВедетсяАналитическийУчетОСПоМОЛ",              УправлениеВнеоборотнымиАктивамиСервер.ВедетсяАналитическийУчетОСПоМОЛ(Реквизиты.Период));
	
	Если Реквизиты.РасчетыВВалюте Тогда
		ПодготовитьТаблицыДокументаРасчетыВВалюте(Запрос, Реквизиты);
	Иначе
		Запрос.Текст = ТекстЗапросаВременныеТаблицыДокумента(НомераТаблиц, Реквизиты);
		Если НЕ ПустаяСтрока(Запрос.Текст) Тогда 
			Результат    = Запрос.ВыполнитьПакет();
		КонецЕсли;
	КонецЕсли;
	
	ОрганизацияПлательщикНалогаНаПрибыль 			= ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период);
	ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль 	= ОрганизацияПлательщикНалогаНаПрибыль И ПроцедурыНалоговогоУчета.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль(Реквизиты.Организация, Реквизиты.Период);
	
	НеобходимостьОтраженияВНУ 						= ОрганизацияПлательщикНалогаНаПрибыль И Реквизиты.УчитыватьКПН И (ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль ИЛИ Реквизиты.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ);
	
	ОпределятьСтоимостьПриобретенияПоКурсуАванса    = УчетнаяПолитикаСервер.ОпределятьСтоимостьПриобретенияПоКурсуАванса(Реквизиты.Организация, Реквизиты.Период);
	
	Налогоплательщик = Реквизиты.Организация;
	Если ПолучитьФункциональнуюОпцию("ПоддержкаРаботыСоСтруктурнымиПодразделениями") Тогда
		Налогоплательщик = ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(Реквизиты.СтруктурноеПодразделение,
																	Реквизиты.Организация,
																	Перечисления.РазделыНалоговогоУчета.НДС);
	КонецЕсли;	
	
	Реквизиты.Вставить("Налогоплательщик", Налогоплательщик);
	
	Реквизиты.Вставить("НеобходимостьОтраженияВНУ", 					 НеобходимостьОтраженияВНУ);
	Реквизиты.Вставить("ОпределятьСтоимостьПриобретенияПоКурсуАванса",   ОпределятьСтоимостьПриобретенияПоКурсуАванса);
	
	ПараметрыПроведения.Реквизиты.ЗаполнитьЗначения(НеобходимостьОтраженияВНУ					  , "НеобходимостьОтраженияВНУ");
	ПараметрыПроведения.Реквизиты.ЗаполнитьЗначения(ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль, "ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль");
	ПараметрыПроведения.Реквизиты.ЗаполнитьЗначения(ОпределятьСтоимостьПриобретенияПоКурсуАванса  , "ОпределятьСтоимостьПриобретенияПоКурсуАванса");
	ПараметрыПроведения.Реквизиты.ЗаполнитьЗначения(Налогоплательщик		 					  , "Налогоплательщик");
	
	НомераТаблиц = Новый Структура;
	Запрос.Текст = ТекстЗапросаЗачетАвансов(НомераТаблиц, ПараметрыПроведения, Реквизиты)
					+ ТекстЗапросаПоступлениеДопРасходов(НомераТаблиц, ПараметрыПроведения, Реквизиты)
					+ ТекстЗапросаНДС(НомераТаблиц, ПараметрыПроведения, Реквизиты)
					+ ТекстЗапросаУчастникиСовместнойДеятельности(НомераТаблиц, ПараметрыПроведения, Реквизиты);
	
	Запрос.УстановитьПараметр("СинонимТовары",	      НСтр("ru = 'Товары'", ОбщегоНазначения.КодОсновногоЯзыка()));
	Запрос.УстановитьПараметр("СинонимОС",	          НСтр("ru = 'ОС'", ОбщегоНазначения.КодОсновногоЯзыка()));
	Запрос.УстановитьПараметр("СинонимНМА",	          НСтр("ru = 'НМА'", ОбщегоНазначения.КодОсновногоЯзыка()));
	Запрос.УстановитьПараметр("СодержаниеТовары",     НСтр("ru = 'Доп. расходы при поступлении товаров'", ОбщегоНазначения.КодОсновногоЯзыка()));
	Запрос.УстановитьПараметр("СодержаниеОС",         НСтр("ru = 'Доп. расходы при поступлении ОС'", ОбщегоНазначения.КодОсновногоЯзыка()));
	Запрос.УстановитьПараметр("СодержаниеНМА",        НСтр("ru = 'Доп. расходы при поступлении НМА'", ОбщегоНазначения.КодОсновногоЯзыка()));
	Запрос.УстановитьПараметр("СодержаниеВыделенНДС", НСтр("ru = 'Выделен НДС'", ОбщегоНазначения.КодОсновногоЯзыка()));
	Запрос.УстановитьПараметр("НеобходимостьОтраженияВНУ",	                  НеобходимостьОтраженияВНУ);
	Запрос.УстановитьПараметр("ОпределятьСтоимостьПриобретенияПоКурсуАванса", ОпределятьСтоимостьПриобретенияПоКурсуАванса);
	
	Если НЕ ПустаяСтрока(Запрос.Текст) Тогда 
		Результат = Запрос.ВыполнитьПакет();
		Для Каждого НомерТаблицы Из НомераТаблиц Цикл
			ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат[НомерТаблицы.Значение].Выгрузить());
		КонецЦикла;
	КонецЕсли;
	
	СтруктураТаблицДокумента = Новый Структура;
	СтруктураТаблицДокумента.Вставить("ТаблицаТовары", ПараметрыПроведения.ТаблицаТовары);
	СтруктураТаблицДокумента.Вставить("ТаблицаОС",     ПараметрыПроведения.ТаблицаОС);
	СтруктураТаблицДокумента.Вставить("ТаблицаНМА",    ПараметрыПроведения.ТаблицаНМА);
	
	ПараметрыПроведения.Вставить("СтруктураТаблицДокумента", СтруктураТаблицДокумента);
	
	Возврат ПараметрыПроведения;

КонецФункции 

Функция ТекстЗапросаРеквизитыДокумента(НомераТаблиц)
	
	НомераТаблиц.Вставить("ВременнаяТаблицаСоставДокумента", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВременнаяТаблицаРеквизиты", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("Реквизиты", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	МАКСИМУМ(СоставДокумента.ЕстьТовары) КАК ЕстьТовары,
	|	МАКСИМУМ(СоставДокумента.ЕстьОС) КАК ЕстьОС,
	|	МАКСИМУМ(СоставДокумента.ЕстьНМА) КАК ЕстьНМА,
	|	МАКСИМУМ(СоставДокумента.ЕстьУчастникиСовместнойДеятельности) КАК ЕстьУчастникиСовместнойДеятельности
	|ПОМЕСТИТЬ СоставДокумента
	|ИЗ
	|	(ВЫБРАТЬ ПЕРВЫЕ 1
	|		ИСТИНА КАК ЕстьТовары,
	|		ЛОЖЬ КАК ЕстьОС,
	|		ЛОЖЬ КАК ЕстьНМА,
	|		ЛОЖЬ КАК ЕстьУчастникиСовместнойДеятельности
	|	ИЗ
	|		Документ.ПоступлениеДопРасходов.Товары КАК ТаблицаДокумента
	|	ГДЕ
	|		ТаблицаДокумента.Ссылка = &Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ ПЕРВЫЕ 1
	|		ЛОЖЬ,
	|		ИСТИНА,
	|		ЛОЖЬ,
	|		ЛОЖЬ
	|	ИЗ
	|		Документ.ПоступлениеДопРасходов.ОС КАК ТаблицаДокумента
	|	ГДЕ
	|		ТаблицаДокумента.Ссылка = &Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ ПЕРВЫЕ 1
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ИСТИНА,
	|		ЛОЖЬ
	|	ИЗ
	|		Документ.ПоступлениеДопРасходов.НМА КАК ТаблицаДокумента
	|	ГДЕ
	|		ТаблицаДокумента.Ссылка = &Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ ПЕРВЫЕ 1
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ИСТИНА
	|	ИЗ
	|		Документ.ПоступлениеДопРасходов.УчастникиСовместнойДеятельности КАК ТаблицаДокумента
	|	ГДЕ
	|		ТаблицаДокумента.Ссылка = &Ссылка) КАК СоставДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Ссылка,
	|	Реквизиты.Дата КАК Дата,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.Организация КАК Налогоплательщик,
	|	Реквизиты.СтруктурноеПодразделение,
	|	ВЫБОР
	|		КОГДА Реквизиты.Организация.ГоловнаяОрганизация ЕСТЬ NULL 
	|				ИЛИ Реквизиты.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА Реквизиты.Организация
	|		ИНАЧЕ Реквизиты.Организация.ГоловнаяОрганизация
	|	КОНЕЦ КАК ГоловнаяОрганизация,
	|	Реквизиты.УчитыватьКПН,
	|	Реквизиты.ВидУчетаНУ,
	|	Реквизиты.ВидОперации,
	|	ВЫБОР
	|		КОГДА Реквизиты.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеДопРасходов.ВнутреннийРасход)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ВнутреннийРасход,
	|	Реквизиты.Контрагент,
	|	Реквизиты.ДоговорКонтрагента,
	|	Реквизиты.Сделка,
	|	ЕСТЬNULL(Реквизиты.ДоговорКонтрагента.ДоговорСовместнойДеятельности, НЕОПРЕДЕЛЕНО) КАК ПризнакДоговорСовместнойДеятельности,
	|	ЕСТЬNULL(Реквизиты.ДоговорКонтрагента.ВедениеВзаиморасчетов, НЕОПРЕДЕЛЕНО) КАК ВедениеВзаиморасчетов,
	|	ЕСТЬNULL(Реквизиты.ДоговорКонтрагента.ВидДоговора, НЕОПРЕДЕЛЕНО) КАК ВидДоговора,
	|	ЕСТЬNULL(Реквизиты.ДоговорКонтрагента.ВалютаВзаиморасчетов, Реквизиты.ВалютаДокумента) КАК ВалютаВзаиморасчетов,
	|	Реквизиты.СчетУчетаРасчетовСКонтрагентом,
	|	Реквизиты.СчетУчетаРасчетовПоАвансам,
	|	Реквизиты.УчитыватьНДС,
	|	Реквизиты.СуммаВключаетНДС,
	|	Реквизиты.НДСВключенВСтоимость,
	|	Реквизиты.СтавкаНДС,
	|	Реквизиты.КурсВзаиморасчетов,
	|	Реквизиты.КратностьВзаиморасчетов,
	|	Реквизиты.ВалютаДокумента,
	|	&ВалютаРегламентированногоУчета КАК ВалютаРегламентированногоУчета,
	|	ЛОЖЬ КАК НеобходимостьОтраженияВНУ,
	|	ЛОЖЬ КАК ОпределятьСтоимостьПриобретенияПоКурсуАванса,
	|	ЛОЖЬ КАК ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль,
	|	Реквизиты.СчетБУ КАК СчетЗатратБУ,
	|	Реквизиты.СубконтоБУ1 КАК СубконтоЗатратБУ1,
	|	Реквизиты.СубконтоБУ2 КАК СубконтоЗатратБУ2,
	|	Реквизиты.СубконтоБУ3 КАК СубконтоЗатратБУ3,
	|	Реквизиты.СчетНУ КАК СчетЗатратНУ,
	|	Реквизиты.СубконтоНУ1 КАК СубконтоЗатратНУ1,
	|	Реквизиты.СубконтоНУ2 КАК СубконтоЗатратНУ2,
	|	Реквизиты.СубконтоНУ3 КАК СубконтоЗатратНУ3,
	|	Реквизиты.НомерВходящегоДокумента,
	|	Реквизиты.ДатаВходящегоДокумента,
	|	Реквизиты.ВидВходящегоДокумента,
	|	Реквизиты.ОтложитьПринятиеНДСКЗачету
	|ПОМЕСТИТЬ Реквизиты
	|ИЗ
	|	Документ.ПоступлениеДопРасходов КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Организация,
	|	Реквизиты.Налогоплательщик,
	|	Реквизиты.СтруктурноеПодразделение,
	|	Реквизиты.ГоловнаяОрганизация,
	|	Реквизиты.УчитыватьКПН,
	|	Реквизиты.ВидУчетаНУ,
	|	Реквизиты.ВидОперации,
	|	Реквизиты.Контрагент,
	|	Реквизиты.ДоговорКонтрагента,
	|	Реквизиты.Сделка,
	|	Реквизиты.ПризнакДоговорСовместнойДеятельности,
	|	Реквизиты.ВедениеВзаиморасчетов,
	|	Реквизиты.ВидДоговора,
	|	Реквизиты.ВалютаВзаиморасчетов,
	|	Реквизиты.СчетУчетаРасчетовСКонтрагентом,
	|	Реквизиты.СчетУчетаРасчетовПоАвансам,
	|	Реквизиты.УчитыватьНДС,
	|	Реквизиты.СуммаВключаетНДС,
	|	Реквизиты.НДСВключенВСтоимость,
	|	Реквизиты.КурсВзаиморасчетов,
	|	Реквизиты.КратностьВзаиморасчетов,
	|	Реквизиты.ВалютаДокумента,
	|	Реквизиты.ВалютаРегламентированногоУчета КАК ВалютаРегламентированногоУчета,
	|	Реквизиты.НеобходимостьОтраженияВНУ КАК НеобходимостьОтраженияВНУ,
	|	Реквизиты.ОпределятьСтоимостьПриобретенияПоКурсуАванса КАК ОпределятьСтоимостьПриобретенияПоКурсуАванса,
	|	Реквизиты.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль КАК ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль,
	|	Реквизиты.СчетЗатратБУ,
	|	Реквизиты.СубконтоЗатратБУ1,
	|	Реквизиты.СубконтоЗатратБУ2,
	|	Реквизиты.СубконтоЗатратБУ3,
	|	Реквизиты.СчетЗатратНУ,
	|	Реквизиты.СубконтоЗатратНУ1,
	|	Реквизиты.СубконтоЗатратНУ2,
	|	Реквизиты.СубконтоЗатратНУ3,
	|	Реквизиты.НомерВходящегоДокумента,
	|	Реквизиты.ДатаВходящегоДокумента,
	|	Реквизиты.ВидВходящегоДокумента,
	|	ЕСТЬNULL(СоставДокумента.ЕстьТовары, ЛОЖЬ) КАК ЕстьТовары,
	|	ЕСТЬNULL(СоставДокумента.ЕстьОС, ЛОЖЬ) КАК ЕстьОС,
	|	ЕСТЬNULL(СоставДокумента.ЕстьНМА, ЛОЖЬ) КАК ЕстьНМА,
	|	ЕСТЬNULL(СоставДокумента.ЕстьУчастникиСовместнойДеятельности, ЛОЖЬ) КАК ЕстьУчастникиСовместнойДеятельности,
	|	Реквизиты.ОтложитьПринятиеНДСКЗачету
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|		ЛЕВОЕ СОЕДИНЕНИЕ СоставДокумента КАК СоставДокумента
	|		ПО (ИСТИНА)";

	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаВременныеТаблицыДокумента(НомераТаблиц, Реквизиты)

	ТекстЗапроса = "";
	
	Если Реквизиты.ЕстьТовары Тогда 
		НомераТаблиц.Вставить("ВременнаяТаблицаТовары", НомераТаблиц.Количество());
		
		ТекстЗапроса = ТекстЗапроса + 
		"ВЫБРАТЬ
		|	ТаблицаТовары.Ссылка,
		|	ТаблицаТовары.НомерСтроки,
		|	ТаблицаТовары.Номенклатура,
		|	ТаблицаТовары.Количество * ТаблицаТовары.Коэффициент КАК Количество,
		|	Реквизиты.СтавкаНДС,
		|	ТаблицаТовары.СуммаТовара КАК СуммаТовара,
		|	ТаблицаТовары.СуммаРаспределения - ВЫБОР
		|		КОГДА Реквизиты.СуммаВключаетНДС
		|			ТОГДА ТаблицаТовары.СуммаРаспределенияНДС
		|		ИНАЧЕ 0
		|	КОНЕЦ + ВЫБОР
		|		КОГДА Реквизиты.НДСВключенВСтоимость
		|			ТОГДА ТаблицаТовары.СуммаРаспределенияНДС
		|		КОГДА ЕСТЬNULL(Типовой.Забалансовый, ЛОЖЬ)
		|				И НЕ Реквизиты.НДСВключенВСтоимость
		|			ТОГДА ТаблицаТовары.СуммаРаспределенияНДС
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Сумма,
		|	ТаблицаТовары.СуммаРаспределения - ВЫБОР
		|		КОГДА Реквизиты.СуммаВключаетНДС
		|			ТОГДА ТаблицаТовары.СуммаРаспределенияНДС
		|		ИНАЧЕ 0
		|	КОНЕЦ + ВЫБОР
		|		КОГДА Реквизиты.НДСВключенВСтоимость
		|			ТОГДА ТаблицаТовары.СуммаРаспределенияНДС
		|		КОГДА ЕСТЬNULL(Типовой.Забалансовый, ЛОЖЬ)
		|				И НЕ Реквизиты.НДСВключенВСтоимость
		|			ТОГДА ТаблицаТовары.СуммаРаспределенияНДС
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СуммаВзаиморасчетов,
		|	ТаблицаТовары.СуммаРаспределенияНДС КАК СуммаНДС,
		|	ТаблицаТовары.СуммаРаспределенияНДС КАК СуммаНДСВзаиморасчетов,
		|	ТаблицаТовары.СчетУчетаБУ,
		|	ТаблицаТовары.СчетУчетаНУ,
		|	ТаблицаТовары.СчетУчетаНДС,
		|	ТаблицаТовары.НДСВидОборота,
		|	ТаблицаТовары.НДСВидПоступления,
		|	ТаблицаТовары.НДСВидПоступления.ПризнакКорректировки КАК КорректировкаНДС,
		|	ТаблицаТовары.ДокументПартии,
		|	ВЫБОР 
		|		КОГДА ТаблицаТовары.ДокументПартии ССЫЛКА Документ.ПеремещениеТоваров 
		|			ТОГДА ТаблицаТовары.ДокументПартии.СкладПолучатель 
		|		ИНАЧЕ ТаблицаТовары.ДокументПартии.Склад 
		|	КОНЕЦ КАК Склад,
		|	ЕСТЬNULL(Типовой.Забалансовый, ЛОЖЬ) КАК СчетУчетаБУЗабалансовый
		|ПОМЕСТИТЬ ТаблицаТовары
		|ИЗ
		|	Документ.ПоступлениеДопРасходов.Товары КАК ТаблицаТовары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО ТаблицаТовары.Ссылка = Реквизиты.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Типовой КАК Типовой
		|		ПО ТаблицаТовары.СчетУчетаБУ = Типовой.Ссылка"
		+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	КонецЕсли;
	
	Если Реквизиты.ЕстьОС Тогда 
		НомераТаблиц.Вставить("ВременнаяТаблицаОС", НомераТаблиц.Количество());
		
		ТекстЗапроса = ТекстЗапроса + 
		"ВЫБРАТЬ
		|	ТаблицаОС.Ссылка,
		|	ТаблицаОС.НомерСтроки,
		|	ТаблицаОС.ОсновноеСредство,
		|	1 КАК Количество,
		|	Реквизиты.СтавкаНДС,
		|	ТаблицаОС.СуммаТовара КАК СуммаТовара,
		|	ТаблицаОС.СуммаРаспределения - ВЫБОР
		|		КОГДА Реквизиты.СуммаВключаетНДС
		|			ТОГДА ТаблицаОС.СуммаРаспределенияНДС
		|		ИНАЧЕ 0
		|	КОНЕЦ + ВЫБОР
		|		КОГДА Реквизиты.НДСВключенВСтоимость
		|			ТОГДА ТаблицаОС.СуммаРаспределенияНДС
		|		КОГДА ЕСТЬNULL(Типовой.Забалансовый, ЛОЖЬ)
		|				И НЕ Реквизиты.НДСВключенВСтоимость
		|			ТОГДА ТаблицаОС.СуммаРаспределенияНДС
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Сумма,
		|	ТаблицаОС.СуммаРаспределения - ВЫБОР
		|		КОГДА Реквизиты.СуммаВключаетНДС
		|			ТОГДА ТаблицаОС.СуммаРаспределенияНДС
		|		ИНАЧЕ 0
		|	КОНЕЦ + ВЫБОР
		|		КОГДА Реквизиты.НДСВключенВСтоимость
		|			ТОГДА ТаблицаОС.СуммаРаспределенияНДС
		|		КОГДА ЕСТЬNULL(Типовой.Забалансовый, ЛОЖЬ)
		|				И НЕ Реквизиты.НДСВключенВСтоимость
		|			ТОГДА ТаблицаОС.СуммаРаспределенияНДС
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СуммаВзаиморасчетов,
		|	ТаблицаОС.СуммаРаспределенияНДС КАК СуммаНДС,
		|	ТаблицаОС.СуммаРаспределенияНДС КАК СуммаНДСВзаиморасчетов,
		|	ТаблицаОС.СчетУчетаБУ,
		|	ТаблицаОС.СчетУчетаНУ,
		|	ТаблицаОС.СчетУчетаНДС,
		|	ТаблицаОС.НДСВидОборота,
		|	ТаблицаОС.НДСВидПоступления,
		|	ТаблицаОС.НДСВидПоступления.ПризнакКорректировки КАК КорректировкаНДС,
		|	ТаблицаОС.ДокументПартии,
		|	ВЫБОР
		|		КОГДА &ВедетсяАналитическийУчетОСПоПодразделениям 
		|			ТОГДА ТаблицаОС.ПодразделениеОрганизации
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК ПодразделениеОрганизации,
		|	ВЫБОР
		|		КОГДА &ВедетсяАналитическийУчетОСПоМОЛ
		|			ТОГДА ТаблицаОС.МОЛОрганизации
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК МОЛОрганизации,
		|	ЕСТЬNULL(Типовой.Забалансовый, ЛОЖЬ) КАК СчетУчетаБУЗабалансовый
		|ПОМЕСТИТЬ ТаблицаОС
		|ИЗ
		|	Документ.ПоступлениеДопРасходов.ОС КАК ТаблицаОС
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО ТаблицаОС.Ссылка = Реквизиты.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Типовой КАК Типовой
		|		ПО ТаблицаОС.СчетУчетаБУ = Типовой.Ссылка"
		+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	КонецЕсли;
	
	Если Реквизиты.ЕстьНМА Тогда 
		НомераТаблиц.Вставить("ВременнаяТаблицаНМА", НомераТаблиц.Количество());
		
		ТекстЗапроса = ТекстЗапроса + 
		"ВЫБРАТЬ
		|	ТаблицаНМА.Ссылка,
		|	ТаблицаНМА.НомерСтроки,
		|	ТаблицаНМА.НематериальныйАктив,
		|	1 КАК Количество,
		|	Реквизиты.СтавкаНДС,
		|	ТаблицаНМА.СуммаТовара КАК СуммаТовара,
		|	ТаблицаНМА.СуммаРаспределения - ВЫБОР
		|		КОГДА Реквизиты.СуммаВключаетНДС
		|			ТОГДА ТаблицаНМА.СуммаРаспределенияНДС
		|		ИНАЧЕ 0
		|	КОНЕЦ + ВЫБОР
		|		КОГДА Реквизиты.НДСВключенВСтоимость
		|			ТОГДА ТаблицаНМА.СуммаРаспределенияНДС
		|		КОГДА ЕСТЬNULL(Типовой.Забалансовый, ЛОЖЬ)
		|				И НЕ Реквизиты.НДСВключенВСтоимость
		|			ТОГДА ТаблицаНМА.СуммаРаспределенияНДС
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Сумма,
		|	ТаблицаНМА.СуммаРаспределения - ВЫБОР
		|		КОГДА Реквизиты.СуммаВключаетНДС
		|			ТОГДА ТаблицаНМА.СуммаРаспределенияНДС
		|		ИНАЧЕ 0
		|	КОНЕЦ + ВЫБОР
		|		КОГДА Реквизиты.НДСВключенВСтоимость
		|			ТОГДА ТаблицаНМА.СуммаРаспределенияНДС
		|		КОГДА ЕСТЬNULL(Типовой.Забалансовый, ЛОЖЬ)
		|				И НЕ Реквизиты.НДСВключенВСтоимость
		|			ТОГДА ТаблицаНМА.СуммаРаспределенияНДС
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СуммаВзаиморасчетов,
		|	ТаблицаНМА.СуммаРаспределенияНДС КАК СуммаНДС,
		|	ТаблицаНМА.СуммаРаспределенияНДС КАК СуммаНДСВзаиморасчетов,
		|	ТаблицаНМА.СчетУчетаБУ,
		|	ТаблицаНМА.СчетУчетаНУ,
		|	ТаблицаНМА.СчетУчетаНДС,
		|	ТаблицаНМА.НДСВидОборота,
		|	ТаблицаНМА.НДСВидПоступления,
		|	ТаблицаНМА.НДСВидПоступления.ПризнакКорректировки КАК КорректировкаНДС,
		|	ТаблицаНМА.ДокументПартии,
		|	ЕСТЬNULL(Типовой.Забалансовый, ЛОЖЬ) КАК СчетУчетаБУЗабалансовый
		|ПОМЕСТИТЬ ТаблицаНМА
		|ИЗ
		|	Документ.ПоступлениеДопРасходов.НМА КАК ТаблицаНМА
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО ТаблицаНМА.Ссылка = Реквизиты.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Типовой КАК Типовой
		|		ПО ТаблицаНМА.СчетУчетаБУ = Типовой.Ссылка"
		+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	КонецЕсли;
	
	
	Если Реквизиты.ЕстьУчастникиСовместнойДеятельности Тогда 
		НомераТаблиц.Вставить("ВременнаяТаблицаУчастникиСовместнойДеятельности", НомераТаблиц.Количество());
		
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	ТаблицаУчастникиСовместнойДеятельности.НомерСтроки,
		|	ТаблицаУчастникиСовместнойДеятельности.УчастникСовместнойДеятельности,
		|	ТаблицаУчастникиСовместнойДеятельности.ДоляУчастия
		|ПОМЕСТИТЬ ТаблицаУчастникиСовместнойДеятельности
		|ИЗ
		|	Документ.ПоступлениеДопРасходов.УчастникиСовместнойДеятельности КАК ТаблицаУчастникиСовместнойДеятельности
		|ГДЕ
		|	ТаблицаУчастникиСовместнойДеятельности.Ссылка = &Ссылка"
		+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	КонецЕсли;

	Возврат ТекстЗапроса;

КонецФункции

Процедура ПодготовитьТаблицыДокументаРасчетыВВалюте(Запрос, Реквизиты)
	
	НомераТаблиц = Новый Структура;
	Запрос.Текст = ТекстЗапросаВременныеТаблицыДокументаРасчетыВВалюте(НомераТаблиц, Реквизиты);
	Если НЕ ПустаяСтрока(Запрос.Текст) Тогда
		Результат    = Запрос.ВыполнитьПакет();
	КонецЕсли;
	
	ТекстЗапроса = "";
	Если Реквизиты.ЕстьТовары Тогда
		СуммыТаблицыТовары = Результат[НомераТаблиц["СуммыТаблицыТовары"]].Выгрузить();
		УправлениеВзаиморасчетамиСервер.ПодготовитьТаблицуДокументаРасчетыВВалюте(СуммыТаблицыТовары, Реквизиты);
		Запрос.УстановитьПараметр("СуммыТаблицыТовары", СуммыТаблицыТовары);
		ТекстЗапроса = ТекстЗапроса + ТекстЗапросаРасчетыВВалютеТовары(НомераТаблиц, Реквизиты);
	КонецЕсли;
	
	Если Реквизиты.ЕстьОС Тогда
		СуммыТаблицыОС = Результат[НомераТаблиц["СуммыТаблицыОС"]].Выгрузить();
		УправлениеВзаиморасчетамиСервер.ПодготовитьТаблицуДокументаРасчетыВВалюте(СуммыТаблицыОС, Реквизиты);
		Запрос.УстановитьПараметр("СуммыТаблицыОС", СуммыТаблицыОС);
		ТекстЗапроса = ТекстЗапроса + ТекстЗапросаРасчетыВВалютеОС(НомераТаблиц, Реквизиты);
	КонецЕсли;
	
	Если Реквизиты.ЕстьНМА Тогда
		СуммыТаблицыНМА = Результат[НомераТаблиц["СуммыТаблицыНМА"]].Выгрузить();
		УправлениеВзаиморасчетамиСервер.ПодготовитьТаблицуДокументаРасчетыВВалюте(СуммыТаблицыНМА, Реквизиты);
		Запрос.УстановитьПараметр("СуммыТаблицыНМА", СуммыТаблицыНМА);
		ТекстЗапроса = ТекстЗапроса + ТекстЗапросаРасчетыВВалютеНМА(НомераТаблиц, Реквизиты);
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	Если НЕ ПустаяСтрока(Запрос.Текст) Тогда
		Результат    = Запрос.ВыполнитьПакет();
	КонецЕсли;
	
КонецПроцедуры

Функция ТекстЗапросаВременныеТаблицыДокументаРасчетыВВалюте(НомераТаблиц, Реквизиты)

	ТекстЗапроса = ТекстЗапросаВременныеТаблицыДокумента(НомераТаблиц, Реквизиты);
	
	Если Реквизиты.ЕстьТовары Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПОМЕСТИТЬ ТаблицаТовары", "ПОМЕСТИТЬ ВременнаяТаблицаТовары");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаТовары.Ссылка = &Ссылка", "ТаблицаТовары.Ссылка = &Ссылка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|НомерСтроки");
		НомераТаблиц.Вставить("СуммыТаблицыТовары", НомераТаблиц.Количество());
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	ВременнаяТаблицаТовары.НомерСтроки,
		|	ВременнаяТаблицаТовары.СтавкаНДС,
		|	ВременнаяТаблицаТовары.СуммаВзаиморасчетов,
		|	ВременнаяТаблицаТовары.СуммаНДСВзаиморасчетов,
		|	ВременнаяТаблицаТовары.Сумма,
		|	ВременнаяТаблицаТовары.СуммаНДС
		|ИЗ
		|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары"
		+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	КонецЕсли;
	
	Если Реквизиты.ЕстьОС Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПОМЕСТИТЬ ТаблицаОС", "ПОМЕСТИТЬ ВременнаяТаблицаОС");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаОС.Ссылка = &Ссылка", "ТаблицаОС.Ссылка = &Ссылка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|НомерСтроки");
		НомераТаблиц.Вставить("СуммыТаблицыОС", НомераТаблиц.Количество());
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	ВременнаяТаблицаОС.НомерСтроки,
		|	ВременнаяТаблицаОС.СтавкаНДС,
		|	ВременнаяТаблицаОС.СуммаВзаиморасчетов,
		|	ВременнаяТаблицаОС.СуммаНДСВзаиморасчетов,
		|	ВременнаяТаблицаОС.Сумма,
		|	ВременнаяТаблицаОС.СуммаНДС
		|ИЗ
		|	ВременнаяТаблицаОС КАК ВременнаяТаблицаОС"
		+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	КонецЕсли;
	
	Если Реквизиты.ЕстьНМА Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПОМЕСТИТЬ ТаблицаНМА", "ПОМЕСТИТЬ ВременнаяТаблицаНМА");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаНМА.Ссылка = &Ссылка", "ТаблицаНМА.Ссылка = &Ссылка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|НомерСтроки");
		НомераТаблиц.Вставить("СуммыТаблицыНМА", НомераТаблиц.Количество());
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	ВременнаяТаблицаНМА.НомерСтроки,
		|	ВременнаяТаблицаНМА.СтавкаНДС,
		|	ВременнаяТаблицаНМА.СуммаВзаиморасчетов,
		|	ВременнаяТаблицаНМА.СуммаНДСВзаиморасчетов,
		|	ВременнаяТаблицаНМА.Сумма,
		|	ВременнаяТаблицаНМА.СуммаНДС
		|ИЗ
		|	ВременнаяТаблицаНМА КАК ВременнаяТаблицаНМА"
		+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаРасчетыВВалютеТовары(НомераТаблиц, Реквизиты)

	НомераТаблиц.Вставить("ТаблицаТовары", НомераТаблиц.Количество());
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	СуммыТаблицыТовары.НомерСтроки КАК НомерСтроки,
	|	СуммыТаблицыТовары.СуммаВзаиморасчетов,
	|	СуммыТаблицыТовары.СуммаНДСВзаиморасчетов,
	|	СуммыТаблицыТовары.Сумма,
	|	СуммыТаблицыТовары.СуммаНДС
	|ПОМЕСТИТЬ СуммыТаблицыТовары
	|ИЗ
	|	&СуммыТаблицыТовары КАК СуммыТаблицыТовары
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблицаТовары.Ссылка,
	|	ВременнаяТаблицаТовары.НомерСтроки,
	|	ВременнаяТаблицаТовары.Номенклатура,
	|	ВременнаяТаблицаТовары.Количество,
	|	СуммыТаблицыТовары.СуммаВзаиморасчетов,
	|	СуммыТаблицыТовары.СуммаНДСВзаиморасчетов,
	|	СуммыТаблицыТовары.Сумма,
	|	СуммыТаблицыТовары.СуммаНДС,
	|	ВременнаяТаблицаТовары.СтавкаНДС,
	|	ВременнаяТаблицаТовары.СчетУчетаБУ,
	|	ВременнаяТаблицаТовары.СчетУчетаБУЗабалансовый КАК СчетУчетаБУЗабалансовый,
	|	ВременнаяТаблицаТовары.СчетУчетаНУ,
	|	ВременнаяТаблицаТовары.СчетУчетаНДС,
	|	ВременнаяТаблицаТовары.НДСВидОборота,
	|	ВременнаяТаблицаТовары.НДСВидПоступления,
	|	ВременнаяТаблицаТовары.Склад,
	|	ВременнаяТаблицаТовары.ДокументПартии
	|ПОМЕСТИТЬ ТаблицаТовары
	|ИЗ
	|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ СуммыТаблицыТовары КАК СуммыТаблицыТовары
	|		ПО ВременнаяТаблицаТовары.НомерСтроки = СуммыТаблицыТовары.НомерСтроки";

	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции 

Функция ТекстЗапросаРасчетыВВалютеОС(НомераТаблиц, Реквизиты)

	НомераТаблиц.Вставить("ТаблицаОС", НомераТаблиц.Количество());
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	СуммыТаблицыОС.НомерСтроки КАК НомерСтроки,
	|	СуммыТаблицыОС.СуммаВзаиморасчетов,
	|	СуммыТаблицыОС.СуммаНДСВзаиморасчетов,
	|	СуммыТаблицыОС.Сумма,
	|	СуммыТаблицыОС.СуммаНДС
	|ПОМЕСТИТЬ СуммыТаблицыОС
	|ИЗ
	|	&СуммыТаблицыОС КАК СуммыТаблицыОС
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблицаОС.Ссылка,
	|	ВременнаяТаблицаОС.НомерСтроки,
	|	ВременнаяТаблицаОС.ОсновноеСредство,
	|	ВременнаяТаблицаОС.Количество,
	|	СуммыТаблицыОС.СуммаВзаиморасчетов,
	|	СуммыТаблицыОС.СуммаНДСВзаиморасчетов,
	|	СуммыТаблицыОС.Сумма,
	|	СуммыТаблицыОС.СуммаНДС,
	|	ВременнаяТаблицаОС.СтавкаНДС,
	|	ВременнаяТаблицаОС.СчетУчетаБУ,
	|	ВременнаяТаблицаОС.СчетУчетаБУЗабалансовый КАК СчетУчетаБУЗабалансовый,
	|	ВременнаяТаблицаОС.СчетУчетаНУ,
	|	ВременнаяТаблицаОС.СчетУчетаНДС,
	|	ВременнаяТаблицаОС.НДСВидОборота,
	|	ВременнаяТаблицаОС.НДСВидПоступления,
	|	ВременнаяТаблицаОС.ДокументПартии,
	|	ВременнаяТаблицаОС.ПодразделениеОрганизации,
	|	ВременнаяТаблицаОС.МОЛОрганизации
	|ПОМЕСТИТЬ ТаблицаОС
	|ИЗ
	|	ВременнаяТаблицаОС КАК ВременнаяТаблицаОС
	|		ЛЕВОЕ СОЕДИНЕНИЕ СуммыТаблицыОС КАК СуммыТаблицыОС
	|		ПО ВременнаяТаблицаОС.НомерСтроки = СуммыТаблицыОС.НомерСтроки";

	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции 

Функция ТекстЗапросаРасчетыВВалютеНМА(НомераТаблиц, Реквизиты)

	НомераТаблиц.Вставить("ТаблицаНМА", НомераТаблиц.Количество());
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	СуммыТаблицыНМА.НомерСтроки КАК НомерСтроки,
	|	СуммыТаблицыНМА.СуммаВзаиморасчетов,
	|	СуммыТаблицыНМА.СуммаНДСВзаиморасчетов,
	|	СуммыТаблицыНМА.Сумма,
	|	СуммыТаблицыНМА.СуммаНДС
	|ПОМЕСТИТЬ СуммыТаблицыНМА
	|ИЗ
	|	&СуммыТаблицыНМА КАК СуммыТаблицыНМА
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблицаНМА.Ссылка,
	|	ВременнаяТаблицаНМА.НомерСтроки,
	|	ВременнаяТаблицаНМА.НематериальныйАктив,
	|	ВременнаяТаблицаНМА.Количество,
	|	СуммыТаблицыНМА.СуммаВзаиморасчетов,
	|	СуммыТаблицыНМА.СуммаНДСВзаиморасчетов,
	|	СуммыТаблицыНМА.Сумма,
	|	СуммыТаблицыНМА.СуммаНДС,
	|	ВременнаяТаблицаНМА.СтавкаНДС,
	|	ВременнаяТаблицаНМА.СчетУчетаБУ,
	|	ВременнаяТаблицаНМА.СчетУчетаБУЗабалансовый КАК СчетУчетаБУЗабалансовый,
	|	ВременнаяТаблицаНМА.СчетУчетаНУ,
	|	ВременнаяТаблицаНМА.СчетУчетаНДС,
	|	ВременнаяТаблицаНМА.НДСВидОборота,
	|	ВременнаяТаблицаНМА.НДСВидПоступления,
	|	ВременнаяТаблицаНМА.ДокументПартии
	|ПОМЕСТИТЬ ТаблицаНМА
	|ИЗ
	|	ВременнаяТаблицаНМА КАК ВременнаяТаблицаНМА
	|		ЛЕВОЕ СОЕДИНЕНИЕ СуммыТаблицыНМА КАК СуммыТаблицыНМА
	|		ПО ВременнаяТаблицаНМА.НомерСтроки = СуммыТаблицыНМА.НомерСтроки";

	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции 

Функция ТекстЗапросаЗачетАвансов(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	Если Реквизиты.ВидОперации = Перечисления.ВидыОперацийПоступлениеДопРасходов.ВнутреннийРасход Тогда
		ПараметрыПроведения.Вставить("ЗачетАвансовРеквизиты",        Неопределено);
		ПараметрыПроведения.Вставить("ЗачетАвансовТаблицаДокумента", Неопределено);
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить("ВременнаяТаблицаСуммВзаиморасчетов", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ЗачетАвансовРеквизиты",        НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ЗачетАвансовТаблицаДокумента", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	СУММА(ТаблицаСуммВзаиморасчетов.СуммаВзаиморасчетов) КАК СуммаВзаиморасчетов,
	|	СУММА(ТаблицаСуммВзаиморасчетов.СуммаНДСВзаиморасчетов) КАК СуммаНДСВзаиморасчетов,
	|	СУММА(ТаблицаСуммВзаиморасчетов.Сумма) КАК Сумма,
	|	СУММА(ТаблицаСуммВзаиморасчетов.СуммаНДС) КАК СуммаНДС
	|ПОМЕСТИТЬ ТаблицаСуммВзаиморасчетов
	|ИЗ
	|	(ВЫБРАТЬ
	|		0 КАК СуммаВзаиморасчетов,
	|		0 КАК СуммаНДСВзаиморасчетов,
	|		0 КАК Сумма,
	|		0 КАК СуммаНДС"
	+ ?(Реквизиты.ЕстьТовары, "
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТаблицаТовары.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	|		ТаблицаТовары.СуммаНДСВзаиморасчетов,
	|		ТаблицаТовары.Сумма КАК Сумма,
	|		ТаблицаТовары.СуммаНДС
	|	ИЗ
	|		ТаблицаТовары КАК ТаблицаТовары", "")
	+ ?(Реквизиты.ЕстьОС, "
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТаблицаОС.СуммаВзаиморасчетов,
	|		ТаблицаОС.СуммаНДСВзаиморасчетов,
	|		ТаблицаОС.Сумма,
	|		ТаблицаОС.СуммаНДС
	|	ИЗ
	|		ТаблицаОС КАК ТаблицаОС", "") 
	+ ?(Реквизиты.ЕстьНМА, "
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТаблицаНМА.СуммаВзаиморасчетов,
	|		ТаблицаНМА.СуммаНДСВзаиморасчетов,
	|		ТаблицаНМА.Сумма,
	|		ТаблицаНМА.СуммаНДС
	|	ИЗ
	|		ТаблицаНМА КАК ТаблицаНМА", "") 	+ ") КАК ТаблицаСуммВзаиморасчетов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	|	Реквизиты.ВалютаДокумента КАК ВалютаДокумента,
	|	Реквизиты.ВидУчетаНУ КАК ВидУчетаНУ,
	|	""Поступление"" КАК НаправлениеДвижения,
	|	ЛОЖЬ КАК ЭтоВозврат,
	|	&НеобходимостьОтраженияВНУ КАК НеобходимостьОтраженияВНУ,
	|	&ОпределятьСтоимостьПриобретенияПоКурсуАванса КАК ОпределятьСтоимостьПриобретенияПоКурсуАванса,
	|	Реквизиты.НДСВключенВСтоимость,
	|	Реквизиты.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
	|	Реквизиты.КратностьВзаиморасчетов КАК КратностьВзаиморасчетов
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК ДокументРасчетов,
	|	Реквизиты.СчетУчетаРасчетовСКонтрагентом КАК СчетРасчетов,
	|	Реквизиты.СчетУчетаРасчетовПоАвансам КАК СчетАвансов,
	|	Реквизиты.Контрагент,
	|	Реквизиты.ДоговорКонтрагента,
	|	Реквизиты.ВидДоговора КАК ВидДоговора,
	|	Реквизиты.ВедениеВзаиморасчетов,
	|	Реквизиты.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	&РасчетыВВалюте КАК РасчетыВВалюте,
	|	ВЫБОР
	|		КОГДА Реквизиты.ВедениеВзаиморасчетов = ЗНАЧЕНИЕ(Перечисление.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам)
	|			ТОГДА Реквизиты.Сделка
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Сделка,
	|	ТаблицаСуммВзаиморасчетов.Сумма + ВЫБОР
	|		КОГДА Реквизиты.НДСВключенВСтоимость
	|			ТОГДА 0
	|		ИНАЧЕ ТаблицаСуммВзаиморасчетов.СуммаНДС
	|	КОНЕЦ КАК СуммаРегл,
	|	ТаблицаСуммВзаиморасчетов.СуммаВзаиморасчетов + ВЫБОР
	|		КОГДА Реквизиты.НДСВключенВСтоимость
	|			ТОГДА 0
	|		ИНАЧЕ ТаблицаСуммВзаиморасчетов.СуммаНДСВзаиморасчетов
	|	КОНЕЦ КАК СуммаВзаиморасчетов
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСуммВзаиморасчетов КАК ТаблицаСуммВзаиморасчетов
	|		ПО (ИСТИНА)
	|ГДЕ
	|	ТаблицаСуммВзаиморасчетов.СуммаВзаиморасчетов ЕСТЬ НЕ NULL "
	+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	
	Возврат ТекстЗапроса;
		
КонецФункции

Функция ТекстЗапросаПоступлениеДопРасходов(НомераТаблиц, ПараметрыПроведения, Реквизиты)

	ТекстЗапроса = "";
	Если НЕ Реквизиты.ЕстьТовары Тогда 
		ПараметрыПроведения.Вставить("ТаблицаТовары", Неопределено);
	Иначе 
		НомераТаблиц.Вставить("ТаблицаТовары",	НомераТаблиц.Количество());
		
		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	""Товары"" КАК ИмяСписка,
		|	&СинонимТовары КАК СинонимСписка,
		|	ТаблицаТовары.НомерСтроки,
		|	ТаблицаТовары.Номенклатура,
		|	ТаблицаТовары.Количество КАК Количество,
		|	ТаблицаТовары.Сумма КАК Сумма,
		|	ТаблицаТовары.СуммаНДС,
		|	ТаблицаТовары.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
		|	ТаблицаТовары.СуммаНДСВзаиморасчетов КАК СуммаНДСВзаиморасчетов,
		|	ТаблицаТовары.СуммаНДСВзаиморасчетов КАК СуммаНДСВал,
		|	ТаблицаТовары.СтавкаНДС,
		|	ТаблицаТовары.СчетУчетаБУ,
		|	ТаблицаТовары.СчетУчетаНУ,
		|	ВЫБОР
		|		КОГДА СпособОценкиЗапасовБУ.СпособОценки ЕСТЬ NULL 
		|				ИЛИ СпособОценкиЗапасовБУ.СпособОценки В (ЗНАЧЕНИЕ(Перечисление.СпособыОценки.ПоСредней), ЗНАЧЕНИЕ(Перечисление.СпособыОценки.ПустаяСсылка))
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ВедетсяПартионныйУчет,
		|	ТаблицаТовары.СчетУчетаБУЗабалансовый КАК СчетУчетаБУЗабалансовый,
		|	ТаблицаТовары.ДокументПартии КАК Партия,
		|	ТаблицаТовары.Склад,
		|	&СодержаниеТовары КАК Содержание
		|ИЗ
		|	ТаблицаТовары КАК ТаблицаТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО (ИСТИНА)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СпособОценкиЗапасовБУ КАК СпособОценкиЗапасовБУ
		|		ПО ТаблицаТовары.СчетУчетаБУ = СпособОценкиЗапасовБУ.СчетЗапасов
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТаблицаТовары.НомерСтроки"
		+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	КонецЕсли;
	
	Если НЕ Реквизиты.ЕстьОС Тогда 
		ПараметрыПроведения.Вставить("ТаблицаОС", Неопределено);
	Иначе 
		НомераТаблиц.Вставить("ТаблицаОС", НомераТаблиц.Количество());
		
		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	""ОС"" КАК ИмяСписка,
		|	&СинонимОС КАК СинонимСписка,
		|	ТаблицаОС.НомерСтроки,
		|	ТаблицаОС.ОсновноеСредство,
		|	ТаблицаОС.Количество КАК Количество,
		|	ТаблицаОС.Сумма КАК Сумма,
		|	ТаблицаОС.СуммаНДС,
		|	ТаблицаОС.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
		|	ТаблицаОС.СуммаНДСВзаиморасчетов КАК СуммаНДСВзаиморасчетов,
		|	ТаблицаОС.СуммаНДСВзаиморасчетов КАК СуммаНДСВал,
		|	ТаблицаОС.СтавкаНДС,
		|	ТаблицаОС.СчетУчетаБУ,
		|	ТаблицаОС.СчетУчетаНУ,
		|	ТаблицаОС.СчетУчетаНДС,
		|	ТаблицаОС.НДСВидОборота,
		//|	ТаблицаОС.НДСВидПоступления,
		|	ТаблицаОС.ПодразделениеОрганизации,
		|	ТаблицаОС.МОЛОрганизации,
		|	ТаблицаОС.ДокументПартии КАК Партия,
		|   &ВедетсяАналитическийУчетОСПоПодразделениям КАК ВедетсяАналитическийУчетОСПоПодразделениям,
		|   &ВедетсяАналитическийУчетОСПоМОЛ КАК ВедетсяАналитическийУчетОСПоМОЛ,
		|	&СодержаниеОС КАК Содержание
		|ИЗ
		|	ТаблицаОС КАК ТаблицаОС
		|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО (ИСТИНА)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТаблицаОС.НомерСтроки"
		+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	КонецЕсли;
	
	Если НЕ Реквизиты.ЕстьНМА Тогда 
		ПараметрыПроведения.Вставить("ТаблицаНМА", Неопределено);
	Иначе 
		НомераТаблиц.Вставить("ТаблицаНМА", НомераТаблиц.Количество());
		
		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	""НМА"" КАК ИмяСписка,
		|	&СинонимНМА КАК СинонимСписка,
		|	ТаблицаНМА.НомерСтроки,
		|	ТаблицаНМА.НематериальныйАктив,
		|	ТаблицаНМА.Количество КАК Количество,
		|	ТаблицаНМА.Сумма КАК Сумма,
		|	ТаблицаНМА.СуммаНДС,
		|	ТаблицаНМА.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
		|	ТаблицаНМА.СуммаНДСВзаиморасчетов КАК СуммаНДСВзаиморасчетов,
		|	ТаблицаНМА.СуммаНДСВзаиморасчетов КАК СуммаНДСВал,
		|	ТаблицаНМА.СтавкаНДС,
		|	ТаблицаНМА.СчетУчетаБУ,
		|	ТаблицаНМА.СчетУчетаНУ,
		|	ТаблицаНМА.СчетУчетаНДС,
		|	ТаблицаНМА.НДСВидОборота,
		|	ТаблицаНМА.НДСВидПоступления,
		|	ТаблицаНМА.ДокументПартии КАК Партия,
		|	&СодержаниеНМА КАК Содержание
		|ИЗ
		|	ТаблицаНМА КАК ТаблицаНМА
		|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО (ИСТИНА)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТаблицаНМА.НомерСтроки"
		+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	КонецЕсли;
	
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаНДС(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	ТекстЗапроса = "";
	Если НЕ Реквизиты.УчитыватьНДС 
		ИЛИ Реквизиты.ВидОперации = Перечисления.ВидыОперацийПоступлениеДопРасходов.ПоступлениеОтНерезидента Тогда 
		ПараметрыПроведения.Вставить("ТаблицаНДС", Неопределено);
		Возврат ТекстЗапроса;
	КонецЕсли;
	
	Если Реквизиты.ЕстьТовары Тогда 
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	""ТоварыНДС"" КАК ИмяСписка,
		|	&СинонимТовары КАК СинонимСписка,
		|	ТаблицаТовары.НомерСтроки,
		|	ТаблицаТовары.Номенклатура КАК ТМЗ,
		|	ТаблицаТовары.Сумма - ВЫБОР
		|		КОГДА Реквизиты.НДСВключенВСтоимость
		|			ТОГДА ТаблицаТовары.СуммаНДС
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СуммаБезНДС,
		|	ТаблицаТовары.СуммаНДС КАК УплаченныйНДС,
		|	ТаблицаТовары.СуммаНДС КАК СуммаНДС,
		|	ТаблицаТовары.СуммаНДСВзаиморасчетов КАК СуммаНДСВал,
		|	ТаблицаТовары.СтавкаНДС,
		|	ТаблицаТовары.СчетУчетаНДС КАК Счет,
		|	Реквизиты.СчетУчетаРасчетовСКонтрагентом КАК КорСчет,
		|	ЗНАЧЕНИЕ(Справочник.НалогиСборыОтчисления.НалогНаДобавленнуюСтоимость) КАК Субконто1,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог) КАК Субконто2,
		|	НЕОПРЕДЕЛЕНО КАК Субконто3,
		|	Реквизиты.Контрагент КАК КорСубконто1,
		|	Реквизиты.ДоговорКонтрагента КАК КорСубконто2,
		|	Реквизиты.Ссылка КАК КорСубконто3,
		|	ТаблицаТовары.НДСВидОборота КАК ВидОборота,
		|	ТаблицаТовары.НДСВидПоступления КАК ВидОперацииПоступления,
		|	ТаблицаТовары.НДСВидПоступления.ПризнакКорректировки КАК КорректировкаНДС,
		|   ЗНАЧЕНИЕ(Перечисление.ВидыНДС.НДС) КАК ВидНалогаНДС,
		|	&СодержаниеВыделенНДС КАК Содержание,
		|	Реквизиты.ВидВходящегоДокумента,
		|	Реквизиты.ДатаВходящегоДокумента,
		|	Реквизиты.НомерВходящегоДокумента,
		|	0 КАК Порядок
		|ИЗ
		|	ТаблицаТовары КАК ТаблицаТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО (ИСТИНА)";
	КонецЕсли;
	
	Если Реквизиты.ЕстьОС Тогда 
		Если НЕ ПустаяСтрока(ТекстЗапроса) Тогда 
			ТекстЗапроса = ТекстЗапроса + "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|";
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	""ОСНДС"" КАК ИмяСписка,
		|	&СинонимОС КАК СинонимСписка,
		|	ТаблицаОС.НомерСтроки,
		|	ТаблицаОС.ОсновноеСредство КАК ТМЗ,
		|	ТаблицаОС.Сумма - ВЫБОР
		|		КОГДА Реквизиты.НДСВключенВСтоимость
		|			ТОГДА ТаблицаОС.СуммаНДС
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СуммаБезНДС,
		|	ТаблицаОС.СуммаНДС КАК УплаченныйНДС,
		|	ТаблицаОС.СуммаНДС,
		|	ТаблицаОС.СуммаНДСВзаиморасчетов КАК СуммаНДСВал,
		|	ТаблицаОС.СтавкаНДС,
		|	ТаблицаОС.СчетУчетаНДС КАК Счет,
		|	Реквизиты.СчетУчетаРасчетовСКонтрагентом КАК КорСчет,
		|	ЗНАЧЕНИЕ(Справочник.НалогиСборыОтчисления.НалогНаДобавленнуюСтоимость) КАК Субконто1,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог) КАК Субконто2,
		|	НЕОПРЕДЕЛЕНО КАК Субконто3,
		|	Реквизиты.Контрагент КАК КорСубконто1,
		|	Реквизиты.ДоговорКонтрагента КАК КорСубконто2,
		|	Реквизиты.Ссылка КАК КорСубконто3,
		|	ТаблицаОС.НДСВидОборота КАК ВидОборота,
		|	ТаблицаОС.НДСВидПоступления КАК ВидОперацииПоступления,
		|	ТаблицаОС.НДСВидПоступления.ПризнакКорректировки КАК КорректировкаНДС,
		|   ЗНАЧЕНИЕ(Перечисление.ВидыНДС.НДС) КАК ВидНалогаНДС,
		|	&СодержаниеВыделенНДС КАК Содержание,
		|	Реквизиты.ВидВходящегоДокумента,
		|	Реквизиты.ДатаВходящегоДокумента,
		|	Реквизиты.НомерВходящегоДокумента,
		|	1 КАК Порядок
		|ИЗ
		|	ТаблицаОС КАК ТаблицаОС
		|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО (ИСТИНА)";		
	КонецЕсли;
	
	Если Реквизиты.ЕстьНМА Тогда 
		Если НЕ ПустаяСтрока(ТекстЗапроса) Тогда 
			ТекстЗапроса = ТекстЗапроса + "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|";
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	""НМАНДС"" КАК ИмяСписка,
		|	&СинонимНМА КАК СинонимСписка,
		|	ТаблицаНМА.НомерСтроки,
		|	ТаблицаНМА.НематериальныйАктив КАК ТМЗ,
		|	ТаблицаНМА.Сумма - ВЫБОР
		|		КОГДА Реквизиты.НДСВключенВСтоимость
		|			ТОГДА ТаблицаНМА.СуммаНДС
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СуммаБезНДС,
		|	ТаблицаНМА.СуммаНДС КАК УплаченныйНДС,
		|	ТаблицаНМА.СуммаНДС,
		|	ТаблицаНМА.СуммаНДСВзаиморасчетов КАК СуммаНДСВал,
		|	ТаблицаНМА.СтавкаНДС,
		|	ТаблицаНМА.СчетУчетаНДС КАК Счет,
		|	Реквизиты.СчетУчетаРасчетовСКонтрагентом КАК КорСчет,
		|	ЗНАЧЕНИЕ(Справочник.НалогиСборыОтчисления.НалогНаДобавленнуюСтоимость) КАК Субконто1,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог) КАК Субконто2,
		|	НЕОПРЕДЕЛЕНО КАК Субконто3,
		|	Реквизиты.Контрагент КАК КорСубконто1,
		|	Реквизиты.ДоговорКонтрагента КАК КорСубконто2,
		|	Реквизиты.Ссылка КАК КорСубконто3,
		|	ТаблицаНМА.НДСВидОборота КАК ВидОборота,
		|	ТаблицаНМА.НДСВидПоступления КАК ВидОперацииПоступления,
		|	ТаблицаНМА.НДСВидПоступления.ПризнакКорректировки КАК КорректировкаНДС,
		|   ЗНАЧЕНИЕ(Перечисление.ВидыНДС.НДС) КАК ВидНалогаНДС,
		|	&СодержаниеВыделенНДС КАК Содержание,
		|	Реквизиты.ВидВходящегоДокумента,
		|	Реквизиты.ДатаВходящегоДокумента,
		|	Реквизиты.НомерВходящегоДокумента,
		|	2 КАК Порядок
		|ИЗ
		|	ТаблицаНМА КАК ТаблицаНМА
		|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО (ИСТИНА)";		
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ТекстЗапроса) Тогда 
		НомераТаблиц.Вставить("ТаблицаНДС",	НомераТаблиц.Количество());

		ТекстЗапроса = ТекстЗапроса + "
		|УПОРЯДОЧИТЬ ПО
		|	Порядок,
		|	НомерСтроки" + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	Иначе 
		ПараметрыПроведения.Вставить("ТаблицаНДС", Неопределено);
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаУчастникиСовместнойДеятельности(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	ТекстЗапроса = "";
	
	Если Реквизиты.ЕстьУчастникиСовместнойДеятельности Тогда 
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ТаблицаУчастникиСовместнойДеятельности.НомерСтроки,
		|	ТаблицаУчастникиСовместнойДеятельности.УчастникСовместнойДеятельности КАК УчастникСовместнойДеятельности,
		|	ТаблицаУчастникиСовместнойДеятельности.ДоляУчастия КАК ДоляУчастия
		|ИЗ
		|	ТаблицаУчастникиСовместнойДеятельности КАК ТаблицаУчастникиСовместнойДеятельности
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки" + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
		НомераТаблиц.Вставить("ТаблицаУчастникиСовместнойДеятельности",	НомераТаблиц.Количество());
	Иначе
		ПараметрыПроведения.Вставить("ТаблицаУчастникиСовместнойДеятельности", Неопределено);
		Возврат ТекстЗапроса;
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Интерфейс для работы с подсистемой Печать.

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Доп. расходы
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ДопРасходыНакладная";
	КомандаПечати.Представление = НСтр("ru = 'Доп. расходы'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБККлиент.ВыполнитьКомандуПечати";
	КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.Порядок = 50;
	
	Если ПравоДоступа("Использование", Метаданные.Обработки.ПечатьРеглСуммДокументовВВалюте) Тогда
		// Справка-расчет "Регл. суммы документа в валюте"
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.МенеджерПечати = "Обработка.ПечатьРеглСуммДокументовВВалюте";
		КомандаПечати.Идентификатор = "РеглСуммыДокументаВВалюте";
		КомандаПечати.Представление = НСтр("ru = 'Справка-расчет ""Регл. суммы документа в валюте""'");
		КомандаПечати.Обработчик    = "УправлениеПечатьюБККлиент.ВыполнитьКомандуПечати";
		КомандаПечати.ФункциональныеОпции = "ИспользоватьВалютныйУчет";
		КомандаПечати.ДополнительныеПараметры.Вставить("НеВыводитьВКомплекте",Истина);
		КомандаПечати.Порядок = 51;
	КонецЕсли;
	
	// Настраиваемый комплект документов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ДопРасходыНакладная";
	КомандаПечати.Представление = НСтр("ru = 'Настраиваемый комплект документов'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.ЗаголовокФормы = НСтр("ru = 'Настраиваемый комплект'");
	КомандаПечати.ДополнитьКомплектВнешнимиПечатнымиФормами = Истина;
	КомандаПечати.Порядок = 75;
	
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	// Печать Доп. расходы
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ДопРасходыНакладная") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ДопРасходыНакладная",
			НСтр("ru = 'Доп. расходы'"),
			ПечатьДопРасходов(МассивОбъектов, ОбъектыПечати, ПараметрыВывода.КодЯзыка),
			,
			"Документ.ПоступлениеДопРасходов.ПФ_MXL_Накладная");  
						
		ОписаниеПечатнойФормы = КоллекцияПечатныхФорм.Найти(ВРег("ДопРасходыНакладная"), "ИмяВРЕГ");
		Если ОписаниеПечатнойФормы <> Неопределено Тогда
			ОписаниеПечатнойФормы.ДоступенВыводНаДругихЯзыках = Истина;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Подготовка табличных печатных документов.

// Функция формирует табличный документ с печатной формой накладной,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьДопРасходов(МассивОбъектов, ОбъектыПечати, КодЯзыка=Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	КодОС           = Ложь;
	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ВыводитьКоды    = Истина;
		Колонка         = "Артикул";
		ТекстКодАртикул = "Артикул";
		ТекстКодАртикулОС = "";		
	ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
		ВыводитьКоды    = Истина;
		Колонка         = "Код";
		ТекстКодАртикул = "Код";
		КодОС           = Истина;
	Иначе
		ВыводитьКоды    = Ложь;
		Колонка         = "";
		ТекстКодАртикул = "Код";
		ТекстКодАртикулОС = "Код";
	КонецЕсли;

	Если ВыводитьКоды Тогда
		ОбластьШапкиРаспределения  = "ШапкаРаспределенияСКодом";
		ОбластьСтрокиРаспределения = "СтрокаРаспределенияСКодом";
	Иначе
		ОбластьШапкиРаспределения  = "ШапкаРаспределения";
		ОбластьСтрокиРаспределения = "СтрокаРаспределения";
	КонецЕсли;

	Запрос = Новый Запрос;
	ЗапросРаспределения = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	ЗапросРаспределения.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПоступлениеДопРасходов.Номер,
	|	ПоступлениеДопРасходов.Дата,
	|	ПоступлениеДопРасходов.ДоговорКонтрагента,
	|	ПоступлениеДопРасходов.Контрагент,
	|	ПоступлениеДопРасходов.Организация,
	|	ПоступлениеДопРасходов.Содержание,
	|	МАКСИМУМ(ПоступлениеДопРасходов.СуммаДокумента) КАК СуммаДокумента,
	|	ПоступлениеДопРасходов.ВалютаДокумента,
	|	ПоступлениеДопРасходов.УчитыватьНДС,
	|	ПоступлениеДопРасходов.СуммаВключаетНДС,
	|	ЕСТЬNULL(МАКСИМУМ(ПоступлениеДопРасходов.СуммаНДС), 0) КАК СуммаНДС,
	|	ЕСТЬNULL(СУММА(ВложенныйЗапрос.ТоварыСумма), 0) КАК ТоварыСумма,
	|	ЕСТЬNULL(СУММА(ВложенныйЗапрос.ТоварыСуммаНДС), 0) КАК ТоварыСуммаНДС,
	|	ПоступлениеДопРасходов.СтруктурноеПодразделение,
	|	ПоступлениеДопРасходов.Ссылка,
	|	ПоступлениеДопРасходов.КурсВзаиморасчетов,
	|	ПоступлениеДопРасходов.КратностьВзаиморасчетов
	|ИЗ
	|	Документ.ПоступлениеДопРасходов КАК ПоступлениеДопРасходов,
	|	(ВЫБРАТЬ
	|		ЕСТЬNULL(СУММА(ПоступлениеДопРасходовТовары.Сумма), 0) КАК ТоварыСумма,
	|		ЕСТЬNULL(СУММА(ПоступлениеДопРасходовТовары.СуммаНДС), 0) КАК ТоварыСуммаНДС
	|	ИЗ
	|		Документ.ПоступлениеДопРасходов.Товары КАК ПоступлениеДопРасходовТовары
	|	ГДЕ
	|		ПоступлениеДопРасходовТовары.Ссылка В(&МассивОбъектов)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЕСТЬNULL(СУММА(ПоступлениеДопРасходовОС.Сумма), 0),
	|		ЕСТЬNULL(СУММА(ПоступлениеДопРасходовОС.СуммаНДС), 0)
	|	ИЗ
	|		Документ.ПоступлениеДопРасходов.ОС КАК ПоступлениеДопРасходовОС
	|	ГДЕ
	|		ПоступлениеДопРасходовОС.Ссылка В(&МассивОбъектов)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЕСТЬNULL(СУММА(ПоступлениеДопРасходовНМА.Сумма), 0),
	|		ЕСТЬNULL(СУММА(ПоступлениеДопРасходовНМА.СуммаНДС), 0)
	|	ИЗ
	|		Документ.ПоступлениеДопРасходов.НМА КАК ПоступлениеДопРасходовНМА
	|	ГДЕ
	|		ПоступлениеДопРасходовНМА.Ссылка В(&МассивОбъектов)) КАК ВложенныйЗапрос
	|ГДЕ
	|	ПоступлениеДопРасходов.Ссылка В(&МассивОбъектов)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПоступлениеДопРасходов.СуммаВключаетНДС,
	|	ПоступлениеДопРасходов.УчитыватьНДС,
	|	ПоступлениеДопРасходов.ВалютаДокумента,
	|	ПоступлениеДопРасходов.Содержание,
	|	ПоступлениеДопРасходов.Организация,
	|	ПоступлениеДопРасходов.Контрагент,
	|	ПоступлениеДопРасходов.ДоговорКонтрагента,
	|	ПоступлениеДопРасходов.Дата,
	|	ПоступлениеДопРасходов.Номер,
	|	ПоступлениеДопРасходов.СтруктурноеПодразделение,
	|	ПоступлениеДопРасходов.Ссылка,
	|	ПоступлениеДопРасходов.КурсВзаиморасчетов,
	|	ПоступлениеДопРасходов.КратностьВзаиморасчетов";
	
	ЗапросРаспределения.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПоступлениеДопРасходовТовары.Номенклатура КАК Номенклатура,
	|	ПоступлениеДопРасходовТовары.Номенклатура."+ ТекстКодАртикул + " КАК КодАртикул,
	|	ЕСТЬNULL(СУММА(ПоступлениеДопРасходовТовары.Количество), 0) КАК Количество,
	|	ПоступлениеДопРасходовТовары.НомерСтроки КАК НомерСтроки,
	|	ЕСТЬNULL(СУММА(ПоступлениеДопРасходовТовары.Сумма), 0) КАК ДопСумма,
	|	ЕСТЬNULL(СУММА(ПоступлениеДопРасходовТовары.СуммаНДС), 0) КАК ДопСуммаНДС,
	|	ПоступлениеДопРасходовТовары.СчетУчетаБУ КАК СчетУчетаБУ,
	|	0 КАК Метка,
	|	ЕСТЬNULL(СУММА(ПоступлениеДопРасходовТовары.СуммаРаспределения), 0) КАК СуммаРаспределения,
	|	ЕСТЬNULL(СУММА(ПоступлениеДопРасходовТовары.СуммаРаспределенияНДС), 0) КАК СуммаРаспределенияНДС,
	|	ПоступлениеДопРасходовТовары.Ссылка
	|ИЗ
	|	Документ.ПоступлениеДопРасходов.Товары КАК ПоступлениеДопРасходовТовары
	|ГДЕ
	|	ПоступлениеДопРасходовТовары.Ссылка В(&МассивОбъектов)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПоступлениеДопРасходовТовары.Номенклатура,
	|	ПоступлениеДопРасходовТовары.Номенклатура." + ТекстКодАртикул + ",
	|	ПоступлениеДопРасходовТовары.НомерСтроки,
	|	ПоступлениеДопРасходовТовары.СчетУчетаБУ,
	|	ПоступлениеДопРасходовТовары.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПоступлениеДопРасходовОС.ОсновноеСредство,
	|	" + ?(КодОС,"ПоступлениеДопРасходовОС.ОсновноеСредство.Код", """""") + ",  
	|	СУММА(0),
	|	ПоступлениеДопРасходовОС.НомерСтроки,
	|	ЕСТЬNULL(СУММА(ПоступлениеДопРасходовОС.Сумма), 0),
	|	ЕСТЬNULL(СУММА(ПоступлениеДопРасходовОС.СуммаНДС), 0),
	|	ПоступлениеДопРасходовОС.СчетУчетаБУ,
	|	1,
	|	ЕСТЬNULL(Сумма(ПоступлениеДопРасходовОС.СуммаРаспределения), 0),
	|	ЕСТЬNULL(Сумма(ПоступлениеДопРасходовОС.СуммаРаспределенияНДС), 0),
	|	ПоступлениеДопРасходовОС.Ссылка
	|ИЗ
	|	Документ.ПоступлениеДопРасходов.ОС КАК ПоступлениеДопРасходовОС
	|ГДЕ
	|	ПоступлениеДопРасходовОС.Ссылка В(&МассивОбъектов)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПоступлениеДопРасходовОС.ОсновноеСредство,
	|	" + ?(КодОС,"ПоступлениеДопРасходовОС.ОсновноеСредство.Код", """""") + ",  
	|	ПоступлениеДопРасходовОС.НомерСтроки,
	|	ПоступлениеДопРасходовОС.СчетУчетаБУ,
	|	ПоступлениеДопРасходовОС.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПоступлениеДопРасходовНМА.НематериальныйАктив,
	|	" + ?(КодОС,"ПоступлениеДопРасходовНМА.НематериальныйАктив.Код", """""") + ",  
	|	СУММА(0),
	|	ПоступлениеДопРасходовНМА.НомерСтроки,
	|	ЕСТЬNULL(СУММА(ПоступлениеДопРасходовНМА.Сумма), 0),
	|	ЕСТЬNULL(СУММА(ПоступлениеДопРасходовНМА.СуммаНДС), 0),
	|	ПоступлениеДопРасходовНМА.СчетУчетаБУ,
	|	2,
	|	ЕСТЬNULL(Сумма(ПоступлениеДопРасходовНМА.СуммаРаспределения), 0),
	|	ЕСТЬNULL(Сумма(ПоступлениеДопРасходовНМА.СуммаРаспределенияНДС), 0),
	|	ПоступлениеДопРасходовНМА.Ссылка
	|ИЗ
	|	Документ.ПоступлениеДопРасходов.НМА КАК ПоступлениеДопРасходовНМА
	|ГДЕ
	|	ПоступлениеДопРасходовНМА.Ссылка В(&МассивОбъектов)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПоступлениеДопРасходовНМА.НематериальныйАктив,
	|	" + ?(КодОС,"ПоступлениеДопРасходовНМА.НематериальныйАктив.Код", """""") + ",  
	|	ПоступлениеДопРасходовНМА.НомерСтроки,
	|	ПоступлениеДопРасходовНМА.СчетУчетаБУ,
	|	ПоступлениеДопРасходовНМА.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Метка,
	|	НомерСтроки
	|ИТОГИ
	|	СУММА(ДопСумма),
	|	СУММА(ДопСуммаНДС),
	|	СУММА(СуммаРаспределения),
	|	СУММА(СуммаРаспределенияНДС)
	|ПО
	|	Ссылка";

	Шапка = Запрос.Выполнить().Выбрать();
	
	ТаблицаРаспределения = ЗапросРаспределения.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ПоступлениеДопРасходов.ПФ_MXL_Накладная", КодЯзыка);
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.КлючПараметровПечати = "ПоступлениеДопРасходов_Накладная";

	Пока Шапка.Следующий() Цикл
		
		Если ТабДокумент.ВысотаТаблицы > 0 Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
		
		СтруктурнаяЕдиницаОрганизация = ОбщегоНазначенияБК.ПолучитьСтруктурнуюЕдиницу(Шапка.Организация, Шапка.СтруктурноеПодразделение);
		ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
		
		// Выводим шапку накладной
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		ОбластьМакета.Параметры.ТекстЗаголовка = РаботаСДиалогами.СформироватьЗаголовокДокумента(Шапка.Ссылка, НСтр("ru='Доп. расходы'", КодЯзыка),,,,КодЯзыка);
		ТабДокумент.Вывести(ОбластьМакета);
		
		ПредставлениеОрганизации = ОбщегоНазначенияБКВызовСервера.ОписаниеОрганизации(ОбщегоНазначенияБКВызовСервера.СведенияОЮрФизЛице(СтруктурнаяЕдиницаОрганизация, Шапка.Дата), "ПолноеНаименование,");
		ПредставлениеКонтрагента = ОбщегоНазначенияБКВызовСервера.ОписаниеОрганизации(ОбщегоНазначенияБКВызовСервера.СведенияОЮрФизЛице(Шапка.Контрагент, Шапка.Дата), "ПолноеНаименование,");
		
		ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
		ОбластьМакета.Параметры.ПредставлениеПоставщика = ПредставлениеКонтрагента;
		ОбластьМакета.Параметры.Поставщик = Шапка.Контрагент;
		ТабДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
		ОбластьМакета.Параметры.ПредставлениеПолучателя = ПредставлениеОрганизации;
		ОбластьМакета.Параметры.Получатель = СтруктурнаяЕдиницаОрганизация;
		ТабДокумент.Вывести(ОбластьМакета);
		
		// Вывести табличную часть
		ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы");
		ТабДокумент.Вывести(ОбластьМакета);
		
		Если Не Шапка.СуммаВключаетНДС Тогда
			СуммаВсего = Шапка.СуммаДокумента - Шапка.СуммаНДС - Шапка.ТоварыСуммаНДС;
		Иначе
			СуммаВсего = Шапка.СуммаДокумента;
		КонецЕсли;                       
		
		ОбластьМакета = Макет.ПолучитьОбласть("Строка");
		ОбластьМакета.Параметры.НомерСтроки = 1;
		ОбластьМакета.Параметры.Товар       = Шапка.Содержание;
		ОбластьМакета.Параметры.Цена        = СуммаВсего;
		ОбластьМакета.Параметры.Количество  = 1;
		ОбластьМакета.Параметры.Сумма       = СуммаВсего;
		ТабДокумент.Вывести(ОбластьМакета);
		
		// Вывести Итого
		ОбластьМакета = Макет.ПолучитьОбласть("Итого");
		ОбластьМакета.Параметры.Всего = ОбщегоНазначенияБКВызовСервера.ФорматСумм(СуммаВсего);
		ТабДокумент.Вывести(ОбластьМакета);
		
		// Вывести ИтогоНДС
		Если Шапка.УчитыватьНДС Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("ИтогоНДС");
			ОбластьМакета.Параметры.ВсегоНДС = ОбщегоНазначенияБКВызовСервера.ФорматСумм(Шапка.СуммаНДС + Шапка.ТоварыСуммаНДС);
			ОбластьМакета.Параметры.НДС      = ?(Шапка.СуммаВключаетНДС, НСтр("ru='В том числе НДС:'",КодЯзыка), НСтр("ru='Сумма НДС:'",КодЯзыка));
			ТабДокумент.Вывести(ОбластьМакета);
		КонецЕсли;
		
		// Вывести Сумму прописью
		ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
		СуммаКПрописи = СуммаВсего + ?(Шапка.СуммаВключаетНДС, 0, Шапка.СуммаНДС + Шапка.ТоварыСуммаНДС);
		ОбластьМакета.Параметры.ИтоговаяСтрока = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Всего наименований 1, на сумму %1'",КодЯзыка),
														ОбщегоНазначенияБКВызовСервера.ФорматСумм(СуммаКПрописи, Шапка.ВалютаДокумента));
		ОбластьМакета.Параметры.СуммаПрописью  = ОбщегоНазначенияБКВызовСервера.СформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента, КодЯзыка);
		
		ТабДокумент.Вывести(ОбластьМакета);
		
		// Вывести подписи
		ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ТабДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть(ОбластьШапкиРаспределения);
		
		Если ВыводитьКоды Тогда
			ОбластьМакета.Параметры.Колонка = Колонка;
		КонецЕсли;
		
		Если Шапка.ВалютаДокумента <> ВалютаРегламентированногоУчета Тогда
			ТекстВалюты = "(" + Шапка.ВалютаДокумента.Наименование + ")";
		Иначе
			ТекстВалюты = "";
		КонецЕсли;
		
		ОбластьМакета.Параметры.Валюта = ТекстВалюты;	
		ТабДокумент.Вывести(ОбластьМакета);
		ДопСуммаВсего = 0;
		СуммаРаспределенияВсего = 0;
		СуммаВсего = 0;
		ДопСумма   = 0;
		НомерПоПорядку     = 0;       
		СуммаРаспределения = 0;
		//в случае если валюта документа не равна валюте регламентированного учета
		СуммаВсегоРегл = 0;
		СуммаРаспределенияВсегоРегл = 0;
		ДопСуммаВсегоРегл = 0;
		СуммаРаспределенияРегл = 0;
		ДопСуммаРегл = 0;
		
		ТаблицаРаспределения.Сбросить();
		
		Если ТаблицаРаспределения.НайтиСледующий(Шапка.Ссылка) Тогда
			ВыборкаСтрокТовары = ТаблицаРаспределения.Выбрать();
		Иначе
			ВыборкаСтрокТовары = Неопределено;
		КонецЕсли;
	
		Если НЕ ВыборкаСтрокТовары = Неопределено Тогда
			
			Пока ВыборкаСтрокТовары.Следующий() Цикл
				
				ОбластьМакета = Макет.ПолучитьОбласть(ОбластьСтрокиРаспределения);		
				ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТовары);
				ОбластьМакета.Параметры.Товар = ВыборкаСтрокТовары.Номенклатура.НаименованиеПолное;
				
				Если ВыводитьКоды Тогда
					ОбластьМакета.Параметры.КодАртикул = ВыборкаСтрокТовары.КодАртикул;
				КонецЕсли;  
				
				Если Шапка.УчитыватьНДС и Шапка.СуммаВключаетНДС ТОгда
					ДопСумма 		   = ВыборкаСтрокТовары.ДопСумма - ВыборкаСтрокТовары.ДопСуммаНДС;
					СуммаРаспределения = ВыборкаСтрокТовары.СуммаРаспределения - ВыборкаСтрокТовары.СуммаРаспределенияНДС;
				Иначе
					ДопСумма           = ВыборкаСтрокТовары.ДопСумма;
					СуммаРаспределения = ВыборкаСтрокТовары.СуммаРаспределения;
				КонецЕсли;      		
				
				ОбластьМакета.Параметры.СуммаРаспределения  = СуммаРаспределения - ДопСумма;
				ОбластьМакета.Параметры.ДопСумма 			= ДопСумма;
				ОбластьМакета.Параметры.Сумма 			    = СуммаРаспределения;
				ОбластьМакета.Параметры.НомерСтроки = НомерПоПорядку + 1;
				ТабДокумент.Вывести(ОбластьМакета);
				Если Шапка.ВалютаДокумента <> ВалютаРегламентированногоУчета Тогда
					ОбластьМакетаРегл  = Макет.ПолучитьОбласть("СтрокаРаспределенияРегл");
					ОбластьМакетаРегл.Параметры.ВалютаРегл = ВалютаРегламентированногоУчета;
					ДанныеОВалюте   	= ОбщегоНазначенияБК.ПолучитьКурсВалюты(ВалютаРегламентированногоУчета, Шапка.Дата);	
					СуммаРаспределенияРегл = ОбщегоНазначенияБККлиентСервер.ПересчитатьИзВалютыВВалюту(СуммаРаспределения, Шапка.ВалютаДокумента, ВалютаРегламентированногоУчета,
													Шапка.КурсВзаиморасчетов,      ДанныеОВалюте.Курс, 
													Шапка.КратностьВзаиморасчетов, ДанныеОВалюте.Кратность) ;
					СуммаРаспределенияРегл = ОбщегоНазначенияБККлиентСервер.ПересчитатьИзВалютыВВалюту(СуммаРаспределения, Шапка.ВалютаДокумента, ВалютаРегламентированногоУчета,
													Шапка.КурсВзаиморасчетов,      ДанныеОВалюте.Курс, 
													Шапка.КратностьВзаиморасчетов, ДанныеОВалюте.Кратность) ;
					ДопСуммаРегл =  ОбщегоНазначенияБККлиентСервер.ПересчитатьИзВалютыВВалюту(ДопСумма, Шапка.ВалютаДокумента, ВалютаРегламентированногоУчета,
													Шапка.КурсВзаиморасчетов,      ДанныеОВалюте.Курс, 
													Шапка.КратностьВзаиморасчетов, ДанныеОВалюте.Кратность) ;	
					ОбластьМакетаРегл.Параметры.СуммаРаспределенияРегл = СуммаРаспределенияРегл - ДопСуммаРегл;	
					ОбластьМакетаРегл.Параметры.суммаРегл    = СуммаРаспределенияРегл;	
					ОбластьМакетаРегл.Параметры.ДопСуммаРегл = ДопСуммаРегл;	
					
					ДопСуммаВсегоРегл = ДопСуммаВсегоРегл + ДопСуммаРегл;
					СуммаВсегоРегл = СуммаВсегоРегл + СуммаРаспределенияРегл;
					СуммаРаспределенияВсегоРегл = СуммаВсегоРегл - ДопСуммаВсегоРегл;	
					ТабДокумент.Вывести(ОбластьМакетаРегл);
				КонецЕсли; 	   
				
				ДопСуммаВсего = ДопСуммаВсего + ДопСумма;
				СуммаВсего = СуммаВсего + СуммаРаспределения;
				СуммаРаспределенияВсего = СуммаВсего - ДопСуммаВсего;	
				НомерПоПорядку = НомерПоПорядку + 1;
				ДопСумма   = 0;
				СуммаРаспределения = 0;
			КонецЦикла;
		КонецЕсли;
		
		ОбластьМакета = Макет.ПолучитьОбласть("ИтогоРаспределения");
		ОбластьМакета.Параметры.Валюта = ТекстВалюты;	
		ОбластьМакета.Параметры.ДопСуммаВсего           = ДопСуммаВсего;
		ОбластьМакета.Параметры.СуммаВсего              = СуммаВсего;
		ОбластьМакета.Параметры.СуммаРаспределенияВсего = СуммаРаспределенияВсего;
		ТабДокумент.Вывести(ОбластьМакета);
		
		Если Шапка.ВалютаДокумента <> ВалютаРегламентированногоУчета Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("ИтогоРаспределенияРегл");
			ОбластьМакета.Параметры.ВалютаРегл                  = ВалютаРегламентированногоУчета;
			ОбластьМакета.Параметры.ДопСуммаВсегоРегл           = ДопСуммаВсегоРегл;
			ОбластьМакета.Параметры.СуммаВсегоРегл              = СуммаВсегоРегл;
			ОбластьМакета.Параметры.СуммаРаспределенияВсегоРегл = СуммаРаспределенияВсегоРегл;
			ТабДокумент.Вывести(ОбластьМакета);  
		КонецЕсли;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
		
	КонецЦикла;
	
	Возврат ТабДокумент;

КонецФункции

Функция ПодготовитьТекстЗапросаДляПечатиСправкиРасчетаРеглСуммыДокументовВВалюте(НомераТаблиц) Экспорт
	
	НомераТаблиц.Вставить("ВТ_ТаблицаПоШапкеДокумента",                                НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ТаблицаРеквизитов",                                         НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВТ_ПоДокументамЗачетнныхАвансов",                           НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ТаблицаПредоплат",                                          НомераТаблиц.Количество());
	НомераТаблиц.Вставить("Уничтожение_ВТ_ПоДокументамЗачетнныхАвансов",               НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ТаблицаСумм",                                               НомераТаблиц.Количество());
	НомераТаблиц.Вставить("Уничтожение_ВТ_ТаблицаПоШапкеДокумента",                    НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДанныеОбрабатываемогоДокумента.Ссылка КАК Ссылка,
	|	ДанныеОбрабатываемогоДокумента.Дата КАК Дата,
	|	ДанныеОбрабатываемогоДокумента.Проведен КАК Проведен,
	|	ДанныеОбрабатываемогоДокумента.ВалютаДокумента КАК ВалютаДокумента,
	|	ДанныеОбрабатываемогоДокумента.Организация КАК Организация,
	|	ДанныеОбрабатываемогоДокумента.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	|	ДанныеОбрабатываемогоДокумента.Контрагент КАК Контрагент,
	|	ДанныеОбрабатываемогоДокумента.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ДанныеОбрабатываемогоДокумента.СчетУчетаРасчетовСКонтрагентом КАК СчетУчетаРасчетовСКонтрагентом,
	|	ДанныеОбрабатываемогоДокумента.СчетУчетаРасчетовПоАвансам КАК СчетУчетаРасчетовПоАвансам,
	|	ДанныеОбрабатываемогоДокумента.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
	|	ДанныеОбрабатываемогоДокумента.СтавкаНДС КАК СтавкаНДС,
	|	ВЫБОР
	|		КОГДА ДанныеОбрабатываемогоДокумента.КратностьВзаиморасчетов = 0
	|			ТОГДА 1
	|		ИНАЧЕ ДанныеОбрабатываемогоДокумента.КратностьВзаиморасчетов
	|	КОНЕЦ КАК КратностьВзаиморасчетов,
	|	ДанныеОбрабатываемогоДокумента.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
	|	ДанныеОбрабатываемогоДокумента.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
	|	ДанныеОбрабатываемогоДокумента.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	ДанныеОбрабатываемогоДокумента.УчитыватьНДС КАК УчитыватьНДС,
	|	ВЫБОР
	|		КОГДА ДанныеОбрабатываемогоДокумента.УчитыватьНДС И ДанныеОбрабатываемогоДокумента.СуммаВключаетНДС
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК УчНДС
	|ПОМЕСТИТЬ ВТ_ТаблицаПоШапкеДокумента
	|ИЗ
	|	Документ.ПоступлениеДопРасходов КАК ДанныеОбрабатываемогоДокумента
	|ГДЕ
	|	ДанныеОбрабатываемогоДокумента.Ссылка В(&МассивОбъектов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаПоШапкеДокумента.Ссылка КАК Ссылка,
	|	ВТ_ТаблицаПоШапкеДокумента.Дата КАК Дата,
	|	ВТ_ТаблицаПоШапкеДокумента.Проведен КАК Проведен,
	|	ВТ_ТаблицаПоШапкеДокумента.ВалютаДокумента КАК ВалютаДокумента,
	|	ВТ_ТаблицаПоШапкеДокумента.Организация КАК Организация,
	|	ВТ_ТаблицаПоШапкеДокумента.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	|	ВТ_ТаблицаПоШапкеДокумента.Контрагент КАК Контрагент,
	|	ВТ_ТаблицаПоШапкеДокумента.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ВТ_ТаблицаПоШапкеДокумента.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
	|	ВТ_ТаблицаПоШапкеДокумента.КратностьВзаиморасчетов КАК КратностьВзаиморасчетов,
	|	ВТ_ТаблицаПоШапкеДокумента.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
	|	ВТ_ТаблицаПоШапкеДокумента.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
	|	ВТ_ТаблицаПоШапкеДокумента.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	ВТ_ТаблицаПоШапкеДокумента.УчитыватьНДС КАК УчитыватьНДС,
	|	ВТ_ТаблицаПоШапкеДокумента.СтавкаНДС КАК СтавкаНДС,
	|	0 КАК ВсегоВал,
	|	0 КАК НДСВал
	|ИЗ
	|	ВТ_ТаблицаПоШапкеДокумента КАК ВТ_ТаблицаПоШапкеДокумента
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Типовой.Регистратор КАК Ссылка,
	|	Типовой.Сумма КАК СуммаПредоплатыРегл,
	|	Типовой.ВалютнаяСуммаДт КАК СуммаПредоплатыВал,
	|	ТиповойСубконто.Значение КАК Документ,
	|	ПРЕДСТАВЛЕНИЕ(ТиповойСубконто.Значение) КАК ДокументПредоплатыПредставление,
	|	ВТ_ТаблицаПоШапкеДокумента.Организация КАК Организация,
	|	ВТ_ТаблицаПоШапкеДокумента.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	|	ВТ_ТаблицаПоШапкеДокумента.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
	|	ВТ_ТаблицаПоШапкеДокумента.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента
	|ПОМЕСТИТЬ ПоДокументамЗачетнныхАвансовДоПолученияНомераИДатыВходящегоДокумента
	|ИЗ
	|	РегистрБухгалтерии.Типовой КАК Типовой
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ТаблицаПоШапкеДокумента КАК ВТ_ТаблицаПоШапкеДокумента
	|		ПО Типовой.Регистратор = ВТ_ТаблицаПоШапкеДокумента.Ссылка
	|			И Типовой.СчетКт = ВТ_ТаблицаПоШапкеДокумента.СчетУчетаРасчетовПоАвансам
	|			И Типовой.СчетДт = ВТ_ТаблицаПоШапкеДокумента.СчетУчетаРасчетовСКонтрагентом
	|			И (ВТ_ТаблицаПоШапкеДокумента.ВалютаДокумента <> &ВалютаРегламентированногоУчета)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Типовой.Субконто КАК ТиповойСубконто
	|		ПО Типовой.Регистратор = ТиповойСубконто.Регистратор
	|			И Типовой.НомерСтроки = ТиповойСубконто.НомерСтроки
	|			И (ТиповойСубконто.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияБухгалтерии.Кредит))
	|			И (ТиповойСубконто.Вид = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоТиповые.ДокументыРасчетовСКонтрагентами))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Документ,
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоДокументамЗачетнныхАвансовДоПолученияНомераИДатыВходящегоДокумента.Ссылка КАК Ссылка,
	|	ПоДокументамЗачетнныхАвансовДоПолученияНомераИДатыВходящегоДокумента.СуммаПредоплатыРегл КАК СуммаПредоплатыРегл,
	|	ПоДокументамЗачетнныхАвансовДоПолученияНомераИДатыВходящегоДокумента.СуммаПредоплатыВал КАК СуммаПредоплатыВал,
	|	ПоДокументамЗачетнныхАвансовДоПолученияНомераИДатыВходящегоДокумента.Документ КАК Документ,
	|	ПоДокументамЗачетнныхАвансовДоПолученияНомераИДатыВходящегоДокумента.ДокументПредоплатыПредставление КАК ДокументПредоплатыПредставление,
	|	ПоДокументамЗачетнныхАвансовДоПолученияНомераИДатыВходящегоДокумента.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
	|	ПоДокументамЗачетнныхАвансовДоПолученияНомераИДатыВходящегоДокумента.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента
	|ИЗ
	|	ПоДокументамЗачетнныхАвансовДоПолученияНомераИДатыВходящегоДокумента КАК ПоДокументамЗачетнныхАвансовДоПолученияНомераИДатыВходящегоДокумента
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПоДокументамЗачетнныхАвансовДоПолученияНомераИДатыВходящегоДокумента.Ссылка
	|ИТОГИ
	|	СУММА(СуммаПредоплатыРегл),
	|	СУММА(СуммаПредоплатыВал)
	|ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ПоДокументамЗачетнныхАвансовДоПолученияНомераИДатыВходящегоДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаПоШапкеДокумента.Ссылка КАК Ссылка,
	|	2 КАК ПорядокТабличныхЧастей,
	|	ОбрабатываемаяТаблица.НомерСтроки КАК НомерСтроки,
	|	ОбрабатываемаяТаблица.НематериальныйАктив КАК Товар,
	|	ОбрабатываемаяТаблица.НематериальныйАктив.Наименование КАК ТоварНаименование,
	|	ОбрабатываемаяТаблица.СуммаРаспределения КАК ВсегоВал,
	|	ОбрабатываемаяТаблица.СуммаРаспределенияНДС КАК НДСВал,
	|	ВТ_ТаблицаПоШапкеДокумента.СтавкаНДС КАК СтавкаНДС,
	|	ВЫРАЗИТЬ(ОбрабатываемаяТаблица.СуммаРаспределения*ВТ_ТаблицаПоШапкеДокумента.КурсВзаиморасчетов/ВТ_ТаблицаПоШапкеДокумента.КратностьВзаиморасчетов КАК ЧИСЛО(15, 2)) КАК ВсегоРегл,
	|	ВЫРАЗИТЬ(ОбрабатываемаяТаблица.СуммаРаспределенияНДС*ВТ_ТаблицаПоШапкеДокумента.КурсВзаиморасчетов/ВТ_ТаблицаПоШапкеДокумента.КратностьВзаиморасчетов КАК ЧИСЛО(15, 2)) КАК НДСРегл,
	|	ВЫРАЗИТЬ((ОбрабатываемаяТаблица.СуммаРаспределения-(ОбрабатываемаяТаблица.СуммаРаспределенияНДС*ВТ_ТаблицаПоШапкеДокумента.УчНДС))*ВТ_ТаблицаПоШапкеДокумента.КурсВзаиморасчетов/ВТ_ТаблицаПоШапкеДокумента.КратностьВзаиморасчетов КАК ЧИСЛО(15, 2)) КАК НалоговаяБазаНДСРегл
	|ИЗ
	|	Документ.ПоступлениеДопРасходов.НМА КАК ОбрабатываемаяТаблица
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ТаблицаПоШапкеДокумента КАК ВТ_ТаблицаПоШапкеДокумента
	|		ПО ОбрабатываемаяТаблица.Ссылка = ВТ_ТаблицаПоШапкеДокумента.Ссылка
	|ГДЕ
	|	ОбрабатываемаяТаблица.СуммаРаспределения <> 0
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ВТ_ТаблицаПоШапкеДокумента.Ссылка,
	|	1,
	|	ОбрабатываемаяТаблица.НомерСтроки,
	|	ОбрабатываемаяТаблица.Номенклатура,
	|	ОбрабатываемаяТаблица.Номенклатура.Наименование,
	|	ОбрабатываемаяТаблица.СуммаРаспределения,
	|	ОбрабатываемаяТаблица.СуммаРаспределенияНДС,
	|	ВТ_ТаблицаПоШапкеДокумента.СтавкаНДС,
	|	ВЫРАЗИТЬ(ОбрабатываемаяТаблица.СуммаРаспределения*ВТ_ТаблицаПоШапкеДокумента.КурсВзаиморасчетов/ВТ_ТаблицаПоШапкеДокумента.КратностьВзаиморасчетов КАК ЧИСЛО(15, 2)),
	|	ВЫРАЗИТЬ(ОбрабатываемаяТаблица.СуммаРаспределенияНДС*ВТ_ТаблицаПоШапкеДокумента.КурсВзаиморасчетов/ВТ_ТаблицаПоШапкеДокумента.КратностьВзаиморасчетов КАК ЧИСЛО(15, 2)),
	|	ВЫРАЗИТЬ((ОбрабатываемаяТаблица.СуммаРаспределения-(ОбрабатываемаяТаблица.СуммаРаспределенияНДС*ВТ_ТаблицаПоШапкеДокумента.УчНДС))*ВТ_ТаблицаПоШапкеДокумента.КурсВзаиморасчетов/ВТ_ТаблицаПоШапкеДокумента.КратностьВзаиморасчетов КАК ЧИСЛО(15, 2))
	|ИЗ
	|	Документ.ПоступлениеДопРасходов.Товары КАК ОбрабатываемаяТаблица
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ТаблицаПоШапкеДокумента КАК ВТ_ТаблицаПоШапкеДокумента
	|		ПО ОбрабатываемаяТаблица.Ссылка = ВТ_ТаблицаПоШапкеДокумента.Ссылка
	|ГДЕ
	|	ОбрабатываемаяТаблица.СуммаРаспределения <> 0
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ВТ_ТаблицаПоШапкеДокумента.Ссылка,
	|	3,
	|	ОбрабатываемаяТаблица.НомерСтроки,
	|	ОбрабатываемаяТаблица.ОсновноеСредство,
	|	ОбрабатываемаяТаблица.ОсновноеСредство.Наименование,
	|	ОбрабатываемаяТаблица.СуммаРаспределения,
	|	ОбрабатываемаяТаблица.СуммаРаспределенияНДС,
	|	ВТ_ТаблицаПоШапкеДокумента.СтавкаНДС,
	|	ВЫРАЗИТЬ(ОбрабатываемаяТаблица.СуммаРаспределения*ВТ_ТаблицаПоШапкеДокумента.КурсВзаиморасчетов/ВТ_ТаблицаПоШапкеДокумента.КратностьВзаиморасчетов КАК ЧИСЛО(15, 2)),
	|	ВЫРАЗИТЬ(ОбрабатываемаяТаблица.СуммаРаспределенияНДС*ВТ_ТаблицаПоШапкеДокумента.КурсВзаиморасчетов/ВТ_ТаблицаПоШапкеДокумента.КратностьВзаиморасчетов КАК ЧИСЛО(15, 2)),
	|	ВЫРАЗИТЬ((ОбрабатываемаяТаблица.СуммаРаспределения-(ОбрабатываемаяТаблица.СуммаРаспределенияНДС*ВТ_ТаблицаПоШапкеДокумента.УчНДС))*ВТ_ТаблицаПоШапкеДокумента.КурсВзаиморасчетов/ВТ_ТаблицаПоШапкеДокумента.КратностьВзаиморасчетов КАК ЧИСЛО(15, 2))
	|ИЗ
	|	Документ.ПоступлениеДопРасходов.ОС КАК ОбрабатываемаяТаблица
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ТаблицаПоШапкеДокумента КАК ВТ_ТаблицаПоШапкеДокумента
	|		ПО ОбрабатываемаяТаблица.Ссылка = ВТ_ТаблицаПоШапкеДокумента.Ссылка
	|ГДЕ
	|	ОбрабатываемаяТаблица.СуммаРаспределения <> 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	ПорядокТабличныхЧастей,
	|	НомерСтроки
	|ИТОГИ
	|	СУММА(ВсегоВал),
	|	СУММА(НДСВал),
	|	СУММА(ВсегоРегл),
	|	СУММА(НДСРегл),
	|	СУММА(НалоговаяБазаНДСРегл)
	|ПО
	|	Ссылка
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_ТаблицаПоШапкеДокумента";
	
	ВестиРасчетыПоДокументам = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.НаСчетеВедетсяУчетПоДокументамРасчетов(ПланыСчетов.Типовой.КраткосрочнаяДебиторскаяЗадолженностьПокупателейИЗаказчиков);
	Если НЕ ВестиРасчетыПоДокументам Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И (ТиповойСубконто.Вид = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоТиповые.ДокументыРасчетовСКонтрагентами))", "И Ложь");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТиповойСубконто.Значение КАК Документ", """<Документ расчетов отсутствует>"" КАК Документ");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПРЕДСТАВЛЕНИЕ(ТиповойСубконто.Значение) КАК ДокументПредоплатыПредставление", """<Документ расчетов отсутствует>"" КАК ДокументПредоплатыПредставление");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Типовой.Субконто", "ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Типовой.Субконто");
	КонецЕсли;

	Возврат ТекстЗапроса;
	
КонецФункции	

////////////////////////////////////////////////////////////////////////////////
// Обновление информационной базы

Процедура ЗаполнитьНоменклатуру(Параметры, ИмяСобытия, Результат) Экспорт
	
	Режим         = ?(Параметры = Неопределено, 1           , Параметры.Режим);
	НачалоПериода = ?(Параметры = Неопределено, '0001-01-01', Параметры.НачалоПериода);
	КонецПериода  = ?(Параметры = Неопределено, '2099-12-31', Параметры.КонецПериода);	
	КоличествоОбъектовВТранзакции = ?(Параметры = Неопределено, 100, Параметры.КоличествоОбъектовВТранзакции);
	
	ГруппаПоУмолчанию = Неопределено;
	Если Режим <> 0 Тогда 
		ГруппаПоУмолчанию = НайтиСоздатьГруппуПоУмолчанию();
	КонецЕсли;
	
	НоменклатураПоУмолчанию = Неопределено;
	Если Параметры = Неопределено 
		ИЛИ (Параметры <> Неопределено И НЕ ЗначениеЗаполнено(Параметры.Номенклатура) И Режим = 1) Тогда
		НоменклатураПоУмолчанию = НайтиСоздатьНоменклатуруПоУмолчанию(ГруппаПоУмолчанию);
	ИначеЕсли Режим = 0 Тогда
		НоменклатураПоУмолчанию = Параметры.Номенклатура;
	КонецЕсли;
	
	// Если поступление доп. расходов не удалось записать, то документ добавляется в данный массив, 
	// чтобы исключить его из следующей выборки, иначе обновление зависнет.
	МассивИсключаемыхПоступлений = Новый Массив;
		
	КоличествоЗаписанныхВТранзакции = 0;

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
	|	ПоступлениеДопРасходов.Ссылка
	|ИЗ
	|	Документ.ПоступлениеДопРасходов КАК ПоступлениеДопРасходов
	|ГДЕ
	|	ПоступлениеДопРасходов.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И ПоступлениеДопРасходов.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеДопРасходов.УслугаСтороннейОрганизации)
	|	И ПоступлениеДопРасходов.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|	И НЕ ПоступлениеДопРасходов.Ссылка В (&МассивИсключаемыхПоступлений)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПоступлениеДопРасходов.Дата УБЫВ";
	
	СоответствиеСсылокСодержаниям = Новый Соответствие;
	
	Запрос.УстановитьПараметр("НачалоПериода", НачалоДня(НачалоПериода));
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(?(ЗначениеЗаполнено(КонецПериода), КонецПериода, '2099-12-31')));
	
	Пока Истина Цикл

		Запрос.УстановитьПараметр("МассивИсключаемыхПоступлений", МассивИсключаемыхПоступлений);
		
		РезультатЗапроса = Запрос.Выполнить();
	
		Если РезультатЗапроса.Пустой() Тогда
			Прервать;
		КонецЕсли;
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
		
			Если НЕ ТранзакцияАктивна() Тогда
				НачатьТранзакцию();
			КонецЕсли;
			
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			
			Если Режим = 2 Тогда
				
				Содержание   = СокрЛП(ДокументОбъект.Содержание);
				Номенклатура = Неопределено;
				
				// Если в документе не заполнено содержание, то создадим элемент справочника со значениями по умолчанию и укажем его.
				Если НЕ ЗначениеЗаполнено(Содержание) И НЕ ЗначениеЗаполнено(НоменклатураПоУмолчанию) Тогда
					Номенклатура = НайтиСоздатьНоменклатуруПоУмолчанию(ГруппаПоУмолчанию);
					НоменклатураПоУмолчанию = Номенклатура;
				ИначеЕсли НЕ ЗначениеЗаполнено(Содержание) И ЗначениеЗаполнено(НоменклатураПоУмолчанию) Тогда
					Номенклатура = НоменклатураПоУмолчанию;
				Иначе 
					Номенклатура = СоответствиеСсылокСодержаниям.Получить(Содержание);
					// Если ранее документа с таким содержанием не было, то создадим новый элемент справочника.
					Если Номенклатура = Неопределено Тогда
						ДанныеЗаполнения   = Новый Структура("Наименование, НаименованиеПолное, Услуга, Родитель", Содержание, Содержание, Истина, ГруппаПоУмолчанию);
						НоменклатураОбъект = Справочники.Номенклатура.СоздатьЭлемент();
						
						НоменклатураОбъект.Заполнить(ДанныеЗаполнения);
						ЗаполнитьЗначенияСвойств(НоменклатураОбъект, ДанныеЗаполнения);
						
						НоменклатураОбъект.Записать();
						Номенклатура = НоменклатураОбъект.Ссылка;
						
						СоответствиеСсылокСодержаниям.Вставить(Содержание, Номенклатура);
					КонецЕсли;
					
				КонецЕсли;
				
				ДокументОбъект.Номенклатура = Номенклатура;
				
			Иначе 
				
				ДокументОбъект.Номенклатура = НоменклатураПоУмолчанию;
				
			КонецЕсли;
			
			Попытка
				
				//Если ДокументОбъект.Проведен Тогда
					// Запись с проведением необходима для заполнения подчиненных счетов-фактур
					//ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
				//Иначе
					ДокументОбъект.ОбменДанными.Загрузка = Истина;
					ДокументОбъект.Записать();
				//КонецЕсли;
				
				КоличествоЗаписанныхВТранзакции = КоличествоЗаписанныхВТранзакции + 1;
				
		    Исключение
				
				КоличествоЗаписанныхВТранзакции = 0;
		        ОтменитьТранзакцию();
		        МассивИсключаемыхПоступлений.Добавить(Выборка.Ссылка);
				
				Комментарий = НСтр(
					"ru = 'Не удалось записать документ ""%1"" по причине:
					|
					|%2'", ОбщегоНазначения.КодОсновногоЯзыка());
				Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Комментарий, Выборка.Ссылка, ОписаниеОшибки());
				ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , Выборка.Ссылка, Комментарий);
				
				Прервать; 
				
		   	КонецПопытки;
		   	
			Если КоличествоЗаписанныхВТранзакции >= КоличествоОбъектовВТранзакции И КоличествоОбъектовВТранзакции <> 0 Тогда
				ЗафиксироватьТранзакцию();
				КоличествоЗаписанныхВТранзакции = 0;
			КонецЕсли;
			
		КонецЦикла;

	КонецЦикла;
	
	Если ТранзакцияАктивна() Тогда
	    
		Если КоличествоОбъектовВТранзакции = 0 Тогда // Если требуется записывать все за один раз.
			Если МассивИсключаемыхПоступлений.Количество() = 0 Тогда // Если все удалось записать.
				ЗафиксироватьТранзакцию();
			КонецЕсли;
		Иначе
			ЗафиксироватьТранзакцию();
		КонецЕсли;
		
	КонецЕсли;

	Если МассивИсключаемыхПоступлений.Количество() = 0 Тогда
		Результат.ВыполненоУспешно = Истина;
		Результат.ОписаниеЗавершения = НСтр("ru = 'Все документы ""Поступление доп. расходов"" успешно обновлены.'");
	Иначе
		Результат.ВыполненоУспешно = Ложь;
		Результат.ОписаниеЗавершения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось обновить документов: %1.'"), 
			МассивИсключаемыхПоступлений.Количество());
	КонецЕсли
	
КонецПроцедуры

Функция НайтиСоздатьНоменклатуруПоУмолчанию(ГруппаПоУмолчанию)
	
	Содержание = НСтр("ru = 'Услуга сторонней организации (создано при переходе с редакции 2.0)'", ОбщегоНазначения.КодОсновногоЯзыка());
	
	// Попытаемся сначала найти номенклатуру по умолчанию, возможно она была создана ранее.
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	Номенклатура.Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Наименование ПОДОБНО &Наименование";
	
	Запрос.УстановитьПараметр("Наименование", Содержание);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	ДанныеЗаполнения   = Новый Структура("Наименование, НаименованиеПолное, Услуга, Родитель", Содержание, Содержание, Истина, ГруппаПоУмолчанию);
	
	НоменклатураОбъект = Справочники.Номенклатура.СоздатьЭлемент();
	
	НоменклатураОбъект.Заполнить(ДанныеЗаполнения);
	ЗаполнитьЗначенияСвойств(НоменклатураОбъект, ДанныеЗаполнения);
	
	НоменклатураОбъект.Записать();
	
	Возврат НоменклатураОбъект.Ссылка;
	
КонецФункции

Функция НайтиСоздатьГруппуПоУмолчанию()
	
	Содержание = НСтр("ru = 'Услуги (переход с редакции 2.0)'", ОбщегоНазначения.КодОсновногоЯзыка());
	
	// Попытаемся сначала найти группу номенклатуры по умолчанию, возможно она была создана ранее.
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	Номенклатура.Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Наименование ПОДОБНО &Наименование
	|	И Номенклатура.ЭтоГруппа";
	
	Запрос.УстановитьПараметр("Наименование", Содержание);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	ДанныеЗаполнения   = Новый Структура("Наименование", Содержание);
	
	НоменклатураОбъект = Справочники.Номенклатура.СоздатьГруппу();
	
	НоменклатураОбъект.Заполнить(ДанныеЗаполнения);
	ЗаполнитьЗначенияСвойств(НоменклатураОбъект, ДанныеЗаполнения);
	
	НоменклатураОбъект.Записать();
	
	Возврат НоменклатураОбъект.Ссылка;
	
КонецФункции

#КонецЕсли