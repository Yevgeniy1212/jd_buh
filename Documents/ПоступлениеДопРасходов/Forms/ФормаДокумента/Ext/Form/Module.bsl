////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
		РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(Объект.ВидОперации), Объект.Ссылка, ЭтаФорма);
		Если НЕ ЗначениеЗаполнено(Параметры.ЗначениеКопирования)
		  И (Не Параметры.Свойство("Основание") Или ТипЗнч(Параметры.Основание) <> Тип("ДокументСсылка.ПоступлениеДопРасходов")) Тогда
			ПричиныИзмененияСчетовУчета = Новый Массив;
			ПричиныИзмененияСчетовУчета.Добавить("НовыйДокумент");
			ЗаполнитьСчетаУчета(ПричиныИзмененияСчетовУчета, "НовыйДокумент");
		КонецЕсли;
	КонецЕсли;
	
	ЗапретРедактированияРеквизитовОбъектовПереопределяемый.ЗаблокироватьРеквизиты(ЭтотОбъект, Объект.Проведен);
	
	УстановитьВидимостьСчетовУчета();
	
	// Активизировать табличную часть
	УстановитьТекущуюСтраницуОсновнойПанели();
	
	ДобавитьКомандуВводаКорректировки();
	ОбновитьДанныеОВведенныхКорректировках();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	// РедактированиеДокументовПользователей
	ПраваДоступаКОбъектам.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец РедактированиеДокументовПользователей
	
	//АВР
	АВРСерверПереопределяемый.НайтиАВРИЗаполнитьСсылку(ЭтаФорма, Объект);
	//Конец АВР
	
	ПодготовитьФормуНаСервере();
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(Объект.ВидОперации), Объект.Ссылка, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборНоменклатуры.Форма.ОсновнаяФорма" Тогда
		ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИсточникВыбора.ИмяТаблицы);
				
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Справочник.ВидыПервичныхДокументов.Форма.ФормаВыбора" Тогда
		Объект.ВидВходящегоДокумента = СокрЛП(ВыбранноеЗначение);
		Модифицированность = Истина;
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "ОбщаяФорма.ФормаДополнительно" Тогда		
		
		РаботаСДиалогамиКлиент.ОбработкаВыбораРеквизитыДополнительно(ЭтаФорма, ВыбранноеЗначение, ИсточникВыбора);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "ОбщаяФорма.ФормаУчастникиСовместнойДеятельности" Тогда		
		Объект.УчастникиСовместнойДеятельности.Очистить();
		
		Для Каждого Элемент Из ВыбранноеЗначение.УчастникиСовместнойДеятельности Цикл
			НоваяСтрока = Объект.УчастникиСовместнойДеятельности.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,Элемент);
		КонецЦикла;
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбработанаТабличнаяЧастьТовары" И ТипЗнч(Параметр) = Тип("Структура") 
		И Параметр.Свойство("ИдентификаторВызывающейФормы")
		И Параметр.ИдентификаторВызывающейФормы = УникальныйИдентификатор Тогда
		ОбработкаОповещенияОбработкиТабличнойЧастиТоварыНаСервере(Параметр);
		
	ИначеЕсли ИмяСобытия = "ОбработанаТабличнаяЧасть" И ТипЗнч(Параметр) = Тип("Структура")
		И Параметр.Свойство("ИдентификаторВызывающейФормы")
		И Параметр.ИдентификаторВызывающейФормы = УникальныйИдентификатор Тогда
		ОбработкаОповещенияОбработкиТабличнойЧастиНаСервере(Параметр);

	ИначеЕсли ИмяСобытия = "Запись_СчетФактураПолученный" И ТипЗнч(Параметр) = Тип("Структура") 
		И Параметр.Свойство("ДокументыОснования")
		И (Параметр.ДокументыОснования.Найти(Объект.Ссылка) <> Неопределено
			ИЛИ СчетФактура = Источник) Тогда
		Если Параметр.ДокументыОснования.Найти(Объект.Ссылка) = Неопределено Тогда
			// в счете-фактуре документ был удален из списка документов-оснований
			СчетФактура = ПредопределенноеЗначение("Документ.СчетФактураПолученный.ПустаяСсылка");
		КонецЕсли;
		ОбработкаОповещенияЗаписиСчетаФактурыНаСервере();
		
	ИначеЕсли ИмяСобытия = "Запись_ДатаНачалаВеденияВБУУчетаОСВРазрезеМОЛ" Тогда 
		ДатаНачалаВеденияАналитическогоУчетаОСПоМОЛ = Параметр;
		УправлениеФормой(ЭтаФорма);
		
	ИначеЕсли ИмяСобытия = "Запись_ДатаНачалаВеденияВБУУчетаОСВРазрезеПодразделений" Тогда 
		ДатаНачалаВеденияАналитическогоУчетаОСПоПодразделениям = Параметр;
		УправлениеФормой(ЭтаФорма);
		
	ИначеЕсли ИмяСобытия = "ДанныеСкопированыВБуферОбмена" Тогда		
		УстановитьДоступностьКомандыВставки(ЭтотОбъект, Истина);
		
	//АВР	
	ИначеЕсли ИмяСобытия = АВРКлиентСервер.ИмяСобытияЗаписьАВР() Тогда
		ОбработкаОповщенияАВРНаСервере();
	//Конец АВР	
	ИначеЕсли ИмяСобытия = "Запись_Операция" Или ИмяСобытия = "Запись_Сторнирование" Тогда
		ОбновитьДанныеОВведенныхКорректировках();
		
	Иначе
		ОбщегоНазначенияБККлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	ЗапретРедактированияРеквизитовОбъектовПереопределяемый.ЗаблокироватьРеквизиты(ЭтотОбъект, Объект.Проведен);
	
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Объект.ВидОперации, Объект.Ссылка, ЭтаФорма);
	ОбновитьИтоги(ЭтаФорма);
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) И ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда 
		УчетНДСИАкциза.ЗаполнитьДокументОснованиеВСчетеФактуре(Объект, Объект.ДокументОснование, "СчетФактураПолученный");
	КонецЕсли;
	
	Если ТребуетсяСчетФактура И ЗначениеЗаполнено(СчетФактура) И ЗначениеЗаполнено(ДанныеСчетаФактуры) Тогда
		УчетНДСИАкциза.ПолучитьДанныеСчетаФактуры(ЭтаФорма, "СчетФактураПолученный");
		УчетНДСИАкцизаКлиентСервер.ЗаполнитьТекстПроСчетФактуру(ЭтаФорма, ДанныеСчетаФактуры, "НадписьСчетФактура", ТребуетсяСчетФактура);
		УчетНДСиАкцизаКлиентСервер.УправлениеГруппойСчетаФактуры(ЭтаФорма);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	// Обновляем информацию о счете-фактуре в открытых формах документов-оснований
	ПараметрыЗаписи.Вставить("ДокументОснование", Объект.ДокументОснование);
	Оповестить("Запись_ПоступлениеДопРасходов", ПараметрыЗаписи, Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
		
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	СчетаУчетаВДокументахКлиентСервер.ПолучитьЗаголовокСчетаУчетаРасчетов(ЭтотОбъект);
	СчетаУчетаВДокументахКлиентСервер.ПолучитьЗаголовокСчетаУчетаЗатрат(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		КлючеваяОперация = "Документ ""поступление доп. расходов"" (проведение)";
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(СчетФактура) Тогда
		ТекстСообщения = НСтр("ru = 'На основании данного документа введен документ ""Счет-фактура полученный"". Запрещено изменять вид операции документа.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "ВидОперации", "Объект");
		Объект.ВидОперации = ТекущийВидОперации;
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ВидОперации) Тогда
		Объект.ВидОперации = ТекущийВидОперации;
		Возврат;
	КонецЕсли;
	
	Если Объект.ВидОперации = ТекущийВидОперации Тогда
		Возврат;
	КонецЕсли;
	
	ВидОперацииПриИзмененииНаСервере();
		
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;
	
	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ОбщегоНазначенияБККлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата, 
		ТекущаяДатаДокумента, Объект.ВалютаДокумента, ЭтаФорма.ВалютаРегламентированногоУчета);
	
	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		
		СтруктураРезультатаВыполнения = Неопределено;
		
		ДатаПриИзмененииНаСервере(СтруктураРезультатаВыполнения);
		
		Если СтруктураРезультатаВыполнения <> Неопределено Тогда 
			
			Режим = РежимДиалогаВопрос.ДаНет;
			Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаПоИзменениюДаты",ЭтотОбъект,СтруктураРезультатаВыполнения);
			ПоказатьВопрос(Оповещение, СтруктураРезультатаВыполнения.ТекстВопроса, Режим, 0);
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(СтруктурноеПодразделениеОрганизация) Тогда 
		Объект.Организация = Неопределено;
		Объект.СтруктурноеПодразделение = Неопределено;
	Иначе 
		СтруктураРезультатаВыполнения = Неопределено;
		Результат = РаботаСДиалогамиКлиент.ПроверитьИзменениеЗначенийОрганизацииСтруктурногоПодразделения(СтруктурноеПодразделениеОрганизация, Объект.Организация, Объект.СтруктурноеПодразделение);
		Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
			ПослеВыбораСтруктурноеПодразделениеОрганизация(Результат, СтруктураРезультатаВыполнения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСДиалогамиКлиент.СтруктурноеПодразделениеНачалоВыбора(ЭтаФорма, СтандартнаяОбработка, Объект.Организация, Объект.СтруктурноеПодразделение, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	СтруктураРезультатаВыполнения = Неопределено;
	
	КонтрагентПриИзмененииНаСервере(СтруктураРезультатаВыполнения);
	
	Если НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		Объект.УчастникиСовместнойДеятельности.Очистить();
		Элементы.КнопкаУСД.Видимость = Ложь;
		Элементы.ДоговорКонтрагента.МаксимальнаяШирина = ПолучитьШиринуПоляДоговор(Ложь);
		Возврат;
	КонецЕсли;
	
	Если СтруктураРезультатаВыполнения <> Неопределено Тогда 
		
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаДоговорКонтрагентаПриИзменении", ЭтотОбъект, СтруктураРезультатаВыполнения);
        ПоказатьВопрос(Оповещение, СтруктураРезультатаВыполнения.ТекстВопроса, Режим, 0);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СделкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтруктураПараметров = Новый Структура("Организация, Контрагент, ДоговорКонтрагента, Дата, ТипыДокументов",
		Объект.Организация, Объект.Контрагент, Объект.ДоговорКонтрагента, Объект.Дата, "Метаданные.Документы.ПоступлениеДопРасходов.Реквизиты.Сделка.Тип");

	Если НЕ ЗначениеЗаполнено(Объект.СчетУчетаРасчетовПоАвансам) Тогда
		СчетДляОпределенияОстатков = Объект.СчетУчетаРасчетовСКонтрагентом;
	Иначе
		СчетДляОпределенияОстатков = Объект.СчетУчетаРасчетовПоАвансам;
	КонецЕсли; 
	
	СтруктураПараметров.Вставить("СчетУчета"     , СчетДляОпределенияОстатков);
	СтруктураПараметров.Вставить("ОстаткиОбороты", "Дт");
		
	ПараметрыФормы = Новый Структура("ПараметрыОбъекта", СтруктураПараметров);
	ОткрытьФорму("Документ.ДокументРасчетовСКонтрагентом.ФормаВыбора", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаПриИзменении(Элемент)
	
	Объект.СуммаНДС = УчетНДСиАкцизаКлиентСервер.РассчитатьСуммуНДС(Объект.Сумма, Объект.УчитыватьНДС, Объект.СуммаВключаетНДС, УчетНДСиАкцизаВызовСервераПовтИсп.ПолучитьСтавкуНДС(Объект.СтавкаНДС));
	ОбновитьИтоги(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СтавкаНДСПриИзменении(Элемент)
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл
		РассчитатьСуммуНДСВТабличнойЧасти(СтрокаТабличнойЧасти);
	КонецЦикла;
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.ОС Цикл
		РассчитатьСуммуНДСВТабличнойЧасти(СтрокаТабличнойЧасти);
	КонецЦикла;
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.НМА Цикл
		РассчитатьСуммуНДСВТабличнойЧасти(СтрокаТабличнойЧасти);
	КонецЦикла;
	
	Объект.СуммаНДС = УчетНДСиАкцизаКлиентСервер.РассчитатьСуммуНДС(Объект.Сумма, Объект.УчитыватьНДС, Объект.СуммаВключаетНДС, УчетНДСиАкцизаВызовСервераПовтИсп.ПолучитьСтавкуНДС(Объект.СтавкаНДС));
	ОбновитьИтоги(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура УчитыватьКПНПриИзменении(Элемент)
	
	УчитыватьКПНПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидУчетаНУПриИзменении(Элемент)

	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидУчетаНУНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбщегоНазначенияБККлиент.НачалоВыбораЗначенияВидУчетаНУ(Элемент, Объект.ВидУчетаНУ, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ПерезаполнитьСчетаУчета", ЗначениеЗаполнено(Объект.ДоговорКонтрагента) И НЕ ПоказыватьВДокументахСчетаУчета);
	
	СтруктураРезультатаВыполнения = Неопределено;
	
	ДоговорКонтрагентаПриИзмененииНаСервере(СтруктураПараметров, СтруктураРезультатаВыполнения);

	Если СтруктураРезультатаВыполнения <> Неопределено Тогда 
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаДоговорКонтрагентаПриИзменении", ЭтотОбъект, СтруктураРезультатаВыполнения);
        ПоказатьВопрос(Оповещение, СтруктураРезультатаВыполнения.ТекстВопроса, Режим, 0);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаДоговорКонтрагентаПриИзменении(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		УправлениеВзаиморасчетамиКлиент.ОбработатьОтказОтПересчетаДокументаПоДоговору(ЭтаФорма, Параметры);
		СформироватьНадписьЦеныИВалюта(ЭтаФорма);
		Возврат;
	КонецЕсли;
	
	Если НЕ Результат = КодВозвратаДиалога.Нет Тогда
		ПересчетСуммДокумента(Объект.ВалютаДокумента, Параметры.ВалютаВзаиморасчетов);
		Объект.ВалютаДокумента = Параметры.ВалютаВзаиморасчетов;
		Объект.КурсВзаиморасчетов           = Параметры.СтруктураКурсаВзаиморасчетов.Курс;
		Объект.КратностьВзаиморасчетов      = Параметры.СтруктураКурсаВзаиморасчетов.Кратность;
		СформироватьНадписьЦеныИВалюта(ЭтаФорма);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеПриИзменении(Элемент)
	
	Если ТекущийДокументОснование = Объект.ДокументОснование Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		ТекстВопроса = НСтр("ru='Заполнить текущий документ данными документа-основания?'");
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаПриИзмененииДокументОснование", ЭтотОбъект, Параметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
	КонецЕсли;
	ТекущийДокументОснование = Объект.ДокументОснование;
	
КонецПроцедуры

&НаКлиенте
Процедура ЦеныИВалютаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОткрытия = Неопределено;
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеДопРасходов.ВнутреннийРасход") Тогда 
		ОграничениеВидимости   = Новый Соответствие;
		ОграничениеВидимости.Вставить("Видимость", Ложь);
		
		ОграничениеДоступности = Новый Соответствие;
		ОграничениеДоступности.Вставить("Доступность", Ложь);
		
		НедоступныеРеквизиты   = Новый Структура;
		НедоступныеРеквизиты.Вставить("КурсДокумента"               , ОграничениеДоступности);
		НедоступныеРеквизиты.Вставить("КратностьДокумента"          , ОграничениеДоступности);
		НедоступныеРеквизиты.Вставить("ПересчитатьЦены"             , ОграничениеДоступности);
		НедоступныеРеквизиты.Вставить("УстановитьКурсДокумента"     , ОграничениеВидимости);
		НедоступныеРеквизиты.Вставить("ВалютаВзаиморасчетов"        , ОграничениеДоступности);
		НедоступныеРеквизиты.Вставить("КурсВзаиморасчетов"          , ОграничениеДоступности);
		НедоступныеРеквизиты.Вставить("КратностьВзаиморасчетов"     , ОграничениеДоступности);
		НедоступныеРеквизиты.Вставить("УстановитьКурсВзаиморасчетов", ОграничениеВидимости);
		НедоступныеРеквизиты.Вставить("УчитыватьНДС"                , ОграничениеДоступности);
		НедоступныеРеквизиты.Вставить("СуммаВключаетНДС"            , ОграничениеДоступности);
		НедоступныеРеквизиты.Вставить("УчитыватьАкциз"              , ОграничениеДоступности);
		НедоступныеРеквизиты.Вставить("СуммаВключаетАкциз"          , ОграничениеДоступности);
		НедоступныеРеквизиты.Вставить("НДСВключенВСтоимость"        , ОграничениеДоступности);
		
		ПараметрыОткрытия = Новый Структура("БезКонтроляВалютыВзаиморасчетов, НедоступныеРеквизиты", Истина, НедоступныеРеквизиты);
	КонецЕсли;
	
	ТолькоПросмотрИзменен = Ложь;
	Если Элемент.ТолькоПросмотр И НЕ ЭтотОбъект.ТолькоПросмотр Тогда
		ТолькоПросмотрИзменен = Истина;
		ЭтотОбъект.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	УправлениеЦенообразованиемКлиент.ОткрытьФормуЦеныИВалюта(ЭтаФорма,,,, ПараметрыОткрытия);
	
	Если ТолькоПросмотрИзменен Тогда
		ЭтотОбъект.ТолькоПросмотр = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Номенклатура) Тогда
		
		Объект.Содержание = ПолучитьСодержаниеНоменклатурыНаСервере(Объект.Номенклатура);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СодержаниеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДополнительныеПараметры = Новый Структура("ФормаВладелец,ИмяРеквизита", ЭтаФорма, "ПереченьДокументации");
	
	Оповещение = Новый ОписаниеОповещения("СодержаниеЗавершениеВвода", ЭтотОбъект, ДополнительныеПараметры);
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияМногострочногоТекста(
			Оповещение,                                                   
			Объект.Содержание,
			НСтр("ru='Содержание'"));
	
КонецПроцедуры

&НаКлиенте
Процедура СодержаниеЗавершениеВвода(Строка, Параметры) Экспорт
			 
	Если Строка <> Неопределено Тогда
		
		Объект.Содержание = Строка;
		
	КонецЕсли;
	
 КонецПроцедуры

&НаКлиенте
Процедура НадписьСчетФактураНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	УчетНДСиАкцизаКлиент.ОткрытьСчетФактуру(ЭтаФорма, СчетФактура, "СчетФактураПолученный");
	
КонецПроцедуры

&НаКлиенте
Процедура ВидВходящегоДокументаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ВидДокумента", Элемент.ТекстРедактирования);
	
	ОткрытьФорму("Справочник.ВидыПервичныхДокументов.ФормаВыбора", СтруктураПараметров, ЭтаФорма, Истина);
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьСписокДоступныхВидовДоговоровПоОперации()
	
	НовыеПараметры = Новый Массив;
	
	СписокВидовДоговоров.Очистить();
	СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
	СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.Прочее);
	НовыеПараметры.Добавить(Новый ПараметрВыбора("Отбор.ВидДоговора", СписокВидовДоговоров.ВыгрузитьЗначения()));
	Если Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеДопРасходов.ПоступлениеОтНерезидента Тогда
		НовыеПараметры.Добавить(Новый ПараметрВыбора("Отбор.УчетАгентскогоНДС", Истина));
	Иначе 	
		НовыеПараметры.Добавить(Новый ПараметрВыбора("Отбор.УчетАгентскогоНДС", Ложь));
	КонецЕсли;
	
	Элементы.ДоговорКонтрагента.ПараметрыВыбора = Новый ФиксированныйМассив(НовыеПараметры);
		
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ОС

&НаКлиенте
Процедура ОСПриИзменении(Элемент)
	
	ОбновитьИтоги(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОСПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда		
		ТекущиеДанные = Элементы.ОС.ТекущиеДанные;
		
		ДанныеСтрокаТаблицы = Новый Структура("ОсновноеСредство, Сумма, СтавкаНДС, СуммаНДС, СуммаТовара, НДСВидОборота, НДСВидПоступления");
		ЗаполнитьЗначенияСвойств(ДанныеСтрокаТаблицы, ТекущиеДанные);
	
		ПараметрыОбъекта = Новый Структура("Организация, Дата, Ссылка");
		ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, Объект);
		
		ПараметрыЗаполненияСчетовУчета = НачатьЗаполнениеСчетовУчета(
			"НоваяСтрокаОС",
			Объект,
			ТекущиеДанные,
			ПараметрыОбъекта,
			ДанныеСтрокаТаблицы);
		
		ЗаполнитьРеквизитыНалоговогоУчетаНаСервере(ДанныеСтрокаТаблицы, "ОС", ПараметрыОбъекта, ПараметрыЗаполненияСчетовУчета.КЗаполнению);		
		
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокаТаблицы);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОСПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		ОбновитьИтоги(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОСОсновноеСредствоПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ОС.ТекущиеДанные;
			
	ДанныеСтрокиТаблицы = Новый Структура("ОсновноеСредство, Сумма, СуммаНДС, НДСВидОборота, 
										|НДСВидПоступления, ПодразделениеОрганизации, МОЛОрганизации");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, СтрокаТабличнойЧасти);
	
	ПараметрыОбъекта = Новый Структура("Организация, СтруктурноеПодразделение, Дата, Ссылка, УчитыватьНДС, СуммаВключаетНДС, УчитыватьКПН, ВидОперации,
			|ВалютаДокумента, КратностьВзаиморасчетов, КурсВзаиморасчетов, ДоговорКонтрагента");
	ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, Объект);
	
	ПараметрыЗаполненияСчетовУчета = НачатьЗаполнениеСчетовУчета(
		"ОС.ОсновноеСредство",
		Объект,
		СтрокаТабличнойЧасти,
		ПараметрыОбъекта,
		ДанныеСтрокиТаблицы);
	
	ОСОсновноеСредствоПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ПараметрыОбъекта, ПараметрыЗаполненияСчетовУчета.КЗаполнению);

	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ДанныеСтрокиТаблицы);
	РассчитатьСуммуНДСВТабличнойЧасти(СтрокаТабличнойЧасти);
	
КонецПроцедуры

&НаКлиенте
Процедура ОССуммаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ОС.ТекущиеДанные;

	РассчитатьСуммуНДСВТабличнойЧасти(СтрокаТабличнойЧасти);

	Объект.СуммаНДС = УчетНДСиАкцизаКлиентСервер.РассчитатьСуммуНДС(Объект.Сумма, Объект.УчитыватьНДС, Объект.СуммаВключаетНДС, УчетНДСиАкцизаВызовСервераПовтИсп.ПолучитьСтавкуНДС(Объект.СтавкаНДС));
	
КонецПроцедуры

&НаКлиенте
Процедура ОССуммаРаспределенияПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ОС.ТекущиеДанные;

	РассчитатьСуммуНДСВТабличнойЧасти(СтрокаТабличнойЧасти);

	Объект.СуммаНДС = УчетНДСиАкцизаКлиентСервер.РассчитатьСуммуНДС(Объект.Сумма, Объект.УчитыватьНДС, Объект.СуммаВключаетНДС, УчетНДСиАкцизаВызовСервераПовтИсп.ПолучитьСтавкуНДС(Объект.СтавкаНДС));
	
КонецПроцедуры

&НаКлиенте
Процедура ОССчетУчетаБУПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.ОС.ТекущиеДанные;
	
	СтрокаТаблицы.СчетУчетаНУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СтрокаТаблицы.СчетУчетаБУ));

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ТОВАРЫ

&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)
	
	ОбновитьИтоги(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда		
		ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
		ТекущиеДанные.Коэффициент = 1;
		
		ДанныеСтрокаТаблицы = Новый Структура("Номенклатура, ЕдиницаИзмерения, Коэффициент, Количество, Цена, Сумма, СуммаНДС, СчетУчетаБУ, СчетУчетаНДС, НДСВидОборота, НДСВидПоступления, СчетУчетаНУ");
		ЗаполнитьЗначенияСвойств(ДанныеСтрокаТаблицы, ТекущиеДанные);
	
		ПараметрыОбъекта = Новый Структура("Организация, Дата, Ссылка");
		ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, Объект);
		
		ПараметрыЗаполненияСчетовУчета = НачатьЗаполнениеСчетовУчета(
			"НоваяСтрокаТовары",
			Объект,
			ТекущиеДанные,
			ПараметрыОбъекта,
			ДанныеСтрокаТаблицы);
		
		ЗаполнитьРеквизитыНалоговогоУчетаНаСервере(ДанныеСтрокаТаблицы, "Товары", ПараметрыОбъекта, ПараметрыЗаполненияСчетовУчета.КЗаполнению);		
		
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокаТаблицы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		ОбновитьИтоги(ЭтаФорма);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;

	ДанныеСтрокиТаблицы = Новый Структура("Номенклатура, ЕдиницаИзмерения, Коэффициент, Количество, Цена, Сумма, СтавкаНДС, СуммаНДС, Всего");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, СтрокаТабличнойЧасти);
	
	ПараметрыОбъекта = Новый Структура("Организация, СтруктурноеПодразделение, Дата, Ссылка, УчитыватьНДС, СуммаВключаетНДС, УчитыватьКПН, ВидОперации,
			|ВалютаДокумента, КратностьВзаиморасчетов, КурсВзаиморасчетов, ДоговорКонтрагента");
	ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, Объект);
	
	ПараметрыЗаполненияСчетовУчета = НачатьЗаполнениеСчетовУчета(
		"Товары.Номенклатура",
		Объект,
		СтрокаТабличнойЧасти,
		ПараметрыОбъекта,
		ДанныеСтрокиТаблицы);
	
	ТоварыНоменклатураПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ПараметрыОбъекта, ПараметрыЗаполненияСчетовУчета.КЗаполнению);
	
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ДанныеСтрокиТаблицы);
	РассчитатьСуммуНДСВТабличнойЧасти(СтрокаТабличнойЧасти);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыЕдиницаИзмеренияПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	// Выполнить общие действия для всех документов при изменении Единица.
	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииЕдиницыТабЧасти(СтрокаТабличнойЧасти);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;

	РассчитатьСуммуНДСВТабличнойЧасти(СтрокаТабличнойЧасти);
	
	Объект.СуммаНДС = УчетНДСиАкцизаКлиентСервер.РассчитатьСуммуНДС(Объект.Сумма, Объект.УчитыватьНДС, Объект.СуммаВключаетНДС, УчетНДСиАкцизаВызовСервераПовтИсп.ПолучитьСтавкуНДС(Объект.СтавкаНДС));
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаРаспределенияПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;

	РассчитатьСуммуНДСВТабличнойЧасти(СтрокаТабличнойЧасти);
	
	Объект.СуммаНДС = УчетНДСиАкцизаКлиентСервер.РассчитатьСуммуНДС(Объект.Сумма, Объект.УчитыватьНДС, Объект.СуммаВключаетНДС, УчетНДСиАкцизаВызовСервераПовтИсп.ПолучитьСтавкуНДС(Объект.СтавкаНДС));
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСчетУчетаБУПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.Товары.ТекущиеДанные;
	
	Если НЕ ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.НаСчетеВедетсяУчетНоменклатуры(СтрокаТаблицы.СчетУчетаБУ) Тогда
		
		ТекстСообщения = НСтр("ru='Для счета %1 отсутствует субконто ""Номенклатура"". Значение было очищено.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, 
			СтрокаТаблицы.СчетУчетаБУ);
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "Товары[" + Элементы.Товары.ТекущаяСтрока + "].СчетУчетаБУ", "Объект");
		
		СтрокаТаблицы.СчетУчетаБУ = ПредопределенноеЗначение("ПланСчетов.Типовой.ПустаяСсылка");
		
		Возврат;
		
	КонецЕсли;
	
	СтрокаТаблицы.СчетУчетаНУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СтрокаТаблицы.СчетУчетаБУ));
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСчетУчетаНУПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.Товары.ТекущиеДанные;
	
	Если НЕ ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.НаСчетеВедетсяУчетНоменклатуры(СтрокаТаблицы.СчетУчетаНУ) Тогда
		
		ТекстСообщения = НСтр("ru='Для счета %1 отсутствует субконто ""Номенклатура"". Значение было очищено.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, 
			СтрокаТаблицы.СчетУчетаНУ);
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "Товары[" + Элементы.Товары.ТекущаяСтрока + "].СчетУчетаНУ", "Объект");
		
		СтрокаТаблицы.СчетУчетаНУ = ПредопределенноеЗначение("ПланСчетов.Налоговый.ПустаяСсылка");

		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыДокументПартииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

    СтрокаТаблицы = Элементы.Товары.ТекущиеДанные;

    ПараметрыФормы = Новый Структура;
    ПараметрыФормы.Вставить("КонецПериода"  , ?(ЗначениеЗаполнено(Параметры.Ключ), Объект.Дата, КонецДня(ТекущаяДата())));
    ПараметрыФормы.Вставить("Организация"   , Объект.Организация);
    ПараметрыФормы.Вставить("Номенклатура"  , СтрокаТаблицы.Номенклатура);
    ПараметрыФормы.Вставить("ТипыДокументов", "Новый ОписаниеТипов(Метаданные.Документы.ПоступлениеДопРасходов.ТабличныеЧасти.Товары.Реквизиты.ДокументПартии.Тип)");
    ПараметрыФормы.Вставить("ФормироватьСписокПриОткрытии", Ложь);

    ОткрытьФорму("Документ.Партия.ФормаВыбора", Новый Структура("ПараметрыОбъекта", ПараметрыФормы), Элемент);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ НМА

&НаКлиенте
Процедура НМАПриИзменении(Элемент)
	
	ОбновитьИтоги(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура НМАПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда		
		ТекущиеДанные = Элементы.НМА.ТекущиеДанные;
		
		ДанныеСтрокаТаблицы = Новый Структура("НематериальныйАктив, Сумма, СтавкаНДС, СуммаНДС, СуммаТовара, НДСВидОборота, НДСВидПоступления");
		ЗаполнитьЗначенияСвойств(ДанныеСтрокаТаблицы, ТекущиеДанные);
	
		ПараметрыОбъекта = Новый Структура("Организация, Дата, Ссылка");
		ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, Объект);
		
		ПараметрыЗаполненияСчетовУчета = НачатьЗаполнениеСчетовУчета(
			"НоваяСтрокаНМА",
			Объект,
			ТекущиеДанные,
			ПараметрыОбъекта,
			ДанныеСтрокаТаблицы);
		
		ЗаполнитьРеквизитыНалоговогоУчетаНаСервере(ДанныеСтрокаТаблицы, "НМА", ПараметрыОбъекта, ПараметрыЗаполненияСчетовУчета.КЗаполнению);		
		
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокаТаблицы);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НМАПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		ОбновитьИтоги(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НМАНематериальныйАктивПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.НМА.ТекущиеДанные;
	
	ДанныеСтрокиТаблицы = Новый Структура("НематериальныйАктив, Сумма, СуммаНДС, НДСВидОборота, 
										|НДСВидПоступления, СуммаТовара");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, СтрокаТабличнойЧасти);
	
	ПараметрыОбъекта = Новый Структура("Организация, СтруктурноеПодразделение, Дата, Ссылка, УчитыватьНДС, СуммаВключаетНДС, УчитыватьКПН, ВидОперации,
			|ВалютаДокумента, КратностьВзаиморасчетов, КурсВзаиморасчетов, ДоговорКонтрагента");
	ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, Объект);
	
	ПараметрыЗаполненияСчетовУчета = НачатьЗаполнениеСчетовУчета(
		"НМА.НематериальныйАктив",
		Объект,
		СтрокаТабличнойЧасти,
		ПараметрыОбъекта,
		ДанныеСтрокиТаблицы);
	
	НМАНематериальныйАктивПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ПараметрыОбъекта, ПараметрыЗаполненияСчетовУчета.КЗаполнению);
		
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ДанныеСтрокиТаблицы);
	РассчитатьСуммуНДСВТабличнойЧасти(СтрокаТабличнойЧасти);

КонецПроцедуры

&НаКлиенте
Процедура НМАСуммаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.НМА.ТекущиеДанные;

	РассчитатьСуммуНДСВТабличнойЧасти(СтрокаТабличнойЧасти);
	Объект.СуммаНДС = УчетНДСиАкцизаКлиентСервер.РассчитатьСуммуНДС(Объект.Сумма, Объект.УчитыватьНДС, Объект.СуммаВключаетНДС, УчетНДСиАкцизаВызовСервераПовтИсп.ПолучитьСтавкуНДС(Объект.СтавкаНДС));
	
КонецПроцедуры

&НаКлиенте
Процедура НМАСуммаРаспределенияПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.НМА.ТекущиеДанные;

	РассчитатьСуммуНДСВТабличнойЧасти(СтрокаТабличнойЧасти);
	Объект.СуммаНДС = УчетНДСиАкцизаКлиентСервер.РассчитатьСуммуНДС(Объект.Сумма, Объект.УчитыватьНДС, Объект.СуммаВключаетНДС, УчетНДСиАкцизаВызовСервераПовтИсп.ПолучитьСтавкуНДС(Объект.СтавкаНДС));
	
КонецПроцедуры

&НаКлиенте
Процедура НМАСчетУчетаБУПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.НМА.ТекущиеДанные;
	
	СтрокаТаблицы.СчетУчетаНУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СтрокаТаблицы.СчетУчетаБУ));
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ


&НаКлиенте
Процедура ЗаполнитьПоПоступлениюНМА(Команда)
	
	Если Объект.НМА.Количество() > 0 Тогда
		
		ТекстВопроса = НСтр("ru='Перед заполнением табличная часть будет очищена. Заполнить?'");
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаЗаполнитьНМА", ЭтотОбъект, Параметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
		
	Иначе

		ЗаполнитьТабличнуЧастьДаннымиДокументаПоступления("ПоступлениеНМАЗавершениеВыбора","Документ.ПоступлениеНМА.ФормаВыбора");	    

	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоПоступлениюОС(Команда)

	Если Объект.ОС.Количество() > 0 Тогда
		
		ТекстВопроса = НСтр("ru='Перед заполнением табличная часть будет очищена. Заполнить?'");
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаЗаполнитьОС", ЭтотОбъект, Параметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
		
	Иначе

		ЗаполнитьТабличнуЧастьДаннымиДокументаПоступления("ПоступлениеОСЗавершениеВыбора");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоПоступлениюТМЗ(Команда)
	
	Если Объект.Товары.Количество() > 0 Тогда
		
		ТекстВопроса = НСтр("ru='Перед заполнением табличная часть будет очищена. Заполнить?'");
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаЗаполнитьТМЗ", ЭтотОбъект, Параметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
		
	Иначе

		ЗаполнитьТабличнуЧастьДаннымиДокументаПоступления("ПоступлениеТМЗЗавершениеВыбора");

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзПоступленияНМА(Команда)
	
	ЗаполнитьТабличнуЧастьДаннымиДокументаПоступления("ПоступлениеНМАЗавершениеВыбора","Документ.ПоступлениеНМА.ФормаВыбора");	    
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзПоступленияОС(Команда)
	
	ЗаполнитьТабличнуЧастьДаннымиДокументаПоступления("ПоступлениеОСЗавершениеВыбора");
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзПоступленияТМЗ(Команда)
	
	ЗаполнитьТабличнуЧастьДаннымиДокументаПоступления("ПоступлениеТМЗЗавершениеВыбора");
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьТовары(Команда)
	
	ИзменитьТабличнуюЧасть("Товары", НСтр("ru='Товары'"));
		
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьОС(Команда)
	
	ИзменитьТабличнуюЧасть("ОС", НСтр("ru='Основные средства'"));
		
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьНМА(Команда)
	
	ИзменитьТабличнуюЧасть("НМА", НСтр("ru='НМА'"));
		
КонецПроцедуры

&НаКлиенте
Процедура ПодборТМЗ(Команда)
	
	ПараметрыПодбора = ПолучитьПараметрыПодбора("Товары", НСтр("ru='Товары'"));
	Если ПараметрыПодбора <> Неопределено Тогда
		ОткрытьФорму("Обработка.ПодборНоменклатуры.Форма.ОсновнаяФорма", ПараметрыПодбора,
						ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ВвестиНовыйСчетФактуру(Команда)
	
	УчетНДСиАкцизаКлиентСервер.УправлениеГруппойСчетаФактуры(ЭтаФорма, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнитьСчетФактуру(Команда)
	
	УчетНДСиАкцизаКлиент.ОбработатьДействиеПоВводуСчетаФактуры(ЭтаФорма, "ДополнитьСчетФактуру", "СчетФактураПолученный");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗарегистрироватьСчетФактуру(Команда)
	
	ДанныеСчетаФактуры = Новый Структура();
	ДанныеСчетаФактуры.Вставить("ДатаВходящего" , ДатаСчетаФактурыПолученного);
	ДанныеСчетаФактуры.Вставить("НомерВходящего", НомерСчетаФактурыПолученного);
	
	УчетНДСиАкцизаКлиент.ОбработатьДействиеПоВводуСчетаФактуры(ЭтаФорма, "СоздатьСчетФактуру", "СчетФактураПолученный", ДанныеСчетаФактуры);
	
	УчетНДСиАкцизаКлиентСервер.УправлениеГруппойСчетаФактуры(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьВводСчетаФактуры(Команда)
	
	УчетНДСиАкцизаКлиентСервер.УправлениеГруппойСчетаФактуры(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура Распределить(Команда)
	
	РаспределитьНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура СкопироватьСтроки(Команда)
	
	ИмяТаблицы = ПолучитьИмяТекущейТабличнойЧасти();
	Если ПустаяСтрока(ИмяТаблицы) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	КоличествоСтрок = Элементы[ИмяТаблицы].ВыделенныеСтроки.Количество();
	Если КоличествоСтрок = 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	СкопироватьСтрокиНаСервере(ИмяТаблицы);
	ОбработкаТабличныхЧастейКлиент.ОповеститьОКопированииСтрокВБуферОбмена(ЭтотОбъект, КоличествоСтрок);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтроки(Команда)
	
	ИмяТаблицы = ПолучитьИмяТекущейТабличнойЧасти();
	Если ПустаяСтрока(ИмяТаблицы) Тогда
		
		Возврат;
		
	КонецЕсли;
	КоличествоСтрок = ВставитьСтрокиНаСервере(ИмяТаблицы);
	ОбработкаТабличныхЧастейКлиент.ОповеститьОВставкеСтрокИзБуфераОбмена(ЭтотОбъект, КоличествоСтрок);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
     ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
     ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры
 
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
     ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
     ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
&НаКлиенте
Процедура Подключаемый_РазрешитьРедактированиеРеквизитовОбъекта(Команда)
	
	ЗаблокированныеРеквизиты = ЗапретРедактированияРеквизитовОбъектовКлиент.Реквизиты(ЭтотОбъект);
	
	Если ЗаблокированныеРеквизиты.Количество() > 0 И НЕ Объект.Проведен Тогда
	    ЗапретРедактированияРеквизитовОбъектовКлиент.УстановитьДоступностьЭлементовФормы(ЭтотОбъект, ЗаблокированныеРеквизиты);
	КонецЕсли;
	
КонецПроцедуры

// Управление формой

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()

	ОбщегоНазначенияБККлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);
    
	ОрганизацияПлательщикНалогаНаПрибыль           = ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Объект.Организация, Объект.Дата);
	ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль = ОрганизацияПлательщикНалогаНаПрибыль И ПроцедурыНалоговогоУчета.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль(Объект.Организация, Объект.Дата);
	
КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	// Доступность взаимосвязанных полей
	Элементы.ВидУчетаНУ.Видимость            = Объект.УчитыватьКПН;

	Форма.ВидимостьНалоговогоУчета           = Объект.УчитыватьКПН И (Форма.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль ИЛИ Объект.ВидУчетаНУ = ПредопределенноеЗначение("Справочник.ВидыУчетаНУ.НУ"));
	
	Элементы.ДекорацияВидУчетаНУ.Видимость   = (НЕ Объект.УчитыватьКПН) ИЛИ (НЕ Форма.ОрганизацияПлательщикНалогаНаПрибыль);
    Элементы.ДекорацияУчитыватьКПН.Видимость = НЕ Форма.ОрганизацияПлательщикНалогаНаПрибыль;
	
	Элементы.ГруппаИтогиНДС.Видимость = Объект.УчитыватьНДС;

	Элементы.ГруппаНДС.Видимость = Объект.УчитыватьНДС;
	ОбновитьИтоги(Форма);
	
	ДоступностьКонтрагента = НЕ(Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеДопРасходов.ВнутреннийРасход"));
	СформироватьНадписьЦеныИВалюта(Форма);
	Если НЕ (ДоступностьКонтрагента = Элементы.Контрагент.Доступность) Тогда
		Элементы.Контрагент.Доступность        = ДоступностьКонтрагента;
	КонецЕсли;

	Если НЕ (ДоступностьКонтрагента = Элементы.ДоговорКонтрагента.Доступность) Тогда
		Элементы.ДоговорКонтрагента.Доступность = ДоступностьКонтрагента;
	КонецЕсли;

	Элементы.ОСПодразделениеОрганизации.Видимость = ЗначениеЗаполнено(Форма.ДатаНачалаВеденияАналитическогоУчетаОСПоПодразделениям) И Объект.Дата >= Форма.ДатаНачалаВеденияАналитическогоУчетаОСПоПодразделениям;
	Элементы.ОСМОЛОрганизации.Видимость = ЗначениеЗаполнено(Форма.ДатаНачалаВеденияАналитическогоУчетаОСПоМОЛ) И Объект.Дата >= Форма.ДатаНачалаВеденияАналитическогоУчетаОСПоМОЛ;
	
	Элементы.ГруппаРасчеты.Видимость 			= Форма.ПоказыватьВДокументахСчетаУчета 
		И (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеДопРасходов.УслугаСтороннейОрганизации")
		ИЛИ (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеДопРасходов.ПоступлениеОтНерезидента")));
	Элементы.ГруппаЗатраты.Видимость 			= Форма.ПоказыватьВДокументахСчетаУчета И Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеДопРасходов.ВнутреннийРасход");
	
	Элементы.УчитыватьКПН.Видимость 	 		= Форма.ОрганизацияПлательщикНалогаНаПрибыль;
	
	// Счет-фактура
	УчетНДСиАкцизаКлиентСервер.УправлениеГруппойСчетаФактуры(Форма, , Форма.ТребуетсяСчетФактура);
	
	Элементы.ТоварыСчетУчетаНДС.Видимость = НЕ Объект.ОтложитьПринятиеНДСКЗачету;
	Элементы.ОССчетУчетаНДС.Видимость     = НЕ Объект.ОтложитьПринятиеНДСКЗачету;
	Элементы.НМАСчетУчетаНДС.Видимость    = НЕ Объект.ОтложитьПринятиеНДСКЗачету;
	
	Элементы.ТоварыНДСВидПоступления.ОтметкаНезаполненного     = НЕ Объект.ОтложитьПринятиеНДСКЗачету;
	Элементы.ТоварыНДСВидПоступления.АвтоОтметкаНезаполненного = НЕ Объект.ОтложитьПринятиеНДСКЗачету;
	Элементы.ТоварыНДСВидОборота.ОтметкаНезаполненного         = НЕ Объект.ОтложитьПринятиеНДСКЗачету;
	Элементы.ТоварыНДСВидОборота.АвтоОтметкаНезаполненного     = НЕ Объект.ОтложитьПринятиеНДСКЗачету;

	Элементы.ОСНДСВидПоступления.АвтоОтметкаНезаполненного  = НЕ Объект.ОтложитьПринятиеНДСКЗачету;
	Элементы.ОСНДСВидОборота.АвтоОтметкаНезаполненного      = НЕ Объект.ОтложитьПринятиеНДСКЗачету; 	
	Элементы.ОСНДСВидПоступления.ОтметкаНезаполненного      = НЕ Объект.ОтложитьПринятиеНДСКЗачету;
	Элементы.ОСНДСВидОборота.ОтметкаНезаполненного          = НЕ Объект.ОтложитьПринятиеНДСКЗачету;
	
	Элементы.НМАНДСВидПоступления.АвтоОтметкаНезаполненного = НЕ Объект.ОтложитьПринятиеНДСКЗачету;
	Элементы.НМАНДСВидОборота.АвтоОтметкаНезаполненного     = НЕ Объект.ОтложитьПринятиеНДСКЗачету;
	Элементы.НМАНДСВидПоступления.ОтметкаНезаполненного     = НЕ Объект.ОтложитьПринятиеНДСКЗачету;
	Элементы.НМАНДСВидОборота.ОтметкаНезаполненного         = НЕ Объект.ОтложитьПринятиеНДСКЗачету;
		
	СформироватьНадписьЦеныИВалюта(Форма);

	СформироватьЗаголовокСчетаУчета(Форма);
	СформироватьЗаголовокСчетаУчетаЗатрат(Форма);
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере()

	УстановитьФункциональныеОпцииФормы();
	
	ТекущаяДатаДокумента = Объект.Дата;
	ТекущийВидОперации = Объект.ВидОперации;
		
	ТекущийДоговорКонтрагента = Объект.ДоговорКонтрагента;
	СчетФактура = ОбщегоНазначенияБК.НайтиПодчиненныйДокумент(Объект.Ссылка, "СчетФактураПолученный");

	ВалютаРегламентированногоУчета	= ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	ДатаНачалаВеденияАналитическогоУчетаОСПоМОЛ = Константы.ДатаНачалаВеденияВБУУчетаОСВРазрезеМОЛ.Получить();
	ДатаНачалаВеденияАналитическогоУчетаОСПоПодразделениям = Константы.ДатаНачалаВеденияВБУУчетаОСВРазрезеПодразделений.Получить();
	
	Если НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		ТекущийДоговорКонтрагента = Неопределено;
	КонецЕсли;
	
	ОпределитьСписокДоступныхВидовДоговоровПоОперации();

	Если Параметры.Ключ.Пустая() И (Не Параметры.Свойство("Основание") Или ТипЗнч(Параметры.Основание) <> Тип("ДокументСсылка.ПоступлениеДопРасходов")) Тогда
		
		ПроцедурыНалоговогоУчета.ПриИзмененииПризнакаОтраженияВНалоговомУчете(Объект.Организация, Объект.Дата, Объект.УчитыватьКПН, Истина);
		
		Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
			СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов;
			СтруктураРезультатаВыполнения = Неопределено;
			УправлениеВзаиморасчетамиСервер.ПриИзмененииЗначенияДоговора(Объект, СпособЗаполненияЦен, ТекущийДоговорКонтрагента, , СтруктураРезультатаВыполнения);
		КонецЕсли;
		
		Если  НЕ ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			Объект.УчитыватьНДС = ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНДС(Объект.Организация, Объект.Дата);
		КонецЕсли;
		
		Если Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеДопРасходов.ВнутреннийРасход Тогда 
			Объект.УчитыватьНДС 	= Ложь;
			Объект.СуммаВключаетНДС = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	ТребуетсяСчетФактура = Объект.ВидОперации <> Перечисления.ВидыОперацийПоступлениеДопРасходов.ВнутреннийРасход;
	Если НЕ Параметры.Ключ.Пустая() И ТребуетсяСчетФактура Тогда
		// заполняются реквизиты формы СчетФактура и ДанныеСчетаФактуры
		УчетНДСИАкциза.ПолучитьДанныеСчетаФактуры(ЭтаФорма, "СчетФактураПолученный");
	КонецЕсли;
	
	УчетНДСИАкцизаКлиентСервер.ЗаполнитьТекстПроСчетФактуру(ЭтаФорма, ДанныеСчетаФактуры, "НадписьСчетФактура", ТребуетсяСчетФактура);
	
	ПоказыватьВДокументахСчетаУчета = ПользователиБКВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию(Пользователи.ТекущийПользователь(), "ПоказыватьВДокументахСчетаУчета");
	ПоддержкаРаботыСоСтруктурнымиПодразделениями = ПолучитьФункциональнуюОпцию("ПоддержкаРаботыСоСтруктурнымиПодразделениями");
	
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда 
		РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ДоговорКонтрагента, "ВедениеВзаиморасчетов");
		Элементы.Сделка.Доступность = (РеквизитыДоговора.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам) И Объект.ВидОперации <> Перечисления.ВидыОперацийПоступлениеДопРасходов.ВнутреннийРасход;
		Элементы.КнопкаУСД.Видимость = ОбщегоНазначенияБК.ЭтоДоговорСДСРП(Объект.ДоговорКонтрагента);
		Элементы.ДоговорКонтрагента.МаксимальнаяШирина = ПолучитьШиринуПоляДоговор(ОбщегоНазначенияБК.ЭтоДоговорСДСРП(Объект.ДоговорКонтрагента));
	Иначе 
		Элементы.Сделка.Доступность = Ложь;
		Элементы.КнопкаУСД.Видимость = Ложь;
		Элементы.ДоговорКонтрагента.МаксимальнаяШирина = ПолучитьШиринуПоляДоговор(Ложь);
	КонецЕсли;
	
	РаботаСДиалогамиКлиентСервер.УстановитьВидимостьСтруктурногоПодразделения(Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация);
	РаботаСДиалогамиКлиентСервер.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделениеОрганизация, Объект.СтруктурноеПодразделение, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	
	РаботаСДиалогами.УстановитьЗаголовокЭлементуУправленияУчитыватьКПН(Объект.Организация, Элементы.УчитыватьКПН);
	
	ТекущийДокументОснование = Объект.ДокументОснование;
	
	УправлениеФормой(ЭтаФорма);
	
	УстановитьДоступностьКомандыВставки(ЭтотОбъект, Не ОбщегоНазначения.ПустойБуферОбмена());
		
	ОбщегоНазначенияБК.УстановитьТекстАвтора(НадписьАвтор, Объект.Автор);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИтоги(Форма)

	Объект = Форма.Объект;
	
	Форма.ИтогиВсего  = УчетНДСиАкцизаКлиентСервер.ПолучитьСуммуДокументаСНДС(Объект, "Товары")
						 + УчетНДСиАкцизаКлиентСервер.ПолучитьСуммуДокументаСНДС(Объект, "ОС") 
						 + УчетНДСиАкцизаКлиентСервер.ПолучитьСуммуДокументаСНДС(Объект, "НМА") 
						 + Объект.Сумма
						 + ?(Объект.УчитыватьНДС И НЕ Объект.СуммаВключаетНДС,Объект.СуммаНДС,0);
						 
	Форма.ИтогиВсегоНДС = Объект.Товары.Итог("СуммаНДС") + Объект.ОС.Итог("СуммаНДС") + Объект.НМА.Итог("СуммаНДС") + ?(Объект.УчитыватьНДС, Объект.СуммаНДС,0);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТекущуюСтраницуОсновнойПанели()
	
	СписокТабличныхЧастей = Новый СписокЗначений;
	СписокТабличныхЧастей.Добавить("ОС"    , "ОС");
	СписокТабличныхЧастей.Добавить("Товары", "Товары");
	СписокТабличныхЧастей.Добавить("НМА", 	 "НМА");
	
	АктивизироватьТабличнуюЧасть = ОбщегоНазначенияБКВызовСервера.ПолучитьТекущуюВидимуюТабличнуюЧасть(
		ЭтаФорма, СписокТабличныхЧастей);
	ОбщегоНазначенияБКВызовСервера.АктивизироватьЭлементФормы(ЭтаФорма, АктивизироватьТабличнуюЧасть);

КонецПроцедуры 

&НаСервере
Процедура РаспределитьНаСервере()
	
	// расчет затрат по каждой позиции номенклатуры
	ТаблицаПоТоварам = Объект.Товары.Выгрузить();
	// Обнуление ранее рассчитанных сумм
	Для Каждого СтрокаТабличнойЧасти из Объект.Товары Цикл
		СтрокаТабличнойЧасти.СуммаРаспределения = 0;
		СтрокаТабличнойЧасти.СуммаРаспределенияНДС = 0;
	КонецЦикла;	
	
	ТаблицаПоОС 	 = Объект.ОС.Выгрузить();
	ТаблицаПоОС.Колонки.Добавить("Количество");
	ТаблицаПоОС.ЗаполнитьЗначения(1, "Количество");	
	// Обнуление ранее рассчитанных сумм
	Для Каждого СтрокаТабличнойЧасти из Объект.ОС Цикл
		СтрокаТабличнойЧасти.СуммаРаспределения = 0;
		СтрокаТабличнойЧасти.СуммаРаспределенияНДС = 0;
	КонецЦикла;	
	
	ТаблицаПоНМА 	 = Объект.НМА.Выгрузить();
	ТаблицаПоНМА.Колонки.Добавить("Количество");
	ТаблицаПоНМА.ЗаполнитьЗначения(1, "Количество");	
	// Обнуление ранее рассчитанных сумм
	Для Каждого СтрокаТабличнойЧасти из Объект.НМА Цикл
		СтрокаТабличнойЧасти.СуммаРаспределения = 0;
		СтрокаТабличнойЧасти.СуммаРаспределенияНДС = 0;
	КонецЦикла;	
	
	Если НЕ Объект.Сумма = 0 тогда
		
		СуммаКРаспределению = Объект.Сумма;
		НДСКРаспределению   = Объект.СуммаНДС;
		КолонкаБазиса       = ?(Объект.СпособРаспределения = Перечисления.СпособыРаспределенияДопРасходов.ПоКоличеству, "Количество",
		?(Объект.СпособРаспределения = Перечисления.СпособыРаспределенияДопРасходов.ПоСумме,      "СуммаТовара",""));
		
		Если НЕ ЗначениеЗаполнено(КолонкаБазиса) тогда
			//Не выбран способ распределения
			Возврат;
			
		ИначеЕсли (ТаблицаПоТоварам.Итог(КолонкаБазиса) + ТаблицаПоОС.Итог(КолонкаБазиса) + ТаблицаПоНМА.Итог(КолонкаБазиса)) = 0 тогда 
			//Базис распределения - пустая колонка!
			Возврат;
			
		КонецЕсли;
		
		БазисРаспределения = ТаблицаПоТоварам.ВыгрузитьКолонку(КолонкаБазиса);
		
		Для Каждого Строка ИЗ ТаблицаПоОС Цикл
			БазисРаспределения.Добавить(Строка[КолонкаБазиса]);
		КонецЦикла;
		
		Для Каждого Строка ИЗ ТаблицаПоНМА Цикл
			БазисРаспределения.Добавить(Строка[КолонкаБазиса]);
		КонецЦикла;
		
		ИтогРаспределения  = ОбщегоНазначенияБККлиентСервер.РаспределитьПропорционально(СуммаКРаспределению,БазисРаспределения);
		
		Если НЕ (НДСКРаспределению = 0) тогда
			ИтогРаспределенияНДС = ОбщегоНазначенияБККлиентСервер.РаспределитьПропорционально(НДСКРаспределению,БазисРаспределения);
		КонецЕсли;
		
		Для НомерСтрокиТаблицы = 0 по ИтогРаспределения.ВГраница() цикл
			
			Если не ИтогРаспределения[НомерСтрокиТаблицы] = 0 тогда
				Если НомерСтрокиТаблицы >= ТаблицаПоТоварам.Количество() Тогда
					Если НомерСтрокиТаблицы >= (ТаблицаПоТоварам.Количество() + ТаблицаПоОС.Количество()) Тогда
						Объект.НМА[НомерСтрокиТаблицы-(ТаблицаПоТоварам.Количество() + ТаблицаПоОС.Количество())].СуммаРаспределения = ИтогРаспределения[НомерСтрокиТаблицы];
					Иначе	
						Объект.ОС[НомерСтрокиТаблицы-ТаблицаПоТоварам.Количество()].СуммаРаспределения = ИтогРаспределения[НомерСтрокиТаблицы];
					КонецЕсли;	
				Иначе
					Объект.Товары[НомерСтрокиТаблицы].СуммаРаспределения  = ИтогРаспределения[НомерСтрокиТаблицы];
				КонецЕсли;
			КонецЕсли;
			
			Если Не(НДСКРаспределению = 0) тогда
				
				Если НЕ ИтогРаспределенияНДС[НомерСтрокиТаблицы] = 0 тогда
					Если НомерСтрокиТаблицы >= ТаблицаПоТоварам.Количество() Тогда
						Если НомерСтрокиТаблицы >= (ТаблицаПоТоварам.Количество() + ТаблицаПоОС.Количество()) Тогда
							Объект.НМА[НомерСтрокиТаблицы-(ТаблицаПоТоварам.Количество() + ТаблицаПоОС.Количество())].СуммаРаспределенияНДС  = ИтогРаспределенияНДС[НомерСтрокиТаблицы];
						Иначе	
							Объект.ОС[НомерСтрокиТаблицы-ТаблицаПоТоварам.Количество()].СуммаРаспределенияНДС  = ИтогРаспределенияНДС[НомерСтрокиТаблицы];
						КонецЕсли;	
					Иначе
						Объект.Товары[НомерСтрокиТаблицы].СуммаРаспределенияНДС  = ИтогРаспределенияНДС[НомерСтрокиТаблицы];
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;

	Для Каждого СтрокаТабличнойЧасти из Объект.Товары Цикл
		СтрокаТабличнойЧасти.СуммаРаспределения = СтрокаТабличнойЧасти.СуммаРаспределения+СтрокаТабличнойЧасти.Сумма;
		СтрокаТабличнойЧасти.СуммаРаспределенияНДС = СтрокаТабличнойЧасти.СуммаРаспределенияНДС+СтрокаТабличнойЧасти.СуммаНДС;
	КонецЦикла;	
	
	Для Каждого СтрокаТабличнойЧасти из Объект.ОС Цикл
		СтрокаТабличнойЧасти.СуммаРаспределения = СтрокаТабличнойЧасти.СуммаРаспределения+СтрокаТабличнойЧасти.Сумма;
		СтрокаТабличнойЧасти.СуммаРаспределенияНДС = СтрокаТабличнойЧасти.СуммаРаспределенияНДС+СтрокаТабличнойЧасти.СуммаНДС;
	КонецЦикла;	
		
	Для Каждого СтрокаТабличнойЧасти из Объект.НМА Цикл
		СтрокаТабличнойЧасти.СуммаРаспределения = СтрокаТабличнойЧасти.СуммаРаспределения+СтрокаТабличнойЧасти.Сумма;
		СтрокаТабличнойЧасти.СуммаРаспределенияНДС = СтрокаТабличнойЧасти.СуммаРаспределенияНДС+СтрокаТабличнойЧасти.СуммаНДС;
	КонецЦикла;	
	
	ОбновитьИтоги(ЭтаФорма);

КонецПроцедуры

// При изменении реквизитов (на сервере)

&НаСервере
Процедура ВидОперацииПриИзмененииНаСервере()
	
	ВидОперацииОбработатьИзменение();
	УстановитьТекущуюСтраницуОсновнойПанели();
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(Объект.ВидОперации), Объект.Ссылка, ЭтаФорма);
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ВидОперацииОбработатьИзменение()
	
	ПричиныИзмененияСчетовУчета = Новый Массив;
	ПричиныИзмененияСчетовУчета.Добавить("ВидОперации");
	
	ТребуетсяСчетФактура = Объект.ВидОперации <> Перечисления.ВидыОперацийПоступлениеДопРасходов.ВнутреннийРасход;
	ТекущийВидОперации   = Объект.ВидОперации;
	
	Если ТребуетсяСчетФактура Тогда 
		СчетФактура = ОбщегоНазначенияБК.НайтиПодчиненныйДокумент(Объект.Ссылка, "СчетФактураПолученный");
	КонецЕсли;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеДопРасходов.ВнутреннийРасход") 
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеДопРасходов.ПоступлениеОтНерезидента") Тогда
		
		Объект.Контрагент 				   = Неопределено;
		Объект.ДоговорКонтрагента 		   = Неопределено;
		Объект.Сделка                      = Неопределено;
		Объект.КратностьВзаиморасчетов     = 0;
		Объект.КурсВзаиморасчетов          = 0;
		
		Объект.УчитыватьНДС                = Ложь;
		Объект.СуммаВключаетНДС            = Ложь;
		Объект.НДСВключенВСтоимость        = Ложь;
		Объект.СтавкаНДС                   = Неопределено;
		Объект.СуммаНДС                    = 0;
		
		Для каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл
			СтрокаТабличнойЧасти.СуммаНДС = 0;
		КонецЦикла;
		
		Для каждого СтрокаТабличнойЧасти Из Объект.ОС Цикл
			СтрокаТабличнойЧасти.СуммаНДС = 0;
		КонецЦикла;
		
		Для каждого СтрокаТабличнойЧасти Из Объект.НМА Цикл
			СтрокаТабличнойЧасти.СуммаНДС = 0;
		КонецЦикла;
		
		СтруктураКурсаВалюты    	   = ОбщегоНазначенияБК.ПолучитьКурсВалюты(Объект.ВалютаДокумента, Объект.Дата);
		Объект.КурсВзаиморасчетов      = СтруктураКурсаВалюты.Курс;
		Объект.КратностьВзаиморасчетов = СтруктураКурсаВалюты.Кратность;
		
	Иначе
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(Объект, ВалютаРегламентированногоУчета, "Покупка");
	КонецЕсли;
	
	ОпределитьСписокДоступныхВидовДоговоровПоОперации();
	
	УчетНДСИАкцизаКлиентСервер.ЗаполнитьТекстПроСчетФактуру(ЭтаФорма, ДанныеСчетаФактуры, "НадписьСчетФактура", ТребуетсяСчетФактура);
	
	ЗаполнитьСчетаУчета(ПричиныИзмененияСчетовУчета, "ВидОперации");
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораСтруктурноеПодразделениеОрганизация(Параметры, СтруктураРезультатаВыполнения) Экспорт
							            		
	СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(Параметры, СтруктураРезультатаВыполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВопросОЗаполненииСчетовУчета(ИмяПроцедурыОбработкиВыбораПользователя, ДопПараметры = Неопределено, ДополнениеКВопросу = "")
	
	Если ДопПараметры = Неопределено Тогда 
		ДопПараметры = Новый Структура;
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru='%1Установить счета учета в соответствии со значениями по умолчанию?'");
	ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстВопроса, ДополнениеКВопросу);
	Режим = РежимДиалогаВопрос.ДаНет;
	Оповещение = Новый ОписаниеОповещения(ИмяПроцедурыОбработкиВыбораПользователя, ЭтотОбъект, ДопПараметры);
	ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
	
КонецПроцедуры

&НаСервере
Процедура СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(СтруктураПараметров = Неопределено, СтруктураРезультатаВыполнения = Неопределено)
	
	Если СтруктураПараметров = Неопределено 
		ИЛИ (СтруктураПараметров.Свойство("НеобходимоИзменитьЗначенияРеквизитовОбъекта") 
			И СтруктураПараметров.НеобходимоИзменитьЗначенияРеквизитовОбъекта) Тогда 
		РаботаСДиалогами.СтруктурноеПодразделениеПриИзменении(СтруктурноеПодразделениеОрганизация, Объект.Организация, Объект.СтруктурноеПодразделение, СтруктураПараметров);
	КонецЕсли;
	ПриИзмененииЗначенияОрганизацииСервер(СтруктураПараметров, СтруктураРезультатаВыполнения);
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииЗначенияОрганизацииСервер(СтруктураПараметров, СтруктураРезультатаВыполнения)
	
	Если НЕ СтруктураПараметров.ИзмененаОрганизация И НЕ СтруктураПараметров.ИзмененоСтруктурноеПодразделение Тогда
		Возврат;
	КонецЕсли;
	
	ПричиныИзмененияСчетовУчета = Новый Массив;
	Если СтруктураПараметров.ИзмененаОрганизация Тогда
		ПричиныИзмененияСчетовУчета.Добавить("Организация");
	КонецЕсли;
	
	ПриИзмененииЗначенияСтруктурногоПодразделенияСервер(СтруктураПараметров);
	
	УстановитьФункциональныеОпцииФормы();
	
	СтруктураРезультатаВыполнения = Неопределено;
	
	УчетАгентскогоНДС = УправлениеВзаиморасчетамиСервер.ПолучитьЗначениеНеобходимостиУчетаАгентскогоНДС(Объект.ВидОперации);
	Если УчетАгентскогоНДС <> Неопределено
	Тогда	
		РаботаСДиалогами.ПриИзмененииЗначенияОрганизации(Объект, Новый Структура("УчетАгентскогоНДС", УчетАгентскогоНДС), СтруктураРезультатаВыполнения);
	Иначе
		РаботаСДиалогами.ПриИзмененииЗначенияОрганизации(Объект, , СтруктураРезультатаВыполнения);
	КонецЕсли;
	
	ДоговорКонтрагентаОбработатьИзменение(СтруктураРезультатаВыполнения, ПричиныИзмененияСчетовУчета);
	
	// Очистим признаки учета налогов, т.к. они могли установиться в общей процедуре
	Если Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеДопРасходов.ВнутреннийРасход 
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеДопРасходов.ПоступлениеОтНерезидента Тогда
		Объект.УчитыватьНДС = Ложь;
		Объект.СуммаВключаетНДС = Ложь;
	КонецЕсли;
	
	ПроцедурыНалоговогоУчета.ПриИзмененииПризнакаОтраженияВНалоговомУчете(Объект.Организация, Объект.Дата, Объект.УчитыватьКПН, Истина);
	ПроцедурыНалоговогоУчета.ЗаполнитьВидУчетаНУ(Объект.УчитыватьКПН, Объект.ВидУчетаНУ);
	
	РаботаСДиалогами.УстановитьЗаголовокЭлементуУправленияУчитыватьКПН(Объект.Организация, Элементы.УчитыватьКПН);
	
	ПроцедурыБухгалтерскогоУчета.ПроверитьВладельцаСубконтоПодразделение(Объект,
							Объект.Организация, 
							Новый Структура("НазваниеСубконтоБУ1, НазваниеСубконтоБУ2, НазваниеСубконтоБУ3, 
											|СубконтоБУ1, СубконтоБУ2, СубконтоБУ3",
											"СубконтоБУ1", "СубконтоБУ2", "СубконтоБУ3", 
											Объект.СубконтоБУ1, Объект.СубконтоБУ2, Объект.СубконтоБУ3));
															
	ПроцедурыБухгалтерскогоУчета.ПроверитьВладельцаСубконтоПодразделение(Объект, 
							Объект.Организация, 
							Новый Структура("НазваниеСубконтоБУ1, НазваниеСубконтоБУ2, НазваниеСубконтоБУ3, 
											|СубконтоБУ1, СубконтоБУ2, СубконтоБУ3",
											"СубконтоНУ1", "СубконтоНУ2", "СубконтоНУ3", 
											Объект.СубконтоНУ1, Объект.СубконтоНУ2, Объект.СубконтоНУ3));
	
	УправлениеФормой(ЭтаФорма);
	
	Если ПричиныИзмененияСчетовУчета.Количество() > 0 Тогда
		ЗаполнитьСчетаУчета(ПричиныИзмененияСчетовУчета, "Организация");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииЗначенияСтруктурногоПодразделенияСервер(СтруктураПараметров)
	
	Если Объект.ОС.Количество() = 0 И Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеДопРасходов.УслугаСтороннейОрганизации Тогда
		Возврат;
	Конецесли;

	СтруктураРеквизитовШапки = Неопределено;
	Если Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеДопРасходов.ВнутреннийРасход Тогда
		СписокАналитикиСчетовШапки = Новый СписокЗначений;
		
		СписокАналитикиСчетовШапки.Добавить("БУ");// СчетБУ
		СписокАналитикиСчетовШапки.Добавить("НУ");// СчетНУ
		
		СтруктураРеквизитовШапки = Новый Структура("Объект, СписокАналитикиСчетовШапки", Объект, СписокАналитикиСчетовШапки);
	КонецЕсли;
	
	СписокТабличныхЧастей = Новый СписокЗначений;
	СписокРеквизитовПодразделения = Новый СписокЗначений;
	СписокРеквизитовПодразделения.Добавить("ПодразделениеОрганизации");
	
	СтруктураРеквизитов = Новый Структура("ТабличнаяЧасть, СписокРеквизитовПодразделения", Объект.ОС, СписокРеквизитовПодразделения);
	СписокТабличныхЧастей.Добавить(СтруктураРеквизитов);
	
	РаботаСДиалогами.ПроверитьСоответствиеПодразделения(Объект.Организация, Объект.СтруктурноеПодразделение, , СписокТабличныхЧастей, СтруктураРеквизитовШапки);
	
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииНаСервере(СтруктураРезультатаВыполнения)
	
	ЭтоВнутреннийРасход = Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеДопРасходов.ВнутреннийРасход;
	
	ИзменятьУчетНДС = Не ЭтоВнутреннийРасход;
	Если Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеДопРасходов.ПоступлениеОтНерезидента Тогда
		ИзменятьУчетНДС = Ложь;
	КонецЕсли;	
	
	РаботаСДиалогами.ПриИзмененииЗначенияДатыДокумента(Объект, ВалютаРегламентированногоУчета, , ИзменятьУчетНДС, СтруктураРезультатаВыполнения, ЭтоВнутреннийРасход);
    
	ПроцедурыНалоговогоУчета.ПриИзмененииПризнакаОтраженияВНалоговомУчете(Объект.Организация, Объект.Дата, Объект.УчитыватьКПН, Истина);
	ПроцедурыНалоговогоУчета.ЗаполнитьВидУчетаНУ(Объект.УчитыватьКПН, Объект.ВидУчетаНУ);
	
    УстановитьФункциональныеОпцииФормы();
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииНаСервере(СтруктураРезультатаВыполнения)
	
	КонтрагентОбработатьИзменение(СтруктураРезультатаВыполнения, Новый Массив);
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры 

&НаСервере
Процедура КонтрагентОбработатьИзменение(СтруктураРезультатаВыполнения, ПричиныИзмененияСчетовУчета)
	
	ПричиныИзмененияСчетовУчета.Добавить("Контрагент");
	
	УправлениеВзаиморасчетамиСервер.ПриИзмененииЗначенияКонтрагента(Объект, СтруктураДоступныхВидовДоговоров());	
	
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		ДоговорКонтрагентаОбработатьИзменение(СтруктураРезультатаВыполнения, ПричиныИзмененияСчетовУчета);
	КонецЕсли;
	
	ЗаполнитьСчетаУчета(ПричиныИзмененияСчетовУчета, "Контрагент");
	
КонецПроцедуры

&НаСервере
Процедура ДоговорКонтрагентаПриИзмененииНаСервере(СтруктураПараметров, СтруктураРезультатаВыполнения)

	ДоговорКонтрагентаОбработатьИзменение(СтруктураРезультатаВыполнения, Новый Массив);
	
КонецПроцедуры

&НаСервере
Процедура ДоговорКонтрагентаОбработатьИзменение(СтруктураРезультатаВыполнения, ПричиныИзмененияСчетовУчета)
	
	Если НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		Объект.УчастникиСовместнойДеятельности.Очистить();
		УправлениеФормой(ЭтаФорма);
		ТекущийДоговорКонтрагента = Неопределено;
		КурсВзаиморасчетов      = 0;
		КратностьВзаиморасчетов = 0;
		Элементы.КнопкаУСД.Видимость = Ложь;
		Элементы.ДоговорКонтрагента.МаксимальнаяШирина = ПолучитьШиринуПоляДоговор(Ложь);
		Возврат;
	КонецЕсли;

	ПричиныИзмененияСчетовУчета.Добавить("ДоговорКонтрагента");
	
	РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ДоговорКонтрагента, "ВалютаВзаиморасчетов,ВедениеВзаиморасчетов");
		
	СтруктураДанныхДоИзменения = Новый Структура("ВалютаДокумента, КурсВзаиморасчетов, КратностьВзаиморасчетов");
	ЗаполнитьЗначенияСвойств(СтруктураДанныхДоИзменения, Объект);
	
	СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов;
	
	УправлениеВзаиморасчетамиСервер.ПриИзмененииЗначенияДоговора(Объект, СпособЗаполненияЦен, ТекущийДоговорКонтрагента, , СтруктураРезультатаВыполнения);
	
	// для ТЧ "Товары" проверку пересчета сумм прописываем отдельно
	Если (Объект.Сумма <> 0 ИЛИ Объект.Товары.Итог("Сумма") <> 0 ИЛИ Объект.Товары.Итог("СуммаТовара") <> 0)
		И (Объект.ОС.Итог("Сумма") + Объект.НМА.Итог("Сумма") = 0) Тогда 
		
		Если ЗначениеЗаполнено(РеквизитыДоговора.ВалютаВзаиморасчетов) Тогда
			
			ЗаполнитьЗначенияСвойств(Объект, СтруктураДанныхДоИзменения);
			НоваяВалютаДокумента   = РеквизитыДоговора.ВалютаВзаиморасчетов;
			
			Если Объект.ВалютаДокумента <> НоваяВалютаДокумента Тогда
				
				ТекстВопроса = НСтр("ru = 'Договор с контрагентом предусматривает параметры взаиморасчетов,
		               			|отличные от установленных в документе:'") + Символы.ПС + 
							   СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Валюта документа: ""%1"", договора: ""%2"".'"),
							   ?(НЕ ЗначениеЗаполнено(Объект.ВалютаДокумента), НСтр("ru = 'Не задана'"), СокрЛП(Объект.ВалютаДокумента)),
							   СокрЛП(НоваяВалютаДокумента)) + Символы.ПС + НСтр("ru = 'Пересчитать документ в соответствии с договором?'");;
				
				СтруктураРезультатаВыполнения = Новый Структура;
				
				СтруктураРезультатаВыполнения.Вставить("ТекстВопроса", ТекстВопроса);
				СтруктураРезультатаВыполнения.Вставить("ВалютаВзаиморасчетов", НоваяВалютаДокумента);
				СтруктураРезультатаВыполнения.Вставить("НоваяВалютаДокумента", НоваяВалютаДокумента); 
				СтруктураРезультатаВыполнения.Вставить("ЕстьКурсВзаиморасчетов", Истина);
				СтруктураРезультатаВыполнения.Вставить("ЕстьКратностьВзаиморасчетов", Истина);
				
				СтруктураКурсаВзаиморасчетов   		= ОбщегоНазначенияБК.ПолучитьКурсВалюты(НоваяВалютаДокумента, Объект.Дата);
				СтруктураРезультатаВыполнения.Вставить("СтруктураКурсаВзаиморасчетов", СтруктураКурсаВзаиморасчетов);
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(СтруктураРезультатаВыполнения) = Тип("Структура") И НЕ СтруктураРезультатаВыполнения.Свойство("ВалютаВзаиморасчетов") Тогда 
		СтруктураРезультатаВыполнения.Вставить("ВалютаВзаиморасчетов", СтруктураРезультатаВыполнения.НоваяВалютаДокумента);
	КонецЕсли;
	
	Объект.Сделка = Неопределено;
	
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда 
		Элементы.Сделка.Доступность = (РеквизитыДоговора.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам) И Объект.ВидОперации <> Перечисления.ВидыОперацийПоступлениеДопРасходов.ВнутреннийРасход;
		Элементы.КнопкаУСД.Видимость = ОбщегоНазначенияБК.ЭтоДоговорСДСРП(Объект.ДоговорКонтрагента);
		Элементы.ДоговорКонтрагента.МаксимальнаяШирина = ПолучитьШиринуПоляДоговор(ОбщегоНазначенияБК.ЭтоДоговорСДСРП(Объект.ДоговорКонтрагента));
	Иначе 				
		Элементы.Сделка.Доступность = Ложь;
		Элементы.КнопкаУСД.Видимость = Ложь;
		Элементы.ДоговорКонтрагента.МаксимальнаяШирина = ПолучитьШиринуПоляДоговор(Ложь);
	КонецЕсли;
	
	ЗаполнениеДокументов.ЗаполнитьТабличнуюЧастьУчастникиСовместнойДеятельности(Объект.ДоговорКонтрагента, Объект.УчастникиСовместнойДеятельности);
	
	СформироватьНадписьЦеныИВалюта(ЭтаФорма);
	
	ТекущийДоговорКонтрагента = Объект.ДоговорКонтрагента;
	
	ЗаполнитьСчетаУчета(ПричиныИзмененияСчетовУчета, "ДоговорКонтрагента");
	
КонецПроцедуры

&НаСервере
Процедура УчитыватьКПНПриИзмененииНаСервере()
	
	ПроцедурыНалоговогоУчета.ЗаполнитьВидУчетаНУ(Объект.УчитыватьКПН, Объект.ВидУчетаНУ);
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗакрытияВопросаПриИзмененииДокументОснованиеНаСервере() Экспорт
	
	ИсходныеДанные = Новый Структура("ВидОперации, Организация, СтруктурноеПодразделение, Контрагент, ДоговорКонтрагента");
	ЗаполнитьЗначенияСвойств(ИсходныеДанные, Объект);
	
	ЗаполнитьПоДокументуОснованиюНаСервере();
	
	ПараметрыОбработки = Новый Структура;
	ПараметрыОбработки.Вставить("ИзмененаОрганизация", ИсходныеДанные.Организация <> Объект.Организация);
	ПараметрыОбработки.Вставить("ИзмененоСтруктурноеПодразделение", ИсходныеДанные.СтруктурноеПодразделение <> Объект.СтруктурноеПодразделение);
	ПараметрыОбработки.Вставить("ОчищатьНекорректныеЗначения", Истина);
	
	ПриИзмененииЗначенияОрганизацииСервер(ПараметрыОбработки, Неопределено);
	КонтрагентПриИзмененииНаСервере(Неопределено);
	ТекущийВидОперации = Объект.ВидОперации;
	
	УправлениеФормой(ЭтаФорма);
	УстановитьФункциональныеОпцииФормы();
	
	РаботаСДиалогамиКлиентСервер.УстановитьВидимостьСтруктурногоПодразделения(Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация);
	РаботаСДиалогамиКлиентСервер.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделениеОрганизация, Объект.СтруктурноеПодразделение, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоДокументуОснованиюНаСервере()

	// Заполним реквизиты из стандартного набора по документу основанию.
	ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(Объект, Объект.ДокументОснование);

	Если ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда

		Документы.ПоступлениеДопРасходов.ЗаполнитьТоварыПоСчетФактураПолученный(Объект, Объект.ДокументОснование);
		
	ИначеЕсли ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ПоступлениеНМА") Тогда
		
		Документы.ПоступлениеДопРасходов.ЗаполнитьПоПоступлениюНМА(Объект, Объект.ДокументОснование);
		
	ИначеЕсли ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		
		Документы.ПоступлениеДопРасходов.ЗаполнитьПоПоступлениюТоваров(Объект, Объект.ДокументОснование);
		
	ИначеЕсли ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ПоступлениеДопРасходов") Тогда
		
		Документы.ПоступлениеДопРасходов.ЗаполнитьПоПоступлениюДопРасходов(Объект, Объект.ДокументОснование);
		
	ИначеЕсли ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
		
		Документы.ПоступлениеДопРасходов.ЗаполнитьТоварыПоАвансовомуОтчету(Объект, Объект.ДокументОснование);
		
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОСОсновноеСредствоПриИзмененииНаСервере(СтрокаТабличнойЧасти, ПараметрыОбъекта, СчетаУчетаКЗаполнению)
	
	ЗаполненныеСчета = СчетаУчетаВДокументах.ЗаполнитьРеквизитыПриИзменении(
		Документы.ПоступлениеДопРасходов,
		СчетаУчетаКЗаполнению,
		ПараметрыОбъекта,
		"ОС",
		СтрокаТабличнойЧасти);
	
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ЗаполненныеСчета);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ТоварыНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, ПараметрыОбъекта, СчетаУчетаКЗаполнению)
	
	МетаданныеДокумента = ПараметрыОбъекта.Ссылка.Метаданные();
	
	СведенияОНоменклатуре = ОбработкаТабличныхЧастей.ПолучитьСведенияОНоменклатуре(СтрокаТабличнойЧасти.Номенклатура, ПараметрыОбъекта);
	
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.ЕдиницаИзмерения  = СведенияОНоменклатуре.БазоваяЕдиницаИзмерения;
	СтрокаТабличнойЧасти.Коэффициент	   = СведенияОНоменклатуре.Коэффициент;
	
	ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуЦенуПокупкиТабЧасти(СтрокаТабличнойЧасти, ПараметрыОбъекта, "Товары", МетаданныеДокумента); 
	
	ЗаполненныеСчета = СчетаУчетаВДокументах.ЗаполнитьРеквизитыПриИзменении(
		Документы.ПоступлениеДопРасходов,
		СчетаУчетаКЗаполнению,
		ПараметрыОбъекта,
		"Товары",
		СтрокаТабличнойЧасти);
	
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ЗаполненныеСчета);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура НМАНематериальныйАктивПриИзмененииНаСервере(СтрокаТабличнойЧасти, ПараметрыОбъекта, СчетаУчетаКЗаполнению)
	
	ЗаполненныеСчета = СчетаУчетаВДокументах.ЗаполнитьРеквизитыПриИзменении(
		Документы.ПоступлениеДопРасходов,
		СчетаУчетаКЗаполнению,
		ПараметрыОбъекта,
		"НМА",
		СтрокаТабличнойЧасти);
	
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ЗаполненныеСчета);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СчетБУПриИзмененииНаСервере(ДанныеОбъекта)

	ПроцедурыБухгалтерскогоУчета.ПроверитьВладельцаСубконтоПодразделение(ДанныеОбъекта, 
							ДанныеОбъекта.Организация, 
							Новый Структура("НазваниеСубконтоБУ1, НазваниеСубконтоБУ2, НазваниеСубконтоБУ3, 
											|СубконтоБУ1, СубконтоБУ2, СубконтоБУ3",
											"СубконтоБУ1", "СубконтоБУ2", "СубконтоБУ3", 
											ДанныеОбъекта.СубконтоБУ1, ДанныеОбъекта.СубконтоБУ2, ДанныеОбъекта.СубконтоБУ3));
															
	ПроцедурыБухгалтерскогоУчета.ПроверитьВладельцаСубконтоПодразделение(ДанныеОбъекта, 
							ДанныеОбъекта.Организация, 
							Новый Структура("НазваниеСубконтоБУ1, НазваниеСубконтоБУ2, НазваниеСубконтоБУ3, 
											|СубконтоБУ1, СубконтоБУ2, СубконтоБУ3",
											"СубконтоНУ1", "СубконтоНУ2", "СубконтоНУ3", 
											ДанныеОбъекта.СубконтоНУ1, ДанныеОбъекта.СубконтоНУ2, ДанныеОбъекта.СубконтоНУ3));

КонецПроцедуры

&НаСервереБезКонтекста
Процедура СчетНУПриИзмененииНаСервере(ДанныеОбъекта)

	ПроцедурыБухгалтерскогоУчета.ПроверитьВладельцаСубконтоПодразделение(ДанныеОбъекта, 
							ДанныеОбъекта.Организация, 
							Новый Структура("НазваниеСубконтоБУ1, НазваниеСубконтоБУ2, НазваниеСубконтоБУ3, 
											|СубконтоБУ1, СубконтоБУ2, СубконтоБУ3",
											"СубконтоНУ1", "СубконтоНУ2", "СубконтоНУ3", 
											ДанныеОбъекта.СубконтоНУ1, ДанныеОбъекта.СубконтоНУ2, ДанныеОбъекта.СубконтоНУ3));

КонецПроцедуры

// Цены и валюта

&НаКлиенте
Процедура ПослеЗакрытияФормыЦеныИВалюта(Результат, Параметры) Экспорт
	
	УправлениеЦенообразованиемКлиент.ПослеЗакрытияФормыЦеныИВалюта(Результат, Параметры);
	
	Если НЕ Результат = Неопределено 
		 И Результат.ЗначенияПриОткрытии.ВалютаДокумента <> Результат.ЗначенияПриЗакрытии.ВалютаДокумента Тогда
		
		СтараяВалюта = Результат.ЗначенияПриОткрытии.ВалютаДокумента;
		НоваяВалюта  = Результат.ЗначенияПриЗакрытии.ВалютаДокумента;
		СтарыйКурс = Результат.ЗначенияПриОткрытии.КурсДокумента;
		СтараяКратность = Результат.ЗначенияПриОткрытии.КратностьДокумента;
		
		Если НоваяВалюта <> СтараяВалюта Тогда
			
			Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеДопРасходов.ВнутреннийРасход") Тогда
				Объект.КурсВзаиморасчетов      = Результат.ЗначенияПриЗакрытии.КурсДокумента;
				Объект.КратностьВзаиморасчетов = Результат.ЗначенияПриЗакрытии.КратностьДокумента;
			КонецЕсли;
			
		КонецЕсли;
		
		ПересчетСуммДокумента(СтараяВалюта, НоваяВалюта, СтарыйКурс, СтараяКратность);

	КонецЕсли;
	
	Если НЕ Результат = Неопределено   Тогда

		Объект.Сумма = ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(Объект.Сумма, 
			                                                 Неопределено, 
													         Результат.ЗначенияПриОткрытии.СуммаВключаетНДС, 
													         Результат.ЗначенияПриЗакрытии.УчитыватьНДС, 
													         Результат.ЗначенияПриЗакрытии.СуммаВключаетНДС, 
													         УчетНДСиАкцизаВызовСервераПовтИсп.ПолучитьСтавкуНДС(Объект.СтавкаНДС));
															 
		Если НЕ Объект.УчитыватьНДС Тогда
			Объект.СтавкаНДС = Неопределено;
			Объект.СуммаНДС  = 0;
		ИначеЕсли НЕ ЗначениеЗаполнено(Объект.СтавкаНДС) Тогда
			Объект.СтавкаНДС = ПослеЗакрытияФормыЦеныИВалютаНаСервереБезКонтекста("ОсновнаяСтавкаНДС").ОсновнаяСтавкаНДС;
			Объект.СуммаНДС  = УчетНДСиАкцизаКлиентСервер.РассчитатьСуммуНДС(Объект.Сумма,
															Объект.УчитыватьНДС, 
															Объект.СуммаВключаетНДС,
															УчетНДСиАкцизаВызовСервераПовтИсп.ПолучитьСтавкуНДС(Объект.СтавкаНДС));
		КонецЕсли;
		
		Для каждого СтрокаТабличнойЧасти из Объект.Товары Цикл
			РассчитатьСуммуНДСВТабличнойЧасти(СтрокаТабличнойЧасти);
		КонецЦикла;
		
		Для Каждого СтрокаТабличнойЧасти из Объект.ОС Цикл
			РассчитатьСуммуНДСВТабличнойЧасти(СтрокаТабличнойЧасти);
		КонецЦикла;

		Для Каждого СтрокаТабличнойЧасти из Объект.НМА Цикл
			РассчитатьСуммуНДСВТабличнойЧасти(СтрокаТабличнойЧасти);
		КонецЦикла;

	КонецЕсли;
	
	Если НЕ Результат = Неопределено 
		 И Результат.ЗначенияПриОткрытии.ОтложитьПринятиеНДСКЗачету <> Результат.ЗначенияПриЗакрытии.ОтложитьПринятиеНДСКЗачету Тогда
	
		ПричиныИзмененияСчетовУчета = Новый Массив;
		ПричиныИзмененияСчетовУчета.Добавить("ОтложитьПринятиеНДСКЗачету");
	    ЗаполнитьСчетаУчета(ПричиныИзмененияСчетовУчета, "ОтложитьПринятиеНДСКЗачету");
		
	КонецЕсли;
	
	ОбновитьИтоги(ЭтаФорма);
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

 &НаСервереБезКонтекста
Функция ПослеЗакрытияФормыЦеныИВалютаНаСервереБезКонтекста(СтрокаНастроек) 	
	Возврат ПользователиБКВызовСервераПовтИсп.ЗначенияНастроекПользователя(Пользователи.ТекущийПользователь(), СтрокаНастроек);	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьНадписьЦеныИВалюта(Форма)

	Объект = Форма.Объект;
	Форма.ЦеныИВалюта = ОбщегоНазначенияБККлиентСервер.СформироватьНадписьЦеныИВалюта(Объект);
	
	Форма.Элементы.ГруппаИтогиНДС.Видимость = Объект.УчитыватьНДС;

	Если Объект.СуммаВключаетНДС Тогда
		Форма.Элементы.ГруппаИтогиНДС.ПодчиненныеЭлементы.ИтогиВсегоНДС.Заголовок = НСтр("ru='НДС (в т. ч.)'");
	Иначе
		Форма.Элементы.ГруппаИтогиНДС.ПодчиненныеЭлементы.ИтогиВсегоНДС.Заголовок = НСтр("ru='НДС (сверху)'");
	КонецЕсли;

КонецПроцедуры

// Подбор товаров

&НаКлиенте
Функция ПолучитьПараметрыПодбора(ИмяТаблицы, ПредставлениеТаблицы="")

	ДатаРасчетов		 = ?(НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДата()), Неопределено, Объект.Дата);
	
	ЗаголовокПодбора	 = НСтр("ru = 'Подбор номенклатуры в %1 (%2)'");
	
	ЗаголовокПодбора     = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ЗаголовокПодбора, Объект.Ссылка, ПредставлениеТаблицы);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ДатаРасчетов"            , ДатаРасчетов);
	ПараметрыФормы.Вставить("Организация"             , Объект.Организация);
	ПараметрыФормы.Вставить("СтруктурноеПодразделение", Объект.СтруктурноеПодразделение);
	ПараметрыФормы.Вставить("Заголовок"               , ЗаголовокПодбора);
	ПараметрыФормы.Вставить("ИмяТаблицы"              , ИмяТаблицы);
	ПараметрыФормы.Вставить("Товар"                   , ИмяТаблицы = "Товары");
	ПараметрыФормы.Вставить("ЕстьЦена"                , Ложь);
	ПараметрыФормы.Вставить("ВалютаДокумента"         , Объект.ВалютаДокумента);
	ПараметрыФормы.Вставить("ВыбиратьВсе"             , Истина);
	ПараметрыФормы.Вставить("Приход"                  , Истина);
	
	СписокЗапросов = Новый СписокЗначений();
	СписокЗапросов.Добавить("ПоСправочнику", НСтр("ru='По справочнику'"));
	
	ПараметрыФормы.Вставить("СписокВидовПодбора", СписокЗапросов);
	ПараметрыФормы.Вставить("ОбъектСсылка"      , Объект.Ссылка);
	
	Возврат ПараметрыФормы;

КонецФункции

&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИмяТаблицы)
	
	ЭтоВставкаИзБуфера = ВыбранноеЗначение.Свойство("ЭтоВставкаИзБуфера");	
	СписокСвойств = Неопределено;
	
	Если ЭтоВставкаИзБуфера Тогда		
		ТаблицаТоваров = ВыбранноеЗначение.Данные;
		СписокСвойств = ВыбранноеЗначение.СписокСвойств;		
	Иначе                                               		
		ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресПодобраннойНоменклатурыВХранилище);		
	КонецЕсли;
	
	ДанныеОбъекта = Новый Структура("Дата, Организация");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	СоответствиеСведенийОНоменклатуре = ОбработкаТабличныхЧастей.ПолучитьСведенияОСпискеНоменклатуры(
	ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаТоваров, "Номенклатура", Истина), ДанныеОбъекта);
	
	СтрокиДляЗаполненияСчетов = Новый Массив;
	
	Для Каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		СтрокаТабличнойЧасти =  Неопределено; 
		
		Если НЕ ЭтоВставкаИзБуфера Тогда
			СтруктураОтбора = Новый Структура();
			СтруктураОтбора.Вставить("Номенклатура", 		СтрокаТовара.Номенклатура);
			СтруктураОтбора.Вставить("ЕдиницаИзмерения", СтрокаТовара.ЕдиницаИзмерения);
			
			СтрокаТабличнойЧасти = ОбработкаТабличныхЧастейКлиентСервер.НайтиСтрокуТабЧасти(Объект, "Товары", СтруктураОтбора);
		КонецЕсли;
		
		Если СтрокаТабличнойЧасти <> Неопределено Тогда
			// Нашли, увеличиваем количество в первой найденной строке.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + СтрокаТовара.Количество;
		Иначе
			
			СведенияОНоменклатуре = СоответствиеСведенийОНоменклатуре.Получить(СтрокаТовара.Номенклатура);
			
			Если ЭтоВставкаИзБуфера 
				И СведенияОНоменклатуре <> Неопределено
				И ЗначениеЗаполнено(СведенияОНоменклатуре.Услуга)
				И СведенияОНоменклатуре.Услуга Тогда
				
				Продолжить;
				
			КонецЕсли;        
			
			СтрокаТабличнойЧасти = Объект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТовара, СписокСвойств);
			СтрокиДляЗаполненияСчетов.Добавить(СтрокаТабличнойЧасти);
			
			Если СведенияОНоменклатуре = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаТабличнойЧасти.Коэффициент = 1;
			
		КонецЕсли;
	КонецЦикла;
	
	СчетаУчетаВДокументах.ЗаполнитьСтроки(СтрокиДляЗаполненияСчетов, ИмяТаблицы, Объект, Документы.ПоступлениеДопРасходов);
	
КонецПроцедуры

// Служебные процедуры и функции

&НаСервере
Процедура ОбработкаОповещенияЗаписиСчетаФактурыНаСервере()
	
	// Может быть проведен исправленный счет-фактура,
	// в этом случае нужно обновить ссылку на счет-фактуру.	
	ЭтаФорма.СчетФактура = Неопределено;
	
	УчетНДСИАкциза.ПолучитьДанныеСчетаФактуры(ЭтаФорма, "СчетФактураПолученный");
	УчетНДСИАкцизаКлиентСервер.ЗаполнитьТекстПроСчетФактуру(ЭтаФорма, ДанныеСчетаФактуры, "НадписьСчетФактура", ТребуетсяСчетФактура);
	УчетНДСиАкцизаКлиентСервер.УправлениеГруппойСчетаФактуры(ЭтаФорма, , ТребуетсяСчетФактура);
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСуммуНДСВТабличнойЧасти(СтрокаТабличнойЧасти)
	
	СтрокаТабличнойЧасти.СуммаНДС = УчетНДСиАкцизаКлиентСервер.РассчитатьСуммуНДС(СтрокаТабличнойЧасти.Сумма,
																						Объект.УчитыватьНДС, 
																						Объект.СуммаВключаетНДС,
																						УчетНДСиАкцизаВызовСервераПовтИсп.ПолучитьСтавкуНДС(Объект.СтавкаНДС));
		
	СтрокаТабличнойЧасти.СуммаРаспределенияНДС = УчетНДСиАкцизаКлиентСервер.РассчитатьСуммуНДС(СтрокаТабличнойЧасти.СуммаРаспределения,
																									Объект.УчитыватьНДС, 
																									Объект.СуммаВключаетНДС,
																									УчетНДСиАкцизаВызовСервераПовтИсп.ПолучитьСтавкуНДС(Объект.СтавкаНДС));
	ОбновитьИтоги(ЭтаФорма);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьРеквизитыНалоговогоУчетаНаСервере(СтрокаТабличнойЧасти, ИмяТабличнойЧасти, ПараметрыОбъекта, СчетаУчетаКЗаполнению)
		
	ЗаполненныеСчета = СчетаУчетаВДокументах.ЗаполнитьРеквизитыПриИзменении(
		Документы.ПоступлениеДопРасходов,
		СчетаУчетаКЗаполнению,
		ПараметрыОбъекта,
		ИмяТабличнойЧасти,
		СтрокаТабличнойЧасти);
	
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ЗаполненныеСчета);
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчетСуммДокумента(СтараяВалютаДокумента, НоваяВалютаДокумента, СтарыйКурс = 0, СтараяКратность = 0, ТолькоСуммыТовара = Истина)

	Если СтараяВалютаДокумента = НоваяВалютаДокумента Тогда

		Для каждого СтрокаТабличнойЧасти из Объект.Товары Цикл
			РассчитатьСуммуНДСВТабличнойЧасти(СтрокаТабличнойЧасти);
		КонецЦикла;
		
		Для Каждого СтрокаТабличнойЧасти из Объект.ОС Цикл
			РассчитатьСуммуНДСВТабличнойЧасти(СтрокаТабличнойЧасти);
		КонецЦикла;

		Для Каждого СтрокаТабличнойЧасти из Объект.НМА Цикл
			РассчитатьСуммуНДСВТабличнойЧасти(СтрокаТабличнойЧасти);
		КонецЦикла;

		Объект.СуммаНДС = УчетНДСиАкцизаКлиентСервер.РассчитатьСуммуНДС(Объект.Сумма,
																		Объект.УчитыватьНДС, 
																		Объект.СуммаВключаетНДС,
																		УчетНДСиАкцизаВызовСервераПовтИсп.ПолучитьСтавкуНДС(Объект.СтавкаНДС));
	
		Возврат;

	КонецЕсли;

	СтруктураРезультатаВыполнения = Неопределено;
	ПолучитьКурсКратность(Объект, НоваяВалютаДокумента, СтруктураРезультатаВыполнения);
	СтруктураКурсаДокумента = СтруктураРезультатаВыполнения.СтруктураКурсаДокумента;
	НовыйКурсДокумента      = СтруктураКурсаДокумента.Курс;
	НовыйКратностьДокумента = СтруктураКурсаДокумента.Кратность;

	СтарыйКурс      = ?(СтарыйКурс = 0,       СтруктураРезультатаВыполнения.КурсДокумента,      СтарыйКурс);
	СтараяКратность = ?(СтараяКратность = 0,  СтруктураРезультатаВыполнения.КратностьДокумента, СтараяКратность);

	Для каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл

		Если ТолькоСуммыТовара Тогда
			СтрокаТабличнойЧасти.Сумма = ОбщегоНазначенияБККлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.Сумма,
													СтараяВалютаДокумента, НоваяВалютаДокумента,
													СтарыйКурс, НовыйКурсДокумента,
													СтараяКратность, НовыйКратностьДокумента);
		КонецЕсли;

		СтрокаТабличнойЧасти.СуммаТовара = ОбщегоНазначенияБККлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.СуммаТовара,
												СтараяВалютаДокумента, НоваяВалютаДокумента,
												СтарыйКурс, НовыйКурсДокумента,
												СтараяКратность, НовыйКратностьДокумента);

		РассчитатьСуммуНДСВТабличнойЧасти(СтрокаТабличнойЧасти);

	КонецЦикла;
	
	Для каждого СтрокаТабличнойЧасти Из Объект.ОС Цикл

		Если ТолькоСуммыТовара Тогда
			СтрокаТабличнойЧасти.Сумма = ОбщегоНазначенияБККлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.Сумма,
													СтараяВалютаДокумента, НоваяВалютаДокумента,
													СтарыйКурс, НовыйКурсДокумента,
													СтараяКратность, НовыйКратностьДокумента);
		КонецЕсли;

		СтрокаТабличнойЧасти.СуммаТовара = ОбщегоНазначенияБККлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.СуммаТовара,
												СтараяВалютаДокумента, НоваяВалютаДокумента,
												СтарыйКурс, НовыйКурсДокумента,
												СтараяКратность, НовыйКратностьДокумента);

		РассчитатьСуммуНДСВТабличнойЧасти(СтрокаТабличнойЧасти);

	КонецЦикла;

	Для каждого СтрокаТабличнойЧасти Из Объект.НМА Цикл

		Если ТолькоСуммыТовара Тогда
			СтрокаТабличнойЧасти.Сумма = ОбщегоНазначенияБККлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.Сумма,
													СтараяВалютаДокумента, НоваяВалютаДокумента,
													СтарыйКурс, НовыйКурсДокумента,
													СтараяКратность, НовыйКратностьДокумента);
		КонецЕсли;

		СтрокаТабличнойЧасти.СуммаТовара = ОбщегоНазначенияБККлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.СуммаТовара,
												СтараяВалютаДокумента, НоваяВалютаДокумента,
												СтарыйКурс, НовыйКурсДокумента,
												СтараяКратность, НовыйКратностьДокумента);

		РассчитатьСуммуНДСВТабличнойЧасти(СтрокаТабличнойЧасти);

	КонецЦикла;

	Объект.Сумма = ОбщегоНазначенияБККлиентСервер.ПересчитатьИзВалютыВВалюту(Объект.Сумма,
																			 СтараяВалютаДокумента, НоваяВалютаДокумента,
																			 СтарыйКурс, НовыйКурсДокумента,
																			 СтараяКратность, НовыйКратностьДокумента);

	Объект.СуммаНДС = УчетНДСиАкцизаКлиентСервер.РассчитатьСуммуНДС(Объект.Сумма,
																	Объект.УчитыватьНДС, 
																	Объект.СуммаВключаетНДС,
																	УчетНДСиАкцизаВызовСервераПовтИсп.ПолучитьСтавкуНДС(Объект.СтавкаНДС));
																	
	ОбновитьИтоги(ЭтаФорма);

КонецПроцедуры
																		
&НаСервереБезКонтекста
Процедура ПолучитьКурсКратность(ЗНАЧ Объект, НоваяВалютаДокумента, СтруктураРезультатаВыполнения)
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	СтруктураКурсаДокумента = ОбщегоНазначенияБК.ПолучитьКурсВалюты(НоваяВалютаДокумента, Объект.Дата);
	
	КурсДокумента = ОбщегоНазначенияБК.КурсДокумента(Объект, ВалютаРегламентированногоУчета);
	КратностьДокумента = ОбщегоНазначенияБК.КратностьДокумента(Объект, ВалютаРегламентированногоУчета);
	
	СтруктураРезультатаВыполнения = Новый Структура;

	СтруктураРезультатаВыполнения.Вставить("СтруктураКурсаДокумента", СтруктураКурсаДокумента);
	СтруктураРезультатаВыполнения.Вставить("КурсДокумента", КурсДокумента);
	СтруктураРезультатаВыполнения.Вставить("КратностьДокумента", КратностьДокумента);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СтруктураДоступныхВидовДоговоров()
        
    СписокВидовДоговоров = Новый Массив;
    СписокВидовДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком"));
    СписокВидовДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.Прочее"));
    
    СтруктураВидовДоговоров = Новый Структура("СписокДопустимыхВидовДоговоров", СписокВидовДоговоров);
    
    Возврат СтруктураВидовДоговоров;

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСодержаниеНоменклатурыНаСервере(Номенклатура)

	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Номенклатура, "Наименование, НаименованиеПолное");
	Возврат ?(ПустаяСтрока(ЗначенияРеквизитов.НаименованиеПолное), ЗначенияРеквизитов.Наименование, ЗначенияРеквизитов.НаименованиеПолное);

КонецФункции

// Обработчики, вызываемые после окончания интерактивных действий пользователя

&НаКлиенте
Процедура ЗаполнитьТабличнуЧастьДаннымиДокументаПоступления(ИмяОбработчика, ИмяФормыДокумента = "Документ.ПоступлениеТоваровУслуг.Форма.ФормаВыбора") Экспорт
		
	Обработчик 			 = Новый ОписаниеОповещения(ИмяОбработчика, ЭтотОбъект);
    Режим 				 = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
	СтруктураОтбора	= Новый Структура;
	СтруктураОтбора.Вставить("Организация",	Объект.Организация);
	
	СтруктураПараметров	= Новый Структура;
	СтруктураПараметров.Вставить("Отбор",              СтруктураОтбора);
	СтруктураПараметров.Вставить("РежимВыбора",        Истина);
	СтруктураПараметров.Вставить("МножественныйВыбор", Ложь);
	
	ОткрытьФорму(ИмяФормыДокумента, СтруктураПараметров,,,,, Обработчик, Режим);	

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаЗаполнитьОС(Результат, Параметры) Экспорт
		
	Если НЕ Результат = КодВозвратаДиалога.Да Тогда
		Возврат;	
	КонецЕсли;

	Объект.ОС.Очистить();
	
	ЗаполнитьТабличнуЧастьДаннымиДокументаПоступления("ПоступлениеОСЗавершениеВыбора");
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаЗаполнитьТМЗ(Результат, Параметры) Экспорт
		
	Если НЕ Результат = КодВозвратаДиалога.Да Тогда
		Возврат;	
	КонецЕсли;

	Объект.Товары.Очистить();
	
	ЗаполнитьТабличнуЧастьДаннымиДокументаПоступления("ПоступлениеТМЗЗавершениеВыбора");

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаЗаполнитьНМА(Результат, Параметры) Экспорт
	
	Если НЕ Результат = КодВозвратаДиалога.Да Тогда
		Возврат;	
	КонецЕсли;

	Объект.НМА.Очистить();
	
	ЗаполнитьТабличнуЧастьДаннымиДокументаПоступления("ПоступлениеНМАЗавершениеВыбора","Документ.ПоступлениеНМА.ФормаВыбора");	    
		
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораСтруктурногоПодразделения(Результат, Параметры) Экспорт
	
	РаботаСДиалогамиКлиент.ПослеВыбораСтруктурногоПодразделения(Результат, Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация);
	СтруктураРезультатаВыполнения = Неопределено;
	Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
		Модифицированность = Истина;
		Результат.Вставить("НеобходимоИзменитьЗначенияРеквизитовОбъекта", Ложь);
		Если НЕ ПоказыватьВДокументахСчетаУчета Тогда 
			Результат.Вставить("ПерезаполнитьСчетаУчета", Истина);
		КонецЕсли;
		ПослеВыбораСтруктурноеПодразделениеОрганизация(Результат, СтруктураРезультатаВыполнения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаПоИзменениюДаты(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;

	Если Параметры.Свойство("КурсВзаиморасчетов") Тогда
		Объект.КурсВзаиморасчетов      = Параметры.КурсВзаиморасчетов;
	КонецЕсли;
	
	Если Параметры.Свойство("КратностьВзаиморасчетов") Тогда
		Объект.КратностьВзаиморасчетов = Параметры.КратностьВзаиморасчетов;
	КонецЕсли;
	
	СформироватьНадписьЦеныИВалюта(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаПриИзмененииДокументОснование(Результат, Параметры) Экспорт
	
	Если НЕ Результат = КодВозвратаДиалога.Да Тогда
		Возврат;	
	КонецЕсли;

	Объект.Товары.Очистить();
	Объект.НМА.Очистить();
	Объект.ОС.Очистить();

	ПослеЗакрытияВопросаПриИзмененииДокументОснованиеНаСервере();

КонецПроцедуры

// Обработчики команд заполнения документа и табличных частей

&НаКлиенте                          
Процедура ПоступлениеОСЗавершениеВыбора(ВыбранноеЗначение, Параметры) Экспорт

	ДокументПоступление = ВыбранноеЗначение;
	ПоступлениеОСЗавершениеВыбораНаСервере(ДокументПоступление);
	
КонецПроцедуры

&НаСервере                          
Процедура ПоступлениеОСЗавершениеВыбораНаСервере(ДокументПоступление) Экспорт

	Документы.ПоступлениеДопРасходов.ЗаполнитьПоПоступлениюОС(Объект, ДокументПоступление);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоступлениеТМЗЗавершениеВыбора(ВыбранноеЗначение, Параметры) Экспорт

	ДокументПоступление = ВыбранноеЗначение;
	ПоступлениеТМЗЗавершениеВыбораНаСервере(ДокументПоступление);
		
КонецПроцедуры

&НаСервере
Процедура ПоступлениеТМЗЗавершениеВыбораНаСервере(ДокументПоступление) Экспорт
	
	 Документы.ПоступлениеДопРасходов.ЗаполнитьПоПоступлениюТМЗ(Объект, ДокументПоступление);
	
 КонецПроцедуры 
 
 &НаКлиенте
Процедура ПоступлениеНМАЗавершениеВыбора(ВыбранноеЗначение, Параметры) Экспорт

	ДокументПоступление = ВыбранноеЗначение;
	ПоступлениеНМАЗавершениеВыбораНаСервере(ДокументПоступление);
	
КонецПроцедуры

 &НаСервере
Процедура ПоступлениеНМАЗавершениеВыбораНаСервере(ДокументПоступление) Экспорт
	
	Документы.ПоступлениеДопРасходов.ЗаполнитьПоПоступлениюНМА(Объект, ДокументПоступление);
	
КонецПроцедуры

// Процедуры работы со счетами и субконто

&НаКлиентеНаСервереБезКонтекста
Функция СписокПараметровВыбораСубконто(Форма, ПараметрыОбъекта, ШаблонИмяПоляОбъекта, ИмяСчета)

	СписокПараметров = Новый Структура;
	Для Индекс = 1 По 3 Цикл
		ИмяПоля = СтрЗаменить(ШаблонИмяПоляОбъекта, "%Индекс%", Индекс);
		Если ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Контрагенты") Тогда
			СписокПараметров.Вставить("Контрагент", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ПроцедурыБухгалтерскогоУчетаКлиентСерверПереопределяемый.ПолучитьОписаниеТиповДоговора().СодержитТип(ТипЗнч(ПараметрыОбъекта[ИмяПоля])) Тогда
			СписокПараметров.Вставить("ДоговорКонтрагента", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Номенклатура") Тогда
			СписокПараметров.Вставить("Номенклатура", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Склады") Тогда
			СписокПараметров.Вставить("Склад", ПараметрыОбъекта[ИмяПоля]);
		КонецЕсли;
	КонецЦикла;
	СписокПараметров.Вставить("СчетУчета", ПараметрыОбъекта[ИмяСчета]);	
	СписокПараметров.Вставить("Организация", Форма.Объект.Организация);
	СписокПараметров.Вставить("СтруктурноеПодразделение", ПараметрыОбъекта.СтруктурноеПодразделение);
	СписокПараметров.Вставить("ВыбиратьПодразделенияОрганизации", Истина);	

	Возврат СписокПараметров;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьПараметрыВыбораПолейСубконто(Форма, Суффикс, ИмяСчета, ИмяТабличнойЧасти = "")
	
	Если Не Форма.ПоказыватьВДокументахСчетаУчета Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяТабличнойЧасти = "" Тогда
		ПараметрыДокумента = СписокПараметровВыбораСубконто(Форма, Форма.Объект, "Субконто" + Суффикс + "%Индекс%", ИмяСчета);
		ПроцедурыБухгалтерскогоУчетаКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(Форма, Форма.Объект, "Субконто" + Суффикс + "%Индекс%", "Субконто" + Суффикс + "%Индекс%", ПараметрыДокумента);	
	Иначе
		ТекущаяСтрока  = Форма.Элементы.Товары.ТекущаяСтрока;
		ТекущиеДанные = Форма.Объект.Товары.НайтиПоИдентификатору(Форма.Элементы.Товары.ТекущаяСтрока);
			
		ПараметрыДокумента = СписокПараметровВыбораСубконто(Форма, ТекущиеДанные, "Субконто" + Суффикс + "%Индекс%", ИмяСчета);
		ПроцедурыБухгалтерскогоУчетаКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(Форма, ТекущиеДанные, "Субконто" + Суффикс + "%Индекс%", "ТоварыСубконто" + Суффикс + "%Индекс%", ПараметрыДокумента);
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьТабличнуюЧасть(ИмяТабличнойЧасти, СинонимТабличнойЧасти)
	
	ПараметрыФормы = ПолучитьПараметрыОбработкиТабличнойЧасти(ИмяТабличнойЧасти, СинонимТабличнойЧасти);
	Если ПараметрыФормы <> Неопределено Тогда
		ОткрытьФорму("Обработка.ОбработкаТабличнойЧастиДокументов.Форма.Форма", ПараметрыФормы,
			ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Функция ПолучитьПараметрыОбработкиТабличнойЧасти(ИмяТабличнойЧасти, СинонимТабличнойЧасти)
	
	ПараметрыОбработки = Новый Структура;
	
	ПараметрыОбработки.Вставить("АдресХранилищаТабличнойЧасти", ПоместитьТабличнуюЧастьВоВременноеХранилищеНаСервере(ИмяТабличнойЧасти));
	ПараметрыОбработки.Вставить("ДокументСсылка"              , Объект.Ссылка);
	ПараметрыОбработки.Вставить("ДокументДата"                , Объект.Дата);
	ПараметрыОбработки.Вставить("ДокументВалюта"              , Объект.ВалютаДокумента);
	ПараметрыОбработки.Вставить("ДокументКурс"                , Объект.КурсВзаиморасчетов);
	ПараметрыОбработки.Вставить("ДокументКратность"           , Объект.КратностьВзаиморасчетов);
	ПараметрыОбработки.Вставить("ДокументСуммаВключаетНДС"    , Объект.СуммаВключаетНДС);
	ПараметрыОбработки.Вставить("ДокументУчитыватьНДС"        , Объект.УчитыватьНДС);
	ПараметрыОбработки.Вставить("ДокументНДСВключенВСтоимость", Объект.НДСВключенВСтоимость);
	ПараметрыОбработки.Вставить("ИмяТаблицы"                  , ИмяТабличнойЧасти);
	ПараметрыОбработки.Вставить("Заголовок"                   , СинонимТабличнойЧасти);
	
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("СтавкаНДС");
	СтруктураРеквизитов.Вставить("СчетУчетаБУ");
	СтруктураРеквизитов.Вставить("СчетУчетаНДС");
	СтруктураРеквизитов.Вставить("НДСВидОборота");
	СтруктураРеквизитов.Вставить("НДСВидПоступления");
		
	СтруктураСвязанныхРеквизитов = Новый Структура;
	
	ПараметрыОбработки.Вставить("СтруктураРеквизитов", СтруктураРеквизитов);
	ПараметрыОбработки.Вставить("СтруктураСвязанныхРеквизитов", СтруктураСвязанныхРеквизитов);
	
	ВидимыеКолонки = Новый Массив;
	ПолучитьВидимыеКолонкиТабличнойЧасти(Элементы[ИмяТабличнойЧасти], Элементы[ИмяТабличнойЧасти].ПутьКДанным + ".", ВидимыеКолонки);
	ПараметрыОбработки.Вставить("ВидимыеКолонки", ВидимыеКолонки);

	Возврат ПараметрыОбработки;
	
КонецФункции

&НаСервере
Функция ПоместитьТабличнуюЧастьВоВременноеХранилищеНаСервере(ИмяТабличнойЧасти)

	Возврат ПоместитьВоВременноеХранилище(Объект[ИмяТабличнойЧасти].Выгрузить(), УникальныйИдентификатор);

КонецФункции

&НаСервере
Функция ПолучитьВидимыеКолонкиТабличнойЧасти(ЭлементТабличнаяЧасть, ПутьКДаннымТаблицы, МассивКолонок)
	
	Для Каждого Элемент Из ЭлементТабличнаяЧасть.ПодчиненныеЭлементы Цикл
		Если ТипЗнч(Элемент) = Тип("ГруппаФормы") Тогда
			ПолучитьВидимыеКолонкиТабличнойЧасти(Элемент, ПутьКДаннымТаблицы, МассивКолонок);
		ИначеЕсли ТипЗнч(Элемент) = Тип("ПолеФормы") И Элемент.Видимость Тогда
			МассивКолонок.Добавить(СтрЗаменить(Элемент.ПутьКДанным, ПутьКДаннымТаблицы, ""));
		КонецЕсли;
	КонецЦикла;

КонецФункции

&НаСервере
Процедура ОбработкаОповещенияОбработкиТабличнойЧастиНаСервере(Параметры)

	ТаблицаОбработки  = ПолучитьИзВременногоХранилища(Параметры.АдресОбработаннойТабличнойЧастиВХранилище);
	ИмяТабличнойЧасти = Параметры.ИмяТаблицы;
	
	Объект[ИмяТабличнойЧасти].Загрузить(ТаблицаОбработки);
		
	УправлениеФормой(ЭтаФорма);         
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаОповещенияОбработкиТабличнойЧастиТоварыНаСервере(Параметры)

	СтрокиДляДополнительнойОбработки = Обработки.ОбработкаТабличнойЧастиТовары.ЗагрузитьТабличнуюЧастьВДанныеФормы(Объект.Товары, Параметры);
	
	СчетаУчетаВДокументах.ЗаполнитьСтроки(СтрокиДляДополнительнойОбработки, "Товары", Объект, Документы.ПоступлениеДопРасходов, Истина);
	
	ОбновитьИтоги(ЭтаФорма);
		
	УправлениеФормой(ЭтаФорма);         
	
КонецПроцедуры

#Область КопированиеВставкаСтрокЧерезБуферОбмена

&НаСервере
Процедура СкопироватьСтрокиНаСервере(ИмяТаблицы)
	
	ОбщегоНазначения.СкопироватьСтрокиВБуферОбмена(Объект[ИмяТаблицы], 
		Элементы[ИмяТаблицы].ВыделенныеСтроки, Объект.Ссылка.Метаданные().Имя);

КонецПроцедуры

&НаСервере
Функция ВставитьСтрокиНаСервере(ИмяТаблицы)
	
	ПараметрыВставки = ОбработкаТабличныхЧастей.ПолучитьПараметрыВставкиДанныхИзБуфераОбмена(Объект.Ссылка, ИмяТаблицы);
	ОпределитьСписокСвойствДляВставкиИзБуфера(ПараметрыВставки);
	ОбработкаВыбораПодборВставкаИзБуфераНаСервере(ПараметрыВставки, ПараметрыВставки.ИмяТаблицы);
	
	Возврат ПараметрыВставки.КоличествоДобавленныхСтрок;
	
КонецФункции

&НаКлиенте
Функция ПолучитьИмяТекущейТабличнойЧасти()
	
	ИмяТекущейСтраницы = Элементы.Страницы.ТекущаяСтраница.Имя;
	ИмяТаблицы = "";
	
	Если ИмяТекущейСтраницы = "ГруппаТовары" Тогда
		
		ИмяТаблицы = "Товары";
		
	КонецЕсли;

	Возврат ИмяТаблицы;
	
КонецФункции

&НаСервере
Процедура ОпределитьСписокСвойствДляВставкиИзБуфера(ПараметрыВставки)
	
	СписокСвойств = Новый Массив;
	
	Если ПараметрыВставки.ИмяТаблицы = "Товары" Тогда
		СписокСвойств.Добавить("Номенклатура");
		СписокСвойств.Добавить("ЕдиницаИзмерения");
		СписокСвойств.Добавить("Коэффициент");
		СписокСвойств.Добавить("Количество");
		СписокСвойств.Добавить("НДСВидОборота");		
		СписокСвойств.Добавить("НДСВидПоступления");		
		
		Если ПараметрыВставки.ИсточникИДокументОдногоВида Тогда
			
			СписокСвойств.Добавить("ДокументПартии");
			СписокСвойств.Добавить("СуммаТовара");
			СписокСвойств.Добавить("СуммаНДС");
			СписокСвойств.Добавить("СуммаРаспределения");
			СписокСвойств.Добавить("СуммаРаспределенияНДС");
			СписокСвойств.Добавить("Сумма");
			
		КонецЕсли;
		          		
		Если ПараметрыВставки.ПоказыватьСчетаУчетаВДокументах Тогда			
			СписокСвойств.Добавить("СчетУчетаБУ");
			СписокСвойств.Добавить("СчетУчетаНУ");
			СписокСвойств.Добавить("СчетУчетаНДС");                			
		КонецЕсли;
	КонецЕсли; 
	
	ПараметрыВставки.СписокСвойств = ОбработкаТабличныхЧастей.ПолучитьСписокСвойствИмеющихсяВТаблицеДанных(
	ПараметрыВставки.Данные, СписокСвойств);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьКомандыВставки(Форма, Доступность)
	
	БлокироватьВставку = ОбщегоНазначенияБККлиентСервер.ЭтоПростаяВерсияКонфигурации() И Форма.Объект.Проведен;

	Доступность = Не Форма.ТолькоПросмотр И Доступность И НЕ БлокироватьВставку;
	Элементы = Форма.Элементы;
	Элементы.ТоварыВставитьСтроки.Доступность						 = Доступность;
	Элементы.ТоварыКонтекстноеМенюВставитьСтроки.Доступность		 = Доступность;
		
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораПодборВставкаИзБуфераНаСервере(ВыбранноеЗначение, ИмяТаблицы)

	ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИмяТаблицы);
			
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура СчетаУчетаРасчетов(Команда)
	
	СчетаУчетаВДокументахКлиентСервер.ОткрытьФормуСчетаУчета(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияФормыСчетаУчета(Результат, Параметры) Экспорт
	
	СчетаУчетаВДокументахКлиентСервер.ПослеЗакрытияФормыСчетаУчета(Результат, Параметры);
	
	СформироватьЗаголовокСчетаУчетаНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СчетаУчетаЗатрат(Команда)
	
	СчетаУчетаВДокументахКлиентСервер.ОткрытьФормуСчетаЗатрат(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияФормыСчетаУчетаЗатрат(Результат, Параметры) Экспорт
	
	СчетаУчетаВДокументахКлиентСервер.ПослеЗакрытияФормыСчетаУчетаЗатрат(Результат, Параметры);
	
	СформироватьЗаголовокСчетаУчетаЗатратНаСервере();
	
КонецПроцедуры

#Область СчетаУчета

&НаСервере
Процедура УстановитьВидимостьСчетовУчета()
	
	ЭлементыСчетов = Новый Массив(); 
	ЭлементыСчетов.Добавить("ТоварыСчетУчетаБУ");
	ЭлементыСчетов.Добавить("ТоварыСчетУчетаНУ");
	ЭлементыСчетов.Добавить("ТоварыСчетУчетаНДС");
	
	ЭлементыСчетов.Добавить("ОССчетУчетаБУ");
	ЭлементыСчетов.Добавить("ОССчетУчетаНДС");
	ЭлементыСчетов.Добавить("ОССчетУчетаНУ");
	
	ЭлементыСчетов.Добавить("НМАСчетУчетаБУ");
	ЭлементыСчетов.Добавить("НМАСчетУчетаНДС");
	ЭлементыСчетов.Добавить("НМАСчетУчетаНУ");
	
	СчетаУчетаВДокументах.УстановитьВидимостьСчетовУчета(Элементы, ЭлементыСчетов);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция НачатьЗаполнениеСчетовУчета(ПричиныИзменения, Объект = Неопределено, СтрокаСписка = Неопределено, КонтейнерОбъект = Неопределено, КонтейнерСтрокаСписка = Неопределено)

	// Код этой функции сформирован автоматически с помощью СчетаУчетаВДокументах.КодФункцииНачатьЗаполнениеСчетовУчета()

	ПараметрыЗаполнения = СчетаУчетаВДокументахКлиентСервер.НовыйПараметрыЗаполнения(
		"ПоступлениеДопРасходов",
		ПричиныИзменения,
		Объект,
		СтрокаСписка,
		КонтейнерОбъект,
		КонтейнерСтрокаСписка);

	// 1. Заполняемые реквизиты
	// Создание нового документа
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("НовыйДокумент") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетУчетаРасчетовСКонтрагентом");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетУчетаРасчетовПоАвансам");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетБУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоБУ1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоБУ2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоБУ3");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетНУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоНУ1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоНУ2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоНУ3");
	КонецЕсли;
	
	// НоваяСтрокаОС
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("НоваяСтрокаОС") <> Неопределено Тогда
		ПараметрыЗаполнения.Заполнять = Истина;
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ОС.НДСВидОборота");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ОС.НДСВидПоступления");
	КонецЕсли;
	
	// НоваяСтрокаТовары
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("НоваяСтрокаТовары") <> Неопределено Тогда
		ПараметрыЗаполнения.Заполнять = Истина;
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.НДСВидОборота");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.НДСВидПоступления");
	КонецЕсли;
	
	// НоваяСтрокаНМА
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("НоваяСтрокаНМА") <> Неопределено Тогда
		ПараметрыЗаполнения.Заполнять = Истина;
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "НМА.НДСВидОборота");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "НМА.НДСВидПоступления");
	КонецЕсли;
	
	// ВидОперации
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("ВидОперации") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетУчетаРасчетовСКонтрагентом");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетУчетаРасчетовПоАвансам");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетБУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоБУ1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоБУ2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоБУ3");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетНУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоНУ1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоНУ2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоНУ3");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчетаНДС");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.НДСВидОборота");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.НДСВидПоступления");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ОС.СчетУчетаНДС");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ОС.НДСВидОборота");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ОС.НДСВидПоступления");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "НМА.СчетУчетаНДС");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "НМА.НДСВидОборота");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "НМА.НДСВидПоступления");
	КонецЕсли;

	// ДоговорКонтрагента
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("ДоговорКонтрагента") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетУчетаРасчетовСКонтрагентом");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетУчетаРасчетовПоАвансам");
	КонецЕсли;

	// Организация
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Организация") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетУчетаРасчетовСКонтрагентом");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетУчетаРасчетовПоАвансам");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетБУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоБУ1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоБУ2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоБУ3");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетНУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоНУ1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоНУ2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоНУ3");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчетаБУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчетаНУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчетаНДС");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.НДСВидОборота");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ОС.СчетУчетаБУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ОС.СчетУчетаНУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ОС.СчетУчетаНДС");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ОС.НДСВидОборота");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "НМА.СчетУчетаБУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "НМА.СчетУчетаНУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "НМА.СчетУчетаНДС");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "НМА.НДСВидОборота");
	КонецЕсли;

	// Контрагент
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Контрагент") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетУчетаРасчетовСКонтрагентом");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетУчетаРасчетовПоАвансам");
	КонецЕсли;

	// Дата
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Дата") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетБУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоБУ1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоБУ2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоБУ3");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетНУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоНУ1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоНУ2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоНУ3");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчетаБУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчетаНУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчетаНДС");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.НДСВидОборота");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ОС.СчетУчетаБУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ОС.СчетУчетаНУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ОС.СчетУчетаНДС");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ОС.НДСВидОборота");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "НМА.СчетУчетаБУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "НМА.СчетУчетаНУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "НМА.СчетУчетаНДС");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "НМА.НДСВидОборота");
	КонецЕсли;

	// СчетБУ
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("СчетБУ") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоБУ1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоБУ2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоБУ3");
	КонецЕсли;

	// СчетНУ
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("СчетНУ") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоНУ1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоНУ2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоНУ3");
	КонецЕсли;

	// СубконтоБУ1
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("СубконтоБУ1") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоНУ1");
	КонецЕсли;

	// СубконтоБУ2
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("СубконтоБУ2") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоНУ2");
	КонецЕсли;

	// СубконтоБУ3
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("СубконтоБУ3") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоНУ3");
	КонецЕсли;

	// Товары.Номенклатура
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Товары.Номенклатура") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчетаБУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчетаНУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчетаНДС");
	КонецЕсли;

	// УчитыватьНДС
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("УчитыватьНДС") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчетаНДС");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ОС.СчетУчетаНДС");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "НМА.СчетУчетаНДС");
	КонецЕсли;

	// НДСВключенВСтоимость
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("НДСВключенВСтоимость") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчетаНДС");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ОС.СчетУчетаНДС");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "НМА.СчетУчетаНДС");
	КонецЕсли;

	// ОтложитьПринятиеНДСКЗачету
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("ОтложитьПринятиеНДСКЗачету") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчетаНДС");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ОС.СчетУчетаНДС");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "НМА.СчетУчетаНДС");
	КонецЕсли;

	// ОС.ОсновноеСредство
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("ОС.ОсновноеСредство") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ОС.СчетУчетаБУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ОС.СчетУчетаНУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ОС.СчетУчетаНДС");
	КонецЕсли;

	// НМА.НематериальныйАктив
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("НМА.НематериальныйАктив") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "НМА.СчетУчетаБУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "НМА.СчетУчетаНУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "НМА.СчетУчетаНДС");
	КонецЕсли;

	// 2. (если требуется) Передадим на сервер данные, необходимые для заполнения
	Если ПараметрыЗаполнения.Свойство("Контейнер") Тогда
		// ВидОперации
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("ВидОперации") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовСКонтрагентом");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ДоговорКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовПоАвансам");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетБУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоБУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоБУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоБУ3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетНУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоНУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоНУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоНУ3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "УчитыватьНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "НДСВключенВСтоимость");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ОтложитьПринятиеНДСКЗачету");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "НДСВидОборота");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "НДСВидПоступления");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ОсновноеСредство");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "НДСВидОборота");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "НДСВидПоступления");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "НематериальныйАктив");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "НДСВидОборота");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "НДСВидПоступления");
		КонецЕсли;

		// ДоговорКонтрагента
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("ДоговорКонтрагента") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ДоговорКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовСКонтрагентом");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовПоАвансам");
		КонецЕсли;

		// Организация
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Организация") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовСКонтрагентом");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ДоговорКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовПоАвансам");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетБУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоБУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоБУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоБУ3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетНУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоНУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоНУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоНУ3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаБУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "УчитыватьНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "НДСВключенВСтоимость");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ОтложитьПринятиеНДСКЗачету");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "НДСВидОборота");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаБУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ОсновноеСредство");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "НДСВидОборота");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаБУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "НематериальныйАктив");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "НДСВидОборота");
		КонецЕсли;

		// Контрагент
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Контрагент") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовСКонтрагентом");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ДоговорКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовПоАвансам");
		КонецЕсли;

		// Дата
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Дата") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетБУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоБУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоБУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоБУ3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетНУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоНУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоНУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоНУ3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаБУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "УчитыватьНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "НДСВключенВСтоимость");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ОтложитьПринятиеНДСКЗачету");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "НДСВидОборота");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаБУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ОсновноеСредство");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "НДСВидОборота");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаБУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "НематериальныйАктив");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "НДСВидОборота");
		КонецЕсли;

		// СчетБУ
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("СчетБУ") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетБУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоБУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоБУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоБУ3");
		КонецЕсли;

		// СчетНУ
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("СчетНУ") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетНУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоНУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоБУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоНУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоБУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоНУ3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоБУ3");
		КонецЕсли;

		// СубконтоБУ1
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("СубконтоБУ1") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоБУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоНУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетНУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
		КонецЕсли;

		// СубконтоБУ2
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("СубконтоБУ2") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоБУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоНУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетНУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
		КонецЕсли;

		// СубконтоБУ3
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("СубконтоБУ3") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоБУ3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоНУ3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетНУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
		КонецЕсли;

		// Товары.Номенклатура
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Товары.Номенклатура") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаБУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "УчитыватьНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "НДСВключенВСтоимость");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ОтложитьПринятиеНДСКЗачету");
		КонецЕсли;

		// УчитыватьНДС
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("УчитыватьНДС") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "УчитыватьНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "НДСВключенВСтоимость");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ОтложитьПринятиеНДСКЗачету");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ОсновноеСредство");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "НематериальныйАктив");
		КонецЕсли;

		// НДСВключенВСтоимость
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("НДСВключенВСтоимость") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "НДСВключенВСтоимость");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "УчитыватьНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ОтложитьПринятиеНДСКЗачету");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ОсновноеСредство");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "НематериальныйАктив");
		КонецЕсли;

		// ОтложитьПринятиеНДСКЗачету
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("ОтложитьПринятиеНДСКЗачету") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ОтложитьПринятиеНДСКЗачету");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "УчитыватьНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "НДСВключенВСтоимость");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ОсновноеСредство");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "НематериальныйАктив");
		КонецЕсли;

		// ОС.ОсновноеСредство
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("ОС.ОсновноеСредство") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ОсновноеСредство");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаБУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "УчитыватьНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "НДСВключенВСтоимость");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ОтложитьПринятиеНДСКЗачету");
		КонецЕсли;

		// НМА.НематериальныйАктив
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("НМА.НематериальныйАктив") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "НематериальныйАктив");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаБУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "УчитыватьНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "НДСВключенВСтоимость");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ОтложитьПринятиеНДСКЗачету");
		КонецЕсли;

	КонецЕсли; // Нужно передавать на сервер данные заполнения
	
	Возврат ПараметрыЗаполнения;

КонецФункции

&НаСервере
Процедура ЗаполнитьСчетаУчета(ПричиныИзмененияСчетовУчета, ИмяРеквизита)
	
	Если Не СчетаУчетаВДокументахКлиентСервер.МожноНачатьЗаполнениеСчетовУчета(ИмяРеквизита, ПричиныИзмененияСчетовУчета) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗаполнения = НачатьЗаполнениеСчетовУчета(ПричиныИзмененияСчетовУчета, Объект);
	ИзмененныеЗначения = СчетаУчетаВДокументах.ЗаполнитьОбъектПриИзменении(ПараметрыЗаполнения);
	
	Если ЗначениеЗаполнено(ИзмененныеЗначения)
		И СчетаУчетаВДокументахВызовСервераПовтИсп.ПользовательУправляетСчетамиУчета() Тогда
		СформироватьЗаголовокСчетаУчета(ЭтаФорма);
		ПоказатьСообщениеОЗаполненииСчетовУчета(Объект.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПоказатьСообщениеОЗаполненииСчетовУчета(ОбъектСсылка)
	
	ТекстСообщения = НСтр("ru = 'Счета учета изменены в соответствии со значениями по умолчанию.'");
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ОбъектСсылка, , "Объект");
	
КонецПроцедуры

&НаСервере
Процедура СформироватьЗаголовокСчетаУчетаНаСервере()
	СформироватьЗаголовокСчетаУчета(ЭтаФорма);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьЗаголовокСчетаУчета(Форма)
	
	Объект = Форма.Объект;
	Форма.Элементы.СчетаУчетаРасчетов.Заголовок = СчетаУчетаВДокументахКлиентСервер.СформироватьНадписьСчетаУчета(Объект);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьЗаголовокСчетаУчетаЗатратНаСервере()
	СформироватьЗаголовокСчетаУчетаЗатрат(ЭтаФорма);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьЗаголовокСчетаУчетаЗатрат(Форма)
	
	Объект = Форма.Объект;
	ЗаголовокПоля = СчетаУчетаВДокументахКлиентСервер.СформироватьНадписьСчетаУчетаЗатрат(Объект);
	
	Если Объект.УчитыватьКПН Тогда
		Форма.Элементы.СчетаУчетаЗатрат.Заголовок = ЗаголовокПоля;
	Иначе
		Форма.Элементы.СчетаУчетаЗатрат.Заголовок = Лев(ЗаголовокПоля, СтрНайти(ЗаголовокПоля, ",") - 1);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура РазблокироватьРеквизиты() Экспорт
	
	Элементы.Товары.ТолькоПросмотр       = Ложь;
	Элементы.Товары.ИзменятьСоставСтрок  = Ложь;
	Элементы.Товары.ИзменятьПорядокСтрок = Ложь;
	
	Элементы.ОС.ТолькоПросмотр           = Ложь;
	Элементы.ОС.ИзменятьСоставСтрок      = Ложь;
	Элементы.ОС.ИзменятьПорядокСтрок     = Ложь;

	Элементы.НМА.ТолькоПросмотр          = Ложь;
	Элементы.НМА.ИзменятьСоставСтрок     = Ложь;
	Элементы.НМА.ИзменятьПорядокСтрок    = Ложь;
	
	Элементы.ЦеныИВалюта.ТолькоПросмотр  = Истина;

КонецПроцедуры

&НаКлиенте
Процедура Дополнительно(Команда)
	
	СтруктураДопПараметров = Новый Структура;
	
	СтруктураДопПараметров.Вставить("ВидВходящегоДокумента",	Объект.ВидВходящегоДокумента);
	СтруктураДопПараметров.Вставить("ДатаВходящегоДокумента",	Объект.ДатаВходящегоДокумента);
	СтруктураДопПараметров.Вставить("НомерВходящегоДокумента",	Объект.НомерВходящегоДокумента);
	СтруктураДопПараметров.Вставить("Комментарий",				Объект.Комментарий);
	
	РаботаСДиалогамиКлиент.ОткрытьФормуДополнительно(ЭтаФорма, "ПоступлениеДопРасходов",СтруктураДопПараметров)
	

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьУчастникиСД(Команда)
	
	Если НЕ ТолькоПросмотр Тогда
		ЗаблокироватьДанныеФормыДляРедактирования();
	КонецЕсли;

	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("УчастникиСовместнойДеятельности",  	Объект.УчастникиСовместнойДеятельности);
	СтруктураПараметров.Вставить("ТипОбъекта",                      	"ПоступлениеДопРасходов");
	СтруктураПараметров.Вставить("Договор",                      		Объект.ДоговорКонтрагента);
	
	ОткрытьФорму("ОбщаяФорма.ФормаУчастникиСовместнойДеятельности", СтруктураПараметров, ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьШиринуПоляДоговор(ПоказыватьУчастников = Истина)
	
	Если ПоказыватьУчастников Тогда
	   МаксимальнаяШирина = 24;
	Иначе	
	   МаксимальнаяШирина = 28;
	КонецЕсли; 

	Возврат МаксимальнаяШирина;

КонецФункции

#Область АВР

&НаКлиенте
Процедура СсылкаНаЭлектронныеАВРНажатие(Элемент)
	
	Если СписокЭлектронныхАВР.Количество() > 1 Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму(
		"Документ.ЭлектронныйАктВыполненныхРабот.Форма.ПросмотрСпискаДокументовЭАВР",
		Новый Структура("СписокДокументов, Заголовок",
		СписокЭлектронныхАВР,
		НСтр("ru='Документы (%КоличествоДокументов%)'")
		),
		ЭтаФорма,,,, Неопределено, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	Иначе
		ПоказатьЗначение( ,СписокЭлектронныхАВР[0].Значение);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаОповщенияАВРНаСервере()
	АВРСерверПереопределяемый.НайтиАВРИЗаполнитьСсылку(ЭтаФорма, Объект);
КонецПроцедуры

#КонецОбласти

#Область ОперацияКорректировки

&НаСервере
Процедура ДобавитьКомандуВводаКорректировки()
	
	Если Не ПравоДоступа("Изменение", Метаданные.Документы.ОперацияБух) Тогда
		Возврат
	КонецЕсли;
	
	ИмяКнопкиСоздатьОперацию = "ФормаДокументОперацияКорректировкаСоздатьНаОсновании";
	КнопкаСоздатьОперацию = Элементы.Найти(ИмяКнопкиСоздатьОперацию);
	
	Если КнопкаСоздатьОперацию = Неопределено Тогда
		ГруппаФормаСоздатьНаОсновании = Элементы.Найти("ФормаСоздатьНаОсновании");
		Если ГруппаФормаСоздатьНаОсновании <> Неопределено Тогда
			ВставитьПередКнопкой = Неопределено;
			ИндексПоследнейКнопки = ГруппаФормаСоздатьНаОсновании.ПодчиненныеЭлементы.Количество() - 1;
			Для ИндексВГруппе = 0 По ИндексПоследнейКнопки Цикл
				ТекущаяКнопка = ГруппаФормаСоздатьНаОсновании.ПодчиненныеЭлементы.Получить(ИндексВГруппе);
				Если ТекущаяКнопка.Имя > ИмяКнопкиСоздатьОперацию Тогда
					ВставитьПередКнопкой = ТекущаяКнопка;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			КнопкаСоздатьОперацию = Элементы.Вставить(ИмяКнопкиСоздатьОперацию, Тип("КнопкаФормы"), ГруппаФормаСоздатьНаОсновании, ВставитьПередКнопкой);
			КнопкаСоздатьОперацию.ИмяКоманды = "ВвестиНовуюКорректировку";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиНовуюКорректировку(Команда)
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ОткрытьФормуОперации();
	Иначе
		ОписаниеОповещенияОтветаНаВопрос = Новый ОписаниеОповещения("ПослеВопросаОЗаписиПередКорректировкой", ЭтотОбъект);
		ТекстВопроса =
		НСтр("ru='Данные еще не записаны.
		|Выполнение действия ""Операция (Корректировка документа): создать на основании"" возможно только после записи данных
		|Данные будут записаны.'");
		ПоказатьВопрос(ОписаниеОповещенияОтветаНаВопрос, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВопросаОЗаписиПередКорректировкой(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		Если Записать() Тогда
			ОткрытьФормуОперации();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуОперации()
	
	ПараметрыОперации = Новый Структура("Основание", Объект.Ссылка);
	ОткрытьФорму("Документ.ОперацияБух.ФормаОбъекта", ПараметрыОперации);
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстКорректировкиНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если СписокКорректировок.Количество() = 1 Тогда
		ПоказатьЗначение(, СписокКорректировок.Получить(0).Значение);
	Иначе
		ЗаголовокФормы = НСтр("ru = 'Выберите документ корректировки'");
		ПараметрыФормы = Новый Структура("СписокДокументов, Заголовок", СписокКорректировок, ЗаголовокФормы);
		ОткрытьФорму("ОбщаяФорма.ПросмотрСпискаДокументов", ПараметрыФормы, ЭтотОбъект, УникальныйИдентификатор, , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВернутьСписокКорректировок(Документ)
	
	МассивКорректировок = Новый Массив;
	
	Если ЗначениеЗаполнено(Документ) Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ОперацияБух.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ОперацияБух КАК ОперацияБух
		|ГДЕ
		|	ОперацияБух.СторнируемыйДокумент = &Документ
		|	И НЕ ОперацияБух.ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Сторнирование.Ссылка
		|ИЗ
		|	Документ.Сторнирование КАК Сторнирование
		|ГДЕ
		|	Сторнирование.ДокументОснование = &Документ
		|	И НЕ Сторнирование.ПометкаУдаления";
		
		Если Не ПравоДоступа("Чтение", Метаданные.Документы.ОперацияБух) Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ОперацияБух.Ссылка", "ПРЕДСТАВЛЕНИЕ(ОперацияБух.Ссылка)");
		КонецЕсли;
		
		Если Не ПравоДоступа("Чтение", Метаданные.Документы.Сторнирование) Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Сторнирование.Ссылка", "ПРЕДСТАВЛЕНИЕ(Сторнирование.Ссылка)");
		КонецЕсли;
		
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("Документ", Документ);
		
		УстановитьПривилегированныйРежим(Истина);
		РезультатЗапроса = Запрос.Выполнить();
		УстановитьПривилегированныйРежим(Ложь);
		
		МассивКорректировок = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка");
		
	КонецЕсли;
	
	Возврат МассивКорректировок
	
КонецФункции

&НаСервере
Процедура ОбновитьДанныеОВведенныхКорректировках()
	
	СписокКорректировок.ЗагрузитьЗначения(ВернутьСписокКорректировок(Объект.Ссылка));
	
	Элементы.ГруппаКорректировкиДокументамиРеглУчета.Видимость = (СписокКорректировок.Количество() > 0);
	
	Если Не Элементы.ГруппаКорректировкиДокументамиРеглУчета.Видимость Тогда
		ТекстКорректировки = "";
	ИначеЕсли СписокКорректировок.Количество() = 1 Тогда
		ТекстКорректировки = СписокКорректировок.Получить(0).Значение;
	Иначе
		ТекстКорректировки = СтрШаблон(НСтр("ru = 'Открыть список введенных корректировок (%1)'"), СписокКорректировок.Количество());
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
