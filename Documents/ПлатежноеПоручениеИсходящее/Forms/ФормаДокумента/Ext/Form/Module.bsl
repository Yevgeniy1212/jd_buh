
&НаКлиенте
Перем ЗакрыватьФорму;


//////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
	КонецЕсли;
	
	// +++ Проверка заполненности реквизитов организации (банковский счет)
	РеквизитыОрганизацииСсылка = ПроверкаРеквизитовОрганизации.СтрокаСообщенияНеЗаполненБанковскийСчет();
	// --- Проверка заполненности реквизитов организации (банковский счет)
	
	// КомандыЭДО
	ОбменСБанками.ПриСозданииФормыДокументаНаСервере(ЭтотОбъект);
	// Конец КомандыЭДО
	
	УстановитьВидимостьСчетовУчета();
	
	ЗапретРедактированияРеквизитовОбъектовПереопределяемый.ЗаблокироватьРеквизиты(ЭтотОбъект, Объект.Проведен);
	
	ИспользоватьОбменСБанками = ПолучитьФункциональнуюОпцию("ИспользоватьОбменСБанками");

	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаДиректБанк", "Видимость", ИспользоватьОбменСБанками);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	// РедактированиеДокументовПользователей
	ПраваДоступаКОбъектам.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец РедактированиеДокументовПользователей
	
	ПодготовитьФормуНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(Объект.ВидОперации), Объект.Ссылка, ЭтаФорма);
	УстановитьВидимостьРеквизитовСтруктурногоПодразделения();

	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	УстановитьТекстСостоянияЭДНаСервере();
	
	ЗапретРедактированияРеквизитовОбъектовПереопределяемый.ЗаблокироватьРеквизиты(ЭтотОбъект, Объект.Проведен);
	
	Если ТекущийОбъект.ДополнительныеСвойства.Свойство("ЗакрыватьФорму") Тогда
		ПараметрыЗаписи.Вставить("ЗакрыватьФорму", ТекущийОбъект.ДополнительныеСвойства.ЗакрыватьФорму);
	КонецЕсли; 
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение ИЛИ ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда 
		
		ОплаченныеСчета = Новый Массив;
		
		Если Объект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ОплатаПоставщику Тогда
			
			УникальныеЗначения = Новый Соответствие;
			
			Для каждого СтрокаРасшифровки Из Объект.РасшифровкаПлатежа Цикл
				СчетНаОплату = СтрокаРасшифровки.СчетНаОплату;
				Если ЗначениеЗаполнено(СчетНаОплату) И УникальныеЗначения[СчетНаОплату] = Неопределено Тогда
					ОплаченныеСчета.Добавить(СчетНаОплату);
					УникальныеЗначения.Вставить(СчетНаОплату, Истина);
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		ПараметрыЗаписи.Вставить("ОплаченныеСчета", ОплаченныеСчета);  
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	ОповещаемыеВедомости = Новый Соответствие;
	
	//Передадим ссылки документов, для заполнения платежного документа в документе
	//"Зарплата к выплате организаций"
	
	// Помещаем в список текущий набор ведомостей
	Для Каждого СтрокаТЧ Из Объект.ПеречислениеЗаработнойПлаты Цикл
		ОповещаемыеВедомости.Вставить(СтрокаТЧ.Ведомость, СтрокаТЧ.Ведомость)
	КонецЦикла;
	
	Если ОповещаемыеВедомости.Количество() > 0 Тогда
		Оповестить("ИзменениеВыплатыПоВедомостиРегл", ОповещаемыеВедомости);
	КонецЕсли;

	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийППИсходящее.ПеречислениеПрочихДоходов") Тогда
		Для Каждого СтрокаТЧ Из Объект.ПеречислениеПрочихДоходов Цикл
			ОповещаемыеВедомости.Вставить(СтрокаТЧ.Документ, СтрокаТЧ.Документ);
		КонецЦикла;
		Оповестить("ИзменениеВыплатыПоВедомостиРегл", ОповещаемыеВедомости);
	КонецЕсли;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийППИсходящее.ПеречислениеПрочихВыплат") Тогда
		Оповестить("Запись_ПлатежноеПоручениеИсходящее", ПараметрыЗаписи, Объект.Ссылка); 
	КонецЕсли;
	
	Если ПараметрыЗаписи.Свойство("ЗакрыватьФорму") Тогда
		ЗакрыватьФорму = ПараметрыЗаписи.ЗакрыватьФорму;
	КонецЕсли; 
	
	Если ПараметрыЗаписи.Свойство("ОплаченныеСчета") И ПараметрыЗаписи.ОплаченныеСчета.Количество() > 0 Тогда
		ОповеститьОбИзменении(Тип("ДокументСсылка.СчетНаОплатуПоставщика"));
		Оповестить("ИзмененСтатусДокументов", ПараметрыЗаписи.ОплаченныеСчета, Объект.Ссылка);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ВРег(ИсточникВыбора.ИмяФормы) = ВРег("ОбщаяФорма.ФормаВыбораИзКлассификатора") Тогда
		
		Если ВРег(ИсточникВыбора.ИмяМакета) = ВРег("КодыНазначенияПлатежей") Тогда 
			
			Если ТипЗнч(ВыбранноеЗначение) <> Тип("Структура") Тогда
				Объект.КодНазначенияПлатежа = ВыбранноеЗначение;
			Иначе
				Объект.КодНазначенияПлатежа = ВыбранноеЗначение.КодСтроки;
			КонецЕсли;
			
		ИначеЕсли ВРег(ИсточникВыбора.ИмяМакета) = ВРег("КодыБюджетнойКлассификации") Тогда 
			
			Если ТипЗнч(ВыбранноеЗначение) <> Тип("Структура") Тогда
				Объект.КодБК = ВыбранноеЗначение;
			Иначе
				Объект.КодБК = ВыбранноеЗначение.КодСтроки;
			КонецЕсли;
			
		КонецЕсли;
		
		Модифицированность = Истина;
		
	ИначеЕсли ВРег(ИсточникВыбора.ИмяФормы) = ВРег("ОбщаяФорма.ФормаДополнительно") Тогда		
		
		РаботаСДиалогамиКлиент.ОбработкаВыбораРеквизитыДополнительно(ЭтаФорма, ВыбранноеЗначение, ИсточникВыбора);
		
	ИначеЕсли ВРег(ИсточникВыбора.ИмяФормы) = ВРег("Документ.ПлатежноеПоручениеИсходящее.Форма.РеквизитыПечати") Тогда		
		
		ЗаполнитьЗначенияСвойств(Объект, ВыбранноеЗначение);
		ЭтаФорма.Модифицированность = Истина;
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийППИсходящее.ПеречислениеСоциальныхОтчислений") Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "БанкПосредникГЦВП", "Видимость", ЗначениеЗаполнено(Объект.БанкПосредник));
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СчетБанкаПосредникаГЦВП", "Видимость", ЗначениеЗаполнено(Объект.БанкПосредник));
		КонецЕсли;
		
	ИначеЕсли ВРег(ИсточникВыбора.ИмяФормы) = ВРег("ОбщаяФорма.ФормаКомиссияБанка") Тогда		
		
		ЗаполнитьЗначенияСвойств(Объект, ВыбранноеЗначение);
				
		ЭтаФорма.Модифицированность = Истина;
		
		СформироватьНазначениеПлатежа();
		ОбновитьПодвал(ЭтаФорма);
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновитьСостояниеОбменСБанками" Тогда
		УстановитьТекстСостоянияЭДНаСервере();
	КонецЕсли;	
	
	Если ИмяСобытия = "Запись_Организации" Тогда
		// +++ Проверка заполненности реквизитов организации (банковский счет)
		Если Источник = Объект.Организация Тогда
			ОбработатьИзмененияВОрганизацииНаСервере();
			Модифицированность = Истина;
		КонецЕсли;
		// --- Проверка заполненности реквизитов организации (банковский счет)
	Иначе	
		ОбщегоНазначенияБККлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
		
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ЗакрыватьФорму = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		КлючеваяОперация = "Документ ""платежное поручение (исходящее)"" (проведение)";
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)

	Если НЕ ЗавершениеРаботы И НЕ ЗакрыватьФорму Тогда
		Отказ = Истина;
		ЗакрыватьФорму = Истина;
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	
	ВидОперацииПриИзмененииНаСервере()
	
КонецПроцедуры

&НаКлиенте
Процедура ОплаченоПриИзменении(Элемент)
	
	Элементы.Дата.ТолькоПросмотр = НЕ Объект.Оплачено;

КонецПроцедуры

&НаКлиенте
Процедура ДатаВыпискиПриИзменении(Элемент)
	
	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ОбщегоНазначенияБККлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.ДатаВыписки, 
		ТекущаяДатаВыпискиДокумента, Объект.ВалютаДокумента, ВалютаРегламентированногоУчета);

	Если Объект.Ссылка.Пустая() Тогда
		Объект.ДатаВалютирования = Объект.ДатаВыписки;	
	КонецЕсли;
		
	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера И НЕ Объект.Оплачено Тогда
		
		СтруктураРезультатаВыполненияПриИзмененииДаты = Неопределено;
		ДатаВыпискиПриИзмененииНаСервере(СтруктураРезультатаВыполненияПриИзмененииДаты);
				
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаВыпискиДокумента = Объект.ДатаВыписки;

КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ОбщегоНазначенияБККлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата, 
		ТекущаяДатаДокумента, Объект.ВалютаДокумента, ВалютаРегламентированногоУчета);

	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		
		СтруктураРезультатаВыполненияПриИзмененииДаты = Неопределено;
		ДатаПриИзмененииНаСервере(СтруктураРезультатаВыполненияПриИзмененииДаты);
						
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(СтруктурноеПодразделениеОрганизация) Тогда 
		Результат = РаботаСДиалогамиКлиент.ПроверитьИзменениеЗначенийОрганизацииСтруктурногоПодразделения(СтруктурноеПодразделениеОрганизация, Объект.Организация, Объект.СтруктурноеПодразделениеОтправитель);
		Если Результат.ИзмененаОрганизация Или Результат.ИзмененоСтруктурноеПодразделение Тогда
			Объект.ФактическийПлательщик = Неопределено;
			СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(Результат);
		КонецЕсли;
	Иначе
		Объект.Организация = Неопределено;
		Объект.СтруктурноеПодразделениеОтправитель = Неопределено;
		Объект.СтруктурноеПодразделениеПолучатель  = Неопределено;
		СтруктурноеПодразделениеОрганизацияОтправитель = Неопределено;
		СтруктурноеПодразделениеОрганизацияПолучатель  = Неопределено;
		Объект.ФактическийПлательщик = Неопределено;
		Объект.РННПлательщика   = "";
		Объект.ТекстПлательщика = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если НЕ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийППИсходящее.ПереводНаДругойСчет")
		И НЕ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийППИсходящее.ПрочееСписаниеБезналичныхДенежныхСредств") Тогда
		РаботаСДиалогамиКлиент.СтруктурноеПодразделениеНачалоВыбора(ЭтаФорма, СтандартнаяОбработка, Объект.Организация, Объект.СтруктурноеПодразделениеОтправитель, Истина);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВидУчетаНУПриИзменении(Элемент)

	УправлениеФормой(ЭтаФорма);
	УстановитьВидимостьСчетовУчета();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидУчетаНУНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияБККлиент.НачалоВыбораЗначенияВидУчетаНУ(Элемент, Объект.ВидУчетаНУ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура УчитыватьКПНПриИзменении(Элемент)
	
	УчитыватьКПНПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СчетОрганизацииПриИзменении(Элемент)
	
	СчетОрганизацииПриИзмененииКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура СчетБанкПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.СчетБанк) Тогда
		СчетБанкПриИзмененииКлиент();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	ПричиныИзмененияСчетовУчета = Новый Массив;
	
	КонтрагентПриИзмененииНаСервере(ПричиныИзмененияСчетовУчета);
	УправлениеФормой(ЭтаФорма);
	УстановитьВидимостьСчетовУчета();
	
КонецПроцедуры

&НаКлиенте
Процедура СчетКонтрагентаПриИзменении(Элемент)
	
	Если Объект.СчетКонтрагента.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	СчетКонтрагентаПриИзмененииНаСервере();
		
КонецПроцедуры

&НаКлиенте
Процедура СуммаДокументаПриИзменении(Элемент)
	
	ПересчетСуммаДокументаПриИзменении(ЭтаФорма);
	СформироватьНазначениеПлатежа();
	ОбновитьПодвал(ЭтаФорма);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СчетУчетаНУПриИзмененииНаСервере(ДанныеОбъекта)
	
	ПроцедурыБухгалтерскогоУчета.ПроверитьВладельцаСубконтоПодразделение(ДанныеОбъекта, 
	                                        ДанныеОбъекта.Организация, 
	                                        Новый Структура("НазваниеСубконтоБУ1, НазваниеСубконтоБУ2, НазваниеСубконтоБУ3, 
	                                                        |СубконтоБУ1, СубконтоБУ2, СубконтоБУ3",
	                                                        "СубконтоДтНУ1", "СубконтоДтНУ2", "СубконтоДтНУ3", 
	                                                        ДанныеОбъекта.СубконтоДтНУ1, ДанныеОбъекта.СубконтоДтНУ2, ДанныеОбъекта.СубконтоДтНУ3));

КонецПроцедуры

&НаКлиенте
Процедура КодНазначенияПлатежаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора"		  , Истина);
	ПараметрыФормы.Вставить("ИмяМакета"			  , "КодыНазначенияПлатежей");
	ПараметрыФормы.Вставить("ИмяСекции"			  ,	"Классификатор");
	ПараметрыФормы.Вставить("ПолучатьПолныеДанные", Истина);
	ПараметрыФормы.Вставить("ТекущийКодСтроки"	  , ?(НЕ ЗначениеЗаполнено(Объект.КодНазначенияПлатежа), Неопределено, СокрЛП(Объект.КодНазначенияПлатежа)));
	ПараметрыФормы.Вставить("ЯзыкМакета", ОбщегоНазначенияКлиент.КодОсновногоЯзыка());
	ОткрытьФорму("ОбщаяФорма.ФормаВыбораИзКлассификатора", ПараметрыФормы, ЭтаФорма, Истина, , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияОтправительНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСДиалогамиКлиент.СтруктурноеПодразделениеНачалоВыбора(ЭтаФорма, СтандартнаяОбработка, Объект.Организация, Объект.СтруктурноеПодразделениеОтправитель, Ложь, "ПослеВыбораСтруктурногоПодразделенияОтправитель");
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияПолучательНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСДиалогамиКлиент.СтруктурноеПодразделениеНачалоВыбора(ЭтаФорма, СтандартнаяОбработка, Объект.Организация, Объект.СтруктурноеПодразделениеПолучатель, Ложь, "ПослеВыбораСтруктурногоПодразделенияПолучатель");
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияОтправительПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(СтруктурноеПодразделениеОрганизацияОтправитель) Тогда 
		Объект.СтруктурноеПодразделениеОтправитель     = Неопределено;
        СтруктурноеПодразделениеОрганизацияОтправитель = Объект.Организация;				
	Иначе 
		Объект.СтруктурноеПодразделениеОтправитель = СтруктурноеПодразделениеОрганизацияОтправитель;		
	КонецЕсли;

	ЗаполнитьТекстОтправителя();
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияПолучательПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(СтруктурноеПодразделениеОрганизацияПолучатель) Тогда 
		Объект.СтруктурноеПодразделениеПолучатель     = Неопределено;
		СтруктурноеПодразделениеОрганизацияПолучатель = Объект.Организация;				
	Иначе 
		Объект.СтруктурноеПодразделениеПолучатель = СтруктурноеПодразделениеОрганизацияПолучатель;	
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СтатьяДвиженияДенежныхСредствПриИзменении(Элемент)
	
	УстановитьСтатьюДДСВАналитикеСчета();
	
КонецПроцедуры

&НаКлиенте
Процедура СчетОрганизацииПереводПриИзменении(Элемент)
	
	СчетОрганизацииПриИзмененииКлиент();

КонецПроцедуры

&НаКлиенте
Процедура СчетКонтрагентаПолучательПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.СчетОрганизации) Тогда
		
		Если Объект.СчетКонтрагента = Объект.СчетОрганизации Тогда
			Объект.СчетКонтрагента = Неопределено;
			ТекстСообщения = НСтр("ru='Счет выбран как Банковский счет (отправитель)'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Объект.СчетКонтрагента, СокрЛП(Объект.Организация)),,
				"СчетОрганизации", 
				"Объект");
			
		КонецЕсли;
			
	КонецЕсли;
	
	Если НЕ Объект.СчетКонтрагента.Пустая() Тогда
		СчетКонтрагентаПриИзмененииНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СчетУчетаПриИзменении(Элемент)
	
	Объект.СчетУчетаРасчетовСКонтрагентомНУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", Объект.СчетУчетаРасчетовСКонтрагентомБУ));
	
	ПоляФормы		= Новый Структура("Субконто1, Субконто2, Субконто3",
		"СубконтоДтНУ1", "СубконтоДтНУ2", "СубконтоДтНУ3");

	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриИзмененииСчета(Объект.СчетУчетаРасчетовСКонтрагентомНУ, Объект, ПоляФормы);

	УстановитьЗаголовкиИДоступностьСубконто(ЭтаФорма, Объект.СчетУчетаРасчетовСКонтрагентомБУ,,, Объект.СчетУчетаРасчетовСКонтрагентомНУ);
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтБУ",, "СчетУчетаРасчетовСКонтрагентомБУ");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтНУ",, "СчетУчетаРасчетовСКонтрагентомНУ");
	
	ДанныеОбъекта = Новый Структура("Организация, СубконтоДтБУ1, СубконтоДтБУ2, СубконтоДтБУ3,
									|СубконтоДтНУ1, СубконтоДтНУ2, СубконтоДтНУ3");
			
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
		
	ПроверитьВладельцаСубконтоПодразделениеБУНУ(ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(Объект, ДанныеОбъекта);
	
КонецПроцедуры

&НаКлиенте
Процедура СчетУчетаНУПриИзменении(Элемент)
	
	УстановитьЗаголовкиИДоступностьСубконто(ЭтаФорма, Объект.СчетУчетаРасчетовСКонтрагентомБУ,,, Объект.СчетУчетаРасчетовСКонтрагентомНУ);
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтНУ",, "СчетУчетаРасчетовСКонтрагентомНУ");
	
	ДанныеОбъекта = Новый Структура("Организация, СубконтоДтНУ1, СубконтоДтНУ2, СубконтоДтНУ3");
			
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
		
	СчетУчетаНУПриИзмененииНаСервере(ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(Объект, ДанныеОбъекта);

КонецПроцедуры

&НаКлиенте
Процедура СубконтоДтБУ1ПриИзменении(Элемент)
	
	ОбщегоНазначенияБККлиентСервер.ЗаменитьСубконтоНУ(Объект, Объект.СчетУчетаРасчетовСКонтрагентомБУ, Объект.СчетУчетаРасчетовСКонтрагентомНУ, 1, Объект.СубконтоДтБУ1, "СубконтоДтНУ");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтБУ",, "СчетУчетаРасчетовСКонтрагентомБУ");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтНУ",, "СчетУчетаРасчетовСКонтрагентомНУ", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоДтБУ2ПриИзменении(Элемент)
	
	ОбщегоНазначенияБККлиентСервер.ЗаменитьСубконтоНУ(Объект, Объект.СчетУчетаРасчетовСКонтрагентомБУ, Объект.СчетУчетаРасчетовСКонтрагентомНУ, 2, Объект.СубконтоДтБУ2, "СубконтоДтНУ");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтБУ",, "СчетУчетаРасчетовСКонтрагентомБУ");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтНУ",, "СчетУчетаРасчетовСКонтрагентомНУ", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоДтБУ3ПриИзменении(Элемент)
	
	ОбщегоНазначенияБККлиентСервер.ЗаменитьСубконтоНУ(Объект, Объект.СчетУчетаРасчетовСКонтрагентомБУ, Объект.СчетУчетаРасчетовСКонтрагентомНУ, 3, Объект.СубконтоДтБУ3, "СубконтоДтНУ");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтБУ",, "СчетУчетаРасчетовСКонтрагентомБУ");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтНУ",, "СчетУчетаРасчетовСКонтрагентомНУ", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоДтБУ1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СубконтоНачалоВыбора(Элемент, "СубконтоДтБУ", 1, "СчетУчетаРасчетовСКонтрагентомБУ", Объект, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоДтБУ2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СубконтоНачалоВыбора(Элемент, "СубконтоДтБУ", 2, "СчетУчетаРасчетовСКонтрагентомБУ", Объект, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоДтБУ3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СубконтоНачалоВыбора(Элемент, "СубконтоДтБУ", 3, "СчетУчетаРасчетовСКонтрагентомБУ", Объект, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоДтНУ1ПриИзменении(Элемент)

	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтНУ",, "СчетУчетаРасчетовСКонтрагентомНУ");

КонецПроцедуры

&НаКлиенте
Процедура СубконтоДтНУ2ПриИзменении(Элемент)

	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтНУ",, "СчетУчетаРасчетовСКонтрагентомНУ");

КонецПроцедуры

&НаКлиенте
Процедура СубконтоДтНУ3ПриИзменении(Элемент)

	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтНУ",, "СчетУчетаРасчетовСКонтрагентомНУ");

КонецПроцедуры

&НаКлиенте
Процедура СубконтоДтНУ1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СубконтоНачалоВыбора(Элемент, "СубконтоДтНУ", 1, "СчетУчетаРасчетовСКонтрагентомНУ", Объект, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоДтНУ2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СубконтоНачалоВыбора(Элемент, "СубконтоДтНУ", 2, "СчетУчетаРасчетовСКонтрагентомНУ", Объект, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоДтНУ3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СубконтоНачалоВыбора(Элемент, "СубконтоДтНУ", 3, "СчетУчетаРасчетовСКонтрагентомНУ", Объект, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СчетУчетаПеречислениеНалоговПриИзменении(Элемент)
	
	Объект.СчетУчетаРасчетовСКонтрагентомНУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", Объект.СчетУчетаРасчетовСКонтрагентомБУ));
	
	ПоляФормы		= Новый Структура("Субконто1, Субконто2, Субконто3",
		"СубконтоДтНУ1", "СубконтоДтНУ2", "СубконтоДтНУ3");

	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриИзмененииСчета(Объект.СчетУчетаРасчетовСКонтрагентомНУ, Объект, ПоляФормы);

	УстановитьЗаголовкиИДоступностьСубконто(ЭтаФорма, Объект.СчетУчетаРасчетовСКонтрагентомБУ,, "ПеречислениеНалогов", Объект.СчетУчетаРасчетовСКонтрагентомНУ);
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтБУ", "ПеречислениеНалогов", "СчетУчетаРасчетовСКонтрагентомБУ");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтНУ", "ПеречислениеНалогов", "СчетУчетаРасчетовСКонтрагентомНУ");
	
	ДанныеОбъекта = Новый Структура("Организация, СубконтоДтБУ1, СубконтоДтБУ2, СубконтоДтБУ3,
									|СубконтоДтНУ1, СубконтоДтНУ2, СубконтоДтНУ3");
			
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
		
	ПроверитьВладельцаСубконтоПодразделениеБУНУ(ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(Объект, ДанныеОбъекта);
	
	УстановитьВидНалогаВАналитикеСчета();
	
КонецПроцедуры

&НаКлиенте
Процедура СчетУчетаНУПеречислениеНалоговПриИзменении(Элемент)
	
	УстановитьЗаголовкиИДоступностьСубконто(ЭтаФорма, Объект.СчетУчетаРасчетовСКонтрагентомБУ,, "ПеречислениеНалогов", Объект.СчетУчетаРасчетовСКонтрагентомНУ);
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтНУ", "ПеречислениеНалогов", "СчетУчетаРасчетовСКонтрагентомНУ");
	
	ДанныеОбъекта = Новый Структура("Организация, СубконтоДтНУ1, СубконтоДтНУ2, СубконтоДтНУ3");
			
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
		
	СчетУчетаНУПриИзмененииНаСервере(ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(Объект, ДанныеОбъекта);

	УстановитьВидНалогаВАналитикеСчета("НУ");
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоДтБУ1ПеречислениеНалоговПриИзменении(Элемент)
	
	ОбщегоНазначенияБККлиентСервер.ЗаменитьСубконтоНУ(Объект, Объект.СчетУчетаРасчетовСКонтрагентомБУ, Объект.СчетУчетаРасчетовСКонтрагентомНУ, 1, Объект.СубконтоДтБУ1, "СубконтоДтНУ");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтБУ", "ПеречислениеНалогов", "СчетУчетаРасчетовСКонтрагентомБУ");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтНУ", "ПеречислениеНалогов", "СчетУчетаРасчетовСКонтрагентомНУ", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоДтБУ2ПеречислениеНалоговПриИзменении(Элемент)
	
	ОбщегоНазначенияБККлиентСервер.ЗаменитьСубконтоНУ(Объект, Объект.СчетУчетаРасчетовСКонтрагентомБУ, Объект.СчетУчетаРасчетовСКонтрагентомНУ, 2, Объект.СубконтоДтБУ2, "СубконтоДтНУ");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтБУ", "ПеречислениеНалогов", "СчетУчетаРасчетовСКонтрагентомБУ");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтНУ", "ПеречислениеНалогов", "СчетУчетаРасчетовСКонтрагентомНУ", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоДтБУ3ПеречислениеНалоговПриИзменении(Элемент)
	
	ОбщегоНазначенияБККлиентСервер.ЗаменитьСубконтоНУ(Объект, Объект.СчетУчетаРасчетовСКонтрагентомБУ, Объект.СчетУчетаРасчетовСКонтрагентомНУ, 3, Объект.СубконтоДтБУ3, "СубконтоДтНУ");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтБУ", "ПеречислениеНалогов", "СчетУчетаРасчетовСКонтрагентомБУ");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтНУ", "ПеречислениеНалогов", "СчетУчетаРасчетовСКонтрагентомНУ", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоДтБУ1ПеречислениеНалоговНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СубконтоНачалоВыбора(Элемент, "СубконтоДтБУ", 1, "СчетУчетаРасчетовСКонтрагентомБУ", Объект, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоДтБУ2ПеречислениеНалоговНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СубконтоНачалоВыбора(Элемент, "СубконтоДтБУ", 2, "СчетУчетаРасчетовСКонтрагентомБУ", Объект, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоДтБУ3ПеречислениеНалоговНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СубконтоНачалоВыбора(Элемент, "СубконтоДтБУ", 3, "СчетУчетаРасчетовСКонтрагентомБУ", Объект, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоДтНУ1ПеречислениеНалоговПриИзменении(Элемент)

	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтНУ", "ПеречислениеНалогов", "СчетУчетаРасчетовСКонтрагентомНУ");

КонецПроцедуры

&НаКлиенте
Процедура СубконтоДтНУ2ПеречислениеНалоговПриИзменении(Элемент)

	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтНУ", "ПеречислениеНалогов", "СчетУчетаРасчетовСКонтрагентомНУ");

КонецПроцедуры

&НаКлиенте
Процедура СубконтоДтНУ3ПеречислениеНалоговПриИзменении(Элемент)

	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтНУ", "ПеречислениеНалогов", "СчетУчетаРасчетовСКонтрагентомНУ");

КонецПроцедуры

&НаКлиенте
Процедура СубконтоДтНУ1ПеречислениеНалоговНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СубконтоНачалоВыбора(Элемент, "СубконтоДтНУ", 1, "СчетУчетаРасчетовСКонтрагентомНУ", Объект, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоДтНУ2ПеречислениеНалоговНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СубконтоНачалоВыбора(Элемент, "СубконтоДтНУ", 2, "СчетУчетаРасчетовСКонтрагентомНУ", Объект, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоДтНУ3ПеречислениеНалоговНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СубконтоНачалоВыбора(Элемент, "СубконтоДтНУ", 3, "СчетУчетаРасчетовСКонтрагентомНУ", Объект, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидНалогаПриИзменении(Элемент)
	
	ВидНалогаПриИзмененииНаСервере();
	УстановитьВидНалогаВАналитикеСчета();
	УстановитьВидНалогаВАналитикеСчета("НУ");
	
КонецПроцедуры

&НаКлиенте
Процедура БанкПосредникГЦВППриИзменении(Элемент)
	
	БанкПосредникПриИзмененииНаКлиенте();

КонецПроцедуры

&НаКлиенте
Процедура БанкПосредникПриИзмененииНаКлиенте(ИзменилсяБанкПосредник = Ложь)

	Если (ТипЗнч(Объект.БанкПосредник) = Тип("СправочникСсылка.Контрагенты")) И (ЗначениеЗаполнено(Объект.БанкПосредник)) Тогда
		СчетБанкаПосредника = ПолучитьЗначениеРеквизита(Объект.БанкПосредник, "ОсновнойБанковскийСчет");
	Иначе
		СчетБанкаПосредника = Неопределено;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеПриИзменении(Элемент)
	
	Если ТекущийДокументОснование = Объект.ДокументОснование Тогда
		Возврат;
	КонецЕсли; 

	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		ТекстВопроса = НСтр("ru='Заполнить текущий документ данными документа-основания?'");
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаПриИзмененииДокументОснование", ЭтотОбъект, Параметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
	КонецЕсли;
	
	ТекущийДокументОснование = Объект.ДокументОснование;
	
КонецПроцедуры

&НаКлиенте
Процедура НазначениеПлатежаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДополнительныеПараметры = Новый Структура("ФормаВладелец, ИмяРеквизита", ЭтаФорма, "НазначениеПлатежа");
	Оповещение = Новый ОписаниеОповещения("НазначениеПлатежаЗавершениеВвода", ЭтотОбъект, ДополнительныеПараметры);
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияМногострочногоТекста(
		Оповещение,
		Объект.НазначениеПлатежа,
		НСтр("ru='Назначение платежа'"));
	
КонецПроцедуры

&НаКлиенте
Процедура НазначениеПлатежаЗавершениеВвода(Строка, Параметры) Экспорт

	Если Строка <> Неопределено Тогда
		
		Объект.НазначениеПлатежа = Строка;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеЭДНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбменСБанкамиКлиент.ОткрытьАктуальныйЭД(Объект.Ссылка, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура РеквизитыОрганизацииСсылкаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	// +++ Проверка заполненности реквизитов организации (банковский счет)
	ПроверкаРеквизитовОрганизацииКлиент.РеквизитыОрганизацииСсылкаОбработкаНавигационнойСсылки(Объект.Организация, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	// --- Проверка заполненности реквизитов организации (банковский счет)
	
КонецПроцедуры

&НаКлиенте
Процедура СчетУчетаПеречислениеПрочихВыплатПриИзменении(Элемент)
	
	Объект.СчетУчетаРасчетовСКонтрагентомНУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", Объект.СчетУчетаРасчетовСКонтрагентомБУ));
	
	ПоляФормы		= Новый Структура("Субконто1, Субконто2, Субконто3",
		"СубконтоДтНУ1", "СубконтоДтНУ2", "СубконтоДтНУ3");

	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриИзмененииСчета(Объект.СчетУчетаРасчетовСКонтрагентомНУ, Объект, ПоляФормы);

	УстановитьЗаголовкиИДоступностьСубконто(ЭтаФорма, Объект.СчетУчетаРасчетовСКонтрагентомБУ,, "ПеречислениеПрочихВыплат", Объект.СчетУчетаРасчетовСКонтрагентомНУ);
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтБУ", "ПеречислениеПрочихВыплат", "СчетУчетаРасчетовСКонтрагентомБУ");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтНУ", "ПеречислениеПрочихВыплат", "СчетУчетаРасчетовСКонтрагентомНУ");
	
	ДанныеОбъекта = Новый Структура("Организация, СубконтоДтБУ1, СубконтоДтБУ2, СубконтоДтБУ3,
									|СубконтоДтНУ1, СубконтоДтНУ2, СубконтоДтНУ3");
			
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
		
	ПроверитьВладельцаСубконтоПодразделениеБУНУ(ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(Объект, ДанныеОбъекта);
	
	УстановитьВидНалогаВАналитикеСчета();

КонецПроцедуры

&НаКлиенте
Процедура СчетУчетаНУПеречислениеПрочихВыплатПриИзменении(Элемент)
	
	УстановитьЗаголовкиИДоступностьСубконто(ЭтаФорма, Объект.СчетУчетаРасчетовСКонтрагентомБУ,, "ПеречислениеПрочихВыплат", Объект.СчетУчетаРасчетовСКонтрагентомНУ);
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтНУ", "ПеречислениеПрочихВыплат", "СчетУчетаРасчетовСКонтрагентомНУ");
	
	ДанныеОбъекта = Новый Структура("Организация, СубконтоДтНУ1, СубконтоДтНУ2, СубконтоДтНУ3");
			
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
		
	СчетУчетаНУПриИзмененииНаСервере(ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(Объект, ДанныеОбъекта);

	УстановитьВидНалогаВАналитикеСчета("НУ");
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоДтБУ1ПеречислениеПрочихВыплатПриИзменении(Элемент)
	
	ОбщегоНазначенияБККлиентСервер.ЗаменитьСубконтоНУ(Объект, Объект.СчетУчетаРасчетовСКонтрагентомБУ, Объект.СчетУчетаРасчетовСКонтрагентомНУ, 1, Объект.СубконтоДтБУ1, "СубконтоДтНУ");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтБУ", "ПеречислениеПрочихВыплат", "СчетУчетаРасчетовСКонтрагентомБУ");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтНУ", "ПеречислениеПрочихВыплат", "СчетУчетаРасчетовСКонтрагентомНУ", Истина);
	
КонецПроцедуры 

&НаКлиенте
Процедура СубконтоДтБУ2ПеречислениеПрочихВыплатПриИзменении(Элемент)
	
	ОбщегоНазначенияБККлиентСервер.ЗаменитьСубконтоНУ(Объект, Объект.СчетУчетаРасчетовСКонтрагентомБУ, Объект.СчетУчетаРасчетовСКонтрагентомНУ, 2, Объект.СубконтоДтБУ2, "СубконтоДтНУ");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтБУ", "ПеречислениеПрочихВыплат", "СчетУчетаРасчетовСКонтрагентомБУ");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтНУ", "ПеречислениеПрочихВыплат", "СчетУчетаРасчетовСКонтрагентомНУ", Истина);

КонецПроцедуры

&НаКлиенте
Процедура СубконтоДтБУ3ПеречислениеПрочихВыплатПриИзменении(Элемент)
	
	ОбщегоНазначенияБККлиентСервер.ЗаменитьСубконтоНУ(Объект, Объект.СчетУчетаРасчетовСКонтрагентомБУ, Объект.СчетУчетаРасчетовСКонтрагентомНУ, 3, Объект.СубконтоДтБУ3, "СубконтоДтНУ");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтБУ", "ПеречислениеПрочихВыплат", "СчетУчетаРасчетовСКонтрагентомБУ");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтНУ", "ПеречислениеПрочихВыплат", "СчетУчетаРасчетовСКонтрагентомНУ", Истина);

КонецПроцедуры

&НаКлиенте
Процедура СубконтоДтБУ1ПеречислениеПрочихВыплатНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	
	СубконтоНачалоВыбора(Элемент, "СубконтоДтБУ", 1, "СчетУчетаРасчетовСКонтрагентомБУ", Объект, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоДтБУ2ПеречислениеПрочихВыплатНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	
	СубконтоНачалоВыбора(Элемент, "СубконтоДтБУ", 2, "СчетУчетаРасчетовСКонтрагентомБУ", Объект, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура СубконтоДтБУ3ПеречислениеПрочихВыплатНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	
	СубконтоНачалоВыбора(Элемент, "СубконтоДтБУ", 3, "СчетУчетаРасчетовСКонтрагентомБУ", Объект, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоДтНУ1ПеречислениеПрочихВыплатПриИзменении(Элемент)

	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтНУ", "ПеречислениеПрочихВыплат", "СчетУчетаРасчетовСКонтрагентомНУ");

КонецПроцедуры

&НаКлиенте
Процедура СубконтоДтНУ2ПеречислениеПрочихВыплатПриИзменении(Элемент)

	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтНУ", "ПеречислениеПрочихВыплат", "СчетУчетаРасчетовСКонтрагентомНУ");

КонецПроцедуры

&НаКлиенте
Процедура СубконтоДтНУ3ПеречислениеПрочихВыплатПриИзменении(Элемент)

	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтНУ", "ПеречислениеПрочихВыплат", "СчетУчетаРасчетовСКонтрагентомНУ");

КонецПроцедуры

&НаКлиенте
Процедура СубконтоДтНУ1ПеречислениеПрочихВыплатНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СубконтоНачалоВыбора(Элемент, "СубконтоДтНУ", 1, "СчетУчетаРасчетовСКонтрагентомНУ", Объект, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоДтНУ2ПеречислениеПрочихВыплатНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СубконтоНачалоВыбора(Элемент, "СубконтоДтНУ", 2, "СчетУчетаРасчетовСКонтрагентомНУ", Объект, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоДтНУ3ПеречислениеПрочихВыплатНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СубконтоНачалоВыбора(Элемент, "СубконтоДтНУ", 3, "СчетУчетаРасчетовСКонтрагентомНУ", Объект, СтандартнаяОбработка);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ РасшифровкаПлатежа

&НаКлиенте
Процедура РасшифровкаПлатежаПриИзменении(Элемент)
	
	РассчитатьСуммуДокумента(ЭтаФорма);
	РассчитатьСуммуКомиссии(ЭтаФорма);
	ОбновитьПодвал(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПередУдалением(Элемент, Отказ)
	
	Отказ = (Объект.РасшифровкаПлатежа.Количество() = 1);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		РассчитатьСуммуДокумента(ЭтаФорма);
		РассчитатьСуммуКомиссии(ЭтаФорма);
		ОбновитьПодвал(ЭтаФорма);
		СформироватьНазначениеПлатежа();
	КонецЕсли;     
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПослеУдаления(Элемент)
	
	РассчитатьСуммуДокумента(ЭтаФорма);
	РассчитатьСуммуКомиссии(ЭтаФорма);
	ОбновитьПодвал(ЭтаФорма);
	СформироватьНазначениеПлатежа();
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаДоговорКонтрагентаПриИзменении(Элемент)
	
	СтрокаПлатеж = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
			
	ДоговорПриИзмененииНаСервере(СтрокаПлатеж.ПолучитьИдентификатор(), Новый Массив);

КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСделкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	
	СтруктураПараметров = Новый Структура("Организация, Контрагент, ДоговорКонтрагента, Дата, ТипыДокументов",
		Объект.Организация, Объект.Контрагент, ТекущиеДанные.ДоговорКонтрагента, Объект.Дата, "Метаданные.Документы.ПлатежноеПоручениеИсходящее.ТабличныеЧасти.РасшифровкаПлатежа.Реквизиты.Сделка.Тип");

	СчетДляОпределенияОстатков = ТекущиеДанные.СчетУчетаРасчетовСКонтрагентомБУ;
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийППИсходящее.ВозвратДенежныхСредствПокупателю") Тогда 
		Если НЕ ЗначениеЗаполнено(ТекущиеДанные.СчетУчетаРасчетовПоАвансам) Тогда
			СчетДляОпределенияОстатков = ТекущиеДанные.СчетУчетаРасчетовПоАвансам;
		КонецЕсли;    		
	КонецЕсли;       
	СтруктураПараметров.Вставить("СчетУчета", СчетДляОпределенияОстатков);
	СтруктураПараметров.Вставить("ОстаткиОбороты", "Дт");
	
	СтруктураПараметров.Вставить("ТипыДокументов", "Метаданные.Документы.ПлатежноеПоручениеИсходящее.ТабличныеЧасти.РасшифровкаПлатежа.Реквизиты.Сделка.Тип");
	
	ПараметрыФормы = Новый Структура("ПараметрыОбъекта", СтруктураПараметров);
	ОткрытьФорму("Документ.ДокументРасчетовСКонтрагентом.ФормаВыбора", ПараметрыФормы, Элемент);

КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСуммаПлатежаПриИзменении(Элемент)
	
	СтрокаПлатеж = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	
	РассчитатьСуммуВзаиморасчетов(СтрокаПлатеж, ЭтаФорма);
	РассчитатьСуммуДокумента(ЭтаФорма);
	РассчитатьСуммуКомиссии(ЭтаФорма);
	СформироватьНазначениеПлатежа();
	ОбновитьПодвал(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаКурсВзаиморасчетовПриИзменении(Элемент)
	
	РассчитатьСуммуВзаиморасчетов(Элементы.РасшифровкаПлатежа.ТекущиеДанные, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаКурсВзаиморасчетовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	СтруктураПараметров = Новый Структура("Валюта", ТекущиеДанные.ДоговорКонтрагентаВалютаВзаиморасчетов);
	СтруктураПараметров.Вставить("ДатаУстановкиКурсаИКратности", Объект.Дата);
	СтруктураПараметров.Вставить("КратностьВалюты", 1);
	СтруктураПараметров.Вставить("КурсВалюты", ТекущиеДанные.КурсВзаиморасчетов);
	
	ПараметрыОбъекта = Новый Структура;
	ПараметрыОбъекта.Вставить("ИмяРасшифровкиПлатежа", "РасшифровкаПлатежа");
	
	Оповещение = Новый ОписаниеОповещения("ПослеВводаКурсаКратности", ЭтотОбъект, ПараметрыОбъекта);
	ОткрытьФорму("ОбщаяФорма.ФормаВводаКурсаИКратности", СтруктураПараметров,,,,, Оповещение);


КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаКратностьВзаиморасчетовПриИзменении(Элемент)
	
	РассчитатьСуммуВзаиморасчетов(Элементы.РасшифровкаПлатежа.ТекущиеДанные, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСуммаВзаиморасчетовПриИзменении(Элемент)
	
	СтрокаПлатеж = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	
	УправлениеДенежнымиСредствамиКлиентСервер.ПроверкаКурсовВалют(СтрокаПлатеж);
	
	Если (СтрокаПлатеж.СуммаВзаиморасчетов <> 0) И (КратностьДокумента <> 0) Тогда
		СтрокаПлатеж.КурсВзаиморасчетов = СтрокаПлатеж.СуммаПлатежа * КурсДокумента * СтрокаПлатеж.КратностьВзаиморасчетов / СтрокаПлатеж.СуммаВзаиморасчетов / КратностьДокумента;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСтавкаНДСПриИзменении(Элемент)
	
	УправлениеДенежнымиСредствамиКлиентСервер.ПересчитатьСуммуНДС(Элементы.РасшифровкаПлатежа.ТекущиеДанные);
	СформироватьНазначениеПлатежа();
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСчетУчетаРасчетовСКонтрагентомБУПриИзменении(Элемент)
	
	СтрокаПлатеж = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийППИсходящее.РасчетыПоКредитамИЗаймамСКонтрагентами") Тогда
	
		СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентомНУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентомБУ));
		
	Иначе
		
		СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентомНУ = ПредопределенноеЗначение("ПланСчетов.Налоговый.ПустаяСсылка");
		
	КонецЕсли;		

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ПеречислениеЗаработнойПлаты

&НаКлиенте
Процедура ПеречислениеЗаработнойПлатыПриИзменении(Элемент)
	
	РассчитатьСуммуДокумента(ЭтаФорма);
	РассчитатьСуммуКомиссии(ЭтаФорма);
	ОбновитьПодвал(ЭтаФорма);
	СформироватьНазначениеПлатежа()
	
КонецПроцедуры

&НаКлиенте
Процедура ПеречислениеЗаработнойПлатыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		РассчитатьСуммуДокумента(ЭтаФорма);
		РассчитатьСуммуКомиссии(ЭтаФорма);
		ОбновитьПодвал(ЭтаФорма);
		СформироватьНазначениеПлатежа();
	КонецЕсли;     
	
КонецПроцедуры

&НаКлиенте
Процедура ПеречислениеЗаработнойПлатыПослеУдаления(Элемент)
	
	РассчитатьСуммуДокумента(ЭтаФорма);
	РассчитатьСуммуКомиссии(ЭтаФорма);
	ОбновитьПодвал(ЭтаФорма);
	СформироватьНазначениеПлатежа();
	
КонецПроцедуры

&НаКлиенте
Процедура ПеречислениеЗаработнойПлатыВедомостьПриИзменении(Элемент)

	ТекущиеДанные = Элементы.ПеречислениеЗаработнойПлаты.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Ложь;
	
	ПроверитьДублированиеДокументовПеречисления(Объект, "ПеречислениеЗаработнойПлаты", "Ведомость", ТекущиеДанные.Ведомость, ТекущиеДанные.НомерСтроки - 1, Отказ);

	Если Отказ Тогда 
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Ведомость) Тогда
		ТекущиеДанные.СуммаКВыплате = ПолучитьСуммуКВыплатеЗПНаСервере(Объект.Ссылка, ТекущиеДанные.Ведомость);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПеречислениеЗаработнойПлатыВедомостьНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация",   Объект.Организация);
	ПараметрыФормы.Вставить("СпособВыплаты", ПредопределенноеЗначение("Перечисление.СпособыВыплатыЗарплаты.ЧерезБанк"));
	ПараметрыФормы.Вставить("Регистратор",   Объект.Ссылка);

	Если ПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
		ПараметрыФормы.Вставить("СтруктурноеПодразделение", Объект.СтруктурноеПодразделениеОтправитель);
	КонецЕсли;
	
	ОткрытьФорму("Документ.ЗарплатаКВыплатеОрганизаций.ФормаВыбора", Новый Структура("Отбор", ПараметрыФормы), Элемент);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ПеречислениеПенсионныхВзносов

&НаКлиенте
Процедура ПеречислениеПенсионныхВзносовПриИзменении(Элемент)
	
	РассчитатьСуммуДокумента(ЭтаФорма);
	РассчитатьСуммуКомиссии(ЭтаФорма);
	ОбновитьПодвал(ЭтаФорма);
	СформироватьНазначениеПлатежа();
	
КонецПроцедуры

&НаКлиенте
Процедура ПеречислениеПенсионныхВзносовПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		РассчитатьСуммуДокумента(ЭтаФорма);
		РассчитатьСуммуКомиссии(ЭтаФорма);
		ОбновитьПодвал(ЭтаФорма);
		СформироватьНазначениеПлатежа();
	КонецЕсли;     
	
КонецПроцедуры

&НаКлиенте
Процедура ПеречислениеПенсионныхВзносовПослеУдаления(Элемент)
	
	РассчитатьСуммуДокумента(ЭтаФорма);
	РассчитатьСуммуКомиссии(ЭтаФорма);
	ОбновитьПодвал(ЭтаФорма);
	СформироватьНазначениеПлатежа();
	
КонецПроцедуры

&НаКлиенте
Процедура ПеречислениеПенсионныхВзносовДокументПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПеречислениеПенсионныхВзносов.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Ложь;
	
	ПроверитьДублированиеДокументовПеречисления(Объект, "ПеречислениеПенсионныхВзносов", "Документ", ТекущиеДанные.Документ, ТекущиеДанные.НомерСтроки - 1, Отказ);

	Если Отказ Тогда 
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Документ) Тогда

		СтруктураДанных = ПолучитьСтруктуруПриИзмененииДокументаППВНаСервере(ТекущиеДанные.Документ);
		ТекущиеДанные.СуммаКПеречислению = СтруктураДанных.СуммаКПеречислению;
		ТекущиеДанные.ВидВзноса = СтруктураДанных.ВидВзноса;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ПеречислениеЕдиногоПлатежа

&НаКлиенте
Процедура ПеречислениеЕдиногоПлатежаПриИзменении(Элемент)
	
	РассчитатьСуммуДокумента(ЭтаФорма);
	РассчитатьСуммуКомиссии(ЭтаФорма);
	ОбновитьПодвал(ЭтаФорма);
	СформироватьНазначениеПлатежа();
	
КонецПроцедуры

&НаКлиенте
Процедура ПеречислениеЕдиногоПлатежаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		РассчитатьСуммуДокумента(ЭтаФорма);
		РассчитатьСуммуКомиссии(ЭтаФорма);
		ОбновитьПодвал(ЭтаФорма);
		СформироватьНазначениеПлатежа();
	КонецЕсли;     
	
КонецПроцедуры

&НаКлиенте
Процедура ПеречислениеЕдиногоПлатежаПослеУдаления(Элемент)
	
	РассчитатьСуммуДокумента(ЭтаФорма);
	РассчитатьСуммуКомиссии(ЭтаФорма);
	ОбновитьПодвал(ЭтаФорма);
	СформироватьНазначениеПлатежа();
	
КонецПроцедуры

&НаКлиенте
Процедура ПеречислениеЕдиногоПлатежаДокументПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПеречислениеЕдиныхПлатежей.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Ложь;
	
	ПроверитьДублированиеДокументовПеречисления(Объект, "ПеречислениеЕдиныхПлатежей", "Документ", ТекущиеДанные.Документ, ТекущиеДанные.НомерСтроки - 1, Отказ);

	Если Отказ Тогда 
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Документ) Тогда

		СтруктураДанных = ПолучитьСтруктуруПриИзмененииДокументаЕПНаСервере(ТекущиеДанные.Документ);
		ТекущиеДанные.СуммаКПеречислению = СтруктураДанных.СуммаПлатежа;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ПеречислениеПрочихВыплат

&НаКлиенте
Процедура ПеречислениеПрочихВыплатПриИзменении(Элемент)
		
	РассчитатьСуммуДокумента(ЭтаФорма);
	РассчитатьСуммуКомиссии(ЭтаФорма);
	ОбновитьПодвал(ЭтаФорма);
	СформироватьНазначениеПлатежа();
	
КонецПроцедуры

&НаКлиенте
Процедура ПеречислениеПрочихВыплатПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		РассчитатьСуммуДокумента(ЭтаФорма);
		РассчитатьСуммуКомиссии(ЭтаФорма);
		ОбновитьПодвал(ЭтаФорма);
		СформироватьНазначениеПлатежа();
	КонецЕсли;     
	
КонецПроцедуры

&НаКлиенте
Процедура ПеречислениеПрочихВыплатПослеУдаления(Элемент)
	
	РассчитатьСуммуДокумента(ЭтаФорма);
	РассчитатьСуммуКомиссии(ЭтаФорма);
	ОбновитьПодвал(ЭтаФорма);
	СформироватьНазначениеПлатежа();
	
КонецПроцедуры 

&НаКлиенте
Процедура ПеречислениеПрочихВыплатДокументПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПеречислениеПрочихВыплат.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Ложь;
	
	ПроверитьДублированиеДокументовПеречисления(Объект, "ПеречислениеПрочихВыплат", "Документ", ТекущиеДанные.Документ, ТекущиеДанные.НомерСтроки - 1, Отказ);
	ПроверитьСоответствиеВидовПрочихВыплатДокументовПеречисления(Объект, ТекущиеДанные.Документ, ТекущиеДанные.НомерСтроки - 1, Отказ);
	
	Если Отказ Тогда 
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Документ) Тогда
		
		СтруктураДанных = ПолучитьСтруктуруПриИзмененииДокументаПрочихВыплатНаСервере(ТекущиеДанные.Документ);
		ТекущиеДанные.СуммаКПеречислению = СтруктураДанных.Сумма;
		ТекущиеДанные.ВидПрочихВыплат = СтруктураДанных.ВидПрочихВыплат;
		ТекущийВидПрочихВыплат = СтруктураДанных.ВидПрочихВыплат;
		
		Если Элементы.ПеречислениеПрочихВыплат.ТекущиеДанные.НомерСтроки = 1 Тогда
			
			ВидимостьНалоговогоУчета = Объект.УчитыватьКПН И (ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль ИЛИ Объект.ВидУчетаНУ = ПредопределенноеЗначение("Справочник.ВидыУчетаНУ.НУ"));
	
			Если НЕ ЗначениеЗаполнено(Объект.СчетУчетаРасчетовСКонтрагентомБУ) 
				ИЛИ (НЕ ЗначениеЗаполнено(Объект.СчетУчетаРасчетовСКонтрагентомНУ) И ВидимостьНалоговогоУчета) Тогда 
				
				 ЗаполнитьСчетаПоСпособуОтражения(ТекущийВидПрочихВыплат)
				
			Иначе	
				
				ТекстВопроса = НСтр("ru='Заполнить счета расчетов из способа отражения вида прочих выплат?'");
				Режим = РежимДиалогаВопрос.ДаНет;
				Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаПриИзмененииДокументаВТабЧасти", ЭтотОбъект, Параметры);
				ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
				
			КонецЕсли;
			
		КонецЕсли; 
	
	КонецЕсли;
	
КонецПроцедуры  

&НаКлиенте
Процедура ПеречислениеПрочихВыплатВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ПеречислениеПрочихВыплат.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	Если Поле.Имя = "ПеречислениеПрочихВыплатВидПрочихВыплат" Тогда
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(, ТекущиеДанные.ВидПрочихВыплат);	
	КонецЕсли;
		
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ПеречислениеСоциальныхОтчислений

&НаКлиенте
Процедура ПеречислениеСоциальныхОтчисленийПриИзменении(Элемент)
	
	РассчитатьСуммуДокумента(ЭтаФорма);
	РассчитатьСуммуКомиссии(ЭтаФорма);
	ОбновитьПодвал(ЭтаФорма);
	СформироватьНазначениеПлатежа();

КонецПроцедуры

&НаКлиенте
Процедура ПеречислениеСоциальныхОтчисленийПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		РассчитатьСуммуДокумента(ЭтаФорма);
		РассчитатьСуммуКомиссии(ЭтаФорма);
		ОбновитьПодвал(ЭтаФорма);
		СформироватьНазначениеПлатежа();
	КонецЕсли;     
	
КонецПроцедуры

&НаКлиенте
Процедура ПеречислениеСоциальныхОтчисленийПослеУдаления(Элемент)
	
	РассчитатьСуммуДокумента(ЭтаФорма);
	РассчитатьСуммуКомиссии(ЭтаФорма);
	ОбновитьПодвал(ЭтаФорма);
	СформироватьНазначениеПлатежа();
	
КонецПроцедуры

&НаКлиенте
Процедура ПеречислениеСоциальныхОтчисленийДокументПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПеречислениеСоциальныхОтчислений.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Отказ = Ложь;
	
	ПроверитьДублированиеДокументовПеречисления(Объект, "ПеречислениеСоциальныхОтчислений", "Документ", ТекущиеДанные.Документ, ТекущиеДанные.НомерСтроки - 1, Отказ);

	Если Отказ Тогда 
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Документ) Тогда
		СтруктураДанных = ПолучитьСтруктуруПриИзмененииДокументаСОНаСервере(ТекущиеДанные.Документ);
		ТекущиеДанные.СуммаКПеречислению = СтруктураДанных.СуммаКПеречислению;
		ТекущиеДанные.ВидВзноса = СтруктураДанных.ВидВзноса;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ПеречислениеПоИсполнительнымЛистам

&НаКлиенте
Процедура ПеречислениеПоИсполнительнымЛистамПриИзменении(Элемент)
	
	РассчитатьСуммуДокумента(ЭтаФорма);
	РассчитатьСуммуКомиссии(ЭтаФорма);
	ОбновитьПодвал(ЭтаФорма);
	СформироватьНазначениеПлатежа();
	
КонецПроцедуры

&НаКлиенте
Процедура ПеречислениеПоИсполнительнымЛистамПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		РассчитатьСуммуДокумента(ЭтаФорма);
		РассчитатьСуммуКомиссии(ЭтаФорма);
		ОбновитьПодвал(ЭтаФорма);
		СформироватьНазначениеПлатежа();
	КонецЕсли;     
	
КонецПроцедуры

&НаКлиенте
Процедура ПеречислениеПоИсполнительнымЛистамПослеУдаления(Элемент)
	
	РассчитатьСуммуДокумента(ЭтаФорма);
	РассчитатьСуммуКомиссии(ЭтаФорма);
	ОбновитьПодвал(ЭтаФорма);
	СформироватьНазначениеПлатежа();
	
КонецПроцедуры

&НаКлиенте
Процедура ПеречислениеПоИсполнительнымЛистамДокументПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПеречислениеПоИсполнительнымЛистам.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Отказ = Ложь;
	
	ПроверитьДублированиеДокументовПеречисления(Объект, "ПеречислениеПоИсполнительнымЛистам", "Документ", ТекущиеДанные.Документ, ТекущиеДанные.НомерСтроки - 1, Отказ);

	Если Отказ Тогда 
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Документ) Тогда
		СтруктураДанных = ПолучитьСтруктуруПриИзмененииДокументаИЛНаСервере(ТекущиеДанные.Документ);
		ТекущиеДанные.СуммаКПеречислению = СтруктураДанных.СуммаКПеречислению;
		ТекущиеДанные.СуммаСборов 		 = СтруктураДанных.СуммаСборов;
		ТекущиеДанные.СуммаПлатежа		 = СтруктураДанных.СуммаПлатежа;
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ПеречислениеВПодотчет

&НаКлиенте
Процедура ПеречислениеВПодотчетПриИзменении(Элемент)
	
	РассчитатьСуммуДокумента(ЭтаФорма);
	РассчитатьСуммуКомиссии(ЭтаФорма);
	ОбновитьПодвал(ЭтаФорма);
	СформироватьНазначениеПлатежа();
	
КонецПроцедуры

&НаКлиенте
Процедура ПеречислениеВПодотчетПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И НЕ Копирование Тогда
		ТекущиеДанные = Элементы.ПеречислениеВПодотчет.ТекущиеДанные;
		ТекущиеДанные.СчетУчета = ПредопределенноеЗначение("ПланСчетов.Типовой.КраткосрочнаяЗадолженностьПодотчетныхЛиц");
		ТекущиеДанные.СтатьяДвиженияДенежныхСредств = Объект.СтатьяДвиженияДенежныхСредств;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПеречислениеВПодотчетПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		РассчитатьСуммуДокумента(ЭтаФорма);
		РассчитатьСуммуКомиссии(ЭтаФорма);
		ОбновитьПодвал(ЭтаФорма);
		СформироватьНазначениеПлатежа();
	КонецЕсли;     
	
КонецПроцедуры

&НаКлиенте
Процедура ПеречислениеВПодотчетПослеУдаления(Элемент)
	
	РассчитатьСуммуДокумента(ЭтаФорма);
	РассчитатьСуммуКомиссии(ЭтаФорма);
	ОбновитьПодвал(ЭтаФорма);
	СформироватьНазначениеПлатежа();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ПеречислениеНДССИзмененнымСрокомУплаты

&НаКлиенте
Процедура ПеречислениеНДССИзмененнымСрокомУплатыПриИзменении(Элемент)
	
	РассчитатьСуммуДокумента(ЭтаФорма);
	РассчитатьСуммуКомиссии(ЭтаФорма);
	ОбновитьПодвал(ЭтаФорма);
	СформироватьНазначениеПлатежа();
	
	СтрокаПлатеж = Элементы.ПеречислениеНДССИзмененнымСрокомУплаты.ТекущиеДанные;
	ПеречислениеНДССИзмененнымСрокомУплатыПриИзмененииНаСервере(СтрокаПлатеж.ПолучитьИдентификатор());
	
КонецПроцедуры

&НаКлиенте
Процедура ПеречислениеНДССИзмененнымСрокомУплатыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		РассчитатьСуммуДокумента(ЭтаФорма);
		РассчитатьСуммуКомиссии(ЭтаФорма);
		ОбновитьПодвал(ЭтаФорма);
		СформироватьНазначениеПлатежа();
	КонецЕсли;     
	
КонецПроцедуры

&НаКлиенте
Процедура ПеречислениеНДССИзмененнымСрокомУплатыПослеУдаления(Элемент)
	
	РассчитатьСуммуДокумента(ЭтаФорма);
	РассчитатьСуммуКомиссии(ЭтаФорма);
	ОбновитьПодвал(ЭтаФорма);
	СформироватьНазначениеПлатежа();
	
КонецПроцедуры

&НаКлиенте
Процедура ПеречислениеНДССИзмененнымСрокомУплатыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	СтрокаТабличнойЧасти = Элементы.ПеречислениеНДССИзмененнымСрокомУплаты.ТекущиеДанные;
	
	Если НоваяСтрока Тогда
		
		ДанныеОбъекта = Новый Структура("Дата, Организация", Объект.Дата, Объект.Организация);
		ДанныеСтроки  = Новый Структура("НДСВидОборота", СтрокаТабличнойЧасти.НДСВидОборота);
		
		ЗаполнитьНДСВидОборота(ДанныеОбъекта, ДанныеСтроки);
		
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ДанныеСтроки, "НДСВидОборота");
		
	КонецЕсли;	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ЗаполнитьТекст(Команда)
	
	СформироватьНазначениеПлатежа();
	
КонецПроцедуры

&НаКлиенте
Процедура НеУказыватьСуммуИНДС(Команда)
	
	СформироватьНазначениеПлатежа("НеУказыватьСуммуИНДС");
	
КонецПроцедуры

&НаКлиенте
Процедура УказатьСумму(Команда)
	
	СформироватьНазначениеПлатежа("Сумма");
	
КонецПроцедуры

&НаКлиенте
Процедура УказатьСуммуИНДС(Команда)
	
	СформироватьНазначениеПлатежа("СуммаИНДС");
	
КонецПроцедуры

&НаКлиенте
Процедура УказатьНДС(Команда)
	
	СформироватьНазначениеПлатежа("НДС");

КонецПроцедуры

&НаКлиенте
Процедура СформироватьФайлыВыгрузкиЗарплаты(Команда)
	
	Если Объект.ПеречислениеЗаработнойПлаты.Количество() = 0 Тогда		
		ПоказатьПредупреждение(,НСтр("ru = 'Не указан список перечисляемых сумм'"));
		Возврат;
	КонецЕсли;

	Если Модифицированность ИЛИ Параметры.Ключ.Пустая() Тогда
		
		ТекстВопроса = НСтр("ru = 'Для выгрузки данных необходимо записать документ. Продолжить?.
						|Записать?'");
						Режим = РежимДиалогаВопрос.ОКОтмена;
						Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаЗаписатьВФорме", ЭтотОбъект, Параметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
	Иначе
		
		ВыгрузитьДанныеВФорматеМТ102();
		
	КонецЕсли;


КонецПроцедуры

&НаКлиенте
Процедура СформироватьФайлыВыгрузкиПенсионныеВзносы(Команда)
	
	Если Объект.ПеречислениеПенсионныхВзносов.Количество() = 0 Тогда		
		ПоказатьПредупреждение(,НСтр("ru = 'Не указан список перечисляемых сумм'"));
		Возврат;
	КонецЕсли;

	Если Модифицированность ИЛИ Параметры.Ключ.Пустая() Тогда
		
		ТекстВопроса = НСтр("ru = 'Для выгрузки данных необходимо записать документ. Продолжить?.
						|Записать?'");
						Режим = РежимДиалогаВопрос.ОКОтмена;
						Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаЗаписатьВФорме", ЭтотОбъект, Параметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
	Иначе
		
		ВыгрузитьДанныеВФорматеМТ102();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьФайлыВыгрузкиПодотчет(Команда)
	
	Если Объект.ПеречислениеВПодотчет.Количество() = 0 Тогда		
		ПоказатьПредупреждение(,НСтр("ru = 'Не указан список перечисляемых сумм'"));
		Возврат;
	КонецЕсли;

	Если Модифицированность ИЛИ Параметры.Ключ.Пустая() Тогда
		
		ТекстВопроса = НСтр("ru = 'Для выгрузки данных необходимо записать документ. Продолжить?.
						|Записать?'");
						Режим = РежимДиалогаВопрос.ОКОтмена;
						Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаЗаписатьВФорме", ЭтотОбъект, Параметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
	Иначе
		
		ВыгрузитьДанныеВФорматеМТ102();
		
	КонецЕсли;

	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьФайлыВыгрузкиСоциальныеОтчисления(Команда)
	
	Если Объект.ПеречислениеСоциальныхОтчислений.Количество() = 0 Тогда		
		ПоказатьПредупреждение(,НСтр("ru = 'Не указан список перечисляемых сумм'"));
		Возврат;
	КонецЕсли;

	Если Модифицированность ИЛИ Параметры.Ключ.Пустая() Тогда
		
		ТекстВопроса = НСтр("ru = 'Для выгрузки данных необходимо записать документ. Продолжить?.
						|Записать?'");
						Режим = РежимДиалогаВопрос.ОКОтмена;
						Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаЗаписатьВФорме", ЭтотОбъект, Параметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
	Иначе
		
		ВыгрузитьДанныеВФорматеМТ102();
		
	КонецЕсли;

	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьФайлыВыгрузкиЕдиныхПлатежей(Команда)
	
	Если Объект.ПеречислениеЕдиныхПлатежей.Количество() = 0 Тогда		
		ПоказатьПредупреждение(,НСтр("ru = 'Не указан список перечисляемых сумм'"));
		Возврат;
	КонецЕсли;

	Если Модифицированность ИЛИ Параметры.Ключ.Пустая() Тогда
		
		ТекстВопроса = НСтр("ru = 'Для выгрузки данных необходимо записать документ. Продолжить?.
						|Записать?'");
						Режим = РежимДиалогаВопрос.ОКОтмена;
						Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаЗаписатьВФорме", ЭтотОбъект, Параметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
		
	Иначе
		
		ВыгрузитьДанныеВФорматеМТ102();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьФайлыВыгрузкиПрочихВыплат(Команда)
	
	Если Объект.ПеречислениеПрочихВыплат.Количество() = 0 Тогда		
		ПоказатьПредупреждение(,НСтр("ru = 'Не указан список перечисляемых сумм'"));
		Возврат;
	КонецЕсли;

	Если Модифицированность ИЛИ Параметры.Ключ.Пустая() Тогда
		
		ТекстВопроса = НСтр("ru = 'Для выгрузки данных необходимо записать документ. Продолжить?.
						|Записать?'");
						Режим = РежимДиалогаВопрос.ОКОтмена;
						Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаЗаписатьВФорме", ЭтотОбъект, Параметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
		
	Иначе
		
		ВыгрузитьДанныеВФорматеМТ102();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьНДС(Команда)
	
	Если Объект.ПеречислениеНДССИзмененнымСрокомУплаты.Количество() > 0 Тогда
		
		ТекстВопроса = НСтр("ru='Все строки табличной части,будут удалены. Продолжить?'");
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаЗаполнитьНДС", ЭтотОбъект, Параметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
		
	Иначе
		
		ПеречислениеНДССИзмененнымСрокомУплатыЗаполнитьНаСервере();

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаЗаполнитьНДС(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат	
	КонецЕсли;

	Объект.ПеречислениеНДССИзмененнымСрокомУплаты.Очистить();
	
	ПеречислениеНДССИзмененнымСрокомУплатыЗаполнитьНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуЭДО(Команда)
	
	ЭлектронноеВзаимодействиеКлиент.ВыполнитьПодключаемуюКомандуЭДО(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры


&НаКлиенте
Процедура РеквизитыПечати(Команда)
	
	СтруктураПараметров = Новый Структура();
	// Реквизиты печати
	СтруктураПараметров.Вставить("РННПлательщика", 			 Объект.РННПлательщика);
	СтруктураПараметров.Вставить("РННПолучателя", 			 Объект.РННПолучателя);
	СтруктураПараметров.Вставить("ТекстПлательщика", 		 Объект.ТекстПлательщика);
	СтруктураПараметров.Вставить("ТекстПолучателя",			 Объект.ТекстПолучателя);
	СтруктураПараметров.Вставить("ДатаПолученияТовара",		 Объект.ДатаПолученияТовара);
	СтруктураПараметров.Вставить("ДатаВалютирования",		 Объект.ДатаВалютирования);
	СтруктураПараметров.Вставить("КодБК",					 Объект.КодБК);
	СтруктураПараметров.Вставить("БанкПосредник",			 Объект.БанкПосредник);
	СтруктураПараметров.Вставить("СчетБанкаПосредника",		 Объект.СчетБанкаПосредника);
	СтруктураПараметров.Вставить("ФактическийПлательщик",    Объект.ФактическийПлательщик);
	// Дополнительные реквизиты 
	СтруктураПараметров.Вставить("ТолькоПросмотр",		 	 ЭтаФорма.ТолькоПросмотр);
	СтруктураПараметров.Вставить("Организация",		 		 Объект.Организация);
	СтруктураПараметров.Вставить("СчетОрганизации",			 Объект.СчетОрганизации);
	СтруктураПараметров.Вставить("ВидОперации",		 		 Объект.ВидОперации);
	СтруктураПараметров.Вставить("ДатаВыписки",		 		 Объект.ДатаВыписки);
	СтруктураПараметров.Вставить("Дата",			 		 Объект.Дата);
	СтруктураПараметров.Вставить("Контрагент",			 	 Объект.Контрагент);
	СтруктураПараметров.Вставить("СчетКонтрагента",			 Объект.СчетКонтрагента);
	СтруктураПараметров.Вставить("ДатаПрекращенияВыводаРНН", ЭтаФорма.ДатаПрекращенияВыводаРНН);
	СтруктураПараметров.Вставить("СтруктурноеПодразделениеОтправитель", Объект.СтруктурноеПодразделениеОтправитель);
	СтруктураПараметров.Вставить("СтруктурноеПодразделениеПолучатель", 	Объект.СтруктурноеПодразделениеПолучатель);
	СтруктураПараметров.Вставить("СтруктурноеПодразделениеОрганизация", СтруктурноеПодразделениеОрганизация);
	
	ОткрытьФорму("Документ.ПлатежноеПоручениеИсходящее.Форма.РеквизитыПечати", СтруктураПараметров, ЭтаФорма,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 
	
КонецПроцедуры

&НаКлиенте
Процедура КомиссияБанка(Команда)
	
	РаботаСДиалогамиКлиент.ОткрытьФормуКомиссияБанка(ЭтаФорма, "ПлатежноеПоручениеИсходящее");
	
КонецПроцедуры

&НаКлиенте
Процедура КодБКНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора"		  , Истина);
	ПараметрыФормы.Вставить("ИмяМакета"			  , "КодыБюджетнойКлассификации");
	ПараметрыФормы.Вставить("ИмяСекции"			  ,	"Классификатор");
	ПараметрыФормы.Вставить("ПолучатьПолныеДанные", Истина);
	ПараметрыФормы.Вставить("ТекущийКодСтроки"	  , ?(НЕ ЗначениеЗаполнено(Объект.КодБК), Неопределено, СокрЛП(Объект.КодБК)));
	ПараметрыФормы.Вставить("ЯзыкМакета", ОбщегоНазначенияКлиент.КодОсновногоЯзыка());
	
	ОткрытьФорму("ОбщаяФорма.ФормаВыбораИзКлассификатора", ПараметрыФормы, ЭтаФорма, Истина, , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
     ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
     ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры
 
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
     ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
     ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	Форма.ВидимостьНалоговогоУчета = Объект.УчитыватьКПН И (Форма.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль ИЛИ Объект.ВидУчетаНУ = ПредопределенноеЗначение("Справочник.ВидыУчетаНУ.НУ"));
	
	// Доступность взаимосвязанных полей
	Элементы.ВидУчетаНУ.Видимость            = Объект.УчитыватьКПН;
	Элементы.ДекорацияВидУчетаНУ.Видимость   = (НЕ Объект.УчитыватьКПН) ИЛИ (НЕ Форма.ОрганизацияПлательщикНалогаНаПрибыль);
	Элементы.ДекорацияУчитыватьКПН.Видимость = НЕ Форма.ОрганизацияПлательщикНалогаНаПрибыль;

	Элементы.ИтогоСписок.Видимость = Форма.ЕстьРасшифровкаПлатежа;
	
	Элементы.Контрагент.Заголовок 	   	 = НСтр("ru = 'Получатель'");
	Элементы.СчетКонтрагента.Заголовок 	 = НСтр("ru = 'Счет получателя'");
	Элементы.Контрагент.Видимость 		 = Истина;
	Элементы.СчетКонтрагента.Видимость 	 = Истина;
	Элементы.СтатьяДвиженияДенежныхСредств.Видимость = Истина;
	// +++ Проверка заполненности реквизитов организации (банковский счет)
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СчетОрганизации", "Видимость", Форма.ИспользоватьНесколькоБанковскихСчетовОрганизации);
	// --- Проверка заполненности реквизитов организации (банковский счет)
	Элементы.СчетБанк.Видимость			 = Форма.ПоказыватьВДокументахСчетаУчета;
		
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийППИсходящее.ПеречислениеСоциальныхОтчислений") Тогда
		
		Элементы.Контрагент.Заголовок = НСтр("ru = 'ГК ПДГ'");
				
		Если ТипЗнч(Объект.БанкПосредник) <> Тип("СправочникСсылка.Контрагенты") Тогда
			Объект.БанкПосредник = ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаГЦВП", "Видимость", ЗначениеЗаполнено(Объект.БанкПосредник));
				
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийППИсходящее.ПеречислениеПенсионныхВзносов") Тогда
		
		Элементы.Контрагент.Заголовок = НСтр("ru = 'ГК ПДГ'");
		Элементы.СчетКонтрагента.Заголовок = НСтр("ru = 'Счет ГК ПДГ'");
			
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийППИсходящее.ПереводНаДругойСчет") Тогда
		
		Элементы.СчетОрганизации.Видимость = Ложь;
		Элементы.Контрагент.Видимость = Ложь;
		Элементы.СчетКонтрагента.Видимость = Ложь;
		Элементы.СтатьяДвиженияДенежныхСредств.Видимость = Ложь;
		
	ИначеЕсли Форма.ЕстьРасшифровкаПлатежа 
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийППИсходящее.ПеречислениеДенежныхСредствПодотчетнику")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийППИсходящее.ПрочееСписаниеБезналичныхДенежныхСредств") Тогда
		
		Элементы.СтатьяДвиженияДенежныхСредств.Видимость = Ложь;
		
	КонецЕсли;
	
	Элементы.Дата.ТолькоПросмотр = НЕ Объект.Оплачено;
	
	НеобходимостьЗаполненияКонтрагента = Форма.ЕстьРасшифровкаПлатежа
													ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийППИсходящее.ПеречислениеПенсионныхВзносов")
													ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийППИсходящее.ПеречислениеСоциальныхОтчислений");
	
	Элементы.Контрагент.АвтоОтметкаНезаполненного = НеобходимостьЗаполненияКонтрагента;
	Элементы.Контрагент.ОтметкаНезаполненного = НеобходимостьЗаполненияКонтрагента;
	Элементы.КодБК.Видимость = НЕ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийППИсходящее.ПеречислениеЕдиногоПлатежа");
												
	Элементы.ИнформационнаяНадписьИтого.Видимость = Элементы.КомиссияБанка.Видимость;
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере()   
	
	УстановитьФункциональныеОпцииФормы();
	
	ТекущаяДатаДокумента     = Объект.Дата;
	ТекущаяДатаВыпискиДокумента = Объект.ДатаВыписки;
	ТекущаяВалютаДокумента   = Объект.ВалютаДокумента;
	ТекущийДокументОснование = Объект.ДокументОснование;
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	ДатаПрекращенияВыводаРНН = Константы.ДатаПрекращенияВыводаРННВПервичныхДокументах.Получить();
	
	ВедетсяУчетПоРасчетнымДокументам = УправлениеВзаиморасчетамиСервер.ВедутсяВзаиморасчетыПоДокументам();
	
	ОплатаВВалюте = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(Объект.СчетБанк).Валютный;
	
	ЕстьРасшифровкаПлатежа = Документы.ПлатежноеПоручениеИсходящее.ЕстьРасшифровкаПлатежа(Объект.ВидОперации);
	
	СписокВидовДоговоров = УправлениеВзаиморасчетамиСервер.ОпределитьВидДоговораСКонтрагентом(Объект.ВидОперации);
	
	НастройкиПользователя = ПользователиБКВызовСервераПовтИсп.ЗначенияНастроекПользователя(
								Пользователи.ТекущийПользователь(), "ПоказыватьВДокументахСчетаУчета,УчетПоВсемОрганизациям");
		
	ПоказыватьВДокументахСчетаУчета = НастройкиПользователя.ПоказыватьВДокументахСчетаУчета;
								
	УстановитьПараметрыВыбораДоговораСКонтрагентом(ЭтотОбъект);
	УстановитьСвязиПараметровВыбораСчетКонтрагента();
	УстановитьПараметрыВыбораСчетовУчетаДенежныхСредств();
	
	ПоддержкаРаботыСоСтруктурнымиПодразделениями = ПолучитьФункциональнуюОпцию("ПоддержкаРаботыСоСтруктурнымиПодразделениями");	
	ИспользоватьПечатныеФормыПП2024 = УправлениеДенежнымиСредствамиСервер.ИспользоватьПечатныеФормыПП2024();                   
	
	УстановитьКурсДокумента();
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	Если Объект.РасшифровкаПлатежа.Количество() = 0 Тогда
		НоваяСтрока = Объект.РасшифровкаПлатежа.Добавить();
	КонецЕсли;

	Элементы.РасшифровкаПлатежа.ТекущаяСтрока = 0; 
	
	Если ЕстьРасшифровкаПлатежа Тогда	
		Элементы.РасшифровкаПлатежаСчетНаОплату.Видимость = (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийППИсходящее.ОплатаПоставщику"));	
	КонецЕсли;
	
	Если Параметры.Ключ.Пустая() Тогда
		
		ПроцедурыНалоговогоУчета.ПриИзмененииПризнакаОтраженияВНалоговомУчете(Объект.Организация, Объект.Дата, Объект.УчитыватьКПН, Истина);
		ПроцедурыНалоговогоУчета.ЗаполнитьВидУчетаНУ(Объект.УчитыватьКПН, Объект.ВидУчетаНУ);

		Объект.ДатаВалютирования = Объект.Дата;
		Объект.ДатаВыписки = Объект.Дата;
		
		Если НЕ ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			
			ПричиныИзмененияСчетовУчета = Новый Массив;
			ПричиныИзмененияСчетовУчета.Добавить("СчетОрганизации");
			ЗаполнитьСчетаУчета(ПричиныИзмененияСчетовУчета, "СчетОрганизации");
			
			НачальноеЗаполнениеПриВыбореОрганизации();
			СчетОрганизацииПриИзмененииНаСервере(, ПричиныИзмененияСчетовУчета);
			ПересчетСуммаДокументаПриИзменении(ЭтаФорма);
			
			Если ПустаяСтрока(Объект.НазначениеПлатежа) Тогда
				СформироватьНазначениеПлатежа();
			КонецЕсли;
			
			ЗаполнитьТекстОтправителя();
			ЗаполнитьТекстПолучателя();
			
		КонецЕсли;

	Иначе
		ОбновитьПодвал(ЭтаФорма);
	КонецЕсли;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеНалога
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеЕдиногоПлатежа
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеНДССИзмененнымСрокомУплаты Тогда
		
		ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтБУ", "ПеречислениеНалогов", "СчетУчетаРасчетовСКонтрагентомБУ");	
		ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтНУ", "ПеречислениеНалогов", "СчетУчетаРасчетовСКонтрагентомНУ");
		
		УстановитьЗаголовкиИДоступностьСубконто(ЭтаФорма, Объект.СчетУчетаРасчетовСКонтрагентомБУ, , "ПеречислениеНалогов", Объект.СчетУчетаРасчетовСКонтрагентомНУ);
		
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПрочееСписаниеБезналичныхДенежныхСредств Тогда
		
		ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтБУ",, "СчетУчетаРасчетовСКонтрагентомБУ");	
		ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтНУ",, "СчетУчетаРасчетовСКонтрагентомНУ");
				
		УстановитьЗаголовкиИДоступностьСубконто(ЭтаФорма, Объект.СчетУчетаРасчетовСКонтрагентомБУ, , , Объект.СчетУчетаРасчетовСКонтрагентомНУ);
		
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеПрочихВыплат Тогда
		
		ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтБУ", "ПеречислениеПрочихВыплат", "СчетУчетаРасчетовСКонтрагентомБУ");	
		ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтНУ", "ПеречислениеПрочихВыплат", "СчетУчетаРасчетовСКонтрагентомНУ");	
		
		УстановитьЗаголовкиИДоступностьСубконто(ЭтаФорма, Объект.СчетУчетаРасчетовСКонтрагентомБУ, , "ПеречислениеПрочихВыплат", Объект.СчетУчетаРасчетовСКонтрагентомНУ);
		
	КонецЕсли; 
	
	Элементы.БанкПосредникГЦВП.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Контрагенты");
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДекорацияDirectBank16", "Видимость", ПолучитьФункциональнуюОпцию("ИспользоватьОбменСБанками"));
	
	РаботаСДиалогами.УстановитьЗаголовокЭлементуУправленияУчитыватьКПН(Объект.Организация, Элементы.УчитыватьКПН);
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(Объект.ВидОперации), Объект.Ссылка, ЭтаФорма);
	
	УстановитьВидимостьРеквизитовСтруктурногоПодразделения();
	                      
	УстановитьВидимостьСтраницНаСервере();
		
	УстановитьТекстСостоянияЭДНаСервере();
	
	УстановитьКнопкиПодменюЗаполненияНазначенияПлатежа();
	
	// +++ Проверка заполненности реквизитов организации (банковский счет)
	ОсновнойБанковскийСчетОрганизацииЗаполнен = ПроверкаРеквизитовОрганизации.ОсновнойБанковскийСчетОрганизацииЗаполнен(Объект.Организация);
	ПроверкаРеквизитовОрганизации.ОтобразитьПредупреждениеОЗаполненииРеквизитовСчета(ЭтотОбъект);
	// --- Проверка заполненности реквизитов организации (банковский счет)
	
	УправлениеФормой(ЭтаФорма);
		
	ОбщегоНазначенияБК.УстановитьТекстАвтора(НадписьАвтор, Объект.Автор);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблиц()
	
	Если ЕстьРасшифровкаПлатежа Тогда
		
		МассивДоговоров    = Объект.РасшифровкаПлатежа.Выгрузить(, "ДоговорКонтрагента").ВыгрузитьКолонку("ДоговорКонтрагента");
		СвойстваДоговоров  = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
		МассивДоговоров, "ВалютаВзаиморасчетов, ВедениеВзаиморасчетов");
		
		Для Каждого СтрокаПлатеж Из Объект.РасшифровкаПлатежа Цикл
			
			Если ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) Тогда
				СтрокаПлатеж.ДоговорКонтрагентаВалютаВзаиморасчетов  = СвойстваДоговоров[СтрокаПлатеж.ДоговорКонтрагента].ВалютаВзаиморасчетов;
				СтрокаПлатеж.ДоговорКонтрагентаВедениеВзаиморасчетов = СвойстваДоговоров[СтрокаПлатеж.ДоговорКонтрагента].ВедениеВзаиморасчетов;
				
			Иначе
				СтрокаПлатеж.ДоговорКонтрагентаВалютаВзаиморасчетов   = Справочники.Валюты.ПустаяСсылка();
				СтрокаПлатеж.ДоговорКонтрагентаВедениеВзаиморасчетов  = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПустаяСсылка();
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;

	Если Объект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеПенсионныхВзносов Тогда
		                                                                                                                    		
		Для Каждого СтрокаТаблицы Из Объект.ПеречислениеПенсионныхВзносов Цикл
			
			ВидОперацииВедомоти = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТаблицы.Документ, "ВидОперации");
			
			Если ВидОперацииВедомоти = Перечисления.ВидыОперацийОПВПеречислениеВФонды.ПеречислениеОбязательныхПенсионныхВзносов Тогда
				СтрокаТаблицы.ВидВзноса = НСтр("ru = 'ОПВ'");
			ИначеЕсли ВидОперацииВедомоти = Перечисления.ВидыОперацийОПВПеречислениеВФонды.ПеречислениеОбязательныхПенсионныхВзносовРаботодателя Тогда
				СтрокаТаблицы.ВидВзноса = НСтр("ru = 'ОПВР'");
			Иначе
				СтрокаТаблицы.ВидВзноса = НСтр("ru = 'ОППВ'");
			КонецЕсли;
			
		КонецЦикла;

	КонецЕсли;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеСоциальныхОтчислений Тогда
		                                                                                                                    		
		Для Каждого СтрокаТаблицы Из Объект.ПеречислениеСоциальныхОтчислений Цикл
			ВидОперацииВедомости = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТаблицы.Документ, "ВидОперации");
			Если ВидОперацииВедомости = Перечисления.ВидыОперацийСОПеречислениеВФонды.ПеречислениеОбязательныхСоциальныхОтчислений Тогда
				СтрокаТаблицы.ВидВзноса = НСтр("ru='СО'");
			ИначеЕсли ВидОперацииВедомости = Перечисления.ВидыОперацийСОПеречислениеВФонды.ПеречислениеВзносовОСМС Тогда
				СтрокаТаблицы.ВидВзноса = НСтр("ru='ВОСМС'");
			ИначеЕсли ВидОперацииВедомости = Перечисления.ВидыОперацийСОПеречислениеВФонды.ПеречислениеОтчисленийОСМС Тогда
				СтрокаТаблицы.ВидВзноса = НСтр("ru='ООСМС'");
			КонецЕсли;
		КонецЦикла;

	КонецЕсли;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеПрочихВыплат Тогда
		                                                                                                                    		
		Для Каждого СтрокаТаблицы Из Объект.ПеречислениеПрочихВыплат Цикл
			
			ВидПрочихВыплатВедомости = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТаблицы.Документ, "ВидПрочихВыплат");
			
			СтрокаТаблицы.ВидПрочихВыплат = ВидПрочихВыплатВедомости;
			
		КонецЦикла;

	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовкиИДоступностьСубконто(Форма, СчетУчета, Префикс = "", Постфикс = "", СчетУчетаНУ = Неопределено, ЭтоТаблица = Ложь)

	ПоляФормы = Новый Структура("Субконто1, Субконто2, Субконто3",
		Префикс + "СубконтоДтБУ1" + Постфикс,
		Префикс + "СубконтоДтБУ2" + Постфикс,
		Префикс + "СубконтоДтБУ3" + Постфикс);
	
	ЗаголовкиПолей = Новый Структура("Субконто1, Субконто2, Субконто3",
		"ЗаголовокСубконтоДтБУ1", "ЗаголовокСубконтоДтБУ2", "ЗаголовокСубконтоДтБУ3");
	
	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриВыбореСчета(СчетУчета, Форма, ПоляФормы, ЗаголовкиПолей);
	
	Если НЕ СчетУчетаНУ = Неопределено Тогда
		
		Для Каждого ПолеФормы Из ПоляФормы Цикл
			
			ПоляФормы.Вставить(ПолеФормы.Ключ, СтрЗаменить(ПолеФормы.Значение, "БУ", "НУ"));
			
		КонецЦикла;
		
		Для Каждого ЗаголовоеПоля Из ЗаголовкиПолей Цикл
			
			ЗаголовкиПолей.Вставить(ЗаголовоеПоля.Ключ, СтрЗаменить(ЗаголовоеПоля.Значение, "БУ", "НУ"));
			
		КонецЦикла;
		
		ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриВыбореСчета(СчетУчетаНУ, Форма, ПоляФормы, ЗаголовкиПолей);
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьСтраницНаСервере()
	
	МассивСтраниц = Новый Массив;
	МассивСтраниц.Добавить(Элементы.ГруппаРасшифровкаПлатежа);
	МассивСтраниц.Добавить(Элементы.ГруппаПрочее);
	МассивСтраниц.Добавить(Элементы.ГруппаПереводНаДругойСчет);
	МассивСтраниц.Добавить(Элементы.ГруппаПеречислениеЗаработнойПлаты);
	МассивСтраниц.Добавить(Элементы.ГруппаПеречислениеНалогов);
	МассивСтраниц.Добавить(Элементы.ГруппаПеречислениеПенсионныхВзносов);
	МассивСтраниц.Добавить(Элементы.ГруппаПеречислениеСоциальныхОтчислений);
	МассивСтраниц.Добавить(Элементы.ГруппаПеречислениеПоИсполнительнымЛистам);
	МассивСтраниц.Добавить(Элементы.ГруппаПеречислениеВПодотчет);
	МассивСтраниц.Добавить(Элементы.ГруппаПеречислениеНДССИзмененнымСрокомУплаты);
	МассивСтраниц.Добавить(Элементы.ГруппаПеречислениеЕдиногоПлатежа);
	МассивСтраниц.Добавить(Элементы.ГруппаПеречислениеПрочихВыплат);
	МассивСтраниц.Добавить(Элементы.ГруппаПеречислениеПрочихДоходов);

	
	ДополнительнаяСтраница = Неопределено;
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ВидНалога", "Видимость", Ложь);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "БанкПосредникГЦВП", "Видимость", Ложь);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СчетБанкаПосредникаГЦВП", "Видимость", Ложь);
	
	Если ЕстьРасшифровкаПлатежа Тогда
		Элементы.ГруппаСтраницыПоОперациям.ТекущаяСтраница = Элементы.ГруппаРасшифровкаПлатежа
		
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПрочееСписаниеБезналичныхДенежныхСредств Тогда
		Элементы.ГруппаСтраницыПоОперациям.ТекущаяСтраница = Элементы.ГруппаПрочее;
		
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеНалога Тогда
		Элементы.ГруппаСтраницыПоОперациям.ТекущаяСтраница = Элементы.ГруппаПеречислениеНалогов;
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ВидНалога", "Видимость", Истина);
		
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеЗаработнойПлаты Тогда
		Элементы.ГруппаСтраницыПоОперациям.ТекущаяСтраница = Элементы.ГруппаПеречислениеЗаработнойПлаты;        
		
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеПенсионныхВзносов Тогда
		Элементы.ГруппаСтраницыПоОперациям.ТекущаяСтраница = Элементы.ГруппаПеречислениеПенсионныхВзносов;
		
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеЕдиногоПлатежа Тогда
		Элементы.ГруппаСтраницыПоОперациям.ТекущаяСтраница = Элементы.ГруппаПеречислениеЕдиногоПлатежа;
		
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеПрочихВыплат Тогда
		Элементы.ГруппаСтраницыПоОперациям.ТекущаяСтраница = Элементы.ГруппаПеречислениеПрочихВыплат;
		
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеСоциальныхОтчислений Тогда
		Элементы.ГруппаСтраницыПоОперациям.ТекущаяСтраница = Элементы.ГруппаПеречислениеСоциальныхОтчислений;
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "БанкПосредникГЦВП", "Видимость", ЗначениеЗаполнено(Объект.БанкПосредник));
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СчетБанкаПосредникаГЦВП", "Видимость", ЗначениеЗаполнено(Объект.БанкПосредник));
		
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеПоИсполнительнымЛистам Тогда
		Элементы.ГруппаСтраницыПоОперациям.ТекущаяСтраница = Элементы.ГруппаПеречислениеПоИсполнительнымЛистам;
		
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеДенежныхСредствПодотчетнику Тогда
		Элементы.ГруппаСтраницыПоОперациям.ТекущаяСтраница = Элементы.ГруппаПеречислениеВПодотчет;
		
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеНДССИзмененнымСрокомУплаты Тогда
		Элементы.ГруппаСтраницыПоОперациям.ТекущаяСтраница = Элементы.ГруппаПеречислениеНДССИзмененнымСрокомУплаты;
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ВидНалога", "Видимость", Истина);
		ДополнительнаяСтраница = Элементы.ГруппаПеречислениеНалогов;
		
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет Тогда
		Элементы.ГруппаСтраницыПоОперациям.ТекущаяСтраница = Элементы.ГруппаПереводНаДругойСчет;
		
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеПрочихДоходов Тогда
		Элементы.ГруппаСтраницыПоОперациям.ТекущаяСтраница = Элементы.ГруппаПеречислениеПрочихДоходов;
		
	КонецЕсли;
	
	Для Каждого ТекСтраница Из МассивСтраниц Цикл
		Если ТекСтраница <> Элементы.ГруппаСтраницыПоОперациям.ТекущаяСтраница Тогда
			Если ТекСтраница.Видимость Тогда
				ТекСтраница.Видимость = Ложь;
			КонецЕсли;
		Иначе
			Если НЕ ТекСтраница.Видимость Тогда
				ТекСтраница.Видимость = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ДополнительнаяСтраница = Неопределено Тогда
		ДополнительнаяСтраница.Видимость = Истина;
		Элементы.ГруппаСтраницыПоОперациям.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСверху;
	ИначеЕсли Элементы.ГруппаСтраницыПоОперациям.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСверху Тогда
		Элементы.ГруппаСтраницыПоОперациям.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	КонецЕсли;
	
	Элементы.КомиссияБанка.Видимость = (Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийППИсходящее.ПрочееСписаниеБезналичныхДенежныхСредств") 
										И Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийППИсходящее.ПеречислениеНалога") 
										И Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийППИсходящее.ПереводНаДругойСчет")
										И Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийППИсходящее.ПеречислениеНДССИзмененнымСрокомУплаты")
										И Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийППИсходящее.ПеречислениеПрочихДоходов")
										И Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийППИсходящее.ПеречислениеПрочихВыплат"));
										
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()
	
	ОбщегоНазначенияБККлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);
	
	ОрганизацияПлательщикНалогаНаПрибыль = ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Объект.Организация, Объект.Дата);
	
	ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль 	= ОрганизацияПлательщикНалогаНаПрибыль И ПроцедурыНалоговогоУчета.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль(Объект.Организация, Объект.Дата);
	
	// +++ Проверка заполненности реквизитов организации (банковский счет)
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ИспользоватьНесколькоБанковскихСчетовОрганизации = Справочники.БанковскиеСчета.ИспользуетсяНесколькоБанковскихСчетовОрганизации(Объект.Организация);
	Иначе
		ИспользоватьНесколькоБанковскихСчетовОрганизации = Истина;
	КонецЕсли;
	// --- Проверка заполненности реквизитов организации (банковский счет)
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьРеквизитовСтруктурногоПодразделения()
	
	РаботаСДиалогамиКлиентСервер.УстановитьВидимостьСтруктурногоПодразделения(Объект.Организация, Объект.СтруктурноеПодразделениеПолучатель, СтруктурноеПодразделениеОрганизация);
	РаботаСДиалогамиКлиентСервер.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделениеОрганизация, Объект.СтруктурноеПодразделениеПолучатель, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
		
	РаботаСДиалогамиКлиентСервер.УстановитьВидимостьСтруктурногоПодразделения(Объект.Организация, Объект.СтруктурноеПодразделениеОтправитель, СтруктурноеПодразделениеОрганизацияОтправитель);
	РаботаСДиалогамиКлиентСервер.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделениеОрганизацияОтправитель, Объект.СтруктурноеПодразделениеОтправитель, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	
	РаботаСДиалогамиКлиентСервер.УстановитьВидимостьСтруктурногоПодразделения(Объект.Организация, Объект.СтруктурноеПодразделениеПолучатель, СтруктурноеПодразделениеОрганизацияПолучатель);
	РаботаСДиалогамиКлиентСервер.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделениеОрганизацияПолучатель, Объект.СтруктурноеПодразделениеПолучатель, ПоддержкаРаботыСоСтруктурнымиПодразделениями);

	Если Объект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет ИЛИ
		Объект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПрочееСписаниеБезналичныхДенежныхСредств Тогда

		СтруктурноеПодразделениеОрганизация = Объект.Организация;
		
		РаботаСДиалогамиКлиентСервер.УстановитьВидимостьСтруктурногоПодразделения(Объект.Организация, Справочники.ПодразделенияОрганизаций.ПустаяСсылка(), СтруктурноеПодразделениеОрганизация, Ложь);
		РаботаСДиалогамиКлиентСервер.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделениеОрганизация, Справочники.ПодразделенияОрганизаций.ПустаяСсылка(), Ложь);
		
		// Заполнение реквизитов формы "СтруктурноеПодразделение"
		Если ПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
			Если Объект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет Тогда			

				Элементы.СтруктурноеПодразделениеОрганизацияОтправитель.Видимость = Истина;
				Элементы.СтруктурноеПодразделениеОрганизацияПолучатель.Видимость  = Истина;
				
			Иначе
				
				Элементы.СтруктурноеПодразделениеОрганизацияОтправительПрочее.Видимость = Истина;
				Элементы.СтруктурноеПодразделениеОрганизацияПолучательПрочее.Видимость  = Истина;
				
			КонецЕсли;
						
			Если Параметры.Ключ.Пустая() И НЕ ЗначениеЗаполнено(Объект.СтруктурноеПодразделениеОтправитель) Тогда
				СтруктурноеПодразделениеОрганизацияОтправитель = Объект.Организация;
			Иначе
				СтруктурноеПодразделениеОрганизацияОтправитель = ?(ЗначениеЗаполнено(Объект.СтруктурноеПодразделениеОтправитель), Объект.СтруктурноеПодразделениеОтправитель, Объект.Организация);
			КонецЕсли;	
			
			Если Параметры.Ключ.Пустая() И НЕ ЗначениеЗаполнено(Объект.СтруктурноеПодразделениеПолучатель) Тогда
				СтруктурноеПодразделениеОрганизацияПолучатель = Объект.Организация;
			Иначе
				СтруктурноеПодразделениеОрганизацияПолучатель = ?(ЗначениеЗаполнено(Объект.СтруктурноеПодразделениеПолучатель), Объект.СтруктурноеПодразделениеПолучатель, Объект.Организация);
			КонецЕсли;	
			
		Иначе 
			Если НЕ Параметры.Ключ.Пустая() И ЗначениеЗаполнено(Объект.СтруктурноеПодразделениеОтправитель) ИЛИ ЗначениеЗаполнено(Объект.СтруктурноеПодразделениеПолучатель) Тогда
				
				Если Объект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет Тогда			

					Элементы.СтруктурноеПодразделениеОрганизацияОтправитель.Видимость = Истина;
					Элементы.СтруктурноеПодразделениеОрганизацияПолучатель.Видимость  = Истина;
					
				Иначе
					
					Элементы.СтруктурноеПодразделениеОрганизацияОтправительПрочее.Видимость = Истина;
					Элементы.СтруктурноеПодразделениеОрганизацияПолучательПрочее.Видимость  = Истина;
					
				КонецЕсли;
								
				СтруктурноеПодразделениеОрганизацияОтправитель = ?(ЗначениеЗаполнено(Объект.СтруктурноеПодразделениеОтправитель), Объект.СтруктурноеПодразделениеОтправитель, Объект.Организация);
				СтруктурноеПодразделениеОрганизацияПолучатель  = ?(ЗначениеЗаполнено(Объект.СтруктурноеПодразделениеПолучатель), Объект.СтруктурноеПодразделениеПолучатель, Объект.Организация);
			Иначе
				Если Объект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет Тогда			

					Элементы.СтруктурноеПодразделениеОрганизацияОтправитель.Видимость = Ложь;
					Элементы.СтруктурноеПодразделениеОрганизацияПолучатель.Видимость  = Ложь;
					
				Иначе
					
					Элементы.СтруктурноеПодразделениеОрганизацияОтправительПрочее.Видимость = Ложь;
					Элементы.СтруктурноеПодразделениеОрганизацияПолучательПрочее.Видимость  = Ложь;
					
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
						
	Иначе
	
		Если ПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
			Если Параметры.Ключ.Пустая() И НЕ ЗначениеЗаполнено(Объект.СтруктурноеПодразделениеПолучатель) Тогда
				СтруктурноеПодразделениеОрганизация = Объект.Организация;
			Иначе
				СтруктурноеПодразделениеОрганизация = ?(ЗначениеЗаполнено(Объект.СтруктурноеПодразделениеПолучатель), Объект.СтруктурноеПодразделениеПолучатель, Объект.Организация);
			КонецЕсли;	
			РаботаСДиалогамиКлиентСервер.УстановитьВидимостьСтруктурногоПодразделения(Объект.Организация, Объект.СтруктурноеПодразделениеОтправитель, СтруктурноеПодразделениеОрганизация, Истина);
			РаботаСДиалогамиКлиентСервер.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделениеОрганизация, Объект.СтруктурноеПодразделениеОтправитель, Истина);
		Иначе 
			Если НЕ Параметры.Ключ.Пустая() И ЗначениеЗаполнено(Объект.СтруктурноеПодразделениеПолучатель) Тогда
				СтруктурноеПодразделениеОрганизация = ?(ЗначениеЗаполнено(Объект.СтруктурноеПодразделениеПолучатель), Объект.СтруктурноеПодразделениеПолучатель, Объект.Организация);
				РаботаСДиалогамиКлиентСервер.УстановитьВидимостьСтруктурногоПодразделения(Объект.Организация, Объект.СтруктурноеПодразделениеОтправитель, СтруктурноеПодразделениеОрганизация, Истина);
				РаботаСДиалогамиКлиентСервер.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделениеОрганизация, Объект.СтруктурноеПодразделениеОтправитель, Истина);
			Иначе
				РаботаСДиалогамиКлиентСервер.УстановитьВидимостьСтруктурногоПодразделения(Объект.Организация, Объект.СтруктурноеПодразделениеОтправитель, СтруктурноеПодразделениеОрганизация, Ложь);
				РаботаСДиалогамиКлиентСервер.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделениеОрганизация, Объект.СтруктурноеПодразделениеОтправитель, Ложь);
			КонецЕсли;
			РаботаСДиалогамиКлиентСервер.УстановитьВидимостьСтруктурногоПодразделения(Объект.Организация, Объект.СтруктурноеПодразделениеОтправитель, СтруктурноеПодразделениеОрганизация, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
			РаботаСДиалогамиКлиентСервер.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделениеОрганизация, Объект.СтруктурноеПодразделениеОтправитель, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура УстановитьКнопкиПодменюЗаполненияНазначенияПлатежа()	
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеПенсионныхВзносов ИЛИ
		Объект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеСоциальныхОтчислений ИЛИ
		Объект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеЗаработнойПлаты ИЛИ 
		Объект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеДенежныхСредствПодотчетнику ИЛИ
		Объект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеПрочихВыплат Тогда
		Элементы.НазначениеПлатежаПодменюЗаполнить.Видимость = Ложь;
		Элементы.ЗаполнитьТекст.Видимость   = Истина;
	Иначе
		Элементы.НазначениеПлатежаПодменюЗаполнить.Видимость = Истина;
		Элементы.ЗаполнитьТекст.Видимость   = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СписокПараметровВыбораСубконто(ДанныеОбъекта, ПараметрыОбъекта, ШаблонИмяПоляОбъекта, ИмяСчета)
	
	СписокПараметров = Новый Структура;
	Для Индекс = 1 По 3 Цикл
		ИмяПоля = СтрЗаменить(ШаблонИмяПоляОбъекта, "%Индекс%", Индекс);
		Если ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Контрагенты") Тогда
			СписокПараметров.Вставить("Контрагент", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			СписокПараметров.Вставить("ДоговорКонтрагента", ПараметрыОбъекта[ИмяПоля]);
		КонецЕсли;
	КонецЦикла;
	СписокПараметров.Вставить("СчетУчета", 				  ПараметрыОбъекта[ИмяСчета]);	
	СписокПараметров.Вставить("Организация", 			  ДанныеОбъекта.Организация);
	СписокПараметров.Вставить("СтруктурноеПодразделение", ДанныеОбъекта.СтруктурноеПодразделениеОтправитель);
	СписокПараметров.Вставить("ВыбиратьПодразделенияОрганизации", Истина);

	Возврат СписокПараметров; 

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьПараметрыВыбораПолейСубконто(Форма, Суффикс, Постфикс = "", ИмяСчета, ЗаменаСубконтоНУ = Ложь)

	ПараметрыДокумента = СписокПараметровВыбораСубконто(Форма.Объект, Форма.Объект, "Субконто" + Суффикс + "%Индекс%", ИмяСчета);
	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(Форма, Форма.Объект, "Субконто" + Суффикс + "%Индекс%", "Субконто" + Суффикс + "%Индекс%" + Постфикс, ПараметрыДокумента, ЗаменаСубконтоНУ);	
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыВыбораСчетовУчетаДенежныхСредств()
	
	Если Не СчетаУчетаВДокументахВызовСервераПовтИсп.ПользовательУправляетСчетамиУчета() Тогда
		Возврат;
	КонецЕсли;
	
	МассивОтбора = Новый Массив;
	МассивОтбора.Добавить(ПланыСчетов.Типовой.ДенежныеСредстваНаТекущихБанковскихСчетах);
	МассивОтбора.Добавить(ПланыСчетов.Типовой.ДенежныеСредстваНаКорреспондентскихСчетах);
	МассивОтбора.Добавить(ПланыСчетов.Типовой.ДенежныеСредстваНаСберегательныхСчетах);
	МассивОтбора.Добавить(ПланыСчетов.Типовой.ДенежныеСредстваОграниченныеВИспользовании);
	МассивОтбора.Добавить(ПланыСчетов.Типовой.ПрочиеДенежныеСредства);
	
	СчетаБанка = ПроцедурыБухгалтерскогоУчета.ЗаполнитьСписокВыбораСчетов(МассивОтбора);
	
	НовыйМассивПараметров = Новый Массив;
	НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", Новый ФиксированныйМассив(СчетаБанка.ВыгрузитьЗначения())));
	НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ЗапретитьИспользоватьВПроводках", Ложь));
	НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Забалансовый", Ложь));
	
	Элементы.СчетБанк.ПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассивПараметров);
	Элементы.СчетБанкОрганизации.ПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассивПараметров);
	Элементы.СчетПеревод.ПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассивПараметров);
	   	
	МассивОтбора = Новый Массив;
	МассивОтбора.Добавить(ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПодотчетныхЛиц);
	МассивОтбора.Добавить(ПланыСчетов.Типовой.ДолгосрочнаяЗадолженностьПодотчетныхЛиц);	
	МассивОтбора.Добавить(ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПередПодотчетнымиЛицами);	
	МассивОтбора.Добавить(ПланыСчетов.Типовой.ДолгосрочнаяЗадолженностьПередПодотчетнымиЛицами);
	
	СчетаРасчетов = ПроцедурыБухгалтерскогоУчета.ЗаполнитьСписокВыбораСчетов(МассивОтбора);
	
	НовыйМассивПараметров = Новый Массив();
	НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", Новый ФиксированныйМассив(СчетаРасчетов.ВыгрузитьЗначения())));			
	НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ЗапретитьИспользоватьВПроводках", Ложь));
	                                                	
	Элементы.ПеречислениеВПодотчетСчетУчета.ПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассивПараметров);
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПараметрыВыбораДоговораСКонтрагентом(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	НовыеПараметры = Новый Массив();
	НовыеПараметры.Добавить(Новый ПараметрВыбора("Отбор.ВидДоговора", Новый ФиксированныйМассив(форма.СписокВидовДоговоров.ВыгрузитьЗначения())));
	Если ЗначениеЗаполнено(Объект.ВалютаДокумента) Тогда
		НовыеПараметры.Добавить(Новый ПараметрВыбора("Отбор.ВалютаВзаиморасчетов", Объект.ВалютаДокумента));
	КонецЕсли;
	
	Элементы.РасшифровкаПлатежаДоговорКонтрагента.ПараметрыВыбора = Новый ФиксированныйМассив(НовыеПараметры);

КонецПроцедуры

&НаСервере
Процедура УстановитьСвязиПараметровВыбораСчетКонтрагента()
	
	МассивСвязей = Новый Массив();
	МассивПараметров = Новый Массив;
	
	Если НЕ Объект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет Тогда
		СвязьВладелец  = Новый СвязьПараметраВыбора("Отбор.Владелец", "Объект.Контрагент");
		Если НЕ Объект.СчетОрганизации.Пустая() Тогда
			ПараметрВалюта = Новый ПараметрВыбора("Отбор.ВалютаДенежныхСредств", Объект.СчетОрганизации.ВалютаДенежныхСредств);
		КонецЕсли;
	Иначе
		СвязьВладелец = Новый СвязьПараметраВыбора("Отбор.Владелец", "Объект.Организация");
		Если НЕ Объект.СчетОрганизации.Пустая() Тогда
			ПараметрВалюта = Новый ПараметрВыбора("Отбор.ВалютаДенежныхСредств", Объект.СчетОрганизации.ВалютаДенежныхСредств);
		КонецЕсли;
	КонецЕсли;
	
	МассивСвязей.Добавить(СвязьВладелец);
	
	Элементы.СчетКонтрагента.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивСвязей);
	Элементы.СчетКонтрагентаПолучатель.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивСвязей);
	
	Если НЕ ПараметрВалюта = Неопределено Тогда
		МассивПараметров.Добавить(ПараметрВалюта);
		Элементы.СчетКонтрагента.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
		Элементы.СчетКонтрагентаПолучатель.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьПодвал(Форма)
	
	Объект = Форма.Объект; 
	
	СуммаИтого = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Всего: %1 %2'"),
						?(Объект.ВключатьКомиссиюБанка, Объект.СуммаДокумента + Объект.СуммаКомиссии, Объект.СуммаДокумента),
						Объект.ВалютаДокумента);
	
	Если Объект.ВалютаДокумента <> Форма.ВалютаРегламентированногоУчета
		 //И (НЕ ЭлементыФормы.КурсВзаиморасчетов.Видимость) 
		 Тогда
		СуммаИтого = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1, курс: %2'"), СуммаИтого, Форма.КурсДокумента);
	КонецЕсли;
	
	Форма.ИнформационнаяНадписьИтого = СуммаИтого;
	
	Если Объект.ВключатьКомиссиюБанка И Объект.СуммаКомиссии <> 0 Тогда
		Форма.ИнформационнаяНадписьИтого = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1, в т.ч. комиссия %2 %3'"),
												Форма.ИнформационнаяНадписьИтого,
												Объект.СуммаКомиссии,
												Объект.ВалютаДокумента); 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьДанныеВФорматеМТ102()
	
	ИспользоватьВнешнийФайл = ИспользоватьВнешнююОбработку();
	
	Если НЕ ИспользоватьВнешнийФайл Тогда
		ПараметрыОбработки = Новый Структура("Документ", Объект.Ссылка);
		ОткрытьФорму("Обработка.ВыгрузкаДанныхМТ102.Форма", ПараметрыОбработки, ЭтаФорма, УникальныйИдентификатор,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе
		ИмяОбработки = ДополнительныеОтчетыИОбработкиВызовСервера.ПодключитьВнешнююОбработку(ПредопределенноеЗначение("Справочник.ДополнительныеОтчетыИОбработки.ОбработкаВыгрузкаДанныхМТ102"));
		ПараметрыОбработки = Новый Структура("Документ", Объект.Ссылка);
		ОткрытьФорму("ВнешняяОбработка." + ИмяОбработки + ".Форма", ПараметрыОбработки, ЭтаФорма, УникальныйИдентификатор,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Функция ИспользоватьВнешнююОбработку()
	
	Если Справочники.ДополнительныеОтчетыИОбработки.ОбработкаВыгрузкаДанныхМТ102.ВнешнийОбъектИспользовать = 1 Тогда
		Возврат Истина;	
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ПослеЗакрытияВопросаЗаписатьВФорме(Результат, Параметры) Экспорт 
	
	Отказ = Истина;
	Если Результат = КодВозвратаДиалога.ОК Тогда
		Попытка
			Если Записать() Тогда
				Отказ = Ложь;
			КонецЕсли;
		Исключение
			ПоказатьПредупреждение(,ОписаниеОшибки());			
		КонецПопытки;			
		
		Если НЕ Отказ Тогда
			ВыгрузитьДанныеВФорматеМТ102();
		КонецЕсли;        		
	КонецЕсли;	
	
КонецПроцедуры	

&НаСервере
Процедура ПеречислениеНДССИзмененнымСрокомУплатыЗаполнитьНаСервере()
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	НДССИзмененнымСрокомУплатыОстатки.ВидОперацииПоступления КАК НДСВидПоступления,
	                      |	НДССИзмененнымСрокомУплатыОстатки.ГТД,
	                      |	НДССИзмененнымСрокомУплатыОстатки.СрокПлатежа,
	                      |	НДССИзмененнымСрокомУплатыОстатки.СуммаНДСОстаток КАК СуммаПлатежа,
	                      |	НДССИзмененнымСрокомУплатыОстатки.Контрагент,
	                      |	НДССИзмененнымСрокомУплатыОстатки.Договор,
	                      |	НДССИзмененнымСрокомУплатыОстатки.СчетУчетаРасчетовСКонтрагентом,
	                      |	НДССИзмененнымСрокомУплатыОстатки.СчетУчетаНДС
	                      |ИЗ
	                      |	РегистрНакопления.НДССИзмененнымСрокомУплаты.Остатки(&Период, Налогоплательщик = &Организация) КАК НДССИзмененнымСрокомУплатыОстатки
	                      |ГДЕ
	                      |	НДССИзмененнымСрокомУплатыОстатки.СуммаНДСОстаток > 0"); 
						  
	Запрос.УстановитьПараметр("Период", Объект.Дата);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Объект.ПеречислениеНДССИзмененнымСрокомУплаты.Загрузить(Запрос.Выполнить().Выгрузить());
	
	ДанныеОбъекта = Новый Структура(
					"Организация, СтруктурноеПодразделение, Дата, Ссылка, ВидУчетаНУ,  
					|УчитыватьКПН, ВалютаДокумента");
		
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
				
	МетаданныеДокумента = Объект.Ссылка.Метаданные();
	ИмяТабличнойЧасти 	= "ПеречислениеНДССИзмененнымСрокомУплаты";
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.ПеречислениеНДССИзмененнымСрокомУплаты Цикл
		ОбработкаТабличныхЧастей.ЗаполнитьНДСВидОборотаТабЧасти(СтрокаТабличнойЧасти, ДанныеОбъекта, ИмяТабличнойЧасти,МетаданныеДокумента);
		СтрокаТабличнойЧасти.СтавкаНДС = ПользователиБКВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию(Пользователи.ТекущийПользователь(), "ОсновнаяСтавкаНДС");
	КонецЦикла;                                                          	
	
	РассчитатьСуммуДокумента(ЭтаФорма);
	РассчитатьСуммуКомиссии(ЭтаФорма);
	
КонецПроцедуры 

&НаСервере
Процедура УстановитьКурсДокумента()
	
	СтруктураКурса = ОбщегоНазначенияБК.ПолучитьКурсВалюты(Объект.ВалютаДокумента, Объект.Дата);
	КурсДокумента      = СтруктураКурса.Курс;
	КратностьДокумента = СтруктураКурса.Кратность;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьНазначениеПлатежа(АвтоподстановкаСуммыНДС = "СуммаИНДС") Экспорт
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеПенсионныхВзносов
	 ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеСоциальныхОтчислений Тогда
	
		СтрокаТекста = "";                                                             
		
		ПериодРегистрацииПеречислений = НачалоМесяца(Объект.Дата);    
					
		СведенияОКонтрагенте = ОбщегоНазначенияБКВызовСервера.СведенияОЮрФизЛице(Объект.Контрагент, Объект.Дата, , Объект.СчетКонтрагента);
		
		Если Объект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеПенсионныхВзносов Тогда
			// Перечисление пенсионных взносов
			Если (Объект.ПеречислениеПенсионныхВзносов.Количество() > 0) Тогда
				ДокументДляПеречисления = Объект.ПеречислениеПенсионныхВзносов[0].Документ;
				ПериодРегистрацииПеречислений = ДокументДляПеречисления.ПериодРегистрации;   
				ТекстПериодыПеречисления = НСтр("ru = 'за период %1 г.'", ОбщегоНазначения.КодОсновногоЯзыка()) ;				
				ТекстПериодыПеречисления = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстПериодыПеречисления, Формат(ПериодРегистрацииПеречислений, "Л=" + ОбщегоНазначения.КодОсновногоЯзыка() + ";ДФ='ММММ гггг'"));
				
				Если ЗначениеЗаполнено(ДокументДляПеречисления) Тогда
					ВидОперацииДокументДляПеречисления = ДокументДляПеречисления.ВидОперации; 
					Если ВидОперацииДокументДляПеречисления = Перечисления.ВидыОперацийОПВПеречислениеВФонды.ПеречислениеОбязательныхПенсионныхВзносов Тогда
						ВидОПВ = НСтр("ru = 'ОПВ'", ОбщегоНазначения.КодОсновногоЯзыка());
					ИначеЕсли ВидОперацииДокументДляПеречисления = Перечисления.ВидыОперацийОПВПеречислениеВФонды.ПеречислениеОбязательныхПенсионныхВзносовРаботодателя Тогда
						ВидОПВ = НСтр("ru = 'ОПВР'", ОбщегоНазначения.КодОсновногоЯзыка());
					Иначе
						ВидОПВ = НСтр("ru = 'ОППВ'", ОбщегоНазначения.КодОсновногоЯзыка());
					КонецЕсли;					
					Если ДокументДляПеречисления.ВидПлатежа = Перечисления.ВидыПлатежейВБюджетИФонды.ПениАкт
					 ИЛИ ДокументДляПеречисления.ВидПлатежа = Перечисления.ВидыПлатежейВБюджетИФонды.ПениСам Тогда
						Если ВидОперацииДокументДляПеречисления = Перечисления.ВидыОперацийОПВПеречислениеВФонды.ПеречислениеОбязательныхПенсионныхВзносов Тогда
							СтрокаТекста = НСтр("ru = 'Пеня за несвоевременное перечисление обязательных пенсионных взносов'", ОбщегоНазначения.КодОсновногоЯзыка());
							Объект.КодНазначенияПлатежа = "019";
						ИначеЕсли ВидОперацииДокументДляПеречисления = Перечисления.ВидыОперацийОПВПеречислениеВФонды.ПеречислениеОбязательныхПенсионныхВзносовРаботодателя Тогда
							СтрокаТекста = НСтр("ru = 'Пеня за несвоевременное перечисление обязательных пенсионных взносов работодателя'", ОбщегоНазначения.КодОсновногоЯзыка()); 
							Объект.КодНазначенияПлатежа = "098";
						Иначе
							СтрокаТекста = НСтр("ru = 'Пеня за несвоевременное перечисление обязательных профессиональных пенсионных взносов'", ОбщегоНазначения.КодОсновногоЯзыка()); 
							Объект.КодНазначенияПлатежа = "009";
						КонецЕсли
					ИначеЕсли ВидОперацииДокументДляПеречисления = Перечисления.ВидыОперацийОПВПеречислениеВФонды.ПеречислениеОбязательныхПенсионныхВзносов Тогда
						Объект.КодНазначенияПлатежа = Справочники.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносы.КодНазначенияПлатежа;
					ИначеЕсли ВидОперацииДокументДляПеречисления = Перечисления.ВидыОперацийОПВПеречислениеВФонды.ПеречислениеОбязательныхПенсионныхВзносовРаботодателя Тогда
						Объект.КодНазначенияПлатежа = Справочники.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносыРаботодателя.КодНазначенияПлатежа;					
					Иначе
						Объект.КодНазначенияПлатежа = Справочники.НалогиСборыОтчисления.ОбязательныеПрофессиональныеПенсионныеВзносы.КодНазначенияПлатежа;					
					КонецЕсли;
					
					Если СтрокаТекста = "" Тогда
						
						Если ПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
							Налогоплательщик = ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(Объект.Организация,
																							Объект.Организация,
																							Перечисления.РазделыНалоговогоУчета.НалогиСЗаработнойПлаты);
						Иначе
							Налогоплательщик = Объект.Организация;
						КонецЕсли;
						
						Если ВидОперацииДокументДляПеречисления = Перечисления.ВидыОперацийОПВПеречислениеВФонды.ПеречислениеОбязательныхПенсионныхВзносов Тогда
							СтавкаОПВ = ПроцедурыНалоговогоУчета.ПолучитьСтавкуНалога(Налогоплательщик, Справочники.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносы, ПериодРегистрацииПеречислений);
							СтрокаТекста = НСтр("ru = '%1% обязательные пенсионные взносы'", ОбщегоНазначения.КодОсновногоЯзыка()); 
							СтрокаТекста = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаТекста, Строка(СтавкаОПВ));
						ИначеЕсли ВидОперацииДокументДляПеречисления = Перечисления.ВидыОперацийОПВПеречислениеВФонды.ПеречислениеОбязательныхПенсионныхВзносовРаботодателя Тогда
							СтавкаОПВР = ПроцедурыНалоговогоУчета.ПолучитьСтавкуНалога(Налогоплательщик, Справочники.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносыРаботодателя, ПериодРегистрацииПеречислений);
							СтрокаТекста = НСтр("ru = '%1% обязательные пенсионные взносы работодателя'", ОбщегоНазначения.КодОсновногоЯзыка()); 
							СтрокаТекста = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаТекста, Строка(СтавкаОПВР));
						Иначе 
							СтавкаОППВ = ПроцедурыНалоговогоУчета.ПолучитьСтавкуНалога(Налогоплательщик, Справочники.НалогиСборыОтчисления.ОбязательныеПрофессиональныеПенсионныеВзносы, ПериодРегистрацииПеречислений);
							СтрокаТекста = НСтр("ru = '%1% обязательные профессиональные пенсионные взносы'", ОбщегоНазначения.КодОсновногоЯзыка()); 
							СтрокаТекста = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаТекста, Строка(СтавкаОППВ));
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			// Перечисление социальных отчислений
			Если (Объект.ПеречислениеСоциальныхОтчислений.Количество() > 0) Тогда
				ДокументДляПеречисления = Объект.ПеречислениеСоциальныхОтчислений[0].Документ;
				//ПериодРегистрацииПеречислений = ДокументДляПеречисления.ПериодРегистрации; 
							
				Запрос = Новый Запрос;
				Запрос.Текст =
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
				|	ВЫБОР
				|		КОГДА СОПеречислениеВФонды.МесяцПериода = ДАТАВРЕМЯ(1, 1, 1)
				|			ТОГДА ВедомостьПеречислениеВФонды.ПериодРегистрации
				|		ИНАЧЕ СОПеречислениеВФонды.МесяцПериода
				|	КОНЕЦ КАК МесяцПериода
				|ИЗ
				|	Документ.СОПеречислениеВФонды.СоциальныеОтчисления КАК СОПеречислениеВФонды
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СОПеречислениеВФонды КАК ВедомостьПеречислениеВФонды
				|		ПО СОПеречислениеВФонды.Ссылка = ВедомостьПеречислениеВФонды.Ссылка
				|ГДЕ
				|	СОПеречислениеВФонды.Ссылка В(&ВедомостиНаПеречисление)
				|
				|СГРУППИРОВАТЬ ПО
				|	ВЫБОР
				|		КОГДА СОПеречислениеВФонды.МесяцПериода = ДАТАВРЕМЯ(1, 1, 1)
				|			ТОГДА ВедомостьПеречислениеВФонды.ПериодРегистрации
				|		ИНАЧЕ СОПеречислениеВФонды.МесяцПериода
				|	КОНЕЦ
				|
				|УПОРЯДОЧИТЬ ПО
				|	МесяцПериода";
				
				ТаблицаОбъекта =  Объект.ПеречислениеСоциальныхОтчислений.Выгрузить();
				Запрос.УстановитьПараметр("ВедомостиНаПеречисление", ТаблицаОбъекта.ВыгрузитьКолонку("Документ"));
				
				ТаблицаДанных = Запрос.Выполнить().Выгрузить();
				
				МассивРазличныхМесяцев = Новый Массив;				
				МассивРазличныхМесяцев = ТаблицаДанных.ВыгрузитьКолонку("МесяцПериода");
				
				СчетчикСтрок = 1; 
				ТекстПериодыПеречисления = "";
				
				Для Каждого ПериодРегистрации Из МассивРазличныхМесяцев Цикл
					
					ТекстПериодыПеречисления = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстПериодыПеречисления + "%1 %2 %3", ?(СчетчикСтрок = 1, НСтр("ru=' за период'", ОбщегоНазначения.КодОсновногоЯзыка()), ","), НРег(Формат(ПериодРегистрации, "Л=" + ОбщегоНазначения.КодОсновногоЯзыка() + ";ДФ='ММММ гггг'")), НСтр("ru = 'г.'", ОбщегоНазначения.КодОсновногоЯзыка()));	
					СчетчикСтрок = СчетчикСтрок + 1;
					
				КонецЦикла;
				
				Если ЗначениеЗаполнено(ДокументДляПеречисления) Тогда
					// СО
					Если ДокументДляПеречисления.ВидОперации = Перечисления.ВидыОперацийСОПеречислениеВФонды.ПеречислениеОбязательныхСоциальныхОтчислений Тогда
						
						Если ДокументДляПеречисления.ВидПлатежа = Перечисления.ВидыПлатежейВБюджетИФонды.ПениАкт
					 		ИЛИ ДокументДляПеречисления.ВидПлатежа = Перечисления.ВидыПлатежейВБюджетИФонды.ПениСам Тогда
							СтрокаТекста = НСтр("ru = 'Пеня за несвоевременное перечисление социальных отчислений'", ОбщегоНазначения.КодОсновногоЯзыка());
							Объект.КодНазначенияПлатежа = "017";
						Иначе
							СтрокаТекста = НСтр("ru = 'Социальные отчисления'", ОбщегоНазначения.КодОсновногоЯзыка());
							Объект.КодНазначенияПлатежа = Справочники.НалогиСборыОтчисления.ОбязательныеСоциальныеОтчисления.КодНазначенияПлатежа;
						КонецЕсли;
						
					// ВОСМС	
					ИначеЕсли ДокументДляПеречисления.ВидОперации = Перечисления.ВидыОперацийСОПеречислениеВФонды.ПеречислениеВзносовОСМС Тогда	
						Если ДокументДляПеречисления.ВидПлатежа = Перечисления.ВидыПлатежейВБюджетИФонды.ПениАкт
					 		ИЛИ ДокументДляПеречисления.ВидПлатежа = Перечисления.ВидыПлатежейВБюджетИФонды.ПениСам Тогда
							СтрокаТекста = НСтр("ru = 'Пеня за несвоевременное перечисление взносов на обязательное социальное медицинское страхование'", ОбщегоНазначения.КодОсновногоЯзыка());
							Объект.КодНазначенияПлатежа = "124";
						Иначе 
							СтрокаТекста = НСтр("ru = 'Взносы ОСМС'", ОбщегоНазначения.КодОсновногоЯзыка());
							Объект.КодНазначенияПлатежа = Справочники.НалогиСборыОтчисления.ВзносыОбязательноеСоциальноеМедицинскоеСтрахование.КодНазначенияПлатежа;					
						КонецЕсли;
						
					// ООСМС	
					ИначеЕсли ДокументДляПеречисления.ВидОперации = Перечисления.ВидыОперацийСОПеречислениеВФонды.ПеречислениеОтчисленийОСМС Тогда	 
						Если ДокументДляПеречисления.ВидПлатежа = Перечисления.ВидыПлатежейВБюджетИФонды.ПениАкт
					 		ИЛИ ДокументДляПеречисления.ВидПлатежа = Перечисления.ВидыПлатежейВБюджетИФонды.ПениСам Тогда
							СтрокаТекста = НСтр("ru = 'Пеня за несвоевременное перечисление отчислений на обязательное социальное медицинское страхование'", ОбщегоНазначения.КодОсновногоЯзыка());
							Объект.КодНазначенияПлатежа = "123";
						Иначе 
							СтрокаТекста = НСтр("ru = 'Отчисления ОСМС'", ОбщегоНазначения.КодОсновногоЯзыка());
							Объект.КодНазначенияПлатежа = Справочники.НалогиСборыОтчисления.ОтчисленияОбязательноеСоциальноеМедицинскоеСтрахование.КодНазначенияПлатежа;					
						КонецЕсли;
						
					КонецЕсли;
						
				КонецЕсли;
				
			КонецЕсли;			 
				
			Если СтрокаТекста = "" Тогда
				СтрокаТекста = НСтр("ru = 'Социальные отчисления'", ОбщегоНазначения.КодОсновногоЯзыка());
			КонецЕсли;
			
			ПодтрокаТекста = НСтр("ru = '%1 в %2'", ОбщегоНазначения.КодОсновногоЯзыка()); 
			СтрокаТекста = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПодтрокаТекста, СтрокаТекста, СокрЛП(СведенияОКонтрагенте.ПолноеНаименование));
			
		КонецЕсли;

		ПодстрокаТекста = НСтр("ru = '%1 %2 cогласно прилагаемого списка.'", ОбщегоНазначения.КодОсновногоЯзыка()); 
		СтрокаТекста = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПодстрокаТекста, СтрокаТекста, ТекстПериодыПеречисления);
			
		Если Объект.ВключатьКомиссиюБанка Тогда

			ПодстрокаТекста = НСтр("ru = '%1 В том числе комиссия банка %2%. Комиссионное вознаграждение банка %3.'", ОбщегоНазначения.КодОсновногоЯзыка());
			СтрокаТекста = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПодстрокаТекста, СтрокаТекста, Объект.ПроцентКомиссии, ОбщегоНазначенияБКВызовСервера.ФорматСумм(Объект.СуммаКомиссии, Объект.ВалютаДокумента, "0-00","", "-", Истина, ОбщегоНазначения.КодОсновногоЯзыка()));
			
		КонецЕсли;
		
		Объект.НазначениеПлатежа = СтрокаТекста;

	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеЕдиногоПлатежа Тогда

		// ЕП
		Если (Объект.ПеречислениеЕдиныхПлатежей.Количество() > 0) Тогда
			ДокументДляПеречисления = Объект.ПеречислениеЕдиныхПлатежей[0].Документ;
			ПериодРегистрацииПеречислений = ДокументДляПеречисления.ПериодРегистрации;
	
			Если ДокументДляПеречисления.ВидПлатежа = Перечисления.ВидыПлатежейВБюджетИФонды.ПениАкт
		 		ИЛИ ДокументДляПеречисления.ВидПлатежа = Перечисления.ВидыПлатежейВБюджетИФонды.ПениСам Тогда
				СтрокаТекста = НСтр("ru = 'Пеня за несвоевременную и (или) неполную уплату единого платежа'", ОбщегоНазначения.КодОсновногоЯзыка());
				Объект.КодНазначенияПлатежа = "187";
			Иначе 
				СтрокаТекста = НСтр("ru = 'Единый платеж'", ОбщегоНазначения.КодОсновногоЯзыка());
				Объект.КодНазначенияПлатежа = Справочники.НалогиСборыОтчисления.ЕдиныйПлатеж.КодНазначенияПлатежа;					
			КонецЕсли;
			
		КонецЕсли;
		
		ПодстрокаТекста = НСтр("ru = '%1 за период %2.'", ОбщегоНазначения.КодОсновногоЯзыка()); 
		СтрокаТекста = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПодстрокаТекста, СтрокаТекста, НРег(Формат(ПериодРегистрацииПеречислений, "Л=" + ОбщегоНазначения.КодОсновногоЯзыка() + ";ДФ='ММММ гггг'")));
			
		Если Объект.ВключатьКомиссиюБанка Тогда

			ПодстрокаТекста = НСтр("ru = '%1 В том числе комиссия банка %2%. Комиссионное вознаграждение банка %3.'", ОбщегоНазначения.КодОсновногоЯзыка());
			СтрокаТекста = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПодстрокаТекста, СтрокаТекста, Объект.ПроцентКомиссии, ОбщегоНазначенияБКВызовСервера.ФорматСумм(Объект.СуммаКомиссии, Объект.ВалютаДокумента, "0-00","", "-", Истина, ОбщегоНазначения.КодОсновногоЯзыка()));
			
		КонецЕсли;
		
		Объект.НазначениеПлатежа = СтрокаТекста;
		
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеЗаработнойПлаты
		  ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеДенежныхСредствПодотчетнику Тогда 
	
		СтрокаТекста = НСтр("ru = 'Для зачисления на картсчета сотрудникам согласно спискам '", ОбщегоНазначения.КодОсновногоЯзыка());
				
		Если Объект.ВключатьКомиссиюБанка Тогда

			Если Объект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеЗаработнойПлаты Тогда
				СуммаПоВедомостям = Объект.ПеречислениеЗаработнойПлаты.Итог("СуммаКВыплате");
			Иначе
				СуммаПоВедомостям = Объект.ПеречислениеВПодотчет.Итог("СуммаПлатежа");
			КонецЕсли;
			
			ПодстрокаТекста = НСтр("ru = '%1 %2. В том числе комиссия банка %3%. Комиссионное вознаграждение банка %4.'", ОбщегоНазначения.КодОсновногоЯзыка());  
			СтрокаТекста = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПодстрокаТекста, СтрокаТекста, ОбщегоНазначенияБКВызовСервера.ФорматСумм(СуммаПоВедомостям + Объект.СуммаКомиссии, Объект.ВалютаДокумента, "0-00","", "-", Истина, ОбщегоНазначения.КодОсновногоЯзыка()), Объект.ПроцентКомиссии, ОбщегоНазначенияБКВызовСервера.ФорматСумм(Объект.СуммаКомиссии, Объект.ВалютаДокумента, "0-00","", "-", Истина, ОбщегоНазначения.КодОсновногоЯзыка()));
		
		Иначе
			ПодстрокаТекста = НСтр("ru = '%1 %2.'", ОбщегоНазначения.КодОсновногоЯзыка());  
			СтрокаТекста = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПодстрокаТекста, СтрокаТекста, ОбщегоНазначенияБКВызовСервера.ФорматСумм(Объект.СуммаДокумента, Объект.ВалютаДокумента, "0-00","", "-", Истина, ОбщегоНазначения.КодОсновногоЯзыка()));
		КонецЕсли;
	   			
		Объект.НазначениеПлатежа = СтрокаТекста;
		
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеПрочихВыплат Тогда
		
		СведенияОКонтрагенте = ОбщегоНазначенияБКВызовСервера.СведенияОЮрФизЛице(Объект.Контрагент, Объект.Дата, , Объект.СчетКонтрагента);
		
		СтрокаТекста = "";
		
		// Прочие выплаты                                              
		Если (Объект.ПеречислениеПрочихВыплат.Количество() > 0) Тогда    
			
			ВидПрочихВыплатНазначениеПлатежа = Объект.ПеречислениеПрочихВыплат[0].ВидПрочихВыплат;   		
			
			ДокументДляПеречисления = Объект.ПеречислениеПрочихВыплат[0].Документ;
			
			Запрос = Новый Запрос;
			Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	ПеречислениеПрочихВыплат.ПериодВзаиморасчетов КАК МесяцПериода
			|ИЗ
			|	Документ.ВедомостьНаПеречислениеПрочихВыплат.ПрочиеВыплаты КАК ПеречислениеПрочихВыплат
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВедомостьНаПеречислениеПрочихВыплат КАК ВедомостьНаПеречислениеПрочихВыплат
			|		ПО ПеречислениеПрочихВыплат.Ссылка = ВедомостьНаПеречислениеПрочихВыплат.Ссылка
			|ГДЕ
			|	ПеречислениеПрочихВыплат.Ссылка В(&ВедомостиНаПеречисление)
			|
			|СГРУППИРОВАТЬ ПО
			|	ПеречислениеПрочихВыплат.ПериодВзаиморасчетов	
			|
			|УПОРЯДОЧИТЬ ПО
			|	МесяцПериода";
			
			ТаблицаОбъекта =  Объект.ПеречислениеПрочихВыплат.Выгрузить();
			Запрос.УстановитьПараметр("ВедомостиНаПеречисление", ТаблицаОбъекта.ВыгрузитьКолонку("Документ"));
			
			ТаблицаДанных = Запрос.Выполнить().Выгрузить();
			
			МассивРазличныхМесяцев = Новый Массив;				
			МассивРазличныхМесяцев = ТаблицаДанных.ВыгрузитьКолонку("МесяцПериода");
			
			СчетчикСтрок = 1; 
			ТекстПериодыПеречисления = "";
			
			Для Каждого ПериодРегистрации Из МассивРазличныхМесяцев Цикл
				
				ТекстПериодыПеречисления = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстПериодыПеречисления + "%1 %2 %3", ?(СчетчикСтрок = 1, НСтр("ru=' за период'", ОбщегоНазначения.КодОсновногоЯзыка()), ","), НРег(Формат(ПериодРегистрации, "Л=" + ОбщегоНазначения.КодОсновногоЯзыка() + ";ДФ='ММММ гггг'")), НСтр("ru = 'г.'", ОбщегоНазначения.КодОсновногоЯзыка()));	
				СчетчикСтрок = СчетчикСтрок + 1;
				
			КонецЦикла;	
			
			ПодстрокаТекста = НСтр("ru = '%1'", ОбщегоНазначения.КодОсновногоЯзыка());	
			СтрокаТекста = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПодстрокаТекста, ?(ЗначениеЗаполнено(ВидПрочихВыплатНазначениеПлатежа.ПолноеНаименование), ВидПрочихВыплатНазначениеПлатежа.ПолноеНаименование, ВидПрочихВыплатНазначениеПлатежа.Наименование));
			Объект.КодНазначенияПлатежа = "119";
											
		КонецЕсли; 
		
		Если СтрокаТекста = "" Тогда
			СтрокаТекста = НСтр("ru = 'Прочие выплаты'", ОбщегоНазначения.КодОсновногоЯзыка());
		КонецЕсли;
				
		ПодстрокаТекста = НСтр("ru = '%1 в %2'", ОбщегоНазначения.КодОсновногоЯзыка()); 
		СтрокаТекста = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПодстрокаТекста, СтрокаТекста, СокрЛП(СведенияОКонтрагенте.ПолноеНаименование));
			
		ПодстрокаТекста = НСтр("ru = '%1 %2 cогласно прилагаемого списка.'", ОбщегоНазначения.КодОсновногоЯзыка()); 
		СтрокаТекста = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПодстрокаТекста, СтрокаТекста, ТекстПериодыПеречисления);
			
		Объект.НазначениеПлатежа = СтрокаТекста;
		
	Иначе
		// Все прочие виды операций по единому образцу
		
		// Удаляем ранее включенные в текст сведения о сумме платежа и НДС
		АдресСуммы = Найти(Объект.НазначениеПлатежа, НСтр("ru = 'Сумма'", ОбщегоНазначения.КодОсновногоЯзыка()));
		
		Если АдресСуммы > 0 Тогда
			СтрокаТекста = НСтр("ru = '%1'", ОбщегоНазначения.КодОсновногоЯзыка());
			СтрокаТекста = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаТекста, Лев(Объект.НазначениеПлатежа, АдресСуммы-1));
		Иначе
			СтрокаТекста = НСтр("ru = '%1'", ОбщегоНазначения.КодОсновногоЯзыка());
			СтрокаТекста = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаТекста, Объект.НазначениеПлатежа);
		КонецЕсли;
		
		АдресНДС = Найти(СтрокаТекста, НСтр("ru = 'в т.ч. НДС'", ОбщегоНазначения.КодОсновногоЯзыка()));
		
		Если АдресНДС > 0 Тогда
			ПодстрокаТекста = НСтр("ru = '%1'", ОбщегоНазначения.КодОсновногоЯзыка());  
			СтрокаТекста = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПодстрокаТекста, Лев(СтрокаТекста, АдресНДС-3));
		КонецЕсли;
		
		АдресКомиссии = Найти(СтрокаТекста, НСтр("ru = 'В том числе комиссия'", ОбщегоНазначения.КодОсновногоЯзыка()));
		
		Если АдресКомиссии > 0 Тогда
			ПодстрокаТекста = НСтр("ru = '%1'", ОбщегоНазначения.КодОсновногоЯзыка());  
			СтрокаТекста = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПодстрокаТекста, Лев(СтрокаТекста, АдресКомиссии-2));
		КонецЕсли; 
		
		АдресБезНДС = Найти(СтрокаТекста, НСтр("ru = 'без НДС'", ОбщегоНазначения.КодОсновногоЯзыка()));
		
		Если АдресБезНДС > 0 Тогда
			ПодстрокаТекста = НСтр("ru = '%1'", ОбщегоНазначения.КодОсновногоЯзыка());  
			СтрокаТекста = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПодстрокаТекста, Лев(СтрокаТекста, АдресБезНДС-3));
		КонецЕсли;  
		
		АдресБезНалога = Найти(СтрокаТекста, НСтр("ru = 'без налога'", ОбщегоНазначения.КодОсновногоЯзыка()));
		
		Если АдресБезНалога > 0 Тогда
			ПодстрокаТекста = НСтр("ru = '%1'", ОбщегоНазначения.КодОсновногоЯзыка());  
			СтрокаТекста = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПодстрокаТекста, Лев(СтрокаТекста, АдресБезНалога-3));
		КонецЕсли;

		// формируем текст назначения по данным счета контрагента, если такая возможность есть
		Если СтрокаТекста = "" И НЕ Объект.СчетКонтрагента.Пустая() Тогда
			СтрокаТекста = Объект.СчетКонтрагента.ТекстНазначения;
			Если СокрЛП(СтрокаТекста) <> "" Тогда
				СтрокаТекста = СтрокаТекста + ".";
			КонецЕсли;
		КонецЕсли;	
		
		// добавляем в текст сведения о сумме платежа, в соответствии с форматом автоподставновки, выбранным пользователем		
		ТекстСумма = " ";
		
		Если Объект.ВключатьКомиссиюБанка Тогда
			СуммаДляПлатежа	= Объект.СуммаДокумента + Объект.СуммаКомиссии;
		Иначе
			СуммаДляПлатежа	= Объект.СуммаДокумента;		
		КонецЕсли;
		           
		Если АвтоподстановкаСуммыНДС = "СуммаИНДС" ИЛИ АвтоподстановкаСуммыНДС = "Сумма" Тогда
			ПодтекстШаблон = НСтр("ru = 'Сумма %1 %2'", ОбщегоНазначения.КодОсновногоЯзыка());  
			ТекстСумма = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПодтекстШаблон, ОбщегоНазначенияБКВызовСервера.ФорматСумм(СуммаДляПлатежа, Объект.ВалютаДокумента, "0-00", "", "-", Истина, ОбщегоНазначения.КодОсновногоЯзыка()));
		КонецЕсли;	
		
		// добавляем в текст сведения о сумме НДС, в соответствии с форматом автоподставновки, выбранным пользователем
		Если АвтоподстановкаСуммыНДС = "СуммаИНДС" ИЛИ АвтоподстановкаСуммыНДС = "НДС" Тогда
			
			ТабНДС = Объект.РасшифровкаПлатежа.Выгрузить();		
			ТабНДС.Свернуть("СтавкаНДС", "СуммаНДС");
			
			Для Каждого СтрокаНДС Из ТабНДС Цикл
				Если Не ЗначениеЗаполнено(СтрокаНДС.СтавкаНДС) Тогда
					ПодтекстШаблон = НСтр("ru = '%1 без налога'", ОбщегоНазначения.КодОсновногоЯзыка());
					ТекстСумма = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПодтекстШаблон, ТекстСумма);
				ИначеЕсли СтрокаНДС.СтавкаНДС.ДляОсвобожденногоОборота ИЛИ СтрокаНДС.СтавкаНДС.МестоРеализацииНеРК	Тогда
					ПодтекстШаблон = НСтр("ru = '%1 без НДС'", ОбщегоНазначения.КодОсновногоЯзыка());
					ТекстСумма = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПодтекстШаблон, ТекстСумма);
				Иначе	
					ПодтекстШаблон = НСтр("ru = '%1 в т.ч. НДС(%2) %3'", ОбщегоНазначения.КодОсновногоЯзыка());
					ТекстСумма = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПодтекстШаблон, ТекстСумма, ?(НЕ ЗначениеЗаполнено(СтрокаНДС.СтавкаНДС), НСтр("ru='без налога'"), СтрокаНДС.СтавкаНДС), ОбщегоНазначенияБКВызовСервера.ФорматСумм(СтрокаНДС.СуммаНДС, Объект.ВалютаДокумента, "0-00","", "-", Истина, ОбщегоНазначения.КодОсновногоЯзыка()));
				КонецЕсли;	
				
			КонецЦикла;
			
		КонецЕсли;
		
		СтрокаТекста = СтрокаТекста + ТекстСумма;

		Если (АвтоподстановкаСуммыНДС = "СуммаИНДС" ИЛИ АвтоподстановкаСуммыНДС = "Сумма") 
			 И Объект.ВключатьКомиссиюБанка И НЕ (Объект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеНалога 
                                       ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеЕдиногоПлатежа
			 						   ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет
									   ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПрочееСписаниеБезналичныхДенежныхСредств
									   ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеНДССИзмененнымСрокомУплаты) Тогда
									   
			ПодстрокаТекста = НСтр("ru = '%1 В том числе комиссия банка %2%. Комиссионное вознаграждение банка %3.'", ОбщегоНазначения.КодОсновногоЯзыка());
			
			СтрокаТекста = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПодстрокаТекста, СтрокаТекста, Объект.ПроцентКомиссии, ОбщегоНазначенияБКВызовСервера.ФорматСумм(Объект.СуммаКомиссии, Объект.ВалютаДокумента, "0-00","", "-", Истина, ОбщегоНазначения.КодОсновногоЯзыка()));
									   
		 КонецЕсли;
		
		 Объект.НазначениеПлатежа = СтрокаТекста;
		 
	 КонецЕсли;
	
КонецПроцедуры                                                                      

&НаСервереБезКонтекста
Функция ПолучитьЗначениеРеквизита(Ссылка, ЗначениеРеквизита)
											
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, ЗначениеРеквизита);										
											
КонецФункции

&НаКлиенте
Процедура УстановитьСтатьюДДСВАналитикеСчета()
	
	// Если ДДС не заполнена устанавливать субконто не нужно
	Если НЕ ЗначениеЗаполнено(Объект.СтатьяДвиженияДенежныхСредств) Тогда
		
		Возврат;
		
	КонецЕсли;	
	
	// статья ДДС определена в аналитике счета расчетов
	СвойстваСчета = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(Объект.СчетУчетаРасчетовСКонтрагентомБУ);
	
	Индекс = 1;
	Пока Индекс < 3  Цикл
	 
		Если СвойстваСчета["ВидСубконто" + Индекс] = ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоТиповые.СтатьиДвиженияДенежныхСредств") Тогда
			Объект["СубконтоДтБУ" + Индекс] = Объект.СтатьяДвиженияДенежныхСредств;
		 	ОбщегоНазначенияБККлиентСервер.ЗаменитьСубконтоНУ(Объект, Объект.СчетУчетаРасчетовСКонтрагентомБУ, Объект.СчетУчетаРасчетовСКонтрагентомНУ, Индекс, Объект["СубконтоДтБУ" + Индекс], "СубконтоДтНУ");
		Прервать;

		КонецЕсли;

		Индекс = Индекс + 1;

	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидНалогаВАналитикеСчета(ВидУчета = "БУ")
	
	// Если ДДС не заполнена устанавливать субконто не нужно
	Если НЕ ЗначениеЗаполнено(Объект.ВидНалога) Тогда
		
		Возврат;
		
	КонецЕсли;	
	
	// статья ДДС определена в аналитике счета расчетов
	СвойстваСчета = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(Объект["СчетУчетаРасчетовСКонтрагентом" + ВидУчета]);
	
	Индекс = 1;
	Пока Индекс < 3 Цикл
			
		Если СвойстваСчета["ВидСубконто" + Индекс] = ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоТиповые.НалогиСборыОтчисления") Тогда
			
			Объект["СубконтоДт" + ВидУчета + Индекс] = Объект.ВидНалога;
			Если ВидУчета = "БУ" Тогда
		 		ОбщегоНазначенияБККлиентСервер.ЗаменитьСубконтоНУ(Объект, Объект.СчетУчетаРасчетовСКонтрагентомБУ, Объект.СчетУчетаРасчетовСКонтрагентомНУ, Индекс, Объект["СубконтоДтБУ" + Индекс], "СубконтоДтНУ");
			КонецЕсли;
				
		КонецЕсли;
			
		Если СвойстваСчета["ВидСубконто" + Индекс] = ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоТиповые.ВидыПлатежейВБюджетИФонды") Тогда
			
			Объект["СубконтоДт" + ВидУчета + Индекс] = ПредопределенноеЗначение("Перечисление.ВидыПлатежейВБюджетИФонды.Налог");
			Если ВидУчета = "БУ" Тогда
		 		ОбщегоНазначенияБККлиентСервер.ЗаменитьСубконтоНУ(Объект, Объект.СчетУчетаРасчетовСКонтрагентомБУ, Объект.СчетУчетаРасчетовСКонтрагентомНУ, Индекс, Объект["СубконтоДтБУ" + Индекс], "СубконтоДтНУ");
			КонецЕсли;
				
		КонецЕсли;
			
		Индекс = Индекс + 1;

	КонецЦикла;
		
КонецПроцедуры

&НаКлиенте
Процедура СубконтоНачалоВыбора(Элемент, ИмяЭлементаСубконто, ИндексСубконто, ИмяЭлементаСчета, СтрокаТаблицы, СтандартнаяОбработка)	
	
	ПараметрыДокумента = СписокПараметровВыбораСубконто(Объект, СтрокаТаблицы, ИмяЭлементаСубконто + "%Индекс%", ИмяЭлементаСчета);
	ПроцедурыБухгалтерскогоУчетаКлиент.НачалоВыбораЗначенияСубконто(ЭтаФорма, Элемент, ИндексСубконто, СтандартнаяОбработка, ПараметрыДокумента);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьСуммуВзаиморасчетов(СтрокаПлатеж, Форма)
	
	Объект = Форма.Объект;
	
	УправлениеДенежнымиСредствамиКлиентСервер.ПроверкаКурсовВалют(СтрокаПлатеж);
	
	СтрокаПлатеж.СуммаВзаиморасчетов = ОбщегоНазначенияБККлиентСервер.ПересчитатьИзВалютыВВалюту(
										СтрокаПлатеж.СуммаПлатежа, Объект.ВалютаДокумента,
										СтрокаПлатеж.ДоговорКонтрагентаВалютаВзаиморасчетов,
										Форма.КурсДокумента, СтрокаПлатеж.КурсВзаиморасчетов,
										Форма.КратностьДокумента, СтрокаПлатеж.КратностьВзаиморасчетов);
										
	УправлениеДенежнымиСредствамиКлиентСервер.ПересчитатьСуммуНДС(СтрокаПлатеж);	
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьСуммуДокумента(Форма)
	
	Объект = Форма.Объект;

	Если Форма.ЕстьРасшифровкаПлатежа Тогда
		
		Объект.СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа");
		
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийППИсходящее.ПеречислениеЗаработнойПлаты") Тогда

		Объект.СуммаДокумента = Объект.ПеречислениеЗаработнойПлаты.Итог("СуммаКВыплате");
						
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийППИсходящее.ПеречислениеДенежныхСредствПодотчетнику") Тогда
	
		Объект.СуммаДокумента = Объект.ПеречислениеВПодотчет.Итог("СуммаПлатежа");		
				
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийППИсходящее.ПеречислениеПенсионныхВзносов") Тогда
	
		Объект.СуммаДокумента = Объект.ПеречислениеПенсионныхВзносов.Итог("СуммаКПеречислению");		
				
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийППИсходящее.ПеречислениеСоциальныхОтчислений") Тогда
	
		Объект.СуммаДокумента = Объект.ПеречислениеСоциальныхОтчислений.Итог("СуммаКПеречислению");		
				
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийППИсходящее.ПеречислениеПоИсполнительнымЛистам") Тогда
	
		Объект.СуммаДокумента = Объект.ПеречислениеПоИсполнительнымЛистам.Итог("СуммаПлатежа");		
				
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийППИсходящее.ПеречислениеНДССИзмененнымСрокомУплаты") Тогда
	
		Объект.СуммаДокумента = Объект.ПеречислениеНДССИзмененнымСрокомУплаты.Итог("СуммаПлатежа");		
		
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийППИсходящее.ПеречислениеЕдиногоПлатежа") Тогда
	
		Объект.СуммаДокумента = Объект.ПеречислениеЕдиныхПлатежей.Итог("СуммаКПеречислению");
		
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийППИсходящее.ПеречислениеПрочихВыплат") Тогда
	
		Объект.СуммаДокумента = Объект.ПеречислениеПрочихВыплат.Итог("СуммаКПеречислению");	
		
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийППИсходящее.ПеречислениеПрочихДоходов") Тогда
	
		Объект.СуммаДокумента = Объект.ПеречислениеПрочихДоходов.Итог("СуммаКПеречислению");
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТекстПолучателя(ЗаполнитьРНН = Истина, ЗаполнитьТекстПолучателя = Истина)
	
	// Определяем контрагента, реквизиты которого нужно заполнить
	Если Объект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет Тогда
		// реквизиты СП или самой организации
		КонтрагентДляПечати = ОбщегоНазначенияБК.ПолучитьСтруктурнуюЕдиницу(Объект.Организация, Объект.СтруктурноеПодразделениеПолучатель);		
	Иначе
		КонтрагентДляПечати = Объект.Контрагент;
	КонецЕсли;
	
	СведенияОКонтрагентДляПечати = ОбщегоНазначенияБКВызовСервера.СведенияОЮрФизЛице(КонтрагентДляПечати, Объект.Дата);
	
	// Заполнение РНН
	Если ЗаполнитьРНН Тогда
		Объект.РННПолучателя = СведенияОКонтрагентДляПечати.БИН_ИИН;
	КонецЕсли;
	
	// Заполнение текста получателя
	Если ЗаполнитьТекстПолучателя Тогда                                           
		
		Если ЗначениеЗаполнено(Объект.СчетКонтрагента.ТекстКорреспондента) Тогда
			Объект.ТекстПолучателя = Объект.СчетКонтрагента.ТекстКорреспондента;
		Иначе
			Объект.ТекстПолучателя = СведенияОКонтрагентДляПечати.ПолноеНаименование;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТекстОтправителя(ЗаполнитьРНН = Истина, ЗаполнитьТекстОтправителя = Истина)
	
	// Определяем  реквизиты СП или самой организации нужно использовать
	ОрганизацияДляПечати = ОбщегоНазначенияБК.ПолучитьСтруктурнуюЕдиницу(Объект.Организация, Объект.СтруктурноеПодразделениеОтправитель);		
	СведенияОбОрганизацииДляПечати = ОбщегоНазначенияБКВызовСервера.СведенияОЮрФизЛице(ОрганизацияДляПечати, Объект.Дата);
	
	Если ИспользоватьПечатныеФормыПП2024 Тогда
		Если ЗначениеЗаполнено(Объект.СтруктурноеПодразделениеОтправитель) Тогда
			Если ОрганизацияДляПечати = Объект.СтруктурноеПодразделениеОтправитель Тогда
				Объект.ФактическийПлательщик = Неопределено;
			Иначе
				Объект.ФактическийПлательщик = Объект.СтруктурноеПодразделениеОтправитель;
			КонецЕсли;
		ИначеЕсли ЗначениеЗаполнено(Объект.Организация) Тогда
			Если ОрганизацияДляПечати = Объект.Организация Тогда
				Объект.ФактическийПлательщик = Неопределено;
			Иначе
				Объект.ФактическийПлательщик = Объект.Организация;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;  
	
	// Заполнение РНН
	Если ЗаполнитьРНН Тогда
		Объект.РННПлательщика = СведенияОбОрганизацииДляПечати.БИН_ИИН;
	КонецЕсли;
	
	// Заполнение текста отправителя
	Если ЗаполнитьТекстОтправителя Тогда
		Если ЗначениеЗаполнено(Объект.СчетОрганизации.ТекстКорреспондента) Тогда
			Объект.ТекстПлательщика = Объект.СчетОрганизации.ТекстКорреспондента;
		Иначе
			Объект.ТекстПлательщика = СведенияОбОрганизацииДляПечати.ПолноеНаименование;		
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыКомиссии()

	Объект.ПроцентКомиссии = Объект.СчетОрганизации.ПроцентКомиссии;
	Объект.СтатьяДвиженияДенежныхСредств     = Объект.СчетОрганизации.СтатьяДвиженияДенежныхСредств;
	
	Объект.СчетУчетаРасчетовСКонтрагентомБУ  = Объект.СчетОрганизации.СчетЗатратБУ;
	Объект.СубконтоДтБУ1					 = Объект.СчетОрганизации.СубконтоЗатратБУ1;
	Объект.СубконтоДтБУ2					 = Объект.СчетОрганизации.СубконтоЗатратБУ2;
	Объект.СубконтоДтБУ3					 = Объект.СчетОрганизации.СубконтоЗатратБУ3;
	
	Объект.СчетУчетаРасчетовСКонтрагентомНУ  = Объект.СчетОрганизации.СчетЗатратНУ;
	Объект.СубконтоДтНУ1					 = Объект.СчетОрганизации.СубконтоЗатратНУ1;
	Объект.СубконтоДтНУ2					 = Объект.СчетОрганизации.СубконтоЗатратНУ2;
	Объект.СубконтоДтНУ3					 = Объект.СчетОрганизации.СубконтоЗатратНУ3;
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтБУ", , "СчетУчетаРасчетовСКонтрагентомБУ");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтНУ", , "СчетУчетаРасчетовСКонтрагентомНУ");

	УстановитьЗаголовкиИДоступностьСубконто(ЭтаФорма, Объект.СчетУчетаРасчетовСКонтрагентомБУ,,, Объект.СчетУчетаРасчетовСКонтрагентомНУ);

КонецПроцедуры

&НаСервере
Процедура НачальноеЗаполнениеПриВыбореОрганизации()

	Если НЕ Объект.Организация.Пустая() Тогда
		
		ЗаполнитьТекстОтправителя();
						
		Если Объект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет Тогда
			ЗаполнитьТекстПолучателя();				
		КонецЕсли;
		
	Иначе
		
		Объект.СчетОрганизации = Неопределено;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВидОперацииПриИзмененииНаСервере()
	
	ПричиныИзмененияСчетовУчета = Новый Массив;
	ПричиныИзмененияСчетовУчета.Добавить("ВидОперации");
	
	ПроверитьСоответствиеСчетаКонтрагентаВидуОперации();
	ПроверитьСоответсвиеКонтрагентаВидуОперации(Объект.ВидОперации, Объект.Контрагент, ПричиныИзмененияСчетовУчета);
	
	Объект.РасшифровкаПлатежа.Очистить();
	Объект.ПеречислениеЗаработнойПлаты.Очистить();
	Объект.ПеречислениеПенсионныхВзносов.Очистить();
	Объект.ПеречислениеСоциальныхОтчислений.Очистить();
	Объект.ПеречислениеПоИсполнительнымЛистам.Очистить();
	Объект.ПеречислениеНДССИзмененнымСрокомУплаты.Очистить();
	Объект.ПеречислениеВПодотчет.Очистить();
	Объект.ПеречислениеЕдиныхПлатежей.Очистить();
	Объект.ПеречислениеПрочихВыплат.Очистить(); 
	
	ОчиститьСчетаУчетаРасчетов();
	
	ЕстьРасшифровкаПлатежа = Документы.ПлатежноеПоручениеИсходящее.ЕстьРасшифровкаПлатежа(Объект.ВидОперации);
	
	Если ЕстьРасшифровкаПлатежа Тогда
		СписокВидовДоговоров = УправлениеВзаиморасчетамиСервер.ОпределитьВидДоговораСКонтрагентом(Объект.ВидОперации);		
		УстановитьПараметрыВыбораДоговораСКонтрагентом(ЭтаФорма); 
		Элементы.РасшифровкаПлатежаСчетНаОплату.Видимость = (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийППИсходящее.ОплатаПоставщику"));	
	КонецЕсли;
	
	СтрокаПлатеж = Объект.РасшифровкаПлатежа.Добавить();
	
	СтрокаПлатеж.СуммаПлатежа = Объект.СуммаДокумента;
	Объект.КодБК = Неопределено;
	Объект.КодНазначенияПлатежа = Неопределено;
	Объект.НазначениеПлатежа = Неопределено;
	СформироватьНазначениеПлатежа();
	
	Объект.ВключатьКомиссиюБанка = Ложь;
	ПричиныИзмененияСчетовУчета.Добавить("ВключатьКомиссиюБанка");
	
	ЗаполнитьСчетаУчета(ПричиныИзмененияСчетовУчета, "ВидОперации");
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет И ПоддержкаРаботыСоСтруктурнымиПодразделениями
		 И НЕ ЗначениеЗаполнено(Объект.СтруктурноеПодразделениеПолучатель) Тогда
		  Объект.СтруктурноеПодразделениеПолучатель = Объект.СтруктурноеПодразделениеОтправитель;
		  СтруктурноеПодразделениеОрганизацияПолучатель = Объект.СтруктурноеПодразделениеОтправитель;
	  Иначе
		  Если ЗначениеЗаполнено(Объект.СтруктурноеПодразделениеПолучатель) Тогда
			  Объект.СтруктурноеПодразделениеПолучатель = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
			  СтруктурноеПодразделениеОрганизацияПолучатель = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();			  
		  КонецЕсли;
	  КонецЕсли;

	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(Объект.ВидОперации), Объект.Ссылка, ЭтаФорма);
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеНалога
        ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеЕдиногоПлатежа
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеНДССИзмененнымСрокомУплаты Тогда
		
		ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтБУ", "ПеречислениеНалогов", "СчетУчетаРасчетовСКонтрагентомБУ");	
		ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтНУ", "ПеречислениеНалогов", "СчетУчетаРасчетовСКонтрагентомНУ");
		
		УстановитьЗаголовкиИДоступностьСубконто(ЭтаФорма,Объект.СчетУчетаРасчетовСКонтрагентомБУ, , "ПеречислениеНалогов", Объект.СчетУчетаРасчетовСКонтрагентомНУ);
		
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПрочееСписаниеБезналичныхДенежныхСредств Тогда
		
		ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтБУ",, "СчетУчетаРасчетовСКонтрагентомБУ");	
		ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтНУ",, "СчетУчетаРасчетовСКонтрагентомНУ");
				
		УстановитьЗаголовкиИДоступностьСубконто(ЭтаФорма,Объект.СчетУчетаРасчетовСКонтрагентомБУ, , , Объект.СчетУчетаРасчетовСКонтрагентомНУ);
				
	ИначеЕсли ЕстьРасшифровкаПлатежа
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеЗаработнойПлаты
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеПенсионныхВзносов 
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеПоИсполнительнымЛистам
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеСоциальныхОтчислений
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеДенежныхСредствПодотчетнику Тогда
		
		ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтБУ", , "СчетУчетаРасчетовСКонтрагентомБУ");	
		ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтНУ", , "СчетУчетаРасчетовСКонтрагентомНУ");
		
		УстановитьЗаголовкиИДоступностьСубконто(ЭтаФорма,Объект.СчетУчетаРасчетовСКонтрагентомБУ, , , Объект.СчетУчетаРасчетовСКонтрагентомНУ);
				
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеПрочихВыплат Тогда
		
		ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтБУ", "ПеречислениеПрочихВыплат", "СчетУчетаРасчетовСКонтрагентомБУ");	
		ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтНУ", "ПеречислениеПрочихВыплат", "СчетУчетаРасчетовСКонтрагентомНУ");
		
		УстановитьЗаголовкиИДоступностьСубконто(ЭтаФорма,Объект.СчетУчетаРасчетовСКонтрагентомБУ, , "ПеречислениеПрочихВыплат", Объект.СчетУчетаРасчетовСКонтрагентомНУ);
		
	КонецЕсли; 
	
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеНалога ИЛИ
        Объект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеЕдиногоПлатежа ИЛИ
		Объект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПрочееСписаниеБезналичныхДенежныхСредств ИЛИ
		Объект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет ИЛИ
		Объект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеНДССИзмененнымСрокомУплаты ИЛИ
		Объект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеПрочихДоходов ИЛИ
		Объект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеПрочихВыплат Тогда
		
		Объект.СуммаКомиссии = 0;
		Объект.ПроцентКомиссии = 0;
		Объект.ВключатьКомиссиюБанка = Ложь;
		
	КонецЕсли;


	УстановитьСвязиПараметровВыбораСчетКонтрагента();
	УстановитьВидимостьРеквизитовСтруктурногоПодразделения();
	УстановитьВидимостьСтраницНаСервере();
	УстановитьКнопкиПодменюЗаполненияНазначенияПлатежа();
	УправлениеФормой(ЭтотОбъект);
	УстановитьВидимостьСчетовУчета();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПроверитьВладельцаСубконтоПодразделениеБУНУ(ДанныеОбъекта)
	
	ПроцедурыБухгалтерскогоУчета.ПроверитьВладельцаСубконтоПодразделение(ДанныеОбъекта, 
	                                        ДанныеОбъекта.Организация, 
	                                        Новый Структура("НазваниеСубконтоБУ1, НазваниеСубконтоБУ2, НазваниеСубконтоБУ3, 
	                                                        |СубконтоБУ1, СубконтоБУ2, СубконтоБУ3",
	                                                        "СубконтоДтБУ1", "СубконтоДтБУ2", "СубконтоДтБУ3", 
	                                                        ДанныеОбъекта.СубконтоДтБУ1, ДанныеОбъекта.СубконтоДтБУ2, ДанныеОбъекта.СубконтоДтБУ3));
															
	ПроцедурыБухгалтерскогоУчета.ПроверитьВладельцаСубконтоПодразделение(ДанныеОбъекта, 
	                                        ДанныеОбъекта.Организация, 
	                                        Новый Структура("НазваниеСубконтоБУ1, НазваниеСубконтоБУ2, НазваниеСубконтоБУ3, 
	                                                        |СубконтоБУ1, СубконтоБУ2, СубконтоБУ3",
	                                                        "СубконтоДтНУ1", "СубконтоДтНУ2", "СубконтоДтНУ3", 
	                                                        ДанныеОбъекта.СубконтоДтНУ1, ДанныеОбъекта.СубконтоДтНУ2, ДанныеОбъекта.СубконтоДтНУ3));
															
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПроверитьСоответсвиеКонтрагентаВидуОперации(ВидОперации, Контрагент, ПричиныИзмененияСчетовУчета = Неопределено)
	
	Если ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийППИсходящее.ОплатаСтруктурномуПодразделению") Тогда

		Если ЗначениеЗаполнено(Контрагент) Тогда
			
			Если НЕ КонтрагентКакОрганизация(Контрагент) Тогда
				
				Контрагент = ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");
							    								
				ТекстСообщения  = НСтр("ru = 'При выбранном виде операции ""Оплата от структурного подразделения"" может быть выбран только контрагент, 
											 |соответствующий какому-либо структурному подразделению.
											 |Контрагент будет очищен.'");
						 
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Объект.Контрагент");
				
				Если ПричиныИзмененияСчетовУчета <> Неопределено Тогда
					ПричиныИзмененияСчетовУчета.Добавить("Контрагент");
				КонецЕсли;
					
			КонецЕсли;
			
		КонецЕсли;
	
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийППИсходящее.ПереводНаДругойСчет") Тогда
				
		Контрагент = ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");
		
		Если ПричиныИзмененияСчетовУчета <> Неопределено Тогда
			ПричиныИзмененияСчетовУчета.Добавить("Контрагент");
		КонецЕсли;
			
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПроверитьСоответствиеСчетаКонтрагентаВидуОперации()
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет Тогда	
		// Должен быть выбран счет организации
		Если ЗначениеЗаполнено(Объект.СчетКонтрагента) И НЕ Объект.СчетКонтрагента.Владелец = Объект.Организация Тогда
			
			ТекстСообщения = НСтр("ru='Указанный банковский счет: %1 не принадлежит организации: %2.
							|Банковский счет был очищен.'");
			ОбщегоНазначения.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Объект.СчетКонтрагента, СокрЛП(Объект.Организация)), , "СчетКонтрагента", "Объект");
			
			Объект.СчетКонтрагента = Неопределено;
		КонецЕсли;		
	Иначе
		// Должен быть выбран счет контрагента
		Если ЗначениеЗаполнено(Объект.СчетКонтрагента) И НЕ Объект.СчетКонтрагента.Владелец = Объект.Контрагент Тогда
			
			ТекстСообщения = НСтр("ru='Указанный банковский счет: %1 не принадлежит контрагенту: %2.
							|Банковский счет был очищен.'");
			ОбщегоНазначения.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Объект.СчетКонтрагента, СокрЛП(Объект.Контрагент)), , "СчетКонтрагента", "Объект");
			
			Объект.СчетКонтрагента = Неопределено;
		КонецЕсли;		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция КонтрагентКакОрганизация(Контрагент)
	
	СобственныйКонтрагент = Ложь;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СобственныеКонтрагенты.Контрагент
	|ИЗ
	|	РегистрСведений.СобственныеКонтрагенты КАК СобственныеКонтрагенты
	|ГДЕ
	|	СобственныеКонтрагенты.Контрагент = &ЭтотКонтрагент");
	Запрос.УстановитьПараметр("ЭтотКонтрагент", Контрагент);
	
	Если Не Запрос.Выполнить().Пустой() Тогда
		СобственныйКонтрагент = Истина;
	КонецЕсли;
	
	Возврат СобственныйКонтрагент;
	
КонецФункции

&НаКлиенте
Процедура ПослеВыбораСтруктурногоПодразделения(Результат, Параметры) Экспорт
	
	РаботаСДиалогамиКлиент.ПослеВыбораСтруктурногоПодразделения(Результат, Объект.Организация, Объект.СтруктурноеПодразделениеОтправитель, СтруктурноеПодразделениеОрганизация);
	Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
		Модифицированность = Истина;
		Результат.Вставить("НеобходимоИзменитьЗначенияРеквизитовОбъекта", Ложь);
		СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораСтруктурногоПодразделенияПолучатель(Результат, Параметры) Экспорт
	
	РаботаСДиалогамиКлиент.ПослеВыбораСтруктурногоПодразделения(Результат, Объект.Организация, Объект.СтруктурноеПодразделениеПолучатель, СтруктурноеПодразделениеОрганизацияПолучатель);
	Если Результат.ИзмененоСтруктурноеПодразделение Тогда
		Модифицированность = Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтруктурноеПодразделениеОрганизация) Тогда
		Объект.Организация					= Результат.Организация;
		СтруктурноеПодразделениеОрганизация = Результат.Организация;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораСтруктурногоПодразделенияОтправитель(Результат, Параметры) Экспорт
	
	РаботаСДиалогамиКлиент.ПослеВыбораСтруктурногоПодразделения(Результат, Объект.Организация, Объект.СтруктурноеПодразделениеОтправитель, СтруктурноеПодразделениеОрганизацияОтправитель);
	Если Результат.ИзмененоСтруктурноеПодразделение Тогда
		Модифицированность = Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтруктурноеПодразделениеОрганизация) Тогда
		Объект.Организация					= Результат.Организация;
		СтруктурноеПодразделениеОрганизация = Результат.Организация;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДатаВыпискиПриИзмененииНаСервере(СтруктураРезультатаВыполненияПриИзмененииДаты)
	
	Объект.Дата = Объект.ДатаВыписки;
	ТекущаяДатаДокумента = Объект.Дата;
	УстановитьФункциональныеОпцииФормы();
	УстановитьКурсДокумента();
	
	Для Каждого СтрокаПлатеж Из Объект.РасшифровкаПлатежа Цикл
		РассчитатьСуммуВзаиморасчетов(СтрокаПлатеж, ЭтаФорма);
	КонецЦикла;
	
	РаботаСДиалогами.ПриИзмененииЗначенияДатыДокумента(Объект, ВалютаРегламентированногоУчета, , Истина, СтруктураРезультатаВыполненияПриИзмененииДаты);
	
	ПроцедурыНалоговогоУчета.ПриИзмененииПризнакаОтраженияВНалоговомУчете(Объект.Организация, Объект.Дата, Объект.УчитыватьКПН, Истина);
	ПроцедурыНалоговогоУчета.ЗаполнитьВидУчетаНУ(Объект.УчитыватьКПН, Объект.ВидУчетаНУ);
	
	УправлениеФормой(ЭтаФорма);
	УстановитьВидимостьСчетовУчета();
	
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииНаСервере(СтруктураРезультатаВыполненияПриИзмененииДаты)
	
	Если НЕ Объект.Оплачено Тогда
		
		Объект.Дата = Объект.ДатаВыписки;
		
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Тогда
		
		Объект.ДатаВалютирования = Объект.ДатаВыписки;
		
	КонецЕсли;
	
	УстановитьФункциональныеОпцииФормы();
	
	РаботаСДиалогами.ПриИзмененииЗначенияДатыДокумента(Объект, ВалютаРегламентированногоУчета, , Истина, СтруктураРезультатаВыполненияПриИзмененииДаты);
	
	ПроцедурыНалоговогоУчета.ПриИзмененииПризнакаОтраженияВНалоговомУчете(Объект.Организация, Объект.Дата, Объект.УчитыватьКПН, Истина);
	ПроцедурыНалоговогоУчета.ЗаполнитьВидУчетаНУ(Объект.УчитыватьКПН, Объект.ВидУчетаНУ);
		
	УстановитьВидимостьСчетовУчета();
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(Параметры)

	СтруктураРезультатаВыполнения = Неопределено;
	СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(Параметры, СтруктураРезультатаВыполнения);

КонецПроцедуры

&НаСервере
Процедура СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(СтруктураПараметров = Неопределено, СтруктураРезультатаВыполнения)
	
	Если СтруктураПараметров = Неопределено	ИЛИ (СтруктураПараметров.Свойство("НеобходимоИзменитьЗначенияРеквизитовОбъекта") 
				И СтруктураПараметров.НеобходимоИзменитьЗначенияРеквизитовОбъекта) Тогда 
		РаботаСДиалогами.СтруктурноеПодразделениеПриИзменении(СтруктурноеПодразделениеОрганизация, Объект.Организация, Объект.СтруктурноеПодразделениеОтправитель, СтруктураПараметров);
	КонецЕсли;
		
	ОрганизацияПриИзмененииНаСервере(СтруктураПараметров, СтруктураРезультатаВыполнения);
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере(СтруктураПараметров, СтруктураРезультатаВыполнения)
	
	Если НЕ СтруктураПараметров.ИзмененаОрганизация И НЕ СтруктураПараметров.ИзмененоСтруктурноеПодразделение Тогда
		Возврат;
	КонецЕсли;
	
	ПричиныИзмененияСчетовУчета = Новый Массив;
	Если СтруктураПараметров.ИзмененаОрганизация Тогда
		ПричиныИзмененияСчетовУчета.Добавить("Организация");
	КонецЕсли;
	
	ПриИзмененииЗначенияСтруктурногоПодразделенияСервер(СтруктураПараметров);

	УстановитьФункциональныеОпцииФормы();
		
	Если ЗначениеЗаполнено(Объект.СтруктурноеПодразделениеОтправитель) Тогда
		Объект.СчетОрганизации = Объект.СтруктурноеПодразделениеОтправитель.ОсновнойБанковскийСчет;
	ИначеЕсли ЗначениеЗаполнено(Объект.Организация) Тогда
		Объект.СчетОрганизации = Объект.Организация.ОсновнойБанковскийСчет;
	Иначе
		Объект.СчетОрганизации = Неопределено;
	КонецЕсли;

	Если Объект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет Тогда
		СчетКонтрагента = Неопределено;
	КонецЕсли;

	СчетОрганизацииПриИзмененииНаСервере(, ПричиныИзмененияСчетовУчета);
	
	Если ПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
		УправлениеДенежнымиСредствамиСервер.СтруктурноеПодразделениеПриИзменении(Объект, СтруктураПараметров);
	КонецЕсли;
	
	Если ЕстьРасшифровкаПлатежа Тогда
		УправлениеДенежнымиСредствамиСервер.ПроверитьСоответствиеОрганизацииДоговора(Объект, СтруктураПараметров);
	КонецЕсли;

	НачальноеЗаполнениеПриВыбореОрганизации();
	
	РаботаСДиалогами.ПриИзмененииЗначенияОрганизации(Объект, , СтруктураРезультатаВыполнения);
	ПроцедурыНалоговогоУчета.ПриИзмененииПризнакаОтраженияВНалоговомУчете(Объект.Организация, Объект.Дата, Объект.УчитыватьКПН, Истина);	
	ПроцедурыНалоговогоУчета.ЗаполнитьВидУчетаНУ(Объект.УчитыватьКПН, Объект.ВидУчетаНУ);
	РаботаСДиалогами.УстановитьЗаголовокЭлементуУправленияУчитыватьКПН(Объект.Организация, Элементы.УчитыватьКПН);
    
	// получаем учетную политику для выбранной организации	
	ОрганизацияПлательщикНалогаНаПрибыль = ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Объект.Организация, Объект.Дата);	

	// +++ Проверка заполненности реквизитов организации (банковский счет)
	ОсновнойБанковскийСчетОрганизацииЗаполнен = ПроверкаРеквизитовОрганизации.ОсновнойБанковскийСчетОрганизацииЗаполнен(Объект.Организация);
	ПроверкаРеквизитовОрганизации.ОтобразитьПредупреждениеОЗаполненииРеквизитовСчета(ЭтотОбъект);
	// --- Проверка заполненности реквизитов организации (банковский счет)
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПрочееСписаниеБезналичныхДенежныхСредств Тогда		
		Если ПоддержкаРаботыСоСтруктурнымиПодразделениями И ЗначениеЗаполнено(СтруктурноеПодразделениеОрганизацияОтправитель) И СтруктурноеПодразделениеОрганизацияОтправитель.Владелец <> Объект.Организация Тогда
			СтруктурноеПодразделениеОрганизацияОтправитель = Объект.Организация;
			Объект.СтруктурноеПодразделениеОтправитель 	   = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
			
			ТекстСообщения  = НСтр("ru = 'Значение в поле ""Структурная единица - отправитель"" не соответствует выбранной организации и было изменено'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			
		КонецЕсли;
		
		Если ПоддержкаРаботыСоСтруктурнымиПодразделениями И ЗначениеЗаполнено(СтруктурноеПодразделениеОрганизацияПолучатель) И СтруктурноеПодразделениеОрганизацияПолучатель.Владелец <> Объект.Организация Тогда
			СтруктурноеПодразделениеОрганизацияПолучатель = Объект.Организация;
			Объект.СтруктурноеПодразделениеПолучатель	  = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
			
			ТекстСообщения  = НСтр("ru = 'Значение в поле ""Структурная единица - получатель"" не соответствует выбранной организации и было изменено'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеНалога
        ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеЕдиногоПлатежа
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеНДССИзмененнымСрокомУплаты Тогда
		
		ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтБУ", "ПеречислениеНалогов", "СчетУчетаРасчетовСКонтрагентомБУ");	
		ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтНУ", "ПеречислениеНалогов", "СчетУчетаРасчетовСКонтрагентомНУ");
		
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПрочееСписаниеБезналичныхДенежныхСредств Тогда
		
		ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтБУ",, "СчетУчетаРасчетовСКонтрагентомБУ");	
		ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтНУ",, "СчетУчетаРасчетовСКонтрагентомНУ");
		
	ИначеЕсли ЕстьРасшифровкаПлатежа 
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеЗаработнойПлаты
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеПенсионныхВзносов 
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеПоИсполнительнымЛистам
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеСоциальныхОтчислений Тогда
		
		ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтБУ", , "СчетУчетаРасчетовСКонтрагентомБУ");	
		ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтНУ", , "СчетУчетаРасчетовСКонтрагентомНУ"); 
		
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеПрочихВыплат Тогда
		
		ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтБУ", "ПеречислениеПрочихВыплат", "СчетУчетаРасчетовСКонтрагентомБУ");	
		ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтНУ", "ПеречислениеПрочихВыплат", "СчетУчетаРасчетовСКонтрагентомНУ");
		
	КонецЕсли; 
	
	УправлениеФормой(ЭтаФорма);
	УстановитьВидимостьСчетовУчета();
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииЗначенияСтруктурногоПодразделенияСервер(СтруктураПараметров)
	
	Если СтруктураПараметров.Свойство("ОчищатьНекорректныеЗначения") И НЕ СтруктураПараметров.ОчищатьНекорректныеЗначения Тогда 
		Возврат;
	КонецЕсли;
	
	// Список структур с реквизитами группы счетов
	СписокАналитикиСчетовШапки = Новый СписокЗначений;
	СписокАналитикиСчетовШапки.Добавить("БУ");// СчетБУ
	СписокАналитикиСчетовШапки.Добавить("НУ");// СчетНУ
	
	СтруктураРеквизитовШапки = Новый Структура("Объект, СписокАналитикиСчетовШапки, СуффиксСчета, СуффиксСубконто", Объект, СписокАналитикиСчетовШапки, "УчетаРасчетовСКонтрагентом", "Дт");

	РаботаСДиалогами.ПроверитьСоответствиеПодразделения(Объект.Организация, Объект.СтруктурноеПодразделениеОтправитель,,, СтруктураРеквизитовШапки);
		
КонецПроцедуры

&НаКлиенте
Процедура СчетОрганизацииПриИзмененииКлиент()

	Если Объект.СчетОрганизации.Пустая() Тогда
		Возврат
	КонецЕсли;
	
	ВалютаДенежныхСредств = ПолучитьЗначениеРеквизита(Объект.СчетОрганизации, "ВалютаДенежныхСредств");
	
	Если ЗначениеЗаполнено(ВалютаДенежныхСредств) И (ВалютаДенежныхСредств <> Объект.ВалютаДокумента)
		И Объект.СуммаДокумента > 0 Тогда
		
		РаботаСДиалогамиКлиент.ПоказатьВопросОПересчетеСуммыДокумента(ЭтаФорма, Новый Структура("ИзмененСчет, ВалютаДенежныхСредств", Истина, ВалютаДенежныхСредств));

	Иначе
		
		СчетОрганизацииПриИзмененииНаСервере(, Новый Массив);
		
		Если Объект.ВключатьКомиссиюБанка Тогда
			
			ТекстВопроса = НСтр("ru='Изменен счет организации. Перезаполнить данные по комиссионному обслуживанию?'");
			Режим = РежимДиалогаВопрос.ДаНет;
			Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаПриИзмененииСчетаОрганизации", ЭтотОбъект, Параметры);
			ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
			
		КонецЕсли;
		
		УправлениеФормой(ЭтаФорма);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаПриИзмененииСчетаОрганизации(Результат, Параметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Если Объект.ВключатьКомиссиюБанка Тогда
			ОбновитьПодвал(ЭтаФорма);		
		КонецЕсли;
		
		Возврат;	
	КонецЕсли;
	
	Если Объект.ВключатьКомиссиюБанка Тогда
		ЗаполнитьРеквизитыКомиссии();
		РассчитатьСуммуКомиссии(ЭтаФорма, Истина);
		ОбновитьПодвал(ЭтаФорма);		
	КонецЕсли;
	
	СформироватьНазначениеПлатежа();
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура СчетОрганизацииПриИзмененииНаСервере(СтруктураРезультатаВыполнения = Неопределено, ПричиныИзмененияСчетовУчета)

	Если НЕ ЗначениеЗаполнено(Объект.СчетОрганизации) Тогда
		Возврат;
	КонецЕсли;

	//Если НЕ ПустаяСтрока(Номер) И (ЗначениеЗаполнено(СчетОрганизации.Префикс) 
	//	Или ЗначениеЗаполнено(мИсходныйСчет.Префикс)) Тогда
	//	РаботаСДиалогами.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
	//КонецЕсли;

	ПричиныИзмененияСчетовУчета.Добавить("СчетОрганизации");
	
	ЗаполнитьСчетаУчета(ПричиныИзмененияСчетовУчета, "СчетОрганизации");
	
	Если ЗначениеЗаполнено(Объект.СчетОрганизации.ВалютаДенежныхСредств) И (Объект.СчетОрганизации.ВалютаДенежныхСредств <> Объект.ВалютаДокумента) Тогда
		
		Объект.ВалютаДокумента = Объект.СчетОрганизации.ВалютаДенежныхСредств;
		
		Если НЕ Объект.СчетКонтрагента.Пустая() И НЕ Объект.СчетОрганизации.ВалютаДенежныхСредств = Объект.СчетКонтрагента.ВалютаДенежныхСредств Тогда
			Объект.СчетКонтрагента = Неопределено;			
			ТекстСообщения  = НСтр("ru = 'Валюта счета контрагента не соответствует валюте счета организации! Значение очищено.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;    
		
		ВалютаДокументаПриИзмененииНаСервере(СтруктураРезультатаВыполнения);
		
	КонецЕсли;  

	ОрганизацияДляПечати = ОбщегоНазначенияБК.ПолучитьСтруктурнуюЕдиницу(Объект.Организация, Объект.СтруктурноеПодразделениеОтправитель);		
	Если ЗначениеЗаполнено(Объект.СчетОрганизации.ТекстКорреспондента) Тогда
		Объект.ТекстПлательщика = Объект.СчетОрганизации.ТекстКорреспондента;
	Иначе
		Объект.ТекстПлательщика = ?(НЕ ЗначениеЗаполнено(ОрганизацияДляПечати.НаименованиеПолное), ОрганизацияДляПечати.Наименование, ОрганизацияДляПечати.НаименованиеПолное);		
	КонецЕсли;

	УстановитьСвязиПараметровВыбораСчетКонтрагента();
	
КонецПроцедуры

&НаСервере
Процедура ВалютаДокументаПриИзмененииНаСервере(СтруктураРезультатаВыполнения = Неопределено)

	Если НЕ Объект.ВалютаДокумента = ТекущаяВалютаДокумента Тогда
		
		НеобходимПересчетСумм = СтруктураРезультатаВыполнения = Неопределено ИЛИ (СтруктураРезультатаВыполнения.Свойство("НеобходимПересчетСумм") И СтруктураРезультатаВыполнения.НеобходимПересчетСумм);

		Если (ЕстьРасшифровкаПлатежа И Объект.РасшифровкаПлатежа.Количество() > 1)
			ИЛИ (Объект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеДенежныхСредствПодотчетнику И Объект.ПеречислениеВПодотчет.Количество() > 0) Тогда
			//Для пересчета суммы по таблице расшифровок
			ТекущиеПараметрыДокумента = Новый Структура("ВалютаДокумента, КурсДокумента, КратностьДокумента, СуммаДокумента", ТекущаяВалютаДокумента, КурсДокумента, КратностьДокумента, Объект.СуммаДокумента);
		КонецЕсли; 
		
		РаботаСДиалогами.ПриИзмененииЗначенияКассыБанковскогоСчета(ТекущаяВалютаДокумента, КурсДокумента, КратностьДокумента, Объект.Дата, Объект.СуммаДокумента, Объект.ВалютаДокумента, НеобходимПересчетСумм);
		
		Если НеобходимПересчетСумм Тогда
			
			ПересчетСуммаДокументаПриИзменении(ЭтаФорма);
				
			Если (ЕстьРасшифровкаПлатежа И Объект.РасшифровкаПлатежа.Количество() > 1)
				ИЛИ (Объект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеДенежныхСредствПодотчетнику И Объект.ПеречислениеВПодотчет.Количество() > 0) Тогда			
				
				Если НЕ Объект.СуммаДокумента = ТекущиеПараметрыДокумента.СуммаДокумента Тогда
					
					Если Объект.РасшифровкаПлатежа.Количество() > 1 Тогда
						//Необходимо пересчитать суммы в таблице расшифровок.
						Для Каждого СтрокаПлатеж Из Объект.РасшифровкаПлатежа Цикл
							СтрокаПлатеж.СуммаПлатежа = ОбщегоНазначенияБККлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаПлатежа,
																								ТекущиеПараметрыДокумента.ВалютаДокумента, Объект.ВалютаДокумента, 
																								ТекущиеПараметрыДокумента.КурсДокумента, КурсДокумента,
																								ТекущиеПараметрыДокумента.КратностьДокумента, КратностьДокумента);
							
							УправлениеДенежнымиСредствамиКлиентСервер.ПересчитатьСуммуНДС(СтрокаПлатеж);
							РассчитатьСуммуВзаиморасчетов(СтрокаПлатеж, ЭтаФорма);					
						КонецЦикла;
					КонецЕсли;
					
					Если Объект.ПеречислениеВПодотчет.Количество() > 0 Тогда
						//Необходимо пересчитать суммы в таблице подотчетных сумм.
						Для Каждого СтрокаПлатеж Из Объект.ПеречислениеВПодотчет Цикл
							СтрокаПлатеж.СуммаПлатежа = ОбщегоНазначенияБККлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаПлатежа,
																								ТекущиеПараметрыДокумента.ВалютаДокумента, Объект.ВалютаДокумента, 
																								ТекущиеПараметрыДокумента.КурсДокумента, КурсДокумента,
																								ТекущиеПараметрыДокумента.КратностьДокумента,КратностьДокумента);
						КонецЦикла; 
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		СформироватьНазначениеПлатежа();
		
	КонецЕсли;
	
	УстановитьПараметрыВыбораДоговораСКонтрагентом(ЭтотОбъект);
	
КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Процедура ПересчетСуммаДокументаПриИзменении(Форма)
	
	Объект = Форма.Объект;
	
	Если Объект.РасшифровкаПлатежа.Количество() = 1 Тогда
		
		СтрокаПлатеж = Объект.РасшифровкаПлатежа[0];
		СтрокаПлатеж.СуммаПлатежа = Объект.СуммаДокумента;
		
		Если Форма.ЕстьРасшифровкаПлатежа Тогда
			
			УправлениеДенежнымиСредствамиКлиентСервер.ПересчитатьСуммуНДС(СтрокаПлатеж);
			РассчитатьСуммуВзаиморасчетов(СтрокаПлатеж, Форма);
			
		КонецЕсли;
		
		Если Объект.ВключатьКомиссиюБанка Тогда
			РассчитатьСуммуКомиссии(Форма);
			ОбновитьПодвал(Форма);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УчитыватьКПНПриИзмененииНаСервере()
	
	ПроцедурыНалоговогоУчета.ЗаполнитьВидУчетаНУ(Объект.УчитыватьКПН, Объект.ВидУчетаНУ);
	УправлениеФормой(ЭтаФорма);
	УстановитьВидимостьСчетовУчета();
	
КонецПроцедуры

&НаКлиенте
Процедура СчетБанкПриИзмененииКлиент()
	  	
	ОплатаВВалюте = ПолучитьЗначениеРеквизита(Объект.СчетБанк, "Валютный");
	
	Если (НЕ ОплатаВВалюте ИЛИ НЕ ЗначениеЗаполнено(Объект.ВалютаДокумента))
		И Объект.СуммаДокумента > 0 Тогда                                                                                    		
		РаботаСДиалогамиКлиент.ПоказатьВопросОПересчетеСуммыДокумента(ЭтаФорма, Новый Структура("ИзмененСчетКассы", Истина));
	Иначе                                                                                                                    		
		СчетБанкПриИзмененииНаСервере();                                                                                     		
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура СчетБанкПриИзмененииНаСервере(СтруктураРезультатаВыполнения = Неопределено)
		
	Если НЕ ОплатаВВалюте ИЛИ НЕ ЗначениеЗаполнено(Объект.ВалютаДокумента) Тогда
		Объект.ВалютаДокумента = ВалютаРегламентированногоУчета;
		ВалютаДокументаПриИзмененииНаСервере(СтруктураРезультатаВыполнения);
	КонецЕсли;
			
	УправлениеФормой(ЭтаФорма);
	УстановитьВидимостьСчетовУчета();
	
КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииНаСервере(ПричиныИзмененияСчетовУчета)
	
	ПроверитьСоответсвиеКонтрагентаВидуОперации(Объект.ВидОперации, Объект.Контрагент, ПричиныИзмененияСчетовУчета);
	
	Если ПричиныИзмененияСчетовУчета.Найти("Контрагент") = Неопределено Тогда
		ПричиныИзмененияСчетовУчета.Добавить("Контрагент");
	КонецЕсли;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет Тогда
		Возврат;
	КонецЕсли;	
	
	ЕстьРасшифровкаПлатежа = Документы.ПлатежноеПоручениеИсходящее.ЕстьРасшифровкаПлатежа(Объект.ВидОперации);
	
	ВосстанавливатьРеквизиты = (Объект.РасшифровкаПлатежа.Количество() = 1);
	
	Если ЕстьРасшифровкаПлатежа Тогда
		
		СтрокаПлатеж = Объект.РасшифровкаПлатежа[0];
		
		СтараяСтатьяДДС = СтрокаПлатеж.СтатьяДвиженияДенежныхСредств;
		СтараяСтавкаНДС = СтрокаПлатеж.СтавкаНДС;
		
		Объект.РасшифровкаПлатежа.Очистить();
		
		СтрокаПлатеж = Объект.РасшифровкаПлатежа.Добавить();
		
		ОсновнойДоговорКонтрагента = ОбщегоНазначенияБК.ДоступныйДоговорКонтрагента(Объект.Контрагент.ОсновнойДоговорКонтрагента);
		
		ИзмененаОрганизация = Ложь;
		
		Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда 
			
			СтрокаПлатеж.ДоговорКонтрагента = Неопределено;
			
		ИначеЕсли НЕ УправлениеВзаиморасчетамиСервер.ОпределитьВидДоговораСКонтрагентом(Объект.ВидОперации).НайтиПоЗначению(ОсновнойДоговорКонтрагента.ВидДоговора) = Неопределено Тогда
			
			Если Объект.Организация.Пустая() Тогда
				
				СтрокаПлатеж.ДоговорКонтрагента = ОсновнойДоговорКонтрагента;
				Если Объект.Организация <> ОсновнойДоговорКонтрагента.Организация Тогда
					ИзмененаОрганизация = Истина;
				КонецЕсли;
				Объект.Организация = ОсновнойДоговорКонтрагента.Организация;
				СтруктурноеПодразделениеОрганизация = ОсновнойДоговорКонтрагента.Организация;
				
			ИначеЕсли ОсновнойДоговорКонтрагента.Организация.Пустая()
				ИЛИ ОсновнойДоговорКонтрагента.Организация = Объект.Организация Тогда
				
				СтрокаПлатеж.ДоговорКонтрагента = ОсновнойДоговорКонтрагента;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ИзмененаОрганизация Тогда
			СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(Новый Структура("ИзмененаОрганизация, ИзмененоСтруктурноеПодразделение", Истина, Ложь), Неопределено);
		КонецЕсли;
		
		СтрокаПлатеж.СуммаПлатежа = Объект.СуммаДокумента;
		
		Если ВосстанавливатьРеквизиты Тогда
			
			СтрокаПлатеж.СтатьяДвиженияДенежныхСредств = СтараяСтатьяДДС;
			СтрокаПлатеж.СтавкаНДС 					   = СтараяСтавкаНДС;
			
		КонецЕсли;    
		
	КонецЕсли;
	
	Объект.СчетКонтрагента = Объект.Контрагент.ОсновнойБанковскийСчет;
	
	Если НЕ Объект.СчетКонтрагента.Пустая() Тогда
		СчетКонтрагентаПриИзмененииНаСервере();
	КонецЕсли;
	
	ЗаполнитьСчетаУчета(ПричиныИзмененияСчетовУчета, "Контрагент");
	
	ЗаполнитьТекстПолучателя();  
	СтрокаПлатеж = ?(Объект.РасшифровкаПлатежа.Количество() > 0, Объект.РасшифровкаПлатежа[0], Неопределено); 
	ДоговорПриИзмененииНаСервере(СтрокаПлатеж.ПолучитьИдентификатор(), ПричиныИзмененияСчетовУчета);
	СформироватьНазначениеПлатежа();
	
КонецПроцедуры

&НаСервере
Процедура СчетКонтрагентаПриИзмененииНаСервере()
	
	Если НЕ Объект.СчетОрганизации.ВалютаДенежныхСредств = Объект.СчетКонтрагента.ВалютаДенежныхСредств Тогда
		
		Если Объект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет Тогда
			ТекстСообщения = НСтр("ru='Несоответствие валют выбранных счетов организации!'");
		Иначе
			ТекстСообщения = НСтр("ru='Валюта счета контрагента не соответствует валюте счета организации!'");
		КонецЕсли;
		
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , "СчетКонтрагента", "Объект");
		
		Объект.СчетКонтрагента = Неопределено;
		
	КонецЕсли;
	
	ЗаполнитьТекстПолучателя();	
	СформироватьНазначениеПлатежа();
		
КонецПроцедуры

&НаСервере
Процедура ДоговорПриИзмененииНаСервере(НомерСтрокаПлатежа = Неопределено, ПричиныИзмененияСчетовУчета)

	Если НомерСтрокаПлатежа = Неопределено Тогда
		Если Объект.РасшифровкаПлатежа.Количество() > 0 Тогда
			СтрокаПлатеж = Объект.РасшифровкаПлатежа[0];
		Иначе
			Возврат;
		КонецЕсли;
	Иначе
		СтрокаПлатеж = Объект.РасшифровкаПлатежа.НайтиПоИдентификатору(НомерСтрокаПлатежа);
	КонецЕсли;

	ПричиныИзмененияСчетовУчета.Добавить("ДоговорКонтрагента");
	
	СтруктураКурсаВзаиморасчетов = ОбщегоНазначенияБК.ПолучитьКурсВалюты(СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, Объект.Дата);

	СтрокаПлатеж.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
	СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
	СтрокаПлатеж.ДоговорКонтрагентаВедениеВзаиморасчетов = СтрокаПлатеж.ДоговорКонтрагента.ВедениеВзаиморасчетов;
	СтрокаПлатеж.ДоговорКонтрагентаВалютаВзаиморасчетов  = СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;

	РассчитатьСуммуВзаиморасчетов(СтрокаПлатеж, ЭтаФорма);

	СтрокаПлатеж.Сделка = Неопределено;
	
	ПараметрыЗаполненияСчетовУчета = НачатьЗаполнениеСчетовУчета(
		"РасшифровкаПлатежа.ДоговорКонтрагента",
		Объект,
		СтрокаПлатеж);
		
	Изменения = СчетаУчетаВДокументах.ЗаполнитьРеквизитыПриИзменении(
		Документы.ПлатежноеПоручениеИсходящее,
		ПараметрыЗаполненияСчетовУчета.КЗаполнению,
		Объект,
		"РасшифровкаПлатежа",
		СтрокаПлатеж);
	ЗаполнитьЗначенияСвойств(СтрокаПлатеж, Изменения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаОПересчетеСуммыДокумента(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		
		//Объект.ВалютаДокумента = Параметры.ВалютаДенежныхСредств;
		//ТекущаяВалютаДокумента = Объект.ВалютаДокумента;
		//СтруктураРезультатаВыполнения = Неопределено;
		
		СтруктураРезультатаВыполнения = Новый Структура("НеобходимПересчетСумм", Ложь);
		
		СчетОрганизацииПриИзмененииНаСервере(СтруктураРезультатаВыполнения, Новый Массив);
		
		Если Объект.ВключатьКомиссиюБанка Тогда
			
			ТекстВопроса = НСтр("ru='Изменен счет организации. Перезаполнить данные по комиссионному обслуживанию?'");
			Режим = РежимДиалогаВопрос.ДаНет;
			Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаПриИзмененииСчетаОрганизации", ЭтотОбъект, Параметры);
			ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
			
		КонецЕсли;
		
		Возврат;
		
	Иначе
		
		СтруктураРезультатаВыполнения = Параметры;
		
	КонецЕсли;
	
	Если НЕ Параметры = Неопределено И Параметры.Свойство("ИзмененСчет") Тогда
		
		Если СтруктураРезультатаВыполнения = Неопределено Тогда
			СтруктураРезультатаВыполнения = Новый Структура("НеобходимПересчетСумм", Истина);
		Иначе
			СтруктураРезультатаВыполнения.Вставить("НеобходимПересчетСумм", Истина);
		КонецЕсли;
		
		СчетОрганизацииПриИзмененииНаСервере(СтруктураРезультатаВыполнения, Новый Массив);
		
		Если Объект.ВключатьКомиссиюБанка Тогда
			
			ТекстВопроса = НСтр("ru='Изменен счет организации. Перезаполнить данные по комиссионному обслуживанию?'");
			Режим = РежимДиалогаВопрос.ДаНет;
			Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаПриИзмененииСчетаОрганизации", ЭтотОбъект, Параметры);
			ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
			
		КонецЕсли;

	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	УстановитьВидимостьСчетовУчета();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаПриИзмененииДокументОснование(Результат, Параметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;	
	КонецЕсли;
	
	ПослеЗакрытияВопросаПриИзмененииДокументОснованиеНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗакрытияВопросаПриИзмененииДокументОснованиеНаСервере()
	
	ИсходныеДанные = Новый Структура("Организация, СчетОрганизации");
	ЗаполнитьЗначенияСвойств(ИсходныеДанные, Объект);
	
	Объект.РасшифровкаПлатежа.Очистить();
	Если Объект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеЗаработнойПлаты Тогда
		Объект.ПеречислениеЗаработнойПлаты.Очистить();
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеДенежныхСредствПодотчетнику Тогда
		Объект.ПеречислениеВПодотчет.Очистить();
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеПенсионныхВзносов Тогда
		Объект.ПеречислениеПенсионныхВзносов.Очистить();
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеСоциальныхОтчислений Тогда
		Объект.ПеречислениеСоциальныхОтчислений.Очистить();
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеПоИсполнительнымЛистам Тогда
		Объект.ПеречислениеПоИсполнительнымЛистам.Очистить();
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеНДССИзмененнымСрокомУплаты Тогда
		Объект.ПеречислениеНДССИзмененнымСрокомУплаты.Очистить();
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеЕдиногоПлатежа Тогда
		Объект.ПеречислениеЕдиныхПлатежей.Очистить(); 
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеПрочихВыплат Тогда
		Объект.ПеречислениеПрочихВыплат.Очистить();
	КонецЕсли;                                           
	  	
	Документы.ПлатежноеПоручениеИсходящее.ЗаполнитьПоДокументуОснованию(Объект, Объект.ДокументОснование);
	
	Если Объект.РасшифровкаПлатежа.Количество() = 0 Тогда
		НоваяСтрока = Объект.РасшифровкаПлатежа.Добавить();
	КонецЕсли;

	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	ЕстьРасшифровкаПлатежа = Документы.ПлатежноеПоручениеИсходящее.ЕстьРасшифровкаПлатежа(Объект.ВидОперации);
	
	Элементы.РасшифровкаПлатежа.ТекущаяСтрока = 0;
	
	Если НЕ ИсходныеДанные.Организация = Объект.Организация  Тогда
		ПараметрыОбработки = Новый Структура;
		ПараметрыОбработки.Вставить("ИзмененаОрганизация", ИсходныеДанные.Организация <> Объект.Организация);
		ПараметрыОбработки.Вставить("ИзмененоСтруктурноеПодразделение", ИсходныеДанные.Организация <> Объект.Организация);
		ОрганизацияПриИзмененииНаСервере(ПараметрыОбработки, Неопределено);
	КонецЕсли;
	
	Если ИсходныеДанные.СчетОрганизации <> Объект.СчетОрганизации Тогда
		СчетОрганизацииПриИзмененииНаСервере(, Новый Массив);
	КонецЕсли;
	
	УстановитьВидимостьРеквизитовСтруктурногоПодразделения();	
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(Объект.ВидОперации), Объект.Ссылка, ЭтаФорма);

	СформироватьНазначениеПлатежа();
	
	УстановитьВидимостьСтраницНаСервере();
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеНалога
        ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеЕдиногоПлатежа
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеНДССИзмененнымСрокомУплаты Тогда
		
		ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтБУ", "ПеречислениеНалогов", "СчетУчетаРасчетовСКонтрагентомБУ");	
		ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтНУ", "ПеречислениеНалогов", "СчетУчетаРасчетовСКонтрагентомНУ");
		
		УстановитьЗаголовкиИДоступностьСубконто(ЭтаФорма,Объект.СчетУчетаРасчетовСКонтрагентомБУ, , "ПеречислениеНалогов", Объект.СчетУчетаРасчетовСКонтрагентомНУ);
		
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПрочееСписаниеБезналичныхДенежныхСредств Тогда
		
		ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтБУ",, "СчетУчетаРасчетовСКонтрагентомБУ");	
		ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтНУ",, "СчетУчетаРасчетовСКонтрагентомНУ");
				
		УстановитьЗаголовкиИДоступностьСубконто(ЭтаФорма,Объект.СчетУчетаРасчетовСКонтрагентомБУ, , , Объект.СчетУчетаРасчетовСКонтрагентомНУ);
		
	ИначеЕсли ЕстьРасшифровкаПлатежа 
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеЗаработнойПлаты
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеПенсионныхВзносов 
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеПоИсполнительнымЛистам
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеСоциальныхОтчислений Тогда
		
		ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтБУ", , "СчетУчетаРасчетовСКонтрагентомБУ");	
		ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтНУ", , "СчетУчетаРасчетовСКонтрагентомНУ");
		
		УстановитьЗаголовкиИДоступностьСубконто(ЭтаФорма,Объект.СчетУчетаРасчетовСКонтрагентомБУ, , , Объект.СчетУчетаРасчетовСКонтрагентомНУ);
		
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеПрочихВыплат Тогда
		
		ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтБУ", "ПеречислениеПрочихВыплат", "СчетУчетаРасчетовСКонтрагентомБУ");	
		ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтНУ", "ПеречислениеПрочихВыплат", "СчетУчетаРасчетовСКонтрагентомНУ");	
		
		УстановитьЗаголовкиИДоступностьСубконто(ЭтаФорма,Объект.СчетУчетаРасчетовСКонтрагентомБУ, , "ПеречислениеПрочихВыплат", Объект.СчетУчетаРасчетовСКонтрагентомНУ);
		
	КонецЕсли; 
	
	ОбновитьПодвал(ЭтаФорма);
	УстановитьФункциональныеОпцииФормы();
	УправлениеФормой(ЭтаФорма);
	УстановитьВидимостьСчетовУчета();

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСуммуДокумента(ИмяТаблицы, Документ, ВидСуммы = "Сумма")
		
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Перечисление." + ВидСуммы + " КАК Сумма
	               |ИЗ
	               |	Документ." + ИмяТаблицы + " КАК Перечисление
	               |ГДЕ
	               |	Перечисление.Ссылка = &Ссылка
	               |ИТОГИ
	               |	СУММА(Сумма)
	               |ПО
	               |	ОБЩИЕ";
	Запрос.УстановитьПараметр("Ссылка", Документ);
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	Если РезультатЗапроса.Следующий() Тогда
		Возврат РезультатЗапроса.Сумма;
	КонецЕсли; 
	
	Возврат 0;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСтруктуруПриИзмененииДокументаППВНаСервере(Документ)

	СтруктураВозврата = Новый Структура("СуммаКПеречислению, ВидВзноса", 0, "ОПВ");
	
	СтруктураВозврата.СуммаКПеречислению = ПолучитьСуммуДокумента("ОПВПеречислениеВФонды.ПенсионныеВзносы", Документ);
	
	ВидОперацииВедомости = ПолучитьЗначениеРеквизита(Документ, "ВидОперации");
	
	Если ВидОперацииВедомости = Перечисления.ВидыОперацийОПВПеречислениеВФонды.ПеречислениеОбязательныхПенсионныхВзносов Тогда
		СтруктураВозврата.ВидВзноса = НСтр("ru = 'ОПВ'");
	ИначеЕсли ВидОперацииВедомости = Перечисления.ВидыОперацийОПВПеречислениеВФонды.ПеречислениеОбязательныхПенсионныхВзносовРаботодателя Тогда
		СтруктураВозврата.ВидВзноса = НСтр("ru = 'ОПВР'");
	Иначе
		СтруктураВозврата.ВидВзноса = НСтр("ru = 'ОППВ'");
	КонецЕсли;

	Возврат СтруктураВозврата;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСтруктуруПриИзмененииДокументаСОНаСервере(Документ)

	СтруктураВозврата = Новый Структура("СуммаКПеречислению, ВидВзноса", 0, "СО");
	
	СтруктураВозврата.СуммаКПеречислению = ПолучитьСуммуДокумента("СОПеречислениеВФонды.СоциальныеОтчисления", Документ);
	ВидОперацииВедомости = ПолучитьЗначениеРеквизита(Документ, "ВидОперации");
	Если ВидОперацииВедомости = ПредопределенноеЗначение("Перечисление.ВидыОперацийСОПеречислениеВФонды.ПеречислениеОбязательныхСоциальныхОтчислений") Тогда
		СтруктураВозврата.ВидВзноса = НСтр("ru = 'СО'");
	ИначеЕсли ВидОперацииВедомости = ПредопределенноеЗначение("Перечисление.ВидыОперацийСОПеречислениеВФонды.ПеречислениеВзносовОСМС") Тогда
		СтруктураВозврата.ВидВзноса = НСтр("ru = 'ВОСМС'");
	ИначеЕсли ВидОперацииВедомости = ПредопределенноеЗначение("Перечисление.ВидыОперацийСОПеречислениеВФонды.ПеречислениеОтчисленийОСМС") Тогда
		СтруктураВозврата.ВидВзноса = НСтр("ru = 'ООСМС'");
	КонецЕсли;
		
	Возврат СтруктураВозврата;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСтруктуруПриИзмененииДокументаЕПНаСервере(Документ)

	СтруктураВозврата = Новый Структура("СуммаПлатежа", 0);
	
	СтруктураВозврата.СуммаПлатежа = ПолучитьСуммуДокумента("ЕППеречислениеВФонды.ЕдиныеПлатежи", Документ);
	
	Возврат СтруктураВозврата;
	
КонецФункции

&НаСервере
Функция ПолучитьСтруктуруПриИзмененииДокументаИЛНаСервере(Документ, ЗаполнятьКонтрагента = Ложь)
	
	СтруктураВозврата = Новый Структура("СуммаКПеречислению, СуммаСборов, СуммаПлатежа, Контрагент, СчетКонтрагента", 0, 0, 0, Неопределено, Неопределено);

	СтруктураВозврата.СуммаКПеречислению = ПолучитьСуммуДокумента("ИЛПеречислениеПолучателям.ИсполнительныеЛисты", Документ, "СуммаВзаиморасчетов");
	СтруктураВозврата.СуммаСборов 		 = ПолучитьСуммуДокумента("ИЛПеречислениеПолучателям.ИсполнительныеЛисты", Документ, "СуммаСборов");
	СтруктураВозврата.СуммаПлатежа		 = ПолучитьСуммуДокумента("ИЛПеречислениеПолучателям.ИсполнительныеЛисты", Документ, "СуммаПлатежа");
	
	Если ЗаполнятьКонтрагента Тогда
		СтрокаИЛ						  = Документ.ИсполнительныеЛисты[0];
		СтруктураВозврата.Контрагент	  = СтрокаИЛ.Получатель;
		СтруктураВозврата.СчетКонтрагента = СтруктураВозврата.Контрагент.ОсновнойБанковскийСчет;
		ЗаполнитьТекстПолучателя();
	КонецЕсли;
	
	Возврат СтруктураВозврата;

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСтруктуруПриИзмененииДокументаПрочихВыплатНаСервере(Документ)

	СтруктураВозврата = Новый Структура("Сумма, ВидПрочихВыплат", 0, Справочники.ВидыПрочихВыплат.ПустаяСсылка());
	
	СтруктураВозврата.Сумма = ПолучитьСуммуДокумента("ВедомостьНаПеречислениеПрочихВыплат.ПрочиеВыплаты", Документ, "Сумма");
	
	ВидПрочихВыплатВедомости = ПолучитьЗначениеРеквизита(Документ, "ВидПрочихВыплат");
	
	Если ЗначениеЗаполнено(ВидПрочихВыплатВедомости) Тогда
		СтруктураВозврата.ВидПрочихВыплат = ВидПрочихВыплатВедомости;
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСчетаПоСпособуОтражения(ВедомостьВидПрочихВыплат)	
			
	СчетаПоСпособуОтражения = ПолучитьСчетаПоСпособуОтражения(ВедомостьВидПрочихВыплат);

	ЗаполнитьЗначенияСвойств(Объект, СчетаПоСпособуОтражения); 
			
	УстановитьЗаголовкиИДоступностьСубконто(ЭтаФорма, Объект.СчетУчетаРасчетовСКонтрагентомБУ,, "ПеречислениеПрочихВыплат", Объект.СчетУчетаРасчетовСКонтрагентомНУ);
		
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтБУ", "ПеречислениеПрочихВыплат", "СчетУчетаРасчетовСКонтрагентомБУ");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДтНУ", "ПеречислениеПрочихВыплат", "СчетУчетаРасчетовСКонтрагентомНУ");
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСчетаПоСпособуОтражения(ВедомостьВидПрочихВыплат) 
	
	ДанныеПоСпособуОтражения = Новый Структура("СчетУчетаРасчетовСКонтрагентомБУ, СчетУчетаРасчетовСКонтрагентомНУ, 
		|СубконтоДтБУ1, СубконтоДтБУ2, СубконтоДтБУ3,
		|СубконтоДтНУ1, СубконтоДтНУ2, СубконтоДтНУ3",
		ПланыСчетов.Типовой.ПустаяСсылка(),
		ПланыСчетов.Налоговый.ПустаяСсылка(),
		ПланыВидовХарактеристик.ВидыСубконтоТиповые.ПустаяСсылка(),
		ПланыВидовХарактеристик.ВидыСубконтоТиповые.ПустаяСсылка(),
		ПланыВидовХарактеристик.ВидыСубконтоТиповые.ПустаяСсылка(),
		ПланыВидовХарактеристик.ВидыСубконтоТиповые.ПустаяСсылка(),
		ПланыВидовХарактеристик.ВидыСубконтоТиповые.ПустаяСсылка(),
		ПланыВидовХарактеристик.ВидыСубконтоТиповые.ПустаяСсылка());  
		
	СпособОтраженияВидПрочихВыплат = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВедомостьВидПрочихВыплат, "СпособОтраженияВРеглУчете");
	
	Если ЗначениеЗаполнено(СпособОтраженияВидПрочихВыплат) Тогда 	
		
		ДанныеПоСпособуОтраженияСтруктура = ПолучитьДанныеПоСпособуОтраженияВРеглУчете(СпособОтраженияВидПрочихВыплат);
		
		ДанныеПоСпособуОтражения.СчетУчетаРасчетовСКонтрагентомБУ = ДанныеПоСпособуОтраженияСтруктура.СчетКт; 
		ДанныеПоСпособуОтражения.СчетУчетаРасчетовСКонтрагентомНУ = ДанныеПоСпособуОтраженияСтруктура.СчетКтНУ;
		ДанныеПоСпособуОтражения.СубконтоДтБУ1 = ДанныеПоСпособуОтраженияСтруктура.СубконтоКт1; 
		ДанныеПоСпособуОтражения.СубконтоДтБУ2 = ДанныеПоСпособуОтраженияСтруктура.СубконтоКт2;
		ДанныеПоСпособуОтражения.СубконтоДтБУ3 = ДанныеПоСпособуОтраженияСтруктура.СубконтоКт3;
		ДанныеПоСпособуОтражения.СубконтоДтНУ1 = ДанныеПоСпособуОтраженияСтруктура.СубконтоКтНУ1;
		ДанныеПоСпособуОтражения.СубконтоДтНУ2 = ДанныеПоСпособуОтраженияСтруктура.СубконтоКтНУ2;
		ДанныеПоСпособуОтражения.СубконтоДтНУ3 = ДанныеПоСпособуОтраженияСтруктура.СубконтоКтНУ3;

	КонецЕсли; 
		
	Возврат ДанныеПоСпособуОтражения;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДанныеПоСпособуОтраженияВРеглУчете(СпособОтражения) 
	
	СтруктураДанных = Новый Структура;

	СтруктураДанных = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СпособОтражения,"СчетКт,СубконтоКт1,СубконтоКт2,СубконтоКт3,СчетКтНУ,СубконтоКтНУ1,СубконтоКтНУ2,СубконтоКтНУ3");
		
	Возврат СтруктураДанных;

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСуммуКВыплатеЗПНаСервере(Ссылка, ДокументОснование)

	// Определим суммы к выплате
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("СсылкаПП", 	Ссылка);
	Запрос.УстановитьПараметр("Основание", 	ДокументОснование);
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СУММА(ЗарплатаКВыплате.Сумма + ЗарплатаКВыплате.ДепонированнаяСумма) КАК СуммаКВыплате
	|
	|ИЗ
	|	Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплате
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям КАК РанееВыплаченныеСуммы
	|	ПО ЗарплатаКВыплате.ФизЛицо = РанееВыплаченныеСуммы.ФизЛицо
	|	   И ЗарплатаКВыплате.Ссылка = РанееВыплаченныеСуммы.Ведомость
	|	   И РанееВыплаченныеСуммы.Регистратор <> &СсылкаПП
	|ГДЕ
	|	ЗарплатаКВыплате.Ссылка = &Основание И
	|	РанееВыплаченныеСуммы.ФизЛицо ЕСТЬ NULL
	|";
		
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	
	Если РезультатЗапроса.Следующий() Тогда
		
		СуммаКВыплате = РезультатЗапроса.СуммаКВыплате;
		
	Иначе
		
		СуммаКВыплате = 0;
		
	КонецЕсли;
	
	Возврат СуммаКВыплате;
	
КонецФункции

&НаСервере
Процедура ВидНалогаПриИзмененииНаСервере()
	
	ВидНалога = Объект.ВидНалога;
	 
	Если ЗначениеЗаполнено(ВидНалога) Тогда
		
		Объект.КодБК 				= ВидНалога.КодБК;
		Объект.КодНазначенияПлатежа = ВидНалога.КодНазначенияПлатежа;
		Объект.Контрагент	 		= ВидНалога.Контрагент;		
		
		КонтрагентПриИзмененииНаСервере(Новый Массив);
		
		Объект.СчетКонтрагента = ВидНалога.СчетКонтрагента;
		
		Если ЗначениеЗаполнено(ВидНалога.НазначениеПлатежа) Тогда
			
			Объект.НазначениеПлатежа = СокрЛП(ВидНалога.НазначениеПлатежа);
			
		КонецЕсли;
		
		Объект.СчетУчетаРасчетовСКонтрагентомБУ = ВидНалога.СчетУчетаРасчетовСКонтрагентомБУ;
		
		Если Объект.УчитыватьКПН Тогда
			
			Объект.СчетУчетаРасчетовСКонтрагентомНУ = ВидНалога.СчетУчетаРасчетовСКонтрагентомНУ;	
			
			Если НЕ ЗначениеЗаполнено(Объект.СчетУчетаРасчетовСКонтрагентомНУ) Тогда
				Объект.СчетУчетаРасчетовСКонтрагентомНУ = ПроцедурыБухгалтерскогоУчета.ЗаполнитьСчетНалоговогоУчетаПоУмолчанию(Объект.СчетУчетаРасчетовСКонтрагентомБУ, Объект.Дата);						
			КонецЕсли;
			
		КонецЕсли;
		
		ПроверитьВладельцаСубконтоПодразделениеБУНУ(Объект);
	
		УстановитьЗаголовкиИДоступностьСубконто(ЭтаФорма, Объект.СчетУчетаРасчетовСКонтрагентомБУ,, "ПеречислениеНалогов", Объект.СчетУчетаРасчетовСКонтрагентомНУ);
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВводаКурсаКратности(Результат, Параметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		
		ЗаполнятьКурсиКратностьРасшифровки = Истина;
		ИмяРасшифровкиПлатежа = "";
		ИмяПоля = "";
		
		Если ТипЗнч(Параметры) = Тип("Структура") И Параметры.Свойство("ИмяРасшифровкиПлатежа", ИмяРасшифровкиПлатежа) Тогда
			Если ИмяРасшифровкиПлатежа = "" Тогда
				Объект[Параметры.ИмяПоля] = Результат.КурсВалюты;
				ЗаполнятьКурсиКратностьРасшифровки = Ложь;
			Иначе				
				ТекущиеДанные = Элементы[ИмяРасшифровкиПлатежа].ТекущиеДанные;
				Если Параметры.Свойство("ИмяПоля", ИмяПоля) Тогда
					ТекущиеДанные[ИмяПоля] = Результат.КурсВалюты;
					ЗаполнятьКурсиКратностьРасшифровки = Ложь;
				КонецЕсли;   		
			КонецЕсли;
		Иначе
			ТекущиеДанные = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
		КонецЕсли;
		
		Если ЗаполнятьКурсиКратностьРасшифровки Тогда
			ТекущиеДанные.КурсВзаиморасчетов      = Результат.КурсВалюты;
			ТекущиеДанные.КратностьВзаиморасчетов = Результат.КратностьВалюты;
			
			РассчитатьСуммуВзаиморасчетов(ТекущиеДанные, ЭтаФорма);
			
		КонецЕсли;
		
	КонецЕсли; 
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьНДСВидОборота(ДанныеОбъекта, ДанныеСтроки)
	
	ОбработкаТабличныхЧастей.ЗаполнитьНДСВидОборотаТабЧасти(ДанныеСтроки, ДанныеОбъекта, "ПеречислениеНДССИзмененнымСрокомУплаты", Метаданные.Документы.ПлатежноеПоручениеИсходящее);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТекстСостоянияЭДНаСервере()
	
	Гиперссылка = Ложь;

	ТекстСостоянияЭД = ОбменСБанкамиСлужебныйВызовСервера.ТекстСостоянияЭД(Объект.Ссылка, Гиперссылка);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПроверитьДублированиеДокументовПеречисления(Объект, ИмяТабличнойЧасти, ИмяРеквизитаТЧ, ЗначениеРеквизитаТЧ, ИндексСтроки, Отказ)
	
	НайденныеСтроки = Объект[ИмяТабличнойЧасти].НайтиСтроки(Новый Структура(ИмяРеквизитаТЧ, ЗначениеРеквизитаТЧ));
	
	Если НайденныеСтроки.Количество() > 1 Тогда 
		ТекстСообщения = НСтр("ru='Документ ""%1"" уже есть в табличной части. Повторный выбор не допускается.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ЗначениеРеквизитаТЧ);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения
			, 
			, ИмяТабличнойЧасти + "[" + ИндексСтроки + "]." + ИмяРеквизитаТЧ
			, "Объект",
			Отказ);
		ЗначениеРеквизитаТЧ = Неопределено;
	КонецЕсли;
	
КонецПроцедуры  

&НаКлиентеНаСервереБезКонтекста
Процедура ПроверитьСоответствиеВидовПрочихВыплатДокументовПеречисления(Объект, Документ, ИндексСтроки, Отказ)
	
	Если Объект.ПеречислениеПрочихВыплат.Количество() > 1 И ЗначениеЗаполнено(Документ) Тогда
		
		ВидПрочихВыплатТекВедомость = ПолучитьЗначениеРеквизита(Документ, "ВидПрочихВыплат");
		
		Если НЕ Объект.ПеречислениеПрочихВыплат[0].ВидПрочихВыплат = ВидПрочихВыплатТекВедомость Тогда 
			ТекстСообщения = НСтр("ru='Документ ""%1"" имеет вид прочих выплат, отличный от <%2>. 
										|Выбор ведомостей с разными видами прочих выплат не допускается.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Документ, Объект.ПеречислениеПрочихВыплат[0].ВидПрочихВыплат);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения
				, 
				, "ПеречислениеПрочихВыплат[" + ИндексСтроки + "].Документ"
				, "Объект",
				Отказ);
			Документ = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
			
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзмененияВОрганизацииНаСервере()
	
	// +++ Проверка заполненности реквизитов организации (банковский счет)
	ИспользоватьНесколькоБанковскихСчетовОрганизации = Справочники.БанковскиеСчета.ИспользуетсяНесколькоБанковскихСчетовОрганизации(Объект.Организация);
	
	ОсновнойБанковскийСчетОрганизацииЗаполнен =	ПроверкаРеквизитовОрганизации.ОсновнойБанковскийСчетОрганизацииЗаполнен(Объект.Организация);
	
	ПроверкаРеквизитовОрганизации.ОтобразитьПредупреждениеОЗаполненииРеквизитовСчета(ЭтотОбъект);
	
	Если НЕ ИспользоватьНесколькоБанковскихСчетовОрганизации И ОсновнойБанковскийСчетОрганизацииЗаполнен И Не ЗначениеЗаполнено(Объект.СчетОрганизации) Тогда
		Объект.СчетОрганизации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Организация, "ОсновнойБанковскийСчет");
	КонецЕсли;
	// --- Проверка заполненности реквизитов организации (банковский счет)		
	
КонецПроцедуры

&НаСервере
Процедура РазблокироватьРеквизиты() Экспорт
	
	Элементы.РасшифровкаПлатежа.ТолькоПросмотр       = Ложь;
	Элементы.РасшифровкаПлатежа.ИзменятьСоставСтрок  = Ложь;
	Элементы.РасшифровкаПлатежа.ИзменятьПорядокСтрок = Ложь;
	
	Элементы.ПеречислениеПенсионныхВзносов.ТолькоПросмотр       = Ложь;
	Элементы.ПеречислениеПенсионныхВзносов.ИзменятьСоставСтрок  = Ложь;
	Элементы.ПеречислениеПенсионныхВзносов.ИзменятьПорядокСтрок = Ложь;
	
	Элементы.ПеречислениеСоциальныхОтчислений.ТолькоПросмотр       = Ложь;
	Элементы.ПеречислениеСоциальныхОтчислений.ИзменятьСоставСтрок  = Ложь;
	Элементы.ПеречислениеСоциальныхОтчислений.ИзменятьПорядокСтрок = Ложь;
	
	Элементы.ПеречислениеПоИсполнительнымЛистам.ТолькоПросмотр       = Ложь;
	Элементы.ПеречислениеПоИсполнительнымЛистам.ИзменятьСоставСтрок  = Ложь;
	Элементы.ПеречислениеПоИсполнительнымЛистам.ИзменятьПорядокСтрок = Ложь;

	Элементы.ПеречислениеНДССИзмененнымСрокомУплаты.ТолькоПросмотр       = Ложь;
	Элементы.ПеречислениеНДССИзмененнымСрокомУплаты.ИзменятьСоставСтрок  = Ложь;
	Элементы.ПеречислениеНДССИзмененнымСрокомУплаты.ИзменятьПорядокСтрок = Ложь;

	Элементы.ПеречислениеЗаработнойПлаты.ТолькоПросмотр       = Ложь;
	Элементы.ПеречислениеЗаработнойПлаты.ИзменятьСоставСтрок  = Ложь;
	Элементы.ПеречислениеЗаработнойПлаты.ИзменятьПорядокСтрок = Ложь;

	Элементы.ПеречислениеВПодотчет.ТолькоПросмотр       = Ложь;
	Элементы.ПеречислениеВПодотчет.ИзменятьСоставСтрок  = Ложь;
	Элементы.ПеречислениеВПодотчет.ИзменятьПорядокСтрок = Ложь;
	
		
КонецПроцедуры

&НаСервере
Функция РеквизитыЗаблокированы()
	
	Возврат ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭтотОбъект, "ПараметрыЗапретаРедактированияРеквизитов");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьСуммуКомиссии(Форма, ИзмененПроцентКомиссии = Ложь)
	
	Объект = Форма.Объект;
	
	Если Объект.ВключатьКомиссиюБанка Тогда
		Если НЕ ИзмененПроцентКомиссии И Объект.ПроцентКомиссии = 0 И Объект.СуммаКомиссии <> 0 Тогда
			Возврат;
		Иначе
			Объект.СуммаКомиссии = Окр(Объект.ПроцентКомиссии / 100 * Объект.СуммаДокумента, 2);
		КонецЕсли;
	Иначе
		Объект.СуммаКомиссии = 0;
	КонецЕсли;

КонецПроцедуры

#Область СчетаУчета

&НаСервере
Процедура УстановитьВидимостьСчетовУчета()
	
	ЭлементыСчетов = Новый Массив(); 
	ЭлементыСчетов.Добавить("СчетБанк");
	ЭлементыСчетов.Добавить("СчетПеревод");
	ЭлементыСчетов.Добавить("СчетБанкОрганизации");
	
	ЭлементыСчетов.Добавить("РасшифровкаПлатежаСчетУчетаРасчетовСКонтрагентомБУ");
	ЭлементыСчетов.Добавить("РасшифровкаПлатежаСчетУчетаРасчетовПоАвансам");
	ЭлементыСчетов.Добавить("РасшифровкаПлатежаСчетУчетаРасчетовСКонтрагентомНУ");
	ЭлементыСчетов.Добавить("ПеречислениеНДССИзмененнымСрокомУплатыСчетУчетаРасчетовСКонтрагентом");
	ЭлементыСчетов.Добавить("ПеречислениеНДССИзмененнымСрокомУплатыСчетУчетаНДС");
	ЭлементыСчетов.Добавить("ПеречислениеВПодотчетСчетУчета");
	ЭлементыСчетов.Добавить("ГруппаСчетаРасчетовПрочихДоходов");
	ЭлементыСчетов.Добавить("ГруппаСчетаРасчетовПрочихДоходовНУ");
	
	СчетаУчетаВДокументах.УстановитьВидимостьСчетовУчета(Элементы, ЭлементыСчетов);
	
	ВидимостьНалоговогоУчета = Объект.УчитыватьКПН И (ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль ИЛИ Объект.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ);
	
 	ПоказыватьВДокументахСчетаУчета = СчетаУчетаВДокументахВызовСервераПовтИсп.ПользовательУправляетСчетамиУчета();
	
	Если ПоказыватьВДокументахСчетаУчета Тогда
		
		Элементы.СчетБанк.Видимость = ИспользоватьНесколькоБанковскихСчетовОрганизации;
		Элементы.СчетПеревод.Видимость = ИспользоватьНесколькоБанковскихСчетовОрганизации;
		Элементы.СчетБанкОрганизации.Видимость = ИспользоватьНесколькоБанковскихСчетовОрганизации;
	
		Если Объект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет Тогда
			Элементы.СчетБанк.Видимость = Ложь;
		КонецЕсли;
	
		Если ЕстьРасшифровкаПлатежа Тогда
			
			Если Объект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ВозвратДенежныхСредствПокупателю Тогда
				Элементы.РасшифровкаПлатежаСчетУчетаРасчетовПоАвансам.Заголовок = НСтр("ru = 'Счет возвратов'");								
			Иначе	
				Элементы.РасшифровкаПлатежаСчетУчетаРасчетовПоАвансам.Заголовок = НСтр("ru = 'Счет авансов'");
			КонецЕсли;
					
		КонецЕсли;
		
		Элементы.РасшифровкаПлатежаСчетУчетаРасчетовСКонтрагентомНУ.Видимость =
			ВидимостьНалоговогоУчета И Объект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.РасчетыПоКредитамИЗаймамСКонтрагентами;

		Если Объект.ВидОперации <> Перечисления.ВидыОперацийППИсходящее.ОплатаПоставщику
				И Объект.ВидОперации <> Перечисления.ВидыОперацийППИсходящее.ОплатаСтруктурномуПодразделению
				И Объект.ВидОперации <> Перечисления.ВидыОперацийППИсходящее.ВозвратДенежныхСредствПокупателю
				И Объект.ВидОперации <> Перечисления.ВидыОперацийППИсходящее.РасчетыПоДоходуОтРазовыхВыплатСКонтрагентами Тогда
			Элементы.РасшифровкаПлатежаСчетУчетаРасчетовПоАвансам.Видимость = Ложь;
		КонецЕсли;
		
		Элементы.ГруппаСчетаРасчетовПрочихДоходов.Видимость = (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийППИсходящее.ПеречислениеПрочихДоходов"));
		Элементы.ГруппаСчетаРасчетовПрочихДоходовНУ.Видимость = (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийППИсходящее.ПеречислениеПрочихДоходов"));
		
	КонецЕсли;

	Элементы.ГруппаАналитикаНУ.Видимость				         = ВидимостьНалоговогоУчета;
	Элементы.ГруппаПеречислениеНалоговАналитикаНУ.Видимость      = ВидимостьНалоговогоУчета;
	Элементы.ГруппаПеречислениеПрочихВыплатАналитикаНУ.Видимость = ВидимостьНалоговогоУчета;
	Элементы.СчетУчетаНУПеречислениеПрочихДоходов.Видимость 	 = ВидимостьНалоговогоУчета;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция НачатьЗаполнениеСчетовУчета(ПричиныИзменения, Объект = Неопределено, СтрокаСписка = Неопределено, КонтейнерОбъект = Неопределено, КонтейнерСтрокаСписка = Неопределено)

	// Код этой функции сформирован автоматически с помощью СчетаУчетаВДокументах.КодФункцииНачатьЗаполнениеСчетовУчета()

	ПараметрыЗаполнения = СчетаУчетаВДокументахКлиентСервер.НовыйПараметрыЗаполнения(
		"ПлатежноеПоручениеИсходящее",
		ПричиныИзменения,
		Объект,
		СтрокаСписка,
		КонтейнерОбъект,
		КонтейнерСтрокаСписка);

	// 1. Заполняемые реквизиты
	// СчетОрганизации
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("СчетОрганизации") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетБанк");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ПеречислениеВПодотчет.СчетУчета");
	КонецЕсли;

	// ВидОперации
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("ВидОперации") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетУчетаРасчетовСКонтрагентомБУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ПеречислениеНДССИзмененнымСрокомУплаты.СчетУчетаНДС");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ПеречислениеНДССИзмененнымСрокомУплаты.НДСВидОборота");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ПеречислениеНДССИзмененнымСрокомУплаты.НДСВидПоступления");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ПеречислениеНДССИзмененнымСрокомУплаты.СчетУчетаРасчетовСКонтрагентом");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ПеречислениеВПодотчет.СчетУчета");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентомБУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "РасшифровкаПлатежа.СчетУчетаРасчетовПоАвансам");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентомНУ");
	КонецЕсли;

	// СчетКонтрагента
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("СчетКонтрагента") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетУчетаРасчетовСКонтрагентомБУ");
	КонецЕсли;

	// ВключатьКомиссиюБанка
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("ВключатьКомиссиюБанка") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетУчетаРасчетовСКонтрагентомБУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоДтБУ1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоДтБУ2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоДтБУ3");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетУчетаРасчетовСКонтрагентомНУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоДтНУ1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоДтНУ2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоДтНУ3");
	КонецЕсли;

	// Организация
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Организация") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетУчетаРасчетовСКонтрагентомБУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоДтБУ1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоДтБУ2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоДтБУ3");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоДтНУ1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоДтНУ2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоДтНУ3");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ПеречислениеНДССИзмененнымСрокомУплаты.СчетУчетаНДС");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ПеречислениеНДССИзмененнымСрокомУплаты.НДСВидОборота");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ПеречислениеНДССИзмененнымСрокомУплаты.СчетУчетаРасчетовСКонтрагентом");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентомБУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "РасшифровкаПлатежа.СчетУчетаРасчетовПоАвансам");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентомНУ");
	КонецЕсли;

	// Дата
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Дата") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетУчетаРасчетовСКонтрагентомБУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоДтБУ1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоДтБУ2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоДтБУ3");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ПеречислениеНДССИзмененнымСрокомУплаты.СчетУчетаНДС");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ПеречислениеНДССИзмененнымСрокомУплаты.НДСВидОборота");
	КонецЕсли;

	// СчетУчетаРасчетовСКонтрагентомБУ
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("СчетУчетаРасчетовСКонтрагентомБУ") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоДтБУ1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоДтБУ2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоДтБУ3");
	КонецЕсли;

	// СчетУчетаРасчетовСКонтрагентомНУ
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("СчетУчетаРасчетовСКонтрагентомНУ") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоДтНУ1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоДтНУ2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоДтНУ3");
	КонецЕсли;

	// СубконтоДтБУ1
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("СубконтоДтБУ1") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоДтНУ1");
	КонецЕсли;

	// СубконтоДтБУ2
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("СубконтоДтБУ2") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоДтНУ2");
	КонецЕсли;

	// СубконтоДтБУ3
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("СубконтоДтБУ3") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоДтНУ3");
	КонецЕсли;

	// ПеречислениеНДССИзмененнымСрокомУплаты.Контрагент
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("ПеречислениеНДССИзмененнымСрокомУплаты.Контрагент") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ПеречислениеНДССИзмененнымСрокомУплаты.СчетУчетаРасчетовСКонтрагентом");
	КонецЕсли;

	// ПеречислениеНДССИзмененнымСрокомУплаты.Договор
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("ПеречислениеНДССИзмененнымСрокомУплаты.Договор") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ПеречислениеНДССИзмененнымСрокомУплаты.СчетУчетаРасчетовСКонтрагентом");
	КонецЕсли;

	// ПеречислениеНДССИзмененнымСрокомУплаты.Изменение
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("ПеречислениеНДССИзмененнымСрокомУплаты.Изменение") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ПеречислениеНДССИзмененнымСрокомУплаты.СчетУчетаНДС");
	КонецЕсли;

	// Контрагент
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Контрагент") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентомБУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "РасшифровкаПлатежа.СчетУчетаРасчетовПоАвансам");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентомНУ");
	КонецЕсли;

	// РасшифровкаПлатежа.ДоговорКонтрагента
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("РасшифровкаПлатежа.ДоговорКонтрагента") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентомБУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "РасшифровкаПлатежа.СчетУчетаРасчетовПоАвансам");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентомНУ");
	КонецЕсли;

	// РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентомБУ
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентомБУ") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "РасшифровкаПлатежа.СчетУчетаРасчетовПоАвансам");
	КонецЕсли;

	// 2. (если требуется) Передадим на сервер данные, необходимые для заполнения
	Если ПараметрыЗаполнения.Свойство("Контейнер") Тогда
		// СчетОрганизации
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("СчетОрганизации") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетОрганизации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетБанк");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчета");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
		КонецЕсли;

		// ВидОперации
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("ВидОперации") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовСКонтрагентомБУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВключатьКомиссиюБанка");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "НДСВидОборота");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "НДСВидПоступления");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовСКонтрагентом");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Договор");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчета");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетОрганизации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовСКонтрагентомБУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ДоговорКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовПоАвансам");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовСКонтрагентомНУ");
		КонецЕсли;

		// СчетКонтрагента
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("СчетКонтрагента") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовСКонтрагентомБУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВключатьКомиссиюБанка");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
		КонецЕсли;

		// ВключатьКомиссиюБанка
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("ВключатьКомиссиюБанка") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВключатьКомиссиюБанка");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовСКонтрагентомБУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДтБУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДтБУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДтБУ3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовСКонтрагентомНУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДтНУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДтНУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДтНУ3");
		КонецЕсли;

		// Организация
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Организация") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовСКонтрагентомБУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВключатьКомиссиюБанка");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДтБУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДтБУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДтБУ3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДтНУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовСКонтрагентомНУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДтНУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДтНУ3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "НДСВидОборота");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовСКонтрагентом");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Договор");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовСКонтрагентомБУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ДоговорКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовПоАвансам");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовСКонтрагентомНУ");
		КонецЕсли;

		// Дата
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Дата") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовСКонтрагентомБУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВключатьКомиссиюБанка");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДтБУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДтБУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДтБУ3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "НДСВидОборота");
		КонецЕсли;

		// СчетУчетаРасчетовСКонтрагентомБУ
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("СчетУчетаРасчетовСКонтрагентомБУ") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовСКонтрагентомБУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДтБУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВключатьКомиссиюБанка");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДтБУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДтБУ3");
		КонецЕсли;

		// СчетУчетаРасчетовСКонтрагентомНУ
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("СчетУчетаРасчетовСКонтрагентомНУ") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовСКонтрагентомНУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДтНУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВключатьКомиссиюБанка");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДтБУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДтНУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДтБУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДтНУ3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДтБУ3");
		КонецЕсли;

		// СубконтоДтБУ1
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("СубконтоДтБУ1") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДтБУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДтНУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовСКонтрагентомНУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВключатьКомиссиюБанка");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
		КонецЕсли;

		// СубконтоДтБУ2
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("СубконтоДтБУ2") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДтБУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДтНУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовСКонтрагентомНУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВключатьКомиссиюБанка");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
		КонецЕсли;

		// СубконтоДтБУ3
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("СубконтоДтБУ3") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДтБУ3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДтНУ3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовСКонтрагентомНУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВключатьКомиссиюБанка");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
		КонецЕсли;

		// ПеречислениеНДССИзмененнымСрокомУплаты.Контрагент
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("ПеречислениеНДССИзмененнымСрокомУплаты.Контрагент") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовСКонтрагентом");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Договор");
		КонецЕсли;

		// ПеречислениеНДССИзмененнымСрокомУплаты.Договор
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("ПеречислениеНДССИзмененнымСрокомУплаты.Договор") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Договор");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовСКонтрагентом");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Контрагент");
		КонецЕсли;

		// Контрагент
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Контрагент") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовСКонтрагентомБУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ДоговорКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовПоАвансам");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовСКонтрагентомНУ");
		КонецЕсли;

		// РасшифровкаПлатежа.ДоговорКонтрагента
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("РасшифровкаПлатежа.ДоговорКонтрагента") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ДоговорКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовСКонтрагентомБУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовПоАвансам");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовСКонтрагентомНУ");
		КонецЕсли;

		// РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентомБУ
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентомБУ") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовСКонтрагентомБУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовПоАвансам");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ДоговорКонтрагента");
		КонецЕсли;

	КонецЕсли; // Нужно передавать на сервер данные заполнения
	
	Возврат ПараметрыЗаполнения;

КонецФункции

&НаСервере
Процедура ЗаполнитьСчетаУчета(ПричиныИзмененияСчетовУчета, ИмяРеквизита)
	
	Если Не СчетаУчетаВДокументахКлиентСервер.МожноНачатьЗаполнениеСчетовУчета(ИмяРеквизита, ПричиныИзмененияСчетовУчета) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗаполнения = НачатьЗаполнениеСчетовУчета(ПричиныИзмененияСчетовУчета, Объект);
	ИзмененныеЗначения = СчетаУчетаВДокументах.ЗаполнитьОбъектПриИзменении(ПараметрыЗаполнения);
	
	Если ЗначениеЗаполнено(ИзмененныеЗначения)
		И СчетаУчетаВДокументахВызовСервераПовтИсп.ПользовательУправляетСчетамиУчета() Тогда
		ПоказатьСообщениеОЗаполненииСчетовУчета(Объект.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПоказатьСообщениеОЗаполненииСчетовУчета(ОбъектСсылка)
	
	ТекстСообщения = НСтр("ru = 'Счета учета изменены в соответствии со значениями по умолчанию.'");
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ОбъектСсылка, , "Объект");
	
КонецПроцедуры

&НаСервере
Процедура ПеречислениеНДССИзмененнымСрокомУплатыКонтрагентПриИзмененииНаСервере(НомерСтрокаПлатежа)
	
	СтрокаПлатеж = Объект.ПеречислениеНДССИзмененнымСрокомУплаты.НайтиПоИдентификатору(НомерСтрокаПлатежа);
	
	Если СтрокаПлатеж = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗаполненияСчетовУчета = НачатьЗаполнениеСчетовУчета(
		"ПеречислениеНДССИзмененнымСрокомУплаты.Контрагент",
		Объект,
		СтрокаПлатеж);
		
	Изменения = СчетаУчетаВДокументах.ЗаполнитьРеквизитыПриИзменении(
		Документы.ПлатежноеПоручениеИсходящее,
		ПараметрыЗаполненияСчетовУчета.КЗаполнению,
		Объект,
		"ПеречислениеНДССИзмененнымСрокомУплаты",
		СтрокаПлатеж);
	ЗаполнитьЗначенияСвойств(СтрокаПлатеж, Изменения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПеречислениеНДССИзмененнымСрокомУплатыКонтрагентПриИзменении(Элемент)
	
	СтрокаПлатеж = Элементы.ПеречислениеНДССИзмененнымСрокомУплаты.ТекущиеДанные;
	
	ПеречислениеНДССИзмененнымСрокомУплатыКонтрагентПриИзмененииНаСервере(СтрокаПлатеж.ПолучитьИдентификатор());
	
КонецПроцедуры

&НаСервере
Процедура ПеречислениеНДССИзмененнымСрокомУплатыДоговорПриИзмененииНаСервере(НомерСтрокаПлатежа)
	
	СтрокаПлатеж = Объект.ПеречислениеНДССИзмененнымСрокомУплаты.НайтиПоИдентификатору(НомерСтрокаПлатежа);
	
	Если СтрокаПлатеж = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗаполненияСчетовУчета = НачатьЗаполнениеСчетовУчета(
		"ПеречислениеНДССИзмененнымСрокомУплаты.Договор",
		Объект,
		СтрокаПлатеж);
		
	Изменения = СчетаУчетаВДокументах.ЗаполнитьРеквизитыПриИзменении(
		Документы.ПлатежноеПоручениеИсходящее,
		ПараметрыЗаполненияСчетовУчета.КЗаполнению,
		Объект,
		"ПеречислениеНДССИзмененнымСрокомУплаты",
		СтрокаПлатеж);
	ЗаполнитьЗначенияСвойств(СтрокаПлатеж, Изменения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПеречислениеНДССИзмененнымСрокомУплатыДоговорПриИзменении(Элемент)
	
	СтрокаПлатеж = Элементы.ПеречислениеНДССИзмененнымСрокомУплаты.ТекущиеДанные;
	
	ПеречислениеНДССИзмененнымСрокомУплатыДоговорПриИзмененииНаСервере(СтрокаПлатеж.ПолучитьИдентификатор());
	
КонецПроцедуры

&НаСервере
Процедура ПеречислениеНДССИзмененнымСрокомУплатыПриИзмененииНаСервере(НомерСтрокаПлатежа)
	
	СтрокаПлатеж = Объект.ПеречислениеНДССИзмененнымСрокомУплаты.НайтиПоИдентификатору(НомерСтрокаПлатежа);
	
	Если СтрокаПлатеж = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗаполненияСчетовУчета = НачатьЗаполнениеСчетовУчета(
		"ПеречислениеНДССИзмененнымСрокомУплаты.Изменение",
		Объект,
		СтрокаПлатеж);
		
	Изменения = СчетаУчетаВДокументах.ЗаполнитьРеквизитыПриИзменении(
		Документы.ПлатежноеПоручениеИсходящее,
		ПараметрыЗаполненияСчетовУчета.КЗаполнению,
		Объект,
		"ПеречислениеНДССИзмененнымСрокомУплаты",
		СтрокаПлатеж);
	ЗаполнитьЗначенияСвойств(СтрокаПлатеж, Изменения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаПриИзмененииДокументаВТабЧасти(Результат, Параметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;	
	КонецЕсли;
	
	ЗаполнитьСчетаПоСпособуОтражения(ТекущийВидПрочихВыплат);
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьСчетаУчетаРасчетов()
	
	// БУ
	Объект.СчетУчетаРасчетовСКонтрагентомБУ = ПланыСчетов.Типовой.ПустаяСсылка(); 
	Объект.СубконтоДтБУ1 = ПланыВидовХарактеристик.ВидыСубконтоТиповые.ПустаяСсылка();
	Объект.СубконтоДтБУ2 = ПланыВидовХарактеристик.ВидыСубконтоТиповые.ПустаяСсылка();
	Объект.СубконтоДтБУ3 = ПланыВидовХарактеристик.ВидыСубконтоТиповые.ПустаяСсылка();
    // НУ
	Объект.СчетУчетаРасчетовСКонтрагентомНУ = ПланыСчетов.Налоговый.ПустаяСсылка(); 
	Объект.СубконтоДтНУ1 = ПланыВидовХарактеристик.ВидыСубконтоТиповые.ПустаяСсылка();
	Объект.СубконтоДтНУ2 = ПланыВидовХарактеристик.ВидыСубконтоТиповые.ПустаяСсылка();
	Объект.СубконтоДтНУ3 = ПланыВидовХарактеристик.ВидыСубконтоТиповые.ПустаяСсылка();		
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура СчетУчетаПеречислениеПрочихДоходовПриИзменении(Элемент)
	
	Объект.СчетУчетаРасчетовСКонтрагентомНУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", Объект.СчетУчетаРасчетовСКонтрагентомБУ));
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ПеречислениеПрочихДоходов

&НаКлиенте
Процедура ПеречислениеПрочихДоходовПриИзменении(Элемент)
	
	РассчитатьСуммуДокумента(ЭтаФорма);
	РассчитатьСуммуКомиссии(ЭтаФорма);
	ОбновитьПодвал(ЭтаФорма);
	СформироватьНазначениеПлатежа();
	
КонецПроцедуры

&НаКлиенте
Процедура ПеречислениеПрочихДоходовПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		РассчитатьСуммуДокумента(ЭтаФорма);
		РассчитатьСуммуКомиссии(ЭтаФорма);
		ОбновитьПодвал(ЭтаФорма);
		СформироватьНазначениеПлатежа();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПеречислениеПрочихДоходовПослеУдаления(Элемент)
	
	РассчитатьСуммуДокумента(ЭтаФорма);
	РассчитатьСуммуКомиссии(ЭтаФорма);
	ОбновитьПодвал(ЭтаФорма);
	СформироватьНазначениеПлатежа();
	
КонецПроцедуры 

&НаКлиенте
Процедура ПеречислениеПрочихДоходовДокументПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПеречислениеПрочихДоходов.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Ложь;
	
	ПроверитьДублированиеДокументовПеречисления(Объект, "ПеречислениеПрочихДоходов", "Документ", ТекущиеДанные.Документ, ТекущиеДанные.НомерСтроки - 1, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Документ) Тогда
		
		СтруктураДанных = ПолучитьСтруктуруПриИзмененииДокументаПрочихДоходовНаСервере(ТекущиеДанные.Документ);
		ТекущиеДанные.СуммаКПеречислению = СтруктураДанных.Сумма;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСтруктуруПриИзмененииДокументаПрочихДоходовНаСервере(Документ)
	
	СтруктураВозврата = Новый Структура("Сумма", 0);
	
	СтруктураВозврата.Сумма = ПолучитьСуммуДокумента("ВедомостьПрочихДоходов.Выплаты", Документ, "СуммаКВыплате");
	
	Возврат СтруктураВозврата;
	
КонецФункции
