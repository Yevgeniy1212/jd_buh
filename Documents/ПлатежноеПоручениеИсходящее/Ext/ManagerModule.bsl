#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

#Область СчетаУчета

Процедура УстановитьПравилаЗаполненияСчетовУчета(Правила) Экспорт
	
	// Шапка

	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "", "СчетБанк", "БезналичныеДеньги");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "СчетОрганизации", "СчетОрганизации");
	
	//СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "", "СтатьяДвиженияДенежныхСредств", "СтатьиДДС_РозничнаяВыручка");
	
	// Для видов операций:
	// ПеречислениеЗаработнойПлаты,
	// ПеречислениеПенсионныхВзносов,
	// ПеречислениеСоциальныхОтчислений,
	// ПеречислениеПоИсполнительнымЛистам
	// счета (СчетДт) определяются при проведении
	// (СчетКт = СчетБанк)
	
	// перевод на другой счет
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "", "СчетУчетаРасчетовСКонтрагентомБУ", "БезналичныеДеньги");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "СчетОрганизации", "СчетКонтрагента");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ПереводНаДругойСчет");
	
	// комиссия банка
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "", "СчетУчетаРасчетовСКонтрагентомБУ", "РасходыУслугиБанка");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ЕстьКомиссияБанка");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоДтБУ1", "СубконтоЗатрат1");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоДтБУ2", "СубконтоЗатрат2");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоДтБУ3", "СубконтоЗатрат3");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "", "СчетУчетаРасчетовСКонтрагентомНУ", "РасходыУслугиБанкаНУ");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ЕстьКомиссияБанка");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеПроверкиЗаполнения(Правила, "ПлательщикНалогаНаПрибыль");
	
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоДтНУ1", "СубконтоЗатрат1");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Основание", "СубконтоДтБУ1");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоДтНУ2", "СубконтоЗатрат2");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Основание", "СубконтоДтБУ2");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоДтНУ3", "СубконтоЗатрат3");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Основание", "СубконтоДтБУ3");
	
	// перечисление НДС с измененным сроком уплаты
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "ПеречислениеНДССИзмененнымСрокомУплаты", "СчетУчетаНДС", "ПоступлениеНДС");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ПеречислениеНДССИзмененнымСрокомУплаты");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "ПеречислениеНДССИзмененнымСрокомУплаты", "НДСВидОборота", "ВидОборотаНДСПредъявленного");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "СтавкаНДС", "СтавкаНДС");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ПеречислениеНДССИзмененнымСрокомУплаты");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "ПеречислениеНДССИзмененнымСрокомУплаты", "НДСВидПоступления", "ВидПоступленияНДСПредъявленного");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "СтавкаНДС", "СтавкаНДС");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ПеречислениеНДССИзмененнымСрокомУплаты");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "ПеречислениеНДССИзмененнымСрокомУплаты", "СчетУчетаРасчетовСКонтрагентом", "РасчетыСПоставщиком");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Контрагент", "Контрагент");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "ДоговорКонтрагента", "Договор");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ПеречислениеНДССИзмененнымСрокомУплаты");
	
	// перечисление подотчетнику
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "ПеречислениеВПодотчет", "СчетУчета", "Подотчет");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ПеречислениеДенежныхСредствПодотчетнику");
	
	// возврат ДС покупателю
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "РасшифровкаПлатежа", "СчетУчетаРасчетовСКонтрагентомБУ", "РасчетыСПокупателем");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "ДоговорКонтрагента", "ДоговорКонтрагента");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ВозвратДенежныхСредствПокупателю");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "РасшифровкаПлатежа", "СчетУчетаРасчетовПоАвансам", "РасчетыПоПретензиям");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "ДоговорКонтрагента", "ДоговорКонтрагента");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ВозвратДенежныхСредствПокупателю");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "РасшифровкаПлатежа", "СчетУчетаРасчетовСКонтрагентомНУ", "РасчетыСПокупателемНУ");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "ДоговорКонтрагента", "ДоговорКонтрагента");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ВозвратДенежныхСредствПокупателю");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеПроверкиЗаполнения(Правила, "ПлательщикНалогаНаПрибыль");
	
	// прочие расчеты с контрагентом
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "РасшифровкаПлатежа", "СчетУчетаРасчетовСКонтрагентомБУ", "РасчетыСПоставщикомПрочие");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ПрочиеРасчетыСКонтрагентами");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СчетУчетаРасчетовПоАвансам", "ПустойСчет");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ПрочиеРасчетыСКонтрагентами");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "РасшифровкаПлатежа", "СчетУчетаРасчетовСКонтрагентомНУ", "РасчетыСПоставщикомПрочиеНУ");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ПрочиеРасчетыСКонтрагентами");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеПроверкиЗаполнения(Правила, "ПлательщикНалогаНаПрибыль");

	// расчеты по займам и кредитам
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "РасшифровкаПлатежа", "СчетУчетаРасчетовСКонтрагентомБУ", "ЗаймыКредитыКВыплате");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ЕстьРасшифровкаПлатежа");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ЕстьРасчетыПоКредитам");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "РасшифровкаПлатежа", "СчетУчетаРасчетовСКонтрагентомНУ", "ЗаймыКредитыКВыплатеНУ");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ЕстьРасшифровкаПлатежа");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ЕстьРасчетыПоКредитам");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеПроверкиЗаполнения(Правила, "ПлательщикНалогаНаПрибыль");
	
	// прочие виды операций
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "РасшифровкаПлатежа", "СчетУчетаРасчетовСКонтрагентомБУ", "РасчетыСПоставщиком");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "ДоговорКонтрагента", "ДоговорКонтрагента");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ЕстьРасшифровкаПлатежа");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "ВозвратДенежныхСредствПокупателю");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "ПрочиеРасчетыСКонтрагентами");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "ЕстьРасчетыПоКредитам");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "ЕстьПеречислениеПрочихДоходов");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "РасшифровкаПлатежа", "СчетУчетаРасчетовПоАвансам", "АвансыПоставщику");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "ДоговорКонтрагента", "ДоговорКонтрагента");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ЕстьРасшифровкаПлатежа");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "ВозвратДенежныхСредствПокупателю");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "ПрочиеРасчетыСКонтрагентами");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "ЕстьРасчетыПоКредитам");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "РасшифровкаПлатежа", "СчетУчетаРасчетовСКонтрагентомНУ", "РасчетыСПоставщикомНУ");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "ДоговорКонтрагента", "ДоговорКонтрагента");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ЕстьРасшифровкаПлатежа");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "ВозвратДенежныхСредствПокупателю");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "ПрочиеРасчетыСКонтрагентами");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "ЕстьРасчетыПоКредитам");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "ЕстьПеречислениеПрочихДоходов");
	
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "Дата");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "Организация");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "СтруктурноеПодразделениеПолучатель");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "СтруктурноеПодразделениеОтправитель");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "СчетОрганизации");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "Контрагент");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "УчитыватьКПН");
	
	Для Каждого ИмяВидаОперации Из ВидыОперацийСчетаУчета() Цикл
		СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеДополнительныхДанных(Правила, ИмяВидаОперации, "ВидОперации");
	КонецЦикла;
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеДополнительныхДанных(Правила, "ЕстьРасшифровкаПлатежа", "ВидОперации");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеДополнительныхДанных(Правила, "ЕстьРасчетыПоКредитам" , "ВидОперации");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеДополнительныхДанных(Правила, "ЕстьКомиссияБанка"     , "ВключатьКомиссиюБанка");
	
	// прочие доходы
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "ДокументОснование");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеДополнительныхДанных(Правила, "ЕстьПеречислениеПрочихДоходов", "ВидОперации");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "", "СчетУчетаРасчетовСКонтрагентомБУ", "РасчетыСГПХ");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ЕстьПеречислениеПрочихДоходов");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "ЕстьРасшифровкаПлатежа");
 	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "", "СчетУчетаРасчетовСКонтрагентомНУ", "РасчетыСГПХНУ");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ЕстьПеречислениеПрочихДоходов");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "ЕстьРасшифровкаПлатежа");

КонецПроцедуры

Процедура ДополнитьДанныеЗаполненияСчетовУчета(ДанныеЗаполнения) Экспорт
	
	Для каждого ИмяВидаОперации Из ВидыОперацийСчетаУчета() Цикл
		Если ДанныеЗаполнения.Свойство(ИмяВидаОперации) Тогда
			ДанныеЗаполнения[ИмяВидаОперации] = (ДанныеЗаполнения.ВидОперации = Перечисления.ВидыОперацийППИсходящее[ИмяВидаОперации]);
		КонецЕсли;
	КонецЦикла;
	
	Если ДанныеЗаполнения.Свойство("ЕстьРасшифровкаПлатежа") Тогда
		
		ДанныеЗаполнения.ЕстьРасшифровкаПлатежа = ЕстьРасшифровкаПлатежа(ДанныеЗаполнения.ВидОперации);
		
	КонецЕсли;
	
	Если ДанныеЗаполнения.Свойство("ЕстьРасчетыПоКредитам") Тогда
		
		ДанныеЗаполнения.ЕстьРасчетыПоКредитам = ДанныеЗаполнения.ВидОперации = Перечисления.ВидыОперацийППИсходящее.РасчетыПоКредитамИЗаймамСКонтрагентами;
		
	КонецЕсли;
	
	Если ДанныеЗаполнения.Свойство("ЕстьКомиссияБанка") Тогда
		
		ДанныеЗаполнения.ЕстьКомиссияБанка = ДанныеЗаполнения.ВключатьКомиссиюБанка;
		
	КонецЕсли;
	
	Если ДанныеЗаполнения.Свойство("ЕстьПеречислениеПрочихДоходов") Тогда
		
		ДанныеЗаполнения.ЕстьПеречислениеПрочихДоходов = ДанныеЗаполнения.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеПрочихДоходов
														И ЗначениеЗаполнено(ДанныеЗаполнения.ДокументОснование) И (Тип("ДокументСсылка.ВедомостьПрочихДоходов") = ТипЗнч(ДанныеЗаполнения.ДокументОснование));
		
	КонецЕсли;
	
КонецПроцедуры

Функция ВидыОперацийСчетаУчета()
	
	ВидыОпераций = Новый Массив;
	ВидыОпераций.Добавить("ОплатаПоставщику");
	ВидыОпераций.Добавить("ВозвратДенежныхСредствПокупателю");
	//ВидыОпераций.Добавить("ПеречислениеНалога");
	ВидыОпераций.Добавить("ПеречислениеЗаработнойПлаты");
	ВидыОпераций.Добавить("РасчетыПоКредитамИЗаймамСКонтрагентами");
	ВидыОпераций.Добавить("ПереводНаДругойСчет");
	ВидыОпераций.Добавить("ПрочиеРасчетыСКонтрагентами");
	ВидыОпераций.Добавить("ПеречислениеПенсионныхВзносов");
	ВидыОпераций.Добавить("ПеречислениеСоциальныхОтчислений");
	ВидыОпераций.Добавить("ПеречислениеПоИсполнительнымЛистам");
	ВидыОпераций.Добавить("ПеречислениеНДССИзмененнымСрокомУплаты");
	ВидыОпераций.Добавить("ОплатаСтруктурномуПодразделению");
	ВидыОпераций.Добавить("ПеречислениеДенежныхСредствПодотчетнику");
	ВидыОпераций.Добавить("РасчетыПоДоходуОтРазовыхВыплатСКонтрагентами");
	ВидыОпераций.Добавить("ПеречислениеПрочихДоходов");
	//ВидыОпераций.Добавить("ПрочееСписаниеБезналичныхДенежныхСредств");
	
	Возврат Новый ФиксированныйМассив(ВидыОпераций);
	
КонецФункции

#Область УстаревшиеПроцедурыИФункции

Процедура ЗаполнитьСчетаБанка(СчетОрганизации, СчетБанк) Экспорт
	
	Если НЕ СчетОрганизации.Пустая() Тогда
		СчетУчетаБанк = ПроцедурыБухгалтерскогоУчета.ПолучитьСчетУчетаДенежныхСредств(СчетОрганизации, СчетБанк.Пустая()).СчетУчетаБУ;
		Если ЗначениеЗаполнено(СчетУчетаБанк) Тогда
			СчетБанк = СчетУчетаБанк;
		КонецЕсли;	
	КонецЕсли;    	
	
КонецПроцедуры

Процедура ЗаполнитьСчетаРасчетовСКонтрагентом(Объект, СтрокаПлатеж) Экспорт
	
	Если  НЕ (Объект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.РасчетыПоКредитамИЗаймамСКонтрагентами) Тогда
		
		СчетаУчета = УправлениеВзаиморасчетамиСервер.ПолучитьСчетаРасчетовСКонтрагентом(Объект.Организация, Объект.Контрагент, СтрокаПлатеж.ДоговорКонтрагента);
		
		Если Объект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ВозвратДенежныхСредствПокупателю Тогда			
			
			СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентомБУ    = СчетаУчета.СчетРасчетовПокупателя;
			СтрокаПлатеж.СчетУчетаРасчетовПоАвансам          = СчетаУчета.СчетВозвратовПокупателя;			
			
		ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПрочиеРасчетыСКонтрагентами Тогда
		
			СтрокаПлатеж.СчетУчетаРасчетовПоАвансам          = ПланыСчетов.Типовой.ПустаяСсылка();
			
		Иначе
			
			СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентомБУ    = СчетаУчета.СчетРасчетов;
			СтрокаПлатеж.СчетУчетаРасчетовПоАвансам          = СчетаУчета.СчетАвансов;
			
		КонецЕсли;
		
	КонецЕсли;   	
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

Функция ЕстьРасшифровкаПлатежа(ВидОперации) Экспорт
	
	ЕстьРасшифровка = (ВидОперации = Перечисления.ВидыОперацийППИсходящее.ОплатаПоставщику
		ИЛИ ВидОперации = Перечисления.ВидыОперацийППИсходящее.ВозвратДенежныхСредствПокупателю
		ИЛИ ВидОперации = Перечисления.ВидыОперацийППИсходящее.РасчетыПоКредитамИЗаймамСКонтрагентами
		ИЛИ ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПрочиеРасчетыСКонтрагентами
		ИЛИ ВидОперации = Перечисления.ВидыОперацийППИсходящее.ОплатаСтруктурномуПодразделению
		ИЛИ ВидОперации = Перечисления.ВидыОперацийППИсходящее.РасчетыПоДоходуОтРазовыхВыплатСКонтрагентами);
	
	Возврат ЕстьРасшифровка;
	
КонецФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// См. ЗапретРедактированияРеквизитовОбъектовПереопределяемый.ПриОпределенииОбъектовСЗаблокированнымиРеквизитами.
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт
	
	БлокируемыеРеквизиты = Новый Массив;
	
	Если ОбщегоНазначенияБККлиентСервер.ЭтоПростаяВерсияКонфигурации() Тогда
		БлокируемыеРеквизиты.Добавить("Дата");
		БлокируемыеРеквизиты.Добавить("Номер");
		БлокируемыеРеквизиты.Добавить("ВалютаДокумента");
		БлокируемыеРеквизиты.Добавить("ДокументОснование; ДокументОснование"); //сделано специально для формы Дполнительно
		БлокируемыеРеквизиты.Добавить("ВидОперации");
		БлокируемыеРеквизиты.Добавить("Организация; СтруктурноеПодразделениеОрганизация");
		БлокируемыеРеквизиты.Добавить("СуммаДокумента");
		БлокируемыеРеквизиты.Добавить("СуммаНДС");
		БлокируемыеРеквизиты.Добавить("ДоговорКонтрагента");
		БлокируемыеРеквизиты.Добавить("Контрагент");
		БлокируемыеРеквизиты.Добавить("Оплачено");
		БлокируемыеРеквизиты.Добавить("ДатаВыписки");
		БлокируемыеРеквизиты.Добавить("СуммаКомиссии; СуммаКомиссии");  //сделано специально для формы комиссиибанка
		БлокируемыеРеквизиты.Добавить("ВключатьКомиссиюБанка; ВключатьКомиссиюБанка"); //сделано специально для формы комиссиибанка
		БлокируемыеРеквизиты.Добавить("ПроцентКомиссии; ПроцентКомиссии ");  //сделано специально для формы комиссиибанка
		БлокируемыеРеквизиты.Добавить("СчетОрганизации");		
		БлокируемыеРеквизиты.Добавить("СтруктурноеПодразделениеПолучатель; СтруктурноеПодразделениеОрганизацияОтправительПрочее, СтруктурноеПодразделениеОрганизацияПолучательПрочее,СтруктурноеПодразделениеОрганизацияОтправитель, СтруктурноеПодразделениеОрганизацияПолучатель");
		БлокируемыеРеквизиты.Добавить("СтруктурноеПодразделениеОтправитель");
		БлокируемыеРеквизиты.Добавить("СчетКонтрагента");
		БлокируемыеРеквизиты.Добавить("ВидНалога");
		
		// таб. часть Расшифровка платежа
		БлокируемыеРеквизиты.Добавить("РасшифровкаПлатежа.Контрагент; РасшифровкаПлатежаКонтрагент");
		БлокируемыеРеквизиты.Добавить("РасшифровкаПлатежа.ДоговорКонтрагента; РасшифровкаПлатежаДоговорКонтрагента");
		БлокируемыеРеквизиты.Добавить("РасшифровкаПлатежа.Сделка; РасшифровкаПлатежаСделка");
		БлокируемыеРеквизиты.Добавить("РасшифровкаПлатежа.СуммаПлатежа; РасшифровкаПлатежаСуммаПлатежа");
		БлокируемыеРеквизиты.Добавить("РасшифровкаПлатежа.СуммаНДС; РасшифровкаПлатежаСуммаНДС");
		БлокируемыеРеквизиты.Добавить("РасшифровкаПлатежа.СтавкаНДС; РасшифровкаПлатежаСтавкаНДС");
		БлокируемыеРеквизиты.Добавить("РасшифровкаПлатежа.КратностьВзаиморасчетов; РасшифровкаПлатежаКратностьВзаиморасчетов");
		БлокируемыеРеквизиты.Добавить("РасшифровкаПлатежа.СуммаВзаиморасчетов; РасшифровкаПлатежаСуммаВзаиморасчетов");
		БлокируемыеРеквизиты.Добавить("РасшифровкаПлатежа.КурсВзаиморасчетов; РасшифровкаПлатежаКурсВзаиморасчетов");
		
		// таб. часть ПеречислениеЗаработнойПлаты
		БлокируемыеРеквизиты.Добавить("ПеречислениеЗаработнойПлаты");
		БлокируемыеРеквизиты.Добавить("ПеречислениеЗаработнойПлаты.СуммаПлатежа; ПеречислениеЗаработнойПлатыСуммаПлатежа");
		БлокируемыеРеквизиты.Добавить("ПеречислениеЗаработнойПлаты.Физлицо; ПеречислениеЗаработнойПлатыФизлицо");
		
		// таб. часть ПеречислениеПенсионныхВзносов
		БлокируемыеРеквизиты.Добавить("ПеречислениеПенсионныхВзносов");
		БлокируемыеРеквизиты.Добавить("ПеречислениеПенсионныхВзносов.СуммаКПеречислению; ПеречислениеПенсионныхВзносовСуммаКПеречислению");
		БлокируемыеРеквизиты.Добавить("ПеречислениеПенсионныхВзносов.Документ; ПеречислениеПенсионныхВзносовДокумент");
		
		// таб. часть ПеречислениеСоциальныхОтчислений
		БлокируемыеРеквизиты.Добавить("ПеречислениеСоциальныхОтчислений");
		БлокируемыеРеквизиты.Добавить("ПеречислениеСоциальныхОтчислений.СуммаКПеречислению; ПеречислениеСоциальныхОтчисленийСуммаКПеречислению");
		БлокируемыеРеквизиты.Добавить("ПеречислениеСоциальныхОтчислений.Документ; ПеречислениеСоциальныхОтчисленийДокумент");
		
		// таб. часть ПеречислениеПоИсполнительнымЛистам
		БлокируемыеРеквизиты.Добавить("ПеречислениеПоИсполнительнымЛистам");
		БлокируемыеРеквизиты.Добавить("ПеречислениеПоИсполнительнымЛистам.СуммаКПеречислению; ПеречислениеПоИсполнительнымЛистамСуммаКПеречислению");
		БлокируемыеРеквизиты.Добавить("ПеречислениеПоИсполнительнымЛистам.Документ; ПеречислениеПоИсполнительнымЛистамДокумент");
		БлокируемыеРеквизиты.Добавить("ПеречислениеПоИсполнительнымЛистам.СуммаСборов; ПеречислениеПоИсполнительнымЛистамСуммаСборов");
		БлокируемыеРеквизиты.Добавить("ПеречислениеПоИсполнительнымЛистам.СуммаПлатежа; ПеречислениеПоИсполнительнымЛистамСуммаПлатежа");
		
		// таб. часть ПеречислениеНДССИзмененнымСрокомУплаты
		БлокируемыеРеквизиты.Добавить("ПеречислениеНДССИзмененнымСрокомУплаты");
		БлокируемыеРеквизиты.Добавить("ПеречислениеНДССИзмененнымСрокомУплаты.Договор; ПеречислениеНДССИзмененнымСрокомУплатыДоговор");
		БлокируемыеРеквизиты.Добавить("ПеречислениеНДССИзмененнымСрокомУплаты.Контрагент; ПеречислениеНДССИзмененнымСрокомУплатыКонтрагент");
		БлокируемыеРеквизиты.Добавить("ПеречислениеНДССИзмененнымСрокомУплаты.СтавкаНДС; ПеречислениеНДССИзмененнымСрокомУплатыСтавкаНДС");
		БлокируемыеРеквизиты.Добавить("ПеречислениеНДССИзмененнымСрокомУплаты.СуммаПлатежа; ПеречислениеНДССИзмененнымСрокомУплатыСуммаПлатежа");
		
		// таб. часть ПеречислениеВПодотчет
		БлокируемыеРеквизиты.Добавить("ПеречислениеВПодотчет");
		БлокируемыеРеквизиты.Добавить("ПеречислениеВПодотчет.ФизЛицо; ПеречислениеВПодотчетФизЛицо");
		БлокируемыеРеквизиты.Добавить("ПеречислениеВПодотчет.СуммаПлатежа; ПеречислениеВПодотчетСуммаПлатежа");
		БлокируемыеРеквизиты.Добавить("ПеречислениеВПодотчет.НомерКартСчета; ПеречислениеВПодотчетНомерКартСчета");
							
	КонецЕсли;
	
	Возврат БлокируемыеРеквизиты;
	
КонецФункции
// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура ЗаполнитьПоДокументуОснованию(Объект, ДокументОснование) Экспорт
	
	СтруктураПараметровЗаполнения = Неопределено;
	Если ТипЗнч(ДокументОснование) = Тип("Структура") ТОгда
		СтруктураПараметровЗаполнения = ДокументОснование;
		ДокументОснование = СтруктураПараметровЗаполнения.ДокументОснования;
	КонецЕсли;	
	
	ВидДокументаОснования       = ДокументОснование.Метаданные().Имя;
	
	Если ВидДокументаОснования = "РегистрацияНДСЗаНерезидента" и ДокументОснование.ВидОперации <> Перечисления.ВидыОперацийРегистрацииНДСЗаНерезидента.НачислениеНДС Тогда
		Возврат;
	КонецЕсли;	
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	Объект.ВалютаДокумента = ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	/// Заполним реквизиты из стандартного набора по документу основанию.
	ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(Объект, ДокументОснование);
	
	Объект.Дата = ОбщегоНазначения.ТекущаяДатаПользователя();
			
	ПараметрыДокументаОснования = ОбщегоНазначенияБК.СформироватьСтруктуруШапкиДокумента(ДокументОснование);  
			
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.СчетНаОплатуПоставщика") Тогда
		ПараметрыДокументаОснования.Вставить("СчетУчетаРасчетовСКонтрагентом", ПланыСчетов.Типовой.ПустаяСсылка());
		ПараметрыДокументаОснования.Вставить("СчетУчетаРасчетовПоАвансам",     ПланыСчетов.Типовой.ПустаяСсылка());
	КонецЕсли;
	
	Объект.ДокументОснование    = ДокументОснование;
	
	Если ВидДокументаОснования = "ПоступлениеТоваровУслуг"
		ИЛИ ВидДокументаОснования = "ПоступлениеДопРасходов" 
		ИЛИ ВидДокументаОснования = "ПоступлениеНМА"
		ИЛИ	ВидДокументаОснования = "ВозвратТоваровОтПокупателя" 
		ИЛИ ВидДокументаОснования = "ПоступлениеИзПереработки"
		ИЛИ ВидДокументаОснования = "СчетНаОплатуПоставщика" Тогда
		
		Если ВидДокументаОснования = "ВозвратТоваровОтПокупателя"  Тогда
			Объект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ВозвратДенежныхСредствПокупателю;
		ИначеЕсли ВидДокументаОснования = "ПоступлениеТоваровУслуг" И ДокументОснование.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ОтСтруктурногоПодразделения Тогда
			Объект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ОплатаСтруктурномуПодразделению;
		Иначе
			Объект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ОплатаПоставщику;
		КонецЕсли; 
		
		Объект.Контрагент	  = ПараметрыДокументаОснования.Контрагент;
		ДоговорКонтрагента 	  = ПараметрыДокументаОснования.ДоговорКонтрагента;
		ВидРасчетовПоДоговору = УправлениеВзаиморасчетамиСервер.ОпределениеВидаРасчетовПоПараметрамДоговора(ДоговорКонтрагента, ВалютаРегламентированногоУчета);
		
		Если ВидРасчетовПоДоговору = Перечисления.ВидыРасчетовПоДоговорам.РасчетыВИностраннойВалюте Тогда
			Объект.ВалютаДокумента = ПараметрыДокументаОснования.ВалютаВзаиморасчетов;
		КонецЕсли;
		
		СтруктураКурсаВзаиморасчетов = ОбщегоНазначенияБК.ПолучитьКурсВалюты(ДоговорКонтрагента.ВалютаВзаиморасчетов, Объект.Дата);
		
		ПараметрыДокументаОснования.Свойство("КодНазначенияПлатежа", Объект.КодНазначенияПлатежа);
		
		ТаблицаПлатежей = Объект.РасшифровкаПлатежа.Выгрузить();
		
		СуммаДокументаОснования = УчетНДСИАкциза.ПолучитьСуммуДокументаСНДСВРазрезеСтавокНДС(ДокументОснование);
		СуммаДокументаОснования.Колонки.Сумма.Имя = "СуммаПлатежа";
		
		Если ВидДокументаОснования = "ПоступлениеДопРасходов" Тогда
			Если НЕ (ПараметрыДокументаОснования.Сумма = 0 И ПараметрыДокументаОснования.СуммаНДС = 0)  тогда
				Если СуммаДокументаОснования.Количество() = 0 Тогда
					СтрокаТаблицыСумм = СуммаДокументаОснования.Добавить();
				Иначе
					СтрокаТаблицыСумм = СуммаДокументаОснования[0];
				КонецЕсли;
				СтрокаТаблицыСумм.СуммаПлатежа	= СтрокаТаблицыСумм.СуммаПлатежа + ПараметрыДокументаОснования.Сумма;
				СтрокаТаблицыСумм.СуммаНДС		= СтрокаТаблицыСумм.СуммаНДС + ПараметрыДокументаОснования.СуммаНДС;
				Если НЕ ПараметрыДокументаОснования.СуммаВключаетНДС Тогда
					СтрокаТаблицыСумм.СуммаПлатежа = СтрокаТаблицыСумм.СуммаПлатежа + ПараметрыДокументаОснования.СуммаНДС;
				КонецЕсли; 
			КонецЕсли;
			СуммаДокументаОснования.ЗаполнитьЗначения(ПараметрыДокументаОснования.СтавкаНДС, "СтавкаНДС");
		КонецЕсли;		
		
		ОбщегоНазначенияБКВызовСервера.ЗагрузитьВТаблицуЗначений(СуммаДокументаОснования, ТаблицаПлатежей);
		Если ТаблицаПлатежей.Количество() = 0 тогда
			ТаблицаПлатежей.Добавить();
		КонецЕсли;
		
		ТаблицаПлатежей.ЗаполнитьЗначения(ДоговорКонтрагента, 						"ДоговорКонтрагента");
		ТаблицаПлатежей.ЗаполнитьЗначения(СтруктураКурсаВзаиморасчетов.Курс,		"КурсВзаиморасчетов");
		ТаблицаПлатежей.ЗаполнитьЗначения(СтруктураКурсаВзаиморасчетов.Кратность,	"КратностьВзаиморасчетов");
		
		Если ПараметрыДокументаОснования.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам Тогда
			ТаблицаПлатежей.ЗаполнитьЗначения(ДокументОснование, "Сделка");
		КонецЕсли;
		
		ТаблицаПлатежей.ЗагрузитьКолонку(ТаблицаПлатежей.ВыгрузитьКолонку("СуммаПлатежа"), "СуммаВзаиморасчетов");
		
		Для Каждого СтрокаПлатеж Из ТаблицаПлатежей Цикл
			УправлениеДенежнымиСредствамиКлиентСервер.ПроверкаКурсовВалют(СтрокаПлатеж);
		КонецЦикла; 
		// реквизиты нзываются иначе
		Если ВидДокументаОснования = "ВозвратТоваровОтПокупателя" Тогда
			ТаблицаПлатежей.ЗаполнитьЗначения(ПараметрыДокументаОснования.СчетУчетаРасчетовСКонтрагентом, "СчетУчетаРасчетовСКонтрагентомБУ");			
			ТаблицаПлатежей.ЗаполнитьЗначения(ПараметрыДокументаОснования.СчетУчетаРасчетовПоВозвратам,	  "СчетУчетаРасчетовПоАвансам");        			
		Иначе
			ТаблицаПлатежей.ЗаполнитьЗначения(ПараметрыДокументаОснования.СчетУчетаРасчетовСКонтрагентом, "СчетУчетаРасчетовСКонтрагентомБУ");			
			ТаблицаПлатежей.ЗаполнитьЗначения(ПараметрыДокументаОснования.СчетУчетаРасчетовПоАвансам, 	  "СчетУчетаРасчетовПоАвансам");        			
		КонецЕсли; 
		
		//Для заполнения поля СчетНаОплату в таблице расшифровки
		Если ВидДокументаОснования = "СчетНаОплатуПоставщика" Тогда
			ТаблицаПлатежей.ЗаполнитьЗначения(ДокументОснование, "СчетНаОплату");
		ИначеЕсли ВидДокументаОснования  = "ПоступлениеТоваровУслуг" Тогда
			СчетНаОплатуПоставщикаПТУ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование, "СчетНаОплатуПоставщика");
			Если ЗначениеЗаполнено(СчетНаОплатуПоставщикаПТУ) Тогда 
				ТаблицаПлатежей.ЗаполнитьЗначения(СчетНаОплатуПоставщикаПТУ, "СчетНаОплату");
			КонецЕсли;
		КонецЕсли;
		
		Объект.РасшифровкаПлатежа.Загрузить(ТаблицаПлатежей);
		Объект.СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа");
		
	ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ЗарплатаКВыплатеОрганизаций")
			  ИЛИ ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ОПВПеречислениеВФонды")
			  ИЛИ ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.СОПеречислениеВФонды") 
			  ИЛИ ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ЕППеречислениеВФонды") 
			  ИЛИ ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ИЛПеречислениеПолучателям")
			  ИЛИ ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.РасчетПениОПВиСО") 
			  ИЛИ ТипЗНЧ(ДокументОснование) = Тип("ДокументСсылка.РасчетНалоговПриПоступленииАктивовУслуг")
			  ИЛИ ТипЗНЧ(ДокументОснование) = Тип("ДокументСсылка.ВедомостьПрочихДоходов")
			  ИЛИ ТипЗНЧ(ДокументОснование) = Тип("ДокументСсылка.ВедомостьНаПеречислениеПрочихВыплат") Тогда
		
		ЗаполнитьДокументПоОснованиюРегл(Объект, ДокументОснование);
		
	ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов") Тогда	
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	СУММА(СуммаНДСТабличнойЧасти.СуммаНДС) КАК СуммаНДС,
		                      |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов.ВидНалогаНДС,
		                      |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов.ВидНалогаНДС.КодБК КАК КодБК,
		                      |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов.ВидНалогаНДС.КодНазначенияПлатежа КАК КодНазначенияПлатежа,
		                      |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов.ВидНалогаНДС.Контрагент КАК Контрагент,
		                      |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов.ВидНалогаНДС.СчетУчетаРасчетовСКонтрагентомБУ КАК СчетУчетаРасчетовСКонтрагентомБУ,
		                      |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов.ВидНалогаНДС.СчетКонтрагента КАК СчетКонтрагента,
		                      |	ВЫРАЗИТЬ(ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов.ВидНалогаНДС.НазначениеПлатежа КАК СТРОКА(1000)) КАК НазначениеПлатежа
		                      |ИЗ
		                      |	Документ.ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов КАК ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов
		                      |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		                      |			СУММА(ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговТовары.СуммаНДС) КАК СуммаНДС
		                      |		ИЗ
		                      |			Документ.ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов.Товары КАК ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговТовары
		                      |		ГДЕ
		                      |			ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговТовары.ВидНДС <> ЗНАЧЕНИЕ(Перечисление.ВидыНДС.НДСМетодомЗачета)
		                      |			И ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговТовары.Ссылка = &Ссылка
		                      |		
		                      |		ОБЪЕДИНИТЬ ВСЕ
		                      |		
		                      |		ВЫБРАТЬ
		                      |			СУММА(ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговОС.СуммаНДС)
		                      |		ИЗ
		                      |			Документ.ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов.ОС КАК ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговОС
		                      |		ГДЕ
		                      |			ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговОС.ВидНДС <> ЗНАЧЕНИЕ(Перечисление.ВидыНДС.НДСМетодомЗачета)
		                      |			И ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговОС.Ссылка = &Ссылка) КАК СуммаНДСТабличнойЧасти
		                      |		ПО (ИСТИНА)
		                      |ГДЕ
		                      |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов.Ссылка = &Ссылка
		                      |
		                      |СГРУППИРОВАТЬ ПО
		                      |	ВЫРАЗИТЬ(ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов.ВидНалогаНДС.НазначениеПлатежа КАК СТРОКА(1000)),
		                      |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов.ВидНалогаНДС,
		                      |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов.ВидНалогаНДС.КодБК,
		                      |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов.ВидНалогаНДС.КодНазначенияПлатежа,
		                      |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов.ВидНалогаНДС.Контрагент,
		                      |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов.ВидНалогаНДС.СчетКонтрагента,
		                      |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов.ВидНалогаНДС.СчетУчетаРасчетовСКонтрагентомБУ");
							  
		Запрос.УстановитьПараметр("Ссылка", ДокументОснование);					  
		ВыборкаПоОснованию = Запрос.Выполнить().Выбрать();
		ВыборкаПоОснованию.Следующий();
		
		Объект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеНалога;		
		Объект.ВалютаДокумента  = ВалютаРегламентированногоУчета;		
		Объект.ВидНалога 		= ВыборкаПоОснованию.ВидНалогаНДС;
		Объект.СуммаДокумента 	= ВыборкаПоОснованию.СуммаНДС;
		
		Объект.КодБК 					= ВыборкаПоОснованию.КодБК;
		Объект.КодНазначенияПлатежа 	= ВыборкаПоОснованию.КодНазначенияПлатежа;
		Объект.Контрагент 				= ВыборкаПоОснованию.Контрагент;		
		СтрокаПлатеж = Объект.РасшифровкаПлатежа.Добавить();
		
		ОсновнойДоговорКонтрагента = ОбщегоНазначенияБК.ДоступныйДоговорКонтрагента(Объект.Контрагент.ОсновнойДоговорКонтрагента);		
		
		Если НЕ ЗначениеЗаполнено(ВыборкаПоОснованию.Контрагент) Тогда			
			СтрокаПлатеж.ДоговорКонтрагента = Неопределено;       			
		ИначеЕсли НЕ УправлениеВзаиморасчетамиСервер.ОпределитьВидДоговораСКонтрагентом(Объект.ВидОперации).НайтиПоЗначению(ОсновнойДоговорКонтрагента.ВидДоговора)=Неопределено Тогда			
			Если Объект.Организация.Пустая() Тогда				
				СтрокаПлатеж.ДоговорКонтрагента = ОсновнойДоговорКонтрагента;
				Объект.Организация = ОсновнойДоговорКонтрагента.Организация;				
			ИначеЕсли ОсновнойДоговорКонтрагента.Организация.Пустая()
				ИЛИ ОсновнойДоговорКонтрагента.Организация = Объект.Организация Тогда				
				СтрокаПлатеж.ДоговорКонтрагента = ОсновнойДоговорКонтрагента; 				
			КонецЕсли;			
		КонецЕсли;    		
		
		СтрокаПлатеж.СуммаПлатежа = Объект.СуммаДокумента;		
		Объект.СчетКонтрагента = ВыборкаПоОснованию.СчетКонтрагента;
		
		Если НЕ Объект.СчетКонтрагента.Пустая() Тогда
			Объект.ТекстПолучателя = Объект.СчетКонтрагента.ТекстКорреспондента;
		Иначе
			Объект.ТекстПолучателя = ?(НЕ ЗначениеЗаполнено(Объект.Контрагент.НаименованиеПолное), Объект.Контрагент.Наименование, Объект.Контрагент.НаименованиеПолное);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.ВидНалога.НазначениеПлатежа) Тогда
			Объект.НазначениеПлатежа = СокрЛП(ВыборкаПоОснованию.НазначениеПлатежа);
		КонецЕсли;
		
		Объект.СчетУчетаРасчетовСКонтрагентомБУ = ВыборкаПоОснованию.СчетУчетаРасчетовСКонтрагентомБУ;
		Объект.СчетУчетаРасчетовСКонтрагентомНУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", ВыборкаПоОснованию.СчетУчетаРасчетовСКонтрагентомБУ));		
		
		// Установим значения субконто, в случае, если они повторяют реквизиты 
		// документа
		Если ЗначениеЗаполнено(Объект.СчетУчетаРасчетовСКонтрагентомБУ) Тогда
			Для Ном = 1 По Объект.СчетУчетаРасчетовСКонтрагентомБУ.ВидыСубконто.Количество() Цикл
				ТекущийВидСубконто = Объект.СчетУчетаРасчетовСКонтрагентомБУ.ВидыСубконто[Ном-1].ВидСубконто;						
				Если ТекущийВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоТиповые.НалогиСборыОтчисления Тогда
					Объект["СубконтоДтБУ" + Ном] = Объект.ВидНалога;
				КонецЕсли;					
				Если ТекущийВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоТиповые.ВидыПлатежейВБюджетИФонды Тогда
					Объект["СубконтоДтБУ" + Ном] = Перечисления.ВидыПлатежейВБюджетИФонды.Налог;
				КонецЕсли;		
			КонецЦикла;
		КонецЕсли;		
		
		Если ЗначениеЗаполнено(Объект.СчетУчетаРасчетовСКонтрагентомНУ) Тогда
			Для Ном = 1 По Объект.СчетУчетаРасчетовСКонтрагентомНУ.ВидыСубконто.Количество() Цикл
				ТекущийВидСубконто = Объект.СчетУчетаРасчетовСКонтрагентомНУ.ВидыСубконто[Ном-1].ВидСубконто;						
				Если ТекущийВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоТиповые.НалогиСборыОтчисления Тогда
					Объект["СубконтоДтНУ" + Ном] = Объект.ВидНалога;
				КонецЕсли;					
				Если ТекущийВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоТиповые.ВидыПлатежейВБюджетИФонды Тогда
					Объект["СубконтоДтНУ" + Ном] = Перечисления.ВидыПлатежейВБюджетИФонды.Налог;
				КонецЕсли;		
			КонецЦикла;
		КонецЕсли;	

	ИначеЕсли ВидДокументаОснования = "РегистрацияНДСЗаНерезидента" Тогда
		Объект.ВидОперации 				= Перечисления.ВидыОперацийППИсходящее.ПеречислениеНалога;		
		Объект.ВалютаДокумента  		= ВалютаРегламентированногоУчета;		
		Объект.ВидНалога 				= Справочники.НалогиСборыОтчисления.НалогНаДобавленнуюСтоимостьЗаНерезидента;
		Если СтруктураПараметровЗаполнения = Неопределено Тогда
			Объект.СуммаДокумента 			= ДокументОснование.ДокументыПоступления.Итог("СуммаНДС");
		Иначе
			Объект.СуммаДокумента 			= СтруктураПараметровЗаполнения.СуммаПлатежа;
		КонецЕсли;	
		
		Объект.КодБК 					= Объект.ВидНалога.КодБК;
		Объект.КодНазначенияПлатежа 	= Объект.ВидНалога.КодНазначенияПлатежа;
		Объект.Контрагент 				= Объект.ВидНалога.Контрагент;		
		
		СтрокаПлатеж 					= Объект.РасшифровкаПлатежа.Добавить();
		
		ОсновнойДоговорКонтрагента = ОбщегоНазначенияБК.ДоступныйДоговорКонтрагента(Объект.Контрагент.ОсновнойДоговорКонтрагента);		
		
		Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда			
			СтрокаПлатеж.ДоговорКонтрагента = Неопределено;       			
		ИначеЕсли НЕ УправлениеВзаиморасчетамиСервер.ОпределитьВидДоговораСКонтрагентом(Объект.ВидОперации).НайтиПоЗначению(ОсновнойДоговорКонтрагента.ВидДоговора)=Неопределено Тогда			
			Если Объект.Организация.Пустая() Тогда				
				СтрокаПлатеж.ДоговорКонтрагента = ОсновнойДоговорКонтрагента;
				Объект.Организация = ОсновнойДоговорКонтрагента.Организация;				
			ИначеЕсли ОсновнойДоговорКонтрагента.Организация.Пустая()
				ИЛИ ОсновнойДоговорКонтрагента.Организация = Объект.Организация Тогда				
				СтрокаПлатеж.ДоговорКонтрагента = ОсновнойДоговорКонтрагента; 				
			КонецЕсли;			
		КонецЕсли;    		
		
		СтрокаПлатеж.СуммаПлатежа 	= Объект.СуммаДокумента;		
		Объект.СчетКонтрагента 		= Объект.ВидНалога.СчетКонтрагента;
		
		Если НЕ Объект.СчетКонтрагента.Пустая() Тогда
			Объект.ТекстПолучателя = Объект.СчетКонтрагента.ТекстКорреспондента;
		Иначе
			Объект.ТекстПолучателя = ?(НЕ ЗначениеЗаполнено(Объект.Контрагент.НаименованиеПолное), Объект.Контрагент.Наименование, Объект.Контрагент.НаименованиеПолное);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.ВидНалога.НазначениеПлатежа) Тогда
			Объект.НазначениеПлатежа = СокрЛП(Объект.ВидНалога.НазначениеПлатежа);
		КонецЕсли;
		
		Объект.СчетУчетаРасчетовСКонтрагентомБУ = Объект.ВидНалога.СчетУчетаРасчетовСКонтрагентомБУ;
		Если ЗначениеЗаполнено(Объект.ВидНалога.СчетУчетаРасчетовСКонтрагентомНУ) Тогда
		    Объект.СчетУчетаРасчетовСКонтрагентомНУ = Объект.ВидНалога.СчетУчетаРасчетовСКонтрагентомНУ; 
		Иначе
			Объект.СчетУчетаРасчетовСКонтрагентомНУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", Объект.ВидНалога.СчетУчетаРасчетовСКонтрагентомБУ));		
		КонецЕсли;	
		
		// Установим значения субконто, в случае, если они повторяют реквизиты 
		// документа
		Если ЗначениеЗаполнено(Объект.СчетУчетаРасчетовСКонтрагентомБУ) Тогда
			Для Ном = 1 По Объект.СчетУчетаРасчетовСКонтрагентомБУ.ВидыСубконто.Количество() Цикл
				ТекущийВидСубконто = Объект.СчетУчетаРасчетовСКонтрагентомБУ.ВидыСубконто[Ном-1].ВидСубконто;						
				Если ТекущийВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоТиповые.НалогиСборыОтчисления Тогда
					Объект["СубконтоДтБУ" + Ном] = Объект.ВидНалога;
				КонецЕсли;					
				Если ТекущийВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоТиповые.ВидыПлатежейВБюджетИФонды Тогда
					Объект["СубконтоДтБУ" + Ном] = Перечисления.ВидыПлатежейВБюджетИФонды.Налог;
				КонецЕсли;		
			КонецЦикла;
		КонецЕсли;		
		
		Если ЗначениеЗаполнено(Объект.СчетУчетаРасчетовСКонтрагентомНУ) Тогда
			Для Ном = 1 По Объект.СчетУчетаРасчетовСКонтрагентомНУ.ВидыСубконто.Количество() Цикл
				ТекущийВидСубконто = Объект.СчетУчетаРасчетовСКонтрагентомНУ.ВидыСубконто[Ном-1].ВидСубконто;						
				Если ТекущийВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоТиповые.НалогиСборыОтчисления Тогда
					Объект["СубконтоДтНУ" + Ном] = Объект.ВидНалога;
				КонецЕсли;					
				Если ТекущийВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоТиповые.ВидыПлатежейВБюджетИФонды Тогда
					Объект["СубконтоДтНУ" + Ном] = Перечисления.ВидыПлатежейВБюджетИФонды.Налог;
				КонецЕсли;		
			КонецЦикла;
		КонецЕсли;	
		
	КонецЕсли;
	
	//ЗаполнитьСчетаБанка(Объект.СчетОрганизации, Объект.СчетБанк);	
	
	Объект.Ответственный = Пользователи.ТекущийПользователь();
	
	СчетаУчетаВДокументах.ЗаполнитьПередОтображениемПользователю(Объект);

КонецПроцедуры

Процедура ЗаполнитьДокументПоОснованиюРегл(Объект, ДокументОснование)
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ЗарплатаКВыплатеОрганизаций")	Тогда
		
		Объект.ВидОперации        = Перечисления.ВидыОперацийППИсходящее.ПеречислениеЗаработнойПлаты;
		Объект.Организация        = ДокументОснование.Организация;
		
		Если Объект.Организация.ОсновнойБанковскийСчет.ВалютаДенежныхСредств = Объект.ВалютаДокумента Тогда
			Объект.СчетОрганизации = Объект.Организация.ОсновнойБанковскийСчет;
		КонецЕсли;
		
		// Определим суммы к выплате
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("СсылкаПП", 	Объект.Ссылка);
		Запрос.УстановитьПараметр("Основание", 	ДокументОснование);
		Запрос.УстановитьПараметр("Выплачено", 	Перечисления.ВыплаченностьЗарплаты.Выплачено);
		Запрос.УстановитьПараметр("ЧерезБанк", 	Перечисления.СпособыВыплатыЗарплаты.ЧерезБанк);
		
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(*) КАК КоличествоСтрок,
		|	СУММА(ЗарплатаКВыплате.Сумма + ЗарплатаКВыплате.ДепонированнаяСумма) КАК СуммаКВыплате
		|
		|ИЗ
		|	Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплате
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям КАК РанееВыплаченныеСуммы
		|	ПО ЗарплатаКВыплате.ФизЛицо = РанееВыплаченныеСуммы.ФизЛицо
		|	   И ЗарплатаКВыплате.Ссылка = РанееВыплаченныеСуммы.Ведомость
		|	   И РанееВыплаченныеСуммы.Регистратор <> &СсылкаПП
		|ГДЕ
		|	ЗарплатаКВыплате.Ссылка = &Основание И
		|	ЗарплатаКВыплате.Ссылка.СпособВыплаты = &ЧерезБанк И
		|	РанееВыплаченныеСуммы.ФизЛицо ЕСТЬ NULL
		|";
		
		РезультатЗапроса = Запрос.Выполнить().Выбрать();
		Если РезультатЗапроса.Следующий() Тогда
			Если РезультатЗапроса.КоличествоСтрок > 0 Тогда
				СтрокаВедомость = Объект.ПеречислениеЗаработнойПлаты.Добавить();
				СтрокаВедомость.Ведомость     = ДокументОснование;
				СтрокаВедомость.СуммаКВыплате = РезультатЗапроса.СуммаКВыплате;
				Объект.СуммаДокумента				  = РезультатЗапроса.СуммаКВыплате;
			КонецЕсли;
		КонецЕсли;

		Если Объект.Организация.ОсновнойБанковскийСчет.ВалютаДенежныхСредств = ВалютаРегламентированногоУчета Тогда
			Объект.СчетОрганизации = Объект.Организация.ОсновнойБанковскийСчет;
		КонецЕсли;

		Если ЗначениеЗаполнено(ДокументОснование.Банк) Тогда
			// поищем соответствующий банк в справочнике контрагентов
			// по наличию банковского счета в банке, совпадающим с Основание.Банк,
			// и ИИН контрагента = ИИН банка
			Запрос.УстановитьПараметр("парамБанк", 				ДокументОснование.Банк);
			Запрос.УстановитьПараметр("парамВалютаРеглУчета", 	ВалютаРегламентированногоУчета);
			
			Запрос.Текст = "
			|ВЫБРАТЬ
			|	БанковскиеСчета.Владелец КАК Контрагент,
			|	БанковскиеСчета.Владелец.РНН КАК РНН,
			|	БанковскиеСчета.Владелец.ИдентификационныйКодЛичности КАК ИИН,
			|	ВЫРАЗИТЬ(БанковскиеСчета.Владелец.НаименованиеПолное КАК СТРОКА(1000)) КАК НаименованиеПолное,
			|	БанковскиеСчета.Ссылка КАК СчетКонтрагента,
			|	ВЫБОР
			|		КОГДА БанковскиеСчета.Владелец.ОсновнойБанковскийСчет = БанковскиеСчета.Ссылка
			|			ТОГДА 1
			|		ИНАЧЕ 2
			|	КОНЕЦ КАК Приоритет
			|ИЗ
			|	Справочник.БанковскиеСчета КАК БанковскиеСчета
			|ГДЕ
			|	БанковскиеСчета.Банк = &парамБанк И
			|	БанковскиеСчета.Владелец ССЫЛКА Справочник.Контрагенты И
			|	(БанковскиеСчета.ВалютаДенежныхСредств.Ссылка ЕСТЬ NULL ИЛИ БанковскиеСчета.ВалютаДенежныхСредств = &парамВалютаРеглУчета)
			|";
			
			ЕстьДанные = Ложь;
			Если ЗначениеЗаполнено(ДокументОснование.Банк.Контрагент) Тогда
				
				Запрос.Текст = Запрос.Текст + " И БанковскиеСчета.Владелец.Ссылка = БанковскиеСчета.Банк.Контрагент";
				ЕстьДанные = Истина;
				
			ИначеЕсли ЗначениеЗаполнено(ДокументОснование.Банк.ИдентификационныйНомер) Тогда
				
				Запрос.Текст = Запрос.Текст + " И БанковскиеСчета.Владелец.ИдентификационныйКодЛичности = БанковскиеСчета.Банк.ИдентификационныйНомер";
				ЕстьДанные = Истина;
				
			ИначеЕсли ЗначениеЗаполнено(ДокументОснование.Банк.РНН) Тогда
				
				Запрос.Текст = Запрос.Текст + " И БанковскиеСчета.Владелец.РНН = БанковскиеСчета.Банк.РНН";
				ЕстьДанные = Истина;
				
			КонецЕсли;
			
			Запрос.Текст = Запрос.Текст + " УПОРЯДОЧИТЬ ПО Приоритет";
			
			Если ЕстьДанные Тогда 
				ДатаПрекращенияВыводаРНН = Константы.ДатаПрекращенияВыводаРННВПервичныхДокументах.Получить();
				ВыводитьРНН = НЕ ЗначениеЗаполнено(ДатаПрекращенияВыводаРНН) ИЛИ ОбщегоНазначения.ТекущаяДатаПользователя() < ДатаПрекращенияВыводаРНН;
				
				Выборка = Запрос.Выполнить().Выбрать();
				Если Выборка.Следующий() Тогда
					Объект.Контрагент 	   = Выборка.Контрагент;
					Объект.СчетКонтрагента = Выборка.СчетКонтрагента;
					Объект.РННПолучателя   = ?(ВыводитьРНН, Выборка.РНН, Выборка.ИИН);
					Объект.ТекстПолучателя = СокрЛП(Выборка.НаименованиеПолное);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
	ИначеЕсли (ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ОПВПеречислениеВФонды")) Тогда
		
		Объект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеПенсионныхВзносов;
		
		Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
			Объект.Организация = ДокументОснование.Организация;
		КонецЕсли;
		Если Объект.Организация.ОсновнойБанковскийСчет.ВалютаДенежныхСредств = ВалютаРегламентированногоУчета Тогда
			Объект.СчетОрганизации = Объект.Организация.ОсновнойБанковскийСчет;
		КонецЕсли;
		
		Объект.Контрагент = ДокументОснование.Контрагент;
		Если Объект.Контрагент.ОсновнойБанковскийСчет.ВалютаДенежныхСредств = ВалютаРегламентированногоУчета Тогда
			Объект.СчетКонтрагента = Объект.Контрагент.ОсновнойБанковскийСчет;
		КонецЕсли;
		
		СтрокаСписок  = Объект.ПеречислениеПенсионныхВзносов.Добавить();
		СтрокаСписок.Документ			= ДокументОснование;
		СтрокаСписок.СуммаКПеречислению = ДокументОснование.ПенсионныеВзносы.Итог("Сумма");
		Объект.СуммаДокумента 			= СтрокаСписок.СуммаКПеречислению;
		
		Объект.БанкПосредник = Справочники.Контрагенты.ПустаяСсылка();		
		
	ИначеЕсли (ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.СОПеречислениеВФонды")) Тогда
		
		Объект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеСоциальныхОтчислений;
		
		Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
			Объект.Организация = ДокументОснование.Организация;
		КонецЕсли;
		Если Объект.Организация.ОсновнойБанковскийСчет.ВалютаДенежныхСредств = ВалютаРегламентированногоУчета Тогда
			Объект.СчетОрганизации = Объект.Организация.ОсновнойБанковскийСчет;
		КонецЕсли;
		
		СтрокаСписок  					= Объект.ПеречислениеСоциальныхОтчислений.Добавить();
		СтрокаСписок.Документ			= ДокументОснование;
		СтрокаСписок.СуммаКПеречислению = ДокументОснование.СоциальныеОтчисления.Итог("Сумма");
		Объект.СуммаДокумента 			= СтрокаСписок.СуммаКПеречислению;
		
		Объект.Контрагент = ДокументОснование.Контрагент;
		Если Объект.Контрагент.ОсновнойБанковскийСчет.ВалютаДенежныхСредств = ВалютаРегламентированногоУчета Тогда
			Объект.СчетКонтрагента = Объект.Контрагент.ОсновнойБанковскийСчет;
		КонецЕсли;
		
		Объект.БанкПосредник = Справочники.Контрагенты.ПустаяСсылка();

	ИначеЕсли (ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ЕППеречислениеВФонды")) Тогда
		
		Объект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеЕдиногоПлатежа;
		
		Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
			Объект.Организация = ДокументОснование.Организация;
		КонецЕсли;
		Если Объект.Организация.ОсновнойБанковскийСчет.ВалютаДенежныхСредств = ВалютаРегламентированногоУчета Тогда
			Объект.СчетОрганизации = Объект.Организация.ОсновнойБанковскийСчет;
		КонецЕсли;
		
		СтрокаСписок  					= Объект.ПеречислениеЕдиныхПлатежей.Добавить();
		СтрокаСписок.Документ			= ДокументОснование;
		СтрокаСписок.СуммаКПеречислению	= ДокументОснование.ЕдиныеПлатежи.Итог("Сумма");
		Объект.СуммаДокумента 			= СтрокаСписок.СуммаКПеречислению;
		
		Объект.Контрагент = ДокументОснование.Контрагент;
		Если Объект.Контрагент.ОсновнойБанковскийСчет.ВалютаДенежныхСредств = ВалютаРегламентированногоУчета Тогда
			Объект.СчетКонтрагента = Объект.Контрагент.ОсновнойБанковскийСчет;
		КонецЕсли;
		
		Объект.БанкПосредник = Справочники.Контрагенты.ПустаяСсылка();

	ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ИЛПеречислениеПолучателям") Тогда
		
		Объект.ВидОперации        = Перечисления.ВидыОперацийППИсходящее.ПеречислениеПоИсполнительнымЛистам;
		Объект.ВалютаДокумента    = ВалютаРегламентированногоУчета;
		Объект.Организация        = ДокументОснование.Организация;
		
		Если Объект.Организация.ОсновнойБанковскийСчет.ВалютаДенежныхСредств = Объект.ВалютаДокумента Тогда
			Объект.СчетОрганизации = Объект.Организация.ОсновнойБанковскийСчет;
		КонецЕсли;
		
		// Определим суммы к перечислению
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("Основание", ДокументОснование);
		
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ИЛПеречислениеПолучателям.Получатель) КАК КоличествоПолучателей,
		|	МАКСИМУМ(ИЛПеречислениеПолучателям.Получатель) КАК Получатель,
		|	МАКСИМУМ(ИЛПеречислениеПолучателям.ДокументОснование) КАК ДокументОснование,
		|	ЕСТЬNULL(СУММА(ИЛПеречислениеПолучателям.СуммаВзаиморасчетов), 0) КАК СуммаВзаиморасчетов,
		|	ЕСТЬNULL(СУММА(ИЛПеречислениеПолучателям.СуммаСборов), 0) КАК СуммаСборов
		|
		|ИЗ
		|	Документ.ИЛПеречислениеПолучателям.ИсполнительныеЛисты КАК ИЛПеречислениеПолучателям
		|ГДЕ
		|	ИЛПеречислениеПолучателям.Ссылка = &Основание
		|";
		
		РезультатЗапроса = Запрос.Выполнить().Выбрать();
		Если РезультатЗапроса.Следующий() Тогда
			
			СтрокаСписок = Объект.ПеречислениеПоИсполнительнымЛистам.Добавить();
			СтрокаСписок.Документ	  		= ДокументОснование;
			СтрокаСписок.СуммаКПеречислению = РезультатЗапроса.СуммаВзаиморасчетов;
			СтрокаСписок.СуммаСборов 		= РезультатЗапроса.СуммаСборов;
			СтрокаСписок.СуммаПлатежа 		= РезультатЗапроса.СуммаВзаиморасчетов + РезультатЗапроса.СуммаСборов;
			
			Объект.СуммаДокумента			= СтрокаСписок.СуммаПлатежа;
			
			Если РезультатЗапроса.КоличествоПолучателей = 1 Тогда
				// Подставим контрагента в шапку документа
				Объект.Контрагент 		= РезультатЗапроса.Получатель;
				Объект.СчетКонтрагента 	= ?(ЗначениеЗаполнено(Объект.Контрагент), Объект.Контрагент.ОсновнойБанковскийСчет, Справочники.БанковскиеСчета.ПустаяСсылка());
				Объект.РННПолучателя  	= Объект.Контрагент.РНН;
				Объект.ТекстПолучателя  = Объект.Контрагент.НаименованиеПолное;
			КонецЕсли;
			
		КонецЕсли;

		Если Объект.Организация.ОсновнойБанковскийСчет.ВалютаДенежныхСредств = ВалютаРегламентированногоУчета Тогда
			Объект.СчетОрганизации = Объект.Организация.ОсновнойБанковскийСчет;
		КонецЕсли;

	ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.РасчетПениОПВиСО") Тогда

		Если ДокументОснование.ВидОперации = Перечисления.ВидыОперацийРасчетПени.РаспределениеПениОПВ
		 ИЛИ ДокументОснование.ВидОперации = Перечисления.ВидыОперацийРасчетПени.РасчетПениОПВ 
		 ИЛИ ДокументОснование.ВидОперации = Перечисления.ВидыОперацийРасчетПени.РаспределениеПениОПВР
		 ИЛИ ДокументОснование.ВидОперации = Перечисления.ВидыОперацийРасчетПени.РасчетПениОПВР
		 ИЛИ ДокументОснование.ВидОперации = Перечисления.ВидыОперацийРасчетПени.РаспределениеПениОППВ
		 ИЛИ ДокументОснование.ВидОперации = Перечисления.ВидыОперацийРасчетПени.РасчетПениОППВ Тогда
			Объект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеПенсионныхВзносов;
			
			ИмяСписочногоДокумента = "ОПВПеречислениеВФонды";
			ИмяТабличнойЧастиСписочногоДокумента = "ПенсионныеВзносы";
			ИмяТабличнойЧастиППИ = "ПеречислениеПенсионныхВзносов";
			
		ИначеЕсли ДокументОснование.ВидОперации = Перечисления.ВидыОперацийРасчетПени.РаспределениеПениЕП
		 ИЛИ ДокументОснование.ВидОперации = Перечисления.ВидыОперацийРасчетПени.РасчетПениЕП  Тогда
		 
		 	Объект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеЕдиногоПлатежа;
			
			ИмяСписочногоДокумента = "ЕППеречислениеВФонды";
			ИмяТабличнойЧастиСписочногоДокумента = "ЕдиныеПлатежи";
			ИмяТабличнойЧастиППИ = "ПеречислениеЕдиныхПлатежей";
		Иначе
			Объект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеСоциальныхОтчислений;
			
			ИмяСписочногоДокумента = "СОПеречислениеВФонды";
			ИмяТабличнойЧастиСписочногоДокумента = "СоциальныеОтчисления";
			ИмяТабличнойЧастиППИ = "ПеречислениеСоциальныхОтчислений";
		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
			Объект.Организация = ДокументОснование.Организация;
		КонецЕсли;
		Если Объект.Организация.ОсновнойБанковскийСчет.ВалютаДенежныхСредств = ВалютаРегламентированногоУчета Тогда
			Объект.СчетОрганизации = Объект.Организация.ОсновнойБанковскийСчет;
		КонецЕсли;
		Объект.БанкПосредник = Справочники.Контрагенты.ПустаяСсылка();

		// создадим столько документов ОПВ(СО)ПеречислениеВФонды, сколько месяцев налогового периода существует в расчете пени
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Основание", ДокументОснование);
		
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	НАЧАЛОПЕРИОДА(ИсчислениеПени.МесяцНалоговогоПериода, МЕСЯЦ) КАК МесяцНалоговогоПериода,
		|	ИсчислениеПени.ФизЛицо,
		|	ИсчислениеПени.Ссылка.ВидОперации КАК ВидОперации,
		|	СУММА(ИсчислениеПени.Сумма) КАК Сумма
		|ИЗ
		|	Документ.РасчетПениОПВиСО.ИсчислениеПени КАК ИсчислениеПени
		|ГДЕ
		|	ИсчислениеПени.Ссылка = &Основание
		|
		|СГРУППИРОВАТЬ ПО
		|	ИсчислениеПени.МесяцНалоговогоПериода,
		|	ИсчислениеПени.ФизЛицо,
		|	ИсчислениеПени.Ссылка.ВидОперации
		|
		|УПОРЯДОЧИТЬ ПО
		|	ИсчислениеПени.МесяцНалоговогоПериода,
		|	ИсчислениеПени.ФизЛицо.Наименование
		|
		|ИТОГИ СУММА(Сумма), МАКСИМУМ(ВидОперации) ПО
		|	МесяцНалоговогоПериода
		|";
		
		ВыборкаМесяцНалоговогоПериода = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Объект.СуммаДокумента = 0;
		
		Пока ВыборкаМесяцНалоговогоПериода.Следующий() Цикл
		
			НовыйДок = Документы[ИмяСписочногоДокумента].СоздатьДокумент();
			НовыйДок.Дата = ДокументОснование.Дата;
		
			ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(НовыйДок, ДокументОснование);
			
			НовыйДок.Ответственный = ПользователиБКВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию(Пользователи.ТекущийПользователь(), "ОсновнойОтветственный");
			НовыйДок.ВидПлатежа = ДокументОснование.ВидПлатежа;
			НовыйДок.ДокументОснование = ДокументОснование;
			НовыйДок.ПериодРегистрации = ВыборкаМесяцНалоговогоПериода.МесяцНалоговогоПериода;
			НовыйДок.Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Создан автоматически при перечислении пени по документу %1'", ОбщегоНазначения.КодОсновногоЯзыка()), Строка(ДокументОснование));
			
			
			// заполним вид операции
			Если ИмяСписочногоДокумента = "ОПВПеречислениеВФонды" Тогда
				Если НЕ ЗначениеЗаполнено(НовыйДок.ВидОперации) Тогда 					
					Если Перечисления.ВидыОперацийРасчетПени.РасчетПениОПВ = ВыборкаМесяцНалоговогоПериода.ВидОперации ИЛИ Перечисления.ВидыОперацийРасчетПени.РаспределениеПениОПВ = ВыборкаМесяцНалоговогоПериода.ВидОперации Тогда 
						НовыйДок.ВидОперации = Перечисления.ВидыОперацийОПВПеречислениеВФонды.ПеречислениеОбязательныхПенсионныхВзносов;
					ИначеЕсли Перечисления.ВидыОперацийРасчетПени.РасчетПениОПВР = ВыборкаМесяцНалоговогоПериода.ВидОперации ИЛИ Перечисления.ВидыОперацийРасчетПени.РаспределениеПениОПВР = ВыборкаМесяцНалоговогоПериода.ВидОперации Тогда
						НовыйДок.ВидОперации = Перечисления.ВидыОперацийОПВПеречислениеВФонды.ПеречислениеОбязательныхПенсионныхВзносовРаботодателя;
					ИначеЕсли Перечисления.ВидыОперацийРасчетПени.РасчетПениОППВ = ВыборкаМесяцНалоговогоПериода.ВидОперации ИЛИ Перечисления.ВидыОперацийРасчетПени.РаспределениеПениОППВ = ВыборкаМесяцНалоговогоПериода.ВидОперации Тогда
						НовыйДок.ВидОперации = Перечисления.ВидыОперацийОПВПеречислениеВФонды.ПеречислениеОбязательныхПрофессиональныхПенсионныхВзносов;
					КонецЕсли;					
				КонецЕсли;						
				НовыйДок.СпособРасчетаСуммКПеречислению = Перечисления.СпособыРасчетаСуммКПеречислениюОПВ.ПоЗадолженностиЗаМесяц;
			ИначеЕсли ИмяСписочногоДокумента = "ЕППеречислениеВФонды" Тогда
				НовыйДок.СпособРасчетаСуммКПеречислению = Перечисления.СпособыРасчетаСуммКПеречислениюЕП.ПоЗадолженностиЗаМесяц;
			ИначеЕсли ИмяСписочногоДокумента = "СОПеречислениеВФонды" Тогда
				Если НЕ ЗначениеЗаполнено(НовыйДок.ВидОперации) Тогда 					
					Если Перечисления.ВидыОперацийРасчетПени.РасчетПениСО = ВыборкаМесяцНалоговогоПериода.ВидОперации ИЛИ Перечисления.ВидыОперацийРасчетПени.РаспределениеПениСО = ВыборкаМесяцНалоговогоПериода.ВидОперации Тогда 
						НовыйДок.ВидОперации = Перечисления.ВидыОперацийСОПеречислениеВФонды.ПеречислениеОбязательныхСоциальныхОтчислений;
					ИначеЕсли Перечисления.ВидыОперацийРасчетПени.РасчетПениВОСМС = ВыборкаМесяцНалоговогоПериода.ВидОперации ИЛИ Перечисления.ВидыОперацийРасчетПени.РаспределениеПениВОСМС = ВыборкаМесяцНалоговогоПериода.ВидОперации Тогда
						НовыйДок.ВидОперации = Перечисления.ВидыОперацийСОПеречислениеВФонды.ПеречислениеВзносовОСМС;
					ИначеЕсли Перечисления.ВидыОперацийРасчетПени.РасчетПениООСМС = ВыборкаМесяцНалоговогоПериода.ВидОперации ИЛИ Перечисления.ВидыОперацийРасчетПени.РаспределениеПениООСМС = ВыборкаМесяцНалоговогоПериода.ВидОперации Тогда
						НовыйДок.ВидОперации = Перечисления.ВидыОперацийСОПеречислениеВФонды.ПеречислениеОтчисленийОСМС;
					КонецЕсли;					
				КонецЕсли;						
				НовыйДок.СпособРасчетаСуммКПеречислению = Перечисления.СпособыРасчетаСуммКПеречислениюСО.ПоЗадолженностиЗаМесяц;
			КонецЕсли;
			
			// заполняем табличную часть списочного документа
			Выборка = ВыборкаМесяцНалоговогоПериода.Выбрать();
			Пока Выборка.Следующий() Цикл								
				Если Выборка.Сумма > 0 Тогда					
					НоваяСтрока = НовыйДок[ИмяТабличнойЧастиСписочногоДокумента].Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
					НовыйДок.СуммаДокумента = НовыйДок.СуммаДокумента + НоваяСтрока.Сумма;
					Объект.СуммаДокумента = Объект.СуммаДокумента + НоваяСтрока.Сумма;											
				КонецЕсли;
			КонецЦикла;			
			
			// сохраняем документ в базе 
			НовыйДок.Записать();
			
			// включаем его в состав табличной части текущего платежного поручения
			НоваяСтрока = Объект[ИмяТабличнойЧастиППИ].Добавить();
			НоваяСтрока.Документ = НовыйДок.Ссылка;
			НоваяСтрока.СуммаКПеречислению = НовыйДок.СуммаДокумента;
			
		КонецЦикла;

	ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.РасчетНалоговПриПоступленииАктивовУслуг") Тогда
		
		Объект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.РасчетыПоДоходуОтРазовыхВыплатСКонтрагентами;
		Объект.ВалютаДокумента    = ВалютаРегламентированногоУчета;

		Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
			Объект.Организация = ДокументОснование.Организация;
			Если НЕ ЗначениеЗаполнено(Объект.СтруктурноеПодразделениеОтправитель) Тогда
				Объект.СтруктурноеПодразделениеОтправитель = ДокументОснование.СтруктурноеПодразделение;
			КонецЕсли;
		КонецЕсли;
		
		Если Объект.Организация.ОсновнойБанковскийСчет.ВалютаДенежныхСредств = ВалютаРегламентированногоУчета Тогда
			Объект.СчетОрганизации = Объект.Организация.ОсновнойБанковскийСчет;
		КонецЕсли;
		
		СуммаОПВ = ?(ДокументОснование.УчитыватьОПВ, ДокументОснование.ИсчисленныйОПВ.Итог("Взнос"), 0);
		СуммаИПН = ?(ДокументОснование.УчитыватьИПН, ДокументОснование.ИсчисленныйИПН.Итог("Налог"), 0);
		СуммаВОСМС = ?(ДокументОснование.УчитыватьВОСМС, ДокументОснование.ИсчисленныеВОСМС.Итог("Взнос"), 0);
		СуммаСО = ?(ДокументОснование.УчитыватьСО И ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.НаСчетеВедетсяУчетПоКонтрагентам(ДокументОснование.СчетЗатрат), ДокументОснование.ИсчисленныеСО.Итог("Отчисление"), 0);
		Объект.СуммаДокумента = ДокументОснование.СуммаДокумента - СуммаОПВ - СуммаИПН - СуммаВОСМС - СуммаСО;
		
		// Подставим получателя
		Объект.Контрагент = ДокументОснование.Контрагент;
		Объект.РННПолучателя  	= Объект.Контрагент.РНН;
		Объект.ТекстПолучателя  = Объект.Контрагент.НаименованиеПолное;
			
		Если Объект.Контрагент.ОсновнойБанковскийСчет.ВалютаДенежныхСредств = ВалютаРегламентированногоУчета Тогда
			Объект.СчетКонтрагента = Объект.Контрагент.ОсновнойБанковскийСчет;
		КонецЕсли;
		
		СтрокаПлатеж = Объект.РасшифровкаПлатежа.Добавить();
		СтрокаПлатеж.СуммаПлатежа = Объект.СуммаДокумента;
		СтрокаПлатеж.ДоговорКонтрагента = ДокументОснование.ДоговорКонтрагента;
		СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентомБУ = ДокументОснование.СчетУчетаРасчетовСКонтрагентом;
		СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентомНУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", ДокументОснование.СчетУчетаРасчетовСКонтрагентом));
		СтрокаПлатеж.СчетУчетаРасчетовПоАвансам = ДокументОснование.СчетУчетаРасчетовПоАвансам; 
		
	ИначеЕсли (ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ВедомостьНаПеречислениеПрочихВыплат")) Тогда
		
		Объект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеПрочихВыплат;   
		
		СпособОтраженияДокументОснование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование.ВидПрочихВыплат, "СпособОтраженияВРеглУчете");
		
		СтруктураСчетаРасчетов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СпособОтраженияДокументОснование, "СчетКт, СубконтоКт1, СубконтоКт2, СубконтоКт3, 
																			|СчетКтНУ, СубконтоКтНУ1, СубконтоКтНУ2,СубконтоКтНУ3");
		
		Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
			Объект.Организация = ДокументОснование.Организация;
		КонецЕсли;
		Если Объект.Организация.ОсновнойБанковскийСчет.ВалютаДенежныхСредств = ВалютаРегламентированногоУчета Тогда
			Объект.СчетОрганизации = Объект.Организация.ОсновнойБанковскийСчет;
		КонецЕсли;
		
		Объект.Контрагент = ДокументОснование.Контрагент;
		Если Объект.Контрагент.ОсновнойБанковскийСчет.ВалютаДенежныхСредств = ВалютаРегламентированногоУчета Тогда
			Объект.СчетКонтрагента = Объект.Контрагент.ОсновнойБанковскийСчет;
		КонецЕсли; 
		
		Объект.СчетУчетаРасчетовСКонтрагентомБУ = СтруктураСчетаРасчетов.СчетКт;
		Объект.СубконтоДтБУ1 = СтруктураСчетаРасчетов.СубконтоКт1;   
		Объект.СубконтоДтБУ2 = СтруктураСчетаРасчетов.СубконтоКт2;
		Объект.СубконтоДтБУ3 = СтруктураСчетаРасчетов.СубконтоКт3;  
		
		Объект.СчетУчетаРасчетовСКонтрагентомНУ = СтруктураСчетаРасчетов.СчетКтНУ;
		Объект.СубконтоДтНУ1 = СтруктураСчетаРасчетов.СубконтоКтНУ1;
		Объект.СубконтоДтНУ2 = СтруктураСчетаРасчетов.СубконтоКтНУ2;
		Объект.СубконтоДтНУ3 = СтруктураСчетаРасчетов.СубконтоКтНУ3;
		
		СтрокаСписок  = Объект.ПеречислениеПрочихВыплат.Добавить();
		СтрокаСписок.Документ			= ДокументОснование;
		СтрокаСписок.СуммаКПеречислению = ДокументОснование.ПрочиеВыплаты.Итог("Сумма");
		Объект.СуммаДокумента 			= СтрокаСписок.СуммаКПеречислению;
		
		Объект.БанкПосредник = Справочники.Контрагенты.ПустаяСсылка();	
		
	ИначеЕсли (ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ВедомостьПрочихДоходов")) Тогда
		
		Объект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеПрочихДоходов;
		
		СчетаУчета = УправлениеВзаиморасчетамиСервер.ПолучитьСчетаРасчетовСКонтрагентом(ДокументОснование.Организация, Справочники.Контрагенты.ПустаяСсылка(), Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
		
		Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
			Объект.Организация = ДокументОснование.Организация;
		КонецЕсли;
		Объект.СчетОрганизации = Объект.Организация.ОсновнойБанковскийСчет;
		
		СтрокаСписок  = Объект.ПеречислениеПрочихДоходов.Добавить();
		СтрокаСписок.Документ			= ДокументОснование;
		СтрокаСписок.СуммаКПеречислению = ДокументОснование.Выплаты.Итог("СуммаКВыплате");
		Объект.СуммаДокумента 			= СтрокаСписок.СуммаКПеречислению;
		
		Объект.БанкПосредник = Справочники.Контрагенты.ПустаяСсылка();	
		
		Если ЗначениеЗаполнено(ДокументОснование.Банк) Тогда
			// поищем соответствующий банк в справочнике контрагентов
			// по наличию банковского счета в банке, совпадающим с Основание.Банк,
			// и ИИН контрагента = ИИН банка
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("парамБанк", 				ДокументОснование.Банк);
			Запрос.УстановитьПараметр("парамВалютаРеглУчета", 	ВалютаРегламентированногоУчета);
			
			Запрос.Текст = "
			|ВЫБРАТЬ
			|	БанковскиеСчета.Владелец КАК Контрагент,
			|	БанковскиеСчета.Владелец.РНН КАК РНН,
			|	БанковскиеСчета.Владелец.ИдентификационныйКодЛичности КАК ИИН,
			|	ВЫРАЗИТЬ(БанковскиеСчета.Владелец.НаименованиеПолное КАК СТРОКА(1000)) КАК НаименованиеПолное,
			|	БанковскиеСчета.Ссылка КАК СчетКонтрагента,
			|	ВЫБОР
			|		КОГДА БанковскиеСчета.Владелец.ОсновнойБанковскийСчет = БанковскиеСчета.Ссылка
			|			ТОГДА 1
			|		ИНАЧЕ 2
			|	КОНЕЦ КАК Приоритет
			|ИЗ
			|	Справочник.БанковскиеСчета КАК БанковскиеСчета
			|ГДЕ
			|	БанковскиеСчета.Банк = &парамБанк И
			|	БанковскиеСчета.Владелец ССЫЛКА Справочник.Контрагенты И
			|	(БанковскиеСчета.ВалютаДенежныхСредств.Ссылка ЕСТЬ NULL ИЛИ БанковскиеСчета.ВалютаДенежныхСредств = &парамВалютаРеглУчета)
			|";
			
			ЕстьДанные = Ложь;
			Если ЗначениеЗаполнено(ДокументОснование.Банк.Контрагент) Тогда
				
				Запрос.Текст = Запрос.Текст + " И БанковскиеСчета.Владелец.Ссылка = БанковскиеСчета.Банк.Контрагент";
				ЕстьДанные = Истина;
				
			ИначеЕсли ЗначениеЗаполнено(ДокументОснование.Банк.ИдентификационныйНомер) Тогда
				
				Запрос.Текст = Запрос.Текст + " И БанковскиеСчета.Владелец.ИдентификационныйКодЛичности = БанковскиеСчета.Банк.ИдентификационныйНомер";
				ЕстьДанные = Истина;
				
			КонецЕсли;
			
			Запрос.Текст = Запрос.Текст + " УПОРЯДОЧИТЬ ПО Приоритет";
			
			Если ЕстьДанные Тогда 
				
				Выборка = Запрос.Выполнить().Выбрать();
				Если Выборка.Следующий() Тогда
					Объект.Контрагент 	   = Выборка.Контрагент;
					Объект.СчетКонтрагента = Выборка.СчетКонтрагента;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры

Функция ФорматироватьСуммуПрописи(СуммаДок, СуммаБезТиын, ПараметрыПрописиНаРусском)
	
	Результат     = СуммаДок;
	ЦелаяЧасть    = Цел(СуммаДок);
	ФорматСтрока  = "Л=ru_RU; ДП=Ложь";	
	ПарамПредмета = ПараметрыПрописиНаРусском;
	
	Если (Результат - ЦелаяЧасть) = 0 Тогда
		Если СуммаБезТиын Тогда
			Результат = ЧислоПрописью(Результат, ФорматСтрока, ПарамПредмета);
			Результат = Лев(Результат, Найти(Результат,"0") - 1);
		Иначе
			Результат = ЧислоПрописью(Результат, ФорматСтрока, ПарамПредмета);
		КонецЕсли;
	Иначе
		Результат = ЧислоПрописью(Результат, ФорматСтрока, ПарамПредмета);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ФорматироватьСумму(СуммаДок, СуммаБезТиын)
	
	Результат  = СуммаДок;
	ЦелаяЧасть = Цел(СуммаДок);
	
	Если (Результат - ЦелаяЧасть) = 0 Тогда
		Если СуммаБезТиын Тогда
			Результат = Формат(Результат, "ЧДЦ=2; ЧРД='='; ЧГ=0");
			Результат = Лев(Результат, (Найти(Результат,"=")-1));
		Иначе
			Результат = Формат(Результат, "ЧДЦ=2; ЧРД='-'; ЧГ=0");
		КонецЕсли;
	Иначе
		Результат = Формат(Результат, "ЧДЦ=2; ЧРД='-'; ЧГ=0");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
//Проведение

Функция ПодготовитьПараметрыПроведения(ДокументСсылка, Отказ) Экспорт

	ВалютаРеглУчета     = Константы.ВалютаРегламентированногоУчета.Получить();
	
	ПараметрыПроведения = Новый Структура;
	ПараметрыПроведения.Вставить("ВалютаРеглУчета", ВалютаРеглУчета);
	ПараметрыПроведения.Вставить("ДокументСсылка",  ДокументСсылка);
	
	Запрос = Новый Запрос;
	МенеджерВременныхТаблиц  = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("ВалютаРеглУчета", ВалютаРеглУчета);
	
	НомераТаблиц = Новый Структура;
	
	Запрос.Текст = ТекстЗапросаРеквизитыДокумента(НомераТаблиц);
	Результат = Запрос.ВыполнитьПакет();
	ТаблицаРеквизиты = Результат[НомераТаблиц["Реквизиты"]].Выгрузить();
	ПараметрыПроведения.Вставить("Реквизиты", ТаблицаРеквизиты);
	
	Реквизиты = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ТаблицаРеквизиты[0]);

	Если НЕ УчетнаяПолитикаСервер.Существует(Реквизиты.Организация, Реквизиты.Период, "БУ", Истина, ДокументСсылка)
		ИЛИ НЕ УчетнаяПолитикаСервер.Существует(Реквизиты.Организация, Реквизиты.Период, "НУ", Истина, ДокументСсылка) Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат ПараметрыПроведения;
	КонецЕсли;      
	
	// Коэффициент пересчета сумм из валюты документа в тенге
	Если Реквизиты.ДокументВРеглВалюте Тогда
		КоэффициентРеглВалюты = 1;
	Иначе                                                                                                                                               
		СтруктураКурсаДокумента = ОбщегоНазначенияБК.ПолучитьКурсВалюты(Реквизиты.ВалютаДокумента, Реквизиты.Период);
		
		Если СтруктураКурсаДокумента.Кратность = 0 Тогда
			Отказ           = Истина;	
			ШаблонСообщения = НСтр("ru = 'Документ %1 не может быть проведен.
				|Не задана кратность валюты %2 на дату %3'");
			ТекстСообщения  = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонСообщения, Реквизиты.Ссылка, Реквизиты.ВалютаДокумента, Формат(Реквизиты.Дата, "ДФ=dd.MM.yy"));
			
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ПараметрыПроведения.ДокументСсылка);
		КонецЕсли;
		
		КоэффициентРеглВалюты           = СтруктураКурсаДокумента.Курс / СтруктураКурсаДокумента.Кратность;
	КонецЕсли;
	Запрос.УстановитьПараметр("КоэффициентРеглВалюты", КоэффициентРеглВалюты);	

	ОрганизацияПлательщикНалогаНаПрибыль 			= ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период);
	ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль 	= ОрганизацияПлательщикНалогаНаПрибыль И ПроцедурыНалоговогоУчета.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль(Реквизиты.Организация, Реквизиты.Период);	
	НеобходимостьОтраженияВНУ 						= ОрганизацияПлательщикНалогаНаПрибыль И Реквизиты.УчитыватьКПН И (ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль ИЛИ Реквизиты.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ);
	
	Реквизиты.Вставить("ОрганизацияПлательщикНалогаНаПрибыль", 			 ОрганизацияПлательщикНалогаНаПрибыль);
	Реквизиты.Вставить("ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль", ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль);
	Реквизиты.Вставить("НеобходимостьОтраженияВНУ", 					 НеобходимостьОтраженияВНУ);	
	Реквизиты.Вставить("ВедениеУчетаВременныхразницБалансовымМетодом",   УчетнаяПолитикаСервер.ВедетсяУчетВременныхРазницБалансовымМетодом(Реквизиты.Организация, Реквизиты.Период));
	
	Налогоплательщик = Реквизиты.Организация;
	ПоддержкаРаботыСоСтруктурнымиПодразделениями = ПолучитьФункциональнуюОпцию("ПоддержкаРаботыСоСтруктурнымиПодразделениями");	
	Если ПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
		Налогоплательщик = ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(Реквизиты.СтруктурноеПодразделение,
									Реквизиты.Организация,
									Перечисления.РазделыНалоговогоУчета.НДС);
	КонецЕсли;	
	
	ПараметрыПроведения.Реквизиты.ЗаполнитьЗначения(ПоддержкаРаботыСоСтруктурнымиПодразделениями, "ПоддержкаРаботыСоСтруктурнымиПодразделениями");	
	
	ПараметрыПроведения.Реквизиты.ЗаполнитьЗначения(НеобходимостьОтраженияВНУ, "НеобходимостьОтраженияВНУ");	
	ПараметрыПроведения.Реквизиты.ЗаполнитьЗначения(ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль, "ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль");
		
	Реквизиты.Вставить("Налогоплательщик", Налогоплательщик);
	Запрос.УстановитьПараметр("НеобходимостьОтраженияВНУ", НеобходимостьОтраженияВНУ);
	Запрос.УстановитьПараметр("Налогоплательщик"         , Налогоплательщик);  
	
	Запрос.УстановитьПараметр("СодержаниеКомиссия"     , НСтр("ru = 'Комиссия банка'", ОбщегоНазначения.КодОсновногоЯзыка()));
	Запрос.УстановитьПараметр("СодержаниеНДС"          , НСтр("ru = 'НДС, уплаченный в бюджет принят к зачету'", ОбщегоНазначения.КодОсновногоЯзыка()));
	Запрос.УстановитьПараметр("СодержаниеПрочее"       , НСтр("ru = 'Прочее списание денежных средств'", ОбщегоНазначения.КодОсновногоЯзыка()));
	Запрос.УстановитьПараметр("СодержаниеНалог"        , НСтр("ru = 'Перечисление налога'", ОбщегоНазначения.КодОсновногоЯзыка()));
	Запрос.УстановитьПараметр("СодержаниеПеревод"      , НСтр("ru = 'Перевод на другой счет организации'", ОбщегоНазначения.КодОсновногоЯзыка()));
	Запрос.УстановитьПараметр("СодержаниеПрочиеРасчеты", НСтр("ru = 'Расчеты с контрагентом'", ОбщегоНазначения.КодОсновногоЯзыка()));
	Запрос.УстановитьПараметр("СодержаниеРасчетыКредит", НСтр("ru = 'Расчеты по кредитам и займам'", ОбщегоНазначения.КодОсновногоЯзыка()));
	Запрос.УстановитьПараметр("СодержаниеПодотчет"     , НСтр("ru = 'Перечисление средств подотчетнику'", ОбщегоНазначения.КодОсновногоЯзыка()));
	Запрос.УстановитьПараметр("СодержаниеПеречислениеПрочихДоходов", НСтр("ru = 'Перечисление прочих доходов'", ОбщегоНазначения.КодОсновногоЯзыка()));
		                                                                                      	
	ПараметрыПроведения.Реквизиты.ЗаполнитьЗначения(Налогоплательщик, "Налогоплательщик");
	
	Если Реквизиты.ЕстьПеречислениеЗаработнойПлаты ИЛИ
		 Реквизиты.ЕстьПеречислениеПоИсполнительнымЛистам ИЛИ
		 Реквизиты.ЕстьПеречислениеПенсионныхВзносов ИЛИ
		 Реквизиты.ЕстьПеречислениеПенсионныхВзносовРаботодателя ИЛИ
		 Реквизиты.ЕстьПеречислениеПрофессиональныхПенсионныхВзносов ИЛИ
		 Реквизиты.ЕстьПеречислениеСоциальныхОтчислений ИЛИ
		 Реквизиты.ЕстьПеречислениеВзносовОСМС ИЛИ
		 Реквизиты.ЕстьПеречислениеОтчисленийОСМС ИЛИ
		 Реквизиты.ЕстьПеречислениеЕдиногоПлатежа ИЛИ
		 Реквизиты.ЕстьПеречислениеПрочихВыплат Тогда

		ПараметрыПроведения.Реквизиты.ЗаполнитьЗначения(ОбщегоНазначенияБК.ПолучитьПризнакВеденияУчетаПоСотрудникам(), "ВедениеУчетаПоСотрудникам");
		
		ПризнакиРаспределенияНалогов = УчетнаяПолитикаСервер.ПолучитьПризнакиРаспределенияНалогов(Реквизиты.Организация, Реквизиты.Дата);
        Если Реквизиты.ЕстьПеречислениеЕдиногоПлатежа Тогда
			ПараметрыПроведения.Реквизиты.ЗаполнитьЗначения(Ложь, "РаспределятьНалогиПоСтруктурнымЕдиницам");
		Иначе
			ПараметрыПроведения.Реквизиты.ЗаполнитьЗначения(ПризнакиРаспределенияНалогов.РаспределятьНалогиПоСтруктурнымЕдиницам, "РаспределятьНалогиПоСтруктурнымЕдиницам");
		КонецЕсли;
		ПараметрыПроведения.Реквизиты.ЗаполнитьЗначения(ПризнакиРаспределенияНалогов.РаспределятьНалогиПоПодразделениямОрганизаций, "РаспределятьНалогиПоПодразделениямОрганизаций");
		
		Запрос.УстановитьПараметр("Дата", Реквизиты.Дата);
	
	КонецЕсли;  
	
	Запрос.УстановитьПараметр("Валюта", Реквизиты.ВалютаДокумента);
	
	НомераТаблиц = Новый Структура;

	Запрос.Текст = ТекстЗапросаВременныеТаблицыДокумента(НомераТаблиц,       ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаПогашениеЗадолженности(НомераТаблиц, ПараметрыПроведения, Реквизиты) 
		+ ТекстЗапросаПрочееСписание(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаПеречислениеНДССИзмененнымСрокомУплаты(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаПеречислениеВПодотчет(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаКомиссияБанка(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаПеречислениеЗП(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаПеречислениеОПВ(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаПеречислениеСО(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаПеречислениеЕП(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаПеречислениеПоИЛ(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаПеречислениеПрочихВыплат(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаОплатаСчетов(НомераТаблиц, ПараметрыПроведения, Реквизиты);      
		
	Результат = Запрос.ВыполнитьПакет();

	Для Каждого НомерТаблицы ИЗ НомераТаблиц Цикл
		ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат[НомерТаблицы.Значение].Выгрузить());
	КонецЦикла;

	Возврат ПараметрыПроведения;

КонецФункции

Функция ТекстЗапросаРеквизитыДокумента(НомераТаблиц)
	
	НомераТаблиц.Вставить("ВременнаяТаблицаСоставДокумента", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВременнаяТаблицаРеквизиты", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("Реквизиты", НомераТаблиц.Количество());

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	МАКСИМУМ(СоставДокумента.ЕстьРасшифровкаПлатежа) КАК ЕстьРасшифровкаПлатежа,
	|	МАКСИМУМ(СоставДокумента.ЕстьПеречислениеЗаработнойПлаты) КАК ЕстьПеречислениеЗаработнойПлаты,
	|	МАКСИМУМ(СоставДокумента.ЕстьПеречислениеПенсионныхВзносов) КАК ЕстьПеречислениеПенсионныхВзносов,
	|	МАКСИМУМ(СоставДокумента.ЕстьПеречислениеПрофессиональныхПенсионныхВзносов) КАК ЕстьПеречислениеПрофессиональныхПенсионныхВзносов,
	|	МАКСИМУМ(СоставДокумента.ЕстьПеречислениеПенсионныхВзносовРаботодателя) КАК ЕстьПеречислениеПенсионныхВзносовРаботодателя,
	|	МАКСИМУМ(СоставДокумента.ЕстьПеречислениеСоциальныхОтчислений) КАК ЕстьПеречислениеСоциальныхОтчислений,
	|	МАКСИМУМ(СоставДокумента.ЕстьПеречислениеВзносовОСМС) КАК ЕстьПеречислениеВзносовОСМС,
	|	МАКСИМУМ(СоставДокумента.ЕстьПеречислениеОтчисленийОСМС) КАК ЕстьПеречислениеОтчисленийОСМС,
	|	МАКСИМУМ(СоставДокумента.ЕстьПеречислениеЕдиногоПлатежа) КАК ЕстьПеречислениеЕдиногоПлатежа,
	|	МАКСИМУМ(СоставДокумента.ЕстьПеречислениеПоИсполнительнымЛистам) КАК ЕстьПеречислениеПоИсполнительнымЛистам,
	|	МАКСИМУМ(СоставДокумента.ЕстьПеречислениеНДССИзмененнымСрокомУплаты) КАК ЕстьПеречислениеНДССИзмененнымСрокомУплаты,
	|	МАКСИМУМ(СоставДокумента.ЕстьПеречислениеВПодотчет) КАК ЕстьПеречислениеВПодотчет,
	|	МАКСИМУМ(СоставДокумента.ЕстьПеречислениеПрочихВыплат) КАК ЕстьПеречислениеПрочихВыплат,
	|	МАКСИМУМ(СоставДокумента.ЕстьПеречислениеПрочихДоходов) КАК ЕстьПеречислениеПрочихДоходов
	|ПОМЕСТИТЬ СоставДокумента
	|ИЗ
	|	(ВЫБРАТЬ ПЕРВЫЕ 1
	|		ИСТИНА КАК ЕстьРасшифровкаПлатежа,
	|		ЛОЖЬ КАК ЕстьПеречислениеЗаработнойПлаты,
	|		ЛОЖЬ КАК ЕстьПеречислениеПенсионныхВзносов,
	|		ЛОЖЬ КАК ЕстьПеречислениеПрофессиональныхПенсионныхВзносов,
	|		ЛОЖЬ КАК ЕстьПеречислениеПенсионныхВзносовРаботодателя,
	|		ЛОЖЬ КАК ЕстьПеречислениеСоциальныхОтчислений,
	|		ЛОЖЬ КАК ЕстьПеречислениеВзносовОСМС,
	|		ЛОЖЬ КАК ЕстьПеречислениеОтчисленийОСМС,
	|		ЛОЖЬ КАК ЕстьПеречислениеПоИсполнительнымЛистам,
	|		ЛОЖЬ КАК ЕстьПеречислениеНДССИзмененнымСрокомУплаты,
	|		ЛОЖЬ КАК ЕстьПеречислениеВПодотчет,
	|		ЛОЖЬ КАК ЕстьПеречислениеЕдиногоПлатежа,
	|		ЛОЖЬ КАК ЕстьПеречислениеПрочихВыплат,
	|		ЛОЖЬ КАК ЕстьПеречислениеПрочихДоходов
	|	ИЗ
	|		Документ.ПлатежноеПоручениеИсходящее.РасшифровкаПлатежа КАК ТаблицаДокумента
	|	ГДЕ
	|		ТаблицаДокумента.Ссылка = &Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ ПЕРВЫЕ 1
	|		ЛОЖЬ,
	|		ИСТИНА, 
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ
	|	ИЗ
	|		Документ.ПлатежноеПоручениеИсходящее.ПеречислениеЗаработнойПлаты КАК ТаблицаДокумента
	|	ГДЕ
	|		ТаблицаДокумента.Ссылка = &Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ ПЕРВЫЕ 1
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ВЫБОР
	|			КОГДА ТаблицаДокумента.Документ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийОПВПеречислениеВФонды.ПеречислениеОбязательныхПенсионныхВзносов)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ
	|	ИЗ
	|		Документ.ПлатежноеПоручениеИсходящее.ПеречислениеПенсионныхВзносов КАК ТаблицаДокумента
	|	ГДЕ
	|		ТаблицаДокумента.Ссылка = &Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ ПЕРВЫЕ 1
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ВЫБОР
	|			КОГДА ТаблицаДокумента.Документ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийОПВПеречислениеВФонды.ПеречислениеОбязательныхПрофессиональныхПенсионныхВзносов)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ, 
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ
	|	ИЗ
	|		Документ.ПлатежноеПоручениеИсходящее.ПеречислениеПенсионныхВзносов КАК ТаблицаДокумента
	|	ГДЕ
	|		ТаблицаДокумента.Ссылка = &Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ ПЕРВЫЕ 1
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ВЫБОР
	|			КОГДА ТаблицаДокумента.Документ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийОПВПеречислениеВФонды.ПеречислениеОбязательныхПенсионныхВзносовРаботодателя)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ
	|	ИЗ
	|		Документ.ПлатежноеПоручениеИсходящее.ПеречислениеПенсионныхВзносов КАК ТаблицаДокумента
	|	ГДЕ
	|		ТаблицаДокумента.Ссылка = &Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ ПЕРВЫЕ 1
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ВЫБОР
	|			КОГДА ТаблицаДокумента.Документ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСОПеречислениеВФонды.ПеречислениеОбязательныхСоциальныхОтчислений)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ
	|	ИЗ
	|		Документ.ПлатежноеПоручениеИсходящее.ПеречислениеСоциальныхОтчислений КАК ТаблицаДокумента
	|	ГДЕ
	|		ТаблицаДокумента.Ссылка = &Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ ПЕРВЫЕ 1
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ, 
	|		ЛОЖЬ,
	|		ВЫБОР
	|			КОГДА ТаблицаДокумента.Документ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСОПеречислениеВФонды.ПеречислениеВзносовОСМС)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ
	|	ИЗ
	|		Документ.ПлатежноеПоручениеИсходящее.ПеречислениеСоциальныхОтчислений КАК ТаблицаДокумента
	|	ГДЕ
	|		ТаблицаДокумента.Ссылка = &Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ ПЕРВЫЕ 1
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ВЫБОР
	|			КОГДА ТаблицаДокумента.Документ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСОПеречислениеВФонды.ПеречислениеОтчисленийОСМС)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ
	|	ИЗ
	|		Документ.ПлатежноеПоручениеИсходящее.ПеречислениеСоциальныхОтчислений КАК ТаблицаДокумента
	|	ГДЕ
	|		ТаблицаДокумента.Ссылка = &Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ ПЕРВЫЕ 1
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ИСТИНА,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ
	|	ИЗ
	|		Документ.ПлатежноеПоручениеИсходящее.ПеречислениеПоИсполнительнымЛистам КАК ТаблицаДокумента
	|	ГДЕ
	|		ТаблицаДокумента.Ссылка = &Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ ПЕРВЫЕ 1
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ИСТИНА,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ
	|	ИЗ
	|		Документ.ПлатежноеПоручениеИсходящее.ПеречислениеНДССИзмененнымСрокомУплаты КАК ТаблицаДокумента
	|	ГДЕ
	|		ТаблицаДокумента.Ссылка = &Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ ПЕРВЫЕ 1
	|		ЛОЖЬ,
	|		ЛОЖЬ, 
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ИСТИНА,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ
	|	ИЗ
	|		Документ.ПлатежноеПоручениеИсходящее.ПеречислениеВПодотчет КАК ТаблицаДокумента
	|	ГДЕ
	|		ТаблицаДокумента.Ссылка = &Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ ПЕРВЫЕ 1
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ИСТИНА,
	|		ЛОЖЬ,
	|		ЛОЖЬ
	|	ИЗ
	|		Документ.ПлатежноеПоручениеИсходящее.ПеречислениеЕдиныхПлатежей КАК ТаблицаДокумента
	|	ГДЕ
	|		ТаблицаДокумента.Ссылка = &Ссылка 
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ ПЕРВЫЕ 1
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ИСТИНА,
	|		ЛОЖЬ
	|	ИЗ
	|		Документ.ПлатежноеПоручениеИсходящее.ПеречислениеПрочихВыплат КАК ТаблицаДокумента
	|	ГДЕ
	|		ТаблицаДокумента.Ссылка = &Ссылка
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ ПЕРВЫЕ 1
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ИСТИНА
	|	ИЗ
	|		Документ.ПлатежноеПоручениеИсходящее.ПеречислениеПрочихДоходов КАК ТаблицаДокумента
	|	ГДЕ
	|		ТаблицаДокумента.Ссылка = &Ссылка) КАК СоставДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Дата КАК Дата,
	|	Реквизиты.Ссылка КАК Ссылка,
	|	Реквизиты.Номер КАК Номер,
	|	Реквизиты.ВидОперации КАК ВидОперации,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.Организация КАК Налогоплательщик,
	|	Реквизиты.ВалютаДокумента КАК ВалютаДокумента,
	|	Реквизиты.Контрагент КАК Контрагент,
	|	Реквизиты.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	|	Реквизиты.СуммаДокумента КАК СуммаДокумента,
	|	""Выбытие"" КАК НаправлениеДвижения,
	|	ВЫБОР
	|		КОГДА Реквизиты.ВалютаДокумента = &ВалютаРеглУчета
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ДокументВРеглВалюте,
	|	ВЫБОР
	|		КОГДА Реквизиты.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийППИсходящее.ВозвратДенежныхСредствПокупателю)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоВозврат,
	|	Реквизиты.ВидУчетаНУ КАК ВидУчетаНУ,
	|	Реквизиты.Оплачено КАК Оплачено,
	|	Реквизиты.СубконтоДтБУ1 КАК СубконтоДтБУ1,
	|	Реквизиты.СубконтоДтБУ2 КАК СубконтоДтБУ2,
	|	Реквизиты.СубконтоДтБУ3 КАК СубконтоДтБУ3,
	|	Реквизиты.СубконтоДтНУ1 КАК СубконтоДтНУ1,
	|	Реквизиты.СубконтоДтНУ2 КАК СубконтоДтНУ2,
	|	Реквизиты.СубконтоДтНУ3 КАК СубконтоДтНУ3,
	|	Реквизиты.СчетБанк КАК СчетБанк,
	|	Реквизиты.СчетКонтрагента КАК СчетКонтрагента,
	|	Реквизиты.СчетОрганизации КАК СчетОрганизации,
	|	Реквизиты.СчетУчетаРасчетовСКонтрагентомБУ КАК СчетУчетаРасчетовСКонтрагентомБУ,
	|	Реквизиты.СчетУчетаРасчетовСКонтрагентомНУ КАК СчетУчетаРасчетовСКонтрагентомНУ,
	|	Реквизиты.УчитыватьКПН КАК УчитыватьКПН,
	|	Реквизиты.СтруктурноеПодразделениеПолучатель КАК СтруктурноеПодразделениеПолучатель,
	|	Реквизиты.СтруктурноеПодразделениеОтправитель КАК СтруктурноеПодразделениеОтправитель,
	|	Реквизиты.СтруктурноеПодразделениеОтправитель КАК СтруктурноеПодразделение,
	|	ЛОЖЬ КАК НеобходимостьОтраженияВНУ,
	|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) КАК ПодразделениеДляРеглОпераций,
	|	ЛОЖЬ КАК ВедениеУчетаВременныхРазницБалансовымМетодом,
	|	ЛОЖЬ КАК ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль,
	|	ВЫБОР
	|		КОГДА НЕ СчетаУчетаДенежныхСредств.СчетУчетаНУ ЕСТЬ NULL 
	|			ТОГДА ВЫБОР
	|					КОГДА СчетаУчетаДенежныхСредств.СчетУчетаНУ = ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ПустаяСсылка)
	|						ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ДенежныеСредстваВКассеИНаРасчетныхСчетах)
	|					ИНАЧЕ СчетаУчетаДенежныхСредств.СчетУчетаНУ
	|				КОНЕЦ
	|		ИНАЧЕ ЕСТЬNULL(Типовой.СчетНУ, ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ДенежныеСредстваВКассеИНаРасчетныхСчетах))
	|	КОНЕЦ КАК СчетБанкНУ,
	|	Реквизиты.ВключатьКомиссиюБанка,
	|	Реквизиты.ПроцентКомиссии,
	|	Реквизиты.СуммаКомиссии,
	|	ЛОЖЬ КАК ВедениеУчетаПоСотрудникам,
	|	ЛОЖЬ КАК РаспределятьНалогиПоСтруктурнымЕдиницам,
	|	ЛОЖЬ КАК РаспределятьНалогиПоПодразделениямОрганизаций,
	|	ЛОЖЬ КАК ПоддержкаРаботыСоСтруктурнымиПодразделениями,
	|	ЛОЖЬ КАК ПорядокСписанияЗадолженностиПоЗарплате
	|ПОМЕСТИТЬ Реквизиты
	|ИЗ
	|	Документ.ПлатежноеПоручениеИсходящее КАК Реквизиты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаУчетаДенежныхСредств КАК СчетаУчетаДенежныхСредств
	|		ПО Реквизиты.СчетОрганизации = СчетаУчетаДенежныхСредств.ОбъектУчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Типовой КАК Типовой
	|		ПО Реквизиты.СчетБанк = Типовой.Ссылка
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Дата КАК Дата,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Номер КАК Номер,
	|	Реквизиты.Ссылка КАК Ссылка,
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Налогоплательщик КАК Налогоплательщик,
	|	Реквизиты.ВидОперации КАК ВидОперации,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.ВалютаДокумента КАК ВалютаДокумента,
	|	Реквизиты.Контрагент КАК Контрагент,
	|	Реквизиты.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	|	Реквизиты.СуммаДокумента КАК СуммаДокумента,
	|	Реквизиты.ДокументВРеглВалюте КАК ДокументВРеглВалюте,
	|	Реквизиты.ЭтоВозврат КАК ЭтоВозврат,
	|	Реквизиты.ВидУчетаНУ КАК ВидУчетаНУ,
	|	Реквизиты.Оплачено КАК Оплачено,
	|	Реквизиты.СубконтоДтБУ1 КАК СубконтоДтБУ1,
	|	Реквизиты.СубконтоДтБУ2 КАК СубконтоДтБУ2,
	|	Реквизиты.СубконтоДтБУ3 КАК СубконтоДтБУ3,
	|	Реквизиты.СубконтоДтНУ1 КАК СубконтоДтНУ1,
	|	Реквизиты.СубконтоДтНУ2 КАК СубконтоДтНУ2,
	|	Реквизиты.СубконтоДтНУ3 КАК СубконтоДтНУ3,
	|	Реквизиты.СчетБанк КАК СчетБанк,
	|	Реквизиты.СчетКонтрагента КАК СчетКонтрагента,
	|	Реквизиты.СчетОрганизации КАК СчетОрганизации,
	|	Реквизиты.СчетУчетаРасчетовСКонтрагентомБУ КАК СчетУчетаРасчетовСКонтрагентомБУ,
	|	Реквизиты.СчетУчетаРасчетовСКонтрагентомНУ КАК СчетУчетаРасчетовСКонтрагентомНУ,
	|	Реквизиты.УчитыватьКПН КАК УчитыватьКПН,
	|	Реквизиты.СтруктурноеПодразделениеПолучатель КАК СтруктурноеПодразделениеПолучатель,
	|	Реквизиты.СтруктурноеПодразделениеОтправитель КАК СтруктурноеПодразделениеОтправитель,
	|	Реквизиты.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	|	Реквизиты.НеобходимостьОтраженияВНУ КАК НеобходимостьОтраженияВНУ,
	|	Реквизиты.ПодразделениеДляРеглОпераций КАК ПодразделениеДляРеглОпераций,
	|	Реквизиты.ВедениеУчетаВременныхРазницБалансовымМетодом КАК ВедениеУчетаВременныхРазницБалансовымМетодом,
	|	Реквизиты.НаправлениеДвижения КАК НаправлениеДвижения,
	|	Реквизиты.СчетБанкНУ КАК СчетБанкНУ,
	|	ЕСТЬNULL(СоставДокумента.ЕстьРасшифровкаПлатежа, ЛОЖЬ) КАК ЕстьРасшифровкаПлатежа,
	|	ЕСТЬNULL(СоставДокумента.ЕстьПеречислениеЗаработнойПлаты, ЛОЖЬ) КАК ЕстьПеречислениеЗаработнойПлаты,
	|	ЕСТЬNULL(СоставДокумента.ЕстьПеречислениеПенсионныхВзносов, ЛОЖЬ) КАК ЕстьПеречислениеПенсионныхВзносов,
	|	ЕСТЬNULL(СоставДокумента.ЕстьПеречислениеПенсионныхВзносовРаботодателя, ЛОЖЬ) КАК ЕстьПеречислениеПенсионныхВзносовРаботодателя,
	|	ЕСТЬNULL(СоставДокумента.ЕстьПеречислениеПрофессиональныхПенсионныхВзносов, ЛОЖЬ) КАК ЕстьПеречислениеПрофессиональныхПенсионныхВзносов,
	|	ЕСТЬNULL(СоставДокумента.ЕстьПеречислениеСоциальныхОтчислений, ЛОЖЬ) КАК ЕстьПеречислениеСоциальныхОтчислений,
	|	ЕСТЬNULL(СоставДокумента.ЕстьПеречислениеВзносовОСМС, ЛОЖЬ) КАК ЕстьПеречислениеВзносовОСМС,
	|	ЕСТЬNULL(СоставДокумента.ЕстьПеречислениеОтчисленийОСМС, ЛОЖЬ) КАК ЕстьПеречислениеОтчисленийОСМС,
	|	ЕСТЬNULL(СоставДокумента.ЕстьПеречислениеПоИсполнительнымЛистам, ЛОЖЬ) КАК ЕстьПеречислениеПоИсполнительнымЛистам,
	|	ЕСТЬNULL(СоставДокумента.ЕстьПеречислениеНДССИзмененнымСрокомУплаты, ЛОЖЬ) КАК ЕстьПеречислениеНДССИзмененнымСрокомУплаты,
	|	ЕСТЬNULL(СоставДокумента.ЕстьПеречислениеВПодотчет, ЛОЖЬ) КАК ЕстьПеречислениеВПодотчет,
	|	ЕСТЬNULL(СоставДокумента.ЕстьПеречислениеЕдиногоПлатежа, ЛОЖЬ) КАК ЕстьПеречислениеЕдиногоПлатежа,
	|	ЕСТЬNULL(СоставДокумента.ЕстьПеречислениеПрочихВыплат, ЛОЖЬ) КАК ЕстьПеречислениеПрочихВыплат,
	|	ЕСТЬNULL(СоставДокумента.ЕстьПеречислениеПрочихДоходов, ЛОЖЬ) КАК ЕстьПеречислениеПрочихДоходов,
	|	Реквизиты.ВключатьКомиссиюБанка КАК ВключатьКомиссиюБанка,
	|	Реквизиты.СуммаКомиссии КАК СуммаКомиссии,
	|	Реквизиты.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль,
	|	Реквизиты.ВедениеУчетаПоСотрудникам,
	|	Реквизиты.РаспределятьНалогиПоСтруктурнымЕдиницам,
	|	Реквизиты.РаспределятьНалогиПоПодразделениямОрганизаций,
	|	Реквизиты.ПоддержкаРаботыСоСтруктурнымиПодразделениями,
	|	Реквизиты.ПорядокСписанияЗадолженностиПоЗарплате
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|		ЛЕВОЕ СОЕДИНЕНИЕ СоставДокумента КАК СоставДокумента
	|		ПО (ИСТИНА)";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();	
	
КонецФункции

Функция ТекстЗапросаВременныеТаблицыДокумента(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	ТекстЗапроса = "";
	
	Если Реквизиты.ЕстьРасшифровкаПлатежа Тогда	
		
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	ТаблицаРасшифровкаПлатежа.Ссылка КАК Ссылка,
		|	ТаблицаРасшифровкаПлатежа.НомерСтроки КАК НомерСтроки,
		|	ТаблицаРасшифровкаПлатежа.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	ТаблицаРасшифровкаПлатежа.ДоговорКонтрагента.ВидДоговора КАК ВидДоговора,
		|	ТаблицаРасшифровкаПлатежа.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
		|	ТаблицаРасшифровкаПлатежа.ДоговорКонтрагента.ВедениеВзаиморасчетов КАК ВедениеВзаиморасчетов,
		|	ТаблицаРасшифровкаПлатежа.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
		|	ТаблицаРасшифровкаПлатежа.КратностьВзаиморасчетов КАК КратностьВзаиморасчетов,
		|	ТаблицаРасшифровкаПлатежа.Сделка КАК Сделка,
		|	ТаблицаРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентомБУ КАК СчетУчетаРасчетовСКонтрагентомБУ,
		|	ВЫБОР
		|		КОГДА Реквизиты.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийППИсходящее.РасчетыПоКредитамИЗаймамСКонтрагентами)
		|			ТОГДА ТаблицаРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентомНУ
		|		ИНАЧЕ ЕСТЬNULL(Типовой.СчетНУ, ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ПоступлениеИВыбытиеИмуществаработУслугПрав))
		|	КОНЕЦ КАК СчетУчетаРасчетовСКонтрагентомНУ,
		|	ТаблицаРасшифровкаПлатежа.СчетУчетаРасчетовПоАвансам КАК СчетУчетаРасчетовПоАвансам,
		|	ТаблицаРасшифровкаПлатежа.СтавкаНДС КАК СтавкаНДС,
		|	ТаблицаРасшифровкаПлатежа.СуммаПлатежа КАК СуммаПлатежа,
		|	ВЫБОР
		|		КОГДА ТаблицаРасшифровкаПлатежа.ДоговорКонтрагента.ВалютаВзаиморасчетов = &ВалютаРеглУчета
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК РасчетыВВалюте,
		|	ВЫРАЗИТЬ(ВЫБОР
		|			КОГДА Реквизиты.ДокументВРеглВалюте
		|				ТОГДА ТаблицаРасшифровкаПлатежа.СуммаПлатежа
		|			ИНАЧЕ ВЫБОР
		|					КОГДА ЕСТЬNULL(ТаблицаРасшифровкаПлатежа.КратностьВзаиморасчетов, 0) = 0
		|						ТОГДА 0
		|					ИНАЧЕ ТаблицаРасшифровкаПлатежа.СуммаПлатежа * (ТаблицаРасшифровкаПлатежа.КурсВзаиморасчетов / ТаблицаРасшифровкаПлатежа.КратностьВзаиморасчетов)
		|				КОНЕЦ
		|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаРегл,
		|	ВЫРАЗИТЬ(ВЫБОР
		|			КОГДА Реквизиты.ДокументВРеглВалюте
		|				ТОГДА ТаблицаРасшифровкаПлатежа.СуммаНДС
		|			ИНАЧЕ ВЫБОР
		|					КОГДА ЕСТЬNULL(ТаблицаРасшифровкаПлатежа.КратностьВзаиморасчетов, 0) = 0
		|						ТОГДА 0
		|					ИНАЧЕ ТаблицаРасшифровкаПлатежа.СуммаНДС * (ТаблицаРасшифровкаПлатежа.КурсВзаиморасчетов / ТаблицаРасшифровкаПлатежа.КратностьВзаиморасчетов)
		|				КОНЕЦ
		|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаНДСРегл,
		|	ТаблицаРасшифровкаПлатежа.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
		|	ТаблицаРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
		|	ТаблицаРасшифровкаПлатежа.СуммаНДС КАК СуммаНДС,
		|	ТаблицаРасшифровкаПлатежа.СчетНаОплату КАК СчетНаОплату	
		|ПОМЕСТИТЬ ТаблицаРасшифровкаПлатежа
		|ИЗ
		|	Документ.ПлатежноеПоручениеИсходящее.РасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежа
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО ТаблицаРасшифровкаПлатежа.Ссылка = Реквизиты.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Типовой КАК Типовой
		|		ПО ТаблицаРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентомБУ = Типовой.Ссылка
		|ГДЕ
		|	ТаблицаРасшифровкаПлатежа.Ссылка = &Ссылка"
		 + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
		
		НомераТаблиц.Вставить("ВременнаяТаблицаРасшифровкаПлатежа", НомераТаблиц.Количество());
		
	КонецЕсли;
	
	Если Реквизиты.ЕстьПеречислениеЗаработнойПлаты Тогда	
		ТекстЗапроса = ТекстЗапроса + 
		"ВЫБРАТЬ
		|	ПеречислениеЗаработнойПлаты.Ссылка,
		|	ПеречислениеЗаработнойПлаты.Ведомость
		|ПОМЕСТИТЬ ВедомостиЗП
		|ИЗ
		|	Документ.ПлатежноеПоручениеИсходящее.ПеречислениеЗаработнойПлаты КАК ПеречислениеЗаработнойПлаты
		|ГДЕ
		|	ПеречислениеЗаработнойПлаты.Ссылка = &Ссылка"
		+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
		
		НомераТаблиц.Вставить("ВременнаяТаблицаВедомостиЗП", НомераТаблиц.Количество());
	КонецЕсли;
	
	Если Реквизиты.ЕстьПеречислениеПенсионныхВзносов
		ИЛИ Реквизиты.ЕстьПеречислениеПенсионныхВзносовРаботодателя	
		ИЛИ Реквизиты.ЕстьПеречислениеПрофессиональныхПенсионныхВзносов Тогда	
		ТекстЗапроса = ТекстЗапроса + 
		"ВЫБРАТЬ
		|	ПеречислениеПенсионныхВзносов.Ссылка,
		|	ПеречислениеПенсионныхВзносов.Документ КАК Ведомость
		|ПОМЕСТИТЬ ВедомостиОПВ
		|ИЗ
		|	Документ.ПлатежноеПоручениеИсходящее.ПеречислениеПенсионныхВзносов КАК ПеречислениеПенсионныхВзносов
		|ГДЕ
		|	ПеречислениеПенсионныхВзносов.Ссылка = &Ссылка"
		+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
		
		НомераТаблиц.Вставить("ВременнаяТаблицаВедомостиОПВ", НомераТаблиц.Количество());
	КонецЕсли;
	
	Если Реквизиты.ЕстьПеречислениеСоциальныхОтчислений 
		ИЛИ Реквизиты.ЕстьПеречислениеВзносовОСМС
		ИЛИ Реквизиты.ЕстьПеречислениеОтчисленийОСМС Тогда	
		ТекстЗапроса = ТекстЗапроса + 
		"ВЫБРАТЬ
		|	ПеречислениеСоциальныхОтчислений.Ссылка,
		|	ПеречислениеСоциальныхОтчислений.Документ КАК Ведомость
		|ПОМЕСТИТЬ ВедомостиСО
		|ИЗ
		|	Документ.ПлатежноеПоручениеИсходящее.ПеречислениеСоциальныхОтчислений КАК ПеречислениеСоциальныхОтчислений
		|ГДЕ
		|	ПеречислениеСоциальныхОтчислений.Ссылка = &Ссылка"
		+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
		
		НомераТаблиц.Вставить("ВременнаяТаблицаВедомостиСО", НомераТаблиц.Количество());
	КонецЕсли;
	
	Если Реквизиты.ЕстьПеречислениеЕдиногоПлатежа Тогда	
		ТекстЗапроса = ТекстЗапроса + 
		"ВЫБРАТЬ
		|	ПеречислениеЕдиныхПлатежей.Ссылка,
		|	ПеречислениеЕдиныхПлатежей.Документ КАК Ведомость
		|ПОМЕСТИТЬ ВедомостиЕП
		|ИЗ
		|	Документ.ПлатежноеПоручениеИсходящее.ПеречислениеЕдиныхПлатежей КАК ПеречислениеЕдиныхПлатежей
		|ГДЕ
		|	ПеречислениеЕдиныхПлатежей.Ссылка = &Ссылка"
		+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
		
		НомераТаблиц.Вставить("ВременнаяТаблицаВедомостиЕП", НомераТаблиц.Количество());
	КонецЕсли; 
	
	Если Реквизиты.ЕстьПеречислениеПрочихВыплат Тогда	
		ТекстЗапроса = ТекстЗапроса + 
		"ВЫБРАТЬ
		|	ПеречислениеПрочихВыплат.Ссылка,
		|	ПеречислениеПрочихВыплат.Документ КАК Ведомость
		|ПОМЕСТИТЬ ВедомостиПрочиеВыплаты
		|ИЗ
		|	Документ.ПлатежноеПоручениеИсходящее.ПеречислениеПрочихВыплат КАК ПеречислениеПрочихВыплат
		|ГДЕ
		|	ПеречислениеПрочихВыплат.Ссылка = &Ссылка"
		+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
		
		НомераТаблиц.Вставить("ВременнаяТаблицаВедомостиПрочихВыплат", НомераТаблиц.Количество());
	КонецЕсли;
	
	Если Реквизиты.ЕстьПеречислениеПрочихДоходов Тогда
		ТекстЗапроса = ТекстЗапроса + 
		"ВЫБРАТЬ
		|	ПеречислениеПрочихДоходов.Ссылка,
		|	ПеречислениеПрочихДоходов.Документ КАК Ведомость
		|ПОМЕСТИТЬ ВедомостиПрочиеДоходы
		|ИЗ
		|	Документ.ПлатежноеПоручениеИсходящее.ПеречислениеПрочихДоходов КАК ПеречислениеПрочихДоходов
		|ГДЕ
		|	ПеречислениеПрочихДоходов.Ссылка = &Ссылка"
		+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
		
		НомераТаблиц.Вставить("ВременнаяТаблицаВедомостиПрочихДоходов", НомераТаблиц.Количество());
	КонецЕсли;
	
	Если Реквизиты.ЕстьПеречислениеПоИсполнительнымЛистам Тогда	
		ТекстЗапроса = ТекстЗапроса + 
		"ВЫБРАТЬ
		|	ПеречислениеПоИсполнительнымЛистам.Ссылка,
		|	ПеречислениеПоИсполнительнымЛистам.Документ КАК Ведомость
		|ПОМЕСТИТЬ ВедомостиПоИЛ
		|ИЗ
		|	Документ.ПлатежноеПоручениеИсходящее.ПеречислениеПоИсполнительнымЛистам КАК ПеречислениеПоИсполнительнымЛистам
		|ГДЕ
		|	ПеречислениеПоИсполнительнымЛистам.Ссылка = &Ссылка"
		+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
		
		НомераТаблиц.Вставить("ВременнаяТаблицаВедомостиПоИЛ", НомераТаблиц.Количество());
	КонецЕсли; 
	
	Если Реквизиты.ЕстьПеречислениеНДССИзмененнымСрокомУплаты Тогда	
		
		ТекстЗапроса =  ТекстЗапроса +
		"ВЫБРАТЬ
		|	ТаблицаПеречислениеНДССИзмененнымСрокомУплаты.Ссылка,
		|	ТаблицаПеречислениеНДССИзмененнымСрокомУплаты.Контрагент,
		|	ТаблицаПеречислениеНДССИзмененнымСрокомУплаты.Договор,
		|	ТаблицаПеречислениеНДССИзмененнымСрокомУплаты.СуммаПлатежа КАК СуммаНДС,
		|	ТаблицаПеречислениеНДССИзмененнымСрокомУплаты.СтавкаНДС КАК СтавкаНДС,
		|	ТаблицаПеречислениеНДССИзмененнымСрокомУплаты.ГТД,
		|	ТаблицаПеречислениеНДССИзмененнымСрокомУплаты.СрокПлатежа,
		|	ТаблицаПеречислениеНДССИзмененнымСрокомУплаты.НДСВидПоступления КАК ВидОперацииПоступления,
		|	ТаблицаПеречислениеНДССИзмененнымСрокомУплаты.НДСВидОборота КАК ВидОборота,
		|	ТаблицаПеречислениеНДССИзмененнымСрокомУплаты.СчетУчетаРасчетовСКонтрагентом,
		|	ТаблицаПеречислениеНДССИзмененнымСрокомУплаты.СчетУчетаНДС,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ТаблицаПеречислениеНДССИзмененнымСрокомУплаты.СтавкаНДС.Ставка, 0) = 0
		|			ТОГДА 0
		|		ИНАЧЕ ТаблицаПеречислениеНДССИзмененнымСрокомУплаты.СуммаПлатежа * 100 / ТаблицаПеречислениеНДССИзмененнымСрокомУплаты.СтавкаНДС.Ставка
		|	КОНЕЦ КАК СуммаБезНДС,
		|	ЕСТЬNULL(Типовой.СчетНУ, ЗНАЧЕНИЕ(ПланСчетов.Налоговый.НалогНаДобавленнуюСтоимостьКВозмещению)) КАК СчетНДСНУ
		|ПОМЕСТИТЬ ТаблицаПеречислениеНДССИзмененнымСрокомУплаты
		|ИЗ
		|	Документ.ПлатежноеПоручениеИсходящее.ПеречислениеНДССИзмененнымСрокомУплаты КАК ТаблицаПеречислениеНДССИзмененнымСрокомУплаты
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Типовой КАК Типовой
		|		ПО ТаблицаПеречислениеНДССИзмененнымСрокомУплаты.СчетУчетаНДС = Типовой.Ссылка
		|ГДЕ
		|	ТаблицаПеречислениеНДССИзмененнымСрокомУплаты.Ссылка = &Ссылка"
		 + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
		
		НомераТаблиц.Вставить("ВременнаяТаблицаПеречислениеНДССИзмененнымСрокомУплаты", НомераТаблиц.Количество());
	КонецЕсли;         	
	
	Если Реквизиты.ЕстьПеречислениеВПодотчет Тогда	
		
		ТекстЗапроса =  ТекстЗапроса +
		"ВЫБРАТЬ
		|	ТаблицаПеречислениеВПодотчет.Ссылка КАК Ссылка,
		|	ТаблицаПеречислениеВПодотчет.ФизЛицо КАК ФизЛицо,
		|	ТаблицаПеречислениеВПодотчет.ВидЗадолженностиПодотчетногоЛица КАК ВидЗадолженностиПодотчетногоЛица,
		|	ТаблицаПеречислениеВПодотчет.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
		|	ЕСТЬNULL(Типовой.СчетНУ, ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ЗадолженностьПодотчетныхЛиц)) КАК СчетУчетаНУ,
		|	ТаблицаПеречислениеВПодотчет.СуммаПлатежа,
		|	ТаблицаПеречислениеВПодотчет.СчетУчета,
		|	ТаблицаПеречислениеВПодотчет.НомерКартСчета
		|ПОМЕСТИТЬ ТаблицаПеречислениеВПодотчет
		|ИЗ
		|	Документ.ПлатежноеПоручениеИсходящее.ПеречислениеВПодотчет КАК ТаблицаПеречислениеВПодотчет
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Типовой КАК Типовой
		|		ПО ТаблицаПеречислениеВПодотчет.СчетУчета = Типовой.Ссылка
		|ГДЕ
		|	ТаблицаПеречислениеВПодотчет.Ссылка = &Ссылка"
		 + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
		
		НомераТаблиц.Вставить("ВременнаяТаблицаПеречислениеПеречислениеВПодотчет", НомераТаблиц.Количество());
	КонецЕсли;         	

	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаПогашениеЗадолженности(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	// Процедура погашения задолженности выполняется для операций:
	// - ОплатаПокупателя
	// - РасчетыПоКредитамИЗаймам
	// - ПрочиеРасчетыСКонтрагентами 
	// - ВозвратДенежныхСредствПоставщиком
	// - ОплатаОтСтруктурногоПоразделения
	// - РасчетыПоДоходуОтРазовыхВыплатСКонтрагентами
	          	
	Если Реквизиты.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ОплатаПоставщику
		ИЛИ Реквизиты.ВидОперации = Перечисления.ВидыОперацийППИсходящее.РасчетыПоКредитамИЗаймамСКонтрагентами
		ИЛИ Реквизиты.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПрочиеРасчетыСКонтрагентами 
		ИЛИ Реквизиты.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ОплатаСтруктурномуПодразделению 
		ИЛИ Реквизиты.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ВозвратДенежныхСредствПокупателю 
		ИЛИ Реквизиты.ВидОперации = Перечисления.ВидыОперацийППИсходящее.РасчетыПоДоходуОтРазовыхВыплатСКонтрагентами Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаРасшифровкаПлатежа.НомерСтроки КАК НомерСтроки,
		|	Реквизиты.Контрагент КАК Контрагент,
		|	ТаблицаРасшифровкаПлатежа.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	ТаблицаРасшифровкаПлатежа.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
		|	ТаблицаРасшифровкаПлатежа.ВедениеВзаиморасчетов КАК ВедениеВзаиморасчетов,
		|	ТаблицаРасшифровкаПлатежа.РасчетыВВалюте КАК РасчетыВВалюте,
		|	ТаблицаРасшифровкаПлатежа.Сделка КАК ДокументРасчетов,
		|	ВЫБОР
		|		КОГДА Реквизиты.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийППИсходящее.ВозвратДенежныхСредствПокупателю)
		|			ТОГДА ТаблицаРасшифровкаПлатежа.СчетУчетаРасчетовПоАвансам
		|		ИНАЧЕ ТаблицаРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентомБУ
		|	КОНЕЦ КАК СчетРасчетов,
		|	ТаблицаРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентомНУ КАК СчетРасчетовНУ,
		|	ВЫБОР
		|		КОГДА Реквизиты.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийППИсходящее.ОплатаПоставщику)
		|				ИЛИ Реквизиты.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийППИсходящее.ОплатаСтруктурномуПодразделению)
		|				ИЛИ Реквизиты.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийППИсходящее.РасчетыПоДоходуОтРазовыхВыплатСКонтрагентами)
		|			ТОГДА ТаблицаРасшифровкаПлатежа.СчетУчетаРасчетовПоАвансам
		|		ИНАЧЕ ТаблицаРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентомБУ
		|	КОНЕЦ КАК СчетАвансов,
		|	Реквизиты.СчетБанк КАК КорСчет,
		|	Реквизиты.СчетОрганизации КАК КорСубконто1,
		|	ТаблицаРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств КАК КорСубконто2,
		|	НЕОПРЕДЕЛЕНО КАК КорСубконто3,
		|	Реквизиты.СчетБанкНУ КАК КорСчетНУ,
		|	Реквизиты.СчетОрганизации КАК КорСубконтоНУ1,
		|	ТаблицаРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств КАК КорСубконтоНУ2,
		|	НЕОПРЕДЕЛЕНО КАК КорСубконтоНУ3,
		|	ВЫБОР
		|		КОГДА Реквизиты.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийППИсходящее.ПрочиеРасчетыСКонтрагентами)
		|			ТОГДА &СодержаниеПрочиеРасчеты
		|		КОГДА Реквизиты.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийППИсходящее.РасчетыПоКредитамИЗаймамСКонтрагентами)
		|			ТОГДА &СодержаниеРасчетыКредит
		|		ИНАЧЕ """"
		|	КОНЕЦ КАК Содержание,
		|	ТаблицаРасшифровкаПлатежа.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
		|	ТаблицаРасшифровкаПлатежа.СуммаРегл КАК СуммаРегл
		|ИЗ
		|	ТаблицаРасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежа
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО ТаблицаРасшифровкаПлатежа.Ссылка = Реквизиты.Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТаблицаРасшифровкаПлатежа.НомерСтроки";

	ИначеЕсли Реквизиты.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеПрочихДоходов Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	1 КАК НомерСтроки,
		|	ВедомостьПрочихДоходовВыплаты.ФизЛицо КАК Контрагент,
		|	ВедомостьПрочихДоходовВыплаты.ДоговорКонтрагента КАК ДоговорКонтрагента,
        |	ДоговорыКонтрагентов.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
		|	ДоговорыКонтрагентов.ВедениеВзаиморасчетов КАК ВедениеВзаиморасчетов,
		|	ЛОЖЬ КАК РасчетыВВалюте,
		|	ЗНАЧЕНИЕ(Документ.ПоступлениеТоваровУслуг.ПустаяСсылка) КАК ДокументРасчетов,
		|	Реквизиты.СчетУчетаРасчетовСКонтрагентомБУ КАК СчетРасчетов,
		|	Реквизиты.СчетУчетаРасчетовСКонтрагентомНУ КАК СчетРасчетовНУ,
		|	ЗНАЧЕНИЕ(ПланСчетов.Типовой.ПустаяСсылка) КАК СчетАвансов,
		|	Реквизиты.СчетБанк КАК КорСчет,
		|	Реквизиты.СчетОрганизации КАК КорСубконто1,
		|	ЕСТЬNULL(ТаблицаРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств, Реквизиты.СтатьяДвиженияДенежныхСредств) КАК КорСубконто2,
		|	НЕОПРЕДЕЛЕНО КАК КорСубконто3,
		|	Реквизиты.СчетБанкНУ КАК КорСчетНУ,
		|	Реквизиты.СчетОрганизации КАК КорСубконтоНУ1,
		|	ЕСТЬNULL(ТаблицаРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств, Реквизиты.СтатьяДвиженияДенежныхСредств) КАК КорСубконтоНУ2,
		|	НЕОПРЕДЕЛЕНО КАК КорСубконтоНУ3,
		|	&СодержаниеПеречислениеПрочихДоходов КАК Содержание,
		|	ВедомостьПрочихДоходовВыплаты.СуммаКВыплате КАК СуммаВзаиморасчетов,
		|	ВедомостьПрочихДоходовВыплаты.СуммаКВыплате КАК СуммаРегл
		|ИЗ
		|	ВедомостиПрочиеДоходы КАК ВедомостиПрочиеДоходы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО ВедомостиПрочиеДоходы.Ссылка = Реквизиты.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВедомостьПрочихДоходов.Выплаты КАК ВедомостьПрочихДоходовВыплаты
		|		ПО ВедомостиПрочиеДоходы.Ведомость = ВедомостьПрочихДоходовВыплаты.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|		ПО ВедомостьПрочихДоходовВыплаты.ДоговорКонтрагента = ДоговорыКонтрагентов.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаРасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежа
		|		ПО ВедомостиПрочиеДоходы.Ссылка = ТаблицаРасшифровкаПлатежа.Ссылка
		|
		|";
		
	Иначе
		ПараметрыПроведения.Вставить("РасшифровкаПлатежа", Неопределено);
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить("РасшифровкаПлатежа", НомераТаблиц.Количество());
	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаПрочееСписание(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	// Процедура прочего поступления вызывается для операций:
	// - ПрочееСписаниеБезналичныхДенежныхСредств
	// - ПеречислениеНалога
	// - ПеречислениеНДССИзмененнымСрокомУплаты (в части отражения налога) 
	// - Перевод на другой счет организации
	
	ТекстЗапроса = "";
	Если Реквизиты.ВидОперации    = Перечисления.ВидыОперацийППИсходящее.ПеречислениеНалога 
		ИЛИ Реквизиты.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПрочееСписаниеБезналичныхДенежныхСредств
		ИЛИ Реквизиты.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеНДССИзмененнымСрокомУплаты Тогда
		ТекстЗапроса = 	"ВЫБРАТЬ
		               	|	Реквизиты.Дата КАК Период,
		               	|	Реквизиты.Организация КАК Организация,
		               	|	Реквизиты.ВалютаДокумента КАК ВалютаДокумента,
		               	|	Реквизиты.Контрагент КАК Контрагент,
		               	|	&НеобходимостьОтраженияВНУ КАК НеобходимостьОтраженияВНУ,
		               	|	Реквизиты.ВидУчетаНУ КАК ВидУчетаНУ,
		               	|	Реквизиты.СчетУчетаРасчетовСКонтрагентомБУ КАК СчетДтБУ,
		               	|	Реквизиты.СубконтоДтБУ1 КАК СубконтоДтБУ1,
		               	|	Реквизиты.СубконтоДтБУ2 КАК СубконтоДтБУ2,
		               	|	Реквизиты.СубконтоДтБУ3 КАК СубконтоДтБУ3,
		               	|	Реквизиты.СчетУчетаРасчетовСКонтрагентомНУ КАК СчетДтНУ,
		               	|	Реквизиты.СубконтоДтНУ1 КАК СубконтоДтНУ1,
		               	|	Реквизиты.СубконтоДтНУ2 КАК СубконтоДтНУ2,
		               	|	Реквизиты.СубконтоДтНУ3 КАК СубконтоДтНУ3,
		               	|	Реквизиты.СчетБанк КАК СчетКтБУ,
		               	|	Реквизиты.СчетОрганизации КАК СубконтоКтБУ1,
		               	|	ТаблицаРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств КАК СубконтоКтБУ2,
		               	|	НЕОПРЕДЕЛЕНО КАК СубконтоКтБУ3,
		               	|	Реквизиты.СчетБанкНУ КАК СчетКтНУ,
		               	|	Реквизиты.СчетОрганизации КАК СубконтоКтНУ1,
		               	|	ТаблицаРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств КАК СубконтоКтНУ2,
		               	|	НЕОПРЕДЕЛЕНО КАК СубконтоКтНУ3,
		               	|	Реквизиты.СтруктурноеПодразделениеОтправитель КАК СтруктурноеПодразделениеОтправитель,
		               	|	ВЫБОР
		               	|		КОГДА Реквизиты.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийППИсходящее.ПрочееСписаниеБезналичныхДенежныхСредств)
		               	|			ТОГДА Реквизиты.СтруктурноеПодразделениеПолучатель
		               	|		ИНАЧЕ Реквизиты.СтруктурноеПодразделениеОтправитель
		               	|	КОНЕЦ КАК СтруктурноеПодразделениеПолучатель,
		               	|	ВЫБОР
		               	|		КОГДА Реквизиты.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийППИсходящее.ПрочееСписаниеБезналичныхДенежныхСредств)
		               	|				ИЛИ Реквизиты.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийППИсходящее.ПеречислениеНДССИзмененнымСрокомУплаты)
		               	|			ТОГДА &СодержаниеПрочее
		               	|		КОГДА Реквизиты.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийППИсходящее.ПеречислениеНалога)
		               	|			ТОГДА &СодержаниеНалог
		               	|		ИНАЧЕ """"
		               	|	КОНЕЦ КАК Содержание,
		               	|	Реквизиты.СуммаДокумента КАК ВалютнаяСумма,
		               	|	ВЫРАЗИТЬ(Реквизиты.СуммаДокумента * &КоэффициентРеглВалюты КАК ЧИСЛО(15, 2)) КАК СуммаРегл
		               	|ИЗ
		               	|	Реквизиты КАК Реквизиты
		               	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаРасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежа
		               	|		ПО (ИСТИНА)"
		+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
		
		НомераТаблиц.Вставить("РеквизитыПрочее", НомераТаблиц.Количество());
		
	ИначеЕсли Реквизиты.ВидОперации    = Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет  Тогда
		ТекстЗапроса = 	"ВЫБРАТЬ
		               	|	Реквизиты.Дата КАК Период,
		               	|	Реквизиты.Организация КАК Организация,
		               	|	Реквизиты.ВалютаДокумента КАК ВалютаДокумента,
		               	|	Реквизиты.Контрагент КАК Контрагент,
		               	|	&НеобходимостьОтраженияВНУ КАК НеобходимостьОтраженияВНУ,
		               	|	Реквизиты.ВидУчетаНУ КАК ВидУчетаНУ,
		               	|	Реквизиты.СчетУчетаРасчетовСКонтрагентомБУ КАК СчетДтБУ,
		               	|	Реквизиты.СчетКонтрагента КАК СубконтоДтБУ1,
		               	|	Реквизиты.СтатьяДвиженияДенежныхСредств КАК СубконтоДтБУ2,
		               	|	НЕОПРЕДЕЛЕНО КАК СубконтоДтБУ3,
		               	|	ВЫБОР
		               	|		КОГДА НЕ СчетаУчетаДенежныхСредств.СчетУчетаНУ ЕСТЬ NULL 
		               	|			ТОГДА ВЫБОР
		               	|					КОГДА СчетаУчетаДенежныхСредств.СчетУчетаНУ = ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ПустаяСсылка)
		               	|						ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ДенежныеСредстваВКассеИНаРасчетныхСчетах)
		               	|					ИНАЧЕ СчетаУчетаДенежныхСредств.СчетУчетаНУ
		               	|				КОНЕЦ
		               	|		ИНАЧЕ ЕСТЬNULL(Типовой.СчетНУ, ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ДенежныеСредстваВКассеИНаРасчетныхСчетах))
		               	|	КОНЕЦ КАК СчетДтНУ,
		               	|	Реквизиты.СчетКонтрагента КАК СубконтоДтНУ1,
		               	|	Реквизиты.СтатьяДвиженияДенежныхСредств КАК СубконтоДтНУ2,
		               	|	НЕОПРЕДЕЛЕНО КАК СубконтоДтНУ3,
		               	|	Реквизиты.СчетБанк КАК СчетКтБУ,
		               	|	Реквизиты.СчетОрганизации КАК СубконтоКтБУ1,
		               	|	ТаблицаРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств КАК СубконтоКтБУ2,
		               	|	НЕОПРЕДЕЛЕНО КАК СубконтоКтБУ3,
		               	|	Реквизиты.СчетБанкНУ КАК СчетКтНУ,
		               	|	Реквизиты.СчетОрганизации КАК СубконтоКтНУ1,
		               	|	ТаблицаРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств КАК СубконтоКтНУ2,
		               	|	НЕОПРЕДЕЛЕНО КАК СубконтоКтНУ3,
		               	|	Реквизиты.СтруктурноеПодразделениеОтправитель КАК СтруктурноеПодразделениеОтправитель,
		               	|	Реквизиты.СтруктурноеПодразделениеПолучатель КАК СтруктурноеПодразделениеПолучатель,
		               	|	&СодержаниеПеревод КАК Содержание,
		               	|	Реквизиты.СуммаДокумента КАК ВалютнаяСумма,
		               	|	ВЫРАЗИТЬ(Реквизиты.СуммаДокумента * &КоэффициентРеглВалюты КАК ЧИСЛО(15, 2)) КАК СуммаРегл
		               	|ИЗ
		               	|	Реквизиты КАК Реквизиты
		               	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаРасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежа
		               	|		ПО (ТаблицаРасшифровкаПлатежа.Ссылка = Реквизиты.Ссылка)
		               	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаУчетаДенежныхСредств КАК СчетаУчетаДенежныхСредств
		               	|		ПО Реквизиты.СчетОрганизации = СчетаУчетаДенежныхСредств.ОбъектУчета
		               	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Типовой КАК Типовой
		               	|		ПО Реквизиты.СчетУчетаРасчетовСКонтрагентомБУ = Типовой.Ссылка"
		+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
		
		НомераТаблиц.Вставить("РеквизитыПрочее", НомераТаблиц.Количество());		
	Иначе 		
		ПараметрыПроведения.Вставить("РеквизитыПрочее", Неопределено);		
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаПеречислениеНДССИзмененнымСрокомУплаты(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	ТекстЗапроса = "";

	Если НЕ Реквизиты.ЕстьПеречислениеНДССИзмененнымСрокомУплаты Тогда
		ПараметрыПроведения.Вставить("РеквизитыПеречислениеНДССИзмененнымСрокомУплаты", Неопределено);
		ПараметрыПроведения.Вставить("ТаблицаПеречислениеНДССИзмененнымСрокомУплаты", Неопределено);
	Иначе
		ТекстЗапроса = "ВЫБРАТЬ
		               |	Реквизиты.Ссылка КАК Регистратор,
		               |	Реквизиты.Дата КАК Период,
		               |	Реквизиты.Организация КАК Организация,
		               |	Реквизиты.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
		               |	&Налогоплательщик КАК Налогоплательщик,
		               |	Реквизиты.ВидУчетаНУ КАК ВидУчетаНУ,
		               |	&НеобходимостьОтраженияВНУ КАК НеобходимостьОтраженияВНУ
		               |ИЗ
		               |	Реквизиты КАК Реквизиты
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ТаблицаПеречислениеНДССИзмененнымСрокомУплаты.Контрагент,
		               |	ТаблицаПеречислениеНДССИзмененнымСрокомУплаты.Договор,
		               |	ВЫРАЗИТЬ(ТаблицаПеречислениеНДССИзмененнымСрокомУплаты.СуммаНДС * &КоэффициентРеглВалюты КАК ЧИСЛО(15, 2)) КАК СуммаНДС,
		               |	ВЫРАЗИТЬ(ТаблицаПеречислениеНДССИзмененнымСрокомУплаты.СуммаБезНДС * &КоэффициентРеглВалюты КАК ЧИСЛО(15, 2)) КАК СуммаБезНДС,
		               |	ВЫРАЗИТЬ(ТаблицаПеречислениеНДССИзмененнымСрокомУплаты.СуммаНДС * &КоэффициентРеглВалюты КАК ЧИСЛО(15, 2)) КАК УплаченныйНДС,
		               |	ТаблицаПеречислениеНДССИзмененнымСрокомУплаты.СтавкаНДС,
		               |	ТаблицаПеречислениеНДССИзмененнымСрокомУплаты.ГТД,
		               |	ТаблицаПеречислениеНДССИзмененнымСрокомУплаты.СрокПлатежа,
		               |	ТаблицаПеречислениеНДССИзмененнымСрокомУплаты.ВидОперацииПоступления КАК ВидОперацииПоступления,
		               |	ТаблицаПеречислениеНДССИзмененнымСрокомУплаты.ВидОборота КАК ВидОборота,
		               |	ТаблицаПеречислениеНДССИзмененнымСрокомУплаты.СчетУчетаРасчетовСКонтрагентом,
		               |	ТаблицаПеречислениеНДССИзмененнымСрокомУплаты.СчетУчетаНДС,
		               |	ЗНАЧЕНИЕ(Перечисление.ВидыНДС.НДССИзменениемСрокаУплаты) КАК ВидНалогаНДС,
		               |	Реквизиты.Номер КАК НомерПлатежногоДокумента,
		               |	Реквизиты.Дата КАК ДатаПлатежногоДокумента,
		               |	Реквизиты.Номер КАК НомерВходящегоДокумента,
		               |	Реквизиты.Дата КАК ДатаВходящегоДокумента,
		               |	ВЫРАЗИТЬ(""Платежное поручение исходящее"" КАК СТРОКА(150)) КАК ВидВходящегоДокумента,
		               |	&СодержаниеНДС КАК Содержание,
		               |	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
		               |	ЗНАЧЕНИЕ(Перечисление.ВидыВзаиморасчетовСБюджетом.Уплата) КАК СпособПогашения,
		               |	ЗНАЧЕНИЕ(Справочник.НалогиСборыОтчисления.НалогНаДобавленнуюСтоимость) КАК СубконтоДт1,
		               |	ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог) КАК СубконтоДт2,
		               |	ЗНАЧЕНИЕ(Справочник.НалогиСборыОтчисления.НалогНаДобавленнуюСтоимостьСИзмененнымСрокомУплаты) КАК СубконтоКт1,
		               |	ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог) КАК СубконтоКт2,
		               |	ТаблицаПеречислениеНДССИзмененнымСрокомУплаты.СчетУчетаНДС КАК СчетДт,
		               |	ТаблицаПеречислениеНДССИзмененнымСрокомУплаты.СчетУчетаНДС КАК СчетКт,
		               |	ТаблицаПеречислениеНДССИзмененнымСрокомУплаты.СчетНДСНУ КАК СчетДтНУ,
		               |	ТаблицаПеречислениеНДССИзмененнымСрокомУплаты.СчетНДСНУ КАК СчетКтНУ,
		               |	ЗНАЧЕНИЕ(Справочник.НалогиСборыОтчисления.НалогНаДобавленнуюСтоимость) КАК СубконтоДтНУ1,
		               |	ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог) КАК СубконтоДтНУ2,
		               |	ЗНАЧЕНИЕ(Справочник.НалогиСборыОтчисления.НалогНаДобавленнуюСтоимостьСИзмененнымСрокомУплаты) КАК СубконтоКтНУ1,
		               |	ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог) КАК СубконтоКтНУ2
		               |ИЗ
		               |	ТаблицаПеречислениеНДССИзмененнымСрокомУплаты КАК ТаблицаПеречислениеНДССИзмененнымСрокомУплаты
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		               |		ПО ТаблицаПеречислениеНДССИзмененнымСрокомУплаты.Ссылка = Реквизиты.Ссылка"

		+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
		
		НомераТаблиц.Вставить("РеквизитыПеречислениеНДССИзмененнымСрокомУплаты", НомераТаблиц.Количество());
		НомераТаблиц.Вставить("ТаблицаПеречислениеНДССИзмененнымСрокомУплаты", НомераТаблиц.Количество());
		
	КонецЕсли;
	         	
	Возврат ТекстЗапроса 
	
КонецФункции

Функция ТекстЗапросаКомиссияБанка(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	     	
	ТекстЗапроса = "";
	Если Реквизиты.ВключатьКомиссиюБанка Тогда		
		ТекстЗапроса = 	"ВЫБРАТЬ
		               	|	Реквизиты.Дата КАК Период,
		               	|	Реквизиты.Организация КАК Организация,
		               	|	Реквизиты.ВалютаДокумента КАК ВалютаДокумента,
		               	|	Реквизиты.СчетОрганизации.Банк.Контрагент КАК Контрагент,
		               	|	Реквизиты.СчетОрганизации.ДоговорКонтрагента КАК ДоговорКонтрагента,
		               	|	&НеобходимостьОтраженияВНУ КАК НеобходимостьОтраженияВНУ,
		               	|	Реквизиты.ВидУчетаНУ КАК ВидУчетаНУ,
		               	|	Реквизиты.СчетУчетаРасчетовСКонтрагентомБУ КАК СчетДтБУ,
		               	|	Реквизиты.СубконтоДтБУ1 КАК СубконтоДтБУ1,
		               	|	Реквизиты.СубконтоДтБУ2 КАК СубконтоДтБУ2,
		               	|	Реквизиты.СубконтоДтБУ3 КАК СубконтоДтБУ3,
		               	|	Реквизиты.СчетУчетаРасчетовСКонтрагентомНУ КАК СчетДтНУ,
		               	|	Реквизиты.СубконтоДтНУ1 КАК СубконтоДтНУ1,
		               	|	Реквизиты.СубконтоДтНУ2 КАК СубконтоДтНУ2,
		               	|	Реквизиты.СубконтоДтНУ3 КАК СубконтоДтНУ3,
		               	|	Реквизиты.СчетБанк КАК СчетКтБУ,
		               	|	Реквизиты.СчетОрганизации КАК СубконтоКтБУ1,
		               	|	Реквизиты.СтатьяДвиженияДенежныхСредств КАК СубконтоКтБУ2,
		               	|	НЕОПРЕДЕЛЕНО КАК СубконтоКтБУ3,
		               	|	Реквизиты.СчетБанкНУ КАК СчетКтНУ,
		               	|	Реквизиты.СчетОрганизации КАК СубконтоКтНУ1,
		               	|	Реквизиты.СтатьяДвиженияДенежныхСредств КАК СубконтоКтНУ2,
		               	|	НЕОПРЕДЕЛЕНО КАК СубконтоКтНУ3,
		               	|	Реквизиты.СтруктурноеПодразделениеОтправитель КАК СтруктурноеПодразделениеОтправитель,
		               	|	Реквизиты.СтруктурноеПодразделениеОтправитель КАК СтруктурноеПодразделениеПолучатель,
		               	|	&СодержаниеКомиссия КАК Содержание,
		               	|	Реквизиты.СуммаКомиссии КАК ВалютнаяСумма,
		               	|	ВЫРАЗИТЬ(Реквизиты.СуммаКомиссии * &КоэффициентРеглВалюты КАК ЧИСЛО(15, 2)) КАК СуммаРегл
		               	|ИЗ
		               	|	Реквизиты КАК Реквизиты
		               	|ГДЕ
		               	|	Реквизиты.СуммаКомиссии <> 0"
		+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета(); 		
		НомераТаблиц.Вставить("РеквизитыКомиссияБанка", НомераТаблиц.Количество());		
	Иначе
		ПараметрыПроведения.Вставить("РеквизитыКомиссияБанка", Неопределено);		
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаПеречислениеВПодотчет(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	ТекстЗапроса = "";

	Если НЕ Реквизиты.ЕстьПеречислениеВПодотчет Тогда
		ПараметрыПроведения.Вставить("РеквизитыПеречислениеВПодотчет", Неопределено);
		ПараметрыПроведения.Вставить("ТаблицаПеречислениеВПодотчет", Неопределено);
	Иначе
		ТекстЗапроса ="ВЫБРАТЬ
		              |	Реквизиты.Ссылка КАК Регистратор,
		              |	Реквизиты.Дата КАК Период,
		              |	Реквизиты.Организация КАК Организация,
		              |	Реквизиты.ВалютаДокумента КАК ВалютаДокумента,
		              |	Реквизиты.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
		              |	Реквизиты.ВидУчетаНУ КАК ВидУчетаНУ,
		              |	&НеобходимостьОтраженияВНУ КАК НеобходимостьОтраженияВНУ
		              |ИЗ
		              |	Реквизиты КАК Реквизиты
		              |;
		              |
		              |////////////////////////////////////////////////////////////////////////////////
		              |ВЫБРАТЬ
		              |	Реквизиты.Ссылка КАК Регистратор,
		              |	Реквизиты.Дата КАК Период,
		              |	Реквизиты.Организация КАК Организация,
		              |	Реквизиты.ВидУчетаНУ КАК ВидУчетаНУ,
		              |	&НеобходимостьОтраженияВНУ КАК НеобходимостьОтраженияВНУ,
		              |	ТаблицаПеречислениеВПодотчет.СчетУчета КАК СчетДтБУ,
		              |	ТаблицаПеречислениеВПодотчет.ФизЛицо КАК СубконтоДтБУ1,
		              |	ТаблицаПеречислениеВПодотчет.ВидЗадолженностиПодотчетногоЛица КАК СубконтоДтБУ2,
		              |	НЕОПРЕДЕЛЕНО КАК СубконтоДтБУ3,
		              |	ТаблицаПеречислениеВПодотчет.СчетУчетаНУ КАК СчетДтНУ,
		              |	ТаблицаПеречислениеВПодотчет.ФизЛицо КАК СубконтоДтНУ1,
		              |	ТаблицаПеречислениеВПодотчет.ВидЗадолженностиПодотчетногоЛица КАК СубконтоДтНУ2,
		              |	НЕОПРЕДЕЛЕНО КАК СубконтоДтНУ3,
		              |	Реквизиты.СчетБанк КАК СчетКтБУ,
		              |	Реквизиты.СчетОрганизации КАК СубконтоКтБУ1,
		              |	ТаблицаПеречислениеВПодотчет.СтатьяДвиженияДенежныхСредств КАК СубконтоКтБУ2,
		              |	НЕОПРЕДЕЛЕНО КАК СубконтоКтБУ3,
		              |	Реквизиты.СчетБанкНУ КАК СчетКтНУ,
		              |	Реквизиты.СчетОрганизации КАК СубконтоКтНУ1,
		              |	ТаблицаПеречислениеВПодотчет.СтатьяДвиженияДенежныхСредств КАК СубконтоКтНУ2,
		              |	НЕОПРЕДЕЛЕНО КАК СубконтоКтНУ3,
		              |	&СодержаниеПодотчет КАК Содержание,
		              |	ТаблицаПеречислениеВПодотчет.СуммаПлатежа КАК ВалютнаяСумма,
		              |	ВЫРАЗИТЬ(ТаблицаПеречислениеВПодотчет.СуммаПлатежа * &КоэффициентРеглВалюты КАК ЧИСЛО(15, 2)) КАК СуммаРегл
		              |ИЗ
		              |	ТаблицаПеречислениеВПодотчет КАК ТаблицаПеречислениеВПодотчет
		              |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		              |		ПО ТаблицаПеречислениеВПодотчет.Ссылка = Реквизиты.Ссылка" 
					  
					  + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
		
		НомераТаблиц.Вставить("РеквизитыПеречислениеВПодотчет", НомераТаблиц.Количество());
		НомераТаблиц.Вставить("ТаблицаПеречислениеВПодотчет", НомераТаблиц.Количество());
		
	КонецЕсли;
	         	
	Возврат ТекстЗапроса 
	
КонецФункции

Функция ТекстЗапросаПеречислениеЗП(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	ТекстЗапроса = "";
	
	Если НЕ Реквизиты.ЕстьПеречислениеЗаработнойПлаты Тогда
		ПараметрыПроведения.Вставить("ТаблицаПеречислениеЗП", Неопределено);
	Иначе 
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ЗарплатаКВыплатеОрганизацииЗарплата.Физлицо КАК ФизЛицо,
		|	ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка КАК Ведомость,
		|	НАЧАЛОПЕРИОДА(ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.ПериодНачисленияЗарплаты, МЕСЯЦ) КАК ПериодНачисленияЗарплаты,
		|	ВЫБОР
		|		КОГДА ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.ПериодНачисленияДепонированнойЗарплаты = ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА НАЧАЛОПЕРИОДА(ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.ПериодНачисленияЗарплаты, МЕСЯЦ)
		|		ИНАЧЕ НАЧАЛОПЕРИОДА(ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.ПериодНачисленияДепонированнойЗарплаты, МЕСЯЦ)
		|	КОНЕЦ КАК ПериодНачисленияДепонированнойЗарплаты,
		|	ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.СпособРасчетаСуммКВыплате КАК СпособРасчетаСуммКВыплате,
		|	СУММА(ЗарплатаКВыплатеОрганизацииЗарплата.Сумма) КАК Сумма,
		|	СУММА(ЗарплатаКВыплатеОрганизацииЗарплата.ДепонированнаяСумма) КАК ДепонированнаяСумма,
		|	ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.Организация КАК Организация,
		|	ЗарплатаКВыплатеОрганизацииЗарплата.ВыплаченностьЗарплаты,
		|	ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.Номер,
		|	ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.Дата,
		|	Реквизиты.СчетБанк КАК СчетКт,
		|	Реквизиты.СчетБанкНУ КАК СчетКтНУ,
		|	НЕОПРЕДЕЛЕНО КАК СчетКтНУПоУмолчанию,
		|	""ДенежныеСредства"" КАК ИмяСубконтоКт1,
		|	Реквизиты.СчетОрганизации КАК СубконтоКт1,
		|	""СтатьиДвиженияДенежныхСредств"" КАК ИмяСубконтоКт2,
		|	РасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств КАК СубконтоКт2
		|ИЗ
		|	Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацииЗарплата
		|
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВедомостиЗП КАК ВедомостиЗП
		|		ПО ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка = ВедомостиЗП.Ведомость
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям КАК РанееВыплаченныеСуммы
		|		ПО ЗарплатаКВыплатеОрганизацииЗарплата.Физлицо = РанееВыплаченныеСуммы.Физлицо
		|			И ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка = РанееВыплаченныеСуммы.Ведомость
		|			И (РанееВыплаченныеСуммы.Регистратор <> &Ссылка)
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО ИСТИНА
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаРасшифровкаПлатежа КАК РасшифровкаПлатежа
		|		ПО ИСТИНА
		|ГДЕ
		|	РанееВыплаченныеСуммы.Физлицо ЕСТЬ NULL 
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗарплатаКВыплатеОрганизацииЗарплата.Физлицо,
		|	ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка,
		|	НАЧАЛОПЕРИОДА(ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.ПериодНачисленияЗарплаты, МЕСЯЦ),
		|	ВЫБОР
		|		КОГДА ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.ПериодНачисленияДепонированнойЗарплаты = ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА НАЧАЛОПЕРИОДА(ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.ПериодНачисленияЗарплаты, МЕСЯЦ)
		|		ИНАЧЕ НАЧАЛОПЕРИОДА(ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.ПериодНачисленияДепонированнойЗарплаты, МЕСЯЦ)
		|	КОНЕЦ,
		|	ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.СпособРасчетаСуммКВыплате,
		|	ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.Организация,
		|	ЗарплатаКВыплатеОрганизацииЗарплата.ВыплаченностьЗарплаты,
		|	ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.Номер,
		|	ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.Дата,
		|	Реквизиты.СчетБанк,
		|	Реквизиты.СчетБанкНУ,
		|	Реквизиты.СчетОрганизации,
		|	РасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств"
		+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();

		НомераТаблиц.Вставить("ТаблицаПеречислениеЗП", НомераТаблиц.Количество());
		ПараметрыПроведения.Реквизиты.ЗаполнитьЗначения(УчетнаяПолитикаСервер.ПолучитьПорядокСписанияЗадолженностиПоЗарплате(Реквизиты.Организация, Реквизиты.Дата), "ПорядокСписанияЗадолженностиПоЗарплате");

	КонецЕсли;
	
	Возврат ТекстЗапроса;		
	
КонецФункции

Функция ТекстЗапросаПеречислениеОПВ(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	ТекстЗапроса = "";
	
	Если НЕ Реквизиты.ЕстьПеречислениеПенсионныхВзносов 
		И НЕ Реквизиты.ЕстьПеречислениеПенсионныхВзносовРаботодателя
		И НЕ Реквизиты.ЕстьПеречислениеПрофессиональныхПенсионныхВзносов Тогда
		ПараметрыПроведения.Вставить("ТаблицаПеречислениеОПВ", Неопределено);
	Иначе 
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ОПВПеречислениеВФонды.ФизЛицо ССЫЛКА Справочник.ФизическиеЛица
		|			ТОГДА ОПВПеречислениеВФонды.ФизЛицо
		|		ИНАЧЕ ОПВПеречислениеВФонды.ФизЛицо.ФизЛицо
		|	КОНЕЦ КАК ФизЛицоБУ,
		|	ОПВПеречислениеВФонды.ФизЛицо КАК ФизЛицо,
		|	НАЧАЛОПЕРИОДА(ОПВПеречислениеВФонды.Ссылка.ПериодРегистрации, МЕСЯЦ) КАК МесяцИсчисления,
		|	ОПВПеречислениеВФонды.Ссылка.ВидПлатежа КАК ВидПлатежа,
		|	ОПВПеречислениеВФонды.Ссылка.ВидОперации КАК ВидОперацииВедомости,
		|	ОПВПеречислениеВФонды.Ссылка.СпособРасчетаСуммКПеречислению КАК СпособРасчетаСуммКПеречислению,
		|	СУММА(ОПВПеречислениеВФонды.Сумма) КАК Сумма,
		|	Реквизиты.СчетБанк КАК СчетКт,
		|	Реквизиты.СчетБанкНУ КАК СчетКтНУ,
		|	НЕОПРЕДЕЛЕНО КАК СчетКтНУПоУмолчанию,
		|	""ДенежныеСредства"" КАК ИмяСубконтоКт1,
		|	Реквизиты.СчетОрганизации КАК СубконтоКт1,
		|	""СтатьиДвиженияДенежныхСредств"" КАК ИмяСубконтоКт2,
		|	РасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств КАК СубконтоКт2
		|ИЗ
		|	Документ.ОПВПеречислениеВФонды.ПенсионныеВзносы КАК ОПВПеречислениеВФонды
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВедомостиОПВ КАК ВедомостиОПВ
		|		ПО ОПВПеречислениеВФонды.Ссылка = ВедомостиОПВ.Ведомость
		|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО (ИСТИНА)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаРасшифровкаПлатежа КАК РасшифровкаПлатежа
		|		ПО (ИСТИНА)
		|
		|СГРУППИРОВАТЬ ПО
		|	ВЫБОР
		|		КОГДА ОПВПеречислениеВФонды.ФизЛицо ССЫЛКА Справочник.ФизическиеЛица
		|			ТОГДА ОПВПеречислениеВФонды.ФизЛицо
		|		ИНАЧЕ ОПВПеречислениеВФонды.ФизЛицо.ФизЛицо
		|	КОНЕЦ,
		|	ОПВПеречислениеВФонды.ФизЛицо,
		|	ОПВПеречислениеВФонды.Ссылка.ПериодРегистрации,
		|	ОПВПеречислениеВФонды.Ссылка.ВидПлатежа,
		|	ОПВПеречислениеВФонды.Ссылка.ВидОперации,
		|	ОПВПеречислениеВФонды.Ссылка.СпособРасчетаСуммКПеречислению,
		|	Реквизиты.СчетОрганизации,
		|	Реквизиты.СчетБанк,
		|	Реквизиты.СчетБанкНУ,
		|	РасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств"
		+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();

		НомераТаблиц.Вставить("ТаблицаПеречислениеОПВ", НомераТаблиц.Количество());
		
	КонецЕсли;
	
	Возврат ТекстЗапроса;		
	
КонецФункции

Функция ТекстЗапросаПеречислениеСО(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	ТекстЗапроса = "";
	
	Если НЕ Реквизиты.ЕстьПеречислениеСоциальныхОтчислений 
		И НЕ Реквизиты.ЕстьПеречислениеВзносовОСМС
		И НЕ Реквизиты.ЕстьПеречислениеОтчисленийОСМС Тогда
		ПараметрыПроведения.Вставить("ТаблицаПеречислениеСО", Неопределено);
	Иначе 
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СОПеречислениеВФонды.ФизЛицо,
		|	ВЫБОР
		|		КОГДА СОПеречислениеВФонды.ФизЛицо ССЫЛКА Справочник.ФизическиеЛица
		|			ТОГДА СОПеречислениеВФонды.ФизЛицо
		|		ИНАЧЕ СОПеречислениеВФонды.ФизЛицо.ФизЛицо
		|	КОНЕЦ КАК ФизЛицоБУ,
		|	СОПеречислениеВФонды.Ссылка.ВидОперации КАК ВидОперации,
		|	НАЧАЛОПЕРИОДА(СОПеречислениеВФонды.Ссылка.ПериодРегистрации, МЕСЯЦ) КАК МесяцИсчисления,
		|	СОПеречислениеВФонды.Ссылка.ВидПлатежа,
		|	СОПеречислениеВФонды.Ссылка.СпособРасчетаСуммКПеречислению,
		|	СУММА(СОПеречислениеВФонды.Сумма) КАК Сумма,
		|	Реквизиты.СчетБанк КАК СчетКт,
		|	Реквизиты.СчетБанкНУ КАК СчетКтНУ,
		|	НЕОПРЕДЕЛЕНО КАК СчетКтНУПоУмолчанию,
		|	""ДенежныеСредства"" КАК ИмяСубконтоКт1,
		|	Реквизиты.СчетОрганизации КАК СубконтоКт1,
		|	""СтатьиДвиженияДенежныхСредств"" КАК ИмяСубконтоКт2,
		|	РасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств КАК СубконтоКт2
		|ИЗ
		|	Документ.СОПеречислениеВФонды.СоциальныеОтчисления КАК СОПеречислениеВФонды
		|
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВедомостиСО КАК ВедомостиСО
		|		ПО СОПеречислениеВФонды.Ссылка = ВедомостиСО.Ведомость
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО ИСТИНА
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаРасшифровкаПлатежа КАК РасшифровкаПлатежа
		|		ПО ИСТИНА
		|
		|СГРУППИРОВАТЬ ПО
		|	СОПеречислениеВФонды.ФизЛицо,
		|	ВЫБОР
		|		КОГДА СОПеречислениеВФонды.ФизЛицо ССЫЛКА Справочник.ФизическиеЛица
		|			ТОГДА СОПеречислениеВФонды.ФизЛицо
		|		ИНАЧЕ СОПеречислениеВФонды.ФизЛицо.ФизЛицо
		|	КОНЕЦ,
		|	СОПеречислениеВФонды.Ссылка.ВидОперации,
		|	СОПеречислениеВФонды.Ссылка.ПериодРегистрации,
		|	СОПеречислениеВФонды.Ссылка.ВидПлатежа,
		|	СОПеречислениеВФонды.Ссылка.СпособРасчетаСуммКПеречислению,
		|	РасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств,
		|	Реквизиты.СчетОрганизации,
		|	Реквизиты.СчетБанк,
		|	Реквизиты.СчетБанкНУ"
		+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
		
		НомераТаблиц.Вставить("ТаблицаПеречислениеСО", НомераТаблиц.Количество());
		
	КонецЕсли;
	
	Возврат ТекстЗапроса;		
	
КонецФункции

Функция ТекстЗапросаПеречислениеЕП(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	ТекстЗапроса = "";
	
	Если НЕ Реквизиты.ЕстьПеречислениеЕдиногоПлатежа Тогда
		ПараметрыПроведения.Вставить("ТаблицаПеречислениеЕП", Неопределено);
	Иначе 
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ЕППеречислениеВФонды.ФизЛицо КАК ФизЛицоБУ,
		|	ЕППеречислениеВФонды.ФизЛицо КАК ФизЛицо,
		|	НАЧАЛОПЕРИОДА(ЕППеречислениеВФонды.Ссылка.ПериодРегистрации, МЕСЯЦ) КАК МесяцИсчисления,
		|	ЕППеречислениеВФонды.Ссылка.ВидПлатежа КАК ВидПлатежа,
		|	ЕППеречислениеВФонды.Ссылка.СпособРасчетаСуммКПеречислению КАК СпособРасчетаСуммКПеречислению,
		|	СУММА(ЕППеречислениеВФонды.Сумма) КАК Сумма,
		|	Реквизиты.СчетБанк КАК СчетКт,
		|	Реквизиты.СчетБанкНУ КАК СчетКтНУ,
		|	НЕОПРЕДЕЛЕНО КАК СчетКтНУПоУмолчанию,
		|	""ДенежныеСредства"" КАК ИмяСубконтоКт1,
		|	Реквизиты.СчетОрганизации КАК СубконтоКт1,
		|	""СтатьиДвиженияДенежныхСредств"" КАК ИмяСубконтоКт2,
		|	РасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств КАК СубконтоКт2
		|ИЗ
		|	Документ.ЕППеречислениеВФонды.ЕдиныеПлатежи КАК ЕППеречислениеВФонды
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВедомостиЕП КАК ВедомостиЕП
		|		ПО ЕППеречислениеВФонды.Ссылка = ВедомостиЕП.Ведомость
		|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО (ИСТИНА)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаРасшифровкаПлатежа КАК РасшифровкаПлатежа
		|		ПО (ИСТИНА)
		|
		|СГРУППИРОВАТЬ ПО
		|	ЕППеречислениеВФонды.ФизЛицо,
		|	ЕППеречислениеВФонды.ФизЛицо,
		|	ЕППеречислениеВФонды.Ссылка.ПериодРегистрации,
		|	ЕППеречислениеВФонды.Ссылка.ВидПлатежа,
		|	ЕППеречислениеВФонды.Ссылка.СпособРасчетаСуммКПеречислению,
		|	Реквизиты.СчетОрганизации,
		|	Реквизиты.СчетБанк,
		|	Реквизиты.СчетБанкНУ,
		|	РасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств"
		+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();

		НомераТаблиц.Вставить("ТаблицаПеречислениеЕП", НомераТаблиц.Количество());
		
	КонецЕсли;
	
	Возврат ТекстЗапроса;		
	
КонецФункции

Функция ТекстЗапросаПеречислениеПоИЛ(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	ТекстЗапроса = "";
	
	Если НЕ Реквизиты.ЕстьПеречислениеПоИсполнительнымЛистам Тогда
		ПараметрыПроведения.Вставить("ТаблицаПеречислениеПоИЛ", Неопределено);
	Иначе
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ИЛПеречислениеПолучателям.ДокументОснование,
		|	ИЛПеречислениеполучателям.ДокументОснование.ФизЛицо КАК ФизЛицо,
		|	ВЫБОР
		|		КОГДА ФИОФизЛиц.ФизЛицо ЕСТЬ NULL ТОГДА ИЛПеречислениеПолучателям.ДокументОснование.ФизЛицо.Наименование
		|		ИНАЧЕ ФИОФизЛиц.Фамилия + ВЫБОР 
		|									КОГДА ФИОФизЛиц.Имя <> """" ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛиц.Имя, 1, 1) + "".""
		|									ИНАЧЕ """"
		|								  КОНЕЦ 
		|								+ ВЫБОР
		|									КОГДА ФИОФизЛиц.Отчество <> """" ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛиц.Отчество, 1, 1) + "".""
		|									ИНАЧЕ """"
		|								  КОНЕЦ
		|	КОНЕЦ КАК ФИОРаботника,
		|	ИЛПеречислениеПолучателям.Получатель КАК Получатель,
		|	СУММА(ИЛПеречислениеПолучателям.СуммаВзаиморасчетов + ИЛПеречислениеПолучателям.СуммаСборов) КАК Сумма,
		|	СУММА(ИЛПеречислениеПолучателям.СуммаВзаиморасчетов) КАК СуммаВзаиморасчетов,
		|	СУММА(ИЛПеречислениеПолучателям.СуммаСборов) КАК СуммаСборов,
		|	ИЛПеречислениеполучателям.ДокументОснование.Номер КАК НомерИЛ,
		|	ИЛПеречислениеполучателям.ДокументОснование.Дата КАК ДатаИЛ,
		|	ИЛПеречислениеПолучателям.Ссылка.ПериодРегистрации КАК ПериодВзаиморасчетов,
   		|	ИЛПеречислениеПолучателям.ДокументОснование.СозданПриОбмене КАК СозданПриОбмене,
		|	ИЛПеречислениеПолучателям.ДокументОснование.ПлатежныйАгент КАК ПлатежныйАгент,
		|	Реквизиты.СчетБанк КАК СчетКт,
		|	Реквизиты.СчетБанкНУ КАК СчетКтНУ,
		|	НЕОПРЕДЕЛЕНО КАК СчетКтНУПоУмолчанию,
		|	""ДенежныеСредства"" КАК ИмяСубконтоКт1,
		|	Реквизиты.СчетОрганизации КАК СубконтоКт1,
		|	""СтатьиДвиженияДенежныхСредств"" КАК ИмяСубконтоКт2,
		|	РасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств КАК СубконтоКт2
		|
		|ИЗ
		|	Документ.ИЛПеречислениеПолучателям.ИсполнительныеЛисты КАК ИЛПеречислениеПолучателям
		|
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВедомостиПоИЛ КАК ВедомостиПоИЛ
		|		ПО ИЛПеречислениеПолучателям.Ссылка = ВедомостиПоИЛ.Ведомость
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&Дата) КАК ФИОФизЛиц
		|		ПО ИЛПеречислениеПолучателям.ДокументОснование.ФизЛицо = ФИОФизЛиц.ФизЛицо
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО ИСТИНА
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаРасшифровкаПлатежа КАК РасшифровкаПлатежа
		|		ПО ИСТИНА
		|
		|СГРУППИРОВАТЬ ПО
		|	ВЫБОР
		|		КОГДА ФИОФизЛиц.ФизЛицо ЕСТЬ NULL ТОГДА ИЛПеречислениеПолучателям.ДокументОснование.ФизЛицо.Наименование
		|		ИНАЧЕ ФИОФизЛиц.Фамилия + ВЫБОР 
		|									КОГДА ФИОФизЛиц.Имя <> """" ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛиц.Имя, 1, 1) + "".""
		|									ИНАЧЕ """"
		|								  КОНЕЦ 
		|								+ ВЫБОР
		|									КОГДА ФИОФизЛиц.Отчество <> """" ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛиц.Отчество, 1, 1) + "".""
		|									ИНАЧЕ """"
		|								  КОНЕЦ
		|	КОНЕЦ,
		|	ИЛПеречислениеПолучателям.ДокументОснование,
		|	ИЛПеречислениеполучателям.ДокументОснование.ФизЛицо,
		|	ИЛПеречислениеПолучателям.Получатель,
		|	ИЛПеречислениеполучателям.ДокументОснование.Номер,
		|	ИЛПеречислениеполучателям.ДокументОснование.Дата,
		|	ИЛПеречислениеПолучателям.Ссылка.ПериодРегистрации,
    	|	ИЛПеречислениеПолучателям.ДокументОснование.СозданПриОбмене,
    	|	ИЛПеречислениеПолучателям.ДокументОснование.ПлатежныйАгент,
		|	Реквизиты.СчетБанк,
		|	Реквизиты.СчетБанкНУ,
		|	Реквизиты.СчетОрганизации,
		|	РасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств"
		+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
		
		НомераТаблиц.Вставить("ТаблицаПеречислениеПоИЛ", НомераТаблиц.Количество());
		
	КонецЕсли;
	
	Возврат ТекстЗапроса;		
	
КонецФункции

Функция ТекстЗапросаПеречислениеПрочихВыплат(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	ТекстЗапроса = "";
	
	Если НЕ Реквизиты.ЕстьПеречислениеПрочихВыплат Тогда
		ПараметрыПроведения.Вставить("ТаблицаПеречислениеПрочихВыплат", Неопределено);
	Иначе 
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	МИНИМУМ(ВедомостьНаПеречислениеПрочихВыплат.НомерСтроки) КАК НомерСтроки,
		|	ВедомостьНаПеречислениеПрочихВыплат.ФизЛицо КАК ФизЛицо,
		|	НАЧАЛОПЕРИОДА(ВедомостьНаПеречислениеПрочихВыплат.ПериодВзаиморасчетов, МЕСЯЦ) КАК ПериодВзаиморасчетов,
		|	ВедомостьНаПеречислениеПрочихВыплат.Ссылка.ВидПрочихВыплат КАК ВидПрочихВыплат,
		|	ВедомостьНаПеречислениеПрочихВыплат.Ссылка.СпособРасчетаСуммКПеречислению КАК СпособРасчетаСуммКПеречислению,
		|	СУММА(ВедомостьНаПеречислениеПрочихВыплат.Сумма) КАК Сумма,
		|	Реквизиты.СчетБанк КАК СчетКт,
		|	Реквизиты.СчетБанкНУ КАК СчетКтНУ,
		|	НЕОПРЕДЕЛЕНО КАК СчетКтНУПоУмолчанию,
		|	""ДенежныеСредства"" КАК ИмяСубконтоКт1,
		|	Реквизиты.СчетОрганизации КАК СубконтоКт1,
		|	""СтатьиДвиженияДенежныхСредств"" КАК ИмяСубконтоКт2,
		|	РасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств КАК СубконтоКт2,
		|	Реквизиты.СчетУчетаРасчетовСКонтрагентомБУ КАК СчетДтБУ,
       	|	Реквизиты.СубконтоДтБУ1 КАК СубконтоДтБУ1,
       	|	Реквизиты.СубконтоДтБУ2 КАК СубконтоДтБУ2,
       	|	Реквизиты.СубконтоДтБУ3 КАК СубконтоДтБУ3,
       	|	Реквизиты.СчетУчетаРасчетовСКонтрагентомНУ КАК СчетДтНУ,
       	|	Реквизиты.СубконтоДтНУ1 КАК СубконтоДтНУ1,
       	|	Реквизиты.СубконтоДтНУ2 КАК СубконтоДтНУ2,
       	|	Реквизиты.СубконтоДтНУ3 КАК СубконтоДтНУ3
		|ИЗ
		|	Документ.ВедомостьНаПеречислениеПрочихВыплат.ПрочиеВыплаты КАК ВедомостьНаПеречислениеПрочихВыплат
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВедомостиПрочиеВыплаты КАК ВедомостиПрочиеВыплаты
		|		ПО ВедомостьНаПеречислениеПрочихВыплат.Ссылка = ВедомостиПрочиеВыплаты.Ведомость
		|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО (ИСТИНА)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаРасшифровкаПлатежа КАК РасшифровкаПлатежа
		|		ПО (ИСТИНА)
		|
		|СГРУППИРОВАТЬ ПО
		|	ВедомостьНаПеречислениеПрочихВыплат.ФизЛицо,
		|	ВедомостьНаПеречислениеПрочихВыплат.ПериодВзаиморасчетов,
		|	ВедомостьНаПеречислениеПрочихВыплат.Ссылка.ВидПрочихВыплат,
		|	ВедомостьНаПеречислениеПрочихВыплат.Ссылка.СпособРасчетаСуммКПеречислению,
		|	Реквизиты.СчетОрганизации,
		|	Реквизиты.СчетБанк,
		|	Реквизиты.СчетБанкНУ,
		|	РасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств,
		|	Реквизиты.СчетУчетаРасчетовСКонтрагентомБУ,
       	|	Реквизиты.СубконтоДтБУ1,
       	|	Реквизиты.СубконтоДтБУ2,
       	|	Реквизиты.СубконтоДтБУ3,
       	|	Реквизиты.СчетУчетаРасчетовСКонтрагентомНУ,
       	|	Реквизиты.СубконтоДтНУ1,
       	|	Реквизиты.СубконтоДтНУ2,
       	|	Реквизиты.СубконтоДтНУ3"
		+ ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();

		НомераТаблиц.Вставить("ТаблицаПеречислениеПрочихВыплат", НомераТаблиц.Количество());
		
	КонецЕсли;
	
	Возврат ТекстЗапроса;				
	
КонецФункции

Функция ТекстЗапросаОплатаСчетов(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	Если Реквизиты.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ОплатаПоставщику Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаРасшифровкаПлатежа.НомерСтроки КАК НомерСтроки,
		|	ТаблицаРасшифровкаПлатежа.СчетНаОплату КАК СчетНаОплату,
		|	ТаблицаРасшифровкаПлатежа.СтавкаНДС КАК СтавкаНДС,
		|	ВЫБОР
		|		КОГДА СчетНаОплатуПоставщика.ВалютаДокумента = &ВалютаРеглУчета
		|			ТОГДА ТаблицаРасшифровкаПлатежа.СуммаРегл
		|		ИНАЧЕ ТаблицаРасшифровкаПлатежа.СуммаВзаиморасчетов
		|	КОНЕЦ КАК Сумма,
		|	ВЫБОР
		|		КОГДА СчетНаОплатуПоставщика.ВалютаДокумента = &ВалютаРеглУчета
		|			ТОГДА ТаблицаРасшифровкаПлатежа.СуммаНДСРегл
		|		КОГДА СчетНаОплатуПоставщика.ВалютаДокумента = &Валюта
		|			ТОГДА ТаблицаРасшифровкаПлатежа.СуммаНДС
		|		ИНАЧЕ ВЫРАЗИТЬ(ТаблицаРасшифровкаПлатежа.СуммаНДСРегл * ТаблицаРасшифровкаПлатежа.КратностьВзаиморасчетов / ТаблицаРасшифровкаПлатежа.КурсВзаиморасчетов КАК ЧИСЛО(15, 2))
		|	КОНЕЦ КАК СуммаНДС,
		|	СчетНаОплатуПоставщика.ВалютаДокумента КАК Валюта
		|ИЗ
		|	ТаблицаРасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежа
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетНаОплатуПоставщика КАК СчетНаОплатуПоставщика
		|		ПО ТаблицаРасшифровкаПлатежа.СчетНаОплату = СчетНаОплатуПоставщика.Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТаблицаРасшифровкаПлатежа.НомерСтроки";
	Иначе
		ПараметрыПроведения.Вставить("ОплатаСчетов", Неопределено);
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить("ОплатаСчетов", НомераТаблиц.Количество());
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТаблицаОплатаСчетов(ДокументСсылка) Экспорт
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка.Ссылка);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаРасшифровкаПлатежа.Ссылка КАК Ссылка,
		|	ТаблицаРасшифровкаПлатежа.НомерСтроки КАК НомерСтроки,
		|	ТаблицаРасшифровкаПлатежа.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
		|	ТаблицаРасшифровкаПлатежа.КратностьВзаиморасчетов КАК КратностьВзаиморасчетов,
		|	ВЫРАЗИТЬ(ВЫБОР
		|			КОГДА &ДокументВРеглВалюте
		|				ТОГДА ТаблицаРасшифровкаПлатежа.СуммаПлатежа
		|			ИНАЧЕ ВЫБОР
		|					КОГДА ЕСТЬNULL(ТаблицаРасшифровкаПлатежа.КратностьВзаиморасчетов, 0) = 0
		|						ТОГДА 0
		|					ИНАЧЕ ТаблицаРасшифровкаПлатежа.СуммаПлатежа * (ТаблицаРасшифровкаПлатежа.КурсВзаиморасчетов / ТаблицаРасшифровкаПлатежа.КратностьВзаиморасчетов)
		|				КОНЕЦ
		|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаРегл,
		|	ТаблицаРасшифровкаПлатежа.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
		|	ТаблицаРасшифровкаПлатежа.СтавкаНДС КАК СтавкаНДС,
		|	ВЫРАЗИТЬ(ВЫБОР
		|			КОГДА &ДокументВРеглВалюте
		|				ТОГДА ТаблицаРасшифровкаПлатежа.СуммаНДС
		|			ИНАЧЕ ВЫБОР
		|					КОГДА ЕСТЬNULL(ТаблицаРасшифровкаПлатежа.КратностьВзаиморасчетов, 0) = 0
		|						ТОГДА 0
		|					ИНАЧЕ ТаблицаРасшифровкаПлатежа.СуммаНДС * (ТаблицаРасшифровкаПлатежа.КурсВзаиморасчетов / ТаблицаРасшифровкаПлатежа.КратностьВзаиморасчетов)
		|				КОНЕЦ
		|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаНДСРегл,
		|	ТаблицаРасшифровкаПлатежа.СуммаНДС КАК СуммаНДС,
		|	ТаблицаРасшифровкаПлатежа.СчетНаОплату КАК СчетНаОплату
		|ПОМЕСТИТЬ ТаблицаРасшифровкаПлатежа
		|ИЗ
		|	Документ.ПлатежноеПоручениеИсходящее.РасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежа
		|ГДЕ
		|	ТаблицаРасшифровкаПлатежа.Ссылка = &Ссылка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	СчетНаОплату
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаРасшифровкаПлатежа.НомерСтроки КАК НомерСтроки,
		|	ТаблицаРасшифровкаПлатежа.СчетНаОплату КАК СчетНаОплату,
		|	ТаблицаРасшифровкаПлатежа.СтавкаНДС КАК СтавкаНДС,
		|	ВЫБОР
		|		КОГДА СчетНаОплатуПоставщика.ВалютаДокумента = &ВалютаРеглУчета
		|			ТОГДА ТаблицаРасшифровкаПлатежа.СуммаРегл
		|		ИНАЧЕ ТаблицаРасшифровкаПлатежа.СуммаВзаиморасчетов
		|	КОНЕЦ КАК Сумма,
		|	ВЫБОР
		|		КОГДА СчетНаОплатуПоставщика.ВалютаДокумента = &ВалютаРеглУчета
		|			ТОГДА ТаблицаРасшифровкаПлатежа.СуммаНДСРегл
		|		КОГДА СчетНаОплатуПоставщика.ВалютаДокумента = &Валюта
		|			ТОГДА ТаблицаРасшифровкаПлатежа.СуммаНДС
		|		ИНАЧЕ ВЫРАЗИТЬ(ТаблицаРасшифровкаПлатежа.СуммаНДСРегл * ТаблицаРасшифровкаПлатежа.КратностьВзаиморасчетов / ТаблицаРасшифровкаПлатежа.КурсВзаиморасчетов КАК ЧИСЛО(15, 2))
		|	КОНЕЦ КАК СуммаНДС,
		|	СчетНаОплатуПоставщика.ВалютаДокумента КАК Валюта
		|ИЗ
		|	ТаблицаРасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежа
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетНаОплатуПоставщика КАК СчетНаОплатуПоставщика
		|		ПО ТаблицаРасшифровкаПлатежа.СчетНаОплату = СчетНаОплатуПоставщика.Ссылка
		|ГДЕ
		|	ТаблицаРасшифровкаПлатежа.СчетНаОплату <> ЗНАЧЕНИЕ(Документ.СчетНаОплатуПоставщика.ПустаяСсылка)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТаблицаРасшифровкаПлатежа.НомерСтроки"; 
		
	ВалютаРеглУчета     = Константы.ВалютаРегламентированногоУчета.Получить();
	ДокументВРеглВалюте = ?(ДокументСсылка.ВалютаДокумента = ВалютаРеглУчета, Истина, Ложь);
	Запрос.УстановитьПараметр("ДокументВРеглВалюте", ДокументВРеглВалюте);
	Запрос.УстановитьПараметр("ВалютаРеглУчета", ВалютаРеглУчета);
	Запрос.УстановитьПараметр("Валюта", ДокументСсылка.ВалютаДокумента);
		
	ТаблицаОплатаСчетов = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаОплатаСчетов;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обработчики обновления ИБ

Процедура ЗаполнитьСчетНаОплатуВРасшифровкеПлатежаПриОбновлении(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПлатежноеПоручениеИсходящее.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВТ_ПлатежныеДокументы
		|ИЗ
		|	Документ.ПлатежноеПоручениеИсходящее КАК ПлатежноеПоручениеИсходящее
		|ГДЕ
		|	ПлатежноеПоручениеИсходящее.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийППИсходящее.ОплатаПоставщику)
		|	И ПлатежноеПоручениеИсходящее.ДокументОснование ССЫЛКА Документ.СчетНаОплатуПоставщика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТ_ПлатежныеДокументы.Ссылка КАК Ссылка
		|ИЗ
		|	ВТ_ПлатежныеДокументы КАК ВТ_ПлатежныеДокументы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПлатежноеПоручениеИсходящее.РасшифровкаПлатежа КАК ПлатежноеПоручениеИсходящееРасшифровкаПлатежа
		|		ПО ВТ_ПлатежныеДокументы.Ссылка = ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка
		|ГДЕ
		|	ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.СчетНаОплату = ЗНАЧЕНИЕ(Документ.СчетНаОплатуПоставщика.ПустаяСсылка)";
			
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;	
	Параметры.ОбработкаЗавершена = Ложь;
	
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НачатьТранзакцию();
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Если ДокументОбъект = Неопределено Тогда
			ОтменитьТранзакцию();
			Продолжить;
		КонецЕсли; 
		
		Если НЕ ЗначениеЗаполнено(ДокументОбъект.ДокументОснование) Тогда
			ОтменитьТранзакцию();
			Продолжить;
		КонецЕсли;
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Документ.ПлатежноеПоручениеИсходящее");
		ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
		
		Попытка
			Блокировка.Заблокировать();
			
			ДокументРасшифровкаПлатежа = ДокументОбъект.РасшифровкаПлатежа;

			Для Каждого СтрокаПлатеж Из ДокументРасшифровкаПлатежа Цикл 
				
				СтрокаПлатеж.СчетНаОплату = ДокументОбъект.ДокументОснование;
				
			КонецЦикла; 

			ДокументОбъект.ОбменДанными.Загрузка = Истина;
			ДокументОбъект.Записать();
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ТекстСообщения = НСтр("ru='Операция не выполнена'", ОбщегоНазначения.КодОсновногоЯзыка());
			ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
	КонецЦикла;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПЕЧАТИ

////////////////////////////////////////////////////////////////////////////////
// Интерфейс для работы с подсистемой Печать.

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Платежное поручение
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ПлатежноеПоручение";
	КомандаПечати.Представление = НСтр("ru = 'Платежное поручение'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБККлиент.ВыполнитьКомандуПечати";
	КомандаПечати.ПроверкаПроведенияПередПечатью = Не ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.Порядок = 50;
	
	Если УправлениеДенежнымиСредствамиСервер.ИспользоватьПечатныеФормыПП2024() Тогда
		// Платежное поручение2024
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Идентификатор = "ПлатежноеПоручение2024";
		КомандаПечати.Представление = НСтр("ru = 'Платежное поручение (с учетом изменений постановления Правления Национального Банка РК №105 от 25.12.2023 г.)'");
		КомандаПечати.Обработчик    = "УправлениеПечатьюБККлиент.ВыполнитьКомандуПечати";
		КомандаПечати.ПроверкаПроведенияПередПечатью = Не ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
		КомандаПечати.Порядок = 50.50;   
		
		// Сводное платежное поручение
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Идентификатор = "СводноеПлатежноеПоручение";
		КомандаПечати.Представление = НСтр("ru = 'Сводное платежное поручение (с учетом изменений постановления Правления Национального Банка РК №105 от 25.12.2023 г.)'");
		КомандаПечати.Обработчик    = "УправлениеПечатьюБККлиент.ВыполнитьКомандуПечати";
		КомандаПечати.ПроверкаПроведенияПередПечатью = Не ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
		КомандаПечати.Порядок = 50.51;  

	КонецЕсли;
		
	// Реестр к платежному поручению
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Реестр";
	КомандаПечати.Представление = НСтр("ru = 'Реестр к платежному поручению'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБККлиент.ВыполнитьКомандуПечати";
	КомандаПечати.ПроверкаПроведенияПередПечатью = Не ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.Порядок = 51;
	
	// Список в банк
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "СписокНаКартСчета";
	КомандаПечати.Представление = НСтр("ru = 'Список в банк'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБККлиент.ВыполнитьКомандуПечати";
	КомандаПечати.ПроверкаПроведенияПередПечатью = Не ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.Порядок = 52;
	
	// Настраиваемый комплект документов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ПлатежноеПоручение";
	КомандаПечати.Представление = НСтр("ru = 'Настраиваемый комплект документов'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Не ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.ЗаголовокФормы = НСтр("ru = 'Настраиваемый комплект'");
	КомандаПечати.ДополнитьКомплектВнешнимиПечатнымиФормами = Истина;
	КомандаПечати.Порядок = 75;  
	
	// Список на перечисление прочих выплат
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "СписокНаПеречислениеПрочихВыплат";
	КомандаПечати.Представление = НСтр("ru = 'Список на перечисление профессиональных выплат за счёт средств работодателя'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБККлиент.ВыполнитьКомандуПечати";
	КомандаПечати.ПроверкаПроведенияПередПечатью = Не ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.Порядок = 53;
	
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	// Печать расходной накладной
	НужноПечататьМакет = УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПлатежноеПоручение");
	Если НужноПечататьМакет Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ПлатежноеПоручение",
			НСтр("ru = 'Платежное поручение'"),
			ПечатьПлатежногоПоручения(МассивОбъектов, ОбъектыПечати),
			,
			"Документ.ПлатежноеПоручениеИсходящее.ПФ_MXL_ПлатежноеПоручение");          
			
		КонецЕсли;
		
		Если УправлениеДенежнымиСредствамиСервер.ИспользоватьПечатныеФормыПП2024() Тогда
					
			НужноПечататьМакет = УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПлатежноеПоручение2024");
			Если НужноПечататьМакет Тогда
				УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
				КоллекцияПечатныхФорм,
				"ПлатежноеПоручение2024",
				НСтр("ru = 'Платежное поручение (с учетом изменений постановления Правления Национального Банка РК №105 от 25.12.2023 г.)'"),
				ПечатьПлатежногоПоручения2024(МассивОбъектов, ОбъектыПечати),
				,
				"Документ.ПлатежноеПоручениеИсходящее.ПФ_MXL_ПлатежноеПоручение2024");        
				
			КонецЕсли;	
			
			НужноПечататьМакет = УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СводноеПлатежноеПоручение");
			Если НужноПечататьМакет Тогда
				УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
				КоллекцияПечатныхФорм,
				"СводноеПлатежноеПоручение",
				НСтр("ru = 'Сводное платежное поручение (с учетом изменений постановления Правления Национального Банка РК №105 от 25.12.2023 г.)'"),
				ПечатьСводногоПлатежногоПоручения(МассивОбъектов, ОбъектыПечати),
				,
				"Документ.ПлатежноеПоручениеИсходящее.ПФ_MXL_СводноеПлатежноеПоручение");
			КонецЕсли; 

		КонецЕсли;
		
	НужноПечататьМакет = УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Реестр");
	Если НужноПечататьМакет Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"Реестр",
			НСтр("ru = 'Реестр к платежному поручению'"),
			ПечатьРеестра(МассивОбъектов, ОбъектыПечати, ПараметрыВывода.КодЯзыка),
			,
			"Документ.ПлатежноеПоручениеИсходящее.ПФ_MXL_Реестр");
			
		ОписаниеПечатнойФормы = КоллекцияПечатныхФорм.Найти(ВРег("Реестр"), "ИмяВРЕГ");
		Если ОписаниеПечатнойФормы <> Неопределено Тогда
			ОписаниеПечатнойФормы.ДоступенВыводНаДругихЯзыках = Истина;
		КонецЕсли;

	КонецЕсли;
	
	НужноПечататьМакет = УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СписокНаКартСчета");
	Если НужноПечататьМакет Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"СписокНаКартСчета",
			НСтр("ru = 'Список в банк'"),
			ПечатьСпискаНаКартСчета(МассивОбъектов, ОбъектыПечати, ПараметрыВывода.КодЯзыка),
			,
			"Документ.ПлатежноеПоручениеИсходящее.ПФ_MXL_СписокПеречисленияНаКартСчета");
						
		ОписаниеПечатнойФормы = КоллекцияПечатныхФорм.Найти(ВРег("СписокНаКартСчета"), "ИмяВРЕГ");
		Если ОписаниеПечатнойФормы <> Неопределено Тогда
			ОписаниеПечатнойФормы.ДоступенВыводНаДругихЯзыках = Истина;
		КонецЕсли;

	КонецЕсли; 
		
	НужноПечататьМакет = УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СписокНаПеречислениеПрочихВыплат");
	Если НужноПечататьМакет Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"СписокНаПеречислениеПрочихВыплат",
			НСтр("ru = 'Список на перечисление профессиональных выплат за счёт средств работодателя'"),
			ПечатьСпискаПрочиеВыплаты(МассивОбъектов, ОбъектыПечати, ПараметрыВывода.КодЯзыка),
			,
			"Документ.ПлатежноеПоручениеИсходящее.ПФ_MXL_СписокПеречисленияПрочихВыплат");  
			
		ОписаниеПечатнойФормы = КоллекцияПечатныхФорм.Найти(ВРег("СписокНаПеречислениеПрочихВыплат"), "ИмяВРЕГ");
		Если ОписаниеПечатнойФормы <> Неопределено Тогда
			ОписаниеПечатнойФормы.ДоступенВыводНаДругихЯзыках = Истина;
		КонецЕсли;	
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПечатьПлатежногоПоручения(МассивОбъектов, ОбъектыПечати) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПлатежноеПоручениеИсходящее.Ссылка,
		|	ПлатежноеПоручениеИсходящее.Номер,
		|	ПлатежноеПоручениеИсходящее.Дата,
		|	ПлатежноеПоручениеИсходящее.Организация,
		|	ПлатежноеПоручениеИсходящее.СтруктурноеПодразделениеОтправитель,
		|	ПлатежноеПоручениеИсходящее.СтруктурноеПодразделениеПолучатель,
		|	ПлатежноеПоручениеИсходящее.ДатаВыписки,
		|	ПлатежноеПоручениеИсходящее.РННПлательщика КАК РННПлательщика,
		|	ПлатежноеПоручениеИсходящее.РННПолучателя КАК РННПолучателя,
		|	ПлатежноеПоручениеИсходящее.ВключатьКомиссиюБанка,
		|	ПлатежноеПоручениеИсходящее.СуммаДокумента,
		|	ПлатежноеПоручениеИсходящее.СуммаКомиссии,
		|	ПлатежноеПоручениеИсходящее.ВалютаДокумента.ПараметрыПрописиНаРусском КАК ПараметрыПрописиНаРусском,
		|	ПлатежноеПоручениеИсходящее.ТекстПлательщика,
		|	ПлатежноеПоручениеИсходящее.ТекстПолучателя,
		|	ПлатежноеПоручениеИсходящее.ВидОперации,
		|	ПлатежноеПоручениеИсходящее.СчетБанкаПосредника,
		|	ПлатежноеПоручениеИсходящее.БанкПосредник,
		|	ПлатежноеПоручениеИсходящее.БанкПосредник.НаименованиеПолное КАК БанкПосредникНаименованиеПолное,
		|	ПлатежноеПоручениеИсходящее.Контрагент,
		|	ПлатежноеПоручениеИсходящее.Контрагент.НаименованиеПолное КАК КонтрагентНаименованиеПолное,
		|	ПлатежноеПоручениеИсходящее.Организация.КБЕ,
		|	ПлатежноеПоручениеИсходящее.Контрагент.КБЕ КАК СчетКонтрагентаКБЕ,
		|	ПлатежноеПоручениеИсходящее.БанкПосредник.КБЕ КАК СчетПосредникаКБЕ,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ПлатежноеПоручениеИсходящее.БанкПосредник) = ТИП(Справочник.Контрагенты)
		|			ТОГДА ПлатежноеПоручениеИсходящее.БанкПосредник.НаименованиеПолное
		|		ИНАЧЕ ПлатежноеПоручениеИсходящее.БанкПосредник.Наименование
		|	КОНЕЦ КАК БанкПосредникДляПечати,
		|	ПлатежноеПоручениеИсходящее.НазначениеПлатежа,
		|	ПлатежноеПоручениеИсходящее.КодБК,
		|	ПлатежноеПоручениеИсходящее.КодНазначенияПлатежа,
		|	ПлатежноеПоручениеИсходящее.ДатаВалютирования,
		|	ПлатежноеПоручениеИсходящее.ДатаПолученияТовара,
		|	ПлатежноеПоручениеИсходящее.СчетКонтрагента,
		|	ДанныеСчетаОрганризации.МесяцПрописью КАК СчетОрганизацииМесяцПрописью,
		|	ЕСТЬNULL(ДанныеСчетаОрганризации.СуммаБезДробнойЧасти, ЛОЖЬ) КАК СчетОрганизацииСуммаБезДробнойЧасти,
		|	ДанныеСчетаОрганризации.Банк КАК СчетОрганизацииБанк,
		|	ДанныеСчетаОрганризации.БанкДляРасчетов КАК СчетОрганизацииБанкДляРасчетов,
		|	ДанныеСчетаОрганризации.Банк.Город КАК СчетОрганизацииБанкГород,
		|	ДанныеСчетаОрганризации.НомерСчета КАК СчетОрганизацииНомерСчета,
		|	ДанныеСчетаОрганризации.Банк.КоррСчет КАК СчетОрганизацииБанкКоррСчет,
		|	ВЫБОР
		|		КОГДА ПлатежноеПоручениеИсходящее.Дата >= ДАТАВРЕМЯ(2010, 6, 7)
		|			ТОГДА ДанныеСчетаОрганризации.Банк.БИК
		|		ИНАЧЕ ДанныеСчетаОрганризации.Банк.БИКДоРеформыБанковскихСчетов
		|	КОНЕЦ КАК СчетОрганизацииБИК,
		
		|	ДанныеСчетаКонтрагента.Банк КАК СчетКонтрагентаБанк,
		|	ДанныеСчетаКонтрагента.Банк.Город КАК СчетКонтрагентаБанкГород,
		|	ДанныеСчетаКонтрагента.БанкДляРасчетов КАК СчетКонтрагентаБанкДляРасчетов,
		|	ДанныеСчетаКонтрагента.НомерСчета КАК СчетКонтрагентаНомерСчета,
		|	ДанныеСчетаКонтрагента.Банк.КоррСчет КАК СчетКонтрагентаБанкКоррСчет,
		|	ВЫБОР
		|		КОГДА ПлатежноеПоручениеИсходящее.Дата >= ДАТАВРЕМЯ(2010, 6, 7)
		|			ТОГДА ДанныеСчетаКонтрагента.Банк.БИК
		|		ИНАЧЕ ДанныеСчетаКонтрагента.Банк.БИКДоРеформыБанковскихСчетов
		|	КОНЕЦ КАК СчетКонтрагентаБИК,
		
		|	ДанныеСчетаБанкаПосредника.Банк КАК СчетПосредникаБанк,
		|	ДанныеСчетаБанкаПосредника.Банк.Город КАК СчетПосредникаБанкГород,
		|	ДанныеСчетаБанкаПосредника.БанкДляРасчетов КАК СчетПосредникаБанкДляРасчетов,
		|	ДанныеСчетаБанкаПосредника.НомерСчета КАК СчетПосредникаНомерСчета,
		|	ДанныеСчетаБанкаПосредника.Банк.КоррСчет КАК СчетПосредникаБанкКоррСчет,
		|	ВЫБОР
		|		КОГДА ПлатежноеПоручениеИсходящее.Дата >= ДАТАВРЕМЯ(2010, 6, 7)
		|			ТОГДА ДанныеСчетаБанкаПосредника.Банк.БИК
		|		ИНАЧЕ ДанныеСчетаБанкаПосредника.Банк.БИКДоРеформыБанковскихСчетов
		|	КОНЕЦ КАК СчетПосредникаБИК
		|ИЗ
		|	Документ.ПлатежноеПоручениеИсходящее КАК ПлатежноеПоручениеИсходящее
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.БанковскиеСчета КАК ДанныеСчетаОрганризации
		|		ПО ПлатежноеПоручениеИсходящее.СчетОрганизации = ДанныеСчетаОрганризации.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.БанковскиеСчета КАК ДанныеСчетаКонтрагента
		|		ПО ПлатежноеПоручениеИсходящее.СчетКонтрагента = ДанныеСчетаКонтрагента.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.БанковскиеСчета КАК ДанныеСчетаБанкаПосредника
		|		ПО ПлатежноеПоручениеИсходящее.СчетБанкаПосредника = ДанныеСчетаБанкаПосредника.Ссылка
		|ГДЕ
		|	ПлатежноеПоручениеИсходящее.Ссылка В (&МассивОбъектов)
		|УПОРЯДОЧИТЬ ПО
		|	ПлатежноеПоручениеИсходящее.Ссылка
		|";
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ДанныеДокументов = РезультатЗапроса.Выбрать();
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПлатежноеПоручение_ПлатежноеПоручение";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ПлатежноеПоручениеИсходящее.ПФ_MXL_ПлатежноеПоручение");
	
	КодЯзыка = Метаданные.Языки.Русский.КодЯзыка;
	Макет.КодЯзыка =  КодЯзыка;
	
	ДатаПрекращенияВыводаРНН = Константы.ДатаПрекращенияВыводаРННВПервичныхДокументах.Получить();
	
	Пока ДанныеДокументов.Следующий() Цикл
		
		Если ТабДокумент.ВысотаТаблицы > 0 Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;

		СтруктурнаяЕдиницаОрганизация = ОбщегоНазначенияБК.ПолучитьСтруктурнуюЕдиницу(ДанныеДокументов.Организация, ДанныеДокументов.СтруктурноеПодразделениеОтправитель);
		
		НомерПечать = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ДанныеДокументов.Номер, ДанныеДокументов.Ссылка);

		ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокТаблицы");

		МесяцПрописью   	 = ДанныеДокументов.СчетОрганизацииМесяцПрописью;
		СуммаБезДробнойЧасти = ДанныеДокументов.СчетОрганизацииСуммаБезДробнойЧасти;
		ФорматДаты      	 = "Л=" + КодЯзыка + ";" + ?(МесяцПрописью = 1,"ДФ='дд ММММ гггг'", "ДФ='дд.ММ.гггг'");
		
		СведенияОбОрганизации = ОбщегоНазначенияБКВызовСервера.СведенияОЮрФизЛице(СтруктурнаяЕдиницаОрганизация, ДанныеДокументов.Дата);
		
		ВыводитьРНН = НЕ ЗначениеЗаполнено(ДатаПрекращенияВыводаРНН) ИЛИ ДанныеДокументов.ДатаВыписки < ДатаПрекращенияВыводаРНН;
		ИмяПараметра = ?(ВыводитьРНН, "РНН", "БИН_ИИН");

		СведенияОбОрганизации[ИмяПараметра] = ?(ПустаяСтрока(ДанныеДокументов.РННПлательщика), СведенияОбОрганизации[ИмяПараметра], СокрЛП(ДанныеДокументов.РННПлательщика));

		ОбластьМакета.Параметры.НаименованиеНомер = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'ПЛАТЕЖНОЕ ПОРУЧЕНИЕ № %1'", КодЯзыка), НомерПечать);
		
		ДатаДокумента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 года'", КодЯзыка), Формат(ДанныеДокументов.Дата, ФорматДаты));
		
		ОбластьМакета.Параметры.ДатаДокумента           = ДатаДокумента;
		
		СуммаСКомиссией									= ?(ДанныеДокументов.ВключатьКомиссиюБанка, ДанныеДокументов.СуммаДокумента + ДанныеДокументов.СуммаКомиссии, ДанныеДокументов.СуммаДокумента);
		ОбластьМакета.Параметры.СуммаЧислом             = ФорматироватьСумму(СуммаСКомиссией, СуммаБезДробнойЧасти);
		ОбластьМакета.Параметры.СуммаПрописью           = ФорматироватьСуммуПрописи(СуммаСКомиссией, СуммаБезДробнойЧасти, ДанныеДокументов.ПараметрыПрописиНаРусском);

		ОбластьМакета.Параметры.ПлательщикРНН_БИН       = ОбщегоНазначенияБК.ПолучитьРегистрационныйНомерОрганизацииКонтрагентаВПечатнуюФорму(СведенияОбОрганизации, ДанныеДокументов.Дата, , , , , Истина);
	    	
	    ТекстПлательщикПечать = ?(ПустаяСтрока(ДанныеДокументов.ТекстПлательщика), СтруктурнаяЕдиницаОрганизация.НаименованиеПолное, СокрЛП(ДанныеДокументов.ТекстПлательщика));		
	    
		ОбластьМакета.Параметры.Плательщик            = ТекстПлательщикПечать;
		ОбластьМакета.Параметры.БанкПлательщика       = "" + ДанныеДокументов.СчетОрганизацииБанк + " " + ДанныеДокументов.СчетОрганизацииБанкГород;
		ОбластьМакета.Параметры.НомерСчетаПлательщика = ?(НЕ ЗначениеЗаполнено(ДанныеДокументов.СчетОрганизацииБанкДляРасчетов), ДанныеДокументов.СчетОрганизацииНомерСчета, ДанныеДокументов.СчетОрганизацииБанкКоррСчет);
		ОбластьМакета.Параметры.БикБанкаПлательщика   = ДанныеДокументов.СчетОрганизацииБИК;
		ОбластьМакета.Параметры.ПлательщикКБЕ    	  = ДанныеДокументов.ОрганизацияКБЕ;

		Если ДанныеДокументов.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет Тогда
			Приставка					= "СчетКонтрагента";
			КонтрагентДляПечати 		= ОбщегоНазначенияБК.ПолучитьСтруктурнуюЕдиницу(ДанныеДокументов.Организация, ДанныеДокументов.СтруктурноеПодразделениеПолучатель);
			БанкПосредникДляПечати 		= ДанныеДокументов.БанкПосредник;
			ПроверятьТекстовыеРеквизиты = Ложь;
		Иначе
			Приставка					= "СчетКонтрагента";
			КонтрагентДляПечати 		= ДанныеДокументов.Контрагент;
			БанкПосредникДляПечати 		= ДанныеДокументов.БанкПосредник;
			ПроверятьТекстовыеРеквизиты = Истина;
		КонецЕсли;
		
		СведенияОПолучателе = ОбщегоНазначенияБКВызовСервера.СведенияОЮрФизЛице(КонтрагентДляПечати, ДанныеДокументов.Дата);
		СведенияОПолучателе[ИмяПараметра] = ?(ПустаяСтрока(ДанныеДокументов.РННПолучателя) ИЛИ НЕ ПроверятьТекстовыеРеквизиты, СведенияОПолучателе[ИмяПараметра], СокрЛП(ДанныеДокументов.РННПолучателя));

		Если НЕ ДанныеДокументов.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет Тогда		
			ОбластьМакета.Параметры.ПолучательРНН_БИН = ОбщегоНазначенияБК.ПолучитьРегистрационныйНомерОрганизацииКонтрагентаВПечатнуюФорму(СведенияОПолучателе, ДанныеДокументов.Дата, , , , , Истина);
			ОбластьМакета.Параметры.Получатель      = ?(ПустаяСтрока(ДанныеДокументов.ТекстПолучателя) ИЛИ НЕ ПроверятьТекстовыеРеквизиты, КонтрагентДляПечати.НаименованиеПолное, СокрЛП(ДанныеДокументов.ТекстПолучателя));		
			ОбластьМакета.Параметры.ПолучательКБЕ	= ДанныеДокументов[Приставка + "КБЕ"];		
		Иначе		
			// реквизиты организации или СП
			СведенияОбОрганизации[ИмяПараметра] 	  = ?(ПустаяСтрока(ДанныеДокументов.РННПолучателя) ИЛИ НЕ ПроверятьТекстовыеРеквизиты, СведенияОПолучателе[ИмяПараметра], СокрЛП(ДанныеДокументов.РННПолучателя));
			ОбластьМакета.Параметры.ПолучательРНН_БИН = ОбщегоНазначенияБК.ПолучитьРегистрационныйНомерОрганизацииКонтрагентаВПечатнуюФорму(СведенияОПолучателе, ДанныеДокументов.Дата, , , , , Истина);
			ОбластьМакета.Параметры.Получатель        = ?(ПустаяСтрока(ДанныеДокументов.ТекстПолучателя) ИЛИ НЕ ПроверятьТекстовыеРеквизиты, СведенияОПолучателе.ПолноеНаименование, СокрЛП(ДанныеДокументов.ТекстПолучателя));		
			ОбластьМакета.Параметры.ПолучательКБЕ	  = СведенияОПолучателе.КБЕ;				
		КонецЕсли;

		ОбластьМакета.Параметры.БанкПолучателя          = "" + ДанныеДокументов[Приставка + "Банк"] + " " + ДанныеДокументов[Приставка + "БанкГород"];
		ОбластьМакета.Параметры.БикБанкаПолучателя      = ДанныеДокументов[Приставка + "БИК"];
		ОбластьМакета.Параметры.НомерСчетаПолучателя    = ?(НЕ ЗначениеЗаполнено(ДанныеДокументов[Приставка + "БанкДляРасчетов"]), ДанныеДокументов[Приставка + "НомерСчета"], ДанныеДокументов[Приставка + "БанкКоррСчет"]);
		
		Если НЕ БанкПосредникДляПечати = Неопределено Тогда
			ОбластьМакета.Параметры.БанкПосредник			= ДанныеДокументов.БанкПосредникДляПечати; 
			ОбластьМакета.Параметры.БанкПосредникБИК        = ДанныеДокументов.СчетПосредникаБИК;
		КонецЕсли;
		
		ОбластьМакета.Параметры.НазначениеПлатежа       	= СокрЛП(ДанныеДокументов.НазначениеПлатежа);
		ОбластьМакета.Параметры.КодБюджетнойКлассификации 	= ДанныеДокументов.КодБК;
		ОбластьМакета.Параметры.КодНазначенияПлатежа    	= СокрЛП(ДанныеДокументов.КодНазначенияПлатежа);
		ОбластьМакета.Параметры.ДатаВалютирования	  		= Формат(ДанныеДокументов.ДатаВалютирования, "Л=" + КодЯзыка + "; ДФ=dd.MM.yyyy");
		ОбластьМакета.Параметры.ДатаПолученияТовара  		= ?(ЗначениеЗаполнено(ДанныеДокументов.ДатаПолученияТовара),
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 года'", КодЯзыка), Формат(ДанныеДокументов.ДатаПолученияТовара, "Л=" + КодЯзыка + "; ДФ='дд ММММ гггг'")),
			"");
		
		Руководители = ОбщегоНазначенияБКВызовСервера.ОтветственныеЛицаОрганизаций(СтруктурнаяЕдиницаОрганизация, КонецДня(ДанныеДокументов.Дата),,Истина, Истина);

		ОбластьМакета.Параметры.ФИОРуководителя 		= Руководители.Руководитель;
		ОбластьМакета.Параметры.ФИОГлавногоБухгалтера 	= ?(НЕ ЗначениеЗаполнено(Руководители.ГлавныйБухгалтерДляПодписиБанковскихДокументов), "Не предусмотрен", Руководители.ГлавныйБухгалтерДляПодписиБанковскихДокументов);
	    
		
		ТабДокумент.Вывести(ОбластьМакета);
		ОбластьРазделителя = Макет.ПолучитьОбласть("Разделитель");
		ТабДокумент.Вывести(ОбластьРазделителя);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, НомерСтрокиНачало, ОбъектыПечати, ДанныеДокументов.Ссылка);

	КонецЦикла;

	Возврат ТабДокумент;

КонецФункции

Функция ПечатьПлатежногоПоручения2024(МассивОбъектов, ОбъектыПечати) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПлатежноеПоручениеИсходящее.Ссылка КАК Ссылка,
	|	ПлатежноеПоручениеИсходящее.Номер КАК Номер,
	|	ПлатежноеПоручениеИсходящее.Дата КАК Дата,
	|	ПлатежноеПоручениеИсходящее.Организация КАК Организация,
	|	ПлатежноеПоручениеИсходящее.СтруктурноеПодразделениеОтправитель КАК СтруктурноеПодразделениеОтправитель,
	|	ПлатежноеПоручениеИсходящее.СтруктурноеПодразделениеПолучатель КАК СтруктурноеПодразделениеПолучатель,
	|	ПлатежноеПоручениеИсходящее.ДатаВыписки КАК ДатаВыписки,
	|	ПлатежноеПоручениеИсходящее.ВключатьКомиссиюБанка КАК ВключатьКомиссиюБанка,
	|	ПлатежноеПоручениеИсходящее.СуммаДокумента КАК СуммаДокумента,
	|	ПлатежноеПоручениеИсходящее.СуммаКомиссии КАК СуммаКомиссии,
	|	ПлатежноеПоручениеИсходящее.ВалютаДокумента.ПараметрыПрописиНаРусском КАК ПараметрыПрописиНаРусском,
	|	ПлатежноеПоручениеИсходящее.ТекстПлательщика КАК ТекстПлательщика,
	|	ПлатежноеПоручениеИсходящее.ТекстПолучателя КАК ТекстПолучателя,
	|	ПлатежноеПоручениеИсходящее.РННПлательщика КАК РННПлательщика,
	|	ПлатежноеПоручениеИсходящее.РННПолучателя КАК РННПолучателя,
	|	ПлатежноеПоручениеИсходящее.ВидОперации КАК ВидОперации,
	|	ПлатежноеПоручениеИсходящее.СчетБанкаПосредника КАК СчетБанкаПосредника,
	|	ПлатежноеПоручениеИсходящее.БанкПосредник КАК БанкПосредник,
	|	ПлатежноеПоручениеИсходящее.БанкПосредник.НаименованиеПолное КАК БанкПосредникНаименованиеПолное,
	|	ПлатежноеПоручениеИсходящее.Контрагент КАК Контрагент,
	|	ПлатежноеПоручениеИсходящее.Контрагент.НаименованиеПолное КАК КонтрагентНаименованиеПолное,
	|	ПлатежноеПоручениеИсходящее.Организация.КБЕ КАК ОрганизацияКБЕ,
	|	ПлатежноеПоручениеИсходящее.Контрагент.КБЕ КАК СчетКонтрагентаКБЕ,
	|	ПлатежноеПоручениеИсходящее.БанкПосредник.КБЕ КАК СчетПосредникаКБЕ,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ПлатежноеПоручениеИсходящее.БанкПосредник) = ТИП(Справочник.Контрагенты)
	|			ТОГДА ПлатежноеПоручениеИсходящее.БанкПосредник.НаименованиеПолное
	|		ИНАЧЕ ПлатежноеПоручениеИсходящее.БанкПосредник.Наименование
	|	КОНЕЦ КАК БанкПосредникДляПечати,
	|	ПлатежноеПоручениеИсходящее.НазначениеПлатежа КАК НазначениеПлатежа,
	|	ПлатежноеПоручениеИсходящее.КодБК КАК КодБК,
	|	ПлатежноеПоручениеИсходящее.КодНазначенияПлатежа КАК КодНазначенияПлатежа,
	|	ПлатежноеПоручениеИсходящее.ДатаВалютирования КАК ДатаВалютирования,
	|	ПлатежноеПоручениеИсходящее.ДатаПолученияТовара КАК ДатаПолученияТовара,
	|	ПлатежноеПоручениеИсходящее.СчетКонтрагента КАК СчетКонтрагента,
	|	ДанныеСчетаОрганризации.МесяцПрописью КАК СчетОрганизацииМесяцПрописью,
	|	ЕСТЬNULL(ДанныеСчетаОрганризации.СуммаБезДробнойЧасти, ЛОЖЬ) КАК СчетОрганизацииСуммаБезДробнойЧасти,
	|	ДанныеСчетаОрганризации.Банк КАК СчетОрганизацииБанк,
	|	ДанныеСчетаОрганризации.БанкДляРасчетов КАК СчетОрганизацииБанкДляРасчетов,
	|	ДанныеСчетаОрганризации.Банк.Город КАК СчетОрганизацииБанкГород,
	|	ДанныеСчетаОрганризации.НомерСчета КАК СчетОрганизацииНомерСчета,
	|	ДанныеСчетаОрганризации.Банк.КоррСчет КАК СчетОрганизацииБанкКоррСчет,
	|	ВЫБОР
	|		КОГДА ПлатежноеПоручениеИсходящее.Дата >= ДАТАВРЕМЯ(2010, 6, 7)
	|			ТОГДА ДанныеСчетаОрганризации.Банк.БИК
	|		ИНАЧЕ ДанныеСчетаОрганризации.Банк.БИКДоРеформыБанковскихСчетов
	|	КОНЕЦ КАК СчетОрганизацииБИК,
	|	ДанныеСчетаКонтрагента.Банк КАК СчетКонтрагентаБанк,
	|	ДанныеСчетаКонтрагента.Банк.Город КАК СчетКонтрагентаБанкГород,
	|	ДанныеСчетаКонтрагента.БанкДляРасчетов КАК СчетКонтрагентаБанкДляРасчетов,
	|	ДанныеСчетаКонтрагента.НомерСчета КАК СчетКонтрагентаНомерСчета,
	|	ДанныеСчетаКонтрагента.Банк.КоррСчет КАК СчетКонтрагентаБанкКоррСчет,
	|	ВЫБОР
	|		КОГДА ПлатежноеПоручениеИсходящее.Дата >= ДАТАВРЕМЯ(2010, 6, 7)
	|			ТОГДА ДанныеСчетаКонтрагента.Банк.БИК
	|		ИНАЧЕ ДанныеСчетаКонтрагента.Банк.БИКДоРеформыБанковскихСчетов
	|	КОНЕЦ КАК СчетКонтрагентаБИК,
	|	ДанныеСчетаБанкаПосредника.Банк КАК СчетПосредникаБанк,
	|	ДанныеСчетаБанкаПосредника.Банк.Город КАК СчетПосредникаБанкГород,
	|	ДанныеСчетаБанкаПосредника.БанкДляРасчетов КАК СчетПосредникаБанкДляРасчетов,
	|	ДанныеСчетаБанкаПосредника.НомерСчета КАК СчетПосредникаНомерСчета,
	|	ДанныеСчетаБанкаПосредника.Банк.КоррСчет КАК СчетПосредникаБанкКоррСчет,
	|	ВЫБОР
	|		КОГДА ПлатежноеПоручениеИсходящее.Дата >= ДАТАВРЕМЯ(2010, 6, 7)
	|			ТОГДА ДанныеСчетаБанкаПосредника.Банк.БИК
	|		ИНАЧЕ ДанныеСчетаБанкаПосредника.Банк.БИКДоРеформыБанковскихСчетов
	|	КОНЕЦ КАК СчетПосредникаБИК,
	|	ПлатежноеПоручениеИсходящее.ФактическийПлательщик КАК ФактическийПлательщик
	|ИЗ
	|	Документ.ПлатежноеПоручениеИсходящее КАК ПлатежноеПоручениеИсходящее
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.БанковскиеСчета КАК ДанныеСчетаОрганризации
	|		ПО ПлатежноеПоручениеИсходящее.СчетОрганизации = ДанныеСчетаОрганризации.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.БанковскиеСчета КАК ДанныеСчетаКонтрагента
	|		ПО ПлатежноеПоручениеИсходящее.СчетКонтрагента = ДанныеСчетаКонтрагента.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.БанковскиеСчета КАК ДанныеСчетаБанкаПосредника
	|		ПО ПлатежноеПоручениеИсходящее.СчетБанкаПосредника = ДанныеСчетаБанкаПосредника.Ссылка
	|ГДЕ
	|	ПлатежноеПоручениеИсходящее.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПлатежноеПоручениеИсходящее.Ссылка");
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	ДанныеДокументов = Запрос.Выполнить().Выбрать();
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПлатежноеПоручение_ПлатежноеПоручение2024";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ПлатежноеПоручениеИсходящее.ПФ_MXL_ПлатежноеПоручение2024");
	
	КодЯзыка = Метаданные.Языки.Русский.КодЯзыка;
	Макет.КодЯзыка =  КодЯзыка;
	
	ОбластьРазделителя = Макет.ПолучитьОбласть("Разделитель");
	
	Пока ДанныеДокументов.Следующий() Цикл
		
		Если ТабДокумент.ВысотаТаблицы > 0 Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
		
		СтруктурнаяЕдиницаОрганизация = ОбщегоНазначенияБК.ПолучитьСтруктурнуюЕдиницу(ДанныеДокументов.Организация, ДанныеДокументов.СтруктурноеПодразделениеОтправитель);
		
		НомерПечать = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ДанныеДокументов.Номер, ДанныеДокументов.Ссылка);
		
		ОбластьМакета = Макет.ПолучитьОбласть("ПлатежноеПоручение");
		
		МесяцПрописью        = ДанныеДокументов.СчетОрганизацииМесяцПрописью;
		СуммаБезДробнойЧасти = ДанныеДокументов.СчетОрганизацииСуммаБезДробнойЧасти;
		ФорматДаты           = "Л=" + КодЯзыка + ";" + ?(МесяцПрописью = 1, "ДФ='дд ММММ гггг'", "ДФ='дд.ММ.гггг'");
		
		СведенияОбОрганизации = ОбщегоНазначенияБКВызовСервера.СведенияОЮрФизЛице(СтруктурнаяЕдиницаОрганизация, ДанныеДокументов.Дата);
		
		ОбластьМакета.Параметры.НаименованиеНомер = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'ПЛАТЕЖНОЕ ПОРУЧЕНИЕ № %1'", КодЯзыка), НомерПечать);
		
		ДатаДокумента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 года'", КодЯзыка), Формат(ДанныеДокументов.Дата, ФорматДаты));
		
		ОбластьМакета.Параметры.ДатаДокумента = ДатаДокумента;
		
		СуммаСКомиссией = ?(ДанныеДокументов.ВключатьКомиссиюБанка, ДанныеДокументов.СуммаДокумента + ДанныеДокументов.СуммаКомиссии, ДанныеДокументов.СуммаДокумента);
		ОбластьМакета.Параметры.СуммаЧислом   = ФорматироватьСумму(СуммаСКомиссией, СуммаБезДробнойЧасти);
		ОбластьМакета.Параметры.СуммаПрописью = ФорматироватьСуммуПрописи(СуммаСКомиссией, СуммаБезДробнойЧасти, ДанныеДокументов.ПараметрыПрописиНаРусском);
		
		ТекстПлательщикПечать = ?(ПустаяСтрока(ДанныеДокументов.ТекстПлательщика), СведенияОбОрганизации.ПолноеНаименование, СокрЛП(ДанныеДокументов.ТекстПлательщика));
				
		ОбластьМакета.Параметры.Плательщик = ТекстПлательщикПечать;
		ОбластьМакета.Параметры.ПлательщикБИН = ?(ПустаяСтрока(ДанныеДокументов.РННПлательщика), СведенияОбОрганизации.БИН_ИИН, СокрЛП(ДанныеДокументов.РННПлательщика));
				
		Если СведенияОбОрганизации.СтранаРезидентства = Справочники.КлассификаторСтранМира.Казахстан Тогда
			ОбластьМакета.Параметры.СтранаРезидентстваПлательщика = "";
		Иначе
			ОбластьМакета.Параметры.СтранаРезидентстваПлательщика = СведенияОбОрганизации.СтранаРезидентстваКод2;
		КонецЕсли;
		
		ОбластьМакета.Параметры.БанкПлательщика       = "" + ДанныеДокументов.СчетОрганизацииБанк + " " + ДанныеДокументов.СчетОрганизацииБанкГород;
		ОбластьМакета.Параметры.НомерСчетаПлательщика = ?(Не ЗначениеЗаполнено(ДанныеДокументов.СчетОрганизацииБанкДляРасчетов), ДанныеДокументов.СчетОрганизацииНомерСчета, ДанныеДокументов.СчетОрганизацииБанкКоррСчет);
		ОбластьМакета.Параметры.БикБанкаПлательщика   = ДанныеДокументов.СчетОрганизацииБИК;
		ОбластьМакета.Параметры.ПлательщикКБЕ         = ДанныеДокументов.ОрганизацияКБЕ;
		
		Если ЗначениеЗаполнено(ДанныеДокументов.ФактическийПлательщик) Тогда
			
			СведенияОФактическомПлательщике = ОбщегоНазначенияБКВызовСервера.СведенияОЮрФизЛице(ДанныеДокументов.ФактическийПлательщик, ДанныеДокументов.Дата);
			ОбластьМакета.Параметры.ФактическийПлательщик    = СокрЛП(СведенияОФактическомПлательщике.ПолноеНаименование);
			ОбластьМакета.Параметры.ФактическийПлательщикБИН = СокрЛП(СведенияОФактическомПлательщике.БИН_ИИН);
			
		Иначе
			ОбластьМакета.Параметры.ФактическийПлательщик    = "";
			ОбластьМакета.Параметры.ФактическийПлательщикБИН = "";
		КонецЕсли;
		
		Если ДанныеДокументов.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет Тогда
			КонтрагентДляПечати         = ОбщегоНазначенияБК.ПолучитьСтруктурнуюЕдиницу(ДанныеДокументов.Организация, ДанныеДокументов.СтруктурноеПодразделениеПолучатель);
			ПроверятьТекстовыеРеквизиты = Ложь;
		Иначе
			КонтрагентДляПечати         = ДанныеДокументов.Контрагент;
			ПроверятьТекстовыеРеквизиты = Истина;
		КонецЕсли;
		
		СведенияОПолучателе = ОбщегоНазначенияБКВызовСервера.СведенияОЮрФизЛице(КонтрагентДляПечати, ДанныеДокументов.Дата);
		
		Если ДанныеДокументов.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет Тогда
			ОбластьМакета.Параметры.Получатель    = ?(ПустаяСтрока(ДанныеДокументов.ТекстПолучателя) ИЛИ НЕ ПроверятьТекстовыеРеквизиты, СведенияОПолучателе.ПолноеНаименование, СокрЛП(ДанныеДокументов.ТекстПолучателя));
			ОбластьМакета.Параметры.ПолучательКБЕ = СведенияОПолучателе.КБЕ;
			ОбластьМакета.Параметры.ПолучательБИН = СведенияОПолучателе.БИН_ИИН;
		Иначе
			ОбластьМакета.Параметры.Получатель    = ?(ПустаяСтрока(ДанныеДокументов.ТекстПолучателя) ИЛИ НЕ ПроверятьТекстовыеРеквизиты, КонтрагентДляПечати.НаименованиеПолное, СокрЛП(ДанныеДокументов.ТекстПолучателя));
			ОбластьМакета.Параметры.ПолучательКБЕ = ДанныеДокументов.СчетКонтрагентаКБЕ;
			ОбластьМакета.Параметры.ПолучательБИН = ?(ПустаяСтрока(ДанныеДокументов.РННПолучателя), СведенияОПолучателе.БИН_ИИН, СокрЛП(ДанныеДокументов.РННПолучателя));
		КонецЕсли;
		
		Если СведенияОПолучателе.СтранаРезидентства = Справочники.КлассификаторСтранМира.Казахстан Тогда
			ОбластьМакета.Параметры.СтранаРезидентстваПолучателя = "";
		Иначе
			ОбластьМакета.Параметры.СтранаРезидентстваПолучателя = СведенияОПолучателе.СтранаРезидентстваКод2;
		КонецЕсли;
		
		ОбластьМакета.Параметры.БанкПолучателя        = "" + ДанныеДокументов.СчетКонтрагентаБанк + " " + ДанныеДокументов.СчетКонтрагентаБанкГород;
		ОбластьМакета.Параметры.БикБанкаПолучателя    = ДанныеДокументов.СчетКонтрагентаБИК;
		ОбластьМакета.Параметры.НомерСчетаПолучателя  = ?(Не ЗначениеЗаполнено(ДанныеДокументов.СчетКонтрагентаБанкДляРасчетов), ДанныеДокументов.СчетКонтрагентаНомерСчета, ДанныеДокументов.СчетКонтрагентаБанкКоррСчет);
		
		ОбластьМакета.Параметры.БанкПосредник     = ДанныеДокументов.БанкПосредникДляПечати; 
		ОбластьМакета.Параметры.БанкПосредникБИК  = ДанныеДокументов.СчетПосредникаБИК;
		
		ОбластьМакета.Параметры.НазначениеПлатежа         = СокрЛП(ДанныеДокументов.НазначениеПлатежа);
		ОбластьМакета.Параметры.КодБюджетнойКлассификации = ДанныеДокументов.КодБК;
		ОбластьМакета.Параметры.КодНазначенияПлатежа      = СокрЛП(ДанныеДокументов.КодНазначенияПлатежа);
		ОбластьМакета.Параметры.ДатаВалютирования         = Формат(ДанныеДокументов.ДатаВалютирования, "Л=" + КодЯзыка + "; ДФ=dd.MM.yyyy");
		ОбластьМакета.Параметры.ДатаПолученияТовара       = ?(ЗначениеЗаполнено(ДанныеДокументов.ДатаПолученияТовара),
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 года'", КодЯзыка), Формат(ДанныеДокументов.ДатаПолученияТовара, "Л=" + КодЯзыка + "; ДФ='дд ММММ гггг'")),
			"");
		
		Руководители = ОбщегоНазначенияБКВызовСервера.ОтветственныеЛицаОрганизаций(СтруктурнаяЕдиницаОрганизация, КонецДня(ДанныеДокументов.Дата),, Истина, Истина);
		
		ОбластьМакета.Параметры.ФИОРуководителя       = Руководители.Руководитель;
		ОбластьМакета.Параметры.ФИОГлавногоБухгалтера = ?(Не ЗначениеЗаполнено(Руководители.ГлавныйБухгалтерДляПодписиБанковскихДокументов),
			НСтр("ru = 'Не предусмотрен'", КодЯзыка),
			Руководители.ГлавныйБухгалтерДляПодписиБанковскихДокументов);
		
		ТабДокумент.Вывести(ОбластьМакета);
		ТабДокумент.Вывести(ОбластьРазделителя);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, НомерСтрокиНачало, ОбъектыПечати, ДанныеДокументов.Ссылка);
		
	КонецЦикла;
	
	Возврат ТабДокумент
	
КонецФункции

Функция ПечатьСводногоПлатежногоПоручения(МассивОбъектов, ОбъектыПечати) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПлатежноеПоручениеИсходящее.Ссылка            КАК Ссылка,
	|	ПлатежноеПоручениеИсходящее.Номер             КАК Номер,
	|	ПлатежноеПоручениеИсходящее.Дата              КАК Дата,
	|	ПлатежноеПоручениеИсходящее.ВидОперации       КАК ВидОперации,
	|	ПлатежноеПоручениеИсходящее.Организация       КАК Организация,
	|	ПлатежноеПоручениеИсходящее.Организация.КБЕ   КАК КБе,
	|	ПлатежноеПоручениеИсходящее.СтруктурноеПодразделениеОтправитель КАК СтруктурноеПодразделениеОтправитель,
	|	ПлатежноеПоручениеИсходящее.СтруктурноеПодразделениеПолучатель КАК СтруктурноеПодразделениеПолучатель,
	|	ПлатежноеПоручениеИсходящее.ВключатьКомиссиюБанка КАК ВключатьКомиссиюБанка,
	|	ПлатежноеПоручениеИсходящее.СуммаДокумента    КАК СуммаДокумента,
	|	ПлатежноеПоручениеИсходящее.СуммаКомиссии     КАК СуммаКомиссии,
	|	ПлатежноеПоручениеИсходящее.ВалютаДокумента   КАК ВалютаДокумента,
	|	ПлатежноеПоручениеИсходящее.ВалютаДокумента.ПараметрыПрописиНаРусском КАК ПараметрыПрописиНаРусском,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ПлатежноеПоручениеИсходящее.БанкПосредник) = ТИП(Справочник.Контрагенты)
	|			ТОГДА ПлатежноеПоручениеИсходящее.БанкПосредник.НаименованиеПолное
	|		ИНАЧЕ ПлатежноеПоручениеИсходящее.БанкПосредник.Наименование
	|	КОНЕЦ                                         КАК БанкПосредникДляПечати,
	|	ПлатежноеПоручениеИсходящее.ДатаВалютирования КАК ДатаВалютирования,
	|	ДанныеСчетаОрганизации.МесяцПрописью          КАК СчетОрганизацииМесяцПрописью,
	|	ЕСТЬNULL(ДанныеСчетаОрганизации.СуммаБезДробнойЧасти, ЛОЖЬ) КАК СчетОрганизацииСуммаБезДробнойЧасти,
	|	ДанныеСчетаОрганизации.БанкДляРасчетов        КАК СчетОрганизацииБанкДляРасчетов,
	|	ДанныеСчетаОрганизации.НомерСчета             КАК СчетОрганизацииНомерСчета,
	|	ДанныеСчетаОрганизации.Банк.КоррСчет          КАК СчетОрганизацииБанкКоррСчет,
	|	ДанныеСчетаОрганизации.Банк                   КАК СчетОрганизацииБанк,
	|	ДанныеСчетаОрганизации.Банк.Город             КАК СчетОрганизацииБанкГород,
	|	ДанныеСчетаОрганизации.Банк.БИК               КАК СчетОрганизацииБИК,
	|	ДанныеСчетаКонтрагента.Банк                   КАК СчетКонтрагентаБанк,
	|	ДанныеСчетаКонтрагента.Банк.Город             КАК СчетКонтрагентаБанкГород,
	|	ДанныеСчетаКонтрагента.БанкДляРасчетов        КАК СчетКонтрагентаБанкДляРасчетов,
	|	ДанныеСчетаКонтрагента.НомерСчета             КАК СчетКонтрагентаНомерСчета,
	|	ДанныеСчетаКонтрагента.Банк.КоррСчет          КАК СчетКонтрагентаБанкКоррСчет,
	|	ДанныеСчетаКонтрагента.Банк.БИК               КАК СчетКонтрагентаБИК,
	|	ДанныеСчетаБанкаПосредника.Банк.БИК           КАК СчетПосредникаБИК,
	|	ПлатежноеПоручениеИсходящее.НазначениеПлатежа КАК НазначениеПлатежа,
	|	ПлатежноеПоручениеИсходящее.КодБК             КАК КодБК,
	|	ПлатежноеПоручениеИсходящее.КодНазначенияПлатежа  КАК КодНазначенияПлатежа,
	|	ПлатежноеПоручениеИсходящее.ДатаПолученияТовара   КАК ДатаПолученияТовара,
	|	ПлатежноеПоручениеИсходящее.Контрагент        КАК Контрагент,
	|	ПлатежноеПоручениеИсходящее.ТекстПлательщика  КАК ТекстПлательщика,
	|	ПлатежноеПоручениеИсходящее.РННПлательщика    КАК РННПлательщика,
	|	ПлатежноеПоручениеИсходящее.ФактическийПлательщик КАК ФактическийПлательщик,
	|	ВЫРАЗИТЬ(ПлатежноеПоручениеИсходящее.ТекстПолучателя КАК СТРОКА(500)) КАК ТекстПолучателя,
	|	ПлатежноеПоручениеИсходящее.РННПолучателя     КАК РННПолучателя
	|ИЗ
	|	Документ.ПлатежноеПоручениеИсходящее КАК ПлатежноеПоручениеИсходящее
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.БанковскиеСчета КАК ДанныеСчетаОрганизации
	|		ПО ПлатежноеПоручениеИсходящее.СчетОрганизации = ДанныеСчетаОрганизации.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.БанковскиеСчета КАК ДанныеСчетаКонтрагента
	|		ПО ПлатежноеПоручениеИсходящее.СчетКонтрагента = ДанныеСчетаКонтрагента.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.БанковскиеСчета КАК ДанныеСчетаБанкаПосредника
	|		ПО ПлатежноеПоручениеИсходящее.СчетБанкаПосредника = ДанныеСчетаБанкаПосредника.Ссылка
	|ГДЕ
	|	ПлатежноеПоручениеИсходящее.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПлатежноеПоручениеИсходящее.Ссылка
	|;
	|
	|ВЫБРАТЬ
	|	ПлатежноеПоручениеИсходящее.Ссылка            КАК Ссылка,
	|	ПлатежноеПоручениеИсходящее.Контрагент        КАК Получатель,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ПлатежноеПоручениеИсходящее.СчетКонтрагента.БанкДляРасчетов, ЗНАЧЕНИЕ(Справочник.Банки.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Банки.ПустаяСсылка)
	|			ТОГДА ЕСТЬNULL(ПлатежноеПоручениеИсходящее.СчетКонтрагента.НомерСчета, """")
	|		ИНАЧЕ ЕСТЬNULL(ПлатежноеПоручениеИсходящее.СчетКонтрагента.Банк.КоррСчет, """")
	|	КОНЕЦ                                         КАК СчетПолучателя,
	|	""""                                          КАК Период,
	|	""""                                          КАК КонечныйПолучатель,
	|	ВЫБОР 
	|		КОГДА ПлатежноеПоручениеИсходящее.ВключатьКомиссиюБанка
	|			ТОГДА ПлатежноеПоручениеИсходящее.СуммаДокумента + ПлатежноеПоручениеИсходящее.СуммаКомиссии
	|		ИНАЧЕ ПлатежноеПоручениеИсходящее.СуммаДокумента
	|	КОНЕЦ                                         КАК Сумма
	|ИЗ
	|	Документ.ПлатежноеПоручениеИсходящее КАК ПлатежноеПоручениеИсходящее
	|ГДЕ
	|	ПлатежноеПоручениеИсходящее.Ссылка В(&МассивОбъектов)
	|	И НЕ ПлатежноеПоручениеИсходящее.ВидОперации В (
	|		ЗНАЧЕНИЕ(Перечисление.ВидыОперацийППИсходящее.ПеречислениеЗаработнойПлаты),
	|		ЗНАЧЕНИЕ(Перечисление.ВидыОперацийППИсходящее.ПеречислениеДенежныхСредствПодотчетнику),
	|		ЗНАЧЕНИЕ(Перечисление.ВидыОперацийППИсходящее.ПеречислениеПенсионныхВзносов),
	|		ЗНАЧЕНИЕ(Перечисление.ВидыОперацийППИсходящее.ПеречислениеСоциальныхОтчислений),
	|		ЗНАЧЕНИЕ(Перечисление.ВидыОперацийППИсходящее.ПеречислениеПрочихВыплат),
	|		ЗНАЧЕНИЕ(Перечисление.ВидыОперацийППИсходящее.ПеречислениеЕдиногоПлатежа),
	|		ЗНАЧЕНИЕ(Перечисление.ВидыОперацийППИсходящее.ПеречислениеПрочихДоходов),
	|		ЗНАЧЕНИЕ(Перечисление.ВидыОперацийППИсходящее.ПеречислениеПоИсполнительнымЛистам))
	|
	// ПеречислениеЗаработнойПлаты
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ
	|	Перечисления.Ссылка                           КАК Ссылка,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(КартСчета.НеЯвляетсяВладельцемСчета, ЛОЖЬ)
	|			ТОГДА КартСчета.ФизЛицоВладелецСчета
	|		ИНАЧЕ ЗарплатаСписок.Физлицо
	|	КОНЕЦ                                         КАК Получатель,
	|	ЕСТЬNULL(КартСчета.НомерСчета, """")          КАК СчетПолучателя,
	|	ЗарплатаДокумент.ПериодНачисленияЗарплаты     КАК Период,
	|	""""                                          КАК КонечныйПолучатель,
	|	ЗарплатаСписок.Сумма +
	|	ЗарплатаСписок.ДепонированнаяСумма            КАК Сумма
	|ИЗ
	|	Документ.ПлатежноеПоручениеИсходящее.ПеречислениеЗаработнойПлаты КАК Перечисления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаСписок
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КартСчета КАК КартСчета
	|			ПО КартСчета.Ссылка = ЗарплатаСписок.НомерКартСчета
	|		ПО ЗарплатаСписок.Ссылка = Перечисления.Ведомость
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗарплатаКВыплатеОрганизаций КАК ЗарплатаДокумент
	|		ПО ЗарплатаДокумент.Ссылка = Перечисления.Ведомость
	|ГДЕ
	|	Перечисления.Ссылка В(&МассивОбъектов)
	|
	// ПеречислениеДенежныхСредствПодотчетнику
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ
	|	Перечисления.Ссылка                           КАК Ссылка,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(КартСчета.НеЯвляетсяВладельцемСчета, ЛОЖЬ)
	|			ТОГДА КартСчета.ФизЛицоВладелецСчета
	|		ИНАЧЕ Перечисления.Физлицо
	|	КОНЕЦ                                         КАК Получатель,
	|	ЕСТЬNULL(КартСчета.НомерСчета, """")          КАК СчетПолучателя,
	|	""""                                          КАК Период,
	|	""""                                          КАК КонечныйПолучатель,
	|	Перечисления.СуммаПлатежа                     КАК Сумма
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПеречислениеВПодотчет.Ссылка              КАК Ссылка,
	|		ПеречислениеВПодотчет.Физлицо             КАК Физлицо,
	|		ПеречислениеВПодотчет.НомерКартСчета      КАК НомерКартСчета,
	|		СУММА(ПеречислениеВПодотчет.СуммаПлатежа) КАК СуммаПлатежа
	|	ИЗ
	|		Документ.ПлатежноеПоручениеИсходящее.ПеречислениеВПодотчет КАК ПеречислениеВПодотчет
	|	ГДЕ
	|		ПеречислениеВПодотчет.Ссылка В(&МассивОбъектов)
	|	СГРУППИРОВАТЬ ПО
	|		ПеречислениеВПодотчет.Ссылка,
	|		ПеречислениеВПодотчет.Физлицо,
	|		ПеречислениеВПодотчет.НомерКартСчета
	|	) КАК Перечисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Картсчета КАК КартСчета
	|		ПО КартСчета.Ссылка = Перечисления.НомерКартСчета
	|
	// ПеречислениеПенсионныхВзносов
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ
	|	Перечисления.Ссылка                           КАК Ссылка,
	|	ПлатежноеПоручениеИсходящее.Контрагент        КАК Получатель,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ПлатежноеПоручениеИсходящее.СчетКонтрагента.БанкДляРасчетов, ЗНАЧЕНИЕ(Справочник.Банки.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Банки.ПустаяСсылка)
	|			ТОГДА ЕСТЬNULL(ПлатежноеПоручениеИсходящее.СчетКонтрагента.НомерСчета, ЗНАЧЕНИЕ(Справочник.Банки.ПустаяСсылка))
	|		ИНАЧЕ ЕСТЬNULL(ПлатежноеПоручениеИсходящее.СчетКонтрагента.Банк.КоррСчет, ЗНАЧЕНИЕ(Справочник.Банки.ПустаяСсылка))
	|	КОНЕЦ                                         КАК СчетПолучателя,
	|	ОПВПеречислениеВФонды.ПериодРегистрации       КАК Период,
	|	ВЫБОР
	|		КОГДА ОПВПеречислениеВФондыПенсионныеВзносы.ФизЛицо ССЫЛКА Справочник.ФизическиеЛица
	|			ТОГДА ОПВПеречислениеВФондыПенсионныеВзносы.ФизЛицо
	|		ИНАЧЕ ОПВПеречислениеВФондыПенсионныеВзносы.ФизЛицо.ФизЛицо
	|	КОНЕЦ                                         КАК КонечныйПолучатель,
	|	ОПВПеречислениеВФондыПенсионныеВзносы.Сумма   КАК Сумма
	|ИЗ
	|	Документ.ПлатежноеПоручениеИсходящее.ПеречислениеПенсионныхВзносов КАК Перечисления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПлатежноеПоручениеИсходящее КАК ПлатежноеПоручениеИсходящее
	|		ПО ПлатежноеПоручениеИсходящее.Ссылка = Перечисления.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОПВПеречислениеВФонды.ПенсионныеВзносы КАК ОПВПеречислениеВФондыПенсионныеВзносы
	|		ПО ОПВПеречислениеВФондыПенсионныеВзносы.Ссылка = Перечисления.Документ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОПВПеречислениеВФонды КАК ОПВПеречислениеВФонды
	|		ПО ОПВПеречислениеВФонды.Ссылка = Перечисления.Документ
	|ГДЕ
	|	Перечисления.Ссылка В(&МассивОбъектов)
	|
	// ПеречислениеСоциальныхОтчислений
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ
	|	Перечисления.Ссылка                           КАК Ссылка,
	|	ПлатежноеПоручениеИсходящее.Контрагент        КАК Получатель,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ПлатежноеПоручениеИсходящее.СчетКонтрагента.БанкДляРасчетов, ЗНАЧЕНИЕ(Справочник.Банки.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Банки.ПустаяСсылка)
	|			ТОГДА ЕСТЬNULL(ПлатежноеПоручениеИсходящее.СчетКонтрагента.НомерСчета, ЗНАЧЕНИЕ(Справочник.Банки.ПустаяСсылка))
	|		ИНАЧЕ ЕСТЬNULL(ПлатежноеПоручениеИсходящее.СчетКонтрагента.Банк.КоррСчет, ЗНАЧЕНИЕ(Справочник.Банки.ПустаяСсылка))
	|	КОНЕЦ                                         КАК СчетПолучателя, 
	|	ВЫБОР
    |		КОГДА СОПеречислениеВФондыСоциальныеОтчисления.МесяцПериода = ДАТАВРЕМЯ(1, 1, 1)
    |			ТОГДА НАЧАЛОПЕРИОДА(СОПеречислениеВФонды.ПериодРегистрации, МЕСЯЦ)
    |			ИНАЧЕ НАЧАЛОПЕРИОДА(СОПеречислениеВФондыСоциальныеОтчисления.МесяцПериода, МЕСЯЦ)
    |	КОНЕЦ 										  КАК Период,	
	|	ВЫБОР
	|		КОГДА СОПеречислениеВФондыСоциальныеОтчисления.ФизЛицо ССЫЛКА Справочник.ФизическиеЛица
	|			ТОГДА СОПеречислениеВФондыСоциальныеОтчисления.ФизЛицо
	|		ИНАЧЕ СОПеречислениеВФондыСоциальныеОтчисления.ФизЛицо.ФизЛицо
	|	КОНЕЦ                                          КАК КонечныйПолучатель,
	|	СОПеречислениеВФондыСоциальныеОтчисления.Сумма КАК Сумма
	|ИЗ
	|	Документ.ПлатежноеПоручениеИсходящее.ПеречислениеСоциальныхОтчислений КАК Перечисления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПлатежноеПоручениеИсходящее КАК ПлатежноеПоручениеИсходящее
	|		ПО ПлатежноеПоручениеИсходящее.Ссылка = Перечисления.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (
	|			ВЫБРАТЬ
	|				СоциальныеОтчисления.Ссылка       КАК Ссылка,
	|				СоциальныеОтчисления.ФизЛицо      КАК ФизЛицо,
	|				СУММА(СоциальныеОтчисления.Сумма) КАК Сумма,
	|				СоциальныеОтчисления.МесяцПериода	
	|			ИЗ
	|				Документ.СОПеречислениеВФонды.СоциальныеОтчисления КАК СоциальныеОтчисления
	|			СГРУППИРОВАТЬ ПО
	|				СоциальныеОтчисления.Ссылка,
	|				СоциальныеОтчисления.Физлицо,
	|				СоциальныеОтчисления.МесяцПериода
	|			) КАК СОПеречислениеВФондыСоциальныеОтчисления
	|		ПО СОПеречислениеВФондыСоциальныеОтчисления.Ссылка = Перечисления.Документ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СОПеречислениеВФонды КАК СОПеречислениеВФонды
	|		ПО СОПеречислениеВФонды.Ссылка = Перечисления.Документ
	|ГДЕ
	|	Перечисления.Ссылка В(&МассивОбъектов)
	|
	// ПеречислениеПрочихВыплат
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ
	|	Перечисления.Ссылка                           КАК Ссылка,
	|	ПлатежноеПоручениеИсходящее.Контрагент        КАК Получатель,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ПлатежноеПоручениеИсходящее.СчетКонтрагента.БанкДляРасчетов, ЗНАЧЕНИЕ(Справочник.Банки.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Банки.ПустаяСсылка)
	|			ТОГДА ЕСТЬNULL(ПлатежноеПоручениеИсходящее.СчетКонтрагента.НомерСчета, ЗНАЧЕНИЕ(Справочник.Банки.ПустаяСсылка))
	|		ИНАЧЕ ЕСТЬNULL(ПлатежноеПоручениеИсходящее.СчетКонтрагента.Банк.КоррСчет, ЗНАЧЕНИЕ(Справочник.Банки.ПустаяСсылка))
	|	КОНЕЦ                                         КАК СчетПолучателя,
	|	ВедомостьНаПеречислениеПрочихВыплатПрочиеВыплаты.ПериодВзаиморасчетов КАК Период,
	|	ВедомостьНаПеречислениеПрочихВыплатПрочиеВыплаты.ФизЛицо КАК КонечныйПолучатель,
	|	ВедомостьНаПеречислениеПрочихВыплатПрочиеВыплаты.Сумма КАК Сумма
	|ИЗ
	|	Документ.ПлатежноеПоручениеИсходящее.ПеречислениеПрочихВыплат КАК Перечисления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПлатежноеПоручениеИсходящее КАК ПлатежноеПоручениеИсходящее
	|		ПО ПлатежноеПоручениеИсходящее.Ссылка = Перечисления.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (
	|			ВЫБРАТЬ
	|				ПрочиеВыплаты.Ссылка              КАК Ссылка,
	|				ПрочиеВыплаты.Физлицо             КАК Физлицо,
	|				СУММА(ПрочиеВыплаты.Сумма)        КАК Сумма,
	|				ПрочиеВыплаты.ПериодВзаиморасчетов КАК ПериодВзаиморасчетов 
	|			ИЗ
	|				Документ.ВедомостьНаПеречислениеПрочихВыплат.ПрочиеВыплаты КАК ПрочиеВыплаты
	|			СГРУППИРОВАТЬ ПО
	|				ПрочиеВыплаты.Ссылка,
	|				ПрочиеВыплаты.Физлицо,
	|				ПрочиеВыплаты.ПериодВзаиморасчетов
	|			) КАК ВедомостьНаПеречислениеПрочихВыплатПрочиеВыплаты
	|		ПО ВедомостьНаПеречислениеПрочихВыплатПрочиеВыплаты.Ссылка = Перечисления.Документ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВедомостьНаПеречислениеПрочихВыплат КАК ВедомостьНаПеречислениеПрочихВыплат
	|		ПО ВедомостьНаПеречислениеПрочихВыплат.Ссылка = Перечисления.Документ
	|ГДЕ
	|	Перечисления.Ссылка В(&МассивОбъектов)
	|
	// ПеречислениеЕдиногоПлатежа
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ
	|	Перечисления.Ссылка                           КАК Ссылка,
	|	ПлатежноеПоручениеИсходящее.Контрагент        КАК Получатель,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ПлатежноеПоручениеИсходящее.СчетКонтрагента.БанкДляРасчетов, ЗНАЧЕНИЕ(Справочник.Банки.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Банки.ПустаяСсылка)
	|			ТОГДА ЕСТЬNULL(ПлатежноеПоручениеИсходящее.СчетКонтрагента.НомерСчета, ЗНАЧЕНИЕ(Справочник.Банки.ПустаяСсылка))
	|		ИНАЧЕ ЕСТЬNULL(ПлатежноеПоручениеИсходящее.СчетКонтрагента.Банк.КоррСчет, ЗНАЧЕНИЕ(Справочник.Банки.ПустаяСсылка))
	|	КОНЕЦ                                         КАК СчетПолучателя,
	|	ЕППеречислениеВФонды.ПериодРегистрации        КАК Период,
	|	ЕППеречислениеВФондыЕдиныеПлатежи.ФизЛицо     КАК КонечныйПолучатель,
	|	ЕППеречислениеВФондыЕдиныеПлатежи.Сумма       КАК Сумма
	|ИЗ
	|	Документ.ПлатежноеПоручениеИсходящее.ПеречислениеЕдиныхПлатежей КАК Перечисления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПлатежноеПоручениеИсходящее КАК ПлатежноеПоручениеИсходящее
	|		ПО ПлатежноеПоручениеИсходящее.Ссылка = Перечисления.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (
	|			ВЫБРАТЬ
	|				ЕдиныеПлатежи.Ссылка              КАК Ссылка,
	|				ЕдиныеПлатежи.Физлицо             КАК Физлицо,
	|				СУММА(ЕдиныеПлатежи.Сумма)        КАК Сумма
	|			ИЗ
	|				Документ.ЕППеречислениеВФонды.ЕдиныеПлатежи КАК ЕдиныеПлатежи
	|			СГРУППИРОВАТЬ ПО
	|				ЕдиныеПлатежи.Ссылка,
	|				ЕдиныеПлатежи.Физлицо
	|			) КАК ЕППеречислениеВФондыЕдиныеПлатежи
	|		ПО ЕППеречислениеВФондыЕдиныеПлатежи.Ссылка = Перечисления.Документ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЕППеречислениеВФонды КАК ЕППеречислениеВФонды
	|		ПО ЕППеречислениеВФонды.Ссылка = Перечисления.Документ
	|ГДЕ
	|	Перечисления.Ссылка В(&МассивОбъектов)
	|
	// ПеречислениеПрочихДоходов контрагенты
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ
	|	Перечисления.Ссылка                           КАК Ссылка,
	|	ВыплатыСписок.Физлицо                         КАК Получатель,
	|	БанковскиеСчета.НомерСчета                    КАК СчетПолучателя,
	|	ВыплатыДокумент.ПериодРегистрации             КАК Период,
	|	""""                                          КАК КонечныйПолучатель,
	|	ВыплатыСписок.СуммаКВыплате                   КАК Сумма
	|ИЗ
	|	Документ.ПлатежноеПоручениеИсходящее.ПеречислениеПрочихДоходов КАК Перечисления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВедомостьПрочихДоходов.Выплаты КАК ВыплатыСписок
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.БанковскиеСчета КАК БанковскиеСчета
	|			ПО БанковскиеСчета.Ссылка = ВыплатыСписок.НомерСчета
	|		ПО ВыплатыСписок.Ссылка = Перечисления.Документ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВедомостьПрочихДоходов КАК ВыплатыДокумент
	|		ПО ВыплатыДокумент.Ссылка = Перечисления.Документ
	|ГДЕ
	|	Перечисления.Ссылка В(&МассивОбъектов)
	|
	// ПеречислениеПрочихДоходов физлица
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ
	|	Перечисления.Ссылка                           КАК Ссылка,
	|	ВЫБОР
	|		КОГДА КартСчета.НеЯвляетсяВладельцемСчета
	|			ТОГДА КартСчета.ФизЛицоВладелецСчета
	|		ИНАЧЕ ВыплатыСписок.Физлицо
	|	КОНЕЦ                                         КАК Получатель,
	|	КартСчета.НомерСчета                    КАК СчетПолучателя,
	|	ВыплатыДокумент.ПериодРегистрации             КАК Период,
	|	""""                                          КАК КонечныйПолучатель,
	|	ВыплатыСписок.СуммаКВыплате                   КАК Сумма
	|ИЗ
	|	Документ.ПлатежноеПоручениеИсходящее.ПеречислениеПрочихДоходов КАК Перечисления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВедомостьПрочихДоходов.Выплаты КАК ВыплатыСписок
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КартСчета КАК КартСчета
	|			ПО КартСчета.Ссылка = ВыплатыСписок.НомерСчета
	|		ПО ВыплатыСписок.Ссылка = Перечисления.Документ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВедомостьПрочихДоходов КАК ВыплатыДокумент
	|		ПО ВыплатыДокумент.Ссылка = Перечисления.Документ
	|ГДЕ
	|	Перечисления.Ссылка В(&МассивОбъектов)
	|
	// ПеречислениеПоИсполнительнымЛистам
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ
	|	Перечисления.Ссылка                           КАК Ссылка,
	|	ПлатежноеПоручениеИсходящее.Контрагент        КАК Получатель,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ПлатежноеПоручениеИсходящее.СчетКонтрагента.БанкДляРасчетов, ЗНАЧЕНИЕ(Справочник.Банки.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Банки.ПустаяСсылка)
	|			ТОГДА ЕСТЬNULL(ПлатежноеПоручениеИсходящее.СчетКонтрагента.НомерСчета, ЗНАЧЕНИЕ(Справочник.Банки.ПустаяСсылка))
	|		ИНАЧЕ ЕСТЬNULL(ПлатежноеПоручениеИсходящее.СчетКонтрагента.Банк.КоррСчет, ЗНАЧЕНИЕ(Справочник.Банки.ПустаяСсылка))
	|	КОНЕЦ                                         КАК СчетПолучателя, 
	|	НАЧАЛОПЕРИОДА(ИЛПеречислениеПолучателям.ПериодРегистрации, МЕСЯЦ) КАК Период,	
	|	ИЛПеречислениеПолучателямИсполнительныеЛисты.ФизЛицо КАК КонечныйПолучатель,
	|	ИЛПеречислениеПолучателямИсполнительныеЛисты.Сумма КАК Сумма
	|ИЗ
	|	Документ.ПлатежноеПоручениеИсходящее.ПеречислениеПоИсполнительнымЛистам КАК Перечисления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПлатежноеПоручениеИсходящее КАК ПлатежноеПоручениеИсходящее
	|		ПО ПлатежноеПоручениеИсходящее.Ссылка = Перечисления.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (
	|			ВЫБРАТЬ
	|				ИЛПеречислениеПолучателямИсполнительныеЛисты.Ссылка       КАК Ссылка,
	|				ДокументИсполнительныйЛист.ФизЛицо      КАК ФизЛицо,
	|				СУММА(ИЛПеречислениеПолучателямИсполнительныеЛисты.СуммаПлатежа) КАК Сумма
	|			ИЗ
	|				Документ.ИЛПеречислениеПолучателям.ИсполнительныеЛисты КАК ИЛПеречислениеПолучателямИсполнительныеЛисты
	
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ИсполнительныйЛист КАК ДокументИсполнительныйЛист
	|				ПО (ИЛПеречислениеПолучателямИсполнительныеЛисты.ДокументОснование = ДокументИсполнительныйЛист.Ссылка)
	
	|			СГРУППИРОВАТЬ ПО
	|				ИЛПеречислениеПолучателямИсполнительныеЛисты.Ссылка,
	|				ДокументИсполнительныйЛист.Физлицо
	|			) КАК ИЛПеречислениеПолучателямИсполнительныеЛисты
	|		ПО ИЛПеречислениеПолучателямИсполнительныеЛисты.Ссылка = Перечисления.Документ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ИЛПеречислениеПолучателям КАК ИЛПеречислениеПолучателям
	|		ПО ИЛПеречислениеПолучателям.Ссылка = Перечисления.Документ
	|ГДЕ
	|	Перечисления.Ссылка В(&МассивОбъектов)
	|
	|ИТОГИ
	|	КОЛИЧЕСТВО(Получатель) КАК Получатель
	|ПО
	|	Ссылка");
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ДанныеДокументов = РезультатыЗапроса[0].Выбрать();
	ДанныеПолучателей = РезультатыЗапроса[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПлатежноеПоручение_СводноеПлатежноеПоручение";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ПлатежноеПоручениеИсходящее.ПФ_MXL_СводноеПлатежноеПоручение");
	
	КодЯзыка = Метаданные.Языки.Русский.КодЯзыка;
	Макет.КодЯзыка =  КодЯзыка;
	
	ОбластьРазделителя = Макет.ПолучитьОбласть("Разделитель");
	
	Пока ДанныеДокументов.Следующий() Цикл
		
		Если ТабДокумент.ВысотаТаблицы > 0 Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
		
		СтруктурнаяЕдиницаОрганизация = ОбщегоНазначенияБК.ПолучитьСтруктурнуюЕдиницу(ДанныеДокументов.Организация, ДанныеДокументов.СтруктурноеПодразделениеОтправитель);
		
		СведенияОбОрганизации = ОбщегоНазначенияБКВызовСервера.СведенияОЮрФизЛице(СтруктурнаяЕдиницаОрганизация, ДанныеДокументов.Дата);
		
		НомерПечать = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ДанныеДокументов.Номер, ДанныеДокументов.Ссылка);
		
		ОбластьМакета = Макет.ПолучитьОбласть("ПлатежноеПоручение");
		
		МесяцПрописью        = ДанныеДокументов.СчетОрганизацииМесяцПрописью;
		СуммаБезДробнойЧасти = ДанныеДокументов.СчетОрганизацииСуммаБезДробнойЧасти;
		ФорматДаты           = "Л=" + КодЯзыка + ";" + ?(МесяцПрописью = 1, "ДФ='дд ММММ гггг'", "ДФ=дд.ММ.гггг");
		
		ОбластьМакета.Параметры.НаименованиеНомер = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Сводное платежное поручение № %1'", КодЯзыка), НомерПечать);
		
		ДатаДокумента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 года'", КодЯзыка), Формат(ДанныеДокументов.Дата, ФорматДаты));
		
		ОбластьМакета.Параметры.ДатаДокумента = ДатаДокумента;
		
		СуммаСКомиссией = ?(ДанныеДокументов.ВключатьКомиссиюБанка, ДанныеДокументов.СуммаДокумента + ДанныеДокументов.СуммаКомиссии, ДанныеДокументов.СуммаДокумента);
		
		ОбластьМакета.Параметры.СуммаЧислом   = ФорматироватьСумму(СуммаСКомиссией, СуммаБезДробнойЧасти);
		ОбластьМакета.Параметры.СуммаПрописью = ФорматироватьСуммуПрописи(СуммаСКомиссией, СуммаБезДробнойЧасти, ДанныеДокументов.ПараметрыПрописиНаРусском);
		
		ОбластьМакета.Параметры.БанкПлательщика     = "" + ДанныеДокументов.СчетОрганизацииБанк + " " + ДанныеДокументов.СчетОрганизацииБанкГород;
		ОбластьМакета.Параметры.БикБанкаПлательщика = ДанныеДокументов.СчетОрганизацииБИК;
		ОбластьМакета.Параметры.БанкПолучателя      = "" + ДанныеДокументов.СчетКонтрагентаБанк + " " + ДанныеДокументов.СчетКонтрагентаБанкГород;
		ОбластьМакета.Параметры.БикБанкаПолучателя  = ДанныеДокументов.СчетКонтрагентаБИК;
		ОбластьМакета.Параметры.ИИК                 = ?(ЗначениеЗаполнено(ДанныеДокументов.СчетКонтрагентаБанкДляРасчетов), ДанныеДокументов.СчетКонтрагентаБанкКоррСчет, ДанныеДокументов.СчетКонтрагентаНомерСчета);
		ОбластьМакета.Параметры.БанкПосредник       = ДанныеДокументов.БанкПосредникДляПечати; 
		ОбластьМакета.Параметры.БанкПосредникБИК    = ДанныеДокументов.СчетПосредникаБИК;
		
		ОбластьМакета.Параметры.ДатаВалютирования   = Формат(ДанныеДокументов.ДатаВалютирования, "Л=" + КодЯзыка + "; ДФ=dd.MM.yyyy");
		
		Руководители = ОбщегоНазначенияБКВызовСервера.ОтветственныеЛицаОрганизаций(СтруктурнаяЕдиницаОрганизация, КонецДня(ДанныеДокументов.Дата),,Истина, Истина);
		
		ОбластьМакета.Параметры.ФИОРуководителя       = Руководители.Руководитель;
		ОбластьМакета.Параметры.ФИОГлавногоБухгалтера = ?(Не ЗначениеЗаполнено(Руководители.ГлавныйБухгалтерДляПодписиБанковскихДокументов),
			НСтр("ru = 'Не предусмотрен'", КодЯзыка),
			Руководители.ГлавныйБухгалтерДляПодписиБанковскихДокументов);
		
		КоличествоПП = 0;
		ДетальныеДанные = Неопределено;
		ДанныеПолучателей.Сбросить();
		Если ДанныеПолучателей.НайтиСледующий(ДанныеДокументов.Ссылка, "Ссылка") Тогда
			КоличествоПП = ДанныеПолучателей.Получатель;
			ДетальныеДанные = ДанныеПолучателей.Выбрать();
		КонецЕсли;
		
		ОбластьМакета.Параметры.КоличествоПП = КоличествоПП;
		
		ТабДокумент.Вывести(ОбластьМакета);
		ТабДокумент.Вывести(ОбластьРазделителя);
		
		Если ДетальныеДанные <> Неопределено Тогда
			
			ОтправительСтруктурнаяЕдиница     = ОбщегоНазначенияБК.ПолучитьСтруктурнуюЕдиницу(ДанныеДокументов.Организация, ДанныеДокументов.СтруктурноеПодразделениеОтправитель);
			
			Отправитель    = ?(ПустаяСтрока(ДанныеДокументов.ТекстПлательщика), СведенияОбОрганизации.ПолноеНаименование, СокрЛП(ДанныеДокументов.ТекстПлательщика));		
			ОтправительБИН = ?(ПустаяСтрока(ДанныеДокументов.РННПлательщика),   СведенияОбОрганизации.БИН_ИИН,            СокрЛП(ДанныеДокументов.РННПлательщика));		
			
			Плательщик     = "";
			ПлательщикБИН  = "";
			Если ЗначениеЗаполнено(ДанныеДокументов.ФактическийПлательщик) Тогда
				СведенияОПлательщике = ОбщегоНазначенияБКВызовСервера.СведенияОЮрФизЛице(ДанныеДокументов.ФактическийПлательщик, ДанныеДокументов.Дата);
				Плательщик    = СокрЛП(СведенияОПлательщике.ПолноеНаименование);
				ПлательщикБИН = СокрЛП(СведенияОПлательщике.БИН_ИИН);				
			КонецЕсли;
			
			НомерСчетаПлательщика = ?(ЗначениеЗаполнено(ДанныеДокументов.СчетОрганизацииБанкДляРасчетов), ДанныеДокументов.СчетОрганизацииБанкКоррСчет, ДанныеДокументов.СчетОрганизацииНомерСчета);
			КодСтраныОтправителя  = ?(СведенияОбОрганизации.СтранаРезидентства = Справочники.КлассификаторСтранМира.Казахстан, "", СведенияОбОрганизации.СтранаРезидентстваКод2);
			
			Если ДанныеДокументов.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет Тогда
				КонтрагентДляПечати         = ОбщегоНазначенияБК.ПолучитьСтруктурнуюЕдиницу(ДанныеДокументов.Организация, ДанныеДокументов.СтруктурноеПодразделениеПолучатель);
				ПроверятьТекстовыеРеквизиты = Ложь;
			Иначе
				КонтрагентДляПечати         = ДанныеДокументов.Контрагент;
				ПроверятьТекстовыеРеквизиты = Истина;
			КонецЕсли;
			
			НомерПП = 0;
			
			Пока ДетальныеДанные.Следующий() Цикл
				
				ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				
				ОбластьМакета = Макет.ПолучитьОбласть("Транзакция");
				
				НомерПП = НомерПП + 1;
				ОбластьМакета.Параметры.НаименованиеНомер = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Платежное поручение № %1'", КодЯзыка), Формат(НомерПП, "ЧГ=0"));
				ОбластьМакета.Параметры.ДатаДокумента     = ДатаДокумента;
				
				// Для операции "Перечисление по исполнительным листам" Фактическим плательщиком является
				// КонечныйПолучатель из ДетальныеДанные (сотрудник-плательщик по ИЛ) 
				Если ДанныеДокументов.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеПоИсполнительнымЛистам Тогда
					Если ЗначениеЗаполнено(ДетальныеДанные.КонечныйПолучатель) Тогда
						СведенияОПлательщике = ОбщегоНазначенияБКВызовСервера.СведенияОЮрФизЛице(ДетальныеДанные.КонечныйПолучатель, ДанныеДокументов.Дата);
						Плательщик    = СокрЛП(СведенияОПлательщике.ПолноеНаименование);
						ПлательщикБИН = СокрЛП(СведенияОПлательщике.БИН_ИИН);				
					КонецЕсли;
				КонецЕсли;
				
				ОбластьМакета.Параметры.Отправитель    = Отправитель;
				ОбластьМакета.Параметры.ОтправительБИН = ОтправительБИН;
				ОбластьМакета.Параметры.Плательщик     = Плательщик;
				ОбластьМакета.Параметры.ПлательщикБИН  = ПлательщикБИН;
				
				ОбластьМакета.Параметры.НомерСчетаПлательщика         = НомерСчетаПлательщика;
				ОбластьМакета.Параметры.ПлательщикКБе                 = ДанныеДокументов.КБе;
				ОбластьМакета.Параметры.СтранаРезидентстваОтправителя = КодСтраныОтправителя;
				
				ОбластьМакета.Параметры.БанкПлательщика     = "" + ДанныеДокументов.СчетОрганизацииБанк + " " + ДанныеДокументов.СчетОрганизацииБанкГород;
				ОбластьМакета.Параметры.БикБанкаПлательщика = ДанныеДокументов.СчетОрганизацииБИК;
				
				Если ДанныеДокументов.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет Тогда
					ПолучательДляПечати         = ОбщегоНазначенияБК.ПолучитьСтруктурнуюЕдиницу(ДанныеДокументов.Организация, ДанныеДокументов.СтруктурноеПодразделениеПолучатель);
					ПроверятьТекстовыеРеквизиты = Ложь;
				Иначе
					ПолучательДляПечати         = ДетальныеДанные.Получатель;
					ПроверятьТекстовыеРеквизиты = Истина;
				КонецЕсли;
				
				СведенияОПолучателе = ОбщегоНазначенияБКВызовСервера.СведенияОЮрФизЛице(ПолучательДляПечати, ДанныеДокументов.Дата);				
				
				Если ДанныеДокументов.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеЗаработнойПлаты  
					ИЛИ ДанныеДокументов.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеДенежныхСредствПодотчетнику Тогда					
					ОбластьМакета.Параметры.Получатель           = СведенияОПолучателе.ПолноеНаименование;
					ОбластьМакета.Параметры.ПолучательБИН        = СведенияОПолучателе.БИН_ИИН; 
				Иначе
					ОбластьМакета.Параметры.Получатель           = ?(ПустаяСтрока(ДанныеДокументов.ТекстПолучателя) ИЛИ НЕ ПроверятьТекстовыеРеквизиты, СведенияОПолучателе.ПолноеНаименование, СокрЛП(ДанныеДокументов.ТекстПолучателя));		
					ОбластьМакета.Параметры.ПолучательБИН        = ?(ПустаяСтрока(ДанныеДокументов.РННПолучателя)   ИЛИ НЕ ПроверятьТекстовыеРеквизиты, СведенияОПолучателе.БИН_ИИН, СокрЛП(ДанныеДокументов.РННПолучателя));	
				КонецЕсли;				         
				
				ОбластьМакета.Параметры.НомерСчетаПолучателя = ДетальныеДанные.СчетПолучателя;
				ОбластьМакета.Параметры.ПолучательКБЕ        = СведенияОПолучателе.КБе;
				
				// Для операции "Перечисление по исполнительным листам" КонечныйПолучатель из ДетальныеДанные
				// содержит данные о Фактическом плательщике (сотрудник-плательщик по ИЛ) 
				Если ДанныеДокументов.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеПоИсполнительнымЛистам Тогда
					СведенияОКонечномПолучателе = ОбщегоНазначенияБКВызовСервера.СведенияОЮрФизЛице("", ДанныеДокументов.Дата);
				Иначе
					СведенияОКонечномПолучателе = ОбщегоНазначенияБКВызовСервера.СведенияОЮрФизЛице(ДетальныеДанные.КонечныйПолучатель, ДанныеДокументов.Дата);
				КонецЕсли;
				ОбластьМакета.Параметры.КонечныйПолучатель           = СведенияОКонечномПолучателе.ПолноеНаименование;
				ОбластьМакета.Параметры.КонечныйПолучательБИН        = СведенияОКонечномПолучателе.БИН_ИИН;
				ОбластьМакета.Параметры.СтранаРезидентстваПолучателя = ?(СведенияОПолучателе.СтранаРезидентства = Справочники.КлассификаторСтранМира.Казахстан, "", СведенияОПолучателе.СтранаРезидентстваКод2);
				
				ОбластьМакета.Параметры.БанкПолучателя      = "" + ДанныеДокументов.СчетКонтрагентаБанк + " " + ДанныеДокументов.СчетКонтрагентаБанкГород;
				ОбластьМакета.Параметры.БикБанкаПолучателя  = ДанныеДокументов.СчетКонтрагентаБИК;
				ОбластьМакета.Параметры.БанкПосредник       = ДанныеДокументов.БанкПосредникДляПечати; 
				ОбластьМакета.Параметры.БанкПосредникБИК    = ДанныеДокументов.СчетПосредникаБИК;
				
				ОбластьМакета.Параметры.СуммаЧислом = ФорматироватьСумму(ДетальныеДанные.Сумма, СуммаБезДробнойЧасти);
				ОбластьМакета.Параметры.СуммаПрописью = ФорматироватьСуммуПрописи(ДетальныеДанные.Сумма, СуммаБезДробнойЧасти, ДанныеДокументов.ПараметрыПрописиНаРусском);
				
				ОбластьМакета.Параметры.НазначениеПлатежа         = ДанныеДокументов.НазначениеПлатежа;
				ОбластьМакета.Параметры.КодБюджетнойКлассификации = ДанныеДокументов.КодБК;
				ОбластьМакета.Параметры.КодНазначенияПлатежа      = ДанныеДокументов.КодНазначенияПлатежа;
				ОбластьМакета.Параметры.ДатаВалютирования         = Формат(ДанныеДокументов.ДатаВалютирования, "Л=" + КодЯзыка + "; ДФ=dd.MM.yyyy");
				ОбластьМакета.Параметры.Период                    = Формат(ДетальныеДанные.Период, "Л=" + КодЯзыка + "; ДФ=MM.yyyy");
				ОбластьМакета.Параметры.ДатаПолученияТовара       = ?(ЗначениеЗаполнено(ДанныеДокументов.ДатаПолученияТовара),
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 года'", КодЯзыка), Формат(ДанныеДокументов.ДатаПолученияТовара, "Л=" + КодЯзыка + "; ДЛФ=DD")),
					"");
				
				ОбластьМакета.Параметры.ФИОРуководителя       = Руководители.Руководитель;
				ОбластьМакета.Параметры.ФИОГлавногоБухгалтера = ?(Не ЗначениеЗаполнено(Руководители.ГлавныйБухгалтерДляПодписиБанковскихДокументов),
					НСтр("ru = 'Не предусмотрен'", КодЯзыка),
					Руководители.ГлавныйБухгалтерДляПодписиБанковскихДокументов);
				
				ТабДокумент.Вывести(ОбластьМакета);
				ТабДокумент.Вывести(ОбластьРазделителя);
				
			КонецЦикла;
		КонецЕсли;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, НомерСтрокиНачало, ОбъектыПечати, ДанныеДокументов.Ссылка);
		
	КонецЦикла;
	
	Возврат ТабДокумент
	
КонецФункции

Функция ПечатьРеестра(МассивОбъектов, ОбъектыПечати, КодЯзыка=Неопределено) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеестрКПлатежномуПоручению_РеестрКПлатежномуПоручению";
	
	ДатаПрекращенияВыводаРНН = Константы.ДатаПрекращенияВыводаРННВПервичныхДокументах.Получить();
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ПлатежноеПоручениеИсходящее.ПФ_MXL_Реестр", КодЯзыка);
	
	// получим данные для печати
	ВыборкаПоРегистратору = СформироватьЗапросДляПечатиОПВиСО("ПоРеквизитам", МассивОбъектов).Выбрать();
	ВыборкаПоДокументам   = СформироватьЗапросДляПечатиОПВиСО("ПоТабличнойЧасти", МассивОбъектов).Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	Пока ВыборкаПоРегистратору.Следующий() Цикл
		
		Если ТабДокумент.ВысотаТаблицы > 0 Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
		
		ВыводитьРНН = НЕ ЗначениеЗаполнено(ДатаПрекращенияВыводаРНН) ИЛИ ВыборкаПоРегистратору.ДатаВыписки < ДатаПрекращенияВыводаРНН;
		
		ОбластьШапки   			= Макет.ПолучитьОбласть("Шапка");
		ОбластьШапкиФонда   	= Макет.ПолучитьОбласть("ШапкаФонда");
		
		ОбластьПодвалаИтог		= Макет.ПолучитьОбласть("Подвал|Итог");
		
		Если ВыводитьРНН Тогда
			ОбластьПодвала = Макет.ПолучитьОбласть("Подвал|Подписи");
		Иначе 
			ОбластьПодвала = Макет.ПолучитьОбласть("Подвал|Подписи_ИИН");
		КонецЕсли;

		Если ВыборкаПоРегистратору.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеЕдиногоПлатежа Тогда
			ЭтоЕП = Истина;	
		Иначе
			ЭтоЕП = Ложь;	
		КонецЕсли;
		
		ОбластьШапкиТаблицы  	= Макет.ПолучитьОбласть("ШапкаТаблицы" + ?(ВыводитьРНН, "", "_ИИН") + ?(ЭтоЕП, "ЕП", ""));
		ОбластьСтроки  			= Макет.ПолучитьОбласть("СтрокаРаботника" + ?(ВыводитьРНН, "", "_ИИН") + ?(ЭтоЕП, "ЕП", ""));
		
		// массив с двумя строками - для разбиения на страницы
	    ВыводимыеОбласти = Новый Массив();
		ВыводимыеОбласти.Добавить(ОбластьСтроки);
		
		СтруктурнаяЕдиницаОрганизация = ОбщегоНазначенияБК.ПолучитьСтруктурнуюЕдиницу(ВыборкаПоРегистратору.Организация, ВыборкаПоРегистратору.СтруктурноеПодразделениеОтправитель);

		СведенияОбОрганизации = ОбщегоНазначенияБКВызовСервера.СведенияОЮрФизЛице(СтруктурнаяЕдиницаОрганизация, ВыборкаПоРегистратору.ДатаДокумента);
		
		ИмяПараметра = ?(ВыводитьРНН, "РНН", "БИН_ИИН");
		СведенияОбОрганизации[ИмяПараметра] = ?(ПустаяСтрока(ВыборкаПоРегистратору.РННПлательщика), СведенияОбОрганизации[ИмяПараметра], СокрЛП(ВыборкаПоРегистратору.РННПлательщика));

		ОбластьШапки.Параметры.Заполнить(ВыборкаПоРегистратору);
		ОбластьШапкиФонда.Параметры.Заполнить(ВыборкаПоРегистратору);
		
		ОбластьШапки.Параметры.НомерДокумента  = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ВыборкаПоРегистратору.НомерДокумента, ВыборкаПоРегистратору.Ссылка);
		ОбластьШапки.Параметры.ДатаДокумента   = Формат(ВыборкаПоРегистратору.ДатаДокумента, НСтр("ru='ДФ=''дд ММММ гггг ""г.""'''", КодЯзыка));

		// переопределяем параметры организации
		ОбластьШапки.Параметры.НазваниеОрганизации = ?(ПустаяСтрока(ВыборкаПоРегистратору.ТекстПлательщика), СокрЛП(ВыборкаПоРегистратору.НазваниеОрганизации), СокрЛП(ВыборкаПоРегистратору.ТекстПлательщика));
		ОбластьШапки.Параметры.РНН_БИНОрганизации  = ОбщегоНазначенияБК.ПолучитьРегистрационныйНомерОрганизацииКонтрагентаВПечатнуюФорму(СведенияОбОрганизации, ВыборкаПоРегистратору.ДатаДокумента);

		Если ВыборкаПоРегистратору.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеПенсионныхВзносов Тогда
			Если ВыборкаПоРегистратору.ВидОперацииОПВ = Перечисления.ВидыОперацийОПВПеречислениеВФонды.ПеречислениеОбязательныхПрофессиональныхПенсионныхВзносов Тогда
				ОбластьШапки.Параметры.Наименование  = НСтр("ru = 'Список на перечисление обязательных профессиональных пенсионных взносов'", КодЯзыка);
			ИначеЕсли ВыборкаПоРегистратору.ВидОперацииОПВ = Перечисления.ВидыОперацийОПВПеречислениеВФонды.ПеречислениеОбязательныхПенсионныхВзносовРаботодателя Тогда
				ОбластьШапки.Параметры.Наименование  = НСтр("ru = 'Список на перечисление обязательных пенсионных взносов работодателя'", КодЯзыка);
			Иначе
				ОбластьШапки.Параметры.Наименование  = НСтр("ru = 'Список на перечисление обязательных пенсионных взносов'", КодЯзыка);
			КонецЕсли;
			ОбластьШапки.Параметры.РНН_БИНГЦВП  = ОбщегоНазначенияБК.ПолучитьРегистрационныйНомерОрганизацииКонтрагентаВПечатнуюФорму(ВыборкаПоРегистратору.ГЦВП, ВыборкаПоРегистратору.ДатаДокумента);
		Иначе
			Если ВыборкаПоРегистратору.ВидОперацииСО = Перечисления.ВидыОперацийСОПеречислениеВФонды.ПеречислениеОбязательныхСоциальныхОтчислений Тогда
				ОбластьШапки.Параметры.Наименование  = НСтр("ru = 'Список на перечисление социальных отчислений'", КодЯзыка);
			ИначеЕсли ВыборкаПоРегистратору.ВидОперацииСО = Перечисления.ВидыОперацийСОПеречислениеВФонды.ПеречислениеВзносовОСМС Тогда
				ОбластьШапки.Параметры.Наименование  = НСтр("ru = 'Список на перечисление взносов обязательного социального медицинского страхования'", КодЯзыка);
			ИначеЕсли ВыборкаПоРегистратору.ВидОперацииСО = Перечисления.ВидыОперацийСОПеречислениеВФонды.ПеречислениеОтчисленийОСМС Тогда
				ОбластьШапки.Параметры.Наименование  = НСтр("ru = 'Список на перечисление отчислений обязательного социального медицинского страхования'", КодЯзыка);
			ИначеЕсли ВыборкаПоРегистратору.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеЕдиногоПлатежа Тогда
				ОбластьШапки.Параметры.Наименование  = НСтр("ru = 'Список на перечисление единого платежа'", КодЯзыка);
			КонецЕсли;
			ОбластьШапки.Параметры.РНН_БИНГЦВП	= ОбщегоНазначенияБК.ПолучитьРегистрационныйНомерОрганизацииКонтрагентаВПечатнуюФорму(ВыборкаПоРегистратору.ГЦВП, ВыборкаПоРегистратору.ДатаДокумента); //?(ВыводитьРНН, "РНН: " + ВыборкаПоШапкеДокумента.РННГЦВП, "БИН: " + ВыборкаПоШапкеДокумента.БИНГЦВП);
		КонецЕсли;
		
		ТабДокумент.Вывести(ОбластьШапки);
		ТабДокумент.Вывести(ОбластьШапкиТаблицы);
		
		// подсчитываем количество строк документа - для корректного разбиения на страницы
		ВыборкаПоДокументам.Сбросить();
		
		Если ВыборкаПоДокументам.НайтиСледующий(ВыборкаПоРегистратору.Ссылка) Тогда
			ВыборкаПоРаботникам = ВыборкаПоДокументам.Выбрать();
		Иначе
			ВыборкаПоРаботникам = Неопределено;
		КонецЕсли;
		
		НомерСтроки = 1; 
		
		Если НЕ ВыборкаПоРаботникам = Неопределено Тогда
				
			ВсегоСтрокДокумента = ВыборкаПоРаботникам.Количество();
			
			Пока ВыборкаПоРаботникам.Следующий() Цикл
				Если ВыборкаПоРаботникам.Сумма <= 0 Тогда
					Продолжить;
				КонецЕсли;
				
				ОбластьСтроки.Параметры.Заполнить(ВыборкаПоРаботникам);
				ОбластьСтроки.Параметры.НомерСтроки  	= НомерСтроки;
				ОбластьСтроки.Параметры.ПериодПлатежа 	= ВыборкаПоРаботникам.ПериодРегистрации;
				ОбластьСтроки.Параметры.РНН_ИИН			= ?(ВыводитьРНН, ВыборкаПоРаботникам.РНН, ВыборкаПоРаботникам.ИИН);

				Если ВыборкаПоРегистратору.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеЕдиногоПлатежа Тогда
					ДанныеКНПЕП = Документы.ЕППеречислениеВФонды.ПолучитьТекстКНППлатежейДляЕП(ВыборкаПоРаботникам, ВыборкаПоРегистратору.ВидПлатежа);	
					ОбластьСтроки.Параметры.КНП = ДанныеКНПЕП.СписокКНП;
				КонецЕсли;
				
				// Проверим, уместится ли строка на странице или надо открывать новую страницу
				ВывестиПодвалЛиста = НЕ ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабДокумент, ВыводимыеОбласти);
				
				Если НЕ ВывестиПодвалЛиста И НомерСтроки = ВсегоСтрокДокумента Тогда
					ВыводимыеОбласти.Добавить(ОбластьПодвала);
					ВывестиПодвалЛиста = НЕ ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабДокумент, ВыводимыеОбласти);
				КонецЕсли;
				Если ВывестиПодвалЛиста Тогда
					ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
					ТабДокумент.Вывести(ОбластьШапки);
					
					ТабДокумент.Вывести(ОбластьШапкиТаблицы);			
				КонецЕсли;
				
				ТабДокумент.Вывести(ОбластьСтроки);
				//СуммаИтого  = СуммаИтого + ВыборкаПоРаботникам.Сумма;
				НомерСтроки = НомерСтроки + 1;
				
			КонецЦикла;
				
		КонецЕсли;
		
		// подвал
		ОбластьПодвалаИтог.Параметры.СуммаИтого	 = Формат(ВыборкаПоДокументам.Сумма, "ЧЦ=10; ЧДЦ=2; ЧРД=,");
		ОбластьПодвала.Параметры.КоличествоСтрок = ВсегоСтрокДокумента;
		ОбластьПодвала.Параметры.СуммаПрописью   = ОбщегоНазначенияБКВызовСервера.СформироватьСуммуПрописью(ВыборкаПоДокументам.Сумма, ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета(), КодЯзыка);
		
		ОтветЛица = ОбщегоНазначенияБКВызовСервера.ОтветственныеЛицаОрганизаций(СтруктурнаяЕдиницаОрганизация, ВыборкаПоРегистратору.ДатаДокумента, Пользователи.ТекущийПользователь().ФизЛицо);
		ОбластьПодвала.Параметры.Руководитель = ОтветЛица.Руководитель;
		ОбластьПодвала.Параметры.ГлавныйБухгалтер = ?(ПустаяСтрока(ОтветЛица.ГлавныйБухгалтерДляПодписиБанковскихДокументов),  НСтр("ru = 'Не предусмотрен'", КодЯзыка), ОтветЛица.ГлавныйБухгалтерДляПодписиБанковскихДокументов);

		ТабДокумент.Вывести(ОбластьПодвала);
	    ТабДокумент.Присоединить(ОбластьПодвалаИтог);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, НомерСтрокиНачало, ОбъектыПечати, ВыборкаПоРегистратору.Ссылка);
		
	КонецЦикла;

	Возврат ТабДокумент;

КонецФункции

Функция ПечатьСпискаНаКартСчета(МассивОбъектов, ОбъектыПечати, КодЯзыка=Неопределено)

	УстановитьПривилегированныйРежим(Истина);
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СписокНаКартСчетаКПлатежномуПоручению";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ПлатежноеПоручениеИсходящее.ПФ_MXL_СписокПеречисленияНаКартСчета", КодЯзыка);
	
	ВыборкаПоРегистратору = СформироватьЗапросДляПечатиПеречислениеЗарплатыПодотчет("ПоРеквизитам", МассивОбъектов).Выбрать();
	ВыборкаПоДокументам   = СформироватьЗапросДляПечатиПеречислениеЗарплатыПодотчет("ПоТабличнойЧасти", МассивОбъектов).Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	ДатаПрекращенияВыводаРНН = Константы.ДатаПрекращенияВыводаРННВПервичныхДокументах.Получить();

	Пока ВыборкаПоРегистратору.Следующий() Цикл
		
		Если ТабДокумент.ВысотаТаблицы > 0 Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
		
		СтруктурнаяЕдиницаПодразделение = ОбщегоНазначенияБК.ПолучитьСтруктурнуюЕдиницу(ВыборкаПоРегистратору.Организация, ВыборкаПоРегистратору.СтруктурноеПодразделениеОтправитель);
	
		ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
		
		ОбластьШапкаСтрОбщий 		= Макет.ПолучитьОбласть("ШапкаСтр|Общий");
		ОбластьШапкаСтрКомСбор 		= Макет.ПолучитьОбласть("ШапкаСтр|КомСбор");

		ОбластьСтрокаОбщий 			= Макет.ПолучитьОбласть("Строка|Общий");
		ОбластьСтрокаКомСбор 		= Макет.ПолучитьОбласть("Строка|КомСбор");
		
		ОбластьИтогСтраницыОбщий 	= Макет.ПолучитьОбласть("ИтогСтраницы|Общий");
		ОбластьИтогСтраницыКомСбор 	= Макет.ПолучитьОбласть("ИтогСтраницы|КомСбор");

		ОбластьПодвалОбщий 			= Макет.ПолучитьОбласть("Подвал|Общий");
		ОбластьПодвалКомСбор 		= Макет.ПолучитьОбласть("Подвал|КомСбор");

		ОбластьПодписи = Макет.ПолучитьОбласть("Подписи");

		// массив с двумя строками - для разбиения на страницы
	    ВыводимыеОбласти = Новый Массив();
		ВыводимыеОбласти.Добавить(ОбластьСтрокаОбщий);
		ВыводимыеОбласти.Добавить(ОбластьИтогСтраницыОбщий);
		
		ОбластьШапка.Параметры.Заполнить(ВыборкаПоРегистратору);	
		ОбластьШапка.Параметры.НомерДокумента 	= ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ВыборкаПоРегистратору.НомерДокумента, ВыборкаПоРегистратору.Ссылка);
		ОбластьШапка.Параметры.ДатаДокумента 	= Формат(ВыборкаПоРегистратору.ДатаДокумента, "ДФ='дд ММММ гггг'");
		
		Если ВыборкаПоРегистратору.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеЗаработнойПлаты Тогда

			ОбластьШапка.Параметры.НазначениеПлатежа 	= НСтр("ru = 'на перечисление заработной платы'", КодЯзыка);
			ОбластьШапка.Параметры.ОписаниеПериода 		= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'за %1'", КодЯзыка),
															ПолноеОписаниеПериода(НачалоМесяца(?(ЗначениеЗаполнено(ВыборкаПоРегистратору.ПериодС),ВыборкаПоРегистратору.ПериодС , Дата(1,1,1))), КонецМесяца(?(ЗначениеЗаполнено(ВыборкаПоРегистратору.ПериодПо),ВыборкаПоРегистратору.ПериодПо , Дата(1,1,1))), Ложь));
		
		ИначеЕсли ВыборкаПоРегистратору.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеДенежныхСредствПодотчетнику Тогда

			ОбластьШапка.Параметры.НазначениеПлатежа 	= НСтр("ru = 'на перечисление денежных средств в подотчет'", КодЯзыка);
			ОбластьШапка.Параметры.ОписаниеПериода 		= "";
		
		КонецЕсли;
		
		ТабДокумент.Вывести(ОбластьШапка);
		
		// вспомогательные переменные
		ПроцентКомиссииБанка = ВыборкаПоРегистратору.ПроцентКомиссииБанка;
		
		ИтогоПоСтраницеСуммаКВыплате 		= 0;
		ИтогоПоСтраницеКомСбор 				= 0;
		ИтогоПоСтраницеСуммаКПеречислению 	= 0;
		
		ИтогоСуммаКВыплате 		= 0;
		ИтогоКомСбор 			= 0;
		ИтогоСуммаКПеречислению = 0;
		
		НомерСтроки = 0;
		
		ВыводитьРНН = НЕ ЗначениеЗаполнено(ДатаПрекращенияВыводаРНН) ИЛИ ВыборкаПоРегистратору.ДатаВыписки < ДатаПрекращенияВыводаРНН;

		ОбластьШапкаСтрОбщий.Параметры.ТекстРНН_ИИН = ?(ВыводитьРНН, НСтр("ru='РНН'", КодЯзыка), НСтр("ru='ИИН'", КодЯзыка));
		
		// Первая страница
		ТабДокумент.Вывести(ОбластьШапкаСтрОбщий);
		Если ВыборкаПоРегистратору.ВключатьКомиссиюБанка Тогда
			ТабДокумент.Присоединить(ОбластьШапкаСтрКомСбор);
		КонецЕсли;

		// подсчитываем количество строк документа - для корректного разбиения на страницы
		ВыборкаПоДокументам.Сбросить();
		
		Если ВыборкаПоДокументам.НайтиСледующий(ВыборкаПоРегистратору.Ссылка) Тогда
			ВыборкаПоРаботникам = ВыборкаПоДокументам.Выбрать();
		Иначе
			ВыборкаПоРаботникам = Неопределено;
		КонецЕсли;
		
		НомерСтроки = 0; 
		
		Если НЕ ВыборкаПоРаботникам = Неопределено Тогда

			//Цикл печати
			КоличествоСтрок 	= ВыборкаПоРаботникам.Количество(); 
			КоличествоСтраниц 	= 1;
			
			Пока ВыборкаПоРаботникам.Следующий() Цикл
				
			    Если НЕ ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабДокумент, ВыводимыеОбласти) Тогда
			    	КоличествоСтраниц = КоличествоСтраниц + 1;
			    	// конец страницы
			    	ОбластьИтогСтраницыОбщий.Параметры.ИтогоПоСтраницеСуммаКВыплате 		= ИтогоПоСтраницеСуммаКВыплате;
					ОбластьИтогСтраницыКомСбор.Параметры.ИтогоПоСтраницеКомСбор 			= ИтогоПоСтраницеКомСбор;
					ОбластьИтогСтраницыКомСбор.Параметры.ИтогоПоСтраницеСуммаКПеречислению 	= ИтогоПоСтраницеСуммаКПеречислению;
					
					ТабДокумент.Вывести(ОбластьИтогСтраницыОбщий);
					Если ВыборкаПоРегистратору.ВключатьКомиссиюБанка Тогда
						ТабДокумент.Присоединить(ОбластьИтогСтраницыКомСбор);
					КонецЕсли;
					
					ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
					
					// начинается новая страница
					ТабДокумент.Вывести(ОбластьШапкаСтрОбщий);
					Если ВыборкаПоРегистратору.ВключатьКомиссиюБанка Тогда
						ТабДокумент.Присоединить(ОбластьШапкаСтрКомСбор);
					КонецЕсли;
					
					ИтогоПоСтраницеСуммаКВыплате 		= 0;
					ИтогоПоСтраницеКомСбор 				= 0;
					ИтогоПоСтраницеСуммаКПеречислению 	= 0;
			    КонецЕсли;
			
			    // новая строка
			    НомерСтроки = НомерСтроки + 1;
			    ОбластьСтрокаОбщий.Параметры.Заполнить(ВыборкаПоРаботникам);
			    ОбластьСтрокаОбщий.Параметры.НомерСтроки = НомерСтроки;
				ОбластьСтрокаОбщий.Параметры.РНН_ИИНРаботника = ?(ВыводитьРНН, ВыборкаПоРаботникам.РННРаботника, ВыборкаПоРаботникам.ИИНРаботника);
			    ТабДокумент.Вывести(ОбластьСтрокаОбщий);

				// копим итоги
				ИтогоПоСтраницеСуммаКВыплате 		= ИтогоПоСтраницеСуммаКВыплате + ВыборкаПоРаботникам.СуммаКВыплате;
				ИтогоПоСтраницеСуммаКПеречислению 	= ИтогоПоСтраницеСуммаКПеречислению + ВыборкаПоРаботникам.СуммаКВыплате;
			    
			    ИтогоСуммаКВыплате 		= ИтогоСуммаКВыплате + ВыборкаПоРаботникам.СуммаКВыплате;
			    ИтогоСуммаКПеречислению = ИтогоСуммаКПеречислению + ВыборкаПоРаботникам.СуммаКВыплате;
			    
			    Если ВыборкаПоРегистратору.ВключатьКомиссиюБанка Тогда
			    	Если НомерСтроки = КоличествоСтрок Тогда
			    		// корректируем последнюю строку для подгонки суммы комсбора под общую сумму по документу
			        	ОбластьСтрокаКомСбор.Параметры.КомСбор = ВыборкаПоРегистратору.СуммаКомиссии - ИтогоКомСбор;
			        Иначе
			        	ОбластьСтрокаКомСбор.Параметры.КомСбор = Окр(ВыборкаПоРаботникам.СуммаКВыплате * ПроцентКомиссииБанка / 100, 2);
			        КонецЕсли;
			        ОбластьСтрокаКомСбор.Параметры.СуммаКПеречислению = ВыборкаПоРаботникам.СуммаКВыплате + ОбластьСтрокаКомСбор.Параметры.КомСбор;
			    	ТабДокумент.Присоединить(ОбластьСтрокаКомСбор);
			    	
			    	// копим итоги
			    	ИтогоПоСтраницеКомСбор 				= ИтогоПоСтраницеКомСбор + ОбластьСтрокаКомСбор.Параметры.КомСбор;
			    	ИтогоПоСтраницеСуммаКПеречислению 	= ИтогоПоСтраницеСуммаКПеречислению + ОбластьСтрокаКомСбор.Параметры.КомСбор;
			        
			    	ИтогоКомСбор 			= ИтогоКомСбор + ОбластьСтрокаКомСбор.Параметры.КомСбор;
			    	ИтогоСуммаКПеречислению = ИтогоСуммаКПеречислению + ОбластьСтрокаКомСбор.Параметры.КомСбор;
			    КонецЕсли;
			    
			КонецЦикла;

			// итог по последней странице
			Если КоличествоСтраниц > 1 Тогда
				ОбластьИтогСтраницыОбщий.Параметры.ИтогоПоСтраницеСуммаКВыплате 	   = ИтогоПоСтраницеСуммаКВыплате;
				ОбластьИтогСтраницыКомСбор.Параметры.ИтогоПоСтраницеКомСбор 		   = ИтогоПоСтраницеКомСбор;
				ОбластьИтогСтраницыКомСбор.Параметры.ИтогоПоСтраницеСуммаКПеречислению = ИтогоПоСтраницеСуммаКПеречислению;
					
				ТабДокумент.Вывести(ОбластьИтогСтраницыОбщий);
				Если ВыборкаПоРегистратору.ВключатьКомиссиюБанка Тогда
					ТабДокумент.Присоединить(ОбластьИтогСтраницыКомСбор);
				КонецЕсли;
			КонецЕсли;
			
			// итоги в целом
			ОбластьПодвалОбщий.Параметры.ИтогоСуммаКВыплате = ИтогоСуммаКВыплате;
			ТабДокумент.Вывести(ОбластьПодвалОбщий);                                  
			Если ВыборкаПоРегистратору.ВключатьКомиссиюБанка Тогда
				ОбластьПодвалКомСбор.Параметры.ИтогоКомСбор 			= ИтогоКомСбор;
				ОбластьПодвалКомСбор.Параметры.ИтогоСуммаКПеречислению 	= ИтогоСуммаКПеречислению;
				ТабДокумент.Присоединить(ОбластьПодвалКомСбор);
			КонецЕсли;
			
		КонецЕсли;
		
		// подписи
		ОтветЛица = ОбщегоНазначенияБКВызовСервера.ОтветственныеЛицаОрганизаций(СтруктурнаяЕдиницаПодразделение, ВыборкаПоРегистратору.ДатаДокумента, ВыборкаПоРегистратору.ОтветственныйФизЛицо);
		ОбластьПодписи.Параметры.Заполнить(ОтветЛица);
		ОбластьПодписи.Параметры.ИтогоСуммаКПеречислениюПрописью = ОбщегоНазначенияБКВызовСервера.СформироватьСуммуПрописью(ИтогоСуммаКПеречислению, ВыборкаПоРегистратору.ВалютаДенежныхСредств, КодЯзыка);
		ТабДокумент.Вывести(ОбластьПодписи);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, НомерСтрокиНачало, ОбъектыПечати, ВыборкаПоРегистратору.Ссылка);
		
	КонецЦикла;
		
	Возврат ТабДокумент;
	
КонецФункции

Функция ПечатьСпискаПрочиеВыплаты(МассивОбъектов, ОбъектыПечати, КодЯзыка=Неопределено)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СписокПеречислениеПрочихВыплатКПлатежномуПоручению";
	
	ДатаПрекращенияВыводаРНН = Константы.ДатаПрекращенияВыводаРННВПервичныхДокументах.Получить();
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ПлатежноеПоручениеИсходящее.ПФ_MXL_СписокПеречисленияПрочихВыплат", КодЯзыка);
	
	// получим данные для печати
	ВыборкаПоРегистратору = СформироватьЗапросДляПечатиПрочиеВыплаты("ПоРеквизитам", МассивОбъектов).Выбрать();
	ВыборкаПоДокументам   = СформироватьЗапросДляПечатиПрочиеВыплаты("ПоТабличнойЧасти", МассивОбъектов).Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	Пока ВыборкаПоРегистратору.Следующий() Цикл
		
		Если ТабДокумент.ВысотаТаблицы > 0 Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
		
		ВыводитьРНН = НЕ ЗначениеЗаполнено(ДатаПрекращенияВыводаРНН) ИЛИ ВыборкаПоРегистратору.ДатаВыписки < ДатаПрекращенияВыводаРНН;
		
		ОбластьШапки   			= Макет.ПолучитьОбласть("Шапка");
		
		ОбластьПодвалаИтог		= Макет.ПолучитьОбласть("Подвал|Итог");
		
		Если ВыводитьРНН Тогда
			ОбластьПодвала = Макет.ПолучитьОбласть("Подвал|Подписи");
		Иначе 
			ОбластьПодвала = Макет.ПолучитьОбласть("Подвал|Подписи_ИИН");
		КонецЕсли;
		
		ОбластьШапкиТаблицы  	= Макет.ПолучитьОбласть("ШапкаТаблицы" + ?(ВыводитьРНН, "", "_ИИН"));
		ОбластьСтроки  			= Макет.ПолучитьОбласть("СтрокаРаботника" + ?(ВыводитьРНН, "", "_ИИН"));
		
		// массив с двумя строками - для разбиения на страницы
	    ВыводимыеОбласти = Новый Массив();
		ВыводимыеОбласти.Добавить(ОбластьСтроки);
		
		СтруктурнаяЕдиницаОрганизация = ОбщегоНазначенияБК.ПолучитьСтруктурнуюЕдиницу(ВыборкаПоРегистратору.Организация, ВыборкаПоРегистратору.СтруктурноеПодразделениеОтправитель);

		СведенияОбОрганизации = ОбщегоНазначенияБКВызовСервера.СведенияОЮрФизЛице(СтруктурнаяЕдиницаОрганизация, ВыборкаПоРегистратору.ДатаДокумента);
		
		ИмяПараметра = ?(ВыводитьРНН, "РНН", "БИН_ИИН");
		СведенияОбОрганизации[ИмяПараметра] = ?(ПустаяСтрока(ВыборкаПоРегистратору.РННПлательщика), СведенияОбОрганизации[ИмяПараметра], СокрЛП(ВыборкаПоРегистратору.РННПлательщика));

		ОбластьШапки.Параметры.Заполнить(ВыборкаПоРегистратору);
		
		ОбластьШапки.Параметры.НомерДокумента  = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ВыборкаПоРегистратору.НомерДокумента, ВыборкаПоРегистратору.Ссылка);
		ОбластьШапки.Параметры.ДатаДокумента   = Формат(ВыборкаПоРегистратору.ДатаДокумента, НСтр("ru='ДФ=''дд ММММ гггг ""г.""'''", КодЯзыка));

		// переопределяем параметры организации
		ОбластьШапки.Параметры.НазваниеОрганизации = ?(ПустаяСтрока(ВыборкаПоРегистратору.ТекстПлательщика), СокрЛП(ВыборкаПоРегистратору.НазваниеОрганизации), СокрЛП(ВыборкаПоРегистратору.ТекстПлательщика));
		ОбластьШапки.Параметры.РНН_БИНОрганизации  = ОбщегоНазначенияБК.ПолучитьРегистрационныйНомерОрганизацииКонтрагентаВПечатнуюФорму(СведенияОбОрганизации, ВыборкаПоРегистратору.ДатаДокумента);

		Если ВыборкаПоРегистратору.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеПрочихВыплат Тогда
			
			ОбластьШапки.Параметры.Наименование  = НСтр("ru = 'Список на перечисление профессиональной выплаты за счет средств работодателя'", КодЯзыка);

			ОбластьШапки.Параметры.РНН_БИНГЦВП  = ОбщегоНазначенияБК.ПолучитьРегистрационныйНомерОрганизацииКонтрагентаВПечатнуюФорму(ВыборкаПоРегистратору.ГЦВП, ВыборкаПоРегистратору.ДатаДокумента);
			
		КонецЕсли;	
		
		ТабДокумент.Вывести(ОбластьШапки);
		ТабДокумент.Вывести(ОбластьШапкиТаблицы);
		
		// подсчитываем количество строк документа - для корректного разбиения на страницы
		ВыборкаПоДокументам.Сбросить();
		
		Если ВыборкаПоДокументам.НайтиСледующий(ВыборкаПоРегистратору.Ссылка) Тогда
			ВыборкаПоФизЛицам = ВыборкаПоДокументам.Выбрать();
		Иначе
			ВыборкаПоФизЛицам = Неопределено;
		КонецЕсли;
		
		НомерСтроки = 1; 
		
		Если НЕ ВыборкаПоФизЛицам = Неопределено Тогда
				
			ВсегоСтрокДокумента = ВыборкаПоФизЛицам.Количество();
			
			Пока ВыборкаПоФизЛицам.Следующий() Цикл
				Если ВыборкаПоФизЛицам.Сумма <= 0 Тогда
					Продолжить;
				КонецЕсли;
				
				ОбластьСтроки.Параметры.Заполнить(ВыборкаПоФизЛицам);
				ОбластьСтроки.Параметры.НомерСтроки  	= НомерСтроки;
				ОбластьСтроки.Параметры.ПериодПлатежа 	= ВыборкаПоФизЛицам.ПериодРегистрации;
				ОбластьСтроки.Параметры.РНН_ИИН			= ?(ВыводитьРНН, ВыборкаПоФизЛицам.РНН, ВыборкаПоФизЛицам.ИИН);
				ОбластьСтроки.Параметры.Сумма 			= ВыборкаПоФизЛицам.Сумма;
								
				// Проверим, уместится ли строка на странице или надо открывать новую страницу
				ВывестиПодвалЛиста = НЕ ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабДокумент, ВыводимыеОбласти);
				
				Если НЕ ВывестиПодвалЛиста И НомерСтроки = ВсегоСтрокДокумента Тогда
					ВыводимыеОбласти.Добавить(ОбластьПодвала);
					ВывестиПодвалЛиста = НЕ ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабДокумент, ВыводимыеОбласти);
				КонецЕсли;
				Если ВывестиПодвалЛиста Тогда
					ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
					ТабДокумент.Вывести(ОбластьШапки);
					
					ТабДокумент.Вывести(ОбластьШапкиТаблицы);			
				КонецЕсли;
				
				ТабДокумент.Вывести(ОбластьСтроки);
				//СуммаИтого  = СуммаИтого + ВыборкаПоРаботникам.Сумма;
				НомерСтроки = НомерСтроки + 1;
				
			КонецЦикла;
				
		КонецЕсли;
		
		// подвал
		ОбластьПодвалаИтог.Параметры.СуммаИтого	 = Формат(ВыборкаПоДокументам.Сумма, "ЧЦ=10; ЧДЦ=2; ЧРД=,");
		ОбластьПодвала.Параметры.КоличествоСтрок = ВсегоСтрокДокумента;
		ОбластьПодвала.Параметры.СуммаПрописью   = ОбщегоНазначенияБКВызовСервера.СформироватьСуммуПрописью(ВыборкаПоДокументам.Сумма, ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета(), КодЯзыка);
		
		ОтветЛица = ОбщегоНазначенияБКВызовСервера.ОтветственныеЛицаОрганизаций(СтруктурнаяЕдиницаОрганизация, ВыборкаПоРегистратору.ДатаДокумента, Пользователи.ТекущийПользователь().ФизЛицо);
		ОбластьПодвала.Параметры.Руководитель = ОтветЛица.Руководитель;
		ОбластьПодвала.Параметры.ГлавныйБухгалтер = ?(ПустаяСтрока(ОтветЛица.ГлавныйБухгалтерДляПодписиБанковскихДокументов),  НСтр("ru = 'Не предусмотрен'", КодЯзыка), ОтветЛица.ГлавныйБухгалтерДляПодписиБанковскихДокументов);

		ТабДокумент.Вывести(ОбластьПодвала);
	    ТабДокумент.Присоединить(ОбластьПодвалаИтог);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, НомерСтрокиНачало, ОбъектыПечати, ВыборкаПоРегистратору.Ссылка);
		
	КонецЦикла;

	Возврат ТабДокумент;
	
КонецФункции

Функция СформироватьЗапросДляПечатиОПВиСО(Режим, МассивСсылок)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("МассивОбъектов", МассивСсылок);

	Если Режим = "ПоРеквизитам" Тогда
		
		// список способов заполнения только зарплаты из депонированных сумм
		МассивВидовОпераций = Новый Массив;
		МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийППИсходящее.ПеречислениеПенсионныхВзносов);
		МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийППИсходящее.ПеречислениеСоциальныхОтчислений);
		МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийППИсходящее.ПеречислениеЕдиногоПлатежа);
		
		Запрос.УстановитьПараметр("МассивВидовОпераций", МассивВидовОпераций);
		
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПлатежноеПоручениеИсходящееПеречисление.Ссылка КАК Ссылка,
		|	ПеречислениеВФонды.ВидОперации КАК ВидОперации,
		|	МИНИМУМ(ПеречислениеВФонды.ПериодРегистрации) КАК ПериодПлатежа
		|ПОМЕСТИТЬ ВТ_ПеречислениеВФондыПенсионныеОтчисления
		|ИЗ
		|	Документ.ОПВПеречислениеВФонды КАК ПеречислениеВФонды
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПлатежноеПоручениеИсходящее.ПеречислениеПенсионныхВзносов КАК ПлатежноеПоручениеИсходящееПеречисление
		|		ПО ПеречислениеВФонды.Ссылка = ПлатежноеПоручениеИсходящееПеречисление.Документ
		|			И (ПлатежноеПоручениеИсходящееПеречисление.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийППИсходящее.ПеречислениеПенсионныхВзносов))
		|ГДЕ
		|	ПлатежноеПоручениеИсходящееПеречисление.Ссылка В(&МассивОбъектов)
		|	И ПлатежноеПоручениеИсходящееПеречисление.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийППИсходящее.ПеречислениеПенсионныхВзносов)
		|
		|СГРУППИРОВАТЬ ПО
		|	ПлатежноеПоручениеИсходящееПеречисление.Ссылка,
		|	ПеречислениеВФонды.ВидОперации
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ПлатежноеПоручениеИсходящееПеречисление.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПлатежноеПоручениеИсходящееПеречисление.Ссылка КАК Ссылка,
		|	ПеречислениеВФонды.ВидОперации КАК ВидОперации,
		|	МИНИМУМ(ПеречислениеВФонды.ПериодРегистрации) КАК ПериодПлатежа
		|ПОМЕСТИТЬ ВТ_ПеречислениеВФондыСоциальныеОтчисления
		|ИЗ
		|	Документ.СОПеречислениеВФонды КАК ПеречислениеВФонды
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПлатежноеПоручениеИсходящее.ПеречислениеСоциальныхОтчислений КАК ПлатежноеПоручениеИсходящееПеречисление
		|		ПО ПеречислениеВФонды.Ссылка = ПлатежноеПоручениеИсходящееПеречисление.Документ
		|			И (ПлатежноеПоручениеИсходящееПеречисление.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийППИсходящее.ПеречислениеСоциальныхОтчислений))
		|ГДЕ
		|	ПлатежноеПоручениеИсходящееПеречисление.Ссылка В(&МассивОбъектов)
		|	И ПлатежноеПоручениеИсходящееПеречисление.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийППИсходящее.ПеречислениеСоциальныхОтчислений)
		|
		|СГРУППИРОВАТЬ ПО
		|	ПлатежноеПоручениеИсходящееПеречисление.Ссылка,
		|	ПеречислениеВФонды.ВидОперации
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ПлатежноеПоручениеИсходящееПеречисление.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПлатежноеПоручениеИсходящееПеречисление.Ссылка КАК Ссылка,
		|	ПеречислениеВФонды.ВидПлатежа КАК ВидПлатежа,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийППИсходящее.ПеречислениеЕдиногоПлатежа) КАК ВидОперации,
		|	МИНИМУМ(ПеречислениеВФонды.ПериодРегистрации) КАК ПериодПлатежа
		|ПОМЕСТИТЬ ВТ_ПеречислениеВФондыЕдиныйПлатеж
		|ИЗ
		|	Документ.ЕППеречислениеВФонды КАК ПеречислениеВФонды
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПлатежноеПоручениеИсходящее.ПеречислениеЕдиныхПлатежей КАК ПлатежноеПоручениеИсходящееПеречисление
		|		ПО ПеречислениеВФонды.Ссылка = ПлатежноеПоручениеИсходящееПеречисление.Документ
		|			И (ПлатежноеПоручениеИсходящееПеречисление.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийППИсходящее.ПеречислениеЕдиногоПлатежа))
		|ГДЕ
		|	ПлатежноеПоручениеИсходящееПеречисление.Ссылка В(&МассивОбъектов)
		|	И ПлатежноеПоручениеИсходящееПеречисление.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийППИсходящее.ПеречислениеЕдиногоПлатежа)
		|
		|СГРУППИРОВАТЬ ПО
		|	ПлатежноеПоручениеИсходящееПеречисление.Ссылка,
		|	ПеречислениеВФонды.ВидПлатежа,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийППИсходящее.ПеречислениеЕдиногоПлатежа)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ПлатежноеПоручениеИсходящееПеречисление.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПлатежноеПоручениеИсходящее.Ссылка КАК Ссылка,
		|	ПлатежноеПоручениеИсходящее.ВидОперации КАК ВидОперации,
		|	ПлатежноеПоручениеИсходящее.Организация КАК Организация,
		|	ПлатежноеПоручениеИсходящее.СтруктурноеПодразделениеОтправитель КАК СтруктурноеПодразделениеОтправитель,
		|	ПлатежноеПоручениеИсходящее.ТекстПлательщика КАК ТекстПлательщика,
		|	ПлатежноеПоручениеИсходящее.ТекстПолучателя КАК ТекстПолучателя,
		|	ПлатежноеПоручениеИсходящее.РННПлательщика КАК РННПлательщика,
		|	ПлатежноеПоручениеИсходящее.РННПолучателя КАК РННПолучателя,
		|	ВЫБОР
		|		КОГДА ПлатежноеПоручениеИсходящее.СтруктурноеПодразделениеОтправитель = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
		|			ТОГДА ВЫРАЗИТЬ(ПлатежноеПоручениеИсходящее.Организация.НаименованиеПолное КАК СТРОКА(1000))
		|		ИНАЧЕ ВЫРАЗИТЬ(ПлатежноеПоручениеИсходящее.СтруктурноеПодразделениеОтправитель.НаименованиеПолное КАК СТРОКА(1000))
		|	КОНЕЦ КАК НазваниеОрганизации,
		|	ПлатежноеПоручениеИсходящее.СчетОрганизации.НомерСчета КАК ИИКОрганизации,
		|	ВЫБОР
		|		КОГДА ПлатежноеПоручениеИсходящее.СтруктурноеПодразделениеОтправитель = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
		|			ТОГДА ПлатежноеПоручениеИсходящее.Организация.РНН
		|		ИНАЧЕ ПлатежноеПоручениеИсходящее.СтруктурноеПодразделениеОтправитель.РНН
		|	КОНЕЦ КАК РННОрганизации,
		|	ВЫБОР
		|		КОГДА ПлатежноеПоручениеИсходящее.Дата >= ДАТАВРЕМЯ(2010, 6, 7)
		|			ТОГДА ПлатежноеПоручениеИсходящее.СчетОрганизации.Банк.БИК
		|		ИНАЧЕ ПлатежноеПоручениеИсходящее.СчетОрганизации.Банк.БИКДоРеформыБанковскихСчетов
		|	КОНЕЦ КАК БИКОрганизации,
		|	ПлатежноеПоручениеИсходящее.СчетОрганизации.Банк.Наименование КАК БанкОрганизации,
		|	ПлатежноеПоручениеИсходящее.СчетОрганизации.Банк.Город КАК АдресБанкаОрганизации,
		|	ПлатежноеПоручениеИсходящее.Организация.КБЕ КАК КБеОрганизации,
		|	ПлатежноеПоручениеИсходящее.Номер КАК НомерДокумента,
		|	ПлатежноеПоручениеИсходящее.Дата КАК ДатаДокумента,
		|	ПлатежноеПоручениеИсходящее.ДатаВыписки КАК ДатаВыписки,
		|	ВЫБОР
		|		КОГДА ПлатежноеПоручениеИсходящее.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийППИсходящее.ПеречислениеПенсионныхВзносов)
		|			ТОГДА ПеречислениеВФондыПенсионныеВзносы.ПериодПлатежа
		|		КОГДА ПлатежноеПоручениеИсходящее.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийППИсходящее.ПеречислениеЕдиногоПлатежа)
		|			ТОГДА ПеречислениеЕП.ПериодПлатежа
		|		ИНАЧЕ ПеречислениеСО.ПериодПлатежа
		|	КОНЕЦ КАК ПериодПлатежа,
		|	ПлатежноеПоручениеИсходящее.Контрагент КАК ГЦВП,
		|	ВЫРАЗИТЬ(ПлатежноеПоручениеИсходящее.Контрагент.НаименованиеПолное КАК СТРОКА(1000)) КАК НазваниеГЦВП,
		|	ПлатежноеПоручениеИсходящее.СчетКонтрагента.НомерСчета КАК ИИКГЦВП,
		|	ВЫБОР
		|		КОГДА ПлатежноеПоручениеИсходящее.Дата >= ДАТАВРЕМЯ(2010, 6, 7)
		|			ТОГДА ПлатежноеПоручениеИсходящее.СчетКонтрагента.Банк.БИК
		|		ИНАЧЕ ПлатежноеПоручениеИсходящее.СчетКонтрагента.Банк.БИКДоРеформыБанковскихСчетов
		|	КОНЕЦ КАК БИКГЦВП,
		|	ПлатежноеПоручениеИсходящее.СчетКонтрагента.Банк.Наименование КАК БанкГЦВП,
		|	ПлатежноеПоручениеИсходящее.СчетКонтрагента.Банк.Город КАК АдресБанкаГЦВП,
		|	ПлатежноеПоручениеИсходящее.Контрагент.РНН КАК РННГЦВП,
		|	ПлатежноеПоручениеИсходящее.Контрагент.ИдентификационныйКодЛичности КАК БИНГЦВП,
		|	ПеречислениеВФондыПенсионныеВзносы.ВидОперации КАК ВидОперацииОПВ,
		// СО
		|	ВЫРАЗИТЬ(ПлатежноеПоручениеИсходящее.Контрагент.НаименованиеПолное КАК СТРОКА(1000)) КАК НазваниеФонда,
		|	ПлатежноеПоручениеИсходящее.СчетКонтрагента.НомерСчета КАК ИИКФонда,
		|	ВЫБОР
		|		КОГДА ПлатежноеПоручениеИсходящее.Дата >= ДАТАВРЕМЯ(2010, 6, 7)
		|			ТОГДА ПлатежноеПоручениеИсходящее.СчетКонтрагента.Банк.БИК
		|		ИНАЧЕ ПлатежноеПоручениеИсходящее.СчетКонтрагента.Банк.БИКДоРеформыБанковскихСчетов
		|	КОНЕЦ КАК БИКФонда,
		|	ПлатежноеПоручениеИсходящее.СчетКонтрагента.Банк.Наименование КАК БанкФонда,
		|	ПлатежноеПоручениеИсходящее.СчетКонтрагента.Банк.Город КАК АдресБанкаФонда,
		|	ПлатежноеПоручениеИсходящее.Контрагент.РНН КАК РННФонда,
		|	ПлатежноеПоручениеИсходящее.Контрагент КАК Фонд,
		|	ПеречислениеСО.ВидОперации КАК ВидОперацииСО,
		|	ПеречислениеЕП.ВидПлатежа КАК ВидПлатежа
		|ИЗ
		|	Документ.ПлатежноеПоручениеИсходящее КАК ПлатежноеПоручениеИсходящее
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПеречислениеВФондыПенсионныеОтчисления КАК ПеречислениеВФондыПенсионныеВзносы
		|		ПО (ПеречислениеВФондыПенсионныеВзносы.Ссылка = ПлатежноеПоручениеИсходящее.Ссылка)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПеречислениеВФондыСоциальныеОтчисления КАК ПеречислениеСО
		|		ПО (ПеречислениеСО.Ссылка = ПлатежноеПоручениеИсходящее.Ссылка)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПеречислениеВФондыЕдиныйПлатеж КАК ПеречислениеЕП
		|		ПО (ПеречислениеЕП.Ссылка = ПлатежноеПоручениеИсходящее.Ссылка)
		|ГДЕ
		|	ПлатежноеПоручениеИсходящее.Ссылка В(&МассивОбъектов)
		|	И ПлатежноеПоручениеИсходящее.ВидОперации В (&МассивВидовОпераций)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВидОперации,
		|	Ссылка";
		
		Запрос.Текст = ТекстЗапроса;
		
	ИначеЕсли Режим = "ПоТабличнойЧасти" Тогда
		
		ТекстЗапроса = 
			"ВЫБРАТЬ
			|	ППИПеречислениеПенсионныхВзносов.Ссылка КАК Ссылка,
			|	НАЧАЛОПЕРИОДА(ОПВПеречислениеВФондыПенсионныеВзносы.Ссылка.ПериодРегистрации, МЕСЯЦ) КАК ПериодРегистрации,
			|	ППИПеречислениеПенсионныхВзносов.Ссылка.Дата КАК ДатаДокумента,
			|	ВЫБОР
			|		КОГДА ОПВПеречислениеВФондыПенсионныеВзносы.ФизЛицо ССЫЛКА Справочник.Контрагенты
			|			ТОГДА ОПВПеречислениеВФондыПенсионныеВзносы.ФизЛицо.ФизЛицо
			|		ИНАЧЕ ОПВПеречислениеВФондыПенсионныеВзносы.ФизЛицо
			|	КОНЕЦ КАК ФизЛицо,
			|	ОПВПеречислениеВФондыПенсионныеВзносы.Сумма КАК Сумма
			|ПОМЕСТИТЬ ВТ_ОПВПеречислениеВФондыПенсионныеВзносы
			|ИЗ
			|	Документ.ОПВПеречислениеВФонды.ПенсионныеВзносы КАК ОПВПеречислениеВФондыПенсионныеВзносы
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПлатежноеПоручениеИсходящее.ПеречислениеПенсионныхВзносов КАК ППИПеречислениеПенсионныхВзносов
			|		ПО (ППИПеречислениеПенсионныхВзносов.Документ = ОПВПеречислениеВФондыПенсионныеВзносы.Ссылка)
			|			И (ППИПеречислениеПенсионныхВзносов.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийППИсходящее.ПеречислениеПенсионныхВзносов))
			|			И (ППИПеречислениеПенсионныхВзносов.Ссылка В (&МассивОбъектов))
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Ссылка,
			|	ФизЛицо
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ПлатежноеПоручениеИсходящееПеречислениеСО.Ссылка КАК Ссылка,
			|	ВЫБОР
            |		КОГДА СОПеречислениеВФонды.Ссылка.ВидОперации В (ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСОПеречислениеВФонды.ПеречислениеВзносовОСМС), ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСОПеречислениеВФонды.ПеречислениеОтчисленийОСМС))
            |			ТОГДА ВЫБОР
            |					КОГДА СОПеречислениеВФонды.МесяцПериода = ДАТАВРЕМЯ(1, 1, 1)
            |						ТОГДА НАЧАЛОПЕРИОДА(СОПеречислениеВФонды.Ссылка.ПериодРегистрации, МЕСЯЦ)
            |					ИНАЧЕ НАЧАЛОПЕРИОДА(СОПеречислениеВФонды.МесяцПериода, МЕСЯЦ)
            |				КОНЕЦ
            |		ИНАЧЕ НАЧАЛОПЕРИОДА(СОПеречислениеВФонды.Ссылка.ПериодРегистрации, МЕСЯЦ)
            |	КОНЕЦ КАК ПериодРегистрации, 
		    |	ПлатежноеПоручениеИсходящееПеречислениеСО.Ссылка.Дата КАК ДатаДокумента,
			|	ВЫБОР
			|		КОГДА СОПеречислениеВФонды.ФизЛицо ССЫЛКА Справочник.Контрагенты
			|			ТОГДА СОПеречислениеВФонды.ФизЛицо.ФизЛицо
			|		ИНАЧЕ СОПеречислениеВФонды.ФизЛицо
			|	КОНЕЦ КАК ФизЛицо,
			|	СОПеречислениеВФонды.Сумма КАК Сумма
			|ПОМЕСТИТЬ ВТ_СОПеречислениеВФонды
			|ИЗ
			|	Документ.СОПеречислениеВФонды.СоциальныеОтчисления КАК СОПеречислениеВФонды
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПлатежноеПоручениеИсходящее.ПеречислениеСоциальныхОтчислений КАК ПлатежноеПоручениеИсходящееПеречислениеСО
			|		ПО (ПлатежноеПоручениеИсходящееПеречислениеСО.Документ = СОПеречислениеВФонды.Ссылка)
			|			И (ПлатежноеПоручениеИсходящееПеречислениеСО.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийППИсходящее.ПеречислениеСоциальныхОтчислений))
			|			И (ПлатежноеПоручениеИсходящееПеречислениеСО.Ссылка В (&МассивОбъектов))
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Ссылка,
			|	ФизЛицо
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ПлатежноеПоручениеИсходящееПеречислениеЕП.Ссылка КАК Ссылка,
			|	НАЧАЛОПЕРИОДА(ЕППеречислениеВФонды.МесяцНалоговогоПериода, МЕСЯЦ) КАК ПериодРегистрации,
			|	ПлатежноеПоручениеИсходящееПеречислениеЕП.Ссылка.Дата КАК ДатаДокумента,
			|	ЕППеречислениеВФонды.ФизЛицо КАК ФизЛицо,
			|	ЕППеречислениеВФонды.Сумма КАК Сумма,
			|	ЕППеречислениеВФонды.СуммаПлатежа КАК СуммаПлатежа,
			|	ЕППеречислениеВФонды.ВключаетОПВ КАК ВключаетОПВ,
			|	ЕППеречислениеВФонды.ВключаетВОСМС КАК ВключаетВОСМС,
			|	ЕППеречислениеВФонды.ВключаетИПН КАК ВключаетИПН,
			|	ЕППеречислениеВФонды.ВключаетСО КАК ВключаетСО,
			|	ЕППеречислениеВФонды.ВключаетООСМС КАК ВключаетООСМС,
			|	ЕППеречислениеВФонды.ВключаетОПВР КАК ВключаетОПВР
			|ПОМЕСТИТЬ ВТ_ЕППеречислениеВФонды
			|ИЗ
			|	Документ.ЕППеречислениеВФонды.ЕдиныеПлатежи КАК ЕППеречислениеВФонды
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПлатежноеПоручениеИсходящее.ПеречислениеЕдиныхПлатежей КАК ПлатежноеПоручениеИсходящееПеречислениеЕП
			|		ПО (ПлатежноеПоручениеИсходящееПеречислениеЕП.Документ = ЕППеречислениеВФонды.Ссылка)
			|			И (ПлатежноеПоручениеИсходящееПеречислениеЕП.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийППИсходящее.ПеречислениеЕдиногоПлатежа))
			|			И (ПлатежноеПоручениеИсходящееПеречислениеЕП.Ссылка В (&МассивОбъектов))
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Ссылка,
			|	ФизЛицо
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ДанныеДокументовПоПериодам.Ссылка КАК Ссылка,
			|	ДанныеДокументовПоПериодам.ФизЛицо КАК ФизЛицо,
			|	ФИОФизЛиц.Фамилия КАК Фамилия,
			|	ФИОФизЛиц.Имя КАК Имя,
			|	ФИОФизЛиц.Отчество КАК Отчество
			|ПОМЕСТИТЬ ВТ_ФИОФизЛиц
			|ИЗ
			|	РегистрСведений.ФИОФизЛиц КАК ФИОФизЛиц
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|			МАКСИМУМ(ФИОФизЛиц.Период) КАК Период,
			|			ОПВПеречислениеВФондыПенсионныеВзносы.Ссылка КАК Ссылка,
			|			ОПВПеречислениеВФондыПенсионныеВзносы.ФизЛицо КАК ФизЛицо
			|		ИЗ
			|			ВТ_ОПВПеречислениеВФондыПенсионныеВзносы КАК ОПВПеречислениеВФондыПенсионныеВзносы
			|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц КАК ФИОФизЛиц
			|				ПО ОПВПеречислениеВФондыПенсионныеВзносы.ФизЛицо = ФИОФизЛиц.ФизЛицо
			|					И ОПВПеречислениеВФондыПенсионныеВзносы.ДатаДокумента >= ФИОФизЛиц.Период
			|		
			|		СГРУППИРОВАТЬ ПО
			|			ОПВПеречислениеВФондыПенсионныеВзносы.Ссылка,
			|			ОПВПеречислениеВФондыПенсионныеВзносы.ФизЛицо
			|		
			|		ОБЪЕДИНИТЬ ВСЕ
			|		
			|		ВЫБРАТЬ
			|			МАКСИМУМ(ФИОФизЛиц.Период),
			|			СОПеречислениеВФонды.Ссылка,
			|			СОПеречислениеВФонды.ФизЛицо
			|		ИЗ
			|			ВТ_СОПеречислениеВФонды КАК СОПеречислениеВФонды
			|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц КАК ФИОФизЛиц
			|				ПО СОПеречислениеВФонды.ФизЛицо = ФИОФизЛиц.ФизЛицо
			|					И СОПеречислениеВФонды.ДатаДокумента >= ФИОФизЛиц.Период
			|		
			|		СГРУППИРОВАТЬ ПО
			|			СОПеречислениеВФонды.Ссылка,
			|			СОПеречислениеВФонды.ФизЛицо
			|		
			|		ОБЪЕДИНИТЬ ВСЕ
			|		
			|		ВЫБРАТЬ
			|			МАКСИМУМ(ФИОФизЛиц.Период),
			|			ЕППеречислениеВФонды.Ссылка,
			|			ЕППеречислениеВФонды.ФизЛицо
			|		ИЗ
			|			ВТ_ЕППеречислениеВФонды КАК ЕППеречислениеВФонды
			|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц КАК ФИОФизЛиц
			|				ПО ЕППеречислениеВФонды.ФизЛицо = ФИОФизЛиц.ФизЛицо
			|					И ЕППеречислениеВФонды.ДатаДокумента >= ФИОФизЛиц.Период
			|		
			|		СГРУППИРОВАТЬ ПО
			|			ЕППеречислениеВФонды.Ссылка,
			|			ЕППеречислениеВФонды.ФизЛицо) КАК ДанныеДокументовПоПериодам
			|		ПО ФИОФизЛиц.ФизЛицо = ДанныеДокументовПоПериодам.ФизЛицо
			|			И ФИОФизЛиц.Период = ДанныеДокументовПоПериодам.Период
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Ссылка,
			|	ФизЛицо
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ОПВПеречислениеВФонды.Ссылка КАК Ссылка,
			|	ОПВПеречислениеВФонды.ФизЛицо КАК ФизЛицо,
			|	ОПВПеречислениеВФонды.ФизЛицо.СИК КАК СИК,
			|	ОПВПеречислениеВФонды.ФизЛицо.РНН КАК РНН,
			|	ОПВПеречислениеВФонды.ФизЛицо.ИдентификационныйКодЛичности КАК ИИН,
			|	ОПВПеречислениеВФонды.ФизЛицо.ДатаРождения КАК ДатаРождения,
			|	ВЫБОР
			|		КОГДА ОПВПеречислениеВФонды.Сумма ЕСТЬ NULL
			|			ТОГДА 0
			|		ИНАЧЕ ОПВПеречислениеВФонды.Сумма
			|	КОНЕЦ КАК Сумма,
			|	0 КАК СуммаПлатежа,
			|	ФИОФизЛиц.Фамилия + "" "" + ФИОФизЛиц.Имя + "" "" + ФИОФизЛиц.Отчество КАК ФИО,
			|	ФИОФизЛицПриПрисвоенииСИК.Фамилия + "" "" + ФИОФизЛицПриПрисвоенииСИК.Имя + "" "" + ФИОФизЛицПриПрисвоенииСИК.Отчество КАК ФИОПриПрисвоенииСИК,
			|	ОПВПеречислениеВФонды.ПериодРегистрации КАК ПериодРегистрации,
			|	ЛОЖЬ КАК ВключаетОПВ,
			|	ЛОЖЬ КАК ВключаетВОСМС,
			|	ЛОЖЬ КАК ВключаетИПН,
			|	ЛОЖЬ КАК ВключаетСО,
			|	ЛОЖЬ КАК ВключаетООСМС,
			|	ЛОЖЬ КАК ВключаетОПВР
			|ИЗ
			|	(ВЫБРАТЬ
			|		ОПВПеречислениеВФондыПенсионныеВзносы.ФизЛицо КАК ФизЛицо,
			|		ОПВПеречислениеВФондыПенсионныеВзносы.ПериодРегистрации КАК ПериодРегистрации,
			|		ОПВПеречислениеВФондыПенсионныеВзносы.Ссылка КАК Ссылка,
			|		СУММА(ОПВПеречислениеВФондыПенсионныеВзносы.Сумма) КАК Сумма
			|	ИЗ
			|		(ВЫБРАТЬ
			|			ВТ_ОПВПеречислениеВФондыПенсионныеВзносы.ПериодРегистрации КАК ПериодРегистрации,
			|			ВТ_ОПВПеречислениеВФондыПенсионныеВзносы.ФизЛицо КАК ФизЛицо,
			|			ВТ_ОПВПеречислениеВФондыПенсионныеВзносы.Сумма КАК Сумма,
			|			ВТ_ОПВПеречислениеВФондыПенсионныеВзносы.Ссылка КАК Ссылка
			|		ИЗ
			|			ВТ_ОПВПеречислениеВФондыПенсионныеВзносы КАК ВТ_ОПВПеречислениеВФондыПенсионныеВзносы) КАК ОПВПеречислениеВФондыПенсионныеВзносы
			|	
			|	СГРУППИРОВАТЬ ПО
			|		ОПВПеречислениеВФондыПенсионныеВзносы.ФизЛицо,
			|		ОПВПеречислениеВФондыПенсионныеВзносы.ПериодРегистрации,
			|		ОПВПеречислениеВФондыПенсионныеВзносы.Ссылка) КАК ОПВПеречислениеВФонды
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛицПриПрисвоенииСИК КАК ФИОФизЛицПриПрисвоенииСИК
			|		ПО (ФИОФизЛицПриПрисвоенииСИК.ФизЛицо = ОПВПеречислениеВФонды.ФизЛицо)
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ФИОФизЛиц КАК ФИОФизЛиц
			|		ПО (ФИОФизЛиц.Ссылка = ОПВПеречислениеВФонды.Ссылка)
			|			И (ФИОФизЛиц.ФизЛицо = ОПВПеречислениеВФонды.ФизЛицо)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	СОПеречислениеВФонды.Ссылка,
			|	СОПеречислениеВФонды.ФизЛицо,
			|	СОПеречислениеВФонды.ФизЛицо.СИК,
			|	СОПеречислениеВФонды.ФизЛицо.РНН,
			|	СОПеречислениеВФонды.ФизЛицо.ИдентификационныйКодЛичности,
			|	СОПеречислениеВФонды.ФизЛицо.ДатаРождения,
			|	ВЫБОР
			|		КОГДА СОПеречислениеВФонды.Сумма ЕСТЬ NULL
			|			ТОГДА 0
			|		ИНАЧЕ СОПеречислениеВФонды.Сумма
			|	КОНЕЦ,
			|	0 КАК СуммаПлатежа,
			|	ФИОФизЛиц.Фамилия + "" "" + ФИОФизЛиц.Имя + "" "" + ФИОФизЛиц.Отчество,
			|	ФИОФизЛицПриПрисвоенииСИК.Фамилия + "" "" + ФИОФизЛицПриПрисвоенииСИК.Имя + "" "" + ФИОФизЛицПриПрисвоенииСИК.Отчество,
			|	СОПеречислениеВФонды.ПериодРегистрации,
			|	ЛОЖЬ КАК ВключаетОПВ,
			|	ЛОЖЬ КАК ВключаетВОСМС,
			|	ЛОЖЬ КАК ВключаетИПН,
			|	ЛОЖЬ КАК ВключаетСО,
			|	ЛОЖЬ КАК ВключаетООСМС,
			|	ЛОЖЬ КАК ВключаетОПВР
			|ИЗ
			|	(ВЫБРАТЬ
			|		СОПеречислениеВФонды.ФизЛицо КАК ФизЛицо,
			|		СОПеречислениеВФонды.ПериодРегистрации КАК ПериодРегистрации,
			|		СОПеречислениеВФонды.Ссылка КАК Ссылка,
			|		СУММА(СОПеречислениеВФонды.Сумма) КАК Сумма
			|	ИЗ
			|		(ВЫБРАТЬ
			|			ВТ_СОПеречислениеВФонды.ПериодРегистрации КАК ПериодРегистрации,
			|			ВТ_СОПеречислениеВФонды.ФизЛицо КАК ФизЛицо,
			|			ВТ_СОПеречислениеВФонды.Сумма КАК Сумма,
			|			ВТ_СОПеречислениеВФонды.Ссылка КАК Ссылка
			|		ИЗ
			|			ВТ_СОПеречислениеВФонды КАК ВТ_СОПеречислениеВФонды) КАК СОПеречислениеВФонды
			|	
			|	СГРУППИРОВАТЬ ПО
			|		СОПеречислениеВФонды.ФизЛицо,
			|		СОПеречислениеВФонды.ПериодРегистрации,
			|		СОПеречислениеВФонды.Ссылка) КАК СОПеречислениеВФонды
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛицПриПрисвоенииСИК КАК ФИОФизЛицПриПрисвоенииСИК
			|		ПО (ФИОФизЛицПриПрисвоенииСИК.ФизЛицо = СОПеречислениеВФонды.ФизЛицо)
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ФИОФизЛиц КАК ФИОФизЛиц
			|		ПО (ФИОФизЛиц.Ссылка = СОПеречислениеВФонды.Ссылка)
			|			И (ФИОФизЛиц.ФизЛицо = СОПеречислениеВФонды.ФизЛицо)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ЕППеречислениеВФонды.Ссылка,
			|	ЕППеречислениеВФонды.ФизЛицо,
			|	ЕППеречислениеВФонды.ФизЛицо.СИК,
			|	ЕППеречислениеВФонды.ФизЛицо.РНН,
			|	ЕППеречислениеВФонды.ФизЛицо.ИдентификационныйКодЛичности,
			|	ЕППеречислениеВФонды.ФизЛицо.ДатаРождения,
			|	ВЫБОР
			|		КОГДА ЕППеречислениеВФонды.Сумма ЕСТЬ NULL
			|			ТОГДА 0
			|		ИНАЧЕ ЕППеречислениеВФонды.Сумма
			|	КОНЕЦ,
			|	ВЫБОР
			|		КОГДА ЕППеречислениеВФонды.СуммаПлатежа ЕСТЬ NULL
			|			ТОГДА 0
			|		ИНАЧЕ ЕППеречислениеВФонды.СуммаПлатежа
			|	КОНЕЦ,
			|	ФИОФизЛиц.Фамилия + "" "" + ФИОФизЛиц.Имя + "" "" + ФИОФизЛиц.Отчество,
			|	ФИОФизЛицПриПрисвоенииСИК.Фамилия + "" "" + ФИОФизЛицПриПрисвоенииСИК.Имя + "" "" + ФИОФизЛицПриПрисвоенииСИК.Отчество,
			|	ЕППеречислениеВФонды.ПериодРегистрации,
			|	ЕППеречислениеВФонды.ВключаетОПВ КАК ВключаетОПВ,
			|	ЕППеречислениеВФонды.ВключаетВОСМС КАК ВключаетВОСМС,
			|	ЕППеречислениеВФонды.ВключаетИПН КАК ВключаетИПН,
			|	ЕППеречислениеВФонды.ВключаетСО КАК ВключаетСО,
			|	ЕППеречислениеВФонды.ВключаетООСМС КАК ВключаетООСМС,
			|	ЕППеречислениеВФонды.ВключаетОПВР КАК ВключаетОПВР
			|ИЗ
			|	(ВЫБРАТЬ
			|		ЕППеречислениеВФонды.ФизЛицо КАК ФизЛицо,
			|		ЕППеречислениеВФонды.ПериодРегистрации КАК ПериодРегистрации,
			|		ЕППеречислениеВФонды.Ссылка КАК Ссылка,
			|		СУММА(ЕППеречислениеВФонды.СуммаПлатежа) КАК СуммаПлатежа,
			|		СУММА(ЕППеречислениеВФонды.Сумма) КАК Сумма,
			|		МАКСИМУМ(ЕППеречислениеВФонды.ВключаетОПВ) КАК ВключаетОПВ,
			|		МАКСИМУМ(ЕППеречислениеВФонды.ВключаетВОСМС) КАК ВключаетВОСМС,
			|		МАКСИМУМ(ЕППеречислениеВФонды.ВключаетИПН) КАК ВключаетИПН,
			|		МАКСИМУМ(ЕППеречислениеВФонды.ВключаетСО) КАК ВключаетСО,
			|		МАКСИМУМ(ЕППеречислениеВФонды.ВключаетООСМС) КАК ВключаетООСМС,
			|		МАКСИМУМ(ЕППеречислениеВФонды.ВключаетОПВР) КАК ВключаетОПВР
			|	ИЗ
			|		(ВЫБРАТЬ
			|			ВТ_ЕППеречислениеВФонды.ПериодРегистрации КАК ПериодРегистрации,
			|			ВТ_ЕППеречислениеВФонды.ФизЛицо КАК ФизЛицо,
			|			ВТ_ЕППеречислениеВФонды.Сумма КАК Сумма,
			|			ВТ_ЕППеречислениеВФонды.СуммаПлатежа КАК СуммаПлатежа,
			|			ВТ_ЕППеречислениеВФонды.Ссылка КАК Ссылка,
			|			ВТ_ЕППеречислениеВФонды.ВключаетОПВ КАК ВключаетОПВ,
			|			ВТ_ЕППеречислениеВФонды.ВключаетВОСМС КАК ВключаетВОСМС,
			|			ВТ_ЕППеречислениеВФонды.ВключаетИПН КАК ВключаетИПН,
			|			ВТ_ЕППеречислениеВФонды.ВключаетСО КАК ВключаетСО,
			|			ВТ_ЕППеречислениеВФонды.ВключаетООСМС КАК ВключаетООСМС,
			|			ВТ_ЕППеречислениеВФонды.ВключаетОПВР КАК ВключаетОПВР
			|		ИЗ
			|			ВТ_ЕППеречислениеВФонды КАК ВТ_ЕППеречислениеВФонды) КАК ЕППеречислениеВФонды
			|	
			|	СГРУППИРОВАТЬ ПО
			|		ЕППеречислениеВФонды.ФизЛицо,
			|		ЕППеречислениеВФонды.ПериодРегистрации,
			|		ЕППеречислениеВФонды.Ссылка) КАК ЕППеречислениеВФонды
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛицПриПрисвоенииСИК КАК ФИОФизЛицПриПрисвоенииСИК
			|		ПО (ФИОФизЛицПриПрисвоенииСИК.ФизЛицо = ЕППеречислениеВФонды.ФизЛицо)
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ФИОФизЛиц КАК ФИОФизЛиц
			|		ПО (ФИОФизЛиц.Ссылка = ЕППеречислениеВФонды.Ссылка)
			|			И (ФИОФизЛиц.ФизЛицо = ЕППеречислениеВФонды.ФизЛицо)
			|
			|УПОРЯДОЧИТЬ ПО
			|	Ссылка,
			|	ФИО,
			|	ПериодРегистрации
			|ИТОГИ
			|	СУММА(Сумма)
			|ПО
			|	Ссылка";
			
		Запрос.Текст = ТекстЗапроса;
			
	КонецЕсли;
	
	Возврат Запрос.Выполнить();
	
КонецФункции

Функция СформироватьЗапросДляПечатиПрочиеВыплаты(Режим, МассивСсылок)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("МассивОбъектов", МассивСсылок);
	Запрос.УстановитьПараметр("ВидПрочихВыплат", Справочники.ВидыПрочихВыплат.ПрофессиональнаяВыплатаЗаСчетРаботодателя);

	Если Режим = "ПоРеквизитам" Тогда
		
		// список способов заполнения только зарплаты из депонированных сумм
		МассивВидовОпераций = Новый Массив;
		МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийППИсходящее.ПеречислениеПрочихВыплат);
		
		Запрос.УстановитьПараметр("МассивВидовОпераций", МассивВидовОпераций);
		
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПлатежноеПоручениеИсходящееПеречисление.Ссылка КАК Ссылка, 
		|	ПеречислениеПрочихВыплат.ВидПрочихВыплат,
		|	МИНИМУМ(ПеречислениеПрочихВыплат.ПериодВзаиморасчетов) КАК ПериодПлатежа
		|ПОМЕСТИТЬ ВТ_ВедомостьНаПеречислениеПрочихВыплат
		|ИЗ
		|	Документ.ВедомостьНаПеречислениеПрочихВыплат КАК ПеречислениеПрочихВыплат
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПлатежноеПоручениеИсходящее.ПеречислениеПрочихВыплат КАК ПлатежноеПоручениеИсходящееПеречисление
		|		ПО ПеречислениеПрочихВыплат.Ссылка = ПлатежноеПоручениеИсходящееПеречисление.Документ
		|			И (ПлатежноеПоручениеИсходящееПеречисление.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийППИсходящее.ПеречислениеПрочихВыплат))
		|ГДЕ
		|	ПлатежноеПоручениеИсходящееПеречисление.Ссылка В(&МассивОбъектов)
		|	И ПлатежноеПоручениеИсходящееПеречисление.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийППИсходящее.ПеречислениеПрочихВыплат)
		|	И ПеречислениеПрочихВыплат.ВидПрочихВыплат = &ВидПрочихВыплат
		|
		|СГРУППИРОВАТЬ ПО
		|	ПлатежноеПоручениеИсходящееПеречисление.Ссылка,
		|	ПеречислениеПрочихВыплат.ВидПрочихВыплат
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ПлатежноеПоручениеИсходящееПеречисление.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПлатежноеПоручениеИсходящее.Ссылка КАК Ссылка,
		|	ПлатежноеПоручениеИсходящее.ВидОперации КАК ВидОперации,
		|	ПлатежноеПоручениеИсходящее.Организация КАК Организация,
		|	ПлатежноеПоручениеИсходящее.СтруктурноеПодразделениеОтправитель КАК СтруктурноеПодразделениеОтправитель,
		|	ПлатежноеПоручениеИсходящее.ТекстПлательщика КАК ТекстПлательщика,
		|	ПлатежноеПоручениеИсходящее.ТекстПолучателя КАК ТекстПолучателя,
		|	ПлатежноеПоручениеИсходящее.РННПлательщика КАК РННПлательщика,
		|	ПлатежноеПоручениеИсходящее.РННПолучателя КАК РННПолучателя,
		|	ВЫБОР
		|		КОГДА ПлатежноеПоручениеИсходящее.СтруктурноеПодразделениеОтправитель = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
		|			ТОГДА ВЫРАЗИТЬ(ПлатежноеПоручениеИсходящее.Организация.НаименованиеПолное КАК СТРОКА(1000))
		|		ИНАЧЕ ВЫРАЗИТЬ(ПлатежноеПоручениеИсходящее.СтруктурноеПодразделениеОтправитель.НаименованиеПолное КАК СТРОКА(1000))
		|	КОНЕЦ КАК НазваниеОрганизации,
		|	ПлатежноеПоручениеИсходящее.СчетОрганизации.НомерСчета КАК ИИКОрганизации,
		|	ВЫБОР
		|		КОГДА ПлатежноеПоручениеИсходящее.СтруктурноеПодразделениеОтправитель = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
		|			ТОГДА ПлатежноеПоручениеИсходящее.Организация.РНН
		|		ИНАЧЕ ПлатежноеПоручениеИсходящее.СтруктурноеПодразделениеОтправитель.РНН
		|	КОНЕЦ КАК РННОрганизации,
		|	ВЫБОР
		|		КОГДА ПлатежноеПоручениеИсходящее.Дата >= ДАТАВРЕМЯ(2010, 6, 7)
		|			ТОГДА ПлатежноеПоручениеИсходящее.СчетОрганизации.Банк.БИК
		|		ИНАЧЕ ПлатежноеПоручениеИсходящее.СчетОрганизации.Банк.БИКДоРеформыБанковскихСчетов
		|	КОНЕЦ КАК БИКОрганизации,
		|	ПлатежноеПоручениеИсходящее.СчетОрганизации.Банк.Наименование КАК БанкОрганизации,
		|	ПлатежноеПоручениеИсходящее.СчетОрганизации.Банк.Город КАК АдресБанкаОрганизации,
		|	ПлатежноеПоручениеИсходящее.Организация.КБЕ КАК КБеОрганизации,
		|	ПлатежноеПоручениеИсходящее.Номер КАК НомерДокумента,
		|	ПлатежноеПоручениеИсходящее.Дата КАК ДатаДокумента,
		|	ПлатежноеПоручениеИсходящее.ДатаВыписки КАК ДатаВыписки,
		|	ПлатежноеПоручениеИсходящее.Контрагент КАК ГЦВП,
		|	ВЫРАЗИТЬ(ПлатежноеПоручениеИсходящее.Контрагент.НаименованиеПолное КАК СТРОКА(1000)) КАК НазваниеГЦВП,
		|	ПлатежноеПоручениеИсходящее.СчетКонтрагента.НомерСчета КАК ИИКГЦВП,
		|	ВЫБОР
		|		КОГДА ПлатежноеПоручениеИсходящее.Дата >= ДАТАВРЕМЯ(2010, 6, 7)
		|			ТОГДА ПлатежноеПоручениеИсходящее.СчетКонтрагента.Банк.БИК
		|		ИНАЧЕ ПлатежноеПоручениеИсходящее.СчетКонтрагента.Банк.БИКДоРеформыБанковскихСчетов
		|	КОНЕЦ КАК БИКГЦВП,
		|	ПлатежноеПоручениеИсходящее.СчетКонтрагента.Банк.Наименование КАК БанкГЦВП,
		|	ПлатежноеПоручениеИсходящее.СчетКонтрагента.Банк.Город КАК АдресБанкаГЦВП,
		|	ПлатежноеПоручениеИсходящее.Контрагент.РНН КАК РННГЦВП,
		|	ПлатежноеПоручениеИсходящее.Контрагент.ИдентификационныйКодЛичности КАК БИНГЦВП,
		|	ВЫРАЗИТЬ(ПлатежноеПоручениеИсходящее.Контрагент.НаименованиеПолное КАК СТРОКА(1000)) КАК НазваниеФонда,
		|	ПлатежноеПоручениеИсходящее.СчетКонтрагента.НомерСчета КАК ИИКФонда,
		|	ВЫБОР
		|		КОГДА ПлатежноеПоручениеИсходящее.Дата >= ДАТАВРЕМЯ(2010, 6, 7)
		|			ТОГДА ПлатежноеПоручениеИсходящее.СчетКонтрагента.Банк.БИК
		|		ИНАЧЕ ПлатежноеПоручениеИсходящее.СчетКонтрагента.Банк.БИКДоРеформыБанковскихСчетов
		|	КОНЕЦ КАК БИКФонда,
		|	ПлатежноеПоручениеИсходящее.СчетКонтрагента.Банк.Наименование КАК БанкФонда,
		|	ПлатежноеПоручениеИсходящее.СчетКонтрагента.Банк.Город КАК АдресБанкаФонда,
		|	ПлатежноеПоручениеИсходящее.Контрагент.РНН КАК РННФонда,
		|	ПлатежноеПоручениеИсходящее.Контрагент КАК Фонд,
		|	ВедомостьПеречислениеПрочихВыплат.ВидПрочихВыплат КАК ВидПрочихВыплат,
		|	ВедомостьПеречислениеПрочихВыплат.ПериодПлатежа КАК ПериодПлатежа
		|ИЗ
		|	Документ.ПлатежноеПоручениеИсходящее КАК ПлатежноеПоручениеИсходящее
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ВедомостьНаПеречислениеПрочихВыплат КАК ВедомостьПеречислениеПрочихВыплат
		|		ПО (ВедомостьПеречислениеПрочихВыплат.Ссылка = ПлатежноеПоручениеИсходящее.Ссылка)
		|ГДЕ
		|	ПлатежноеПоручениеИсходящее.Ссылка В(&МассивОбъектов)
		|	И ПлатежноеПоручениеИсходящее.ВидОперации В (&МассивВидовОпераций)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВидОперации,
		|	Ссылка";
		
		Запрос.Текст = ТекстЗапроса;
		
	ИначеЕсли Режим = "ПоТабличнойЧасти" Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ППИПеречислениеПрочихВыплат.Ссылка КАК Ссылка,
		|	НАЧАЛОПЕРИОДА(ВедомостьНаПеречислениеПрочихВыплатПрочиеВыплаты.Ссылка.ПериодВзаиморасчетов, МЕСЯЦ) КАК ПериодРегистрации,
		|	ППИПеречислениеПрочихВыплат.Ссылка.Дата КАК ДатаДокумента,
		|	ВедомостьНаПеречислениеПрочихВыплатПрочиеВыплаты.ФизЛицо КАК ФизЛицо,
		|	ВедомостьНаПеречислениеПрочихВыплатПрочиеВыплаты.Сумма КАК Сумма
		|ПОМЕСТИТЬ ВТ_ВедомостьНаПеречислениеПрочихВыплатПрочиеВыплаты
		|ИЗ
		|	Документ.ВедомостьНаПеречислениеПрочихВыплат.ПрочиеВыплаты КАК ВедомостьНаПеречислениеПрочихВыплатПрочиеВыплаты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПлатежноеПоручениеИсходящее.ПеречислениеПрочихВыплат КАК ППИПеречислениеПрочихВыплат
		|		ПО (ППИПеречислениеПрочихВыплат.Документ = ВедомостьНаПеречислениеПрочихВыплатПрочиеВыплаты.Ссылка)
		|			И (ППИПеречислениеПрочихВыплат.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийППИсходящее.ПеречислениеПрочихВыплат))
		|			И (ППИПеречислениеПрочихВыплат.Ссылка В (&МассивОбъектов))
		|ГДЕ
		|	 ВедомостьНаПеречислениеПрочихВыплатПрочиеВыплаты.Ссылка.ВидПрочихВыплат = &ВидПрочихВыплат
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка,
		|	ФизЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДанныеДокументовПоПериодам.Ссылка КАК Ссылка,
		|	ДанныеДокументовПоПериодам.ФизЛицо КАК ФизЛицо,
		|	ФИОФизЛиц.Фамилия КАК Фамилия,
		|	ФИОФизЛиц.Имя КАК Имя,
		|	ФИОФизЛиц.Отчество КАК Отчество
		|ПОМЕСТИТЬ ВТ_ФИОФизЛиц
		|ИЗ
		|	РегистрСведений.ФИОФизЛиц КАК ФИОФизЛиц
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			МАКСИМУМ(ФИОФизЛиц.Период) КАК Период,
		|			ВедомостьНаПеречислениеПрочихВыплатПрочиеВыплаты.Ссылка КАК Ссылка,
		|			ВедомостьНаПеречислениеПрочихВыплатПрочиеВыплаты.ФизЛицо КАК ФизЛицо
		|		ИЗ
		|			ВТ_ВедомостьНаПеречислениеПрочихВыплатПрочиеВыплаты КАК ВедомостьНаПеречислениеПрочихВыплатПрочиеВыплаты
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц КАК ФИОФизЛиц
		|				ПО ВедомостьНаПеречислениеПрочихВыплатПрочиеВыплаты.ФизЛицо = ФИОФизЛиц.ФизЛицо
		|					И ВедомостьНаПеречислениеПрочихВыплатПрочиеВыплаты.ДатаДокумента >= ФИОФизЛиц.Период
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ВедомостьНаПеречислениеПрочихВыплатПрочиеВыплаты.Ссылка,
		|			ВедомостьНаПеречислениеПрочихВыплатПрочиеВыплаты.ФизЛицо) КАК ДанныеДокументовПоПериодам
		|		ПО ФИОФизЛиц.ФизЛицо = ДанныеДокументовПоПериодам.ФизЛицо
		|			И ФИОФизЛиц.Период = ДанныеДокументовПоПериодам.Период
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка,
		|	ФизЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВедомостьПеречислениеПрочихВыплат.Ссылка КАК Ссылка,
		|	ВедомостьПеречислениеПрочихВыплат.ФизЛицо КАК ФизЛицо,
		|	ВедомостьПеречислениеПрочихВыплат.ФизЛицо.СИК КАК СИК,
		|	ВедомостьПеречислениеПрочихВыплат.ФизЛицо.РНН КАК РНН,
		|	ВедомостьПеречислениеПрочихВыплат.ФизЛицо.ИдентификационныйКодЛичности КАК ИИН,
		|	ВедомостьПеречислениеПрочихВыплат.ФизЛицо.ДатаРождения КАК ДатаРождения,
		|	ВЫБОР
		|		КОГДА ВедомостьПеречислениеПрочихВыплат.Сумма ЕСТЬ NULL
		|			ТОГДА 0
		|		ИНАЧЕ ВедомостьПеречислениеПрочихВыплат.Сумма
		|	КОНЕЦ КАК Сумма,
		|	0 КАК СуммаПлатежа,
		|	ФИОФизЛиц.Фамилия + "" "" + ФИОФизЛиц.Имя + "" "" + ФИОФизЛиц.Отчество КАК ФИО,
		|	ФИОФизЛицПриПрисвоенииСИК.Фамилия + "" "" + ФИОФизЛицПриПрисвоенииСИК.Имя + "" "" + ФИОФизЛицПриПрисвоенииСИК.Отчество КАК ФИОПриПрисвоенииСИК,
		|	ВедомостьПеречислениеПрочихВыплат.ПериодРегистрации КАК ПериодРегистрации
        |
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВедомостьНаПеречислениеПрочихВыплатПрочиеВыплаты.ФизЛицо КАК ФизЛицо,
		|		ВедомостьНаПеречислениеПрочихВыплатПрочиеВыплаты.ПериодРегистрации КАК ПериодРегистрации,
		|		ВедомостьНаПеречислениеПрочихВыплатПрочиеВыплаты.Ссылка КАК Ссылка,
		|		СУММА(ВедомостьНаПеречислениеПрочихВыплатПрочиеВыплаты.Сумма) КАК Сумма
		|	ИЗ
		|		(ВЫБРАТЬ
		|			ВТ_ВедомостьНаПеречислениеПрочихВыплатПрочиеВыплаты.ПериодРегистрации КАК ПериодРегистрации,
		|			ВТ_ВедомостьНаПеречислениеПрочихВыплатПрочиеВыплаты.ФизЛицо КАК ФизЛицо,
		|			ВТ_ВедомостьНаПеречислениеПрочихВыплатПрочиеВыплаты.Сумма КАК Сумма,
		|			ВТ_ВедомостьНаПеречислениеПрочихВыплатПрочиеВыплаты.Ссылка КАК Ссылка
		|		ИЗ
		|			ВТ_ВедомостьНаПеречислениеПрочихВыплатПрочиеВыплаты КАК ВТ_ВедомостьНаПеречислениеПрочихВыплатПрочиеВыплаты) КАК ВедомостьНаПеречислениеПрочихВыплатПрочиеВыплаты
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ВедомостьНаПеречислениеПрочихВыплатПрочиеВыплаты.ФизЛицо,
		|		ВедомостьНаПеречислениеПрочихВыплатПрочиеВыплаты.ПериодРегистрации,
		|		ВедомостьНаПеречислениеПрочихВыплатПрочиеВыплаты.Ссылка) КАК ВедомостьПеречислениеПрочихВыплат
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛицПриПрисвоенииСИК КАК ФИОФизЛицПриПрисвоенииСИК
		|		ПО (ФИОФизЛицПриПрисвоенииСИК.ФизЛицо = ВедомостьПеречислениеПрочихВыплат.ФизЛицо)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ФИОФизЛиц КАК ФИОФизЛиц
		|		ПО (ФИОФизЛиц.Ссылка = ВедомостьПеречислениеПрочихВыплат.Ссылка)
		|			И (ФИОФизЛиц.ФизЛицо = ВедомостьПеречислениеПрочихВыплат.ФизЛицо)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка,
		|	ФИО,
		|	ПериодРегистрации
		|ИТОГИ
		|	СУММА(Сумма)
		|ПО
		|	Ссылка";
			
		Запрос.Текст = ТекстЗапроса;
			
	КонецЕсли;
	
	Возврат Запрос.Выполнить();
	
КонецФункции

Функция СформироватьЗапросДляПечатиПеречислениеЗарплатыПодотчет(Режим, МассивСсылок)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("МассивОбъектов", МассивСсылок);

	Если Режим = "ПоРеквизитам" Тогда
		
		// список способов заполнения только зарплаты из текущих взаиморасчетов
		МассивСпособовЗарплата = Новый Массив;
		МассивСпособовЗарплата.Добавить(Перечисления.СпособыРасчетаСуммКВыплате.ЗарплатаЗаМесяц);
		МассивСпособовЗарплата.Добавить(Перечисления.СпособыРасчетаСуммКВыплате.ОстаткиПоЗарплатеНаКонецМесяца);
		МассивСпособовЗарплата.Добавить(Перечисления.СпособыРасчетаСуммКВыплате.ПоВидуРасчета);
		
		Запрос.УстановитьПараметр("МассивСпособовЗарплата", МассивСпособовЗарплата);
		
		// список способов заполнения только зарплаты из депонированных сумм
		МассивСпособовДепонированныеСуммы = Новый Массив;
		МассивСпособовДепонированныеСуммы.Добавить(Перечисления.СпособыРасчетаСуммКВыплате.ДепонированнаяЗарплатаЗаМесяц);
		МассивСпособовДепонированныеСуммы.Добавить(Перечисления.СпособыРасчетаСуммКВыплате.ОстаткиПоДепонированнойЗарплатеНаКонецМесяца);
		
		Запрос.УстановитьПараметр("МассивСпособовДепонированныеСуммы", МассивСпособовДепонированныеСуммы);
		
		// список способов заполнения только зарплаты из депонированных сумм
		МассивВидовОпераций = Новый Массив;
		МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийППИсходящее.ПеречислениеЗаработнойПлаты);
		МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийППИсходящее.ПеречислениеДенежныхСредствПодотчетнику);
		
		Запрос.УстановитьПараметр("МассивВидовОпераций", МассивВидовОпераций);
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ПеречислениеЗарплаты.Ссылка,
		|	МИНИМУМ(ВЫБОР
		|			КОГДА ПеречислениеЗарплаты.ТекущиеВзаиморасчеты > 0
		|					И ПеречислениеЗарплаты.ДепонированныеСуммы = 0
		|				ТОГДА ПеречислениеЗарплаты.МинПериодНачисленияЗарплаты
		|			КОГДА ПеречислениеЗарплаты.ДепонированныеСуммы > 0
		|					И ПеречислениеЗарплаты.ТекущиеВзаиморасчеты = 0
		|				ТОГДА ПеречислениеЗарплаты.МинПериодНачисленияДепонированнойЗарплаты
		|			ИНАЧЕ ВЫБОР
		|					КОГДА ПеречислениеЗарплаты.МинПериодНачисленияЗарплаты < ПеречислениеЗарплаты.МинПериодНачисленияДепонированнойЗарплаты
		|						ТОГДА ПеречислениеЗарплаты.МинПериодНачисленияЗарплаты
		|					ИНАЧЕ ПеречислениеЗарплаты.МинПериодНачисленияДепонированнойЗарплаты
		|				КОНЕЦ
		|		КОНЕЦ) КАК ПериодС,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ПеречислениеЗарплаты.ТекущиеВзаиморасчеты > 0
		|					И ПеречислениеЗарплаты.ДепонированныеСуммы = 0
		|				ТОГДА ПеречислениеЗарплаты.МаксПериодНачисленияЗарплаты
		|			КОГДА ПеречислениеЗарплаты.ДепонированныеСуммы > 0
		|					И ПеречислениеЗарплаты.ТекущиеВзаиморасчеты = 0
		|				ТОГДА ПеречислениеЗарплаты.МаксПериодНачисленияДепонированнойЗарплаты
		|			ИНАЧЕ ВЫБОР
		|					КОГДА ПеречислениеЗарплаты.МаксПериодНачисленияЗарплаты > ПеречислениеЗарплаты.МаксПериодНачисленияДепонированнойЗарплаты
		|						ТОГДА ПеречислениеЗарплаты.МаксПериодНачисленияЗарплаты
		|					ИНАЧЕ ПеречислениеЗарплаты.МаксПериодНачисленияДепонированнойЗарплаты
		|				КОНЕЦ
		|		КОНЕЦ) КАК ПериодПо
		|ПОМЕСТИТЬ ВТ_ПеречислениеЗарплаты
		|ИЗ
		|	(ВЫБРАТЬ
		|		ПеречислениеЗарплаты.Ссылка КАК Ссылка,
		|		СУММА(ВЫБОР
		|				КОГДА ПеречислениеЗарплаты.Ведомость.СпособРасчетаСуммКВыплате В (&МассивСпособовЗарплата)
		|					ТОГДА 1
		|				ИНАЧЕ 0
		|			КОНЕЦ) КАК ТекущиеВзаиморасчеты,
		|		СУММА(ВЫБОР
		|				КОГДА ПеречислениеЗарплаты.Ведомость.СпособРасчетаСуммКВыплате В (&МассивСпособовДепонированныеСуммы)
		|					ТОГДА 1
		|				ИНАЧЕ 0
		|			КОНЕЦ) КАК ДепонированныеСуммы,
		|		МИНИМУМ(ПеречислениеЗарплаты.Ведомость.ПериодНачисленияЗарплаты) КАК МинПериодНачисленияЗарплаты,
		|		МАКСИМУМ(ПеречислениеЗарплаты.Ведомость.ПериодНачисленияЗарплаты) КАК МаксПериодНачисленияЗарплаты,
		|		ВЫБОР
		|			КОГДА ПеречислениеЗарплаты.Ведомость.ПериодНачисленияДепонированнойЗарплаты = ДАТАВРЕМЯ(1, 1, 1)
		|				ТОГДА МИНИМУМ(ПеречислениеЗарплаты.Ведомость.ПериодНачисленияЗарплаты)
		|			ИНАЧЕ МИНИМУМ(ПеречислениеЗарплаты.Ведомость.ПериодНачисленияДепонированнойЗарплаты)
		|		КОНЕЦ КАК МинПериодНачисленияДепонированнойЗарплаты,
		|		ВЫБОР
		|			КОГДА ПеречислениеЗарплаты.Ведомость.ПериодНачисленияДепонированнойЗарплаты = ДАТАВРЕМЯ(1, 1, 1)
		|				ТОГДА МАКСИМУМ(ПеречислениеЗарплаты.Ведомость.ПериодНачисленияЗарплаты)
		|			ИНАЧЕ МАКСИМУМ(ПеречислениеЗарплаты.Ведомость.ПериодНачисленияДепонированнойЗарплаты)
		|		КОНЕЦ КАК МаксПериодНачисленияДепонированнойЗарплаты
		|	ИЗ
		|		Документ.ПлатежноеПоручениеИсходящее.ПеречислениеЗаработнойПлаты КАК ПеречислениеЗарплаты
		|	ГДЕ
		|		ПеречислениеЗарплаты.Ссылка В(&МассивОбъектов)
		|		И ПеречислениеЗарплаты.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийППИсходящее.ПеречислениеЗаработнойПлаты)
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ПеречислениеЗарплаты.Ссылка,
		|		ПеречислениеЗарплаты.Ведомость,
		|		ПеречислениеЗарплаты.Ведомость.ПериодНачисленияДепонированнойЗарплаты) КАК ПеречислениеЗарплаты
		|
		|СГРУППИРОВАТЬ ПО
		|	ПеречислениеЗарплаты.Ссылка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ПеречислениеЗарплаты.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПлатежноеПоручениеИсходящее.Ссылка КАК Ссылка,
		|	ПлатежноеПоручениеИсходящее.ВидОперации КАК ВидОперации,
		|	ПлатежноеПоручениеИсходящее.Организация КАК Организация,
		|	ПлатежноеПоручениеИсходящее.СтруктурноеПодразделениеОтправитель КАК СтруктурноеПодразделениеОтправитель,
		|	ПлатежноеПоручениеИсходящее.ТекстПлательщика КАК ТекстПлательщика,
		|	ПлатежноеПоручениеИсходящее.ТекстПолучателя КАК ТекстПолучателя,
		|	ПлатежноеПоручениеИсходящее.РННПлательщика КАК РННПлательщика,
		|	ПлатежноеПоручениеИсходящее.РННПолучателя КАК РННПолучателя,
		|	ВЫБОР
		|		КОГДА ПлатежноеПоручениеИсходящее.СтруктурноеПодразделениеОтправитель = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
		|			ТОГДА ВЫРАЗИТЬ(ПлатежноеПоручениеИсходящее.Организация.НаименованиеПолное КАК СТРОКА(1000))
		|		ИНАЧЕ ВЫРАЗИТЬ(ПлатежноеПоручениеИсходящее.СтруктурноеПодразделениеОтправитель.НаименованиеПолное КАК СТРОКА(1000))
		|	КОНЕЦ КАК НазваниеОрганизации,
		|	ПлатежноеПоручениеИсходящее.СчетОрганизации.НомерСчета КАК ИИКОрганизации,
		|	ВЫБОР
		|		КОГДА ПлатежноеПоручениеИсходящее.СтруктурноеПодразделениеОтправитель = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
		|			ТОГДА ПлатежноеПоручениеИсходящее.Организация.РНН
		|		ИНАЧЕ ПлатежноеПоручениеИсходящее.СтруктурноеПодразделениеОтправитель.РНН
		|	КОНЕЦ КАК РННОрганизации,
		|	ВЫБОР
		|		КОГДА ПлатежноеПоручениеИсходящее.Дата >= ДАТАВРЕМЯ(2010, 6, 7)
		|			ТОГДА ПлатежноеПоручениеИсходящее.СчетОрганизации.Банк.БИК
		|		ИНАЧЕ ПлатежноеПоручениеИсходящее.СчетОрганизации.Банк.БИКДоРеформыБанковскихСчетов
		|	КОНЕЦ КАК БИКОрганизации,
		|	ПлатежноеПоручениеИсходящее.СчетОрганизации.Банк.Наименование КАК БанкОрганизации,
		|	ПлатежноеПоручениеИсходящее.СчетОрганизации.Банк.Город КАК АдресБанкаОрганизации,
		|	ЕСТЬNULL(ПлатежноеПоручениеИсходящее.СчетОрганизации.ВалютаДенежныхСредств, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)) КАК ВалютаДенежныхСредств,
		|	ПлатежноеПоручениеИсходящее.Ответственный.ФизЛицо КАК ОтветственныйФизЛицо,
		|	ПлатежноеПоручениеИсходящее.Организация.КБЕ КАК КБеОрганизации,
		|	ПлатежноеПоручениеИсходящее.Номер КАК НомерДокумента,
		|	ПлатежноеПоручениеИсходящее.Дата КАК ДатаДокумента,
		|	ПлатежноеПоручениеИсходящее.ДатаВыписки КАК ДатаВыписки,
		// ЗП, Подотчет
		|	ПлатежноеПоручениеИсходящее.Контрагент.Наименование КАК БанкНаименование,
		|	ПлатежноеПоручениеИсходящее.ВключатьКомиссиюБанка КАК ВключатьКомиссиюБанка,
		|	ПлатежноеПоручениеИсходящее.СуммаДокумента КАК СуммаДокумента,
		|	ПлатежноеПоручениеИсходящее.СуммаКомиссии КАК СуммаКомиссии,
		|	ПлатежноеПоручениеИсходящее.ПроцентКомиссии КАК ПроцентКомиссииБанка,
		// ЗП
		|	ПеречислениеЗарплаты.ПериодС,
		|	ПеречислениеЗарплаты.ПериодПо
		|ИЗ
		|	Документ.ПлатежноеПоручениеИсходящее КАК ПлатежноеПоручениеИсходящее
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПеречислениеЗарплаты КАК ПеречислениеЗарплаты
		|		ПО (ПеречислениеЗарплаты.Ссылка = ПлатежноеПоручениеИсходящее.Ссылка)
		|ГДЕ
		|	ПлатежноеПоручениеИсходящее.Ссылка В(&МассивОбъектов)
		|	И ПлатежноеПоручениеИсходящее.ВидОперации В (&МассивВидовОпераций)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВидОперации,
		|	Ссылка";
		
	ИначеЕсли Режим = "ПоТабличнойЧасти" Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ПлатежноеПоручениеИсходящее.Ссылка КАК Ссылка,
		|	ПлатежноеПоручениеИсходящее.Дата КАК ДатаДокумента,
		|	ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо КАК Физлицо,
		|	ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка КАК Ведомость,
		|	МИНИМУМ(ЗарплатаКВыплатеОрганизацийЗарплата.НомерСтроки) КАК НомерСтроки,
		|	ЗарплатаКВыплатеОрганизацийЗарплата.НомерКартСчета КАК НомерКартСчета,
		|	СУММА(ЗарплатаКВыплатеОрганизацийЗарплата.Сумма + ЗарплатаКВыплатеОрганизацийЗарплата.ДепонированнаяСумма) КАК СуммаКВыплате
		|ПОМЕСТИТЬ ВТ_Перечисления
		|ИЗ
		|	Документ.ПлатежноеПоручениеИсходящее.ПеречислениеЗаработнойПлаты КАК ПлатежноеПоручениеИсходящееПеречислениеЗаработнойПлаты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПлатежноеПоручениеИсходящее КАК ПлатежноеПоручениеИсходящее
		|		ПО (ПлатежноеПоручениеИсходящееПеречислениеЗаработнойПлаты.Ссылка = ПлатежноеПоручениеИсходящее.Ссылка)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацийЗарплата
		|		ПО (ПлатежноеПоручениеИсходящееПеречислениеЗаработнойПлаты.Ведомость = ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка)
		|ГДЕ
		|	ПлатежноеПоручениеИсходящееПеречислениеЗаработнойПлаты.Ссылка В(&МассивОбъектов)
		|	И ПлатежноеПоручениеИсходящее.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийППИсходящее.ПеречислениеЗаработнойПлаты)
		|
		|СГРУППИРОВАТЬ ПО
		|	ПлатежноеПоручениеИсходящее.Ссылка,
		|	ПлатежноеПоручениеИсходящее.Дата,
		|	ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо,
		|	ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка,
		|	ЗарплатаКВыплатеОрганизацийЗарплата.НомерКартСчета
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПлатежноеПоручениеИсходящее.Ссылка,
		|	ПлатежноеПоручениеИсходящее.Дата,
		|	ПлатежноеПоручениеИсходящееПеречислениеВПодотчет.ФизЛицо,
		|	ЗНАЧЕНИЕ(Документ.ЗарплатаКВыплатеОрганизаций.ПустаяСсылка),
		|	МИНИМУМ(ПлатежноеПоручениеИсходящееПеречислениеВПодотчет.НомерСтроки),
		|	ПлатежноеПоручениеИсходящееПеречислениеВПодотчет.НомерКартСчета,
		|	СУММА(ПлатежноеПоручениеИсходящееПеречислениеВПодотчет.СуммаПлатежа)
		|ИЗ
		|	Документ.ПлатежноеПоручениеИсходящее.ПеречислениеВПодотчет КАК ПлатежноеПоручениеИсходящееПеречислениеВПодотчет
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПлатежноеПоручениеИсходящее КАК ПлатежноеПоручениеИсходящее
		|		ПО (ПлатежноеПоручениеИсходящее.Ссылка = ПлатежноеПоручениеИсходящееПеречислениеВПодотчет.Ссылка)
		|ГДЕ
		|	ПлатежноеПоручениеИсходящееПеречислениеВПодотчет.Ссылка В(&МассивОбъектов)
		|
		|СГРУППИРОВАТЬ ПО
		|	ПлатежноеПоручениеИсходящее.Ссылка,
		|	ПлатежноеПоручениеИсходящее.Дата,
		|	ПлатежноеПоручениеИсходящееПеречислениеВПодотчет.ФизЛицо,
		|	ПлатежноеПоручениеИсходящееПеречислениеВПодотчет.НомерКартСчета
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка,
		|	Физлицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КартСчета.Ссылка КАК Ссылка,
		|	КартСчета.НомерСчета КАК НомерСчета,
		|	КартСчета.НеЯвляетсяВладельцемСчета КАК НеЯвляетсяВладельцемСчета,
		|	КартСчета.Наименование КАК Наименование,
		|	ВТ_Перечисления.НомерСтроки КАК НомерСтроки,
		|	ВТ_Перечисления.Ведомость КАК Ведомость,
		|	ВЫБОР
		|		КОГДА КартСчета.НеЯвляетсяВладельцемСчета
		|			ТОГДА КартСчета.ФизЛицоВладелецСчета
		|		ИНАЧЕ ВЫБОР
		|				КОГДА КартСчета.Наименование = ""<Обобщённый счёт>""
		|					ТОГДА ВТ_Перечисления.Физлицо
		|				КОГДА КартСчета.Ссылка ЕСТЬ NULL
		|					ТОГДА ВТ_Перечисления.Физлицо
		|				ИНАЧЕ КартСчета.Владелец
		|			КОНЕЦ
		|	КОНЕЦ КАК ФизЛицо
		|ПОМЕСТИТЬ ВТ_КартСчета
		|ИЗ
		|	ВТ_Перечисления КАК ВТ_Перечисления
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КартСчета КАК КартСчета
		|		ПО (КартСчета.Ссылка = ВТ_Перечисления.НомерКартСчета)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ФИОФизЛиц.Период КАК Период,
		|	ФИОФизЛиц.ФизЛицо КАК ФизЛицо,
		|	ФИОФизЛиц.Фамилия + ВЫБОР
		|		КОГДА ФИОФизЛиц.Имя = """"
		|			ТОГДА """"
		|		ИНАЧЕ "" "" + ФИОФизЛиц.Имя
		|	КОНЕЦ + ВЫБОР
		|		КОГДА ФИОФизЛиц.Отчество = """"
		|			ТОГДА """"
		|		ИНАЧЕ "" "" + ФИОФизЛиц.Отчество
		|	КОНЕЦ КАК ФИО
		|ПОМЕСТИТЬ ВТ_ФИОФизЛиц
		|ИЗ
		|	РегистрСведений.ФИОФизЛиц КАК ФИОФизЛиц
		|ГДЕ
		|	ФИОФизЛиц.ФизЛицо В
		|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|				КартСчета.ФизЛицо
		|			ИЗ
		|				ВТ_КартСчета КАК КартСчета)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ФизЛицо,
		|	Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ФИОФизЛиц1.Период КАК Период,
		|	МИНИМУМ(ЕСТЬNULL(ФИОФизЛиц2.Период, ДАТАВРЕМЯ(2099, 1, 1))) КАК ПериодПо,
		|	ФИОФизЛиц1.ФизЛицо КАК ФизЛицо,
		|	ФИОФизЛиц1.ФИО КАК ФИО
		|ПОМЕСТИТЬ ВТ_ФИОФизЛицСПериодомДействия
		|ИЗ
		|	ВТ_ФИОФизЛиц КАК ФИОФизЛиц1
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ФИОФизЛиц КАК ФИОФизЛиц2
		|		ПО ФИОФизЛиц1.ФизЛицо = ФИОФизЛиц2.ФизЛицо
		|			И ФИОФизЛиц1.Период < ФИОФизЛиц2.Период
		|
		|СГРУППИРОВАТЬ ПО
		|	ФИОФизЛиц1.Период,
		|	ФИОФизЛиц1.ФизЛицо,
		|	ФИОФизЛиц1.ФИО
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ФизЛицо,
		|	Период,
		|	ПериодПо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Перечисления.Ссылка КАК Ссылка,
		|	Перечисления.Физлицо КАК ФизЛицо,
		|	ЕСТЬNULL(ФизическиеЛица.РНН, """") КАК РННРаботника,
		|	ЕСТЬNULL(ФизическиеЛица.ИдентификационныйКодЛичности, """") КАК ИИНРаботника,
		|	ЕСТЬNULL(ФИОФизЛиц.ФИО, """") КАК ФИОРаботника,
		|	ЕСТЬNULL(КартСчета.НомерСчета, """") КАК НомерКартСчета,
		|	Перечисления.СуммаКВыплате КАК СуммаКВыплате
		|ИЗ
		|	ВТ_Перечисления КАК Перечисления
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_КартСчета КАК КартСчета
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
		|			ПО (ФизическиеЛица.Ссылка = КартСчета.ФизЛицо)
		|		ПО (ВЫБОР
		|				КОГДА КартСчета.Ссылка ЕСТЬ NULL
		|					ТОГДА ИСТИНА
		|				ИНАЧЕ КартСчета.Ссылка = Перечисления.НомерКартСчета
		|			КОНЕЦ)
		|			И Перечисления.НомерСтроки = КартСчета.НомерСтроки
		|			И Перечисления.Ведомость = КартСчета.Ведомость
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ФИОФизЛицСПериодомДействия КАК ФИОФизЛиц
		|		ПО (ФИОФизЛиц.ФизЛицо = КартСчета.ФизЛицо)
		|			И (ФИОФизЛиц.Период <= Перечисления.ДатаДокумента)
		|			И (ФИОФизЛиц.ПериодПо > Перечисления.ДатаДокумента)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Перечисления.Ссылка,
		|	ЕСТЬNULL(ФИОФизЛиц.ФИО, """")
		|ИТОГИ ПО
		|	Ссылка";
		
	КонецЕсли;
	
	Возврат Запрос.Выполнить();
	
КонецФункции

Функция ПолноеОписаниеПериода(ДатаНачала, ДатаОкончания, СДатами = Истина) Экспорт
	
	ЧислоНачала		= День(ДатаНачала);
	ЧислоОкончания	= День(ДатаОкончания);
	ОписаниеМесяцаГода = Формат(ДатаНачала,   "ДФ = 'MMMM'") + " "+ Формат(ДатаНачала,    "ДФ = 'гггг'");
	ОписаниеМесяца2    = Формат(ДатаОкончания,"ДФ = 'MMMM'") + " "+ Формат(ДатаОкончания, "ДФ = 'гггг'");
	
	Если НачалоМесяца(ДатаНачала) <> НачалоМесяца(ДатаОкончания) Тогда  
		
		Если (НачалоДня(ДатаНачала) = НачалоМесяца(ДатаНачала)) Тогда
			Перваяполовинадат = "" + ОписаниеМесяцаГода;
		Иначе
			Перваяполовинадат = ?(СДатами, "" + ЧислоНачала, "") + " " + ОписаниеМесяцаГода; 
		КонецЕсли;
		
		Если (КонецДня(ДатаОкончания) = КонецМесяца(ДатаОкончания)) Тогда
			ВтораяПоловинаДат = ОписаниеМесяца2 ;
		Иначе
			ВтораяПоловинаДат = ?(СДатами, "" + ЧислоОкончания, "") + " " + ОписаниеМесяца2;
		КонецЕсли;
		
		Возврат Перваяполовинадат + "-" + ВтораяПоловинаДат;
		
	Иначе
		
		Если (НачалоДня(ДатаНачала) = НачалоМесяца(ДатаНачала)) И (КонецДня(ДатаОкончания) = КонецМесяца(ДатаОкончания)) Тогда
			Возврат ОписаниеМесяцаГода;
		ИначеЕсли ЧислоНачала = ЧислоОкончания Тогда
			Возврат ?(СДатами, "" + ЧислоНачала, "") + " " + ОписаниеМесяцаГода;
		Иначе
			Возврат ?(СДатами ,"" + ЧислоНачала + "-" + ЧислоОкончания, "") + " " + ОписаниеМесяцаГода;
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции 

#КонецЕсли