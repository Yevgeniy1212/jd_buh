#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

#Область УправлениеДоступом

// Процедура ЗаполнитьНаборыЗначенийДоступа по свойствам объекта заполняет наборы значений доступа
// в таблице с полями:
//    НомерНабора     - Число                                     (необязательно, если набор один),
//    ВидДоступа      - ПланВидовХарактеристикСсылка.ВидыДоступа, (обязательно),
//    ЗначениеДоступа - Неопределено, СправочникСсылка или др.    (обязательно),
//    Чтение          - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Добавление      - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Изменение       - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Удаление        - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//
//  Вызывается из процедуры УправлениеДоступомСлужебный.ЗаписатьНаборыЗначенийДоступа(),
// если объект зарегистрирован в "ПодпискаНаСобытие.ЗаписатьНаборыЗначенийДоступа" и
// из таких же процедур объектов, у которых наборы значений доступа зависят от наборов этого
// объекта (в этом случае объект зарегистрирован в "ПодпискаНаСобытие.ЗаписатьЗависимыеНаборыЗначенийДоступа").
//
// Параметры:
//  Таблица      - ТабличнаяЧасть,
//                 РегистрСведенийНаборЗаписей.НаборыЗначенийДоступа,
//                 ТаблицаЗначений, возвращаемая УправлениеДоступом.ТаблицаНаборыЗначенийДоступа().
//
Процедура ЗаполнитьНаборыЗначенийДоступа(Таблица) Экспорт
	
	ОбщегоНазначенияБК.ЗаполнитьНаборыПоОрганизацииСтурктурномуПодразделению(ЭтотОбъект, Таблица, "Организация", "СтруктурноеПодразделениеОтправитель");
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	
	Если ДанныеЗаполнения <> Неопределено Тогда
		Если ТипДанныхЗаполнения <> Тип("Структура") 
			И Метаданные().ВводитсяНаОсновании.Содержит(ДанныеЗаполнения.Метаданные()) Тогда
			Документы.ПлатежноеПоручениеИсходящее.ЗаполнитьПоДокументуОснованию(ЭтотОбъект, ДанныеЗаполнения);
			УправлениеДенежнымиСредствамиСервер.ЗаполнитьРеквизитыРасчетногоДокумента(ЭтотОбъект, РасшифровкаПлатежа);
			Возврат;
		ИначеЕсли ТипДанныхЗаполнения = Тип("Структура") И ДанныеЗаполнения.Свойство("ВводИзРабочегоМеста") Тогда // при вводе из рабочего места РегистрацияНДСЗаНерезидента передается структура, но заполнение делается на основании
			Документы.ПлатежноеПоручениеИсходящее.ЗаполнитьПоДокументуОснованию(ЭтотОбъект, ДанныеЗаполнения);
			УправлениеДенежнымиСредствамиСервер.ЗаполнитьРеквизитыРасчетногоДокумента(ЭтотОбъект, РасшифровкаПлатежа);
		ИначеЕсли ТипДанныхЗаполнения = Тип("Структура") Тогда // при вводе из календаря бухгалтера передается структура
			Если ДанныеЗаполнения.Свойство("Автор") Тогда
				ДанныеЗаполнения.Удалить("Автор");
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
		КонецЕсли;
	КонецЕсли;
	
	УправлениеДенежнымиСредствамиСервер.ЗаполнитьРеквизитыРасчетногоДокумента(ЭтотОбъект, РасшифровкаПлатежа);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	ПользовательУправляетСчетамиУчета = СчетаУчетаВДокументахВызовСервераПовтИсп.ПользовательУправляетСчетамиУчета();
	
	ЕстьРасчетыПоКредитам = УправлениеДенежнымиСредствамиСервер.ЕстьРасчетыПоКредитам(ВидОперации);
	ЕстьРасшифровкаПлатежа = Документы.ПлатежноеПоручениеИсходящее.ЕстьРасшифровкаПлатежа(ВидОперации);

	ОрганизацияПлательщикНалогаНаПрибыль 			= УчетнаяПолитикаСервер.ПлательщикНалогаНаПрибыль(Организация, Дата);
	ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль 	= ОрганизацияПлательщикНалогаНаПрибыль И ПроцедурыНалоговогоУчета.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль(Организация, Дата);
	ВестиУчетПоДоговорам                            = ПолучитьФункциональнуюОпцию("ВестиУчетПоДоговорам");
    
	НеобходимостьОтраженияВНУ 						= ОрганизацияПлательщикНалогаНаПрибыль И УчитыватьКПН И (ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль ИЛИ ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ);
	
	
	МассивНепроверяемыхРеквизитов = Новый Массив();
		
	Если НЕ ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеЗаработнойПлаты Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ПеречислениеЗаработнойПлаты");	
	КонецЕсли;
	
	Если НЕ ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеПенсионныхВзносов Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ПеречислениеПенсионныхВзносов");	
	КонецЕсли;
	
	Если НЕ ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеСоциальныхОтчислений Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ПеречислениеСоциальныхОтчислений");	
	КонецЕсли;
	
	Если НЕ ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеЕдиногоПлатежа Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ПеречислениеЕдиныхПлатежей");	
	КонецЕсли;
	
	Если НЕ ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеПоИсполнительнымЛистам Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ПеречислениеПоИсполнительнымЛистам");	
	КонецЕсли;
	
	Если НЕ ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеНДССИзмененнымСрокомУплаты Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ПеречислениеНДССИзмененнымСрокомУплаты");
    ИначеЕсли НЕ ВестиУчетПоДоговорам Тогда
        МассивНепроверяемыхРеквизитов.Добавить("ПеречислениеНДССИзмененнымСрокомУплаты.Договор");
	КонецЕсли;
	
	Если НЕ ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеДенежныхСредствПодотчетнику Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ПеречислениеВПодотчет");	
	КонецЕсли;
	
	Если НЕ ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеНалога Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ВидНалога");	
	КонецЕсли;
	
	Если НЕ ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеЕдиногоПлатежа Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ПеречислениеЕдиныхПлатежей");	
	КонецЕсли; 
	
	Если НЕ ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеПрочихВыплат Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ПеречислениеПрочихВыплат");	
	КонецЕсли;
	
	Если НЕ ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеПрочихДоходов Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ПеречислениеПрочихДоходов");	
	КонецЕсли;
	
	Если ЕстьРасшифровкаПлатежа Тогда 		
		Если РасшифровкаПлатежа.Итог("СуммаПлатежа") <> СуммаДокумента Тогда
			ТекстСообщения = НСтр("ru = 'Не совпадают сумма документа и ее расшифровка'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "СуммаДокумента", "Объект", Отказ);
		КонецЕсли;                    
	КонецЕсли;

	Если НЕ (ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПрочееСписаниеБезналичныхДенежныхСредств 
		ИЛИ ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеНалога 
		ИЛИ ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет) Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("СуммаДокумента");		
		Если СуммаДокумента + СуммаКомиссии = 0 Тогда
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не указана ни одна из сумм (сумма документа, сумма комиссии)! Для проведения документа одна из сумм должна быть заполнена'"),,,, Отказ);
		КонецЕсли;  		
	КонецЕсли;
	
	Если НЕ ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет Тогда
		МассивНепроверяемыхРеквизитов.Добавить("СчетКонтрагента");	
	КонецЕсли;
	
	Если НЕ ВключатьКомиссиюБанка И СуммаКомиссии = 0 
		ИЛИ (ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеНалога
		 ИЛИ ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПрочееСписаниеБезналичныхДенежныхСредств  
		 ИЛИ ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет
		 ИЛИ ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеНДССИзмененнымСрокомУплаты) Тогда
		МассивНепроверяемыхРеквизитов.Добавить("СчетУчетаРасчетовСКонтрагентомБУ");
		МассивНепроверяемыхРеквизитов.Добавить("СчетУчетаРасчетовСКонтрагентомНУ");
	КонецЕсли;

	Если НЕ Документы.ПлатежноеПоручениеИсходящее.ЕстьРасшифровкаПлатежа(ВидОперации) Тогда
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа");
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.ДоговорКонтрагента");
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентомБУ");
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентомНУ");
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.СуммаПлатежа");
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.КурсВзаиморасчетов");
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.СуммаВзаиморасчетов");
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.КратностьВзаиморасчетов");
    ИначеЕсли НЕ ВестиУчетПоДоговорам Тогда
        МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.ДоговорКонтрагента");
	КонецЕсли;
		
	Если НЕ ЕстьРасшифровкаПлатежа
		И НЕ ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеПенсионныхВзносов 
		И НЕ ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеСоциальныхОтчислений
		И НЕ ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеЕдиногоПлатежа Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Контрагент");
	КонецЕсли;

	Если НЕ НеобходимостьОтраженияВНУ Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("ВидУчетаНУ");
		МассивНепроверяемыхРеквизитов.Добавить("СчетУчетаРасчетовСКонтрагентомНУ");
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентомНУ");
		
	ИначеЕсли НЕ ЕстьРасчетыПоКредитам Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентомНУ");
		
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);

	ВалютаРегламентированногоУчета = ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	Если ЕстьРасшифровкаПлатежа Тогда
		
		Реквизиты = Новый Структура;
		Реквизиты.Вставить("ВалютаДокумента", ВалютаДокумента);
		Реквизиты.Вставить("ВалютаРегламентированногоУчета", ВалютаРегламентированногоУчета);
		Реквизиты.Вставить("Регистратор", Ссылка);
		
		Для Каждого СтрокаТабличнойЧасти Из РасшифровкаПлатежа Цикл
			
			Реквизиты.Вставить("ДоговорКонтрагента",СтрокаТабличнойЧасти.ДоговорКонтрагента); 
			Реквизиты.Вставить("ВалютаВзаиморасчетов",СтрокаТабличнойЧасти.ДоговорКонтрагента.ВалютаВзаиморасчетов);
			
			ДополнениеКСообщению = НСтр("ru = 'Строка %1 - '");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ДополнениеКСообщению, СтрокаТабличнойЧасти.НомерСтроки);
			УправлениеВзаиморасчетамиСервер.ВозможноПроведениеВ_БУ_НУ(Реквизиты, Отказ, ДополнениеКСообщению);
			
		КонецЦикла;
		
	КонецЕсли;	

	Если ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеЗаработнойПлаты Тогда
		
		Если ВалютаДокумента <> ВалютаРегламентированногоУчета Тогда
			
			ТекстСообщения = НСтр("ru = 'Выплата заработной платы может осуществляться только в %1'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ВалютаРегламентированногоУчета);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект,,, Отказ);
			
		КонецЕсли;
		
		// Проверка на то, чтобы в закрываемых ведомостях не было невыплаченных значений.
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ПеречислениеЗаработнойПлаты", ПеречислениеЗаработнойПлаты.Выгрузить());
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		Запрос.Текст = "ВЫБРАТЬ *
		|ПОМЕСТИТЬ ВТ_ПеречислениеЗаработнойПлаты
		|ИЗ &ПеречислениеЗаработнойПлаты КАК ПеречислениеЗаработнойПлаты
		|
		|;
		|ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
		|	ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка КАК Ведомость,
		|	ВЫБОР  
		|		КОГДА НЕ(РанееВыплаченныеСуммы.Ведомость ЕСТЬ NULL)
		|			ТОГДА РанееВыплаченныеСуммы.Регистратор
		|		ИНАЧЕ
		|			NULL
		|	КОНЕЦ КАК КонфликтныйДокумент
		|	
		|ИЗ
		|	ВТ_ПеречислениеЗаработнойПлаты КАК ПлатежноеПоручениеИсходящееПеречислениеЗаработнойПлаты
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацииЗарплата
		|		ПО ПлатежноеПоручениеИсходящееПеречислениеЗаработнойПлаты.Ведомость = ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям КАК РанееВыплаченныеСуммы
		|		ПО ЗарплатаКВыплатеОрганизацииЗарплата.ФизЛицо = РанееВыплаченныеСуммы.ФизЛицо
		|			И ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка = РанееВыплаченныеСуммы.Ведомость
		|			И РанееВыплаченныеСуммы.Регистратор <> &Ссылка
		|			И РанееВыплаченныеСуммы.Активность";
		
		РезультатЗапроса = Запрос.Выполнить().Выбрать();

		Пока РезультатЗапроса.Следующий() Цикл
			
			Если ЗначениеЗаполнено(РезультатЗапроса.КонфликтныйДокумент) Тогда
				ТекстСообщения = НСтр("ru = '%1: ведомость уже включена в %2'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, РезультатЗапроса.Ведомость, РезультатЗапроса.КонфликтныйДокумент);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, РезультатЗапроса.КонфликтныйДокумент,,, Отказ);
			КонецЕсли;
			
		КонецЦикла;
		
		//Проверка на соответствие суммы по ведомостям сумме документа
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ *
		|ПОМЕСТИТЬ ВТ_ПеречислениеЗаработнойПлаты
		|ИЗ &ПеречислениеЗаработнойПлаты КАК ПеречислениеЗаработнойПлаты
		|
		|;
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЕСТЬNULL(СУММА(ЗарплатаКВыплате.Сумма+ЗарплатаКВыплате.ДепонированнаяСумма), 0) КАК СуммаВыплачено
		|ИЗ
		|	ВТ_ПеречислениеЗаработнойПлаты КАК ПлатежноеПоручениеИсходящееПеречислениеЗаработнойПлаты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплате
		|		ПО ПлатежноеПоручениеИсходящееПеречислениеЗаработнойПлаты.Ведомость = ЗарплатаКВыплате.Ссылка";
		
		Запрос.УстановитьПараметр("ПеречислениеЗаработнойПлаты", ПеречислениеЗаработнойПлаты.Выгрузить());
		
		Результат = Запрос.Выполнить().Выбрать();
		
		НеСоответствиеСумм = Ложь;
		
		Если НЕ Результат.Следующий() Тогда
			
			НеСоответствиеСумм = Истина;
			
		ИначеЕсли Результат.СуммаВыплачено <> СуммаДокумента Тогда
				  
			НеСоответствиеСумм = Истина;
			
		КонецЕсли;
		
		Если НеСоответствиеСумм Тогда
			
			ТекстСообщения = НСтр("ru = 'Не совпадает сумма документа и суммы по ведомостям на выплату заработной платы %1'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ?(ВключатьКомиссиюБанка, НСтр("ru = '(с учетом комиссиии банка)'"), """"));
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект,,, Отказ);
			
		КонецЕсли;
		
		Если ВключатьКомиссиюБанка И НЕ СуммаКомиссии = 0 Тогда
			
			Если НЕ ЗначениеЗаполнено(СчетУчетаРасчетовСКонтрагентомБУ) И ПользовательУправляетСчетамиУчета Тогда

				ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не указан счет затрат для отнесения комиссии банка'"), ЭтотОбъект,,, Отказ);
				
			КонецЕсли;
				
		КонецЕсли;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеПрочихДоходов Тогда
		
		Если ВалютаДокумента <> ВалютаРегламентированногоУчета Тогда
			
			ТекстСообщения = НСтр("ru = 'Выплата прочего дохода может осуществляться только в %1'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ВалютаРегламентированногоУчета);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект,,, Отказ);
			
		КонецЕсли;
		
		// Проверка на то, чтобы в закрываемых ведомостях не было невыплаченных значений.
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ПеречислениеПрочегоДохода", ПеречислениеПрочихДоходов.Выгрузить());
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		Запрос.Текст = "ВЫБРАТЬ *
		|ПОМЕСТИТЬ ВТ_ПеречислениеПрочегоДохода
		|ИЗ &ПеречислениеПрочегоДохода КАК ПеречислениеПрочегоДохода
		|
		|;
		|ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
		|	ПлатежноеПоручениеИсходящееВедомости.Документ КАК Ведомость,
		|	ВЫБОР  
		|		КОГДА НЕ(ПлатежноеПоручениеИсходящееВедомости.Документ ЕСТЬ NULL)
		|			ТОГДА ПлатежноеПоручениеИсходящееВедомости.Ссылка
		|		ИНАЧЕ
		|			NULL
		|	КОНЕЦ КАК КонфликтныйДокумент
		|	
		|ИЗ
		|	ВТ_ПеречислениеПрочегоДохода КАК ПлатежноеПоручениеИсходящееПеречислениеПрочихДоходов
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПлатежноеПоручениеИсходящее.ПеречислениеПрочихДоходов КАК ПлатежноеПоручениеИсходящееВедомости
		|		ПО НЕ ПлатежноеПоручениеИсходящееВедомости.Ссылка = &Ссылка
		|			И ПлатежноеПоручениеИсходящееВедомости.Документ = ПлатежноеПоручениеИсходящееПеречислениеПрочихДоходов.Документ
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПлатежноеПоручениеИсходящее КАК ПлатежноеПоручениеИсходящее
		|		ПО ПлатежноеПоручениеИсходящееВедомости.Ссылка = ПлатежноеПоручениеИсходящее.Ссылка
		|			И ПлатежноеПоручениеИсходящее.Проведен
		|";
		
		РезультатЗапроса = Запрос.Выполнить().Выбрать();

		Пока РезультатЗапроса.Следующий() Цикл
			
			Если ЗначениеЗаполнено(РезультатЗапроса.КонфликтныйДокумент) Тогда
				ТекстСообщения = НСтр("ru = '%1: ведомость уже включена в %2'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, РезультатЗапроса.Ведомость, РезультатЗапроса.КонфликтныйДокумент);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, РезультатЗапроса.КонфликтныйДокумент,,, Отказ);
			КонецЕсли;
			
		КонецЦикла;
		
		//Проверка на соответствие суммы по ведомостям сумме документа
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ *
		|ПОМЕСТИТЬ ВТ_ПеречислениеПрочегоДохода
		|ИЗ &ПеречислениеПрочегоДохода КАК ПеречислениеПрочегоДохода
		|
		|;
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЕСТЬNULL(СУММА(ВедомостьПрочихДоходов.СуммаКВыплате), 0) КАК СуммаВыплачено
		|ИЗ
		|	ВТ_ПеречислениеПрочегоДохода КАК ПлатежноеПоручениеИсходящееПеречислениеПрочегоДохода
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВедомостьПрочихДоходов.Выплаты КАК ВедомостьПрочихДоходов
		|		ПО ПлатежноеПоручениеИсходящееПеречислениеПрочегоДохода.Документ = ВедомостьПрочихДоходов.Ссылка";
		
		Запрос.УстановитьПараметр("ПеречислениеПрочегоДохода", ПеречислениеПрочихДоходов.Выгрузить());
		
		Результат = Запрос.Выполнить().Выбрать();
		
		НеСоответствиеСумм = Ложь;
		
		Если НЕ Результат.Следующий() Тогда
			
			НеСоответствиеСумм = Истина;
			
		ИначеЕсли Результат.СуммаВыплачено <> СуммаДокумента Тогда
			
			НеСоответствиеСумм = Истина;
			
		КонецЕсли;
		
		Если НеСоответствиеСумм Тогда
			
			ТекстСообщения = НСтр("ru = 'Не совпадает сумма документа и суммы по ведомостям на выплату прочего дохода %1'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ?(ВключатьКомиссиюБанка, НСтр("ru = '(с учетом комиссиии банка)'"), ""));
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект,,, Отказ);
			
		КонецЕсли;
		
		Если ВключатьКомиссиюБанка И НЕ СуммаКомиссии = 0 Тогда
			
			Если НЕ ЗначениеЗаполнено(СчетУчетаРасчетовСКонтрагентомБУ) И ПользовательУправляетСчетамиУчета Тогда

				ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не указан счет затрат для отнесения комиссии банка'"), ЭтотОбъект,,, Отказ);
				
			КонецЕсли;
				
		КонецЕсли;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеПенсионныхВзносов
		  ИЛИ ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеСоциальныхОтчислений
		  ИЛИ ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеЕдиногоПлатежа
		  ИЛИ ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеПоИсполнительнымЛистам
		  ИЛИ ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеПрочихВыплат Тогда
		 
		Если ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеПенсионныхВзносов Тогда
			  
			// Проверка на то, что документы, введенные в табличную часть не указаны ни в одном другом проведенном документе.
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Ссылка", Ссылка);
			Запрос.УстановитьПараметр("ПеречислениеПенсионныхВзносов", ПеречислениеПенсионныхВзносов.Выгрузить());
			Запрос.Текст = "ВЫБРАТЬ *
						   |ПОМЕСТИТЬ ВТ_ПеречислениеПенсионныхВзносов
						   |ИЗ &ПеречислениеПенсионныхВзносов КАК ПеречислениеПенсионныхВзносов
						   |
						   |;
						   |ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
			               |	ПлатежноеПоручениеИсходящееПеречислениеПенсионныхВзносов.Документ КАК Ведомость,
			               |	ПлатежноеПоручениеИсходящееПеречислениеПенсионныхВзносов.Ссылка КАК Регистратор
			               |ПОМЕСТИТЬ ВТ_РанееИспользованныеВедомости
			               |ИЗ
			               |	РегистрНакопления.ОПВРасчетыСФондами КАК ОПВРасчетыСФондами
			               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПлатежноеПоручениеИсходящее.ПеречислениеПенсионныхВзносов КАК ПлатежноеПоручениеИсходящееПеречислениеПенсионныхВзносов
			               |		ПО ОПВРасчетыСФондами.Регистратор = ПлатежноеПоручениеИсходящееПеречислениеПенсионныхВзносов.Ссылка
			               |        	И ПлатежноеПоручениеИсходящееПеречислениеПенсионныхВзносов.Документ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийОПВПеречислениеВФонды.ПеречислениеОбязательныхПенсионныхВзносов)
						   |			И ПлатежноеПоручениеИсходящееПеречислениеПенсионныхВзносов.Ссылка <> &Ссылка
						   |ГДЕ 
						   |	ОПВРасчетыСФондами.Активность
						   |
			               |ОБЪЕДИНИТЬ ВСЕ
			               |
			               |ВЫБРАТЬ
			               |	АвансовыйОтчетПеречислениеПенсионныхВзносов.Документ,
			               |	АвансовыйОтчетПеречислениеПенсионныхВзносов.Ссылка
			               |ИЗ
			               |	РегистрНакопления.ОПВРасчетыСФондами КАК ОПВРасчетыСФондами
			               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.АвансовыйОтчет.ПеречислениеПенсионныхВзносов КАК АвансовыйОтчетПеречислениеПенсионныхВзносов
			               |		ПО ОПВРасчетыСФондами.Регистратор = АвансовыйОтчетПеречислениеПенсионныхВзносов.Ссылка
						   |			И АвансовыйОтчетПеречислениеПенсионныхВзносов.Документ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийОПВПеречислениеВФонды.ПеречислениеОбязательныхПенсионныхВзносов)
						   |ГДЕ
						   |	ОПВРасчетыСФондами.Активность
						   |
			               |ОБЪЕДИНИТЬ ВСЕ
			               |// ОППВ
			               |ВЫБРАТЬ
			               |	ПлатежноеПоручениеИсходящееПеречислениеПенсионныхВзносов.Документ,
			               |	ПлатежноеПоручениеИсходящееПеречислениеПенсионныхВзносов.Ссылка
			               |ИЗ
			               |	РегистрНакопления.ОППВРасчетыСФондами КАК ОППВРасчетыСФондами
			               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПлатежноеПоручениеИсходящее.ПеречислениеПенсионныхВзносов КАК ПлатежноеПоручениеИсходящееПеречислениеПенсионныхВзносов
			               |		ПО ОППВРасчетыСФондами.Регистратор = ПлатежноеПоручениеИсходящееПеречислениеПенсионныхВзносов.Ссылка
						   |			И ПлатежноеПоручениеИсходящееПеречислениеПенсионныхВзносов.Документ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийОПВПеречислениеВФонды.ПеречислениеОбязательныхПрофессиональныхПенсионныхВзносов)
						   |			И ПлатежноеПоручениеИсходящееПеречислениеПенсионныхВзносов.Ссылка <> &Ссылка
						   |ГДЕ
						   |	ОППВРасчетыСФондами.Активность
			               |
						   |ОБЪЕДИНИТЬ ВСЕ
			               |
			               |ВЫБРАТЬ
			               |	АвансовыйОтчетПеречислениеПенсионныхВзносов.Документ,
			               |	АвансовыйОтчетПеречислениеПенсионныхВзносов.Ссылка
			               |ИЗ
			               |	РегистрНакопления.ОППВРасчетыСФондами КАК ОППВРасчетыСФондами
			               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.АвансовыйОтчет.ПеречислениеПенсионныхВзносов КАК АвансовыйОтчетПеречислениеПенсионныхВзносов
			               |		ПО ОППВРасчетыСФондами.Регистратор = АвансовыйОтчетПеречислениеПенсионныхВзносов.Ссылка
						   |			И АвансовыйОтчетПеречислениеПенсионныхВзносов.Документ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийОПВПеречислениеВФонды.ПеречислениеОбязательныхПрофессиональныхПенсионныхВзносов)
						   |ГДЕ
						   |	ОППВРасчетыСФондами.Активность 
						   |
			               |ОБЪЕДИНИТЬ ВСЕ
			               |// ОПВР
			               |ВЫБРАТЬ
			               |	ПлатежноеПоручениеИсходящееПеречислениеПенсионныхВзносов.Документ,
			               |	ПлатежноеПоручениеИсходящееПеречислениеПенсионныхВзносов.Ссылка
			               |ИЗ
			               |	РегистрНакопления.ОПВРРасчетыСФондами КАК ОПВРРасчетыСФондами
			               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПлатежноеПоручениеИсходящее.ПеречислениеПенсионныхВзносов КАК ПлатежноеПоручениеИсходящееПеречислениеПенсионныхВзносов
			               |		ПО ОПВРРасчетыСФондами.Регистратор = ПлатежноеПоручениеИсходящееПеречислениеПенсионныхВзносов.Ссылка
						   |			И ПлатежноеПоручениеИсходящееПеречислениеПенсионныхВзносов.Документ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийОПВПеречислениеВФонды.ПеречислениеОбязательныхПенсионныхВзносовРаботодателя)
						   |			И ПлатежноеПоручениеИсходящееПеречислениеПенсионныхВзносов.Ссылка <> &Ссылка
						   |ГДЕ
						   |	ОПВРРасчетыСФондами.Активность
			               |
						   |ОБЪЕДИНИТЬ ВСЕ
			               |
			               |ВЫБРАТЬ
			               |	АвансовыйОтчетПеречислениеПенсионныхВзносов.Документ,
			               |	АвансовыйОтчетПеречислениеПенсионныхВзносов.Ссылка
			               |ИЗ
			               |	РегистрНакопления.ОПВРРасчетыСФондами КАК ОПВРРасчетыСФондами
			               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.АвансовыйОтчет.ПеречислениеПенсионныхВзносов КАК АвансовыйОтчетПеречислениеПенсионныхВзносов
			               |		ПО ОПВРРасчетыСФондами.Регистратор = АвансовыйОтчетПеречислениеПенсионныхВзносов.Ссылка
						   |			И АвансовыйОтчетПеречислениеПенсионныхВзносов.Документ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийОПВПеречислениеВФонды.ПеречислениеОбязательныхПенсионныхВзносовРаботодателя)
						   |ГДЕ
						   |	ОПВРРасчетыСФондами.Активность
			               |ИНДЕКСИРОВАТЬ ПО
			               |	Ведомость
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			               |	ПлатежноеПоручениеИсходящееПеречислениеПенсионныхВзносов.Документ КАК Ведомость,
			               |	РанееИспользованныеВедомости.Регистратор КАК КонфликтныйДокумент
			               |ИЗ
			               |	ВТ_ПеречислениеПенсионныхВзносов КАК ПлатежноеПоручениеИсходящееПеречислениеПенсионныхВзносов
			               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РанееИспользованныеВедомости КАК РанееИспользованныеВедомости
			               |		ПО ПлатежноеПоручениеИсходящееПеречислениеПенсионныхВзносов.Документ = РанееИспользованныеВедомости.Ведомость";
						   
			РезультатЗапроса = Запрос.Выполнить().Выбрать();

			Пока РезультатЗапроса.Следующий() Цикл
				
				Если ЗначениеЗаполнено(РезультатЗапроса.КонфликтныйДокумент) Тогда
					
					ТекстСообщения = НСтр("ru = '%1: документ уже включен в %2'");
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, РезультатЗапроса.Ведомость, РезультатЗапроса.КонфликтныйДокумент);
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, РезультатЗапроса.КонфликтныйДокумент,,, Отказ);
					
				КонецЕсли;
				
			КонецЦикла;
			
			// Проверка на одинаковый вид операции в ведомости
			Запрос.Текст = "ВЫБРАТЬ *
						   |ПОМЕСТИТЬ ВТ_ПеречислениеПенсионныхВзносов
						   |ИЗ &ПеречислениеПенсионныхВзносов КАК ПеречислениеПенсионныхВзносов
						   |
						   |;
						   |ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			               |	ПеречислениеПенсионныхВзносов.Документ.ВидОперации КАК ВидОперации
			               |ИЗ
			               |	ВТ_ПеречислениеПенсионныхВзносов КАК ПеречислениеПенсионныхВзносов";
			
			РезультатЗапроса = Запрос.Выполнить().Выбрать();
			Если РезультатЗапроса.Количество() > 1 Тогда

				ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'В табличной части ""Списки на перечисление пенсионных взносов"" указаны ведомости с различными видами операций:
													|нельзя выполнять платеж одним документом по разным видам пенсионных взносов (ОПВ и ОППВ, ОПВ и ОПВР и т.д.)'"), ЭтотОбъект,,, Отказ);
				
			КонецЕсли;
			
			ИмяСписочногоДокумента = "ОПВПеречислениеВФонды";
			ИмяТаблЧастиСписочногоДокумента = "ПенсионныеВзносы";
			ИмяПоля = "Сумма";
			ИмяТаблЧастиППИ = "ПеречислениеПенсионныхВзносов";			
			ТекстСообщенияВалютаПеречисления = НСтр("ru = 'Перечисление пенсионных взносов может осуществляться только в %1'");
			
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеСоциальныхОтчислений Тогда
			
			// Проверка на то, что документы, введенные в табличную часть не указаны ни в одном другом проведенном документе
			Запрос = Новый Запрос; 
			Запрос.УстановитьПараметр("Ссылка", Ссылка);
			Запрос.УстановитьПараметр("ПеречислениеСоциальныхОтчислений", ПеречислениеСоциальныхОтчислений.Выгрузить());
			Запрос.Текст = "ВЫБРАТЬ *
						   |ПОМЕСТИТЬ ВТ_ПеречислениеСоциальныхОтчислений
						   |ИЗ &ПеречислениеСоциальныхОтчислений КАК ПеречислениеСоциальныхОтчислений
						   |
						   |;
						   |ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
			               |	ПлатежноеПоручениеИсходящееПеречислениеСоциальныхОтчислений.Документ КАК Ведомость,
			               |	ПлатежноеПоручениеИсходящееПеречислениеСоциальныхОтчислений.Ссылка КАК Регистратор
			               |ПОМЕСТИТЬ ВТ_РанееИспользованныеВедомости
			               |ИЗ
			               |	РегистрНакопления.СОРасчетыСФондами КАК СОРасчетыСФондами
			               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПлатежноеПоручениеИсходящее.ПеречислениеСоциальныхОтчислений КАК ПлатежноеПоручениеИсходящееПеречислениеСоциальныхОтчислений
			               |		ПО СОРасчетыСФондами.Регистратор = ПлатежноеПоручениеИсходящееПеречислениеСоциальныхОтчислений.Ссылка
						   |			И ПлатежноеПоручениеИсходящееПеречислениеСоциальныхОтчислений.Ссылка <> &Ссылка
			               |			И (ПлатежноеПоручениеИсходящееПеречислениеСоциальныхОтчислений.Документ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСОПеречислениеВФонды.ПеречислениеОбязательныхСоциальныхОтчислений))
						   |ГДЕ
						   |	СОРасчетыСФондами.Активность
			               |
			               |ОБЪЕДИНИТЬ ВСЕ
			               |
			               |ВЫБРАТЬ
			               |	АвансовыйОтчетПеречислениеСоциальныхОтчислений.Документ,
			               |	АвансовыйОтчетПеречислениеСоциальныхОтчислений.Ссылка
			               |ИЗ
			               |	РегистрНакопления.СОРасчетыСФондами КАК СОРасчетыСФондами
			               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.АвансовыйОтчет.ПеречислениеСоциальныхОтчислений КАК АвансовыйОтчетПеречислениеСоциальныхОтчислений
			               |		ПО СОРасчетыСФондами.Регистратор = АвансовыйОтчетПеречислениеСоциальныхОтчислений.Ссылка
			               |			И (АвансовыйОтчетПеречислениеСоциальныхОтчислений.Документ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСОПеречислениеВФонды.ПеречислениеОбязательныхСоциальныхОтчислений))
						   |ГДЕ
						   |	СОРасчетыСФондами.Активность
			               |
			               |ОБЪЕДИНИТЬ ВСЕ
			               |
						   |ВЫБРАТЬ РАЗЛИЧНЫЕ
			               |	ПлатежноеПоручениеИсходящееПеречислениеСоциальныхОтчислений.Документ КАК Ведомость,
			               |	ПлатежноеПоручениеИсходящееПеречислениеСоциальныхОтчислений.Ссылка КАК Регистратор
			               |ИЗ
			               |	РегистрНакопления.ООСМСРасчетыСФондами КАК ООСМСРасчетыСФондами
			               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПлатежноеПоручениеИсходящее.ПеречислениеСоциальныхОтчислений КАК ПлатежноеПоручениеИсходящееПеречислениеСоциальныхОтчислений
			               |		ПО ООСМСРасчетыСФондами.Регистратор = ПлатежноеПоручениеИсходящееПеречислениеСоциальныхОтчислений.Ссылка
						   |			И ПлатежноеПоручениеИсходящееПеречислениеСоциальныхОтчислений.Ссылка <> &Ссылка
			               |			И (ПлатежноеПоручениеИсходящееПеречислениеСоциальныхОтчислений.Документ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСОПеречислениеВФонды.ПеречислениеОтчисленийОСМС))
						   |ГДЕ
						   |	ООСМСРасчетыСФондами.Активность
			               |
			               |ОБЪЕДИНИТЬ ВСЕ
			               |
			               |ВЫБРАТЬ
			               |	АвансовыйОтчетПеречислениеСоциальныхОтчислений.Документ,
			               |	АвансовыйОтчетПеречислениеСоциальныхОтчислений.Ссылка
			               |ИЗ
			               |	РегистрНакопления.ООСМСРасчетыСФондами КАК ООСМСРасчетыСФондами
			               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.АвансовыйОтчет.ПеречислениеСоциальныхОтчислений КАК АвансовыйОтчетПеречислениеСоциальныхОтчислений
			               |		ПО ООСМСРасчетыСФондами.Регистратор = АвансовыйОтчетПеречислениеСоциальныхОтчислений.Ссылка
			               |			И (АвансовыйОтчетПеречислениеСоциальныхОтчислений.Документ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСОПеречислениеВФонды.ПеречислениеОтчисленийОСМС))
						   |ГДЕ
						   |	ООСМСРасчетыСФондами.Активность
			               |
			               |ОБЪЕДИНИТЬ ВСЕ
			               |
						   |ВЫБРАТЬ РАЗЛИЧНЫЕ
			               |	ПлатежноеПоручениеИсходящееПеречислениеСоциальныхОтчислений.Документ КАК Ведомость,
			               |	ПлатежноеПоручениеИсходящееПеречислениеСоциальныхОтчислений.Ссылка КАК Регистратор
			               |ИЗ
			               |	РегистрНакопления.ВОСМСРасчетыСФондами КАК ВОСМСРасчетыСФондами
			               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПлатежноеПоручениеИсходящее.ПеречислениеСоциальныхОтчислений КАК ПлатежноеПоручениеИсходящееПеречислениеСоциальныхОтчислений
			               |		ПО ВОСМСРасчетыСФондами.Регистратор = ПлатежноеПоручениеИсходящееПеречислениеСоциальныхОтчислений.Ссылка
						   |			И ПлатежноеПоручениеИсходящееПеречислениеСоциальныхОтчислений.Ссылка <> &Ссылка
			               |			И (ПлатежноеПоручениеИсходящееПеречислениеСоциальныхОтчислений.Документ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСОПеречислениеВФонды.ПеречислениеВзносовОСМС))
						   |ГДЕ
						   |	ВОСМСРасчетыСФондами.Активность
			               |
			               |ОБЪЕДИНИТЬ ВСЕ
			               |
			               |ВЫБРАТЬ
			               |	АвансовыйОтчетПеречислениеСоциальныхОтчислений.Документ,
			               |	АвансовыйОтчетПеречислениеСоциальныхОтчислений.Ссылка
			               |ИЗ
			               |	РегистрНакопления.ВОСМСРасчетыСФондами КАК ВОСМСРасчетыСФондами
			               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.АвансовыйОтчет.ПеречислениеСоциальныхОтчислений КАК АвансовыйОтчетПеречислениеСоциальныхОтчислений
			               |		ПО ВОСМСРасчетыСФондами.Регистратор = АвансовыйОтчетПеречислениеСоциальныхОтчислений.Ссылка
			               |			И (АвансовыйОтчетПеречислениеСоциальныхОтчислений.Документ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСОПеречислениеВФонды.ПеречислениеВзносовОСМС))
						   |ГДЕ
						   |	ВОСМСРасчетыСФондами.Активность
			               |
			               |ИНДЕКСИРОВАТЬ ПО
			               |	Ведомость
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			               |	ПлатежноеПоручениеИсходящееПеречислениеСоциальныхОтчислений.Документ КАК Ведомость,
			               |	РанееИспользованныеВедомости.Регистратор КАК КонфликтныйДокумент
			               |ИЗ
			               |	ВТ_ПеречислениеСоциальныхОтчислений КАК ПлатежноеПоручениеИсходящееПеречислениеСоциальныхОтчислений
			               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РанееИспользованныеВедомости КАК РанееИспользованныеВедомости
			               |		ПО ПлатежноеПоручениеИсходящееПеречислениеСоциальныхОтчислений.Документ = РанееИспользованныеВедомости.Ведомость";
			РезультатЗапроса = Запрос.Выполнить().Выбрать();

			Пока РезультатЗапроса.Следующий() Цикл
				Если ЗначениеЗаполнено(РезультатЗапроса.КонфликтныйДокумент) Тогда

					ТекстСообщения = НСтр("ru = '%1: документ уже включен в %2'");
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, РезультатЗапроса.Ведомость, РезультатЗапроса.КонфликтныйДокумент);
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, РезультатЗапроса.КонфликтныйДокумент,,, Отказ);

				КонецЕсли;
			КонецЦикла;
			
			// Проверка на одинаковый вид операции в ведомости
			Запрос.Текст = "ВЫБРАТЬ *
						   |ПОМЕСТИТЬ ВТ_ПеречислениеСоцСтрахования
						   |ИЗ &ПеречислениеСоциальныхОтчислений КАК ПеречислениеСоцСтрахования
						   |
						   |;
						   |ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			               |	ПеречислениеСоцСтрахования.Документ.ВидОперации КАК ВидОперации
			               |ИЗ
			               |	ВТ_ПеречислениеСоцСтрахования КАК ПеречислениеСоцСтрахования";
			
			РезультатЗапроса = Запрос.Выполнить().Выбрать();
			Если РезультатЗапроса.Количество() > 1 Тогда

				ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'В табличной части ""Списки на перечисление социального страхования"" указаны ведомости с различными видами операций:
													|нельзя выполнять платеж одним документом по разным видам социального страхования (СО, ВОСМС и ООСМС)'"), ЭтотОбъект,,, Отказ);
				
			КонецЕсли;
												
			ИмяСписочногоДокумента = "СОПеречислениеВФонды";
			ИмяТаблЧастиСписочногоДокумента = "СоциальныеОтчисления";
			ИмяПоля = "Сумма";
			ИмяТаблЧастиППИ = "ПеречислениеСоциальныхОтчислений";
			ТекстСообщенияВалютаПеречисления = НСтр("ru = 'Перечисление взносов и отчислений соц. страхования может осуществляться только в %1'");
			
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеЕдиногоПлатежа Тогда
			  
			// Проверка на то, что документы, введенные в табличную часть не указаны ни в одном другом проведенном документе.
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Ссылка", Ссылка);
			Запрос.УстановитьПараметр("ПеречислениеЕдиныхПлатежей", ПеречислениеЕдиныхПлатежей.Выгрузить());
			Запрос.Текст = "ВЫБРАТЬ *
						   |ПОМЕСТИТЬ ВТ_ПеречислениеЕдиныхПлатежей
						   |ИЗ &ПеречислениеЕдиныхПлатежей КАК ПеречислениеЕдиныхПлатежей
						   |
						   |;
						   |ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
			               |	ПлатежноеПоручениеИсходящееПеречислениеЕдиногоПлатежа.Документ КАК Ведомость,
			               |	ПлатежноеПоручениеИсходящееПеречислениеЕдиногоПлатежа.Ссылка КАК Регистратор
			               |ПОМЕСТИТЬ ВТ_РанееИспользованныеВедомости
			               |ИЗ
			               |	РегистрНакопления.ЕПРасчетыСФондами КАК ЕПРасчетыСФондами
			               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПлатежноеПоручениеИсходящее.ПеречислениеЕдиныхПлатежей КАК ПлатежноеПоручениеИсходящееПеречислениеЕдиногоПлатежа
			               |		ПО ЕПРасчетыСФондами.Регистратор = ПлатежноеПоручениеИсходящееПеречислениеЕдиногоПлатежа.Ссылка
						   |			И ПлатежноеПоручениеИсходящееПеречислениеЕдиногоПлатежа.Ссылка <> &Ссылка
						   |ГДЕ 
						   |	ЕПРасчетыСФондами.Активность
						   |
						   //|ОБЪЕДИНИТЬ ВСЕ
						   //|
						   //|ВЫБРАТЬ
						   //|	АвансовыйОтчетПеречислениеЕдиногоПлатежа.Документ,
						   //|	АвансовыйОтчетПеречислениеЕдиногоПлатежа.Ссылка
						   //|ИЗ
						   //|	РегистрНакопления.ЕПРасчетыСФондами КАК ЕПРасчетыСФондами
						   //|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.АвансовыйОтчет.ПеречислениеЕдиногоПлатежа КАК АвансовыйОтчетПеречислениеЕдиногоПлатежа
						   //|		ПО ЕПРасчетыСФондами.Регистратор = АвансовыйОтчетПеречислениеЕдиногоПлатежа.Ссылка
						   //|ГДЕ
						   //|	ЕПРасчетыСФондами.Активность
			               |
			               |ИНДЕКСИРОВАТЬ ПО
			               |	Ведомость
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			               |	ПлатежноеПоручениеИсходящееПеречислениеЕдиныхПлатежей.Документ КАК Ведомость,
			               |	РанееИспользованныеВедомости.Регистратор КАК КонфликтныйДокумент
			               |ИЗ
			               |	ВТ_ПеречислениеЕдиныхПлатежей КАК ПлатежноеПоручениеИсходящееПеречислениеЕдиныхПлатежей
			               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РанееИспользованныеВедомости КАК РанееИспользованныеВедомости
			               |		ПО ПлатежноеПоручениеИсходящееПеречислениеЕдиныхПлатежей.Документ = РанееИспользованныеВедомости.Ведомость";
						   
			РезультатЗапроса = Запрос.Выполнить().Выбрать();

			Пока РезультатЗапроса.Следующий() Цикл
				
				Если ЗначениеЗаполнено(РезультатЗапроса.КонфликтныйДокумент) Тогда
					
					ТекстСообщения = НСтр("ru = '%1: документ уже включен в %2'");
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, РезультатЗапроса.Ведомость, РезультатЗапроса.КонфликтныйДокумент);
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, РезультатЗапроса.КонфликтныйДокумент,,, Отказ);
					
				КонецЕсли;
				
			КонецЦикла;
			
			ИмяСписочногоДокумента = "ЕППеречислениеВФонды";
			ИмяТаблЧастиСписочногоДокумента = "ЕдиныеПлатежи";
			ИмяПоля = "Сумма";
			ИмяТаблЧастиППИ = "ПеречислениеЕдиныхПлатежей";			
			ТекстСообщенияВалютаПеречисления = НСтр("ru = 'Перечисление единых платежей может осуществляться только в %1'");
			
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеПрочихВыплат Тогда 
			
			// Проверка на то, что документы, введенные в табличную часть не указаны ни в одном другом проведенном документе.
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Ссылка", Ссылка);
			Запрос.УстановитьПараметр("ПеречислениеПрочихВыплат", ПеречислениеПрочихВыплат.Выгрузить());
			Запрос.Текст = "ВЫБРАТЬ *
						   |ПОМЕСТИТЬ ВТ_ПеречислениеПрочихВыплат
						   |ИЗ &ПеречислениеПрочихВыплат КАК ПеречислениеПрочихВыплат
						   |
						   |;
						   |ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
			               |	ПлатежноеПоручениеИсходящееПеречислениеПрочихВыплат.Документ КАК Ведомость,
			               |	ПлатежноеПоручениеИсходящееПеречислениеПрочихВыплат.Ссылка КАК Регистратор
			               |ПОМЕСТИТЬ ВТ_РанееИспользованныеВедомости
			               |ИЗ
			               |	РегистрНакопления.ВзаиморасчетыПоПрочимВыплатам КАК ВзаиморасчетыПоПрочимВыплатам
			               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПлатежноеПоручениеИсходящее.ПеречислениеПрочихВыплат КАК ПлатежноеПоручениеИсходящееПеречислениеПрочихВыплат
			               |		ПО ВзаиморасчетыПоПрочимВыплатам.Регистратор = ПлатежноеПоручениеИсходящееПеречислениеПрочихВыплат.Ссылка
						   |			И ПлатежноеПоручениеИсходящееПеречислениеПрочихВыплат.Ссылка <> &Ссылка
						   |ГДЕ 
						   |	ВзаиморасчетыПоПрочимВыплатам.Активность
			               |
						   |ИНДЕКСИРОВАТЬ ПО
			               |	Ведомость
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			               |	ПлатежноеПоручениеИсходящееПеречислениеПрочихВыплат.Документ КАК Ведомость,
			               |	РанееИспользованныеВедомости.Регистратор КАК КонфликтныйДокумент
			               |ИЗ
			               |	ВТ_ПеречислениеПрочихВыплат КАК ПлатежноеПоручениеИсходящееПеречислениеПрочихВыплат
			               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РанееИспользованныеВедомости КАК РанееИспользованныеВедомости
			               |		ПО ПлатежноеПоручениеИсходящееПеречислениеПрочихВыплат.Документ = РанееИспользованныеВедомости.Ведомость";
						   
			РезультатЗапроса = Запрос.Выполнить().Выбрать();

			Пока РезультатЗапроса.Следующий() Цикл
				
				Если ЗначениеЗаполнено(РезультатЗапроса.КонфликтныйДокумент) Тогда
					
					ТекстСообщения = НСтр("ru = '%1: документ уже включен в %2'");
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, РезультатЗапроса.Ведомость, РезультатЗапроса.КонфликтныйДокумент);
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, РезультатЗапроса.КонфликтныйДокумент,,, Отказ);
					
				КонецЕсли;
				
			КонецЦикла; 
			
			// Проверка на одинаковый вид прочих выплат в ведомости
			Запрос.Текст = "ВЫБРАТЬ *
						   |ПОМЕСТИТЬ ВТ_ПеречислениеПрочихВыплат
						   |ИЗ &ПеречислениеПрочихВыплат КАК ПеречислениеПрочихВыплат
						   |
						   |;
						   |ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			               |	ПеречислениеПрочихВыплат.Документ.ВидПрочихВыплат КАК ВидПрочихВыплат
			               |ИЗ
			               |	ВТ_ПеречислениеПрочихВыплат КАК ПеречислениеПрочихВыплат";
			
			РезультатЗапроса = Запрос.Выполнить().Выбрать();
			Если РезультатЗапроса.Количество() > 1 Тогда

				ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'В табличной части ""Списки на перечисление прочих выплат"" указаны ведомости с различными видами прочих выплат:
													|нельзя выполнять платеж одним документом по разным видам прочих выплат'"), ЭтотОбъект,,, Отказ);
				
			КонецЕсли;  
		
			ИмяСписочногоДокумента = "ВедомостьНаПеречислениеПрочихВыплат";
			ИмяТаблЧастиСписочногоДокумента = "ПрочиеВыплаты";
			ИмяПоля = "Сумма";
			ИмяТаблЧастиППИ = "ПеречислениеПрочихВыплат";			
			ТекстСообщенияВалютаПеречисления = НСтр("ru = 'Перечисление прочих выплат может осуществляться только в %1'");
						
        Иначе

			ИмяСписочногоДокумента = "ИЛПеречислениеПолучателям";
			ИмяТаблЧастиСписочногоДокумента = "ИсполнительныеЛисты";
			ИмяПоля = "СуммаПлатежа";
			ИмяТаблЧастиППИ = "ПеречислениеПоИсполнительнымЛистам";
			ТекстСообщенияВалютаПеречисления = НСтр("ru = 'Перечисление по исполнительным листам может осуществляться только в %1'");

		КонецЕсли;  
		  
		Если ВалютаДокумента <> ВалютаРегламентированногоУчета Тогда

			ТекстСообщения = ТекстСообщенияВалютаПеречисления;
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ВалютаРегламентированногоУчета);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект,,, Отказ);
			
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр(ИмяТаблЧастиППИ, ЭтотОбъект[ИмяТаблЧастиППИ].Выгрузить());
		
		Запрос.Текст = "ВЫБРАТЬ *
						   |ПОМЕСТИТЬ ВТ_" + ИмяТаблЧастиППИ + "
						   |ИЗ &" + ИмяТаблЧастиППИ + " КАК " + ИмяТаблЧастиППИ + "
						   |
						   |;
						   |
						   |ВЫБРАТЬ РАЗРЕШЕННЫЕ
						   |	СУММА(" + ИмяПоля + ") КАК Сумма
						   |ИЗ
						   |	Документ." + ИмяСписочногоДокумента + "." + ИмяТаблЧастиСписочногоДокумента + " КАК Док
						   |
						   |ГДЕ
						   |	Док.Ссылка В (ВЫБРАТЬ
						   |						ППИ.Документ
						   |					ИЗ
						   |						ВТ_" + ИмяТаблЧастиППИ + " КАК ППИ)
						   |";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			СуммаПоСпискам = Выборка.Сумма;
		Иначе
			СуммаПоСпискам = 0;
		КонецЕсли;
		
		Если СуммаДокумента <> СуммаПоСпискам Тогда
			
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Сумма платежного поручения не совпадает с суммой по спискам на перечисление'"), ЭтотОбъект,,, Отказ);
			
		КонецЕсли;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеДенежныхСредствПодотчетнику Тогда

		СуммаВПодотчет 		= ПеречислениеВПодотчет.Итог("СуммаПлатежа");
		НеСоответствиеСумм 	= Ложь;
		Если СуммаВПодотчет <> СуммаДокумента Тогда				   
			НеСоответствиеСумм = Истина;
		КонецЕсли;

		Если НеСоответствиеСумм Тогда
			
			ТекстСообщения = НСтр("ru = 'Не совпадает сумма документа и суммы по списку на перечисление %1'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ?(ВключатьКомиссиюБанка, НСтр("ru = '(с учетом комиссиии банка)'"), """"));
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект,,, Отказ);
				
		КонецЕсли;
		
		Если ВключатьКомиссиюБанка И НЕ СуммаКомиссии = 0 И ПользовательУправляетСчетамиУчета Тогда
			
			Если НЕ ЗначениеЗаполнено(СчетУчетаРасчетовСКонтрагентомБУ) Тогда

				ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не указан счет затрат для отнесения комиссии банка'"), ЭтотОбъект,,, Отказ);
				
			КонецЕсли;
			
		КонецЕсли; 
					
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийППИсходящее.РасчетыПоДоходуОтРазовыхВыплатСКонтрагентами Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Контрагент", Контрагент);
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	Контрагенты.ФизЛицо КАК ФизЛицо,
			|	ВЫБОР
			|		КОГДА Контрагенты.ИдентификационныйКодЛичности = ФизическиеЛица.ИдентификационныйКодЛичности
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК СовпадаетИИН_БИН,
			|	ВЫБОР
			|		КОГДА Контрагенты.РНН = ФизическиеЛица.РНН
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК СовпадаетРНН
			|ИЗ
			|	Справочник.Контрагенты КАК Контрагенты
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
			|		ПО Контрагенты.ФизЛицо = ФизическиеЛица.Ссылка
			|			И (Контрагенты.Ссылка = &Контрагент)";
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			
			ДатаПрекращенияВыводаРНН = Константы.ДатаПрекращенияВыводаРННВПервичныхДокументах.Получить();
			ВыводитьРНН = НЕ ЗначениеЗаполнено(ДатаПрекращенияВыводаРНН) ИЛИ Дата < ДатаПрекращенияВыводаРНН;
			
			Если ВыводитьРНН И НЕ Выборка.СовпадаетРНН Тогда
				ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'РНН контрагента и физлица, связанного с контрагентом, не совпадают.'"), ЭтотОбъект, "Контрагент", "Объект", Отказ);
			ИначеЕсли НЕ ВыводитьРНН И НЕ Выборка.СовпадаетИИН_БИН Тогда
				ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'ИИН/БИН контрагента и физлица, связанного с контрагентом, не совпадают.'"), ЭтотОбъект, "Контрагент", "Объект", Отказ);
			КонецЕсли;
		Иначе 
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Для контрагента не указано соответствующее ему физлицо.'"), ЭтотОбъект, "Контрагент", "Объект", Отказ);
		КонецЕсли;
	КонецЕсли;   
		
	СчетаУчетаВДокументах.ПроверитьЗаполнение(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты, Новый Соответствие);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// Свойство ЗакрыватьФорму используется при проведении из формы документа
	Если ДополнительныеСвойства.Свойство("ЗакрыватьФорму") Тогда
		ДополнительныеСвойства.Удалить("ЗакрыватьФорму");
	КонецЕсли;
	
	Если НЕ Оплачено И РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		РежимЗаписи    = ?(Проведен, РежимЗаписиДокумента.ОтменаПроведения, РежимЗаписиДокумента.Запись);		
		ТекстСообщения =
			НСтр("ru = 'Проведение документа возможно только после установки флага ""Оплачено"". Документ будет записан без проведения'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "Оплачено", "Объект", Ложь);		
		ДополнительныеСвойства.Вставить("ЗакрыватьФорму", Ложь);
	КонецЕсли;

	Если Ответственный.Пустая() Тогда
		
		Ответственный = Пользователи.ТекущийПользователь();
		
	КонецЕсли;
	
	ЕстьРасшифровкаПлатежа = Документы.ПлатежноеПоручениеИсходящее.ЕстьРасшифровкаПлатежа(ВидОперации);

    Если ЕстьРасшифровкаПлатежа И РасшифровкаПлатежа.Количество() > 0 Тогда
		РаботаСДоговорамиКонтрагентов.ЗаполнитьДоговорВТабличнойЧастиПередЗаписью(РасшифровкаПлатежа, ЭтотОбъект);
    КонецЕсли;
    
    Если ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеНДССИзмененнымСрокомУплаты Тогда
        РаботаСДоговорамиКонтрагентов.ЗаполнитьДоговорВТабличнойЧастиПередЗаписью(ПеречислениеНДССИзмененнымСрокомУплаты, ЭтотОбъект, "Договор", "Контрагент");
    КонецЕсли;
    
	Если НЕ ЕстьРасшифровкаПлатежа И РасшифровкаПлатежа.Количество() = 1 Тогда
		
		СтрокаПлатеж = РасшифровкаПлатежа[0];
		
		Если НЕ ЗначениеЗаполнено(РасшифровкаПлатежа[0].СчетУчетаРасчетовСКонтрагентомБУ) Тогда
			СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентомБУ = СчетУчетаРасчетовСКонтрагентомБУ;
		КонецЕсли;
		
	КонецЕсли;
		
	Если НЕ Оплачено Тогда
		ДатаВыписки = Дата;
	КонецЕсли;

	Если РасшифровкаПлатежа.Количество() = 0 Тогда
		НоваяСтрока = РасшифровкаПлатежа.Добавить();
	КонецЕсли;
	
	Если НЕ ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеЗаработнойПлаты Тогда
		ПеречислениеЗаработнойПлаты.Очистить();	
	КонецЕсли;
	
	Если НЕ ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеПенсионныхВзносов Тогда
		ПеречислениеПенсионныхВзносов.Очистить();	
	КонецЕсли;
	
	Если НЕ ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеСоциальныхОтчислений Тогда
		ПеречислениеСоциальныхОтчислений.Очистить();	
	КонецЕсли;
	
	Если НЕ ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеЕдиногоПлатежа Тогда
		ПеречислениеЕдиныхПлатежей.Очистить();	
	КонецЕсли;
	
	Если НЕ ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеПоИсполнительнымЛистам Тогда
		ПеречислениеПоИсполнительнымЛистам.Очистить();	
	КонецЕсли;
	
	Если НЕ ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеНДССИзмененнымСрокомУплаты Тогда
		ПеречислениеНДССИзмененнымСрокомУплаты.Очистить();	
	КонецЕсли;
	
	Если НЕ ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеДенежныхСредствПодотчетнику Тогда
		ПеречислениеВПодотчет.Очистить();	
	КонецЕсли;
	
	Если НЕ УчитыватьКПН Тогда
		ВидУчетаНУ = Справочники.ВидыУчетаНУ.ПустаяСсылка();
	КонецЕсли;

	Если НЕ ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет 
		И НЕ ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПрочееСписаниеБезналичныхДенежныхСредств Тогда
		СтруктурноеПодразделениеПолучатель = СтруктурноеПодразделениеОтправитель;
	КонецЕсли;   
	
	Если НЕ ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеПрочихВыплат Тогда
		ПеречислениеПрочихВыплат.Очистить();	
	КонецЕсли;
	
	Если НЕ ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеПрочихДоходов Тогда
		ПеречислениеПрочихДоходов.Очистить();
	КонецЕсли;

	Если Не ЗначениеЗаполнено(Номер) Тогда
		УстановитьНовыйНомер();
	КонецЕсли;
	
	Если Не (ЗначениеЗаполнено(НомерВходящегодокумента) Или ЗначениеЗаполнено(ДатаВходящегоДокумента)) Тогда
		НомерВходящегодокумента = СокрЛП(ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(Номер, ЭтотОбъект, , Истина, Истина));
		ДатаВходящегоДокумента = Дата;
	КонецЕсли;
	
	СчетаУчетаВДокументах.ЗаполнитьПередЗаписью(ЭтотОбъект, РежимЗаписи);
	
	Если РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения И ВидОперации = Перечисления.ВидыОперацийППИсходящее.ОплатаПоставщику Тогда  
		
		ЕстьСчетаНаОплату = Ложь;
		
		СчетаНаОплату = РасшифровкаПлатежа.ВыгрузитьКолонку("СчетНаОплату");
		
		Для Каждого СчетНаОплату Из СчетаНаОплату Цикл  
			
			Если СчетНаОплату <> Документы.СчетНаОплатуПоставщика.ПустаяСсылка() Тогда
				ЕстьСчетаНаОплату = Истина;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЕстьСчетаНаОплату Тогда 
			
			ТаблицаРеквизитов = Новый ТаблицаЗначений;
			
			ТаблицаРеквизитов.Колонки.Добавить("Период");
			ТаблицаРеквизитов.Колонки.Добавить("Регистратор");
			ТаблицаРеквизитов.Колонки.Добавить("Организация");
			
			СтрокаТабРеквизитов = ТаблицаРеквизитов.Добавить();
			СтрокаТабРеквизитов.Период      = Дата;
			СтрокаТабРеквизитов.Регистратор = Ссылка;
			СтрокаТабРеквизитов.Организация = Организация;
			
			ТаблицаОплатаСчетов = Документы.ПлатежноеПоручениеИсходящее.ТаблицаОплатаСчетов(ЭтотОбъект);
			
			ТаблицаСтатусовСчетов = СтатусыДокументов.ПодготовитьТаблицуСтатусовОплатыСчетов(
				ТаблицаОплатаСчетов, ТаблицаРеквизитов, Истина);
			
			СтатусыДокументов.СформироватьДвиженияСтатусовДокументов(
				ТаблицаСтатусовСчетов, ТаблицаРеквизитов);		
			
		КонецЕсли;
				
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	НомерВходящегоДокумента = "";
	ДатаВходящегоДокумента  = "";
	
	ЕстьРасшифровкаПлатежа = Документы.ПлатежноеПоручениеИсходящее.ЕстьРасшифровкаПлатежа(ВидОперации);
	
	Если НЕ ЕстьРасшифровкаПлатежа Тогда 
		Для Каждого СтрокаПлатеж Из РасшифровкаПлатежа Цикл 
			СтрокаПлатеж.СуммаПлатежа = 0; 
			СтрокаПлатеж.СуммаВзаиморасчетов = 0; 
			СтрокаПлатеж.СуммаНДС = 0;
		КонецЦикла;
	КонецЕсли;

	УправлениеДенежнымиСредствамиСервер.ЗаполнитьРеквизитыРасчетногоДокумента(ЭтотОбъект, РасшифровкаПлатежа);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
		
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА
	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект, Ложь);
	Если РучнаяКорректировка Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПроведения = Документы.ПлатежноеПоручениеИсходящее.ПодготовитьПараметрыПроведения(Ссылка, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ИНФОРМАЦИОННОЙ БАЗЫ	
	ТаблицаВзаиморасчеты = УправлениеВзаиморасчетамиСервер.ПодготовитьТаблицуВзаиморасчетовПогашениеЗадолженности(
		ПараметрыПроведения.РасшифровкаПлатежа, ПараметрыПроведения.Реквизиты, Отказ); 
		
	// Изменение статуса счетов на оплату 
	
	ГрупповоеПерепроведение = Неопределено;
	Если ЭтотОбъект.ДополнительныеСвойства.Свойство("ГрупповоеПерепроведение") Тогда	
		ГрупповоеПерепроведение = ЭтотОбъект.ДополнительныеСвойства.ГрупповоеПерепроведение;	
	Иначе 	
		ГрупповоеПерепроведение = Ложь;	
	КонецЕсли;	
		
	Если НЕ ГрупповоеПерепроведение Тогда
		ТаблицаСтатусовСчетов = СтатусыДокументов.ПодготовитьТаблицуСтатусовОплатыСчетов(
			ПараметрыПроведения.ОплатаСчетов, ПараметрыПроведения.Реквизиты);
	КонецЕсли;
	
	// ФОРМИРОВАНИЕ ДВИЖЕНИЙ
	
	УправлениеВзаиморасчетамиСервер.СформироватьДвиженияПогашениеЗадолженности(ТаблицаВзаиморасчеты, 
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
			
	УправлениеДенежнымиСредствамиСервер.СформироватьДвиженияПрочееСписание(ПараметрыПроведения.РеквизитыПрочее, 
		Движения, Отказ);
		
	УправлениеДенежнымиСредствамиСервер.СформироватьДвиженияПеречислениеВПодотчет(ПараметрыПроведения.ТаблицаПеречислениеВПодотчет, 
		ПараметрыПроведения.РеквизитыПеречислениеВПодотчет, Движения, Отказ);

	УправлениеДенежнымиСредствамиСервер.СформироватьДвиженияКомиссияБанка(ПараметрыПроведения.РеквизитыКомиссияБанка, 
		Движения, Отказ);

	// НДС с измененным сроком уплаты
	УчетНДСИАкциза.СформироватьДвиженияПлатежноеПоручение(ПараметрыПроведения.ТаблицаПеречислениеНДССИзмененнымСрокомУплаты,
		ПараметрыПроведения.РеквизитыПеречислениеНДССИзмененнымСрокомУплаты, Движения, Отказ);
		
	// Переоценка валютных остатков - после формирования проводок всеми другими механизмами
	ТаблицаПереоценка = УчетДоходовРасходов.ПодготовитьТаблицуПереоценкаВалютныхОстатковПоПроводкамДокумента(
		ПараметрыПроведения.Реквизиты, Движения, Отказ);

	УчетДоходовРасходов.СформироватьДвиженияПереоценкаВалютныхОстатков(ТаблицаПереоценка,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);

	// ЗП
	РасчетЗарплатыСервер.СформироватьДвиженияПеречислениеЗП(ПараметрыПроведения.Реквизиты, ПараметрыПроведения.ТаблицаПеречислениеЗП, Движения, Перечисления.СпособыВыплатыЗарплаты.ЧерезБанк, Отказ);
	
	// ОПВ и ОППВ и ОПВР
	РасчетЗарплатыСервер.СформироватьДвиженияПеречислениеОПВ(ПараметрыПроведения.Реквизиты, ПараметрыПроведения.ТаблицаПеречислениеОПВ, Движения, Отказ);
	
	// СО, ВОСМС, ООСМС
	РасчетЗарплатыСервер.СформироватьДвиженияПеречислениеСО(ПараметрыПроведения.Реквизиты, ПараметрыПроведения.ТаблицаПеречислениеСО, Движения, Отказ);

	// ЕП
	РасчетЗарплатыСервер.СформироватьДвиженияПеречислениеЕП(ПараметрыПроведения.Реквизиты, ПараметрыПроведения.ТаблицаПеречислениеЕП, Движения, Отказ);
	
	// ИЛ
	РасчетЗарплатыСервер.СформироватьДвиженияПеречислениеПоИЛ(ПараметрыПроведения.Реквизиты, ПараметрыПроведения.ТаблицаПеречислениеПоИЛ, Движения, Отказ);
	
	// Контроль остатков по прочим выплатам
	ВыполнитьКонтрольОстатковПоПрочимВыплатам(ПараметрыПроведения.ТаблицаПеречислениеПрочихВыплат, ПараметрыПроведения.Реквизиты, ,Отказ);
	
	// Прочие выплаты
	РасчетЗарплатыСервер.СформироватьДвиженияПеречислениеПрочихВыплат(ПараметрыПроведения.Реквизиты, ПараметрыПроведения.ТаблицаПеречислениеПрочихВыплат, Движения, Отказ);
	
	// Расчеты с контрагентами-физлицами
	Если ВидОперации = Перечисления.ВидыОперацийППИсходящее.РасчетыПоДоходуОтРазовыхВыплатСКонтрагентами Тогда
		РасчетЗарплатыСервер.СформироватьДвиженияРасчетыСКонтрагентамиФизЛицами(ПараметрыПроведения.Реквизиты, Движения, Отказ);
	КонецЕсли;
	
	ПроцедурыНалоговогоУчета.ОтразитьПостоянныеРазницыВНУ(ПараметрыПроведения.Реквизиты, Движения, Отказ); 
	
	// Оплата счетов
	СтатусыДокументов.СформироватьДвиженияОплатаСчетов(
		ПараметрыПроведения.ОплатаСчетов, ПараметрыПроведения.Реквизиты, Движения, Отказ);
	
	Если НЕ ГрупповоеПерепроведение Тогда
		СтатусыДокументов.СформироватьДвиженияСтатусовДокументов(
			ТаблицаСтатусовСчетов, ПараметрыПроведения.Реквизиты);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ  

Процедура ВыполнитьКонтрольОстатковПоПрочимВыплатам(ТаблицаПрочиеВыплаты, ТаблицаРеквизиты, ВыводитьСообщения = Истина, Отказ) Экспорт
	
	Если ТаблицаПрочиеВыплаты = Неопределено ИЛИ ТаблицаПрочиеВыплаты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьТаблицуПрочиеВыплаты(ТаблицаПрочиеВыплаты, ТаблицаРеквизиты, Отказ);
		
	Реквизиты = Параметры.Реквизиты[0];
			        	  	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 	
	"ВЫБРАТЬ
	|	ТаблицаПрочиеВыплаты.ФизЛицо КАК ФизЛицо,
	|	ТаблицаПрочиеВыплаты.ВидПрочихВыплат КАК ВидПрочихВыплат,
	|	ТаблицаПрочиеВыплаты.ПериодВзаиморасчетов КАК ПериодВзаиморасчетов
	|ПОМЕСТИТЬ ВТ_ПрочиеВыплаты
	|ИЗ
	|	&ТаблицаПрочиеВыплаты КАК ТаблицаПрочиеВыплаты
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо,
	|	ВидПрочихВыплат
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ПрочиеВыплаты.ФизЛицо КАК ФизЛицо,
	|	ВТ_ПрочиеВыплаты.ВидПрочихВыплат КАК ВидПрочихВыплат,
	|	ВТ_ПрочиеВыплаты.ПериодВзаиморасчетов КАК ПериодВзаиморасчетов,
	|	ЕСТЬNULL(ВзаиморасчетыПоПрочимВыплатамОстатки.СуммаВзаиморасчетовОстаток, 0) КАК СуммаВзаиморасчетовОстаток
	|ИЗ
	|	ВТ_ПрочиеВыплаты КАК ВТ_ПрочиеВыплаты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВзаиморасчетыПоПрочимВыплатам.Остатки(,
	|				Организация = &Организация
	|					И СтруктурнаяЕдиница = &СтруктурноеПодразделение) КАК ВзаиморасчетыПоПрочимВыплатамОстатки
	|		ПО ВТ_ПрочиеВыплаты.ФизЛицо = ВзаиморасчетыПоПрочимВыплатамОстатки.ФизЛицо
	|			И ВТ_ПрочиеВыплаты.ВидПрочихВыплат = ВзаиморасчетыПоПрочимВыплатамОстатки.ВидПрочихВыплат
	|			И ВТ_ПрочиеВыплаты.ПериодВзаиморасчетов = ВзаиморасчетыПоПрочимВыплатамОстатки.ПериодВзаиморасчетов";
		
	Запрос.УстановитьПараметр("ТаблицаПрочиеВыплаты", ТаблицаПрочиеВыплаты);
	Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
	
	Если ЗначениеЗаполнено(Реквизиты.СтруктурноеПодразделение) Тогда
		Запрос.УстановитьПараметр("СтруктурноеПодразделение", Реквизиты.СтруктурноеПодразделение);
	Иначе
		Запрос.УстановитьПараметр("СтруктурноеПодразделение", Реквизиты.Организация);
	КонецЕсли;
		
	ТаблицаОстатков = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаДокумента Из ТаблицаПрочиеВыплаты Цикл
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("ФизЛицо", СтрокаДокумента.ФизЛицо);
		СтруктураПоиска.Вставить("ВидПрочихВыплат", СтрокаДокумента.ВидПрочихВыплат);
		СтруктураПоиска.Вставить("ПериодВзаиморасчетов", СтрокаДокумента.ПериодВзаиморасчетов);
			
		СтрокиОстатка = ТаблицаОстатков.НайтиСтроки(СтруктураПоиска);
		СуммаОсталосьПогасить = СтрокаДокумента.Сумма;
		ОстатокСтроки = 0;
		
		Для Каждого СтрокаОстатка Из СтрокиОстатка Цикл 
			
			ОстатокСтроки = СтрокаОстатка.СуммаВзаиморасчетовОстаток;
			
			Если СуммаОсталосьПогасить <= 0 Тогда
				Прервать;
			КонецЕсли;
			
			Если СтрокаОстатка.СуммаВзаиморасчетовОстаток <= 0 Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаОстатка = СтрокиОстатка[0];
			СуммаДок = МИН(СуммаОсталосьПогасить,СтрокаОстатка.СуммаВзаиморасчетовОстаток);	
			
			Если СтрокаОстатка.СуммаВзаиморасчетовОстаток <= СуммаДок Тогда
				СтрокаОстатка.СуммаВзаиморасчетовОстаток = 0;
			Иначе
				СтрокаОстатка.СуммаВзаиморасчетовОстаток = СтрокаОстатка.СуммаВзаиморасчетовОстаток - СуммаДок;
			КонецЕсли;
			
			СуммаОсталосьПогасить = СуммаОсталосьПогасить - СуммаДок;
				
		КонецЦикла;
		
		Если СуммаОсталосьПогасить > 0 И ВыводитьСообщения Тогда
						
			ТекстОшибки = НСтр("ru='Взаиморасчеты с прочими лицами: По организации %1,
										|физ.лицу %2 (вид прочих выплат: %3) за период %4 не может быть списана сумма %5. 
										|Остаток суммы задолженности: %6'");
			
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ТекстОшибки,
				Реквизиты.Организация,
				СтрокаДокумента.ФизЛицо,
				СтрокаДокумента.ВидПрочихВыплат,
				СтрокаДокумента.ПериодВзаиморасчетов,
				СтрокаДокумента.Сумма,
				ОстатокСтроки
				);
				
			ПолеСумма	= "ПеречислениеПрочихВыплат" + "[" + Формат(СтрокаДокумента.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].Сумма";		
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, Реквизиты.Регистратор, ПолеСумма, "Объект", Отказ);
							
		КонецЕсли;
		
	КонецЦикла; 	
	
КонецПроцедуры 

Функция ПодготовитьТаблицуПрочиеВыплаты(ТаблицаПрочиеВыплаты,ТаблицаРеквизиты, Отказ) Экспорт
	
	Параметры = Новый Структура;    
	
	СписокОбязательныхКолонок = ""
	+ "Регистратор,"                  	 // <ДокументСсылка.*> - документ-регистратор движений
	+ "Период,"                       	 // <Дата> - период движений - дата документа
	+ "Организация,"                  	 // <СправочникСсылка.Организация> - организация
	+ "СтруктурноеПодразделение" ;
	
	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

		
	СписокОбязательныхКолонок = ""
	+ "НомерСтроки,"
	+ "ФизЛицо,"      				    // <СправочникСсылка.ФизическиеЛица>                      
	+ "ВидПрочихВыплат,"        	 	// <СправочникСсылка.ВидыПрочихВыплат> 
	+ "ПериодВзаиморасчетов,"           
	+ "Сумма";
	
	Параметры.Вставить("ТаблицаПрочиеВыплаты",
		ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаПрочиеВыплаты, СписокОбязательныхКолонок));
	
	Возврат Параметры; 
		
КонецФункции

#КонецЕсли