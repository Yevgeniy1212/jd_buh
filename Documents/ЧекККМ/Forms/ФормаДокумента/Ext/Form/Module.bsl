&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов ТЧ


#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// +++ Проверка заполненности реквизитов организации (касса)
	РеквизитыОрганизацииСсылка = ПроверкаРеквизитовОрганизации.СтрокаСообщенияНеЗаполненаКасса();
	// --- Проверка заполненности реквизитов организации (касса)
	
	ОбщегоНазначенияБКВызовСервера.НастроитьПодключаемоеОборудование(ЭтаФорма);
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
	КонецЕсли;
	
	Если Параметры.Свойство("ИзменитьВидОперации")
		И Параметры.ИзменитьВидОперации Тогда
		
		Объект.ВидОперации = Параметры.ЗначенияЗаполнения.ВидОперации;
		
		УстановитьЗаголовокФормы();
		УстановитьЗаголовокКнопкиОплата();
		Модифицированность = Истина;
	КонецЕсли;
	
	Если Параметры.Ключ.Пустая() Тогда
		РозничнаяПродажаСсылка = Документы.ЧекККМ.ПолучитьСсылку();
	Иначе
		РозничнаяПродажаСсылка = Объект.Ссылка;
	КонецЕсли; 
	
	ЕстьПравоВводаРозничнаяПродажа    = ПравоДоступа("Добавление", Метаданные.Документы.ЧекККМ);
	ЕстьПравоВводаВозвратОтПокупателя = ПравоДоступа("Добавление", Метаданные.Документы.ВозвратТоваровОтПокупателя);
	
	// Нельзя менять ответственного пока не отработал обработчик обновления
	//Элементы.Ответственный.Доступность = Объект.УдалитьОтветственный.Пустая(); ??
	
	// Активизировать табличную часть
	УстановитьТекущуюСтраницуОсновнойПанели();
	
	УстановитьУсловноеОформление();
	УправлениеФормой(ЭтаФорма);
	ОбновитьИтоги(ЭтаФорма);
	НастройкаОтображенияФормыВПростомИнтерфейсе();
	
	УстановитьВидимостьСчетовУчета();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// РедактированиеДокументовПользователей
	ПраваДоступаКОбъектам.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец РедактированиеДокументовПользователей
	
	ПодготовитьФормуНаСервере();
	
	Если НЕ ТекущийОбъект.Ссылка.Пустая() Тогда
		РозничнаяПродажаСсылка = ТекущийОбъект.Ссылка;
	КонецЕсли; 
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	Если ТекущийОбъект.Ссылка.Пустая() И ЗначениеЗаполнено(РозничнаяПродажаСсылка) Тогда
		ТекущийОбъект.УстановитьСсылкуНового(РозничнаяПродажаСсылка);
	КонецЕсли; 
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	УстановитьЗаголовокФормы();
	УстановитьДоступностьСубконто();
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	Если Не ЗначениеЗаполнено(Объект.ТипЦен) Тогда
		УправлениеЦенообразованием.ОбновитьЦеныНоменклатуры(Объект.Ссылка, 
			Перечисления.СпособыЗаполненияЦен.ПоПродажнымЦенам,
			Объект.ВалютаДокумента,
			Объект.СуммаВключаетНДС);
	КонецЕсли;
		
	ЗаполнитьДанныеМаркировки();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)

	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборНоменклатуры.Форма.ОсновнаяФорма" Тогда
		ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИсточникВыбора.ИмяТаблицы);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаОповещения(ЭтаФорма, ИмяСобытия, Параметр, Источник);
	// Конец ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	
	Если ИмяСобытия = "ВыполняетсяОперацияБлокирующаяКассовуюСмену" Тогда
		Доступность = Ложь;
		
	ИначеЕсли ИмяСобытия = "ЗавершенаОперацияБлокирующаяКассовуюСмену" Тогда
		Доступность = Истина;
		
	ИначеЕсли ИмяСобытия = "ОбновитьБаннеры_РозничнаяТорговля" И ИспользуетсяПростойИнтерфейс Тогда
		Элементы.ГруппаБаннерОткрытьСмену.Видимость =
		ОтображатьБаннерОткрытияСмены(Объект.Ссылка, ИспользуетсяФискальныйРегистратор);

	ИначеЕсли Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" Тогда

			ТекущиеДанные = МенеджерОборудованияКлиент.ПреобразоватьДанныеСоСканераВСтруктуру(Параметр);
			ТекущиеДанные.Штрихкод = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ШтрихкодВBase64(ТекущиеДанные.Штрихкод);
				
			//ИнтеграцияИСМПТК
			Если ВестиУчетМаркируемойПродукцииИСМПТК 
				И РозничноеВыбытиеИСМПТКВызовСервера.ЕстьПравоЧтенияОбработкаРозничноеВыбытиеИСМПТК() Тогда
				ОбработкаВнешнегоСобытияИСМПТК(ТекущиеДанные);
			Иначе
				ДобавитьПоШтрихкодуНаСервере(ТекущиеДанные);
			КонецЕсли;	
			//Конец ИнтеграцияИСМПТК

		КонецЕсли;
	ИначеЕсли ИмяСобытия = "ОбработанаТабличнаяЧастьТовары" И ТипЗнч(Параметр) = Тип("Структура") 
		И Параметр.Свойство("ИдентификаторВызывающейФормы")
		И Параметр.ИдентификаторВызывающейФормы = УникальныйИдентификатор Тогда
		
		ОбработкаОповещенияОбработкиТабличнойЧастиТоварыНаСервере(Параметр);
		
	ИначеЕсли ИмяСобытия = "ОбработанаТабличнаяЧасть" И ТипЗнч(Параметр) = Тип("Структура")
		И Параметр.Свойство("ИдентификаторВызывающейФормы")
		И Параметр.ИдентификаторВызывающейФормы = УникальныйИдентификатор Тогда
		
		ОбработкаОповещенияОбработкиТабличнойЧастиНаСервере(Параметр);
		
	ИначеЕсли ИмяСобытия = "ДанныеСкопированыВБуферОбмена" Тогда
		УстановитьДоступностьКомандыВставки(ЭтотОбъект, Истина);
	ИначеЕсли ИмяСобытия = "Запись_Организации" Тогда
		// +++ Проверка заполненности реквизитов организации (касса)
		Если Источник = Объект.Организация Тогда
			ОбработатьИзмененияВОрганизацииНаСервере();
			Модифицированность = Истина;
		КонецЕсли;
		// --- Проверка заполненности реквизитов организации (касса)
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ИспользуютсяСканерыШтрихкода И НЕ ТолькоПросмотр Тогда
		// Попробуем подключить сканер штрихкода
		ПоддерживаемыеТипыПодключаемогоОборудования = "СканерШтрихкода";
		
		МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(
			Неопределено,
			ЭтотОбъект,
			ПоддерживаемыеТипыПодключаемогоОборудования);
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	Если НЕ ЗавершениеРаботы И ИспользуютсяСканерыШтрихкода Тогда
		МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	
	Если ТолькоПросмотр ИЛИ НЕ ВводДоступен() Тогда
		Возврат;
	КонецЕсли;
	
	//ШтрихкодированиеИС
	//СобытияФормИСКлиент.ВнешнееСобытиеОбработатьВводШтрихкода(ЭтотОбъект, Источник, Событие, Данные, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПринятьОплату(Команда)
	
	Если Объект.НомерЧекаККМ <> 0 Тогда
		ТекстСообщения = НСтр("ru = 'Чек уже пробит на фискальном регистраторе!'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		
		Возврат;
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() ИЛИ ЭтаФорма.Модифицированность Тогда
		
		ТекстВопроса = НСтр("ru= 'Действие может быть выполнено только после записи документа. Записать?'");
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаПринятьОплату", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
		
	Иначе
		ПринятьОплатуПродолжение();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборТовары(Команда)
	ПараметрыПодбора = ПолучитьПараметрыПодбора("Товары");
	Если ПараметрыПодбора <> Неопределено Тогда
		ОткрытьФорму("Обработка.ПодборНоменклатуры.Форма.ОсновнаяФорма", ПараметрыПодбора,
			ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПодборУслуги(Команда)
	
	ПараметрыПодбора = ПолучитьПараметрыПодбора("Услуги");
	Если ПараметрыПодбора <> Неопределено Тогда
		ОткрытьФорму("Обработка.ПодборНоменклатуры.Форма.ОсновнаяФорма", ПараметрыПодбора,
			ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ИзменитьУслуги(Команда)
	
	ИзменитьТабличнуюЧасть("Услуги", НСтр("ru='Услуги'"));
		
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьТовары(Команда)
	
	ПараметрыФормы = ПолучитьПараметрыОбработкиТабличнойЧастиТовары();
	Если ПараметрыФормы <> Неопределено Тогда
		ОткрытьФорму("Обработка.ОбработкаТабличнойЧастиТовары.Форма.Форма", ПараметрыФормы,
			ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПоШтрихкоду(Команда)
	
	СтруктураПараметров = Новый Структура;
	
	Если ВестиУчетМаркируемойПродукцииИСМПТК Тогда
		СтруктураПараметров.Вставить("ИспользоватьПодборМаркируемойПродукции", Истина);
	КонецЕсли;
	
	ОписаниеОповещенияПоискПоШтрихкоду = Новый ОписаниеОповещения("ПоискПоШтрихкодуЗавершение", ЭтотОбъект);
	ОткрытьФорму("РегистрСведений.ШтрихкодыНоменклатуры.Форма.ФормаВводШтрихкода", СтруктураПараметров, ЭтотОбъект,,,,ОписаниеОповещенияПоискПоШтрихкоду , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ЧекНаВозврат(Команда)
	СтруктураПараметров = Новый Структура;
	ЗначенияЗаполнения = Новый Структура;
	
	Если НЕ Объект.ОтчетОРозничныхПродажах.Пустая() Тогда
		ЗначенияЗаполнения.Вставить("Основание", Объект.Ссылка);
		ЗначенияЗаполнения.Вставить("ЧекККМ", Объект.Ссылка);
		
		СтруктураПараметров.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
		
		ОткрытьФорму("Документ.ВозвратТоваровОтПокупателя.Форма.ФормаДокумента", СтруктураПараметров, ЭтаФорма, Объект.Ссылка);
	Иначе
		ЗначенияЗаполнения.Вставить("ВидОперации", ПредопределенноеЗначение("Перечисление.ВидыОперацийРозничнаяПродажа.Возврат"));
		ЗначенияЗаполнения.Вставить("Основание", Объект.Ссылка);
		
		СтруктураПараметров.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
		СтруктураПараметров.Вставить("ИзменитьВидОперации", Истина);
		
		ОткрытьФорму("Документ.ЧекККМ.Форма.ФормаДокумента", СтруктураПараметров, ЭтаФорма, Объект.Ссылка);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКассовуюСмену(Команда)
	
	Если Не УправлениеКассовойСменойДоступно Тогда
		ПоказатьПредупреждение( , НСтр("ru='Недостаточно прав для выполнения операции'"));
	Иначе
		ОчиститьСообщения();
		//КассовыеСменыКлиентБП.НачатьОткрытиеКассовойСмены(УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьСтроки(Команда)
	
	ИмяТаблицы = ПолучитьИмяТекущейТабличнойЧасти();
	Если ПустаяСтрока(ИмяТаблицы) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	КоличествоСтрок = Элементы[ИмяТаблицы].ВыделенныеСтроки.Количество();
	Если КоличествоСтрок = 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	СкопироватьСтрокиНаСервере(ИмяТаблицы);
	ОбработкаТабличныхЧастейКлиент.ОповеститьОКопированииСтрокВБуферОбмена(ЭтотОбъект, КоличествоСтрок);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтроки(Команда)
	
	ИмяТаблицы = ПолучитьИмяТекущейТабличнойЧасти();
	Если ПустаяСтрока(ИмяТаблицы) Тогда
		
		Возврат;
		
	КонецЕсли;
	КоличествоСтрок = ВставитьСтрокиНаСервере(ИмяТаблицы);
	ОбработкаТабличныхЧастейКлиент.ОповеститьОВставкеСтрокИзБуфераОбмена(ЭтотОбъект, КоличествоСтрок);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;

	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ОбщегоНазначенияБККлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата, 
		ТекущаяДатаДокумента, Объект.ВалютаДокумента, ВалютаРегламентированногоУчета);

	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		ДатаПриИзмененииНаСервере();
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьОтчетОРозничныхПродажахНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ПоказатьЗначение(, Объект.ОтчетОРозничныхПродажах);
КонецПроцедуры

&НаКлиенте
Процедура ОснованиеПриИзменении(Элемент)
	
	Если НЕ Объект.Основание.Пустая() Тогда
		ОснованиеПриИзмененииНаСервере();
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	ОбновитьИтоги(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	ОбновитьУсловноеОформление(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ЦеныИВалютаНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	УправлениеЦенообразованиемКлиентСервер.ОбработатьИзмененияПоКнопкеЦеныИВалюты(ЭтаФорма, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииЦеныИВалюты(Знач ВалютаДоИзменения, КурсДоИзменения, КратностьДоИзменения, ПерезаполнитьЦены = Ложь, ПересчитатьЦены = Ложь, ПересчитатьНДС = Неопределено) Экспорт

	Если ПерезаполнитьЦены ИЛИ ПересчитатьЦены ИЛИ (ПересчитатьНДС <> Неопределено) Тогда
		ПриИзмененииЦеныИВалютыНаСервере(ВалютаДоИзменения, КурсДоИзменения, КратностьДоИзменения, ПерезаполнитьЦены, ПересчитатьЦены, ПересчитатьНДС);
	Иначе
		ОбновитьИтоги(ЭтаФорма);
		УправлениеФормой(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииЦеныИВалютыНаСервере(Знач ВалютаДоИзменения, КурсДоИзменения, КратностьДоИзменения, ПерезаполнитьЦены = Ложь, ПересчитатьЦены = Ложь, ПересчитатьНДС = Неопределено) Экспорт

	УправлениеЦенообразованием.ЗаполнитьРассчитатьСуммы(
		ЭтаФорма,
		ВалютаДоИзменения,
		КурсДоИзменения,
		КратностьДоИзменения,
		ПерезаполнитьЦены,
		ПересчитатьЦены,
		ПересчитатьНДС);

	ОбновитьИтоги(ЭтаФорма);
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияФормыЦеныИВалюта(Результат, Параметры) Экспорт
	
	УправлениеЦенообразованиемКлиент.ПослеЗакрытияФормыЦеныИВалюта(Результат, Параметры);
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	ОбновитьИтоги(ЭтаФорма);
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОснованиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ИспользуетсяПростойИнтерфейс Тогда
		СтандартнаяОбработка = Ложь;
		
		Отбор = Новый Структура;
		Отбор.Вставить("Организация", Объект.Организация);
		Отбор.Вставить("ВидОперации", ПредопределенноеЗначение("Перечисление.ВидыОперацийРозничнаяПродажа.Продажа"));
		Отбор.Вставить("Склад", Объект.Склад);
		
		ПараметрыФормы = Новый Структура("Отбор", Отбор);
		ОткрытьФорму("Документ.ЧекККМ.ФормаВыбора", ПараметрыФормы, Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)	
	РаботаСДиалогамиКлиент.СтруктурноеПодразделениеНачалоВыбора(ЭтаФорма, СтандартнаяОбработка, Объект.Организация, Объект.СтруктурноеПодразделение, Истина);
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(СтруктурноеПодразделениеОрганизация) Тогда 
		Объект.Организация = Неопределено;
		Объект.СтруктурноеПодразделение = Неопределено;
	Иначе 
		Результат = РаботаСДиалогамиКлиент.ПроверитьИзменениеЗначенийОрганизацииСтруктурногоПодразделения(СтруктурноеПодразделениеОрганизация, Объект.Организация, Объект.СтруктурноеПодразделение);
		Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
			Если Объект.Товары.Количество() > 0 ИЛИ Объект.Услуги.Количество() > 0 Тогда
				СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(Истина, Результат);
			Иначе 
				СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(Ложь, Результат);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КассаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Отбор = Новый Структура("Владелец", Объект.Организация);
	СтруктураПараметров = Новый Структура("ВалютаДенежныхСредств, Отбор, РежимВыбора", ВалютаРегламентированногоУчета, Отбор, Истина);
	ОткрытьФорму("Справочник.Кассы.ФормаВыбора", СтруктураПараметров, Элемент);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)
	ОбновитьИтоги(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Если НоваяСтрока И НЕ ОтменаРедактирования Тогда
		ОбновитьИтоги(ЭтаФорма);
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.Номенклатура) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура, ЕдиницаИзмерения, Коэффициент, Количество, Цена, Сумма,Всего, ЭтоУслуга, 
		|СтавкаНДС, СуммаНДС, СчетУчетаНДСПоРеализации, НДСВидОперацииРеализации, СчетУчетаБУ, 
		|СчетДоходовБУ, СубконтоДоходовБУ1, СубконтоДоходовБУ2, СубконтоДоходовБУ3,
		|ВидСубконтоДоходовБУ1, ВидСубконтоДоходовБУ2, ВидСубконтоДоходовБУ3,
		|СубконтоДоходовБУ1Доступность, СубконтоДоходовБУ2Доступность, СубконтоДоходовБУ3Доступность,
		|СчетСписанияСебестоимостиБУ, СубконтоСписанияСебестоимостиБУ1, СубконтоСписанияСебестоимостиБУ2, СубконтоСписанияСебестоимостиБУ3,
		|ВидСубконтоСписанияСебестоимостиБУ1, ВидСубконтоСписанияСебестоимостиБУ2, ВидСубконтоСписанияСебестоимостиБУ3,
		|СубконтоСписанияСебестоимостиБУ1Доступность, СубконтоСписанияСебестоимостиБУ2Доступность, СубконтоСписанияСебестоимостиБУ3Доступность,
		|ВидПродукцииИСМПТК, ЭтоМаркируемаяПродукция, ИндексМарки, КодМаркировки"
		);
		
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	ДанныеОбъекта = Новый Структура(
		"Организация, СтруктурноеПодразделение, Дата, Ссылка, ТипЦен, ВидОперации,
		|УчитыватьНДС, СуммаВключаетНДС,  
		|ВалютаДокумента, КурсВзаиморасчетов, КратностьВзаиморасчетов, Склад,
		|ВестиУчетМаркируемойПродукцииИСМПТК, ВидыМаркируемойПродукции");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, ЭтаФорма);
	
	ДанныеОбъекта.Вставить("Реализация", Истина);
	
	ПараметрыЗаполненияСчетовУчета = НачатьЗаполнениеСчетовУчета(
		"Товары.Номенклатура",
		Объект,
		Элементы.Товары.ТекущиеДанные,
		ДанныеОбъекта,
		ДанныеСтрокиТаблицы);
	
	ТоварыНоменклатураПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта, ПараметрыЗаполненияСчетовУчета.КЗаполнению);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДоходовБУ", "СчетДоходовБУ", "Товары");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "СписанияСебестоимостиБУ", "СчетСписанияСебестоимостиБУ", "Товары");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	Если ЗначениеЗаполнено(Текст) Тогда
		
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = ДанныеВыбораНоменклатура(Текст, ПараметрыПолученияДанных);
		
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	Если НЕ ПустаяСтрока(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = ДанныеВыбораНоменклатура(Текст, ПараметрыПолученияДанных);
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	Номенклатура = СтрокаТабличнойЧасти.Номенклатура;
	
	Если НЕ Номенклатура = ВыбранноеЗначение Тогда
		СтрокаТабличнойЧасти.КодМаркировки = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	ПриИзмененииКоличествоЦена("Товары");
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	ПриИзмененииКоличествоЦена("Товары");
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	ПриИзмененииСумма("Товары");
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)
	ПриИзмененииСтавкаНДС("Товары");
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаНДСПриИзменении(Элемент)
	ПриИзмененииСуммаНДС("Товары");
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если НоваяСтрока И НЕ Копирование Тогда
		
		ТекущиеДанные.Коэффициент = 1;
		
		ДанныеСтрокиТаблицы = Новый Структура("Номенклатура, ЕдиницаИзмерения, Коэффициент, Количество, Цена, Сумма, СтавкаНДС, СуммаНДС, НДСВидОперацииРеализации");
		ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
		ПараметрыОбъекта = Новый Структура("Организация, СтруктурноеПодразделение, Дата, Ссылка");
		ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, Объект);
		
		ПараметрыЗаполненияСчетовУчета = НачатьЗаполнениеСчетовУчета(
			"НоваяСтрокаТовары",
			Объект,
			ТекущиеДанные,
			ПараметрыОбъекта,
			ДанныеСтрокиТаблицы);
		
		ЗаполнитьРеквизитыНалоговогоУчетаНаСервере(ДанныеСтрокиТаблицы, "Товары", ПараметрыОбъекта, ПараметрыЗаполненияСчетовУчета.КЗаполнению);
	
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);
		
	КонецЕсли;
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДоходовБУ", "СчетДоходовБУ", "Товары");	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "СписанияСебестоимостиБУ", "СчетСписанияСебестоимостиБУ", "Товары");
	
	Если Копирование Тогда
		ТекущиеДанные.КодМаркировки = "";
		Если ТекущиеДанные.ЭтоМаркируемаяПродукция Тогда
			ТекущиеДанные.ИндексМарки = 2;
		Иначе
			ТекущиеДанные.ИндексМарки = 0;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		Если ВестиУчетМаркируемойПродукцииИСМПТК 
			И РозничноеВыбытиеИСМПТКВызовСервера.ЕстьПравоЧтенияОбработкаРозничноеВыбытиеИСМПТК() Тогда
			// Для маркируемой продукции не меняем количество, так как там могут быть блоки
			Элементы.ТоварыКоличество.ТолькоПросмотр = НЕ ((ТекущиеДанные.ИндексМарки = 0) ИЛИ (ТекущиеДанные.ИндексМарки <> 0 И ТекущиеДанные.КодМаркировки = ""));
		Иначе
			Элементы.ТоварыКоличество.ТолькоПросмотр = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыУслуги

&НаКлиенте
Процедура УслугиПриИзменении(Элемент)
	
	ОбновитьИтоги(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И НЕ Копирование Тогда		
		ДанныеСтрокиТаблицы = Новый Структура("Номенклатура, Содержание, Количество, Цена, Сумма, СтавкаНДС, СуммаНДС, НДСВидОперацииРеализации");
		ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, Элементы.Услуги.ТекущиеДанные);
	
		ПараметрыОбъекта = Новый Структура("Организация, СтруктурноеПодразделение, Дата, Ссылка");
		ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, Объект);
		
		ПараметрыЗаполненияСчетовУчета = НачатьЗаполнениеСчетовУчета(
			"НоваяСтрокаУслуги",
			Объект,
			Элементы.Услуги.ТекущиеДанные,
			ПараметрыОбъекта,
			ДанныеСтрокиТаблицы);
		
		ЗаполнитьРеквизитыНалоговогоУчетаНаСервере(ДанныеСтрокиТаблицы, "Услуги", ПараметрыОбъекта, ПараметрыЗаполненияСчетовУчета.КЗаполнению);		
		
		ЗаполнитьЗначенияСвойств(Элементы.Услуги.ТекущиеДанные, ДанныеСтрокиТаблицы);
		
	КонецЕсли;

	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДоходовБУ", "СчетДоходовБУ", "Услуги");

КонецПроцедуры

&НаКлиенте
Процедура УслугиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		ОбновитьИтоги(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиНоменклатураПриИзменении(Элемент)
	
	ДанныеСтрокиТаблицы = Новый Структура("Номенклатура, Содержание, Количество, Цена, Сумма, СтавкаНДС, СуммаНДС, 
		|СчетДоходовБУ, СубконтоДоходовБУ1, СубконтоДоходовБУ2, СубконтоДоходовБУ3, 
		|СчетУчетаНДСПоРеализации, НДСВидОперацииРеализации, Всего,
		|ВидСубконтоДоходовБУ1, ВидСубконтоДоходовБУ2, ВидСубконтоДоходовБУ3,
		|СубконтоДоходовБУ1Доступность, СубконтоДоходовБУ2Доступность, СубконтоДоходовБУ3Доступность");
		
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, Элементы.Услуги.ТекущиеДанные);
	
	ДанныеОбъекта = Новый Структура(
		"Организация, СтруктурноеПодразделение, ВидОперации, Дата, Ссылка, ТипЦен, 
		|УчитыватьНДС, СуммаВключаетНДС,  
		|ВалютаДокумента, КурсВзаиморасчетов, КратностьВзаиморасчетов, Склад, ДоговорКонтрагента");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	ПараметрыЗаполненияСчетовУчета = НачатьЗаполнениеСчетовУчета(
		"Услуги.Номенклатура",
		Объект,
		Элементы.Услуги.ТекущиеДанные,
		ДанныеОбъекта,
		ДанныеСтрокиТаблицы);
	
	УслугиНоменклатураПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта, ПараметрыЗаполненияСчетовУчета.КЗаполнению);
		
	ЗаполнитьЗначенияСвойств(Элементы.Услуги.ТекущиеДанные, ДанныеСтрокиТаблицы);	
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДоходовБУ", "СчетДоходовБУ", "Услуги");
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиКоличествоПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	Структура = ОбработкаТабличныхЧастейКлиентСервер.ПодготовитьСтруктуруДляРасчетаСумм(Объект);
			
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Структура);		
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВсегоТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиЦенаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;	
	Структура = ОбработкаТабличныхЧастейКлиентСервер.ПодготовитьСтруктуруДляРасчетаСумм(Объект);
			
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Структура);		
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВсегоТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСуммаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	Структура = ОбработкаТабличныхЧастейКлиентСервер.ПодготовитьСтруктуруДляРасчетаСумм(Объект);
	
	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСуммыТабЧасти(СтрокаТабличнойЧасти);
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Структура);		
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВсегоТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);	
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСтавкаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;	
	Структура = ОбработкаТабличныхЧастейКлиентСервер.ПодготовитьСтруктуруДляРасчетаСумм(Объект);
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Структура);	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВсегоТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСуммаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВсегоТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);

КонецПроцедуры

&НаКлиенте
Процедура УслугиСчетДоходовБУПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.Услуги.ТекущиеДанные;
	
	// БУ
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
								 "СубконтоДоходовБУ1", "СубконтоДоходовБУ2", "СубконтоДоходовБУ3");

	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриИзмененииСчета(СтрокаТаблицы.СчетДоходовБУ, СтрокаТаблицы, ПоляОбъекта, Истина);

	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДоходовБУ", "СчетДоходовБУ", "Услуги");
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура, СчетДоходовБУ, 
		|СубконтоДоходовБУ1, СубконтоДоходовБУ2, СубконтоДоходовБУ3");
		
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, СтрокаТаблицы);
	
	ДанныеОбъекта = Новый Структура("Организация");
			
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, СтрокаТаблицы);
	
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
		
	УслугиСчетДоходовБУПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ДанныеСтрокиТаблицы);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСубконтоДоходовБУПриИзменении(Элемент)
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДоходовБУ", "СчетДоходовБУ", "Услуги");	
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСубконтоДоходовБУ1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаТаблицы = Элементы.Услуги.ТекущиеДанные;		
	СубконтоНачалоВыбора(Элемент, "СубконтоДоходовБУ",  1, "СчетДоходовБУ", СтрокаТаблицы, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСубконтоДоходовБУ2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаТаблицы = Элементы.Услуги.ТекущиеДанные;		
	СубконтоНачалоВыбора(Элемент, "СубконтоДоходовБУ",  2, "СчетДоходовБУ", СтрокаТаблицы, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСубконтоДоходовБУ3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаТаблицы = Элементы.Услуги.ТекущиеДанные;		
	СубконтоНачалоВыбора(Элемент, "СубконтоДоходовБУ",  3, "СчетДоходовБУ", СтрокаТаблицы, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормыОплата

&НаКлиенте
Процедура ОплатаВидОплатыОткрытие(Элемент, СтандартнаяОбработка)
	
	
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СлужебныеПроцедурыИФункцииБСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
     ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
     ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры
 
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
     ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
     ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.Печать

#КонецОбласти 

#Область ПечатьЧека

&НаКлиенте
Процедура ПослеЗакрытияВопросаПринятьОплату(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	РезультатЗаписи = Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Запись));
	
	ПринятьОплатуПродолжение();
	
КонецПроцедуры

&НаКлиенте
Процедура ПринятьОплатуПродолжение()
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	ПровестиДокументВПолнойВерсии();
	
	Если ИспользуетсяФискальныйРегистратор Тогда
		Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
			Контекст = Новый Структура();
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ВыборФискальногоУстройстваЗавершение", ЭтотОбъект, Контекст);
			ПоддерживаемыеТипыВО = Новый Массив();
			ПоддерживаемыеТипыВО.Добавить("ФискальныйРегистратор");
			ПоддерживаемыеТипыВО.Добавить("ПринтерЧеков");			
			МенеджерОборудованияКлиент.ПредложитьВыбратьУстройство(ОписаниеОповещения, ПоддерживаемыеТипыВО,
				НСтр("ru = 'Выберите фискальное устройство'"), НСтр("ru = 'Фискальное устройство не подключено.'"), НСтр("ru = 'Фискальное устройство не выбрано.'"));
		Иначе
			ТекстСообщения = НСтр("ru = 'Предварительно необходимо выбрать рабочее место внешнего оборудования текущего сеанса.'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			ОтменитьПроведениеВПолнойВерсии();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборФискальногоУстройстваЗавершение(ИдентификаторУстройства, Параметры) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ИдентификаторУстройства) Тогда
		ОтменитьПроведениеВПолнойВерсии();
		Возврат;
	КонецЕсли;
	
	ПараметрыЭТ = ПолучитьПараметрыЭТ(Объект.Ссылка, ИдентификаторУстройства);
	
	Если НЕ ПараметрыЭТ.СоответствиеОрганизации Тогда
		ИдентификаторУстройства = Неопределено;
		ОтменитьПроведениеВПолнойВерсии();
		ТекстСообщения = НСтр("ru = 'Организация выбранного устройства не соответствует организации документа.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Параметры.Вставить("ИдентификаторУстройства", ИдентификаторУстройства);
	Параметры.Вставить("КоличествоОплатЭТ", Объект.Оплата.Количество());
	Параметры.Вставить("ИдентификаторУстройстваЭТ", ПараметрыЭТ.ИдентификаторУстройстваЭТ);
	Параметры.Вставить("ИспользоватьБезПодключенияОборудованияЭТ", ПараметрыЭТ.ИспользоватьБезПодключенияОборудования);
	Параметры.Вставить("ОплатаКарта", ПараметрыЭТ.Сумма);
	
	ДанныеУстройства = МенеджерОборудованияКлиентПовтИсп.ПолучитьДанныеУстройства(ИдентификаторУстройства);
	ТипУстройства = ?(ДанныеУстройства.Свойство("ТипОборудованияИмя"), ДанныеУстройства.ТипОборудованияИмя, "ККТ");
	
	Если ТипУстройства = "ККТ" Тогда
		ОповещениеПриЗавершении = Новый ОписаниеОповещения("ПолучитьПараметрыЧекаЗавершение", ЭтотОбъект, Параметры);
		МенеджерОборудованияКлиент.НачатьПолучениеПараметровФискальногоУстройства(ОповещениеПриЗавершении, УникальныйИдентификатор , ИдентификаторУстройства, Ложь);
	Иначе
		ПолучитьПараметрыЧекаЗавершение(Неопределено, Параметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьПараметрыЧекаЗавершение(ПараметрыФискальногоУстройства, Параметры) Экспорт
	
	ОписаниеОшибки = "";
	Если ПараметрыФискальногоУстройства =  Неопределено Тогда
		ВерсияФормата = "1.1.0.0";
	ИначеЕсли НЕ ПараметрыФискальногоУстройства.Результат Тогда 
		ОписаниеОшибки = ПараметрыФискальногоУстройства.ОписаниеОшибки;
	Иначе
		ВерсияФормата = ОбщегоНазначенияБККлиентСервер.ПолучитьВерсиюФФД(ПараметрыФискальногоУстройства.ВыходныеПараметры.ВерсияФФДФН, ПараметрыФискальногоУстройства.ВыходныеПараметры.ВерсияФФДККТ);
	КонецЕсли;
	
	ЕстьОплатыБезПодтверждения = Ложь;
	МассивОплатБезПодтверждения = Объект.Оплата.НайтиСтроки(Новый Структура("ДанныеПереданыВБанк", Ложь));
	Если МассивОплатБезПодтверждения.Количество() > 0 Тогда
		ЕстьОплатыБезПодтверждения = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		ТекстСообщения = НСтр("ru = 'При подключении устройства произошла ошибка.
			|Чек не напечатан на фискальном устройстве.
			|Дополнительное описание:
			|%ДополнительноеОписание%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", ОписаниеОшибки);
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	ИначеЕсли Параметры.КоличествоОплатЭТ > 1 И ЕстьОплатыБезПодтверждения Тогда
		//несколько строк безналичной оплаты
		ТекстВопроса = НСтр("ru = 'Требуется выполнить операции оплаты на эквайринговых терминалах.'") + Символы.ПС;
		ТекстВопроса = ТекстВопроса + НСтр("ru = 'Все операции оплаты на эквайринговых терминалах прошли успешно?'");
		
		ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеВопросУспешностиОплатыНаЭТ", ЭтотОбъект, Параметры);
		ПоказатьВопрос(ОбработчикОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	ИначеЕсли Параметры.КоличествоОплатЭТ = 1 И ЕстьОплатыБезПодтверждения Тогда
		//одна строка безналичной оплаты
		
		// Предварительно авторизуем операцию.
		ПараметрыФормы = Новый Структура();
		
		ПараметрыФормы.Вставить("Сумма"      , Параметры.ОплатаКарта);
		ПараметрыФормы.Вставить("ЗапретРедактированияСуммы", Истина);
		
		Если Параметры.ИспользоватьБезПодключенияОборудованияЭТ Тогда
			ПараметрыФормы.Вставить("ПоказыватьНомерКарты", Истина);
		КонецЕсли;
		
		ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуАвторизацииЭТ", ЭтотОбъект, Параметры);
		Режим = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ОткрытьФорму("Справочник.ПодключаемоеОборудование.Форма.ФормаАвторизацииЭТ", ПараметрыФормы,,,,, ОбработчикОповещения, Режим); 
		
	Иначе
		НапечататьЧекКлиент(Параметры.ИдентификаторУстройства, ВерсияФормата);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НапечататьЧекКлиент(ИдентификаторУстройства, ВерсияФормата)
	
	НомерСекции = 0;
	
	ЭтаФорма.Доступность = Ложь;
	Контекст = Новый Структура("ИдентификаторУстройства", ИдентификаторУстройства);
	Оповещение = Новый ОписаниеОповещения("НапечататьЧекКлиентЗавершение", ЭтотОбъект, Контекст);
		
	ПодключенноеОборудование = Новый Структура("Терминал, ФискальныеУстройства");
	ПодключенноеОборудование.ФискальныеУстройства = Новый Массив; 
	ПодключенноеОборудование.ФискальныеУстройства.Добавить(ИдентификаторУстройства);
	
	ПараметрыОперации = Новый Структура;
	ПараметрыОперации.Вставить("ДокументСсылка", Объект.Ссылка);
	ПараметрыОперации.Вставить("Организация", Объект.Организация);
	ПараметрыОперации.Вставить("Партнер", ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка"));
	ПараметрыОперации.Вставить("ПодключенноеОборудование", ПодключенноеОборудование);
	ПараметрыОперации.Вставить("ТорговыйОбъект", Неопределено);
	
	ОткрытьФорму(
		"Обработка.ПечатьЧека.Форма",
		ПараметрыОперации,
		ЭтотОбъект,,,,
		Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура НапечататьЧекКлиентЗавершение(РезультатВыполнения, ПараметрыОперации) Экспорт
	
	Если РезультатВыполнения = КодВозвратаДиалога.Отмена ИЛИ РезультатВыполнения = Неопределено Тогда
		ОтменитьПроведениеВПолнойВерсии();
		// Отмена в форме печати чека
		ЭтаФорма.Доступность = Истина;
	ИначеЕсли РезультатВыполнения.Свойство("Результат") И РезультатВыполнения.Результат Тогда
		// Установить полученное значение номера чека реквизиту документа.
		Объект.ИдентификаторУстройства = ?(ПараметрыОперации.Свойство("ИдентификаторУстройства"), ПараметрыОперации.ИдентификаторУстройства, Неопределено);
		Объект.НомерЧекаККМ = РезультатВыполнения.ВыходныеПараметры[1];
		ЭтаФорма.Доступность = Истина;
		Модифицированность  = Истина;
		РезультатЗаписи = Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
		Закрыть();
	Иначе
		ЭтаФорма.Доступность = Истина;
		ТекстСообщения = НСтр("ru = 'При печати чека произошла ошибка.
			|Чек не напечатан на фискальном устройстве.
			|Дополнительное описание: %ДополнительноеОписание%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

// Проводит документ, если используется простая версия конфигурации
//
&НаКлиенте
Процедура ПровестиДокументВПолнойВерсии()
	Если ИспользуетсяПолнаяВерсияКонфигурации Тогда
		РезультатЗаписи = Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
	КонецЕсли;
КонецПроцедуры

// Проводит документ, если используется простая версия конфигурации
//
&НаКлиенте
Процедура ОтменитьПроведениеВПолнойВерсии()
	Если ИспользуетсяПолнаяВерсияКонфигурации И Объект.Проведен Тогда
		РезультатЗаписи = Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.ОтменаПроведения));
	КонецЕсли;
КонецПроцедуры

#Область ЭквайринговыеОперации

&НаСервереБезКонтекста
Функция ПолучитьПараметрыЭТ(ДокументСсылка, Идентификатор)
	
	Результат = Новый Структура("ИдентификаторУстройстваЭТ, Сумма, ИспользоватьБезПодключенияОборудования");
	//запрос к тч Оплаты (берем первый из типов оплаты)
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЕСТЬNULL(ТаблицаОплата.ВидОплаты.ПодключаемоеОборудование, ЗНАЧЕНИЕ(Справочник.ПодключаемоеОборудование.ПустаяСсылка)) КАК ИдентификаторУстройстваЭТ,
	|	ТаблицаОплата.Сумма КАК Сумма,
	|	ТаблицаОплата.ВидОплаты.ИспользоватьБезПодключенияОборудования КАК ИспользоватьБезПодключенияОборудования
	|ИЗ
	|	Документ.ЧекККМ.Оплата КАК ТаблицаОплата
	|ГДЕ
	|	ТаблицаОплата.Ссылка = &ДокументСсылка";
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Результат, Выборка);
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПодключаемоеОборудование.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ПодключаемоеОборудование КАК ПодключаемоеОборудование
	|ГДЕ
	|	ПодключаемоеОборудование.Организация = &Организация
	|	И (ПодключаемоеОборудование.Ссылка = &Идентификатор
	|		ИЛИ ПодключаемоеОборудование.ИдентификаторУстройства = &Идентификатор)";
	Запрос.УстановитьПараметр("Организация"  , ДокументСсылка.Организация);
	Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Результат.Вставить("СоответствиеОрганизации", Выборка.Следующий());
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОперацияПоПлатежнойКартеЗавершение(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	Если НЕ РезультатВыполнения.Результат Тогда
		ЭтаФорма.Доступность = Истина; // Разблокировка интерфейса пользователя.
		ОтменитьПроведениеВПолнойВерсии();
		ТекстСообщения = НСтр("ru = 'При выполнении операции произошла ошибка:""%ОписаниеОшибки%"".'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	Иначе
		
		ПризнакПередачиДанныхВБанк = Истина;
		Если ДополнительныеПараметры.Свойство("ИдентификаторТекущейСтроки") Тогда
			// выполнение операции по конкретной строке табличной части
			Если ДополнительныеПараметры.Свойство("ИзменитьТипТранзакции") Тогда
				ПризнакПередачиДанныхВБанк = Ложь;
			КонецЕсли;
			
			ТекущаяСтрока = Объект.Оплата.НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторТекущейСтроки);
			Если НЕ ТекущаяСтрока = Неопределено Тогда
				// Отмена передачи
				ТекущаяСтрока.СсылочныйНомер       = РезультатВыполнения.СсылочныйНомер;
				ТекущаяСтрока.НомерПлатежнойКарты  = РезультатВыполнения.НомерКарты;
				ТекущаяСтрока.НомерЧекаЭТ          = РезультатВыполнения.НомерЧекаЭТ;
				ТекущаяСтрока.ДанныеПереданыВБанк  = ПризнакПередачиДанныхВБанк;
			КонецЕсли;
			
		Иначе
			// выполнение операции по всему документу
			Если Объект.Оплата.Количество() = 1 Тогда
				Объект.Оплата[0].СсылочныйНомер       = РезультатВыполнения.СсылочныйНомер;
				Объект.Оплата[0].НомерПлатежнойКарты  = РезультатВыполнения.НомерКарты;
				Объект.Оплата[0].НомерЧекаЭТ          = РезультатВыполнения.НомерЧекаЭТ;
				Объект.Оплата[0].ДанныеПереданыВБанк  = ПризнакПередачиДанныхВБанк;
			КонецЕсли;
			
		КонецЕсли;
		
		//Записываем документ, чтобы сохранить информацию о банковской оплате
		РезультатЗаписи = Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Запись));
		
		ПараметрыОплаты = Новый Структура();
		ПараметрыОплаты.Вставить("СсылочныйНомер",  РезультатВыполнения.СсылочныйНомер);
		ПараметрыОплаты.Вставить("НомерКарты",      РезультатВыполнения.НомерКарты);
		ПараметрыОплаты.Вставить("НомерЧекаЭТ",     РезультатВыполнения.НомерЧекаЭТ);
		
		ДополнительныеПараметры.Вставить("ПараметрыОплаты", ПараметрыОплаты);
		
		// Печатаем фискальный чек
		Если ДополнительныеПараметры.ИдентификаторУстройства <> Неопределено Тогда
			НапечататьЧекКлиент(ДополнительныеПараметры.ИдентификаторУстройства, Неопределено);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеВопросУспешностиОплатыНаЭТ(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	РезультатОперации = (РезультатВопроса = КодВозвратаДиалога.Да);
	
	Если НЕ РезультатОперации Тогда
		ЭтаФорма.Доступность = Истина; // Разблокировка интерфейса пользователя.
		ТекстСообщения = НСтр("ru = 'Операция отменена.'");
		ОтменитьПроведениеВПолнойВерсии();
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	Иначе
		
		ПризнакПередачиДанныхВБанк = Истина;
		Если ДополнительныеПараметры.Свойство("ИдентификаторТекущейСтроки") Тогда
			// выполнение операции по конкретной строке табличной части
			Если ДополнительныеПараметры.Свойство("ИзменитьТипТранзакции") Тогда
				ПризнакПередачиДанныхВБанк = Ложь;
			КонецЕсли;
			
			ТекущаяСтрока = Объект.Оплата.НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторТекущейСтроки);
			Если НЕ ТекущаяСтрока = Неопределено Тогда
				// Отмена передачи
				ТекущаяСтрока.ДанныеПереданыВБанк  = ПризнакПередачиДанныхВБанк;
			КонецЕсли;
			
		Иначе
			// выполнение операции по всему документу
			Для каждого СтрокаОплаты Из Объект.Оплата Цикл
				СтрокаОплаты.ДанныеПереданыВБанк = ПризнакПередачиДанныхВБанк;
			КонецЦикла;
		КонецЕсли;
		
		//Записываем документ, чтобы сохранить информацию о банковской оплате
		РезультатЗаписи = Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Запись));
		// Печатаем фискальный чек
		Если ДополнительныеПараметры.ИдентификаторУстройства <> Неопределено Тогда
			НапечататьЧекКлиент(ДополнительныеПараметры.ИдентификаторУстройства, Неопределено);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуАвторизацииЭТ(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатОткрытияФормы) = Тип("Структура") Тогда
		
		Если НЕ ДополнительныеПараметры.ИспользоватьБезПодключенияОборудованияЭТ Тогда
			
			ОповещениеПриЗавершенииОперации = Новый ОписаниеОповещения("ОперацияПоПлатежнойКартеЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			
			ПараметрыОперации = МенеджерОборудованияКлиент.ПараметрыВыполненияЭквайринговойОперации();
			
			Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРозничнаяПродажа.Продажа") Тогда
				Если ДополнительныеПараметры.Свойство("ИзменитьТипТранзакции") Тогда
					ПараметрыОперации.ТипТранзакции  = "AuthorizeRefund";
				Иначе
					ПараметрыОперации.ТипТранзакции  = "AuthorizeSales";
				КонецЕсли;
			Иначе
				ПараметрыОперации.ТипТранзакции  = "AuthorizeRefund";
			КонецЕсли;
			
			ПараметрыОперации.СуммаОперации  = РезультатОткрытияФормы.Сумма;
			ПараметрыОперации.НомерЧека      = РезультатОткрытияФормы.НомерЧека;
			ПараметрыОперации.СсылочныйНомер = РезультатОткрытияФормы.СсылочныйНомер;
			
			МенеджерОборудованияКлиент.НачатьВыполнениеОперацииНаЭквайринговомТерминале(ОповещениеПриЗавершенииОперации, УникальныйИдентификатор, 
				ДополнительныеПараметры.ИдентификаторУстройстваЭТ, ДополнительныеПараметры.ИдентификаторУстройства, ПараметрыОперации);
			
		Иначе
			
			Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРозничнаяПродажа.Продажа") Тогда
				Если ДополнительныеПараметры.Свойство("ИзменитьТипТранзакции") Тогда
					
					ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Требуется выполнить операцию отмены оплаты на эквайринговом терминале.
																									  |Сумма операции: %1
																									  |
																									  |Операция отмены оплаты на эквайринговом терминале прошла успешно?'"),РезультатОткрытияФормы.Сумма);
					
				Иначе
					
					ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Требуется выполнить операцию оплаты на эквайринговом терминале.
																									  |Сумма операции: %1
																									  |
																									  |Операция оплаты на эквайринговом терминале прошла успешно?'"),РезультатОткрытияФормы.Сумма);	
					
				КонецЕсли;
			Иначе
								
				ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Требуется выполнить операцию отмены оплаты на эквайринговом терминале.
																								  |Сумма операции: %1
																								  |
																								  |Операция отмены оплаты на эквайринговом терминале прошла успешно?'"),РезультатОткрытияФормы.Сумма);	
				
			КонецЕсли;
						
			ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеВопросУспешностиОплатыНаЭТ", ЭтотОбъект, ДополнительныеПараметры);
			ПоказатьВопрос(ОбработчикОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиОплатуЧерезТерминал(Команда)
	
	ТекущаяСтрока = Элементы.Оплата.ТекущиеДанные;
	
	Если ТекущаяСтрока = Неопределено Тогда
		СтрокаСообщения = НСтр("ru = 'Необходимо выбрать строку оплаты платежной картой'");
		ПоказатьПредупреждение(, СтрокаСообщения);
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.ВидОплаты) Тогда
		
		СтрокаСообщения = НСтр("ru = 'Не заполнен вид оплаты в строке'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			СтрокаСообщения,,
			"Оплата[" + (ТекущаяСтрока.НомерСтроки - 1) + "].ВидОплаты",
			"Объект");
		
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.Сумма) Тогда
		
		СтрокаСообщения = НСтр("ru = 'Необходимо ввести сумму платежа'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			СтрокаСообщения,,
			"Оплата[" + (ТекущаяСтрока.НомерСтроки - 1) + "].Сумма",
			"Объект");
		
		Возврат;
	КонецЕсли;
	
	ИдентификаторТекущейСтроки = ТекущаяСтрока.ПолучитьИдентификатор();
	
	ДополнительныеПараметры = Новый Структура; 
	ДополнительныеПараметры.Вставить("ИдентификаторТекущейСтроки", ИдентификаторТекущейСтроки);
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРозничнаяПродажа.Продажа") Тогда
		
		Если НЕ ТекущаяСтрока.ДанныеПереданыВБанк Тогда
			
			// Передача данных в банк
			ПараметрыЭТ = ПолучитьПараметрыВидаОплаты(ТекущаяСтрока.ВидОплаты);
			
			ДополнительныеПараметры.Вставить("ИдентификаторУстройства", Неопределено);
			ДополнительныеПараметры.Вставить("ИдентификаторУстройстваЭТ", ПараметрыЭТ.ПодключаемоеОборудование);
			ДополнительныеПараметры.Вставить("ИспользоватьБезПодключенияОборудованияЭТ", ПараметрыЭТ.ИспользоватьБезПодключенияОборудования);
			
			// Предварительно авторизуем операцию.
			ПараметрыФормы = Новый Структура();
			ПараметрыФормы.Вставить("Сумма"      , ТекущаяСтрока.Сумма);
			ПараметрыФормы.Вставить("ЗапретРедактированияСуммы", Истина);
			
			Если ДополнительныеПараметры.ИспользоватьБезПодключенияОборудованияЭТ Тогда
				ПараметрыФормы.Вставить("ПоказыватьНомерКарты", Истина);
			КонецЕсли;
			
			ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуАвторизацииЭТ", ЭтотОбъект, ДополнительныеПараметры);
			Режим = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
			ОткрытьФорму("Справочник.ПодключаемоеОборудование.Форма.ФормаАвторизацииЭТ", ПараметрыФормы,,,,, ОбработчикОповещения, Режим); 
			
		Иначе
			// Вопрос
			ТекстВопроса = НСтр("ru = 'Данные об оплате уже переданы в банк'") + Символы.ПС; 
			ТекстВопроса = ТекстВопроса + НСтр("ru = 'Вы хотите отменить эту операцию?'"); 
			
			ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеВопросОтменаОплатыКартой", ЭтотОбъект, ДополнительныеПараметры);
			ПоказатьВопрос(ОбработчикОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		КонецЕсли;
	Иначе
		
		Если НЕ ТекущаяСтрока.ДанныеПереданыВБанк Тогда
			
			ПараметрыЭТ = ПолучитьПараметрыВидаОплаты(ТекущаяСтрока.ВидОплаты);
			
			ДополнительныеПараметры.Вставить("ИдентификаторУстройства", Неопределено);
			ДополнительныеПараметры.Вставить("ИдентификаторУстройстваЭТ", ПараметрыЭТ.ПодключаемоеОборудование);
			ДополнительныеПараметры.Вставить("ИспользоватьБезПодключенияОборудованияЭТ", ПараметрыЭТ.ИспользоватьБезПодключенияОборудования);
			
			// Предварительно авторизуем операцию.
			ПараметрыФормы = Новый Структура();
			ПараметрыФормы.Вставить("Сумма"      , ТекущаяСтрока.Сумма);
			ПараметрыФормы.Вставить("ЗапретРедактированияСуммы", Истина);
			
			Если ДополнительныеПараметры.ИспользоватьБезПодключенияОборудованияЭТ Тогда
				ПараметрыФормы.Вставить("ПоказыватьНомерКарты", Истина);
			КонецЕсли;
			
			ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуАвторизацииЭТ", ЭтотОбъект, ДополнительныеПараметры);
			Режим = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
			ОткрытьФорму("Справочник.ПодключаемоеОборудование.Форма.ФормаАвторизацииЭТ", ПараметрыФормы,,,,, ОбработчикОповещения, Режим); 
			
		Иначе
			СтрокаСообщения = НСтр("ru = 'Данные об отмене/возврате оплаты в банк уже переданы.'");
			
			ОбщегоНазначенияКлиент.СообщитьПользователю(
				СтрокаСообщения,,
				"Оплата[" + (ТекущаяСтрока.НомерСтроки - 1) + "]",
				"Объект"
				);
			
		КонецЕсли;
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеВопросОтменаОплатыКартой(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ТекущаяСтрока = Объект.Оплата.НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторТекущейСтроки);
		Если НЕ ТекущаяСтрока = Неопределено Тогда
			// Отмена передачи
			ОтменитьОплатуКартой(ТекущаяСтрока);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьОплатуКартой(ТекущаяСтрока)
	
	// Передача данных в банк
	ПараметрыЭТ = ПолучитьПараметрыВидаОплаты(ТекущаяСтрока.ВидОплаты);
	ИдентификаторТекущейСтроки = ТекущаяСтрока.ПолучитьИдентификатор();
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИдентификаторУстройства", Неопределено);
	ДополнительныеПараметры.Вставить("ИдентификаторУстройстваЭТ", ПараметрыЭТ.ПодключаемоеОборудование);
	ДополнительныеПараметры.Вставить("ИспользоватьБезПодключенияОборудованияЭТ", ПараметрыЭТ.ИспользоватьБезПодключенияОборудования);
	ДополнительныеПараметры.Вставить("ИзменитьТипТранзакции", Истина);
	ДополнительныеПараметры.Вставить("ИдентификаторТекущейСтроки", ИдентификаторТекущейСтроки);
	
	// Предварительно авторизуем операцию.
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Сумма"      , ТекущаяСтрока.Сумма);
	ПараметрыФормы.Вставить("ЗапретРедактированияСуммы", Истина);
	
	Если ДополнительныеПараметры.ИспользоватьБезПодключенияОборудованияЭТ Тогда
		ПараметрыФормы.Вставить("ПоказыватьНомерКарты", Истина);
	КонецЕсли;
	
	ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуАвторизацииЭТ", ЭтотОбъект, ДополнительныеПараметры);
	Режим = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ОткрытьФорму("Справочник.ПодключаемоеОборудование.Форма.ФормаАвторизацииЭТ", ПараметрыФормы,,,,, ОбработчикОповещения, Режим); 
	
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПараметрыВидаОплаты(ВидОплаты)
	
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВидОплаты, "ПодключаемоеОборудование, ИспользоватьБезПодключенияОборудования");
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ГосИС

&НаСервере
Функция Подключаемый_ОбработатьВводШтрихкода(ДанныеШтрихкода, КэшированныеЗначения, ПараметрыСканирования)
	
	//ШтрихкодированиеИС
	//РезультатОбработкиШтрихкода = ШтрихкодированиеИС.ОбработатьВводШтрихкода(ЭтотОбъект, ДанныеШтрихкода, КэшированныеЗначения, ПараметрыСканирования);
	//
	//ПослеОбработкиШтрихкодов(
	//	РезультатОбработкиШтрихкода,
	//	КэшированныеЗначения);
	//
	//РезультатОбработкиШтрихкода.ИзмененныеСтроки  = Неопределено;
	//РезультатОбработкиШтрихкода.ДобавленныеСтроки = Неопределено;
	//
	//Возврат РезультатОбработкиШтрихкода;
	Возврат Неопределено;
	
КонецФункции

//ШтрихкодированиеИС
&НаСервере
Функция Подключаемый_ВыполнитьДействие(Действие, РезультатВыбора, РезультатОбработкиШтрихкода, КэшированныеЗначения)
	
	//ПараметрыОбработкиВыбора    = ШтрихкодированиеИС.ИнициализироватьПараметрыОбработкиВыбора(РезультатВыбора, РезультатОбработкиШтрихкода, КэшированныеЗначения);
	//РезультатОбработкиШтрихкода = ШтрихкодированиеИС.ВыполнитьДействие(ЭтотОбъект, Действие, ПараметрыОбработкиВыбора);
	//
	//ПослеОбработкиШтрихкодов(
	//	РезультатОбработкиШтрихкода,
	//	КэшированныеЗначения);
	//
	//РезультатОбработкиШтрихкода.ИзмененныеСтроки  = Неопределено;
	//РезультатОбработкиШтрихкода.ДобавленныеСтроки = Неопределено;
	//
	//Возврат РезультатОбработкиШтрихкода;
	Возврат Неопределено;
	
КонецФункции

//ШтрихкодированиеИС
&НаКлиенте
Процедура Подключаемый_ПослеОбработкиШтрихкодов()
	
	//ШтрихкодированиеИСКлиентПереопределяемый.ПослеОбработкиШтрихкодов(
	//	ЭтотОбъект,
	//	ДанныеДляОбработки,
	//	КэшированныеЗначения);
	
КонецПроцедуры
	
&НаКлиенте
Процедура ПоискПоШтрихкодуЗавершение(ДанныеШтрихкода, ДополнительныеПараметры) Экспорт
	
	//ШтрихкодированиеИСКлиент.ОбработатьВводШтрихкода(
	//		ЭтотОбъект,
	//		ДанныеШтрихкода,
	//		КэшированныеЗначения);
			
	Если ДанныеШтрихкода <> Неопределено Тогда
		ДобавитьНоменклатуруПоШтрихкодуНаСервере(ДанныеШтрихкода.Номенклатура, ДанныеШтрихкода.Штрихкод);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти 

&НаСервере
Процедура ОбработатьИзмененияВОрганизацииНаСервере()
	
	// +++ Проверка заполненности реквизитов организации (касса)
	ИспользоватьНесколькоКассОрганизации = Справочники.Кассы.ИспользуетсяНесколькоКасс(СтруктурноеПодразделениеОрганизация);
	ОсновнаяКассаОрганизацииЗаполнена = ПроверкаРеквизитовОрганизации.ОсновнаяКассаОрганизацииЗаполнена(СтруктурноеПодразделениеОрганизация);
	ПроверкаРеквизитовОрганизации.ОтобразитьПредупреждениеОЗаполненииРеквизитовКассы(ЭтотОбъект);
	
	Если НЕ ИспользоватьНесколькоКассОрганизации И ОсновнаяКассаОрганизацииЗаполнена И Не ЗначениеЗаполнено(Объект.Касса) Тогда
		Объект.Касса = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Организация, "ОсновнаяКасса");
	КонецЕсли;
	// --- Проверка заполненности реквизитов организации (касса)

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьРеквизитыНалоговогоУчетаНаСервере(СтрокаТабличнойЧасти, ИмяТабличнойЧасти, ПараметрыОбъекта, СчетаУчетаКЗаполнению)
		
	ЗаполненныеСчета = СчетаУчетаВДокументах.ЗаполнитьРеквизитыПриИзменении(
		Документы.ЧекККМ,
		СчетаУчетаКЗаполнению,
		ПараметрыОбъекта,
		ИмяТабличнойЧасти,
		СтрокаТабличнойЧасти);
	
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ЗаполненныеСчета);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаОповещенияОбработкиТабличнойЧастиТоварыНаСервере(Параметры)

	СтрокиДляДополнительнойОбработки = Обработки.ОбработкаТабличнойЧастиТовары.ЗагрузитьТабличнуюЧастьВДанныеФормы(Объект.Товары, Параметры);
	
	СчетаУчетаВДокументах.ЗаполнитьСтроки(СтрокиДляДополнительнойОбработки, "Товары", Объект, Документы.ЧекККМ, Истина);
	
	ОбновитьИтоги(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаОповещенияОбработкиТабличнойЧастиНаСервере(Параметры)

	ТаблицаОбработки  = ПолучитьИзВременногоХранилища(Параметры.АдресОбработаннойТабличнойЧастиВХранилище);
	ИмяТабличнойЧасти = Параметры.ИмяТаблицы;
	
	Объект[ИмяТабличнойЧасти].Загрузить(ТаблицаОбработки);
	ЗаполнитьДобавленныеКолонкиТаблиц("Услуги");
		
	УправлениеФормой(ЭтаФорма);         
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьКомандыВставки(Форма, Доступность)
	
	БлокироватьВставку = ОбщегоНазначенияБККлиентСервер.ЭтоПростаяВерсияКонфигурации() И Форма.Объект.Проведен;

	Доступность = Не Форма.ТолькоПросмотр И Доступность И НЕ БлокироватьВставку;
	Элементы = Форма.Элементы;
	Элементы.ТоварыВставитьСтроки.Доступность = Доступность;
	Элементы.УслугиВставитьСтроки.Доступность = Доступность;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьПараметрыОбработкиТабличнойЧастиТовары()
	
	ПараметрыОбработки = Новый Структура;
	
	ПараметрыОбработки.Вставить("АдресХранилищаТовары", 		ПоместитьТабличнуюЧастьВоВременноеХранилищеНаСервере("Товары"));
	
	ПараметрыОбработки.Вставить("ДокументСсылка", 				Объект.Ссылка);
	ПараметрыОбработки.Вставить("ДокументДата", 				Объект.Дата);
	ПараметрыОбработки.Вставить("ДокументОрганизация", 			Объект.Организация);
	ПараметрыОбработки.Вставить("ДокументВалюта", 			    Объект.ВалютаДокумента);
	ПараметрыОбработки.Вставить("ДокументКурс", 			    Объект.КурсВзаиморасчетов);
	ПараметрыОбработки.Вставить("ДокументКратность", 			Объект.КратностьВзаиморасчетов);
	ПараметрыОбработки.Вставить("ДокументСуммаВключаетНДС", 	Объект.СуммаВключаетНДС);
	ПараметрыОбработки.Вставить("ДокументУчитыватьНДС", 		Объект.УчитыватьНДС); 
	ПараметрыОбработки.Вставить("ДокументТипЦен", 				Объект.ТипЦен);	

	Возврат ПараметрыОбработки;
	
КонецФункции

&НаСервере
Функция ПоместитьТабличнуюЧастьВоВременноеХранилищеНаСервере(ИмяТабличнойЧасти)

	Возврат ПоместитьВоВременноеХранилище(Объект[ИмяТабличнойЧасти].Выгрузить(), УникальныйИдентификатор);

КонецФункции

&НаСервере
Процедура  ПослеОбработкиШтрихкодов(РезультатОбработкиШтрихкода,КэшированныеЗначения)
	
	Если РезультатОбработкиШтрихкода.ТребуетсяОбработкаШтрихкода Тогда
		
		Если ТипЗнч(РезультатОбработкиШтрихкода.ИсходныеДанные) = Тип("Структура") Тогда
			ДанныеШтрихкодов = Новый Массив;
			ДанныеШтрихкодов.Добавить(РезультатОбработкиШтрихкода.ИсходныеДанные);
		Иначе
			ДанныеШтрихкодов = РезультатОбработкиШтрихкода.ИсходныеДанные;
		КонецЕсли;
		
		//ПараметрыЗаполнения = ИнтеграцияЕГАИСКлиентСервер.ПараметрыЗаполненияТабличнойЧасти();
		//ПараметрыЗаполнения.ПересчитатьКоличествоЕдиниц   = Истина;
		//ПараметрыЗаполнения.МаркируемаяПродукцияВТЧ       = Истина;
		//ПараметрыЗаполнения.ЗаполнитьАлкогольнуюПродукцию = Истина;
		
		//ШтрихкодированиеИС
		//ДанныеДляОбработки = Неопределено;
		//ШтрихкодированиеИСПереопределяемый.ПодготовитьДанныеДляОбработкиШтрихкодов(
			//ЭтотОбъект, ДанныеШтрихкодов, ПараметрыЗаполнения, ДанныеДляОбработки);
		
		//ШтрихкодированиеИС
		//ШтрихкодированиеИСПереопределяемый.ОбработатьШтрихкоды(
		//	ЭтотОбъект, ДанныеДляОбработки, КэшированныеЗначения);
			
		// Если это не алкогольная продукция, и номенклатура по штрихкоду найдена - добавим ее
		Если ДанныеДляОбработки.МассивСтрокСАкцизнымиМарками.Количество() = 0 
				И ДанныеДляОбработки.ТекущаяСтрока <> Неопределено Тогда
				
			ТекущаяСтрока = Объект.Товары.НайтиПоИдентификатору(ДанныеДляОбработки.ТекущаяСтрока);
			
			ДобавленныеСтроки = Новый Массив;
			ИзмененныеСтроки  = Новый Массив;
			Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.СтавкаНДС) Тогда
				ДобавленныеСтроки.Добавить(ТекущаяСтрока);
			Иначе
				ИзмененныеСтроки.Добавить(ТекущаяСтрока);
			КонецЕсли; 
			
			ОбработатьСтрокиТЧ(
				ДобавленныеСтроки,
				ИзмененныеСтроки,
				КэшированныеЗначения);
				
			ОбновитьИтоги(ЭтотОбъект);
			
		КонецЕсли; 
	Иначе
			
		ОбработатьСтрокиТЧ(
			РезультатОбработкиШтрихкода.ДобавленныеСтроки,
			РезультатОбработкиШтрихкода.ИзмененныеСтроки,
			КэшированныеЗначения);
			
		ОбновитьИтоги(ЭтотОбъект);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбработатьСтрокиТЧ(ДобавленныеСтроки, ИзмененныеСтроки, КэшированныеЗначения)
	Перем СведенияОСпискеНоменклатуры;
	
	МассивНоменклатуры = ОбщегоНазначения.ВыгрузитьКолонку(ДобавленныеСтроки, "Номенклатура", Истина);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
		МассивНоменклатуры, 
		ОбщегоНазначения.ВыгрузитьКолонку(ИзмененныеСтроки, "Номенклатура", Истина), 
		Истина);
	
	ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияЗначенияИзМассива(МассивНоменклатуры, Справочники.Номенклатура.ПустаяСсылка());
	
	ДанныеОбъекта = Новый Структура("Дата, Организация, Склад, ТипЦен, СуммаВключаетНДС, УчитыватьНДС");
		
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	Если Не ЗначениеЗаполнено(ДанныеОбъекта.ТипЦен) Тогда
		ДанныеОбъекта.Вставить("СпособЗаполненияЦены", Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры);
	КонецЕсли;
	
	ДанныеОбъекта.Вставить("Реализация", Истина);
	
	Если МассивНоменклатуры.Количество() > 0 Тогда
		СведенияОСпискеНоменклатуры = ОбработкаТабличныхЧастей.ПолучитьСведенияОСпискеНоменклатуры(МассивНоменклатуры, ДанныеОбъекта);
	Иначе
		СведенияОСпискеНоменклатуры = Новый Соответствие;
	КонецЕсли;
	
	Для каждого СтрокаТабличнойЧасти Из ДобавленныеСтроки Цикл
		СведенияОНоменклатуре = СведенияОСпискеНоменклатуры[СтрокаТабличнойЧасти.Номенклатура];
		
		Если ЗначениеЗаполнено(ДанныеОбъекта.ТипЦен) Тогда
			ЦенаВключаетНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ТипЦен, "ЦенаВключаетНДС");
		Иначе
			ЦенаВключаетНДС = ДанныеОбъекта.СуммаВключаетНДС;
		КонецЕсли;
		
		Если СведенияОНоменклатуре <> Неопределено Тогда
			СтрокаТабличнойЧасти.СтавкаНДС = СведенияОНоменклатуре.СтавкаНДС;
			УчитыватьНДС = Истина;
			СтрокаТабличнойЧасти.Цена = ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(
				СведенияОНоменклатуре.Цена, Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры, ЦенаВключаетНДС, УчитыватьНДС, ДанныеОбъекта.СуммаВключаетНДС,
				УчетНДСиАкцизаВызовСервераПовтИсп.ПолучитьСтавкуНДС(СведенияОНоменклатуре.СтавкаНДС));
		КонецЕсли;
		
		Если ЦенаВключаетНДС <> ДанныеОбъекта.СуммаВключаетНДС Тогда
			СтрокаТабличнойЧасти.Цена = ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(СтрокаТабличнойЧасти.Цена, Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры, ЦенаВключаетНДС, УчитыватьНДС, ДанныеОбъекта.СуммаВключаетНДС,
				УчетНДСиАкцизаВызовСервераПовтИсп.ПолучитьСтавкуНДС(СведенияОНоменклатуре.СтавкаНДС));
		КонецЕсли;
	КонецЦикла; 
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ИзмененныеСтроки, ДобавленныеСтроки);
	СтруктураПересчетаСуммы = ОбработкаТабличныхЧастейКлиентСервер.ПодготовитьСтруктуруДляРасчетаСумм(Объект);
	
	Для каждого СтрокаТабличнойЧасти Из ИзмененныеСтроки Цикл
		СведенияОНоменклатуре = СведенияОСпискеНоменклатуры[СтрокаТабличнойЧасти.Номенклатура];
		
		// Рассчитываем реквизиты табличной части
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, СтруктураПересчетаСуммы);
		
		ЗаполнитьДобавленныеКолонкиСтрокиТаблицыТовары(СтрокаТабличнойЧасти, ДанныеОбъекта.СуммаВключаетНДС, СведенияОНоменклатуре);
		
	КонецЦикла; 

КонецПроцедуры 

// Процедура показывает новости, требующие прочтения (важные и очень важные)
//
// Параметры:
//  Нет
//
&НаКлиенте
Процедура Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии()

	// ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	// Конец ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии

	ОбработкаНовостейКлиент.КонтекстныеНовости_ПоказатьНовостиТребующиеПрочтенияПриОткрытии(ЭтаФорма, ИдентификаторыСобытийПриОткрытии);

КонецПроцедуры

&НаСервере
Функция ПолучитьСведенияОСпискеНоменклатуры(ТаблицаТоваров)
	ДанныеОбъекта = Новый Структура("Дата, Организация, Склад, УчитыватьНДС");
	
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	ДанныеОбъекта.Вставить("Реализация", Истина);
	
	СписокНоменклатуры = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаТоваров, "Номенклатура", Истина);
	
	Возврат ОбработкаТабличныхЧастей.ПолучитьСведенияОСпискеНоменклатуры(СписокНоменклатуры, ДанныеОбъекта);
КонецФункции 

&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИмяТаблицы)
	
	Если ИмяТаблицы <> "Товары" И ИмяТаблицы <> "Услуги" Тогда
		// Ошибочное имя табличной части
		Возврат;
	КонецЕсли;
	
	ЭтоВставкаИзБуфера = ВыбранноеЗначение.Свойство("ЭтоВставкаИзБуфера");
	
	СписокСвойств = Неопределено;
	Если ЭтоВставкаИзБуфера Тогда
		ТаблицаТоваров = ВыбранноеЗначение.Данные;
		СписокСвойств = ВыбранноеЗначение.СписокСвойств;
	Иначе
		ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресПодобраннойНоменклатурыВХранилище);
	КонецЕсли;
	
	ЕстьШтрихкод      = ТаблицаТоваров.Колонки.Найти("Штрихкод") <> Неопределено;
	ЕстьКодМаркировки = ТаблицаТоваров.Колонки.Найти("КодМаркировки") <> Неопределено;
	
	ДанныеОбъекта = Новый Структура("ТипЦен, СуммаВключаетНДС");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	СоответствиеСведенийОНоменклатуре = ПолучитьСведенияОСпискеНоменклатуры(ТаблицаТоваров);
	
	СтрокиДляЗаполненияСчетов = Новый Массив;
	
	СтруктураОтбора = Новый Структура();
	
	Для Каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		СтрокаТабличнойЧасти = Неопределено;
		Если НЕ ЭтоВставкаИзБуфера Тогда
			
			СтруктураОтбора.Очистить();
			
			Если ВестиУчетМаркируемойПродукцииИСМПТК 
				И РозничноеВыбытиеИСМПТКВызовСервера.ЕстьПравоЧтенияОбработкаРозничноеВыбытиеИСМПТК() Тогда
				Если ЕстьКодМаркировки И СтрокаТовара.КодМаркировки <> "" Тогда
					СтруктураОтбора.Вставить("КодМаркировки", СтрокаТовара.КодМаркировки);
					СтрокаТабличнойЧасти = ОбработкаТабличныхЧастейКлиентСервер.НайтиСтрокуТабЧасти(Объект, ИмяТаблицы, СтруктураОтбора);
					Если СтрокаТабличнойЧасти <> Неопределено Тогда
						ТекстСообщения = НСтр("ru = 'Данный код маркировки уже указан в документе!'");
						ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
						Продолжить;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			// Ищем выбранную позицию в таблице подобранной номенклатуры.
			// Если найдем - увеличим количество; не найдем - добавим новую строку.
			СтруктураОтбора.Вставить("Номенклатура", СтрокаТовара.Номенклатура);
			Если ЗначениеЗаполнено(СтрокаТовара.Цена) Тогда
				СтруктураОтбора.Вставить("Цена", СтрокаТовара.Цена);
			КонецЕсли;
			
			СтрокаТабличнойЧасти = ОбработкаТабличныхЧастейКлиентСервер.НайтиСтрокуТабЧасти(Объект, ИмяТаблицы, СтруктураОтбора);
			
			Если ВестиУчетМаркируемойПродукцииИСМПТК И СтрокаТабличнойЧасти <> Неопределено И ИмяТаблицы = "Товары" 
				И РозничноеВыбытиеИСМПТКВызовСервера.ЕстьПравоЧтенияОбработкаРозничноеВыбытиеИСМПТК() Тогда
				Если СтрокаТабличнойЧасти.ЭтоМаркируемаяПродукция И ЕстьКодМаркировки И СтрокаТовара.КодМаркировки <> "" Тогда
					// Для маркируемой продукции создается новая строка
					СтрокаТабличнойЧасти = Неопределено;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		Если СтрокаТабличнойЧасти <> Неопределено Тогда
			
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + СтрокаТовара.Количество;
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Объект);
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВсегоТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);
		
			Если ЕстьШтрихкод Тогда
				СтрокаТабличнойЧасти.Штрихкод = СтрокаТовара.Штрихкод;
			КонецЕсли;

		Иначе
			
			СведенияОНоменклатуре = СоответствиеСведенийОНоменклатуре.Получить(СтрокаТовара.Номенклатура);
			
			Если ЭтоВставкаИзБуфера 
				И СведенияОНоменклатуре <> Неопределено
				И ЗначениеЗаполнено(СведенияОНоменклатуре.Услуга) Тогда
				Если СведенияОНоменклатуре.Услуга Тогда
					Если ИмяТаблицы = "Товары" Тогда
						Продолжить;
					КонецЕсли;
				Иначе
					
					Если ИмяТаблицы = "Услуги" Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;

			// Не нашли - добавляем новую строку.
			СтрокаТабличнойЧасти = Объект[ИмяТаблицы].Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТовара);
			СтрокиДляЗаполненияСчетов.Добавить(СтрокаТабличнойЧасти);
			
			Если ИмяТаблицы = "Товары" Тогда
				СтрокаТабличнойЧасти.Коэффициент = СведенияОНоменклатуре.Коэффициент;
				Если ЭтоВставкаИзБуфера Тогда
					СтрокаТабличнойЧасти.КодМаркировки = "";
				КонецЕсли;
				Если ВестиУчетМаркируемойПродукцииИСМПТК 
					И РозничноеВыбытиеИСМПТКВызовСервера.ЕстьПравоЧтенияОбработкаРозничноеВыбытиеИСМПТК() Тогда
					ЗаполнитьДанныеМаркировкиВСтроке(СтрокаТабличнойЧасти);
					Если СтрокаТабличнойЧасти.ЭтоМаркируемаяПродукция Тогда
						СтрокаТабличнойЧасти.Количество = 1;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если ИмяТаблицы = "Услуги" Тогда
				СтрокаТабличнойЧасти.Содержание = СведенияОНоменклатуре.НаименованиеПолное;
			КонецЕсли;
			
			СтрокаТабличнойЧасти.СтавкаНДС = СведенияОНоменклатуре.СтавкаНДС; 
			
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);	
						
		КонецЕсли;
		
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Объект);
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВсегоТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);
		
	КонецЦикла;
	
	СчетаУчетаВДокументах.ЗаполнитьСтроки(СтрокиДляЗаполненияСчетов, ИмяТаблицы, Объект, Документы.ЧекККМ);
	
	УстановитьДоступностьСубконто(ИмяТаблицы);
	
	ОбновитьИтоги(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьНоменклатуруНаСервере(СтрокаТовара, СведенияОНоменклатуре, ДанныеОбъекта, ИмяТаблицы)
	
	Если ЗначениеЗаполнено(ДанныеОбъекта.ТипЦен) Тогда
		ЦенаВключаетНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ТипЦен, "ЦенаВключаетНДС");
	Иначе
		ЦенаВключаетНДС = ДанныеОбъекта.СуммаВключаетНДС;
	КонецЕсли;
	
	Если СведенияОНоменклатуре = Неопределено Тогда
		Цена = СтрокаТовара.Цена;
	Иначе
		Цена = ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(
			СтрокаТовара.Цена, Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры, ЦенаВключаетНДС, Истина, ДанныеОбъекта.СуммаВключаетНДС,
			УчетНДСиАкцизаВызовСервераПовтИсп.ПолучитьСтавкуНДС(СведенияОНоменклатуре.СтавкаНДС));
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура("Номенклатура, Цена", 
		СтрокаТовара.Номенклатура,
		Окр(Цена,2,1));
		
	СтрокаТабличнойЧасти = НайтиСтрокуТабличнойЧасти("Товары", СтруктураОтбора);
	
	Если СтрокаТабличнойЧасти <> Неопределено Тогда
		// Нашли - увеличиваем количество.
		СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + СтрокаТовара.Количество;
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
	Иначе
		СтрокаТабличнойЧасти = Объект[ИмяТаблицы].Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТовара);
		
		Если СведенияОНоменклатуре <> Неопределено Тогда
				
			СтрокаТабличнойЧасти.СтавкаНДС = СведенияОНоменклатуре.СтавкаНДС;
		КонецЕсли;
		
		Если ЦенаВключаетНДС <> ДанныеОбъекта.СуммаВключаетНДС Тогда
			СтрокаТабличнойЧасти.Цена = ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(СтрокаТабличнойЧасти.Цена, 
				Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры, ЦенаВключаетНДС, Истина, ДанныеОбъекта.СуммаВключаетНДС,
				УчетНДСиАкцизаВызовСервераПовтИсп.ПолучитьСтавкуНДС(СведенияОНоменклатуре.СтавкаНДС));
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
		КонецЕсли;
		
	КонецЕсли;
	
	СтруктураПересчетаСуммы = ОбработкаТабличныхЧастейКлиентСервер.ПодготовитьСтруктуруДляРасчетаСумм(Объект);
	// Рассчитываем реквизиты табличной части
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, СтруктураПересчетаСуммы);
	
	ЗаполнитьДобавленныеКолонкиСтрокиТаблицыТовары(СтрокаТабличнойЧасти, ДанныеОбъекта.СуммаВключаетНДС, СведенияОНоменклатуре);
	
КонецПроцедуры

&НаСервере
Функция НайтиСтрокуТабличнойЧасти(ИмяТабличнойЧасти, СтруктураОтбора)

	СтрокаТабличнойЧасти = Неопределено;

	МассивНайденныхСтрок = Объект[ИмяТабличнойЧасти].НайтиСтроки(СтруктураОтбора);
	Если МассивНайденныхСтрок.Количество() > 0 Тогда
		// Нашли. Вернем первую найденную строку.
		СтрокаТабличнойЧасти = МассивНайденныхСтрок[0];
	КонецЕсли;

	Возврат СтрокаТабличнойЧасти;

КонецФункции

&НаСервереБезКонтекста
Процедура ТоварыНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, Знач ДанныеОбъекта, СчетаУчетаКЗаполнению)
	
	Если Не ЗначениеЗаполнено(ДанныеОбъекта.ТипЦен) Тогда
		ДанныеОбъекта.Вставить("СпособЗаполненияЦены", Перечисления.СпособыЗаполненияЦен.ПоПродажнымЦенам);
	КонецЕсли;
	
	СведенияОНоменклатуре = ОбработкаТабличныхЧастей.ПолучитьСведенияОНоменклатуре(
		СтрокаТабличнойЧасти.Номенклатура, ДанныеОбъекта);
		
	Если СведенияОНоменклатуре = Неопределено Тогда
		СтрокаТабличнойЧасти.ЭтоМаркируемаяПродукция = Ложь;
		СтрокаТабличнойЧасти.ВидПродукцииИСМПТК     = Перечисления.ВидыПродукцииИСМПТК.ПустаяСсылка();
		Возврат;
	КонецЕсли;
	
	Если СведенияОНоменклатуре.Цена <> 0 Тогда
		СтрокаТабличнойЧасти.Цена   = СведенияОНоменклатуре.Цена;
	КонецЕсли;
	СтрокаТабличнойЧасти.СтавкаНДС  = СведенияОНоменклатуре.СтавкаНДС;
	
	СтрокаТабличнойЧасти.ЕдиницаИзмерения  = СведенияОНоменклатуре.БазоваяЕдиницаИзмерения;
	СтрокаТабличнойЧасти.Коэффициент	   = СведенияОНоменклатуре.Коэффициент;
	СтрокаТабличнойЧасти.Цена			   = СведенияОНоменклатуре.Цена;
	СтрокаТабличнойЧасти.СтавкаНДС         = СведенияОНоменклатуре.СтавкаНДС;
	
	Если ДанныеОбъекта.ВестиУчетМаркируемойПродукцииИСМПТК
		И РозничноеВыбытиеИСМПТКВызовСервера.ЕстьПравоЧтенияОбработкаРозничноеВыбытиеИСМПТК() Тогда
		ВидПродукцииИСМПТК      = ВидПродукцииИС(СведенияОНоменклатуре);
		ЭтоМаркируемаяПродукция = ДанныеОбъекта.ВидыМаркируемойПродукции.НайтиПоЗначению(ВидПродукцииИСМПТК) <> Неопределено;
	Иначе
		ВидПродукцииИСМПТК      = Перечисления.ВидыПродукцииИСМПТК.ПустаяСсылка();
		ЭтоМаркируемаяПродукция = Ложь;
	КонецЕсли;

	СтрокаТабличнойЧасти.ВидПродукцииИСМПТК      = ВидПродукцииИСМПТК;
	СтрокаТабличнойЧасти.ЭтоМаркируемаяПродукция = ЭтоМаркируемаяПродукция;
	
	Если ЭтоМаркируемаяПродукция Тогда
		СтрокаТабличнойЧасти.Количество = 1;
	КонецЕсли;
	
	ЗаполненныеСчета = СчетаУчетаВДокументах.ЗаполнитьРеквизитыПриИзменении(
		Документы.ЧекККМ,
		СчетаУчетаКЗаполнению,
		ДанныеОбъекта,
		"Товары",
		СтрокаТабличнойЧасти);
	
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ЗаполненныеСчета);
	
	ПоляОбъектаСубконтоДоходовБУ	= Новый Структура("Субконто1, Субконто2, Субконто3", "СубконтоДоходовБУ1", "СубконтоДоходовБУ2", "СубконтоДоходовБУ3");
	ПоляОбъектаСубконтоДоходовНУ	= Новый Структура("Субконто1, Субконто2, Субконто3", "СубконтоДоходовНУ1", "СубконтоДоходовНУ2", "СубконтоДоходовНУ3");
	
	ПоляОбъектаСубконтоСписанияСебестоимостиБУ	= Новый Структура("Субконто1, Субконто2, Субконто3", "СубконтоСписанияСебестоимостиБУ1", "СубконтоСписанияСебестоимостиБУ2", "СубконтоСписанияСебестоимостиБУ3");
	ПоляОбъектаСубконтоСписанияСебестоимостиНУ	= Новый Структура("Субконто1, Субконто2, Субконто3", "СубконтоСписанияСебестоимостиНУ1", "СубконтоСписанияСебестоимостиНУ2", "СубконтоСписанияСебестоимостиНУ3");
	
	ПроцедурыБухгалтерскогоУчетаКлиентСервер.УстановитьДоступностьИЗаголовкиСубконто(СтрокаТабличнойЧасти.СчетДоходовБУ, СтрокаТабличнойЧасти, ПоляОбъектаСубконтоДоходовБУ);
	
	ПроцедурыБухгалтерскогоУчетаКлиентСервер.УстановитьДоступностьИЗаголовкиСубконто(СтрокаТабличнойЧасти.СчетСписанияСебестоимостиБУ, СтрокаТабличнойЧасти, ПоляОбъектаСубконтоСписанияСебестоимостиБУ);
		
	СтруктураПересчетаСуммы = ОбработкаТабличныхЧастейКлиентСервер.ПодготовитьСтруктуруДляРасчетаСумм(ДанныеОбъекта);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ?(СтрокаТабличнойЧасти.ЭтоУслуга, 1, 0));
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, СтруктураПересчетаСуммы);
	
	ЗаполнитьДобавленныеКолонкиСтрокиТаблицыТовары(СтрокаТабличнойЧасти, ДанныеОбъекта.СуммаВключаетНДС, СведенияОНоменклатуре);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УслугиНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, ДанныеОбъекта, СчетаУчетаКЗаполнению)
	
	Если Не ЗначениеЗаполнено(ДанныеОбъекта.ТипЦен) Тогда
		ДанныеОбъекта.Вставить("СпособЗаполненияЦены", Перечисления.СпособыЗаполненияЦен.ПоПродажнымЦенам);
	КонецЕсли;

	СведенияОНоменклатуре = ОбработкаТабличныхЧастей.ПолучитьСведенияОНоменклатуре(СтрокаТабличнойЧасти.Номенклатура, ДанныеОбъекта);
	
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.Содержание = СведенияОНоменклатуре.НаименованиеПолное;
	СтрокаТабличнойЧасти.Цена       = СведенияОНоменклатуре.Цена;
	СтрокаТабличнойЧасти.СтавкаНДС = СведенияОНоменклатуре.СтавкаНДС;
	
	ЗаполненныеСчета = СчетаУчетаВДокументах.ЗаполнитьРеквизитыПриИзменении(
		Документы.ЧекККМ,
		СчетаУчетаКЗаполнению,
		ДанныеОбъекта,
		"Услуги",
		СтрокаТабличнойЧасти);
	
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ЗаполненныеСчета);
		
	ПоляОбъектаСубконто		= Новый Структура("Субконто1, Субконто2, Субконто3", "СубконтоДоходовБУ1", "СубконтоДоходовБУ2", "СубконтоДоходовБУ3");
	
	ПроцедурыБухгалтерскогоУчетаКлиентСервер.УстановитьДоступностьИЗаголовкиСубконто(СтрокаТабличнойЧасти.СчетДоходовБУ, СтрокаТабличнойЧасти, ПоляОбъектаСубконто);
	
	// Рассчитываем реквизиты табличной части.
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДанныеОбъекта);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВсегоТабЧасти(СтрокаТабличнойЧасти, ДанныеОбъекта.СуммаВключаетНДС);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьДобавленныеКолонкиСтрокиТаблицыТовары(СтрокаТаблицы, СуммаВключаетНДС, СведенияОНоменклатуре)
	СтрокаТаблицы.Всего = ?(СуммаВключаетНДС, СтрокаТаблицы.Сумма, СтрокаТаблицы.Сумма + СтрокаТаблицы.СуммаНДС);
	Если СтрокаТаблицы.ЭтоМаркируемаяПродукция Тогда
		СтрокаТаблицы.ИндексМарки = ?(ЗначениеЗаполнено(СтрокаТаблицы.КодМаркировки), 1, 2);
	Иначе
		СтрокаТаблицы.ИндексМарки = 0;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблиц(СписокТабличныхЧастей = "Товары, Услуги")
	
	СтруктураТабличныхЧастей = Новый Структура(СписокТабличныхЧастей);
		
	// Заполнение колонок "Всего" в табличных частях
	Для Каждого КлючЗначение Из СтруктураТабличныхЧастей Цикл
		Для Каждого СтрокаТаблицы Из Объект[КлючЗначение.Ключ] Цикл
			СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблицНаСервере(Объект) Экспорт
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииКоличествоЦена(ИмяТабЧасти)

	СтрокаТаблицы = Элементы[ИмяТабЧасти].ТекущиеДанные;
	
	Если СтрокаТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли; 

	ЭтоУслуга = СтрокаТаблицы.ЭтоУслуга;
	ЗначениеПустогоКоличества = ?(ЭтоУслуга, 1, 0);
	
	СтруктураПересчетаСуммы = ОбработкаТабличныхЧастейКлиентСервер.ПодготовитьСтруктуруДляРасчетаСумм(Объект);
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТаблицы, ЗначениеПустогоКоличества);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТаблицы, СтруктураПересчетаСуммы);

	СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииСумма(ИмяТабЧасти)

	СтрокаТаблицы = Элементы[ИмяТабЧасти].ТекущиеДанные;
	
	Если СтрокаТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Если СтрокаТаблицы.Количество = 0 Тогда
		ЭтоУслуга = (ИмяТабЧасти = "Товары" И СтрокаТаблицы.ЭтоУслуга);
		Если ЭтоУслуга Тогда
			СтрокаТаблицы.Цена = СтрокаТаблицы.Сумма;
		Иначе
			СтрокаТаблицы.Цена = 0;
		КонецЕсли;
	Иначе
		СтрокаТаблицы.Цена = СтрокаТаблицы.Сумма / СтрокаТаблицы.Количество;
	КонецЕсли;
	
	СтруктураПересчетаСуммы = ОбработкаТабличныхЧастейКлиентСервер.ПодготовитьСтруктуруДляРасчетаСумм(Объект);
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТаблицы, СтруктураПересчетаСуммы);
	СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииСтавкаНДС(ИмяТабЧасти)

	СтрокаТаблицы = Элементы[ИмяТабЧасти].ТекущиеДанные;
	
	Если СтрокаТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли; 

	Структура = ОбработкаТабличныхЧастейКлиентСервер.ПодготовитьСтруктуруДляРасчетаСумм(Объект);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТаблицы, Структура);

	СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);

КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииСуммаНДС(ИмяТабЧасти)

	СтрокаТаблицы = Элементы[ИмяТабЧасти].ТекущиеДанные;
	
	Если СтрокаТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);

КонецПроцедуры

&НаСервереБезКонтекста
Функция ДанныеВыбораНоменклатура(Текст, ПараметрыПолученияДанных)
	ДанныеВыбора = Справочники.Номенклатура.ПолучитьДанныеВыбора(ПараметрыПолученияДанных);
	
	Если ДанныеВыбора.Количество() = 0 Тогда
		ТаблицаНоменклатуры = РегистрыСведений.ШтрихкодыНоменклатуры.НоменклатураПоШтрихкоду(Текст);
		Для каждого СтрокаНоменклатуры Из ТаблицаНоменклатуры Цикл
			ДанныеВыбора.Добавить(СтрокаНоменклатуры.Номенклатура, СтрокаНоменклатуры.Представление);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ДанныеВыбора;
КонецФункции

&НаСервере
Процедура УстановитьТекущуюСтраницуОсновнойПанели()
	
	СписокТабличныхЧастей = Новый СписокЗначений;	
	СписокТабличныхЧастей.Добавить("Товары", "Товары");
	СписокТабличныхЧастей.Добавить("Услуги", "Услуги");
	
	АктивизироватьТабличнуюЧасть = ОбщегоНазначенияБКВызовСервера.ПолучитьТекущуюВидимуюТабличнуюЧасть(
		ЭтаФорма, СписокТабличныхЧастей);
	ОбщегоНазначенияБКВызовСервера.АктивизироватьЭлементФормы(ЭтаФорма, АктивизироватьТабличнуюЧасть);

КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере()

	УстановитьФункциональныеОпцииФормы();
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	Если ИспользоватьПодключаемоеОборудование Тогда
		ИспользуютсяСканерыШтрихкода = (МенеджерОборудованияВызовСервера.ОборудованиеПоПараметрам("СканерШтрихкода").Количество() > 0);
	Иначе
		ИспользуютсяСканерыШтрихкода = Ложь;
	КонецЕсли;
	
	Если ИспользоватьПодключаемоеОборудование И ИспользуетсяПростойИнтерфейс Тогда
		УправлениеКассовойСменойДоступно = Ложь;//КассовыеСменыВызовСервераБП.ДоступноУправлениеКассовойСменой();
	КонецЕсли;
	
	ТекущаяДатаДокумента = Объект.Дата;
	
	Если НЕ Объект.ОтчетОРозничныхПродажах.Пустая() Тогда
		ОтчетОРозничныхПродажах = Объект.ОтчетОРозничныхПродажах;
		ОтчетОРозничныхПродажахНаименование = ОтчетОРозничныхПродажах.Метаданные().Синоним;
		
		НадписьОтчетОРозничныхПродажах = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1 № %2 от %3 г.'"), ОтчетОРозничныхПродажахНаименование, ОтчетОРозничныхПродажах.Номер, Формат(ОтчетОРозничныхПродажах.Дата, "ДФ='дд ММММ гггг'"));
	КонецЕсли;
	
	ПоказыватьВДокументахСчетаУчета = СчетаУчетаВДокументахВызовСервераПовтИсп.ПользовательУправляетСчетамиУчета();
	
	Элементы.СчетПокупателю.Видимость = ЗначениеЗаполнено(Объект.СчетНаОплатуПокупателю);
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	УстановитьПараметрыВыбораВидаОплаты();
	
	УстановитьЗаголовокФормы();
	
	УстановитьЗаголовокКнопкиОплата();
	
	УстановитьДоступностьСубконто();
	
	ОбщегоНазначенияБК.УстановитьТекстАвтора(НадписьАвтор, Объект.Автор);
	
	ПоддержкаРаботыСоСтруктурнымиПодразделениями = ПолучитьФункциональнуюОпцию("ПоддержкаРаботыСоСтруктурнымиПодразделениями");
	РаботаСДиалогамиКлиентСервер.УстановитьВидимостьСтруктурногоПодразделения(Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация);
	РаботаСДиалогамиКлиентСервер.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделениеОрганизация, Объект.СтруктурноеПодразделение, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	
	// Проверка буфера обмена на наличие скопированных строк
	УстановитьДоступностьКомандыВставки(ЭтотОбъект, Не ОбщегоНазначения.ПустойБуферОбмена());
	
	// +++ Проверка заполненности реквизитов организации (касса)
	ОсновнаяКассаОрганизацииЗаполнена = ПроверкаРеквизитовОрганизации.ОсновнаяКассаОрганизацииЗаполнена(Объект.Организация);
	ПроверкаРеквизитовОрганизации.ОтобразитьПредупреждениеОЗаполненииРеквизитовКассы(ЭтотОбъект);
	// --- Проверка заполненности реквизитов организации (касса)
	
	ИспользуетсяПолнаяВерсияКонфигурации = НЕ ОбщегоНазначенияБККлиентСервер.ЭтоПростаяВерсияКонфигурации();
	
	ВидыМаркируемойПродукции = Новый СписокЗначений;
	ВидыМаркируемойПродукции.ЗагрузитьЗначения(ОбщегоНазначенияИСМПТК.УчитываемыеВидыМаркируемойПродукции());
	
	ЗаполнитьДанныеМаркировки();
	
КонецПроцедуры

&НаСервере
Функция УстановитьЗаголовокКнопкиОплата()

	Если Объект.ВидОперации = Перечисления.ВидыОперацийРозничнаяПродажа.Продажа Тогда
		ТекстЗаголовка = НСтр("ru = 'Принять оплату'");
	Иначе
		ТекстЗаголовка = НСтр("ru = 'Вернуть средства'");
	КонецЕсли;
	
	Элементы.ФормаПринятьОплату.Заголовок = ТекстЗаголовка;

КонецФункции

&НаСервере
Процедура УстановитьЗаголовокФормы()
	ТекстЗаголовка = НСтр("ru = 'Чек'");
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ТекстЗаголовка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Чек %1 от %2'"), Объект.Номер, Формат(Объект.Дата, "ДЛФ=D"));
	Иначе
		ТекстЗаголовка = НСтр("ru = 'Чек (создание)'");
	КонецЕсли;
	
	Заголовок = ТекстЗаголовка + " (" + Строка(Объект.ВидОперации) + ")";
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыВыбораВидаОплаты()
	//ТипыОплатБезналичныеОплаты = Новый Массив;
	//ТипыОплатБезналичныеОплаты.Добавить(Перечисления.ТипыОплат.ПлатежнаяКарта);
	//ТипыОплатБезналичныеОплаты.Добавить(Перечисления.ТипыОплат.БанковскийКредит);
	//
	//Если ИспользуютсяПодарочныеСертификаты Тогда
	//	
	//	ТипыОплатПодарочныеСертификаты = Новый Массив;
	//
	//	ТипыОплатПодарочныеСертификаты.Добавить(Перечисления.ТипыОплат.ПодарочныйСертификатСобственный);
	//	ТипыОплатБезналичныеОплаты.Добавить(Перечисления.ТипыОплат.ПодарочныйСертификатСобственный);
	//	
	//	Если ПрименяютсяДоговораСКомитентамиНаПродажу Тогда
	//		ТипыОплатПодарочныеСертификаты.Добавить(Перечисления.ТипыОплат.ПодарочныйСертификатСторонний);
	//		ТипыОплатБезналичныеОплаты.Добавить(Перечисления.ТипыОплат.ПодарочныйСертификатСторонний);
	//	КонецЕсли;
	//	
	//	ПараметрыСертификатов = Новый Массив;
	//	ПараметрыСертификатов.Добавить(Новый ПараметрВыбора("Отбор.ТипОплаты", Новый ФиксированныйМассив(ТипыОплатПодарочныеСертификаты)));
	//	ПараметрыСертификатов.Добавить(Новый ПараметрВыбора("Отбор.Организация", Объект.Организация));

	//	Элементы.ПодарочныеСертификатыВидОплаты.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыСертификатов);
	//	
	//КонецЕсли;
	
	ПараметрыБезналичныхОплат = Новый Массив;
	
	//ПараметрыБезналичныхОплат.Добавить(Новый ПараметрВыбора("Отбор.ТипОплаты", Новый ФиксированныйМассив(ТипыОплатБезналичныеОплаты)));
	ПараметрыБезналичныхОплат.Добавить(Новый ПараметрВыбора("Отбор.Организация", Объект.Организация));
	
	Элементы.ОплатаВидОплаты.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыБезналичныхОплат);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	ЭтоВозврат = (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРозничнаяПродажа.Возврат"));
	
	ПравоВводаВозврата = Истина;// ?(Объект.ОтчетОРозничныхПродажах.Пустая(), Форма.ЕстьПравоВводаРозничнаяПродажа, Форма.ЕстьПравоВводаВозвратОтПокупателя);
	
	Форма.ТолькоПросмотр                    = Форма.ТолькоПросмотр ИЛИ ЗначениеЗаполнено(Объект.НомерЧекаККМ);
	Элементы.ФормаПринятьОплату.Доступность = НЕ Форма.ТолькоПросмотр;
	Элементы.ФормаЧекНаВозврат.Видимость    = ЗначениеЗаполнено(Объект.НомерЧекаККМ) И НЕ ЭтоВозврат И ПравоВводаВозврата;
	Элементы.Основание.Видимость            = ЭтоВозврат;
	
	Элементы.УслугиСуммаНДС.Видимость  = Объект.УчитыватьНДС;
	Элементы.УслугиСтавкаНДС.Видимость = Объект.УчитыватьНДС;
	Элементы.УслугиСчетУчетаНДСПоРеализации.Видимость = Объект.УчитыватьНДС И Форма.ПоказыватьВДокументахСчетаУчета;
	Элементы.УслугиНДСВидОперацииРеализации.Видимость = Объект.УчитыватьНДС И Форма.ПоказыватьВДокументахСчетаУчета;
	Элементы.ТоварыНДСВидОперацииРеализации.Видимость = Объект.УчитыватьНДС И Форма.ПоказыватьВДокументахСчетаУчета;
	
	СформироватьНадписьЦеныИВалюта(Форма);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Касса", "Видимость", Форма.ИспользоватьНесколькоКассОрганизации);
		
	// +++ Проверка заполненности реквизитов организации (банковский счет)
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КассаОрганизации", "Видимость", Форма.ИспользоватьНесколькоКассОрганизации);
	// --- Проверка заполненности реквизитов организации (банковский счет)
	
	ОбновитьИтоги(Форма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьНадписьЦеныИВалюта(Форма)
	
	Объект = Форма.Объект;
	//СтруктураНадписи = Новый Структура(
	//	"СуммаВключаетНДС, ДокументБезНДС, ВалютаРегламентированногоУчета",
	//	Объект.СуммаВключаетНДС,
	//	Объект.ДокументБезНДС,
	//	Форма.ВалютаРегламентированногоУчета);
	//Если Форма.ИспользоватьТипыЦенНоменклатуры Тогда
	//	СтруктураНадписи.Вставить("ТипЦен", Объект.ТипЦен);
	//КонецЕсли;
	//Форма.ЦеныИВалюта = ОбщегоНазначенияБККлиентСервер.СформироватьНадписьЦеныИВалюта(СтруктураНадписи);
	//
	Форма.ЦеныИВалюта = ОбщегоНазначенияБККлиентСервер.СформироватьНадписьЦеныИВалюта(Объект);
	
	Форма.Элементы.ГруппаИтогиНДС.Видимость   = Объект.УчитыватьНДС;
	
	Если Объект.СуммаВключаетНДС Тогда
		Форма.Элементы.ГруппаИтогиНДС.ПодчиненныеЭлементы.ИтогиВсегоНДС.Заголовок = НСтр("ru='НДС (в т. ч.)'");
	Иначе
		Форма.Элементы.ГруппаИтогиНДС.ПодчиненныеЭлементы.ИтогиВсегоНДС.Заголовок = НСтр("ru='НДС (сверху)'");
	КонецЕсли;
	
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()

	ОбщегоНазначенияБККлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);
	
	ИспользоватьТипыЦенНоменклатуры  = ПравоДоступа("Чтение", Метаданные.Справочники.ТипыЦенНоменклатуры);

	ИспользоватьПодключаемоеОборудование = ПравоДоступа("Чтение", Метаданные.Справочники.ПодключаемоеОборудование);
	
	ИспользуетсяФискальныйРегистратор = Истина //ПолучитьФункциональнуюОпцию("ИспользоватьФискальныйРегистратор") 
		И ИспользоватьПодключаемоеОборудование;
	
	ПрименяютсяДоговораСКомитентамиНаПродажу = Истина;//ПолучитьФункциональнуюОпцию("ОсуществляетсяРеализацияТоваровУслугКомитентов");
	
	ПлательщикНДС = ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНДС(Объект.Организация, Объект.Дата);
	
	ИспользуетсяПростойИнтерфейс = Ложь;//ПолучитьФункциональнуюОпцию("ИнтерфейсТаксиПростой");
	
	// +++ Проверка заполненности реквизитов организации (касса)
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ИспользоватьНесколькоКассОрганизации = Справочники.Кассы.ИспользуетсяНесколькоКасс(Объект.Организация);
	Иначе
		ИспользоватьНесколькоКассОрганизации = Истина;
	КонецЕсли;
	// --- Проверка заполненности реквизитов организации (касса)
	
	ВестиУчетМаркируемойПродукцииИСМПТК = ПолучитьФункциональнуюОпцию("ВестиУчетМаркируемойПродукцииИСМПТК");

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИтоги(Форма)
	Объект = Форма.Объект;
	Форма.ИтогиВсегоНДС   = Объект.Товары.Итог("СуммаНДС") + Объект.Услуги.Итог("СуммаНДС");
	Форма.ИтогиВсего = Объект.Товары.Итог("Сумма") + Объект.Услуги.Итог("Сумма");
	
	Если Объект.УчитыватьНДС И НЕ Объект.СуммаВключаетНДС Тогда
		Форма.ИтогиВсего = Форма.ИтогиВсего + Форма.ИтогиВсегоНДС;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИтогиНаСервере() Экспорт

	ОбновитьИтоги(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Функция ПолучитьПараметрыПодбора(ИмяТаблицы)
	
	ДатаРасчетов = ?(НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДата()), Неопределено, Объект.Дата);
	
	ЗаголовокПодбора = НСтр("ru = 'Подбор номенклатуры в %1 (%2)'");
	ПараметрыФормы = Новый Структура;
	
	СписокЗапросов = Новый СписокЗначений();
	СписокЗапросов.Добавить("ПоСправочнику", НСтр("ru='По справочнику'"));
	Если ИмяТаблицы = "Товары" Тогда
		ПредставлениеТаблицы = НСтр("ru = 'Товары'");
		СписокЗапросов.Добавить("ОстаткиНоменклатуры", НСтр("ru='Остатки номенклатуры'"));
		Если ЗначениеЗаполнено(Объект.ТипЦен) Тогда
			СписокЗапросов.Добавить("ЦеныНоменклатуры",         НСтр("ru = 'Цены номенклатуры'"));
			СписокЗапросов.Добавить("ОстаткиИЦеныНоменклатуры", НСтр("ru = 'Остатки и цены номенклатуры'"));
		Иначе
			СписокЗапросов.Добавить("ЦеныНоменклатурыДокументов", НСтр("ru = 'Цены продажи'"));
			СписокЗапросов.Добавить("ОстаткиИЦеныНоменклатурыДокументов", НСтр("ru = 'Остатки и цены продажи'"));
			ПараметрыФормы.Вставить("ЗаполнятьЦеныПоПродаже", Истина);
		КонецЕсли;
	ИначеЕсли ИмяТаблицы = "Услуги" Тогда
		ПредставлениеТаблицы = НСтр("ru = 'Услуги'");
		Если ЗначениеЗаполнено(Объект.ТипЦен) Тогда 
			СписокЗапросов.Добавить("ЦеныУслуг", НСтр("ru = 'Цены услуг'"));
		Иначе
			СписокЗапросов.Добавить("ЦеныНоменклатурыДокументов", НСтр("ru = 'Цены продажи'"));
			ПараметрыФормы.Вставить("ЗаполнятьЦеныПоПродаже", Истина);
		КонецЕсли;
	КонецЕсли;
	
	ЗаголовокПодбора = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ЗаголовокПодбора, Объект.Ссылка, ПредставлениеТаблицы);
	
	ПараметрыФормы.Вставить("ДатаРасчетов"	, ДатаРасчетов);
	ПараметрыФормы.Вставить("Организация"	, Объект.Организация);
	ПараметрыФормы.Вставить("Склад"			, Объект.Склад);
	ПараметрыФормы.Вставить("Заголовок"		, ЗаголовокПодбора);
	ПараметрыФормы.Вставить("ИмяТаблицы"	, ИмяТаблицы);
	ПараметрыФормы.Вставить("Товар"         , ИмяТаблицы = "Товары");
	ПараметрыФормы.Вставить("Услуги"        , ИмяТаблицы = "Услуги");
	ПараметрыФормы.Вставить("ЕстьЦена"		, Истина);
	ПараметрыФормы.Вставить("ЕстьКоличество", Истина);
	ПараметрыФормы.Вставить("ТипЦен"		, Объект.ТипЦен);
	ПараметрыФормы.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
	ПараметрыФормы.Вставить("ВыбиратьВсе"    , Истина);
	ПараметрыФормы.Вставить("СписокВидовПодбора", СписокЗапросов);
	ПараметрыФормы.Вставить("ОбъектСсылка"      , Объект.Ссылка);
	
	
	Возврат ПараметрыФормы;
	
КонецФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	НастройкиУсловногоОформления = Новый Структура();

	УсловноеОформление.Элементы.Очистить();

	// Условное оформление, связанное с видимостью, устанавливаем сразу для всех колонок.
	УстановитьУсловноеОформлениеВидимость();

	Если СчетаУчетаВДокументахВызовСервераПовтИсп.ПользовательУправляетСчетамиУчета() Тогда
		// Условное оформление, связанное с доступностью субконто.
		УстановитьУсловноеОформлениеСубконто();
	КонецЕсли;

	// Условное оформление для полей, расположенных на страницах

	ОбновитьУсловноеОформление(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьУсловноеОформление(Форма)

	Элементы = Форма.Элементы;

	Если НЕ Форма.НастройкиУсловногоОформления.Свойство("ТоварыПроинициализировано")
		И Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаТовары Тогда

		Форма.УстановитьУсловноеОформлениеТовары();

	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеВидимость()

	// ТоварыСтавкаНДС, ТоварыСуммаНДС, ТоварыВсего

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСтавкаНДС");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСуммаНДС");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСчетУчетаНДСПоРеализации");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыВсего");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.УчитыватьНДС", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеСубконто()
	
	Для НомерСубконто = 1 По 3 Цикл

		// Поля Товары.СубконтоДоходовБУ
		ЭлементУО = УсловноеОформление.Элементы.Добавить();

		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСубконтоДоходовБУ" + НомерСубконто);
		
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"Объект.Товары.СубконтоДоходовБУ" + НомерСубконто + "Доступность", ВидСравненияКомпоновкиДанных.Равно, Ложь);

		ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

		// Поля Товары.СубконтоСписанияСебестоимостиБУ
		ЭлементУО = УсловноеОформление.Элементы.Добавить();

		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСубконтоСписанияСебестоимостиБУ" + НомерСубконто);
		
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"Объект.Товары.СубконтоСписанияСебестоимостиБУ" + НомерСубконто + "Доступность", ВидСравненияКомпоновкиДанных.Равно, Ложь);

		ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

		// Поля Услуги.СубконтоДоходовБУ
		ЭлементУО = УсловноеОформление.Элементы.Добавить();

		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСубконтоДоходовБУ" + НомерСубконто);
		
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"Объект.Услуги.СубконтоДоходовБУ" + НомерСубконто + "Доступность", ВидСравненияКомпоновкиДанных.Равно, Ложь);

		ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеТовары() Экспорт

	НастройкиУсловногоОформления.Вставить("ТоварыПроинициализировано", Истина);


	// ТоварыКоличество

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыКоличество");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Товары.ЭтоУслуга", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	// ТоварыСуммаНДС

//	ЭлементУО = УсловноеОформление.Элементы.Добавить();

//	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСуммаНДС");

//	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

//		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
//			"Объект.Товары.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Справочники.СтавкиНДС.Перечисления.СтавкиНДС.НДС0);

//		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
//			"Объект.Товары.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.БезНДС);

//	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииНаСервере()
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	УстановитьФункциональныеОпцииФормы();
	
КонецПроцедуры

&НаСервере
Функция НовыйСтрокаТовары()
	СтрокаТовары = Новый Структура;
	
	СтрокаТовары.Вставить("Номенклатура",         Справочники.Номенклатура.ПустаяСсылка());
	СтрокаТовары.Вставить("Количество",           0);
	СтрокаТовары.Вставить("Цена",                 0);
	СтрокаТовары.Вставить("Сумма",                0);
	СтрокаТовары.Вставить("Штрихкод",             "");
	
	Возврат СтрокаТовары
КонецФункции

&НаСервере
Процедура ОснованиеПриИзмененииНаСервере()

	ЗаполнитьЗначенияСвойств(Объект, Объект.Основание, "СуммаВключаетНДС, ТипЦен, УчитыватьНДС");
	Документы.ЧекККМ.СкопироватьТабличныеЧасти(Объект, Объект.Основание);

КонецПроцедуры 

&НаСервере
Процедура НастройкаОтображенияФормыВПростомИнтерфейсе()
	
	Если Не ИспользуетсяПростойИнтерфейс Тогда
		Возврат;
	КонецЕсли;
	
	НастроитьОтображениеВкладок();
	
	Элементы.ГруппаБаннерОткрытьСмену.Видимость
		= ОтображатьБаннерОткрытияСмены(Объект.Ссылка, ИспользуетсяФискальныйРегистратор);
		
	Элементы.Основание.Заголовок = НСтр("ru='Возврат по чеку'");
	
КонецПроцедуры

&НаСервере
Процедура НастроитьОтображениеВкладок()
	
	ОпцииОтображенияТабличныхЧастей = ИменаОпцийСвязанныхСТабличнымиЧастями();
	ОтображаетсяТолькоОсновнаяТабличнаяЧасть = Истина;
	Для Каждого ИмяОпции Из ОпцииОтображенияТабличныхЧастей Цикл
		Если ПолучитьФункциональнуюОпцию(ИмяОпции) Тогда
			ОтображаетсяТолькоОсновнаяТабличнаяЧасть = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если ОтображаетсяТолькоОсновнаяТабличнаяЧасть Тогда
		Элементы.ГруппаСтраницы.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОтображатьБаннерОткрытияСмены(Ссылка, ИспользуетсяФискальныйРегистратор)
	
	Если Не ИспользуетсяФискальныйРегистратор Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Ссылка) Тогда
		ТипыОборудования = Новый Массив();
		ТипыОборудования.Добавить("ФискальныйРегистратор");
		ТипыОборудования.Добавить("ПринтерЧеков");
		СписокДоступныхУстройств = МенеджерОборудованияВызовСервера.ОборудованиеПоПараметрам(ТипыОборудования);
		Если СписокДоступныхУстройств.Количество() = 0 Тогда
			Возврат Ложь;
		КонецЕсли;
		Для Каждого Устройство Из СписокДоступныхУстройств Цикл
			ОписаниеПоследнейСмены = КассовыеСменыВызовСервера.ОписаниеПоследнейКассовойСмены(Устройство.Ссылка);
			Если ОписаниеПоследнейСмены <> Неопределено
				И ОписаниеПоследнейСмены.Статус = Перечисления.СтатусыКассовойСмены.Открыта Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервереБезКонтекста
Функция ИменаОпцийСвязанныхСТабличнымиЧастями()
	
	ИменаФункциональныхОпций = Новый Массив;
	ИменаФункциональныхОпций.Добавить("ИспользоватьОплатуПоПлатежнымКартам");
	Возврат ИменаФункциональныхОпций;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьПараметрыВыбораПолейСубконто(Форма, Суффикс, ИмяСчета, ИмяТабличнойЧасти)
	
	Если Не Форма.ПоказыватьВДокументахСчетаУчета Тогда
		Возврат;
	КонецЕсли;
	
	Если Форма.Элементы[ИмяТабличнойЧасти].ТекущаяСтрока <> Неопределено Тогда
		СтрокаТаблицы = Форма.Объект[ИмяТабличнойЧасти].НайтиПоИдентификатору(Форма.Элементы[ИмяТабличнойЧасти].ТекущаяСтрока);
		Если СтрокаТаблицы = Неопределено Тогда 
			Возврат;
		КонецЕсли;
		
		ПараметрыДокумента = СписокПараметровВыбораСубконто(Форма.Объект, СтрокаТаблицы, "Субконто" + Суффикс + "%Индекс%", ИмяСчета);
		ПроцедурыБухгалтерскогоУчетаКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(Форма, СтрокаТаблицы, "Субконто" + Суффикс + "%Индекс%", ИмяТабличнойЧасти + "Субконто" + Суффикс + "%Индекс%", ПараметрыДокумента);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СписокПараметровВыбораСубконто(ДанныеОбъекта, ПараметрыОбъекта, ШаблонИмяПоляОбъекта, ИмяСчета)
	
	СписокПараметров = Новый Структура;
	Для Индекс = 1 По 3 Цикл
		ИмяПоля = СтрЗаменить(ШаблонИмяПоляОбъекта, "%Индекс%", Индекс);
		Если ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Контрагенты") Тогда
			СписокПараметров.Вставить("Контрагент", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			СписокПараметров.Вставить("ДоговорКонтрагента", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Номенклатура") Тогда
			СписокПараметров.Вставить("Номенклатура", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Склады") Тогда
			СписокПараметров.Вставить("Склад", ПараметрыОбъекта[ИмяПоля]);
		КонецЕсли;
	КонецЦикла;
	СписокПараметров.Вставить("СчетУчета", 				  ПараметрыОбъекта[ИмяСчета]);	
	СписокПараметров.Вставить("Организация", 			  ДанныеОбъекта.Организация);
	СписокПараметров.Вставить("СтруктурноеПодразделение", ДанныеОбъекта.СтруктурноеПодразделение);
	СписокПараметров.Вставить("ВыбиратьПодразделенияОрганизации", Истина);

	Возврат СписокПараметров; 

КонецФункции

&НаКлиенте
Процедура ПослеВыбораСтруктурногоПодразделения(Результат, Параметры) Экспорт
	РаботаСДиалогамиКлиент.ПослеВыбораСтруктурногоПодразделения(Результат, Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация);
	Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
		Модифицированность = Истина;
		Результат.Вставить("НеобходимоИзменитьЗначенияРеквизитовОбъекта", Ложь);
		Если Объект.Товары.Количество() > 0 ИЛИ Объект.Услуги.Количество() > 0 Тогда
			СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(Истина, Результат);
		Иначе
			СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(Ложь, Результат);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(ОчищатьНекорректныеЗначения, Параметры) Экспорт
	
	Параметры.Вставить("ОчищатьНекорректныеЗначения", ОчищатьНекорректныеЗначения);
		
	СтруктураРезультатаВыполнения = Неопределено;
	
	СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(Параметры, СтруктураРезультатаВыполнения);
	
	ЕстьЗаполненныеТабЧасти = Объект.Товары.Количество() > 0 ИЛИ Объект.Услуги.Количество() > 0;
	
	Если СтруктураРезультатаВыполнения <> Неопределено
		И СтруктураРезультатаВыполнения.Свойство("СписокТЧ")
		И ЕстьЗаполненныеТабЧасти Тогда
		ТекстВопроса = НСтр("ru='Перезаполнить цены в табличных частях документа?'");
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаЗаполнитьЦеныВТабличныхЧастяхДокумента", ЭтотОбъект, СтруктураРезультатаВыполнения);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
	ИначеЕсли СтруктураРезультатаВыполнения <> Неопределено
			И СтруктураРезультатаВыполнения.Свойство("ИзмененДоговорКонтрагента")
			И СтруктураРезультатаВыполнения.Свойство("ТекстВопроса")
			И ЕстьЗаполненныетабЧасти Тогда 
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаДоговорКонтрагентаПриИзменении", ЭтотОбъект, СтруктураРезультатаВыполнения);
		ПоказатьВопрос(Оповещение, СтруктураРезультатаВыполнения.ТекстВопроса, Режим, 0);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаЗаполнитьЦеныВТабличныхЧастяхДокумента(Результат, Параметры) Экспорт
	
	СтруктураРезультатаВыполнения = Параметры;
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		РаботаСДиалогамиКлиентСервер.ПерезаполнитьЦеныПриИзмененииОрганизации(Объект, Параметры);
		
	КонецЕсли;
	
	Если СтруктураРезультатаВыполнения <> Неопределено И СтруктураРезультатаВыполнения.Свойство("ИзмененДоговорКонтрагента") 
		И СтруктураРезультатаВыполнения.Свойство("ТекстВопроса") Тогда 
		
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаДоговорКонтрагентаПриИзменении", ЭтотОбъект, СтруктураРезультатаВыполнения);
		ПоказатьВопрос(Оповещение, СтруктураРезультатаВыполнения.ТекстВопроса, Режим, 0);
		
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаДоговорКонтрагентаПриИзменении(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		УправлениеВзаиморасчетамиКлиент.ОбработатьОтказОтПересчетаДокументаПоДоговору(ЭтаФорма, Параметры);
		СформироватьНадписьЦеныИВалюта(ЭтаФорма);
	Иначе 		
		// Вызов общей формы "Цены и валюта" и пересчеты по результатам выбора в этой форме
		УправлениеЦенообразованиемКлиент.ОткрытьФормуЦеныИВалюта(ЭтаФорма, , Истина, Параметры);
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(СтруктураПараметров = Неопределено, СтруктураРезультатаВыполнения)
	
	Если СтруктураПараметров = Неопределено 
		ИЛИ (СтруктураПараметров.Свойство("НеобходимоИзменитьЗначенияРеквизитовОбъекта") 
				И СтруктураПараметров.НеобходимоИзменитьЗначенияРеквизитовОбъекта) Тогда 
		РаботаСДиалогами.СтруктурноеПодразделениеПриИзменении(СтруктурноеПодразделениеОрганизация, Объект.Организация, Объект.СтруктурноеПодразделение, СтруктураПараметров);
	КонецЕсли;
	
	ПриИзмененииЗначенияОрганизацииСервер(СтруктураПараметров, СтруктураРезультатаВыполнения);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииЗначенияОрганизацииСервер(СтруктураПараметров, СтруктураРезультатаВыполнения)
	
	Если НЕ СтруктураПараметров.ИзмененаОрганизация И НЕ СтруктураПараметров.ИзмененоСтруктурноеПодразделение Тогда
		Возврат;
	КонецЕсли;
	
	ПричиныИзмененияСчетовУчета = Новый Массив;
	Если СтруктураПараметров.ИзмененаОрганизация Тогда
		ПричиныИзмененияСчетовУчета.Добавить("Организация");
		Если ЗначениеЗаполнено(Объект.Организация) И ЗначениеЗаполнено(Объект.Контрагент) Тогда
			Объект.ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПолучитьДоговорРозничногоКонтрагента(Объект.Контрагент, Объект.Организация);
		Иначе
			Объект.ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		КонецЕсли;
		Объект.ТипЦен = Объект.ДоговорКонтрагента.ТипЦен;
		Если Не ЗначениеЗаполнено(Объект.ТипЦен) Тогда
			Объект.ТипЦен = ПользователиБКВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию(, "ОсновнойТипЦенПродажи");
		КонецЕсли;
	КонецЕсли;
	
	ПриИзмененииЗначенияСтруктурногоПодразделенияСервер(СтруктураПараметров);
	
	УстановитьФункциональныеОпцииФормы();
	
	РаботаСДиалогами.ПриИзмененииЗначенияОрганизации(Объект, , СтруктураРезультатаВыполнения);
	
	Если ПричиныИзмененияСчетовУчета.Количество() > 0 Тогда
		
		ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДоходовБУ", "СчетДоходовБУ", "Товары");	
		ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "СписанияСебестоимостиБУ", "СчетСписанияСебестоимостиБУ", "Товары");
		ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДоходовБУ", "СчетДоходовБУ", "Услуги");
		
	КонецЕсли;
	
	// +++ Проверка заполненности реквизитов организации (касса)
	ИспользоватьНесколькоКассОрганизации = Справочники.Кассы.ИспользуетсяНесколькоКасс(СтруктурноеПодразделениеОрганизация);
	ОсновнаяКассаОрганизацииЗаполнена = ПроверкаРеквизитовОрганизации.ОсновнаяКассаОрганизацииЗаполнена(СтруктурноеПодразделениеОрганизация);
	ПроверкаРеквизитовОрганизации.ОтобразитьПредупреждениеОЗаполненииРеквизитовКассы(ЭтотОбъект);
	
	Если НЕ ИспользоватьНесколькоКассОрганизации И ОсновнаяКассаОрганизацииЗаполнена И Не ЗначениеЗаполнено(Объект.Касса) Тогда
		Объект.Касса = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Организация, "ОсновнаяКасса");
	КонецЕсли;
	// --- Проверка заполненности реквизитов организации (касса)
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ПриИзмененииЗначенияСтруктурногоПодразделенияСервер(СтруктураПараметров)
	
	Если СтруктураПараметров.Свойство("ОчищатьНекорректныеЗначения") И НЕ СтруктураПараметров.ОчищатьНекорректныеЗначения Тогда 
		Возврат;
	КонецЕсли;
	
	// Если нет данных в ТЧ, то нет необходимости проверять и очищать некорректные значения субконто
	Если Объект.Товары.Количество() = 0 И Объект.Услуги.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	// Список для обработки ТЧ
	СписокТабличныхЧастей = Новый СписокЗначений;
	
	СписокАналитикиСчетовТовары = Новый СписокЗначений;
	СписокАналитикиСчетовУслуги = Новый СписокЗначений;
	
	// ТЧ Товары
	СписокАналитикиСчетовТовары.Добавить("ДоходовБУ"); 				// СчетДоходовБУ
	СписокАналитикиСчетовТовары.Добавить("СписанияСебестоимостиБУ");// СчетСписанияСебестоимостиБУ
	
	// ТЧ Услуги
	СписокАналитикиСчетовУслуги.Добавить("ДоходовБУ"); 				// СчетДоходовБУ
	
	СтруктураРеквизитов = Новый Структура("ТабличнаяЧасть, СписокАналитикиСчетов", Объект.Товары, СписокАналитикиСчетовТовары); 
	СписокТабличныхЧастей.Добавить(СтруктураРеквизитов);
	
	СтруктураРеквизитов = Новый Структура("ТабличнаяЧасть, СписокАналитикиСчетов", Объект.Услуги, СписокАналитикиСчетовУслуги);
	СписокТабличныхЧастей.Добавить(СтруктураРеквизитов);
	
	// Очистим некорректные значения Субконто с подразделениями не входящими в выбранное структурное подразделение
	РаботаСДиалогами.ПроверитьСоответствиеПодразделения(Объект.Организация, Объект.СтруктурноеПодразделение, , СписокТабличныхЧастей); 
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьСубконто(СписокТабличныхЧастей = Неопределено)
	
	Если СписокТабличныхЧастей = Неопределено Тогда 
		СписокТабличныхЧастей = "Товары, Услуги";
	КонецЕсли;
	
	СтруктураТабличныхЧастей = Новый Структура(СписокТабличныхЧастей);
	
	Для Каждого КлючИЗначение Из СтруктураТабличныхЧастей Цикл 
		Для Каждого СтрокаТЧ Из Объект[КлючИЗначение.Ключ] Цикл
			УстановитьДоступностьСубконтоВСтрокеТабличнойЧасти(ЭтаФорма, СтрокаТЧ, КлючИЗначение.Ключ);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьСубконтоВСтрокеТабличнойЧасти(Форма, СтрокаТабличнойЧасти, ИмяТабличнойЧасти)
	
	ИмяЭлементаДоходов = "СубконтоДоходов";
	ИмяСчетаДоходов    = "СчетДоходов";
	
	ИмяЭлементаСебестоимости = "СубконтоСписанияСебестоимости";
	ИмяСчетаСебестоимости 	 = "СчетСписанияСебестоимости";
	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
		"СубконтоДоходовБУ1", "СубконтоДоходовБУ2", "СубконтоДоходовБУ3");
	
	ПроцедурыБухгалтерскогоУчетаКлиентСервер.УстановитьДоступностьИЗаголовкиСубконто(СтрокаТабличнойЧасти.СчетДоходовБУ, СтрокаТабличнойЧасти, ПоляОбъекта);
	
	// установка параметров выбора для подчиненных и иным способом связанных объектов аналитики
	Префикс = "БУ";
	ПараметрыДокумента = СписокПараметровВыбораСубконто(Форма.Объект, СтрокаТабличнойЧасти, ИмяЭлементаДоходов + Префикс +"%Индекс%", ИмяСчетаДоходов + Префикс);
	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(Форма, СтрокаТабличнойЧасти, ИмяЭлементаДоходов + Префикс + "%Индекс%", ИмяТабличнойЧасти + ИмяЭлементаДоходов + Префикс + "%Индекс%", ПараметрыДокумента);					
	
	Если ИмяТабличнойЧасти = "Товары" Тогда
		
		ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
			"СубконтоСписанияСебестоимостиБУ1", "СубконтоСписанияСебестоимостиБУ2", "СубконтоСписанияСебестоимостиБУ3");
		
		ПроцедурыБухгалтерскогоУчетаКлиентСервер.УстановитьДоступностьИЗаголовкиСубконто(СтрокаТабличнойЧасти.СчетСписанияСебестоимостиБУ, СтрокаТабличнойЧасти, ПоляОбъекта);
		
		Префикс = "БУ";
		ПараметрыДокумента = СписокПараметровВыбораСубконто(Форма.Объект, СтрокаТабличнойЧасти, ИмяЭлементаСебестоимости + Префикс +"%Индекс%", ИмяСчетаСебестоимости + Префикс);
		ПроцедурыБухгалтерскогоУчетаКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(Форма, СтрокаТабличнойЧасти, ИмяЭлементаСебестоимости + Префикс + "%Индекс%", ИмяТабличнойЧасти + ИмяЭлементаСебестоимости + Префикс + "%Индекс%", ПараметрыДокумента);	
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоНачалоВыбора(Элемент, ИмяЭлементаСубконто, ИндексСубконто, ИмяЭлементаСчета, СтрокаТаблицы, СтандартнаяОбработка)	
		
	ПараметрыДокумента = СписокПараметровВыбораСубконто(Объект, СтрокаТаблицы, ИмяЭлементаСубконто + "%Индекс%", ИмяЭлементаСчета);
	
	ПроцедурыБухгалтерскогоУчетаКлиент.НачалоВыбораЗначенияСубконто(ЭтаФорма, Элемент, ИндексСубконто, СтандартнаяОбработка, ПараметрыДокумента);	
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УслугиСчетДоходовБУПриИзмененииНаСервере(СтрокаТабличнойЧасти, ДанныеОбъекта)
	
	ПроцедурыБухгалтерскогоУчета.ПроверитьВладельцаСубконтоПодразделение(СтрокаТабличнойЧасти, 
	                                        ДанныеОбъекта.Организация, 
	                                        Новый Структура("НазваниеСубконтоБУ1, НазваниеСубконтоБУ2, НазваниеСубконтоБУ3, 
	                                                        |СубконтоБУ1, СубконтоБУ2, СубконтоБУ3",
	                                                        "СубконтоДоходовБУ1", "СубконтоДоходовБУ2", "СубконтоДоходовБУ3", 
	                                                        СтрокаТабличнойЧасти.СубконтоДоходовБУ1, СтрокаТабличнойЧасти.СубконтоДоходовБУ2, СтрокаТабличнойЧасти.СубконтоДоходовБУ3));
															
	СчетаУчета = Новый Структура("СчетДоходовБУ, СубконтоДоходовБУ1,
								 |СубконтоДоходовБУ2, СубконтоДоходовБУ3", СтрокаТабличнойЧасти.СчетДоходовБУ,
								 СтрокаТабличнойЧасти.СубконтоДоходовБУ1, СтрокаТабличнойЧасти.СубконтоДоходовБУ2,
								 СтрокаТабличнойЧасти.СубконтоДоходовБУ3);

	ПроцедурыБухгалтерскогоУчета.ЗаполнитьАналитикуСчетаТабличнойЧасти(СтрокаТабличнойЧасти, СчетаУчета, "СубконтоДоходовБУ", "СчетДоходовБУ", "СубконтоДоходовБУ");

КонецПроцедуры

&НаКлиенте
Функция ПолучитьИмяТекущейТабличнойЧасти()
	
	ИмяТекущейСтраницы = Элементы.ГруппаСтраницы.ТекущаяСтраница.Имя;
	ИмяТаблицы = "";
	Если ИмяТекущейСтраницы = "СтраницаТовары" Тогда		
		ИмяТаблицы = "Товары";
	ИначеЕсли ИмяТекущейСтраницы = "СтраницаУслуги" Тогда		
		ИмяТаблицы = "Услуги";                         		
	КонецЕсли;
	
	Возврат ИмяТаблицы;
	
КонецФункции

&НаСервере
Процедура СкопироватьСтрокиНаСервере(ИмяТаблицы)
	
	ОбщегоНазначения.СкопироватьСтрокиВБуферОбмена(Объект[ИмяТаблицы], 
		Элементы[ИмяТаблицы].ВыделенныеСтроки, Объект.Ссылка.Метаданные().Имя);

КонецПроцедуры

&НаСервере
Функция ВставитьСтрокиНаСервере(ИмяТаблицы)
	
	ПараметрыВставки = ОбработкаТабличныхЧастей.ПолучитьПараметрыВставкиДанныхИзБуфераОбмена(Объект.Ссылка, ИмяТаблицы);
	ОпределитьСписокСвойствДляВставкиИзБуфера(ПараметрыВставки);
	ОбработкаВыбораПодборВставкаИзБуфераНаСервере(ПараметрыВставки, ПараметрыВставки.ИмяТаблицы);
	
	Возврат ПараметрыВставки.КоличествоДобавленныхСтрок;
	
КонецФункции

&НаСервере
Процедура ОбработкаВыбораПодборВставкаИзБуфераНаСервере(ВыбранноеЗначение, ИмяТаблицы)

	ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИмяТаблицы);
			
КонецПроцедуры


&НаСервере
Процедура ОпределитьСписокСвойствДляВставкиИзБуфера(ПараметрыВставки)
	
	СписокСвойств = Новый Массив;

	Если ПараметрыВставки.ИмяТаблицы = "Товары" Тогда
		СписокСвойств.Добавить("Номенклатура");
		СписокСвойств.Добавить("ЕдиницаИзмерения");
		СписокСвойств.Добавить("Коэффициент");
		СписокСвойств.Добавить("Количество");
		СписокСвойств.Добавить("Цена");
		СписокСвойств.Добавить("СтавкаНДС");
		СписокСвойств.Добавить("НДСВидОперацииРеализации");
		СписокСвойств.Добавить("СтавкаАкциза");
		
		Если ПараметрыВставки.ИсточникИДокументОдногоВида Тогда 			
			СписокСвойств.Добавить("АкцизВидОперацииРеализации");	
		КонецЕсли;
		
		Если ПараметрыВставки.ПоказыватьСчетаУчетаВДокументах Тогда
			
			СписокСвойств.Добавить("СчетУчетаБУ");				
			СписокСвойств.Добавить("СчетУчетаНУ");				
			СписокСвойств.Добавить("СчетУчетаНДСПоРеализации");		
			
			Если ПараметрыВставки.ИсточникИДокументОдногоВида Тогда
				СписокСвойств.Добавить("СчетДоходовБУ");	
				СписокСвойств.Добавить("СубконтоДоходовБУ1");
				СписокСвойств.Добавить("СубконтоДоходовБУ2");
				СписокСвойств.Добавить("СубконтоДоходовБУ3");
				
				СписокСвойств.Добавить("СчетДоходовНУ");	
				СписокСвойств.Добавить("СубконтоДоходовНУ1");
				СписокСвойств.Добавить("СубконтоДоходовНУ2");
				СписокСвойств.Добавить("СубконтоДоходовНУ3");
				
				СписокСвойств.Добавить("СчетСписанияСебестоимостиБУ");	
				СписокСвойств.Добавить("СубконтоСписанияСебестоимостиБУ1");
				СписокСвойств.Добавить("СубконтоСписанияСебестоимостиБУ2");
				СписокСвойств.Добавить("СубконтоСписанияСебестоимостиБУ3");
				
				СписокСвойств.Добавить("СчетСписанияСебестоимостиНУ");	
				СписокСвойств.Добавить("СубконтоСписанияСебестоимостиНУ1");
				СписокСвойств.Добавить("СубконтоСписанияСебестоимостиНУ2");
				СписокСвойств.Добавить("СубконтоСписанияСебестоимостиНУ3"); 				
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ПараметрыВставки.ИмяТаблицы = "Услуги" Тогда
		
		СписокСвойств.Добавить("Номенклатура");
		СписокСвойств.Добавить("Содержание");
		СписокСвойств.Добавить("Количество");
		СписокСвойств.Добавить("Цена");
		СписокСвойств.Добавить("СтавкаНДС");
		СписокСвойств.Добавить("НДСВидОперацииРеализации");
		
		
		Если ПараметрыВставки.ПоказыватьСчетаУчетаВДокументах Тогда
			
			СписокСвойств.Добавить("СчетУчетаНДСПоРеализации");	
			
			Если ПараметрыВставки.ИсточникИДокументОдногоВида Тогда 		
				СписокСвойств.Добавить("СчетДоходовБУ");	
				СписокСвойств.Добавить("СубконтоДоходовБУ1");
				СписокСвойств.Добавить("СубконтоДоходовБУ2");
				СписокСвойств.Добавить("СубконтоДоходовБУ3");
				
				СписокСвойств.Добавить("СчетДоходовНУ");	
				СписокСвойств.Добавить("СубконтоДоходовНУ1");
				СписокСвойств.Добавить("СубконтоДоходовНУ2");
				СписокСвойств.Добавить("СубконтоДоходовНУ3");
				
			КонецЕсли;   	
			
		КонецЕсли;
	КонецЕсли;    	
	
	ПараметрыВставки.СписокСвойств = ОбработкаТабличныхЧастей.ПолучитьСписокСвойствИмеющихсяВТаблицеДанных(
	ПараметрыВставки.Данные, СписокСвойств);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьТабличнуюЧасть(ИмяТабличнойЧасти, СинонимТабличнойЧасти)
	
	ПараметрыФормы = ПолучитьПараметрыОбработкиТабличнойЧасти(ИмяТабличнойЧасти, СинонимТабличнойЧасти);
	Если ПараметрыФормы <> Неопределено Тогда
		ОткрытьФорму("Обработка.ОбработкаТабличнойЧастиДокументов.Форма.Форма", ПараметрыФормы,
			ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Функция ПолучитьПараметрыОбработкиТабличнойЧасти(ИмяТабличнойЧасти, СинонимТабличнойЧасти)
	
	ПараметрыОбработки = Новый Структура;
	
	ПараметрыОбработки.Вставить("АдресХранилищаТабличнойЧасти", ПоместитьТабличнуюЧастьВоВременноеХранилищеНаСервере(ИмяТабличнойЧасти));
	ПараметрыОбработки.Вставить("ДокументСсылка"              , Объект.Ссылка);
	ПараметрыОбработки.Вставить("ДокументДата"                , Объект.Дата);
	ПараметрыОбработки.Вставить("ДокументВалюта"              , Объект.ВалютаДокумента);
	ПараметрыОбработки.Вставить("ДокументКурс"                , Объект.КурсВзаиморасчетов);
	ПараметрыОбработки.Вставить("ДокументКратность"           , Объект.КратностьВзаиморасчетов);
	ПараметрыОбработки.Вставить("ДокументСуммаВключаетНДС"    , Объект.СуммаВключаетНДС);
	ПараметрыОбработки.Вставить("ДокументУчитыватьНДС"        , Объект.УчитыватьНДС);
	ПараметрыОбработки.Вставить("ДокументНДСВключенВСтоимость", Ложь);
	ПараметрыОбработки.Вставить("ИмяТаблицы"                  , ИмяТабличнойЧасти);
	ПараметрыОбработки.Вставить("Заголовок"                   , СинонимТабличнойЧасти);
	
	СтруктураРеквизитов          = Новый Структура;
	СтруктураСвязанныхРеквизитов = Новый Структура;
	
	СтруктураРеквизитов.Вставить("Содержание");
	СтруктураРеквизитов.Вставить("Количество");
	СтруктураРеквизитов.Вставить("Цена");
	СтруктураРеквизитов.Вставить("СтавкаНДС");
	СтруктураРеквизитов.Вставить("СчетУчетаНДСПоРеализации");
	СтруктураРеквизитов.Вставить("НДСВидОперацииРеализации");
	
	СтруктураРеквизитов.Вставить("СчетДоходовБУ");
	СтруктураРеквизитов.Вставить("СубконтоДоходовБУ1");
	СтруктураРеквизитов.Вставить("СубконтоДоходовБУ2");
	СтруктураРеквизитов.Вставить("СубконтоДоходовБУ3");
	
	СтруктураСвязанныхРеквизитов.Вставить("СчетДоходовБУ", "СубконтоДоходовБУ1,СубконтоДоходовБУ2,СубконтоДоходовБУ3");
	
	ПараметрыОбработки.Вставить("СтруктураРеквизитов", СтруктураРеквизитов);
	ПараметрыОбработки.Вставить("СтруктураСвязанныхРеквизитов", СтруктураСвязанныхРеквизитов);
	
	ВидимыеКолонки = Новый Массив;
	ПолучитьВидимыеКолонкиТабличнойЧасти(Элементы[ИмяТабличнойЧасти], Элементы[ИмяТабличнойЧасти].ПутьКДанным + ".", ВидимыеКолонки);
	ПараметрыОбработки.Вставить("ВидимыеКолонки", ВидимыеКолонки);

	Возврат ПараметрыОбработки;
	
КонецФункции

&НаСервере
Функция ПолучитьВидимыеКолонкиТабличнойЧасти(ЭлементТабличнаяЧасть, ПутьКДаннымТаблицы, МассивКолонок)
	
	Для Каждого Элемент Из ЭлементТабличнаяЧасть.ПодчиненныеЭлементы Цикл
		Если ТипЗнч(Элемент) = Тип("ГруппаФормы") Тогда
			ПолучитьВидимыеКолонкиТабличнойЧасти(Элемент, ПутьКДаннымТаблицы, МассивКолонок);
		ИначеЕсли ТипЗнч(Элемент) = Тип("ПолеФормы") И Элемент.Видимость Тогда
			МассивКолонок.Добавить(СтрЗаменить(Элемент.ПутьКДанным, ПутьКДаннымТаблицы, ""));
		КонецЕсли;
	КонецЦикла;

КонецФункции

&НаСервере
Процедура ДобавитьПоШтрихкодуНаСервере(ДанныеШтрихкода) 

	ДанныеШтрихкода.Вставить("ФорматBase64", Истина);
	РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ДекодироватьШтрихкодДанныхBase64(ДанныеШтрихкода);
	Штрихкод = ДанныеШтрихкода.Штрихкод;
	ШтрихкодНоменклатуры = Штрихкод;
	
	ТаблицаНоменклатурыПоШтрихкоду = РегистрыСведений.ШтрихкодыНоменклатуры.НоменклатураПоШтрихкоду(ШтрихкодНоменклатуры);
	Если ТаблицаНоменклатурыПоШтрихкоду.Количество() = 1 Тогда
		ДобавитьНоменклатуруПоШтрихкодуНаСервере(ТаблицаНоменклатурыПоШтрихкоду[0].Номенклатура, ШтрихкодНоменклатуры, "");
	Иначе
		ТекстСообщения = НСтр("ru = 'Не найдена номенклатура, соответствующая штрихкоду <%1>!'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ШтрихкодНоменклатуры);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

#Область СчетаУчета

&НаСервере
Процедура УстановитьВидимостьСчетовУчета()
	
	ЭлементыСчетов = Новый Массив(); 
	ЭлементыСчетов.Добавить("ТоварыСчетУчетаБУ");
	ЭлементыСчетов.Добавить("ТоварыСчетУчетаНДСПоРеализации");
	ЭлементыСчетов.Добавить("ТоварыСчетДоходовБУ");
	ЭлементыСчетов.Добавить("ТоварыГруппаСубконтоСчетаБУ");
	ЭлементыСчетов.Добавить("ТоварыСчетСписанияСебестоимостиБУ");
	ЭлементыСчетов.Добавить("ТоварыГруппаСубконтоСчетаСебестоимостиБУ");
	
	ЭлементыСчетов.Добавить("УслугиСчетУчетаНДСПоРеализации");
	ЭлементыСчетов.Добавить("УслугиСчетДоходовБУ");
	ЭлементыСчетов.Добавить("УслугиГруппаСубконтоСчетаБУ");
	
	ЭлементыСчетов.Добавить("СчетКасса");
		
	СчетаУчетаВДокументах.УстановитьВидимостьСчетовУчета(Элементы, ЭлементыСчетов);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция НачатьЗаполнениеСчетовУчета(ПричиныИзменения, Объект = Неопределено, СтрокаСписка = Неопределено, КонтейнерОбъект = Неопределено, КонтейнерСтрокаСписка = Неопределено)

	// Код этой функции сформирован автоматически с помощью СчетаУчетаВДокументах.КодФункцииНачатьЗаполнениеСчетовУчета()

	ПараметрыЗаполнения = СчетаУчетаВДокументахКлиентСервер.НовыйПараметрыЗаполнения(
		"ЧекККМ",
		ПричиныИзменения,
		Объект,
		СтрокаСписка,
		КонтейнерОбъект,
		КонтейнерСтрокаСписка);

	// 1. Заполняемые реквизиты
	
	// НоваяСтрокаТовары
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("НоваяСтрокаТовары") <> Неопределено Тогда
		ПараметрыЗаполнения.Заполнять = Истина;
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.НДСВидОперацииРеализации");
	КонецЕсли;
	
	// НоваяСтрокаУслуги
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("НоваяСтрокаУслуги") <> Неопределено Тогда
		ПараметрыЗаполнения.Заполнять = Истина;
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.НДСВидОперацииРеализации");
	КонецЕсли;
	
	// Товары.Номенклатура
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Товары.Номенклатура") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчетаБУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчетаНДСПоРеализации");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетДоходовБУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СубконтоДоходовБУ1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СубконтоДоходовБУ2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СубконтоДоходовБУ3");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетСписанияСебестоимостиБУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СубконтоСписанияСебестоимостиБУ1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СубконтоСписанияСебестоимостиБУ2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СубконтоСписанияСебестоимостиБУ3");
	КонецЕсли;

	// Организация
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Организация") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчетаБУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчетаНДСПоРеализации");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетДоходовБУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СубконтоДоходовБУ1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СубконтоДоходовБУ2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СубконтоДоходовБУ3");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетСписанияСебестоимостиБУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СубконтоСписанияСебестоимостиБУ1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СубконтоСписанияСебестоимостиБУ2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СубконтоСписанияСебестоимостиБУ3");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СчетДоходовБУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СубконтоДоходовБУ1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СубконтоДоходовБУ2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СубконтоДоходовБУ3");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СчетУчетаНДСПоРеализации");
	КонецЕсли;

	// Дата
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Дата") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчетаБУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчетаНДСПоРеализации");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетДоходовБУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СубконтоДоходовБУ1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СубконтоДоходовБУ2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СубконтоДоходовБУ3");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетСписанияСебестоимостиБУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СубконтоСписанияСебестоимостиБУ1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СубконтоСписанияСебестоимостиБУ2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СубконтоСписанияСебестоимостиБУ3");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СчетДоходовБУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СубконтоДоходовБУ1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СубконтоДоходовБУ2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СубконтоДоходовБУ3");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СчетУчетаНДСПоРеализации");
	КонецЕсли;

	// УчитыватьНДС
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("УчитыватьНДС") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчетаНДСПоРеализации");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.НДСВидОперацииРеализации");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СчетУчетаНДСПоРеализации");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.НДСВидОперацииРеализации");
	КонецЕсли;

	// Товары.СчетДоходовБУ
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Товары.СчетДоходовБУ") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СубконтоДоходовБУ1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СубконтоДоходовБУ2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СубконтоДоходовБУ3");
	КонецЕсли;

	// Товары.СчетСписанияСебестоимостиБУ
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Товары.СчетСписанияСебестоимостиБУ") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СубконтоСписанияСебестоимостиБУ1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СубконтоСписанияСебестоимостиБУ2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СубконтоСписанияСебестоимостиБУ3");
	КонецЕсли;

	// Услуги.Номенклатура
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Услуги.Номенклатура") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СчетДоходовБУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СубконтоДоходовБУ1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СубконтоДоходовБУ2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СубконтоДоходовБУ3");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СчетУчетаНДСПоРеализации");
	КонецЕсли;

	// Услуги.СчетДоходовБУ
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Услуги.СчетДоходовБУ") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СубконтоДоходовБУ1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СубконтоДоходовБУ2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СубконтоДоходовБУ3");
	КонецЕсли;

	// 2. (если требуется) Передадим на сервер данные, необходимые для заполнения
	Если ПараметрыЗаполнения.Свойство("Контейнер") Тогда
		// Товары.Номенклатура
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Товары.Номенклатура") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаБУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДСПоРеализации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "УчитыватьНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетДоходовБУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоДоходовБУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоДоходовБУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоДоходовБУ3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетСписанияСебестоимостиБУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоСписанияСебестоимостиБУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоСписанияСебестоимостиБУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоСписанияСебестоимостиБУ3");
		КонецЕсли;

		// Организация
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Организация") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаБУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДСПоРеализации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "УчитыватьНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетДоходовБУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоДоходовБУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоДоходовБУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоДоходовБУ3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетСписанияСебестоимостиБУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоСписанияСебестоимостиБУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоСписанияСебестоимостиБУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоСписанияСебестоимостиБУ3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетДоходовБУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоДоходовБУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоДоходовБУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоДоходовБУ3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДСПоРеализации");
		КонецЕсли;

		// Дата
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Дата") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаБУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДСПоРеализации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "УчитыватьНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетДоходовБУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоДоходовБУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоДоходовБУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоДоходовБУ3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетСписанияСебестоимостиБУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоСписанияСебестоимостиБУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоСписанияСебестоимостиБУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоСписанияСебестоимостиБУ3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетДоходовБУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоДоходовБУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоДоходовБУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоДоходовБУ3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДСПоРеализации");
		КонецЕсли;

		// УчитыватьНДС
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("УчитыватьНДС") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "УчитыватьНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДСПоРеализации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "НДСВидОперацииРеализации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДСПоРеализации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "НДСВидОперацииРеализации");
		КонецЕсли;

		// Товары.СчетДоходовБУ
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Товары.СчетДоходовБУ") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетДоходовБУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоДоходовБУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоДоходовБУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоДоходовБУ3");
		КонецЕсли;

		// Товары.СчетСписанияСебестоимостиБУ
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Товары.СчетСписанияСебестоимостиБУ") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетСписанияСебестоимостиБУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоСписанияСебестоимостиБУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоСписанияСебестоимостиБУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоСписанияСебестоимостиБУ3");
		КонецЕсли;

		// Услуги.Номенклатура
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Услуги.Номенклатура") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетДоходовБУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоДоходовБУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоДоходовБУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоДоходовБУ3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДСПоРеализации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "УчитыватьНДС");
		КонецЕсли;

		// Услуги.СчетДоходовБУ
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Услуги.СчетДоходовБУ") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетДоходовБУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоДоходовБУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоДоходовБУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоДоходовБУ3");
		КонецЕсли;

	КонецЕсли; // Нужно передавать на сервер данные заполнения
	
	Возврат ПараметрыЗаполнения;

КонецФункции

&НаСервере
Процедура ЗаполнитьСчетаУчета(ПричиныИзмененияСчетовУчета, ИмяРеквизита)
	
	Если Не СчетаУчетаВДокументахКлиентСервер.МожноНачатьЗаполнениеСчетовУчета(ИмяРеквизита, ПричиныИзмененияСчетовУчета) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗаполнения = НачатьЗаполнениеСчетовУчета(ПричиныИзмененияСчетовУчета, Объект);
	ИзмененныеЗначения = СчетаУчетаВДокументах.ЗаполнитьОбъектПриИзменении(ПараметрыЗаполнения);
	
	Если ЗначениеЗаполнено(ИзмененныеЗначения)
		И СчетаУчетаВДокументахВызовСервераПовтИсп.ПользовательУправляетСчетамиУчета() Тогда
		ПоказатьСообщениеОЗаполненииСчетовУчета(Объект.Ссылка);
	КонецЕсли;
	
	Если СчетаУчетаВДокументахВызовСервераПовтИсп.ПользовательУправляетСчетамиУчета() Тогда
		Для Каждого ИмяТабличнойЧасти Из СчетаУчетаВДокументахКлиентСервер.ТабличныеЧастиКЗаполнению(ПараметрыЗаполнения.КЗаполнению) Цикл
			
			Если ИмяТабличнойЧасти = "Товары" Тогда
				
				ПоляОбъектаДоходБУ  = Новый Структура("Субконто1, Субконто2, Субконто3",
											 "СубконтоДоходовБУ1", "СубконтоДоходовБУ2", "СубконтоДоходовБУ3");
				
				ПоляОбъектаСебестБУ = Новый Структура("Субконто1, Субконто2, Субконто3",
											 "СубконтоСписанияСебестоимостиБУ1", "СубконтоСписанияСебестоимостиБУ2", "СубконтоСписанияСебестоимостиБУ3");
				
				ТоварыСчетДоходовБУ = ПараметрыЗаполнения.КЗаполнению.Получить("Товары.СчетДоходовБУ") <> Неопределено;
				ТоварыСчетСебестБУ  = ПараметрыЗаполнения.КЗаполнению.Получить("Товары.СчетСписанияСебестоимостиБУ") <> Неопределено;
				
				Если НЕ (ТоварыСчетДоходовБУ ИЛИ ТоварыСчетСебестБУ) Тогда
					Продолжить;
				КонецЕсли;
				
				Для Каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл
					Если ТоварыСчетДоходовБУ Тогда 
						ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриИзмененииСчета(СтрокаТабличнойЧасти.СчетДоходовБУ, СтрокаТабличнойЧасти, ПоляОбъектаДоходБУ, Истина);
					КонецЕсли;
					Если ТоварыСчетСебестБУ Тогда 
						ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриИзмененииСчета(СтрокаТабличнойЧасти.СчетСписанияСебестоимостиБУ, СтрокаТабличнойЧасти, ПоляОбъектаСебестБУ, Истина);
					КонецЕсли;
				КонецЦикла;

			КонецЕсли;
			
			Если ИмяТабличнойЧасти = "Услуги" Тогда
				
				ПоляОбъектаДоходБУ = Новый Структура("Субконто1, Субконто2, Субконто3",
											 "СубконтоДоходовБУ1", "СубконтоДоходовБУ2", "СубконтоДоходовБУ3");
				
				УслугиСчетДоходовБУ = ПараметрыЗаполнения.КЗаполнению.Получить("Услуги.СчетДоходовБУ") <> Неопределено;
				
				Если НЕ УслугиСчетДоходовБУ Тогда
					Продолжить;
				КонецЕсли;
				
				Для Каждого СтрокаТабличнойЧасти Из Объект.Услуги Цикл
					Если УслугиСчетДоходовБУ Тогда 
						ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриИзмененииСчета(СтрокаТабличнойЧасти.СчетДоходовБУ, СтрокаТабличнойЧасти, ПоляОбъектаДоходБУ, Истина);
					КонецЕсли;
				КонецЦикла;

			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПоказатьСообщениеОЗаполненииСчетовУчета(ОбъектСсылка)
	
	ТекстСообщения = НСтр("ru = 'Счета учета изменены в соответствии со значениями по умолчанию.'");
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ОбъектСсылка, , "Объект");
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Доработки

//ИнтеграцияИСМПТК
#Область МаркировкаИСМПТК
 
&НаКлиенте
Процедура ОбработкаВнешнегоСобытияИСМПТК(ДанныеШтрихкода)

	//Шаг 1.Проверяем, отсканировали Код маркировки (DataMatrix) или обычный штрихкод (EAN)
	ИсходныйШтрихкод = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.Base64ВШтрихкод(ДанныеШтрихкода.Штрихкод);
	ДанныеМаркировки = РозничноеВыбытиеИСМПТКВызовСервера.РазобратьШтриховойКодТовара(ДанныеШтрихкода.Штрихкод, Истина);
	
	//Разобрать ШК не удалось - возможно это не код маркировки и не ЕАН, прерываем добавление.
	Если Не ДанныеМаркировки.Разобран Тогда
		ВыполнитьСтандартноеДобавлениеТовара(ИсходныйШтрихкод, ""); //Добавляем штрихкод стандартным образом.
		Возврат;
	КонецЕсли;
	
	Если ДанныеМаркировки.Свойство("ТипИдентификатораТовара") Тогда
		//Если отсканирован штрихкод товара EAN или код маркировки.
		ЭтоКодМарки	 	  = РозничноеВыбытиеИСМПТККлиент.ЭтоКодМаркировки(ДанныеМаркировки.ТипИдентификатораТовара);
		НормализованныйКМ = РозничноеВыбытиеИСМПТКВызовСервера.НормализованныйШтрихкод(ДанныеМаркировки.ШтрихкодBase64);
	Иначе
		ТекстСообщения = НСтр("ru = 'Не удалось выполнить разбор кода маркировки по шаблону. Возможно не включен учет соответствующей товарной группы.'"); 
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		ВыполнитьСтандартноеДобавлениеТовара(ИсходныйШтрихкод, ""); //Добавляем штрихкод стандартным образом.
		Возврат;
	КонецЕсли;	
	
	//Шаг 2.Проверяем, зарегистрирован ли полученный при разборе данных со сканера EAN из кода маркировки в регистре.
	ЭтоЗарегистрированныйШК  = Ложь;
	ДанныеНоменклатуры 		 = РозничноеВыбытиеИСМПТКПереопределяемый.ПолучитьНоменклатуруПоШтрихкодуВРозничномКонтуре(ДанныеМаркировки.EAN);
	
	Если Не ДанныеНоменклатуры = Неопределено 
		ИЛИ (ТипЗнч(ДанныеНоменклатуры) = Тип("Структура") И Не ДанныеНоменклатуры.Номенклатура = Неопределено) Тогда 
		
		//Шаг 3.Если ШК зарегистрирован, проверяем особенности учета его номенклатуры.
		ЭтоЗарегистрированныйШК = Истина;
		Номенклатура      	 = ДанныеНоменклатуры.Номенклатура; 
		БазоваяЕИ			 = ДанныеНоменклатуры.БазоваяЕдиницаИзмерения;
		ОсобенностьУчета	 = ДанныеНоменклатуры.ОсобенностьУчета;
		ВидПродукцииШК    	 = ПолучитьВидПродукцииПоНоменклатуре(Номенклатура);
		
		Если Не ЭтоКодМарки Тогда //EAN
			
			Если Не ЗначениеЗаполнено(ВидПродукцииШК) Тогда
				//Отсканированный штрихкод - не код маркировки и зарегистрированная номенклатура без особенностей учета,
				//выполняем стандартную обработку штрихкода.
				ВыполнитьСтандартноеДобавлениеТовара(ИсходныйШтрихкод, "");
			Иначе
				УчетТГНоменклатурыВключен = РозничноеВыбытиеИСМПТКВызовСервера.ПроверитьАктивностьОпцииУчетаПоТГноменклатуры(ВидПродукцииШК);
				Если Не УчетТГНоменклатурыВключен Тогда
					ВыполнитьСтандартноеДобавлениеТовара(ИсходныйШтрихкод, "");
				Иначе
					//Это не код маркировки, но зарегистрированная номенклатура с особенностями учета - требуется открыть форму запроса данных КМ.
					ДобавлениеБезКодаМаркировкиПредупреждение(ВидПродукцииШК, ДанныеМаркировки, Номенклатура);
				КонецЕсли;
			КонецЕсли;
			
		Иначе //DataMatrix
			Если Не ЗначениеЗаполнено(ВидПродукцииШК) Тогда
				
				Если ЗначениеЗаполнено(ОсобенностьУчета) Тогда
					
					//Это код маркировки, но у номенклатуры указана особенность учета без возможности маркировки 
					ТекстСообщения = НСтр("ru = 'Внимание: код маркировки относится к номенклатуре %1 с особенностью учета без возможности учета маркировки. Добавить код маркировки невозможно.'")
									+ Символы.ПС 
									+ НСтр("ru = 'Товар добавлен без учета кода маркировки.'"); 
					
					ТекстСообщения = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, Номенклатура);
					ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
					
					//Добавляем позицию стандартным механизмом без учета КМ
					ВыполнитьСтандартноеДобавлениеТовара(ДанныеМаркировки.EAN, "");	
					
				Иначе
					
					//Отсканирован код маркировки, но у номенклатуры не заполнена "Особенность учета". 
					//В данном случае не можем проверить включение учета маркировки ТГ, но должны добавить КМ в таблицу.
					//Предупреждаем о проблемах в настройках учета. 
					ТекстОшибки = НСтр("ru = 'Внимание! В Чеке был отсканирован код маркировки ""%1"", связанный с номенклатурой ""%2"".'")
								+ НСтр("ru = 'У данной номенклатуры не заполнена ""Особенностей учета""! Необходимо указать значение соответствующей товарной группы!'");
					ТекстОшибки = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстОшибки, НормализованныйКМ, ДанныеНоменклатуры.Номенклатура);
					ОбщегоНазначенияИСМПТКВызовСервера.СоздатьЗаписьЖурналаРегистрации(НСтр("ru = 'Розничная продажа маркируемого товара'", ОбщегоНазначенияКлиент.КодОсновногоЯзыка()), "Предупреждение",,, ТекстОшибки);
					
					ТекстСообщения = НСтр("ru = 'Внимание! Обнаружены проблемы в настройках учета маркируемой продукции! Требуется сообщить Администратору. Подробности в Журнале регистрации.'"); 
					ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
					
					//Перед добавлением КМ в таблицу проверяем его наличие в списке уже добавленных КМ
					МожноПродолжитьОбработкуКМ = ПроверитьТЧКодыМаркировкиНаНаличиеКМ(НормализованныйКМ);
					Если Не МожноПродолжитьОбработкуКМ Тогда
						ТекстСообщения = НСтр("ru = 'Невозможно добавить код маркировки: он уже присутствует в документе.'"); 
						ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
						Возврат;
					Иначе
						ВыполнитьСтандартноеДобавлениеТовара(ДанныеМаркировки.EAN, НормализованныйКМ);
					КонецЕсли;				
					
				КонецЕсли;

			Иначе
				
				//Это код маркировки и номенклатура с особенностями учета - выполняем дополнительную проверку: включен ли учет этой ТГ в базе.
				УчетТГНоменклатурыВключен = РозничноеВыбытиеИСМПТКВызовСервера.ПроверитьАктивностьОпцииУчетаПоТГноменклатуры(ВидПродукцииШК);
				Если Не УчетТГНоменклатурыВключен Тогда
					
					//В этом случае не можем работать с маркировкой, товар воспринимаем как ном-ру без особенностей учета и обрабатываем ее ввод стандартным механизмом.
					ТекстСообщения = НСтр("ru = 'Внимание: номенклатура %1 имеет особенности учета по маркировке, но учет товарной группы %2 в розничном контуре не включен.'")
									+ Символы.ПС 
									+ НСтр("ru = 'Товар добавлен без учета кода маркировки.'"); 
					
					ТекстСообщения = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, Номенклатура, ВидПродукцииШК);			   
					ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
					
					//Добавляем позицию стандартным механизмом без учета КМ.
					ВыполнитьСтандартноеДобавлениеТовара(ДанныеМаркировки.EAN, "");
					
				Иначе
					
					//Учет маркировки этой ТГ включен, отсканирован КМ и номенклатура настроена корректно - можно выполнять добавление товара и КМ.
					//Но сначала проверим, что ранее в этом чеке такой КМ не сканировался (повторно добавлять нельзя).
					МожноПродолжитьОбработкуКМ = ПроверитьТЧКодыМаркировкиНаНаличиеКМ(НормализованныйКМ);
					Если Не МожноПродолжитьОбработкуКМ Тогда
						ТекстСообщения = НСтр("ru = 'Невозможно добавить код маркировки: он уже присутствует в документе.'"); 
						ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
						Возврат;
					Иначе
						ВыполнитьСтандартноеДобавлениеТовара(ДанныеМаркировки.EAN, НормализованныйКМ);
					КонецЕсли;				
				КонецЕсли;		
			КонецЕсли; 
		КонецЕсли;
	Иначе
		ТекстСообщения = НСтр("ru = 'Не найдена номенклатура, соответствующая штрихкоду <%1>!'");
		ТекстСообщения = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, ДанныеМаркировки.EAN);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры	

&НаСервере
Процедура ВыполнитьСтандартноеДобавлениеТовара(ШтрихкодТовара, КодМаркировкиНормализованный)

	ТаблицаНоменклатурыПоШтрихкоду = РегистрыСведений.ШтрихкодыНоменклатуры.НоменклатураПоШтрихкоду(ШтрихкодТовара);
	
	Если ТаблицаНоменклатурыПоШтрихкоду.Количество() = 1 Тогда
		ДобавитьНоменклатуруПоШтрихкодуНаСервере(ТаблицаНоменклатурыПоШтрихкоду[0].Номенклатура, ШтрихкодТовара, КодМаркировкиНормализованный);
	Иначе
		ТекстСообщения = НСтр("ru = 'Не найдена номенклатура, соответствующая штрихкоду <%1>!'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ШтрихкодТовара);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
функция ПолучитьВидПродукцииПоНоменклатуре(Номенклатура) Экспорт 
	
	Возврат ОбщегоНазначенияИСМПТКПереопределяемый.ПолучитьВидПродукцииПоНоменклатуре(Номенклатура);
		
КонецФункции 

&НаКлиенте
Функция ПроверитьТЧКодыМаркировкиНаНаличиеКМ(КодМарикровки) Экспорт
	
	НайденныеСтроки = Объект.Товары.НайтиСтроки(Новый Структура("КодМаркировки", КодМарикровки));
	
	Возврат ?(НайденныеСтроки.Количество() > 0, Ложь, Истина);	
	
КонецФункции

&НаСервере
Процедура ДобавитьНоменклатуруПоШтрихкодуНаСервере(Номенклатура, Штрихкод = "", КодМаркировки = "")
	
	ТаблицаТовары = Новый ТаблицаЗначений;
	ТаблицаТовары.Колонки.Добавить("Номенклатура");
	ТаблицаТовары.Колонки.Добавить("Количество");
	ТаблицаТовары.Колонки.Добавить("Цена");
	ТаблицаТовары.Колонки.Добавить("ЕдиницаИзмерения");
	ТаблицаТовары.Колонки.Добавить("Штрихкод");
	ТаблицаТовары.Колонки.Добавить("КодМаркировки");
	
	ДанныеОбъекта = Новый Структура("Дата, Организация, УчитыватьНДС, СуммаВключаетНДС, ТипЦен, ВалютаДокумента, КурсВзаиморасчетов, КратностьВзаиморасчетов");
	
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	Если Не ЗначениеЗаполнено(ДанныеОбъекта.ТипЦен) Тогда
		ДанныеОбъекта.Вставить("СпособЗаполненияЦены", Перечисления.СпособыЗаполненияЦен.ПоПродажнымЦенам);
	КонецЕсли;

	Если ЗначениеЗаполнено(Номенклатура) Тогда
		СведенияОНоменклатуре = ОбработкаТабличныхЧастей.ПолучитьСведенияОНоменклатуре(Номенклатура, ДанныеОбъекта);
	Иначе
		СведенияОНоменклатуре = Неопределено;
	КонецЕсли;
	
	СтрокаТаблицаТовары = ТаблицаТовары.Добавить();
	
	СтрокаТаблицаТовары.Номенклатура     = Номенклатура;
	СтрокаТаблицаТовары.Количество       = 1;
	СтрокаТаблицаТовары.Цена             = ?(СведенияОНоменклатуре = Неопределено, 0, СведенияОНоменклатуре.Цена);
	СтрокаТаблицаТовары.ЕдиницаИзмерения = ?(СведенияОНоменклатуре = Неопределено, Неопределено, СведенияОНоменклатуре.БазоваяЕдиницаИзмерения);
	СтрокаТаблицаТовары.Штрихкод         = Штрихкод;
	СтрокаТаблицаТовары.КодМаркировки    = КодМаркировки;
	
	Значение = Новый Структура("АдресПодобраннойНоменклатурыВХранилище, КоличествоДобавленныхСтрок", ПоместитьВоВременноеХранилище(ТаблицаТовары, УникальныйИдентификатор));
	
	ОбработкаВыбораПодборНаСервере(Значение, "Товары");
	
КонецПроцедуры 

#Область ОбработкаДействий_ФормаВводаКодаМаркировки

&НаКлиенте
Процедура ДобавлениеБезКодаМаркировкиПредупреждение(ВидПродукции, ДанныеШтрихкода, Номенклатура) Экспорт
	
	ПараметрыОткрытияФормы = Новый Структура();
	ПараметрыОткрытияФормы.Вставить("ВидПродукции",     ВидПродукции);
	ПараметрыОткрытияФормы.Вставить("Номенклатура",     Номенклатура);
	ПараметрыОткрытияФормы.Вставить("Характеристика",   Неопределено);
	ПараметрыОткрытияФормы.Вставить("ЕдиницаИзмерения", Неопределено);
	ПараметрыОткрытияФормы.Вставить("ДанныеШтрихкода",  ДанныеШтрихкода);
	
	РежимОткрытия = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	
	ОткрытьФорму("Обработка.РозничноеВыбытиеМаркированнойПродукцииИСМПТК.Форма.ФормаВводаКодаМаркировки", ПараметрыОткрытияФормы, ЭтотОбъект,,,,, РежимОткрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура ВводКодаМаркировкиПослеПредупрежденияИСМПТК(ИсходныеДанные, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ИсходныеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;		
	
	//Обрабатываем штрихкод как маркируемую продукцию, т.к. пользователь указал Код маркировки после предупреждения
	ДанныеКодаМаркировки = ИсходныеДанные.ИсходныеДанные;
	
	//Сначала проверяем КМ на дубль в таблице марок
	КодМаркировкиBase64 = ДанныеКодаМаркировки.Штрихкод;
	НормализованныйКМ   = РозничноеВыбытиеИСМПТКВызовСервера.НормализованныйШтрихкод(КодМаркировкиBase64); 
	МожноПродолжитьОбработкуКМ = ПроверитьТЧКодыМаркировкиНаНаличиеКМ(НормализованныйКМ);
	
	Если Не МожноПродолжитьОбработкуКМ Тогда
		ТекстСообщения = НСтр("ru = 'Невозможно добавить код маркировки: он уже присутствует в документе.'");	
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ДанныеМаркировки = РозничноеВыбытиеИСМПТКВызовСервера.РазобратьШтриховойКодТовара(КодМаркировкиBase64, Истина);
	//Всегда ДанныеМаркировки.Разобран, т.к. некорректный ввод обрабатывается в форме запроса КМ.
	ВыполнитьСтандартноеДобавлениеТовара(ДанныеМаркировки.EAN, НормализованныйКМ);  
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавлениеКМКакНемаркированногоТовараИСМПТК(ИсходныеДанные, КэшированныеЗначения) Экспорт
	
	//Обрабатываем штрихкод как немаркируемую продукцию, т.к. пользователь отказался от указания КМ
	//Т.е. используем стандартный механизм добавления ШК
	Если ИсходныеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьСтандартноеДобавлениеТовара(ИсходныеДанные.ИсходныеДанные.Штрихкод, "");
		
КонецПроцедуры

#КонецОбласти

#КонецОбласти 
 //Конец ИнтеграцияИСМПТК

&НаКлиенте
Процедура РеквизитыОрганизацииСсылкаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	//Проверка заполненности реквизитов организации (касса)
	ПроверкаРеквизитовОрганизацииКлиент.РеквизитыОрганизацииСсылкаОбработкаНавигационнойСсылки(Объект.Организация, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСчетДоходовБУПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.Товары.ТекущиеДанные;
	
	// БУ
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
								 "СубконтоДоходовБУ1", "СубконтоДоходовБУ2", "СубконтоДоходовБУ3");

	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриИзмененииСчета(СтрокаТаблицы.СчетДоходовБУ, СтрокаТаблицы, ПоляОбъекта, Истина);

	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДоходовБУ", "СчетДоходовБУ", "Товары");
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура, СчетДоходовБУ, 
		|СубконтоДоходовБУ1, СубконтоДоходовБУ2, СубконтоДоходовБУ3");
		
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, СтрокаТаблицы);
	
	ДанныеОбъекта = Новый Структура("Организация");
			
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, СтрокаТаблицы);
	
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
		
	ТоварыСчетДоходовБУПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ДанныеСтрокиТаблицы);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ТоварыСчетДоходовБУПриИзмененииНаСервере(СтрокаТабличнойЧасти, ДанныеОбъекта)
	
	ПроцедурыБухгалтерскогоУчета.ПроверитьВладельцаСубконтоПодразделение(СтрокаТабличнойЧасти, 
	                                        ДанныеОбъекта.Организация, 
	                                        Новый Структура("НазваниеСубконтоБУ1, НазваниеСубконтоБУ2, НазваниеСубконтоБУ3, 
	                                                        |СубконтоБУ1, СубконтоБУ2, СубконтоБУ3",
	                                                        "СубконтоДоходовБУ1", "СубконтоДоходовБУ2", "СубконтоДоходовБУ3", 
	                                                        СтрокаТабличнойЧасти.СубконтоДоходовБУ1, СтрокаТабличнойЧасти.СубконтоДоходовБУ2, СтрокаТабличнойЧасти.СубконтоДоходовБУ3));
															
	СчетаУчета = Новый Структура("СчетДоходовБУ, СубконтоДоходовБУ1,
								 |СубконтоДоходовБУ2, СубконтоДоходовБУ3", СтрокаТабличнойЧасти.СчетДоходовБУ,
								 СтрокаТабличнойЧасти.СубконтоДоходовБУ1, СтрокаТабличнойЧасти.СубконтоДоходовБУ2,
								 СтрокаТабличнойЧасти.СубконтоДоходовБУ3);

	ПроцедурыБухгалтерскогоУчета.ЗаполнитьАналитикуСчетаТабличнойЧасти(СтрокаТабличнойЧасти, СчетаУчета, "СубконтоДоходовБУ", "СчетДоходовБУ", "СубконтоДоходовБУ");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСчетСписанияСебестоимостиБУПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.Товары.ТекущиеДанные;
	
	// БУ
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
								 "СубконтоСписанияСебестоимостиБУ1", "СубконтоСписанияСебестоимостиБУ2", "СубконтоСписанияСебестоимостиБУ3");

	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриИзмененииСчета(СтрокаТаблицы.СчетСписанияСебестоимостиБУ, СтрокаТаблицы, ПоляОбъекта, Истина);

	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "СписанияСебестоимостиБУ", "СчетСписанияСебестоимостиБУ", "Товары");
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура, СчетСписанияСебестоимостиБУ, 
		|СубконтоСписанияСебестоимостиБУ1, СубконтоСписанияСебестоимостиБУ2, СубконтоСписанияСебестоимостиБУ3");
		
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, СтрокаТаблицы);
	
	ДанныеОбъекта = Новый Структура("Организация");
			
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, СтрокаТаблицы);
	
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
		
	ТоварыСчетСписанияСебестоимостиБУПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ДанныеСтрокиТаблицы);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ТоварыСчетСписанияСебестоимостиБУПриИзмененииНаСервере(СтрокаТабличнойЧасти, ДанныеОбъекта)
	
	ПроцедурыБухгалтерскогоУчета.ПроверитьВладельцаСубконтоПодразделение(СтрокаТабличнойЧасти, 
	                                        ДанныеОбъекта.Организация, 
	                                        Новый Структура("НазваниеСубконтоБУ1, НазваниеСубконтоБУ2, НазваниеСубконтоБУ3, 
	                                                        |СубконтоБУ1, СубконтоБУ2, СубконтоБУ3",
	                                                        "СубконтоСписанияСебестоимостиБУ1", "СубконтоСписанияСебестоимостиБУ2", "СубконтоСписанияСебестоимостиБУ3", 
	                                                        СтрокаТабличнойЧасти.СубконтоСписанияСебестоимостиБУ1, СтрокаТабличнойЧасти.СубконтоСписанияСебестоимостиБУ2, СтрокаТабличнойЧасти.СубконтоСписанияСебестоимостиБУ3));
															
	СчетаУчета = Новый Структура("СчетСписанияСебестоимостиБУ, СубконтоСписанияСебестоимостиБУ1,
								 |СубконтоСписанияСебестоимостиБУ2, СубконтоСписанияСебестоимостиБУ3", СтрокаТабличнойЧасти.СчетСписанияСебестоимостиБУ,
								 СтрокаТабличнойЧасти.СубконтоСписанияСебестоимостиБУ1, СтрокаТабличнойЧасти.СубконтоСписанияСебестоимостиБУ2,
								 СтрокаТабличнойЧасти.СубконтоСписанияСебестоимостиБУ3);

	ПроцедурыБухгалтерскогоУчета.ЗаполнитьАналитикуСчетаТабличнойЧасти(СтрокаТабличнойЧасти, СчетаУчета, "СубконтоСписанияСебестоимостиБУ", "СчетСписанияСебестоимостиБУ", "СубконтоСписанияСебестоимостиБУ");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСубконтоДоходовБУПриИзменении(Элемент)
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДоходовБУ", "СчетДоходовБУ", "Товары");	
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСубконтоДоходовБУ1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаТаблицы = Элементы.Товары.ТекущиеДанные;		
	СубконтоНачалоВыбора(Элемент, "СубконтоДоходовБУ",  1, "СчетДоходовБУ", СтрокаТаблицы, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСубконтоДоходовБУ2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаТаблицы = Элементы.Товары.ТекущиеДанные;		
	СубконтоНачалоВыбора(Элемент, "СубконтоДоходовБУ",  2, "СчетДоходовБУ", СтрокаТаблицы, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСубконтоДоходовБУ3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаТаблицы = Элементы.Товары.ТекущиеДанные;		
	СубконтоНачалоВыбора(Элемент, "СубконтоДоходовБУ",  3, "СчетДоходовБУ", СтрокаТаблицы, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСубконтоСписанияСебестоимостиБУПриИзменении(Элемент)
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "СписанияСебестоимостиБУ", "СчетСписанияСебестоимостиБУ", "Товары");	
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСубконтоСписанияСебестоимостиБУ1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаТаблицы = Элементы.Товары.ТекущиеДанные;		
	СубконтоНачалоВыбора(Элемент, "СубконтоСписанияСебестоимостиБУ",  1, "СчетСписанияСебестоимостиБУ", СтрокаТаблицы, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСубконтоСписанияСебестоимостиБУ2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаТаблицы = Элементы.Товары.ТекущиеДанные;		
	СубконтоНачалоВыбора(Элемент, "СубконтоСписанияСебестоимостиБУ",  2, "СчетСписанияСебестоимостиБУ", СтрокаТаблицы, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСубконтоСписанияСебестоимостиБУ3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаТаблицы = Элементы.Товары.ТекущиеДанные;		
	СубконтоНачалоВыбора(Элемент, "СубконтоСписанияСебестоимостиБУ",  3, "СчетСписанияСебестоимостиБУ", СтрокаТаблицы, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
// Структура параметров, необходимых для открытия формы считывания кода маркировки.
//
// Возвращаемое значение:
//  Структура - требуемые параметры:
// * Номенклатура - ОпределяемыйТип.Номенклатура - Номенклатура
// * Характеристика - ОпределяемыйТип.ХарактеристикаНоменклатуры - Характеристика номенклатуры
// * ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции ИС
// * МаркируемаяПродукция - Булево - Истина, если продукция маркируемая
// * ПараметрыСканирования - См. ШтрихкодированиеИСКлиент.ПараметрыСканирования
// * ДанныеШтрихкода - См. ШтрихкодированиеИС.ИнициализироватьДанныеШтрихкода
// * Документ - Произвольный - Ссылка на текущий документ
// * РазрешатьДобавлениеБезКодаМарки - Булево - разрешать добавление строки при отказе от ввода кода маркировки
//
Функция ПараметрыОткрытияФормыВводаКодаМаркировки() Экспорт
	
	ПараметрыОткрытияФормы = Новый Структура;
	
	ПараметрыОткрытияФормы.Вставить("Номенклатура",                    Неопределено);
	ПараметрыОткрытияФормы.Вставить("Характеристика",                  Неопределено);
	ПараметрыОткрытияФормы.Вставить("Серия",                           Неопределено);
	ПараметрыОткрытияФормы.Вставить("ВидПродукции",                    Неопределено);
	ПараметрыОткрытияФормы.Вставить("МаркируемаяПродукция",            Истина);
	ПараметрыОткрытияФормы.Вставить("ПараметрыСканирования",           Неопределено);
	ПараметрыОткрытияФормы.Вставить("ДанныеШтрихкода",                 Неопределено);
	ПараметрыОткрытияФормы.Вставить("Документ",                        Неопределено);
	ПараметрыОткрытияФормы.Вставить("РазрешатьДобавлениеБезКодаМарки", Истина);
	
	Возврат ПараметрыОткрытияФормы;
	
КонецФункции

&НаСервереБезКонтекста
Функция ВидПродукцииИС(ПараметрыНоменклатуры) Экспорт
	
	ОсобенностьУчета = ПараметрыНоменклатуры.ОсобенностьУчета;
	
	Если ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.АлкогольнаяПродукция Тогда
		Возврат Перечисления.ВидыПродукцииИСМПТК.Алкогольная;
	ИначеЕсли ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.ЛегкаяПромышленность Тогда
		Возврат Перечисления.ВидыПродукцииИСМПТК.ЛегкаяПромышленность;
	ИначеЕсли ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.МолочнаяПродукция Тогда
		Возврат Перечисления.ВидыПродукцииИСМПТК.МолочнаяПродукция;
	ИначеЕсли ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.ОбувнаяПродукция Тогда
		Возврат Перечисления.ВидыПродукцииИСМПТК.Обувная;
	ИначеЕсли ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.ТабачнаяПродукция Тогда
		Возврат Перечисления.ВидыПродукцииИСМПТК.Табачная; 
	ИначеЕсли ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.ЛекарственныеПрепараты Тогда
		Возврат Перечисления.ВидыПродукцииИСМПТК.ЛекарственныеПрепараты;
	Иначе
		Возврат Перечисления.ВидыПродукцииИСМПТК.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

&НаСервере
//Заполняет данные о маркированной продукции в табличной части
//
Процедура ЗаполнитьДанныеМаркировки() Экспорт 
	
	Если ВестиУчетМаркируемойПродукцииИСМПТК Тогда 
		
		ТабличнаяЧастьТовары = Объект.Товары;
		
		Для Каждого СтрокаТаблицы Из ТабличнаяЧастьТовары Цикл 
			ЗаполнитьДанныеМаркировкиВСтроке(СтрокаТаблицы);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
//Заполняет данные о маркированной продукции в строке табличной части
//
Процедура ЗаполнитьДанныеМаркировкиВСтроке(СтрокаТабличнойЧасти) Экспорт
	
	//Отражаем признак указания макрировки:
	//Нет (0) - в строке не заполнен код маркировки (КМ), номенклатура не является маркируемым товаром
	//Зеленый (1) - в строке заполнен КМ, товар с особеннсотью учета по маркировке
	//Красный (2) - в строке не заполнен КМ, товар с особенностью учета по маркировке
	//Серый (3) - зарезервировано, не используется
	//Желтый (4) - в строке заполнен КМ, у номенклатуры не заполнена особенность учета			
	
	ОсобенностьУчета        = СтрокаТабличнойЧасти.Номенклатура.ОсобенностьУчета;
	ВидПродукцииИСМПТК      = ВидПродукцииИС(Новый Структура("ОсобенностьУчета", ОсобенностьУчета));
	ЭтоМаркируемаяПродукция = ВидыМаркируемойПродукции.НайтиПоЗначению(ВидПродукцииИСМПТК) <> Неопределено;
	Если ЭтоМаркируемаяПродукция Тогда
		ИндексМарки = ?(ЗначениеЗаполнено(СтрокаТабличнойЧасти.КодМаркировки), 1, 2);
	ИначеЕсли ЗначениеЗаполнено(СтрокаТабличнойЧасти.КодМаркировки) И НЕ ЗначениеЗаполнено(ОсобенностьУчета) Тогда
		ИндексМарки = 4;
	Иначе
		ИндексМарки = 0;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.ВидПродукцииИСМПТК      = ВидПродукцииИСМПТК;
	СтрокаТабличнойЧасти.ЭтоМаркируемаяПродукция = ЭтоМаркируемаяПродукция;
	СтрокаТабличнойЧасти.ИндексМарки             = ИндексМарки;
	
КонецПроцедуры

#КонецОбласти
