#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПеременныеМодуля

Перем мЗакрытиеСмены Экспорт;// Переменная определяет режим в котором происходит запись документа.

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	Если ДанныеЗаполнения <> Неопределено Тогда
		Если ТипДанныхЗаполнения = Тип("Структура") Тогда
			Если ДанныеЗаполнения.Свойство("Основание") Тогда
				ДокументОснование = ДанныеЗаполнения.Основание;
			КонецЕсли;
		ИначеЕсли ТипДанныхЗаполнения = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
			ДокументОснование = ДанныеЗаполнения;
		КонецЕсли;
	
		Если ДокументОснование <> Неопределено Тогда
			ЗаполнитьПоДокументуОснованию(ДокументОснование);
		Иначе
			СуммаВключаетНДС = Истина;
		КонецЕсли;
	Иначе
		ДанныеЗаполнения = Новый Структура;
		СуммаВключаетНДС = Истина;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
	
	ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета(), "Продажа");
	
	Если Не ЗначениеЗаполнено(Контрагент) Тогда 
		Контрагент = Справочники.Контрагенты.ПолучитьРозничногоКонтрагента();
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДоговорКонтрагента) Тогда 
		ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПолучитьДоговорРозничногоКонтрагента(Контрагент, Организация);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДоговорКонтрагента.ТипЦен) Тогда 
		ТипЦен = ДоговорКонтрагента.ТипЦен;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Касса) И ЗначениеЗаполнено(Организация) Тогда 
		Касса = Справочники.Кассы.КассаПоУмолчанию(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)

	Дата = НачалоДня(ОбщегоНазначенияБК.ПолучитьРабочуюДату());
	Ответственный = Пользователи.ТекущийПользователь();
	НомерЧекаККМ = "";
	ОтчетОРозничныхПродажах = Документы.ОтчетОРозничныхПродажах.ПустаяСсылка();
	ИдентификаторУстройства = Справочники.ПодключаемоеОборудование.ПустаяСсылка();
	Оплата.Очистить();
	
	Для Каждого СтрокаТовары Из Товары Цикл
		СтрокаТовары.КодМаркировки = "";
	КонецЦикла;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Контрагент) Тогда 
		Контрагент = Справочники.Контрагенты.ПолучитьРозничногоКонтрагента();
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДоговорКонтрагента) Тогда 
		ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПолучитьДоговорРозничногоКонтрагента(Контрагент, Организация);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВалютаДокумента) Тогда 
		ВалютаДокумента = Константы.ВалютаРегламентированногоУчета.Получить();
	КонецЕсли;
	
	СчетаУчетаВДокументах.ЗаполнитьПередЗаписью(ЭтотОбъект, РежимЗаписи);
	
	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	СуммаДокумента = УчетНДСИАкциза.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Товары") + УчетНДСИАкциза.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Услуги");
	
	Для Каждого СтрокаТЧ Из Услуги Цикл 
		Если Не ЗначениеЗаполнено(СтрокаТЧ.НДСВидОперацииРеализации) Тогда 
			СтрокаТЧ.НДСВидОперацииРеализации = Справочники.ВидыРеализации.РеализацияТМЗ;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	ПользовательУправляетСчетамиУчета = СчетаУчетаВДокументахВызовСервераПовтИсп.ПользовательУправляетСчетамиУчета();
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	Если ВидОперации = Перечисления.ВидыОперацийРозничнаяПродажа.Продажа Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Основание");
	КонецЕсли;
	
	Если Товары.Количество() > 0 
		ИЛИ Услуги.Количество() > 0 Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("Товары");
		МассивНепроверяемыхРеквизитов.Добавить("Услуги");
		
	КонецЕсли;
	
	МассивНепроверяемыхРеквизитов.Добавить("Товары.Количество");
	
	// Проверка: сумма безналичных оплат не должна превышать сумму по реализации товаров и услуг
	СуммаВыручки = Товары.Итог("Сумма") + ?(СуммаВключаетНДС, 0, Товары.Итог("СуммаНДС"))
						+  Услуги.Итог("Сумма") + ?(СуммаВключаетНДС, 0, Услуги.Итог("СуммаНДС"));
	
	Если Оплата.Итог("Сумма") > СуммаВыручки  Тогда
		
		ТекстОписаниеОшибки = НСтр("ru = 'Сумма безналичных оплат превышает сумму выручки от реализации!'");
		ТекстСообщения      = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Список", "Корректность",,, НСтр("ru = 'Безналичные оплаты'"), ТекстОписаниеОшибки);
		
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "Оплата", "Объект", Отказ);
		
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийРозничнаяПродажа.Возврат 
		И НЕ Основание.Пустая() Тогда
		
		ТаблицаСоотвествияТоваров = Основание.Товары.Выгрузить();
		ТаблицаСоотвествияТоваров.Свернуть("Номенклатура, Цена", "Количество");
		ТаблицаСоотвествияТоваров.Индексы.Добавить("Номенклатура");
		
	КонецЕсли;
	
	МассивНоменклатуры    = ОбщегоНазначения.ВыгрузитьКолонку(Товары, "Номенклатура", Истина);
	
	ОбщегоНазначенияБККлиентСервер.УдалитьНеЗаполненныеЭлементыМассива(МассивНоменклатуры);
	
	РеквизитыНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивНоменклатуры, "Услуга");
	
	ИмяСписка = "Товары";
	Для каждого СтрокаТовары Из Товары Цикл
		ЭтоУслуга = Ложь;
		СвойстваНоменклатуры = РеквизитыНоменклатуры[СтрокаТовары.Номенклатура];
		Если СвойстваНоменклатуры <> Неопределено Тогда
			ЭтоУслуга = СвойстваНоменклатуры.Услуга;
		КонецЕсли;
		
		Если НЕ ЭтоУслуга И СтрокаТовары.Количество = 0 Тогда
			
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяСписка, СтрокаТовары.НомерСтроки, "Количество");
			
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка", , 
				НСтр("ru = 'Количество'"), СтрокаТовары.НомерСтроки, ИмяСписка);
				
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , Поле, "Объект", Отказ);
		КонецЕсли;
		
		Если ВидОперации = Перечисления.ВидыОперацийРозничнаяПродажа.Возврат 
			И НЕ Основание.Пустая() Тогда
			СтруктураПоиска = Новый Структура("Номенклатура, Цена", СтрокаТовары.Номенклатура, СтрокаТовары.Цена);
			НайденыеСтроки = ТаблицаСоотвествияТоваров.НайтиСтроки(СтруктураПоиска);
			
			Если НайденыеСтроки.Количество() = 0 Тогда
				КоличествоОснование = 0;
			Иначе
				КоличествоОснование = НайденыеСтроки[0].Количество;
			КонецЕсли;
			
			Если СтрокаТовары.Количество > КоличествоОснование Тогда 
				Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяСписка, СтрокаТовары.НомерСтроки, "Количество");
				
				ТекстСообщения = НСтр("ru = 'Документом ""%1"" было реализовано ""%2"" по цене %3 %4 на ""%5"" ед. меньше, чем возвращается.'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ТекстСообщения,
					СокрЛП(Основание),
					СтрокаТовары.Номенклатура,
					СтрокаТовары.Цена,
					ВалютаДокумента,
					(СтрокаТовары.Количество - КоличествоОснование));
				
				ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка", "Корректность", 
					НСтр("ru = 'Количество'"), СтрокаТовары.НомерСтроки, ИмяСписка, ТекстСообщения);
					
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , Поле, "Объект", Отказ);
			КонецЕсли;
			
			Если НайденыеСтроки.Количество() <> 0 Тогда
				НайденыеСтроки[0].Количество = Макс(НайденыеСтроки[0].Количество - СтрокаТовары.Количество, 0);
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла; 
	
	МассивНепроверяемыхРеквизитов.Добавить("Товары.СчетУчетаБУ");
	МассивНепроверяемыхРеквизитов.Добавить("Услуги.СчетУчетаБУ");
	
	Если НЕ ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНДС(Организация, Дата)
		ИЛИ НЕ УчитыватьНДС Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("Товары.НДСВидОперацииРеализации");
		МассивНепроверяемыхРеквизитов.Добавить("Товары.СтавкаНДС");
		МассивНепроверяемыхРеквизитов.Добавить("Товары.СчетУчетаНДСПоРеализации");
		
		МассивНепроверяемыхРеквизитов.Добавить("Услуги.НДСВидОперацииРеализации");
		МассивНепроверяемыхРеквизитов.Добавить("Услуги.СтавкаНДС");
		МассивНепроверяемыхРеквизитов.Добавить("Услуги.СчетУчетаНДСПоРеализации");
		
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Если НЕ ПолучитьФункциональнуюОпцию("ФормироватьДвижениеВДокументахЧекККМ") Тогда
		Возврат;
	КонецЕсли;
	
	// При наличии документа "Отчет о розничных продажах" движения не формируются
	Если ЗначениеЗаполнено(ОтчетОРозничныхПродажах) Тогда
		Возврат;
	КонецЕсли;
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА
	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
	Если РучнаяКорректировка ИЛИ мЗакрытиеСмены Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПроведения = Документы.ЧекККМ.ПодготовитьПараметрыПроведения(Ссылка, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ИНФОРМАЦИОННОЙ БАЗЫ
	
	// Таблица списанных товаров
	Если ВидОперации = Перечисления.ВидыОперацийРозничнаяПродажа.Продажа Тогда
		ТаблицаСписанныеТовары = УчетТоваров.ПодготовитьТаблицуСписанныеТовары(ПараметрыПроведения.ТаблицаТовары,
		ПараметрыПроведения.Реквизиты, Отказ, Ложь, Ложь);
	Иначе 
		
		// Таблица списанных товаров
		ТаблицаСписанныеТовары = УчетТоваров.ПодготовитьТаблицуВозвращенныеСписанныеТовары(
		ПараметрыПроведения.ТаблицаТовары, ПараметрыПроведения.СписаниеТоваровСчетаУчета,
		ПараметрыПроведения.СписаниеТоваровСписокНоменклатуры, ПараметрыПроведения.Реквизиты, Отказ);

	КонецЕсли;
	
	// Таблица взаиморасчетов с учетом зачета авансов
	ТаблицаВзаиморасчеты = УправлениеВзаиморасчетамиСервер.ПодготовитьТаблицуВзаиморасчетовЗачетАвансов(
	ПараметрыПроведения.ЗачетАвансовТаблицаДокумента, ПараметрыПроведения.ЗачетАвансовРеквизиты, Отказ);
	
	// Таблицы выручки от реализации: собственных товаров и услуг
	ТаблицыРеализация = УчетДоходовРасходов.ПодготовитьТаблицыВыручкиОтРеализации(
	ПараметрыПроведения.РеализацияТаблицаДокумента, ТаблицаВзаиморасчеты,
	ПараметрыПроведения.Реквизиты, Отказ);
	
	ОбщегоНазначенияБКВызовСервера.ДобавитьКолонкуВТаблицуЗначений(ТаблицаВзаиморасчеты, "НомерЖурнала", НСтр("ru = 'АВ'", ОбщегоНазначения.КодОсновногоЯзыка()));
	
	Документы.ЧекККМ.ДобавитьКолонкуСодержание(ТаблицыРеализация.СобственныеТоварыУслуги);
	
	ТаблицаРеализацияТМЗ = УчетТоваров.ПодготовитьТаблицуРеализацияТМЗ(
	ТаблицаСписанныеТовары, ПараметрыПроведения.РеализацияТаблицаДокумента,
	ПараметрыПроведения.Реквизиты, Отказ);
	
	// ФОРМИРОВАНИЕ ДВИЖЕНИЙ
	Если ВидОперации = Перечисления.ВидыОперацийРозничнаяПродажа.Продажа Тогда
		
		УчетТоваров.СформироватьДвиженияСписаниеТоваров(ТаблицаСписанныеТовары,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
		
		УчетДоходовРасходов.СформироватьДвиженияРеализация(
		ТаблицыРеализация.СобственныеТоварыУслуги, ПараметрыПроведения.Реквизиты, Движения, Отказ);
		
		УчетНДСИАкциза.СформироватьДвиженияРеализацияАктивовУслуг(ПараметрыПроведения.ТаблицаНДС, Неопределено,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
	
	Иначе
		
		УчетТоваров.СформироватьДвиженияВозвратТоваровОтПокупателя(ТаблицаСписанныеТовары,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
		
		ТаблицаСобственныеТоварыУслуги = ПодготовитьТаблицуВозвратаОтПокупателя(ТаблицыРеализация.СобственныеТоварыУслуги);
		
		УчетДоходовРасходов.СформироватьДвиженияВозвратТоваровОтПокупателя(
		ТаблицаСобственныеТоварыУслуги, ПараметрыПроведения.Реквизиты, Движения, Отказ);
		
		ПараметрыПроведения.Реквизиты[0].УказанСчетВозвратов = Истина;
		
		УчетНДСИАкциза.СформироватьДвиженияВозвратТоваровОтПокупателя(ПараметрыПроведения.ТаблицаНДС, 
		Неопределено, ПараметрыПроведения.Реквизиты, Движения, Отказ);
		
	КонецЕсли; 
		
	//Сформировать движения переноса задолженности по безналичным платежам
	СформироватьДвиженияПоПлатежам(ПараметрыПроведения.Платежи, Движения, Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейс

#Область УправлениеДоступом

// Процедура ЗаполнитьНаборыЗначенийДоступа по свойствам объекта заполняет наборы значений доступа
// в таблице с полями:
//    НомерНабора     - Число                                     (необязательно, если набор один),
//    ВидДоступа      - ПланВидовХарактеристикСсылка.ВидыДоступа, (обязательно),
//    ЗначениеДоступа - Неопределено, СправочникСсылка или др.    (обязательно),
//    Чтение          - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Добавление      - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Изменение       - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Удаление        - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//
//  Вызывается из процедуры УправлениеДоступомСлужебный.ЗаписатьНаборыЗначенийДоступа(),
// если объект зарегистрирован в "ПодпискаНаСобытие.ЗаписатьНаборыЗначенийДоступа" и
// из таких же процедур объектов, у которых наборы значений доступа зависят от наборов этого
// объекта (в этом случае объект зарегистрирован в "ПодпискаНаСобытие.ЗаписатьЗависимыеНаборыЗначенийДоступа").
//
// Параметры:
//  Таблица      - ТабличнаяЧасть,
//                 РегистрСведенийНаборЗаписей.НаборыЗначенийДоступа,
//                 ТаблицаЗначений, возвращаемая УправлениеДоступом.ТаблицаНаборыЗначенийДоступа().
//
Процедура ЗаполнитьНаборыЗначенийДоступа(Таблица) Экспорт
	
	ОбщегоНазначенияБК.ЗаполнитьНаборыПоОрганизацииСтурктурномуПодразделению(ЭтотОбъект, Таблица, "Организация", "СтруктурноеПодразделение");
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура СформироватьДвиженияПоПлатежам(ТаблицаПлатежей, Движения, Отказ)
	
	Если ТаблицаПлатежей = Неопределено Или ТаблицаПлатежей.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из ТаблицаПлатежей Цикл
		
		Если Не СтрокаТаблицы.ЭтоВозврат Тогда
			ТипАналитикиДт   = "Дт";
			ТипАналитикиКт   = "Кт";
		Иначе 
			ТипАналитикиДт   = "Кт";
			ТипАналитикиКт   = "Дт";
		КонецЕсли;
		
		Если СтрокаТаблицы.СуммаПроводки = 0 Тогда 
			Продолжить;
		КонецЕсли;
		
		Проводка = Движения.Типовой.Добавить();
		
		Проводка.Период       = СтрокаТаблицы.Период;
		Проводка.Организация  = СтрокаТаблицы.Организация;
		Проводка.Сумма        = СтрокаТаблицы.СуммаПроводки;
		Проводка.Содержание   = СтрокаТаблицы.Содержание;
		
		Проводка["Счет" + ТипАналитикиДт] = СтрокаТаблицы.СчетДт;
		Проводка["Счет" + ТипАналитикиКт] = СтрокаТаблицы.СчетКт;
		
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаТаблицы["Субконто" + ТипАналитикиДт + "1"]);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаТаблицы["Субконто" + ТипАналитикиДт + "2"]);
		
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтрокаТаблицы["Субконто" + ТипАналитикиКт + "1"]);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтрокаТаблицы["Субконто" + ТипАналитикиКт + "2"]);
		
		ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
		Проводка, СтрокаТаблицы.СтруктурноеПодразделение, СтрокаТаблицы.СтруктурноеПодразделение);
		
		СвойстваСчетаДт = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
		
		Если СвойстваСчетаДт.Валютный Тогда 
			Проводка.ВалютаДт        = СтрокаТаблицы.ВалютаДокумента;
			Проводка.ВалютнаяСуммаДт = СтрокаТаблицы.СуммаПроводки;
		КонецЕсли;
		
		СвойстваСчетаКт = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
		
		Если СвойстваСчетаКт.Валютный Тогда 
			Проводка.ВалютаКт        = СтрокаТаблицы.ВалютаДокумента;
			Проводка.ВалютнаяСуммаКт = СтрокаТаблицы.СуммаПроводки;
		КонецЕсли;

		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьПоДокументуОснованию(ДокументОснование)
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ЧекККМ") Тогда
		// Заполнение шапки
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДокументОснование, "Организация,Склад, СуммаВключаетНДС, Касса, ТипЦен, УчитыватьНДС");
		
		Основание = ДокументОснование;

		// Заполнение ТЧ Товары
		Документы.ЧекККМ.СкопироватьТабличныеЧасти(ЭтотОбъект, ДокументОснование);
	ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
		
		СчетНаОплатуПокупателю = ДокументОснование;
		ЗаполнитьПоСчетуНаОплатуПокупателю(СчетНаОплатуПокупателю);
		
	КонецЕсли;
КонецПроцедуры

Процедура ЗаполнитьПоСчетуНаОплатуПокупателю(ДокументОснование)
	
	// Заполнение шапки
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДокументОснование, "Организация, Склад, СуммаВключаетНДС, ТипЦен, УчитыватьНДС");
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СчетНаОплатуПокупателю.СуммаВключаетНДС
	|ИЗ
	|	Документ.СчетНаОплатуПокупателю КАК СчетНаОплатуПокупателю
	|ГДЕ
	|	СчетНаОплатуПокупателю.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СчетНаОплатуПокупателюТовары.НомерСтроки КАК НомерСтроки,
	|	СчетНаОплатуПокупателюТовары.Номенклатура КАК Номенклатура,
	|	ЕСТЬNULL(СчетНаОплатуПокупателюТовары.Номенклатура.Услуга, ИСТИНА) КАК ЭтоУслуга,
	|	СчетНаОплатуПокупателюТовары.Цена КАК Цена,
	|	СчетНаОплатуПокупателюТовары.Количество,
	|	СчетНаОплатуПокупателюТовары.Сумма КАК Сумма,
	|	СчетНаОплатуПокупателюТовары.СтавкаНДС,
	|	СчетНаОплатуПокупателюТовары.СуммаНДС	
	|ИЗ
	|	Документ.СчетНаОплатуПокупателю.Товары КАК СчетНаОплатуПокупателюТовары
	|ГДЕ
	|	СчетНаОплатуПокупателюТовары.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ТаблицаРеквизиты = РезультатЗапроса[0].Выгрузить();
	ТаблицаТовары    = РезультатЗапроса[1].Выгрузить();
	
	
	Товары.Загрузить(ТаблицаТовары);
	
КонецПроцедуры

функция ПодготовитьТаблицуСписанныеТовары(ТаблицаТовары, Реквизиты)
	
	СписанныеТовары = УчетТоваров.ПолучитьПустуюТаблицуСписанныеТовары();
	
	Если ТаблицаТовары = Неопределено ИЛИ ТаблицаТовары.Количество() = 0 Тогда
		Возврат СписанныеТовары;
	КонецЕсли;
	
	Для Каждого СтрокаТЧ Из ТаблицаТовары Цикл 
		НоваяСтрока = СписанныеТовары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Реквизиты[0]);
		НоваяСтрока.СуммаСписанияВал = СтрокаТЧ.Себестоимость;
		НоваяСтрока.ОтражатьВБухгалтерскомУчете = Истина;
	КонецЦикла;
	
	Возврат СписанныеТовары;
	
КонецФункции

функция ПодготовитьТаблицуВозвратаОтПокупателя(ТаблицаТовары)
	
	ТаблицаСобственныеТоварыУслуги = ТаблицаТовары.СкопироватьКолонки ();
	
	Для Каждого СтрокаТЧ Из ТаблицаТовары Цикл
		НоваяСтрока = ТаблицаСобственныеТоварыУслуги.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
		НоваяСтрока.Сумма 					= СтрокаТЧ.Сумма * (-1);
		НоваяСтрока.СуммаВзаиморасчетов	= СтрокаТЧ.СуммаВзаиморасчетов * (-1);
	КонецЦикла;
	
	Возврат ТаблицаСобственныеТоварыУслуги;
	
КонецФункции

#КонецОбласти

#Область ОсновнойБлок

мЗакрытиеСмены = Ложь;

#КонецОбласти


#КонецЕсли







